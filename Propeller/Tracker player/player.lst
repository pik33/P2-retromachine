00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 14 F1 07 F1 | 	add	ptra, ##2324
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 54 CE 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 5C DE 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 EC 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 34 80 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a F4 CB 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio012_spin2_dat__
00830 10b 08 C5 01 00 | 	long	@_audio012_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 18 82 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 80 8F 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e 30 25 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 04 20 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 EC 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 C4 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 9C 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 2C 34 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 E4 B3 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     3B 5A 05 F6 | 	mov	COUNT_, #59
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     20 56 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     04 56 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     E8 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     CC 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     68 20 B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     2C 54 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     FC 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     F4 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     C0 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     94 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     A0 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     5C 57 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     80 18 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     40 00 00 FF 
00ac8     EF 7D 06 F6 | 	mov	local10, ##@LR__0459
00acc     04 00 00 FF 
00ad0     D0 0E 06 F1 | 	add	objptr, ##2256
00ad4     07 7D 62 FC | 	wrlong	local10, objptr
00ad8     04 00 00 FF 
00adc     D0 0E 86 F1 | 	sub	objptr, ##2256
00ae0     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00ae4     3F 5D 02 F6 | 	mov	arg01, local11
00ae8     78 FD BF FD | 	call	#_addr
00aec     04 00 00 FF 
00af0     D4 0E 06 F1 | 	add	objptr, ##2260
00af4     07 2B 62 FC | 	wrlong	result1, objptr
00af8     15 5D 02 F6 | 	mov	arg01, result1
00afc     00 5E 06 F6 | 	mov	arg02, #0
00b00     01 00 00 FF 
00b04     A4 0F 86 F1 | 	sub	objptr, ##932
00b08     C8 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b0c     01 5E 06 F6 | 	mov	arg02, #1
00b10                 | ' 
00b10                 | ' ''---------- Set the (x,y) position of cursor
00b10                 | ' 
00b10                 | ' cursor_x:=x
00b10     02 00 00 FF 
00b14     FC 0E 86 F1 | 	sub	objptr, ##1276
00b18     07 03 48 FC | 	wrbyte	#1, objptr
00b1c                 | ' cursor_y:=y
00b1c     01 0E 06 F1 | 	add	objptr, #1
00b20     07 03 48 FC | 	wrbyte	#1, objptr
00b24                 | ' 
00b24                 | ' emptystr$="                      "
00b24                 | ' 
00b24                 | ' ma=addr(module)
00b24                 | ' tracker.initmodule(ma,0)
00b24                 | ' 
00b24                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b24     04 00 00 FF 
00b28     9F 0E 06 F1 | 	add	objptr, ##2207
00b2c     07 81 02 FB | 	rdlong	local12, objptr
00b30     40 83 02 F6 | 	mov	local13, local12
00b34     04 00 00 FF 
00b38     D4 0E 86 F1 | 	sub	objptr, ##2260
00b3c     14 82 06 F1 | 	add	local13, #20
00b40                 | LR__0001
00b40     41 81 5A F2 | 	cmps	local12, local13 wcz
00b44     44 00 90 3D |  if_ae	jmp	#LR__0002
00b48     00 5C 06 F6 | 	mov	arg01, #0
00b4c     6C 6A B0 FD | 	call	#__system___getiolock_0145
00b50     15 5D 02 F6 | 	mov	arg01, result1
00b54     20 54 B0 FD | 	call	#__system___lockmem
00b58     00 84 06 F6 | 	mov	local14, #0
00b5c                 | ' asm
00b5c     40 2B C2 FA | 	rdbyte	result1, local12
00b60                 | ' return r
00b60     15 5F 02 F6 | 	mov	arg02, result1
00b64     07 5E 46 F7 | 	zerox	arg02, #7
00b68     00 5C 06 F6 | 	mov	arg01, #0
00b6c     00 60 06 F6 | 	mov	arg03, #0
00b70     50 57 B0 FD | 	call	#__system___basic_print_char
00b74     00 5C 06 F6 | 	mov	arg01, #0
00b78     40 6A B0 FD | 	call	#__system___getiolock_0145
00b7c     15 01 68 FC | 	wrlong	#0, result1
00b80     00 2A 06 F6 | 	mov	result1, #0
00b84     01 80 06 F1 | 	add	local12, #1
00b88     B4 FF 9F FD | 	jmp	#LR__0001
00b8c                 | LR__0002
00b8c     04 00 00 FF 
00b90     D8 0E 06 F1 | 	add	objptr, ##2264
00b94     07 1F 68 FC | 	wrlong	#15, objptr
00b98                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00b98     00 7C 06 F6 | 	mov	local10, #0
00b9c     04 0E 86 F1 | 	sub	objptr, #4
00ba0     07 5D 02 FB | 	rdlong	arg01, objptr
00ba4     02 00 00 FF 
00ba8     38 5C 06 F1 | 	add	arg01, ##1080
00bac                 | ' asm
00bac     2E 87 C2 FA | 	rdbyte	local15, arg01
00bb0                 | ' return r
00bb0     07 86 46 F7 | 	zerox	local15, #7
00bb4     4D 86 0E F2 | 	cmp	local15, #77 wz
00bb8     01 7C 66 A6 |  if_e	neg	local10, #1
00bbc     00 88 06 F6 | 	mov	local16, #0
00bc0     07 5D 02 FB | 	rdlong	arg01, objptr
00bc4     04 00 00 FF 
00bc8     D4 0E 86 F1 | 	sub	objptr, ##2260
00bcc     02 00 00 FF 
00bd0     3A 5C 06 F1 | 	add	arg01, ##1082
00bd4                 | ' asm
00bd4     2E 2B C2 FA | 	rdbyte	result1, arg01
00bd8                 | ' return r
00bd8     15 8B 02 F6 | 	mov	local17, result1
00bdc     07 8A 46 F7 | 	zerox	local17, #7
00be0     4B 8A 0E F2 | 	cmp	local17, #75 wz
00be4     01 88 66 A6 |  if_e	neg	local16, #1
00be8     44 7D CA F7 | 	test	local10, local16 wz
00bec     04 00 00 5F 
00bf0     D8 0E 06 51 |  if_ne	add	objptr, ##2264
00bf4     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00bf8     04 00 00 5F 
00bfc     D8 0E 86 51 |  if_ne	sub	objptr, ##2264
00c00     02 5E 06 F6 | 	mov	arg02, #2
00c04                 | ' 
00c04                 | ' ''---------- Set the (x,y) position of cursor
00c04                 | ' 
00c04                 | ' cursor_x:=x
00c04     34 0E 06 F1 | 	add	objptr, #52
00c08     07 03 48 FC | 	wrbyte	#1, objptr
00c0c                 | ' cursor_y:=y
00c0c     01 0E 06 F1 | 	add	objptr, #1
00c10     07 05 48 FC | 	wrbyte	#2, objptr
00c14     35 0E 86 F1 | 	sub	objptr, #53
00c18                 | ' position 1,2 : print samples;" ";"samples module"
00c18     00 5C 06 F6 | 	mov	arg01, #0
00c1c     9C 69 B0 FD | 	call	#__system___getiolock_0145
00c20     15 5D 02 F6 | 	mov	arg01, result1
00c24     50 53 B0 FD | 	call	#__system___lockmem
00c28     00 2A 06 F6 | 	mov	result1, #0
00c2c     04 00 00 FF 
00c30     D8 0E 06 F1 | 	add	objptr, ##2264
00c34     07 5F 02 FB | 	rdlong	arg02, objptr
00c38     04 00 00 FF 
00c3c     D8 0E 86 F1 | 	sub	objptr, ##2264
00c40     00 5C 06 F6 | 	mov	arg01, #0
00c44     00 60 06 F6 | 	mov	arg03, #0
00c48     0A 62 06 F6 | 	mov	arg04, #10
00c4c     08 57 B0 FD | 	call	#__system___basic_print_integer
00c50     41 00 00 FF 
00c54     06 5E 06 F6 | 	mov	arg02, ##@LR__0460
00c58     00 5C 06 F6 | 	mov	arg01, #0
00c5c     00 60 06 F6 | 	mov	arg03, #0
00c60     AC 56 B0 FD | 	call	#__system___basic_print_string
00c64     41 00 00 FF 
00c68     08 5E 06 F6 | 	mov	arg02, ##@LR__0461
00c6c     00 5C 06 F6 | 	mov	arg01, #0
00c70     00 60 06 F6 | 	mov	arg03, #0
00c74     98 56 B0 FD | 	call	#__system___basic_print_string
00c78     00 5C 06 F6 | 	mov	arg01, #0
00c7c     0A 5E 06 F6 | 	mov	arg02, #10
00c80     00 60 06 F6 | 	mov	arg03, #0
00c84     3C 56 B0 FD | 	call	#__system___basic_print_char
00c88     01 2A 06 F6 | 	mov	result1, #1
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     28 69 B0 FD | 	call	#__system___getiolock_0145
00c94     15 01 68 FC | 	wrlong	#0, result1
00c98     00 2A 06 F6 | 	mov	result1, #0
00c9c     04 00 00 FF 
00ca0     D4 0E 06 F1 | 	add	objptr, ##2260
00ca4     07 8D 02 FB | 	rdlong	local18, objptr
00ca8     04 0E 06 F1 | 	add	objptr, #4
00cac     07 8F 02 FB | 	rdlong	local19, objptr
00cb0     04 5E 06 F6 | 	mov	arg02, #4
00cb4                 | ' 
00cb4                 | ' ''---------- Set the (x,y) position of cursor
00cb4                 | ' 
00cb4                 | ' cursor_x:=x
00cb4     04 00 00 FF 
00cb8     A4 0E 86 F1 | 	sub	objptr, ##2212
00cbc     07 03 48 FC | 	wrbyte	#1, objptr
00cc0                 | ' cursor_y:=y
00cc0     01 0E 06 F1 | 	add	objptr, #1
00cc4     07 09 48 FC | 	wrbyte	#4, objptr
00cc8     35 0E 86 F1 | 	sub	objptr, #53
00ccc                 | ' 'v030. setwritecolors(170,147):
00ccc                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00ccc     00 5C 06 F6 | 	mov	arg01, #0
00cd0     E8 68 B0 FD | 	call	#__system___getiolock_0145
00cd4     15 5D 02 F6 | 	mov	arg01, result1
00cd8     9C 52 B0 FD | 	call	#__system___lockmem
00cdc     00 2A 06 F6 | 	mov	result1, #0
00ce0     40 00 00 FF 
00ce4     84 5F 06 F6 | 	mov	arg02, ##@LR__0457
00ce8     00 5C 06 F6 | 	mov	arg01, #0
00cec     00 60 06 F6 | 	mov	arg03, #0
00cf0     1C 56 B0 FD | 	call	#__system___basic_print_string
00cf4     00 5C 06 F6 | 	mov	arg01, #0
00cf8     0A 5E 06 F6 | 	mov	arg02, #10
00cfc     00 60 06 F6 | 	mov	arg03, #0
00d00     C0 55 B0 FD | 	call	#__system___basic_print_char
00d04     01 2A 06 F6 | 	mov	result1, #1
00d08     00 5C 06 F6 | 	mov	arg01, #0
00d0c     AC 68 B0 FD | 	call	#__system___getiolock_0145
00d10     15 01 68 FC | 	wrlong	#0, result1
00d14     00 2A 06 F6 | 	mov	result1, #0
00d18     04 00 00 FF 
00d1c     4C 0E 06 F1 | 	add	objptr, ##2124
00d20     07 91 02 F6 | 	mov	local20, objptr
00d24     00 92 06 F6 | 	mov	local21, #0
00d28     04 00 00 FF 
00d2c     4C 0E 86 F1 | 	sub	objptr, ##2124
00d30                 | LR__0003
00d30     40 00 00 FF 
00d34     ED 95 06 F6 | 	mov	local22, ##@LR__0458
00d38     49 97 02 F6 | 	mov	local23, local21
00d3c     02 5E 06 F6 | 	mov	arg02, #2
00d40     0A 60 06 F6 | 	mov	arg03, #10
00d44     02 98 0E F6 | 	mov	local24, #2 wz
00d48     34 00 90 FD | 	jmp	#LR__0006
00d4c                 | LR__0004
00d4c     00 9A 06 F6 | 	mov	local25, #0
00d50     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d54     01 9A 66 E6 |  if_be	neg	local25, #1
00d58     00 9E 06 F6 | 	mov	local27, #0
00d5c     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d60     01 9E 66 C6 |  if_b	neg	local27, #1
00d64     4F 9B CA F7 | 	test	local25, local27 wz
00d68     14 00 90 AD |  if_e	jmp	#LR__0005
00d6c     4E A1 02 F6 | 	mov	local28, local26
00d70     0A 9C 06 FD | 	qmul	local26, #10
00d74     18 9C 62 FD | 	getqx	local26
00d78     01 98 06 F1 | 	add	local24, #1
00d7c     CC FF 9F FD | 	jmp	#LR__0004
00d80                 | LR__0005
00d80                 | LR__0006
00d80     20 98 3E F3 | 	fle	local24, #32 wcz
00d84     4C 5D 02 F6 | 	mov	arg01, local24
00d88     02 5C 06 F1 | 	add	arg01, #2
00d8c     1C 5E B0 FD | 	call	#__system___gc_alloc_managed
00d90     15 A3 02 F6 | 	mov	local29, result1
00d94     4C A5 02 F6 | 	mov	local30, local24
00d98     51 A5 02 F1 | 	add	local30, local29
00d9c     52 01 48 FC | 	wrbyte	#0, local30
00da0     98 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00da4     93 00 A0 FD | 	call	#FCACHE_LOAD_
00da8                 | LR__0007
00da8     00 98 1E F2 | 	cmp	local24, #0 wcz
00dac     34 00 90 ED |  if_be	jmp	#LR__0009
00db0     01 98 86 F1 | 	sub	local24, #1
00db4     4B 0B 03 F6 | 	mov	muldiva_, local23
00db8     0A 0C 07 F6 | 	mov	muldivb_, #10
00dbc     CC 00 A0 FD | 	call	#unsdivide_
00dc0     85 A7 02 F6 | 	mov	local31, muldiva_
00dc4     86 97 02 F6 | 	mov	local23, muldivb_
00dc8     0A A6 1E F2 | 	cmp	local31, #10 wcz
00dcc     30 A6 06 C1 |  if_b	add	local31, #48
00dd0     37 A6 06 31 |  if_ae	add	local31, #55
00dd4     4C A9 02 F6 | 	mov	local32, local24
00dd8     51 A9 02 F1 | 	add	local32, local29
00ddc     54 A7 42 FC | 	wrbyte	local31, local32
00de0     C4 FF 9F FD | 	jmp	#LR__0007
00de4                 | LR__0008
00de4                 | LR__0009
00de4     51 2B 02 F6 | 	mov	result1, local29
00de8     15 5F 02 F6 | 	mov	arg02, result1
00dec     4A 5D 02 F6 | 	mov	arg01, local22
00df0     BC 51 B0 FD | 	call	#__system___string_concat
00df4     15 AB 02 F6 | 	mov	local33, result1
00df8     13 5C 06 F6 | 	mov	arg01, #19
00dfc     40 00 00 FF 
00e00     24 5F 06 F6 | 	mov	arg02, ##@LR__0450
00e04     14 5A B0 FD | 	call	#__system__String_S
00e08     15 5F 02 F6 | 	mov	arg02, result1
00e0c     55 5D 02 F6 | 	mov	arg01, local33
00e10     9C 51 B0 FD | 	call	#__system___string_concat
00e14     48 2B 62 FC | 	wrlong	result1, local20
00e18     01 92 06 F1 | 	add	local21, #1
00e1c     04 90 06 F1 | 	add	local20, #4
00e20     20 92 5E F2 | 	cmps	local21, #32 wcz
00e24     08 FF 9F CD |  if_b	jmp	#LR__0003
00e28                 | ' for i=1 to num
00e28     01 92 06 F6 | 	mov	local21, #1
00e2c     01 8E 06 F1 | 	add	local19, #1
00e30     46 AD 02 F6 | 	mov	local34, local18
00e34     14 AC 06 F1 | 	add	local34, #20
00e38     00 AE 06 F6 | 	mov	local35, #0
00e3c     04 00 00 FF 
00e40     50 0E 06 F1 | 	add	objptr, ##2128
00e44     07 B1 02 F6 | 	mov	local36, objptr
00e48     14 8C 06 F1 | 	add	local18, #20
00e4c     00 B2 06 F6 | 	mov	local37, #0
00e50     04 00 00 FF 
00e54     50 0E 86 F1 | 	sub	objptr, ##2128
00e58                 | LR__0010
00e58     47 93 5A F2 | 	cmps	local21, local19 wcz
00e5c     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e60     56 B5 02 F6 | 	mov	local38, local34
00e64     57 B5 02 F1 | 	add	local38, local35
00e68     00 B6 06 F6 | 	mov	local39, #0
00e6c                 | LR__0011
00e6c     58 5D 02 F6 | 	mov	arg01, local36
00e70     F0 F9 BF FD | 	call	#_addr
00e74                 | ' asm
00e74     15 B9 02 FB | 	rdlong	local40, result1
00e78                 | ' return r
00e78     04 00 00 FF 
00e7c     F8 0E 06 F1 | 	add	objptr, ##2296
00e80     07 B9 62 FC | 	wrlong	local40, objptr
00e84     5A 5D 02 F6 | 	mov	arg01, local38
00e88     5B 5D 02 F1 | 	add	arg01, local39
00e8c                 | ' asm
00e8c     2E 2B C2 FA | 	rdbyte	result1, arg01
00e90                 | ' return r
00e90     15 95 02 F6 | 	mov	local22, result1
00e94     07 94 46 F7 | 	zerox	local22, #7
00e98     04 0E 06 F1 | 	add	objptr, #4
00e9c     07 95 62 FC | 	wrlong	local22, objptr
00ea0                 | '     a=lpeek(addr(sn$(i)))
00ea0                 | '     b=(peek(ma+20+30*(i-1)+j))
00ea0                 | '     if b>=32 then poke a+j,b
00ea0     04 00 00 FF 
00ea4     FC 0E 86 F1 | 	sub	objptr, ##2300
00ea8     20 94 5E F2 | 	cmps	local22, #32 wcz
00eac     24 00 90 CD |  if_b	jmp	#LR__0012
00eb0     04 00 00 FF 
00eb4     F8 0E 06 F1 | 	add	objptr, ##2296
00eb8     07 5D 02 FB | 	rdlong	arg01, objptr
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0     04 0E 06 F1 | 	add	objptr, #4
00ec4     07 5F 02 FB | 	rdlong	arg02, objptr
00ec8     04 00 00 FF 
00ecc     FC 0E 86 F1 | 	sub	objptr, ##2300
00ed0                 | ' asm
00ed0     2E 5F 42 FC | 	wrbyte	arg02, arg01
00ed4                 | LR__0012
00ed4     01 B6 06 F1 | 	add	local39, #1
00ed8     16 B6 5E F2 | 	cmps	local39, #22 wcz
00edc     8C FF 9F CD |  if_b	jmp	#LR__0011
00ee0     46 BB 02 F6 | 	mov	local41, local18
00ee4     59 BB 02 F1 | 	add	local41, local37
00ee8     5D 5D 02 F6 | 	mov	arg01, local41
00eec     16 5C 06 F1 | 	add	arg01, #22
00ef0     5D BD 02 F6 | 	mov	local42, local41
00ef4     17 BC 06 F1 | 	add	local42, #23
00ef8                 | ' asm
00ef8     2E AB C2 FA | 	rdbyte	local33, arg01
00efc                 | ' return r
00efc     07 AA 46 F7 | 	zerox	local33, #7
00f00     08 AA 66 F0 | 	shl	local33, #8
00f04                 | ' asm
00f04     5E BF C2 FA | 	rdbyte	local43, local42
00f08                 | ' return r
00f08     07 BE 46 F7 | 	zerox	local43, #7
00f0c     5F AB 02 F1 | 	add	local33, local43
00f10     01 AA 66 F0 | 	shl	local33, #1
00f14     04 00 00 FF 
00f18     00 0F 06 F1 | 	add	objptr, ##2304
00f1c     07 AB 62 FC | 	wrlong	local33, objptr
00f20     5D 5D 02 F6 | 	mov	arg01, local41
00f24     1A 5C 06 F1 | 	add	arg01, #26
00f28     5D C1 02 F6 | 	mov	local44, local41
00f2c     1B C0 06 F1 | 	add	local44, #27
00f30                 | ' asm
00f30     2E AB C2 FA | 	rdbyte	local33, arg01
00f34                 | ' return r
00f34     07 AA 46 F7 | 	zerox	local33, #7
00f38     08 AA 66 F0 | 	shl	local33, #8
00f3c                 | ' asm
00f3c     60 BF C2 FA | 	rdbyte	local43, local44
00f40                 | ' return r
00f40     07 BE 46 F7 | 	zerox	local43, #7
00f44     5F AB 02 F1 | 	add	local33, local43
00f48     01 AA 66 F0 | 	shl	local33, #1
00f4c     04 0E 06 F1 | 	add	objptr, #4
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1C 5C 06 F1 | 	add	arg01, #28
00f5c     5D C3 02 F6 | 	mov	local45, local41
00f60     1D C2 06 F1 | 	add	local45, #29
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     61 BF C2 FA | 	rdbyte	local43, local45
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     18 5C 06 F1 | 	add	arg01, #24
00f90                 | ' asm
00f90     2E 95 C2 FA | 	rdbyte	local22, arg01
00f94                 | ' return r
00f94     07 94 46 F7 | 	zerox	local22, #7
00f98     04 0E 06 F1 | 	add	objptr, #4
00f9c     07 95 62 FC | 	wrlong	local22, objptr
00fa0     19 BA 06 F1 | 	add	local41, #25
00fa4                 | ' asm
00fa4     5D 2B C2 FA | 	rdbyte	result1, local41
00fa8                 | ' return r
00fa8     15 95 02 F6 | 	mov	local22, result1
00fac     07 94 46 F7 | 	zerox	local22, #7
00fb0     04 0E 06 F1 | 	add	objptr, #4
00fb4     07 95 62 FC | 	wrlong	local22, objptr
00fb8     04 00 00 FF 
00fbc     10 0F 86 F1 | 	sub	objptr, ##2320
00fc0                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00fc0                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00fc0                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00fc0                 | ' ft=peek(ma+20+30*(i-1)+24)
00fc0                 | ' vl=peek(ma+20+30*(i-1)+25)
00fc0                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00fc0     10 92 5E F2 | 	cmps	local21, #16 wcz
00fc4     C4 02 90 3D |  if_ae	jmp	#LR__0013
00fc8     05 C4 06 F6 | 	mov	local46, #5
00fcc     49 C5 02 F1 | 	add	local46, local21
00fd0     62 5F 02 F6 | 	mov	arg02, local46
00fd4                 | ' 
00fd4                 | ' ''---------- Set the (x,y) position of cursor
00fd4                 | ' 
00fd4                 | ' cursor_x:=x
00fd4     34 0E 06 F1 | 	add	objptr, #52
00fd8     07 03 48 FC | 	wrbyte	#1, objptr
00fdc                 | ' cursor_y:=y
00fdc     01 0E 06 F1 | 	add	objptr, #1
00fe0     07 5F 42 FC | 	wrbyte	arg02, objptr
00fe4     49 C7 02 F6 | 	mov	local47, local21
00fe8     02 C6 66 F0 | 	shl	local47, #2
00fec     04 00 00 FF 
00ff0     17 0E 06 F1 | 	add	objptr, ##2071
00ff4     07 C7 02 F1 | 	add	local47, objptr
00ff8     00 5C 06 F6 | 	mov	arg01, #0
00ffc     04 00 00 FF 
01000     4C 0E 86 F1 | 	sub	objptr, ##2124
01004     B4 65 B0 FD | 	call	#__system___getiolock_0145
01008     15 5D 02 F6 | 	mov	arg01, result1
0100c     68 4F B0 FD | 	call	#__system___lockmem
01010     00 2A 06 F6 | 	mov	result1, #0
01014     63 5F 02 FB | 	rdlong	arg02, local47
01018     00 5C 06 F6 | 	mov	arg01, #0
0101c     00 60 06 F6 | 	mov	arg03, #0
01020     EC 52 B0 FD | 	call	#__system___basic_print_string
01024     00 5C 06 F6 | 	mov	arg01, #0
01028     0A 5E 06 F6 | 	mov	arg02, #10
0102c     00 60 06 F6 | 	mov	arg03, #0
01030     90 52 B0 FD | 	call	#__system___basic_print_char
01034     01 2A 06 F6 | 	mov	result1, #1
01038     00 5C 06 F6 | 	mov	arg01, #0
0103c     7C 65 B0 FD | 	call	#__system___getiolock_0145
01040     15 01 68 FC | 	wrlong	#0, result1
01044     00 2A 06 F6 | 	mov	result1, #0
01048     62 5F 02 F6 | 	mov	arg02, local46
0104c                 | ' 
0104c                 | ' ''---------- Set the (x,y) position of cursor
0104c                 | ' 
0104c                 | ' cursor_x:=x
0104c     34 0E 06 F1 | 	add	objptr, #52
01050     07 31 48 FC | 	wrbyte	#24, objptr
01054                 | ' cursor_y:=y
01054     01 0E 06 F1 | 	add	objptr, #1
01058     07 5F 42 FC | 	wrbyte	arg02, objptr
0105c     35 0E 86 F1 | 	sub	objptr, #53
01060     00 5C 06 F6 | 	mov	arg01, #0
01064     54 65 B0 FD | 	call	#__system___getiolock_0145
01068     15 5D 02 F6 | 	mov	arg01, result1
0106c     08 4F B0 FD | 	call	#__system___lockmem
01070     00 2A 06 F6 | 	mov	result1, #0
01074     04 00 00 FF 
01078     00 0F 06 F1 | 	add	objptr, ##2304
0107c     07 5F 02 FB | 	rdlong	arg02, objptr
01080     04 00 00 FF 
01084     00 0F 86 F1 | 	sub	objptr, ##2304
01088     00 5C 06 F6 | 	mov	arg01, #0
0108c     00 60 06 F6 | 	mov	arg03, #0
01090     0A 62 06 F6 | 	mov	arg04, #10
01094     C0 52 B0 FD | 	call	#__system___basic_print_integer
01098     00 5C 06 F6 | 	mov	arg01, #0
0109c     0A 5E 06 F6 | 	mov	arg02, #10
010a0     00 60 06 F6 | 	mov	arg03, #0
010a4     1C 52 B0 FD | 	call	#__system___basic_print_char
010a8     01 2A 06 F6 | 	mov	result1, #1
010ac     00 5C 06 F6 | 	mov	arg01, #0
010b0     08 65 B0 FD | 	call	#__system___getiolock_0145
010b4     15 01 68 FC | 	wrlong	#0, result1
010b8     00 2A 06 F6 | 	mov	result1, #0
010bc     62 5F 02 F6 | 	mov	arg02, local46
010c0                 | ' 
010c0                 | ' ''---------- Set the (x,y) position of cursor
010c0                 | ' 
010c0                 | ' cursor_x:=x
010c0     34 0E 06 F1 | 	add	objptr, #52
010c4     07 3F 48 FC | 	wrbyte	#31, objptr
010c8                 | ' cursor_y:=y
010c8     01 0E 06 F1 | 	add	objptr, #1
010cc     07 5F 42 FC | 	wrbyte	arg02, objptr
010d0     35 0E 86 F1 | 	sub	objptr, #53
010d4     00 5C 06 F6 | 	mov	arg01, #0
010d8     E0 64 B0 FD | 	call	#__system___getiolock_0145
010dc     15 5D 02 F6 | 	mov	arg01, result1
010e0     94 4E B0 FD | 	call	#__system___lockmem
010e4     00 2A 06 F6 | 	mov	result1, #0
010e8     04 00 00 FF 
010ec     0C 0F 06 F1 | 	add	objptr, ##2316
010f0     07 5F 02 FB | 	rdlong	arg02, objptr
010f4     04 00 00 FF 
010f8     0C 0F 86 F1 | 	sub	objptr, ##2316
010fc     00 5C 06 F6 | 	mov	arg01, #0
01100     00 60 06 F6 | 	mov	arg03, #0
01104     0A 62 06 F6 | 	mov	arg04, #10
01108     4C 52 B0 FD | 	call	#__system___basic_print_integer
0110c     00 5C 06 F6 | 	mov	arg01, #0
01110     0A 5E 06 F6 | 	mov	arg02, #10
01114     00 60 06 F6 | 	mov	arg03, #0
01118     A8 51 B0 FD | 	call	#__system___basic_print_char
0111c     01 2A 06 F6 | 	mov	result1, #1
01120     00 5C 06 F6 | 	mov	arg01, #0
01124     94 64 B0 FD | 	call	#__system___getiolock_0145
01128     15 01 68 FC | 	wrlong	#0, result1
0112c     00 2A 06 F6 | 	mov	result1, #0
01130     62 5F 02 F6 | 	mov	arg02, local46
01134                 | ' 
01134                 | ' ''---------- Set the (x,y) position of cursor
01134                 | ' 
01134                 | ' cursor_x:=x
01134     34 0E 06 F1 | 	add	objptr, #52
01138     07 45 48 FC | 	wrbyte	#34, objptr
0113c                 | ' cursor_y:=y
0113c     01 0E 06 F1 | 	add	objptr, #1
01140     07 5F 42 FC | 	wrbyte	arg02, objptr
01144     35 0E 86 F1 | 	sub	objptr, #53
01148     00 5C 06 F6 | 	mov	arg01, #0
0114c     6C 64 B0 FD | 	call	#__system___getiolock_0145
01150     15 5D 02 F6 | 	mov	arg01, result1
01154     20 4E B0 FD | 	call	#__system___lockmem
01158     00 2A 06 F6 | 	mov	result1, #0
0115c     04 00 00 FF 
01160     10 0F 06 F1 | 	add	objptr, ##2320
01164     07 5F 02 FB | 	rdlong	arg02, objptr
01168     04 00 00 FF 
0116c     10 0F 86 F1 | 	sub	objptr, ##2320
01170     00 5C 06 F6 | 	mov	arg01, #0
01174     00 60 06 F6 | 	mov	arg03, #0
01178     0A 62 06 F6 | 	mov	arg04, #10
0117c     D8 51 B0 FD | 	call	#__system___basic_print_integer
01180     00 5C 06 F6 | 	mov	arg01, #0
01184     0A 5E 06 F6 | 	mov	arg02, #10
01188     00 60 06 F6 | 	mov	arg03, #0
0118c     34 51 B0 FD | 	call	#__system___basic_print_char
01190     01 2A 06 F6 | 	mov	result1, #1
01194     00 5C 06 F6 | 	mov	arg01, #0
01198     20 64 B0 FD | 	call	#__system___getiolock_0145
0119c     15 01 68 FC | 	wrlong	#0, result1
011a0     00 2A 06 F6 | 	mov	result1, #0
011a4     62 5F 02 F6 | 	mov	arg02, local46
011a8                 | ' 
011a8                 | ' ''---------- Set the (x,y) position of cursor
011a8                 | ' 
011a8                 | ' cursor_x:=x
011a8     34 0E 06 F1 | 	add	objptr, #52
011ac     07 4B 48 FC | 	wrbyte	#37, objptr
011b0                 | ' cursor_y:=y
011b0     01 0E 06 F1 | 	add	objptr, #1
011b4     07 5F 42 FC | 	wrbyte	arg02, objptr
011b8     35 0E 86 F1 | 	sub	objptr, #53
011bc     00 5C 06 F6 | 	mov	arg01, #0
011c0     F8 63 B0 FD | 	call	#__system___getiolock_0145
011c4     15 5D 02 F6 | 	mov	arg01, result1
011c8     AC 4D B0 FD | 	call	#__system___lockmem
011cc     00 2A 06 F6 | 	mov	result1, #0
011d0     04 00 00 FF 
011d4     04 0F 06 F1 | 	add	objptr, ##2308
011d8     07 5F 02 FB | 	rdlong	arg02, objptr
011dc     04 00 00 FF 
011e0     04 0F 86 F1 | 	sub	objptr, ##2308
011e4     00 5C 06 F6 | 	mov	arg01, #0
011e8     00 60 06 F6 | 	mov	arg03, #0
011ec     0A 62 06 F6 | 	mov	arg04, #10
011f0     64 51 B0 FD | 	call	#__system___basic_print_integer
011f4     00 5C 06 F6 | 	mov	arg01, #0
011f8     0A 5E 06 F6 | 	mov	arg02, #10
011fc     00 60 06 F6 | 	mov	arg03, #0
01200     C0 50 B0 FD | 	call	#__system___basic_print_char
01204     01 2A 06 F6 | 	mov	result1, #1
01208     00 5C 06 F6 | 	mov	arg01, #0
0120c     AC 63 B0 FD | 	call	#__system___getiolock_0145
01210     15 01 68 FC | 	wrlong	#0, result1
01214     00 2A 06 F6 | 	mov	result1, #0
01218     62 5F 02 F6 | 	mov	arg02, local46
0121c                 | ' 
0121c                 | ' ''---------- Set the (x,y) position of cursor
0121c                 | ' 
0121c                 | ' cursor_x:=x
0121c     34 0E 06 F1 | 	add	objptr, #52
01220     07 57 48 FC | 	wrbyte	#43, objptr
01224                 | ' cursor_y:=y
01224     01 0E 06 F1 | 	add	objptr, #1
01228     07 5F 42 FC | 	wrbyte	arg02, objptr
0122c     35 0E 86 F1 | 	sub	objptr, #53
01230     00 5C 06 F6 | 	mov	arg01, #0
01234     84 63 B0 FD | 	call	#__system___getiolock_0145
01238     15 5D 02 F6 | 	mov	arg01, result1
0123c     38 4D B0 FD | 	call	#__system___lockmem
01240     00 2A 06 F6 | 	mov	result1, #0
01244     04 00 00 FF 
01248     08 0F 06 F1 | 	add	objptr, ##2312
0124c     07 5F 02 FB | 	rdlong	arg02, objptr
01250     04 00 00 FF 
01254     08 0F 86 F1 | 	sub	objptr, ##2312
01258     00 5C 06 F6 | 	mov	arg01, #0
0125c     00 60 06 F6 | 	mov	arg03, #0
01260     0A 62 06 F6 | 	mov	arg04, #10
01264     F0 50 B0 FD | 	call	#__system___basic_print_integer
01268     00 5C 06 F6 | 	mov	arg01, #0
0126c     0A 5E 06 F6 | 	mov	arg02, #10
01270     00 60 06 F6 | 	mov	arg03, #0
01274     4C 50 B0 FD | 	call	#__system___basic_print_char
01278     01 2A 06 F6 | 	mov	result1, #1
0127c     00 5C 06 F6 | 	mov	arg01, #0
01280     38 63 B0 FD | 	call	#__system___getiolock_0145
01284     15 01 68 FC | 	wrlong	#0, result1
01288     00 2A 06 F6 | 	mov	result1, #0
0128c                 | LR__0013
0128c                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
0128c     10 92 5E F2 | 	cmps	local21, #16 wcz
01290     C4 02 90 CD |  if_b	jmp	#LR__0014
01294     49 C9 02 F6 | 	mov	local48, local21
01298     0B C8 86 F1 | 	sub	local48, #11
0129c     64 5F 02 F6 | 	mov	arg02, local48
012a0                 | ' 
012a0                 | ' ''---------- Set the (x,y) position of cursor
012a0                 | ' 
012a0                 | ' cursor_x:=x
012a0     34 0E 06 F1 | 	add	objptr, #52
012a4     07 73 48 FC | 	wrbyte	#57, objptr
012a8                 | ' cursor_y:=y
012a8     01 0E 06 F1 | 	add	objptr, #1
012ac     07 5F 42 FC | 	wrbyte	arg02, objptr
012b0     49 CB 02 F6 | 	mov	local49, local21
012b4     02 CA 66 F0 | 	shl	local49, #2
012b8     04 00 00 FF 
012bc     17 0E 06 F1 | 	add	objptr, ##2071
012c0     07 CB 02 F1 | 	add	local49, objptr
012c4     00 5C 06 F6 | 	mov	arg01, #0
012c8     04 00 00 FF 
012cc     4C 0E 86 F1 | 	sub	objptr, ##2124
012d0     E8 62 B0 FD | 	call	#__system___getiolock_0145
012d4     15 5D 02 F6 | 	mov	arg01, result1
012d8     9C 4C B0 FD | 	call	#__system___lockmem
012dc     00 2A 06 F6 | 	mov	result1, #0
012e0     65 5F 02 FB | 	rdlong	arg02, local49
012e4     00 5C 06 F6 | 	mov	arg01, #0
012e8     00 60 06 F6 | 	mov	arg03, #0
012ec     20 50 B0 FD | 	call	#__system___basic_print_string
012f0     00 5C 06 F6 | 	mov	arg01, #0
012f4     0A 5E 06 F6 | 	mov	arg02, #10
012f8     00 60 06 F6 | 	mov	arg03, #0
012fc     C4 4F B0 FD | 	call	#__system___basic_print_char
01300     01 2A 06 F6 | 	mov	result1, #1
01304     00 5C 06 F6 | 	mov	arg01, #0
01308     B0 62 B0 FD | 	call	#__system___getiolock_0145
0130c     15 01 68 FC | 	wrlong	#0, result1
01310     00 2A 06 F6 | 	mov	result1, #0
01314     64 5F 02 F6 | 	mov	arg02, local48
01318                 | ' 
01318                 | ' ''---------- Set the (x,y) position of cursor
01318                 | ' 
01318                 | ' cursor_x:=x
01318     34 0E 06 F1 | 	add	objptr, #52
0131c     07 A1 48 FC | 	wrbyte	#80, objptr
01320                 | ' cursor_y:=y
01320     01 0E 06 F1 | 	add	objptr, #1
01324     07 5F 42 FC | 	wrbyte	arg02, objptr
01328     35 0E 86 F1 | 	sub	objptr, #53
0132c     00 5C 06 F6 | 	mov	arg01, #0
01330     88 62 B0 FD | 	call	#__system___getiolock_0145
01334     15 5D 02 F6 | 	mov	arg01, result1
01338     3C 4C B0 FD | 	call	#__system___lockmem
0133c     00 2A 06 F6 | 	mov	result1, #0
01340     04 00 00 FF 
01344     00 0F 06 F1 | 	add	objptr, ##2304
01348     07 5F 02 FB | 	rdlong	arg02, objptr
0134c     04 00 00 FF 
01350     00 0F 86 F1 | 	sub	objptr, ##2304
01354     00 5C 06 F6 | 	mov	arg01, #0
01358     00 60 06 F6 | 	mov	arg03, #0
0135c     0A 62 06 F6 | 	mov	arg04, #10
01360     F4 4F B0 FD | 	call	#__system___basic_print_integer
01364     00 5C 06 F6 | 	mov	arg01, #0
01368     0A 5E 06 F6 | 	mov	arg02, #10
0136c     00 60 06 F6 | 	mov	arg03, #0
01370     50 4F B0 FD | 	call	#__system___basic_print_char
01374     01 2A 06 F6 | 	mov	result1, #1
01378     00 5C 06 F6 | 	mov	arg01, #0
0137c     3C 62 B0 FD | 	call	#__system___getiolock_0145
01380     15 01 68 FC | 	wrlong	#0, result1
01384     00 2A 06 F6 | 	mov	result1, #0
01388     64 5F 02 F6 | 	mov	arg02, local48
0138c                 | ' 
0138c                 | ' ''---------- Set the (x,y) position of cursor
0138c                 | ' 
0138c                 | ' cursor_x:=x
0138c     34 0E 06 F1 | 	add	objptr, #52
01390     07 AF 48 FC | 	wrbyte	#87, objptr
01394                 | ' cursor_y:=y
01394     01 0E 06 F1 | 	add	objptr, #1
01398     07 5F 42 FC | 	wrbyte	arg02, objptr
0139c     35 0E 86 F1 | 	sub	objptr, #53
013a0     00 5C 06 F6 | 	mov	arg01, #0
013a4     14 62 B0 FD | 	call	#__system___getiolock_0145
013a8     15 5D 02 F6 | 	mov	arg01, result1
013ac     C8 4B B0 FD | 	call	#__system___lockmem
013b0     00 2A 06 F6 | 	mov	result1, #0
013b4     04 00 00 FF 
013b8     0C 0F 06 F1 | 	add	objptr, ##2316
013bc     07 5F 02 FB | 	rdlong	arg02, objptr
013c0     04 00 00 FF 
013c4     0C 0F 86 F1 | 	sub	objptr, ##2316
013c8     00 5C 06 F6 | 	mov	arg01, #0
013cc     00 60 06 F6 | 	mov	arg03, #0
013d0     0A 62 06 F6 | 	mov	arg04, #10
013d4     80 4F B0 FD | 	call	#__system___basic_print_integer
013d8     00 5C 06 F6 | 	mov	arg01, #0
013dc     0A 5E 06 F6 | 	mov	arg02, #10
013e0     00 60 06 F6 | 	mov	arg03, #0
013e4     DC 4E B0 FD | 	call	#__system___basic_print_char
013e8     01 2A 06 F6 | 	mov	result1, #1
013ec     00 5C 06 F6 | 	mov	arg01, #0
013f0     C8 61 B0 FD | 	call	#__system___getiolock_0145
013f4     15 01 68 FC | 	wrlong	#0, result1
013f8     00 2A 06 F6 | 	mov	result1, #0
013fc     64 5F 02 F6 | 	mov	arg02, local48
01400                 | ' 
01400                 | ' ''---------- Set the (x,y) position of cursor
01400                 | ' 
01400                 | ' cursor_x:=x
01400     34 0E 06 F1 | 	add	objptr, #52
01404     07 B5 48 FC | 	wrbyte	#90, objptr
01408                 | ' cursor_y:=y
01408     01 0E 06 F1 | 	add	objptr, #1
0140c     07 5F 42 FC | 	wrbyte	arg02, objptr
01410     35 0E 86 F1 | 	sub	objptr, #53
01414     00 5C 06 F6 | 	mov	arg01, #0
01418     A0 61 B0 FD | 	call	#__system___getiolock_0145
0141c     15 5D 02 F6 | 	mov	arg01, result1
01420     54 4B B0 FD | 	call	#__system___lockmem
01424     00 2A 06 F6 | 	mov	result1, #0
01428     04 00 00 FF 
0142c     10 0F 06 F1 | 	add	objptr, ##2320
01430     07 5F 02 FB | 	rdlong	arg02, objptr
01434     04 00 00 FF 
01438     10 0F 86 F1 | 	sub	objptr, ##2320
0143c     00 5C 06 F6 | 	mov	arg01, #0
01440     00 60 06 F6 | 	mov	arg03, #0
01444     0A 62 06 F6 | 	mov	arg04, #10
01448     0C 4F B0 FD | 	call	#__system___basic_print_integer
0144c     00 5C 06 F6 | 	mov	arg01, #0
01450     0A 5E 06 F6 | 	mov	arg02, #10
01454     00 60 06 F6 | 	mov	arg03, #0
01458     68 4E B0 FD | 	call	#__system___basic_print_char
0145c     01 2A 06 F6 | 	mov	result1, #1
01460     00 5C 06 F6 | 	mov	arg01, #0
01464     54 61 B0 FD | 	call	#__system___getiolock_0145
01468     15 01 68 FC | 	wrlong	#0, result1
0146c     00 2A 06 F6 | 	mov	result1, #0
01470     64 5F 02 F6 | 	mov	arg02, local48
01474                 | ' 
01474                 | ' ''---------- Set the (x,y) position of cursor
01474                 | ' 
01474                 | ' cursor_x:=x
01474     34 0E 06 F1 | 	add	objptr, #52
01478     07 BB 48 FC | 	wrbyte	#93, objptr
0147c                 | ' cursor_y:=y
0147c     01 0E 06 F1 | 	add	objptr, #1
01480     07 5F 42 FC | 	wrbyte	arg02, objptr
01484     35 0E 86 F1 | 	sub	objptr, #53
01488     00 5C 06 F6 | 	mov	arg01, #0
0148c     2C 61 B0 FD | 	call	#__system___getiolock_0145
01490     15 5D 02 F6 | 	mov	arg01, result1
01494     E0 4A B0 FD | 	call	#__system___lockmem
01498     00 2A 06 F6 | 	mov	result1, #0
0149c     04 00 00 FF 
014a0     04 0F 06 F1 | 	add	objptr, ##2308
014a4     07 5F 02 FB | 	rdlong	arg02, objptr
014a8     04 00 00 FF 
014ac     04 0F 86 F1 | 	sub	objptr, ##2308
014b0     00 5C 06 F6 | 	mov	arg01, #0
014b4     00 60 06 F6 | 	mov	arg03, #0
014b8     0A 62 06 F6 | 	mov	arg04, #10
014bc     98 4E B0 FD | 	call	#__system___basic_print_integer
014c0     00 5C 06 F6 | 	mov	arg01, #0
014c4     0A 5E 06 F6 | 	mov	arg02, #10
014c8     00 60 06 F6 | 	mov	arg03, #0
014cc     F4 4D B0 FD | 	call	#__system___basic_print_char
014d0     01 2A 06 F6 | 	mov	result1, #1
014d4     00 5C 06 F6 | 	mov	arg01, #0
014d8     E0 60 B0 FD | 	call	#__system___getiolock_0145
014dc     15 01 68 FC | 	wrlong	#0, result1
014e0     00 2A 06 F6 | 	mov	result1, #0
014e4     64 5F 02 F6 | 	mov	arg02, local48
014e8                 | ' 
014e8                 | ' ''---------- Set the (x,y) position of cursor
014e8                 | ' 
014e8                 | ' cursor_x:=x
014e8     34 0E 06 F1 | 	add	objptr, #52
014ec     07 C7 48 FC | 	wrbyte	#99, objptr
014f0                 | ' cursor_y:=y
014f0     01 0E 06 F1 | 	add	objptr, #1
014f4     07 5F 42 FC | 	wrbyte	arg02, objptr
014f8     35 0E 86 F1 | 	sub	objptr, #53
014fc     00 5C 06 F6 | 	mov	arg01, #0
01500     B8 60 B0 FD | 	call	#__system___getiolock_0145
01504     15 5D 02 F6 | 	mov	arg01, result1
01508     6C 4A B0 FD | 	call	#__system___lockmem
0150c     00 2A 06 F6 | 	mov	result1, #0
01510     04 00 00 FF 
01514     08 0F 06 F1 | 	add	objptr, ##2312
01518     07 5F 02 FB | 	rdlong	arg02, objptr
0151c     04 00 00 FF 
01520     08 0F 86 F1 | 	sub	objptr, ##2312
01524     00 5C 06 F6 | 	mov	arg01, #0
01528     00 60 06 F6 | 	mov	arg03, #0
0152c     0A 62 06 F6 | 	mov	arg04, #10
01530     24 4E B0 FD | 	call	#__system___basic_print_integer
01534     00 5C 06 F6 | 	mov	arg01, #0
01538     0A 5E 06 F6 | 	mov	arg02, #10
0153c     00 60 06 F6 | 	mov	arg03, #0
01540     80 4D B0 FD | 	call	#__system___basic_print_char
01544     01 2A 06 F6 | 	mov	result1, #1
01548     00 5C 06 F6 | 	mov	arg01, #0
0154c     6C 60 B0 FD | 	call	#__system___getiolock_0145
01550     15 01 68 FC | 	wrlong	#0, result1
01554     00 2A 06 F6 | 	mov	result1, #0
01558                 | LR__0014
01558     01 92 06 F1 | 	add	local21, #1
0155c     1E AE 06 F1 | 	add	local35, #30
01560     04 B0 06 F1 | 	add	local36, #4
01564     1E B2 06 F1 | 	add	local37, #30
01568     EC F8 9F FD | 	jmp	#LR__0010
0156c                 | LR__0015
0156c                 | ' print
0156c     00 5C 06 F6 | 	mov	arg01, #0
01570     48 60 B0 FD | 	call	#__system___getiolock_0145
01574     15 5D 02 F6 | 	mov	arg01, result1
01578     FC 49 B0 FD | 	call	#__system___lockmem
0157c     00 2A 06 F6 | 	mov	result1, #0
01580     00 5C 06 F6 | 	mov	arg01, #0
01584     0A 5E 06 F6 | 	mov	arg02, #10
01588     00 60 06 F6 | 	mov	arg03, #0
0158c     34 4D B0 FD | 	call	#__system___basic_print_char
01590     01 2A 06 F6 | 	mov	result1, #1
01594     00 5C 06 F6 | 	mov	arg01, #0
01598     20 60 B0 FD | 	call	#__system___getiolock_0145
0159c     15 01 68 FC | 	wrlong	#0, result1
015a0     03 00 00 FF 
015a4     2C 0F 06 F1 | 	add	objptr, ##1836
015a8     03 00 00 FF 
015ac     E4 16 06 F1 | 	add	ptr__audio012_spin2_dat__, ##1764
015b0                 | ' 
015b0                 | ' 
015b0                 | ' channel1[0]:=@null
015b0     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
015b4                 | ' channel1[1]:=0
015b4     04 0E 06 F1 | 	add	objptr, #4
015b8     07 01 68 FC | 	wrlong	#0, objptr
015bc                 | ' channel1[2]:=0
015bc     04 0E 06 F1 | 	add	objptr, #4
015c0     07 01 68 FC | 	wrlong	#0, objptr
015c4                 | ' channel1[3]:=2
015c4     04 0E 06 F1 | 	add	objptr, #4
015c8     07 05 68 FC | 	wrlong	#2, objptr
015cc                 | ' channel1[4]:=0
015cc     04 0E 06 F1 | 	add	objptr, #4
015d0     07 01 68 FC | 	wrlong	#0, objptr
015d4                 | ' channel1[5]:=8192
015d4     04 0E 06 F1 | 	add	objptr, #4
015d8     10 00 80 FF 
015dc     07 01 68 FC | 	wrlong	##8192, objptr
015e0                 | ' channel1[6]:=101
015e0     04 0E 06 F1 | 	add	objptr, #4
015e4     07 CB 68 FC | 	wrlong	#101, objptr
015e8                 | ' channel1[7]:=2
015e8     04 0E 06 F1 | 	add	objptr, #4
015ec     07 05 68 FC | 	wrlong	#2, objptr
015f0                 | ' 
015f0                 | ' channel2[0]:=@null
015f0     08 0E 06 F1 | 	add	objptr, #8
015f4     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
015f8                 | ' channel2[1]:=0
015f8     04 0E 06 F1 | 	add	objptr, #4
015fc     07 01 68 FC | 	wrlong	#0, objptr
01600                 | ' channel2[2]:=0
01600     04 0E 06 F1 | 	add	objptr, #4
01604     07 01 68 FC | 	wrlong	#0, objptr
01608                 | ' channel2[3]:=2
01608     04 0E 06 F1 | 	add	objptr, #4
0160c     07 05 68 FC | 	wrlong	#2, objptr
01610                 | ' channel2[4]:=0
01610     04 0E 06 F1 | 	add	objptr, #4
01614     07 01 68 FC | 	wrlong	#0, objptr
01618                 | ' channel2[5]:=8192
01618     04 0E 06 F1 | 	add	objptr, #4
0161c     10 00 80 FF 
01620     07 01 68 FC | 	wrlong	##8192, objptr
01624                 | ' channel2[6]:=103
01624     04 0E 06 F1 | 	add	objptr, #4
01628     07 CF 68 FC | 	wrlong	#103, objptr
0162c                 | ' channel2[7]:=2
0162c     04 0E 06 F1 | 	add	objptr, #4
01630     07 05 68 FC | 	wrlong	#2, objptr
01634                 | ' 
01634                 | ' channel3[0]:=@null
01634     08 0E 06 F1 | 	add	objptr, #8
01638     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
0163c                 | ' channel3[1]:=0
0163c     04 0E 06 F1 | 	add	objptr, #4
01640     07 01 68 FC | 	wrlong	#0, objptr
01644                 | ' channel3[2]:=0
01644     04 0E 06 F1 | 	add	objptr, #4
01648     07 01 68 FC | 	wrlong	#0, objptr
0164c                 | ' channel3[3]:=2
0164c     04 0E 06 F1 | 	add	objptr, #4
01650     07 05 68 FC | 	wrlong	#2, objptr
01654                 | ' channel3[4]:=0
01654     04 0E 06 F1 | 	add	objptr, #4
01658     07 01 68 FC | 	wrlong	#0, objptr
0165c                 | ' channel3[5]:=8192
0165c     04 0E 06 F1 | 	add	objptr, #4
01660     10 00 80 FF 
01664     07 01 68 FC | 	wrlong	##8192, objptr
01668                 | ' channel3[6]:=107
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     07 D7 68 FC | 	wrlong	#107, objptr
01670                 | ' channel3[7]:=2
01670     04 0E 06 F1 | 	add	objptr, #4
01674     07 05 68 FC | 	wrlong	#2, objptr
01678                 | ' 
01678                 | ' channel4[0]:=@null
01678     08 0E 06 F1 | 	add	objptr, #8
0167c     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01680                 | ' channel4[1]:=0
01680     04 0E 06 F1 | 	add	objptr, #4
01684     07 01 68 FC | 	wrlong	#0, objptr
01688                 | ' channel4[2]:=0
01688     04 0E 06 F1 | 	add	objptr, #4
0168c     07 01 68 FC | 	wrlong	#0, objptr
01690                 | ' channel4[3]:=2
01690     04 0E 06 F1 | 	add	objptr, #4
01694     07 05 68 FC | 	wrlong	#2, objptr
01698                 | ' channel4[4]:=0
01698     04 0E 06 F1 | 	add	objptr, #4
0169c     07 01 68 FC | 	wrlong	#0, objptr
016a0                 | ' channel4[5]:=8192
016a0     04 0E 06 F1 | 	add	objptr, #4
016a4     10 00 80 FF 
016a8     07 01 68 FC | 	wrlong	##8192, objptr
016ac                 | ' channel4[6]:=109
016ac     04 0E 06 F1 | 	add	objptr, #4
016b0     07 DB 68 FC | 	wrlong	#109, objptr
016b4                 | ' channel4[7]:=2
016b4     04 0E 06 F1 | 	add	objptr, #4
016b8     07 05 68 FC | 	wrlong	#2, objptr
016bc                 | ' channel4[8]:=1
016bc     04 0E 06 F1 | 	add	objptr, #4
016c0     07 03 68 FC | 	wrlong	#1, objptr
016c4                 | ' 
016c4                 | ' channel5[0]:=@null
016c4     04 0E 06 F1 | 	add	objptr, #4
016c8     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
016cc                 | ' channel5[1]:=0
016cc     04 0E 06 F1 | 	add	objptr, #4
016d0     07 01 68 FC | 	wrlong	#0, objptr
016d4                 | ' channel5[2]:=0
016d4     04 0E 06 F1 | 	add	objptr, #4
016d8     07 01 68 FC | 	wrlong	#0, objptr
016dc                 | ' channel5[3]:=2
016dc     04 0E 06 F1 | 	add	objptr, #4
016e0     07 05 68 FC | 	wrlong	#2, objptr
016e4                 | ' channel5[4]:=0
016e4     04 0E 06 F1 | 	add	objptr, #4
016e8     07 01 68 FC | 	wrlong	#0, objptr
016ec                 | ' channel5[5]:=8192
016ec     04 0E 06 F1 | 	add	objptr, #4
016f0     10 00 80 FF 
016f4     07 01 68 FC | 	wrlong	##8192, objptr
016f8                 | ' channel5[6]:=113
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     07 E3 68 FC | 	wrlong	#113, objptr
01700                 | ' channel5[7]:=2
01700     04 0E 06 F1 | 	add	objptr, #4
01704     07 05 68 FC | 	wrlong	#2, objptr
01708                 | ' 
01708                 | ' channel6[0]:=@null
01708     08 0E 06 F1 | 	add	objptr, #8
0170c     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01710                 | ' channel6[1]:=0
01710     04 0E 06 F1 | 	add	objptr, #4
01714     07 01 68 FC | 	wrlong	#0, objptr
01718                 | ' channel6[2]:=0
01718     04 0E 06 F1 | 	add	objptr, #4
0171c     07 01 68 FC | 	wrlong	#0, objptr
01720                 | ' channel6[3]:=2
01720     04 0E 06 F1 | 	add	objptr, #4
01724     07 05 68 FC | 	wrlong	#2, objptr
01728                 | ' channel6[4]:=0
01728     04 0E 06 F1 | 	add	objptr, #4
0172c     07 01 68 FC | 	wrlong	#0, objptr
01730                 | ' channel6[5]:=8192
01730     04 0E 06 F1 | 	add	objptr, #4
01734     10 00 80 FF 
01738     07 01 68 FC | 	wrlong	##8192, objptr
0173c                 | ' channel6[6]:=127
0173c     04 0E 06 F1 | 	add	objptr, #4
01740     07 FF 68 FC | 	wrlong	#127, objptr
01744                 | ' channel6[7]:=2
01744     04 0E 06 F1 | 	add	objptr, #4
01748     07 05 68 FC | 	wrlong	#2, objptr
0174c                 | ' 
0174c                 | ' channel7[0]:=@null
0174c     08 0E 06 F1 | 	add	objptr, #8
01750     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01754                 | ' channel7[1]:=0
01754     04 0E 06 F1 | 	add	objptr, #4
01758     07 01 68 FC | 	wrlong	#0, objptr
0175c                 | ' channel7[2]:=0
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 01 68 FC | 	wrlong	#0, objptr
01764                 | ' channel7[3]:=2
01764     04 0E 06 F1 | 	add	objptr, #4
01768     07 05 68 FC | 	wrlong	#2, objptr
0176c                 | ' channel7[4]:=0
0176c     04 0E 06 F1 | 	add	objptr, #4
01770     07 01 68 FC | 	wrlong	#0, objptr
01774                 | ' channel7[5]:=8192
01774     04 0E 06 F1 | 	add	objptr, #4
01778     10 00 80 FF 
0177c     07 01 68 FC | 	wrlong	##8192, objptr
01780                 | ' channel7[6]:=131
01780     04 0E 06 F1 | 	add	objptr, #4
01784     07 07 69 FC | 	wrlong	#131, objptr
01788                 | ' channel7[7]:=2
01788     04 0E 06 F1 | 	add	objptr, #4
0178c     07 05 68 FC | 	wrlong	#2, objptr
01790                 | ' 
01790                 | ' channel8[0]:=@null
01790     08 0E 06 F1 | 	add	objptr, #8
01794     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01798                 | ' channel8[1]:=0
01798     04 0E 06 F1 | 	add	objptr, #4
0179c     07 01 68 FC | 	wrlong	#0, objptr
017a0                 | ' channel8[2]:=0
017a0     04 0E 06 F1 | 	add	objptr, #4
017a4     07 01 68 FC | 	wrlong	#0, objptr
017a8                 | ' channel8[3]:=2
017a8     04 0E 06 F1 | 	add	objptr, #4
017ac     07 05 68 FC | 	wrlong	#2, objptr
017b0                 | ' channel8[4]:=0
017b0     04 0E 06 F1 | 	add	objptr, #4
017b4     07 01 68 FC | 	wrlong	#0, objptr
017b8                 | ' channel8[5]:=8192
017b8     04 0E 06 F1 | 	add	objptr, #4
017bc     10 00 80 FF 
017c0     07 01 68 FC | 	wrlong	##8192, objptr
017c4                 | ' channel8[6]:=137
017c4     04 0E 06 F1 | 	add	objptr, #4
017c8     07 13 69 FC | 	wrlong	#137, objptr
017cc                 | ' channel8[7]:=2
017cc     04 0E 06 F1 | 	add	objptr, #4
017d0     07 05 68 FC | 	wrlong	#2, objptr
017d4                 | ' 
017d4                 | ' channel1[8]:=1
017d4     F8 0E 86 F1 | 	sub	objptr, #248
017d8     07 03 68 FC | 	wrlong	#1, objptr
017dc                 | ' channel2[8]:=1
017dc     24 0E 06 F1 | 	add	objptr, #36
017e0     07 03 68 FC | 	wrlong	#1, objptr
017e4                 | ' channel3[8]:=1
017e4     24 0E 06 F1 | 	add	objptr, #36
017e8     07 03 68 FC | 	wrlong	#1, objptr
017ec                 | ' channel4[8]:=1
017ec     24 0E 06 F1 | 	add	objptr, #36
017f0     07 03 68 FC | 	wrlong	#1, objptr
017f4                 | ' channel5[8]:=1
017f4     24 0E 06 F1 | 	add	objptr, #36
017f8     07 03 68 FC | 	wrlong	#1, objptr
017fc                 | ' channel6[8]:=1
017fc     24 0E 06 F1 | 	add	objptr, #36
01800     07 03 68 FC | 	wrlong	#1, objptr
01804                 | ' channel7[8]:=1
01804     24 0E 06 F1 | 	add	objptr, #36
01808     07 03 68 FC | 	wrlong	#1, objptr
0180c                 | ' channel8[8]:=1
0180c     24 0E 06 F1 | 	add	objptr, #36
01810     07 03 68 FC | 	wrlong	#1, objptr
01814     1C 0F 86 F1 | 	sub	objptr, #284
01818                 | ' 
01818                 | ' cog:=coginit(16,@audio,@channel1)
01818     03 00 00 FF 
0181c     E4 16 86 F1 | 	sub	ptr__audio012_spin2_dat__, ##1764
01820     0B 5F 02 F6 | 	mov	arg02, ptr__audio012_spin2_dat__
01824     07 61 02 F6 | 	mov	arg03, objptr
01828     10 5C 06 F6 | 	mov	arg01, #16
0182c     28 60 62 FD | 	setq	arg03
01830     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01834     01 5C 66 C6 |  if_b	neg	arg01, #1
01838     2E 2B 02 F6 | 	mov	result1, arg01
0183c                 | ' return cog
0183c     B0 0F 06 F1 | 	add	objptr, #432
01840     07 01 68 FC | 	wrlong	#0, objptr
01844     04 0E 06 F1 | 	add	objptr, #4
01848     07 01 68 FC | 	wrlong	#0, objptr
0184c     04 0E 06 F1 | 	add	objptr, #4
01850     07 01 68 FC | 	wrlong	#0, objptr
01854     04 0E 06 F1 | 	add	objptr, #4
01858     07 01 68 FC | 	wrlong	#0, objptr
0185c     04 00 00 FF 
01860     E8 0E 86 F1 | 	sub	objptr, ##2280
01864                 | ' getinfo(ma,samples)
01864                 | ' 
01864                 | ' paula.start
01864                 | ' 
01864                 | ' old1=0 : old2=0 :old3=0 : old4=0
01864                 | ' 
01864                 | ' do
01864                 | LR__0016
01864                 | ' 
01864                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01864                 | ' 
01864                 | ' repeat i from 1 to amount
01864     01 CC 06 F6 | 	mov	local50, #1
01868                 | LR__0017
01868                 | '   repeat until vblank==0
01868                 | LR__0018
01868     40 0E 06 F1 | 	add	objptr, #64
0186c     07 CF 0A FB | 	rdlong	local51, objptr wz
01870     40 0E 86 F1 | 	sub	objptr, #64
01874     0C 00 90 AD |  if_e	jmp	#LR__0019
01878                 | '     waitus(100)
01878     64 5C 06 F6 | 	mov	arg01, #100
0187c     3C 49 B0 FD | 	call	#__system___waitus
01880     E4 FF 9F FD | 	jmp	#LR__0018
01884                 | LR__0019
01884                 | '   repeat until vblank==1
01884                 | LR__0020
01884     40 0E 06 F1 | 	add	objptr, #64
01888     07 CF 02 FB | 	rdlong	local51, objptr
0188c     40 0E 86 F1 | 	sub	objptr, #64
01890     01 CE 0E F2 | 	cmp	local51, #1 wz
01894     0C 00 90 AD |  if_e	jmp	#LR__0021
01898                 | '     waitus(100)
01898     64 5C 06 F6 | 	mov	arg01, #100
0189c     1C 49 B0 FD | 	call	#__system___waitus
018a0     E0 FF 9F FD | 	jmp	#LR__0020
018a4                 | LR__0021
018a4     F0 CD 6E FB | 	djnz	local50, #LR__0017
018a8     02 00 00 FF 
018ac     30 0F 06 F1 | 	add	objptr, ##1328
018b0     FC 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018b4     A7 0E 06 F1 | 	add	objptr, #167
018b8     07 7D 02 FB | 	rdlong	local10, objptr
018bc     55 0F 06 F1 | 	add	objptr, #341
018c0     07 7D 62 FC | 	wrlong	local10, objptr
018c4     04 0E 06 F1 | 	add	objptr, #4
018c8     07 03 68 FC | 	wrlong	#1, objptr
018cc     45 0F 86 F1 | 	sub	objptr, #325
018d0     07 7D E2 FA | 	rdword	local10, objptr
018d4     08 0E 06 F1 | 	add	objptr, #8
018d8     07 D1 02 FB | 	rdlong	local52, objptr
018dc     68 7D 82 F1 | 	sub	local10, local52
018e0     41 0F 06 F1 | 	add	objptr, #321
018e4     07 7D 62 FC | 	wrlong	local10, objptr
018e8     49 0F 86 F1 | 	sub	objptr, #329
018ec     07 7D E2 FA | 	rdword	local10, objptr
018f0     4D 0F 06 F1 | 	add	objptr, #333
018f4     07 7D 62 FC | 	wrlong	local10, objptr
018f8     09 0F 86 F1 | 	sub	objptr, #265
018fc     07 D3 02 FB | 	rdlong	local53, objptr
01900     10 0E 06 F1 | 	add	objptr, #16
01904     07 D1 02 FB | 	rdlong	local52, objptr
01908     68 D3 02 F1 | 	add	local53, local52
0190c     07 D2 66 F0 | 	shl	local53, #7
01910     FD 0E 06 F1 | 	add	objptr, #253
01914     07 D3 62 FC | 	wrlong	local53, objptr
01918     04 0E 06 F1 | 	add	objptr, #4
0191c     0C 00 80 FF 
01920     07 01 68 FC | 	wrlong	##6144, objptr
01924     31 0F 86 F1 | 	sub	objptr, #305
01928     07 7D 02 FB | 	rdlong	local10, objptr
0192c     10 0E 06 F1 | 	add	objptr, #16
01930     07 D1 02 FB | 	rdlong	local52, objptr
01934     68 7D 02 F1 | 	add	local10, local52
01938     25 0F 06 F1 | 	add	objptr, #293
0193c     07 7D 62 FC | 	wrlong	local10, objptr
01940     04 0E 06 F1 | 	add	objptr, #4
01944     07 03 68 FC | 	wrlong	#1, objptr
01948                 | ' 
01948                 | '     waitvbl
01948                 | '     tracker.tick
01948                 | '     
01948                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01948                 | ' 	paula.channel1(1)=1
01948                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01948                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01948                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*128
01948                 | ' 	paula.channel1(5)=8192-2048
01948                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01948                 | ' 	paula.channel1(7)=1
01948                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus 10 : paula.channel1(8)=1 :old1=tracker.trigger(0)
01948     22 0E 86 F1 | 	sub	objptr, #34
0194c     07 7D C2 FA | 	rdbyte	local10, objptr
01950     B6 0F 06 F1 | 	add	objptr, #438
01954     07 D1 02 FB | 	rdlong	local52, objptr
01958     04 00 00 FF 
0195c     DC 0E 86 F1 | 	sub	objptr, ##2268
01960     68 7D 0A F2 | 	cmp	local10, local52 wz
01964     40 00 90 AD |  if_e	jmp	#LR__0022
01968     03 00 00 FF 
0196c     4C 0F 06 F1 | 	add	objptr, ##1868
01970     07 01 68 FC | 	wrlong	#0, objptr
01974     03 00 00 FF 
01978     4C 0F 86 F1 | 	sub	objptr, ##1868
0197c     0A 5C 06 F6 | 	mov	arg01, #10
01980     38 48 B0 FD | 	call	#__system___waitus
01984     03 00 00 FF 
01988     4C 0F 06 F1 | 	add	objptr, ##1868
0198c     07 03 68 FC | 	wrlong	#1, objptr
01990     26 0E 86 F1 | 	sub	objptr, #38
01994     07 7D C2 FA | 	rdbyte	local10, objptr
01998     B6 0F 06 F1 | 	add	objptr, #438
0199c     07 7D 62 FC | 	wrlong	local10, objptr
019a0     04 00 00 FF 
019a4     DC 0E 86 F1 | 	sub	objptr, ##2268
019a8                 | LR__0022
019a8     03 00 00 FF 
019ac     50 0F 06 F1 | 	add	objptr, ##1872
019b0     07 7D 02 FB | 	rdlong	local10, objptr
019b4     9C 0F 06 F1 | 	add	objptr, #412
019b8     07 7D 62 FC | 	wrlong	local10, objptr
019bc     01 00 00 FF 
019c0     11 0F 86 F1 | 	sub	objptr, ##785
019c4     07 7D 02 FB | 	rdlong	local10, objptr
019c8     75 0F 06 F1 | 	add	objptr, #373
019cc     07 7D 62 FC | 	wrlong	local10, objptr
019d0     04 0E 06 F1 | 	add	objptr, #4
019d4     07 03 68 FC | 	wrlong	#1, objptr
019d8     67 0F 86 F1 | 	sub	objptr, #359
019dc     07 7D E2 FA | 	rdword	local10, objptr
019e0     0A 0E 06 F1 | 	add	objptr, #10
019e4     07 D1 02 FB | 	rdlong	local52, objptr
019e8     68 7D 82 F1 | 	sub	local10, local52
019ec     61 0F 06 F1 | 	add	objptr, #353
019f0     07 7D 62 FC | 	wrlong	local10, objptr
019f4     6B 0F 86 F1 | 	sub	objptr, #363
019f8     07 7D E2 FA | 	rdword	local10, objptr
019fc     6F 0F 06 F1 | 	add	objptr, #367
01a00     07 7D 62 FC | 	wrlong	local10, objptr
01a04     29 0F 86 F1 | 	sub	objptr, #297
01a08     07 D3 02 FB | 	rdlong	local53, objptr
01a0c     10 0E 06 F1 | 	add	objptr, #16
01a10     07 D1 02 FB | 	rdlong	local52, objptr
01a14     68 D3 02 F1 | 	add	local53, local52
01a18     07 D2 66 F0 | 	shl	local53, #7
01a1c     1D 0F 06 F1 | 	add	objptr, #285
01a20     07 D3 62 FC | 	wrlong	local53, objptr
01a24     04 0E 06 F1 | 	add	objptr, #4
01a28     14 00 80 FF 
01a2c     07 01 68 FC | 	wrlong	##10240, objptr
01a30     51 0F 86 F1 | 	sub	objptr, #337
01a34     07 7D 02 FB | 	rdlong	local10, objptr
01a38     10 0E 06 F1 | 	add	objptr, #16
01a3c     07 D1 02 FB | 	rdlong	local52, objptr
01a40     68 7D 02 F1 | 	add	local10, local52
01a44     45 0F 06 F1 | 	add	objptr, #325
01a48     07 7D 62 FC | 	wrlong	local10, objptr
01a4c     04 0E 06 F1 | 	add	objptr, #4
01a50     07 03 68 FC | 	wrlong	#1, objptr
01a54                 | ' 
01a54                 | '     old12=paula.channel2(0)
01a54                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01a54                 | ' 	paula.channel2(1)=1
01a54                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01a54                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01a54                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*128
01a54                 | ' 	paula.channel2(5)=8192+2048
01a54                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01a54                 | ' 	paula.channel2(7)=1
01a54                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus 10 : paula.channel2(8)=1 :old2=tracker.trigger(1)
01a54     45 0E 86 F1 | 	sub	objptr, #69
01a58     07 7D C2 FA | 	rdbyte	local10, objptr
01a5c     B9 0F 06 F1 | 	add	objptr, #441
01a60     07 D1 02 FB | 	rdlong	local52, objptr
01a64     04 00 00 FF 
01a68     E0 0E 86 F1 | 	sub	objptr, ##2272
01a6c     68 7D 0A F2 | 	cmp	local10, local52 wz
01a70     40 00 90 AD |  if_e	jmp	#LR__0023
01a74     03 00 00 FF 
01a78     70 0F 06 F1 | 	add	objptr, ##1904
01a7c     07 01 68 FC | 	wrlong	#0, objptr
01a80     03 00 00 FF 
01a84     70 0F 86 F1 | 	sub	objptr, ##1904
01a88     0A 5C 06 F6 | 	mov	arg01, #10
01a8c     2C 47 B0 FD | 	call	#__system___waitus
01a90     03 00 00 FF 
01a94     70 0F 06 F1 | 	add	objptr, ##1904
01a98     07 03 68 FC | 	wrlong	#1, objptr
01a9c     49 0E 86 F1 | 	sub	objptr, #73
01aa0     07 7D C2 FA | 	rdbyte	local10, objptr
01aa4     B9 0F 06 F1 | 	add	objptr, #441
01aa8     07 7D 62 FC | 	wrlong	local10, objptr
01aac     04 00 00 FF 
01ab0     E0 0E 86 F1 | 	sub	objptr, ##2272
01ab4                 | LR__0023
01ab4     03 00 00 FF 
01ab8     74 0F 06 F1 | 	add	objptr, ##1908
01abc     07 7D 02 FB | 	rdlong	local10, objptr
01ac0     7C 0F 06 F1 | 	add	objptr, #380
01ac4     07 7D 62 FC | 	wrlong	local10, objptr
01ac8     01 00 00 FF 
01acc     11 0F 86 F1 | 	sub	objptr, ##785
01ad0     07 7D 02 FB | 	rdlong	local10, objptr
01ad4     95 0F 06 F1 | 	add	objptr, #405
01ad8     07 7D 62 FC | 	wrlong	local10, objptr
01adc     04 0E 06 F1 | 	add	objptr, #4
01ae0     07 03 68 FC | 	wrlong	#1, objptr
01ae4     89 0F 86 F1 | 	sub	objptr, #393
01ae8     07 7D E2 FA | 	rdword	local10, objptr
01aec     0C 0E 06 F1 | 	add	objptr, #12
01af0     07 D1 02 FB | 	rdlong	local52, objptr
01af4     68 7D 82 F1 | 	sub	local10, local52
01af8     81 0F 06 F1 | 	add	objptr, #385
01afc     07 7D 62 FC | 	wrlong	local10, objptr
01b00     8D 0F 86 F1 | 	sub	objptr, #397
01b04     07 7D E2 FA | 	rdword	local10, objptr
01b08     91 0F 06 F1 | 	add	objptr, #401
01b0c     07 7D 62 FC | 	wrlong	local10, objptr
01b10     49 0F 86 F1 | 	sub	objptr, #329
01b14     07 D3 02 FB | 	rdlong	local53, objptr
01b18     10 0E 06 F1 | 	add	objptr, #16
01b1c     07 D1 02 FB | 	rdlong	local52, objptr
01b20     68 D3 02 F1 | 	add	local53, local52
01b24     07 D2 66 F0 | 	shl	local53, #7
01b28     3D 0F 06 F1 | 	add	objptr, #317
01b2c     07 D3 62 FC | 	wrlong	local53, objptr
01b30     04 0E 06 F1 | 	add	objptr, #4
01b34     14 00 80 FF 
01b38     07 01 68 FC | 	wrlong	##10240, objptr
01b3c     71 0F 86 F1 | 	sub	objptr, #369
01b40     07 7D 02 FB | 	rdlong	local10, objptr
01b44     10 0E 06 F1 | 	add	objptr, #16
01b48     07 D1 02 FB | 	rdlong	local52, objptr
01b4c     68 7D 02 F1 | 	add	local10, local52
01b50     65 0F 06 F1 | 	add	objptr, #357
01b54     07 7D 62 FC | 	wrlong	local10, objptr
01b58     04 0E 06 F1 | 	add	objptr, #4
01b5c     07 03 68 FC | 	wrlong	#1, objptr
01b60                 | ' 
01b60                 | '     old13=paula.channel3(0)
01b60                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01b60                 | ' 	paula.channel3(1)=1
01b60                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01b60                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01b60                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*128
01b60                 | ' 	paula.channel3(5)=8192+2048
01b60                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01b60                 | ' 	paula.channel3(7)=1
01b60                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus 10 : paula.channel3(8)=1 :old3=tracker.trigger(2)
01b60     68 0E 86 F1 | 	sub	objptr, #104
01b64     07 7D C2 FA | 	rdbyte	local10, objptr
01b68     BC 0F 06 F1 | 	add	objptr, #444
01b6c     07 D1 02 FB | 	rdlong	local52, objptr
01b70     04 00 00 FF 
01b74     E4 0E 86 F1 | 	sub	objptr, ##2276
01b78     68 7D 0A F2 | 	cmp	local10, local52 wz
01b7c     40 00 90 AD |  if_e	jmp	#LR__0024
01b80     03 00 00 FF 
01b84     94 0F 06 F1 | 	add	objptr, ##1940
01b88     07 01 68 FC | 	wrlong	#0, objptr
01b8c     03 00 00 FF 
01b90     94 0F 86 F1 | 	sub	objptr, ##1940
01b94     0A 5C 06 F6 | 	mov	arg01, #10
01b98     20 46 B0 FD | 	call	#__system___waitus
01b9c     03 00 00 FF 
01ba0     94 0F 06 F1 | 	add	objptr, ##1940
01ba4     07 03 68 FC | 	wrlong	#1, objptr
01ba8     6C 0E 86 F1 | 	sub	objptr, #108
01bac     07 7D C2 FA | 	rdbyte	local10, objptr
01bb0     BC 0F 06 F1 | 	add	objptr, #444
01bb4     07 7D 62 FC | 	wrlong	local10, objptr
01bb8     04 00 00 FF 
01bbc     E4 0E 86 F1 | 	sub	objptr, ##2276
01bc0                 | LR__0024
01bc0     03 00 00 FF 
01bc4     98 0F 06 F1 | 	add	objptr, ##1944
01bc8     07 7D 02 FB | 	rdlong	local10, objptr
01bcc     5C 0F 06 F1 | 	add	objptr, #348
01bd0     07 7D 62 FC | 	wrlong	local10, objptr
01bd4     01 00 00 FF 
01bd8     11 0F 86 F1 | 	sub	objptr, ##785
01bdc     07 7D 02 FB | 	rdlong	local10, objptr
01be0     B5 0F 06 F1 | 	add	objptr, #437
01be4     07 7D 62 FC | 	wrlong	local10, objptr
01be8     04 0E 06 F1 | 	add	objptr, #4
01bec     07 03 68 FC | 	wrlong	#1, objptr
01bf0     AB 0F 86 F1 | 	sub	objptr, #427
01bf4     07 7D E2 FA | 	rdword	local10, objptr
01bf8     0E 0E 06 F1 | 	add	objptr, #14
01bfc     07 D1 02 FB | 	rdlong	local52, objptr
01c00     68 7D 82 F1 | 	sub	local10, local52
01c04     A1 0F 06 F1 | 	add	objptr, #417
01c08     07 7D 62 FC | 	wrlong	local10, objptr
01c0c     AF 0F 86 F1 | 	sub	objptr, #431
01c10     07 7D E2 FA | 	rdword	local10, objptr
01c14     B3 0F 06 F1 | 	add	objptr, #435
01c18     07 7D 62 FC | 	wrlong	local10, objptr
01c1c     69 0F 86 F1 | 	sub	objptr, #361
01c20     07 D3 02 FB | 	rdlong	local53, objptr
01c24     10 0E 06 F1 | 	add	objptr, #16
01c28     07 D1 02 FB | 	rdlong	local52, objptr
01c2c     68 D3 02 F1 | 	add	local53, local52
01c30     07 D2 66 F0 | 	shl	local53, #7
01c34     5D 0F 06 F1 | 	add	objptr, #349
01c38     07 D3 62 FC | 	wrlong	local53, objptr
01c3c     04 0E 06 F1 | 	add	objptr, #4
01c40     0C 00 80 FF 
01c44     07 01 68 FC | 	wrlong	##6144, objptr
01c48     91 0F 86 F1 | 	sub	objptr, #401
01c4c     07 7D 02 FB | 	rdlong	local10, objptr
01c50     10 0E 06 F1 | 	add	objptr, #16
01c54     07 D1 02 FB | 	rdlong	local52, objptr
01c58     68 7D 02 F1 | 	add	local10, local52
01c5c     85 0F 06 F1 | 	add	objptr, #389
01c60     07 7D 62 FC | 	wrlong	local10, objptr
01c64     04 0E 06 F1 | 	add	objptr, #4
01c68     07 03 68 FC | 	wrlong	#1, objptr
01c6c                 | ' 
01c6c                 | '     old14=paula.channel4(0)    
01c6c                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01c6c                 | ' 	paula.channel4(1)=1
01c6c                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01c6c                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01c6c                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*128
01c6c                 | ' 	paula.channel4(5)=8192-2048
01c6c                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01c6c                 | ' 	paula.channel4(7)=1
01c6c                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus 10 : paula.channel4(8)=1 :old4=tracker.trigger(3)
01c6c     8B 0E 86 F1 | 	sub	objptr, #139
01c70     07 7D C2 FA | 	rdbyte	local10, objptr
01c74     BF 0F 06 F1 | 	add	objptr, #447
01c78     07 D1 02 FB | 	rdlong	local52, objptr
01c7c     04 00 00 FF 
01c80     E8 0E 86 F1 | 	sub	objptr, ##2280
01c84     68 7D 0A F2 | 	cmp	local10, local52 wz
01c88     40 00 90 AD |  if_e	jmp	#LR__0025
01c8c     03 00 00 FF 
01c90     B8 0F 06 F1 | 	add	objptr, ##1976
01c94     07 01 68 FC | 	wrlong	#0, objptr
01c98     03 00 00 FF 
01c9c     B8 0F 86 F1 | 	sub	objptr, ##1976
01ca0     0A 5C 06 F6 | 	mov	arg01, #10
01ca4     14 45 B0 FD | 	call	#__system___waitus
01ca8     03 00 00 FF 
01cac     B8 0F 06 F1 | 	add	objptr, ##1976
01cb0     07 03 68 FC | 	wrlong	#1, objptr
01cb4     8F 0E 86 F1 | 	sub	objptr, #143
01cb8     07 7D C2 FA | 	rdbyte	local10, objptr
01cbc     BF 0F 06 F1 | 	add	objptr, #447
01cc0     07 7D 62 FC | 	wrlong	local10, objptr
01cc4     04 00 00 FF 
01cc8     E8 0E 86 F1 | 	sub	objptr, ##2280
01ccc                 | LR__0025
01ccc     1D 5E 06 F6 | 	mov	arg02, #29
01cd0                 | ' 
01cd0                 | ' ''---------- Set the (x,y) position of cursor
01cd0                 | ' 
01cd0                 | ' cursor_x:=x
01cd0     34 0E 06 F1 | 	add	objptr, #52
01cd4     07 0B 48 FC | 	wrbyte	#5, objptr
01cd8                 | ' cursor_y:=y
01cd8     01 0E 06 F1 | 	add	objptr, #1
01cdc     07 3B 48 FC | 	wrbyte	#29, objptr
01ce0     02 00 00 FF 
01ce4     B2 0F 06 F1 | 	add	objptr, ##1458
01ce8     07 D5 C2 FA | 	rdbyte	local54, objptr
01cec     02 D4 66 F0 | 	shl	local54, #2
01cf0     01 00 00 FF 
01cf4     65 0E 06 F1 | 	add	objptr, ##613
01cf8     07 D5 02 F1 | 	add	local54, objptr
01cfc     6A 5D 02 FB | 	rdlong	arg01, local54
01d00     04 00 00 FF 
01d04     4C 0E 86 F1 | 	sub	objptr, ##2124
01d08     B4 09 B0 FD | 	call	#_hng030rm_spin2_write
01d0c     04 00 00 FF 
01d10     D0 0E 06 F1 | 	add	objptr, ##2256
01d14     07 5D 02 FB | 	rdlong	arg01, objptr
01d18     04 00 00 FF 
01d1c     D0 0E 86 F1 | 	sub	objptr, ##2256
01d20     9C 09 B0 FD | 	call	#_hng030rm_spin2_write
01d24                 | ' 
01d24                 | ' ''---------- Set the (x,y) position of cursor
01d24                 | ' 
01d24                 | ' cursor_x:=x
01d24     34 0E 06 F1 | 	add	objptr, #52
01d28     07 03 48 FC | 	wrbyte	#1, objptr
01d2c                 | ' cursor_y:=y
01d2c     01 0E 06 F1 | 	add	objptr, #1
01d30     07 3B 48 FC | 	wrbyte	#29, objptr
01d34     02 00 00 FF 
01d38     DA 0F 06 F1 | 	add	objptr, ##1498
01d3c     07 5D 02 FB | 	rdlong	arg01, objptr
01d40     10 0E 06 F1 | 	add	objptr, #16
01d44     07 D5 02 FB | 	rdlong	local54, objptr
01d48     03 00 00 FF 
01d4c     1F 0E 86 F1 | 	sub	objptr, ##1567
01d50     6A 5D 02 F1 | 	add	arg01, local54
01d54     03 5E 06 F6 | 	mov	arg02, #3
01d58     E0 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01d5c     15 5D 02 F6 | 	mov	arg01, result1
01d60     5C 09 B0 FD | 	call	#_hng030rm_spin2_write
01d64     1D 5E 06 F6 | 	mov	arg02, #29
01d68                 | ' 
01d68                 | ' ''---------- Set the (x,y) position of cursor
01d68                 | ' 
01d68                 | ' cursor_x:=x
01d68     34 0E 06 F1 | 	add	objptr, #52
01d6c     07 41 48 FC | 	wrbyte	#32, objptr
01d70                 | ' cursor_y:=y
01d70     01 0E 06 F1 | 	add	objptr, #1
01d74     07 3B 48 FC | 	wrbyte	#29, objptr
01d78     02 00 00 FF 
01d7c     B3 0F 06 F1 | 	add	objptr, ##1459
01d80     07 D5 C2 FA | 	rdbyte	local54, objptr
01d84     02 D4 66 F0 | 	shl	local54, #2
01d88     01 00 00 FF 
01d8c     64 0E 06 F1 | 	add	objptr, ##612
01d90     07 D5 02 F1 | 	add	local54, objptr
01d94     6A 5D 02 FB | 	rdlong	arg01, local54
01d98     04 00 00 FF 
01d9c     4C 0E 86 F1 | 	sub	objptr, ##2124
01da0     1C 09 B0 FD | 	call	#_hng030rm_spin2_write
01da4     04 00 00 FF 
01da8     D0 0E 06 F1 | 	add	objptr, ##2256
01dac     07 5D 02 FB | 	rdlong	arg01, objptr
01db0     04 00 00 FF 
01db4     D0 0E 86 F1 | 	sub	objptr, ##2256
01db8     04 09 B0 FD | 	call	#_hng030rm_spin2_write
01dbc                 | ' 
01dbc                 | ' ''---------- Set the (x,y) position of cursor
01dbc                 | ' 
01dbc                 | ' cursor_x:=x
01dbc     34 0E 06 F1 | 	add	objptr, #52
01dc0     07 39 48 FC | 	wrbyte	#28, objptr
01dc4                 | ' cursor_y:=y
01dc4     01 0E 06 F1 | 	add	objptr, #1
01dc8     07 3B 48 FC | 	wrbyte	#29, objptr
01dcc     02 00 00 FF 
01dd0     DE 0F 06 F1 | 	add	objptr, ##1502
01dd4     07 5D 02 FB | 	rdlong	arg01, objptr
01dd8     10 0E 06 F1 | 	add	objptr, #16
01ddc     07 D5 02 FB | 	rdlong	local54, objptr
01de0     03 00 00 FF 
01de4     23 0E 86 F1 | 	sub	objptr, ##1571
01de8     6A 5D 02 F1 | 	add	arg01, local54
01dec     03 5E 06 F6 | 	mov	arg02, #3
01df0     48 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01df4     15 5D 02 F6 | 	mov	arg01, result1
01df8     C4 08 B0 FD | 	call	#_hng030rm_spin2_write
01dfc     1D 5E 06 F6 | 	mov	arg02, #29
01e00                 | ' 
01e00                 | ' ''---------- Set the (x,y) position of cursor
01e00                 | ' 
01e00                 | ' cursor_x:=x
01e00     34 0E 06 F1 | 	add	objptr, #52
01e04     07 79 48 FC | 	wrbyte	#60, objptr
01e08                 | ' cursor_y:=y
01e08     01 0E 06 F1 | 	add	objptr, #1
01e0c     07 3B 48 FC | 	wrbyte	#29, objptr
01e10     02 00 00 FF 
01e14     B4 0F 06 F1 | 	add	objptr, ##1460
01e18     07 D5 C2 FA | 	rdbyte	local54, objptr
01e1c     02 D4 66 F0 | 	shl	local54, #2
01e20     01 00 00 FF 
01e24     63 0E 06 F1 | 	add	objptr, ##611
01e28     07 D5 02 F1 | 	add	local54, objptr
01e2c     6A 5D 02 FB | 	rdlong	arg01, local54
01e30     04 00 00 FF 
01e34     4C 0E 86 F1 | 	sub	objptr, ##2124
01e38     84 08 B0 FD | 	call	#_hng030rm_spin2_write
01e3c     04 00 00 FF 
01e40     D0 0E 06 F1 | 	add	objptr, ##2256
01e44     07 5D 02 FB | 	rdlong	arg01, objptr
01e48     04 00 00 FF 
01e4c     D0 0E 86 F1 | 	sub	objptr, ##2256
01e50     6C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e54                 | ' 
01e54                 | ' ''---------- Set the (x,y) position of cursor
01e54                 | ' 
01e54                 | ' cursor_x:=x
01e54     34 0E 06 F1 | 	add	objptr, #52
01e58     07 71 48 FC | 	wrbyte	#56, objptr
01e5c                 | ' cursor_y:=y
01e5c     01 0E 06 F1 | 	add	objptr, #1
01e60     07 3B 48 FC | 	wrbyte	#29, objptr
01e64     02 00 00 FF 
01e68     E2 0F 06 F1 | 	add	objptr, ##1506
01e6c     07 5D 02 FB | 	rdlong	arg01, objptr
01e70     10 0E 06 F1 | 	add	objptr, #16
01e74     07 D5 02 FB | 	rdlong	local54, objptr
01e78     03 00 00 FF 
01e7c     27 0E 86 F1 | 	sub	objptr, ##1575
01e80     6A 5D 02 F1 | 	add	arg01, local54
01e84     03 5E 06 F6 | 	mov	arg02, #3
01e88     B0 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e8c     15 5D 02 F6 | 	mov	arg01, result1
01e90     2C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e94                 | ' 
01e94                 | ' ''---------- Set the (x,y) position of cursor
01e94                 | ' 
01e94                 | ' cursor_x:=x
01e94     34 0E 06 F1 | 	add	objptr, #52
01e98     07 A9 48 FC | 	wrbyte	#84, objptr
01e9c                 | ' cursor_y:=y
01e9c     01 0E 06 F1 | 	add	objptr, #1
01ea0     07 3B 48 FC | 	wrbyte	#29, objptr
01ea4     02 00 00 FF 
01ea8     E6 0F 06 F1 | 	add	objptr, ##1510
01eac     07 5D 02 FB | 	rdlong	arg01, objptr
01eb0     10 0E 06 F1 | 	add	objptr, #16
01eb4     07 D5 02 FB | 	rdlong	local54, objptr
01eb8     03 00 00 FF 
01ebc     2B 0E 86 F1 | 	sub	objptr, ##1579
01ec0     6A 5D 02 F1 | 	add	arg01, local54
01ec4     03 5E 06 F6 | 	mov	arg02, #3
01ec8     70 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ecc     15 5D 02 F6 | 	mov	arg01, result1
01ed0     EC 07 B0 FD | 	call	#_hng030rm_spin2_write
01ed4     1D 5E 06 F6 | 	mov	arg02, #29
01ed8                 | ' 
01ed8                 | ' ''---------- Set the (x,y) position of cursor
01ed8                 | ' 
01ed8                 | ' cursor_x:=x
01ed8     34 0E 06 F1 | 	add	objptr, #52
01edc     07 B1 48 FC | 	wrbyte	#88, objptr
01ee0                 | ' cursor_y:=y
01ee0     01 0E 06 F1 | 	add	objptr, #1
01ee4     07 3B 48 FC | 	wrbyte	#29, objptr
01ee8     02 00 00 FF 
01eec     B5 0F 06 F1 | 	add	objptr, ##1461
01ef0     07 D5 C2 FA | 	rdbyte	local54, objptr
01ef4     02 D4 66 F0 | 	shl	local54, #2
01ef8     01 00 00 FF 
01efc     62 0E 06 F1 | 	add	objptr, ##610
01f00     07 D5 02 F1 | 	add	local54, objptr
01f04     6A 5D 02 FB | 	rdlong	arg01, local54
01f08     04 00 00 FF 
01f0c     4C 0E 86 F1 | 	sub	objptr, ##2124
01f10     AC 07 B0 FD | 	call	#_hng030rm_spin2_write
01f14     04 00 00 FF 
01f18     D0 0E 06 F1 | 	add	objptr, ##2256
01f1c     07 5D 02 FB | 	rdlong	arg01, objptr
01f20     04 00 00 FF 
01f24     D0 0E 86 F1 | 	sub	objptr, ##2256
01f28     94 07 B0 FD | 	call	#_hng030rm_spin2_write
01f2c     01 5E 06 F6 | 	mov	arg02, #1
01f30                 | ' 
01f30                 | ' ''---------- Set the (x,y) position of cursor
01f30                 | ' 
01f30                 | ' cursor_x:=x
01f30     34 0E 06 F1 | 	add	objptr, #52
01f34     07 B5 48 FC | 	wrbyte	#90, objptr
01f38                 | ' cursor_y:=y
01f38     01 0E 06 F1 | 	add	objptr, #1
01f3c     07 03 48 FC | 	wrbyte	#1, objptr
01f40     35 0E 86 F1 | 	sub	objptr, #53
01f44     40 00 00 FF 
01f48     7A 5D 06 F6 | 	mov	arg01, ##@LR__0456
01f4c     70 07 B0 FD | 	call	#_hng030rm_spin2_write
01f50                 | ' asm
01f50     80 5C 06 FB | 	rdlong	arg01, #128
01f54                 | ' return r
01f54     08 5E 06 F6 | 	mov	arg02, #8
01f58                 | ' 
01f58                 | ' j:=i
01f58                 | ' pos:=d-1
01f58     07 D6 06 F6 | 	mov	local55, #7
01f5c                 | ' k:=0
01f5c     44 0E 06 F1 | 	add	objptr, #68
01f60     07 5F 02 F1 | 	add	arg02, objptr
01f64                 | ' n_string[d]:=0
01f64     2F 01 48 FC | 	wrbyte	#0, arg02
01f68                 | ' repeat k from 0 to d-1
01f68     00 D8 06 F6 | 	mov	local56, #0
01f6c     44 0E 86 F1 | 	sub	objptr, #68
01f70     AC E0 9F FE | 	loc	pa,	#(@LR__0027-@LR__0026)
01f74     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f78                 | LR__0026
01f78     6C DB 02 F6 | 	mov	local57, local56
01f7c     44 0E 06 F1 | 	add	objptr, #68
01f80     07 DB 02 F1 | 	add	local57, objptr
01f84                 | '   n_string[k]:=48
01f84     6D 61 48 FC | 	wrbyte	#48, local57
01f88     01 D8 06 F1 | 	add	local56, #1
01f8c     08 D8 0E F2 | 	cmp	local56, #8 wz
01f90     44 0E 86 F1 | 	sub	objptr, #68
01f94     E0 FF 9F 5D |  if_ne	jmp	#LR__0026
01f98                 | LR__0027
01f98                 | ' if (j<>0)
01f98     00 5C 0E F2 | 	cmp	arg01, #0 wz
01f9c     40 00 90 AD |  if_e	jmp	#LR__0030
01fa0                 | ' 
01fa0                 | '   repeat while (pos>-1)
01fa0                 | LR__0028
01fa0     FF FF 7F FF 
01fa4     FF D7 5E F2 | 	cmps	local55, ##-1 wcz
01fa8     34 00 90 ED |  if_be	jmp	#LR__0029
01fac     2E DD 02 F6 | 	mov	local58, arg01
01fb0     0F DC 06 F5 | 	and	local58, #15
01fb4                 | '     q:=j+//16
01fb4                 | '     if (q>9)
01fb4     09 DC 5E F2 | 	cmps	local58, #9 wcz
01fb8                 | '       q:=q+7
01fb8     07 DC 06 11 |  if_a	add	local58, #7
01fbc                 | '     q:=48+q
01fbc     30 DC 06 F1 | 	add	local58, #48
01fc0     6B DF 02 F6 | 	mov	local59, local55
01fc4     44 0E 06 F1 | 	add	objptr, #68
01fc8     07 DF 02 F1 | 	add	local59, objptr
01fcc                 | '     n_string[pos]:=q
01fcc     6F DD 42 FC | 	wrbyte	local58, local59
01fd0                 | '     j:=j+/16
01fd0     04 5C 46 F0 | 	shr	arg01, #4
01fd4                 | '     pos-=1
01fd4     01 D6 86 F1 | 	sub	local55, #1
01fd8     44 0E 86 F1 | 	sub	objptr, #68
01fdc     C0 FF 9F FD | 	jmp	#LR__0028
01fe0                 | LR__0029
01fe0                 | LR__0030
01fe0     44 0E 06 F1 | 	add	objptr, #68
01fe4     07 2B 02 F6 | 	mov	result1, objptr
01fe8     44 0E 86 F1 | 	sub	objptr, #68
01fec                 | ' 
01fec                 | ' q:=@n_string
01fec                 | ' return q
01fec     15 5D 02 F6 | 	mov	arg01, result1
01ff0     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01ff4     6C F8 9F FD | 	jmp	#LR__0016
01ff8     AF F0 03 F6 | 	mov	ptra, fp
01ffc     BF 00 A0 FD | 	call	#popregs_
02000                 | _program_ret
02000     2D 00 64 FD | 	ret
02004                 | 
02004                 | ' 
02004                 | ' 
02004                 | ' ''---------- putpixel - put a pixel on the screen
02004                 | ' 
02004                 | ' pub putpixel1(x,y,c) |byte b
02004                 | _hng030rm_spin2_putpixel1
02004                 | ' 
02004                 | ' 
02004                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
02004     00 30 06 F6 | 	mov	_var01, #0
02008     00 5C 5E F2 | 	cmps	arg01, #0 wcz
0200c     01 30 66 36 |  if_ae	neg	_var01, #1
02010     00 32 06 F6 | 	mov	_var02, #0
02014     90 0E 06 F1 | 	add	objptr, #144
02018     07 35 02 FB | 	rdlong	_var03, objptr
0201c     05 34 66 F0 | 	shl	_var03, #5
02020     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02024     01 32 66 C6 |  if_b	neg	_var02, #1
02028     19 31 02 F5 | 	and	_var01, _var02
0202c     00 36 06 F6 | 	mov	_var04, #0
02030     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02034     01 36 66 36 |  if_ae	neg	_var04, #1
02038     1B 31 02 F5 | 	and	_var01, _var04
0203c     00 38 06 F6 | 	mov	_var05, #0
02040     04 0E 06 F1 | 	add	objptr, #4
02044     07 3B 02 FB | 	rdlong	_var06, objptr
02048     94 0E 86 F1 | 	sub	objptr, #148
0204c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02050     01 38 66 C6 |  if_b	neg	_var05, #1
02054     1C 31 CA F7 | 	test	_var01, _var05 wz
02058     8C 00 90 AD |  if_e	jmp	#LR__0033
0205c     90 0E 06 F1 | 	add	objptr, #144
02060     07 3D 02 FB | 	rdlong	_var07, objptr
02064     90 0E 86 F1 | 	sub	objptr, #144
02068     02 3C 66 F0 | 	shl	_var07, #2
0206c     2F 3D 02 FD | 	qmul	_var07, arg02
02070     18 3E 62 FD | 	getqx	_var08
02074     07 41 02 FB | 	rdlong	_var09, objptr
02078     1F 41 02 F1 | 	add	_var09, _var08
0207c     2E 43 02 F6 | 	mov	_var10, arg01
02080     03 42 46 F0 | 	shr	_var10, #3
02084     21 41 02 F1 | 	add	_var09, _var10
02088                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02088     20 45 C2 FA | 	rdbyte	_var11, _var09
0208c                 | '     if (c==0)
0208c     00 60 0E F2 | 	cmp	arg03, #0 wz
02090     18 00 90 5D |  if_ne	jmp	#LR__0031
02094     2E 31 52 F6 | 	abs	_var01, arg01 wc
02098     07 30 06 F5 | 	and	_var01, #7
0209c     18 31 62 C6 |  if_b	neg	_var01, _var01
020a0     18 47 C2 F9 | 	decod	_var12, _var01
020a4                 | '       b:=b & !(1<<(x//8))
020a4     23 45 22 F5 | 	andn	_var11, _var12
020a8                 | '     else
020a8     14 00 90 FD | 	jmp	#LR__0032
020ac                 | LR__0031
020ac     2E 31 52 F6 | 	abs	_var01, arg01 wc
020b0     07 30 06 F5 | 	and	_var01, #7
020b4     18 31 62 C6 |  if_b	neg	_var01, _var01
020b8     18 49 C2 F9 | 	decod	_var13, _var01
020bc                 | '       b:=b |(1<<(x//8))
020bc     24 45 42 F5 | 	or	_var11, _var13
020c0                 | LR__0032
020c0     90 0E 06 F1 | 	add	objptr, #144
020c4     07 4B 02 FB | 	rdlong	_var14, objptr
020c8     90 0E 86 F1 | 	sub	objptr, #144
020cc     02 4A 66 F0 | 	shl	_var14, #2
020d0     2F 4B 02 FD | 	qmul	_var14, arg02
020d4     18 4C 62 FD | 	getqx	_var15
020d8     07 4F 02 FB | 	rdlong	_var16, objptr
020dc     26 4F 02 F1 | 	add	_var16, _var15
020e0     21 4F 02 F1 | 	add	_var16, _var10
020e4                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
020e4     27 45 42 FC | 	wrbyte	_var11, _var16
020e8                 | LR__0033
020e8                 | _hng030rm_spin2_putpixel1_ret
020e8     2D 00 64 FD | 	ret
020ec                 | 
020ec                 | ' 
020ec                 | ' 
020ec                 | ' pub putpixel2(x,y,c) |byte b
020ec                 | _hng030rm_spin2_putpixel2
020ec                 | ' 
020ec                 | ' 
020ec                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020ec     00 30 06 F6 | 	mov	_var01, #0
020f0     00 5C 5E F2 | 	cmps	arg01, #0 wcz
020f4     01 30 66 36 |  if_ae	neg	_var01, #1
020f8     00 32 06 F6 | 	mov	_var02, #0
020fc     90 0E 06 F1 | 	add	objptr, #144
02100     07 35 02 FB | 	rdlong	_var03, objptr
02104     04 34 66 F0 | 	shl	_var03, #4
02108     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
0210c     01 32 66 C6 |  if_b	neg	_var02, #1
02110     19 31 02 F5 | 	and	_var01, _var02
02114     00 36 06 F6 | 	mov	_var04, #0
02118     00 5E 5E F2 | 	cmps	arg02, #0 wcz
0211c     01 36 66 36 |  if_ae	neg	_var04, #1
02120     1B 31 02 F5 | 	and	_var01, _var04
02124     00 38 06 F6 | 	mov	_var05, #0
02128     04 0E 06 F1 | 	add	objptr, #4
0212c     07 3B 02 FB | 	rdlong	_var06, objptr
02130     94 0E 86 F1 | 	sub	objptr, #148
02134     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02138     01 38 66 C6 |  if_b	neg	_var05, #1
0213c     1C 31 CA F7 | 	test	_var01, _var05 wz
02140     7C 00 90 AD |  if_e	jmp	#LR__0034
02144     90 0E 06 F1 | 	add	objptr, #144
02148     07 3D 02 FB | 	rdlong	_var07, objptr
0214c     90 0E 86 F1 | 	sub	objptr, #144
02150     02 3C 66 F0 | 	shl	_var07, #2
02154     2F 3D 02 FD | 	qmul	_var07, arg02
02158     18 3E 62 FD | 	getqx	_var08
0215c     07 41 02 FB | 	rdlong	_var09, objptr
02160     1F 41 02 F1 | 	add	_var09, _var08
02164     2E 43 02 F6 | 	mov	_var10, arg01
02168     02 42 46 F0 | 	shr	_var10, #2
0216c     21 41 02 F1 | 	add	_var09, _var10
02170                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02170     20 45 C2 FA | 	rdbyte	_var11, _var09
02174     2E 31 52 F6 | 	abs	_var01, arg01 wc
02178     03 30 06 F5 | 	and	_var01, #3
0217c     18 31 62 C6 |  if_b	neg	_var01, _var01
02180     01 30 66 F0 | 	shl	_var01, #1
02184     03 46 06 F6 | 	mov	_var12, #3
02188     18 47 62 F0 | 	shl	_var12, _var01
0218c                 | '     b:=b & !(%11<<((x//4)<<1))
0218c     23 45 22 F5 | 	andn	_var11, _var12
02190     18 61 62 F0 | 	shl	arg03, _var01
02194                 | '     b:=b |(c<<((x//4)<<1))
02194     30 45 42 F5 | 	or	_var11, arg03
02198     90 0E 06 F1 | 	add	objptr, #144
0219c     07 49 02 FB | 	rdlong	_var13, objptr
021a0     90 0E 86 F1 | 	sub	objptr, #144
021a4     02 48 66 F0 | 	shl	_var13, #2
021a8     2F 49 02 FD | 	qmul	_var13, arg02
021ac     18 4A 62 FD | 	getqx	_var14
021b0     07 4D 02 FB | 	rdlong	_var15, objptr
021b4     25 4D 02 F1 | 	add	_var15, _var14
021b8     21 4D 02 F1 | 	add	_var15, _var10
021bc                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
021bc     26 45 42 FC | 	wrbyte	_var11, _var15
021c0                 | LR__0034
021c0                 | _hng030rm_spin2_putpixel2_ret
021c0     2D 00 64 FD | 	ret
021c4                 | 
021c4                 | ' 
021c4                 | ' 
021c4                 | ' pub putpixel4(x,y,c) |byte b
021c4                 | _hng030rm_spin2_putpixel4
021c4                 | ' 
021c4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
021c4     00 30 06 F6 | 	mov	_var01, #0
021c8     00 5C 5E F2 | 	cmps	arg01, #0 wcz
021cc     01 30 66 36 |  if_ae	neg	_var01, #1
021d0     00 32 06 F6 | 	mov	_var02, #0
021d4     90 0E 06 F1 | 	add	objptr, #144
021d8     07 35 02 FB | 	rdlong	_var03, objptr
021dc     04 34 66 F0 | 	shl	_var03, #4
021e0     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
021e4     01 32 66 C6 |  if_b	neg	_var02, #1
021e8     19 31 02 F5 | 	and	_var01, _var02
021ec     00 36 06 F6 | 	mov	_var04, #0
021f0     00 5E 5E F2 | 	cmps	arg02, #0 wcz
021f4     01 36 66 36 |  if_ae	neg	_var04, #1
021f8     1B 31 02 F5 | 	and	_var01, _var04
021fc     00 38 06 F6 | 	mov	_var05, #0
02200     04 0E 06 F1 | 	add	objptr, #4
02204     07 3B 02 FB | 	rdlong	_var06, objptr
02208     94 0E 86 F1 | 	sub	objptr, #148
0220c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02210     01 38 66 C6 |  if_b	neg	_var05, #1
02214     1C 31 CA F7 | 	test	_var01, _var05 wz
02218     7C 00 90 AD |  if_e	jmp	#LR__0035
0221c     90 0E 06 F1 | 	add	objptr, #144
02220     07 3D 02 FB | 	rdlong	_var07, objptr
02224     90 0E 86 F1 | 	sub	objptr, #144
02228     02 3C 66 F0 | 	shl	_var07, #2
0222c     2F 3D 02 FD | 	qmul	_var07, arg02
02230     18 3E 62 FD | 	getqx	_var08
02234     07 41 02 FB | 	rdlong	_var09, objptr
02238     1F 41 02 F1 | 	add	_var09, _var08
0223c     2E 43 02 F6 | 	mov	_var10, arg01
02240     01 42 46 F0 | 	shr	_var10, #1
02244     21 41 02 F1 | 	add	_var09, _var10
02248                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02248     20 45 C2 FA | 	rdbyte	_var11, _var09
0224c     2E 31 52 F6 | 	abs	_var01, arg01 wc
02250     01 30 06 F5 | 	and	_var01, #1
02254     18 31 62 C6 |  if_b	neg	_var01, _var01
02258     02 30 66 F0 | 	shl	_var01, #2
0225c     0F 46 06 F6 | 	mov	_var12, #15
02260     18 47 62 F0 | 	shl	_var12, _var01
02264                 | '     b:=b & !(%1111<<((x//2)<<2))
02264     23 45 22 F5 | 	andn	_var11, _var12
02268     18 61 62 F0 | 	shl	arg03, _var01
0226c                 | '     b:=b |(c<<((x//2)<<2))
0226c     30 45 42 F5 | 	or	_var11, arg03
02270     90 0E 06 F1 | 	add	objptr, #144
02274     07 49 02 FB | 	rdlong	_var13, objptr
02278     90 0E 86 F1 | 	sub	objptr, #144
0227c     02 48 66 F0 | 	shl	_var13, #2
02280     2F 49 02 FD | 	qmul	_var13, arg02
02284     18 4A 62 FD | 	getqx	_var14
02288     07 4D 02 FB | 	rdlong	_var15, objptr
0228c     25 4D 02 F1 | 	add	_var15, _var14
02290     21 4D 02 F1 | 	add	_var15, _var10
02294                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02294     26 45 42 FC | 	wrbyte	_var11, _var15
02298                 | LR__0035
02298                 | _hng030rm_spin2_putpixel4_ret
02298     2D 00 64 FD | 	ret
0229c                 | 
0229c                 | ' 
0229c                 | ' 
0229c                 | ' pub putpixel8(x,y,c)
0229c                 | _hng030rm_spin2_putpixel8
0229c                 | ' 
0229c                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
0229c     00 30 06 F6 | 	mov	_var01, #0
022a0     00 5C 5E F2 | 	cmps	arg01, #0 wcz
022a4     01 30 66 36 |  if_ae	neg	_var01, #1
022a8     00 32 06 F6 | 	mov	_var02, #0
022ac     90 0E 06 F1 | 	add	objptr, #144
022b0     07 35 02 FB | 	rdlong	_var03, objptr
022b4     02 34 66 F0 | 	shl	_var03, #2
022b8     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
022bc     01 32 66 C6 |  if_b	neg	_var02, #1
022c0     19 31 02 F5 | 	and	_var01, _var02
022c4     00 36 06 F6 | 	mov	_var04, #0
022c8     00 5E 5E F2 | 	cmps	arg02, #0 wcz
022cc     01 36 66 36 |  if_ae	neg	_var04, #1
022d0     1B 31 02 F5 | 	and	_var01, _var04
022d4     00 38 06 F6 | 	mov	_var05, #0
022d8     04 0E 06 F1 | 	add	objptr, #4
022dc     07 3B 02 FB | 	rdlong	_var06, objptr
022e0     94 0E 86 F1 | 	sub	objptr, #148
022e4     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
022e8     01 38 66 C6 |  if_b	neg	_var05, #1
022ec     1C 31 CA F7 | 	test	_var01, _var05 wz
022f0     28 00 90 AD |  if_e	jmp	#LR__0036
022f4     90 0E 06 F1 | 	add	objptr, #144
022f8     07 3D 02 FB | 	rdlong	_var07, objptr
022fc     90 0E 86 F1 | 	sub	objptr, #144
02300     02 3C 66 F0 | 	shl	_var07, #2
02304     2F 3D 02 FD | 	qmul	_var07, arg02
02308     18 3E 62 FD | 	getqx	_var08
0230c     07 41 02 FB | 	rdlong	_var09, objptr
02310     1F 41 02 F1 | 	add	_var09, _var08
02314     2E 41 02 F1 | 	add	_var09, arg01
02318                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02318     20 61 42 FC | 	wrbyte	arg03, _var09
0231c                 | LR__0036
0231c                 | _hng030rm_spin2_putpixel8_ret
0231c     2D 00 64 FD | 	ret
02320                 | 
02320                 | ' 
02320                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02320                 | ' 
02320                 | ' pub setbordercolor(r,g,b) | color
02320                 | _hng030rm_spin2_setbordercolor
02320     18 5C 66 F0 | 	shl	arg01, #24
02324     10 5E 66 F0 | 	shl	arg02, #16
02328     2F 5D 02 F1 | 	add	arg01, arg02
0232c     08 60 66 F0 | 	shl	arg03, #8
02330     30 5D 02 F1 | 	add	arg01, arg03
02334                 | ' 
02334                 | ' color:=r<<24+g<<16+b<<8
02334                 | ' bordercolor:=color
02334     2C 0E 06 F1 | 	add	objptr, #44
02338     07 5D 62 FC | 	wrlong	arg01, objptr
0233c     2C 0E 86 F1 | 	sub	objptr, #44
02340                 | _hng030rm_spin2_setbordercolor_ret
02340     2D 00 64 FD | 	ret
02344                 | 
02344                 | ' 
02344                 | ' 
02344                 | ' '*************************************************************************
02344                 | ' '                                                                        *
02344                 | ' '  Text functions                                                        *
02344                 | ' '                                                                        *
02344                 | ' '*************************************************************************
02344                 | ' 
02344                 | ' ''---------- Clear the screen, set its foreground/background color
02344                 | ' 
02344                 | ' pub cls(fc,bc)   :c
02344                 | _hng030rm_spin2_cls
02344     07 5A 05 F6 | 	mov	COUNT_, #7
02348     B0 00 A0 FD | 	call	#pushregs_
0234c     2E 6B 02 F6 | 	mov	local01, arg01
02350     2F 6D 02 F6 | 	mov	local02, arg02
02354                 | ' 
02354                 | ' if (graphmode<512)
02354     C4 0E 06 F1 | 	add	objptr, #196
02358     07 6F 02 FB | 	rdlong	local03, objptr
0235c     C4 0E 86 F1 | 	sub	objptr, #196
02360     01 00 00 FF 
02364     00 6E 5E F2 | 	cmps	local03, ##512 wcz
02368     34 00 90 3D |  if_ae	jmp	#LR__0037
0236c     35 71 02 F6 | 	mov	local04, local01
02370     18 70 66 F0 | 	shl	local04, #24
02374     36 73 02 F6 | 	mov	local05, local02
02378     10 72 66 F0 | 	shl	local05, #16
0237c     39 71 02 F1 | 	add	local04, local05
02380     20 70 06 F1 | 	add	local04, #32
02384                 | '   c:=fc<<24+bc<<16+$20
02384                 | '   longfill(buf_ptr,c,buflen)
02384     07 5D 02 FB | 	rdlong	arg01, objptr
02388     30 0E 06 F1 | 	add	objptr, #48
0238c     07 61 02 FB | 	rdlong	arg03, objptr
02390     30 0E 86 F1 | 	sub	objptr, #48
02394     38 5F 02 F6 | 	mov	arg02, local04
02398     A8 00 A0 FD | 	call	#\builtin_longfill_
0239c                 | ' else
0239c     AC 00 90 FD | 	jmp	#LR__0043
023a0                 | LR__0037
023a0                 | '   if (graphmode & 48) ==48
023a0     C4 0E 06 F1 | 	add	objptr, #196
023a4     07 6F 02 FB | 	rdlong	local03, objptr
023a8     C4 0E 86 F1 | 	sub	objptr, #196
023ac     30 6E 06 F5 | 	and	local03, #48
023b0     30 6E 0E F2 | 	cmp	local03, #48 wz
023b4                 | '     c:=bc
023b4     36 71 02 A6 |  if_e	mov	local04, local02
023b8     74 00 90 AD |  if_e	jmp	#LR__0042
023bc                 | '   elseif (graphmode & 48) ==32
023bc     C4 0E 06 F1 | 	add	objptr, #196
023c0     07 6F 02 FB | 	rdlong	local03, objptr
023c4     C4 0E 86 F1 | 	sub	objptr, #196
023c8     30 6E 06 F5 | 	and	local03, #48
023cc     20 6E 0E F2 | 	cmp	local03, #32 wz
023d0     10 00 90 5D |  if_ne	jmp	#LR__0038
023d4     36 71 02 F6 | 	mov	local04, local02
023d8     04 70 66 F0 | 	shl	local04, #4
023dc     36 71 02 F1 | 	add	local04, local02
023e0                 | '     c:=bc<<4+bc
023e0     4C 00 90 FD | 	jmp	#LR__0041
023e4                 | LR__0038
023e4                 | '   elseif (graphmode & 48) ==16
023e4     C4 0E 06 F1 | 	add	objptr, #196
023e8     07 6F 02 FB | 	rdlong	local03, objptr
023ec     C4 0E 86 F1 | 	sub	objptr, #196
023f0     30 6E 06 F5 | 	and	local03, #48
023f4     10 6E 0E F2 | 	cmp	local03, #16 wz
023f8     28 00 90 5D |  if_ne	jmp	#LR__0039
023fc     36 71 02 F6 | 	mov	local04, local02
02400     06 70 66 F0 | 	shl	local04, #6
02404     36 75 02 F6 | 	mov	local06, local02
02408     04 74 66 F0 | 	shl	local06, #4
0240c     3A 71 02 F1 | 	add	local04, local06
02410     36 77 02 F6 | 	mov	local07, local02
02414     02 76 66 F0 | 	shl	local07, #2
02418     3B 71 02 F1 | 	add	local04, local07
0241c     36 71 02 F1 | 	add	local04, local02
02420                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02420                 | '   else
02420     0C 00 90 FD | 	jmp	#LR__0040
02424                 | LR__0039
02424                 | '     if bc==1
02424     01 6C 0E F2 | 	cmp	local02, #1 wz
02428                 | '       c:=255
02428     FF 70 06 A6 |  if_e	mov	local04, #255
0242c                 | '     else
0242c                 | '       c:=0
0242c     00 70 06 56 |  if_ne	mov	local04, #0
02430                 | LR__0040
02430                 | LR__0041
02430                 | LR__0042
02430     30 0E 06 F1 | 	add	objptr, #48
02434     07 61 02 FB | 	rdlong	arg03, objptr
02438     30 0E 86 F1 | 	sub	objptr, #48
0243c     02 60 66 F0 | 	shl	arg03, #2
02440                 | '   bytefill(buf_ptr,c,buflen*4)
02440     07 5D 02 FB | 	rdlong	arg01, objptr
02444     38 5F 02 F6 | 	mov	arg02, local04
02448     A0 00 A0 FD | 	call	#\builtin_bytefill_
0244c                 | LR__0043
0244c                 | ' setwritecolors(fc,bc)
0244c                 | ' 
0244c                 | ' 
0244c                 | ' write_color:=ff
0244c     38 0E 06 F1 | 	add	objptr, #56
02450     07 6B 62 FC | 	wrlong	local01, objptr
02454                 | ' write_background:=bb
02454     04 0E 06 F1 | 	add	objptr, #4
02458     07 6D 62 FC | 	wrlong	local02, objptr
0245c                 | ' cursor_x:=0
0245c     08 0E 86 F1 | 	sub	objptr, #8
02460     07 01 48 FC | 	wrbyte	#0, objptr
02464                 | ' cursor_y:=0
02464     01 0E 06 F1 | 	add	objptr, #1
02468     07 01 48 FC | 	wrbyte	#0, objptr
0246c     35 0E 86 F1 | 	sub	objptr, #53
02470     38 2B 02 F6 | 	mov	result1, local04
02474     AF F0 03 F6 | 	mov	ptra, fp
02478     BF 00 A0 FD | 	call	#popregs_
0247c                 | _hng030rm_spin2_cls_ret
0247c     2D 00 64 FD | 	ret
02480                 | 
02480                 | ' 
02480                 | ' ''--------- Output a string at position x,y without changing colors
02480                 | ' 
02480                 | ' pub outtextxy(x,y,text) | iii
02480                 | _hng030rm_spin2_outtextxy
02480     0B 5A 05 F6 | 	mov	COUNT_, #11
02484     B0 00 A0 FD | 	call	#pushregs_
02488     2E 6B 02 F6 | 	mov	local01, arg01
0248c                 | ' 
0248c                 | ' repeat iii from 0 to strsize(text)-1
0248c     00 6C 06 F6 | 	mov	local02, #0
02490     30 5D 02 F6 | 	mov	arg01, arg03
02494     00 6E 06 F6 | 	mov	local03, #0
02498     74 DB 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
0249c     93 00 A0 FD | 	call	#FCACHE_LOAD_
024a0                 | LR__0044
024a0     2E 71 CA FA | 	rdbyte	local04, arg01 wz
024a4     01 6E 06 51 |  if_ne	add	local03, #1
024a8     01 5C 06 51 |  if_ne	add	arg01, #1
024ac     F0 FF 9F 5D |  if_ne	jmp	#LR__0044
024b0                 | LR__0045
024b0     37 2B 02 F6 | 	mov	result1, local03
024b4     15 73 02 F6 | 	mov	local05, result1
024b8     01 72 86 F1 | 	sub	local05, #1
024bc     00 72 5E F2 | 	cmps	local05, #0 wcz
024c0     01 74 06 16 |  if_a	mov	local06, #1
024c4     01 74 66 E6 |  if_be	neg	local06, #1
024c8     3A 73 02 F1 | 	add	local05, local06
024cc     80 DB 9F FE | 	loc	pa,	#(@LR__0047-@LR__0046)
024d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
024d4                 | LR__0046
024d4     90 0E 06 F1 | 	add	objptr, #144
024d8     07 77 02 FB | 	rdlong	local07, objptr
024dc     90 0E 86 F1 | 	sub	objptr, #144
024e0     2F 77 02 FD | 	qmul	local07, arg02
024e4     18 78 62 FD | 	getqx	local08
024e8     35 79 02 F1 | 	add	local08, local01
024ec     36 79 02 F1 | 	add	local08, local02
024f0     02 78 66 F0 | 	shl	local08, #2
024f4     07 7B 02 FB | 	rdlong	local09, objptr
024f8     3C 7B 02 F1 | 	add	local09, local08
024fc     3D 7D 02 FB | 	rdlong	local10, local09
02500     FF 7C 26 F5 | 	andn	local10, #255
02504     30 7F 02 F6 | 	mov	local11, arg03
02508     36 7F 02 F1 | 	add	local11, local02
0250c     3F 77 C2 FA | 	rdbyte	local07, local11
02510     3B 7D 42 F5 | 	or	local10, local07
02514                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02514     3D 7D 62 FC | 	wrlong	local10, local09
02518     3A 6D 02 F1 | 	add	local02, local06
0251c     39 6D 0A F2 | 	cmp	local02, local05 wz
02520     B0 FF 9F 5D |  if_ne	jmp	#LR__0046
02524                 | LR__0047
02524     AF F0 03 F6 | 	mov	ptra, fp
02528     BF 00 A0 FD | 	call	#popregs_
0252c                 | _hng030rm_spin2_outtextxy_ret
0252c     2D 00 64 FD | 	ret
02530                 | 
02530                 | ' 
02530                 | ' ''---------- Output a char at the cursor position, move the cursor
02530                 | ' 
02530                 | ' pub putchar(achar) | c,x,y
02530                 | _hng030rm_spin2_putchar
02530     12 5A 05 F6 | 	mov	COUNT_, #18
02534     B0 00 A0 FD | 	call	#pushregs_
02538     2E 6B 02 F6 | 	mov	local01, arg01
0253c                 | ' 
0253c                 | ' if achar==10
0253c     0A 6A 0E F2 | 	cmp	local01, #10 wz
02540     58 00 90 5D |  if_ne	jmp	#LR__0048
02544                 | '   crlf()
02544                 | ' 
02544                 | ' cursor_x:=0
02544     34 0E 06 F1 | 	add	objptr, #52
02548     07 01 48 FC | 	wrbyte	#0, objptr
0254c                 | ' cursor_y+=1
0254c     01 0E 06 F1 | 	add	objptr, #1
02550     07 6D C2 FA | 	rdbyte	local02, objptr
02554     01 6C 06 F1 | 	add	local02, #1
02558     07 6D 42 FC | 	wrbyte	local02, objptr
0255c                 | ' if cursor_y>lines-1
0255c     5F 0E 06 F1 | 	add	objptr, #95
02560     07 6D 02 FB | 	rdlong	local02, objptr
02564     01 6C 86 F1 | 	sub	local02, #1
02568     5F 0E 86 F1 | 	sub	objptr, #95
0256c     07 6F C2 FA | 	rdbyte	local03, objptr
02570     35 0E 86 F1 | 	sub	objptr, #53
02574     36 6F 5A F2 | 	cmps	local03, local02 wcz
02578     38 01 90 ED |  if_be	jmp	#LR__0051
0257c                 | '   scrollup()
0257c     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02580     94 0E 06 F1 | 	add	objptr, #148
02584     07 71 02 FB | 	rdlong	local04, objptr
02588     01 70 86 F1 | 	sub	local04, #1
0258c                 | '   cursor_y:=lines-1
0258c     5F 0E 86 F1 | 	sub	objptr, #95
02590     07 71 42 FC | 	wrbyte	local04, objptr
02594     35 0E 86 F1 | 	sub	objptr, #53
02598                 | ' else  
02598     18 01 90 FD | 	jmp	#LR__0051
0259c                 | LR__0048
0259c                 | '   x:=cursor_x
0259c     34 0E 06 F1 | 	add	objptr, #52
025a0     07 73 C2 FA | 	rdbyte	local05, objptr
025a4                 | '   y:=cursor_y
025a4     01 0E 06 F1 | 	add	objptr, #1
025a8     07 75 C2 FA | 	rdbyte	local06, objptr
025ac     03 0E 06 F1 | 	add	objptr, #3
025b0     07 77 02 FB | 	rdlong	local07, objptr
025b4     18 76 66 F0 | 	shl	local07, #24
025b8     04 0E 06 F1 | 	add	objptr, #4
025bc     07 79 02 FB | 	rdlong	local08, objptr
025c0     10 78 66 F0 | 	shl	local08, #16
025c4     3C 77 02 F1 | 	add	local07, local08
025c8                 | '   c:=write_color<<24+write_background<<16
025c8     54 0E 06 F1 | 	add	objptr, #84
025cc     07 7B 02 FB | 	rdlong	local09, objptr
025d0     90 0E 86 F1 | 	sub	objptr, #144
025d4     3A 7B 02 FD | 	qmul	local09, local06
025d8     18 7C 62 FD | 	getqx	local10
025dc     39 7D 02 F1 | 	add	local10, local05
025e0     02 7C 66 F0 | 	shl	local10, #2
025e4     07 7F 02 FB | 	rdlong	local11, objptr
025e8     3E 7F 02 F1 | 	add	local11, local10
025ec     3F 81 02 FB | 	rdlong	local12, local11
025f0     7F 00 00 FF 
025f4     FF 81 06 F5 | 	and	local12, ##65535
025f8     3B 81 42 F5 | 	or	local12, local07
025fc                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
025fc     3F 81 62 FC | 	wrlong	local12, local11
02600     90 0E 06 F1 | 	add	objptr, #144
02604     07 7B 02 FB | 	rdlong	local09, objptr
02608     90 0E 86 F1 | 	sub	objptr, #144
0260c     3A 7B 02 FD | 	qmul	local09, local06
02610     18 82 62 FD | 	getqx	local13
02614     39 83 02 F1 | 	add	local13, local05
02618     02 82 66 F0 | 	shl	local13, #2
0261c     07 85 02 FB | 	rdlong	local14, objptr
02620     41 85 02 F1 | 	add	local14, local13
02624     42 87 02 FB | 	rdlong	local15, local14
02628     FF 86 26 F5 | 	andn	local15, #255
0262c     FF 6A 06 F5 | 	and	local01, #255
02630     35 87 42 F5 | 	or	local15, local01
02634                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
02634     42 87 62 FC | 	wrlong	local15, local14
02638                 | '   cursor_x+=1
02638     34 0E 06 F1 | 	add	objptr, #52
0263c     07 89 C2 FA | 	rdbyte	local16, objptr
02640     01 88 06 F1 | 	add	local16, #1
02644     07 89 42 FC | 	wrbyte	local16, objptr
02648                 | '   if cursor_x==cpl
02648     07 89 C2 FA | 	rdbyte	local16, objptr
0264c     5C 0E 06 F1 | 	add	objptr, #92
02650     07 8B 02 FB | 	rdlong	local17, objptr
02654     90 0E 86 F1 | 	sub	objptr, #144
02658     45 89 0A F2 | 	cmp	local16, local17 wz
0265c     54 00 90 5D |  if_ne	jmp	#LR__0050
02660                 | '     cursor_x:=0
02660     34 0E 06 F1 | 	add	objptr, #52
02664     07 01 48 FC | 	wrbyte	#0, objptr
02668                 | '     cursor_y+=1
02668     01 0E 06 F1 | 	add	objptr, #1
0266c     07 89 C2 FA | 	rdbyte	local16, objptr
02670     01 88 06 F1 | 	add	local16, #1
02674     07 89 42 FC | 	wrbyte	local16, objptr
02678                 | '     if cursor_y>lines-1
02678     5F 0E 06 F1 | 	add	objptr, #95
0267c     07 89 02 FB | 	rdlong	local16, objptr
02680     01 88 86 F1 | 	sub	local16, #1
02684     5F 0E 86 F1 | 	sub	objptr, #95
02688     07 8B C2 FA | 	rdbyte	local17, objptr
0268c     35 0E 86 F1 | 	sub	objptr, #53
02690     44 8B 5A F2 | 	cmps	local17, local16 wcz
02694     1C 00 90 ED |  if_be	jmp	#LR__0049
02698                 | '       scrollup()
02698     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
0269c     94 0E 06 F1 | 	add	objptr, #148
026a0     07 8D 02 FB | 	rdlong	local18, objptr
026a4     01 8C 86 F1 | 	sub	local18, #1
026a8                 | '       cursor_y:=lines-1
026a8     5F 0E 86 F1 | 	sub	objptr, #95
026ac     07 8D 42 FC | 	wrbyte	local18, objptr
026b0     35 0E 86 F1 | 	sub	objptr, #53
026b4                 | LR__0049
026b4                 | LR__0050
026b4                 | LR__0051
026b4     AF F0 03 F6 | 	mov	ptra, fp
026b8     BF 00 A0 FD | 	call	#popregs_
026bc                 | _hng030rm_spin2_putchar_ret
026bc     2D 00 64 FD | 	ret
026c0                 | 
026c0                 | ' 
026c0                 | ' ''--------- Output a string at the cursor position, move the cursor
026c0                 | ' 
026c0                 | ' pub write(text) | iii,c,ncx,ncy
026c0                 | _hng030rm_spin2_write
026c0     11 5A 05 F6 | 	mov	COUNT_, #17
026c4     B0 00 A0 FD | 	call	#pushregs_
026c8     2E 6B 02 F6 | 	mov	local01, arg01
026cc     38 0E 06 F1 | 	add	objptr, #56
026d0     07 6D 02 FB | 	rdlong	local02, objptr
026d4     18 6C 66 F0 | 	shl	local02, #24
026d8     04 0E 06 F1 | 	add	objptr, #4
026dc     07 6F 02 FB | 	rdlong	local03, objptr
026e0     10 6E 66 F0 | 	shl	local03, #16
026e4     37 6D 02 F1 | 	add	local02, local03
026e8                 | ' 
026e8                 | ' c:=write_color<<24+write_background<<16
026e8                 | ' 'debug(uhex_long(write_color))
026e8                 | ' ncy:=cursor_y
026e8     07 0E 86 F1 | 	sub	objptr, #7
026ec     07 71 C2 FA | 	rdbyte	local04, objptr
026f0                 | ' ncx:=cursor_x+strsize(text)
026f0     01 0E 86 F1 | 	sub	objptr, #1
026f4     07 73 C2 FA | 	rdbyte	local05, objptr
026f8     34 0E 86 F1 | 	sub	objptr, #52
026fc     35 5D 02 F6 | 	mov	arg01, local01
02700     00 74 06 F6 | 	mov	local06, #0
02704     08 D9 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
02708     93 00 A0 FD | 	call	#FCACHE_LOAD_
0270c                 | LR__0052
0270c     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02710     01 74 06 51 |  if_ne	add	local06, #1
02714     01 5C 06 51 |  if_ne	add	arg01, #1
02718     F0 FF 9F 5D |  if_ne	jmp	#LR__0052
0271c                 | LR__0053
0271c     3A 2B 02 F6 | 	mov	result1, local06
02720     3A 73 02 F1 | 	add	local05, local06
02724     39 79 02 F6 | 	mov	local08, local05
02728     04 D9 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
0272c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02730                 | ' repeat while ncx>cpl-1
02730                 | LR__0054
02730     90 0E 06 F1 | 	add	objptr, #144
02734     07 73 02 FB | 	rdlong	local05, objptr
02738     90 0E 86 F1 | 	sub	objptr, #144
0273c     01 72 86 F1 | 	sub	local05, #1
02740     39 79 5A F2 | 	cmps	local08, local05 wcz
02744     18 00 90 ED |  if_be	jmp	#LR__0056
02748                 | '   ncx-=cpl
02748     90 0E 06 F1 | 	add	objptr, #144
0274c     07 7B 02 FB | 	rdlong	local09, objptr
02750     90 0E 86 F1 | 	sub	objptr, #144
02754     3D 79 82 F1 | 	sub	local08, local09
02758                 | '   ncy+=1
02758     01 70 06 F1 | 	add	local04, #1
0275c     D0 FF 9F FD | 	jmp	#LR__0054
02760                 | LR__0055
02760                 | LR__0056
02760                 | ' repeat while ncy>lines-1
02760                 | LR__0057
02760     94 0E 06 F1 | 	add	objptr, #148
02764     07 73 02 FB | 	rdlong	local05, objptr
02768     94 0E 86 F1 | 	sub	objptr, #148
0276c     01 72 86 F1 | 	sub	local05, #1
02770     39 71 5A F2 | 	cmps	local04, local05 wcz
02774     20 00 90 ED |  if_be	jmp	#LR__0058
02778                 | '   ncy-=1
02778     01 70 86 F1 | 	sub	local04, #1
0277c                 | '   scrollup()
0277c     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
02780                 | '   cursor_y-=1
02780     35 0E 06 F1 | 	add	objptr, #53
02784     07 73 C2 FA | 	rdbyte	local05, objptr
02788     01 72 86 F1 | 	sub	local05, #1
0278c     07 73 42 FC | 	wrbyte	local05, objptr
02790     35 0E 86 F1 | 	sub	objptr, #53
02794     C8 FF 9F FD | 	jmp	#LR__0057
02798                 | LR__0058
02798                 | ' 
02798                 | ' repeat iii from 0 to strsize(text)-1
02798     00 7C 06 F6 | 	mov	local10, #0
0279c     35 5D 02 F6 | 	mov	arg01, local01
027a0     00 74 06 F6 | 	mov	local06, #0
027a4     68 D8 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
027a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
027ac                 | LR__0059
027ac     2E 77 CA FA | 	rdbyte	local07, arg01 wz
027b0     01 74 06 51 |  if_ne	add	local06, #1
027b4     01 5C 06 51 |  if_ne	add	arg01, #1
027b8     F0 FF 9F 5D |  if_ne	jmp	#LR__0059
027bc                 | LR__0060
027bc     3A 2B 02 F6 | 	mov	result1, local06
027c0     15 7F 02 F6 | 	mov	local11, result1
027c4     01 7E 86 F1 | 	sub	local11, #1
027c8     00 7E 5E F2 | 	cmps	local11, #0 wcz
027cc     01 80 06 16 |  if_a	mov	local12, #1
027d0     01 80 66 E6 |  if_be	neg	local12, #1
027d4     40 7F 02 F1 | 	add	local11, local12
027d8     7C D8 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
027dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
027e0                 | LR__0061
027e0     90 0E 06 F1 | 	add	objptr, #144
027e4     07 83 02 FB | 	rdlong	local13, objptr
027e8     5B 0E 86 F1 | 	sub	objptr, #91
027ec     07 85 C2 FA | 	rdbyte	local14, objptr
027f0     42 83 02 FD | 	qmul	local13, local14
027f4     18 86 62 FD | 	getqx	local15
027f8     01 0E 86 F1 | 	sub	objptr, #1
027fc     07 83 C2 FA | 	rdbyte	local13, objptr
02800     34 0E 86 F1 | 	sub	objptr, #52
02804     41 87 02 F1 | 	add	local15, local13
02808     3E 87 02 F1 | 	add	local15, local10
0280c     02 86 66 F0 | 	shl	local15, #2
02810     07 89 02 FB | 	rdlong	local16, objptr
02814     43 89 02 F1 | 	add	local16, local15
02818     44 8B 02 FB | 	rdlong	local17, local16
0281c     7F 00 00 FF 
02820     FF 8B 06 F5 | 	and	local17, ##65535
02824     36 8B 42 F5 | 	or	local17, local02
02828                 | ' 
02828                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02828     44 8B 62 FC | 	wrlong	local17, local16
0282c     40 7D 02 F1 | 	add	local10, local12
02830     3F 7D 0A F2 | 	cmp	local10, local11 wz
02834     A8 FF 9F 5D |  if_ne	jmp	#LR__0061
02838                 | LR__0062
02838                 | ' 
02838                 | ' outtextxy(cursor_x,cursor_y,text)
02838     34 0E 06 F1 | 	add	objptr, #52
0283c     07 5D C2 FA | 	rdbyte	arg01, objptr
02840     01 0E 06 F1 | 	add	objptr, #1
02844     07 5F C2 FA | 	rdbyte	arg02, objptr
02848     35 0E 86 F1 | 	sub	objptr, #53
0284c     35 61 02 F6 | 	mov	arg03, local01
02850     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
02854                 | ' 
02854                 | ' cursor_x:=ncx
02854     34 0E 06 F1 | 	add	objptr, #52
02858     07 79 42 FC | 	wrbyte	local08, objptr
0285c                 | ' cursor_y:=ncy
0285c     01 0E 06 F1 | 	add	objptr, #1
02860     07 71 42 FC | 	wrbyte	local04, objptr
02864     35 0E 86 F1 | 	sub	objptr, #53
02868     AF F0 03 F6 | 	mov	ptra, fp
0286c     BF 00 A0 FD | 	call	#popregs_
02870                 | _hng030rm_spin2_write_ret
02870     2D 00 64 FD | 	ret
02874                 | 
02874                 | ' 
02874                 | ' ''-----------  Scroll the screen one line up
02874                 | ' 
02874                 | ' pub scrollup() | i
02874                 | _hng030rm_spin2_scrollup
02874     0A 5A 05 F6 | 	mov	COUNT_, #10
02878     B0 00 A0 FD | 	call	#pushregs_
0287c     90 0E 06 F1 | 	add	objptr, #144
02880     07 6B 02 FB | 	rdlong	local01, objptr
02884     90 0E 86 F1 | 	sub	objptr, #144
02888     02 6A 66 F0 | 	shl	local01, #2
0288c     07 5F 02 FB | 	rdlong	arg02, objptr
02890     35 5F 02 F1 | 	add	arg02, local01
02894     30 0E 06 F1 | 	add	objptr, #48
02898     07 61 02 FB | 	rdlong	arg03, objptr
0289c     60 0E 06 F1 | 	add	objptr, #96
028a0     07 6D 02 FB | 	rdlong	local02, objptr
028a4     90 0E 86 F1 | 	sub	objptr, #144
028a8     36 61 82 F1 | 	sub	arg03, local02
028ac                 | ' 
028ac                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
028ac     07 5D 02 FB | 	rdlong	arg01, objptr
028b0     EC 35 B0 FD | 	call	#__system__longmove
028b4                 | ' repeat i from buflen-cpl to buflen-1
028b4     30 0E 06 F1 | 	add	objptr, #48
028b8     07 6F 02 FB | 	rdlong	local03, objptr
028bc     60 0E 06 F1 | 	add	objptr, #96
028c0     07 6D 02 FB | 	rdlong	local02, objptr
028c4     36 6F 82 F1 | 	sub	local03, local02
028c8     60 0E 86 F1 | 	sub	objptr, #96
028cc     07 71 02 FB | 	rdlong	local04, objptr
028d0     01 70 86 F1 | 	sub	local04, #1
028d4     07 73 02 FB | 	rdlong	local05, objptr
028d8     60 0E 06 F1 | 	add	objptr, #96
028dc     07 75 02 FB | 	rdlong	local06, objptr
028e0     90 0E 86 F1 | 	sub	objptr, #144
028e4     3A 73 82 F1 | 	sub	local05, local06
028e8     39 71 5A F2 | 	cmps	local04, local05 wcz
028ec     01 76 06 16 |  if_a	mov	local07, #1
028f0     01 76 66 E6 |  if_be	neg	local07, #1
028f4     3B 71 02 F1 | 	add	local04, local07
028f8     34 D7 9F FE | 	loc	pa,	#(@LR__0064-@LR__0063)
028fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02900                 | LR__0063
02900     37 79 02 F6 | 	mov	local08, local03
02904     02 78 66 F0 | 	shl	local08, #2
02908     07 7B 02 FB | 	rdlong	local09, objptr
0290c     3C 7B 02 F1 | 	add	local09, local08
02910     3D 7D 02 FB | 	rdlong	local10, local09
02914     80 FF 7F FF 
02918     00 7C 06 F5 | 	and	local10, ##-65536
0291c     20 7C 46 F5 | 	or	local10, #32
02920                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02920     3D 7D 62 FC | 	wrlong	local10, local09
02924     3B 6F 02 F1 | 	add	local03, local07
02928     38 6F 0A F2 | 	cmp	local03, local04 wz
0292c     D0 FF 9F 5D |  if_ne	jmp	#LR__0063
02930                 | LR__0064
02930     AF F0 03 F6 | 	mov	ptra, fp
02934     BF 00 A0 FD | 	call	#popregs_
02938                 | _hng030rm_spin2_scrollup_ret
02938     2D 00 64 FD | 	ret
0293c                 | 
0293c                 | ' 
0293c                 | ' 
0293c                 | ' 
0293c                 | ' pub inttostr2(i,d):result |q,pos,k,j
0293c                 | _hng030rm_spin2_inttostr2
0293c                 | ' 
0293c                 | ' j:=i
0293c     2F 31 02 F6 | 	mov	_var01, arg02
02940     01 30 86 F1 | 	sub	_var01, #1
02944                 | ' pos:=d-1
02944     18 33 02 F6 | 	mov	_var02, _var01
02948                 | ' k:=0
02948     44 0E 06 F1 | 	add	objptr, #68
0294c     07 5F 02 F1 | 	add	arg02, objptr
02950                 | ' 
02950                 | ' n_string[d]:=0
02950     2F 01 48 FC | 	wrbyte	#0, arg02
02954                 | ' repeat k from 0 to d-1
02954     00 34 06 F6 | 	mov	_var03, #0
02958     00 30 5E F2 | 	cmps	_var01, #0 wcz
0295c     44 0E 86 F1 | 	sub	objptr, #68
02960     01 36 06 16 |  if_a	mov	_var04, #1
02964     01 36 66 E6 |  if_be	neg	_var04, #1
02968     1B 31 02 F1 | 	add	_var01, _var04
0296c     B0 D6 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
02970     93 00 A0 FD | 	call	#FCACHE_LOAD_
02974                 | LR__0065
02974     1A 39 02 F6 | 	mov	_var05, _var03
02978     44 0E 06 F1 | 	add	objptr, #68
0297c     07 39 02 F1 | 	add	_var05, objptr
02980                 | '   n_string[k]:=48
02980     1C 61 48 FC | 	wrbyte	#48, _var05
02984     1B 35 02 F1 | 	add	_var03, _var04
02988     18 35 0A F2 | 	cmp	_var03, _var01 wz
0298c     44 0E 86 F1 | 	sub	objptr, #68
02990     E0 FF 9F 5D |  if_ne	jmp	#LR__0065
02994                 | LR__0066
02994                 | ' 
02994                 | ' if (j<>0)
02994     00 5C 0E F2 | 	cmp	arg01, #0 wz
02998     40 00 90 AD |  if_e	jmp	#LR__0069
0299c                 | ' 
0299c                 | '   repeat while (pos>-1)
0299c                 | LR__0067
0299c     FF FF 7F FF 
029a0     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
029a4     34 00 90 ED |  if_be	jmp	#LR__0068
029a8     2E 0B 03 F6 | 	mov	muldiva_, arg01
029ac     0A 0C 07 F6 | 	mov	muldivb_, #10
029b0     CC 00 A0 FD | 	call	#unsdivide_
029b4     85 3B 02 F6 | 	mov	_var06, muldiva_
029b8                 | '     q:=j+//10
029b8                 | '     q:=48+q
029b8     30 3A 06 F1 | 	add	_var06, #48
029bc     19 3D 02 F6 | 	mov	_var07, _var02
029c0     44 0E 06 F1 | 	add	objptr, #68
029c4     07 3D 02 F1 | 	add	_var07, objptr
029c8                 | '     n_string[pos]:=q
029c8     1E 3B 42 FC | 	wrbyte	_var06, _var07
029cc                 | '     j:=j+/10
029cc     86 5D 02 F6 | 	mov	arg01, muldivb_
029d0                 | '     pos-=1
029d0     01 32 86 F1 | 	sub	_var02, #1
029d4     44 0E 86 F1 | 	sub	objptr, #68
029d8     C0 FF 9F FD | 	jmp	#LR__0067
029dc                 | LR__0068
029dc                 | LR__0069
029dc     44 0E 06 F1 | 	add	objptr, #68
029e0     07 2B 02 F6 | 	mov	result1, objptr
029e4     44 0E 86 F1 | 	sub	objptr, #68
029e8                 | ' 
029e8                 | ' 
029e8                 | ' q:=@n_string
029e8                 | ' return q
029e8                 | _hng030rm_spin2_inttostr2_ret
029e8     2D 00 64 FD | 	ret
029ec                 | 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' '*************************************************************************
029ec                 | ' '                                                                        *
029ec                 | ' '  Mode setting and driver start                                                          *
029ec                 | ' '                                                                        *
029ec                 | ' '*************************************************************************
029ec                 | ' 
029ec                 | ' ''---------  Set the graphics mode
029ec                 | ' 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
029ec                 | _hng030rm_spin2_setmode
029ec     50 5A 05 F6 | 	mov	COUNT_, #80
029f0     B0 00 A0 FD | 	call	#pushregs_
029f4     2E 6B 02 F6 | 	mov	local01, arg01
029f8                 | ' 
029f8                 | ' '' mode:tn_bb_cc_vv_hh
029f8                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
029f8                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
029f8                 | ' 
029f8                 | ' if mode==(512+192+48)
029f8     01 00 00 FF 
029fc     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02a00                 | '   return 'no RAM
02a00     1C 0A 90 AD |  if_e	jmp	#LR__0110
02a04                 | ' 
02a04                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02a04     35 6D 02 F6 | 	mov	local02, local01
02a08     06 6C 46 F0 | 	shr	local02, #6
02a0c     07 6C 06 F5 | 	and	local02, #7
02a10     08 6C 26 F3 | 	fle	local02, #8
02a14     36 6F 02 F6 | 	mov	local03, local02
02a18     30 6E 62 FD | 	jmprel	local03
02a1c                 | LR__0070
02a1c     20 00 90 FD | 	jmp	#LR__0071
02a20     58 00 90 FD | 	jmp	#LR__0072
02a24     90 00 90 FD | 	jmp	#LR__0073
02a28     C8 00 90 FD | 	jmp	#LR__0074
02a2c     00 01 90 FD | 	jmp	#LR__0075
02a30     38 01 90 FD | 	jmp	#LR__0076
02a34     70 01 90 FD | 	jmp	#LR__0077
02a38     A8 01 90 FD | 	jmp	#LR__0078
02a3c     E4 01 90 FD | 	jmp	#LR__0079
02a40                 | LR__0071
02a40                 | ' 
02a40                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02a40     50 0E 06 F1 | 	add	objptr, #80
02a44     07 5D 02 F6 | 	mov	arg01, objptr
02a48     50 0E 86 F1 | 	sub	objptr, #80
02a4c     0E 00 00 FF 
02a50     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02a54     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a58     38 73 02 F6 | 	mov	local05, local04
02a5c     10 74 06 F6 | 	mov	local06, #16
02a60     39 5F 02 F6 | 	mov	arg02, local05
02a64     10 60 06 F6 | 	mov	arg03, #16
02a68     0E 00 00 FF 
02a6c     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02a70     2C 34 B0 FD | 	call	#__system__longmove
02a74     15 77 02 F6 | 	mov	local07, result1
02a78     A8 01 90 FD | 	jmp	#LR__0079
02a7c                 | LR__0072
02a7c                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02a7c     50 0E 06 F1 | 	add	objptr, #80
02a80     07 5D 02 F6 | 	mov	arg01, objptr
02a84     50 0E 86 F1 | 	sub	objptr, #80
02a88     0E 00 00 FF 
02a8c     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02a90     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a94     38 73 02 F6 | 	mov	local05, local04
02a98     10 74 06 F6 | 	mov	local06, #16
02a9c     39 5F 02 F6 | 	mov	arg02, local05
02aa0     10 60 06 F6 | 	mov	arg03, #16
02aa4     0E 00 00 FF 
02aa8     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02aac     F0 33 B0 FD | 	call	#__system__longmove
02ab0     15 77 02 F6 | 	mov	local07, result1
02ab4     6C 01 90 FD | 	jmp	#LR__0079
02ab8                 | LR__0073
02ab8                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02ab8     50 0E 06 F1 | 	add	objptr, #80
02abc     07 5D 02 F6 | 	mov	arg01, objptr
02ac0     50 0E 86 F1 | 	sub	objptr, #80
02ac4     0E 00 00 FF 
02ac8     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02acc     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02ad0     38 73 02 F6 | 	mov	local05, local04
02ad4     10 74 06 F6 | 	mov	local06, #16
02ad8     39 5F 02 F6 | 	mov	arg02, local05
02adc     10 60 06 F6 | 	mov	arg03, #16
02ae0     0E 00 00 FF 
02ae4     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02ae8     B4 33 B0 FD | 	call	#__system__longmove
02aec     15 77 02 F6 | 	mov	local07, result1
02af0     30 01 90 FD | 	jmp	#LR__0079
02af4                 | LR__0074
02af4                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02af4     50 0E 06 F1 | 	add	objptr, #80
02af8     07 5D 02 F6 | 	mov	arg01, objptr
02afc     50 0E 86 F1 | 	sub	objptr, #80
02b00     0E 00 00 FF 
02b04     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b08     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b0c     38 73 02 F6 | 	mov	local05, local04
02b10     10 74 06 F6 | 	mov	local06, #16
02b14     39 5F 02 F6 | 	mov	arg02, local05
02b18     10 60 06 F6 | 	mov	arg03, #16
02b1c     0E 00 00 FF 
02b20     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b24     78 33 B0 FD | 	call	#__system__longmove
02b28     15 77 02 F6 | 	mov	local07, result1
02b2c     F4 00 90 FD | 	jmp	#LR__0079
02b30                 | LR__0075
02b30                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02b30     50 0E 06 F1 | 	add	objptr, #80
02b34     07 5D 02 F6 | 	mov	arg01, objptr
02b38     50 0E 86 F1 | 	sub	objptr, #80
02b3c     0E 00 00 FF 
02b40     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02b44     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b48     38 73 02 F6 | 	mov	local05, local04
02b4c     10 74 06 F6 | 	mov	local06, #16
02b50     39 5F 02 F6 | 	mov	arg02, local05
02b54     10 60 06 F6 | 	mov	arg03, #16
02b58     0E 00 00 FF 
02b5c     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02b60     3C 33 B0 FD | 	call	#__system__longmove
02b64     15 77 02 F6 | 	mov	local07, result1
02b68     B8 00 90 FD | 	jmp	#LR__0079
02b6c                 | LR__0076
02b6c                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02b6c     50 0E 06 F1 | 	add	objptr, #80
02b70     07 5D 02 F6 | 	mov	arg01, objptr
02b74     50 0E 86 F1 | 	sub	objptr, #80
02b78     0E 00 00 FF 
02b7c     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b80     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b84     38 73 02 F6 | 	mov	local05, local04
02b88     10 74 06 F6 | 	mov	local06, #16
02b8c     39 5F 02 F6 | 	mov	arg02, local05
02b90     10 60 06 F6 | 	mov	arg03, #16
02b94     0E 00 00 FF 
02b98     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b9c     00 33 B0 FD | 	call	#__system__longmove
02ba0     15 77 02 F6 | 	mov	local07, result1
02ba4     7C 00 90 FD | 	jmp	#LR__0079
02ba8                 | LR__0077
02ba8                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02ba8     50 0E 06 F1 | 	add	objptr, #80
02bac     07 5D 02 F6 | 	mov	arg01, objptr
02bb0     50 0E 86 F1 | 	sub	objptr, #80
02bb4     0E 00 00 FF 
02bb8     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02bbc     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02bc0     38 73 02 F6 | 	mov	local05, local04
02bc4     10 74 06 F6 | 	mov	local06, #16
02bc8     39 5F 02 F6 | 	mov	arg02, local05
02bcc     10 60 06 F6 | 	mov	arg03, #16
02bd0     0E 00 00 FF 
02bd4     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02bd8     C4 32 B0 FD | 	call	#__system__longmove
02bdc     15 77 02 F6 | 	mov	local07, result1
02be0     40 00 90 FD | 	jmp	#LR__0079
02be4                 | LR__0078
02be4                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02be4     50 0E 06 F1 | 	add	objptr, #80
02be8     07 79 02 F6 | 	mov	local08, objptr
02bec     3C 7B 02 F6 | 	mov	local09, local08
02bf0     0F 00 00 FF 
02bf4     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02bf8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02bfc     38 73 02 F6 | 	mov	local05, local04
02c00     10 74 06 F6 | 	mov	local06, #16
02c04     3D 5D 02 F6 | 	mov	arg01, local09
02c08     39 5F 02 F6 | 	mov	arg02, local05
02c0c     10 60 06 F6 | 	mov	arg03, #16
02c10     50 0E 86 F1 | 	sub	objptr, #80
02c14     0F 00 00 FF 
02c18     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02c1c     80 32 B0 FD | 	call	#__system__longmove
02c20     15 77 02 F6 | 	mov	local07, result1
02c24                 | LR__0079
02c24                 | ' 
02c24                 | ' ' 4-bit graphics: do nothing with timings :)
02c24                 | ' if mode<512
02c24     01 00 00 FF 
02c28     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02c2c     20 00 90 3D |  if_ae	jmp	#LR__0080
02c30     0C 00 00 FF 
02c34     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c38     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02c3c                 | '   palette_ptr:=@ataripalette
02c3c     18 0E 06 F1 | 	add	objptr, #24
02c40     07 7D 62 FC | 	wrlong	local10, objptr
02c44     18 0E 86 F1 | 	sub	objptr, #24
02c48     0C 00 00 FF 
02c4c     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c50                 | LR__0080
02c50                 | ' 
02c50                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c50     35 6D 02 F6 | 	mov	local02, local01
02c54     01 00 00 FF 
02c58     30 6C 06 F5 | 	and	local02, ##560
02c5c     01 00 00 FF 
02c60     30 6C 0E F2 | 	cmp	local02, ##560 wz
02c64     48 00 90 5D |  if_ne	jmp	#LR__0081
02c68                 | '   timings[5]:=4
02c68     64 0E 06 F1 | 	add	objptr, #100
02c6c     07 09 68 FC | 	wrlong	#4, objptr
02c70     18 0E 06 F1 | 	add	objptr, #24
02c74     07 7F 02 FB | 	rdlong	local11, objptr
02c78     01 7E 66 F0 | 	shl	local11, #1
02c7c                 | '   timings[11]:=timings[11]<<1
02c7c     07 7F 62 FC | 	wrlong	local11, objptr
02c80                 | '   putpixel:=p8
02c80     6C 0E 06 F1 | 	add	objptr, #108
02c84     07 6D 02 FB | 	rdlong	local02, objptr
02c88     10 0E 86 F1 | 	sub	objptr, #16
02c8c     07 6D 62 FC | 	wrlong	local02, objptr
02c90     0C 00 00 FF 
02c94     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c98     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02c9c                 | '   palette_ptr:=@ataripalette
02c9c     C0 0E 86 F1 | 	sub	objptr, #192
02ca0     07 81 62 FC | 	wrlong	local12, objptr
02ca4     18 0E 86 F1 | 	sub	objptr, #24
02ca8     0C 00 00 FF 
02cac     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02cb0                 | LR__0081
02cb0                 | ' 
02cb0                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02cb0     35 6D 02 F6 | 	mov	local02, local01
02cb4     01 00 00 FF 
02cb8     30 6C 06 F5 | 	and	local02, ##560
02cbc     01 00 00 FF 
02cc0     10 6C 0E F2 | 	cmp	local02, ##528 wz
02cc4     48 00 90 5D |  if_ne	jmp	#LR__0082
02cc8                 | '   timings[5]:=16
02cc8     64 0E 06 F1 | 	add	objptr, #100
02ccc     07 21 68 FC | 	wrlong	#16, objptr
02cd0     18 0E 06 F1 | 	add	objptr, #24
02cd4     07 83 02 FB | 	rdlong	local13, objptr
02cd8     01 82 46 F0 | 	shr	local13, #1
02cdc                 | '   timings[11]:=timings[11]>>1
02cdc     07 83 62 FC | 	wrlong	local13, objptr
02ce0                 | '   putpixel:=p2
02ce0     64 0E 06 F1 | 	add	objptr, #100
02ce4     07 6D 02 FB | 	rdlong	local02, objptr
02ce8     08 0E 86 F1 | 	sub	objptr, #8
02cec     07 6D 62 FC | 	wrlong	local02, objptr
02cf0     0C 00 00 FF 
02cf4     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02cf8     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02cfc                 | '   palette_ptr:=@fourcolors
02cfc     C0 0E 86 F1 | 	sub	objptr, #192
02d00     07 85 62 FC | 	wrlong	local14, objptr
02d04     18 0E 86 F1 | 	sub	objptr, #24
02d08     0C 00 00 FF 
02d0c     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02d10                 | LR__0082
02d10                 | ' 
02d10                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02d10     35 6D 02 F6 | 	mov	local02, local01
02d14     01 00 00 FF 
02d18     30 6C 06 F5 | 	and	local02, ##560
02d1c     01 00 00 FF 
02d20     00 6C 0E F2 | 	cmp	local02, ##512 wz
02d24     48 00 90 5D |  if_ne	jmp	#LR__0083
02d28                 | '   timings[5]:=32
02d28     64 0E 06 F1 | 	add	objptr, #100
02d2c     07 41 68 FC | 	wrlong	#32, objptr
02d30     18 0E 06 F1 | 	add	objptr, #24
02d34     07 87 02 FB | 	rdlong	local15, objptr
02d38     02 86 46 F0 | 	shr	local15, #2
02d3c                 | '   timings[11]:=timings[11]>>2
02d3c     07 87 62 FC | 	wrlong	local15, objptr
02d40                 | '   putpixel:=p1
02d40     60 0E 06 F1 | 	add	objptr, #96
02d44     07 6D 02 FB | 	rdlong	local02, objptr
02d48     04 0E 86 F1 | 	sub	objptr, #4
02d4c     07 6D 62 FC | 	wrlong	local02, objptr
02d50     0C 00 00 FF 
02d54     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d58     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02d5c                 | '   palette_ptr:=@twocolors
02d5c     C0 0E 86 F1 | 	sub	objptr, #192
02d60     07 89 62 FC | 	wrlong	local16, objptr
02d64     18 0E 86 F1 | 	sub	objptr, #24
02d68     0C 00 00 FF 
02d6c     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d70                 | LR__0083
02d70                 | ' 
02d70                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d70     35 6D 02 F6 | 	mov	local02, local01
02d74     01 00 00 FF 
02d78     30 6C 06 F5 | 	and	local02, ##560
02d7c     01 00 00 FF 
02d80     20 6C 0E F2 | 	cmp	local02, ##544 wz
02d84     30 00 90 5D |  if_ne	jmp	#LR__0084
02d88                 | '   putpixel:=p4
02d88     E4 0E 06 F1 | 	add	objptr, #228
02d8c     07 6D 02 FB | 	rdlong	local02, objptr
02d90     0C 0E 86 F1 | 	sub	objptr, #12
02d94     07 6D 62 FC | 	wrlong	local02, objptr
02d98     0C 00 00 FF 
02d9c     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02da0     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02da4                 | '   palette_ptr:=@vga16
02da4     C0 0E 86 F1 | 	sub	objptr, #192
02da8     07 8B 62 FC | 	wrlong	local17, objptr
02dac     18 0E 86 F1 | 	sub	objptr, #24
02db0     0C 00 00 FF 
02db4     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02db8                 | LR__0084
02db8                 | ' 
02db8                 | ' repeat i from 0 to 4
02db8     00 8C 06 F6 | 	mov	local18, #0
02dbc     84 D2 9F FE | 	loc	pa,	#(@LR__0086-@LR__0085)
02dc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dc4                 | LR__0085
02dc4     46 8F 02 F6 | 	mov	local19, local18
02dc8     02 8E 66 F0 | 	shl	local19, #2
02dcc     50 0E 06 F1 | 	add	objptr, #80
02dd0     07 8F 02 F1 | 	add	local19, objptr
02dd4     2C 0E 86 F1 | 	sub	objptr, #44
02dd8     07 91 02 FB | 	rdlong	local20, objptr
02ddc     24 0E 86 F1 | 	sub	objptr, #36
02de0     11 90 66 F0 | 	shl	local20, #17
02de4     47 93 02 FB | 	rdlong	local21, local19
02de8     48 93 02 F1 | 	add	local21, local20
02dec     49 95 02 F6 | 	mov	local22, local21
02df0     80 40 38 FF 
02df4     00 94 06 F1 | 	add	local22, ##1887502336
02df8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02df8     47 95 62 FC | 	wrlong	local22, local19
02dfc     01 8C 06 F1 | 	add	local18, #1
02e00     05 8C 5E F2 | 	cmps	local18, #5 wcz
02e04     BC FF 9F CD |  if_b	jmp	#LR__0085
02e08                 | LR__0086
02e08     24 0E 06 F1 | 	add	objptr, #36
02e0c     07 97 02 FB | 	rdlong	local23, objptr
02e10     11 96 66 F0 | 	shl	local23, #17
02e14     40 0E 06 F1 | 	add	objptr, #64
02e18     07 99 02 FB | 	rdlong	local24, objptr
02e1c     4B 99 02 F1 | 	add	local24, local23
02e20                 | ' timings[5]:=timings[5]+hdmibase<<17
02e20     07 99 62 FC | 	wrlong	local24, objptr
02e24                 | ' clkfreq:=timings[13]
02e24     20 0E 06 F1 | 	add	objptr, #32
02e28     07 6D 02 FB | 	rdlong	local02, objptr
02e2c     14 6C 66 FC | 	wrlong	local02, #20
02e30                 | ' hubset(timings[14])
02e30     04 0E 06 F1 | 	add	objptr, #4
02e34     07 5D 02 FB | 	rdlong	arg01, objptr
02e38     88 0E 86 F1 | 	sub	objptr, #136
02e3c     00 5C 62 FD | 	hubset	arg01
02e40                 | ' waitms(1)
02e40     01 5C 06 F6 | 	mov	arg01, #1
02e44     F8 32 B0 FD | 	call	#__system___waitms
02e48     35 9B 02 F6 | 	mov	local25, local01
02e4c     03 9A 06 F5 | 	and	local25, #3
02e50     4D 9D C2 F9 | 	decod	local26, local25
02e54                 | ' 
02e54                 | ' 
02e54                 | ' xzoom:=1<<(mode & 3)
02e54     CC 0E 06 F1 | 	add	objptr, #204
02e58     07 9D 62 FC | 	wrlong	local26, objptr
02e5c                 | ' 
02e5c                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02e5c     4E 79 02 F6 | 	mov	local08, local26
02e60     CC 0E 86 F1 | 	sub	objptr, #204
02e64     08 78 0E F2 | 	cmp	local08, #8 wz
02e68     24 00 90 5D |  if_ne	jmp	#LR__0087
02e6c     35 7B 02 F6 | 	mov	local09, local01
02e70     04 7A 46 F0 | 	shr	local09, #4
02e74     03 7A 06 F5 | 	and	local09, #3
02e78     03 7A 0E F2 | 	cmp	local09, #3 wz
02e7c     10 00 90 AD |  if_e	jmp	#LR__0087
02e80                 | '   xzoom:=4
02e80     04 6C 06 F6 | 	mov	local02, #4
02e84     CC 0E 06 F1 | 	add	objptr, #204
02e88     07 09 68 FC | 	wrlong	#4, objptr
02e8c     CC 0E 86 F1 | 	sub	objptr, #204
02e90                 | LR__0087
02e90     35 9F 02 F6 | 	mov	local27, local01
02e94     02 9E 46 F0 | 	shr	local27, #2
02e98     03 9E 06 F5 | 	and	local27, #3
02e9c     4F A1 C2 F9 | 	decod	local28, local27
02ea0                 | ' 
02ea0                 | ' yzoom:=1<<((mode>>2) & 3)
02ea0     D0 0E 06 F1 | 	add	objptr, #208
02ea4     07 A1 62 FC | 	wrlong	local28, objptr
02ea8     04 0E 86 F1 | 	sub	objptr, #4
02eac     07 79 02 FB | 	rdlong	local08, objptr
02eb0     04 0E 06 F1 | 	add	objptr, #4
02eb4     07 71 02 FB | 	rdlong	local04, objptr
02eb8     38 79 02 FD | 	qmul	local08, local04
02ebc     18 A2 62 FD | 	getqx	local29
02ec0                 | ' azoom:=xzoom*yzoom
02ec0     04 0E 06 F1 | 	add	objptr, #4
02ec4     07 A3 62 FC | 	wrlong	local29, objptr
02ec8                 | ' 
02ec8                 | ' cpl:=timings[11]
02ec8     58 0E 86 F1 | 	sub	objptr, #88
02ecc     07 6D 02 FB | 	rdlong	local02, objptr
02ed0     14 0E 06 F1 | 	add	objptr, #20
02ed4     07 6D 62 FC | 	wrlong	local02, objptr
02ed8     90 0E 86 F1 | 	sub	objptr, #144
02edc                 | ' if (mode<512)
02edc     01 00 00 FF 
02ee0     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02ee4     60 00 90 3D |  if_ae	jmp	#LR__0088
02ee8     80 0E 06 F1 | 	add	objptr, #128
02eec     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ef0     04 0A 47 F0 | 	shr	muldiva_, #4
02ef4     50 0E 06 F1 | 	add	objptr, #80
02ef8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02efc     D0 0E 86 F1 | 	sub	objptr, #208
02f00     CC 00 A0 FD | 	call	#unsdivide_
02f04                 | '   lines:=(timings[12]>>4)+/yzoom
02f04     94 0E 06 F1 | 	add	objptr, #148
02f08     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f0c                 | '   if ((timings[12]>>4)+//yzoom) <>0
02f0c     14 0E 86 F1 | 	sub	objptr, #20
02f10     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f14     04 0A 47 F0 | 	shr	muldiva_, #4
02f18     50 0E 06 F1 | 	add	objptr, #80
02f1c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f20     D0 0E 86 F1 | 	sub	objptr, #208
02f24     CC 00 A0 FD | 	call	#unsdivide_
02f28     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f2c     AC 00 90 AD |  if_e	jmp	#LR__0091
02f30                 | '     lines +=1
02f30     94 0E 06 F1 | 	add	objptr, #148
02f34     07 6D 02 FB | 	rdlong	local02, objptr
02f38     01 6C 06 F1 | 	add	local02, #1
02f3c     07 6D 62 FC | 	wrlong	local02, objptr
02f40     94 0E 86 F1 | 	sub	objptr, #148
02f44                 | ' 
02f44                 | ' else
02f44     94 00 90 FD | 	jmp	#LR__0091
02f48                 | LR__0088
02f48     80 0E 06 F1 | 	add	objptr, #128
02f4c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f50     50 0E 06 F1 | 	add	objptr, #80
02f54     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f58     D0 0E 86 F1 | 	sub	objptr, #208
02f5c     D0 00 A0 FD | 	call	#divide_
02f60                 | '   lines:=timings[12]/yzoom
02f60     94 0E 06 F1 | 	add	objptr, #148
02f64     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f68                 | '   if cpl//xzoom==0
02f68     04 0E 86 F1 | 	sub	objptr, #4
02f6c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f70     3C 0E 06 F1 | 	add	objptr, #60
02f74     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f78     CC 0E 86 F1 | 	sub	objptr, #204
02f7c     D0 00 A0 FD | 	call	#divide_
02f80     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f84     28 00 90 5D |  if_ne	jmp	#LR__0089
02f88                 | '     cpl:=cpl/xzoom
02f88     90 0E 06 F1 | 	add	objptr, #144
02f8c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f90     3C 0E 06 F1 | 	add	objptr, #60
02f94     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f98     CC 0E 86 F1 | 	sub	objptr, #204
02f9c     D0 00 A0 FD | 	call	#divide_
02fa0     90 0E 06 F1 | 	add	objptr, #144
02fa4     07 0D 63 FC | 	wrlong	muldivb_, objptr
02fa8     90 0E 86 F1 | 	sub	objptr, #144
02fac                 | '   else
02fac     2C 00 90 FD | 	jmp	#LR__0090
02fb0                 | LR__0089
02fb0     90 0E 06 F1 | 	add	objptr, #144
02fb4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02fb8     3C 0E 06 F1 | 	add	objptr, #60
02fbc     07 0D 03 FB | 	rdlong	muldivb_, objptr
02fc0     CC 0E 86 F1 | 	sub	objptr, #204
02fc4     D0 00 A0 FD | 	call	#divide_
02fc8     86 A5 02 F6 | 	mov	local30, muldivb_
02fcc     01 A4 06 F1 | 	add	local30, #1
02fd0                 | '     cpl:=cpl/xzoom+1
02fd0     90 0E 06 F1 | 	add	objptr, #144
02fd4     07 A5 62 FC | 	wrlong	local30, objptr
02fd8     90 0E 86 F1 | 	sub	objptr, #144
02fdc                 | LR__0090
02fdc                 | LR__0091
02fdc     90 0E 06 F1 | 	add	objptr, #144
02fe0     07 79 02 FB | 	rdlong	local08, objptr
02fe4     04 0E 06 F1 | 	add	objptr, #4
02fe8     07 71 02 FB | 	rdlong	local04, objptr
02fec     38 79 02 FD | 	qmul	local08, local04
02ff0     18 A6 62 FD | 	getqx	local31
02ff4                 | ' 
02ff4                 | ' buflen:=(cpl*lines)
02ff4     64 0E 86 F1 | 	sub	objptr, #100
02ff8     07 A7 62 FC | 	wrlong	local31, objptr
02ffc     30 0E 86 F1 | 	sub	objptr, #48
03000     02 A6 66 F0 | 	shl	local31, #2
03004     13 A8 C6 F9 | 	decod	local32, #19
03008     53 A9 82 F1 | 	sub	local32, local31
0300c                 | ' buf_ptr:=$80000-4*buflen
0300c     07 A9 62 FC | 	wrlong	local32, objptr
03010     50 0E 06 F1 | 	add	objptr, #80
03014     07 AB 02 F6 | 	mov	local33, objptr
03018                 | ' mode_ptr:=@timings
03018     3C 0E 86 F1 | 	sub	objptr, #60
0301c     07 AB 62 FC | 	wrlong	local33, objptr
03020                 | ' graphmode:=mode
03020     B0 0E 06 F1 | 	add	objptr, #176
03024     07 6B 62 FC | 	wrlong	local01, objptr
03028     C4 0E 86 F1 | 	sub	objptr, #196
0302c                 | ' makedl(mode)
0302c     35 5D 02 F6 | 	mov	arg01, local01
03030                 | ' 
03030                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03030                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03030                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03030                 | ' 
03030                 | ' '   0 - display a up/down border line
03030                 | ' 
03030                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03030                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03030                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03030                 | ' '    nnnn - font line to display, 0..15
03030                 | ' '    llllll - character line, determines the cursor Y position
03030                 | ' 
03030                 | ' 
03030                 | ' if (mode &256==0)
03030     00 5D CE F7 | 	test	arg01, #256 wz
03034     1C 00 90 5D |  if_ne	jmp	#LR__0092
03038     07 AD 02 FB | 	rdlong	local34, objptr
0303c     04 00 00 FF 
03040     00 AD 86 F1 | 	sub	local34, ##2304
03044                 | '   dl_ptr:=buf_ptr-4*576
03044     1C 0E 06 F1 | 	add	objptr, #28
03048     07 AD 62 FC | 	wrlong	local34, objptr
0304c     1C 0E 86 F1 | 	sub	objptr, #28
03050                 | ' else
03050     18 00 90 FD | 	jmp	#LR__0093
03054                 | LR__0092
03054     07 AF 02 FB | 	rdlong	local35, objptr
03058     03 00 00 FF 
0305c     C0 AF 86 F1 | 	sub	local35, ##1984
03060                 | '   dl_ptr:=buf_ptr-4*496
03060     1C 0E 06 F1 | 	add	objptr, #28
03064     07 AF 62 FC | 	wrlong	local35, objptr
03068     1C 0E 86 F1 | 	sub	objptr, #28
0306c                 | LR__0093
0306c     2E B1 02 F6 | 	mov	local36, arg01
03070     02 B0 46 F0 | 	shr	local36, #2
03074     03 B0 06 F5 | 	and	local36, #3
03078                 | '  ' dl_ptr:=buf_ptr-4*540
03078                 | ' 
03078                 | ' vzoom:=((mode>>2) & 3)
03078                 | ' 
03078                 | ' 
03078                 | ' if mode<512 '' text modes
03078     01 00 00 FF 
0307c     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03080     E4 01 90 3D |  if_ae	jmp	#LR__0101
03084                 | ' 
03084                 | '   if timings[6]>0 'borders
03084     68 0E 06 F1 | 	add	objptr, #104
03088     07 B3 02 FB | 	rdlong	local37, objptr
0308c     68 0E 86 F1 | 	sub	objptr, #104
03090     00 B2 5E F2 | 	cmps	local37, #0 wcz
03094     D4 00 90 ED |  if_be	jmp	#LR__0098
03098                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03098     00 B4 06 F6 | 	mov	local38, #0
0309c     68 0E 06 F1 | 	add	objptr, #104
030a0     07 B7 02 FB | 	rdlong	local39, objptr
030a4     68 0E 86 F1 | 	sub	objptr, #104
030a8     01 B6 86 F1 | 	sub	local39, #1
030ac     00 B6 5E F2 | 	cmps	local39, #0 wcz
030b0     01 B8 06 16 |  if_a	mov	local40, #1
030b4     01 B8 66 E6 |  if_be	neg	local40, #1
030b8     5C BB 02 F6 | 	mov	local41, local40
030bc     5C B7 02 F1 | 	add	local39, local40
030c0     64 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
030c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030c8                 | LR__0094
030c8     5A BD 02 F6 | 	mov	local42, local38
030cc     02 BC 66 F0 | 	shl	local42, #2
030d0     1C 0E 06 F1 | 	add	objptr, #28
030d4     07 BF 02 FB | 	rdlong	local43, objptr
030d8     1C 0E 86 F1 | 	sub	objptr, #28
030dc     5E BF 02 F1 | 	add	local43, local42
030e0                 | '       long[dl_ptr+4*i]:=$0
030e0     5F 01 68 FC | 	wrlong	#0, local43
030e4     5D B5 02 F1 | 	add	local38, local41
030e8     5B B5 0A F2 | 	cmp	local38, local39 wz
030ec     D8 FF 9F 5D |  if_ne	jmp	#LR__0094
030f0                 | LR__0095
030f0                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
030f0     68 0E 06 F1 | 	add	objptr, #104
030f4     07 B5 02 FB | 	rdlong	local38, objptr
030f8     18 0E 06 F1 | 	add	objptr, #24
030fc     07 B9 02 FB | 	rdlong	local40, objptr
03100     5C B5 02 F1 | 	add	local38, local40
03104     0C 0E 06 F1 | 	add	objptr, #12
03108     07 C1 02 FB | 	rdlong	local44, objptr
0310c     01 C0 86 F1 | 	sub	local44, #1
03110     24 0E 86 F1 | 	sub	objptr, #36
03114     07 C3 02 FB | 	rdlong	local45, objptr
03118     18 0E 06 F1 | 	add	objptr, #24
0311c     07 C5 02 FB | 	rdlong	local46, objptr
03120     80 0E 86 F1 | 	sub	objptr, #128
03124     62 C3 02 F1 | 	add	local45, local46
03128     61 C1 5A F2 | 	cmps	local44, local45 wcz
0312c     01 C6 06 16 |  if_a	mov	local47, #1
03130     01 C6 66 E6 |  if_be	neg	local47, #1
03134     63 C9 02 F6 | 	mov	local48, local47
03138     63 C1 02 F1 | 	add	local44, local47
0313c     E8 CE 9F FE | 	loc	pa,	#(@LR__0097-@LR__0096)
03140     93 00 A0 FD | 	call	#FCACHE_LOAD_
03144                 | LR__0096
03144     5A CB 02 F6 | 	mov	local49, local38
03148     02 CA 66 F0 | 	shl	local49, #2
0314c     1C 0E 06 F1 | 	add	objptr, #28
03150     07 CD 02 FB | 	rdlong	local50, objptr
03154     1C 0E 86 F1 | 	sub	objptr, #28
03158     65 CD 02 F1 | 	add	local50, local49
0315c                 | '       long[dl_ptr+4*i]:=$0
0315c     66 01 68 FC | 	wrlong	#0, local50
03160     64 B5 02 F1 | 	add	local38, local48
03164     60 B5 0A F2 | 	cmp	local38, local44 wz
03168     D8 FF 9F 5D |  if_ne	jmp	#LR__0096
0316c                 | LR__0097
0316c                 | LR__0098
0316c     10 CE 06 F6 | 	mov	local51, #16
03170     58 CF 62 F0 | 	shl	local51, local36
03174                 | '   lpc:=16<<vzoom
03174                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03174     68 0E 06 F1 | 	add	objptr, #104
03178     07 B5 02 FB | 	rdlong	local38, objptr
0317c     5A D1 02 F6 | 	mov	local52, local38
03180     18 0E 06 F1 | 	add	objptr, #24
03184     07 D3 02 FB | 	rdlong	local53, objptr
03188     69 D1 02 F1 | 	add	local52, local53
0318c     01 D0 86 F1 | 	sub	local52, #1
03190     18 0E 86 F1 | 	sub	objptr, #24
03194     07 C7 02 FB | 	rdlong	local47, objptr
03198     68 0E 86 F1 | 	sub	objptr, #104
0319c     63 D1 5A F2 | 	cmps	local52, local47 wcz
031a0     01 D4 06 16 |  if_a	mov	local54, #1
031a4     01 D4 66 E6 |  if_be	neg	local54, #1
031a8     6A D7 02 F6 | 	mov	local55, local54
031ac     6A D1 02 F1 | 	add	local52, local54
031b0     FC CE 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
031b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
031b8                 | LR__0099
031b8     5A 0B 03 F6 | 	mov	muldiva_, local38
031bc     68 0E 06 F1 | 	add	objptr, #104
031c0     07 D9 02 FB | 	rdlong	local56, objptr
031c4     68 0E 86 F1 | 	sub	objptr, #104
031c8     6C 0B 83 F1 | 	sub	muldiva_, local56
031cc     67 0D 03 F6 | 	mov	muldivb_, local51
031d0     CC 00 A0 FD | 	call	#unsdivide_
031d4     58 0B 43 F0 | 	shr	muldiva_, local36
031d8                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
031d8     85 DB 02 F6 | 	mov	local57, muldiva_
031dc     5A 0B 03 F6 | 	mov	muldiva_, local38
031e0     68 0E 06 F1 | 	add	objptr, #104
031e4     07 D9 02 FB | 	rdlong	local56, objptr
031e8     68 0E 86 F1 | 	sub	objptr, #104
031ec     6C 0B 83 F1 | 	sub	muldiva_, local56
031f0     67 0D 03 F6 | 	mov	muldivb_, local51
031f4     CC 00 A0 FD | 	call	#unsdivide_
031f8     86 DD 02 F6 | 	mov	local58, muldivb_
031fc                 | '     charline:=(i-timings[6])+/lpc
031fc     90 0E 06 F1 | 	add	objptr, #144
03200     07 D9 02 FB | 	rdlong	local56, objptr
03204     90 0E 86 F1 | 	sub	objptr, #144
03208     6E D9 02 FD | 	qmul	local56, local58
0320c     18 DE 62 FD | 	getqx	local59
03210     02 DE 66 F0 | 	shl	local59, #2
03214     07 E1 02 FB | 	rdlong	local60, objptr
03218     6F E1 02 F1 | 	add	local60, local59
0321c     2E E3 02 F6 | 	mov	local61, arg01
03220     03 E2 06 F5 | 	and	local61, #3
03224     71 E1 02 F1 | 	add	local60, local61
03228                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03228     0C E0 66 F0 | 	shl	local60, #12
0322c     08 DA 66 F0 | 	shl	local57, #8
03230     6D E1 02 F1 | 	add	local60, local57
03234     02 DC 66 F0 | 	shl	local58, #2
03238     6E E1 02 F1 | 	add	local60, local58
0323c     01 E0 06 F1 | 	add	local60, #1
03240     5A E5 02 F6 | 	mov	local62, local38
03244     02 E4 66 F0 | 	shl	local62, #2
03248     1C 0E 06 F1 | 	add	objptr, #28
0324c     07 E7 02 FB | 	rdlong	local63, objptr
03250     1C 0E 86 F1 | 	sub	objptr, #28
03254     72 E7 02 F1 | 	add	local63, local62
03258                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03258     73 E1 62 FC | 	wrlong	local60, local63
0325c     6B B5 02 F1 | 	add	local38, local55
03260     68 B5 0A F2 | 	cmp	local38, local52 wz
03264     50 FF 9F 5D |  if_ne	jmp	#LR__0099
03268                 | LR__0100
03268                 | LR__0101
03268                 | ' 
03268                 | ' 
03268                 | ' 
03268                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03268     01 00 00 FF 
0326c     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03270     AC 01 90 CD |  if_b	jmp	#LR__0109
03274                 | ' 
03274                 | '   if timings[6]>0 'borders
03274     68 0E 06 F1 | 	add	objptr, #104
03278     07 B3 02 FB | 	rdlong	local37, objptr
0327c     68 0E 86 F1 | 	sub	objptr, #104
03280     00 B2 5E F2 | 	cmps	local37, #0 wcz
03284     D4 00 90 ED |  if_be	jmp	#LR__0106
03288                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03288     00 B4 06 F6 | 	mov	local38, #0
0328c     68 0E 06 F1 | 	add	objptr, #104
03290     07 E9 02 FB | 	rdlong	local64, objptr
03294     68 0E 86 F1 | 	sub	objptr, #104
03298     01 E8 86 F1 | 	sub	local64, #1
0329c     00 E8 5E F2 | 	cmps	local64, #0 wcz
032a0     01 B8 06 16 |  if_a	mov	local40, #1
032a4     01 B8 66 E6 |  if_be	neg	local40, #1
032a8     5C EB 02 F6 | 	mov	local65, local40
032ac     5C E9 02 F1 | 	add	local64, local40
032b0     74 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
032b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b8                 | LR__0102
032b8     5A ED 02 F6 | 	mov	local66, local38
032bc     02 EC 66 F0 | 	shl	local66, #2
032c0     1C 0E 06 F1 | 	add	objptr, #28
032c4     07 EF 02 FB | 	rdlong	local67, objptr
032c8     1C 0E 86 F1 | 	sub	objptr, #28
032cc     76 EF 02 F1 | 	add	local67, local66
032d0                 | '       long[dl_ptr+4*i]:=$0
032d0     77 01 68 FC | 	wrlong	#0, local67
032d4     75 B5 02 F1 | 	add	local38, local65
032d8     74 B5 0A F2 | 	cmp	local38, local64 wz
032dc     D8 FF 9F 5D |  if_ne	jmp	#LR__0102
032e0                 | LR__0103
032e0                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
032e0     68 0E 06 F1 | 	add	objptr, #104
032e4     07 B5 02 FB | 	rdlong	local38, objptr
032e8     18 0E 06 F1 | 	add	objptr, #24
032ec     07 B9 02 FB | 	rdlong	local40, objptr
032f0     5C B5 02 F1 | 	add	local38, local40
032f4     0C 0E 06 F1 | 	add	objptr, #12
032f8     07 F1 02 FB | 	rdlong	local68, objptr
032fc     01 F0 86 F1 | 	sub	local68, #1
03300     24 0E 86 F1 | 	sub	objptr, #36
03304     07 C3 02 FB | 	rdlong	local45, objptr
03308     18 0E 06 F1 | 	add	objptr, #24
0330c     07 C5 02 FB | 	rdlong	local46, objptr
03310     80 0E 86 F1 | 	sub	objptr, #128
03314     62 C3 02 F1 | 	add	local45, local46
03318     61 F1 5A F2 | 	cmps	local68, local45 wcz
0331c     01 C6 06 16 |  if_a	mov	local47, #1
03320     01 C6 66 E6 |  if_be	neg	local47, #1
03324     63 F3 02 F6 | 	mov	local69, local47
03328     63 F1 02 F1 | 	add	local68, local47
0332c     F8 CC 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
03330     93 00 A0 FD | 	call	#FCACHE_LOAD_
03334                 | LR__0104
03334     5A F5 02 F6 | 	mov	local70, local38
03338     02 F4 66 F0 | 	shl	local70, #2
0333c     1C 0E 06 F1 | 	add	objptr, #28
03340     07 F7 02 FB | 	rdlong	local71, objptr
03344     1C 0E 86 F1 | 	sub	objptr, #28
03348     7A F7 02 F1 | 	add	local71, local70
0334c                 | '       long[dl_ptr+4*i]:=$0
0334c     7B 01 68 FC | 	wrlong	#0, local71
03350     79 B5 02 F1 | 	add	local38, local69
03354     78 B5 0A F2 | 	cmp	local38, local68 wz
03358     D8 FF 9F 5D |  if_ne	jmp	#LR__0104
0335c                 | LR__0105
0335c                 | LR__0106
0335c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
0335c     68 0E 06 F1 | 	add	objptr, #104
03360     07 B5 02 FB | 	rdlong	local38, objptr
03364     5A F9 02 F6 | 	mov	local72, local38
03368     18 0E 06 F1 | 	add	objptr, #24
0336c     07 D3 02 FB | 	rdlong	local53, objptr
03370     69 F9 02 F1 | 	add	local72, local53
03374     01 F8 86 F1 | 	sub	local72, #1
03378     18 0E 86 F1 | 	sub	objptr, #24
0337c     07 C7 02 FB | 	rdlong	local47, objptr
03380     68 0E 86 F1 | 	sub	objptr, #104
03384     63 F9 5A F2 | 	cmps	local72, local47 wcz
03388     01 D4 06 16 |  if_a	mov	local54, #1
0338c     01 D4 66 E6 |  if_be	neg	local54, #1
03390     6A FB 02 F6 | 	mov	local73, local54
03394     6A F9 02 F1 | 	add	local72, local54
03398     E4 CC 9F FE | 	loc	pa,	#(@LR__0108-@LR__0107)
0339c     93 00 A0 FD | 	call	#FCACHE_LOAD_
033a0                 | LR__0107
033a0     5A FD 02 F6 | 	mov	local74, local38
033a4     68 0E 06 F1 | 	add	objptr, #104
033a8     07 D9 02 FB | 	rdlong	local56, objptr
033ac     6C FD 82 F1 | 	sub	local74, local56
033b0     58 FD 42 F0 | 	shr	local74, local36
033b4     28 0E 06 F1 | 	add	objptr, #40
033b8     07 D9 02 FB | 	rdlong	local56, objptr
033bc     90 0E 86 F1 | 	sub	objptr, #144
033c0     7E D9 02 FD | 	qmul	local56, local74
033c4     18 FE 62 FD | 	getqx	local75
033c8     02 FE 66 F0 | 	shl	local75, #2
033cc     07 01 03 FB | 	rdlong	local76, objptr
033d0     7F 01 03 F1 | 	add	local76, local75
033d4     2E 03 03 F6 | 	mov	local77, arg01
033d8     03 02 07 F5 | 	and	local77, #3
033dc     81 01 03 F1 | 	add	local76, local77
033e0                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
033e0     0C 00 67 F0 | 	shl	local76, #12
033e4     02 00 07 F1 | 	add	local76, #2
033e8     2E 05 03 F6 | 	mov	local78, arg01
033ec     30 04 07 F5 | 	and	local78, #48
033f0     02 04 47 F0 | 	shr	local78, #2
033f4     82 01 03 F1 | 	add	local76, local78
033f8     5A 07 03 F6 | 	mov	local79, local38
033fc     02 06 67 F0 | 	shl	local79, #2
03400     1C 0E 06 F1 | 	add	objptr, #28
03404     07 09 03 FB | 	rdlong	local80, objptr
03408     1C 0E 86 F1 | 	sub	objptr, #28
0340c     83 09 03 F1 | 	add	local80, local79
03410                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03410     84 01 63 FC | 	wrlong	local76, local80
03414     7D B5 02 F1 | 	add	local38, local73
03418     7C B5 0A F2 | 	cmp	local38, local72 wz
0341c     80 FF 9F 5D |  if_ne	jmp	#LR__0107
03420                 | LR__0108
03420                 | LR__0109
03420                 | LR__0110
03420     AF F0 03 F6 | 	mov	ptra, fp
03424     BF 00 A0 FD | 	call	#popregs_
03428                 | _hng030rm_spin2_setmode_ret
03428     2D 00 64 FD | 	ret
0342c                 | 
0342c                 | ' 
0342c                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
0342c                 | _retrocog_spin2_serialcog
0342c     1C 5A 05 F6 | 	mov	COUNT_, #28
03430     B0 00 A0 FD | 	call	#pushregs_
03434                 | ' 
03434                 | ' 'start serial and midi
03434                 | ' 
03434                 | ' serial_start(rxpin, txpin, baudrate)
03434     20 5C 06 F6 | 	mov	arg01, #32
03438     21 5E 06 F6 | 	mov	arg02, #33
0343c     A6 0E 00 FF 
03440     00 60 06 F6 | 	mov	arg03, ##1920000
03444     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03448                 | ' serial_start(midiin,midiout,mbaudrate)
03448     1D 5C 06 F6 | 	mov	arg01, #29
0344c     1E 5E 06 F6 | 	mov	arg02, #30
03450     3D 00 00 FF 
03454     12 60 06 F6 | 	mov	arg03, ##31250
03458     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0345c                 | ' serial_start(srxpin,stxpin,sbaudrate)
0345c     42 0F 00 FF 
03460     80 6A 06 F6 | 	mov	local01, ##2000000
03464     3F 5C 06 F6 | 	mov	arg01, #63
03468     3E 5E 06 F6 | 	mov	arg02, #62
0346c     42 0F 00 FF 
03470     80 60 06 F6 | 	mov	arg03, ##2000000
03474     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03478                 | ' 
03478                 | ' mb:=(-1)
03478     01 6C 66 F6 | 	neg	local02, #1
0347c                 | ' b:=(-1)
0347c     01 6E 66 F6 | 	neg	local03, #1
03480                 | ' 
03480                 | ' mousefront:=0
03480     00 70 06 F6 | 	mov	local04, #0
03484     08 0E 06 F1 | 	add	objptr, #8
03488     07 01 68 FC | 	wrlong	#0, objptr
0348c                 | ' mousetail:=0
0348c     04 0E 06 F1 | 	add	objptr, #4
03490     07 01 68 FC | 	wrlong	#0, objptr
03494     0C 0E 86 F1 | 	sub	objptr, #12
03498                 | ' kbdfront:=0
03498     07 01 68 FC | 	wrlong	#0, objptr
0349c                 | ' kbdtail:=0
0349c     04 0E 06 F1 | 	add	objptr, #4
034a0     07 01 68 FC | 	wrlong	#0, objptr
034a4                 | ' midifront:=0
034a4     0C 0E 06 F1 | 	add	objptr, #12
034a8     07 01 68 FC | 	wrlong	#0, objptr
034ac                 | ' miditail:=0
034ac     04 0E 06 F1 | 	add	objptr, #4
034b0     07 01 68 FC | 	wrlong	#0, objptr
034b4                 | ' serialfront:=0
034b4     04 0E 06 F1 | 	add	objptr, #4
034b8     07 01 68 FC | 	wrlong	#0, objptr
034bc                 | ' serialtail:=0
034bc     04 0E 06 F1 | 	add	objptr, #4
034c0     07 01 68 FC | 	wrlong	#0, objptr
034c4                 | ' long[$30]:=0
034c4     30 00 6C FC | 	wrlong	#0, #48
034c8                 | ' long[$34]:=0
034c8     34 00 6C FC | 	wrlong	#0, #52
034cc                 | ' long[$38]:=0
034cc     38 00 6C FC | 	wrlong	#0, #56
034d0     1C 0E 86 F1 | 	sub	objptr, #28
034d4                 | ' long[$3C]:=0
034d4     3C 00 6C FC | 	wrlong	#0, #60
034d8                 | ' 
034d8                 | ' repeat
034d8                 | LR__0111
034d8                 | ' 
034d8                 | ' '  repeat 
034d8                 | '   rr:=rxcheck(rxpin)
034d8     20 5C 06 F6 | 	mov	arg01, #32
034dc     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
034e0     15 73 02 F6 | 	mov	local05, result1
034e4                 | '   mrr:=rxcheck(midiin)
034e4     1D 5C 06 F6 | 	mov	arg01, #29
034e8     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
034ec     15 75 02 F6 | 	mov	local06, result1
034f0                 | '   srr:=rxcheck(srxpin)
034f0     3F 70 06 F6 | 	mov	local04, #63
034f4     3F 5C 06 F6 | 	mov	arg01, #63
034f8     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
034fc     15 77 02 F6 | 	mov	local07, result1
03500     3B 79 02 F6 | 	mov	local08, local07
03504                 | ' 
03504                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03504                 | ' 
03504                 | '   
03504                 | ' ' midi. Must be >= $80 for a command
03504                 | ' '$80-$8F - 3 bytes note off. note, velocity
03504                 | ' '$90-$9F - 3 bytes note on, note, velocity
03504                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03504                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03504                 | ' '$C0-$CF - 2 bytes program change
03504                 | ' '$D0-$DF - 2 bytes mono aftertouch
03504                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03504                 | ' '$F0-$FF - 1 byte
03504                 | '   
03504                 | '   if srr>=0
03504     00 78 5E F2 | 	cmps	local08, #0 wcz
03508     7C 00 90 CD |  if_b	jmp	#LR__0113
0350c                 | '   
0350c                 | '     if serialfront<>((serialtail-1) //32)
0350c     1C 0E 06 F1 | 	add	objptr, #28
03510     07 77 02 FB | 	rdlong	local07, objptr
03514     3B 71 02 F6 | 	mov	local04, local07
03518     01 70 86 F1 | 	sub	local04, #1
0351c     38 6B 52 F6 | 	abs	local01, local04 wc
03520     1F 6A 06 F5 | 	and	local01, #31
03524     35 6B 62 C6 |  if_b	neg	local01, local01
03528     04 0E 86 F1 | 	sub	objptr, #4
0352c     07 7B 02 FB | 	rdlong	local09, objptr
03530     18 0E 86 F1 | 	sub	objptr, #24
03534     3D 7D 02 F6 | 	mov	local10, local09
03538     35 7D 0A F2 | 	cmp	local10, local01 wz
0353c     48 00 90 AD |  if_e	jmp	#LR__0112
03540     18 0E 06 F1 | 	add	objptr, #24
03544     07 7D 02 FB | 	rdlong	local10, objptr
03548     01 00 00 FF 
0354c     08 0F 06 F1 | 	add	objptr, ##776
03550     07 7D 02 F1 | 	add	local10, objptr
03554     3E 7F 02 F6 | 	mov	local11, local10
03558                 | '       serialbuf[serialfront]:=srr
03558     3F 79 42 FC | 	wrbyte	local08, local11
0355c                 | '       serialfront+=1
0355c     01 00 00 FF 
03560     08 0F 86 F1 | 	sub	objptr, ##776
03564     07 6B 02 FB | 	rdlong	local01, objptr
03568     01 6A 06 F1 | 	add	local01, #1
0356c     07 6B 62 FC | 	wrlong	local01, objptr
03570                 | '       serialfront:=serialfront // 32
03570     35 77 02 F6 | 	mov	local07, local01
03574     3B 71 52 F6 | 	abs	local04, local07 wc
03578     1F 70 06 F5 | 	and	local04, #31
0357c     38 71 62 C6 |  if_b	neg	local04, local04
03580     07 71 62 FC | 	wrlong	local04, objptr
03584     18 0E 86 F1 | 	sub	objptr, #24
03588                 | LR__0112
03588                 | LR__0113
03588                 | '     
03588                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03588     80 74 5E F2 | 	cmps	local06, #128 wcz
0358c     08 00 90 CD |  if_b	jmp	#LR__0114
03590     BF 74 5E F2 | 	cmps	local06, #191 wcz
03594     10 00 90 ED |  if_be	jmp	#LR__0115
03598                 | LR__0114
03598     E0 74 5E F2 | 	cmps	local06, #224 wcz
0359c     1C 00 90 CD |  if_b	jmp	#LR__0116
035a0     EF 74 5E F2 | 	cmps	local06, #239 wcz
035a4     14 00 90 1D |  if_a	jmp	#LR__0116
035a8                 | LR__0115
035a8                 | '     mb:=2
035a8     02 6C 06 F6 | 	mov	local02, #2
035ac     3A 71 02 F6 | 	mov	local04, local06
035b0     18 70 66 F0 | 	shl	local04, #24
035b4     38 81 02 F6 | 	mov	local12, local04
035b8                 | '     midireport:=mrr<<24
035b8     40 83 02 F6 | 	mov	local13, local12
035bc                 | LR__0116
035bc                 | ' 
035bc                 | '   if (mrr>=$C0) && (mrr<=$DF)
035bc     C0 74 5E F2 | 	cmps	local06, #192 wcz
035c0     1C 00 90 CD |  if_b	jmp	#LR__0117
035c4     DF 74 5E F2 | 	cmps	local06, #223 wcz
035c8     14 00 90 1D |  if_a	jmp	#LR__0117
035cc                 | '     mb:=1
035cc     01 6C 06 F6 | 	mov	local02, #1
035d0     3A 71 02 F6 | 	mov	local04, local06
035d4     18 70 66 F0 | 	shl	local04, #24
035d8     38 85 02 F6 | 	mov	local14, local04
035dc                 | '     midireport:=mrr<<24
035dc     42 83 02 F6 | 	mov	local13, local14
035e0                 | LR__0117
035e0                 | '   
035e0                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
035e0     F0 74 5E F2 | 	cmps	local06, #240 wcz
035e4     10 00 90 CD |  if_b	jmp	#LR__0118
035e8                 | '     mb:=4
035e8     04 6C 06 F6 | 	mov	local02, #4
035ec     3A 87 02 F6 | 	mov	local15, local06
035f0     18 86 66 F0 | 	shl	local15, #24
035f4                 | '     midireport:=mrr<<24  
035f4     43 83 02 F6 | 	mov	local13, local15
035f8                 | LR__0118
035f8                 | '   
035f8                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
035f8     80 74 5E F2 | 	cmps	local06, #128 wcz
035fc     44 00 90 3D |  if_ae	jmp	#LR__0120
03600     00 6C 5E F2 | 	cmps	local02, #0 wcz
03604     3C 00 90 ED |  if_be	jmp	#LR__0120
03608     00 74 5E F2 | 	cmps	local06, #0 wcz
0360c     34 00 90 CD |  if_b	jmp	#LR__0120
03610                 | '     
03610                 | '     mb--
03610     36 71 02 F6 | 	mov	local04, local02
03614     36 77 02 F6 | 	mov	local07, local02
03618     01 76 86 F1 | 	sub	local07, #1
0361c     3B 6D 02 F6 | 	mov	local02, local07
03620                 | '     if mb<3
03620     03 6C 5E F2 | 	cmps	local02, #3 wcz
03624     1C 00 90 3D |  if_ae	jmp	#LR__0119
03628     36 89 02 F6 | 	mov	local16, local02
0362c     03 88 66 F0 | 	shl	local16, #3
03630     3A 8B 02 F6 | 	mov	local17, local06
03634     44 8B 62 F0 | 	shl	local17, local16
03638                 | '       midireport+=mrr<<(mb<<3)
03638     41 71 02 F6 | 	mov	local04, local13
0363c     45 71 02 F1 | 	add	local04, local17
03640     38 83 02 F6 | 	mov	local13, local04
03644                 | LR__0119
03644                 | LR__0120
03644                 | '   
03644                 | '   if mb==0
03644     00 6C 0E F2 | 	cmp	local02, #0 wz
03648     84 00 90 5D |  if_ne	jmp	#LR__0122
0364c                 | '     
0364c                 | '     if midifront<>((miditail-1) //32)
0364c     14 0E 06 F1 | 	add	objptr, #20
03650     07 77 02 FB | 	rdlong	local07, objptr
03654     3B 71 02 F6 | 	mov	local04, local07
03658     01 70 86 F1 | 	sub	local04, #1
0365c     38 6B 52 F6 | 	abs	local01, local04 wc
03660     1F 6A 06 F5 | 	and	local01, #31
03664     35 6B 62 C6 |  if_b	neg	local01, local01
03668     04 0E 86 F1 | 	sub	objptr, #4
0366c     07 7B 02 FB | 	rdlong	local09, objptr
03670     10 0E 86 F1 | 	sub	objptr, #16
03674     3D 7D 02 F6 | 	mov	local10, local09
03678     35 7D 0A F2 | 	cmp	local10, local01 wz
0367c     4C 00 90 AD |  if_e	jmp	#LR__0121
03680     10 0E 06 F1 | 	add	objptr, #16
03684     07 7D 02 FB | 	rdlong	local10, objptr
03688     02 7C 66 F0 | 	shl	local10, #2
0368c     01 00 00 FF 
03690     90 0E 06 F1 | 	add	objptr, ##656
03694     07 7D 02 F1 | 	add	local10, objptr
03698     3E 8D 02 F6 | 	mov	local18, local10
0369c                 | '       midibuf[midifront]:=midireport
0369c     46 83 62 FC | 	wrlong	local13, local18
036a0                 | '       midifront+=1
036a0     01 00 00 FF 
036a4     90 0E 86 F1 | 	sub	objptr, ##656
036a8     07 6B 02 FB | 	rdlong	local01, objptr
036ac     01 6A 06 F1 | 	add	local01, #1
036b0     07 6B 62 FC | 	wrlong	local01, objptr
036b4                 | '       midifront:=midifront // 32
036b4     35 77 02 F6 | 	mov	local07, local01
036b8     3B 71 52 F6 | 	abs	local04, local07 wc
036bc     1F 70 06 F5 | 	and	local04, #31
036c0     38 71 62 C6 |  if_b	neg	local04, local04
036c4     07 71 62 FC | 	wrlong	local04, objptr
036c8     10 0E 86 F1 | 	sub	objptr, #16
036cc                 | LR__0121
036cc                 | '     mb:=(-1)
036cc     01 6C 66 F6 | 	neg	local02, #1
036d0                 | LR__0122
036d0                 | ' 
036d0                 | ' 'Keyboard and mouse
036d0                 | ' 
036d0                 | '   if (rr>=$80) && (rr<>$FF)
036d0     80 72 5E F2 | 	cmps	local05, #128 wcz
036d4     1C 00 90 CD |  if_b	jmp	#LR__0123
036d8     FF 72 0E F2 | 	cmp	local05, #255 wz
036dc     14 00 90 AD |  if_e	jmp	#LR__0123
036e0                 | '     b:=3
036e0     03 6E 06 F6 | 	mov	local03, #3
036e4     39 71 02 F6 | 	mov	local04, local05
036e8     18 70 66 F0 | 	shl	local04, #24
036ec     38 8F 02 F6 | 	mov	local19, local04
036f0                 | '     kbmreport:=rr<<24
036f0     47 91 02 F6 | 	mov	local20, local19
036f4                 | LR__0123
036f4                 | '   
036f4                 | '   if (rr<$80) && (b>0) && (rr>=0)
036f4     80 72 5E F2 | 	cmps	local05, #128 wcz
036f8     38 00 90 3D |  if_ae	jmp	#LR__0124
036fc     00 6E 5E F2 | 	cmps	local03, #0 wcz
03700     30 00 90 ED |  if_be	jmp	#LR__0124
03704     00 72 5E F2 | 	cmps	local05, #0 wcz
03708     28 00 90 CD |  if_b	jmp	#LR__0124
0370c                 | '     b--
0370c     37 77 02 F6 | 	mov	local07, local03
03710     01 76 86 F1 | 	sub	local07, #1
03714     3B 6F 02 F6 | 	mov	local03, local07
03718     37 93 02 F6 | 	mov	local21, local03
0371c     03 92 66 F0 | 	shl	local21, #3
03720     39 95 02 F6 | 	mov	local22, local05
03724     49 95 62 F0 | 	shl	local22, local21
03728                 | '     kbmreport+=rr<<(b<<3)  
03728     48 71 02 F6 | 	mov	local04, local20
0372c     4A 71 02 F1 | 	add	local04, local22
03730     38 91 02 F6 | 	mov	local20, local04
03734                 | LR__0124
03734                 | '   
03734                 | '   if (rr==$FF)
03734     FF 72 0E F2 | 	cmp	local05, #255 wz
03738                 | '     b:=0   
03738     00 6E 06 A6 |  if_e	mov	local03, #0
0373c                 | ' 
0373c                 | '   if b==0  
0373c     00 6E 0E F2 | 	cmp	local03, #0 wz
03740     14 01 90 5D |  if_ne	jmp	#LR__0129
03744                 | '  
03744                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03744     00 00 40 FF 
03748     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
0374c     84 00 90 CD |  if_b	jmp	#LR__0126
03750     00 80 43 FF 
03754     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03758     78 00 90 3D |  if_ae	jmp	#LR__0126
0375c                 | '       if mousefront<>((mousetail-1) //128)
0375c     0C 0E 06 F1 | 	add	objptr, #12
03760     07 77 02 FB | 	rdlong	local07, objptr
03764     3B 71 02 F6 | 	mov	local04, local07
03768     01 70 86 F1 | 	sub	local04, #1
0376c     38 6B 52 F6 | 	abs	local01, local04 wc
03770     7F 6A 06 F5 | 	and	local01, #127
03774     35 6B 62 C6 |  if_b	neg	local01, local01
03778     04 0E 86 F1 | 	sub	objptr, #4
0377c     07 7B 02 FB | 	rdlong	local09, objptr
03780     08 0E 86 F1 | 	sub	objptr, #8
03784     3D 7D 02 F6 | 	mov	local10, local09
03788     35 7D 0A F2 | 	cmp	local10, local01 wz
0378c     44 00 90 AD |  if_e	jmp	#LR__0125
03790     08 0E 06 F1 | 	add	objptr, #8
03794     07 7D 02 FB | 	rdlong	local10, objptr
03798     02 7C 66 F0 | 	shl	local10, #2
0379c     98 0E 06 F1 | 	add	objptr, #152
037a0     07 7D 02 F1 | 	add	local10, objptr
037a4     3E 97 02 F6 | 	mov	local23, local10
037a8                 | '         mousebuf[mousefront]:=kbmreport
037a8     4B 91 62 FC | 	wrlong	local20, local23
037ac                 | '         mousefront+=1
037ac     98 0E 86 F1 | 	sub	objptr, #152
037b0     07 6B 02 FB | 	rdlong	local01, objptr
037b4     01 6A 06 F1 | 	add	local01, #1
037b8     07 6B 62 FC | 	wrlong	local01, objptr
037bc                 | '         mousefront:=mousefront // 128
037bc     35 77 02 F6 | 	mov	local07, local01
037c0     3B 71 52 F6 | 	abs	local04, local07 wc
037c4     7F 70 06 F5 | 	and	local04, #127
037c8     38 71 62 C6 |  if_b	neg	local04, local04
037cc     07 71 62 FC | 	wrlong	local04, objptr
037d0     08 0E 86 F1 | 	sub	objptr, #8
037d4                 | LR__0125
037d4                 | LR__0126
037d4                 | '     b:=(-1)
037d4     01 6E 66 F6 | 	neg	local03, #1
037d8                 | ' 
037d8                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
037d8     00 80 43 FF 
037dc     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
037e0     70 00 90 CD |  if_b	jmp	#LR__0128
037e4     00 00 45 FF 
037e8     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
037ec     64 00 90 3D |  if_ae	jmp	#LR__0128
037f0                 | '       if kbdfront<>((kbdtail-1) //32)
037f0     04 0E 06 F1 | 	add	objptr, #4
037f4     07 77 02 FB | 	rdlong	local07, objptr
037f8     04 0E 86 F1 | 	sub	objptr, #4
037fc     3B 71 02 F6 | 	mov	local04, local07
03800     01 70 86 F1 | 	sub	local04, #1
03804     38 6B 52 F6 | 	abs	local01, local04 wc
03808     1F 6A 06 F5 | 	and	local01, #31
0380c     35 6B 62 C6 |  if_b	neg	local01, local01
03810     07 7D 02 FB | 	rdlong	local10, objptr
03814     35 7D 0A F2 | 	cmp	local10, local01 wz
03818     38 00 90 AD |  if_e	jmp	#LR__0127
0381c     07 6B 02 FB | 	rdlong	local01, objptr
03820     02 6A 66 F0 | 	shl	local01, #2
03824     20 0E 06 F1 | 	add	objptr, #32
03828     07 6B 02 F1 | 	add	local01, objptr
0382c     35 99 02 F6 | 	mov	local24, local01
03830                 | '         kbdbuf[kbdfront]:=kbmreport
03830     4C 91 62 FC | 	wrlong	local20, local24
03834                 | '         kbdfront+=1
03834     20 0E 86 F1 | 	sub	objptr, #32
03838     07 77 02 FB | 	rdlong	local07, objptr
0383c     01 76 06 F1 | 	add	local07, #1
03840     07 77 62 FC | 	wrlong	local07, objptr
03844                 | '         kbdfront:=kbdfront // 32
03844     3B 71 52 F6 | 	abs	local04, local07 wc
03848     1F 70 06 F5 | 	and	local04, #31
0384c     38 71 62 C6 |  if_b	neg	local04, local04
03850     07 71 62 FC | 	wrlong	local04, objptr
03854                 | LR__0127
03854                 | LR__0128
03854                 | '     b:=(-1)
03854     01 6E 66 F6 | 	neg	local03, #1
03858                 | LR__0129
03858                 | ' 
03858                 | ' 
03858                 | '   if long[$30]==0
03858     30 70 0E FB | 	rdlong	local04, #48 wz
0385c     5C 00 90 5D |  if_ne	jmp	#LR__0131
03860                 | '     if kbdfront<>kbdtail
03860     07 71 02 FB | 	rdlong	local04, objptr
03864     04 0E 06 F1 | 	add	objptr, #4
03868     07 6B 02 FB | 	rdlong	local01, objptr
0386c     04 0E 86 F1 | 	sub	objptr, #4
03870     35 71 0A F2 | 	cmp	local04, local01 wz
03874     44 00 90 AD |  if_e	jmp	#LR__0130
03878     04 0E 06 F1 | 	add	objptr, #4
0387c     07 9B 02 FB | 	rdlong	local25, objptr
03880     02 9A 66 F0 | 	shl	local25, #2
03884     1C 0E 06 F1 | 	add	objptr, #28
03888     07 9B 02 F1 | 	add	local25, objptr
0388c                 | '       long[$30]:=kbdbuf[kbdtail]
0388c     4D 71 02 FB | 	rdlong	local04, local25
03890     30 70 66 FC | 	wrlong	local04, #48
03894                 | '       kbdtail++
03894     1C 0E 86 F1 | 	sub	objptr, #28
03898     07 7D 02 FB | 	rdlong	local10, objptr
0389c     3E 6B 02 F6 | 	mov	local01, local10
038a0     01 6A 06 F1 | 	add	local01, #1
038a4     07 6B 62 FC | 	wrlong	local01, objptr
038a8                 | '       kbdtail:= kbdtail // 32
038a8     35 71 52 F6 | 	abs	local04, local01 wc
038ac     1F 70 06 F5 | 	and	local04, #31
038b0     38 71 62 C6 |  if_b	neg	local04, local04
038b4     07 71 62 FC | 	wrlong	local04, objptr
038b8     04 0E 86 F1 | 	sub	objptr, #4
038bc                 | LR__0130
038bc                 | LR__0131
038bc                 | '       
038bc                 | '   if long[$34]==0
038bc     34 70 0E FB | 	rdlong	local04, #52 wz
038c0     64 00 90 5D |  if_ne	jmp	#LR__0133
038c4                 | '     if mousefront<>mousetail
038c4     08 0E 06 F1 | 	add	objptr, #8
038c8     07 71 02 FB | 	rdlong	local04, objptr
038cc     04 0E 06 F1 | 	add	objptr, #4
038d0     07 7D 02 FB | 	rdlong	local10, objptr
038d4     0C 0E 86 F1 | 	sub	objptr, #12
038d8     3E 6B 02 F6 | 	mov	local01, local10
038dc     35 71 0A F2 | 	cmp	local04, local01 wz
038e0     44 00 90 AD |  if_e	jmp	#LR__0132
038e4     0C 0E 06 F1 | 	add	objptr, #12
038e8     07 9D 02 FB | 	rdlong	local26, objptr
038ec     02 9C 66 F0 | 	shl	local26, #2
038f0     94 0E 06 F1 | 	add	objptr, #148
038f4     07 9D 02 F1 | 	add	local26, objptr
038f8                 | '       long[$34]:=mousebuf[mousetail]
038f8     4E 71 02 FB | 	rdlong	local04, local26
038fc     34 70 66 FC | 	wrlong	local04, #52
03900                 | '       mousetail++
03900     94 0E 86 F1 | 	sub	objptr, #148
03904     07 7D 02 FB | 	rdlong	local10, objptr
03908     3E 6B 02 F6 | 	mov	local01, local10
0390c     01 6A 06 F1 | 	add	local01, #1
03910     07 6B 62 FC | 	wrlong	local01, objptr
03914                 | '       mousetail:= mousetail // 128
03914     35 71 52 F6 | 	abs	local04, local01 wc
03918     7F 70 06 F5 | 	and	local04, #127
0391c     38 71 62 C6 |  if_b	neg	local04, local04
03920     07 71 62 FC | 	wrlong	local04, objptr
03924     0C 0E 86 F1 | 	sub	objptr, #12
03928                 | LR__0132
03928                 | LR__0133
03928                 | ' 
03928                 | '       
03928                 | '   if long[$38]==0
03928     38 70 0E FB | 	rdlong	local04, #56 wz
0392c     6C 00 90 5D |  if_ne	jmp	#LR__0135
03930                 | '     if midifront<>miditail
03930     10 0E 06 F1 | 	add	objptr, #16
03934     07 71 02 FB | 	rdlong	local04, objptr
03938     04 0E 06 F1 | 	add	objptr, #4
0393c     07 7D 02 FB | 	rdlong	local10, objptr
03940     14 0E 86 F1 | 	sub	objptr, #20
03944     3E 6B 02 F6 | 	mov	local01, local10
03948     35 71 0A F2 | 	cmp	local04, local01 wz
0394c     4C 00 90 AD |  if_e	jmp	#LR__0134
03950     14 0E 06 F1 | 	add	objptr, #20
03954     07 9F 02 FB | 	rdlong	local27, objptr
03958     02 9E 66 F0 | 	shl	local27, #2
0395c     01 00 00 FF 
03960     8C 0E 06 F1 | 	add	objptr, ##652
03964     07 9F 02 F1 | 	add	local27, objptr
03968                 | '       long[$38]:=midibuf[miditail]
03968     4F 71 02 FB | 	rdlong	local04, local27
0396c     38 70 66 FC | 	wrlong	local04, #56
03970                 | '       miditail++
03970     01 00 00 FF 
03974     8C 0E 86 F1 | 	sub	objptr, ##652
03978     07 7D 02 FB | 	rdlong	local10, objptr
0397c     3E 6B 02 F6 | 	mov	local01, local10
03980     01 6A 06 F1 | 	add	local01, #1
03984     07 6B 62 FC | 	wrlong	local01, objptr
03988                 | '       miditail:= miditail // 32
03988     35 71 52 F6 | 	abs	local04, local01 wc
0398c     1F 70 06 F5 | 	and	local04, #31
03990     38 71 62 C6 |  if_b	neg	local04, local04
03994     07 71 62 FC | 	wrlong	local04, objptr
03998     14 0E 86 F1 | 	sub	objptr, #20
0399c                 | LR__0134
0399c                 | LR__0135
0399c                 | '       
0399c                 | '   if long[$3c]==0
0399c     3C 70 0E FB | 	rdlong	local04, #60 wz
039a0     34 FB 9F 5D |  if_ne	jmp	#LR__0111
039a4                 | '     if serialfront<>serialtail
039a4     18 0E 06 F1 | 	add	objptr, #24
039a8     07 71 02 FB | 	rdlong	local04, objptr
039ac     04 0E 06 F1 | 	add	objptr, #4
039b0     07 7D 02 FB | 	rdlong	local10, objptr
039b4     1C 0E 86 F1 | 	sub	objptr, #28
039b8     3E 6B 02 F6 | 	mov	local01, local10
039bc     35 71 0A F2 | 	cmp	local04, local01 wz
039c0     14 FB 9F AD |  if_e	jmp	#LR__0111
039c4                 | '       byte[$3c]:=255
039c4     3C FE 4D FC | 	wrbyte	#255, #60
039c8     1C 0E 06 F1 | 	add	objptr, #28
039cc     07 A1 02 FB | 	rdlong	local28, objptr
039d0     01 00 00 FF 
039d4     04 0F 06 F1 | 	add	objptr, ##772
039d8     07 A1 02 F1 | 	add	local28, objptr
039dc                 | '       byte[$3D]:=serialbuf[serialtail]
039dc     50 71 C2 FA | 	rdbyte	local04, local28
039e0     3D 70 46 FC | 	wrbyte	local04, #61
039e4                 | '       serialtail++
039e4     01 00 00 FF 
039e8     04 0F 86 F1 | 	sub	objptr, ##772
039ec     07 7D 02 FB | 	rdlong	local10, objptr
039f0     3E 6B 02 F6 | 	mov	local01, local10
039f4     01 6A 06 F1 | 	add	local01, #1
039f8     07 6B 62 FC | 	wrlong	local01, objptr
039fc                 | '       serialtail:= serialtail // 32
039fc     35 71 52 F6 | 	abs	local04, local01 wc
03a00     1F 70 06 F5 | 	and	local04, #31
03a04     38 71 62 C6 |  if_b	neg	local04, local04
03a08     07 71 62 FC | 	wrlong	local04, objptr
03a0c     1C 0E 86 F1 | 	sub	objptr, #28
03a10     C4 FA 9F FD | 	jmp	#LR__0111
03a14     AF F0 03 F6 | 	mov	ptra, fp
03a18     BF 00 A0 FD | 	call	#popregs_
03a1c                 | _retrocog_spin2_serialcog_ret
03a1c     2D 00 64 FD | 	ret
03a20                 | 
03a20                 | '       
03a20                 | ' 
03a20                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03a20                 | ' 
03a20                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03a20                 | _retrocog_spin2_serial_start
03a20     04 5A 05 F6 | 	mov	COUNT_, #4
03a24     B0 00 A0 FD | 	call	#pushregs_
03a28     2E 6B 02 F6 | 	mov	local01, arg01
03a2c     2F 6D 02 F6 | 	mov	local02, arg02
03a30                 | ' 
03a30                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03a30     14 5C 06 FB | 	rdlong	arg01, #20
03a34     10 5E C6 F9 | 	decod	arg02, #16
03a38     2F 5D 02 FD | 	qmul	arg01, arg02
03a3c     19 6E 62 FD | 	getqy	local03
03a40     18 70 62 FD | 	getqx	local04
03a44     28 6E 62 FD | 	setq	local03
03a48     30 71 12 FD | 	qdiv	local04, arg03
03a4c     18 2A 62 FD | 	getqx	result1
03a50     15 61 02 F6 | 	mov	arg03, result1
03a54     FE FF 7F FF 
03a58     00 60 06 F5 | 	and	arg03, ##-1024
03a5c                 | ' bitmode |= 7                                                  ' set bits (8)
03a5c     07 60 46 F5 | 	or	arg03, #7
03a60                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03a60     40 6A 62 FD | 	dirl	local01
03a64     08 00 80 FF 
03a68     35 7D 08 FC | 	wrpin	##4158, local01
03a6c     35 61 12 FC | 	wxpin	arg03, local01
03a70     35 01 28 FC | 	wypin	#0, local01
03a74     41 6A 62 FD | 	dirh	local01
03a78                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03a78     40 6C 62 FD | 	dirl	local02
03a7c     36 F9 08 FC | 	wrpin	#124, local02
03a80     36 61 12 FC | 	wxpin	arg03, local02
03a84     36 01 28 FC | 	wypin	#0, local02
03a88     41 6C 62 FD | 	dirh	local02
03a8c                 | ' pinhigh(rxpin)
03a8c     59 6A 62 FD | 	drvh	local01
03a90     AF F0 03 F6 | 	mov	ptra, fp
03a94     BF 00 A0 FD | 	call	#popregs_
03a98                 | _retrocog_spin2_serial_start_ret
03a98     2D 00 64 FD | 	ret
03a9c                 | 
03a9c                 | ' 
03a9c                 | ' pub rxcheck(pin) : rxbyte | check
03a9c                 | _retrocog_spin2_rxcheck
03a9c     03 5A 05 F6 | 	mov	COUNT_, #3
03aa0     B0 00 A0 FD | 	call	#pushregs_
03aa4     2E 6B 02 F6 | 	mov	local01, arg01
03aa8                 | ' 
03aa8                 | ' '' Check for serial input
03aa8                 | ' '' -- returns -1 if nothing available
03aa8                 | ' 
03aa8                 | '   rxbyte := -1
03aa8     01 6C 66 F6 | 	neg	local02, #1
03aac                 | '   check := pinr(pin)
03aac     35 5D 02 F6 | 	mov	arg01, local01
03ab0     6C 26 B0 FD | 	call	#__system___pinread
03ab4     15 6F 0A F6 | 	mov	local03, result1 wz
03ab8                 | '   if (check)
03ab8                 | '     rxbyte := rdpin(pin) >> 24
03ab8     00 6C 06 56 |  if_ne	mov	local02, #0
03abc     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03ac0     18 6C 46 50 |  if_ne	shr	local02, #24
03ac4     36 2B 02 F6 | 	mov	result1, local02
03ac8     AF F0 03 F6 | 	mov	ptra, fp
03acc     BF 00 A0 FD | 	call	#popregs_
03ad0                 | _retrocog_spin2_rxcheck_ret
03ad0     2D 00 64 FD | 	ret
03ad4                 | 
03ad4                 | _trackerplayer_spin2_initModule
03ad4     3E 5A 05 F6 | 	mov	COUNT_, #62
03ad8     B0 00 A0 FD | 	call	#pushregs_
03adc     24 F1 07 F1 | 	add	ptra, #292
03ae0     AF 5C 62 FC | 	wrlong	arg01, fp
03ae4     04 5E 05 F1 | 	add	fp, #4
03ae8     AF 5E 62 FC | 	wrlong	arg02, fp
03aec     04 5E 85 F1 | 	sub	fp, #4
03af0     AF 6A 02 FB | 	rdlong	local01, fp
03af4     02 00 00 FF 
03af8     38 6A 06 F1 | 	add	local01, ##1080
03afc                 | ' 
03afc                 | '   ' Set some data pointers
03afc                 | '   magicFour      := hubPtr + 1080
03afc     9D 0E 06 F1 | 	add	objptr, #157
03b00     07 6B 62 FC | 	wrlong	local01, objptr
03b04                 | '   nameStr        := hubPtr
03b04     AF 6C 02 FB | 	rdlong	local02, fp
03b08     97 0E 86 F1 | 	sub	objptr, #151
03b0c     07 6D 62 FC | 	wrlong	local02, objptr
03b10     AF 6E 02 FB | 	rdlong	local03, fp
03b14     14 6E 06 F1 | 	add	local03, #20
03b18                 | '   samplesInfoLut := hubPtr + 20
03b18     04 0E 06 F1 | 	add	objptr, #4
03b1c     07 6F 62 FC | 	wrlong	local03, objptr
03b20                 | ' 
03b20                 | '   ' Is this a 31 sample module?
03b20                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03b20     93 0E 06 F1 | 	add	objptr, #147
03b24     07 6D 02 FB | 	rdlong	local02, objptr
03b28     9D 0E 86 F1 | 	sub	objptr, #157
03b2c     36 71 C2 FA | 	rdbyte	local04, local02
03b30     4D 70 0E F2 | 	cmp	local04, #77 wz
03b34     48 01 90 5D |  if_ne	jmp	#LR__0139
03b38     9D 0E 06 F1 | 	add	objptr, #157
03b3c     07 73 02 FB | 	rdlong	local05, objptr
03b40     9D 0E 86 F1 | 	sub	objptr, #157
03b44     02 72 06 F1 | 	add	local05, #2
03b48     39 75 C2 FA | 	rdbyte	local06, local05
03b4c     4B 74 0E F2 | 	cmp	local06, #75 wz
03b50     2C 01 90 5D |  if_ne	jmp	#LR__0139
03b54     AF 76 02 FB | 	rdlong	local07, fp
03b58     01 00 00 FF 
03b5c     B6 77 06 F1 | 	add	local07, ##950
03b60                 | '     songLength          := byte[hubPtr + 950]
03b60     3B 6D C2 FA | 	rdbyte	local02, local07
03b64     9A 0E 06 F1 | 	add	objptr, #154
03b68     07 6D 42 FC | 	wrbyte	local02, objptr
03b6c     AF 78 02 FB | 	rdlong	local08, fp
03b70     01 00 00 FF 
03b74     B7 79 06 F1 | 	add	local08, ##951
03b78                 | '     unknown1            := byte[hubPtr + 951]
03b78     3C 6D C2 FA | 	rdbyte	local02, local08
03b7c     02 0E 06 F1 | 	add	objptr, #2
03b80     07 6D 42 FC | 	wrbyte	local02, objptr
03b84     AF 7A 02 FB | 	rdlong	local09, fp
03b88     01 00 00 FF 
03b8c     B8 7B 06 F1 | 	add	local09, ##952
03b90                 | '     songPositionsLut    :=      hubPtr + 952
03b90     06 0E 86 F1 | 	sub	objptr, #6
03b94     07 7B 62 FC | 	wrlong	local09, objptr
03b98     AF 7C 02 FB | 	rdlong	local10, fp
03b9c     02 00 00 FF 
03ba0     3C 7C 06 F1 | 	add	local10, ##1084
03ba4                 | '     patternsData        :=      hubPtr + 1084
03ba4     04 0E 86 F1 | 	sub	objptr, #4
03ba8     07 7D 62 FC | 	wrlong	local10, objptr
03bac                 | '     numberOfInstruments := 31
03bac     14 0E 06 F1 | 	add	objptr, #20
03bb0     07 3F 48 FC | 	wrbyte	#31, objptr
03bb4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03bb4     0B 0E 86 F1 | 	sub	objptr, #11
03bb8     07 01 48 FC | 	wrbyte	#0, objptr
03bbc     9B 0E 86 F1 | 	sub	objptr, #155
03bc0                 | '     repeat i from 952 to 1079
03bc0     08 5E 05 F1 | 	add	fp, #8
03bc4     01 00 80 FF 
03bc8     AF 70 6B FC | 	wrlong	##952, fp
03bcc     08 5E 85 F1 | 	sub	fp, #8
03bd0     9C C4 9F FE | 	loc	pa,	#(@LR__0138-@LR__0136)
03bd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bd8                 | LR__0136
03bd8                 | '       if byte[hubPtr][i] > numberOfPatterns
03bd8     AF 7E 02 FB | 	rdlong	local11, fp
03bdc     08 5E 05 F1 | 	add	fp, #8
03be0     AF 70 02 FB | 	rdlong	local04, fp
03be4     08 5E 85 F1 | 	sub	fp, #8
03be8     3F 71 02 F1 | 	add	local04, local11
03bec     38 75 C2 FA | 	rdbyte	local06, local04
03bf0     9B 0E 06 F1 | 	add	objptr, #155
03bf4     07 81 C2 FA | 	rdbyte	local12, objptr
03bf8     9B 0E 86 F1 | 	sub	objptr, #155
03bfc     40 75 5A F2 | 	cmps	local06, local12 wcz
03c00     24 00 90 ED |  if_be	jmp	#LR__0137
03c04     AF 7E 02 FB | 	rdlong	local11, fp
03c08     08 5E 05 F1 | 	add	fp, #8
03c0c     AF 82 02 FB | 	rdlong	local13, fp
03c10     08 5E 85 F1 | 	sub	fp, #8
03c14     3F 83 02 F1 | 	add	local13, local11
03c18                 | '         numberOfPatterns := byte[hubPtr][i]
03c18     41 85 C2 FA | 	rdbyte	local14, local13
03c1c     9B 0E 06 F1 | 	add	objptr, #155
03c20     07 85 42 FC | 	wrbyte	local14, objptr
03c24     9B 0E 86 F1 | 	sub	objptr, #155
03c28                 | LR__0137
03c28     08 5E 05 F1 | 	add	fp, #8
03c2c     AF 84 02 FB | 	rdlong	local14, fp
03c30     01 84 06 F1 | 	add	local14, #1
03c34     AF 84 62 FC | 	wrlong	local14, fp
03c38     08 5E 85 F1 | 	sub	fp, #8
03c3c     02 00 00 FF 
03c40     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03c44     90 FF 9F CD |  if_b	jmp	#LR__0136
03c48                 | LR__0138
03c48                 | '     numberOfPatterns++
03c48     9B 0E 06 F1 | 	add	objptr, #155
03c4c     07 85 C2 FA | 	rdbyte	local14, objptr
03c50     07 71 C2 FA | 	rdbyte	local04, objptr
03c54     01 70 06 F1 | 	add	local04, #1
03c58     07 71 42 FC | 	wrbyte	local04, objptr
03c5c     07 87 C2 FA | 	rdbyte	local15, objptr
03c60     0A 86 66 F0 | 	shl	local15, #10
03c64     09 0E 86 F1 | 	sub	objptr, #9
03c68     07 89 02 FB | 	rdlong	local16, objptr
03c6c     43 89 02 F1 | 	add	local16, local15
03c70                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03c70     84 0E 86 F1 | 	sub	objptr, #132
03c74     07 89 62 FC | 	wrlong	local16, objptr
03c78     0E 0E 86 F1 | 	sub	objptr, #14
03c7c                 | ' 
03c7c                 | '   ' This must be an oldschool 15 sample soundtracker module
03c7c                 | '   else
03c7c     18 01 90 FD | 	jmp	#LR__0143
03c80                 | LR__0139
03c80     AF 8A 02 FB | 	rdlong	local17, fp
03c84     D6 8B 06 F1 | 	add	local17, #470
03c88                 | '     songLength          := byte[hubPtr + 470]
03c88     45 6D C2 FA | 	rdbyte	local02, local17
03c8c     9A 0E 06 F1 | 	add	objptr, #154
03c90     07 6D 42 FC | 	wrbyte	local02, objptr
03c94     AF 8C 02 FB | 	rdlong	local18, fp
03c98     D7 8D 06 F1 | 	add	local18, #471
03c9c                 | '     unknown1            := byte[hubPtr + 471]
03c9c     46 6D C2 FA | 	rdbyte	local02, local18
03ca0     02 0E 06 F1 | 	add	objptr, #2
03ca4     07 6D 42 FC | 	wrbyte	local02, objptr
03ca8     AF 8E 02 FB | 	rdlong	local19, fp
03cac     D8 8F 06 F1 | 	add	local19, #472
03cb0                 | '     songPositionsLut    :=      hubPtr + 472
03cb0     06 0E 86 F1 | 	sub	objptr, #6
03cb4     07 8F 62 FC | 	wrlong	local19, objptr
03cb8     AF 90 02 FB | 	rdlong	local20, fp
03cbc     01 00 00 FF 
03cc0     58 90 06 F1 | 	add	local20, ##600
03cc4                 | '     patternsData        :=      hubPtr + 600
03cc4     04 0E 86 F1 | 	sub	objptr, #4
03cc8     07 91 62 FC | 	wrlong	local20, objptr
03ccc                 | '     numberOfInstruments := 15
03ccc     14 0E 06 F1 | 	add	objptr, #20
03cd0     07 1F 48 FC | 	wrbyte	#15, objptr
03cd4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03cd4     0B 0E 86 F1 | 	sub	objptr, #11
03cd8     07 01 48 FC | 	wrbyte	#0, objptr
03cdc     9B 0E 86 F1 | 	sub	objptr, #155
03ce0                 | '     repeat i from 472 to 599
03ce0     08 5E 05 F1 | 	add	fp, #8
03ce4     AF B0 6B FC | 	wrlong	#472, fp
03ce8     08 5E 85 F1 | 	sub	fp, #8
03cec     80 C3 9F FE | 	loc	pa,	#(@LR__0142-@LR__0140)
03cf0     93 00 A0 FD | 	call	#FCACHE_LOAD_
03cf4                 | LR__0140
03cf4                 | '       if byte[hubPtr][i] > numberOfPatterns
03cf4     AF 7E 02 FB | 	rdlong	local11, fp
03cf8     08 5E 05 F1 | 	add	fp, #8
03cfc     AF 70 02 FB | 	rdlong	local04, fp
03d00     08 5E 85 F1 | 	sub	fp, #8
03d04     3F 71 02 F1 | 	add	local04, local11
03d08     38 75 C2 FA | 	rdbyte	local06, local04
03d0c     9B 0E 06 F1 | 	add	objptr, #155
03d10     07 81 C2 FA | 	rdbyte	local12, objptr
03d14     9B 0E 86 F1 | 	sub	objptr, #155
03d18     40 75 5A F2 | 	cmps	local06, local12 wcz
03d1c     24 00 90 ED |  if_be	jmp	#LR__0141
03d20     AF 7E 02 FB | 	rdlong	local11, fp
03d24     08 5E 05 F1 | 	add	fp, #8
03d28     AF 92 02 FB | 	rdlong	local21, fp
03d2c     08 5E 85 F1 | 	sub	fp, #8
03d30     3F 93 02 F1 | 	add	local21, local11
03d34                 | '         numberOfPatterns := byte[hubPtr][i]
03d34     49 85 C2 FA | 	rdbyte	local14, local21
03d38     9B 0E 06 F1 | 	add	objptr, #155
03d3c     07 85 42 FC | 	wrbyte	local14, objptr
03d40     9B 0E 86 F1 | 	sub	objptr, #155
03d44                 | LR__0141
03d44     08 5E 05 F1 | 	add	fp, #8
03d48     AF 84 02 FB | 	rdlong	local14, fp
03d4c     01 84 06 F1 | 	add	local14, #1
03d50     AF 84 62 FC | 	wrlong	local14, fp
03d54     08 5E 85 F1 | 	sub	fp, #8
03d58     01 00 00 FF 
03d5c     58 84 5E F2 | 	cmps	local14, ##600 wcz
03d60     90 FF 9F CD |  if_b	jmp	#LR__0140
03d64                 | LR__0142
03d64                 | '     numberOfPatterns++
03d64     9B 0E 06 F1 | 	add	objptr, #155
03d68     07 85 C2 FA | 	rdbyte	local14, objptr
03d6c     07 71 C2 FA | 	rdbyte	local04, objptr
03d70     01 70 06 F1 | 	add	local04, #1
03d74     07 71 42 FC | 	wrbyte	local04, objptr
03d78     07 95 C2 FA | 	rdbyte	local22, objptr
03d7c     0A 94 66 F0 | 	shl	local22, #10
03d80     09 0E 86 F1 | 	sub	objptr, #9
03d84     07 97 02 FB | 	rdlong	local23, objptr
03d88     4A 97 02 F1 | 	add	local23, local22
03d8c                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d8c     84 0E 86 F1 | 	sub	objptr, #132
03d90     07 97 62 FC | 	wrlong	local23, objptr
03d94     0E 0E 86 F1 | 	sub	objptr, #14
03d98                 | LR__0143
03d98                 | ' 
03d98                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03d98                 | '   tmpPtr := sampleDataPtr
03d98     0E 0E 06 F1 | 	add	objptr, #14
03d9c     07 6D 02 FB | 	rdlong	local02, objptr
03da0     0C 5E 05 F1 | 	add	fp, #12
03da4     AF 6C 62 FC | 	wrlong	local02, fp
03da8                 | '   repeat i from 1 to numberOfInstruments
03da8     04 5E 85 F1 | 	sub	fp, #4
03dac     AF 02 68 FC | 	wrlong	#1, fp
03db0     08 5E 85 F1 | 	sub	fp, #8
03db4     98 0E 06 F1 | 	add	objptr, #152
03db8     07 71 C2 FA | 	rdbyte	local04, objptr
03dbc     01 70 5E F2 | 	cmps	local04, #1 wcz
03dc0     01 84 06 16 |  if_a	mov	local14, #1
03dc4     01 84 66 E6 |  if_be	neg	local14, #1
03dc8     42 99 02 F6 | 	mov	local24, local14
03dcc     07 9B C2 FA | 	rdbyte	local25, objptr
03dd0     A6 0E 86 F1 | 	sub	objptr, #166
03dd4     4C 9B 02 F1 | 	add	local25, local24
03dd8                 | LR__0144
03dd8     08 5E 05 F1 | 	add	fp, #8
03ddc     AF 9C 02 FB | 	rdlong	local26, fp
03de0     01 9C 86 F1 | 	sub	local26, #1
03de4     02 9C 66 F0 | 	shl	local26, #2
03de8     12 0E 06 F1 | 	add	objptr, #18
03dec     07 9D 02 F1 | 	add	local26, objptr
03df0                 | '     samplesPtrLut[i-1] := tmpPtr
03df0     04 5E 05 F1 | 	add	fp, #4
03df4     AF 80 02 FB | 	rdlong	local12, fp
03df8     4E 81 62 FC | 	wrlong	local12, local26
03dfc     18 5E 05 F1 | 	add	fp, #24
03e00     AF 5E 02 F6 | 	mov	arg02, fp
03e04     14 5E 85 F1 | 	sub	fp, #20
03e08     AF 60 02 F6 | 	mov	arg03, fp
03e0c     04 5E 05 F1 | 	add	fp, #4
03e10     AF 62 02 F6 | 	mov	arg04, fp
03e14     04 5E 05 F1 | 	add	fp, #4
03e18     AF 64 02 F6 | 	mov	arg05, fp
03e1c     04 5E 05 F1 | 	add	fp, #4
03e20     AF 66 02 F6 | 	mov	arg06, fp
03e24     04 5E 05 F1 | 	add	fp, #4
03e28     AF 68 02 F6 | 	mov	arg07, fp
03e2c                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03e2c     18 5E 85 F1 | 	sub	fp, #24
03e30     AF 5C 02 FB | 	rdlong	arg01, fp
03e34     08 5E 85 F1 | 	sub	fp, #8
03e38     12 0E 86 F1 | 	sub	objptr, #18
03e3c     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03e40                 | '     tmpPtr += samLength
03e40     0C 5E 05 F1 | 	add	fp, #12
03e44     AF 80 02 FB | 	rdlong	local12, fp
03e48     04 5E 05 F1 | 	add	fp, #4
03e4c     AF 9E 02 FB | 	rdlong	local27, fp
03e50     4F 81 02 F1 | 	add	local12, local27
03e54     04 5E 85 F1 | 	sub	fp, #4
03e58     AF 80 62 FC | 	wrlong	local12, fp
03e5c     04 5E 85 F1 | 	sub	fp, #4
03e60     AF 80 02 FB | 	rdlong	local12, fp
03e64     4C 81 02 F1 | 	add	local12, local24
03e68     AF 80 62 FC | 	wrlong	local12, fp
03e6c     08 5E 85 F1 | 	sub	fp, #8
03e70     4D 81 0A F2 | 	cmp	local12, local25 wz
03e74     60 FF 9F 5D |  if_ne	jmp	#LR__0144
03e78                 | ' 
03e78                 | '   ' Below this point, all play routine variables are resest to their default values
03e78                 | '   tickCounter                 := 0
03e78     A1 0E 06 F1 | 	add	objptr, #161
03e7c     07 01 48 FC | 	wrbyte	#0, objptr
03e80                 | '   patternRow                  := 0
03e80     01 0E 06 F1 | 	add	objptr, #1
03e84     07 01 48 FC | 	wrbyte	#0, objptr
03e88                 | '   songPosition                := startPattern
03e88     04 5E 05 F1 | 	add	fp, #4
03e8c     AF 6C 02 FB | 	rdlong	local02, fp
03e90     04 5E 85 F1 | 	sub	fp, #4
03e94     01 0E 06 F1 | 	add	objptr, #1
03e98     07 6D 42 FC | 	wrbyte	local02, objptr
03e9c                 | '   currentSongSpeed            := 6
03e9c     01 0E 06 F1 | 	add	objptr, #1
03ea0     07 0D 48 FC | 	wrbyte	#6, objptr
03ea4                 | '   patternDelay                := 0
03ea4     01 0E 06 F1 | 	add	objptr, #1
03ea8     07 01 48 FC | 	wrbyte	#0, objptr
03eac                 | '   ticksPerMinute              := 50 * 60
03eac     02 0F 06 F1 | 	add	objptr, #258
03eb0     05 00 80 FF 
03eb4     07 71 6B FC | 	wrlong	##3000, objptr
03eb8     A7 0F 86 F1 | 	sub	objptr, #423
03ebc     07 0B 03 FB | 	rdlong	muldiva_, objptr
03ec0     32 0C 07 F6 | 	mov	muldivb_, #50
03ec4     D0 00 A0 FD | 	call	#divide_
03ec8                 | '   cyclesToWait                := systemClock / 50
03ec8     AB 0F 06 F1 | 	add	objptr, #427
03ecc     07 0D 63 FC | 	wrlong	muldivb_, objptr
03ed0                 | '   sampleNumber_memory         := 0
03ed0     35 0E 06 F1 | 	add	objptr, #53
03ed4     07 01 48 FC | 	wrbyte	#0, objptr
03ed8                 | '   lpFilter                    := 0
03ed8     25 0E 86 F1 | 	sub	objptr, #37
03edc     07 01 48 FC | 	wrbyte	#0, objptr
03ee0                 | '   cmdD_memoryX                := 0
03ee0     29 0E 06 F1 | 	add	objptr, #41
03ee4     07 01 48 FC | 	wrbyte	#0, objptr
03ee8                 | '   cmdD_memoryY                := 0
03ee8     01 0E 06 F1 | 	add	objptr, #1
03eec     07 01 48 FC | 	wrbyte	#0, objptr
03ef0                 | '   cmdD_updatePosition         := false
03ef0     01 0E 06 F1 | 	add	objptr, #1
03ef4     07 01 48 FC | 	wrbyte	#0, objptr
03ef8                 | '   cmdB_memoryZ                := 0
03ef8     01 0E 06 F1 | 	add	objptr, #1
03efc     07 01 48 FC | 	wrbyte	#0, objptr
03f00                 | '   cmdB_updatePosition         := false
03f00     01 0E 06 F1 | 	add	objptr, #1
03f04     07 01 48 FC | 	wrbyte	#0, objptr
03f08                 | '   cmdE6_updatePositionCommon  := false
03f08     0D 0E 06 F1 | 	add	objptr, #13
03f0c     07 01 48 FC | 	wrbyte	#0, objptr
03f10     F5 0F 86 F1 | 	sub	objptr, #501
03f14                 | ' 
03f14                 | '   repeat i from 0 to LAST_CHANNEL
03f14     08 5E 05 F1 | 	add	fp, #8
03f18     AF 00 68 FC | 	wrlong	#0, fp
03f1c     08 5E 85 F1 | 	sub	fp, #8
03f20                 | LR__0145
03f20     08 5E 05 F1 | 	add	fp, #8
03f24     AF A0 02 FB | 	rdlong	local28, fp
03f28     01 A0 66 F0 | 	shl	local28, #1
03f2c     D7 0E 06 F1 | 	add	objptr, #215
03f30     07 A1 02 F1 | 	add	local28, objptr
03f34                 | ' 
03f34                 | '     currRepeatPoint[i]        := 0
03f34     50 01 58 FC | 	wrword	#0, local28
03f38     AF A2 02 FB | 	rdlong	local29, fp
03f3c     01 A2 66 F0 | 	shl	local29, #1
03f40     1C 0E 86 F1 | 	sub	objptr, #28
03f44     07 A3 02 F1 | 	add	local29, objptr
03f48                 | '     currSampleLength[i]       := 4
03f48     51 09 58 FC | 	wrword	#4, local29
03f4c     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03f50     AF A6 02 FB | 	rdlong	local31, fp
03f54     02 A6 66 F0 | 	shl	local31, #2
03f58     14 0E 86 F1 | 	sub	objptr, #20
03f5c     07 A7 02 F1 | 	add	local31, objptr
03f60                 | '     currSamplePtr[i]          := @null
03f60     53 A5 62 FC | 	wrlong	local30, local31
03f64     AF A8 02 FB | 	rdlong	local32, fp
03f68     10 0E 06 F1 | 	add	objptr, #16
03f6c     07 A9 02 F1 | 	add	local32, objptr
03f70                 | '     currSampleNr[i]           := 0
03f70     54 01 48 FC | 	wrbyte	#0, local32
03f74     AF AA 02 FB | 	rdlong	local33, fp
03f78     02 AA 66 F0 | 	shl	local33, #2
03f7c     0C 0E 06 F1 | 	add	objptr, #12
03f80     07 AB 02 F1 | 	add	local33, objptr
03f84                 | '     currRepeatLength[i]       := 1
03f84     55 03 68 FC | 	wrlong	#1, local33
03f88     AF AC 02 FB | 	rdlong	local34, fp
03f8c     02 AC 66 F0 | 	shl	local34, #2
03f90     1C 0E 06 F1 | 	add	objptr, #28
03f94     07 AD 02 F1 | 	add	local34, objptr
03f98                 | '     currPeriod[i]             := 400
03f98     56 21 6B FC | 	wrlong	#400, local34
03f9c     AF AE 02 FB | 	rdlong	local35, fp
03fa0     02 AE 66 F0 | 	shl	local35, #2
03fa4     48 0E 06 F1 | 	add	objptr, #72
03fa8     07 AF 02 F1 | 	add	local35, objptr
03fac                 | '     lastSetPeriod[i]          := 400
03fac     57 21 6B FC | 	wrlong	#400, local35
03fb0     AF B0 02 FB | 	rdlong	local36, fp
03fb4     02 B0 66 F0 | 	shl	local36, #2
03fb8     10 0E 06 F1 | 	add	objptr, #16
03fbc     07 B1 02 F1 | 	add	local36, objptr
03fc0                 | '     lastSetSamplePtr[i]       := 0
03fc0     58 01 68 FC | 	wrlong	#0, local36
03fc4     AF B2 02 FB | 	rdlong	local37, fp
03fc8     02 B2 66 F0 | 	shl	local37, #2
03fcc     10 0E 06 F1 | 	add	objptr, #16
03fd0     07 B3 02 F1 | 	add	local37, objptr
03fd4                 | '     lastSetSampleNr[i]        := 0
03fd4     59 01 68 FC | 	wrlong	#0, local37
03fd8     AF B4 02 FB | 	rdlong	local38, fp
03fdc     02 B4 66 F0 | 	shl	local38, #2
03fe0     10 0E 06 F1 | 	add	objptr, #16
03fe4     07 B5 02 F1 | 	add	local38, objptr
03fe8                 | '     lastSetSampleLength[i]    := 0
03fe8     5A 01 68 FC | 	wrlong	#0, local38
03fec     AF B6 02 FB | 	rdlong	local39, fp
03ff0     02 B6 66 F0 | 	shl	local39, #2
03ff4     10 0E 06 F1 | 	add	objptr, #16
03ff8     07 B7 02 F1 | 	add	local39, objptr
03ffc                 | '     lastSetRepeatLength[i]    := 0
03ffc     5B 01 68 FC | 	wrlong	#0, local39
04000     AF B8 02 FB | 	rdlong	local40, fp
04004     02 B8 66 F0 | 	shl	local40, #2
04008     10 0E 06 F1 | 	add	objptr, #16
0400c     07 B9 02 F1 | 	add	local40, objptr
04010                 | '     lastSetRepeatPoint[i]     := 0
04010     5C 01 68 FC | 	wrlong	#0, local40
04014     AF BA 02 FB | 	rdlong	local41, fp
04018     02 BA 66 F0 | 	shl	local41, #2
0401c     78 0E 86 F1 | 	sub	objptr, #120
04020     07 BB 02 F1 | 	add	local41, objptr
04024                 | '     currVolume[i]             := 0
04024     5D 01 68 FC | 	wrlong	#0, local41
04028     AF BC 02 FB | 	rdlong	local42, fp
0402c     01 BC 66 F0 | 	shl	local42, #1
04030     20 0E 06 F1 | 	add	objptr, #32
04034     07 BD 02 F1 | 	add	local42, objptr
04038                 | '     currPanning[i]            := 0
04038     5E 01 58 FC | 	wrword	#0, local42
0403c     AF BE 02 FB | 	rdlong	local43, fp
04040     A9 0E 06 F1 | 	add	objptr, #169
04044     07 BF 02 F1 | 	add	local43, objptr
04048                 | '     cmd3_memoryZ[i]           := 0
04048     5F 01 48 FC | 	wrbyte	#0, local43
0404c     AF C0 02 FB | 	rdlong	local44, fp
04050     04 0E 06 F1 | 	add	objptr, #4
04054     07 C1 02 F1 | 	add	local44, objptr
04058                 | '     cmd4_memoryY[i]           := 0
04058     60 01 48 FC | 	wrbyte	#0, local44
0405c     AF C2 02 FB | 	rdlong	local45, fp
04060     04 0E 06 F1 | 	add	objptr, #4
04064     07 C3 02 F1 | 	add	local45, objptr
04068                 | '     cmd4_memoryX[i]           := 0
04068     61 01 48 FC | 	wrbyte	#0, local45
0406c     AF C4 02 FB | 	rdlong	local46, fp
04070     04 0E 06 F1 | 	add	objptr, #4
04074     07 C5 02 F1 | 	add	local46, objptr
04078                 | '     cmd7_memoryY[i]           := 0
04078     62 01 48 FC | 	wrbyte	#0, local46
0407c     AF C6 02 FB | 	rdlong	local47, fp
04080     04 0E 06 F1 | 	add	objptr, #4
04084     07 C7 02 F1 | 	add	local47, objptr
04088                 | '     cmd7_memoryX[i]           := 0
04088     63 01 48 FC | 	wrbyte	#0, local47
0408c     AF C8 02 FB | 	rdlong	local48, fp
04090     04 0E 06 F1 | 	add	objptr, #4
04094     07 C9 02 F1 | 	add	local48, objptr
04098                 | '     cmd9_memoryZ[i]           := 0
04098     64 01 48 FC | 	wrbyte	#0, local48
0409c     AF CA 02 FB | 	rdlong	local49, fp
040a0     0D 0E 06 F1 | 	add	objptr, #13
040a4     07 CB 02 F1 | 	add	local49, objptr
040a8                 | '     cmdE6_memory[i]           := 0
040a8     65 01 48 FC | 	wrbyte	#0, local49
040ac     AF CC 02 FB | 	rdlong	local50, fp
040b0     04 0E 06 F1 | 	add	objptr, #4
040b4     07 CD 02 F1 | 	add	local50, objptr
040b8                 | '     cmdE6_counter[i]          := 0
040b8     66 01 48 FC | 	wrbyte	#0, local50
040bc     AF CE 02 FB | 	rdlong	local51, fp
040c0     04 0E 06 F1 | 	add	objptr, #4
040c4     07 CF 02 F1 | 	add	local51, objptr
040c8                 | '     cmdE6_updatePosition[i]   := false
040c8     67 01 48 FC | 	wrbyte	#0, local51
040cc     AF D0 02 FB | 	rdlong	local52, fp
040d0     11 0E 86 F1 | 	sub	objptr, #17
040d4     07 D1 02 F1 | 	add	local52, objptr
040d8                 | '     sampleNumber_memory[i]    := 0
040d8     68 01 48 FC | 	wrbyte	#0, local52
040dc     AF D2 02 FB | 	rdlong	local53, fp
040e0     59 0E 86 F1 | 	sub	objptr, #89
040e4     07 D3 02 F1 | 	add	local53, objptr
040e8                 | '     vibratoPos[i]             := 0
040e8     69 01 48 FC | 	wrbyte	#0, local53
040ec     AF D4 02 FB | 	rdlong	local54, fp
040f0     02 D4 66 F0 | 	shl	local54, #2
040f4     10 0E 06 F1 | 	add	objptr, #16
040f8     07 D5 02 F1 | 	add	local54, objptr
040fc                 | '     portamentoPeriodMemory[i] := 0
040fc     6A 01 68 FC | 	wrlong	#0, local54
04100     AF D6 02 FB | 	rdlong	local55, fp
04104     25 0E 06 F1 | 	add	objptr, #37
04108     07 D7 02 F1 | 	add	local55, objptr
0410c                 | '     portaGlissando[i]         := 0
0410c     6B 01 48 FC | 	wrbyte	#0, local55
04110     AF D8 02 FB | 	rdlong	local56, fp
04114     04 0E 06 F1 | 	add	objptr, #4
04118     07 D9 02 F1 | 	add	local56, objptr
0411c                 | '     vibratoType[i]            := 0
0411c     6C 01 48 FC | 	wrbyte	#0, local56
04120     AF DA 02 FB | 	rdlong	local57, fp
04124     04 0E 06 F1 | 	add	objptr, #4
04128     07 DB 02 F1 | 	add	local57, objptr
0412c                 | '     tremoloType[i]            := 0
0412c     6D 01 48 FC | 	wrbyte	#0, local57
04130     AF DC 02 FB | 	rdlong	local58, fp
04134     39 0E 86 F1 | 	sub	objptr, #57
04138     07 DD 02 F1 | 	add	local58, objptr
0413c                 | '     tremoloPos[i]             := 0
0413c     6E 01 48 FC | 	wrbyte	#0, local58
04140     AF DE 02 FB | 	rdlong	local59, fp
04144     02 DE 66 F0 | 	shl	local59, #2
04148     7C 0E 86 F1 | 	sub	objptr, #124
0414c     07 DF 02 F1 | 	add	local59, objptr
04150                 | '     deltaVolume[i]            := 0
04150     6F 01 68 FC | 	wrlong	#0, local59
04154     AF E0 02 FB | 	rdlong	local60, fp
04158     02 E0 66 F0 | 	shl	local60, #2
0415c     20 0E 86 F1 | 	sub	objptr, #32
04160     07 E1 02 F1 | 	add	local60, objptr
04164                 | '     deltaPeriod[i]            := 0
04164     70 01 68 FC | 	wrlong	#0, local60
04168     AF E2 02 FB | 	rdlong	local61, fp
0416c     A0 0E 06 F1 | 	add	objptr, #160
04170     07 E3 02 F1 | 	add	local61, objptr
04174                 | '     resetTremolo[i]           := 0
04174     71 01 48 FC | 	wrbyte	#0, local61
04178     AF E4 02 FB | 	rdlong	local62, fp
0417c     04 0E 06 F1 | 	add	objptr, #4
04180     07 E5 02 F1 | 	add	local62, objptr
04184                 | '     resetVibrato[i]           := 0
04184     72 01 48 FC | 	wrbyte	#0, local62
04188     AF 84 02 FB | 	rdlong	local14, fp
0418c     01 84 06 F1 | 	add	local14, #1
04190     AF 84 62 FC | 	wrlong	local14, fp
04194     08 5E 85 F1 | 	sub	fp, #8
04198     04 84 5E F2 | 	cmps	local14, #4 wcz
0419c     93 0F 86 F1 | 	sub	objptr, #403
041a0     7C FD 9F CD |  if_b	jmp	#LR__0145
041a4     AF F0 03 F6 | 	mov	ptra, fp
041a8     BF 00 A0 FD | 	call	#popregs_
041ac                 | _trackerplayer_spin2_initModule_ret
041ac     2D 00 64 FD | 	ret
041b0                 | 
041b0                 | ' 
041b0                 | ' 
041b0                 | ' ' This routine needs to be ticked X number of times per second
041b0                 | ' ' in order to advance the tracker play routine
041b0                 | ' '
041b0                 | ' PUB tick() | channel, sampleNumber, period, effect, i
041b0                 | _trackerplayer_spin2_tick
041b0     12 5A 05 F6 | 	mov	COUNT_, #18
041b4     B0 00 A0 FD | 	call	#pushregs_
041b8     30 F0 07 F1 | 	add	ptra, #48
041bc                 | ' 
041bc                 | '   if currentSongSpeed == 0
041bc     A4 0E 06 F1 | 	add	objptr, #164
041c0     07 6B CA FA | 	rdbyte	local01, objptr wz
041c4     A4 0E 86 F1 | 	sub	objptr, #164
041c8                 | '     return
041c8     34 03 90 AD |  if_e	jmp	#LR__0157
041cc                 | ' 
041cc                 | '   ' Iterate over the channels and process everything
041cc                 | '   repeat channel from 0 to LAST_CHANNEL
041cc     AF 00 68 FC | 	wrlong	#0, fp
041d0                 | LR__0146
041d0     04 5E 05 F1 | 	add	fp, #4
041d4     AF 62 02 F6 | 	mov	arg04, fp
041d8     04 5E 05 F1 | 	add	fp, #4
041dc     AF 64 02 F6 | 	mov	arg05, fp
041e0     04 5E 05 F1 | 	add	fp, #4
041e4     AF 66 02 F6 | 	mov	arg06, fp
041e8     0C 5E 85 F1 | 	sub	fp, #12
041ec                 | ' 
041ec                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
041ec     AF 5C 02 FB | 	rdlong	arg01, fp
041f0     A3 0E 06 F1 | 	add	objptr, #163
041f4     07 5F C2 FA | 	rdbyte	arg02, objptr
041f8     01 0E 86 F1 | 	sub	objptr, #1
041fc     07 61 C2 FA | 	rdbyte	arg03, objptr
04200     7F 5E 06 F5 | 	and	arg02, #127
04204     0C 0E 86 F1 | 	sub	objptr, #12
04208     07 6D 02 FB | 	rdlong	local02, objptr
0420c     36 5F 02 F1 | 	add	arg02, local02
04210                 | ' 
04210                 | '   ' Get the note data for a specific channel/song position/pattern row
04210                 | '   patternNumber := byte[songPositionsLut][position & 127]
04210     2F 6F C2 FA | 	rdbyte	local03, arg02
04214     0A 6E 66 F0 | 	shl	local03, #10
04218     04 0E 86 F1 | 	sub	objptr, #4
0421c     07 71 02 FB | 	rdlong	local04, objptr
04220     92 0E 86 F1 | 	sub	objptr, #146
04224     37 71 02 F1 | 	add	local04, local03
04228                 | '   patternPtr    := patternsData + (patternNumber << 10)
04228     3F 60 06 F5 | 	and	arg03, #63
0422c     04 60 66 F0 | 	shl	arg03, #4
04230     30 71 02 F1 | 	add	local04, arg03
04234     03 5C 06 F5 | 	and	arg01, #3
04238     02 5C 66 F0 | 	shl	arg01, #2
0423c     2E 71 02 F1 | 	add	local04, arg01
04240                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04240     38 73 C2 FA | 	rdbyte	local05, local04
04244     18 72 66 F0 | 	shl	local05, #24
04248     01 70 06 F1 | 	add	local04, #1
0424c     38 75 C2 FA | 	rdbyte	local06, local04
04250     10 74 66 F0 | 	shl	local06, #16
04254     3A 73 42 F5 | 	or	local05, local06
04258     01 70 06 F1 | 	add	local04, #1
0425c     38 77 C2 FA | 	rdbyte	local07, local04
04260     08 76 66 F0 | 	shl	local07, #8
04264     3B 73 42 F5 | 	or	local05, local07
04268     01 70 06 F1 | 	add	local04, #1
0426c     38 79 C2 FA | 	rdbyte	local08, local04
04270     3C 73 42 F5 | 	or	local05, local08
04274                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04274     39 7B 02 F6 | 	mov	local09, local05
04278     0C 7A 46 F0 | 	shr	local09, #12
0427c     0F 7A 06 F5 | 	and	local09, #15
04280     39 7D 02 F6 | 	mov	local10, local05
04284     18 7C 46 F0 | 	shr	local10, #24
04288     F0 7C 06 F5 | 	and	local10, #240
0428c     3E 7B 42 F5 | 	or	local09, local10
04290                 | ' 
04290                 | '   ' Extract the different sub parts from the data
04290                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04290     31 7B 62 FC | 	wrlong	local09, arg04
04294     39 7F 02 F6 | 	mov	local11, local05
04298     10 7E 46 F0 | 	shr	local11, #16
0429c     07 00 00 FF 
042a0     FF 7F 06 F5 | 	and	local11, ##4095
042a4                 | '   long[period]       :=  (data >> 16) & $FFF
042a4     32 7F 62 FC | 	wrlong	local11, arg05
042a8     07 00 00 FF 
042ac     FF 73 06 F5 | 	and	local05, ##4095
042b0                 | '   long[effect]       :=   data & $FFF
042b0     33 73 62 FC | 	wrlong	local05, arg06
042b4                 | '     processChannel(channel, sampleNumber, period, effect)
042b4     AF 5C 02 FB | 	rdlong	arg01, fp
042b8     04 5E 05 F1 | 	add	fp, #4
042bc     AF 5E 02 FB | 	rdlong	arg02, fp
042c0     04 5E 05 F1 | 	add	fp, #4
042c4     AF 60 02 FB | 	rdlong	arg03, fp
042c8     04 5E 05 F1 | 	add	fp, #4
042cc     AF 62 02 FB | 	rdlong	arg04, fp
042d0     0C 5E 85 F1 | 	sub	fp, #12
042d4     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
042d8     AF 80 02 FB | 	rdlong	local12, fp
042dc     01 80 06 F1 | 	add	local12, #1
042e0     AF 80 62 FC | 	wrlong	local12, fp
042e4     04 80 5E F2 | 	cmps	local12, #4 wcz
042e8     E4 FE 9F CD |  if_b	jmp	#LR__0146
042ec                 | ' 
042ec                 | '   ' Incrementation the main counter that drives the whole play routine
042ec                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
042ec     A1 0E 06 F1 | 	add	objptr, #161
042f0     07 6B C2 FA | 	rdbyte	local01, objptr
042f4     01 6A 06 F1 | 	add	local01, #1
042f8     07 6B 42 FC | 	wrbyte	local01, objptr
042fc     03 0E 06 F1 | 	add	objptr, #3
04300     07 83 C2 FA | 	rdbyte	local13, objptr
04304     01 0E 06 F1 | 	add	objptr, #1
04308     07 85 C2 FA | 	rdbyte	local14, objptr
0430c     42 83 02 F1 | 	add	local13, local14
04310     04 0E 86 F1 | 	sub	objptr, #4
04314     07 87 C2 FA | 	rdbyte	local15, objptr
04318     A1 0E 86 F1 | 	sub	objptr, #161
0431c     41 87 5A F2 | 	cmps	local15, local13 wcz
04320                 | '     tickCounter := 0
04320     A1 0E 06 31 |  if_ae	add	objptr, #161
04324     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04328     A1 0E 86 31 |  if_ae	sub	objptr, #161
0432c                 | ' 
0432c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0432c                 | '   if tickCounter == 0
0432c     A1 0E 06 F1 | 	add	objptr, #161
04330     07 6B CA FA | 	rdbyte	local01, objptr wz
04334     A1 0E 86 F1 | 	sub	objptr, #161
04338     C4 01 90 5D |  if_ne	jmp	#LR__0156
0433c                 | ' 
0433c                 | '     ' Handle the "pattern repeat" command, "E6"
0433c                 | '     if cmdE6_updatePositionCommon
0433c     F5 0F 06 F1 | 	add	objptr, #501
04340     07 6B CA FA | 	rdbyte	local01, objptr wz
04344     F5 0F 86 F1 | 	sub	objptr, #501
04348     8C 00 90 AD |  if_e	jmp	#LR__0150
0434c                 | '       repeat i from 0 to LAST_CHANNEL
0434c     10 5E 05 F1 | 	add	fp, #16
04350     AF 00 68 FC | 	wrlong	#0, fp
04354     10 5E 85 F1 | 	sub	fp, #16
04358     18 BD 9F FE | 	loc	pa,	#(@LR__0149-@LR__0147)
0435c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04360                 | LR__0147
04360                 | '         if cmdE6_updatePosition[i]
04360     10 5E 05 F1 | 	add	fp, #16
04364     AF 80 02 FB | 	rdlong	local12, fp
04368     10 5E 85 F1 | 	sub	fp, #16
0436c     F1 0F 06 F1 | 	add	objptr, #497
04370     07 81 02 F1 | 	add	local12, objptr
04374     40 85 CA FA | 	rdbyte	local14, local12 wz
04378     F1 0F 86 F1 | 	sub	objptr, #497
0437c     24 00 90 AD |  if_e	jmp	#LR__0148
04380     10 5E 05 F1 | 	add	fp, #16
04384     AF 88 02 FB | 	rdlong	local16, fp
04388     10 5E 85 F1 | 	sub	fp, #16
0438c     E9 0F 06 F1 | 	add	objptr, #489
04390     07 89 02 F1 | 	add	local16, objptr
04394                 | '           patternRow := cmdE6_memory[i]
04394     44 81 C2 FA | 	rdbyte	local12, local16
04398     47 0F 86 F1 | 	sub	objptr, #327
0439c     07 81 42 FC | 	wrbyte	local12, objptr
043a0     A2 0E 86 F1 | 	sub	objptr, #162
043a4                 | LR__0148
043a4     10 5E 05 F1 | 	add	fp, #16
043a8     AF 8A 02 FB | 	rdlong	local17, fp
043ac     F1 0F 06 F1 | 	add	objptr, #497
043b0     07 8B 02 F1 | 	add	local17, objptr
043b4                 | '         cmdE6_updatePosition[i] := false
043b4     45 01 48 FC | 	wrbyte	#0, local17
043b8     AF 80 02 FB | 	rdlong	local12, fp
043bc     01 80 06 F1 | 	add	local12, #1
043c0     AF 80 62 FC | 	wrlong	local12, fp
043c4     10 5E 85 F1 | 	sub	fp, #16
043c8     04 80 5E F2 | 	cmps	local12, #4 wcz
043cc     F1 0F 86 F1 | 	sub	objptr, #497
043d0     8C FF 9F CD |  if_b	jmp	#LR__0147
043d4                 | LR__0149
043d4     CC 00 90 FD | 	jmp	#LR__0154
043d8                 | LR__0150
043d8                 | ' 
043d8                 | '     ' Handle the "skip to next pattern with offset command", "D"
043d8                 | '     elseif cmdD_updatePosition
043d8     E6 0F 06 F1 | 	add	objptr, #486
043dc     07 6B CA FA | 	rdbyte	local01, objptr wz
043e0     E6 0F 86 F1 | 	sub	objptr, #486
043e4     64 00 90 AD |  if_e	jmp	#LR__0151
043e8                 | '       if ++songPosition >= songLength
043e8     A3 0E 06 F1 | 	add	objptr, #163
043ec     07 6B C2 FA | 	rdbyte	local01, objptr
043f0     01 6A 06 F1 | 	add	local01, #1
043f4     07 6B 42 FC | 	wrbyte	local01, objptr
043f8     07 83 C2 FA | 	rdbyte	local13, objptr
043fc     09 0E 86 F1 | 	sub	objptr, #9
04400     07 85 C2 FA | 	rdbyte	local14, objptr
04404     9A 0E 86 F1 | 	sub	objptr, #154
04408     42 83 5A F2 | 	cmps	local13, local14 wcz
0440c                 | '         songPosition := 0
0440c     A3 0E 06 31 |  if_ae	add	objptr, #163
04410     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04414     A3 0E 86 31 |  if_ae	sub	objptr, #163
04418     E4 0F 06 F1 | 	add	objptr, #484
0441c     07 81 C2 FA | 	rdbyte	local12, objptr
04420     40 8D 02 F6 | 	mov	local18, local12
04424     02 8C 66 F0 | 	shl	local18, #2
04428     40 8D 02 F1 | 	add	local18, local12
0442c     01 8C 66 F0 | 	shl	local18, #1
04430     01 0E 06 F1 | 	add	objptr, #1
04434     07 81 C2 FA | 	rdbyte	local12, objptr
04438     40 8D 02 F1 | 	add	local18, local12
0443c                 | ' 
0443c                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
0443c     43 0F 86 F1 | 	sub	objptr, #323
04440     07 8D 42 FC | 	wrbyte	local18, objptr
04444     A2 0E 86 F1 | 	sub	objptr, #162
04448                 | ' 
04448                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04448                 | '     else
04448     58 00 90 FD | 	jmp	#LR__0153
0444c                 | LR__0151
0444c                 | '       if ++patternRow >= PATTERN_LENGTH
0444c     A2 0E 06 F1 | 	add	objptr, #162
04450     07 6B C2 FA | 	rdbyte	local01, objptr
04454     01 6A 06 F1 | 	add	local01, #1
04458     07 6B 42 FC | 	wrbyte	local01, objptr
0445c     07 83 C2 FA | 	rdbyte	local13, objptr
04460     A2 0E 86 F1 | 	sub	objptr, #162
04464     40 82 5E F2 | 	cmps	local13, #64 wcz
04468     38 00 90 CD |  if_b	jmp	#LR__0152
0446c                 | '         patternRow := 0
0446c     A2 0E 06 F1 | 	add	objptr, #162
04470     07 01 48 FC | 	wrbyte	#0, objptr
04474                 | ' 
04474                 | '         if ++songPosition >= songLength
04474     01 0E 06 F1 | 	add	objptr, #1
04478     07 6B C2 FA | 	rdbyte	local01, objptr
0447c     01 6A 06 F1 | 	add	local01, #1
04480     07 6B 42 FC | 	wrbyte	local01, objptr
04484     07 83 C2 FA | 	rdbyte	local13, objptr
04488     09 0E 86 F1 | 	sub	objptr, #9
0448c     07 85 C2 FA | 	rdbyte	local14, objptr
04490     9A 0E 86 F1 | 	sub	objptr, #154
04494     42 83 5A F2 | 	cmps	local13, local14 wcz
04498                 | '           songPosition := 0
04498     A3 0E 06 31 |  if_ae	add	objptr, #163
0449c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
044a0     A3 0E 86 31 |  if_ae	sub	objptr, #163
044a4                 | LR__0152
044a4                 | LR__0153
044a4                 | LR__0154
044a4                 | ' 
044a4                 | '     ' Handle "jump to song position" command, "B"
044a4                 | '     if cmdB_updatePosition
044a4     E8 0F 06 F1 | 	add	objptr, #488
044a8     07 6B CA FA | 	rdbyte	local01, objptr wz
044ac     E8 0F 86 F1 | 	sub	objptr, #488
044b0     28 00 90 AD |  if_e	jmp	#LR__0155
044b4                 | ' 
044b4                 | '       songPosition := cmdB_memoryZ
044b4     E7 0F 06 F1 | 	add	objptr, #487
044b8     07 6B C2 FA | 	rdbyte	local01, objptr
044bc     44 0F 86 F1 | 	sub	objptr, #324
044c0     07 6B 42 FC | 	wrbyte	local01, objptr
044c4                 | ' 
044c4                 | '       ifnot cmdD_updatePosition
044c4     43 0F 06 F1 | 	add	objptr, #323
044c8     07 6B CA FA | 	rdbyte	local01, objptr wz
044cc     E6 0F 86 F1 | 	sub	objptr, #486
044d0                 | '         patternRow := 0
044d0     A2 0E 06 A1 |  if_e	add	objptr, #162
044d4     07 01 48 AC |  if_e	wrbyte	#0, objptr
044d8     A2 0E 86 A1 |  if_e	sub	objptr, #162
044dc                 | LR__0155
044dc                 | ' 
044dc                 | '     ' We need to be sure that all positioning commands are reset for the next tick
044dc                 | '     cmdE6_updatePositionCommon := false
044dc     F5 0F 06 F1 | 	add	objptr, #501
044e0     07 01 48 FC | 	wrbyte	#0, objptr
044e4                 | '     cmdB_updatePosition := false
044e4     0D 0E 86 F1 | 	sub	objptr, #13
044e8     07 01 48 FC | 	wrbyte	#0, objptr
044ec                 | '     cmdD_updatePosition := false
044ec     02 0E 86 F1 | 	sub	objptr, #2
044f0     07 01 48 FC | 	wrbyte	#0, objptr
044f4                 | '     patternDelay := 0
044f4     41 0F 86 F1 | 	sub	objptr, #321
044f8     07 01 48 FC | 	wrbyte	#0, objptr
044fc     A5 0E 86 F1 | 	sub	objptr, #165
04500                 | LR__0156
04500                 | LR__0157
04500     AF F0 03 F6 | 	mov	ptra, fp
04504     BF 00 A0 FD | 	call	#popregs_
04508                 | _trackerplayer_spin2_tick_ret
04508     2D 00 64 FD | 	ret
0450c                 | 
0450c                 | ' 
0450c                 | ' 
0450c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0450c                 | _trackerplayer_spin2_amigaPeriodToNote
0450c                 | ' 
0450c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0450c     00 30 06 F6 | 	mov	_var01, #0
04510     38 BB 9F FE | 	loc	pa,	#(@LR__0159-@LR__0158)
04514     93 00 A0 FD | 	call	#FCACHE_LOAD_
04518                 | LR__0158
04518                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04518     06 00 00 FF 
0451c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04520     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04524     2F 35 02 F6 | 	mov	_var03, arg02
04528     03 34 66 F0 | 	shl	_var03, #3
0452c     2F 35 02 F1 | 	add	_var03, arg02
04530     03 34 66 F0 | 	shl	_var03, #3
04534     1A 33 02 F1 | 	add	_var02, _var03
04538     18 37 02 F6 | 	mov	_var04, _var01
0453c     01 36 66 F0 | 	shl	_var04, #1
04540     19 37 02 F1 | 	add	_var04, _var02
04544     1B 39 E2 FA | 	rdword	_var05, _var04
04548     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
0454c                 | '       quit
0454c     06 00 00 FF 
04550     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04554     0C 00 90 ED |  if_be	jmp	#LR__0160
04558     01 30 06 F1 | 	add	_var01, #1
0455c     24 30 5E F2 | 	cmps	_var01, #36 wcz
04560     B4 FF 9F CD |  if_b	jmp	#LR__0158
04564                 | LR__0159
04564                 | LR__0160
04564                 | ' 
04564                 | '   return i
04564     18 2B 02 F6 | 	mov	result1, _var01
04568                 | _trackerplayer_spin2_amigaPeriodToNote_ret
04568     2D 00 64 FD | 	ret
0456c                 | 
0456c                 | ' 
0456c                 | ' 
0456c                 | ' PRI retunePeriod(period, fTune) | noteNumber
0456c                 | _trackerplayer_spin2_retunePeriod
0456c     06 5A 05 F6 | 	mov	COUNT_, #6
04570     B0 00 A0 FD | 	call	#pushregs_
04574     2E 6B 02 F6 | 	mov	local01, arg01
04578     2F 6D 02 F6 | 	mov	local02, arg02
0457c                 | ' 
0457c                 | '   if period > 0 and fTune < 16
0457c     00 6A 5E F2 | 	cmps	local01, #0 wcz
04580     50 00 90 ED |  if_be	jmp	#LR__0161
04584     10 6C 5E F2 | 	cmps	local02, #16 wcz
04588     48 00 90 3D |  if_ae	jmp	#LR__0161
0458c                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
0458c     35 5D E2 FA | 	rdword	arg01, local01
04590     00 5E 06 F6 | 	mov	arg02, #0
04594     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
04598     15 6F 02 F6 | 	mov	local03, result1
0459c     06 00 00 FF 
045a0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
045a4     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
045a8     36 73 02 F6 | 	mov	local05, local02
045ac     03 72 66 F0 | 	shl	local05, #3
045b0     36 73 02 F1 | 	add	local05, local02
045b4     03 72 66 F0 | 	shl	local05, #3
045b8     39 71 02 F1 | 	add	local04, local05
045bc     01 6E 66 F0 | 	shl	local03, #1
045c0     38 6F 02 F1 | 	add	local03, local04
045c4                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
045c4     37 75 E2 FA | 	rdword	local06, local03
045c8     35 75 52 FC | 	wrword	local06, local01
045cc     06 00 00 FF 
045d0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
045d4                 | LR__0161
045d4     AF F0 03 F6 | 	mov	ptra, fp
045d8     BF 00 A0 FD | 	call	#popregs_
045dc                 | _trackerplayer_spin2_retunePeriod_ret
045dc     2D 00 64 FD | 	ret
045e0                 | 
045e0                 | ' 
045e0                 | ' 
045e0                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
045e0                 | _trackerplayer_spin2_getSampleInfo
045e0     2E 31 0A F6 | 	mov	_var01, arg01 wz
045e4                 | ' 
045e4                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
045e4     08 00 90 AD |  if_e	jmp	#LR__0162
045e8     1F 30 5E F2 | 	cmps	_var01, #31 wcz
045ec     08 00 90 ED |  if_be	jmp	#LR__0163
045f0                 | LR__0162
045f0                 | '     long[samplePtr] := 0
045f0     2F 01 68 FC | 	wrlong	#0, arg02
045f4                 | '     return
045f4     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
045f8                 | LR__0163
045f8                 | ' 
045f8                 | '   sampleNumber--
045f8     01 30 86 F1 | 	sub	_var01, #1
045fc     18 33 02 F6 | 	mov	_var02, _var01
04600     04 32 66 F0 | 	shl	_var02, #4
04604     18 33 82 F1 | 	sub	_var02, _var01
04608     01 32 66 F0 | 	shl	_var02, #1
0460c     0A 0E 06 F1 | 	add	objptr, #10
04610     07 35 02 FB | 	rdlong	_var03, objptr
04614     19 35 02 F1 | 	add	_var03, _var02
04618                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04618     1A 37 02 F6 | 	mov	_var04, _var03
0461c     16 36 06 F1 | 	add	_var04, #22
04620     1B 39 C2 FA | 	rdbyte	_var05, _var04
04624     08 38 66 F0 | 	shl	_var05, #8
04628     1A 3B 02 F6 | 	mov	_var06, _var03
0462c     17 3A 06 F1 | 	add	_var06, #23
04630     1D 3D C2 FA | 	rdbyte	_var07, _var06
04634     1E 39 42 F5 | 	or	_var05, _var07
04638     01 38 66 F0 | 	shl	_var05, #1
0463c                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
0463c     30 39 62 FC | 	wrlong	_var05, arg03
04640     1A 3F 02 F6 | 	mov	_var08, _var03
04644     18 3E 06 F1 | 	add	_var08, #24
04648                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04648     1F 41 C2 FA | 	rdbyte	_var09, _var08
0464c     31 41 62 FC | 	wrlong	_var09, arg04
04650     1A 43 02 F6 | 	mov	_var10, _var03
04654     19 42 06 F1 | 	add	_var10, #25
04658                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04658     21 41 C2 FA | 	rdbyte	_var09, _var10
0465c     32 41 62 FC | 	wrlong	_var09, arg05
04660     1A 45 02 F6 | 	mov	_var11, _var03
04664     1A 44 06 F1 | 	add	_var11, #26
04668     22 47 C2 FA | 	rdbyte	_var12, _var11
0466c     08 46 66 F0 | 	shl	_var12, #8
04670     1A 49 02 F6 | 	mov	_var13, _var03
04674     1B 48 06 F1 | 	add	_var13, #27
04678     24 3D C2 FA | 	rdbyte	_var07, _var13
0467c     1E 47 42 F5 | 	or	_var12, _var07
04680     01 46 66 F0 | 	shl	_var12, #1
04684                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04684     33 47 62 FC | 	wrlong	_var12, arg06
04688     1A 4B 02 F6 | 	mov	_var14, _var03
0468c     1C 4A 06 F1 | 	add	_var14, #28
04690     25 4D C2 FA | 	rdbyte	_var15, _var14
04694     08 4C 66 F0 | 	shl	_var15, #8
04698     1D 34 06 F1 | 	add	_var03, #29
0469c     1A 3D C2 FA | 	rdbyte	_var07, _var03
046a0     1E 4D 42 F5 | 	or	_var15, _var07
046a4     01 4C 66 F0 | 	shl	_var15, #1
046a8                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
046a8     34 4D 62 FC | 	wrlong	_var15, arg07
046ac     02 30 66 F0 | 	shl	_var01, #2
046b0     08 0E 06 F1 | 	add	objptr, #8
046b4     07 31 02 F1 | 	add	_var01, objptr
046b8                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
046b8     18 41 02 FB | 	rdlong	_var09, _var01
046bc     2F 41 62 FC | 	wrlong	_var09, arg02
046c0                 | ' 
046c0                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
046c0     34 41 02 FB | 	rdlong	_var09, arg07
046c4     02 40 0E F2 | 	cmp	_var09, #2 wz
046c8     12 0E 86 F1 | 	sub	objptr, #18
046cc     08 00 90 5D |  if_ne	jmp	#LR__0164
046d0     33 3D 0A FB | 	rdlong	_var07, arg06 wz
046d4                 | '     long[repeatLength] := 1
046d4     34 03 68 AC |  if_e	wrlong	#1, arg07
046d8                 | LR__0164
046d8                 | _trackerplayer_spin2_getSampleInfo_ret
046d8     2D 00 64 FD | 	ret
046dc                 | 
046dc                 | ' 
046dc                 | ' 
046dc                 | ' PRI triggerNote(channel)
046dc                 | _trackerplayer_spin2_triggerNote
046dc     2E 31 02 F6 | 	mov	_var01, arg01
046e0     02 30 66 F0 | 	shl	_var01, #2
046e4     47 0F 06 F1 | 	add	objptr, #327
046e8     07 31 02 F1 | 	add	_var01, objptr
046ec     2E 33 02 F6 | 	mov	_var02, arg01
046f0     90 0E 86 F1 | 	sub	objptr, #144
046f4                 | ' 
046f4                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
046f4     18 35 02 FB | 	rdlong	_var03, _var01
046f8     07 33 02 F1 | 	add	_var02, objptr
046fc     19 35 42 FC | 	wrbyte	_var03, _var02
04700     2E 37 02 F6 | 	mov	_var04, arg01
04704     02 36 66 F0 | 	shl	_var04, #2
04708     80 0E 06 F1 | 	add	objptr, #128
0470c     07 37 02 F1 | 	add	_var04, objptr
04710     2E 39 02 F6 | 	mov	_var05, arg01
04714     02 38 66 F0 | 	shl	_var05, #2
04718     90 0E 86 F1 | 	sub	objptr, #144
0471c                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
0471c     1B 35 02 FB | 	rdlong	_var03, _var04
04720     07 39 02 F1 | 	add	_var05, objptr
04724     1C 35 62 FC | 	wrlong	_var03, _var05
04728     2E 3B 02 F6 | 	mov	_var06, arg01
0472c     02 3A 66 F0 | 	shl	_var06, #2
04730     80 0E 06 F1 | 	add	objptr, #128
04734     07 3B 02 F1 | 	add	_var06, objptr
04738     2E 3D 02 F6 | 	mov	_var07, arg01
0473c     02 3C 66 F0 | 	shl	_var07, #2
04740     48 0E 86 F1 | 	sub	objptr, #72
04744                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04744     1D 35 02 FB | 	rdlong	_var03, _var06
04748     07 3D 02 F1 | 	add	_var07, objptr
0474c     1E 35 62 FC | 	wrlong	_var03, _var07
04750     2E 3F 02 F6 | 	mov	_var08, arg01
04754     02 3E 66 F0 | 	shl	_var08, #2
04758     78 0E 06 F1 | 	add	objptr, #120
0475c     07 3F 02 F1 | 	add	_var08, objptr
04760     2E 41 02 F6 | 	mov	_var09, arg01
04764     01 40 66 F0 | 	shl	_var09, #1
04768     9C 0E 86 F1 | 	sub	objptr, #156
0476c                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
0476c     1F 35 02 FB | 	rdlong	_var03, _var08
04770     07 41 02 F1 | 	add	_var09, objptr
04774     20 35 52 FC | 	wrword	_var03, _var09
04778     2E 43 02 F6 | 	mov	_var10, arg01
0477c     02 42 66 F0 | 	shl	_var10, #2
04780     AC 0E 06 F1 | 	add	objptr, #172
04784     07 43 02 F1 | 	add	_var10, objptr
04788     2E 45 02 F6 | 	mov	_var11, arg01
0478c     02 44 66 F0 | 	shl	_var11, #2
04790     A4 0E 86 F1 | 	sub	objptr, #164
04794                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04794     21 35 02 FB | 	rdlong	_var03, _var10
04798     07 45 02 F1 | 	add	_var11, objptr
0479c     22 35 62 FC | 	wrlong	_var03, _var11
047a0     2E 47 02 F6 | 	mov	_var12, arg01
047a4     02 46 66 F0 | 	shl	_var12, #2
047a8     B4 0E 06 F1 | 	add	objptr, #180
047ac     07 47 02 F1 | 	add	_var12, objptr
047b0     2E 49 02 F6 | 	mov	_var13, arg01
047b4     01 48 66 F0 | 	shl	_var13, #1
047b8     A0 0E 86 F1 | 	sub	objptr, #160
047bc                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
047bc     23 35 02 FB | 	rdlong	_var03, _var12
047c0     07 49 02 F1 | 	add	_var13, objptr
047c4     24 35 52 FC | 	wrword	_var03, _var13
047c8     1F 0F 06 F1 | 	add	objptr, #287
047cc     07 5D 02 F1 | 	add	arg01, objptr
047d0     2E 4B C2 FA | 	rdbyte	_var14, arg01
047d4     01 4A 06 F1 | 	add	_var14, #1
047d8                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
047d8     2E 4B 42 FC | 	wrbyte	_var14, arg01
047dc     F6 0F 86 F1 | 	sub	objptr, #502
047e0                 | _trackerplayer_spin2_triggerNote_ret
047e0     2D 00 64 FD | 	ret
047e4                 | 
047e4                 | ' 
047e4                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
047e4                 | _trackerplayer_spin2_processChannel
047e4     31 5A 05 F6 | 	mov	COUNT_, #49
047e8     B0 00 A0 FD | 	call	#pushregs_
047ec     D0 F0 07 F1 | 	add	ptra, #208
047f0     AF 5C 62 FC | 	wrlong	arg01, fp
047f4     04 5E 05 F1 | 	add	fp, #4
047f8     AF 5E 62 FC | 	wrlong	arg02, fp
047fc     04 5E 05 F1 | 	add	fp, #4
04800     AF 60 62 FC | 	wrlong	arg03, fp
04804     04 5E 05 F1 | 	add	fp, #4
04808     AF 62 62 FC | 	wrlong	arg04, fp
0480c     0C 5E 85 F1 | 	sub	fp, #12
04810                 | ' 
04810                 | '   channel := channel & 3
04810     AF 6A 02 FB | 	rdlong	local01, fp
04814     03 6A 06 F5 | 	and	local01, #3
04818     AF 6A 62 FC | 	wrlong	local01, fp
0481c     0C 5E 05 F1 | 	add	fp, #12
04820     AF 6C 02 FB | 	rdlong	local02, fp
04824     08 6C 46 F0 | 	shr	local02, #8
04828     36 6F 02 F6 | 	mov	local03, local02
0482c     0F 6E 06 F5 | 	and	local03, #15
04830                 | '   cmd     := (effect >> 8) & $F
04830     BA 0F 06 F1 | 	add	objptr, #442
04834     07 6F 42 FC | 	wrbyte	local03, objptr
04838     AF 70 02 FB | 	rdlong	local04, fp
0483c     04 70 46 F0 | 	shr	local04, #4
04840     38 73 02 F6 | 	mov	local05, local04
04844     0F 72 06 F5 | 	and	local05, #15
04848                 | '   x       := (effect >> 4) & $F
04848     03 0E 86 F1 | 	sub	objptr, #3
0484c     07 73 42 FC | 	wrbyte	local05, objptr
04850     AF 74 02 FB | 	rdlong	local06, fp
04854     0F 74 06 F5 | 	and	local06, #15
04858                 | '   y       := (effect     ) & $F
04858     01 0E 06 F1 | 	add	objptr, #1
0485c     07 75 42 FC | 	wrbyte	local06, objptr
04860     AF 76 02 FB | 	rdlong	local07, fp
04864     0C 5E 85 F1 | 	sub	fp, #12
04868     FF 76 06 F5 | 	and	local07, #255
0486c                 | '   z       := (effect     ) & $FF
0486c     01 0E 06 F1 | 	add	objptr, #1
04870     07 77 42 FC | 	wrbyte	local07, objptr
04874                 | ' 
04874                 | '   ' Handle everything that executes on "tick zero"
04874                 | '   if tickCounter == 0
04874     18 0F 86 F1 | 	sub	objptr, #280
04878     07 6B CA FA | 	rdbyte	local01, objptr wz
0487c     A1 0E 86 F1 | 	sub	objptr, #161
04880     F0 03 90 5D |  if_ne	jmp	#LR__0175
04884     AF 78 02 FB | 	rdlong	local08, fp
04888     02 78 66 F0 | 	shl	local08, #2
0488c     EF 0E 06 F1 | 	add	objptr, #239
04890     07 79 02 F1 | 	add	local08, objptr
04894                 | ' 
04894                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04894                 | '     deltaPeriod[channel] := 0
04894     3C 01 68 FC | 	wrlong	#0, local08
04898     AF 7A 02 FB | 	rdlong	local09, fp
0489c     02 7A 66 F0 | 	shl	local09, #2
048a0     20 0E 06 F1 | 	add	objptr, #32
048a4     07 7B 02 F1 | 	add	local09, objptr
048a8                 | '     deltaVolume[channel] := 0
048a8     3D 01 68 FC | 	wrlong	#0, local09
048ac                 | ' 
048ac                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
048ac                 | '     if sampleNumber > 0
048ac     04 5E 05 F1 | 	add	fp, #4
048b0     AF 6A 02 FB | 	rdlong	local01, fp
048b4     04 5E 85 F1 | 	sub	fp, #4
048b8     00 6A 5E F2 | 	cmps	local01, #0 wcz
048bc     0F 0F 86 F1 | 	sub	objptr, #271
048c0     20 00 90 ED |  if_be	jmp	#LR__0165
048c4     AF 7C 02 FB | 	rdlong	local10, fp
048c8     E0 0F 06 F1 | 	add	objptr, #480
048cc     07 7D 02 F1 | 	add	local10, objptr
048d0                 | '       sampleNumber_memory[channel] := sampleNumber
048d0     04 5E 05 F1 | 	add	fp, #4
048d4     AF 6A 02 FB | 	rdlong	local01, fp
048d8     04 5E 85 F1 | 	sub	fp, #4
048dc     3E 6B 42 FC | 	wrbyte	local01, local10
048e0     E0 0F 86 F1 | 	sub	objptr, #480
048e4                 | LR__0165
048e4     AF 7E 02 FB | 	rdlong	local11, fp
048e8     E0 0F 06 F1 | 	add	objptr, #480
048ec     07 7F 02 F1 | 	add	local11, objptr
048f0     20 5E 05 F1 | 	add	fp, #32
048f4     AF 80 02 F6 | 	mov	local12, fp
048f8     10 5E 85 F1 | 	sub	fp, #16
048fc     AF 82 02 F6 | 	mov	local13, fp
04900     31 0E 86 F1 | 	sub	objptr, #49
04904     07 85 02 F6 | 	mov	local14, objptr
04908     04 5E 05 F1 | 	add	fp, #4
0490c     AF 86 02 F6 | 	mov	local15, fp
04910     04 5E 05 F1 | 	add	fp, #4
04914     AF 88 02 F6 | 	mov	local16, fp
04918     04 5E 05 F1 | 	add	fp, #4
0491c     AF 8A 02 F6 | 	mov	local17, fp
04920                 | ' 
04920                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04920                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04920     3F 5D C2 FA | 	rdbyte	arg01, local11
04924     42 63 02 F6 | 	mov	arg04, local14
04928     43 8D 02 F6 | 	mov	local18, local15
0492c     44 8F 02 F6 | 	mov	local19, local16
04930     45 91 02 F6 | 	mov	local20, local17
04934     40 5F 02 F6 | 	mov	arg02, local12
04938     41 61 02 F6 | 	mov	arg03, local13
0493c     46 65 02 F6 | 	mov	arg05, local18
04940     47 67 02 F6 | 	mov	arg06, local19
04944     48 69 02 F6 | 	mov	arg07, local20
04948     AF 0F 86 F1 | 	sub	objptr, #431
0494c     1C 5E 85 F1 | 	sub	fp, #28
04950     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04954                 | ' 
04954                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04954                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04954                 | '     if sampleNumber > 0
04954     04 5E 05 F1 | 	add	fp, #4
04958     AF 6A 02 FB | 	rdlong	local01, fp
0495c     04 5E 85 F1 | 	sub	fp, #4
04960     00 6A 5E F2 | 	cmps	local01, #0 wcz
04964     24 00 90 ED |  if_be	jmp	#LR__0166
04968     AF 92 02 FB | 	rdlong	local21, fp
0496c     02 92 66 F0 | 	shl	local21, #2
04970     FF 0E 06 F1 | 	add	objptr, #255
04974     07 93 02 F1 | 	add	local21, objptr
04978                 | '       currVolume[channel] := volume
04978     14 5E 05 F1 | 	add	fp, #20
0497c     AF 6A 02 FB | 	rdlong	local01, fp
04980     14 5E 85 F1 | 	sub	fp, #20
04984     49 6B 62 FC | 	wrlong	local01, local21
04988     FF 0E 86 F1 | 	sub	objptr, #255
0498c                 | LR__0166
0498c                 | ' 
0498c                 | '     ' Handle all commands that executes on "zero tick"
0498c                 | '     sampleOffset := 0
0498c     B3 0F 06 F1 | 	add	objptr, #435
04990     07 01 68 FC | 	wrlong	#0, objptr
04994     B3 0F 86 F1 | 	sub	objptr, #435
04998                 | '     handleZeroTickCommands(channel)
04998     AF 5C 02 FB | 	rdlong	arg01, fp
0499c     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
049a0                 | ' 
049a0                 | '     ' Prepare sample data for triggering (now or later)
049a0                 | '     if period > 0
049a0     08 5E 05 F1 | 	add	fp, #8
049a4     AF 6A 02 FB | 	rdlong	local01, fp
049a8     08 5E 85 F1 | 	sub	fp, #8
049ac     00 6A 5E F2 | 	cmps	local01, #0 wcz
049b0     C8 02 90 ED |  if_be	jmp	#LR__0176
049b4     08 5E 05 F1 | 	add	fp, #8
049b8     AF 94 02 F6 | 	mov	local22, fp
049bc                 | ' 
049bc                 | '       retunePeriod(@period, fineTune)
049bc     AF 0F 06 F1 | 	add	objptr, #431
049c0     07 5F 02 FB | 	rdlong	arg02, objptr
049c4     AF 0F 86 F1 | 	sub	objptr, #431
049c8     4A 5D 02 F6 | 	mov	arg01, local22
049cc     08 5E 85 F1 | 	sub	fp, #8
049d0     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
049d4     AF 96 02 FB | 	rdlong	local23, fp
049d8     D3 0E 06 F1 | 	add	objptr, #211
049dc     07 97 02 F1 | 	add	local23, objptr
049e0                 | '       currFineTune[channel]        := fineTune
049e0     DC 0E 06 F1 | 	add	objptr, #220
049e4     07 6B 02 FB | 	rdlong	local01, objptr
049e8     4B 6B 42 FC | 	wrbyte	local01, local23
049ec     AF 98 02 FB | 	rdlong	local24, fp
049f0     02 98 66 F0 | 	shl	local24, #2
049f4     88 0E 86 F1 | 	sub	objptr, #136
049f8     07 99 02 F1 | 	add	local24, objptr
049fc                 | '       lastSetPeriod[channel]       := period
049fc     08 5E 05 F1 | 	add	fp, #8
04a00     AF 6A 02 FB | 	rdlong	local01, fp
04a04     4C 6B 62 FC | 	wrlong	local01, local24
04a08     08 5E 85 F1 | 	sub	fp, #8
04a0c     AF 9A 02 FB | 	rdlong	local25, fp
04a10     02 9A 66 F0 | 	shl	local25, #2
04a14     40 0E 06 F1 | 	add	objptr, #64
04a18     07 9B 02 F1 | 	add	local25, objptr
04a1c                 | '       lastSetRepeatLength[channel] := repeatLength
04a1c     1C 5E 05 F1 | 	add	fp, #28
04a20     AF 6A 02 FB | 	rdlong	local01, fp
04a24     4D 6B 62 FC | 	wrlong	local01, local25
04a28     1C 5E 85 F1 | 	sub	fp, #28
04a2c     AF 9C 02 FB | 	rdlong	local26, fp
04a30     02 9C 66 F0 | 	shl	local26, #2
04a34     10 0E 06 F1 | 	add	objptr, #16
04a38     07 9D 02 F1 | 	add	local26, objptr
04a3c                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04a3c     18 5E 05 F1 | 	add	fp, #24
04a40     AF 6A 02 FB | 	rdlong	local01, fp
04a44     4E 6B 62 FC | 	wrlong	local01, local26
04a48     08 5E 05 F1 | 	add	fp, #8
04a4c     AF 9E 02 FB | 	rdlong	local27, fp
04a50     20 5E 85 F1 | 	sub	fp, #32
04a54     3C 0E 06 F1 | 	add	objptr, #60
04a58     07 A1 02 FB | 	rdlong	local28, objptr
04a5c     50 9F 02 F1 | 	add	local27, local28
04a60     AF A2 02 FB | 	rdlong	local29, fp
04a64     02 A2 66 F0 | 	shl	local29, #2
04a68     7C 0E 86 F1 | 	sub	objptr, #124
04a6c     07 A3 02 F1 | 	add	local29, objptr
04a70                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04a70     51 9F 62 FC | 	wrlong	local27, local29
04a74     AF A4 02 FB | 	rdlong	local30, fp
04a78     02 A4 66 F0 | 	shl	local30, #2
04a7c     10 0E 06 F1 | 	add	objptr, #16
04a80     07 A5 02 F1 | 	add	local30, objptr
04a84                 | '       lastSetSampleNr[channel]     := sampleNumber
04a84     04 5E 05 F1 | 	add	fp, #4
04a88     AF 6A 02 FB | 	rdlong	local01, fp
04a8c     52 6B 62 FC | 	wrlong	local01, local30
04a90                 | ' 
04a90                 | '       ' This calculates the correct sample length in all situations
04a90                 | '       if repeatLength > 2
04a90     18 5E 05 F1 | 	add	fp, #24
04a94     AF 6A 02 FB | 	rdlong	local01, fp
04a98     1C 5E 85 F1 | 	sub	fp, #28
04a9c     02 6A 5E F2 | 	cmps	local01, #2 wcz
04aa0     47 0F 86 F1 | 	sub	objptr, #327
04aa4     20 00 90 ED |  if_be	jmp	#LR__0167
04aa8     18 5E 05 F1 | 	add	fp, #24
04aac     AF A6 02 FB | 	rdlong	local31, fp
04ab0     04 5E 05 F1 | 	add	fp, #4
04ab4     AF A0 02 FB | 	rdlong	local28, fp
04ab8     50 A7 02 F1 | 	add	local31, local28
04abc                 | '         sampleLength := repeatPoint + repeatLength
04abc     0C 5E 85 F1 | 	sub	fp, #12
04ac0     AF A6 62 FC | 	wrlong	local31, fp
04ac4     10 5E 85 F1 | 	sub	fp, #16
04ac8                 | LR__0167
04ac8                 | ' 
04ac8                 | '       if sampleLength - sampleOffset < 1
04ac8     10 5E 05 F1 | 	add	fp, #16
04acc     AF 6A 02 FB | 	rdlong	local01, fp
04ad0     10 5E 85 F1 | 	sub	fp, #16
04ad4     B3 0F 06 F1 | 	add	objptr, #435
04ad8     07 A1 02 FB | 	rdlong	local28, objptr
04adc     B3 0F 86 F1 | 	sub	objptr, #435
04ae0     50 6B 82 F1 | 	sub	local01, local28
04ae4     01 6A 5E F2 | 	cmps	local01, #1 wcz
04ae8     1C 00 90 3D |  if_ae	jmp	#LR__0168
04aec     AF A8 02 FB | 	rdlong	local32, fp
04af0     02 A8 66 F0 | 	shl	local32, #2
04af4     57 0F 06 F1 | 	add	objptr, #343
04af8     07 A9 02 F1 | 	add	local32, objptr
04afc                 | '         lastSetSampleLength[channel] := 1
04afc     54 03 68 FC | 	wrlong	#1, local32
04b00                 | '       else
04b00     57 0F 86 F1 | 	sub	objptr, #343
04b04     30 00 90 FD | 	jmp	#LR__0169
04b08                 | LR__0168
04b08     10 5E 05 F1 | 	add	fp, #16
04b0c     AF AA 02 FB | 	rdlong	local33, fp
04b10     10 5E 85 F1 | 	sub	fp, #16
04b14     B3 0F 06 F1 | 	add	objptr, #435
04b18     07 A1 02 FB | 	rdlong	local28, objptr
04b1c     50 AB 82 F1 | 	sub	local33, local28
04b20     AF AC 02 FB | 	rdlong	local34, fp
04b24     02 AC 66 F0 | 	shl	local34, #2
04b28     5C 0E 86 F1 | 	sub	objptr, #92
04b2c     07 AD 02 F1 | 	add	local34, objptr
04b30                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04b30     56 AB 62 FC | 	wrlong	local33, local34
04b34     57 0F 86 F1 | 	sub	objptr, #343
04b38                 | LR__0169
04b38                 | ' 
04b38                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04b38                 | '       if sampleOffset > sampleLength
04b38     B3 0F 06 F1 | 	add	objptr, #435
04b3c     07 6B 02 FB | 	rdlong	local01, objptr
04b40     B3 0F 86 F1 | 	sub	objptr, #435
04b44     10 5E 05 F1 | 	add	fp, #16
04b48     AF A0 02 FB | 	rdlong	local28, fp
04b4c     10 5E 85 F1 | 	sub	fp, #16
04b50     50 6B 5A F2 | 	cmps	local01, local28 wcz
04b54     50 00 90 ED |  if_be	jmp	#LR__0170
04b58     20 5E 05 F1 | 	add	fp, #32
04b5c     AF AE 02 FB | 	rdlong	local35, fp
04b60     08 5E 85 F1 | 	sub	fp, #8
04b64     AF A0 02 FB | 	rdlong	local28, fp
04b68     18 5E 85 F1 | 	sub	fp, #24
04b6c     50 AF 02 F1 | 	add	local35, local28
04b70     AF B0 02 FB | 	rdlong	local36, fp
04b74     02 B0 66 F0 | 	shl	local36, #2
04b78     37 0F 06 F1 | 	add	objptr, #311
04b7c     07 B1 02 F1 | 	add	local36, objptr
04b80                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04b80     58 AF 62 FC | 	wrlong	local35, local36
04b84     AF B2 02 FB | 	rdlong	local37, fp
04b88     02 B2 66 F0 | 	shl	local37, #2
04b8c     20 0E 06 F1 | 	add	objptr, #32
04b90     07 B3 02 F1 | 	add	local37, objptr
04b94                 | '         lastSetSampleLength[channel] := repeatLength
04b94     1C 5E 05 F1 | 	add	fp, #28
04b98     AF 6A 02 FB | 	rdlong	local01, fp
04b9c     1C 5E 85 F1 | 	sub	fp, #28
04ba0     59 6B 62 FC | 	wrlong	local01, local37
04ba4     57 0F 86 F1 | 	sub	objptr, #343
04ba8                 | LR__0170
04ba8                 | ' 
04ba8                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04ba8                 | '       ifnot cmd == $3 || cmd == $5
04ba8     BA 0F 06 F1 | 	add	objptr, #442
04bac     07 6B C2 FA | 	rdbyte	local01, objptr
04bb0     BA 0F 86 F1 | 	sub	objptr, #442
04bb4     03 6A 0E F2 | 	cmp	local01, #3 wz
04bb8     54 00 90 AD |  if_e	jmp	#LR__0173
04bbc     BA 0F 06 F1 | 	add	objptr, #442
04bc0     07 B5 C2 FA | 	rdbyte	local38, objptr
04bc4     BA 0F 86 F1 | 	sub	objptr, #442
04bc8     5A A1 02 F6 | 	mov	local28, local38
04bcc     05 A0 0E F2 | 	cmp	local28, #5 wz
04bd0     3C 00 90 AD |  if_e	jmp	#LR__0173
04bd4                 | '         ifnot cmd == $E && x == $D
04bd4     BA 0F 06 F1 | 	add	objptr, #442
04bd8     07 B7 C2 FA | 	rdbyte	local39, objptr
04bdc     BA 0F 86 F1 | 	sub	objptr, #442
04be0     5B 6B 02 F6 | 	mov	local01, local39
04be4     0E 6A 0E F2 | 	cmp	local01, #14 wz
04be8     18 00 90 5D |  if_ne	jmp	#LR__0171
04bec     B7 0F 06 F1 | 	add	objptr, #439
04bf0     07 B5 C2 FA | 	rdbyte	local38, objptr
04bf4     B7 0F 86 F1 | 	sub	objptr, #439
04bf8     5A A1 02 F6 | 	mov	local28, local38
04bfc     0D A0 0E F2 | 	cmp	local28, #13 wz
04c00     0C 00 90 AD |  if_e	jmp	#LR__0172
04c04                 | LR__0171
04c04                 | '           triggerNote(channel)
04c04     AF 6A 02 FB | 	rdlong	local01, fp
04c08     35 5D 02 F6 | 	mov	arg01, local01
04c0c     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04c10                 | LR__0172
04c10                 | LR__0173
04c10                 | ' 
04c10                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04c10                 | '       if resetTremolo[channel] > 0
04c10     AF 6A 02 FB | 	rdlong	local01, fp
04c14     8F 0F 06 F1 | 	add	objptr, #399
04c18     07 6B 02 F1 | 	add	local01, objptr
04c1c     35 A1 C2 FA | 	rdbyte	local28, local01
04c20     00 A0 5E F2 | 	cmps	local28, #0 wcz
04c24     8F 0F 86 F1 | 	sub	objptr, #399
04c28     14 00 90 ED |  if_be	jmp	#LR__0174
04c2c     AF B8 02 FB | 	rdlong	local40, fp
04c30     8B 0F 06 F1 | 	add	objptr, #395
04c34     07 B9 02 F1 | 	add	local40, objptr
04c38                 | '         tremoloPos[channel] := 0
04c38     5C 01 48 FC | 	wrbyte	#0, local40
04c3c     8B 0F 86 F1 | 	sub	objptr, #395
04c40                 | LR__0174
04c40                 | ' 
04c40                 | '       if resetVibrato[channel] > 0
04c40     AF 6A 02 FB | 	rdlong	local01, fp
04c44     93 0F 06 F1 | 	add	objptr, #403
04c48     07 6B 02 F1 | 	add	local01, objptr
04c4c     35 A1 C2 FA | 	rdbyte	local28, local01
04c50     00 A0 5E F2 | 	cmps	local28, #0 wcz
04c54     93 0F 86 F1 | 	sub	objptr, #403
04c58     20 00 90 ED |  if_be	jmp	#LR__0176
04c5c     AF BA 02 FB | 	rdlong	local41, fp
04c60     87 0F 06 F1 | 	add	objptr, #391
04c64     07 BB 02 F1 | 	add	local41, objptr
04c68                 | '         vibratoPos[channel] := 0
04c68     5D 01 48 FC | 	wrbyte	#0, local41
04c6c     87 0F 86 F1 | 	sub	objptr, #391
04c70                 | ' 
04c70                 | '   else
04c70     08 00 90 FD | 	jmp	#LR__0176
04c74                 | LR__0175
04c74                 | '     ' Handle commands that executes on all "non zero ticks"
04c74                 | '     handleNonZeroTickCommands(channel)
04c74     AF 5C 02 FB | 	rdlong	arg01, fp
04c78     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04c7c                 | LR__0176
04c7c                 | ' 
04c7c                 | '   ' Handle commands that executes on every tick
04c7c                 | '   handleEveryTickCommands(channel)
04c7c     AF 5C 02 FB | 	rdlong	arg01, fp
04c80     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04c84     AF BC 02 FB | 	rdlong	local42, fp
04c88     02 BC 66 F0 | 	shl	local42, #2
04c8c     DF 0E 06 F1 | 	add	objptr, #223
04c90     07 BD 02 F1 | 	add	local42, objptr
04c94     5E BF 02 FB | 	rdlong	local43, local42
04c98     01 00 00 FF 
04c9c     58 BF 66 F3 | 	fles	local43, ##856
04ca0                 | ' 
04ca0                 | '   ' Handle boundaries that should be kept
04ca0                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04ca0     5E BF 62 FC | 	wrlong	local43, local42
04ca4     AF C0 02 FB | 	rdlong	local44, fp
04ca8     02 C0 66 F0 | 	shl	local44, #2
04cac     07 C1 02 F1 | 	add	local44, objptr
04cb0     60 C3 02 FB | 	rdlong	local45, local44
04cb4     71 C2 46 F3 | 	fges	local45, #113
04cb8                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04cb8     60 C3 62 FC | 	wrlong	local45, local44
04cbc     AF C4 02 FB | 	rdlong	local46, fp
04cc0     02 C4 66 F0 | 	shl	local46, #2
04cc4     20 0E 06 F1 | 	add	objptr, #32
04cc8     07 C5 02 F1 | 	add	local46, objptr
04ccc     62 C7 02 FB | 	rdlong	local47, local46
04cd0     40 C6 66 F3 | 	fles	local47, #64
04cd4                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04cd4     62 C7 62 FC | 	wrlong	local47, local46
04cd8     AF C8 02 FB | 	rdlong	local48, fp
04cdc     02 C8 66 F0 | 	shl	local48, #2
04ce0     07 C9 02 F1 | 	add	local48, objptr
04ce4     64 CB 02 FB | 	rdlong	local49, local48
04ce8     00 CA 46 F3 | 	fges	local49, #0
04cec                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04cec     64 CB 62 FC | 	wrlong	local49, local48
04cf0     FF 0E 86 F1 | 	sub	objptr, #255
04cf4     AF F0 03 F6 | 	mov	ptra, fp
04cf8     BF 00 A0 FD | 	call	#popregs_
04cfc                 | _trackerplayer_spin2_processChannel_ret
04cfc     2D 00 64 FD | 	ret
04d00                 | 
04d00                 | ' 
04d00                 | ' 
04d00                 | ' ' Handle all commands that executes on tick zero
04d00                 | ' '
04d00                 | ' PRI handleZeroTickCommands(channel)
04d00                 | _trackerplayer_spin2_handleZeroTickCommands
04d00     2E 31 02 F6 | 	mov	_var01, arg01
04d04                 | ' 
04d04                 | '   CASE_FAST cmd
04d04     BA 0F 06 F1 | 	add	objptr, #442
04d08     07 33 C2 FA | 	rdbyte	_var02, objptr
04d0c     BA 0F 86 F1 | 	sub	objptr, #442
04d10     19 35 02 F6 | 	mov	_var03, _var02
04d14     09 34 86 F1 | 	sub	_var03, #9
04d18     07 34 26 F3 | 	fle	_var03, #7
04d1c     1A 37 02 F6 | 	mov	_var04, _var03
04d20     30 36 62 FD | 	jmprel	_var04
04d24                 | LR__0177
04d24     1C 00 90 FD | 	jmp	#LR__0178
04d28     30 04 90 FD | 	jmp	#LR__0201
04d2c     64 00 90 FD | 	jmp	#LR__0180
04d30     84 00 90 FD | 	jmp	#LR__0181
04d34     A0 00 90 FD | 	jmp	#LR__0182
04d38     D0 00 90 FD | 	jmp	#LR__0183
04d3c     9C 03 90 FD | 	jmp	#LR__0198
04d40     18 04 90 FD | 	jmp	#LR__0201
04d44                 | LR__0178
04d44                 | ' 
04d44                 | '     $9:                          ' Set sample offset
04d44                 | '       if z > 0
04d44     B9 0F 06 F1 | 	add	objptr, #441
04d48     07 39 C2 FA | 	rdbyte	_var05, objptr
04d4c     B9 0F 86 F1 | 	sub	objptr, #441
04d50     00 38 5E F2 | 	cmps	_var05, #0 wcz
04d54     1C 00 90 ED |  if_be	jmp	#LR__0179
04d58                 | '         cmd9_memoryZ[channel] := z
04d58     18 39 02 F6 | 	mov	_var05, _var01
04d5c     DC 0F 06 F1 | 	add	objptr, #476
04d60     07 39 02 F1 | 	add	_var05, objptr
04d64     23 0E 86 F1 | 	sub	objptr, #35
04d68     07 3B C2 FA | 	rdbyte	_var06, objptr
04d6c     B9 0F 86 F1 | 	sub	objptr, #441
04d70     1C 3B 42 FC | 	wrbyte	_var06, _var05
04d74                 | LR__0179
04d74                 | ' 
04d74                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04d74     DC 0F 06 F1 | 	add	objptr, #476
04d78     07 31 02 F1 | 	add	_var01, objptr
04d7c     18 39 C2 FA | 	rdbyte	_var05, _var01
04d80     08 38 66 F0 | 	shl	_var05, #8
04d84     29 0E 86 F1 | 	sub	objptr, #41
04d88     07 39 62 FC | 	wrlong	_var05, objptr
04d8c     B3 0F 86 F1 | 	sub	objptr, #435
04d90     C8 03 90 FD | 	jmp	#LR__0201
04d94                 | LR__0180
04d94                 | ' 
04d94                 | '     $B:                          ' Jump position
04d94                 | '       cmdB_memoryZ := z
04d94     B9 0F 06 F1 | 	add	objptr, #441
04d98     07 39 C2 FA | 	rdbyte	_var05, objptr
04d9c     2E 0E 06 F1 | 	add	objptr, #46
04da0     07 39 42 FC | 	wrbyte	_var05, objptr
04da4                 | '       cmdB_updatePosition := true
04da4     01 0E 06 F1 | 	add	objptr, #1
04da8     FF FF FF FF 
04dac     07 FF 4B FC | 	wrbyte	##-1, objptr
04db0     E8 0F 86 F1 | 	sub	objptr, #488
04db4     A4 03 90 FD | 	jmp	#LR__0201
04db8                 | LR__0181
04db8                 | ' 
04db8                 | '     $C:                          ' Set volume
04db8                 | '       currVolume[channel] := z
04db8     02 30 66 F0 | 	shl	_var01, #2
04dbc     FF 0E 06 F1 | 	add	objptr, #255
04dc0     07 31 02 F1 | 	add	_var01, objptr
04dc4     BA 0E 06 F1 | 	add	objptr, #186
04dc8     07 3B C2 FA | 	rdbyte	_var06, objptr
04dcc     B9 0F 86 F1 | 	sub	objptr, #441
04dd0     18 3B 62 FC | 	wrlong	_var06, _var01
04dd4     84 03 90 FD | 	jmp	#LR__0201
04dd8                 | LR__0182
04dd8                 | ' 
04dd8                 | '     $D:                          ' Pattern break
04dd8                 | '       cmdD_memoryX := x
04dd8     B7 0F 06 F1 | 	add	objptr, #439
04ddc     07 39 C2 FA | 	rdbyte	_var05, objptr
04de0     2D 0E 06 F1 | 	add	objptr, #45
04de4     07 39 42 FC | 	wrbyte	_var05, objptr
04de8                 | '       cmdD_memoryY := y
04de8     2C 0E 86 F1 | 	sub	objptr, #44
04dec     07 39 C2 FA | 	rdbyte	_var05, objptr
04df0     2D 0E 06 F1 | 	add	objptr, #45
04df4     07 39 42 FC | 	wrbyte	_var05, objptr
04df8                 | '       cmdD_updatePosition := true
04df8     01 0E 06 F1 | 	add	objptr, #1
04dfc     FF FF FF FF 
04e00     07 FF 4B FC | 	wrbyte	##-1, objptr
04e04     E6 0F 86 F1 | 	sub	objptr, #486
04e08     50 03 90 FD | 	jmp	#LR__0201
04e0c                 | LR__0183
04e0c                 | ' 
04e0c                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04e0c                 | ' 
04e0c                 | '       CASE_FAST x
04e0c     B7 0F 06 F1 | 	add	objptr, #439
04e10     07 3D C2 FA | 	rdbyte	_var07, objptr
04e14     B7 0F 86 F1 | 	sub	objptr, #439
04e18     1E 39 02 F6 | 	mov	_var05, _var07
04e1c     0F 38 26 F3 | 	fle	_var05, #15
04e20     1C 3F 02 F6 | 	mov	_var08, _var05
04e24     30 3E 62 FD | 	jmprel	_var08
04e28                 | LR__0184
04e28     3C 00 90 FD | 	jmp	#LR__0185
04e2c     58 00 90 FD | 	jmp	#LR__0186
04e30     8C 00 90 FD | 	jmp	#LR__0187
04e34     C0 00 90 FD | 	jmp	#LR__0188
04e38     DC 00 90 FD | 	jmp	#LR__0189
04e3c     14 01 90 FD | 	jmp	#LR__0190
04e40     28 01 90 FD | 	jmp	#LR__0191
04e44     C0 01 90 FD | 	jmp	#LR__0194
04e48     10 03 90 FD | 	jmp	#LR__0201
04e4c     0C 03 90 FD | 	jmp	#LR__0201
04e50     F0 01 90 FD | 	jmp	#LR__0195
04e54     24 02 90 FD | 	jmp	#LR__0196
04e58     00 03 90 FD | 	jmp	#LR__0201
04e5c     FC 02 90 FD | 	jmp	#LR__0201
04e60     50 02 90 FD | 	jmp	#LR__0197
04e64     F4 02 90 FD | 	jmp	#LR__0201
04e68                 | LR__0185
04e68                 | ' 
04e68                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04e68     B8 0F 06 F1 | 	add	objptr, #440
04e6c     07 3B C2 FA | 	rdbyte	_var06, objptr
04e70     1D 3B 22 F6 | 	not	_var06, _var06
04e74     01 3A 06 F5 | 	and	_var06, #1
04e78     03 0E 06 F1 | 	add	objptr, #3
04e7c     07 3B 42 FC | 	wrbyte	_var06, objptr
04e80     BB 0F 86 F1 | 	sub	objptr, #443
04e84     D4 02 90 FD | 	jmp	#LR__0201
04e88                 | LR__0186
04e88                 | ' 
04e88                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04e88     18 41 02 F6 | 	mov	_var09, _var01
04e8c     02 40 66 F0 | 	shl	_var09, #2
04e90     DF 0E 06 F1 | 	add	objptr, #223
04e94     07 41 02 F1 | 	add	_var09, objptr
04e98     20 3B 02 FB | 	rdlong	_var06, _var09
04e9c     D9 0E 06 F1 | 	add	objptr, #217
04ea0     07 43 C2 FA | 	rdbyte	_var10, objptr
04ea4     21 3B 82 F1 | 	sub	_var06, _var10
04ea8     02 30 66 F0 | 	shl	_var01, #2
04eac     D9 0E 86 F1 | 	sub	objptr, #217
04eb0     07 31 02 F1 | 	add	_var01, objptr
04eb4     18 3B 62 FC | 	wrlong	_var06, _var01
04eb8     DF 0E 86 F1 | 	sub	objptr, #223
04ebc     9C 02 90 FD | 	jmp	#LR__0201
04ec0                 | LR__0187
04ec0                 | ' 
04ec0                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04ec0     18 41 02 F6 | 	mov	_var09, _var01
04ec4     02 40 66 F0 | 	shl	_var09, #2
04ec8     DF 0E 06 F1 | 	add	objptr, #223
04ecc     07 41 02 F1 | 	add	_var09, objptr
04ed0     20 3B 02 FB | 	rdlong	_var06, _var09
04ed4     D9 0E 06 F1 | 	add	objptr, #217
04ed8     07 43 C2 FA | 	rdbyte	_var10, objptr
04edc     21 3B 02 F1 | 	add	_var06, _var10
04ee0     02 30 66 F0 | 	shl	_var01, #2
04ee4     D9 0E 86 F1 | 	sub	objptr, #217
04ee8     07 31 02 F1 | 	add	_var01, objptr
04eec     18 3B 62 FC | 	wrlong	_var06, _var01
04ef0     DF 0E 86 F1 | 	sub	objptr, #223
04ef4     64 02 90 FD | 	jmp	#LR__0201
04ef8                 | LR__0188
04ef8                 | ' 
04ef8                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04ef8     B8 0F 06 F1 | 	add	objptr, #440
04efc     07 3B C2 FA | 	rdbyte	_var06, objptr
04f00     01 3A 06 F5 | 	and	_var06, #1
04f04     04 0E 06 F1 | 	add	objptr, #4
04f08     07 31 02 F1 | 	add	_var01, objptr
04f0c     18 3B 42 FC | 	wrbyte	_var06, _var01
04f10     BC 0F 86 F1 | 	sub	objptr, #444
04f14     44 02 90 FD | 	jmp	#LR__0201
04f18                 | LR__0189
04f18                 | ' 
04f18                 | '         $4:                                      ' Set vibrato waveform type
04f18                 | '           vibratoType[channel]  := y & 3
04f18     B8 0F 06 F1 | 	add	objptr, #440
04f1c     07 3B C2 FA | 	rdbyte	_var06, objptr
04f20     03 3A 06 F5 | 	and	_var06, #3
04f24     18 45 02 F6 | 	mov	_var11, _var01
04f28     08 0E 06 F1 | 	add	objptr, #8
04f2c     07 45 02 F1 | 	add	_var11, objptr
04f30     22 3B 42 FC | 	wrbyte	_var06, _var11
04f34                 | '           resetVibrato[channel] := y & 4
04f34     08 0E 86 F1 | 	sub	objptr, #8
04f38     07 3B C2 FA | 	rdbyte	_var06, objptr
04f3c     04 3A 06 F5 | 	and	_var06, #4
04f40     25 0E 86 F1 | 	sub	objptr, #37
04f44     07 31 02 F1 | 	add	_var01, objptr
04f48     18 3B 42 FC | 	wrbyte	_var06, _var01
04f4c     93 0F 86 F1 | 	sub	objptr, #403
04f50     08 02 90 FD | 	jmp	#LR__0201
04f54                 | LR__0190
04f54                 | ' 
04f54                 | '         $5: fineTune := y                        ' Set finetune
04f54     B8 0F 06 F1 | 	add	objptr, #440
04f58     07 3B C2 FA | 	rdbyte	_var06, objptr
04f5c     09 0E 86 F1 | 	sub	objptr, #9
04f60     07 3B 62 FC | 	wrlong	_var06, objptr
04f64     AF 0F 86 F1 | 	sub	objptr, #431
04f68     F0 01 90 FD | 	jmp	#LR__0201
04f6c                 | LR__0191
04f6c                 | ' 
04f6c                 | '         $6:                                      ' Pattern looping
04f6c                 | '           if y == 0
04f6c     B8 0F 06 F1 | 	add	objptr, #440
04f70     07 3B CA FA | 	rdbyte	_var06, objptr wz
04f74     B8 0F 86 F1 | 	sub	objptr, #440
04f78     1C 00 90 5D |  if_ne	jmp	#LR__0192
04f7c                 | '             cmdE6_memory[channel] := patternRow
04f7c     E9 0F 06 F1 | 	add	objptr, #489
04f80     07 31 02 F1 | 	add	_var01, objptr
04f84     47 0F 86 F1 | 	sub	objptr, #327
04f88     07 45 C2 FA | 	rdbyte	_var11, objptr
04f8c     A2 0E 86 F1 | 	sub	objptr, #162
04f90     18 45 42 FC | 	wrbyte	_var11, _var01
04f94                 | '           else
04f94     C4 01 90 FD | 	jmp	#LR__0201
04f98                 | LR__0192
04f98                 | '             if ++cmdE6_counter[channel] <= y
04f98     18 41 02 F6 | 	mov	_var09, _var01
04f9c     ED 0F 06 F1 | 	add	objptr, #493
04fa0     07 41 02 F1 | 	add	_var09, objptr
04fa4     20 3B C2 FA | 	rdbyte	_var06, _var09
04fa8     01 3A 06 F1 | 	add	_var06, #1
04fac     18 43 02 F6 | 	mov	_var10, _var01
04fb0     07 43 02 F1 | 	add	_var10, objptr
04fb4     21 3B 42 FC | 	wrbyte	_var06, _var10
04fb8     21 47 C2 FA | 	rdbyte	_var12, _var10
04fbc     35 0E 86 F1 | 	sub	objptr, #53
04fc0     07 49 C2 FA | 	rdbyte	_var13, objptr
04fc4     B8 0F 86 F1 | 	sub	objptr, #440
04fc8     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04fcc     24 00 90 1D |  if_a	jmp	#LR__0193
04fd0                 | '               cmdE6_updatePosition[channel] := true
04fd0     F1 0F 06 F1 | 	add	objptr, #497
04fd4     07 31 02 F1 | 	add	_var01, objptr
04fd8     FF FF FF FF 
04fdc     18 FF 4B FC | 	wrbyte	##-1, _var01
04fe0                 | '               cmdE6_updatePositionCommon    := true
04fe0     04 0E 06 F1 | 	add	objptr, #4
04fe4     FF FF FF FF 
04fe8     07 FF 4B FC | 	wrbyte	##-1, objptr
04fec     F5 0F 86 F1 | 	sub	objptr, #501
04ff0                 | '             else
04ff0     68 01 90 FD | 	jmp	#LR__0201
04ff4                 | LR__0193
04ff4                 | '               cmdE6_counter[channel] := 0
04ff4     ED 0F 06 F1 | 	add	objptr, #493
04ff8     07 31 02 F1 | 	add	_var01, objptr
04ffc     18 01 48 FC | 	wrbyte	#0, _var01
05000     ED 0F 86 F1 | 	sub	objptr, #493
05004     54 01 90 FD | 	jmp	#LR__0201
05008                 | LR__0194
05008                 | ' 
05008                 | '         $7:                                      ' Set tremolo waveform type
05008                 | '           tremoloType[channel] := y & 3
05008     B8 0F 06 F1 | 	add	objptr, #440
0500c     07 3B C2 FA | 	rdbyte	_var06, objptr
05010     03 3A 06 F5 | 	and	_var06, #3
05014     18 45 02 F6 | 	mov	_var11, _var01
05018     0C 0E 06 F1 | 	add	objptr, #12
0501c     07 45 02 F1 | 	add	_var11, objptr
05020     22 3B 42 FC | 	wrbyte	_var06, _var11
05024                 | '           resetTremolo[channel] := y & 4
05024     0C 0E 86 F1 | 	sub	objptr, #12
05028     07 3B C2 FA | 	rdbyte	_var06, objptr
0502c     04 3A 06 F5 | 	and	_var06, #4
05030     29 0E 86 F1 | 	sub	objptr, #41
05034     07 31 02 F1 | 	add	_var01, objptr
05038     18 3B 42 FC | 	wrbyte	_var06, _var01
0503c     8F 0F 86 F1 | 	sub	objptr, #399
05040     18 01 90 FD | 	jmp	#LR__0201
05044                 | LR__0195
05044                 | ' 
05044                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05044     18 41 02 F6 | 	mov	_var09, _var01
05048     02 40 66 F0 | 	shl	_var09, #2
0504c     FF 0E 06 F1 | 	add	objptr, #255
05050     07 41 02 F1 | 	add	_var09, objptr
05054     20 3B 02 FB | 	rdlong	_var06, _var09
05058     B9 0E 06 F1 | 	add	objptr, #185
0505c     07 43 C2 FA | 	rdbyte	_var10, objptr
05060     21 3B 02 F1 | 	add	_var06, _var10
05064     02 30 66 F0 | 	shl	_var01, #2
05068     B9 0E 86 F1 | 	sub	objptr, #185
0506c     07 31 02 F1 | 	add	_var01, objptr
05070     18 3B 62 FC | 	wrlong	_var06, _var01
05074     FF 0E 86 F1 | 	sub	objptr, #255
05078     E0 00 90 FD | 	jmp	#LR__0201
0507c                 | LR__0196
0507c                 | ' 
0507c                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
0507c     18 41 02 F6 | 	mov	_var09, _var01
05080     02 40 66 F0 | 	shl	_var09, #2
05084     FF 0E 06 F1 | 	add	objptr, #255
05088     07 41 02 F1 | 	add	_var09, objptr
0508c     20 3B 02 FB | 	rdlong	_var06, _var09
05090     B9 0E 06 F1 | 	add	objptr, #185
05094     07 43 C2 FA | 	rdbyte	_var10, objptr
05098     21 3B 82 F1 | 	sub	_var06, _var10
0509c     02 30 66 F0 | 	shl	_var01, #2
050a0     B9 0E 86 F1 | 	sub	objptr, #185
050a4     07 31 02 F1 | 	add	_var01, objptr
050a8     18 3B 62 FC | 	wrlong	_var06, _var01
050ac     FF 0E 86 F1 | 	sub	objptr, #255
050b0     A8 00 90 FD | 	jmp	#LR__0201
050b4                 | LR__0197
050b4                 | ' 
050b4                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
050b4     B8 0F 06 F1 | 	add	objptr, #440
050b8     07 41 C2 FA | 	rdbyte	_var09, objptr
050bc     14 0F 86 F1 | 	sub	objptr, #276
050c0     07 43 C2 FA | 	rdbyte	_var10, objptr
050c4     21 41 02 FD | 	qmul	_var09, _var10
050c8     18 3A 62 FD | 	getqx	_var06
050cc     01 0E 06 F1 | 	add	objptr, #1
050d0     07 3B 42 FC | 	wrbyte	_var06, objptr
050d4     A5 0E 86 F1 | 	sub	objptr, #165
050d8     80 00 90 FD | 	jmp	#LR__0201
050dc                 | LR__0198
050dc                 | ' 
050dc                 | '     $F:                          ' Set speed
050dc                 | '       if z < 32
050dc     B9 0F 06 F1 | 	add	objptr, #441
050e0     07 39 C2 FA | 	rdbyte	_var05, objptr
050e4     B9 0F 86 F1 | 	sub	objptr, #441
050e8     20 38 5E F2 | 	cmps	_var05, #32 wcz
050ec     18 00 90 3D |  if_ae	jmp	#LR__0199
050f0                 | '         currentSongSpeed := z
050f0     B9 0F 06 F1 | 	add	objptr, #441
050f4     07 39 C2 FA | 	rdbyte	_var05, objptr
050f8     15 0F 86 F1 | 	sub	objptr, #277
050fc     07 39 42 FC | 	wrbyte	_var05, objptr
05100     A4 0E 86 F1 | 	sub	objptr, #164
05104                 | '       else
05104     54 00 90 FD | 	jmp	#LR__0200
05108                 | LR__0199
05108                 | '         ticksPerMinute := z * 24
05108     B9 0F 06 F1 | 	add	objptr, #441
0510c     07 3D C2 FA | 	rdbyte	_var07, objptr
05110     1E 39 02 F6 | 	mov	_var05, _var07
05114     01 38 66 F0 | 	shl	_var05, #1
05118     1E 39 02 F1 | 	add	_var05, _var07
0511c     03 38 66 F0 | 	shl	_var05, #3
05120     12 0E 86 F1 | 	sub	objptr, #18
05124     07 39 62 FC | 	wrlong	_var05, objptr
05128     A7 0F 86 F1 | 	sub	objptr, #423
0512c                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
0512c     07 0B 03 FB | 	rdlong	muldiva_, objptr
05130     A7 0F 06 F1 | 	add	objptr, #423
05134     07 0D 03 FB | 	rdlong	muldivb_, objptr
05138     A7 0F 86 F1 | 	sub	objptr, #423
0513c     D0 00 A0 FD | 	call	#divide_
05140     86 3B 02 F6 | 	mov	_var06, muldivb_
05144     04 3A 66 F0 | 	shl	_var06, #4
05148     86 3B 82 F1 | 	sub	_var06, muldivb_
0514c     02 3A 66 F0 | 	shl	_var06, #2
05150     AB 0F 06 F1 | 	add	objptr, #427
05154     07 3B 62 FC | 	wrlong	_var06, objptr
05158     AB 0F 86 F1 | 	sub	objptr, #427
0515c                 | LR__0200
0515c                 | LR__0201
0515c                 | _trackerplayer_spin2_handleZeroTickCommands_ret
0515c     2D 00 64 FD | 	ret
05160                 | 
05160                 | ' 
05160                 | ' 
05160                 | ' ' Handle all commands that executes on "non zero ticks"
05160                 | ' '
05160                 | ' PRI handleNonZeroTickCommands(channel)
05160                 | _trackerplayer_spin2_handleNonZeroTickCommands
05160     0A 5A 05 F6 | 	mov	COUNT_, #10
05164     B0 00 A0 FD | 	call	#pushregs_
05168     2E 6B 02 F6 | 	mov	local01, arg01
0516c                 | ' 
0516c                 | '   CASE_FAST cmd
0516c     BA 0F 06 F1 | 	add	objptr, #442
05170     07 6D C2 FA | 	rdbyte	local02, objptr
05174     BA 0F 86 F1 | 	sub	objptr, #442
05178     36 6F 02 F6 | 	mov	local03, local02
0517c     01 6E 86 F1 | 	sub	local03, #1
05180     0E 6E 26 F3 | 	fle	local03, #14
05184     37 71 02 F6 | 	mov	local04, local03
05188     30 70 62 FD | 	jmprel	local04
0518c                 | LR__0202
0518c     38 00 90 FD | 	jmp	#LR__0203
05190     A0 00 90 FD | 	jmp	#LR__0204
05194     D4 00 90 FD | 	jmp	#LR__0205
05198     1C 02 90 FD | 	jmp	#LR__0215
0519c     20 01 90 FD | 	jmp	#LR__0207
051a0     48 01 90 FD | 	jmp	#LR__0208
051a4     50 01 90 FD | 	jmp	#LR__0209
051a8     0C 02 90 FD | 	jmp	#LR__0215
051ac     08 02 90 FD | 	jmp	#LR__0215
051b0     B0 01 90 FD | 	jmp	#LR__0212
051b4     00 02 90 FD | 	jmp	#LR__0215
051b8     FC 01 90 FD | 	jmp	#LR__0215
051bc     F8 01 90 FD | 	jmp	#LR__0215
051c0     AC 01 90 FD | 	jmp	#LR__0213
051c4     F0 01 90 FD | 	jmp	#LR__0215
051c8                 | LR__0203
051c8                 | ' 
051c8                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
051c8     35 73 02 F6 | 	mov	local05, local01
051cc     02 72 66 F0 | 	shl	local05, #2
051d0     DF 0E 06 F1 | 	add	objptr, #223
051d4     07 73 02 F1 | 	add	local05, objptr
051d8     39 75 02 FB | 	rdlong	local06, local05
051dc     DA 0E 06 F1 | 	add	objptr, #218
051e0     07 77 C2 FA | 	rdbyte	local07, objptr
051e4     3B 75 82 F1 | 	sub	local06, local07
051e8     35 79 02 F6 | 	mov	local08, local01
051ec     02 78 66 F0 | 	shl	local08, #2
051f0     DA 0E 86 F1 | 	sub	objptr, #218
051f4     07 79 02 F1 | 	add	local08, objptr
051f8     3C 75 62 FC | 	wrlong	local06, local08
051fc                 | ' 
051fc                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
051fc                 | '       if currPeriod[channel] < 0
051fc     35 75 02 F6 | 	mov	local06, local01
05200     02 74 66 F0 | 	shl	local06, #2
05204     07 75 02 F1 | 	add	local06, objptr
05208     3A 7B 02 FB | 	rdlong	local09, local06
0520c     00 7A 5E F2 | 	cmps	local09, #0 wcz
05210     DF 0E 86 F1 | 	sub	objptr, #223
05214     A0 01 90 3D |  if_ae	jmp	#LR__0215
05218                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05218     02 6A 66 F0 | 	shl	local01, #2
0521c     DF 0E 06 F1 | 	add	objptr, #223
05220     07 6B 02 F1 | 	add	local01, objptr
05224     01 00 80 FF 
05228     35 B1 6A FC | 	wrlong	##856, local01
0522c     DF 0E 86 F1 | 	sub	objptr, #223
05230     84 01 90 FD | 	jmp	#LR__0215
05234                 | LR__0204
05234                 | ' 
05234                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05234     35 73 02 F6 | 	mov	local05, local01
05238     02 72 66 F0 | 	shl	local05, #2
0523c     DF 0E 06 F1 | 	add	objptr, #223
05240     07 73 02 F1 | 	add	local05, objptr
05244     39 75 02 FB | 	rdlong	local06, local05
05248     DA 0E 06 F1 | 	add	objptr, #218
0524c     07 77 C2 FA | 	rdbyte	local07, objptr
05250     3B 75 02 F1 | 	add	local06, local07
05254     02 6A 66 F0 | 	shl	local01, #2
05258     DA 0E 86 F1 | 	sub	objptr, #218
0525c     07 6B 02 F1 | 	add	local01, objptr
05260     35 75 62 FC | 	wrlong	local06, local01
05264     DF 0E 86 F1 | 	sub	objptr, #223
05268     4C 01 90 FD | 	jmp	#LR__0215
0526c                 | LR__0205
0526c                 | ' 
0526c                 | '     $3:                                 ' Slide to note (portamento)
0526c                 | '       if z > 0
0526c     B9 0F 06 F1 | 	add	objptr, #441
05270     07 75 C2 FA | 	rdbyte	local06, objptr
05274     B9 0F 86 F1 | 	sub	objptr, #441
05278     00 74 5E F2 | 	cmps	local06, #0 wcz
0527c     1C 00 90 ED |  if_be	jmp	#LR__0206
05280                 | '         cmd3_memoryZ[channel] := z
05280     35 75 02 F6 | 	mov	local06, local01
05284     C8 0F 06 F1 | 	add	objptr, #456
05288     07 75 02 F1 | 	add	local06, objptr
0528c     0F 0E 86 F1 | 	sub	objptr, #15
05290     07 7B C2 FA | 	rdbyte	local09, objptr
05294     B9 0F 86 F1 | 	sub	objptr, #441
05298     3A 7B 42 FC | 	wrbyte	local09, local06
0529c                 | LR__0206
0529c                 | ' 
0529c                 | '       doPortamento(channel, lastSetPeriod[channel])
0529c     35 73 02 F6 | 	mov	local05, local01
052a0     02 72 66 F0 | 	shl	local05, #2
052a4     27 0F 06 F1 | 	add	objptr, #295
052a8     07 73 02 F1 | 	add	local05, objptr
052ac     39 5F 02 FB | 	rdlong	arg02, local05
052b0     35 5D 02 F6 | 	mov	arg01, local01
052b4     27 0F 86 F1 | 	sub	objptr, #295
052b8     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
052bc     F8 00 90 FD | 	jmp	#LR__0215
052c0                 | LR__0207
052c0                 | ' 
052c0                 | '     $5:                                 ' Volume slide + portamento
052c0                 | '       doVolumeSlide(channel)
052c0     35 5D 02 F6 | 	mov	arg01, local01
052c4     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052c8                 | '       doPortamento(channel, lastSetPeriod[channel])
052c8     35 73 02 F6 | 	mov	local05, local01
052cc     02 72 66 F0 | 	shl	local05, #2
052d0     27 0F 06 F1 | 	add	objptr, #295
052d4     07 73 02 F1 | 	add	local05, objptr
052d8     39 5F 02 FB | 	rdlong	arg02, local05
052dc     35 5D 02 F6 | 	mov	arg01, local01
052e0     27 0F 86 F1 | 	sub	objptr, #295
052e4     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
052e8     CC 00 90 FD | 	jmp	#LR__0215
052ec                 | LR__0208
052ec                 | ' 
052ec                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
052ec     35 5D 02 F6 | 	mov	arg01, local01
052f0     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052f4     C0 00 90 FD | 	jmp	#LR__0215
052f8                 | LR__0209
052f8                 | ' 
052f8                 | '     $7:                                 ' Tremolo
052f8                 | '       if x > 0
052f8     B7 0F 06 F1 | 	add	objptr, #439
052fc     07 75 C2 FA | 	rdbyte	local06, objptr
05300     B7 0F 86 F1 | 	sub	objptr, #439
05304     00 74 5E F2 | 	cmps	local06, #0 wcz
05308     1C 00 90 ED |  if_be	jmp	#LR__0210
0530c                 | '         cmd7_memoryX[channel] := x
0530c     35 75 02 F6 | 	mov	local06, local01
05310     D8 0F 06 F1 | 	add	objptr, #472
05314     07 75 02 F1 | 	add	local06, objptr
05318     21 0E 86 F1 | 	sub	objptr, #33
0531c     07 7B C2 FA | 	rdbyte	local09, objptr
05320     B7 0F 86 F1 | 	sub	objptr, #439
05324     3A 7B 42 FC | 	wrbyte	local09, local06
05328                 | LR__0210
05328                 | '       if y > 0
05328     B8 0F 06 F1 | 	add	objptr, #440
0532c     07 75 C2 FA | 	rdbyte	local06, objptr
05330     B8 0F 86 F1 | 	sub	objptr, #440
05334     00 74 5E F2 | 	cmps	local06, #0 wcz
05338     1C 00 90 ED |  if_be	jmp	#LR__0211
0533c                 | '         cmd7_memoryY[channel] := y
0533c     35 75 02 F6 | 	mov	local06, local01
05340     D4 0F 06 F1 | 	add	objptr, #468
05344     07 75 02 F1 | 	add	local06, objptr
05348     1C 0E 86 F1 | 	sub	objptr, #28
0534c     07 7B C2 FA | 	rdbyte	local09, objptr
05350     B8 0F 86 F1 | 	sub	objptr, #440
05354     3A 7B 42 FC | 	wrbyte	local09, local06
05358                 | LR__0211
05358                 | ' 
05358                 | '       doTremolo(channel)
05358     35 5D 02 F6 | 	mov	arg01, local01
0535c     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05360     54 00 90 FD | 	jmp	#LR__0215
05364                 | LR__0212
05364                 | ' 
05364                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05364     35 5D 02 F6 | 	mov	arg01, local01
05368     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0536c     48 00 90 FD | 	jmp	#LR__0215
05370                 | LR__0213
05370                 | ' 
05370                 | '     $E:                                 ' Retrig every Y ticks
05370                 | '       if (x == $9) && ((tickcounter // y) == 0)
05370     B7 0F 06 F1 | 	add	objptr, #439
05374     07 73 C2 FA | 	rdbyte	local05, objptr
05378     B7 0F 86 F1 | 	sub	objptr, #439
0537c     09 72 0E F2 | 	cmp	local05, #9 wz
05380     34 00 90 5D |  if_ne	jmp	#LR__0214
05384     A1 0E 06 F1 | 	add	objptr, #161
05388     07 77 C2 FA | 	rdbyte	local07, objptr
0538c     3B 0B 03 F6 | 	mov	muldiva_, local07
05390     17 0F 06 F1 | 	add	objptr, #279
05394     07 7D C2 FA | 	rdbyte	local10, objptr
05398     B8 0F 86 F1 | 	sub	objptr, #440
0539c     3E 0D 03 F6 | 	mov	muldivb_, local10
053a0     D0 00 A0 FD | 	call	#divide_
053a4     85 7B 0A F6 | 	mov	local09, muldiva_ wz
053a8     0C 00 90 5D |  if_ne	jmp	#LR__0214
053ac                 | '         triggerNote(channel)
053ac     35 75 02 F6 | 	mov	local06, local01
053b0     3A 5D 02 F6 | 	mov	arg01, local06
053b4     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
053b8                 | LR__0214
053b8                 | LR__0215
053b8     AF F0 03 F6 | 	mov	ptra, fp
053bc     BF 00 A0 FD | 	call	#popregs_
053c0                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
053c0     2D 00 64 FD | 	ret
053c4                 | 
053c4                 | ' 
053c4                 | ' 
053c4                 | ' ' Handle all commands that executes on every tick
053c4                 | ' '
053c4                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
053c4                 | _trackerplayer_spin2_handleEveryTickCommands
053c4     12 5A 05 F6 | 	mov	COUNT_, #18
053c8     B0 00 A0 FD | 	call	#pushregs_
053cc     2E 6B 02 F6 | 	mov	local01, arg01
053d0                 | ' 
053d0                 | '   CASE_FAST cmd
053d0     BA 0F 06 F1 | 	add	objptr, #442
053d4     07 6D C2 FA | 	rdbyte	local02, objptr
053d8     BA 0F 86 F1 | 	sub	objptr, #442
053dc     36 6F 02 F6 | 	mov	local03, local02
053e0     0F 6E 26 F3 | 	fle	local03, #15
053e4     37 71 02 F6 | 	mov	local04, local03
053e8     30 70 62 FD | 	jmprel	local04
053ec                 | LR__0216
053ec     3C 00 90 FD | 	jmp	#LR__0217
053f0     68 03 90 FD | 	jmp	#LR__0231
053f4     64 03 90 FD | 	jmp	#LR__0231
053f8     60 03 90 FD | 	jmp	#LR__0231
053fc     E8 01 90 FD | 	jmp	#LR__0220
05400     58 03 90 FD | 	jmp	#LR__0231
05404     4C 02 90 FD | 	jmp	#LR__0223
05408     50 03 90 FD | 	jmp	#LR__0231
0540c     4C 03 90 FD | 	jmp	#LR__0231
05410     48 03 90 FD | 	jmp	#LR__0231
05414     44 03 90 FD | 	jmp	#LR__0231
05418     40 03 90 FD | 	jmp	#LR__0231
0541c     3C 03 90 FD | 	jmp	#LR__0231
05420     38 03 90 FD | 	jmp	#LR__0231
05424     38 02 90 FD | 	jmp	#LR__0224
05428     30 03 90 FD | 	jmp	#LR__0231
0542c                 | LR__0217
0542c                 | ' 
0542c                 | '     $0:                                 ' Arpeggio
0542c                 | '       arpCounter := tickCounter // 3
0542c     A1 0E 06 F1 | 	add	objptr, #161
05430     07 0B C3 FA | 	rdbyte	muldiva_, objptr
05434     A1 0E 86 F1 | 	sub	objptr, #161
05438     03 0C 07 F6 | 	mov	muldivb_, #3
0543c     D0 00 A0 FD | 	call	#divide_
05440     85 73 02 F6 | 	mov	local05, muldiva_
05444                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
05444     35 75 02 F6 | 	mov	local06, local01
05448     02 74 66 F0 | 	shl	local06, #2
0544c     DF 0E 06 F1 | 	add	objptr, #223
05450     07 75 02 F1 | 	add	local06, objptr
05454     3A 5D 02 FB | 	rdlong	arg01, local06
05458     35 77 02 F6 | 	mov	local07, local01
0545c     0C 0E 86 F1 | 	sub	objptr, #12
05460     07 77 02 F1 | 	add	local07, objptr
05464     3B 5F C2 FA | 	rdbyte	arg02, local07
05468     D3 0E 86 F1 | 	sub	objptr, #211
0546c     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05470     15 79 02 F6 | 	mov	local08, result1
05474     3C 7B 02 F6 | 	mov	local09, local08
05478     24 78 5E F2 | 	cmps	local08, #36 wcz
0547c     DC 02 90 3D |  if_ae	jmp	#LR__0231
05480                 | '         if arpCounter == 1 and x > 0
05480     01 72 0E F2 | 	cmp	local05, #1 wz
05484     8C 00 90 5D |  if_ne	jmp	#LR__0218
05488     B7 0F 06 F1 | 	add	objptr, #439
0548c     07 75 C2 FA | 	rdbyte	local06, objptr
05490     B7 0F 86 F1 | 	sub	objptr, #439
05494     00 74 5E F2 | 	cmps	local06, #0 wcz
05498     78 00 90 ED |  if_be	jmp	#LR__0218
0549c                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
0549c     3D 7D 02 F6 | 	mov	local10, local09
054a0     B7 0F 06 F1 | 	add	objptr, #439
054a4     07 77 C2 FA | 	rdbyte	local07, objptr
054a8     3B 7F 02 F6 | 	mov	local11, local07
054ac     3B 7D 02 F1 | 	add	local10, local07
054b0     3E 81 02 F6 | 	mov	local12, local10
054b4     40 5D 02 F6 | 	mov	arg01, local12
054b8     06 00 00 FF 
054bc     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054c0     01 5C 66 F0 | 	shl	arg01, #1
054c4     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054c8                 | ' 
054c8                 | '   return word[@periodTable][noteNumber]
054c8     2E 2B E2 FA | 	rdword	result1, arg01
054cc     06 00 00 FF 
054d0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054d4     15 83 02 F6 | 	mov	local13, result1
054d8     35 85 02 F6 | 	mov	local14, local01
054dc     02 84 66 F0 | 	shl	local14, #2
054e0     D8 0E 86 F1 | 	sub	objptr, #216
054e4     07 87 02 F6 | 	mov	local15, objptr
054e8     07 85 02 F1 | 	add	local14, objptr
054ec     41 75 02 F6 | 	mov	local06, local13
054f0     42 89 02 FB | 	rdlong	local16, local14
054f4     44 75 82 F1 | 	sub	local06, local16
054f8     35 8B 02 F6 | 	mov	local17, local01
054fc     02 8A 66 F0 | 	shl	local17, #2
05500     10 0E 06 F1 | 	add	objptr, #16
05504     07 8D 02 F6 | 	mov	local18, objptr
05508     07 8B 02 F1 | 	add	local17, objptr
0550c     45 75 62 FC | 	wrlong	local06, local17
05510     EF 0E 86 F1 | 	sub	objptr, #239
05514                 | LR__0218
05514                 | '         if arpCounter == 2 and y > 0
05514     02 72 0E F2 | 	cmp	local05, #2 wz
05518     8C 00 90 5D |  if_ne	jmp	#LR__0219
0551c     B8 0F 06 F1 | 	add	objptr, #440
05520     07 75 C2 FA | 	rdbyte	local06, objptr
05524     B8 0F 86 F1 | 	sub	objptr, #440
05528     00 74 5E F2 | 	cmps	local06, #0 wcz
0552c     78 00 90 ED |  if_be	jmp	#LR__0219
05530                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05530     3D 7D 02 F6 | 	mov	local10, local09
05534     B8 0F 06 F1 | 	add	objptr, #440
05538     07 77 C2 FA | 	rdbyte	local07, objptr
0553c     3B 7F 02 F6 | 	mov	local11, local07
05540     3B 7D 02 F1 | 	add	local10, local07
05544     3E 81 02 F6 | 	mov	local12, local10
05548     40 5D 02 F6 | 	mov	arg01, local12
0554c     06 00 00 FF 
05550     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05554     01 5C 66 F0 | 	shl	arg01, #1
05558     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0555c                 | ' 
0555c                 | '   return word[@periodTable][noteNumber]
0555c     2E 2B E2 FA | 	rdword	result1, arg01
05560     06 00 00 FF 
05564     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05568     15 83 02 F6 | 	mov	local13, result1
0556c     35 85 02 F6 | 	mov	local14, local01
05570     02 84 66 F0 | 	shl	local14, #2
05574     D9 0E 86 F1 | 	sub	objptr, #217
05578     07 87 02 F6 | 	mov	local15, objptr
0557c     07 85 02 F1 | 	add	local14, objptr
05580     41 75 02 F6 | 	mov	local06, local13
05584     42 89 02 FB | 	rdlong	local16, local14
05588     44 75 82 F1 | 	sub	local06, local16
0558c     35 8B 02 F6 | 	mov	local17, local01
05590     02 8A 66 F0 | 	shl	local17, #2
05594     10 0E 06 F1 | 	add	objptr, #16
05598     07 8D 02 F6 | 	mov	local18, objptr
0559c     07 8B 02 F1 | 	add	local17, objptr
055a0     45 75 62 FC | 	wrlong	local06, local17
055a4     EF 0E 86 F1 | 	sub	objptr, #239
055a8                 | LR__0219
055a8                 | '         if arpCounter == 0 and (x + y) > 0
055a8     00 72 0E F2 | 	cmp	local05, #0 wz
055ac     AC 01 90 5D |  if_ne	jmp	#LR__0231
055b0     B7 0F 06 F1 | 	add	objptr, #439
055b4     07 75 C2 FA | 	rdbyte	local06, objptr
055b8     01 0E 06 F1 | 	add	objptr, #1
055bc     07 77 C2 FA | 	rdbyte	local07, objptr
055c0     B8 0F 86 F1 | 	sub	objptr, #440
055c4     3B 75 02 F1 | 	add	local06, local07
055c8     00 74 5E F2 | 	cmps	local06, #0 wcz
055cc     8C 01 90 ED |  if_be	jmp	#LR__0231
055d0                 | '           deltaPeriod[channel] := 0
055d0     02 6A 66 F0 | 	shl	local01, #2
055d4     EF 0E 06 F1 | 	add	objptr, #239
055d8     07 6B 02 F1 | 	add	local01, objptr
055dc     35 01 68 FC | 	wrlong	#0, local01
055e0     EF 0E 86 F1 | 	sub	objptr, #239
055e4     74 01 90 FD | 	jmp	#LR__0231
055e8                 | LR__0220
055e8                 | ' 
055e8                 | '     $4:                                 ' Vibrato
055e8                 | '       if x > 0
055e8     B7 0F 06 F1 | 	add	objptr, #439
055ec     07 75 C2 FA | 	rdbyte	local06, objptr
055f0     B7 0F 86 F1 | 	sub	objptr, #439
055f4     00 74 5E F2 | 	cmps	local06, #0 wcz
055f8     1C 00 90 ED |  if_be	jmp	#LR__0221
055fc                 | '         cmd4_memoryX[channel] := x
055fc     35 75 02 F6 | 	mov	local06, local01
05600     D0 0F 06 F1 | 	add	objptr, #464
05604     07 75 02 F1 | 	add	local06, objptr
05608     19 0E 86 F1 | 	sub	objptr, #25
0560c     07 7F C2 FA | 	rdbyte	local11, objptr
05610     B7 0F 86 F1 | 	sub	objptr, #439
05614     3A 7F 42 FC | 	wrbyte	local11, local06
05618                 | LR__0221
05618                 | '       if y > 0
05618     B8 0F 06 F1 | 	add	objptr, #440
0561c     07 75 C2 FA | 	rdbyte	local06, objptr
05620     B8 0F 86 F1 | 	sub	objptr, #440
05624     00 74 5E F2 | 	cmps	local06, #0 wcz
05628     1C 00 90 ED |  if_be	jmp	#LR__0222
0562c                 | '         cmd4_memoryY[channel] := y
0562c     35 75 02 F6 | 	mov	local06, local01
05630     CC 0F 06 F1 | 	add	objptr, #460
05634     07 75 02 F1 | 	add	local06, objptr
05638     14 0E 86 F1 | 	sub	objptr, #20
0563c     07 7F C2 FA | 	rdbyte	local11, objptr
05640     B8 0F 86 F1 | 	sub	objptr, #440
05644     3A 7F 42 FC | 	wrbyte	local11, local06
05648                 | LR__0222
05648                 | ' 
05648                 | '       doVibrato(channel)
05648     35 5D 02 F6 | 	mov	arg01, local01
0564c     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05650     08 01 90 FD | 	jmp	#LR__0231
05654                 | LR__0223
05654                 | ' 
05654                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05654     35 5D 02 F6 | 	mov	arg01, local01
05658     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0565c     FC 00 90 FD | 	jmp	#LR__0231
05660                 | LR__0224
05660                 | ' 
05660                 | '     $E:
05660                 | '       if x == $C                        ' Cut note after Y ticks
05660     B7 0F 06 F1 | 	add	objptr, #439
05664     07 75 C2 FA | 	rdbyte	local06, objptr
05668     B7 0F 86 F1 | 	sub	objptr, #439
0566c     0C 74 0E F2 | 	cmp	local06, #12 wz
05670     34 00 90 5D |  if_ne	jmp	#LR__0225
05674                 | '         if tickcounter == y
05674     A1 0E 06 F1 | 	add	objptr, #161
05678     07 75 C2 FA | 	rdbyte	local06, objptr
0567c     17 0F 06 F1 | 	add	objptr, #279
05680     07 7F C2 FA | 	rdbyte	local11, objptr
05684     B8 0F 86 F1 | 	sub	objptr, #440
05688     3F 75 0A F2 | 	cmp	local06, local11 wz
0568c     CC 00 90 5D |  if_ne	jmp	#LR__0230
05690                 | '           currVolume[channel] := 0
05690     02 6A 66 F0 | 	shl	local01, #2
05694     FF 0E 06 F1 | 	add	objptr, #255
05698     07 6B 02 F1 | 	add	local01, objptr
0569c     35 01 68 FC | 	wrlong	#0, local01
056a0     FF 0E 86 F1 | 	sub	objptr, #255
056a4     B4 00 90 FD | 	jmp	#LR__0230
056a8                 | LR__0225
056a8                 | ' 
056a8                 | '       elseif x == $D                    ' Delay note Y ticks
056a8     B7 0F 06 F1 | 	add	objptr, #439
056ac     07 75 C2 FA | 	rdbyte	local06, objptr
056b0     B7 0F 86 F1 | 	sub	objptr, #439
056b4     0D 74 0E F2 | 	cmp	local06, #13 wz
056b8     A0 00 90 5D |  if_ne	jmp	#LR__0229
056bc                 | '         if tickcounter == y
056bc     A1 0E 06 F1 | 	add	objptr, #161
056c0     07 75 C2 FA | 	rdbyte	local06, objptr
056c4     17 0F 06 F1 | 	add	objptr, #279
056c8     07 7F C2 FA | 	rdbyte	local11, objptr
056cc     B8 0F 86 F1 | 	sub	objptr, #440
056d0     3F 75 0A F2 | 	cmp	local06, local11 wz
056d4     0C 00 90 5D |  if_ne	jmp	#LR__0226
056d8                 | '           triggerNote(channel)
056d8     35 5D 02 F6 | 	mov	arg01, local01
056dc     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
056e0     78 00 90 FD | 	jmp	#LR__0228
056e4                 | LR__0226
056e4                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
056e4                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
056e4     B8 0F 06 F1 | 	add	objptr, #440
056e8     07 75 C2 FA | 	rdbyte	local06, objptr
056ec     14 0F 86 F1 | 	sub	objptr, #276
056f0     07 7F C2 FA | 	rdbyte	local11, objptr
056f4     A4 0E 86 F1 | 	sub	objptr, #164
056f8     3F 75 5A F2 | 	cmps	local06, local11 wcz
056fc     5C 00 90 CD |  if_b	jmp	#LR__0227
05700     A4 0E 06 F1 | 	add	objptr, #164
05704     07 83 C2 FA | 	rdbyte	local13, objptr
05708     41 81 02 F6 | 	mov	local12, local13
0570c     01 80 86 F1 | 	sub	local12, #1
05710     03 0E 86 F1 | 	sub	objptr, #3
05714     07 87 C2 FA | 	rdbyte	local15, objptr
05718     A1 0E 86 F1 | 	sub	objptr, #161
0571c     43 85 02 F6 | 	mov	local14, local15
05720     40 85 0A F2 | 	cmp	local14, local12 wz
05724     34 00 90 5D |  if_ne	jmp	#LR__0227
05728                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05728     35 75 02 F6 | 	mov	local06, local01
0572c     02 74 66 F0 | 	shl	local06, #2
05730     27 0F 06 F1 | 	add	objptr, #295
05734     07 7D 02 F6 | 	mov	local10, objptr
05738     07 75 02 F1 | 	add	local06, objptr
0573c     35 7F 02 F6 | 	mov	local11, local01
05740     02 7E 66 F0 | 	shl	local11, #2
05744     48 0E 86 F1 | 	sub	objptr, #72
05748     07 77 02 F6 | 	mov	local07, objptr
0574c     3A 81 02 FB | 	rdlong	local12, local06
05750     3B 7F 02 F1 | 	add	local11, local07
05754     3F 81 62 FC | 	wrlong	local12, local11
05758     DF 0E 86 F1 | 	sub	objptr, #223
0575c                 | LR__0227
0575c                 | LR__0228
0575c                 | LR__0229
0575c                 | LR__0230
0575c                 | LR__0231
0575c     AF F0 03 F6 | 	mov	ptra, fp
05760     BF 00 A0 FD | 	call	#popregs_
05764                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05764     2D 00 64 FD | 	ret
05768                 | 
05768                 | ' 
05768                 | ' 
05768                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05768                 | _trackerplayer_spin2_doTremolo
05768     2E 31 02 F6 | 	mov	_var01, arg01
0576c     18 33 02 F6 | 	mov	_var02, _var01
05770     8B 0F 06 F1 | 	add	objptr, #395
05774     07 33 02 F1 | 	add	_var02, objptr
05778     05 00 00 FF 
0577c     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05780     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05784     19 37 C2 FA | 	rdbyte	_var04, _var02
05788     02 36 66 F0 | 	shl	_var04, #2
0578c     1A 37 02 F1 | 	add	_var04, _var03
05790                 | ' 
05790                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05790     1B 39 02 FB | 	rdlong	_var05, _var04
05794     18 3B 02 F6 | 	mov	_var06, _var01
05798     49 0E 06 F1 | 	add	objptr, #73
0579c     07 3B 02 F1 | 	add	_var06, objptr
057a0                 | '   depth    := cmd7_memoryY[channel]
057a0     1D 3D C2 FA | 	rdbyte	_var07, _var06
057a4     18 3F 02 F6 | 	mov	_var08, _var01
057a8     04 0E 06 F1 | 	add	objptr, #4
057ac     07 3F 02 F1 | 	add	_var08, objptr
057b0                 | '   speed    := cmd7_memoryX[channel]
057b0     1F 41 C2 FA | 	rdbyte	_var09, _var08
057b4                 | ' 
057b4                 | '   CASE_FAST vibratoType[channel]
057b4     18 43 02 F6 | 	mov	_var10, _var01
057b8     18 0E 86 F1 | 	sub	objptr, #24
057bc     07 45 02 F6 | 	mov	_var11, objptr
057c0     07 43 02 F1 | 	add	_var10, objptr
057c4     21 47 C2 FA | 	rdbyte	_var12, _var10
057c8     03 46 26 F3 | 	fle	_var12, #3
057cc     23 49 02 F6 | 	mov	_var13, _var12
057d0     05 00 00 FF 
057d4     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
057d8     C0 0F 86 F1 | 	sub	objptr, #448
057dc     30 48 62 FD | 	jmprel	_var13
057e0                 | LR__0232
057e0     0C 00 90 FD | 	jmp	#LR__0233
057e4     30 00 90 FD | 	jmp	#LR__0234
057e8     6C 00 90 FD | 	jmp	#LR__0235
057ec     B4 00 90 FD | 	jmp	#LR__0236
057f0                 | LR__0233
057f0                 | ' 
057f0                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
057f0     1C 3D 02 FD | 	qmul	_var07, _var05
057f4     18 4A 62 FD | 	getqx	_var14
057f8     06 4A C6 F0 | 	sar	_var14, #6
057fc     18 4D 02 F6 | 	mov	_var15, _var01
05800     02 4C 66 F0 | 	shl	_var15, #2
05804     0F 0F 06 F1 | 	add	objptr, #271
05808     07 4D 02 F1 | 	add	_var15, objptr
0580c     26 4B 62 FC | 	wrlong	_var14, _var15
05810     0F 0F 86 F1 | 	sub	objptr, #271
05814     8C 00 90 FD | 	jmp	#LR__0236
05818                 | LR__0234
05818                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05818     18 4D 02 F6 | 	mov	_var15, _var01
0581c     8B 0F 06 F1 | 	add	objptr, #395
05820     07 4D 02 F1 | 	add	_var15, objptr
05824     26 4F C2 FA | 	rdbyte	_var16, _var15
05828     03 4E 66 F0 | 	shl	_var16, #3
0582c     27 3D 02 FD | 	qmul	_var07, _var16
05830     18 4A 62 FD | 	getqx	_var14
05834     00 4B 86 F1 | 	sub	_var14, #256
05838     06 4A C6 F0 | 	sar	_var14, #6
0583c     18 51 02 F6 | 	mov	_var17, _var01
05840     02 50 66 F0 | 	shl	_var17, #2
05844     7C 0E 86 F1 | 	sub	objptr, #124
05848     07 51 02 F1 | 	add	_var17, objptr
0584c     28 4B 62 FC | 	wrlong	_var14, _var17
05850     0F 0F 86 F1 | 	sub	objptr, #271
05854     4C 00 90 FD | 	jmp	#LR__0236
05858                 | LR__0235
05858                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05858     18 4D 02 F6 | 	mov	_var15, _var01
0585c     8B 0F 06 F1 | 	add	objptr, #395
05860     07 53 02 F6 | 	mov	_var18, objptr
05864     07 4D 02 F1 | 	add	_var15, objptr
05868     26 4F C2 FA | 	rdbyte	_var16, _var15
0586c     20 4E 06 F5 | 	and	_var16, #32
05870     04 4E 66 F0 | 	shl	_var16, #4
05874     27 3D 02 FD | 	qmul	_var07, _var16
05878     18 54 62 FD | 	getqx	_var19
0587c     2A 4B 02 F6 | 	mov	_var14, _var19
05880     00 4B 86 F1 | 	sub	_var14, #256
05884     06 4A C6 F0 | 	sar	_var14, #6
05888     18 51 02 F6 | 	mov	_var17, _var01
0588c     02 50 66 F0 | 	shl	_var17, #2
05890     7C 0E 86 F1 | 	sub	objptr, #124
05894     07 57 02 F6 | 	mov	_var20, objptr
05898     07 51 02 F1 | 	add	_var17, objptr
0589c     28 4B 62 FC | 	wrlong	_var14, _var17
058a0     0F 0F 86 F1 | 	sub	objptr, #271
058a4                 | LR__0236
058a4     8B 0F 06 F1 | 	add	objptr, #395
058a8     07 31 02 F1 | 	add	_var01, objptr
058ac     18 59 C2 FA | 	rdbyte	_var21, _var01
058b0     20 59 02 F1 | 	add	_var21, _var09
058b4     3F 58 06 F5 | 	and	_var21, #63
058b8                 | ' 
058b8                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
058b8     18 59 42 FC | 	wrbyte	_var21, _var01
058bc     8B 0F 86 F1 | 	sub	objptr, #395
058c0                 | _trackerplayer_spin2_doTremolo_ret
058c0     2D 00 64 FD | 	ret
058c4                 | 
058c4                 | ' 
058c4                 | ' 
058c4                 | ' PRI doVibrato(channel) | depth, sineWave, speed
058c4                 | _trackerplayer_spin2_doVibrato
058c4     2E 31 02 F6 | 	mov	_var01, arg01
058c8     18 33 02 F6 | 	mov	_var02, _var01
058cc     87 0F 06 F1 | 	add	objptr, #391
058d0     07 33 02 F1 | 	add	_var02, objptr
058d4     05 00 00 FF 
058d8     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
058dc     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
058e0     19 37 C2 FA | 	rdbyte	_var04, _var02
058e4     02 36 66 F0 | 	shl	_var04, #2
058e8     1A 37 02 F1 | 	add	_var04, _var03
058ec                 | ' 
058ec                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
058ec     1B 39 02 FB | 	rdlong	_var05, _var04
058f0     18 3B 02 F6 | 	mov	_var06, _var01
058f4     45 0E 06 F1 | 	add	objptr, #69
058f8     07 3B 02 F1 | 	add	_var06, objptr
058fc                 | '   depth    := cmd4_memoryY[channel]
058fc     1D 3D C2 FA | 	rdbyte	_var07, _var06
05900     18 3F 02 F6 | 	mov	_var08, _var01
05904     04 0E 06 F1 | 	add	objptr, #4
05908     07 3F 02 F1 | 	add	_var08, objptr
0590c                 | '   speed    := cmd4_memoryX[channel]
0590c     1F 41 C2 FA | 	rdbyte	_var09, _var08
05910                 | ' 
05910                 | '   CASE_FAST vibratoType[channel]
05910     18 43 02 F6 | 	mov	_var10, _var01
05914     10 0E 86 F1 | 	sub	objptr, #16
05918     07 45 02 F6 | 	mov	_var11, objptr
0591c     07 43 02 F1 | 	add	_var10, objptr
05920     21 47 C2 FA | 	rdbyte	_var12, _var10
05924     03 46 26 F3 | 	fle	_var12, #3
05928     23 49 02 F6 | 	mov	_var13, _var12
0592c     05 00 00 FF 
05930     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05934     C0 0F 86 F1 | 	sub	objptr, #448
05938     30 48 62 FD | 	jmprel	_var13
0593c                 | LR__0237
0593c     0C 00 90 FD | 	jmp	#LR__0238
05940     30 00 90 FD | 	jmp	#LR__0239
05944     6C 00 90 FD | 	jmp	#LR__0240
05948     B4 00 90 FD | 	jmp	#LR__0241
0594c                 | LR__0238
0594c                 | ' 
0594c                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
0594c     1C 3D 02 FD | 	qmul	_var07, _var05
05950     18 4A 62 FD | 	getqx	_var14
05954     07 4A C6 F0 | 	sar	_var14, #7
05958     18 4D 02 F6 | 	mov	_var15, _var01
0595c     02 4C 66 F0 | 	shl	_var15, #2
05960     EF 0E 06 F1 | 	add	objptr, #239
05964     07 4D 02 F1 | 	add	_var15, objptr
05968     26 4B 62 FC | 	wrlong	_var14, _var15
0596c     EF 0E 86 F1 | 	sub	objptr, #239
05970     8C 00 90 FD | 	jmp	#LR__0241
05974                 | LR__0239
05974                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05974     18 4D 02 F6 | 	mov	_var15, _var01
05978     87 0F 06 F1 | 	add	objptr, #391
0597c     07 4D 02 F1 | 	add	_var15, objptr
05980     26 4F C2 FA | 	rdbyte	_var16, _var15
05984     03 4E 66 F0 | 	shl	_var16, #3
05988     27 3D 02 FD | 	qmul	_var07, _var16
0598c     18 4A 62 FD | 	getqx	_var14
05990     00 4B 86 F1 | 	sub	_var14, #256
05994     07 4A C6 F0 | 	sar	_var14, #7
05998     18 51 02 F6 | 	mov	_var17, _var01
0599c     02 50 66 F0 | 	shl	_var17, #2
059a0     98 0E 86 F1 | 	sub	objptr, #152
059a4     07 51 02 F1 | 	add	_var17, objptr
059a8     28 4B 62 FC | 	wrlong	_var14, _var17
059ac     EF 0E 86 F1 | 	sub	objptr, #239
059b0     4C 00 90 FD | 	jmp	#LR__0241
059b4                 | LR__0240
059b4                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
059b4     18 4D 02 F6 | 	mov	_var15, _var01
059b8     87 0F 06 F1 | 	add	objptr, #391
059bc     07 53 02 F6 | 	mov	_var18, objptr
059c0     07 4D 02 F1 | 	add	_var15, objptr
059c4     26 4F C2 FA | 	rdbyte	_var16, _var15
059c8     20 4E 06 F5 | 	and	_var16, #32
059cc     04 4E 66 F0 | 	shl	_var16, #4
059d0     27 3D 02 FD | 	qmul	_var07, _var16
059d4     18 54 62 FD | 	getqx	_var19
059d8     2A 4B 02 F6 | 	mov	_var14, _var19
059dc     00 4B 86 F1 | 	sub	_var14, #256
059e0     07 4A C6 F0 | 	sar	_var14, #7
059e4     18 51 02 F6 | 	mov	_var17, _var01
059e8     02 50 66 F0 | 	shl	_var17, #2
059ec     98 0E 86 F1 | 	sub	objptr, #152
059f0     07 57 02 F6 | 	mov	_var20, objptr
059f4     07 51 02 F1 | 	add	_var17, objptr
059f8     28 4B 62 FC | 	wrlong	_var14, _var17
059fc     EF 0E 86 F1 | 	sub	objptr, #239
05a00                 | LR__0241
05a00     87 0F 06 F1 | 	add	objptr, #391
05a04     07 31 02 F1 | 	add	_var01, objptr
05a08     18 59 C2 FA | 	rdbyte	_var21, _var01
05a0c     20 59 02 F1 | 	add	_var21, _var09
05a10     3F 58 06 F5 | 	and	_var21, #63
05a14                 | ' 
05a14                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05a14     18 59 42 FC | 	wrbyte	_var21, _var01
05a18     87 0F 86 F1 | 	sub	objptr, #391
05a1c                 | _trackerplayer_spin2_doVibrato_ret
05a1c     2D 00 64 FD | 	ret
05a20                 | 
05a20                 | ' 
05a20                 | ' 
05a20                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05a20                 | _trackerplayer_spin2_doPortamento
05a20                 | ' 
05a20                 | '   if period == currPeriod[channel]
05a20     2E 31 02 F6 | 	mov	_var01, arg01
05a24     02 30 66 F0 | 	shl	_var01, #2
05a28     DF 0E 06 F1 | 	add	objptr, #223
05a2c     07 33 02 F6 | 	mov	_var02, objptr
05a30     07 31 02 F1 | 	add	_var01, objptr
05a34     18 35 02 FB | 	rdlong	_var03, _var01
05a38     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
05a3c                 | '     return
05a3c     DF 0E 86 F1 | 	sub	objptr, #223
05a40     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05a44                 | ' 
05a44                 | '   if period > 0
05a44     00 5E 5E F2 | 	cmps	arg02, #0 wcz
05a48     1C 00 90 ED |  if_be	jmp	#LR__0242
05a4c     2E 37 02 F6 | 	mov	_var04, arg01
05a50     02 36 66 F0 | 	shl	_var04, #2
05a54     97 0F 06 F1 | 	add	objptr, #407
05a58     07 37 02 F1 | 	add	_var04, objptr
05a5c                 | '     portamentoPeriodMemory[channel] := period
05a5c     1B 5F 62 FC | 	wrlong	arg02, _var04
05a60                 | '   else
05a60     97 0F 86 F1 | 	sub	objptr, #407
05a64     18 00 90 FD | 	jmp	#LR__0243
05a68                 | LR__0242
05a68     2E 39 02 F6 | 	mov	_var05, arg01
05a6c     02 38 66 F0 | 	shl	_var05, #2
05a70     97 0F 06 F1 | 	add	objptr, #407
05a74     07 39 02 F1 | 	add	_var05, objptr
05a78                 | '     period := portamentoPeriodMemory[channel]
05a78     1C 5F 02 FB | 	rdlong	arg02, _var05
05a7c     97 0F 86 F1 | 	sub	objptr, #407
05a80                 | LR__0243
05a80                 | ' 
05a80                 | '   if period > currPeriod[channel]
05a80     2E 31 02 F6 | 	mov	_var01, arg01
05a84     02 30 66 F0 | 	shl	_var01, #2
05a88     DF 0E 06 F1 | 	add	objptr, #223
05a8c     07 31 02 F1 | 	add	_var01, objptr
05a90     18 35 02 FB | 	rdlong	_var03, _var01
05a94     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a98     DF 0E 86 F1 | 	sub	objptr, #223
05a9c     50 00 90 ED |  if_be	jmp	#LR__0244
05aa0     2E 3B 02 F6 | 	mov	_var06, arg01
05aa4     02 3A 66 F0 | 	shl	_var06, #2
05aa8     DF 0E 06 F1 | 	add	objptr, #223
05aac     07 3B 02 F1 | 	add	_var06, objptr
05ab0     2E 3D 02 F6 | 	mov	_var07, arg01
05ab4     E9 0E 06 F1 | 	add	objptr, #233
05ab8     1D 3F 02 FB | 	rdlong	_var08, _var06
05abc     07 3D 02 F1 | 	add	_var07, objptr
05ac0     1E 33 C2 FA | 	rdbyte	_var02, _var07
05ac4     19 3F 02 F1 | 	add	_var08, _var02
05ac8                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05ac8     1D 3F 62 FC | 	wrlong	_var08, _var06
05acc     2E 41 02 F6 | 	mov	_var09, arg01
05ad0     02 40 66 F0 | 	shl	_var09, #2
05ad4     E9 0E 86 F1 | 	sub	objptr, #233
05ad8     07 41 02 F1 | 	add	_var09, objptr
05adc     20 43 02 FB | 	rdlong	_var10, _var09
05ae0     2F 43 62 F3 | 	fles	_var10, arg02
05ae4                 | '     currPeriod[channel] <#= period
05ae4     20 43 62 FC | 	wrlong	_var10, _var09
05ae8     DF 0E 86 F1 | 	sub	objptr, #223
05aec     6C 00 90 FD | 	jmp	#LR__0246
05af0                 | LR__0244
05af0                 | ' 
05af0                 | '   elseif period < currPeriod[channel]
05af0     2E 31 02 F6 | 	mov	_var01, arg01
05af4     02 30 66 F0 | 	shl	_var01, #2
05af8     DF 0E 06 F1 | 	add	objptr, #223
05afc     07 31 02 F1 | 	add	_var01, objptr
05b00     18 35 02 FB | 	rdlong	_var03, _var01
05b04     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05b08     DF 0E 86 F1 | 	sub	objptr, #223
05b0c     4C 00 90 3D |  if_ae	jmp	#LR__0245
05b10     2E 45 02 F6 | 	mov	_var11, arg01
05b14     02 44 66 F0 | 	shl	_var11, #2
05b18     DF 0E 06 F1 | 	add	objptr, #223
05b1c     07 45 02 F1 | 	add	_var11, objptr
05b20     2E 47 02 F6 | 	mov	_var12, arg01
05b24     E9 0E 06 F1 | 	add	objptr, #233
05b28     22 49 02 FB | 	rdlong	_var13, _var11
05b2c     07 47 02 F1 | 	add	_var12, objptr
05b30     23 33 C2 FA | 	rdbyte	_var02, _var12
05b34     19 49 82 F1 | 	sub	_var13, _var02
05b38                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05b38     22 49 62 FC | 	wrlong	_var13, _var11
05b3c     2E 4B 02 F6 | 	mov	_var14, arg01
05b40     02 4A 66 F0 | 	shl	_var14, #2
05b44     E9 0E 86 F1 | 	sub	objptr, #233
05b48     07 4B 02 F1 | 	add	_var14, objptr
05b4c     25 4D 02 FB | 	rdlong	_var15, _var14
05b50     2F 4D 42 F3 | 	fges	_var15, arg02
05b54                 | '     currPeriod[channel] #>= period
05b54     25 4D 62 FC | 	wrlong	_var15, _var14
05b58     DF 0E 86 F1 | 	sub	objptr, #223
05b5c                 | LR__0245
05b5c                 | LR__0246
05b5c                 | ' 
05b5c                 | '   ' Handle glissando if activated
05b5c                 | '   if portaGlissando[channel] > 0
05b5c     2E 31 02 F6 | 	mov	_var01, arg01
05b60     BC 0F 06 F1 | 	add	objptr, #444
05b64     07 31 02 F1 | 	add	_var01, objptr
05b68     18 35 C2 FA | 	rdbyte	_var03, _var01
05b6c     00 34 5E F2 | 	cmps	_var03, #0 wcz
05b70     BC 0F 86 F1 | 	sub	objptr, #444
05b74     A0 00 90 ED |  if_be	jmp	#LR__0249
05b78     2E 4F 02 F6 | 	mov	_var16, arg01
05b7c     02 4E 66 F0 | 	shl	_var16, #2
05b80     DF 0E 06 F1 | 	add	objptr, #223
05b84     07 4F 02 F1 | 	add	_var16, objptr
05b88                 | ' 
05b88                 | '     tempPeriod := currPeriod[channel]
05b88     27 51 02 FB | 	rdlong	_var17, _var16
05b8c                 | ' 
05b8c                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05b8c     00 52 06 F6 | 	mov	_var18, #0
05b90     DF 0E 86 F1 | 	sub	objptr, #223
05b94     CC A4 9F FE | 	loc	pa,	#(@LR__0248-@LR__0247)
05b98     93 00 A0 FD | 	call	#FCACHE_LOAD_
05b9c                 | LR__0247
05b9c     06 00 00 FF 
05ba0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05ba4     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05ba8     2E 55 02 F6 | 	mov	_var19, arg01
05bac     D3 0E 06 F1 | 	add	objptr, #211
05bb0     07 55 02 F1 | 	add	_var19, objptr
05bb4     2A 33 C2 FA | 	rdbyte	_var02, _var19
05bb8     19 57 02 F6 | 	mov	_var20, _var02
05bbc     03 56 66 F0 | 	shl	_var20, #3
05bc0     19 57 02 F1 | 	add	_var20, _var02
05bc4     03 56 66 F0 | 	shl	_var20, #3
05bc8     2B 35 02 F1 | 	add	_var03, _var20
05bcc     29 59 02 F6 | 	mov	_var21, _var18
05bd0     01 58 66 F0 | 	shl	_var21, #1
05bd4     1A 59 02 F1 | 	add	_var21, _var03
05bd8                 | ' 
05bd8                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05bd8     2C 5B E2 FA | 	rdword	_var22, _var21
05bdc                 | '       if tempPeriod >= periodStep
05bdc     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05be0                 | '         i += 1000
05be0     06 00 00 FF 
05be4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05be8     D3 0E 86 F1 | 	sub	objptr, #211
05bec     01 00 00 3F 
05bf0     E8 53 06 31 |  if_ae	add	_var18, ##1000
05bf4     01 52 06 F1 | 	add	_var18, #1
05bf8     24 52 5E F2 | 	cmps	_var18, #36 wcz
05bfc     9C FF 9F CD |  if_b	jmp	#LR__0247
05c00                 | LR__0248
05c00     28 5B 82 F1 | 	sub	_var22, _var17
05c04     02 5C 66 F0 | 	shl	arg01, #2
05c08     EF 0E 06 F1 | 	add	objptr, #239
05c0c     07 5D 02 F1 | 	add	arg01, objptr
05c10                 | ' 
05c10                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05c10     2E 5B 62 FC | 	wrlong	_var22, arg01
05c14     EF 0E 86 F1 | 	sub	objptr, #239
05c18                 | LR__0249
05c18                 | _trackerplayer_spin2_doPortamento_ret
05c18     2D 00 64 FD | 	ret
05c1c                 | 
05c1c                 | ' 
05c1c                 | ' 
05c1c                 | ' PRI doVolumeSlide(channel)
05c1c                 | _trackerplayer_spin2_doVolumeSlide
05c1c                 | ' 
05c1c                 | '   if x > 0
05c1c     B7 0F 06 F1 | 	add	objptr, #439
05c20     07 31 C2 FA | 	rdbyte	_var01, objptr
05c24     B7 0F 86 F1 | 	sub	objptr, #439
05c28     00 30 5E F2 | 	cmps	_var01, #0 wcz
05c2c     28 00 90 ED |  if_be	jmp	#LR__0250
05c30     2E 33 02 F6 | 	mov	_var02, arg01
05c34     02 32 66 F0 | 	shl	_var02, #2
05c38     FF 0E 06 F1 | 	add	objptr, #255
05c3c     07 33 02 F1 | 	add	_var02, objptr
05c40     19 35 02 FB | 	rdlong	_var03, _var02
05c44     B8 0E 06 F1 | 	add	objptr, #184
05c48     07 37 C2 FA | 	rdbyte	_var04, objptr
05c4c     B7 0F 86 F1 | 	sub	objptr, #439
05c50     1B 35 02 F1 | 	add	_var03, _var04
05c54                 | '     currVolume[channel] += x
05c54     19 35 62 FC | 	wrlong	_var03, _var02
05c58                 | LR__0250
05c58                 | '   if y > 0
05c58     B8 0F 06 F1 | 	add	objptr, #440
05c5c     07 31 C2 FA | 	rdbyte	_var01, objptr
05c60     B8 0F 86 F1 | 	sub	objptr, #440
05c64     00 30 5E F2 | 	cmps	_var01, #0 wcz
05c68     24 00 90 ED |  if_be	jmp	#LR__0251
05c6c     02 5C 66 F0 | 	shl	arg01, #2
05c70     FF 0E 06 F1 | 	add	objptr, #255
05c74     07 5D 02 F1 | 	add	arg01, objptr
05c78     2E 39 02 FB | 	rdlong	_var05, arg01
05c7c     B9 0E 06 F1 | 	add	objptr, #185
05c80     07 37 C2 FA | 	rdbyte	_var04, objptr
05c84     B8 0F 86 F1 | 	sub	objptr, #440
05c88     1B 39 82 F1 | 	sub	_var05, _var04
05c8c                 | '     currVolume[channel] -= y
05c8c     2E 39 62 FC | 	wrlong	_var05, arg01
05c90                 | LR__0251
05c90                 | _trackerplayer_spin2_doVolumeSlide_ret
05c90     2D 00 64 FD | 	ret
05c94                 | hubexit
05c94     81 00 80 FD | 	jmp	#cogexit
05c98                 | 
05c98                 | __system___setbaud
05c98     14 0A 07 FB | 	rdlong	muldiva_, #20
05c9c     2E 0D 03 F6 | 	mov	muldivb_, arg01
05ca0     D0 00 A0 FD | 	call	#divide_
05ca4     40 7C 64 FD | 	dirl	#62
05ca8     40 7E 64 FD | 	dirl	#63
05cac     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05cb0     10 0C 67 F0 | 	shl	muldivb_, #16
05cb4     07 5E 06 F6 | 	mov	arg02, #7
05cb8     86 5F 02 F1 | 	add	arg02, muldivb_
05cbc     3E F8 0C FC | 	wrpin	#124, #62
05cc0     3E 5E 16 FC | 	wxpin	arg02, #62
05cc4     3F 7C 0C FC | 	wrpin	#62, #63
05cc8     14 5E 06 F1 | 	add	arg02, #20
05ccc     3F 5E 16 FC | 	wxpin	arg02, #63
05cd0     41 7C 64 FD | 	dirh	#62
05cd4     41 7E 64 FD | 	dirh	#63
05cd8                 | __system___setbaud_ret
05cd8     2D 00 64 FD | 	ret
05cdc                 | 
05cdc                 | __system___txraw
05cdc     02 5A 05 F6 | 	mov	COUNT_, #2
05ce0     B0 00 A0 FD | 	call	#pushregs_
05ce4     2E 6B 02 F6 | 	mov	local01, arg01
05ce8     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05cec     0C 00 90 5D |  if_ne	jmp	#LR__0252
05cf0     42 0F 00 FF 
05cf4     80 5C 06 F6 | 	mov	arg01, ##2000000
05cf8     9C FF BF FD | 	call	#__system___setbaud
05cfc                 | LR__0252
05cfc     3E 6A 26 FC | 	wypin	local01, #62
05d00     1F 02 64 FD | 	waitx	#1
05d04     00 A3 9F FE | 	loc	pa,	#(@LR__0254-@LR__0253)
05d08     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d0c                 | LR__0253
05d0c     40 7C 74 FD | 	testp	#62 wc
05d10     F8 FF 9F 3D |  if_nc	jmp	#LR__0253
05d14                 | LR__0254
05d14     01 2A 06 F6 | 	mov	result1, #1
05d18     AF F0 03 F6 | 	mov	ptra, fp
05d1c     BF 00 A0 FD | 	call	#popregs_
05d20                 | __system___txraw_ret
05d20     2D 00 64 FD | 	ret
05d24                 | 
05d24                 | __system___rxraw
05d24     0D 5A 05 F6 | 	mov	COUNT_, #13
05d28     B0 00 A0 FD | 	call	#pushregs_
05d2c     2E 6B 02 F6 | 	mov	local01, arg01
05d30     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05d34     0C 00 90 5D |  if_ne	jmp	#LR__0255
05d38     42 0F 00 FF 
05d3c     80 5C 06 F6 | 	mov	arg01, ##2000000
05d40     54 FF BF FD | 	call	#__system___setbaud
05d44                 | LR__0255
05d44     00 6A 0E F2 | 	cmp	local01, #0 wz
05d48     18 00 90 AD |  if_e	jmp	#LR__0256
05d4c     14 6E 06 FB | 	rdlong	local03, #20
05d50     0A 6E 46 F0 | 	shr	local03, #10
05d54     37 6B 02 FD | 	qmul	local01, local03
05d58     18 70 62 FD | 	getqx	local04
05d5c     1A 72 62 FD | 	getct	local05
05d60     38 73 02 F1 | 	add	local05, local04
05d64                 | LR__0256
05d64     01 74 66 F6 | 	neg	local06, #1
05d68     00 76 06 F6 | 	mov	local07, #0
05d6c     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d70     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05d74     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d78                 | LR__0257
05d78     08 78 16 F4 | 	testb	local08, #8 wc
05d7c     09 78 76 F4 | 	testbn	local08, #9 andc
05d80     0A 78 46 F0 | 	shr	local08, #10
05d84     01 76 06 C6 |  if_b	mov	local07, #1
05d88     10 00 90 CD |  if_b	jmp	#LR__0258
05d8c     40 7E 6C FD | 	testp	#63 wz
05d90     01 76 06 A6 |  if_e	mov	local07, #1
05d94     3F 78 8E AA |  if_e	rdpin	local08, #63
05d98     04 78 46 A0 |  if_e	shr	local08, #4
05d9c                 | LR__0258
05d9c     00 6C 06 F6 | 	mov	local02, #0
05da0     00 76 0E F2 | 	cmp	local07, #0 wz
05da4     01 6C 66 56 |  if_ne	neg	local02, #1
05da8     00 7A 06 F6 | 	mov	local09, #0
05dac     00 7C 06 F6 | 	mov	local10, #0
05db0     00 6A 0E F2 | 	cmp	local01, #0 wz
05db4     01 7C 66 56 |  if_ne	neg	local10, #1
05db8     00 7E 06 F6 | 	mov	local11, #0
05dbc     00 80 06 F6 | 	mov	local12, #0
05dc0     1A 82 62 FD | 	getct	local13
05dc4     39 83 82 F1 | 	sub	local13, local05
05dc8     00 82 5E F2 | 	cmps	local13, #0 wcz
05dcc     01 80 66 C6 |  if_b	neg	local12, #1
05dd0     00 80 0E F2 | 	cmp	local12, #0 wz
05dd4     01 7E 66 56 |  if_ne	neg	local11, #1
05dd8     3F 7D CA F7 | 	test	local10, local11 wz
05ddc     01 7A 66 56 |  if_ne	neg	local09, #1
05de0     3D 6D 4A F5 | 	or	local02, local09 wz
05de4     90 FF 9F AD |  if_e	jmp	#LR__0257
05de8     00 76 0E F2 | 	cmp	local07, #0 wz
05dec     3C 75 02 56 |  if_ne	mov	local06, local08
05df0     FF 74 06 55 |  if_ne	and	local06, #255
05df4     04 14 06 F1 | 	add	ptr___system__dat__, #4
05df8     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05dfc     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05e00     3A 2B 02 F6 | 	mov	result1, local06
05e04     AF F0 03 F6 | 	mov	ptra, fp
05e08     BF 00 A0 FD | 	call	#popregs_
05e0c                 | __system___rxraw_ret
05e0c     2D 00 64 FD | 	ret
05e10                 | 
05e10                 | __system____builtin_memmove
05e10     2E 31 02 F6 | 	mov	_var01, arg01
05e14     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e18     50 00 90 3D |  if_ae	jmp	#LR__0266
05e1c     00 A2 9F FE | 	loc	pa,	#(@LR__0260-@LR__0259)
05e20     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e24                 | LR__0259
05e24     03 60 5E F2 | 	cmps	arg03, #3 wcz
05e28     18 00 90 ED |  if_be	jmp	#LR__0261
05e2c     2F 33 02 FB | 	rdlong	_var02, arg02
05e30     2E 33 62 FC | 	wrlong	_var02, arg01
05e34     04 5C 06 F1 | 	add	arg01, #4
05e38     04 5E 06 F1 | 	add	arg02, #4
05e3c     04 60 86 F1 | 	sub	arg03, #4
05e40     E0 FF 9F FD | 	jmp	#LR__0259
05e44                 | LR__0260
05e44                 | LR__0261
05e44     30 35 0A F6 | 	mov	_var03, arg03 wz
05e48     4C 00 90 AD |  if_e	jmp	#LR__0272
05e4c     C4 A1 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05e50     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e54                 | LR__0262
05e54     1A 09 D8 FC | 	rep	@LR__0265, _var03
05e58                 | LR__0263
05e58     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e5c     2E 33 42 FC | 	wrbyte	_var02, arg01
05e60     01 5C 06 F1 | 	add	arg01, #1
05e64     01 5E 06 F1 | 	add	arg02, #1
05e68                 | LR__0264
05e68                 | LR__0265
05e68     2C 00 90 FD | 	jmp	#LR__0272
05e6c                 | LR__0266
05e6c     30 5D 02 F1 | 	add	arg01, arg03
05e70     30 5F 02 F1 | 	add	arg02, arg03
05e74     30 37 0A F6 | 	mov	_var04, arg03 wz
05e78     1C 00 90 AD |  if_e	jmp	#LR__0271
05e7c     94 A1 9F FE | 	loc	pa,	#(@LR__0269-@LR__0267)
05e80     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e84                 | LR__0267
05e84     1B 09 D8 FC | 	rep	@LR__0270, _var04
05e88                 | LR__0268
05e88     01 5C 86 F1 | 	sub	arg01, #1
05e8c     01 5E 86 F1 | 	sub	arg02, #1
05e90     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e94     2E 33 42 FC | 	wrbyte	_var02, arg01
05e98                 | LR__0269
05e98                 | LR__0270
05e98                 | LR__0271
05e98                 | LR__0272
05e98     18 2B 02 F6 | 	mov	result1, _var01
05e9c                 | __system____builtin_memmove_ret
05e9c     2D 00 64 FD | 	ret
05ea0                 | 
05ea0                 | __system__longmove
05ea0     2E 31 02 F6 | 	mov	_var01, arg01
05ea4     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05ea8     28 00 90 3D |  if_ae	jmp	#LR__0277
05eac     30 33 0A F6 | 	mov	_var02, arg03 wz
05eb0     54 00 90 AD |  if_e	jmp	#LR__0283
05eb4     5C A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05eb8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ebc                 | LR__0273
05ebc     19 09 D8 FC | 	rep	@LR__0276, _var02
05ec0                 | LR__0274
05ec0     2F 35 02 FB | 	rdlong	_var03, arg02
05ec4     2E 35 62 FC | 	wrlong	_var03, arg01
05ec8     04 5C 06 F1 | 	add	arg01, #4
05ecc     04 5E 06 F1 | 	add	arg02, #4
05ed0                 | LR__0275
05ed0                 | LR__0276
05ed0     34 00 90 FD | 	jmp	#LR__0283
05ed4                 | LR__0277
05ed4     30 37 02 F6 | 	mov	_var04, arg03
05ed8     02 36 66 F0 | 	shl	_var04, #2
05edc     1B 5D 02 F1 | 	add	arg01, _var04
05ee0     1B 5F 02 F1 | 	add	arg02, _var04
05ee4     30 39 0A F6 | 	mov	_var05, arg03 wz
05ee8     1C 00 90 AD |  if_e	jmp	#LR__0282
05eec     24 A1 9F FE | 	loc	pa,	#(@LR__0280-@LR__0278)
05ef0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ef4                 | LR__0278
05ef4     1C 09 D8 FC | 	rep	@LR__0281, _var05
05ef8                 | LR__0279
05ef8     04 5C 86 F1 | 	sub	arg01, #4
05efc     04 5E 86 F1 | 	sub	arg02, #4
05f00     2F 35 02 FB | 	rdlong	_var03, arg02
05f04     2E 35 62 FC | 	wrlong	_var03, arg01
05f08                 | LR__0280
05f08                 | LR__0281
05f08                 | LR__0282
05f08                 | LR__0283
05f08     18 2B 02 F6 | 	mov	result1, _var01
05f0c                 | __system__longmove_ret
05f0c     2D 00 64 FD | 	ret
05f10                 | 
05f10                 | __system____topofstack
05f10     00 5A 05 F6 | 	mov	COUNT_, #0
05f14     B0 00 A0 FD | 	call	#pushregs_
05f18     0C F0 07 F1 | 	add	ptra, #12
05f1c     04 5E 05 F1 | 	add	fp, #4
05f20     AF 5C 62 FC | 	wrlong	arg01, fp
05f24     AF 2A 02 F6 | 	mov	result1, fp
05f28     04 5E 85 F1 | 	sub	fp, #4
05f2c     AF F0 03 F6 | 	mov	ptra, fp
05f30     BF 00 A0 FD | 	call	#popregs_
05f34                 | __system____topofstack_ret
05f34     2D 00 64 FD | 	ret
05f38                 | 
05f38                 | __system___make_methodptr
05f38     04 5A 05 F6 | 	mov	COUNT_, #4
05f3c     B0 00 A0 FD | 	call	#pushregs_
05f40     2E 6B 02 F6 | 	mov	local01, arg01
05f44     2F 6D 02 F6 | 	mov	local02, arg02
05f48     08 5C 06 F6 | 	mov	arg01, #8
05f4c     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05f50     15 6F 0A F6 | 	mov	local03, result1 wz
05f54     10 00 90 AD |  if_e	jmp	#LR__0284
05f58     37 6B 62 FC | 	wrlong	local01, local03
05f5c     37 71 02 F6 | 	mov	local04, local03
05f60     04 70 06 F1 | 	add	local04, #4
05f64     38 6D 62 FC | 	wrlong	local02, local04
05f68                 | LR__0284
05f68     37 2B 02 F6 | 	mov	result1, local03
05f6c     AF F0 03 F6 | 	mov	ptra, fp
05f70     BF 00 A0 FD | 	call	#popregs_
05f74                 | __system___make_methodptr_ret
05f74     2D 00 64 FD | 	ret
05f78                 | 
05f78                 | __system___lockmem
05f78     02 5A 05 F6 | 	mov	COUNT_, #2
05f7c     B0 00 A0 FD | 	call	#pushregs_
05f80     01 2A 62 FD | 	cogid	result1
05f84     15 6B 02 F6 | 	mov	local01, result1
05f88     00 6B 06 F1 | 	add	local01, #256
05f8c                 | LR__0285
05f8c     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05f90     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05f94     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f98     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f9c     35 6D 0A F2 | 	cmp	local02, local01 wz
05fa0     E8 FF 9F 5D |  if_ne	jmp	#LR__0285
05fa4     AF F0 03 F6 | 	mov	ptra, fp
05fa8     BF 00 A0 FD | 	call	#popregs_
05fac                 | __system___lockmem_ret
05fac     2D 00 64 FD | 	ret
05fb0                 | 
05fb0                 | __system___string_concat
05fb0     07 5A 05 F6 | 	mov	COUNT_, #7
05fb4     B0 00 A0 FD | 	call	#pushregs_
05fb8     2E 6B 02 F6 | 	mov	local01, arg01
05fbc     2F 6D 02 F6 | 	mov	local02, arg02
05fc0     35 5D 02 F6 | 	mov	arg01, local01
05fc4     00 6E 06 F6 | 	mov	local03, #0
05fc8     44 A0 9F FE | 	loc	pa,	#(@LR__0287-@LR__0286)
05fcc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05fd0                 | LR__0286
05fd0     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05fd4     01 6E 06 51 |  if_ne	add	local03, #1
05fd8     01 5C 06 51 |  if_ne	add	arg01, #1
05fdc     F0 FF 9F 5D |  if_ne	jmp	#LR__0286
05fe0                 | LR__0287
05fe0     37 73 02 F6 | 	mov	local05, local03
05fe4     36 5D 02 F6 | 	mov	arg01, local02
05fe8     00 6E 06 F6 | 	mov	local03, #0
05fec     20 A0 9F FE | 	loc	pa,	#(@LR__0289-@LR__0288)
05ff0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ff4                 | LR__0288
05ff4     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05ff8     01 6E 06 51 |  if_ne	add	local03, #1
05ffc     01 5C 06 51 |  if_ne	add	arg01, #1
06000     F0 FF 9F 5D |  if_ne	jmp	#LR__0288
06004                 | LR__0289
06004     37 2B 02 F6 | 	mov	result1, local03
06008     15 75 02 F6 | 	mov	local06, result1
0600c     39 5D 02 F6 | 	mov	arg01, local05
06010     3A 5D 02 F1 | 	add	arg01, local06
06014     01 5C 06 F1 | 	add	arg01, #1
06018     90 0B B0 FD | 	call	#__system___gc_alloc_managed
0601c     15 77 0A F6 | 	mov	local07, result1 wz
06020     28 00 90 AD |  if_e	jmp	#LR__0290
06024     3B 5D 02 F6 | 	mov	arg01, local07
06028     35 5F 02 F6 | 	mov	arg02, local01
0602c     39 61 02 F6 | 	mov	arg03, local05
06030     DC FD BF FD | 	call	#__system____builtin_memmove
06034     3B 5D 02 F6 | 	mov	arg01, local07
06038     39 5D 02 F1 | 	add	arg01, local05
0603c     01 74 06 F1 | 	add	local06, #1
06040     36 5F 02 F6 | 	mov	arg02, local02
06044     3A 61 02 F6 | 	mov	arg03, local06
06048     C4 FD BF FD | 	call	#__system____builtin_memmove
0604c                 | LR__0290
0604c     3B 2B 02 F6 | 	mov	result1, local07
06050     AF F0 03 F6 | 	mov	ptra, fp
06054     BF 00 A0 FD | 	call	#popregs_
06058                 | __system___string_concat_ret
06058     2D 00 64 FD | 	ret
0605c                 | 
0605c                 | __system___tx
0605c     02 5A 05 F6 | 	mov	COUNT_, #2
06060     B0 00 A0 FD | 	call	#pushregs_
06064     2E 6B 02 F6 | 	mov	local01, arg01
06068     0A 6A 0E F2 | 	cmp	local01, #10 wz
0606c     20 00 90 5D |  if_ne	jmp	#LR__0291
06070     08 14 06 F1 | 	add	ptr___system__dat__, #8
06074     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06078     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0607c     02 6C CE F7 | 	test	local02, #2 wz
06080     0C 00 90 AD |  if_e	jmp	#LR__0291
06084     0D 6C 06 F6 | 	mov	local02, #13
06088     0D 5C 06 F6 | 	mov	arg01, #13
0608c     4C FC BF FD | 	call	#__system___txraw
06090                 | LR__0291
06090     35 5D 02 F6 | 	mov	arg01, local01
06094     44 FC BF FD | 	call	#__system___txraw
06098     AF F0 03 F6 | 	mov	ptra, fp
0609c     BF 00 A0 FD | 	call	#popregs_
060a0                 | __system___tx_ret
060a0     2D 00 64 FD | 	ret
060a4                 | 
060a4                 | __system___rx
060a4     02 5A 05 F6 | 	mov	COUNT_, #2
060a8     B0 00 A0 FD | 	call	#pushregs_
060ac                 | LR__0292
060ac     00 5C 06 F6 | 	mov	arg01, #0
060b0     70 FC BF FD | 	call	#__system___rxraw
060b4     15 6B 02 F6 | 	mov	local01, result1
060b8     FF FF 7F FF 
060bc     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
060c0     E8 FF 9F AD |  if_e	jmp	#LR__0292
060c4     0D 6A 0E F2 | 	cmp	local01, #13 wz
060c8     14 00 90 5D |  if_ne	jmp	#LR__0293
060cc     08 14 06 F1 | 	add	ptr___system__dat__, #8
060d0     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
060d4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
060d8     02 6C CE F7 | 	test	local02, #2 wz
060dc     0A 6A 06 56 |  if_ne	mov	local01, #10
060e0                 | LR__0293
060e0     08 14 06 F1 | 	add	ptr___system__dat__, #8
060e4     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
060e8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
060ec     01 6C CE F7 | 	test	local02, #1 wz
060f0     1C 00 90 AD |  if_e	jmp	#LR__0296
060f4     7F 6A 0E F2 | 	cmp	local01, #127 wz
060f8     0C 00 90 5D |  if_ne	jmp	#LR__0294
060fc     08 5C 06 F6 | 	mov	arg01, #8
06100     58 FF BF FD | 	call	#__system___tx
06104     08 00 90 FD | 	jmp	#LR__0295
06108                 | LR__0294
06108     35 5D 02 F6 | 	mov	arg01, local01
0610c     4C FF BF FD | 	call	#__system___tx
06110                 | LR__0295
06110                 | LR__0296
06110     35 2B 02 F6 | 	mov	result1, local01
06114     AF F0 03 F6 | 	mov	ptra, fp
06118     BF 00 A0 FD | 	call	#popregs_
0611c                 | __system___rx_ret
0611c     2D 00 64 FD | 	ret
06120                 | 
06120                 | __system___pinread
06120     20 5C CE F7 | 	test	arg01, #32 wz
06124     FF 31 02 56 |  if_ne	mov	_var01, inb
06128     FE 31 02 A6 |  if_e	mov	_var01, ina
0612c     18 2B 02 F6 | 	mov	result1, _var01
06130     2E 2B 42 F0 | 	shr	result1, arg01
06134     06 5C 46 F0 | 	shr	arg01, #6
06138     2E 2B 42 F7 | 	zerox	result1, arg01
0613c                 | __system___pinread_ret
0613c     2D 00 64 FD | 	ret
06140                 | 
06140                 | __system___waitms
06140     03 5A 05 F6 | 	mov	COUNT_, #3
06144     B0 00 A0 FD | 	call	#pushregs_
06148     2E 6B 02 F6 | 	mov	local01, arg01
0614c     14 6C 06 FB | 	rdlong	local02, #20
06150     C4 9E 9F FE | 	loc	pa,	#(@LR__0298-@LR__0297)
06154     93 00 A0 FD | 	call	#FCACHE_LOAD_
06158                 | LR__0297
06158     01 00 00 FF 
0615c     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
06160     1F 6C 62 1D |  if_a	waitx	local02
06164     01 00 00 1F 
06168     E8 6B 86 11 |  if_a	sub	local01, ##1000
0616c     E8 FF 9F 1D |  if_a	jmp	#LR__0297
06170                 | LR__0298
06170     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06174     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06178     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
0617c     20 00 90 5D |  if_ne	jmp	#LR__0299
06180     36 0B 03 F6 | 	mov	muldiva_, local02
06184     01 00 00 FF 
06188     E8 0D 07 F6 | 	mov	muldivb_, ##1000
0618c     CC 00 A0 FD | 	call	#unsdivide_
06190     86 6F 02 F6 | 	mov	local03, muldivb_
06194     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06198     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
0619c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
061a0                 | LR__0299
061a0     00 6A 5E F2 | 	cmps	local01, #0 wcz
061a4     37 6B 02 1D |  if_a	qmul	local01, local03
061a8     18 5C 62 1D |  if_a	getqx	arg01
061ac     1F 5C 62 1D |  if_a	waitx	arg01
061b0     AF F0 03 F6 | 	mov	ptra, fp
061b4     BF 00 A0 FD | 	call	#popregs_
061b8                 | __system___waitms_ret
061b8     2D 00 64 FD | 	ret
061bc                 | 
061bc                 | __system___waitus
061bc     02 5A 05 F6 | 	mov	COUNT_, #2
061c0     B0 00 A0 FD | 	call	#pushregs_
061c4     2E 6B 02 F6 | 	mov	local01, arg01
061c8     10 14 06 F1 | 	add	ptr___system__dat__, #16
061cc     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
061d0     10 14 86 F1 | 	sub	ptr___system__dat__, #16
061d4     20 00 90 5D |  if_ne	jmp	#LR__0300
061d8     14 0A 07 FB | 	rdlong	muldiva_, #20
061dc     A1 07 00 FF 
061e0     40 0C 07 F6 | 	mov	muldivb_, ##1000000
061e4     CC 00 A0 FD | 	call	#unsdivide_
061e8     86 6D 02 F6 | 	mov	local02, muldivb_
061ec     10 14 06 F1 | 	add	ptr___system__dat__, #16
061f0     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
061f4     10 14 86 F1 | 	sub	ptr___system__dat__, #16
061f8                 | LR__0300
061f8     36 6B 02 FD | 	qmul	local01, local02
061fc     18 5C 62 FD | 	getqx	arg01
06200     1F 5C 62 FD | 	waitx	arg01
06204     AF F0 03 F6 | 	mov	ptra, fp
06208     BF 00 A0 FD | 	call	#popregs_
0620c                 | __system___waitus_ret
0620c     2D 00 64 FD | 	ret
06210                 | 
06210                 | __system___basic_open
06210     05 5A 05 F6 | 	mov	COUNT_, #5
06214     B0 00 A0 FD | 	call	#pushregs_
06218     2F 6B 02 F6 | 	mov	local01, arg02
0621c     30 6D 02 F6 | 	mov	local02, arg03
06220     31 6F 02 F6 | 	mov	local03, arg04
06224     88 11 B0 FD | 	call	#__system____getftab
06228     15 71 0A F6 | 	mov	local04, result1 wz
0622c     18 00 90 5D |  if_ne	jmp	#LR__0301
06230     03 5D 02 F6 | 	mov	arg01, abortchain
06234     0C 5E 06 F6 | 	mov	arg02, #12
06238     01 60 06 F6 | 	mov	arg03, #1
0623c     F0 00 A0 FD | 	call	#__longjmp
06240     01 2A 66 F6 | 	neg	result1, #1
06244     70 00 90 FD | 	jmp	#LR__0305
06248                 | LR__0301
06248     00 6A 0E F2 | 	cmp	local01, #0 wz
0624c     48 00 90 AD |  if_e	jmp	#LR__0303
06250     04 5C 06 F6 | 	mov	arg01, #4
06254     54 09 B0 FD | 	call	#__system___gc_alloc_managed
06258     15 73 0A F6 | 	mov	local05, result1 wz
0625c     18 00 90 5D |  if_ne	jmp	#LR__0302
06260     03 5D 02 F6 | 	mov	arg01, abortchain
06264     07 5E 06 F6 | 	mov	arg02, #7
06268     01 60 06 F6 | 	mov	arg03, #1
0626c     F0 00 A0 FD | 	call	#__longjmp
06270     01 2A 66 F6 | 	neg	result1, #1
06274     40 00 90 FD | 	jmp	#LR__0305
06278                 | LR__0302
06278     39 6B 62 FC | 	wrlong	local01, local05
0627c     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06280     39 5D 02 F6 | 	mov	arg01, local05
06284     B0 FC BF FD | 	call	#__system___make_methodptr
06288     18 70 06 F1 | 	add	local04, #24
0628c     38 2B 62 FC | 	wrlong	result1, local04
06290     18 70 86 F1 | 	sub	local04, #24
06294     0C 00 90 FD | 	jmp	#LR__0304
06298                 | LR__0303
06298     18 70 06 F1 | 	add	local04, #24
0629c     38 6B 62 FC | 	wrlong	local01, local04
062a0     18 70 86 F1 | 	sub	local04, #24
062a4                 | LR__0304
062a4     1C 70 06 F1 | 	add	local04, #28
062a8     38 6D 62 FC | 	wrlong	local02, local04
062ac     04 70 06 F1 | 	add	local04, #4
062b0     38 6F 62 FC | 	wrlong	local03, local04
062b4     00 2A 06 F6 | 	mov	result1, #0
062b8                 | LR__0305
062b8     AF F0 03 F6 | 	mov	ptra, fp
062bc     BF 00 A0 FD | 	call	#popregs_
062c0                 | __system___basic_open_ret
062c0     2D 00 64 FD | 	ret
062c4                 | 
062c4                 | __system___basic_print_char
062c4     05 5A 05 F6 | 	mov	COUNT_, #5
062c8     B0 00 A0 FD | 	call	#pushregs_
062cc     2F 6B 02 F6 | 	mov	local01, arg02
062d0     A0 12 B0 FD | 	call	#__system___gettxfunc
062d4     15 6D 0A F6 | 	mov	local02, result1 wz
062d8     00 2A 06 A6 |  if_e	mov	result1, #0
062dc     24 00 90 AD |  if_e	jmp	#LR__0306
062e0     36 6F 02 FB | 	rdlong	local03, local02
062e4     04 6C 06 F1 | 	add	local02, #4
062e8     36 71 02 FB | 	rdlong	local04, local02
062ec     35 5D 02 F6 | 	mov	arg01, local01
062f0     07 73 02 F6 | 	mov	local05, objptr
062f4     37 0F 02 F6 | 	mov	objptr, local03
062f8     2D 70 62 FD | 	call	local04
062fc     39 0F 02 F6 | 	mov	objptr, local05
06300     01 2A 06 F6 | 	mov	result1, #1
06304                 | LR__0306
06304     AF F0 03 F6 | 	mov	ptra, fp
06308     BF 00 A0 FD | 	call	#popregs_
0630c                 | __system___basic_print_char_ret
0630c     2D 00 64 FD | 	ret
06310                 | 
06310                 | __system___basic_print_string
06310     03 5A 05 F6 | 	mov	COUNT_, #3
06314     B0 00 A0 FD | 	call	#pushregs_
06318     2F 6B 02 F6 | 	mov	local01, arg02
0631c     30 6D 02 F6 | 	mov	local02, arg03
06320     50 12 B0 FD | 	call	#__system___gettxfunc
06324     15 6F 0A F6 | 	mov	local03, result1 wz
06328     00 2A 06 A6 |  if_e	mov	result1, #0
0632c     1C 00 90 AD |  if_e	jmp	#LR__0307
06330     00 6A 0E F2 | 	cmp	local01, #0 wz
06334     00 2A 06 A6 |  if_e	mov	result1, #0
06338     10 00 90 AD |  if_e	jmp	#LR__0307
0633c     37 5D 02 F6 | 	mov	arg01, local03
06340     36 5F 02 F6 | 	mov	arg02, local02
06344     35 61 02 F6 | 	mov	arg03, local01
06348     B0 00 B0 FD | 	call	#__system___fmtstr
0634c                 | LR__0307
0634c     AF F0 03 F6 | 	mov	ptra, fp
06350     BF 00 A0 FD | 	call	#popregs_
06354                 | __system___basic_print_string_ret
06354     2D 00 64 FD | 	ret
06358                 | 
06358                 | __system___basic_print_integer
06358     04 5A 05 F6 | 	mov	COUNT_, #4
0635c     B0 00 A0 FD | 	call	#pushregs_
06360     2F 6B 02 F6 | 	mov	local01, arg02
06364     30 6D 02 F6 | 	mov	local02, arg03
06368     31 6F 02 F6 | 	mov	local03, arg04
0636c     04 12 B0 FD | 	call	#__system___gettxfunc
06370     15 71 0A F6 | 	mov	local04, result1 wz
06374     00 2A 06 A6 |  if_e	mov	result1, #0
06378     14 00 90 AD |  if_e	jmp	#LR__0308
0637c     38 5D 02 F6 | 	mov	arg01, local04
06380     36 5F 02 F6 | 	mov	arg02, local02
06384     35 61 02 F6 | 	mov	arg03, local01
06388     37 63 02 F6 | 	mov	arg04, local03
0638c     60 01 B0 FD | 	call	#__system___fmtnum
06390                 | LR__0308
06390     AF F0 03 F6 | 	mov	ptra, fp
06394     BF 00 A0 FD | 	call	#popregs_
06398                 | __system___basic_print_integer_ret
06398     2D 00 64 FD | 	ret
0639c                 | 
0639c                 | __system___fmtchar
0639c     00 5A 05 F6 | 	mov	COUNT_, #0
063a0     B0 00 A0 FD | 	call	#pushregs_
063a4     18 F0 07 F1 | 	add	ptra, #24
063a8     04 5E 05 F1 | 	add	fp, #4
063ac     AF 5C 62 FC | 	wrlong	arg01, fp
063b0     04 5E 05 F1 | 	add	fp, #4
063b4     AF 5E 62 FC | 	wrlong	arg02, fp
063b8     04 5E 05 F1 | 	add	fp, #4
063bc     AF 60 62 FC | 	wrlong	arg03, fp
063c0     04 5E 05 F1 | 	add	fp, #4
063c4     AF 60 42 FC | 	wrbyte	arg03, fp
063c8     01 5E 05 F1 | 	add	fp, #1
063cc     AF 00 48 FC | 	wrbyte	#0, fp
063d0     01 5E 85 F1 | 	sub	fp, #1
063d4     AF 60 02 F6 | 	mov	arg03, fp
063d8     0C 5E 85 F1 | 	sub	fp, #12
063dc     AF 5C 02 FB | 	rdlong	arg01, fp
063e0     04 5E 05 F1 | 	add	fp, #4
063e4     AF 5E 02 FB | 	rdlong	arg02, fp
063e8     08 5E 85 F1 | 	sub	fp, #8
063ec     0C 00 B0 FD | 	call	#__system___fmtstr
063f0     AF F0 03 F6 | 	mov	ptra, fp
063f4     BF 00 A0 FD | 	call	#popregs_
063f8                 | __system___fmtchar_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | __system___fmtstr
063fc     0E 5A 05 F6 | 	mov	COUNT_, #14
06400     B0 00 A0 FD | 	call	#pushregs_
06404     2E 6B 02 F6 | 	mov	local01, arg01
06408     2F 6D 02 F6 | 	mov	local02, arg02
0640c     30 6F 02 F6 | 	mov	local03, arg03
06410     36 71 02 F6 | 	mov	local04, local02
06414     FF 70 06 F5 | 	and	local04, #255
06418     37 5D 02 F6 | 	mov	arg01, local03
0641c     00 72 06 F6 | 	mov	local05, #0
06420     EC 9B 9F FE | 	loc	pa,	#(@LR__0310-@LR__0309)
06424     93 00 A0 FD | 	call	#FCACHE_LOAD_
06428                 | LR__0309
06428     2E 75 CA FA | 	rdbyte	local06, arg01 wz
0642c     01 72 06 51 |  if_ne	add	local05, #1
06430     01 5C 06 51 |  if_ne	add	arg01, #1
06434     F0 FF 9F 5D |  if_ne	jmp	#LR__0309
06438                 | LR__0310
06438     39 2B 02 F6 | 	mov	result1, local05
0643c     15 77 02 F6 | 	mov	local07, result1
06440     00 70 0E F2 | 	cmp	local04, #0 wz
06444     04 00 90 AD |  if_e	jmp	#LR__0311
06448     38 77 7A F3 | 	fles	local07, local04 wcz
0644c                 | LR__0311
0644c     35 5D 02 F6 | 	mov	arg01, local01
06450     36 5F 02 F6 | 	mov	arg02, local02
06454     3B 61 02 F6 | 	mov	arg03, local07
06458     02 62 06 F6 | 	mov	arg04, #2
0645c     C8 0F B0 FD | 	call	#__system___fmtpad
06460     15 79 02 F6 | 	mov	local08, result1
06464     00 78 5E F2 | 	cmps	local08, #0 wcz
06468     3C 2B 02 C6 |  if_b	mov	result1, local08
0646c     74 00 90 CD |  if_b	jmp	#LR__0314
06470     00 76 5E F2 | 	cmps	local07, #0 wcz
06474     44 00 90 ED |  if_be	jmp	#LR__0313
06478     3B 7B 02 F6 | 	mov	local09, local07
0647c                 | LR__0312
0647c     35 7D 02 F6 | 	mov	local10, local01
06480     3E 7F 02 FB | 	rdlong	local11, local10
06484     04 7C 06 F1 | 	add	local10, #4
06488     3E 81 02 FB | 	rdlong	local12, local10
0648c     37 5D C2 FA | 	rdbyte	arg01, local03
06490     07 83 02 F6 | 	mov	local13, objptr
06494     3F 0F 02 F6 | 	mov	objptr, local11
06498     01 6E 06 F1 | 	add	local03, #1
0649c     2D 80 62 FD | 	call	local12
064a0     41 0F 02 F6 | 	mov	objptr, local13
064a4     15 85 02 F6 | 	mov	local14, result1
064a8     00 84 5E F2 | 	cmps	local14, #0 wcz
064ac     42 2B 02 C6 |  if_b	mov	result1, local14
064b0     30 00 90 CD |  if_b	jmp	#LR__0314
064b4     42 79 02 F1 | 	add	local08, local14
064b8     F0 7B 6E FB | 	djnz	local09, #LR__0312
064bc                 | LR__0313
064bc     35 5D 02 F6 | 	mov	arg01, local01
064c0     36 5F 02 F6 | 	mov	arg02, local02
064c4     3B 61 02 F6 | 	mov	arg03, local07
064c8     01 62 06 F6 | 	mov	arg04, #1
064cc     58 0F B0 FD | 	call	#__system___fmtpad
064d0     15 85 02 F6 | 	mov	local14, result1
064d4     00 84 5E F2 | 	cmps	local14, #0 wcz
064d8     42 2B 02 C6 |  if_b	mov	result1, local14
064dc     42 79 02 31 |  if_ae	add	local08, local14
064e0     3C 2B 02 36 |  if_ae	mov	result1, local08
064e4                 | LR__0314
064e4     AF F0 03 F6 | 	mov	ptra, fp
064e8     BF 00 A0 FD | 	call	#popregs_
064ec                 | __system___fmtstr_ret
064ec     2D 00 64 FD | 	ret
064f0                 | 
064f0                 | __system___fmtnum
064f0     07 5A 05 F6 | 	mov	COUNT_, #7
064f4     B0 00 A0 FD | 	call	#pushregs_
064f8     78 F0 07 F1 | 	add	ptra, #120
064fc     04 5E 05 F1 | 	add	fp, #4
06500     AF 5C 62 FC | 	wrlong	arg01, fp
06504     04 5E 05 F1 | 	add	fp, #4
06508     AF 5E 62 FC | 	wrlong	arg02, fp
0650c     04 5E 05 F1 | 	add	fp, #4
06510     AF 60 62 FC | 	wrlong	arg03, fp
06514     04 5E 05 F1 | 	add	fp, #4
06518     AF 62 62 FC | 	wrlong	arg04, fp
0651c     04 5E 05 F1 | 	add	fp, #4
06520     AF 6A 02 F6 | 	mov	local01, fp
06524     44 5E 05 F1 | 	add	fp, #68
06528     AF 6A 62 FC | 	wrlong	local01, fp
0652c     04 5E 05 F1 | 	add	fp, #4
06530     AF 00 68 FC | 	wrlong	#0, fp
06534     54 5E 85 F1 | 	sub	fp, #84
06538     AF 6A 02 FB | 	rdlong	local01, fp
0653c     10 6A 46 F0 | 	shr	local01, #16
06540     3F 6A 06 F5 | 	and	local01, #63
06544     58 5E 05 F1 | 	add	fp, #88
06548     AF 6A 62 FC | 	wrlong	local01, fp
0654c     58 5E 85 F1 | 	sub	fp, #88
06550     AF 6A 02 FB | 	rdlong	local01, fp
06554     FF 6A 06 F5 | 	and	local01, #255
06558     5C 5E 05 F1 | 	add	fp, #92
0655c     AF 6A 62 FC | 	wrlong	local01, fp
06560     5C 5E 85 F1 | 	sub	fp, #92
06564     AF 6A 02 FB | 	rdlong	local01, fp
06568     1A 6A 46 F0 | 	shr	local01, #26
0656c     03 6A 06 F5 | 	and	local01, #3
06570     60 5E 05 F1 | 	add	fp, #96
06574     AF 6A 62 FC | 	wrlong	local01, fp
06578     08 5E 85 F1 | 	sub	fp, #8
0657c     AF 6A 02 FB | 	rdlong	local01, fp
06580     60 5E 85 F1 | 	sub	fp, #96
06584     00 6A 5E F2 | 	cmps	local01, #0 wcz
06588     14 00 90 ED |  if_be	jmp	#LR__0315
0658c     60 5E 05 F1 | 	add	fp, #96
06590     AF 6A 02 FB | 	rdlong	local01, fp
06594     01 6A 86 F1 | 	sub	local01, #1
06598     AF 6A 62 FC | 	wrlong	local01, fp
0659c     60 5E 85 F1 | 	sub	fp, #96
065a0                 | LR__0315
065a0     64 5E 05 F1 | 	add	fp, #100
065a4     AF 6C 02 FB | 	rdlong	local02, fp
065a8     64 5E 85 F1 | 	sub	fp, #100
065ac     40 6C 5E F2 | 	cmps	local02, #64 wcz
065b0     14 00 90 1D |  if_a	jmp	#LR__0316
065b4     64 5E 05 F1 | 	add	fp, #100
065b8     AF 6E 02 FB | 	rdlong	local03, fp
065bc     64 5E 85 F1 | 	sub	fp, #100
065c0     37 71 0A F6 | 	mov	local04, local03 wz
065c4     0C 00 90 5D |  if_ne	jmp	#LR__0317
065c8                 | LR__0316
065c8     64 5E 05 F1 | 	add	fp, #100
065cc     AF 80 68 FC | 	wrlong	#64, fp
065d0     64 5E 85 F1 | 	sub	fp, #100
065d4                 | LR__0317
065d4     68 5E 05 F1 | 	add	fp, #104
065d8     AF 6A 02 FB | 	rdlong	local01, fp
065dc     68 5E 85 F1 | 	sub	fp, #104
065e0     03 6A 0E F2 | 	cmp	local01, #3 wz
065e4     10 00 90 5D |  if_ne	jmp	#LR__0318
065e8     68 5E 05 F1 | 	add	fp, #104
065ec     AF 00 68 FC | 	wrlong	#0, fp
065f0     68 5E 85 F1 | 	sub	fp, #104
065f4     30 00 90 FD | 	jmp	#LR__0320
065f8                 | LR__0318
065f8     0C 5E 05 F1 | 	add	fp, #12
065fc     AF 6A 02 FB | 	rdlong	local01, fp
06600     0C 5E 85 F1 | 	sub	fp, #12
06604     00 6A 5E F2 | 	cmps	local01, #0 wcz
06608     1C 00 90 3D |  if_ae	jmp	#LR__0319
0660c     68 5E 05 F1 | 	add	fp, #104
06610     AF 08 68 FC | 	wrlong	#4, fp
06614     5C 5E 85 F1 | 	sub	fp, #92
06618     AF 6A 02 FB | 	rdlong	local01, fp
0661c     35 6B 62 F6 | 	neg	local01, local01
06620     AF 6A 62 FC | 	wrlong	local01, fp
06624     0C 5E 85 F1 | 	sub	fp, #12
06628                 | LR__0319
06628                 | LR__0320
06628     68 5E 05 F1 | 	add	fp, #104
0662c     AF 6A 0A FB | 	rdlong	local01, fp wz
06630     68 5E 85 F1 | 	sub	fp, #104
06634     EC 00 90 AD |  if_e	jmp	#LR__0327
06638     5C 5E 05 F1 | 	add	fp, #92
0663c     AF 70 02 FB | 	rdlong	local04, fp
06640     01 70 06 F1 | 	add	local04, #1
06644     AF 70 62 FC | 	wrlong	local04, fp
06648     04 5E 05 F1 | 	add	fp, #4
0664c     AF 6A 02 FB | 	rdlong	local01, fp
06650     04 5E 05 F1 | 	add	fp, #4
06654     AF 70 02 FB | 	rdlong	local04, fp
06658     64 5E 85 F1 | 	sub	fp, #100
0665c     38 6B 0A F2 | 	cmp	local01, local04 wz
06660     3C 00 90 5D |  if_ne	jmp	#LR__0322
06664     60 5E 05 F1 | 	add	fp, #96
06668     AF 70 02 FB | 	rdlong	local04, fp
0666c     01 70 86 F1 | 	sub	local04, #1
06670     AF 70 62 FC | 	wrlong	local04, fp
06674     AF 6A 0A FB | 	rdlong	local01, fp wz
06678     60 5E 85 F1 | 	sub	fp, #96
0667c     20 00 90 5D |  if_ne	jmp	#LR__0321
06680     04 5E 05 F1 | 	add	fp, #4
06684     AF 5C 02 FB | 	rdlong	arg01, fp
06688     04 5E 05 F1 | 	add	fp, #4
0668c     AF 5E 02 FB | 	rdlong	arg02, fp
06690     08 5E 85 F1 | 	sub	fp, #8
06694     23 60 06 F6 | 	mov	arg03, #35
06698     00 FD BF FD | 	call	#__system___fmtchar
0669c     70 01 90 FD | 	jmp	#LR__0332
066a0                 | LR__0321
066a0                 | LR__0322
066a0     68 5E 05 F1 | 	add	fp, #104
066a4     AF 6A 02 FB | 	rdlong	local01, fp
066a8     68 5E 85 F1 | 	sub	fp, #104
066ac     02 6A 0E F2 | 	cmp	local01, #2 wz
066b0     20 00 90 5D |  if_ne	jmp	#LR__0323
066b4     58 5E 05 F1 | 	add	fp, #88
066b8     AF 6A 02 FB | 	rdlong	local01, fp
066bc     35 71 02 F6 | 	mov	local04, local01
066c0     01 70 06 F1 | 	add	local04, #1
066c4     AF 70 62 FC | 	wrlong	local04, fp
066c8     58 5E 85 F1 | 	sub	fp, #88
066cc     35 41 48 FC | 	wrbyte	#32, local01
066d0     50 00 90 FD | 	jmp	#LR__0326
066d4                 | LR__0323
066d4     68 5E 05 F1 | 	add	fp, #104
066d8     AF 6A 02 FB | 	rdlong	local01, fp
066dc     68 5E 85 F1 | 	sub	fp, #104
066e0     04 6A 0E F2 | 	cmp	local01, #4 wz
066e4     20 00 90 5D |  if_ne	jmp	#LR__0324
066e8     58 5E 05 F1 | 	add	fp, #88
066ec     AF 6A 02 FB | 	rdlong	local01, fp
066f0     35 71 02 F6 | 	mov	local04, local01
066f4     01 70 06 F1 | 	add	local04, #1
066f8     AF 70 62 FC | 	wrlong	local04, fp
066fc     58 5E 85 F1 | 	sub	fp, #88
06700     35 5B 48 FC | 	wrbyte	#45, local01
06704     1C 00 90 FD | 	jmp	#LR__0325
06708                 | LR__0324
06708     58 5E 05 F1 | 	add	fp, #88
0670c     AF 6A 02 FB | 	rdlong	local01, fp
06710     35 71 02 F6 | 	mov	local04, local01
06714     01 70 06 F1 | 	add	local04, #1
06718     AF 70 62 FC | 	wrlong	local04, fp
0671c     58 5E 85 F1 | 	sub	fp, #88
06720     35 57 48 FC | 	wrbyte	#43, local01
06724                 | LR__0325
06724                 | LR__0326
06724                 | LR__0327
06724     58 5E 05 F1 | 	add	fp, #88
06728     AF 5C 02 FB | 	rdlong	arg01, fp
0672c     4C 5E 85 F1 | 	sub	fp, #76
06730     AF 5E 02 FB | 	rdlong	arg02, fp
06734     04 5E 05 F1 | 	add	fp, #4
06738     AF 60 02 FB | 	rdlong	arg03, fp
0673c     50 5E 05 F1 | 	add	fp, #80
06740     AF 62 02 FB | 	rdlong	arg04, fp
06744     00 72 06 F6 | 	mov	local05, #0
06748     58 5E 85 F1 | 	sub	fp, #88
0674c     AF 74 02 FB | 	rdlong	local06, fp
06750     08 5E 85 F1 | 	sub	fp, #8
06754     1D 74 2E F4 | 	testbn	local06, #29 wz
06758     01 72 06 56 |  if_ne	mov	local05, #1
0675c     39 65 02 F6 | 	mov	arg05, local05
06760     84 0D B0 FD | 	call	#__system___uitoa
06764     15 77 02 F6 | 	mov	local07, result1
06768     5C 5E 05 F1 | 	add	fp, #92
0676c     AF 6A 02 FB | 	rdlong	local01, fp
06770     3B 6B 02 F1 | 	add	local01, local07
06774     AF 6A 62 FC | 	wrlong	local01, fp
06778     08 5E 05 F1 | 	add	fp, #8
0677c     AF 70 02 FB | 	rdlong	local04, fp
06780     64 5E 85 F1 | 	sub	fp, #100
06784     38 6B 5A F2 | 	cmps	local01, local04 wcz
06788     64 00 90 ED |  if_be	jmp	#LR__0331
0678c     B0 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
06790     93 00 A0 FD | 	call	#FCACHE_LOAD_
06794                 | LR__0328
06794     64 5E 05 F1 | 	add	fp, #100
06798     AF 6A 02 FB | 	rdlong	local01, fp
0679c     35 71 02 F6 | 	mov	local04, local01
067a0     01 70 86 F1 | 	sub	local04, #1
067a4     AF 70 62 FC | 	wrlong	local04, fp
067a8     64 5E 85 F1 | 	sub	fp, #100
067ac     00 6A 5E F2 | 	cmps	local01, #0 wcz
067b0     20 00 90 ED |  if_be	jmp	#LR__0330
067b4     58 5E 05 F1 | 	add	fp, #88
067b8     AF 6A 02 FB | 	rdlong	local01, fp
067bc     35 71 02 F6 | 	mov	local04, local01
067c0     01 70 06 F1 | 	add	local04, #1
067c4     AF 70 62 FC | 	wrlong	local04, fp
067c8     58 5E 85 F1 | 	sub	fp, #88
067cc     35 47 48 FC | 	wrbyte	#35, local01
067d0     C0 FF 9F FD | 	jmp	#LR__0328
067d4                 | LR__0329
067d4                 | LR__0330
067d4     58 5E 05 F1 | 	add	fp, #88
067d8     AF 6A 02 FB | 	rdlong	local01, fp
067dc     35 71 02 F6 | 	mov	local04, local01
067e0     01 70 06 F1 | 	add	local04, #1
067e4     AF 70 62 FC | 	wrlong	local04, fp
067e8     58 5E 85 F1 | 	sub	fp, #88
067ec     35 01 48 FC | 	wrbyte	#0, local01
067f0                 | LR__0331
067f0     14 5E 05 F1 | 	add	fp, #20
067f4     AF 60 02 F6 | 	mov	arg03, fp
067f8     10 5E 85 F1 | 	sub	fp, #16
067fc     AF 5C 02 FB | 	rdlong	arg01, fp
06800     04 5E 05 F1 | 	add	fp, #4
06804     AF 5E 02 FB | 	rdlong	arg02, fp
06808     08 5E 85 F1 | 	sub	fp, #8
0680c     EC FB BF FD | 	call	#__system___fmtstr
06810                 | LR__0332
06810     AF F0 03 F6 | 	mov	ptra, fp
06814     BF 00 A0 FD | 	call	#popregs_
06818                 | __system___fmtnum_ret
06818     2D 00 64 FD | 	ret
0681c                 | 
0681c                 | __system__String_S
0681c     06 5A 05 F6 | 	mov	COUNT_, #6
06820     B0 00 A0 FD | 	call	#pushregs_
06824     2E 6B 02 F6 | 	mov	local01, arg01
06828     2F 6D 02 F6 | 	mov	local02, arg02
0682c     36 5D 02 F6 | 	mov	arg01, local02
06830     00 6E 06 F6 | 	mov	local03, #0
06834     D8 97 9F FE | 	loc	pa,	#(@LR__0334-@LR__0333)
06838     93 00 A0 FD | 	call	#FCACHE_LOAD_
0683c                 | LR__0333
0683c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
06840     01 6E 06 51 |  if_ne	add	local03, #1
06844     01 5C 06 51 |  if_ne	add	arg01, #1
06848     F0 FF 9F 5D |  if_ne	jmp	#LR__0333
0684c                 | LR__0334
0684c     37 2B 0A F6 | 	mov	result1, local03 wz
06850     40 00 00 AF 
06854     26 2B 06 A6 |  if_e	mov	result1, ##@LR__0451
06858     50 00 90 AD |  if_e	jmp	#LR__0336
0685c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06860     40 00 00 EF 
06864     27 2B 06 E6 |  if_be	mov	result1, ##@LR__0452
06868     40 00 90 ED |  if_be	jmp	#LR__0336
0686c     35 73 02 F6 | 	mov	local05, local01
06870     01 72 06 F1 | 	add	local05, #1
06874     39 5D 02 F6 | 	mov	arg01, local05
06878     01 5C 06 F1 | 	add	arg01, #1
0687c     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06880     15 75 0A F6 | 	mov	local06, result1 wz
06884     20 00 90 AD |  if_e	jmp	#LR__0335
06888     36 5F C2 FA | 	rdbyte	arg02, local02
0688c     3A 5D 02 F6 | 	mov	arg01, local06
06890     35 61 02 F6 | 	mov	arg03, local01
06894     A0 00 A0 FD | 	call	#\builtin_bytefill_
06898     3A 73 02 F1 | 	add	local05, local06
0689c     39 01 48 FC | 	wrbyte	#0, local05
068a0     3A 2B 02 F6 | 	mov	result1, local06
068a4     04 00 90 FD | 	jmp	#LR__0336
068a8                 | LR__0335
068a8     3A 2B 02 F6 | 	mov	result1, local06
068ac                 | LR__0336
068ac     AF F0 03 F6 | 	mov	ptra, fp
068b0     BF 00 A0 FD | 	call	#popregs_
068b4                 | __system__String_S_ret
068b4     2D 00 64 FD | 	ret
068b8                 | 
068b8                 | __system___gc_ptrs
068b8     0A 5A 05 F6 | 	mov	COUNT_, #10
068bc     B0 00 A0 FD | 	call	#pushregs_
068c0     02 6B 02 F6 | 	mov	local01, __heap_ptr
068c4     35 6D 02 F6 | 	mov	local02, local01
068c8     07 00 00 FF 
068cc     F8 6D 06 F1 | 	add	local02, ##4088
068d0     35 6F 0A FB | 	rdlong	local03, local01 wz
068d4     74 00 90 5D |  if_ne	jmp	#LR__0337
068d8     36 71 02 F6 | 	mov	local04, local02
068dc     35 71 82 F1 | 	sub	local04, local01
068e0     35 03 58 FC | 	wrword	#1, local01
068e4     35 73 02 F6 | 	mov	local05, local01
068e8     02 72 06 F1 | 	add	local05, #2
068ec     36 00 80 FF 
068f0     39 21 59 FC | 	wrword	##27792, local05
068f4     35 75 02 F6 | 	mov	local06, local01
068f8     04 74 06 F1 | 	add	local06, #4
068fc     3A 01 58 FC | 	wrword	#0, local06
06900     35 77 02 F6 | 	mov	local07, local01
06904     06 76 06 F1 | 	add	local07, #6
06908     3B 03 58 FC | 	wrword	#1, local07
0690c     10 6A 06 F1 | 	add	local01, #16
06910     38 6F 52 F6 | 	abs	local03, local04 wc
06914     04 6E 46 F0 | 	shr	local03, #4
06918     37 6F 62 C6 |  if_b	neg	local03, local03
0691c     35 6F 52 FC | 	wrword	local03, local01
06920     35 79 02 F6 | 	mov	local08, local01
06924     02 78 06 F1 | 	add	local08, #2
06928     36 00 80 FF 
0692c     3C 1F 59 FC | 	wrword	##27791, local08
06930     35 7B 02 F6 | 	mov	local09, local01
06934     04 7A 06 F1 | 	add	local09, #4
06938     3D 01 58 FC | 	wrword	#0, local09
0693c     35 7D 02 F6 | 	mov	local10, local01
06940     06 7C 06 F1 | 	add	local10, #6
06944     3E 01 58 FC | 	wrword	#0, local10
06948     10 6A 86 F1 | 	sub	local01, #16
0694c                 | LR__0337
0694c     36 2D 02 F6 | 	mov	result2, local02
06950     35 2B 02 F6 | 	mov	result1, local01
06954     AF F0 03 F6 | 	mov	ptra, fp
06958     BF 00 A0 FD | 	call	#popregs_
0695c                 | __system___gc_ptrs_ret
0695c     2D 00 64 FD | 	ret
06960                 | 
06960                 | __system___gc_nextBlockPtr
06960     02 5A 05 F6 | 	mov	COUNT_, #2
06964     B0 00 A0 FD | 	call	#pushregs_
06968     2E 6B 02 F6 | 	mov	local01, arg01
0696c     35 6D EA FA | 	rdword	local02, local01 wz
06970     10 00 90 5D |  if_ne	jmp	#LR__0338
06974     40 00 00 FF 
06978     28 5D 06 F6 | 	mov	arg01, ##@LR__0453
0697c     F8 01 B0 FD | 	call	#__system___gc_errmsg
06980     0C 00 90 FD | 	jmp	#LR__0339
06984                 | LR__0338
06984     04 6C 66 F0 | 	shl	local02, #4
06988     35 2B 02 F6 | 	mov	result1, local01
0698c     36 2B 02 F1 | 	add	result1, local02
06990                 | LR__0339
06990     AF F0 03 F6 | 	mov	ptra, fp
06994     BF 00 A0 FD | 	call	#popregs_
06998                 | __system___gc_nextBlockPtr_ret
06998     2D 00 64 FD | 	ret
0699c                 | 
0699c                 | __system___gc_tryalloc
0699c     1B 5A 05 F6 | 	mov	COUNT_, #27
069a0     B0 00 A0 FD | 	call	#pushregs_
069a4     2E 6B 02 F6 | 	mov	local01, arg01
069a8     2F 6D 02 F6 | 	mov	local02, arg02
069ac     08 FF BF FD | 	call	#__system___gc_ptrs
069b0     15 6F 02 F6 | 	mov	local03, result1
069b4     16 71 02 F6 | 	mov	local04, result2
069b8     37 73 02 F6 | 	mov	local05, local03
069bc     00 74 06 F6 | 	mov	local06, #0
069c0     94 96 9F FE | 	loc	pa,	#(@LR__0341-@LR__0340)
069c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
069c8                 | LR__0340
069c8     39 77 02 F6 | 	mov	local07, local05
069cc     06 72 06 F1 | 	add	local05, #6
069d0     39 79 02 F6 | 	mov	local08, local05
069d4     37 7B 02 F6 | 	mov	local09, local03
069d8     3C 7D E2 FA | 	rdword	local10, local08
069dc     3D 5D 02 F6 | 	mov	arg01, local09
069e0     3E 5F 0A F6 | 	mov	arg02, local10 wz
069e4     00 2A 06 A6 |  if_e	mov	result1, #0
069e8     04 5E 66 50 |  if_ne	shl	arg02, #4
069ec     2F 5D 02 51 |  if_ne	add	arg01, arg02
069f0     2E 2B 02 56 |  if_ne	mov	result1, arg01
069f4     15 7F 02 F6 | 	mov	local11, result1
069f8     3F 73 0A F6 | 	mov	local05, local11 wz
069fc     39 7B 02 56 |  if_ne	mov	local09, local05
06a00     3D 81 02 56 |  if_ne	mov	local12, local09
06a04     40 75 E2 5A |  if_ne	rdword	local06, local12
06a08     00 72 0E F2 | 	cmp	local05, #0 wz
06a0c     10 00 90 AD |  if_e	jmp	#LR__0342
06a10     38 73 5A F2 | 	cmps	local05, local04 wcz
06a14     08 00 90 3D |  if_ae	jmp	#LR__0342
06a18     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06a1c     A8 FF 9F 1D |  if_a	jmp	#LR__0340
06a20                 | LR__0341
06a20                 | LR__0342
06a20     00 72 0E F2 | 	cmp	local05, #0 wz
06a24     39 2B 02 A6 |  if_e	mov	result1, local05
06a28     40 01 90 AD |  if_e	jmp	#LR__0345
06a2c     39 83 02 F6 | 	mov	local13, local05
06a30     06 82 06 F1 | 	add	local13, #6
06a34     41 85 E2 FA | 	rdword	local14, local13
06a38     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06a3c     CC 00 90 3D |  if_ae	jmp	#LR__0344
06a40     39 87 02 F6 | 	mov	local15, local05
06a44     43 6B 52 FC | 	wrword	local01, local15
06a48     35 89 02 F6 | 	mov	local16, local01
06a4c     04 88 66 F0 | 	shl	local16, #4
06a50     39 8B 02 F6 | 	mov	local17, local05
06a54     44 8B 02 F1 | 	add	local17, local16
06a58     3A 8D 02 F6 | 	mov	local18, local06
06a5c     35 8D 82 F1 | 	sub	local18, local01
06a60     45 8F 02 F6 | 	mov	local19, local17
06a64     47 8D 52 FC | 	wrword	local18, local19
06a68     45 91 02 F6 | 	mov	local20, local17
06a6c     02 90 06 F1 | 	add	local20, #2
06a70     36 00 80 FF 
06a74     48 1F 59 FC | 	wrword	##27791, local20
06a78     45 93 02 F6 | 	mov	local21, local17
06a7c     04 92 06 F1 | 	add	local21, #4
06a80     39 5F 0A F6 | 	mov	arg02, local05 wz
06a84     00 2A 06 A6 |  if_e	mov	result1, #0
06a88     37 5F 82 51 |  if_ne	sub	arg02, local03
06a8c     04 5E 46 50 |  if_ne	shr	arg02, #4
06a90     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a94     49 2B 52 FC | 	wrword	result1, local21
06a98     45 95 02 F6 | 	mov	local22, local17
06a9c     41 7B E2 FA | 	rdword	local09, local13
06aa0     06 94 06 F1 | 	add	local22, #6
06aa4     4A 7B 52 FC | 	wrword	local09, local22
06aa8     45 97 02 F6 | 	mov	local23, local17
06aac     4B 5F 0A F6 | 	mov	arg02, local23 wz
06ab0     00 2A 06 A6 |  if_e	mov	result1, #0
06ab4     37 5F 82 51 |  if_ne	sub	arg02, local03
06ab8     04 5E 46 50 |  if_ne	shr	arg02, #4
06abc     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ac0     15 85 02 F6 | 	mov	local14, result1
06ac4     45 5D 02 F6 | 	mov	arg01, local17
06ac8     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06acc     15 99 0A F6 | 	mov	local24, result1 wz
06ad0     38 00 90 AD |  if_e	jmp	#LR__0343
06ad4     38 99 5A F2 | 	cmps	local24, local04 wcz
06ad8     30 00 90 3D |  if_ae	jmp	#LR__0343
06adc     4C 9B 02 F6 | 	mov	local25, local24
06ae0     04 9A 06 F1 | 	add	local25, #4
06ae4     37 7B 02 F6 | 	mov	local09, local03
06ae8     4B 7D 02 F6 | 	mov	local10, local23
06aec     3D 5D 02 F6 | 	mov	arg01, local09
06af0     3E 5F 0A F6 | 	mov	arg02, local10 wz
06af4     00 2A 06 A6 |  if_e	mov	result1, #0
06af8     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06afc     04 5E 46 50 |  if_ne	shr	arg02, #4
06b00     2F 2B 02 56 |  if_ne	mov	result1, arg02
06b04     15 7F 02 F6 | 	mov	local11, result1
06b08     4D 7F 52 FC | 	wrword	local11, local25
06b0c                 | LR__0343
06b0c                 | LR__0344
06b0c     06 76 06 F1 | 	add	local07, #6
06b10     3B 85 52 FC | 	wrword	local14, local07
06b14     36 00 00 FF 
06b18     80 7A 06 F6 | 	mov	local09, ##27776
06b1c     36 7B 42 F5 | 	or	local09, local02
06b20     39 9D 02 F6 | 	mov	local26, local05
06b24     02 9C 06 F1 | 	add	local26, #2
06b28     01 2A 62 FD | 	cogid	result1
06b2c     15 7B 42 F5 | 	or	local09, result1
06b30     4E 7B 52 FC | 	wrword	local09, local26
06b34     37 9F 02 F6 | 	mov	local27, local03
06b38     08 9E 06 F1 | 	add	local27, #8
06b3c     4F 7B E2 FA | 	rdword	local09, local27
06b40     41 7B 52 FC | 	wrword	local09, local13
06b44     39 5F 0A F6 | 	mov	arg02, local05 wz
06b48     00 2A 06 A6 |  if_e	mov	result1, #0
06b4c     37 5F 82 51 |  if_ne	sub	arg02, local03
06b50     04 5E 46 50 |  if_ne	shr	arg02, #4
06b54     2F 2B 02 56 |  if_ne	mov	result1, arg02
06b58     4F 2B 52 FC | 	wrword	result1, local27
06b5c     08 72 06 F1 | 	add	local05, #8
06b60     39 2B 02 F6 | 	mov	result1, local05
06b64     00 C0 31 FF 
06b68     00 2A 46 F5 | 	or	result1, ##1669332992
06b6c                 | LR__0345
06b6c     AF F0 03 F6 | 	mov	ptra, fp
06b70     BF 00 A0 FD | 	call	#popregs_
06b74                 | __system___gc_tryalloc_ret
06b74     2D 00 64 FD | 	ret
06b78                 | 
06b78                 | __system___gc_errmsg
06b78     02 5A 05 F6 | 	mov	COUNT_, #2
06b7c     B0 00 A0 FD | 	call	#pushregs_
06b80     2E 6B 02 F6 | 	mov	local01, arg01
06b84                 | LR__0346
06b84     35 6D CA FA | 	rdbyte	local02, local01 wz
06b88     01 6A 06 F1 | 	add	local01, #1
06b8c     0C 00 90 AD |  if_e	jmp	#LR__0347
06b90     36 5D 02 F6 | 	mov	arg01, local02
06b94     C4 F4 BF FD | 	call	#__system___tx
06b98     E8 FF 9F FD | 	jmp	#LR__0346
06b9c                 | LR__0347
06b9c     00 2A 06 F6 | 	mov	result1, #0
06ba0     AF F0 03 F6 | 	mov	ptra, fp
06ba4     BF 00 A0 FD | 	call	#popregs_
06ba8                 | __system___gc_errmsg_ret
06ba8     2D 00 64 FD | 	ret
06bac                 | 
06bac                 | __system___gc_alloc_managed
06bac     02 5A 05 F6 | 	mov	COUNT_, #2
06bb0     B0 00 A0 FD | 	call	#pushregs_
06bb4     2E 6B 02 F6 | 	mov	local01, arg01
06bb8     00 5E 06 F6 | 	mov	arg02, #0
06bbc     30 00 B0 FD | 	call	#__system___gc_doalloc
06bc0     15 6D 0A F6 | 	mov	local02, result1 wz
06bc4     18 00 90 5D |  if_ne	jmp	#LR__0348
06bc8     00 6A 5E F2 | 	cmps	local01, #0 wcz
06bcc     10 00 90 ED |  if_be	jmp	#LR__0348
06bd0     40 00 00 FF 
06bd4     44 5D 06 F6 | 	mov	arg01, ##@LR__0454
06bd8     9C FF BF FD | 	call	#__system___gc_errmsg
06bdc     04 00 90 FD | 	jmp	#LR__0349
06be0                 | LR__0348
06be0     36 2B 02 F6 | 	mov	result1, local02
06be4                 | LR__0349
06be4     AF F0 03 F6 | 	mov	ptra, fp
06be8     BF 00 A0 FD | 	call	#popregs_
06bec                 | __system___gc_alloc_managed_ret
06bec     2D 00 64 FD | 	ret
06bf0                 | 
06bf0                 | __system___gc_doalloc
06bf0     07 5A 05 F6 | 	mov	COUNT_, #7
06bf4     B0 00 A0 FD | 	call	#pushregs_
06bf8     2E 6B 0A F6 | 	mov	local01, arg01 wz
06bfc     2F 6D 02 F6 | 	mov	local02, arg02
06c00     00 2A 06 A6 |  if_e	mov	result1, #0
06c04     8C 00 90 AD |  if_e	jmp	#LR__0357
06c08     17 6A 06 F1 | 	add	local01, #23
06c0c     0F 6A 26 F5 | 	andn	local01, #15
06c10     04 6A 46 F0 | 	shr	local01, #4
06c14     14 14 06 F1 | 	add	ptr___system__dat__, #20
06c18     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06c1c     37 5D 02 F6 | 	mov	arg01, local03
06c20     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06c24     50 F3 BF FD | 	call	#__system___lockmem
06c28     35 5D 02 F6 | 	mov	arg01, local01
06c2c     36 5F 02 F6 | 	mov	arg02, local02
06c30     68 FD BF FD | 	call	#__system___gc_tryalloc
06c34     15 71 0A F6 | 	mov	local04, result1 wz
06c38     14 00 90 5D |  if_ne	jmp	#LR__0350
06c3c     10 03 B0 FD | 	call	#__system___gc_docollect
06c40     35 5D 02 F6 | 	mov	arg01, local01
06c44     36 5F 02 F6 | 	mov	arg02, local02
06c48     50 FD BF FD | 	call	#__system___gc_tryalloc
06c4c     15 71 02 F6 | 	mov	local04, result1
06c50                 | LR__0350
06c50     37 01 68 FC | 	wrlong	#0, local03
06c54     00 70 0E F2 | 	cmp	local04, #0 wz
06c58     34 00 90 AD |  if_e	jmp	#LR__0356
06c5c     04 6A 66 F0 | 	shl	local01, #4
06c60     08 6A 86 F1 | 	sub	local01, #8
06c64     35 73 52 F6 | 	abs	local05, local01 wc
06c68     02 72 46 F0 | 	shr	local05, #2
06c6c     39 73 62 C6 |  if_b	neg	local05, local05
06c70     39 75 0A F6 | 	mov	local06, local05 wz
06c74     38 77 02 F6 | 	mov	local07, local04
06c78     14 00 90 AD |  if_e	jmp	#LR__0355
06c7c     8C 93 9F FE | 	loc	pa,	#(@LR__0353-@LR__0351)
06c80     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c84                 | LR__0351
06c84     3A 05 D8 FC | 	rep	@LR__0354, local06
06c88                 | LR__0352
06c88     3B 01 68 FC | 	wrlong	#0, local07
06c8c     04 76 06 F1 | 	add	local07, #4
06c90                 | LR__0353
06c90                 | LR__0354
06c90                 | LR__0355
06c90                 | LR__0356
06c90     38 2B 02 F6 | 	mov	result1, local04
06c94                 | LR__0357
06c94     AF F0 03 F6 | 	mov	ptra, fp
06c98     BF 00 A0 FD | 	call	#popregs_
06c9c                 | __system___gc_doalloc_ret
06c9c     2D 00 64 FD | 	ret
06ca0                 | 
06ca0                 | __system___gc_isvalidptr
06ca0     30 31 02 F6 | 	mov	_var01, arg03
06ca4     18 33 02 F6 | 	mov	_var02, _var01
06ca8     00 F8 7F FF 
06cac     00 32 06 F5 | 	and	_var02, ##-1048576
06cb0     00 C0 31 FF 
06cb4     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06cb8     00 2A 06 56 |  if_ne	mov	result1, #0
06cbc     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06cc0     08 30 86 F1 | 	sub	_var01, #8
06cc4     18 35 02 F6 | 	mov	_var03, _var01
06cc8     00 F8 7F FF 
06ccc     00 34 26 F5 | 	andn	_var03, ##-1048576
06cd0     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06cd4     08 00 90 CD |  if_b	jmp	#LR__0358
06cd8     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06cdc     08 00 90 CD |  if_b	jmp	#LR__0359
06ce0                 | LR__0358
06ce0     00 2A 06 F6 | 	mov	result1, #0
06ce4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06ce8                 | LR__0359
06ce8     1A 33 02 F6 | 	mov	_var02, _var03
06cec     2E 33 62 F5 | 	xor	_var02, arg01
06cf0     0F 32 0E F5 | 	and	_var02, #15 wz
06cf4     00 2A 06 56 |  if_ne	mov	result1, #0
06cf8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06cfc     1A 37 02 F6 | 	mov	_var04, _var03
06d00     02 36 06 F1 | 	add	_var04, #2
06d04     1B 33 E2 FA | 	rdword	_var02, _var04
06d08     7F 00 00 FF 
06d0c     C0 33 06 F5 | 	and	_var02, ##65472
06d10     36 00 00 FF 
06d14     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06d18     00 2A 06 56 |  if_ne	mov	result1, #0
06d1c     1A 2B 02 A6 |  if_e	mov	result1, _var03
06d20                 | __system___gc_isvalidptr_ret
06d20     2D 00 64 FD | 	ret
06d24                 | 
06d24                 | __system___gc_dofree
06d24     1A 5A 05 F6 | 	mov	COUNT_, #26
06d28     B0 00 A0 FD | 	call	#pushregs_
06d2c     2E 6B 02 F6 | 	mov	local01, arg01
06d30     84 FB BF FD | 	call	#__system___gc_ptrs
06d34     16 6D 02 F6 | 	mov	local02, result2
06d38     15 6F 02 F6 | 	mov	local03, result1
06d3c     35 71 02 F6 | 	mov	local04, local01
06d40     02 70 06 F1 | 	add	local04, #2
06d44     36 00 80 FF 
06d48     38 1F 59 FC | 	wrword	##27791, local04
06d4c     35 73 02 F6 | 	mov	local05, local01
06d50     35 5D 02 F6 | 	mov	arg01, local01
06d54     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06d58     15 75 02 F6 | 	mov	local06, result1
06d5c     F0 92 9F FE | 	loc	pa,	#(@LR__0361-@LR__0360)
06d60     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d64                 | LR__0360
06d64     04 72 06 F1 | 	add	local05, #4
06d68     39 77 02 F6 | 	mov	local07, local05
06d6c     3B 5F EA FA | 	rdword	arg02, local07 wz
06d70     37 5D 02 F6 | 	mov	arg01, local03
06d74     00 2A 06 A6 |  if_e	mov	result1, #0
06d78     04 5E 66 50 |  if_ne	shl	arg02, #4
06d7c     2F 5D 02 51 |  if_ne	add	arg01, arg02
06d80     2E 2B 02 56 |  if_ne	mov	result1, arg01
06d84     15 73 0A F6 | 	mov	local05, result1 wz
06d88     28 00 90 AD |  if_e	jmp	#LR__0362
06d8c     39 5D 02 F6 | 	mov	arg01, local05
06d90     00 78 06 F6 | 	mov	local08, #0
06d94     02 5C 06 F1 | 	add	arg01, #2
06d98     2E 7B E2 FA | 	rdword	local09, arg01
06d9c     36 00 00 FF 
06da0     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06da4     01 78 66 A6 |  if_e	neg	local08, #1
06da8     3C 2B 02 F6 | 	mov	result1, local08
06dac     15 7D 0A F6 | 	mov	local10, result1 wz
06db0     B0 FF 9F AD |  if_e	jmp	#LR__0360
06db4                 | LR__0361
06db4                 | LR__0362
06db4     00 72 0E F2 | 	cmp	local05, #0 wz
06db8     37 73 02 A6 |  if_e	mov	local05, local03
06dbc     39 7F 02 F6 | 	mov	local11, local05
06dc0     06 7E 06 F1 | 	add	local11, #6
06dc4     35 81 02 F6 | 	mov	local12, local01
06dc8     3F 83 E2 FA | 	rdword	local13, local11
06dcc     06 80 06 F1 | 	add	local12, #6
06dd0     40 83 52 FC | 	wrword	local13, local12
06dd4     35 5F 0A F6 | 	mov	arg02, local01 wz
06dd8     00 2A 06 A6 |  if_e	mov	result1, #0
06ddc     37 5F 82 51 |  if_ne	sub	arg02, local03
06de0     04 5E 46 50 |  if_ne	shr	arg02, #4
06de4     2F 2B 02 56 |  if_ne	mov	result1, arg02
06de8     15 85 02 F6 | 	mov	local14, result1
06dec     3F 85 52 FC | 	wrword	local14, local11
06df0     37 73 0A F2 | 	cmp	local05, local03 wz
06df4     74 00 90 AD |  if_e	jmp	#LR__0365
06df8     39 5D 02 F6 | 	mov	arg01, local05
06dfc     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06e00     35 2B 0A F2 | 	cmp	result1, local01 wz
06e04     64 00 90 5D |  if_ne	jmp	#LR__0364
06e08     39 87 02 F6 | 	mov	local15, local05
06e0c     43 89 E2 FA | 	rdword	local16, local15
06e10     35 8B 02 F6 | 	mov	local17, local01
06e14     45 7D E2 FA | 	rdword	local10, local17
06e18     3E 89 02 F1 | 	add	local16, local10
06e1c     43 89 52 FC | 	wrword	local16, local15
06e20     38 01 58 FC | 	wrword	#0, local04
06e24     35 5D 02 F6 | 	mov	arg01, local01
06e28     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06e2c     15 75 02 F6 | 	mov	local06, result1
06e30     36 75 5A F2 | 	cmps	local06, local02 wcz
06e34     24 00 90 3D |  if_ae	jmp	#LR__0363
06e38     3A 8D 02 F6 | 	mov	local18, local06
06e3c     04 8C 06 F1 | 	add	local18, #4
06e40     39 5F 0A F6 | 	mov	arg02, local05 wz
06e44     00 2A 06 A6 |  if_e	mov	result1, #0
06e48     37 5F 82 51 |  if_ne	sub	arg02, local03
06e4c     04 5E 46 50 |  if_ne	shr	arg02, #4
06e50     2F 2B 02 56 |  if_ne	mov	result1, arg02
06e54     15 85 02 F6 | 	mov	local14, result1
06e58     46 85 52 FC | 	wrword	local14, local18
06e5c                 | LR__0363
06e5c     40 83 E2 FA | 	rdword	local13, local12
06e60     3F 83 52 FC | 	wrword	local13, local11
06e64     40 01 58 FC | 	wrword	#0, local12
06e68     39 6B 02 F6 | 	mov	local01, local05
06e6c                 | LR__0364
06e6c                 | LR__0365
06e6c     35 5D 02 F6 | 	mov	arg01, local01
06e70     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06e74     15 8F 0A F6 | 	mov	local19, result1 wz
06e78     C4 00 90 AD |  if_e	jmp	#LR__0367
06e7c     36 8F 5A F2 | 	cmps	local19, local02 wcz
06e80     BC 00 90 3D |  if_ae	jmp	#LR__0367
06e84     47 5D 02 F6 | 	mov	arg01, local19
06e88     00 78 06 F6 | 	mov	local08, #0
06e8c     02 5C 06 F1 | 	add	arg01, #2
06e90     2E 7B E2 FA | 	rdword	local09, arg01
06e94     36 00 00 FF 
06e98     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06e9c     01 78 66 A6 |  if_e	neg	local08, #1
06ea0     3C 2B 0A F6 | 	mov	result1, local08 wz
06ea4     98 00 90 AD |  if_e	jmp	#LR__0367
06ea8     35 73 02 F6 | 	mov	local05, local01
06eac     47 6B 02 F6 | 	mov	local01, local19
06eb0     39 91 02 F6 | 	mov	local20, local05
06eb4     48 93 E2 FA | 	rdword	local21, local20
06eb8     35 95 02 F6 | 	mov	local22, local01
06ebc     4A 7D E2 FA | 	rdword	local10, local22
06ec0     3E 93 02 F1 | 	add	local21, local10
06ec4     48 93 52 FC | 	wrword	local21, local20
06ec8     35 97 02 F6 | 	mov	local23, local01
06ecc     06 96 06 F1 | 	add	local23, #6
06ed0     39 99 02 F6 | 	mov	local24, local05
06ed4     4B 83 E2 FA | 	rdword	local13, local23
06ed8     06 98 06 F1 | 	add	local24, #6
06edc     4C 83 52 FC | 	wrword	local13, local24
06ee0     35 9B 02 F6 | 	mov	local25, local01
06ee4     02 9A 06 F1 | 	add	local25, #2
06ee8     4D 55 59 FC | 	wrword	#170, local25
06eec     4B 01 58 FC | 	wrword	#0, local23
06ef0     35 83 02 F6 | 	mov	local13, local01
06ef4     41 5D 02 F6 | 	mov	arg01, local13
06ef8     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06efc     15 7D 02 F6 | 	mov	local10, result1
06f00     3E 75 0A F6 | 	mov	local06, local10 wz
06f04     38 00 90 AD |  if_e	jmp	#LR__0366
06f08     36 75 5A F2 | 	cmps	local06, local02 wcz
06f0c     30 00 90 3D |  if_ae	jmp	#LR__0366
06f10     3A 9D 02 F6 | 	mov	local26, local06
06f14     04 9C 06 F1 | 	add	local26, #4
06f18     37 83 02 F6 | 	mov	local13, local03
06f1c     39 7D 02 F6 | 	mov	local10, local05
06f20     41 5D 02 F6 | 	mov	arg01, local13
06f24     3E 5F 0A F6 | 	mov	arg02, local10 wz
06f28     00 2A 06 A6 |  if_e	mov	result1, #0
06f2c     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06f30     04 5E 46 50 |  if_ne	shr	arg02, #4
06f34     2F 2B 02 56 |  if_ne	mov	result1, arg02
06f38     15 85 02 F6 | 	mov	local14, result1
06f3c     4E 85 52 FC | 	wrword	local14, local26
06f40                 | LR__0366
06f40                 | LR__0367
06f40     3A 2B 02 F6 | 	mov	result1, local06
06f44     AF F0 03 F6 | 	mov	ptra, fp
06f48     BF 00 A0 FD | 	call	#popregs_
06f4c                 | __system___gc_dofree_ret
06f4c     2D 00 64 FD | 	ret
06f50                 | 
06f50                 | __system___gc_docollect
06f50     0C 5A 05 F6 | 	mov	COUNT_, #12
06f54     B0 00 A0 FD | 	call	#pushregs_
06f58     5C F9 BF FD | 	call	#__system___gc_ptrs
06f5c     16 6B 02 F6 | 	mov	local01, result2
06f60     15 6D 02 F6 | 	mov	local02, result1
06f64     36 5D 02 F6 | 	mov	arg01, local02
06f68     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f6c     15 6F 0A F6 | 	mov	local03, result1 wz
06f70     01 2A 62 FD | 	cogid	result1
06f74     15 71 02 F6 | 	mov	local04, result1
06f78     2C 00 90 AD |  if_e	jmp	#LR__0369
06f7c                 | LR__0368
06f7c     35 6F 5A F2 | 	cmps	local03, local01 wcz
06f80     24 00 90 3D |  if_ae	jmp	#LR__0369
06f84     37 73 02 F6 | 	mov	local05, local03
06f88     02 72 06 F1 | 	add	local05, #2
06f8c     39 75 E2 FA | 	rdword	local06, local05
06f90     20 74 26 F5 | 	andn	local06, #32
06f94     39 75 52 FC | 	wrword	local06, local05
06f98     37 5D 02 F6 | 	mov	arg01, local03
06f9c     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06fa0     15 6F 0A F6 | 	mov	local03, result1 wz
06fa4     D4 FF 9F 5D |  if_ne	jmp	#LR__0368
06fa8                 | LR__0369
06fa8     00 76 06 F6 | 	mov	local07, #0
06fac     00 5C 06 F6 | 	mov	arg01, #0
06fb0     5C EF BF FD | 	call	#__system____topofstack
06fb4     15 79 02 F6 | 	mov	local08, result1
06fb8     3B 5D 02 F6 | 	mov	arg01, local07
06fbc     3C 5F 02 F6 | 	mov	arg02, local08
06fc0     A0 00 B0 FD | 	call	#__system___gc_markhub
06fc4     2C 01 B0 FD | 	call	#__system___gc_markcog
06fc8     36 5D 02 F6 | 	mov	arg01, local02
06fcc     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06fd0     15 7B 0A F6 | 	mov	local09, result1 wz
06fd4     10 00 90 5D |  if_ne	jmp	#LR__0370
06fd8     40 00 00 FF 
06fdc     61 5D 06 F6 | 	mov	arg01, ##@LR__0455
06fe0     94 FB BF FD | 	call	#__system___gc_errmsg
06fe4     70 00 90 FD | 	jmp	#LR__0376
06fe8                 | LR__0370
06fe8                 | LR__0371
06fe8     3D 6F 02 F6 | 	mov	local03, local09
06fec     37 5D 02 F6 | 	mov	arg01, local03
06ff0     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ff4     15 7B 02 F6 | 	mov	local09, result1
06ff8     37 7D 02 F6 | 	mov	local10, local03
06ffc     02 7C 06 F1 | 	add	local10, #2
07000     3E 7F E2 FA | 	rdword	local11, local10
07004     20 7E CE F7 | 	test	local11, #32 wz
07008     3C 00 90 5D |  if_ne	jmp	#LR__0374
0700c     3F 81 02 F6 | 	mov	local12, local11
07010     10 80 0E F5 | 	and	local12, #16 wz
07014     30 00 90 5D |  if_ne	jmp	#LR__0374
07018     3F 77 02 F6 | 	mov	local07, local11
0701c     0F 76 06 F5 | 	and	local07, #15
07020     3B 7F 02 F6 | 	mov	local11, local07
07024     38 7F 0A F2 | 	cmp	local11, local04 wz
07028     08 00 90 AD |  if_e	jmp	#LR__0372
0702c     0E 7E 0E F2 | 	cmp	local11, #14 wz
07030     14 00 90 5D |  if_ne	jmp	#LR__0373
07034                 | LR__0372
07034     37 77 02 F6 | 	mov	local07, local03
07038     3B 5D 02 F6 | 	mov	arg01, local07
0703c     E4 FC BF FD | 	call	#__system___gc_dofree
07040     15 81 02 F6 | 	mov	local12, result1
07044     40 7B 02 F6 | 	mov	local09, local12
07048                 | LR__0373
07048                 | LR__0374
07048     00 7A 0E F2 | 	cmp	local09, #0 wz
0704c     08 00 90 AD |  if_e	jmp	#LR__0375
07050     35 7B 5A F2 | 	cmps	local09, local01 wcz
07054     90 FF 9F CD |  if_b	jmp	#LR__0371
07058                 | LR__0375
07058                 | LR__0376
07058     AF F0 03 F6 | 	mov	ptra, fp
0705c     BF 00 A0 FD | 	call	#popregs_
07060                 | __system___gc_docollect_ret
07060     2D 00 64 FD | 	ret
07064                 | 
07064                 | __system___gc_markhub
07064     0A 5A 05 F6 | 	mov	COUNT_, #10
07068     B0 00 A0 FD | 	call	#pushregs_
0706c     2E 6B 02 F6 | 	mov	local01, arg01
07070     2F 6D 02 F6 | 	mov	local02, arg02
07074     40 F8 BF FD | 	call	#__system___gc_ptrs
07078     15 6F 02 F6 | 	mov	local03, result1
0707c     16 71 02 F6 | 	mov	local04, result2
07080                 | LR__0377
07080     36 6B 5A F2 | 	cmps	local01, local02 wcz
07084     60 00 90 3D |  if_ae	jmp	#LR__0378
07088     35 61 02 FB | 	rdlong	arg03, local01
0708c     04 6A 06 F1 | 	add	local01, #4
07090     37 5D 02 F6 | 	mov	arg01, local03
07094     38 5F 02 F6 | 	mov	arg02, local04
07098     04 FC BF FD | 	call	#__system___gc_isvalidptr
0709c     15 73 0A F6 | 	mov	local05, result1 wz
070a0     DC FF 9F AD |  if_e	jmp	#LR__0377
070a4     39 5D 02 F6 | 	mov	arg01, local05
070a8     00 74 06 F6 | 	mov	local06, #0
070ac     02 5C 06 F1 | 	add	arg01, #2
070b0     2E 77 E2 FA | 	rdword	local07, arg01
070b4     36 00 00 FF 
070b8     8F 76 0E F2 | 	cmp	local07, ##27791 wz
070bc     01 74 66 A6 |  if_e	neg	local06, #1
070c0     3A 2B 02 F6 | 	mov	result1, local06
070c4     15 79 0A F6 | 	mov	local08, result1 wz
070c8     B4 FF 9F 5D |  if_ne	jmp	#LR__0377
070cc     39 7B 02 F6 | 	mov	local09, local05
070d0     02 7A 06 F1 | 	add	local09, #2
070d4     3D 7D E2 FA | 	rdword	local10, local09
070d8     0F 7C 26 F5 | 	andn	local10, #15
070dc     2E 7C 46 F5 | 	or	local10, #46
070e0     3D 7D 52 FC | 	wrword	local10, local09
070e4     98 FF 9F FD | 	jmp	#LR__0377
070e8                 | LR__0378
070e8     AF F0 03 F6 | 	mov	ptra, fp
070ec     BF 00 A0 FD | 	call	#popregs_
070f0                 | __system___gc_markhub_ret
070f0     2D 00 64 FD | 	ret
070f4                 | 
070f4                 | __system___gc_markcog
070f4     06 5A 05 F6 | 	mov	COUNT_, #6
070f8     B0 00 A0 FD | 	call	#pushregs_
070fc     B8 F7 BF FD | 	call	#__system___gc_ptrs
07100     15 6B 02 F6 | 	mov	local01, result1
07104     16 6D 02 F6 | 	mov	local02, result2
07108     00 6E 06 F6 | 	mov	local03, #0
0710c                 | LR__0379
0710c     F0 71 06 F6 | 	mov	local04, #496
07110     37 71 82 F1 | 	sub	local04, local03
07114     F0 71 06 F1 | 	add	local04, #496
07118                 | 	'.live	local04
07118     00 70 96 F9 | 	alts	local04, #0
0711c     38 73 02 F6 | 	mov	local05, local04
07120     36 5F 02 F6 | 	mov	arg02, local02
07124     35 5D 02 F6 | 	mov	arg01, local01
07128     39 61 02 F6 | 	mov	arg03, local05
0712c     70 FB BF FD | 	call	#__system___gc_isvalidptr
07130     15 73 0A F6 | 	mov	local05, result1 wz
07134     10 00 90 AD |  if_e	jmp	#LR__0380
07138     02 72 06 F1 | 	add	local05, #2
0713c     39 75 E2 FA | 	rdword	local06, local05
07140     20 74 46 F5 | 	or	local06, #32
07144     39 75 52 FC | 	wrword	local06, local05
07148                 | LR__0380
07148     01 6E 06 F1 | 	add	local03, #1
0714c     F0 6F 5E F2 | 	cmps	local03, #496 wcz
07150     B8 FF 9F CD |  if_b	jmp	#LR__0379
07154     AF F0 03 F6 | 	mov	ptra, fp
07158     BF 00 A0 FD | 	call	#popregs_
0715c                 | __system___gc_markcog_ret
0715c     2D 00 64 FD | 	ret
07160                 | 
07160                 | __system__write
07160     03 5A 05 F6 | 	mov	COUNT_, #3
07164     B0 00 A0 FD | 	call	#pushregs_
07168     2E 6B 02 F6 | 	mov	local01, arg01
0716c     2F 6D 02 F6 | 	mov	local02, arg02
07170     30 6F 02 F6 | 	mov	local03, arg03
07174     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07178     1C 00 90 CD |  if_b	jmp	#LR__0381
0717c     01 00 00 FF 
07180     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07184     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07188     01 00 00 FF 
0718c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07190     01 2A 66 F6 | 	neg	result1, #1
07194     28 00 90 FD | 	jmp	#LR__0382
07198                 | LR__0381
07198     35 5D 02 F6 | 	mov	arg01, local01
0719c     01 5C 66 F0 | 	shl	arg01, #1
071a0     35 5D 02 F1 | 	add	arg01, local01
071a4     04 5C 66 F0 | 	shl	arg01, #4
071a8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071ac     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071b0     36 5F 02 F6 | 	mov	arg02, local02
071b4     37 61 02 F6 | 	mov	arg03, local03
071b8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071bc     4C 09 B0 FD | 	call	#__system___vfswrite
071c0                 | LR__0382
071c0     AF F0 03 F6 | 	mov	ptra, fp
071c4     BF 00 A0 FD | 	call	#popregs_
071c8                 | __system__write_ret
071c8     2D 00 64 FD | 	ret
071cc                 | 
071cc                 | __system__read
071cc     03 5A 05 F6 | 	mov	COUNT_, #3
071d0     B0 00 A0 FD | 	call	#pushregs_
071d4     2E 6B 02 F6 | 	mov	local01, arg01
071d8     2F 6D 02 F6 | 	mov	local02, arg02
071dc     30 6F 02 F6 | 	mov	local03, arg03
071e0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071e4     1C 00 90 CD |  if_b	jmp	#LR__0383
071e8     01 00 00 FF 
071ec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071f0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071f4     01 00 00 FF 
071f8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071fc     01 2A 66 F6 | 	neg	result1, #1
07200     28 00 90 FD | 	jmp	#LR__0384
07204                 | LR__0383
07204     35 5D 02 F6 | 	mov	arg01, local01
07208     01 5C 66 F0 | 	shl	arg01, #1
0720c     35 5D 02 F1 | 	add	arg01, local01
07210     04 5C 66 F0 | 	shl	arg01, #4
07214     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07218     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
0721c     36 5F 02 F6 | 	mov	arg02, local02
07220     37 61 02 F6 | 	mov	arg03, local03
07224     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07228     A4 0A B0 FD | 	call	#__system___vfsread
0722c                 | LR__0384
0722c     AF F0 03 F6 | 	mov	ptra, fp
07230     BF 00 A0 FD | 	call	#popregs_
07234                 | __system__read_ret
07234     2D 00 64 FD | 	ret
07238                 | 
07238                 | __system__close
07238     01 5A 05 F6 | 	mov	COUNT_, #1
0723c     B0 00 A0 FD | 	call	#pushregs_
07240     2E 6B 02 F6 | 	mov	local01, arg01
07244     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07248     1C 00 90 CD |  if_b	jmp	#LR__0385
0724c     01 00 00 FF 
07250     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07254     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07258     01 00 00 FF 
0725c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07260     01 2A 66 F6 | 	neg	result1, #1
07264     20 00 90 FD | 	jmp	#LR__0386
07268                 | LR__0385
07268     35 5D 02 F6 | 	mov	arg01, local01
0726c     01 5C 66 F0 | 	shl	arg01, #1
07270     35 5D 02 F1 | 	add	arg01, local01
07274     04 5C 66 F0 | 	shl	arg01, #4
07278     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0727c     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07280     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07284     80 03 B0 FD | 	call	#__system___closeraw
07288                 | LR__0386
07288     AF F0 03 F6 | 	mov	ptra, fp
0728c     BF 00 A0 FD | 	call	#popregs_
07290                 | __system__close_ret
07290     2D 00 64 FD | 	ret
07294                 | 
07294                 | __system__lseek
07294     09 5A 05 F6 | 	mov	COUNT_, #9
07298     B0 00 A0 FD | 	call	#pushregs_
0729c     2E 6B 02 F6 | 	mov	local01, arg01
072a0     2F 6D 02 F6 | 	mov	local02, arg02
072a4     30 6F 02 F6 | 	mov	local03, arg03
072a8     0A 6A 1E F2 | 	cmp	local01, #10 wcz
072ac     1C 00 90 CD |  if_b	jmp	#LR__0387
072b0     01 00 00 FF 
072b4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
072b8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
072bc     01 00 00 FF 
072c0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
072c4     01 2A 66 F6 | 	neg	result1, #1
072c8     D8 00 90 FD | 	jmp	#LR__0391
072cc                 | LR__0387
072cc     35 71 02 F6 | 	mov	local04, local01
072d0     01 70 66 F0 | 	shl	local04, #1
072d4     35 71 02 F1 | 	add	local04, local01
072d8     04 70 66 F0 | 	shl	local04, #4
072dc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
072e0     0A 71 02 F1 | 	add	local04, ptr___system__dat__
072e4     2C 70 06 F1 | 	add	local04, #44
072e8     38 73 0A FB | 	rdlong	local05, local04 wz
072ec     2C 70 86 F1 | 	sub	local04, #44
072f0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
072f4     1C 00 90 5D |  if_ne	jmp	#LR__0388
072f8     01 00 00 FF 
072fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07300     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07304     01 00 00 FF 
07308     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0730c     01 2A 66 F6 | 	neg	result1, #1
07310     90 00 90 FD | 	jmp	#LR__0391
07314                 | LR__0388
07314     08 70 06 F1 | 	add	local04, #8
07318     38 73 02 FB | 	rdlong	local05, local04
0731c     08 70 86 F1 | 	sub	local04, #8
07320     40 72 CE F7 | 	test	local05, #64 wz
07324     14 00 90 AD |  if_e	jmp	#LR__0389
07328     08 70 06 F1 | 	add	local04, #8
0732c     38 73 02 FB | 	rdlong	local05, local04
07330     80 72 46 F5 | 	or	local05, #128
07334     38 73 62 FC | 	wrlong	local05, local04
07338     08 70 86 F1 | 	sub	local04, #8
0733c                 | LR__0389
0733c     2C 70 06 F1 | 	add	local04, #44
07340     38 73 02 FB | 	rdlong	local05, local04
07344     2C 70 86 F1 | 	sub	local04, #44
07348     39 75 02 FB | 	rdlong	local06, local05
0734c     04 72 06 F1 | 	add	local05, #4
07350     39 77 02 FB | 	rdlong	local07, local05
07354     38 5D 02 F6 | 	mov	arg01, local04
07358     36 5F 02 F6 | 	mov	arg02, local02
0735c     37 61 02 F6 | 	mov	arg03, local03
07360     07 79 02 F6 | 	mov	local08, objptr
07364     3A 0F 02 F6 | 	mov	objptr, local06
07368     2D 76 62 FD | 	call	local07
0736c     3C 0F 02 F6 | 	mov	objptr, local08
07370     15 7B 02 F6 | 	mov	local09, result1
07374     00 7A 5E F2 | 	cmps	local09, #0 wcz
07378     24 00 90 3D |  if_ae	jmp	#LR__0390
0737c     3D 5D 6A F6 | 	neg	arg01, local09 wz
07380     01 00 00 FF 
07384     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07388     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
0738c     01 00 00 FF 
07390     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07394     01 2A 66 56 |  if_ne	neg	result1, #1
07398     00 2A 06 A6 |  if_e	mov	result1, #0
0739c     04 00 90 FD | 	jmp	#LR__0391
073a0                 | LR__0390
073a0     3D 2B 02 F6 | 	mov	result1, local09
073a4                 | LR__0391
073a4     AF F0 03 F6 | 	mov	ptra, fp
073a8     BF 00 A0 FD | 	call	#popregs_
073ac                 | __system__lseek_ret
073ac     2D 00 64 FD | 	ret
073b0                 | 
073b0                 | __system____getftab
073b0     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
073b4     00 2A 06 36 |  if_ae	mov	result1, #0
073b8     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
073bc     2E 2B 02 F6 | 	mov	result1, arg01
073c0     01 2A 66 F0 | 	shl	result1, #1
073c4     2E 2B 02 F1 | 	add	result1, arg01
073c8     04 2A 66 F0 | 	shl	result1, #4
073cc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
073d0     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
073d4     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
073d8                 | __system____getftab_ret
073d8     2D 00 64 FD | 	ret
073dc                 | 
073dc                 | __system___strrev
073dc     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
073e0     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
073e4     2E 33 02 F6 | 	mov	_var02, arg01
073e8     20 8C 9F FE | 	loc	pa,	#(@LR__0393-@LR__0392)
073ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
073f0                 | LR__0392
073f0     19 31 CA FA | 	rdbyte	_var01, _var02 wz
073f4     01 32 06 51 |  if_ne	add	_var02, #1
073f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0392
073fc                 | LR__0393
073fc     01 32 86 F1 | 	sub	_var02, #1
07400                 | LR__0394
07400     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07404     1C 00 90 ED |  if_be	jmp	#LR__0395
07408     2E 35 C2 FA | 	rdbyte	_var03, arg01
0740c     19 37 C2 FA | 	rdbyte	_var04, _var02
07410     2E 37 42 FC | 	wrbyte	_var04, arg01
07414     19 35 42 FC | 	wrbyte	_var03, _var02
07418     01 5C 06 F1 | 	add	arg01, #1
0741c     01 32 86 F1 | 	sub	_var02, #1
07420     DC FF 9F FD | 	jmp	#LR__0394
07424                 | LR__0395
07424                 | __system___strrev_ret
07424     2D 00 64 FD | 	ret
07428                 | 
07428                 | __system___fmtpad
07428     0C 5A 05 F6 | 	mov	COUNT_, #12
0742c     B0 00 A0 FD | 	call	#pushregs_
07430     2E 6B 02 F6 | 	mov	local01, arg01
07434     2F 6D 02 F6 | 	mov	local02, arg02
07438     31 6F 02 F6 | 	mov	local03, arg04
0743c     36 71 EA F8 | 	getbyte	local04, local02, #1
07440     16 6C 46 F0 | 	shr	local02, #22
07444     03 6C 0E F5 | 	and	local02, #3 wz
07448     00 72 06 F6 | 	mov	local05, #0
0744c     01 6C 06 A6 |  if_e	mov	local02, #1
07450     37 6D CA F7 | 	test	local02, local03 wz
07454     00 2A 06 A6 |  if_e	mov	result1, #0
07458     80 00 90 AD |  if_e	jmp	#LR__0399
0745c     30 71 82 F1 | 	sub	local04, arg03
07460     38 75 02 F6 | 	mov	local06, local04
07464     00 74 5E F2 | 	cmps	local06, #0 wcz
07468     00 2A 06 E6 |  if_be	mov	result1, #0
0746c     6C 00 90 ED |  if_be	jmp	#LR__0399
07470     03 6C 0E F2 | 	cmp	local02, #3 wz
07474     18 00 90 5D |  if_ne	jmp	#LR__0396
07478     01 6E 0E F2 | 	cmp	local03, #1 wz
0747c     6E 76 62 FD | 	wrz	local07
07480     3B 75 02 F1 | 	add	local06, local07
07484     3A 75 52 F6 | 	abs	local06, local06 wc
07488     01 74 46 F0 | 	shr	local06, #1
0748c     3A 75 62 C6 |  if_b	neg	local06, local06
07490                 | LR__0396
07490     00 74 5E F2 | 	cmps	local06, #0 wcz
07494     40 00 90 ED |  if_be	jmp	#LR__0398
07498     3A 79 02 F6 | 	mov	local08, local06
0749c                 | LR__0397
0749c     35 7B 02 F6 | 	mov	local09, local01
074a0     3D 77 02 FB | 	rdlong	local07, local09
074a4     04 7A 06 F1 | 	add	local09, #4
074a8     3D 7D 02 FB | 	rdlong	local10, local09
074ac     20 5C 06 F6 | 	mov	arg01, #32
074b0     07 7F 02 F6 | 	mov	local11, objptr
074b4     3B 0F 02 F6 | 	mov	objptr, local07
074b8     2D 7C 62 FD | 	call	local10
074bc     3F 0F 02 F6 | 	mov	objptr, local11
074c0     15 81 02 F6 | 	mov	local12, result1
074c4     00 80 5E F2 | 	cmps	local12, #0 wcz
074c8     40 2B 02 C6 |  if_b	mov	result1, local12
074cc     0C 00 90 CD |  if_b	jmp	#LR__0399
074d0     40 73 02 F1 | 	add	local05, local12
074d4     F1 79 6E FB | 	djnz	local08, #LR__0397
074d8                 | LR__0398
074d8     39 2B 02 F6 | 	mov	result1, local05
074dc                 | LR__0399
074dc     AF F0 03 F6 | 	mov	ptra, fp
074e0     BF 00 A0 FD | 	call	#popregs_
074e4                 | __system___fmtpad_ret
074e4     2D 00 64 FD | 	ret
074e8                 | 
074e8                 | __system___uitoa
074e8     09 5A 05 F6 | 	mov	COUNT_, #9
074ec     B0 00 A0 FD | 	call	#pushregs_
074f0     2E 6B 02 F6 | 	mov	local01, arg01
074f4     2F 6D 02 F6 | 	mov	local02, arg02
074f8     30 6F 02 F6 | 	mov	local03, arg03
074fc     31 71 02 F6 | 	mov	local04, arg04
07500     32 73 0A F6 | 	mov	local05, arg05 wz
07504     35 75 02 F6 | 	mov	local06, local01
07508     00 76 06 F6 | 	mov	local07, #0
0750c     37 78 06 56 |  if_ne	mov	local08, #55
07510     57 78 06 A6 |  if_e	mov	local08, #87
07514                 | LR__0400
07514     36 0B 03 F6 | 	mov	muldiva_, local02
07518     37 0D 03 F6 | 	mov	muldivb_, local03
0751c     CC 00 A0 FD | 	call	#unsdivide_
07520     85 7B 02 F6 | 	mov	local09, muldiva_
07524     0A 7A 1E F2 | 	cmp	local09, #10 wcz
07528     30 7A 06 C1 |  if_b	add	local09, #48
0752c     3C 7B 02 31 |  if_ae	add	local09, local08
07530     3A 7B 42 FC | 	wrbyte	local09, local06
07534     36 0B 03 F6 | 	mov	muldiva_, local02
07538     37 0D 03 F6 | 	mov	muldivb_, local03
0753c     01 74 06 F1 | 	add	local06, #1
07540     CC 00 A0 FD | 	call	#unsdivide_
07544     86 6D 0A F6 | 	mov	local02, muldivb_ wz
07548     01 76 06 F1 | 	add	local07, #1
0754c     C4 FF 9F 5D |  if_ne	jmp	#LR__0400
07550     38 77 1A F2 | 	cmp	local07, local04 wcz
07554     BC FF 9F CD |  if_b	jmp	#LR__0400
07558     3A 01 48 FC | 	wrbyte	#0, local06
0755c     35 5D 02 F6 | 	mov	arg01, local01
07560     78 FE BF FD | 	call	#__system___strrev
07564     3B 2B 02 F6 | 	mov	result1, local07
07568     AF F0 03 F6 | 	mov	ptra, fp
0756c     BF 00 A0 FD | 	call	#popregs_
07570                 | __system___uitoa_ret
07570     2D 00 64 FD | 	ret
07574                 | 
07574                 | __system___gettxfunc
07574     03 5A 05 F6 | 	mov	COUNT_, #3
07578     B0 00 A0 FD | 	call	#pushregs_
0757c     30 FE BF FD | 	call	#__system____getftab
07580     15 6B 0A F6 | 	mov	local01, result1 wz
07584     14 00 90 AD |  if_e	jmp	#LR__0401
07588     08 6A 06 F1 | 	add	local01, #8
0758c     35 6D 02 FB | 	rdlong	local02, local01
07590     08 6A 86 F1 | 	sub	local01, #8
07594     36 6F 0A F6 | 	mov	local03, local02 wz
07598     08 00 90 5D |  if_ne	jmp	#LR__0402
0759c                 | LR__0401
0759c     00 2A 06 F6 | 	mov	result1, #0
075a0     0C 00 90 FD | 	jmp	#LR__0403
075a4                 | LR__0402
075a4     35 5D 02 F6 | 	mov	arg01, local01
075a8     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
075ac     88 E9 BF FD | 	call	#__system___make_methodptr
075b0                 | LR__0403
075b0     AF F0 03 F6 | 	mov	ptra, fp
075b4     BF 00 A0 FD | 	call	#popregs_
075b8                 | __system___gettxfunc_ret
075b8     2D 00 64 FD | 	ret
075bc                 | 
075bc                 | __system___getiolock_0145
075bc     03 5A 05 F6 | 	mov	COUNT_, #3
075c0     B0 00 A0 FD | 	call	#pushregs_
075c4     E8 FD BF FD | 	call	#__system____getftab
075c8     15 6B 0A F6 | 	mov	local01, result1 wz
075cc     14 00 90 AD |  if_e	jmp	#LR__0404
075d0     08 6A 06 F1 | 	add	local01, #8
075d4     35 6D 02 FB | 	rdlong	local02, local01
075d8     08 6A 86 F1 | 	sub	local01, #8
075dc     36 6F 0A F6 | 	mov	local03, local02 wz
075e0     10 00 90 5D |  if_ne	jmp	#LR__0405
075e4                 | LR__0404
075e4     18 14 06 F1 | 	add	ptr___system__dat__, #24
075e8     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
075ec     18 14 86 F1 | 	sub	ptr___system__dat__, #24
075f0     08 00 90 FD | 	jmp	#LR__0406
075f4                 | LR__0405
075f4     0C 6A 06 F1 | 	add	local01, #12
075f8     35 2B 02 F6 | 	mov	result1, local01
075fc                 | LR__0406
075fc     AF F0 03 F6 | 	mov	ptra, fp
07600     BF 00 A0 FD | 	call	#popregs_
07604                 | __system___getiolock_0145_ret
07604     2D 00 64 FD | 	ret
07608                 | 
07608                 | __system___closeraw
07608     06 5A 05 F6 | 	mov	COUNT_, #6
0760c     B0 00 A0 FD | 	call	#pushregs_
07610     2E 6B 02 F6 | 	mov	local01, arg01
07614     00 6C 06 F6 | 	mov	local02, #0
07618     08 6A 06 F1 | 	add	local01, #8
0761c     35 6F 0A FB | 	rdlong	local03, local01 wz
07620     08 6A 86 F1 | 	sub	local01, #8
07624     1C 00 90 5D |  if_ne	jmp	#LR__0407
07628     01 00 00 FF 
0762c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07630     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07634     01 00 00 FF 
07638     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0763c     01 2A 66 F6 | 	neg	result1, #1
07640     90 00 90 FD | 	jmp	#LR__0410
07644                 | LR__0407
07644     28 6A 06 F1 | 	add	local01, #40
07648     35 6F 0A FB | 	rdlong	local03, local01 wz
0764c     28 6A 86 F1 | 	sub	local01, #40
07650     2C 00 90 AD |  if_e	jmp	#LR__0408
07654     28 6A 06 F1 | 	add	local01, #40
07658     35 6F 02 FB | 	rdlong	local03, local01
0765c     28 6A 86 F1 | 	sub	local01, #40
07660     37 71 02 FB | 	rdlong	local04, local03
07664     04 6E 06 F1 | 	add	local03, #4
07668     37 73 02 FB | 	rdlong	local05, local03
0766c     35 5D 02 F6 | 	mov	arg01, local01
07670     07 75 02 F6 | 	mov	local06, objptr
07674     38 0F 02 F6 | 	mov	objptr, local04
07678     2D 72 62 FD | 	call	local05
0767c     3A 0F 02 F6 | 	mov	objptr, local06
07680                 | LR__0408
07680     20 6A 06 F1 | 	add	local01, #32
07684     35 6F 0A FB | 	rdlong	local03, local01 wz
07688     20 6A 86 F1 | 	sub	local01, #32
0768c     30 00 90 AD |  if_e	jmp	#LR__0409
07690     20 6A 06 F1 | 	add	local01, #32
07694     35 6F 02 FB | 	rdlong	local03, local01
07698     20 6A 86 F1 | 	sub	local01, #32
0769c     37 71 02 FB | 	rdlong	local04, local03
076a0     04 6E 06 F1 | 	add	local03, #4
076a4     37 73 02 FB | 	rdlong	local05, local03
076a8     35 5D 02 F6 | 	mov	arg01, local01
076ac     07 75 02 F6 | 	mov	local06, objptr
076b0     38 0F 02 F6 | 	mov	objptr, local04
076b4     2D 72 62 FD | 	call	local05
076b8     3A 0F 02 F6 | 	mov	objptr, local06
076bc     15 6D 02 F6 | 	mov	local02, result1
076c0                 | LR__0409
076c0     35 5D 02 F6 | 	mov	arg01, local01
076c4     00 5E 06 F6 | 	mov	arg02, #0
076c8     30 60 06 F6 | 	mov	arg03, #48
076cc     A0 00 A0 FD | 	call	#\builtin_bytefill_
076d0     36 2B 02 F6 | 	mov	result1, local02
076d4                 | LR__0410
076d4     AF F0 03 F6 | 	mov	ptra, fp
076d8     BF 00 A0 FD | 	call	#popregs_
076dc                 | __system___closeraw_ret
076dc     2D 00 64 FD | 	ret
076e0                 | 
076e0                 | __system____default_getc
076e0     0C 5A 05 F6 | 	mov	COUNT_, #12
076e4     B0 00 A0 FD | 	call	#pushregs_
076e8     2E 6B 02 F6 | 	mov	local01, arg01
076ec     35 6D 02 FB | 	rdlong	local02, local01
076f0     08 6C 06 F1 | 	add	local02, #8
076f4     36 6F 02 FB | 	rdlong	local03, local02
076f8     08 6C 86 F1 | 	sub	local02, #8
076fc     02 6E CE F7 | 	test	local03, #2 wz
07700     08 00 90 AD |  if_e	jmp	#LR__0411
07704     35 5D 02 F6 | 	mov	arg01, local01
07708     FC 01 B0 FD | 	call	#__system____default_flush
0770c                 | LR__0411
0770c     08 6C 06 F1 | 	add	local02, #8
07710     36 6F 02 FB | 	rdlong	local03, local02
07714     01 6E 46 F5 | 	or	local03, #1
07718     36 6F 62 FC | 	wrlong	local03, local02
0771c     08 6C 86 F1 | 	sub	local02, #8
07720     36 71 0A FB | 	rdlong	local04, local02 wz
07724     7C 00 90 5D |  if_ne	jmp	#LR__0413
07728     35 5D 02 F6 | 	mov	arg01, local01
0772c     2E 73 02 FB | 	rdlong	local05, arg01
07730     0C 72 06 F1 | 	add	local05, #12
07734     39 5F 02 F6 | 	mov	arg02, local05
07738     0C 72 86 F1 | 	sub	local05, #12
0773c     10 5C 06 F1 | 	add	arg01, #16
07740     2E 75 02 FB | 	rdlong	local06, arg01
07744     10 5C 86 F1 | 	sub	arg01, #16
07748     3A 77 02 FB | 	rdlong	local07, local06
0774c     04 74 06 F1 | 	add	local06, #4
07750     3A 79 02 FB | 	rdlong	local08, local06
07754     0A 60 C6 F9 | 	decod	arg03, #10
07758     07 7B 02 F6 | 	mov	local09, objptr
0775c     3B 0F 02 F6 | 	mov	objptr, local07
07760     2D 78 62 FD | 	call	local08
07764     3D 0F 02 F6 | 	mov	objptr, local09
07768     15 7D 02 F6 | 	mov	local10, result1
0776c     00 7C 5E F2 | 	cmps	local10, #0 wcz
07770     01 2A 66 C6 |  if_b	neg	result1, #1
07774     28 00 90 CD |  if_b	jmp	#LR__0412
07778     39 7D 62 FC | 	wrlong	local10, local05
0777c     0C 72 06 F1 | 	add	local05, #12
07780     39 7F 02 F6 | 	mov	local11, local05
07784     08 72 86 F1 | 	sub	local05, #8
07788     39 7F 62 FC | 	wrlong	local11, local05
0778c     04 72 06 F1 | 	add	local05, #4
07790     39 75 02 FB | 	rdlong	local06, local05
07794     01 74 46 F5 | 	or	local06, #1
07798     39 75 62 FC | 	wrlong	local06, local05
0779c     3E 2B 02 F6 | 	mov	result1, local10
077a0                 | LR__0412
077a0     15 71 02 F6 | 	mov	local04, result1
077a4                 | LR__0413
077a4     00 70 5E F2 | 	cmps	local04, #0 wcz
077a8     01 2A 66 E6 |  if_be	neg	result1, #1
077ac     1C 00 90 ED |  if_be	jmp	#LR__0414
077b0     01 70 86 F1 | 	sub	local04, #1
077b4     36 71 62 FC | 	wrlong	local04, local02
077b8     04 6C 06 F1 | 	add	local02, #4
077bc     36 81 02 FB | 	rdlong	local12, local02
077c0     40 2B C2 FA | 	rdbyte	result1, local12
077c4     01 80 06 F1 | 	add	local12, #1
077c8     36 81 62 FC | 	wrlong	local12, local02
077cc                 | LR__0414
077cc     AF F0 03 F6 | 	mov	ptra, fp
077d0     BF 00 A0 FD | 	call	#popregs_
077d4                 | __system____default_getc_ret
077d4     2D 00 64 FD | 	ret
077d8                 | 
077d8                 | __system____default_putc
077d8     06 5A 05 F6 | 	mov	COUNT_, #6
077dc     B0 00 A0 FD | 	call	#pushregs_
077e0     2E 6B 02 F6 | 	mov	local01, arg01
077e4     2F 6D 02 F6 | 	mov	local02, arg02
077e8     36 6F 02 FB | 	rdlong	local03, local02
077ec     08 6E 06 F1 | 	add	local03, #8
077f0     37 71 02 FB | 	rdlong	local04, local03
077f4     08 6E 86 F1 | 	sub	local03, #8
077f8     01 70 CE F7 | 	test	local04, #1 wz
077fc     08 00 90 AD |  if_e	jmp	#LR__0415
07800     36 5D 02 F6 | 	mov	arg01, local02
07804     00 01 B0 FD | 	call	#__system____default_flush
07808                 | LR__0415
07808     08 6E 06 F1 | 	add	local03, #8
0780c     37 71 02 FB | 	rdlong	local04, local03
07810     02 70 46 F5 | 	or	local04, #2
07814     37 71 62 FC | 	wrlong	local04, local03
07818     08 6E 86 F1 | 	sub	local03, #8
0781c     37 73 02 FB | 	rdlong	local05, local03
07820     39 75 02 F6 | 	mov	local06, local05
07824     0C 6E 06 F1 | 	add	local03, #12
07828     37 75 02 F1 | 	add	local06, local03
0782c     3A 6B 42 FC | 	wrbyte	local01, local06
07830     FF 6A 06 F5 | 	and	local01, #255
07834     01 72 06 F1 | 	add	local05, #1
07838     0C 6E 86 F1 | 	sub	local03, #12
0783c     37 73 62 FC | 	wrlong	local05, local03
07840     02 00 00 FF 
07844     00 72 0E F2 | 	cmp	local05, ##1024 wz
07848     10 00 90 5D |  if_ne	jmp	#LR__0416
0784c     36 5D 02 F6 | 	mov	arg01, local02
07850     B4 00 B0 FD | 	call	#__system____default_flush
07854     00 2A 0E F2 | 	cmp	result1, #0 wz
07858     01 6A 66 56 |  if_ne	neg	local01, #1
0785c                 | LR__0416
0785c     35 2B 02 F6 | 	mov	result1, local01
07860     AF F0 03 F6 | 	mov	ptra, fp
07864     BF 00 A0 FD | 	call	#popregs_
07868                 | __system____default_putc_ret
07868     2D 00 64 FD | 	ret
0786c                 | 
0786c                 | __system____default_putc_terminal
0786c     06 5A 05 F6 | 	mov	COUNT_, #6
07870     B0 00 A0 FD | 	call	#pushregs_
07874     2E 6B 02 F6 | 	mov	local01, arg01
07878     2F 6D 02 F6 | 	mov	local02, arg02
0787c     36 6F 02 FB | 	rdlong	local03, local02
07880     08 6E 06 F1 | 	add	local03, #8
07884     37 71 02 FB | 	rdlong	local04, local03
07888     08 6E 86 F1 | 	sub	local03, #8
0788c     01 70 CE F7 | 	test	local04, #1 wz
07890     08 00 90 AD |  if_e	jmp	#LR__0417
07894     36 5D 02 F6 | 	mov	arg01, local02
07898     6C 00 B0 FD | 	call	#__system____default_flush
0789c                 | LR__0417
0789c     08 6E 06 F1 | 	add	local03, #8
078a0     37 71 02 FB | 	rdlong	local04, local03
078a4     02 70 46 F5 | 	or	local04, #2
078a8     37 71 62 FC | 	wrlong	local04, local03
078ac     08 6E 86 F1 | 	sub	local03, #8
078b0     37 73 02 FB | 	rdlong	local05, local03
078b4     39 75 02 F6 | 	mov	local06, local05
078b8     0C 6E 06 F1 | 	add	local03, #12
078bc     37 75 02 F1 | 	add	local06, local03
078c0     3A 6B 42 FC | 	wrbyte	local01, local06
078c4     FF 6A 06 F5 | 	and	local01, #255
078c8     0C 6E 86 F1 | 	sub	local03, #12
078cc     01 72 06 F1 | 	add	local05, #1
078d0     37 73 62 FC | 	wrlong	local05, local03
078d4     0A 6A 0E F2 | 	cmp	local01, #10 wz
078d8     0C 00 90 AD |  if_e	jmp	#LR__0418
078dc     02 00 00 FF 
078e0     00 72 0E F2 | 	cmp	local05, ##1024 wz
078e4     10 00 90 5D |  if_ne	jmp	#LR__0419
078e8                 | LR__0418
078e8     36 5D 02 F6 | 	mov	arg01, local02
078ec     18 00 B0 FD | 	call	#__system____default_flush
078f0     00 2A 0E F2 | 	cmp	result1, #0 wz
078f4     01 6A 66 56 |  if_ne	neg	local01, #1
078f8                 | LR__0419
078f8     35 2B 02 F6 | 	mov	result1, local01
078fc     AF F0 03 F6 | 	mov	ptra, fp
07900     BF 00 A0 FD | 	call	#popregs_
07904                 | __system____default_putc_terminal_ret
07904     2D 00 64 FD | 	ret
07908                 | 
07908                 | __system____default_flush
07908     0F 5A 05 F6 | 	mov	COUNT_, #15
0790c     B0 00 A0 FD | 	call	#pushregs_
07910     2E 6B 02 F6 | 	mov	local01, arg01
07914     35 6D 02 FB | 	rdlong	local02, local01
07918     36 6F 02 FB | 	rdlong	local03, local02
0791c     08 6C 06 F1 | 	add	local02, #8
07920     36 71 02 FB | 	rdlong	local04, local02
07924     08 6C 86 F1 | 	sub	local02, #8
07928     02 70 CE F7 | 	test	local04, #2 wz
0792c     B8 00 90 AD |  if_e	jmp	#LR__0422
07930     00 6E 5E F2 | 	cmps	local03, #0 wcz
07934     30 01 90 ED |  if_be	jmp	#LR__0424
07938     08 6A 06 F1 | 	add	local01, #8
0793c     35 71 02 FB | 	rdlong	local04, local01
07940     08 6A 86 F1 | 	sub	local01, #8
07944     40 70 CE F7 | 	test	local04, #64 wz
07948     5C 00 90 AD |  if_e	jmp	#LR__0421
0794c     08 6A 06 F1 | 	add	local01, #8
07950     35 71 02 FB | 	rdlong	local04, local01
07954     08 6A 86 F1 | 	sub	local01, #8
07958     80 70 CE F7 | 	test	local04, #128 wz
0795c     48 00 90 AD |  if_e	jmp	#LR__0420
07960     2C 6A 06 F1 | 	add	local01, #44
07964     35 71 02 FB | 	rdlong	local04, local01
07968     2C 6A 86 F1 | 	sub	local01, #44
0796c     38 73 02 FB | 	rdlong	local05, local04
07970     04 70 06 F1 | 	add	local04, #4
07974     38 75 02 FB | 	rdlong	local06, local04
07978     35 5D 02 F6 | 	mov	arg01, local01
0797c     00 5E 06 F6 | 	mov	arg02, #0
07980     02 60 06 F6 | 	mov	arg03, #2
07984     07 77 02 F6 | 	mov	local07, objptr
07988     39 0F 02 F6 | 	mov	objptr, local05
0798c     2D 74 62 FD | 	call	local06
07990     3B 0F 02 F6 | 	mov	objptr, local07
07994     08 6A 06 F1 | 	add	local01, #8
07998     35 71 02 FB | 	rdlong	local04, local01
0799c     80 70 26 F5 | 	andn	local04, #128
079a0     35 71 62 FC | 	wrlong	local04, local01
079a4     08 6A 86 F1 | 	sub	local01, #8
079a8                 | LR__0420
079a8                 | LR__0421
079a8     0C 6C 06 F1 | 	add	local02, #12
079ac     36 5F 02 F6 | 	mov	arg02, local02
079b0     0C 6C 86 F1 | 	sub	local02, #12
079b4     14 6A 06 F1 | 	add	local01, #20
079b8     35 71 02 FB | 	rdlong	local04, local01
079bc     14 6A 86 F1 | 	sub	local01, #20
079c0     38 73 02 FB | 	rdlong	local05, local04
079c4     04 70 06 F1 | 	add	local04, #4
079c8     38 75 02 FB | 	rdlong	local06, local04
079cc     35 5D 02 F6 | 	mov	arg01, local01
079d0     37 61 02 F6 | 	mov	arg03, local03
079d4     07 77 02 F6 | 	mov	local07, objptr
079d8     39 0F 02 F6 | 	mov	objptr, local05
079dc     2D 74 62 FD | 	call	local06
079e0     3B 0F 02 F6 | 	mov	objptr, local07
079e4     80 00 90 FD | 	jmp	#LR__0424
079e8                 | LR__0422
079e8     08 6C 06 F1 | 	add	local02, #8
079ec     36 71 02 FB | 	rdlong	local04, local02
079f0     08 6C 86 F1 | 	sub	local02, #8
079f4     01 70 CE F7 | 	test	local04, #1 wz
079f8     6C 00 90 AD |  if_e	jmp	#LR__0423
079fc     00 6E 0E F2 | 	cmp	local03, #0 wz
07a00     64 00 90 AD |  if_e	jmp	#LR__0423
07a04     2C 6A 06 F1 | 	add	local01, #44
07a08     35 79 02 FB | 	rdlong	local08, local01
07a0c     2C 6A 86 F1 | 	sub	local01, #44
07a10     3C 71 02 F6 | 	mov	local04, local08
07a14     38 73 02 FB | 	rdlong	local05, local04
07a18     04 70 06 F1 | 	add	local04, #4
07a1c     38 7B 02 FB | 	rdlong	local09, local04
07a20     04 70 86 F1 | 	sub	local04, #4
07a24     3D 75 02 F6 | 	mov	local06, local09
07a28     35 7D 02 F6 | 	mov	local10, local01
07a2c     37 7F 02 F6 | 	mov	local11, local03
07a30     3F 7F 62 F6 | 	neg	local11, local11
07a34     3F 81 02 F6 | 	mov	local12, local11
07a38     01 76 06 F6 | 	mov	local07, #1
07a3c     3E 5D 02 F6 | 	mov	arg01, local10
07a40     40 5F 02 F6 | 	mov	arg02, local12
07a44     01 60 06 F6 | 	mov	arg03, #1
07a48     07 83 02 F6 | 	mov	local13, objptr
07a4c     39 0F 02 F6 | 	mov	objptr, local05
07a50     2D 74 62 FD | 	call	local06
07a54     41 0F 02 F6 | 	mov	objptr, local13
07a58     15 85 02 F6 | 	mov	local14, result1
07a5c     42 87 02 F6 | 	mov	local15, local14
07a60     00 86 5E F2 | 	cmps	local15, #0 wcz
07a64     37 87 02 36 |  if_ae	mov	local15, local03
07a68                 | LR__0423
07a68                 | LR__0424
07a68     36 01 68 FC | 	wrlong	#0, local02
07a6c     04 6C 06 F1 | 	add	local02, #4
07a70     36 01 68 FC | 	wrlong	#0, local02
07a74     04 6C 06 F1 | 	add	local02, #4
07a78     36 01 68 FC | 	wrlong	#0, local02
07a7c     00 2A 06 F6 | 	mov	result1, #0
07a80     AF F0 03 F6 | 	mov	ptra, fp
07a84     BF 00 A0 FD | 	call	#popregs_
07a88                 | __system____default_flush_ret
07a88     2D 00 64 FD | 	ret
07a8c                 | 
07a8c                 | __system___rxtxioctl_0174
07a8c     02 5A 05 F6 | 	mov	COUNT_, #2
07a90     B0 00 A0 FD | 	call	#pushregs_
07a94     2F 6B 02 F6 | 	mov	local01, arg02
07a98     30 6D 02 F6 | 	mov	local02, arg03
07a9c     00 6B 0E F2 | 	cmp	local01, #256 wz
07aa0     0C 00 90 AD |  if_e	jmp	#LR__0425
07aa4     01 6B 0E F2 | 	cmp	local01, #257 wz
07aa8     1C 00 90 AD |  if_e	jmp	#LR__0426
07aac     30 00 90 FD | 	jmp	#LR__0427
07ab0                 | LR__0425
07ab0     08 14 06 F1 | 	add	ptr___system__dat__, #8
07ab4     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07ab8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07abc     36 2B 62 FC | 	wrlong	result1, local02
07ac0     00 2A 06 F6 | 	mov	result1, #0
07ac4     30 00 90 FD | 	jmp	#LR__0428
07ac8                 | LR__0426
07ac8     36 5D 02 FB | 	rdlong	arg01, local02
07acc     08 14 06 F1 | 	add	ptr___system__dat__, #8
07ad0     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07ad4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07ad8     00 2A 06 F6 | 	mov	result1, #0
07adc     18 00 90 FD | 	jmp	#LR__0428
07ae0                 | LR__0427
07ae0     01 00 00 FF 
07ae4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ae8     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07aec     01 00 00 FF 
07af0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07af4     01 2A 66 F6 | 	neg	result1, #1
07af8                 | LR__0428
07af8     AF F0 03 F6 | 	mov	ptra, fp
07afc     BF 00 A0 FD | 	call	#popregs_
07b00                 | __system___rxtxioctl_0174_ret
07b00     2D 00 64 FD | 	ret
07b04                 | 
07b04                 | __system____dummy_flush_0175
07b04     00 2A 06 F6 | 	mov	result1, #0
07b08                 | __system____dummy_flush_0175_ret
07b08     2D 00 64 FD | 	ret
07b0c                 | 
07b0c                 | __system___vfswrite
07b0c     0B 5A 05 F6 | 	mov	COUNT_, #11
07b10     B0 00 A0 FD | 	call	#pushregs_
07b14     2E 6B 02 F6 | 	mov	local01, arg01
07b18     2F 6D 02 F6 | 	mov	local02, arg02
07b1c     30 6F 02 F6 | 	mov	local03, arg03
07b20     36 71 02 F6 | 	mov	local04, local02
07b24     08 6A 06 F1 | 	add	local01, #8
07b28     35 73 02 FB | 	rdlong	local05, local01
07b2c     08 6A 86 F1 | 	sub	local01, #8
07b30     02 72 CE F7 | 	test	local05, #2 wz
07b34     1C 00 90 5D |  if_ne	jmp	#LR__0429
07b38     01 00 00 FF 
07b3c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07b40     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07b44     01 00 00 FF 
07b48     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07b4c     01 2A 66 F6 | 	neg	result1, #1
07b50     70 01 90 FD | 	jmp	#LR__0437
07b54                 | LR__0429
07b54     08 6A 06 F1 | 	add	local01, #8
07b58     35 73 02 FB | 	rdlong	local05, local01
07b5c     08 6A 86 F1 | 	sub	local01, #8
07b60     40 72 CE F7 | 	test	local05, #64 wz
07b64     5C 00 90 AD |  if_e	jmp	#LR__0431
07b68     08 6A 06 F1 | 	add	local01, #8
07b6c     35 73 02 FB | 	rdlong	local05, local01
07b70     08 6A 86 F1 | 	sub	local01, #8
07b74     80 72 CE F7 | 	test	local05, #128 wz
07b78     48 00 90 AD |  if_e	jmp	#LR__0430
07b7c     2C 6A 06 F1 | 	add	local01, #44
07b80     35 73 02 FB | 	rdlong	local05, local01
07b84     2C 6A 86 F1 | 	sub	local01, #44
07b88     39 75 02 FB | 	rdlong	local06, local05
07b8c     04 72 06 F1 | 	add	local05, #4
07b90     39 77 02 FB | 	rdlong	local07, local05
07b94     35 5D 02 F6 | 	mov	arg01, local01
07b98     00 5E 06 F6 | 	mov	arg02, #0
07b9c     02 60 06 F6 | 	mov	arg03, #2
07ba0     07 79 02 F6 | 	mov	local08, objptr
07ba4     3A 0F 02 F6 | 	mov	objptr, local06
07ba8     2D 76 62 FD | 	call	local07
07bac     3C 0F 02 F6 | 	mov	objptr, local08
07bb0     08 6A 06 F1 | 	add	local01, #8
07bb4     35 73 02 FB | 	rdlong	local05, local01
07bb8     80 72 26 F5 | 	andn	local05, #128
07bbc     35 73 62 FC | 	wrlong	local05, local01
07bc0     08 6A 86 F1 | 	sub	local01, #8
07bc4                 | LR__0430
07bc4                 | LR__0431
07bc4     14 6A 06 F1 | 	add	local01, #20
07bc8     35 73 0A FB | 	rdlong	local05, local01 wz
07bcc     14 6A 86 F1 | 	sub	local01, #20
07bd0     7C 00 90 AD |  if_e	jmp	#LR__0433
07bd4     14 6A 06 F1 | 	add	local01, #20
07bd8     35 73 02 FB | 	rdlong	local05, local01
07bdc     14 6A 86 F1 | 	sub	local01, #20
07be0     39 75 02 FB | 	rdlong	local06, local05
07be4     04 72 06 F1 | 	add	local05, #4
07be8     39 77 02 FB | 	rdlong	local07, local05
07bec     36 5F 02 F6 | 	mov	arg02, local02
07bf0     37 61 02 F6 | 	mov	arg03, local03
07bf4     35 5D 02 F6 | 	mov	arg01, local01
07bf8     07 79 02 F6 | 	mov	local08, objptr
07bfc     3A 0F 02 F6 | 	mov	objptr, local06
07c00     2D 76 62 FD | 	call	local07
07c04     3C 0F 02 F6 | 	mov	objptr, local08
07c08     15 7B 02 F6 | 	mov	local09, result1
07c0c     00 7A 5E F2 | 	cmps	local09, #0 wcz
07c10     34 00 90 3D |  if_ae	jmp	#LR__0432
07c14     08 6A 06 F1 | 	add	local01, #8
07c18     35 73 02 FB | 	rdlong	local05, local01
07c1c     20 72 46 F5 | 	or	local05, #32
07c20     35 73 62 FC | 	wrlong	local05, local01
07c24     01 00 00 FF 
07c28     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c2c     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07c30     01 00 00 FF 
07c34     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c38     00 7A 0E F2 | 	cmp	local09, #0 wz
07c3c     01 2A 66 56 |  if_ne	neg	result1, #1
07c40     00 2A 06 A6 |  if_e	mov	result1, #0
07c44     7C 00 90 FD | 	jmp	#LR__0437
07c48                 | LR__0432
07c48     3D 2B 02 F6 | 	mov	result1, local09
07c4c     74 00 90 FD | 	jmp	#LR__0437
07c50                 | LR__0433
07c50     18 6A 06 F1 | 	add	local01, #24
07c54     35 7D 0A FB | 	rdlong	local10, local01 wz
07c58     18 6A 86 F1 | 	sub	local01, #24
07c5c     1C 00 90 5D |  if_ne	jmp	#LR__0434
07c60     01 00 00 FF 
07c64     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c68     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07c6c     01 00 00 FF 
07c70     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c74     01 2A 66 F6 | 	neg	result1, #1
07c78     48 00 90 FD | 	jmp	#LR__0437
07c7c                 | LR__0434
07c7c     00 7A 06 F6 | 	mov	local09, #0
07c80                 | LR__0435
07c80     00 6E 1E F2 | 	cmp	local03, #0 wcz
07c84     38 00 90 ED |  if_be	jmp	#LR__0436
07c88     3E 73 02 F6 | 	mov	local05, local10
07c8c     39 75 02 FB | 	rdlong	local06, local05
07c90     04 72 06 F1 | 	add	local05, #4
07c94     39 77 02 FB | 	rdlong	local07, local05
07c98     38 5D C2 FA | 	rdbyte	arg01, local04
07c9c     35 5F 02 F6 | 	mov	arg02, local01
07ca0     07 7F 02 F6 | 	mov	local11, objptr
07ca4     3A 0F 02 F6 | 	mov	objptr, local06
07ca8     01 70 06 F1 | 	add	local04, #1
07cac     2D 76 62 FD | 	call	local07
07cb0     3F 0F 02 F6 | 	mov	objptr, local11
07cb4     15 7B 02 F1 | 	add	local09, result1
07cb8     01 6E 86 F1 | 	sub	local03, #1
07cbc     C0 FF 9F FD | 	jmp	#LR__0435
07cc0                 | LR__0436
07cc0     3D 2B 02 F6 | 	mov	result1, local09
07cc4                 | LR__0437
07cc4     AF F0 03 F6 | 	mov	ptra, fp
07cc8     BF 00 A0 FD | 	call	#popregs_
07ccc                 | __system___vfswrite_ret
07ccc     2D 00 64 FD | 	ret
07cd0                 | 
07cd0                 | __system___vfsread
07cd0     0F 5A 05 F6 | 	mov	COUNT_, #15
07cd4     B0 00 A0 FD | 	call	#pushregs_
07cd8     2C F0 07 F1 | 	add	ptra, #44
07cdc     04 5E 05 F1 | 	add	fp, #4
07ce0     AF 5C 62 FC | 	wrlong	arg01, fp
07ce4     04 5E 05 F1 | 	add	fp, #4
07ce8     AF 5E 62 FC | 	wrlong	arg02, fp
07cec     04 5E 05 F1 | 	add	fp, #4
07cf0     AF 60 62 FC | 	wrlong	arg03, fp
07cf4     04 5E 85 F1 | 	sub	fp, #4
07cf8     AF 6A 02 FB | 	rdlong	local01, fp
07cfc     14 5E 05 F1 | 	add	fp, #20
07d00     AF 6A 62 FC | 	wrlong	local01, fp
07d04     04 5E 05 F1 | 	add	fp, #4
07d08     AF 00 68 FC | 	wrlong	#0, fp
07d0c     1C 5E 85 F1 | 	sub	fp, #28
07d10     AF 6C 02 FB | 	rdlong	local02, fp
07d14     04 5E 85 F1 | 	sub	fp, #4
07d18     08 6C 06 F1 | 	add	local02, #8
07d1c     36 6B 02 FB | 	rdlong	local01, local02
07d20     01 6A CE F7 | 	test	local01, #1 wz
07d24     1C 00 90 5D |  if_ne	jmp	#LR__0438
07d28     01 00 00 FF 
07d2c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d30     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07d34     01 00 00 FF 
07d38     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d3c     01 2A 66 F6 | 	neg	result1, #1
07d40     9C 02 90 FD | 	jmp	#LR__0446
07d44                 | LR__0438
07d44     04 5E 05 F1 | 	add	fp, #4
07d48     AF 6A 02 FB | 	rdlong	local01, fp
07d4c     04 5E 85 F1 | 	sub	fp, #4
07d50     10 6A 06 F1 | 	add	local01, #16
07d54     35 6F 0A FB | 	rdlong	local03, local01 wz
07d58     B4 00 90 AD |  if_e	jmp	#LR__0440
07d5c     04 5E 05 F1 | 	add	fp, #4
07d60     AF 70 02 FB | 	rdlong	local04, fp
07d64     10 70 06 F1 | 	add	local04, #16
07d68     38 6B 02 FB | 	rdlong	local01, local04
07d6c     35 6D 02 FB | 	rdlong	local02, local01
07d70     04 6A 06 F1 | 	add	local01, #4
07d74     35 6F 02 FB | 	rdlong	local03, local01
07d78     AF 5C 02 FB | 	rdlong	arg01, fp
07d7c     04 5E 05 F1 | 	add	fp, #4
07d80     AF 5E 02 FB | 	rdlong	arg02, fp
07d84     04 5E 05 F1 | 	add	fp, #4
07d88     AF 60 02 FB | 	rdlong	arg03, fp
07d8c     0C 5E 85 F1 | 	sub	fp, #12
07d90     07 73 02 F6 | 	mov	local05, objptr
07d94     36 0F 02 F6 | 	mov	objptr, local02
07d98     2D 6E 62 FD | 	call	local03
07d9c     39 0F 02 F6 | 	mov	objptr, local05
07da0     10 5E 05 F1 | 	add	fp, #16
07da4     AF 2A 62 FC | 	wrlong	result1, fp
07da8     10 5E 85 F1 | 	sub	fp, #16
07dac     00 2A 5E F2 | 	cmps	result1, #0 wcz
07db0     4C 00 90 3D |  if_ae	jmp	#LR__0439
07db4     04 5E 05 F1 | 	add	fp, #4
07db8     AF 6A 02 FB | 	rdlong	local01, fp
07dbc     35 71 02 F6 | 	mov	local04, local01
07dc0     08 70 06 F1 | 	add	local04, #8
07dc4     38 6F 02 FB | 	rdlong	local03, local04
07dc8     20 6E 46 F5 | 	or	local03, #32
07dcc     08 6A 06 F1 | 	add	local01, #8
07dd0     35 6F 62 FC | 	wrlong	local03, local01
07dd4     0C 5E 05 F1 | 	add	fp, #12
07dd8     AF 5C 0A FB | 	rdlong	arg01, fp wz
07ddc     10 5E 85 F1 | 	sub	fp, #16
07de0     01 00 00 FF 
07de4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07de8     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07dec     01 00 00 FF 
07df0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07df4     01 2A 66 56 |  if_ne	neg	result1, #1
07df8     00 2A 06 A6 |  if_e	mov	result1, #0
07dfc     E0 01 90 FD | 	jmp	#LR__0446
07e00                 | LR__0439
07e00     10 5E 05 F1 | 	add	fp, #16
07e04     AF 2A 02 FB | 	rdlong	result1, fp
07e08     10 5E 85 F1 | 	sub	fp, #16
07e0c     D0 01 90 FD | 	jmp	#LR__0446
07e10                 | LR__0440
07e10     04 5E 05 F1 | 	add	fp, #4
07e14     AF 6A 02 FB | 	rdlong	local01, fp
07e18     1C 6A 06 F1 | 	add	local01, #28
07e1c     35 6F 02 FB | 	rdlong	local03, local01
07e20     14 5E 05 F1 | 	add	fp, #20
07e24     AF 6E 62 FC | 	wrlong	local03, fp
07e28     AF 6A 0A FB | 	rdlong	local01, fp wz
07e2c     18 5E 85 F1 | 	sub	fp, #24
07e30     1C 00 90 5D |  if_ne	jmp	#LR__0441
07e34     01 00 00 FF 
07e38     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07e3c     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07e40     01 00 00 FF 
07e44     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07e48     01 2A 66 F6 | 	neg	result1, #1
07e4c     90 01 90 FD | 	jmp	#LR__0446
07e50                 | LR__0441
07e50     04 5E 05 F1 | 	add	fp, #4
07e54     AF 6A 02 FB | 	rdlong	local01, fp
07e58     04 5E 85 F1 | 	sub	fp, #4
07e5c     24 6A 06 F1 | 	add	local01, #36
07e60     35 6F 0A FB | 	rdlong	local03, local01 wz
07e64     A0 00 90 AD |  if_e	jmp	#LR__0443
07e68     24 5E 05 F1 | 	add	fp, #36
07e6c     AF 74 02 F6 | 	mov	local06, fp
07e70     20 5E 85 F1 | 	sub	fp, #32
07e74     AF 76 02 FB | 	rdlong	local07, fp
07e78     3B 71 02 F6 | 	mov	local04, local07
07e7c     24 70 06 F1 | 	add	local04, #36
07e80     38 79 02 FB | 	rdlong	local08, local04
07e84     3C 6B 02 F6 | 	mov	local01, local08
07e88     35 6D 02 FB | 	rdlong	local02, local01
07e8c     04 6A 06 F1 | 	add	local01, #4
07e90     35 7B 02 FB | 	rdlong	local09, local01
07e94     3D 6F 02 F6 | 	mov	local03, local09
07e98     3B 7D 02 F6 | 	mov	local10, local07
07e9c     04 5E 85 F1 | 	sub	fp, #4
07ea0     3E 7F 02 F6 | 	mov	local11, local10
07ea4     00 81 06 F6 | 	mov	local12, #256
07ea8     3A 83 02 F6 | 	mov	local13, local06
07eac     3F 5D 02 F6 | 	mov	arg01, local11
07eb0     00 5F 06 F6 | 	mov	arg02, #256
07eb4     41 61 02 F6 | 	mov	arg03, local13
07eb8     07 85 02 F6 | 	mov	local14, objptr
07ebc     36 0F 02 F6 | 	mov	objptr, local02
07ec0     2D 6E 62 FD | 	call	local03
07ec4     42 0F 02 F6 | 	mov	objptr, local14
07ec8     15 87 02 F6 | 	mov	local15, result1
07ecc     10 5E 05 F1 | 	add	fp, #16
07ed0     AF 86 62 FC | 	wrlong	local15, fp
07ed4     AF 6C 0A FB | 	rdlong	local02, fp wz
07ed8     10 5E 85 F1 | 	sub	fp, #16
07edc     28 00 90 5D |  if_ne	jmp	#LR__0442
07ee0     24 5E 05 F1 | 	add	fp, #36
07ee4     AF 70 02 FB | 	rdlong	local04, fp
07ee8     24 5E 85 F1 | 	sub	fp, #36
07eec     38 6F 02 F6 | 	mov	local03, local04
07ef0     02 6E 0E F5 | 	and	local03, #2 wz
07ef4     10 00 90 AD |  if_e	jmp	#LR__0442
07ef8     01 6A 06 F6 | 	mov	local01, #1
07efc     20 5E 05 F1 | 	add	fp, #32
07f00     AF 02 68 FC | 	wrlong	#1, fp
07f04     20 5E 85 F1 | 	sub	fp, #32
07f08                 | LR__0442
07f08                 | LR__0443
07f08     10 5E 05 F1 | 	add	fp, #16
07f0c     AF 00 68 FC | 	wrlong	#0, fp
07f10     10 5E 85 F1 | 	sub	fp, #16
07f14                 | LR__0444
07f14     0C 5E 05 F1 | 	add	fp, #12
07f18     AF 6A 02 FB | 	rdlong	local01, fp
07f1c     0C 5E 85 F1 | 	sub	fp, #12
07f20     00 6A 1E F2 | 	cmp	local01, #0 wcz
07f24     AC 00 90 ED |  if_be	jmp	#LR__0445
07f28     18 5E 05 F1 | 	add	fp, #24
07f2c     AF 6A 02 FB | 	rdlong	local01, fp
07f30     35 6D 02 FB | 	rdlong	local02, local01
07f34     04 6A 06 F1 | 	add	local01, #4
07f38     35 6F 02 FB | 	rdlong	local03, local01
07f3c     14 5E 85 F1 | 	sub	fp, #20
07f40     AF 5C 02 FB | 	rdlong	arg01, fp
07f44     04 5E 85 F1 | 	sub	fp, #4
07f48     07 7F 02 F6 | 	mov	local11, objptr
07f4c     36 0F 02 F6 | 	mov	objptr, local02
07f50     2D 6E 62 FD | 	call	local03
07f54     3F 0F 02 F6 | 	mov	objptr, local11
07f58     15 7D 02 F6 | 	mov	local10, result1
07f5c     14 5E 05 F1 | 	add	fp, #20
07f60     AF 7C 62 FC | 	wrlong	local10, fp
07f64     14 5E 85 F1 | 	sub	fp, #20
07f68     00 7C 5E F2 | 	cmps	local10, #0 wcz
07f6c     64 00 90 CD |  if_b	jmp	#LR__0445
07f70     1C 5E 05 F1 | 	add	fp, #28
07f74     AF 6A 02 FB | 	rdlong	local01, fp
07f78     35 6F 02 F6 | 	mov	local03, local01
07f7c     01 6E 06 F1 | 	add	local03, #1
07f80     AF 6E 62 FC | 	wrlong	local03, fp
07f84     08 5E 85 F1 | 	sub	fp, #8
07f88     AF 76 02 FB | 	rdlong	local07, fp
07f8c     35 77 42 FC | 	wrbyte	local07, local01
07f90     04 5E 85 F1 | 	sub	fp, #4
07f94     AF 6A 02 FB | 	rdlong	local01, fp
07f98     01 6A 06 F1 | 	add	local01, #1
07f9c     AF 6A 62 FC | 	wrlong	local01, fp
07fa0     04 5E 85 F1 | 	sub	fp, #4
07fa4     AF 6A 02 FB | 	rdlong	local01, fp
07fa8     01 6A 86 F1 | 	sub	local01, #1
07fac     AF 6A 62 FC | 	wrlong	local01, fp
07fb0     14 5E 05 F1 | 	add	fp, #20
07fb4     AF 6A 0A FB | 	rdlong	local01, fp wz
07fb8     20 5E 85 F1 | 	sub	fp, #32
07fbc     54 FF 9F AD |  if_e	jmp	#LR__0444
07fc0     14 5E 05 F1 | 	add	fp, #20
07fc4     AF 6E 02 FB | 	rdlong	local03, fp
07fc8     14 5E 85 F1 | 	sub	fp, #20
07fcc     0A 6E 0E F2 | 	cmp	local03, #10 wz
07fd0     40 FF 9F 5D |  if_ne	jmp	#LR__0444
07fd4                 | LR__0445
07fd4     10 5E 05 F1 | 	add	fp, #16
07fd8     AF 2A 02 FB | 	rdlong	result1, fp
07fdc     10 5E 85 F1 | 	sub	fp, #16
07fe0                 | LR__0446
07fe0     AF F0 03 F6 | 	mov	ptra, fp
07fe4     BF 00 A0 FD | 	call	#popregs_
07fe8                 | __system___vfsread_ret
07fe8     2D 00 64 FD | 	ret
07fec                 | 
07fec                 | ' 	
07fec                 | ' 	FUNCTION pfunc(c as integer) as integer
07fec                 | ___strs_cl_pfunc
07fec                 | ' 		if (i < 16) then
07fec     04 0E 06 F1 | 	add	objptr, #4
07ff0     07 31 02 FB | 	rdlong	_var01, objptr
07ff4     04 0E 86 F1 | 	sub	objptr, #4
07ff8     10 30 5E F2 | 	cmps	_var01, #16 wcz
07ffc     2C 00 90 3D |  if_ae	jmp	#LR__0447
08000     07 33 02 FB | 	rdlong	_var02, objptr
08004     04 0E 06 F1 | 	add	objptr, #4
08008     07 35 02 FB | 	rdlong	_var03, objptr
0800c     19 35 02 F1 | 	add	_var03, _var02
08010     1A 5D 42 FC | 	wrbyte	arg01, _var03
08014     07 31 02 FB | 	rdlong	_var01, objptr
08018     01 30 06 F1 | 	add	_var01, #1
0801c     07 31 62 FC | 	wrlong	_var01, objptr
08020     04 0E 86 F1 | 	sub	objptr, #4
08024                 | ' 			p(i) = c
08024                 | ' 			i = i+1
08024                 | ' 			return 1
08024     01 2A 06 F6 | 	mov	result1, #1
08028     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
0802c                 | LR__0447
0802c                 | ' 			return -1
0802c     01 2A 66 F6 | 	neg	result1, #1
08030                 | ___strs_cl_pfunc_ret
08030     2D 00 64 FD | 	ret
08034                 | 
08034                 | __struct__s_vfs_file_t_putchar
08034     04 5A 05 F6 | 	mov	COUNT_, #4
08038     B0 00 A0 FD | 	call	#pushregs_
0803c     18 0E 06 F1 | 	add	objptr, #24
08040     07 6B 0A FB | 	rdlong	local01, objptr wz
08044     18 0E 86 F1 | 	sub	objptr, #24
08048     00 2A 06 A6 |  if_e	mov	result1, #0
0804c     3C 00 90 AD |  if_e	jmp	#LR__0448
08050     18 0E 06 F1 | 	add	objptr, #24
08054     07 6B 02 FB | 	rdlong	local01, objptr
08058     18 0E 86 F1 | 	sub	objptr, #24
0805c     35 6D 02 FB | 	rdlong	local02, local01
08060     04 6A 06 F1 | 	add	local01, #4
08064     35 6F 02 FB | 	rdlong	local03, local01
08068     07 5F 02 F6 | 	mov	arg02, objptr
0806c     07 71 02 F6 | 	mov	local04, objptr
08070     36 0F 02 F6 | 	mov	objptr, local02
08074     2D 6E 62 FD | 	call	local03
08078     38 0F 02 F6 | 	mov	objptr, local04
0807c     00 2A 5E F2 | 	cmps	result1, #0 wcz
08080     00 6A 06 C6 |  if_b	mov	local01, #0
08084     01 6A 06 36 |  if_ae	mov	local01, #1
08088     35 2B 02 F6 | 	mov	result1, local01
0808c                 | LR__0448
0808c     AF F0 03 F6 | 	mov	ptra, fp
08090     BF 00 A0 FD | 	call	#popregs_
08094                 | __struct__s_vfs_file_t_putchar_ret
08094     2D 00 64 FD | 	ret
08098                 | 
08098                 | __struct__s_vfs_file_t_getchar
08098     04 5A 05 F6 | 	mov	COUNT_, #4
0809c     B0 00 A0 FD | 	call	#pushregs_
080a0     1C 0E 06 F1 | 	add	objptr, #28
080a4     07 6B 0A FB | 	rdlong	local01, objptr wz
080a8     1C 0E 86 F1 | 	sub	objptr, #28
080ac     01 2A 66 A6 |  if_e	neg	result1, #1
080b0     2C 00 90 AD |  if_e	jmp	#LR__0449
080b4                 | '         return getcf(__this);
080b4     1C 0E 06 F1 | 	add	objptr, #28
080b8     07 6B 02 FB | 	rdlong	local01, objptr
080bc     1C 0E 86 F1 | 	sub	objptr, #28
080c0     35 6D 02 FB | 	rdlong	local02, local01
080c4     04 6A 06 F1 | 	add	local01, #4
080c8     35 6F 02 FB | 	rdlong	local03, local01
080cc     07 5D 02 F6 | 	mov	arg01, objptr
080d0     07 71 02 F6 | 	mov	local04, objptr
080d4     36 0F 02 F6 | 	mov	objptr, local02
080d8     2D 6E 62 FD | 	call	local03
080dc     38 0F 02 F6 | 	mov	objptr, local04
080e0                 | LR__0449
080e0     AF F0 03 F6 | 	mov	ptra, fp
080e4     BF 00 A0 FD | 	call	#popregs_
080e8                 | __struct__s_vfs_file_t_getchar_ret
080e8     2D 00 64 FD | 	ret
080ec                 | 
080ec                 | __struct___bas_wrap_sender_tx
080ec     04 5A 05 F6 | 	mov	COUNT_, #4
080f0     B0 00 A0 FD | 	call	#pushregs_
080f4     07 6B 02 FB | 	rdlong	local01, objptr
080f8     35 6D 02 FB | 	rdlong	local02, local01
080fc     04 6A 06 F1 | 	add	local01, #4
08100     35 6F 02 FB | 	rdlong	local03, local01
08104     07 71 02 F6 | 	mov	local04, objptr
08108     36 0F 02 F6 | 	mov	objptr, local02
0810c     2D 6E 62 FD | 	call	local03
08110     38 0F 02 F6 | 	mov	objptr, local04
08114     01 2A 06 F6 | 	mov	result1, #1
08118     AF F0 03 F6 | 	mov	ptra, fp
0811c     BF 00 A0 FD | 	call	#popregs_
08120                 | __struct___bas_wrap_sender_tx_ret
08120     2D 00 64 FD | 	ret
08124                 | 
08124                 | LR__0450
08124     20          | 	byte	" "
08125     00          | 	byte	0
08126                 | LR__0451
08126                 | 	byte	
08126     00          | 	byte	0
08127                 | LR__0452
08127                 | 	byte	
08127     00          | 	byte	0
08128                 | LR__0453
08128     20 21 21 21 
0812c     20 63 6F 72 
08130     72 75 70 74 
08134     65 64 20 68 
08138     65 61 70 3F 
0813c     3F 3F 20 21 
08140     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
08143     00          | 	byte	0
08144                 | LR__0454
08144     20 21 21 21 
08148     20 6F 75 74 
0814c     20 6F 66 20 
08150     68 65 61 70 
08154     20 6D 65 6D 
08158     6F 72 79 20 
0815c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
08160     00          | 	byte	0
08161                 | LR__0455
08161     20 21 21 21 
08165     20 63 6F 72 
08169     72 75 70 74 
0816d     65 64 20 68 
08171     65 61 70 20 
08175     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
08179     00          | 	byte	0
0817a                 | LR__0456
0817a     43 6F 75 6E 
0817e     74 65 72 3A 
08182     20          | 	byte	"Counter: "
08183     00          | 	byte	0
08184                 | LR__0457
08184     4E 61 6D 65 
08188     20 20 20 20 
0818c     20 20 20 20 
08190     20 20 20 20 
08194     20 20 20 20 
08198     20 20 20 6C 
0819c     65 6E 20 20 
081a0     20 66 74 20 
081a4     76 6F 6C 20 
081a8     72 65 70 20 
081ac     20 20 72 2E 
081b0     6C 65 6E 20 
081b4     20 20 20 20 
081b8     20 20 20 20 
081bc     4E 61 6D 65 
081c0     20 20 20 20 
081c4     20 20 20 20 
081c8     20 20 20 20 
081cc     20 20 20 20 
081d0     20 20 20 6C 
081d4     65 6E 20 20 
081d8     20 66 74 20 
081dc     76 6F 6C 20 
081e0     72 65 70 20 
081e4     20 20 72 2E 
081e8     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
081ec     00          | 	byte	0
081ed                 | LR__0458
081ed     53          | 	byte	"S"
081ee     00          | 	byte	0
081ef                 | LR__0459
081ef     20 20 20 20 
081f3     20 20 20 20 
081f7     20 20 20 20 
081fb     20 20 20 20 
081ff     20 20 20 20 
08203     20 20       | 	byte	"                      "
08205     00          | 	byte	0
08206                 | LR__0460
08206     20          | 	byte	" "
08207     00          | 	byte	0
08208                 | LR__0461
08208     73 61 6D 70 
0820c     6C 65 73 20 
08210     6D 6F 64 75 
08214     6C 65       | 	byte	"samples module"
08216     00          | 	byte	0
08217     00          | 	alignl
08218                 | _dat_
08218     6A 75 6E 67 
0821c     6C 65 32 00 
08220     00 00 00 00 
08224     00 00 00 00 | module file "../../../mod/jungle.mod"
08228     00 00 00 00 
0822c     73 74 2D 30 
08230     33 3A 53 69 
08234     6E 65 43 5A | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $33, $3a, $53, $69, $6e, $65, $43, $5a
08238     00 00 00 00 
0823c     00 00 00 00 
08240     00 00       | 	byte	$00[10]
08242     07 9E 00 40 
08246     00 F6 04 31 
0824a     73 74 2D 30 
0824e     34 3A 54 69 | 	byte	$07, $9e, $00, $40, $00, $f6, $04, $31, $73, $74, $2d, $30, $34, $3a, $54, $69
08252     6E 65 57 61 
08256     76 65 00 00 
0825a     00 00 00 00 
0825e     00 00 12 D1 | 	byte	$6e, $65, $57, $61, $76, $65, $00, $00, $00, $00, $00, $00, $00, $00, $12, $d1
08262     00 40 00 00 
08266     00 01 73 74 
0826a     2D 30 34 3A 
0826e     53 79 6E 74 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $34, $3a, $53, $79, $6e, $74
08272     68 65 42 61 
08276     73 73 00 00 
0827a     00 00 00 00 
0827e     0F 6E 00 40 | 	byte	$68, $65, $42, $61, $73, $73, $00, $00, $00, $00, $00, $00, $0f, $6e, $00, $40
08282     00 00 00 01 
08286     73 74 2D 30 
0828a     32 3A 48 61 
0828e     6C 6C 42 72 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $61, $6c, $6c, $42, $72
08292     61 73 73 00 
08296     00 00 00 00 
0829a     00 00 12 5C 
0829e     00 40 00 00 | 	byte	$61, $73, $73, $00, $00, $00, $00, $00, $00, $00, $12, $5c, $00, $40, $00, $00
082a2     00 01 73 74 
082a6     2D 30 31 3A 
082aa     42 61 73 73 
082ae     44 72 75 6D | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $42, $61, $73, $73, $44, $72, $75, $6d
082b2     33 00 00 00 
082b6     00 00 00 00 
082ba     05 B3 00 40 
082be     00 00 00 01 | 	byte	$33, $00, $00, $00, $00, $00, $00, $00, $05, $b3, $00, $40, $00, $00, $00, $01
082c2     73 74 2D 30 
082c6     33 3A 50 6F 
082ca     70 53 6E 61 
082ce     72 65 32 00 | 	byte	$73, $74, $2d, $30, $33, $3a, $50, $6f, $70, $53, $6e, $61, $72, $65, $32, $00
082d2     00 00 00 00 
082d6     00 00       | 	byte	$00[6]
082d8     07 D0 00 40 
082dc     00 00 00 01 
082e0     73 74 2D 30 
082e4     32 3A 48 69 | 	byte	$07, $d0, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $69
082e8     48 61 74 32 
082ec     00 00 00 00 
082f0     00 00 00 00 
082f4     00 00 03 E8 | 	byte	$48, $61, $74, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $e8
082f8     00 40 00 00 
082fc     00 01 73 74 
08300     2D 30 32 3A 
08304     4E 69 63 65 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $4e, $69, $63, $65
08308     00 00 00 00 
0830c     00 00 00 00 
08310     00 00 00 00 | 	byte	$00[12]
08314     0C E4 00 40 
08318     00 00 00 01 
0831c     73 74 2D 30 
08320     31 3A 44 69 | 	byte	$0c, $e4, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $44, $69
08324     67 44 75 67 
08328     00 00 00 00 
0832c     00 00 00 00 
08330     00 00 06 0E | 	byte	$67, $44, $75, $67, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $0e
08334     00 40 00 00 
08338     00 01 00 00 
0833c     00 00 00 00 
08340     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08344     00 00 00 00 
      ...             
085c8     00 00 00 00 
085cc     00 00       | 	byte	$00[650]
085ce     23 00 00 01 
085d2     02 02 03 04 
085d6     05 06 07 02 
085da     02 03 04 05 | 	byte	$23, $00, $00, $01, $02, $02, $03, $04, $05, $06, $07, $02, $02, $03, $04, $05
085de     08 09 0A 0A 
085e2     0B 0C 0D 0D 
085e6     0E 02 02 03 
085ea     02 02 03 04 | 	byte	$08, $09, $0a, $0a, $0b, $0c, $0d, $0d, $0e, $02, $02, $03, $02, $02, $03, $04
085ee     05 06 0F 10 
085f2     11 00 00 00 
085f6     00 00 00 00 
085fa     00 00 00 00 | 	byte	$05, $06, $0f, $10, $11, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085fe     00 00 00 00 
      ...             
0864a     00 00 00 00 
0864e     00 00       | 	byte	$00[82]
08650     4D 2E 4B 2E 
08654     01 FC 1F 05 
08658     03 58 10 00 
0865c     02 A6 10 00 | 	byte	$4d, $2e, $4b, $2e, $01, $fc, $1f, $05, $03, $58, $10, $00, $02, $a6, $10, $00
08660     02 3A 10 00 
08664     00 00 00 00 
08668     00 00 00 00 
0866c     00 00 00 00 | 	byte	$02, $3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08670     00 00 00 00 
      ...             
0874c     00 00 00 00 
08750     00 00 00 00 | 	byte	$00[228]
08754     02 FA 10 00 
08758     02 5C 10 00 
0875c     01 FC 10 00 
08760     01 AC 10 00 | 	byte	$02, $fa, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $ac, $10, $00
08764     00 00 00 00 
      ...             
0884c     00 00 00 00 
08850     00 00 00 00 | 	byte	$00[240]
08854     02 D0 10 00 
08858     02 5C 10 00 
0885c     01 FC 10 00 
08860     01 C5 10 00 | 	byte	$02, $d0, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $c5, $10, $00
08864     00 00 00 00 
      ...             
08910     00 00 00 00 
08914     00 00       | 	byte	$00[178]
08916     0D 03 00 00 
0891a     0D 03 00 00 
0891e     0D 03 00 00 
08922     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08926     0D 03 00 00 
0892a     0D 03 00 00 
0892e     0D 03 00 00 
08932     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08936     0D 03 00 00 
0893a     0D 03 00 00 
0893e     0D 03 00 00 
08942     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08946     0D 03 00 00 
0894a     0D 03 00 00 
0894e     0D 03 00 00 
08952     0D 03 01 53 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $01, $53
08956     20 00 00 00 
0895a     00 00 00 00 
0895e     0D 03 00 00 
08962     0D 04 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $03, $00, $00, $0d, $04, $01, $2e
08966     20 00 01 53 
0896a     2C 20 00 00 
0896e     0D 14 00 00 
08972     0D 14 00 00 | 	byte	$20, $00, $01, $53, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
08976     00 00 01 2E 
0897a     2C 20 00 00 
0897e     0D 14 00 00 
08982     0D 14 01 2E | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
08986     20 00 00 00 
0898a     00 00 00 00 
0898e     0D 14 00 00 
08992     0D 14 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
08996     20 00 01 2E 
0899a     2C 20 00 00 
0899e     0D 14 00 00 
089a2     0D 14 00 00 | 	byte	$20, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
089a6     00 00 01 2E 
089aa     2C 20 00 00 
089ae     0D 14 00 00 
089b2     0D 14 00 00 | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
089b6     00 00 00 00 
089ba     00 00 00 00 | 	byte	$00[8]
089be     0D 14 00 00 
089c2     0D 14 00 00 
089c6     00 00 00 00 
089ca     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089ce     0D 14 00 00 
089d2     0D 14 01 53 
089d6     20 00 00 00 
089da     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
089de     0D 14 00 00 
089e2     0D 14 01 2E 
089e6     20 00 01 53 
089ea     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00
089ee     0D 14 00 00 
089f2     0D 14 00 00 
089f6     00 00 01 2E 
089fa     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
089fe     0D 14 00 00 
08a02     0D 14 01 2E 
08a06     20 00 00 00 
08a0a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $00, $00, $00, $00, $00, $00
08a0e     0D 14 00 00 
08a12     0D 14 01 2E 
08a16     20 00 01 2E 
08a1a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $2e, $2c, $20, $00, $00
08a1e     0D 14 00 00 
08a22     0D 14 00 00 
08a26     00 00 01 2E 
08a2a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
08a2e     0D 14 00 00 
08a32     0D 14 00 00 
08a36     00 00 00 00 
08a3a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a3e     0D 14 00 00 
08a42     00 10 00 00 
08a46     00 00 00 00 
08a4a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a4e     0C 00 00 00 
08a52     0C 00 01 53 
08a56     20 00 00 00 
08a5a     00 00 00 00 | 	byte	$0c, $00, $00, $00, $0c, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
08a5e     00 00 00 00 
08a62     00 00       | 	byte	$00[6]
08a64     01 2E 20 00 
08a68     01 53 2C 20 
08a6c     00 00 00 00 
08a70     00 00 00 00 | 	byte	$01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00
08a74     00 00 00 00 
08a78     01 2E 00 00 
08a7c     00 00 00 00 
08a80     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a84     01 2E 20 00 
08a88     00 00 00 00 
08a8c     00 00 00 00 
08a90     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a94     00 E2 20 00 
08a98     01 2E 00 00 
08a9c     00 00 00 00 
08aa0     00 00 00 00 | 	byte	$00, $e2, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08aa4     00 FE 20 00 
08aa8     00 E2 00 00 
08aac     00 00 00 00 
08ab0     00 00 00 00 | 	byte	$00, $fe, $20, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ab4     01 2E 20 00 
08ab8     00 FE 00 00 
08abc     00 00 00 00 
08ac0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac4     00 FE 20 00 
08ac8     01 2E 00 00 
08acc     00 00 00 00 
08ad0     00 00 00 00 | 	byte	$00, $fe, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ad4     01 2E 20 00 
08ad8     00 FE 00 00 
08adc     00 00 00 00 
08ae0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ae4     01 53 20 00 
08ae8     01 2E 00 00 
08aec     00 00 00 00 
08af0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af4     01 94 20 00 
08af8     01 53 00 00 
08afc     00 00 00 00 
08b00     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b04     01 53 20 00 
08b08     01 94 00 00 
08b0c     00 00 00 00 
08b10     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b14     01 94 20 00 
08b18     01 53 00 00 
08b1c     00 00 00 00 
08b20     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b24     01 C5 20 00 
08b28     01 94 00 00 
08b2c     00 00 00 00 
08b30     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b34     01 FC 20 00 
08b38     01 C5 00 00 
08b3c     00 00 00 00 
08b40     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b44     00 00 00 00 
08b48     01 FC 00 00 
08b4c     00 00 00 00 
08b50     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b54     02 5C 20 00 
08b58     00 00 00 00 
08b5c     00 00 00 00 
08b60     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b64     02 5C 20 00 
08b68     02 5C 00 00 
08b6c     00 00 00 00 
08b70     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b74     00 00 00 00 
08b78     02 5C 00 00 
08b7c     00 00 00 00 
08b80     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b84     02 5C 20 00 
08b88     00 00 00 00 
08b8c     00 00 00 00 
08b90     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b94     01 2E 20 00 
08b98     02 5C 00 00 
08b9c     00 00 00 00 
08ba0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ba4     01 53 20 00 
08ba8     01 2E 00 00 
08bac     00 00 00 00 
08bb0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bb4     01 94 20 00 
08bb8     01 53 00 00 
08bbc     00 00 00 00 
08bc0     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bc4     01 53 20 00 
08bc8     01 94 00 00 
08bcc     00 00 00 00 
08bd0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd4     00 00 00 00 
08bd8     01 53 00 00 
08bdc     00 00 00 00 
08be0     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be4     01 94 20 00 
08be8     00 00 00 00 
08bec     00 00 00 00 
08bf0     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf4     01 C5 20 00 
08bf8     01 94 00 00 
08bfc     00 00 00 00 
08c00     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c04     01 94 20 00 
08c08     01 C5 00 00 
08c0c     00 00 00 00 
08c10     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c14     01 C5 20 00 
08c18     01 94 00 00 
08c1c     00 00 00 00 
08c20     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c24     01 FC 20 00 
08c28     01 C5 00 00 
08c2c     00 00 00 00 
08c30     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c34     02 5C 20 00 
08c38     01 FC 00 00 
08c3c     00 00 00 00 
08c40     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c44     00 00 00 00 
08c48     02 5C 00 00 
08c4c     00 00 00 00 
08c50     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c54     02 5C 20 00 
08c58     00 00 00 00 
08c5c     00 00 00 00 
08c60     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c64     02 5C 20 00 
08c68     02 5C 00 00 
08c6c     00 00 00 00 
08c70     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c74     00 00 00 00 
08c78     02 5C 00 00 
08c7c     00 00 00 00 
08c80     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c84     02 5C 20 00 
08c88     00 00 00 00 
08c8c     00 00 00 00 
08c90     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c94     01 2E 20 00 
08c98     02 5C 00 00 
08c9c     00 00 00 00 
08ca0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ca4     01 53 20 00 
08ca8     01 2E 00 00 
08cac     00 00 00 00 
08cb0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cb4     01 94 20 00 
08cb8     01 53 00 00 
08cbc     00 00 00 00 
08cc0     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cc4     01 53 20 00 
08cc8     01 94 00 00 
08ccc     00 00 00 00 
08cd0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cd4     00 00 00 00 
08cd8     01 53 00 00 
08cdc     00 00 00 00 
08ce0     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ce4     01 94 20 00 
08ce8     00 00 00 00 
08cec     00 00 00 00 
08cf0     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cf4     01 C5 20 00 
08cf8     01 94 00 00 
08cfc     00 00 00 00 
08d00     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d04     01 94 20 00 
08d08     01 C5 00 00 
08d0c     00 00 00 00 
08d10     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d14     01 C5 20 00 
08d18     01 94 00 00 
08d1c     01 53 11 01 
08d20     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $01, $53, $11, $01, $00, $d6, $60, $00
08d24     01 FC 20 00 
08d28     01 C5 00 00 
08d2c     00 00 01 01 
08d30     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d34     02 5C 20 00 
08d38     01 FC 00 00 
08d3c     00 00 01 01 
08d40     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d44     00 00 00 00 
08d48     02 5C 00 00 
08d4c     00 00 01 01 
08d50     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d54     02 5C 20 00 
08d58     00 00 00 00 
08d5c     00 00 01 01 
08d60     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d64     02 5C 20 00 
08d68     02 5C 00 00 
08d6c     00 00 01 01 
08d70     01 1D 60 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $1d, $60, $00
08d74     00 00 00 00 
08d78     02 5C 00 00 
08d7c     00 00 01 01 
08d80     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d84     02 5C 20 00 
08d88     00 00 00 00 
08d8c     00 00 01 01 
08d90     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d94     01 2E 20 00 
08d98     02 5C 00 00 
08d9c     00 00 01 01 
08da0     01 53 60 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $53, $60, $00
08da4     01 53 20 00 
08da8     01 2E 00 00 
08dac     00 00 01 01 
08db0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08db4     01 94 20 00 
08db8     01 53 00 00 
08dbc     00 00 01 01 
08dc0     01 40 60 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08dc4     01 53 20 00 
08dc8     01 94 00 00 
08dcc     00 00 01 01 
08dd0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08dd4     00 00 00 00 
08dd8     01 53 00 00 
08ddc     00 00 01 01 
08de0     00 D6 60 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08de4     01 94 20 00 
08de8     00 00 00 00 
08dec     00 00 01 01 
08df0     00 D6 60 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08df4     01 C5 20 00 
08df8     01 94 00 00 
08dfc     00 00 01 01 
08e00     01 40 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08e04     01 94 20 00 
08e08     01 C5 00 00 
08e0c     00 00 01 01 
08e10     00 D6 60 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08e14     01 C5 20 00 
08e18     01 94 00 00 
08e1c     00 00 01 01 
08e20     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08e24     01 FC 20 00 
08e28     01 C5 00 00 
08e2c     00 00 01 01 
08e30     01 40 60 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08e34     02 5C 20 00 
08e38     01 FC 00 00 
08e3c     00 00 01 01 
08e40     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08e44     00 00 00 00 
08e48     02 5C 00 00 
08e4c     00 00 01 01 
08e50     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08e54     00 FE 10 00 
08e58     01 FC 20 47 
08e5c     01 FC 30 00 
08e60     01 AC 50 00 | 	byte	$00, $fe, $10, $00, $01, $fc, $20, $47, $01, $fc, $30, $00, $01, $ac, $50, $00
08e64     00 00 00 00 
08e68     00 00 00    | 	byte	$00[7]
08e6b     47 00 00 00 
08e6f     00 00 AA 70 
08e73     00 00 00 00 
08e77     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e7b     47 00 00 00 
08e7f     00 00 AA 70 
08e83     00 00 00 00 
08e87     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e8b     47 00 00 00 
08e8f     00 00 AA 70 
08e93     00 00 00 00 
08e97     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e9b     47 01 94 30 
08e9f     00 00 D6 60 
08ea3     00 00 00 00 
08ea7     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08eab     47 00 00 00 
08eaf     00 00 AA 70 
08eb3     00 00 00 00 
08eb7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08ebb     47 00 00 00 
08ebf     00 00 AA 70 
08ec3     00 00 00 00 
08ec7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08ecb     47 00 00 00 
08ecf     00 00 AA 70 
08ed3     00 00 00 00 
08ed7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08edb     47 01 53 30 
08edf     00 01 AC 50 
08ee3     00 00 00 00 
08ee7     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08eeb     47 00 00 00 
08eef     00 00 AA 70 
08ef3     00 00 00 00 
08ef7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08efb     47 00 00 00 
08eff     00 00 AA 70 
08f03     00 00 00 00 
08f07     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f0b     47 00 00 00 
08f0f     00 00 AA 70 
08f13     00 00 00 00 
08f17     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08f1b     47 01 94 30 
08f1f     00 00 D6 60 
08f23     00 00 00 00 
08f27     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08f2b     47 00 00 00 
08f2f     00 00 AA 70 
08f33     00 01 2E 00 
08f37     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $2e, $00, $00, $00, $00, $00
08f3b     47 01 53 30 
08f3f     00 01 AC 50 
08f43     00 00 00 00 
08f47     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08f4b     47 00 00 00 
08f4f     00 00 AA 70 
08f53     00 01 53 00 
08f57     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $01, $fc, $20
08f5b     47 01 FC 30 
08f5f     00 01 AC 50 
08f63     00 00 00 00 
08f67     00 00 00 00 | 	byte	$47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08f6b     47 00 00 00 
08f6f     00 00 AA 70 
08f73     00 01 53 00 
08f77     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $00, $00, $00
08f7b     47 00 00 00 
08f7f     00 00 AA 70 
08f83     00 00 00 00 
08f87     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f8b     47 00 00 00 
08f8f     00 00 AA 70 
08f93     00 01 94 00 
08f97     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08f9b     47 01 94 30 
08f9f     00 00 D6 60 
08fa3     00 00 00 00 
08fa7     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08fab     47 00 00 00 
08faf     00 00 AA 70 
08fb3     00 01 C5 00 
08fb7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $00, $00
08fbb     47 00 00 00 
08fbf     00 00 AA 70 
08fc3     00 00 00 00 
08fc7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08fcb     47 00 00 00 
08fcf     00 00 AA 70 
08fd3     00 01 C5 00 
08fd7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08fdb     47 01 53 30 
08fdf     00 01 AC 50 
08fe3     00 00 00 00 
08fe7     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08feb     47 00 00 00 
08fef     00 00 AA 70 
08ff3     00 01 FC 00 
08ff7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $00, $00, $01, $fc, $20
08ffb     47 00 00 00 
08fff     00 00 AA 70 
09003     00 00 00 00 
09007     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
0900b     47 00 00 00 
0900f     00 00 AA 70 
09013     00 01 C5 00 
09017     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
0901b     47 01 94 30 
0901f     00 00 D6 60 
09023     00 00 00 00 
09027     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
0902b     47 00 00 00 
0902f     00 00 AA 70 
09033     00 01 94 00 
09037     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
0903b     47 01 53 30 
0903f     00 01 AC 50 
09043     00 00 00 00 
09047     00 01 FC 20 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $01, $fc, $20
0904b     47 00 00 00 
0904f     00 00 AA 70 
09053     00 01 C5 00 
09057     00 00 E2 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $e2, $20
0905b     00 02 5C 30 
0905f     00 01 AC 50 
09063     00 00 00 00 
09067     00 00 00 00 | 	byte	$00, $02, $5c, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0906b     00 00 00 00 
0906f     00 00       | 	byte	$00[6]
09071     AA 70 00 01 
09075     FC 00 00 00 
09079     FE 20 00 00 
0907d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $fc, $00, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09081     AA 70 00 00 
09085     00 00 00 00 
09089     00 00 00 00 
0908d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09091     AA 70 00 01 
09095     2E 20 00 00 
09099     00 00 00 02 
0909d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
090a1     AC 50 00 01 
090a5     53 20 00 01 
090a9     2E 2C 40 00 
090ad     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $40, $00, $00, $00, $00, $00
090b1     AA 70 00 01 
090b5     94 20 00 01 
090b9     53 2C 40 00 
090bd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $40, $00, $00, $00, $00, $00
090c1     AA 70 00 01 
090c5     53 20 00 01 
090c9     94 2C 40 00 
090cd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
090d1     AA 70 00 00 
090d5     00 00 00 01 
090d9     53 2C 40 02 
090dd     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $2c, $40, $02, $5c, $30, $00, $01
090e1     AC 50 00 00 
090e5     00 00 00 00 
090e9     00 00 40 00 
090ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
090f1     AA 70 00 01 
090f5     94 20 00 00 
090f9     00 00 40 00 
090fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
09101     AA 70 00 01 
09105     AC 20 00 01 
09109     94 2C 30 00 
0910d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $2c, $30, $00, $00, $00, $00, $00
09111     AA 70 00 01 
09115     C5 20 00 01 
09119     AC 2C 30 02 
0911d     5C 30 00 00 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $2c, $30, $02, $5c, $30, $00, $00
09121     D6 60 00 01 
09125     FC 20 00 01 
09129     C5 2C 20 00 
0912d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $20, $00, $00, $00, $00, $00
09131     AA 70 00 02 
09135     5C 20 00 01 
09139     FC 2C 20 00 
0913d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $2c, $20, $00, $00, $00, $00, $00
09141     AA 70 00 00 
09145     00 00 00 02 
09149     5C 2C 20 00 
0914d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
09151     AA 70 00 02 
09155     5C 20 00 00 
09159     00 0C 20 02 
0915d     5C 30 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $00
09161     D6 60 00 00 
09165     00 00 00 02 
09169     5C 2C 20 00 
0916d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
09171     AA 70 00 02 
09175     5C 20 00 00 
09179     00 0C 20 00 
0917d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
09181     AA 70 00 00 
09185     00 00 00 02 
09189     5C 2C 20 00 
0918d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
09191     AA 70 00 01 
09195     2E 20 00 00 
09199     00 0C 20 02 
0919d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $01
091a1     AC 50 00 01 
091a5     53 20 00 01 
091a9     2E 2C 20 00 
091ad     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $20, $00, $00, $00, $00, $00
091b1     AA 70 00 01 
091b5     94 20 00 01 
091b9     53 2C 20 00 
091bd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00
091c1     D6 60 00 00 
091c5     E2 20 00 01 
091c9     94 2C 20 00 
091cd     00 00 00 00 | 	byte	$d6, $60, $00, $00, $e2, $20, $00, $01, $94, $2c, $20, $00, $00, $00, $00, $00
091d1     AA 70 00 00 
091d5     00 00 00 00 
091d9     E2 2C 20 02 
091dd     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $e2, $2c, $20, $02, $5c, $30, $00, $00
091e1     D6 60 00 00 
091e5     FE 20 00 00 
091e9     00 0C 20 00 
091ed     00 00 00 00 | 	byte	$d6, $60, $00, $00, $fe, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
091f1     AA 70 00 01 
091f5     2E 20 00 00 
091f9     FE 2C 20 00 
091fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $fe, $2c, $20, $00, $00, $00, $00, $00
09201     D6 60 00 01 
09205     53 20 00 01 
09209     2E 2C 30 00 
0920d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
09211     AA 70 00 01 
09215     94 20 00 01 
09219     53 2C 30 02 
0921d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $30, $02, $5c, $30, $00, $01
09221     AC 50 00 01 
09225     C5 20 00 01 
09229     94 2C 40 00 
0922d     00 00 00 00 | 	byte	$ac, $50, $00, $01, $c5, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
09231     D6 60 00 01 
09235     FC 20 00 01 
09239     C5 2C 50 00 
0923d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $50, $00, $00, $00, $00, $00
09241     D6 60 00 00 
09245     00 00 00 01 
09249     FC 2C 60 00 
0924d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $01, $fc, $2c, $60, $00, $00, $00, $00, $00
09251     D6 60 00 00 
09255     AA 40 00 00 
09259     E2 80 47 01 
0925d     C5 30 00 01 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09261     AC 50 00 00 
09265     00 00 00 00 
09269     00 00 47 00 
0926d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09271     AA 70 00 00 
09275     AA 40 00 00 
09279     E2 80 47 00 
0927d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09281     AA 70 00 00 
09285     00 00 00 00 
09289     00 00 47 00 
0928d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09291     AA 70 00 00 
09295     AA 40 00 00 
09299     E2 80 47 01 
0929d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
092a1     D6 60 00 00 
092a5     AA 40 00 00 
092a9     E2 80 47 00 
092ad     00 00 00 00 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092b1     AA 70 00 00 
092b5     00 00 00 00 
092b9     00 00 47 00 
092bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092c1     AA 70 00 00 
092c5     AA 40 00 00 
092c9     E2 80 47 00 
092cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092d1     AA 70 00 00 
092d5     97 40 00 00 
092d9     97 80 47 02 
092dd     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $01
092e1     AC 50 00 00 
092e5     00 00 00 00 
092e9     00 00 47 00 
092ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092f1     AA 70 00 00 
092f5     97 40 00 00 
092f9     97 80 47 00 
092fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
09301     AA 70 00 00 
09305     00 00 00 00 
09309     00 00 47 00 
0930d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09311     AA 70 00 00 
09315     00 00 00 00 
09319     97 80 47 02 
0931d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
09321     D6 60 00 00 
09325     00 00 00 00 
09329     00 00 47 00 
0932d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09331     AA 70 00 00 
09335     00 00 00 00 
09339     97 80 47 00 
0933d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
09341     AC 50 00 00 
09345     00 00 00 00 
09349     00 00 47 00 
0934d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09351     AA 70 00 00 
09355     AA 40 00 00 
09359     E2 80 47 01 
0935d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09361     AC 50 00 00 
09365     AA 40 00 00 
09369     E2 80 47 00 
0936d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09371     AA 70 00 00 
09375     AA 40 00 00 
09379     E2 80 47 00 
0937d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09381     AA 70 00 00 
09385     00 00 00 00 
09389     00 00 47 00 
0938d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09391     AA 70 00 00 
09395     AA 40 00 00 
09399     E2 80 47 01 
0939d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
093a1     D6 60 00 00 
093a5     00 00 00 00 
093a9     00 00 47 00 
093ad     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093b1     AA 70 00 00 
093b5     AA 40 00 00 
093b9     E2 80 47 00 
093bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
093c1     AA 70 00 00 
093c5     00 00 00 00 
093c9     00 00 47 00 
093cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093d1     AA 70 00 00 
093d5     97 40 00 01 
093d9     2E 80 47 02 
093dd     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $01, $2e, $80, $47, $02, $5c, $30, $00, $01
093e1     AC 50 00 00 
093e5     00 00 00 00 
093e9     00 00 47 00 
093ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093f1     AA 70 00 00 
093f5     00 00 00 01 
093f9     2E 80 47 00 
093fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $2e, $80, $47, $00, $00, $00, $00, $00
09401     AA 70 00 00 
09405     00 00 00 00 
09409     00 00 47 00 
0940d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09411     AA 70 00 00 
09415     00 00 00 00 
09419     97 80 47 02 
0941d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
09421     D6 60 00 00 
09425     00 00 00 00 
09429     97 80 47 00 
0942d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
09431     AA 70 00 00 
09435     00 00 00 00 
09439     97 80 47 00 
0943d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
09441     AC 50 00 00 
09445     00 00 00 00 
09449     00 00 47 00 
0944d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09451     AA 70 00 00 
09455     AA 40 00 00 
09459     E2 80 47 01 
0945d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09461     AC 50 00 00 
09465     00 00 00 00 
09469     00 00 47 00 
0946d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09471     AA 70 00 00 
09475     B4 40 00 00 
09479     E2 80 47 00 
0947d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09481     AA 70 00 00 
09485     00 00 00 00 
09489     00 00 47 00 
0948d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09491     AA 70 00 00 
09495     AA 40 00 00 
09499     E2 80 47 01 
0949d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
094a1     AC 50 00 00 
094a5     00 00 00 00 
094a9     00 00 47 00 
094ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094b1     AA 70 00 00 
094b5     B4 40 00 00 
094b9     E2 80 47 00 
094bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
094c1     AA 70 00 00 
094c5     00 00 00 00 
094c9     00 00 47 00 
094cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094d1     AA 70 00 00 
094d5     AA 40 00 00 
094d9     E2 80 47 01 
094dd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
094e1     AC 50 00 00 
094e5     00 00 00 00 
094e9     00 00 47 00 
094ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094f1     AA 70 00 00 
094f5     B4 40 00 00 
094f9     E2 80 47 00 
094fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09501     AA 70 00 00 
09505     00 00 00 00 
09509     00 00 47 00 
0950d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09511     AA 70 00 00 
09515     AA 40 00 00 
09519     E2 80 47 01 
0951d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09521     D6 60 00 00 
09525     00 00 00 00 
09529     00 00 47 00 
0952d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09531     AA 70 00 00 
09535     B4 40 00 00 
09539     E2 80 47 00 
0953d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09541     AA 70 00 00 
09545     00 00 00 00 
09549     00 00 47 00 
0954d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09551     AA 70 00 00 
09555     AA 40 00 00 
09559     E2 80 47 01 
0955d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09561     D6 60 00 00 
09565     B4 40 00 00 
09569     00 00 47 00 
0956d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09571     AA 70 00 00 
09575     00 00 00 00 
09579     00 00 47 00 
0957d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09581     AA 70 00 00 
09585     00 00 00 00 
09589     00 00 47 00 
0958d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09591     AA 70 00 00 
09595     AA 40 00 00 
09599     E2 80 47 01 
0959d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
095a1     AC 50 00 00 
095a5     B4 40 00 00 
095a9     00 00 47 00 
095ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
095b1     AA 70 00 00 
095b5     00 00 00 00 
095b9     00 00 47 00 
095bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
095c1     D6 60 00 00 
095c5     00 00 00 00 
095c9     00 00 47 00 
095cd     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
095d1     AA 70 00 00 
095d5     AA 40 00 00 
095d9     E2 80 47 01 
095dd     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
095e1     D6 60 00 00 
095e5     B4 40 00 00 
095e9     E2 80 47 00 
095ed     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
095f1     AA 70 00 00 
095f5     00 00 00 00 
095f9     00 00 47 00 
095fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09601     D6 60 00 00 
09605     00 00 00 00 
09609     E2 80 47 00 
0960d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09611     AA 70 00 00 
09615     AA 40 00 00 
09619     E2 80 47 01 
0961d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09621     AC 50 00 00 
09625     B4 40 00 00 
09629     00 00 47 00 
0962d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09631     D6 60 00 00 
09635     00 00 00 00 
09639     E2 80 47 00 
0963d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09641     D6 60 00 00 
09645     00 00 00 00 
09649     E2 80 47 00 
0964d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09651     D6 60 00 00 
09655     7F 40 00 01 
09659     94 20 38 01 
0965d     FC 30 00 01 | 	byte	$d6, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09661     AC 50 00 00 
09665     7F 40 00 01 
09669     94 20 38 00 
0966d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09671     AA 70 00 00 
09675     00 00 00 00 
09679     00 00 38 00 
0967d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09681     AA 70 00 00 
09685     7F 40 00 01 
09689     94 20 38 00 
0968d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09691     AA 70 00 00 
09695     00 00 00 00 
09699     00 00 38 01 
0969d     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
096a1     1D 60 00 00 
096a5     00 00 00 00 
096a9     00 00 38 00 
096ad     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
096b1     AA 70 00 00 
096b5     00 00 00 00 
096b9     00 00 38 00 
096bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
096c1     AA 70 00 00 
096c5     00 00 00 00 
096c9     00 00 38 00 
096cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
096d1     AA 70 00 00 
096d5     8F 40 00 01 
096d9     C5 20 59 01 
096dd     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
096e1     AC 50 00 00 
096e5     8F 40 00 01 
096e9     C5 20 59 00 
096ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
096f1     AA 70 00 00 
096f5     00 00 00 00 
096f9     00 00 59 00 
096fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09701     AA 70 00 00 
09705     8F 40 00 01 
09709     C5 20 59 00 
0970d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09711     AA 70 00 00 
09715     00 00 00 00 
09719     00 00 59 01 
0971d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09721     1D 60 00 00 
09725     00 00 00 00 
09729     00 00 59 00 
0972d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09731     AA 70 00 00 
09735     00 00 00 00 
09739     00 00 59 00 
0973d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09741     AA 70 00 00 
09745     00 00 00 00 
09749     00 00 59 00 
0974d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09751     AA 70 00 00 
09755     BE 40 00 01 
09759     7D 20 47 01 
0975d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09761     AC 50 00 00 
09765     BE 40 00 00 
09769     00 00 47 00 
0976d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09771     AA 70 00 00 
09775     BE 40 00 00 
09779     00 00 47 00 
0977d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09781     AA 70 00 00 
09785     BE 40 00 00 
09789     00 00 47 00 
0978d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09791     AA 70 00 00 
09795     BE 40 00 01 
09799     7D 20 47 01 
0979d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
097a1     1D 60 00 00 
097a5     BE 40 00 00 
097a9     00 00 47 00 
097ad     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097b1     AA 70 00 00 
097b5     BE 40 00 00 
097b9     00 00 47 00 
097bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097c1     AA 70 00 00 
097c5     BE 40 00 00 
097c9     00 00 47 00 
097cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097d1     AA 70 00 00 
097d5     CA 40 00 01 
097d9     C5 20 47 01 
097dd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
097e1     AC 50 00 00 
097e5     00 00 00 00 
097e9     00 00 47 00 
097ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097f1     AA 70 00 00 
097f5     E2 40 00 01 
097f9     C5 20 47 00 
097fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
09801     AA 70 00 00 
09805     00 00 00 00 
09809     00 00 47 00 
0980d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09811     AA 70 00 00 
09815     E2 40 00 01 
09819     C5 20 47 01 
0981d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09821     1D 60 00 00 
09825     00 00 00 01 
09829     C5 20 47 00 
0982d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
09831     AA 70 00 00 
09835     FE 40 00 01 
09839     C5 20 47 00 
0983d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $01
09841     1D 60 00 00 
09845     00 00 00 00 
09849     00 00 47 00 
0984d     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09851     1D 60 00 00 
09855     CA 40 00 02 
09859     5C 20 47 02 
0985d     5C 30 00 01 | 	byte	$1d, $60, $00, $00, $ca, $40, $00, $02, $5c, $20, $47, $02, $5c, $30, $00, $01
09861     AC 50 00 00 
09865     00 00 00 00 
09869     00 00 47 00 
0986d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09871     AA 70 00 00 
09875     00 00 00 00 
09879     00 00 47 00 
0987d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09881     AA 70 00 00 
09885     00 00 00 00 
09889     00 00 47 00 
0988d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09891     AA 70 00 01 
09895     2E 20 00 00 
09899     00 00 47 02 
0989d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $47, $02, $5c, $30, $00, $01
098a1     1D 60 00 01 
098a5     53 20 00 01 
098a9     2E 2C 30 00 
098ad     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
098b1     AA 70 00 01 
098b5     94 20 00 01 
098b9     53 00 00 00 
098bd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
098c1     AA 70 00 01 
098c5     53 20 00 01 
098c9     94 00 00 00 
098cd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
098d1     AA 70 00 00 
098d5     00 00 00 01 
098d9     53 00 00 02 
098dd     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
098e1     AC 50 00 00 
098e5     00 00 00 00 
098e9     00 00 00 00 
098ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098f1     AA 70 00 01 
098f5     94 20 00 00 
098f9     00 00 00 00 
098fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09901     AA 70 00 01 
09905     AC 20 00 01 
09909     94 00 00 00 
0990d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09911     AA 70 00 01 
09915     C5 20 00 01 
09919     AC 00 00 02 
0991d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
09921     1D 60 00 01 
09925     FC 20 00 01 
09929     C5 00 00 00 
0992d     00 00 00 00 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00
09931     AA 70 00 02 
09935     5C 20 00 01 
09939     FC 00 00 00 
0993d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09941     AA 70 00 00 
09945     00 00 00 02 
09949     5C 00 00 00 
0994d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
09951     AA 70 00 02 
09955     5C 20 00 00 
09959     00 00 00 02 
0995d     5C 30 00 01 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
09961     AC 50 00 00 
09965     00 00 00 02 
09969     5C 00 00 00 
0996d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
09971     AA 70 00 02 
09975     5C 20 00 00 
09979     00 00 00 00 
0997d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09981     AA 70 00 00 
09985     00 00 00 02 
09989     5C 00 00 00 
0998d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
09991     AA 70 00 01 
09995     2E 20 00 00 
09999     00 00 00 02 
0999d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
099a1     1D 60 00 01 
099a5     53 20 00 01 
099a9     2E 00 00 00 
099ad     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00
099b1     AA 70 00 01 
099b5     94 20 00 01 
099b9     53 00 00 00 
099bd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
099c1     AA 70 00 01 
099c5     53 20 00 01 
099c9     94 00 00 00 
099cd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
099d1     AA 70 00 00 
099d5     00 00 00 01 
099d9     53 00 00 02 
099dd     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
099e1     AC 50 00 00 
099e5     00 00 00 00 
099e9     00 00 00 00 
099ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099f1     AA 70 00 01 
099f5     94 20 00 00 
099f9     00 00 00 00 
099fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a01     AA 70 00 01 
09a05     AC 20 00 01 
09a09     94 00 00 00 
09a0d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09a11     AA 70 00 01 
09a15     C5 20 00 01 
09a19     AC 00 00 02 
09a1d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
09a21     1D 60 00 01 
09a25     FC 20 00 01 
09a29     C5 00 00 00 
09a2d     00 00 00 01 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $01
09a31     1D 60 00 02 
09a35     5C 20 00 01 
09a39     FC 00 00 00 
09a3d     00 00 00 00 | 	byte	$1d, $60, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09a41     AA 70 00 00 
09a45     00 00 00 02 
09a49     5C 00 00 00 
09a4d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $01
09a51     1D 60 00 00 
09a55     7F 40 00 01 
09a59     94 20 38 01 
09a5d     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09a61     AC 50 00 00 
09a65     7F 40 00 01 
09a69     94 20 38 00 
09a6d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09a71     AA 70 00 00 
09a75     00 00 00 00 
09a79     00 00 38 00 
09a7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a81     AA 70 00 00 
09a85     7F 40 00 01 
09a89     94 20 38 00 
09a8d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09a91     AA 70 00 00 
09a95     00 00 00 00 
09a99     00 00 38 01 
09a9d     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
09aa1     1D 60 00 00 
09aa5     00 00 00 00 
09aa9     00 00 38 00 
09aad     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09ab1     AA 70 00 00 
09ab5     00 00 00 00 
09ab9     00 00 38 00 
09abd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09ac1     AA 70 00 00 
09ac5     00 00 00 00 
09ac9     00 00 38 00 
09acd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09ad1     AA 70 00 00 
09ad5     8F 40 00 01 
09ad9     C5 20 59 01 
09add     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09ae1     AC 50 00 00 
09ae5     8F 40 00 01 
09ae9     C5 20 59 00 
09aed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09af1     AA 70 00 00 
09af5     00 00 00 00 
09af9     00 00 59 00 
09afd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09b01     AA 70 00 00 
09b05     8F 40 00 01 
09b09     C5 20 59 00 
09b0d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09b11     AA 70 00 00 
09b15     00 00 00 00 
09b19     00 00 59 01 
09b1d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09b21     1D 60 00 00 
09b25     00 00 00 00 
09b29     00 00 59 00 
09b2d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09b31     AA 70 00 00 
09b35     00 00 00 00 
09b39     00 00 59 00 
09b3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09b41     AA 70 00 00 
09b45     00 00 00 00 
09b49     00 00 59 00 
09b4d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09b51     AA 70 00 00 
09b55     BE 40 00 01 
09b59     7D 20 47 01 
09b5d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09b61     AC 50 00 00 
09b65     BE 40 00 00 
09b69     00 00 47 00 
09b6d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b71     AA 70 00 00 
09b75     BE 40 00 00 
09b79     00 00 47 00 
09b7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b81     AA 70 00 00 
09b85     BE 40 00 00 
09b89     00 00 47 00 
09b8d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b91     AA 70 00 00 
09b95     BE 40 00 01 
09b99     7D 20 47 01 
09b9d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09ba1     1D 60 00 00 
09ba5     BE 40 00 00 
09ba9     00 00 47 00 
09bad     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09bb1     AA 70 00 00 
09bb5     BE 40 00 00 
09bb9     00 00 47 00 
09bbd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09bc1     AA 70 00 00 
09bc5     BE 40 00 00 
09bc9     00 00 47 00 
09bcd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09bd1     AA 70 00 00 
09bd5     CA 40 00 01 
09bd9     C5 20 47 01 
09bdd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09be1     AC 50 00 00 
09be5     E2 40 00 00 
09be9     00 00 47 00 
09bed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09bf1     AA 70 00 00 
09bf5     00 00 00 00 
09bf9     00 00 47 00 
09bfd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09c01     AA 70 00 00 
09c05     E2 40 00 00 
09c09     00 00 47 00 
09c0d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09c11     AA 70 00 00 
09c15     00 00 00 01 
09c19     C5 20 47 01 
09c1d     E0 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $01, $e0, $30, $00, $01
09c21     1D 60 00 00 
09c25     00 00 00 00 
09c29     00 00 47 00 
09c2d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09c31     AA 70 00 00 
09c35     00 00 00 00 
09c39     00 00 47 00 
09c3d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09c41     1D 60 00 00 
09c45     00 00 00 00 
09c49     00 00 47 00 
09c4d     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09c51     1D 60 00 00 
09c55     7F 40 00 01 
09c59     94 20 38 01 
09c5d     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09c61     AC 50 00 00 
09c65     7F 40 00 01 
09c69     94 20 38 00 
09c6d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09c71     AA 70 00 00 
09c75     00 00 00 00 
09c79     00 00 38 00 
09c7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c81     AA 70 00 00 
09c85     7F 40 00 01 
09c89     94 20 38 00 
09c8d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09c91     AA 70 00 00 
09c95     00 00 00 00 
09c99     00 00 38 01 
09c9d     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
09ca1     1D 60 00 00 
09ca5     00 00 00 00 
09ca9     00 00 38 00 
09cad     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09cb1     AA 70 00 00 
09cb5     00 00 00 00 
09cb9     00 00 38 00 
09cbd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09cc1     AA 70 00 00 
09cc5     00 00 00 00 
09cc9     00 00 38 00 
09ccd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09cd1     AA 70 00 00 
09cd5     8F 40 00 01 
09cd9     C5 20 59 01 
09cdd     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09ce1     AC 50 00 00 
09ce5     8F 40 00 01 
09ce9     C5 20 59 00 
09ced     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09cf1     AA 70 00 00 
09cf5     00 00 00 00 
09cf9     00 00 59 00 
09cfd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09d01     AA 70 00 00 
09d05     8F 40 00 01 
09d09     C5 20 59 00 
09d0d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09d11     AA 70 00 00 
09d15     00 00 00 00 
09d19     00 00 59 01 
09d1d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09d21     1D 60 00 00 
09d25     00 00 00 00 
09d29     00 00 59 00 
09d2d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09d31     AA 70 00 00 
09d35     00 00 00 00 
09d39     00 00 59 00 
09d3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09d41     AA 70 00 00 
09d45     00 00 00 00 
09d49     00 00 59 00 
09d4d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09d51     AA 70 00 00 
09d55     FE 40 00 01 
09d59     7D 20 47 01 
09d5d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09d61     1D 60 00 00 
09d65     FE 40 00 00 
09d69     00 00 47 00 
09d6d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d71     00 00 00 00 
09d75     FE 40 00 00 
09d79     00 00 47 00 
09d7d     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d81     00 00 00 00 
09d85     FE 40 00 00 
09d89     00 00 47 00 
09d8d     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d91     00 00 00 00 
09d95     FE 40 00 00 
09d99     00 00 47 00 
09d9d     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09da1     00 00 00 00 
09da5     FE 40 00 00 
09da9     00 00 47 00 
09dad     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09db1     00 00 00 00 
09db5     FE 40 00 00 
09db9     00 00 47 00 
09dbd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09dc1     00 00 00 00 
09dc5     FE 40 00 00 
09dc9     00 00 47 00 
09dcd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09dd1     00 00 00 01 
09dd5     0D 40 00 01 
09dd9     C5 20 49 01 
09ddd     C5 30 00 01 | 	byte	$00, $00, $00, $01, $0d, $40, $00, $01, $c5, $20, $49, $01, $c5, $30, $00, $01
09de1     1D 60 00 01 
09de5     2E 40 00 00 
09de9     00 00 49 00 
09ded     00 00 00 00 | 	byte	$1d, $60, $00, $01, $2e, $40, $00, $00, $00, $00, $49, $00, $00, $00, $00, $00
09df1     00 00 00 00 
09df5     00 00 00 00 
09df9     00 00       | 	byte	$00[10]
09dfb     49 00 00 00 
09dff     00 00 00 00 
09e03     00 01 2E 40 
09e07     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $00, $00
09e0b     49 00 00 00 
09e0f     00 00 00 00 
09e13     00 00 00 00 
09e17     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e1b     49 00 00 00 
09e1f     00 00 00 00 
09e23     00 00 00 00 
09e27     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e2b     49 00 00 00 
09e2f     00 00 00 00 
09e33     00 00 00 00 
09e37     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e3b     49 00 00 00 
09e3f     00 00 00 00 
09e43     00 01 2E 40 
09e47     00 01 E0 20 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $01, $e0, $20
09e4b     38 02 5C 30 
09e4f     00 03 58 60 
09e53     00 00 00 00 
09e57     00 00 00 00 | 	byte	$38, $02, $5c, $30, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
09e5b     38 00 00 00 
09e5f     00 00 00 00 
09e63     00 00 00 00 
09e67     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e6b     38 00 00 00 
09e6f     00 00 00 00 
09e73     00 00 00 00 
09e77     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e7b     38 00 00 00 
09e7f     00 00 00 00 
09e83     00 00 00 00 
09e87     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e8b     38 00 00 00 
09e8f     00 00 00 00 
09e93     00 00 00 00 
09e97     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e9b     38 00 00 00 
09e9f     00 00 00 00 
09ea3     00 00 00 00 
09ea7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09eab     38 00 00 00 
09eaf     00 00 00 00 
09eb3     00 00 00 00 
09eb7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ebb     38 00 00 00 
09ebf     00 00 00 00 
09ec3     00 00 00 00 
09ec7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ecb     38 00 00 00 
09ecf     00 00 00 00 
09ed3     00 00 00 00 
09ed7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09edb     38 00 00 00 
09edf     00 00 00 00 
09ee3     00 00 00 00 
09ee7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09eeb     38 00 00 00 
09eef     00 00 00 00 
09ef3     00 00 00 00 
09ef7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09efb     38 00 00 00 
09eff     00 00 00 00 
09f03     00 00 00 00 
09f07     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f0b     38 00 00 00 
09f0f     00 00 00 00 
09f13     00 00 00 00 
09f17     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f1b     38 00 00 00 
09f1f     00 00 00 00 
09f23     00 00 00 00 
09f27     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f2b     38 00 00 00 
09f2f     00 00 00 00 
09f33     00 00 00 00 
09f37     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f3b     38 00 00 00 
09f3f     00 00 00 00 
09f43     00 00 00 00 
09f47     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f4b     38 00 00 00 
09f4f     00 00 00 00 
09f53     00 01 53 40 
09f57     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
09f5b     00 02 5C 90 
09f5f     00 00 D6 50 
09f63     00 01 2E 40 
09f67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
09f6b     00 02 5C 90 
09f6f     00 00 00 00 
09f73     00 00 00 00 
09f77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f7b     00 02 5C 90 
09f7f     00 00 00 00 
09f83     00 01 2E 40 
09f87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09f8b     00 02 5C 90 
09f8f     00 00 00 00 
09f93     00 00 00 00 
09f97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f9b     00 02 5C 90 
09f9f     00 00 D6 50 
09fa3     00 00 00 00 
09fa7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fab     00 02 5C 90 
09faf     00 00 D6 50 
09fb3     00 00 00 00 
09fb7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fbb     00 02 5C 90 
09fbf     00 00 D6 50 
09fc3     00 00 00 00 
09fc7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fcb     00 02 5C 90 
09fcf     00 00 D6 50 
09fd3     00 01 53 40 
09fd7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
09fdb     00 02 5C 90 
09fdf     00 01 AC 60 
09fe3     00 01 2E 40 
09fe7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
09feb     00 02 5C 90 
09fef     00 00 00 00 
09ff3     00 00 00 00 
09ff7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09ffb     00 02 5C 90 
09fff     00 00 00 00 
0a003     00 01 2E 40 
0a007     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a00b     00 02 5C 90 
0a00f     00 00 00 00 
0a013     00 00 00 00 
0a017     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a01b     00 02 5C 90 
0a01f     00 00 D6 50 
0a023     00 00 00 00 
0a027     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a02b     00 02 5C 90 
0a02f     00 00 00 00 
0a033     00 00 00 00 
0a037     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a03b     00 02 5C 90 
0a03f     00 00 00 00 
0a043     00 00 00 00 
0a047     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a04b     00 02 5C 90 
0a04f     00 00 00 00 
0a053     00 00 FE 40 
0a057     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a05b     00 01 C5 90 
0a05f     00 00 D6 50 
0a063     00 00 00 00 
0a067     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a06b     00 01 C5 90 
0a06f     00 00 D6 50 
0a073     00 00 FE 40 
0a077     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a07b     00 01 C5 90 
0a07f     00 00 D6 50 
0a083     00 00 00 00 
0a087     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a08b     00 01 C5 90 
0a08f     00 00 D6 50 
0a093     00 00 FE 40 
0a097     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a09b     00 01 C5 90 
0a09f     00 01 AC 60 
0a0a3     00 00 FE 40 
0a0a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $fe, $40, $00, $00, $aa, $70
0a0ab     00 01 C5 90 
0a0af     00 00 00 00 
0a0b3     00 01 0D 40 
0a0b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
0a0bb     00 01 C5 90 
0a0bf     00 00 00 00 
0a0c3     00 01 2E 40 
0a0c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a0cb     00 01 C5 90 
0a0cf     00 00 00 00 
0a0d3     00 01 0D 40 
0a0d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
0a0db     00 02 5C 90 
0a0df     00 00 D6 50 
0a0e3     00 01 2E 40 
0a0e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a0eb     00 02 5C 90 
0a0ef     00 00 D6 50 
0a0f3     00 00 00 00 
0a0f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a0fb     00 02 5C 90 
0a0ff     00 00 D6 50 
0a103     00 01 2E 40 
0a107     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a10b     00 02 5C 90 
0a10f     00 00 D6 50 
0a113     00 00 00 00 
0a117     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a11b     00 02 5C 90 
0a11f     00 01 AC 60 
0a123     00 00 00 00 
0a127     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a12b     00 02 5C 90 
0a12f     00 00 00 00 
0a133     00 00 00 00 
0a137     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a13b     00 02 5C 90 
0a13f     00 00 00 00 
0a143     00 00 00 00 
0a147     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a14b     00 02 5C 90 
0a14f     00 00 00 00 
0a153     00 01 53 40 
0a157     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
0a15b     00 02 5C 90 
0a15f     00 00 D6 50 
0a163     00 01 53 40 
0a167     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a16b     00 02 5C 90 
0a16f     00 00 00 00 
0a173     00 00 00 00 
0a177     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a17b     00 02 5C 90 
0a17f     00 00 00 00 
0a183     00 01 2E 40 
0a187     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a18b     00 02 5C 90 
0a18f     00 00 00 00 
0a193     00 00 00 00 
0a197     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a19b     00 02 5C 90 
0a19f     00 00 D6 50 
0a1a3     00 00 00 00 
0a1a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a1ab     00 02 5C 90 
0a1af     00 00 D6 50 
0a1b3     00 00 00 00 
0a1b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a1bb     00 02 5C 90 
0a1bf     00 00 D6 50 
0a1c3     00 00 00 00 
0a1c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a1cb     00 02 5C 90 
0a1cf     00 00 D6 50 
0a1d3     00 01 53 40 
0a1d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a1db     00 02 5C 90 
0a1df     00 01 AC 60 
0a1e3     00 01 53 40 
0a1e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $53, $40, $00, $00, $aa, $70
0a1eb     00 02 5C 90 
0a1ef     00 00 00 00 
0a1f3     00 00 00 00 
0a1f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a1fb     00 02 5C 90 
0a1ff     00 00 00 00 
0a203     00 01 2E 40 
0a207     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a20b     00 02 5C 90 
0a20f     00 00 00 00 
0a213     00 00 00 00 
0a217     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a21b     00 02 5C 90 
0a21f     00 00 D6 50 
0a223     00 00 00 00 
0a227     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a22b     00 02 5C 90 
0a22f     00 00 00 00 
0a233     00 01 2E 40 
0a237     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a23b     00 02 5C 90 
0a23f     00 01 AC 50 
0a243     00 01 2E 40 
0a247     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a24b     00 02 5C 90 
0a24f     00 01 AC 50 
0a253     00 00 FE 40 
0a257     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a25b     00 01 C5 90 
0a25f     00 00 D6 50 
0a263     00 00 00 00 
0a267     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a26b     00 01 C5 90 
0a26f     00 00 00 00 
0a273     00 00 FE 40 
0a277     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a27b     00 01 C5 90 
0a27f     00 00 00 00 
0a283     00 00 00 00 
0a287     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a28b     00 01 C5 90 
0a28f     00 00 00 00 
0a293     00 00 FE 40 
0a297     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a29b     00 01 C5 90 
0a29f     00 00 D6 50 
0a2a3     00 00 FE 40 
0a2a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a2ab     00 01 C5 90 
0a2af     00 00 D6 50 
0a2b3     00 01 0D 40 
0a2b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a2bb     00 01 C5 90 
0a2bf     00 00 D6 50 
0a2c3     00 01 2E 40 
0a2c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a2cb     00 01 C5 90 
0a2cf     00 00 D6 50 
0a2d3     00 01 0D 40 
0a2d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a2db     00 02 5C 90 
0a2df     00 01 AC 60 
0a2e3     00 01 2E 40 
0a2e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
0a2eb     00 02 5C 90 
0a2ef     00 00 00 00 
0a2f3     00 00 00 00 
0a2f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2fb     00 02 5C 90 
0a2ff     00 00 00 00 
0a303     00 01 2E 40 
0a307     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a30b     00 02 5C 90 
0a30f     00 00 00 00 
0a313     00 00 00 00 
0a317     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a31b     00 02 5C 90 
0a31f     00 00 D6 50 
0a323     00 00 00 00 
0a327     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a32b     00 02 5C 90 
0a32f     00 00 00 00 
0a333     00 00 00 00 
0a337     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a33b     00 02 5C 90 
0a33f     00 00 00 00 
0a343     00 00 00 00 
0a347     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a34b     00 02 5C 90 
0a34f     00 00 00 00 
0a353     00 00 AA 40 
0a357     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a35b     00 02 5C 90 
0a35f     00 00 D6 50 
0a363     00 00 AA 40 
0a367     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a36b     00 02 5C 90 
0a36f     00 00 00 00 
0a373     00 00 00 00 
0a377     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a37b     00 02 5C 90 
0a37f     00 00 00 00 
0a383     00 00 97 40 
0a387     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a38b     00 02 5C 90 
0a38f     00 00 00 00 
0a393     00 00 00 00 
0a397     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a39b     00 02 5C 90 
0a39f     00 00 D6 50 
0a3a3     00 00 00 00 
0a3a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a3ab     00 02 5C 90 
0a3af     00 00 D6 50 
0a3b3     00 00 00 00 
0a3b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a3bb     00 02 5C 90 
0a3bf     00 00 D6 50 
0a3c3     00 00 00 00 
0a3c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a3cb     00 02 5C 90 
0a3cf     00 00 D6 50 
0a3d3     00 00 AA 40 
0a3d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a3db     00 02 5C 90 
0a3df     00 01 AC 60 
0a3e3     00 00 AA 40 
0a3e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa, $40, $00, $00, $aa, $70
0a3eb     00 02 5C 90 
0a3ef     00 00 00 00 
0a3f3     00 00 00 00 
0a3f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a3fb     00 02 5C 90 
0a3ff     00 00 00 00 
0a403     00 00 97 40 
0a407     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a40b     00 02 5C 90 
0a40f     00 00 00 00 
0a413     00 00 00 00 
0a417     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a41b     00 02 5C 90 
0a41f     00 00 D6 50 
0a423     00 00 00 00 
0a427     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a42b     00 02 5C 90 
0a42f     00 00 00 00 
0a433     00 00 AA 40 
0a437     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a43b     00 02 5C 90 
0a43f     00 00 00 00 
0a443     00 00 97 40 
0a447     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a44b     00 02 5C 90 
0a44f     00 00 00 00 
0a453     00 00 7F 40 
0a457     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a45b     00 01 C5 90 
0a45f     00 00 D6 50 
0a463     00 00 7F 40 
0a467     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a46b     00 01 C5 90 
0a46f     00 00 00 00 
0a473     00 00 7F 40 
0a477     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a47b     00 01 C5 90 
0a47f     00 00 00 00 
0a483     00 00 7F 40 
0a487     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a48b     00 01 C5 90 
0a48f     00 00 00 00 
0a493     00 00 7F 40 
0a497     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a49b     00 01 C5 90 
0a49f     00 00 D6 50 
0a4a3     00 00 7F 40 
0a4a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4ab     00 01 C5 90 
0a4af     00 00 00 00 
0a4b3     00 00 87 40 
0a4b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a4bb     00 01 C5 90 
0a4bf     00 00 00 00 
0a4c3     00 00 97 40 
0a4c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a4cb     00 01 C5 90 
0a4cf     00 00 00 00 
0a4d3     00 00 7F 40 
0a4d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4db     00 01 C5 90 
0a4df     00 00 D6 50 
0a4e3     00 00 7F 40 
0a4e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4eb     00 01 C5 90 
0a4ef     00 00 00 00 
0a4f3     00 00 7F 40 
0a4f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4fb     00 01 C5 90 
0a4ff     00 00 00 00 
0a503     00 00 7F 40 
0a507     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a50b     00 01 C5 90 
0a50f     00 00 00 00 
0a513     00 00 7F 40 
0a517     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a51b     00 01 C5 90 
0a51f     00 00 D6 50 
0a523     00 00 7F 40 
0a527     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a52b     00 01 C5 90 
0a52f     00 00 00 00 
0a533     00 00 87 40 
0a537     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a53b     00 01 C5 90 
0a53f     00 00 00 00 
0a543     00 00 97 40 
0a547     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a54b     00 01 C5 90 
0a54f     00 00 00 00 
0a553     00 00 7F 40 
0a557     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a55b     00 01 C5 90 
0a55f     00 00 D6 50 
0a563     00 00 7F 40 
0a567     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a56b     00 01 C5 90 
0a56f     00 00 00 00 
0a573     00 00 7F 40 
0a577     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a57b     00 01 C5 90 
0a57f     00 00 00 00 
0a583     00 00 7F 40 
0a587     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a58b     00 01 C5 90 
0a58f     00 00 00 00 
0a593     00 00 7F 40 
0a597     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a59b     00 01 C5 90 
0a59f     00 00 D6 50 
0a5a3     00 00 00 00 
0a5a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a5ab     00 00 00 00 
0a5af     00 00 00 00 
0a5b3     00 00       | 	byte	$00[10]
0a5b5     7F 40 00 00 
0a5b9     AA 70 00 01 
0a5bd     C5 90 00 00 
0a5c1     D6 50 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a5c5     00 00 00 00 
0a5c9     AA 70 00 00 
0a5cd     00 00 00 00 
0a5d1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5d5     00 00 00 00 
0a5d9     AA 70 00 01 
0a5dd     C5 90 00 00 
0a5e1     D6 50 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a5e5     00 00 00 00 
0a5e9     AA 70 00 00 
0a5ed     00 00 00 00 
0a5f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5f5     7F 40 00 00 
0a5f9     AA 70 00 00 
0a5fd     00 00 00 01 
0a601     1D 60 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $1d, $60, $00, $00
0a605     00 00 00 00 
0a609     AA 70 00 00 
0a60d     00 00 00 00 
0a611     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a615     87 40 00 00 
0a619     AA 70 00 00 
0a61d     00 00 00 01 
0a621     53 60 00 00 | 	byte	$87, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00
0a625     97 40 00 00 
0a629     AA 70 00 00 
0a62d     00 00 00 00 
0a631     D6 60 00 00 | 	byte	$97, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $d6, $60, $00, $00
0a635     00 00 00 00 
0a639     AA 70 00 00 
0a63d     00 00 00 01 
0a641     AC 60 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0a645     00 00 00 00 
0a649     AA 70 00 00 
0a64d     00 00 00 00 
0a651     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a655     00 00 00 00 
0a659     00 00       | 	byte	$00[6]
0a65b     38 00 00 00 
0a65f     00 00 00 00 
0a663     00 00 00 00 
0a667     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a66b     38 00 00 00 
0a66f     00 00 00 00 
0a673     00 00 00 00 
0a677     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a67b     38 00 00 00 
0a67f     00 00 00 00 
0a683     00 00 00 00 
0a687     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a68b     38 00 00 00 
0a68f     00 00 00 00 
0a693     00 00 00 00 
0a697     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a69b     38 00 00 00 
0a69f     00 00 00 00 
0a6a3     00 00 00 00 
0a6a7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6ab     38 00 00 00 
0a6af     00 00 00 00 
0a6b3     00 00 00 00 
0a6b7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6bb     38 00 00 00 
0a6bf     00 00 00 00 
0a6c3     00 00 00 00 
0a6c7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6cb     38 00 00 00 
0a6cf     00 00 00 00 
0a6d3     00 00 00 00 
0a6d7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6db     38 00 00 00 
0a6df     00 00 00 00 
0a6e3     00 00 00 00 
0a6e7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6eb     38 00 00 00 
0a6ef     00 00 00 00 
0a6f3     00 00 00 00 
0a6f7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6fb     38 00 00 00 
0a6ff     00 00 00 00 
0a703     00 00 00 00 
0a707     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a70b     38 00 00 00 
0a70f     00 00 00 00 
0a713     00 00 00 00 
0a717     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a71b     38 00 00 00 
0a71f     00 00 00 00 
0a723     00 00 00 00 
0a727     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a72b     38 00 00 00 
0a72f     00 00 00 00 
0a733     00 00 00 00 
0a737     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a73b     38 00 00 00 
0a73f     00 00 00 00 
0a743     00 00 00 00 
0a747     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a74b     38 00 00 00 
0a74f     00 00 00 00 
0a753     00 02 A6 20 
0a757     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a75b     00 02 5C 90 
0a75f     00 00 D6 50 
0a763     00 02 5C 20 
0a767     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a76b     00 02 5C 90 
0a76f     00 00 00 00 
0a773     00 00 00 00 
0a777     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a77b     00 02 5C 90 
0a77f     00 00 00 00 
0a783     00 02 5C 20 
0a787     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a78b     00 02 5C 90 
0a78f     00 00 00 00 
0a793     00 02 5C 20 
0a797     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a79b     00 02 5C 90 
0a79f     00 00 D6 50 
0a7a3     00 00 00 00 
0a7a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a7ab     00 02 5C 90 
0a7af     00 00 D6 50 
0a7b3     00 02 5C 20 
0a7b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a7bb     00 02 5C 90 
0a7bf     00 00 D6 50 
0a7c3     00 02 5C 20 
0a7c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a7cb     00 02 5C 90 
0a7cf     00 00 D6 50 
0a7d3     00 02 A6 20 
0a7d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a7db     00 02 5C 90 
0a7df     00 01 AC 60 
0a7e3     00 02 5C 20 
0a7e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a7eb     00 02 5C 90 
0a7ef     00 00 00 00 
0a7f3     00 00 00 00 
0a7f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a7fb     00 02 5C 90 
0a7ff     00 00 00 00 
0a803     00 02 5C 20 
0a807     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a80b     00 02 5C 90 
0a80f     00 00 00 00 
0a813     00 02 5C 20 
0a817     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a81b     00 02 5C 90 
0a81f     00 00 D6 50 
0a823     00 00 00 00 
0a827     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a82b     00 02 5C 90 
0a82f     00 00 00 00 
0a833     00 02 5C 20 
0a837     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a83b     00 02 5C 90 
0a83f     00 00 00 00 
0a843     00 02 5C 20 
0a847     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a84b     00 02 5C 90 
0a84f     00 00 00 00 
0a853     00 01 C5 20 
0a857     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a85b     00 01 C5 90 
0a85f     00 00 D6 50 
0a863     00 00 00 00 
0a867     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a86b     00 01 C5 90 
0a86f     00 00 D6 50 
0a873     00 01 C5 20 
0a877     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a87b     00 01 C5 90 
0a87f     00 00 D6 50 
0a883     00 01 C5 20 
0a887     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a88b     00 01 C5 90 
0a88f     00 00 D6 50 
0a893     00 01 C5 20 
0a897     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a89b     00 01 C5 90 
0a89f     00 01 AC 60 
0a8a3     00 00 00 00 
0a8a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a8ab     00 01 C5 90 
0a8af     00 00 00 00 
0a8b3     00 01 C5 20 
0a8b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a8bb     00 01 C5 90 
0a8bf     00 00 00 00 
0a8c3     00 01 C5 20 
0a8c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a8cb     00 01 C5 90 
0a8cf     00 00 00 00 
0a8d3     00 02 A6 20 
0a8d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a8db     00 02 5C 90 
0a8df     00 00 D6 50 
0a8e3     00 00 00 00 
0a8e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a8eb     00 02 5C 90 
0a8ef     00 00 D6 50 
0a8f3     00 02 5C 20 
0a8f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8fb     00 02 5C 90 
0a8ff     00 00 D6 50 
0a903     00 02 5C 20 
0a907     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a90b     00 02 5C 90 
0a90f     00 00 D6 50 
0a913     00 02 5C 20 
0a917     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a91b     00 02 5C 90 
0a91f     00 01 AC 60 
0a923     00 00 00 00 
0a927     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a92b     00 02 5C 90 
0a92f     00 00 00 00 
0a933     00 02 5C 20 
0a937     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a93b     00 02 5C 90 
0a93f     00 00 00 00 
0a943     00 02 5C 20 
0a947     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a94b     00 02 5C 90 
0a94f     00 00 00 00 
0a953     00 02 A6 20 
0a957     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a95b     00 02 5C 90 
0a95f     00 00 D6 50 
0a963     00 02 5C 20 
0a967     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a96b     00 02 5C 90 
0a96f     00 00 00 00 
0a973     00 00 00 00 
0a977     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a97b     00 02 5C 90 
0a97f     00 00 00 00 
0a983     00 02 5C 20 
0a987     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a98b     00 02 5C 90 
0a98f     00 00 00 00 
0a993     00 02 5C 20 
0a997     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a99b     00 02 5C 90 
0a99f     00 00 D6 50 
0a9a3     00 00 00 00 
0a9a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a9ab     00 02 5C 90 
0a9af     00 00 D6 50 
0a9b3     00 02 5C 20 
0a9b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a9bb     00 02 5C 90 
0a9bf     00 00 D6 50 
0a9c3     00 02 5C 20 
0a9c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a9cb     00 02 5C 90 
0a9cf     00 00 D6 50 
0a9d3     00 02 A6 20 
0a9d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a9db     00 02 5C 90 
0a9df     00 01 AC 60 
0a9e3     00 02 5C 20 
0a9e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a9eb     00 02 5C 90 
0a9ef     00 00 00 00 
0a9f3     00 00 00 00 
0a9f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a9fb     00 02 5C 90 
0a9ff     00 00 00 00 
0aa03     00 02 5C 20 
0aa07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa0b     00 02 5C 90 
0aa0f     00 00 00 00 
0aa13     00 02 5C 20 
0aa17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa1b     00 02 5C 90 
0aa1f     00 00 D6 50 
0aa23     00 00 00 00 
0aa27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aa2b     00 02 5C 90 
0aa2f     00 00 00 00 
0aa33     00 02 5C 20 
0aa37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa3b     00 02 5C 90 
0aa3f     00 01 AC 60 
0aa43     00 02 5C 20 
0aa47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa4b     00 02 5C 90 
0aa4f     00 01 AC 60 
0aa53     00 01 C5 20 
0aa57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa5b     00 01 C5 90 
0aa5f     00 00 D6 50 
0aa63     00 00 00 00 
0aa67     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aa6b     00 01 C5 90 
0aa6f     00 00 00 00 
0aa73     00 01 C5 20 
0aa77     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa7b     00 01 C5 90 
0aa7f     00 00 00 00 
0aa83     00 01 C5 20 
0aa87     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa8b     00 01 C5 90 
0aa8f     00 00 00 00 
0aa93     00 01 C5 20 
0aa97     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa9b     00 01 C5 90 
0aa9f     00 00 D6 50 
0aaa3     00 00 00 00 
0aaa7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aaab     00 01 C5 90 
0aaaf     00 00 D6 50 
0aab3     00 01 C5 20 
0aab7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0aabb     00 01 C5 90 
0aabf     00 00 D6 50 
0aac3     00 01 C5 20 
0aac7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0aacb     00 01 C5 90 
0aacf     00 00 D6 50 
0aad3     00 02 A6 20 
0aad7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0aadb     00 02 5C 90 
0aadf     00 01 AC 60 
0aae3     00 00 00 00 
0aae7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0aaeb     00 02 5C 90 
0aaef     00 00 00 00 
0aaf3     00 02 5C 20 
0aaf7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aafb     00 02 5C 90 
0aaff     00 00 00 00 
0ab03     00 02 5C 20 
0ab07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab0b     00 02 5C 90 
0ab0f     00 00 00 00 
0ab13     00 02 5C 20 
0ab17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab1b     00 02 5C 90 
0ab1f     00 00 D6 50 
0ab23     00 00 00 00 
0ab27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ab2b     00 02 5C 90 
0ab2f     00 00 00 00 
0ab33     00 02 5C 20 
0ab37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab3b     00 02 5C 90 
0ab3f     00 00 00 00 
0ab43     00 02 5C 20 
0ab47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab4b     00 02 5C 90 
0ab4f     00 00 00 00 
0ab53     00 02 A6 20 
0ab57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0ab5b     00 02 5C 90 
0ab5f     00 00 D6 50 
0ab63     00 02 5C 20 
0ab67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab6b     00 02 5C 90 
0ab6f     00 00 00 00 
0ab73     00 00 00 00 
0ab77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0ab7b     00 02 5C 90 
0ab7f     00 00 00 00 
0ab83     00 02 5C 20 
0ab87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab8b     00 02 5C 90 
0ab8f     00 00 00 00 
0ab93     00 02 5C 20 
0ab97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab9b     00 02 5C 90 
0ab9f     00 00 D6 50 
0aba3     00 00 00 00 
0aba7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0abab     00 02 5C 90 
0abaf     00 00 D6 50 
0abb3     00 02 5C 20 
0abb7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0abbb     00 02 5C 90 
0abbf     00 00 D6 50 
0abc3     00 02 5C 20 
0abc7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0abcb     00 02 5C 90 
0abcf     00 00 D6 50 
0abd3     00 02 A6 20 
0abd7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0abdb     00 02 5C 90 
0abdf     00 01 AC 60 
0abe3     00 02 5C 20 
0abe7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0abeb     00 02 5C 90 
0abef     00 00 00 00 
0abf3     00 00 00 00 
0abf7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0abfb     00 02 5C 90 
0abff     00 00 00 00 
0ac03     00 02 5C 20 
0ac07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ac0b     00 02 5C 90 
0ac0f     00 00 00 00 
0ac13     00 02 5C 20 
0ac17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ac1b     00 02 5C 90 
0ac1f     00 00 D6 50 
0ac23     00 00 00 00 
0ac27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac2b     00 02 5C 90 
0ac2f     00 00 00 00 
0ac33     00 02 5C 20 
0ac37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ac3b     00 02 5C 90 
0ac3f     00 00 00 00 
0ac43     00 02 5C 20 
0ac47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ac4b     00 02 5C 90 
0ac4f     00 00 00 00 
0ac53     00 01 C5 20 
0ac57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac5b     00 01 C5 90 
0ac5f     00 00 D6 50 
0ac63     00 00 00 00 
0ac67     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac6b     00 01 C5 90 
0ac6f     00 00 00 00 
0ac73     00 01 C5 20 
0ac77     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac7b     00 01 C5 90 
0ac7f     00 00 00 00 
0ac83     00 01 C5 20 
0ac87     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac8b     00 01 C5 90 
0ac8f     00 00 00 00 
0ac93     00 01 C5 20 
0ac97     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac9b     00 01 C5 90 
0ac9f     00 00 D6 50 
0aca3     00 00 00 00 
0aca7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0acab     00 01 C5 90 
0acaf     00 00 00 00 
0acb3     00 01 C5 20 
0acb7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0acbb     00 01 C5 90 
0acbf     00 00 00 00 
0acc3     00 01 C5 20 
0acc7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0accb     00 01 C5 90 
0accf     00 00 00 00 
0acd3     00 01 C5 20 
0acd7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0acdb     00 01 C5 90 
0acdf     00 00 D6 50 
0ace3     00 00 00 00 
0ace7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aceb     00 01 C5 90 
0acef     00 00 00 00 
0acf3     00 01 C5 20 
0acf7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0acfb     00 01 C5 90 
0acff     00 00 00 00 
0ad03     00 01 C5 20 
0ad07     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ad0b     00 01 C5 90 
0ad0f     00 00 00 00 
0ad13     00 01 C5 20 
0ad17     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ad1b     00 01 C5 90 
0ad1f     00 00 D6 50 
0ad23     00 00 00 00 
0ad27     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ad2b     00 01 C5 90 
0ad2f     00 00 00 00 
0ad33     00 01 C5 20 
0ad37     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ad3b     00 01 C5 90 
0ad3f     00 00 00 00 
0ad43     00 01 C5 20 
0ad47     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ad4b     00 01 C5 90 
0ad4f     00 00 00 00 
0ad53     00 01 C5 20 
0ad57     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ad5b     00 01 C5 90 
0ad5f     00 00 D6 50 
0ad63     00 00 00 00 
0ad67     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ad6b     00 00 00 00 
0ad6f     00 00 00 00 
0ad73     00          | 	byte	$00[9]
0ad74     01 C5 20 00 
0ad78     00 AA 70 00 
0ad7c     00 00 00 00 
0ad80     00 00 00 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad84     01 C5 20 00 
0ad88     00 AA 70 00 
0ad8c     01 C5 90 00 
0ad90     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0ad94     01 C5 20 00 
0ad98     00 AA 70 00 
0ad9c     01 C5 90 00 
0ada0     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0ada4     00 00 00 00 
0ada8     00          | 	byte	$00[5]
0ada9     AA 70 00 01 
0adad     C5 90 00 00 
0adb1     D6 50 00 00 
0adb5     FE 20 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $20, $00, $00
0adb9     AA 70 00 00 
0adbd     00 00 00 00 
0adc1     00 00 00 00 
0adc5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adc9     AA 70 00 01 
0adcd     C5 90 00 00 
0add1     D6 50 00 00 
0add5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00
0add9     AA 70 00 00 
0addd     00 00 00 00 
0ade1     00 00 00 00 
0ade5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ade9     AA 70 00 00 
0aded     00 00 00 00 
0adf1     00 00 00 00 
0adf5     FE 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00
0adf9     AA 70 00 00 
0adfd     00 00 00 00 
0ae01     00 00 00 00 
0ae05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae09     AA 70 00 00 
0ae0d     00 00 00 00 
0ae11     00 00 00 01 
0ae15     0D 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $20, $00, $00
0ae19     AA 70 00 00 
0ae1d     00 00 00 00 
0ae21     00 00 00 01 
0ae25     2E 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $20, $00, $00
0ae29     AA 70 00 00 
0ae2d     00 00 00 00 
0ae31     00 00 00 00 
0ae35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae39     AA 70 00 00 
0ae3d     00 00 00 00 
0ae41     00 00 00 00 
0ae45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae49     AA 70 00 00 
0ae4d     00 00 00 00 
0ae51     00 00 00 03 
0ae55     28 10 38 03 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $28, $10, $38, $03
0ae59     28 10 38 01 
0ae5d     FC 30 00 01 
0ae61     AC 50 00 00 
0ae65     00 00 38 00 | 	byte	$28, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0ae69     00 00 38 00 
0ae6d     00 00 00 00 
0ae71     AA 70 00 00 
0ae75     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ae79     00 00 38 00 
0ae7d     00 00 00 00 
0ae81     AA 70 00 00 
0ae85     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ae89     00 00 38 00 
0ae8d     00 00 00 00 
0ae91     AA 70 00 00 
0ae95     00 00 38 03 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $03
0ae99     28 10 38 01 
0ae9d     94 30 00 01 
0aea1     1D 60 00 00 
0aea5     00 00 38 00 | 	byte	$28, $10, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0aea9     00 00 38 00 
0aead     00 00 00 00 
0aeb1     AA 70 00 00 
0aeb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0aeb9     00 00 38 00 
0aebd     00 00 00 00 
0aec1     AA 70 00 00 
0aec5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0aec9     00 00 38 00 
0aecd     00 00 00 00 
0aed1     AA 70 00 02 
0aed5     A6 10 59 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $a6, $10, $59, $02
0aed9     A6 10 59 01 
0aedd     53 30 00 01 
0aee1     AC 50 00 00 
0aee5     00 00 59 00 | 	byte	$a6, $10, $59, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $59, $00
0aee9     00 00 59 00 
0aeed     00 00 00 00 
0aef1     AA 70 00 00 
0aef5     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0aef9     00 00 59 00 
0aefd     00 00 00 00 
0af01     AA 70 00 00 
0af05     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0af09     00 00 59 00 
0af0d     00 00 00 00 
0af11     AA 70 00 00 
0af15     00 00 59 02 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $02
0af19     A6 10 59 01 
0af1d     2E 30 00 01 
0af21     1D 60 00 00 
0af25     00 00 59 00 | 	byte	$a6, $10, $59, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $59, $00
0af29     00 00 59 00 
0af2d     00 00 00 00 
0af31     AA 70 00 00 
0af35     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0af39     00 00 59 01 
0af3d     53 30 00 00 
0af41     AA 70 00 00 
0af45     00 00 59 00 | 	byte	$00, $00, $59, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0af49     00 00 59 00 
0af4d     00 00 00 00 
0af51     AA 70 00 01 
0af55     FC 10 47 01 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $47, $01
0af59     FC 10 47 01 
0af5d     FC 30 00 01 
0af61     AC 50 00 00 
0af65     00 00 47 00 | 	byte	$fc, $10, $47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $47, $00
0af69     00 00 47 00 
0af6d     00 00 00 00 
0af71     AA 70 00 00 
0af75     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0af79     00 00 47 00 
0af7d     00 00 00 00 
0af81     AA 70 00 00 
0af85     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0af89     00 00 47 00 
0af8d     00 00 00 00 
0af91     AA 70 00 00 
0af95     00 00 47 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $01
0af99     FC 10 47 01 
0af9d     94 30 00 01 
0afa1     1D 60 00 00 
0afa5     00 00 47 00 | 	byte	$fc, $10, $47, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $47, $00
0afa9     00 00 47 00 
0afad     00 00 00 00 
0afb1     AA 70 00 00 
0afb5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0afb9     00 00 47 00 
0afbd     00 00 00 00 
0afc1     AA 70 00 00 
0afc5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0afc9     00 00 47 00 
0afcd     00 00 00 00 
0afd1     AA 70 00 01 
0afd5     94 10 38 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $10, $38, $01
0afd9     94 10 38 01 
0afdd     53 30 00 01 
0afe1     AC 50 00 00 
0afe5     00 00 38 00 | 	byte	$94, $10, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0afe9     00 00 38 00 
0afed     00 00 00 00 
0aff1     AA 70 00 00 
0aff5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0aff9     00 00 38 00 
0affd     00 00 00 00 
0b001     AA 70 00 00 
0b005     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b009     00 00 38 00 
0b00d     00 00 00 00 
0b011     AA 70 00 00 
0b015     00 00 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $01
0b019     94 10 38 01 
0b01d     2E 30 00 01 
0b021     1D 60 00 00 
0b025     00 00 38 00 | 	byte	$94, $10, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b029     00 00 38 00 
0b02d     00 00 00 00 
0b031     AA 70 00 00 
0b035     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b039     00 00 38 01 
0b03d     53 30 00 01 
0b041     1D 60 00 00 
0b045     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b049     00 00 38 00 
0b04d     00 00 00 01 
0b051     1D 60 00 01 
0b055     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0b059     E0 10 38 01 
0b05d     2E 30 00 01 
0b061     AC 50 00 00 
0b065     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b069     00 00 38 00 
0b06d     00 00 00 00 
0b071     AA 70 00 00 
0b075     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b079     00 00 38 00 
0b07d     00 00 00 00 
0b081     AA 70 00 00 
0b085     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b089     00 00 38 00 
0b08d     00 00 00 00 
0b091     AA 70 00 00 
0b095     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b099     00 00 38 01 
0b09d     2E 30 00 01 
0b0a1     1D 60 00 00 
0b0a5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b0a9     00 00 38 00 
0b0ad     00 00 00 00 
0b0b1     AA 70 00 00 
0b0b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0b9     00 00 38 00 
0b0bd     00 00 00 00 
0b0c1     AA 70 00 00 
0b0c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0c9     00 00 38 00 
0b0cd     00 00 00 00 
0b0d1     AA 70 00 00 
0b0d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0d9     00 00 38 01 
0b0dd     2E 30 00 01 
0b0e1     AC 50 00 00 
0b0e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b0e9     00 00 38 00 
0b0ed     00 00 00 00 
0b0f1     AA 70 00 00 
0b0f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0f9     00 00 38 00 
0b0fd     00 00 00 01 
0b101     AC 50 00 00 
0b105     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b109     00 00 38 00 
0b10d     00 00 00 00 
0b111     AA 70 00 00 
0b115     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b119     00 00 38 01 
0b11d     2E 30 00 01 
0b121     1D 60 00 00 
0b125     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b129     00 00 38 00 
0b12d     00 00 00 00 
0b131     AA 70 00 00 
0b135     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b139     00 00 38 00 
0b13d     00 00 00 00 
0b141     AA 70 00 00 
0b145     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b149     00 00 38 00 
0b14d     00 00 00 00 
0b151     AA 70 00 01 
0b155     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $e0, $10, $38, $01
0b159     E0 10 38 01 
0b15d     2E 30 00 01 
0b161     AC 50 00 00 
0b165     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b169     00 00 38 00 
0b16d     00 00 00 00 
0b171     AA 70 00 00 
0b175     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b179     00 00 38 00 
0b17d     00 00 00 00 
0b181     AA 70 00 00 
0b185     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b189     00 00 38 00 
0b18d     00 00 00 00 
0b191     AA 70 00 00 
0b195     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b199     00 00 38 01 
0b19d     2E 30 00 01 
0b1a1     1D 60 00 00 
0b1a5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b1a9     00 00 38 00 
0b1ad     00 00 00 00 
0b1b1     AA 70 00 00 
0b1b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1b9     00 00 38 00 
0b1bd     00 00 00 00 
0b1c1     AA 70 00 00 
0b1c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1c9     00 00 38 00 
0b1cd     00 00 00 00 
0b1d1     AA 70 00 00 
0b1d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1d9     00 00 38 01 
0b1dd     2E 30 00 01 
0b1e1     AC 50 00 00 
0b1e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b1e9     00 00 38 00 
0b1ed     00 00 00 00 
0b1f1     AA 70 00 00 
0b1f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1f9     00 00 38 00 
0b1fd     00 00 00 01 
0b201     AC 50 00 00 
0b205     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b209     00 00 38 00 
0b20d     00 00 00 00 
0b211     AA 70 00 00 
0b215     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b219     00 00 38 01 
0b21d     2E 30 00 01 
0b221     1D 60 00 00 
0b225     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b229     00 00 38 00 
0b22d     00 00 00 01 
0b231     1D 60 00 00 
0b235     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b239     00 00 38 00 
0b23d     00 00 00 00 
0b241     AA 70 00 00 
0b245     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b249     00 00 38 00 
0b24d     00 00 00 01 
0b251     1D 60 00 01 
0b255     94 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $94, $10, $38, $01
0b259     94 10 38 01 
0b25d     FC 30 00 01 
0b261     AC 50 00 00 
0b265     00 00 38 00 | 	byte	$94, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b269     00 00 38 00 
0b26d     00 00 00 00 
0b271     AA 70 00 00 
0b275     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b279     00 00 38 00 
0b27d     00 00 00 00 
0b281     AA 70 00 00 
0b285     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b289     00 00 38 00 
0b28d     00 00 00 00 
0b291     AA 70 00 00 
0b295     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b299     00 00 38 01 
0b29d     94 30 00 01 
0b2a1     1D 60 00 00 
0b2a5     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b2a9     00 00 38 00 
0b2ad     00 00 00 00 
0b2b1     AA 70 00 00 
0b2b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2b9     00 00 38 00 
0b2bd     00 00 00 00 
0b2c1     AA 70 00 00 
0b2c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2c9     00 00 38 00 
0b2cd     00 00 00 00 
0b2d1     AA 70 00 00 
0b2d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2d9     00 00 38 01 
0b2dd     53 30 00 01 
0b2e1     AC 50 00 00 
0b2e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b2e9     00 00 38 00 
0b2ed     00 00 00 00 
0b2f1     AA 70 00 00 
0b2f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2f9     00 00 38 00 
0b2fd     00 00 00 00 
0b301     AA 70 00 00 
0b305     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b309     00 00 38 00 
0b30d     00 00 00 00 
0b311     AA 70 00 00 
0b315     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b319     00 00 38 01 
0b31d     94 30 00 01 
0b321     1D 60 00 00 
0b325     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b329     00 00 38 00 
0b32d     00 00 00 00 
0b331     AA 70 00 00 
0b335     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b339     00 00 38 01 
0b33d     53 30 00 00 
0b341     AA 70 00 00 
0b345     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b349     00 00 38 00 
0b34d     00 00 00 00 
0b351     AA 70 00 01 
0b355     68 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $68, $10, $38, $01
0b359     68 10 38 01 
0b35d     C5 30 00 01 
0b361     AC 50 00 00 
0b365     00 00 38 00 | 	byte	$68, $10, $38, $01, $c5, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b369     00 00 38 00 
0b36d     00 00 00 00 
0b371     AA 70 00 00 
0b375     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b379     00 00 38 00 
0b37d     00 00 00 00 
0b381     AA 70 00 00 
0b385     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b389     00 00 38 00 
0b38d     00 00 00 00 
0b391     AA 70 00 00 
0b395     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b399     00 00 38 01 
0b39d     68 30 00 01 
0b3a1     1D 60 00 00 
0b3a5     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b3a9     00 00 38 00 
0b3ad     00 00 00 00 
0b3b1     AA 70 00 00 
0b3b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3b9     00 00 38 00 
0b3bd     00 00 00 00 
0b3c1     AA 70 00 00 
0b3c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3c9     00 00 38 00 
0b3cd     00 00 00 00 
0b3d1     AA 70 00 00 
0b3d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3d9     00 00 38 01 
0b3dd     2E 30 00 01 
0b3e1     AC 50 00 00 
0b3e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b3e9     00 00 38 00 
0b3ed     00 00 00 00 
0b3f1     AA 70 00 00 
0b3f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3f9     00 00 38 00 
0b3fd     00 00 00 00 
0b401     AA 70 00 00 
0b405     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b409     00 00 38 00 
0b40d     00 00 00 00 
0b411     AA 70 00 00 
0b415     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b419     00 00 38 01 
0b41d     68 30 00 01 
0b421     1D 60 00 00 
0b425     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b429     00 00 38 00 
0b42d     00 00 00 00 
0b431     AA 70 00 00 
0b435     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b439     00 00 38 00 
0b43d     00 00 00 01 
0b441     1D 60 00 00 
0b445     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b449     00 00 38 00 
0b44d     00 00 00 01 
0b451     1D 60 00 02 
0b455     5C 10 38 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $02, $5c, $10, $38, $02
0b459     5C 10 38 01 
0b45d     7D 30 00 01 
0b461     AC 50 00 00 
0b465     00 00 38 00 | 	byte	$5c, $10, $38, $01, $7d, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b469     00 00 38 00 
0b46d     00 00 00 00 
0b471     AA 70 00 00 
0b475     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b479     00 00 38 00 
0b47d     00 00 00 00 
0b481     AA 70 00 00 
0b485     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b489     00 00 38 00 
0b48d     00 00 00 00 
0b491     AA 70 00 00 
0b495     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b499     00 00 38 01 
0b49d     2E 30 00 01 
0b4a1     1D 60 00 00 
0b4a5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b4a9     00 00 38 00 
0b4ad     00 00 00 00 
0b4b1     AA 70 00 00 
0b4b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b4b9     00 00 38 00 
0b4bd     00 00 00 00 
0b4c1     AA 70 00 00 
0b4c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b4c9     00 00 38 00 
0b4cd     00 00 00 00 
0b4d1     AA 70 00 02 
0b4d5     5C 10 49 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $5c, $10, $49, $02
0b4d9     5C 10 49 01 
0b4dd     E0 30 00 01 
0b4e1     AC 50 00 00 
0b4e5     00 00 49 00 | 	byte	$5c, $10, $49, $01, $e0, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b4e9     00 00 49 00 
0b4ed     00 00 00 00 
0b4f1     AA 70 00 00 
0b4f5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4f9     00 00 49 00 
0b4fd     00 00 00 01 
0b501     AC 50 00 00 
0b505     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b509     00 00 49 00 
0b50d     00 00 00 00 
0b511     AA 70 00 00 
0b515     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b519     00 00 49 01 
0b51d     2E 30 00 01 
0b521     1D 60 00 00 
0b525     00 00 49 00 | 	byte	$00, $00, $49, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b529     00 00 49 00 
0b52d     00 00 00 00 
0b531     AA 70 00 00 
0b535     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b539     00 00 49 00 
0b53d     00 00 00 00 
0b541     AA 70 00 00 
0b545     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b549     00 00 49 00 
0b54d     00 00 00 00 
0b551     AA 70 00 02 
0b555     3A 10 49 02 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $3a, $10, $49, $02
0b559     3A 10 49 01 
0b55d     53 30 00 01 
0b561     AC 50 00 00 
0b565     00 00 49 00 | 	byte	$3a, $10, $49, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b569     00 00 49 00 
0b56d     00 00 00 00 
0b571     AA 70 00 00 
0b575     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b579     00 00 49 00 
0b57d     00 00 00 00 
0b581     AA 70 00 00 
0b585     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b589     00 00 49 00 
0b58d     00 00 00 00 
0b591     AA 70 00 00 
0b595     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b599     00 00 49 01 
0b59d     53 30 00 01 
0b5a1     1D 60 00 00 
0b5a5     00 00 49 00 | 	byte	$00, $00, $49, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b5a9     00 00 49 00 
0b5ad     00 00 00 00 
0b5b1     AA 70 00 00 
0b5b5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b5b9     00 00 49 00 
0b5bd     00 00 00 00 
0b5c1     AA 70 00 00 
0b5c5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b5c9     00 00 49 00 
0b5cd     00 00 00 00 
0b5d1     AA 70 00 01 
0b5d5     FC 10 38 01 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $38, $01
0b5d9     FC 10 38 01 
0b5dd     40 30 00 01 
0b5e1     AC 50 00 00 
0b5e5     00 00 38 00 | 	byte	$fc, $10, $38, $01, $40, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b5e9     00 00 38 00 
0b5ed     00 00 00 00 
0b5f1     AA 70 00 00 
0b5f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b5f9     00 00 38 00 
0b5fd     00 00 00 01 
0b601     AC 50 00 00 
0b605     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b609     00 00 38 00 
0b60d     00 00 00 00 
0b611     AA 70 00 00 
0b615     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b619     00 00 38 01 
0b61d     40 30 00 01 
0b621     1D 60 00 00 
0b625     00 00 38 00 | 	byte	$00, $00, $38, $01, $40, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b629     00 00 38 00 
0b62d     00 00 00 01 
0b631     1D 60 00 00 
0b635     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b639     00 00 38 00 
0b63d     00 00 00 00 
0b641     AA 70 00 00 
0b645     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b649     00 00 38 00 
0b64d     00 00 00 01 
0b651     1D 60 00 01 
0b655     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0b659     E0 10 38 01 
0b65d     2E 30 00 02 
0b661     80 60 00 00 
0b665     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $02, $80, $60, $00, $00, $00, $00, $38, $00
0b669     00 00 38 00 
0b66d     00 00 00 00 
0b671     00 00 00 00 
0b675     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b679     00 00 38 00 
0b67d     00 00 00 00 
0b681     00 00 00 00 
0b685     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b689     00 00 38 00 
0b68d     00 00 00 00 
0b691     00 00 00 00 
0b695     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b699     00 00 38 00 
0b69d     00 00 00 00 
0b6a1     00 00 00 00 
0b6a5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6a9     00 00 38 00 
0b6ad     00 00 00 00 
0b6b1     00 00 00 00 
0b6b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6b9     00 00 38 00 
0b6bd     00 00 00 00 
0b6c1     00 00 00 00 
0b6c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6c9     00 00 38 00 
0b6cd     00 00 00 00 
0b6d1     00 00 00 00 
0b6d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6d9     00 00 38 00 
0b6dd     00 00 00 00 
0b6e1     00 00 00 00 
0b6e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6e9     00 00 38 00 
0b6ed     00 00 00 00 
0b6f1     00 00 00 00 
0b6f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6f9     00 00 38 00 
0b6fd     00 00 00 00 
0b701     00 00 00 00 
0b705     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b709     00 00 38 00 
0b70d     00 00 00 00 
0b711     00 00 00 00 
0b715     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b719     00 00 38 00 
0b71d     00 00 00 00 
0b721     00 00 00 00 
0b725     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b729     00 00 38 00 
0b72d     00 00 00 00 
0b731     00 00 00 00 
0b735     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b739     00 00 38 00 
0b73d     00 00 00 00 
0b741     00 00 00 00 
0b745     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b749     00 00 38 00 
0b74d     00 00 00 00 
0b751     00 00 00 00 
0b755     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b759     00 00 38 00 
0b75d     00 00 00 00 
0b761     00 00 00 00 
0b765     00 0C 20 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $20, $00
0b769     00 0C 20 00 
0b76d     00 00 00 00 
0b771     00 00 00 00 
0b775     00 0C 10 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00
0b779     00 0C 10 00 
0b77d     00 00 00 00 
0b781     00 00 00 00 
0b785     00 0C 00 00 | 	byte	$00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00
0b789     00 0C 00 00 
0b78d     00 00 00 00 
0b791     00 00 00 00 
0b795     00 00 00 00 | 	byte	$00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b799     00 00 00 00 
      ...             
0b84d     00 00 00 00 
0b851     00 00 00    | 	byte	$00[187]
0b854     02 A6 80 00 
0b858     00 AA 70 00 
0b85c     02 A6 90 00 
0b860     01 AC 50 00 | 	byte	$02, $a6, $80, $00, $00, $aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00
0b864     02 5C 80 00 
0b868     00 AA 70 00 
0b86c     02 5C 90 00 
0b870     00 00 00 00 | 	byte	$02, $5c, $80, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00
0b874     00 00 00 00 
0b878     00          | 	byte	$00[5]
0b879     AA 70 00 00 
0b87d     00 00 00 01 
0b881     AC 50 00 02 
0b885     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b889     AA 70 00 02 
0b88d     5C 90 00 01 
0b891     AC 50 00 00 
0b895     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b899     D6 70 00 00 
0b89d     00 00 00 01 
0b8a1     AC 60 00 00 
0b8a5     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b8a9     AA 70 00 00 
0b8ad     00 00 00 00 
0b8b1     00 00 00 00 
0b8b5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8b9     AA 70 00 00 
0b8bd     00 00 00 01 
0b8c1     AC 50 00 00 
0b8c5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b8c9     AA 70 00 00 
0b8cd     00 00 00 00 
0b8d1     00 00 00 02 
0b8d5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b8d9     AA 70 00 02 
0b8dd     A6 90 00 01 
0b8e1     AC 50 00 02 
0b8e5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b8e9     AA 70 00 02 
0b8ed     5C 90 00 00 
0b8f1     00 00 00 00 
0b8f5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8f9     AA 70 00 00 
0b8fd     00 00 00 01 
0b901     AC 50 00 02 
0b905     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b909     AA 70 00 02 
0b90d     5C 90 00 01 
0b911     AC 50 00 00 
0b915     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b919     D6 70 00 00 
0b91d     00 00 00 01 
0b921     AC 60 00 00 
0b925     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b929     AA 70 00 00 
0b92d     00 00 00 00 
0b931     00 00 00 00 
0b935     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b939     AA 70 00 00 
0b93d     00 00 00 01 
0b941     AC 50 00 00 
0b945     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b949     AA 70 00 00 
0b94d     00 00 00 00 
0b951     00 00 00 01 
0b955     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0b959     AA 70 00 01 
0b95d     FC 90 00 01 
0b961     AC 50 00 01 
0b965     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b969     AA 70 00 01 
0b96d     C5 90 00 00 
0b971     00 00 00 00 
0b975     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b979     AA 70 00 00 
0b97d     00 00 00 01 
0b981     AC 50 00 01 
0b985     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b989     AA 70 00 01 
0b98d     C5 90 00 01 
0b991     AC 50 00 00 
0b995     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b999     D6 70 00 00 
0b99d     00 00 00 01 
0b9a1     AC 60 00 00 
0b9a5     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b9a9     AA 70 00 00 
0b9ad     00 00 00 00 
0b9b1     00 00 00 00 
0b9b5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9b9     AA 70 00 00 
0b9bd     00 00 00 01 
0b9c1     AC 50 00 00 
0b9c5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b9c9     AA 70 00 00 
0b9cd     00 00 00 00 
0b9d1     00 00 00 02 
0b9d5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b9d9     AA 70 00 02 
0b9dd     A6 90 00 01 
0b9e1     AC 50 00 02 
0b9e5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b9e9     AA 70 00 02 
0b9ed     5C 90 00 00 
0b9f1     00 00 00 00 
0b9f5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9f9     AA 70 00 00 
0b9fd     00 00 00 01 
0ba01     AC 50 00 02 
0ba05     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0ba09     AA 70 00 02 
0ba0d     5C 90 00 01 
0ba11     AC 50 00 00 
0ba15     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0ba19     D6 70 00 00 
0ba1d     00 00 00 01 
0ba21     AC 60 00 00 
0ba25     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0ba29     AA 70 00 00 
0ba2d     00 00 00 00 
0ba31     00 00 00 00 
0ba35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba39     AA 70 00 00 
0ba3d     00 00 00 01 
0ba41     AC 50 00 00 
0ba45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0ba49     AA 70 00 00 
0ba4d     00 00 00 00 
0ba51     00 00 00 02 
0ba55     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0ba59     AA 70 00 02 
0ba5d     A6 90 00 01 
0ba61     AC 50 00 02 
0ba65     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0ba69     AA 70 00 02 
0ba6d     5C 90 00 01 
0ba71     AC 50 00 00 
0ba75     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba79     AA 70 00 00 
0ba7d     00 00 00 00 
0ba81     00 00 00 02 
0ba85     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0ba89     AA 70 00 02 
0ba8d     5C 90 00 01 
0ba91     AC 50 00 00 
0ba95     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba99     AA 70 00 00 
0ba9d     00 00 00 01 
0baa1     AC 60 00 00 
0baa5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0baa9     AA 70 00 00 
0baad     00 00 00 00 
0bab1     00 00 00 00 
0bab5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bab9     AA 70 00 00 
0babd     00 00 00 01 
0bac1     AC 50 00 00 
0bac5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bac9     AA 70 00 00 
0bacd     00 00 00 00 
0bad1     00 00 00 02 
0bad5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bad9     AA 70 00 02 
0badd     A6 90 00 01 
0bae1     AC 50 00 02 
0bae5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bae9     AA 70 00 02 
0baed     5C 90 00 01 
0baf1     AC 50 00 00 
0baf5     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0baf9     AA 70 00 00 
0bafd     00 00 00 00 
0bb01     00 00 00 02 
0bb05     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bb09     AA 70 00 02 
0bb0d     5C 90 00 01 
0bb11     AC 50 00 00 
0bb15     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0bb19     AA 70 00 00 
0bb1d     00 00 00 01 
0bb21     AC 60 00 00 
0bb25     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bb29     AA 70 00 00 
0bb2d     00 00 00 00 
0bb31     00 00 00 00 
0bb35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb39     AA 70 00 00 
0bb3d     00 00 00 01 
0bb41     AC 50 00 00 
0bb45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb49     AA 70 00 00 
0bb4d     00 00 00 00 
0bb51     00 00 00 01 
0bb55     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0bb59     AA 70 00 01 
0bb5d     FC 90 00 01 
0bb61     AC 50 00 01 
0bb65     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bb69     AA 70 00 01 
0bb6d     C5 90 00 01 
0bb71     AC 50 00 00 
0bb75     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb79     AA 70 00 00 
0bb7d     00 00 00 00 
0bb81     00 00 00 01 
0bb85     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $c5, $80, $00, $00
0bb89     AA 70 00 01 
0bb8d     C5 90 00 01 
0bb91     AC 50 00 00 
0bb95     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb99     AA 70 00 00 
0bb9d     00 00 00 01 
0bba1     AC 60 00 00 
0bba5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bba9     AA 70 00 00 
0bbad     00 00 00 00 
0bbb1     00 00 00 00 
0bbb5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbb9     AA 70 00 00 
0bbbd     00 00 00 01 
0bbc1     AC 50 00 00 
0bbc5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bbc9     AA 70 00 00 
0bbcd     00 00 00 00 
0bbd1     00 00 00 02 
0bbd5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bbd9     AA 70 00 02 
0bbdd     A6 90 00 01 
0bbe1     AC 50 00 02 
0bbe5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bbe9     AA 70 00 02 
0bbed     5C 90 00 01 
0bbf1     AC 50 00 00 
0bbf5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bbf9     AA 70 00 00 
0bbfd     00 00 00 00 
0bc01     00 00 00 02 
0bc05     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bc09     AA 70 00 02 
0bc0d     5C 90 00 01 
0bc11     AC 50 00 00 
0bc15     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc19     AA 70 00 00 
0bc1d     00 00 00 01 
0bc21     AC 60 00 00 
0bc25     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bc29     AA 70 00 00 
0bc2d     00 00 00 00 
0bc31     00 00 00 00 
0bc35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc39     AA 70 00 00 
0bc3d     00 00 00 01 
0bc41     AC 50 00 00 
0bc45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc49     AA 70 00 00 
0bc4d     00 00 00 00 
0bc51     00 00 00 02 
0bc55     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bc59     AA 70 00 02 
0bc5d     A6 90 00 01 
0bc61     AC 50 00 02 
0bc65     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc69     AA 70 00 02 
0bc6d     5C 90 00 00 
0bc71     00 00 00 00 
0bc75     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc79     AA 70 00 00 
0bc7d     00 00 00 01 
0bc81     AC 50 00 02 
0bc85     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc89     AA 70 00 02 
0bc8d     5C 90 00 01 
0bc91     AC 50 00 00 
0bc95     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc99     AA 70 00 00 
0bc9d     00 00 00 01 
0bca1     AC 60 00 00 
0bca5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bca9     AA 70 00 00 
0bcad     00 00 00 00 
0bcb1     00 00 00 00 
0bcb5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcb9     AA 70 00 00 
0bcbd     00 00 00 01 
0bcc1     AC 50 00 00 
0bcc5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bcc9     AA 70 00 00 
0bccd     00 00 00 00 
0bcd1     00 00 00 02 
0bcd5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bcd9     AA 70 00 02 
0bcdd     A6 90 00 01 
0bce1     AC 50 00 02 
0bce5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bce9     AA 70 00 02 
0bced     5C 90 00 00 
0bcf1     00 00 00 00 
0bcf5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcf9     AA 70 00 00 
0bcfd     00 00 00 01 
0bd01     AC 50 00 02 
0bd05     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd09     AA 70 00 02 
0bd0d     5C 90 00 01 
0bd11     AC 50 00 00 
0bd15     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd19     AA 70 00 00 
0bd1d     00 00 00 01 
0bd21     AC 60 00 00 
0bd25     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bd29     AA 70 00 00 
0bd2d     00 00 00 00 
0bd31     00 00 00 00 
0bd35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd39     AA 70 00 00 
0bd3d     00 00 00 01 
0bd41     AC 50 00 00 
0bd45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd49     AA 70 00 00 
0bd4d     00 00 00 00 
0bd51     00 00 00 01 
0bd55     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0bd59     AA 70 00 01 
0bd5d     FC 90 00 01 
0bd61     AC 50 00 01 
0bd65     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bd69     AA 70 00 01 
0bd6d     C5 90 00 00 
0bd71     00 00 00 00 
0bd75     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd79     AA 70 00 00 
0bd7d     00 00 00 01 
0bd81     AC 50 00 01 
0bd85     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bd89     AA 70 00 01 
0bd8d     C5 90 00 01 
0bd91     AC 50 00 00 
0bd95     00 80 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0bd99     AA 70 00 00 
0bd9d     00 00 00 01 
0bda1     AC 60 00 00 
0bda5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bda9     AA 70 00 00 
0bdad     00 00 00 00 
0bdb1     00 00 00 00 
0bdb5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdb9     AA 70 00 00 
0bdbd     00 00 00 01 
0bdc1     AC 50 00 00 
0bdc5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdc9     AA 70 00 00 
0bdcd     00 00 00 00 
0bdd1     00 00 00 02 
0bdd5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bdd9     AA 70 00 02 
0bddd     A6 90 00 01 
0bde1     AC 50 00 02 
0bde5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bde9     AA 70 00 02 
0bded     5C 90 00 00 
0bdf1     00 00 00 00 
0bdf5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdf9     AA 70 00 00 
0bdfd     00 00 00 01 
0be01     AC 50 00 02 
0be05     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0be09     AA 70 00 02 
0be0d     5C 90 00 01 
0be11     AC 50 00 00 
0be15     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be19     AA 70 00 00 
0be1d     00 00 00 01 
0be21     AC 60 00 00 
0be25     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0be29     AA 70 00 00 
0be2d     00 00 00 00 
0be31     00 00 00 00 
0be35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be39     AA 70 00 00 
0be3d     00 00 00 01 
0be41     AC 50 00 00 
0be45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be49     AA 70 00 00 
0be4d     00 00 00 00 
0be51     00 00 00 02 
0be55     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0be59     AA 70 00 02 
0be5d     A6 90 00 01 
0be61     AC 50 00 02 
0be65     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0be69     AA 70 00 02 
0be6d     5C 90 00 01 
0be71     AC 50 00 00 
0be75     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be79     AA 70 00 00 
0be7d     00 00 00 00 
0be81     00 00 00 02 
0be85     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0be89     AA 70 00 02 
0be8d     5C 90 00 01 
0be91     AC 50 00 00 
0be95     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be99     AA 70 00 00 
0be9d     00 00 00 01 
0bea1     AC 60 00 00 
0bea5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bea9     AA 70 00 00 
0bead     00 00 00 00 
0beb1     00 00 00 00 
0beb5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0beb9     AA 70 00 00 
0bebd     00 00 00 01 
0bec1     AC 50 00 00 
0bec5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bec9     AA 70 00 00 
0becd     00 00 00 00 
0bed1     00 00 00 02 
0bed5     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bed9     AA 70 00 02 
0bedd     A6 90 00 01 
0bee1     AC 50 00 02 
0bee5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bee9     AA 70 00 02 
0beed     5C 90 00 01 
0bef1     AC 50 00 00 
0bef5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bef9     AA 70 00 00 
0befd     00 00 00 00 
0bf01     00 00 00 02 
0bf05     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bf09     AA 70 00 02 
0bf0d     5C 90 00 01 
0bf11     AC 50 00 00 
0bf15     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bf19     AA 70 00 00 
0bf1d     00 00 00 01 
0bf21     AC 60 00 00 
0bf25     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bf29     AA 70 00 00 
0bf2d     00 00 00 00 
0bf31     00 00 00 00 
0bf35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf39     AA 70 00 00 
0bf3d     00 00 00 01 
0bf41     AC 50 00 00 
0bf45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bf49     AA 70 00 00 
0bf4d     00 00 00 00 
0bf51     00 00 00 01 
0bf55     68 80 38 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bf59     68 20 38 01 
0bf5d     C5 90 00 01 
0bf61     53 60 00 00 
0bf65     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bf69     00 00 38 00 
0bf6d     00 00 00 00 
0bf71     00 00 00 00 
0bf75     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf79     00 00 38 00 
0bf7d     00 00 00 00 
0bf81     00 00 00 00 
0bf85     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf89     00 00 38 00 
0bf8d     00 00 00 00 
0bf91     00 00 00 00 
0bf95     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf99     00 00 38 00 
0bf9d     00 00 00 00 
0bfa1     00 00 00 00 
0bfa5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfa9     00 00 38 00 
0bfad     00 00 00 00 
0bfb1     00 00 00 01 
0bfb5     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bfb9     68 20 38 01 
0bfbd     C5 90 00 01 
0bfc1     53 60 00 00 
0bfc5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bfc9     00 00 38 00 
0bfcd     00 00 00 00 
0bfd1     00 00 00 00 
0bfd5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfd9     00 00 38 00 
0bfdd     00 00 00 00 
0bfe1     00 00 00 00 
0bfe5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfe9     00 00 38 00 
0bfed     00 00 00 00 
0bff1     00 00 00 00 
0bff5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bff9     00 00 38 00 
0bffd     00 00 00 00 
0c001     00 00 00 00 
0c005     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c009     00 00 38 00 
0c00d     00 00 00 00 
0c011     00 00 00 01 
0c015     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c019     68 20 38 01 
0c01d     C5 90 00 01 
0c021     53 60 00 00 
0c025     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c029     00 00 38 00 
0c02d     00 00 00 00 
0c031     00 00 00 00 
0c035     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c039     00 00 38 00 
0c03d     00 00 00 00 
0c041     00 00 00 00 
0c045     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c049     00 00 38 00 
0c04d     00 00 00 00 
0c051     00 00 00 00 
0c055     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c059     00 00 38 00 
0c05d     00 00 00 00 
0c061     00 00 00 00 
0c065     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c069     00 00 38 00 
0c06d     00 00 00 00 
0c071     00 00 00 00 
0c075     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c079     00 00 38 00 
0c07d     00 00 00 00 
0c081     00 00 00 00 
0c085     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c089     00 00 38 00 
0c08d     00 00 00 00 
0c091     00 00 00 01 
0c095     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c099     68 20 38 01 
0c09d     C5 90 00 01 
0c0a1     53 60 00 00 
0c0a5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c0a9     00 00 38 00 
0c0ad     00 00 00 00 
0c0b1     00 00 00 00 
0c0b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c0b9     00 00 38 00 
0c0bd     00 00 00 00 
0c0c1     00 00 00 00 
0c0c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c0c9     00 00 38 00 
0c0cd     00 00 00 00 
0c0d1     00 00 00 01 
0c0d5     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c0d9     68 20 38 01 
0c0dd     C5 90 00 01 
0c0e1     53 60 00 00 
0c0e5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c0e9     00 00 38 00 
0c0ed     00 00 00 00 
0c0f1     00 00 00 00 
0c0f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c0f9     00 00 38 00 
0c0fd     00 00 00 00 
0c101     00 00 00 00 
0c105     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c109     00 00 38 00 
0c10d     00 00 00 00 
0c111     00 00 00 00 
0c115     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c119     00 00 38 00 
0c11d     00 00 00 00 
0c121     00 00 00 00 
0c125     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c129     00 00 38 00 
0c12d     00 00 00 00 
0c131     00 00 00 00 
0c135     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c139     00 00 38 00 
0c13d     00 00 00 00 
0c141     00 00 00 00 
0c145     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c149     00 00 38 00 
0c14d     00 00 00 00 
0c151     00 00 00 00 
0c155     71 12 02 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $71, $12, $02, $00
0c159     00 00 00 00 
0c15d     00 00 00 00 
0c161     00 00 00 00 
0c165     00          | 	byte	$00[13]
0c166     02 02 00 00 
0c16a     00 00 00 00 
0c16e     00 00 00 00 
0c172     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c176     02 02 00 00 
0c17a     00 00 00 00 
0c17e     00 00 00 00 
0c182     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c186     02 02 00 00 
0c18a     00 00 00 00 
0c18e     00 00 00 00 
0c192     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c196     02 02 00 00 
0c19a     00 00 00 00 
0c19e     00 00 00 00 
0c1a2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1a6     02 02 00 00 
0c1aa     00 00 00 00 
0c1ae     00 00 00 00 
0c1b2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1b6     02 02 00 00 
0c1ba     00 00 00 00 
0c1be     00 00 00 00 
0c1c2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1c6     02 02 00 00 
0c1ca     00 00 00 00 
0c1ce     00 00 00 00 
0c1d2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1d6     02 02 00 00 
0c1da     00 00 00 00 
0c1de     00 00 00 AA 
0c1e2     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c1e6     02 02 00 00 
0c1ea     00 00 00 00 
0c1ee     00 00 00 00 
0c1f2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1f6     02 02 00 00 
0c1fa     00 00 00 00 
0c1fe     00 00 00 AA 
0c202     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c206     02 02 00 00 
0c20a     00 00 00 00 
0c20e     00 00 00 00 
0c212     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c216     02 02 00 00 
0c21a     00 00 00 00 
0c21e     00 00 00 AA 
0c222     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c226     02 02 00 00 
0c22a     00 00 00 00 
0c22e     00 00 00 AA 
0c232     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c236     02 02 00 00 
0c23a     00 00 00 00 
0c23e     00 00 00 AA 
0c242     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c246     02 02 00 00 
0c24a     00 00 00 00 
0c24e     00 00 00 AA 
0c252     70 00 00 FE | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $fe
0c256     40 00 00 AA 
0c25a     70 00 01 C5 
0c25e     90 00 00 D6 
0c262     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00
0c266     00 00 00 AA 
0c26a     70 00 01 C5 
0c26e     90 00 00 00 
0c272     00 00 00 FE | 	byte	$00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c276     40 00 00 AA 
0c27a     70 00 01 C5 
0c27e     90 00 00 00 
0c282     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c286     40 00 00 AA 
0c28a     70 00 01 C5 
0c28e     90 00 00 00 
0c292     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c296     40 00 00 AA 
0c29a     70 00 01 C5 
0c29e     90 00 00 D6 
0c2a2     50 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe
0c2a6     40 00 00 AA 
0c2aa     70 00 01 C5 
0c2ae     90 00 00 D6 
0c2b2     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c2b6     40 00 00 AA 
0c2ba     70 00 01 C5 
0c2be     90 00 00 D6 
0c2c2     50 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e
0c2c6     40 00 00 AA 
0c2ca     70 00 01 C5 
0c2ce     90 00 00 D6 
0c2d2     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c2d6     40 00 00 AA 
0c2da     70 00 02 5C 
0c2de     90 00 01 AC 
0c2e2     60 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e
0c2e6     40 00 00 AA 
0c2ea     70 00 02 5C 
0c2ee     90 00 00 00 
0c2f2     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2f6     00 00 00 AA 
0c2fa     70 00 02 5C 
0c2fe     90 00 00 00 
0c302     00 00 01 2E | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e
0c306     40 00 00 AA 
0c30a     70 00 02 5C 
0c30e     90 00 00 00 
0c312     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c316     00 00 00 AA 
0c31a     70 00 02 5C 
0c31e     90 00 00 D6 
0c322     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c326     00 00 00 AA 
0c32a     70 00 02 5C 
0c32e     90 00 00 00 
0c332     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c336     00 00 00 AA 
0c33a     70 00 02 5C 
0c33e     90 00 00 00 
0c342     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c346     00 00 00 AA 
0c34a     70 00 02 5C 
0c34e     90 00 00 00 
0c352     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c356     40 00 00 AA 
0c35a     70 00 02 5C 
0c35e     90 00 00 D6 
0c362     50 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c366     40 00 00 AA 
0c36a     70 00 02 5C 
0c36e     90 00 00 00 
0c372     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c376     00 00 00 AA 
0c37a     70 00 02 5C 
0c37e     90 00 00 00 
0c382     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c386     40 00 00 AA 
0c38a     70 00 02 5C 
0c38e     90 00 00 00 
0c392     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c396     00 00 00 AA 
0c39a     70 00 02 5C 
0c39e     90 00 00 D6 
0c3a2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c3a6     00 00 00 AA 
0c3aa     70 00 02 5C 
0c3ae     90 00 00 D6 
0c3b2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c3b6     00 00 00 AA 
0c3ba     70 00 02 5C 
0c3be     90 00 00 D6 
0c3c2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c3c6     00 00 00 AA 
0c3ca     70 00 02 5C 
0c3ce     90 00 00 D6 
0c3d2     50 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c3d6     40 00 00 AA 
0c3da     70 00 02 5C 
0c3de     90 00 01 AC 
0c3e2     60 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa
0c3e6     40 00 00 AA 
0c3ea     70 00 02 5C 
0c3ee     90 00 00 00 
0c3f2     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c3f6     00 00 00 AA 
0c3fa     70 00 02 5C 
0c3fe     90 00 00 00 
0c402     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c406     40 00 00 AA 
0c40a     70 00 02 5C 
0c40e     90 00 00 00 
0c412     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c416     00 00 00 AA 
0c41a     70 00 02 5C 
0c41e     90 00 00 D6 
0c422     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c426     00 00 00 AA 
0c42a     70 00 02 5C 
0c42e     90 00 00 00 
0c432     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c436     40 00 00 AA 
0c43a     70 00 02 5C 
0c43e     90 00 00 00 
0c442     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c446     40 00 00 AA 
0c44a     70 00 02 5C 
0c44e     90 00 00 00 
0c452     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f
0c456     40 00 00 AA 
0c45a     70 00 01 C5 
0c45e     90 00 01 AC 
0c462     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c466     40 00 00 AA 
0c46a     70 00 01 C5 
0c46e     90 00 01 AC 
0c472     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c476     40 00 00 AA 
0c47a     70 00 01 C5 
0c47e     90 00 01 AC 
0c482     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c486     40 00 00 AA 
0c48a     70 00 01 C5 
0c48e     90 00 01 AC 
0c492     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c496     40 00 00 AA 
0c49a     70 00 01 C5 
0c49e     90 00 01 AC 
0c4a2     60 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00
0c4a6     00 00 00 AA 
0c4aa     70 00 00 00 
0c4ae     00 00 00 00 
0c4b2     00 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $87
0c4b6     40 00 00 AA 
0c4ba     70 00 01 C5 
0c4be     90 00 01 AC 
0c4c2     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $97
0c4c6     40 00 00 AA 
0c4ca     70 00 01 C5 
0c4ce     90 00 00 00 
0c4d2     00 00 00 87 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87
0c4d6     40 00 00 AA 
0c4da     70 00 02 5C 
0c4de     90 00 01 AC 
0c4e2     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $97
0c4e6     40 00 00 AA 
0c4ea     70 00 02 5C 
0c4ee     90 00 01 AC 
0c4f2     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c4f6     00 00 00 AA 
0c4fa     70 00 02 5C 
0c4fe     90 00 01 AC 
0c502     50 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $87
0c506     40 00 00 AA 
0c50a     70 00 02 5C 
0c50e     90 00 01 AC 
0c512     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c516     00 00 00 AA 
0c51a     70 00 02 5C 
0c51e     90 00 01 AC 
0c522     60 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00
0c526     00 00 00 AA 
0c52a     70 00 00 00 
0c52e     00 00 00 00 
0c532     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0c536     40 00 00 AA 
0c53a     70 00 00 00 
0c53e     00 00 00 00 
0c542     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97
0c546     40 00 00 AA 
0c54a     70 00 00 00 
0c54e     00 00 00 00 
0c552     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0c556     40 00 01 FC 
0c55a     20 47 01 FC 
0c55e     90 00 01 AC 
0c562     50 00 00 97 | 	byte	$40, $00, $01, $fc, $20, $47, $01, $fc, $90, $00, $01, $ac, $50, $00, $00, $97
0c566     40 00 00 00 
0c56a     00 47 00 00 
0c56e     00 00 00 00 
0c572     00 00 00 00 | 	byte	$40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c576     00 00 00 00 
0c57a     00          | 	byte	$00[5]
0c57b     47 00 00 00 
0c57f     00 00 00 00 
0c583     00 00 97 40 
0c587     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c58b     47 00 00 00 
0c58f     00 00 00 00 
0c593     00 00 00 00 
0c597     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c59b     47 00 00 00 
0c59f     00 00 00 00 
0c5a3     00 00 00 00 
0c5a7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5ab     47 00 00 00 
0c5af     00 00 00 00 
0c5b3     00 00 00 00 
0c5b7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5bb     47 00 00 00 
0c5bf     00 00 00 00 
0c5c3     00 00 7F 40 
0c5c7     00 01 C5 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $c5, $20
0c5cb     47 01 C5 90 
0c5cf     00 01 AC 50 
0c5d3     00 00 00 00 
0c5d7     00 00 00 00 | 	byte	$47, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c5db     47 00 00 00 
0c5df     00 00 00 00 
0c5e3     00 00 97 40 
0c5e7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c5eb     47 00 00 00 
0c5ef     00 00 00 00 
0c5f3     00 00 00 00 
0c5f7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5fb     47 00 00 00 
0c5ff     00 00 00 00 
0c603     00 00 97 40 
0c607     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c60b     47 00 00 00 
0c60f     00 00 00 00 
0c613     00 00 7F 40 
0c617     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $fc, $20
0c61b     49 01 7D 90 
0c61f     00 01 AC 50 
0c623     00 00 97 40 
0c627     00 00 00 00 | 	byte	$49, $01, $7d, $90, $00, $01, $ac, $50, $00, $00, $97, $40, $00, $00, $00, $00
0c62b     49 00 00 00 
0c62f     00 00 00 00 
0c633     00 00 00 00 
0c637     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c63b     49 00 00 00 
0c63f     00 00 00 00 
0c643     00 00 97 40 
0c647     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c64b     49 00 00 00 
0c64f     00 00 00 00 
0c653     00 00 00 00 
0c657     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c65b     49 00 00 00 
0c65f     00 00 00 00 
0c663     00 00 00 00 
0c667     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c66b     49 00 00 00 
0c66f     00 00 00 00 
0c673     00 00 00 00 
0c677     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c67b     49 00 00 00 
0c67f     00 00 00 00 
0c683     00 00 00 00 
0c687     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c68b     49 00 00 00 
0c68f     00 00 00 00 
0c693     00 00 00 00 
0c697     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c69b     49 00 00 00 
0c69f     00 01 AC 50 
0c6a3     00 00 00 00 
0c6a7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c6ab     49 00 00 00 
0c6af     00 03 58 60 
0c6b3     00 00 00 00 
0c6b7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
0c6bb     49 00 00 00 
0c6bf     00 00 00 00 
0c6c3     00 00 00 00 
0c6c7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6cb     49 00 00 00 
0c6cf     00 00 00 00 
0c6d3     00 00 00 00 
0c6d7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6db     00 00 00 00 
      ...             
0c74f     00 00 00 00 
0c753     00          | 	byte	$00[121]
0c754     01 2E 20 00 
0c758     01 E0 20 38 
0c75c     02 5C 30 00 
0c760     01 E0 20 00 | 	byte	$01, $2e, $20, $00, $01, $e0, $20, $38, $02, $5c, $30, $00, $01, $e0, $20, $00
0c764     00 00 00 00 
0c768     00 00 00    | 	byte	$00[7]
0c76b     38 00 00 00 
0c76f     00 00 00 00 
0c773     00 00 00 00 
0c777     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c77b     38 00 00 00 
0c77f     00 00 00 00 
0c783     00 00 00 00 
0c787     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c78b     38 00 00 00 
0c78f     00 00 00 00 
0c793     00 00 00 00 
0c797     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c79b     38 00 00 00 
0c79f     00 00 00 00 
0c7a3     00 00 00 00 
0c7a7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7ab     38 00 00 00 
0c7af     00 00 00 00 
0c7b3     00 00 00 00 
0c7b7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7bb     38 00 00 00 
0c7bf     00 00 00 00 
0c7c3     00 00 00 00 
0c7c7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7cb     38 00 00 00 
0c7cf     00 00 00 00 
0c7d3     00 00 00 00 
0c7d7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7db     38 00 00 00 
0c7df     00 00 00 00 
0c7e3     00 00 00 00 
0c7e7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7eb     38 00 00 00 
0c7ef     00 00 00 00 
0c7f3     00 00 00 00 
0c7f7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7fb     38 00 00 00 
0c7ff     00 00 00 00 
0c803     00 00 00 00 
0c807     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c80b     38 00 00 00 
0c80f     00 00 00 00 
0c813     00 00 00 00 
0c817     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c81b     38 00 00 00 
0c81f     00 00 00 00 
0c823     00 00 00 00 
0c827     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c82b     38 00 00 00 
0c82f     00 00 00 00 
0c833     00 00 00 00 
0c837     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c83b     00 00 00 00 
      ...             
0ce53     00 00 00 00 
0ce57     00          | 	byte	$00[1565]
0ce58     E7 F0 14 26 
0ce5c     25 3B 3B 25 
0ce60     19 0F E9 DA 
0ce64     DA C5 C7 DD | 	byte	$e7, $f0, $14, $26, $25, $3b, $3b, $25, $19, $0f, $e9, $da, $da, $c5, $c7, $dd
0ce68     E9 F4 1D 27 
0ce6c     27 3D 37 22 
0ce70     18 0A DF D8 
0ce74     D7 C3 CC DF | 	byte	$e9, $f4, $1d, $27, $27, $3d, $37, $22, $18, $0a, $df, $d8, $d7, $c3, $cc, $df
0ce78     E9 F7 21 28 
0ce7c     29 3E 33 1F 
0ce80     16 05 DB D7 
0ce84     D6 C2 D1 E1 | 	byte	$e9, $f7, $21, $28, $29, $3e, $33, $1f, $16, $05, $db, $d7, $d6, $c2, $d1, $e1
0ce88     EA FF 27 29 
0ce8c     2C 3E 2E 1E 
0ce90     15 00 D7 D8 
0ce94     D3 C3 D5 E3 | 	byte	$ea, $ff, $27, $29, $2c, $3e, $2e, $1e, $15, $00, $d7, $d8, $d3, $c3, $d5, $e3
0ce98     EC 04 2B 29 
0ce9c     30 3C 2A 1D 
0cea0     13 F7 D4 D7 
0cea4     CF C5 D9 E3 | 	byte	$ec, $04, $2b, $29, $30, $3c, $2a, $1d, $13, $f7, $d4, $d7, $cf, $c5, $d9, $e3
0cea8     EE 0D 2D 29 
0ceac     33 38 26 1D 
0ceb0     10 ED D1 D7 
0ceb4     CE C9 DC E4 | 	byte	$ee, $0d, $2d, $29, $33, $38, $26, $1d, $10, $ed, $d1, $d7, $ce, $c9, $dc, $e4
0ceb8     F1 16 2F 29 
0cebc     33 35 23 1C 
0cec0     0C E6 D0 D6 
0cec4     CC CE DE E5 | 	byte	$f1, $16, $2f, $29, $33, $35, $23, $1c, $0c, $e6, $d0, $d6, $cc, $ce, $de, $e5
0cec8     F6 18 2F 2A 
0cecc     34 30 22 1A 
0ced0     07 E4 D1 D5 
0ced4     CD D2 DE E7 | 	byte	$f6, $18, $2f, $2a, $34, $30, $22, $1a, $07, $e4, $d1, $d5, $cd, $d2, $de, $e7
0ced8     F9 21 2F 2B 
0cedc     33 2D 22 18 
0cee0     04 DB D1 D5 
0cee4     CF D4 DE E9 | 	byte	$f9, $21, $2f, $2b, $33, $2d, $22, $18, $04, $db, $d1, $d5, $cf, $d4, $de, $e9
0cee8     FF 27 30 2B 
0ceec     30 2A 23 14 
0cef0     00 D8 D0 D6 
0cef4     D2 D7 DD ED | 	byte	$ff, $27, $30, $2b, $30, $2a, $23, $14, $00, $d8, $d0, $d6, $d2, $d7, $dd, $ed
0cef8     02 2B 31 29 
0cefc     2D 28 22 10 
0cf00     FB D4 CF D8 
0cf04     D4 D8 DE F0 | 	byte	$02, $2b, $31, $29, $2d, $28, $22, $10, $fb, $d4, $cf, $d8, $d4, $d8, $de, $f0
0cf08     08 2C 30 26 
0cf0c     2A 27 21 0D 
0cf10     F4 D3 D0 DA 
0cf14     D7 D8 DF F5 | 	byte	$08, $2c, $30, $26, $2a, $27, $21, $0d, $f4, $d3, $d0, $da, $d7, $d8, $df, $f5
0cf18     0D 2F 2F 24 
0cf1c     28 28 20 09 
0cf20     F1 D2 D3 DD 
0cf24     D8 D8 E2 F8 | 	byte	$0d, $2f, $2f, $24, $28, $28, $20, $09, $f1, $d2, $d3, $dd, $d8, $d8, $e2, $f8
0cf28     12 30 2B 21 
0cf2c     27 28 1E 05 
0cf30     ED CD D5 E0 
0cf34     D9 D7 E3 FC | 	byte	$12, $30, $2b, $21, $27, $28, $1e, $05, $ed, $cd, $d5, $e0, $d9, $d7, $e3, $fc
0cf38     14 32 29 1E 
0cf3c     27 28 1B 01 
0cf40     E8 CE DA E4 
0cf44     D8 D7 E8 02 | 	byte	$14, $32, $29, $1e, $27, $28, $1b, $01, $e8, $ce, $da, $e4, $d8, $d7, $e8, $02
0cf48     17 31 25 1A 
0cf4c     27 28 17 FD 
0cf50     E4 CF DD E7 
0cf54     D7 D7 ED 04 | 	byte	$17, $31, $25, $1a, $27, $28, $17, $fd, $e4, $cf, $dd, $e7, $d7, $d7, $ed, $04
0cf58     1A 2F 22 18 
0cf5c     29 27 10 FA 
0cf60     E3 D2 DF E8 
0cf64     D5 D8 F4 05 | 	byte	$1a, $2f, $22, $18, $29, $27, $10, $fa, $e3, $d2, $df, $e8, $d5, $d8, $f4, $05
0cf68     1E 2C 1D 17 
0cf6c     2B 27 09 FA 
0cf70     E0 D5 E6 E9 
0cf74     D3 DA F8 06 | 	byte	$1e, $2c, $1d, $17, $2b, $27, $09, $fa, $e0, $d5, $e6, $e9, $d3, $da, $f8, $06
0cf78     21 2A 17 18 
0cf7c     2D 25 05 F9 
0cf80     E0 D6 EC E9 
0cf84     D2 DE FE 07 | 	byte	$21, $2a, $17, $18, $2d, $25, $05, $f9, $e0, $d6, $ec, $e9, $d2, $de, $fe, $07
0cf88     1F 29 12 17 
0cf8c     2F 21 FF F7 
0cf90     E1 D8 EF E6 
0cf94     D0 E5 02 07 | 	byte	$1f, $29, $12, $17, $2f, $21, $ff, $f7, $e1, $d8, $ef, $e6, $d0, $e5, $02, $07
0cf98     1F 24 0F 1C 
0cf9c     31 19 FD F7 
0cfa0     E1 DE F3 E1 
0cfa4     CE EB 03 07 | 	byte	$1f, $24, $0f, $1c, $31, $19, $fd, $f7, $e1, $de, $f3, $e1, $ce, $eb, $03, $07
0cfa8     22 1E 0A 22 
0cfac     32 10 FD F9 
0cfb0     DD E2 F8 DA 
0cfb4     CF F3 03 06 | 	byte	$22, $1e, $0a, $22, $32, $10, $fd, $f9, $dd, $e2, $f8, $da, $cf, $f3, $03, $06
0cfb8     24 1C 07 25 
0cfbc     2E 09 FE FA 
0cfc0     DD E7 F9 D8 
0cfc4     D5 F7 00 05 | 	byte	$24, $1c, $07, $25, $2e, $09, $fe, $fa, $dd, $e7, $f9, $d8, $d5, $f7, $00, $05
0cfc8     23 16 08 2D 
0cfcc     27 06 01 FB 
0cfd0     DE EC F6 D0 
0cfd4     DD FD FD 06 | 	byte	$23, $16, $08, $2d, $27, $06, $01, $fb, $de, $ec, $f6, $d0, $dd, $fd, $fd, $06
0cfd8     20 0F 09 32 
0cfdc     20 00 05 F6 
0cfe0     E1 F2 F2 CE 
0cfe4     E0 00 F8 0B | 	byte	$20, $0f, $09, $32, $20, $00, $05, $f6, $e1, $f2, $f2, $ce, $e0, $00, $f8, $0b
0cfe8     1E 0A 11 32 
0cfec     1A 00 09 F4 
0cff0     E2 F9 EF D0 
0cff4     E5 FF F5 0D | 	byte	$1e, $0a, $11, $32, $1a, $00, $09, $f4, $e2, $f9, $ef, $d0, $e5, $ff, $f5, $0d
0cff8     1C 06 16 2E 
0cffc     14 02 0B F4 
0d000     E4 FC E7 D4 
0d004     EE FB F5 0D | 	byte	$1c, $06, $16, $2e, $14, $02, $0b, $f4, $e4, $fc, $e7, $d4, $ee, $fb, $f5, $0d
0d008     1A 03 1D 2B 
0d00c     0C 07 09 F5 
0d010     E8 FC E1 D6 
0d014     F6 F6 F8 0A | 	byte	$1a, $03, $1d, $2b, $0c, $07, $09, $f5, $e8, $fc, $e1, $d6, $f6, $f6, $f8, $0a
0d018     15 04 1F 29 
0d01c     09 0C 07 F3 
0d020     ED F9 E2 D9 
0d024     F8 F2 F9 0C | 	byte	$15, $04, $1f, $29, $09, $0c, $07, $f3, $ed, $f9, $e2, $d9, $f8, $f2, $f9, $0c
0d028     10 0A 1E 23 
0d02c     09 0E 07 F3 
0d030     F1 F5 E2 DE 
0d034     F5 F1 F8 0E | 	byte	$10, $0a, $1e, $23, $09, $0e, $07, $f3, $f1, $f5, $e2, $de, $f5, $f1, $f8, $0e
0d038     0F 0D 1C 1C 
0d03c     0C 0E 0A F1 
0d040     F2 F3 E0 E4 
0d044     F1 F2 F5 0E | 	byte	$0f, $0d, $1c, $1c, $0c, $0e, $0a, $f1, $f2, $f3, $e0, $e4, $f1, $f2, $f5, $0e
0d048     0F 0C 20 1A 
0d04c     10 0E 0A F3 
0d050     F0 F5 E0 E8 
0d054     EF F1 F5 0C | 	byte	$0f, $0c, $20, $1a, $10, $0e, $0a, $f3, $f0, $f5, $e0, $e8, $ef, $f1, $f5, $0c
0d058     11 09 1F 18 
0d05c     11 0F 0A F4 
0d060     EE F9 E1 E7 
0d064     EF EF F4 0D | 	byte	$11, $09, $1f, $18, $11, $0f, $0a, $f4, $ee, $f9, $e1, $e7, $ef, $ef, $f4, $0d
0d068     12 06 1E 1B 
0d06c     0F 12 0B F2 
0d070     ED F9 E3 E3 
0d074     F1 EC F5 12 | 	byte	$12, $06, $1e, $1b, $0f, $12, $0b, $f2, $ed, $f9, $e3, $e3, $f1, $ec, $f5, $12
0d078     11 07 1C 1D 
0d07c     0E 16 0A ED 
0d080     F4 F6 E3 E3 
0d084     F1 E9 F7 18 | 	byte	$11, $07, $1c, $1d, $0e, $16, $0a, $ed, $f4, $f6, $e3, $e3, $f1, $e9, $f7, $18
0d088     09 0A 1E 1C 
0d08c     0F 19 09 E7 
0d090     FC F5 DF E6 
0d094     EF E6 F9 1C | 	byte	$09, $0a, $1e, $1c, $0f, $19, $09, $e7, $fc, $f5, $df, $e6, $ef, $e6, $f9, $1c
0d098     01 08 24 17 
0d09c     12 1B 07 E4 
0d0a0     02 F7 DA E8 
0d0a4     EC E5 FD 1B | 	byte	$01, $08, $24, $17, $12, $1b, $07, $e4, $02, $f7, $da, $e8, $ec, $e5, $fd, $1b
0d0a8     FD 0B 28 16 
0d0ac     16 1D FC E6 
0d0b0     05 F4 D7 EC 
0d0b4     E8 E3 05 16 | 	byte	$fd, $0b, $28, $16, $16, $1d, $fc, $e6, $05, $f4, $d7, $ec, $e8, $e3, $05, $16
0d0b8     FA 0F 29 14 
0d0bc     1A 1D F5 EE 
0d0c0     07 ED D8 EC 
0d0c4     E3 E2 10 0D | 	byte	$fa, $0f, $29, $14, $1a, $1d, $f5, $ee, $07, $ed, $d8, $ec, $e3, $e2, $10, $0d
0d0c8     F7 1A 28 14 
0d0cc     1F 1D EC F6 
0d0d0     09 E1 DA EB 
0d0d4     DF E5 17 06 | 	byte	$f7, $1a, $28, $14, $1f, $1d, $ec, $f6, $09, $e1, $da, $eb, $df, $e5, $17, $06
0d0d8     F7 21 22 16 
0d0dc     23 17 E8 FC 
0d0e0     0A DB E0 E9 
0d0e4     DB EE 18 01 | 	byte	$f7, $21, $22, $16, $23, $17, $e8, $fc, $0a, $db, $e0, $e9, $db, $ee, $18, $01
0d0e8     F8 28 20 1A 
0d0ec     26 0A E9 04 
0d0f0     04 D6 E1 E4 
0d0f4     D9 F9 15 F9 | 	byte	$f8, $28, $20, $1a, $26, $0a, $e9, $04, $04, $d6, $e1, $e4, $d9, $f9, $15, $f9
0d0f8     03 2B 1D 1E 
0d0fc     27 04 ED 0C 
0d100     FB D5 E3 DF 
0d104     DB 01 11 F2 | 	byte	$03, $2b, $1d, $1e, $27, $04, $ed, $0c, $fb, $d5, $e3, $df, $db, $01, $11, $f2
0d108     0D 2B 1D 24 
0d10c     23 FB F3 0F 
0d110     EE D6 E3 D9 
0d114     E0 05 0B F1 | 	byte	$0d, $2b, $1d, $24, $23, $fb, $f3, $0f, $ee, $d6, $e3, $d9, $e0, $05, $0b, $f1
0d118     15 2B 1E 28 
0d11c     1B F7 F9 0E 
0d120     E5 D6 E0 D7 
0d124     E6 0A 04 F5 | 	byte	$15, $2b, $1e, $28, $1b, $f7, $f9, $0e, $e5, $d6, $e0, $d7, $e6, $0a, $04, $f5
0d128     1E 2A 22 29 
0d12c     14 F7 FF 09 
0d130     E1 D7 DB D7 
0d134     EF 09 FC F9 | 	byte	$1e, $2a, $22, $29, $14, $f7, $ff, $09, $e1, $d7, $db, $d7, $ef, $09, $fc, $f9
0d138     20 29 26 27 
0d13c     0D F7 05 03 
0d140     DD D7 D7 DB 
0d144     F3 08 F9 00 | 	byte	$20, $29, $26, $27, $0d, $f7, $05, $03, $dd, $d7, $d7, $db, $f3, $08, $f9, $00
0d148     25 2A 2B 23 
0d14c     0B FA 05 FA 
0d150     D9 D5 D5 DE 
0d154     F7 04 FB 08 | 	byte	$25, $2a, $2b, $23, $0b, $fa, $05, $fa, $d9, $d5, $d5, $de, $f7, $04, $fb, $08
0d158     29 2C 2A 1F 
0d15c     09 FD 05 F4 
0d160     D7 D1 D7 E4 
0d164     F7 02 FD 0F | 	byte	$29, $2c, $2a, $1f, $09, $fd, $05, $f4, $d7, $d1, $d7, $e4, $f7, $02, $fd, $0f
0d168     2C 31 28 19 
0d16c     09 FE 02 F0 
0d170     D2 CC D9 EA 
0d174     F4 03 FF 10 | 	byte	$2c, $31, $28, $19, $09, $fe, $02, $f0, $d2, $cc, $d9, $ea, $f4, $03, $ff, $10
0d178     31 35 25 13 
0d17c     0D FB FE EF 
0d180     CC C9 DD EC 
0d184     F2 06 04 14 | 	byte	$31, $35, $25, $13, $0d, $fb, $fe, $ef, $cc, $c9, $dd, $ec, $f2, $06, $04, $14
0d188     37 36 21 14 
0d18c     0E FA FA E8 
0d190     C7 CD E2 EB 
0d194     F4 08 08 1B | 	byte	$37, $36, $21, $14, $0e, $fa, $fa, $e8, $c7, $cd, $e2, $eb, $f4, $08, $08, $1b
0d198     3E 31 1A 17 
0d19c     09 F7 F7 E4 
0d1a0     BE D1 E8 E6 
0d1a4     F9 0A 08 1F | 	byte	$3e, $31, $1a, $17, $09, $f7, $f7, $e4, $be, $d1, $e8, $e6, $f9, $0a, $08, $1f
0d1a8     44 2C 15 1C 
0d1ac     03 F3 F7 DA 
0d1b0     BB D3 EB E1 
0d1b4     FC 0E 09 2A | 	byte	$44, $2c, $15, $1c, $03, $f3, $f7, $da, $bb, $d3, $eb, $e1, $fc, $0e, $09, $2a
0d1b8     45 2B 14 20 
0d1bc     00 EF F6 D0 
0d1c0     BC D8 EB E1 
0d1c4     02 14 0C 36 | 	byte	$45, $2b, $14, $20, $00, $ef, $f6, $d0, $bc, $d8, $eb, $e1, $02, $14, $0c, $36
0d1c8     43 26 17 1D 
0d1cc     FC EB F2 C5 
0d1d0     BF DE E3 E6 
0d1d4     06 16 11 3F | 	byte	$43, $26, $17, $1d, $fc, $eb, $f2, $c5, $bf, $de, $e3, $e6, $06, $16, $11, $3f
0d1d8     41 20 20 18 
0d1dc     F6 E9 EC BC 
0d1e0     C0 E5 DB ED 
0d1e4     0D 16 1B 46 | 	byte	$41, $20, $20, $18, $f6, $e9, $ec, $bc, $c0, $e5, $db, $ed, $0d, $16, $1b, $46
0d1e8     40 19 26 11 
0d1ec     EF EA DF BA 
0d1f0     C4 E7 D8 F3 
0d1f4     13 15 26 46 | 	byte	$40, $19, $26, $11, $ef, $ea, $df, $ba, $c4, $e7, $d8, $f3, $13, $15, $26, $46
0d1f8     3A 18 26 0C 
0d1fc     E8 E9 D3 B9 
0d200     C9 E5 DB F8 
0d204     19 17 2F 48 | 	byte	$3a, $18, $26, $0c, $e8, $e9, $d3, $b9, $c9, $e5, $db, $f8, $19, $17, $2f, $48
0d208     34 1E 21 08 
0d20c     E4 E6 CD B8 
0d210     CF DE E1 FC 
0d214     1F 1D 36 49 | 	byte	$34, $1e, $21, $08, $e4, $e6, $cd, $b8, $cf, $de, $e1, $fc, $1f, $1d, $36, $49
0d218     32 25 1C 01 
0d21c     DF DE C7 B8 
0d220     D0 D9 E4 04 
0d224     22 27 3B 48 | 	byte	$32, $25, $1c, $01, $df, $de, $c7, $b8, $d0, $d9, $e4, $04, $22, $27, $3b, $48
0d228     2F 28 19 F8 
0d22c     DD D3 C3 B9 
0d230     D1 D7 E9 0C 
0d234     24 31 3D 47 | 	byte	$2f, $28, $19, $f8, $dd, $d3, $c3, $b9, $d1, $d7, $e9, $0c, $24, $31, $3d, $47
0d238     2E 28 15 F3 
0d23c     D9 CC C2 BA 
0d240     CF D9 EF 10 
0d244     2A 37 3F 46 | 	byte	$2e, $28, $15, $f3, $d9, $cc, $c2, $ba, $cf, $d9, $ef, $10, $2a, $37, $3f, $46
0d248     33 25 0E EB 
0d24c     D2 C7 C0 BA 
0d250     CC DD F2 18 
0d254     32 3B 41 46 | 	byte	$33, $25, $0e, $eb, $d2, $c7, $c0, $ba, $cc, $dd, $f2, $18, $32, $3b, $41, $46
0d258     35 20 0A E3 
0d25c     CC C3 BF B9 
0d260     CA E3 F9 20 
0d264     38 3F 42 47 | 	byte	$35, $20, $0a, $e3, $cc, $c3, $bf, $b9, $ca, $e3, $f9, $20, $38, $3f, $42, $47
0d268     37 1D 03 DC 
0d26c     C4 BF BE B9 
0d270     C9 E5 01 24 
0d274     3F 42 44 47 | 	byte	$37, $1d, $03, $dc, $c4, $bf, $be, $b9, $c9, $e5, $01, $24, $3f, $42, $44, $47
0d278     39 17 FB D7 
0d27c     BD BC BA BA 
0d280     C8 EB 09 2D 
0d284     45 45 48 47 | 	byte	$39, $17, $fb, $d7, $bd, $bc, $ba, $ba, $c8, $eb, $09, $2d, $45, $45, $48, $47
0d288     36 12 F2 D0 
0d28c     B7 BB B6 B9 
0d290     CB F0 0F 33 
0d294     4A 46 4B 47 | 	byte	$36, $12, $f2, $d0, $b7, $bb, $b6, $b9, $cb, $f0, $0f, $33, $4a, $46, $4b, $47
0d298     31 0F E9 CA 
0d29c     B3 B9 B4 B8 
0d2a0     CE F5 19 39 
0d2a4     4E 49 4D 49 | 	byte	$31, $0f, $e9, $ca, $b3, $b9, $b4, $b8, $ce, $f5, $19, $39, $4e, $49, $4d, $49
0d2a8     30 09 E2 C3 
0d2ac     B0 B5 B3 B6 
0d2b0     D2 FA 21 40 
0d2b4     51 4E 4D 4A | 	byte	$30, $09, $e2, $c3, $b0, $b5, $b3, $b6, $d2, $fa, $21, $40, $51, $4e, $4d, $4a
0d2b8     2C 02 DA BC 
0d2bc     AE B0 B4 B6 
0d2c0     DA 00 2A 48 
0d2c4     53 53 4D 49 | 	byte	$2c, $02, $da, $bc, $ae, $b0, $b4, $b6, $da, $00, $2a, $48, $53, $53, $4d, $49
0d2c8     28 FB D2 B6 
0d2cc     AB AB B4 B8 
0d2d0     DB 0B 2E 4D 
0d2d4     56 57 4C 49 | 	byte	$28, $fb, $d2, $b6, $ab, $ab, $b4, $b8, $db, $0b, $2e, $4d, $56, $57, $4c, $49
0d2d8     20 F1 CD B1 
0d2dc     A7 A8 B4 B7 
0d2e0     E1 17 33 51 
0d2e4     5C 58 4D 47 | 	byte	$20, $f1, $cd, $b1, $a7, $a8, $b4, $b7, $e1, $17, $33, $51, $5c, $58, $4d, $47
0d2e8     1B E8 CA AE 
0d2ec     A1 A8 B4 BB 
0d2f0     E8 1E 3B 53 
0d2f4     61 59 4C 43 | 	byte	$1b, $e8, $ca, $ae, $a1, $a8, $b4, $bb, $e8, $1e, $3b, $53, $61, $59, $4c, $43
0d2f8     14 DD C2 AC 
0d2fc     9B A6 B5 BF 
0d300     EC 26 42 56 
0d304     67 5A 4C 42 | 	byte	$14, $dd, $c2, $ac, $9b, $a6, $b5, $bf, $ec, $26, $42, $56, $67, $5a, $4c, $42
0d308     10 D6 BD A7 
0d30c     98 A6 B4 C0 
0d310     F6 2C 45 5C 
0d314     6A 58 4C 3E | 	byte	$10, $d6, $bd, $a7, $98, $a6, $b4, $c0, $f6, $2c, $45, $5c, $6a, $58, $4c, $3e
0d318     04 D2 B8 A0 
0d31c     95 A9 B4 C5 
0d320     04 30 4A 61 
0d324     6D 55 4B 3A | 	byte	$04, $d2, $b8, $a0, $95, $a9, $b4, $c5, $04, $30, $4a, $61, $6d, $55, $4b, $3a
0d328     F7 CC B3 9C 
0d32c     93 AC B5 CB 
0d330     0F 36 4F 68 
0d334     6E 54 4B 31 | 	byte	$f7, $cc, $b3, $9c, $93, $ac, $b5, $cb, $0f, $36, $4f, $68, $6e, $54, $4b, $31
0d338     F2 C7 AD 95 
0d33c     92 AC B7 D3 
0d340     13 3B 52 6E 
0d344     6D 55 49 2E | 	byte	$f2, $c7, $ad, $95, $92, $ac, $b7, $d3, $13, $3b, $52, $6e, $6d, $55, $49, $2e
0d348     E5 C2 AB 8F 
0d34c     92 AD B7 DA 
0d350     1B 3E 5B 72 
0d354     6C 54 48 1F | 	byte	$e5, $c2, $ab, $8f, $92, $ad, $b7, $da, $1b, $3e, $5b, $72, $6c, $54, $48, $1f
0d358     DF BF A3 8C 
0d35c     96 AD B9 DF 
0d360     24 42 60 77 
0d364     6B 53 46 1A | 	byte	$df, $bf, $a3, $8c, $96, $ad, $b9, $df, $24, $42, $60, $77, $6b, $53, $46, $1a
0d368     D6 BD 9C 88 
0d36c     97 AE BC EC 
0d370     2C 45 68 79 
0d374     65 51 43 12 | 	byte	$d6, $bd, $9c, $88, $97, $ae, $bc, $ec, $2c, $45, $68, $79, $65, $51, $43, $12
0d378     D2 B8 95 87 
0d37c     9C AF C1 F6 
0d380     30 4C 6E 7B 
0d384     64 51 3C 04 | 	byte	$d2, $b8, $95, $87, $9c, $af, $c1, $f6, $30, $4c, $6e, $7b, $64, $51, $3c, $04
0d388     CD B1 90 87 
0d38c     9C B0 C7 00 
0d390     33 52 71 79 
0d394     64 50 36 FA | 	byte	$cd, $b1, $90, $87, $9c, $b0, $c7, $00, $33, $52, $71, $79, $64, $50, $36, $fa
0d398     CB AB 8C 88 
0d39c     9C B3 D0 0A 
0d3a0     37 59 76 75 
0d3a4     64 4C 31 F1 | 	byte	$cb, $ab, $8c, $88, $9c, $b3, $d0, $0a, $37, $59, $76, $75, $64, $4c, $31, $f1
0d3a8     C5 A3 89 8D 
0d3ac     9D B7 D4 13 
0d3b0     3B 62 79 73 
0d3b4     63 49 24 EC | 	byte	$c5, $a3, $89, $8d, $9d, $b7, $d4, $13, $3b, $62, $79, $73, $63, $49, $24, $ec
0d3b8     BE 9D 87 8F 
0d3bc     9E BA DF 18 
0d3c0     42 67 7A 71 
0d3c4     62 44 1A E9 | 	byte	$be, $9d, $87, $8f, $9e, $ba, $df, $18, $42, $67, $7a, $71, $62, $44, $1a, $e9
0d3c8     B9 97 87 90 
0d3cc     9E BF EB 1A 
0d3d0     4A 69 79 71 
0d3d4     60 3D 13 E3 | 	byte	$b9, $97, $87, $90, $9e, $bf, $eb, $1a, $4a, $69, $79, $71, $60, $3d, $13, $e3
0d3d8     B2 94 8A 8F 
0d3dc     A2 C5 F1 20 
0d3e0     52 6E 75 73 
0d3e4     5A 3A 0C DC | 	byte	$b2, $94, $8a, $8f, $a2, $c5, $f1, $20, $52, $6e, $75, $73, $5a, $3a, $0c, $dc
0d3e8     AD 8F 8D 8D 
0d3ec     A9 CB F9 24 
0d3f0     55 72 72 73 
0d3f4     54 31 07 D7 | 	byte	$ad, $8f, $8d, $8d, $a9, $cb, $f9, $24, $55, $72, $72, $73, $54, $31, $07, $d7
0d3f8     A8 8C 8F 8E 
0d3fc     AC D6 FD 2C 
0d400     5A 73 71 71 
0d404     4E 25 04 CC | 	byte	$a8, $8c, $8f, $8e, $ac, $d6, $fd, $2c, $5a, $73, $71, $71, $4e, $25, $04, $cc
0d408     A2 8E 8E 8E 
0d40c     B2 E0 01 36 
0d410     5F 71 73 70 
0d414     4B 1C FF C3 | 	byte	$a2, $8e, $8e, $8e, $b2, $e0, $01, $36, $5f, $71, $73, $70, $4b, $1c, $ff, $c3
0d418     9E 90 8B 93 
0d41c     BA E6 05 40 
0d420     61 6D 77 6A 
0d424     41 19 F7 BD | 	byte	$9e, $90, $8b, $93, $ba, $e6, $05, $40, $61, $6d, $77, $6a, $41, $19, $f7, $bd
0d428     9D 94 8A 9A 
0d42c     C5 E8 0D 43 
0d430     66 6C 79 63 
0d434     3B 17 EE BA | 	byte	$9d, $94, $8a, $9a, $c5, $e8, $0d, $43, $66, $6c, $79, $63, $3b, $17, $ee, $ba
0d438     9A 95 88 A1 
0d43c     CB E9 12 48 
0d440     65 6D 78 5C 
0d444     2E 15 E8 B4 | 	byte	$9a, $95, $88, $a1, $cb, $e9, $12, $48, $65, $6d, $78, $5c, $2e, $15, $e8, $b4
0d448     9B 93 89 A8 
0d44c     D6 EC 1D 50 
0d450     62 6F 76 55 
0d454     27 13 E0 AF | 	byte	$9b, $93, $89, $a8, $d6, $ec, $1d, $50, $62, $6f, $76, $55, $27, $13, $e0, $af
0d458     A0 90 8D AD 
0d45c     DC EE 26 52 
0d460     5F 72 71 4E 
0d464     23 10 D7 AB | 	byte	$a0, $90, $8d, $ad, $dc, $ee, $26, $52, $5f, $72, $71, $4e, $23, $10, $d7, $ab
0d468     A2 8D 90 B8 
0d46c     DD F5 29 54 
0d470     5E 74 6E 42 
0d474     22 07 D3 AB | 	byte	$a2, $8d, $90, $b8, $dd, $f5, $29, $54, $5e, $74, $6e, $42, $22, $07, $d3, $ab
0d478     A2 8C 95 C4 
0d47c     DF FB 33 54 
0d480     60 74 68 38 
0d484     21 01 C9 AD | 	byte	$a2, $8c, $95, $c4, $df, $fb, $33, $54, $60, $74, $68, $38, $21, $01, $c9, $ad
0d488     9E 8E 9D CC 
0d48c     E0 03 39 51 
0d490     63 71 60 32 
0d494     20 FA C8 B0 | 	byte	$9e, $8e, $9d, $cc, $e0, $03, $39, $51, $63, $71, $60, $32, $20, $fa, $c8, $b0
0d498     9B 90 A7 D1 
0d49c     E2 09 3A 4F 
0d4a0     67 6F 51 2F 
0d4a4     19 F6 C3 B1 | 	byte	$9b, $90, $a7, $d1, $e2, $09, $3a, $4f, $67, $6f, $51, $2f, $19, $f6, $c3, $b1
0d4a8     98 93 B1 D2 
0d4ac     E8 0D 3E 50 
0d4b0     69 6B 49 2C 
0d4b4     18 EF C2 B0 | 	byte	$98, $93, $b1, $d2, $e8, $0d, $3e, $50, $69, $6b, $49, $2c, $18, $ef, $c2, $b0
0d4b8     97 99 BB D5 
0d4bc     EB 16 3C 51 
0d4c0     68 65 3F 29 
0d4c4     13 E8 C4 AC | 	byte	$97, $99, $bb, $d5, $eb, $16, $3c, $51, $68, $65, $3f, $29, $13, $e8, $c4, $ac
0d4c8     98 9F C4 D6 
0d4cc     F0 1C 3B 55 
0d4d0     66 5B 3A 28 
0d4d4     0E E5 C3 A8 | 	byte	$98, $9f, $c4, $d6, $f0, $1c, $3b, $55, $66, $5b, $3a, $28, $0e, $e5, $c3, $a8
0d4d8     9C AA C6 DB 
0d4dc     F5 1B 3D 57 
0d4e0     63 51 39 23 
0d4e4     0C E2 C0 A9 | 	byte	$9c, $aa, $c6, $db, $f5, $1b, $3d, $57, $63, $51, $39, $23, $0c, $e2, $c0, $a9
0d4e8     A0 B2 C9 E0 
0d4ec     F9 1E 3E 58 
0d4f0     5C 4A 36 1F 
0d4f4     06 E1 BC A8 | 	byte	$a0, $b2, $c9, $e0, $f9, $1e, $3e, $58, $5c, $4a, $36, $1f, $06, $e1, $bc, $a8
0d4f8     A8 B9 CC E2 
0d4fc     FB 1E 43 58 
0d500     53 44 31 1A 
0d504     03 E1 BA A9 | 	byte	$a8, $b9, $cc, $e2, $fb, $1e, $43, $58, $53, $44, $31, $1a, $03, $e1, $ba, $a9
0d508     B0 BE CF E9 
0d50c     FD 1F 47 55 
0d510     4A 41 2E 15 
0d514     02 DE B7 AD | 	byte	$b0, $be, $cf, $e9, $fd, $1f, $47, $55, $4a, $41, $2e, $15, $02, $de, $b7, $ad
0d518     B9 C0 D5 EB 
0d51c     FE 24 4A 50 
0d520     43 3E 28 13 
0d524     02 DC B5 B4 | 	byte	$b9, $c0, $d5, $eb, $fe, $24, $4a, $50, $43, $3e, $28, $13, $02, $dc, $b5, $b4
0d528     C0 C4 D9 EE 
0d52c     FE 27 4A 48 
0d530     3E 3A 24 11 
0d534     01 D5 B6 BD | 	byte	$c0, $c4, $d9, $ee, $fe, $27, $4a, $48, $3e, $3a, $24, $11, $01, $d5, $b6, $bd
0d538     C3 C6 DF EE 
0d53c     FE 2E 49 3E 
0d540     3D 37 1D 12 
0d544     FE CE B9 C7 | 	byte	$c3, $c6, $df, $ee, $fe, $2e, $49, $3e, $3d, $37, $1d, $12, $fe, $ce, $b9, $c7
0d548     C3 CC E5 EC 
0d54c     04 34 44 36 
0d550     3D 33 19 16 
0d554     F9 CA C0 CD | 	byte	$c3, $cc, $e5, $ec, $04, $34, $44, $36, $3d, $33, $19, $16, $f9, $ca, $c0, $cd
0d558     C3 D0 E9 E9 
0d55c     09 3B 3C 32 
0d560     3D 2C 16 19 
0d564     F0 C7 CB D1 | 	byte	$c3, $d0, $e9, $e9, $09, $3b, $3c, $32, $3d, $2c, $16, $19, $f0, $c7, $cb, $d1
0d568     C5 D8 EA E7 
0d56c     14 3B 30 30 
0d570     3A 27 17 19 
0d574     EE C6 D3 CF | 	byte	$c5, $d8, $ea, $e7, $14, $3b, $30, $30, $3a, $27, $17, $19, $ee, $c6, $d3, $cf
0d578     C7 DE E8 EA 
0d57c     17 38 29 31 
0d580     37 20 1B 16 
0d584     E6 CA DB CE | 	byte	$c7, $de, $e8, $ea, $17, $38, $29, $31, $37, $20, $1b, $16, $e6, $ca, $db, $ce
0d588     CA E2 E3 ED 
0d58c     1F 32 22 32 
0d590     33 1B 1E 10 
0d594     DF D2 DE CD | 	byte	$ca, $e2, $e3, $ed, $1f, $32, $22, $32, $33, $1b, $1e, $10, $df, $d2, $de, $cd
0d598     CF E6 E0 F5 
0d59c     20 29 22 32 
0d5a0     2E 1A 21 07 
0d5a4     DE DD DF CE | 	byte	$cf, $e6, $e0, $f5, $20, $29, $22, $32, $2e, $1a, $21, $07, $de, $dd, $df, $ce
0d5a8     D6 E6 DF FD 
0d5ac     22 1F 21 32 
0d5b0     27 1B 20 04 
0d5b4     DE E4 DE CF | 	byte	$d6, $e6, $df, $fd, $22, $1f, $21, $32, $27, $1b, $20, $04, $de, $e4, $de, $cf
0d5b8     DA E3 E1 FF 
0d5bc     20 1A 23 31 
0d5c0     23 1F 1E FC 
0d5c4     E3 E8 DC D0 | 	byte	$da, $e3, $e1, $ff, $20, $1a, $23, $31, $23, $1f, $1e, $fc, $e3, $e8, $dc, $d0
0d5c8     DF E0 E3 06 
0d5cc     19 16 25 2E 
0d5d0     20 20 1B F7 
0d5d4     EA EA DA D4 | 	byte	$df, $e0, $e3, $06, $19, $16, $25, $2e, $20, $20, $1b, $f7, $ea, $ea, $da, $d4
0d5d8     E0 E0 E7 0A 
0d5dc     12 16 27 2A 
0d5e0     20 20 16 F8 
0d5e4     F0 EA DA D8 | 	byte	$e0, $e0, $e7, $0a, $12, $16, $27, $2a, $20, $20, $16, $f8, $f0, $ea, $da, $d8
0d5e8     E0 E1 ED 08 
0d5ec     0E 16 28 26 
0d5f0     21 1F 13 F9 
0d5f4     F3 E9 D8 DB | 	byte	$e0, $e1, $ed, $08, $0e, $16, $28, $26, $21, $1f, $13, $f9, $f3, $e9, $d8, $db
0d5f8     DF E1 F0 04 
0d5fc     0C 17 26 23 
0d600     20 1E 0D FF 
0d604     F4 E8 DA DD | 	byte	$df, $e1, $f0, $04, $0c, $17, $26, $23, $20, $1e, $0d, $ff, $f4, $e8, $da, $dd
0d608     E0 E1 F3 FF 
0d60c     0C 19 24 23 
0d610     1F 1D 0C 02 
0d614     F3 E6 DC DC | 	byte	$e0, $e1, $f3, $ff, $0c, $19, $24, $23, $1f, $1d, $0c, $02, $f3, $e6, $dc, $dc
0d618     E2 E3 F2 FD 
0d61c     0C 19 22 24 
0d620     1D 1C 0F 03 
0d624     F4 E5 DE DC | 	byte	$e2, $e3, $f2, $fd, $0c, $19, $22, $24, $1d, $1c, $0f, $03, $f4, $e5, $de, $dc
0d628     E4 E5 EF FC 
0d62c     0D 1B 21 24 
0d630     1C 1B 12 03 
0d634     F2 E5 DF DD | 	byte	$e4, $e5, $ef, $fc, $0d, $1b, $21, $24, $1c, $1b, $12, $03, $f2, $e5, $df, $dd
0d638     E4 E6 EC FD 
0d63c     0E 1C 21 22 
0d640     1C 1A 15 02 
0d644     F1 E5 DE E0 | 	byte	$e4, $e6, $ec, $fd, $0e, $1c, $21, $22, $1c, $1a, $15, $02, $f1, $e5, $de, $e0
0d648     E4 E5 EB 00 
0d64c     10 1B 22 20 
0d650     1C 1C 17 00 
0d654     F0 E5 DD E2 | 	byte	$e4, $e5, $eb, $00, $10, $1b, $22, $20, $1c, $1c, $17, $00, $f0, $e5, $dd, $e2
0d658     E4 E2 EA 00 
0d65c     11 1A 22 1D 
0d660     1C 20 15 FD 
0d664     EE E4 DE E3 | 	byte	$e4, $e2, $ea, $00, $11, $1a, $22, $1d, $1c, $20, $15, $fd, $ee, $e4, $de, $e3
0d668     E3 DE ED 02 
0d66c     11 1D 21 1C 
0d670     1E 24 12 FC 
0d674     EE E3 DF E4 | 	byte	$e3, $de, $ed, $02, $11, $1d, $21, $1c, $1e, $24, $12, $fc, $ee, $e3, $df, $e4
0d678     E1 DB ED 05 
0d67c     11 1E 20 1C 
0d680     21 25 11 F9 
0d684     F0 E1 E1 E4 | 	byte	$e1, $db, $ed, $05, $11, $1e, $20, $1c, $21, $25, $11, $f9, $f0, $e1, $e1, $e4
0d688     DC DB F0 08 
0d68c     11 20 1E 1C 
0d690     27 25 0D F7 
0d694     EE E0 E2 E4 | 	byte	$dc, $db, $f0, $08, $11, $20, $1e, $1c, $27, $25, $0d, $f7, $ee, $e0, $e2, $e4
0d698     D6 DB F5 08 
0d69c     13 20 1D 1D 
0d6a0     2C 23 09 F8 
0d6a4     EB E0 E3 E1 | 	byte	$d6, $db, $f5, $08, $13, $20, $1d, $1d, $2c, $23, $09, $f8, $eb, $e0, $e3, $e1
0d6a8     D2 DF F6 08 
0d6ac     16 1F 1D 20 
0d6b0     2F 1F 08 F8 
0d6b4     E8 E1 E3 DE | 	byte	$d2, $df, $f6, $08, $16, $1f, $1d, $20, $2f, $1f, $08, $f8, $e8, $e1, $e3, $de
0d6b8     CF E3 FB 08 
0d6bc     1A 1E 1D 25 
0d6c0     31 1E 04 F7 
0d6c4     E6 E3 E4 D8 | 	byte	$cf, $e3, $fb, $08, $1a, $1e, $1d, $25, $31, $1e, $04, $f7, $e6, $e3, $e4, $d8
0d6c8     D0 E5 FE 09 
0d6cc     1C 1D 1D 2B 
0d6d0     30 19 02 F5 
0d6d4     E3 E2 E2 D1 | 	byte	$d0, $e5, $fe, $09, $1c, $1d, $1d, $2b, $30, $19, $02, $f5, $e3, $e2, $e2, $d1
0d6d8     D1 E9 FE 0C 
0d6dc     1C 1D 1F 31 
0d6e0     2D 16 01 F1 
0d6e4     E3 E2 E0 CC | 	byte	$d1, $e9, $fe, $0c, $1c, $1d, $1f, $31, $2d, $16, $01, $f1, $e3, $e2, $e0, $cc
0d6e8     D4 EC FF 0E 
0d6ec     1C 1D 23 35 
0d6f0     2C 12 00 EF 
0d6f4     E3 E2 DA CA | 	byte	$d4, $ec, $ff, $0e, $1c, $1d, $23, $35, $2c, $12, $00, $ef, $e3, $e2, $da, $ca
0d6f8     D6 F1 00 11 
0d6fc     1D 1E 2A 36 
0d700     28 0F FF EC 
0d704     E2 E1 D4 CA | 	byte	$d6, $f1, $00, $11, $1d, $1e, $2a, $36, $28, $0f, $ff, $ec, $e2, $e1, $d4, $ca
0d708     D9 F3 02 14 
0d70c     1E 20 2F 36 
0d710     26 0D FC EB 
0d714     E1 DE CF CA | 	byte	$d9, $f3, $02, $14, $1e, $20, $2f, $36, $26, $0d, $fc, $eb, $e1, $de, $cf, $ca
0d718     DC F4 06 15 
0d71c     20 24 33 36 
0d720     21 0D F8 E9 
0d724     DF D8 CD CA | 	byte	$dc, $f4, $06, $15, $20, $24, $33, $36, $21, $0d, $f8, $e9, $df, $d8, $cd, $ca
0d728     E0 F5 0A 17 
0d72c     21 29 34 35 
0d730     1D 0A F5 E8 
0d734     DD D4 CB CB | 	byte	$e0, $f5, $0a, $17, $21, $29, $34, $35, $1d, $0a, $f5, $e8, $dd, $d4, $cb, $cb
0d738     E4 F9 0B 19 
0d73c     23 30 35 34 
0d740     1D 04 F4 E5 
0d744     DB CE CB CD | 	byte	$e4, $f9, $0b, $19, $23, $30, $35, $34, $1d, $04, $f4, $e5, $db, $ce, $cb, $cd
0d748     E5 FD 0C 1D 
0d74c     28 33 35 32 
0d750     1A 00 F3 E2 
0d754     D5 CD CA D0 | 	byte	$e5, $fd, $0c, $1d, $28, $33, $35, $32, $1a, $00, $f3, $e2, $d5, $cd, $ca, $d0
0d758     E6 02 0E 20 
0d75c     2E 34 37 2F 
0d760     18 FB F2 DF 
0d764     CF CB C9 D2 | 	byte	$e6, $02, $0e, $20, $2e, $34, $37, $2f, $18, $fb, $f2, $df, $cf, $cb, $c9, $d2
0d768     EB 06 0F 24 
0d76c     33 34 38 2F 
0d770     12 F9 F0 D9 
0d774     CB CB C8 D2 | 	byte	$eb, $06, $0f, $24, $33, $34, $38, $2f, $12, $f9, $f0, $d9, $cb, $cb, $c8, $d2
0d778     F1 06 13 2A 
0d77c     36 35 39 2D 
0d780     0B F9 EB D4 
0d784     C8 CB C7 D5 | 	byte	$f1, $06, $13, $2a, $36, $35, $39, $2d, $0b, $f9, $eb, $d4, $c8, $cb, $c7, $d5
0d788     F5 07 17 30 
0d78c     38 35 3A 27 
0d790     08 F8 E8 CD 
0d794     C8 CA C6 DB | 	byte	$f5, $07, $17, $30, $38, $35, $3a, $27, $08, $f8, $e8, $cd, $c8, $ca, $c6, $db
0d798     FA 08 1B 35 
0d79c     38 37 3A 22 
0d7a0     05 F6 E1 C8 
0d7a4     C8 C9 C6 DE | 	byte	$fa, $08, $1b, $35, $38, $37, $3a, $22, $05, $f6, $e1, $c8, $c8, $c9, $c6, $de
0d7a8     FD 0A 24 39 
0d7ac     39 39 3A 1D 
0d7b0     02 F4 D8 C4 
0d7b4     C7 C6 C7 E3 | 	byte	$fd, $0a, $24, $39, $39, $39, $3a, $1d, $02, $f4, $d8, $c4, $c7, $c6, $c7, $e3
0d7b8     FF 0E 28 3C 
0d7bc     39 3C 36 19 
0d7c0     00 EF D4 C2 
0d7c4     C5 C3 CC E9 | 	byte	$ff, $0e, $28, $3c, $39, $3c, $36, $19, $00, $ef, $d4, $c2, $c5, $c3, $cc, $e9
0d7c8     00 12 2F 3E 
0d7cc     3B 3E 34 15 
0d7d0     FE E9 CF C1 
0d7d4     C4 C1 D0 EF | 	byte	$00, $12, $2f, $3e, $3b, $3e, $34, $15, $fe, $e9, $cf, $c1, $c4, $c1, $d0, $ef
0d7d8     01 1A 34 3F 
0d7dc     3E 3F 2E 12 
0d7e0     FE E2 CA C0 
0d7e4     C1 C1 D4 F0 | 	byte	$01, $1a, $34, $3f, $3e, $3f, $2e, $12, $fe, $e2, $ca, $c0, $c1, $c1, $d4, $f0
0d7e8     04 1F 38 41 
0d7ec     41 3D 2B 0E 
0d7f0     FB DB C6 BE 
0d7f4     BD C5 D7 F3 | 	byte	$04, $1f, $38, $41, $41, $3d, $2b, $0e, $fb, $db, $c6, $be, $bd, $c5, $d7, $f3
0d7f8     08 26 3C 43 
0d7fc     45 3B 26 0C 
0d800     F6 D7 C3 BC 
0d804     BB C7 DC F3 | 	byte	$08, $26, $3c, $43, $45, $3b, $26, $0c, $f6, $d7, $c3, $bc, $bb, $c7, $dc, $f3
0d808     0F 29 3F 46 
0d80c     46 36 23 0A 
0d810     EF D5 BF B9 
0d814     BA CA E0 F6 | 	byte	$0f, $29, $3f, $46, $46, $36, $23, $0a, $ef, $d5, $bf, $b9, $ba, $ca, $e0, $f6
0d818     13 2D 42 49 
0d81c     45 35 1F 09 
0d820     E9 CF BD B5 
0d824     BC CD E2 F9 | 	byte	$13, $2d, $42, $49, $45, $35, $1f, $09, $e9, $cf, $bd, $b5, $bc, $cd, $e2, $f9
0d828     18 30 45 4C 
0d82c     44 32 1D 04 
0d830     E3 CD B9 B3 
0d834     BD D0 E3 FF | 	byte	$18, $30, $45, $4c, $44, $32, $1d, $04, $e3, $cd, $b9, $b3, $bd, $d0, $e3, $ff
0d838     1E 35 49 4E 
0d83c     42 2F 1B FE 
0d840     E3 C8 B4 B1 
0d844     C0 D1 E7 03 | 	byte	$1e, $35, $49, $4e, $42, $2f, $1b, $fe, $e3, $c8, $b4, $b1, $c0, $d1, $e7, $03
0d848     1F 3A 4C 4E 
0d84c     3F 2E 16 FA 
0d850     DE C2 B1 B2 
0d854     C0 D3 EC 05 | 	byte	$1f, $3a, $4c, $4e, $3f, $2e, $16, $fa, $de, $c2, $b1, $b2, $c0, $d3, $ec, $05
0d858     23 41 50 4D 
0d85c     3F 2B 13 F9 
0d860     DA BE AF B3 
0d864     C1 D6 EF 09 | 	byte	$23, $41, $50, $4d, $3f, $2b, $13, $f9, $da, $be, $af, $b3, $c1, $d6, $ef, $09
0d868     28 45 52 4D 
0d86c     3D 27 0E F6 
0d870     D8 B7 AE B5 
0d874     C3 D9 F4 0C | 	byte	$28, $45, $52, $4d, $3d, $27, $0e, $f6, $d8, $b7, $ae, $b5, $c3, $d9, $f4, $0c
0d878     2A 4C 51 4B 
0d87c     3D 21 0B F2 
0d880     D2 B1 AF B5 
0d884     C4 DF F7 0F | 	byte	$2a, $4c, $51, $4b, $3d, $21, $0b, $f2, $d2, $b1, $af, $b5, $c4, $df, $f7, $0f
0d888     32 50 50 4B 
0d88c     3D 1F 08 F1 
0d890     C8 AD B0 B5 
0d894     C5 E4 F8 12 | 	byte	$32, $50, $50, $4b, $3d, $1f, $08, $f1, $c8, $ad, $b0, $b5, $c5, $e4, $f8, $12
0d898     38 53 4F 4B 
0d89c     3A 18 07 EF 
0d8a0     C2 AC B0 B5 
0d8a4     C8 EB F9 12 | 	byte	$38, $53, $4f, $4b, $3a, $18, $07, $ef, $c2, $ac, $b0, $b5, $c8, $eb, $f9, $12
0d8a8     41 53 4F 4B 
0d8ac     38 12 05 EB 
0d8b0     BB AC B0 B4 
0d8b4     CD EF F9 17 | 	byte	$41, $53, $4f, $4b, $38, $12, $05, $eb, $bb, $ac, $b0, $b4, $cd, $ef, $f9, $17
0d8b8     47 52 4F 4C 
0d8bc     33 10 05 E5 
0d8c0     B5 AE B1 B3 
0d8c4     D1 F1 FA 21 | 	byte	$47, $52, $4f, $4c, $33, $10, $05, $e5, $b5, $ae, $b1, $b3, $d1, $f1, $fa, $21
0d8c8     4E 50 4F 4C 
0d8cc     2B 0E 05 DB 
0d8d0     B0 B0 B0 B4 
0d8d4     D8 F2 FC 29 | 	byte	$4e, $50, $4f, $4c, $2b, $0e, $05, $db, $b0, $b0, $b0, $b4, $d8, $f2, $fc, $29
0d8d8     52 50 51 4B 
0d8dc     24 0E 03 D1 
0d8e0     AD B1 AF B7 
0d8e4     DD F2 00 31 | 	byte	$52, $50, $51, $4b, $24, $0e, $03, $d1, $ad, $b1, $af, $b7, $dd, $f2, $00, $31
0d8e8     53 4F 53 46 
0d8ec     20 0E 00 CE 
0d8f0     AD B1 AC BA 
0d8f4     E4 F1 05 39 | 	byte	$53, $4f, $53, $46, $20, $0e, $00, $ce, $ad, $b1, $ac, $ba, $e4, $f1, $05, $39
0d8f8     52 4E 55 43 
0d8fc     1B 0E F9 C1 
0d900     AE B1 AA C1 
0d904     E6 F1 0B 41 | 	byte	$52, $4e, $55, $43, $1b, $0e, $f9, $c1, $ae, $b1, $aa, $c1, $e6, $f1, $0b, $41
0d908     51 4F 56 3C 
0d90c     19 0F F0 BF 
0d910     AE AF AA C9 
0d914     E7 F1 15 43 | 	byte	$51, $4f, $56, $3c, $19, $0f, $f0, $bf, $ae, $af, $aa, $c9, $e7, $f1, $15, $43
0d918     50 51 55 35 
0d91c     19 0D E6 BB 
0d920     B0 AE AD CB 
0d924     E8 F4 1A 46 | 	byte	$50, $51, $55, $35, $19, $0d, $e6, $bb, $b0, $ae, $ad, $cb, $e8, $f4, $1a, $46
0d928     50 53 51 32 
0d92c     17 0C E2 B9 
0d930     B0 AB B1 D0 
0d934     E8 F6 23 47 | 	byte	$50, $53, $51, $32, $17, $0c, $e2, $b9, $b0, $ab, $b1, $d0, $e8, $f6, $23, $47
0d938     50 56 4E 2D 
0d93c     17 07 DA B9 
0d940     AF A9 B4 D5 
0d944     E7 FE 2B 46 | 	byte	$50, $56, $4e, $2d, $17, $07, $da, $b9, $af, $a9, $b4, $d5, $e7, $fe, $2b, $46
0d948     51 56 48 2A 
0d94c     18 00 D7 B8 
0d950     AD AA BB D4 
0d954     E9 06 2B 48 | 	byte	$51, $56, $48, $2a, $18, $00, $d7, $b8, $ad, $aa, $bb, $d4, $e9, $06, $2b, $48
0d958     53 55 42 28 
0d95c     16 FA D1 B7 
0d960     AC AC BE D7 
0d964     EC 0D 2F 4A | 	byte	$53, $55, $42, $28, $16, $fa, $d1, $b7, $ac, $ac, $be, $d7, $ec, $0d, $2f, $4a
0d968     55 53 41 29 
0d96c     11 F3 CE B6 
0d970     AA B0 C2 D8 
0d974     F2 11 33 49 | 	byte	$55, $53, $41, $29, $11, $f3, $ce, $b6, $aa, $b0, $c2, $d8, $f2, $11, $33, $49
0d978     56 4E 3D 27 
0d97c     0D EB CB B5 
0d980     AA B2 C5 DA 
0d984     F5 16 33 4D | 	byte	$56, $4e, $3d, $27, $0d, $eb, $cb, $b5, $aa, $b2, $c5, $da, $f5, $16, $33, $4d
0d988     55 4C 3A 27 
0d98c     07 E7 CB B0 
0d990     AB B7 C6 DB 
0d994     FD 19 35 4F | 	byte	$55, $4c, $3a, $27, $07, $e7, $cb, $b0, $ab, $b7, $c6, $db, $fd, $19, $35, $4f
0d998     54 47 3A 22 
0d99c     00 E5 CA AF 
0d9a0     AD BA C8 E0 
0d9a4     00 1D 3A 52 | 	byte	$54, $47, $3a, $22, $00, $e5, $ca, $af, $ad, $ba, $c8, $e0, $00, $1d, $3a, $52
0d9a8     52 45 38 1E 
0d9ac     FB E2 C4 AD 
0d9b0     B1 BC C9 E5 
0d9b4     08 1F 3E 52 | 	byte	$52, $45, $38, $1e, $fb, $e2, $c4, $ad, $b1, $bc, $c9, $e5, $08, $1f, $3e, $52
0d9b8     4E 43 37 16 
0d9bc     F8 DF C2 AD 
0d9c0     B4 BE CC EB 
0d9c4     0C 21 41 52 | 	byte	$4e, $43, $37, $16, $f8, $df, $c2, $ad, $b4, $be, $cc, $eb, $0c, $21, $41, $52
0d9c8     4B 41 35 11 
0d9cc     F4 DB BD AF 
0d9d0     B7 BE CF F1 
0d9d4     0F 24 43 50 | 	byte	$4b, $41, $35, $11, $f4, $db, $bd, $af, $b7, $be, $cf, $f1, $0f, $24, $43, $50
0d9d8     48 42 2F 0A 
0d9dc     F1 D9 BB B0 
0d9e0     B9 BE D4 F6 
0d9e4     10 29 47 4E | 	byte	$48, $42, $2f, $0a, $f1, $d9, $bb, $b0, $b9, $be, $d4, $f6, $10, $29, $47, $4e
0d9e8     45 41 29 06 
0d9ec     EE D8 B8 B3 
0d9f0     BB C0 D8 FC 
0d9f4     13 2B 48 4B | 	byte	$45, $41, $29, $06, $ee, $d8, $b8, $b3, $bb, $c0, $d8, $fc, $13, $2b, $48, $4b
0d9f8     44 3F 24 00 
0d9fc     ED D3 B7 B6 
0da00     BC C1 DE 01 
0da04     13 30 48 48 | 	byte	$44, $3f, $24, $00, $ed, $d3, $b7, $b6, $bc, $c1, $de, $01, $13, $30, $48, $48
0da08     44 3E 1D FF 
0da0c     EB CE B8 B9 
0da10     BC C3 E6 03 
0da14     17 32 47 46 | 	byte	$44, $3e, $1d, $ff, $eb, $ce, $b8, $b9, $bc, $c3, $e6, $03, $17, $32, $47, $46
0da18     44 39 16 FC 
0da1c     E9 CC B9 BB 
0da20     BD C9 E9 06 
0da24     1A 35 46 44 | 	byte	$44, $39, $16, $fc, $e9, $cc, $b9, $bb, $bd, $c9, $e9, $06, $1a, $35, $46, $44
0da28     43 33 14 F9 
0da2c     E7 C9 BB BC 
0da30     BD CD F0 08 
0da34     1A 37 44 43 | 	byte	$43, $33, $14, $f9, $e7, $c9, $bb, $bc, $bd, $cd, $f0, $08, $1a, $37, $44, $43
0da38     42 30 0E F6 
0da3c     E3 C7 BD BD 
0da40     BF D3 F5 0B 
0da44     20 39 42 43 | 	byte	$42, $30, $0e, $f6, $e3, $c7, $bd, $bd, $bf, $d3, $f5, $0b, $20, $39, $42, $43
0da48     41 29 0A F5 
0da4c     E0 C8 BF BD 
0da50     C1 DB F8 0D 
0da54     21 38 40 42 | 	byte	$41, $29, $0a, $f5, $e0, $c8, $bf, $bd, $c1, $db, $f8, $0d, $21, $38, $40, $42
0da58     3D 24 06 F2 
0da5c     DC C7 C0 BD 
0da60     C5 DE FC 0D 
0da64     24 38 3F 42 | 	byte	$3d, $24, $06, $f2, $dc, $c7, $c0, $bd, $c5, $de, $fc, $0d, $24, $38, $3f, $42
0da68     39 1E 02 F1 
0da6c     DA C9 C1 BE 
0da70     C9 E5 FD 11 
0da74     25 36 3F 41 | 	byte	$39, $1e, $02, $f1, $da, $c9, $c1, $be, $c9, $e5, $fd, $11, $25, $36, $3f, $41
0da78     34 1A 02 EE 
0da7c     DA CA C1 C0 
0da80     CF E9 FF 13 
0da84     26 35 3F 3F | 	byte	$34, $1a, $02, $ee, $da, $ca, $c1, $c0, $cf, $e9, $ff, $13, $26, $35, $3f, $3f
0da88     30 15 FE EC 
0da8c     D9 CB C1 C2 
0da90     D4 EC 03 15 
0da94     27 34 3F 3C | 	byte	$30, $15, $fe, $ec, $d9, $cb, $c1, $c2, $d4, $ec, $03, $15, $27, $34, $3f, $3c
0da98     2A 11 FD EA 
0da9c     DB CB C0 C5 
0daa0     D9 EF 05 17 
0daa4     25 35 3F 38 | 	byte	$2a, $11, $fd, $ea, $db, $cb, $c0, $c5, $d9, $ef, $05, $17, $25, $35, $3f, $38
0daa8     26 0F F9 E9 
0daac     DC CB C1 CA 
0dab0     DC F2 07 17 
0dab4     24 36 3E 35 | 	byte	$26, $0f, $f9, $e9, $dc, $cb, $c1, $ca, $dc, $f2, $07, $17, $24, $36, $3e, $35
0dab8     21 0C F7 E8 
0dabc     DD C9 C2 CE 
0dac0     E1 F5 0A 17 
0dac4     24 37 3C 2F | 	byte	$21, $0c, $f7, $e8, $dd, $c9, $c2, $ce, $e1, $f5, $0a, $17, $24, $37, $3c, $2f
0dac8     1F 0A F4 EA 
0dacc     DD C8 C5 D4 
0dad0     E3 F7 0C 15 
0dad4     24 38 38 2A | 	byte	$1f, $0a, $f4, $ea, $dd, $c8, $c5, $d4, $e3, $f7, $0c, $15, $24, $38, $38, $2a
0dad8     1C 06 F4 EB 
0dadc     DB C8 C9 D7 
0dae0     E5 FC 0D 14 
0dae4     24 39 34 26 | 	byte	$1c, $06, $f4, $eb, $db, $c8, $c9, $d7, $e5, $fc, $0d, $14, $24, $39, $34, $26
0dae8     19 05 F3 ED 
0daec     DB C7 CF DB 
0daf0     E9 FD 0D 12 
0daf4     26 38 30 24 | 	byte	$19, $05, $f3, $ed, $db, $c7, $cf, $db, $e9, $fd, $0d, $12, $26, $38, $30, $24
0daf8     16 01 F4 EF 
0dafc     D7 C8 D3 DE 
0db00     EA 01 0B 11 
0db04     2A 37 2A 21 | 	byte	$16, $01, $f4, $ef, $d7, $c8, $d3, $de, $ea, $01, $0b, $11, $2a, $37, $2a, $21
0db08     15 FE F6 EE 
0db0c     D4 CA D8 DF 
0db10     ED 04 09 13 
0db14     2B 33 25 21 | 	byte	$15, $fe, $f6, $ee, $d4, $ca, $d8, $df, $ed, $04, $09, $13, $2b, $33, $25, $21
0db18     11 FD F9 EC 
0db1c     D4 CE DC E0 
0db20     F1 04 06 15 
0db24     2D 2F 23 1F | 	byte	$11, $fd, $f9, $ec, $d4, $ce, $dc, $e0, $f1, $04, $06, $15, $2d, $2f, $23, $1f
0db28     0E FB FB EA 
0db2c     D3 D3 DE E2 
0db30     F4 04 04 18 
0db34     2D 2A 21 1E | 	byte	$0e, $fb, $fb, $ea, $d3, $d3, $de, $e2, $f4, $04, $04, $18, $2d, $2a, $21, $1e
0db38     0A FD FC E5 
0db3c     D3 D9 DF E3 
0db40     F7 02 04 1C 
0db44     2C 24 21 1B | 	byte	$0a, $fd, $fc, $e5, $d3, $d9, $df, $e3, $f7, $02, $04, $1c, $2c, $24, $21, $1b
0db48     07 FF FB E5 
0db4c     D5 DD DF E7 
0db50     FA FE 06 1D 
0db54     2A 21 21 19 | 	byte	$07, $ff, $fb, $e5, $d5, $dd, $df, $e7, $fa, $fe, $06, $1d, $2a, $21, $21, $19
0db58     06 03 FA E3 
0db5c     D9 E0 DF E9 
0db60     FA FC 07 1E 
0db64     25 1F 21 15 | 	byte	$06, $03, $fa, $e3, $d9, $e0, $df, $e9, $fa, $fc, $07, $1e, $25, $1f, $21, $15
0db68     06 05 F9 E1 
0db6c     DD E2 E0 EB 
0db70     F9 FA 0B 1E 
0db74     21 1E 1F 13 | 	byte	$06, $05, $f9, $e1, $dd, $e2, $e0, $eb, $f9, $fa, $0b, $1e, $21, $1e, $1f, $13
0db78     08 06 F5 E2 
0db7c     E1 E2 E2 EE 
0db80     F7 FA 0E 1D 
0db84     1E 1E 1E 10 | 	byte	$08, $06, $f5, $e2, $e1, $e2, $e2, $ee, $f7, $fa, $0e, $1d, $1e, $1e, $1e, $10
0db88     0A 05 F3 E4 
0db8c     E3 E1 E2 F0 
0db90     F5 FC 0E 1B 
0db94     1C 1F 1B 10 | 	byte	$0a, $05, $f3, $e4, $e3, $e1, $e2, $f0, $f5, $fc, $0e, $1b, $1c, $1f, $1b, $10
0db98     0C 02 F1 E7 
0db9c     E4 E1 E6 F0 
0dba0     F3 FF 0F 18 
0dba4     1C 1E 1A 11 | 	byte	$0c, $02, $f1, $e7, $e4, $e1, $e6, $f0, $f3, $ff, $0f, $18, $1c, $1e, $1a, $11
0dba8     0C 01 F1 EA 
0dbac     E4 E2 E7 EE 
0dbb0     F3 00 0F 15 
0dbb4     1C 1D 18 13 | 	byte	$0c, $01, $f1, $ea, $e4, $e2, $e7, $ee, $f3, $00, $0f, $15, $1c, $1d, $18, $13
0dbb8     0D FF F2 EC 
0dbbc     E4 E3 E9 EC 
0dbc0     F4 02 0D 14 
0dbc4     1C 1C 17 15 | 	byte	$0d, $ff, $f2, $ec, $e4, $e3, $e9, $ec, $f4, $02, $0d, $14, $1c, $1c, $17, $15
0dbc8     0B FD F4 EB 
0dbcc     E4 E4 E8 EA 
0dbd0     F6 02 0A 15 
0dbd4     1C 1B 18 15 | 	byte	$0b, $fd, $f4, $eb, $e4, $e4, $e8, $ea, $f6, $02, $0a, $15, $1c, $1b, $18, $15
0dbd8     08 FE F6 EB 
0dbdc     E4 E5 E6 EB 
0dbe0     F9 01 09 16 
0dbe4     1B 1A 1A 15 | 	byte	$08, $fe, $f6, $eb, $e4, $e5, $e6, $eb, $f9, $01, $09, $16, $1b, $1a, $1a, $15
0dbe8     07 FF F7 EA 
0dbec     E5 E6 E5 ED 
0dbf0     FA 00 08 18 
0dbf4     1A 1A 1D 13 | 	byte	$07, $ff, $f7, $ea, $e5, $e6, $e5, $ed, $fa, $00, $08, $18, $1a, $1a, $1d, $13
0dbf8     06 02 F6 E8 
0dbfc     E6 E5 E3 EE 
0dc00     FA FD 09 18 
0dc04     19 1C 1D 10 | 	byte	$06, $02, $f6, $e8, $e6, $e5, $e3, $ee, $fa, $fd, $09, $18, $19, $1c, $1d, $10
0dc08     06 04 F6 E7 
0dc0c     E7 E3 E3 F1 
0dc10     F9 FB 0B 18 
0dc14     18 1E 1D 0D | 	byte	$06, $04, $f6, $e7, $e7, $e3, $e3, $f1, $f9, $fb, $0b, $18, $18, $1e, $1d, $0d
0dc18     08 05 F2 E8 
0dc1c     E7 E0 E3 F4 
0dc20     F7 FA 0F 18 
0dc24     18 20 1B 0B | 	byte	$08, $05, $f2, $e8, $e7, $e0, $e3, $f4, $f7, $fa, $0f, $18, $18, $20, $1b, $0b
0dc28     0B 05 F1 E8 
0dc2c     E7 DE E5 F5 
0dc30     F4 FB 11 17 
0dc34     1A 23 18 0B | 	byte	$0b, $05, $f1, $e8, $e7, $de, $e5, $f5, $f4, $fb, $11, $17, $1a, $23, $18, $0b
0dc38     0E 04 EE E9 
0dc3c     E5 DC E8 F4 
0dc40     F1 FC 12 16 
0dc44     1C 23 16 0C | 	byte	$0e, $04, $ee, $e9, $e5, $dc, $e8, $f4, $f1, $fc, $12, $16, $1c, $23, $16, $0c
0dc48     10 00 ED EA 
0dc4c     E1 DC EC F2 
0dc50     EF 00 13 16 
0dc54     21 23 13 0E | 	byte	$10, $00, $ed, $ea, $e1, $dc, $ec, $f2, $ef, $00, $13, $16, $21, $23, $13, $0e
0dc58     11 FD ED EA 
0dc5c     DE DE ED F0 
0dc60     EF 03 13 17 
0dc64     24 21 12 12 | 	byte	$11, $fd, $ed, $ea, $de, $de, $ed, $f0, $ef, $03, $13, $17, $24, $21, $12, $12
0dc68     10 FB ED E8 
0dc6c     DB E0 EF EC 
0dc70     F1 06 13 19 
0dc74     26 1F 12 15 | 	byte	$10, $fb, $ed, $e8, $db, $e0, $ef, $ec, $f1, $06, $13, $19, $26, $1f, $12, $15
0dc78     0E F8 ED E6 
0dc7c     D9 E3 EE E9 
0dc80     F2 0A 13 1D 
0dc84     27 1C 13 18 | 	byte	$0e, $f8, $ed, $e6, $d9, $e3, $ee, $e9, $f2, $0a, $13, $1d, $27, $1c, $13, $18
0dc88     0C F6 ED E1 
0dc8c     D9 E5 EC E8 
0dc90     F7 0A 13 21 
0dc94     26 19 16 19 | 	byte	$0c, $f6, $ed, $e1, $d9, $e5, $ec, $e8, $f7, $0a, $13, $21, $26, $19, $16, $19
0dc98     0A F5 EB DF 
0dc9c     DA E7 E9 E8 
0dca0     F9 0B 16 23 
0dca4     24 19 19 17 | 	byte	$0a, $f5, $eb, $df, $da, $e7, $e9, $e8, $f9, $0b, $16, $23, $24, $19, $19, $17
0dca8     05 F3 E9 DC 
0dcac     DD E7 E6 E9 
0dcb0     FB 0D 18 26 
0dcb4     23 19 1C 16 | 	byte	$05, $f3, $e9, $dc, $dd, $e7, $e6, $e9, $fb, $0d, $18, $26, $23, $19, $1c, $16
0dcb8     02 F4 E6 DA 
0dcbc     DE E6 E3 EC 
0dcc0     FF 0D 1C 26 
0dcc4     20 1B 1D 13 | 	byte	$02, $f4, $e6, $da, $de, $e6, $e3, $ec, $ff, $0d, $1c, $26, $20, $1b, $1d, $13
0dcc8     00 F2 E2 DA 
0dccc     E0 E4 E3 EF 
0dcd0     00 10 20 26 
0dcd4     1F 1D 1D 0F | 	byte	$00, $f2, $e2, $da, $e0, $e4, $e3, $ef, $00, $10, $20, $26, $1f, $1d, $1d, $0f
0dcd8     FF EF E0 DA 
0dcdc     E1 E1 E4 F1 
0dce0     02 14 22 25 
0dce4     1F 21 1C 0D | 	byte	$ff, $ef, $e0, $da, $e1, $e1, $e4, $f1, $02, $14, $22, $25, $1f, $21, $1c, $0d
0dce8     FE EB DD DC 
0dcec     E0 DF E6 F4 
0dcf0     02 17 23 23 
0dcf4     20 22 19 0B | 	byte	$fe, $eb, $dd, $dc, $e0, $df, $e6, $f4, $02, $17, $23, $23, $20, $22, $19, $0b
0dcf8     FC E6 DC DD 
0dcfc     DF DE E8 F6 
0dd00     05 1C 23 22 
0dd04     22 22 16 0A | 	byte	$fc, $e6, $dc, $dd, $df, $de, $e8, $f6, $05, $1c, $23, $22, $22, $22, $16, $0a
0dd08     F8 E2 DC DD 
0dd0c     DB DE EA F6 
0dd10     0A 1F 23 23 
0dd14     25 21 15 08 | 	byte	$f8, $e2, $dc, $dd, $db, $de, $ea, $f6, $0a, $1f, $23, $23, $25, $21, $15, $08
0dd18     F6 E0 DD DD 
0dd1c     D9 DF EC F9 
0dd20     0E 20 22 23 
0dd24     27 1E 13 07 | 	byte	$f6, $e0, $dd, $dd, $d9, $df, $ec, $f9, $0e, $20, $22, $23, $27, $1e, $13, $07
0dd28     F0 DE DE DB 
0dd2c     D8 E2 EE F9 
0dd30     12 22 22 26 
0dd34     28 1C 12 04 | 	byte	$f0, $de, $de, $db, $d8, $e2, $ee, $f9, $12, $22, $22, $26, $28, $1c, $12, $04
0dd38     ED DE DE D9 
0dd3c     D8 E5 EF FF 
0dd40     16 22 23 29 
0dd44     27 1B 10 01 | 	byte	$ed, $de, $de, $d9, $d8, $e5, $ef, $ff, $16, $22, $23, $29, $27, $1b, $10, $01
0dd48     E8 DF DD D6 
0dd4c     D9 E7 F0 00 
0dd50     1A 22 24 2A 
0dd54     26 19 0F FD | 	byte	$e8, $df, $dd, $d6, $d9, $e7, $f0, $00, $1a, $22, $24, $2a, $26, $19, $0f, $fd
0dd58     E5 DE DB D4 
0dd5c     DA E8 F1 06 
0dd60     1B 21 26 2C 
0dd64     24 18 0E F9 | 	byte	$e5, $de, $db, $d4, $da, $e8, $f1, $06, $1b, $21, $26, $2c, $24, $18, $0e, $f9
0dd68     E3 DE D9 D3 
0dd6c     DE E9 F4 09 
0dd70     1D 22 28 2C 
0dd74     23 16 0A F4 | 	byte	$e3, $de, $d9, $d3, $de, $e9, $f4, $09, $1d, $22, $28, $2c, $23, $16, $0a, $f4
0dd78     E2 DE D6 D4 
0dd7c     DF EA F6 0D 
0dd80     1E 22 2B 2C 
0dd84     20 15 08 F0 | 	byte	$e2, $de, $d6, $d4, $df, $ea, $f6, $0d, $1e, $22, $2b, $2c, $20, $15, $08, $f0
0dd88     E2 DC D4 D4 
0dd8c     E1 EC FA 12 
0dd90     00 00 00 00 
0dd94     28 03 F6 DE | 	byte	$e2, $dc, $d4, $d4, $e1, $ec, $fa, $12, $00, $00, $00, $00, $28, $03, $f6, $de
0dd98     B7 E4 04 27 
0dd9c     5A 5C 59 11 
0dda0     E8 BB A0 A2 
0dda4     CE 22 74 66 | 	byte	$b7, $e4, $04, $27, $5a, $5c, $59, $11, $e8, $bb, $a0, $a2, $ce, $22, $74, $66
0dda8     1B D4 BE BD 
0ddac     D5 DD ED FC 
0ddb0     F2 13 2C 34 
0ddb4     2A 05 FD D1 | 	byte	$1b, $d4, $be, $bd, $d5, $dd, $ed, $fc, $f2, $13, $2c, $34, $2a, $05, $fd, $d1
0ddb8     B0 DA FC 26 
0ddbc     62 61 5E 16 
0ddc0     DB AB A7 A5 
0ddc4     E0 30 7D 67 | 	byte	$b0, $da, $fc, $26, $62, $61, $5e, $16, $db, $ab, $a7, $a5, $e0, $30, $7d, $67
0ddc8     0F CE B4 CC 
0ddcc     B9 CA F0 04 
0ddd0     1F 27 23 1A 
0ddd4     30 09 FC C3 | 	byte	$0f, $ce, $b4, $cc, $b9, $ca, $f0, $04, $1f, $27, $23, $1a, $30, $09, $fc, $c3
0ddd8     BB D1 FF 2B 
0dddc     60 6E 54 1D 
0dde0     C4 8F 9E C8 
0dde4     1B 6D 7C 53 | 	byte	$bb, $d1, $ff, $2b, $60, $6e, $54, $1d, $c4, $8f, $9e, $c8, $1b, $6d, $7c, $53
0dde8     DB B6 88 8C 
0ddec     83 93 CF 41 
0ddf0     6E 7D 76 57 
0ddf4     52 03 B8 86 | 	byte	$db, $b6, $88, $8c, $83, $93, $cf, $41, $6e, $7d, $76, $57, $52, $03, $b8, $86
0ddf8     9A C8 0C 5B 
0ddfc     7F 7F 52 E7 
0de00     89 80 80 CD 
0de04     4C 7F 7F 4B | 	byte	$9a, $c8, $0c, $5b, $7f, $7f, $52, $e7, $89, $80, $80, $cd, $4c, $7f, $7f, $4b
0de08     D3 AD 98 88 
0de0c     82 82 BA 2F 
0de10     6C 7F 6A 5C 
0de14     36 1C D4 87 | 	byte	$d3, $ad, $98, $88, $82, $82, $ba, $2f, $6c, $7f, $6a, $5c, $36, $1c, $d4, $87
0de18     96 B8 EB 46 
0de1c     76 7F 59 F9 
0de20     A9 80 80 AD 
0de24     39 7F 7F 55 | 	byte	$96, $b8, $eb, $46, $76, $7f, $59, $f9, $a9, $80, $80, $ad, $39, $7f, $7f, $55
0de28     F1 B9 9C 8D 
0de2c     81 81 A1 18 
0de30     63 7F 6B 51 
0de34     32 14 E9 9F | 	byte	$f1, $b9, $9c, $8d, $81, $81, $a1, $18, $63, $7f, $6b, $51, $32, $14, $e9, $9f
0de38     A2 B9 F0 2F 
0de3c     65 70 50 FC 
0de40     BB 82 81 BD 
0de44     31 7F 7F 38 | 	byte	$a2, $b9, $f0, $2f, $65, $70, $50, $fc, $bb, $82, $81, $bd, $31, $7f, $7f, $38
0de48     08 D2 B3 8D 
0de4c     80 82 A2 01 
0de50     55 72 7F 53 
0de54     32 0B E8 C4 | 	byte	$08, $d2, $b3, $8d, $80, $82, $a2, $01, $55, $72, $7f, $53, $32, $0b, $e8, $c4
0de58     B5 C2 F5 31 
0de5c     54 5C 34 08 
0de60     BB 9D 8E DC 
0de64     3F 77 64 28 | 	byte	$b5, $c2, $f5, $31, $54, $5c, $34, $08, $bb, $9d, $8e, $dc, $3f, $77, $64, $28
0de68     FE E8 C6 92 
0de6c     80 91 B9 F4 
0de70     43 66 6E 56 
0de74     34 02 DD DC | 	byte	$fe, $e8, $c6, $92, $80, $91, $b9, $f4, $43, $66, $6e, $56, $34, $02, $dd, $dc
0de78     D9 D1 FB 2D 
0de7c     42 41 23 ED 
0de80     BE A9 B0 F8 
0de84     52 66 38 FD | 	byte	$d9, $d1, $fb, $2d, $42, $41, $23, $ed, $be, $a9, $b0, $f8, $52, $66, $38, $fd
0de88     F4 FA DB 9A 
0de8c     85 9A D5 03 
0de90     43 52 5E 4D 
0de94     38 F6 CD EE | 	byte	$f4, $fa, $db, $9a, $85, $9a, $d5, $03, $43, $52, $5e, $4d, $38, $f6, $cd, $ee
0de98     F5 FE 07 21 
0de9c     29 24 FB D1 
0dea0     BE B1 D1 20 
0dea4     68 61 19 D9 | 	byte	$f5, $fe, $07, $21, $29, $24, $fb, $d1, $be, $b1, $d1, $20, $68, $61, $19, $d9
0dea8     DF 03 F9 AC 
0deac     94 A4 E0 1E 
0deb0     37 48 56 40 
0deb4     2C E9 C1 EB | 	byte	$df, $03, $f9, $ac, $94, $a4, $e0, $1e, $37, $48, $56, $40, $2c, $e9, $c1, $eb
0deb8     FE 0E 2B 22 
0debc     28 05 E4 B9 
0dec0     BB BC F0 45 
0dec4     7D 5D F4 BF | 	byte	$fe, $0e, $2b, $22, $28, $05, $e4, $b9, $bb, $bc, $f0, $45, $7d, $5d, $f4, $bf
0dec8     C7 FA F9 CC 
0decc     A4 B4 DC 29 
0ded0     30 39 4D 3A 
0ded4     2F DB C1 DC | 	byte	$c7, $fa, $f9, $cc, $a4, $b4, $dc, $29, $30, $39, $4d, $3a, $2f, $db, $c1, $dc
0ded8     03 16 43 36 
0dedc     28 F6 D5 9D 
0dee0     AD C1 16 69 
0dee4     7F 6B E5 AA | 	byte	$03, $16, $43, $36, $28, $f6, $d5, $9d, $ad, $c1, $16, $69, $7f, $6b, $e5, $aa
0dee8     A3 EA E3 D1 
0deec     BF D0 EB 2D 
0def0     3A 33 44 2F 
0def4     25 C7 CC DF | 	byte	$a3, $ea, $e3, $d1, $bf, $d0, $eb, $2d, $3a, $33, $44, $2f, $25, $c7, $cc, $df
0def8     05 27 4B 4E 
0defc     2C EC BD 8D 
0df00     95 BD 23 7F 
0df04     7F 61 E7 AC | 	byte	$05, $27, $4b, $4e, $2c, $ec, $bd, $8d, $95, $bd, $23, $7f, $7f, $61, $e7, $ac
0df08     A0 CF C4 D0 
0df0c     CD ED 01 37 
0df10     31 37 3A 37 
0df14     0A B9 BB E7 | 	byte	$a0, $cf, $c4, $d0, $cd, $ed, $01, $37, $31, $37, $3a, $37, $0a, $b9, $bb, $e7
0df18     00 34 53 59 
0df1c     30 F2 AC 82 
0df20     83 B5 2A 7F 
0df24     7F 5F EB B6 | 	byte	$00, $34, $53, $59, $30, $f2, $ac, $82, $83, $b5, $2a, $7f, $7f, $5f, $eb, $b6
0df28     A9 C5 A2 B7 
0df2c     D3 00 1A 3F 
0df30     39 3D 3D 3D 
0df34     03 B2 B2 CE | 	byte	$a9, $c5, $a2, $b7, $d3, $00, $1a, $3f, $39, $3d, $3d, $3d, $03, $b2, $b2, $ce
0df38     FE 3F 53 5B 
0df3c     2C F9 A8 80 
0df40     83 B1 3A 7F 
0df44     7F 4C E0 B4 | 	byte	$fe, $3f, $53, $5b, $2c, $f9, $a8, $80, $83, $b1, $3a, $7f, $7f, $4c, $e0, $b4
0df48     A7 B2 9D AB 
0df4c     DC 15 41 54 
0df50     3D 3C 38 36 
0df54     FF B8 B6 CA | 	byte	$a7, $b2, $9d, $ab, $dc, $15, $41, $54, $3d, $3c, $38, $36, $ff, $b8, $b6, $ca
0df58     FD 40 50 56 
0df5c     23 F6 AA 81 
0df60     81 BB 38 7F 
0df64     7F 30 DB B3 | 	byte	$fd, $40, $50, $56, $23, $f6, $aa, $81, $81, $bb, $38, $7f, $7f, $30, $db, $b3
0df68     C3 AF 9D 98 
0df6c     D0 14 48 5C 
0df70     38 39 30 3D 
0df74     03 C3 B8 C5 | 	byte	$c3, $af, $9d, $98, $d0, $14, $48, $5c, $38, $39, $30, $3d, $03, $c3, $b8, $c5
0df78     F4 35 4E 52 
0df7c     2A EC B3 8B 
0df80     85 CA 3B 7F 
0df84     7F 32 DA BA | 	byte	$f4, $35, $4e, $52, $2a, $ec, $b3, $8b, $85, $ca, $3b, $7f, $7f, $32, $da, $ba
0df88     CC B2 9C 95 
0df8c     BF 08 4D 5D 
0df90     41 3D 39 33 
0df94     03 CF C1 C7 | 	byte	$cc, $b2, $9c, $95, $bf, $08, $4d, $5d, $41, $3d, $39, $33, $03, $cf, $c1, $c7
0df98     F0 23 51 46 
0df9c     26 EC B4 90 
0dfa0     8B CD 55 7F 
0dfa4     7F 30 E0 C6 | 	byte	$f0, $23, $51, $46, $26, $ec, $b4, $90, $8b, $cd, $55, $7f, $7f, $30, $e0, $c6
0dfa8     CD BB A2 9E 
0dfac     BB 01 43 5E 
0dfb0     4F 3E 3E 1F 
0dfb4     F4 D2 D2 D1 | 	byte	$cd, $bb, $a2, $9e, $bb, $01, $43, $5e, $4f, $3e, $3e, $1f, $f4, $d2, $d2, $d1
0dfb8     F9 1C 4A 3F 
0dfbc     17 E0 AE 92 
0dfc0     9E DC 59 7F 
0dfc4     69 27 E3 D6 | 	byte	$f9, $1c, $4a, $3f, $17, $e0, $ae, $92, $9e, $dc, $59, $7f, $69, $27, $e3, $d6
0dfc8     D6 BF A6 A6 
0dfcc     C6 FE 2E 4A 
0dfd0     55 4D 45 17 
0dfd4     ED DC DB D8 | 	byte	$d6, $bf, $a6, $a6, $c6, $fe, $2e, $4a, $55, $4d, $45, $17, $ed, $dc, $db, $d8
0dfd8     FA 19 43 33 
0dfdc     12 DC B5 94 
0dfe0     B5 F3 59 7F 
0dfe4     45 11 DD DB | 	byte	$fa, $19, $43, $33, $12, $dc, $b5, $94, $b5, $f3, $59, $7f, $45, $11, $dd, $db
0dfe8     CE C7 A9 BB 
0dfec     D4 11 23 39 
0dff0     4D 44 49 13 
0dff4     F3 E1 E6 EA | 	byte	$ce, $c7, $a9, $bb, $d4, $11, $23, $39, $4d, $44, $49, $13, $f3, $e1, $e6, $ea
0dff8     FF 17 34 26 
0dffc     01 D2 B2 9B 
0e000     C2 12 63 7B 
0e004     34 06 D0 D8 | 	byte	$ff, $17, $34, $26, $01, $d2, $b2, $9b, $c2, $12, $63, $7b, $34, $06, $d0, $d8
0e008     C1 C7 AF C9 
0e00c     E1 19 28 37 
0e010     41 41 3A 01 
0e014     F1 DA EA 02 | 	byte	$c1, $c7, $af, $c9, $e1, $19, $28, $37, $41, $41, $3a, $01, $f1, $da, $ea, $02
0e018     13 23 29 1B 
0e01c     EB C5 A1 95 
0e020     DA 39 7A 7A 
0e024     2E FD CD C9 | 	byte	$13, $23, $29, $1b, $eb, $c5, $a1, $95, $da, $39, $7a, $7a, $2e, $fd, $cd, $c9
0e028     B7 C2 BB D1 
0e02c     F5 1C 2D 3B 
0e030     38 3F 31 03 
0e034     ED DD E1 0A | 	byte	$b7, $c2, $bb, $d1, $f5, $1c, $2d, $3b, $38, $3f, $31, $03, $ed, $dd, $e1, $0a
0e038     16 2F 25 14 
0e03c     EA B7 98 92 
0e040     EA 46 7E 6D 
0e044     28 FB D0 C0 | 	byte	$16, $2f, $25, $14, $ea, $b7, $98, $92, $ea, $46, $7e, $6d, $28, $fb, $d0, $c0
0e048     AE C5 C7 DF 
0e04c     00 25 2E 3D 
0e050     29 35 24 02 
0e054     F1 DE E4 10 | 	byte	$ae, $c5, $c7, $df, $00, $25, $2e, $3d, $29, $35, $24, $02, $f1, $de, $e4, $10
0e058     16 2E 25 1A 
0e05c     E9 B9 97 98 
0e060     EA 49 74 59 
0e064     2B F4 DC BA | 	byte	$16, $2e, $25, $1a, $e9, $b9, $97, $98, $ea, $49, $74, $59, $2b, $f4, $dc, $ba
0e068     A7 BB CF EA 
0e06c     16 2C 31 3E 
0e070     27 2B 0B FD 
0e074     F2 DF F2 13 | 	byte	$a7, $bb, $cf, $ea, $16, $2c, $31, $3e, $27, $2b, $0b, $fd, $f2, $df, $f2, $13
0e078     22 30 1B 0C 
0e07c     E3 C1 9E B2 
0e080     EA 36 61 52 
0e084     2E 00 E0 BC | 	byte	$22, $30, $1b, $0c, $e3, $c1, $9e, $b2, $ea, $36, $61, $52, $2e, $00, $e0, $bc
0e088     BA C9 DB F1 
0e08c     14 21 22 24 
0e090     10 13 0B 12 
0e094     06 EC F3 01 | 	byte	$ba, $c9, $db, $f1, $14, $21, $22, $24, $10, $13, $0b, $12, $06, $ec, $f3, $01
0e098     10 1B 18 0D 
0e09c     F9 DF C1 C2 
0e0a0     E4 10 40 45 
0e0a4     2B FD DF C8 | 	byte	$10, $1b, $18, $0d, $f9, $df, $c1, $c2, $e4, $10, $40, $45, $2b, $fd, $df, $c8
0e0a8     D2 E3 EB FA 
0e0ac     0B 14 0C 0D 
0e0b0     07 0C 14 1E 
0e0b4     11 F3 F4 FF | 	byte	$d2, $e3, $eb, $fa, $0b, $14, $0c, $0d, $07, $0c, $14, $1e, $11, $f3, $f4, $ff
0e0b8     06 0E 10 0C 
0e0bc     00 EB CE C6 
0e0c0     E2 0A 2F 41 
0e0c4     30 05 DD CC | 	byte	$06, $0e, $10, $0c, $00, $eb, $ce, $c6, $e2, $0a, $2f, $41, $30, $05, $dd, $cc
0e0c8     DD F0 F0 FD 
0e0cc     02 0F 05 0C 
0e0d0     01 10 18 1F 
0e0d4     11 F5 FD FD | 	byte	$dd, $f0, $f0, $fd, $02, $0f, $05, $0c, $01, $10, $18, $1f, $11, $f5, $fd, $fd
0e0d8     07 09 0A 07 
0e0dc     FB E8 D3 C8 
0e0e0     E4 0A 28 3F 
0e0e4     31 13 E8 D3 | 	byte	$07, $09, $0a, $07, $fb, $e8, $d3, $c8, $e4, $0a, $28, $3f, $31, $13, $e8, $d3
0e0e8     DC EF F1 F4 
0e0ec     FB 06 06 0A 
0e0f0     07 10 15 1A 
0e0f4     0C FB 01 08 | 	byte	$dc, $ef, $f1, $f4, $fb, $06, $06, $0a, $07, $10, $15, $1a, $0c, $fb, $01, $08
0e0f8     05 0B 07 0C 
0e0fc     F7 DF CF CE 
0e100     ED 07 28 3D 
0e104     30 10 E6 D3 | 	byte	$05, $0b, $07, $0c, $f7, $df, $cf, $ce, $ed, $07, $28, $3d, $30, $10, $e6, $d3
0e108     DA EF F0 F9 
0e10c     02 09 03 0B 
0e110     02 0D 16 16 
0e114     09 FA 03 0C | 	byte	$da, $ef, $f0, $f9, $02, $09, $03, $0b, $02, $0d, $16, $16, $09, $fa, $03, $0c
0e118     01 0A 03 14 
0e11c     F3 DE CB D3 
0e120     F4 05 21 3A 
0e124     32 12 E8 DB | 	byte	$01, $0a, $03, $14, $f3, $de, $cb, $d3, $f4, $05, $21, $3a, $32, $12, $e8, $db
0e128     DD EB EB F1 
0e12c     FF 09 06 14 
0e130     0D 16 15 10 
0e134     FD EA FC 06 | 	byte	$dd, $eb, $eb, $f1, $ff, $09, $06, $14, $0d, $16, $15, $10, $fd, $ea, $fc, $06
0e138     03 09 0F 16 
0e13c     FC E4 D5 DD 
0e140     F4 03 1E 31 
0e144     25 12 F3 E8 | 	byte	$03, $09, $0f, $16, $fc, $e4, $d5, $dd, $f4, $03, $1e, $31, $25, $12, $f3, $e8
0e148     DF E6 E6 E6 
0e14c     F6 04 15 1F 
0e150     1B 14 0D 08 
0e154     F2 E4 F7 04 | 	byte	$df, $e6, $e6, $e6, $f6, $04, $15, $1f, $1b, $14, $0d, $08, $f2, $e4, $f7, $04
0e158     05 0F 13 16 
0e15c     FD E3 D9 DA 
0e160     F7 FD 1B 2B 
0e164     27 10 F8 E8 | 	byte	$05, $0f, $13, $16, $fd, $e3, $d9, $da, $f7, $fd, $1b, $2b, $27, $10, $f8, $e8
0e168     DE E2 E6 EA 
0e16c     F4 02 17 28 
0e170     1D 14 09 0D 
0e174     FC EB F2 FC | 	byte	$de, $e2, $e6, $ea, $f4, $02, $17, $28, $1d, $14, $09, $0d, $fc, $eb, $f2, $fc
0e178     FB 09 0D 0F 
0e17c     FE EF E3 E7 
0e180     F7 FF 13 23 
0e184     20 13 FF EA | 	byte	$fb, $09, $0d, $0f, $fe, $ef, $e3, $e7, $f7, $ff, $13, $23, $20, $13, $ff, $ea
0e188     E1 E1 E5 E8 
0e18c     ED FF 14 28 
0e190     1C 18 07 0A 
0e194     F7 E4 EF FB | 	byte	$e1, $e1, $e5, $e8, $ed, $ff, $14, $28, $1c, $18, $07, $0a, $f7, $e4, $ef, $fb
0e198     05 14 15 0C 
0e19c     F9 EB E2 E6 
0e1a0     F5 FF 14 2A 
0e1a4     27 17 FE EE | 	byte	$05, $14, $15, $0c, $f9, $eb, $e2, $e6, $f5, $ff, $14, $2a, $27, $17, $fe, $ee
0e1a8     E5 E6 E3 E2 
0e1ac     E9 F3 10 20 
0e1b0     21 1E 17 13 
0e1b4     F7 E0 E7 F6 | 	byte	$e5, $e6, $e3, $e2, $e9, $f3, $10, $20, $21, $1e, $17, $13, $f7, $e0, $e7, $f6
0e1b8     03 16 1B 13 
0e1bc     00 EF E0 E3 
0e1c0     EA F0 10 2C 
0e1c4     2B 12 FE EB | 	byte	$03, $16, $1b, $13, $00, $ef, $e0, $e3, $ea, $f0, $10, $2c, $2b, $12, $fe, $eb
0e1c8     F0 F1 E6 E4 
0e1cc     E8 F8 0B 19 
0e1d0     18 1F 22 17 
0e1d4     FB E0 E0 EA | 	byte	$f0, $f1, $e6, $e4, $e8, $f8, $0b, $19, $18, $1f, $22, $17, $fb, $e0, $e0, $ea
0e1d8     FC 17 1F 1B 
0e1dc     02 F5 E5 E9 
0e1e0     E9 F2 0E 25 
0e1e4     1E 0A F7 EA | 	byte	$fc, $17, $1f, $1b, $02, $f5, $e5, $e9, $e9, $f2, $0e, $25, $1e, $0a, $f7, $ea
0e1e8     F8 00 F9 F5 
0e1ec     F6 00 05 08 
0e1f0     FE 07 0A 11 
0e1f4     04 F8 EC EC | 	byte	$f8, $00, $f9, $f5, $f6, $00, $05, $08, $fe, $07, $0a, $11, $04, $f8, $ec, $ec
0e1f8     FA 11 17 0D 
0e1fc     FA F8 F6 FB 
0e200     F4 F6 03 10 
0e204     07 FB F2 F0 | 	byte	$fa, $11, $17, $0d, $fa, $f8, $f6, $fb, $f4, $f6, $03, $10, $07, $fb, $f2, $f0
0e208     FE 11 0D 08 
0e20c     05 06 08 01 
0e210     F2 F4 FC 0B 
0e214     09 FF F0 EA | 	byte	$fe, $11, $0d, $08, $05, $06, $08, $01, $f2, $f4, $fc, $0b, $09, $ff, $f0, $ea
0e218     FB 0F 11 09 
0e21c     FA FC 01 04 
0e220     FB F5 FF 05 
0e224     02 FD F2 F5 | 	byte	$fb, $0f, $11, $09, $fa, $fc, $01, $04, $fb, $f5, $ff, $05, $02, $fd, $f2, $f5
0e228     00 15 17 0F 
0e22c     09 07 01 FA 
0e230     EB ED F9 0B 
0e234     12 07 F4 E4 | 	byte	$00, $15, $17, $0f, $09, $07, $01, $fa, $eb, $ed, $f9, $0b, $12, $07, $f4, $e4
0e238     F8 08 07 03 
0e23c     FE 06 0C 09 
0e240     FA F1 F8 FB 
0e244     FE 00 F5 FA | 	byte	$f8, $08, $07, $03, $fe, $06, $0c, $09, $fa, $f1, $f8, $fb, $fe, $00, $f5, $fa
0e248     06 12 19 13 
0e24c     0A 03 FD F4 
0e250     EC EF FB 08 
0e254     10 06 F5 E6 | 	byte	$06, $12, $19, $13, $0a, $03, $fd, $f4, $ec, $ef, $fb, $08, $10, $06, $f5, $e6
0e258     F4 02 05 05 
0e25c     08 0C 12 0C 
0e260     F8 EE EE F6 
0e264     FA 03 FC 02 | 	byte	$f4, $02, $05, $05, $08, $0c, $12, $0c, $f8, $ee, $ee, $f6, $fa, $03, $fc, $02
0e268     09 0D 0F 0D 
0e26c     09 01 FF F4 
0e270     F2 F6 FF 03 
0e274     09 00 F8 EC | 	byte	$09, $0d, $0f, $0d, $09, $01, $ff, $f4, $f2, $f6, $ff, $03, $09, $00, $f8, $ec
0e278     F7 01 03 03 
0e27c     05 0E 0F 06 
0e280     F8 F0 EF F4 
0e284     FB 00 01 FE | 	byte	$f7, $01, $03, $03, $05, $0e, $0f, $06, $f8, $f0, $ef, $f4, $fb, $00, $01, $fe
0e288     09 09 13 13 
0e28c     0E 05 FB F2 
0e290     EF F7 04 0B 
0e294     0C FF F1 EF | 	byte	$09, $09, $13, $13, $0e, $05, $fb, $f2, $ef, $f7, $04, $0b, $0c, $ff, $f1, $ef
0e298     F6 F9 FE 04 
0e29c     0D 15 13 06 
0e2a0     FB F1 EE E8 
0e2a4     F6 FC 02 00 | 	byte	$f6, $f9, $fe, $04, $0d, $15, $13, $06, $fb, $f1, $ee, $e8, $f6, $fc, $02, $00
0e2a8     06 0C 18 19 
0e2ac     13 07 F6 ED 
0e2b0     ED FB 09 15 
0e2b4     10 00 EE EA | 	byte	$06, $0c, $18, $19, $13, $07, $f6, $ed, $ed, $fb, $09, $15, $10, $00, $ee, $ea
0e2b8     EF EC F3 00 
0e2bc     10 18 1B 0C 
0e2c0     01 F9 F0 E6 
0e2c4     F0 F5 FB 05 | 	byte	$ef, $ec, $f3, $00, $10, $18, $1b, $0c, $01, $f9, $f0, $e6, $f0, $f5, $fb, $05
0e2c8     06 10 14 18 
0e2cc     10 07 F1 E5 
0e2d0     ED FE 11 19 
0e2d4     12 00 F0 E7 | 	byte	$06, $10, $14, $18, $10, $07, $f1, $e5, $ed, $fe, $11, $19, $12, $00, $f0, $e7
0e2d8     EA E9 EF 03 
0e2dc     15 25 20 12 
0e2e0     01 F3 E3 DA 
0e2e4     E2 F1 FD 11 | 	byte	$ea, $e9, $ef, $03, $15, $25, $20, $12, $01, $f3, $e3, $da, $e2, $f1, $fd, $11
0e2e8     17 1E 1E 19 
0e2ec     0C FB E6 DC 
0e2f0     E7 FE 15 20 
0e2f4     16 05 EF E8 | 	byte	$17, $1e, $1e, $19, $0c, $fb, $e6, $dc, $e7, $fe, $15, $20, $16, $05, $ef, $e8
0e2f8     E6 E6 EC FC 
0e2fc     10 29 26 1B 
0e300     07 F7 E3 DA 
0e304     D8 E7 FA 0F | 	byte	$e6, $e6, $ec, $fc, $10, $29, $26, $1b, $07, $f7, $e3, $da, $d8, $e7, $fa, $0f
0e308     1E 20 1D 15 
0e30c     0A FC ED E5 
0e310     ED 04 15 1D 
0e314     0E F7 E9 EF | 	byte	$1e, $20, $1d, $15, $0a, $fc, $ed, $e5, $ed, $04, $15, $1d, $0e, $f7, $e9, $ef
0e318     EF EE EC F3 
0e31c     06 24 26 1E 
0e320     0E FD E5 DD 
0e324     D9 E1 F7 16 | 	byte	$ef, $ee, $ec, $f3, $06, $24, $26, $1e, $0e, $fd, $e5, $dd, $d9, $e1, $f7, $16
0e328     1F 24 1A 0E 
0e32c     07 F8 EE EB 
0e330     F3 06 1B 18 
0e334     07 EF E6 EC | 	byte	$1f, $24, $1a, $0e, $07, $f8, $ee, $eb, $f3, $06, $1b, $18, $07, $ef, $e6, $ec
0e338     ED EB ED F5 
0e33c     0A 26 2C 22 
0e340     0E F8 E5 DD 
0e344     D9 E0 FB 16 | 	byte	$ed, $eb, $ed, $f5, $0a, $26, $2c, $22, $0e, $f8, $e5, $dd, $d9, $e0, $fb, $16
0e348     1D 1F 16 0D 
0e34c     05 F7 EB EE 
0e350     F7 06 17 0F 
0e354     02 F1 F5 FC | 	byte	$1d, $1f, $16, $0d, $05, $f7, $eb, $ee, $f7, $06, $17, $0f, $02, $f1, $f5, $fc
0e358     F8 EC E8 EF 
0e35c     04 18 24 21 
0e360     13 01 EC E3 
0e364     DD E4 F7 12 | 	byte	$f8, $ec, $e8, $ef, $04, $18, $24, $21, $13, $01, $ec, $e3, $dd, $e4, $f7, $12
0e368     1A 1A 1A 0E 
0e36c     03 F2 EA F2 
0e370     FE 0D 16 0E 
0e374     01 F0 F8 F9 | 	byte	$1a, $1a, $1a, $0e, $03, $f2, $ea, $f2, $fe, $0d, $16, $0e, $01, $f0, $f8, $f9
0e378     F7 EB E8 EF 
0e37c     09 11 1C 1B 
0e380     10 00 F1 E7 
0e384     E4 ED 00 0F | 	byte	$f7, $eb, $e8, $ef, $09, $11, $1c, $1b, $10, $00, $f1, $e7, $e4, $ed, $00, $0f
0e388     17 14 11 0D 
0e38c     01 F7 ED F3 
0e390     04 11 10 05 
0e394     F8 F4 FE FD | 	byte	$17, $14, $11, $0d, $01, $f7, $ed, $f3, $04, $11, $10, $05, $f8, $f4, $fe, $fd
0e398     F7 EA E9 F3 
0e39c     0B 0F 12 14 
0e3a0     10 FE F1 E5 
0e3a4     E5 F2 06 14 | 	byte	$f7, $ea, $e9, $f3, $0b, $0f, $12, $14, $10, $fe, $f1, $e5, $e5, $f2, $06, $14
0e3a8     18 11 09 0B 
0e3ac     01 FB F0 F4 
0e3b0     05 16 0E 03 
0e3b4     F2 F4 FF FE | 	byte	$18, $11, $09, $0b, $01, $fb, $f0, $f4, $05, $16, $0e, $03, $f2, $f4, $ff, $fe
0e3b8     F7 EB F0 FC 
0e3bc     11 10 06 04 
0e3c0     05 F7 F4 EA 
0e3c4     ED FA 0E 17 | 	byte	$f7, $eb, $f0, $fc, $11, $10, $06, $04, $05, $f7, $f4, $ea, $ed, $fa, $0e, $17
0e3c8     12 0A 02 0A 
0e3cc     03 FD F2 F7 
0e3d0     08 16 0D FD 
0e3d4     EF F3 05 FD | 	byte	$12, $0a, $02, $0a, $03, $fd, $f2, $f7, $08, $16, $0d, $fd, $ef, $f3, $05, $fd
0e3d8     F4 EF F8 0D 
0e3dc     17 10 FF F6 
0e3e0     F6 F0 EC EA 
0e3e4     F4 0B 19 18 | 	byte	$f4, $ef, $f8, $0d, $17, $10, $ff, $f6, $f6, $f0, $ec, $ea, $f4, $0b, $19, $18
0e3e8     0F 04 04 08 
0e3ec     05 FA F2 F9 
0e3f0     09 14 0C FC 
0e3f4     F2 F4 00 FE | 	byte	$0f, $04, $04, $08, $05, $fa, $f2, $f9, $09, $14, $0c, $fc, $f2, $f4, $00, $fe
0e3f8     ED EE F7 12 
0e3fc     16 0F 01 F6 
0e400     F1 EF E8 E8 
0e404     F9 12 21 17 | 	byte	$ed, $ee, $f7, $12, $16, $0f, $01, $f6, $f1, $ef, $e8, $e8, $f9, $12, $21, $17
0e408     0A 00 02 07 
0e40c     04 FC F6 02 
0e410     0C 0D 03 F8 
0e414     F0 FD FF FD | 	byte	$0a, $00, $02, $07, $04, $fc, $f6, $02, $0c, $0d, $03, $f8, $f0, $fd, $ff, $fd
0e418     F2 F4 FB 0E 
0e41c     0E 05 FF FB 
0e420     F5 F4 EF EC 
0e424     00 17 19 0A | 	byte	$f2, $f4, $fb, $0e, $0e, $05, $ff, $fb, $f5, $f4, $ef, $ec, $00, $17, $19, $0a
0e428     FE FC 06 0A 
0e42c     0A 05 00 05 
0e430     0B 03 F8 EF 
0e434     F3 04 03 FD | 	byte	$fe, $fc, $06, $0a, $0a, $05, $00, $05, $0b, $03, $f8, $ef, $f3, $04, $03, $fd
0e438     F6 F8 01 0D 
0e43c     08 FD FB FB 
0e440     F2 EF EF F1 
0e444     05 1C 1B 0E | 	byte	$f6, $f8, $01, $0d, $08, $fd, $fb, $fb, $f2, $ef, $ef, $f1, $05, $1c, $1b, $0e
0e448     FF FA 04 05 
0e44c     08 FE 00 08 
0e450     12 06 F8 EA 
0e454     EE FF 01 F5 | 	byte	$ff, $fa, $04, $05, $08, $fe, $00, $08, $12, $06, $f8, $ea, $ee, $ff, $01, $f5
0e458     F2 FB 11 19 
0e45c     0D 02 FB F9 
0e460     ED E8 E5 F4 
0e464     08 1D 18 0F | 	byte	$f2, $fb, $11, $19, $0d, $02, $fb, $f9, $ed, $e8, $e5, $f4, $08, $1d, $18, $0f
0e468     01 FC 04 04 
0e46c     02 FB 03 0A 
0e470     13 06 FA EB 
0e474     F4 FD FD F0 | 	byte	$01, $fc, $04, $04, $02, $fb, $03, $0a, $13, $06, $fa, $eb, $f4, $fd, $fd, $f0
0e478     EE F8 11 18 
0e47c     0F 06 03 FB 
0e480     EB E7 E3 F5 
0e484     08 14 0E 08 | 	byte	$ee, $f8, $11, $18, $0f, $06, $03, $fb, $eb, $e7, $e3, $f5, $08, $14, $0e, $08
0e488     05 08 10 0B 
0e48c     03 F9 FF 09 
0e490     0B FD F9 EF 
0e494     00 01 FF F3 | 	byte	$05, $08, $10, $0b, $03, $f9, $ff, $09, $0b, $fd, $f9, $ef, $00, $01, $ff, $f3
0e498     F0 F5 06 0A 
0e49c     06 07 0D 04 
0e4a0     F4 E8 E7 F6 
0e4a4     08 0A 01 01 | 	byte	$f0, $f5, $06, $0a, $06, $07, $0d, $04, $f4, $e8, $e7, $f6, $08, $0a, $01, $01
0e4a8     07 13 17 11 
0e4ac     02 FC FE 05 
0e4b0     FE F5 EF F1 
0e4b4     03 07 03 FB | 	byte	$07, $13, $17, $11, $02, $fc, $fe, $05, $fe, $f5, $ef, $f1, $03, $07, $03, $fb
0e4b8     F9 FA FE FA 
0e4bc     FE 05 13 0A 
0e4c0     FA E9 E9 FD 
0e4c4     0C 0D FD FA | 	byte	$f9, $fa, $fe, $fa, $fe, $05, $13, $0a, $fa, $e9, $e9, $fd, $0c, $0d, $fd, $fa
0e4c8     06 14 14 0B 
0e4cc     FC FC FF 0A 
0e4d0     01 FA ED F5 
0e4d4     05 02 FB F7 | 	byte	$06, $14, $14, $0b, $fc, $fc, $ff, $0a, $01, $fa, $ed, $f5, $05, $02, $fb, $f7
0e4d8     FA 03 FF F5 
0e4dc     F9 03 11 0A 
0e4e0     FE EF F0 FF 
0e4e4     09 06 F9 F8 | 	byte	$fa, $03, $ff, $f5, $f9, $03, $11, $0a, $fe, $ef, $f0, $ff, $09, $06, $f9, $f8
0e4e8     0A 19 1A 0F 
0e4ec     FA F6 FA 03 
0e4f0     FB FB F3 FC 
0e4f4     0A 06 FD F8 | 	byte	$0a, $19, $1a, $0f, $fa, $f6, $fa, $03, $fb, $fb, $f3, $fc, $0a, $06, $fd, $f8
0e4f8     F6 04 FE F3 
0e4fc     F5 02 0A 03 
0e500     FB F2 FA 05 
0e504     0E 04 FC F9 | 	byte	$f6, $04, $fe, $f3, $f5, $02, $0a, $03, $fb, $f2, $fa, $05, $0e, $04, $fc, $f9
0e508     09 15 15 0B 
0e50c     F8 F8 FB 02 
0e510     FC FE F5 00 
0e514     05 06 FA F6 | 	byte	$09, $15, $15, $0b, $f8, $f8, $fb, $02, $fc, $fe, $f5, $00, $05, $06, $fa, $f6
0e518     F7 06 03 F9 
0e51c     F9 03 04 FD 
0e520     F6 F0 FF 05 
0e524     0F 04 FF FE | 	byte	$f7, $06, $03, $f9, $f9, $03, $04, $fd, $f6, $f0, $ff, $05, $0f, $04, $ff, $fe
0e528     0F 14 11 01 
0e52c     F3 F4 FC FF 
0e530     FE 01 01 0C 
0e534     0B 04 F8 F1 | 	byte	$0f, $14, $11, $01, $f3, $f4, $fc, $ff, $fe, $01, $01, $0c, $0b, $04, $f8, $f1
0e538     F1 FD FD FE 
0e53c     FE 09 04 FC 
0e540     F7 F5 00 03 
0e544     02 F9 FE 08 | 	byte	$f1, $fd, $fd, $fe, $fe, $09, $04, $fc, $f7, $f5, $00, $03, $02, $f9, $fe, $08
0e548     16 15 15 F9 
0e54c     F4 EF FB FA 
0e550     01 02 09 0F 
0e554     0B 01 F8 EF | 	byte	$16, $15, $15, $f9, $f4, $ef, $fb, $fa, $01, $02, $09, $0f, $0b, $01, $f8, $ef
0e558     F1 F7 F7 02 
0e55c     04 0B 00 FE 
0e560     F9 02 01 FF 
0e564     F8 F4 FF 11 | 	byte	$f1, $f7, $f7, $02, $04, $0b, $00, $fe, $f9, $02, $01, $ff, $f8, $f4, $ff, $11
0e568     1F 1C 11 F7 
0e56c     EF E9 F3 F4 
0e570     03 03 11 14 
0e574     0E 00 FA F1 | 	byte	$1f, $1c, $11, $f7, $ef, $e9, $f3, $f4, $03, $03, $11, $14, $0e, $00, $fa, $f1
0e578     F2 F0 F3 00 
0e57c     0B 0D 02 03 
0e580     FA 03 FC FA 
0e584     EB EE FC 17 | 	byte	$f2, $f0, $f3, $00, $0b, $0d, $02, $03, $fa, $03, $fc, $fa, $eb, $ee, $fc, $17
0e588     25 26 14 F9 
0e58c     EE EA EE EC 
0e590     FA 00 15 1B 
0e594     17 02 F6 F1 | 	byte	$25, $26, $14, $f9, $ee, $ea, $ee, $ec, $fa, $00, $15, $1b, $17, $02, $f6, $f1
0e598     F1 ED EE 01 
0e59c     0F 0E 04 FD 
0e5a0     F5 FF FA F9 
0e5a4     E9 EC 00 1E | 	byte	$f1, $ed, $ee, $01, $0f, $0e, $04, $fd, $f5, $ff, $fa, $f9, $e9, $ec, $00, $1e
0e5a8     2B 2A 11 F7 
0e5ac     ED EB EB E6 
0e5b0     F3 03 18 21 
0e5b4     15 02 F8 F8 | 	byte	$2b, $2a, $11, $f7, $ed, $eb, $eb, $e6, $f3, $03, $18, $21, $15, $02, $f8, $f8
0e5b8     FB EE EF F8 
0e5bc     0B 06 01 F9 
0e5c0     F6 FF 01 FD 
0e5c4     EF F0 01 1B | 	byte	$fb, $ee, $ef, $f8, $0b, $06, $01, $f9, $f6, $ff, $01, $fd, $ef, $f0, $01, $1b
0e5c8     29 24 0E F9 
0e5cc     EF F0 E8 EC 
0e5d0     F0 07 1C 20 
0e5d4     16 00 F7 F8 | 	byte	$29, $24, $0e, $f9, $ef, $f0, $e8, $ec, $f0, $07, $1c, $20, $16, $00, $f7, $f8
0e5d8     FB F2 F2 F6 
0e5dc     05 06 04 FA 
0e5e0     F9 FA FB F5 
0e5e4     EB F2 05 20 | 	byte	$fb, $f2, $f2, $f6, $05, $06, $04, $fa, $f9, $fa, $fb, $f5, $eb, $f2, $05, $20
0e5e8     2C 25 0D FB 
0e5ec     EC EC E0 EA 
0e5f0     F1 08 1E 28 
0e5f4     16 03 F0 EF | 	byte	$2c, $25, $0d, $fb, $ec, $ec, $e0, $ea, $f1, $08, $1e, $28, $16, $03, $f0, $ef
0e5f8     F0 EE F3 FD 
0e5fc     0C 0C 0B FD 
0e600     FD F5 F6 F0 
0e604     EB F5 0C 1F | 	byte	$f0, $ee, $f3, $fd, $0c, $0c, $0b, $fd, $fd, $f5, $f6, $f0, $eb, $f5, $0c, $1f
0e608     2B 1C 06 FB 
0e60c     F0 F0 E3 EB 
0e610     F5 08 1A 21 
0e614     15 08 F7 F0 | 	byte	$2b, $1c, $06, $fb, $f0, $f0, $e3, $eb, $f5, $08, $1a, $21, $15, $08, $f7, $f0
0e618     EC EE F3 FE 
0e61c     06 0A 09 01 
0e620     00 F4 F5 ED 
0e624     F1 F6 10 20 | 	byte	$ec, $ee, $f3, $fe, $06, $0a, $09, $01, $00, $f4, $f5, $ed, $f1, $f6, $10, $20
0e628     28 1A 06 F9 
0e62c     F5 EC E2 E6 
0e630     F1 08 1A 1C 
0e634     17 0E 01 F1 | 	byte	$28, $1a, $06, $f9, $f5, $ec, $e2, $e6, $f1, $08, $1a, $1c, $17, $0e, $01, $f1
0e638     E3 E7 F0 01 
0e63c     08 0D 0B 06 
0e640     FE F5 F0 E8 
0e644     F0 FC 16 1E | 	byte	$e3, $e7, $f0, $01, $08, $0d, $0b, $06, $fe, $f5, $f0, $e8, $f0, $fc, $16, $1e
0e648     24 14 06 FA 
0e64c     F8 EA E7 E8 
0e650     F3 0B 14 13 
0e654     0F 0F 09 FF | 	byte	$24, $14, $06, $fa, $f8, $ea, $e7, $e8, $f3, $0b, $14, $13, $0f, $0f, $09, $ff
0e658     EA EA F0 01 
0e65c     06 09 04 02 
0e660     02 FC F5 E9 
0e664     EC FA 0F 14 | 	byte	$ea, $ea, $f0, $01, $06, $09, $04, $02, $02, $fc, $f5, $e9, $ec, $fa, $0f, $14
0e668     1B 0E 0D 03 
0e66c     FE EE E9 EC 
0e670     F7 0D 12 09 
0e674     09 07 08 01 | 	byte	$1b, $0e, $0d, $03, $fe, $ee, $e9, $ec, $f7, $0d, $12, $09, $09, $07, $08, $01
0e678     ED E8 F0 02 
0e67c     08 09 FE 02 
0e680     FE 00 F9 EF 
0e684     EE 02 14 1A | 	byte	$ed, $e8, $f0, $02, $08, $09, $fe, $02, $fe, $00, $f9, $ef, $ee, $02, $14, $1a
0e688     1A 0C 08 FE 
0e68c     F5 E2 E5 F0 
0e690     06 14 1A 06 
0e694     09 01 04 FA | 	byte	$1a, $0c, $08, $fe, $f5, $e2, $e5, $f0, $06, $14, $1a, $06, $09, $01, $04, $fa
0e698     EC E6 F1 03 
0e69c     0D 0C 02 04 
0e6a0     F9 FE F1 F1 
0e6a4     F3 09 14 1B | 	byte	$ec, $e6, $f1, $03, $0d, $0c, $02, $04, $f9, $fe, $f1, $f1, $f3, $09, $14, $1b
0e6a8     16 0A 06 FD 
0e6ac     EE E0 EA F4 
0e6b0     0E 18 19 0B 
0e6b4     08 00 FB F0 | 	byte	$16, $0a, $06, $fd, $ee, $e0, $ea, $f4, $0e, $18, $19, $0b, $08, $00, $fb, $f0
0e6b8     E9 E7 F3 05 
0e6bc     0F 10 08 07 
0e6c0     F9 F2 EA ED 
0e6c4     F5 0B 14 1F | 	byte	$e9, $e7, $f3, $05, $0f, $10, $08, $07, $f9, $f2, $ea, $ed, $f5, $0b, $14, $1f
0e6c8     18 0F 02 F6 
0e6cc     E4 E0 E8 F9 
0e6d0     10 1F 1C 15 
0e6d4     0B 02 F6 E6 | 	byte	$18, $0f, $02, $f6, $e4, $e0, $e8, $f9, $10, $1f, $1c, $15, $0b, $02, $f6, $e6
0e6d8     E2 E8 FB 08 
0e6dc     14 0E 0E 03 
0e6e0     F8 ED E5 EA 
0e6e4     FC 0E 18 23 | 	byte	$e2, $e8, $fb, $08, $14, $0e, $0e, $03, $f8, $ed, $e5, $ea, $fc, $0e, $18, $23
0e6e8     1E 13 00 F2 
0e6ec     DE DF E8 00 
0e6f0     14 1E 14 10 
0e6f4     09 FE F1 E1 | 	byte	$1e, $13, $00, $f2, $de, $df, $e8, $00, $14, $1e, $14, $10, $09, $fe, $f1, $e1
0e6f8     E2 EC 04 0A 
0e6fc     16 0F 0E FE 
0e700     F6 EE E6 EE 
0e704     00 12 18 1B | 	byte	$e2, $ec, $04, $0a, $16, $0f, $0e, $fe, $f6, $ee, $e6, $ee, $00, $12, $18, $1b
0e708     15 10 FC F2 
0e70c     DF E6 ED 08 
0e710     16 1A 12 10 
0e714     0A FD ED DC | 	byte	$15, $10, $fc, $f2, $df, $e6, $ed, $08, $16, $1a, $12, $10, $0a, $fd, $ed, $dc
0e718     E0 F0 0A 0F 
0e71c     1B 12 13 FA 
0e720     EC E3 E0 ED 
0e724     03 17 25 20 | 	byte	$e0, $f0, $0a, $0f, $1b, $12, $13, $fa, $ec, $e3, $e0, $ed, $03, $17, $25, $20
0e728     15 0B F4 E8 
0e72c     DA E9 F5 0E 
0e730     19 1A 14 0F 
0e734     06 F8 E4 DE | 	byte	$15, $0b, $f4, $e8, $da, $e9, $f5, $0e, $19, $1a, $14, $0f, $06, $f8, $e4, $de
0e738     E1 F5 0B 14 
0e73c     1A 12 0C F4 
0e740     E8 E0 E6 F3 
0e744     0D 19 28 1E | 	byte	$e1, $f5, $0b, $14, $1a, $12, $0c, $f4, $e8, $e0, $e6, $f3, $0d, $19, $28, $1e
0e748     13 01 EF E0 
0e74c     DF F0 01 14 
0e750     19 18 0E 08 
0e754     FC F5 E5 E4 | 	byte	$13, $01, $ef, $e0, $df, $f0, $01, $14, $19, $18, $0e, $08, $fc, $f5, $e5, $e4
0e758     E9 FF 09 15 
0e75c     16 12 06 F2 
0e760     E6 DF EA F9 
0e764     14 1B 24 1B | 	byte	$e9, $ff, $09, $15, $16, $12, $06, $f2, $e6, $df, $ea, $f9, $14, $1b, $24, $1b
0e768     0F F5 EB DD 
0e76c     E5 F7 09 16 
0e770     1A 16 0F 06 
0e774     FD F3 E8 E7 | 	byte	$0f, $f5, $eb, $dd, $e5, $f7, $09, $16, $1a, $16, $0f, $06, $fd, $f3, $e8, $e7
0e778     ED 00 04 11 
0e77c     11 0E 01 F5 
0e780     EB E5 EE 02 
0e784     11 1E 1D 16 | 	byte	$ed, $00, $04, $11, $11, $0e, $01, $f5, $eb, $e5, $ee, $02, $11, $1e, $1d, $16
0e788     0D F2 EB DF 
0e78c     E9 F8 06 11 
0e790     16 14 15 09 
0e794     FF F3 EA E6 | 	byte	$0d, $f2, $eb, $df, $e9, $f8, $06, $11, $16, $14, $15, $09, $ff, $f3, $ea, $e6
0e798     EE FE 03 10 
0e79c     0D 0F FD F0 
0e7a0     E8 E9 F0 08 
0e7a4     10 1C 18 12 | 	byte	$ee, $fe, $03, $10, $0d, $0f, $fd, $f0, $e8, $e9, $f0, $08, $10, $1c, $18, $12
0e7a8     0B F4 EE E2 
0e7ac     ED F6 07 0C 
0e7b0     12 11 15 0A 
0e7b4     FE F0 EC EA | 	byte	$0b, $f4, $ee, $e2, $ed, $f6, $07, $0c, $12, $11, $15, $0a, $fe, $f0, $ec, $ea
0e7b8     F6 01 06 0F 
0e7bc     0C 0D FB EF 
0e7c0     E7 EE FB 11 
0e7c4     16 17 12 07 | 	byte	$f6, $01, $06, $0f, $0c, $0d, $fb, $ef, $e7, $ee, $fb, $11, $16, $17, $12, $07
0e7c8     FC F0 E7 E8 
0e7cc     F6 02 11 15 
0e7d0     11 0D 0A 03 
0e7d4     F7 EA EC EF | 	byte	$fc, $f0, $e7, $e8, $f6, $02, $11, $15, $11, $0d, $0a, $03, $f7, $ea, $ec, $ef
0e7d8     01 05 0B 0D 
0e7dc     09 06 F7 E9 
0e7e0     E6 F3 06 1C 
0e7e4     1D 16 09 FF | 	byte	$01, $05, $0b, $0d, $09, $06, $f7, $e9, $e6, $f3, $06, $1c, $1d, $16, $09, $ff
0e7e8     EF EA E5 F1 
0e7ec     01 0E 13 14 
0e7f0     0D 0B 01 FB 
0e7f4     F3 E8 EE F4 | 	byte	$ef, $ea, $e5, $f1, $01, $0e, $13, $14, $0d, $0b, $01, $fb, $f3, $e8, $ee, $f4
0e7f8     02 06 11 11 
0e7fc     10 FF EF E4 
0e800     E5 F0 0A 1F 
0e804     25 1C 09 F7 | 	byte	$02, $06, $11, $11, $10, $ff, $ef, $e4, $e5, $f0, $0a, $1f, $25, $1c, $09, $f7
0e808     E1 E1 E2 F4 
0e80c     07 1B 19 18 
0e810     0A 07 F9 F6 
0e814     F3 ED F4 FA | 	byte	$e1, $e1, $e2, $f4, $07, $1b, $19, $18, $0a, $07, $f9, $f6, $f3, $ed, $f4, $fa
0e818     02 04 0F 0E 
0e81c     13 FC F3 EA 
0e820     E9 F0 08 1B 
0e824     24 1C 08 F6 | 	byte	$02, $04, $0f, $0e, $13, $fc, $f3, $ea, $e9, $f0, $08, $1b, $24, $1c, $08, $f6
0e828     E2 E0 DE F7 
0e82c     09 1F 1F 15 
0e830     03 FC F3 F0 
0e834     F2 F5 FA 01 | 	byte	$e2, $e0, $de, $f7, $09, $1f, $1f, $15, $03, $fc, $f3, $f0, $f2, $f5, $fa, $01
0e838     04 03 11 0E 
0e83c     12 FD F1 E9 
0e840     EA F2 07 18 
0e844     21 19 05 F3 | 	byte	$04, $03, $11, $0e, $12, $fd, $f1, $e9, $ea, $f2, $07, $18, $21, $19, $05, $f3
0e848     E6 DF E2 F8 
0e84c     0E 20 24 16 
0e850     04 F7 EE ED 
0e854     ED FA FD 04 | 	byte	$e6, $df, $e2, $f8, $0e, $20, $24, $16, $04, $f7, $ee, $ed, $ed, $fa, $fd, $04
0e858     02 07 0D 0F 
0e85c     0E FB EE EC 
0e860     F1 FD 10 19 
0e864     19 0D 01 EB | 	byte	$02, $07, $0d, $0f, $0e, $fb, $ee, $ec, $f1, $fd, $10, $19, $19, $0d, $01, $eb
0e868     E5 E0 EA F9 
0e86c     0F 1F 28 1C 
0e870     07 F7 EC E8 
0e874     EB F8 FC 01 | 	byte	$e5, $e0, $ea, $f9, $0f, $1f, $28, $1c, $07, $f7, $ec, $e8, $eb, $f8, $fc, $01
0e878     02 0A 0E 12 
0e87c     07 F7 EC E5 
0e880     F0 03 15 1B 
0e884     16 08 FD EB | 	byte	$02, $0a, $0e, $12, $07, $f7, $ec, $e5, $f0, $03, $15, $1b, $16, $08, $fd, $eb
0e888     E6 E3 EC FD 
0e88c     10 1F 22 1A 
0e890     0B F8 F0 EE 
0e894     EF F6 FD FE | 	byte	$e6, $e3, $ec, $fd, $10, $1f, $22, $1a, $0b, $f8, $f0, $ee, $ef, $f6, $fd, $fe
0e898     FD 06 0D 13 
0e89c     05 F6 ED E7 
0e8a0     F2 09 19 20 
0e8a4     15 06 F9 E9 | 	byte	$fd, $06, $0d, $13, $05, $f6, $ed, $e7, $f2, $09, $19, $20, $15, $06, $f9, $e9
0e8a8     E3 E1 EF 01 
0e8ac     15 20 20 11 
0e8b0     06 F4 EC EA 
0e8b4     F0 F7 02 05 | 	byte	$e3, $e1, $ef, $01, $15, $20, $20, $11, $06, $f4, $ec, $ea, $f0, $f7, $02, $05
0e8b8     03 0C 0D 15 
0e8bc     FD EF E5 E8 
0e8c0     F5 10 1A 22 
0e8c4     15 06 F4 E7 | 	byte	$03, $0c, $0d, $15, $fd, $ef, $e5, $e8, $f5, $10, $1a, $22, $15, $06, $f4, $e7
0e8c8     E3 E2 F3 05 
0e8cc     18 1F 1E 0F 
0e8d0     09 F9 ED E8 
0e8d4     EF F4 FF 03 | 	byte	$e3, $e2, $f3, $05, $18, $1f, $1e, $0f, $09, $f9, $ed, $e8, $ef, $f4, $ff, $03
0e8d8     04 0E 11 14 
0e8dc     01 EF E4 E9 
0e8e0     F8 0F 17 1C 
0e8e4     12 08 F5 EA | 	byte	$04, $0e, $11, $14, $01, $ef, $e4, $e9, $f8, $0f, $17, $1c, $12, $08, $f5, $ea
0e8e8     E3 E4 F5 08 
0e8ec     17 1C 14 0D 
0e8f0     06 FB F1 E9 
0e8f4     F2 F7 FE FF | 	byte	$e3, $e4, $f5, $08, $17, $1c, $14, $0d, $06, $fb, $f1, $e9, $f2, $f7, $fe, $ff
0e8f8     07 0F 14 0B 
0e8fc     FF EE E9 EE 
0e900     FD 0E 15 16 
0e904     0F 08 F9 EC | 	byte	$07, $0f, $14, $0b, $ff, $ee, $e9, $ee, $fd, $0e, $15, $16, $0f, $08, $f9, $ec
0e908     E2 EA F8 09 
0e90c     12 18 0E 0B 
0e910     03 FF F6 F0 
0e914     F2 F7 F9 FA | 	byte	$e2, $ea, $f8, $09, $12, $18, $0e, $0b, $03, $ff, $f6, $f0, $f2, $f7, $f9, $fa
0e918     07 0F 18 07 
0e91c     FA E9 E9 F4 
0e920     04 0E 14 12 
0e924     11 0A FB ED | 	byte	$07, $0f, $18, $07, $fa, $e9, $e9, $f4, $04, $0e, $14, $12, $11, $0a, $fb, $ed
0e928     E2 EE FB 09 
0e92c     0D 11 0B 0A 
0e930     06 FE F8 F3 
0e934     F1 F7 F7 F6 | 	byte	$e2, $ee, $fb, $09, $0d, $11, $0b, $0a, $06, $fe, $f8, $f3, $f1, $f7, $f7, $f6
0e938     0A 11 19 06 
0e93c     F5 EC F0 FC 
0e940     08 0E 0F 0E 
0e944     0D 03 F7 EF | 	byte	$0a, $11, $19, $06, $f5, $ec, $f0, $fc, $08, $0e, $0f, $0e, $0d, $03, $f7, $ef
0e948     E8 F3 FB 05 
0e94c     05 0D 0C 0E 
0e950     0B 04 FD F7 
0e954     EE EE F1 F7 | 	byte	$e8, $f3, $fb, $05, $05, $0d, $0c, $0e, $0b, $04, $fd, $f7, $ee, $ee, $f1, $f7
0e958     0A 14 19 08 
0e95c     F6 EA F1 F8 
0e960     09 0F 12 0F 
0e964     0C FF F5 E9 | 	byte	$0a, $14, $19, $08, $f6, $ea, $f1, $f8, $09, $0f, $12, $0f, $0c, $ff, $f5, $e9
0e968     E8 F3 F9 04 
0e96c     09 0F 0F 10 
0e970     09 02 F8 F6 
0e974     EF F1 F1 FD | 	byte	$e8, $f3, $f9, $04, $09, $0f, $0f, $10, $09, $02, $f8, $f6, $ef, $f1, $f1, $fd
0e978     0A 18 13 01 
0e97c     F4 EB F5 FA 
0e980     0D 14 14 0E 
0e984     08 F8 F0 E8 | 	byte	$0a, $18, $13, $01, $f4, $eb, $f5, $fa, $0d, $14, $14, $0e, $08, $f8, $f0, $e8
0e988     F1 FA 00 01 
0e98c     06 0A 0E 0E 
0e990     0B 05 FB F9 
0e994     F1 EE EA FA | 	byte	$f1, $fa, $00, $01, $06, $0a, $0e, $0e, $0b, $05, $fb, $f9, $f1, $ee, $ea, $fa
0e998     05 15 0F 03 
0e99c     F9 F7 FA 02 
0e9a0     09 0F 0E 09 
0e9a4     01 F6 F4 EB | 	byte	$05, $15, $0f, $03, $f9, $f7, $fa, $02, $09, $0f, $0e, $09, $01, $f6, $f4, $eb
0e9a8     F7 FE 02 FD 
0e9ac     01 04 0B 0A 
0e9b0     0A 06 FF FA 
0e9b4     F5 F0 EB FB | 	byte	$f7, $fe, $02, $fd, $01, $04, $0b, $0a, $0a, $06, $ff, $fa, $f5, $f0, $eb, $fb
0e9b8     06 10 0A FF 
0e9bc     FB FD FE 02 
0e9c0     04 06 09 0A 
0e9c4     05 FD F7 F2 | 	byte	$06, $10, $0a, $ff, $fb, $fd, $fe, $02, $04, $06, $09, $0a, $05, $fd, $f7, $f2
0e9c8     F7 FC FE FA 
0e9cc     FE 05 0B 0D 
0e9d0     0A 08 05 FE 
0e9d4     F6 EC EA F8 | 	byte	$f7, $fc, $fe, $fa, $fe, $05, $0b, $0d, $0a, $08, $05, $fe, $f6, $ec, $ea, $f8
0e9d8     02 0B 05 01 
0e9dc     00 08 08 06 
0e9e0     FE FD FC 07 
0e9e4     03 02 FB FA | 	byte	$02, $0b, $05, $01, $00, $08, $08, $06, $fe, $fd, $fc, $07, $03, $02, $fb, $fa
0e9e8     FC FC F8 F4 
0e9ec     F8 03 10 12 
0e9f0     0F 06 07 FC 
0e9f4     F4 EB ED F8 | 	byte	$fc, $fc, $f8, $f4, $f8, $03, $10, $12, $0f, $06, $07, $fc, $f4, $eb, $ed, $f8
0e9f8     05 09 FF FB 
0e9fc     FD 07 0B 0B 
0ea00     00 FE FD 07 
0ea04     05 04 FF 00 | 	byte	$05, $09, $ff, $fb, $fd, $07, $0b, $0b, $00, $fe, $fd, $07, $05, $04, $ff, $00
0ea08     02 F8 F4 F0 
0ea0c     F5 FF 0B 0E 
0ea10     0C 05 09 02 
0ea14     FA EF F3 F8 | 	byte	$02, $f8, $f4, $f0, $f5, $ff, $0b, $0e, $0c, $05, $09, $02, $fa, $ef, $f3, $f8
0ea18     01 02 FB FC 
0ea1c     04 0C 0F 07 
0ea20     FF F9 FA 02 
0ea24     02 05 05 06 | 	byte	$01, $02, $fb, $fc, $04, $0c, $0f, $07, $ff, $f9, $fa, $02, $02, $05, $05, $06
0ea28     07 F8 ED EE 
0ea2c     F4 02 08 0D 
0ea30     0C 08 09 07 
0ea34     FD F2 F5 F9 | 	byte	$07, $f8, $ed, $ee, $f4, $02, $08, $0d, $0c, $08, $09, $07, $fd, $f2, $f5, $f9
0ea38     FE FA F9 FA 
0ea3c     07 0C 12 07 
0ea40     00 F6 F6 F8 
0ea44     FA 03 08 0F | 	byte	$fe, $fa, $f9, $fa, $07, $0c, $12, $07, $00, $f6, $f6, $f8, $fa, $03, $08, $0f
0ea48     0B FF EF F0 
0ea4c     F3 FD 02 08 
0ea50     0A 0B 09 07 
0ea54     01 F7 FA FC | 	byte	$0b, $ff, $ef, $f0, $f3, $fd, $02, $08, $0a, $0b, $09, $07, $01, $f7, $fa, $fc
0ea58     FF F5 F4 F6 
0ea5c     04 0E 12 0E 
0ea60     05 FB F8 F6 
0ea64     F8 FD 05 0C | 	byte	$ff, $f5, $f4, $f6, $04, $0e, $12, $0e, $05, $fb, $f8, $f6, $f8, $fd, $05, $0c
0ea68     05 00 F6 F3 
0ea6c     FA 01 05 07 
0ea70     05 08 04 01 
0ea74     FC FB 00 02 | 	byte	$05, $00, $f6, $f3, $fa, $01, $05, $07, $05, $08, $04, $01, $fc, $fb, $00, $02
0ea78     FF F3 ED F5 
0ea7c     02 0E 15 13 
0ea80     0B 00 F9 F1 
0ea84     F6 FB 06 0C | 	byte	$ff, $f3, $ed, $f5, $02, $0e, $15, $13, $0b, $00, $f9, $f1, $f6, $fb, $06, $0c
0ea88     05 00 FA F5 
0ea8c     FA FC 00 01 
0ea90     03 0C 06 01 
0ea94     F8 FC 02 02 | 	byte	$05, $00, $fa, $f5, $fa, $fc, $00, $01, $03, $0c, $06, $01, $f8, $fc, $02, $02
0ea98     FC F3 F2 FB 
0ea9c     03 09 12 0F 
0eaa0     0D 03 F9 F0 
0eaa4     F5 FB 05 0A | 	byte	$fc, $f3, $f2, $fb, $03, $09, $12, $0f, $0d, $03, $f9, $f0, $f5, $fb, $05, $0a
0eaa8     02 FE FD FC 
0eaac     FD FE FD 00 
0eab0     00 07 06 02 
0eab4     F9 00 03 03 | 	byte	$02, $fe, $fd, $fc, $fd, $fe, $fd, $00, $00, $07, $06, $02, $f9, $00, $03, $03
0eab8     FB F4 F3 FB 
0eabc     06 0C 11 0F 
0eac0     09 00 F7 F1 
0eac4     F3 FB 04 0A | 	byte	$fb, $f4, $f3, $fb, $06, $0c, $11, $0f, $09, $00, $f7, $f1, $f3, $fb, $04, $0a
0eac8     07 02 01 00 
0eacc     FE FB F9 FC 
0ead0     03 04 04 FE 
0ead4     F8 00 02 03 | 	byte	$07, $02, $01, $00, $fe, $fb, $f9, $fc, $03, $04, $04, $fe, $f8, $00, $02, $03
0ead8     FB F5 F4 FB 
0eadc     05 0F 10 0E 
0eae0     07 05 FB F7 
0eae4     F3 F8 FF 04 | 	byte	$fb, $f5, $f4, $fb, $05, $0f, $10, $0e, $07, $05, $fb, $f7, $f3, $f8, $ff, $04
0eae8     03 00 03 06 
0eaec     06 FE FB F9 
0eaf0     06 05 02 FA 
0eaf4     F6 FD 02 03 | 	byte	$03, $00, $03, $06, $06, $fe, $fb, $f9, $06, $05, $02, $fa, $f6, $fd, $02, $03
0eaf8     FB F7 F5 FE 
0eafc     07 0F 0B 0B 
0eb00     09 08 01 FA 
0eb04     F5 F6 FC FB | 	byte	$fb, $f7, $f5, $fe, $07, $0f, $0b, $0b, $09, $08, $01, $fa, $f5, $f6, $fc, $fb
0eb08     FC FC 03 07 
0eb0c     08 02 FE FC 
0eb10     05 05 FB F2 
0eb14     F4 FC 02 06 | 	byte	$fc, $fc, $03, $07, $08, $02, $fe, $fc, $05, $05, $fb, $f2, $f4, $fc, $02, $06
0eb18     FF FC FD 03 
0eb1c     07 06 02 04 
0eb20     09 0D 07 FF 
0eb24     FB F6 F6 EF | 	byte	$ff, $fc, $fd, $03, $07, $06, $02, $04, $09, $0d, $07, $ff, $fb, $f6, $f6, $ef
0eb28     F1 FA 06 0D 
0eb2c     0D 0A 05 02 
0eb30     03 01 F6 EB 
0eb34     F1 FA 03 03 | 	byte	$f1, $fa, $06, $0d, $0d, $0a, $05, $02, $03, $01, $f6, $eb, $f1, $fa, $03, $03
0eb38     00 FE 05 07 
0eb3c     0B 04 FF 01 
0eb40     08 0A 06 00 
0eb44     FE FC F6 EF | 	byte	$00, $fe, $05, $07, $0b, $04, $ff, $01, $08, $0a, $06, $00, $fe, $fc, $f6, $ef
0eb48     EB F7 06 10 
0eb4c     11 0B 05 04 
0eb50     03 FC F1 E8 
0eb54     F1 FB 04 02 | 	byte	$eb, $f7, $06, $10, $11, $0b, $05, $04, $03, $fc, $f1, $e8, $f1, $fb, $04, $02
0eb58     FE FF 06 0A 
0eb5c     09 00 FA FF 
0eb60     0A 10 0C 06 
0eb64     03 FF F3 E8 | 	byte	$fe, $ff, $06, $0a, $09, $00, $fa, $ff, $0a, $10, $0c, $06, $03, $ff, $f3, $e8
0eb68     E1 EF 05 15 
0eb6c     19 11 09 05 
0eb70     02 F6 EA E5 
0eb74     F0 FD 09 07 | 	byte	$e1, $ef, $05, $15, $19, $11, $09, $05, $02, $f6, $ea, $e5, $f0, $fd, $09, $07
0eb78     03 02 06 07 
0eb7c     04 FA F7 FE 
0eb80     0A 12 13 0B 
0eb84     04 FE F1 E6 | 	byte	$03, $02, $06, $07, $04, $fa, $f7, $fe, $0a, $12, $13, $0b, $04, $fe, $f1, $e6
0eb88     E2 EE 03 15 
0eb8c     18 14 0B 08 
0eb90     01 F7 E8 E8 
0eb94     F0 FE 0A 08 | 	byte	$e2, $ee, $03, $15, $18, $14, $0b, $08, $01, $f7, $e8, $e8, $f0, $fe, $0a, $08
0eb98     06 02 05 02 
0eb9c     FD F6 F9 00 
0eba0     0E 11 13 0C 
0eba4     05 FF EE E4 | 	byte	$06, $02, $05, $02, $fd, $f6, $f9, $00, $0e, $11, $13, $0c, $05, $ff, $ee, $e4
0eba8     E3 F2 01 13 
0ebac     16 15 0E 08 
0ebb0     00 F3 E5 E8 
0ebb4     F1 00 09 0B | 	byte	$e3, $f2, $01, $13, $16, $15, $0e, $08, $00, $f3, $e5, $e8, $f1, $00, $09, $0b
0ebb8     0A 09 05 FD 
0ebbc     F5 F1 F6 01 
0ebc0     10 12 11 0D 
0ebc4     08 FD EF E2 | 	byte	$0a, $09, $05, $fd, $f5, $f1, $f6, $01, $10, $12, $11, $0d, $08, $fd, $ef, $e2
0ebc8     E6 F5 05 10 
0ebcc     16 15 11 09 
0ebd0     FC EC E6 EC 
0ebd4     F5 04 05 08 | 	byte	$e6, $f5, $05, $10, $16, $15, $11, $09, $fc, $ec, $e6, $ec, $f5, $04, $05, $08
0ebd8     09 08 02 F8 
0ebdc     F1 F3 FC 0A 
0ebe0     0F 13 0E 0C 
0ebe4     0A FB F2 E7 | 	byte	$09, $08, $02, $f8, $f1, $f3, $fc, $0a, $0f, $13, $0e, $0c, $0a, $fb, $f2, $e7
0ebe8     E9 F6 05 09 
0ebec     10 15 14 09 
0ebf0     F8 E5 E1 EA 
0ebf4     FA 08 0B 0C | 	byte	$e9, $f6, $05, $09, $10, $15, $14, $09, $f8, $e5, $e1, $ea, $fa, $08, $0b, $0c
0ebf8     0C 0A 01 F4 
0ebfc     EB F0 FF 0B 
0ec00     10 0F 0C 0C 
0ec04     0C FE F2 E7 | 	byte	$0c, $0a, $01, $f4, $eb, $f0, $ff, $0b, $10, $0f, $0c, $0c, $0c, $fe, $f2, $e7
0ec08     EA F5 03 08 
0ec0c     0E 15 19 0E 
0ec10     F8 E2 DE E8 
0ec14     FA 09 0B 0E | 	byte	$ea, $f5, $03, $08, $0e, $15, $19, $0e, $f8, $e2, $de, $e8, $fa, $09, $0b, $0e
0ec18     11 12 05 F5 
0ec1c     E9 EE FC 0B 
0ec20     0E 0B 0A 0B 
0ec24     0A FD F0 E7 | 	byte	$11, $12, $05, $f5, $e9, $ee, $fc, $0b, $0e, $0b, $0a, $0b, $0a, $fd, $f0, $e7
0ec28     EC F8 05 0B 
0ec2c     0F 14 17 0B 
0ec30     F7 E1 DE E8 
0ec34     FC 05 09 0C | 	byte	$ec, $f8, $05, $0b, $0f, $14, $17, $0b, $f7, $e1, $de, $e8, $fc, $05, $09, $0c
0ec38     10 10 08 F8 
0ec3c     F0 F4 00 0C 
0ec40     0C 06 03 07 
0ec44     06 FF F4 EF | 	byte	$10, $10, $08, $f8, $f0, $f4, $00, $0c, $0c, $06, $03, $07, $06, $ff, $f4, $ef
0ec48     F3 FD 05 09 
0ec4c     0F 13 13 07 
0ec50     F3 DF DD E9 
0ec54     FA 05 0A 12 | 	byte	$f3, $fd, $05, $09, $0f, $13, $13, $07, $f3, $df, $dd, $e9, $fa, $05, $0a, $12
0ec58     16 0E 05 F5 
0ec5c     EE F2 FD 0B 
0ec60     0F 0B 06 07 
0ec64     01 FB F0 ED | 	byte	$16, $0e, $05, $f5, $ee, $f2, $fd, $0b, $0f, $0b, $06, $07, $01, $fb, $f0, $ed
0ec68     F5 00 07 0C 
0ec6c     11 15 12 06 
0ec70     F1 E1 E2 EA 
0ec74     F7 FF 08 13 | 	byte	$f5, $00, $07, $0c, $11, $15, $12, $06, $f1, $e1, $e2, $ea, $f7, $ff, $08, $13
0ec78     18 11 07 F9 
0ec7c     F4 F7 FC 06 
0ec80     0C 09 06 06 
0ec84     FF F8 EF EF | 	byte	$18, $11, $07, $f9, $f4, $f7, $fc, $06, $0c, $09, $06, $06, $ff, $f8, $ef, $ef
0ec88     F8 03 06 0A 
0ec8c     0C 12 0F 03 
0ec90     F1 E8 EA F1 
0ec94     F8 FC 07 11 | 	byte	$f8, $03, $06, $0a, $0c, $12, $0f, $03, $f1, $e8, $ea, $f1, $f8, $fc, $07, $11
0ec98     14 0D 03 F9 
0ec9c     F8 F9 FD 02 
0eca0     07 0B 0A 0A 
0eca4     00 F6 ED F2 | 	byte	$14, $0d, $03, $f9, $f8, $f9, $fd, $02, $07, $0b, $0a, $0a, $00, $f6, $ed, $f2
0eca8     F9 02 06 0B 
0ecac     0D 11 0B FE 
0ecb0     EF EA EB F3 
0ecb4     F9 FE 07 11 | 	byte	$f9, $02, $06, $0b, $0d, $11, $0b, $fe, $ef, $ea, $eb, $f3, $f9, $fe, $07, $11
0ecb8     12 0D 04 FC 
0ecbc     FD FC FF FE 
0ecc0     00 07 0C 0B 
0ecc4     FE F6 ED F3 | 	byte	$12, $0d, $04, $fc, $fd, $fc, $ff, $fe, $00, $07, $0c, $0b, $fe, $f6, $ed, $f3
0ecc8     FA 02 08 0A 
0eccc     0F 11 06 F9 
0ecd0     EB ED F1 F7 
0ecd4     FA FD 07 0D | 	byte	$fa, $02, $08, $0a, $0f, $11, $06, $f9, $eb, $ed, $f1, $f7, $fa, $fd, $07, $0d
0ecd8     0E 0B 03 FE 
0ecdc     01 00 01 FD 
0ece0     FD 00 09 07 
0ece4     01 F7 F1 F7 | 	byte	$0e, $0b, $03, $fe, $01, $00, $01, $fd, $fd, $00, $09, $07, $01, $f7, $f1, $f7
0ece8     FF 05 08 0B 
0ecec     0D 0E 02 F3 
0ecf0     E9 EF F8 FF 
0ecf4     FD FC 01 05 | 	byte	$ff, $05, $08, $0b, $0d, $0e, $02, $f3, $e9, $ef, $f8, $ff, $fd, $fc, $01, $05
0ecf8     08 07 02 01 
0ecfc     05 07 07 00 
0ed00     FD FE 03 00 
0ed04     FC F5 F3 FA | 	byte	$08, $07, $02, $01, $05, $07, $07, $00, $fd, $fe, $03, $00, $fc, $f5, $f3, $fa
0ed08     05 09 0D 0C 
0ed0c     0E 09 F9 E9 
0ed10     E6 EE FD 07 
0ed14     02 00 FF 04 | 	byte	$05, $09, $0d, $0c, $0e, $09, $f9, $e9, $e6, $ee, $fd, $07, $02, $00, $ff, $04
0ed18     02 02 00 03 
0ed1c     07 0B 07 04 
0ed20     FE FB FD FA 
0ed24     F9 F5 F8 FF | 	byte	$02, $02, $00, $03, $07, $0b, $07, $04, $fe, $fb, $fd, $fa, $f9, $f5, $f8, $ff
0ed28     08 0C 0F 10 
0ed2c     0F 05 F5 E5 
0ed30     E5 F0 00 0B 
0ed34     09 05 FE FC | 	byte	$08, $0c, $0f, $10, $0f, $05, $f5, $e5, $e5, $f0, $00, $0b, $09, $05, $fe, $fc
0ed38     FA FB 00 05 
0ed3c     0C 11 0C 03 
0ed40     FD F6 F7 F6 
0ed44     F9 F9 FE 04 | 	byte	$fa, $fb, $00, $05, $0c, $11, $0c, $03, $fd, $f6, $f7, $f6, $f9, $f9, $fe, $04
0ed48     09 0B 0D 10 
0ed4c     0C 01 F1 E6 
0ed50     E9 F3 01 09 
0ed54     0A 08 01 F8 | 	byte	$09, $0b, $0d, $10, $0c, $01, $f1, $e6, $e9, $f3, $01, $09, $0a, $08, $01, $f8
0ed58     F5 F5 FE 08 
0ed5c     0F 14 0F 05 
0ed60     FD F8 F3 F3 
0ed64     F5 FB 02 07 | 	byte	$f5, $f5, $fe, $08, $0f, $14, $0f, $05, $fd, $f8, $f3, $f3, $f5, $fb, $02, $07
0ed68     08 0C 0F 10 
0ed6c     0A FD EE E6 
0ed70     EA F6 01 09 
0ed74     0C 0A 06 FA | 	byte	$08, $0c, $0f, $10, $0a, $fd, $ee, $e6, $ea, $f6, $01, $09, $0c, $0a, $06, $fa
0ed78     F1 EE F4 08 
0ed7c     12 18 11 07 
0ed80     01 F9 F0 ED 
0ed84     EF F9 04 0C | 	byte	$f1, $ee, $f4, $08, $12, $18, $11, $07, $01, $f9, $f0, $ed, $ef, $f9, $04, $0c
0ed88     0B 0E 11 10 
0ed8c     07 F9 ED E8 
0ed90     ED FA 03 04 
0ed94     08 07 08 FE | 	byte	$0b, $0e, $11, $10, $07, $f9, $ed, $e8, $ed, $fa, $03, $04, $08, $07, $08, $fe
0ed98     F4 EF F5 07 
0ed9c     12 14 0E 06 
0eda0     00 FC F3 F0 
0eda4     EE F7 03 0A | 	byte	$f4, $ef, $f5, $07, $12, $14, $0e, $06, $00, $fc, $f3, $f0, $ee, $f7, $03, $0a
0eda8     0A 0E 11 11 
0edac     07 F7 EC EA 
0edb0     F0 FC 06 03 
0edb4     06 07 07 FF | 	byte	$0a, $0e, $11, $11, $07, $f7, $ec, $ea, $f0, $fc, $06, $03, $06, $07, $07, $ff
0edb8     F4 EC F4 01 
0edbc     11 16 0F 09 
0edc0     03 FD F4 F0 
0edc4     EC F8 03 0B | 	byte	$f4, $ec, $f4, $01, $11, $16, $0f, $09, $03, $fd, $f4, $f0, $ec, $f8, $03, $0b
0edc8     0C 0F 11 0F 
0edcc     04 F5 E8 EA 
0edd0     F3 01 08 04 
0edd4     04 07 04 FD | 	byte	$0c, $0f, $11, $0f, $04, $f5, $e8, $ea, $f3, $01, $08, $04, $04, $07, $04, $fd
0edd8     F3 EE F8 01 
0eddc     11 17 10 0B 
0ede0     01 F9 F1 ED 
0ede4     EF FC 06 0B | 	byte	$f3, $ee, $f8, $01, $11, $17, $10, $0b, $01, $f9, $f1, $ed, $ef, $fc, $06, $0b
0ede8     0D 11 11 0D 
0edec     01 F2 E6 EB 
0edf0     F5 03 07 04 
0edf4     06 08 03 FA | 	byte	$0d, $11, $11, $0d, $01, $f2, $e6, $eb, $f5, $03, $07, $04, $06, $08, $03, $fa
0edf8     F1 EF F9 01 
0edfc     0F 14 13 0D 
0ee00     06 F9 F2 EA 
0ee04     F1 FC 06 0A | 	byte	$f1, $ef, $f9, $01, $0f, $14, $13, $0d, $06, $f9, $f2, $ea, $f1, $fc, $06, $0a
0ee08     0D 11 11 0C 
0ee0c     FD EE E7 EE 
0ee10     FC 06 04 03 
0ee14     04 04 00 F9 | 	byte	$0d, $11, $11, $0c, $fd, $ee, $e7, $ee, $fc, $06, $04, $03, $04, $04, $00, $f9
0ee18     F5 F6 FE 02 
0ee1c     0B 0D 0E 0B 
0ee20     07 FB F4 EC 
0ee24     F2 FD 06 08 | 	byte	$f5, $f6, $fe, $02, $0b, $0d, $0e, $0b, $07, $fb, $f4, $ec, $f2, $fd, $06, $08
0ee28     0D 10 11 0A 
0ee2c     FC EE ED F3 
0ee30     FE 06 01 02 
0ee34     02 01 FC F9 | 	byte	$0d, $10, $11, $0a, $fc, $ee, $ed, $f3, $fe, $06, $01, $02, $02, $01, $fc, $f9
0ee38     F6 FC 02 06 
0ee3c     07 06 08 09 
0ee40     09 01 F7 EF 
0ee44     F5 FD 03 04 | 	byte	$f6, $fc, $02, $06, $07, $06, $08, $09, $09, $01, $f7, $ef, $f5, $fd, $03, $04
0ee48     09 0E 11 0A 
0ee4c     F9 ED EE F6 
0ee50     FE 05 00 05 
0ee54     07 03 FD F5 | 	byte	$09, $0e, $11, $0a, $f9, $ed, $ee, $f6, $fe, $05, $00, $05, $07, $03, $fd, $f5
0ee58     F3 FB 01 06 
0ee5c     06 04 07 0B 
0ee60     0B 03 F8 F1 
0ee64     F7 FC 01 05 | 	byte	$f3, $fb, $01, $06, $06, $04, $07, $0b, $0b, $03, $f8, $f1, $f7, $fc, $01, $05
0ee68     0A 0F 0C 05 
0ee6c     F4 ED F2 FC 
0ee70     04 05 04 06 
0ee74     04 FD F6 F2 | 	byte	$0a, $0f, $0c, $05, $f4, $ed, $f2, $fc, $04, $05, $04, $06, $04, $fd, $f6, $f2
0ee78     F4 FE 05 09 
0ee7c     08 03 05 0A 
0ee80     09 02 F9 F5 
0ee84     F9 FC FE 05 | 	byte	$f4, $fe, $05, $09, $08, $03, $05, $0a, $09, $02, $f9, $f5, $f9, $fc, $fe, $05
0ee88     0B 0F 0C 02 
0ee8c     F4 ED F2 FD 
0ee90     06 05 06 07 
0ee94     06 FE F5 F0 | 	byte	$0b, $0f, $0c, $02, $f4, $ed, $f2, $fd, $06, $05, $06, $07, $06, $fe, $f5, $f0
0ee98     F3 FF 06 0C 
0ee9c     07 02 01 05 
0eea0     05 01 FA FB 
0eea4     FE FF FE 02 | 	byte	$f3, $ff, $06, $0c, $07, $02, $01, $05, $05, $01, $fa, $fb, $fe, $ff, $fe, $02
0eea8     07 0A 08 01 
0eeac     F6 F2 F5 FD 
0eeb0     05 02 05 05 
0eeb4     04 FD F5 F1 | 	byte	$07, $0a, $08, $01, $f6, $f2, $f5, $fd, $05, $02, $05, $05, $04, $fd, $f5, $f1
0eeb8     F6 02 0A 0F 
0eebc     07 01 FE 01 
0eec0     00 FC FA FE 
0eec4     02 03 02 02 | 	byte	$f6, $02, $0a, $0f, $07, $01, $fe, $01, $00, $fc, $fa, $fe, $02, $03, $02, $02
0eec8     04 06 06 FF 
0eecc     F9 F7 F9 00 
0eed0     02 00 00 02 
0eed4     01 FC F6 F3 | 	byte	$04, $06, $06, $ff, $f9, $f7, $f9, $00, $02, $00, $00, $02, $01, $fc, $f6, $f3
0eed8     FA 03 0C 0D 
0eedc     08 01 FF FE 
0eee0     FE F8 F8 FD 
0eee4     05 07 06 05 | 	byte	$fa, $03, $0c, $0d, $08, $01, $ff, $fe, $fe, $f8, $f8, $fd, $05, $07, $06, $05
0eee8     03 06 03 FC 
0eeec     F7 F9 FB FE 
0eef0     FF 00 01 02 
0eef4     00 FE FB F8 | 	byte	$03, $06, $03, $fc, $f7, $f9, $fb, $fe, $ff, $00, $01, $02, $00, $fe, $fb, $f8
0eef8     FD FF 09 08 
0eefc     06 02 02 00 
0ef00     FC F9 FA FF 
0ef04     03 05 05 04 | 	byte	$fd, $ff, $09, $08, $06, $02, $02, $00, $fc, $f9, $fa, $ff, $03, $05, $05, $04
0ef08     01 02 00 00 
0ef0c     FD 00 02 FF 
0ef10     FC FB FB FC 
0ef14     FD FF 00 FF | 	byte	$01, $02, $00, $00, $fd, $00, $02, $ff, $fc, $fb, $fb, $fc, $fd, $ff, $00, $ff
0ef18     03 02 05 02 
0ef1c     FF 01 04 02 
0ef20     FE FD FE 03 
0ef24     04 03 02 02 | 	byte	$03, $02, $05, $02, $ff, $01, $04, $02, $fe, $fd, $fe, $03, $04, $03, $02, $02
0ef28     01 00 FD FE 
0ef2c     00 04 04 01 
0ef30     FB F9 F8 F9 
0ef34     FA FE 00 04 | 	byte	$01, $00, $fd, $fe, $00, $04, $04, $01, $fb, $f9, $f8, $f9, $fa, $fe, $00, $04
0ef38     06 06 06 FF 
0ef3c     FD 00 05 02 
0ef40     00 FE 00 02 
0ef44     03 FF 01 01 | 	byte	$06, $06, $06, $ff, $fd, $00, $05, $02, $00, $fe, $00, $02, $03, $ff, $01, $01
0ef48     02 00 FD FE 
0ef4c     03 07 04 03 
0ef50     F9 F8 F6 F6 
0ef54     F8 FE 01 08 | 	byte	$02, $00, $fd, $fe, $03, $07, $04, $03, $f9, $f8, $f6, $f6, $f8, $fe, $01, $08
0ef58     0A 09 04 FD 
0ef5c     FB FD 01 00 
0ef60     01 01 04 03 
0ef64     00 FE 01 01 | 	byte	$0a, $09, $04, $fd, $fb, $fd, $01, $00, $01, $01, $04, $03, $00, $fe, $01, $01
0ef68     02 01 FE FE 
0ef6c     02 07 04 00 
0ef70     F8 F5 F5 F7 
0ef74     FA FF 05 0C | 	byte	$02, $01, $fe, $fe, $02, $07, $04, $00, $f8, $f5, $f5, $f7, $fa, $ff, $05, $0c
0ef78     0B 08 01 FA 
0ef7c     FA FD 00 02 
0ef80     02 03 03 FF 
0ef84     F9 FA FF 03 | 	byte	$0b, $08, $01, $fa, $fa, $fd, $00, $02, $02, $03, $03, $ff, $f9, $fa, $ff, $03
0ef88     05 04 FF FF 
0ef8c     02 04 04 00 
0ef90     FA F8 F7 F8 
0ef94     FB FE 03 0A | 	byte	$05, $04, $ff, $ff, $02, $04, $04, $00, $fa, $f8, $f7, $f8, $fb, $fe, $03, $0a
0ef98     08 08 FF F9 
0ef9c     FC 01 04 04 
0efa0     04 01 00 FD 
0efa4     F7 FA 03 08 | 	byte	$08, $08, $ff, $f9, $fc, $01, $04, $04, $04, $01, $00, $fd, $f7, $fa, $03, $08
0efa8     09 02 FD FC 
0efac     FF 02 05 01 
0efb0     FE F9 F5 F6 
0efb4     F9 FF 04 0A | 	byte	$09, $02, $fd, $fc, $ff, $02, $05, $01, $fe, $f9, $f5, $f6, $f9, $ff, $04, $0a
0efb8     0A 08 FF F9 
0efbc     F9 00 04 06 
0efc0     06 02 00 FC 
0efc4     F8 FB 00 08 | 	byte	$0a, $08, $ff, $f9, $f9, $00, $04, $06, $06, $02, $00, $fc, $f8, $fb, $00, $08
0efc8     09 03 FE FD 
0efcc     FF 03 05 03 
0efd0     FF F7 F4 F5 
0efd4     FA FF 05 08 | 	byte	$09, $03, $fe, $fd, $ff, $03, $05, $03, $ff, $f7, $f4, $f5, $fa, $ff, $05, $08
0efd8     0B 08 FF F9 
0efdc     F8 FF 05 06 
0efe0     04 02 FE FA 
0efe4     F8 FC 01 0A | 	byte	$0b, $08, $ff, $f9, $f8, $ff, $05, $06, $04, $02, $fe, $fa, $f8, $fc, $01, $0a
0efe8     0A 05 FF FD 
0efec     FD 01 03 03 
0eff0     00 FA F7 F5 
0eff4     FA FC 05 05 | 	byte	$0a, $05, $ff, $fd, $fd, $01, $03, $03, $00, $fa, $f7, $f5, $fa, $fc, $05, $05
0eff8     0A 08 01 FB 
0effc     FA FC 03 05 
0f000     04 02 FD F8 
0f004     F9 FF 03 0A | 	byte	$0a, $08, $01, $fb, $fa, $fc, $03, $05, $04, $02, $fd, $f8, $f9, $ff, $03, $0a
0f008     08 05 FF FC 
0f00c     FD 00 02 03 
0f010     02 FD F8 F5 
0f014     FA FD 04 05 | 	byte	$08, $05, $ff, $fc, $fd, $00, $02, $03, $02, $fd, $f8, $f5, $fa, $fd, $04, $05
0f018     09 05 01 FB 
0f01c     FC FD 01 05 
0f020     05 04 FD F8 
0f024     FA 02 04 08 | 	byte	$09, $05, $01, $fb, $fc, $fd, $01, $05, $05, $04, $fd, $f8, $fa, $02, $04, $08
0f028     04 02 FF FE 
0f02c     FF 00 01 02 
0f030     00 FF F9 F7 
0f034     FA FD 02 04 | 	byte	$04, $02, $ff, $fe, $ff, $00, $01, $02, $00, $ff, $f9, $f7, $fa, $fd, $02, $04
0f038     07 03 01 FD 
0f03c     FD FD FE 02 
0f040     05 04 FF FA 
0f044     FD 03 06 04 | 	byte	$07, $03, $01, $fd, $fd, $fd, $fe, $02, $05, $04, $ff, $fa, $fd, $03, $06, $04
0f048     FF 00 FF 01 
0f04c     00 00 FE FF 
0f050     FE 00 FC FC 
0f054     FA FE 01 02 | 	byte	$ff, $00, $ff, $01, $00, $00, $fe, $ff, $fe, $00, $fc, $fc, $fa, $fe, $01, $02
0f058     03 FF FE FE 
0f05c     FF FE 00 03 
0f060     08 05 FF FB 
0f064     FE 01 06 02 | 	byte	$03, $ff, $fe, $fe, $ff, $fe, $00, $03, $08, $05, $ff, $fb, $fe, $01, $06, $02
0f068     FD FD 01 07 
0f06c     04 FF FA FA 
0f070     F9 FC FC 00 
0f074     01 05 05 03 | 	byte	$fd, $fd, $01, $07, $04, $ff, $fa, $fa, $f9, $fc, $fc, $00, $01, $05, $05, $03
0f078     00 FD F9 FD 
0f07c     00 00 03 03 
0f080     06 01 FA FB 
0f084     00 04 09 02 | 	byte	$00, $fd, $f9, $fd, $00, $00, $03, $03, $06, $01, $fa, $fb, $00, $04, $09, $02
0f088     FF FC 02 07 
0f08c     03 FE F9 F7 
0f090     FA FC FE 04 
0f094     05 07 05 02 | 	byte	$ff, $fc, $02, $07, $03, $fe, $f9, $f7, $fa, $fc, $fe, $04, $05, $07, $05, $02
0f098     FD F9 F9 FE 
0f09c     01 01 02 03 
0f0a0     02 FF FB FD 
0f0a4     04 08 0A 02 | 	byte	$fd, $f9, $f9, $fe, $01, $01, $02, $03, $02, $ff, $fb, $fd, $04, $08, $0a, $02
0f0a8     FD FB FF 05 
0f0ac     02 FC F9 F8 
0f0b0     F9 FA FF 05 
0f0b4     09 0B 08 05 | 	byte	$fd, $fb, $ff, $05, $02, $fc, $f9, $f8, $f9, $fa, $ff, $05, $09, $0b, $08, $05
0f0b8     FC F5 F5 FA 
0f0bc     FF 02 03 04 
0f0c0     01 FE FD FF 
0f0c4     05 09 08 02 | 	byte	$fc, $f5, $f5, $fa, $ff, $02, $03, $04, $01, $fe, $fd, $ff, $05, $09, $08, $02
0f0c8     FD FD FF 02 
0f0cc     01 FD FC F8 
0f0d0     F8 F9 FE 05 
0f0d4     0A 0E 0C 06 | 	byte	$fd, $fd, $ff, $02, $01, $fd, $fc, $f8, $f8, $f9, $fe, $05, $0a, $0e, $0c, $06
0f0d8     FD F2 F3 F9 
0f0dc     FF 06 06 05 
0f0e0     FD F9 F8 FD 
0f0e4     07 0C 0B 05 | 	byte	$fd, $f2, $f3, $f9, $ff, $06, $06, $05, $fd, $f9, $f8, $fd, $07, $0c, $0b, $05
0f0e8     FF FD FC FA 
0f0ec     FB FA FE FD 
0f0f0     FD FD 02 04 
0f0f4     08 0A 08 02 | 	byte	$ff, $fd, $fc, $fa, $fb, $fa, $fe, $fd, $fd, $fd, $02, $04, $08, $0a, $08, $02
0f0f8     FB F5 F7 FB 
0f0fc     02 08 07 03 
0f100     FA F5 F7 00 
0f104     08 0D 0A 06 | 	byte	$fb, $f5, $f7, $fb, $02, $08, $07, $03, $fa, $f5, $f7, $00, $08, $0d, $0a, $06
0f108     01 FE FB F7 
0f10c     F8 FA FD FE 
0f110     FF 00 03 05 
0f114     09 08 05 00 | 	byte	$01, $fe, $fb, $f7, $f8, $fa, $fd, $fe, $ff, $00, $03, $05, $09, $08, $05, $00
0f118     F9 F7 F8 FC 
0f11c     02 08 09 03 
0f120     F8 F4 F5 FF 
0f124     05 0C 0B 09 | 	byte	$f9, $f7, $f8, $fc, $02, $08, $09, $03, $f8, $f4, $f5, $ff, $05, $0c, $0b, $09
0f128     04 01 FB F6 
0f12c     F4 F8 FB FD 
0f130     FF 02 07 08 
0f134     0B 08 04 FB | 	byte	$04, $01, $fb, $f6, $f4, $f8, $fb, $fd, $ff, $02, $07, $08, $0b, $08, $04, $fb
0f138     F8 F8 FB FD 
0f13c     02 06 07 02 
0f140     F9 F6 F7 00 
0f144     06 0B 08 07 | 	byte	$f8, $f8, $fb, $fd, $02, $06, $07, $02, $f9, $f6, $f7, $00, $06, $0b, $08, $07
0f148     03 01 FD F7 
0f14c     F4 F9 FB FD 
0f150     FE 01 05 05 
0f154     09 06 04 FB | 	byte	$03, $01, $fd, $f7, $f4, $f9, $fb, $fd, $fe, $01, $05, $05, $09, $06, $04, $fb
0f158     FA FC 01 03 
0f15c     04 04 02 FE 
0f160     F9 F8 FB 01 
0f164     06 08 05 03 | 	byte	$fa, $fc, $01, $03, $04, $04, $02, $fe, $f9, $f8, $fb, $01, $06, $08, $05, $03
0f168     00 00 FD FA 
0f16c     F8 FA FD 00 
0f170     02 03 03 05 
0f174     05 03 00 FB | 	byte	$00, $00, $fd, $fa, $f8, $fa, $fd, $00, $02, $03, $03, $05, $05, $03, $00, $fb
0f178     F9 FF 03 06 
0f17c     06 02 FE FA 
0f180     F7 F9 FE 02 
0f184     07 07 08 06 | 	byte	$f9, $ff, $03, $06, $06, $02, $fe, $fa, $f7, $f9, $fe, $02, $07, $07, $08, $06
0f188     03 00 FA F7 
0f18c     F5 F6 FB 02 
0f190     07 0B 07 07 
0f194     01 FF FB F8 | 	byte	$03, $00, $fa, $f7, $f5, $f6, $fb, $02, $07, $0b, $07, $07, $01, $ff, $fb, $f8
0f198     F7 FD 04 09 
0f19c     0A 05 FF FA 
0f1a0     F8 F9 FE FF 
0f1a4     03 03 08 09 | 	byte	$f7, $fd, $04, $09, $0a, $05, $ff, $fa, $f8, $f9, $fe, $ff, $03, $03, $08, $09
0f1a8     08 03 FB F8 
0f1ac     F6 F4 F8 00 
0f1b0     08 0E 0B 07 
0f1b4     00 FA F7 F5 | 	byte	$08, $03, $fb, $f8, $f6, $f4, $f8, $00, $08, $0e, $0b, $07, $00, $fa, $f7, $f5
0f1b8     F7 FD 05 0A 
0f1bc     0C 08 01 FA 
0f1c0     F8 FB FF 00 
0f1c4     00 00 06 09 | 	byte	$f7, $fd, $05, $0a, $0c, $08, $01, $fa, $f8, $fb, $ff, $00, $00, $00, $06, $09
0f1c8     08 03 FB F8 
0f1cc     F7 F4 F6 FD 
0f1d0     09 10 12 0B 
0f1d4     01 F8 F1 F2 | 	byte	$08, $03, $fb, $f8, $f7, $f4, $f6, $fd, $09, $10, $12, $0b, $01, $f8, $f1, $f2
0f1d8     F6 FD 04 0B 
0f1dc     0C 0A 01 FA 
0f1e0     F6 FA FE FF 
0f1e4     FE FF 08 0B | 	byte	$f6, $fd, $04, $0b, $0c, $0a, $01, $fa, $f6, $fa, $fe, $ff, $fe, $ff, $08, $0b
0f1e8     0A 04 FC F7 
0f1ec     F5 F2 F5 FB 
0f1f0     09 10 14 0E 
0f1f4     03 F8 EF F1 | 	byte	$0a, $04, $fc, $f7, $f5, $f2, $f5, $fb, $09, $10, $14, $0e, $03, $f8, $ef, $f1
0f1f8     F5 FC 01 08 
0f1fc     0B 0A 02 FB 
0f200     F8 FB FD FE 
0f204     FD FF 06 09 | 	byte	$f5, $fc, $01, $08, $0b, $0a, $02, $fb, $f8, $fb, $fd, $fe, $fd, $ff, $06, $09
0f208     0B 04 00 F9 
0f20c     F3 F2 F5 FB 
0f210     08 10 14 0E 
0f214     03 F7 EF EF | 	byte	$0b, $04, $00, $f9, $f3, $f2, $f5, $fb, $08, $10, $14, $0e, $03, $f7, $ef, $ef
0f218     F6 FF 03 09 
0f21c     0B 09 00 FA 
0f220     F7 FC FD 00 
0f224     FF 05 07 08 | 	byte	$f6, $ff, $03, $09, $0b, $09, $00, $fa, $f7, $fc, $fd, $00, $ff, $05, $07, $08
0f228     07 02 FC F8 
0f22c     F2 F5 FA 02 
0f230     0A 0E 10 07 
0f234     FF F2 F0 F1 | 	byte	$07, $02, $fc, $f8, $f2, $f5, $fa, $02, $0a, $0e, $10, $07, $ff, $f2, $f0, $f1
0f238     FB 04 09 0A 
0f23c     09 03 FD F8 
0f240     F9 FF 00 02 
0f244     01 08 06 05 | 	byte	$fb, $04, $09, $0a, $09, $03, $fd, $f8, $f9, $ff, $00, $02, $01, $08, $06, $05
0f248     03 00 FC F9 
0f24c     F5 F7 FC 04 
0f250     09 0B 0A 02 
0f254     FE F6 F4 F5 | 	byte	$03, $00, $fc, $f9, $f5, $f7, $fc, $04, $09, $0b, $0a, $02, $fe, $f6, $f4, $f5
0f258     FC 05 0A 0B 
0f25c     07 00 FB F7 
0f260     FA FE FF 02 
0f264     04 07 05 02 | 	byte	$fc, $05, $0a, $0b, $07, $00, $fb, $f7, $fa, $fe, $ff, $02, $04, $07, $05, $02
0f268     FE FD FC FA 
0f26c     F9 FB 00 07 
0f270     09 08 03 FE 
0f274     FD FA FA F9 | 	byte	$fe, $fd, $fc, $fa, $f9, $fb, $00, $07, $09, $08, $03, $fe, $fd, $fa, $fa, $f9
0f278     FF 04 09 09 
0f27c     04 FE FB F9 
0f280     FC FF 01 02 
0f284     05 07 05 01 | 	byte	$ff, $04, $09, $09, $04, $fe, $fb, $f9, $fc, $ff, $01, $02, $05, $07, $05, $01
0f288     FC FC FC FA 
0f28c     F9 FC 00 08 
0f290     08 06 FF FE 
0f294     FD FE FC FB | 	byte	$fc, $fc, $fc, $fa, $f9, $fc, $00, $08, $08, $06, $ff, $fe, $fd, $fe, $fc, $fb
0f298     FC 00 07 08 
0f29c     05 00 FB FB 
0f2a0     FF FF 01 00 
0f2a4     03 06 04 01 | 	byte	$fc, $00, $07, $08, $05, $00, $fb, $fb, $ff, $ff, $01, $00, $03, $06, $04, $01
0f2a8     FB FA F9 FB 
0f2ac     FB FF 02 0A 
0f2b0     09 04 FB F9 
0f2b4     FA FF 02 01 | 	byte	$fb, $fa, $f9, $fb, $fb, $ff, $02, $0a, $09, $04, $fb, $f9, $fa, $ff, $02, $01
0f2b8     00 00 04 06 
0f2bc     02 FE FA FE 
0f2c0     04 04 03 FE 
0f2c4     FF 01 FF FD | 	byte	$00, $00, $04, $06, $02, $fe, $fa, $fe, $04, $04, $03, $fe, $ff, $01, $ff, $fd
0f2c8     FA FA FD FF 
0f2cc     01 03 05 07 
0f2d0     05 00 F8 F7 
0f2d4     F9 02 07 07 | 	byte	$fa, $fa, $fd, $ff, $01, $03, $05, $07, $05, $00, $f8, $f7, $f9, $02, $07, $07
0f2d8     03 02 02 02 
0f2dc     FE FB FA FF 
0f2e0     06 07 04 FF 
0f2e4     00 00 FE FC | 	byte	$03, $02, $02, $02, $fe, $fb, $fa, $ff, $06, $07, $04, $ff, $00, $00, $fe, $fc
0f2e8     FA F8 FB FF 
0f2ec     05 06 0A 07 
0f2f0     04 FD F7 F3 
0f2f4     F7 00 06 09 | 	byte	$fa, $f8, $fb, $ff, $05, $06, $0a, $07, $04, $fd, $f7, $f3, $f7, $00, $06, $09
0f2f8     05 04 02 00 
0f2fc     FB F9 F9 01 
0f300     07 09 05 01 
0f304     00 FE FC FA | 	byte	$05, $04, $02, $00, $fb, $f9, $f9, $01, $07, $09, $05, $01, $00, $fe, $fc, $fa
0f308     F9 FA FB FF 
0f30c     06 08 0B 07 
0f310     03 FB F7 F3 
0f314     F8 00 06 09 | 	byte	$f9, $fa, $fb, $ff, $06, $08, $0b, $07, $03, $fb, $f7, $f3, $f8, $00, $06, $09
0f318     07 05 01 FE 
0f31c     F9 F7 FB 04 
0f320     08 0B 05 02 
0f324     00 FC FA F9 | 	byte	$07, $05, $01, $fe, $f9, $f7, $fb, $04, $08, $0b, $05, $02, $00, $fc, $fa, $f9
0f328     FA FB FC FE 
0f32c     04 07 0A 06 
0f330     01 FA F7 F6 
0f334     FB 01 05 07 | 	byte	$fa, $fb, $fc, $fe, $04, $07, $0a, $06, $01, $fa, $f7, $f6, $fb, $01, $05, $07
0f338     08 08 04 FF 
0f33c     F8 F7 FB 04 
0f340     07 09 03 01 
0f344     FE FA F8 F8 | 	byte	$08, $08, $04, $ff, $f8, $f7, $fb, $04, $07, $09, $03, $01, $fe, $fa, $f8, $f8
0f348     FC 00 00 00 
0f34c     02 06 07 03 
0f350     00 FA FA FB 
0f354     FF 01 03 03 | 	byte	$fc, $00, $00, $00, $02, $06, $07, $03, $00, $fa, $fa, $fb, $ff, $01, $03, $03
0f358     06 07 04 FD 
0f35c     F7 F8 FE 07 
0f360     08 07 04 01 
0f364     FD F7 F4 F8 | 	byte	$06, $07, $04, $fd, $f7, $f8, $fe, $07, $08, $07, $04, $01, $fd, $f7, $f4, $f8
0f368     FC 02 02 03 
0f36c     02 06 06 02 
0f370     FE FB FB FD 
0f374     01 00 02 02 | 	byte	$fc, $02, $02, $03, $02, $06, $06, $02, $fe, $fb, $fb, $fd, $01, $00, $02, $02
0f378     05 07 05 FC 
0f37c     F6 F7 FE 05 
0f380     08 07 07 05 
0f384     FE F9 F4 F6 | 	byte	$05, $07, $05, $fc, $f6, $f7, $fe, $05, $08, $07, $07, $05, $fe, $f9, $f4, $f6
0f388     FB 00 02 04 
0f38c     04 06 05 02 
0f390     FD FA FA FC 
0f394     01 02 03 03 | 	byte	$fb, $00, $02, $04, $04, $06, $05, $02, $fd, $fa, $fa, $fc, $01, $02, $03, $03
0f398     06 07 05 FA 
0f39c     F6 F7 00 05 
0f3a0     08 06 08 06 
0f3a4     FF F7 F3 F4 | 	byte	$06, $07, $05, $fa, $f6, $f7, $00, $05, $08, $06, $08, $06, $ff, $f7, $f3, $f4
0f3a8     FA FE 02 06 
0f3ac     06 07 04 01 
0f3b0     FC F9 F9 FC 
0f3b4     00 02 03 05 | 	byte	$fa, $fe, $02, $06, $06, $07, $04, $01, $fc, $f9, $f9, $fc, $00, $02, $03, $05
0f3b8     09 08 04 FA 
0f3bc     F4 F5 FE 03 
0f3c0     06 06 0A 08 
0f3c4     FF F7 F4 F4 | 	byte	$09, $08, $04, $fa, $f4, $f5, $fe, $03, $06, $06, $0a, $08, $ff, $f7, $f4, $f4
0f3c8     F9 FE 01 05 
0f3cc     06 06 03 01 
0f3d0     FD FB FB FF 
0f3d4     00 00 01 04 | 	byte	$f9, $fe, $01, $05, $06, $06, $03, $01, $fd, $fb, $fb, $ff, $00, $00, $01, $04
0f3d8     08 08 03 FC 
0f3dc     F8 F9 FE 00 
0f3e0     02 04 09 08 
0f3e4     01 F9 F6 F6 | 	byte	$08, $08, $03, $fc, $f8, $f9, $fe, $00, $02, $04, $09, $08, $01, $f9, $f6, $f6
0f3e8     F9 FE 01 04 
0f3ec     06 05 03 01 
0f3f0     FD FC FA FF 
0f3f4     FF 01 01 04 | 	byte	$f9, $fe, $01, $04, $06, $05, $03, $01, $fd, $fc, $fa, $ff, $ff, $01, $01, $04
0f3f8     09 07 01 FC 
0f3fc     FA FD 00 FF 
0f400     01 03 07 06 
0f404     00 F9 F6 F7 | 	byte	$09, $07, $01, $fc, $fa, $fd, $00, $ff, $01, $03, $07, $06, $00, $f9, $f6, $f7
0f408     FB FF 03 04 
0f40c     06 05 03 00 
0f410     FD FC FB FD 
0f414     FE 01 02 05 | 	byte	$fb, $ff, $03, $04, $06, $05, $03, $00, $fd, $fc, $fb, $fd, $fe, $01, $02, $05
0f418     07 06 FF FB 
0f41c     FC 00 00 FF 
0f420     FF 02 05 04 
0f424     00 FC F9 FA | 	byte	$07, $06, $ff, $fb, $fc, $00, $00, $ff, $ff, $02, $05, $04, $00, $fc, $f9, $fa
0f428     FD FF 01 01 
0f42c     03 03 04 01 
0f430     00 FE FF FD 
0f434     FD FF 00 04 | 	byte	$fd, $ff, $01, $01, $03, $03, $04, $01, $00, $fe, $ff, $fd, $fd, $ff, $00, $04
0f438     05 05 00 FD 
0f43c     FF 03 00 FE 
0f440     FD 01 04 01 
0f444     FD FC FB FC | 	byte	$05, $05, $00, $fd, $ff, $03, $00, $fe, $fd, $01, $04, $01, $fd, $fc, $fb, $fc
0f448     FE FF 00 00 
0f44c     03 04 06 02 
0f450     02 FF FF FB 
0f454     F9 FB FF 04 | 	byte	$fe, $ff, $00, $00, $03, $04, $06, $02, $02, $ff, $ff, $fb, $f9, $fb, $ff, $04
0f458     05 03 01 FE 
0f45c     01 04 00 FF 
0f460     00 04 05 00 
0f464     FB FB FA FD | 	byte	$05, $03, $01, $fe, $01, $04, $00, $ff, $00, $04, $05, $00, $fb, $fb, $fa, $fd
0f468     FD FE FE 01 
0f46c     03 06 06 03 
0f470     03 01 00 FC 
0f474     F9 F8 FE 02 | 	byte	$fd, $fe, $fe, $01, $03, $06, $06, $03, $03, $01, $00, $fc, $f9, $f8, $fe, $02
0f478     05 01 01 02 
0f47c     04 05 00 FF 
0f480     01 04 03 FD 
0f484     F9 FA FD 01 | 	byte	$05, $01, $01, $02, $04, $05, $00, $ff, $01, $04, $03, $fd, $f9, $fa, $fd, $01
0f488     00 FE FB FD 
0f48c     FE 03 04 04 
0f490     06 05 04 FE 
0f494     F8 F6 FB 00 | 	byte	$00, $fe, $fb, $fd, $fe, $03, $04, $04, $06, $05, $04, $fe, $f8, $f6, $fb, $00
0f498     03 01 01 04 
0f49c     08 05 00 FE 
0f4a0     00 03 FF FB 
0f4a4     F9 FC 01 04 | 	byte	$03, $01, $01, $04, $08, $05, $00, $fe, $00, $03, $ff, $fb, $f9, $fc, $01, $04
0f4a8     02 FE F9 F8 
0f4ac     FB 01 04 06 
0f4b0     09 07 05 FD 
0f4b4     F8 F6 FA FE | 	byte	$02, $fe, $f9, $f8, $fb, $01, $04, $06, $09, $07, $05, $fd, $f8, $f6, $fa, $fe
0f4b8     00 FF 00 05 
0f4bc     0A 07 04 00 
0f4c0     00 00 FD F8 
0f4c4     F8 FB 02 06 | 	byte	$00, $ff, $00, $05, $0a, $07, $04, $00, $00, $00, $fd, $f8, $f8, $fb, $02, $06
0f4c8     05 01 FA F8 
0f4cc     FA FF 01 05 
0f4d0     08 09 06 00 
0f4d4     FA F9 FA FD | 	byte	$05, $01, $fa, $f8, $fa, $ff, $01, $05, $08, $09, $06, $00, $fa, $f9, $fa, $fd
0f4d8     FD FC FE 04 
0f4dc     0A 09 06 03 
0f4e0     02 FE FC F7 
0f4e4     F9 FB 03 07 | 	byte	$fd, $fc, $fe, $04, $0a, $09, $06, $03, $02, $fe, $fc, $f7, $f9, $fb, $03, $07
0f4e8     07 01 FB F8 
0f4ec     FA FE 00 05 
0f4f0     06 08 05 00 
0f4f4     FC FB FC FD | 	byte	$07, $01, $fb, $f8, $fa, $fe, $00, $05, $06, $08, $05, $00, $fc, $fb, $fc, $fd
0f4f8     FC FB FE 04 
0f4fc     08 08 09 06 
0f500     05 FF FA F7 
0f504     F8 FD 02 05 | 	byte	$fc, $fb, $fe, $04, $08, $08, $09, $06, $05, $ff, $fa, $f7, $f8, $fd, $02, $05
0f508     05 00 FC F9 
0f50c     FA FD FE 03 
0f510     05 07 03 01 
0f514     FE FE FE FE | 	byte	$05, $00, $fc, $f9, $fa, $fd, $fe, $03, $05, $07, $03, $01, $fe, $fe, $fe, $fe
0f518     FC FB FF 04 
0f51c     06 05 06 06 
0f520     05 FF FA F7 
0f524     F8 FD 03 05 | 	byte	$fc, $fb, $ff, $04, $06, $05, $06, $06, $05, $ff, $fa, $f7, $f8, $fd, $03, $05
0f528     05 01 FE FB 
0f52c     FB FB FD 02 
0f530     05 07 05 02 
0f534     FF FD FD FC | 	byte	$05, $01, $fe, $fb, $fb, $fb, $fd, $02, $05, $07, $05, $02, $ff, $fd, $fd, $fc
0f538     FC FD 01 06 
0f53c     04 04 03 06 
0f540     06 02 F9 F5 
0f544     F7 FC 02 04 | 	byte	$fc, $fd, $01, $06, $04, $04, $03, $06, $06, $02, $f9, $f5, $f7, $fc, $02, $04
0f548     05 02 01 FD 
0f54c     FC F9 FB FF 
0f550     05 07 04 03 
0f554     01 FE FC F9 | 	byte	$05, $02, $01, $fd, $fc, $f9, $fb, $ff, $05, $07, $04, $03, $01, $fe, $fc, $f9
0f558     F9 FD 04 08 
0f55c     06 04 03 05 
0f560     05 00 F9 F7 
0f564     F8 FD 01 03 | 	byte	$f9, $fd, $04, $08, $06, $04, $03, $05, $05, $00, $f9, $f7, $f8, $fd, $01, $03
0f568     02 01 00 FF 
0f56c     FD FA FC FE 
0f570     03 06 05 04 
0f574     02 01 FD F8 | 	byte	$02, $01, $00, $ff, $fd, $fa, $fc, $fe, $03, $06, $05, $04, $02, $01, $fd, $f8
0f578     F7 FC 04 09 
0f57c     07 05 04 04 
0f580     02 FD F9 F8 
0f584     F9 FE 01 02 | 	byte	$f7, $fc, $04, $09, $07, $05, $04, $04, $02, $fd, $f9, $f8, $f9, $fe, $01, $02
0f588     00 00 FF FF 
0f58c     FD FA FC FE 
0f590     05 06 06 03 
0f594     03 01 FE F6 | 	byte	$00, $00, $ff, $ff, $fd, $fa, $fc, $fe, $05, $06, $06, $03, $03, $01, $fe, $f6
0f598     F5 FB 05 09 
0f59c     08 07 05 04 
0f5a0     FF FB F8 FA 
0f5a4     FA FF 02 02 | 	byte	$f5, $fb, $05, $09, $08, $07, $05, $04, $ff, $fb, $f8, $fa, $fa, $ff, $02, $02
0f5a8     01 00 00 00 
0f5ac     FC FB FC FF 
0f5b0     03 04 05 03 
0f5b4     04 03 FE F8 | 	byte	$01, $00, $00, $00, $fc, $fb, $fc, $ff, $03, $04, $05, $03, $04, $03, $fe, $f8
0f5b8     F6 FB 05 07 
0f5bc     08 08 06 04 
0f5c0     FF FA F9 FA 
0f5c4     FB FE 00 01 | 	byte	$f6, $fb, $05, $07, $08, $08, $06, $04, $ff, $fa, $f9, $fa, $fb, $fe, $00, $01
0f5c8     00 00 00 02 
0f5cc     FD FC FD 01 
0f5d0     03 03 02 03 
0f5d4     04 03 FD F9 | 	byte	$00, $00, $00, $02, $fd, $fc, $fd, $01, $03, $03, $02, $03, $04, $03, $fd, $f9
0f5d8     F8 FE 05 06 
0f5dc     07 07 06 02 
0f5e0     FE F9 FA FB 
0f5e4     FF 00 00 00 | 	byte	$f8, $fe, $05, $06, $07, $07, $06, $02, $fe, $f9, $fa, $fb, $ff, $00, $00, $00
0f5e8     FF FF FF 00 
0f5ec     FD FF 01 05 
0f5f0     04 01 FF 00 
0f5f4     01 00 FB F9 | 	byte	$ff, $ff, $ff, $00, $fd, $ff, $01, $05, $04, $01, $ff, $00, $01, $00, $fb, $f9
0f5f8     FC 01 06 06 
0f5fc     07 05 04 00 
0f600     FC FA FB FD 
0f604     02 02 00 FD | 	byte	$fc, $01, $06, $06, $07, $05, $04, $00, $fc, $fa, $fb, $fd, $02, $02, $00, $fd
0f608     FD FD FE FE 
0f60c     FE 03 04 07 
0f610     03 FF FC FE 
0f614     00 FF FC FC | 	byte	$fd, $fd, $fe, $fe, $fe, $03, $04, $07, $03, $ff, $fc, $fe, $00, $ff, $fc, $fc
0f618     FF 06 07 05 
0f61c     03 03 03 00 
0f620     FD FB FD FF 
0f624     02 01 FD FB | 	byte	$ff, $06, $07, $05, $03, $03, $03, $00, $fd, $fb, $fd, $ff, $02, $01, $fd, $fb
0f628     FB FE FF FF 
0f62c     01 05 06 06 
0f630     02 FD FB FF 
0f634     FF FD FA FB | 	byte	$fb, $fe, $ff, $ff, $01, $05, $06, $06, $02, $fd, $fb, $ff, $ff, $fd, $fa, $fb
0f638     01 08 07 06 
0f63c     03 02 02 FF 
0f640     FD FC FE FF 
0f644     03 01 FD FA | 	byte	$01, $08, $07, $06, $03, $02, $02, $ff, $fd, $fc, $fe, $ff, $03, $01, $fd, $fa
0f648     FA FC FF FF 
0f64c     03 06 08 06 
0f650     FF FB F9 FE 
0f654     FE FC F9 FC | 	byte	$fa, $fc, $ff, $ff, $03, $06, $08, $06, $ff, $fb, $f9, $fe, $fe, $fc, $f9, $fc
0f658     03 0A 08 05 
0f65c     00 00 FF FF 
0f660     FE FF 00 02 
0f664     03 00 FC F7 | 	byte	$03, $0a, $08, $05, $00, $00, $ff, $ff, $fe, $ff, $00, $02, $03, $00, $fc, $f7
0f668     F7 FC 01 02 
0f66c     06 07 08 04 
0f670     FD F8 FA FD 
0f674     00 FD FC FE | 	byte	$f7, $fc, $01, $02, $06, $07, $08, $04, $fd, $f8, $fa, $fd, $00, $fd, $fc, $fe
0f678     04 08 06 03 
0f67c     FF FF FD 00 
0f680     01 04 03 04 
0f684     01 FD F9 F6 | 	byte	$04, $08, $06, $03, $ff, $ff, $fd, $00, $01, $04, $03, $04, $01, $fd, $f9, $f6
0f688     F7 FD 03 05 
0f68c     09 08 07 01 
0f690     FB F7 FA FC 
0f694     FF FF FE 01 | 	byte	$f7, $fd, $03, $05, $09, $08, $07, $01, $fb, $f7, $fa, $fc, $ff, $ff, $fe, $01
0f698     05 06 06 03 
0f69c     FF FF FD FF 
0f6a0     00 03 04 05 
0f6a4     02 FE F8 F5 | 	byte	$05, $06, $06, $03, $ff, $ff, $fd, $ff, $00, $03, $04, $05, $02, $fe, $f8, $f5
0f6a8     F7 FD 02 06 
0f6ac     09 09 06 FF 
0f6b0     FA F7 FA FD 
0f6b4     FE FF 01 04 | 	byte	$f7, $fd, $02, $06, $09, $09, $06, $ff, $fa, $f7, $fa, $fd, $fe, $ff, $01, $04
0f6b8     07 05 04 00 
0f6bc     FE FE FD FF 
0f6c0     02 04 05 04 
0f6c4     01 FC F7 F6 | 	byte	$07, $05, $04, $00, $fe, $fe, $fd, $ff, $02, $04, $05, $04, $01, $fc, $f7, $f6
0f6c8     F9 FF 02 08 
0f6cc     0A 08 04 FD 
0f6d0     F9 F9 FB FC 
0f6d4     FC FD 02 05 | 	byte	$f9, $ff, $02, $08, $0a, $08, $04, $fd, $f9, $f9, $fb, $fc, $fc, $fd, $02, $05
0f6d8     08 05 03 00 
0f6dc     FE FE FE FF 
0f6e0     02 04 06 06 
0f6e4     00 FC F7 F7 | 	byte	$08, $05, $03, $00, $fe, $fe, $fe, $ff, $02, $04, $06, $06, $00, $fc, $f7, $f7
0f6e8     F9 FF 00 06 
0f6ec     09 08 03 FC 
0f6f0     F9 FC FE FE 
0f6f4     FB FB 00 06 | 	byte	$f9, $ff, $00, $06, $09, $08, $03, $fc, $f9, $fc, $fe, $fe, $fb, $fb, $00, $06
0f6f8     08 05 03 00 
0f6fc     FF FE FD FE 
0f700     00 02 06 07 
0f704     01 FB F6 F6 | 	byte	$08, $05, $03, $00, $ff, $fe, $fd, $fe, $00, $02, $06, $07, $01, $fb, $f6, $f6
0f708     F9 FE 02 07 
0f70c     0A 09 01 FA 
0f710     F6 FB FE FE 
0f714     FB FC 01 08 | 	byte	$f9, $fe, $02, $07, $0a, $09, $01, $fa, $f6, $fb, $fe, $fe, $fb, $fc, $01, $08
0f718     0A 07 03 00 
0f71c     FF FE FC FC 
0f720     FF 02 07 07 
0f724     02 FB F7 F6 | 	byte	$0a, $07, $03, $00, $ff, $fe, $fc, $fc, $ff, $02, $07, $07, $02, $fb, $f7, $f6
0f728     F9 FD 01 07 
0f72c     09 07 00 F9 
0f730     F8 FC FF FF 
0f734     FC FC 01 08 | 	byte	$f9, $fd, $01, $07, $09, $07, $00, $f9, $f8, $fc, $ff, $ff, $fc, $fc, $01, $08
0f738     09 07 03 00 
0f73c     00 FD FC FC 
0f740     FE 01 05 06 
0f744     03 FC F7 F7 | 	byte	$09, $07, $03, $00, $00, $fd, $fc, $fc, $fe, $01, $05, $06, $03, $fc, $f7, $f7
0f748     FB FF 03 08 
0f74c     08 05 FE F7 
0f750     F8 FC FF FF 
0f754     FE FE 01 07 | 	byte	$fb, $ff, $03, $08, $08, $05, $fe, $f7, $f8, $fc, $ff, $ff, $fe, $fe, $01, $07
0f758     07 06 03 01 
0f75c     01 FF FD FE 
0f760     FD 00 03 04 
0f764     02 FB F7 F8 | 	byte	$07, $06, $03, $01, $01, $ff, $fd, $fe, $fd, $00, $03, $04, $02, $fb, $f7, $f8
0f768     FD 01 05 08 
0f76c     08 03 FB F7 
0f770     F9 FE 01 01 
0f774     FF FF 01 04 | 	byte	$fd, $01, $05, $08, $08, $03, $fb, $f7, $f9, $fe, $01, $01, $ff, $ff, $01, $04
0f778     05 05 03 02 
0f77c     02 01 FE FE 
0f780     FC FE 02 03 
0f784     02 FD FA FA | 	byte	$05, $05, $03, $02, $02, $01, $fe, $fe, $fc, $fe, $02, $03, $02, $fd, $fa, $fa
0f788     FF 01 06 07 
0f78c     06 00 FB F7 
0f790     FA FE 00 00 
0f794     00 01 02 03 | 	byte	$ff, $01, $06, $07, $06, $00, $fb, $f7, $fa, $fe, $00, $00, $00, $01, $02, $03
0f798     03 04 04 03 
0f79c     01 00 FF FD 
0f7a0     FC FD 01 02 
0f7a4     00 FE FC FD | 	byte	$03, $04, $04, $03, $01, $00, $ff, $fd, $fc, $fd, $01, $02, $00, $fe, $fc, $fd
0f7a8     FF 02 06 06 
0f7ac     04 FF FB F9 
0f7b0     FB FE FF 00 
0f7b4     01 02 04 02 | 	byte	$ff, $02, $06, $06, $04, $ff, $fb, $f9, $fb, $fe, $ff, $00, $01, $02, $04, $02
0f7b8     02 03 04 05 
0f7bc     02 FF FE FC 
0f7c0     FA FC FF 00 
0f7c4     FE FE FE 00 | 	byte	$02, $03, $04, $05, $02, $ff, $fe, $fc, $fa, $fc, $ff, $00, $fe, $fe, $fe, $00
0f7c8     01 04 06 04 
0f7cc     02 FD FA FA 
0f7d0     FD 00 01 00 
0f7d4     00 02 02 00 | 	byte	$01, $04, $06, $04, $02, $fd, $fa, $fa, $fd, $00, $01, $00, $00, $02, $02, $00
0f7d8     00 01 05 06 
0f7dc     05 02 00 FD 
0f7e0     FB FC FD FE 
0f7e4     FD FD FF 02 | 	byte	$00, $01, $05, $06, $05, $02, $00, $fd, $fb, $fc, $fd, $fe, $fd, $fd, $ff, $02
0f7e8     03 05 06 04 
0f7ec     00 FB F8 F9 
0f7f0     FE 01 02 01 
0f7f4     01 01 01 00 | 	byte	$03, $05, $06, $04, $00, $fb, $f8, $f9, $fe, $01, $02, $01, $01, $01, $01, $00
0f7f8     00 01 05 07 
0f7fc     06 02 FF FC 
0f800     FC FC FD FC 
0f804     FD FD 00 03 | 	byte	$00, $01, $05, $07, $06, $02, $ff, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $00, $03
0f808     04 06 06 03 
0f80c     FF F9 F6 F9 
0f810     FD 02 02 01 
0f814     01 02 01 00 | 	byte	$04, $06, $06, $03, $ff, $f9, $f6, $f9, $fd, $02, $02, $01, $01, $02, $01, $00
0f818     FF 00 03 05 
0f81c     06 03 00 FD 
0f820     FD FD FC FB 
0f824     FC FE 01 04 | 	byte	$ff, $00, $03, $05, $06, $03, $00, $fd, $fd, $fd, $fc, $fb, $fc, $fe, $01, $04
0f828     04 06 05 04 
0f82c     FF F9 F7 FB 
0f830     FF 02 01 02 
0f834     01 01 FF FF | 	byte	$04, $06, $05, $04, $ff, $f9, $f7, $fb, $ff, $02, $01, $02, $01, $01, $ff, $ff
0f838     00 02 03 04 
0f83c     04 04 00 FD 
0f840     FB FC FC FC 
0f844     FD FF 02 03 | 	byte	$00, $02, $03, $04, $04, $04, $00, $fd, $fb, $fc, $fc, $fc, $fd, $ff, $02, $03
0f848     03 05 04 02 
0f84c     FE FA FA FD 
0f850     01 02 01 01 
0f854     01 FF FE FE | 	byte	$03, $05, $04, $02, $fe, $fa, $fa, $fd, $01, $02, $01, $01, $01, $ff, $fe, $fe
0f858     00 03 04 03 
0f85c     03 03 01 FF 
0f860     FD FB FB FB 
0f864     FE 00 02 03 | 	byte	$00, $03, $04, $03, $03, $03, $01, $ff, $fd, $fb, $fb, $fb, $fe, $00, $02, $03
0f868     04 05 04 FF 
0f86c     FC FA FB FF 
0f870     01 02 00 01 
0f874     00 FF FE FE | 	byte	$04, $05, $04, $ff, $fc, $fa, $fb, $ff, $01, $02, $00, $01, $00, $ff, $fe, $fe
0f878     01 04 04 03 
0f87c     01 01 00 FF 
0f880     FE FB FB FC 
0f884     FF 01 02 02 | 	byte	$01, $04, $04, $03, $01, $01, $00, $ff, $fe, $fb, $fb, $fc, $ff, $01, $02, $02
0f888     03 04 04 FF 
0f88c     FC FB FE 00 
0f890     00 00 FF 00 
0f894     FE FF 00 01 | 	byte	$03, $04, $04, $ff, $fc, $fb, $fe, $00, $00, $00, $ff, $00, $fe, $ff, $00, $01
0f898     02 04 02 02 
0f89c     FF 00 00 00 
0f8a0     FF FE FC FD 
0f8a4     FE 01 02 02 | 	byte	$02, $04, $02, $02, $ff, $00, $00, $00, $ff, $fe, $fc, $fd, $fe, $01, $02, $02
0f8a8     04 04 04 FF 
0f8ac     FC FB FE FF 
0f8b0     00 00 FF 00 
0f8b4     00 FF 01 01 | 	byte	$04, $04, $04, $ff, $fc, $fb, $fe, $ff, $00, $00, $ff, $00, $00, $ff, $01, $01
0f8b8     01 01 00 00 
0f8bc     00 01 01 02 
0f8c0     00 FD FB FB 
0f8c4     FE 02 03 03 | 	byte	$01, $01, $00, $00, $00, $01, $01, $02, $00, $fd, $fb, $fb, $fe, $02, $03, $03
0f8c8     03 03 01 FE 
0f8cc     FD FD 00 01 
0f8d0     01 FF FF FE 
0f8d4     FF FF 01 02 | 	byte	$03, $03, $01, $fe, $fd, $fd, $00, $01, $01, $ff, $ff, $fe, $ff, $ff, $01, $02
0f8d8     01 02 00 01 
0f8dc     02 02 02 01 
0f8e0     FE FC FB FC 
0f8e4     FF 03 03 04 | 	byte	$01, $02, $00, $01, $02, $02, $02, $01, $fe, $fc, $fb, $fc, $ff, $03, $03, $04
0f8e8     03 03 00 FC 
0f8ec     FB FD 00 01 
0f8f0     01 00 FF FF 
0f8f4     FF 00 00 01 | 	byte	$03, $03, $00, $fc, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $ff, $00, $00, $01
0f8f8     01 00 00 01 
0f8fc     03 03 02 00 
0f900     FD FC FB FD 
0f904     00 02 02 03 | 	byte	$01, $00, $00, $01, $03, $03, $02, $00, $fd, $fc, $fb, $fd, $00, $02, $02, $03
0f908     02 02 00 FD 
0f90c     FC FE 00 01 
0f910     00 FE FF FE 
0f914     FE 00 01 02 | 	byte	$02, $02, $00, $fd, $fc, $fe, $00, $01, $00, $fe, $ff, $fe, $fe, $00, $01, $02
0f918     02 01 01 02 
0f91c     03 02 01 FE 
0f920     FB FA FC FF 
0f924     02 04 03 02 | 	byte	$02, $01, $01, $02, $03, $02, $01, $fe, $fb, $fa, $fc, $ff, $02, $04, $03, $02
0f928     02 01 FE FC 
0f92c     FD 01 03 03 
0f930     01 FE FD FC 
0f934     FD FE 00 01 | 	byte	$02, $01, $fe, $fc, $fd, $01, $03, $03, $01, $fe, $fd, $fc, $fd, $fe, $00, $01
0f938     02 02 02 03 
0f93c     04 03 02 FE 
0f940     FB F9 FB 00 
0f944     04 05 03 02 | 	byte	$02, $02, $02, $03, $04, $03, $02, $fe, $fb, $f9, $fb, $00, $04, $05, $03, $02
0f948     02 00 FC FB 
0f94c     FD 01 03 03 
0f950     01 FF FE FE 
0f954     FE FF FF 00 | 	byte	$02, $00, $fc, $fb, $fd, $01, $03, $03, $01, $ff, $fe, $fe, $fe, $ff, $ff, $00
0f958     01 01 02 04 
0f95c     05 05 02 FE 
0f960     FA F8 FA FF 
0f964     03 04 03 03 | 	byte	$01, $01, $02, $04, $05, $05, $02, $fe, $fa, $f8, $fa, $ff, $03, $04, $03, $03
0f968     02 FF FC FB 
0f96c     FE 01 02 02 
0f970     01 00 FE FE 
0f974     FF FF FF FF | 	byte	$02, $ff, $fc, $fb, $fe, $01, $02, $02, $01, $00, $fe, $fe, $ff, $ff, $ff, $ff
0f978     FF 01 03 05 
0f97c     06 06 02 FE 
0f980     FB F8 FB FF 
0f984     03 04 04 03 | 	byte	$ff, $01, $03, $05, $06, $06, $02, $fe, $fb, $f8, $fb, $ff, $03, $04, $04, $03
0f988     00 FC FA FB 
0f98c     00 02 04 03 
0f990     01 00 FD FD 
0f994     FF 00 00 FF | 	byte	$00, $fc, $fa, $fb, $00, $02, $04, $03, $01, $00, $fd, $fd, $ff, $00, $00, $ff
0f998     00 00 02 04 
0f99c     05 05 02 FE 
0f9a0     FA F9 FC FF 
0f9a4     03 03 04 03 | 	byte	$00, $00, $02, $04, $05, $05, $02, $fe, $fa, $f9, $fc, $ff, $03, $03, $04, $03
0f9a8     00 FC FB FD 
0f9ac     01 03 03 02 
0f9b0     00 FE FC FC 
0f9b4     FF 01 02 01 | 	byte	$00, $fc, $fb, $fd, $01, $03, $03, $02, $00, $fe, $fc, $fc, $ff, $01, $02, $01
0f9b8     00 00 02 03 
0f9bc     03 03 01 FF 
0f9c0     FC FC FD 01 
0f9c4     02 03 03 01 | 	byte	$00, $00, $02, $03, $03, $03, $01, $ff, $fc, $fc, $fd, $01, $02, $03, $03, $01
0f9c8     FE FC FC FE 
0f9cc     02 03 03 01 
0f9d0     FF FD FC FD 
0f9d4     FF 02 03 03 | 	byte	$fe, $fc, $fc, $fe, $02, $03, $03, $01, $ff, $fd, $fc, $fd, $ff, $02, $03, $03
0f9d8     00 01 01 02 
0f9dc     01 01 00 FE 
0f9e0     FB FC FE 01 
0f9e4     03 05 04 00 | 	byte	$00, $01, $01, $02, $01, $01, $00, $fe, $fb, $fc, $fe, $01, $03, $05, $04, $00
0f9e8     FC FA FC FF 
0f9ec     02 04 04 02 
0f9f0     00 FC FC FC 
0f9f4     FE 00 02 03 | 	byte	$fc, $fa, $fc, $ff, $02, $04, $04, $02, $00, $fc, $fc, $fc, $fe, $00, $02, $03
0f9f8     03 03 03 02 
0f9fc     01 00 FE FC 
0fa00     FA FC FF 04 
0fa04     06 06 03 FE | 	byte	$03, $03, $03, $02, $01, $00, $fe, $fc, $fa, $fc, $ff, $04, $06, $06, $03, $fe
0fa08     FA F9 FC 01 
0fa0c     04 06 05 02 
0fa10     FE FB FA FC 
0fa14     00 02 03 04 | 	byte	$fa, $f9, $fc, $01, $04, $06, $05, $02, $fe, $fb, $fa, $fc, $00, $02, $03, $04
0fa18     04 03 02 FF 
0fa1c     00 00 FF FB 
0fa20     F9 FC FF 03 
0fa24     05 05 02 FF | 	byte	$04, $03, $02, $ff, $00, $00, $ff, $fb, $f9, $fc, $ff, $03, $05, $05, $02, $ff
0fa28     FB FA FD 03 
0fa2c     05 06 04 01 
0fa30     FD FA F9 FC 
0fa34     00 02 04 05 | 	byte	$fb, $fa, $fd, $03, $05, $06, $04, $01, $fd, $fa, $f9, $fc, $00, $02, $04, $05
0fa38     05 04 01 FE 
0fa3c     FF FF FE FB 
0fa40     FB FC 00 03 
0fa44     04 04 01 FE | 	byte	$05, $04, $01, $fe, $ff, $ff, $fe, $fb, $fb, $fc, $00, $03, $04, $04, $01, $fe
0fa48     FB FC FF 03 
0fa4c     05 05 04 00 
0fa50     FC F9 F8 FB 
0fa54     FF 03 05 07 | 	byte	$fb, $fc, $ff, $03, $05, $05, $04, $00, $fc, $f9, $f8, $fb, $ff, $03, $05, $07
0fa58     07 05 01 FD 
0fa5c     FC FC FC FC 
0fa60     FD FE 01 02 
0fa64     04 02 00 FD | 	byte	$07, $05, $01, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $01, $02, $04, $02, $00, $fd
0fa68     FC FE 01 03 
0fa6c     04 04 03 00 
0fa70     FD FA FA FC 
0fa74     00 04 06 07 | 	byte	$fc, $fe, $01, $03, $04, $04, $03, $00, $fd, $fa, $fa, $fc, $00, $04, $06, $07
0fa78     07 04 00 FD 
0fa7c     FB FB FC FD 
0fa80     FE 00 01 01 
0fa84     01 01 FE FD | 	byte	$07, $04, $00, $fd, $fb, $fb, $fc, $fd, $fe, $00, $01, $01, $01, $01, $fe, $fd
0fa88     FD 00 04 04 
0fa8c     03 03 01 00 
0fa90     FD FA FA FC 
0fa94     FF 03 06 06 | 	byte	$fd, $00, $04, $04, $03, $03, $01, $00, $fd, $fa, $fa, $fc, $ff, $03, $06, $06
0fa98     05 03 FF FD 
0fa9c     FC FD FD FE 
0faa0     FF 01 02 01 
0faa4     00 00 FD FC | 	byte	$05, $03, $ff, $fd, $fc, $fd, $fd, $fe, $ff, $01, $02, $01, $00, $00, $fd, $fc
0faa8     FE 01 05 04 
0faac     03 02 01 00 
0fab0     FC F9 FA FB 
0fab4     FF 03 07 08 | 	byte	$fe, $01, $05, $04, $03, $02, $01, $00, $fc, $f9, $fa, $fb, $ff, $03, $07, $08
0fab8     04 01 FD FC 
0fabc     FC FD FD FF 
0fac0     01 02 03 02 
0fac4     FF FE FD FC | 	byte	$04, $01, $fd, $fc, $fc, $fd, $fd, $ff, $01, $02, $03, $02, $ff, $fe, $fd, $fc
0fac8     FF 02 06 04 
0facc     03 02 00 FF 
0fad0     FB FA FA FC 
0fad4     00 03 06 07 | 	byte	$ff, $02, $06, $04, $03, $02, $00, $ff, $fb, $fa, $fa, $fc, $00, $03, $06, $07
0fad8     04 00 FC FC 
0fadc     FD FF FF 00 
0fae0     01 02 02 01 
0fae4     FE FD FD FD | 	byte	$04, $00, $fc, $fc, $fd, $ff, $ff, $00, $01, $02, $02, $01, $fe, $fd, $fd, $fd
0fae8     00 04 05 03 
0faec     02 01 01 FF 
0faf0     FC FB FC FE 
0faf4     00 03 05 06 | 	byte	$00, $04, $05, $03, $02, $01, $01, $ff, $fc, $fb, $fc, $fe, $00, $03, $05, $06
0faf8     04 00 FC FB 
0fafc     FC FE 00 02 
0fb00     02 03 02 01 
0fb04     FE FC FC FD | 	byte	$04, $00, $fc, $fb, $fc, $fe, $00, $02, $02, $03, $02, $01, $fe, $fc, $fc, $fd
0fb08     01 05 04 03 
0fb0c     02 02 01 FD 
0fb10     FA FA FC 00 
0fb14     02 04 06 05 | 	byte	$01, $05, $04, $03, $02, $02, $01, $fd, $fa, $fa, $fc, $00, $02, $04, $06, $05
0fb18     03 FE FB FA 
0fb1c     FC FF 01 03 
0fb20     04 03 02 00 
0fb24     FE FC FB FD | 	byte	$03, $fe, $fb, $fa, $fc, $ff, $01, $03, $04, $03, $02, $00, $fe, $fc, $fb, $fd
0fb28     01 04 03 02 
0fb2c     03 02 01 FD 
0fb30     FA FB FD 01 
0fb34     03 05 06 04 | 	byte	$01, $04, $03, $02, $03, $02, $01, $fd, $fa, $fb, $fd, $01, $03, $05, $06, $04
0fb38     01 FD FA FA 
0fb3c     FC FE 02 04 
0fb40     05 03 02 00 
0fb44     FE FC FA FC | 	byte	$01, $fd, $fa, $fa, $fc, $fe, $02, $04, $05, $03, $02, $00, $fe, $fc, $fa, $fc
0fb48     01 03 02 02 
0fb4c     03 03 01 FD 
0fb50     F9 FA FD 01 
0fb54     05 07 06 04 | 	byte	$01, $03, $02, $02, $03, $03, $01, $fd, $f9, $fa, $fd, $01, $05, $07, $06, $04
0fb58     00 FD FB FA 
0fb5c     FC FE 02 05 
0fb60     06 04 02 00 
0fb64     FD FC FA FD | 	byte	$00, $fd, $fb, $fa, $fc, $fe, $02, $05, $06, $04, $02, $00, $fd, $fc, $fa, $fd
0fb68     01 02 02 02 
0fb6c     02 03 00 FD 
0fb70     FA FB FE 02 
0fb74     06 07 05 02 | 	byte	$01, $02, $02, $02, $02, $03, $00, $fd, $fa, $fb, $fe, $02, $06, $07, $05, $02
0fb78     00 FD FB FB 
0fb7c     FC FE 01 03 
0fb80     03 02 02 01 
0fb84     FF FD FC FF | 	byte	$00, $fd, $fb, $fb, $fc, $fe, $01, $03, $03, $02, $02, $01, $ff, $fd, $fc, $ff
0fb88     01 01 FF 01 
0fb8c     02 02 01 FD 
0fb90     FC FC FF 03 
0fb94     05 06 04 01 | 	byte	$01, $01, $ff, $01, $02, $02, $01, $fd, $fc, $fc, $ff, $03, $05, $06, $04, $01
0fb98     FE FC FA FB 
0fb9c     FD FF 01 02 
0fba0     02 02 01 01 
0fba4     00 FF FF 00 | 	byte	$fe, $fc, $fa, $fb, $fd, $ff, $01, $02, $02, $02, $01, $01, $00, $ff, $ff, $00
0fba8     01 FF FF FF 
0fbac     00 01 00 FD 
0fbb0     FD FD 00 03 
0fbb4     05 06 05 02 | 	byte	$01, $ff, $ff, $ff, $00, $01, $00, $fd, $fd, $fd, $00, $03, $05, $06, $05, $02
0fbb8     FE FC FA FC 
0fbbc     FD FE 01 02 
0fbc0     02 02 01 00 
0fbc4     FF FE 00 01 | 	byte	$fe, $fc, $fa, $fc, $fd, $fe, $01, $02, $02, $02, $01, $00, $ff, $fe, $00, $01
0fbc8     02 FF FF FF 
0fbcc     00 01 FF FE 
0fbd0     FE FF 00 02 
0fbd4     05 06 04 02 | 	byte	$02, $ff, $ff, $ff, $00, $01, $ff, $fe, $fe, $ff, $00, $02, $05, $06, $04, $02
0fbd8     FE FD FB FC 
0fbdc     FE FF 00 00 
0fbe0     00 01 01 00 
0fbe4     FF 00 02 02 | 	byte	$fe, $fd, $fb, $fc, $fe, $ff, $00, $00, $00, $01, $01, $00, $ff, $00, $02, $02
0fbe8     02 FE FD FD 
0fbec     FE 00 00 01 
0fbf0     01 01 01 02 
0fbf4     03 03 03 01 | 	byte	$02, $fe, $fd, $fd, $fe, $00, $00, $01, $01, $01, $01, $02, $03, $03, $03, $01
0fbf8     FE FD FD FE 
0fbfc     FE FF FF FE 
0fc00     FE 00 00 00 
0fc04     00 01 03 04 | 	byte	$fe, $fd, $fd, $fe, $fe, $ff, $ff, $fe, $fe, $00, $00, $00, $00, $01, $03, $04
0fc08     01 FE FD FD 
0fc0c     FD FE FF 00 
0fc10     02 03 02 01 
0fc14     01 01 01 00 | 	byte	$01, $fe, $fd, $fd, $fd, $fe, $ff, $00, $02, $03, $02, $01, $01, $01, $01, $00
0fc18     FE FE FE FF 
0fc1c     FF 00 FF FE 
0fc20     FF 00 00 FF 
0fc24     00 01 03 03 | 	byte	$fe, $fe, $fe, $ff, $ff, $00, $ff, $fe, $ff, $00, $00, $ff, $00, $01, $03, $03
0fc28     01 FE FE FD 
0fc2c     FD FD FE 00 
0fc30     02 04 04 03 
0fc34     01 00 00 FF | 	byte	$01, $fe, $fe, $fd, $fd, $fd, $fe, $00, $02, $04, $04, $03, $01, $00, $00, $ff
0fc38     FF FE FF 00 
0fc3c     00 00 FF FE 
0fc40     FF FF 00 FF 
0fc44     00 02 03 03 | 	byte	$ff, $fe, $ff, $00, $00, $00, $ff, $fe, $ff, $ff, $00, $ff, $00, $02, $03, $03
0fc48     01 FF FE FD 
0fc4c     FD FD FF 02 
0fc50     03 05 04 03 
0fc54     01 00 FE FE | 	byte	$01, $ff, $fe, $fd, $fd, $fd, $ff, $02, $03, $05, $04, $03, $01, $00, $fe, $fe
0fc58     FF FF 00 01 
0fc5c     00 FF FE FD 
0fc60     00 00 FF FF 
0fc64     FF 02 03 02 | 	byte	$ff, $ff, $00, $01, $00, $ff, $fe, $fd, $00, $00, $ff, $ff, $ff, $02, $03, $02
0fc68     01 00 FE FD 
0fc6c     FD FD FE 02 
0fc70     04 04 03 02 
0fc74     01 FF FE FD | 	byte	$01, $00, $fe, $fd, $fd, $fd, $fe, $02, $04, $04, $03, $02, $01, $ff, $fe, $fd
0fc78     FE 00 02 01 
0fc7c     00 FE FD FE 
0fc80     00 01 FF FE 
0fc84     FF 01 03 02 | 	byte	$fe, $00, $02, $01, $00, $fe, $fd, $fe, $00, $01, $ff, $fe, $ff, $01, $03, $02
0fc88     01 00 FF FE 
0fc8c     FD FE FF 02 
0fc90     04 03 02 02 
0fc94     01 FF FD FD | 	byte	$01, $00, $ff, $fe, $fd, $fe, $ff, $02, $04, $03, $02, $02, $01, $ff, $fd, $fd
0fc98     FE 00 02 01 
0fc9c     FF FE FE 00 
0fca0     01 01 FF FD 
0fca4     FD FF 02 03 | 	byte	$fe, $00, $02, $01, $ff, $fe, $fe, $00, $01, $01, $ff, $fd, $fd, $ff, $02, $03
0fca8     02 02 01 FE 
0fcac     FD FD FF 01 
0fcb0     03 03 03 02 
0fcb4     01 00 FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $03, $03, $02, $01, $00, $fd, $fd
0fcb8     FD 01 02 02 
0fcbc     00 FE FE 00 
0fcc0     02 02 FF FD 
0fcc4     FC FF 02 02 | 	byte	$fd, $01, $02, $02, $00, $fe, $fe, $00, $02, $02, $ff, $fd, $fc, $ff, $02, $02
0fcc8     02 02 01 FE 
0fccc     FD FD FF 01 
0fcd0     03 04 04 03 
0fcd4     01 FF FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $04, $04, $03, $01, $ff, $fd, $fd
0fcd8     FD 00 02 01 
0fcdc     00 FE FE 00 
0fce0     02 01 FF FD 
0fce4     FD FF 02 02 | 	byte	$fd, $00, $02, $01, $00, $fe, $fe, $00, $02, $01, $ff, $fd, $fd, $ff, $02, $02
0fce8     03 03 02 FF 
0fcec     FD FD FE 00 
0fcf0     01 03 05 04 
0fcf4     02 FE FD FD | 	byte	$03, $03, $02, $ff, $fd, $fd, $fe, $00, $01, $03, $05, $04, $02, $fe, $fd, $fd
0fcf8     FD 00 01 01 
0fcfc     00 FF FF 01 
0fd00     02 01 FF FE 
0fd04     FE FF 01 01 | 	byte	$fd, $00, $01, $01, $00, $ff, $ff, $01, $02, $01, $ff, $fe, $fe, $ff, $01, $01
0fd08     02 03 01 FF 
0fd0c     FD FD FE 01 
0fd10     02 03 06 04 
0fd14     01 FE FC FC | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $01, $02, $03, $06, $04, $01, $fe, $fc, $fc
0fd18     FE 02 02 02 
0fd1c     01 FF FF 00 
0fd20     00 FF FE FE 
0fd24     FF 00 01 01 | 	byte	$fe, $02, $02, $02, $01, $ff, $ff, $00, $00, $ff, $fe, $fe, $ff, $00, $01, $01
0fd28     02 03 01 FF 
0fd2c     FD FD FE 00 
0fd30     02 03 05 04 
0fd34     01 FE FC FD | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $00, $02, $03, $05, $04, $01, $fe, $fc, $fd
0fd38     FF 02 02 01 
0fd3c     FF FF 00 01 
0fd40     01 FF FE FF 
0fd44     00 01 00 FF | 	byte	$ff, $02, $02, $01, $ff, $ff, $00, $01, $01, $ff, $fe, $ff, $00, $01, $00, $ff
0fd48     01 01 01 FF 
0fd4c     FE FF FF 01 
0fd50     01 02 02 02 
0fd54     00 FF FE FE | 	byte	$01, $01, $01, $ff, $fe, $ff, $ff, $01, $01, $02, $02, $02, $00, $ff, $fe, $fe
0fd58     00 02 01 FF 
0fd5c     FD FE 00 02 
0fd60     01 FE FD FE 
0fd64     00 01 00 00 | 	byte	$00, $02, $01, $ff, $fd, $fe, $00, $02, $01, $fe, $fd, $fe, $00, $01, $00, $00
0fd68     01 01 00 FF 
0fd6c     FF FF 00 01 
0fd70     01 02 01 01 
0fd74     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $ff, $00, $01, $01, $02, $01, $01, $01, $00, $ff, $ff
0fd78     01 01 FF FD 
0fd7c     FC FE 03 04 
0fd80     03 FF FE FE 
0fd84     FF 00 FE FF | 	byte	$01, $01, $ff, $fd, $fc, $fe, $03, $04, $03, $ff, $fe, $fe, $ff, $00, $fe, $ff
0fd88     01 01 00 FF 
0fd8c     FF 00 01 02 
0fd90     01 01 00 01 
0fd94     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $00, $01, $02, $01, $01, $00, $01, $01, $00, $ff, $ff
0fd98     01 02 00 FD 
0fd9c     FC FE 03 05 
0fda0     03 FF FD FE 
0fda4     FE FE FE FF | 	byte	$01, $02, $00, $fd, $fc, $fe, $03, $05, $03, $ff, $fd, $fe, $fe, $fe, $fe, $ff
0fda8     01 01 00 FE 
0fdac     FF 01 02 02 
0fdb0     01 00 FF 00 
0fdb4     01 00 00 01 | 	byte	$01, $01, $00, $fe, $ff, $01, $02, $02, $01, $00, $ff, $00, $01, $00, $00, $01
0fdb8     02 02 FF FC 
0fdbc     FB FE 03 05 
0fdc0     04 00 FE FD 
0fdc4     FD FC FD 00 | 	byte	$02, $02, $ff, $fc, $fb, $fe, $03, $05, $04, $00, $fe, $fd, $fd, $fc, $fd, $00
0fdc8     02 02 00 FF 
0fdcc     00 00 01 02 
0fdd0     01 00 FF FF 
0fdd4     00 01 01 02 | 	byte	$02, $02, $00, $ff, $00, $00, $01, $02, $01, $00, $ff, $ff, $00, $01, $01, $02
0fdd8     02 01 FE FB 
0fddc     FB FE 02 05 
0fde0     04 02 FF FE 
0fde4     FC FB FC FF | 	byte	$02, $01, $fe, $fb, $fb, $fe, $02, $05, $04, $02, $ff, $fe, $fc, $fb, $fc, $ff
0fde8     01 02 02 01 
0fdec     01 00 01 01 
0fdf0     01 FF FF FF 
0fdf4     00 01 02 03 | 	byte	$01, $02, $02, $01, $01, $00, $01, $01, $01, $ff, $ff, $ff, $00, $01, $02, $03
0fdf8     03 01 FD FB 
0fdfc     FB FE 02 04 
0fe00     04 04 01 FF 
0fe04     FD FB FC FE | 	byte	$03, $01, $fd, $fb, $fb, $fe, $02, $04, $04, $04, $01, $ff, $fd, $fb, $fc, $fe
0fe08     00 01 02 02 
0fe0c     02 01 01 00 
0fe10     00 FF FF FF 
0fe14     00 01 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $01, $00, $00, $ff, $ff, $ff, $00, $01, $02, $03
0fe18     04 01 FD FB 
0fe1c     FB FF 02 03 
0fe20     03 03 02 FF 
0fe24     FC FA FC FF | 	byte	$04, $01, $fd, $fb, $fb, $ff, $02, $03, $03, $03, $02, $ff, $fc, $fa, $fc, $ff
0fe28     00 01 02 02 
0fe2c     02 01 00 FF 
0fe30     FF FF 00 00 
0fe34     00 00 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $00, $ff, $ff, $ff, $00, $00, $00, $00, $02, $03
0fe38     03 00 FD FB 
0fe3c     FC 00 01 02 
0fe40     02 02 02 FF 
0fe44     FB FA FD 00 | 	byte	$03, $00, $fd, $fb, $fc, $00, $01, $02, $02, $02, $02, $ff, $fb, $fa, $fd, $00
0fe48     01 02 02 03 
0fe4c     02 01 00 FE 
0fe50     FD FF 00 01 
0fe54     02 01 02 03 | 	byte	$01, $02, $02, $03, $02, $01, $00, $fe, $fd, $ff, $00, $01, $02, $01, $02, $03
0fe58     02 FF FC FB 
0fe5c     FD 00 03 02 
0fe60     02 02 00 FE 
0fe64     FA F9 FD FF | 	byte	$02, $ff, $fc, $fb, $fd, $00, $03, $02, $02, $02, $00, $fe, $fa, $f9, $fd, $ff
0fe68     02 02 03 03 
0fe6c     03 02 00 FE 
0fe70     FD FE 00 01 
0fe74     02 02 03 04 | 	byte	$02, $02, $03, $03, $03, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $04
0fe78     02 00 FC FB 
0fe7c     FC FF 01 02 
0fe80     03 03 01 FF 
0fe84     FB FA FD FF | 	byte	$02, $00, $fc, $fb, $fc, $ff, $01, $02, $03, $03, $01, $ff, $fb, $fa, $fd, $ff
0fe88     01 02 03 03 
0fe8c     03 02 FF FE 
0fe90     FD FE FF 01 
0fe94     01 02 03 03 | 	byte	$01, $02, $03, $03, $03, $02, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $03, $03
0fe98     02 00 FD FB 
0fe9c     FD FE 00 01 
0fea0     03 03 01 FE 
0fea4     FC FB FD FE | 	byte	$02, $00, $fd, $fb, $fd, $fe, $00, $01, $03, $03, $01, $fe, $fc, $fb, $fd, $fe
0fea8     00 02 03 04 
0feac     04 02 00 FE 
0feb0     FD FE 00 01 
0feb4     02 02 03 02 | 	byte	$00, $02, $03, $04, $04, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $02
0feb8     00 FE FC FC 
0febc     FE 00 01 02 
0fec0     03 02 00 FE 
0fec4     FC FD FE FF | 	byte	$00, $fe, $fc, $fc, $fe, $00, $01, $02, $03, $02, $00, $fe, $fc, $fd, $fe, $ff
0fec8     00 01 02 03 
0fecc     04 02 00 FF 
0fed0     FE FF 00 01 
0fed4     01 01 02 02 | 	byte	$00, $01, $02, $03, $04, $02, $00, $ff, $fe, $ff, $00, $01, $01, $01, $02, $02
0fed8     FF FE FE FF 
0fedc     FF 00 00 01 
0fee0     01 01 FF FE 
0fee4     FD FF 00 FF | 	byte	$ff, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $01, $ff, $fe, $fd, $ff, $00, $ff
0fee8     00 FF 02 03 
0feec     03 01 00 FF 
0fef0     00 00 01 01 
0fef4     01 02 02 01 | 	byte	$00, $ff, $02, $03, $03, $01, $00, $ff, $00, $00, $01, $01, $01, $02, $02, $01
0fef8     FF FD FE FF 
0fefc     00 01 00 00 
0ff00     00 FF FE FC 
0ff04     FE 00 01 01 | 	byte	$ff, $fd, $fe, $ff, $00, $01, $00, $00, $00, $ff, $fe, $fc, $fe, $00, $01, $01
0ff08     00 00 01 02 
0ff0c     02 01 FF FF 
0ff10     FF 00 01 01 
0ff14     01 01 01 FF | 	byte	$00, $00, $01, $02, $02, $01, $ff, $ff, $ff, $00, $01, $01, $01, $01, $01, $ff
0ff18     FD FC FE 00 
0ff1c     02 03 02 01 
0ff20     FF FE FD FC 
0ff24     FD 00 01 02 | 	byte	$fd, $fc, $fe, $00, $02, $03, $02, $01, $ff, $fe, $fd, $fc, $fd, $00, $01, $02
0ff28     01 01 01 01 
0ff2c     01          | 	byte	$01[5]
0ff2d     00 FF FE FF 
0ff31     01 02 02 02 
0ff35     01 00 FE FC 
0ff39     FC FE 01 04 | 	byte	$00, $ff, $fe, $ff, $01, $02, $02, $02, $01, $00, $fe, $fc, $fc, $fe, $01, $04
0ff3d     04 02 00 FD 
0ff41     FC FC FC FE 
0ff45     00 02 03 01 
0ff49     00 00 00 00 | 	byte	$04, $02, $00, $fd, $fc, $fc, $fc, $fe, $00, $02, $03, $01, $00, $00, $00, $00
0ff4d     01 00 FF 00 
0ff51     00 01 01 01 
0ff55     01 00 FD FC 
0ff59     FC FF 02 05 | 	byte	$01, $00, $ff, $00, $00, $01, $01, $01, $01, $00, $fd, $fc, $fc, $ff, $02, $05
0ff5d     05 03 01 FE 
0ff61     FC FB FB FD 
0ff65     00 02 03 02 
0ff69     01 00 00 00 | 	byte	$05, $03, $01, $fe, $fc, $fb, $fb, $fd, $00, $02, $03, $02, $01, $00, $00, $00
0ff6d     00 FF FF 00 
0ff71     01 02 01 01 
0ff75     01 FE FD FC 
0ff79     FD 00 03 05 | 	byte	$00, $ff, $ff, $00, $01, $02, $01, $01, $01, $fe, $fd, $fc, $fd, $00, $03, $05
0ff7d     04 03 01 FE 
0ff81     FC F9 FA FD 
0ff85     00 03 04 03 
0ff89     01 FF FE FE | 	byte	$04, $03, $01, $fe, $fc, $f9, $fa, $fd, $00, $03, $04, $03, $01, $ff, $fe, $fe
0ff8d     FF FF 00 01 
0ff91     03 03 01 00 
0ff95     FF FD FC FC 
0ff99     FE 02 04 05 | 	byte	$ff, $ff, $00, $01, $03, $03, $01, $00, $ff, $fd, $fc, $fc, $fe, $02, $04, $05
0ff9d     04 03 01 FF 
0ffa1     FB F9 FA FE 
0ffa5     01 03 04 04 
0ffa9     02 FF FE FC | 	byte	$04, $03, $01, $ff, $fb, $f9, $fa, $fe, $01, $03, $04, $04, $02, $ff, $fe, $fc
0ffad     FD FF 01 03 
0ffb1     04 04 02 00 
0ffb5     FE FC FB FC 
0ffb9     FF 03 05 05 | 	byte	$fd, $ff, $01, $03, $04, $04, $02, $00, $fe, $fc, $fb, $fc, $ff, $03, $05, $05
0ffbd     04 03 00 FE 
0ffc1     FB F9 FB FE 
0ffc5     01 03 03 03 
0ffc9     01 00 FE FD | 	byte	$04, $03, $00, $fe, $fb, $f9, $fb, $fe, $01, $03, $03, $03, $01, $00, $fe, $fd
0ffcd     FC FE 02 04 
0ffd1     05 04 02 01 
0ffd5     FE FB FA FB 
0ffd9     FF 03 05 05 | 	byte	$fc, $fe, $02, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $ff, $03, $05, $05
0ffdd     05 03 01 FE 
0ffe1     FB FA FB FD 
0ffe5     00 02 03 02 
0ffe9     01 01 FF FE | 	byte	$05, $03, $01, $fe, $fb, $fa, $fb, $fd, $00, $02, $03, $02, $01, $01, $ff, $fe
0ffed     FC FE 01 04 
0fff1     05 04 02 01 
0fff5     FE FB FA FB 
0fff9     00 03 05 05 | 	byte	$fc, $fe, $01, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $00, $03, $05, $05
0fffd     04 02 00 FE 
10001     FC FC FD FF 
10005     00 01 01 00 
10009     01 01 00 FE | 	byte	$04, $02, $00, $fe, $fc, $fc, $fd, $ff, $00, $01, $01, $00, $01, $01, $00, $fe
1000d     FD FE 00 03 
10011     04 04 03 02 
10015     FE FB FA FC 
10019     00 03 05 04 | 	byte	$fd, $fe, $00, $03, $04, $04, $03, $02, $fe, $fb, $fa, $fc, $00, $03, $05, $04
1001d     03 02 FF FE 
10021     FC FD FE 00 
10025     00 00 00 00 
10029     01 01 01 FF | 	byte	$03, $02, $ff, $fe, $fc, $fd, $fe, $00, $00, $00, $00, $00, $01, $01, $01, $ff
1002d     FE FE 00 03 
10031     03 04 03 01 
10035     FD FA FA FD 
10039     01 04 04 04 | 	byte	$fe, $fe, $00, $03, $03, $04, $03, $01, $fd, $fa, $fa, $fd, $01, $04, $04, $04
1003d     03 01 FF FD 
10041     FB FD 00 01 
10045     01 00 FF FF 
10049     00 00 00 FF | 	byte	$03, $01, $ff, $fd, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff
1004d     FF FF 01 03 
10051     04 04 03 00 
10055     FC FA FA FE 
10059     01 04 05 04 | 	byte	$ff, $ff, $01, $03, $04, $04, $03, $00, $fc, $fa, $fa, $fe, $01, $04, $05, $04
1005d     03 00 FE FC 
10061     FC FE 00 02 
10065     01 00 FF FF 
10069     00 00 00 FF | 	byte	$03, $00, $fe, $fc, $fc, $fe, $00, $02, $01, $00, $ff, $ff, $00, $00, $00, $ff
1006d     FF 00 01 03 
10071     03 04 03 00 
10075     FC FA FB FD 
10079     01 03 04 04 | 	byte	$ff, $00, $01, $03, $03, $04, $03, $00, $fc, $fa, $fb, $fd, $01, $03, $04, $04
1007d     03 01 FE FC 
10081     FC FE 00 01 
10085     01 00 FF 00 
10089     00 00 00 FE | 	byte	$03, $01, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $fe
1008d     FF 00 02 03 
10091     05 04 03 FF 
10095     FC FA FB FE 
10099     01 04 04 04 | 	byte	$ff, $00, $02, $03, $05, $04, $03, $ff, $fc, $fa, $fb, $fe, $01, $04, $04, $04
1009d     02 00 FE FC 
100a1     FC FE 00 01 
100a5     01 00 FF FF 
100a9     01 01 01 FF | 	byte	$02, $00, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $ff, $01, $01, $01, $ff
100ad     FF FF 01 02 
100b1     03 04 02 FF 
100b5     FC FB FC FF 
100b9     01 03 03 04 | 	byte	$ff, $ff, $01, $02, $03, $04, $02, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $04
100bd     02 00 FD FC 
100c1     FD FF 00 01 
100c5     01 00 FF 00 
100c9     00 00 00 FF | 	byte	$02, $00, $fd, $fc, $fd, $ff, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $ff
100cd     00 00 01 02 
100d1     03 03 01 FE 
100d5     FC FC FD 00 
100d9     01 03 03 03 | 	byte	$00, $00, $01, $02, $03, $03, $01, $fe, $fc, $fc, $fd, $00, $01, $03, $03, $03
100dd     01 FF FD FC 
100e1     FD FF 00 01 
100e5     00 00 00 01 
100e9     01 00 FF FF | 	byte	$01, $ff, $fd, $fc, $fd, $ff, $00, $01, $00, $00, $00, $01, $01, $00, $ff, $ff
100ed     00 01 02 02 
100f1     02 01 FF FC 
100f5     FB FC FF 01 
100f9     03 03 03 02 | 	byte	$00, $01, $02, $02, $02, $01, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $03, $02
100fd     01 FE FC FC 
10101     FD FF 01 01 
10105     00 00 00 00 
10109     00 FF FF FF | 	byte	$01, $fe, $fc, $fc, $fd, $ff, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $ff
1010d     00 01 02 02 
10111     02 00 FE FC 
10115     FC FD 01 02 
10119     03 03 02 01 | 	byte	$00, $01, $02, $02, $02, $00, $fe, $fc, $fc, $fd, $01, $02, $03, $03, $02, $01
1011d     00 FE FD FD 
10121     FE FF 00 00 
10125     00 00 00 01 
10129     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fe, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
1012d     01 02 02 02 
10131     01 00 FD FB 
10135     FB FD 01 03 
10139     04 04 02 01 | 	byte	$01, $02, $02, $02, $01, $00, $fd, $fb, $fb, $fd, $01, $03, $04, $04, $02, $01
1013d     00 FE FD FD 
10141     FD FF 00 00 
10145     00 00 00 01 
10149     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fd, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
1014d     01 03 03 02 
10151     00 FF FC FA 
10155     FB FE 02 04 
10159     05 04 01 00 | 	byte	$01, $03, $03, $02, $00, $ff, $fc, $fa, $fb, $fe, $02, $04, $05, $04, $01, $00
1015d     FF FF FE FF 
10161     FF 00 00 FF 
10165     FF FE FE 00 
10169     01 01 01 01 | 	byte	$ff, $ff, $fe, $ff, $ff, $00, $00, $ff, $ff, $fe, $fe, $00, $01, $01, $01, $01
1016d     01 03 02 01 
10171     00 FE FC FC 
10175     FD 00 03 04 
10179     05 03 00 FF | 	byte	$01, $03, $02, $01, $00, $fe, $fc, $fc, $fd, $00, $03, $04, $05, $03, $00, $ff
1017d     FE FF 00 01 
10181     01 01 00 FF 
10185     FE FE FE FF 
10189     01 01 01 01 | 	byte	$fe, $ff, $00, $01, $01, $01, $00, $ff, $fe, $fe, $fe, $ff, $01, $01, $01, $01
1018d     02 02 02 01 
10191     00 FD FC FC 
10195     FE 01 03 04 
10199     04 02 00 FE | 	byte	$02, $02, $02, $01, $00, $fd, $fc, $fc, $fe, $01, $03, $04, $04, $02, $00, $fe
1019d     FD FE FF 00 
101a1     01 01 00 FF 
101a5     FE FD FE FF 
101a9     01 01 02 02 | 	byte	$fd, $fe, $ff, $00, $01, $01, $00, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $02
101ad     02 02 01 01 
101b1     FF FD FC FD 
101b5     FF 01 02 03 
101b9     03 02 00 FF | 	byte	$02, $02, $01, $01, $ff, $fd, $fc, $fd, $ff, $01, $02, $03, $03, $02, $00, $ff
101bd     FE FE FE FF 
101c1     01 02 00 FF 
101c5     FF FF FF 00 
101c9     00 00 01 01 | 	byte	$fe, $fe, $fe, $ff, $01, $02, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $01
101cd     01 02 02 02 
101d1     01 FD FC FC 
101d5     FE 00 02 02 
101d9     03 02 02 01 | 	byte	$01, $02, $02, $02, $01, $fd, $fc, $fc, $fe, $00, $02, $02, $03, $02, $02, $01
101dd     FF FE FD FE 
101e1     00 01 01 01 
101e5     FF 00 00 00 
101e9     FF FF 00 00 | 	byte	$ff, $fe, $fd, $fe, $00, $01, $01, $01, $ff, $00, $00, $00, $ff, $ff, $00, $00
101ed     01 01 01 01 
101f1     01          | 	byte	$01[5]
101f2     FE FD FD FF 
101f6     01 02 02 02 
101fa     02 02 01 00 
101fe     FD FC FD 00 | 	byte	$fe, $fd, $fd, $ff, $01, $02, $02, $02, $02, $02, $01, $00, $fd, $fc, $fd, $00
10202     01 01 00 00 
10206     00 01 01 00 
1020a     00 00 00 01 
1020e     FF 00 01 00 | 	byte	$01, $01, $00, $00, $00, $01, $01, $00, $00, $00, $00, $01, $ff, $00, $01, $00
10212     FF FE FE 00 
10216     01 02 02 01 
1021a     01 02 01 00 
1021e     FD FC FD 00 | 	byte	$ff, $fe, $fe, $00, $01, $02, $02, $01, $01, $02, $01, $00, $fd, $fc, $fd, $00
10222     01 02 01 00 
10226     00 00 01 00 
1022a     00 01 01 00 
1022e     FF FF 00 00 | 	byte	$01, $02, $01, $00, $00, $00, $01, $00, $00, $01, $01, $00, $ff, $ff, $00, $00
10232     FF FF FF 01 
10236     01 01 01 00 
1023a     01 02 02 00 
1023e     FD FC FC FF | 	byte	$ff, $ff, $ff, $01, $01, $01, $01, $00, $01, $02, $02, $00, $fd, $fc, $fc, $ff
10242     00 01 01 00 
10246     00 01 01 00 
1024a     00 01 01 01 
1024e     00 FF FF FE | 	byte	$00, $01, $01, $00, $00, $01, $01, $00, $00, $01, $01, $01, $00, $ff, $ff, $fe
10252     FE FF 00 01 
10256     02 01 01 00 
1025a     01 02 01 00 
1025e     FE FD FD FF | 	byte	$fe, $ff, $00, $01, $02, $01, $01, $00, $01, $02, $01, $00, $fe, $fd, $fd, $ff
10262     00 01 00 00 
10266     00 01 01 01 
1026a     00 00 01 00 
1026e     00 FF FF FD | 	byte	$00, $01, $00, $00, $00, $01, $01, $01, $00, $00, $01, $00, $00, $ff, $ff, $fd
10272     FE 00 01 02 
10276     02 00 01 00 
1027a     01 01 01 00 
1027e     FE FD FD FE | 	byte	$fe, $00, $01, $02, $02, $00, $01, $00, $01, $01, $01, $00, $fe, $fd, $fd, $fe
10282     FF 00 00 01 
10286     01 01 00 00 
1028a     00 00 00 00 
1028e     00 00 FE FE | 	byte	$ff, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $fe
10292     FE FF 01 02 
10296     02 01 00 00 
1029a     00 01 00 00 
1029e     FE FE FF FE | 	byte	$fe, $ff, $01, $02, $02, $01, $00, $00, $00, $01, $00, $00, $fe, $fe, $ff, $fe
102a2     FF FF 00 01 
102a6     01 01 01 00 
102aa     00 FF FF 00 
102ae     00 00 FF FE | 	byte	$ff, $ff, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $00, $00, $00, $ff, $fe
102b2     FF 00 01 01 
102b6     01 00 00 00 
102ba     01 01 00 00 
102be     FF FE FE FE | 	byte	$ff, $00, $01, $01, $01, $00, $00, $00, $01, $01, $00, $00, $ff, $fe, $fe, $fe
102c2     FF FF 00 01 
102c6     02 02 01 01 
102ca     00 FF FF 00 
102ce     00 00 FF FF | 	byte	$ff, $ff, $00, $01, $02, $02, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff, $ff
102d2     FF 00 01 01 
102d6     01 00 FF 00 
102da     00 00 00 00 
102de     FF FF FF FF | 	byte	$ff, $00, $01, $01, $01, $00, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff
102e2     FF FF FF 00 
102e6     01 02 01 01 
102ea     00 00 FF FF 
102ee     00 FF FF FF | 	byte	$ff, $ff, $ff, $00, $01, $02, $01, $01, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
102f2     00 00 00 01 
102f6     01 01 00 00 
102fa     00 00 00 FF 
102fe     FF 00 FF FF | 	byte	$00, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $00, $ff, $ff
10302     FF FF FF 00 
10306     01 02 02 01 
1030a     00 00 FF FF 
1030e     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $01, $02, $02, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00
10312     00 00 00 00 
10316     00          | 	byte	$00[5]
10317     01 00 00 00 
1031b     00 00 FF FF 
1031f     FF FF FF 00 
10323     FF 00 01 02 | 	byte	$01, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $00, $01, $02
10327     01 01 01 00 
1032b     00 00 00 00 
1032f     00 00 01 00 
10333     00 00 00 F6 | 	byte	$01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $f6
10337     F7 F8 F8 F8 
1033b     F9 FA FB FC 
1033f     FC FC FC FD 
10343     F9 F0 E6 DF | 	byte	$f7, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fc, $fc, $fc, $fd, $f9, $f0, $e6, $df
10347     DC DB DB DC 
1034b     DE E2 E5 E7 
1034f     E8 EA EB EC 
10353     EF F3 F6 F8 | 	byte	$dc, $db, $db, $dc, $de, $e2, $e5, $e7, $e8, $ea, $eb, $ec, $ef, $f3, $f6, $f8
10357     F9 FA FB FC 
1035b     FF 03 05 06 
1035f     07 08 08 09 
10363     0A 0B 09 07 | 	byte	$f9, $fa, $fb, $fc, $ff, $03, $05, $06, $07, $08, $08, $09, $0a, $0b, $09, $07
10367     04 02 01 02 
1036b     05 08 09 0A 
1036f     09 09 08 08 
10373     0B 06 00 FF | 	byte	$04, $02, $01, $02, $05, $08, $09, $0a, $09, $09, $08, $08, $0b, $06, $00, $ff
10377     00 01 02 04 
1037b     08 0D 0E 0F 
1037f     0F 0F 0F 0F 
10383     11 10 0B 07 | 	byte	$00, $01, $02, $04, $08, $0d, $0e, $0f, $0f, $0f, $0f, $0f, $11, $10, $0b, $07
10387     04 03 03 03 
1038b     07 0A 09 08 
1038f     07 06 06 09 
10393     12 1B 1E 1F | 	byte	$04, $03, $03, $03, $07, $0a, $09, $08, $07, $06, $06, $09, $12, $1b, $1e, $1f
10397     20 20 20 22 
1039b     28 2D 2E 2D 
1039f     2C 2B 2A 0F 
103a3     D0 B4 B4 B8 | 	byte	$20, $20, $20, $22, $28, $2d, $2e, $2d, $2c, $2b, $2a, $0f, $d0, $b4, $b4, $b8
103a7     BC C0 C4 CA 
103ab     D4 DA DD DE 
103af     E0 E2 E3 E8 
103b3     F2 F4 F3 F4 | 	byte	$bc, $c0, $c4, $ca, $d4, $da, $dd, $de, $e0, $e2, $e3, $e8, $f2, $f4, $f3, $f4
103b7     F5 F7 F8 FD 
103bb     04 06 05 05 
103bf     06 06 08 0E 
103c3     1C 22 23 22 | 	byte	$f5, $f7, $f8, $fd, $04, $06, $05, $05, $06, $06, $08, $0e, $1c, $22, $23, $22
103c7     21 20 20 24 
103cb     29 2A 28 26 
103cf     24 23 23 2A 
103d3     38 3C 3B 39 | 	byte	$21, $20, $20, $24, $29, $2a, $28, $26, $24, $23, $23, $2a, $38, $3c, $3b, $39
103d7     37 35 34 39 
103db     41 42 40 3D 
103df     39 37 2D 14 
103e3     FE F7 F7 F7 | 	byte	$37, $35, $34, $39, $41, $42, $40, $3d, $39, $37, $2d, $14, $fe, $f7, $f7, $f7
103e7     F8 F8 F3 EC 
103eb     E4 E2 E6 E9 
103ef     ED EF F0 D1 
103f3     BE BF C3 C6 | 	byte	$f8, $f8, $f3, $ec, $e4, $e2, $e6, $e9, $ed, $ef, $f0, $d1, $be, $bf, $c3, $c6
103f7     CA CE D3 DF 
103fb     E9 EB EC ED 
103ff     EF F1 F6 0C 
10403     19 1B 1A 19 | 	byte	$ca, $ce, $d3, $df, $e9, $eb, $ec, $ed, $ef, $f1, $f6, $0c, $19, $1b, $1a, $19
10407     19 18 1B 26 
1040b     2C 2C 2A 28 
1040f     26 24 2A 3C 
10413     44 42 3E 3A | 	byte	$19, $18, $1b, $26, $2c, $2c, $2a, $28, $26, $24, $2a, $3c, $44, $42, $3e, $3a
10417     37 34 36 3F 
1041b     43 40 3B 37 
1041f     34 31 2C EA 
10423     C1 BD BF C1 | 	byte	$37, $34, $36, $3f, $43, $40, $3b, $37, $34, $31, $2c, $ea, $c1, $bd, $bf, $c1
10427     C2 C2 C2 C4 
1042b     C6 C7 CA CD 
1042f     D0 CD C0 C1 
10433     C5 C9 CB CE | 	byte	$c2, $c2, $c2, $c4, $c6, $c7, $ca, $cd, $d0, $cd, $c0, $c1, $c5, $c9, $cb, $ce
10437     D1 D3 D4 D4 
1043b     D5 D7 DA DD 
1043f     E0 E6 FD 0F 
10443     15 16 14 14 | 	byte	$d1, $d3, $d4, $d4, $d5, $d7, $da, $dd, $e0, $e6, $fd, $0f, $15, $16, $14, $14
10447     14 16 1E 29 
1044b     2D 2B 29 27 
1044f     25 2B 3C 4A 
10453     4B 47 43 3F | 	byte	$14, $16, $1e, $29, $2d, $2b, $29, $27, $25, $2b, $3c, $4a, $4b, $47, $43, $3f
10457     3C 3C 41 49 
1045b     49 45 3F 3C 
1045f     36 1D 01 F7 
10463     F7 F8 F8 F8 | 	byte	$3c, $3c, $41, $49, $49, $45, $3f, $3c, $36, $1d, $01, $f7, $f7, $f8, $f8, $f8
10467     F8 F9 F5 EA 
1046b     E4 E6 E8 EA 
1046f     ED D2 9D 94 
10473     9A 9F A4 A9 | 	byte	$f8, $f9, $f5, $ea, $e4, $e6, $e8, $ea, $ed, $d2, $9d, $94, $9a, $9f, $a4, $a9
10477     AC B1 B6 BF 
1047b     C5 C9 CC D0 
1047f     D8 EC FE 0A 
10483     0C 0C 0C 0C | 	byte	$ac, $b1, $b6, $bf, $c5, $c9, $cc, $d0, $d8, $ec, $fe, $0a, $0c, $0c, $0c, $0c
10487     0E 13 1E 27 
1048b     28 26 24 23 
1048f     28 37 44 49 
10493     48 44 40 3C | 	byte	$0e, $13, $1e, $27, $28, $26, $24, $23, $28, $37, $44, $49, $48, $44, $40, $3c
10497     3A 3E 45 4A 
1049b     47 42 3E 3B 
1049f     41 4A 1B DE 
104a3     C7 C5 C5 C5 | 	byte	$3a, $3e, $45, $4a, $47, $42, $3e, $3b, $41, $4a, $1b, $de, $c7, $c5, $c5, $c5
104a7     C5 C2 C1 C5 
104ab     C8 CB CB B5 
104af     8F 8C 9A A6 
104b3     AD B2 B6 BB | 	byte	$c5, $c2, $c1, $c5, $c8, $cb, $cb, $b5, $8f, $8c, $9a, $a6, $ad, $b2, $b6, $bb
104b7     BE B9 B3 B7 
104bb     BE C3 C8 D2 
104bf     E1 F5 02 0A 
104c3     0D 0D 0D 0E | 	byte	$be, $b9, $b3, $b7, $be, $c3, $c8, $d2, $e1, $f5, $02, $0a, $0d, $0d, $0d, $0e
104c7     13 1C 26 2B 
104cb     2B 2A 29 2E 
104cf     3A 45 4C 4E 
104d3     4C 49 45 42 | 	byte	$13, $1c, $26, $2b, $2b, $2a, $29, $2e, $3a, $45, $4c, $4e, $4c, $49, $45, $42
104d7     44 48 4D 4F 
104db     4C 46 45 3F 
104df     19 FA F3 F5 
104e3     F7 F7 F7 F9 | 	byte	$44, $48, $4d, $4f, $4c, $46, $45, $3f, $19, $fa, $f3, $f5, $f7, $f7, $f7, $f9
104e7     FF 02 F9 E9 
104eb     E4 E6 EB EA 
104ef     B6 90 8D 95 
104f3     9B A0 A2 9F | 	byte	$ff, $02, $f9, $e9, $e4, $e6, $eb, $ea, $b6, $90, $8d, $95, $9b, $a0, $a2, $9f
104f7     9C A0 AC B8 
104fb     BE C4 CF DB 
104ff     ED F8 02 08 
10503     0B 0B 0C 10 | 	byte	$9c, $a0, $ac, $b8, $be, $c4, $cf, $db, $ed, $f8, $02, $08, $0b, $0b, $0c, $10
10507     17 1F 26 29 
1050b     29 29 2D 35 
1050f     3F 46 49 4A 
10513     48 44 41 41 | 	byte	$17, $1f, $26, $29, $29, $29, $2d, $35, $3f, $46, $49, $4a, $48, $44, $41, $41
10517     45 47 4A 4A 
1051b     46 46 47 4C 
1051f     52 42 08 D7 
10523     C8 C5 C5 C6 | 	byte	$45, $47, $4a, $4a, $46, $46, $47, $4c, $52, $42, $08, $d7, $c8, $c5, $c5, $c6
10527     C0 BA BB C1 
1052b     BF 9D 82 80 
1052f     85 92 9E A9 
10533     AF B5 BA BE | 	byte	$c0, $ba, $bb, $c1, $bf, $9d, $82, $80, $85, $92, $9e, $a9, $af, $b5, $ba, $be
10537     B7 AF B2 BA 
1053b     C3 CF D9 E9 
1053f     F7 00 07 0D 
10543     10 11 14 1A | 	byte	$b7, $af, $b2, $ba, $c3, $cf, $d9, $e9, $f7, $00, $07, $0d, $10, $11, $14, $1a
10547     21 27 2C 2F 
1054b     31 35 3A 43 
1054f     4A 4C 4F 4F 
10553     4D 4A 48 4B | 	byte	$21, $27, $2c, $2f, $31, $35, $3a, $43, $4a, $4c, $4f, $4f, $4d, $4a, $48, $4b
10557     4D 4E 50 4F 
1055b     50 50 42 1B 
1055f     01 F7 F7 FA 
10563     FB FC FF 05 | 	byte	$4d, $4e, $50, $4f, $50, $50, $42, $1b, $01, $f7, $f7, $fa, $fb, $fc, $ff, $05
10567     09 09 FE EE 
1056b     EB EE D9 AB 
1056f     90 8C 92 99 
10573     9D 9B 95 97 | 	byte	$09, $09, $fe, $ee, $eb, $ee, $d9, $ab, $90, $8c, $92, $99, $9d, $9b, $95, $97
10577     A0 AC B7 C3 
1057b     CE D8 E5 F2 
1057f     FC 03 0A 0F 
10583     11 14 18 1F | 	byte	$a0, $ac, $b7, $c3, $ce, $d8, $e5, $f2, $fc, $03, $0a, $0f, $11, $14, $18, $1f
10587     24 28 2C 31 
1058b     36 3A 40 48 
1058f     4B 4B 4D 4C 
10593     4B 49 4A 4B | 	byte	$24, $28, $2c, $31, $36, $3a, $40, $48, $4b, $4b, $4d, $4c, $4b, $49, $4a, $4b
10597     4C 4C 4D 50 
1059b     51 51 54 56 
1059f     54 32 FF DD 
105a3     CD CA C9 C3 | 	byte	$4c, $4c, $4d, $50, $51, $51, $54, $56, $54, $32, $ff, $dd, $cd, $ca, $c9, $c3
105a7     BA B7 B1 98 
105ab     81 81 82 89 
105af     94 9E A9 B2 
105b3     B9 C1 C3 BD | 	byte	$ba, $b7, $b1, $98, $81, $81, $82, $89, $94, $9e, $a9, $b2, $b9, $c1, $c3, $bd
105b7     B4 B3 BD CA 
105bb     D5 E0 ED F9 
105bf     00 06 0D 11 
105c3     16 19 1F 24 | 	byte	$b4, $b3, $bd, $ca, $d5, $e0, $ed, $f9, $00, $06, $0d, $11, $16, $19, $1f, $24
105c7     28 2C 32 39 
105cb     3D 41 48 4C 
105cf     4D 4E 4F 4F 
105d3     4E 4E 4E 4F | 	byte	$28, $2c, $32, $39, $3d, $41, $48, $4c, $4d, $4e, $4f, $4f, $4e, $4e, $4e, $4f
105d7     4F 50 53 56 
105db     53 42 21 09 
105df     FD FB FB FE 
105e3     00 04 08 0C | 	byte	$4f, $50, $53, $56, $53, $42, $21, $09, $fd, $fb, $fb, $fe, $00, $04, $08, $0c
105e7     0E 0D 06 FA 
105eb     EE CC AA 93 
105ef     8C 8E 93 94 
105f3     90 8F 95 A0 | 	byte	$0e, $0d, $06, $fa, $ee, $cc, $aa, $93, $8c, $8e, $93, $94, $90, $8f, $95, $a0
105f7     A9 B6 C5 D2 
105fb     DB E7 F3 FB 
105ff     01 06 0C 11 
10603     15 1A 1F 23 | 	byte	$a9, $b6, $c5, $d2, $db, $e7, $f3, $fb, $01, $06, $0c, $11, $15, $1a, $1f, $23
10607     27 2D 33 38 
1060b     3B 41 47 49 
1060f     49 49 4A 4A 
10613     4B 4A 4B 4B | 	byte	$27, $2d, $33, $38, $3b, $41, $47, $49, $49, $49, $4a, $4a, $4b, $4a, $4b, $4b
10617     4B 4E 51 52 
1061b     53 55 56 54 
1061f     49 25 FE E1 
10623     D2 CC C5 B9 | 	byte	$4b, $4e, $51, $52, $53, $55, $56, $54, $49, $25, $fe, $e1, $d2, $cc, $c5, $b9
10627     A8 8E 81 81 
1062b     81 82 8A 94 
1062f     9E A7 B0 B9 
10633     C1 C4 BF B9 | 	byte	$a8, $8e, $81, $81, $81, $82, $8a, $94, $9e, $a7, $b0, $b9, $c1, $c4, $bf, $b9
10637     B8 BF CA D4 
1063b     DF EC F6 FD 
1063f     03 08 0E 13 
10643     19 1D 22 27 | 	byte	$b8, $bf, $ca, $d4, $df, $ec, $f6, $fd, $03, $08, $0e, $13, $19, $1d, $22, $27
10647     2C 32 37 3B 
1064b     40 46 4A 4B 
1064f     4B 4B 4C 4C 
10653     4D 4D 4D 4F | 	byte	$2c, $32, $37, $3b, $40, $46, $4a, $4b, $4b, $4b, $4c, $4c, $4d, $4d, $4d, $4f
10657     50 53 54 51 
1065b     3E 26 0F 03 
1065f     FD FC FE 01 
10663     04 07 0B 0F | 	byte	$50, $53, $54, $51, $3e, $26, $0f, $03, $fd, $fc, $fe, $01, $04, $07, $0b, $0f
10667     12 13 0B F2 
1066b     CA AA 96 8D 
1066f     8B 8B 89 88 
10673     8C 94 9E AB | 	byte	$12, $13, $0b, $f2, $ca, $aa, $96, $8d, $8b, $8b, $89, $88, $8c, $94, $9e, $ab
10677     B7 C3 CE DA 
1067b     E5 F0 F8 FE 
1067f     02 07 0D 12 
10683     17 1C 21 27 | 	byte	$b7, $c3, $ce, $da, $e5, $f0, $f8, $fe, $02, $07, $0d, $12, $17, $1c, $21, $27
10687     2C 31 35 39 
1068b     3F 43 46 46 
1068f     45 46 47 48 
10693     48 49 4A 4C | 	byte	$2c, $31, $35, $39, $3f, $43, $46, $46, $45, $46, $47, $48, $48, $49, $4a, $4c
10697     4E 4E 4F 50 
1069b     52 53 52 4D 
1069f     39 1B FA E4 
106a3     D4 C6 B0 8F | 	byte	$4e, $4e, $4f, $50, $52, $53, $52, $4d, $39, $1b, $fa, $e4, $d4, $c6, $b0, $8f
106a7     81 81 81 81 
106ab     82 88 93 9B 
106af     A5 AE B6 BF 
106b3     C3 C1 BE BE | 	byte	$81, $81, $81, $81, $82, $88, $93, $9b, $a5, $ae, $b6, $bf, $c3, $c1, $be, $be
106b7     C2 C9 D2 DD 
106bb     E9 F2 FA FF 
106bf     05 0A 10 16 
106c3     1B 21 27 2C | 	byte	$c2, $c9, $d2, $dd, $e9, $f2, $fa, $ff, $05, $0a, $10, $16, $1b, $21, $27, $2c
106c7     31 35 39 3F 
106cb     43 47 48 48 
106cf     48 48 49 4A 
106d3     4B 4D 4F 51 | 	byte	$31, $35, $39, $3f, $43, $47, $48, $48, $48, $48, $49, $4a, $4b, $4d, $4f, $51
106d7     51 51 4B 3B 
106db     27 14 08 01 
106df     FE FE 00 03 
106e3     07 0B 10 13 | 	byte	$51, $51, $4b, $3b, $27, $14, $08, $01, $fe, $fe, $00, $03, $07, $0b, $10, $13
106e7     15 0E F2 D0 
106eb     AF 99 8E 87 
106ef     84 83 83 88 
106f3     91 9E AC B7 | 	byte	$15, $0e, $f2, $d0, $af, $99, $8e, $87, $84, $83, $83, $88, $91, $9e, $ac, $b7
106f7     C0 CB D6 E3 
106fb     ED F5 FA 00 
106ff     05 0A 10 14 
10703     1B 21 27 2C | 	byte	$c0, $cb, $d6, $e3, $ed, $f5, $fa, $00, $05, $0a, $10, $14, $1b, $21, $27, $2c
10707     2F 32 37 3D 
1070b     42 43 44 44 
1070f     44 44 44 46 
10713     48 4B 4D 4D | 	byte	$2f, $32, $37, $3d, $42, $43, $44, $44, $44, $44, $44, $46, $48, $4b, $4d, $4d
10717     4C 4D 4F 51 
1071b     52 50 4D 45 
1071f     2B 0E F2 DC 
10723     BD A0 85 80 | 	byte	$4c, $4d, $4f, $51, $52, $50, $4d, $45, $2b, $0e, $f2, $dc, $bd, $a0, $85, $80
10727     81 81 81 82 
1072b     89 94 9D A6 
1072f     AF B6 BE C3 
10733     C5 C4 C4 C5 | 	byte	$81, $81, $81, $82, $89, $94, $9d, $a6, $af, $b6, $be, $c3, $c5, $c4, $c4, $c5
10737     CA D3 DE E8 
1073b     F2 F9 FE 04 
1073f     09 0E 14 1A 
10743     22 29 2D 30 | 	byte	$ca, $d3, $de, $e8, $f2, $f9, $fe, $04, $09, $0e, $14, $1a, $22, $29, $2d, $30
10747     33 38 3E 43 
1074b     46 48 48 48 
1074f     48 48 49 4C 
10753     4F 51 52 51 | 	byte	$33, $38, $3e, $43, $46, $48, $48, $48, $48, $48, $49, $4c, $4f, $51, $52, $51
10757     4F 49 38 27 
1075b     16 0A 03 00 
1075f     FF 01 03 08 
10763     0D 11 14 13 | 	byte	$4f, $49, $38, $27, $16, $0a, $03, $00, $ff, $01, $03, $08, $0d, $11, $14, $13
10767     09 EE D0 B1 
1076b     9D 8E 85 82 
1076f     82 82 89 94 
10773     A2 AD B8 C0 | 	byte	$09, $ee, $d0, $b1, $9d, $8e, $85, $82, $82, $82, $89, $94, $a2, $ad, $b8, $c0
10777     CB D7 E1 EC 
1077b     F3 FA FF 04 
1077f     09 0E 14 1C 
10783     23 28 2B 2D | 	byte	$cb, $d7, $e1, $ec, $f3, $fa, $ff, $04, $09, $0e, $14, $1c, $23, $28, $2b, $2d
10787     32 37 3D 41 
1078b     42 43 42 43 
1078f     43 43 46 4A 
10793     4C 4D 4C 4C | 	byte	$32, $37, $3d, $41, $42, $43, $42, $43, $43, $43, $46, $4a, $4c, $4d, $4c, $4c
10797     4C 4E 50 50 
1079b     4F 4D 48 36 
1079f     1B F6 CF AE 
107a3     8F 81 81 81 | 	byte	$4c, $4e, $50, $50, $4f, $4d, $48, $36, $1b, $f6, $cf, $ae, $8f, $81, $81, $81
107a7     82 81 83 8D 
107ab     97 A0 A8 B0 
107af     B8 C1 C6 C9 
107b3     C8 C7 C8 CD | 	byte	$82, $81, $83, $8d, $97, $a0, $a8, $b0, $b8, $c1, $c6, $c9, $c8, $c7, $c8, $cd
107b7     D5 DF E9 F2 
107bb     F9 FF 04 08 
107bf     0D 15 1D 24 
107c3     29 2D 2F 33 | 	byte	$d5, $df, $e9, $f2, $f9, $ff, $04, $08, $0d, $15, $1d, $24, $29, $2d, $2f, $33
107c7     38 3D 42 44 
107cb     46 46 46 45 
107cf     47 49 4D 50 
107d3     51 51 50 4C | 	byte	$38, $3d, $42, $44, $46, $46, $46, $45, $47, $49, $4d, $50, $51, $51, $50, $4c
107d7     42 31 20 12 
107db     09 04 01 00 
107df     02 07 0B 10 
107e3     13 14 0F FB | 	byte	$42, $31, $20, $12, $09, $04, $01, $00, $02, $07, $0b, $10, $13, $14, $0f, $fb
107e7     E3 C8 AF 9D 
107eb     8C 83 82 81 
107ef     83 8C 98 A6 
107f3     B1 B9 C2 CD | 	byte	$e3, $c8, $af, $9d, $8c, $83, $82, $81, $83, $8c, $98, $a6, $b1, $b9, $c2, $cd
107f7     D8 E3 EC F4 
107fb     FB 00 04 09 
107ff     10 17 1F 25 
10803     29 2B 2D 32 | 	byte	$d8, $e3, $ec, $f4, $fb, $00, $04, $09, $10, $17, $1f, $25, $29, $2b, $2d, $32
10807     37 3B 3F 41 
1080b     42 42 41 42 
1080f     44 48 4B 4D 
10813     4C 4B 4B 4C | 	byte	$37, $3b, $3f, $41, $42, $42, $41, $42, $44, $48, $4b, $4d, $4c, $4b, $4b, $4c
10817     4F 4F 4F 4E 
1081b     4C 48 3A 16 
1081f     EC BF 9C 87 
10823     81 81 81 82 | 	byte	$4f, $4f, $4f, $4e, $4c, $48, $3a, $16, $ec, $bf, $9c, $87, $81, $81, $81, $82
10827     82 87 93 9D 
1082b     A6 AE B5 BE 
1082f     C7 CC CC CB 
10833     CA CB D1 DA | 	byte	$82, $87, $93, $9d, $a6, $ae, $b5, $be, $c7, $cc, $cc, $cb, $ca, $cb, $d1, $da
10837     E4 EC F5 FB 
1083b     01 05 0A 11 
1083f     18 20 25 2A 
10843     2D 2F 33 39 | 	byte	$e4, $ec, $f5, $fb, $01, $05, $0a, $11, $18, $20, $25, $2a, $2d, $2f, $33, $39
10847     3D 41 43 45 
1084b     45 45 45 48 
1084f     4B 4E 50 50 
10853     4F 4E 48 3A | 	byte	$3d, $41, $43, $45, $45, $45, $45, $48, $4b, $4e, $50, $50, $4f, $4e, $48, $3a
10857     2B 19 0E 06 
1085b     02 01 02 05 
1085f     09 0E 11 14 
10863     12 03 EC D4 | 	byte	$2b, $19, $0e, $06, $02, $01, $02, $05, $09, $0e, $11, $14, $12, $03, $ec, $d4
10867     C1 AE 9C 8B 
1086b     83 82 82 88 
1086f     93 9F A9 B4 
10873     BC C5 D1 DB | 	byte	$c1, $ae, $9c, $8b, $83, $82, $82, $88, $93, $9f, $a9, $b4, $bc, $c5, $d1, $db
10877     E6 EE F6 FC 
1087b     01 06 0D 13 
1087f     1A 21 25 28 
10883     2B 2E 33 37 | 	byte	$e6, $ee, $f6, $fc, $01, $06, $0d, $13, $1a, $21, $25, $28, $2b, $2e, $33, $37
10887     3B 3E 40 41 
1088b     41 41 44 46 
1088f     49 4A 4B 4A 
10893     4A 4A 4B 4C | 	byte	$3b, $3e, $40, $41, $41, $41, $44, $46, $49, $4a, $4b, $4a, $4a, $4a, $4b, $4c
10897     4D 4C 4C 49 
1089b     41 2B 07 DA 
1089f     B7 99 85 81 
108a3     82 81 81 84 | 	byte	$4d, $4c, $4c, $49, $41, $2b, $07, $da, $b7, $99, $85, $81, $82, $81, $81, $84
108a7     8D 98 A1 A9 
108ab     B2 BA C4 CC 
108af     CE CD CB CB 
108b3     CD D3 DD E5 | 	byte	$8d, $98, $a1, $a9, $b2, $ba, $c4, $cc, $ce, $cd, $cb, $cb, $cd, $d3, $dd, $e5
108b7     EE F6 FC 03 
108bb     07 0E 15 1B 
108bf     21 26 2A 2D 
108c3     30 34 39 3D | 	byte	$ee, $f6, $fc, $03, $07, $0e, $15, $1b, $21, $26, $2a, $2d, $30, $34, $39, $3d
108c7     40 42 44 44 
108cb     46 47 49 4C 
108cf     4D 4E 4E 4D 
108d3     4B 43 34 22 | 	byte	$40, $42, $44, $44, $46, $47, $49, $4c, $4d, $4e, $4e, $4d, $4b, $43, $34, $22
108d7     14 0A 04 02 
108db     02 04 08 0B 
108df     0E 11 11 09 
108e3     F5 DD C9 B8 | 	byte	$14, $0a, $04, $02, $02, $04, $08, $0b, $0e, $11, $11, $09, $f5, $dd, $c9, $b8
108e7     AA 9B 8C 85 
108eb     83 86 8D 98 
108ef     A2 AC B5 BF 
108f3     C8 D3 DE E7 | 	byte	$aa, $9b, $8c, $85, $83, $86, $8d, $98, $a2, $ac, $b5, $bf, $c8, $d3, $de, $e7
108f7     F0 F7 FE 03 
108fb     0A 10 16 1C 
108ff     21 25 28 2B 
10903     2F 34 38 3B | 	byte	$f0, $f7, $fe, $03, $0a, $10, $16, $1c, $21, $25, $28, $2b, $2f, $34, $38, $3b
10907     3E 40 41 44 
1090b     45 47 49 4A 
1090f     4A 4A 4A 4A 
10913     4B 4C 4C 4D | 	byte	$3e, $40, $41, $44, $45, $47, $49, $4a, $4a, $4a, $4a, $4a, $4b, $4c, $4c, $4d
10917     4C 49 40 2E 
1091b     16 FA D7 B8 
1091f     9D 8B 82 81 
10923     82 82 89 92 | 	byte	$4c, $49, $40, $2e, $16, $fa, $d7, $b8, $9d, $8b, $82, $81, $82, $82, $89, $92
10927     9C A5 AF B8 
1092b     C1 C9 CF CF 
1092f     CD CB CC D1 
10933     D7 DF E8 EF | 	byte	$9c, $a5, $af, $b8, $c1, $c9, $cf, $cf, $cd, $cb, $cc, $d1, $d7, $df, $e8, $ef
10937     F7 FE 04 0B 
1093b     11 17 1D 21 
1093f     26 29 2D 31 
10943     35 39 3D 40 | 	byte	$f7, $fe, $04, $0b, $11, $17, $1d, $21, $26, $29, $2d, $31, $35, $39, $3d, $40
10947     42 44 46 48 
1094b     49 4A 4B 4C 
1094f     4C 4C 4C 49 
10953     3E 2E 1D 11 | 	byte	$42, $44, $46, $48, $49, $4a, $4b, $4c, $4c, $4c, $4c, $49, $3e, $2e, $1d, $11
10957     08 05 05 06 
1095b     07 09 0C 0F 
1095f     11 0D FC E6 
10963     CE BD AE A3 | 	byte	$08, $05, $05, $06, $07, $09, $0c, $0f, $11, $0d, $fc, $e6, $ce, $bd, $ae, $a3
10967     9A 93 8F 8D 
1096b     8F 95 9D A5 
1096f     AE B7 C2 CC 
10973     D6 E0 EA F1 | 	byte	$9a, $93, $8f, $8d, $8f, $95, $9d, $a5, $ae, $b7, $c2, $cc, $d6, $e0, $ea, $f1
10977     F9 00 07 0D 
1097b     12 18 1C 20 
1097f     24 27 2C 30 
10983     34 38 3B 3E | 	byte	$f9, $00, $07, $0d, $12, $18, $1c, $20, $24, $27, $2c, $30, $34, $38, $3b, $3e
10987     40 42 45 46 
1098b     47 47 48 48 
1098f     48 48 49 4A 
10993     4B 4B 4C 47 | 	byte	$40, $42, $45, $46, $47, $47, $48, $48, $48, $48, $49, $4a, $4b, $4b, $4c, $47
10997     3B 27 14 02 
1099b     F2 D9 BE A7 
1099f     93 87 83 84 
109a3     87 8F 99 A1 | 	byte	$3b, $27, $14, $02, $f2, $d9, $be, $a7, $93, $87, $83, $84, $87, $8f, $99, $a1
109a7     AC B5 BE C7 
109ab     CD D0 CF CD 
109af     CB CD D3 DA 
109b3     E2 EA F1 FA | 	byte	$ac, $b5, $be, $c7, $cd, $d0, $cf, $cd, $cb, $cd, $d3, $da, $e2, $ea, $f1, $fa
109b7     01 09 0F 14 
109bb     19 1D 21 25 
109bf     29 2D 31 35 
109c3     39 3D 40 43 | 	byte	$01, $09, $0f, $14, $19, $1d, $21, $25, $29, $2d, $31, $35, $39, $3d, $40, $43
109c7     46 48 49 4A 
109cb     49 4A 4A 4A 
109cf     4A 4A 45 37 
109d3     26 18 0D 08 | 	byte	$46, $48, $49, $4a, $49, $4a, $4a, $4a, $4a, $4a, $45, $37, $26, $18, $0d, $08
109d7     06 06 07 09 
109db     0B 0D 0F 0E 
109df     03 EF D7 C2 
109e3     B0 A3 9E 9C | 	byte	$06, $06, $07, $09, $0b, $0d, $0f, $0e, $03, $ef, $d7, $c2, $b0, $a3, $9e, $9c
109e7     9B 9A 99 99 
109eb     9D A2 AA B1 
109ef     BB C6 D0 DA 
109f3     E3 EC F5 FD | 	byte	$9b, $9a, $99, $99, $9d, $a2, $aa, $b1, $bb, $c6, $d0, $da, $e3, $ec, $f5, $fd
109f7     04 0A 0F 13 
109fb     17 1B 1F 22 
109ff     27 2B 30 34 
10a03     38 3B 3E 41 | 	byte	$04, $0a, $0f, $13, $17, $1b, $1f, $22, $27, $2b, $30, $34, $38, $3b, $3e, $41
10a07     44 45 45 45 
10a0b     45 45 45 45 
10a0f     47 49 4A 4A 
10a13     49 44 35 21 | 	byte	$44, $45, $45, $45, $45, $45, $45, $45, $47, $49, $4a, $4a, $49, $44, $35, $21
10a17     0F FF F6 ED 
10a1b     DD C8 B0 9E 
10a1f     90 8A 8A 8E 
10a23     95 9E A8 B3 | 	byte	$0f, $ff, $f6, $ed, $dd, $c8, $b0, $9e, $90, $8a, $8a, $8e, $95, $9e, $a8, $b3
10a27     BB C3 CA CF 
10a2b     D0 CF CC CC 
10a2f     CF D5 DD E4 
10a33     EC F5 FD 05 | 	byte	$bb, $c3, $ca, $cf, $d0, $cf, $cc, $cc, $cf, $d5, $dd, $e4, $ec, $f5, $fd, $05
10a37     0C 10 15 18 
10a3b     1D 20 24 28 
10a3f     2E 32 37 3A 
10a43     3D 41 45 47 | 	byte	$0c, $10, $15, $18, $1d, $20, $24, $28, $2e, $32, $37, $3a, $3d, $41, $45, $47
10a47     49 49 48 48 
10a4b     48 48 48 49 
10a4f     48 40 31 20 
10a53     13 0C 09 07 | 	byte	$49, $49, $48, $48, $48, $48, $48, $49, $48, $40, $31, $20, $13, $0c, $09, $07
10a57     06 07 09 0A 
10a5b     0C 0D 07 F7 
10a5f     DE C9 B4 A5 
10a63     9E 9D 9F A3 | 	byte	$06, $07, $09, $0a, $0c, $0d, $07, $f7, $de, $c9, $b4, $a5, $9e, $9d, $9f, $a3
10a67     A4 A3 A2 A3 
10a6b     A7 AD B4 BF 
10a6f     C8 D2 DD E5 
10a73     EF F8 00 07 | 	byte	$a4, $a3, $a2, $a3, $a7, $ad, $b4, $bf, $c8, $d2, $dd, $e5, $ef, $f8, $00, $07
10a77     0B 10 13 16 
10a7b     1A 1E 23 27 
10a7f     2C 31 34 39 
10a83     3C 40 43 44 | 	byte	$0b, $10, $13, $16, $1a, $1e, $23, $27, $2c, $31, $34, $39, $3c, $40, $43, $44
10a87     44 44 44 43 
10a8b     43 43 44 45 
10a8f     48 49 47 3E 
10a93     2F 1B 0A FE | 	byte	$44, $44, $44, $43, $43, $43, $44, $45, $48, $49, $47, $3e, $2f, $1b, $0a, $fe
10a97     F5 F1 EF E7 
10a9b     D7 C1 AD 9E 
10a9f     95 93 95 9C 
10aa3     A4 AE B7 BF | 	byte	$f5, $f1, $ef, $e7, $d7, $c1, $ad, $9e, $95, $93, $95, $9c, $a4, $ae, $b7, $bf
10aa7     C6 CC CF CF 
10aab     CD CB CC D0 
10aaf     D7 DE E6 EF 
10ab3     F8 00 07 0C | 	byte	$c6, $cc, $cf, $cf, $cd, $cb, $cc, $d0, $d7, $de, $e6, $ef, $f8, $00, $07, $0c
10ab7     10 14 17 1B 
10abb     1F 23 28 2D 
10abf     32 37 3A 3F 
10ac3     43 45 47 48 | 	byte	$10, $14, $17, $1b, $1f, $23, $28, $2d, $32, $37, $3a, $3f, $43, $45, $47, $48
10ac7     47 47 46 45 
10acb     46 47 48 46 
10acf     3B 2D 1F 14 
10ad3     0E 09 08 07 | 	byte	$47, $47, $46, $45, $46, $47, $48, $46, $3b, $2d, $1f, $14, $0e, $09, $08, $07
10ad7     08 08 09 0B 
10adb     09 FE EB D2 
10adf     BD AB A1 9C 
10ae3     9D A2 A6 AA | 	byte	$08, $08, $09, $0b, $09, $fe, $eb, $d2, $bd, $ab, $a1, $9c, $9d, $a2, $a6, $aa
10ae7     AC AB AB AC 
10aeb     B0 B7 C0 CA 
10aef     D4 DE E8 F1 
10af3     F9 00 06 0A | 	byte	$ac, $ab, $ab, $ac, $b0, $b7, $c0, $ca, $d4, $de, $e8, $f1, $f9, $00, $06, $0a
10af7     0E 11 14 18 
10afb     1C 22 27 2C 
10aff     31 35 3A 3E 
10b03     41 43 43 43 | 	byte	$0e, $11, $14, $18, $1c, $22, $27, $2c, $31, $35, $3a, $3e, $41, $43, $43, $43
10b07     43 41 41 40 
10b0b     41 43 45 47 
10b0f     45 3C 2B 1A 
10b13     0B FF F8 F4 | 	byte	$43, $41, $41, $40, $41, $43, $45, $47, $45, $3c, $2b, $1a, $0b, $ff, $f8, $f4
10b17     F2 F2 EF E3 
10b1b     D2 BD AE A2 
10b1f     9E 9F A4 AA 
10b23     B2 BA C1 C7 | 	byte	$f2, $f2, $ef, $e3, $d2, $bd, $ae, $a2, $9e, $9f, $a4, $aa, $b2, $ba, $c1, $c7
10b27     CC CF CF CD 
10b2b     CB CE D2 DA 
10b2f     E1 E9 F2 FA 
10b33     01 06 0B 0F | 	byte	$cc, $cf, $cf, $cd, $cb, $ce, $d2, $da, $e1, $e9, $f2, $fa, $01, $06, $0b, $0f
10b37     12 16 19 1D 
10b3b     22 27 2D 32 
10b3f     37 3C 40 44 
10b43     45 46 46 45 | 	byte	$12, $16, $19, $1d, $22, $27, $2d, $32, $37, $3c, $40, $44, $45, $46, $46, $45
10b47     45 44 43 43 
10b4b     45 47 43 39 
10b4f     2B 1F 14 0E 
10b53     0A 08 07 07 | 	byte	$45, $44, $43, $43, $45, $47, $43, $39, $2b, $1f, $14, $0e, $0a, $08, $07, $07
10b57     08 08 09 03 
10b5b     F3 DE C6 B2 
10b5f     A6 A0 9E A0 
10b63     A4 AA AF B3 | 	byte	$08, $08, $09, $03, $f3, $de, $c6, $b2, $a6, $a0, $9e, $a0, $a4, $aa, $af, $b3
10b67     B4 B4 B3 B7 
10b6b     BC C4 CE D7 
10b6f     E1 EB F2 FA 
10b73     FF 04 09 0C | 	byte	$b4, $b4, $b3, $b7, $bc, $c4, $ce, $d7, $e1, $eb, $f2, $fa, $ff, $04, $09, $0c
10b77     10 13 17 1C 
10b7b     21 27 2C 32 
10b7f     37 3B 3E 41 
10b83     42 41 41 40 | 	byte	$10, $13, $17, $1c, $21, $27, $2c, $32, $37, $3b, $3e, $41, $42, $41, $41, $40
10b87     3F 3F 3E 41 
10b8b     43 44 42 37 
10b8f     28 17 08 FF 
10b93     F8 F5 F4 F4 | 	byte	$3f, $3f, $3e, $41, $43, $44, $42, $37, $28, $17, $08, $ff, $f8, $f5, $f4, $f4
10b97     F5 F5 EF E0 
10b9b     CC BC B0 AA 
10b9f     AA AC B1 B7 
10ba3     BD C2 C8 CD | 	byte	$f5, $f5, $ef, $e0, $cc, $bc, $b0, $aa, $aa, $ac, $b1, $b7, $bd, $c2, $c8, $cd
10ba7     CF CF CD CE 
10bab     D1 D6 DD E6 
10baf     EE F5 FC 01 
10bb3     07 0B 0E 12 | 	byte	$cf, $cf, $cd, $ce, $d1, $d6, $dd, $e6, $ee, $f5, $fc, $01, $07, $0b, $0e, $12
10bb7     15 18 1C 22 
10bbb     27 2E 34 3A 
10bbf     3E 41 42 43 
10bc3     43 43 43 42 | 	byte	$15, $18, $1c, $22, $27, $2e, $34, $3a, $3e, $41, $42, $43, $43, $43, $43, $42
10bc7     41 40 42 44 
10bcb     45 3F 35 28 
10bcf     1C 13 0C 08 
10bd3     06 05 06 07 | 	byte	$41, $40, $42, $44, $45, $3f, $35, $28, $1c, $13, $0c, $08, $06, $05, $06, $07
10bd7     07 05 F7 E4 
10bdb     CD B8 AA A1 
10bdf     9F 9F A2 A7 
10be3     AC B3 B8 BC | 	byte	$07, $05, $f7, $e4, $cd, $b8, $aa, $a1, $9f, $9f, $a2, $a7, $ac, $b3, $b8, $bc
10be7     BC BC BE C4 
10beb     CA D4 DD E7 
10bef     EE F4 FA FF 
10bf3     04 08 0B 0F | 	byte	$bc, $bc, $be, $c4, $ca, $d4, $dd, $e7, $ee, $f4, $fa, $ff, $04, $08, $0b, $0f
10bf7     11 16 1C 22 
10bfb     29 30 36 3A 
10bff     3D 3E 3F 3F 
10c03     3F 3E 3E 3D | 	byte	$11, $16, $1c, $22, $29, $30, $36, $3a, $3d, $3e, $3f, $3f, $3f, $3e, $3e, $3d
10c07     3D 3E 3F 41 
10c0b     3D 32 22 13 
10c0f     06 FD F7 F4 
10c13     F4 F5 F6 F9 | 	byte	$3d, $3e, $3f, $41, $3d, $32, $22, $13, $06, $fd, $f7, $f4, $f4, $f5, $f6, $f9
10c17     FA F8 ED DB 
10c1b     CB BD B6 B3 
10c1f     B3 B5 BA BE 
10c23     C4 C9 CE CF | 	byte	$fa, $f8, $ed, $db, $cb, $bd, $b6, $b3, $b3, $b5, $ba, $be, $c4, $c9, $ce, $cf
10c27     CD CD CE D2 
10c2b     D9 E1 EA F1 
10c2f     F7 FC 01 05 
10c33     09 0D 10 13 | 	byte	$cd, $cd, $ce, $d2, $d9, $e1, $ea, $f1, $f7, $fc, $01, $05, $09, $0d, $10, $13
10c37     17 1D 23 29 
10c3b     31 37 3C 3F 
10c3f     41 41 41 41 
10c43     40 40 3F 3E | 	byte	$17, $1d, $23, $29, $31, $37, $3c, $3f, $41, $41, $41, $41, $40, $40, $3f, $3e
10c47     3E 41 43 43 
10c4b     3D 32 24 19 
10c4f     0F 09 05 04 
10c53     04 04 05 05 | 	byte	$3e, $41, $43, $43, $3d, $32, $24, $19, $0f, $09, $05, $04, $04, $04, $05, $05
10c57     FC E9 D4 BE 
10c5b     AF A5 A0 9F 
10c5f     A1 A4 AA B0 
10c63     B6 BD C2 C4 | 	byte	$fc, $e9, $d4, $be, $af, $a5, $a0, $9f, $a1, $a4, $aa, $b0, $b6, $bd, $c2, $c4
10c67     C6 C8 CD D4 
10c6b     DC E4 EB F0 
10c6f     F6 FA FE 03 
10c73     07 0A 0D 11 | 	byte	$c6, $c8, $cd, $d4, $dc, $e4, $eb, $f0, $f6, $fa, $fe, $03, $07, $0a, $0d, $11
10c77     16 1C 24 2B 
10c7b     33 38 3B 3D 
10c7f     3E 3D 3D 3D 
10c83     3C 3C 3B 3B | 	byte	$16, $1c, $24, $2b, $33, $38, $3b, $3d, $3e, $3d, $3d, $3d, $3c, $3c, $3b, $3b
10c87     3D 3D 37 2C 
10c8b     1D 10 05 FD 
10c8f     F8 F6 F6 F7 
10c93     F9 FB FE 01 | 	byte	$3d, $3d, $37, $2c, $1d, $10, $05, $fd, $f8, $f6, $f6, $f7, $f9, $fb, $fe, $01
10c97     01 FA ED DB 
10c9b     CD C2 BC B9 
10c9f     B9 BB BF C4 
10ca3     C9 CD CD CC | 	byte	$01, $fa, $ed, $db, $cd, $c2, $bc, $b9, $b9, $bb, $bf, $c4, $c9, $cd, $cd, $cc
10ca7     CC CF D4 DD 
10cab     E4 EC F2 F7 
10caf     FB FF 03 07 
10cb3     0A 0E 12 16 | 	byte	$cc, $cf, $d4, $dd, $e4, $ec, $f2, $f7, $fb, $ff, $03, $07, $0a, $0e, $12, $16
10cb7     1C 23 2C 33 
10cbb     39 3D 3F 3F 
10cbf     3F 3E 3E 3E 
10cc3     3D 3C 3C 3D | 	byte	$1c, $23, $2c, $33, $39, $3d, $3f, $3f, $3f, $3e, $3e, $3e, $3d, $3c, $3c, $3d
10cc7     40 43 42 3A 
10ccb     2F 21 16 0C 
10ccf     07 04 02 03 
10cd3     04 04 FF F1 | 	byte	$40, $43, $42, $3a, $2f, $21, $16, $0c, $07, $04, $02, $03, $04, $04, $ff, $f1
10cd7     DC C5 B5 A9 
10cdb     A3 A0 A1 A2 
10cdf     A6 AC B2 B9 
10ce3     BF C6 CB CF | 	byte	$dc, $c5, $b5, $a9, $a3, $a0, $a1, $a2, $a6, $ac, $b2, $b9, $bf, $c6, $cb, $cf
10ce7     D3 D8 DD E4 
10ceb     E9 EE F2 F5 
10cef     F9 FC 00 05 
10cf3     08 0C 11 16 | 	byte	$d3, $d8, $dd, $e4, $e9, $ee, $f2, $f5, $f9, $fc, $00, $05, $08, $0c, $11, $16
10cf7     1E 26 2E 34 
10cfb     39 3B 3B 3B 
10cff     3B 3A 3A 3A 
10d03     39 39 3A 37 | 	byte	$1e, $26, $2e, $34, $39, $3b, $3b, $3b, $3b, $3a, $3a, $3a, $39, $39, $3a, $37
10d07     30 24 18 0C 
10d0b     03 FD F9 F7 
10d0f     F6 F7 F9 FC 
10d13     FE 01 06 09 | 	byte	$30, $24, $18, $0c, $03, $fd, $f9, $f7, $f6, $f7, $f9, $fc, $fe, $01, $06, $09
10d17     07 FD EC DB 
10d1b     CF C5 BF BD 
10d1f     BE C0 C6 CA 
10d23     CD CE CD CF | 	byte	$07, $fd, $ec, $db, $cf, $c5, $bf, $bd, $be, $c0, $c6, $ca, $cd, $ce, $cd, $cf
10d27     D3 D9 E0 E7 
10d2b     ED F2 F5 F9 
10d2f     FC 01 05 09 
10d33     0C 11 17 1F | 	byte	$d3, $d9, $e0, $e7, $ed, $f2, $f5, $f9, $fc, $01, $05, $09, $0c, $11, $17, $1f
10d37     26 2F 34 3A 
10d3b     3D 3D 3D 3C 
10d3f     3B 3B 3B 3B 
10d43     3B 3B 3E 42 | 	byte	$26, $2f, $34, $3a, $3d, $3d, $3d, $3c, $3b, $3b, $3b, $3b, $3b, $3b, $3e, $42
10d47     44 41 38 2B 
10d4b     1E 14 0B 05 
10d4f     02 01 02 03 
10d53     00 F5 E3 CD | 	byte	$44, $41, $38, $2b, $1e, $14, $0b, $05, $02, $01, $02, $03, $00, $f5, $e3, $cd
10d57     BA AE A5 A1 
10d5b     A1 A2 A5 AA 
10d5f     AE B5 BC C3 
10d63     CA D2 DA E0 | 	byte	$ba, $ae, $a5, $a1, $a1, $a2, $a5, $aa, $ae, $b5, $bc, $c3, $ca, $d2, $da, $e0
10d67     E5 E9 EC EF 
10d6b     F2 F4 F6 F9 
10d6f     FD 00 04 08 
10d73     0C 13 1A 22 | 	byte	$e5, $e9, $ec, $ef, $f2, $f4, $f6, $f9, $fd, $00, $04, $08, $0c, $13, $1a, $22
10d77     2A 30 35 38 
10d7b     3A 39 38 38 
10d7f     36 36 37 36 
10d83     36 32 28 1D | 	byte	$2a, $30, $35, $38, $3a, $39, $38, $38, $36, $36, $37, $36, $36, $32, $28, $1d
10d87     11 08 01 FC 
10d8b     FA F8 F7 F8 
10d8f     FA FC FF 02 
10d93     06 0C 12 13 | 	byte	$11, $08, $01, $fc, $fa, $f8, $f7, $f8, $fa, $fc, $ff, $02, $06, $0c, $12, $13
10d97     0A F9 E6 D8 
10d9b     CC C5 C1 C0 
10d9f     C2 C6 CA CD 
10da3     CE D0 D2 D7 | 	byte	$0a, $f9, $e6, $d8, $cc, $c5, $c1, $c0, $c2, $c6, $ca, $cd, $ce, $d0, $d2, $d7
10da7     DC E2 E8 ED 
10dab     F2 F5 F8 FB 
10daf     FF 03 07 0C 
10db3     13 1A 23 2A | 	byte	$dc, $e2, $e8, $ed, $f2, $f5, $f8, $fb, $ff, $03, $07, $0c, $13, $1a, $23, $2a
10db7     30 36 39 3B 
10dbb     3C 3B 3A 39 
10dbf     38 38 38 39 
10dc3     3C 40 44 44 | 	byte	$30, $36, $39, $3b, $3c, $3b, $3a, $39, $38, $38, $38, $39, $3c, $40, $44, $44
10dc7     3E 32 26 19 
10dcb     10 08 03 00 
10dcf     FF 00 00 F8 
10dd3     E9 D3 C0 B0 | 	byte	$3e, $32, $26, $19, $10, $08, $03, $00, $ff, $00, $00, $f8, $e9, $d3, $c0, $b0
10dd7     A6 A2 A0 A2 
10ddb     A4 A8 AC B1 
10ddf     B8 BF C6 CF 
10de3     D9 E4 EB F0 | 	byte	$a6, $a2, $a0, $a2, $a4, $a8, $ac, $b1, $b8, $bf, $c6, $cf, $d9, $e4, $eb, $f0
10de7     F2 F2 F4 F4 
10deb     F5 F6 F8 FA 
10def     FE 02 06 0D 
10df3     16 1D 26 2B | 	byte	$f2, $f2, $f4, $f4, $f5, $f6, $f8, $fa, $fe, $02, $06, $0d, $16, $1d, $26, $2b
10df7     30 35 37 38 
10dfb     37 36 34 34 
10dff     34 34 32 2C 
10e03     22 15 0A 02 | 	byte	$30, $35, $37, $38, $37, $36, $34, $34, $34, $34, $32, $2c, $22, $15, $0a, $02
10e07     FD FA F9 F9 
10e0b     F9 F9 FA FC 
10e0f     FF 02 07 0D 
10e13     15 1B 1C 14 | 	byte	$fd, $fa, $f9, $f9, $f9, $f9, $fa, $fc, $ff, $02, $07, $0d, $15, $1b, $1c, $14
10e17     06 F1 E0 D3 
10e1b     CA C5 C3 C4 
10e1f     C7 CB CF D1 
10e23     D4 D6 DA DF | 	byte	$06, $f1, $e0, $d3, $ca, $c5, $c3, $c4, $c7, $cb, $cf, $d1, $d4, $d6, $da, $df
10e27     E4 E9 ED F1 
10e2b     F4 F7 FA FD 
10e2f     02 07 0E 17 
10e33     1F 27 2D 32 | 	byte	$e4, $e9, $ed, $f1, $f4, $f7, $fa, $fd, $02, $07, $0e, $17, $1f, $27, $2d, $32
10e37     36 38 3A 3A 
10e3b     39 37 36 35 
10e3f     35 37 3A 3F 
10e43     44 45 43 3A | 	byte	$36, $38, $3a, $3a, $39, $37, $36, $35, $35, $37, $3a, $3f, $44, $45, $43, $3a
10e47     2E 21 15 0C 
10e4b     05 01 FF FF 
10e4f     FF FB EF DB 
10e53     C7 B6 AA A3 | 	byte	$2e, $21, $15, $0c, $05, $01, $ff, $ff, $ff, $fb, $ef, $db, $c7, $b6, $aa, $a3
10e57     A1 A1 A3 A7 
10e5b     AA AF B4 BA 
10e5f     C2 CA D6 E1 
10e63     EC F3 F8 F9 | 	byte	$a1, $a1, $a3, $a7, $aa, $af, $b4, $ba, $c2, $ca, $d6, $e1, $ec, $f3, $f8, $f9
10e67     F8 F7 F6 F6 
10e6b     F6 F7 F9 FD 
10e6f     01 07 0F 19 
10e73     21 27 2B 2F | 	byte	$f8, $f7, $f6, $f6, $f6, $f7, $f9, $fd, $01, $07, $0f, $19, $21, $27, $2b, $2f
10e77     32 34 35 34 
10e7b     33 32 31 30 
10e7f     2C 25 19 0F 
10e83     06 FE FA F8 | 	byte	$32, $34, $35, $34, $33, $32, $31, $30, $2c, $25, $19, $0f, $06, $fe, $fa, $f8
10e87     F8 F9 FA FB 
10e8b     FC FD FF 02 
10e8f     07 0D 15 1B 
10e93     22 23 1E 10 | 	byte	$f8, $f9, $fa, $fb, $fc, $fd, $ff, $02, $07, $0d, $15, $1b, $22, $23, $1e, $10
10e97     00 ED DD D3 
10e9b     CB C7 C7 C9 
10e9f     CC D0 D3 D6 
10ea3     D7 DA DE E2 | 	byte	$00, $ed, $dd, $d3, $cb, $c7, $c7, $c9, $cc, $d0, $d3, $d6, $d7, $da, $de, $e2
10ea7     E7 EB EE F2 
10eab     F5 F7 FB 00 
10eaf     06 0F 18 20 
10eb3     26 2C 30 33 | 	byte	$e7, $eb, $ee, $f2, $f5, $f7, $fb, $00, $06, $0f, $18, $20, $26, $2c, $30, $33
10eb7     35 36 36 35 
10ebb     34 33 32 33 
10ebf     36 3A 3F 44 
10ec3     44 3F 36 2A | 	byte	$35, $36, $36, $35, $34, $33, $32, $33, $36, $3a, $3f, $44, $44, $3f, $36, $2a
10ec7     1E 14 0B 05 
10ecb     00 FD FD FB 
10ecf     F4 E4 D2 C1 
10ed3     B2 A9 A3 A2 | 	byte	$1e, $14, $0b, $05, $00, $fd, $fd, $fb, $f4, $e4, $d2, $c1, $b2, $a9, $a3, $a2
10ed7     A3 A5 A9 AD 
10edb     B1 B6 BC C4 
10edf     CE DA E4 EF 
10ee3     F5 FB FD FD | 	byte	$a3, $a5, $a9, $ad, $b1, $b6, $bc, $c4, $ce, $da, $e4, $ef, $f5, $fb, $fd, $fd
10ee7     FC FA F8 F7 
10eeb     F7 F8 FB 00 
10eef     08 10 19 1F 
10ef3     25 29 2C 2F | 	byte	$fc, $fa, $f8, $f7, $f7, $f8, $fb, $00, $08, $10, $19, $1f, $25, $29, $2c, $2f
10ef7     31 31 31 30 
10efb     2F 2E 28 20 
10eff     16 0D 05 FF 
10f03     FB F9 F8 F9 | 	byte	$31, $31, $31, $30, $2f, $2e, $28, $20, $16, $0d, $05, $ff, $fb, $f9, $f8, $f9
10f07     FB FC FD FF 
10f0b     01 03 06 0C 
10f0f     13 1A 21 25 
10f13     27 24 19 0B | 	byte	$fb, $fc, $fd, $ff, $01, $03, $06, $0c, $13, $1a, $21, $25, $27, $24, $19, $0b
10f17     FA E9 DD D4 
10f1b     CD CC CD D0 
10f1f     D4 D7 D9 DA 
10f23     DC DE E2 E6 | 	byte	$fa, $e9, $dd, $d4, $cd, $cc, $cd, $d0, $d4, $d7, $d9, $da, $dc, $de, $e2, $e6
10f27     E9 EE F1 F3 
10f2b     F7 FB 00 08 
10f2f     10 19 20 27 
10f33     2B 2E 30 32 | 	byte	$e9, $ee, $f1, $f3, $f7, $fb, $00, $08, $10, $19, $20, $27, $2b, $2e, $30, $32
10f37     33 33 33 31 
10f3b     30 31 32 36 
10f3f     3B 3F 42 42 
10f43     3C 32 26 1B | 	byte	$33, $33, $33, $31, $30, $31, $32, $36, $3b, $3f, $42, $42, $3c, $32, $26, $1b
10f47     11 0A 04 00 
10f4b     FE FC F7 EC 
10f4f     DA C8 BB AE 
10f53     A7 A2 A2 A3 | 	byte	$11, $0a, $04, $00, $fe, $fc, $f7, $ec, $da, $c8, $bb, $ae, $a7, $a2, $a2, $a3
10f57     A7 AA AF B4 
10f5b     B9 C0 C9 D4 
10f5f     DF E8 F2 F8 
10f63     FD 01 02 01 | 	byte	$a7, $aa, $af, $b4, $b9, $c0, $c9, $d4, $df, $e8, $f2, $f8, $fd, $01, $02, $01
10f67     FF FC FA F9 
10f6b     FA FD 03 0A 
10f6f     12 1A 1F 24 
10f73     28 2A 2C 2E | 	byte	$ff, $fc, $fa, $f9, $fa, $fd, $03, $0a, $12, $1a, $1f, $24, $28, $2a, $2c, $2e
10f77     2E 2E 2E 2B 
10f7b     25 1A 10 07 
10f7f     00 FC F9 F8 
10f83     F7 F9 FA FC | 	byte	$2e, $2e, $2e, $2b, $25, $1a, $10, $07, $00, $fc, $f9, $f8, $f7, $f9, $fa, $fc
10f87     FE 00 02 04 
10f8b     07 0B 12 19 
10f8f     1F 24 28 2A 
10f93     28 20 13 02 | 	byte	$fe, $00, $02, $04, $07, $0b, $12, $19, $1f, $24, $28, $2a, $28, $20, $13, $02
10f97     F2 E5 DA D3 
10f9b     D1 D1 D5 D7 
10f9f     D9 DA DB DC 
10fa3     DE E1 E4 E7 | 	byte	$f2, $e5, $da, $d3, $d1, $d1, $d5, $d7, $d9, $da, $db, $dc, $de, $e1, $e4, $e7
10fa7     EB EE F1 F5 
10fab     FB 01 09 11 
10faf     1A 21 25 29 
10fb3     2C 2D 2F 30 | 	byte	$eb, $ee, $f1, $f5, $fb, $01, $09, $11, $1a, $21, $25, $29, $2c, $2d, $2f, $30
10fb7     30 30 2F 2F 
10fbb     31 33 36 3C 
10fbf     3F 41 3F 37 
10fc3     2E 21 17 0E | 	byte	$30, $30, $2f, $2f, $31, $33, $36, $3c, $3f, $41, $3f, $37, $2e, $21, $17, $0e
10fc7     07 02 FF FD 
10fcb     F9 EE DF CD 
10fcf     BF B1 A9 A3 
10fd3     A1 A2 A4 A8 | 	byte	$07, $02, $ff, $fd, $f9, $ee, $df, $cd, $bf, $b1, $a9, $a3, $a1, $a2, $a4, $a8
10fd7     AC B2 B7 BD 
10fdb     C6 CE D9 E4 
10fdf     ED F5 FB 00 
10fe3     04 06 05 03 | 	byte	$ac, $b2, $b7, $bd, $c6, $ce, $d9, $e4, $ed, $f5, $fb, $00, $04, $06, $05, $03
10fe7     00 FE FD FE 
10feb     01 07 0D 14 
10fef     1A 20 23 26 
10ff3     28 29 2B 2B | 	byte	$00, $fe, $fd, $fe, $01, $07, $0d, $14, $1a, $20, $23, $26, $28, $29, $2b, $2b
10ff7     2B 28 20 15 
10ffb     09 01 FA F7 
10fff     F6 F6 F7 F9 
11003     FA FD FF 02 | 	byte	$2b, $28, $20, $15, $09, $01, $fa, $f7, $f6, $f6, $f7, $f9, $fa, $fd, $ff, $02
11007     04 07 0A 0E 
1100b     13 19 1F 25 
1100f     2A 2D 2E 2C 
11013     25 19 09 F9 | 	byte	$04, $07, $0a, $0e, $13, $19, $1f, $25, $2a, $2d, $2e, $2c, $25, $19, $09, $f9
11017     EB E0 D9 D6 
1101b     D7 D8 DA DA 
1101f     DA DB DC DD 
11023     DF E2 E6 E9 | 	byte	$eb, $e0, $d9, $d6, $d7, $d8, $da, $da, $da, $db, $dc, $dd, $df, $e2, $e6, $e9
11027     ED F1 F6 FC 
1102b     03 0C 13 1A 
1102f     21 25 28 2A 
11033     2B 2C 2D 2D | 	byte	$ed, $f1, $f6, $fc, $03, $0c, $13, $1a, $21, $25, $28, $2a, $2b, $2c, $2d, $2d
11037     2D 2E 2F 31 
1103b     34 38 3C 3F 
1103f     3F 3C 34 27 
11043     1C 13 0A 04 | 	byte	$2d, $2e, $2f, $31, $34, $38, $3c, $3f, $3f, $3c, $34, $27, $1c, $13, $0a, $04
11047     00 FE FB F3 
1104b     E3 D3 C2 B5 
1104f     AB A4 A2 A1 
11053     A3 A6 AB AF | 	byte	$00, $fe, $fb, $f3, $e3, $d3, $c2, $b5, $ab, $a4, $a2, $a1, $a3, $a6, $ab, $af
11057     B5 BC C4 CD 
1105b     D6 E0 E9 F1 
1105f     F8 FD 02 05 
11063     07 08 06 04 | 	byte	$b5, $bc, $c4, $cd, $d6, $e0, $e9, $f1, $f8, $fd, $02, $05, $07, $08, $06, $04
11067     02 02 03 06 
1106b     0A 10 16 1A 
1106f     1F 22 24 26 
11073     27 28 27 23 | 	byte	$02, $02, $03, $06, $0a, $10, $16, $1a, $1f, $22, $24, $26, $27, $28, $27, $23
11077     1B 0F 03 FA 
1107b     F4 F2 F2 F3 
1107f     F5 F8 FA FD 
11083     FF 02 05 07 | 	byte	$1b, $0f, $03, $fa, $f4, $f2, $f2, $f3, $f5, $f8, $fa, $fd, $ff, $02, $05, $07
11087     0B 0F 14 19 
1108b     1E 24 29 2C 
1108f     2F 2F 2D 28 
11093     1E 10 02 F3 | 	byte	$0b, $0f, $14, $19, $1e, $24, $29, $2c, $2f, $2f, $2d, $28, $1e, $10, $02, $f3
11097     E8 E1 DE DD 
1109b     DD DC DB DA 
1109f     DA DA DC DD 
110a3     E0 E4 E8 ED | 	byte	$e8, $e1, $de, $dd, $dd, $dc, $db, $da, $da, $da, $dc, $dd, $e0, $e4, $e8, $ed
110a7     F1 F7 FD 04 
110ab     0C 13 19 1E 
110af     22 25 27 28 
110b3     29 2A 2B 2B | 	byte	$f1, $f7, $fd, $04, $0c, $13, $19, $1e, $22, $25, $27, $28, $29, $2a, $2b, $2b
110b7     2D 2F 31 35 
110bb     37 3B 3D 3B 
110bf     37 2D 23 18 
110c3     0F 07 02 FF | 	byte	$2d, $2f, $31, $35, $37, $3b, $3d, $3b, $37, $2d, $23, $18, $0f, $07, $02, $ff
110c7     FC F6 E9 DA 
110cb     C9 B9 AE A7 
110cf     A3 A1 A2 A5 
110d3     A8 AE B3 BA | 	byte	$fc, $f6, $e9, $da, $c9, $b9, $ae, $a7, $a3, $a1, $a2, $a5, $a8, $ae, $b3, $ba
110d7     C1 C9 D3 DC 
110db     E4 EC F4 FA 
110df     FF 03 06 09 
110e3     0A 0A 0A 09 | 	byte	$c1, $c9, $d3, $dc, $e4, $ec, $f4, $fa, $ff, $03, $06, $09, $0a, $0a, $0a, $09
110e7     09 09 0C 0F 
110eb     12 17 1B 1E 
110ef     21 22 24 25 
110f3     24 1F 16 0A | 	byte	$09, $09, $0c, $0f, $12, $17, $1b, $1e, $21, $22, $24, $25, $24, $1f, $16, $0a
110f7     FF F6 F0 EE 
110fb     EE F0 F2 F6 
110ff     F8 FC FE 01 
11103     04 07 0C 0F | 	byte	$ff, $f6, $f0, $ee, $ee, $f0, $f2, $f6, $f8, $fc, $fe, $01, $04, $07, $0c, $0f
11107     14 19 1D 22 
1110b     27 2B 2E 30 
1110f     31 2E 2B 24 
11113     17 0A FC F1 | 	byte	$14, $19, $1d, $22, $27, $2b, $2e, $30, $31, $2e, $2b, $24, $17, $0a, $fc, $f1
11117     EA E6 E3 E1 
1111b     DF DC DB DA 
1111f     DA DB DD DF 
11123     E4 E7 ED F2 | 	byte	$ea, $e6, $e3, $e1, $df, $dc, $db, $da, $da, $db, $dd, $df, $e4, $e7, $ed, $f2
11127     F9 00 06 0D 
1112b     14 19 1D 21 
1112f     23 25 26 27 
11133     28 29 2A 2C | 	byte	$f9, $00, $06, $0d, $14, $19, $1d, $21, $23, $25, $26, $27, $28, $29, $2a, $2c
11137     2F 32 35 38 
1113b     3A 3B 39 33 
1113f     29 20 15 0C 
11143     06 02 FF F9 | 	byte	$2f, $32, $35, $38, $3a, $3b, $39, $33, $29, $20, $15, $0c, $06, $02, $ff, $f9
11147     EE E0 CE BF 
1114b     B2 A8 A3 A1 
1114f     A1 A3 A7 AB 
11153     B1 B7 BF C7 | 	byte	$ee, $e0, $ce, $bf, $b2, $a8, $a3, $a1, $a1, $a3, $a7, $ab, $b1, $b7, $bf, $c7
11157     CF D7 E1 E8 
1115b     EF F6 FC 01 
1115f     04 07 0A 0C 
11163     0E 0F 0E 0E | 	byte	$cf, $d7, $e1, $e8, $ef, $f6, $fc, $01, $04, $07, $0a, $0c, $0e, $0f, $0e, $0e
11167     0E 10 12 15 
1116b     18 1A 1D 1F 
1116f     20 21 1F 19 
11173     10 04 F9 F1 | 	byte	$0e, $10, $12, $15, $18, $1a, $1d, $1f, $20, $21, $1f, $19, $10, $04, $f9, $f1
11177     EC EA EA ED 
1117b     F0 F4 F8 FB 
1117f     FF 02 05 08 
11183     0C 10 14 19 | 	byte	$ec, $ea, $ea, $ed, $f0, $f4, $f8, $fb, $ff, $02, $05, $08, $0c, $10, $14, $19
11187     1D 22 26 29 
1118b     2D 2F 30 31 
1118f     2F 2C 27 1D 
11193     11 05 F9 F1 | 	byte	$1d, $22, $26, $29, $2d, $2f, $30, $31, $2f, $2c, $27, $1d, $11, $05, $f9, $f1
11197     EC E8 E4 E0 
1119b     DD DA D9 D9 
1119f     DA DC DF E4 
111a3     E9 EE F4 FA | 	byte	$ec, $e8, $e4, $e0, $dd, $da, $d9, $d9, $da, $dc, $df, $e4, $e9, $ee, $f4, $fa
111a7     01 07 0E 13 
111ab     17 1C 1F 21 
111af     23 24 26 27 
111b3     29 2B 2D 2F | 	byte	$01, $07, $0e, $13, $17, $1c, $1f, $21, $23, $24, $26, $27, $29, $2b, $2d, $2f
111b7     32 35 37 38 
111bb     39 35 2E 25 
111bf     1B 11 0A 05 
111c3     01 FC F3 E6 | 	byte	$32, $35, $37, $38, $39, $35, $2e, $25, $1b, $11, $0a, $05, $01, $fc, $f3, $e6
111c7     D4 C4 B5 AB 
111cb     A4 A1 A0 A2 
111cf     A5 AA AF B6 
111d3     BD C5 CC D4 | 	byte	$d4, $c4, $b5, $ab, $a4, $a1, $a0, $a2, $a5, $aa, $af, $b6, $bd, $c5, $cc, $d4
111d7     DD E4 EB F2 
111db     F8 FD 01 04 
111df     08 0A 0E 10 
111e3     13 13 14 14 | 	byte	$dd, $e4, $eb, $f2, $f8, $fd, $01, $04, $08, $0a, $0e, $10, $13, $13, $14, $14
111e7     14 15 16 18 
111eb     1A 1C 1D 1D 
111ef     1B 14 09 FE 
111f3     F3 EC E8 E7 | 	byte	$14, $15, $16, $18, $1a, $1c, $1d, $1d, $1b, $14, $09, $fe, $f3, $ec, $e8, $e7
111f7     E7 EA EE F2 
111fb     F7 FB FE 02 
111ff     06 09 0D 11 
11203     15 19 1E 22 | 	byte	$e7, $ea, $ee, $f2, $f7, $fb, $fe, $02, $06, $09, $0d, $11, $15, $19, $1e, $22
11207     26 2A 2C 2F 
1120b     31 31 32 30 
1120f     2E 2A 22 17 
11213     0C 01 F8 F2 | 	byte	$26, $2a, $2c, $2f, $31, $31, $32, $30, $2e, $2a, $22, $17, $0c, $01, $f8, $f2
11217     EC E6 E1 DD 
1121b     D9 D8 D8 DA 
1121f     DC E0 E5 EA 
11223     EF F5 FC 02 | 	byte	$ec, $e6, $e1, $dd, $d9, $d8, $d8, $da, $dc, $e0, $e5, $ea, $ef, $f5, $fc, $02
11227     08 0E 12 16 
1122b     1A 1D 1F 21 
1122f     23 25 26 28 
11233     2A 2C 2F 32 | 	byte	$08, $0e, $12, $16, $1a, $1d, $1f, $21, $23, $25, $26, $28, $2a, $2c, $2f, $32
11237     34 36 37 35 
1123b     30 29 1F 16 
1123f     0E 08 03 FD 
11243     F5 E9 D8 C9 | 	byte	$34, $36, $37, $35, $30, $29, $1f, $16, $0e, $08, $03, $fd, $f5, $e9, $d8, $c9
11247     B9 AE A5 A0 
1124b     9F A0 A3 A8 
1124f     AE B4 BB C2 
11253     CA D1 D9 E1 | 	byte	$b9, $ae, $a5, $a0, $9f, $a0, $a3, $a8, $ae, $b4, $bb, $c2, $ca, $d1, $d9, $e1
11257     E8 EE F4 F9 
1125b     FE 02 05 09 
1125f     0D 10 13 16 
11263     17 19 18 18 | 	byte	$e8, $ee, $f4, $f9, $fe, $02, $05, $09, $0d, $10, $13, $16, $17, $19, $18, $18
11267     18 18 18 19 
1126b     1A 19 15 0E 
1126f     03 F9 EF E8 
11273     E4 E3 E5 E8 | 	byte	$18, $18, $18, $19, $1a, $19, $15, $0e, $03, $f9, $ef, $e8, $e4, $e3, $e5, $e8
11277     EB F0 F4 F9 
1127b     FD 01 05 0A 
1127f     0D 12 15 19 
11283     1D 21 25 29 | 	byte	$eb, $f0, $f4, $f9, $fd, $01, $05, $0a, $0d, $12, $15, $19, $1d, $21, $25, $29
11287     2C 2E 30 31 
1128b     32 33 32 30 
1128f     2D 27 1F 14 
11293     0B 01 F9 F2 | 	byte	$2c, $2e, $30, $31, $32, $33, $32, $30, $2d, $27, $1f, $14, $0b, $01, $f9, $f2
11297     EA E3 DD D9 
1129b     D8 D8 DA DD 
1129f     E1 E5 EA EF 
112a3     F6 FC 02 08 | 	byte	$ea, $e3, $dd, $d9, $d8, $d8, $da, $dd, $e1, $e5, $ea, $ef, $f6, $fc, $02, $08
112a7     0D 11 14 18 
112ab     1A 1D 20 22 
112af     24 26 27 29 
112b3     2B 2E 30 31 | 	byte	$0d, $11, $14, $18, $1a, $1d, $20, $22, $24, $26, $27, $29, $2b, $2e, $30, $31
112b7     33 33 32 2C 
112bb     24 1C 15 0E 
112bf     07 01 F9 EE 
112c3     DF D0 C1 B4 | 	byte	$33, $33, $32, $2c, $24, $1c, $15, $0e, $07, $01, $f9, $ee, $df, $d0, $c1, $b4
112c7     AA A4 A1 A0 
112cb     A2 A6 AB B1 
112cf     B8 BE C5 CC 
112d3     D3 DB E3 E9 | 	byte	$aa, $a4, $a1, $a0, $a2, $a6, $ab, $b1, $b8, $be, $c5, $cc, $d3, $db, $e3, $e9
112d7     EF F5 F9 FD 
112db     02 06 0A 0E 
112df     11 14 17 1A 
112e3     1B 1C 1B 1B | 	byte	$ef, $f5, $f9, $fd, $02, $06, $0a, $0e, $11, $14, $17, $1a, $1b, $1c, $1b, $1b
112e7     1A 19 19 17 
112eb     12 0A 01 F6 
112ef     ED E6 E2 E1 
112f3     E2 E5 E9 ED | 	byte	$1a, $19, $19, $17, $12, $0a, $01, $f6, $ed, $e6, $e2, $e1, $e2, $e5, $e9, $ed
112f7     F2 F6 FB FF 
112fb     04 08 0D 11 
112ff     15 18 1C 20 
11303     23 27 2A 2D | 	byte	$f2, $f6, $fb, $ff, $04, $08, $0d, $11, $15, $18, $1c, $20, $23, $27, $2a, $2d
11307     2F 30 32 33 
1130b     33 33 32 30 
1130f     2C 26 1C 12 
11313     09 00 F7 EE | 	byte	$2f, $30, $32, $33, $33, $33, $32, $30, $2c, $26, $1c, $12, $09, $00, $f7, $ee
11317     E6 E0 DB D9 
1131b     DA DB DE E2 
1131f     E6 EA EF F4 
11323     FB 00 05 0A | 	byte	$e6, $e0, $db, $d9, $da, $db, $de, $e2, $e6, $ea, $ef, $f4, $fb, $00, $05, $0a
11327     0F 12 15 18 
1132b     1B 1E 20 22 
1132f     24 25 28 2A 
11333     2C 2E 30 31 | 	byte	$0f, $12, $15, $18, $1b, $1e, $20, $22, $24, $25, $28, $2a, $2c, $2e, $30, $31
11337     31 2E 29 22 
1133b     1B 14 0D 06 
1133f     FE F3 E7 D6 
11343     C8 B9 AE A6 | 	byte	$31, $2e, $29, $22, $1b, $14, $0d, $06, $fe, $f3, $e7, $d6, $c8, $b9, $ae, $a6
11347     A1 9F A0 A4 
1134b     A8 AE B4 BB 
1134f     C2 C8 D0 D7 
11353     DF E5 EB F1 | 	byte	$a1, $9f, $a0, $a4, $a8, $ae, $b4, $bb, $c2, $c8, $d0, $d7, $df, $e5, $eb, $f1
11357     F6 FB FF 03 
1135b     08 0C 10 13 
1135f     16 19 1D 1F 
11363     20 20 1F 1D | 	byte	$f6, $fb, $ff, $03, $08, $0c, $10, $13, $16, $19, $1d, $1f, $20, $20, $1f, $1d
11367     1B 17 11 08 
1136b     FC F3 EA E4 
1136f     E0 DF E0 E3 
11373     E6 EB F1 F5 | 	byte	$1b, $17, $11, $08, $fc, $f3, $ea, $e4, $e0, $df, $e0, $e3, $e6, $eb, $f1, $f5
11377     FA FF 04 09 
1137b     0D 12 16 19 
1137f     1C 20 24 27 
11383     2B 2E 30 32 | 	byte	$fa, $ff, $04, $09, $0d, $12, $16, $19, $1c, $20, $24, $27, $2b, $2e, $30, $32
11387     32 34 36 36 
1138b     37 35 33 2F 
1138f     29 21 18 0F 
11393     04 FA F0 E7 | 	byte	$32, $34, $36, $36, $37, $35, $33, $2f, $29, $21, $18, $0f, $04, $fa, $f0, $e7
11397     E0 DC DA DA 
1139b     DC DF E2 E5 
1139f     EA EF F5 FA 
113a3     00 05 08 0D | 	byte	$e0, $dc, $da, $da, $dc, $df, $e2, $e5, $ea, $ef, $f5, $fa, $00, $05, $08, $0d
113a7     10 14 17 1A 
113ab     1D 1F 21 23 
113af     24 27 29 2B 
113b3     2D 2E 2F 2E | 	byte	$10, $14, $17, $1a, $1d, $1f, $21, $23, $24, $27, $29, $2b, $2d, $2e, $2f, $2e
113b7     2A 25 1E 18 
113bb     10 09 00 F6 
113bf     E7 D9 C9 BA 
113c3     AF A6 A1 9F | 	byte	$2a, $25, $1e, $18, $10, $09, $00, $f6, $e7, $d9, $c9, $ba, $af, $a6, $a1, $9f
113c7     A0 A2 A7 AD 
113cb     B3 BA C0 C6 
113cf     CE D5 DD E3 
113d3     E9 EF F4 F9 | 	byte	$a0, $a2, $a7, $ad, $b3, $ba, $c0, $c6, $ce, $d5, $dd, $e3, $e9, $ef, $f4, $f9
113d7     FE 03 07 0B 
113db     0F 12 15 18 
113df     1B 1F 21 22 
113e3     22 21 1D 17 | 	byte	$fe, $03, $07, $0b, $0f, $12, $15, $18, $1b, $1f, $21, $22, $22, $21, $1d, $17
113e7     0E 02 F8 EE 
113eb     E5 E0 DC DC 
113ef     DE E0 E5 EA 
113f3     EF F5 FA FF | 	byte	$0e, $02, $f8, $ee, $e5, $e0, $dc, $dc, $de, $e0, $e5, $ea, $ef, $f5, $fa, $ff
113f7     04 0A 0F 13 
113fb     17 1A 1E 21 
113ff     24 27 2A 2D 
11403     2F 31 32 34 | 	byte	$04, $0a, $0f, $13, $17, $1a, $1e, $21, $24, $27, $2a, $2d, $2f, $31, $32, $34
11407     36 37 38 38 
1140b     36 34 30 2A 
1140f     23 1A 0F 04 
11413     F9 EF E6 E0 | 	byte	$36, $37, $38, $38, $36, $34, $30, $2a, $23, $1a, $0f, $04, $f9, $ef, $e6, $e0
11417     DD DC DC DE 
1141b     E1 E3 E7 EC 
1141f     F1 F7 FC 01 
11423     05 09 0D 10 | 	byte	$dd, $dc, $dc, $de, $e1, $e3, $e7, $ec, $f1, $f7, $fc, $01, $05, $09, $0d, $10
11427     14 17 1A 1C 
1142b     1E 20 22 24 
1142f     27 29 2A 2C 
11433     2C 2D 2B 26 | 	byte	$14, $17, $1a, $1c, $1e, $20, $22, $24, $27, $29, $2a, $2c, $2c, $2d, $2b, $26
11437     20 19 11 0A 
1143b     00 F5 E8 D7 
1143f     C8 BA AD A6 
11443     A0 9E 9F A3 | 	byte	$20, $19, $11, $0a, $00, $f5, $e8, $d7, $c8, $ba, $ad, $a6, $a0, $9e, $9f, $a3
11447     A7 AE B3 BA 
1144b     C1 C7 CE D6 
1144f     DC E3 E9 EF 
11453     F4 F9 FE 03 | 	byte	$a7, $ae, $b3, $ba, $c1, $c7, $ce, $d6, $dc, $e3, $e9, $ef, $f4, $f9, $fe, $03
11457     08 0C 0F 13 
1145b     15 18 1B 1E 
1145f     21 23 24 24 
11463     1F 16 0B FF | 	byte	$08, $0c, $0f, $13, $15, $18, $1b, $1e, $21, $23, $24, $24, $1f, $16, $0b, $ff
11467     F3 E9 E2 DD 
1146b     DB DB DD E1 
1146f     E6 EB F0 F5 
11473     FB 00 06 0B | 	byte	$f3, $e9, $e2, $dd, $db, $db, $dd, $e1, $e6, $eb, $f0, $f5, $fb, $00, $06, $0b
11477     10 14 17 1B 
1147b     1E 20 24 27 
1147f     29 2C 2E 30 
11483     32 34 36 37 | 	byte	$10, $14, $17, $1b, $1e, $20, $24, $27, $29, $2c, $2e, $30, $32, $34, $36, $37
11487     38 38 37 36 
1148b     33 2F 2A 22 
1148f     19 0D 01 F6 
11493     ED E5 E1 DE | 	byte	$38, $38, $37, $36, $33, $2f, $2a, $22, $19, $0d, $01, $f6, $ed, $e5, $e1, $de
11497     DD DE E0 E2 
1149b     E5 E9 EF F3 
1149f     F8 FD 01 06 
114a3     0A 0E 12 15 | 	byte	$dd, $de, $e0, $e2, $e5, $e9, $ef, $f3, $f8, $fd, $01, $06, $0a, $0e, $12, $15
114a7     17 19 1B 1D 
114ab     1F 21 23 25 
114af     27 29 2A 2A 
114b3     29 26 20 1A | 	byte	$17, $19, $1b, $1d, $1f, $21, $23, $25, $27, $29, $2a, $2a, $29, $26, $20, $1a
114b7     11 09 FF F2 
114bb     E3 D3 C5 B6 
114bf     AB A4 A0 9F 
114c3     A0 A4 A9 AE | 	byte	$11, $09, $ff, $f2, $e3, $d3, $c5, $b6, $ab, $a4, $a0, $9f, $a0, $a4, $a9, $ae
114c7     B4 BA C1 C7 
114cb     CF D5 DC E3 
114cf     E8 EE F3 F9 
114d3     FE 03 07 0C | 	byte	$b4, $ba, $c1, $c7, $cf, $d5, $dc, $e3, $e8, $ee, $f3, $f9, $fe, $03, $07, $0c
114d7     0F 12 15 18 
114db     1B 1E 21 23 
114df     24 21 1B 10 
114e3     05 F9 EE E6 | 	byte	$0f, $12, $15, $18, $1b, $1e, $21, $23, $24, $21, $1b, $10, $05, $f9, $ee, $e6
114e7     E0 DC DB DC 
114eb     DE E2 E7 EC 
114ef     F2 F7 FD 03 
114f3     08 0D 12 15 | 	byte	$e0, $dc, $db, $dc, $de, $e2, $e7, $ec, $f2, $f7, $fd, $03, $08, $0d, $12, $15
114f7     19 1C 1F 22 
114fb     25 28 2A 2D 
114ff     2F 31 33 35 
11503     36 38 39 39 | 	byte	$19, $1c, $1f, $22, $25, $28, $2a, $2d, $2f, $31, $33, $35, $36, $38, $39, $39
11507     38 37 35 33 
1150b     2E 28 20 15 
1150f     09 FE F4 EB 
11513     E5 E1 DF DF | 	byte	$38, $37, $35, $33, $2e, $28, $20, $15, $09, $fe, $f4, $eb, $e5, $e1, $df, $df
11517     DF E1 E4 E8 
1151b     ED F2 F6 FB 
1151f     FF 04 08 0C 
11523     10 13 15 17 | 	byte	$df, $e1, $e4, $e8, $ed, $f2, $f6, $fb, $ff, $04, $08, $0c, $10, $13, $15, $17
11527     19 1B 1D 20 
1152b     22 24 26 27 
1152f     29 2A 29 25 
11533     20 19 10 07 | 	byte	$19, $1b, $1d, $20, $22, $24, $26, $27, $29, $2a, $29, $25, $20, $19, $10, $07
11537     FC EF E0 CF 
1153b     C0 B4 A9 A4 
1153f     A0 A0 A2 A6 
11543     AB B1 B7 BD | 	byte	$fc, $ef, $e0, $cf, $c0, $b4, $a9, $a4, $a0, $a0, $a2, $a6, $ab, $b1, $b7, $bd
11547     C3 C9 D0 D7 
1154b     DE E4 EA F0 
1154f     F5 FB 00 04 
11553     08 0C 0F 11 | 	byte	$c3, $c9, $d0, $d7, $de, $e4, $ea, $f0, $f5, $fb, $00, $04, $08, $0c, $0f, $11
11557     14 17 1A 1D 
1155b     1F 21 1F 1A 
1155f     13 09 FE F3 
11563     EA E3 DE DB | 	byte	$14, $17, $1a, $1d, $1f, $21, $1f, $1a, $13, $09, $fe, $f3, $ea, $e3, $de, $db
11567     DB DD E0 E5 
1156b     E9 EF F4 FA 
1156f     00 05 0B 10 
11573     14 17 1A 1E | 	byte	$db, $dd, $e0, $e5, $e9, $ef, $f4, $fa, $00, $05, $0b, $10, $14, $17, $1a, $1e
11577     20 23 26 29 
1157b     2B 2D 30 32 
1157f     34 36 38 39 
11583     39 3A 39 38 | 	byte	$20, $23, $26, $29, $2b, $2d, $30, $32, $34, $36, $38, $39, $39, $3a, $39, $38
11587     36 34 32 2D 
1158b     25 1C 11 06 
1158f     FA F1 EA E4 
11593     E1 E0 E0 E1 | 	byte	$36, $34, $32, $2d, $25, $1c, $11, $06, $fa, $f1, $ea, $e4, $e1, $e0, $e0, $e1
11597     E4 E7 EB F0 
1159b     F4 F9 FE 02 
1159f     06 0A 0E 10 
115a3     13 15 17 19 | 	byte	$e4, $e7, $eb, $f0, $f4, $f9, $fe, $02, $06, $0a, $0e, $10, $13, $15, $17, $19
115a7     1B 1D 20 21 
115ab     23 26 27 28 
115af     27 24 1D 16 
115b3     0D 04 F8 EA | 	byte	$1b, $1d, $20, $21, $23, $26, $27, $28, $27, $24, $1d, $16, $0d, $04, $f8, $ea
115b7     DB CB BD B1 
115bb     A8 A3 A0 A1 
115bf     A3 A7 AB B1 
115c3     B7 BD C3 CA | 	byte	$db, $cb, $bd, $b1, $a8, $a3, $a0, $a1, $a3, $a7, $ab, $b1, $b7, $bd, $c3, $ca
115c7     D1 D7 DE E4 
115cb     EA F0 F7 FC 
115cf     01 05 08 0C 
115d3     0F 11 14 17 | 	byte	$d1, $d7, $de, $e4, $ea, $f0, $f7, $fc, $01, $05, $08, $0c, $0f, $11, $14, $17
115d7     1A 1C 1E 1D 
115db     19 12 0A 01 
115df     F8 F0 E8 E3 
115e3     DF DD DD DF | 	byte	$1a, $1c, $1e, $1d, $19, $12, $0a, $01, $f8, $f0, $e8, $e3, $df, $dd, $dd, $df
115e7     E2 E6 EB F0 
115eb     F7 FD 02 08 
115ef     0D 12 15 19 
115f3     1C 1E 21 24 | 	byte	$e2, $e6, $eb, $f0, $f7, $fd, $02, $08, $0d, $12, $15, $19, $1c, $1e, $21, $24
115f7     27 29 2B 2E 
115fb     30 33 35 37 
115ff     38 39 3A 3A 
11603     39 39 37 35 | 	byte	$27, $29, $2b, $2e, $30, $33, $35, $37, $38, $39, $3a, $3a, $39, $39, $37, $35
11607     34 31 2C 25 
1160b     1A 0F 03 F9 
1160f     EF E9 E4 E1 
11613     E0 E1 E3 E6 | 	byte	$34, $31, $2c, $25, $1a, $0f, $03, $f9, $ef, $e9, $e4, $e1, $e0, $e1, $e3, $e6
11617     EA EE F2 F7 
1161b     FC 01 05 08 
1161f     0C 0F 12 14 
11623     16 18 1A 1C | 	byte	$ea, $ee, $f2, $f7, $fc, $01, $05, $08, $0c, $0f, $12, $14, $16, $18, $1a, $1c
11627     1E 20 22 25 
1162b     27 28 27 24 
1162f     1E 15 0C 02 
11633     F6 E9 D9 CB | 	byte	$1e, $20, $22, $25, $27, $28, $27, $24, $1e, $15, $0c, $02, $f6, $e9, $d9, $cb
11637     BC B1 A8 A3 
1163b     A2 A2 A4 A7 
1163f     AC B1 B6 BC 
11643     C2 C9 CF D6 | 	byte	$bc, $b1, $a8, $a3, $a2, $a2, $a4, $a7, $ac, $b1, $b6, $bc, $c2, $c9, $cf, $d6
11647     DC E2 E9 EF 
1164b     F6 FC 00 04 
1164f     08 0B 0E 10 
11653     13 15 18 1A | 	byte	$dc, $e2, $e9, $ef, $f6, $fc, $00, $04, $08, $0b, $0e, $10, $13, $15, $18, $1a
11657     1A 18 12 0B 
1165b     04 FC F5 EE 
1165f     E9 E5 E2 E0 
11663     E0 E1 E4 E8 | 	byte	$1a, $18, $12, $0b, $04, $fc, $f5, $ee, $e9, $e5, $e2, $e0, $e0, $e1, $e4, $e8
11667     EC F1 F7 FC 
1166b     03 08 0D 12 
1166f     16 19 1C 1E 
11673     21 23 26 28 | 	byte	$ec, $f1, $f7, $fc, $03, $08, $0d, $12, $16, $19, $1c, $1e, $21, $23, $26, $28
11677     2B 2D 2F 32 
1167b     35 36 38 39 
1167f     3A 39 39 39 
11683     37 36 34 33 | 	byte	$2b, $2d, $2f, $32, $35, $36, $38, $39, $3a, $39, $39, $39, $37, $36, $34, $33
11687     31 2D 26 1C 
1168b     11 06 FC F3 
1168f     EC E7 E4 E3 
11693     E3 E4 E7 EA | 	byte	$31, $2d, $26, $1c, $11, $06, $fc, $f3, $ec, $e7, $e4, $e3, $e3, $e4, $e7, $ea
11697     ED F2 F7 FB 
1169b     00 03 07 0A 
1169f     0C 0F 11 13 
116a3     15 17 19 1C | 	byte	$ed, $f2, $f7, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $15, $17, $19, $1c
116a7     1D 20 22 24 
116ab     25 23 1E 17 
116af     0F 05 FB EF 
116b3     E2 D4 C6 BB | 	byte	$1d, $20, $22, $24, $25, $23, $1e, $17, $0f, $05, $fb, $ef, $e2, $d4, $c6, $bb
116b7     B2 AB A7 A6 
116bb     A6 A7 AB AF 
116bf     B4 B8 BD C4 
116c3     C9 D0 D6 DC | 	byte	$b2, $ab, $a7, $a6, $a6, $a7, $ab, $af, $b4, $b8, $bd, $c4, $c9, $d0, $d6, $dc
116c7     E3 E9 F0 F5 
116cb     FA 00 03 07 
116cf     0A 0D 0F 12 
116d3     15 16 16 14 | 	byte	$e3, $e9, $f0, $f5, $fa, $00, $03, $07, $0a, $0d, $0f, $12, $15, $16, $16, $14
116d7     0F 08 02 FC 
116db     F6 F2 EE EB 
116df     E8 E6 E5 E5 
116e3     E6 E9 EC F0 | 	byte	$0f, $08, $02, $fc, $f6, $f2, $ee, $eb, $e8, $e6, $e5, $e5, $e6, $e9, $ec, $f0
116e7     F5 FA 00 05 
116eb     0A 0F 12 16 
116ef     19 1C 1E 21 
116f3     23 26 29 2C | 	byte	$f5, $fa, $00, $05, $0a, $0f, $12, $16, $19, $1c, $1e, $21, $23, $26, $29, $2c
116f7     2E 31 33 35 
116fb     37 38 39 3A 
116ff     3A 3A 3A 38 
11703     38 36 35 33 | 	byte	$2e, $31, $33, $35, $37, $38, $39, $3a, $3a, $3a, $3a, $38, $38, $36, $35, $33
11707     30 2A 22 18 
1170b     0E 03 FB F2 
1170f     ED E8 E6 E5 
11713     E5 E7 EA ED | 	byte	$30, $2a, $22, $18, $0e, $03, $fb, $f2, $ed, $e8, $e6, $e5, $e5, $e7, $ea, $ed
11717     F1 F5 F9 FD 
1171b     00 04 07 0A 
1171f     0C 0D 10 12 
11723     15 17 19 1C | 	byte	$f1, $f5, $f9, $fd, $00, $04, $07, $0a, $0c, $0d, $10, $12, $15, $17, $19, $1c
11727     1E 21 23 22 
1172b     20 1A 14 0C 
1172f     03 F8 EC DF 
11733     D2 C5 BA B2 | 	byte	$1e, $21, $23, $22, $20, $1a, $14, $0c, $03, $f8, $ec, $df, $d2, $c5, $ba, $b2
11737     AD A9 A8 A8 
1173b     A9 AC B0 B4 
1173f     B9 BE C4 CA 
11743     D0 D8 DE E5 | 	byte	$ad, $a9, $a8, $a8, $a9, $ac, $b0, $b4, $b9, $be, $c4, $ca, $d0, $d8, $de, $e5
11747     EB F1 F6 FB 
1174b     00 03 07 0A 
1174f     0C 0F 11 13 
11753     13 10 0C 06 | 	byte	$eb, $f1, $f6, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $13, $10, $0c, $06
11757     00 FA F5 F1 
1175b     EF ED EC EA 
1175f     E9 E9 EA EC 
11763     EE F1 F6 FA | 	byte	$00, $fa, $f5, $f1, $ef, $ed, $ec, $ea, $e9, $e9, $ea, $ec, $ee, $f1, $f6, $fa
11767     FF 04 08 0C 
1176b     10 14 17 1A 
1176f     1C 1F 21 24 
11773     27 2A 2C 2F | 	byte	$ff, $04, $08, $0c, $10, $14, $17, $1a, $1c, $1f, $21, $24, $27, $2a, $2c, $2f
11777     32 33 35 37 
1177b     38 39 39 39 
1177f     39 38 37 37 
11783     36 36 34 32 | 	byte	$32, $33, $35, $37, $38, $39, $39, $39, $39, $38, $37, $37, $36, $36, $34, $32
11787     2D 26 1D 13 
1178b     08 FF F6 EF 
1178f     EA E7 E6 E6 
11793     E8 EA ED F1 | 	byte	$2d, $26, $1d, $13, $08, $ff, $f6, $ef, $ea, $e7, $e6, $e6, $e8, $ea, $ed, $f1
11797     F4 F8 FC FF 
1179b     02 05 07 09 
1179f     0B 0E 10 13 
117a3     15 18 1B 1D | 	byte	$f4, $f8, $fc, $ff, $02, $05, $07, $09, $0b, $0e, $10, $13, $15, $18, $1b, $1d
117a7     1F 20 1F 1C 
117ab     17 0F 08 FF 
117af     F4 E8 DB CF 
117b3     C2 B8 B1 AC | 	byte	$1f, $20, $1f, $1c, $17, $0f, $08, $ff, $f4, $e8, $db, $cf, $c2, $b8, $b1, $ac
117b7     A9 A7 A8 AA 
117bb     AD B0 B5 BA 
117bf     BF C5 CB D2 
117c3     D9 DF E6 EC | 	byte	$a9, $a7, $a8, $aa, $ad, $b0, $b5, $ba, $bf, $c5, $cb, $d2, $d9, $df, $e6, $ec
117c7     F1 F7 FB 00 
117cb     04 06 0A 0C 
117cf     0E 10 10 0E 
117d3     0A 05 FF F9 | 	byte	$f1, $f7, $fb, $00, $04, $06, $0a, $0c, $0e, $10, $10, $0e, $0a, $05, $ff, $f9
117d7     F4 F0 EE ED 
117db     EC EC ED ED 
117df     EE EF F2 F5 
117e3     F8 FC 00 04 | 	byte	$f4, $f0, $ee, $ed, $ec, $ec, $ed, $ed, $ee, $ef, $f2, $f5, $f8, $fc, $00, $04
117e7     08 0C 0F 13 
117eb     16 19 1B 1E 
117ef     1F 22 25 27 
117f3     2A 2D 2F 31 | 	byte	$08, $0c, $0f, $13, $16, $19, $1b, $1e, $1f, $22, $25, $27, $2a, $2d, $2f, $31
117f7     34 35 36 37 
117fb     38 38 38 37 
117ff     38 37 37 37 
11803     36 35 33 2F | 	byte	$34, $35, $36, $37, $38, $38, $38, $37, $38, $37, $37, $37, $36, $35, $33, $2f
11807     2A 21 18 0E 
1180b     05 FB F4 EE 
1180f     E9 E8 E7 E9 
11813     EB ED F0 F3 | 	byte	$2a, $21, $18, $0e, $05, $fb, $f4, $ee, $e9, $e8, $e7, $e9, $eb, $ed, $f0, $f3
11817     F7 F9 FD 00 
1181b     02 04 07 08 
1181f     0B 0D 10 14 
11823     17 1A 1C 1D | 	byte	$f7, $f9, $fd, $00, $02, $04, $07, $08, $0b, $0d, $10, $14, $17, $1a, $1c, $1d
11827     1E 1D 1A 15 
1182b     0E 06 FD F2 
1182f     E7 DA CE C2 
11833     BA B3 AD AA | 	byte	$1e, $1d, $1a, $15, $0e, $06, $fd, $f2, $e7, $da, $ce, $c2, $ba, $b3, $ad, $aa
11837     A8 A9 AA AD 
1183b     B1 B5 B9 BE 
1183f     C5 CA D2 D9 
11843     DF E6 EC F1 | 	byte	$a8, $a9, $aa, $ad, $b1, $b5, $b9, $be, $c5, $ca, $d2, $d9, $df, $e6, $ec, $f1
11847     F7 FB FF 03 
1184b     06 09 0B 0D 
1184f     0D 0C 08 04 
11853     FF F9 F4 F0 | 	byte	$f7, $fb, $ff, $03, $06, $09, $0b, $0d, $0d, $0c, $08, $04, $ff, $f9, $f4, $f0
11857     EE EC EC EC 
1185b     ED EE F0 F1 
1185f     F3 F6 F9 FC 
11863     FF 02 06 09 | 	byte	$ee, $ec, $ec, $ec, $ed, $ee, $f0, $f1, $f3, $f6, $f9, $fc, $ff, $02, $06, $09
11867     0D 10 13 16 
1186b     18 1B 1D 1F 
1186f     21 24 27 2A 
11873     2D 2F 32 33 | 	byte	$0d, $10, $13, $16, $18, $1b, $1d, $1f, $21, $24, $27, $2a, $2d, $2f, $32, $33
11877     34 35 37 37 
1187b     37 37 37 37 
1187f     37 37 37 36 
11883     35 33 31 2C | 	byte	$34, $35, $37, $37, $37, $37, $37, $37, $37, $37, $37, $36, $35, $33, $31, $2c
11887     26 1F 15 0D 
1188b     03 FB F4 EF 
1188f     EB EA E9 EA 
11893     EC EF F1 F4 | 	byte	$26, $1f, $15, $0d, $03, $fb, $f4, $ef, $eb, $ea, $e9, $ea, $ec, $ef, $f1, $f4
11897     F6 F9 FC FF 
1189b     01 03 05 08 
1189f     0B 0D 11 14 
118a3     17 19 1B 1B | 	byte	$f6, $f9, $fc, $ff, $01, $03, $05, $08, $0b, $0d, $11, $14, $17, $19, $1b, $1b
118a7     1A 17 13 0D 
118ab     07 FE F6 EA 
118af     DE D2 C7 BD 
118b3     B6 B0 AC AA | 	byte	$1a, $17, $13, $0d, $07, $fe, $f6, $ea, $de, $d2, $c7, $bd, $b6, $b0, $ac, $aa
118b7     AA AB AD B1 
118bb     B4 B9 BE C3 
118bf     C9 D0 D7 DE 
118c3     E4 EA EF F4 | 	byte	$aa, $ab, $ad, $b1, $b4, $b9, $be, $c3, $c9, $d0, $d7, $de, $e4, $ea, $ef, $f4
118c7     F9 FD 01 04 
118cb     07 09 0A 0A 
118cf     08 04 FF FA 
118d3     F5 F1 EE EC | 	byte	$f9, $fd, $01, $04, $07, $09, $0a, $0a, $08, $04, $ff, $fa, $f5, $f1, $ee, $ec
118d7     EA EB EB EC 
118db     EE F0 F3 F6 
118df     F9 FC FF 02 
118e3     05 08 0B 0E | 	byte	$ea, $eb, $eb, $ec, $ee, $f0, $f3, $f6, $f9, $fc, $ff, $02, $05, $08, $0b, $0e
118e7     11 13 16 19 
118eb     1A 1D 1F 21 
118ef     24 27 29 2C 
118f3     2F 31 32 34 | 	byte	$11, $13, $16, $19, $1a, $1d, $1f, $21, $24, $27, $29, $2c, $2f, $31, $32, $34
118f7     35 35 36 36 
118fb     36 36 36 37 
118ff     37 37 37 37 
11903     36 33 2F 2C | 	byte	$35, $35, $36, $36, $36, $36, $36, $37, $37, $37, $37, $37, $36, $33, $2f, $2c
11907     25 1D 15 0C 
1190b     03 FC F5 F1 
1190f     EE EC EC ED 
11913     EE F0 F2 F4 | 	byte	$25, $1d, $15, $0c, $03, $fc, $f5, $f1, $ee, $ec, $ec, $ed, $ee, $f0, $f2, $f4
11917     F7 F9 FC FE 
1191b     00 02 05 08 
1191f     0B 0E 12 14 
11923     16 18 19 18 | 	byte	$f7, $f9, $fc, $fe, $00, $02, $05, $08, $0b, $0e, $12, $14, $16, $18, $19, $18
11927     16 12 0D 07 
1192b     00 F8 EC E0 
1192f     D5 C9 C0 B8 
11933     B2 AE AB AA | 	byte	$16, $12, $0d, $07, $00, $f8, $ec, $e0, $d5, $c9, $c0, $b8, $b2, $ae, $ab, $aa
11937     AB AD AF B3 
1193b     B7 BC C2 C8 
1193f     CF D5 DC E2 
11943     E8 EE F3 F7 | 	byte	$ab, $ad, $af, $b3, $b7, $bc, $c2, $c8, $cf, $d5, $dc, $e2, $e8, $ee, $f3, $f7
11947     FB FF 03 05 
1194b     07 07 06 03 
1194f     FF FB F5 F2 
11953     EE EC EA EA | 	byte	$fb, $ff, $03, $05, $07, $07, $06, $03, $ff, $fb, $f5, $f2, $ee, $ec, $ea, $ea
11957     EA EB ED EF 
1195b     F2 F5 F9 FD 
1195f     01 04 08 0A 
11963     0D 0F 10 13 | 	byte	$ea, $eb, $ed, $ef, $f2, $f5, $f9, $fd, $01, $04, $08, $0a, $0d, $0f, $10, $13
11967     15 17 19 1B 
1196b     1D 1F 21 24 
1196f     27 29 2B 2E 
11973     30 31 33 34 | 	byte	$15, $17, $19, $1b, $1d, $1f, $21, $24, $27, $29, $2b, $2e, $30, $31, $33, $34
11977     34 35 35 35 
1197b     36 36 37 38 
1197f     38 38 38 37 
11983     35 32 2E 29 | 	byte	$34, $35, $35, $35, $36, $36, $37, $38, $38, $38, $38, $37, $35, $32, $2e, $29
11987     22 1A 12 0A 
1198b     01 FB F6 F2 
1198f     EF EE EE EE 
11993     EF F1 F3 F5 | 	byte	$22, $1a, $12, $0a, $01, $fb, $f6, $f2, $ef, $ee, $ee, $ee, $ef, $f1, $f3, $f5
11997     F7 F9 FB FE 
1199b     01 03 06 0A 
1199f     0D 11 14 16 
119a3     17 17 16 14 | 	byte	$f7, $f9, $fb, $fe, $01, $03, $06, $0a, $0d, $11, $14, $16, $17, $17, $16, $14
119a7     11 0C 07 FF 
119ab     F7 EC E0 D4 
119af     C9 BF B7 B0 
119b3     AC AA A9 AA | 	byte	$11, $0c, $07, $ff, $f7, $ec, $e0, $d4, $c9, $bf, $b7, $b0, $ac, $aa, $a9, $aa
119b7     AB AE B2 B6 
119bb     BB C1 C8 CF 
119bf     D5 DC E2 E8 
119c3     ED F2 F6 FB | 	byte	$ab, $ae, $b2, $b6, $bb, $c1, $c8, $cf, $d5, $dc, $e2, $e8, $ed, $f2, $f6, $fb
119c7     FE 02 04 05 
119cb     04 02 FE F9 
119cf     F5 F0 ED EB 
119d3     EA E9 E9 EA | 	byte	$fe, $02, $04, $05, $04, $02, $fe, $f9, $f5, $f0, $ed, $eb, $ea, $e9, $e9, $ea
119d7     EB EE F0 F4 
119db     F7 FC 00 05 
119df     09 0D 0F 11 
119e3     14 15 16 17 | 	byte	$eb, $ee, $f0, $f4, $f7, $fc, $00, $05, $09, $0d, $0f, $11, $14, $15, $16, $17
119e7     19 1A 1C 1E 
119eb     20 22 25 28 
119ef     2A 2C 2E 30 
119f3     31 33 33 34 | 	byte	$19, $1a, $1c, $1e, $20, $22, $25, $28, $2a, $2c, $2e, $30, $31, $33, $33, $34
119f7     34 34 35 35 
119fb     36 37 38 39 
119ff     39 39 38 35 
11a03     33 2E 2A 24 | 	byte	$34, $34, $35, $35, $36, $37, $38, $39, $39, $39, $38, $35, $33, $2e, $2a, $24
11a07     1D 15 0D 05 
11a0b     FF F9 F5 F1 
11a0f     F0 EF EF EF 
11a13     F0 F1 F3 F5 | 	byte	$1d, $15, $0d, $05, $ff, $f9, $f5, $f1, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
11a17     F7 F9 FB FF 
11a1b     02 05 09 0C 
11a1f     0F 12 13 14 
11a23     14 14 11 0E | 	byte	$f7, $f9, $fb, $ff, $02, $05, $09, $0c, $0f, $12, $13, $14, $14, $14, $11, $0e
11a27     09 04 FC F2 
11a2b     E8 DC D0 C6 
11a2f     BC B5 AF AB 
11a33     AA A9 AA AC | 	byte	$09, $04, $fc, $f2, $e8, $dc, $d0, $c6, $bc, $b5, $af, $ab, $aa, $a9, $aa, $ac
11a37     AF B3 B7 BD 
11a3b     C3 CA D0 D6 
11a3f     DE E3 E8 ED 
11a43     F2 F6 FA FE | 	byte	$af, $b3, $b7, $bd, $c3, $ca, $d0, $d6, $de, $e3, $e8, $ed, $f2, $f6, $fa, $fe
11a47     00 02 01 FE 
11a4b     FB F7 F2 EF 
11a4f     EC E9 E8 E7 
11a53     E8 E9 EB ED | 	byte	$00, $02, $01, $fe, $fb, $f7, $f2, $ef, $ec, $e9, $e8, $e7, $e8, $e9, $eb, $ed
11a57     EF F3 F6 FB 
11a5b     00 04 0A 0D 
11a5f     11 13 15 17 
11a63     18 19 1A 1B | 	byte	$ef, $f3, $f6, $fb, $00, $04, $0a, $0d, $11, $13, $15, $17, $18, $19, $1a, $1b
11a67     1C 1E 20 22 
11a6b     24 27 28 2B 
11a6f     2C 2E 30 31 
11a73     32 33 33 33 | 	byte	$1c, $1e, $20, $22, $24, $27, $28, $2b, $2c, $2e, $30, $31, $32, $33, $33, $33
11a77     34 35 35 37 
11a7b     38 39 39 3A 
11a7f     39 38 36 32 
11a83     2F 29 25 1E | 	byte	$34, $35, $35, $37, $38, $39, $39, $3a, $39, $38, $36, $32, $2f, $29, $25, $1e
11a87     17 11 09 04 
11a8b     FF FA F6 F3 
11a8f     F2 F0 F0 F0 
11a93     F1 F2 F3 F5 | 	byte	$17, $11, $09, $04, $ff, $fa, $f6, $f3, $f2, $f0, $f0, $f0, $f1, $f2, $f3, $f5
11a97     F7 F9 FD 00 
11a9b     03 07 09 0C 
11a9f     0E 10 10 10 
11aa3     0F 0C 09 06 | 	byte	$f7, $f9, $fd, $00, $03, $07, $09, $0c, $0e, $10, $10, $10, $0f, $0c, $09, $06
11aa7     00 F9 F1 E6 
11aab     DC D0 C7 BE 
11aaf     B7 B1 AE AC 
11ab3     AB AC AD B0 | 	byte	$00, $f9, $f1, $e6, $dc, $d0, $c7, $be, $b7, $b1, $ae, $ac, $ab, $ac, $ad, $b0
11ab7     B4 B9 BE C4 
11abb     CA D1 D7 DC 
11abf     E2 E7 ED F1 
11ac3     F5 F9 FC FD | 	byte	$b4, $b9, $be, $c4, $ca, $d1, $d7, $dc, $e2, $e7, $ed, $f1, $f5, $f9, $fc, $fd
11ac7     FD FB F8 F5 
11acb     F2 EE EC E9 
11acf     E8 E7 E7 E8 
11ad3     EA EC EE F1 | 	byte	$fd, $fb, $f8, $f5, $f2, $ee, $ec, $e9, $e8, $e7, $e7, $e8, $ea, $ec, $ee, $f1
11ad7     F5 F9 FE 02 
11adb     07 0C 10 14 
11adf     17 19 1A 1B 
11ae3     1C 1D 1E 1E | 	byte	$f5, $f9, $fe, $02, $07, $0c, $10, $14, $17, $19, $1a, $1b, $1c, $1d, $1e, $1e
11ae7     20 22 23 25 
11aeb     28 29 2B 2D 
11aef     2E 2F 30 31 
11af3     32 32 32 33 | 	byte	$20, $22, $23, $25, $28, $29, $2b, $2d, $2e, $2f, $30, $31, $32, $32, $32, $33
11af7     34 35 37 38 
11afb     38 39 39 39 
11aff     37 35 32 2E 
11b03     29 25 1F 19 | 	byte	$34, $35, $37, $38, $38, $39, $39, $39, $37, $35, $32, $2e, $29, $25, $1f, $19
11b07     13 0D 07 02 
11b0b     FD F9 F6 F3 
11b0f     F1 F1 F0 F1 
11b13     F1 F2 F4 F7 | 	byte	$13, $0d, $07, $02, $fd, $f9, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f7
11b17     F9 FC FF 03 
11b1b     06 08 0B 0D 
11b1f     0D 0D 0D 0B 
11b23     09 07 02 FD | 	byte	$f9, $fc, $ff, $03, $06, $08, $0b, $0d, $0d, $0d, $0d, $0b, $09, $07, $02, $fd
11b27     F4 EA E1 D5 
11b2b     CC C2 BA B4 
11b2f     AF AC AB AB 
11b33     AD AF B2 B7 | 	byte	$f4, $ea, $e1, $d5, $cc, $c2, $ba, $b4, $af, $ac, $ab, $ab, $ad, $af, $b2, $b7
11b37     BC C2 C7 CE 
11b3b     D4 DA DF E4 
11b3f     E9 EE F2 F6 
11b43     F9 FA F9 F7 | 	byte	$bc, $c2, $c7, $ce, $d4, $da, $df, $e4, $e9, $ee, $f2, $f6, $f9, $fa, $f9, $f7
11b47     F5 F2 EF EC 
11b4b     EA E8 E7 E7 
11b4f     E7 E8 EA EC 
11b53     EF F2 F5 FA | 	byte	$f5, $f2, $ef, $ec, $ea, $e8, $e7, $e7, $e7, $e8, $ea, $ec, $ef, $f2, $f5, $fa
11b57     FF 04 09 0D 
11b5b     11 15 18 1C 
11b5f     1E 20 21 21 
11b63     22 22 23 24 | 	byte	$ff, $04, $09, $0d, $11, $15, $18, $1c, $1e, $20, $21, $21, $22, $22, $23, $24
11b67     26 28 29 2B 
11b6b     2C 2D 2E 2F 
11b6f     30 30 30 31 
11b73     31 32 33 34 | 	byte	$26, $28, $29, $2b, $2c, $2d, $2e, $2f, $30, $30, $30, $31, $31, $32, $33, $34
11b77     35 37 38 39 
11b7b     38 39 38 36 
11b7f     33 30 2C 27 
11b83     22 1D 18 13 | 	byte	$35, $37, $38, $39, $38, $39, $38, $36, $33, $30, $2c, $27, $22, $1d, $18, $13
11b87     0D 07 03 FE 
11b8b     FA F6 F3 F2 
11b8f     F1 F0 F0 F1 
11b93     F3 F5 F7 FA | 	byte	$0d, $07, $03, $fe, $fa, $f6, $f3, $f2, $f1, $f0, $f0, $f1, $f3, $f5, $f7, $fa
11b97     FD 00 03 06 
11b9b     08 0A 0B 0B 
11b9f     0A 09 08 06 
11ba3     02 FC F4 EA | 	byte	$fd, $00, $03, $06, $08, $0a, $0b, $0b, $0a, $09, $08, $06, $02, $fc, $f4, $ea
11ba7     E0 D6 CB C3 
11bab     BA B3 AF AC 
11baf     AA AA AB AE 
11bb3     B2 B6 BB C1 | 	byte	$e0, $d6, $cb, $c3, $ba, $b3, $af, $ac, $aa, $aa, $ab, $ae, $b2, $b6, $bb, $c1
11bb7     C7 CD D3 D8 
11bbb     DE E3 E8 EC 
11bbf     F1 F4 F6 F6 
11bc3     F4 F2 EF ED | 	byte	$c7, $cd, $d3, $d8, $de, $e3, $e8, $ec, $f1, $f4, $f6, $f6, $f4, $f2, $ef, $ed
11bc7     EA E8 E6 E6 
11bcb     E5 E5 E6 E8 
11bcf     EA ED F0 F4 
11bd3     F7 FC 01 06 | 	byte	$ea, $e8, $e6, $e6, $e5, $e5, $e6, $e8, $ea, $ed, $f0, $f4, $f7, $fc, $01, $06
11bd7     0B 0F 13 17 
11bdb     1B 1E 20 22 
11bdf     23 24 24 25 
11be3     26 27 28 29 | 	byte	$0b, $0f, $13, $17, $1b, $1e, $20, $22, $23, $24, $24, $25, $26, $27, $28, $29
11be7     2A 2B 2C 2D 
11beb     2E 2E 2F 2F 
11bef     30 30 31 32 
11bf3     33 34 35 36 | 	byte	$2a, $2b, $2c, $2d, $2e, $2e, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $36
11bf7     37 38 39 38 
11bfb     38 36 34 31 
11bff     2C 28 24 1F 
11c03     1B 16 10 0B | 	byte	$37, $38, $39, $38, $38, $36, $34, $31, $2c, $28, $24, $1f, $1b, $16, $10, $0b
11c07     06 01 FC F9 
11c0b     F5 F3 F1 F0 
11c0f     F0 F1 F2 F4 
11c13     F6 F8 FC FF | 	byte	$06, $01, $fc, $f9, $f5, $f3, $f1, $f0, $f0, $f1, $f2, $f4, $f6, $f8, $fc, $ff
11c17     02 04 06 08 
11c1b     09 08 08 07 
11c1f     05 03 00 F9 
11c23     F2 E9 DE D4 | 	byte	$02, $04, $06, $08, $09, $08, $08, $07, $05, $03, $00, $f9, $f2, $e9, $de, $d4
11c27     CA C1 B9 B3 
11c2b     AF AC AA AA 
11c2f     AC AF B2 B7 
11c33     BC C3 C8 CE | 	byte	$ca, $c1, $b9, $b3, $af, $ac, $aa, $aa, $ac, $af, $b2, $b7, $bc, $c3, $c8, $ce
11c37     D5 DA DF E4 
11c3b     E9 ED F1 F3 
11c3f     F4 F3 F0 EE 
11c43     EB E9 E6 E5 | 	byte	$d5, $da, $df, $e4, $e9, $ed, $f1, $f3, $f4, $f3, $f0, $ee, $eb, $e9, $e6, $e5
11c47     E4 E4 E4 E5 
11c4b     E7 E9 EB EE 
11c4f     F1 F5 F9 FE 
11c53     03 08 0D 11 | 	byte	$e4, $e4, $e4, $e5, $e7, $e9, $eb, $ee, $f1, $f5, $f9, $fe, $03, $08, $0d, $11
11c57     15 19 1C 1F 
11c5b     21 23 25 26 
11c5f     27 28 28 29 
11c63     2A 2B 2C 2C | 	byte	$15, $19, $1c, $1f, $21, $23, $25, $26, $27, $28, $28, $29, $2a, $2b, $2c, $2c
11c67     2D 2D 2E 2E 
11c6b     2E 2E 2F 2F 
11c6f     30 31 32 34 
11c73     34 36 37 37 | 	byte	$2d, $2d, $2e, $2e, $2e, $2e, $2f, $2f, $30, $31, $32, $34, $34, $36, $37, $37
11c77     37 37 36 35 
11c7b     33 30 2C 27 
11c7f     23 20 1C 17 
11c83     13 0E 09 04 | 	byte	$37, $37, $36, $35, $33, $30, $2c, $27, $23, $20, $1c, $17, $13, $0e, $09, $04
11c87     00 FB F7 F5 
11c8b     F3 F1 F1 F1 
11c8f     F2 F3 F6 F8 
11c93     FB FE 01 02 | 	byte	$00, $fb, $f7, $f5, $f3, $f1, $f1, $f1, $f2, $f3, $f6, $f8, $fb, $fe, $01, $02
11c97     04 05 05 05 
11c9b     04 03 02 00 
11c9f     FD F7 EF E6 
11ca3     DD D2 C9 C0 | 	byte	$04, $05, $05, $05, $04, $03, $02, $00, $fd, $f7, $ef, $e6, $dd, $d2, $c9, $c0
11ca7     B8 B3 AF AC 
11cab     AB AB AD B0 
11caf     B4 B8 BE C3 
11cb3     C9 CE D4 DA | 	byte	$b8, $b3, $af, $ac, $ab, $ab, $ad, $b0, $b4, $b8, $be, $c3, $c9, $ce, $d4, $da
11cb7     DE E3 E7 EC 
11cbb     EE EF EF ED 
11cbf     EA E8 E6 E4 
11cc3     E3 E2 E2 E2 | 	byte	$de, $e3, $e7, $ec, $ee, $ef, $ef, $ed, $ea, $e8, $e6, $e4, $e3, $e2, $e2, $e2
11cc7     E3 E5 E7 E9 
11ccb     EC F0 F3 F7 
11ccf     FC 01 06 0A 
11cd3     0F 13 17 1A | 	byte	$e3, $e5, $e7, $e9, $ec, $f0, $f3, $f7, $fc, $01, $06, $0a, $0f, $13, $17, $1a
11cd7     1D 20 23 25 
11cdb     27 29 2A 2A 
11cdf     2B 2C 2D 2D 
11ce3     2E 2E 2F 2E | 	byte	$1d, $20, $23, $25, $27, $29, $2a, $2a, $2b, $2c, $2d, $2d, $2e, $2e, $2f, $2e
11ce7     2E 2E 2E 2F 
11ceb     2F 2F 30 31 
11cef     32 33 34 35 
11cf3     36 36 37 36 | 	byte	$2e, $2e, $2e, $2f, $2f, $2f, $30, $31, $32, $33, $34, $35, $36, $36, $37, $36
11cf7     36 35 32 30 
11cfb     2C 29 25 20 
11cff     1D 19 15 11 
11d03     0C 08 03 FF | 	byte	$36, $35, $32, $30, $2c, $29, $25, $20, $1d, $19, $15, $11, $0c, $08, $03, $ff
11d07     FB F7 F5 F3 
11d0b     F2 F2 F3 F4 
11d0f     F6 F8 FA FD 
11d13     FF 01 03 03 | 	byte	$fb, $f7, $f5, $f3, $f2, $f2, $f3, $f4, $f6, $f8, $fa, $fd, $ff, $01, $03, $03
11d17     04 03 02 02 
11d1b     01 FF FD F6 
11d1f     EF E6 DC D2 
11d23     C9 C1 B9 B4 | 	byte	$04, $03, $02, $02, $01, $ff, $fd, $f6, $ef, $e6, $dc, $d2, $c9, $c1, $b9, $b4
11d27     B0 AD AC AC 
11d2b     AE B1 B4 B9 
11d2f     BD C2 C8 CD 
11d33     D4 D8 DE E2 | 	byte	$b0, $ad, $ac, $ac, $ae, $b1, $b4, $b9, $bd, $c2, $c8, $cd, $d4, $d8, $de, $e2
11d37     E6 E9 EB EB 
11d3b     E9 E7 E5 E3 
11d3f     E1 E1 DF DF 
11d43     E0 E1 E3 E5 | 	byte	$e6, $e9, $eb, $eb, $e9, $e7, $e5, $e3, $e1, $e1, $df, $df, $e0, $e1, $e3, $e5
11d47     E7 EA ED F1 
11d4b     F5 F9 FE 03 
11d4f     08 0C 10 15 
11d53     18 1C 1E 21 | 	byte	$e7, $ea, $ed, $f1, $f5, $f9, $fe, $03, $08, $0c, $10, $15, $18, $1c, $1e, $21
11d57     24 26 28 2A 
11d5b     2C 2D 2E 2F 
11d5f     2F 30 30 30 
11d63     30 2F 2F 2F | 	byte	$24, $26, $28, $2a, $2c, $2d, $2e, $2f, $2f, $30, $30, $30, $30, $2f, $2f, $2f
11d67     2F 2F 2F 30 
11d6b     30 31 32 33 
11d6f     34 35 35 36 
11d73     36 36 35 34 | 	byte	$2f, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $35, $36, $36, $36, $35, $34
11d77     32 30 2D 29 
11d7b     24 21 1E 1A 
11d7f     17 13 0F 0B 
11d83     06 01 FD FA | 	byte	$32, $30, $2d, $29, $24, $21, $1e, $1a, $17, $13, $0f, $0b, $06, $01, $fd, $fa
11d87     F7 F5 F3 F3 
11d8b     F3 F4 F6 F7 
11d8f     FA FC FE FF 
11d93     00 01 01 00 | 	byte	$f7, $f5, $f3, $f3, $f3, $f4, $f6, $f7, $fa, $fc, $fe, $ff, $00, $01, $01, $00
11d97     00 FF FF FD 
11d9b     FA F5 ED E4 
11d9f     DC D2 C9 C0 
11da3     B8 B3 AF AC | 	byte	$00, $ff, $ff, $fd, $fa, $f5, $ed, $e4, $dc, $d2, $c9, $c0, $b8, $b3, $af, $ac
11da7     AB AC AD B0 
11dab     B4 B8 BD C2 
11daf     C8 CD D2 D8 
11db3     DC E1 E5 E7 | 	byte	$ab, $ac, $ad, $b0, $b4, $b8, $bd, $c2, $c8, $cd, $d2, $d8, $dc, $e1, $e5, $e7
11db7     E7 E6 E5 E3 
11dbb     E0 DF DE DD 
11dbf     DD DD DE E0 
11dc3     E2 E5 E7 EB | 	byte	$e7, $e6, $e5, $e3, $e0, $df, $de, $dd, $dd, $dd, $de, $e0, $e2, $e5, $e7, $eb
11dc7     EE F3 F7 FB 
11dcb     00 04 09 0E 
11dcf     12 16 1A 1D 
11dd3     20 22 25 27 | 	byte	$ee, $f3, $f7, $fb, $00, $04, $09, $0e, $12, $16, $1a, $1d, $20, $22, $25, $27
11dd7     2A 2C 2E 2F 
11ddb     31 31 32 32 
11ddf     32 32 32 31 
11de3     30 30 30 30 | 	byte	$2a, $2c, $2e, $2f, $31, $31, $32, $32, $32, $32, $32, $31, $30, $30, $30, $30
11de7     30 30 31 31 
11deb     32 33 33 34 
11def     35 35 35 35 
11df3     35 34 33 31 | 	byte	$30, $30, $31, $31, $32, $33, $33, $34, $35, $35, $35, $35, $35, $34, $33, $31
11df7     2E 2B 26 23 
11dfb     1F 1C 19 16 
11dff     13 0E 0A 06 
11e03     02 FE FB F8 | 	byte	$2e, $2b, $26, $23, $1f, $1c, $19, $16, $13, $0e, $0a, $06, $02, $fe, $fb, $f8
11e07     F6 F5 F5 F5 
11e0b     F6 F7 F8 FA 
11e0f     FB FC FD FD 
11e13     FD FC FC FC | 	byte	$f6, $f5, $f5, $f5, $f6, $f7, $f8, $fa, $fb, $fc, $fd, $fd, $fd, $fc, $fc, $fc
11e17     FC FB F9 F4 
11e1b     EE E6 DE D3 
11e1f     CB C2 BB B5 
11e23     B1 AE AD AD | 	byte	$fc, $fb, $f9, $f4, $ee, $e6, $de, $d3, $cb, $c2, $bb, $b5, $b1, $ae, $ad, $ad
11e27     AE B0 B3 B8 
11e2b     BB C0 C6 CB 
11e2f     D0 D5 DA DE 
11e33     E1 E3 E3 E2 | 	byte	$ae, $b0, $b3, $b8, $bb, $c0, $c6, $cb, $d0, $d5, $da, $de, $e1, $e3, $e3, $e2
11e37     E0 DE DD DB 
11e3b     DB DA DA DB 
11e3f     DC DE E1 E4 
11e43     E7 EA EE F2 | 	byte	$e0, $de, $dd, $db, $db, $da, $da, $db, $dc, $de, $e1, $e4, $e7, $ea, $ee, $f2
11e47     F7 FB FF 04 
11e4b     08 0D 11 15 
11e4f     19 1C 1F 22 
11e53     24 26 29 2C | 	byte	$f7, $fb, $ff, $04, $08, $0d, $11, $15, $19, $1c, $1f, $22, $24, $26, $29, $2c
11e57     2D 2F 31 32 
11e5b     33 33 33 33 
11e5f     32 31 31 30 
11e63     30 30 30 30 | 	byte	$2d, $2f, $31, $32, $33, $33, $33, $33, $32, $31, $31, $30, $30, $30, $30, $30
11e67     30 31 31 32 
11e6b     32 33 33 34 
11e6f     34 34 34 33 
11e73     33 31 2F 2C | 	byte	$30, $31, $31, $32, $32, $33, $33, $34, $34, $34, $34, $33, $33, $31, $2f, $2c
11e77     28 24 21 1D 
11e7b     1A 17 14 11 
11e7f     0E 0A 07 04 
11e83     01 FF FC FA | 	byte	$28, $24, $21, $1d, $1a, $17, $14, $11, $0e, $0a, $07, $04, $01, $ff, $fc, $fa
11e87     F9 F8 F7 F8 
11e8b     F8 F9 FA FB 
11e8f     FB FB FA FA 
11e93     FA F9 F9 F9 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fb, $fb, $fa, $fa, $fa, $f9, $f9, $f9
11e97     F9 F6 F2 EC 
11e9b     E6 DE D5 CE 
11e9f     C6 C0 BB B7 
11ea3     B4 B2 B2 B2 | 	byte	$f9, $f6, $f2, $ec, $e6, $de, $d5, $ce, $c6, $c0, $bb, $b7, $b4, $b2, $b2, $b2
11ea7     B4 B6 B9 BD 
11eab     C1 C6 CA CF 
11eaf     D3 D8 DB DC 
11eb3     DD DD DC DB | 	byte	$b4, $b6, $b9, $bd, $c1, $c6, $ca, $cf, $d3, $d8, $db, $dc, $dd, $dd, $dc, $db
11eb7     D9 D9 D8 D8 
11ebb     D8 D9 DA DC 
11ebf     DE E1 E4 E7 
11ec3     EA EF F3 F6 | 	byte	$d9, $d9, $d8, $d8, $d8, $d9, $da, $dc, $de, $e1, $e4, $e7, $ea, $ef, $f3, $f6
11ec7     FB FF 04 08 
11ecb     0C 11 14 18 
11ecf     1B 1E 21 23 
11ed3     27 29 2B 2D | 	byte	$fb, $ff, $04, $08, $0c, $11, $14, $18, $1b, $1e, $21, $23, $27, $29, $2b, $2d
11ed7     2F 31 32 33 
11edb     34 34 35 34 
11edf     33 33 32 31 
11ee3     31 31 31 31 | 	byte	$2f, $31, $32, $33, $34, $34, $35, $34, $33, $33, $32, $31, $31, $31, $31, $31
11ee7     31 31 31 32 
11eeb     32 33 32 32 
11eef     32 32 32 31 
11ef3     30 2E 2B 29 | 	byte	$31, $31, $31, $32, $32, $33, $32, $32, $32, $32, $32, $31, $30, $2e, $2b, $29
11ef7     25 21 1E 1B 
11efb     18 16 13 10 
11eff     0D 0B 07 04 
11f03     02 FF FE FC | 	byte	$25, $21, $1e, $1b, $18, $16, $13, $10, $0d, $0b, $07, $04, $02, $ff, $fe, $fc
11f07     FA F9 F9 F9 
11f0b     F9 FA FA F9 
11f0f     F9 F9 F8 F8 
11f13     F8 F9 F8 F7 | 	byte	$fa, $f9, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f8, $f9, $f8, $f7
11f17     F4 F0 EB E4 
11f1b     DD D5 CE C8 
11f1f     C1 BC B8 B5 
11f23     B3 B3 B3 B4 | 	byte	$f4, $f0, $eb, $e4, $dd, $d5, $ce, $c8, $c1, $bc, $b8, $b5, $b3, $b3, $b3, $b4
11f27     B7 BA BD C1 
11f2b     C5 CA CE D2 
11f2f     D5 D7 D9 D9 
11f33     D8 D8 D7 D5 | 	byte	$b7, $ba, $bd, $c1, $c5, $ca, $ce, $d2, $d5, $d7, $d9, $d9, $d8, $d8, $d7, $d5
11f37     D5 D5 D5 D6 
11f3b     D8 D9 DB DE 
11f3f     E1 E4 E8 EC 
11f43     F0 F4 F8 FC | 	byte	$d5, $d5, $d5, $d6, $d8, $d9, $db, $de, $e1, $e4, $e8, $ec, $f0, $f4, $f8, $fc
11f47     01 05 09 0D 
11f4b     11 15 19 1C 
11f4f     1F 22 25 27 
11f53     2A 2C 2E 30 | 	byte	$01, $05, $09, $0d, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30
11f57     32 33 34 35 
11f5b     35 35 35 34 
11f5f     33 33 33 32 
11f63     32 32 31 31 | 	byte	$32, $33, $34, $35, $35, $35, $35, $34, $33, $33, $33, $32, $32, $32, $31, $31
11f67     31 31 31 31 
11f6b     32 32 32 32 
11f6f     32 31 31 30 
11f73     2E 2C 29 26 | 	byte	$31, $31, $31, $31, $32, $32, $32, $32, $32, $31, $31, $30, $2e, $2c, $29, $26
11f77     22 1F 1B 19 
11f7b     16 13 11 0F 
11f7f     0C 0A 07 04 
11f83     02 00 FE FC | 	byte	$22, $1f, $1b, $19, $16, $13, $11, $0f, $0c, $0a, $07, $04, $02, $00, $fe, $fc
11f87     FB FA FA F9 
11f8b     F9 F9 F8 F8 
11f8f     F7 F7 F7 F7 
11f93     F7 F7 F6 F3 | 	byte	$fb, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f7, $f7, $f7, $f7, $f7, $f7, $f6, $f3
11f97     EF EA E4 DD 
11f9b     D6 CE C7 C2 
11f9f     BD B9 B6 B4 
11fa3     B4 B4 B5 B7 | 	byte	$ef, $ea, $e4, $dd, $d6, $ce, $c7, $c2, $bd, $b9, $b6, $b4, $b4, $b4, $b5, $b7
11fa7     BA BD C0 C5 
11fab     C9 CD D0 D3 
11faf     D5 D5 D6 D5 
11fb3     D4 D3 D3 D2 | 	byte	$ba, $bd, $c0, $c5, $c9, $cd, $d0, $d3, $d5, $d5, $d6, $d5, $d4, $d3, $d3, $d2
11fb7     D3 D3 D4 D6 
11fbb     D9 DB DF E3 
11fbf     E5 E9 ED F1 
11fc3     F6 F9 FE 02 | 	byte	$d3, $d3, $d4, $d6, $d9, $db, $df, $e3, $e5, $e9, $ed, $f1, $f6, $f9, $fe, $02
11fc7     06 0A 0E 12 
11fcb     16 19 1C 1F 
11fcf     22 25 28 2A 
11fd3     2C 2E 30 31 | 	byte	$06, $0a, $0e, $12, $16, $19, $1c, $1f, $22, $25, $28, $2a, $2c, $2e, $30, $31
11fd7     33 34 36 36 
11fdb     36 36 36 36 
11fdf     35 34 34 33 
11fe3     33 32 32 32 | 	byte	$33, $34, $36, $36, $36, $36, $36, $36, $35, $34, $34, $33, $33, $32, $32, $32
11fe7     31 32 32 31 
11feb     31 31 31 31 
11fef     31 30 2F 2E 
11ff3     2B 29 26 22 | 	byte	$31, $32, $32, $31, $31, $31, $31, $31, $31, $30, $2f, $2e, $2b, $29, $26, $22
11ff7     1F 1C 19 17 
11ffb     14 12 10 0E 
11fff     0C 0A 07 05 
12003     02 00 FE FD | 	byte	$1f, $1c, $19, $17, $14, $12, $10, $0e, $0c, $0a, $07, $05, $02, $00, $fe, $fd
12007     FC FB FA F9 
1200b     F9 F8 F7 F6 
1200f     F6 F5 F6 F6 
12013     F5 F4 F2 EF | 	byte	$fc, $fb, $fa, $f9, $f9, $f8, $f7, $f6, $f6, $f5, $f6, $f6, $f5, $f4, $f2, $ef
12017     EA E4 DD D7 
1201b     CF C8 C3 BD 
1201f     BA B7 B5 B4 
12023     B4 B5 B7 B9 | 	byte	$ea, $e4, $dd, $d7, $cf, $c8, $c3, $bd, $ba, $b7, $b5, $b4, $b4, $b5, $b7, $b9
12027     BC BF C3 C7 
1202b     CB CE D0 D2 
1202f     D2 D2 D1 D0 
12033     D0 D0 CF D0 | 	byte	$bc, $bf, $c3, $c7, $cb, $ce, $d0, $d2, $d2, $d2, $d1, $d0, $d0, $d0, $cf, $d0
12037     D1 D2 D4 D7 
1203b     DA DD E1 E4 
1203f     E9 ED F1 F5 
12043     F9 FE 02 06 | 	byte	$d1, $d2, $d4, $d7, $da, $dd, $e1, $e4, $e9, $ed, $f1, $f5, $f9, $fe, $02, $06
12047     0A 0E 12 15 
1204b     19 1C 1F 23 
1204f     25 28 2A 2C 
12053     2E 30 31 33 | 	byte	$0a, $0e, $12, $15, $19, $1c, $1f, $23, $25, $28, $2a, $2c, $2e, $30, $31, $33
12057     34 35 36 36 
1205b     37 37 37 36 
1205f     35 35 34 34 
12063     33 32 31 31 | 	byte	$34, $35, $36, $36, $37, $37, $37, $36, $35, $35, $34, $34, $33, $32, $31, $31
12067     31 31 31 30 
1206b     30 30 30 30 
1206f     30 2F 2E 2C 
12073     29 26 23 20 | 	byte	$31, $31, $31, $30, $30, $30, $30, $30, $30, $2f, $2e, $2c, $29, $26, $23, $20
12077     1D 19 17 14 
1207b     12 10 0E 0D 
1207f     0B 09 07 05 
12083     03 01 FF FE | 	byte	$1d, $19, $17, $14, $12, $10, $0e, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fe
12087     FD FC FA F9 
1208b     F8 F7 F6 F6 
1208f     F5 F5 F5 F5 
12093     F4 F3 EF EB | 	byte	$fd, $fc, $fa, $f9, $f8, $f7, $f6, $f6, $f5, $f5, $f5, $f5, $f4, $f3, $ef, $eb
12097     E6 DF D9 D3 
1209b     CC C7 C2 BE 
1209f     BB B8 B7 B6 
120a3     B7 B8 BA BC | 	byte	$e6, $df, $d9, $d3, $cc, $c7, $c2, $be, $bb, $b8, $b7, $b6, $b7, $b8, $ba, $bc
120a7     BF C3 C6 C9 
120ab     CB CD CD CE 
120af     CD CD CC CC 
120b3     CC CC CD CE | 	byte	$bf, $c3, $c6, $c9, $cb, $cd, $cd, $ce, $cd, $cd, $cc, $cc, $cc, $cc, $cd, $ce
120b7     D0 D2 D5 D8 
120bb     DB E0 E4 E8 
120bf     EC F0 F5 F9 
120c3     FD 02 06 09 | 	byte	$d0, $d2, $d5, $d8, $db, $e0, $e4, $e8, $ec, $f0, $f5, $f9, $fd, $02, $06, $09
120c7     0E 11 15 19 
120cb     1C 1F 22 26 
120cf     27 2A 2D 2E 
120d3     30 31 33 34 | 	byte	$0e, $11, $15, $19, $1c, $1f, $22, $26, $27, $2a, $2d, $2e, $30, $31, $33, $34
120d7     35 36 37 38 
120db     38 38 38 37 
120df     37 36 35 34 
120e3     33 33 32 31 | 	byte	$35, $36, $37, $38, $38, $38, $38, $37, $37, $36, $35, $34, $33, $33, $32, $31
120e7     31 31 31 30 
120eb     31 30 30 30 
120ef     2F 2E 2C 2A 
120f3     27 24 21 1E | 	byte	$31, $31, $31, $30, $31, $30, $30, $30, $2f, $2e, $2c, $2a, $27, $24, $21, $1e
120f7     1A 18 15 13 
120fb     11 10 0F 0D 
120ff     0B 09 07 05 
12103     03 01 FF FD | 	byte	$1a, $18, $15, $13, $11, $10, $0f, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fd
12107     FC FB F9 F8 
1210b     F7 F6 F5 F5 
1210f     F4 F4 F4 F3 
12113     F1 EE E9 E4 | 	byte	$fc, $fb, $f9, $f8, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f1, $ee, $e9, $e4
12117     DE D8 D2 CC 
1211b     C5 C1 BD BA 
1211f     B7 B6 B5 B6 
12123     B7 B8 BB BE | 	byte	$de, $d8, $d2, $cc, $c5, $c1, $bd, $ba, $b7, $b6, $b5, $b6, $b7, $b8, $bb, $be
12127     C1 C4 C6 C8 
1212b     CA CA CA CA 
1212f     C9 C9 C9 C9 
12133     CA CB CC CF | 	byte	$c1, $c4, $c6, $c8, $ca, $ca, $ca, $ca, $c9, $c9, $c9, $c9, $ca, $cb, $cc, $cf
12137     D1 D5 D8 DC 
1213b     E0 E5 E9 EE 
1213f     F2 F6 FA FF 
12143     03 07 0B 0F | 	byte	$d1, $d5, $d8, $dc, $e0, $e5, $e9, $ee, $f2, $f6, $fa, $ff, $03, $07, $0b, $0f
12147     13 17 1A 1E 
1214b     21 23 27 29 
1214f     2C 2E 2F 31 
12153     32 34 35 36 | 	byte	$13, $17, $1a, $1e, $21, $23, $27, $29, $2c, $2e, $2f, $31, $32, $34, $35, $36
12157     37 38 39 39 
1215b     39 39 39 38 
1215f     38 37 36 35 
12163     34 33 32 32 | 	byte	$37, $38, $39, $39, $39, $39, $39, $38, $38, $37, $36, $35, $34, $33, $32, $32
12167     31 31 31 31 
1216b     30 30 30 30 
1216f     2E 2D 2B 28 
12173     25 22 1F 1C | 	byte	$31, $31, $31, $31, $30, $30, $30, $30, $2e, $2d, $2b, $28, $25, $22, $1f, $1c
12177     19 16 14 13 
1217b     11 10 0E 0C 
1217f     0A 08 06 04 
12183     02 01 FE FD | 	byte	$19, $16, $14, $13, $11, $10, $0e, $0c, $0a, $08, $06, $04, $02, $01, $fe, $fd
12187     FB F9 F8 F7 
1218b     F6 F4 F3 F3 
1218f     F2 F2 F0 EE 
12193     EA E6 E0 DA | 	byte	$fb, $f9, $f8, $f7, $f6, $f4, $f3, $f3, $f2, $f2, $f0, $ee, $ea, $e6, $e0, $da
12197     D4 CE C8 C3 
1219b     BF BB B8 B6 
1219f     B5 B5 B6 B7 
121a3     B9 BC BE C1 | 	byte	$d4, $ce, $c8, $c3, $bf, $bb, $b8, $b6, $b5, $b5, $b6, $b7, $b9, $bc, $be, $c1
121a7     C3 C5 C6 C6 
121ab     C6 C6 C6 C5 
121af     C5 C5 C6 C8 
121b3     C9 CC CF D2 | 	byte	$c3, $c5, $c6, $c6, $c6, $c6, $c6, $c5, $c5, $c5, $c6, $c8, $c9, $cc, $cf, $d2
121b7     D5 DA DE E2 
121bb     E7 EC F0 F5 
121bf     F9 FD 02 06 
121c3     0A 0E 12 16 | 	byte	$d5, $da, $de, $e2, $e7, $ec, $f0, $f5, $f9, $fd, $02, $06, $0a, $0e, $12, $16
121c7     19 1D 21 23 
121cb     26 29 2B 2E 
121cf     2F 31 32 33 
121d3     35 36 37 38 | 	byte	$19, $1d, $21, $23, $26, $29, $2b, $2e, $2f, $31, $32, $33, $35, $36, $37, $38
121d7     39 3A 3A 3B 
121db     3B 3B 3A 39 
121df     38 37 36 35 
121e3     34 33 32 32 | 	byte	$39, $3a, $3a, $3b, $3b, $3b, $3a, $39, $38, $37, $36, $35, $34, $33, $32, $32
121e7     32 31 30 30 
121eb     30 30 2F 2D 
121ef     2C 29 27 24 
121f3     21 1E 1B 18 | 	byte	$32, $31, $30, $30, $30, $30, $2f, $2d, $2c, $29, $27, $24, $21, $1e, $1b, $18
121f7     15 13 12 10 
121fb     0E 0D 0B 09 
121ff     08 05 03 01 
12203     FF FE FC FA | 	byte	$15, $13, $12, $10, $0e, $0d, $0b, $09, $08, $05, $03, $01, $ff, $fe, $fc, $fa
12207     F8 F6 F5 F4 
1220b     F3 F2 F2 00 
1220f     00 00 00 03 
12213     02 01 00 00 | 	byte	$f8, $f6, $f5, $f4, $f3, $f2, $f2, $00, $00, $00, $00, $03, $02, $01, $00, $00
12217     FE FE FD FC 
1221b     FB FA FA F9 
1221f     FA FA FA FB 
12223     FC FD FD FE | 	byte	$fe, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $fa, $fa, $fa, $fb, $fc, $fd, $fd, $fe
12227     FE FE FF 00 
1222b     00 01 02 02 
1222f     02 00 00 FE 
12233     FD FC FB FA | 	byte	$fe, $fe, $ff, $00, $00, $01, $02, $02, $02, $00, $00, $fe, $fd, $fc, $fb, $fa
12237     FA FA F9 F9 
1223b     F8 F9 F9 F9 
1223f     FA FB FC FE 
12243     FF FF 00 00 | 	byte	$fa, $fa, $f9, $f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fe, $ff, $ff, $00, $00
12247     00 00 00 01 
1224b     00 00 FF FF 
1224f     FD FB FA F9 
12253     F8 F8 F8 F8 | 	byte	$00, $00, $00, $01, $00, $00, $ff, $ff, $fd, $fb, $fa, $f9, $f8, $f8, $f8, $f8
12257     F8 F9 F9 F9 
1225b     FA FA FA FB 
1225f     FC FE FE FF 
12263     FF FF FF FE | 	byte	$f8, $f9, $f9, $f9, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $ff, $ff, $ff, $ff, $fe
12267     FE FE FF FF 
1226b     00 00 00 FF 
1226f     FF FF FF FF 
12273     00 01 02 03 | 	byte	$fe, $fe, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $01, $02, $03
12277     04 05 04 03 
1227b     03 02 02 02 
1227f     03 03 03 03 
12283     03 03 03 03 | 	byte	$04, $05, $04, $03, $03, $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03
12287     04 05 07 08 
1228b     09 09 0A 0A 
1228f     09 08 08 07 
12293     06 05 03 01 | 	byte	$04, $05, $07, $08, $09, $09, $0a, $0a, $09, $08, $08, $07, $06, $05, $03, $01
12297     FE F9 F5 EF 
1229b     ED EC EF F5 
1229f     FB 03 09 11 
122a3     17 1B 1F 21 | 	byte	$fe, $f9, $f5, $ef, $ed, $ec, $ef, $f5, $fb, $03, $09, $11, $17, $1b, $1f, $21
122a7     24 25 24 20 
122ab     1C 15 0E 04 
122af     FC F2 EB E8 
122b3     E8 EA EB EC | 	byte	$24, $25, $24, $20, $1c, $15, $0e, $04, $fc, $f2, $eb, $e8, $e8, $ea, $eb, $ec
122b7     EC EB EA EC 
122bb     F1 F8 03 0E 
122bf     19 21 27 2A 
122c3     2B 29 27 25 | 	byte	$ec, $eb, $ea, $ec, $f1, $f8, $03, $0e, $19, $21, $27, $2a, $2b, $29, $27, $25
122c7     24 21 1C 17 
122cb     10 04 F4 E6 
122cf     DB D7 D9 DE 
122d3     E7 E9 E4 DC | 	byte	$24, $21, $1c, $17, $10, $04, $f4, $e6, $db, $d7, $d9, $de, $e7, $e9, $e4, $dc
122d7     D8 DA E2 EE 
122db     00 10 20 2C 
122df     34 3A 3A 36 
122e3     32 31 33 34 | 	byte	$d8, $da, $e2, $ee, $00, $10, $20, $2c, $34, $3a, $3a, $36, $32, $31, $33, $34
122e7     30 27 1C 0E 
122eb     F8 DC C5 C1 
122ef     C6 CE D6 E0 
122f3     E4 DA CB CA | 	byte	$30, $27, $1c, $0e, $f8, $dc, $c5, $c1, $c6, $ce, $d6, $e0, $e4, $da, $cb, $ca
122f7     D3 E0 EF 01 
122fb     16 28 36 40 
122ff     46 44 3B 35 
12303     34 3A 3B 36 | 	byte	$d3, $e0, $ef, $01, $16, $28, $36, $40, $46, $44, $3b, $35, $34, $3a, $3b, $36
12307     2B 1B 09 F2 
1230b     C6 B0 B9 C3 
1230f     C4 C8 D6 E1 
12313     CC B6 C5 D4 | 	byte	$2b, $1b, $09, $f2, $c6, $b0, $b9, $c3, $c4, $c8, $d6, $e1, $cc, $b6, $c5, $d4
12317     DA EA 02 1A 
1231b     31 3C 47 4D 
1231f     4A 3E 36 3E 
12323     48 44 3F 33 | 	byte	$da, $ea, $02, $1a, $31, $3c, $47, $4d, $4a, $3e, $36, $3e, $48, $44, $3f, $33
12327     1F 08 E8 BD 
1232b     AC B4 B9 BA 
1232f     C2 D0 DA D6 
12333     AC B6 CC D5 | 	byte	$1f, $08, $e8, $bd, $ac, $b4, $b9, $ba, $c2, $d0, $da, $d6, $ac, $b6, $cc, $d5
12337     E4 F9 0B 2E 
1233b     38 47 51 4D 
1233f     3B 37 41 4B 
12343     4B 48 40 2A | 	byte	$e4, $f9, $0b, $2e, $38, $47, $51, $4d, $3b, $37, $41, $4b, $4b, $48, $40, $2a
12347     11 EB CA A5 
1234b     AC B4 B5 B5 
1234f     C3 CD D5 B2 
12353     A7 C4 CD DB | 	byte	$11, $eb, $ca, $a5, $ac, $b4, $b5, $b5, $c3, $cd, $d5, $b2, $a7, $c4, $cd, $db
12357     ED 00 19 36 
1235b     3F 55 54 41 
1235f     3A 44 54 57 
12363     53 4E 3F 20 | 	byte	$ed, $00, $19, $36, $3f, $55, $54, $41, $3a, $44, $54, $57, $53, $4e, $3f, $20
12367     FC DD AF A9 
1236b     AE B0 AC B9 
1236f     C4 CC CD 9E 
12373     B3 C5 CF E0 | 	byte	$fc, $dd, $af, $a9, $ae, $b0, $ac, $b9, $c4, $cc, $cd, $9e, $b3, $c5, $cf, $e0
12377     F1 07 1E 39 
1237b     47 57 46 3A 
1237f     46 51 5C 5C 
12383     5A 52 3D 12 | 	byte	$f1, $07, $1e, $39, $47, $57, $46, $3a, $46, $51, $5c, $5c, $5a, $52, $3d, $12
12387     EB CD A7 AA 
1238b     AC AA AD B9 
1238f     C4 CC B3 A0 
12393     B7 C4 D5 E3 | 	byte	$eb, $cd, $a7, $aa, $ac, $aa, $ad, $b9, $c4, $cc, $b3, $a0, $b7, $c4, $d5, $e3
12397     F4 0E 20 3F 
1239b     50 50 3B 43 
1239f     50 5F 65 66 
123a3     61 53 30 03 | 	byte	$f4, $0e, $20, $3f, $50, $50, $3b, $43, $50, $5f, $65, $66, $61, $53, $30, $03
123a7     E9 B3 AB AD 
123ab     AB A7 B0 BC 
123af     C6 CD A3 A9 
123b3     BD C9 D8 E6 | 	byte	$e9, $b3, $ab, $ad, $ab, $a7, $b0, $bc, $c6, $cd, $a3, $a9, $bd, $c9, $d8, $e6
123b7     F5 0D 22 42 
123bb     52 3C 3B 49 
123bf     58 67 6C 6C 
123c3     68 55 23 FD | 	byte	$f5, $0d, $22, $42, $52, $3c, $3b, $49, $58, $67, $6c, $6c, $68, $55, $23, $fd
123c7     DF B3 B0 AF 
123cb     A9 AB B6 C2 
123cf     CD C9 A2 AC 
123d3     BE CF D7 E4 | 	byte	$df, $b3, $b0, $af, $a9, $ab, $b6, $c2, $cd, $c9, $a2, $ac, $be, $cf, $d7, $e4
123d7     F7 06 26 41 
123db     45 31 40 50 
123df     62 6F 74 73 
123e3     6E 4A 1C 01 | 	byte	$f7, $06, $26, $41, $45, $31, $40, $50, $62, $6f, $74, $73, $6e, $4a, $1c, $01
123e7     CB B9 BA B1 
123eb     AE B1 BE C9 
123ef     D4 BE A8 B0 
123f3     BC CE D0 DA | 	byte	$cb, $b9, $ba, $b1, $ae, $b1, $be, $c9, $d4, $be, $a8, $b0, $bc, $ce, $d0, $da
123f7     F1 00 28 3A 
123fb     2E 31 44 54 
123ff     6B 75 7C 7D 
12403     70 3D 18 02 | 	byte	$f1, $00, $28, $3a, $2e, $31, $44, $54, $6b, $75, $7c, $7d, $70, $3d, $18, $02
12407     CB C4 BF B4 
1240b     B2 B7 C4 D0 
1240f     D5 B0 A6 B5 
12413     C1 D3 CE DB | 	byte	$cb, $c4, $bf, $b4, $b2, $b7, $c4, $d0, $d5, $b0, $a6, $b5, $c1, $d3, $ce, $db
12417     ED 05 2A 2D 
1241b     26 38 47 5C 
1241f     6F 7A 7E 7F 
12423     5E 35 1D F1 | 	byte	$ed, $05, $2a, $2d, $26, $38, $47, $5c, $6f, $7a, $7e, $7f, $5e, $35, $1d, $f1
12427     D1 CC BD B7 
1242b     B2 BC C6 D5 
1242f     D3 A8 A7 B6 
12433     C6 D6 CF DD | 	byte	$d1, $cc, $bd, $b7, $b2, $bc, $c6, $d5, $d3, $a8, $a7, $b6, $c6, $d6, $cf, $dd
12437     EE 08 27 21 
1243b     27 3F 4B 67 
1243f     76 7F 7F 7C 
12443     4F 2D 21 E6 | 	byte	$ee, $08, $27, $21, $27, $3f, $4b, $67, $76, $7f, $7f, $7c, $4f, $2d, $21, $e6
12447     D8 CF BE B5 
1244b     B3 C0 C8 D8 
1244f     CD A6 AB B7 
12453     CB D4 CF DB | 	byte	$d8, $cf, $be, $b5, $b3, $c0, $c8, $d8, $cd, $a6, $ab, $b7, $cb, $d4, $cf, $db
12457     F1 0B 1A 1C 
1245b     2D 3F 52 69 
1245f     78 7F 7F 6A 
12463     42 32 10 EC | 	byte	$f1, $0b, $1a, $1c, $2d, $3f, $52, $69, $78, $7f, $7f, $6a, $42, $32, $10, $ec
12467     E2 D0 C2 B4 
1246b     B7 C1 CF D9 
1246f     BA A4 B1 BE 
12473     D3 CF D2 DD | 	byte	$e2, $d0, $c2, $b4, $b7, $c1, $cf, $d9, $ba, $a4, $b1, $be, $d3, $cf, $d2, $dd
12477     F5 05 0F 20 
1247b     34 42 5A 6E 
1247f     7A 7F 7F 5A 
12483     39 36 04 F3 | 	byte	$f5, $05, $0f, $20, $34, $42, $5a, $6e, $7a, $7f, $7f, $5a, $39, $36, $04, $f3
12487     E9 D5 C2 B4 
1248b     BC C1 D6 DC 
1248f     AD A7 B1 C4 
12493     D8 CA D2 E1 | 	byte	$e9, $d5, $c2, $b4, $bc, $c1, $d6, $dc, $ad, $a7, $b1, $c4, $d8, $ca, $d2, $e1
12497     F5 F9 0B 24 
1249b     36 46 60 71 
1249f     7C 7F 6B 46 
124a3     3B 2F 05 FC | 	byte	$f5, $f9, $0b, $24, $36, $46, $60, $71, $7c, $7f, $6b, $46, $3b, $2f, $05, $fc
124a7     EF DB BF B4 
124ab     BC C6 DB DC 
124af     A3 AB B5 C9 
124b3     D6 C8 CF E3 | 	byte	$ef, $db, $bf, $b4, $bc, $c6, $db, $dc, $a3, $ab, $b5, $c9, $d6, $c8, $cf, $e3
124b7     EC F7 0C 29 
124bb     37 4D 62 72 
124bf     7D 78 5A 39 
124c3     3D 19 0C 05 | 	byte	$ec, $f7, $0c, $29, $37, $4d, $62, $72, $7d, $78, $5a, $39, $3d, $19, $0c, $05
124c7     F8 DD C0 B8 
124cb     BE D2 E1 CD 
124cf     A4 AD BF D0 
124d3     D3 C9 D1 E5 | 	byte	$f8, $dd, $c0, $b8, $be, $d2, $e1, $cd, $a4, $ad, $bf, $d0, $d3, $c9, $d1, $e5
124d7     DD FB 10 2B 
124db     3A 51 64 72 
124df     7A 60 44 39 
124e3     3A 12 0F 12 | 	byte	$dd, $fb, $10, $2b, $3a, $51, $64, $72, $7a, $60, $44, $39, $3a, $12, $0f, $12
124e7     04 DF C2 BB 
124eb     C0 D9 E6 B8 
124ef     AA AF C4 D4 
124f3     CF CE D2 DA | 	byte	$04, $df, $c2, $bb, $c0, $d9, $e6, $b8, $aa, $af, $c4, $d4, $cf, $ce, $d2, $da
124f7     D9 FE 18 2B 
124fb     3F 56 66 73 
124ff     69 57 30 38 
12503     27 14 18 1E | 	byte	$d9, $fe, $18, $2b, $3f, $56, $66, $73, $69, $57, $30, $38, $27, $14, $18, $1e
12507     0B E6 C4 BC 
1250b     CA E0 E9 A9 
1250f     AC B8 C9 D6 
12513     C8 D1 D2 CD | 	byte	$0b, $e6, $c4, $bc, $ca, $e0, $e9, $a9, $ac, $b8, $c9, $d6, $c8, $d1, $d2, $cd
12517     DD 03 20 31 
1251b     46 57 69 6F 
1251f     54 41 2F 38 
12523     16 15 25 29 | 	byte	$dd, $03, $20, $31, $46, $57, $69, $6f, $54, $41, $2f, $38, $16, $15, $25, $29
12527     0F EB C7 BE 
1252b     D3 E8 E2 A7 
1252f     AC BF CE D6 
12533     C6 D1 C8 C8 | 	byte	$0f, $eb, $c7, $be, $d3, $e8, $e2, $a7, $ac, $bf, $ce, $d6, $c6, $d1, $c8, $c8
12537     E7 02 26 33 
1253b     49 57 69 56 
1253f     50 28 2C 2F 
12543     0E 1A 2F 30 | 	byte	$e7, $02, $26, $33, $49, $57, $69, $56, $50, $28, $2c, $2f, $0e, $1a, $2f, $30
12547     1A EF C9 C2 
1254b     D9 ED C3 AC 
1254f     B0 C5 D1 D3 
12553     C8 CC BE C8 | 	byte	$1a, $ef, $c9, $c2, $d9, $ed, $c3, $ac, $b0, $c5, $d1, $d3, $c8, $cc, $be, $c8
12557     F7 05 29 3B 
1255b     4A 5D 60 4E 
1255f     38 24 2E 1A 
12563     0E 25 37 36 | 	byte	$f7, $05, $29, $3b, $4a, $5d, $60, $4e, $38, $24, $2e, $1a, $0e, $25, $37, $36
12567     25 F7 C8 C8 
1256b     E2 EF B4 AC 
1256f     B6 C8 D4 CD 
12573     CF BF BC CE | 	byte	$25, $f7, $c8, $c8, $e2, $ef, $b4, $ac, $b6, $c8, $d4, $cd, $cf, $bf, $bc, $ce
12577     FD 0B 2C 3E 
1257b     4C 5E 47 49 
1257f     25 20 2B 05 
12583     12 2D 3E 3C | 	byte	$fd, $0b, $2c, $3e, $4c, $5e, $47, $49, $25, $20, $2b, $05, $12, $2d, $3e, $3c
12587     2C FB CC D1 
1258b     E8 E2 B3 AD 
1258f     BE CC D7 C6 
12593     CC B2 BD DD | 	byte	$2c, $fb, $cc, $d1, $e8, $e2, $b3, $ad, $be, $cc, $d7, $c6, $cc, $b2, $bd, $dd
12597     FD 15 2F 41 
1259b     50 49 49 33 
1259f     1B 21 19 02 
125a3     1C 32 42 43 | 	byte	$fd, $15, $2f, $41, $50, $49, $49, $33, $1b, $21, $19, $02, $1c, $32, $42, $43
125a7     35 00 D2 D5 
125ab     EB D4 AE AF 
125af     C4 D0 D7 C4 
125b3     BE AF C1 F0 | 	byte	$35, $00, $d2, $d5, $eb, $d4, $ae, $af, $c4, $d0, $d7, $c4, $be, $af, $c1, $f0
125b7     FE 1D 35 44 
125bb     4A 40 44 20 
125bf     19 23 04 09 
125c3     21 38 44 49 | 	byte	$fe, $1d, $35, $44, $4a, $40, $44, $20, $19, $23, $04, $09, $21, $38, $44, $49
125c7     3F 0A D6 DB 
125cb     E1 C9 AD B6 
125cf     C6 D4 CF C1 
125d3     B6 B1 C8 FB | 	byte	$3f, $0a, $d6, $db, $e1, $c9, $ad, $b6, $c6, $d4, $cf, $c1, $b6, $b1, $c8, $fb
125d7     03 24 38 43 
125db     34 44 31 15 
125df     17 19 FA 0F 
125e3     26 3C 48 4F | 	byte	$03, $24, $38, $43, $34, $44, $31, $15, $17, $19, $fa, $0f, $26, $3c, $48, $4f
125e7     45 0E DA DD 
125eb     DE BF AC BD 
125ef     CD D8 C6 B9 
125f3     B4 B7 DB FF | 	byte	$45, $0e, $da, $dd, $de, $bf, $ac, $bd, $cd, $d8, $c6, $b9, $b4, $b7, $db, $ff
125f7     09 2E 3B 33 
125fb     3A 3E 1D 11 
125ff     1A 08 FE 16 
12603     2B 3E 4A 57 | 	byte	$09, $2e, $3b, $33, $3a, $3e, $1d, $11, $1a, $08, $fe, $16, $2b, $3e, $4a, $57
12607     4D 19 DC D2 
1260b     E2 B6 AD C3 
1260f     D2 D8 BA B4 
12613     B2 BA ED 00 | 	byte	$4d, $19, $dc, $d2, $e2, $b6, $ad, $c3, $d2, $d8, $ba, $b4, $b2, $ba, $ed, $00
12617     0D 35 34 28 
1261b     3C 2F 12 11 
1261f     18 F9 04 1C 
12623     2F 40 4C 5C | 	byte	$0d, $35, $34, $28, $3c, $2f, $12, $11, $18, $f9, $04, $1c, $2f, $40, $4c, $5c
12627     54 25 D9 D4 
1262b     DC AB B4 C7 
1262f     D4 CE AF B4 
12633     B0 C6 F9 03 | 	byte	$54, $25, $d9, $d4, $dc, $ab, $b4, $c7, $d4, $ce, $af, $b4, $b0, $c6, $f9, $03
12637     15 33 1E 30 
1263b     3A 1E 0C 15 
1263f     0B F7 0C 21 
12643     33 41 52 60 | 	byte	$15, $33, $1e, $30, $3a, $1e, $0c, $15, $0b, $f7, $0c, $21, $33, $41, $52, $60
12647     5B 21 CC DD 
1264b     CE A7 BB CD 
1264f     D9 BA AE B7 
12653     B1 D5 FE 06 | 	byte	$5b, $21, $cc, $dd, $ce, $a7, $bb, $cd, $d9, $ba, $ae, $b7, $b1, $d5, $fe, $06
12657     25 1F 25 32 
1265b     2B 14 0D 15 
1265f     FC FC 12 25 
12663     35 42 56 64 | 	byte	$25, $1f, $25, $32, $2b, $14, $0d, $15, $fc, $fc, $12, $25, $35, $42, $56, $64
12667     63 1F CC DE 
1266b     BB AC C1 D1 
1266f     D4 A8 AF B7 
12673     B4 EA FE 08 | 	byte	$63, $1f, $cc, $de, $bb, $ac, $c1, $d1, $d4, $a8, $af, $b7, $b4, $ea, $fe, $08
12677     24 15 29 2D 
1267b     23 0C 11 0D 
1267f     F6 05 18 2A 
12683     38 46 5D 69 | 	byte	$24, $15, $29, $2d, $23, $0c, $11, $0d, $f6, $05, $18, $2a, $38, $46, $5d, $69
12687     69 08 D5 DB 
1268b     A6 B3 C9 D5 
1268f     C0 A6 B3 B2 
12693     BF F9 03 0D | 	byte	$69, $08, $d5, $db, $a6, $b3, $c9, $d5, $c0, $a6, $b3, $b2, $bf, $f9, $03, $0d
12697     11 1F 2C 21 
1269b     19 0A 13 00 
1269f     F8 0A 1E 2B 
126a3     39 4D 60 6F | 	byte	$11, $1f, $2c, $21, $19, $0a, $13, $00, $f8, $0a, $1e, $2b, $39, $4d, $60, $6f
126a7     66 09 DA CC 
126ab     A4 B9 CD D3 
126af     AE AB B7 AF 
126b3     D6 FD 07 05 | 	byte	$66, $09, $da, $cc, $a4, $b9, $cd, $d3, $ae, $ab, $b7, $af, $d6, $fd, $07, $05
126b7     16 25 21 22 
126bb     0F 0D 10 F8 
126bf     FE 0F 21 2D 
126c3     3A 51 62 76 | 	byte	$16, $25, $21, $22, $0f, $0d, $10, $f8, $fe, $0f, $21, $2d, $3a, $51, $62, $76
126c7     54 17 DE B7 
126cb     A7 C2 D0 C9 
126cf     A3 B0 B8 B2 
126d3     E5 FF 04 03 | 	byte	$54, $17, $de, $b7, $a7, $c2, $d0, $c9, $a3, $b0, $b8, $b2, $e5, $ff, $04, $03
126d7     1B 24 1E 1A 
126db     0B 12 08 F6 
126df     05 17 24 2F 
126e3     41 55 67 75 | 	byte	$1b, $24, $1e, $1a, $0b, $12, $08, $f6, $05, $17, $24, $2f, $41, $55, $67, $75
126e7     50 12 D8 A8 
126eb     AD C8 CF BA 
126ef     A2 B2 B4 BD 
126f3     F2 01 F0 14 | 	byte	$50, $12, $d8, $a8, $ad, $c8, $cf, $ba, $a2, $b2, $b4, $bd, $f2, $01, $f0, $14
126f7     1E 17 1D 10 
126fb     0B 11 FF F9 
126ff     0B 19 25 31 
12703     45 59 6D 66 | 	byte	$1e, $17, $1d, $10, $0b, $11, $ff, $f9, $0b, $19, $25, $31, $45, $59, $6d, $66
12707     58 1A C5 A7 
1270b     B5 CB C7 AC 
1270f     A9 B5 B1 C9 
12713     FC F6 F5 17 | 	byte	$58, $1a, $c5, $a7, $b5, $cb, $c7, $ac, $a9, $b5, $b1, $c9, $fc, $f6, $f5, $17
12717     15 1C 16 0B 
1271b     0F 0D F8 FE 
1271f     10 1D 25 36 
12723     49 5C 6F 5C | 	byte	$15, $1c, $16, $0b, $0f, $0d, $f8, $fe, $10, $1d, $25, $36, $49, $5c, $6f, $5c
12727     5C 17 BD A5 
1272b     BA C9 BE A7 
1272f     B0 B6 B0 D8 
12733     FE E5 10 15 | 	byte	$5c, $17, $bd, $a5, $ba, $c9, $be, $a7, $b0, $b6, $b0, $d8, $fe, $e5, $10, $15
12737     11 1D 0E 0A 
1273b     11 07 F7 04 
1273f     14 1D 28 3B 
12743     4E 61 66 5F | 	byte	$11, $1d, $0e, $0a, $11, $07, $f7, $04, $14, $1d, $28, $3b, $4e, $61, $66, $5f
12747     5D FB B9 A8 
1274b     BD C2 B9 A3 
1274f     B1 B3 B3 E4 
12753     EA F0 17 08 | 	byte	$5d, $fb, $b9, $a8, $bd, $c2, $b9, $a3, $b1, $b3, $b3, $e4, $ea, $f0, $17, $08
12757     19 1B 08 0E 
1275b     10 FF FB 0D 
1275f     19 21 2E 44 
12763     52 68 5A 65 | 	byte	$19, $1b, $08, $0e, $10, $ff, $fb, $0d, $19, $21, $2e, $44, $52, $68, $5a, $65
12767     50 F4 B1 AD 
1276b     BC BB B7 A6 
1276f     B4 AD BB F0 
12773     DB 04 0E 0F | 	byte	$50, $f4, $b1, $ad, $bc, $bb, $b7, $a6, $b4, $ad, $bb, $f0, $db, $04, $0e, $0f
12777     1D 15 06 13 
1277b     11 FE 04 14 
1277f     1E 26 36 46 
12783     55 61 52 5C | 	byte	$1d, $15, $06, $13, $11, $fe, $04, $14, $1e, $26, $36, $46, $55, $61, $52, $5c
12787     36 DE AE AB 
1278b     AE B1 B2 A8 
1278f     B2 AD C5 E4 
12793     EC 0E 10 1D | 	byte	$36, $de, $ae, $ab, $ae, $b1, $b2, $a8, $b2, $ad, $c5, $e4, $ec, $0e, $10, $1d
12797     23 11 0B 15 
1279b     0B FB 07 13 
1279f     17 20 32 3F 
127a3     52 4E 50 4A | 	byte	$23, $11, $0b, $15, $0b, $fb, $07, $13, $17, $20, $32, $3f, $52, $4e, $50, $4a
127a7     2A DB B5 AF 
127ab     B1 BC BB BA 
127af     BA C3 D5 EA 
127b3     00 14 1C 26 | 	byte	$2a, $db, $b5, $af, $b1, $bc, $bb, $ba, $ba, $c3, $d5, $ea, $00, $14, $1c, $26
127b7     21 0E 10 17 
127bb     05 FE 0D 13 
127bf     16 23 31 40 
127c3     4E 40 4A 3C | 	byte	$21, $0e, $10, $17, $05, $fe, $0d, $13, $16, $23, $31, $40, $4e, $40, $4a, $3c
127c7     1C D7 B6 AD 
127cb     B3 C2 BD C2 
127cf     BD CE DF F3 
127d3     08 19 1E 24 | 	byte	$1c, $d7, $b6, $ad, $b3, $c2, $bd, $c2, $bd, $ce, $df, $f3, $08, $19, $1e, $24
127d7     18 0B 12 12 
127db     FC 00 0C 0F 
127df     15 23 31 3E 
127e3     44 3B 3B 35 | 	byte	$18, $0b, $12, $12, $fc, $00, $0c, $0f, $15, $23, $31, $3e, $44, $3b, $3b, $35
127e7     12 CD B2 AC 
127eb     B8 C8 BD C4 
127ef     C5 D7 E8 FC 
127f3     10 1B 1F 1F | 	byte	$12, $cd, $b2, $ac, $b8, $c8, $bd, $c4, $c5, $d7, $e8, $fc, $10, $1b, $1f, $1f
127f7     10 0C 14 09 
127fb     F9 04 0C 0D 
127ff     15 24 2F 3D 
12803     38 38 32 2D | 	byte	$10, $0c, $14, $09, $f9, $04, $0c, $0d, $15, $24, $2f, $3d, $38, $38, $32, $2d
12807     04 C7 B0 B0 
1280b     BC CC C0 C3 
1280f     CF DE F0 03 
12813     13 1C 1E 18 | 	byte	$04, $c7, $b0, $b0, $bc, $cc, $c0, $c3, $cf, $de, $f0, $03, $13, $1c, $1e, $18
12817     0B 0D 11 FF 
1281b     FA 06 0A 0C 
1281f     17 24 30 3B 
12823     2F 2E 30 27 | 	byte	$0b, $0d, $11, $ff, $fa, $06, $0a, $0c, $17, $24, $30, $3b, $2f, $2e, $30, $27
12827     FA C3 B0 B6 
1282b     C2 CD C2 C5 
1282f     D6 E4 F6 08 
12833     15 1C 1C 11 | 	byte	$fa, $c3, $b0, $b6, $c2, $cd, $c2, $c5, $d6, $e4, $f6, $08, $15, $1c, $1c, $11
12837     09 10 0B FB 
1283b     FF 08 09 0F 
1283f     1A 27 31 36 
12843     29 2A 2C 21 | 	byte	$09, $10, $0b, $fb, $ff, $08, $09, $0f, $1a, $27, $31, $36, $29, $2a, $2c, $21
12847     EE BD B4 BD 
1284b     C7 CD C3 CD 
1284f     DC EB FC 0C 
12853     17 1B 16 0B | 	byte	$ee, $bd, $b4, $bd, $c7, $cd, $c3, $cd, $dc, $eb, $fc, $0c, $17, $1b, $16, $0b
12857     0B 11 05 FA 
1285b     03 08 0A 10 
1285f     1E 27 32 2D 
12863     23 29 29 19 | 	byte	$0b, $11, $05, $fa, $03, $08, $0a, $10, $1e, $27, $32, $2d, $23, $29, $29, $19
12867     E0 BB BD C2 
1286b     CB CE C5 D5 
1286f     E3 F0 03 10 
12873     19 19 12 09 | 	byte	$e0, $bb, $bd, $c2, $cb, $ce, $c5, $d5, $e3, $f0, $03, $10, $19, $19, $12, $09
12877     0E 0F FE FB 
1287b     05 08 0B 14 
1287f     1F 29 31 23 
12883     24 28 25 10 | 	byte	$0e, $0f, $fe, $fb, $05, $08, $0b, $14, $1f, $29, $31, $23, $24, $28, $25, $10
12887     D8 BE C4 C8 
1288b     CE CF CC DA 
1288f     E8 F8 08 13 
12893     19 16 0D 0A | 	byte	$d8, $be, $c4, $c8, $ce, $cf, $cc, $da, $e8, $f8, $08, $13, $19, $16, $0d, $0a
12897     11 0A FD 00 
1289b     07 09 0C 17 
1289f     22 2A 2E 1C 
128a3     24 27 22 01 | 	byte	$11, $0a, $fd, $00, $07, $09, $0c, $17, $22, $2a, $2e, $1c, $24, $27, $22, $01
128a7     D3 C5 CA CC 
128ab     D2 D1 D3 E0 
128af     ED FC 0B 14 
128b3     18 12 09 0B | 	byte	$d3, $c5, $ca, $cc, $d2, $d1, $d3, $e0, $ed, $fc, $0b, $14, $18, $12, $09, $0b
128b7     0F 03 FB 01 
128bb     07 09 0F 18 
128bf     22 29 25 1D 
128c3     22 24 19 F5 | 	byte	$0f, $03, $fb, $01, $07, $09, $0f, $18, $22, $29, $25, $1d, $22, $24, $19, $f5
128c7     CF CC CE CF 
128cb     D5 D0 D8 E4 
128cf     F2 00 0D 14 
128d3     15 0C 08 0E | 	byte	$cf, $cc, $ce, $cf, $d5, $d0, $d8, $e4, $f2, $00, $0d, $14, $15, $0c, $08, $0e
128d7     0D FF FD 03 
128db     08 09 11 1B 
128df     22 28 1D 1E 
128e3     22 21 10 EB | 	byte	$0d, $ff, $fd, $03, $08, $09, $11, $1b, $22, $28, $1d, $1e, $22, $21, $10, $eb
128e7     D3 D2 D3 D4 
128eb     D9 D5 DE E9 
128ef     F7 04 0F 14 
128f3     11 0A 09 0E | 	byte	$d3, $d2, $d3, $d4, $d9, $d5, $de, $e9, $f7, $04, $0f, $14, $11, $0a, $09, $0e
128f7     07 FD FE 04 
128fb     07 0B 13 1B 
128ff     22 22 19 1E 
12903     20 1C 07 E8 | 	byte	$07, $fd, $fe, $04, $07, $0b, $13, $1b, $22, $22, $19, $1e, $20, $1c, $07, $e8
12907     D6 D4 D5 D7 
1290b     DA D8 E1 ED 
1290f     F9 05 0E 13 
12913     0F 09 09 0B | 	byte	$d6, $d4, $d5, $d7, $da, $d8, $e1, $ed, $f9, $05, $0e, $13, $0f, $09, $09, $0b
12917     01 FC 00 05 
1291b     08 0C 14 1C 
1291f     22 1E 19 1D 
12923     1E 19 01 E7 | 	byte	$01, $fc, $00, $05, $08, $0c, $14, $1c, $22, $1e, $19, $1d, $1e, $19, $01, $e7
12927     D9 D9 D9 DB 
1292b     DC DB E6 F1 
1292f     FD 07 10 13 
12933     0E 09 09 06 | 	byte	$d9, $d9, $d9, $db, $dc, $db, $e6, $f1, $fd, $07, $10, $13, $0e, $09, $09, $06
12937     FE FC 02 05 
1293b     07 0C 14 1B 
1293f     1D 1B 18 1B 
12943     1B 14 FB E5 | 	byte	$fe, $fc, $02, $05, $07, $0c, $14, $1b, $1d, $1b, $18, $1b, $1b, $14, $fb, $e5
12947     DB DB DC DC 
1294b     DC DD E9 F4 
1294f     FF 08 0F 11 
12953     0D 09 08 02 | 	byte	$db, $db, $dc, $dc, $dc, $dd, $e9, $f4, $ff, $08, $0f, $11, $0d, $09, $08, $02
12957     FB FD 02 04 
1295b     07 0D 14 1A 
1295f     1B 18 18 1A 
12963     19 10 F8 E4 | 	byte	$fb, $fd, $02, $04, $07, $0d, $14, $1a, $1b, $18, $18, $1a, $19, $10, $f8, $e4
12967     E0 DF DF DE 
1296b     E0 E0 ED F7 
1296f     01 0A 10 10 
12973     0E 0B 07 FF | 	byte	$e0, $df, $df, $de, $e0, $e0, $ed, $f7, $01, $0a, $10, $10, $0e, $0b, $07, $ff
12977     FC FF 03 04 
1297b     07 0D 14 18 
1297f     19 15 17 18 
12983     17 0A F5 E5 | 	byte	$fc, $ff, $03, $04, $07, $0d, $14, $18, $19, $15, $17, $18, $17, $0a, $f5, $e5
12987     E2 E1 E0 DE 
1298b     E2 E3 EE F9 
1298f     01 09 0E 0F 
12993     0D 09 03 FD | 	byte	$e2, $e1, $e0, $de, $e2, $e3, $ee, $f9, $01, $09, $0e, $0f, $0d, $09, $03, $fd
12997     FC FF 02 04 
1299b     08 0D 14 16 
1299f     18 14 16 17 
129a3     14 07 F2 E8 | 	byte	$fc, $ff, $02, $04, $08, $0d, $14, $16, $18, $14, $16, $17, $14, $07, $f2, $e8
129a7     E5 E4 E2 E0 
129ab     E4 E7 F2 FB 
129af     03 09 0D 0E 
129b3     0D 09 01 FC | 	byte	$e5, $e4, $e2, $e0, $e4, $e7, $f2, $fb, $03, $09, $0d, $0e, $0d, $09, $01, $fc
129b7     FD 00 02 04 
129bb     09 0E 13 15 
129bf     14 13 14 15 
129c3     11 03 F1 EA | 	byte	$fd, $00, $02, $04, $09, $0e, $13, $15, $14, $13, $14, $15, $11, $03, $f1, $ea
129c7     E7 E5 E3 E2 
129cb     E6 EA F4 FC 
129cf     04 09 0C 0E 
129d3     0C 06 FF FC | 	byte	$e7, $e5, $e3, $e2, $e6, $ea, $f4, $fc, $04, $09, $0c, $0e, $0c, $06, $ff, $fc
129d7     FD 00 01 05 
129db     09 0F 10 14 
129df     11 12 14 14 
129e3     0E FF F1 EC | 	byte	$fd, $00, $01, $05, $09, $0f, $10, $14, $11, $12, $14, $14, $0e, $ff, $f1, $ec
129e7     E9 E7 E5 E4 
129eb     E8 ED F6 FD 
129ef     03 08 0B 0D 
129f3     0B 04 FD FD | 	byte	$e9, $e7, $e5, $e4, $e8, $ed, $f6, $fd, $03, $08, $0b, $0d, $0b, $04, $fd, $fd
129f7     FE 00 02 05 
129fb     09 0E 10 13 
129ff     10 12 13 12 
12a03     0A FD F2 EE | 	byte	$fe, $00, $02, $05, $09, $0e, $10, $13, $10, $12, $13, $12, $0a, $fd, $f2, $ee
12a07     EB E8 E6 E6 
12a0b     EA EF F8 FE 
12a0f     03 07 0B 0D 
12a13     09 02 FD FD | 	byte	$eb, $e8, $e6, $e6, $ea, $ef, $f8, $fe, $03, $07, $0b, $0d, $09, $02, $fd, $fd
12a17     FF 00 02 05 
12a1b     0A 0D 10 10 
12a1f     0F 11 11 10 
12a23     07 FB F2 EE | 	byte	$ff, $00, $02, $05, $0a, $0d, $10, $10, $0f, $11, $11, $10, $07, $fb, $f2, $ee
12a27     EB E9 E6 E8 
12a2b     EB F2 F9 FF 
12a2f     04 07 0B 0C 
12a33     08 00 FD FE | 	byte	$eb, $e9, $e6, $e8, $eb, $f2, $f9, $ff, $04, $07, $0b, $0c, $08, $00, $fd, $fe
12a37     FF 00 02 05 
12a3b     09 0C 0F 0E 
12a3f     0F 0F 10 0E 
12a43     05 FA F3 EF | 	byte	$ff, $00, $02, $05, $09, $0c, $0f, $0e, $0f, $0f, $10, $0e, $05, $fa, $f3, $ef
12a47     ED EA E7 EB 
12a4b     EE F4 FA 00 
12a4f     04 08 0B 0C 
12a53     06 00 FE FF | 	byte	$ed, $ea, $e7, $eb, $ee, $f4, $fa, $00, $04, $08, $0b, $0c, $06, $00, $fe, $ff
12a57     01 01 03 06 
12a5b     0A 0C 0F 0D 
12a5f     0E 0F 10 0C 
12a63     04 F9 F4 F0 | 	byte	$01, $01, $03, $06, $0a, $0c, $0f, $0d, $0e, $0f, $10, $0c, $04, $f9, $f4, $f0
12a67     EE EB E9 ED 
12a6b     EF F5 FB 00 
12a6f     04 08 0B 09 
12a73     04 FF FE FF | 	byte	$ee, $eb, $e9, $ed, $ef, $f5, $fb, $00, $04, $08, $0b, $09, $04, $ff, $fe, $ff
12a77     00 01 03 06 
12a7b     09 0C 0D 0C 
12a7f     0D 0E 0E 09 
12a83     01 FA F5 F1 | 	byte	$00, $01, $03, $06, $09, $0c, $0d, $0c, $0d, $0e, $0e, $09, $01, $fa, $f5, $f1
12a87     EE EB EB EE 
12a8b     F0 F6 FC 00 
12a8f     03 08 0A 08 
12a93     03 00 FF 01 | 	byte	$ee, $eb, $eb, $ee, $f0, $f6, $fc, $00, $03, $08, $0a, $08, $03, $00, $ff, $01
12a97     01 01 03 07 
12a9b     09 0C 0B 0C 
12a9f     0D 0D 0C 08 
12aa3     00 F9 F5 F2 | 	byte	$01, $01, $03, $07, $09, $0c, $0b, $0c, $0d, $0d, $0c, $08, $00, $f9, $f5, $f2
12aa7     EE ED ED F0 
12aab     F3 F8 FD 01 
12aaf     04 08 09 07 
12ab3     02 00 00 01 | 	byte	$ee, $ed, $ed, $f0, $f3, $f8, $fd, $01, $04, $08, $09, $07, $02, $00, $00, $01
12ab7     01 02 04 07 
12abb     08 0A 09 0A 
12abf     0B 0C 0A 05 
12ac3     FF F8 F4 F1 | 	byte	$01, $02, $04, $07, $08, $0a, $09, $0a, $0b, $0c, $0a, $05, $ff, $f8, $f4, $f1
12ac7     EF EE EF F1 
12acb     F3 F7 FC 00 
12acf     04 07 08 05 
12ad3     02 00 00 01 | 	byte	$ef, $ee, $ef, $f1, $f3, $f7, $fc, $00, $04, $07, $08, $05, $02, $00, $00, $01
12ad7     02 02 05 07 
12adb     09 09 0A 0B 
12adf     0B 0B 09 05 
12ae3     FE F9 F6 F2 | 	byte	$02, $02, $05, $07, $09, $09, $0a, $0b, $0b, $0b, $09, $05, $fe, $f9, $f6, $f2
12ae7     F0 EF F1 F1 
12aeb     F5 F9 FE 01 
12aef     05 07 07 04 
12af3     02 00 01 02 | 	byte	$f0, $ef, $f1, $f1, $f5, $f9, $fe, $01, $05, $07, $07, $04, $02, $00, $01, $02
12af7     02 03 05 06 
12afb     08 08 09 0A 
12aff     0A 0A 08 03 
12b03     FD F8 F5 F1 | 	byte	$02, $03, $05, $06, $08, $08, $09, $0a, $0a, $0a, $08, $03, $fd, $f8, $f5, $f1
12b07     F0 F0 F1 F2 
12b0b     F6 FA FE 01 
12b0f     05 06 05 04 
12b13     02 01 01 02 | 	byte	$f0, $f0, $f1, $f2, $f6, $fa, $fe, $01, $05, $06, $05, $04, $02, $01, $01, $02
12b17     02 03 05 06 
12b1b     07 07 09 0A 
12b1f     0A 09 07 02 
12b23     FD F9 F5 F3 | 	byte	$02, $03, $05, $06, $07, $07, $09, $0a, $0a, $09, $07, $02, $fd, $f9, $f5, $f3
12b27     F2 F2 F2 F4 
12b2b     F8 FB FF 02 
12b2f     06 06 05 04 
12b33     03 03 03 03 | 	byte	$f2, $f2, $f2, $f4, $f8, $fb, $ff, $02, $06, $06, $05, $04, $03, $03, $03, $03
12b37     03 04 05 06 
12b3b     06 08 09 09 
12b3f     09 08 06 01 
12b43     FC F8 F4 F4 | 	byte	$03, $04, $05, $06, $06, $08, $09, $09, $09, $08, $06, $01, $fc, $f8, $f4, $f4
12b47     F3 F2 F2 F4 
12b4b     F7 FB FE 02 
12b4f     04 05 04 04 
12b53     03 02 02 02 | 	byte	$f3, $f2, $f2, $f4, $f7, $fb, $fe, $02, $04, $05, $04, $04, $03, $02, $02, $02
12b57     03 04 04 05 
12b5b     06 07 08 08 
12b5f     08 08 05 00 
12b63     FB F7 F6 F5 | 	byte	$03, $04, $04, $05, $06, $07, $08, $08, $08, $08, $05, $00, $fb, $f7, $f6, $f5
12b67     F4 F3 F3 F5 
12b6b     F8 FB FF 03 
12b6f     05 05 04 04 
12b73     03 03 03 03 | 	byte	$f4, $f3, $f3, $f5, $f8, $fb, $ff, $03, $05, $05, $04, $04, $03, $03, $03, $03
12b77     03 04 04 05 
12b7b     05 07 07 08 
12b7f     07 06 03 FF 
12b83     FA F7 F6 F5 | 	byte	$03, $04, $04, $05, $05, $07, $07, $08, $07, $06, $03, $ff, $fa, $f7, $f6, $f5
12b87     F4 F4 F4 F6 
12b8b     F9 FC 00 03 
12b8f     04 04 04 04 
12b93     03 03 03 03 | 	byte	$f4, $f4, $f4, $f6, $f9, $fc, $00, $03, $04, $04, $04, $04, $03, $03, $03, $03
12b97     03 03 04 04 
12b9b     06 06 06 06 
12b9f     06 05 02 FE 
12ba3     FA F8 F7 F6 | 	byte	$03, $03, $04, $04, $06, $06, $06, $06, $06, $05, $02, $fe, $fa, $f8, $f7, $f6
12ba7     F5 F4 F5 F7 
12bab     FA FC 01 03 
12baf     04 04 04 04 
12bb3     04 03 03 03 | 	byte	$f5, $f4, $f5, $f7, $fa, $fc, $01, $03, $04, $04, $04, $04, $04, $03, $03, $03
12bb7     04 03 04 04 
12bbb     05 07 07 07 
12bbf     06 04 01 FC 
12bc3     FA F9 F7 F6 | 	byte	$04, $03, $04, $04, $05, $07, $07, $07, $06, $04, $01, $fc, $fa, $f9, $f7, $f6
12bc7     F5 F4 F6 F7 
12bcb     FA FD 01 03 
12bcf     03 04 04 04 
12bd3     04 04 03 04 | 	byte	$f5, $f4, $f6, $f7, $fa, $fd, $01, $03, $03, $04, $04, $04, $04, $04, $03, $04
12bd7     04 03 03 04 
12bdb     05 06 06 06 
12bdf     05 03 FE FB 
12be3     FA F9 F7 F6 | 	byte	$04, $03, $03, $04, $05, $06, $06, $06, $05, $03, $fe, $fb, $fa, $f9, $f7, $f6
12be7     F5 F4 F6 F8 
12beb     FB FE 02 03 
12bef     03 04 04 04 
12bf3     04 04 04 03 | 	byte	$f5, $f4, $f6, $f8, $fb, $fe, $02, $03, $03, $04, $04, $04, $04, $04, $04, $03
12bf7     03 03 03 04 
12bfb     04 05 05 05 
12bff     04 00 FD FC 
12c03     FB F9 F8 F7 | 	byte	$03, $03, $03, $04, $04, $05, $05, $05, $04, $00, $fd, $fc, $fb, $f9, $f8, $f7
12c07     F6 F6 F7 F9 
12c0b     FB 00 03 03 
12c0f     04 04 05 06 
12c13     05 05 04 04 | 	byte	$f6, $f6, $f7, $f9, $fb, $00, $03, $03, $04, $04, $05, $06, $05, $05, $04, $04
12c17     04 03 04 04 
12c1b     05 05 05 04 
12c1f     03 FF FD FC 
12c23     FB FA F9 F8 | 	byte	$04, $03, $04, $04, $05, $05, $05, $04, $03, $ff, $fd, $fc, $fb, $fa, $f9, $f8
12c27     F6 F6 F7 F9 
12c2b     FC 00 02 03 
12c2f     04 04 05 05 
12c33     05 04 04 04 | 	byte	$f6, $f6, $f7, $f9, $fc, $00, $02, $03, $04, $04, $05, $05, $05, $04, $04, $04
12c37     03 03 03 04 
12c3b     04 04 04 03 
12c3f     FF FD FD FC 
12c43     FB FA F9 F8 | 	byte	$03, $03, $03, $04, $04, $04, $04, $03, $ff, $fd, $fd, $fc, $fb, $fa, $f9, $f8
12c47     F7 F7 F8 F9 
12c4b     FC 01 02 03 
12c4f     04 04 05 05 
12c53     05 05 05 04 | 	byte	$f7, $f7, $f8, $f9, $fc, $01, $02, $03, $04, $04, $05, $05, $05, $05, $05, $04
12c57     03 04 04 04 
12c5b     04 04 03 01 
12c5f     FD FD FC FC 
12c63     FB FA FA F8 | 	byte	$03, $04, $04, $04, $04, $04, $03, $01, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $f8
12c67     F8 F8 F9 FA 
12c6b     FE 02 02 03 
12c6f     04 04 05 05 
12c73     05 05 04 03 | 	byte	$f8, $f8, $f9, $fa, $fe, $02, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03
12c77     03 03 04 04 
12c7b     03 02 01 FD 
12c7f     FC FC FC FB 
12c83     FA FA FA F9 | 	byte	$03, $03, $04, $04, $03, $02, $01, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $fa, $f9
12c87     F8 F9 FA FC 
12c8b     FF 01 02 02 
12c8f     03 04 05 05 
12c93     05 05 04 03 | 	byte	$f8, $f9, $fa, $fc, $ff, $01, $02, $02, $03, $04, $05, $05, $05, $05, $04, $03
12c97     03 04 05 04 
12c9b     04 03 FF FD 
12c9f     FD FC FC FB 
12ca3     FB FA FA F9 | 	byte	$03, $04, $05, $04, $04, $03, $ff, $fd, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $f9
12ca7     F9 FA FA FD 
12cab     01 02 03 03 
12caf     03 04 05 05 
12cb3     05 04 04 03 | 	byte	$f9, $fa, $fa, $fd, $01, $02, $03, $03, $03, $04, $05, $05, $05, $04, $04, $03
12cb7     04 04 04 03 
12cbb     03 00 FD FC 
12cbf     FC FC FB FB 
12cc3     FA FA FA F9 | 	byte	$04, $04, $04, $03, $03, $00, $fd, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa, $f9
12cc7     F9 FA FB FE 
12ccb     02 03 03 03 
12ccf     03 04 05 05 
12cd3     05 04 04 04 | 	byte	$f9, $fa, $fb, $fe, $02, $03, $03, $03, $03, $04, $05, $05, $05, $04, $04, $04
12cd7     04 04 04 03 
12cdb     02 FE FD FC 
12cdf     FC FC FC FB 
12ce3     FB FA FA FA | 	byte	$04, $04, $04, $03, $02, $fe, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa
12ce7     FA FB FC 00 
12ceb     03 03 04 04 
12cef     04 05 06 05 
12cf3     05 05 04 05 | 	byte	$fa, $fb, $fc, $00, $03, $03, $04, $04, $04, $05, $06, $05, $05, $05, $04, $05
12cf7     05 04 04 04 
12cfb     01 FD FD FD 
12cff     FC FC FB FA 
12d03     FA FA FA F9 | 	byte	$05, $04, $04, $04, $01, $fd, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fa, $f9
12d07     FA FB FD 00 
12d0b     03 03 03 04 
12d0f     04 04 05 05 
12d13     05 04 04 04 | 	byte	$fa, $fb, $fd, $00, $03, $03, $03, $04, $04, $04, $05, $05, $05, $04, $04, $04
12d17     04 04 04 02 
12d1b     FE FC FD FC 
12d1f     FC FC FB FB 
12d23     FB FA FA FA | 	byte	$04, $04, $04, $02, $fe, $fc, $fd, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa
12d27     FA FB FD 01 
12d2b     03 03 04 04 
12d2f     04 05 05 05 
12d33     05 04 04 05 | 	byte	$fa, $fb, $fd, $01, $03, $03, $04, $04, $04, $05, $05, $05, $05, $04, $04, $05
12d37     05 04 03 FF 
12d3b     FD FC FC FC 
12d3f     FC FC FB FB 
12d43     FB FB FA FA | 	byte	$05, $04, $03, $ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa
12d47     FB FC FF 03 
12d4b     04 04 04 05 
12d4f     05 05 05 05 
12d53     04 04 04 04 | 	byte	$fb, $fc, $ff, $03, $04, $04, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04
12d57     04 04 02 FE 
12d5b     FC FC FC FC 
12d5f     FB FB FB FA 
12d63     FA FA FA FA | 	byte	$04, $04, $02, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $fa, $fa
12d67     FC FD 01 03 
12d6b     04 04 04 04 
12d6f     04 05 05 05 
12d73     04 04 04 04 | 	byte	$fc, $fd, $01, $03, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $04, $04
12d77     04 03 00 FD 
12d7b     FD FC FC FC 
12d7f     FC FB FB FB 
12d83     FB FB FA FB | 	byte	$04, $03, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fa, $fb
12d87     FC FE 01 04 
12d8b     04 04 04 04 
12d8f     05 05 05 04 
12d93     04 05 05 04 | 	byte	$fc, $fe, $01, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $05, $05, $04
12d97     03 01 FE FC 
12d9b     FC FC FC FC 
12d9f     FB FB FB FB 
12da3     FA FA FA FB | 	byte	$03, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa, $fa, $fb
12da7     FC FE 02 04 
12dab     05 04 05 05 
12daf     05 05 05 04 
12db3     04 04 04 03 | 	byte	$fc, $fe, $02, $04, $05, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04, $03
12db7     02 FF FD FC 
12dbb     FC FC FC FB 
12dbf     FB FB FB FB 
12dc3     FB FB FB FC | 	byte	$02, $ff, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12dc7     FE 00 03 05 
12dcb     05 05 05 06 
12dcf     06 06 05 05 
12dd3     05 05 05 03 | 	byte	$fe, $00, $03, $05, $05, $05, $05, $06, $06, $06, $05, $05, $05, $05, $05, $03
12dd7     01 FE FD FC 
12ddb     FC FC FC FC 
12ddf     FB FB FB FB 
12de3     FB FB FB FC | 	byte	$01, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12de7     FE 01 03 05 
12deb     05 05 05 05 
12def     05 05 05 04 
12df3     04 04 03 01 | 	byte	$fe, $01, $03, $05, $05, $05, $05, $05, $05, $05, $05, $04, $04, $04, $03, $01
12df7     FF FD FC FC 
12dfb     FC FC FC FB 
12dff     FB FB FB FB 
12e03     FB FB FB FD | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fd
12e07     FF 01 04 06 
12e0b     05 06 05 06 
12e0f     06 06 05 05 
12e13     05 04 02 01 | 	byte	$ff, $01, $04, $06, $05, $06, $05, $06, $06, $06, $05, $05, $05, $04, $02, $01
12e17     FE FC FC FC 
12e1b     FC FC FC FB 
12e1f     FB FC FB FC 
12e23     FC FB FC FE | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fc, $fb, $fc, $fc, $fb, $fc, $fe
12e27     00 02 04 06 
12e2b     06 05 06 06 
12e2f     05 05 05 05 
12e33     04 02 01 00 | 	byte	$00, $02, $04, $06, $06, $05, $06, $06, $05, $05, $05, $05, $04, $02, $01, $00
12e37     FD FC FC FC 
12e3b     FC FB FB FB 
12e3f     FB FB FB FB 
12e43     FB FB FC FE | 	byte	$fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fe
12e47     00 02 04 06 
12e4b     06 06 05 05 
12e4f     05 06 05 05 
12e53     03 02 01 FF | 	byte	$00, $02, $04, $06, $06, $06, $05, $05, $05, $06, $05, $05, $03, $02, $01, $ff
12e57     FD FC FC FD 
12e5b     FD FC FC FC 
12e5f     FC FC FC FC 
12e63     FC FC FD FF | 	byte	$fd, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $ff
12e67     00 02 05 06 
12e6b     06 06 05 05 
12e6f     06 05 05 04 
12e73     02 01 00 FD | 	byte	$00, $02, $05, $06, $06, $06, $05, $05, $06, $05, $05, $04, $02, $01, $00, $fd
12e77     FC FC FC FC 
12e7b     FC          | 	byte	$fc[5]
12e7c     FB FB FC FB 
12e80     FB FB FB FB 
12e84     FB FD FF 00 
12e88     02 05 07 06 | 	byte	$fb, $fb, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fd, $ff, $00, $02, $05, $07, $06
12e8c     06 05 06 06 
12e90     06 05 03 01 
12e94     01 FF FC FB 
12e98     FC FC FC FB | 	byte	$06, $05, $06, $06, $06, $05, $03, $01, $01, $ff, $fc, $fb, $fc, $fc, $fc, $fb
12e9c     FB FB FC FC 
12ea0     FC FC FC FC 
12ea4     FC FE 00 01 
12ea8     03 06 07 07 | 	byte	$fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $01, $03, $06, $07, $07
12eac     07 07 07 07 
12eb0     06 04 03 02 
12eb4     01 FE FC FC 
12eb8     FC FC FC FC | 	byte	$07, $07, $07, $07, $06, $04, $03, $02, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fc
12ebc     FC FC FC FC 
12ec0     FC FC FC FC | 	byte	$fc[8]
12ec4     FD FE 00 01 
12ec8     03 06 07 07 
12ecc     06 06 06 06 
12ed0     05 03 01 01 | 	byte	$fd, $fe, $00, $01, $03, $06, $07, $07, $06, $06, $06, $06, $05, $03, $01, $01
12ed4     00 FD FB FC 
12ed8     FC FC FC FB 
12edc     FC FC FC FC 
12ee0     FC FC FC FC | 	byte	$00, $fd, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12ee4     FD 00 00 01 
12ee8     04 06 07 07 
12eec     06 07 07 06 
12ef0     04 02 02 01 | 	byte	$fd, $00, $00, $01, $04, $06, $07, $07, $06, $07, $07, $06, $04, $02, $02, $01
12ef4     FF FC FC FC 
12ef8     FC FC FC FC 
12efc     FC FC FC FC 
12f00     FC FC FC FC | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12f04     FE 00 01 01 
12f08     04 07 08 07 
12f0c     07 08 08 05 
12f10     03 01 02 00 | 	byte	$fe, $00, $01, $01, $04, $07, $08, $07, $07, $08, $08, $05, $03, $01, $02, $00
12f14     FD FB FB FC 
12f18     FC FC FC FB 
12f1c     FC FC FC FC 
12f20     FC FC FC FD | 	byte	$fd, $fb, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd
12f24     FE 00 01 02 
12f28     04 07 07 07 
12f2c     07 08 07 04 
12f30     02 02 02 FF | 	byte	$fe, $00, $01, $02, $04, $07, $07, $07, $07, $08, $07, $04, $02, $02, $02, $ff
12f34     FD FB FC FC 
12f38     FC FC FD FD 
12f3c     FD FD FD FC 
12f40     FD FD FD FD | 	byte	$fd, $fb, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd
12f44     FF 00 01 02 
12f48     05 08 07 07 
12f4c     08 08 06 03 
12f50     02 02 01 FE | 	byte	$ff, $00, $01, $02, $05, $08, $07, $07, $08, $08, $06, $03, $02, $02, $01, $fe
12f54     FC FB FC FC 
12f58     FC FC FC FC 
12f5c     FD FD FC FC 
12f60     FD FC FC FD | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fd, $fc, $fc, $fd
12f64     FF 00 01 02 
12f68     05 07 07 07 
12f6c     08 07 04 02 
12f70     02 02 00 FC | 	byte	$ff, $00, $01, $02, $05, $07, $07, $07, $08, $07, $04, $02, $02, $02, $00, $fc
12f74     FB FC FC FB 
12f78     FB FC FD FD 
12f7c     FD FD FC FD 
12f80     FD FD FD FE | 	byte	$fb, $fc, $fc, $fb, $fb, $fc, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe
12f84     00 01 01 03 
12f88     06 08 09 09 
12f8c     09 07 04 03 
12f90     03 02 FE FC | 	byte	$00, $01, $01, $03, $06, $08, $09, $09, $09, $07, $04, $03, $03, $02, $fe, $fc
12f94     FC FC FC FC 
12f98     FC          | 	byte	$fc[5]
12f99     FD FD FD FE 
12f9d     FE FD FD FD 
12fa1     FD FE FF 00 
12fa5     01 01 03 06 | 	byte	$fd, $fd, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01, $01, $03, $06
12fa9     07 08 09 08 
12fad     05 02 02 02 
12fb1     00 FD FB FB 
12fb5     FB FB FC FC | 	byte	$07, $08, $09, $08, $05, $02, $02, $02, $00, $fd, $fb, $fb, $fb, $fb, $fc, $fc
12fb9     FD FD FE FE 
12fbd     FE FD FD FD 
12fc1     FD FE FE 00 
12fc5     01 01 03 05 | 	byte	$fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $00, $01, $01, $03, $05
12fc9     08 09 09 07 
12fcd     04 02 02 02 
12fd1     FF FC FB FB 
12fd5     FC FC FC FD | 	byte	$08, $09, $09, $07, $04, $02, $02, $02, $ff, $fc, $fb, $fb, $fc, $fc, $fc, $fd
12fd9     FD FE FE FE 
12fdd     FE FD FD FD 
12fe1     FE FF FF 01 
12fe5     01 01 04 06 | 	byte	$fd, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $ff, $ff, $01, $01, $01, $04, $06
12fe9     09 0A 09 06 
12fed     03 02 02 00 
12ff1     FD FB FB FA 
12ff5     FB FC FD FE | 	byte	$09, $0a, $09, $06, $03, $02, $02, $00, $fd, $fb, $fb, $fa, $fb, $fc, $fd, $fe
12ff9     FE FD FE FE 
12ffd     FD FD FD FD 
13001     FD FF FF 01 
13005     01 02 04 07 | 	byte	$fe, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $ff, $ff, $01, $01, $02, $04, $07
13009     09 0A 08 05 
1300d     02 02 02 FF 
13011     FC FA FA FB 
13015     FC FD FE FE | 	byte	$09, $0a, $08, $05, $02, $02, $02, $ff, $fc, $fa, $fa, $fb, $fc, $fd, $fe, $fe
13019     FF FF FF FF 
1301d     FE FE FE FE 
13021     FE FF 00 01 
13025     01 02 04 07 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $00, $01, $01, $02, $04, $07
13029     0A 09 07 04 
1302d     02 02 01 FD 
13031     FB FA FB FB 
13035     FC FD FE FE | 	byte	$0a, $09, $07, $04, $02, $02, $01, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $fe
13039     FE FF FF FF 
1303d     FD FE FD FD 
13041     FE FE FF 00 
13045     01 02 04 08 | 	byte	$fe, $ff, $ff, $ff, $fd, $fe, $fd, $fd, $fe, $fe, $ff, $00, $01, $02, $04, $08
13049     0A 08 06 03 
1304d     02 01 FF FC 
13051     FA FA FA FC 
13055     FD FE FE FF | 	byte	$0a, $08, $06, $03, $02, $01, $ff, $fc, $fa, $fa, $fa, $fc, $fd, $fe, $fe, $ff
13059     FF FF FF FF 
1305d     FE FE FE FE 
13061     FF FF 01 01 
13065     02 02 05 0A | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $01, $01, $02, $02, $05, $0a
13069     0A 08 06 03 
1306d     03 01 FE FB 
13071     FA FB FB FD 
13075     FE FE FF 00 | 	byte	$0a, $08, $06, $03, $03, $01, $fe, $fb, $fa, $fb, $fb, $fd, $fe, $fe, $ff, $00
13079     00 00 00 00 
1307d     FE FF FE FE 
13081     FF FE 00 01 
13085     01 02 06 09 | 	byte	$00, $00, $00, $00, $fe, $ff, $fe, $fe, $ff, $fe, $00, $01, $01, $02, $06, $09
13089     09 07 04 02 
1308d     01 FE FB F9 
13091     F9 FA FC FD 
13095     FE FF FF 00 | 	byte	$09, $07, $04, $02, $01, $fe, $fb, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $ff, $00
13099     00 01 01 00 
1309d     FF FF FF FE 
130a1     FF FE 01 01 
130a5     01 03 07 09 | 	byte	$00, $01, $01, $00, $ff, $ff, $ff, $fe, $ff, $fe, $01, $01, $01, $03, $07, $09
130a9     08 06 03 02 
130ad     00 FD FA FA 
130b1     FA FB FD FE 
130b5     FF 00 00 01 | 	byte	$08, $06, $03, $02, $00, $fd, $fa, $fa, $fa, $fb, $fd, $fe, $ff, $00, $00, $01
130b9     01 01 01 00 
130bd     FF FF FF FE 
130c1     FE FE 00 01 
130c5     02 04 08 09 | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $01, $02, $04, $08, $09
130c9     08 05 02 02 
130cd     FE FA F9 F9 
130d1     FA FC FD FE 
130d5     FF 00 01 01 | 	byte	$08, $05, $02, $02, $fe, $fa, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $00, $01, $01
130d9     01 01 01 FF 
130dd     FE FE FE FE 
130e1     FD FF 00 01 
130e5     02 05 08 08 | 	byte	$01, $01, $01, $ff, $fe, $fe, $fe, $fe, $fd, $ff, $00, $01, $02, $05, $08, $08
130e9     06 03 02 FF 
130ed     FB F9 F8 FA 
130f1     FB FD FE FF 
130f5     01 01 01 02 | 	byte	$06, $03, $02, $ff, $fb, $f9, $f8, $fa, $fb, $fd, $fe, $ff, $01, $01, $01, $02
130f9     03 03 02 00 
130fd     FF FF FF FF 
13101     FD FF 01 01 
13105     02 06 08 08 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $ff, $fd, $ff, $01, $01, $02, $06, $08, $08
13109     05 02 00 FD 
1310d     FA F8 F9 FA 
13111     FC FE FF 00 
13115     01 02 02 02 | 	byte	$05, $02, $00, $fd, $fa, $f8, $f9, $fa, $fc, $fe, $ff, $00, $01, $02, $02, $02
13119     03 03 02 00 
1311d     FF FF FE FE 
13121     FD FF 01 01 
13125     02 06 07 07 | 	byte	$03, $03, $02, $00, $ff, $ff, $fe, $fe, $fd, $ff, $01, $01, $02, $06, $07, $07
13129     03 01 FE FA 
1312d     F8 F8 F9 FB 
13131     FD FE 00 01 
13135     02 03 03 03 | 	byte	$03, $01, $fe, $fa, $f8, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $03
13139     03 03 02 00 
1313d     FF FF FF FD 
13141     FD 00 02 01 
13145     04 07 08 06 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $fd, $fd, $00, $02, $01, $04, $07, $08, $06
13149     02 00 FC F9 
1314d     F8 F9 FB FD 
13151     FE 00 01 02 
13155     03 03 04 04 | 	byte	$02, $00, $fc, $f9, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $04, $04
13159     04 04 03 00 
1315d     00 FF FF FC 
13161     FD 00 01 01 
13165     03 06 06 03 | 	byte	$04, $04, $03, $00, $00, $ff, $ff, $fc, $fd, $00, $01, $01, $03, $06, $06, $03
13169     00 FD F9 F7 
1316d     F7 F9 FB FD 
13171     FF 00 02 03 
13175     04 04 04 05 | 	byte	$00, $fd, $f9, $f7, $f7, $f9, $fb, $fd, $ff, $00, $02, $03, $04, $04, $04, $05
13179     05 05 03 00 
1317d     00 FF FE FB 
13181     FE 00 01 01 
13185     03 05 05 00 | 	byte	$05, $05, $03, $00, $00, $ff, $fe, $fb, $fe, $00, $01, $01, $03, $05, $05, $00
13189     FE F9 F7 F7 
1318d     F8 FA FD FE 
13191     00 02 03 04 
13195     05 05 05 06 | 	byte	$fe, $f9, $f7, $f7, $f8, $fa, $fd, $fe, $00, $02, $03, $04, $05, $05, $05, $06
13199     06 05 03 00 
1319d     00 FF FD FB 
131a1     FE 00 00 01 
131a5     04 05 02 FF | 	byte	$06, $05, $03, $00, $00, $ff, $fd, $fb, $fe, $00, $00, $01, $04, $05, $02, $ff
131a9     FB F7 F6 F7 
131ad     F9 FB FE FF 
131b1     01 03 04 05 
131b5     06 06 06 06 | 	byte	$fb, $f7, $f6, $f7, $f9, $fb, $fe, $ff, $01, $03, $04, $05, $06, $06, $06, $06
131b9     06 05 02 00 
131bd     00 FE FB FB 
131c1     FE 00 FF 01 
131c5     04 04 FF FD | 	byte	$06, $05, $02, $00, $00, $fe, $fb, $fb, $fe, $00, $ff, $01, $04, $04, $ff, $fd
131c9     F8 F5 F6 F8 
131cd     FA FC FF 01 
131d1     03 04 06 06 
131d5     07 07 07 08 | 	byte	$f8, $f5, $f6, $f8, $fa, $fc, $ff, $01, $03, $04, $06, $06, $07, $07, $07, $08
131d9     07 06 02 01 
131dd     00 FF FA FD 
131e1     FF FF FE 00 
131e5     03 00 FC F9 | 	byte	$07, $06, $02, $01, $00, $ff, $fa, $fd, $ff, $ff, $fe, $00, $03, $00, $fc, $f9
131e9     F5 F5 F7 F9 
131ed     FB FD 00 02 
131f1     04 06 07 08 
131f5     08 08 08 08 | 	byte	$f5, $f5, $f7, $f9, $fb, $fd, $00, $02, $04, $06, $07, $08, $08, $08, $08, $08
131f9     07 06 01 00 
131fd     FF FD F9 FC 
13201     FE FD FD FF 
13205     01 FC F9 F5 | 	byte	$07, $06, $01, $00, $ff, $fd, $f9, $fc, $fe, $fd, $fd, $ff, $01, $fc, $f9, $f5
13209     F4 F5 F7 FA 
1320d     FC FF 01 04 
13211     05 07 08 09 
13215     09 09 09 09 | 	byte	$f4, $f5, $f7, $fa, $fc, $ff, $01, $04, $05, $07, $08, $09, $09, $09, $09, $09
13219     08 06 01 00 
1321d     FF FB FA FD 
13221     FE FC FE 01 
13225     FF FA F7 F4 | 	byte	$08, $06, $01, $00, $ff, $fb, $fa, $fd, $fe, $fc, $fe, $01, $ff, $fa, $f7, $f4
13229     F5 F7 F9 FC 
1322d     FF 01 03 05 
13231     07 08 09 0A 
13235     09 09 09 09 | 	byte	$f5, $f7, $f9, $fc, $ff, $01, $03, $05, $07, $08, $09, $0a, $09, $09, $09, $09
13239     08 05 01 00 
1323d     FF FA FA FD 
13241     FC FB FD FF 
13245     FB F8 F5 F4 | 	byte	$08, $05, $01, $00, $ff, $fa, $fa, $fd, $fc, $fb, $fd, $ff, $fb, $f8, $f5, $f4
13249     F5 F8 FA FD 
1324d     FF 01 04 05 
13251     08 09 09 09 
13255     09 09 09 09 | 	byte	$f5, $f8, $fa, $fd, $ff, $01, $04, $05, $08, $09, $09, $09, $09, $09, $09, $09
13259     07 03 01 00 
1325d     FE F8 FB FD 
13261     FA FB FD FC 
13265     F8 F6 F4 F5 | 	byte	$07, $03, $01, $00, $fe, $f8, $fb, $fd, $fa, $fb, $fd, $fc, $f8, $f6, $f4, $f5
13269     F7 F9 FC FE 
1326d     01 03 06 07 
13271     08 09 0A 0A 
13275     0A 09 09 08 | 	byte	$f7, $f9, $fc, $fe, $01, $03, $06, $07, $08, $09, $0a, $0a, $0a, $09, $09, $08
13279     07 02 00 FF 
1327d     FD F9 FC FB 
13281     F9 FB FD F9 
13285     F7 F5 F4 F6 | 	byte	$07, $02, $00, $ff, $fd, $f9, $fc, $fb, $f9, $fb, $fd, $f9, $f7, $f5, $f4, $f6
13289     F8 FA FD 00 
1328d     02 04 06 08 
13291     09 0A 0A 0A 
13295     0A 09 09 07 | 	byte	$f8, $fa, $fd, $00, $02, $04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $09, $07
13299     05 00 FF FF 
1329d     FA F9 FC F8 
132a1     F8 FA FB F7 
132a5     F6 F4 F5 F7 | 	byte	$05, $00, $ff, $ff, $fa, $f9, $fc, $f8, $f8, $fa, $fb, $f7, $f6, $f4, $f5, $f7
132a9     F9 FC FE 01 
132ad     03 05 07 09 
132b1     0A 0A 0A 0B 
132b5     0A 0A 09 08 | 	byte	$f9, $fc, $fe, $01, $03, $05, $07, $09, $0a, $0a, $0a, $0b, $0a, $0a, $09, $08
132b9     05 00 00 FF 
132bd     FA FB FB F7 
132c1     F8 FB F7 F6 
132c5     F5 F4 F6 F8 | 	byte	$05, $00, $00, $ff, $fa, $fb, $fb, $f7, $f8, $fb, $f7, $f6, $f5, $f4, $f6, $f8
132c9     FA FD FF 02 
132cd     04 06 08 09 
132d1     0B 0B 0B 0A 
132d5     0A 09 08 07 | 	byte	$fa, $fd, $ff, $02, $04, $06, $08, $09, $0b, $0b, $0b, $0a, $0a, $09, $08, $07
132d9     03 00 FF FE 
132dd     F9 FA F8 F5 
132e1     F8 F8 F5 F5 
132e5     F4 F5 F7 F9 | 	byte	$03, $00, $ff, $fe, $f9, $fa, $f8, $f5, $f8, $f8, $f5, $f5, $f4, $f5, $f7, $f9
132e9     FC FE 01 03 
132ed     05 07 09 0A 
132f1     0B 0B 0B 0B 
132f5     0A 09 08 06 | 	byte	$fc, $fe, $01, $03, $05, $07, $09, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $06
132f9     02 00 FF FD 
132fd     F9 F9 F6 F6 
13301     F8 F6 F3 F5 
13305     F5 F7 F9 FC | 	byte	$02, $00, $ff, $fd, $f9, $f9, $f6, $f6, $f8, $f6, $f3, $f5, $f5, $f7, $f9, $fc
13309     FE 00 03 05 
1330d     08 09 0A 0B 
13311     0C 0C 0C 0B 
13315     0A 0A 08 05 | 	byte	$fe, $00, $03, $05, $08, $09, $0a, $0b, $0c, $0c, $0c, $0b, $0a, $0a, $08, $05
13319     00 00 00 FC 
1331d     F8 F5 F4 F5 
13321     F6 F2 F3 F4 
13325     F5 F7 FA FC | 	byte	$00, $00, $00, $fc, $f8, $f5, $f4, $f5, $f6, $f2, $f3, $f4, $f5, $f7, $fa, $fc
13329     FF 01 03 05 
1332d     08 09 0B 0C 
13331     0C 0C 0B 0B 
13335     0A 09 07 03 | 	byte	$ff, $01, $03, $05, $08, $09, $0b, $0c, $0c, $0c, $0b, $0b, $0a, $09, $07, $03
13339     00 00 FF FA 
1333d     F5 F3 F4 F5 
13341     F3 F0 F3 F5 
13345     F6 F9 FB FE | 	byte	$00, $00, $ff, $fa, $f5, $f3, $f4, $f5, $f3, $f0, $f3, $f5, $f6, $f9, $fb, $fe
13349     01 03 05 07 
1334d     09 0B 0C 0C 
13351     0D 0C 0C 0A 
13355     0A 08 07 01 | 	byte	$01, $03, $05, $07, $09, $0b, $0c, $0c, $0d, $0c, $0c, $0a, $0a, $08, $07, $01
13359     00 00 FF F8 
1335d     F2 F2 F4 F4 
13361     F0 F0 F3 F6 
13365     F8 FA FD FF | 	byte	$00, $00, $ff, $f8, $f2, $f2, $f4, $f4, $f0, $f0, $f3, $f6, $f8, $fa, $fd, $ff
13369     02 04 06 08 
1336d     0A 0B 0C 0D 
13371     0D 0C 0B 0A 
13375     0A 08 04 00 | 	byte	$02, $04, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $0a, $0a, $08, $04, $00
13379     FF 00 FD F4 
1337d     F0 F2 F3 F1 
13381     ED F1 F5 F7 
13385     F9 FC FE 01 | 	byte	$ff, $00, $fd, $f4, $f0, $f2, $f3, $f1, $ed, $f1, $f5, $f7, $f9, $fc, $fe, $01
13389     03 05 07 09 
1338d     0B 0C 0D 0D 
13391     0D 0D 0B 0B 
13395     0A 08 03 01 | 	byte	$03, $05, $07, $09, $0b, $0c, $0d, $0d, $0d, $0d, $0b, $0b, $0a, $08, $03, $01
13399     01 00 FA F0 
1339d     F1 F3 F2 EE 
133a1     EB F1 F6 F7 
133a5     FA FE 00 02 | 	byte	$01, $00, $fa, $f0, $f1, $f3, $f2, $ee, $eb, $f1, $f6, $f7, $fa, $fe, $00, $02
133a9     05 06 09 0A 
133ad     0C 0D 0D 0E 
133b1     0D 0C 0B 0A 
133b5     09 07 01 00 | 	byte	$05, $06, $09, $0a, $0c, $0d, $0d, $0e, $0d, $0c, $0b, $0a, $09, $07, $01, $00
133b9     00 FD F6 EE 
133bd     F0 F3 EF EA 
133c1     EB F2 F6 F8 
133c5     FC FF 01 04 | 	byte	$00, $fd, $f6, $ee, $f0, $f3, $ef, $ea, $eb, $f2, $f6, $f8, $fc, $ff, $01, $04
133c9     06 08 0A 0B 
133cd     0C 0D 0E 0E 
133d1     0D 0C 0B 0A 
133d5     08 05 01 01 | 	byte	$06, $08, $0a, $0b, $0c, $0d, $0e, $0e, $0d, $0c, $0b, $0a, $08, $05, $01, $01
133d9     FF FA F1 EE 
133dd     F2 F2 ED E8 
133e1     EC F3 F7 FA 
133e5     FF 01 04 06 | 	byte	$ff, $fa, $f1, $ee, $f2, $f2, $ed, $e8, $ec, $f3, $f7, $fa, $ff, $01, $04, $06
133e9     08 0A 0C 0D 
133ed     0E 0F 0F 0F 
133f1     0E 0D 0B 0A 
133f5     08 03 01 00 | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0e, $0d, $0b, $0a, $08, $03, $01, $00
133f9     FC F6 EF EF 
133fd     F2 EF E9 E6 
13401     ED F3 F8 FC 
13405     FF 02 04 07 | 	byte	$fc, $f6, $ef, $ef, $f2, $ef, $e9, $e6, $ed, $f3, $f8, $fc, $ff, $02, $04, $07
13409     08 0A 0C 0D 
1340d     0E 0F 0F 0E 
13411     0D 0C 0B 09 
13415     07 03 01 FF | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0e, $0d, $0c, $0b, $09, $07, $03, $01, $ff
13419     F9 F2 EF F0 
1341d     F1 ED E5 E6 
13421     EE F5 FA FE 
13425     01 04 06 08 | 	byte	$f9, $f2, $ef, $f0, $f1, $ed, $e5, $e6, $ee, $f5, $fa, $fe, $01, $04, $06, $08
13429     0A 0C 0D 0E 
1342d     0F 10 10 0F 
13431     0E 0C 0B 09 
13435     05 02 00 FB | 	byte	$0a, $0c, $0d, $0e, $0f, $10, $10, $0f, $0e, $0c, $0b, $09, $05, $02, $00, $fb
13439     F5 F2 EF F1 
1343d     F0 E9 E3 E7 
13441     EF F6 FC 00 
13445     03 05 08 09 | 	byte	$f5, $f2, $ef, $f1, $f0, $e9, $e3, $e7, $ef, $f6, $fc, $00, $03, $05, $08, $09
13449     0C 0D 0E 0F 
1344d     0F 10 0F 0E 
13451     0D 0B 0A 09 
13455     04 01 FD F8 | 	byte	$0c, $0d, $0e, $0f, $0f, $10, $0f, $0e, $0d, $0b, $0a, $09, $04, $01, $fd, $f8
13459     F1 F1 F0 F0 
1345d     ED E5 E1 E7 
13461     F0 F8 FE 02 
13465     05 07 09 0B | 	byte	$f1, $f1, $f0, $f0, $ed, $e5, $e1, $e7, $f0, $f8, $fe, $02, $05, $07, $09, $0b
13469     0C 0E 0F 10 
1346d     10 10 10 0F 
13471     0E 0C 0A 08 
13475     03 00 FC F4 | 	byte	$0c, $0e, $0f, $10, $10, $10, $10, $0f, $0e, $0c, $0a, $08, $03, $00, $fc, $f4
13479     F2 F3 F0 EF 
1347d     EA E2 E0 E8 
13481     F1 F9 00 04 
13485     06 09 0A 0C | 	byte	$f2, $f3, $f0, $ef, $ea, $e2, $e0, $e8, $f1, $f9, $00, $04, $06, $09, $0a, $0c
13489     0D 0F 10 10 
1348d     10 11 10 0F 
13491     0D 0B 0A 06 
13495     01 FD F8 F1 | 	byte	$0d, $0f, $10, $10, $10, $11, $10, $0f, $0d, $0b, $0a, $06, $01, $fd, $f8, $f1
13499     F2 F3 F0 ED 
1349d     E6 DE DF E9 
134a1     F2 FC 02 05 
134a5     08 0A 0C 0D | 	byte	$f2, $f3, $f0, $ed, $e6, $de, $df, $e9, $f2, $fc, $02, $05, $08, $0a, $0c, $0d
134a9     0F 10 10 11 
134ad     11 11 10 0F 
134b1     0D 0C 0A 05 
134b5     FF FB F4 F1 | 	byte	$0f, $10, $10, $11, $11, $11, $10, $0f, $0d, $0c, $0a, $05, $ff, $fb, $f4, $f1
134b9     F3 F3 EF EB 
134bd     E3 DC E0 EA 
134c1     F4 FF 05 08 
134c5     0A 0C 0E 10 | 	byte	$f3, $f3, $ef, $eb, $e3, $dc, $e0, $ea, $f4, $ff, $05, $08, $0a, $0c, $0e, $10
134c9     11 12 12 12 
134cd     12 12 11 10 
134d1     0E 0C 0A 03 
134d5     FD F8 F1 F1 | 	byte	$11, $12, $12, $12, $12, $12, $11, $10, $0e, $0c, $0a, $03, $fd, $f8, $f1, $f1
134d9     F3 F3 ED E7 
134dd     E0 DA E1 EB 
134e1     F7 00 07 09 
134e5     0B 0D 0E 10 | 	byte	$f3, $f3, $ed, $e7, $e0, $da, $e1, $eb, $f7, $00, $07, $09, $0b, $0d, $0e, $10
134e9     11 12 12 12 
134ed     12 12 11 0F 
134f1     0D 0C 07 01 
134f5     FB F5 F1 F2 | 	byte	$11, $12, $12, $12, $12, $12, $11, $0f, $0d, $0c, $07, $01, $fb, $f5, $f1, $f2
134f9     F4 F2 EA E3 
134fd     DB D9 E1 ED 
13501     F9 03 09 0B 
13505     0D 0F 10 11 | 	byte	$f4, $f2, $ea, $e3, $db, $d9, $e1, $ed, $f9, $03, $09, $0b, $0d, $0f, $10, $11
13509     13 13 13 13 
1350d     13 13       | 	byte	$13[6]
1350f     11 0F 0D 0B 
13513     05 FE F8 F2 
13517     F1 F2 F4 F0 
1351b     E7 DF D9 DA | 	byte	$11, $0f, $0d, $0b, $05, $fe, $f8, $f2, $f1, $f2, $f4, $f0, $e7, $df, $d9, $da
1351f     E3 F0 FC 06 
13523     0B 0D 0E 10 
13527     12 13 14 14 
1352b     14 14 13 12 | 	byte	$e3, $f0, $fc, $06, $0b, $0d, $0e, $10, $12, $13, $14, $14, $14, $14, $13, $12
1352f     11 0F 0D 09 
13533     02 FB F6 F1 
13537     F0 F1 F2 EC 
1353b     E2 DB D6 DA | 	byte	$11, $0f, $0d, $09, $02, $fb, $f6, $f1, $f0, $f1, $f2, $ec, $e2, $db, $d6, $da
1353f     E5 F3 FF 09 
13543     0E 0F 10 12 
13547     13 14 14 15 
1354b     15 14 14 13 | 	byte	$e5, $f3, $ff, $09, $0e, $0f, $10, $12, $13, $14, $14, $15, $15, $14, $14, $13
1354f     11 0F 0D 08 
13553     FF F9 F3 F1 
13557     F1 F2 F1 E9 
1355b     DE D8 D6 DD | 	byte	$11, $0f, $0d, $08, $ff, $f9, $f3, $f1, $f1, $f2, $f1, $e9, $de, $d8, $d6, $dd
1355f     E8 F6 02 0B 
13563     0F 10 12 13 
13567     14 15 15 16 
1356b     15 15 14 13 | 	byte	$e8, $f6, $02, $0b, $0f, $10, $12, $13, $14, $15, $15, $16, $15, $15, $14, $13
1356f     11 0F 0B 06 
13573     FC F6 F1 F0 
13577     F0 F1 ED E3 
1357b     D9 D5 D6 DE | 	byte	$11, $0f, $0b, $06, $fc, $f6, $f1, $f0, $f0, $f1, $ed, $e3, $d9, $d5, $d6, $de
1357f     EA F8 05 0D 
13583     11 12 14 15 
13587     16 16 16 16 
1358b     16 15 14 13 | 	byte	$ea, $f8, $05, $0d, $11, $12, $14, $15, $16, $16, $16, $16, $16, $15, $14, $13
1358f     11 0F 09 02 
13593     F9 F3 F1 EF 
13597     F0 EE E8 DF 
1359b     D7 D4 D9 E2 | 	byte	$11, $0f, $09, $02, $f9, $f3, $f1, $ef, $f0, $ee, $e8, $df, $d7, $d4, $d9, $e2
1359f     ED FC 09 10 
135a3     13 15 16 17 
135a7     18 18 18 18 
135ab     18 16 15 14 | 	byte	$ed, $fc, $09, $10, $13, $15, $16, $17, $18, $18, $18, $18, $18, $16, $15, $14
135af     12 0D 07 FE 
135b3     F8 F2 F0 EF 
135b7     EE EA E4 DA 
135bb     D4 D4 DA E4 | 	byte	$12, $0d, $07, $fe, $f8, $f2, $f0, $ef, $ee, $ea, $e4, $da, $d4, $d4, $da, $e4
135bf     F2 FF 0C 13 
135c3     15 16 17 18 
135c7     19 19 19 18 
135cb     17 16 15 14 | 	byte	$f2, $ff, $0c, $13, $15, $16, $17, $18, $19, $19, $19, $18, $17, $16, $15, $14
135cf     11 0B 04 FC 
135d3     F5 F1 EF EE 
135d7     EB E6 DF D6 
135db     D2 D5 DC E6 | 	byte	$11, $0b, $04, $fc, $f5, $f1, $ef, $ee, $eb, $e6, $df, $d6, $d2, $d5, $dc, $e6
135df     F4 03 0F 15 
135e3     17 18 19 1A 
135e7     1B 1A 1A 19 
135eb     19 17 16 14 | 	byte	$f4, $03, $0f, $15, $17, $18, $19, $1a, $1b, $1a, $1a, $19, $19, $17, $16, $14
135ef     0F 08 01 F9 
135f3     F3 F0 EE EC 
135f7     E7 E1 DA D4 
135fb     D2 D7 DF EB | 	byte	$0f, $08, $01, $f9, $f3, $f0, $ee, $ec, $e7, $e1, $da, $d4, $d2, $d7, $df, $eb
135ff     F8 07 12 17 
13603     19 1A 1B 1B 
13607     1C 1C 1B 1A 
1360b     18 17 16 12 | 	byte	$f8, $07, $12, $17, $19, $1a, $1b, $1b, $1c, $1c, $1b, $1a, $18, $17, $16, $12
1360f     0D 05 FE F6 
13613     F1 EF EC E7 
13617     E0 DB D6 D1 
1361b     D3 D9 E1 EF | 	byte	$0d, $05, $fe, $f6, $f1, $ef, $ec, $e7, $e0, $db, $d6, $d1, $d3, $d9, $e1, $ef
1361f     FD 0A 15 1A 
13623     1B 1C 1D 1D 
13627     1D 1D 1C 1B 
1362b     19 18 16 12 | 	byte	$fd, $0a, $15, $1a, $1b, $1c, $1d, $1d, $1d, $1d, $1c, $1b, $19, $18, $16, $12
1362f     0B 03 FD F5 
13633     F0 ED E9 E3 
13637     DB D7 D3 D1 
1363b     D4 DC E5 F2 | 	byte	$0b, $03, $fd, $f5, $f0, $ed, $e9, $e3, $db, $d7, $d3, $d1, $d4, $dc, $e5, $f2
1363f     02 0E 18 1D 
13643     1D 1E 1E 1F 
13647     1F 1E 1D 1B 
1364b     1A 18 15 10 | 	byte	$02, $0e, $18, $1d, $1d, $1e, $1e, $1f, $1f, $1e, $1d, $1b, $1a, $18, $15, $10
1364f     08 01 F9 F2 
13653     EE EA E4 DB 
13657     D6 D3 D1 D1 
1365b     D7 DE E8 F7 | 	byte	$08, $01, $f9, $f2, $ee, $ea, $e4, $db, $d6, $d3, $d1, $d1, $d7, $de, $e8, $f7
1365f     06 13 1B 1E 
13663     1E 1F 20 1F 
13667     1F 1E 1D 1B 
1366b     19 18 13 0D | 	byte	$06, $13, $1b, $1e, $1e, $1f, $20, $1f, $1f, $1e, $1d, $1b, $19, $18, $13, $0d
1366f     05 FE F7 F0 
13673     ED E7 DE D7 
13677     D3 D2 D2 D4 
1367b     DB E3 ED FC | 	byte	$05, $fe, $f7, $f0, $ed, $e7, $de, $d7, $d3, $d2, $d2, $d4, $db, $e3, $ed, $fc
1367f     0C 16 1D 1F 
13683     20 21 21 21 
13687     20 1F 1D 1C 
1368b     1A 17 12 0A | 	byte	$0c, $16, $1d, $1f, $20, $21, $21, $21, $20, $1f, $1d, $1c, $1a, $17, $12, $0a
1368f     03 FD F7 EF 
13693     EB E4 DA D3 
13697     D1 D3 D3 D7 
1369b     DE E6 F2 00 | 	byte	$03, $fd, $f7, $ef, $eb, $e4, $da, $d3, $d1, $d3, $d3, $d7, $de, $e6, $f2, $00
1369f     0E 19 1E 1F 
136a3     20 20 20 20 
136a7     1F 1E 1C 1A 
136ab     19 16 0F 07 | 	byte	$0e, $19, $1e, $1f, $20, $20, $20, $20, $1f, $1e, $1c, $1a, $19, $16, $0f, $07
136af     00 FB F4 ED 
136b3     E8 DE D6 D1 
136b7     D1 D4 D4 DB 
136bb     E2 EB F6 05 | 	byte	$00, $fb, $f4, $ed, $e8, $de, $d6, $d1, $d1, $d4, $d4, $db, $e2, $eb, $f6, $05
136bf     11 1B 1F 20 
136c3     20 20 21 20 
136c7     1F 1E 1C 1B 
136cb     18 13 0C 04 | 	byte	$11, $1b, $1f, $20, $20, $20, $21, $20, $1f, $1e, $1c, $1b, $18, $13, $0c, $04
136cf     FE FA F1 EB 
136d3     E4 D9 D2 D0 
136d7     D2 D4 D8 DF 
136db     E6 EF FB 0A | 	byte	$fe, $fa, $f1, $eb, $e4, $d9, $d2, $d0, $d2, $d4, $d8, $df, $e6, $ef, $fb, $0a
136df     14 1D 20 20 
136e3     21 21 21 20 
136e7     1F 1E 1C 1A 
136eb     16 10 09 01 | 	byte	$14, $1d, $20, $20, $21, $21, $21, $20, $1f, $1e, $1c, $1a, $16, $10, $09, $01
136ef     FD F7 EF E8 
136f3     DE D5 CF CF 
136f7     D3 D4 DA E2 
136fb     E9 F3 00 0D | 	byte	$fd, $f7, $ef, $e8, $de, $d5, $cf, $cf, $d3, $d4, $da, $e2, $e9, $f3, $00, $0d
136ff     18 1E 21 21 
13703     21 21 20 1F 
13707     1E 1D 1B 19 
1370b     15 0E 06 00 | 	byte	$18, $1e, $21, $21, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $15, $0e, $06, $00
1370f     FC F6 EC E4 
13713     DA D2 CF D2 
13717     D5 D7 DE E6 
1371b     EE F8 05 10 | 	byte	$fc, $f6, $ec, $e4, $da, $d2, $cf, $d2, $d5, $d7, $de, $e6, $ee, $f8, $05, $10
1371f     1A 20 21 21 
13723     21 21 20 1F 
13727     1D 1C 1B 18 
1372b     12 0B 03 FF | 	byte	$1a, $20, $21, $21, $21, $21, $20, $1f, $1d, $1c, $1b, $18, $12, $0b, $03, $ff
1372f     FA F3 E7 DE 
13733     D5 D0 CF D3 
13737     D5 D9 E2 E9 
1373b     F1 FD 08 15 | 	byte	$fa, $f3, $e7, $de, $d5, $d0, $cf, $d3, $d5, $d9, $e2, $e9, $f1, $fd, $08, $15
1373f     1D 21 21 21 
13743     21 20 20 1E 
13747     1D 1B 19 15 
1374b     0F 08 01 FC | 	byte	$1d, $21, $21, $21, $21, $20, $20, $1e, $1d, $1b, $19, $15, $0f, $08, $01, $fc
1374f     F8 EE E3 D9 
13753     D2 CF D1 D5 
13757     D7 DE E6 ED 
1375b     F5 01 0E 18 | 	byte	$f8, $ee, $e3, $d9, $d2, $cf, $d1, $d5, $d7, $de, $e6, $ed, $f5, $01, $0e, $18
1375f     1F 22 21 22 
13763     21 21 20 1F 
13767     1E 1C 19 14 
1376b     0D 05 00 FB | 	byte	$1f, $22, $21, $22, $21, $21, $20, $1f, $1e, $1c, $19, $14, $0d, $05, $00, $fb
1376f     F6 EA DE D6 
13773     D1 D0 D3 D5 
13777     D9 E2 E9 F0 
1377b     FA 05 11 1B | 	byte	$f6, $ea, $de, $d6, $d1, $d0, $d3, $d5, $d9, $e2, $e9, $f0, $fa, $05, $11, $1b
1377f     1F 21 21 21 
13783     20 20 1F 1E 
13787     1C 1A 16 11 
1378b     09 03 FD FA | 	byte	$1f, $21, $21, $21, $20, $20, $1f, $1e, $1c, $1a, $16, $11, $09, $03, $fd, $fa
1378f     F1 E5 D9 D3 
13793     D1 D3 D5 D7 
13797     DD E5 ED F4 
1379b     FE 0A 14 1D | 	byte	$f1, $e5, $d9, $d3, $d1, $d3, $d5, $d7, $dd, $e5, $ed, $f4, $fe, $0a, $14, $1d
1379f     21 21 21 20 
137a3     20 1F 1E 1D 
137a7     1C 19 14 0D 
137ab     06 01 FD F6 | 	byte	$21, $21, $21, $20, $20, $1f, $1e, $1d, $1c, $19, $14, $0d, $06, $01, $fd, $f6
137af     EC DF D6 D3 
137b3     D3 D4 D6 D9 
137b7     E0 E9 F0 F8 
137bb     03 0D 18 1E | 	byte	$ec, $df, $d6, $d3, $d3, $d4, $d6, $d9, $e0, $e9, $f0, $f8, $03, $0d, $18, $1e
137bf     21 21 21 20 
137c3     1F 1F 1E 1C 
137c7     1A 17 10 0A 
137cb     04 FF FA F2 | 	byte	$21, $21, $21, $20, $1f, $1f, $1e, $1c, $1a, $17, $10, $0a, $04, $ff, $fa, $f2
137cf     E5 DA D4 D4 
137d3     D5 D5 D7 DB 
137d7     E3 EC F3 FB 
137db     06 11 1A 20 | 	byte	$e5, $da, $d4, $d4, $d5, $d5, $d7, $db, $e3, $ec, $f3, $fb, $06, $11, $1a, $20
137df     22 21 21 20 
137e3     1F 1E 1D 1B 
137e7     19 14 0E 07 
137eb     02 FD F7 EC | 	byte	$22, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $14, $0e, $07, $02, $fd, $f7, $ec
137ef     E1 D8 D5 D6 
137f3     D7 D7 DB DF 
137f7     E8 F0 F6 00 
137fb     0A 14 1C 20 | 	byte	$e1, $d8, $d5, $d6, $d7, $d7, $db, $df, $e8, $f0, $f6, $00, $0a, $14, $1c, $20
137ff     21 20 20 1F 
13803     1E 1D 1C 1A 
13807     16 11 0B 05 
1380b     00 FB F2 E7 | 	byte	$21, $20, $20, $1f, $1e, $1d, $1c, $1a, $16, $11, $0b, $05, $00, $fb, $f2, $e7
1380f     DE D7 D6 D7 
13813     D7 D8 DC E2 
13817     EA F3 F9 03 
1381b     0D 17 1E 21 | 	byte	$de, $d7, $d6, $d7, $d7, $d8, $dc, $e2, $ea, $f3, $f9, $03, $0d, $17, $1e, $21
1381f     21 20 1F 1E 
13823     1E 1C 1B 18 
13827     13 0D 07 03 
1382b     FE F7 ED E2 | 	byte	$21, $20, $1f, $1e, $1e, $1c, $1b, $18, $13, $0d, $07, $03, $fe, $f7, $ed, $e2
1382f     DB D7 D9 D9 
13833     D8 DB DF E5 
13837     EE F6 FD 07 
1383b     11 1A 1F 22 | 	byte	$db, $d7, $d9, $d9, $d8, $db, $df, $e5, $ee, $f6, $fd, $07, $11, $1a, $1f, $22
1383f     21 20 1F 1F 
13843     1E 1C 1B 17 
13847     11 0C 06 02 
1384b     FC F3 E9 E0 | 	byte	$21, $20, $1f, $1f, $1e, $1c, $1b, $17, $11, $0c, $06, $02, $fc, $f3, $e9, $e0
1384f     DA D9 DA DA 
13853     DA DE E2 E9 
13857     F1 F8 00 09 
1385b     13 1B 20 21 | 	byte	$da, $d9, $da, $da, $da, $de, $e2, $e9, $f1, $f8, $00, $09, $13, $1b, $20, $21
1385f     20 1F 1F 1D 
13863     1D 1B 18 13 
13867     0E 09 04 FF 
1386b     F9 EF E5 DE | 	byte	$20, $1f, $1f, $1d, $1d, $1b, $18, $13, $0e, $09, $04, $ff, $f9, $ef, $e5, $de
1386f     DB DB DC DB 
13873     DD E1 E5 EC 
13877     F5 FA 03 0C 
1387b     15 1D 20 20 | 	byte	$db, $db, $dc, $db, $dd, $e1, $e5, $ec, $f5, $fa, $03, $0c, $15, $1d, $20, $20
1387f     20 1E 1E 1D 
13883     1B 19 16 11 
13887     0B 06 03 FD 
1388b     F5 EA E2 DE | 	byte	$20, $1e, $1e, $1d, $1b, $19, $16, $11, $0b, $06, $03, $fd, $f5, $ea, $e2, $de
1388f     DC DD DD DC 
13893     E0 E3 E8 F0 
13897     F7 FD 06 0E 
1389b     17 1E 20 20 | 	byte	$dc, $dd, $dd, $dc, $e0, $e3, $e8, $f0, $f7, $fd, $06, $0e, $17, $1e, $20, $20
1389f     1F 1E 1D 1C 
138a3     1B 18 13 0D 
138a7     09 04 01 FA 
138ab     F0 E7 E1 DE | 	byte	$1f, $1e, $1d, $1c, $1b, $18, $13, $0d, $09, $04, $01, $fa, $f0, $e7, $e1, $de
138af     DE DE DE DE 
138b3     E2 E4 E9 F2 
138b7     F8 00 08 11 
138bb     18 1E 20 1F | 	byte	$de, $de, $de, $de, $e2, $e4, $e9, $f2, $f8, $00, $08, $11, $18, $1e, $20, $1f
138bf     1F 1E 1D 1C 
138c3     19 15 10 0B 
138c7     07 03 FE F6 
138cb     EC E5 E2 E0 | 	byte	$1f, $1e, $1d, $1c, $19, $15, $10, $0b, $07, $03, $fe, $f6, $ec, $e5, $e2, $e0
138cf     E0 E1 DF E2 
138d3     E6 E8 EE F6 
138d7     FB 02 0A 12 
138db     1A 1F 1F 1F | 	byte	$e0, $e1, $df, $e2, $e6, $e8, $ee, $f6, $fb, $02, $0a, $12, $1a, $1f, $1f, $1f
138df     1D 1C 1B 1A 
138e3     16 12 0D 08 
138e7     05 02 FB F2 
138eb     E9 E4 E2 E1 | 	byte	$1d, $1c, $1b, $1a, $16, $12, $0d, $08, $05, $02, $fb, $f2, $e9, $e4, $e2, $e1
138ef     E2 E0 E0 E4 
138f3     E7 EA F0 F7 
138f7     FD 04 0C 14 
138fb     1A 1E 1F 1E | 	byte	$e2, $e0, $e0, $e4, $e7, $ea, $f0, $f7, $fd, $04, $0c, $14, $1a, $1e, $1f, $1e
138ff     1D 1B 1A 18 
13903     14 0F 0B 07 
13907     04 FF F7 EF 
1390b     E7 E4 E3 E3 | 	byte	$1d, $1b, $1a, $18, $14, $0f, $0b, $07, $04, $ff, $f7, $ef, $e7, $e4, $e3, $e3
1390f     E3 E1 E3 E7 
13913     E9 EC F4 FA 
13917     FF 06 0E 15 
1391b     1C 1F 1F 1E | 	byte	$e3, $e1, $e3, $e7, $e9, $ec, $f4, $fa, $ff, $06, $0e, $15, $1c, $1f, $1f, $1e
1391f     1C 1B 1A 16 
13923     12 0D 09 06 
13927     03 FD F5 EC 
1392b     E8 E6 E5 E5 | 	byte	$1c, $1b, $1a, $16, $12, $0d, $09, $06, $03, $fd, $f5, $ec, $e8, $e6, $e5, $e5
1392f     E4 E3 E5 E9 
13933     EB F0 F6 FB 
13937     01 08 0F 16 
1393b     1C 1E 1E 1C | 	byte	$e4, $e3, $e5, $e9, $eb, $f0, $f6, $fb, $01, $08, $0f, $16, $1c, $1e, $1e, $1c
1393f     1B 1A 17 13 
13943     0E 0A 07 05 
13947     00 F9 F1 EA 
1394b     E7 E7 E6 E6 | 	byte	$1b, $1a, $17, $13, $0e, $0a, $07, $05, $00, $f9, $f1, $ea, $e7, $e7, $e6, $e6
1394f     E5 E5 E8 EC 
13953     EE F2 F9 FD 
13957     02 09 10 17 
1395b     1B 1D 1D 1C | 	byte	$e5, $e5, $e8, $ec, $ee, $f2, $f9, $fd, $02, $09, $10, $17, $1b, $1d, $1d, $1c
1395f     1A 18 15 10 
13963     0D 09 07 03 
13967     FE F6 EE EA 
1396b     E8 E8 E7 E7 | 	byte	$1a, $18, $15, $10, $0d, $09, $07, $03, $fe, $f6, $ee, $ea, $e8, $e8, $e7, $e7
1396f     E5 E7 EA EE 
13973     F0 F5 FA FE 
13977     04 0A 11 18 
1397b     1B 1D 1C 1B | 	byte	$e5, $e7, $ea, $ee, $f0, $f5, $fa, $fe, $04, $0a, $11, $18, $1b, $1d, $1c, $1b
1397f     19 16 12 0E 
13983     0A 07 05 01 
13987     FB F3 EC E9 
1398b     E9 E9 E8 E8 | 	byte	$19, $16, $12, $0e, $0a, $07, $05, $01, $fb, $f3, $ec, $e9, $e9, $e9, $e8, $e8
1398f     E6 E9 ED F0 
13993     F1 F6 FB FF 
13997     04 0B 12 18 
1399b     1B 1C 1B 1A | 	byte	$e6, $e9, $ed, $f0, $f1, $f6, $fb, $ff, $04, $0b, $12, $18, $1b, $1c, $1b, $1a
1399f     18 14 11 0C 
139a3     09 07 04 FF 
139a7     F8 F1 EC EB 
139ab     EB EA EA E9 | 	byte	$18, $14, $11, $0c, $09, $07, $04, $ff, $f8, $f1, $ec, $eb, $eb, $ea, $ea, $e9
139af     E9 EC F0 F2 
139b3     F4 F9 FD 01 
139b7     06 0C 13 18 
139bb     1B 1B 1A 18 | 	byte	$e9, $ec, $f0, $f2, $f4, $f9, $fd, $01, $06, $0c, $13, $18, $1b, $1b, $1a, $18
139bf     15 11 0D 0A 
139c3     08 06 02 FC 
139c7     F5 EF EC EC 
139cb     EC EB EB E9 | 	byte	$15, $11, $0d, $0a, $08, $06, $02, $fc, $f5, $ef, $ec, $ec, $ec, $eb, $eb, $e9
139cf     EA ED F1 F3 
139d3     F5 FA FE 02 
139d7     07 0D 13 18 
139db     1A 1B 19 16 | 	byte	$ea, $ed, $f1, $f3, $f5, $fa, $fe, $02, $07, $0d, $13, $18, $1a, $1b, $19, $16
139df     13 0F 0C 09 
139e3     07 05 FF F9 
139e7     F3 EE ED ED 
139eb     ED EC EB EA | 	byte	$13, $0f, $0c, $09, $07, $05, $ff, $f9, $f3, $ee, $ed, $ed, $ed, $ec, $eb, $ea
139ef     EC F0 F3 F5 
139f3     F7 FC FF 03 
139f7     09 0E 14 18 
139fb     1B 1A 18 14 | 	byte	$ec, $f0, $f3, $f5, $f7, $fc, $ff, $03, $09, $0e, $14, $18, $1b, $1a, $18, $14
139ff     11 0E 0B 09 
13a03     07 04 FE F7 
13a07     F2 EF EF EF 
13a0b     EE EE EC EC | 	byte	$11, $0e, $0b, $09, $07, $04, $fe, $f7, $f2, $ef, $ef, $ef, $ee, $ee, $ec, $ec
13a0f     EE F2 F5 F6 
13a13     F9 FD 00 03 
13a17     09 0E 14 18 
13a1b     19 18 15 12 | 	byte	$ee, $f2, $f5, $f6, $f9, $fd, $00, $03, $09, $0e, $14, $18, $19, $18, $15, $12
13a1f     0F 0C 0A 08 
13a23     06 01 FB F4 
13a27     F1 EF F0 F0 
13a2b     EF EF ED EE | 	byte	$0f, $0c, $0a, $08, $06, $01, $fb, $f4, $f1, $ef, $f0, $f0, $ef, $ef, $ed, $ee
13a2f     F0 F4 F7 F8 
13a33     FA FE 00 04 
13a37     09 0F 14 17 
13a3b     18 17 14 11 | 	byte	$f0, $f4, $f7, $f8, $fa, $fe, $00, $04, $09, $0f, $14, $17, $18, $17, $14, $11
13a3f     0D 0B 0A 08 
13a43     04 FF F9 F4 
13a47     F1 F1 F1 F0 
13a4b     F0 EF EE EF | 	byte	$0d, $0b, $0a, $08, $04, $ff, $f9, $f4, $f1, $f1, $f1, $f0, $f0, $ef, $ee, $ef
13a4f     F2 F5 F8 F9 
13a53     FB FE 01 05 
13a57     09 0F 13 17 
13a5b     17 15 11 0F | 	byte	$f2, $f5, $f8, $f9, $fb, $fe, $01, $05, $09, $0f, $13, $17, $17, $15, $11, $0f
13a5f     0C 0A 09 06 
13a63     02 FD F7 F4 
13a67     F1 F1 F2 F1 
13a6b     F1 EF EE F0 | 	byte	$0c, $0a, $09, $06, $02, $fd, $f7, $f4, $f1, $f1, $f2, $f1, $f1, $ef, $ee, $f0
13a6f     F3 F7 F9 F9 
13a73     FC FE 01 05 
13a77     0A 0F 14 16 
13a7b     15 13 10 0E | 	byte	$f3, $f7, $f9, $f9, $fc, $fe, $01, $05, $0a, $0f, $14, $16, $15, $13, $10, $0e
13a7f     0C 0A 08 05 
13a83     00 FB F6 F3 
13a87     F2 F3 F3 F2 
13a8b     F2 F0 F0 F2 | 	byte	$0c, $0a, $08, $05, $00, $fb, $f6, $f3, $f2, $f3, $f3, $f2, $f2, $f0, $f0, $f2
13a8f     F6 F8 FA FB 
13a93     FE 00 03 06 
13a97     0B 0F 14 15 
13a9b     14 12 0F 0C | 	byte	$f6, $f8, $fa, $fb, $fe, $00, $03, $06, $0b, $0f, $14, $15, $14, $12, $0f, $0c
13a9f     0B 09 07 03 
13aa3     FE F9 F5 F3 
13aa7     F3 F4 F4 F3 
13aab     F3 F1 F1 F3 | 	byte	$0b, $09, $07, $03, $fe, $f9, $f5, $f3, $f3, $f4, $f4, $f3, $f3, $f1, $f1, $f3
13aaf     F6 F9 FB FB 
13ab3     FD 00 02 06 
13ab7     0B 0F 12 14 
13abb     12 10 0D 0C | 	byte	$f6, $f9, $fb, $fb, $fd, $00, $02, $06, $0b, $0f, $12, $14, $12, $10, $0d, $0c
13abf     0A 08 06 01 
13ac3     FC F7 F5 F4 
13ac7     F4 F5 F4 F3 
13acb     F3 F1 F3 F5 | 	byte	$0a, $08, $06, $01, $fc, $f7, $f5, $f4, $f4, $f5, $f4, $f3, $f3, $f1, $f3, $f5
13acf     F8 FB FC FC 
13ad3     FE 01 03 07 
13ad7     0C 10 12 13 
13adb     11 0F 0D 0C | 	byte	$f8, $fb, $fc, $fc, $fe, $01, $03, $07, $0c, $10, $12, $13, $11, $0f, $0d, $0c
13adf     0B 08 05 01 
13ae3     FB F8 F6 F5 
13ae7     F6 F7 F5 F4 
13aeb     F3 F3 F5 F7 | 	byte	$0b, $08, $05, $01, $fb, $f8, $f6, $f5, $f6, $f7, $f5, $f4, $f3, $f3, $f5, $f7
13aef     F9 FB FD FD 
13af3     FF 01 04 07 
13af7     0B 0F 10 11 
13afb     10 0E 0C 0B | 	byte	$f9, $fb, $fd, $fd, $ff, $01, $04, $07, $0b, $0f, $10, $11, $10, $0e, $0c, $0b
13aff     09 07 03 FD 
13b03     F9 F7 F5 F5 
13b07     F6 F6 F5 F5 
13b0b     F4 F4 F5 F8 | 	byte	$09, $07, $03, $fd, $f9, $f7, $f5, $f5, $f6, $f6, $f5, $f5, $f4, $f4, $f5, $f8
13b0f     FA FC FE FE 
13b13     00 02 04 08 
13b17     0B 0E 0F 10 
13b1b     0F 0D 0C 0A | 	byte	$fa, $fc, $fe, $fe, $00, $02, $04, $08, $0b, $0e, $0f, $10, $0f, $0d, $0c, $0a
13b1f     08 05 02 FC 
13b23     F9 F7 F7 F7 
13b27     F8 F7 F6 F6 
13b2b     F4 F5 F7 F9 | 	byte	$08, $05, $02, $fc, $f9, $f7, $f7, $f7, $f8, $f7, $f6, $f6, $f4, $f5, $f7, $f9
13b2f     FB FD FE FE 
13b33     00 02 05 08 
13b37     0B 0D 0F 0E 
13b3b     0E 0C 0B 09 | 	byte	$fb, $fd, $fe, $fe, $00, $02, $05, $08, $0b, $0d, $0f, $0e, $0e, $0c, $0b, $09
13b3f     07 04 00 FB 
13b43     F8 F7 F7 F7 
13b47     F7 F7 F6 F5 
13b4b     F4 F5 F7 F9 | 	byte	$07, $04, $00, $fb, $f8, $f7, $f7, $f7, $f7, $f7, $f6, $f5, $f4, $f5, $f7, $f9
13b4f     FC FE FF FE 
13b53     00 02 04 08 
13b57     0A 0C 0D 0D 
13b5b     0D 0C 0A 09 | 	byte	$fc, $fe, $ff, $fe, $00, $02, $04, $08, $0a, $0c, $0d, $0d, $0d, $0c, $0a, $09
13b5f     06 03 FE FA 
13b63     F8 F7 F8 F9 
13b67     F9 F8 F7 F7 
13b6b     F6 F7 F8 FA | 	byte	$06, $03, $fe, $fa, $f8, $f7, $f8, $f9, $f9, $f8, $f7, $f7, $f6, $f7, $f8, $fa
13b6f     FD FF FF 00 
13b73     01 03 06 08 
13b77     0A 0C 0D 0D 
13b7b     0C 0B 09 07 | 	byte	$fd, $ff, $ff, $00, $01, $03, $06, $08, $0a, $0c, $0d, $0d, $0c, $0b, $09, $07
13b7f     05 00 FC F9 
13b83     F8 F8 F8 F9 
13b87     F9 F8 F8 F6 
13b8b     F6 F7 F9 FB | 	byte	$05, $00, $fc, $f9, $f8, $f8, $f8, $f9, $f9, $f8, $f8, $f6, $f6, $f7, $f9, $fb
13b8f     FD FF FE FF 
13b93     01 03 05 07 
13b97     09 0B 0C 0C 
13b9b     0C 0A 09 06 | 	byte	$fd, $ff, $fe, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0c, $0c, $0a, $09, $06
13b9f     03 FF FB F9 
13ba3     F8 F8 F9 F9 
13ba7     F9 F8 F7 F6 
13bab     F7 F8 FA FC | 	byte	$03, $ff, $fb, $f9, $f8, $f8, $f9, $f9, $f9, $f8, $f7, $f6, $f7, $f8, $fa, $fc
13baf     FE FF FF 00 
13bb3     02 04 06 08 
13bb7     09 0B 0C 0C 
13bbb     0C 0A 08 06 | 	byte	$fe, $ff, $ff, $00, $02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0a, $08, $06
13bbf     02 FF FB FA 
13bc3     F9 FA FA FA 
13bc7     FB FA F8 F7 
13bcb     F8 FA FB FD | 	byte	$02, $ff, $fb, $fa, $f9, $fa, $fa, $fa, $fb, $fa, $f8, $f7, $f8, $fa, $fb, $fd
13bcf     FF 00 FF 01 
13bd3     02 04 05 08 
13bd7     09 0A 0B 0B 
13bdb     0A 09 06 04 | 	byte	$ff, $00, $ff, $01, $02, $04, $05, $08, $09, $0a, $0b, $0b, $0a, $09, $06, $04
13bdf     00 FD FA F9 
13be3     F9 FA FA FA 
13be7     FA F9 F8 F8 
13beb     F9 FA FB FE | 	byte	$00, $fd, $fa, $f9, $f9, $fa, $fa, $fa, $fa, $f9, $f8, $f8, $f9, $fa, $fb, $fe
13bef     00 00 00 02 
13bf3     03 04 05 07 
13bf7     08 0A 0A 0A 
13bfb     09 08 06 03 | 	byte	$00, $00, $00, $02, $03, $04, $05, $07, $08, $0a, $0a, $0a, $09, $08, $06, $03
13bff     FF FC FA FA 
13c03     FB FB FB FB 
13c07     FB F9 F8 F8 
13c0b     F9 FA FC FE | 	byte	$ff, $fc, $fa, $fa, $fb, $fb, $fb, $fb, $fb, $f9, $f8, $f8, $f9, $fa, $fc, $fe
13c0f     00 00 00 02 
13c13     03 04 06 07 
13c17     08 09 0A 0A 
13c1b     09 07 04 01 | 	byte	$00, $00, $00, $02, $03, $04, $06, $07, $08, $09, $0a, $0a, $09, $07, $04, $01
13c1f     FE FB FA FA 
13c23     FB FB FB FC 
13c27     FB F9 F8 F9 
13c2b     F9 FA FC FE | 	byte	$fe, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fb, $f9, $f8, $f9, $f9, $fa, $fc, $fe
13c2f     00 00 00 02 
13c33     02 03 05 06 
13c37     07 08 09 09 
13c3b     08 05 04 01 | 	byte	$00, $00, $00, $02, $02, $03, $05, $06, $07, $08, $09, $09, $08, $05, $04, $01
13c3f     FE FB FB FB 
13c43     FB FC FC FD 
13c47     FB F9 F9 FA 
13c4b     FB FB FD FF | 	byte	$fe, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fb, $f9, $f9, $fa, $fb, $fb, $fd, $ff
13c4f     01 01 02 03 
13c53     04 05 05 06 
13c57     07 08 09 08 
13c5b     06 04 02 FF | 	byte	$01, $01, $02, $03, $04, $05, $05, $06, $07, $08, $09, $08, $06, $04, $02, $ff
13c5f     FC FB FB FC 
13c63     FC FC FD FD 
13c67     FB F9 FA FA 
13c6b     FB FC FD FF | 	byte	$fc, $fb, $fb, $fc, $fc, $fc, $fd, $fd, $fb, $f9, $fa, $fa, $fb, $fc, $fd, $ff
13c6f     00 00 01 03 
13c73     03 04 05 06 
13c77     07 08 08 07 
13c7b     06 03 01 FE | 	byte	$00, $00, $01, $03, $03, $04, $05, $06, $07, $08, $08, $07, $06, $03, $01, $fe
13c7f     FC FB FC FC 
13c83     FC FD FD FD 
13c87     FA F9 FA FB 
13c8b     FB FC FE 00 | 	byte	$fc, $fb, $fc, $fc, $fc, $fd, $fd, $fd, $fa, $f9, $fa, $fb, $fb, $fc, $fe, $00
13c8f     00 01 02 03 
13c93     03 04 05 06 
13c97     07 08 08 07 
13c9b     05 03 01 FE | 	byte	$00, $01, $02, $03, $03, $04, $05, $06, $07, $08, $08, $07, $05, $03, $01, $fe
13c9f     FD FD FD FD 
13ca3     FE FE FE FD 
13ca7     FB FA FB FB 
13cab     FC FD FE 00 | 	byte	$fd, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $00
13caf     01 01 02 03 
13cb3     03 04 05 06 
13cb7     07 07 07 05 
13cbb     03 01 FF FD | 	byte	$01, $01, $02, $03, $03, $04, $05, $06, $07, $07, $07, $05, $03, $01, $ff, $fd
13cbf     FD FC FD FD 
13cc3     FE FE FE FC 
13cc7     FA FB FB FB 
13ccb     FC FD FF 00 | 	byte	$fd, $fc, $fd, $fd, $fe, $fe, $fe, $fc, $fa, $fb, $fb, $fb, $fc, $fd, $ff, $00
13ccf     00 01 03 03 
13cd3     03 03 04 05 
13cd7     07 07 06 04 
13cdb     02 01 FE FD | 	byte	$00, $01, $03, $03, $03, $03, $04, $05, $07, $07, $06, $04, $02, $01, $fe, $fd
13cdf     FD FD FE FE 
13ce3     FE FF FE FC 
13ce7     FB FB FB FC 
13ceb     FC FD FF 00 | 	byte	$fd, $fd, $fe, $fe, $fe, $ff, $fe, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00
13cef     00 02 03 02 
13cf3     03 04 05 06 
13cf7     06 06 05 03 
13cfb     01 00 FE FD | 	byte	$00, $02, $03, $02, $03, $04, $05, $06, $06, $06, $05, $03, $01, $00, $fe, $fd
13cff     FE FE FE FE 
13d03     FE          | 	byte	$fe[5]
13d04     FF FD FC FB 
13d08     FB FB FC FC 
13d0c     FD FF 00 01 
13d10     02 02 02 02 | 	byte	$ff, $fd, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00, $01, $02, $02, $02, $02
13d14     03 04 05 06 
13d18     05 04 02 01 
13d1c     00 FF FF FF 
13d20     FE FE FF FF | 	byte	$03, $04, $05, $06, $05, $04, $02, $01, $00, $ff, $ff, $ff, $fe, $fe, $ff, $ff
13d24     FF FD FC FC 
13d28     FC FC FC FD 
13d2c     FF 00 00 01 
13d30     02 03 02 03 | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $ff, $00, $00, $01, $02, $03, $02, $03
13d34     04 05 06 05 
13d38     04 03 01 00 
13d3c     FF FE FE FE 
13d40     FE FF FF FF | 	byte	$04, $05, $06, $05, $04, $03, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff
13d44     FE FD FD FC 
13d48     FC FC FD FD 
13d4c     FE FF FF 00 
13d50     01 01 01 02 | 	byte	$fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00, $01, $01, $01, $02
13d54     03 04 05 05 
13d58     03 02 01 00 
13d5c     FF FF FF FF 
13d60     FF FF FF FF | 	byte	$03, $04, $05, $05, $03, $02, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
13d64     FD FD FD FC 
13d68     FC FC FC FE 
13d6c     FF 00 00 00 
13d70     01 02 02 03 | 	byte	$fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00, $01, $02, $02, $03
13d74     04 05 05 04 
13d78     03 02 01 00 
13d7c     00 00 00 00 
13d80     00 01 00 FF | 	byte	$04, $05, $05, $04, $03, $02, $01, $00, $00, $00, $00, $00, $00, $01, $00, $ff
13d84     FF FF FE FD 
13d88     FD FD FD FF 
13d8c     FF 00 00 01 
13d90     01 02 02 03 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $00, $00, $01, $01, $02, $02, $03
13d94     03 04 04 03 
13d98     01 00 00 00 
13d9c     FF 00 00 FF 
13da0     00 00 FF FE | 	byte	$03, $04, $04, $03, $01, $00, $00, $00, $ff, $00, $00, $ff, $00, $00, $ff, $fe
13da4     FE FE FE FD 
13da8     FD FD FD FF 
13dac     FF FF 00 01 
13db0     01 01 02 03 | 	byte	$fe, $fe, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $00, $01, $01, $01, $02, $03
13db4     03 03 03 02 
13db8     01 00 01 00 
13dbc     00 00 00 01 
13dc0     01 01 FF FF | 	byte	$03, $03, $03, $02, $01, $00, $01, $00, $00, $00, $00, $01, $01, $01, $ff, $ff
13dc4     FF FF FD FD 
13dc8     FD FD FE FF 
13dcc     FF FF FF 00 
13dd0     01 01 02 03 | 	byte	$ff, $ff, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $ff, $ff, $00, $01, $01, $02, $03
13dd4     03 03 02 02 
13dd8     01 01 01 00 
13ddc     00 00 01 01 
13de0     01 00 FF FF | 	byte	$03, $03, $02, $02, $01, $01, $01, $00, $00, $00, $01, $01, $01, $00, $ff, $ff
13de4     FF FE FD FD 
13de8     FD FD FD FE 
13dec     FE FE 00 00 
13df0     00 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $00, $00, $00, $00, $01, $02
13df4     02 02 01 01 
13df8     00 01 01 01 
13dfc     01 01 01 01 
13e00     01 00 FF FF | 	byte	$02, $02, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $ff
13e04     FF FF FE FD 
13e08     FD FD FE FF 
13e0c     FE FF 00 00 
13e10     01 01 02 02 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $ff, $fe, $ff, $00, $00, $01, $01, $02, $02
13e14     02 02 01 01 
13e18     01 01 01 00 
13e1c     01 01 01 01 
13e20     00 FF 00 FF | 	byte	$02, $02, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $00, $ff, $00, $ff
13e24     FF FF FE FD 
13e28     FD FD FE FE 
13e2c     FE FE FF FF 
13e30     00 00 01 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01
13e34     01 01 01 01 
13e38     01 01 01 01 
13e3c     01 01 01 01 | 	byte	$01[12]
13e40     00 FF 00 FF 
13e44     FF FE FE FD 
13e48     FD FE FE FE 
13e4c     FE FE FF FF | 	byte	$00, $ff, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13e50     00 00 01 02 
13e54     01 02 02 02 
13e58     02 02 02 02 
13e5c     02 02 02 02 | 	byte	$00, $00, $01, $02, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
13e60     01 00 00 00 
13e64     00 FF FF FF 
13e68     FE FE FE FE 
13e6c     FE FE FF FF | 	byte	$01, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13e70     00 00 01 01 
13e74     01 01 01 01 
13e78     02 01 01 01 
13e7c     01 02 02 01 | 	byte	$00, $00, $01, $01, $01, $01, $01, $01, $02, $01, $01, $01, $01, $02, $02, $01
13e80     00 00 00 00 
13e84     FF FF FE FE 
13e88     FE FE FE FD 
13e8c     FE FE FF FF | 	byte	$00, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $ff, $ff
13e90     00 00 00 01 
13e94     01 01 01 01 
13e98     02 01 01 02 
13e9c     02 02 02 01 | 	byte	$00, $00, $00, $01, $01, $01, $01, $01, $02, $01, $01, $02, $02, $02, $02, $01
13ea0     00 01 00 00 
13ea4     00 FF FE FE 
13ea8     FE FE FE FD 
13eac     FE FE FE FF | 	byte	$00, $01, $00, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff
13eb0     00 00 00 01 
13eb4     01 01 02 02 
13eb8     02 01 02 02 
13ebc     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $01, $02, $02, $02, $02, $01, $01
13ec0     01 00 00 00 
13ec4     FF FF FE FE 
13ec8     FE FE FD FC 
13ecc     FD FE FE FF | 	byte	$01, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fc, $fd, $fe, $fe, $ff
13ed0     FF FF FF 00 
13ed4     01 01 02 02 
13ed8     02 02 02 03 
13edc     03 02 02 01 | 	byte	$ff, $ff, $ff, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $02, $02, $01
13ee0     01 01 01 00 
13ee4     FF FF FF FE 
13ee8     FE FE FD FD 
13eec     FD FF FF FF | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $ff, $ff, $ff
13ef0     00 00 00 01 
13ef4     02 02 02 02 
13ef8     02 02 02 02 
13efc     02 02 00 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $00, $00
13f00     00 01 00 00 
13f04     FF FF FF FE 
13f08     FE FE FC FC 
13f0c     FD FD FE FE | 	byte	$00, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fc, $fc, $fd, $fd, $fe, $fe
13f10     FE FF 00 00 
13f14     01 02 02 02 
13f18     02 02 02 02 
13f1c     02 01 01 01 | 	byte	$fe, $ff, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
13f20     01 00 00 FF 
13f24     FF FF FE FE 
13f28     FE FD FD FC 
13f2c     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fd, $fe, $fe, $fe
13f30     FF 00 00 01 
13f34     02 03 03 03 
13f38     03 03 03 03 
13f3c     02 02 02 02 | 	byte	$ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02
13f40     02 01 01 00 
13f44     FF 00 FF FE 
13f48     FE FD FC FD 
13f4c     FD FD FE FE | 	byte	$02, $01, $01, $00, $ff, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fd, $fe, $fe
13f50     FF FF 00 01 
13f54     02 02 02 02 
13f58     02 03 02 02 
13f5c     02 01 01 01 | 	byte	$ff, $ff, $00, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02, $01, $01, $01
13f60     01 01 00 FF 
13f64     FF FF FE FE 
13f68     FD FD FC FD 
13f6c     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fe, $fe, $fe
13f70     FF 00 01 02 
13f74     02 02 02 02 
13f78     03 03 03 03 
13f7c     02 01 01 01 | 	byte	$ff, $00, $01, $02, $02, $02, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01
13f80     01 01 00 00 
13f84     FF FF FE FD 
13f88     FD FC FC FC 
13f8c     FD FD FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13f90     FF 00 01 02 
13f94     03 02 02 03 
13f98     03 03 03 02 
13f9c     01 01 01 01 | 	byte	$ff, $00, $01, $02, $03, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01, $01
13fa0     01 00 00 FF 
13fa4     FF FE FD FD 
13fa8     FC FC FC FC 
13fac     FD FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13fb0     FE 00 01 02 
13fb4     02 02 02 03 
13fb8     03 03 03 03 
13fbc     02 02 01 01 | 	byte	$fe, $00, $01, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01
13fc0     01 01 00 FF 
13fc4     FF FE FE FD 
13fc8     FD FC FC FD 
13fcc     FD FE FE FF | 	byte	$01, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $ff
13fd0     00 01 02 02 
13fd4     02 03 03 03 
13fd8     02 02 02 02 
13fdc     01 01 01 01 | 	byte	$00, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01
13fe0     01 00 00 FF 
13fe4     FF FE FD FD 
13fe8     FD FC FC FC 
13fec     FC FD FD FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe
13ff0     FF 01 01 02 
13ff4     02 03 03 03 
13ff8     03 03 03 01 
13ffc     01 01 01 01 | 	byte	$ff, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01, $01
14000     01 00 FF FF 
14004     FE FE FD FD 
14008     FC FC FC FC 
1400c     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
14010     00 01 02 03 
14014     03 03 04 03 
14018     03 04 03 02 
1401c     02 02 02 02 | 	byte	$00, $01, $02, $03, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02
14020     02 01 00 FF 
14024     FF FE FE FD 
14028     FD FC FC FD 
1402c     FD FD FE FF | 	byte	$02, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $ff
14030     00 01 02 02 
14034     03 03 03 03 
14038     03 03 02 01 
1403c     01 01 01 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
14040     01 00 FF FF 
14044     FE FE FD FD 
14048     FD FC FD FD 
1404c     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
14050     01 01 02 02 
14054     03 03 03 03 
14058     03 03 02 01 
1405c     01 01 02 01 | 	byte	$01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $02, $01
14060     01 00 FF FF 
14064     FE FD FD FD 
14068     FD FC FD FD 
1406c     FD FE FF 00 | 	byte	$01, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $ff, $00
14070     01 02 02 03 
14074     03 03 03 03 
14078     03 03 02 01 
1407c     01 01 01 01 | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
14080     00 FF FF FE 
14084     FD FD FD FD 
14088     FC FC FC FC 
1408c     FD FD FE FF | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
14090     00 01 02 02 
14094     03 03 03 03 
14098     03 02 02 02 
1409c     02 02 02 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01
140a0     00 FF FF FE 
140a4     FD FD FD FD 
140a8     FD FC FC FD 
140ac     FE FE FF 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fe, $fe, $ff, $01
140b0     01 02 03 03 
140b4     03 03 03 03 
140b8     03 02 01 01 
140bc     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
140c0     00 FF FF FE 
140c4     FD FD FD FD 
140c8     FD FC FC FC 
140cc     FD FE FF 00 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $ff, $00
140d0     01 01 02 03 
140d4     03 03 03 03 
140d8     03 02 01 01 
140dc     01 01 01 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
140e0     FF FF FE FD 
140e4     FD FD FD FD 
140e8     FC FC FC FD 
140ec     FE FE FF 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $01
140f0     01 02 03 03 
140f4     04 03 03 04 
140f8     03 02 02 02 
140fc     02 02 02 01 | 	byte	$01, $02, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02, $02, $01
14100     00 FF FF FE 
14104     FE FE FE FD 
14108     FD FD FD FD 
1410c     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
14110     01 02 03 03 
14114     03 03 03 03 
14118     02 02 01 01 
1411c     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $01, $01, $00
14120     FF FF FE FD 
14124     FD FD FD FD 
14128     FD FC FD FD 
1412c     FE FF 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01
14130     01 02 03 03 
14134     03 03 03 03 
14138     02 02 02 02 
1413c     02 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14140     FF FF FE FD 
14144     FD FD FD FD 
14148     FC FC FD FD 
1414c     FE 00 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $00, $00, $01
14150     02 03 03 03 
14154     03 03 03 02 
14158     02 02 01 02 
1415c     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $02, $01, $01, $00, $ff
14160     FF FE FD FD 
14164     FD FD FD FC 
14168     FC FC FC FE 
1416c     FF 00 00 00 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00
14170     01 02 03 03 
14174     03 03 03 03 
14178     02 02 02 02 
1417c     02 01 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $00, $ff
14180     FF FE FD FD 
14184     FD FD FD FD 
14188     FC FD FD FE 
1418c     FF 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01, $02
14190     02 03 03 03 
14194     03 03 03 02 
14198     01 02 02 01 
1419c     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $02, $01, $01, $01, $00, $ff
141a0     FE FE FD FD 
141a4     FD FD FD FD 
141a8     FC FD FE FE 
141ac     FF 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $00, $00, $01
141b0     02 03 03 03 
141b4     03 03 03 02 
141b8     01 02 01 01 
141bc     01 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $01, $01, $01, $00, $ff, $fe
141c0     FE FD FD FD 
141c4     FD FD FD FD 
141c8     FC FD FE FF 
141cc     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02
141d0     02 03 04 04 
141d4     04 04 03 02 
141d8     02 02 02 02 
141dc     01 01 00 FF | 	byte	$02, $03, $04, $04, $04, $04, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff
141e0     FE FE FD FD 
141e4     FD FD FD FD 
141e8     FD FD FE FF 
141ec     00 00 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $00, $01, $02
141f0     02 03 03 03 
141f4     03 03 02 02 
141f8     02 01 01 01 
141fc     00 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $01, $00, $00, $ff, $fe
14200     FE FD FD FD 
14204     FD FD FD FD 
14208     FD FE FF FF 
1420c     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $02
14210     03 03 03 04 
14214     03 03 02 02 
14218     02 02 02 01 
1421c     00 00 FF FE | 	byte	$03, $03, $03, $04, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $fe
14220     FE FD FD FD 
14224     FD FD FD FC 
14228     FD FE FF 00 
1422c     00 01 02 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02, $02
14230     03 03 04 04 
14234     03 02 02 02 
14238     02 01 01 01 
1423c     00 FF FE FD | 	byte	$03, $03, $04, $04, $03, $02, $02, $02, $02, $01, $01, $01, $00, $ff, $fe, $fd
14240     FD FD FD FD 
14244     FC FC FC FC 
14248     FD FE FF 00 
1424c     00 01 01 02 | 	byte	$fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $00, $00, $01, $01, $02
14250     02 03 03 03 
14254     03 02 02 02 
14258     02 02 02 01 
1425c     00 FF FF FE | 	byte	$02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01, $00, $ff, $ff, $fe
14260     FD FD FD FD 
14264     FD FD FD FD | 	byte	$fd[8]
14268     FE FF 00 01 
1426c     01 02 02 03 
14270     03 03 03 03 
14274     03 02 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
14278     01 01 01 00 
1427c     00 FF FE FE 
14280     FD FD FD FD 
14284     FD FD FD FD | 	byte	$01, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd
14288     FE FF FF 00 
1428c     00 01 02 02 
14290     02 03 04 03 
14294     02 02 02 02 | 	byte	$fe, $ff, $ff, $00, $00, $01, $02, $02, $02, $03, $04, $03, $02, $02, $02, $02
14298     01 01 00 00 
1429c     FF FF FE FD 
142a0     FC FC FC FC 
142a4     FD FD FD FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe
142a8     FE FF 00 01 
142ac     01 02 03 03 
142b0     04 04 04 03 
142b4     03 03 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $03, $03, $04, $04, $04, $03, $03, $03, $02, $02
142b8     02 01 01 00 
142bc     00 FF FE FE 
142c0     FD FD FD FD 
142c4     FD FD FD FE | 	byte	$02, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe
142c8     FF FF 00 00 
142cc     01 02 03 03 
142d0     03 03 03 02 
142d4     02 02 02 01 | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $01
142d8     01 00 00 00 
142dc     FF FE FD FD 
142e0     FC FC FD FD 
142e4     FD FD FD FE | 	byte	$01, $00, $00, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fe
142e8     FF 00 01 01 
142ec     01 02 03 03 
142f0     03 03 03 02 
142f4     02 02 02 02 | 	byte	$ff, $00, $01, $01, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02
142f8     02 01 00 00 
142fc     FF FF FE FD 
14300     FD FC FD FD 
14304     FD FD FE FF | 	byte	$02, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
14308     00 00 01 01 
1430c     02 03 03 03 
14310     04 03 02 02 
14314     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01
14318     01 00 00 FF 
1431c     FF FD FD FC 
14320     FD FC FC FC 
14324     FC FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fd, $fd, $fc, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $fe
14328     FF 00 01 01 
1432c     02 02 02 03 
14330     03 02 02 02 
14334     02 02 02 01 | 	byte	$ff, $00, $01, $01, $02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $01
14338     01 01 01 00 
1433c     FF FE FD FD 
14340     FC FC FD FD 
14344     FD FD FF FF | 	byte	$01, $01, $01, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $ff
14348     00 01 01 02 
1434c     02 03 03 04 
14350     03 02 02 02 
14354     02 02 01 01 | 	byte	$00, $01, $01, $02, $02, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01, $01
14358     00 00 FF FF 
1435c     FE FD FC FC 
14360     FC FD FD FD 
14364     FD FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff
14368     00 00 01 01 
1436c     02 03 03 03 
14370     03 02 02 02 
14374     02 01 01 00 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $01, $01, $00
14378     00 00 FF FF 
1437c     FE FD FC FC 
14380     FC FC FD FD 
14384     FD FE FF 00 | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
14388     01 01 01 02 
1438c     03 03 04 03 
14390     03 02 03 03 
14394     03 02 02 01 | 	byte	$01, $01, $01, $02, $03, $03, $04, $03, $03, $02, $03, $03, $03, $02, $02, $01
14398     01 00 00 FF 
1439c     FE FE FD FC 
143a0     FD FD FE FE 
143a4     FE FF 00 00 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00
143a8     01 01 02 02 
143ac     02 03 03 03 
143b0     02 02 02 02 
143b4     02 01 01 00 | 	byte	$01, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
143b8     FF FF FF FE 
143bc     FD FC FC FC 
143c0     FD FD FD FD 
143c4     FE FF 00 01 | 	byte	$ff, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
143c8     01 01 02 02 
143cc     03 03 02 02 
143d0     02 02 02 02 
143d4     02 01 01 00 | 	byte	$01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
143d8     00 FF FF FE 
143dc     FD FD FC FD 
143e0     FD FD FD FE 
143e4     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
143e8     01 01 02 03 
143ec     03 03 03 02 
143f0     02 02 02 02 
143f4     01 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00, $00
143f8     00 FF FE FE 
143fc     FD FC FC FC 
14400     FD FD FD FE 
14404     FE FF 00 00 | 	byte	$00, $ff, $fe, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00
14408     01 01 02 03 
1440c     02 02 02 02 
14410     02 02 02 02 
14414     01 01 01 00 | 	byte	$01, $01, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00
14418     00 FF FF FE 
1441c     FD FC FC FD 
14420     FD FE FE FE 
14424     FF 00 01 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
14428     01 02 03 03 
1442c     03 03 03 03 
14430     02 02 02 01 
14434     01 00 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $00, $ff
14438     FF FE FE FD 
1443c     FD FC FD FD 
14440     FD FE FE FE 
14444     FF 00 01 01 | 	byte	$ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
14448     01 02 02 02 
1444c     02 02 02 02 
14450     02 02 01 01 
14454     01 00 00 FF | 	byte	$01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00, $00, $ff
14458     FF FE FD FD 
1445c     FC FC FC FD 
14460     FD FD FE FF 
14464     FF 00 00 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01
14468     02 02 02 03 
1446c     03 02 02 02 
14470     02 02 02 02 
14474     01 01 00 00 | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00
14478     FF FF FE FE 
1447c     FD FD FD FE 
14480     FE FE FF FF 
14484     00 01 01 01 | 	byte	$ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $01, $01, $01
14488     02 02 03 03 
1448c     03 02 02 02 
14490     02 01 01 01 
14494     01 00 FF FF | 	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff
14498     FE FE FD FD 
1449c     FD FD FD FE 
144a0     FE FE FF 00 
144a4     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
144a8     02 02 03 02 
144ac     02 02 02 02 
144b0     02 01 01 00 
144b4     01 00 FF 00 | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $00, $01, $00, $ff, $00
144b8     FF FE FE FD 
144bc     FD FD FE FE 
144c0     FE FE FF 00 
144c4     00 01 01 02 | 	byte	$ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
144c8     02 02 03 02 
144cc     02 02 02 02 
144d0     01 01 01 01 
144d4     00 FF FF FF | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff, $ff
144d8     FE FE FD FD 
144dc     FD FD FD FE 
144e0     FE FE FF FF 
144e4     00 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $00, $01
144e8     02 02 02 02 
144ec     02          | 	byte	$02[5]
144ed     01 01 01 01 
144f1     01 01       | 	byte	$01[6]
144f3     00 00 00 FF 
144f7     00 FF FF FE 
144fb     FD FD FE FE 
144ff     FE FE FF FF | 	byte	$00, $00, $00, $ff, $00, $ff, $ff, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff
14503     00 01 01 01 
14507     02 02 03 03 
1450b     02 02 02 02 
1450f     02 01 01 00 | 	byte	$00, $01, $01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14513     00 FF FF FF 
14517     FE FE FE FD 
1451b     FD FE FE FE 
1451f     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff
14523     00 00 00 01 
14527     02 02 02 02 
1452b     01 02 01 01 
1452f     01 01 01 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $01, $02, $01, $01, $01, $01, $01, $00
14533     00 FF FF FF 
14537     FE FE FD FD 
1453b     FD FE FE FE 
1453f     FE FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00
14543     00 00 01 01 
14547     02 02 02 02 
1454b     02 02 02 02 
1454f     02 01 01 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
14553     00 01 00 FF 
14557     FF FF FF FE 
1455b     FE FE FF FF 
1455f     FF FF 00 00 | 	byte	$00, $01, $00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $00, $00
14563     00 01 01 02 
14567     02 02 02 02 
1456b     02 02 02 01 
1456f     01 00 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00
14573     00 FF FF FF 
14577     FE FE FE FE 
1457b     FE FE FF FF 
1457f     FF FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00
14583     00 01 01 02 
14587     02 02 02 01 
1458b     01 02 02 01 
1458f     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $01, $01, $02, $02, $01, $01, $01, $00, $00
14593     00 FF FF FF 
14597     FF FE FE FE 
1459b     FE FF FF FF 
1459f     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
145a3     00 01 01 02 
145a7     02 02 02 02 
145ab     02 02 01 01 
145af     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $00
145b3     00 FF FF FF 
145b7     FF FE FE FE 
145bb     FE FE FE FF 
145bf     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff
145c3     00 00 01 01 
145c7     01 02 02 02 
145cb     01 01 00 00 
145cf     00 00 00 00 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $01, $01, $00, $00, $00, $00, $00, $00
145d3     FF 00 FF FF 
145d7     FF FF FF FE 
145db     FE FF FF FF 
145df     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
145e3     00 01 02 02 
145e7     02 02 02 02 
145eb     02 02 01 01 
145ef     00 00 00 FF | 	byte	$00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00, $ff
145f3     FF FF FF FF 
145f7     FE FE FE FE 
145fb     FF FF FF FF 
145ff     FF FF FF 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
14603     00 01 01 01 
14607     01 01 01 01 
1460b     01 00 00 00 
1460f     00 00 00 FF | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $ff
14613     FF FF FF FF 
14617     FE FE FE FE 
1461b     FE FF FF FF 
1461f     FF FF 00 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
14623     00 01 01 02 
14627     02 01 01 01 
1462b     01 01 01 01 
1462f     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00
14633     00 00 00 00 
14637     00          | 	byte	$00[5]
14638     FF FF FF FF 
1463c     00 00 FF 00 
14640     00 00 00 01 
14644     01 01 02 01 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $01, $01, $01, $02, $01
14648     01 01 01 01 
1464c     01          | 	byte	$01[5]
1464d     00 00 00 00 
14651     00          | 	byte	$00[5]
14652     FF 00 FF FF 
14656     FF FE FE FE 
1465a     FF FF FF FF 
1465e     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
14662     00 01 01 01 
14666     01 01 01 01 
1466a     01 01 01 00 
1466e     00 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
14672     FF 00 00 FF 
14676     00 FF FF FF 
1467a     FF FF FF FF 
1467e     FF FF 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
14682     00 01 01 01 
14686     01 01 01 01 
1468a     01 01 01 01 
1468e     01 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
14692     FF 00 FF FF 
14696     FF FF FF FF 
1469a     FF FF FF FF 
1469e     FF FF FF FF | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
146a2     00 00 00 01 
146a6     00 00 01 01 
146aa     01 00 00 00 
146ae     00 00 00 00 | 	byte	$00, $00, $00, $01, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
146b2     00 00 00 00 
146b6     00 00 00 00 | 	byte	$00[8]
146ba     FF 00 00 FF 
146be     00 FF 00 00 
146c2     00 01 01 01 
146c6     00 00 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00
146ca     7F 7F 7F 7F 
      ...             
146ea     7F 7F 7F 7F 
146ee     7F          | 	byte	$7f[37]
146ef     74 5D 79 72 
146f3     4B 54 49 3B 
146f7     44 38 1C 25 
146fb     27 1A 2F 28 | 	byte	$74, $5d, $79, $72, $4b, $54, $49, $3b, $44, $38, $1c, $25, $27, $1a, $2f, $28
146ff     22 31 18 1E 
14703     2B 35 32 24 
14707     34 24 18 36 
1470b     24 13 2D 2E | 	byte	$22, $31, $18, $1e, $2b, $35, $32, $24, $34, $24, $18, $36, $24, $13, $2d, $2e
1470f     21 25 1D 0E 
14713     29 28 0E 0A 
14717     08 FB 01 09 
1471b     12 ED F1 F7 | 	byte	$21, $25, $1d, $0e, $29, $28, $0e, $0a, $08, $fb, $01, $09, $12, $ed, $f1, $f7
1471f     EA EA EC D6 
14723     DD E5 DE DD 
14727     CA C5 D0 C8 
1472b     B6 BF C2 C3 | 	byte	$ea, $ea, $ec, $d6, $dd, $e5, $de, $dd, $ca, $c5, $d0, $c8, $b6, $bf, $c2, $c3
1472f     BC B2 CB B4 
14733     B1 B9 9B A7 
14737     A0 8B 8F 8D 
1473b     90 95 88 81 | 	byte	$bc, $b2, $cb, $b4, $b1, $b9, $9b, $a7, $a0, $8b, $8f, $8d, $90, $95, $88, $81
1473f     81 83 81 81 
14743     81 81 81 81 
14747     87 81 8B 95 
1474b     81 8B 91 87 | 	byte	$81, $83, $81, $81, $81, $81, $81, $81, $87, $81, $8b, $95, $81, $8b, $91, $87
1474f     A5 A2 88 87 
14753     AF 94 8F 9C 
14757     88 91 96 93 
1475b     97 99 AA 9B | 	byte	$a5, $a2, $88, $87, $af, $94, $8f, $9c, $88, $91, $96, $93, $97, $99, $aa, $9b
1475f     99 AF A4 AF 
14763     B6 AC B3 CE 
14767     C0 BE D9 CD 
1476b     D7 DC CC CF | 	byte	$99, $af, $a4, $af, $b6, $ac, $b3, $ce, $c0, $be, $d9, $cd, $d7, $dc, $cc, $cf
1476f     E8 D2 D6 DB 
14773     D8 D0 E7 E2 
14777     DC E5 F2 EA 
1477b     F3 07 FC 09 | 	byte	$e8, $d2, $d6, $db, $d8, $d0, $e7, $e2, $dc, $e5, $f2, $ea, $f3, $07, $fc, $09
1477f     17 11 13 20 
14783     24 2F 3F 34 
14787     3F 63 4C 57 
1478b     74 6D 7B 7F | 	byte	$17, $11, $13, $20, $24, $2f, $3f, $34, $3f, $63, $4c, $57, $74, $6d, $7b, $7f
1478f     77 7D 7F 7F 
14793     7F 7F 7F 7F 
14797     7F 7F 7F 7F 
1479b     7F 7F 7F 7F | 	byte	$77, $7d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
1479f     7F 7F 7F 7F 
147a3     7F 7F 7F 7F 
147a7     7F 7F 7F 7F 
147ab     7F 7F 7F 7F 
147af     7F 7F 7F    | 	byte	$7f[19]
147b2     68 6E 6F 63 
147b6     61 5C 46 4A 
147ba     49 2E 34 3A 
147be     1F 25 1C 05 | 	byte	$68, $6e, $6f, $63, $61, $5c, $46, $4a, $49, $2e, $34, $3a, $1f, $25, $1c, $05
147c2     13 19 02 04 
147c6     F9 F2 F4 EB 
147ca     E0 D3 DA D5 
147ce     B8 BA B2 AB | 	byte	$13, $19, $02, $04, $f9, $f2, $f4, $eb, $e0, $d3, $da, $d5, $b8, $ba, $b2, $ab
147d2     B6 98 87 89 
147d6     83 81 81 81 
147da     81 81 81 81 
147de     81 81 81 81 | 	byte	$b6, $98, $87, $89, $83, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
147e2     81 81 81 81 
      ...             
1480e     81 81 81 81 
14812     81 81 81 81 | 	byte	$81[52]
14816     87 90 8B 9B 
1481a     A4 A7 A9 B7 
1481e     B8 C3 D4 CE 
14822     D2 E7 E4 EB | 	byte	$87, $90, $8b, $9b, $a4, $a7, $a9, $b7, $b8, $c3, $d4, $ce, $d2, $e7, $e4, $eb
14826     FC FB 04 10 
1482a     18 13 1F 24 
1482e     27 3B 2D 2F 
14832     43 3F 46 4A | 	byte	$fc, $fb, $04, $10, $18, $13, $1f, $24, $27, $3b, $2d, $2f, $43, $3f, $46, $4a
14836     49 4C 52 55 
1483a     4B 51 5F 5D 
1483e     52 55 5B 5C 
14842     65 5A 4F 63 | 	byte	$49, $4c, $52, $55, $4b, $51, $5f, $5d, $52, $55, $5b, $5c, $65, $5a, $4f, $63
14846     55 4F 53 4C 
1484a     53 53 4B 3E 
1484e     45 41 41 45 
14852     3F 3F 3B 37 | 	byte	$55, $4f, $53, $4c, $53, $53, $4b, $3e, $45, $41, $41, $45, $3f, $3f, $3b, $37
14856     36 3C 48 2D 
1485a     2B 37 29 25 
1485e     28 21 22 24 
14862     18 10 19 0A | 	byte	$36, $3c, $48, $2d, $2b, $37, $29, $25, $28, $21, $22, $24, $18, $10, $19, $0a
14866     11 12 00 0A 
1486a     08 FA 01 00 
1486e     FA FF FC F5 
14872     F7 F7 F2 F6 | 	byte	$11, $12, $00, $0a, $08, $fa, $01, $00, $fa, $ff, $fc, $f5, $f7, $f7, $f2, $f6
14876     F5 F0 EE EF 
1487a     EF E9 EC E2 
1487e     E2 DF DF D9 
14882     DF DB CF DB | 	byte	$f5, $f0, $ee, $ef, $ef, $e9, $ec, $e2, $e2, $df, $df, $d9, $df, $db, $cf, $db
14886     DA CC D5 D0 
1488a     D4 D8 D0 D4 
1488e     D6 DD E0 DF 
14892     E2 E6 E8 E8 | 	byte	$da, $cc, $d5, $d0, $d4, $d8, $d0, $d4, $d6, $dd, $e0, $df, $e2, $e6, $e8, $e8
14896     F0 F7 FC 03 
1489a     FB 01 12 0E 
1489e     15 11 18 21 
148a2     20 1C 29 2E | 	byte	$f0, $f7, $fc, $03, $fb, $01, $12, $0e, $15, $11, $18, $21, $20, $1c, $29, $2e
148a6     29 33 2F 2F 
148aa     3D 3F 3A 3D 
148ae     4A 49 4E 53 
148b2     53 57 66 60 | 	byte	$29, $33, $2f, $2f, $3d, $3f, $3a, $3d, $4a, $49, $4e, $53, $53, $57, $66, $60
148b6     5F 66 66 67 
148ba     72 6E 6D 77 
148be     6F 6E 7E 74 
148c2     73 7F 76 74 | 	byte	$5f, $66, $66, $67, $72, $6e, $6d, $77, $6f, $6e, $7e, $74, $73, $7f, $76, $74
148c6     7C 7B 7A 7A 
148ca     78 7A 7F 7E 
148ce     75 7B 7F 7E 
148d2     7F 79 7F 7D | 	byte	$7c, $7b, $7a, $7a, $78, $7a, $7f, $7e, $75, $7b, $7f, $7e, $7f, $79, $7f, $7d
148d6     78 77 76 79 
148da     6D 6D 70 6C 
148de     6D 61 61 5D 
148e2     5F 5B 53 54 | 	byte	$78, $77, $76, $79, $6d, $6d, $70, $6c, $6d, $61, $61, $5d, $5f, $5b, $53, $54
148e6     51 4A 4A 41 
148ea     3C 35 38 31 
148ee     22 2A 23 10 
148f2     15 0C 05 07 | 	byte	$51, $4a, $4a, $41, $3c, $35, $38, $31, $22, $2a, $23, $10, $15, $0c, $05, $07
148f6     00 F0 F6 E8 
148fa     E1 E8 DE D9 
148fe     D8 D0 CB C9 
14902     C7 BD B6 B1 | 	byte	$00, $f0, $f6, $e8, $e1, $e8, $de, $d9, $d8, $d0, $cb, $c9, $c7, $bd, $b6, $b1
14906     A9 A7 A6 98 
1490a     90 95 8E 8A 
1490e     87 81 82 82 
14912     81 81 82 81 | 	byte	$a9, $a7, $a6, $98, $90, $95, $8e, $8a, $87, $81, $82, $82, $81, $81, $82, $81
14916     81 81 81 81 
1491a     81 81 81 81 
1491e     81          | 	byte	$81[9]
1491f     82 83 82 82 
14923     84 85 82 89 
14927     88 86 87 89 
1492b     88 90 92 8D | 	byte	$82, $83, $82, $82, $84, $85, $82, $89, $88, $86, $87, $89, $88, $90, $92, $8d
1492f     97 9A 92 9F 
14933     9F 9C A7 A4 
14937     9C AB AD AA 
1493b     B2 B0 AB B7 | 	byte	$97, $9a, $92, $9f, $9f, $9c, $a7, $a4, $9c, $ab, $ad, $aa, $b2, $b0, $ab, $b7
1493f     B7 B5 BA BB 
14943     BC BC BD C2 
14947     C0 C5 BE C3 
1494b     C5 C4 C5 C9 | 	byte	$b7, $b5, $ba, $bb, $bc, $bc, $bd, $c2, $c0, $c5, $be, $c3, $c5, $c4, $c5, $c9
1494f     C2 C3 CB C6 
14953     C7 CE C9 C7 
14957     C6 D2 D2 CF 
1495b     D1 DD D8 DB | 	byte	$c2, $c3, $cb, $c6, $c7, $ce, $c9, $c7, $c6, $d2, $d2, $cf, $d1, $dd, $d8, $db
1495f     DB DB E1 E9 
14963     EA E9 E2 E6 
14967     F0 EE E7 F1 
1496b     F5 F7 FD F5 | 	byte	$db, $db, $e1, $e9, $ea, $e9, $e2, $e6, $f0, $ee, $e7, $f1, $f5, $f7, $fd, $f5
1496f     F9 09 04 05 
14973     0E 0E 15 20 
14977     17 1C 1F 21 
1497b     2B 32 2E 33 | 	byte	$f9, $09, $04, $05, $0e, $0e, $15, $20, $17, $1c, $1f, $21, $2b, $32, $2e, $33
1497f     31 33 3C 37 
14983     3E 37 34 42 
14987     3C 37 3F 38 
1498b     38 38 35 35 | 	byte	$31, $33, $3c, $37, $3e, $37, $34, $42, $3c, $37, $3f, $38, $38, $38, $35, $35
1498f     36 34 35 36 
14993     33 38 32 33 
14997     37 37 34 3B 
1499b     32 37 3B 3E | 	byte	$36, $34, $35, $36, $33, $38, $32, $33, $37, $37, $34, $3b, $32, $37, $3b, $3e
1499f     3C 3A 37 3B 
149a3     39 37 45 3D 
149a7     3C 3B 33 3E 
149ab     40 3B 3F 3C | 	byte	$3c, $3a, $37, $3b, $39, $37, $45, $3d, $3c, $3b, $33, $3e, $40, $3b, $3f, $3c
149af     38 40 40 44 
149b3     48 40 3D 4E 
149b7     48 4A 4E 44 
149bb     47 50 46 49 | 	byte	$38, $40, $40, $44, $48, $40, $3d, $4e, $48, $4a, $4e, $44, $47, $50, $46, $49
149bf     49 45 46 46 
149c3     3D 3B 43 42 
149c7     38 38 33 2F 
149cb     31 36 24 2A | 	byte	$49, $45, $46, $46, $3d, $3b, $43, $42, $38, $38, $33, $2f, $31, $36, $24, $2a
149cf     27 1F 20 1C 
149d3     12 1E 13 0D 
149d7     16 0D 06 09 
149db     08 06 01 01 | 	byte	$27, $1f, $20, $1c, $12, $1e, $13, $0d, $16, $0d, $06, $09, $08, $06, $01, $01
149df     01 01 FF FC 
149e3     FE 01 FB F8 
149e7     00 FE FD 01 
149eb     F8 FA 00 F8 | 	byte	$01, $01, $ff, $fc, $fe, $01, $fb, $f8, $00, $fe, $fd, $01, $f8, $fa, $00, $f8
149ef     FF 02 FB 02 
149f3     03 07 04 05 
149f7     0A 08 0E 0C 
149fb     0E 0F 0C 16 | 	byte	$ff, $02, $fb, $02, $03, $07, $04, $05, $0a, $08, $0e, $0c, $0e, $0f, $0c, $16
149ff     12 10 0A 0F 
14a03     0E 0B 0D 01 
14a07     03 04 FB FB 
14a0b     F3 F1 F2 EB | 	byte	$12, $10, $0a, $0f, $0e, $0b, $0d, $01, $03, $04, $fb, $fb, $f3, $f1, $f2, $eb
14a0f     E7 E5 DF DC 
14a13     D6 E1 DA D5 
14a17     D5 D1 CD D0 
14a1b     D0 C9 CB D0 | 	byte	$e7, $e5, $df, $dc, $d6, $e1, $da, $d5, $d5, $d1, $cd, $d0, $d0, $c9, $cb, $d0
14a1f     C7 C7 C9 C3 
14a23     C8 C8 C0 BE 
14a27     C5 C4 C4 C0 
14a2b     C4 CC C8 C7 | 	byte	$c7, $c7, $c9, $c3, $c8, $c8, $c0, $be, $c5, $c4, $c4, $c0, $c4, $cc, $c8, $c7
14a2f     CF D3 D7 DC 
14a33     D2 DD E3 EB 
14a37     EC EE F5 FD 
14a3b     FD 00 01 01 | 	byte	$cf, $d3, $d7, $dc, $d2, $dd, $e3, $eb, $ec, $ee, $f5, $fd, $fd, $00, $01, $01
14a3f     0E 0B 01 0A 
14a43     10 09 0B 11 
14a47     0C 07 10 0B 
14a4b     0A 16 11 10 | 	byte	$0e, $0b, $01, $0a, $10, $09, $0b, $11, $0c, $07, $10, $0b, $0a, $16, $11, $10
14a4f     10 08 0B 19 
14a53     12 0C 11 13 
14a57     0B 0E 08 0B 
14a5b     11 0D 03 06 | 	byte	$10, $08, $0b, $19, $12, $0c, $11, $13, $0b, $0e, $08, $0b, $11, $0d, $03, $06
14a5f     04 FE 08 02 
14a63     F1 F6 00 FD 
14a67     FB F9 F1 F7 
14a6b     01 F0 F4 FC | 	byte	$04, $fe, $08, $02, $f1, $f6, $00, $fd, $fb, $f9, $f1, $f7, $01, $f0, $f4, $fc
14a6f     F7 F5 FA F6 
14a73     F4 F2 EF F7 
14a77     EF ED EB E6 
14a7b     DF E1 D6 DC | 	byte	$f7, $f5, $fa, $f6, $f4, $f2, $ef, $f7, $ef, $ed, $eb, $e6, $df, $e1, $d6, $dc
14a7f     D4 CB CE C6 
14a83     C9 CB C2 C1 
14a87     C3 BE BF BA 
14a8b     BB BA B8 BB | 	byte	$d4, $cb, $ce, $c6, $c9, $cb, $c2, $c1, $c3, $be, $bf, $ba, $bb, $ba, $b8, $bb
14a8f     B8 B8 C1 C0 
14a93     B9 BF BA B4 
14a97     C3 C2 BF CB 
14a9b     CA C4 CA CE | 	byte	$b8, $b8, $c1, $c0, $b9, $bf, $ba, $b4, $c3, $c2, $bf, $cb, $ca, $c4, $ca, $ce
14a9f     C9 CD DB D9 
14aa3     DA DF DE E9 
14aa7     ED E2 EB F7 
14aab     F7 FD 06 FC | 	byte	$c9, $cd, $db, $d9, $da, $df, $de, $e9, $ed, $e2, $eb, $f7, $f7, $fd, $06, $fc
14aaf     06 16 11 17 
14ab3     1F 1D 29 2A 
14ab7     27 2C 31 30 
14abb     31 37 38 3D | 	byte	$06, $16, $11, $17, $1f, $1d, $29, $2a, $27, $2c, $31, $30, $31, $37, $38, $3d
14abf     3E 37 42 46 
14ac3     3E 3A 48 4B 
14ac7     47 49 47 4D 
14acb     53 54 55 51 | 	byte	$3e, $37, $42, $46, $3e, $3a, $48, $4b, $47, $49, $47, $4d, $53, $54, $55, $51
14acf     50 59 5D 56 
14ad3     4E 59 54 4A 
14ad7     4B 4A 4F 4F 
14adb     44 43 41 43 | 	byte	$50, $59, $5d, $56, $4e, $59, $54, $4a, $4b, $4a, $4f, $4f, $44, $43, $41, $43
14adf     44 40 40 40 
14ae3     38 3C 3A 36 
14ae7     30 30 32 2D 
14aeb     24 23 24 19 | 	byte	$44, $40, $40, $40, $38, $3c, $3a, $36, $30, $30, $32, $2d, $24, $23, $24, $19
14aef     18 18 08 07 
14af3     03 00 FD F1 
14af7     EA EC EB E4 
14afb     DB DF DA D2 | 	byte	$18, $18, $08, $07, $03, $00, $fd, $f1, $ea, $ec, $eb, $e4, $db, $df, $da, $d2
14aff     D7 C9 C3 C1 
14b03     BC BC B9 AF 
14b07     AB AE B0 A1 
14b0b     A6 AB A4 A1 | 	byte	$d7, $c9, $c3, $c1, $bc, $bc, $b9, $af, $ab, $ae, $b0, $a1, $a6, $ab, $a4, $a1
14b0f     9E 9C 9E 9F 
14b13     9B 9D 99 A3 
14b17     A6 A2 A6 AB 
14b1b     AB B3 B1 AC | 	byte	$9e, $9c, $9e, $9f, $9b, $9d, $99, $a3, $a6, $a2, $a6, $ab, $ab, $b3, $b1, $ac
14b1f     BA C2 C4 BE 
14b23     C9 D2 D1 CE 
14b27     D9 DC DE E9 
14b2b     E0 E0 E9 EA | 	byte	$ba, $c2, $c4, $be, $c9, $d2, $d1, $ce, $d9, $dc, $de, $e9, $e0, $e0, $e9, $ea
14b2f     F4 F5 F0 F5 
14b33     F9 FE 01 07 
14b37     0A 0B 0D 11 
14b3b     15 19 25 1E | 	byte	$f4, $f5, $f0, $f5, $f9, $fe, $01, $07, $0a, $0b, $0d, $11, $15, $19, $25, $1e
14b3f     25 2F 29 2B 
14b43     2F 33 3A 3F 
14b47     3B 3C 41 45 
14b4b     43 47 47 4A | 	byte	$25, $2f, $29, $2b, $2f, $33, $3a, $3f, $3b, $3c, $41, $45, $43, $47, $47, $4a
14b4f     4E 57 51 53 
14b53     59 55 62 6A 
14b57     5A 63 6D 69 
14b5b     6B 72 6E 70 | 	byte	$4e, $57, $51, $53, $59, $55, $62, $6a, $5a, $63, $6d, $69, $6b, $72, $6e, $70
14b5f     6C 70 6F 70 
14b63     6D 6D 6E 6B 
14b67     69 69 69 5E 
14b6b     67 68 5F 63 | 	byte	$6c, $70, $6f, $70, $6d, $6d, $6e, $6b, $69, $69, $69, $5e, $67, $68, $5f, $63
14b6f     60 55 62 56 
14b73     4E 52 4B 48 
14b77     42 41 41 36 
14b7b     35 37 31 2E | 	byte	$60, $55, $62, $56, $4e, $52, $4b, $48, $42, $41, $41, $36, $35, $37, $31, $2e
14b7f     25 1F 20 1D 
14b83     17 13 10 10 
14b87     08 01 02 06 
14b8b     FC FD F4 E9 | 	byte	$25, $1f, $20, $1d, $17, $13, $10, $10, $08, $01, $02, $06, $fc, $fd, $f4, $e9
14b8f     F2 EC E5 E0 
14b93     D2 D9 D6 D2 
14b97     CF CD CC CA 
14b9b     C7 C9 C7 C7 | 	byte	$f2, $ec, $e5, $e0, $d2, $d9, $d6, $d2, $cf, $cd, $cc, $ca, $c7, $c9, $c7, $c7
14b9f     C9 CA C7 CC 
14ba3     CA CB CE CC 
14ba7     CC CE CE CD 
14bab     D0 CB CB CC | 	byte	$c9, $ca, $c7, $cc, $ca, $cb, $ce, $cc, $cc, $ce, $ce, $cd, $d0, $cb, $cb, $cc
14baf     C9 D0 CC C6 
14bb3     CB CA C9 D0 
14bb7     CF CD CD CD 
14bbb     D2 D2 CB CF | 	byte	$c9, $d0, $cc, $c6, $cb, $ca, $c9, $d0, $cf, $cd, $cd, $cd, $d2, $d2, $cb, $cf
14bbf     D1 CA D2 D0 
14bc3     CE D5 D3 D3 
14bc7     D4 CC CF D3 
14bcb     D1 D0 D0 CC | 	byte	$d1, $ca, $d2, $d0, $ce, $d5, $d3, $d3, $d4, $cc, $cf, $d3, $d1, $d0, $d0, $cc
14bcf     CE CA CC CA 
14bd3     CD D0 C7 CF 
14bd7     CF C9 C6 CE 
14bdb     CD D0 CF C9 | 	byte	$ce, $ca, $cc, $ca, $cd, $d0, $c7, $cf, $cf, $c9, $c6, $ce, $cd, $d0, $cf, $c9
14bdf     CC D8 D1 D1 
14be3     D2 D1 D7 DD 
14be7     D8 D7 DA DD 
14beb     D4 D8 D3 D5 | 	byte	$cc, $d8, $d1, $d1, $d2, $d1, $d7, $dd, $d8, $d7, $da, $dd, $d4, $d8, $d3, $d5
14bef     DD D4 C9 CF 
14bf3     D3 D1 D0 D0 
14bf7     CF D0 D0 CF 
14bfb     D2 D6 D5 D5 | 	byte	$dd, $d4, $c9, $cf, $d3, $d1, $d0, $d0, $cf, $d0, $d0, $cf, $d2, $d6, $d5, $d5
14bff     DA D5 D7 DF 
14c03     DD DD E3 DD 
14c07     E2 E7 DB DF 
14c0b     E6 DE DB DD | 	byte	$da, $d5, $d7, $df, $dd, $dd, $e3, $dd, $e2, $e7, $db, $df, $e6, $de, $db, $dd
14c0f     DD DD DD DE 
14c13     E0 DB E1 E0 
14c17     E3 E6 E4 E8 
14c1b     EA ED F1 F2 | 	byte	$dd, $dd, $dd, $de, $e0, $db, $e1, $e0, $e3, $e6, $e4, $e8, $ea, $ed, $f1, $f2
14c1f     F2 F8 F8 F8 
14c23     FE 00 00 0C 
14c27     0A 0C 0D 0F 
14c2b     17 16 14 19 | 	byte	$f2, $f8, $f8, $f8, $fe, $00, $00, $0c, $0a, $0c, $0d, $0f, $17, $16, $14, $19
14c2f     1A 1F 21 1E 
14c33     23 29 2A 2B 
14c37     25 2D 36 2F 
14c3b     32 33 32 3A | 	byte	$1a, $1f, $21, $1e, $23, $29, $2a, $2b, $25, $2d, $36, $2f, $32, $33, $32, $3a
14c3f     39 34 3D 41 
14c43     3C 3E 3C 3E 
14c47     4A 45 3D 43 
14c4b     45 43 44 40 | 	byte	$39, $34, $3d, $41, $3c, $3e, $3c, $3e, $4a, $45, $3d, $43, $45, $43, $44, $40
14c4f     38 3B 3F 37 
14c53     39 38 30 33 
14c57     30 2C 32 2D 
14c5b     27 2D 2C 2D | 	byte	$38, $3b, $3f, $37, $39, $38, $30, $33, $30, $2c, $32, $2d, $27, $2d, $2c, $2d
14c5f     30 2F 2A 31 
14c63     31 2C 33 33 
14c67     2D 31 33 2D 
14c6b     2C 2F 2F 2F | 	byte	$30, $2f, $2a, $31, $31, $2c, $33, $33, $2d, $31, $33, $2d, $2c, $2f, $2f, $2f
14c6f     30 23 28 28 
14c73     23 2D 2B 22 
14c77     27 26 23 27 
14c7b     28 29 2A 28 | 	byte	$30, $23, $28, $28, $23, $2d, $2b, $22, $27, $26, $23, $27, $28, $29, $2a, $28
14c7f     23 28 2B 2F 
14c83     2C 29 28 2A 
14c87     26 25 26 24 
14c8b     21 23 20 18 | 	byte	$23, $28, $2b, $2f, $2c, $29, $28, $2a, $26, $25, $26, $24, $21, $23, $20, $18
14c8f     1F 1E 1A 17 
14c93     17 0D 12 12 
14c97     06 0D 12 09 
14c9b     01 06 08 09 | 	byte	$1f, $1e, $1a, $17, $17, $0d, $12, $12, $06, $0d, $12, $09, $01, $06, $08, $09
14c9f     05 04 07 09 
14ca3     09 09 06 08 
14ca7     0D 09 0C 0A 
14cab     07 0D 0F 09 | 	byte	$05, $04, $07, $09, $09, $09, $06, $08, $0d, $09, $0c, $0a, $07, $0d, $0f, $09
14caf     06 0B 09 08 
14cb3     06 06 08 09 
14cb7     02 02 08 08 
14cbb     05 0B 04 03 | 	byte	$06, $0b, $09, $08, $06, $06, $08, $09, $02, $02, $08, $08, $05, $0b, $04, $03
14cbf     09 07 03 05 
14cc3     08 04 04 FC 
14cc7     FA 00 FC F5 
14ccb     F3 F1 F1 ED | 	byte	$09, $07, $03, $05, $08, $04, $04, $fc, $fa, $00, $fc, $f5, $f3, $f1, $f1, $ed
14ccf     E5 EA EB E4 
14cd3     E2 E0 DC DF 
14cd7     DE DA D9 D7 
14cdb     D5 D5 D5 D2 | 	byte	$e5, $ea, $eb, $e4, $e2, $e0, $dc, $df, $de, $da, $d9, $d7, $d5, $d5, $d5, $d2
14cdf     D0 CE CC CB 
14ce3     C9 C9 C7 C5 
14ce7     C3 C2 C4 C3 
14ceb     C3 C4 C0 C4 | 	byte	$d0, $ce, $cc, $cb, $c9, $c9, $c7, $c5, $c3, $c2, $c4, $c3, $c3, $c4, $c0, $c4
14cef     C2 C3 C4 C1 
14cf3     C1 C2 C1 BF 
14cf7     BD C0 BF BE 
14cfb     BB BC BC BA | 	byte	$c2, $c3, $c4, $c1, $c1, $c2, $c1, $bf, $bd, $c0, $bf, $be, $bb, $bc, $bc, $ba
14cff     C1 C0 B8 BD 
14d03     C2 C3 C2 C2 
14d07     BD C4 C9 C6 
14d0b     C4 C1 C6 C6 | 	byte	$c1, $c0, $b8, $bd, $c2, $c3, $c2, $c2, $bd, $c4, $c9, $c6, $c4, $c1, $c6, $c6
14d0f     C7 C4 C2 C6 
14d13     C9 C4 C7 C5 
14d17     C7 CC CA C7 
14d1b     CE D0 CF D8 | 	byte	$c7, $c4, $c2, $c6, $c9, $c4, $c7, $c5, $c7, $cc, $ca, $c7, $ce, $d0, $cf, $d8
14d1f     D8 D9 DB DA 
14d23     DF E4 E2 E6 
14d27     E6 E8 E8 EB 
14d2b     F0 F1 F3 F9 | 	byte	$d8, $d9, $db, $da, $df, $e4, $e2, $e6, $e6, $e8, $e8, $eb, $f0, $f1, $f3, $f9
14d2f     FC FD 02 05 
14d33     07 10 0E 11 
14d37     18 1A 1F 1F 
14d3b     1E 27 28 27 | 	byte	$fc, $fd, $02, $05, $07, $10, $0e, $11, $18, $1a, $1f, $1f, $1e, $27, $28, $27
14d3f     27 24 26 2D 
14d43     2F 2B 27 2C 
14d47     2F 2C 2D 30 
14d4b     2F 31 35 35 | 	byte	$27, $24, $26, $2d, $2f, $2b, $27, $2c, $2f, $2c, $2d, $30, $2f, $31, $35, $35
14d4f     35 39 38 39 
14d53     3B 3A 38 3D 
14d57     3C 38 38 3A 
14d5b     38 3A 33 36 | 	byte	$35, $39, $38, $39, $3b, $3a, $38, $3d, $3c, $38, $38, $3a, $38, $3a, $33, $36
14d5f     3A 36 37 36 
14d63     32 35 37 37 
14d67     32 31 34 33 
14d6b     35 34 31 32 | 	byte	$3a, $36, $37, $36, $32, $35, $37, $37, $32, $31, $34, $33, $35, $34, $31, $32
14d6f     33 2D 2F 2E 
14d73     2B 2D 29 26 
14d77     2C 27 23 2B 
14d7b     21 1F 23 1E | 	byte	$33, $2d, $2f, $2e, $2b, $2d, $29, $26, $2c, $27, $23, $2b, $21, $1f, $23, $1e
14d7f     1C 20 1A 19 
14d83     1B 18 14 19 
14d87     16 0F 13 0F 
14d8b     0B 0E 0E 07 | 	byte	$1c, $20, $1a, $19, $1b, $18, $14, $19, $16, $0f, $13, $0f, $0b, $0e, $0e, $07
14d8f     0A 10 08 05 
14d93     0A 06 08 0E 
14d97     08 07 08 06 
14d9b     06 06 01 02 | 	byte	$0a, $10, $08, $05, $0a, $06, $08, $0e, $08, $07, $08, $06, $06, $06, $01, $02
14d9f     02 FC FB FA 
14da3     FA FA F5 F2 
14da7     F0 F3 F1 EA 
14dab     E8 E7 E8 E6 | 	byte	$02, $fc, $fb, $fa, $fa, $fa, $f5, $f2, $f0, $f3, $f1, $ea, $e8, $e7, $e8, $e6
14daf     E4 E5 E0 E2 
14db3     E3 E0 DF E0 
14db7     DE DC D8 D7 
14dbb     DA DA D6 D6 | 	byte	$e4, $e5, $e0, $e2, $e3, $e0, $df, $e0, $de, $dc, $d8, $d7, $da, $da, $d6, $d6
14dbf     D6 D4 D8 D7 
14dc3     D5 D8 D9 D8 
14dc7     D5 D9 D9 D8 
14dcb     DA D9 DB DF | 	byte	$d6, $d4, $d8, $d7, $d5, $d8, $d9, $d8, $d5, $d9, $d9, $d8, $da, $d9, $db, $df
14dcf     DC DE E0 E1 
14dd3     E2 E5 E3 E1 
14dd7     E5 E7 E2 E5 
14ddb     E7 E9 E9 E6 | 	byte	$dc, $de, $e0, $e1, $e2, $e5, $e3, $e1, $e5, $e7, $e2, $e5, $e7, $e9, $e9, $e6
14ddf     EA EB ED ED 
14de3     EE EF ED ED 
14de7     EF F2 F0 F0 
14deb     F1 F0 F0 F6 | 	byte	$ea, $eb, $ed, $ed, $ee, $ef, $ed, $ed, $ef, $f2, $f0, $f0, $f1, $f0, $f0, $f6
14def     F5 F9 FA FA 
14df3     F9 FB FE FE 
14df7     00 01 00 01 
14dfb     04 06 08 08 | 	byte	$f5, $f9, $fa, $fa, $f9, $fb, $fe, $fe, $00, $01, $00, $01, $04, $06, $08, $08
14dff     09 0B 0E 0B 
14e03     11 0F 0D 13 
14e07     10 11 14 15 
14e0b     15 16 17 17 | 	byte	$09, $0b, $0e, $0b, $11, $0f, $0d, $13, $10, $11, $14, $15, $15, $16, $17, $17
14e0f     18 1C 1B 1B 
14e13     1F 20 1F 1F 
14e17     20 20 23 20 
14e1b     1E 22 21 1F | 	byte	$18, $1c, $1b, $1b, $1f, $20, $1f, $1f, $20, $20, $23, $20, $1e, $22, $21, $1f
14e1f     1D 1C 1B 1A 
14e23     16 16 12 0E 
14e27     0D 0F 0C 0B 
14e2b     07 04 03 03 | 	byte	$1d, $1c, $1b, $1a, $16, $16, $12, $0e, $0d, $0f, $0c, $0b, $07, $04, $03, $03
14e2f     03 01 FE FD 
14e33     FE FB FB F8 
14e37     F8 FA F7 F7 
14e3b     F6 F5 F3 F2 | 	byte	$03, $01, $fe, $fd, $fe, $fb, $fb, $f8, $f8, $fa, $f7, $f7, $f6, $f5, $f3, $f2
14e3f     F3 F1 F1 F2 
14e43     F0 EF F0 EF 
14e47     F0 F3 F5 F3 
14e4b     F3 F3 F5 F9 | 	byte	$f3, $f1, $f1, $f2, $f0, $ef, $f0, $ef, $f0, $f3, $f5, $f3, $f3, $f3, $f5, $f9
14e4f     F7 F9 FA FA 
14e53     FD FE FD FD 
14e57     FE FD FE 00 
14e5b     FD FE 00 00 | 	byte	$f7, $f9, $fa, $fa, $fd, $fe, $fd, $fd, $fe, $fd, $fe, $00, $fd, $fe, $00, $00
14e5f     FD FE 00 FF 
14e63     00 FF 00 02 
14e67     02 01 01 05 
14e6b     05 08 07 09 | 	byte	$fd, $fe, $00, $ff, $00, $ff, $00, $02, $02, $01, $01, $05, $05, $08, $07, $09
14e6f     0B 09 09 0C 
14e73     0F 12 11 10 
14e77     11 16 15 16 
14e7b     19 16 19 1B | 	byte	$0b, $09, $09, $0c, $0f, $12, $11, $10, $11, $16, $15, $16, $19, $16, $19, $1b
14e7f     19 1A 1B 1B 
14e83     1A 19 17 16 
14e87     1C 1A 17 16 
14e8b     14 12 13 12 | 	byte	$19, $1a, $1b, $1b, $1a, $19, $17, $16, $1c, $1a, $17, $16, $14, $12, $13, $12
14e8f     0F 10 0C 09 
14e93     0B 08 05 06 
14e97     06 03 03 05 
14e9b     00 FC FE FB | 	byte	$0f, $10, $0c, $09, $0b, $08, $05, $06, $06, $03, $03, $05, $00, $fc, $fe, $fb
14e9f     FB F7 F3 F2 
14ea3     F2 F2 EB EA 
14ea7     EB E9 E6 E4 
14eab     E6 E6 E5 E2 | 	byte	$fb, $f7, $f3, $f2, $f2, $f2, $eb, $ea, $eb, $e9, $e6, $e4, $e6, $e6, $e5, $e2
14eaf     DF E1 E2 E0 
14eb3     DF DF E0 E3 
14eb7     E2 DF E1 E2 
14ebb     E0 E1 E1 DF | 	byte	$df, $e1, $e2, $e0, $df, $df, $e0, $e3, $e2, $df, $e1, $e2, $e0, $e1, $e1, $df
14ebf     E2 E5 E2 E0 
14ec3     E3 E5 E5 E5 
14ec7     E5 E6 E9 E9 
14ecb     E7 E9 EA EC | 	byte	$e2, $e5, $e2, $e0, $e3, $e5, $e5, $e5, $e5, $e6, $e9, $e9, $e7, $e9, $ea, $ec
14ecf     EB E9 EC EB 
14ed3     EA EF EC ED 
14ed7     EE F0 F2 F2 
14edb     F0 EE F2 F3 | 	byte	$eb, $e9, $ec, $eb, $ea, $ef, $ec, $ed, $ee, $f0, $f2, $f2, $f0, $ee, $f2, $f3
14edf     F5 F4 F3 F5 
14ee3     F7 FB FA F8 
14ee7     F9 F8 FB FC 
14eeb     F8 F9 FE FC | 	byte	$f5, $f4, $f3, $f5, $f7, $fb, $fa, $f8, $f9, $f8, $fb, $fc, $f8, $f9, $fe, $fc
14eef     FB FD FB FD 
14ef3     02 00 00 03 
14ef7     02 03 05 04 
14efb     05 09 08 05 | 	byte	$fb, $fd, $fb, $fd, $02, $00, $00, $03, $02, $03, $05, $04, $05, $09, $08, $05
14eff     08 0A 0B 0B 
14f03     0B 0B 0C 10 
14f07     0B 0B 12 0D 
14f0b     0D 12 10 11 | 	byte	$08, $0a, $0b, $0b, $0b, $0b, $0c, $10, $0b, $0b, $12, $0d, $0d, $12, $10, $11
14f0f     14 11 13 14 
14f13     13 13 12 11 
14f17     15 18 13 11 
14f1b     12 14 14 12 | 	byte	$14, $11, $13, $14, $13, $13, $12, $11, $15, $18, $13, $11, $12, $14, $14, $12
14f1f     0F 10 11 11 
14f23     11 10 10 0F 
14f27     10 10 0E 10 
14f2b     11 10 10 0C | 	byte	$0f, $10, $11, $11, $11, $10, $10, $0f, $10, $10, $0e, $10, $11, $10, $10, $0c
14f2f     0E 12 10 0B 
14f33     0C 0C 0B 0C 
14f37     09 08 08 06 
14f3b     07 07 05 06 | 	byte	$0e, $12, $10, $0b, $0c, $0c, $0b, $0c, $09, $08, $08, $06, $07, $07, $05, $06
14f3f     04 01 02 02 
14f43     02 03 00 FF 
14f47     00 00 FE FF 
14f4b     FF FE FD FD | 	byte	$04, $01, $02, $02, $02, $03, $00, $ff, $00, $00, $fe, $ff, $ff, $fe, $fd, $fd
14f4f     FB FA FA F7 
14f53     F7 F6 F5 F4 
14f57     F4 F0 ED EF 
14f5b     EC EB ED ED | 	byte	$fb, $fa, $fa, $f7, $f7, $f6, $f5, $f4, $f4, $f0, $ed, $ef, $ec, $eb, $ed, $ed
14f5f     EA EA E9 E9 
14f63     E9 EC ED EB 
14f67     EC EA EC F0 
14f6b     EF EE EF F1 | 	byte	$ea, $ea, $e9, $e9, $e9, $ec, $ed, $eb, $ec, $ea, $ec, $f0, $ef, $ee, $ef, $f1
14f6f     F1 F3 F7 F4 
14f73     F2 F4 F5 F8 
14f77     F7 F8 F9 F8 
14f7b     FA FD FB FD | 	byte	$f1, $f3, $f7, $f4, $f2, $f4, $f5, $f8, $f7, $f8, $f9, $f8, $fa, $fd, $fb, $fd
14f7f     01 03 03 05 
14f83     05 08 0C 0B 
14f87     0D 10 11 11 
14f8b     13 15 15 17 | 	byte	$01, $03, $03, $05, $05, $08, $0c, $0b, $0d, $10, $11, $11, $13, $15, $15, $17
14f8f     18 16 15 17 
14f93     18 18 16 15 
14f97     18 18 16 15 
14f9b     16 18 18 17 | 	byte	$18, $16, $15, $17, $18, $18, $16, $15, $18, $18, $16, $15, $16, $18, $18, $17
14f9f     15 17 17 17 
14fa3     1A 19 1A 1B 
14fa7     19 18 19 1B 
14fab     1B 19 19 1B | 	byte	$15, $17, $17, $17, $1a, $19, $1a, $1b, $19, $18, $19, $1b, $1b, $19, $19, $1b
14faf     1B 19 19 19 
14fb3     1B 19 18 18 
14fb7     19 18 18 18 
14fbb     17 17 17 15 | 	byte	$1b, $19, $19, $19, $1b, $19, $18, $18, $19, $18, $18, $18, $17, $17, $17, $15
14fbf     15 15 13 14 
14fc3     15 13 12 10 
14fc7     11 0F 0D 0B 
14fcb     08 08 05 03 | 	byte	$15, $15, $13, $14, $15, $13, $12, $10, $11, $0f, $0d, $0b, $08, $08, $05, $03
14fcf     02 01 FE FC 
14fd3     FA F7 F4 F5 
14fd7     F3 F0 EC E9 
14fdb     EC EB E9 E7 | 	byte	$02, $01, $fe, $fc, $fa, $f7, $f4, $f5, $f3, $f0, $ec, $e9, $ec, $eb, $e9, $e7
14fdf     E6 E3 E5 E6 
14fe3     E3 E1 E0 DF 
14fe7     E0 DE DA DB 
14feb     DE DB D8 D9 | 	byte	$e6, $e3, $e5, $e6, $e3, $e1, $e0, $df, $e0, $de, $da, $db, $de, $db, $d8, $d9
14fef     D9 DA DB DA 
14ff3     D8 D9 DA DC 
14ff7     DD DC DD DF 
14ffb     E2 E1 E2 E4 | 	byte	$d9, $da, $db, $da, $d8, $d9, $da, $dc, $dd, $dc, $dd, $df, $e2, $e1, $e2, $e4
14fff     E5 E7 E8 E8 
15003     E9 E9 EB EB 
15007     EB EB EB ED 
1500b     EC ED EE ED | 	byte	$e5, $e7, $e8, $e8, $e9, $e9, $eb, $eb, $eb, $eb, $eb, $ed, $ec, $ed, $ee, $ed
1500f     EF F0 F1 F2 
15013     F3 F4 F4 F7 
15017     F6 F6 F8 FC 
1501b     FD FB FE FE | 	byte	$ef, $f0, $f1, $f2, $f3, $f4, $f4, $f7, $f6, $f6, $f8, $fc, $fd, $fb, $fe, $fe
1501f     00 02 00 00 
15023     03 03 04 05 
15027     02 03 07 06 
1502b     08 08 07 08 | 	byte	$00, $02, $00, $00, $03, $03, $04, $05, $02, $03, $07, $06, $08, $08, $07, $08
1502f     0B 0C 0C 0E 
15033     0F 0E 0F 11 
15037     0F 11 14 11 
1503b     10 13 13 12 | 	byte	$0b, $0c, $0c, $0e, $0f, $0e, $0f, $11, $0f, $11, $14, $11, $10, $13, $13, $12
1503f     13 11 12 12 
15043     10 11 0F 0F 
15047     10 0E 0C 0B 
1504b     0C 0C 0B 0B | 	byte	$13, $11, $12, $12, $10, $11, $0f, $0f, $10, $0e, $0c, $0b, $0c, $0c, $0b, $0b
1504f     09 07 08 08 
15053     06 05 03 01 
15057     02 01 01 02 
1505b     00 00 01 FF | 	byte	$09, $07, $08, $08, $06, $05, $03, $01, $02, $01, $01, $02, $00, $00, $01, $ff
1505f     FE FF 00 00 
15063     FD FC FC FA 
15067     FB FA F8 F9 
1506b     F8 F7 F9 F9 | 	byte	$fe, $ff, $00, $00, $fd, $fc, $fc, $fa, $fb, $fa, $f8, $f9, $f8, $f7, $f9, $f9
1506f     F7 F6 FA FA 
15073     FA F9 FA FB 
15077     FA FC FD FB 
1507b     FC FD FC FC | 	byte	$f7, $f6, $fa, $fa, $fa, $f9, $fa, $fb, $fa, $fc, $fd, $fb, $fc, $fd, $fc, $fc
1507f     FD FD FC FB 
15083     FA F9 FB FC 
15087     FB F9 FA FB 
1508b     FB FC FC FB | 	byte	$fd, $fd, $fc, $fb, $fa, $f9, $fb, $fc, $fb, $f9, $fa, $fb, $fb, $fc, $fc, $fb
1508f     FD FE FD FC 
15093     FD FE 00 FF 
15097     FD FE FE FE 
1509b     FC FC FC FC | 	byte	$fd, $fe, $fd, $fc, $fd, $fe, $00, $ff, $fd, $fe, $fe, $fe, $fc, $fc, $fc, $fc
1509f     FC FB F9 F9 
150a3     F9 F8 F9 FA 
150a7     F8 F9 FB F9 
150ab     FA FC FA FB | 	byte	$fc, $fb, $f9, $f9, $f9, $f8, $f9, $fa, $f8, $f9, $fb, $f9, $fa, $fc, $fa, $fb
150af     FD FA FB FC 
150b3     FB FC FD FA 
150b7     FB FC FB FA 
150bb     FA FA FA FB | 	byte	$fd, $fa, $fb, $fc, $fb, $fc, $fd, $fa, $fb, $fc, $fb, $fa, $fa, $fa, $fa, $fb
150bf     FB F9 F9 FA 
150c3     F9 FB FC F9 
150c7     F9 FA FB FD 
150cb     FB FB FD FD | 	byte	$fb, $f9, $f9, $fa, $f9, $fb, $fc, $f9, $f9, $fa, $fb, $fd, $fb, $fb, $fd, $fd
150cf     FC FD 00 00 
150d3     00 00 00 01 
150d7     03 03 03 05 
150db     04 03 05 06 | 	byte	$fc, $fd, $00, $00, $00, $00, $00, $01, $03, $03, $03, $05, $04, $03, $05, $06
150df     05 07 07 05 
150e3     07 08 07 06 
150e7     06 09 09 08 
150eb     07 07 0A 0A | 	byte	$05, $07, $07, $05, $07, $08, $07, $06, $06, $09, $09, $08, $07, $07, $0a, $0a
150ef     0B 0B 0B 0C 
150f3     0F 0B 0B 0E 
150f7     0E 0F 10 0C 
150fb     0D 0F 0C 0C | 	byte	$0b, $0b, $0b, $0c, $0f, $0b, $0b, $0e, $0e, $0f, $10, $0c, $0d, $0f, $0c, $0c
150ff     0C 0B 0A 0B 
15103     09 09 0B 0A 
15107     0A 09 08 09 
1510b     0B 0A 09 09 | 	byte	$0c, $0b, $0a, $0b, $09, $09, $0b, $0a, $0a, $09, $08, $09, $0b, $0a, $09, $09
1510f     08 07 0B 09 
15113     07 08 08 07 
15117     08 07 04 05 
1511b     05 03 03 02 | 	byte	$08, $07, $0b, $09, $07, $08, $08, $07, $08, $07, $04, $05, $05, $03, $03, $02
1511f     02 02 02 01 
15123     00 00 02 01 
15127     00 01 01 01 
1512b     02 01 00 01 | 	byte	$02, $02, $02, $01, $00, $00, $02, $01, $00, $01, $01, $01, $02, $01, $00, $01
1512f     02 03 02 01 
15133     02 04 04 03 
15137     03 02 02 03 
1513b     04 03 02 02 | 	byte	$02, $03, $02, $01, $02, $04, $04, $03, $03, $02, $02, $03, $04, $03, $02, $02
1513f     01 02 02 01 
15143     01 00 00 00 
15147     00 FE 00 00 
1514b     00 FF FC FC | 	byte	$01, $02, $02, $01, $01, $00, $00, $00, $00, $fe, $00, $00, $00, $ff, $fc, $fc
1514f     FF FF FD FD 
15153     FC FD FD FB 
15157     FB FC FC FB 
1515b     FA F9 FB FC | 	byte	$ff, $ff, $fd, $fd, $fc, $fd, $fd, $fb, $fb, $fc, $fc, $fb, $fa, $f9, $fb, $fc
1515f     FB FA FB FA 
15163     FA FA FA FA 
15167     FB FA F9 F9 
1516b     F8 F8 F8 F8 | 	byte	$fb, $fa, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f8
1516f     F7 F8 F6 F6 
15173     F6 F5 F6 F6 
15177     F5 F5 F7 F5 
1517b     F4 F6 F6 F5 | 	byte	$f7, $f8, $f6, $f6, $f6, $f5, $f6, $f6, $f5, $f5, $f7, $f5, $f4, $f6, $f6, $f5
1517f     F6 F4 F6 F6 
15183     F5 F5 F5 F5 
15187     F7 F7 F6 F5 
1518b     F6 F6 F7 F7 | 	byte	$f6, $f4, $f6, $f6, $f5, $f5, $f5, $f5, $f7, $f7, $f6, $f5, $f6, $f6, $f7, $f7
1518f     F6 F6 F7 F7 
15193     F7 F8 F7 F7 
15197     F9 FA F9 FA 
1519b     FB FC FD FB | 	byte	$f6, $f6, $f7, $f7, $f7, $f8, $f7, $f7, $f9, $fa, $f9, $fa, $fb, $fc, $fd, $fb
1519f     FC FE FF 00 
151a3     00 FF 00 00 
151a7     01 02 03 02 
151ab     04 06 06 06 | 	byte	$fc, $fe, $ff, $00, $00, $ff, $00, $00, $01, $02, $03, $02, $04, $06, $06, $06
151af     07 08 0A 09 
151b3     09 0A 0B 0C 
151b7     0C 0C 0C 0E 
151bb     0F 0E 0C 0D | 	byte	$07, $08, $0a, $09, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0e, $0f, $0e, $0c, $0d
151bf     0F 0F 0F 0E 
151c3     0F 0F 0F 0D 
151c7     0E 0D 0D 0D 
151cb     0B 0B 0A 09 | 	byte	$0f, $0f, $0f, $0e, $0f, $0f, $0f, $0d, $0e, $0d, $0d, $0d, $0b, $0b, $0a, $09
151cf     09 08 07 07 
151d3     06 05 04 04 
151d7     03 02 01 01 
151db     00 00 FF 00 | 	byte	$09, $08, $07, $07, $06, $05, $04, $04, $03, $02, $01, $01, $00, $00, $ff, $00
151df     FE FD FD FD 
151e3     FD FD FB FB 
151e7     FB FB FA F9 
151eb     FA FA F9 F9 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fb, $fb, $fb, $fb, $fa, $f9, $fa, $fa, $f9, $f9
151ef     F8 F8 F8 F9 
151f3     FA F9 F8 F9 
151f7     F8 F7 F8 F9 
151fb     F7 F7 F7 F7 | 	byte	$f8, $f8, $f8, $f9, $fa, $f9, $f8, $f9, $f8, $f7, $f8, $f9, $f7, $f7, $f7, $f7
151ff     F8 F7 F7 F7 
15203     F7 F6 F7 F6 
15207     F7 F8 F7 F7 
1520b     F7 F6 F7 F8 | 	byte	$f8, $f7, $f7, $f7, $f7, $f6, $f7, $f6, $f7, $f8, $f7, $f7, $f7, $f6, $f7, $f8
1520f     F7 F6 F7 F6 
15213     F5 F5 F4 F4 
15217     F4 F3 F3 F1 
1521b     F2 F2 F3 F2 | 	byte	$f7, $f6, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f3, $f1, $f2, $f2, $f3, $f2
1521f     F1 F1 F1 F2 
15223     F3 F3 F2 F3 
15227     F4 F3 F4 F4 
1522b     F5 00 00 00 | 	byte	$f1, $f1, $f1, $f2, $f3, $f3, $f2, $f3, $f4, $f3, $f4, $f4, $f5, $00, $00, $00
1522f     00 E4 B1 EA 
15233     80 F5 0A 0B 
15237     02 15 9B 80 
1523b     40 D6 30 57 | 	byte	$00, $e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57
1523f     00 F2 58 E1 
15243     33 0F 9B 7C 
15247     41 90 94 3A 
1524b     AA 9D 0A AA | 	byte	$00, $f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa
1524f     E7 82 D2 E5 
15253     B0 C0 DD C6 
15257     F1 E9 08 06 
1525b     E3 F2 78 6C | 	byte	$e7, $82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c
1525f     AE 17 7E 48 
15263     62 44 F7 19 
15267     80 2C 64 3A 
1526b     34 67 0D 1D | 	byte	$ae, $17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d
1526f     4A D3 08 2C 
15273     1B EE 3C FC 
15277     B1 F3 DF F0 
1527b     DD BD DC CF | 	byte	$4a, $d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf
1527f     D5 CC D6 C3 
15283     A7 EC EB 99 
15287     A5 E2 E3 B9 
1528b     9A D3 10 E6 | 	byte	$d5, $cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6
1528f     94 E3 25 B7 
15293     BA 31 B5 D9 
15297     21 DF 08 09 
1529b     50 1B EA 5A | 	byte	$94, $e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a
1529f     28 14 53 51 
152a3     21 49 1A 27 
152a7     65 55 3F 63 
152ab     26 1C 38 43 | 	byte	$28, $14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43
152af     3F 38 2C 1A 
152b3     27 20 22 36 
152b7     47 22 23 F9 
152bb     0E 09 0B 48 | 	byte	$3f, $38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48
152bf     CD FD 25 EA 
152c3     0B F8 06 21 
152c7     DA 28 F5 B4 
152cb     E3 0A F5 E0 | 	byte	$cd, $fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0
152cf     F4 F6 F0 AC 
152d3     D8 EA E4 CF 
152d7     D5 DF B9 D3 
152db     C9 C5 C0 C4 | 	byte	$f4, $f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4
152df     BC 99 B8 A7 
152e3     A3 B4 B5 BF 
152e7     B4 99 C5 B3 
152eb     C4 CE CB DF | 	byte	$bc, $99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df
152ef     D2 DA 01 E2 
152f3     DC E0 07 01 
152f7     E3 F0 27 15 
152fb     FA 08 13 31 | 	byte	$d2, $da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31
152ff     F9 31 4A 17 
15303     2D 2D 54 38 
15307     4A 64 3B 4E 
1530b     63 62 51 77 | 	byte	$f9, $31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77
1530f     49 57 79 60 
15313     5B 6E 5E 71 
15317     76 42 68 7D 
1531b     62 38 53 3B | 	byte	$49, $57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b
1531f     4C 4A ED FA 
15323     63 2F FF 15 
15327     DF 05 08 DC 
1532b     EA E4 F3 01 | 	byte	$4c, $4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01
1532f     C1 A1 EE C2 
15333     D6 CE CE E3 
15337     D9 BD F2 C1 
1533b     D4 D0 DD B5 | 	byte	$c1, $a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5
1533f     BF BF D7 AA 
15343     C6 C3 B8 B2 
15347     BC B5 B2 A9 
1534b     A2 C3 BF AC | 	byte	$bf, $bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac
1534f     A0 C2 BF D4 
15353     CD 89 C6 D9 
15357     A8 C2 E8 DF 
1535b     AD CF EF E6 | 	byte	$a0, $c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6
1535f     CB FE D7 ED 
15363     02 E1 12 FF 
15367     FE 29 02 2A 
1536b     26 2B 42 34 | 	byte	$cb, $fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34
1536f     44 46 56 43 
15373     6B 71 55 6F 
15377     5F 6A 6E 3F 
1537b     5E 5E 59 66 | 	byte	$44, $46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66
1537f     6E 64 59 38 
15383     21 39 51 63 
15387     49 56 55 1E 
1538b     3D 3D 28 F6 | 	byte	$6e, $64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6
1538f     13 12 22 31 
15393     05 FC 2B ED 
15397     1A DF 22 07 
1539b     F3 DC F3 ED | 	byte	$13, $12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed
1539f     FC 0A FC C1 
153a3     F9 09 CA C8 
153a7     B9 B9 DD E9 
153ab     BF 96 D9 E0 | 	byte	$fc, $0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0
153af     C2 C2 AA CC 
153b3     A8 A6 C8 B8 
153b7     8A AE AD 98 
153bb     AC 89 D1 A5 | 	byte	$c2, $c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5
153bf     AA B7 D0 D5 
153c3     AA A7 B3 0B 
153c7     D2 D0 D8 02 
153cb     DB F3 DF 03 | 	byte	$aa, $b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03
153cf     D2 0F 14 EC 
153d3     1B 1A EB 22 
153d7     3D 1B 04 40 
153db     32 59 40 38 | 	byte	$d2, $0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38
153df     3C 31 4E 41 
153e3     61 65 5F 4F 
153e7     45 50 5F 6C 
153eb     6D 80 4F 40 | 	byte	$3c, $31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40
153ef     6C 57 51 62 
153f3     50 3D 45 32 
153f7     47 1D 4C 2E 
153fb     F3 1F 1F 3E | 	byte	$6c, $57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e
153ff     1B EA 17 FD 
15403     EA EF 11 E4 
15407     CE FC C9 DF 
1540b     B8 BA BD D2 | 	byte	$1b, $ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2
1540f     D7 B3 C3 8B 
15413     BD C6 98 D2 
15417     97 8F E5 8F 
1541b     9A B9 A1 95 | 	byte	$d7, $b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95
1541f     E7 AF 91 B3 
15423     CC CB A0 CE 
15427     DA C2 B7 D2 
1542b     F5 D5 E8 E8 | 	byte	$e7, $af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8
1542f     E0 F3 10 CD 
15433     FD 16 D2 1C 
15437     22 03 1B 08 
1543b     43 17 1C 2C | 	byte	$e0, $f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c
1543f     34 2A 37 26 
15443     4D 30 2E 2D 
15447     3D 53 30 6E 
1544b     2C 4A 5B 3A | 	byte	$34, $2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a
1544f     74 4E 45 65 
15453     3C 48 45 5A 
15457     80 2D 2B 37 
1545b     45 55 4B 53 | 	byte	$74, $4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53
1545f     1D 33 3F 45 
15463     2F 03 2B 35 
15467     05 2A 15 F3 
1546b     F5 E8 06 C5 | 	byte	$1d, $33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5
1546f     DB 03 A5 D0 
15473     FE 9E A9 BE 
15477     AF E0 C6 81 
1547b     BF E5 AF B2 | 	byte	$db, $03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2
1547f     BE B4 C8 AA 
15483     90 C6 B6 DA 
15487     BE 99 16 AD 
1548b     AA 0E AC BB | 	byte	$be, $b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb
1548f     D9 CE 0C 9C 
15493     03 FD AA 1C 
15497     02 DC F5 D1 
1549b     10 FF 09 F6 | 	byte	$d9, $ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6
1549f     0A 18 EB 49 
154a3     1D 2C 13 E3 
154a7     23 5A DC 14 
154ab     4B F7 43 12 | 	byte	$0a, $18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12
154af     10 47 27 25 
154b3     2A 26 3F 1E 
154b7     44 29 19 53 
154bb     35 22 4B 26 | 	byte	$10, $47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26
154bf     15 67 1B 41 
154c3     3A 21 5B 40 
154c7     2B 34 2A 2B 
154cb     50 15 13 36 | 	byte	$15, $67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36
154cf     43 18 2D 16 
154d3     EA 47 02 FF 
154d7     14 0B 0F E5 
154db     0A 16 C2 E7 | 	byte	$43, $18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7
154df     1C C7 F4 E7 
154e3     F0 DD E5 E7 
154e7     DF 8D E6 F3 
154eb     AB EF DE DA | 	byte	$1c, $c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da
154ef     D2 B0 ED D2 
154f3     AA E7 EC A6 
154f7     D8 C3 B1 F9 
154fb     9E C4 C2 A3 | 	byte	$d2, $b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3
154ff     CE C6 C6 B5 
15503     91 FC C8 C1 
15507     FA BD AB F1 
1550b     D5 D6 EE CA | 	byte	$ce, $c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca
1550f     F6 EC BD 31 
15513     FB C1 FD F4 
15517     1A 2F F8 19 
1551b     1D 27 07 24 | 	byte	$f6, $ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24
1551f     3B 31 0E 49 
15523     51 26 66 0B 
15527     45 5A 3B 4C 
1552b     4C 43 68 1E | 	byte	$3b, $31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e
1552f     74 35 25 70 
15533     49 2D 38 33 
15537     5D 25 33 31 
1553b     32 2A 44 45 | 	byte	$74, $35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45
1553f     2B 3D 21 0F 
15543     19 2F 24 30 
15547     0A E6 47 01 
1554b     E5 06 31 FD | 	byte	$2b, $3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd
1554f     D3 15 DF 12 
15553     D0 09 F8 CD 
15557     FC EF CB E6 
1555b     D3 E9 B8 E2 | 	byte	$d3, $15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2
1555f     E5 C5 E7 BD 
15563     D7 F2 BA 90 
15567     D9 E2 B6 BD 
1556b     BD C3 DF A9 | 	byte	$e5, $c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9
1556f     C1 B6 C1 F6 
15573     9F 8E C6 CF 
15577     CB D5 CA B5 
1557b     E1 B8 E2 DB | 	byte	$c1, $b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db
1557f     D6 DD EC E5 
15583     FC F0 00 15 
15587     EC 23 18 F3 
1558b     0E 30 0A 42 | 	byte	$d6, $dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42
1558f     47 1B 19 31 
15593     30 4D 2E 3D 
15597     40 1C 50 45 
1559b     2F 55 2A 32 | 	byte	$47, $1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32
1559f     4B 24 42 31 
155a3     30 27 40 3F 
155a7     3F 62 38 1C 
155ab     45 2F 43 04 | 	byte	$4b, $24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04
155af     40 44 06 3E 
155b3     15 45 36 02 
155b7     29 1D 1E 1D 
155bb     EF 00 14 08 | 	byte	$40, $44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08
155bf     EF 12 F4 EC 
155c3     F7 EC E3 E6 
155c7     E8 EA FA D1 
155cb     CD B3 0B F9 | 	byte	$ef, $12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9
155cf     AA A8 CC D6 
155d3     D1 D2 A2 B2 
155d7     BE E1 C8 9C 
155db     B8 BC CC A5 | 	byte	$aa, $a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5
155df     8E D7 DE C7 
155e3     CB BD EA DF 
155e7     CF F8 C2 BE 
155eb     F2 EB FE C9 | 	byte	$8e, $d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9
155ef     DC 0E D2 13 
155f3     F5 CE 28 1F 
155f7     E8 1D 04 F0 
155fb     1A 1D 24 FE | 	byte	$dc, $0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe
155ff     04 12 2C 0D 
15603     16 12 32 32 
15607     12 23 25 17 
1560b     3C 29 2A 47 | 	byte	$04, $12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47
1560f     48 07 46 41 
15613     32 22 3B 0D 
15617     2A 50 44 14 
1561b     0E 60 57 2A | 	byte	$48, $07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a
1561f     17 2F 17 38 
15623     2C 23 22 44 
15627     1E F0 0D 4A 
1562b     15 20 EE 2A | 	byte	$17, $2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a
1562f     02 18 41 E1 
15633     E5 2E F6 DC 
15637     04 F6 EF DE 
1563b     E8 E2 FA C5 | 	byte	$02, $18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5
1563f     DF F5 C8 C6 
15643     FE AD D4 E9 
15647     99 0C EE BE 
1564b     F0 A6 F5 BC | 	byte	$df, $f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc
1564f     DC B9 D4 FA 
15653     C9 DA D2 A8 
15657     D0 F0 E6 D6 
1565b     E0 DD CA C6 | 	byte	$dc, $b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6
1565f     F9 C5 D3 E8 
15663     00 D9 DB CF 
15667     EC 03 F1 F5 
1566b     E0 27 01 07 | 	byte	$f9, $c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07
1566f     38 08 D5 39 
15673     14 12 2A 17 
15677     11 2E 15 0B 
1567b     0C 21 40 18 | 	byte	$38, $08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18
1567f     11 20 16 2A 
15683     59 1C 01 47 
15687     3B 46 38 0F 
1568b     5F 0F 32 3C | 	byte	$11, $20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c
1568f     16 32 2E 31 
15693     1F 48 18 1D 
15697     31 06 44 1F 
1569b     0D 3E E7 05 | 	byte	$16, $32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05
1569f     3D 08 1E F9 
156a3     1A FC 04 EE 
156a7     18 F4 FA 05 
156ab     0A EB 02 E7 | 	byte	$3d, $08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7
156af     1D D0 E9 F4 
156b3     E5 DB FA CA 
156b7     E0 E3 BC 05 
156bb     D4 C8 BF 05 | 	byte	$1d, $d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05
156bf     D8 C6 E9 BF 
156c3     E6 C9 D9 EA 
156c7     BB C8 EF D1 
156cb     F9 DA D3 E9 | 	byte	$d8, $c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9
156cf     BB D9 FB CE 
156d3     DF ED E9 DC 
156d7     FE F7 FE EF 
156db     E4 0B D5 F0 | 	byte	$bb, $d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0
156df     FB 1A 1D E3 
156e3     0F 1F F6 1D 
156e7     FA 04 0A 19 
156eb     27 03 0B 35 | 	byte	$fb, $1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35
156ef     1F 05 20 29 
156f3     23 08 2A 34 
156f7     21 0B 3B 4D 
156fb     4F 00 49 30 | 	byte	$1f, $05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30
156ff     2F 36 03 04 
15703     2F 20 33 02 
15707     0C 49 1A 2C 
1570b     F2 05 08 03 | 	byte	$2f, $36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03
1570f     28 14 FE EB 
15713     00 1D EF 13 
15717     1B DD FA 00 
1571b     D7 FC 09 09 | 	byte	$28, $14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09
1571f     DE E3 05 F9 
15723     F1 CB DE 09 
15727     FC DA FA D1 
1572b     E7 0C C0 1C | 	byte	$de, $e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c
1572f     EA 9E FF E5 
15733     ED FD D3 EF 
15737     EE FA 04 F0 
1573b     E5 E8 EE FA | 	byte	$ea, $9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa
1573f     E6 EB D3 EC 
15743     1C F5 DC F8 
15747     E9 E5 14 EB 
1574b     F1 E8 ED 13 | 	byte	$e6, $eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13
1574f     19 03 C4 04 
15753     06 F2 0F 07 
15757     E2 0F 1C 02 
1575b     EB FE 09 1D | 	byte	$19, $03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d
1575f     08 1A 2C 0C 
15763     00 1C 26 07 
15767     06 11 16 12 
1576b     3C DE FE 1E | 	byte	$08, $1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e
1576f     08 15 1D 12 
15773     FB 3C E9 0D 
15777     12 1A 0D 02 
1577b     15 23 1D E9 | 	byte	$08, $15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9
1577f     01 FC 1A 1F 
15783     14 F9 F1 02 
15787     26 21 E3 02 
1578b     13 E3 12 FD | 	byte	$01, $fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd
1578f     11 E6 02 F1 
15793     12 F5 0B 0A 
15797     E7 EB 11 F1 
1579b     E4 0A 0F 15 | 	byte	$11, $e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15
1579f     0A F0 06 FB 
157a3     FB EE 09 F1 
157a7     E9 F6 12 F5 
157ab     05 FB F1 E7 | 	byte	$0a, $f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7
157af     41 E8 E5 08 
157b3     D7 0E 00 0B 
157b7     E1 E6 08 00 
157bb     EE EF DA FC | 	byte	$41, $e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc
157bf     EE EB 15 F2 
157c3     04 F8 DC 24 
157c7     03 F3 F7 E7 
157cb     F4 04 F8 01 | 	byte	$ee, $eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01
157cf     ED FB 10 F5 
157d3     ED 04 0A ED 
157d7     DF 05 01 13 
157db     E1 FF 09 ED | 	byte	$ed, $fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed
157df     1A 15 FE F6 
157e3     E1 10 24 1B 
157e7     E7 0F 0F 1B 
157eb     25 EE EF 27 | 	byte	$1a, $15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27
157ef     14 FD 12 F6 
157f3     19 1C 10 10 
157f7     EB FE 34 0C 
157fb     FB 0E 06 38 | 	byte	$14, $fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38
157ff     FD FD 22 D8 
15803     0C 1C 07 0A 
15807     19 E6 1A 0B 
1580b     09 1C E6 01 | 	byte	$fd, $fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01
1580f     1C F0 04 18 
15813     1C EE E4 07 
15817     05 FC 04 06 
1581b     E0 E7 11 01 | 	byte	$1c, $f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01
1581f     F7 0D DB 0A 
15823     F9 EC FB 15 
15827     08 DE 02 10 
1582b     CD 03 1E EB | 	byte	$f7, $0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb
1582f     EA E4 E4 06 
15833     FC FD EC D4 
15837     0F 09 F2 03 
1583b     02 D5 13 F1 | 	byte	$ea, $e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1
1583f     E3 02 15 E5 
15843     0F 08 EF F8 
15847     DD F7 02 09 
1584b     02 FD 02 00 | 	byte	$e3, $02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00
1584f     EE 0D FF 1E 
15853     F3 EC 03 0B 
15857     F0 0A 0A F5 
1585b     FB 0F 05 ED | 	byte	$ee, $0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed
1585f     0D 1B 11 FB 
15863     0A 02 19 2E 
15867     1F F2 24 FE 
1586b     F8 0B 25 12 | 	byte	$0d, $1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12
1586f     0D 00 1A EB 
15873     E9 2B 20 0B 
15877     E8 FA 21 22 
1587b     F7 EA 19 11 | 	byte	$0d, $00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11
1587f     03 F7 FE 12 
15883     0E FD 15 04 
15887     06 FD 01 17 
1588b     F0 19 0D F7 | 	byte	$03, $f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7
1588f     01 F7 09 0C 
15893     F1 19 0D E2 
15897     F7 03 E5 04 
1589b     F2 FF FE E8 | 	byte	$01, $f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8
1589f     01 02 E2 0E 
158a3     FF FD DC F1 
158a7     16 D4 F2 EF 
158ab     FA 01 01 0B | 	byte	$01, $02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b
158af     FB D4 F0 1C 
158b3     20 E3 D7 10 
158b7     F5 01 0A D5 
158bb     01 08 E9 F7 | 	byte	$fb, $d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7
158bf     EE 09 EF 16 
158c3     FD F5 0E 06 
158c7     14 E2 0E 14 
158cb     1A 0C F8 F6 | 	byte	$ee, $09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6
158cf     10 20 03 F0 
158d3     EF 17 F7 33 
158d7     0F D4 0E 0C 
158db     00 05 FD 0C | 	byte	$10, $20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c
158df     00 16 03 F6 
158e3     0F EA 0E 12 
158e7     0F 01 F6 F8 
158eb     0E 09 04 E1 | 	byte	$00, $16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1
158ef     FB 0D 02 03 
158f3     06 18 02 09 
158f7     04 EE 18 0B 
158fb     EB 1D 05 E6 | 	byte	$fb, $0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6
158ff     F8 0E 07 25 
15903     08 D9 11 0C 
15907     EE 26 11 F0 
1590b     FE 01 1D FC | 	byte	$f8, $0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc
1590f     14 06 0C 10 
15913     F1 09 EA EC 
15917     22 03 F2 05 
1591b     EE 16 15 00 | 	byte	$14, $06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00
1591f     FB 0E D8 FD 
15923     05 0D FD FB 
15927     E9 EA 09 E8 
1592b     F8 F9 EF DF | 	byte	$fb, $0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df
1592f     16 FA 01 E5 
15933     FD F3 03 FE 
15937     ED E8 F2 EA 
1593b     07 07 F9 F4 | 	byte	$16, $fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4
1593f     EF EE FB 0B 
15943     EC EC F7 FA 
15947     0A F0 10 F5 
1594b     ED 10 0A 04 | 	byte	$ef, $ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04
1594f     F3 15 F6 F4 
15953     0D FC 0C 1F 
15957     0F FD 01 F7 
1595b     23 FC 04 2F | 	byte	$f3, $15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f
1595f     09 F9 12 0B 
15963     0F 2E F8 12 
15967     10 00 26 10 
1596b     E6 1E FD 12 | 	byte	$09, $f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12
1596f     15 FB 01 20 
15973     0E EF 1A F4 
15977     FC 13 10 F8 
1597b     11 15 10 FA | 	byte	$15, $fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa
1597f     FA FF 08 08 
15983     09 F0 EA 02 
15987     15 E1 F3 0D 
1598b     E8 03 06 EF | 	byte	$fa, $ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef
1598f     E0 F8 01 06 
15993     EB FD 0D FB 
15997     EE 01 EE ED 
1599b     05 05 01 E8 | 	byte	$e0, $f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8
1599f     DE 18 FD F4 
159a3     F4 E4 FA F1 
159a7     FA FA FE 04 
159ab     E6 E9 03 D3 | 	byte	$de, $18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3
159af     0D FA FD EB 
159b3     FA 04 02 FD 
159b7     EE EF 2D EE 
159bb     0C 03 F3 FB | 	byte	$0d, $fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb
159bf     FB 02 04 09 
159c3     18 F7 17 1D 
159c7     FC FD 12 21 
159cb     15 01 0D 07 | 	byte	$fb, $02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07
159cf     13 FA F4 1F 
159d3     1B 1B F6 F4 
159d7     18 0B 16 FC 
159db     E3 10 1D 1E | 	byte	$13, $fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e
159df     01 E6 10 11 
159e3     E7 EF 22 0A 
159e7     F8 09 F9 E7 
159eb     15 FD 01 F2 | 	byte	$01, $e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2
159ef     F0 13 F6 F0 
159f3     FD 11 F1 F8 
159f7     0C F8 06 0A 
159fb     FD F4 0C 05 | 	byte	$f0, $13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05
159ff     EC FC FC FF 
15a03     0C F2 02 11 
15a07     EC DD 20 0A 
15a0b     0F E6 FD FF | 	byte	$ec, $fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff
15a0f     0D 03 EB 17 
15a13     FB FC F3 F4 
15a17     EF 07 0B FD 
15a1b     F5 00 DE 06 | 	byte	$0d, $03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06
15a1f     F8 E8 E9 05 
15a23     0F FC F2 DB 
15a27     0C 09 E7 F6 
15a2b     08 04 EF F8 | 	byte	$f8, $e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8
15a2f     0A F3 10 1D 
15a33     00 03 E5 01 
15a37     1C 07 07 12 
15a3b     FA 0D 18 F2 | 	byte	$0a, $f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2
15a3f     15 1B 04 F2 
15a43     0D 10 FB 09 
15a47     FC 0C 13 FA 
15a4b     07 33 EF FD | 	byte	$15, $1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd
15a4f     20 0C FE 0C 
15a53     FB 15 0C 0E 
15a57     08 F9 F0 11 
15a5b     18 F6 DB 19 | 	byte	$20, $0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19
15a5f     03 05 02 E0 
15a63     05 05 F5 04 
15a67     04 05 04 06 
15a6b     E9 EF 1A 0A | 	byte	$03, $05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a
15a6f     06 FE 00 07 
15a73     0B FB E6 FD 
15a77     FC 10 FA FC 
15a7b     E0 F0 0A EA | 	byte	$06, $fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea
15a7f     F1 E8 E5 F7 
15a83     FC EA FD F8 
15a87     DB 06 F7 E6 
15a8b     FA 04 FD E9 | 	byte	$f1, $e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9
15a8f     E9 06 07 0A 
15a93     E8 12 16 01 
15a97     00 F3 FF 2F 
15a9b     0A F8 0D 20 | 	byte	$e9, $06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20
15a9f     10 08 ED 13 
15aa3     1B 0E 0D F3 
15aa7     03 16 FC 0E 
15aab     08 06 08 FD | 	byte	$10, $08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd
15aaf     09 0D 20 FC 
15ab3     EF 18 0D F7 
15ab7     0F EE FE 05 
15abb     0B EE ED 1A | 	byte	$09, $0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a
15abf     1D F6 08 F1 
15ac3     F5 04 FF 1E 
15ac7     EA F0 10 FE 
15acb     06 19 FF FE | 	byte	$1d, $f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe
15acf     00 FD 02 0B 
15ad3     FA 01 0C 00 
15ad7     F3 02 08 0B 
15adb     F5 0C FC F8 | 	byte	$00, $fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8
15adf     E2 0B FD FA 
15ae3     F5 EB FC F7 
15ae7     E0 F6 FF 15 
15aeb     F6 EE F5 E6 | 	byte	$e2, $0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6
15aef     E4 FF FF 06 
15af3     E9 F2 F2 FC 
15af7     03 FE 06 FF 
15afb     EE 13 05 F4 | 	byte	$e4, $ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4
15aff     0F 1D 23 00 
15b03     08 15 01 00 
15b07     23 0E 03 13 
15b0b     02 1B 08 12 | 	byte	$0f, $1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12
15b0f     0F 02 09 FD 
15b13     11 03 08 01 
15b17     05 03 16 08 
15b1b     0B FE 05 04 | 	byte	$0f, $02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04
15b1f     0B E3 FB 1D 
15b23     03 05 01 09 
15b27     09 01 FD FF 
15b2b     ED EC 08 0A | 	byte	$0b, $e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a
15b2f     F5 E5 F7 16 
15b33     01 F9 E2 FA 
15b37     E1 06 01 F9 
15b3b     02 F1 E0 FB | 	byte	$f5, $e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb
15b3f     0C 06 E9 DD 
15b43     F6 14 01 08 
15b47     EC FD 0A 03 
15b4b     01 EB F7 00 | 	byte	$0c, $06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00
15b4f     10 E7 00 08 
15b53     06 11 FA EF 
15b57     13 EF F4 05 
15b5b     0E FE F6 F7 | 	byte	$10, $e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7
15b5f     20 FB 04 02 
15b63     FE 01 F4 0F 
15b67     2C 09 02 09 
15b6b     01 0F 13 08 | 	byte	$20, $fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08
15b6f     F6 0F 14 0D 
15b73     FA 08 15 F5 
15b77     31 11 E5 0A 
15b7b     11 02 19 11 | 	byte	$f6, $0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11
15b7f     FD FB 0D 0C 
15b83     FA 03 05 00 
15b87     00 01 03 05 
15b8b     08 09 01 D9 | 	byte	$fd, $fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9
15b8f     12 04 E2 04 
15b93     07 F8 E6 FC 
15b97     ED 01 0B F3 
15b9b     FC ED FF 05 | 	byte	$12, $04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05
15b9f     EC F4 0C FF 
15ba3     F8 F3 F7 F7 
15ba7     08 F4 F9 03 
15bab     F4 F4 F5 F2 | 	byte	$ec, $f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2
15baf     FD 0A F7 FE 
15bb3     F7 ED 08 10 
15bb7     EF FD F3 01 
15bbb     03 F2 F8 F1 | 	byte	$fd, $0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1
15bbf     08 FE 08 FA 
15bc3     F2 FA 10 05 
15bc7     F2 03 03 18 
15bcb     07 E9 17 18 | 	byte	$08, $fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18
15bcf     04 0B 10 0C 
15bd3     FC 16 FE 09 
15bd7     1C 0B 10 09 
15bdb     14 1C 11 14 | 	byte	$04, $0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14
15bdf     0B 06 05 0F 
15be3     0F 18 19 17 
15be7     F4 0E 07 12 
15beb     18 06 EF 0B | 	byte	$0b, $06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b
15bef     12 FA FB F5 
15bf3     02 02 06 FD 
15bf7     F3 E9 F3 F6 
15bfb     EF FC FB E8 | 	byte	$12, $fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8
15bff     EA EF F3 F8 
15c03     FC F2 F2 EB 
15c07     DD E8 10 F9 
15c0b     F1 04 FA E2 | 	byte	$ea, $ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2
15c0f     F5 FC F2 05 
15c13     00 E8 F5 03 
15c17     FB E7 FD 01 
15c1b     FC F1 03 03 | 	byte	$f5, $fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03
15c1f     F3 F0 FC F8 
15c23     01 FB 0C EA 
15c27     08 15 09 FC 
15c2b     FA 0A 00 F7 | 	byte	$f3, $f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7
15c2f     19 08 09 F9 
15c33     0C 0F 0A 08 
15c37     1A FA 1F 10 
15c3b     03 FC 0D 27 | 	byte	$19, $08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27
15c3f     18 07 10 06 
15c43     1A 18 16 F7 
15c47     21 13 0D 1F 
15c4b     F7 1A 0B 09 | 	byte	$18, $07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09
15c4f     FE 17 11 1E 
15c53     F1 F2 0E 1D 
15c57     FD 00 F4 F5 
15c5b     14 00 F5 F3 | 	byte	$fe, $17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3
15c5f     FC FE ED F9 
15c63     F1 F9 F2 01 
15c67     F7 F3 FB E6 
15c6b     F4 F0 FE EB | 	byte	$fc, $fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb
15c6f     EB F3 E7 F6 
15c73     EE F3 E6 E4 
15c77     08 F3 DF EC 
15c7b     FB 00 F1 F8 | 	byte	$eb, $f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8
15c7f     F5 F3 F4 FE 
15c83     09 F5 F9 FF 
15c87     02 0A FC FE 
15c8b     F9 0D 06 F9 | 	byte	$f5, $f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9
15c8f     07 17 11 05 
15c93     FF EE 05 0E 
15c97     0E 0E 17 F5 
15c9b     03 10 05 08 | 	byte	$07, $17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08
15c9f     12 12 FE 0A 
15ca3     22 1B FE 16 
15ca7     17 16 FF 0B 
15cab     23 14 0A 0D | 	byte	$12, $12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d
15caf     10 03 11 14 
15cb3     02 FC 13 12 
15cb7     17 F5 04 0D 
15cbb     02 04 0F F0 | 	byte	$10, $03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0
15cbf     FB 0E 08 F2 
15cc3     F8 F9 0E F6 
15cc7     F6 01 F9 F5 
15ccb     EB F8 02 F7 | 	byte	$fb, $0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7
15ccf     FA F0 05 F6 
15cd3     05 E7 E0 0A 
15cd7     F2 02 FE EC 
15cdb     F3 09 F7 EC | 	byte	$fa, $f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec
15cdf     F5 F5 EF 03 
15ce3     F7 F9 08 FB 
15ce7     EA 05 F1 FD 
15ceb     FC 0B F5 F4 | 	byte	$f5, $f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4
15cef     F1 F1 08 11 
15cf3     FE E6 FE F1 
15cf7     0C 12 03 F4 
15cfb     FD 06 12 12 | 	byte	$f1, $f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12
15cff     F3 0C 02 12 
15d03     F4 0F 02 08 
15d07     09 10 11 02 
15d0b     FC 10 17 F7 | 	byte	$f3, $0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7
15d0f     05 0D 1A 08 
15d13     00 0F 07 F8 
15d17     0F 12 0A 1C 
15d1b     08 FB 0C 15 | 	byte	$05, $0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15
15d1f     12 F9 0F 1A 
15d23     0E FD 13 13 
15d27     04 02 04 02 
15d2b     F6 11 03 03 | 	byte	$12, $f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03
15d2f     0A E8 01 FC 
15d33     FB EF 0A 06 
15d37     EE F2 FA E6 
15d3b     F6 F9 04 F2 | 	byte	$0a, $e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2
15d3f     DF F8 FC F0 
15d43     EB E4 FD FC 
15d47     F4 F6 F0 FB 
15d4b     F3 FA 00 EA | 	byte	$df, $f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea
15d4f     08 F3 E0 01 
15d53     FC E1 17 03 
15d57     E4 FF FD FF 
15d5b     02 ED 09 FF | 	byte	$08, $f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff
15d5f     F5 F7 0B 03 
15d63     08 09 05 00 
15d67     F6 1B F4 06 
15d6b     1F 01 F8 FD | 	byte	$f5, $f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd
15d6f     0D 11 09 08 
15d73     06 0C 02 0E 
15d77     03 FB 1D 0A 
15d7b     11 08 F8 16 | 	byte	$0d, $11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16
15d7f     20 F9 07 12 
15d83     FD 0D 15 08 
15d87     FD 0F 03 17 
15d8b     00 FE 08 1F | 	byte	$20, $f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f
15d8f     00 04 11 F8 
15d93     01 01 F7 14 
15d97     03 00 01 F7 
15d9b     05 FD F1 FE | 	byte	$00, $04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe
15d9f     19 02 EB F4 
15da3     F5 01 08 EF 
15da7     FE 00 F9 EB 
15dab     FD F5 FC F2 | 	byte	$19, $02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2
15daf     F8 FD F3 F1 
15db3     06 F1 FC F6 
15db7     FB F9 02 F6 
15dbb     F3 01 FA 02 | 	byte	$f8, $fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02
15dbf     FB FD F6 FC 
15dc3     0B F5 F6 FE 
15dc7     F8 04 FE FE 
15dcb     FC 12 02 F2 | 	byte	$fb, $fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2
15dcf     06 0B FF 04 
15dd3     FB 0F FC 0F 
15dd7     10 F9 11 0B 
15ddb     FD F6 09 1C | 	byte	$06, $0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c
15ddf     0B 00 04 06 
15de3     18 0C F8 F5 
15de7     14 0C 02 10 
15deb     FE 03 06 03 | 	byte	$0b, $00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03
15def     08 06 FE 01 
15df3     0F 03 FB 01 
15df7     07 09 07 0A 
15dfb     0B F4 FC 07 | 	byte	$08, $06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07
15dff     01 FD 0B FD 
15e03     FF F9 09 F4 
15e07     EF 0A 02 F6 
15e0b     FD F5 F4 FF | 	byte	$01, $fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff
15e0f     10 03 ED 02 
15e13     F8 F4 F9 0A 
15e17     FD F8 FE FF 
15e1b     F9 FD 02 EC | 	byte	$10, $03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec
15e1f     06 F7 FB FE 
15e23     04 FD 01 FD 
15e27     FC F3 01 FB 
15e2b     FF FB FF 0A | 	byte	$06, $f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a
15e2f     F9 FD FE 04 
15e33     0B F9 F5 08 
15e37     0E FE FF 0E 
15e3b     00 06 05 0B | 	byte	$f9, $fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b
15e3f     0A FD 09 10 
15e43     F1 06 08 FC 
15e47     0A FD FF 06 
15e4b     01 FB 08 F6 | 	byte	$0a, $fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6
15e4f     F9 07 10 FA 
15e53     FA F4 0D 09 
15e57     01 00 F8 F9 
15e5b     0B FC F1 0B | 	byte	$f9, $07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b
15e5f     0F 05 FA 0B 
15e63     F5 01 08 09 
15e67     FF F1 03 04 
15e6b     07 06 FF 04 | 	byte	$0f, $05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04
15e6f     FA FC FC 14 
15e73     00 F4 FB 03 
15e77     FA 0E 02 F5 
15e7b     06 FD 00 FA | 	byte	$fa, $fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa
15e7f     03 00 0F 04 
15e83     F7 FF 02 0E 
15e87     FC F7 10 09 
15e8b     EB 06 11 FD | 	byte	$03, $00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd
15e8f     FE F1 FB 0A 
15e93     FE FF FA FD 
15e97     08 07 04 ED 
15e9b     F9 02 08 0A | 	byte	$fe, $f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a
15e9f     FE 00 FD 03 
15ea3     08 FE 06 00 
15ea7     07 01 FA 03 
15eab     0D FA FF 02 | 	byte	$fe, $00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02
15eaf     03 08 11 F6 
15eb3     09 FF F9 06 
15eb7     07 F5 0C FC 
15ebb     0B F7 F4 00 | 	byte	$03, $08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00
15ebf     08 F6 02 FB 
15ec3     05 F7 FC 03 
15ec7     07 0C F1 FA 
15ecb     15 F2 00 FD | 	byte	$08, $f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd
15ecf     F5 18 03 ED 
15ed3     07 F2 0B 0A 
15ed7     09 FB 0F FE 
15edb     02 0E F9 F7 | 	byte	$f5, $18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7
15edf     0D 0A F7 FE 
15ee3     0A 02 F8 03 
15ee7     0C F3 07 05 
15eeb     FA F2 06 FE | 	byte	$0d, $0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe
15eef     03 0A EC 03 
15ef3     03 FC 06 F6 
15ef7     F9 0E 05 F4 
15efb     FC FB 06 0F | 	byte	$03, $0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f
15eff     F8 FB FF FB 
15f03     FF 19 FB F5 
15f07     FE FD 0A 07 
15f0b     0A F8 04 04 | 	byte	$f8, $fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04
15f0f     10 06 FC 0E 
15f13     FB F6 0C 14 
15f17     F6 FA 12 08 
15f1b     08 FE 08 04 | 	byte	$10, $06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04
15f1f     01 00 10 0B 
15f23     05 02 F6 0B 
15f27     0B FE 04 01 
15f2b     F5 FA 0C FF | 	byte	$01, $00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff
15f2f     F1 0A 08 F8 
15f33     02 FD FC 04 
15f37     F7 FF FA F3 
15f3b     12 F7 EF FD | 	byte	$f1, $0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd
15f3f     0D FA F5 05 
15f43     FA EE 10 F3 
15f47     F4 05 FC 00 
15f4b     04 F9 09 FB | 	byte	$0d, $fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb
15f4f     F0 FB 0D 01 
15f53     FA F6 FF 0A 
15f57     06 EA 02 FF 
15f5b     F7 05 FE 07 | 	byte	$f0, $fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07
15f5f     01 FB FA 0F 
15f63     0D F0 FE 09 
15f67     0A FD FE 01 
15f6b     0B 00 01 10 | 	byte	$01, $fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10
15f6f     04 FE 01 09 
15f73     FE 03 03 0A 
15f77     05 FF 10 07 
15f7b     F7 02 0F 0E | 	byte	$04, $fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e
15f7f     ED 05 0B FF 
15f83     FF 0A 08 FB 
15f87     06 09 F2 05 
15f8b     10 FE FB 02 | 	byte	$ed, $05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02
15f8f     07 06 08 F8 
15f93     F4 07 FD FF 
15f97     08 FA 02 0D 
15f9b     FD E8 00 04 | 	byte	$07, $06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04
15f9f     04 05 F3 F4 
15fa3     0D 09 09 EC 
15fa7     F9 0E F7 FF 
15fab     FB FE 0E 04 | 	byte	$04, $05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04
15faf     F2 08 FB F5 
15fb3     FE F4 FD 05 
15fb7     05 F0 08 F3 
15fbb     FE FF F2 FB | 	byte	$f2, $08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb
15fbf     00 FD F9 04 
15fc3     FD FC FC 04 
15fc7     FC F8 07 F1 
15fcb     FC FD 04 01 | 	byte	$00, $fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01
15fcf     FE F9 03 FE 
15fd3     16 06 FA E8 
15fd7     14 13 FB FD 
15fdb     10 03 FE 0C | 	byte	$fe, $f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c
15fdf     04 F7 01 0C 
15fe3     01 F7 0B 0A 
15fe7     0A 00 03 00 
15feb     03 0D 07 02 | 	byte	$04, $f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02
15fef     FE 13 08 03 
15ff3     04 01 0C 0A 
15ff7     F8 03 13 FD 
15ffb     01 07 F5 14 | 	byte	$fe, $13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14
15fff     15 F7 F7 0C 
16003     FF FF FF FA 
16007     08 00 01 0B 
1600b     FE F6 FD FD | 	byte	$15, $f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd
1600f     05 00 FB F6 
16013     02 FA 03 09 
16017     02 F0 F9 F6 
1601b     06 FE FB 04 | 	byte	$05, $00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04
1601f     F5 F6 02 F9 
16023     06 FA EF 01 
16027     05 F9 FD 00 
1602b     FD 06 00 F8 | 	byte	$f5, $f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8
1602f     00 FF 03 05 
16033     F7 FB 06 F7 
16037     00 00 08 FB 
1603b     F9 FF 04 03 | 	byte	$00, $ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03
1603f     0A F6 F6 07 
16043     01 F9 05 F8 
16047     08 01 08 05 
1604b     01 FB 0C 00 | 	byte	$0a, $f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00
1604f     F5 00 0A FD 
16053     01 15 FE 00 
16057     FC 10 0A FD 
1605b     FB 07 FF F9 | 	byte	$f5, $00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9
1605f     0B 03 01 0D 
16063     FB F7 13 07 
16067     02 03 F1 0B 
1606b     0E 07 FA 02 | 	byte	$0b, $03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02
1606f     F4 11 0C FA 
16073     F9 0E 01 05 
16077     FF FE FD 07 
1607b     02 01 03 FE | 	byte	$f4, $11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe
1607f     FE 09 F6 0C 
16083     01 F9 F3 0A 
16087     05 FA F8 FF 
1608b     11 05 F2 F5 | 	byte	$fe, $09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5
1608f     07 08 08 FB 
16093     FB 07 FB 04 
16097     03 F7 00 F9 
1609b     FE 0B 02 F8 | 	byte	$07, $08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8
1609f     09 FC 05 F8 
160a3     F9 0A FE 08 
160a7     0F FA F6 FF 
160ab     09 0D FD F9 | 	byte	$09, $fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9
160af     08 FF 04 04 
160b3     FA 01 0E F8 
160b7     01 03 01 FD 
160bb     FF 01 01 FB | 	byte	$08, $ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb
160bf     06 FF F3 0F 
160c3     13 F4 F8 00 
160c7     05 0E 03 F8 
160cb     07 FF F7 04 | 	byte	$06, $ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04
160cf     FC F8 11 0A 
160d3     FA FA FC FE 
160d7     FF FD 11 FE 
160db     F1 07 03 FD | 	byte	$fc, $f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd
160df     00 F4 0B 06 
160e3     F4 FA 0D 03 
160e7     F2 03 07 FA 
160eb     00 08 05 FF | 	byte	$00, $f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff
160ef     FC 0D FE F1 
160f3     06 0F FD F8 
160f7     05 07 07 F9 
160fb     F9 0A FF FE | 	byte	$fc, $0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe
160ff     0E 01 FA 02 
16103     05 FF 01 00 
16107     09 05 02 0C 
1610b     0C 0C F9 01 | 	byte	$0e, $01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01
1610f     00 FE 0E 08 
16113     F2 03 0A 08 
16117     01 FE FA 04 
1611b     FA 06 FF FE | 	byte	$00, $fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe
1611f     04 01 00 FC 
16123     FA 03 09 F2 
16127     FE FF 06 F9 
1612b     02 FD 01 0B | 	byte	$04, $01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b
1612f     F0 F9 08 05 
16133     04 0B F7 00 
16137     00 01 01 07 
1613b     F4 FC 07 05 | 	byte	$f0, $f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05
1613f     00 ED 0E 09 
16143     F0 05 02 FD 
16147     09 FB F9 F6 
1614b     11 F8 05 02 | 	byte	$00, $ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02
1614f     01 ED 02 0B 
16153     F6 F7 06 F9 
16157     FA 07 F4 F5 
1615b     0B F0 F9 01 | 	byte	$01, $ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01
1615f     04 FA FA F8 
16163     01 FF 01 08 
16167     FA FD 01 05 
1616b     06 FC 05 FF | 	byte	$04, $fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff
1616f     02 15 FF F5 
16173     15 01 F8 0F 
16177     04 08 04 0B 
1617b     02 00 12 14 | 	byte	$02, $15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14
1617f     05 FA 0C 02 
16183     0B 0F 05 FE 
16187     09 08 FE 06 
1618b     0E 08 F5 09 | 	byte	$05, $fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09
1618f     07 0A 0B 03 
16193     FB 04 F5 0A 
16197     10 05 F6 06 
1619b     FD 06 00 01 | 	byte	$07, $0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01
1619f     08 FA FF 03 
161a3     FD FE F6 FA 
161a7     F7 04 0A F5 
161ab     01 FC FF F1 | 	byte	$08, $fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1
161af     07 03 F6 EF 
161b3     FE FC FF 01 
161b7     F8 F4 F4 FB 
161bb     FF F1 FD 00 | 	byte	$07, $03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00
161bf     FB F3 F5 F8 
161c3     F9 01 03 E9 
161c7     FE FF FB FE 
161cb     F9 00 00 00 | 	byte	$fb, $f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00, $00
161cf     00 01 02 00 
161d3     02 FF 01 00 
161d7     FC 08 07 EC 
161db     2B D3 10 D9 | 	byte	$00, $01, $02, $00, $02, $ff, $01, $00, $fc, $08, $07, $ec, $2b, $d3, $10, $d9
161df     55 B5 FE 4F 
161e3     DF C5 78 BE 
161e7     28 05 E6 2E 
161eb     BC 5D D1 05 | 	byte	$55, $b5, $fe, $4f, $df, $c5, $78, $be, $28, $05, $e6, $2e, $bc, $5d, $d1, $05
161ef     E9 27 DB 2E 
161f3     D0 2E C0 57 
161f7     97 33 D0 1D 
161fb     F7 CD 3A CC | 	byte	$e9, $27, $db, $2e, $d0, $2e, $c0, $57, $97, $33, $d0, $1d, $f7, $cd, $3a, $cc
161ff     3C 8F 6C 96 
16203     60 A3 63 A7 
16207     4A DE 08 0F 
1620b     03 DD 25 EC | 	byte	$3c, $8f, $6c, $96, $60, $a3, $63, $a7, $4a, $de, $08, $0f, $03, $dd, $25, $ec
1620f     1B A9 68 A6 
16213     3B C4 5E 90 
16217     5E B8 7F 87 
1621b     67 D9 F6 38 | 	byte	$1b, $a9, $68, $a6, $3b, $c4, $5e, $90, $5e, $b8, $7f, $87, $67, $d9, $f6, $38
1621f     A4 53 BE 64 
16223     9D 41 E9 07 
16227     E4 2D CC 59 
1622b     AA 56 E0 F9 | 	byte	$a4, $53, $be, $64, $9d, $41, $e9, $07, $e4, $2d, $cc, $59, $aa, $56, $e0, $f9
1622f     1C DB 31 C8 
16233     3C AB 5E 9C 
16237     4F D0 33 D4 
1623b     4D A0 61 BD | 	byte	$1c, $db, $31, $c8, $3c, $ab, $5e, $9c, $4f, $d0, $33, $d4, $4d, $a0, $61, $bd
1623f     2D DC 34 C0 
16243     1A E5 38 D5 
16247     FD 0F D3 2A 
1624b     C3 37 CC 49 | 	byte	$2d, $dc, $34, $c0, $1a, $e5, $38, $d5, $fd, $0f, $d3, $2a, $c3, $37, $cc, $49
1624f     B0 28 F2 E5 
16253     34 C8 3E DB 
16257     F3 0D 30 B2 
1625b     40 D9 15 0B | 	byte	$b0, $28, $f2, $e5, $34, $c8, $3e, $db, $f3, $0d, $30, $b2, $40, $d9, $15, $0b
1625f     FE FE DF 1B 
16263     AD 3E C4 0B 
16267     0E FD 37 B3 
1626b     5E AD 4D CA | 	byte	$fe, $fe, $df, $1b, $ad, $3e, $c4, $0b, $0e, $fd, $37, $b3, $5e, $ad, $4d, $ca
1626f     38 CB 3C DF 
16273     01 20 F8 DD 
16277     42 D5 2F CB 
1627b     47 B2 5D 9C | 	byte	$38, $cb, $3c, $df, $01, $20, $f8, $dd, $42, $d5, $2f, $cb, $47, $b2, $5d, $9c
1627f     48 C9 0D FB 
16283     E5 29 D0 36 
16287     D3 30 B0 49 
1628b     C7 28 D0 23 | 	byte	$48, $c9, $0d, $fb, $e5, $29, $d0, $36, $d3, $30, $b0, $49, $c7, $28, $d0, $23
1628f     D5 22 F0 EB 
16293     29 D8 1B 05 
16297     DD 2C CC 39 
1629b     D3 2B D9 41 | 	byte	$d5, $22, $f0, $eb, $29, $d8, $1b, $05, $dd, $2c, $cc, $39, $d3, $2b, $d9, $41
1629f     A2 64 AB 2C 
162a3     FB D8 23 E0 
162a7     11 F5 17 09 
162ab     E1 2C E1 0B | 	byte	$a2, $64, $ab, $2c, $fb, $d8, $23, $e0, $11, $f5, $17, $09, $e1, $2c, $e1, $0b
162af     FD EF 17 B6 
162b3     44 E3 F7 20 
162b7     D8 1B 0B EC 
162bb     03 13 DF 25 | 	byte	$fd, $ef, $17, $b6, $44, $e3, $f7, $20, $d8, $1b, $0b, $ec, $03, $13, $df, $25
162bf     CB 38 BE 40 
162c3     B5 3D C5 52 
162c7     C3 29 D6 2F 
162cb     C2 43 D2 1A | 	byte	$cb, $38, $be, $40, $b5, $3d, $c5, $52, $c3, $29, $d6, $2f, $c2, $43, $d2, $1a
162cf     F2 10 F0 08 
162d3     0A 09 F0 FF 
162d7     23 C8 45 BD 
162db     42 D7 2A D1 | 	byte	$f2, $10, $f0, $08, $0a, $09, $f0, $ff, $23, $c8, $45, $bd, $42, $d7, $2a, $d1
162df     41 DE 06 0B 
162e3     F6 13 F8 14 
162e7     EB 25 DD 23 
162eb     EF 09 E1 22 | 	byte	$41, $de, $06, $0b, $f6, $13, $f8, $14, $eb, $25, $dd, $23, $ef, $09, $e1, $22
162ef     DC 30 CD 31 
162f3     F7 F5 07 1A 
162f7     DB 12 07 F5 
162fb     10 F3 12 F1 | 	byte	$dc, $30, $cd, $31, $f7, $f5, $07, $1a, $db, $12, $07, $f5, $10, $f3, $12, $f1
162ff     1F FD EC 34 
16303     CF 2A E4 2F 
16307     CF 2E F2 FF 
1630b     06 16 F8 0E | 	byte	$1f, $fd, $ec, $34, $cf, $2a, $e4, $2f, $cf, $2e, $f2, $ff, $06, $16, $f8, $0e
1630f     FB 07 25 D8 
16313     25 E8 12 FA 
16317     0B E6 25 D0 
1631b     3C C4 2E E0 | 	byte	$fb, $07, $25, $d8, $25, $e8, $12, $fa, $0b, $e6, $25, $d0, $3c, $c4, $2e, $e0
1631f     1B EC 0B 05 
16323     F9 1A D7 20 
16327     FD 01 04 DC 
1632b     35 DF 16 E5 | 	byte	$1b, $ec, $0b, $05, $f9, $1a, $d7, $20, $fd, $01, $04, $dc, $35, $df, $16, $e5
1632f     2C BE 3C DF 
16333     1E EE 10 04 
16337     06 FD 0F F1 
1633b     0B F2 17 D8 | 	byte	$2c, $be, $3c, $df, $1e, $ee, $10, $04, $06, $fd, $0f, $f1, $0b, $f2, $17, $d8
1633f     2C F3 F5 1A 
16343     DF 28 E9 FD 
16347     16 EA 02 08 
1634b     00 FB 02 01 | 	byte	$2c, $f3, $f5, $1a, $df, $28, $e9, $fd, $16, $ea, $02, $08, $00, $fb, $02, $01
1634f     10 E2 20 D8 
16353     36 DE 17 F1 
16357     0D FE 04 FC 
1635b     18 E9 17 EE | 	byte	$10, $e2, $20, $d8, $36, $de, $17, $f1, $0d, $fe, $04, $fc, $18, $e9, $17, $ee
1635f     09 1B E8 21 
16363     E0 29 F2 23 
16367     D9 2C CC 46 
1636b     C0 35 E8 0B | 	byte	$09, $1b, $e8, $21, $e0, $29, $f2, $23, $d9, $2c, $cc, $46, $c0, $35, $e8, $0b
1636f     0B EB 2A E5 
16373     17 F2 FD 22 
16377     E3 14 09 E6 
1637b     FF 04 FC 0B | 	byte	$0b, $eb, $2a, $e5, $17, $f2, $fd, $22, $e3, $14, $09, $e6, $ff, $04, $fc, $0b
1637f     0D D6 46 C8 
16383     1C 08 0D E0 
16387     46 C8 22 E2 
1638b     F7 2A D8 2F | 	byte	$0d, $d6, $46, $c8, $1c, $08, $0d, $e0, $46, $c8, $22, $e2, $f7, $2a, $d8, $2f
1638f     DD 27 ED 24 
16393     C9 3B DF F6 
16397     25 E3 17 E8 
1639b     1F E9 07 F3 | 	byte	$dd, $27, $ed, $24, $c9, $3b, $df, $f6, $25, $e3, $17, $e8, $1f, $e9, $07, $f3
1639f     08 FD F0 1E 
163a3     D4 28 E5 1F 
163a7     E5 11 F8 F0 
163ab     2D C0 44 C4 | 	byte	$08, $fd, $f0, $1e, $d4, $28, $e5, $1f, $e5, $11, $f8, $f0, $2d, $c0, $44, $c4
163af     35 DC 2A D4 
163b3     36 D0 2B DE 
163b7     FD 12 FB F3 
163bb     02 F5 11 FB | 	byte	$35, $dc, $2a, $d4, $36, $d0, $2b, $de, $fd, $12, $fb, $f3, $02, $f5, $11, $fb
163bf     E9 20 D8 34 
163c3     D3 2A DC 29 
163c7     E6 10 FA F7 
163cb     0B 13 D3 36 | 	byte	$e9, $20, $d8, $34, $d3, $2a, $dc, $29, $e6, $10, $fa, $f7, $0b, $13, $d3, $36
163cf     D1 16 FD F1 
163d3     16 11 C4 4B 
163d7     C2 43 AF 5A 
163db     BD 20 06 E3 | 	byte	$d1, $16, $fd, $f1, $16, $11, $c4, $4b, $c2, $43, $af, $5a, $bd, $20, $06, $e3
163df     23 E6 07 FA 
163e3     02 FC 10 F6 
163e7     F8 1B D6 38 
163eb     CF 18 FD 02 | 	byte	$23, $e6, $07, $fa, $02, $fc, $10, $f6, $f8, $1b, $d6, $38, $cf, $18, $fd, $02
163ef     18 D0 40 CC 
163f3     21 F3 02 FF 
163f7     1A F0 00 10 
163fb     E8 21 EB 20 | 	byte	$18, $d0, $40, $cc, $21, $f3, $02, $ff, $1a, $f0, $00, $10, $e8, $21, $eb, $20
163ff     E0 29 D3 25 
16403     E5 0F FB 10 
16407     E9 27 D2 1F 
1640b     DD 1F F5 01 | 	byte	$e0, $29, $d3, $25, $e5, $0f, $fb, $10, $e9, $27, $d2, $1f, $dd, $1f, $f5, $01
1640f     FB 1B EC FA 
16413     1E E6 09 FD 
16417     0B F1 0E F7 
1641b     0D EE 1C F1 | 	byte	$fb, $1b, $ec, $fa, $1e, $e6, $09, $fd, $0b, $f1, $0e, $f7, $0d, $ee, $1c, $f1
1641f     0E 05 F5 20 
16423     E3 21 E8 08 
16427     06 01 EA 20 
1642b     F0 04 0D F9 | 	byte	$0e, $05, $f5, $20, $e3, $21, $e8, $08, $06, $01, $ea, $20, $f0, $04, $0d, $f9
1642f     09 E6 2C D7 
16433     20 EF 0D 05 
16437     F3 07 FC 17 
1643b     D4 3B C8 14 | 	byte	$09, $e6, $2c, $d7, $20, $ef, $0d, $05, $f3, $07, $fc, $17, $d4, $3b, $c8, $14
1643f     0A F0 0A 00 
16443     00 01 06 F1 
16447     22 DC 18 FE 
1644b     04 F1 27 CA | 	byte	$0a, $f0, $0a, $00, $00, $01, $06, $f1, $22, $dc, $18, $fe, $04, $f1, $27, $ca
1644f     3E D0 25 E2 
16453     27 DC 21 E9 
16457     1C DE 2B E3 
1645b     09 07 F2 17 | 	byte	$3e, $d0, $25, $e2, $27, $dc, $21, $e9, $1c, $de, $2b, $e3, $09, $07, $f2, $17
1645f     F0 1C D9 2D 
16463     E3 11 FD 09 
16467     F9 16 DF 2C 
1646b     E0 1C FC 06 | 	byte	$f0, $1c, $d9, $2d, $e3, $11, $fd, $09, $f9, $16, $df, $2c, $e0, $1c, $fc, $06
1646f     0A F1 05 04 
16473     06 F5 18 F6 
16477     08 FC 10 F1 
1647b     21 E3 15 F9 | 	byte	$0a, $f1, $05, $04, $06, $f5, $18, $f6, $08, $fc, $10, $f1, $21, $e3, $15, $f9
1647f     00 09 FD FF 
16483     09 ED 1A E8 
16487     1E E4 21 E1 
1648b     0E FE F1 14 | 	byte	$00, $09, $fd, $ff, $09, $ed, $1a, $e8, $1e, $e4, $21, $e1, $0e, $fe, $f1, $14
1648f     07 E6 25 EA 
16493     06 09 00 FC 
16497     05 00 F2 1D 
1649b     EE 18 E8 27 | 	byte	$07, $e6, $25, $ea, $06, $09, $00, $fc, $05, $00, $f2, $1d, $ee, $18, $e8, $27
1649f     DE 1A EF 17 
164a3     DC 29 E0 10 
164a7     FD FA 10 EF 
164ab     17 EF 12 EF | 	byte	$de, $1a, $ef, $17, $dc, $29, $e0, $10, $fd, $fa, $10, $ef, $17, $ef, $12, $ef
164af     1A D9 30 DC 
164b3     13 EB 2B C7 
164b7     43 D2 1C EE 
164bb     13 E5 17 E9 | 	byte	$1a, $d9, $30, $dc, $13, $eb, $2b, $c7, $43, $d2, $1c, $ee, $13, $e5, $17, $e9
164bf     18 F0 07 02 
164c3     01 F3 13 F8 
164c7     04 0D ED 14 
164cb     ED 0A E5 27 | 	byte	$18, $f0, $07, $02, $01, $f3, $13, $f8, $04, $0d, $ed, $14, $ed, $0a, $e5, $27
164cf     DF 0F FB 08 
164d3     F7 1C E5 17 
164d7     F1 FA 11 EE 
164db     17 FD F3 20 | 	byte	$df, $0f, $fb, $08, $f7, $1c, $e5, $17, $f1, $fa, $11, $ee, $17, $fd, $f3, $20
164df     DF 24 DF 20 
164e3     ED FC 17 EE 
164e7     16 E4 17 E4 
164eb     21 E9 07 06 | 	byte	$df, $24, $df, $20, $ed, $fc, $17, $ee, $16, $e4, $17, $e4, $21, $e9, $07, $06
164ef     FE FA 11 E9 
164f3     11 01 F8 09 
164f7     01 FD 0D 07 
164fb     ED 15 ED 1B | 	byte	$fe, $fa, $11, $e9, $11, $01, $f8, $09, $01, $fd, $0d, $07, $ed, $15, $ed, $1b
164ff     E1 28 DD 25 
16503     D5 31 DC 1C 
16507     EC 18 E9 18 
1650b     EB 12 FA 05 | 	byte	$e1, $28, $dd, $25, $d5, $31, $dc, $1c, $ec, $18, $e9, $18, $eb, $12, $fa, $05
1650f     07 F5 10 E9 
16513     1B F0 FB 17 
16517     DD 2B D3 28 
1651b     E3 16 F9 FC | 	byte	$07, $f5, $10, $e9, $1b, $f0, $fb, $17, $dd, $2b, $d3, $28, $e3, $16, $f9, $fc
1651f     08 01 00 F9 
16523     13 EF 0F F2 
16527     04 FD 02 03 
1652b     FC 0D EF 1C | 	byte	$08, $01, $00, $f9, $13, $ef, $0f, $f2, $04, $fd, $02, $03, $fc, $0d, $ef, $1c
1652f     E4 21 E5 15 
16533     F0 17 E9 15 
16537     F5 01 0B EF 
1653b     13 F7 00 0A | 	byte	$e4, $21, $e5, $15, $f0, $17, $e9, $15, $f5, $01, $0b, $ef, $13, $f7, $00, $0a
1653f     E5 24 D9 20 
16543     FD F6 08 FA 
16547     0E EE 16 EA 
1654b     1C E8 1E E4 | 	byte	$e5, $24, $d9, $20, $fd, $f6, $08, $fa, $0e, $ee, $16, $ea, $1c, $e8, $1e, $e4
1654f     22 DD 2B CF 
16553     37 CB 2C E4 
16557     11 FB F5 1F 
1655b     D1 30 DC 27 | 	byte	$22, $dd, $2b, $cf, $37, $cb, $2c, $e4, $11, $fb, $f5, $1f, $d1, $30, $dc, $27
1655f     DD 22 E9 06 
16563     0F E6 1C E8 
16567     17 F2 04 FE 
1656b     04 FC 09 FF | 	byte	$dd, $22, $e9, $06, $0f, $e6, $1c, $e8, $17, $f2, $04, $fe, $04, $fc, $09, $ff
1656f     F7 16 EA 17 
16573     F1 0A 02 FD 
16577     01 05 04 F1 
1657b     22 D7 30 D7 | 	byte	$f7, $16, $ea, $17, $f1, $0a, $02, $fd, $01, $05, $04, $f1, $22, $d7, $30, $d7
1657f     22 F0 0F F6 
16583     12 ED 14 F3 
16587     07 04 00 F9 
1658b     16 E1 27 DF | 	byte	$22, $f0, $0f, $f6, $12, $ed, $14, $f3, $07, $04, $00, $f9, $16, $e1, $27, $df
1658f     22 E3 0E FE 
16593     F7 14 EF 15 
16597     ED 1A F1 FE 
1659b     0D F8 FE 08 | 	byte	$22, $e3, $0e, $fe, $f7, $14, $ef, $15, $ed, $1a, $f1, $fe, $0d, $f8, $fe, $08
1659f     F2 10 F8 02 
165a3     0D EE 15 F0 
165a7     0D F9 01 02 
165ab     06 00 06 F9 | 	byte	$f2, $10, $f8, $02, $0d, $ee, $15, $f0, $0d, $f9, $01, $02, $06, $00, $06, $f9
165af     10 F6 15 F3 
165b3     0B FE FD 00 
165b7     03 03 EE 18 
165bb     E9 18 EA 15 | 	byte	$10, $f6, $15, $f3, $0b, $fe, $fd, $00, $03, $03, $ee, $18, $e9, $18, $ea, $15
165bf     F1 09 F8 0E 
165c3     F2 08 01 02 
165c7     01 03 FC 06 
165cb     FC 02 01 00 | 	byte	$f1, $09, $f8, $0e, $f2, $08, $01, $02, $01, $03, $fc, $06, $fc, $02, $01, $00
165cf     01 FF 00 00 
165d3     01 00 FC 06 
165d7     F6 12 EB 11 
165db     F8 05 F9 0A | 	byte	$01, $ff, $00, $00, $01, $00, $fc, $06, $f6, $12, $eb, $11, $f8, $05, $f9, $0a
165df     F6 07 FC 07 
165e3     FA 03 06 FD 
165e7     FE 07 FC FC 
165eb     0D F1 0F F2 | 	byte	$f6, $07, $fc, $07, $fa, $03, $06, $fd, $fe, $07, $fc, $fc, $0d, $f1, $0f, $f2
165ef     10 F1 10 F6 
165f3     00 06 F8 06 
165f7     FD 00 F8 09 
165fb     FC 05 F8 08 | 	byte	$10, $f1, $10, $f6, $00, $06, $f8, $06, $fd, $00, $f8, $09, $fc, $05, $f8, $08
165ff     F8 05 00 FC 
16603     09 F1 12 EB 
16607     15 F3 04 04 
1660b     F9 13 E9 18 | 	byte	$f8, $05, $00, $fc, $09, $f1, $12, $eb, $15, $f3, $04, $04, $f9, $13, $e9, $18
1660f     ED 0F F8 07 
16613     FC 07 FF F8 
16617     0D F9 04 FF 
1661b     04 F7 0F F6 | 	byte	$ed, $0f, $f8, $07, $fc, $07, $ff, $f8, $0d, $f9, $04, $ff, $04, $f7, $0f, $f6
1661f     05 FF 03 01 
16623     00 FE 04 FE 
16627     01 FD 05 FF 
1662b     00 04 F9 10 | 	byte	$05, $ff, $03, $01, $00, $fe, $04, $fe, $01, $fd, $05, $ff, $00, $04, $f9, $10
1662f     F1 0E F2 15 
16633     EA 13 ED 13 
16637     ED 0B F6 0D 
1663b     EF 0E F3 0E | 	byte	$f1, $0e, $f2, $15, $ea, $13, $ed, $13, $ed, $0b, $f6, $0d, $ef, $0e, $f3, $0e
1663f     EF 03 03 FA 
16643     06 FC 01 00 
16647     03 F8 09 FB 
1664b     04 F2 15 EF | 	byte	$ef, $03, $03, $fa, $06, $fc, $01, $00, $03, $f8, $09, $fb, $04, $f2, $15, $ef
1664f     0B F9 02 07 
16653     F3 11 F2 0A 
16657     FF F8 09 F9 
1665b     FF 0A F5 09 | 	byte	$0b, $f9, $02, $07, $f3, $11, $f2, $0a, $ff, $f8, $09, $f9, $ff, $0a, $f5, $09
1665f     F1 12 EC 0E 
16663     FC 05 F5 0D 
16667     F8 FF 02 01 
1666b     FF FD 0E EF | 	byte	$f1, $12, $ec, $0e, $fc, $05, $f5, $0d, $f8, $ff, $02, $01, $ff, $fd, $0e, $ef
1666f     0F F3 08 FC 
16673     02 FF 00 01 
16677     03 FA 03 01 
1667b     07 F6 0D F9 | 	byte	$0f, $f3, $08, $fc, $02, $ff, $00, $01, $03, $fa, $03, $01, $07, $f6, $0d, $f9
1667f     04 FF 03 FB 
16683     06 FA FC 03 
16687     FD 09 FB 05 
1668b     FB 07 FA 06 | 	byte	$04, $ff, $03, $fb, $06, $fa, $fc, $03, $fd, $09, $fb, $05, $fb, $07, $fa, $06
1668f     06 F5 11 EF 
16693     11 EF 14 EE 
16697     12 F5 09 FD 
1669b     FC 00 0D F1 | 	byte	$06, $f5, $11, $ef, $11, $ef, $14, $ee, $12, $f5, $09, $fd, $fc, $00, $0d, $f1
1669f     13 EE 11 F1 
166a3     13 F1 0B F5 
166a7     0D EB 18 E0 
166ab     16 F0 03 01 | 	byte	$13, $ee, $11, $f1, $13, $f1, $0b, $f5, $0d, $eb, $18, $e0, $16, $f0, $03, $01
166af     FA 0A F6 07 
166b3     F7 0A F8 06 
166b7     02 FD 05 FC 
166bb     04 FC 05 FC | 	byte	$fa, $0a, $f6, $07, $f7, $0a, $f8, $06, $02, $fd, $05, $fc, $04, $fc, $05, $fc
166bf     04 FE FF 03 
166c3     FC 07 F5 0E 
166c7     F3 09 FB 02 
166cb     01 03 FC 08 | 	byte	$04, $fe, $ff, $03, $fc, $07, $f5, $0e, $f3, $09, $fb, $02, $01, $03, $fc, $08
166cf     F9 08 FD FD 
166d3     09 FA 06 FC 
166d7     00 03 01 FE 
166db     07 FD 01 0A | 	byte	$f9, $08, $fd, $fd, $09, $fa, $06, $fc, $00, $03, $01, $fe, $07, $fd, $01, $0a
166df     F5 06 FF 04 
166e3     FD 03 FE 06 
166e7     F8 0D FB 05 
166eb     01 00 FC 0F | 	byte	$f5, $06, $ff, $04, $fd, $03, $fe, $06, $f8, $0d, $fb, $05, $01, $00, $fc, $0f
166ef     F2 0D F8 11 
166f3     EF 14 EF 0E 
166f7     EE 16 EF 02 
166fb     06 F8 0A F6 | 	byte	$f2, $0d, $f8, $11, $ef, $14, $ef, $0e, $ee, $16, $ef, $02, $06, $f8, $0a, $f6
166ff     06 FA 0E F1 
16703     09 FE 01 04 
16707     F7 0A F9 03 
1670b     FF FF 09 F3 | 	byte	$06, $fa, $0e, $f1, $09, $fe, $01, $04, $f7, $0a, $f9, $03, $ff, $ff, $09, $f3
1670f     0E F5 0A F7 
16713     05 FC 03 FA 
16717     0A F8 05 FD 
1671b     0B F5 0B F7 | 	byte	$0e, $f5, $0a, $f7, $05, $fc, $03, $fa, $0a, $f8, $05, $fd, $0b, $f5, $0b, $f7
1671f     08 F9 06 00 
16723     FC 07 F8 08 
16727     F7 10 EA 1A 
1672b     EC 14 F5 07 | 	byte	$08, $f9, $06, $00, $fc, $07, $f8, $08, $f7, $10, $ea, $1a, $ec, $14, $f5, $07
1672f     FD FD 03 FF 
16733     03 FB 0B F6 
16737     08 F8 09 FA 
1673b     04 FD 08 F5 | 	byte	$fd, $fd, $03, $ff, $03, $fb, $0b, $f6, $08, $f8, $09, $fa, $04, $fd, $08, $f5
1673f     0D F6 0B F8 
16743     07 F7 0A FA 
16747     04 FF 03 02 
1674b     FB 07 F7 08 | 	byte	$0d, $f6, $0b, $f8, $07, $f7, $0a, $fa, $04, $ff, $03, $02, $fb, $07, $f7, $08
1674f     FB 04 FD 02 
16753     01 FD 07 FB 
16757     05 01 FF 03 
1675b     F9 09 FB 01 | 	byte	$fb, $04, $fd, $02, $01, $fd, $07, $fb, $05, $01, $ff, $03, $f9, $09, $fb, $01
1675f     04 F9 08 F9 
16763     02 02 FB 05 
16767     FA 05 FF FF 
1676b     FF 08 F7 03 | 	byte	$04, $f9, $08, $f9, $02, $02, $fb, $05, $fa, $05, $ff, $ff, $ff, $08, $f7, $03
1676f     01 00 05 F6 
16773     0E EF 11 F0 
16777     0B F9 01 02 
1677b     FD 04 FE 02 | 	byte	$01, $00, $05, $f6, $0e, $ef, $11, $f0, $0b, $f9, $01, $02, $fd, $04, $fe, $02
1677f     FA 0F F1 0B 
16783     F9 08 F9 04 
16787     FE FF 02 02 
1678b     FC 06 FC 03 | 	byte	$fa, $0f, $f1, $0b, $f9, $08, $f9, $04, $fe, $ff, $02, $02, $fc, $06, $fc, $03
1678f     FE 02 FE 03 
16793     FB 04 FD 00 
16797     05 F7 08 F9 
1679b     0A F9 FF 04 | 	byte	$fe, $02, $fe, $03, $fb, $04, $fd, $00, $05, $f7, $08, $f9, $0a, $f9, $ff, $04
1679f     FE 01 03 FF 
167a3     02 FE 04 FF 
167a7     04 FF 07 01 
167ab     01 00 07 FB | 	byte	$fe, $01, $03, $ff, $02, $fe, $04, $ff, $04, $ff, $07, $01, $01, $00, $07, $fb
167af     04 01 01 01 
167b3     01 04 FF 02 
167b7     04 FC 04 02 
167bb     FB 08 FE 03 | 	byte	$04, $01, $01, $01, $01, $04, $ff, $02, $04, $fc, $04, $02, $fb, $08, $fe, $03
167bf     FD 0A F9 07 
167c3     FD 04 FB 03 
167c7     01 02 02 01 
167cb     00 FF 08 F7 | 	byte	$fd, $0a, $f9, $07, $fd, $04, $fb, $03, $01, $02, $02, $01, $00, $ff, $08, $f7
167cf     09 FA 09 F9 
167d3     08 F7 0E F5 
167d7     09 FC 03 FD 
167db     08 FC 09 F8 | 	byte	$09, $fa, $09, $f9, $08, $f7, $0e, $f5, $09, $fc, $03, $fd, $08, $fc, $09, $f8
167df     0B FA 04 01 
167e3     02 03 FC 09 
167e7     F9 09 FA 0D 
167eb     F8 0D F6 0D | 	byte	$0b, $fa, $04, $01, $02, $03, $fc, $09, $f9, $09, $fa, $0d, $f8, $0d, $f6, $0d
167ef     F9 09 FA 07 
167f3     FF 02 00 03 
167f7     01 06 FC 0B 
167fb     F9 0A F6 12 | 	byte	$f9, $09, $fa, $07, $ff, $02, $00, $03, $01, $06, $fc, $0b, $f9, $0a, $f6, $12
167ff     F6 09 FD 07 
16803     FF FF 07 FD 
16807     05 FF 05 FF 
1680b     01 05 FA 07 | 	byte	$f6, $09, $fd, $07, $ff, $ff, $07, $fd, $05, $ff, $05, $ff, $01, $05, $fa, $07
1680f     FC 01 02 FF 
16813     00 FD 04 FC 
16817     01 02 03 FC 
1681b     FD 05 FF 02 | 	byte	$fc, $01, $02, $ff, $00, $fd, $04, $fc, $01, $02, $03, $fc, $fd, $05, $ff, $02
1681f     FD 06 F8 09 
16823     F5 08 FD 00 
16827     01 01 00 02 
1682b     FE 02 00 02 | 	byte	$fd, $06, $f8, $09, $f5, $08, $fd, $00, $01, $01, $00, $02, $fe, $02, $00, $02
1682f     FA 0A FC 00 
16833     FC 03 FE 02 
16837     FF FE 08 F7 
1683b     0D F7 06 FA | 	byte	$fa, $0a, $fc, $00, $fc, $03, $fe, $02, $ff, $fe, $08, $f7, $0d, $f7, $06, $fa
1683f     09 F9 04 FA 
16843     09 F6 0A F9 
16847     05 FD 04 FA 
1684b     0A FC 01 FF | 	byte	$09, $f9, $04, $fa, $09, $f6, $0a, $f9, $05, $fd, $04, $fa, $0a, $fc, $01, $ff
1684f     08 F9 06 FD 
16853     03 FE 04 02 
16857     00 00 02 01 
1685b     00 03 FE 07 | 	byte	$08, $f9, $06, $fd, $03, $fe, $04, $02, $00, $00, $02, $01, $00, $03, $fe, $07
1685f     FF FC 08 F8 
16863     06 FD 01 FD 
16867     03 FF 05 F7 
1686b     11 F2 0A F9 | 	byte	$ff, $fc, $08, $f8, $06, $fd, $01, $fd, $03, $ff, $05, $f7, $11, $f2, $0a, $f9
1686f     0A F8 04 FC 
16873     03 FE 03 FF 
16877     FF 01 00 00 
1687b     FF 02 01 FD | 	byte	$0a, $f8, $04, $fc, $03, $fe, $03, $ff, $ff, $01, $00, $00, $ff, $02, $01, $fd
1687f     04 00 FC 07 
16883     F8 08 FC 06 
16887     F7 09 F7 09 
1688b     FB 01 FE 06 | 	byte	$04, $00, $fc, $07, $f8, $08, $fc, $06, $f7, $09, $f7, $09, $fb, $01, $fe, $06
1688f     F8 0B F8 04 
16893     02 FF 01 03 
16897     FB 07 F9 04 
1689b     01 00 02 03 | 	byte	$f8, $0b, $f8, $04, $02, $ff, $01, $03, $fb, $07, $f9, $04, $01, $00, $02, $03
1689f     FA 07 FC 02 
168a3     FD 05 FD 01 
168a7     01 00 00 02 
168ab     02 FD 04 FE | 	byte	$fa, $07, $fc, $02, $fd, $05, $fd, $01, $01, $00, $00, $02, $02, $fd, $04, $fe
168af     03 00 FF 02 
168b3     00 03 FC 0A 
168b7     FA 0A F7 07 
168bb     FD 01 FF 01 | 	byte	$03, $00, $ff, $02, $00, $03, $fc, $0a, $fa, $0a, $f7, $07, $fd, $01, $ff, $01
168bf     00 FE 01 FD 
168c3     03 FF 01 FF 
168c7     FF 03 F9 0A 
168cb     F7 04 01 FE | 	byte	$00, $fe, $01, $fd, $03, $ff, $01, $ff, $ff, $03, $f9, $0a, $f7, $04, $01, $fe
168cf     FF 02 00 01 
168d3     00 00 01 00 
168d7     FF 02 FC 06 
168db     FB 03 FC 08 | 	byte	$ff, $02, $00, $01, $00, $00, $01, $00, $ff, $02, $fc, $06, $fb, $03, $fc, $08
168df     F9 05 FF FF 
168e3     05 FC 03 FE 
168e7     06 FB 07 FD 
168eb     04 FF 02 FF | 	byte	$f9, $05, $ff, $ff, $05, $fc, $03, $fe, $06, $fb, $07, $fd, $04, $ff, $02, $ff
168ef     01 01 00 FD 
168f3     02 01 FD 03 
168f7     FE 04 FB 06 
168fb     FB 05 FD 03 | 	byte	$01, $01, $00, $fd, $02, $01, $fd, $03, $fe, $04, $fb, $06, $fb, $05, $fd, $03
168ff     01 FD 03 FB 
16903     06 FC 01 FD 
16907     07 F7 07 F7 
1690b     0A F9 07 FD | 	byte	$01, $fd, $03, $fb, $06, $fc, $01, $fd, $07, $f7, $07, $f7, $0a, $f9, $07, $fd
1690f     03 FF 03 FD 
16913     01 01 00 00 
16917     03 FD 01 01 
1691b     00 FE 04 FF | 	byte	$03, $ff, $03, $fd, $01, $01, $00, $00, $03, $fd, $01, $01, $00, $fe, $04, $ff
1691f     00 01 FD 05 
16923     F9 06 FC 04 
16927     FB 01 02 01 
1692b     02 FB 05 FC | 	byte	$00, $01, $fd, $05, $f9, $06, $fc, $04, $fb, $01, $02, $01, $02, $fb, $05, $fc
1692f     04 FE FF 00 
16933     02 FD 04 FE 
16937     02 FF 00 01 
1693b     02 FD 02 FE | 	byte	$04, $fe, $ff, $00, $02, $fd, $04, $fe, $02, $ff, $00, $01, $02, $fd, $02, $fe
1693f     03 00 02 FF 
16943     06 F9 07 FF 
16947     FC 07 FF 02 
1694b     FD 05 FC 03 | 	byte	$03, $00, $02, $ff, $06, $f9, $07, $ff, $fc, $07, $ff, $02, $fd, $05, $fc, $03
1694f     FF 03 FD 03 
16953     FD 04 FD 04 
16957     FB 04 FB 05 
1695b     FB 06 F9 05 | 	byte	$ff, $03, $fd, $03, $fd, $04, $fd, $04, $fb, $04, $fb, $05, $fb, $06, $f9, $05
1695f     FF 03 FC 03 
16963     01 FE 06 FA 
16967     04 01 03 FD 
1696b     02 00 FF 01 | 	byte	$ff, $03, $fc, $03, $01, $fe, $06, $fa, $04, $01, $03, $fd, $02, $00, $ff, $01
1696f     01 01 03 00 
16973     FE 02 02 00 
16977     02 00 04 FF 
1697b     04 01 FF 02 | 	byte	$01, $01, $03, $00, $fe, $02, $02, $00, $02, $00, $04, $ff, $04, $01, $ff, $02
1697f     02 FE FF 06 
16983     FD 03 03 FC 
16987     06 FE 08 FC 
1698b     05 00 00 00 | 	byte	$02, $fe, $ff, $06, $fd, $03, $03, $fc, $06, $fe, $08, $fc, $05, $00, $00, $00
1698f     00 00 00 00 
16993     00 00 00 00 
16997     00 00 00 00 
1699b     00 00 00 00 
1699f     00          | 	byte	$00[17]
169a0     D3 CA D2 D6 
169a4     E3 2D 3B 32 
169a8     2E 2A 25 21 
169ac     1F 1D 18 02 | 	byte	$d3, $ca, $d2, $d6, $e3, $2d, $3b, $32, $2e, $2a, $25, $21, $1f, $1d, $18, $02
169b0     BD BA C5 C8 
169b4     CE D2 D7 DA 
169b8     E2 DC E7 E7 
169bc     E8 EF F3 FC | 	byte	$bd, $ba, $c5, $c8, $ce, $d2, $d7, $da, $e2, $dc, $e7, $e7, $e8, $ef, $f3, $fc
169c0     4E 5B 3A 28 
169c4     3B 3A 2E 20 
169c8     1D 21 36 29 
169cc     1C 1A 12 DB | 	byte	$4e, $5b, $3a, $28, $3b, $3a, $2e, $20, $1d, $21, $36, $29, $1c, $1a, $12, $db
169d0     A0 A4 AE B6 
169d4     BE C5 D8 DF 
169d8     E3 F3 0A 07 
169dc     05 04 04 24 | 	byte	$a0, $a4, $ae, $b6, $be, $c5, $d8, $df, $e3, $f3, $0a, $07, $05, $04, $04, $24
169e0     57 55 4A 42 
169e4     3C 33 21 1A 
169e8     17 06 EF F2 
169ec     F5 F6 F7 D5 | 	byte	$57, $55, $4a, $42, $3c, $33, $21, $1a, $17, $06, $ef, $f2, $f5, $f6, $f7, $d5
169f0     A8 A9 B4 BC 
169f4     C3 CB DF E6 
169f8     E9 FD 12 0F 
169fc     0D 0B 0B 2B | 	byte	$a8, $a9, $b4, $bc, $c3, $cb, $df, $e6, $e9, $fd, $12, $0f, $0d, $0b, $0b, $2b
16a00     59 56 4C 44 
16a04     3D 34 1F 19 
16a08     16 01 EB EE 
16a0c     F1 F3 F2 CF | 	byte	$59, $56, $4c, $44, $3d, $34, $1f, $19, $16, $01, $eb, $ee, $f1, $f3, $f2, $cf
16a10     A6 A9 B5 BC 
16a14     C3 CF E2 E8 
16a18     EC 05 18 14 
16a1c     11 0F 10 36 | 	byte	$a6, $a9, $b5, $bc, $c3, $cf, $e2, $e8, $ec, $05, $18, $14, $11, $0f, $10, $36
16a20     5A 57 4C 44 
16a24     3D 32 1D 17 
16a28     13 F7 E5 E9 
16a2c     ED EF ED C7 | 	byte	$5a, $57, $4c, $44, $3d, $32, $1d, $17, $13, $f7, $e5, $e9, $ed, $ef, $ed, $c7
16a30     A7 AA B4 BC 
16a34     C3 D1 E5 EA 
16a38     EF 0C 1D 19 
16a3c     16 13 17 38 | 	byte	$a7, $aa, $b4, $bc, $c3, $d1, $e5, $ea, $ef, $0c, $1d, $19, $16, $13, $17, $38
16a40     5A 57 4D 45 
16a44     3D 2E 1B 16 
16a48     10 F2 E1 E5 
16a4c     E9 EC E7 C5 | 	byte	$5a, $57, $4d, $45, $3d, $2e, $1b, $16, $10, $f2, $e1, $e5, $e9, $ec, $e7, $c5
16a50     A7 AA B4 BD 
16a54     C5 D5 E7 EC 
16a58     F4 11 22 1D 
16a5c     19 16 1D 3F | 	byte	$a7, $aa, $b4, $bd, $c5, $d5, $e7, $ec, $f4, $11, $22, $1d, $19, $16, $1d, $3f
16a60     59 57 4D 44 
16a64     3B 2A 18 14 
16a68     0B EC DC E1 
16a6c     E5 E8 DF C2 | 	byte	$59, $57, $4d, $44, $3b, $2a, $18, $14, $0b, $ec, $dc, $e1, $e5, $e8, $df, $c2
16a70     A7 A9 B4 BC 
16a74     C6 D8 E8 ED 
16a78     F8 16 25 21 
16a7c     1D 19 22 42 | 	byte	$a7, $a9, $b4, $bc, $c6, $d8, $e8, $ed, $f8, $16, $25, $21, $1d, $19, $22, $42
16a80     59 57 4C 44 
16a84     39 26 16 12 
16a88     03 E7 D7 DC 
16a8c     E1 E4 D9 BC | 	byte	$59, $57, $4c, $44, $39, $26, $16, $12, $03, $e7, $d7, $dc, $e1, $e4, $d9, $bc
16a90     A6 A9 B4 BC 
16a94     C8 DA EA EF 
16a98     FD 1A 29 25 
16a9c     20 1D 2A 44 | 	byte	$a6, $a9, $b4, $bc, $c8, $da, $ea, $ef, $fd, $1a, $29, $25, $20, $1d, $2a, $44
16aa0     59 57 4C 43 
16aa4     36 23 14 10 
16aa8     FF E4 D4 D8 
16aac     DD E0 D4 B9 | 	byte	$59, $57, $4c, $43, $36, $23, $14, $10, $ff, $e4, $d4, $d8, $dd, $e0, $d4, $b9
16ab0     A7 AA B3 BD 
16ab4     CB DD EC F0 
16ab8     02 1D 2C 28 
16abc     23 21 2E 46 | 	byte	$a7, $aa, $b3, $bd, $cb, $dd, $ec, $f0, $02, $1d, $2c, $28, $23, $21, $2e, $46
16ac0     59 56 4C 43 
16ac4     35 21 13 0E 
16ac8     FC E0 D2 D5 
16acc     DA DD D0 B8 | 	byte	$59, $56, $4c, $43, $35, $21, $13, $0e, $fc, $e0, $d2, $d5, $da, $dd, $d0, $b8
16ad0     A7 AA B4 BE 
16ad4     CD E1 ED F3 
16ad8     04 1E 2E 2C 
16adc     26 25 33 4A | 	byte	$a7, $aa, $b4, $be, $cd, $e1, $ed, $f3, $04, $1e, $2e, $2c, $26, $25, $33, $4a
16ae0     58 56 4C 42 
16ae4     30 1F 11 0C 
16ae8     F9 DE D0 D1 
16aec     D8 D8 CA B7 | 	byte	$58, $56, $4c, $42, $30, $1f, $11, $0c, $f9, $de, $d0, $d1, $d8, $d8, $ca, $b7
16af0     A8 AB B4 C0 
16af4     D0 E2 EF F5 
16af8     09 20 30 2F 
16afc     29 29 38 4B | 	byte	$a8, $ab, $b4, $c0, $d0, $e2, $ef, $f5, $09, $20, $30, $2f, $29, $29, $38, $4b
16b00     58 56 4B 40 
16b04     2E 1C 11 09 
16b08     F4 DE CD CE 
16b0c     D5 D4 C6 B4 | 	byte	$58, $56, $4b, $40, $2e, $1c, $11, $09, $f4, $de, $cd, $ce, $d5, $d4, $c6, $b4
16b10     A9 AB B5 C1 
16b14     D1 E4 EF F7 
16b18     0A 23 31 32 
16b1c     2C 2D 3C 4C | 	byte	$a9, $ab, $b5, $c1, $d1, $e4, $ef, $f7, $0a, $23, $31, $32, $2c, $2d, $3c, $4c
16b20     57 55 4C 3E 
16b24     2D 1B 0F 08 
16b28     F5 DD CC CC 
16b2c     D3 D0 C3 B3 | 	byte	$57, $55, $4c, $3e, $2d, $1b, $0f, $08, $f5, $dd, $cc, $cc, $d3, $d0, $c3, $b3
16b30     A9 AB B6 C3 
16b34     D6 E5 EF F9 
16b38     0C 23 33 34 
16b3c     2E 31 3E 4E | 	byte	$a9, $ab, $b6, $c3, $d6, $e5, $ef, $f9, $0c, $23, $33, $34, $2e, $31, $3e, $4e
16b40     57 55 4B 3C 
16b44     2A 1A 10 06 
16b48     F3 DB CC CA 
16b4c     CF CC BF B2 | 	byte	$57, $55, $4b, $3c, $2a, $1a, $10, $06, $f3, $db, $cc, $ca, $cf, $cc, $bf, $b2
16b50     A9 AB B7 C5 
16b54     D6 E7 F0 FB 
16b58     0E 25 33 36 
16b5c     31 35 40 4E | 	byte	$a9, $ab, $b7, $c5, $d6, $e7, $f0, $fb, $0e, $25, $33, $36, $31, $35, $40, $4e
16b60     55 54 49 3A 
16b64     28 19 0E 04 
16b68     F1 DB CC C8 
16b6c     CC C8 BD B1 | 	byte	$55, $54, $49, $3a, $28, $19, $0e, $04, $f1, $db, $cc, $c8, $cc, $c8, $bd, $b1
16b70     AA AC B7 C8 
16b74     D7 E7 F2 FC 
16b78     10 24 33 38 
16b7c     34 39 43 4F | 	byte	$aa, $ac, $b7, $c8, $d7, $e7, $f2, $fc, $10, $24, $33, $38, $34, $39, $43, $4f
16b80     55 54 49 39 
16b84     27 18 0E 02 
16b88     F1 DB CB C7 
16b8c     C9 C4 BB B0 | 	byte	$55, $54, $49, $39, $27, $18, $0e, $02, $f1, $db, $cb, $c7, $c9, $c4, $bb, $b0
16b90     AB AD B8 C8 
16b94     DA E7 F2 FF 
16b98     10 25 33 39 
16b9c     38 3C 46 4F | 	byte	$ab, $ad, $b8, $c8, $da, $e7, $f2, $ff, $10, $25, $33, $39, $38, $3c, $46, $4f
16ba0     55 53 48 36 
16ba4     25 18 0D 01 
16ba8     EE DA CC C6 
16bac     C6 C1 B8 B0 | 	byte	$55, $53, $48, $36, $25, $18, $0d, $01, $ee, $da, $cc, $c6, $c6, $c1, $b8, $b0
16bb0     AB AE BA CB 
16bb4     DA E8 F3 00 
16bb8     13 25 34 3B 
16bbc     3B 40 48 50 | 	byte	$ab, $ae, $ba, $cb, $da, $e8, $f3, $00, $13, $25, $34, $3b, $3b, $40, $48, $50
16bc0     55 52 45 35 
16bc4     25 17 0C FE 
16bc8     EE DB CB C5 
16bcc     C2 BF B7 B0 | 	byte	$55, $52, $45, $35, $25, $17, $0c, $fe, $ee, $db, $cb, $c5, $c2, $bf, $b7, $b0
16bd0     AC AE BB CB 
16bd4     DB E9 F3 01 
16bd8     12 25 34 3B 
16bdc     3E 42 49 51 | 	byte	$ac, $ae, $bb, $cb, $db, $e9, $f3, $01, $12, $25, $34, $3b, $3e, $42, $49, $51
16be0     54 51 43 34 
16be4     24 17 0B FC 
16be8     ED DA CB C4 
16bec     C0 BC B5 AF | 	byte	$54, $51, $43, $34, $24, $17, $0b, $fc, $ed, $da, $cb, $c4, $c0, $bc, $b5, $af
16bf0     AC B0 BC CD 
16bf4     DC E9 F4 03 
16bf8     14 25 34 3C 
16bfc     41 45 4B 51 | 	byte	$ac, $b0, $bc, $cd, $dc, $e9, $f4, $03, $14, $25, $34, $3c, $41, $45, $4b, $51
16c00     54 50 44 34 
16c04     23 17 0B FC 
16c08     EB DB CD C4 
16c0c     BE BA B4 AF | 	byte	$54, $50, $44, $34, $23, $17, $0b, $fc, $eb, $db, $cd, $c4, $be, $ba, $b4, $af
16c10     AD B1 BE CD 
16c14     DD EA F5 05 
16c18     16 25 33 3D 
16c1c     43 47 4C 51 | 	byte	$ad, $b1, $be, $cd, $dd, $ea, $f5, $05, $16, $25, $33, $3d, $43, $47, $4c, $51
16c20     53 4F 42 32 
16c24     23 16 0B FB 
16c28     EC DB CC C3 
16c2c     BC B8 B4 AF | 	byte	$53, $4f, $42, $32, $23, $16, $0b, $fb, $ec, $db, $cc, $c3, $bc, $b8, $b4, $af
16c30     AD B2 BF CE 
16c34     DE EA F7 05 
16c38     16 26 33 3E 
16c3c     45 49 4D 51 | 	byte	$ad, $b2, $bf, $ce, $de, $ea, $f7, $05, $16, $26, $33, $3e, $45, $49, $4d, $51
16c40     52 4D 40 31 
16c44     22 15 09 F9 
16c48     EA D9 CC C2 
16c4c     BA B6 B2 AF | 	byte	$52, $4d, $40, $31, $22, $15, $09, $f9, $ea, $d9, $cc, $c2, $ba, $b6, $b2, $af
16c50     AE B4 BF CF 
16c54     DE EA F8 07 
16c58     17 27 33 3E 
16c5c     47 4A 4E 51 | 	byte	$ae, $b4, $bf, $cf, $de, $ea, $f8, $07, $17, $27, $33, $3e, $47, $4a, $4e, $51
16c60     51 4C 40 31 
16c64     22 15 07 F8 
16c68     E7 DA CD C1 
16c6c     B9 B4 B2 AF | 	byte	$51, $4c, $40, $31, $22, $15, $07, $f8, $e7, $da, $cd, $c1, $b9, $b4, $b2, $af
16c70     AF B5 C0 CF 
16c74     DE EB F9 09 
16c78     18 27 34 3E 
16c7c     47 4C 4F 51 | 	byte	$af, $b5, $c0, $cf, $de, $eb, $f9, $09, $18, $27, $34, $3e, $47, $4c, $4f, $51
16c80     50 4A 3F 30 
16c84     21 16 07 F7 
16c88     E7 D9 CD C1 
16c8c     B8 B4 B1 B0 | 	byte	$50, $4a, $3f, $30, $21, $16, $07, $f7, $e7, $d9, $cd, $c1, $b8, $b4, $b1, $b0
16c90     B0 B7 C2 D1 
16c94     DE EB FB 0A 
16c98     1A 28 33 3F 
16c9c     48 4D 4F 50 | 	byte	$b0, $b7, $c2, $d1, $de, $eb, $fb, $0a, $1a, $28, $33, $3f, $48, $4d, $4f, $50
16ca0     4F 49 3D 2E 
16ca4     21 14 06 F5 
16ca8     E6 D8 CB C1 
16cac     B7 B3 B1 B0 | 	byte	$4f, $49, $3d, $2e, $21, $14, $06, $f5, $e6, $d8, $cb, $c1, $b7, $b3, $b1, $b0
16cb0     B1 B8 C3 D1 
16cb4     DE EC FC 0C 
16cb8     1B 29 35 40 
16cbc     49 4D 4F 50 | 	byte	$b1, $b8, $c3, $d1, $de, $ec, $fc, $0c, $1b, $29, $35, $40, $49, $4d, $4f, $50
16cc0     4E 47 3D 2E 
16cc4     21 13 04 F3 
16cc8     E3 D7 CB BF 
16ccc     B7 B2 B1 B0 | 	byte	$4e, $47, $3d, $2e, $21, $13, $04, $f3, $e3, $d7, $cb, $bf, $b7, $b2, $b1, $b0
16cd0     B3 B9 C3 D2 
16cd4     DF EC FD 0D 
16cd8     1D 29 35 41 
16cdc     49 4E 4F 50 | 	byte	$b3, $b9, $c3, $d2, $df, $ec, $fd, $0d, $1d, $29, $35, $41, $49, $4e, $4f, $50
16ce0     4D 47 3B 2F 
16ce4     21 13 02 F2 
16ce8     E3 D6 CA BF 
16cec     B6 B2 B2 B1 | 	byte	$4d, $47, $3b, $2f, $21, $13, $02, $f2, $e3, $d6, $ca, $bf, $b6, $b2, $b2, $b1
16cf0     B4 BA C5 D2 
16cf4     E0 ED FE 10 
16cf8     1E 2A 37 41 
16cfc     4A 4E 4E 4E | 	byte	$b4, $ba, $c5, $d2, $e0, $ed, $fe, $10, $1e, $2a, $37, $41, $4a, $4e, $4e, $4e
16d00     4C 46 3B 2D 
16d04     20 12 01 F0 
16d08     E1 D5 C9 BE 
16d0c     B6 B2 B1 B2 | 	byte	$4c, $46, $3b, $2d, $20, $12, $01, $f0, $e1, $d5, $c9, $be, $b6, $b2, $b1, $b2
16d10     B5 BC C6 D2 
16d14     E0 EE 00 10 
16d18     20 2B 37 42 
16d1c     4A 4D 4E 4D | 	byte	$b5, $bc, $c6, $d2, $e0, $ee, $00, $10, $20, $2b, $37, $42, $4a, $4d, $4e, $4d
16d20     4A 43 3A 2C 
16d24     1F 11 FE EF 
16d28     DF D3 C8 BD 
16d2c     B6 B2 B2 B3 | 	byte	$4a, $43, $3a, $2c, $1f, $11, $fe, $ef, $df, $d3, $c8, $bd, $b6, $b2, $b2, $b3
16d30     B6 BC C6 D4 
16d34     E1 F1 01 12 
16d38     21 2D 39 42 
16d3c     4A 4E 4E 4C | 	byte	$b6, $bc, $c6, $d4, $e1, $f1, $01, $12, $21, $2d, $39, $42, $4a, $4e, $4e, $4c
16d40     49 43 38 2C 
16d44     1E 0F FE ED 
16d48     DE D2 C6 BC 
16d4c     B5 B3 B3 B4 | 	byte	$49, $43, $38, $2c, $1e, $0f, $fe, $ed, $de, $d2, $c6, $bc, $b5, $b3, $b3, $b4
16d50     B7 BE C9 D5 
16d54     E2 F1 04 13 
16d58     23 2E 39 44 
16d5c     4A 4D 4D 4B | 	byte	$b7, $be, $c9, $d5, $e2, $f1, $04, $13, $23, $2e, $39, $44, $4a, $4d, $4d, $4b
16d60     48 41 37 2C 
16d64     1E 0D FC EB 
16d68     DE D0 C6 BD 
16d6c     B5 B3 B3 B5 | 	byte	$48, $41, $37, $2c, $1e, $0d, $fc, $eb, $de, $d0, $c6, $bd, $b5, $b3, $b3, $b5
16d70     B9 C0 C8 D5 
16d74     E4 F3 05 15 
16d78     24 30 3B 44 
16d7c     4A 4D 4C 4B | 	byte	$b9, $c0, $c8, $d5, $e4, $f3, $05, $15, $24, $30, $3b, $44, $4a, $4d, $4c, $4b
16d80     47 3F 36 2A 
16d84     1C 0B FB EA 
16d88     DB CF C4 BB 
16d8c     B6 B3 B4 B6 | 	byte	$47, $3f, $36, $2a, $1c, $0b, $fb, $ea, $db, $cf, $c4, $bb, $b6, $b3, $b4, $b6
16d90     BA C2 CA D6 
16d94     E6 F5 07 16 
16d98     25 32 3C 44 
16d9c     4A 4C 4B 49 | 	byte	$ba, $c2, $ca, $d6, $e6, $f5, $07, $16, $25, $32, $3c, $44, $4a, $4c, $4b, $49
16da0     45 3E 35 29 
16da4     1A 09 F9 E9 
16da8     DA CE C3 BB 
16dac     B6 B4 B6 B8 | 	byte	$45, $3e, $35, $29, $1a, $09, $f9, $e9, $da, $ce, $c3, $bb, $b6, $b4, $b6, $b8
16db0     BB C2 CC D7 
16db4     E6 F8 08 18 
16db8     26 32 3D 44 
16dbc     4A 4C 4B 48 | 	byte	$bb, $c2, $cc, $d7, $e6, $f8, $08, $18, $26, $32, $3d, $44, $4a, $4c, $4b, $48
16dc0     44 3D 34 28 
16dc4     19 08 F7 E7 
16dc8     D9 CD C3 BB 
16dcc     B7 B5 B7 B9 | 	byte	$44, $3d, $34, $28, $19, $08, $f7, $e7, $d9, $cd, $c3, $bb, $b7, $b5, $b7, $b9
16dd0     BE C4 CD DA 
16dd4     E9 F9 0A 19 
16dd8     27 34 3E 45 
16ddc     49 4B 49 46 | 	byte	$be, $c4, $cd, $da, $e9, $f9, $0a, $19, $27, $34, $3e, $45, $49, $4b, $49, $46
16de0     43 3C 32 27 
16de4     16 07 F5 E6 
16de8     D9 CC C3 BC 
16dec     B7 B6 B8 BB | 	byte	$43, $3c, $32, $27, $16, $07, $f5, $e6, $d9, $cc, $c3, $bc, $b7, $b6, $b8, $bb
16df0     BF C6 CE DA 
16df4     EB FB 0C 1A 
16df8     29 34 3E 44 
16dfc     48 49 47 44 | 	byte	$bf, $c6, $ce, $da, $eb, $fb, $0c, $1a, $29, $34, $3e, $44, $48, $49, $47, $44
16e00     40 39 30 24 
16e04     14 04 F3 E4 
16e08     D7 CA C2 BB 
16e0c     B8 B7 B9 BC | 	byte	$40, $39, $30, $24, $14, $04, $f3, $e4, $d7, $ca, $c2, $bb, $b8, $b7, $b9, $bc
16e10     C0 C8 D0 DE 
16e14     EC FD 0E 1C 
16e18     2A 36 3E 45 
16e1c     48 48 46 43 | 	byte	$c0, $c8, $d0, $de, $ec, $fd, $0e, $1c, $2a, $36, $3e, $45, $48, $48, $46, $43
16e20     3F 38 2F 20 
16e24     11 00 F2 E3 
16e28     D6 CA C1 BC 
16e2c     B8 B8 BA BE | 	byte	$3f, $38, $2f, $20, $11, $00, $f2, $e3, $d6, $ca, $c1, $bc, $b8, $b8, $ba, $be
16e30     C3 C9 D2 E0 
16e34     EF 00 10 1D 
16e38     2B 36 3F 44 
16e3c     47 47 45 42 | 	byte	$c3, $c9, $d2, $e0, $ef, $00, $10, $1d, $2b, $36, $3f, $44, $47, $47, $45, $42
16e40     3D 37 2C 1E 
16e44     0F FF F0 E2 
16e48     D4 CA C1 BC 
16e4c     B9 BA BC BF | 	byte	$3d, $37, $2c, $1e, $0f, $ff, $f0, $e2, $d4, $ca, $c1, $bc, $b9, $ba, $bc, $bf
16e50     C4 CB D5 E2 
16e54     F3 01 11 20 
16e58     2B 36 3E 44 
16e5c     46 46 43 40 | 	byte	$c4, $cb, $d5, $e2, $f3, $01, $11, $20, $2b, $36, $3e, $44, $46, $46, $43, $40
16e60     3B 33 2A 1C 
16e64     0D FD ED E1 
16e68     D4 C9 C1 BC 
16e6c     BA BB BE C1 | 	byte	$3b, $33, $2a, $1c, $0d, $fd, $ed, $e1, $d4, $c9, $c1, $bc, $ba, $bb, $be, $c1
16e70     C6 CD D8 E6 
16e74     F5 05 12 20 
16e78     2C 37 3F 43 
16e7c     45 44 41 3E | 	byte	$c6, $cd, $d8, $e6, $f5, $05, $12, $20, $2c, $37, $3f, $43, $45, $44, $41, $3e
16e80     39 32 27 19 
16e84     09 FB EC DF 
16e88     D3 C9 C2 BD 
16e8c     BC BD BF C3 | 	byte	$39, $32, $27, $19, $09, $fb, $ec, $df, $d3, $c9, $c2, $bd, $bc, $bd, $bf, $c3
16e90     C8 D0 DA E8 
16e94     F7 07 14 22 
16e98     2D 37 3E 43 
16e9c     44 43 40 3C | 	byte	$c8, $d0, $da, $e8, $f7, $07, $14, $22, $2d, $37, $3e, $43, $44, $43, $40, $3c
16ea0     38 2F 24 18 
16ea4     08 F8 EB DF 
16ea8     D3 CA C2 BE 
16eac     BD BF C1 C4 | 	byte	$38, $2f, $24, $18, $08, $f8, $eb, $df, $d3, $ca, $c2, $be, $bd, $bf, $c1, $c4
16eb0     CA D3 DE EB 
16eb4     FA 08 16 22 
16eb8     2E 37 3D 42 
16ebc     42 41 3F 3A | 	byte	$ca, $d3, $de, $eb, $fa, $08, $16, $22, $2e, $37, $3d, $42, $42, $41, $3f, $3a
16ec0     35 2D 21 14 
16ec4     05 F7 EA DD 
16ec8     D3 C9 C2 BF 
16ecc     BE C0 C3 C6 | 	byte	$35, $2d, $21, $14, $05, $f7, $ea, $dd, $d3, $c9, $c2, $bf, $be, $c0, $c3, $c6
16ed0     CC D5 E1 ED 
16ed4     FC 0A 17 23 
16ed8     2D 36 3C 40 
16edc     41 3F 3C 38 | 	byte	$cc, $d5, $e1, $ed, $fc, $0a, $17, $23, $2d, $36, $3c, $40, $41, $3f, $3c, $38
16ee0     32 29 1E 10 
16ee4     03 F5 E7 DC 
16ee8     D2 C9 C3 BF 
16eec     BF C1 C4 C8 | 	byte	$32, $29, $1e, $10, $03, $f5, $e7, $dc, $d2, $c9, $c3, $bf, $bf, $c1, $c4, $c8
16ef0     CF D7 E3 F1 
16ef4     FD 0C 18 24 
16ef8     2E 36 3C 3F 
16efc     40 3E 3B 36 | 	byte	$cf, $d7, $e3, $f1, $fd, $0c, $18, $24, $2e, $36, $3c, $3f, $40, $3e, $3b, $36
16f00     2F 26 1B 0F 
16f04     00 F4 E7 DB 
16f08     D2 CA C4 C1 
16f0c     C0 C2 C6 CA | 	byte	$2f, $26, $1b, $0f, $00, $f4, $e7, $db, $d2, $ca, $c4, $c1, $c0, $c2, $c6, $ca
16f10     D1 DA E5 F3 
16f14     01 0D 19 24 
16f18     2E 35 3B 3E 
16f1c     3F 3D 39 34 | 	byte	$d1, $da, $e5, $f3, $01, $0d, $19, $24, $2e, $35, $3b, $3e, $3f, $3d, $39, $34
16f20     2D 24 19 0B 
16f24     00 F2 E7 DC 
16f28     D2 CB C5 C2 
16f2c     C2 C4 C7 CD | 	byte	$2d, $24, $19, $0b, $00, $f2, $e7, $dc, $d2, $cb, $c5, $c2, $c2, $c4, $c7, $cd
16f30     D4 DD E9 F5 
16f34     01 0E 19 25 
16f38     2E 35 3B 3D 
16f3c     3D 3B 37 32 | 	byte	$d4, $dd, $e9, $f5, $01, $0e, $19, $25, $2e, $35, $3b, $3d, $3d, $3b, $37, $32
16f40     2B 21 15 0A 
16f44     FD F2 E6 DC 
16f48     D2 CB C6 C3 
16f4c     C3 C5 C9 CE | 	byte	$2b, $21, $15, $0a, $fd, $f2, $e6, $dc, $d2, $cb, $c6, $c3, $c3, $c5, $c9, $ce
16f50     D6 E0 EA F7 
16f54     03 0F 1B 25 
16f58     2E 35 3A 3C 
16f5c     3C 39 36 30 | 	byte	$d6, $e0, $ea, $f7, $03, $0f, $1b, $25, $2e, $35, $3a, $3c, $3c, $39, $36, $30
16f60     28 1F 13 08 
16f64     FC F0 E5 DB 
16f68     D3 CB C7 C5 
16f6c     C5 C7 CB D1 | 	byte	$28, $1f, $13, $08, $fc, $f0, $e5, $db, $d3, $cb, $c7, $c5, $c5, $c7, $cb, $d1
16f70     D9 E2 EE F9 
16f74     05 10 1C 25 
16f78     2D 34 39 3B 
16f7c     3B 39 35 2E | 	byte	$d9, $e2, $ee, $f9, $05, $10, $1c, $25, $2d, $34, $39, $3b, $3b, $39, $35, $2e
16f80     27 1D 12 07 
16f84     FB EF E5 DB 
16f88     D3 CC C8 C5 
16f8c     C5 C8 CC D3 | 	byte	$27, $1d, $12, $07, $fb, $ef, $e5, $db, $d3, $cc, $c8, $c5, $c5, $c8, $cc, $d3
16f90     DA E5 EF FB 
16f94     06 11 1C 26 
16f98     2E 35 39 3B 
16f9c     3A 38 33 2C | 	byte	$da, $e5, $ef, $fb, $06, $11, $1c, $26, $2e, $35, $39, $3b, $3a, $38, $33, $2c
16fa0     24 1A 0F 04 
16fa4     F7 ED E3 D9 
16fa8     D2 CB C8 C6 
16fac     C6 CA CE D5 | 	byte	$24, $1a, $0f, $04, $f7, $ed, $e3, $d9, $d2, $cb, $c8, $c6, $c6, $ca, $ce, $d5
16fb0     DE E7 F2 FE 
16fb4     09 15 1E 28 
16fb8     2F 34 38 39 
16fbc     38 35 30 29 | 	byte	$de, $e7, $f2, $fe, $09, $15, $1e, $28, $2f, $34, $38, $39, $38, $35, $30, $29
16fc0     20 17 0B 00 
16fc4     F5 EA E0 D7 
16fc8     D0 CB C7 C6 
16fcc     C7 CB D0 D8 | 	byte	$20, $17, $0b, $00, $f5, $ea, $e0, $d7, $d0, $cb, $c7, $c6, $c7, $cb, $d0, $d8
16fd0     E0 EA F6 01 
16fd4     0C 16 21 2A 
16fd8     30 35 38 38 
16fdc     37 33 2D 26 | 	byte	$e0, $ea, $f6, $01, $0c, $16, $21, $2a, $30, $35, $38, $38, $37, $33, $2d, $26
16fe0     1D 13 09 FD 
16fe4     F3 E8 DE D6 
16fe8     CF CB C8 C7 
16fec     C9 CD D3 DA | 	byte	$1d, $13, $09, $fd, $f3, $e8, $de, $d6, $cf, $cb, $c8, $c7, $c9, $cd, $d3, $da
16ff0     E4 EE F9 05 
16ff4     0F 1A 22 2B 
16ff8     30 35 38 38 
16ffc     36 31 2B 23 | 	byte	$e4, $ee, $f9, $05, $0f, $1a, $22, $2b, $30, $35, $38, $38, $36, $31, $2b, $23
17000     1B 10 06 FA 
17004     F0 E6 DC D6 
17008     CF CB C9 C9 
1700c     CB CF D5 DE | 	byte	$1b, $10, $06, $fa, $f0, $e6, $dc, $d6, $cf, $cb, $c9, $c9, $cb, $cf, $d5, $de
17010     E7 F1 FC 07 
17014     12 1C 24 2C 
17018     31 35 37 36 
1701c     34 2F 29 20 | 	byte	$e7, $f1, $fc, $07, $12, $1c, $24, $2c, $31, $35, $37, $36, $34, $2f, $29, $20
17020     17 0D 02 F8 
17024     ED E4 DB D3 
17028     CE CB CA CA 
1702c     CD D2 D9 E0 | 	byte	$17, $0d, $02, $f8, $ed, $e4, $db, $d3, $ce, $cb, $ca, $ca, $cd, $d2, $d9, $e0
17030     EA F5 FF 0A 
17034     15 1E 26 2D 
17038     32 35 36 35 
1703c     32 2C 26 1E | 	byte	$ea, $f5, $ff, $0a, $15, $1e, $26, $2d, $32, $35, $36, $35, $32, $2c, $26, $1e
17040     14 0A FF F5 
17044     EB E1 DA D3 
17048     CE CB CA CC 
1704c     CF D4 DB E4 | 	byte	$14, $0a, $ff, $f5, $eb, $e1, $da, $d3, $ce, $cb, $ca, $cc, $cf, $d4, $db, $e4
17050     ED F7 01 0D 
17054     16 20 27 2E 
17058     33 35 35 34 
1705c     30 2B 23 1C | 	byte	$ed, $f7, $01, $0d, $16, $20, $27, $2e, $33, $35, $35, $34, $30, $2b, $23, $1c
17060     12 08 FD F3 
17064     E9 E0 D8 D3 
17068     CE CC CC CD 
1706c     D1 D7 DE E6 | 	byte	$12, $08, $fd, $f3, $e9, $e0, $d8, $d3, $ce, $cc, $cc, $cd, $d1, $d7, $de, $e6
17070     EF FA 04 0F 
17074     18 21 28 2E 
17078     32 34 35 32 
1707c     2F 28 21 19 | 	byte	$ef, $fa, $04, $0f, $18, $21, $28, $2e, $32, $34, $35, $32, $2f, $28, $21, $19
17080     0F 05 FA F1 
17084     E7 DE D7 D2 
17088     CE CC CD CE 
1708c     D3 D8 E1 E9 | 	byte	$0f, $05, $fa, $f1, $e7, $de, $d7, $d2, $ce, $cc, $cd, $ce, $d3, $d8, $e1, $e9
17090     F1 FC 07 11 
17094     1A 22 29 2E 
17098     32 33 32 30 
1709c     2B 25 1E 15 | 	byte	$f1, $fc, $07, $11, $1a, $22, $29, $2e, $32, $33, $32, $30, $2b, $25, $1e, $15
170a0     0C 02 F8 EE 
170a4     E5 DD D6 D1 
170a8     CE CD CE D0 
170ac     D5 DB E2 EB | 	byte	$0c, $02, $f8, $ee, $e5, $dd, $d6, $d1, $ce, $cd, $ce, $d0, $d5, $db, $e2, $eb
170b0     F5 FF 09 12 
170b4     1C 24 29 2F 
170b8     32 32 31 2F 
170bc     2A 24 1C 13 | 	byte	$f5, $ff, $09, $12, $1c, $24, $29, $2f, $32, $32, $31, $2f, $2a, $24, $1c, $13
170c0     0A FF F6 EC 
170c4     E4 DC D6 D1 
170c8     CE CD CF D2 
170cc     D6 DC E5 EE | 	byte	$0a, $ff, $f6, $ec, $e4, $dc, $d6, $d1, $ce, $cd, $cf, $d2, $d6, $dc, $e5, $ee
170d0     F7 01 0B 15 
170d4     1D 24 2B 2E 
170d8     31 32 30 2D 
170dc     28 21 1A 10 | 	byte	$f7, $01, $0b, $15, $1d, $24, $2b, $2e, $31, $32, $30, $2d, $28, $21, $1a, $10
170e0     08 FE F4 EA 
170e4     E2 DB D6 D1 
170e8     CF CE D0 D3 
170ec     D8 DF E7 F0 | 	byte	$08, $fe, $f4, $ea, $e2, $db, $d6, $d1, $cf, $ce, $d0, $d3, $d8, $df, $e7, $f0
170f0     F9 03 0D 17 
170f4     1E 25 2B 2F 
170f8     31 31 2F 2B 
170fc     26 1F 18 0E | 	byte	$f9, $03, $0d, $17, $1e, $25, $2b, $2f, $31, $31, $2f, $2b, $26, $1f, $18, $0e
17100     04 FC F2 EA 
17104     E1 DA D5 D1 
17108     CF CF D1 D5 
1710c     DA E1 E9 F2 | 	byte	$04, $fc, $f2, $ea, $e1, $da, $d5, $d1, $cf, $cf, $d1, $d5, $da, $e1, $e9, $f2
17110     FC 05 0E 17 
17114     1F 26 2B 2F 
17118     30 30 2E 2A 
1711c     24 1D 15 0D | 	byte	$fc, $05, $0e, $17, $1f, $26, $2b, $2f, $30, $30, $2e, $2a, $24, $1d, $15, $0d
17120     03 F9 F0 E7 
17124     E0 DA D4 D1 
17128     D0 D0 D2 D6 
1712c     DC E3 EB F4 | 	byte	$03, $f9, $f0, $e7, $e0, $da, $d4, $d1, $d0, $d0, $d2, $d6, $dc, $e3, $eb, $f4
17130     FD 07 10 19 
17134     20 27 2C 2F 
17138     30 30 2D 29 
1713c     23 1C 14 0B | 	byte	$fd, $07, $10, $19, $20, $27, $2c, $2f, $30, $30, $2d, $29, $23, $1c, $14, $0b
17140     02 F9 EF E7 
17144     E0 D9 D5 D2 
17148     D1 D1 D3 D8 
1714c     DD E5 ED F6 | 	byte	$02, $f9, $ef, $e7, $e0, $d9, $d5, $d2, $d1, $d1, $d3, $d8, $dd, $e5, $ed, $f6
17150     FF 09 12 1A 
17154     21 27 2B 2E 
17158     30 2F 2B 27 
1715c     21 1A 12 09 | 	byte	$ff, $09, $12, $1a, $21, $27, $2b, $2e, $30, $2f, $2b, $27, $21, $1a, $12, $09
17160     00 F6 EE E6 
17164     DE D9 D5 D2 
17168     D1 D2 D5 DA 
1716c     DF E6 EE F7 | 	byte	$00, $f6, $ee, $e6, $de, $d9, $d5, $d2, $d1, $d2, $d5, $da, $df, $e6, $ee, $f7
17170     00 0A 13 1B 
17174     21 27 2C 2D 
17178     2E 2D 2A 26 
1717c     1F 18 0F 07 | 	byte	$00, $0a, $13, $1b, $21, $27, $2c, $2d, $2e, $2d, $2a, $26, $1f, $18, $0f, $07
17180     FD F5 EC E4 
17184     DD D8 D4 D2 
17188     D1 D3 D6 DB 
1718c     E1 E8 F1 FA | 	byte	$fd, $f5, $ec, $e4, $dd, $d8, $d4, $d2, $d1, $d3, $d6, $db, $e1, $e8, $f1, $fa
17190     02 0C 15 1C 
17194     23 28 2C 2D 
17198     2E 2C 29 24 
1719c     1E 17 0E 05 | 	byte	$02, $0c, $15, $1c, $23, $28, $2c, $2d, $2e, $2c, $29, $24, $1e, $17, $0e, $05
171a0     FC F3 EB E4 
171a4     DD D8 D4 D2 
171a8     D2 D4 D7 DC 
171ac     E2 EA F2 FB | 	byte	$fc, $f3, $eb, $e4, $dd, $d8, $d4, $d2, $d2, $d4, $d7, $dc, $e2, $ea, $f2, $fb
171b0     04 0D 16 1D 
171b4     23 28 2B 2E 
171b8     2D 2B 28 23 
171bc     1D 14 0D 04 | 	byte	$04, $0d, $16, $1d, $23, $28, $2b, $2e, $2d, $2b, $28, $23, $1d, $14, $0d, $04
171c0     FB F2 E9 E3 
171c4     DD D8 D5 D3 
171c8     D3 D5 D9 DE 
171cc     E4 EC F4 FC | 	byte	$fb, $f2, $e9, $e3, $dd, $d8, $d5, $d3, $d3, $d5, $d9, $de, $e4, $ec, $f4, $fc
171d0     05 0F 16 1D 
171d4     24 28 2B 2C 
171d8     2C 2A 27 21 
171dc     1B 13 0B 02 | 	byte	$05, $0f, $16, $1d, $24, $28, $2b, $2c, $2c, $2a, $27, $21, $1b, $13, $0b, $02
171e0     F9 F1 E9 E2 
171e4     DD D8 D5 D3 
171e8     D4 D6 DA DF 
171ec     E5 ED F5 FE | 	byte	$f9, $f1, $e9, $e2, $dd, $d8, $d5, $d3, $d4, $d6, $da, $df, $e5, $ed, $f5, $fe
171f0     07 10 18 1F 
171f4     24 28 2B 2C 
171f8     2C 29 25 20 
171fc     19 12 09 01 | 	byte	$07, $10, $18, $1f, $24, $28, $2b, $2c, $2c, $29, $25, $20, $19, $12, $09, $01
17200     F8 EF E8 E1 
17204     DB D7 D5 D4 
17208     D5 D7 DB E0 
1720c     E7 EF F7 00 | 	byte	$f8, $ef, $e8, $e1, $db, $d7, $d5, $d4, $d5, $d7, $db, $e0, $e7, $ef, $f7, $00
17210     09 11 18 1F 
17214     25 29 2B 2C 
17218     2B 28 25 1F 
1721c     18 10 08 00 | 	byte	$09, $11, $18, $1f, $25, $29, $2b, $2c, $2b, $28, $25, $1f, $18, $10, $08, $00
17220     F7 EF E7 E1 
17224     DC D8 D5 D5 
17228     D6 D8 DC E2 
1722c     E9 F1 F9 01 | 	byte	$f7, $ef, $e7, $e1, $dc, $d8, $d5, $d5, $d6, $d8, $dc, $e2, $e9, $f1, $f9, $01
17230     0A 12 19 20 
17234     25 29 2B 2B 
17238     2A 27 23 1D 
1723c     17 0E 06 FE | 	byte	$0a, $12, $19, $20, $25, $29, $2b, $2b, $2a, $27, $23, $1d, $17, $0e, $06, $fe
17240     F6 ED E6 E0 
17244     DB D8 D5 D5 
17248     D6 DA DE E3 
1724c     EA F2 FA 03 | 	byte	$f6, $ed, $e6, $e0, $db, $d8, $d5, $d5, $d6, $da, $de, $e3, $ea, $f2, $fa, $03
17250     0B 13 1A 20 
17254     25 28 2A 2A 
17258     29 26 21 1B 
1725c     14 0D 04 FC | 	byte	$0b, $13, $1a, $20, $25, $28, $2a, $2a, $29, $26, $21, $1b, $14, $0d, $04, $fc
17260     F4 EC E5 E0 
17264     DA D7 D5 D5 
17268     D7 DA DF E5 
1726c     EC F4 FC 05 | 	byte	$f4, $ec, $e5, $e0, $da, $d7, $d5, $d5, $d7, $da, $df, $e5, $ec, $f4, $fc, $05
17270     0D 14 1B 21 
17274     26 28 2A 2A 
17278     28 25 1F 1A 
1727c     12 0B 03 FA | 	byte	$0d, $14, $1b, $21, $26, $28, $2a, $2a, $28, $25, $1f, $1a, $12, $0b, $03, $fa
17280     F3 EB E5 DF 
17284     DA D7 D6 D6 
17288     D8 DC E0 E7 
1728c     ED F5 FD 06 | 	byte	$f3, $eb, $e5, $df, $da, $d7, $d6, $d6, $d8, $dc, $e0, $e7, $ed, $f5, $fd, $06
17290     0E 15 1C 22 
17294     26 29 29 29 
17298     27 24 1E 18 
1729c     11 09 01 F9 | 	byte	$0e, $15, $1c, $22, $26, $29, $29, $29, $27, $24, $1e, $18, $11, $09, $01, $f9
172a0     F1 EA E3 DF 
172a4     DA D8 D6 D7 
172a8     D9 DD E2 E8 
172ac     EF F6 FF 08 | 	byte	$f1, $ea, $e3, $df, $da, $d8, $d6, $d7, $d9, $dd, $e2, $e8, $ef, $f6, $ff, $08
172b0     0F 16 1D 22 
172b4     26 28 29 28 
172b8     26 21 1D 17 
172bc     0F 08 FF F8 | 	byte	$0f, $16, $1d, $22, $26, $28, $29, $28, $26, $21, $1d, $17, $0f, $08, $ff, $f8
172c0     F0 E8 E3 DD 
172c4     DA D8 D7 D8 
172c8     DA DE E3 EA 
172cc     F1 FA 01 09 | 	byte	$f0, $e8, $e3, $dd, $da, $d8, $d7, $d8, $da, $de, $e3, $ea, $f1, $fa, $01, $09
172d0     10 18 1D 23 
172d4     26 28 28 27 
172d8     25 21 1B 14 
172dc     0E 05 FE F6 | 	byte	$10, $18, $1d, $23, $26, $28, $28, $27, $25, $21, $1b, $14, $0e, $05, $fe, $f6
172e0     EF E8 E2 DD 
172e4     DA D8 D8 D9 
172e8     DC E0 E5 EC 
172ec     F3 FB 02 0B | 	byte	$ef, $e8, $e2, $dd, $da, $d8, $d8, $d9, $dc, $e0, $e5, $ec, $f3, $fb, $02, $0b
172f0     12 19 1F 23 
172f4     26 28 28 27 
172f8     24 1F 1A 13 
172fc     0C 04 FD F5 | 	byte	$12, $19, $1f, $23, $26, $28, $28, $27, $24, $1f, $1a, $13, $0c, $04, $fd, $f5
17300     ED E7 E1 DD 
17304     DA D9 D9 DA 
17308     DD E1 E7 ED 
1730c     F5 FD 04 0C | 	byte	$ed, $e7, $e1, $dd, $da, $d9, $d9, $da, $dd, $e1, $e7, $ed, $f5, $fd, $04, $0c
17310     13 19 1F 23 
17314     26 27 27 26 
17318     22 1E 18 11 
1731c     0A 02 FB F3 | 	byte	$13, $19, $1f, $23, $26, $27, $27, $26, $22, $1e, $18, $11, $0a, $02, $fb, $f3
17320     EC E6 E1 DD 
17324     DA D9 D9 DB 
17328     DE E3 E8 EF 
1732c     F6 FE 06 0D | 	byte	$ec, $e6, $e1, $dd, $da, $d9, $d9, $db, $de, $e3, $e8, $ef, $f6, $fe, $06, $0d
17330     14 1A 20 23 
17334     26 26 26 24 
17338     21 1C 15 0F 
1733c     09 00 F9 F2 | 	byte	$14, $1a, $20, $23, $26, $26, $26, $24, $21, $1c, $15, $0f, $09, $00, $f9, $f2
17340     EB E5 E0 DC 
17344     DA D9 DA DB 
17348     DF E4 EA F1 
1734c     F8 00 07 0F | 	byte	$eb, $e5, $e0, $dc, $da, $d9, $da, $db, $df, $e4, $ea, $f1, $f8, $00, $07, $0f
17350     15 1B 20 23 
17354     25 26 25 23 
17358     1F 1A 15 0D 
1735c     06 FF F7 F1 | 	byte	$15, $1b, $20, $23, $25, $26, $25, $23, $1f, $1a, $15, $0d, $06, $ff, $f7, $f1
17360     EA E4 E0 DC 
17364     DA DA DB DD 
17368     E1 E5 EC F3 
1736c     FA 02 0A 10 | 	byte	$ea, $e4, $e0, $dc, $da, $da, $db, $dd, $e1, $e5, $ec, $f3, $fa, $02, $0a, $10
17370     17 1C 21 24 
17374     25 25 24 22 
17378     1E 19 13 0C 
1737c     04 FE F6 EF | 	byte	$17, $1c, $21, $24, $25, $25, $24, $22, $1e, $19, $13, $0c, $04, $fe, $f6, $ef
17380     E9 E4 DF DC 
17384     DB DB DC DF 
17388     E3 E8 EE F4 
1738c     FC 03 0A 12 | 	byte	$e9, $e4, $df, $dc, $db, $db, $dc, $df, $e3, $e8, $ee, $f4, $fc, $03, $0a, $12
17390     17 1D 21 23 
17394     25 25 23 20 
17398     1C 17 10 09 
1739c     03 FC F5 ED | 	byte	$17, $1d, $21, $23, $25, $25, $23, $20, $1c, $17, $10, $09, $03, $fc, $f5, $ed
173a0     E8 E3 DF DC 
173a4     DB DC DD E1 
173a8     E4 EA F0 F7 
173ac     FE 05 0C 13 | 	byte	$e8, $e3, $df, $dc, $db, $dc, $dd, $e1, $e4, $ea, $f0, $f7, $fe, $05, $0c, $13
173b0     18 1D 21 23 
173b4     24 24 22 1F 
173b8     1A 15 0F 08 
173bc     01 F9 F3 ED | 	byte	$18, $1d, $21, $23, $24, $24, $22, $1f, $1a, $15, $0f, $08, $01, $f9, $f3, $ed
173c0     E7 E2 DF DD 
173c4     DC DD DE E2 
173c8     E6 EC F2 F9 
173cc     00 07 0E 14 | 	byte	$e7, $e2, $df, $dd, $dc, $dd, $de, $e2, $e6, $ec, $f2, $f9, $00, $07, $0e, $14
173d0     19 1E 21 24 
173d4     24 23 21 1D 
173d8     18 13 0D 06 
173dc     FF F8 F2 EB | 	byte	$19, $1e, $21, $24, $24, $23, $21, $1d, $18, $13, $0d, $06, $ff, $f8, $f2, $eb
173e0     E7 E2 DF DD 
173e4     DD DE E0 E3 
173e8     E8 EE F4 FB 
173ec     02 09 0F 15 | 	byte	$e7, $e2, $df, $dd, $dd, $de, $e0, $e3, $e8, $ee, $f4, $fb, $02, $09, $0f, $15
173f0     1A 1E 21 23 
173f4     23 21 1F 1C 
173f8     17 11 0A 04 
173fc     FE F7 F1 EA | 	byte	$1a, $1e, $21, $23, $23, $21, $1f, $1c, $17, $11, $0a, $04, $fe, $f7, $f1, $ea
17400     E6 E2 DF DE 
17404     DE DE E1 E5 
17408     EA EF F6 FD 
1740c     04 0A 10 16 | 	byte	$e6, $e2, $df, $de, $de, $de, $e1, $e5, $ea, $ef, $f6, $fd, $04, $0a, $10, $16
17410     1B 1F 21 22 
17414     22 20 1E 19 
17418     14 0F 09 02 
1741c     FB F4 EF E9 | 	byte	$1b, $1f, $21, $22, $22, $20, $1e, $19, $14, $0f, $09, $02, $fb, $f4, $ef, $e9
17420     E5 E1 DF DE 
17424     DE E0 E2 E7 
17428     EC F1 F8 FE 
1742c     05 0C 12 17 | 	byte	$e5, $e1, $df, $de, $de, $e0, $e2, $e7, $ec, $f1, $f8, $fe, $05, $0c, $12, $17
17430     1B 1F 21 21 
17434     20 1F 1C 18 
17438     13 0D 07 00 
1743c     F9 F3 ED E8 | 	byte	$1b, $1f, $21, $21, $20, $1f, $1c, $18, $13, $0d, $07, $00, $f9, $f3, $ed, $e8
17440     E4 E1 DF DF 
17444     E0 E1 E4 E8 
17448     EE F3 FA 01 
1744c     07 0D 13 17 | 	byte	$e4, $e1, $df, $df, $e0, $e1, $e4, $e8, $ee, $f3, $fa, $01, $07, $0d, $13, $17
17450     1C 1F 20 21 
17454     20 1E 1A 16 
17458     11 0B 05 FF 
1745c     F8 F2 ED E8 | 	byte	$1c, $1f, $20, $21, $20, $1e, $1a, $16, $11, $0b, $05, $ff, $f8, $f2, $ed, $e8
17460     E4 E2 E0 E0 
17464     E1 E3 E6 EA 
17468     F0 F6 FC 03 
1746c     09 0E 14 19 | 	byte	$e4, $e2, $e0, $e0, $e1, $e3, $e6, $ea, $f0, $f6, $fc, $03, $09, $0e, $14, $19
17470     1C 1F 20 20 
17474     1F 1C 19 14 
17478     0F 09 03 FD 
1747c     F7 F1 EB E7 | 	byte	$1c, $1f, $20, $20, $1f, $1c, $19, $14, $0f, $09, $03, $fd, $f7, $f1, $eb, $e7
17480     E4 E2 E1 E1 
17484     E2 E5 E8 EC 
17488     F2 F8 FE 04 
1748c     0A 0F 15 19 | 	byte	$e4, $e2, $e1, $e1, $e2, $e5, $e8, $ec, $f2, $f8, $fe, $04, $0a, $0f, $15, $19
17490     1C 1E 1F 1F 
17494     1D 1A 16 12 
17498     0D 07 01 FA 
1749c     F5 EF EB E7 | 	byte	$1c, $1e, $1f, $1f, $1d, $1a, $16, $12, $0d, $07, $01, $fa, $f5, $ef, $eb, $e7
174a0     E4 E2 E1 E2 
174a4     E3 E6 EA EE 
174a8     F4 F9 00 06 
174ac     0B 11 15 1A | 	byte	$e4, $e2, $e1, $e2, $e3, $e6, $ea, $ee, $f4, $f9, $00, $06, $0b, $11, $15, $1a
174b0     1C 1E 1E 1E 
174b4     1C 19 15 10 
174b8     0B 05 00 F9 
174bc     F4 EF EA E7 | 	byte	$1c, $1e, $1e, $1e, $1c, $19, $15, $10, $0b, $05, $00, $f9, $f4, $ef, $ea, $e7
174c0     E4 E2 E2 E3 
174c4     E5 E8 EC F0 
174c8     F6 FB 02 07 
174cc     0D 12 17 1A | 	byte	$e4, $e2, $e2, $e3, $e5, $e8, $ec, $f0, $f6, $fb, $02, $07, $0d, $12, $17, $1a
174d0     1C 1D 1D 1C 
174d4     1B 17 13 0F 
174d8     09 03 FE F8 
174dc     F2 EE E9 E6 | 	byte	$1c, $1d, $1d, $1c, $1b, $17, $13, $0f, $09, $03, $fe, $f8, $f2, $ee, $e9, $e6
174e0     E4 E2 E2 E4 
174e4     E6 E9 EE F2 
174e8     F8 FD 03 09 
174ec     0E 13 16 1A | 	byte	$e4, $e2, $e2, $e4, $e6, $e9, $ee, $f2, $f8, $fd, $03, $09, $0e, $13, $16, $1a
174f0     1C 1C 1C 1B 
174f4     19 15 11 0C 
174f8     07 01 FB F6 
174fc     F1 EC E9 E6 | 	byte	$1c, $1c, $1c, $1b, $19, $15, $11, $0c, $07, $01, $fb, $f6, $f1, $ec, $e9, $e6
17500     E4 E3 E3 E5 
17504     E7 EB EF F5 
17508     F9 FF 04 0A 
1750c     0F 13 17 1A | 	byte	$e4, $e3, $e3, $e5, $e7, $eb, $ef, $f5, $f9, $ff, $04, $0a, $0f, $13, $17, $1a
17510     1B 1C 1B 1A 
17514     17 14 0F 0B 
17518     05 FF FA F5 
1751c     F0 EC E8 E6 | 	byte	$1b, $1c, $1b, $1a, $17, $14, $0f, $0b, $05, $ff, $fa, $f5, $f0, $ec, $e8, $e6
17520     E4 E4 E5 E6 
17524     E9 ED F1 F6 
17528     FB 01 06 0B 
1752c     10 14 17 1A | 	byte	$e4, $e4, $e5, $e6, $e9, $ed, $f1, $f6, $fb, $01, $06, $0b, $10, $14, $17, $1a
17530     1B 1B 1A 19 
17534     16 12 0E 09 
17538     04 FF F9 F4 
1753c     EF EC E9 E7 | 	byte	$1b, $1b, $1a, $19, $16, $12, $0e, $09, $04, $ff, $f9, $f4, $ef, $ec, $e9, $e7
17540     E5 E5 E6 E8 
17544     EB EE F3 F7 
17548     FD 02 07 0D 
1754c     11 15 18 1A | 	byte	$e5, $e5, $e6, $e8, $eb, $ee, $f3, $f7, $fd, $02, $07, $0d, $11, $15, $18, $1a
17550     1A 1A 19 17 
17554     14 10 0C 07 
17558     02 FD F8 F3 
1755c     EF EB E8 E6 | 	byte	$1a, $1a, $19, $17, $14, $10, $0c, $07, $02, $fd, $f8, $f3, $ef, $eb, $e8, $e6
17560     E5 E6 E7 E9 
17564     EC F0 F4 F9 
17568     FE 03 09 0D 
1756c     12 15 18 1A | 	byte	$e5, $e6, $e7, $e9, $ec, $f0, $f4, $f9, $fe, $03, $09, $0d, $12, $15, $18, $1a
17570     1A 1A 19 16 
17574     13 0F 0B 06 
17578     01 FB F6 F2 
1757c     EE EB E8 E7 | 	byte	$1a, $1a, $19, $16, $13, $0f, $0b, $06, $01, $fb, $f6, $f2, $ee, $eb, $e8, $e7
17580     E6 E7 E8 EA 
17584     ED F1 F5 FB 
17588     00 05 0A 0F 
1758c     12 15 18 19 | 	byte	$e6, $e7, $e8, $ea, $ed, $f1, $f5, $fb, $00, $05, $0a, $0f, $12, $15, $18, $19
17590     1A 19 18 15 
17594     12 0E 09 04 
17598     00 FB F6 F2 
1759c     EE EB E9 E7 | 	byte	$1a, $19, $18, $15, $12, $0e, $09, $04, $00, $fb, $f6, $f2, $ee, $eb, $e9, $e7
175a0     E7 E8 E9 EC 
175a4     EF F3 F7 FC 
175a8     01 06 0B 0F 
175ac     13 16 18 19 | 	byte	$e7, $e8, $e9, $ec, $ef, $f3, $f7, $fc, $01, $06, $0b, $0f, $13, $16, $18, $19
175b0     19 18 17 14 
175b4     11 0C 07 03 
175b8     FE F9 F4 F0 
175bc     ED EA E8 E7 | 	byte	$19, $18, $17, $14, $11, $0c, $07, $03, $fe, $f9, $f4, $f0, $ed, $ea, $e8, $e7
175c0     E7 E8 EA ED 
175c4     F0 F4 F9 FE 
175c8     02 07 0C 10 
175cc     13 15 17 18 | 	byte	$e7, $e8, $ea, $ed, $f0, $f4, $f9, $fe, $02, $07, $0c, $10, $13, $15, $17, $18
175d0     18 17 15 12 
175d4     0E 0A 06 01 
175d8     FC F7 F3 EF 
175dc     EC EA E8 E7 | 	byte	$18, $17, $15, $12, $0e, $0a, $06, $01, $fc, $f7, $f3, $ef, $ec, $ea, $e8, $e7
175e0     E8 E9 EB EE 
175e4     F1 F5 FA FF 
175e8     03 09 0D 10 
175ec     13 16 17 18 | 	byte	$e8, $e9, $eb, $ee, $f1, $f5, $fa, $ff, $03, $09, $0d, $10, $13, $16, $17, $18
175f0     17 16 14 11 
175f4     0E 09 05 00 
175f8     FC F7 F3 EF 
175fc     EC EA E9 E8 | 	byte	$17, $16, $14, $11, $0e, $09, $05, $00, $fc, $f7, $f3, $ef, $ec, $ea, $e9, $e8
17600     E8 EA EC EF 
17604     F3 F7 FB 01 
17608     05 09 0D 11 
1760c     14 16 17 18 | 	byte	$e8, $ea, $ec, $ef, $f3, $f7, $fb, $01, $05, $09, $0d, $11, $14, $16, $17, $18
17610     17 15 13 10 
17614     0C 08 04 FF 
17618     FB F6 F2 EF 
1761c     EC EA E9 E9 | 	byte	$17, $15, $13, $10, $0c, $08, $04, $ff, $fb, $f6, $f2, $ef, $ec, $ea, $e9, $e9
17620     EA EB ED F1 
17624     F4 F9 FD 01 
17628     06 0A 0E 12 
1762c     14 16 17 17 | 	byte	$ea, $eb, $ed, $f1, $f4, $f9, $fd, $01, $06, $0a, $0e, $12, $14, $16, $17, $17
17630     16 14 12 0F 
17634     0B 07 02 FE 
17638     F9 F5 F1 EE 
1763c     EC EA E9 E9 | 	byte	$16, $14, $12, $0f, $0b, $07, $02, $fe, $f9, $f5, $f1, $ee, $ec, $ea, $e9, $e9
17640     EA EC EF F2 
17644     F6 FA FE 03 
17648     07 0B 0F 12 
1764c     14 16 16 17 | 	byte	$ea, $ec, $ef, $f2, $f6, $fa, $fe, $03, $07, $0b, $0f, $12, $14, $16, $16, $17
17650     15 13 11 0D 
17654     0A 06 01 FC 
17658     F8 F4 F0 EE 
1765c     EB EA E9 EA | 	byte	$15, $13, $11, $0d, $0a, $06, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $e9, $ea
17660     EB ED F0 F3 
17664     F7 FB 00 04 
17668     08 0D 10 12 
1766c     14 16 16 16 | 	byte	$eb, $ed, $f0, $f3, $f7, $fb, $00, $04, $08, $0d, $10, $12, $14, $16, $16, $16
17670     15 13 10 0D 
17674     09 05 01 FC 
17678     F8 F4 F0 EE 
1767c     EB EA EA EB | 	byte	$15, $13, $10, $0d, $09, $05, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $ea, $eb
17680     EC EE F1 F4 
17684     F8 FC 00 05 
17688     09 0D 10 13 
1768c     14 16 16 15 | 	byte	$ec, $ee, $f1, $f4, $f8, $fc, $00, $05, $09, $0d, $10, $13, $14, $16, $16, $15
17690     14 12 0F 0B 
17694     07 03 FF FB 
17698     F7 F3 F0 ED 
1769c     EB EA EA EB | 	byte	$14, $12, $0f, $0b, $07, $03, $ff, $fb, $f7, $f3, $f0, $ed, $eb, $ea, $ea, $eb
176a0     EC EE F2 F5 
176a4     F8 FD 01 06 
176a8     0A 0D 10 13 
176ac     14 15 15 15 | 	byte	$ec, $ee, $f2, $f5, $f8, $fd, $01, $06, $0a, $0d, $10, $13, $14, $15, $15, $15
176b0     13 10 0D 0A 
176b4     07 02 FD FA 
176b8     F5 F2 EF ED 
176bc     EB EA EB EB | 	byte	$13, $10, $0d, $0a, $07, $02, $fd, $fa, $f5, $f2, $ef, $ed, $eb, $ea, $eb, $eb
176c0     ED EF F2 F5 
176c4     FA FE 02 07 
176c8     0A 0E 11 13 
176cc     14 15 15 14 | 	byte	$ed, $ef, $f2, $f5, $fa, $fe, $02, $07, $0a, $0e, $11, $13, $14, $15, $15, $14
176d0     12 0F 0D 09 
176d4     05 01 FD F9 
176d8     F5 F2 EF ED 
176dc     EC EB EB EC | 	byte	$12, $0f, $0d, $09, $05, $01, $fd, $f9, $f5, $f2, $ef, $ed, $ec, $eb, $eb, $ec
176e0     EE F0 F3 F6 
176e4     FA FF 03 07 
176e8     0B 0E 11 13 
176ec     14 15 15 13 | 	byte	$ee, $f0, $f3, $f6, $fa, $ff, $03, $07, $0b, $0e, $11, $13, $14, $15, $15, $13
176f0     12 0F 0C 08 
176f4     05 00 FC F8 
176f8     F4 F1 EF ED 
176fc     EC EB EB ED | 	byte	$12, $0f, $0c, $08, $05, $00, $fc, $f8, $f4, $f1, $ef, $ed, $ec, $eb, $eb, $ed
17700     EE F1 F4 F8 
17704     FC 00 04 08 
17708     0C 0F 11 13 
1770c     14 15 14 13 | 	byte	$ee, $f1, $f4, $f8, $fc, $00, $04, $08, $0c, $0f, $11, $13, $14, $15, $14, $13
17710     11 0E 0B 07 
17714     03 FF FB F8 
17718     F4 F0 EE ED 
1771c     EC EB EC ED | 	byte	$11, $0e, $0b, $07, $03, $ff, $fb, $f8, $f4, $f0, $ee, $ed, $ec, $eb, $ec, $ed
17720     EF F2 F5 F9 
17724     FD 01 05 08 
17728     0C 0F 11 13 
1772c     14 14 14 12 | 	byte	$ef, $f2, $f5, $f9, $fd, $01, $05, $08, $0c, $0f, $11, $13, $14, $14, $14, $12
17730     10 0E 0B 07 
17734     03 FE FB F7 
17738     F3 F1 EE ED 
1773c     EC EC EC EE | 	byte	$10, $0e, $0b, $07, $03, $fe, $fb, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ec, $ee
17740     F0 F3 F6 F9 
17744     FD 02 06 0A 
17748     0D 10 12 13 
1774c     14 14 14 12 | 	byte	$f0, $f3, $f6, $f9, $fd, $02, $06, $0a, $0d, $10, $12, $13, $14, $14, $14, $12
17750     10 0D 0A 06 
17754     02 FE FA F7 
17758     F3 F1 EE ED 
1775c     EC EC ED EE | 	byte	$10, $0d, $0a, $06, $02, $fe, $fa, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ee
17760     F1 F3 F7 FA 
17764     FF 02 07 0A 
17768     0D 10 12 14 
1776c     14 14 13 12 | 	byte	$f1, $f3, $f7, $fa, $ff, $02, $07, $0a, $0d, $10, $12, $14, $14, $14, $13, $12
17770     0F 0C 09 05 
17774     02 FD FA F6 
17778     F3 F1 EE ED 
1777c     EC EC ED EF | 	byte	$0f, $0c, $09, $05, $02, $fd, $fa, $f6, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ef
17780     F1 F4 F8 FB 
17784     FF 03 06 0A 
17788     0D 10 12 13 
1778c     13 13 12 11 | 	byte	$f1, $f4, $f8, $fb, $ff, $03, $06, $0a, $0d, $10, $12, $13, $13, $13, $12, $11
17790     0E 0B 08 04 
17794     00 FD F8 F5 
17798     F2 EF ED ED 
1779c     EC EC ED EF | 	byte	$0e, $0b, $08, $04, $00, $fd, $f8, $f5, $f2, $ef, $ed, $ed, $ec, $ec, $ed, $ef
177a0     F1 F4 F8 FC 
177a4     FF 03 07 0A 
177a8     0E 10 12 13 
177ac     14 13 12 10 | 	byte	$f1, $f4, $f8, $fc, $ff, $03, $07, $0a, $0e, $10, $12, $13, $14, $13, $12, $10
177b0     0E 0B 07 04 
177b4     00 FC F8 F5 
177b8     F2 F0 EE ED 
177bc     EC ED EE F0 | 	byte	$0e, $0b, $07, $04, $00, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ec, $ed, $ee, $f0
177c0     F2 F5 F8 FD 
177c4     01 04 08 0B 
177c8     0E 10 12 13 
177cc     13 13 11 0F | 	byte	$f2, $f5, $f8, $fd, $01, $04, $08, $0b, $0e, $10, $12, $13, $13, $13, $11, $0f
177d0     0D 0A 07 03 
177d4     FF FC F8 F5 
177d8     F2 F0 EE ED 
177dc     ED EE EF F1 | 	byte	$0d, $0a, $07, $03, $ff, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ed, $ee, $ef, $f1
177e0     F3 F6 FA FD 
177e4     01 05 08 0B 
177e8     0E 10 12 13 
177ec     13 12 11 0F | 	byte	$f3, $f6, $fa, $fd, $01, $05, $08, $0b, $0e, $10, $12, $13, $13, $12, $11, $0f
177f0     0D 09 06 02 
177f4     FE FB F8 F4 
177f8     F1 EF EE ED 
177fc     ED EE EF F1 | 	byte	$0d, $09, $06, $02, $fe, $fb, $f8, $f4, $f1, $ef, $ee, $ed, $ed, $ee, $ef, $f1
17800     F4 F7 FB FE 
17804     02 05 09 0C 
17808     0E 10 12 13 
1780c     13 12 10 0F | 	byte	$f4, $f7, $fb, $fe, $02, $05, $09, $0c, $0e, $10, $12, $13, $13, $12, $10, $0f
17810     0C 09 05 01 
17814     FE FA F7 F3 
17818     F1 EF EE ED 
1781c     ED EE F0 F2 | 	byte	$0c, $09, $05, $01, $fe, $fa, $f7, $f3, $f1, $ef, $ee, $ed, $ed, $ee, $f0, $f2
17820     F5 F8 FB FF 
17824     03 06 09 0C 
17828     0F 11 12 12 
1782c     12 11 10 0E | 	byte	$f5, $f8, $fb, $ff, $03, $06, $09, $0c, $0f, $11, $12, $12, $12, $11, $10, $0e
17830     0B 08 04 01 
17834     FE FA F7 F4 
17838     F1 F0 EF EE 
1783c     EE EF F0 F3 | 	byte	$0b, $08, $04, $01, $fe, $fa, $f7, $f4, $f1, $f0, $ef, $ee, $ee, $ef, $f0, $f3
17840     F5 F9 FC 00 
17844     04 07 0A 0C 
17848     0F 11 12 12 
1784c     12 11 0F 0D | 	byte	$f5, $f9, $fc, $00, $04, $07, $0a, $0c, $0f, $11, $12, $12, $12, $11, $0f, $0d
17850     0B 07 04 00 
17854     FD F9 F6 F3 
17858     F1 EF EE EE 
1785c     EE EF F1 F3 | 	byte	$0b, $07, $04, $00, $fd, $f9, $f6, $f3, $f1, $ef, $ee, $ee, $ee, $ef, $f1, $f3
17860     F6 F9 FC 00 
17864     04 07 0A 0D 
17868     0F 10 11 11 
1786c     11 10 0E 0C | 	byte	$f6, $f9, $fc, $00, $04, $07, $0a, $0d, $0f, $10, $11, $11, $11, $10, $0e, $0c
17870     09 06 03 FF 
17874     FC F8 F5 F3 
17878     F0 EF EE EE 
1787c     EF EF F1 F4 | 	byte	$09, $06, $03, $ff, $fc, $f8, $f5, $f3, $f0, $ef, $ee, $ee, $ef, $ef, $f1, $f4
17880     F6 FA FD 01 
17884     04 07 0A 0D 
17888     0F 11 11 11 
1788c     11 10 0E 0C | 	byte	$f6, $fa, $fd, $01, $04, $07, $0a, $0d, $0f, $11, $11, $11, $11, $10, $0e, $0c
17890     09 05 02 FF 
17894     FB F8 F5 F2 
17898     F1 EF EE EE 
1789c     EF F0 F2 F4 | 	byte	$09, $05, $02, $ff, $fb, $f8, $f5, $f2, $f1, $ef, $ee, $ee, $ef, $f0, $f2, $f4
178a0     F7 FB FE 01 
178a4     05 08 0B 0E 
178a8     0F 10 11 11 
178ac     11 0F 0D 0B | 	byte	$f7, $fb, $fe, $01, $05, $08, $0b, $0e, $0f, $10, $11, $11, $11, $0f, $0d, $0b
178b0     08 05 01 FE 
178b4     FB F7 F5 F2 
178b8     F0 EF EF EF 
178bc     F0 F1 F3 F5 | 	byte	$08, $05, $01, $fe, $fb, $f7, $f5, $f2, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
178c0     F8 FB FF 02 
178c4     06 09 0B 0D 
178c8     0F 10 11 11 
178cc     10 0E 0C 0A | 	byte	$f8, $fb, $ff, $02, $06, $09, $0b, $0d, $0f, $10, $11, $11, $10, $0e, $0c, $0a
178d0     07 04 01 FD 
178d4     FA F7 F4 F2 
178d8     F1 EF EF EF 
178dc     F0 F2 F4 F6 | 	byte	$07, $04, $01, $fd, $fa, $f7, $f4, $f2, $f1, $ef, $ef, $ef, $f0, $f2, $f4, $f6
178e0     F9 FC FF 03 
178e4     06 09 0B 0D 
178e8     0F 10 11 10 
178ec     0F 0E 0C 09 | 	byte	$f9, $fc, $ff, $03, $06, $09, $0b, $0d, $0f, $10, $11, $10, $0f, $0e, $0c, $09
178f0     07 03 00 FC 
178f4     F9 F6 F4 F2 
178f8     F0 F0 EF F0 
178fc     F1 F2 F5 F7 | 	byte	$07, $03, $00, $fc, $f9, $f6, $f4, $f2, $f0, $f0, $ef, $f0, $f1, $f2, $f5, $f7
17900     FA FD 00 03 
17904     07 09 0C 0E 
17908     0F 10 10 10 
1790c     0F 0D 0B 09 | 	byte	$fa, $fd, $00, $03, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0f, $0d, $0b, $09
17910     06 03 FF FC 
17914     F9 F6 F4 F2 
17918     F1 F0 F0 F0 
1791c     F1 F3 F5 F8 | 	byte	$06, $03, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f0, $f1, $f3, $f5, $f8
17920     FB FE 01 04 
17924     07 09 0C 0E 
17928     0F 10 10 10 
1792c     0E 0D 0A 08 | 	byte	$fb, $fe, $01, $04, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0e, $0d, $0a, $08
17930     05 02 FF FC 
17934     F9 F6 F4 F2 
17938     F1 F0 F0 F1 
1793c     F2 F3 F5 F9 | 	byte	$05, $02, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f1, $f2, $f3, $f5, $f9
17940     FB FF 02 05 
17944     08 0A 0C 0E 
17948     0F 10 0F 0E 
1794c     0D 0C 09 06 | 	byte	$fb, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $10, $0f, $0e, $0d, $0c, $09, $06
17950     04 00 FE FB 
17954     F8 F6 F3 F1 
17958     F1 F0 F1 F1 
1795c     F2 F4 F6 F9 | 	byte	$04, $00, $fe, $fb, $f8, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f6, $f9
17960     FC FF 02 05 
17964     08 0A 0C 0E 
17968     0F 0F 10 0E 
1796c     0D 0B 09 06 | 	byte	$fc, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $0f, $10, $0e, $0d, $0b, $09, $06
17970     03 01 FD FA 
17974     F8 F5 F4 F2 
17978     F1 F1 F1 F2 
1797c     F3 F5 F7 FA | 	byte	$03, $01, $fd, $fa, $f8, $f5, $f4, $f2, $f1, $f1, $f1, $f2, $f3, $f5, $f7, $fa
17980     FD 00 03 05 
17984     08 0B 0C 0D 
17988     0F 0F 0E 0E 
1798c     0C 0A 08 05 | 	byte	$fd, $00, $03, $05, $08, $0b, $0c, $0d, $0f, $0f, $0e, $0e, $0c, $0a, $08, $05
17990     03 00 FD FA 
17994     F7 F5 F4 F2 
17998     F2 F1 F2 F3 
1799c     F4 F6 F8 FB | 	byte	$03, $00, $fd, $fa, $f7, $f5, $f4, $f2, $f2, $f1, $f2, $f3, $f4, $f6, $f8, $fb
179a0     FE 01 03 06 
179a4     09 0B 0C 0D 
179a8     0E 0E 0E 0D 
179ac     0B 09 07 04 | 	byte	$fe, $01, $03, $06, $09, $0b, $0c, $0d, $0e, $0e, $0e, $0d, $0b, $09, $07, $04
179b0     02 FF FC F9 
179b4     F7 F5 F3 F2 
179b8     F2 F2 F2 F3 
179bc     F5 F7 F9 FC | 	byte	$02, $ff, $fc, $f9, $f7, $f5, $f3, $f2, $f2, $f2, $f2, $f3, $f5, $f7, $f9, $fc
179c0     FE 01 04 07 
179c4     09 0B 0D 0D 
179c8     0E 0D 0D 0C 
179cc     0B 09 06 04 | 	byte	$fe, $01, $04, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0c, $0b, $09, $06, $04
179d0     01 FF FB F9 
179d4     F6 F5 F3 F2 
179d8     F2 F2 F3 F4 
179dc     F6 F7 FA FC | 	byte	$01, $ff, $fb, $f9, $f6, $f5, $f3, $f2, $f2, $f2, $f3, $f4, $f6, $f7, $fa, $fc
179e0     FF 02 05 07 
179e4     09 0B 0D 0D 
179e8     0E 0D 0D 0B 
179ec     0A 08 06 03 | 	byte	$ff, $02, $05, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0b, $0a, $08, $06, $03
179f0     01 FE FB F9 
179f4     F7 F5 F4 F3 
179f8     F3 F3 F4 F5 
179fc     F6 F9 FB FE | 	byte	$01, $fe, $fb, $f9, $f7, $f5, $f4, $f3, $f3, $f3, $f4, $f5, $f6, $f9, $fb, $fe
17a00     00 03 05 08 
17a04     0A 0B 0C 0D 
17a08     0E 0D 0C 0B 
17a0c     09 07 05 02 | 	byte	$00, $03, $05, $08, $0a, $0b, $0c, $0d, $0e, $0d, $0c, $0b, $09, $07, $05, $02
17a10     00 FD FA F8 
17a14     F6 F5 F4 F3 
17a18     F3 F3 F4 F6 
17a1c     F7 F9 FC FE | 	byte	$00, $fd, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f3, $f4, $f6, $f7, $f9, $fc, $fe
17a20     01 03 06 08 
17a24     0A 0B 0C 0D 
17a28     0D 0C 0B 09 
17a2c     08 06 04 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $09, $08, $06, $04, $01
17a30     FF FC FA F8 
17a34     F6 F5 F4 F3 
17a38     F3 F4 F5 F6 
17a3c     F8 FA FC FF | 	byte	$ff, $fc, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f4, $f5, $f6, $f8, $fa, $fc, $ff
17a40     01 03 06 08 
17a44     0A 0B 0B 0C 
17a48     0C 0C 0B 09 
17a4c     07 05 03 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0b, $0c, $0c, $0c, $0b, $09, $07, $05, $03, $01
17a50     FE FC F9 F8 
17a54     F6 F5 F4 F3 
17a58     F4 F4 F5 F7 
17a5c     F8 FA FD FF | 	byte	$fe, $fc, $f9, $f8, $f6, $f5, $f4, $f3, $f4, $f4, $f5, $f7, $f8, $fa, $fd, $ff
17a60     02 04 06 08 
17a64     09 0B 0C 0C 
17a68     0C 0B 0A 08 
17a6c     06 04 02 00 | 	byte	$02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0b, $0a, $08, $06, $04, $02, $00
17a70     FE FB FA F7 
17a74     F6 F5 F4 F4 
17a78     F4 F5 F6 F8 
17a7c     FA FC FE 00 | 	byte	$fe, $fb, $fa, $f7, $f6, $f5, $f4, $f4, $f4, $f5, $f6, $f8, $fa, $fc, $fe, $00
17a80     03 05 07 08 
17a84     0A 0B 0B 0B 
17a88     0B 0A 09 08 
17a8c     05 03 01 FF | 	byte	$03, $05, $07, $08, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $05, $03, $01, $ff
17a90     FD FB F9 F7 
17a94     F6 F5 F4 F5 
17a98     F5 F6 F7 F8 
17a9c     FB FC FF 01 | 	byte	$fd, $fb, $f9, $f7, $f6, $f5, $f4, $f5, $f5, $f6, $f7, $f8, $fb, $fc, $ff, $01
17aa0     03 05 07 09 
17aa4     0A 0A 0B 0B 
17aa8     0A 0A 08 07 
17aac     05 03 01 FE | 	byte	$03, $05, $07, $09, $0a, $0a, $0b, $0b, $0a, $0a, $08, $07, $05, $03, $01, $fe
17ab0     FC FA F8 F7 
17ab4     F6 F5 F5 F5 
17ab8     F6 F6 F8 F9 
17abc     FB FD FF 01 | 	byte	$fc, $fa, $f8, $f7, $f6, $f5, $f5, $f5, $f6, $f6, $f8, $f9, $fb, $fd, $ff, $01
17ac0     03 05 07 08 
17ac4     09 0A 0B 0B 
17ac8     0A 09 08 06 
17acc     04 02 00 FE | 	byte	$03, $05, $07, $08, $09, $0a, $0b, $0b, $0a, $09, $08, $06, $04, $02, $00, $fe
17ad0     FC FB F9 F7 
17ad4     F6 F6 F6 F6 
17ad8     F7 F7 F9 FA 
17adc     FD FE 00 03 | 	byte	$fc, $fb, $f9, $f7, $f6, $f6, $f6, $f6, $f7, $f7, $f9, $fa, $fd, $fe, $00, $03
17ae0     04 06 08 09 
17ae4     0A 0A 0A 0A 
17ae8     09 08 07 05 
17aec     04 01 00 FD | 	byte	$04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $08, $07, $05, $04, $01, $00, $fd
17af0     FC FA F8 F7 
17af4     F6 F6 F6 F6 
17af8     F7 F8 F9 FB 
17afc     FD FE 01 03 | 	byte	$fc, $fa, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $fe, $01, $03
17b00     05 06 08 09 
17b04     09 0A 09 09 
17b08     08 07 06 04 
17b0c     03 01 FF FD | 	byte	$05, $06, $08, $09, $09, $0a, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd
17b10     FB F9 F8 F7 
17b14     F6 F6 F6 F6 
17b18     F7 F8 F9 FB 
17b1c     FD FF 01 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $ff, $01, $03
17b20     05 06 07 09 
17b24     09 0A 0A 09 
17b28     08 07 05 04 
17b2c     02 00 FF FD | 	byte	$05, $06, $07, $09, $09, $0a, $0a, $09, $08, $07, $05, $04, $02, $00, $ff, $fd
17b30     FB F9 F8 F7 
17b34     F6 F6 F6 F7 
17b38     F8 F9 FA FC 
17b3c     FE 00 02 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f7, $f8, $f9, $fa, $fc, $fe, $00, $02, $03
17b40     05 07 08 08 
17b44     09 09 09 09 
17b48     08 06 05 03 
17b4c     02 00 FE FC | 	byte	$05, $07, $08, $08, $09, $09, $09, $09, $08, $06, $05, $03, $02, $00, $fe, $fc
17b50     FA F9 F8 F7 
17b54     F7 F7 F7 F7 
17b58     F8 F9 FB FD 
17b5c     FF 00 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f7, $f8, $f9, $fb, $fd, $ff, $00, $02, $04
17b60     06 07 08 08 
17b64     09 09 09 08 
17b68     07 06 04 03 
17b6c     01 FF FD FC | 	byte	$06, $07, $08, $08, $09, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd, $fc
17b70     FA F9 F8 F7 
17b74     F7 F7 F7 F8 
17b78     F9 FA FC FD 
17b7c     FF 01 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04
17b80     06 07 08 09 
17b84     09 09 08 08 
17b88     07 05 04 02 
17b8c     01 FF FD FB | 	byte	$06, $07, $08, $09, $09, $09, $08, $08, $07, $05, $04, $02, $01, $ff, $fd, $fb
17b90     FA F9 F8 F7 
17b94     F7 F7 F8 F8 
17b98     F9 FA FC FE 
17b9c     FF 01 03 05 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $03, $05
17ba0     06 07 08 09 
17ba4     09 09 08 07 
17ba8     06 05 04 02 
17bac     00 FF FD FC | 	byte	$06, $07, $08, $09, $09, $09, $08, $07, $06, $05, $04, $02, $00, $ff, $fd, $fc
17bb0     FA F9 F8 F8 
17bb4     F8 F8 F8 F9 
17bb8     FA FB FD FE 
17bbc     00 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fd, $fe, $00, $02, $04, $05
17bc0     06 07 08 08 
17bc4     08 09 08 07 
17bc8     06 05 03 01 
17bcc     00 FE FD FB | 	byte	$06, $07, $08, $08, $08, $09, $08, $07, $06, $05, $03, $01, $00, $fe, $fd, $fb
17bd0     FA F9 F8 F8 
17bd4     F8 F8 F8 F9 
17bd8     FA FC FD FF 
17bdc     01 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04, $05
17be0     06 07 08 08 
17be4     08 08 07 06 
17be8     05 04 02 00 
17bec     FF FE FC FA | 	byte	$06, $07, $08, $08, $08, $08, $07, $06, $05, $04, $02, $00, $ff, $fe, $fc, $fa
17bf0     F9 F8 F8 F7 
17bf4     F8 F8 F8 F9 
17bf8     FA FC FE FF 
17bfc     01 02 04 05 | 	byte	$f9, $f8, $f8, $f7, $f8, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $02, $04, $05
17c00     07 07 08 08 
17c04     08 08 07 06 
17c08     05 03 02 01 
17c0c     FF FD FC FA | 	byte	$07, $07, $08, $08, $08, $08, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fa
17c10     F9 F8 F8 F8 
17c14     F8 F8 F9 FA 
17c18     FB FC FE 00 
17c1c     01 03 04 05 | 	byte	$f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $00, $01, $03, $04, $05
17c20     07 07 08 08 
17c24     08 07 07 06 
17c28     05 03 02 00 
17c2c     FE FD FB FA | 	byte	$07, $07, $08, $08, $08, $07, $07, $06, $05, $03, $02, $00, $fe, $fd, $fb, $fa
17c30     F9 F8 F8 F8 
17c34     F8 F9 F9 FA 
17c38     FC FD FF 00 
17c3c     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $f9, $fa, $fc, $fd, $ff, $00, $02, $04, $05, $06
17c40     07 07 08 08 
17c44     08 07 06 05 
17c48     04 02 01 FF 
17c4c     FE FC FB FA | 	byte	$07, $07, $08, $08, $08, $07, $06, $05, $04, $02, $01, $ff, $fe, $fc, $fb, $fa
17c50     F9 F8 F8 F8 
17c54     F8 F9 FA FB 
17c58     FC FE FF 01 
17c5c     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17c60     07 07 07 08 
17c64     07 07 06 05 
17c68     03 02 01 FF 
17c6c     FD FC FB F9 | 	byte	$07, $07, $07, $08, $07, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $f9
17c70     F9 F8 F7 F8 
17c74     F8 F9 FA FB 
17c78     FC FE FF 01 
17c7c     02 04 05 06 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17c80     07 07 08 08 
17c84     07 07 06 04 
17c88     03 02 00 FF 
17c8c     FD FC FB FA | 	byte	$07, $07, $08, $08, $07, $07, $06, $04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa
17c90     F9 F9 F8 F9 
17c94     F9 FA FA FC 
17c98     FD FE 00 01 
17c9c     03 04 05 06 | 	byte	$f9, $f9, $f8, $f9, $f9, $fa, $fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06
17ca0     07 07 08 07 
17ca4     07 06 05 04 
17ca8     03 02 00 FE 
17cac     FD FC FB FA | 	byte	$07, $07, $08, $07, $07, $06, $05, $04, $03, $02, $00, $fe, $fd, $fc, $fb, $fa
17cb0     F9 F8 F9 F9 
17cb4     F9 FA FB FC 
17cb8     FD FF 01 02 
17cbc     03 05 06 06 | 	byte	$f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fd, $ff, $01, $02, $03, $05, $06, $06
17cc0     07 07 07 07 
17cc4     07          | 	byte	$07[5]
17cc5     06 05 03 02 
17cc9     01 FF FE FC 
17ccd     FB FA F9 F9 
17cd1     F8 F8 F8 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fe, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f9
17cd5     FA FB FC FD 
17cd9     FF 00 02 03 
17cdd     04 05 07 07 
17ce1     07 07 07 07 | 	byte	$fa, $fb, $fc, $fd, $ff, $00, $02, $03, $04, $05, $07, $07, $07, $07, $07, $07
17ce5     06 05 03 02 
17ce9     01 FF FD FC 
17ced     FB FA F9 F9 
17cf1     F8 F8 F9 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f9, $f9
17cf5     FA FB FD FE 
17cf9     FF 01 02 04 
17cfd     05 06 07 07 
17d01     07 07 07 07 | 	byte	$fa, $fb, $fd, $fe, $ff, $01, $02, $04, $05, $06, $07, $07, $07, $07, $07, $07
17d05     06 04 03 02 
17d09     01 FF FD FC 
17d0d     FB FA F9 F9 
17d11     F9 F9 F9 F9 | 	byte	$06, $04, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $f9
17d15     FA FC FD FE 
17d19     00 01 03 04 
17d1d     05 06 07 07 
17d21     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17d25     05 04 03 01 
17d29     00 FF FD FC 
17d2d     FB F9 F9 F9 
17d31     F8 F8 F9 FA | 	byte	$05, $04, $03, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f9, $f8, $f8, $f9, $fa
17d35     FA FC FD FE 
17d39     00 01 03 04 
17d3d     05 06 07 07 
17d41     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17d45     05 04 02 01 
17d49     00 FF FD FC 
17d4d     FB F9 F9 F8 
17d51     F8 F9 F9 FA | 	byte	$05, $04, $02, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f8, $f8, $f9, $f9, $fa
17d55     FB FC FD FE 
17d59     00 02 03 04 
17d5d     05 06 07 07 
17d61     07 07 06 06 | 	byte	$fb, $fc, $fd, $fe, $00, $02, $03, $04, $05, $06, $07, $07, $07, $07, $06, $06
17d65     05 04 03 01 
17d69     00 FE FD FC 
17d6d     FB FA F9 F9 
17d71     F9 F9 FA FB | 	byte	$05, $04, $03, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb
17d75     FC FD FE FF 
17d79     01 02 03 04 
17d7d     06 06 07 07 
17d81     07 07 06 05 | 	byte	$fc, $fd, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17d85     05 04 02 01 
17d89     00 FE FD FB 
17d8d     FB FA F9 F9 
17d91     F9 F9 FA FA | 	byte	$05, $04, $02, $01, $00, $fe, $fd, $fb, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17d95     FC FC FE FF 
17d99     01 02 03 05 
17d9d     06 06 07 07 
17da1     07 06 06 05 | 	byte	$fc, $fc, $fe, $ff, $01, $02, $03, $05, $06, $06, $07, $07, $07, $06, $06, $05
17da5     04 03 01 00 
17da9     FF FD FC FB 
17dad     FA FA F9 F9 
17db1     F9 F9 FA FA | 	byte	$04, $03, $01, $00, $ff, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17db5     FB FC FE FF 
17db9     01 02 03 04 
17dbd     06 06 07 07 
17dc1     07 07 06 05 | 	byte	$fb, $fc, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17dc5     04 03 02 00 
17dc9     FF FD FC FB 
17dcd     FA F9 F9 F9 
17dd1     F9 F9 FA FB | 	byte	$04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $fa, $fb
17dd5     FC FD FE 00 
17dd9     01 02 03 04 
17ddd     05 06 07 07 
17de1     07 06 06 05 | 	byte	$fc, $fd, $fe, $00, $01, $02, $03, $04, $05, $06, $07, $07, $07, $06, $06, $05
17de5     04 03 02 00 
17de9     FF FE FC FB 
17ded     FA FA F9 F9 
17df1     F9 F9 FB FC | 	byte	$04, $03, $02, $00, $ff, $fe, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fb, $fc
17df5     FC FD FF 00 
17df9     02 03 04 05 
17dfd     06 06 07 07 
17e01     07 06 06 05 | 	byte	$fc, $fd, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $07, $06, $06, $05
17e05     04 02 01 00 
17e09     FF FD FC FB 
17e0d     FA F9 F9 F9 
17e11     F9 FA FB FB | 	byte	$04, $02, $01, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb, $fb
17e15     FC FE FF 01 
17e19     01 03 04 05 
17e1d     06 06 06 06 
17e21     07 06 05 04 | 	byte	$fc, $fe, $ff, $01, $01, $03, $04, $05, $06, $06, $06, $06, $07, $06, $05, $04
17e25     03 02 01 00 
17e29     FE FD FC FB 
17e2d     FA F9 F9 F9 
17e31     F9 FA FA FB | 	byte	$03, $02, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa, $fb
17e35     FC FE FF 00 
17e39     02 03 04 05 
17e3d     06 06 07 07 
17e41     06 06 05 04 | 	byte	$fc, $fe, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17e45     03 02 01 FF 
17e49     FF FD FC FB 
17e4d     FA F9 F9 FA 
17e51     FA FA FB FC | 	byte	$03, $02, $01, $ff, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $fa, $fa, $fa, $fb, $fc
17e55     FD FE 00 01 
17e59     02 03 04 05 
17e5d     06 06 07 07 
17e61     06 06 05 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17e65     03 02 00 FF 
17e69     FE FD FC FB 
17e6d     FA FA FA FA 
17e71     FA FB FB FC | 	byte	$03, $02, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fc
17e75     FD FE 00 01 
17e79     02 03 04 05 
17e7d     06 06 06 06 
17e81     06 05 04 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $04
17e85     02 01 00 FE 
17e89     FD FC FB FA 
17e8d     FA F9 F9 F9 
17e91     FA FA FB FC | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $fa, $fa, $fb, $fc
17e95     FD FE 00 01 
17e99     02 03 04 05 
17e9d     06 06 06 06 
17ea1     06 05 04 03 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $03
17ea5     02 01 00 FE 
17ea9     FD FC FB FB 
17ead     FA FA FA FA 
17eb1     FA FB FB FD | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fd
17eb5     FE FF 00 01 
17eb9     03 03 04 05 
17ebd     06 06 06 06 
17ec1     05 05 04 03 | 	byte	$fe, $ff, $00, $01, $03, $03, $04, $05, $06, $06, $06, $06, $05, $05, $04, $03
17ec5     02 01 FF FE 
17ec9     FD FC FB FB 
17ecd     FA FA FA FA 
17ed1     FA FB FC FD | 	byte	$02, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fc, $fd
17ed5     FE FF 01 02 
17ed9     03 04 05 05 
17edd     05 06 06 05 
17ee1     05 04 04 03 | 	byte	$fe, $ff, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $04, $03
17ee5     01 01 FF FE 
17ee9     FD FC FB FB 
17eed     FA FA FA FB 
17ef1     FB FC FC FD | 	byte	$01, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fc, $fd
17ef5     FF 00 01 02 
17ef9     03 04 05 05 
17efd     05 06 05 05 
17f01     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $05, $05, $06, $05, $05, $05, $04, $03, $02
17f05     01 00 FF FE 
17f09     FD FC FB FA 
17f0d     FA FA FA FB 
17f11     FB FB FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fb, $fb, $fd, $fe
17f15     FE 00 01 02 
17f19     03 04 05 05 
17f1d     05 06 06 05 
17f21     05 04 03 02 | 	byte	$fe, $00, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $03, $02
17f25     01 00 FF FE 
17f29     FD FC FB FB 
17f2d     FB FA FA FB 
17f31     FB FC FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fa, $fa, $fb, $fb, $fc, $fd, $fe
17f35     FF 00 01 02 
17f39     03 04 05 06 
17f3d     05 06 05 05 
17f41     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $06, $05, $06, $05, $05, $05, $04, $03, $02
17f45     01 00 FF FE 
17f49     FD FC FB FB 
17f4d     FB FB FB FB 
17f51     FC FD FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe
17f55     FF 01 02 03 
17f59     03 04 05 05 
17f5d     05 05 05 05 
17f61     04 03 02 01 | 	byte	$ff, $01, $02, $03, $03, $04, $05, $05, $05, $05, $05, $05, $04, $03, $02, $01
17f65     00 FF FE FD 
17f69     FC FC FB FB 
17f6d     FA FA FB FB 
17f71     FB FC FD FE | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fd, $fe
17f75     FF 00 01 02 
17f79     03 04 04 05 
17f7d     05 05 05 04 
17f81     03 03 02 01 | 	byte	$ff, $00, $01, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03, $03, $02, $01
17f85     00 FF FE FD 
17f89     FC FB FB FB 
17f8d     FB FB FB FB 
17f91     FC FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fe, $ff
17f95     00 01 02 03 
17f99     03 04 04 05 
17f9d     05 05 04 04 
17fa1     04 03 02 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $05, $04, $04, $04, $03, $02, $01
17fa5     00 FF FE FD 
17fa9     FC FB FB FB 
17fad     FB FB FB FC 
17fb1     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff
17fb5     00 01 02 02 
17fb9     03 04 04 05 
17fbd     05 05 04 04 
17fc1     03 02 02 01 | 	byte	$00, $01, $02, $02, $03, $04, $04, $05, $05, $05, $04, $04, $03, $02, $02, $01
17fc5     00 FF FE FD 
17fc9     FC FC FB FB 
17fcd     FB FB FC FC 
17fd1     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
17fd5     00 01 02 03 
17fd9     03 04 04 05 
17fdd     05 04 04 03 
17fe1     03 02 01 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $04, $04, $03, $03, $02, $01, $01
17fe5     00 FF FE FD 
17fe9     FD FC FB FC 
17fed     FB FB FC FC 
17ff1     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fb, $fc, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $00
17ff5     01 02 02 03 
17ff9     04 04 04 04 
17ffd     04 04 04 04 
18001     03 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $04, $03, $02, $01, $00
18005     00 FF FE FD 
18009     FD FC FC FC 
1800d     FC FC FD FD 
18011     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
18015     01 02 02 03 
18019     04 04 04 04 
1801d     04 04 04 03 
18021     02 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00
18025     FF FF FE FD 
18029     FC FC FC FC 
1802d     FC FD FD FD 
18031     FE FF FF 00 | 	byte	$ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00
18035     01 02 02 03 
18039     04 04 04 04 
1803d     04 04 03 02 
18041     02 01 00 FF | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00, $ff
18045     FE FE FD FC 
18049     FC FC FC FC 
1804d     FC FC FD FD 
18051     FE FF FF 00 | 	byte	$fe, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00
18055     01 01 02 03 
18059     03 03 04 04 
1805d     03 03 03 02 
18061     02 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $04, $04, $03, $03, $03, $02, $02, $01, $00, $00
18065     FF FE FD FD 
18069     FC FC FC FC 
1806d     FC FC FD FE 
18071     FE FF FF 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $ff, $01
18075     01 01 02 03 
18079     03 04 03 04 
1807d     03 03 03 02 
18081     01 00 00 FF | 	byte	$01, $01, $02, $03, $03, $04, $03, $04, $03, $03, $03, $02, $01, $00, $00, $ff
18085     FE FE FD FD 
18089     FD FD FC FC 
1808d     FD FD FD FE 
18091     FE FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
18095     01 02 02 03 
18099     03 03 03 03 
1809d     03 03 02 01 
180a1     01 01 00 FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $00, $ff
180a5     FE FE FD FD 
180a9     FD FC FC FD 
180ad     FD FD FD FE 
180b1     FF FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $01
180b5     01 02 02 03 
180b9     03 03 03 03 
180bd     03 02 02 01 
180c1     01 00 FF FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $ff, $ff
180c5     FE FD FD FD 
180c9     FD FC FC FC 
180cd     FD FD FE FE 
180d1     FF 00 00 01 | 	byte	$fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe, $ff, $00, $00, $01
180d5     01 02 02 02 
180d9     03 03 03 03 
180dd     03 03 02 01 
180e1     01 00 FF FF | 	byte	$01, $02, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $00, $ff, $ff
180e5     FE FE FD FD 
180e9     FD FD FD FD 
180ed     FD FE FE FF 
180f1     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00, $01, $01
180f5     02 02 03 03 
180f9     03 03 03 03 
180fd     03 02 02 01 
18101     01 00 00 FF | 	byte	$02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $00, $ff
18105     FE FE FD FD 
18109     FD FD FD FE 
1810d     FE FE FE FF 
18111     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01
18115     02 02 02 03 
18119     03 03 03 02 
1811d     02 02 01 01 
18121     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff
18125     FE FE FD FD 
18129     FD FD FD FD 
1812d     FD FE FE FF 
18131     FF 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $01, $01
18135     02 02 02 03 
18139     03 03 02 02 
1813d     02 02 01 00 
18141     00 00 FF FE | 	byte	$02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $00, $00, $00, $ff, $fe
18145     FE FE FD FD 
18149     FD FD FD FD 
1814d     FD FE FF FF 
18151     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $01
18155     02 02 02 02 
18159     03 02 02 02 
1815d     02 02 01 01 
18161     00 FF FF FE | 	byte	$02, $02, $02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $ff, $fe
18165     FE FE FD FD 
18169     FD FD FD FE 
1816d     FE FF FF 00 
18171     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
18175     02 02 03 03 
18179     03 03 03 02 
1817d     02 01 01 01 
18181     00 FF FF FE | 	byte	$02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $00, $ff, $ff, $fe
18185     FE FD FD FD 
18189     FD FD FE FE 
1818d     FE FF FF 00 
18191     00 01 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
18195     02 02 02 02 
18199     03 03 02 02 
1819d     02 01 01 00 
181a1     FF FF FF FE | 	byte	$02, $02, $02, $02, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff, $fe
181a5     FE FD FD FE 
181a9     FD FD FD FE 
181ad     FE FF FF FF 
181b1     00 01 01 02 | 	byte	$fe, $fd, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $00, $01, $01, $02
181b5     02 02 02 03 
181b9     03 02 02 02 
181bd     02 02 01 00 
181c1     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $ff, $ff
181c5     FE FE FE FE 
181c9     FE FE FE FE | 	byte	$fe[8]
181cd     FF FF 00 00 
181d1     01 01 02 02 
181d5     03 03 03 03 
181d9     03 03 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02
181dd     01 01 01 00 
181e1     00 FF FF FE 
181e5     FE FE FE FE 
181e9     FE FE FE FE | 	byte	$01, $01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe
181ed     FF FF 00 00 
181f1     01 01 02 02 
181f5     02 02 03 02 
181f9     02 02 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $02, $02, $03, $02, $02, $02, $02, $02
181fd     01 01 00 00 
18201     FF FF FE FE 
18205     FE FE FD FD 
18209     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe
1820d     FF FF 00 00 
18211     00 01 01 02 
18215     02 02 02 02 
18219     03 02 02 02 | 	byte	$ff, $ff, $00, $00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02
1821d     01 01 00 00 
18221     FF FF FE FE 
18225     FD FD FD FD 
18229     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1822d     FE FF 00 00 
18231     01 01 01 02 
18235     02 02 02 02 
18239     02 02 02 01 | 	byte	$fe, $ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01
1823d     01 01 00 FF 
18241     FF FF FE FE 
18245     FD FD FD FD 
18249     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1824d     FF 00 00 01 
18251     01 01 02 02 
18255     02 02 02 02 
18259     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01
1825d     01 00 00 FF 
18261     FE FE FE FE 
18265     FE FD FD FE 
18269     FE FE FE FE | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe
1826d     FF 00 00 01 
18271     01 01 02 02 
18275     02 02 02 02 
18279     02 02 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
1827d     01 00 00 FF 
18281     FF FE FE FE 
18285     FE FD FD FD 
18289     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1828d     FF 00 00 01 
18291     01 01 01 02 
18295     02 02 03 02 
18299     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $01, $02, $02, $02, $03, $02, $02, $02, $02, $01
1829d     00 00 00 FF 
182a1     FF FF FE FE 
182a5     FE FE FE FE 
182a9     FE FE FE FF | 	byte	$00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff
182ad     00 00 01 01 
182b1     02 02 02 02 
182b5     02 03 03 03 
182b9     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $03, $02, $02, $02, $01
182bd     01 00 FF FF 
182c1     FF FE FE FE 
182c5     FE FD FE FE 
182c9     FE FF FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
182cd     00 00 00 01 
182d1     01 01 02 02 
182d5     02 02 02 02 
182d9     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
182dd     01 00 FF FF 
182e1     FE FE FE FD 
182e5     FD FD FD FE 
182e9     FE FE FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff
182ed     FF 00 00 01 
182f1     01 01 02 02 
182f5     02 02 02 02 
182f9     02 01 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
182fd     01 00 FF FF 
18301     FF FE FE FE 
18305     FD FE FD FE 
18309     FE FE FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff
1830d     00 00 01 01 
18311     01 01 02 02 
18315     02 02 02 02 
18319     02 01 01 00 | 	byte	$00, $00, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
1831d     00 00 FF FF 
18321     FE FE FE FD 
18325     FE FD FE FE 
18329     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
1832d     00 00 01 01 
18331     01 02 02 02 
18335     02 02 02 02 
18339     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1833d     00 00 FF FF 
18341     FE FE FE FD 
18345     FD FD FD FE 
18349     FE FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff
1834d     00 00 01 01 
18351     01 02 02 02 
18355     02 02 02 02 
18359     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1835d     00 FF FF FF 
18361     FE FE FE 00 
18365     00 00 00 2E 
18369     2D 2B 29 26 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $00, $00, $00, $2e, $2d, $2b, $29, $26
1836d     25 23 21 1F 
18371     1E 1C 1A 18 
18375     16 14 12 10 
18379     0E 0C 09 07 | 	byte	$25, $23, $21, $1f, $1e, $1c, $1a, $18, $16, $14, $12, $10, $0e, $0c, $09, $07
1837d     06 03 01 FE 
18381     FC FA F7 F5 
18385     F2 F1 EE EC 
18389     E9 E7 E5 E3 | 	byte	$06, $03, $01, $fe, $fc, $fa, $f7, $f5, $f2, $f1, $ee, $ec, $e9, $e7, $e5, $e3
1838d     E0 DF DC DA 
18391     D8 D6 D4 D3 
18395     D1 CF CE CC 
18399     CB C9 C9 C8 | 	byte	$e0, $df, $dc, $da, $d8, $d6, $d4, $d3, $d1, $cf, $ce, $cc, $cb, $c9, $c9, $c8
1839d     C7 C6 C6 C5 
183a1     C5 C5 C5 C5 
183a5     C6 C6 C6 C7 
183a9     C7 C8 C9 C9 | 	byte	$c7, $c6, $c6, $c5, $c5, $c5, $c5, $c5, $c6, $c6, $c6, $c7, $c7, $c8, $c9, $c9
183ad     CA CB CD CE 
183b1     CF D1 D2 D3 
183b5     D4 D5 D7 D9 
183b9     DA DC DE E0 | 	byte	$ca, $cb, $cd, $ce, $cf, $d1, $d2, $d3, $d4, $d5, $d7, $d9, $da, $dc, $de, $e0
183bd     E1 E3 E4 E7 
183c1     E9 EC EE F1 
183c5     F4 F7 FC 00 
183c9     06 0F 19 24 | 	byte	$e1, $e3, $e4, $e7, $e9, $ec, $ee, $f1, $f4, $f7, $fc, $00, $06, $0f, $19, $24
183cd     30 3F 50 5F 
183d1     6C 6B 52 1B 
183d5     E0 D5 F1 0D 
183d9     23 31 3B 41 | 	byte	$30, $3f, $50, $5f, $6c, $6b, $52, $1b, $e0, $d5, $f1, $0d, $23, $31, $3b, $41
183dd     46 47 49 4A 
183e1     4A 49 48 46 
183e5     44 42 40 3E 
183e9     3C 3A 38 35 | 	byte	$46, $47, $49, $4a, $4a, $49, $48, $46, $44, $42, $40, $3e, $3c, $3a, $38, $35
183ed     33 31 2F 2C 
183f1     2A 27 25 23 
183f5     21 1F 1D 1A 
183f9     18 15 13 10 | 	byte	$33, $31, $2f, $2c, $2a, $27, $25, $23, $21, $1f, $1d, $1a, $18, $15, $13, $10
183fd     0E 0C 09 07 
18401     05 02 00 FD 
18405     FB F8 F5 F3 
18409     F1 EF EC EA | 	byte	$0e, $0c, $09, $07, $05, $02, $00, $fd, $fb, $f8, $f5, $f3, $f1, $ef, $ec, $ea
1840d     E8 E6 E4 E2 
18411     E0 DE DC DB 
18415     D9 D7 D6 D4 
18419     D3 D3 D2 D1 | 	byte	$e8, $e6, $e4, $e2, $e0, $de, $dc, $db, $d9, $d7, $d6, $d4, $d3, $d3, $d2, $d1
1841d     D0 D0 CF CE 
18421     CE CD CD CD 
18425     CD CE CE CF 
18429     CF CF D0 D1 | 	byte	$d0, $d0, $cf, $ce, $ce, $cd, $cd, $cd, $cd, $ce, $ce, $cf, $cf, $cf, $d0, $d1
1842d     D1 D3 D3 D4 
18431     D5 D6 D8 D9 
18435     DA DB DD DE 
18439     E0 E1 E3 E5 | 	byte	$d1, $d3, $d3, $d4, $d5, $d6, $d8, $d9, $da, $db, $dd, $de, $e0, $e1, $e3, $e5
1843d     E7 EA EC EF 
18441     F2 F4 F7 FB 
18445     00 05 0A 11 
18449     18 22 2C 38 | 	byte	$e7, $ea, $ec, $ef, $f2, $f4, $f7, $fb, $00, $05, $0a, $11, $18, $22, $2c, $38
1844d     45 53 5D 65 
18451     62 4C 27 F4 
18455     D1 CC D9 EE 
18459     FF 0E 19 23 | 	byte	$45, $53, $5d, $65, $62, $4c, $27, $f4, $d1, $cc, $d9, $ee, $ff, $0e, $19, $23
1845d     2B 31 36 39 
18461     3B 3D 3D 3C 
18465     3C 3B 3A 39 
18469     38 36 35 33 | 	byte	$2b, $31, $36, $39, $3b, $3d, $3d, $3c, $3c, $3b, $3a, $39, $38, $36, $35, $33
1846d     31 2F 2E 2B 
18471     29 27 25 23 
18475     21 1F 1C 1A 
18479     17 15 13 10 | 	byte	$31, $2f, $2e, $2b, $29, $27, $25, $23, $21, $1f, $1c, $1a, $17, $15, $13, $10
1847d     0F 0C 0A 08 
18481     06 03 02 FF 
18485     FD FA F8 F6 
18489     F4 F2 F0 EE | 	byte	$0f, $0c, $0a, $08, $06, $03, $02, $ff, $fd, $fa, $f8, $f6, $f4, $f2, $f0, $ee
1848d     EB EA E8 E6 
18491     E4 E3 E2 E0 
18495     DE DC DB DA 
18499     D9 D8 D7 D6 | 	byte	$eb, $ea, $e8, $e6, $e4, $e3, $e2, $e0, $de, $dc, $db, $da, $d9, $d8, $d7, $d6
1849d     D6 D5 D5 D4 
184a1     D4 D4 D3 D3 
184a5     D3 D4 D4 D4 
184a9     D4 D5 D6 D6 | 	byte	$d6, $d5, $d5, $d4, $d4, $d4, $d3, $d3, $d3, $d4, $d4, $d4, $d4, $d5, $d6, $d6
184ad     D7 D8 D9 DA 
184b1     DB DC DE DF 
184b5     E1 E2 E4 E7 
184b9     E8 EA EC EE | 	byte	$d7, $d8, $d9, $da, $db, $dc, $de, $df, $e1, $e2, $e4, $e7, $e8, $ea, $ec, $ee
184bd     F0 F2 F5 F8 
184c1     FB FE 03 09 
184c5     0F 15 1B 22 
184c9     2C 35 3F 48 | 	byte	$f0, $f2, $f5, $f8, $fb, $fe, $03, $09, $0f, $15, $1b, $22, $2c, $35, $3f, $48
184cd     51 58 59 54 
184d1     42 28 02 DE 
184d5     C8 C0 C5 D2 
184d9     E1 EE FC 08 | 	byte	$51, $58, $59, $54, $42, $28, $02, $de, $c8, $c0, $c5, $d2, $e1, $ee, $fc, $08
184dd     10 1A 20 25 
184e1     2A 2C 2F 31 
184e5     32 32 32 32 
184e9     31 2F 2F 2D | 	byte	$10, $1a, $20, $25, $2a, $2c, $2f, $31, $32, $32, $32, $32, $31, $2f, $2f, $2d
184ed     2C 2A 29 27 
184f1     26 24 22 20 
184f5     1D 1C 1A 18 
184f9     16 14 12 10 | 	byte	$2c, $2a, $29, $27, $26, $24, $22, $20, $1d, $1c, $1a, $18, $16, $14, $12, $10
184fd     0E 0B 0A 08 
18501     06 04 02 00 
18505     FE FC FB F8 
18509     F6 F4 F2 F1 | 	byte	$0e, $0b, $0a, $08, $06, $04, $02, $00, $fe, $fc, $fb, $f8, $f6, $f4, $f2, $f1
1850d     EF ED EC EA 
18511     E8 E7 E5 E4 
18515     E3 E2 E1 E0 
18519     DF DE DE DD | 	byte	$ef, $ed, $ec, $ea, $e8, $e7, $e5, $e4, $e3, $e2, $e1, $e0, $df, $de, $de, $dd
1851d     DC DB DB DA 
18521     DA DA DA DA 
18525     DA DA DB DA 
18529     DB DC DC DD | 	byte	$dc, $db, $db, $da, $da, $da, $da, $da, $da, $da, $db, $da, $db, $dc, $dc, $dd
1852d     DE DE DF E0 
18531     E1 E3 E4 E5 
18535     E6 E8 EB EC 
18539     EE F0 F2 F5 | 	byte	$de, $de, $df, $e0, $e1, $e3, $e4, $e5, $e6, $e8, $eb, $ec, $ee, $f0, $f2, $f5
1853d     F7 FB FE 03 
18541     07 0B 11 17 
18545     1C 23 29 31 
18549     3A 43 4A 4F | 	byte	$f7, $fb, $fe, $03, $07, $0b, $11, $17, $1c, $23, $29, $31, $3a, $43, $4a, $4f
1854d     52 51 4A 3C 
18551     29 0C EE D6 
18555     C3 BB BC C3 
18559     CD D9 E4 F0 | 	byte	$52, $51, $4a, $3c, $29, $0c, $ee, $d6, $c3, $bb, $bc, $c3, $cd, $d9, $e4, $f0
1855d     F8 00 09 10 
18561     16 1B 1F 21 
18565     24 26 27 28 
18569     28 28 29 28 | 	byte	$f8, $00, $09, $10, $16, $1b, $1f, $21, $24, $26, $27, $28, $28, $28, $29, $28
1856d     28 26 25 24 
18571     23 21 20 1E 
18575     1D 1B 19 18 
18579     16 15 13 11 | 	byte	$28, $26, $25, $24, $23, $21, $20, $1e, $1d, $1b, $19, $18, $16, $15, $13, $11
1857d     0F 0E 0C 0A 
18581     08 06 04 03 
18585     00 FF FD FB 
18589     F9 F8 F6 F5 | 	byte	$0f, $0e, $0c, $0a, $08, $06, $04, $03, $00, $ff, $fd, $fb, $f9, $f8, $f6, $f5
1858d     F3 F1 F0 EE 
18591     ED EC EB EA 
18595     E9 E8 E9 E8 
18599     E7 E6 E5 E4 | 	byte	$f3, $f1, $f0, $ee, $ed, $ec, $eb, $ea, $e9, $e8, $e9, $e8, $e7, $e6, $e5, $e4
1859d     E3 E3 E2 E1 
185a1     E1 E1 E0 E0 
185a5     E0 E0 E0 E0 
185a9     E1 E1 E2 E3 | 	byte	$e3, $e3, $e2, $e1, $e1, $e1, $e0, $e0, $e0, $e0, $e0, $e0, $e1, $e1, $e2, $e3
185ad     E4 E4 E5 E6 
185b1     E7 E8 EA EB 
185b5     ED EE F0 F2 
185b9     F4 F7 F9 FC | 	byte	$e4, $e4, $e5, $e6, $e7, $e8, $ea, $eb, $ed, $ee, $f0, $f2, $f4, $f7, $f9, $fc
185bd     00 03 07 0B 
185c1     10 14 19 1F 
185c5     24 2A 30 36 
185c9     3C 42 47 49 | 	byte	$00, $03, $07, $0b, $10, $14, $19, $1f, $24, $2a, $30, $36, $3c, $42, $47, $49
185cd     48 44 3A 2C 
185d1     19 03 EB D3 
185d5     C4 BA B5 B7 
185d9     BD C4 CD D8 | 	byte	$48, $44, $3a, $2c, $19, $03, $eb, $d3, $c4, $ba, $b5, $b7, $bd, $c4, $cd, $d8
185dd     E1 EA F3 FB 
185e1     03 08 0C 10 
185e5     14 18 1A 1C 
185e9     1E 1F 20 20 | 	byte	$e1, $ea, $f3, $fb, $03, $08, $0c, $10, $14, $18, $1a, $1c, $1e, $1f, $20, $20
185ed     20 21 20 20 
185f1     1F 1F 1E 1D 
185f5     1B 1A 18 18 
185f9     17 15 14 12 | 	byte	$20, $21, $20, $20, $1f, $1f, $1e, $1d, $1b, $1a, $18, $18, $17, $15, $14, $12
185fd     11 0F 0E 0C 
18601     0A 09 07 06 
18605     04 03 01 FF 
18609     FD FC FA F9 | 	byte	$11, $0f, $0e, $0c, $0a, $09, $07, $06, $04, $03, $01, $ff, $fd, $fc, $fa, $f9
1860d     F8 F7 F6 F5 
18611     F3 F2 F1 F0 
18615     EF EE EE EC 
18619     EB EB EA EA | 	byte	$f8, $f7, $f6, $f5, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ec, $eb, $eb, $ea, $ea
1861d     E9 E9 E8 E8 
18621     E8 E8 E8 E7 
18625     E7 E8 E8 E9 
18629     E9 E9 EA EB | 	byte	$e9, $e9, $e8, $e8, $e8, $e8, $e8, $e7, $e7, $e8, $e8, $e9, $e9, $e9, $ea, $eb
1862d     EB EC ED EE 
18631     F0 F1 F2 F4 
18635     F6 F7 F9 FB 
18639     FD 00 02 05 | 	byte	$eb, $ec, $ed, $ee, $f0, $f1, $f2, $f4, $f6, $f7, $f9, $fb, $fd, $00, $02, $05
1863d     08 0C 0F 13 
18641     17 1C 22 27 
18645     2C 31 36 3A 
18649     3E 41 42 41 | 	byte	$08, $0c, $0f, $13, $17, $1c, $22, $27, $2c, $31, $36, $3a, $3e, $41, $42, $41
1864d     3D 37 2C 1D 
18651     0D F9 E6 D3 
18655     C4 B9 B3 B2 
18659     B3 B7 BF C7 | 	byte	$3d, $37, $2c, $1d, $0d, $f9, $e6, $d3, $c4, $b9, $b3, $b2, $b3, $b7, $bf, $c7
1865d     CF D8 E0 E8 
18661     F0 F7 FD 02 
18665     07 0B 0F 11 
18669     13 15 16 18 | 	byte	$cf, $d8, $e0, $e8, $f0, $f7, $fd, $02, $07, $0b, $0f, $11, $13, $15, $16, $18
1866d     19 1A 1A 1A 
18671     1A 1A 19 19 
18675     18 19 19 18 
18679     17 16 15 13 | 	byte	$19, $1a, $1a, $1a, $1a, $1a, $19, $19, $18, $19, $19, $18, $17, $16, $15, $13
1867d     11 10 0E 0D 
18681     0C 0A 08 07 
18685     06 04 03 02 
18689     00 FF FE FD | 	byte	$11, $10, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $03, $02, $00, $ff, $fe, $fd
1868d     FB FA F8 F8 
18691     F7 F6 F5 F4 
18695     F4 F3 F2 F1 
18699     F1 F0 EF EF | 	byte	$fb, $fa, $f8, $f8, $f7, $f6, $f5, $f4, $f4, $f3, $f2, $f1, $f1, $f0, $ef, $ef
1869d     EF EE EE EE 
186a1     EE EE EE EE 
186a5     EE EE EE EE 
186a9     EF EF F0 F0 | 	byte	$ef, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ef, $ef, $f0, $f0
186ad     F1 F2 F3 F4 
186b1     F5 F6 F8 F9 
186b5     FB FE 00 02 
186b9     04 07 09 0C | 	byte	$f1, $f2, $f3, $f4, $f5, $f6, $f8, $f9, $fb, $fe, $00, $02, $04, $07, $09, $0c
186bd     0F 12 17 1C 
186c1     1F 23 27 2C 
186c5     30 33 37 3A 
186c9     3C 3C 3B 38 | 	byte	$0f, $12, $17, $1c, $1f, $23, $27, $2c, $30, $33, $37, $3a, $3c, $3c, $3b, $38
186cd     32 2B 20 14 
186d1     04 F4 E3 D3 
186d5     C5 BB B4 B1 
186d9     B0 B1 B5 BB | 	byte	$32, $2b, $20, $14, $04, $f4, $e3, $d3, $c5, $bb, $b4, $b1, $b0, $b1, $b5, $bb
186dd     C1 C8 D0 D7 
186e1     DF E5 EC F1 
186e5     F7 FC 01 05 
186e9     08 0B 0E 10 | 	byte	$c1, $c8, $d0, $d7, $df, $e5, $ec, $f1, $f7, $fc, $01, $05, $08, $0b, $0e, $10
186ed     12 14 14 14 
186f1     15 16 16 16 
186f5     17 17 16 16 
186f9     15 14 14 13 | 	byte	$12, $14, $14, $14, $15, $16, $16, $16, $17, $17, $16, $16, $15, $14, $14, $13
186fd     12 11 10 0F 
18701     0E 0C 0B 0A 
18705     09 08 07 06 
18709     05 04 03 02 | 	byte	$12, $11, $10, $0f, $0e, $0c, $0b, $0a, $09, $08, $07, $06, $05, $04, $03, $02
1870d     01 00 FE FE 
18711     FC FB FB FA 
18715     F9 F8 F8 F7 
18719     F7 F6 F5 F5 | 	byte	$01, $00, $fe, $fe, $fc, $fb, $fb, $fa, $f9, $f8, $f8, $f7, $f7, $f6, $f5, $f5
1871d     F5 F4 F4 F4 
18721     F4 F4 F4 F4 
18725     F4 F4 F5 F5 
18729     F6 F6 F7 F8 | 	byte	$f5, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f8
1872d     F8 FA FA FC 
18731     FD FE FF 00 
18735     02 04 06 09 
18739     0B 0D 11 14 | 	byte	$f8, $fa, $fa, $fc, $fd, $fe, $ff, $00, $02, $04, $06, $09, $0b, $0d, $11, $14
1873d     17 1A 1E 21 
18741     24 27 2B 2E 
18745     31 33 35 36 
18749     37 36 33 2E | 	byte	$17, $1a, $1e, $21, $24, $27, $2b, $2e, $31, $33, $35, $36, $37, $36, $33, $2e
1874d     28 1F 14 07 
18751     F9 EA DD D0 
18755     C4 BC B5 B1 
18759     AF B0 B2 B6 | 	byte	$28, $1f, $14, $07, $f9, $ea, $dd, $d0, $c4, $bc, $b5, $b1, $af, $b0, $b2, $b6
1875d     BA C0 C7 CD 
18761     D4 D9 DF E4 
18765     EA EF F4 F8 
18769     FC 00 03 06 | 	byte	$ba, $c0, $c7, $cd, $d4, $d9, $df, $e4, $ea, $ef, $f4, $f8, $fc, $00, $03, $06
1876d     09 0B 0D 0E 
18771     0F 10 11 12 
18775     12 12 12 12 
18779     12 12 11 11 | 	byte	$09, $0b, $0d, $0e, $0f, $10, $11, $12, $12, $12, $12, $12, $12, $12, $11, $11
1877d     11 10 0F 0F 
18781     0E 0D 0D 0C 
18785     0B 0A 09 08 
18789     07 06 05 05 | 	byte	$11, $10, $0f, $0f, $0e, $0d, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $05
1878d     04 03 02 02 
18791     01 00 FF FF 
18795     FE FD FD FC 
18799     FC FB FB FB | 	byte	$04, $03, $02, $02, $01, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fb, $fb, $fb
1879d     FA FA FA FA 
187a1     FA FA FA FA | 	byte	$fa[8]
187a5     FB FB FB FB 
187a9     FC FD FD FE 
187ad     FF 00 02 03 
187b1     04 06 07 09 | 	byte	$fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff, $00, $02, $03, $04, $06, $07, $09
187b5     0B 0C 0E 11 
187b9     13 15 17 1A 
187bd     1D 20 23 25 
187c1     29 2C 2E 30 | 	byte	$0b, $0c, $0e, $11, $13, $15, $17, $1a, $1d, $20, $23, $25, $29, $2c, $2e, $30
187c5     32 33 33 33 
187c9     31 2E 29 24 
187cd     1C 12 08 FC 
187d1     EF E3 D7 CC | 	byte	$32, $33, $33, $33, $31, $2e, $29, $24, $1c, $12, $08, $fc, $ef, $e3, $d7, $cc
187d5     C2 B9 B4 AF 
187d9     AD AD AE B1 
187dd     B5 BA C0 C6 
187e1     CC D2 D7 DD | 	byte	$c2, $b9, $b4, $af, $ad, $ad, $ae, $b1, $b5, $ba, $c0, $c6, $cc, $d2, $d7, $dd
187e5     E3 E8 ED F0 
187e9     F5 F9 FC FF 
187ed     02 05 07 09 
187f1     0A 0B 0D 0E | 	byte	$e3, $e8, $ed, $f0, $f5, $f9, $fc, $ff, $02, $05, $07, $09, $0a, $0b, $0d, $0e
187f5     0F 0F 10 10 
187f9     10 10 10 10 
187fd     10 10 0F 0F 
18801     0F 0E 0E 0D | 	byte	$0f, $0f, $10, $10, $10, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e, $0e, $0d
18805     0C 0C 0B 0A 
18809     0A 09 08 08 
1880d     07 06 06 05 
18811     04 04 03 03 | 	byte	$0c, $0c, $0b, $0a, $0a, $09, $08, $08, $07, $06, $06, $05, $04, $04, $03, $03
18815     02 02 01 01 
18819     01 01 00 FF 
1881d     00 FF FF FF 
18821     00 00 00 00 | 	byte	$02, $02, $01, $01, $01, $01, $00, $ff, $00, $ff, $ff, $ff, $00, $00, $00, $00
18825     00 00 01 01 
18829     02 03 03 04 
1882d     05 06 07 08 
18831     0A 0B 0D 0F | 	byte	$00, $00, $01, $01, $02, $03, $03, $04, $05, $06, $07, $08, $0a, $0b, $0d, $0f
18835     12 14 16 18 
18839     1A 1C 1E 20 
1883d     23 25 28 2A 
18841     2B 2C 2E 2F | 	byte	$12, $14, $16, $18, $1a, $1c, $1e, $20, $23, $25, $28, $2a, $2b, $2c, $2e, $2f
18845     2F 2E 2D 2B 
18849     28 24 1F 18 
1884d     10 06 FD F1 
18851     E7 DB D1 C7 | 	byte	$2f, $2e, $2d, $2b, $28, $24, $1f, $18, $10, $06, $fd, $f1, $e7, $db, $d1, $c7
18855     BE B8 B2 AE 
18859     AC AC AD AF 
1885d     B2 B6 BA BF 
18861     C5 CA CF D5 | 	byte	$be, $b8, $b2, $ae, $ac, $ac, $ad, $af, $b2, $b6, $ba, $bf, $c5, $ca, $cf, $d5
18865     DA E0 E4 E9 
18869     EE F2 F6 F9 
1886d     FC FE 01 03 
18871     05 07 09 0A | 	byte	$da, $e0, $e4, $e9, $ee, $f2, $f6, $f9, $fc, $fe, $01, $03, $05, $07, $09, $0a
18875     0C 0D 0E 0E 
18879     0F 0F 0F 10 
1887d     10 10 10 10 
18881     0F 0F 0F 0E | 	byte	$0c, $0d, $0e, $0e, $0f, $0f, $0f, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e
18885     0D 0D 0C 0C 
18889     0C 0B 0B 0A 
1888d     0A 09 09 08 
18891     08 07 07 07 | 	byte	$0d, $0d, $0c, $0c, $0c, $0b, $0b, $0a, $0a, $09, $09, $08, $08, $07, $07, $07
18895     06 06 06 06 
18899     05 05 04 05 
1889d     05 05 04 04 
188a1     05 05 05 05 | 	byte	$06, $06, $06, $06, $05, $05, $04, $05, $05, $05, $04, $04, $05, $05, $05, $05
188a5     05 06 07 08 
188a9     09 09 0A 0B 
188ad     0C 0D 0E 0F 
188b1     11 12 13 14 | 	byte	$05, $06, $07, $08, $09, $09, $0a, $0b, $0c, $0d, $0e, $0f, $11, $12, $13, $14
188b5     16 18 1A 1B 
188b9     1E 20 22 24 
188bd     26 28 29 2B 
188c1     2C 2D 2D 2D | 	byte	$16, $18, $1a, $1b, $1e, $20, $22, $24, $26, $28, $29, $2b, $2c, $2d, $2d, $2d
188c5     2C 2B 29 26 
188c9     22 1D 18 10 
188cd     07 FE F4 EB 
188d1     E1 D7 CE C5 | 	byte	$2c, $2b, $29, $26, $22, $1d, $18, $10, $07, $fe, $f4, $eb, $e1, $d7, $ce, $c5
188d5     BE B7 B2 AF 
188d9     AD AC AC AE 
188dd     B0 B4 B7 BB 
188e1     C0 C5 CA CF | 	byte	$be, $b7, $b2, $af, $ad, $ac, $ac, $ae, $b0, $b4, $b7, $bb, $c0, $c5, $ca, $cf
188e5     D4 D9 DE E2 
188e9     E7 EB EF F2 
188ed     F6 F9 FC FE 
188f1     01 03 04 06 | 	byte	$d4, $d9, $de, $e2, $e7, $eb, $ef, $f2, $f6, $f9, $fc, $fe, $01, $03, $04, $06
188f5     08 09 0B 0C 
188f9     0C 0D 0E 0E 
188fd     0F 0F 0F 0F 
18901     0F 0F 0F 0F | 	byte	$08, $09, $0b, $0c, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
18905     0F 0E 0E 0E 
18909     0E 0D 0D 0C 
1890d     0C 0C 0C 0C 
18911     0B 0B 0B 0B | 	byte	$0f, $0e, $0e, $0e, $0e, $0d, $0d, $0c, $0c, $0c, $0c, $0c, $0b, $0b, $0b, $0b
18915     0C 0C 0B 0B 
18919     0A 0A 0A 0A 
1891d     0A 0A 0A 09 
18921     09 09 09 0A | 	byte	$0c, $0c, $0b, $0b, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $09, $09, $09, $09, $0a
18925     0A 0A 0B 0C 
18929     0C 0D 0E 0F 
1892d     11 12 13 14 
18931     16 17 19 1A | 	byte	$0a, $0a, $0b, $0c, $0c, $0d, $0e, $0f, $11, $12, $13, $14, $16, $17, $19, $1a
18935     1B 1D 1F 20 
18939     22 23 25 26 
1893d     28 29 2A 2B 
18941     2B 2B 2B 29 | 	byte	$1b, $1d, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2b, $2b, $2b, $2b, $29
18945     27 25 22 1E 
18949     1A 14 0D 05 
1894d     FE F5 EC E3 
18951     DA D1 CA C2 | 	byte	$27, $25, $22, $1e, $1a, $14, $0d, $05, $fe, $f5, $ec, $e3, $da, $d1, $ca, $c2
18955     BC B7 B2 AF 
18959     AD AD AD AD 
1895d     B0 B2 B6 BA 
18961     BE C2 C7 CC | 	byte	$bc, $b7, $b2, $af, $ad, $ad, $ad, $ad, $b0, $b2, $b6, $ba, $be, $c2, $c7, $cc
18965     D0 D5 D9 DE 
18969     E2 E6 EA EE 
1896d     F1 F5 F7 FA 
18971     FC FF 01 03 | 	byte	$d0, $d5, $d9, $de, $e2, $e6, $ea, $ee, $f1, $f5, $f7, $fa, $fc, $ff, $01, $03
18975     05 07 08 0A 
18979     0B 0B 0C 0D 
1897d     0E 0E 0F 0F 
18981     0F 0F 0F 10 | 	byte	$05, $07, $08, $0a, $0b, $0b, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $10
18985     10 10 10 10 
18989     10 10 10 10 | 	byte	$10[8]
1898d     0F 0F 0F 0F 
18991     0F          | 	byte	$0f[5]
18992     0E 0E 0E 0E 
18996     0E          | 	byte	$0e[5]
18997     0D 0E 0E 0D 
1899b     0D 0D 0D 0D 
1899f     0D 0E 0F 0F 
189a3     0F 0F 10 10 | 	byte	$0d, $0e, $0e, $0d, $0d, $0d, $0d, $0d, $0d, $0e, $0f, $0f, $0f, $0f, $10, $10
189a7     11 12 12 13 
189ab     14 15 16 16 
189af     17 19 1A 1B 
189b3     1D 1F 20 21 | 	byte	$11, $12, $12, $13, $14, $15, $16, $16, $17, $19, $1a, $1b, $1d, $1f, $20, $21
189b7     22 24 25 26 
189bb     28 29 2A 2A 
189bf     2A 2B 2A 29 
189c3     27 25 23 1F | 	byte	$22, $24, $25, $26, $28, $29, $2a, $2a, $2a, $2b, $2a, $29, $27, $25, $23, $1f
189c7     1C 17 12 0B 
189cb     05 FE F5 EE 
189cf     E5 DD D5 CD 
189d3     C7 C0 BB B6 | 	byte	$1c, $17, $12, $0b, $05, $fe, $f5, $ee, $e5, $dd, $d5, $cd, $c7, $c0, $bb, $b6
189d7     B2 AF AE AD 
189db     AD AE B0 B2 
189df     B5 B9 BC C0 
189e3     C4 C8 CD D2 | 	byte	$b2, $af, $ae, $ad, $ad, $ae, $b0, $b2, $b5, $b9, $bc, $c0, $c4, $c8, $cd, $d2
189e7     D6 DB DF E3 
189eb     E6 EA ED F0 
189ef     F4 F7 F9 FC 
189f3     FE 02 04 06 | 	byte	$d6, $db, $df, $e3, $e6, $ea, $ed, $f0, $f4, $f7, $f9, $fc, $fe, $02, $04, $06
189f7     08 09 0A 0B 
189fb     0C 0D 0E 0E 
189ff     0F 0E 0F 0F 
18a03     0F 0F 0F 10 | 	byte	$08, $09, $0a, $0b, $0c, $0d, $0e, $0e, $0f, $0e, $0f, $0f, $0f, $0f, $0f, $10
18a07     10 10 10 10 
18a0b     10 10 10 10 
18a0f     10 10 10    | 	byte	$10[11]
18a12     11 11 11 10 
18a16     10 10 11 10 
18a1a     11 11 11 11 
18a1e     11 12 12 12 | 	byte	$11, $11, $11, $10, $10, $10, $11, $10, $11, $11, $11, $11, $11, $12, $12, $12
18a22     13 13 13 14 
18a26     15 16 16 17 
18a2a     18 19 1A 1A 
18a2e     1B 1C 1D 1F | 	byte	$13, $13, $13, $14, $15, $16, $16, $17, $18, $19, $1a, $1a, $1b, $1c, $1d, $1f
18a32     20 21 21 23 
18a36     24 25 26 27 
18a3a     28 29 29 29 
18a3e     29 29 28 27 | 	byte	$20, $21, $21, $23, $24, $25, $26, $27, $28, $29, $29, $29, $29, $29, $28, $27
18a42     25 23 20 1D 
18a46     1A 15 10 0A 
18a4a     05 FE F6 EF 
18a4e     E7 E0 D8 D1 | 	byte	$25, $23, $20, $1d, $1a, $15, $10, $0a, $05, $fe, $f6, $ef, $e7, $e0, $d8, $d1
18a52     CB C4 BE BA 
18a56     B6 B2 B0 AF 
18a5a     AE AE AF B0 
18a5e     B2 B5 B8 BB | 	byte	$cb, $c4, $be, $ba, $b6, $b2, $b0, $af, $ae, $ae, $af, $b0, $b2, $b5, $b8, $bb
18a62     BF C3 C6 CB 
18a66     CF D3 D8 DB 
18a6a     DF E3 E7 EA 
18a6e     ED F1 F4 F7 | 	byte	$bf, $c3, $c6, $cb, $cf, $d3, $d8, $db, $df, $e3, $e7, $ea, $ed, $f1, $f4, $f7
18a72     F9 FB FE 00 
18a76     02 04 06 07 
18a7a     09 0A 0C 0D 
18a7e     0E 0E 0F 10 | 	byte	$f9, $fb, $fe, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0e, $0e, $0f, $10
18a82     10 11 11 12 
18a86     12 12 12 12 
18a8a     13 13 13 13 
18a8e     13 13 13 13 | 	byte	$10, $11, $11, $12, $12, $12, $12, $12, $13, $13, $13, $13, $13, $13, $13, $13
18a92     13 13 13 14 
18a96     14 14 14 15 
18a9a     15 15 15 15 
18a9e     16 16 16 16 | 	byte	$13, $13, $13, $14, $14, $14, $14, $15, $15, $15, $15, $15, $16, $16, $16, $16
18aa2     17 18 18 19 
18aa6     19 1A 1B 1B 
18aaa     1C 1D 1E 1F 
18aae     20 20 21 22 | 	byte	$17, $18, $18, $19, $19, $1a, $1b, $1b, $1c, $1d, $1e, $1f, $20, $20, $21, $22
18ab2     23 24 25 26 
18ab6     27 27 28 29 
18aba     29 29 29 29 
18abe     28 27 26 24 | 	byte	$23, $24, $25, $26, $27, $27, $28, $29, $29, $29, $29, $29, $28, $27, $26, $24
18ac2     21 1E 1B 18 
18ac6     13 0F 0A 04 
18aca     FE F7 F1 EA 
18ace     E3 DC D5 CF | 	byte	$21, $1e, $1b, $18, $13, $0f, $0a, $04, $fe, $f7, $f1, $ea, $e3, $dc, $d5, $cf
18ad2     C9 C4 C0 BC 
18ad6     B8 B5 B2 B0 
18ada     AF B0 B0 B1 
18ade     B3 B5 B7 B9 | 	byte	$c9, $c4, $c0, $bc, $b8, $b5, $b2, $b0, $af, $b0, $b0, $b1, $b3, $b5, $b7, $b9
18ae2     BD C1 C4 C8 
18ae6     CB D0 D3 D8 
18aea     DC E0 E3 E7 
18aee     EA ED F0 F3 | 	byte	$bd, $c1, $c4, $c8, $cb, $d0, $d3, $d8, $dc, $e0, $e3, $e7, $ea, $ed, $f0, $f3
18af2     F6 F8 FB FD 
18af6     FF 02 03 04 
18afa     07 08 09 0B 
18afe     0C 0D 0E 0F | 	byte	$f6, $f8, $fb, $fd, $ff, $02, $03, $04, $07, $08, $09, $0b, $0c, $0d, $0e, $0f
18b02     10 11 11 12 
18b06     12 13 13 14 
18b0a     14 14 15 15 
18b0e     15 15 16 16 | 	byte	$10, $11, $11, $12, $12, $13, $13, $14, $14, $14, $15, $15, $15, $15, $16, $16
18b12     16 16 16 17 
18b16     17 17 17 17 
18b1a     18 18 18 19 
18b1e     19 1A 1B 1B | 	byte	$16, $16, $16, $17, $17, $17, $17, $17, $18, $18, $18, $19, $19, $1a, $1b, $1b
18b22     1B 1B 1B 1C 
18b26     1D 1D 1E 1F 
18b2a     1F 20 21 21 
18b2e     22 23 24 25 | 	byte	$1b, $1b, $1b, $1c, $1d, $1d, $1e, $1f, $1f, $20, $21, $21, $22, $23, $24, $25
18b32     26 27 27 28 
18b36     28 28 29 29 
18b3a     29 28 28 27 
18b3e     26 25 23 21 | 	byte	$26, $27, $27, $28, $28, $28, $29, $29, $29, $28, $28, $27, $26, $25, $23, $21
18b42     1E 1B 17 13 
18b46     0E 0A 05 00 
18b4a     FA F3 ED E6 
18b4e     E0 D9 D4 CE | 	byte	$1e, $1b, $17, $13, $0e, $0a, $05, $00, $fa, $f3, $ed, $e6, $e0, $d9, $d4, $ce
18b52     C9 C3 BF BB 
18b56     B7 B4 B2 B1 
18b5a     B0 B0 B1 B1 
18b5e     B3 B5 B7 BA | 	byte	$c9, $c3, $bf, $bb, $b7, $b4, $b2, $b1, $b0, $b0, $b1, $b1, $b3, $b5, $b7, $ba
18b62     BD C0 C4 C7 
18b66     CB CF D2 D6 
18b6a     D9 DD E1 E5 
18b6e     E8 EB EE F1 | 	byte	$bd, $c0, $c4, $c7, $cb, $cf, $d2, $d6, $d9, $dd, $e1, $e5, $e8, $eb, $ee, $f1
18b72     F4 F7 F9 FB 
18b76     FE 00 02 04 
18b7a     06 08 09 0B 
18b7e     0C 0D 0E 0F | 	byte	$f4, $f7, $f9, $fb, $fe, $00, $02, $04, $06, $08, $09, $0b, $0c, $0d, $0e, $0f
18b82     10 11 12 12 
18b86     13 14 14 15 
18b8a     15 16 16 16 
18b8e     16 16 17 18 | 	byte	$10, $11, $12, $12, $13, $14, $14, $15, $15, $16, $16, $16, $16, $16, $17, $18
18b92     18 19 19 19 
18b96     1A 1A 1A 1B 
18b9a     1B 1B 1B 1C 
18b9e     1C 1D 1D 1D | 	byte	$18, $19, $19, $19, $1a, $1a, $1a, $1b, $1b, $1b, $1b, $1c, $1c, $1d, $1d, $1d
18ba2     1E 1E 1F 20 
18ba6     21 21 21 22 
18baa     23 23 24 25 
18bae     25 26 26 27 | 	byte	$1e, $1e, $1f, $20, $21, $21, $21, $22, $23, $23, $24, $25, $25, $26, $26, $27
18bb2     28 29 2A 2B 
18bb6     2A 2A 2A 29 
18bba     29 28 27 25 
18bbe     24 21 1F 1C | 	byte	$28, $29, $2a, $2b, $2a, $2a, $2a, $29, $29, $28, $27, $25, $24, $21, $1f, $1c
18bc2     19 15 11 0E 
18bc6     09 05 FF FA 
18bca     F4 EE E8 E2 
18bce     DC D6 D1 CC | 	byte	$19, $15, $11, $0e, $09, $05, $ff, $fa, $f4, $ee, $e8, $e2, $dc, $d6, $d1, $cc
18bd2     C7 C2 BE BB 
18bd6     B7 B5 B3 B1 
18bda     B1 B0 B1 B2 
18bde     B3 B5 B7 B9 | 	byte	$c7, $c2, $be, $bb, $b7, $b5, $b3, $b1, $b1, $b0, $b1, $b2, $b3, $b5, $b7, $b9
18be2     BC BF C2 C5 
18be6     C9 CD D0 D4 
18bea     D7 DB DE E2 
18bee     E5 E8 EC EE | 	byte	$bc, $bf, $c2, $c5, $c9, $cd, $d0, $d4, $d7, $db, $de, $e2, $e5, $e8, $ec, $ee
18bf2     F1 F4 F7 F9 
18bf6     FB FE 00 03 
18bfa     04 06 08 0A 
18bfe     0B 0D 0E 0F | 	byte	$f1, $f4, $f7, $f9, $fb, $fe, $00, $03, $04, $06, $08, $0a, $0b, $0d, $0e, $0f
18c02     10 11 11 12 
18c06     14 14 15 15 
18c0a     16 17 17 18 
18c0e     18 19 1A 1A | 	byte	$10, $11, $11, $12, $14, $14, $15, $15, $16, $17, $17, $18, $18, $19, $1a, $1a
18c12     1B 1B 1B 1C 
18c16     1C 1C 1C 1D 
18c1a     1E 1E 1F 1F 
18c1e     1F 20 20 21 | 	byte	$1b, $1b, $1b, $1c, $1c, $1c, $1c, $1d, $1e, $1e, $1f, $1f, $1f, $20, $20, $21
18c22     21 22 22 23 
18c26     23 24 25 26 
18c2a     26 27 27 28 
18c2e     29 29 29 29 | 	byte	$21, $22, $22, $23, $23, $24, $25, $26, $26, $27, $27, $28, $29, $29, $29, $29
18c32     2A 2A 2A 2A 
18c36     2A          | 	byte	$2a[5]
18c37     29 29 28 27 
18c3b     26 25 23 21 
18c3f     1F 1C 1A 16 
18c43     13 0F 0A 06 | 	byte	$29, $29, $28, $27, $26, $25, $23, $21, $1f, $1c, $1a, $16, $13, $0f, $0a, $06
18c47     01 FC F7 F1 
18c4b     EB E5 E0 DA 
18c4f     D5 D0 CC C7 
18c53     C3 BF BB B9 | 	byte	$01, $fc, $f7, $f1, $eb, $e5, $e0, $da, $d5, $d0, $cc, $c7, $c3, $bf, $bb, $b9
18c57     B6 B4 B3 B2 
18c5b     B2 B2 B3 B4 
18c5f     B5 B8 BA BC 
18c63     BF C2 C5 C8 | 	byte	$b6, $b4, $b3, $b2, $b2, $b2, $b3, $b4, $b5, $b8, $ba, $bc, $bf, $c2, $c5, $c8
18c67     CC CF D2 D6 
18c6b     D9 DD DF E3 
18c6f     E6 E9 EC EF 
18c73     F2 F5 F7 FA | 	byte	$cc, $cf, $d2, $d6, $d9, $dd, $df, $e3, $e6, $e9, $ec, $ef, $f2, $f5, $f7, $fa
18c77     FC FF 01 03 
18c7b     05 07 09 0A 
18c7f     0C 0D 0E 10 
18c83     11 12 13 14 | 	byte	$fc, $ff, $01, $03, $05, $07, $09, $0a, $0c, $0d, $0e, $10, $11, $12, $13, $14
18c87     15 16 17 18 
18c8b     18 19 1A 1A 
18c8f     1B 1C 1C 1D 
18c93     1F 1F 1F 1F | 	byte	$15, $16, $17, $18, $18, $19, $1a, $1a, $1b, $1c, $1c, $1d, $1f, $1f, $1f, $1f
18c97     20 20 20 21 
18c9b     21 21 21 22 
18c9f     22 22 22 23 
18ca3     23 24 24 25 | 	byte	$20, $20, $20, $21, $21, $21, $21, $22, $22, $22, $22, $23, $23, $24, $24, $25
18ca7     25 26 26 27 
18cab     27 28 28 28 
18caf     29 29 2A 2A 
18cb3     2A 29 2A 29 | 	byte	$25, $26, $26, $27, $27, $28, $28, $28, $29, $29, $2a, $2a, $2a, $29, $2a, $29
18cb7     29 28 27 26 
18cbb     24 23 21 1F 
18cbf     1D 1A 17 14 
18cc3     10 0C 08 04 | 	byte	$29, $28, $27, $26, $24, $23, $21, $1f, $1d, $1a, $17, $14, $10, $0c, $08, $04
18cc7     FE FA F5 F0 
18ccb     EA E5 E0 DA 
18ccf     D5 D1 CC C7 
18cd3     C4 C0 BD BA | 	byte	$fe, $fa, $f5, $f0, $ea, $e5, $e0, $da, $d5, $d1, $cc, $c7, $c4, $c0, $bd, $ba
18cd7     B8 B6 B5 B4 
18cdb     B4 B4 B4 B5 
18cdf     B6 B8 B9 BB 
18ce3     BE C0 C3 C6 | 	byte	$b8, $b6, $b5, $b4, $b4, $b4, $b4, $b5, $b6, $b8, $b9, $bb, $be, $c0, $c3, $c6
18ce7     C9 CC CF D3 
18ceb     D6 D9 DD E0 
18cef     E3 E7 EA ED 
18cf3     F0 F3 F5 F7 | 	byte	$c9, $cc, $cf, $d3, $d6, $d9, $dd, $e0, $e3, $e7, $ea, $ed, $f0, $f3, $f5, $f7
18cf7     FA FC FF 01 
18cfb     03 05 07 09 
18cff     0B 0C 0D 0F 
18d03     11 12 14 15 | 	byte	$fa, $fc, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0d, $0f, $11, $12, $14, $15
18d07     16 17 18 18 
18d0b     19 1A 1B 1C 
18d0f     1C 1D 1E 1F 
18d13     1F 1F 20 21 | 	byte	$16, $17, $18, $18, $19, $1a, $1b, $1c, $1c, $1d, $1e, $1f, $1f, $1f, $20, $21
18d17     21 22 22 23 
18d1b     23 23 24 24 
18d1f     25 25 26 26 
18d23     27 27 28 28 | 	byte	$21, $22, $22, $23, $23, $23, $24, $24, $25, $25, $26, $26, $27, $27, $28, $28
18d27     29 29 29 29 
18d2b     2A 2A 2A 2B 
18d2f     2B 2B 2B 2B 
18d33     2B 2B 2A 29 | 	byte	$29, $29, $29, $29, $2a, $2a, $2a, $2b, $2b, $2b, $2b, $2b, $2b, $2b, $2a, $29
18d37     29 28 27 26 
18d3b     24 22 20 1E 
18d3f     1B 18 15 12 
18d43     0E 0B 07 03 | 	byte	$29, $28, $27, $26, $24, $22, $20, $1e, $1b, $18, $15, $12, $0e, $0b, $07, $03
18d47     FD F8 F4 EF 
18d4b     E9 E4 E0 DB 
18d4f     D7 D2 CE C9 
18d53     C5 C2 BF BC | 	byte	$fd, $f8, $f4, $ef, $e9, $e4, $e0, $db, $d7, $d2, $ce, $c9, $c5, $c2, $bf, $bc
18d57     BA B8 B6 B5 
18d5b     B5 B4 B5 B5 
18d5f     B6 B7 B9 BB 
18d63     BD BF C2 C5 | 	byte	$ba, $b8, $b6, $b5, $b5, $b4, $b5, $b5, $b6, $b7, $b9, $bb, $bd, $bf, $c2, $c5
18d67     C7 CA CD D1 
18d6b     D4 D7 DA DE 
18d6f     E1 E4 E7 EB 
18d73     EF F2 F4 F6 | 	byte	$c7, $ca, $cd, $d1, $d4, $d7, $da, $de, $e1, $e4, $e7, $eb, $ef, $f2, $f4, $f6
18d77     F9 FB FD 00 
18d7b     02 04 06 07 
18d7f     09 0A 0C 0D 
18d83     0F 10 11 13 | 	byte	$f9, $fb, $fd, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0f, $10, $11, $13
18d87     14 16 17 18 
18d8b     19 1A 1B 1C 
18d8f     1D 1E 1E 1F 
18d93     20 20 21 22 | 	byte	$14, $16, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1e, $1f, $20, $20, $21, $22
18d97     22 23 24 24 
18d9b     25 25 25 26 
18d9f     26 27 28 28 
18da3     29 29 29 2A | 	byte	$22, $23, $24, $24, $25, $25, $25, $26, $26, $27, $28, $28, $29, $29, $29, $2a
18da7     2A 2A 2B 2B 
18dab     2C 2C 2C 2C 
18daf     2C 2C 2C 2B 
18db3     2B 2A 2A 29 | 	byte	$2a, $2a, $2b, $2b, $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2b, $2b, $2a, $2a, $29
18db7     28 27 26 25 
18dbb     23 21 1F 1D 
18dbf     1A 16 13 10 
18dc3     0C 09 05 01 | 	byte	$28, $27, $26, $25, $23, $21, $1f, $1d, $1a, $16, $13, $10, $0c, $09, $05, $01
18dc7     FC F8 F3 EE 
18dcb     E9 E5 E0 DB 
18dcf     D7 D3 CF CB 
18dd3     C7 C3 C0 BE | 	byte	$fc, $f8, $f3, $ee, $e9, $e5, $e0, $db, $d7, $d3, $cf, $cb, $c7, $c3, $c0, $be
18dd7     BB B9 B8 B7 
18ddb     B6 B5 B5 B6 
18ddf     B7 B8 B9 BA 
18de3     BD BF C1 C4 | 	byte	$bb, $b9, $b8, $b7, $b6, $b5, $b5, $b6, $b7, $b8, $b9, $ba, $bd, $bf, $c1, $c4
18de7     C6 C9 CC CF 
18deb     D2 D5 D8 DB 
18def     DF E2 E5 E8 
18df3     EB EE F1 F3 | 	byte	$c6, $c9, $cc, $cf, $d2, $d5, $d8, $db, $df, $e2, $e5, $e8, $eb, $ee, $f1, $f3
18df7     F6 F8 FB FD 
18dfb     00 02 04 06 
18dff     08 0A 0C 0E 
18e03     10 11 12 14 | 	byte	$f6, $f8, $fb, $fd, $00, $02, $04, $06, $08, $0a, $0c, $0e, $10, $11, $12, $14
18e07     15 17 18 19 
18e0b     1A 1B 1C 1D 
18e0f     1E 1F 20 21 
18e13     21 22 23 23 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1f, $20, $21, $21, $22, $23, $23
18e17     25 25 26 26 
18e1b     27 27 28 28 
18e1f     29 29 2A 2B 
18e23     2B 2B 2C 2C | 	byte	$25, $25, $26, $26, $27, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c, $2c
18e27     2C 2C 2D 2D 
18e2b     2D 2D 2D 2D 
18e2f     2D 2D 2C 2C 
18e33     2B 2B 2A 29 | 	byte	$2c, $2c, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2c, $2c, $2b, $2b, $2a, $29
18e37     28 27 25 24 
18e3b     22 20 1D 1B 
18e3f     18 15 12 0E 
18e43     0B 07 03 FE | 	byte	$28, $27, $25, $24, $22, $20, $1d, $1b, $18, $15, $12, $0e, $0b, $07, $03, $fe
18e47     FA F6 F2 ED 
18e4b     E8 E3 DF DB 
18e4f     D7 D3 D0 CD 
18e53     C9 C5 C2 BF | 	byte	$fa, $f6, $f2, $ed, $e8, $e3, $df, $db, $d7, $d3, $d0, $cd, $c9, $c5, $c2, $bf
18e57     BE BB B9 B8 
18e5b     B7 B7 B7 B6 
18e5f     B7 B7 B8 BA 
18e63     BC BD C0 C2 | 	byte	$be, $bb, $b9, $b8, $b7, $b7, $b7, $b6, $b7, $b7, $b8, $ba, $bc, $bd, $c0, $c2
18e67     C5 C8 CA CD 
18e6b     D0 D3 D7 DA 
18e6f     DD E0 E3 E6 
18e73     E9 EC EF F1 | 	byte	$c5, $c8, $ca, $cd, $d0, $d3, $d7, $da, $dd, $e0, $e3, $e6, $e9, $ec, $ef, $f1
18e77     F4 F7 F9 FC 
18e7b     FE 00 03 05 
18e7f     07 09 0B 0D 
18e83     0F 11 12 13 | 	byte	$f4, $f7, $f9, $fc, $fe, $00, $03, $05, $07, $09, $0b, $0d, $0f, $11, $12, $13
18e87     15 17 18 19 
18e8b     1A 1B 1C 1E 
18e8f     1F 20 21 22 
18e93     23 23 24 25 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1e, $1f, $20, $21, $22, $23, $23, $24, $25
18e97     26 26 27 28 
18e9b     29 29 2A 2A 
18e9f     2A 2B 2B 2C 
18ea3     2D 2D 2D 2D | 	byte	$26, $26, $27, $28, $29, $29, $2a, $2a, $2a, $2b, $2b, $2c, $2d, $2d, $2d, $2d
18ea7     2E 2E 2E 2E 
18eab     2E 2E 2E 2E 
18eaf     2E          | 	byte	$2e[9]
18eb0     2D 2D 2C 2C 
18eb4     2B 2A 28 27 
18eb8     26 24 22 20 
18ebc     1E 1C 19 16 | 	byte	$2d, $2d, $2c, $2c, $2b, $2a, $28, $27, $26, $24, $22, $20, $1e, $1c, $19, $16
18ec0     13 10 0C 08 
18ec4     05 01 FD F9 
18ec8     F4 EF EB E6 
18ecc     E3 DE DA D6 | 	byte	$13, $10, $0c, $08, $05, $01, $fd, $f9, $f4, $ef, $eb, $e6, $e3, $de, $da, $d6
18ed0     D2 CE CB C8 
18ed4     C5 C2 BF BD 
18ed8     BB BA B8 B8 
18edc     B8 B8 B8 B9 | 	byte	$d2, $ce, $cb, $c8, $c5, $c2, $bf, $bd, $bb, $ba, $b8, $b8, $b8, $b8, $b8, $b9
18ee0     B9 BA BC BD 
18ee4     BF C1 C3 C6 
18ee8     C8 CB CE D1 
18eec     D3 D6 DA DD | 	byte	$b9, $ba, $bc, $bd, $bf, $c1, $c3, $c6, $c8, $cb, $ce, $d1, $d3, $d6, $da, $dd
18ef0     E0 E2 E5 E8 
18ef4     EB EE F1 F4 
18ef8     F6 F9 FC FE 
18efc     01 03 05 07 | 	byte	$e0, $e2, $e5, $e8, $eb, $ee, $f1, $f4, $f6, $f9, $fc, $fe, $01, $03, $05, $07
18f00     09 0B 0D 0F 
18f04     11 13 14 15 
18f08     17 18 1A 1B 
18f0c     1C 1E 1F 20 | 	byte	$09, $0b, $0d, $0f, $11, $13, $14, $15, $17, $18, $1a, $1b, $1c, $1e, $1f, $20
18f10     21 22 23 24 
18f14     25 26 27 28 
18f18     28 29 29 2A 
18f1c     2B 2B 2B 2C | 	byte	$21, $22, $23, $24, $25, $26, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c
18f20     2D 2D 2E 2E 
18f24     2E 2F 2F 2F 
18f28     2F 2F 2F 2F 
18f2c     2F 2F 2E 2E | 	byte	$2d, $2d, $2e, $2e, $2e, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2e, $2e
18f30     2E 2E 2E 2C 
18f34     2B 2A 29 27 
18f38     25 23 21 1F 
18f3c     1C 19 16 13 | 	byte	$2e, $2e, $2e, $2c, $2b, $2a, $29, $27, $25, $23, $21, $1f, $1c, $19, $16, $13
18f40     10 0C 09 05 
18f44     01 FD F9 F5 
18f48     F1 EC E8 E4 
18f4c     E0 DC D8 D4 | 	byte	$10, $0c, $09, $05, $01, $fd, $f9, $f5, $f1, $ec, $e8, $e4, $e0, $dc, $d8, $d4
18f50     D1 CD CA C7 
18f54     C4 C1 BF BD 
18f58     BC BA B9 B9 
18f5c     B9 B8 B8 B9 | 	byte	$d1, $cd, $ca, $c7, $c4, $c1, $bf, $bd, $bc, $ba, $b9, $b9, $b9, $b8, $b8, $b9
18f60     BA BB BC BD 
18f64     C0 C1 C3 C6 
18f68     C8 CB CE D0 
18f6c     D3 D6 D9 DC | 	byte	$ba, $bb, $bc, $bd, $c0, $c1, $c3, $c6, $c8, $cb, $ce, $d0, $d3, $d6, $d9, $dc
18f70     DF E2 E5 E8 
18f74     EA ED F0 F2 
18f78     F6 F8 FB FE 
18f7c     00 02 04 07 | 	byte	$df, $e2, $e5, $e8, $ea, $ed, $f0, $f2, $f6, $f8, $fb, $fe, $00, $02, $04, $07
18f80                 | 	alignl
18f80                 | _hng030rm_spin2_dat_
18f80     00 00 00 00 
18f84     00 00 00 00 
18f88     00 00 00 00 
18f8c     00 00 00 00 
18f90     00 00 00    | vga_font       file "vgafont.def"
18f93     7E 81 A5 81 
18f97     81 BD 99 81 
18f9b     81 7E 00 00 
18f9f     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
18fa3     7E FF DB FF 
18fa7     FF C3 E7 FF 
18fab     FF 7E 00 00 
18faf     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
18fb3     00 36 7F 7F 
18fb7     7F 7F 3E 1C 
18fbb     08 00 00 00 
18fbf     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
18fc3     00 08 1C 3E 
18fc7     7F 3E 1C 08 
18fcb     00 00 00 00 
18fcf     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
18fd3     18 3C 3C E7 
18fd7     E7 E7 18 18 
18fdb     3C 00 00 00 
18fdf     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18fe3     18 3C 7E FF 
18fe7     FF 7E 18 18 
18feb     3C 00 00 00 
18fef     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18ff3     00 00 00 18 
18ff7     3C 3C 18 00 
18ffb     00 00 00 00 
18fff     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
19003     FF FF FF E7 
19007     C3 C3 E7 FF 
1900b     FF FF FF FF 
1900f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
19013     00 00 3C 66 
19017     42 42 66 3C 
1901b     00 00 00 00 
1901f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
19023     FF FF C3 99 
19027     BD BD 99 C3 
1902b     FF FF FF FF 
1902f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
19033     78 70 58 4C 
19037     1E 33 33 33 
1903b     33 1E 00 00 
1903f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
19043     3C 66 66 66 
19047     66 3C 18 7E 
1904b     18 18 00 00 
1904f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
19053     FC CC FC 0C 
19057     0C 0C 0C 0E 
1905b     0F 07 00 00 
1905f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
19063     FE C6 FE C6 
19067     C6 C6 C6 E6 
1906b     E7 67 03 00 
1906f     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
19073     18 18 DB 3C 
19077     E7 3C DB 18 
1907b     18 00 00 00 
1907f     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
19083     03 07 0F 1F 
19087     7F 1F 0F 07 
1908b     03 01 00 00 
1908f     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
19093     60 70 78 7C 
19097     7F 7C 78 70 
1909b     60 40 00 00 
1909f     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
190a3     18 3C 7E 18 
190a7     18 18 7E 3C 
190ab     18 00 00 00 
190af     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
190b3     66 66 66 66 
190b7     66 66 66    | 	byte	$66[7]
190ba     00 66 66 00 
190be     00 00 00 00 
190c2     00 FE DB DB 
190c6     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
190ca     D8 D8 D8 00 
190ce     00 00 00 3E 
190d2     63 06 1C 36 
190d6     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
190da     30 63 3E 00 
190de     00 00 00 00 
190e2     00 00 00 00 
190e6     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
190ea     7F 7F 7F 00 
190ee     00 00 00 00 
190f2     00 18 3C 7E 
190f6     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
190fa     3C 18 7E 00 
190fe     00 00 00 00 
19102     00 18 3C 7E 
19106     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1910a     18 18 18 00 
1910e     00 00 00 00 
19112     00 18 18 18 
19116     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1911a     7E 3C 18 00 
1911e     00 00 00 00 
19122     00 00 00 18 
19126     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1912a     00 00 00 00 
1912e     00 00 00 00 
19132     00 00 00    | 	byte	$00[11]
19135     0C 06 7F 06 
19139     0C 00 00 00 
1913d     00 00 00 00 
19141     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19145     00 03 03 03 
19149     7F 00 00 00 
1914d     00 00 00 00 
19151     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19155     14 36 7F 36 
19159     14 00 00 00 
1915d     00 00 00 00 
19161     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
19165     1C 1C 3E 3E 
19169     7F 7F 00 00 
1916d     00 00 00 00 
19171     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
19175     7F 3E 3E 1C 
19179     1C 08 00 00 
1917d     00 00 00 00 
19181     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19185     00 00 00 00 
19189     00 00 00 00 
1918d     00 00 00 00 
19191     00 00       | 	byte	$00[14]
19193     18 3C 3C 3C 
19197     18 18 18 00 
1919b     18 18 00 00 
1919f     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
191a3     66 24 00 00 
191a7     00 00 00 00 
191ab     00 00 00 00 
191af     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
191b3     00 36 36 7F 
191b7     36 36 36 7F 
191bb     36 36 00 00 
191bf     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
191c3     3E 63 43 03 
191c7     3E 60 60 61 
191cb     63 3E 18 18 
191cf     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
191d3     00 00 43 63 
191d7     30 18 0C 06 
191db     63 61 00 00 
191df     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
191e3     1C 36 36 1C 
191e7     6E 3B 33 33 
191eb     33 6E 00 00 
191ef     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
191f3     0C 0C 0C 06 
191f7     00 00 00 00 
191fb     00 00 00 00 
191ff     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19203     30 18 0C 0C 
19207     0C 0C 0C 0C 
1920b     18 30 00 00 
1920f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
19213     0C 18 30 30 
19217     30 30 30 30 
1921b     18 0C 00 00 
1921f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
19223     00 00 00 66 
19227     3C FF 3C 66 
1922b     00 00 00 00 
1922f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
19233     00 00 00 18 
19237     18 7E 18 18 
1923b     00 00 00 00 
1923f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
19243     00 00 00 00 
19247     00 00 00 00 | 	byte	$00[8]
1924b     18 18 18 0C 
1924f     00 00 00 00 
19253     00 00 00 00 
19257     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1925b     00 00 00 00 
1925f     00 00 00 00 
19263     00 00 00 00 
19267     00 00 00 00 | 	byte	$00[16]
1926b     18 18 00 00 
1926f     00 00 00 00 
19273     00 00 40 60 
19277     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1927b     03 01 00 00 
1927f     00 00 00 00 
19283     1C 36 63 63 
19287     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1928b     36 1C 00 00 
1928f     00 00 00 00 
19293     18 1C 1E 18 
19297     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1929b     18 7E 00 00 
1929f     00 00 00 00 
192a3     3E 63 60 30 
192a7     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
192ab     63 7F 00 00 
192af     00 00 00 00 
192b3     3E 63 60 60 
192b7     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
192bb     63 3E 00 00 
192bf     00 00 00 00 
192c3     30 38 3C 36 
192c7     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
192cb     30 78 00 00 
192cf     00 00 00 00 
192d3     7F 03 03 03 
192d7     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
192db     63 3E 00 00 
192df     00 00 00 00 
192e3     1C 06 03 03 
192e7     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
192eb     63 3E 00 00 
192ef     00 00 00 00 
192f3     7F 63 60 60 
192f7     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
192fb     0C 0C 00 00 
192ff     00 00 00 00 
19303     3E 63 63 63 
19307     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1930b     63 3E 00 00 
1930f     00 00 00 00 
19313     3E 63 63 63 
19317     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1931b     30 1E 00 00 
1931f     00 00 00 00 
19323     00 00 00 18 
19327     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1932b     18 18 00 00 
1932f     00 00 00 00 
19333     00 00 00 18 
19337     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1933b     18 18 0C 00 
1933f     00 00 00 00 
19343     00 60 30 18 
19347     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1934b     30 60 00 00 
1934f     00 00 00 00 
19353     00 00 00 7E 
19357     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1935b     00 00 00 00 
1935f     00 00 00 00 
19363     00          | 	byte	$00[9]
19364     06 0C 18 30 
19368     60 30 18 0C 
1936c     06 00 00 00 
19370     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
19374     63 63 30 18 
19378     18 18 00 18 
1937c     18 00 00 00 
19380     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
19384     3E 63 63 7B 
19388     7B 7B 3B 03 
1938c     3E 00 00 00 
19390     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
19394     1C 36 63 63 
19398     7F 63 63 63 
1939c     63 00 00 00 
193a0     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
193a4     66 66 66 3E 
193a8     66 66 66 66 
193ac     3F 00 00 00 
193b0     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
193b4     66 43 03 03 
193b8     03 03 43 66 
193bc     3C 00 00 00 
193c0     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
193c4     36 66 66 66 
193c8     66 66 66 36 
193cc     1F 00 00 00 
193d0     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
193d4     66 46 16 1E 
193d8     16 06 46 66 
193dc     7F 00 00 00 
193e0     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
193e4     66 46 16 1E 
193e8     16 06 06 06 
193ec     0F 00 00 00 
193f0     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
193f4     66 43 03 03 
193f8     7B 63 63 66 
193fc     5C 00 00 00 
19400     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
19404     63 63 63 7F 
19408     63 63 63 63 
1940c     63 00 00 00 
19410     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
19414     18 18 18 18 
19418     18 18 18 18 | 	byte	$18[8]
1941c     3C 00 00 00 
19420     00 00 00 78 
19424     30 30 30 30 
19428     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1942c     1E 00 00 00 
19430     00 00 00 67 
19434     66 66 36 1E 
19438     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1943c     67 00 00 00 
19440     00 00 00 0F 
19444     06 06 06 06 
19448     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1944c     7F 00 00 00 
19450     00 00 00 63 
19454     77 7F 7F 6B 
19458     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1945c     63 00 00 00 
19460     00 00 00 63 
19464     67 6F 7F 7B 
19468     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1946c     63 00 00 00 
19470     00 00 00 3E 
19474     63 63 63 63 
19478     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1947c     3E 00 00 00 
19480     00 00 00 3F 
19484     66 66 66 3E 
19488     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1948c     0F 00 00 00 
19490     00 00 00 3E 
19494     63 63 63 63 
19498     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1949c     3E 30 70 00 
194a0     00 00 00 3F 
194a4     66 66 66 3E 
194a8     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
194ac     67 00 00 00 
194b0     00 00 00 3E 
194b4     63 63 06 1C 
194b8     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
194bc     3E 00 00 00 
194c0     00 00 00 7E 
194c4     7E 5A 18 18 
194c8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
194cc     3C 00 00 00 
194d0     00 00 00 63 
194d4     63 63 63 63 
194d8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
194dc     3E 00 00 00 
194e0     00 00 00 63 
194e4     63 63 63 63 
194e8     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
194ec     08 00 00 00 
194f0     00 00 00 63 
194f4     63 63 63 6B 
194f8     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
194fc     36 00 00 00 
19500     00 00 00 63 
19504     63 36 3E 1C 
19508     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1950c     63 00 00 00 
19510     00 00 00 66 
19514     66 66 66 3C 
19518     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1951c     3C 00 00 00 
19520     00 00 00 7F 
19524     63 61 30 18 
19528     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1952c     7F 00 00 00 
19530     00 00 00 3C 
19534     0C 0C 0C 0C 
19538     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1953c     3C 00 00 00 
19540     00 00 00 00 
19544     01 03 07 0E 
19548     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1954c     40 00 00 00 
19550     00 00 00 3C 
19554     30 30 30 30 
19558     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1955c     3C 00 00 00 
19560     1C 36 00 00 
19564     00 00 00 00 
19568     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1956c     00 00 00 00 
19570     00 00 00 00 
19574     00 00 00 00 
19578     00 00 00 00 
1957c     00          | 	byte	$00[17]
1957d     FF 00 00 0C 
19581     18 00 00 00 
19585     00 00 00 00 
19589     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1958d     00 00 00 00 
19591     00 00 00 00 
19595     00          | 	byte	$00[9]
19596     1E 30 3E 33 
1959a     33 33 6E 00 
1959e     00 00 00 00 
195a2     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
195a6     1E 36 66 66 
195aa     66 66 3E 00 
195ae     00 00 00 00 
195b2     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
195b6     3E 63 03 03 
195ba     03 63 3E 00 
195be     00 00 00 00 
195c2     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
195c6     3C 36 33 33 
195ca     33 33 6E 00 
195ce     00 00 00 00 
195d2     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
195d6     3E 63 7F 03 
195da     03 63 3E 00 
195de     00 00 00 00 
195e2     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
195e6     0C 1E 0C 0C 
195ea     0C 0C 1E 00 
195ee     00 00 00 00 
195f2     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
195f6     6E 33 33 33 
195fa     33 33 3E 30 
195fe     33 1E 00 00 
19602     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
19606     36 6E 66 66 
1960a     66 66 67 00 
1960e     00 00 00 00 
19612     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
19616     1C 18 18 18 
1961a     18 18 3C 00 
1961e     00 00 00 00 
19622     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
19626     70 60 60 60 
1962a     60 60 60 66 
1962e     66 3C 00 00 
19632     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
19636     66 36 1E 1E 
1963a     36 66 67 00 
1963e     00 00 00 00 
19642     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
19646     18 18 18 18 
1964a     18 18       | 	byte	$18[6]
1964c     3C 00 00 00 
19650     00 00 00 00 
19654     00 00 37 7F 
19658     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1965c     63 00 00 00 
19660     00 00 00 00 
19664     00 00 3B 66 
19668     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1966c     66 00 00 00 
19670     00 00 00 00 
19674     00 00 3E 63 
19678     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1967c     3E 00 00 00 
19680     00 00 00 00 
19684     00 00 3B 66 
19688     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1968c     3E 06 06 0F 
19690     00 00 00 00 
19694     00 00 6E 33 
19698     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1969c     3E 30 30 78 
196a0     00 00 00 00 
196a4     00 00 3B 6E 
196a8     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
196ac     0F 00 00 00 
196b0     00 00 00 00 
196b4     00 00 3E 63 
196b8     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
196bc     3E 00 00 00 
196c0     00 00 00 08 
196c4     0C 0C 3F 0C 
196c8     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
196cc     38 00 00 00 
196d0     00 00 00 00 
196d4     00 00 33 33 
196d8     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
196dc     6E 00 00 00 
196e0     00 00 00 00 
196e4     00 00 63 63 
196e8     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
196ec     1C 00 00 00 
196f0     00 00 00 00 
196f4     00 00 63 63 
196f8     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
196fc     36 00 00 00 
19700     00 00 00 00 
19704     00 00 63 36 
19708     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1970c     63 00 00 00 
19710     00 00 00 00 
19714     00 00 63 63 
19718     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1971c     7E 60 30 1F 
19720     00 00 00 00 
19724     00 00 7F 33 
19728     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1972c     7F 00 00 00 
19730     00 00 00 70 
19734     18 18 18 0E 
19738     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1973c     70 00 00 00 
19740     00 00 00 18 
19744     18 18 18 18 
19748     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1974c     18 00 00 00 
19750     00 00 00 0E 
19754     18 18 18 70 
19758     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1975c     0E 00 00 00 
19760     6E 3B 00 00 
19764     00 00 00 00 
19768     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1976c     00 00 00 00 
19770     00 00 00 00 
19774     00 00       | 	byte	$00[10]
19776     08 1C 36 63 
1977a     63 63 7F 00 
1977e     00 00 00 00 
19782     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
19786     03 03 03 03 
1978a     43 66 3C 18 
1978e     30 1E 00 00 
19792     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
19796     33 33 33 33 
1979a     33 33       | 	byte	$33[6]
1979c     6E 00 00 00 
197a0     00 00 60 30 
197a4     18 00 3E 63 
197a8     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
197ac     3E 00 00 00 
197b0     00 00 08 1C 
197b4     36 00 1E 30 
197b8     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
197bc     6E 00 00 00 
197c0     00 00 00 00 
197c4     33 00 1E 30 
197c8     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
197cc     6E 00 00 00 
197d0     00 00 1C 36 
197d4     1C 00 33 33 
197d8     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
197dc     6E 00 00 00 
197e0     00 00 60 30 
197e4     18 00 3E 63 
197e8     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
197ec     3E 00 00 00 
197f0     00 00 00 00 
197f4     00 00 3E 63 
197f8     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
197fc     3E 18 30 1E 
19800     00 00 00 1C 
19804     58 78 38 18 
19808     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1980c     3C 00 00 00 
19810     00 00 00 00 
19814     63 00 3E 63 
19818     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1981c     3E 00 00 00 
19820     66 33 00 3E 
19824     63 63 63 63 
19828     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1982c     3E 00 00 00 
19830     00 00 CC 66 
19834     33 00 3E 63 
19838     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1983c     3E 00 00 00 
19840     00 00 18 3C 
19844     66 00 1C 18 
19848     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1984c     3C 00 00 00 
19850     30 18 00 7F 
19854     63 61 30 18 
19858     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1985c     7F 00 00 00 
19860     00 63 00 08 
19864     1C 36 63 63 
19868     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1986c     63 00 00 00 
19870     30 18 00 3C 
19874     66 43 03 03 
19878     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1987c     3C 00 00 00 
19880     30 18 00 7F 
19884     66 46 16 1E 
19888     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1988c     7F 00 00 00 
19890     0C 06 00 0F 
19894     06 06 06 06 
19898     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1989c     7F 00 00 00 
198a0     30 18 00 1C 
198a4     18 18 18 18 
198a8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
198ac     3C 00 00 00 
198b0     00 00 08 1C 
198b4     36 00 3E 63 
198b8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
198bc     3E 00 00 00 
198c0     00 00 00 00 
198c4     63 00 3E 63 
198c8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
198cc     3E 00 00 00 
198d0     00 00 00 6F 
198d4     46 26 06 06 
198d8     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
198dc     7F 00 00 00 
198e0     00 00 00 6E 
198e4     4C 2C 0C 0C 
198e8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
198ec     1E 00 00 00 
198f0     30 18 00 3E 
198f4     63 63 06 1C 
198f8     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
198fc     3E 00 00 00 
19900     00 00 60 30 
19904     18 00 3E 63 
19908     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1990c     3E 00 00 00 
19910     00 63 00 3E 
19914     63 63 63 63 
19918     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1991c     3E 00 00 00 
19920     00 63 00 63 
19924     63 63 63 63 
19928     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1992c     3E 00 00 00 
19930     6C 38 00 7E 
19934     7E 5A 18 18 
19938     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1993c     3C 00 00 00 
19940     00 00 60 48 
19944     2C 0C 3F 0C 
19948     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1994c     38 00 00 00 
19950     00 00 00 0F 
19954     26 36 1E 0E 
19958     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1995c     7F 00 00 00 
19960     00 00 00 00 
19964     00 63 36 1C 
19968     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1996c     00 00 00 00 
19970     00 00       | 	byte	$00[6]
19972     36 1C 08 00 
19976     3E 63 03 03 
1997a     03 63 3E 00 
1997e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
19982     30 18 0C 00 
19986     1E 30 3E 33 
1998a     33 33 6E 00 
1998e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
19992     60 30 18 00 
19996     1C 18 18 18 
1999a     18 18 3C 00 
1999e     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
199a2     60 30 18 00 
199a6     3E 63 63 63 
199aa     63 63 3E 00 
199ae     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
199b2     30 18 0C 00 
199b6     33 33 33 33 
199ba     33 33 6E 00 
199be     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
199c2     00 08 1C 36 
199c6     63 63 7F 63 
199ca     63 63 63 18 
199ce     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
199d2     00 00 00 00 
199d6     1E 30 3E 33 
199da     33 33 6E 18 
199de     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
199e2     00 7F 63 61 
199e6     30 18 0C 06 
199ea     43 63 7F 00 
199ee     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
199f2     36 1C 08 00 
199f6     7F 33 18 0C 
199fa     06 63 7F 00 
199fe     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
19a02     00 7F 66 46 
19a06     16 1E 16 06 
19a0a     46 66 7F 18 
19a0e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
19a12     00 00 00 00 
19a16     3E 63 7F 03 
19a1a     03 63 3E 18 
19a1e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
19a22     00 3C 66 03 
19a26     1F 03 0F 03 
19a2a     03 66 3C 00 
19a2e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
19a32     60 30 18 00 
19a36     7F 33 18 0C 
19a3a     06 63 7F 00 
19a3e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
19a42     00 3C 66 43 
19a46     03 03 03 03 
19a4a     43 66 3C 00 
19a4e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
19a52     00 00 00 00 
19a56     3E 63 06 1C 
19a5a     30 63 3E 18 
19a5e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
19a62     00 00 00 00 
19a66     00 00       | 	byte	$00[6]
19a68     6C 36 1B 36 
19a6c     6C 00 00 00 
19a70     00 00 00 00 
19a74     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19a78     1B 36 6C 36 
19a7c     1B 00 00 00 
19a80     88 22 88 22 
19a84     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
19a88     88 22 88 22 
19a8c     88 22 88 22 
19a90     AA 55 AA 55 
19a94     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
19a98     AA 55 AA 55 
19a9c     AA 55 AA 55 
19aa0     BB EE BB EE 
19aa4     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
19aa8     BB EE BB EE 
19aac     BB EE BB EE 
19ab0     18 18 18 18 
19ab4     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
19ab8     18 18 18 18 
19abc     18 18 18 18 
19ac0     18 18 18 18 
19ac4     18 18 18    | 	byte	$18[15]
19ac7     1F 18 18 18 
19acb     18 18 18 18 
19acf     18 30 18 00 
19ad3     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
19ad7     63 7F 63 63 
19adb     63 63 00 00 
19adf     00 1C 36 00 
19ae3     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
19ae7     63 7F 63 63 
19aeb     63 63 00 00 
19aef     00 36 1C 00 
19af3     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
19af7     1E 16 06 46 
19afb     66 7F 00 00 
19aff     00 00 00 00 
19b03     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
19b07     1C 30 60 63 
19b0b     63 3E 18 30 
19b0f     1E 6C 6C 6C 
19b13     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
19b17     6F 6C 6C 6C 
19b1b     6C 6C 6C 6C 
19b1f     6C 6C 6C 6C 
19b23     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19b27     6C 6C 6C 6C 
19b2b     6C 6C 6C 6C 
19b2f     6C          | 	byte	$6c[9]
19b30     00 00 00 00 
19b34     00          | 	byte	$00[5]
19b35     7F 60 6F 6C 
19b39     6C 6C 6C 6C 
19b3d     6C 6C 6C 6C 
19b41     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19b45     6F 60 7F 00 
19b49     00 00 00 00 
19b4d     00 00 00 18 
19b51     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
19b55     61 30 18 0C 
19b59     06 43 63 7F 
19b5d     00 00 00 00 
19b61     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
19b65     00 7F 33 18 
19b69     0C 06 63 7F 
19b6d     00 00 00 00 
19b71     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
19b75     00 00 1F 18 
19b79     18 18 18 18 
19b7d     18 18 18 18 
19b81     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19b85     18 18 F8 00 
19b89     00 00 00 00 
19b8d     00 00 00 18 
19b91     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19b95     18 18 FF 00 
19b99     00 00 00 00 
19b9d     00 00 00 00 
19ba1     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ba5     00 00 FF 18 
19ba9     18 18 18 18 
19bad     18 18 18 18 
19bb1     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19bb5     18 18 F8 18 
19bb9     18 18 18 18 
19bbd     18 18 18 00 
19bc1     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19bc5     00 00 FF 00 
19bc9     00 00 00 00 
19bcd     00 00 00 18 
19bd1     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19bd5     18 18 FF 18 
19bd9     18 18 18 18 
19bdd     18 18 18 63 
19be1     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
19be5     36 63 63 7F 
19be9     63 63 63 63 
19bed     00 00 00 00 
19bf1     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
19bf5     00 1E 30 3E 
19bf9     33 33 33 6E 
19bfd     00 00 00 6C 
19c01     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19c05     EC 0C FC 00 
19c09     00 00 00 00 
19c0d     00 00 00 00 
19c11     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19c15     FC 0C EC 6C 
19c19     6C 6C 6C 6C 
19c1d     6C 6C 6C 6C 
19c21     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19c25     EF 00 FF 00 
19c29     00 00 00 00 
19c2d     00 00 00 00 
19c31     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19c35     FF 00 EF 6C 
19c39     6C 6C 6C 6C 
19c3d     6C 6C 6C 6C 
19c41     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19c45     EC 0C EC 6C 
19c49     6C 6C 6C 6C 
19c4d     6C 6C 6C 00 
19c51     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19c55     FF 00 FF 00 
19c59     00 00 00 00 
19c5d     00 00 00 6C 
19c61     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19c65     EF 00 EF 6C 
19c69     6C 6C 6C 6C 
19c6d     6C 6C 6C 00 
19c71     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19c75     63 3E 63 63 
19c79     63 63 3E 63 
19c7d     00 00 00 00 
19c81     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
19c85     30 3C 36 33 
19c89     33 33 33 6E 
19c8d     00 00 00 00 
19c91     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
19c95     66 66 6F 66 
19c99     66 66 36 1F 
19c9d     00 00 00 36 
19ca1     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
19ca5     66 66 66 66 
19ca9     66 66       | 	byte	$66[6]
19cab     36 1F 00 00 
19caf     00 00 63 00 
19cb3     7F 66 46 16 
19cb7     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
19cbb     66 7F 00 00 
19cbf     00 6C 38 00 
19cc3     38 30 30 3C 
19cc7     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
19ccb     33 6E 00 00 
19ccf     00 36 1C 00 
19cd3     63 67 6F 7F 
19cd7     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
19cdb     63 63 00 00 
19cdf     00 30 18 00 
19ce3     3C 18 18 18 
19ce7     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19ceb     18 3C 00 00 
19cef     00 3C 66 00 
19cf3     3C 18 18 18 
19cf7     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19cfb     18 3C 00 00 
19cff     00 00 00 36 
19d03     1C 08 00 3E 
19d07     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
19d0b     63 3E 00 00 
19d0f     00 18 18 18 
19d13     18 18 18 18 
19d17     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
19d1b     00 00 00 00 
19d1f     00 00 00 00 
19d23     00 00 00 00 | 	byte	$00[12]
19d27     F8 18 18 18 
19d2b     18 18 18 18 
19d2f     18 FF FF FF 
19d33     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
19d37     FF FF FF FF 
19d3b     FF FF FF FF 
19d3f     FF          | 	byte	$ff[9]
19d40     00 00 00 00 
19d44     00 00 00    | 	byte	$00[7]
19d47     FF FF FF FF 
19d4b     FF FF FF FF 
19d4f     FF          | 	byte	$ff[9]
19d50     00 00 00 7E 
19d54     7E 5A 18 18 
19d58     18 18 18 18 
19d5c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
19d60     1C 36 1C 63 
19d64     63 63 63 63 
19d68     63 63 63 63 
19d6c     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d70     FF FF FF FF 
19d74     FF FF FF    | 	byte	$ff[7]
19d77     00 00 00 00 
19d7b     00 00 00 00 
19d7f     00          | 	byte	$00[9]
19d80     30 18 00 3E 
19d84     63 63 63 63 
19d88     63 63 63 63 
19d8c     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d90     00 00 00 1E 
19d94     33 33 33 1B 
19d98     33 63 63 63 
19d9c     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
19da0     1C 36 00 3E 
19da4     63 63 63 63 
19da8     63 63 63 63 
19dac     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19db0     30 18 00 63 
19db4     67 6F 7F 7B 
19db8     73 63 63 63 
19dbc     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
19dc0     00 00 60 30 
19dc4     18 00 3B 66 
19dc8     66 66 66 66 
19dcc     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19dd0     00 00 36 1C 
19dd4     08 00 3B 66 
19dd8     66 66 66 66 
19ddc     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19de0     36 1C 00 3E 
19de4     63 63 06 1C 
19de8     30 60 63 63 
19dec     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
19df0     00 00 36 1C 
19df4     08 00 3E 63 
19df8     06 1C 30 63 
19dfc     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
19e00     30 18 00 3F 
19e04     66 66 66 3E 
19e08     36 66 66 66 
19e0c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
19e10     30 18 00 63 
19e14     63 63 63 63 
19e18     63 63 63 63 
19e1c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19e20     00 00 60 30 
19e24     18 00 3B 6E 
19e28     66 06 06 06 
19e2c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
19e30     66 33 00 63 
19e34     63 63 63 63 
19e38     63 63 63 63 
19e3c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19e40     00 00 60 30 
19e44     18 00 63 63 
19e48     63 63 63 63 
19e4c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
19e50     30 18 00 66 
19e54     66 66 66 3C 
19e58     18 18 18 18 
19e5c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
19e60     00 00 00 08 
19e64     0C 0C 3F 0C 
19e68     0C 0C 0C 6C 
19e6c     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
19e70     30 18 00 00 
19e74     00 00 00 00 
19e78     00 00 00 00 
19e7c     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e80     00 00 00 00 
19e84     00 00 00 00 | 	byte	$00[8]
19e88     7F 00 00 00 
19e8c     00 00 00 00 
19e90     66 33 00 00 
19e94     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
19e98     00 00 00 00 
19e9c     00 00 00 00 
19ea0     00 00 00 00 
19ea4     00 00 00 00 
19ea8     00 00 00 00 
19eac     00          | 	byte	$00[21]
19ead     0C 06 3C 36 
19eb1     1C 00 00 00 
19eb5     00 00 00 00 
19eb9     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ebd     00 00 00 63 
19ec1     3E 00 00 00 
19ec5     00 00 00 00 
19ec9     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ecd     00 00 00 00 
19ed1     3E 63 06 1C 
19ed5     36 63 63 36 
19ed9     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
19edd     00 00 00 00 
19ee1     00 00 00 00 | 	byte	$00[8]
19ee5     18 00 7E 00 
19ee9     18 00 00 00 
19eed     00 00 00 00 
19ef1     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ef5     00 00 00 00 
19ef9     00 00 00 00 | 	byte	$00[8]
19efd     18 30 1E 00 
19f01     00 00 1C 36 
19f05     36 1C 00 00 
19f09     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
19f0d     00 00 00 00 
19f11     63 00 00 00 
19f15     00 00 00 00 
19f19     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19f1d     00 00 00 18 
19f21     18 00 00 00 
19f25     00 00 00 00 
19f29     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19f2d     00 00 00 00 
19f31     00          | 	byte	$00[5]
19f32     CC 66 33 00 
19f36     33 33 33 33 
19f3a     33 33 6E 00 
19f3e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
19f42     00 3F 66 66 
19f46     66 3E 36 66 
19f4a     66 66 6F 00 
19f4e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
19f52     36 1C 08 00 
19f56     3B 6E 66 06 
19f5a     06 06 0F 00 
19f5e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
19f62     00 00 00 7E 
19f66     7E 7E 7E 7E 
19f6a     7E 7E 00 00 
19f6e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
19f72     00 00 00 00 
19f76     00 00 00 00 
19f7a     00 00 00 00 
19f7e     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19f80     00 00 00 00 
      ...             
19fb0     00 00 00 00 
19fb4     00 00 00    | st_font        file "st4font.def"
19fb7     FF FF 00 00 
19fbb     00 00 00 00 
19fbf     00 18 18 18 
19fc3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19fc7     18 18 18 18 
19fcb     18 18 18 18 
19fcf     18          | 	byte	$18[9]
19fd0     00 00 00 00 
19fd4     00 00 00    | 	byte	$00[7]
19fd7     FF FF 18 18 
19fdb     18 18 18 18 
19fdf     18 18 18 18 
19fe3     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19fe7     FF FF 00 00 
19feb     00 00 00 00 
19fef     00 18 18 18 
19ff3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19ff7     1F 1F 18 18 
19ffb     18 18 18 18 
19fff     18 18 18 18 
1a003     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a007     F8 F8 18 18 
1a00b     18 18 18 18 
1a00f     18 00 00 00 
1a013     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a017     1F 1F 18 18 
1a01b     18 18 18 18 
1a01f     18 00 00 00 
1a023     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a027     F8 F8 18 18 
1a02b     18 18 18 18 
1a02f     18 18 18 18 
1a033     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a037     1F 1F 00 00 
1a03b     00 00 00 00 
1a03f     00 18 18 18 
1a043     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1a047     F8 F8 00 00 
1a04b     00 00 00 00 
1a04f     00 18 18 18 
1a053     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1a057     FF FF 18 18 
1a05b     18 18 18 18 
1a05f     18 00 00 18 
1a063     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1a067     66 7E 7E 66 
1a06b     66 66 66 30 
1a06f     18 00 00 7E 
1a073     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1a077     3E 06 06 06 
1a07b     06 7E 7E 18 
1a07f     0C 30 18 3C 
1a083     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1a087     06 06 06 66 
1a08b     66 7E 3C 00 
1a08f     00 30 18 66 
1a093     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1a097     7E 7E 76 76 
1a09b     66 66 66 00 
1a09f     00 30 18 7C 
1a0a3     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1a0a7     1C 38 70 60 
1a0ab     60 7E 3E 00 
1a0af     00 30 18 7E 
1a0b3     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1a0b7     18 0C 0C 06 
1a0bb     06 7E 7E 00 
1a0bf     00 18 18 00 
1a0c3     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1a0c7     18 18 0C 0C 
1a0cb     06 7E 7E 00 
1a0cf     00 30 18 3C 
1a0d3     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1a0d7     66 66 66 66 
1a0db     66          | 	byte	$66[5]
1a0dc     7E 3C 00 00 
1a0e0     00 00 06 06 
1a0e4     06 06 16 1E 
1a0e8     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1a0ec     7E 7E 00 00 
1a0f0     00 00 00 00 
1a0f4     00 3C 7C 60 
1a0f8     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1a0fc     7E 7C 30 18 
1a100     00 00 00 00 
1a104     00 3C 7E 66 
1a108     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1a10c     7E 7C 18 0C 
1a110     00 00 30 18 
1a114     00 3C 3E 06 
1a118     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1a11c     7E 7C 00 00 
1a120     00 00 30 18 
1a124     00 3E 7E 66 
1a128     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1a12c     66 66 00 00 
1a130     00 00 30 18 
1a134     00 7C 7E 06 
1a138     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1a13c     7E 3E 00 00 
1a140     00 00 30 18 
1a144     00 7E 7E 30 
1a148     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a14c     7E 7E 00 00 
1a150     00 00 18 18 
1a154     00 7E 7E 30 
1a158     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a15c     7E 7E 00 00 
1a160     00 00 30 18 
1a164     00 3C 7E 66 
1a168     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1a16c     7E 3C 00 00 
1a170     00 00 1C 1C 
1a174     18 18 38 3C 
1a178     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1a17c     3C 3C 00 00 
1a180     00 00 00 00 
1a184     00 00 00 00 
1a188     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a18c     00 00 00 00 
1a190     00 00       | 	byte	$00[6]
1a192     18 18 18 18 
1a196     18 18 18 18 | 	byte	$18[8]
1a19a     00 00 18 18 
1a19e     00 00 00 00 
1a1a2     66 66 66 66 
1a1a6     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1a1aa     00 00 00 00 
1a1ae     00 00 00 00 
1a1b2     00          | 	byte	$00[9]
1a1b3     66 66 FF FF 
1a1b7     66 66 FF FF 
1a1bb     66 66 00 00 
1a1bf     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1a1c3     7C 7E 06 06 
1a1c7     3E 7C 60 60 
1a1cb     7E 3E 18 18 
1a1cf     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1a1d3     66 30 30 18 
1a1d7     18 0C 0C 66 
1a1db     66 00 00 00 
1a1df     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1a1e3     66 66 3C 1C 
1a1e7     1C FC FE 66 
1a1eb     66 FE FC 00 
1a1ef     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1a1f3     18 18 18 18 
1a1f7     00 00 00 00 
1a1fb     00 00 00 00 
1a1ff     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1a203     18 1C 0C 0C 
1a207     0C 0C 0C 0C 
1a20b     1C 18 30 00 
1a20f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1a213     18 38 30 30 
1a217     30 30 30 30 
1a21b     38 18 0C 00 
1a21f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1a223     66 66 3C 3C 
1a227     FF FF 3C 3C 
1a22b     66 66 00 00 
1a22f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1a233     00 18 18 18 
1a237     7E 7E 18 18 
1a23b     18 00 00 00 
1a23f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a243     00 00 00 00 
1a247     00 00       | 	byte	$00[6]
1a249     18 18 18 18 
1a24d     18          | 	byte	$18[5]
1a24e     0C 04 00 00 
1a252     00 00 00 00 
1a256     7E 7E 00 00 
1a25a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1a25e     00 00 00 00 
1a262     00 00 00 00 
1a266     00 00 00 00 
1a26a     00          | 	byte	$00[13]
1a26b     18 18 18 00 
1a26f     00 00 00 60 
1a273     60 60 30 30 
1a277     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1a27b     06 06 06 00 
1a27f     00 00 00 3C 
1a283     7E 66 66 66 
1a287     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1a28b     66 7E 3C 00 
1a28f     00 00 00 18 
1a293     18 1C 1C 18 
1a297     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1a29b     18 7E 7E 00 
1a29f     00 00 00 3C 
1a2a3     7E 66 66 30 
1a2a7     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1a2ab     0C 7E 7E 00 
1a2af     00 00 00 7E 
1a2b3     7E 30 30 18 
1a2b7     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1a2bb     66 7E 3C 00 
1a2bf     00 00 00 30 
1a2c3     30 38 38 3C 
1a2c7     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1a2cb     7E 30 30 00 
1a2cf     00 00 00 7E 
1a2d3     7E 06 06 3E 
1a2d7     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1a2db     66 7E 3C 00 
1a2df     00 00 00 38 
1a2e3     3C 0E 06 06 
1a2e7     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1a2eb     66 7E 3C 00 
1a2ef     00 00 00 7E 
1a2f3     7E 60 60 30 
1a2f7     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1a2fb     0C 0C 0C 00 
1a2ff     00 00 00 3C 
1a303     7E 66 66 3C 
1a307     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1a30b     66 7E 3C 00 
1a30f     00 00 00 3C 
1a313     7E 66 66 7E 
1a317     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1a31b     70 3C 1C 00 
1a31f     00 00 00 00 
1a323     00 00 18 18 
1a327     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1a32b     18 18 18 00 
1a32f     00 00 00 00 
1a333     00 00 18 18 
1a337     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1a33b     18 18 18 0C 
1a33f     04 00 00 00 
1a343     70 38 1C 0E 
1a347     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1a34b     70 00 00 00 
1a34f     00 00 00 00 
1a353     00 00 7E 7E 
1a357     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1a35b     00 00 00 00 
1a35f     00 00 00 00 | 	byte	$00[8]
1a363     0E 1C 38 70 
1a367     E0 70 38 1C 
1a36b     0E 00 00 00 
1a36f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1a373     7E 66 66 30 
1a377     30 18 18 18 
1a37b     00 18 18 00 
1a37f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1a383     7E 66 66 66 
1a387     66 36 06 66 
1a38b     66 7E 3C 00 
1a38f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1a393     3C 7E 66 66 
1a397     66 7E 7E 66 
1a39b     66 66 66 00 
1a39f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1a3a3     7E 66 66 7E 
1a3a7     3E 66 66 66 
1a3ab     66 7E 3E 00 
1a3af     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1a3b3     7E 66 66 06 
1a3b7     06 06 06 66 
1a3bb     66 7E 3C 00 
1a3bf     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1a3c3     7E 66 66 66 
1a3c7     66 66 66 66 
1a3cb     66 7E 3E 00 
1a3cf     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1a3d3     7E 06 06 3E 
1a3d7     3E 06 06 06 
1a3db     06 7E 7E 00 
1a3df     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1a3e3     7E 06 06 3E 
1a3e7     3E 06 06 06 
1a3eb     06 06 06 00 
1a3ef     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1a3f3     7E 06 06 76 
1a3f7     76 66 66 66 
1a3fb     66 7E 3C 00 
1a3ff     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1a403     66 66 66 7E 
1a407     7E 66 66 66 
1a40b     66 66 66 00 
1a40f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1a413     7E 18 18 18 
1a417     18 18 18 18 
1a41b     18 7E 7E 00 
1a41f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1a423     60 60 60 60 
1a427     60 60 60    | 	byte	$60[7]
1a42a     66 66 7E 3C 
1a42e     00 00 00 00 
1a432     66 66 36 36 
1a436     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1a43a     66 66 C6 C6 
1a43e     00 00 00 00 
1a442     06 06 06 06 
1a446     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1a44a     06 06 7E 7E 
1a44e     00 00 00 00 
1a452     C6 C6 EE EE 
1a456     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1a45a     C6 C6 C6 C6 
1a45e     00 00 00 00 
1a462     66 66 66 6E 
1a466     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1a46a     76 66 66 66 
1a46e     00 00 00 00 
1a472     3C 7E 66 66 
1a476     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a47a     66 66 7E 3C 
1a47e     00 00 00 00 
1a482     3E 7E 66 66 
1a486     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1a48a     06 06 06 06 
1a48e     00 00 00 00 
1a492     3C 7E 66 66 
1a496     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a49a     66 56 3E 6C 
1a49e     00 00 00 00 
1a4a2     3E 7E 66 66 
1a4a6     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1a4aa     66 66 C6 C6 
1a4ae     00 00 00 00 
1a4b2     7C 7E 06 06 
1a4b6     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1a4ba     60 60 7E 3E 
1a4be     00 00 00 00 
1a4c2     7E 7E 18 18 
1a4c6     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1a4ca     18 18 18 18 
1a4ce     00 00 00 00 
1a4d2     66 66 66 66 
1a4d6     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a4da     66 66 7E 3C 
1a4de     00 00 00 00 
1a4e2     66 66 66 66 
1a4e6     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a4ea     3C 3C 18 18 
1a4ee     00 00 00 00 
1a4f2     C6 C6 C6 C6 
1a4f6     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1a4fa     FE EE C6 82 
1a4fe     00 00 00 00 
1a502     66 66 66 3C 
1a506     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1a50a     3C 66 66 66 
1a50e     00 00 00 00 
1a512     66 66 66 66 
1a516     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1a51a     18 18 18 18 
1a51e     00 00 00 00 
1a522     7E 7E 30 30 
1a526     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1a52a     06 06 7E 7E 
1a52e     00 00 00 00 
1a532     3C 3C 0C 0C 
1a536     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1a53a     0C 0C 3C 3C 
1a53e     00 00 00 00 
1a542     06 06 0C 0C 
1a546     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1a54a     60 60 C0 C0 
1a54e     00 00 00 00 
1a552     3C 3C 30 30 
1a556     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1a55a     30 30 3C 3C 
1a55e     00 00 00 00 
1a562     18 18 3C 3C 
1a566     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1a56a     00 00 00 00 
1a56e     00 00 00 00 
1a572     00 00 00 00 
1a576     00 00 00 00 
1a57a     00 00       | 	byte	$00[18]
1a57c     FE FE 00 00 
1a580     00 00 0C 0C 
1a584     18 18 00 00 
1a588     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1a58c     00 00 00 00 
1a590     00 00 00 00 
1a594     00          | 	byte	$00[9]
1a595     3C 7C 60 7C 
1a599     7E 66 66 7E 
1a59d     7C 00 00 00 
1a5a1     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1a5a5     3E 7E 66 66 
1a5a9     66 66 66 7E 
1a5ad     3E 00 00 00 
1a5b1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1a5b5     3C 3E 06 06 
1a5b9     06 06 06 7E 
1a5bd     7C 00 00 00 
1a5c1     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1a5c5     7C 7E 66 66 
1a5c9     66 66 66 7E 
1a5cd     7C 00 00 00 
1a5d1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1a5d5     3C 7E 66 66 
1a5d9     7E 06 06 7E 
1a5dd     7C 00 00 00 
1a5e1     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1a5e5     18 7E 7E 18 
1a5e9     18 18 18 18 
1a5ed     18 00 00 00 
1a5f1     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a5f5     7C 7E 66 66 
1a5f9     66 66 7E 7C 
1a5fd     60 7E 3E 00 
1a601     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1a605     3E 7E 66 66 
1a609     66 66 66 66 
1a60d     66 00 00 00 
1a611     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1a615     1C 1C 18 18 
1a619     18 18 18 3C 
1a61d     3C 00 00 00 
1a621     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1a625     30 30 30 30 
1a629     30 30 30 30 
1a62d     30          | 	byte	$30[9]
1a62e     3E 1E 00 00 
1a632     06 06 06 36 
1a636     36 1E 1E 1E 
1a63a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1a63e     00 00 00 00 
1a642     1C 1C 18 18 
1a646     18 18 18 18 
1a64a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1a64e     00 00 00 00 
1a652     00 00 00    | 	byte	$00[7]
1a655     6C FE FE D6 
1a659     D6 C6 C6 C6 
1a65d     C6 00 00 00 
1a661     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1a665     3E 7E 66 66 
1a669     66 66 66 66 
1a66d     66 00 00 00 
1a671     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1a675     3C 7E 66 66 
1a679     66 66 66 7E 
1a67d     3C 00 00 00 
1a681     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1a685     3E 7E 66 66 
1a689     66 66 66 7E 
1a68d     3E 06 06 00 
1a691     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1a695     7C 7E 66 66 
1a699     66 66 66 7E 
1a69d     7C 60 60 00 
1a6a1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1a6a5     3E 7E 66 06 
1a6a9     06 06 06 06 
1a6ad     06 00 00 00 
1a6b1     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1a6b5     7C 7E 06 0E 
1a6b9     3C 70 60 7E 
1a6bd     3E 00 00 00 
1a6c1     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1a6c5     7E 7E 18 18 
1a6c9     18 18 18 78 
1a6cd     70 00 00 00 
1a6d1     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1a6d5     66 66 66 66 
1a6d9     66 66 66    | 	byte	$66[7]
1a6dc     7E 7C 00 00 
1a6e0     00 00 00 00 
1a6e4     00 66 66 66 
1a6e8     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1a6ec     18 18 00 00 
1a6f0     00 00 00 00 
1a6f4     00 C6 C6 D6 
1a6f8     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1a6fc     C6 82 00 00 
1a700     00 00 00 00 
1a704     00 66 66 3C 
1a708     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1a70c     66 66 00 00 
1a710     00 00 00 00 
1a714     00 66 66 66 
1a718     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1a71c     7C 60 7E 3E 
1a720     00 00 00 00 
1a724     00 7E 7E 30 
1a728     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a72c     7E 7E 00 00 
1a730     00 00 30 18 
1a734     18 18 18 0C 
1a738     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1a73c     18 30 00 00 
1a740     00 00 18 18 
1a744     18 18 18 18 
1a748     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a74c     18 18 00 00 
1a750     00 00 0C 18 
1a754     18 18 18 30 
1a758     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1a75c     18 0C 00 00 
1a760     00 00 6C 7E 
1a764     36 00 00 00 
1a768     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1a76c     00 00 00 00 
1a770     00 00 00 00 
1a774     00          | 	byte	$00[9]
1a775     18 18 18 18 
1a779     18 18 00 00 
1a77d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1a780     00 00 00 00 
1a784     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1a788     00 00 00 00 
1a78c     00 80 80 80 
1a790     00 00 00 FF 
1a794     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1a798     00 00 00 00 
1a79c     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1a79d     80 00 00 00 
1a7a1     00 80 00 00 
1a7a5     80 80 00 00 
1a7a9     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1a7ad     80 00 80 00 
1a7b1     00 40 80 00 
1a7b5     AA AA AA 00 
1a7b9     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1a7bd     FF 00 00 00 
1a7c1     00 FF 00 00 
1a7c5     FF FF 00 00 
1a7c9     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1a7cd     FF 00 FF 00 
1a7d1     00 FF FF 00 
1a7d5     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1a7d8     00 00 00 00 
1a7dc     00          | ataripalette   file "ataripalettep2.def"
1a7dd     11 11 11 00 
1a7e1     22 22 22 00 
1a7e5     33 33 33 00 
1a7e9     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1a7ed     55 55 55 00 
1a7f1     66 66 66 00 
1a7f5     77 77 77 00 
1a7f9     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1a7fd     99 99 99 00 
1a801     AA AA AA 00 
1a805     BB BB BB 00 
1a809     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1a80d     DD DD DD 00 
1a811     EE EE EE 00 
1a815     FF FF FF 00 
1a819     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1a81d     00 14 40 00 
1a821     00 1E 60 00 
1a825     00 28 80 00 
1a829     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1a82d     00 3C BF 00 
1a831     00 46 DF 00 
1a835     00 50 FF 00 
1a839     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1a83d     39 77 FF 00 
1a841     55 8A FF 00 
1a845     71 9E FF 00 
1a849     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1a84d     AA C5 FF 00 
1a851     C6 D8 FF 00 
1a855     E3 EC FF 00 
1a859     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1a85d     00 00 40 00 
1a861     00 00 60 00 
1a865     00 00 80 00 
1a869     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1a86d     00 00 BF 00 
1a871     00 00 DF 00 
1a875     00 00 FF 00 
1a879     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1a87d     39 39 FF 00 
1a881     55 55 FF 00 
1a885     71 71 FF 00 
1a889     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1a88d     AA AA FF 00 
1a891     C6 C6 FF 00 
1a895     E3 E3 FF 00 
1a899     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1a89d     20 00 40 00 
1a8a1     30 00 60 00 
1a8a5     40 00 80 00 
1a8a9     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1a8ad     60 00 BF 00 
1a8b1     70 00 DF 00 
1a8b5     80 00 FF 00 
1a8b9     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1a8bd     9C 39 FF 00 
1a8c1     AA 55 FF 00 
1a8c5     B8 71 FF 00 
1a8c9     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1a8cd     D5 AA FF 00 
1a8d1     E3 C6 FF 00 
1a8d5     F1 E3 FF 00 
1a8d9     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1a8dd     40 00 40 00 
1a8e1     60 00 60 00 
1a8e5     80 00 80 00 
1a8e9     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1a8ed     BF 00 BF 00 
1a8f1     DF 00 DF 00 
1a8f5     FF 00 FF 00 
1a8f9     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1a8fd     FF 39 FF 00 
1a901     FF 55 FF 00 
1a905     FF 71 FF 00 
1a909     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1a90d     FF AA FF 00 
1a911     FF C6 FF 00 
1a915     FF E3 FF 00 
1a919     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1a91d     40 00 20 00 
1a921     60 00 30 00 
1a925     80 00 40 00 
1a929     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1a92d     BF 00 60 00 
1a931     DF 00 70 00 
1a935     FF 00 80 00 
1a939     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1a93d     FF 39 9C 00 
1a941     FF 55 AA 00 
1a945     FF 71 B8 00 
1a949     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1a94d     FF AA D5 00 
1a951     FF C6 E3 00 
1a955     FF E3 F1 00 
1a959     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1a95d     40 00 00 00 
1a961     60 00 00 00 
1a965     80 00 00 00 
1a969     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1a96d     BF 00 00 00 
1a971     DF 00 00 00 
1a975     FF 00 00 00 
1a979     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1a97d     FF 39 39 00 
1a981     FF 55 55 00 
1a985     FF 71 71 00 
1a989     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1a98d     FF AA AA 00 
1a991     FF C6 C6 00 
1a995     FF E3 E3 00 
1a999     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1a99d     40 10 00 00 
1a9a1     60 18 00 00 
1a9a5     80 20 00 00 
1a9a9     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1a9ad     BF 30 00 00 
1a9b1     DF 38 00 00 
1a9b5     FF 40 00 00 
1a9b9     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1a9bd     FF 6A 39 00 
1a9c1     FF 80 55 00 
1a9c5     FF 95 71 00 
1a9c9     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1a9cd     FF BF AA 00 
1a9d1     FF D5 C6 00 
1a9d5     FF EA E3 00 
1a9d9     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1a9dd     40 20 00 00 
1a9e1     60 30 00 00 
1a9e5     80 40 00 00 
1a9e9     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1a9ed     BF 60 00 00 
1a9f1     DF 70 00 00 
1a9f5     FF 80 00 00 
1a9f9     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1a9fd     FF 9C 39 00 
1aa01     FF AA 55 00 
1aa05     FF B8 71 00 
1aa09     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1aa0d     FF D5 AA 00 
1aa11     FF E3 C6 00 
1aa15     FF F1 E3 00 
1aa19     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1aa1d     40 30 00 00 
1aa21     60 48 00 00 
1aa25     80 60 00 00 
1aa29     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1aa2d     BF 90 00 00 
1aa31     DF A8 00 00 
1aa35     FF C0 00 00 
1aa39     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1aa3d     FF CE 39 00 
1aa41     FF D5 55 00 
1aa45     FF DC 71 00 
1aa49     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1aa4d     FF EA AA 00 
1aa51     FF F1 C6 00 
1aa55     FF F8 E3 00 
1aa59     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1aa5d     30 40 00 00 
1aa61     48 60 00 00 
1aa65     60 80 00 00 
1aa69     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1aa6d     90 BF 00 00 
1aa71     A8 DF 00 00 
1aa75     C0 FF 00 00 
1aa79     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1aa7d     CE FF 39 00 
1aa81     D5 FF 55 00 
1aa85     DC FF 71 00 
1aa89     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1aa8d     EA FF AA 00 
1aa91     F1 FF C6 00 
1aa95     F8 FF E3 00 
1aa99     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1aa9d     00 40 00 00 
1aaa1     00 60 00 00 
1aaa5     00 80 00 00 
1aaa9     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1aaad     00 BF 00 00 
1aab1     00 DF 00 00 
1aab5     00 FF 00 00 
1aab9     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1aabd     39 FF 39 00 
1aac1     55 FF 55 00 
1aac5     71 FF 71 00 
1aac9     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1aacd     AA FF AA 00 
1aad1     C6 FF C6 00 
1aad5     E3 FF E3 00 
1aad9     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1aadd     00 40 14 00 
1aae1     00 60 1E 00 
1aae5     00 80 28 00 
1aae9     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1aaed     00 BF 3C 00 
1aaf1     00 DF 46 00 
1aaf5     00 FF 50 00 
1aaf9     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1aafd     39 FF 77 00 
1ab01     55 FF 8A 00 
1ab05     71 FF 9E 00 
1ab09     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1ab0d     AA FF C5 00 
1ab11     C6 FF D8 00 
1ab15     E3 FF EC 00 
1ab19     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1ab1d     00 40 28 00 
1ab21     00 60 3C 00 
1ab25     00 80 50 00 
1ab29     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1ab2d     00 BF 78 00 
1ab31     00 DF 8C 00 
1ab35     00 FF A0 00 
1ab39     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1ab3d     39 FF B5 00 
1ab41     55 FF C0 00 
1ab45     71 FF CA 00 
1ab49     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1ab4d     AA FF DF 00 
1ab51     C6 FF EA 00 
1ab55     E3 FF F4 00 
1ab59     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1ab5d     00 40 40 00 
1ab61     00 60 60 00 
1ab65     00 80 80 00 
1ab69     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1ab6d     00 BF BF 00 
1ab71     00 DF DF 00 
1ab75     00 FF FF 00 
1ab79     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1ab7d     39 FF FF 00 
1ab81     55 FF FF 00 
1ab85     71 FF FF 00 
1ab89     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1ab8d     AA FF FF 00 
1ab91     C6 FF FF 00 
1ab95     E3 FF FF 00 
1ab99     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1ab9d     00 28 40 00 
1aba1     00 3C 60 00 
1aba5     00 50 80 00 
1aba9     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1abad     00 78 BF 00 
1abb1     00 8C DF 00 
1abb5     00 A0 FF 00 
1abb9     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1abbd     39 B5 FF 00 
1abc1     55 C0 FF 00 
1abc5     71 CA FF 00 
1abc9     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1abcd     AA DF FF 00 
1abd1     C6 EA FF 00 
1abd5     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1abd8                 | '**********************************************************************************
1abd8                 | '
1abd8                 | '        Timings and colors definitions
1abd8                 | '
1abd8                 | '**********************************************************************************
1abd8                 | 
1abd8                 |    'streamer sets for text mode, to add to timings[0..5]
1abd8                 | ' todo for the retromachine: 768x576
1abd8                 | 
1abd8                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1abd8     10 00 00 00 
1abdc     50 00 00 00 
1abe0     14 00 00 00 
1abe4     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1abe8     70 00 00 00 
1abec     08 00 00 00 
1abf0     30 00 00 00 
1abf4     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1abf8     10 00 00 00 
1abfc     10 00 00 00 
1ac00     00 00 00 00 
1ac04     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1ac08     E0 01 00 00 
1ac0c     F6 32 24 15 
1ac10     FB 6C C3 01 
1ac14     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ac18     12 00 00 00 
1ac1c     30 00 00 00 
1ac20     10 00 00 00 
1ac24     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1ac28     18 00 00 00 
1ac2c     08 00 00 00 
1ac30     18 00 00 00 
1ac34     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
1ac38     20 00 00 00 
1ac3c     18 00 00 00 
1ac40     40 00 00 00 
1ac44     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1ac48     F0 01 00 00 
1ac4c     46 D8 06 13 
1ac50     FB 2D CB 01 
1ac54     20 02 00 00 | 	byte	$f0, $01, $00, $00, $46, $d8, $06, $13, $fb, $2d, $cb, $01, $20, $02, $00, $00
1ac58                 | 'timings064      long   16,   56,    16,     960,     24,     8,     22,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
1ac58                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1ac58     10 00 00 00 
1ac5c     40 00 00 00 
1ac60     10 00 00 00 
1ac64     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1ac68     08 00 00 00 
1ac6c     08 00 00 00 
1ac70     08 00 00 00 
1ac74     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1ac78     40 00 00 00 
1ac7c     20 00 00 00 
1ac80     80 00 00 00 
1ac84     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1ac88     E0 01 00 00 
1ac8c     70 AE E9 10 
1ac90     FB 8B FF 01 
1ac94     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1ac98     10 00 00 00 
1ac9c     50 00 00 00 
1aca0     14 00 00 00 
1aca4     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1aca8     00 00 00 00 
1acac     08 00 00 00 
1acb0     00 00 00 00 
1acb4     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1acb8     10 00 00 00 
1acbc     10 00 00 00 
1acc0     C0 00 00 00 
1acc4     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1acc8     40 02 00 00 
1accc     F6 32 24 15 
1acd0     FB 6C C3 01 
1acd4     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1acd8     50 00 00 00 
1acdc     A0 00 00 00 
1ace0     54 00 00 00 
1ace4     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1ace8     08 00 00 00 
1acec     08 00 00 00 
1acf0     08 00 00 00 
1acf4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1acf8     0C 00 00 00 
1acfc     08 00 00 00 
1ad00     00 01 00 00 
1ad04     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1ad08     E0 01 00 00 
1ad0c     10 06 56 15 
1ad10     FB 64 C3 01 
1ad14     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1ad18     50 00 00 00 
1ad1c     32 00 00 00 
1ad20     50 00 00 00 
1ad24     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ad28     08 00 00 00 
1ad2c     08 00 00 00 
1ad30     08 00 00 00 
1ad34     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ad38     0C 00 00 00 
1ad3c     08 00 00 00 
1ad40     40 01 00 00 
1ad44     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1ad48     E0 01 00 00 
1ad4c     F2 CD 33 13 
1ad50     FB 53 92 01 
1ad54     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ad58     18 00 00 00 
1ad5c     30 00 00 00 
1ad60     18 00 00 00 
1ad64     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1ad68     08 00 00 00 
1ad6c     08 00 00 00 
1ad70     08 00 00 00 
1ad74     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ad78     0C 00 00 00 
1ad7c     08 00 00 00 
1ad80     80 01 00 00 
1ad84     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1ad88     E0 01 00 00 
1ad8c     F4 8F 11 11 
1ad90     FB 3A 55 01 
1ad94     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1ad98     20 00 00 00 
1ad9c     40 00 00 00 
1ada0     22 00 00 00 
1ada4     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ada8     00 00 00 00 
1adac     08 00 00 00 
1adb0     00 00 00 00 
1adb4     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1adb8     0C 00 00 00 
1adbc     08 00 00 00 
1adc0     C0 01 00 00 
1adc4     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1adc8     F0 01 00 00 
1adcc     F2 CD 33 13 
1add0     FB 53 92 01 
1add4     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1add8                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1add8     00 75 C7 97 
1addc     27 47 F6 0A 
1ade0     05 79 CB 9B 
1ade4     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1ade8                 | 
1ade8     28 12 64 FD | hdmi            setq    #9
1adec     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1adf0                 |            '     setq2   #255
1adf0                 |             '    rdlong  $100, paletteptr 
1adf0     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1adf4     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1adf8     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1adfc     78 F9 02 F1 |                 add     ii,hbase
1ae00     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1ae04     7B 0B 80 FF 
1ae08     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1ae0c                 | 
1ae0c     66 66 86 FF 
1ae10     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1ae14                 | 
1ae14                 | 
1ae14                 | ''--------  frame rendering main loop  ---------------------------------------------------
1ae14                 | 
1ae14                 | p101
1ae14     28 14 64 FD |                 setq    #10
1ae18     00 DF 06 FB |                 rdlong  framebuf,  ptra
1ae1c     28 1E 64 FD |                 setq    #15
1ae20     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1ae24     71 99 02 FB |                 rdlong  border,borderptr
1ae28                 | 
1ae28     01 C4 06 F1 |                 add     frames,#1
1ae2c     76 F5 02 F6 |                 mov     dlptr2,dlptr
1ae30                 | 
1ae30     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1ae34     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1ae38     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1ae3c     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1ae40                 |  '' up porch
1ae40                 | 
1ae40     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1ae44     49 FF 02 F6 |                 mov     hsync1,sync_001
1ae48     37 A8 46 FB |                 callpa  i_upporch ,#blank
1ae4c     72 01 68 FC |                 wrlong  #0,vblankptr
1ae50                 |                 
1ae50     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1ae54     29 FE 65 3D |          if_nc  setq2   #255
1ae58     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1ae5c                 | 
1ae5c                 | '' cursor blinking
1ae5c                 | 
1ae5c     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1ae60     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1ae64                 | 
1ae64                 | '' main screen
1ae64                 | 
1ae64     00 BE 06 F6 |                 mov linenum,#0
1ae68     00 18 07 F6 |                 mov rcnt,#0
1ae6c     00 1C 07 F6 |                 mov rcnt2a,#0
1ae70                 | 
1ae70                 | 
1ae70     00 18 0F F2 | p301            cmp rcnt,#0 wz
1ae74     18 00 90 AD |         if_z    jmp #p306
1ae78     01 18 87 F1 |                 sub rcnt,#1
1ae7c     90 F7 02 F6 |                 mov dl,rdl
1ae80     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1ae84     8F F7 02 A1 |    if_z        add dl,roffset  
1ae88     7B 21 03 F6 |                 mov rdl,dl
1ae8c     04 00 90 FD |                 jmp #p307          
1ae90                 |           
1ae90                 |                 
1ae90     7A F7 02 FB | p306            rdlong  dl,dlptr2
1ae94     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1ae98     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1ae9c     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1aea0                 | 
1aea0                 | '' Special entry:
1aea0                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1aea0                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1aea0                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1aea0                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1aea0                 | '' todo: set horizontal scroll (if needed)
1aea0                 | 
1aea0     02 FA 66 F0 |                 shl framebuf2,#2
1aea4     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1aea8     04 22 0F F2 |                 cmp dlc,#%100 wz
1aeac                 |   
1aeac                 |                 
1aeac     04 F4 06 F1 |                 add dlptr2,#4
1aeb0     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1aeb4     7A 21 03 FB |                  rdlong rdl,dlptr2
1aeb8     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1aebc     04 18 47 F0 |                  shr rcnt,#4
1aec0                 |              
1aec0     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1aec4     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1aec8                 |                 
1aec8     04 1E 47 F0 |                  shr roffset,#4
1aecc     0C 1E 67 F0 |                  shl roffset,#12
1aed0                 |   
1aed0     9C FF 9F FD |                  jmp #p301
1aed4                 |                  
1aed4                 |                  
1aed4                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1aed4     0C FA 46 F0 |                 shr     framebuf2,#12
1aed8     02 FA 66 F0 |                 shl     framebuf2,#2
1aedc                 | 
1aedc     7B 03 E3 F8 |                 getbyte t1,dl,#0
1aee0     00 02 0F F2 |                 cmp     t1,#0 wz
1aee4     34 00 90 AD |     if_z        jmp     #borderline
1aee8                 | 
1aee8     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1aeec     50 00 90 CD |           if_c   jmp     #textline
1aef0     50 02 90 3D |           if_nc  jmp     #graphline
1aef4                 | '
1aef4     01 BE 06 F1 | p302            add     linenum,#1
1aef8     04 F4 06 F1 |                 add     dlptr2,#4
1aefc     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1af00     6C FF 9F 5D |          if_nz  jmp     #p301
1af04                 | 
1af04     72 03 68 FC | p112            wrlong  #1,vblankptr
1af08     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1af0c                 | 
1af0c     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1af10     4B FF 02 F6 |                 mov     hsync1,sync_223
1af14     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1af18     F8 FE 9F FD |                 jmp     #p101
1af1c                 | 
1af1c                 | '' ---------------  END of frame rendering loop -------------------------------------------
1af1c                 | 
1af1c                 | 
1af1c     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1af20     4C A1 C2 FC |                 xcont   m_vi,border
1af24     CC FF 9F FD |                 jmp     #p302
1af28                 | 
1af28                 | 
1af28     08 00 B0 FD | blank           call    #hsync                          'blank lines
1af2c     7E A1 C2 FC |                 xcont   m_vi,hsync0
1af30     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1af34                 | 
1af34     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1af38     7F 9D B2 FC |                 xzero   m_sn,hsync1
1af3c     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1af40                 | 
1af40                 | 
1af40                 | 
1af40                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1af40                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1af40                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1af40                 | 
1af40                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1af40                 | 
1af40     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1af44                 | 
1af44     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1af48     7B 17 5B F8 |                 getnib  zoom, dl,#3
1af4c     03 16 07 F5 |                 and             zoom, #3
1af50                 | 
1af50                 | 
1af50                 | 
1af50     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1af54     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1af58     3F BC 06 F5 |                 and     linestart,#63
1af5c     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1af60     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1af64                 | 
1af64     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1af68                 | 
1af68                 |                        ' if fontline =0, get a border color
1af68                 | 
1af68     51 03 33 F9 | p102            getword t1,m_border,#0
1af6c     00 02 0F F2 |                 cmp     t1, #0 wz
1af70     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1af74                 | 
1af74     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1af78     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1af7c     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1af80     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1af84     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1af88     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1af8c     52 BB 02 F6 |                 mov m_lut2, m_lut1
1af90     6A BB 02 F1 |                 add m_lut2, lutt1
1af94     58 0F 03 F6 |                 mov cpl2,i_cpl
1af98                 | 
1af98     02 16 0F F2 |                cmp zoom,#2 wz
1af9c     E4 00 90 AD |           if_z jmp #p420
1afa0     01 16 0F F2 |                cmp zoom,#1 wz
1afa4     64 00 90 AD |           if_z jmp #p410
1afa8     00 16 0F F2 |                 cmp zoom,#0 wz
1afac     04 00 90 AD |           if_z jmp #p400
1afb0     50 01 90 FD |                jmp #p430
1afb4                 | 
1afb4                 |                    '
1afb4                 |  ''---------------------------------------------------------------------------------------------------------
1afb4     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1afb8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1afbc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1afc0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1afc4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1afc8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1afcc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1afd0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1afd4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1afd8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1afdc                 | 
1afdc     81 BB C2 FC |                         xcont m_lut2,t1
1afe0                 | 
1afe0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1afe4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1afe8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1afec     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1aff0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1aff4     01 C0 86 F1 |                         sub     lutaddr,#1
1aff8                 | 
1aff8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1affc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b000     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b004                 | 
1b004     EB 0F 6F FB |                         djnz   cpl2,#p400
1b008     28 01 90 FD |  p401                   jmp    #p103
1b00c                 | 
1b00c                 | ''------------------------------------------------------------------------------------------------------------
1b00c                 | 
1b00c     01 0E 47 F0 |  p410                   shr cpl2,#1
1b010                 | 
1b010                 | ''---------------------------------------------------------------------------------------------------------
1b010     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1b014     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b018     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b01c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1b020     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1b024     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1b028     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1b02c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1b030     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1b034     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1b038                 | 
1b038                 | 
1b038     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1b03c     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1b040     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1b044     03 02 07 FA |                         mul t1,#3
1b048     81 BB C2 FC |                         xcont m_lut2,t1
1b04c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b050     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b054     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b058     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b05c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b060     01 C0 86 F1 |                         sub     lutaddr,#1
1b064     63 06 63 FD |                         mergew t3
1b068     03 06 07 FA |                         mul t3,#3
1b06c     83 BB C2 FC |                         xcont m_lut2,t3
1b070                 | 
1b070     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b074     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b078                 | 
1b078     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b07c                 | 
1b07c     E4 0F 6F FB |                         djnz   cpl2,#p412
1b080     B0 00 90 FD |  p411                   jmp    #p103
1b084                 | 
1b084                 | ''------------------------------------------------------------------------------------------------------------
1b084                 | 
1b084     02 0E 47 F0 |  p420                   shr cpl2,#2
1b088                 | 
1b088                 | ''---------------------------------------------------------------------------------------
1b088     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1b08c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b090     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b094     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1b098     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1b09c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1b0a0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1b0a4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1b0a8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1b0ac     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1b0b0                 | 
1b0b0     61 02 63 FD |                         mergeb t1
1b0b4     81 07 3B F9 |                         getword t3,t1,#1
1b0b8     0F 02 07 FA |                         mul t1,#15
1b0bc     81 BB C2 FC |                         xcont m_lut2,t1
1b0c0                 | 
1b0c0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b0c4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b0c8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b0cc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b0d0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b0d4     01 C0 86 F1 |                         sub     lutaddr,#1
1b0d8                 | 
1b0d8     81 09 EB F8 |                         getbyte t4,t1,#1        '
1b0dc     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1b0e0                 | 
1b0e0     0F 06 07 FA |                         mul t3,#15
1b0e4     83 BB C2 FC |                         xcont m_lut2,t3
1b0e8                 | 
1b0e8     83 0B EB F8 |                         getbyte t5,t3,#1
1b0ec     85 BB C2 FC |                         xcont m_lut2, t5
1b0f0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b0f4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b0f8                 | 
1b0f8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b0fc                 | 
1b0fc     E2 0F 6F FB |                         djnz   cpl2,#p422
1b100     30 00 90 FD |  p421                   jmp    #p103
1b104                 | 
1b104                 | '--------------------------------------------------------------------------------------------------------------
1b104                 | 
1b104     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1b108     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b10c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b110                 | 
1b110     00 BA C6 FC |                         xcont m_lut2,#0
1b114                 | 
1b114     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b118     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b11c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b120     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b124     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b128     01 C0 86 F1 |                         sub     lutaddr,#1
1b12c                 | 
1b12c     F5 0F 6F FB |                         djnz   cpl2,#p430
1b130     00 00 90 FD |  p431                   jmp    #p103
1b134                 | 
1b134                 | ''------------------------------------------------------------------------------------------------------------
1b134                 | 
1b134                 | 
1b134                 | 
1b134     51 25 33 F9 | p103            getword  mb2,m_border,#0
1b138     00 24 0F F2 |                 cmp      mb2, #0 wz
1b13c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b140                 | 
1b140     B0 FD 9F FD |                 jmp #p302
1b144                 | 
1b144                 | '' -------------------------------------- END of text line ---------------------------------
1b144                 | 
1b144                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1b144                 | 
1b144     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1b148                 | 
1b148                 | 
1b148     51 25 33 F9 | p202            getword mb2,m_border,#0
1b14c     00 24 0F F2 |                 cmp     mb2, #0 wz
1b150     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1b154                 | 
1b154                 | '----------------------------------------- display pixels
1b154                 | 
1b154     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1b158     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1b15c                 | 
1b15c     7B 17 5B F8 |                 getnib  zoom, dl,#3
1b160     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1b164                 | 
1b164     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1b168     0C BC 06 F5 |                 and     colordepth,#12
1b16c                 | 
1b16c     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1b170     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1b174     64 00 90 AD |           if_z  jmp     #p240
1b178                 | 
1b178     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1b17c     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1b180     98 00 90 AD |           if_z  jmp     #p250
1b184                 | 
1b184     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1b188     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1b18c     FC 00 90 AD |           if_z  jmp     #p260
1b190                 | 
1b190     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1b194                 | 
1b194                 | '' --- 8 bit color modes
1b194                 | 
1b194     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1b198     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b19c                 | 
1b19c     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1b1a0     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1b1a4                 |        
1b1a4                 |  '  
1b1a4     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1b1a8     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1b1ac                 |     
1b1ac                 |  
1b1ac     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1b1b0     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1b1b4                 |         
1b1b4                 | 
1b1b4                 |         
1b1b4     7D 11 03 FB | p235               rdlong  char,framebuf2
1b1b8     32 0C 63 FD |                    skipf skippattern
1b1bc     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1b1c0     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1b1c4     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1b1c8     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1b1cc     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1b1d0     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1b1d4     F7 0F 6F FB |                    djnz    cpl2,#p235
1b1d8                 | 
1b1d8     20 01 90 FD |                jmp    #p203
1b1dc                 |                   
1b1dc                 | 
1b1dc                 | 
1b1dc                 | '' --- 1 bit color modes
1b1dc                 | 
1b1dc     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1b1e0     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b1e4                 | 
1b1e4     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1b1e8     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1b1ec     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1b1f0                 | 
1b1f0                 | 
1b1f0     7D 11 E3 FA | p241               rdword  char,framebuf2
1b1f4     44 10 FF F9 |                    movbyts char,#%01000100
1b1f8     63 10 63 FD |                    mergew  char
1b1fc     32 0C 63 FD |                    skipf skippattern
1b200     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1b204     63 10 63 FD |                    mergew  char                    ' 1 0
1b208     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1b20c     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1b210     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1b214     F6 0F 6F FB |                    djnz   cpl2,#p241
1b218                 | 
1b218                 | 
1b218     E0 00 90 FD |                jmp    #p203
1b21c                 | 
1b21c                 | '' --- 2 bit color modes
1b21c                 | 
1b21c     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1b220     C8 00 90 AD |        if_z   jmp #p251
1b224                 | 
1b224     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b228     30 00 90 AD |        if_z   jmp #p252
1b22c                 | 
1b22c                 | 
1b22c     7D 11 C3 FA | p254               rdbyte char,framebuf2
1b230     04 0A 07 F6 |                    mov  t5,#4
1b234     02 10 67 F0 | p255               shl  char,#2
1b238     88 03 53 F8 |                    getnib  t1,char,#2
1b23c     03 02 07 F5 |                    and     t1,#3
1b240     55 02 07 FA |                    mul     t1,#$55
1b244     81 05 03 F9 |                    rolbyte  t2,t1,#0
1b248     FA 0B 6F FB |                    djnz    t5,#p255
1b24c     82 BB C2 FC |                    xcont   m_lut2,t2
1b250     01 FA 06 F1 |                    add     framebuf2,#1
1b254     F5 0F 6F FB |                    djnz    cpl2,#p254
1b258     A0 00 90 FD |                    jmp     #p203
1b25c                 | 
1b25c     7D 11 E3 FA | p252               rdword char,framebuf2
1b260     08 0A 07 F6 |                    mov  t5,#8
1b264     02 10 67 F0 | p253               shl  char,#2
1b268     88 03 63 F8 |                    getnib  t1,char,#4
1b26c     03 02 07 F5 |                    and     t1,#3
1b270     05 02 07 FA |                    mul     t1,#5
1b274     81 05 83 F8 |                    rolnib  t2,t1,#0
1b278     FA 0B 6F FB |                    djnz    t5,#p253
1b27c     82 BB C2 FC |                    xcont   m_lut2,t2
1b280     02 FA 06 F1 |                    add     framebuf2,#2
1b284     F5 0F 6F FB |                    djnz    cpl2,#p252
1b288     70 00 90 FD |                    jmp     #p203
1b28c                 | 
1b28c                 | '' ------ 4 bit color modes
1b28c                 | 
1b28c     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1b290     58 00 90 AD |        if_z   jmp #p251
1b294                 | 
1b294     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b298     2C 00 90 AD |        if_z   jmp #p262
1b29c                 | 
1b29c                 | 
1b29c     7D 11 C3 FA | p263               rdbyte char,framebuf2
1b2a0     02 0A DC FC |                            rep #5,#2
1b2a4     88 05 8B F8 |                              rolnib t2,char,#1
1b2a8     88 05 8B F8 |                                  rolnib t2,char,#1
1b2ac     88 05 8B F8 |                              rolnib t2,char,#1
1b2b0     88 05 8B F8 |                                  rolnib t2,char,#1
1b2b4     04 10 67 F0 |                              shl char,#4
1b2b8     82 BB C2 FC |                    xcont   m_lut2,t2
1b2bc     01 FA 06 F1 |                    add     framebuf2,#1
1b2c0     F6 0F 6F FB |                    djnz    cpl2,#p263
1b2c4     34 00 90 FD |                    jmp     #p203
1b2c8                 | 
1b2c8     7D 11 E3 FA | p262               rdword  char,framebuf2
1b2cc     04 06 DC FC |                            rep #3,#4
1b2d0     88 05 9B F8 |                              rolnib t2,char,#3
1b2d4     88 05 9B F8 |                                  rolnib t2,char,#3
1b2d8     04 10 67 F0 |                              shl char,#4
1b2dc     82 BB C2 FC |                    xcont   m_lut2,t2
1b2e0     02 FA 06 F1 |                    add     framebuf2,#2
1b2e4     F8 0F 6F FB |                    djnz    cpl2,#p262
1b2e8     10 00 90 FD |                    jmp     #p203
1b2ec                 | 
1b2ec                 | ''---------- all color modes without zoom
1b2ec                 | 
1b2ec     87 07 D8 FC | p251               rep  #3,cpl2
1b2f0     7D 11 03 FB |                    rdlong  char,framebuf2
1b2f4     04 FA 06 F1 |                    add     framebuf2,#4
1b2f8     88 BB C2 FC |                    xcont   m_lut2,char
1b2fc                 |           
1b2fc                 |  ''-----------------------------------------------------------------------------------------
1b2fc                 | p203           ' getword  mb2,m_border,#0
1b2fc     00 24 0F F2 |                 cmp      mb2, #0 wz
1b300     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b304                 | 
1b304     EC FB 9F FD |                 jmp #p302
1b308                 | 
1b308                 | '' -------------------------------------- END of graph  line ---------------------------------
1b308                 | 
1b308                 | '' consts and vars
1b308                 | 
1b308     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1b30c     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1b310     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1b314     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1b318                 | 
1b318     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1b31c                 | 
1b31c                 | '------ these longs will be set by setmode function
1b31c                 | 
1b31c     00 00 00 00 | m_bs            long    0        'blanks before sync
1b320     00 00 00 00 | m_sn            long    0        'sync
1b324     00 00 00 00 | m_bv            long    0        'blanks before visible
1b328     00 00 00 00 | m_vi            long    0        'visible pixels #
1b32c     00 00 00 00 | m_border        long    0        'left/right borders
1b330     00 00 00 00 | m_lut1          long    0        'characters
1b334     00 00 00 00 | i_vborder       long    0        'up/down borders
1b338     00 00 00 00 | i_upporch       long    0        'up porch lines
1b33c     00 00 00 00 | i_vsync         long    0        'vsync lines
1b340     00 00 00 00 | i_downporch     long    0        'down porch lines
1b344     00 00 00 00 | i_modenum       long    0        'mode #
1b348     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1b34c     00 00 00 00 | i_lines         long    0        'scanlines #
1b350     00 00 00 00 | i_clock         long    0
1b354     00 00 00 00 | i_hubset        long    0
1b358     00 00 00 00 | i_totalvis      long    0
1b35c                 | 
1b35c                 | '-------------------------------------
1b35c                 | 
1b35c     00 00 00 00 | m_lut2          long    0
1b360                 | 
1b360                 | colordepth
1b360     00 00 00 00 | linestart       long    0
1b364     00 00 00 00 | linenum         long    0
1b368     00 01 00 00 | lutaddr         long    256
1b36c                 | 
1b36c     0E 00 00 00 | cursorsh        long    14
1b370     00 00 00 00 | frames          long    0
1b374     00 00 00 00 | cursorx         long    0
1b378     00 00 00 00 | cursory         long    0
1b37c     00 00 00 00 | cursorpos       long    0
1b380     00 00 00 00 | cursorpos2      long    0
1b384     00 00 00 00 | fontstart       long    0
1b388     00 00 00 00 | border2         long 0
1b38c     00 00 81 70 | lutiv           long $70810000
1b390     00 00 88 00 | lutt1           long $00880000
1b394     00 00 80 00 | lutg1           long $00800000
1b398     00 00 80 10 | lutg2           long $10800000
1b39c     00 00 80 20 | lutg4           long $20800000
1b3a0     00 00 80 30 | lutg8           long $30800000
1b3a4     00 00 00 00 | framebuf        long 0
1b3a8     00 00 00 00 | fontbuf         long 0
1b3ac     00 00 00 00 | borderptr       long 0
1b3b0     00 00 00 00 | vblankptr       long 0
1b3b4     00 00 00 00 | cursorptr       long 0
1b3b8     00 00 00 00 | modeptr         long 0
1b3bc     00 00 00 00 | paletteptr      long 0
1b3c0     00 00 00 00 | dlptr           long 0
1b3c4                 | fontnumptr      res     1
1b3c4                 | fontnumptr      res     1
1b3c4                 | hbase           res     1
1b3c4                 | hbase           res     1
1b3c4                 | borderptr2      res     1
1b3c4                 | borderptr2      res     1
1b3c4                 | dlptr2 res 1
1b3c4                 | dlptr2 res 1
1b3c4                 | dl              res 1
1b3c4                 | dl              res 1
1b3c4                 | ii              res     1
1b3c4                 | ii              res     1
1b3c4                 | framebuf2       res     1
1b3c4                 | framebuf2       res     1
1b3c4                 | hsync0          res     1
1b3c4                 | hsync0          res     1
1b3c4                 | hsync1          res     1
1b3c4                 | hsync1          res     1
1b3c4                 | fontline        res     1
1b3c4                 | fontline        res     1
1b3c4                 | t1              res     1
1b3c4                 | t1              res     1
1b3c4                 | t2              res     1
1b3c4                 | t2              res     1
1b3c4                 | t3 res 1
1b3c4                 | t3 res 1
1b3c4                 | t4 res 1
1b3c4                 | t4 res 1
1b3c4                 | t5 res 1
1b3c4                 | t5 res 1
1b3c4                 | skippattern res 1
1b3c4                 | skippattern res 1
1b3c4                 | cpl2 res 1
1b3c4                 | cpl2 res 1
1b3c4                 | char            res     1
1b3c4                 | char            res     1
1b3c4                 | backcolor       res     1
1b3c4                 | backcolor       res     1
1b3c4                 | charcolor       res     1
1b3c4                 | charcolor       res     1
1b3c4                 | zoom res 1
1b3c4                 | zoom res 1
1b3c4     00 00 00 00 | rcnt long 0 'dl repeat count
1b3c8     00 00 00 00 | rcnt2 long 0
1b3cc     00 00 00 00 | rcnt2a long 0
1b3d0     00 00 00 00 | roffset long 0
1b3d4     00 00 00 00 | rdl long 0  'dl repeat line
1b3d8     00 00 00 00 | dlc long 0 'dl command
1b3dc     00 00 00 00 | mb2 long 0
1b3e0     00 00 00 00 | aend             long 0
1b3e4                 |                 fit     496                     '
1b3e4                 | _trackerplayer_spin2_dat_
1b3e4                 | 
1b3e4     00 00 00 00 | null             long  0
1b3e8     46 52 45 51 
1b3ec     46 52 45 51 
1b3f0     46 52 45 51 
1b3f4     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1b3f8     46 52 45 51 
1b3fc     46 52 45 51 
1b400     46 52 45 51 
1b404     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b408     46 52 45 51 
1b40c     46 52 45 51 
1b410     46 52 45 51 
1b414     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b418     46 52 45 51 
1b41c     46 52 45 51 
1b420     46 52 45 51 
1b424     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b428     46 52 45 51 
1b42c     46 52 45 51 
1b430     46 52 45 51 
1b434     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b438     46 52 45 51 
1b43c     46 52 45 51 
1b440     46 52 45 51 
1b444     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b448     46 52 45 51 
1b44c     46 52 45 51 
1b450     46 52 45 51 
1b454     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b458     46 52 45 51 
1b45c     46 52 45 51 
1b460     46 52 45 51 
1b464     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b468     46 52 45 51 
1b46c     46 52 45 51 
1b470     46 52 45 51 
1b474     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b478     46 52 45 51 
1b47c     46 52 45 51 
1b480     46 52 45 51 
1b484     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b488     46 52 45 51 
1b48c     46 52 45 51 
1b490     46 52 45 51 
1b494     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b498     46 52 45 51 
1b49c     46 52 45 51 
1b4a0     46 52 45 51 
1b4a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4a8     46 52 45 51 
1b4ac     46 52 45 51 
1b4b0     46 52 45 51 
1b4b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4b8     46 52 45 51 
1b4bc     46 52 45 51 
1b4c0     46 52 45 51 
1b4c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4c8     46 52 45 51 
1b4cc     46 52 45 51 
1b4d0     46 52 45 51 
1b4d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4d8     46 52 45 51 
1b4dc     46 52 45 51 
1b4e0     46 52 45 51 
1b4e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4e8     46 52 45 51 
1b4ec     46 52 45 51 
1b4f0     46 52 45 51 
1b4f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4f8     46 52 45 51 
1b4fc     46 52 45 51 
1b500     46 52 45 51 
1b504     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b508     46 52 45 51 
1b50c     46 52 45 51 
1b510     46 52 45 51 
1b514     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b518     46 52 45 51 
1b51c     46 52 45 51 
1b520     46 52 45 51 
1b524     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b528     46 52 45 51 
1b52c     46 52 45 51 
1b530     46 52 45 51 
1b534     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b538     46 52 45 51 
1b53c     46 52 45 51 
1b540     46 52 45 51 
1b544     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b548     46 52 45 51 
1b54c     46 52 45 51 
1b550     46 52 45 51 
1b554     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b558     46 52 45 51 
1b55c     46 52 45 51 
1b560     46 52 45 51 
1b564     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b568     46 52 45 51 
1b56c     46 52 45 51 
1b570     46 52 45 51 
1b574     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b578     46 52 45 51 
1b57c     46 52 45 51 
1b580     46 52 45 51 
1b584     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b588     46 52 45 51 
1b58c     46 52 45 51 
1b590     46 52 45 51 
1b594     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b598     46 52 45 51 
1b59c     46 52 45 51 
1b5a0     46 52 45 51 
1b5a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5a8     46 52 45 51 
1b5ac     46 52 45 51 
1b5b0     46 52 45 51 
1b5b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5b8     46 52 45 51 
1b5bc     46 52 45 51 
1b5c0     46 52 45 51 
1b5c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5c8     46 52 45 51 
1b5cc     46 52 45 51 
1b5d0     46 52 45 51 
1b5d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5d8     46 52 45 51 
1b5dc     46 52 45 51 
1b5e0     46 52 45 51 
1b5e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5e8     46 52 45 51 
1b5ec     46 52 45 51 
1b5f0     46 52 45 51 
1b5f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5f8     46 52 45 51 
1b5fc     46 52 45 51 
1b600     46 52 45 51 
1b604     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b608     46 52 45 51 
1b60c     46 52 45 51 
1b610     46 52 45 51 
1b614     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b618     46 52 45 51 
1b61c     46 52 45 51 
1b620     46 52 45 51 
1b624     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b628     46 52 45 51 
1b62c     46 52 45 51 
1b630     46 52 45 51 
1b634     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b638     46 52 45 51 
1b63c     46 52 45 51 
1b640     46 52 45 51 
1b644     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b648     46 52 45 51 
1b64c     46 52 45 51 
1b650     46 52 45 51 
1b654     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b658     46 52 45 51 
1b65c     46 52 45 51 
1b660     46 52 45 51 
1b664     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b668     46 52 45 51 
1b66c     46 52 45 51 
1b670     46 52 45 51 
1b674     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b678     46 52 45 51 
1b67c     46 52 45 51 
1b680     46 52 45 51 
1b684     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b688     46 52 45 51 
1b68c     46 52 45 51 
1b690     46 52 45 51 
1b694     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b698     46 52 45 51 
1b69c     46 52 45 51 
1b6a0     46 52 45 51 
1b6a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6a8     46 52 45 51 
1b6ac     46 52 45 51 
1b6b0     46 52 45 51 
1b6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6b8     46 52 45 51 
1b6bc     46 52 45 51 
1b6c0     46 52 45 51 
1b6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6c8     46 52 45 51 
1b6cc     46 52 45 51 
1b6d0     46 52 45 51 
1b6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6d8     46 52 45 51 
1b6dc     46 52 45 51 
1b6e0     46 52 45 51 
1b6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6e8     46 52 45 51 
1b6ec     46 52 45 51 
1b6f0     46 52 45 51 
1b6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6f8     46 52 45 51 
1b6fc     46 52 45 51 
1b700     46 52 45 51 
1b704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b708     46 52 45 51 
1b70c     46 52 45 51 
1b710     46 52 45 51 
1b714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b718     46 52 45 51 
1b71c     46 52 45 51 
1b720     46 52 45 51 
1b724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b728     46 52 45 51 
1b72c     46 52 45 51 
1b730     46 52 45 51 
1b734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b738     46 52 45 51 
1b73c     46 52 45 51 
1b740     46 52 45 51 
1b744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b748     46 52 45 51 
1b74c     46 52 45 51 
1b750     46 52 45 51 
1b754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b758     46 52 45 51 
1b75c     46 52 45 51 
1b760     46 52 45 51 
1b764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b768     46 52 45 51 
1b76c     46 52 45 51 
1b770     46 52 45 51 
1b774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b778     46 52 45 51 
1b77c     46 52 45 51 
1b780     46 52 45 51 
1b784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b788     46 52 45 51 
1b78c     46 52 45 51 
1b790     46 52 45 51 
1b794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b798     46 52 45 51 
1b79c     46 52 45 51 
1b7a0     46 52 45 51 
1b7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7a8     46 52 45 51 
1b7ac     46 52 45 51 
1b7b0     46 52 45 51 
1b7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7b8     46 52 45 51 
1b7bc     46 52 45 51 
1b7c0     46 52 45 51 
1b7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7c8     46 52 45 51 
1b7cc     46 52 45 51 
1b7d0     46 52 45 51 
1b7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7d8     46 52 45 51 
1b7dc     46 52 45 51 
1b7e0     46 52 45 51 
1b7e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7e8     46 52 45 51 
1b7ec     46 52 45 51 
1b7f0     46 52 45 51 
1b7f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7f8     46 52 45 51 
1b7fc     46 52 45 51 
1b800     46 52 45 51 
1b804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b808     46 52 45 51 
1b80c     46 52 45 51 
1b810     46 52 45 51 
1b814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b818     46 52 45 51 
1b81c     46 52 45 51 
1b820     46 52 45 51 
1b824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b828     46 52 45 51 
1b82c     46 52 45 51 
1b830     46 52 45 51 
1b834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b838     46 52 45 51 
1b83c     46 52 45 51 
1b840     46 52 45 51 
1b844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b848     46 52 45 51 
1b84c     46 52 45 51 
1b850     46 52 45 51 
1b854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b858     46 52 45 51 
1b85c     46 52 45 51 
1b860     46 52 45 51 
1b864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b868     46 52 45 51 
1b86c     46 52 45 51 
1b870     46 52 45 51 
1b874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b878     46 52 45 51 
1b87c     46 52 45 51 
1b880     46 52 45 51 
1b884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b888     46 52 45 51 
1b88c     46 52 45 51 
1b890     46 52 45 51 
1b894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b898     46 52 45 51 
1b89c     46 52 45 51 
1b8a0     46 52 45 51 
1b8a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8a8     46 52 45 51 
1b8ac     46 52 45 51 
1b8b0     46 52 45 51 
1b8b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8b8     46 52 45 51 
1b8bc     46 52 45 51 
1b8c0     46 52 45 51 
1b8c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8c8     46 52 45 51 
1b8cc     46 52 45 51 
1b8d0     46 52 45 51 
1b8d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8d8     46 52 45 51 
1b8dc     46 52 45 51 
1b8e0     46 52 45 51 
1b8e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8e8     46 52 45 51 
1b8ec     46 52 45 51 
1b8f0     46 52 45 51 
1b8f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8f8     46 52 45 51 
1b8fc     46 52 45 51 
1b900     46 52 45 51 
1b904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b908     46 52 45 51 
1b90c     46 52 45 51 
1b910     46 52 45 51 
1b914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b918     46 52 45 51 
1b91c     46 52 45 51 
1b920     46 52 45 51 
1b924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b928     46 52 45 51 
1b92c     46 52 45 51 
1b930     46 52 45 51 
1b934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b938     46 52 45 51 
1b93c     46 52 45 51 
1b940     46 52 45 51 
1b944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b948     46 52 45 51 
1b94c     46 52 45 51 
1b950     46 52 45 51 
1b954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b958     46 52 45 51 
1b95c     46 52 45 51 
1b960     46 52 45 51 
1b964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b968     46 52 45 51 
1b96c     46 52 45 51 
1b970     46 52 45 51 
1b974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b978     46 52 45 51 
1b97c     46 52 45 51 
1b980     46 52 45 51 
1b984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b988     46 52 45 51 
1b98c     46 52 45 51 
1b990     46 52 45 51 
1b994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b998     46 52 45 51 
1b99c     46 52 45 51 
1b9a0     46 52 45 51 
1b9a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9a8     46 52 45 51 
1b9ac     46 52 45 51 
1b9b0     46 52 45 51 
1b9b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9b8     46 52 45 51 
1b9bc     46 52 45 51 
1b9c0     46 52 45 51 
1b9c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9c8     46 52 45 51 
1b9cc     46 52 45 51 
1b9d0     46 52 45 51 
1b9d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9d8     46 52 45 51 
1b9dc     46 52 45 51 
1b9e0     46 52 45 51 
1b9e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9e8     46 52 45 51 
1b9ec     46 52 45 51 
1b9f0     46 52 45 51 
1b9f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9f8     46 52 45 51 
1b9fc     46 52 45 51 
1ba00     46 52 45 51 
1ba04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba08     46 52 45 51 
1ba0c     46 52 45 51 
1ba10     46 52 45 51 
1ba14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba18     46 52 45 51 
1ba1c     46 52 45 51 
1ba20     46 52 45 51 
1ba24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba28     46 52 45 51 
1ba2c     46 52 45 51 
1ba30     46 52 45 51 
1ba34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba38     46 52 45 51 
1ba3c     46 52 45 51 
1ba40     46 52 45 51 
1ba44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba48     46 52 45 51 
1ba4c     46 52 45 51 
1ba50     46 52 45 51 
1ba54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba58     46 52 45 51 
1ba5c     46 52 45 51 
1ba60     46 52 45 51 
1ba64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba68     46 52 45 51 
1ba6c     46 52 45 51 
1ba70     46 52 45 51 
1ba74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba78     46 52 45 51 
1ba7c     46 52 45 51 
1ba80     46 52 45 51 
1ba84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba88     46 52 45 51 
1ba8c     46 52 45 51 
1ba90     46 52 45 51 
1ba94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba98     46 52 45 51 
1ba9c     46 52 45 51 
1baa0     46 52 45 51 
1baa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baa8     46 52 45 51 
1baac     46 52 45 51 
1bab0     46 52 45 51 
1bab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bab8     46 52 45 51 
1babc     46 52 45 51 
1bac0     46 52 45 51 
1bac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bac8     46 52 45 51 
1bacc     46 52 45 51 
1bad0     46 52 45 51 
1bad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bad8     46 52 45 51 
1badc     46 52 45 51 
1bae0     46 52 45 51 
1bae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bae8     46 52 45 51 
1baec     46 52 45 51 
1baf0     46 52 45 51 
1baf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baf8     46 52 45 51 
1bafc     46 52 45 51 
1bb00     46 52 45 51 
1bb04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb08     46 52 45 51 
1bb0c     46 52 45 51 
1bb10     46 52 45 51 
1bb14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb18     46 52 45 51 
1bb1c     46 52 45 51 
1bb20     46 52 45 51 
1bb24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb28     46 52 45 51 
1bb2c     46 52 45 51 
1bb30     46 52 45 51 
1bb34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb38     46 52 45 51 
1bb3c     46 52 45 51 
1bb40     46 52 45 51 
1bb44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb48     46 52 45 51 
1bb4c     46 52 45 51 
1bb50     46 52 45 51 
1bb54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb58     46 52 45 51 
1bb5c     46 52 45 51 
1bb60     46 52 45 51 
1bb64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb68     46 52 45 51 
1bb6c     46 52 45 51 
1bb70     46 52 45 51 
1bb74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb78     46 52 45 51 
1bb7c     46 52 45 51 
1bb80     46 52 45 51 
1bb84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb88     46 52 45 51 
1bb8c     46 52 45 51 
1bb90     46 52 45 51 
1bb94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb98     46 52 45 51 
1bb9c     46 52 45 51 
1bba0     46 52 45 51 
1bba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bba8     46 52 45 51 
1bbac     46 52 45 51 
1bbb0     46 52 45 51 
1bbb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbb8     46 52 45 51 
1bbbc     46 52 45 51 
1bbc0     46 52 45 51 
1bbc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbc8     46 52 45 51 
1bbcc     46 52 45 51 
1bbd0     46 52 45 51 
1bbd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbd8     46 52 45 51 
1bbdc     46 52 45 51 
1bbe0     46 52 45 51 
1bbe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbe8     46 52 45 51 
1bbec     46 52 45 51 
1bbf0     46 52 45 51 
1bbf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbf8     46 52 45 51 
1bbfc     46 52 45 51 
1bc00     46 52 45 51 
1bc04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc08     46 52 45 51 
1bc0c     46 52 45 51 
1bc10     46 52 45 51 
1bc14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc18     46 52 45 51 
1bc1c     46 52 45 51 
1bc20     46 52 45 51 
1bc24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc28     46 52 45 51 
1bc2c     46 52 45 51 
1bc30     46 52 45 51 
1bc34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc38     46 52 45 51 
1bc3c     46 52 45 51 
1bc40     46 52 45 51 
1bc44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc48     46 52 45 51 
1bc4c     46 52 45 51 
1bc50     46 52 45 51 
1bc54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc58     46 52 45 51 
1bc5c     46 52 45 51 
1bc60     46 52 45 51 
1bc64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc68     46 52 45 51 
1bc6c     46 52 45 51 
1bc70     46 52 45 51 
1bc74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc78     46 52 45 51 
1bc7c     46 52 45 51 
1bc80     46 52 45 51 
1bc84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc88     46 52 45 51 
1bc8c     46 52 45 51 
1bc90     46 52 45 51 
1bc94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc98     46 52 45 51 
1bc9c     46 52 45 51 
1bca0     46 52 45 51 
1bca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bca8     46 52 45 51 
1bcac     46 52 45 51 
1bcb0     46 52 45 51 
1bcb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcb8     46 52 45 51 
1bcbc     46 52 45 51 
1bcc0     46 52 45 51 
1bcc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcc8     46 52 45 51 
1bccc     46 52 45 51 
1bcd0     46 52 45 51 
1bcd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcd8     46 52 45 51 
1bcdc     46 52 45 51 
1bce0     46 52 45 51 
1bce4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bce8     46 52 45 51 
1bcec     46 52 45 51 
1bcf0     46 52 45 51 
1bcf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcf8     46 52 45 51 
1bcfc     46 52 45 51 
1bd00     46 52 45 51 
1bd04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd08     46 52 45 51 
1bd0c     46 52 45 51 
1bd10     46 52 45 51 
1bd14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd18     46 52 45 51 
1bd1c     46 52 45 51 
1bd20     46 52 45 51 
1bd24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd28     46 52 45 51 
1bd2c     46 52 45 51 
1bd30     46 52 45 51 
1bd34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd38     46 52 45 51 
1bd3c     46 52 45 51 
1bd40     46 52 45 51 
1bd44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd48     46 52 45 51 
1bd4c     46 52 45 51 
1bd50     46 52 45 51 
1bd54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd58     46 52 45 51 
1bd5c     46 52 45 51 
1bd60     46 52 45 51 
1bd64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd68     46 52 45 51 
1bd6c     46 52 45 51 
1bd70     46 52 45 51 
1bd74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd78     46 52 45 51 
1bd7c     46 52 45 51 
1bd80     46 52 45 51 
1bd84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd88     46 52 45 51 
1bd8c     46 52 45 51 
1bd90     46 52 45 51 
1bd94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd98     46 52 45 51 
1bd9c     46 52 45 51 
1bda0     46 52 45 51 
1bda4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bda8     46 52 45 51 
1bdac     46 52 45 51 
1bdb0     46 52 45 51 
1bdb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdb8     46 52 45 51 
1bdbc     46 52 45 51 
1bdc0     46 52 45 51 
1bdc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdc8     46 52 45 51 
1bdcc     46 52 45 51 
1bdd0     46 52 45 51 
1bdd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdd8     46 52 45 51 
1bddc     46 52 45 51 
1bde0     46 52 45 51 
1bde4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bde8     46 52 45 51 
1bdec     46 52 45 51 
1bdf0     46 52 45 51 
1bdf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdf8     46 52 45 51 
1bdfc     46 52 45 51 
1be00     46 52 45 51 
1be04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be08     46 52 45 51 
1be0c     46 52 45 51 
1be10     46 52 45 51 
1be14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be18     46 52 45 51 
1be1c     46 52 45 51 
1be20     46 52 45 51 
1be24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be28     46 52 45 51 
1be2c     46 52 45 51 
1be30     46 52 45 51 
1be34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be38     46 52 45 51 
1be3c     46 52 45 51 
1be40     46 52 45 51 
1be44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be48     46 52 45 51 
1be4c     46 52 45 51 
1be50     46 52 45 51 
1be54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be58     46 52 45 51 
1be5c     46 52 45 51 
1be60     46 52 45 51 
1be64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be68     46 52 45 51 
1be6c     46 52 45 51 
1be70     46 52 45 51 
1be74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be78     46 52 45 51 
1be7c     46 52 45 51 
1be80     46 52 45 51 
1be84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be88     46 52 45 51 
1be8c     46 52 45 51 
1be90     46 52 45 51 
1be94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be98     46 52 45 51 
1be9c     46 52 45 51 
1bea0     46 52 45 51 
1bea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bea8     46 52 45 51 
1beac     46 52 45 51 
1beb0     46 52 45 51 
1beb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1beb8     46 52 45 51 
1bebc     46 52 45 51 
1bec0     46 52 45 51 
1bec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bec8     46 52 45 51 
1becc     46 52 45 51 
1bed0     46 52 45 51 
1bed4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bed8     46 52 45 51 
1bedc     46 52 45 51 
1bee0     46 52 45 51 
1bee4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bee8     46 52 45 51 
1beec     46 52 45 51 
1bef0     46 52 45 51 
1bef4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bef8     46 52 45 51 
1befc     46 52 45 51 
1bf00     46 52 45 51 
1bf04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf08     46 52 45 51 
1bf0c     46 52 45 51 
1bf10     46 52 45 51 
1bf14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf18     46 52 45 51 
1bf1c     46 52 45 51 
1bf20     46 52 45 51 
1bf24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf28     46 52 45 51 
1bf2c     46 52 45 51 
1bf30     46 52 45 51 
1bf34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf38     46 52 45 51 
1bf3c     46 52 45 51 
1bf40     46 52 45 51 
1bf44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf48     46 52 45 51 
1bf4c     46 52 45 51 
1bf50     46 52 45 51 
1bf54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf58     46 52 45 51 
1bf5c     46 52 45 51 
1bf60     46 52 45 51 
1bf64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf68     46 52 45 51 
1bf6c     46 52 45 51 
1bf70     46 52 45 51 
1bf74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf78     46 52 45 51 
1bf7c     46 52 45 51 
1bf80     46 52 45 51 
1bf84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf88                 | 
1bf88     00 00 00 00 
1bf8c     18 00 00 00 
1bf90     31 00 00 00 
1bf94     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1bf98     61 00 00 00 
1bf9c     78 00 00 00 
1bfa0     8D 00 00 00 
1bfa4     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1bfa8     B4 00 00 00 
1bfac     C5 00 00 00 
1bfb0     D4 00 00 00 
1bfb4     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1bfb8     EB 00 00 00 
1bfbc     F4 00 00 00 
1bfc0     FA 00 00 00 
1bfc4     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1bfc8     FF 00 00 00 
1bfcc     FD 00 00 00 
1bfd0     FA 00 00 00 
1bfd4     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1bfd8     EB 00 00 00 
1bfdc     E0 00 00 00 
1bfe0     D4 00 00 00 
1bfe4     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1bfe8     B4 00 00 00 
1bfec     A1 00 00 00 
1bff0     8D 00 00 00 
1bff4     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1bff8     61 00 00 00 
1bffc     4A 00 00 00 
1c000     31 00 00 00 
1c004     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1c008     00 00 00 00 
1c00c     E8 FF FF FF 
1c010     CF FF FF FF 
1c014     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1c018     9F FF FF FF 
1c01c     88 FF FF FF 
1c020     73 FF FF FF 
1c024     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1c028     4C FF FF FF 
1c02c     3B FF FF FF 
1c030     2C FF FF FF 
1c034     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1c038     15 FF FF FF 
1c03c     0C FF FF FF 
1c040     06 FF FF FF 
1c044     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1c048     01 FF FF FF 
1c04c     03 FF FF FF 
1c050     06 FF FF FF 
1c054     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1c058     15 FF FF FF 
1c05c     20 FF FF FF 
1c060     2C FF FF FF 
1c064     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1c068     4C FF FF FF 
1c06c     5F FF FF FF 
1c070     73 FF FF FF 
1c074     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1c078     9F FF FF FF 
1c07c     B6 FF FF FF 
1c080     CF FF FF FF 
1c084     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1c088                 | 
1c088     58 03 28 03 
1c08c     FA 02 D0 02 
1c090     A6 02 80 02 
1c094     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1c098     1A 02 FC 01 
1c09c     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1c0a0     AC 01 94 01 
1c0a4     7D 01 68 01 
1c0a8     53 01 40 01 
1c0ac     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1c0b0     0D 01 FE 00 
1c0b4     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1c0b8     D6 00 CA 00 
1c0bc     BE 00 B4 00 
1c0c0     AA 00 A0 00 
1c0c4     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1c0c8     87 00 7F 00 
1c0cc     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1c0d0     52 03 22 03 
1c0d4     F5 02 CB 02 
1c0d8     A2 02 7D 02 
1c0dc     59 02 37 02 |                  word  850 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1c0e0     17 02 F9 01 
1c0e4     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1c0e8     A9 01 91 01 
1c0ec     7B 01 65 01 
1c0f0     51 01 3E 01 
1c0f4     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1c0f8     0C 01 FD 00 
1c0fc     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1c100     D5 00 C9 00 
1c104     BD 00 B3 00 
1c108     A9 00 9F 00 
1c10c     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1c110     86 00 7E 00 
1c114     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1c118     4C 03 1C 03 
1c11c     F0 02 C5 02 
1c120     9E 02 78 02 
1c124     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1c128     14 02 F6 01 
1c12c     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1c130     A6 01 8E 01 
1c134     78 01 63 01 
1c138     4F 01 3C 01 
1c13c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1c140     0A 01 FB 00 
1c144     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1c148     D3 00 C7 00 
1c14c     BC 00 B1 00 
1c150     A7 00 9E 00 
1c154     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1c158     85 00 7D 00 
1c15c     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1c160     46 03 17 03 
1c164     EA 02 C0 02 
1c168     99 02 74 02 
1c16c     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1c170     10 02 F2 01 
1c174     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1c178     A3 01 8B 01 
1c17c     75 01 60 01 
1c180     4C 01 3A 01 
1c184     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1c188     08 01 F9 00 
1c18c     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1c190     D1 00 C6 00 
1c194     BB 00 B0 00 
1c198     A6 00 9D 00 
1c19c     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1c1a0     84 00 7D 00 
1c1a4     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1c1a8     40 03 11 03 
1c1ac     E5 02 BB 02 
1c1b0     94 02 6F 02 
1c1b4     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1c1b8     0C 02 EF 01 
1c1bc     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1c1c0     A0 01 88 01 
1c1c4     72 01 5E 01 
1c1c8     4A 01 38 01 
1c1cc     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1c1d0     06 01 F7 00 
1c1d4     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1c1d8     D0 00 C4 00 
1c1dc     B9 00 AF 00 
1c1e0     A5 00 9C 00 
1c1e4     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1c1e8     83 00 7C 00 
1c1ec     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1c1f0     3A 03 0B 03 
1c1f4     E0 02 B6 02 
1c1f8     8F 02 6B 02 
1c1fc     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1c200     08 02 EB 01 
1c204     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1c208     9D 01 86 01 
1c20c     70 01 5B 01 
1c210     48 01 35 01 
1c214     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1c218     04 01 F5 00 
1c21c     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1c220     CE 00 C3 00 
1c224     B8 00 AE 00 
1c228     A4 00 9B 00 
1c22c     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1c230     82 00 7B 00 
1c234     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1c238     34 03 06 03 
1c23c     DA 02 B1 02 
1c240     8B 02 66 02 
1c244     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1c248     04 02 E7 01 
1c24c     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1c250     9A 01 83 01 
1c254     6D 01 59 01 
1c258     45 01 33 01 
1c25c     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1c260     02 01 F4 00 
1c264     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1c268     CD 00 C1 00 
1c26c     B7 00 AC 00 
1c270     A3 00 9A 00 
1c274     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1c278     81 00 7A 00 
1c27c     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1c280     2E 03 00 03 
1c284     D5 02 AC 02 
1c288     86 02 62 02 
1c28c     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1c290     01 02 E4 01 
1c294     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1c298     97 01 80 01 
1c29c     6B 01 56 01 
1c2a0     43 01 31 01 
1c2a4     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1c2a8     00 01 F2 00 
1c2ac     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1c2b0     CC 00 C0 00 
1c2b4     B5 00 AB 00 
1c2b8     A1 00 98 00 
1c2bc     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1c2c0     80 00 79 00 
1c2c4     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1c2c8     8B 03 58 03 
1c2cc     28 03 FA 02 
1c2d0     D0 02 A6 02 
1c2d4     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1c2d8     3A 02 1A 02 
1c2dc     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1c2e0     C5 01 AC 01 
1c2e4     94 01 7D 01 
1c2e8     68 01 53 01 
1c2ec     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1c2f0     1D 01 0D 01 
1c2f4     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1c2f8     E2 00 D6 00 
1c2fc     CA 00 BE 00 
1c300     B4 00 AA 00 
1c304     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1c308     8F 00 87 00 
1c30c     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1c310     84 03 52 03 
1c314     22 03 F5 02 
1c318     CB 02 A3 02 
1c31c     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1c320     37 02 17 02 
1c324     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1c328     C2 01 A9 01 
1c32c     91 01 7B 01 
1c330     65 01 51 01 
1c334     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1c338     1C 01 0C 01 
1c33c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1c340     E1 00 D4 00 
1c344     C8 00 BD 00 
1c348     B3 00 A9 00 
1c34c     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1c350     8E 00 86 00 
1c354     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1c358     7E 03 4C 03 
1c35c     1C 03 F0 02 
1c360     C5 02 9E 02 
1c364     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1c368     33 02 14 02 
1c36c     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1c370     BF 01 A6 01 
1c374     8E 01 78 01 
1c378     63 01 4F 01 
1c37c     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1c380     1A 01 0A 01 
1c384     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1c388     DF 00 D3 00 
1c38c     C7 00 BC 00 
1c390     B1 00 A7 00 
1c394     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1c398     8D 00 85 00 
1c39c     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1c3a0     77 03 46 03 
1c3a4     17 03 EA 02 
1c3a8     C0 02 99 02 
1c3ac     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1c3b0     2F 02 10 02 
1c3b4     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1c3b8     BC 01 A3 01 
1c3bc     8B 01 75 01 
1c3c0     60 01 4C 01 
1c3c4     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1c3c8     18 01 08 01 
1c3cc     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1c3d0     DE 00 D1 00 
1c3d4     C6 00 BB 00 
1c3d8     B0 00 A6 00 
1c3dc     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1c3e0     8C 00 84 00 
1c3e4     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1c3e8     71 03 40 03 
1c3ec     11 03 E5 02 
1c3f0     BB 02 94 02 
1c3f4     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1c3f8     2B 02 0C 02 
1c3fc     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1c400     B9 01 A0 01 
1c404     88 01 72 01 
1c408     5E 01 4A 01 
1c40c     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1c410     16 01 06 01 
1c414     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1c418     DC 00 D0 00 
1c41c     C4 00 B9 00 
1c420     AF 00 A5 00 
1c424     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1c428     8B 00 83 00 
1c42c     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1c430     6B 03 3A 03 
1c434     0B 03 E0 02 
1c438     B6 02 8F 02 
1c43c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1c440     27 02 08 02 
1c444     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1c448     B5 01 9D 01 
1c44c     86 01 70 01 
1c450     5B 01 48 01 
1c454     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1c458     14 01 04 01 
1c45c     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1c460     DB 00 CE 00 
1c464     C3 00 B8 00 
1c468     AE 00 A4 00 
1c46c     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1c470     8A 00 82 00 
1c474     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1c478     64 03 34 03 
1c47c     06 03 DA 02 
1c480     B1 02 8B 02 
1c484     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1c488     23 02 04 02 
1c48c     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1c490     B2 01 9A 01 
1c494     83 01 6D 01 
1c498     59 01 45 01 
1c49c     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1c4a0     12 01 02 01 
1c4a4     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1c4a8     D9 00 CD 00 
1c4ac     C1 00 B7 00 
1c4b0     AC 00 A3 00 
1c4b4     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1c4b8     89 00 81 00 
1c4bc     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1c4c0     5E 03 2E 03 
1c4c4     00 03 D5 02 
1c4c8     AC 02 86 02 
1c4cc     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1c4d0     1F 02 01 02 
1c4d4     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1c4d8     AF 01 97 01 
1c4dc     80 01 6B 01 
1c4e0     56 01 43 01 
1c4e4     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1c4e8     10 01 00 01 
1c4ec     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1c4f0     D8 00 CB 00 
1c4f4     C0 00 B5 00 
1c4f8     AB 00 A1 00 
1c4fc     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1c500     88 00 80 00 
1c504     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1c508                 | 	alignl
1c508                 | _audio012_spin2_dat_
1c508                 | 
1c508                 | audio       org     0
1c508                 | 
1c508     0E 70 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1c50c     0E B4 1C FC |             wxpin   #90,#left
1c510                 | 
1c510     0F 70 07 FC |             wrpin   dac,#right
1c514     0F B4 1C FC |             wxpin   #90,#right
1c518                 | 
1c518     41 9C 64 FD |             dirh    #left addpins 1
1c51c                 | 
1c51c     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1c520     2D E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1c524     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1c528                 |             
1c528                 | '---------------------------------------------------------------------------------        
1c528                 | '----------------- The main loop -------------------------------------------------
1c528                 | '---------------------------------------------------------------------------------
1c528                 | 
1c528     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
1c52c     61 A3 06 FB |             rdlong  sstart1,ptra++
1c530     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
1c534     61 B5 06 FB |             rdlong  sstart2,ptra++
1c538     28 10 64 FD |             setq    #8
1c53c     61 C7 06 FB |             rdlong  sstart3,ptra++
1c540     28 10 64 FD |             setq    #8
1c544     61 D9 06 FB |             rdlong  sstart4,ptra++
1c548     28 10 64 FD |             setq    #8
1c54c     61 EB 06 FB |             rdlong  sstart5,ptra++
1c550     28 10 64 FD |             setq    #8
1c554     61 FD 06 FB |             rdlong  sstart6,ptra++
1c558     28 10 64 FD |             setq    #8
1c55c     61 0F 07 FB |             rdlong  sstart7,ptra++
1c560     28 10 64 FD |             setq    #8
1c564     61 21 07 FB |             rdlong  sstart8,ptra++
1c568                 | 
1c568     20 F1 87 F1 |             sub     ptra,#9*4*8    
1c56c                 |             
1c56c     3D 35 13 F2 |             cmp     time1,a1FFFFFFF wc   ' Main counter overflow workaround
1c570     3D 37 13 32 |      if_nc  cmp     time2,a1FFFFFFF wc   ' before the time is written to the buffer, it is ANDed with $1FFFFFFF  
1c574     3D 39 13 32 |      if_nc  cmp     time3,a1FFFFFFF wc   ' Also, the interrupt procedure ands the counter  
1c578     3D 3B 13 32 |      if_nc  cmp     time4,a1FFFFFFF wc   ' So, if the counter is >=$20000000, the compare sequence still works  
1c57c     3D 3D 13 32 |      if_nc  cmp     time5,a1FFFFFFF wc   ' and when all counters are >=$20000000, all of them are SUBed at the same time 
1c580     3D 3F 13 32 |      if_nc  cmp     time6,a1FFFFFFF wc   ' including time0 main counter  
1c584     3D 41 13 32 |      if_nc  cmp     time7,a1FFFFFFF wc     
1c588     3D 43 13 32 |      if_nc  cmp     time8,a1FFFFFFF wc   ' was 7FFFFFFF - reduced to make debugging easier 
1c58c     3E 35 83 31 |      if_nc  sub     time1,a20000000
1c590     3E 37 83 31 |      if_nc  sub     time2,a20000000
1c594     3E 39 83 31 |      if_nc  sub     time3,a20000000
1c598     3E 3B 83 31 |      if_nc  sub     time4,a20000000
1c59c     3E 3D 83 31 |      if_nc  sub     time5,a20000000
1c5a0     3E 3F 83 31 |      if_nc  sub     time6,a20000000
1c5a4     3E 41 83 31 |      if_nc  sub     time7,a20000000
1c5a8     3E 43 83 31 |      if_nc  sub     time8,a20000000
1c5ac     3E 33 83 31 |      if_nc  sub     time0,a20000000
1c5b0                 | 
1c5b0                 |        
1c5b0                 |     
1c5b0     00 B2 0E F2 |             cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
1c5b4     00 7E 06 A6 |     if_e    mov     p1,#0
1c5b8     00 C4 0E F2 |             cmp     acmd2,#0 wz
1c5bc     00 80 06 A6 |     if_e    mov     p2,#0
1c5c0     00 D6 0E F2 |             cmp     acmd3,#0 wz
1c5c4     00 82 06 A6 |     if_e    mov     p3,#0
1c5c8     00 E8 0E F2 |             cmp     acmd4,#0 wz
1c5cc     00 84 06 A6 |     if_e    mov     p4,#0
1c5d0     00 FA 0E F2 |             cmp     acmd5,#0 wz
1c5d4     00 86 06 A6 |     if_e    mov     p5,#0
1c5d8     00 0C 0F F2 |             cmp     acmd6,#0 wz
1c5dc     00 88 06 A6 |     if_e    mov     p6,#0
1c5e0     00 1E 0F F2 |             cmp     acmd7,#0 wz
1c5e4     00 8A 06 A6 |     if_e    mov     p7,#0
1c5e8     00 30 0F F2 |             cmp     acmd8,#0 wz
1c5ec     00 8C 06 A6 |     if_e    mov     p8,#0
1c5f0                 |           
1c5f0     4A 8F 02 F6 |             mov     qq,tail         ' Check if the buffer is full	
1c5f4     02 8E 86 F1 |             sub     qq,#2
1c5f8     FF 8F 06 F5 |             and     qq,#511
1c5fc     49 8F 1A F2 |             cmp     qq,front wcz
1c600     24 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
1c604                 |       
1c604     50 46 07 F6 |             mov     cn,#p201           ' Find the channel to compute
1c608     9A 49 03 F6 |             mov     ct,time1        ' with the lowest next sample time
1c60c     9B 49 3B F3 |             fle     ct,time2 wcz   
1c610     67 46 07 C6 |     if_c    mov     cn,#p202 
1c614     9C 49 3B F3 |             fle     ct,time3 wcz
1c618     7E 46 07 C6 |     if_c    mov     cn,#p203     
1c61c     9D 49 3B F3 |             fle     ct,time4 wcz
1c620     95 46 07 C6 |     if_c    mov     cn,#p204
1c624     9E 49 3B F3 |             fle     ct,time5 wcz
1c628     AC 46 07 C6 |     if_c    mov     cn,#p205 
1c62c     9F 49 3B F3 |             fle     ct,time6 wcz
1c630     C3 46 07 C6 |     if_c    mov     cn,#p206
1c634     A0 49 3B F3 |             fle     ct,time7 wcz
1c638     DA 46 07 C6 |     if_c    mov     cn,#p207
1c63c     A1 49 3B F3 |             fle     ct,time8 wcz
1c640     F1 46 07 C6 |     if_c    mov     cn,#p208 
1c644                 |  
1c644     2C 46 63 FD |             jmp     cn
1c648                 |    
1c648                 | '----------------------------------------------------------------------------------
1c648                 | '------------- Compute channel samples --------------------------------------------
1c648                 | '----------------------------------------------------------------------------------
1c648                 | 	
1c648                 | ' ------------  Channel 1
1c648                 |  
1c648     9A 4B 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
1c64c     99 4B 83 F1 |             sub     dt0,time0
1c650     57 35 03 F1 |             add     time1,freq1    ' compute the next channel time	
1c654                 | 	        
1c654     58 7F 02 F1 |             add     p1,askip1      ' update the phase accumulator
1c658     54 7F 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
1c65c     54 7F 82 31 |     if_ge   sub     p1,lend1	        
1c660     53 7F 02 31 |     if_ge   add     p1,lstart1       
1c664     3F 8F 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
1c668     51 8F 02 F1 |             add     qq,sstart1
1c66c                 |             
1c66c     00 A4 0E F2 |             cmp     type1,#0 wz    ' check the sample type
1c670     47 91 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
1c674     08 90 66 50 |     if_nz   shl     spl,#8
1c678     47 91 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
1c67c                 | 
1c67c     55 91 32 FA |             scas    spl,vol1       ' apply the volume
1c680     00 90 02 F6 |             mov     spl,0-0
1c684                 | 
1c684     56 91 32 FA |             scas    spl,apan1      ' apply the pan
1c688     00 50 03 F6 |             mov     ls1,0-0
1c68c     20 00 00 FF 
1c690     00 8E 06 F6 |             mov     qq,##16384
1c694     56 8F 82 F1 |             sub     qq,apan1
1c698     47 91 32 FA |             scas    spl,qq
1c69c     00 52 03 F6 |             mov     rs1,0-0
1c6a0                 |             
1c6a0     84 02 90 FD |             jmp     #p101              
1c6a4                 | 	    	
1c6a4                 | ' ------------  Channel 2
1c6a4                 |  
1c6a4     9B 4B 03 F6 | p202        mov     dt0,time2
1c6a8     99 4B 83 F1 |             sub     dt0,time0
1c6ac     60 37 03 F1 |             add     time2,freq2  	
1c6b0                 | 	        
1c6b0     61 81 02 F1 |             add     p2,askip2
1c6b4     5D 81 1A F2 |             cmp     p2,lend2 wcz
1c6b8     5D 81 82 31 |     if_ge   sub     p2,lend2	        
1c6bc     5C 81 02 31 |     if_ge   add     p2,lstart2       
1c6c0     40 8F 02 F6 |             mov     qq,p2
1c6c4     5A 8F 02 F1 |             add     qq,sstart2
1c6c8                 | 
1c6c8     00 B6 0E F2 |             cmp     type2,#0 wz
1c6cc     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c6d0     08 90 66 50 |     if_nz   shl     spl,#8
1c6d4     47 91 E2 AA |     if_z    rdword  spl,qq
1c6d8                 | 
1c6d8     5E 91 32 FA |             scas    spl,vol2
1c6dc     00 90 02 F6 |             mov     spl,0-0
1c6e0                 |             
1c6e0     5F 91 32 FA |             scas    spl,apan2
1c6e4     00 54 03 F6 |             mov     ls2,0-0
1c6e8     20 00 00 FF 
1c6ec     00 8E 06 F6 |             mov     qq,##16384
1c6f0     5F 8F 82 F1 |             sub     qq,apan2
1c6f4     47 91 32 FA |             scas    spl,qq
1c6f8     00 56 03 F6 |             mov     rs2,0-0
1c6fc                 |             
1c6fc     28 02 90 FD |             jmp     #p101
1c700                 | 
1c700                 | ' ------------  Channel 3
1c700                 |  
1c700     9C 4B 03 F6 | p203        mov     dt0,time3
1c704     99 4B 83 F1 |             sub     dt0,time0
1c708     69 39 03 F1 |             add     time3,freq3  	
1c70c                 | 	        
1c70c     6A 83 02 F1 |             add     p3,askip3
1c710     66 83 1A F2 |             cmp     p3,lend3 wcz
1c714     66 83 82 31 |     if_ge   sub     p3,lend3	        
1c718     65 83 02 31 |     if_ge   add     p3,lstart3       
1c71c     41 8F 02 F6 |             mov     qq,p3
1c720     63 8F 02 F1 |             add     qq,sstart3
1c724                 |             
1c724     00 C8 0E F2 |             cmp     type3,#0 wz
1c728     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c72c     08 90 66 50 |     if_nz   shl     spl,#8
1c730     47 91 E2 AA |     if_z    rdword  spl,qq
1c734                 | 
1c734     67 91 32 FA |             scas    spl,vol3
1c738     00 90 02 F6 |             mov     spl,0-0
1c73c                 |     	
1c73c     68 91 32 FA |             scas    spl,apan3
1c740     00 58 03 F6 |             mov     ls3,0-0
1c744                 |             
1c744     20 00 00 FF 
1c748     00 8E 06 F6 |             mov     qq,##16384
1c74c     68 8F 82 F1 |             sub     qq,apan3
1c750     47 91 32 FA |             scas    spl,qq
1c754     00 5A 03 F6 |             mov     rs3,0-0
1c758                 | 
1c758     CC 01 90 FD |             jmp     #p101
1c75c                 |             
1c75c                 | ' ------------  Channel 4
1c75c                 |  
1c75c     9D 4B 03 F6 | p204        mov     dt0,time4
1c760     99 4B 83 F1 |             sub     dt0,time0
1c764     72 3B 03 F1 |             add     time4,freq4  	
1c768                 | 
1c768                 | 	        
1c768     73 85 02 F1 |             add     p4,askip4
1c76c     6F 85 1A F2 |             cmp     p4,lend4 wcz
1c770     6F 85 82 31 |     if_ge   sub     p4,lend4	        
1c774     6E 85 02 31 |     if_ge   add     p4,lstart4       
1c778     42 8F 02 F6 |             mov     qq,p4
1c77c     6C 8F 02 F1 |             add     qq,sstart4
1c780                 |             
1c780     00 DA 0E F2 |             cmp     type4,#0 wz
1c784     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c788     08 90 66 50 |     if_nz   shl     spl,#8
1c78c     47 91 E2 AA |     if_z    rdword  spl,qq
1c790                 | 
1c790     70 91 32 FA |             scas    spl,vol4
1c794     00 90 02 F6 |             mov     spl,0-0
1c798                 |     	
1c798     71 91 32 FA |             scas    spl,apan4
1c79c     00 5E 03 F6 |             mov     ls4,0-0
1c7a0                 |             
1c7a0     20 00 00 FF 
1c7a4     00 8E 06 F6 |             mov     qq,##16384
1c7a8     71 8F 82 F1 |             sub     qq,apan4
1c7ac     47 91 32 FA |             scas    spl,qq
1c7b0     00 5C 03 F6 |             mov     rs4,0-0
1c7b4                 | 
1c7b4     70 01 90 FD |             jmp     #p101
1c7b8                 |             
1c7b8                 | ' ------------  Channel 5
1c7b8                 |  
1c7b8     9E 4B 03 F6 | p205        mov     dt0,time5
1c7bc     99 4B 83 F1 |             sub     dt0,time0
1c7c0     7B 3D 03 F1 |             add     time5,freq5  	
1c7c4                 | 
1c7c4                 | 	        
1c7c4     7C 87 02 F1 |             add     p5,askip5
1c7c8     78 87 1A F2 |             cmp     p5,lend5 wcz
1c7cc     78 87 82 31 |     if_ge   sub     p5,lend5	        
1c7d0     77 87 02 31 |     if_ge   add     p5,lstart5       
1c7d4     43 8F 02 F6 |             mov     qq,p5
1c7d8     75 8F 02 F1 |             add     qq,sstart5
1c7dc                 |             
1c7dc     00 EC 0E F2 |             cmp     type5,#0 wz
1c7e0     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c7e4     08 90 66 50 |     if_nz   shl     spl,#8
1c7e8     47 91 E2 AA |     if_z    rdword  spl,qq
1c7ec                 | 
1c7ec     79 91 32 FA |             scas    spl,vol5
1c7f0     00 90 02 F6 |             mov     spl,0-0
1c7f4                 |     	
1c7f4     7A 91 32 FA |             scas    spl,apan5
1c7f8     00 62 03 F6 |             mov     ls5,0-0
1c7fc                 |             
1c7fc     20 00 00 FF 
1c800     00 8E 06 F6 |             mov     qq,##16384
1c804     7A 8F 82 F1 |             sub     qq,apan5
1c808     47 91 32 FA |             scas    spl,qq
1c80c     00 60 03 F6 |             mov     rs5,0-0
1c810                 | 
1c810     14 01 90 FD |             jmp     #p101
1c814                 |   
1c814                 | ' ------------  Channel 6
1c814                 |  
1c814     9F 4B 03 F6 | p206        mov     dt0,time6
1c818     99 4B 83 F1 |             sub     dt0,time0
1c81c     84 3F 03 F1 |             add     time6,freq6  	
1c820                 | 
1c820                 | 	        
1c820     85 89 02 F1 |             add     p6,askip6
1c824     81 89 1A F2 |             cmp     p6,lend6 wcz
1c828     81 89 82 31 |     if_ge   sub     p6,lend6	        
1c82c     80 89 02 31 |     if_ge   add     p6,lstart6       
1c830     44 8F 02 F6 |             mov     qq,p6
1c834     7E 8F 02 F1 |             add     qq,sstart6
1c838                 |             
1c838     00 FE 0E F2 |             cmp     type6,#0 wz
1c83c     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c840     08 90 66 50 |     if_nz   shl     spl,#8
1c844     47 91 E2 AA |     if_z    rdword  spl,qq
1c848                 | 
1c848     82 91 32 FA |             scas    spl,vol6
1c84c     00 90 02 F6 |             mov     spl,0-0
1c850                 |     	
1c850     83 91 32 FA |             scas    spl,apan6
1c854     00 66 03 F6 |             mov     ls6,0-0
1c858                 |             
1c858     20 00 00 FF 
1c85c     00 8E 06 F6 |             mov     qq,##16384
1c860     83 8F 82 F1 |             sub     qq,apan6
1c864     47 91 32 FA |             scas    spl,qq
1c868     00 64 03 F6 |             mov     rs6,0-0
1c86c                 | 
1c86c     B8 00 90 FD |             jmp     #p101
1c870                 |             
1c870                 | ' ------------  Channel 7
1c870                 |  
1c870     A0 4B 03 F6 | p207        mov     dt0,time7
1c874     99 4B 83 F1 |             sub     dt0,time0
1c878     8D 41 03 F1 |             add     time7,freq7  	
1c87c                 | 
1c87c                 | 	        
1c87c     8E 8B 02 F1 |             add     p7,askip7
1c880     8A 8B 1A F2 |             cmp     p7,lend7 wcz
1c884     8A 8B 82 31 |     if_ge   sub     p7,lend7	        
1c888     89 8B 02 31 |     if_ge   add     p7,lstart7       
1c88c     45 8F 02 F6 |             mov     qq,p7
1c890     87 8F 02 F1 |             add     qq,sstart7
1c894                 |             
1c894     00 10 0F F2 |             cmp     type7,#0 wz
1c898     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c89c     08 90 66 50 |     if_nz   shl     spl,#8
1c8a0     47 91 E2 AA |     if_z    rdword  spl,qq
1c8a4                 | 
1c8a4     8B 91 32 FA |             scas    spl,vol7
1c8a8     00 90 02 F6 |             mov     spl,0-0
1c8ac                 |     	
1c8ac     8C 91 32 FA |             scas    spl,apan7
1c8b0     00 6A 03 F6 |             mov     ls7,0-0
1c8b4                 |             
1c8b4     20 00 00 FF 
1c8b8     00 8E 06 F6 |             mov     qq,##16384
1c8bc     8C 8F 82 F1 |             sub     qq,apan7
1c8c0     47 91 32 FA |             scas    spl,qq
1c8c4     00 68 03 F6 |             mov     rs7,0-0
1c8c8                 | 
1c8c8     5C 00 90 FD |             jmp     #p101     
1c8cc                 |                    
1c8cc                 | ' ------------  Channel 8
1c8cc                 |  
1c8cc     A1 4B 03 F6 | p208        mov     dt0,time8
1c8d0     99 4B 83 F1 |             sub     dt0,time0
1c8d4     96 43 03 F1 |             add     time8,freq8  	
1c8d8                 | 
1c8d8                 | 	        
1c8d8     97 8D 02 F1 |             add     p8,askip8
1c8dc     93 8D 1A F2 |             cmp     p8,lend8 wcz
1c8e0     93 8D 82 31 |     if_ge   sub     p8,lend8	        
1c8e4     92 8D 02 31 |     if_ge   add     p8,lstart8       
1c8e8     46 8F 02 F6 |             mov     qq,p8
1c8ec     90 8F 02 F1 |             add     qq,sstart8
1c8f0                 |             
1c8f0     00 22 0F F2 |             cmp     type8,#0 wz
1c8f4     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1c8f8     08 90 66 50 |     if_nz   shl     spl,#8
1c8fc     47 91 E2 AA |     if_z    rdword  spl,qq
1c900                 | 
1c900     94 91 32 FA |             scas    spl,vol8
1c904     00 90 02 F6 |             mov     spl,0-0
1c908                 |     	
1c908     95 91 32 FA |             scas    spl,apan8
1c90c     00 6E 03 F6 |             mov     ls8,0-0
1c910                 |             
1c910     20 00 00 FF 
1c914     00 8E 06 F6 |             mov     qq,##16384
1c918     95 8F 82 F1 |             sub     qq,apan8
1c91c     47 91 32 FA |             scas    spl,qq
1c920     00 6C 03 F6 |             mov     rs8,0-0
1c924                 | 
1c924     00 00 90 FD |             jmp     #p101            
1c928                 |             
1c928                 | '------------------------ Channels end here --------------------       
1c928                 | 
1c928                 | ' Now add all channels and put the sample to the buffer    
1c928                 | 
1c928                 | 
1c928     99 45 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1c92c     02 92 86 A1 |     if_z    sub     front,#2         ' 
1c930     FF 93 06 A5 |     if_z    and     front,#511     
1c934                 |   
1c934     00 4E 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1c938     00 4C 07 F6 |             mov     ls,#0
1c93c     A9 4F 03 F1 |             add     rs,rs1
1c940     AB 4F 03 F1 |             add     rs,rs2
1c944     AD 4F 03 F1 |             add     rs,rs3
1c948     AE 4F 03 F1 |             add     rs,rs4
1c94c     B0 4F 03 F1 |             add     rs,rs5
1c950     B2 4F 03 F1 |             add     rs,rs6
1c954     B4 4F 03 F1 |             add     rs,rs7
1c958     B6 4F 03 F1 |             add     rs,rs8
1c95c                 |             
1c95c     A8 4D 03 F1 |             add     ls,ls1
1c960     AA 4D 03 F1 |             add     ls,ls2
1c964     AC 4D 03 F1 |             add     ls,ls3
1c968     AF 4D 03 F1 |             add     ls,ls4
1c96c     B1 4D 03 F1 |             add     ls,ls5
1c970     B3 4D 03 F1 |             add     ls,ls6
1c974     B5 4D 03 F1 |             add     ls,ls7
1c978     B7 4D 03 F1 |             add     ls,ls8
1c97c                 |  		
1c97c     0F 4C E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1c980     0F 4E E7 F4 |             bitnot  rs,#15		
1c984                 | 		
1c984     A6 4F 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1c988     49 4F 33 FC |             wrlut   rs,front         ' and write it to LUT
1c98c     49 91 02 F6 |             mov     spl,front        ' avoid incrementing front 1 by 1 
1c990     01 90 06 F1 |             add     spl,#1           
1c994                 | 
1c994     99 8F 02 F6 |             mov     qq,time0
1c998     3D 8F 02 F5 |             and     qq,a1fffffff
1c99c     48 8F 32 FC |             wrlut   qq,spl
1c9a0                 | 
1c9a0     01 04 DC FC |             rep     #2, #1 
1c9a4     02 92 06 F1 |             add     front,#2         ' move the front pointer
1c9a8     FF 93 06 F5 |             and     front,#511       ' and loop at #512
1c9ac     99 45 03 F6 |             mov     oldt0,time0      ' update global time
1c9b0     A5 33 03 F1 |             add     time0,dt0     
1c9b4                 |             
1c9b4                 |                
1c9b4     80 8E 66 FC |             wrlong  qq,#$80          'debug
1c9b8                 | '               wrlong time1,#$84
1c9b8                 | ''               wrlong time2,#$88
1c9b8                 | '               wrlong time3,#$8c
1c9b8                 | '               wrlong time4,#$90
1c9b8                 |                
1c9b8     6C FB 9F FD |             jmp     #loop            'loop
1c9bc                 | 
1c9bc                 | '-------------------------------------------------------------------------
1c9bc                 | '------------------ This is the end of the main loop ---------------------
1c9bc                 | '-------------------------------------------------------------------------
1c9bc                 | 
1c9bc                 | '--------------------------------------------------------------------------
1c9bc                 | '------ Interrupt service -------------------------------------------------
1c9bc                 | '------ Output the sample, get the next one if exists ---------------------
1c9bc                 | '--------------------------------------------------------------------------
1c9bc                 | 
1c9bc     0E 98 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1c9c0     0F 9A 26 FC |             wypin   rsample,#right       '4
1c9c4                 | 										
1c9c4     01 96 06 F1 |             add     counter,#1           '6     Increment the counter
1c9c8     3D 97 02 F5 |             and     counter,a1fffffff
1c9cc     50 97 1A F2 |             cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
1c9d0     F5 FF 3B 5B |     if_ne   reti1                        '10/12 If not, do nothing
1c9d4                 | 		
1c9d4     4E 9B 3A F9 |           	getword rsample,lsnext,#1    '12
1c9d8     4E 99 32 F9 |           	getword lsample,lsnext,#0    '14
1c9dc     49 95 1A F2 |             cmp     tail,front wcz       '16    If the buffer is empty, do nothing 
1c9e0     F5 FF 3B AB |             if_e    reti1                '18/20
1c9e4                 | 
1c9e4     4A 9D A2 FA |             rdlut   lsnext,tail          '21    else read the sample and its time from LUT
1c9e8     01 94 06 F1 |             add     tail, #1             '23
1c9ec     4A A1 A2 FA |             rdlut   irqtime,tail         '26    Read the time for this sample
1c9f0     01 94 06 F1 |             add     tail,#1              '28    Go to the next entry
1c9f4     FF 95 06 F5 |             and     tail,#511            '30
1c9f8     F5 FF 3B FB |             reti1                        '34 
1c9fc                 |             
1c9fc                 |          '' 3 nops left    
1c9fc                 |           
1c9fc                 | '---------------------------------------------------------------------------
1c9fc                 | '-------- End of interrupt -------------------------------------------------
1c9fc                 | '---------------------------------------------------------------------------    
1c9fc                 | 
1c9fc                 | '---------------------------------------------------------------------------
1c9fc                 | '------- Variables ---------------------------------------------------------
1c9fc                 | '---------------------------------------------------------------------------
1c9fc                 | 
1c9fc                 | ' constants
1c9fc                 | 
1c9fc     FF FF FF 1F | a1fffffff long $1fffffff
1ca00     00 00 00 20 | a20000000 long $20000000
1ca04                 | 
1ca04                 | ' phase accumulators
1ca04                 | 
1ca04     00 00 00 00 | p1          long 0
1ca08     00 00 00 00 | p2          long 0
1ca0c     00 00 00 00 | p3          long 0
1ca10     00 00 00 00 | p4          long 0
1ca14     00 00 00 00 | p5          long 0
1ca18     00 00 00 00 | p6          long 0
1ca1c     00 00 00 00 | p7          long 0
1ca20     00 00 00 00 | p8          long 0
1ca24                 | 
1ca24                 | ' temporary variables 
1ca24                 | 
1ca24     00 00 00 00 | qq          long 0
1ca28     00 00 00 00 | spl         long 0
1ca2c                 | 
1ca2c                 | ' circular buffer in LUT
1ca2c                 | 
1ca2c     00 00 00 00 | front       long 0
1ca30     00 00 00 00 | tail        long 0
1ca34                 | 
1ca34                 | ' Interrupt ISR variables
1ca34                 | 
1ca34     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
1ca38     00 00 00 00 | lsample     long 0
1ca3c     00 00 00 00 | rsample     long 0
1ca40     00 00 00 00 | lsnext      long 0
1ca44     00 00 00 00 | rsnext      long 0 
1ca48     00 00 00 00 | irqtime     long 0
1ca4c                 | 
1ca4c                 | ' Channel 1 registers. TODO - optimize the memory usage
1ca4c                 | 
1ca4c     00 00 00 00 | sstart1     long 0       ' Sample start pointer
1ca50     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
1ca54     00 00 00 00 | lstart1     long 0       ' Loop start
1ca58     02 00 00 00 | lend1       long 2       ' Loop end
1ca5c     00 00 00 00 | vol1        long 0       ' volume, 0..16384
1ca60     00 00 00 00 | apan1       long 0       ' pan, 0..16384
1ca64     65 00 00 00 | freq1       long 101     ' frequency divider
1ca68     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
1ca6c     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
1ca70                 | 
1ca70                 | ' Channel 2 registers
1ca70                 | 
1ca70     00 00 00 00 | sstart2     long 0
1ca74     00 00 00 00 | type2       long 0
1ca78     00 00 00 00 | lstart2     long 0
1ca7c     02 00 00 00 | lend2       long 2        		
1ca80     00 00 00 00 | vol2        long 0
1ca84     00 00 00 00 | apan2       long 0
1ca88     67 00 00 00 | freq2       long 103
1ca8c     02 00 00 00 | askip2      long 2
1ca90     00 00 00 00 | acmd2       long 0
1ca94                 | 
1ca94                 | ' Channel 3 registers
1ca94                 | 
1ca94     00 00 00 00 | sstart3     long 0
1ca98     00 00 00 00 | type3       long 0
1ca9c     00 00 00 00 | lstart3     long 0
1caa0     02 00 00 00 | lend3       long 2       		'
1caa4     00 00 00 00 | vol3        long 0
1caa8     00 00 00 00 | apan3       long 0
1caac     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
1cab0     02 00 00 00 | askip3      long 2
1cab4     00 00 00 00 | acmd3       long 0
1cab8                 | 
1cab8                 | ' Channel 4 registers
1cab8                 | 
1cab8     00 00 00 00 | sstart4     long 0
1cabc     00 00 00 00 | type4       long 0
1cac0     00 00 00 00 | lstart4     long 0
1cac4     02 00 00 00 | lend4       long 2       		'
1cac8     00 00 00 00 | vol4        long 0
1cacc     00 00 00 00 | apan4       long 0
1cad0     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
1cad4     02 00 00 00 | askip4      long 2
1cad8     00 00 00 00 | acmd4       long 0
1cadc                 | 
1cadc                 | ' Channel 5 registers
1cadc                 | 
1cadc     00 00 00 00 | sstart5     long 0
1cae0     00 00 00 00 | type5       long 0
1cae4     00 00 00 00 | lstart5     long 0
1cae8     02 00 00 00 | lend5       long 2       		'
1caec     00 00 00 00 | vol5        long 0
1caf0     00 00 00 00 | apan5       long 0
1caf4     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
1caf8     02 00 00 00 | askip5      long 2
1cafc     00 00 00 00 | acmd5       long 0
1cb00                 | 
1cb00                 | ' Channel 6 registers
1cb00                 | 
1cb00     00 00 00 00 | sstart6     long 0
1cb04     00 00 00 00 | type6       long 0
1cb08     00 00 00 00 | lstart6     long 0
1cb0c     02 00 00 00 | lend6       long 2       		'
1cb10     00 00 00 00 | vol6        long 0
1cb14     00 00 00 00 | apan6       long 0
1cb18     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
1cb1c     02 00 00 00 | askip6      long 2
1cb20     00 00 00 00 | acmd6       long 0
1cb24                 | 
1cb24                 | ' Channel 7 registers
1cb24                 | 
1cb24     00 00 00 00 | sstart7     long 0
1cb28     00 00 00 00 | type7       long 0
1cb2c     00 00 00 00 | lstart7     long 0
1cb30     02 00 00 00 | lend7       long 2       		'
1cb34     00 00 00 00 | vol7        long 0
1cb38     00 00 00 00 | apan7       long 0
1cb3c     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
1cb40     02 00 00 00 | askip7      long 2
1cb44     00 00 00 00 | acmd7       long 0
1cb48                 | 
1cb48                 | ' Channel 8 registers
1cb48                 | 
1cb48     00 00 00 00 | sstart8     long 0
1cb4c     00 00 00 00 | type8       long 0
1cb50     00 00 00 00 | lstart8     long 0
1cb54     02 00 00 00 | lend8       long 2       		'
1cb58     00 00 00 00 | vol8        long 0
1cb5c     00 00 00 00 | apan8       long 0
1cb60     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
1cb64     02 00 00 00 | askip8      long 2
1cb68     00 00 00 00 | acmd8       long 0
1cb6c                 | 
1cb6c                 | ' Time variables
1cb6c                 | 
1cb6c     00 00 00 00 | time0       long 0    ' Global sample computing time
1cb70     01 00 00 00 | time1       long 1    ' Local channels time
1cb74     02 00 00 00 | time2       long 2
1cb78     03 00 00 00 | time3       long 3
1cb7c     04 00 00 00 | time4       long 4
1cb80     05 00 00 00 | time5       long 5
1cb84     06 00 00 00 | time6       long 6
1cb88     07 00 00 00 | time7       long 7
1cb8c     08 00 00 00 | time8       long 8
1cb90                 | 
1cb90     00 00 00 00 | oldt0       long 0    'Temporary time variables
1cb94     00 00 00 00 | cn          long 0
1cb98     00 00 00 00 | ct          long 0
1cb9c     00 00 00 00 | dt0         long 0
1cba0                 | 
1cba0                 | ' Samples
1cba0                 | 
1cba0     00 00 00 00 | ls          long 0    ' Global sample variable
1cba4     00 00 00 00 | rs          long 0
1cba8                 | 
1cba8     00 00 00 00 | ls1         long 0    ' Channel samples
1cbac     00 00 00 00 | rs1         long 0
1cbb0     00 00 00 00 | ls2         long 0
1cbb4     00 00 00 00 | rs2         long 0
1cbb8     00 00 00 00 | ls3         long 0
1cbbc     00 00 00 00 | rs3         long 0
1cbc0     00 00 00 00 | rs4         long 0
1cbc4     00 00 00 00 | ls4         long 0
1cbc8     00 00 00 00 | rs5         long 0
1cbcc     00 00 00 00 | ls5         long 0
1cbd0     00 00 00 00 | rs6         long 0
1cbd4     00 00 00 00 | ls6         long 0
1cbd8     00 00 00 00 | rs7         long 0
1cbdc     00 00 00 00 | ls7         long 0
1cbe0     00 00 00 00 | rs8         long 0
1cbe4     00 00 00 00 | ls8         long 0
1cbe8                 | 
1cbe8     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1cbec                 | 
1cbec     00 00 00 00 
1cbf0     00 00 00 00 | null  			long 	0,0           ' for channel reset
1cbf4                 | 	alignl
1cbf4                 | __system__dat_
1cbf4     00 00 00 00 
1cbf8     00 00 00 00 | 	byte	$00[8]
1cbfc     03 00 00 00 
1cc00     00 00 00 00 
1cc04     00 00 00 00 
1cc08     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cc0c     00 00 00 00 
1cc10     00 00 00 00 
1cc14     00 00 00 00 | 	byte	$00[12]
1cc18     05 00 00 00 
1cc1c     00 00 00 00 
1cc20     00 00 00 00 
1cc24     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cc28     F0 CD 01 00 | 	long	@@@__system__dat_ + 508
1cc2c     F8 CD 01 00 | 	long	@@@__system__dat_ + 516
1cc30     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc34     00 CE 01 00 | 	long	@@@__system__dat_ + 524
1cc38     08 CE 01 00 | 	long	@@@__system__dat_ + 532
1cc3c     00 00 00 00 
1cc40     00 00 00 00 | 	byte	$00[8]
1cc44     01 00 00 00 
1cc48     06 00 00 00 
1cc4c     00 00 00 00 
1cc50     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cc54     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc58     10 CE 01 00 | 	long	@@@__system__dat_ + 540
1cc5c     18 CE 01 00 | 	long	@@@__system__dat_ + 548
1cc60     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc64     20 CE 01 00 | 	long	@@@__system__dat_ + 556
1cc68     28 CE 01 00 | 	long	@@@__system__dat_ + 564
1cc6c     00 00 00 00 
1cc70     00 00 00 00 | 	byte	$00[8]
1cc74     01 00 00 00 
1cc78     06 00 00 00 
1cc7c     00 00 00 00 
1cc80     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cc84     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc88     30 CE 01 00 | 	long	@@@__system__dat_ + 572
1cc8c     38 CE 01 00 | 	long	@@@__system__dat_ + 580
1cc90     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc94     40 CE 01 00 | 	long	@@@__system__dat_ + 588
1cc98     48 CE 01 00 | 	long	@@@__system__dat_ + 596
1cc9c     00 00 00 00 
      ...             
1cdec     00 00 00 00 
1cdf0     00 00 00 00 | 	byte	$00[344]
1cdf4     5C 60 00 00 | 	long	@@@__system___tx
1cdf8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cdfc     A4 60 00 00 | 	long	@@@__system___rx
1ce00     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce04     8C 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
1ce08     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce0c     04 7B 00 00 | 	long	@@@__system____dummy_flush_0175
1ce10     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce14     5C 60 00 00 | 	long	@@@__system___tx
1ce18     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce1c     A4 60 00 00 | 	long	@@@__system___rx
1ce20     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce24     8C 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
1ce28     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce2c     04 7B 00 00 | 	long	@@@__system____dummy_flush_0175
1ce30     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce34     5C 60 00 00 | 	long	@@@__system___tx
1ce38     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce3c     A4 60 00 00 | 	long	@@@__system___rx
1ce40     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce44     8C 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
1ce48     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce4c     04 7B 00 00 | 	long	@@@__system____dummy_flush_0175
1ce50     00 00 00 00 | 	byte	$00, $00, $00, $00
1ce54                 | __heap_base
1ce54     00 00 00 00 
      ...             
1de54     00 00 00 00 
1de58     00 00 00 00 | 	long	0[1026]
1de5c                 | objmem
1de5c     00 00 00 00 | 	long	0[1]
1de60 118             | 	org	COG_BSS_START
1de60 118             | _var01
1de60 118             | 	res	1
1de60 119             | _var02
1de60 119             | 	res	1
1de60 11a             | _var03
1de60 11a             | 	res	1
1de60 11b             | _var04
1de60 11b             | 	res	1
1de60 11c             | _var05
1de60 11c             | 	res	1
1de60 11d             | _var06
1de60 11d             | 	res	1
1de60 11e             | _var07
1de60 11e             | 	res	1
1de60 11f             | _var08
1de60 11f             | 	res	1
1de60 120             | _var09
1de60 120             | 	res	1
1de60 121             | _var10
1de60 121             | 	res	1
1de60 122             | _var11
1de60 122             | 	res	1
1de60 123             | _var12
1de60 123             | 	res	1
1de60 124             | _var13
1de60 124             | 	res	1
1de60 125             | _var14
1de60 125             | 	res	1
1de60 126             | _var15
1de60 126             | 	res	1
1de60 127             | _var16
1de60 127             | 	res	1
1de60 128             | _var17
1de60 128             | 	res	1
1de60 129             | _var18
1de60 129             | 	res	1
1de60 12a             | _var19
1de60 12a             | 	res	1
1de60 12b             | _var20
1de60 12b             | 	res	1
1de60 12c             | _var21
1de60 12c             | 	res	1
1de60 12d             | _var22
1de60 12d             | 	res	1
1de60 12e             | arg01
1de60 12e             | 	res	1
1de60 12f             | arg02
1de60 12f             | 	res	1
1de60 130             | arg03
1de60 130             | 	res	1
1de60 131             | arg04
1de60 131             | 	res	1
1de60 132             | arg05
1de60 132             | 	res	1
1de60 133             | arg06
1de60 133             | 	res	1
1de60 134             | arg07
1de60 134             | 	res	1
1de60 135             | local01
1de60 135             | 	res	1
1de60 136             | local02
1de60 136             | 	res	1
1de60 137             | local03
1de60 137             | 	res	1
1de60 138             | local04
1de60 138             | 	res	1
1de60 139             | local05
1de60 139             | 	res	1
1de60 13a             | local06
1de60 13a             | 	res	1
1de60 13b             | local07
1de60 13b             | 	res	1
1de60 13c             | local08
1de60 13c             | 	res	1
1de60 13d             | local09
1de60 13d             | 	res	1
1de60 13e             | local10
1de60 13e             | 	res	1
1de60 13f             | local11
1de60 13f             | 	res	1
1de60 140             | local12
1de60 140             | 	res	1
1de60 141             | local13
1de60 141             | 	res	1
1de60 142             | local14
1de60 142             | 	res	1
1de60 143             | local15
1de60 143             | 	res	1
1de60 144             | local16
1de60 144             | 	res	1
1de60 145             | local17
1de60 145             | 	res	1
1de60 146             | local18
1de60 146             | 	res	1
1de60 147             | local19
1de60 147             | 	res	1
1de60 148             | local20
1de60 148             | 	res	1
1de60 149             | local21
1de60 149             | 	res	1
1de60 14a             | local22
1de60 14a             | 	res	1
1de60 14b             | local23
1de60 14b             | 	res	1
1de60 14c             | local24
1de60 14c             | 	res	1
1de60 14d             | local25
1de60 14d             | 	res	1
1de60 14e             | local26
1de60 14e             | 	res	1
1de60 14f             | local27
1de60 14f             | 	res	1
1de60 150             | local28
1de60 150             | 	res	1
1de60 151             | local29
1de60 151             | 	res	1
1de60 152             | local30
1de60 152             | 	res	1
1de60 153             | local31
1de60 153             | 	res	1
1de60 154             | local32
1de60 154             | 	res	1
1de60 155             | local33
1de60 155             | 	res	1
1de60 156             | local34
1de60 156             | 	res	1
1de60 157             | local35
1de60 157             | 	res	1
1de60 158             | local36
1de60 158             | 	res	1
1de60 159             | local37
1de60 159             | 	res	1
1de60 15a             | local38
1de60 15a             | 	res	1
1de60 15b             | local39
1de60 15b             | 	res	1
1de60 15c             | local40
1de60 15c             | 	res	1
1de60 15d             | local41
1de60 15d             | 	res	1
1de60 15e             | local42
1de60 15e             | 	res	1
1de60 15f             | local43
1de60 15f             | 	res	1
1de60 160             | local44
1de60 160             | 	res	1
1de60 161             | local45
1de60 161             | 	res	1
1de60 162             | local46
1de60 162             | 	res	1
1de60 163             | local47
1de60 163             | 	res	1
1de60 164             | local48
1de60 164             | 	res	1
1de60 165             | local49
1de60 165             | 	res	1
1de60 166             | local50
1de60 166             | 	res	1
1de60 167             | local51
1de60 167             | 	res	1
1de60 168             | local52
1de60 168             | 	res	1
1de60 169             | local53
1de60 169             | 	res	1
1de60 16a             | local54
1de60 16a             | 	res	1
1de60 16b             | local55
1de60 16b             | 	res	1
1de60 16c             | local56
1de60 16c             | 	res	1
1de60 16d             | local57
1de60 16d             | 	res	1
1de60 16e             | local58
1de60 16e             | 	res	1
1de60 16f             | local59
1de60 16f             | 	res	1
1de60 170             | local60
1de60 170             | 	res	1
1de60 171             | local61
1de60 171             | 	res	1
1de60 172             | local62
1de60 172             | 	res	1
1de60 173             | local63
1de60 173             | 	res	1
1de60 174             | local64
1de60 174             | 	res	1
1de60 175             | local65
1de60 175             | 	res	1
1de60 176             | local66
1de60 176             | 	res	1
1de60 177             | local67
1de60 177             | 	res	1
1de60 178             | local68
1de60 178             | 	res	1
1de60 179             | local69
1de60 179             | 	res	1
1de60 17a             | local70
1de60 17a             | 	res	1
1de60 17b             | local71
1de60 17b             | 	res	1
1de60 17c             | local72
1de60 17c             | 	res	1
1de60 17d             | local73
1de60 17d             | 	res	1
1de60 17e             | local74
1de60 17e             | 	res	1
1de60 17f             | local75
1de60 17f             | 	res	1
1de60 180             | local76
1de60 180             | 	res	1
1de60 181             | local77
1de60 181             | 	res	1
1de60 182             | local78
1de60 182             | 	res	1
1de60 183             | local79
1de60 183             | 	res	1
1de60 184             | local80
1de60 184             | 	res	1
1de60 185             | muldiva_
1de60 185             | 	res	1
1de60 186             | muldivb_
1de60 186             | 	res	1
1de60 187             | 	fit	480
1de60 187             | 
