00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/testrpi.p2asm"
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' '_clkfreq        = 354_689_500   '200x Atari 8-bit PAL,  50x Amiga PAL
00000                 | ' _clkfreq       = 357_954_500   '200x Atari 8-bit NTSC, 50x Amiga NTSC
00000                 | 	_clkfreq = 357954500
00000                 | ' rxpin           = 32
00000                 | 	rxpin = 32
00000                 | ' txpin           = 33
00000                 | 	txpin = 33
00000                 | ' baudrate        = 1920000
00000                 | 	baudrate = 1920000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 357958951
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c36cfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 C2 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DD F0 03 F6 | 	mov	ptra, objptr
00410 003 19 00 00 FF 
00414 004 80 F0 07 F1 | 	add	ptra, ##12928
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 B6 E1 80 FF 
00428 009 00 F0 65 FD | 	hubset	##29584632
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c B6 E1 00 FF 
00438 00d FB EC 07 F6 | 	mov	pa, ##29584635
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 02 AB 8A FF 
00448 011 14 4E 6E FC | 	wrlong	##357958951, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 07 A0 FD | 	call	#_start
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 CE 61 FD | 	cogid	arg01
00614 084 03 CE 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 BB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 C3 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 CF 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 D1 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 D3 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 D5 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D C2 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 D2 55 F0 |         shr	arg03, #1 wc
00688 0a1 E7 D0 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 CE 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 D0 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 D2 55 F0 |         shr	arg03, #1 wc
00698 0a5 E7 D0 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 CE 05 C1 |  if_c   add	arg01, #2
006a0 0a7 E8 D0 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 E7 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 D2 0D F2 |         cmp	arg03, #0 wz
006ac 0aa E9 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 D0 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 D7 65 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 D7 05 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 09 11 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 12 62 FD |        getqx   muldivb_
00740 0cf 19 10 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 08 11 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 09 13 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 08 11 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 09 13 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | entryptr__
0076c 0da 04 04 00 00 | 	long	@entry
00770 0db             | itmp1_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | itmp2_
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | objptr
00778 0dd 70 38 00 00 | 	long	@objmem
0077c 0de             | ptr__Hn007_20210302_dat__
0077c 0de 40 22 00 00 | 	long	@_Hn007_20210302_dat_
00780 0df             | ptr___system__dat__
00780 0df 58 38 00 00 | 	long	@__system__dat_
00784 0e0             | ptr__serialcog_
00784 0e0 8C 14 00 00 | 	long	@_serialcog
00788 0e1             | result1
00788 0e1 00 00 00 00 | 	long	0
0078c 0e2             | COG_BSS_START
0078c 0e2             | 	fit	480
0078c                 | 	orgh
0078c                 | hubentry
0078c                 | 
0078c                 | ' 
0078c                 | ' pub start(mode)   |iii,caps
0078c                 | _start
0078c     1D 5A 05 F6 | 	mov	COUNT_, #29
00790     B0 00 A0 FD | 	call	#pushregs_
00794                 | ' 
00794                 | ' mode :=0
00794     00 D6 05 F6 | 	mov	local01, #0
00798                 | ' caps:=0
00798     00 D8 05 F6 | 	mov	local02, #0
0079c                 | ' pinl(31)
0079c     58 3E 64 FD | 	drvl	#31
007a0                 | ' waitms(100)
007a0     64 CE 05 F6 | 	mov	arg01, #100
007a4     F4 18 B0 FD | 	call	#__system___waitms
007a8                 | ' iii:=0
007a8                 | ' vgacog:=v.start(mode)
007a8     00 CE 05 F6 | 	mov	arg01, #0
007ac     01 00 00 FF 
007b0     58 BA 05 F1 | 	add	objptr, ##600
007b4     DD DA 01 F6 | 	mov	local03, objptr
007b8                 | ' 
007b8                 | ' ' mode=0 - start at PAL timings, 624 lines
007b8                 | ' ' mode=256 - start at NTSC timings, 524 lines
007b8                 | ' 
007b8                 | ' '**********************************************************************************
007b8                 | ' '
007b8                 | ' '           Starts the driver
007b8                 | ' '
007b8                 | ' '**********************************************************************************
007b8                 | ' 
007b8                 | ' ' initialize pointers
007b8                 | ' 
007b8                 | ' border_ptr:=@bordercolor
007b8     20 BA 85 F1 | 	sub	objptr, #32
007bc     DD DA 61 FC | 	wrlong	local03, objptr
007c0                 | ' font_ptr:=@st_font
007c0     04 BA 85 F1 | 	sub	objptr, #4
007c4     DD BC 61 FC | 	wrlong	ptr__Hn007_20210302_dat__, objptr
007c8     A4 BA 05 F1 | 	add	objptr, #164
007cc     DD DC 01 F6 | 	mov	local04, objptr
007d0                 | ' buf_ptr:=@buf
007d0     A8 BA 85 F1 | 	sub	objptr, #168
007d4     DD DC 61 FC | 	wrlong	local04, objptr
007d8     17 00 00 FF 
007dc     A4 BB 05 F1 | 	add	objptr, ##12196
007e0     DD DE 01 F6 | 	mov	local05, objptr
007e4                 | ' vblank_ptr:=@vblank
007e4     17 00 00 FF 
007e8     98 BB 85 F1 | 	sub	objptr, ##12184
007ec     DD DE 61 FC | 	wrlong	local05, objptr
007f0     17 00 00 FF 
007f4     7C BB 05 F1 | 	add	objptr, ##12156
007f8     DD E0 01 F6 | 	mov	local06, objptr
007fc                 | ' cursor_ptr:=@cursor_x
007fc     17 00 00 FF 
00800     78 BB 85 F1 | 	sub	objptr, ##12152
00804     DD E0 61 FC | 	wrlong	local06, objptr
00808     17 00 00 FF 
0080c     A4 BB 05 F1 | 	add	objptr, ##12196
00810     DD E2 01 F6 | 	mov	local07, objptr
00814                 | ' mode_ptr:=@timings
00814     17 00 00 FF 
00818     A0 BB 85 F1 | 	sub	objptr, ##12192
0081c     DD E2 61 FC | 	wrlong	local07, objptr
00820     08 00 00 FF 
00824     00 BC 05 F1 | 	add	ptr__Hn007_20210302_dat__, ##4096
00828                 | ' palette_ptr:=@ataripalette
00828     04 BA 05 F1 | 	add	objptr, #4
0082c     DD BC 61 FC | 	wrlong	ptr__Hn007_20210302_dat__, objptr
00830     17 00 00 FF 
00834     C4 BB 05 F1 | 	add	objptr, ##12228
00838     DD E4 01 F6 | 	mov	local08, objptr
0083c                 | ' command_ptr:=@cmd1
0083c     17 00 00 FF 
00840     C0 BB 85 F1 | 	sub	objptr, ##12224
00844     DD E4 61 FC | 	wrlong	local08, objptr
00848     17 00 00 FF 
0084c     C8 BB 05 F1 | 	add	objptr, ##12232
00850     DD E6 01 F6 | 	mov	local09, objptr
00854                 | ' fontnum_ptr:=@fontnum
00854     17 00 00 FF 
00858     C4 BB 85 F1 | 	sub	objptr, ##12228
0085c     DD E6 61 FC | 	wrlong	local09, objptr
00860                 | ' 
00860                 | ' fontnum:=2048  ' ST type font
00860     17 00 00 FF 
00864     C4 BB 05 F1 | 	add	objptr, ##12228
00868     04 00 80 FF 
0086c     DD 00 68 FC | 	wrlong	##2048, objptr
00870                 | ' 
00870                 | ' ' initialize a cursor
00870                 | ' 
00870                 | ' cursor_x:=0
00870     5C BA 85 F1 | 	sub	objptr, #92
00874     DD 00 48 FC | 	wrbyte	#0, objptr
00878                 | ' cursor_y:=0
00878     01 BA 05 F1 | 	add	objptr, #1
0087c     DD 00 48 FC | 	wrbyte	#0, objptr
00880                 | ' cursor_sh:=14
00880     01 BA 05 F1 | 	add	objptr, #1
00884     DD 1C 48 FC | 	wrbyte	#14, objptr
00888                 | ' 
00888                 | ' ' set 16 VGA DOS like colors
00888                 | ' 
00888                 | ' colors[0] := c_black
00888     0A BA 05 F1 | 	add	objptr, #10
0088c     DD 00 48 FC | 	wrbyte	#0, objptr
00890                 | ' colors[1] := c_blue
00890     01 BA 05 F1 | 	add	objptr, #1
00894     DD EA 48 FC | 	wrbyte	#117, objptr
00898                 | ' colors[2] := c_green
00898     01 BA 05 F1 | 	add	objptr, #1
0089c     DD 8E 49 FC | 	wrbyte	#199, objptr
008a0                 | ' colors[3] := c_cyan
008a0     01 BA 05 F1 | 	add	objptr, #1
008a4     DD 2E 49 FC | 	wrbyte	#151, objptr
008a8                 | ' colors[4] := c_red
008a8     01 BA 05 F1 | 	add	objptr, #1
008ac     DD 4E 48 FC | 	wrbyte	#39, objptr
008b0                 | ' colors[5] := c_magenta
008b0     01 BA 05 F1 | 	add	objptr, #1
008b4     DD 8E 48 FC | 	wrbyte	#71, objptr
008b8                 | ' colors[6] := c_brown
008b8     01 BA 05 F1 | 	add	objptr, #1
008bc     DD EC 49 FC | 	wrbyte	#246, objptr
008c0                 | ' colors[7] := c_lightgray
008c0     01 BA 05 F1 | 	add	objptr, #1
008c4     DD 14 48 FC | 	wrbyte	#10, objptr
008c8                 | ' colors[8] := c_darkgray
008c8     01 BA 05 F1 | 	add	objptr, #1
008cc     DD 0A 48 FC | 	wrbyte	#5, objptr
008d0                 | ' colors[9] := c_lightblue
008d0     01 BA 05 F1 | 	add	objptr, #1
008d4     DD F6 48 FC | 	wrbyte	#123, objptr
008d8                 | ' colors[$A]:= c_lightgreen
008d8     01 BA 05 F1 | 	add	objptr, #1
008dc     DD 96 49 FC | 	wrbyte	#203, objptr
008e0                 | ' colors[$B]:= c_lightcyan
008e0     01 BA 05 F1 | 	add	objptr, #1
008e4     DD 36 49 FC | 	wrbyte	#155, objptr
008e8                 | ' colors[$C]:= c_lightred
008e8     01 BA 05 F1 | 	add	objptr, #1
008ec     DD 56 48 FC | 	wrbyte	#43, objptr
008f0                 | ' colors[$D]:= c_lightmagenta
008f0     01 BA 05 F1 | 	add	objptr, #1
008f4     DD 96 48 FC | 	wrbyte	#75, objptr
008f8                 | ' colors[$E]:= c_yellow
008f8     01 BA 05 F1 | 	add	objptr, #1
008fc     DD D4 49 FC | 	wrbyte	#234, objptr
00900                 | ' colors[$F]:= c_white
00900     01 BA 05 F1 | 	add	objptr, #1
00904     DD 1E 48 FC | 	wrbyte	#15, objptr
00908     17 00 00 FF 
0090c     A3 BB 85 F1 | 	sub	objptr, ##12195
00910                 | ' 
00910                 | ' ' set timings
00910                 | ' ' We can have 1140,1026 or 912 pixes per line
00910                 | ' 
00910                 | ' setmode(mode)
00910     08 00 00 FF 
00914     00 BC 85 F1 | 	sub	ptr__Hn007_20210302_dat__, ##4096
00918     E0 12 B0 FD | 	call	#_Hn007_20210302_setmode
0091c                 | ' 
0091c                 | ' 
0091c                 | ' 
0091c                 | '   {{
0091c                 | '     }}
0091c                 | ' 
0091c                 | ' cmd1:=257 ' set idle
0091c     17 00 00 FF 
00920     DC BB 05 F1 | 	add	objptr, ##12252
00924     DD 02 6A FC | 	wrlong	#257, objptr
00928     17 00 00 FF 
0092c     DC BB 85 F1 | 	sub	objptr, ##12252
00930                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00930     0A 00 00 FF 
00934     00 BC 05 F1 | 	add	ptr__Hn007_20210302_dat__, ##5120
00938     DE D0 01 F6 | 	mov	arg02, ptr__Hn007_20210302_dat__
0093c     0A 00 00 FF 
00940     00 BC 85 F1 | 	sub	ptr__Hn007_20210302_dat__, ##5120
00944     DD D2 01 F6 | 	mov	arg03, objptr
00948     10 CE 05 F6 | 	mov	arg01, #16
0094c     28 D2 61 FD | 	setq	arg03
00950     E8 CE F1 FC | 	coginit	arg01, arg02 wc
00954     01 CE 65 C6 |  if_b	neg	arg01, #1
00958     E7 C2 01 F6 | 	mov	result1, arg01
0095c     E1 E8 01 F6 | 	mov	local10, result1
00960     24 BA 05 F1 | 	add	objptr, #36
00964     DD E8 61 FC | 	wrlong	local10, objptr
00968     24 BA 85 F1 | 	sub	objptr, #36
0096c                 | ' waitms(20)
0096c     14 CE 05 F6 | 	mov	arg01, #20
00970     28 17 B0 FD | 	call	#__system___waitms
00974                 | ' cls(c_green,c_black)
00974     C7 CE 05 F6 | 	mov	arg01, #199
00978     00 D0 05 F6 | 	mov	arg02, #0
0097c     50 10 B0 FD | 	call	#_Hn007_20210302_cls
00980                 | ' setwritecolors(c_green,c_black)
00980                 | ' 
00980                 | ' ''---------- Set colors for write and writeln
00980                 | ' 
00980                 | ' write_color:=ff
00980     17 00 00 FF 
00984     8C BB 05 F1 | 	add	objptr, ##12172
00988     DD 8E 69 FC | 	wrlong	#199, objptr
0098c                 | ' write_background:=bb
0098c     04 BA 05 F1 | 	add	objptr, #4
00990     DD 00 68 FC | 	wrlong	#0, objptr
00994                 | ' 
00994                 | ' return cog
00994     17 00 00 FF 
00998     6C BB 85 F1 | 	sub	objptr, ##12140
0099c     DD C2 01 FB | 	rdlong	result1, objptr
009a0     01 00 00 FF 
009a4     54 BA 85 F1 | 	sub	objptr, ##596
009a8     DD C2 61 FC | 	wrlong	result1, objptr
009ac                 | ' v.cls(154,147)
009ac     9A CE 05 F6 | 	mov	arg01, #154
009b0     93 D0 05 F6 | 	mov	arg02, #147
009b4     01 00 00 FF 
009b8     30 BA 05 F1 | 	add	objptr, ##560
009bc     10 10 B0 FD | 	call	#_Hn007_20210302_cls
009c0                 | ' v.setbordercolors(0,0,0)
009c0     00 CE 05 F6 | 	mov	arg01, #0
009c4                 | ' 
009c4                 | ' ''---------- Set border color for all screen - rgb
009c4                 | ' 
009c4                 | ' color:=r<<16+g<<8+b
009c4     28 BA 05 F1 | 	add	objptr, #40
009c8     DD EA 01 F6 | 	mov	local11, objptr
009cc     28 BA 85 F1 | 	sub	objptr, #40
009d0     38 F6 9F FE | 	loc	pa,	#(@LR__0003-@LR__0001)
009d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
009d8                 | LR__0001
009d8     20 04 DC FC | 	rep	@LR__0004, #32
009dc                 | LR__0002
009dc                 | '   bordercolor[i]:=color
009dc     F5 CE 61 FC | 	wrlong	arg01, local11
009e0     04 EA 05 F1 | 	add	local11, #4
009e4                 | LR__0003
009e4                 | LR__0004
009e4     01 00 00 FF 
009e8     30 BA 85 F1 | 	sub	objptr, ##560
009ec                 | ' serial_start(rxpin, txpin, baudrate)
009ec     20 CE 05 F6 | 	mov	arg01, #32
009f0     21 D0 05 F6 | 	mov	arg02, #33
009f4     A6 0E 00 FF 
009f8     00 D2 05 F6 | 	mov	arg03, ##1920000
009fc     CC 0B B0 FD | 	call	#_serial_start
00a00                 | ' midi_start(9,8)
00a00     09 CE 05 F6 | 	mov	arg01, #9
00a04     08 D0 05 F6 | 	mov	arg02, #8
00a08     48 0C B0 FD | 	call	#_midi_start
00a0c                 | ' pinwrite(14,0)
00a0c     00 D0 05 F6 | 	mov	arg02, #0
00a10     01 D0 D5 F7 | 	test	arg02, #1 wc
00a14     5A 1C 64 FD | 	drvc	#14
00a18                 | ' pinwrite(15,0)
00a18     01 D0 D5 F7 | 	test	arg02, #1 wc
00a1c     5A 1E 64 FD | 	drvc	#15
00a20                 | ' 
00a20                 | ' cogspin(16,serialcog(),@serialstack)
00a20     DD EC 01 F6 | 	mov	local12, objptr
00a24     20 BB 05 F1 | 	add	objptr, #288
00a28     DD EE 01 F6 | 	mov	local13, objptr
00a2c     F7 EC 61 FC | 	wrlong	local12, local13
00a30     04 EE 05 F1 | 	add	local13, #4
00a34     F7 C0 61 FC | 	wrlong	ptr__serialcog_, local13
00a38     DA F0 01 F6 | 	mov	local14, entryptr__
00a3c     DD F2 01 F6 | 	mov	local15, objptr
00a40     10 CE 05 F6 | 	mov	arg01, #16
00a44     F9 D2 01 F6 | 	mov	arg03, local15
00a48     28 D2 61 FD | 	setq	arg03
00a4c     F8 CE F1 FC | 	coginit	arg01, local14 wc
00a50     01 CE 65 C6 |  if_b	neg	arg01, #1
00a54     E7 C2 01 F6 | 	mov	result1, arg01
00a58     E1 F4 01 F6 | 	mov	local16, result1
00a5c                 | ' v.setcursorshape(0)
00a5c                 | ' 
00a5c                 | ' ''---------- Define a cursor shape (0-full..15-line)
00a5c                 | ' 
00a5c                 | ' cursor_sh:=shape
00a5c     18 00 00 FF 
00a60     9A BA 05 F1 | 	add	objptr, ##12442
00a64     DD 00 48 FC | 	wrbyte	#0, objptr
00a68                 | ' v.setwritecolors(154,147)
00a68     93 D0 05 F6 | 	mov	arg02, #147
00a6c                 | ' 
00a6c                 | ' ''---------- Set colors for write and writeln
00a6c                 | ' 
00a6c                 | ' write_color:=ff
00a6c     02 BA 05 F1 | 	add	objptr, #2
00a70     DD 34 69 FC | 	wrlong	#154, objptr
00a74                 | ' write_background:=bb
00a74     04 BA 05 F1 | 	add	objptr, #4
00a78     DD 26 69 FC | 	wrlong	#147, objptr
00a7c     17 00 00 FF 
00a80     90 BB 85 F1 | 	sub	objptr, ##12176
00a84                 | ' v.writeln(string(" "))
00a84     10 00 00 FF 
00a88     18 CF 05 F6 | 	mov	arg01, ##@LR__0136
00a8c     E0 0E B0 FD | 	call	#_Hn007_20210302_writeln
00a90                 | ' v.writeln(string("  P2 Retromachine v. 0.00"))
00a90     10 00 00 FF 
00a94     1A CF 05 F6 | 	mov	arg01, ##@LR__0137
00a98     D4 0E B0 FD | 	call	#_Hn007_20210302_writeln
00a9c                 | ' v.writeln(string(" "))
00a9c     10 00 00 FF 
00aa0     34 CF 05 F6 | 	mov	arg01, ##@LR__0138
00aa4     C8 0E B0 FD | 	call	#_Hn007_20210302_writeln
00aa8                 | ' v.writeln(string("  Ready"))
00aa8     10 00 00 FF 
00aac     36 CF 05 F6 | 	mov	arg01, ##@LR__0139
00ab0     BC 0E B0 FD | 	call	#_Hn007_20210302_writeln
00ab4                 | ' v.writeln(string(" "))
00ab4     10 00 00 FF 
00ab8     3E CF 05 F6 | 	mov	arg01, ##@LR__0140
00abc     B0 0E B0 FD | 	call	#_Hn007_20210302_writeln
00ac0                 | ' v.write(string("  "))
00ac0     10 00 00 FF 
00ac4     40 CF 05 F6 | 	mov	arg01, ##@LR__0141
00ac8     00 0D B0 FD | 	call	#_Hn007_20210302_write
00acc     01 00 00 FF 
00ad0     30 BA 85 F1 | 	sub	objptr, ##560
00ad4                 | ' 
00ad4                 | ' iii:=fileopen(string("C:\kernel.img"))
00ad4     10 00 00 FF 
00ad8     43 CF 05 F6 | 	mov	arg01, ##@LR__0142
00adc                 | ' 
00adc                 | ' q:=strsize(filename)
00adc     E7 F6 01 F6 | 	mov	local17, arg01
00ae0     00 F8 05 F6 | 	mov	local18, #0
00ae4     28 F5 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00ae8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00aec                 | LR__0005
00aec     E7 FA C9 FA | 	rdbyte	local19, arg01 wz
00af0     01 F8 05 51 |  if_ne	add	local18, #1
00af4     01 CE 05 51 |  if_ne	add	arg01, #1
00af8     F0 FF 9F 5D |  if_ne	jmp	#LR__0005
00afc                 | LR__0006
00afc     FC C2 01 F6 | 	mov	result1, local18
00b00     E1 FC 01 F6 | 	mov	local20, result1
00b04                 | ' tx($40)
00b04     40 CE 05 F6 | 	mov	arg01, #64
00b08     D4 0B B0 FD | 	call	#_tx
00b0c                 | ' repeat i from 0 to q-1
00b0c     00 FE 05 F6 | 	mov	local21, #0
00b10     FE 00 02 F6 | 	mov	local22, local20
00b14     01 00 86 F1 | 	sub	local22, #1
00b18     00 00 5E F2 | 	cmps	local22, #0 wcz
00b1c     01 02 06 16 |  if_a	mov	local23, #1
00b20     01 02 66 E6 |  if_be	neg	local23, #1
00b24     01 01 02 F1 | 	add	local22, local23
00b28                 | LR__0007
00b28     FB 04 02 F6 | 	mov	local24, local17
00b2c     FF 04 02 F1 | 	add	local24, local21
00b30                 | '   tx(byte[filename+i])
00b30     02 CF C1 FA | 	rdbyte	arg01, local24
00b34     A8 0B B0 FD | 	call	#_tx
00b38     01 FF 01 F1 | 	add	local21, local23
00b3c     00 FF 09 F2 | 	cmp	local21, local22 wz
00b40     E4 FF 9F 5D |  if_ne	jmp	#LR__0007
00b44                 | ' tx(255)
00b44     FF CE 05 F6 | 	mov	arg01, #255
00b48     94 0B B0 FD | 	call	#_tx
00b4c                 | ' return q
00b4c     FE C2 01 F6 | 	mov	result1, local20
00b50     E1 06 02 F6 | 	mov	local25, result1
00b54     03 09 02 F6 | 	mov	local26, local25
00b58                 | ' 
00b58                 | ' repeat
00b58                 | LR__0008
00b58                 | '  {{ rr:=mrx()
00b58                 | '   }}
00b58                 | ' 
00b58                 | ' 
00b58                 | '   rr:=serialblockingread()
00b58                 | ' 
00b58                 | ' repeat
00b58                 | LR__0009
00b58                 | '   r:=serialread()
00b58     0C 0A B0 FD | 	call	#_serialread
00b5c     E1 0A 02 F6 | 	mov	local27, result1
00b60     FF FF 7F FF 
00b64     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00b68     EC FF 9F AD |  if_e	jmp	#LR__0009
00b6c                 | ' until r<>-1
00b6c                 | ' return r
00b6c     05 C3 01 F6 | 	mov	result1, local27
00b70     01 00 00 FF 
00b74     20 BA 05 F1 | 	add	objptr, ##544
00b78     DD C2 61 FC | 	wrlong	result1, objptr
00b7c                 | ' 
00b7c                 | ' {{
00b7c                 | ' }}   
00b7c                 | ' 
00b7c                 | '  
00b7c                 | '   if rr==$31    'mousex
00b7c     E1 EC 01 F6 | 	mov	local12, result1
00b80     01 00 00 FF 
00b84     20 BA 85 F1 | 	sub	objptr, ##544
00b88     31 EC 0D F2 | 	cmp	local12, #49 wz
00b8c     04 01 90 5D |  if_ne	jmp	#LR__0014
00b90                 | '     mousex:=serialblockingread()
00b90                 | ' 
00b90                 | ' repeat
00b90                 | LR__0010
00b90                 | '   r:=serialread()
00b90     D4 09 B0 FD | 	call	#_serialread
00b94     E1 0A 02 F6 | 	mov	local27, result1
00b98     FF FF 7F FF 
00b9c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00ba0     EC FF 9F AD |  if_e	jmp	#LR__0010
00ba4                 | ' until r<>-1
00ba4                 | ' return r
00ba4     05 C3 01 F6 | 	mov	result1, local27
00ba8     E1 EC 01 F6 | 	mov	local12, result1
00bac     01 00 00 FF 
00bb0     28 BA 05 F1 | 	add	objptr, ##552
00bb4     DD EC 51 FC | 	wrword	local12, objptr
00bb8     01 00 00 FF 
00bbc     28 BA 85 F1 | 	sub	objptr, ##552
00bc0                 | '     mousex+=serialblockingread()<<8
00bc0                 | ' 
00bc0                 | ' repeat
00bc0                 | LR__0011
00bc0                 | '   r:=serialread()
00bc0     A4 09 B0 FD | 	call	#_serialread
00bc4     E1 0A 02 F6 | 	mov	local27, result1
00bc8     FF FF 7F FF 
00bcc     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00bd0     EC FF 9F AD |  if_e	jmp	#LR__0011
00bd4                 | ' until r<>-1
00bd4                 | ' return r
00bd4     05 C3 01 F6 | 	mov	result1, local27
00bd8     E1 0C 02 F6 | 	mov	local28, result1
00bdc     08 0C 66 F0 | 	shl	local28, #8
00be0     01 00 00 FF 
00be4     28 BA 05 F1 | 	add	objptr, ##552
00be8     DD F0 E1 FA | 	rdword	local14, objptr
00bec     F8 06 02 F6 | 	mov	local25, local14
00bf0     06 07 02 F1 | 	add	local25, local28
00bf4     DD 06 52 FC | 	wrword	local25, objptr
00bf8     01 00 00 FF 
00bfc     28 BA 85 F1 | 	sub	objptr, ##552
00c00                 | '     rr:=serialblockingread()
00c00                 | ' 
00c00                 | ' repeat
00c00                 | LR__0012
00c00                 | '   r:=serialread()
00c00     64 09 B0 FD | 	call	#_serialread
00c04     E1 0A 02 F6 | 	mov	local27, result1
00c08     FF FF 7F FF 
00c0c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00c10     EC FF 9F AD |  if_e	jmp	#LR__0012
00c14                 | ' until r<>-1
00c14                 | ' return r
00c14     05 C3 01 F6 | 	mov	result1, local27
00c18     01 00 00 FF 
00c1c     20 BA 05 F1 | 	add	objptr, ##544
00c20     DD C2 61 FC | 	wrlong	result1, objptr
00c24                 | '     if rr==255
00c24     E1 EC 01 F6 | 	mov	local12, result1
00c28     01 00 00 FF 
00c2c     20 BA 85 F1 | 	sub	objptr, ##544
00c30     FF EC 0D F2 | 	cmp	local12, #255 wz
00c34     5C 00 90 5D |  if_ne	jmp	#LR__0013
00c38                 | '      v.write(string("  Mouse moved, x= "))
00c38     10 00 00 FF 
00c3c     51 CF 05 F6 | 	mov	arg01, ##@LR__0143
00c40     01 00 00 FF 
00c44     30 BA 05 F1 | 	add	objptr, ##560
00c48     80 0B B0 FD | 	call	#_Hn007_20210302_write
00c4c                 | '      v.write(v.inttostr(mousex))
00c4c     08 BA 85 F1 | 	sub	objptr, #8
00c50     DD CE E1 FA | 	rdword	arg01, objptr
00c54     08 BA 05 F1 | 	add	objptr, #8
00c58     50 0E B0 FD | 	call	#_Hn007_20210302_inttostr
00c5c     E1 CE 01 F6 | 	mov	arg01, result1
00c60     68 0B B0 FD | 	call	#_Hn007_20210302_write
00c64                 | '      v.write(string(", y= "))
00c64     10 00 00 FF 
00c68     64 CF 05 F6 | 	mov	arg01, ##@LR__0144
00c6c     5C 0B B0 FD | 	call	#_Hn007_20210302_write
00c70                 | '      v.writeln(v.inttostr(mousey))
00c70     06 BA 85 F1 | 	sub	objptr, #6
00c74     DD CE E1 FA | 	rdword	arg01, objptr
00c78     06 BA 05 F1 | 	add	objptr, #6
00c7c     2C 0E B0 FD | 	call	#_Hn007_20210302_inttostr
00c80     E1 06 02 F6 | 	mov	local25, result1
00c84     03 CF 01 F6 | 	mov	arg01, local25
00c88     E4 0C B0 FD | 	call	#_Hn007_20210302_writeln
00c8c     01 00 00 FF 
00c90     30 BA 85 F1 | 	sub	objptr, ##560
00c94                 | LR__0013
00c94                 | LR__0014
00c94                 | ' 
00c94                 | '   if rr==$32    'mousey
00c94     01 00 00 FF 
00c98     20 BA 05 F1 | 	add	objptr, ##544
00c9c     DD EC 01 FB | 	rdlong	local12, objptr
00ca0     01 00 00 FF 
00ca4     20 BA 85 F1 | 	sub	objptr, ##544
00ca8     32 EC 0D F2 | 	cmp	local12, #50 wz
00cac     04 01 90 5D |  if_ne	jmp	#LR__0019
00cb0                 | '     mousey:=serialblockingread()
00cb0                 | ' 
00cb0                 | ' repeat
00cb0                 | LR__0015
00cb0                 | '   r:=serialread()
00cb0     B4 08 B0 FD | 	call	#_serialread
00cb4     E1 0A 02 F6 | 	mov	local27, result1
00cb8     FF FF 7F FF 
00cbc     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00cc0     EC FF 9F AD |  if_e	jmp	#LR__0015
00cc4                 | ' until r<>-1
00cc4                 | ' return r
00cc4     05 C3 01 F6 | 	mov	result1, local27
00cc8     E1 EC 01 F6 | 	mov	local12, result1
00ccc     01 00 00 FF 
00cd0     2A BA 05 F1 | 	add	objptr, ##554
00cd4     DD EC 51 FC | 	wrword	local12, objptr
00cd8     01 00 00 FF 
00cdc     2A BA 85 F1 | 	sub	objptr, ##554
00ce0                 | '     mousey+=serialblockingread()<<8
00ce0                 | ' 
00ce0                 | ' repeat
00ce0                 | LR__0016
00ce0                 | '   r:=serialread()
00ce0     84 08 B0 FD | 	call	#_serialread
00ce4     E1 0A 02 F6 | 	mov	local27, result1
00ce8     FF FF 7F FF 
00cec     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00cf0     EC FF 9F AD |  if_e	jmp	#LR__0016
00cf4                 | ' until r<>-1
00cf4                 | ' return r
00cf4     05 C3 01 F6 | 	mov	result1, local27
00cf8     E1 0E 02 F6 | 	mov	local29, result1
00cfc     08 0E 66 F0 | 	shl	local29, #8
00d00     01 00 00 FF 
00d04     2A BA 05 F1 | 	add	objptr, ##554
00d08     DD F0 E1 FA | 	rdword	local14, objptr
00d0c     F8 06 02 F6 | 	mov	local25, local14
00d10     07 07 02 F1 | 	add	local25, local29
00d14     DD 06 52 FC | 	wrword	local25, objptr
00d18     01 00 00 FF 
00d1c     2A BA 85 F1 | 	sub	objptr, ##554
00d20                 | '     rr:=serialblockingread()
00d20                 | ' 
00d20                 | ' repeat
00d20                 | LR__0017
00d20                 | '   r:=serialread()
00d20     44 08 B0 FD | 	call	#_serialread
00d24     E1 0A 02 F6 | 	mov	local27, result1
00d28     FF FF 7F FF 
00d2c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00d30     EC FF 9F AD |  if_e	jmp	#LR__0017
00d34                 | ' until r<>-1
00d34                 | ' return r
00d34     05 C3 01 F6 | 	mov	result1, local27
00d38     01 00 00 FF 
00d3c     20 BA 05 F1 | 	add	objptr, ##544
00d40     DD C2 61 FC | 	wrlong	result1, objptr
00d44                 | '     if rr==255
00d44     E1 EC 01 F6 | 	mov	local12, result1
00d48     01 00 00 FF 
00d4c     20 BA 85 F1 | 	sub	objptr, ##544
00d50     FF EC 0D F2 | 	cmp	local12, #255 wz
00d54     5C 00 90 5D |  if_ne	jmp	#LR__0018
00d58                 | '      v.write(string("  Mouse moved, x= "))
00d58     10 00 00 FF 
00d5c     6A CF 05 F6 | 	mov	arg01, ##@LR__0145
00d60     01 00 00 FF 
00d64     30 BA 05 F1 | 	add	objptr, ##560
00d68     60 0A B0 FD | 	call	#_Hn007_20210302_write
00d6c                 | '      v.write(v.inttostr(mousex))
00d6c     08 BA 85 F1 | 	sub	objptr, #8
00d70     DD CE E1 FA | 	rdword	arg01, objptr
00d74     08 BA 05 F1 | 	add	objptr, #8
00d78     30 0D B0 FD | 	call	#_Hn007_20210302_inttostr
00d7c     E1 CE 01 F6 | 	mov	arg01, result1
00d80     48 0A B0 FD | 	call	#_Hn007_20210302_write
00d84                 | '      v.write(string(", y= "))
00d84     10 00 00 FF 
00d88     7D CF 05 F6 | 	mov	arg01, ##@LR__0146
00d8c     3C 0A B0 FD | 	call	#_Hn007_20210302_write
00d90                 | '      v.writeln(v.inttostr(mousey))
00d90     06 BA 85 F1 | 	sub	objptr, #6
00d94     DD CE E1 FA | 	rdword	arg01, objptr
00d98     06 BA 05 F1 | 	add	objptr, #6
00d9c     0C 0D B0 FD | 	call	#_Hn007_20210302_inttostr
00da0     E1 06 02 F6 | 	mov	local25, result1
00da4     03 CF 01 F6 | 	mov	arg01, local25
00da8     C4 0B B0 FD | 	call	#_Hn007_20210302_writeln
00dac     01 00 00 FF 
00db0     30 BA 85 F1 | 	sub	objptr, ##560
00db4                 | LR__0018
00db4                 | LR__0019
00db4                 | ' 
00db4                 | '   if rr==$33   'mousewheel
00db4     01 00 00 FF 
00db8     20 BA 05 F1 | 	add	objptr, ##544
00dbc     DD EC 01 FB | 	rdlong	local12, objptr
00dc0     01 00 00 FF 
00dc4     20 BA 85 F1 | 	sub	objptr, ##544
00dc8     33 EC 0D F2 | 	cmp	local12, #51 wz
00dcc     D0 00 90 5D |  if_ne	jmp	#LR__0024
00dd0                 | '     mousewheel:=serialblockingread()
00dd0                 | ' 
00dd0                 | ' repeat
00dd0                 | LR__0020
00dd0                 | '   r:=serialread()
00dd0     94 07 B0 FD | 	call	#_serialread
00dd4     E1 0A 02 F6 | 	mov	local27, result1
00dd8     FF FF 7F FF 
00ddc     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00de0     EC FF 9F AD |  if_e	jmp	#LR__0020
00de4                 | ' until r<>-1
00de4                 | ' return r
00de4     05 C3 01 F6 | 	mov	result1, local27
00de8     E1 EC 01 F6 | 	mov	local12, result1
00dec     01 00 00 FF 
00df0     26 BA 05 F1 | 	add	objptr, ##550
00df4     DD EC 41 FC | 	wrbyte	local12, objptr
00df8     01 00 00 FF 
00dfc     26 BA 85 F1 | 	sub	objptr, ##550
00e00                 | '     dummy:=serialblockingread()
00e00                 | ' 
00e00                 | ' repeat
00e00                 | LR__0021
00e00                 | '   r:=serialread()
00e00     64 07 B0 FD | 	call	#_serialread
00e04     E1 0A 02 F6 | 	mov	local27, result1
00e08     FF FF 7F FF 
00e0c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00e10     EC FF 9F AD |  if_e	jmp	#LR__0021
00e14                 | ' until r<>-1
00e14                 | ' return r
00e14     05 C3 01 F6 | 	mov	result1, local27
00e18     E1 EC 01 F6 | 	mov	local12, result1
00e1c     01 00 00 FF 
00e20     2C BA 05 F1 | 	add	objptr, ##556
00e24     DD EC 41 FC | 	wrbyte	local12, objptr
00e28     01 00 00 FF 
00e2c     2C BA 85 F1 | 	sub	objptr, ##556
00e30                 | '     rr:=serialblockingread()
00e30                 | ' 
00e30                 | ' repeat
00e30                 | LR__0022
00e30                 | '   r:=serialread()
00e30     34 07 B0 FD | 	call	#_serialread
00e34     E1 0A 02 F6 | 	mov	local27, result1
00e38     FF FF 7F FF 
00e3c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00e40     EC FF 9F AD |  if_e	jmp	#LR__0022
00e44                 | ' until r<>-1
00e44                 | ' return r
00e44     05 C3 01 F6 | 	mov	result1, local27
00e48     01 00 00 FF 
00e4c     20 BA 05 F1 | 	add	objptr, ##544
00e50     DD C2 61 FC | 	wrlong	result1, objptr
00e54                 | '     if rr==255
00e54     E1 EC 01 F6 | 	mov	local12, result1
00e58     01 00 00 FF 
00e5c     20 BA 85 F1 | 	sub	objptr, ##544
00e60     FF EC 0D F2 | 	cmp	local12, #255 wz
00e64     38 00 90 5D |  if_ne	jmp	#LR__0023
00e68                 | '      v.write(string("  Mouse wheel: "))
00e68     10 00 00 FF 
00e6c     83 CF 05 F6 | 	mov	arg01, ##@LR__0147
00e70     01 00 00 FF 
00e74     30 BA 05 F1 | 	add	objptr, ##560
00e78     50 09 B0 FD | 	call	#_Hn007_20210302_write
00e7c                 | '      v.writeln(v.inttostr(mousewheel))
00e7c     0A BA 85 F1 | 	sub	objptr, #10
00e80     DD CE C1 FA | 	rdbyte	arg01, objptr
00e84     0A BA 05 F1 | 	add	objptr, #10
00e88     20 0C B0 FD | 	call	#_Hn007_20210302_inttostr
00e8c     E1 06 02 F6 | 	mov	local25, result1
00e90     03 CF 01 F6 | 	mov	arg01, local25
00e94     D8 0A B0 FD | 	call	#_Hn007_20210302_writeln
00e98     01 00 00 FF 
00e9c     30 BA 85 F1 | 	sub	objptr, ##560
00ea0                 | LR__0023
00ea0                 | LR__0024
00ea0                 | ' 
00ea0                 | '   if rr==$34   'mousekey
00ea0     01 00 00 FF 
00ea4     20 BA 05 F1 | 	add	objptr, ##544
00ea8     DD EC 01 FB | 	rdlong	local12, objptr
00eac     01 00 00 FF 
00eb0     20 BA 85 F1 | 	sub	objptr, ##544
00eb4     34 EC 0D F2 | 	cmp	local12, #52 wz
00eb8     D0 00 90 5D |  if_ne	jmp	#LR__0029
00ebc                 | '     mousekey:=serialblockingread()
00ebc                 | ' 
00ebc                 | ' repeat
00ebc                 | LR__0025
00ebc                 | '   r:=serialread()
00ebc     A8 06 B0 FD | 	call	#_serialread
00ec0     E1 0A 02 F6 | 	mov	local27, result1
00ec4     FF FF 7F FF 
00ec8     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00ecc     EC FF 9F AD |  if_e	jmp	#LR__0025
00ed0                 | ' until r<>-1
00ed0                 | ' return r
00ed0     05 C3 01 F6 | 	mov	result1, local27
00ed4     E1 EC 01 F6 | 	mov	local12, result1
00ed8     01 00 00 FF 
00edc     27 BA 05 F1 | 	add	objptr, ##551
00ee0     DD EC 41 FC | 	wrbyte	local12, objptr
00ee4     01 00 00 FF 
00ee8     27 BA 85 F1 | 	sub	objptr, ##551
00eec                 | '     dummy:=serialblockingread()
00eec                 | ' 
00eec                 | ' repeat
00eec                 | LR__0026
00eec                 | '   r:=serialread()
00eec     78 06 B0 FD | 	call	#_serialread
00ef0     E1 0A 02 F6 | 	mov	local27, result1
00ef4     FF FF 7F FF 
00ef8     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00efc     EC FF 9F AD |  if_e	jmp	#LR__0026
00f00                 | ' until r<>-1
00f00                 | ' return r
00f00     05 C3 01 F6 | 	mov	result1, local27
00f04     E1 EC 01 F6 | 	mov	local12, result1
00f08     01 00 00 FF 
00f0c     2C BA 05 F1 | 	add	objptr, ##556
00f10     DD EC 41 FC | 	wrbyte	local12, objptr
00f14     01 00 00 FF 
00f18     2C BA 85 F1 | 	sub	objptr, ##556
00f1c                 | '     rr:=serialblockingread()
00f1c                 | ' 
00f1c                 | ' repeat
00f1c                 | LR__0027
00f1c                 | '   r:=serialread()
00f1c     48 06 B0 FD | 	call	#_serialread
00f20     E1 0A 02 F6 | 	mov	local27, result1
00f24     FF FF 7F FF 
00f28     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00f2c     EC FF 9F AD |  if_e	jmp	#LR__0027
00f30                 | ' until r<>-1
00f30                 | ' return r
00f30     05 C3 01 F6 | 	mov	result1, local27
00f34     01 00 00 FF 
00f38     20 BA 05 F1 | 	add	objptr, ##544
00f3c     DD C2 61 FC | 	wrlong	result1, objptr
00f40                 | '     if rr==255
00f40     E1 EC 01 F6 | 	mov	local12, result1
00f44     01 00 00 FF 
00f48     20 BA 85 F1 | 	sub	objptr, ##544
00f4c     FF EC 0D F2 | 	cmp	local12, #255 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0028
00f54                 | '      v.write(string("  Mouse key pressed: "))
00f54     10 00 00 FF 
00f58     93 CF 05 F6 | 	mov	arg01, ##@LR__0148
00f5c     01 00 00 FF 
00f60     30 BA 05 F1 | 	add	objptr, ##560
00f64     64 08 B0 FD | 	call	#_Hn007_20210302_write
00f68                 | '      v.writeln(v.inttostr(mousekey))
00f68     09 BA 85 F1 | 	sub	objptr, #9
00f6c     DD CE C1 FA | 	rdbyte	arg01, objptr
00f70     09 BA 05 F1 | 	add	objptr, #9
00f74     34 0B B0 FD | 	call	#_Hn007_20210302_inttostr
00f78     E1 06 02 F6 | 	mov	local25, result1
00f7c     03 CF 01 F6 | 	mov	arg01, local25
00f80     EC 09 B0 FD | 	call	#_Hn007_20210302_writeln
00f84     01 00 00 FF 
00f88     30 BA 85 F1 | 	sub	objptr, ##560
00f8c                 | LR__0028
00f8c                 | LR__0029
00f8c                 | ' 
00f8c                 | '   if rr==$35   'mouseclick
00f8c     01 00 00 FF 
00f90     20 BA 05 F1 | 	add	objptr, ##544
00f94     DD EC 01 FB | 	rdlong	local12, objptr
00f98     01 00 00 FF 
00f9c     20 BA 85 F1 | 	sub	objptr, ##544
00fa0     35 EC 0D F2 | 	cmp	local12, #53 wz
00fa4     B4 00 90 5D |  if_ne	jmp	#LR__0034
00fa8                 | '     dummy:=serialblockingread()
00fa8                 | ' 
00fa8                 | ' repeat
00fa8                 | LR__0030
00fa8                 | '   r:=serialread()
00fa8     BC 05 B0 FD | 	call	#_serialread
00fac     E1 0A 02 F6 | 	mov	local27, result1
00fb0     FF FF 7F FF 
00fb4     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00fb8     EC FF 9F AD |  if_e	jmp	#LR__0030
00fbc                 | ' until r<>-1
00fbc                 | ' return r
00fbc     05 C3 01 F6 | 	mov	result1, local27
00fc0     E1 EC 01 F6 | 	mov	local12, result1
00fc4     01 00 00 FF 
00fc8     2C BA 05 F1 | 	add	objptr, ##556
00fcc     DD EC 41 FC | 	wrbyte	local12, objptr
00fd0     01 00 00 FF 
00fd4     2C BA 85 F1 | 	sub	objptr, ##556
00fd8                 | '     dummy:=serialblockingread()
00fd8                 | ' 
00fd8                 | ' repeat
00fd8                 | LR__0031
00fd8                 | '   r:=serialread()
00fd8     8C 05 B0 FD | 	call	#_serialread
00fdc     E1 0A 02 F6 | 	mov	local27, result1
00fe0     FF FF 7F FF 
00fe4     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
00fe8     EC FF 9F AD |  if_e	jmp	#LR__0031
00fec                 | ' until r<>-1
00fec                 | ' return r
00fec     05 C3 01 F6 | 	mov	result1, local27
00ff0     E1 EC 01 F6 | 	mov	local12, result1
00ff4     01 00 00 FF 
00ff8     2C BA 05 F1 | 	add	objptr, ##556
00ffc     DD EC 41 FC | 	wrbyte	local12, objptr
01000     01 00 00 FF 
01004     2C BA 85 F1 | 	sub	objptr, ##556
01008                 | '     rr:=serialblockingread()
01008                 | ' 
01008                 | ' repeat
01008                 | LR__0032
01008                 | '   r:=serialread()
01008     5C 05 B0 FD | 	call	#_serialread
0100c     E1 0A 02 F6 | 	mov	local27, result1
01010     FF FF 7F FF 
01014     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
01018     EC FF 9F AD |  if_e	jmp	#LR__0032
0101c                 | ' until r<>-1
0101c                 | ' return r
0101c     05 C3 01 F6 | 	mov	result1, local27
01020     01 00 00 FF 
01024     20 BA 05 F1 | 	add	objptr, ##544
01028     DD C2 61 FC | 	wrlong	result1, objptr
0102c                 | '     if rr==255
0102c     E1 EC 01 F6 | 	mov	local12, result1
01030     01 00 00 FF 
01034     20 BA 85 F1 | 	sub	objptr, ##544
01038     FF EC 0D F2 | 	cmp	local12, #255 wz
0103c     1C 00 90 5D |  if_ne	jmp	#LR__0033
01040                 | '      v.writeln(string("  Mouse clicked"))
01040     10 00 00 FF 
01044     A9 CF 05 F6 | 	mov	arg01, ##@LR__0149
01048     01 00 00 FF 
0104c     30 BA 05 F1 | 	add	objptr, ##560
01050     1C 09 B0 FD | 	call	#_Hn007_20210302_writeln
01054     01 00 00 FF 
01058     30 BA 85 F1 | 	sub	objptr, ##560
0105c                 | LR__0033
0105c                 | LR__0034
0105c                 | ' 
0105c                 | '   if rr==$36   'mouseclick
0105c     01 00 00 FF 
01060     20 BA 05 F1 | 	add	objptr, ##544
01064     DD EC 01 FB | 	rdlong	local12, objptr
01068     01 00 00 FF 
0106c     20 BA 85 F1 | 	sub	objptr, ##544
01070     36 EC 0D F2 | 	cmp	local12, #54 wz
01074     B4 00 90 5D |  if_ne	jmp	#LR__0039
01078                 | '     dummy:=serialblockingread()
01078                 | ' 
01078                 | ' repeat
01078                 | LR__0035
01078                 | '   r:=serialread()
01078     EC 04 B0 FD | 	call	#_serialread
0107c     E1 0A 02 F6 | 	mov	local27, result1
01080     FF FF 7F FF 
01084     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
01088     EC FF 9F AD |  if_e	jmp	#LR__0035
0108c                 | ' until r<>-1
0108c                 | ' return r
0108c     05 C3 01 F6 | 	mov	result1, local27
01090     E1 EC 01 F6 | 	mov	local12, result1
01094     01 00 00 FF 
01098     2C BA 05 F1 | 	add	objptr, ##556
0109c     DD EC 41 FC | 	wrbyte	local12, objptr
010a0     01 00 00 FF 
010a4     2C BA 85 F1 | 	sub	objptr, ##556
010a8                 | '     dummy:=serialblockingread()
010a8                 | ' 
010a8                 | ' repeat
010a8                 | LR__0036
010a8                 | '   r:=serialread()
010a8     BC 04 B0 FD | 	call	#_serialread
010ac     E1 0A 02 F6 | 	mov	local27, result1
010b0     FF FF 7F FF 
010b4     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
010b8     EC FF 9F AD |  if_e	jmp	#LR__0036
010bc                 | ' until r<>-1
010bc                 | ' return r
010bc     05 C3 01 F6 | 	mov	result1, local27
010c0     E1 EC 01 F6 | 	mov	local12, result1
010c4     01 00 00 FF 
010c8     2C BA 05 F1 | 	add	objptr, ##556
010cc     DD EC 41 FC | 	wrbyte	local12, objptr
010d0     01 00 00 FF 
010d4     2C BA 85 F1 | 	sub	objptr, ##556
010d8                 | '     rr:=serialblockingread()
010d8                 | ' 
010d8                 | ' repeat
010d8                 | LR__0037
010d8                 | '   r:=serialread()
010d8     8C 04 B0 FD | 	call	#_serialread
010dc     E1 0A 02 F6 | 	mov	local27, result1
010e0     FF FF 7F FF 
010e4     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
010e8     EC FF 9F AD |  if_e	jmp	#LR__0037
010ec                 | ' until r<>-1
010ec                 | ' return r
010ec     05 C3 01 F6 | 	mov	result1, local27
010f0     01 00 00 FF 
010f4     20 BA 05 F1 | 	add	objptr, ##544
010f8     DD C2 61 FC | 	wrlong	result1, objptr
010fc                 | '     if rr==255
010fc     E1 EC 01 F6 | 	mov	local12, result1
01100     01 00 00 FF 
01104     20 BA 85 F1 | 	sub	objptr, ##544
01108     FF EC 0D F2 | 	cmp	local12, #255 wz
0110c     1C 00 90 5D |  if_ne	jmp	#LR__0038
01110                 | '      v.writeln(string("  Mouse double clicked"))
01110     10 00 00 FF 
01114     B9 CF 05 F6 | 	mov	arg01, ##@LR__0150
01118     01 00 00 FF 
0111c     30 BA 05 F1 | 	add	objptr, ##560
01120     4C 08 B0 FD | 	call	#_Hn007_20210302_writeln
01124     01 00 00 FF 
01128     30 BA 85 F1 | 	sub	objptr, ##560
0112c                 | LR__0038
0112c                 | LR__0039
0112c                 | ' 
0112c                 | '   if rr==$37   'key released
0112c     01 00 00 FF 
01130     20 BA 05 F1 | 	add	objptr, ##544
01134     DD EC 01 FB | 	rdlong	local12, objptr
01138     01 00 00 FF 
0113c     20 BA 85 F1 | 	sub	objptr, ##544
01140     37 EC 0D F2 | 	cmp	local12, #55 wz
01144     DC 00 90 5D |  if_ne	jmp	#LR__0044
01148                 | '     scancode:=serialblockingread()
01148                 | ' 
01148                 | ' repeat
01148                 | LR__0040
01148                 | '   r:=serialread()
01148     1C 04 B0 FD | 	call	#_serialread
0114c     E1 0A 02 F6 | 	mov	local27, result1
01150     FF FF 7F FF 
01154     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
01158     EC FF 9F AD |  if_e	jmp	#LR__0040
0115c                 | ' until r<>-1
0115c                 | ' return r
0115c     05 C3 01 F6 | 	mov	result1, local27
01160     E1 EC 01 F6 | 	mov	local12, result1
01164     01 00 00 FF 
01168     25 BA 05 F1 | 	add	objptr, ##549
0116c     DD EC 41 FC | 	wrbyte	local12, objptr
01170     01 00 00 FF 
01174     25 BA 85 F1 | 	sub	objptr, ##549
01178                 | '     dummy:=serialblockingread()
01178                 | ' 
01178                 | ' repeat
01178                 | LR__0041
01178                 | '   r:=serialread()
01178     EC 03 B0 FD | 	call	#_serialread
0117c     E1 0A 02 F6 | 	mov	local27, result1
01180     FF FF 7F FF 
01184     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
01188     EC FF 9F AD |  if_e	jmp	#LR__0041
0118c                 | ' until r<>-1
0118c                 | ' return r
0118c     05 C3 01 F6 | 	mov	result1, local27
01190     E1 EC 01 F6 | 	mov	local12, result1
01194     01 00 00 FF 
01198     2C BA 05 F1 | 	add	objptr, ##556
0119c     DD EC 41 FC | 	wrbyte	local12, objptr
011a0     01 00 00 FF 
011a4     2C BA 85 F1 | 	sub	objptr, ##556
011a8                 | '     rr:=serialblockingread()
011a8                 | ' 
011a8                 | ' repeat
011a8                 | LR__0042
011a8                 | '   r:=serialread()
011a8     BC 03 B0 FD | 	call	#_serialread
011ac     E1 0A 02 F6 | 	mov	local27, result1
011b0     FF FF 7F FF 
011b4     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
011b8     EC FF 9F AD |  if_e	jmp	#LR__0042
011bc                 | ' until r<>-1
011bc                 | ' return r
011bc     05 C3 01 F6 | 	mov	result1, local27
011c0     01 00 00 FF 
011c4     20 BA 05 F1 | 	add	objptr, ##544
011c8     DD C2 61 FC | 	wrlong	result1, objptr
011cc                 | '     if rr==255
011cc     E1 EC 01 F6 | 	mov	local12, result1
011d0     01 00 00 FF 
011d4     20 BA 85 F1 | 	sub	objptr, ##544
011d8     FF EC 0D F2 | 	cmp	local12, #255 wz
011dc     44 00 90 5D |  if_ne	jmp	#LR__0043
011e0                 | '      v.write(string("  Key scancode "))
011e0     10 00 00 FF 
011e4     D0 CF 05 F6 | 	mov	arg01, ##@LR__0151
011e8     01 00 00 FF 
011ec     30 BA 05 F1 | 	add	objptr, ##560
011f0     D8 05 B0 FD | 	call	#_Hn007_20210302_write
011f4                 | '      v.write(v.inttostr(scancode))
011f4     0B BA 85 F1 | 	sub	objptr, #11
011f8     DD CE C1 FA | 	rdbyte	arg01, objptr
011fc     0B BA 05 F1 | 	add	objptr, #11
01200     A8 08 B0 FD | 	call	#_Hn007_20210302_inttostr
01204     E1 06 02 F6 | 	mov	local25, result1
01208     03 CF 01 F6 | 	mov	arg01, local25
0120c     BC 05 B0 FD | 	call	#_Hn007_20210302_write
01210                 | '      v.writeln(string(" released"))
01210     10 00 00 FF 
01214     E0 CF 05 F6 | 	mov	arg01, ##@LR__0152
01218     54 07 B0 FD | 	call	#_Hn007_20210302_writeln
0121c     01 00 00 FF 
01220     30 BA 85 F1 | 	sub	objptr, ##560
01224                 | LR__0043
01224                 | LR__0044
01224                 | ' 
01224                 | '   if rr==$38   'key pressed
01224     01 00 00 FF 
01228     20 BA 05 F1 | 	add	objptr, ##544
0122c     DD EC 01 FB | 	rdlong	local12, objptr
01230     01 00 00 FF 
01234     20 BA 85 F1 | 	sub	objptr, ##544
01238     38 EC 0D F2 | 	cmp	local12, #56 wz
0123c     00 01 90 5D |  if_ne	jmp	#LR__0049
01240                 | '     scancode:=serialblockingread()
01240                 | ' 
01240                 | ' repeat
01240                 | LR__0045
01240                 | '   r:=serialread()
01240     24 03 B0 FD | 	call	#_serialread
01244     E1 0A 02 F6 | 	mov	local27, result1
01248     FF FF 7F FF 
0124c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
01250     EC FF 9F AD |  if_e	jmp	#LR__0045
01254                 | ' until r<>-1
01254                 | ' return r
01254     05 C3 01 F6 | 	mov	result1, local27
01258     E1 EC 01 F6 | 	mov	local12, result1
0125c     01 00 00 FF 
01260     25 BA 05 F1 | 	add	objptr, ##549
01264     DD EC 41 FC | 	wrbyte	local12, objptr
01268     01 00 00 FF 
0126c     25 BA 85 F1 | 	sub	objptr, ##549
01270                 | '     charcode:=serialblockingread()
01270                 | ' 
01270                 | ' repeat
01270                 | LR__0046
01270                 | '   r:=serialread()
01270     F4 02 B0 FD | 	call	#_serialread
01274     E1 0A 02 F6 | 	mov	local27, result1
01278     FF FF 7F FF 
0127c     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
01280     EC FF 9F AD |  if_e	jmp	#LR__0046
01284                 | ' until r<>-1
01284                 | ' return r
01284     05 C3 01 F6 | 	mov	result1, local27
01288     E1 EC 01 F6 | 	mov	local12, result1
0128c     01 00 00 FF 
01290     24 BA 05 F1 | 	add	objptr, ##548
01294     DD EC 41 FC | 	wrbyte	local12, objptr
01298     01 00 00 FF 
0129c     24 BA 85 F1 | 	sub	objptr, ##548
012a0                 | '     rr:=serialblockingread()
012a0                 | ' 
012a0                 | ' repeat
012a0                 | LR__0047
012a0                 | '   r:=serialread()
012a0     C4 02 B0 FD | 	call	#_serialread
012a4     E1 0A 02 F6 | 	mov	local27, result1
012a8     FF FF 7F FF 
012ac     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
012b0     EC FF 9F AD |  if_e	jmp	#LR__0047
012b4                 | ' until r<>-1
012b4                 | ' return r
012b4     05 C3 01 F6 | 	mov	result1, local27
012b8     01 00 00 FF 
012bc     20 BA 05 F1 | 	add	objptr, ##544
012c0     DD C2 61 FC | 	wrlong	result1, objptr
012c4                 | '     if rr==255
012c4     E1 EC 01 F6 | 	mov	local12, result1
012c8     01 00 00 FF 
012cc     20 BA 85 F1 | 	sub	objptr, ##544
012d0     FF EC 0D F2 | 	cmp	local12, #255 wz
012d4     68 00 90 5D |  if_ne	jmp	#LR__0048
012d8                 | '      v.write(string("  Key scancode "))
012d8     10 00 00 FF 
012dc     EA CF 05 F6 | 	mov	arg01, ##@LR__0153
012e0     01 00 00 FF 
012e4     30 BA 05 F1 | 	add	objptr, ##560
012e8     E0 04 B0 FD | 	call	#_Hn007_20210302_write
012ec                 | '      v.write(v.inttostr(scancode))
012ec     0B BA 85 F1 | 	sub	objptr, #11
012f0     DD CE C1 FA | 	rdbyte	arg01, objptr
012f4     0B BA 05 F1 | 	add	objptr, #11
012f8     B0 07 B0 FD | 	call	#_Hn007_20210302_inttostr
012fc     E1 CE 01 F6 | 	mov	arg01, result1
01300     C8 04 B0 FD | 	call	#_Hn007_20210302_write
01304                 | '      v.write(string(", charcode "))
01304     10 00 00 FF 
01308     FA CF 05 F6 | 	mov	arg01, ##@LR__0154
0130c     BC 04 B0 FD | 	call	#_Hn007_20210302_write
01310                 | '      v.write(v.inttostr(charcode))
01310     0C BA 85 F1 | 	sub	objptr, #12
01314     DD CE C1 FA | 	rdbyte	arg01, objptr
01318     0C BA 05 F1 | 	add	objptr, #12
0131c     8C 07 B0 FD | 	call	#_Hn007_20210302_inttostr
01320     E1 06 02 F6 | 	mov	local25, result1
01324     03 CF 01 F6 | 	mov	arg01, local25
01328     A0 04 B0 FD | 	call	#_Hn007_20210302_write
0132c                 | '      v.writeln(string(" pressed"))
0132c     11 00 00 FF 
01330     06 CE 05 F6 | 	mov	arg01, ##@LR__0155
01334     38 06 B0 FD | 	call	#_Hn007_20210302_writeln
01338     01 00 00 FF 
0133c     30 BA 85 F1 | 	sub	objptr, ##560
01340                 | LR__0048
01340                 | LR__0049
01340                 | ' 
01340                 | '   if rr==$39   'modifier pressed
01340     01 00 00 FF 
01344     20 BA 05 F1 | 	add	objptr, ##544
01348     DD EE 01 FB | 	rdlong	local13, objptr
0134c     01 00 00 FF 
01350     20 BA 85 F1 | 	sub	objptr, ##544
01354     39 EE 0D F2 | 	cmp	local13, #57 wz
01358     FC F7 9F 5D |  if_ne	jmp	#LR__0008
0135c                 | '     scancode:=serialblockingread()
0135c                 | ' 
0135c                 | ' repeat
0135c                 | LR__0050
0135c                 | '   r:=serialread()
0135c     08 02 B0 FD | 	call	#_serialread
01360     E1 0A 02 F6 | 	mov	local27, result1
01364     FF FF 7F FF 
01368     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
0136c     EC FF 9F AD |  if_e	jmp	#LR__0050
01370                 | ' until r<>-1
01370                 | ' return r
01370     05 C3 01 F6 | 	mov	result1, local27
01374     E1 EC 01 F6 | 	mov	local12, result1
01378     01 00 00 FF 
0137c     25 BA 05 F1 | 	add	objptr, ##549
01380     DD EC 41 FC | 	wrbyte	local12, objptr
01384     01 00 00 FF 
01388     25 BA 85 F1 | 	sub	objptr, ##549
0138c                 | '     dummy:=serialblockingread()
0138c                 | ' 
0138c                 | ' repeat
0138c                 | LR__0051
0138c                 | '   r:=serialread()
0138c     D8 01 B0 FD | 	call	#_serialread
01390     E1 0A 02 F6 | 	mov	local27, result1
01394     FF FF 7F FF 
01398     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
0139c     EC FF 9F AD |  if_e	jmp	#LR__0051
013a0                 | ' until r<>-1
013a0                 | ' return r
013a0     05 C3 01 F6 | 	mov	result1, local27
013a4     E1 EC 01 F6 | 	mov	local12, result1
013a8     01 00 00 FF 
013ac     2C BA 05 F1 | 	add	objptr, ##556
013b0     DD EC 41 FC | 	wrbyte	local12, objptr
013b4     01 00 00 FF 
013b8     2C BA 85 F1 | 	sub	objptr, ##556
013bc                 | '     rr:=serialblockingread()
013bc                 | ' 
013bc                 | ' repeat
013bc                 | LR__0052
013bc                 | '   r:=serialread()
013bc     A8 01 B0 FD | 	call	#_serialread
013c0     E1 0A 02 F6 | 	mov	local27, result1
013c4     FF FF 7F FF 
013c8     FF 0B 0E F2 | 	cmp	local27, ##-1 wz
013cc     EC FF 9F AD |  if_e	jmp	#LR__0052
013d0                 | ' until r<>-1
013d0                 | ' return r
013d0     05 C3 01 F6 | 	mov	result1, local27
013d4     01 00 00 FF 
013d8     20 BA 05 F1 | 	add	objptr, ##544
013dc     DD C2 61 FC | 	wrlong	result1, objptr
013e0                 | '     if rr==255
013e0     E1 EE 01 F6 | 	mov	local13, result1
013e4     01 00 00 FF 
013e8     20 BA 85 F1 | 	sub	objptr, ##544
013ec     FF EE 0D F2 | 	cmp	local13, #255 wz
013f0     64 F7 9F 5D |  if_ne	jmp	#LR__0008
013f4                 | '       if scancode>0
013f4     01 00 00 FF 
013f8     25 BA 05 F1 | 	add	objptr, ##549
013fc     DD EC C1 FA | 	rdbyte	local12, objptr
01400     01 00 00 FF 
01404     25 BA 85 F1 | 	sub	objptr, ##549
01408     00 EC 5D F2 | 	cmps	local12, #0 wcz
0140c     4C 00 90 ED |  if_be	jmp	#LR__0053
01410                 | '         v.write(string("  Key modifier "))
01410     11 00 00 FF 
01414     0F CE 05 F6 | 	mov	arg01, ##@LR__0156
01418     01 00 00 FF 
0141c     30 BA 05 F1 | 	add	objptr, ##560
01420     A8 03 B0 FD | 	call	#_Hn007_20210302_write
01424                 | '         v.write(v.inttostr(scancode))
01424     0B BA 85 F1 | 	sub	objptr, #11
01428     DD CE C1 FA | 	rdbyte	arg01, objptr
0142c     0B BA 05 F1 | 	add	objptr, #11
01430     78 06 B0 FD | 	call	#_Hn007_20210302_inttostr
01434     E1 06 02 F6 | 	mov	local25, result1
01438     03 CF 01 F6 | 	mov	arg01, local25
0143c     8C 03 B0 FD | 	call	#_Hn007_20210302_write
01440                 | '         v.writeln(string(" pressed"))
01440     11 00 00 FF 
01444     1F EE 05 F6 | 	mov	local13, ##@LR__0157
01448     F7 CE 01 F6 | 	mov	arg01, local13
0144c     20 05 B0 FD | 	call	#_Hn007_20210302_writeln
01450     01 00 00 FF 
01454     30 BA 85 F1 | 	sub	objptr, ##560
01458                 | '       else
01458     FC F6 9F FD | 	jmp	#LR__0008
0145c                 | LR__0053
0145c                 | '         v.writeln(string("  Modifiers released"))
0145c     11 00 00 FF 
01460     28 EE 05 F6 | 	mov	local13, ##@LR__0158
01464     F7 CE 01 F6 | 	mov	arg01, local13
01468     01 00 00 FF 
0146c     30 BA 05 F1 | 	add	objptr, ##560
01470     FC 04 B0 FD | 	call	#_Hn007_20210302_writeln
01474     01 00 00 FF 
01478     30 BA 85 F1 | 	sub	objptr, ##560
0147c     D8 F6 9F FD | 	jmp	#LR__0008
01480     AF F0 03 F6 | 	mov	ptra, fp
01484     BF 00 A0 FD | 	call	#popregs_
01488                 | _start_ret
01488     2D 00 64 FD | 	ret
0148c                 | 
0148c                 | ' 
0148c                 | ' 
0148c                 | ' pub serialcog()|q
0148c                 | _serialcog
0148c     08 5A 05 F6 | 	mov	COUNT_, #8
01490     B0 00 A0 FD | 	call	#pushregs_
01494                 | ' 
01494                 | ' serialfront:=0
01494     00 D6 05 F6 | 	mov	local01, #0
01498     1C BB 05 F1 | 	add	objptr, #284
0149c     DD 00 68 FC | 	wrlong	#0, objptr
014a0                 | ' serialtail:=0
014a0     04 BA 85 F1 | 	sub	objptr, #4
014a4     DD 00 68 FC | 	wrlong	#0, objptr
014a8     18 BB 85 F1 | 	sub	objptr, #280
014ac                 | ' 
014ac                 | ' repeat
014ac                 | LR__0054
014ac                 | '   if serialfront<>((serialtail-1) //32)
014ac     18 BB 05 F1 | 	add	objptr, #280
014b0     DD D6 01 FB | 	rdlong	local01, objptr
014b4     01 D6 85 F1 | 	sub	local01, #1
014b8     EB D8 51 F6 | 	abs	local02, local01 wc
014bc     1F D8 05 F5 | 	and	local02, #31
014c0     EC D8 61 C6 |  if_b	neg	local02, local02
014c4     04 BA 05 F1 | 	add	objptr, #4
014c8     DD DA 01 FB | 	rdlong	local03, objptr
014cc     1C BB 85 F1 | 	sub	objptr, #284
014d0     EC DA 09 F2 | 	cmp	local03, local02 wz
014d4     D4 FF 9F AD |  if_e	jmp	#LR__0054
014d8                 | '     q:=rxcheck()
014d8                 | ' 
014d8                 | ' '' Check for serial input
014d8                 | ' '' -- returns -1 if nothing available
014d8                 | ' 
014d8                 | '   rxbyte := -1
014d8     01 DC 65 F6 | 	neg	local04, #1
014dc                 | '   check := pinr(rxp)
014dc     08 BA 05 F1 | 	add	objptr, #8
014e0     DD CE 01 FB | 	rdlong	arg01, objptr
014e4     08 BA 85 F1 | 	sub	objptr, #8
014e8     90 0B B0 FD | 	call	#__system___pinread
014ec     E1 DE 09 F6 | 	mov	local05, result1 wz
014f0                 | '   if (check)
014f0     18 00 90 AD |  if_e	jmp	#LR__0055
014f4                 | '     rxbyte := rdpin(rxp) >> 24
014f4     08 BA 05 F1 | 	add	objptr, #8
014f8     DD CE 01 FB | 	rdlong	arg01, objptr
014fc     08 BA 85 F1 | 	sub	objptr, #8
01500     00 DC 05 F6 | 	mov	local04, #0
01504     E7 DC 89 FA | 	rdpin	local04, arg01
01508     18 DC 45 F0 | 	shr	local04, #24
0150c                 | LR__0055
0150c     EE C2 01 F6 | 	mov	result1, local04
01510     E1 E0 01 F6 | 	mov	local06, result1
01514                 | '     if q>=0
01514     00 E0 5D F2 | 	cmps	local06, #0 wcz
01518     90 FF 9F CD |  if_b	jmp	#LR__0054
0151c     1C BB 05 F1 | 	add	objptr, #284
01520     DD E2 01 FB | 	rdlong	local07, objptr
01524     02 E2 65 F0 | 	shl	local07, #2
01528     04 BB 85 F1 | 	sub	objptr, #260
0152c     DD E2 01 F1 | 	add	local07, objptr
01530                 | '      serialbuf[serialfront]:=q
01530     F1 E0 61 FC | 	wrlong	local06, local07
01534                 | '      serialfront+=1
01534     04 BB 05 F1 | 	add	objptr, #260
01538     DD E4 01 FB | 	rdlong	local08, objptr
0153c     01 E4 05 F1 | 	add	local08, #1
01540     DD E4 61 FC | 	wrlong	local08, objptr
01544                 | '      serialfront:=serialfront // 32
01544     F2 D6 51 F6 | 	abs	local01, local08 wc
01548     1F D6 05 F5 | 	and	local01, #31
0154c     EB D6 61 C6 |  if_b	neg	local01, local01
01550     DD D6 61 FC | 	wrlong	local01, objptr
01554     1C BB 85 F1 | 	sub	objptr, #284
01558     50 FF 9F FD | 	jmp	#LR__0054
0155c     AF F0 03 F6 | 	mov	ptra, fp
01560     BF 00 A0 FD | 	call	#popregs_
01564                 | _serialcog_ret
01564     2D 00 64 FD | 	ret
01568                 | 
01568                 | ' 
01568                 | ' pub serialread():r
01568                 | _serialread
01568                 | ' 
01568                 | ' if serialfront<>serialtail
01568     1C BB 05 F1 | 	add	objptr, #284
0156c     DD C4 01 FB | 	rdlong	_var01, objptr
01570     04 BA 85 F1 | 	sub	objptr, #4
01574     DD C6 01 FB | 	rdlong	_var02, objptr
01578     18 BB 85 F1 | 	sub	objptr, #280
0157c     E3 C4 09 F2 | 	cmp	_var01, _var02 wz
01580     3C 00 90 AD |  if_e	jmp	#LR__0056
01584     18 BB 05 F1 | 	add	objptr, #280
01588     DD C8 01 FB | 	rdlong	_var03, objptr
0158c     02 C8 65 F0 | 	shl	_var03, #2
01590     00 BB 85 F1 | 	sub	objptr, #256
01594     DD C8 01 F1 | 	add	_var03, objptr
01598                 | '   r:=serialbuf[serialtail]
01598     E4 CA 01 FB | 	rdlong	_var04, _var03
0159c     00 BB 05 F1 | 	add	objptr, #256
015a0     DD CC 01 FB | 	rdlong	_var05, objptr
015a4     01 CC 05 F1 | 	add	_var05, #1
015a8     E6 C4 51 F6 | 	abs	_var01, _var05 wc
015ac     1F C4 05 F5 | 	and	_var01, #31
015b0     E2 C4 61 C6 |  if_b	neg	_var01, _var01
015b4                 | '   serialtail:=(serialtail+1)//32
015b4     DD C4 61 FC | 	wrlong	_var01, objptr
015b8     18 BB 85 F1 | 	sub	objptr, #280
015bc                 | ' else
015bc     04 00 90 FD | 	jmp	#LR__0057
015c0                 | LR__0056
015c0                 | '   r:=-1
015c0     01 CA 65 F6 | 	neg	_var04, #1
015c4                 | LR__0057
015c4                 | ' return r
015c4     E5 C2 01 F6 | 	mov	result1, _var04
015c8                 | _serialread_ret
015c8     2D 00 64 FD | 	ret
015cc                 | 
015cc                 | ' 
015cc                 | ' 
015cc                 | ' 
015cc                 | ' ''---------------------- Serial functions from jm_serial.spin2
015cc                 | ' 
015cc                 | ' pub serial_start(rxpin2, txpin2, baud) | bitmode
015cc                 | _serial_start
015cc     05 5A 05 F6 | 	mov	COUNT_, #5
015d0     B0 00 A0 FD | 	call	#pushregs_
015d4     E7 D6 01 F6 | 	mov	local01, arg01
015d8     E8 D8 01 F6 | 	mov	local02, arg02
015dc                 | ' 
015dc                 | ' '' Start simple serial coms on rxpin and txpin at baud
015dc                 | ' 
015dc                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
015dc                 | ' 
015dc                 | '   rxp:=rxpin2
015dc     08 BA 05 F1 | 	add	objptr, #8
015e0     DD D6 61 FC | 	wrlong	local01, objptr
015e4                 | '   txp:=txpin2
015e4     04 BA 05 F1 | 	add	objptr, #4
015e8     DD D8 61 FC | 	wrlong	local02, objptr
015ec     0C BA 85 F1 | 	sub	objptr, #12
015f0                 | ' 
015f0                 | '   bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
015f0     14 CE 05 FB | 	rdlong	arg01, #20
015f4     10 D0 C5 F9 | 	decod	arg02, #16
015f8     E8 CE 01 FD | 	qmul	arg01, arg02
015fc     19 DA 61 FD | 	getqy	local03
01600     18 DC 61 FD | 	getqx	local04
01604     28 DA 61 FD | 	setq	local03
01608     E9 DC 11 FD | 	qdiv	local04, arg03
0160c     18 C2 61 FD | 	getqx	result1
01610     E1 DE 01 F6 | 	mov	local05, result1
01614     FE FF 7F FF 
01618     00 DE 05 F5 | 	and	local05, ##-1024
0161c                 | '   bitmode |= 7                                                  ' set bits (8)
0161c     07 DE 45 F5 | 	or	local05, #7
01620                 | ' 
01620                 | '   org
01620     FC E9 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
01624     93 00 A0 FD | 	call	#FCACHE_LOAD_
01628                 | LR__0058
01628 000             | 	org	0
01628 000 50 D6 61 FD | 	fltl	local01
0162c 001 EB 7C 08 FC | 	wrpin	#62, local01
01630 002 EB DE 11 FC | 	wxpin	local05, local01
01634 003 58 D6 61 FD | 	drvl	local01
01638 004 50 D8 61 FD | 	fltl	local02
0163c 005 EC F8 08 FC | 	wrpin	#124, local02
01640 006 EC DE 11 FC | 	wxpin	local05, local02
01644 007 58 D8 61 FD | 	drvl	local02
01648 008             | LR__0059
01648                 | 	orgh
01648     AF F0 03 F6 | 	mov	ptra, fp
0164c     BF 00 A0 FD | 	call	#popregs_
01650                 | _serial_start_ret
01650     2D 00 64 FD | 	ret
01654                 | 
01654                 | ' 
01654                 | ' pub midi_start(mrxpin2, mtxpin2) | bitmode
01654                 | _midi_start
01654     05 5A 05 F6 | 	mov	COUNT_, #5
01658     B0 00 A0 FD | 	call	#pushregs_
0165c     E7 D6 01 F6 | 	mov	local01, arg01
01660     E8 D8 01 F6 | 	mov	local02, arg02
01664                 | ' 
01664                 | ' '' Start simple serial coms on rxpin and txpin at baud
01664                 | ' 
01664                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
01664                 | ' 
01664                 | '   mrxp:=mrxpin2
01664     10 BA 05 F1 | 	add	objptr, #16
01668     DD D6 61 FC | 	wrlong	local01, objptr
0166c                 | '   mtxp:=mtxpin2
0166c     04 BA 05 F1 | 	add	objptr, #4
01670     DD D8 61 FC | 	wrlong	local02, objptr
01674     14 BA 85 F1 | 	sub	objptr, #20
01678                 | ' 
01678                 | '   bitmode := muldiv64(clkfreq, $1_0000, 31250) & $FFFFFC00       ' set bit timing
01678     14 CE 05 FB | 	rdlong	arg01, #20
0167c     10 D0 C5 F9 | 	decod	arg02, #16
01680     E8 CE 01 FD | 	qmul	arg01, arg02
01684     19 DA 61 FD | 	getqy	local03
01688     18 DC 61 FD | 	getqx	local04
0168c     28 DA 61 FD | 	setq	local03
01690     3D 00 00 FF 
01694     12 DC 15 FD | 	qdiv	local04, ##31250
01698     18 C2 61 FD | 	getqx	result1
0169c     E1 DE 01 F6 | 	mov	local05, result1
016a0     FE FF 7F FF 
016a4     00 DE 05 F5 | 	and	local05, ##-1024
016a8                 | '   bitmode |= 7                                                  ' set bits (8)
016a8     07 DE 45 F5 | 	or	local05, #7
016ac                 | ' 
016ac                 | '   org
016ac     70 E9 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
016b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
016b4                 | LR__0060
016b4 000             | 	org	0
016b4 000 50 D6 61 FD | 	fltl	local01
016b8 001 EB 7C 08 FC | 	wrpin	#62, local01
016bc 002 EB DE 11 FC | 	wxpin	local05, local01
016c0 003 58 D6 61 FD | 	drvl	local01
016c4 004 50 D8 61 FD | 	fltl	local02
016c8 005 EC F8 08 FC | 	wrpin	#124, local02
016cc 006 EC DE 11 FC | 	wxpin	local05, local02
016d0 007 58 D8 61 FD | 	drvl	local02
016d4 008             | LR__0061
016d4                 | 	orgh
016d4     AF F0 03 F6 | 	mov	ptra, fp
016d8     BF 00 A0 FD | 	call	#popregs_
016dc                 | _midi_start_ret
016dc     2D 00 64 FD | 	ret
016e0                 | 
016e0                 | '   until (rxbyte >= 0)
016e0                 | ' 
016e0                 | ' 
016e0                 | ' pub tx(b)
016e0                 | _tx
016e0     01 5A 05 F6 | 	mov	COUNT_, #1
016e4     B0 00 A0 FD | 	call	#pushregs_
016e8                 | ' 
016e8                 | ' '' Emit byte
016e8                 | ' 
016e8                 | '   wypin(txp, b)
016e8     0C BA 05 F1 | 	add	objptr, #12
016ec     DD D6 01 FB | 	rdlong	local01, objptr
016f0     0C BA 85 F1 | 	sub	objptr, #12
016f4     E7 D0 01 F6 | 	mov	arg02, arg01
016f8     EB D0 21 FC | 	wypin	arg02, local01
016fc                 | '   txflush()
016fc                 | ' 
016fc                 | ' '' Wait until last byte has finished
016fc                 | ' 
016fc                 | '   repeat
016fc                 | LR__0062
016fc                 | '     check := pinr(txp)
016fc     0C BA 05 F1 | 	add	objptr, #12
01700     DD CE 01 FB | 	rdlong	arg01, objptr
01704     0C BA 85 F1 | 	sub	objptr, #12
01708     70 09 B0 FD | 	call	#__system___pinread
0170c     00 C2 0D F2 | 	cmp	result1, #0 wz
01710     E8 FF 9F AD |  if_e	jmp	#LR__0062
01714     AF F0 03 F6 | 	mov	ptra, fp
01718     BF 00 A0 FD | 	call	#popregs_
0171c                 | _tx_ret
0171c     2D 00 64 FD | 	ret
01720                 | 
01720                 | ' 
01720                 | ' 
01720                 | ' '*************************************************************************
01720                 | ' '                                                                        *
01720                 | ' '  Text functions                                                        *
01720                 | ' '                                                                        *
01720                 | ' '*************************************************************************
01720                 | ' 
01720                 | ' pub outtextxy(x,y,text) | iii
01720                 | _Hn007_20210302_outtextxy
01720     0B 5A 05 F6 | 	mov	COUNT_, #11
01724     B0 00 A0 FD | 	call	#pushregs_
01728     E7 D6 01 F6 | 	mov	local01, arg01
0172c                 | ' 
0172c                 | ' ''--------- Output a string at position x,y - set the colors first
0172c                 | ' 
0172c                 | ' repeat iii from 0 to strsize(text)-1
0172c     00 D8 05 F6 | 	mov	local02, #0
01730     E9 CE 01 F6 | 	mov	arg01, arg03
01734     00 DA 05 F6 | 	mov	local03, #0
01738     D4 E8 9F FE | 	loc	pa,	#(@LR__0064-@LR__0063)
0173c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01740                 | LR__0063
01740     E7 DC C9 FA | 	rdbyte	local04, arg01 wz
01744     01 DA 05 51 |  if_ne	add	local03, #1
01748     01 CE 05 51 |  if_ne	add	arg01, #1
0174c     F0 FF 9F 5D |  if_ne	jmp	#LR__0063
01750                 | LR__0064
01750     ED C2 01 F6 | 	mov	result1, local03
01754     E1 DE 01 F6 | 	mov	local05, result1
01758     01 DE 85 F1 | 	sub	local05, #1
0175c     00 DE 5D F2 | 	cmps	local05, #0 wcz
01760     01 E0 05 16 |  if_a	mov	local06, #1
01764     01 E0 65 E6 |  if_be	neg	local06, #1
01768     F0 DE 01 F1 | 	add	local05, local06
0176c     64 D0 05 FD | 	qmul	arg02, #100
01770     18 E2 61 FD | 	getqx	local07
01774     EB E2 01 F1 | 	add	local07, local01
01778     C4 E8 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
0177c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01780                 | LR__0065
01780     F1 E4 01 F6 | 	mov	local08, local07
01784     EC E4 01 F1 | 	add	local08, local02
01788     02 E4 65 F0 | 	shl	local08, #2
0178c     A8 BA 05 F1 | 	add	objptr, #168
01790     DD E4 01 F1 | 	add	local08, objptr
01794     F2 E6 01 FB | 	rdlong	local09, local08
01798     FF E6 25 F5 | 	andn	local09, #255
0179c     E9 E8 01 F6 | 	mov	local10, arg03
017a0     EC E8 01 F1 | 	add	local10, local02
017a4     F4 EA C1 FA | 	rdbyte	local11, local10
017a8     F5 E6 41 F5 | 	or	local09, local11
017ac                 | '   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $FFFFFF00)  | byte[text+iii]
017ac     F2 E6 61 FC | 	wrlong	local09, local08
017b0     F0 D8 01 F1 | 	add	local02, local06
017b4     EF D8 09 F2 | 	cmp	local02, local05 wz
017b8     A8 BA 85 F1 | 	sub	objptr, #168
017bc     C0 FF 9F 5D |  if_ne	jmp	#LR__0065
017c0                 | LR__0066
017c0     AF F0 03 F6 | 	mov	ptra, fp
017c4     BF 00 A0 FD | 	call	#popregs_
017c8                 | _Hn007_20210302_outtextxy_ret
017c8     2D 00 64 FD | 	ret
017cc                 | 
017cc                 | ' 
017cc                 | ' 
017cc                 | ' 
017cc                 | ' pub write(text) | iii,c,ncx,ncy
017cc                 | _Hn007_20210302_write
017cc     0E 5A 05 F6 | 	mov	COUNT_, #14
017d0     B0 00 A0 FD | 	call	#pushregs_
017d4     E7 D6 01 F6 | 	mov	local01, arg01
017d8     17 00 00 FF 
017dc     8C BB 05 F1 | 	add	objptr, ##12172
017e0     DD D8 01 FB | 	rdlong	local02, objptr
017e4     18 D8 65 F0 | 	shl	local02, #24
017e8     04 BA 05 F1 | 	add	objptr, #4
017ec     DD DA 01 FB | 	rdlong	local03, objptr
017f0     10 DA 65 F0 | 	shl	local03, #16
017f4     ED D8 01 F1 | 	add	local02, local03
017f8                 | ' 
017f8                 | ' ''--------- Output a string at the cursor position x,y, move the cursor
017f8                 | ' 
017f8                 | ' c:=write_color<<24+write_background<<16
017f8                 | ' 'debug(uhex_long(write_color))
017f8                 | ' ncy:=cursor_y
017f8     07 BA 85 F1 | 	sub	objptr, #7
017fc     DD DC C1 FA | 	rdbyte	local04, objptr
01800                 | ' ncx:=cursor_x+strsize(text)
01800     01 BA 85 F1 | 	sub	objptr, #1
01804     DD DE C1 FA | 	rdbyte	local05, objptr
01808     17 00 00 FF 
0180c     88 BB 85 F1 | 	sub	objptr, ##12168
01810     EB CE 01 F6 | 	mov	arg01, local01
01814     00 E0 05 F6 | 	mov	local06, #0
01818     F4 E7 9F FE | 	loc	pa,	#(@LR__0068-@LR__0067)
0181c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01820                 | LR__0067
01820     E7 E2 C9 FA | 	rdbyte	local07, arg01 wz
01824     01 E0 05 51 |  if_ne	add	local06, #1
01828     01 CE 05 51 |  if_ne	add	arg01, #1
0182c     F0 FF 9F 5D |  if_ne	jmp	#LR__0067
01830                 | LR__0068
01830     F0 C2 01 F6 | 	mov	result1, local06
01834     F0 DE 01 F1 | 	add	local05, local06
01838     EF E4 01 F6 | 	mov	local08, local05
0183c     D0 E7 9F FE | 	loc	pa,	#(@LR__0070-@LR__0069)
01840     93 00 A0 FD | 	call	#FCACHE_LOAD_
01844                 | ' repeat while ncx>99
01844                 | LR__0069
01844     63 E4 5D F2 | 	cmps	local08, #99 wcz
01848                 | '   ncx-=100
01848     64 E4 85 11 |  if_a	sub	local08, #100
0184c                 | '   ncy+=1
0184c     01 DC 05 11 |  if_a	add	local04, #1
01850     F0 FF 9F 1D |  if_a	jmp	#LR__0069
01854                 | LR__0070
01854                 | ' repeat while ncy>29
01854                 | LR__0071
01854     1D DC 5D F2 | 	cmps	local04, #29 wcz
01858     28 00 90 ED |  if_be	jmp	#LR__0072
0185c                 | '   ncy-=1
0185c     01 DC 85 F1 | 	sub	local04, #1
01860                 | '   scrollup()
01860     DC 01 B0 FD | 	call	#_Hn007_20210302_scrollup
01864                 | '   cursor_y-=1
01864     17 00 00 FF 
01868     89 BB 05 F1 | 	add	objptr, ##12169
0186c     DD DE C1 FA | 	rdbyte	local05, objptr
01870     01 DE 85 F1 | 	sub	local05, #1
01874     DD DE 41 FC | 	wrbyte	local05, objptr
01878     17 00 00 FF 
0187c     89 BB 85 F1 | 	sub	objptr, ##12169
01880     D0 FF 9F FD | 	jmp	#LR__0071
01884                 | LR__0072
01884                 | ' 
01884                 | ' repeat iii from 0 to strsize(text)-1
01884     00 E6 05 F6 | 	mov	local09, #0
01888     EB CE 01 F6 | 	mov	arg01, local01
0188c     00 E0 05 F6 | 	mov	local06, #0
01890     7C E7 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
01894     93 00 A0 FD | 	call	#FCACHE_LOAD_
01898                 | LR__0073
01898     E7 E2 C9 FA | 	rdbyte	local07, arg01 wz
0189c     01 E0 05 51 |  if_ne	add	local06, #1
018a0     01 CE 05 51 |  if_ne	add	arg01, #1
018a4     F0 FF 9F 5D |  if_ne	jmp	#LR__0073
018a8                 | LR__0074
018a8     F0 C2 01 F6 | 	mov	result1, local06
018ac     E1 E8 01 F6 | 	mov	local10, result1
018b0     01 E8 85 F1 | 	sub	local10, #1
018b4     00 E8 5D F2 | 	cmps	local10, #0 wcz
018b8     01 EA 05 16 |  if_a	mov	local11, #1
018bc     01 EA 65 E6 |  if_be	neg	local11, #1
018c0     F5 E8 01 F1 | 	add	local10, local11
018c4     90 E7 9F FE | 	loc	pa,	#(@LR__0076-@LR__0075)
018c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
018cc                 | LR__0075
018cc     17 00 00 FF 
018d0     89 BB 05 F1 | 	add	objptr, ##12169
018d4     DD EC C1 FA | 	rdbyte	local12, objptr
018d8     64 EC 05 FD | 	qmul	local12, #100
018dc     18 EE 61 FD | 	getqx	local13
018e0     01 BA 85 F1 | 	sub	objptr, #1
018e4     DD EC C1 FA | 	rdbyte	local12, objptr
018e8     F6 EE 01 F1 | 	add	local13, local12
018ec     F3 EE 01 F1 | 	add	local13, local09
018f0     02 EE 65 F0 | 	shl	local13, #2
018f4     17 00 00 FF 
018f8     E0 BA 85 F1 | 	sub	objptr, ##12000
018fc     DD EE 01 F1 | 	add	local13, objptr
01900     F7 F0 01 FB | 	rdlong	local14, local13
01904     7F 00 00 FF 
01908     FF F1 05 F5 | 	and	local14, ##65535
0190c     EC F0 41 F5 | 	or	local14, local02
01910                 | ' 
01910                 | '   buf[100*cursor_y+cursor_x+iii]:=buf[100*cursor_y+cursor_x+iii] &$FFFF | c
01910     F7 F0 61 FC | 	wrlong	local14, local13
01914     F5 E6 01 F1 | 	add	local09, local11
01918     F4 E6 09 F2 | 	cmp	local09, local10 wz
0191c     A8 BA 85 F1 | 	sub	objptr, #168
01920     A8 FF 9F 5D |  if_ne	jmp	#LR__0075
01924                 | LR__0076
01924                 | ' 
01924                 | ' outtextxy(cursor_x,cursor_y,text)
01924     17 00 00 FF 
01928     88 BB 05 F1 | 	add	objptr, ##12168
0192c     DD CE C1 FA | 	rdbyte	arg01, objptr
01930     01 BA 05 F1 | 	add	objptr, #1
01934     DD D0 C1 FA | 	rdbyte	arg02, objptr
01938     17 00 00 FF 
0193c     89 BB 85 F1 | 	sub	objptr, ##12169
01940     EB D2 01 F6 | 	mov	arg03, local01
01944     D8 FD BF FD | 	call	#_Hn007_20210302_outtextxy
01948                 | ' 
01948                 | ' cursor_x:=ncx
01948     17 00 00 FF 
0194c     88 BB 05 F1 | 	add	objptr, ##12168
01950     DD E4 41 FC | 	wrbyte	local08, objptr
01954                 | ' cursor_y:=ncy
01954     01 BA 05 F1 | 	add	objptr, #1
01958     DD DC 41 FC | 	wrbyte	local04, objptr
0195c     17 00 00 FF 
01960     89 BB 85 F1 | 	sub	objptr, ##12169
01964     AF F0 03 F6 | 	mov	ptra, fp
01968     BF 00 A0 FD | 	call	#popregs_
0196c                 | _Hn007_20210302_write_ret
0196c     2D 00 64 FD | 	ret
01970                 | 
01970                 | ' 
01970                 | ' pub writeln(text)
01970                 | _Hn007_20210302_writeln
01970     01 5A 05 F6 | 	mov	COUNT_, #1
01974     B0 00 A0 FD | 	call	#pushregs_
01978                 | ' 
01978                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
01978                 | ' 
01978                 | ' write(text)
01978     50 FE BF FD | 	call	#_Hn007_20210302_write
0197c                 | ' cursor_x:=0
0197c     17 00 00 FF 
01980     88 BB 05 F1 | 	add	objptr, ##12168
01984     DD 00 48 FC | 	wrbyte	#0, objptr
01988                 | ' cursor_y+=1
01988     01 BA 05 F1 | 	add	objptr, #1
0198c     DD D6 C1 FA | 	rdbyte	local01, objptr
01990     01 D6 05 F1 | 	add	local01, #1
01994     DD D6 41 FC | 	wrbyte	local01, objptr
01998                 | ' if (cursor_y>29)
01998     DD D6 C1 FA | 	rdbyte	local01, objptr
0199c     17 00 00 FF 
019a0     89 BB 85 F1 | 	sub	objptr, ##12169
019a4     1D D6 5D F2 | 	cmps	local01, #29 wcz
019a8     18 00 90 ED |  if_be	jmp	#LR__0077
019ac                 | '   scrollup()
019ac     90 00 B0 FD | 	call	#_Hn007_20210302_scrollup
019b0                 | '   cursor_y:=29
019b0     17 00 00 FF 
019b4     89 BB 05 F1 | 	add	objptr, ##12169
019b8     DD 3A 48 FC | 	wrbyte	#29, objptr
019bc     17 00 00 FF 
019c0     89 BB 85 F1 | 	sub	objptr, ##12169
019c4                 | LR__0077
019c4     AF F0 03 F6 | 	mov	ptra, fp
019c8     BF 00 A0 FD | 	call	#popregs_
019cc                 | _Hn007_20210302_writeln_ret
019cc     2D 00 64 FD | 	ret
019d0                 | 
019d0                 | ' 
019d0                 | ' pub cls(fc,bc)   :c
019d0                 | _Hn007_20210302_cls
019d0     04 5A 05 F6 | 	mov	COUNT_, #4
019d4     B0 00 A0 FD | 	call	#pushregs_
019d8     E7 D6 01 F6 | 	mov	local01, arg01
019dc     E8 D8 01 F6 | 	mov	local02, arg02
019e0     EB DA 01 F6 | 	mov	local03, local01
019e4     18 DA 65 F0 | 	shl	local03, #24
019e8     EC DC 01 F6 | 	mov	local04, local02
019ec     10 DC 65 F0 | 	shl	local04, #16
019f0     EE DA 01 F1 | 	add	local03, local04
019f4     20 DA 05 F1 | 	add	local03, #32
019f8                 | ' 
019f8                 | ' ''---------- Clear the screen, set its foreground/background color
019f8                 | ' 
019f8                 | ' c:=fc<<24+bc<<16+$20
019f8     A8 BA 05 F1 | 	add	objptr, #168
019fc     DD CE 01 F6 | 	mov	arg01, objptr
01a00     A8 BA 85 F1 | 	sub	objptr, #168
01a04                 | ' longfill(@buf,c,3000)
01a04     ED D0 01 F6 | 	mov	arg02, local03
01a08     05 00 00 FF 
01a0c     B8 D3 05 F6 | 	mov	arg03, ##3000
01a10     A8 00 A0 FD | 	call	#\builtin_longfill_
01a14                 | '  setwritecolors(fc,bc)
01a14                 | ' 
01a14                 | ' ''---------- Set colors for write and writeln
01a14                 | ' 
01a14                 | ' write_color:=ff
01a14     17 00 00 FF 
01a18     8C BB 05 F1 | 	add	objptr, ##12172
01a1c     DD D6 61 FC | 	wrlong	local01, objptr
01a20                 | ' write_background:=bb
01a20     04 BA 05 F1 | 	add	objptr, #4
01a24     DD D8 61 FC | 	wrlong	local02, objptr
01a28     17 00 00 FF 
01a2c     90 BB 85 F1 | 	sub	objptr, ##12176
01a30     ED C2 01 F6 | 	mov	result1, local03
01a34     AF F0 03 F6 | 	mov	ptra, fp
01a38     BF 00 A0 FD | 	call	#popregs_
01a3c                 | _Hn007_20210302_cls_ret
01a3c     2D 00 64 FD | 	ret
01a40                 | 
01a40                 | ' 
01a40                 | ' pub scrollup() | i
01a40                 | _Hn007_20210302_scrollup
01a40     02 5A 05 F6 | 	mov	COUNT_, #2
01a44     B0 00 A0 FD | 	call	#pushregs_
01a48     A8 BA 05 F1 | 	add	objptr, #168
01a4c     DD CE 01 F6 | 	mov	arg01, objptr
01a50     A8 BA 85 F1 | 	sub	objptr, #168
01a54     E7 D0 01 F6 | 	mov	arg02, arg01
01a58     90 D1 05 F1 | 	add	arg02, #400
01a5c                 | ' 
01a5c                 | ' ''-----------  Scroll the screen one line up
01a5c                 | ' 
01a5c                 | ' longmove(@buf,@buf+400,2900)
01a5c     05 00 00 FF 
01a60     54 D3 05 F6 | 	mov	arg03, ##2900
01a64     A4 05 B0 FD | 	call	#__system__longmove
01a68     16 00 00 FF 
01a6c     F8 BB 05 F1 | 	add	objptr, ##11768
01a70     DD D6 01 F6 | 	mov	local01, objptr
01a74     16 00 00 FF 
01a78     F8 BB 85 F1 | 	sub	objptr, ##11768
01a7c     9C E5 9F FE | 	loc	pa,	#(@LR__0080-@LR__0078)
01a80     93 00 A0 FD | 	call	#FCACHE_LOAD_
01a84                 | LR__0078
01a84     64 0C DC FC | 	rep	@LR__0081, #100
01a88                 | LR__0079
01a88     EB D8 01 FB | 	rdlong	local02, local01
01a8c     80 FF 7F FF 
01a90     00 D8 05 F5 | 	and	local02, ##-65536
01a94     20 D8 45 F5 | 	or	local02, #32
01a98                 | '   buf[i]:=(buf[i] & $FFFF0000) | 32
01a98     EB D8 61 FC | 	wrlong	local02, local01
01a9c     04 D6 05 F1 | 	add	local01, #4
01aa0                 | LR__0080
01aa0                 | LR__0081
01aa0     AF F0 03 F6 | 	mov	ptra, fp
01aa4     BF 00 A0 FD | 	call	#popregs_
01aa8                 | _Hn007_20210302_scrollup_ret
01aa8     2D 00 64 FD | 	ret
01aac                 | 
01aac                 | ' 
01aac                 | ' 
01aac                 | ' pub inttostr(i):result |q,pos,k,j
01aac                 | _Hn007_20210302_inttostr
01aac     07 5A 05 F6 | 	mov	COUNT_, #7
01ab0     B0 00 A0 FD | 	call	#pushregs_
01ab4     E7 D6 01 F6 | 	mov	local01, arg01
01ab8                 | ' 
01ab8                 | ' ''---------- Convert a integer to dec string, return a pointer
01ab8                 | ' 
01ab8                 | ' j:=i
01ab8     EB D8 09 F6 | 	mov	local02, local01 wz
01abc                 | ' pos:=10
01abc     0A DA 05 F6 | 	mov	local03, #10
01ac0                 | ' k:=0
01ac0     00 DC 05 F6 | 	mov	local04, #0
01ac4                 | ' 
01ac4                 | ' if (j==0)
01ac4     20 00 90 5D |  if_ne	jmp	#LR__0082
01ac8                 | '   n_string[0]:=48
01ac8     17 00 00 FF 
01acc     A8 BB 05 F1 | 	add	objptr, ##12200
01ad0     DD 60 48 FC | 	wrbyte	#48, objptr
01ad4                 | '   n_string[1]:=0
01ad4     01 BA 05 F1 | 	add	objptr, #1
01ad8     DD 00 48 FC | 	wrbyte	#0, objptr
01adc     17 00 00 FF 
01ae0     A9 BB 85 F1 | 	sub	objptr, ##12201
01ae4                 | ' 
01ae4                 | ' else
01ae4     F4 00 90 FD | 	jmp	#LR__0089
01ae8                 | LR__0082
01ae8                 | '   if (j<0)
01ae8     00 D8 5D F2 | 	cmps	local02, #0 wcz
01aec                 | '     j:=0-j
01aec     EC D8 61 C6 |  if_b	neg	local02, local02
01af0                 | '     k:=45
01af0     2D DC 05 C6 |  if_b	mov	local04, #45
01af4                 | ' 
01af4                 | '   n_string[11]:=0
01af4     17 00 00 FF 
01af8     B3 BB 05 F1 | 	add	objptr, ##12211
01afc     DD 00 48 FC | 	wrbyte	#0, objptr
01b00     17 00 00 FF 
01b04     B3 BB 85 F1 | 	sub	objptr, ##12211
01b08     3C E5 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
01b0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01b10                 | '   repeat while (pos>-1)
01b10                 | LR__0083
01b10     FF FF 7F FF 
01b14     FF DB 5D F2 | 	cmps	local03, ##-1 wcz
01b18     3C 00 90 ED |  if_be	jmp	#LR__0085
01b1c     EC 10 02 F6 | 	mov	muldiva_, local02
01b20     0A 12 06 F6 | 	mov	muldivb_, #10
01b24     D0 00 A0 FD | 	call	#divide_
01b28     08 DF 01 F6 | 	mov	local05, muldiva_
01b2c                 | '     q:=j//10
01b2c                 | '     q:=48+q
01b2c     30 DE 05 F1 | 	add	local05, #48
01b30     ED E0 01 F6 | 	mov	local06, local03
01b34     17 00 00 FF 
01b38     A8 BB 05 F1 | 	add	objptr, ##12200
01b3c     DD E0 01 F1 | 	add	local06, objptr
01b40                 | '     n_string[pos]:=q
01b40     F0 DE 41 FC | 	wrbyte	local05, local06
01b44                 | '     j:=j/10
01b44     09 D9 01 F6 | 	mov	local02, muldivb_
01b48                 | '     pos-=1
01b48     01 DA 85 F1 | 	sub	local03, #1
01b4c     17 00 00 FF 
01b50     A8 BB 85 F1 | 	sub	objptr, ##12200
01b54     B8 FF 9F FD | 	jmp	#LR__0083
01b58                 | LR__0084
01b58                 | LR__0085
01b58                 | '   repeat while n_string[0]==48
01b58                 | LR__0086
01b58     17 00 00 FF 
01b5c     A8 BB 05 F1 | 	add	objptr, ##12200
01b60     DD E2 C1 FA | 	rdbyte	local07, objptr
01b64     17 00 00 FF 
01b68     A8 BB 85 F1 | 	sub	objptr, ##12200
01b6c     30 E2 0D F2 | 	cmp	local07, #48 wz
01b70     28 00 90 5D |  if_ne	jmp	#LR__0087
01b74     17 00 00 FF 
01b78     A8 BB 05 F1 | 	add	objptr, ##12200
01b7c     DD CE 01 F6 | 	mov	arg01, objptr
01b80     17 00 00 FF 
01b84     A8 BB 85 F1 | 	sub	objptr, ##12200
01b88     E7 D0 01 F6 | 	mov	arg02, arg01
01b8c     01 D0 05 F1 | 	add	arg02, #1
01b90                 | '     bytemove(@n_string,@n_string+1,12)
01b90     0C D2 05 F6 | 	mov	arg03, #12
01b94     E4 03 B0 FD | 	call	#__system____builtin_memmove
01b98     BC FF 9F FD | 	jmp	#LR__0086
01b9c                 | LR__0087
01b9c                 | ' 
01b9c                 | '   if k==45
01b9c     2D DC 0D F2 | 	cmp	local04, #45 wz
01ba0     38 00 90 5D |  if_ne	jmp	#LR__0088
01ba4     17 00 00 FF 
01ba8     A8 BB 05 F1 | 	add	objptr, ##12200
01bac     DD D0 01 F6 | 	mov	arg02, objptr
01bb0     17 00 00 FF 
01bb4     A8 BB 85 F1 | 	sub	objptr, ##12200
01bb8     E8 CE 01 F6 | 	mov	arg01, arg02
01bbc     01 CE 05 F1 | 	add	arg01, #1
01bc0                 | '      bytemove(@n_string+1,@n_string,12)
01bc0     0C D2 05 F6 | 	mov	arg03, #12
01bc4     B4 03 B0 FD | 	call	#__system____builtin_memmove
01bc8                 | '      n_string[0]:=k
01bc8     17 00 00 FF 
01bcc     A8 BB 05 F1 | 	add	objptr, ##12200
01bd0     DD DC 41 FC | 	wrbyte	local04, objptr
01bd4     17 00 00 FF 
01bd8     A8 BB 85 F1 | 	sub	objptr, ##12200
01bdc                 | LR__0088
01bdc                 | LR__0089
01bdc     17 00 00 FF 
01be0     A8 BB 05 F1 | 	add	objptr, ##12200
01be4     DD C2 01 F6 | 	mov	result1, objptr
01be8     17 00 00 FF 
01bec     A8 BB 85 F1 | 	sub	objptr, ##12200
01bf0                 | ' 
01bf0                 | ' q:=@n_string
01bf0                 | ' return q
01bf0     AF F0 03 F6 | 	mov	ptra, fp
01bf4     BF 00 A0 FD | 	call	#popregs_
01bf8                 | _Hn007_20210302_inttostr_ret
01bf8     2D 00 64 FD | 	ret
01bfc                 | 
01bfc                 | ' 
01bfc                 | ' 
01bfc                 | ' pub setmode(mode)
01bfc                 | _Hn007_20210302_setmode
01bfc                 | ' 
01bfc                 | ' if (mode==0)
01bfc     00 CE 0D F2 | 	cmp	arg01, #0 wz
01c00     8C 00 90 5D |  if_ne	jmp	#LR__0092
01c04                 | ' 
01c04                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 16          'before sync
01c04     17 00 00 FF 
01c08     B4 BB 05 F1 | 	add	objptr, ##12212
01c0c     80 40 B8 FF 
01c10     DD 20 68 FC | 	wrlong	##1887502352, objptr
01c14                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
01c14     04 BA 05 F1 | 	add	objptr, #4
01c18     80 40 B8 FF 
01c1c     DD A0 68 FC | 	wrlong	##1887502416, objptr
01c20                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
01c20     04 BA 05 F1 | 	add	objptr, #4
01c24     80 40 B8 FF 
01c28     DD 28 68 FC | 	wrlong	##1887502356, objptr
01c2c                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 1024        'visible 1024
01c2c     04 BA 05 F1 | 	add	objptr, #4
01c30     82 40 B8 FF 
01c34     DD 00 68 FC | 	wrlong	##1887503360, objptr
01c38                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 112         'immediate 112
01c38     04 BA 05 F1 | 	add	objptr, #4
01c3c     80 40 B8 FF 
01c40     DD E0 68 FC | 	wrlong	##1887502448, objptr
01c44                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01c44     04 BA 05 F1 | 	add	objptr, #4
01c48     00 44 90 FF 
01c4c     DD 10 68 FC | 	wrlong	##545783816, objptr
01c50                 | '   timings[6]:= 48
01c50     04 BA 05 F1 | 	add	objptr, #4
01c54     DD 60 68 FC | 	wrlong	#48, objptr
01c58                 | '   timings[7]:= 16
01c58     04 BA 05 F1 | 	add	objptr, #4
01c5c     DD 20 68 FC | 	wrlong	#16, objptr
01c60                 | '   timings[8]:= 16
01c60     04 BA 05 F1 | 	add	objptr, #4
01c64     DD 20 68 FC | 	wrlong	#16, objptr
01c68                 | '   timings[9]:= 16
01c68     04 BA 05 F1 | 	add	objptr, #4
01c6c     DD 20 68 FC | 	wrlong	#16, objptr
01c70     17 00 00 FF 
01c74     D8 BB 85 F1 | 	sub	objptr, ##12248
01c78                 | ' 
01c78                 | '   clkfreq:=354693878
01c78     19 92 8A FF 
01c7c     14 EC 6D FC | 	wrlong	##354693878, #20
01c80                 | '   org
01c80     84 E3 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
01c84     93 00 A0 FD | 	call	#FCACHE_LOAD_
01c88                 | LR__0090
01c88 000             | 	org	0
01c88 000 B6 E1 80 FF 
01c8c 001 00 F6 65 FD | 	hubset	##29584635
01c90 002             | LR__0091
01c90                 | 	orgh
01c90                 | LR__0092
01c90                 | ' 
01c90                 | ' 
01c90                 | ' if (mode==1)   ' 1026 px per line
01c90     01 CE 0D F2 | 	cmp	arg01, #1 wz
01c94     8C 00 90 5D |  if_ne	jmp	#LR__0095
01c98                 | ' 
01c98                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 30          'before sync
01c98     17 00 00 FF 
01c9c     B4 BB 05 F1 | 	add	objptr, ##12212
01ca0     80 40 B8 FF 
01ca4     DD 3C 68 FC | 	wrlong	##1887502366, objptr
01ca8                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
01ca8     04 BA 05 F1 | 	add	objptr, #4
01cac     80 40 B8 FF 
01cb0     DD A0 68 FC | 	wrlong	##1887502416, objptr
01cb4                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
01cb4     04 BA 05 F1 | 	add	objptr, #4
01cb8     80 40 B8 FF 
01cbc     DD 28 68 FC | 	wrlong	##1887502356, objptr
01cc0                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 896         'visible 896
01cc0     04 BA 05 F1 | 	add	objptr, #4
01cc4     81 40 B8 FF 
01cc8     DD 00 6B FC | 	wrlong	##1887503232, objptr
01ccc                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 48          'immediate 48
01ccc     04 BA 05 F1 | 	add	objptr, #4
01cd0     80 40 B8 FF 
01cd4     DD 60 68 FC | 	wrlong	##1887502384, objptr
01cd8                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01cd8     04 BA 05 F1 | 	add	objptr, #4
01cdc     00 44 90 FF 
01ce0     DD 10 68 FC | 	wrlong	##545783816, objptr
01ce4                 | '   timings[6]:= 24
01ce4     04 BA 05 F1 | 	add	objptr, #4
01ce8     DD 30 68 FC | 	wrlong	#24, objptr
01cec                 | '   timings[7]:= 32
01cec     04 BA 05 F1 | 	add	objptr, #4
01cf0     DD 40 68 FC | 	wrlong	#32, objptr
01cf4                 | '   timings[8]:= 32
01cf4     04 BA 05 F1 | 	add	objptr, #4
01cf8     DD 40 68 FC | 	wrlong	#32, objptr
01cfc                 | '   timings[9]:= 32
01cfc     04 BA 05 F1 | 	add	objptr, #4
01d00     DD 40 68 FC | 	wrlong	#32, objptr
01d04     17 00 00 FF 
01d08     D8 BB 85 F1 | 	sub	objptr, ##12248
01d0c                 | ' 
01d0c                 | '   clkfreq:=319215686
01d0c     6C 83 89 FF 
01d10     14 8C 6C FC | 	wrlong	##319215686, #20
01d14                 | '   org
01d14     F0 E2 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
01d18     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d1c                 | LR__0093
01d1c 000             | 	org	0
01d1c 000 96 E5 80 FF 
01d20 001 00 F6 67 FD | 	hubset	##30092795
01d24 002             | LR__0094
01d24                 | 	orgh
01d24                 | LR__0095
01d24                 | ' 
01d24                 | ' 
01d24                 | ' if (mode==2) ' 912 pixes per line     ' 283_751_600 80x PAL  - real settings: 64 908 283750000 - 0.9999944
01d24     02 CE 0D F2 | 	cmp	arg01, #2 wz
01d28     8C 00 90 5D |  if_ne	jmp	#LR__0098
01d2c                 | ' 
01d2c                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 16           'before sync
01d2c     17 00 00 FF 
01d30     B4 BB 05 F1 | 	add	objptr, ##12212
01d34     80 40 B8 FF 
01d38     DD 20 68 FC | 	wrlong	##1887502352, objptr
01d3c                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 64           'sync
01d3c     04 BA 05 F1 | 	add	objptr, #4
01d40     80 40 B8 FF 
01d44     DD 80 68 FC | 	wrlong	##1887502400, objptr
01d48                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 16           'before visible
01d48     04 BA 05 F1 | 	add	objptr, #4
01d4c     80 40 B8 FF 
01d50     DD 20 68 FC | 	wrlong	##1887502352, objptr
01d54                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816          'visible 1024
01d54     04 BA 05 F1 | 	add	objptr, #4
01d58     81 40 B8 FF 
01d5c     DD 60 6A FC | 	wrlong	##1887503152, objptr
01d60                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8            'immediate 112
01d60     04 BA 05 F1 | 	add	objptr, #4
01d64     80 40 B8 FF 
01d68     DD 10 68 FC | 	wrlong	##1887502344, objptr
01d6c                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8            'imm+lut, 1 char
01d6c     04 BA 05 F1 | 	add	objptr, #4
01d70     00 44 90 FF 
01d74     DD 10 68 FC | 	wrlong	##545783816, objptr
01d78                 | '   timings[6]:= 8
01d78     04 BA 05 F1 | 	add	objptr, #4
01d7c     DD 10 68 FC | 	wrlong	#8, objptr
01d80                 | '   timings[7]:= 32
01d80     04 BA 05 F1 | 	add	objptr, #4
01d84     DD 40 68 FC | 	wrlong	#32, objptr
01d88                 | '   timings[8]:= 64
01d88     04 BA 05 F1 | 	add	objptr, #4
01d8c     DD 80 68 FC | 	wrlong	#64, objptr
01d90                 | ' 
01d90                 | '   timings[9]:= 32
01d90     04 BA 05 F1 | 	add	objptr, #4
01d94     DD 40 68 FC | 	wrlong	#32, objptr
01d98     17 00 00 FF 
01d9c     D8 BB 85 F1 | 	sub	objptr, ##12248
01da0                 | ' 
01da0                 | '   clkfreq:=283750000
01da0     D7 74 88 FF 
01da4     14 E0 6C FC | 	wrlong	##283750000, #20
01da8                 | '   org
01da8     5C E2 9F FE | 	loc	pa,	#(@LR__0097-@LR__0096)
01dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
01db0                 | LR__0096
01db0 000             | 	org	0
01db0 000 C5 FF 80 FF 
01db4 001 00 F6 67 FD | 	hubset	##33524731
01db8 002             | LR__0097
01db8                 | 	orgh
01db8                 | LR__0098
01db8                 | ' 
01db8                 | ' if (mode==256)
01db8     00 CF 0D F2 | 	cmp	arg01, #256 wz
01dbc     8C 00 90 5D |  if_ne	jmp	#LR__0101
01dc0                 | ' 
01dc0                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
01dc0     17 00 00 FF 
01dc4     B4 BB 05 F1 | 	add	objptr, ##12212
01dc8     80 40 B8 FF 
01dcc     DD A0 68 FC | 	wrlong	##1887502416, objptr
01dd0                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 160         'sync
01dd0     04 BA 05 F1 | 	add	objptr, #4
01dd4     80 40 B8 FF 
01dd8     DD 40 69 FC | 	wrlong	##1887502496, objptr
01ddc                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 84          'before visible
01ddc     04 BA 05 F1 | 	add	objptr, #4
01de0     80 40 B8 FF 
01de4     DD A8 68 FC | 	wrlong	##1887502420, objptr
01de8                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
01de8     04 BA 05 F1 | 	add	objptr, #4
01dec     81 40 B8 FF 
01df0     DD 60 6A FC | 	wrlong	##1887503152, objptr
01df4                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
01df4     04 BA 05 F1 | 	add	objptr, #4
01df8     80 40 B8 FF 
01dfc     DD 10 68 FC | 	wrlong	##1887502344, objptr
01e00                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01e00     04 BA 05 F1 | 	add	objptr, #4
01e04     00 44 90 FF 
01e08     DD 10 68 FC | 	wrlong	##545783816, objptr
01e0c                 | '   timings[6]:= 8
01e0c     04 BA 05 F1 | 	add	objptr, #4
01e10     DD 10 68 FC | 	wrlong	#8, objptr
01e14                 | '   timings[7]:= 8
01e14     04 BA 05 F1 | 	add	objptr, #4
01e18     DD 10 68 FC | 	wrlong	#8, objptr
01e1c                 | '   timings[8]:= 12
01e1c     04 BA 05 F1 | 	add	objptr, #4
01e20     DD 18 68 FC | 	wrlong	#12, objptr
01e24                 | '   timings[9]:= 8
01e24     04 BA 05 F1 | 	add	objptr, #4
01e28     DD 10 68 FC | 	wrlong	#8, objptr
01e2c     17 00 00 FF 
01e30     D8 BB 85 F1 | 	sub	objptr, ##12248
01e34                 | ' 
01e34                 | '   clkfreq:=357959184
01e34     03 AB 8A FF 
01e38     14 20 6C FC | 	wrlong	##357959184, #20
01e3c                 | '   org
01e3c     C8 E1 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
01e40     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e44                 | LR__0099
01e44 000             | 	org	0
01e44 000 B2 E1 80 FF 
01e48 001 00 F6 65 FD | 	hubset	##29582587
01e4c 002             | LR__0100
01e4c                 | 	orgh
01e4c                 | LR__0101
01e4c                 | ' 
01e4c                 | ' if (mode==257)  '1026 px
01e4c     01 CF 0D F2 | 	cmp	arg01, #257 wz
01e50     8C 00 90 5D |  if_ne	jmp	#LR__0104
01e54                 | ' 
01e54                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
01e54     17 00 00 FF 
01e58     B4 BB 05 F1 | 	add	objptr, ##12212
01e5c     80 40 B8 FF 
01e60     DD A0 68 FC | 	wrlong	##1887502416, objptr
01e64                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 50          'sync
01e64     04 BA 05 F1 | 	add	objptr, #4
01e68     80 40 B8 FF 
01e6c     DD 64 68 FC | 	wrlong	##1887502386, objptr
01e70                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 80          'before visible
01e70     04 BA 05 F1 | 	add	objptr, #4
01e74     80 40 B8 FF 
01e78     DD A0 68 FC | 	wrlong	##1887502416, objptr
01e7c                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
01e7c     04 BA 05 F1 | 	add	objptr, #4
01e80     81 40 B8 FF 
01e84     DD 60 6A FC | 	wrlong	##1887503152, objptr
01e88                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
01e88     04 BA 05 F1 | 	add	objptr, #4
01e8c     80 40 B8 FF 
01e90     DD 10 68 FC | 	wrlong	##1887502344, objptr
01e94                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01e94     04 BA 05 F1 | 	add	objptr, #4
01e98     00 44 90 FF 
01e9c     DD 10 68 FC | 	wrlong	##545783816, objptr
01ea0                 | '   timings[6]:= 8
01ea0     04 BA 05 F1 | 	add	objptr, #4
01ea4     DD 10 68 FC | 	wrlong	#8, objptr
01ea8                 | '   timings[7]:= 8
01ea8     04 BA 05 F1 | 	add	objptr, #4
01eac     DD 10 68 FC | 	wrlong	#8, objptr
01eb0                 | '   timings[8]:= 12
01eb0     04 BA 05 F1 | 	add	objptr, #4
01eb4     DD 18 68 FC | 	wrlong	#12, objptr
01eb8                 | '   timings[9]:= 8
01eb8     04 BA 05 F1 | 	add	objptr, #4
01ebc     DD 10 68 FC | 	wrlong	#8, objptr
01ec0     17 00 00 FF 
01ec4     D8 BB 85 F1 | 	sub	objptr, ##12248
01ec8                 | ' 
01ec8                 | '   clkfreq:=322162162
01ec8     E6 99 89 FF 
01ecc     14 E4 6F FC | 	wrlong	##322162162, #20
01ed0                 | '   org
01ed0     34 E1 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
01ed4     93 00 A0 FD | 	call	#FCACHE_LOAD_
01ed8                 | LR__0102
01ed8 000             | 	org	0
01ed8 000 29 C9 80 FF 
01edc 001 00 F6 67 FD | 	hubset	##26366971
01ee0 002             | LR__0103
01ee0                 | 	orgh
01ee0                 | LR__0104
01ee0                 | ' 
01ee0                 | ' if (mode==258)  '912 px
01ee0     02 CF 0D F2 | 	cmp	arg01, #258 wz
01ee4     8C 00 90 5D |  if_ne	jmp	#LR__0107
01ee8                 | ' 
01ee8                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 24          'before sync
01ee8     17 00 00 FF 
01eec     B4 BB 05 F1 | 	add	objptr, ##12212
01ef0     80 40 B8 FF 
01ef4     DD 30 68 FC | 	wrlong	##1887502360, objptr
01ef8                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 48         'sync
01ef8     04 BA 05 F1 | 	add	objptr, #4
01efc     80 40 B8 FF 
01f00     DD 60 68 FC | 	wrlong	##1887502384, objptr
01f04                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 24          'before visible
01f04     04 BA 05 F1 | 	add	objptr, #4
01f08     80 40 B8 FF 
01f0c     DD 30 68 FC | 	wrlong	##1887502360, objptr
01f10                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
01f10     04 BA 05 F1 | 	add	objptr, #4
01f14     81 40 B8 FF 
01f18     DD 60 6A FC | 	wrlong	##1887503152, objptr
01f1c                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
01f1c     04 BA 05 F1 | 	add	objptr, #4
01f20     80 40 B8 FF 
01f24     DD 10 68 FC | 	wrlong	##1887502344, objptr
01f28                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01f28     04 BA 05 F1 | 	add	objptr, #4
01f2c     00 44 90 FF 
01f30     DD 10 68 FC | 	wrlong	##545783816, objptr
01f34                 | '   timings[6]:= 8
01f34     04 BA 05 F1 | 	add	objptr, #4
01f38     DD 10 68 FC | 	wrlong	#8, objptr
01f3c                 | '   timings[7]:= 8
01f3c     04 BA 05 F1 | 	add	objptr, #4
01f40     DD 10 68 FC | 	wrlong	#8, objptr
01f44                 | '   timings[8]:= 12
01f44     04 BA 05 F1 | 	add	objptr, #4
01f48     DD 18 68 FC | 	wrlong	#12, objptr
01f4c                 | '   timings[9]:= 8
01f4c     04 BA 05 F1 | 	add	objptr, #4
01f50     DD 10 68 FC | 	wrlong	#8, objptr
01f54     17 00 00 FF 
01f58     D8 BB 85 F1 | 	sub	objptr, ##12248
01f5c                 | ' 
01f5c                 | '   clkfreq:=286363636
01f5c     C7 88 88 FF 
01f60     14 E8 6F FC | 	wrlong	##286363636, #20
01f64                 | '   org
01f64     A0 E0 9F FE | 	loc	pa,	#(@LR__0106-@LR__0105)
01f68     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f6c                 | LR__0105
01f6c 000             | 	org	0
01f6c 000 9D AA 80 FF 
01f70 001 00 F6 65 FD | 	hubset	##22362875
01f74 002             | LR__0106
01f74                 | 	orgh
01f74                 | LR__0107
01f74                 | _Hn007_20210302_setmode_ret
01f74     2D 00 64 FD | 	ret
01f78                 | hubexit
01f78     81 00 80 FD | 	jmp	#cogexit
01f7c                 | 
01f7c                 | __system____builtin_memmove
01f7c     E7 C4 01 F6 | 	mov	_var01, arg01
01f80     E8 CE 59 F2 | 	cmps	arg01, arg02 wcz
01f84     50 00 90 3D |  if_ae	jmp	#LR__0115
01f88     94 E0 9F FE | 	loc	pa,	#(@LR__0109-@LR__0108)
01f8c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f90                 | LR__0108
01f90     03 D2 5D F2 | 	cmps	arg03, #3 wcz
01f94     18 00 90 ED |  if_be	jmp	#LR__0110
01f98     E8 C6 01 FB | 	rdlong	_var02, arg02
01f9c     E7 C6 61 FC | 	wrlong	_var02, arg01
01fa0     04 CE 05 F1 | 	add	arg01, #4
01fa4     04 D0 05 F1 | 	add	arg02, #4
01fa8     04 D2 85 F1 | 	sub	arg03, #4
01fac     E0 FF 9F FD | 	jmp	#LR__0108
01fb0                 | LR__0109
01fb0                 | LR__0110
01fb0     E9 C8 09 F6 | 	mov	_var03, arg03 wz
01fb4     4C 00 90 AD |  if_e	jmp	#LR__0121
01fb8     58 E0 9F FE | 	loc	pa,	#(@LR__0113-@LR__0111)
01fbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
01fc0                 | LR__0111
01fc0     E4 08 D8 FC | 	rep	@LR__0114, _var03
01fc4                 | LR__0112
01fc4     E8 C6 C1 FA | 	rdbyte	_var02, arg02
01fc8     E7 C6 41 FC | 	wrbyte	_var02, arg01
01fcc     01 CE 05 F1 | 	add	arg01, #1
01fd0     01 D0 05 F1 | 	add	arg02, #1
01fd4                 | LR__0113
01fd4                 | LR__0114
01fd4     2C 00 90 FD | 	jmp	#LR__0121
01fd8                 | LR__0115
01fd8     E9 CE 01 F1 | 	add	arg01, arg03
01fdc     E9 D0 01 F1 | 	add	arg02, arg03
01fe0     E9 CA 09 F6 | 	mov	_var04, arg03 wz
01fe4     1C 00 90 AD |  if_e	jmp	#LR__0120
01fe8     28 E0 9F FE | 	loc	pa,	#(@LR__0118-@LR__0116)
01fec     93 00 A0 FD | 	call	#FCACHE_LOAD_
01ff0                 | LR__0116
01ff0     E5 08 D8 FC | 	rep	@LR__0119, _var04
01ff4                 | LR__0117
01ff4     01 CE 85 F1 | 	sub	arg01, #1
01ff8     01 D0 85 F1 | 	sub	arg02, #1
01ffc     E8 C6 C1 FA | 	rdbyte	_var02, arg02
02000     E7 C6 41 FC | 	wrbyte	_var02, arg01
02004                 | LR__0118
02004                 | LR__0119
02004                 | LR__0120
02004                 | LR__0121
02004     E2 C2 01 F6 | 	mov	result1, _var01
02008                 | __system____builtin_memmove_ret
02008     2D 00 64 FD | 	ret
0200c                 | 
0200c                 | __system__longmove
0200c     E7 C4 01 F6 | 	mov	_var01, arg01
02010     E8 CE 59 F2 | 	cmps	arg01, arg02 wcz
02014     28 00 90 3D |  if_ae	jmp	#LR__0126
02018     E9 C6 09 F6 | 	mov	_var02, arg03 wz
0201c     54 00 90 AD |  if_e	jmp	#LR__0132
02020     F0 DF 9F FE | 	loc	pa,	#(@LR__0124-@LR__0122)
02024     93 00 A0 FD | 	call	#FCACHE_LOAD_
02028                 | LR__0122
02028     E3 08 D8 FC | 	rep	@LR__0125, _var02
0202c                 | LR__0123
0202c     E8 C8 01 FB | 	rdlong	_var03, arg02
02030     E7 C8 61 FC | 	wrlong	_var03, arg01
02034     04 CE 05 F1 | 	add	arg01, #4
02038     04 D0 05 F1 | 	add	arg02, #4
0203c                 | LR__0124
0203c                 | LR__0125
0203c     34 00 90 FD | 	jmp	#LR__0132
02040                 | LR__0126
02040     E9 CA 01 F6 | 	mov	_var04, arg03
02044     02 CA 65 F0 | 	shl	_var04, #2
02048     E5 CE 01 F1 | 	add	arg01, _var04
0204c     E5 D0 01 F1 | 	add	arg02, _var04
02050     E9 CC 09 F6 | 	mov	_var05, arg03 wz
02054     1C 00 90 AD |  if_e	jmp	#LR__0131
02058     B8 DF 9F FE | 	loc	pa,	#(@LR__0129-@LR__0127)
0205c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02060                 | LR__0127
02060     E6 08 D8 FC | 	rep	@LR__0130, _var05
02064                 | LR__0128
02064     04 CE 85 F1 | 	sub	arg01, #4
02068     04 D0 85 F1 | 	sub	arg02, #4
0206c     E8 C8 01 FB | 	rdlong	_var03, arg02
02070     E7 C8 61 FC | 	wrlong	_var03, arg01
02074                 | LR__0129
02074                 | LR__0130
02074                 | LR__0131
02074                 | LR__0132
02074     E2 C2 01 F6 | 	mov	result1, _var01
02078                 | __system__longmove_ret
02078     2D 00 64 FD | 	ret
0207c                 | 
0207c                 | __system___pinread
0207c     20 CE CD F7 | 	test	arg01, #32 wz
02080     FF C5 01 56 |  if_ne	mov	_var01, inb
02084     FE C5 01 A6 |  if_e	mov	_var01, ina
02088     E2 C2 01 F6 | 	mov	result1, _var01
0208c     E7 C2 41 F0 | 	shr	result1, arg01
02090     06 CE 45 F0 | 	shr	arg01, #6
02094     E7 C2 41 F7 | 	zerox	result1, arg01
02098                 | __system___pinread_ret
02098     2D 00 64 FD | 	ret
0209c                 | 
0209c                 | __system___waitms
0209c     03 5A 05 F6 | 	mov	COUNT_, #3
020a0     B0 00 A0 FD | 	call	#pushregs_
020a4     E7 D6 01 F6 | 	mov	local01, arg01
020a8     14 D8 05 FB | 	rdlong	local02, #20
020ac     68 DF 9F FE | 	loc	pa,	#(@LR__0134-@LR__0133)
020b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
020b4                 | LR__0133
020b4     01 00 00 FF 
020b8     E8 D7 5D F2 | 	cmps	local01, ##1000 wcz
020bc     1F D8 61 1D |  if_a	waitx	local02
020c0     01 00 00 1F 
020c4     E8 D7 85 11 |  if_a	sub	local01, ##1000
020c8     E8 FF 9F 1D |  if_a	jmp	#LR__0133
020cc                 | LR__0134
020cc     0C BE 05 F1 | 	add	ptr___system__dat__, #12
020d0     DF DA 09 FB | 	rdlong	local03, ptr___system__dat__ wz
020d4     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
020d8     20 00 90 5D |  if_ne	jmp	#LR__0135
020dc     EC 10 02 F6 | 	mov	muldiva_, local02
020e0     01 00 00 FF 
020e4     E8 13 06 F6 | 	mov	muldivb_, ##1000
020e8     CC 00 A0 FD | 	call	#unsdivide_
020ec     09 DB 01 F6 | 	mov	local03, muldivb_
020f0     0C BE 05 F1 | 	add	ptr___system__dat__, #12
020f4     DF 12 62 FC | 	wrlong	muldivb_, ptr___system__dat__
020f8     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
020fc                 | LR__0135
020fc     00 D6 5D F2 | 	cmps	local01, #0 wcz
02100     ED D6 01 1D |  if_a	qmul	local01, local03
02104     18 CE 61 1D |  if_a	getqx	arg01
02108     1F CE 61 1D |  if_a	waitx	arg01
0210c     AF F0 03 F6 | 	mov	ptra, fp
02110     BF 00 A0 FD | 	call	#popregs_
02114                 | __system___waitms_ret
02114     2D 00 64 FD | 	ret
02118                 | 
02118                 | LR__0136
02118     20          | 	byte	" "
02119     00          | 	byte	0
0211a                 | LR__0137
0211a     20 20 50 32 
0211e     20 52 65 74 
02122     72 6F 6D 61 
02126     63 68 69 6E 
0212a     65 20 76 2E 
0212e     20 30 2E 30 
02132     30          | 	byte	"  P2 Retromachine v. 0.00"
02133     00          | 	byte	0
02134                 | LR__0138
02134     20          | 	byte	" "
02135     00          | 	byte	0
02136                 | LR__0139
02136     20 20 52 65 
0213a     61 64 79    | 	byte	"  Ready"
0213d     00          | 	byte	0
0213e                 | LR__0140
0213e     20          | 	byte	" "
0213f     00          | 	byte	0
02140                 | LR__0141
02140     20 20       | 	byte	"  "
02142     00          | 	byte	0
02143                 | LR__0142
02143     43 3A 5C 6B 
02147     65 72 6E 65 
0214b     6C 2E 69 6D 
0214f     67          | 	byte	"C:\kernel.img"
02150     00          | 	byte	0
02151                 | LR__0143
02151     20 20 4D 6F 
02155     75 73 65 20 
02159     6D 6F 76 65 
0215d     64 2C 20 78 
02161     3D 20       | 	byte	"  Mouse moved, x= "
02163     00          | 	byte	0
02164                 | LR__0144
02164     2C 20 79 3D 
02168     20          | 	byte	", y= "
02169     00          | 	byte	0
0216a                 | LR__0145
0216a     20 20 4D 6F 
0216e     75 73 65 20 
02172     6D 6F 76 65 
02176     64 2C 20 78 
0217a     3D 20       | 	byte	"  Mouse moved, x= "
0217c     00          | 	byte	0
0217d                 | LR__0146
0217d     2C 20 79 3D 
02181     20          | 	byte	", y= "
02182     00          | 	byte	0
02183                 | LR__0147
02183     20 20 4D 6F 
02187     75 73 65 20 
0218b     77 68 65 65 
0218f     6C 3A 20    | 	byte	"  Mouse wheel: "
02192     00          | 	byte	0
02193                 | LR__0148
02193     20 20 4D 6F 
02197     75 73 65 20 
0219b     6B 65 79 20 
0219f     70 72 65 73 
021a3     73 65 64 3A 
021a7     20          | 	byte	"  Mouse key pressed: "
021a8     00          | 	byte	0
021a9                 | LR__0149
021a9     20 20 4D 6F 
021ad     75 73 65 20 
021b1     63 6C 69 63 
021b5     6B 65 64    | 	byte	"  Mouse clicked"
021b8     00          | 	byte	0
021b9                 | LR__0150
021b9     20 20 4D 6F 
021bd     75 73 65 20 
021c1     64 6F 75 62 
021c5     6C 65 20 63 
021c9     6C 69 63 6B 
021cd     65 64       | 	byte	"  Mouse double clicked"
021cf     00          | 	byte	0
021d0                 | LR__0151
021d0     20 20 4B 65 
021d4     79 20 73 63 
021d8     61 6E 63 6F 
021dc     64 65 20    | 	byte	"  Key scancode "
021df     00          | 	byte	0
021e0                 | LR__0152
021e0     20 72 65 6C 
021e4     65 61 73 65 
021e8     64          | 	byte	" released"
021e9     00          | 	byte	0
021ea                 | LR__0153
021ea     20 20 4B 65 
021ee     79 20 73 63 
021f2     61 6E 63 6F 
021f6     64 65 20    | 	byte	"  Key scancode "
021f9     00          | 	byte	0
021fa                 | LR__0154
021fa     2C 20 63 68 
021fe     61 72 63 6F 
02202     64 65 20    | 	byte	", charcode "
02205     00          | 	byte	0
02206                 | LR__0155
02206     20 70 72 65 
0220a     73 73 65 64 | 	byte	" pressed"
0220e     00          | 	byte	0
0220f                 | LR__0156
0220f     20 20 4B 65 
02213     79 20 6D 6F 
02217     64 69 66 69 
0221b     65 72 20    | 	byte	"  Key modifier "
0221e     00          | 	byte	0
0221f                 | LR__0157
0221f     20 70 72 65 
02223     73 73 65 64 | 	byte	" pressed"
02227     00          | 	byte	0
02228                 | LR__0158
02228     20 20 4D 6F 
0222c     64 69 66 69 
02230     65 72 73 20 
02234     72 65 6C 65 
02238     61 73 65 64 | 	byte	"  Modifiers released"
0223c     00          | 	byte	0
0223d     00 00 00    | 	alignl
02240                 | _Hn007_20210302_dat_
02240                 | 
02240     00 00 00 00 
      ...             
02270     00 00 00 00 
02274     00 00 00    | st_font                 file "st4font.def"
02277     FF FF 00 00 
0227b     00 00 00 00 
0227f     00 18 18 18 
02283     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02287     18 18 18 18 
0228b     18 18 18 18 
0228f     18          | 	byte	$18[9]
02290     00 00 00 00 
02294     00 00 00    | 	byte	$00[7]
02297     FF FF 18 18 
0229b     18 18 18 18 
0229f     18 18 18 18 
022a3     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
022a7     FF FF 00 00 
022ab     00 00 00 00 
022af     00 18 18 18 
022b3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
022b7     1F 1F 18 18 
022bb     18 18 18 18 
022bf     18 18 18 18 
022c3     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
022c7     F8 F8 18 18 
022cb     18 18 18 18 
022cf     18 00 00 00 
022d3     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
022d7     1F 1F 18 18 
022db     18 18 18 18 
022df     18 00 00 00 
022e3     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
022e7     F8 F8 18 18 
022eb     18 18 18 18 
022ef     18 18 18 18 
022f3     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
022f7     1F 1F 00 00 
022fb     00 00 00 00 
022ff     00 18 18 18 
02303     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02307     F8 F8 00 00 
0230b     00 00 00 00 
0230f     00 18 18 18 
02313     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02317     FF FF 18 18 
0231b     18 18 18 18 
0231f     18 00 00 18 
02323     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
02327     66 7E 7E 66 
0232b     66 66 66 30 
0232f     18 00 00 7E 
02333     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
02337     3E 06 06 06 
0233b     06 7E 7E 18 
0233f     0C 30 18 3C 
02343     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
02347     06 06 06 66 
0234b     66 7E 3C 00 
0234f     00 30 18 66 
02353     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
02357     7E 7E 76 76 
0235b     66 66 66 00 
0235f     00 30 18 7C 
02363     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
02367     1C 38 70 60 
0236b     60 7E 3E 00 
0236f     00 30 18 7E 
02373     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
02377     18 0C 0C 06 
0237b     06 7E 7E 00 
0237f     00 18 18 00 
02383     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
02387     18 18 0C 0C 
0238b     06 7E 7E 00 
0238f     00 30 18 3C 
02393     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
02397     66 66 66 66 
0239b     66          | 	byte	$66[5]
0239c     7E 3C 00 00 
023a0     00 00 06 06 
023a4     06 06 16 1E 
023a8     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
023ac     7E 7E 00 00 
023b0     00 00 00 00 
023b4     00 3C 7C 60 
023b8     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
023bc     7E 7C 30 18 
023c0     00 00 00 00 
023c4     00 3C 7E 66 
023c8     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
023cc     7E 7C 18 0C 
023d0     00 00 30 18 
023d4     00 3C 3E 06 
023d8     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
023dc     7E 7C 00 00 
023e0     00 00 30 18 
023e4     00 3E 7E 66 
023e8     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
023ec     66 66 00 00 
023f0     00 00 30 18 
023f4     00 7C 7E 06 
023f8     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
023fc     7E 3E 00 00 
02400     00 00 30 18 
02404     00 7E 7E 30 
02408     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0240c     7E 7E 00 00 
02410     00 00 18 18 
02414     00 7E 7E 30 
02418     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0241c     7E 7E 00 00 
02420     00 00 30 18 
02424     00 3C 7E 66 
02428     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
0242c     7E 3C 00 00 
02430     00 00 1C 1C 
02434     18 18 38 3C 
02438     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
0243c     3C 3C 00 00 
02440     00 00 00 00 
02444     00 00 00 00 
02448     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0244c     00 00 00 00 
02450     00 00       | 	byte	$00[6]
02452     18 18 18 18 
02456     18 18 18 18 | 	byte	$18[8]
0245a     00 00 18 18 
0245e     00 00 00 00 
02462     66 66 66 66 
02466     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
0246a     00 00 00 00 
0246e     00 00 00 00 
02472     00          | 	byte	$00[9]
02473     66 66 FF FF 
02477     66 66 FF FF 
0247b     66 66 00 00 
0247f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
02483     7C 7E 06 06 
02487     3E 7C 60 60 
0248b     7E 3E 18 18 
0248f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
02493     66 30 30 18 
02497     18 0C 0C 66 
0249b     66 00 00 00 
0249f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
024a3     66 66 3C 1C 
024a7     1C FC FE 66 
024ab     66 FE FC 00 
024af     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
024b3     18 18 18 18 
024b7     00 00 00 00 
024bb     00 00 00 00 
024bf     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
024c3     18 1C 0C 0C 
024c7     0C 0C 0C 0C 
024cb     1C 18 30 00 
024cf     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
024d3     18 38 30 30 
024d7     30 30 30 30 
024db     38 18 0C 00 
024df     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
024e3     66 66 3C 3C 
024e7     FF FF 3C 3C 
024eb     66 66 00 00 
024ef     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
024f3     00 18 18 18 
024f7     7E 7E 18 18 
024fb     18 00 00 00 
024ff     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02503     00 00 00 00 
02507     00 00       | 	byte	$00[6]
02509     18 18 18 18 
0250d     18          | 	byte	$18[5]
0250e     0C 04 00 00 
02512     00 00 00 00 
02516     7E 7E 00 00 
0251a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
0251e     00 00 00 00 
02522     00 00 00 00 
02526     00 00 00 00 
0252a     00          | 	byte	$00[13]
0252b     18 18 18 00 
0252f     00 00 00 60 
02533     60 60 30 30 
02537     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
0253b     06 06 06 00 
0253f     00 00 00 3C 
02543     7E 66 66 66 
02547     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
0254b     66 7E 3C 00 
0254f     00 00 00 18 
02553     18 1C 1C 18 
02557     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
0255b     18 7E 7E 00 
0255f     00 00 00 3C 
02563     7E 66 66 30 
02567     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
0256b     0C 7E 7E 00 
0256f     00 00 00 7E 
02573     7E 30 30 18 
02577     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
0257b     66 7E 3C 00 
0257f     00 00 00 30 
02583     30 38 38 3C 
02587     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
0258b     7E 30 30 00 
0258f     00 00 00 7E 
02593     7E 06 06 3E 
02597     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
0259b     66 7E 3C 00 
0259f     00 00 00 38 
025a3     3C 0E 06 06 
025a7     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
025ab     66 7E 3C 00 
025af     00 00 00 7E 
025b3     7E 60 60 30 
025b7     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
025bb     0C 0C 0C 00 
025bf     00 00 00 3C 
025c3     7E 66 66 3C 
025c7     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
025cb     66 7E 3C 00 
025cf     00 00 00 3C 
025d3     7E 66 66 7E 
025d7     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
025db     70 3C 1C 00 
025df     00 00 00 00 
025e3     00 00 18 18 
025e7     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
025eb     18 18 18 00 
025ef     00 00 00 00 
025f3     00 00 18 18 
025f7     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
025fb     18 18 18 0C 
025ff     04 00 00 00 
02603     70 38 1C 0E 
02607     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
0260b     70 00 00 00 
0260f     00 00 00 00 
02613     00 00 7E 7E 
02617     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
0261b     00 00 00 00 
0261f     00 00 00 00 | 	byte	$00[8]
02623     0E 1C 38 70 
02627     E0 70 38 1C 
0262b     0E 00 00 00 
0262f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
02633     7E 66 66 30 
02637     30 18 18 18 
0263b     00 18 18 00 
0263f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
02643     7E 66 66 66 
02647     66 36 06 66 
0264b     66 7E 3C 00 
0264f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
02653     3C 7E 66 66 
02657     66 7E 7E 66 
0265b     66 66 66 00 
0265f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
02663     7E 66 66 7E 
02667     3E 66 66 66 
0266b     66 7E 3E 00 
0266f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
02673     7E 66 66 06 
02677     06 06 06 66 
0267b     66 7E 3C 00 
0267f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
02683     7E 66 66 66 
02687     66 66 66 66 
0268b     66 7E 3E 00 
0268f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
02693     7E 06 06 3E 
02697     3E 06 06 06 
0269b     06 7E 7E 00 
0269f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
026a3     7E 06 06 3E 
026a7     3E 06 06 06 
026ab     06 06 06 00 
026af     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
026b3     7E 06 06 76 
026b7     76 66 66 66 
026bb     66 7E 3C 00 
026bf     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
026c3     66 66 66 7E 
026c7     7E 66 66 66 
026cb     66 66 66 00 
026cf     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
026d3     7E 18 18 18 
026d7     18 18 18 18 
026db     18 7E 7E 00 
026df     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
026e3     60 60 60 60 
026e7     60 60 60    | 	byte	$60[7]
026ea     66 66 7E 3C 
026ee     00 00 00 00 
026f2     66 66 36 36 
026f6     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
026fa     66 66 C6 C6 
026fe     00 00 00 00 
02702     06 06 06 06 
02706     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0270a     06 06 7E 7E 
0270e     00 00 00 00 
02712     C6 C6 EE EE 
02716     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0271a     C6 C6 C6 C6 
0271e     00 00 00 00 
02722     66 66 66 6E 
02726     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0272a     76 66 66 66 
0272e     00 00 00 00 
02732     3C 7E 66 66 
02736     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0273a     66 66 7E 3C 
0273e     00 00 00 00 
02742     3E 7E 66 66 
02746     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0274a     06 06 06 06 
0274e     00 00 00 00 
02752     3C 7E 66 66 
02756     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0275a     66 56 3E 6C 
0275e     00 00 00 00 
02762     3E 7E 66 66 
02766     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0276a     66 66 C6 C6 
0276e     00 00 00 00 
02772     7C 7E 06 06 
02776     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0277a     60 60 7E 3E 
0277e     00 00 00 00 
02782     7E 7E 18 18 
02786     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
0278a     18 18 18 18 
0278e     00 00 00 00 
02792     66 66 66 66 
02796     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0279a     66 66 7E 3C 
0279e     00 00 00 00 
027a2     66 66 66 66 
027a6     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
027aa     3C 3C 18 18 
027ae     00 00 00 00 
027b2     C6 C6 C6 C6 
027b6     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
027ba     FE EE C6 82 
027be     00 00 00 00 
027c2     66 66 66 3C 
027c6     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
027ca     3C 66 66 66 
027ce     00 00 00 00 
027d2     66 66 66 66 
027d6     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
027da     18 18 18 18 
027de     00 00 00 00 
027e2     7E 7E 30 30 
027e6     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
027ea     06 06 7E 7E 
027ee     00 00 00 00 
027f2     3C 3C 0C 0C 
027f6     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
027fa     0C 0C 3C 3C 
027fe     00 00 00 00 
02802     06 06 0C 0C 
02806     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0280a     60 60 C0 C0 
0280e     00 00 00 00 
02812     3C 3C 30 30 
02816     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0281a     30 30 3C 3C 
0281e     00 00 00 00 
02822     18 18 3C 3C 
02826     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0282a     00 00 00 00 
0282e     00 00 00 00 
02832     00 00 00 00 
02836     00 00 00 00 
0283a     00 00       | 	byte	$00[18]
0283c     FE FE 00 00 
02840     00 00 0C 0C 
02844     18 18 00 00 
02848     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
0284c     00 00 00 00 
02850     00 00 00 00 
02854     00          | 	byte	$00[9]
02855     3C 7C 60 7C 
02859     7E 66 66 7E 
0285d     7C 00 00 00 
02861     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
02865     3E 7E 66 66 
02869     66 66 66 7E 
0286d     3E 00 00 00 
02871     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
02875     3C 3E 06 06 
02879     06 06 06 7E 
0287d     7C 00 00 00 
02881     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
02885     7C 7E 66 66 
02889     66 66 66 7E 
0288d     7C 00 00 00 
02891     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
02895     3C 7E 66 66 
02899     7E 06 06 7E 
0289d     7C 00 00 00 
028a1     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
028a5     18 7E 7E 18 
028a9     18 18 18 18 
028ad     18 00 00 00 
028b1     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
028b5     7C 7E 66 66 
028b9     66 66 7E 7C 
028bd     60 7E 3E 00 
028c1     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
028c5     3E 7E 66 66 
028c9     66 66 66 66 
028cd     66 00 00 00 
028d1     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
028d5     1C 1C 18 18 
028d9     18 18 18 3C 
028dd     3C 00 00 00 
028e1     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
028e5     30 30 30 30 
028e9     30 30 30 30 
028ed     30          | 	byte	$30[9]
028ee     3E 1E 00 00 
028f2     06 06 06 36 
028f6     36 1E 1E 1E 
028fa     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
028fe     00 00 00 00 
02902     1C 1C 18 18 
02906     18 18 18 18 
0290a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0290e     00 00 00 00 
02912     00 00 00    | 	byte	$00[7]
02915     6C FE FE D6 
02919     D6 C6 C6 C6 
0291d     C6 00 00 00 
02921     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
02925     3E 7E 66 66 
02929     66 66 66 66 
0292d     66 00 00 00 
02931     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
02935     3C 7E 66 66 
02939     66 66 66 7E 
0293d     3C 00 00 00 
02941     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
02945     3E 7E 66 66 
02949     66 66 66 7E 
0294d     3E 06 06 00 
02951     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
02955     7C 7E 66 66 
02959     66 66 66 7E 
0295d     7C 60 60 00 
02961     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
02965     3E 7E 66 06 
02969     06 06 06 06 
0296d     06 00 00 00 
02971     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
02975     7C 7E 06 0E 
02979     3C 70 60 7E 
0297d     3E 00 00 00 
02981     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
02985     7E 7E 18 18 
02989     18 18 18 78 
0298d     70 00 00 00 
02991     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
02995     66 66 66 66 
02999     66 66 66    | 	byte	$66[7]
0299c     7E 7C 00 00 
029a0     00 00 00 00 
029a4     00 66 66 66 
029a8     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
029ac     18 18 00 00 
029b0     00 00 00 00 
029b4     00 C6 C6 D6 
029b8     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
029bc     C6 82 00 00 
029c0     00 00 00 00 
029c4     00 66 66 3C 
029c8     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
029cc     66 66 00 00 
029d0     00 00 00 00 
029d4     00 66 66 66 
029d8     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
029dc     7C 60 7E 3E 
029e0     00 00 00 00 
029e4     00 7E 7E 30 
029e8     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
029ec     7E 7E 00 00 
029f0     00 00 30 18 
029f4     18 18 18 0C 
029f8     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
029fc     18 30 00 00 
02a00     00 00 18 18 
02a04     18 18 18 18 
02a08     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02a0c     18 18 00 00 
02a10     00 00 0C 18 
02a14     18 18 18 30 
02a18     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
02a1c     18 0C 00 00 
02a20     00 00 6C 7E 
02a24     36 00 00 00 
02a28     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
02a2c     00 00 00 00 
02a30     00 00 00 00 
02a34     00          | 	byte	$00[9]
02a35     18 18 18 18 
02a39     18 18 00 00 
02a3d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
02a40     00 00 00 00 
      ...             
02a70     00 00 00 00 
02a74     00 00 00    | vga_font                                file "st4font.def"
02a77     FF FF 00 00 
02a7b     00 00 00 00 
02a7f     00 18 18 18 
02a83     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02a87     18 18 18 18 
02a8b     18 18 18 18 
02a8f     18          | 	byte	$18[9]
02a90     00 00 00 00 
02a94     00 00 00    | 	byte	$00[7]
02a97     FF FF 18 18 
02a9b     18 18 18 18 
02a9f     18 18 18 18 
02aa3     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02aa7     FF FF 00 00 
02aab     00 00 00 00 
02aaf     00 18 18 18 
02ab3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02ab7     1F 1F 18 18 
02abb     18 18 18 18 
02abf     18 18 18 18 
02ac3     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02ac7     F8 F8 18 18 
02acb     18 18 18 18 
02acf     18 00 00 00 
02ad3     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02ad7     1F 1F 18 18 
02adb     18 18 18 18 
02adf     18 00 00 00 
02ae3     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02ae7     F8 F8 18 18 
02aeb     18 18 18 18 
02aef     18 18 18 18 
02af3     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02af7     1F 1F 00 00 
02afb     00 00 00 00 
02aff     00 18 18 18 
02b03     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02b07     F8 F8 00 00 
02b0b     00 00 00 00 
02b0f     00 18 18 18 
02b13     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02b17     FF FF 18 18 
02b1b     18 18 18 18 
02b1f     18 00 00 18 
02b23     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
02b27     66 7E 7E 66 
02b2b     66 66 66 30 
02b2f     18 00 00 7E 
02b33     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
02b37     3E 06 06 06 
02b3b     06 7E 7E 18 
02b3f     0C 30 18 3C 
02b43     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
02b47     06 06 06 66 
02b4b     66 7E 3C 00 
02b4f     00 30 18 66 
02b53     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
02b57     7E 7E 76 76 
02b5b     66 66 66 00 
02b5f     00 30 18 7C 
02b63     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
02b67     1C 38 70 60 
02b6b     60 7E 3E 00 
02b6f     00 30 18 7E 
02b73     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
02b77     18 0C 0C 06 
02b7b     06 7E 7E 00 
02b7f     00 18 18 00 
02b83     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
02b87     18 18 0C 0C 
02b8b     06 7E 7E 00 
02b8f     00 30 18 3C 
02b93     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
02b97     66 66 66 66 
02b9b     66          | 	byte	$66[5]
02b9c     7E 3C 00 00 
02ba0     00 00 06 06 
02ba4     06 06 16 1E 
02ba8     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
02bac     7E 7E 00 00 
02bb0     00 00 00 00 
02bb4     00 3C 7C 60 
02bb8     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
02bbc     7E 7C 30 18 
02bc0     00 00 00 00 
02bc4     00 3C 7E 66 
02bc8     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
02bcc     7E 7C 18 0C 
02bd0     00 00 30 18 
02bd4     00 3C 3E 06 
02bd8     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
02bdc     7E 7C 00 00 
02be0     00 00 30 18 
02be4     00 3E 7E 66 
02be8     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
02bec     66 66 00 00 
02bf0     00 00 30 18 
02bf4     00 7C 7E 06 
02bf8     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
02bfc     7E 3E 00 00 
02c00     00 00 30 18 
02c04     00 7E 7E 30 
02c08     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
02c0c     7E 7E 00 00 
02c10     00 00 18 18 
02c14     00 7E 7E 30 
02c18     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
02c1c     7E 7E 00 00 
02c20     00 00 30 18 
02c24     00 3C 7E 66 
02c28     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
02c2c     7E 3C 00 00 
02c30     00 00 1C 1C 
02c34     18 18 38 3C 
02c38     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
02c3c     3C 3C 00 00 
02c40     00 00 00 00 
02c44     00 00 00 00 
02c48     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
02c4c     00 00 00 00 
02c50     00 00       | 	byte	$00[6]
02c52     18 18 18 18 
02c56     18 18 18 18 | 	byte	$18[8]
02c5a     00 00 18 18 
02c5e     00 00 00 00 
02c62     66 66 66 66 
02c66     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
02c6a     00 00 00 00 
02c6e     00 00 00 00 
02c72     00          | 	byte	$00[9]
02c73     66 66 FF FF 
02c77     66 66 FF FF 
02c7b     66 66 00 00 
02c7f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
02c83     7C 7E 06 06 
02c87     3E 7C 60 60 
02c8b     7E 3E 18 18 
02c8f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
02c93     66 30 30 18 
02c97     18 0C 0C 66 
02c9b     66 00 00 00 
02c9f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
02ca3     66 66 3C 1C 
02ca7     1C FC FE 66 
02cab     66 FE FC 00 
02caf     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
02cb3     18 18 18 18 
02cb7     00 00 00 00 
02cbb     00 00 00 00 
02cbf     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
02cc3     18 1C 0C 0C 
02cc7     0C 0C 0C 0C 
02ccb     1C 18 30 00 
02ccf     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
02cd3     18 38 30 30 
02cd7     30 30 30 30 
02cdb     38 18 0C 00 
02cdf     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
02ce3     66 66 3C 3C 
02ce7     FF FF 3C 3C 
02ceb     66 66 00 00 
02cef     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
02cf3     00 18 18 18 
02cf7     7E 7E 18 18 
02cfb     18 00 00 00 
02cff     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02d03     00 00 00 00 
02d07     00 00       | 	byte	$00[6]
02d09     18 18 18 18 
02d0d     18          | 	byte	$18[5]
02d0e     0C 04 00 00 
02d12     00 00 00 00 
02d16     7E 7E 00 00 
02d1a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
02d1e     00 00 00 00 
02d22     00 00 00 00 
02d26     00 00 00 00 
02d2a     00          | 	byte	$00[13]
02d2b     18 18 18 00 
02d2f     00 00 00 60 
02d33     60 60 30 30 
02d37     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
02d3b     06 06 06 00 
02d3f     00 00 00 3C 
02d43     7E 66 66 66 
02d47     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
02d4b     66 7E 3C 00 
02d4f     00 00 00 18 
02d53     18 1C 1C 18 
02d57     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
02d5b     18 7E 7E 00 
02d5f     00 00 00 3C 
02d63     7E 66 66 30 
02d67     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
02d6b     0C 7E 7E 00 
02d6f     00 00 00 7E 
02d73     7E 30 30 18 
02d77     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
02d7b     66 7E 3C 00 
02d7f     00 00 00 30 
02d83     30 38 38 3C 
02d87     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
02d8b     7E 30 30 00 
02d8f     00 00 00 7E 
02d93     7E 06 06 3E 
02d97     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
02d9b     66 7E 3C 00 
02d9f     00 00 00 38 
02da3     3C 0E 06 06 
02da7     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
02dab     66 7E 3C 00 
02daf     00 00 00 7E 
02db3     7E 60 60 30 
02db7     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
02dbb     0C 0C 0C 00 
02dbf     00 00 00 3C 
02dc3     7E 66 66 3C 
02dc7     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
02dcb     66 7E 3C 00 
02dcf     00 00 00 3C 
02dd3     7E 66 66 7E 
02dd7     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
02ddb     70 3C 1C 00 
02ddf     00 00 00 00 
02de3     00 00 18 18 
02de7     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
02deb     18 18 18 00 
02def     00 00 00 00 
02df3     00 00 18 18 
02df7     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
02dfb     18 18 18 0C 
02dff     04 00 00 00 
02e03     70 38 1C 0E 
02e07     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
02e0b     70 00 00 00 
02e0f     00 00 00 00 
02e13     00 00 7E 7E 
02e17     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
02e1b     00 00 00 00 
02e1f     00 00 00 00 | 	byte	$00[8]
02e23     0E 1C 38 70 
02e27     E0 70 38 1C 
02e2b     0E 00 00 00 
02e2f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
02e33     7E 66 66 30 
02e37     30 18 18 18 
02e3b     00 18 18 00 
02e3f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
02e43     7E 66 66 66 
02e47     66 36 06 66 
02e4b     66 7E 3C 00 
02e4f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
02e53     3C 7E 66 66 
02e57     66 7E 7E 66 
02e5b     66 66 66 00 
02e5f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
02e63     7E 66 66 7E 
02e67     3E 66 66 66 
02e6b     66 7E 3E 00 
02e6f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
02e73     7E 66 66 06 
02e77     06 06 06 66 
02e7b     66 7E 3C 00 
02e7f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
02e83     7E 66 66 66 
02e87     66 66 66 66 
02e8b     66 7E 3E 00 
02e8f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
02e93     7E 06 06 3E 
02e97     3E 06 06 06 
02e9b     06 7E 7E 00 
02e9f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
02ea3     7E 06 06 3E 
02ea7     3E 06 06 06 
02eab     06 06 06 00 
02eaf     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
02eb3     7E 06 06 76 
02eb7     76 66 66 66 
02ebb     66 7E 3C 00 
02ebf     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
02ec3     66 66 66 7E 
02ec7     7E 66 66 66 
02ecb     66 66 66 00 
02ecf     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
02ed3     7E 18 18 18 
02ed7     18 18 18 18 
02edb     18 7E 7E 00 
02edf     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
02ee3     60 60 60 60 
02ee7     60 60 60    | 	byte	$60[7]
02eea     66 66 7E 3C 
02eee     00 00 00 00 
02ef2     66 66 36 36 
02ef6     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
02efa     66 66 C6 C6 
02efe     00 00 00 00 
02f02     06 06 06 06 
02f06     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
02f0a     06 06 7E 7E 
02f0e     00 00 00 00 
02f12     C6 C6 EE EE 
02f16     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
02f1a     C6 C6 C6 C6 
02f1e     00 00 00 00 
02f22     66 66 66 6E 
02f26     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
02f2a     76 66 66 66 
02f2e     00 00 00 00 
02f32     3C 7E 66 66 
02f36     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
02f3a     66 66 7E 3C 
02f3e     00 00 00 00 
02f42     3E 7E 66 66 
02f46     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
02f4a     06 06 06 06 
02f4e     00 00 00 00 
02f52     3C 7E 66 66 
02f56     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
02f5a     66 56 3E 6C 
02f5e     00 00 00 00 
02f62     3E 7E 66 66 
02f66     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
02f6a     66 66 C6 C6 
02f6e     00 00 00 00 
02f72     7C 7E 06 06 
02f76     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
02f7a     60 60 7E 3E 
02f7e     00 00 00 00 
02f82     7E 7E 18 18 
02f86     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
02f8a     18 18 18 18 
02f8e     00 00 00 00 
02f92     66 66 66 66 
02f96     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
02f9a     66 66 7E 3C 
02f9e     00 00 00 00 
02fa2     66 66 66 66 
02fa6     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
02faa     3C 3C 18 18 
02fae     00 00 00 00 
02fb2     C6 C6 C6 C6 
02fb6     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
02fba     FE EE C6 82 
02fbe     00 00 00 00 
02fc2     66 66 66 3C 
02fc6     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
02fca     3C 66 66 66 
02fce     00 00 00 00 
02fd2     66 66 66 66 
02fd6     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
02fda     18 18 18 18 
02fde     00 00 00 00 
02fe2     7E 7E 30 30 
02fe6     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
02fea     06 06 7E 7E 
02fee     00 00 00 00 
02ff2     3C 3C 0C 0C 
02ff6     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
02ffa     0C 0C 3C 3C 
02ffe     00 00 00 00 
03002     06 06 0C 0C 
03006     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0300a     60 60 C0 C0 
0300e     00 00 00 00 
03012     3C 3C 30 30 
03016     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0301a     30 30 3C 3C 
0301e     00 00 00 00 
03022     18 18 3C 3C 
03026     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0302a     00 00 00 00 
0302e     00 00 00 00 
03032     00 00 00 00 
03036     00 00 00 00 
0303a     00 00       | 	byte	$00[18]
0303c     FE FE 00 00 
03040     00 00 0C 0C 
03044     18 18 00 00 
03048     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
0304c     00 00 00 00 
03050     00 00 00 00 
03054     00          | 	byte	$00[9]
03055     3C 7C 60 7C 
03059     7E 66 66 7E 
0305d     7C 00 00 00 
03061     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
03065     3E 7E 66 66 
03069     66 66 66 7E 
0306d     3E 00 00 00 
03071     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
03075     3C 3E 06 06 
03079     06 06 06 7E 
0307d     7C 00 00 00 
03081     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
03085     7C 7E 66 66 
03089     66 66 66 7E 
0308d     7C 00 00 00 
03091     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
03095     3C 7E 66 66 
03099     7E 06 06 7E 
0309d     7C 00 00 00 
030a1     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
030a5     18 7E 7E 18 
030a9     18 18 18 18 
030ad     18 00 00 00 
030b1     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
030b5     7C 7E 66 66 
030b9     66 66 7E 7C 
030bd     60 7E 3E 00 
030c1     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
030c5     3E 7E 66 66 
030c9     66 66 66 66 
030cd     66 00 00 00 
030d1     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
030d5     1C 1C 18 18 
030d9     18 18 18 3C 
030dd     3C 00 00 00 
030e1     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
030e5     30 30 30 30 
030e9     30 30 30 30 
030ed     30          | 	byte	$30[9]
030ee     3E 1E 00 00 
030f2     06 06 06 36 
030f6     36 1E 1E 1E 
030fa     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
030fe     00 00 00 00 
03102     1C 1C 18 18 
03106     18 18 18 18 
0310a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0310e     00 00 00 00 
03112     00 00 00    | 	byte	$00[7]
03115     6C FE FE D6 
03119     D6 C6 C6 C6 
0311d     C6 00 00 00 
03121     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
03125     3E 7E 66 66 
03129     66 66 66 66 
0312d     66 00 00 00 
03131     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
03135     3C 7E 66 66 
03139     66 66 66 7E 
0313d     3C 00 00 00 
03141     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
03145     3E 7E 66 66 
03149     66 66 66 7E 
0314d     3E 06 06 00 
03151     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
03155     7C 7E 66 66 
03159     66 66 66 7E 
0315d     7C 60 60 00 
03161     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
03165     3E 7E 66 06 
03169     06 06 06 06 
0316d     06 00 00 00 
03171     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
03175     7C 7E 06 0E 
03179     3C 70 60 7E 
0317d     3E 00 00 00 
03181     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
03185     7E 7E 18 18 
03189     18 18 18 78 
0318d     70 00 00 00 
03191     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
03195     66 66 66 66 
03199     66 66 66    | 	byte	$66[7]
0319c     7E 7C 00 00 
031a0     00 00 00 00 
031a4     00 66 66 66 
031a8     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
031ac     18 18 00 00 
031b0     00 00 00 00 
031b4     00 C6 C6 D6 
031b8     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
031bc     C6 82 00 00 
031c0     00 00 00 00 
031c4     00 66 66 3C 
031c8     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
031cc     66 66 00 00 
031d0     00 00 00 00 
031d4     00 66 66 66 
031d8     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
031dc     7C 60 7E 3E 
031e0     00 00 00 00 
031e4     00 7E 7E 30 
031e8     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
031ec     7E 7E 00 00 
031f0     00 00 30 18 
031f4     18 18 18 0C 
031f8     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
031fc     18 30 00 00 
03200     00 00 18 18 
03204     18 18 18 18 
03208     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0320c     18 18 00 00 
03210     00 00 0C 18 
03214     18 18 18 30 
03218     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
0321c     18 0C 00 00 
03220     00 00 6C 7E 
03224     36 00 00 00 
03228     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
0322c     00 00 00 00 
03230     00 00 00 00 
03234     00          | 	byte	$00[9]
03235     18 18 18 18 
03239     18 18 00 00 
0323d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
03240                 | 
03240     00 00 00 00 
03244     00          | ataripalette            file "ataripalettep2.def"
03245     11 11 11 00 
03249     22 22 22 00 
0324d     33 33 33 00 
03251     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
03255     55 55 55 00 
03259     66 66 66 00 
0325d     77 77 77 00 
03261     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
03265     99 99 99 00 
03269     AA AA AA 00 
0326d     BB BB BB 00 
03271     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
03275     DD DD DD 00 
03279     EE EE EE 00 
0327d     FF FF FF 00 
03281     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
03285     00 14 40 00 
03289     00 1E 60 00 
0328d     00 28 80 00 
03291     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
03295     00 3C BF 00 
03299     00 46 DF 00 
0329d     00 50 FF 00 
032a1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
032a5     39 77 FF 00 
032a9     55 8A FF 00 
032ad     71 9E FF 00 
032b1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
032b5     AA C5 FF 00 
032b9     C6 D8 FF 00 
032bd     E3 EC FF 00 
032c1     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
032c5     00 00 40 00 
032c9     00 00 60 00 
032cd     00 00 80 00 
032d1     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
032d5     00 00 BF 00 
032d9     00 00 DF 00 
032dd     00 00 FF 00 
032e1     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
032e5     39 39 FF 00 
032e9     55 55 FF 00 
032ed     71 71 FF 00 
032f1     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
032f5     AA AA FF 00 
032f9     C6 C6 FF 00 
032fd     E3 E3 FF 00 
03301     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
03305     20 00 40 00 
03309     30 00 60 00 
0330d     40 00 80 00 
03311     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
03315     60 00 BF 00 
03319     70 00 DF 00 
0331d     80 00 FF 00 
03321     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
03325     9C 39 FF 00 
03329     AA 55 FF 00 
0332d     B8 71 FF 00 
03331     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
03335     D5 AA FF 00 
03339     E3 C6 FF 00 
0333d     F1 E3 FF 00 
03341     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
03345     40 00 40 00 
03349     60 00 60 00 
0334d     80 00 80 00 
03351     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
03355     BF 00 BF 00 
03359     DF 00 DF 00 
0335d     FF 00 FF 00 
03361     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
03365     FF 39 FF 00 
03369     FF 55 FF 00 
0336d     FF 71 FF 00 
03371     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
03375     FF AA FF 00 
03379     FF C6 FF 00 
0337d     FF E3 FF 00 
03381     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
03385     40 00 20 00 
03389     60 00 30 00 
0338d     80 00 40 00 
03391     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
03395     BF 00 60 00 
03399     DF 00 70 00 
0339d     FF 00 80 00 
033a1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
033a5     FF 39 9C 00 
033a9     FF 55 AA 00 
033ad     FF 71 B8 00 
033b1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
033b5     FF AA D5 00 
033b9     FF C6 E3 00 
033bd     FF E3 F1 00 
033c1     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
033c5     40 00 00 00 
033c9     60 00 00 00 
033cd     80 00 00 00 
033d1     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
033d5     BF 00 00 00 
033d9     DF 00 00 00 
033dd     FF 00 00 00 
033e1     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
033e5     FF 39 39 00 
033e9     FF 55 55 00 
033ed     FF 71 71 00 
033f1     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
033f5     FF AA AA 00 
033f9     FF C6 C6 00 
033fd     FF E3 E3 00 
03401     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
03405     40 10 00 00 
03409     60 18 00 00 
0340d     80 20 00 00 
03411     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
03415     BF 30 00 00 
03419     DF 38 00 00 
0341d     FF 40 00 00 
03421     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
03425     FF 6A 39 00 
03429     FF 80 55 00 
0342d     FF 95 71 00 
03431     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
03435     FF BF AA 00 
03439     FF D5 C6 00 
0343d     FF EA E3 00 
03441     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
03445     40 20 00 00 
03449     60 30 00 00 
0344d     80 40 00 00 
03451     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
03455     BF 60 00 00 
03459     DF 70 00 00 
0345d     FF 80 00 00 
03461     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
03465     FF 9C 39 00 
03469     FF AA 55 00 
0346d     FF B8 71 00 
03471     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
03475     FF D5 AA 00 
03479     FF E3 C6 00 
0347d     FF F1 E3 00 
03481     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
03485     40 30 00 00 
03489     60 48 00 00 
0348d     80 60 00 00 
03491     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
03495     BF 90 00 00 
03499     DF A8 00 00 
0349d     FF C0 00 00 
034a1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
034a5     FF CE 39 00 
034a9     FF D5 55 00 
034ad     FF DC 71 00 
034b1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
034b5     FF EA AA 00 
034b9     FF F1 C6 00 
034bd     FF F8 E3 00 
034c1     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
034c5     30 40 00 00 
034c9     48 60 00 00 
034cd     60 80 00 00 
034d1     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
034d5     90 BF 00 00 
034d9     A8 DF 00 00 
034dd     C0 FF 00 00 
034e1     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
034e5     CE FF 39 00 
034e9     D5 FF 55 00 
034ed     DC FF 71 00 
034f1     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
034f5     EA FF AA 00 
034f9     F1 FF C6 00 
034fd     F8 FF E3 00 
03501     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
03505     00 40 00 00 
03509     00 60 00 00 
0350d     00 80 00 00 
03511     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
03515     00 BF 00 00 
03519     00 DF 00 00 
0351d     00 FF 00 00 
03521     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
03525     39 FF 39 00 
03529     55 FF 55 00 
0352d     71 FF 71 00 
03531     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
03535     AA FF AA 00 
03539     C6 FF C6 00 
0353d     E3 FF E3 00 
03541     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
03545     00 40 14 00 
03549     00 60 1E 00 
0354d     00 80 28 00 
03551     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
03555     00 BF 3C 00 
03559     00 DF 46 00 
0355d     00 FF 50 00 
03561     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
03565     39 FF 77 00 
03569     55 FF 8A 00 
0356d     71 FF 9E 00 
03571     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
03575     AA FF C5 00 
03579     C6 FF D8 00 
0357d     E3 FF EC 00 
03581     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
03585     00 40 28 00 
03589     00 60 3C 00 
0358d     00 80 50 00 
03591     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
03595     00 BF 78 00 
03599     00 DF 8C 00 
0359d     00 FF A0 00 
035a1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
035a5     39 FF B5 00 
035a9     55 FF C0 00 
035ad     71 FF CA 00 
035b1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
035b5     AA FF DF 00 
035b9     C6 FF EA 00 
035bd     E3 FF F4 00 
035c1     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
035c5     00 40 40 00 
035c9     00 60 60 00 
035cd     00 80 80 00 
035d1     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
035d5     00 BF BF 00 
035d9     00 DF DF 00 
035dd     00 FF FF 00 
035e1     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
035e5     39 FF FF 00 
035e9     55 FF FF 00 
035ed     71 FF FF 00 
035f1     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
035f5     AA FF FF 00 
035f9     C6 FF FF 00 
035fd     E3 FF FF 00 
03601     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
03605     00 28 40 00 
03609     00 3C 60 00 
0360d     00 50 80 00 
03611     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
03615     00 78 BF 00 
03619     00 8C DF 00 
0361d     00 A0 FF 00 
03621     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
03625     39 B5 FF 00 
03629     55 C0 FF 00 
0362d     71 CA FF 00 
03631     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
03635     AA DF FF 00 
03639     C6 EA FF 00 
0363d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
03640                 | 
03640     3C 00 66 FD | hdmi            setcmod #$100                           'enable HDMI mode
03644     58 80 67 FD |                 drvl    #7<<6 + hdmi_base               'enable HDMI pins
03648     7B 0B 80 FF 
0364c     C0 01 0F FC |                 wrpin   ##%10110_1111_0111_10_00000_0, #7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
03650     66 66 86 FF 
03654     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk (25 MHz)
03658                 | 
03658     28 10 64 FD |                 setq    #8
0365c     61 0D 05 FB |                 rdlong  framebuf,  ptra++               'read pointers
03660                 | 
03660     29 FE 65 FD |                 setq2   #255
03664     8C 00 00 FB |                 rdlong  $000, paletteptr                'read palette
03668                 | 
03668                 | '' Blank lines before the frame
03668                 | 
03668     28 12 64 FD | p101            setq    #9
0366c     8B E2 00 FB |                 rdlong  m_bs,modeptr                    'read timings
03670     01 00 05 F1 |                 add     frames,#1
03674     8E 0A 01 FB |                                 rdlong  fontstart,fontnumptr
03678     87 0A 01 F1 |                                 add     fontstart,fontbuf
0367c     8A 02 01 FB |                 rdlong  cursorx, cursorptr
03680     81 04 E9 F8 |                 getbyte cursory, cursorx,#1
03684     81 FE F0 F8 |                 getbyte cursorsh,cursorx,#2
03688     FF 02 05 F5 |                 and     cursorx,#255
0368c                 | 
0368c     88 1E 01 F6 |                 mov     borderptr2,borderptr
03690     8F E0 00 FB |                 rdlong  border,borderptr2
03694     04 1E 05 F1 |                 add     borderptr2,#4
03698     08 E0 64 F0 |                 shl     border,#8
0369c                 | 
0369c     8D 2A 01 FB |                 rdlong  t1,commandptr
036a0     04 1A 05 F1 |                 add     commandptr,#4
036a4     8D 2C 01 FB |                 rdlong  t2,commandptr
036a8     04 1A 85 F1 |                 sub     commandptr,#4
036ac     01 2B 1D F2 |                 cmp     t1,#257  wcz
036b0     95 2C 31 CC |          if_lt  wrlut   t2,t1
036b4     01 2B 05 F6 |                 mov     t1, #257
036b8     8D 2A 61 FC |                 wrlong  t1,commandptr
036bc     6C 24 01 F6 |                 mov     hsync0,sync_000                 'vsync off
036c0     6D 26 01 F6 |                 mov     hsync1,sync_001
036c4     44 F0 44 FB |                 callpa  i_upporch ,#blank
036c8     89 00 48 FC |                 wrbyte  #0,vblankptr
036cc                 | 
036cc                 | '' Upper border.
036cc                 | 
036cc     04 00 0D F4 |                 testb   frames,#4 wz                    'cursor blinks at framerate/16, todo: define
036d0     65 02 05 A6 |          if_z   mov     cursorx,#101
036d4                 | 
036d4                 | 
036d4     77 20 01 F6 |                 mov     ii, i_vborder
036d8                 | 
036d8     08 01 B0 FD | up_border       call    #hsync
036dc     70 E8 C0 FC |                 xcont   m_vi,border
036e0     FD 21 6D FB |                 djnz    ii,#up_border
036e4                 | 
036e4                 | '' 480 active lines
036e4                 | 
036e4     E0 21 05 F6 |                 mov     ii,#480
036e8     00 F8 04 F6 |                 mov     linenum,#0
036ec                 | 
036ec     81 08 01 F6 | line1           mov     cursorpos2,cursorx
036f0                 | 
036f0     7C 28 41 F8 |                 getnib  fontline,linenum,#0             'fontline is 0 to 15, a line in font def
036f4     86 22 01 F6 |                 mov     framebuf2,framebuf              'compute a line start in the framebuffer, which is (line div 16)*100
036f8     7C F6 00 F6 |                 mov     linestart,linenum
036fc     04 F6 44 F0 |                 shr     linestart,#4
03700     82 F6 08 F2 |                 cmp     linestart,cursory wz
03704     78 08 05 56 |          if_nz  mov     cursorpos2,#120
03708     90 F7 04 FA |                 mul     linestart,#400
0370c     7B 22 01 F1 |                 add     framebuf2,linestart
03710     D0 00 B0 FD |                 call    #hsync
03714     00 28 0D F2 |                 cmp     fontline,#0 wz
03718     0C 00 90 5D |          if_nz  jmp     #p102                          'if fontline >0, display it
0371c                 | 
0371c     8F E0 00 FB |                 rdlong  border,borderptr2
03720     04 1E 05 F1 |                 add     borderptr2,#4
03724     08 E0 64 F0 |                 shl     border,#8
03728                 | 
03728     70 EA C0 FC | p102            xcont   m_border,border                 'display a left border
0372c     7F 28 19 F2 |                 cmp     fontline,cursorsh wcz
03730     65 06 05 C6 |          if_c   mov     cursorpos,#101
03734     84 06 01 36 |         if_nc   mov     cursorpos,cursorpos2
03738     01 06 05 F1 |                 add     cursorpos,#1
0373c     85 2C 01 F6 |                 mov     t2,fontstart
03740     94 2C 01 F1 |                 add     t2,fontline
03744                 | 
03744     64 28 DC FC |                 rep     @p103,#100                      'display 100 chars
03748                 | ''---------------------------------------------------------------------------------------
03748     91 2E 01 FB |                         rdlong  char,framebuf2                                                      '2
0374c     97 30 F1 F8 |                         getbyte backcolor,char,#2                                                   '4
03750     97 32 F9 F8 |                         getbyte charcolor,char,#3                                                   '6
03754     97 2E E1 F8 |                         getbyte char,char, #0                                                       '8
03758     04 22 05 F1 |                         add     framebuf2,#4                                                        '10
0375c     04 2E 65 F0 |                         shl     char,#4                                                             '12
03760     96 2E 01 F1 |                         add     char,t2                                                             '14
03764     97 2A C1 FA |                         rdbyte  t1,char                                                             '16
03768     01 06 8D F1 |                         sub     cursorpos,#1 wz                                                     '18
0376c     FF 2A 65 A5 |                 if_z    xor     t1, #$FF                                                            '20
03770                 | 
03770                 | 
03770     61 2A 61 FD |                         mergeb  t1
03774     95 EC C0 FC |                         xcont   m_lut1,t1                                                           '22
03778                 | 
03778     98 2A A1 FA |                         rdlut   t1,backcolor                                                        '25
0377c     7E 2A 31 FC |                         wrlut   t1,lutaddr                                                          '28
03780     01 FC 04 F1 |                         add     lutaddr,#1                                                          '30
03784                 | 
03784     99 2A A1 FA |                         rdlut   t1,charcolor                                                        '33
03788     7E 2A 31 FC |                         wrlut   t1,lutaddr                                                          '46
0378c     01 FC 84 F1 |                         sub     lutaddr,#1                                                          '38
03790                 | 
03790     7D EC 60 F5 |                         xor     m_lut1,a00010000                                                    '40
03794     20 FC 64 F5 |                         xor     lutaddr,#32                                                         '42    .....    38 left
03798                 | 
03798                 | '' rep end ----------------------------------------------------------------------------
03798                 | 
03798                 | 
03798     70 EA C0 FC | p103            xcont   m_border,border                     'display a right border
0379c                 | 
0379c     01 F8 04 F1 |                 add     linenum, #1
037a0     D2 21 6D FB |                 djnz    ii,#line1
037a4                 | 
037a4                 | '' end of active screen
037a4     89 02 68 FC |                 wrlong  #1,vblankptr
037a8     77 20 01 F6 |                 mov     ii,i_vborder                         'lower border
037ac                 | 
037ac                 | 
037ac     8F E0 00 FB |                 rdlong  border,borderptr2
037b0     04 1E 05 F1 |                 add     borderptr2,#4
037b4     08 E0 64 F0 |                 shl     border,#8
037b8     28 00 B0 FD | down_border     call    #hsync
037bc     70 E8 C0 FC |                 xcont   m_vi,border
037c0     FD 21 6D FB |                 djnz    ii,#down_border
037c4     04 F4 44 FB |                 callpa  i_downporch ,#blank                  'bottom blanks
037c8                 | 
037c8     6E 24 01 F6 |                 mov     hsync0,sync_222                      'vsync on
037cc     6F 26 01 F6 |                 mov     hsync1,sync_223
037d0     01 F2 44 FB |                 callpa  i_vsync,#blank                       'vertical sync blanks
037d4     90 FE 9F FD |                 jmp     #p101                                'loop
037d8                 | 
037d8                 | '' Subroutines
037d8                 | 
037d8     08 00 B0 FD | blank           call    #hsync                          'blank lines
037dc     92 E8 C0 FC |                 xcont   m_vi,hsync0
037e0     FD ED 6F 0B |         _ret_   djnz    pa,#blank
037e4                 | 
037e4     92 E2 C0 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
037e8     93 E4 B0 FC |                 xzero   m_sn,hsync1
037ec     92 E6 C0 0C |         _ret_   xcont   m_bv,hsync0
037f0                 | 
037f0                 | '' consts and vars
037f0                 | 
037f0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
037f4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
037f8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
037fc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
03800                 | 
03800     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
03804                 | 
03804     10 00 81 70 | m_bs            long    $70810000 + hdmi_base<<17 + 16          'before sync
03808     50 00 81 70 | m_sn            long    $70810000 + hdmi_base<<17 + 80          'sync
0380c     14 00 81 70 | m_bv            long    $70810000 + hdmi_base<<17 + 20          'before visible
03810     00 04 81 70 | m_vi            long    $70810000 + hdmi_base<<17 + 1024        'visible 1024
03814     70 00 81 70 | m_border        long    $70810000 + hdmi_base<<17 + 112         'immediate 112
03818     08 00 88 20 | m_lut1          long    $20880000 + hdmi_base<<17 + 8          ' imm+lut, 1 char
0381c     30 00 00 00 | i_vborder       long    48
03820     10 00 00 00 | i_upporch       long    16
03824     10 00 00 00 | i_vsync         long    16
03828     10 00 00 00 | i_downporch     long    16
0382c                 | 
0382c     00 00 00 00 | linestart       long    0
03830     00 00 00 00 | linenum         long    0
03834     00 00 01 00 | a00010000       long    $00010000
03838     00 01 00 00 | lutaddr         long    256
0383c                 | 
0383c     0E 00 00 00 | cursorsh        long    14
03840     00 00 00 00 | frames          long    0
03844     00 00 00 00 | cursorx         long    0
03848     00 00 00 00 | cursory         long    0
0384c     00 00 00 00 | cursorpos       long    0
03850     00 00 00 00 | cursorpos2      long    0
03854     00 00 00 00 | fontstart           long        0
03858                 | 
03858                 | framebuf        res     1
03858                 | framebuf        res     1
03858                 | fontbuf         res     1
03858                 | fontbuf         res     1
03858                 | borderptr       res     1
03858                 | borderptr       res     1
03858                 | vblankptr       res     1
03858                 | vblankptr       res     1
03858                 | cursorptr       res     1
03858                 | cursorptr       res     1
03858                 | modeptr         res     1
03858                 | modeptr         res     1
03858                 | paletteptr      res     1
03858                 | paletteptr      res     1
03858                 | commandptr      res     1
03858                 | commandptr      res     1
03858                 | fontnumptr      res     1
03858                 | fontnumptr      res     1
03858                 | borderptr2      res     1
03858                 | borderptr2      res     1
03858                 | ii              res     1
03858                 | ii              res     1
03858                 | framebuf2       res     1
03858                 | framebuf2       res     1
03858                 | hsync0          res     1
03858                 | hsync0          res     1
03858                 | hsync1          res     1
03858                 | hsync1          res     1
03858                 | fontline        res     1
03858                 | fontline        res     1
03858                 | t1              res     1
03858                 | t1              res     1
03858                 | t2              res     1
03858                 | t2              res     1
03858                 | char            res     1
03858                 | char            res     1
03858                 | backcolor       res     1
03858                 | backcolor       res     1
03858                 | charcolor       res     1
03858                 | charcolor       res     1
03858                 |                 fit     496                     '
03858                 | __system__dat_
03858     00 00 00 00 
0385c     00 00 00 00 | 	byte	$00[8]
03860     03 00 00 00 
03864     00 00 00 00 
03868     00 00 00 00 
0386c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03870                 | objmem
03870     00 00 00 00 | 	long	0[1]
03874 0e2             | 	org	COG_BSS_START
03874 0e2             | _var01
03874 0e2             | 	res	1
03874 0e3             | _var02
03874 0e3             | 	res	1
03874 0e4             | _var03
03874 0e4             | 	res	1
03874 0e5             | _var04
03874 0e5             | 	res	1
03874 0e6             | _var05
03874 0e6             | 	res	1
03874 0e7             | arg01
03874 0e7             | 	res	1
03874 0e8             | arg02
03874 0e8             | 	res	1
03874 0e9             | arg03
03874 0e9             | 	res	1
03874 0ea             | arg04
03874 0ea             | 	res	1
03874 0eb             | local01
03874 0eb             | 	res	1
03874 0ec             | local02
03874 0ec             | 	res	1
03874 0ed             | local03
03874 0ed             | 	res	1
03874 0ee             | local04
03874 0ee             | 	res	1
03874 0ef             | local05
03874 0ef             | 	res	1
03874 0f0             | local06
03874 0f0             | 	res	1
03874 0f1             | local07
03874 0f1             | 	res	1
03874 0f2             | local08
03874 0f2             | 	res	1
03874 0f3             | local09
03874 0f3             | 	res	1
03874 0f4             | local10
03874 0f4             | 	res	1
03874 0f5             | local11
03874 0f5             | 	res	1
03874 0f6             | local12
03874 0f6             | 	res	1
03874 0f7             | local13
03874 0f7             | 	res	1
03874 0f8             | local14
03874 0f8             | 	res	1
03874 0f9             | local15
03874 0f9             | 	res	1
03874 0fa             | local16
03874 0fa             | 	res	1
03874 0fb             | local17
03874 0fb             | 	res	1
03874 0fc             | local18
03874 0fc             | 	res	1
03874 0fd             | local19
03874 0fd             | 	res	1
03874 0fe             | local20
03874 0fe             | 	res	1
03874 0ff             | local21
03874 0ff             | 	res	1
03874 100             | local22
03874 100             | 	res	1
03874 101             | local23
03874 101             | 	res	1
03874 102             | local24
03874 102             | 	res	1
03874 103             | local25
03874 103             | 	res	1
03874 104             | local26
03874 104             | 	res	1
03874 105             | local27
03874 105             | 	res	1
03874 106             | local28
03874 106             | 	res	1
03874 107             | local29
03874 107             | 	res	1
03874 108             | muldiva_
03874 108             | 	res	1
03874 109             | muldivb_
03874 109             | 	res	1
03874 10a             | 	fit	480
03874 10a             | 
