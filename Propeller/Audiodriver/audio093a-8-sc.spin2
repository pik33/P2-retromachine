' A Paula inspired sample based synthesizer/audio driver for a P2
' v. 0.91 beta - 20220314
' MIT license
' Piotr Kardasz pik33@o2.pl with the help from P2 forum community :) 
' 8 channel version
'-------------------------------------------------------------------
con

'_clkfreq = 354693878  ' This is 100x Amiga PAL 3546895, 360 x SID (PAL) 


left= 8
right=9

c4=262
d4=294
e4=330
f4=349
g4=392
a4=440
h4=494

var

{{
Channel registers:
long #0: the sample phase accumulator: use it as read only although you -can- change this while playing (not recommended, the driver cog writes there at every sample)
long #1: the current sample generated, 2 words, right:left
long #2: the sample pointer.
         Set bit #31 to 0 if the sample is 8 bit, 1 for 16 bit. 
         Set bit #30 to 1 to start playing the sample from the beginning
         Set bit #29 to 1 to synchronize channels 0 and 1 for playing stereo without the phase error
long #3: sample loop start point
long #4: sample loop end point. 
         If the sample has to no loop and stop at the end, set loop start=end of sample, loop end=loop start +1 or 2 (for 16 bit)
long #5: volume and pan
         word #10: volume, 0..16384(=1). Values more than 16384 could cause clipping if sample is normalized
         word #11: pan. 16384: full left, 8192: center, 0: full right
long #6  period and skip
         word #11: period. This is the number of Paula cycles between two samples. 
         word #12: skip 
         From version 0.93 it is 8.8 fixed point, so set it to 256 for 8 bit or 512 for 16-bit samples. (was: 1 and 2) 
         Setting higher skip value skips the samples while playing, allows for higher frequencies for the same period
long #7  was: (reserved, unused. The planned usage is ADSR stuff.)
         Command, bit 31=set sample rate, bit 30 - set sample source (1=hub,0=psram)
}}

'
long mailboxaddr
long scope_ptr
long cache_ptr
long channel1[8]
long channel2[8]
long channel3[8]
long channel4[8]
long channel5[8]
long channel6[8]
long channel7[8]
long channel8[8]


'--------------------------------------------------------------
'---------- Init the variables, start the cog. ----------------
'--------------------------------------------------------------

pub start(mbox,scope,cache) :cog,base | iii

' mbox: PSRAM mailbox or 0 if no PSRAM
' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' cache: a pointer to 2 KB long HUB cache for PSRAM audio data

mailboxaddr:=mbox 
scope_ptr:=scope
cache_ptr:=cache
base:=@channel1[0]

repeat iii from 0 to 7
  long[base+32*iii]:=0
  long[base+32*iii+4]:=0
  long[base+32*iii+12]:=0
  long[base+32*iii+16]:=2 
  word[base+32*iii+20]:=0
  word[base+32*iii+22]:=8192
  word[base+32*iii+24]:=400+2*iii
  word[base+32*iii+26]:=2
  long [base+32*iii+8]:=@null | $C0000000
  
cog:=coginit(16,@audio,@mailboxaddr)
waitms(100)
return cog,base

'--------------------------------------------------------------
'------ PASM driver code --------------------------------------
'-------------------------------------------------------------- 

dat

audio       org     0

            rdlong  mailbox2, ptra++     ' get start address of all mailboxes
            rdlong  scbase, ptra++       ' get start address of scope buffer
            rdlong  hubptr, ptra++       ' get start address of PSRAM cache

            cogid   pa                   ' compute cogid
            mul     pa, #12              ' and mailbox spacing
            add     mailbox2, pa         ' add offset to find this COG's mailbox
            mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram

            mov     ptrb,#0              ' A tail pointer for the buffer
            wrpin   dac,#left            ' Noise dither DACs at clk/100
            wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
            wrpin   dac,#right
            wxpin   #95,#right    
            dirh    #left addpins 1
            setse1  #%001<<6 + left      ' Set the event - DAC empty
            mov     ijmp1,#isr1          ' Init the interrupt
            setint1 #4                   ' Interrupt from DAC empty event
            
'---------------------------------------------------------------------------------        
'----------------- The main loop -------------------------------------------------
'---------------------------------------------------------------------------------

loop        cmp     time0,a41000000 wc  ' time counter overflow protection
      if_c  jmp     #loop1
  
            mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
p402        altd    cn,#a41000000       ' this has to be done at once for all channels
            sub     0-0,a40000000
            djnz    cn,#p402
    
loop1       mov     cn,#0               ' Find the channel to compute
            mov     ct,time1            ' with the lowest next sample time
            fle     ct,time2 wcz        ' How to size-optimize this???
    if_c    mov     cn,#1
            fle     ct,time3 wcz
    if_c    mov     cn,#2     
            fle     ct,time4 wcz
    if_c    mov     cn,#3
            fle     ct,time5 wcz
    if_c    mov     cn,#4
            fle     ct,time6 wcz
    if_c    mov     cn,#5
            fle     ct,time7 wcz
    if_c    mov     cn,#6
            fle     ct,time8 wcz
    if_c    mov     cn,#7


'----------------------------------------------------------------------------------
'------------- Compute channel samples --------------------------------------------
'----------------------------------------------------------------------------------


p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
            shl     channeladd,#5
            add     ptra,channeladd

            setq    #7                        ' read parameters
            rdlong  pointer0,ptra
            testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
    if_nz   jmp     #p404                     ' if not set, proceed
            getword qq,command0,#0            ' get the new rate
            wxpin   qq,#left addpins 1        ' and program the pins
            getbyte qq,qq,#0 		      ' check if the rate is n*256
            cmp     qq,#0 wz                         
    if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
    if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
            
p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
    if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
    if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!


p405        getword oldls,sample0,#0          ' extract old sample value
            getword oldrs,sample0,#1
     	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
    	    getword avol0,volpan0,#0
            getword askip0,freqskip0,#1    	    
            getword afreq0,freqskip0,#0

            alts    cn, #time1                ' compute the time difference between this and previous sample
            mov     dt0,0-0    
            sub     dt0,time0
            
            altd    cn, #time1                ' add channel period to channel time
            add     0-0,afreq0  	

            add     pointer0,askip0           ' compute the pointer to the next sample       
            setbyte pointer00,pointer0,#0
            shr     pointer0,#8
         
            testb   sstart0,#31 wz            
    if_z    shl     pointer0,#1        
            
            cmp     pointer0,lend0 wcz
    if_ge   sub     pointer0,lend0	      ' and loop if needed     
    if_ge   add     pointer0,lstart0       
            
            mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
            add     qq,sstart0            



            cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
    if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
    if_gt   call    #cache_read
         
         
 
         
            testb   sstart0,#31 wz 
    if_nz   shl     spl,#8
    if_nz   shl     pointer0,#8
    if_z    shl     pointer0,#7
	    setbyte pointer0,pointer00,#0       
    

p406        scas    spl,avol0                 ' apply volume
            mov     spl,0-0
 
            scas    spl,apan0                 ' apply pan
            mov     ls0,0-0
            mov     qq,##16384
            sub     qq,apan0
            scas    spl,qq
            mov     rs0, 0-0

            sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
            add     rs,rs0
            sub     ls,oldls
            add     ls,ls0
   
            setword sample0,rs0,#1           ' pack samples into long
            setword sample0,ls0,#0
            
            bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
    if_z    mov     pointer0, #0  
    if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
            bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
    if_z    add     time1,##2048
    if_z    mov     time2,time1
    if_z    wrlong  sstart0,ptra[2]
            
p403        setq #1                          ' write new pointer and sample value to the hub
            wrlong  pointer0,ptra
            sub     ptra, channeladd         ' reset the pointer to channel parameters
                      
            cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
    if_z    decmod  front, #511          
         
            getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
 	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
            bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
            bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
	    
		    
            setword oldrs,oldls,#1           ' Pack L and R to one long    		
            mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
            mov     newsample, oldrs       

            mov     oldt0,time0              ' update global time
            add     time0,dt0    
                                     
            cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
    if_z    jmp     #loop1
            mov     qq,dt0
  
p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
            cmpr    front, #0-0 wcz
    if_e    jmp     #p301    
		
	    cmp     scbase,#0 wz
    if_z    jmp #p302	   
 
 
            incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
    if_c    mov scptr2,scptr
    if_c    shl scptr2,#2
    if_c    add scptr2,scbase     
             wrlong scptr2,#$60
    if_c    wrlong oldsample,scptr2
    if_c    incmod scptr,##639
			    
p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
            incmod  front, ##511
            djnz    qq,#p301
            
            jmp     #loop            'loop

'----------------------------------------------------------------------------------
'------------- This is the end of the main loop -----------------------------------
'----------------------------------------------------------------------------------

'----------------------------------------------------------------------------------
'------------- PSRAM cache ----------- --------------------------------------------
'----------------------------------------------------------------------------------

' There are 8 cache pointers for 8 channels
' if 24 higher bits of address=cache, then ger a word from the cache
' else load the cache from PSRAM, update the pointer, then read a sample


cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
            
	    mov     addrhi,qq		
	    shr     addrhi,#8		        ' get 24 upper bits
	    alts    cn,#cache1            
	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
    if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
	
p702	    altd    cn,#cache1			' cache miss. 
	    mov     0-0,addrhi                  ' update the pointer
	    mov     cmd,addrhi			' prepare the mailbox
	    shl     cmd,#8
            setnib  cmd, #%1011, #7             ' read burst from the external memory
            mov     hubaddr,cn                  ' to the channel cache
            shl     hubaddr,#8                  '
            add     hubaddr,hubptr 
            mov     count,#256                  ' 256 bytes
            setq    #2                          ' write 3 longs
            wrlong  cmd, mailbox                ' run it
poll1       rdlong  cmd, mailbox                ' poll mailbox for result
            tjs     cmd, #poll1                 ' retry until valid 
            
	
p701	    mov     qq,cn			' cache hit
	    shl     qq,#8			' compute the cache start
	    add     qq,hubptr
	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
    _ret_   rdword  spl,qq                      ' read a word
          

'--------------------------------------------------------------------------
'------ Interrupt service -------------------------------------------------
'------ Output the sample, get the next one if exists ---------------------
'--------------------------------------------------------------------------

isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
            wypin   rsample,#right       '4
            cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
    if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
    if_ne   incmod  ptrb,#511
    if_ne   getword rsample,lsnext,#1    '13
    if_ne   getword lsample,lsnext,#0    '15
    
            reti1                        '17/19 
          
'---------------------------------------------------------------------------
'-------- End of interrupt -------------------------------------------------
'---------------------------------------------------------------------------    


'---------------------------------------------------------------------------
'------- Variables ---------------------------------------------------------
'---------------------------------------------------------------------------

' constants

a40000000   long $40000000
a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before

' Time variables

time0       long 0    ' Global sample computing time
time1       long 1    ' Local channels time
time2       long 2
time3       long 3
time4       long 4
time5       long 5
time6       long 6
time7       long 7
time8       long 8

channeladd long 0

front       long 0

' temporary variables 
qq          long 0
spl         long 0
zero        long 0
mailbox     long 0
mailbox2 long 0

' Interrupt ISR variables

lsample     long 0
rsample     long 0
lsnext      long 0
rsnext      long 0 

' channel parameter block

pointer0    long 0     
sample0     long 0
sstart0     long 0     ' start pointer and type at bit 31
lstart0     long 0
lend0       long 0
volpan0     long 0
freqskip0   long 0
command0    long 0

afreq0      long 0
askip0      long 0
avol0       long 0
apan0       long 0

oldt0       long $FFFFFFFF    'Temporary time variables
cn          long 0
ct          long 0
dt0         long 0

' Samples
oldls       long 0
oldrs       long 0

ls0         long 0
rs0         long 0

ls          long 0    
rs          long 0

oldsample   long 0
newsample   long 0

nrsample    long 0
nlsample    long 0

scbase long 0
scptr long 0
scptr2 long 0
scope long 0

dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   

hubptr      long $71800
cache1      long 0
cache2      long 0
cache3      long 0
cache4      long 0
cache5      long 0
cache6      long 0
cache7      long 0
cache8      long 0


cmd         long 0
hubaddr     long 0
count       long 256
addrlo long 0
addrhi long 0
pointer00 long 0

'-----------------------------------------------------------------------------------------
'------ PASM driver ends here ------------------------------------------------------------
'----------------------------------------------------------------------------------------- 

'
dat 
null  			long 	0,0           ' for channel reset
'sinewave 		file 	"sinus.s2"    ' for testing
