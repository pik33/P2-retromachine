00000                 | 
00000                 | #line 1 "/home/pik33/Dokumenty/GitHub/P2-retromachine/Propeller/Tracker player/player2.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 18 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0B F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5E 62 FD | 	cogid	arg01
00614 084 03 5E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 19 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 61 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 63 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 65 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 18 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 62 56 F0 |         shr	arg03, #1 wc
00688 0a1 2F 61 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 60 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 62 56 F0 |         shr	arg03, #1 wc
00698 0a5 2F 61 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 30 61 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2F 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 62 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 31 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 60 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 6D 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 6D 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 4D 99 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 9A 62 FD |        getqx   muldivb_
00718 0c5 19 98 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 F8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 F8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 F8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 F8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | __pc long 0
00744 0d0 00 00 00 00 
00748 0d1             | __setjmp
00748 0d1 2B A0 61 FD |     pop __pc
0074c 0d2 00 18 06 F6 |     mov result1, #0
00750 0d3 00 1A 06 F6 |     mov result2, #0
00754 0d4 2F F3 01 F6 |     mov abortchain, arg01
00758 0d5 2F 5F 61 FC |     wrlong fp, arg01
0075c 0d6 04 5E 06 F1 |     add arg01, #4
00760 0d7 2F F1 63 FC |     wrlong ptra, arg01
00764 0d8 04 5E 06 F1 |     add arg01, #4
00768 0d9 2F FB 61 FC |     wrlong objptr, arg01
0076c 0da 04 5E 06 F1 |     add arg01, #4
00770 0db 2F A1 61 FC |     wrlong __pc, arg01
00774 0dc 2C A0 61 FD |     jmp __pc
00778 0dd             | __unwind_pc long 0
00778 0dd 00 00 00 00 
0077c 0de             | __unwind_stack
0077c 0de 2B BA 61 FD |    pop  __unwind_pc
00780 0df             | __unwind_loop
00780 0df 30 5F 0A F2 |    cmp  arg01, arg02 wz
00784 0e0 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00788 0e1 2F F1 03 F6 |    mov   ptra, arg01
0078c 0e2 5C FF BF FD |    call  #popregs_
00790 0e3 AF 5E 02 F6 |    mov   arg01, fp
00794 0e4 E8 FF 9F FD |    jmp   #__unwind_loop
00798 0e5             | __unwind_stack_ret
00798 0e5 2C BA 61 FD |    jmp  __unwind_pc
0079c 0e6             | __longjmp
0079c 0e6 2B A0 61 FD |     pop __pc
007a0 0e7 00 5E 0E F2 |     cmp    arg01, #0 wz
007a4 0e8 30 00 90 AD |  if_z jmp #nocatch
007a8 0e9 30 19 02 F6 |     mov result1, arg02
007ac 0ea 01 1A 06 F6 |     mov result2, #1
007b0 0eb 2F 61 02 FB |     rdlong arg02, arg01
007b4 0ec 04 5E 06 F1 |     add arg01, #4
007b8 0ed 2F F1 03 FB |     rdlong ptra, arg01
007bc 0ee 04 5E 06 F1 |     add arg01, #4
007c0 0ef 2F FB 01 FB |     rdlong objptr, arg01
007c4 0f0 04 5E 06 F1 |     add arg01, #4
007c8 0f1 2F A1 01 FB |     rdlong __pc, arg01
007cc 0f2 AF 5E 02 F6 |     mov arg01, fp
007d0 0f3 A8 FF BF FD |     call #__unwind_stack
007d4 0f4             | __longjmp_ret
007d4 0f4 2C A0 61 FD |     jmp  __pc
007d8 0f5             | nocatch
007d8 0f5 00 62 0E F2 |     cmp arg03, #0 wz
007dc 0f6 28 FE 9F AD |  if_z jmp #cogexit
007e0 0f7 F0 FF 9F FD |     jmp #__longjmp_ret
007e4 0f8             | 
007e4 0f8             | __heap_ptr
007e4 0f8 DC C1 01 00 | 	long	@__heap_base
007e8 0f9             | abortchain
007e8 0f9 00 00 00 00 | 	long	0
007ec 0fa             | entryptr__
007ec 0fa 04 04 00 00 | 	long	@entry
007f0 0fb             | itmp1_
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | itmp2_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | objptr
007f8 0fd E4 D1 01 00 | 	long	@objmem
007fc 0fe             | ptr___struct___bas_wrap_sender_tx_
007fc 0fe 60 85 00 00 | 	long	@__struct___bas_wrap_sender_tx
00800 0ff             | ptr___struct__s_vfs_file_t_putchar_
00800 0ff A8 84 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00804 100             | ptr___system__dat__
00804 100 78 BF 01 00 | 	long	@__system__dat_
00808 101             | ptr__audio019_spin2_dat__
00808 101 68 B4 01 00 | 	long	@_audio019_spin2_dat_
0080c 102             | ptr__dat__
0080c 102 A4 86 00 00 | 	long	@_dat_
00810 103             | ptr__hng030rm_spin2_dat__
00810 103 E0 7E 01 00 | 	long	@_hng030rm_spin2_dat_
00814 104             | ptr__hng030rm_spin2_putchar_
00814 104 58 24 00 00 | 	long	@_hng030rm_spin2_putchar
00818 105             | ptr__hng030rm_spin2_putpixel1_
00818 105 70 1E 00 00 | 	long	@_hng030rm_spin2_putpixel1
0081c 106             | ptr__hng030rm_spin2_putpixel2_
0081c 106 5C 1F 00 00 | 	long	@_hng030rm_spin2_putpixel2
00820 107             | ptr__hng030rm_spin2_putpixel4_
00820 107 3C 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
00824 108             | ptr__hng030rm_spin2_putpixel8_
00824 108 28 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00828 109             | ptr__retrocog_spin2_serialcog_
00828 109 04 36 00 00 | 	long	@_retrocog_spin2_serialcog
0082c 10a             | ptr__trackerplayer_spin2_dat__
0082c 10a 44 A3 01 00 | 	long	@_trackerplayer_spin2_dat_
00830 10b             | ptr_stackspace_
00830 10b 8C E3 01 00 | 	long	@stackspace
00834 10c             | result1
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result2
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | result3
0083c 10e 00 00 00 00 | 	long	0
00840 10f             | COG_BSS_START
00840 10f             | 	fit	480
00840                 | 	orgh
00840                 | hubentry
00840                 | 
00840                 | ' 
00840                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00840                 | _startvideo
00840     C8 2B B0 FD | 	call	#_hng030rm_spin2_start
00844     00 5E 06 F6 | 	mov	arg01, #0
00848     00 60 06 F6 | 	mov	arg02, #0
0084c     00 62 06 F6 | 	mov	arg03, #0
00850     CC 19 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00854                 | ' v030.start(mode,pin)
00854                 | ' v030.setbordercolor(0,0,0)
00854                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00854     FD 5E 02 F6 | 	mov	arg01, objptr
00858     04 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
0085c     74 5A B0 FD | 	call	#__system___make_methodptr
00860     00 1C 06 F6 | 	mov	result3, #0
00864     00 1A 06 F6 | 	mov	result2, #0
00868     0C 61 02 F6 | 	mov	arg02, result1
0086c     00 62 06 F6 | 	mov	arg03, #0
00870     00 64 06 F6 | 	mov	arg04, #0
00874     00 5E 06 F6 | 	mov	arg01, #0
00878     34 5D B0 FD | 	call	#__system___basic_open
0087c     00 18 06 F6 | 	mov	result1, #0
00880                 | _startvideo_ret
00880     2D 00 64 FD | 	ret
00884                 | 
00884                 | ' 
00884                 | ' function addr(byref v as any)
00884                 | _addr
00884     00 5A 05 F6 | 	mov	COUNT_, #0
00888     B0 00 A0 FD | 	call	#pushregs_
0088c     08 F0 07 F1 | 	add	ptra, #8
00890     04 5E 05 F1 | 	add	fp, #4
00894     AF 5E 62 FC | 	wrlong	arg01, fp
00898                 | ' 
00898                 | ' return(cast(ulong,@v))
00898     2F 19 02 F6 | 	mov	result1, arg01
0089c     04 5E 85 F1 | 	sub	fp, #4
008a0     AF F0 03 F6 | 	mov	ptra, fp
008a4     BA 00 A0 FD | 	call	#popregs_
008a8                 | _addr_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' '0 - samplestart   - a pointer to the sample start
008ac                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008ac                 | ' '2 - loopstart     - loop start
008ac                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008ac                 | ' '4 - volume        - sample volume, 16384=1
008ac                 | ' '5 - pan           - 0..16384
008ac                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008ac                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008ac                 | ' '8 - cmd 
008ac                 | ' 
008ac                 | ' 
008ac                 | ' sub test 
008ac                 | _test
008ac     01 5A 05 F6 | 	mov	COUNT_, #1
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     1D 60 06 F6 | 	mov	arg02, #29
008b8                 | ' 
008b8                 | ' ''---------- Set the (x,y) position of cursor
008b8                 | ' 
008b8                 | ' cursor_x:=x
008b8     34 FA 05 F1 | 	add	objptr, #52
008bc     FD 0A 48 FC | 	wrbyte	#5, objptr
008c0                 | ' cursor_y:=y
008c0     01 FA 05 F1 | 	add	objptr, #1
008c4     FD 3A 48 FC | 	wrbyte	#29, objptr
008c8     02 00 00 FF 
008cc     CA FB 05 F1 | 	add	objptr, ##1482
008d0     FD 6C C2 FA | 	rdbyte	local01, objptr
008d4     02 6C 66 F0 | 	shl	local01, #2
008d8     01 00 00 FF 
008dc     65 FA 05 F1 | 	add	objptr, ##613
008e0     FD 6C 02 F1 | 	add	local01, objptr
008e4     36 5F 02 FB | 	rdlong	arg01, local01
008e8     04 00 00 FF 
008ec     64 FA 85 F1 | 	sub	objptr, ##2148
008f0     F0 1C B0 FD | 	call	#_hng030rm_spin2_write
008f4     04 00 00 FF 
008f8     F0 FA 05 F1 | 	add	objptr, ##2288
008fc     FD 5E 02 FB | 	rdlong	arg01, objptr
00900     04 00 00 FF 
00904     F0 FA 85 F1 | 	sub	objptr, ##2288
00908     D8 1C B0 FD | 	call	#_hng030rm_spin2_write
0090c                 | ' 
0090c                 | ' ''---------- Set the (x,y) position of cursor
0090c                 | ' 
0090c                 | ' cursor_x:=x
0090c     34 FA 05 F1 | 	add	objptr, #52
00910     FD 02 48 FC | 	wrbyte	#1, objptr
00914                 | ' cursor_y:=y
00914     01 FA 05 F1 | 	add	objptr, #1
00918     FD 3A 48 FC | 	wrbyte	#29, objptr
0091c     02 00 00 FF 
00920     F2 FB 05 F1 | 	add	objptr, ##1522
00924     FD 5E 02 FB | 	rdlong	arg01, objptr
00928     10 FA 05 F1 | 	add	objptr, #16
0092c     FD 6C 02 FB | 	rdlong	local01, objptr
00930     03 00 00 FF 
00934     37 FA 85 F1 | 	sub	objptr, ##1591
00938     36 5F 02 F1 | 	add	arg01, local01
0093c     03 60 06 F6 | 	mov	arg02, #3
00940     34 20 B0 FD | 	call	#_hng030rm_spin2_inttostr2
00944     0C 5F 02 F6 | 	mov	arg01, result1
00948     98 1C B0 FD | 	call	#_hng030rm_spin2_write
0094c     1D 60 06 F6 | 	mov	arg02, #29
00950                 | ' 
00950                 | ' ''---------- Set the (x,y) position of cursor
00950                 | ' 
00950                 | ' cursor_x:=x
00950     34 FA 05 F1 | 	add	objptr, #52
00954     FD 40 48 FC | 	wrbyte	#32, objptr
00958                 | ' cursor_y:=y
00958     01 FA 05 F1 | 	add	objptr, #1
0095c     FD 3A 48 FC | 	wrbyte	#29, objptr
00960     02 00 00 FF 
00964     CB FB 05 F1 | 	add	objptr, ##1483
00968     FD 6C C2 FA | 	rdbyte	local01, objptr
0096c     02 6C 66 F0 | 	shl	local01, #2
00970     01 00 00 FF 
00974     64 FA 05 F1 | 	add	objptr, ##612
00978     FD 6C 02 F1 | 	add	local01, objptr
0097c     36 5F 02 FB | 	rdlong	arg01, local01
00980     04 00 00 FF 
00984     64 FA 85 F1 | 	sub	objptr, ##2148
00988     58 1C B0 FD | 	call	#_hng030rm_spin2_write
0098c     04 00 00 FF 
00990     F0 FA 05 F1 | 	add	objptr, ##2288
00994     FD 5E 02 FB | 	rdlong	arg01, objptr
00998     04 00 00 FF 
0099c     F0 FA 85 F1 | 	sub	objptr, ##2288
009a0     40 1C B0 FD | 	call	#_hng030rm_spin2_write
009a4                 | ' 
009a4                 | ' ''---------- Set the (x,y) position of cursor
009a4                 | ' 
009a4                 | ' cursor_x:=x
009a4     34 FA 05 F1 | 	add	objptr, #52
009a8     FD 38 48 FC | 	wrbyte	#28, objptr
009ac                 | ' cursor_y:=y
009ac     01 FA 05 F1 | 	add	objptr, #1
009b0     FD 3A 48 FC | 	wrbyte	#29, objptr
009b4     02 00 00 FF 
009b8     F6 FB 05 F1 | 	add	objptr, ##1526
009bc     FD 5E 02 FB | 	rdlong	arg01, objptr
009c0     10 FA 05 F1 | 	add	objptr, #16
009c4     FD 6C 02 FB | 	rdlong	local01, objptr
009c8     03 00 00 FF 
009cc     3B FA 85 F1 | 	sub	objptr, ##1595
009d0     36 5F 02 F1 | 	add	arg01, local01
009d4     03 60 06 F6 | 	mov	arg02, #3
009d8     9C 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
009dc     0C 5F 02 F6 | 	mov	arg01, result1
009e0     00 1C B0 FD | 	call	#_hng030rm_spin2_write
009e4     1D 60 06 F6 | 	mov	arg02, #29
009e8                 | ' 
009e8                 | ' ''---------- Set the (x,y) position of cursor
009e8                 | ' 
009e8                 | ' cursor_x:=x
009e8     34 FA 05 F1 | 	add	objptr, #52
009ec     FD 78 48 FC | 	wrbyte	#60, objptr
009f0                 | ' cursor_y:=y
009f0     01 FA 05 F1 | 	add	objptr, #1
009f4     FD 3A 48 FC | 	wrbyte	#29, objptr
009f8     02 00 00 FF 
009fc     CC FB 05 F1 | 	add	objptr, ##1484
00a00     FD 6C C2 FA | 	rdbyte	local01, objptr
00a04     02 6C 66 F0 | 	shl	local01, #2
00a08     01 00 00 FF 
00a0c     63 FA 05 F1 | 	add	objptr, ##611
00a10     FD 6C 02 F1 | 	add	local01, objptr
00a14     36 5F 02 FB | 	rdlong	arg01, local01
00a18     04 00 00 FF 
00a1c     64 FA 85 F1 | 	sub	objptr, ##2148
00a20     C0 1B B0 FD | 	call	#_hng030rm_spin2_write
00a24     04 00 00 FF 
00a28     F0 FA 05 F1 | 	add	objptr, ##2288
00a2c     FD 5E 02 FB | 	rdlong	arg01, objptr
00a30     04 00 00 FF 
00a34     F0 FA 85 F1 | 	sub	objptr, ##2288
00a38     A8 1B B0 FD | 	call	#_hng030rm_spin2_write
00a3c                 | ' 
00a3c                 | ' ''---------- Set the (x,y) position of cursor
00a3c                 | ' 
00a3c                 | ' cursor_x:=x
00a3c     34 FA 05 F1 | 	add	objptr, #52
00a40     FD 70 48 FC | 	wrbyte	#56, objptr
00a44                 | ' cursor_y:=y
00a44     01 FA 05 F1 | 	add	objptr, #1
00a48     FD 3A 48 FC | 	wrbyte	#29, objptr
00a4c     02 00 00 FF 
00a50     FA FB 05 F1 | 	add	objptr, ##1530
00a54     FD 5E 02 FB | 	rdlong	arg01, objptr
00a58     10 FA 05 F1 | 	add	objptr, #16
00a5c     FD 6C 02 FB | 	rdlong	local01, objptr
00a60     03 00 00 FF 
00a64     3F FA 85 F1 | 	sub	objptr, ##1599
00a68     36 5F 02 F1 | 	add	arg01, local01
00a6c     03 60 06 F6 | 	mov	arg02, #3
00a70     04 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a74     0C 5F 02 F6 | 	mov	arg01, result1
00a78     68 1B B0 FD | 	call	#_hng030rm_spin2_write
00a7c                 | ' 
00a7c                 | ' ''---------- Set the (x,y) position of cursor
00a7c                 | ' 
00a7c                 | ' cursor_x:=x
00a7c     34 FA 05 F1 | 	add	objptr, #52
00a80     FD A8 48 FC | 	wrbyte	#84, objptr
00a84                 | ' cursor_y:=y
00a84     01 FA 05 F1 | 	add	objptr, #1
00a88     FD 3A 48 FC | 	wrbyte	#29, objptr
00a8c     02 00 00 FF 
00a90     FE FB 05 F1 | 	add	objptr, ##1534
00a94     FD 5E 02 FB | 	rdlong	arg01, objptr
00a98     10 FA 05 F1 | 	add	objptr, #16
00a9c     FD 6C 02 FB | 	rdlong	local01, objptr
00aa0     03 00 00 FF 
00aa4     43 FA 85 F1 | 	sub	objptr, ##1603
00aa8     36 5F 02 F1 | 	add	arg01, local01
00aac     03 60 06 F6 | 	mov	arg02, #3
00ab0     C4 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
00ab4     0C 5F 02 F6 | 	mov	arg01, result1
00ab8     28 1B B0 FD | 	call	#_hng030rm_spin2_write
00abc     1D 60 06 F6 | 	mov	arg02, #29
00ac0                 | ' 
00ac0                 | ' ''---------- Set the (x,y) position of cursor
00ac0                 | ' 
00ac0                 | ' cursor_x:=x
00ac0     34 FA 05 F1 | 	add	objptr, #52
00ac4     FD B0 48 FC | 	wrbyte	#88, objptr
00ac8                 | ' cursor_y:=y
00ac8     01 FA 05 F1 | 	add	objptr, #1
00acc     FD 3A 48 FC | 	wrbyte	#29, objptr
00ad0     02 00 00 FF 
00ad4     CD FB 05 F1 | 	add	objptr, ##1485
00ad8     FD 6C C2 FA | 	rdbyte	local01, objptr
00adc     02 6C 66 F0 | 	shl	local01, #2
00ae0     01 00 00 FF 
00ae4     62 FA 05 F1 | 	add	objptr, ##610
00ae8     FD 6C 02 F1 | 	add	local01, objptr
00aec     36 5F 02 FB | 	rdlong	arg01, local01
00af0     04 00 00 FF 
00af4     64 FA 85 F1 | 	sub	objptr, ##2148
00af8     E8 1A B0 FD | 	call	#_hng030rm_spin2_write
00afc     04 00 00 FF 
00b00     F0 FA 05 F1 | 	add	objptr, ##2288
00b04     FD 5E 02 FB | 	rdlong	arg01, objptr
00b08     04 00 00 FF 
00b0c     F0 FA 85 F1 | 	sub	objptr, ##2288
00b10     D0 1A B0 FD | 	call	#_hng030rm_spin2_write
00b14     AF F0 03 F6 | 	mov	ptra, fp
00b18     BA 00 A0 FD | 	call	#popregs_
00b1c                 | _test_ret
00b1c     2D 00 64 FD | 	ret
00b20                 | 
00b20                 | ' 
00b20                 | ' 
00b20                 | ' sub getinfo(ma,num)
00b20                 | _getinfo
00b20     0B 5A 05 F6 | 	mov	COUNT_, #11
00b24     B0 00 A0 FD | 	call	#pushregs_
00b28     2F 6D 02 F6 | 	mov	local01, arg01
00b2c     30 6F 02 F6 | 	mov	local02, arg02
00b30     04 60 06 F6 | 	mov	arg02, #4
00b34                 | ' 
00b34                 | ' ''---------- Set the (x,y) position of cursor
00b34                 | ' 
00b34                 | ' cursor_x:=x
00b34     34 FA 05 F1 | 	add	objptr, #52
00b38     FD 02 48 FC | 	wrbyte	#1, objptr
00b3c                 | ' cursor_y:=y
00b3c     01 FA 05 F1 | 	add	objptr, #1
00b40     FD 08 48 FC | 	wrbyte	#4, objptr
00b44     35 FA 85 F1 | 	sub	objptr, #53
00b48                 | ' 'v030. setwritecolors(170,147):
00b48                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b48     00 5E 06 F6 | 	mov	arg01, #0
00b4c     24 6F B0 FD | 	call	#__system___getiolock_0150
00b50     0C 5F 02 F6 | 	mov	arg01, result1
00b54     BC 57 B0 FD | 	call	#__system___lockmem
00b58     00 18 06 F6 | 	mov	result1, #0
00b5c     42 00 00 FF 
00b60     EE 61 06 F6 | 	mov	arg02, ##@LR__0459
00b64     00 5E 06 F6 | 	mov	arg01, #0
00b68     00 62 06 F6 | 	mov	arg03, #0
00b6c     60 5B B0 FD | 	call	#__system___basic_print_string
00b70     00 5E 06 F6 | 	mov	arg01, #0
00b74     0A 60 06 F6 | 	mov	arg02, #10
00b78     00 62 06 F6 | 	mov	arg03, #0
00b7c     04 5B B0 FD | 	call	#__system___basic_print_char
00b80     01 18 06 F6 | 	mov	result1, #1
00b84     00 5E 06 F6 | 	mov	arg01, #0
00b88     E8 6E B0 FD | 	call	#__system___getiolock_0150
00b8c     0C 01 68 FC | 	wrlong	#0, result1
00b90     00 18 06 F6 | 	mov	result1, #0
00b94                 | ' ': v030. setwritecolors(154,147)
00b94                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00b94     00 70 06 F6 | 	mov	local03, #0
00b98                 | LR__0001
00b98     38 73 02 F6 | 	mov	local04, local03
00b9c     02 72 66 F0 | 	shl	local04, #2
00ba0     04 00 00 FF 
00ba4     64 FA 05 F1 | 	add	objptr, ##2148
00ba8     FD 72 02 F1 | 	add	local04, objptr
00bac     43 00 00 FF 
00bb0     57 74 06 F6 | 	mov	local05, ##@LR__0460
00bb4     38 5F 02 F6 | 	mov	arg01, local03
00bb8     02 60 06 F6 | 	mov	arg02, #2
00bbc     04 00 00 FF 
00bc0     64 FA 85 F1 | 	sub	objptr, ##2148
00bc4     0A 62 06 F6 | 	mov	arg03, #10
00bc8     50 60 B0 FD | 	call	#__system__Number_S
00bcc     0C 61 02 F6 | 	mov	arg02, result1
00bd0     3A 5F 02 F6 | 	mov	arg01, local05
00bd4     78 57 B0 FD | 	call	#__system___string_concat
00bd8     0C 75 02 F6 | 	mov	local05, result1
00bdc     13 5E 06 F6 | 	mov	arg01, #19
00be0     42 00 00 FF 
00be4     98 61 06 F6 | 	mov	arg02, ##@LR__0453
00be8     FC 60 B0 FD | 	call	#__system__String_S
00bec     0C 61 02 F6 | 	mov	arg02, result1
00bf0     3A 5F 02 F6 | 	mov	arg01, local05
00bf4     58 57 B0 FD | 	call	#__system___string_concat
00bf8     39 19 62 FC | 	wrlong	result1, local04
00bfc     01 70 06 F1 | 	add	local03, #1
00c00     20 70 5E F2 | 	cmps	local03, #32 wcz
00c04     90 FF 9F CD |  if_b	jmp	#LR__0001
00c08                 | ' for i=1 to num
00c08     01 70 06 F6 | 	mov	local03, #1
00c0c     01 6E 06 F1 | 	add	local02, #1
00c10                 | LR__0002
00c10     37 71 5A F2 | 	cmps	local03, local02 wcz
00c14     54 08 90 3D |  if_ae	jmp	#LR__0007
00c18                 | '   for j=0 to 21
00c18     00 76 06 F6 | 	mov	local06, #0
00c1c                 | LR__0003
00c1c     38 5F 02 F6 | 	mov	arg01, local03
00c20     02 5E 66 F0 | 	shl	arg01, #2
00c24     04 00 00 FF 
00c28     64 FA 05 F1 | 	add	objptr, ##2148
00c2c     FD 5E 02 F1 | 	add	arg01, objptr
00c30     04 00 00 FF 
00c34     64 FA 85 F1 | 	sub	objptr, ##2148
00c38     48 FC BF FD | 	call	#_addr
00c3c                 | ' asm
00c3c     0C 79 02 FB | 	rdlong	local07, result1
00c40                 | ' return r
00c40     08 00 00 FF 
00c44     8C FB 05 F1 | 	add	objptr, ##4492
00c48     FD 78 62 FC | 	wrlong	local07, objptr
00c4c     36 5F 02 F6 | 	mov	arg01, local01
00c50     14 5E 06 F1 | 	add	arg01, #20
00c54     38 75 02 F6 | 	mov	local05, local03
00c58     01 74 86 F1 | 	sub	local05, #1
00c5c     3A 7B 02 F6 | 	mov	local08, local05
00c60     04 7A 66 F0 | 	shl	local08, #4
00c64     3A 7B 82 F1 | 	sub	local08, local05
00c68     01 7A 66 F0 | 	shl	local08, #1
00c6c     3D 5F 02 F1 | 	add	arg01, local08
00c70     3B 5F 02 F1 | 	add	arg01, local06
00c74                 | ' asm
00c74     2F 19 C2 FA | 	rdbyte	result1, arg01
00c78                 | ' return r
00c78     0C 79 02 F6 | 	mov	local07, result1
00c7c     07 78 46 F7 | 	zerox	local07, #7
00c80     04 FA 05 F1 | 	add	objptr, #4
00c84     FD 78 62 FC | 	wrlong	local07, objptr
00c88                 | '     a=lpeek(addr(sn$(i)))
00c88                 | '     b=(peek(ma+20+30*(i-1)+j))
00c88                 | '     if b>=32 then poke a+j,b
00c88     08 00 00 FF 
00c8c     90 FB 85 F1 | 	sub	objptr, ##4496
00c90     20 78 5E F2 | 	cmps	local07, #32 wcz
00c94     24 00 90 CD |  if_b	jmp	#LR__0004
00c98     08 00 00 FF 
00c9c     8C FB 05 F1 | 	add	objptr, ##4492
00ca0     FD 5E 02 FB | 	rdlong	arg01, objptr
00ca4     3B 5F 02 F1 | 	add	arg01, local06
00ca8     04 FA 05 F1 | 	add	objptr, #4
00cac     FD 60 02 FB | 	rdlong	arg02, objptr
00cb0     08 00 00 FF 
00cb4     90 FB 85 F1 | 	sub	objptr, ##4496
00cb8                 | ' asm
00cb8     2F 61 42 FC | 	wrbyte	arg02, arg01
00cbc                 | LR__0004
00cbc     01 76 06 F1 | 	add	local06, #1
00cc0     16 76 5E F2 | 	cmps	local06, #22 wcz
00cc4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cc8     36 5F 02 F6 | 	mov	arg01, local01
00ccc     14 5E 06 F1 | 	add	arg01, #20
00cd0     38 7B 02 F6 | 	mov	local08, local03
00cd4     01 7A 86 F1 | 	sub	local08, #1
00cd8     3D 7D 02 F6 | 	mov	local09, local08
00cdc     04 7C 66 F0 | 	shl	local09, #4
00ce0     3D 7D 82 F1 | 	sub	local09, local08
00ce4     01 7C 66 F0 | 	shl	local09, #1
00ce8     3E 5F 02 F1 | 	add	arg01, local09
00cec     16 5E 06 F1 | 	add	arg01, #22
00cf0                 | ' asm
00cf0     2F 75 C2 FA | 	rdbyte	local05, arg01
00cf4                 | ' return r
00cf4     07 74 46 F7 | 	zerox	local05, #7
00cf8     08 74 66 F0 | 	shl	local05, #8
00cfc     36 5F 02 F6 | 	mov	arg01, local01
00d00     14 5E 06 F1 | 	add	arg01, #20
00d04     38 7F 02 F6 | 	mov	local10, local03
00d08     01 7E 86 F1 | 	sub	local10, #1
00d0c     3F 81 02 F6 | 	mov	local11, local10
00d10     04 80 66 F0 | 	shl	local11, #4
00d14     3F 81 82 F1 | 	sub	local11, local10
00d18     01 80 66 F0 | 	shl	local11, #1
00d1c     40 5F 02 F1 | 	add	arg01, local11
00d20     17 5E 06 F1 | 	add	arg01, #23
00d24                 | ' asm
00d24     2F 7B C2 FA | 	rdbyte	local08, arg01
00d28                 | ' return r
00d28     07 7A 46 F7 | 	zerox	local08, #7
00d2c     3D 75 02 F1 | 	add	local05, local08
00d30     01 74 66 F0 | 	shl	local05, #1
00d34     08 00 00 FF 
00d38     94 FB 05 F1 | 	add	objptr, ##4500
00d3c     FD 74 62 FC | 	wrlong	local05, objptr
00d40     36 5F 02 F6 | 	mov	arg01, local01
00d44     14 5E 06 F1 | 	add	arg01, #20
00d48     38 7B 02 F6 | 	mov	local08, local03
00d4c     01 7A 86 F1 | 	sub	local08, #1
00d50     3D 7D 02 F6 | 	mov	local09, local08
00d54     04 7C 66 F0 | 	shl	local09, #4
00d58     3D 7D 82 F1 | 	sub	local09, local08
00d5c     01 7C 66 F0 | 	shl	local09, #1
00d60     3E 5F 02 F1 | 	add	arg01, local09
00d64     1A 5E 06 F1 | 	add	arg01, #26
00d68                 | ' asm
00d68     2F 75 C2 FA | 	rdbyte	local05, arg01
00d6c                 | ' return r
00d6c     07 74 46 F7 | 	zerox	local05, #7
00d70     08 74 66 F0 | 	shl	local05, #8
00d74     36 5F 02 F6 | 	mov	arg01, local01
00d78     14 5E 06 F1 | 	add	arg01, #20
00d7c     38 7F 02 F6 | 	mov	local10, local03
00d80     01 7E 86 F1 | 	sub	local10, #1
00d84     3F 81 02 F6 | 	mov	local11, local10
00d88     04 80 66 F0 | 	shl	local11, #4
00d8c     3F 81 82 F1 | 	sub	local11, local10
00d90     01 80 66 F0 | 	shl	local11, #1
00d94     40 5F 02 F1 | 	add	arg01, local11
00d98     1B 5E 06 F1 | 	add	arg01, #27
00d9c                 | ' asm
00d9c     2F 7B C2 FA | 	rdbyte	local08, arg01
00da0                 | ' return r
00da0     07 7A 46 F7 | 	zerox	local08, #7
00da4     3D 75 02 F1 | 	add	local05, local08
00da8     01 74 66 F0 | 	shl	local05, #1
00dac     04 FA 05 F1 | 	add	objptr, #4
00db0     FD 74 62 FC | 	wrlong	local05, objptr
00db4     36 5F 02 F6 | 	mov	arg01, local01
00db8     14 5E 06 F1 | 	add	arg01, #20
00dbc     38 7B 02 F6 | 	mov	local08, local03
00dc0     01 7A 86 F1 | 	sub	local08, #1
00dc4     3D 7D 02 F6 | 	mov	local09, local08
00dc8     04 7C 66 F0 | 	shl	local09, #4
00dcc     3D 7D 82 F1 | 	sub	local09, local08
00dd0     01 7C 66 F0 | 	shl	local09, #1
00dd4     3E 5F 02 F1 | 	add	arg01, local09
00dd8     1C 5E 06 F1 | 	add	arg01, #28
00ddc                 | ' asm
00ddc     2F 75 C2 FA | 	rdbyte	local05, arg01
00de0                 | ' return r
00de0     07 74 46 F7 | 	zerox	local05, #7
00de4     08 74 66 F0 | 	shl	local05, #8
00de8     36 5F 02 F6 | 	mov	arg01, local01
00dec     14 5E 06 F1 | 	add	arg01, #20
00df0     38 7F 02 F6 | 	mov	local10, local03
00df4     01 7E 86 F1 | 	sub	local10, #1
00df8     3F 81 02 F6 | 	mov	local11, local10
00dfc     04 80 66 F0 | 	shl	local11, #4
00e00     3F 81 82 F1 | 	sub	local11, local10
00e04     01 80 66 F0 | 	shl	local11, #1
00e08     40 5F 02 F1 | 	add	arg01, local11
00e0c     1D 5E 06 F1 | 	add	arg01, #29
00e10                 | ' asm
00e10     2F 7B C2 FA | 	rdbyte	local08, arg01
00e14                 | ' return r
00e14     07 7A 46 F7 | 	zerox	local08, #7
00e18     3D 75 02 F1 | 	add	local05, local08
00e1c     01 74 66 F0 | 	shl	local05, #1
00e20     04 FA 05 F1 | 	add	objptr, #4
00e24     FD 74 62 FC | 	wrlong	local05, objptr
00e28     36 5F 02 F6 | 	mov	arg01, local01
00e2c     14 5E 06 F1 | 	add	arg01, #20
00e30     38 75 02 F6 | 	mov	local05, local03
00e34     01 74 86 F1 | 	sub	local05, #1
00e38     3A 7B 02 F6 | 	mov	local08, local05
00e3c     04 7A 66 F0 | 	shl	local08, #4
00e40     3A 7B 82 F1 | 	sub	local08, local05
00e44     01 7A 66 F0 | 	shl	local08, #1
00e48     3D 5F 02 F1 | 	add	arg01, local08
00e4c     18 5E 06 F1 | 	add	arg01, #24
00e50                 | ' asm
00e50     2F 79 C2 FA | 	rdbyte	local07, arg01
00e54                 | ' return r
00e54     07 78 46 F7 | 	zerox	local07, #7
00e58     04 FA 05 F1 | 	add	objptr, #4
00e5c     FD 78 62 FC | 	wrlong	local07, objptr
00e60     36 5F 02 F6 | 	mov	arg01, local01
00e64     14 5E 06 F1 | 	add	arg01, #20
00e68     38 75 02 F6 | 	mov	local05, local03
00e6c     01 74 86 F1 | 	sub	local05, #1
00e70     3A 7B 02 F6 | 	mov	local08, local05
00e74     04 7A 66 F0 | 	shl	local08, #4
00e78     3A 7B 82 F1 | 	sub	local08, local05
00e7c     01 7A 66 F0 | 	shl	local08, #1
00e80     3D 5F 02 F1 | 	add	arg01, local08
00e84     19 5E 06 F1 | 	add	arg01, #25
00e88                 | ' asm
00e88     2F 19 C2 FA | 	rdbyte	result1, arg01
00e8c                 | ' return r
00e8c     0C 79 02 F6 | 	mov	local07, result1
00e90     07 78 46 F7 | 	zerox	local07, #7
00e94     04 FA 05 F1 | 	add	objptr, #4
00e98     FD 78 62 FC | 	wrlong	local07, objptr
00e9c     08 00 00 FF 
00ea0     A4 FB 85 F1 | 	sub	objptr, ##4516
00ea4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ea4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ea4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ea4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ea4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ea4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ea4     10 70 5E F2 | 	cmps	local03, #16 wcz
00ea8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00eac     05 60 06 F6 | 	mov	arg02, #5
00eb0     38 61 02 F1 | 	add	arg02, local03
00eb4                 | ' 
00eb4                 | ' ''---------- Set the (x,y) position of cursor
00eb4                 | ' 
00eb4                 | ' cursor_x:=x
00eb4     34 FA 05 F1 | 	add	objptr, #52
00eb8     FD 02 48 FC | 	wrbyte	#1, objptr
00ebc                 | ' cursor_y:=y
00ebc     01 FA 05 F1 | 	add	objptr, #1
00ec0     FD 60 42 FC | 	wrbyte	arg02, objptr
00ec4     35 FA 85 F1 | 	sub	objptr, #53
00ec8     00 5E 06 F6 | 	mov	arg01, #0
00ecc     A4 6B B0 FD | 	call	#__system___getiolock_0150
00ed0     0C 5F 02 F6 | 	mov	arg01, result1
00ed4     3C 54 B0 FD | 	call	#__system___lockmem
00ed8     00 18 06 F6 | 	mov	result1, #0
00edc     38 7D 02 F6 | 	mov	local09, local03
00ee0     02 7C 66 F0 | 	shl	local09, #2
00ee4     04 00 00 FF 
00ee8     64 FA 05 F1 | 	add	objptr, ##2148
00eec     FD 7C 02 F1 | 	add	local09, objptr
00ef0     3E 61 02 FB | 	rdlong	arg02, local09
00ef4     00 5E 06 F6 | 	mov	arg01, #0
00ef8     00 62 06 F6 | 	mov	arg03, #0
00efc     04 00 00 FF 
00f00     64 FA 85 F1 | 	sub	objptr, ##2148
00f04     C8 57 B0 FD | 	call	#__system___basic_print_string
00f08     00 5E 06 F6 | 	mov	arg01, #0
00f0c     0A 60 06 F6 | 	mov	arg02, #10
00f10     00 62 06 F6 | 	mov	arg03, #0
00f14     6C 57 B0 FD | 	call	#__system___basic_print_char
00f18     01 18 06 F6 | 	mov	result1, #1
00f1c     00 5E 06 F6 | 	mov	arg01, #0
00f20     50 6B B0 FD | 	call	#__system___getiolock_0150
00f24     0C 01 68 FC | 	wrlong	#0, result1
00f28     00 18 06 F6 | 	mov	result1, #0
00f2c     05 60 06 F6 | 	mov	arg02, #5
00f30     38 61 02 F1 | 	add	arg02, local03
00f34                 | ' 
00f34                 | ' ''---------- Set the (x,y) position of cursor
00f34                 | ' 
00f34                 | ' cursor_x:=x
00f34     34 FA 05 F1 | 	add	objptr, #52
00f38     FD 30 48 FC | 	wrbyte	#24, objptr
00f3c                 | ' cursor_y:=y
00f3c     01 FA 05 F1 | 	add	objptr, #1
00f40     FD 60 42 FC | 	wrbyte	arg02, objptr
00f44     35 FA 85 F1 | 	sub	objptr, #53
00f48     00 5E 06 F6 | 	mov	arg01, #0
00f4c     24 6B B0 FD | 	call	#__system___getiolock_0150
00f50     0C 5F 02 F6 | 	mov	arg01, result1
00f54     BC 53 B0 FD | 	call	#__system___lockmem
00f58     00 18 06 F6 | 	mov	result1, #0
00f5c     08 00 00 FF 
00f60     94 FB 05 F1 | 	add	objptr, ##4500
00f64     FD 60 02 FB | 	rdlong	arg02, objptr
00f68     08 00 00 FF 
00f6c     94 FB 85 F1 | 	sub	objptr, ##4500
00f70     00 5E 06 F6 | 	mov	arg01, #0
00f74     00 62 06 F6 | 	mov	arg03, #0
00f78     0A 64 06 F6 | 	mov	arg04, #10
00f7c     98 57 B0 FD | 	call	#__system___basic_print_integer
00f80     00 5E 06 F6 | 	mov	arg01, #0
00f84     0A 60 06 F6 | 	mov	arg02, #10
00f88     00 62 06 F6 | 	mov	arg03, #0
00f8c     F4 56 B0 FD | 	call	#__system___basic_print_char
00f90     01 18 06 F6 | 	mov	result1, #1
00f94     00 5E 06 F6 | 	mov	arg01, #0
00f98     D8 6A B0 FD | 	call	#__system___getiolock_0150
00f9c     0C 01 68 FC | 	wrlong	#0, result1
00fa0     00 18 06 F6 | 	mov	result1, #0
00fa4     05 60 06 F6 | 	mov	arg02, #5
00fa8     38 61 02 F1 | 	add	arg02, local03
00fac                 | ' 
00fac                 | ' ''---------- Set the (x,y) position of cursor
00fac                 | ' 
00fac                 | ' cursor_x:=x
00fac     34 FA 05 F1 | 	add	objptr, #52
00fb0     FD 3E 48 FC | 	wrbyte	#31, objptr
00fb4                 | ' cursor_y:=y
00fb4     01 FA 05 F1 | 	add	objptr, #1
00fb8     FD 60 42 FC | 	wrbyte	arg02, objptr
00fbc     35 FA 85 F1 | 	sub	objptr, #53
00fc0     00 5E 06 F6 | 	mov	arg01, #0
00fc4     AC 6A B0 FD | 	call	#__system___getiolock_0150
00fc8     0C 5F 02 F6 | 	mov	arg01, result1
00fcc     44 53 B0 FD | 	call	#__system___lockmem
00fd0     00 18 06 F6 | 	mov	result1, #0
00fd4     08 00 00 FF 
00fd8     A0 FB 05 F1 | 	add	objptr, ##4512
00fdc     FD 60 02 FB | 	rdlong	arg02, objptr
00fe0     08 00 00 FF 
00fe4     A0 FB 85 F1 | 	sub	objptr, ##4512
00fe8     00 5E 06 F6 | 	mov	arg01, #0
00fec     00 62 06 F6 | 	mov	arg03, #0
00ff0     0A 64 06 F6 | 	mov	arg04, #10
00ff4     20 57 B0 FD | 	call	#__system___basic_print_integer
00ff8     00 5E 06 F6 | 	mov	arg01, #0
00ffc     0A 60 06 F6 | 	mov	arg02, #10
01000     00 62 06 F6 | 	mov	arg03, #0
01004     7C 56 B0 FD | 	call	#__system___basic_print_char
01008     01 18 06 F6 | 	mov	result1, #1
0100c     00 5E 06 F6 | 	mov	arg01, #0
01010     60 6A B0 FD | 	call	#__system___getiolock_0150
01014     0C 01 68 FC | 	wrlong	#0, result1
01018     00 18 06 F6 | 	mov	result1, #0
0101c     05 60 06 F6 | 	mov	arg02, #5
01020     38 61 02 F1 | 	add	arg02, local03
01024                 | ' 
01024                 | ' ''---------- Set the (x,y) position of cursor
01024                 | ' 
01024                 | ' cursor_x:=x
01024     34 FA 05 F1 | 	add	objptr, #52
01028     FD 44 48 FC | 	wrbyte	#34, objptr
0102c                 | ' cursor_y:=y
0102c     01 FA 05 F1 | 	add	objptr, #1
01030     FD 60 42 FC | 	wrbyte	arg02, objptr
01034     35 FA 85 F1 | 	sub	objptr, #53
01038     00 5E 06 F6 | 	mov	arg01, #0
0103c     34 6A B0 FD | 	call	#__system___getiolock_0150
01040     0C 5F 02 F6 | 	mov	arg01, result1
01044     CC 52 B0 FD | 	call	#__system___lockmem
01048     00 18 06 F6 | 	mov	result1, #0
0104c     08 00 00 FF 
01050     A4 FB 05 F1 | 	add	objptr, ##4516
01054     FD 60 02 FB | 	rdlong	arg02, objptr
01058     08 00 00 FF 
0105c     A4 FB 85 F1 | 	sub	objptr, ##4516
01060     00 5E 06 F6 | 	mov	arg01, #0
01064     00 62 06 F6 | 	mov	arg03, #0
01068     0A 64 06 F6 | 	mov	arg04, #10
0106c     A8 56 B0 FD | 	call	#__system___basic_print_integer
01070     00 5E 06 F6 | 	mov	arg01, #0
01074     0A 60 06 F6 | 	mov	arg02, #10
01078     00 62 06 F6 | 	mov	arg03, #0
0107c     04 56 B0 FD | 	call	#__system___basic_print_char
01080     01 18 06 F6 | 	mov	result1, #1
01084     00 5E 06 F6 | 	mov	arg01, #0
01088     E8 69 B0 FD | 	call	#__system___getiolock_0150
0108c     0C 01 68 FC | 	wrlong	#0, result1
01090     00 18 06 F6 | 	mov	result1, #0
01094     05 60 06 F6 | 	mov	arg02, #5
01098     38 61 02 F1 | 	add	arg02, local03
0109c                 | ' 
0109c                 | ' ''---------- Set the (x,y) position of cursor
0109c                 | ' 
0109c                 | ' cursor_x:=x
0109c     34 FA 05 F1 | 	add	objptr, #52
010a0     FD 4A 48 FC | 	wrbyte	#37, objptr
010a4                 | ' cursor_y:=y
010a4     01 FA 05 F1 | 	add	objptr, #1
010a8     FD 60 42 FC | 	wrbyte	arg02, objptr
010ac     35 FA 85 F1 | 	sub	objptr, #53
010b0     00 5E 06 F6 | 	mov	arg01, #0
010b4     BC 69 B0 FD | 	call	#__system___getiolock_0150
010b8     0C 5F 02 F6 | 	mov	arg01, result1
010bc     54 52 B0 FD | 	call	#__system___lockmem
010c0     00 18 06 F6 | 	mov	result1, #0
010c4     08 00 00 FF 
010c8     98 FB 05 F1 | 	add	objptr, ##4504
010cc     FD 60 02 FB | 	rdlong	arg02, objptr
010d0     08 00 00 FF 
010d4     98 FB 85 F1 | 	sub	objptr, ##4504
010d8     00 5E 06 F6 | 	mov	arg01, #0
010dc     00 62 06 F6 | 	mov	arg03, #0
010e0     0A 64 06 F6 | 	mov	arg04, #10
010e4     30 56 B0 FD | 	call	#__system___basic_print_integer
010e8     00 5E 06 F6 | 	mov	arg01, #0
010ec     0A 60 06 F6 | 	mov	arg02, #10
010f0     00 62 06 F6 | 	mov	arg03, #0
010f4     8C 55 B0 FD | 	call	#__system___basic_print_char
010f8     01 18 06 F6 | 	mov	result1, #1
010fc     00 5E 06 F6 | 	mov	arg01, #0
01100     70 69 B0 FD | 	call	#__system___getiolock_0150
01104     0C 01 68 FC | 	wrlong	#0, result1
01108     00 18 06 F6 | 	mov	result1, #0
0110c     05 60 06 F6 | 	mov	arg02, #5
01110     38 61 02 F1 | 	add	arg02, local03
01114                 | ' 
01114                 | ' ''---------- Set the (x,y) position of cursor
01114                 | ' 
01114                 | ' cursor_x:=x
01114     34 FA 05 F1 | 	add	objptr, #52
01118     FD 56 48 FC | 	wrbyte	#43, objptr
0111c                 | ' cursor_y:=y
0111c     01 FA 05 F1 | 	add	objptr, #1
01120     FD 60 42 FC | 	wrbyte	arg02, objptr
01124     35 FA 85 F1 | 	sub	objptr, #53
01128     00 5E 06 F6 | 	mov	arg01, #0
0112c     44 69 B0 FD | 	call	#__system___getiolock_0150
01130     0C 5F 02 F6 | 	mov	arg01, result1
01134     DC 51 B0 FD | 	call	#__system___lockmem
01138     00 18 06 F6 | 	mov	result1, #0
0113c     08 00 00 FF 
01140     9C FB 05 F1 | 	add	objptr, ##4508
01144     FD 60 02 FB | 	rdlong	arg02, objptr
01148     08 00 00 FF 
0114c     9C FB 85 F1 | 	sub	objptr, ##4508
01150     00 5E 06 F6 | 	mov	arg01, #0
01154     00 62 06 F6 | 	mov	arg03, #0
01158     0A 64 06 F6 | 	mov	arg04, #10
0115c     B8 55 B0 FD | 	call	#__system___basic_print_integer
01160     00 5E 06 F6 | 	mov	arg01, #0
01164     0A 60 06 F6 | 	mov	arg02, #10
01168     00 62 06 F6 | 	mov	arg03, #0
0116c     14 55 B0 FD | 	call	#__system___basic_print_char
01170     01 18 06 F6 | 	mov	result1, #1
01174     00 5E 06 F6 | 	mov	arg01, #0
01178     F8 68 B0 FD | 	call	#__system___getiolock_0150
0117c     0C 01 68 FC | 	wrlong	#0, result1
01180     00 18 06 F6 | 	mov	result1, #0
01184                 | LR__0005
01184                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01184     10 70 5E F2 | 	cmps	local03, #16 wcz
01188     D8 02 90 CD |  if_b	jmp	#LR__0006
0118c     38 61 02 F6 | 	mov	arg02, local03
01190     0B 60 86 F1 | 	sub	arg02, #11
01194                 | ' 
01194                 | ' ''---------- Set the (x,y) position of cursor
01194                 | ' 
01194                 | ' cursor_x:=x
01194     34 FA 05 F1 | 	add	objptr, #52
01198     FD 72 48 FC | 	wrbyte	#57, objptr
0119c                 | ' cursor_y:=y
0119c     01 FA 05 F1 | 	add	objptr, #1
011a0     FD 60 42 FC | 	wrbyte	arg02, objptr
011a4     35 FA 85 F1 | 	sub	objptr, #53
011a8     00 5E 06 F6 | 	mov	arg01, #0
011ac     C4 68 B0 FD | 	call	#__system___getiolock_0150
011b0     0C 5F 02 F6 | 	mov	arg01, result1
011b4     5C 51 B0 FD | 	call	#__system___lockmem
011b8     00 18 06 F6 | 	mov	result1, #0
011bc     38 7D 02 F6 | 	mov	local09, local03
011c0     02 7C 66 F0 | 	shl	local09, #2
011c4     04 00 00 FF 
011c8     64 FA 05 F1 | 	add	objptr, ##2148
011cc     FD 7C 02 F1 | 	add	local09, objptr
011d0     3E 61 02 FB | 	rdlong	arg02, local09
011d4     00 5E 06 F6 | 	mov	arg01, #0
011d8     00 62 06 F6 | 	mov	arg03, #0
011dc     04 00 00 FF 
011e0     64 FA 85 F1 | 	sub	objptr, ##2148
011e4     E8 54 B0 FD | 	call	#__system___basic_print_string
011e8     00 5E 06 F6 | 	mov	arg01, #0
011ec     0A 60 06 F6 | 	mov	arg02, #10
011f0     00 62 06 F6 | 	mov	arg03, #0
011f4     8C 54 B0 FD | 	call	#__system___basic_print_char
011f8     01 18 06 F6 | 	mov	result1, #1
011fc     00 5E 06 F6 | 	mov	arg01, #0
01200     70 68 B0 FD | 	call	#__system___getiolock_0150
01204     0C 01 68 FC | 	wrlong	#0, result1
01208     00 18 06 F6 | 	mov	result1, #0
0120c     38 61 02 F6 | 	mov	arg02, local03
01210     0B 60 86 F1 | 	sub	arg02, #11
01214                 | ' 
01214                 | ' ''---------- Set the (x,y) position of cursor
01214                 | ' 
01214                 | ' cursor_x:=x
01214     34 FA 05 F1 | 	add	objptr, #52
01218     FD A0 48 FC | 	wrbyte	#80, objptr
0121c                 | ' cursor_y:=y
0121c     01 FA 05 F1 | 	add	objptr, #1
01220     FD 60 42 FC | 	wrbyte	arg02, objptr
01224     35 FA 85 F1 | 	sub	objptr, #53
01228     00 5E 06 F6 | 	mov	arg01, #0
0122c     44 68 B0 FD | 	call	#__system___getiolock_0150
01230     0C 5F 02 F6 | 	mov	arg01, result1
01234     DC 50 B0 FD | 	call	#__system___lockmem
01238     00 18 06 F6 | 	mov	result1, #0
0123c     08 00 00 FF 
01240     94 FB 05 F1 | 	add	objptr, ##4500
01244     FD 60 02 FB | 	rdlong	arg02, objptr
01248     08 00 00 FF 
0124c     94 FB 85 F1 | 	sub	objptr, ##4500
01250     00 5E 06 F6 | 	mov	arg01, #0
01254     00 62 06 F6 | 	mov	arg03, #0
01258     0A 64 06 F6 | 	mov	arg04, #10
0125c     B8 54 B0 FD | 	call	#__system___basic_print_integer
01260     00 5E 06 F6 | 	mov	arg01, #0
01264     0A 60 06 F6 | 	mov	arg02, #10
01268     00 62 06 F6 | 	mov	arg03, #0
0126c     14 54 B0 FD | 	call	#__system___basic_print_char
01270     01 18 06 F6 | 	mov	result1, #1
01274     00 5E 06 F6 | 	mov	arg01, #0
01278     F8 67 B0 FD | 	call	#__system___getiolock_0150
0127c     0C 01 68 FC | 	wrlong	#0, result1
01280     00 18 06 F6 | 	mov	result1, #0
01284     38 61 02 F6 | 	mov	arg02, local03
01288     0B 60 86 F1 | 	sub	arg02, #11
0128c                 | ' 
0128c                 | ' ''---------- Set the (x,y) position of cursor
0128c                 | ' 
0128c                 | ' cursor_x:=x
0128c     34 FA 05 F1 | 	add	objptr, #52
01290     FD AE 48 FC | 	wrbyte	#87, objptr
01294                 | ' cursor_y:=y
01294     01 FA 05 F1 | 	add	objptr, #1
01298     FD 60 42 FC | 	wrbyte	arg02, objptr
0129c     35 FA 85 F1 | 	sub	objptr, #53
012a0     00 5E 06 F6 | 	mov	arg01, #0
012a4     CC 67 B0 FD | 	call	#__system___getiolock_0150
012a8     0C 5F 02 F6 | 	mov	arg01, result1
012ac     64 50 B0 FD | 	call	#__system___lockmem
012b0     00 18 06 F6 | 	mov	result1, #0
012b4     08 00 00 FF 
012b8     A0 FB 05 F1 | 	add	objptr, ##4512
012bc     FD 60 02 FB | 	rdlong	arg02, objptr
012c0     08 00 00 FF 
012c4     A0 FB 85 F1 | 	sub	objptr, ##4512
012c8     00 5E 06 F6 | 	mov	arg01, #0
012cc     00 62 06 F6 | 	mov	arg03, #0
012d0     0A 64 06 F6 | 	mov	arg04, #10
012d4     40 54 B0 FD | 	call	#__system___basic_print_integer
012d8     00 5E 06 F6 | 	mov	arg01, #0
012dc     0A 60 06 F6 | 	mov	arg02, #10
012e0     00 62 06 F6 | 	mov	arg03, #0
012e4     9C 53 B0 FD | 	call	#__system___basic_print_char
012e8     01 18 06 F6 | 	mov	result1, #1
012ec     00 5E 06 F6 | 	mov	arg01, #0
012f0     80 67 B0 FD | 	call	#__system___getiolock_0150
012f4     0C 01 68 FC | 	wrlong	#0, result1
012f8     00 18 06 F6 | 	mov	result1, #0
012fc     38 61 02 F6 | 	mov	arg02, local03
01300     0B 60 86 F1 | 	sub	arg02, #11
01304                 | ' 
01304                 | ' ''---------- Set the (x,y) position of cursor
01304                 | ' 
01304                 | ' cursor_x:=x
01304     34 FA 05 F1 | 	add	objptr, #52
01308     FD B4 48 FC | 	wrbyte	#90, objptr
0130c                 | ' cursor_y:=y
0130c     01 FA 05 F1 | 	add	objptr, #1
01310     FD 60 42 FC | 	wrbyte	arg02, objptr
01314     35 FA 85 F1 | 	sub	objptr, #53
01318     00 5E 06 F6 | 	mov	arg01, #0
0131c     54 67 B0 FD | 	call	#__system___getiolock_0150
01320     0C 5F 02 F6 | 	mov	arg01, result1
01324     EC 4F B0 FD | 	call	#__system___lockmem
01328     00 18 06 F6 | 	mov	result1, #0
0132c     08 00 00 FF 
01330     A4 FB 05 F1 | 	add	objptr, ##4516
01334     FD 60 02 FB | 	rdlong	arg02, objptr
01338     08 00 00 FF 
0133c     A4 FB 85 F1 | 	sub	objptr, ##4516
01340     00 5E 06 F6 | 	mov	arg01, #0
01344     00 62 06 F6 | 	mov	arg03, #0
01348     0A 64 06 F6 | 	mov	arg04, #10
0134c     C8 53 B0 FD | 	call	#__system___basic_print_integer
01350     00 5E 06 F6 | 	mov	arg01, #0
01354     0A 60 06 F6 | 	mov	arg02, #10
01358     00 62 06 F6 | 	mov	arg03, #0
0135c     24 53 B0 FD | 	call	#__system___basic_print_char
01360     01 18 06 F6 | 	mov	result1, #1
01364     00 5E 06 F6 | 	mov	arg01, #0
01368     08 67 B0 FD | 	call	#__system___getiolock_0150
0136c     0C 01 68 FC | 	wrlong	#0, result1
01370     00 18 06 F6 | 	mov	result1, #0
01374     38 61 02 F6 | 	mov	arg02, local03
01378     0B 60 86 F1 | 	sub	arg02, #11
0137c                 | ' 
0137c                 | ' ''---------- Set the (x,y) position of cursor
0137c                 | ' 
0137c                 | ' cursor_x:=x
0137c     34 FA 05 F1 | 	add	objptr, #52
01380     FD BA 48 FC | 	wrbyte	#93, objptr
01384                 | ' cursor_y:=y
01384     01 FA 05 F1 | 	add	objptr, #1
01388     FD 60 42 FC | 	wrbyte	arg02, objptr
0138c     35 FA 85 F1 | 	sub	objptr, #53
01390     00 5E 06 F6 | 	mov	arg01, #0
01394     DC 66 B0 FD | 	call	#__system___getiolock_0150
01398     0C 5F 02 F6 | 	mov	arg01, result1
0139c     74 4F B0 FD | 	call	#__system___lockmem
013a0     00 18 06 F6 | 	mov	result1, #0
013a4     08 00 00 FF 
013a8     98 FB 05 F1 | 	add	objptr, ##4504
013ac     FD 60 02 FB | 	rdlong	arg02, objptr
013b0     08 00 00 FF 
013b4     98 FB 85 F1 | 	sub	objptr, ##4504
013b8     00 5E 06 F6 | 	mov	arg01, #0
013bc     00 62 06 F6 | 	mov	arg03, #0
013c0     0A 64 06 F6 | 	mov	arg04, #10
013c4     50 53 B0 FD | 	call	#__system___basic_print_integer
013c8     00 5E 06 F6 | 	mov	arg01, #0
013cc     0A 60 06 F6 | 	mov	arg02, #10
013d0     00 62 06 F6 | 	mov	arg03, #0
013d4     AC 52 B0 FD | 	call	#__system___basic_print_char
013d8     01 18 06 F6 | 	mov	result1, #1
013dc     00 5E 06 F6 | 	mov	arg01, #0
013e0     90 66 B0 FD | 	call	#__system___getiolock_0150
013e4     0C 01 68 FC | 	wrlong	#0, result1
013e8     00 18 06 F6 | 	mov	result1, #0
013ec     38 61 02 F6 | 	mov	arg02, local03
013f0     0B 60 86 F1 | 	sub	arg02, #11
013f4                 | ' 
013f4                 | ' ''---------- Set the (x,y) position of cursor
013f4                 | ' 
013f4                 | ' cursor_x:=x
013f4     34 FA 05 F1 | 	add	objptr, #52
013f8     FD C6 48 FC | 	wrbyte	#99, objptr
013fc                 | ' cursor_y:=y
013fc     01 FA 05 F1 | 	add	objptr, #1
01400     FD 60 42 FC | 	wrbyte	arg02, objptr
01404     35 FA 85 F1 | 	sub	objptr, #53
01408     00 5E 06 F6 | 	mov	arg01, #0
0140c     64 66 B0 FD | 	call	#__system___getiolock_0150
01410     0C 5F 02 F6 | 	mov	arg01, result1
01414     FC 4E B0 FD | 	call	#__system___lockmem
01418     00 18 06 F6 | 	mov	result1, #0
0141c     08 00 00 FF 
01420     9C FB 05 F1 | 	add	objptr, ##4508
01424     FD 60 02 FB | 	rdlong	arg02, objptr
01428     08 00 00 FF 
0142c     9C FB 85 F1 | 	sub	objptr, ##4508
01430     00 5E 06 F6 | 	mov	arg01, #0
01434     00 62 06 F6 | 	mov	arg03, #0
01438     0A 64 06 F6 | 	mov	arg04, #10
0143c     D8 52 B0 FD | 	call	#__system___basic_print_integer
01440     00 5E 06 F6 | 	mov	arg01, #0
01444     0A 60 06 F6 | 	mov	arg02, #10
01448     00 62 06 F6 | 	mov	arg03, #0
0144c     34 52 B0 FD | 	call	#__system___basic_print_char
01450     01 18 06 F6 | 	mov	result1, #1
01454     00 5E 06 F6 | 	mov	arg01, #0
01458     18 66 B0 FD | 	call	#__system___getiolock_0150
0145c     0C 01 68 FC | 	wrlong	#0, result1
01460     00 18 06 F6 | 	mov	result1, #0
01464                 | LR__0006
01464     01 70 06 F1 | 	add	local03, #1
01468     A4 F7 9F FD | 	jmp	#LR__0002
0146c                 | LR__0007
0146c                 | ' print
0146c     00 5E 06 F6 | 	mov	arg01, #0
01470     00 66 B0 FD | 	call	#__system___getiolock_0150
01474     0C 5F 02 F6 | 	mov	arg01, result1
01478     98 4E B0 FD | 	call	#__system___lockmem
0147c     00 18 06 F6 | 	mov	result1, #0
01480     00 5E 06 F6 | 	mov	arg01, #0
01484     0A 60 06 F6 | 	mov	arg02, #10
01488     00 62 06 F6 | 	mov	arg03, #0
0148c     F4 51 B0 FD | 	call	#__system___basic_print_char
01490     01 18 06 F6 | 	mov	result1, #1
01494     00 5E 06 F6 | 	mov	arg01, #0
01498     D8 65 B0 FD | 	call	#__system___getiolock_0150
0149c     0C 01 68 FC | 	wrlong	#0, result1
014a0     00 18 06 F6 | 	mov	result1, #0
014a4     AF F0 03 F6 | 	mov	ptra, fp
014a8     BA 00 A0 FD | 	call	#popregs_
014ac                 | _getinfo_ret
014ac     2D 00 64 FD | 	ret
014b0                 | 
014b0                 | _program
014b0     09 5A 05 F6 | 	mov	COUNT_, #9
014b4     B0 00 A0 FD | 	call	#pushregs_
014b8     EC FA 05 F1 | 	add	objptr, #236
014bc     F4 20 B0 FD | 	call	#_retrocog_spin2_start
014c0     02 00 00 FF 
014c4     40 FA 05 F1 | 	add	objptr, ##1088
014c8     FD 18 62 FC | 	wrlong	result1, objptr
014cc                 | ' c=rm.start()
014cc                 | ' return c
014cc     02 00 00 FF 
014d0     2C FB 85 F1 | 	sub	objptr, ##1324
014d4     40 5E 06 F6 | 	mov	arg01, #64
014d8     00 60 06 F6 | 	mov	arg02, #0
014dc     60 F3 BF FD | 	call	#_startvideo
014e0     9A 5E 06 F6 | 	mov	arg01, #154
014e4     93 60 06 F6 | 	mov	arg02, #147
014e8     58 0D B0 FD | 	call	#_hng030rm_spin2_cls
014ec     02 00 00 FF 
014f0     30 FB 05 F1 | 	add	objptr, ##1328
014f4     FD 00 69 FC | 	wrlong	#128, objptr
014f8     04 FA 05 F1 | 	add	objptr, #4
014fc     FD 7A 68 FC | 	wrlong	#61, objptr
01500     04 FA 05 F1 | 	add	objptr, #4
01504     FD 78 68 FC | 	wrlong	#60, objptr
01508     04 FA 05 F1 | 	add	objptr, #4
0150c     FD 76 68 FC | 	wrlong	#59, objptr
01510     04 FA 05 F1 | 	add	objptr, #4
01514     FD 74 68 FC | 	wrlong	#58, objptr
01518     04 FA 05 F1 | 	add	objptr, #4
0151c     FD 06 68 FC | 	wrlong	#3, objptr
01520     43 00 00 FF 
01524     59 6C 06 F6 | 	mov	local01, ##@LR__0461
01528     01 00 00 FF 
0152c     AC FB 05 F1 | 	add	objptr, ##940
01530     FD 6C 62 FC | 	wrlong	local01, objptr
01534     43 00 00 FF 
01538     70 6C 06 F6 | 	mov	local01, ##@LR__0462
0153c     04 FA 05 F1 | 	add	objptr, #4
01540     FD 6C 62 FC | 	wrlong	local01, objptr
01544     04 00 00 FF 
01548     F4 FA 85 F1 | 	sub	objptr, ##2292
0154c                 | ' 
0154c                 | ' emptystr$="                      "
0154c                 | ' ss$=""
0154c                 | ' for i=1 to 31 : ss$=ss$+chr$(i) :next i
0154c     01 6E 06 F6 | 	mov	local02, #1
01550                 | LR__0008
01550     04 00 00 FF 
01554     F4 FA 05 F1 | 	add	objptr, ##2292
01558     FD 6C 02 FB | 	rdlong	local01, objptr
0155c     04 00 00 FF 
01560     F4 FA 85 F1 | 	sub	objptr, ##2292
01564     37 5F 02 F6 | 	mov	arg01, local02
01568     74 56 B0 FD | 	call	#__system__Chr_S
0156c     0C 61 02 F6 | 	mov	arg02, result1
01570     36 5F 02 F6 | 	mov	arg01, local01
01574     D8 4D B0 FD | 	call	#__system___string_concat
01578     0C 6D 02 F6 | 	mov	local01, result1
0157c     04 00 00 FF 
01580     F4 FA 05 F1 | 	add	objptr, ##2292
01584     FD 6C 62 FC | 	wrlong	local01, objptr
01588     04 00 00 FF 
0158c     F4 FA 85 F1 | 	sub	objptr, ##2292
01590     01 6E 06 F1 | 	add	local02, #1
01594     20 6E 1E F2 | 	cmp	local02, #32 wcz
01598     B4 FF 9F CD |  if_b	jmp	#LR__0008
0159c     02 5F 02 F6 | 	mov	arg01, ptr__dat__
015a0     E0 F2 BF FD | 	call	#_addr
015a4     04 00 00 FF 
015a8     F8 FA 05 F1 | 	add	objptr, ##2296
015ac     FD 18 62 FC | 	wrlong	result1, objptr
015b0     0C 5F 02 F6 | 	mov	arg01, result1
015b4     00 60 06 F6 | 	mov	arg02, #0
015b8     01 00 00 FF 
015bc     B0 FB 85 F1 | 	sub	objptr, ##944
015c0     D0 26 B0 FD | 	call	#_trackerplayer_spin2_initModule
015c4     01 60 06 F6 | 	mov	arg02, #1
015c8                 | ' 
015c8                 | ' ''---------- Set the (x,y) position of cursor
015c8                 | ' 
015c8                 | ' cursor_x:=x
015c8     02 00 00 FF 
015cc     14 FB 85 F1 | 	sub	objptr, ##1300
015d0     FD 02 48 FC | 	wrbyte	#1, objptr
015d4                 | ' cursor_y:=y
015d4     01 FA 05 F1 | 	add	objptr, #1
015d8     FD 02 48 FC | 	wrbyte	#1, objptr
015dc                 | ' 
015dc                 | ' 
015dc                 | ' ma=addr(module)
015dc                 | ' tracker.initmodule(ma,0)
015dc                 | ' 
015dc                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
015dc     04 00 00 FF 
015e0     C3 FA 05 F1 | 	add	objptr, ##2243
015e4     FD 6E 02 FB | 	rdlong	local02, objptr
015e8     37 71 02 F6 | 	mov	local03, local02
015ec     04 00 00 FF 
015f0     F8 FA 85 F1 | 	sub	objptr, ##2296
015f4     14 70 06 F1 | 	add	local03, #20
015f8                 | LR__0009
015f8     38 6F 5A F2 | 	cmps	local02, local03 wcz
015fc     40 00 90 3D |  if_ae	jmp	#LR__0010
01600     00 5E 06 F6 | 	mov	arg01, #0
01604     6C 64 B0 FD | 	call	#__system___getiolock_0150
01608     0C 5F 02 F6 | 	mov	arg01, result1
0160c     04 4D B0 FD | 	call	#__system___lockmem
01610                 | ' asm
01610     37 19 C2 FA | 	rdbyte	result1, local02
01614                 | ' return r
01614     0C 61 02 F6 | 	mov	arg02, result1
01618     07 60 46 F7 | 	zerox	arg02, #7
0161c     00 5E 06 F6 | 	mov	arg01, #0
01620     00 62 06 F6 | 	mov	arg03, #0
01624     5C 50 B0 FD | 	call	#__system___basic_print_char
01628     00 5E 06 F6 | 	mov	arg01, #0
0162c     44 64 B0 FD | 	call	#__system___getiolock_0150
01630     0C 01 68 FC | 	wrlong	#0, result1
01634     00 18 06 F6 | 	mov	result1, #0
01638     01 6E 06 F1 | 	add	local02, #1
0163c     B8 FF 9F FD | 	jmp	#LR__0009
01640                 | LR__0010
01640     04 00 00 FF 
01644     FC FA 05 F1 | 	add	objptr, ##2300
01648     FD 1E 68 FC | 	wrlong	#15, objptr
0164c                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
0164c     00 6C 06 F6 | 	mov	local01, #0
01650     04 FA 85 F1 | 	sub	objptr, #4
01654     FD 5E 02 FB | 	rdlong	arg01, objptr
01658     02 00 00 FF 
0165c     38 5E 06 F1 | 	add	arg01, ##1080
01660                 | ' asm
01660     2F 73 C2 FA | 	rdbyte	local04, arg01
01664                 | ' return r
01664     07 72 46 F7 | 	zerox	local04, #7
01668     4D 72 0E F2 | 	cmp	local04, #77 wz
0166c     01 6C 66 A6 |  if_e	neg	local01, #1
01670     00 74 06 F6 | 	mov	local05, #0
01674     FD 5E 02 FB | 	rdlong	arg01, objptr
01678     04 00 00 FF 
0167c     F8 FA 85 F1 | 	sub	objptr, ##2296
01680     02 00 00 FF 
01684     3A 5E 06 F1 | 	add	arg01, ##1082
01688                 | ' asm
01688     2F 19 C2 FA | 	rdbyte	result1, arg01
0168c                 | ' return r
0168c     0C 77 02 F6 | 	mov	local06, result1
01690     07 76 46 F7 | 	zerox	local06, #7
01694     4B 76 0E F2 | 	cmp	local06, #75 wz
01698     01 74 66 A6 |  if_e	neg	local05, #1
0169c     3A 6D CA F7 | 	test	local01, local05 wz
016a0     04 00 00 5F 
016a4     FC FA 05 51 |  if_ne	add	objptr, ##2300
016a8     FD 3E 68 5C |  if_ne	wrlong	#31, objptr
016ac     04 00 00 5F 
016b0     FC FA 85 51 |  if_ne	sub	objptr, ##2300
016b4     02 60 06 F6 | 	mov	arg02, #2
016b8                 | ' 
016b8                 | ' ''---------- Set the (x,y) position of cursor
016b8                 | ' 
016b8                 | ' cursor_x:=x
016b8     34 FA 05 F1 | 	add	objptr, #52
016bc     FD 02 48 FC | 	wrbyte	#1, objptr
016c0                 | ' cursor_y:=y
016c0     01 FA 05 F1 | 	add	objptr, #1
016c4     FD 04 48 FC | 	wrbyte	#2, objptr
016c8     35 FA 85 F1 | 	sub	objptr, #53
016cc                 | ' position 1,2 : print samples;" ";"samples module"
016cc     00 5E 06 F6 | 	mov	arg01, #0
016d0     A0 63 B0 FD | 	call	#__system___getiolock_0150
016d4     0C 5F 02 F6 | 	mov	arg01, result1
016d8     38 4C B0 FD | 	call	#__system___lockmem
016dc     00 18 06 F6 | 	mov	result1, #0
016e0     04 00 00 FF 
016e4     FC FA 05 F1 | 	add	objptr, ##2300
016e8     FD 60 02 FB | 	rdlong	arg02, objptr
016ec     04 00 00 FF 
016f0     FC FA 85 F1 | 	sub	objptr, ##2300
016f4     00 5E 06 F6 | 	mov	arg01, #0
016f8     00 62 06 F6 | 	mov	arg03, #0
016fc     0A 64 06 F6 | 	mov	arg04, #10
01700     14 50 B0 FD | 	call	#__system___basic_print_integer
01704     43 00 00 FF 
01708     71 60 06 F6 | 	mov	arg02, ##@LR__0463
0170c     00 5E 06 F6 | 	mov	arg01, #0
01710     00 62 06 F6 | 	mov	arg03, #0
01714     B8 4F B0 FD | 	call	#__system___basic_print_string
01718     43 00 00 FF 
0171c     73 60 06 F6 | 	mov	arg02, ##@LR__0464
01720     00 5E 06 F6 | 	mov	arg01, #0
01724     00 62 06 F6 | 	mov	arg03, #0
01728     A4 4F B0 FD | 	call	#__system___basic_print_string
0172c     00 5E 06 F6 | 	mov	arg01, #0
01730     0A 60 06 F6 | 	mov	arg02, #10
01734     00 62 06 F6 | 	mov	arg03, #0
01738     48 4F B0 FD | 	call	#__system___basic_print_char
0173c     01 18 06 F6 | 	mov	result1, #1
01740     00 5E 06 F6 | 	mov	arg01, #0
01744     2C 63 B0 FD | 	call	#__system___getiolock_0150
01748     0C 01 68 FC | 	wrlong	#0, result1
0174c     00 18 06 F6 | 	mov	result1, #0
01750     04 00 00 FF 
01754     F8 FA 05 F1 | 	add	objptr, ##2296
01758     FD 5E 02 FB | 	rdlong	arg01, objptr
0175c     04 FA 05 F1 | 	add	objptr, #4
01760     FD 60 02 FB | 	rdlong	arg02, objptr
01764     04 00 00 FF 
01768     FC FA 85 F1 | 	sub	objptr, ##2300
0176c     B0 F3 BF FD | 	call	#_getinfo
01770     03 00 00 FF 
01774     44 FB 05 F1 | 	add	objptr, ##1860
01778     4C 47 B0 FD | 	call	#_audio019_spin2_start
0177c     0D 73 02 F6 | 	mov	local04, result2
01780     A4 FB 05 F1 | 	add	objptr, #420
01784     FD 18 62 FC | 	wrlong	result1, objptr
01788     04 FA 05 F1 | 	add	objptr, #4
0178c     FD 72 62 FC | 	wrlong	local04, objptr
01790     14 FA 05 F1 | 	add	objptr, #20
01794     FD 00 68 FC | 	wrlong	#0, objptr
01798     04 FA 05 F1 | 	add	objptr, #4
0179c     FD 00 68 FC | 	wrlong	#0, objptr
017a0     04 FA 05 F1 | 	add	objptr, #4
017a4     FD 00 68 FC | 	wrlong	#0, objptr
017a8     04 FA 05 F1 | 	add	objptr, #4
017ac     FD 00 68 FC | 	wrlong	#0, objptr
017b0     04 00 00 FF 
017b4     F0 FA 85 F1 | 	sub	objptr, ##2288
017b8     FD 6C 02 FB | 	rdlong	local01, objptr
017bc     08 00 00 FF 
017c0     68 FB 05 F1 | 	add	objptr, ##4456
017c4     FD 6C 62 FC | 	wrlong	local01, objptr
017c8     08 00 00 FF 
017cc     84 FB 85 F1 | 	sub	objptr, ##4484
017d0                 | ' dltest=v030.dl_ptr
017d0                 | ' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i 
017d0     00 6E 06 F6 | 	mov	local02, #0
017d4     74 E8 9F FE | 	loc	pa,	#(@LR__0012-@LR__0011)
017d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
017dc                 | LR__0011
017dc     37 73 02 F6 | 	mov	local04, local02
017e0     02 72 66 F0 | 	shl	local04, #2
017e4     04 00 00 FF 
017e8     10 FB 05 F1 | 	add	objptr, ##2320
017ec     FD 72 02 F1 | 	add	local04, objptr
017f0     04 00 00 FF 
017f4     74 FA 05 F1 | 	add	objptr, ##2164
017f8     FD 5E 02 FB | 	rdlong	arg01, objptr
017fc     08 00 00 FF 
01800     84 FB 85 F1 | 	sub	objptr, ##4484
01804     37 79 02 F6 | 	mov	local07, local02
01808     02 78 66 F0 | 	shl	local07, #2
0180c     3C 5F 02 F1 | 	add	arg01, local07
01810                 | ' asm
01810     2F 19 02 FB | 	rdlong	result1, arg01
01814                 | ' return r
01814     39 19 62 FC | 	wrlong	result1, local04
01818     01 6E 06 F1 | 	add	local02, #1
0181c     01 00 00 FF 
01820     1C 6E 5E F2 | 	cmps	local02, ##540 wcz
01824     B4 FF 9F CD |  if_b	jmp	#LR__0011
01828                 | LR__0012
01828     1A 60 06 F6 | 	mov	arg02, #26
0182c                 | ' 
0182c                 | ' ''---------- Set the (x,y) position of cursor
0182c                 | ' 
0182c                 | ' cursor_x:=x
0182c     34 FA 05 F1 | 	add	objptr, #52
01830     FD 00 48 FC | 	wrbyte	#0, objptr
01834                 | ' cursor_y:=y
01834     01 FA 05 F1 | 	add	objptr, #1
01838     FD 34 48 FC | 	wrbyte	#26, objptr
0183c     04 00 00 FF 
01840     BF FA 05 F1 | 	add	objptr, ##2239
01844     FD 5E 02 FB | 	rdlong	arg01, objptr
01848     04 00 00 FF 
0184c     F4 FA 85 F1 | 	sub	objptr, ##2292
01850     7C 0F B0 FD | 	call	#_hng030rm_spin2_writeln
01854                 | ' position 0,26 : v030.writeln(ss$)
01854                 | ' print"123456789012345678901234567890"
01854     00 5E 06 F6 | 	mov	arg01, #0
01858     18 62 B0 FD | 	call	#__system___getiolock_0150
0185c     0C 5F 02 F6 | 	mov	arg01, result1
01860     B0 4A B0 FD | 	call	#__system___lockmem
01864     00 18 06 F6 | 	mov	result1, #0
01868     43 00 00 FF 
0186c     82 60 06 F6 | 	mov	arg02, ##@LR__0465
01870     00 5E 06 F6 | 	mov	arg01, #0
01874     00 62 06 F6 | 	mov	arg03, #0
01878     54 4E B0 FD | 	call	#__system___basic_print_string
0187c     00 5E 06 F6 | 	mov	arg01, #0
01880     0A 60 06 F6 | 	mov	arg02, #10
01884     00 62 06 F6 | 	mov	arg03, #0
01888     F8 4D B0 FD | 	call	#__system___basic_print_char
0188c     01 18 06 F6 | 	mov	result1, #1
01890     00 5E 06 F6 | 	mov	arg01, #0
01894     DC 61 B0 FD | 	call	#__system___getiolock_0150
01898     0C 01 68 FC | 	wrlong	#0, result1
0189c     00 18 06 F6 | 	mov	result1, #0
018a0                 | ' do
018a0                 | LR__0013
018a0     01 5E 06 F6 | 	mov	arg01, #1
018a4     04 09 B0 FD | 	call	#_hng030rm_spin2_waitvbl
018a8     02 00 00 FF 
018ac     48 FB 05 F1 | 	add	objptr, ##1352
018b0     C0 2A B0 FD | 	call	#_trackerplayer_spin2_tick
018b4     02 00 00 FF 
018b8     48 FB 85 F1 | 	sub	objptr, ##1352
018bc     1B 18 62 FD | 	getrnd	result1
018c0     0C 99 02 F6 | 	mov	muldiva_, result1
018c4     01 00 00 FF 
018c8     1C 9A 06 F6 | 	mov	muldivb_, ##540
018cc     C2 00 A0 FD | 	call	#unsdivide_
018d0     08 00 00 FF 
018d4     88 FB 05 F1 | 	add	objptr, ##4488
018d8     FD 98 62 FC | 	wrlong	muldiva_, objptr
018dc                 | '     
018dc                 | ' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
018dc                 | '      
018dc                 | '     if tracker.trigger(0)<>old1 then 
018dc     05 00 00 FF 
018e0     4A FA 85 F1 | 	sub	objptr, ##2634
018e4     FD 6C C2 FA | 	rdbyte	local01, objptr
018e8     C2 FB 05 F1 | 	add	objptr, #450
018ec     FD 7A 02 FB | 	rdlong	local08, objptr
018f0     04 00 00 FF 
018f4     00 FB 85 F1 | 	sub	objptr, ##2304
018f8     3D 6D 0A F2 | 	cmp	local01, local08 wz
018fc     8C 00 90 AD |  if_e	jmp	#LR__0014
01900     03 00 00 FF 
01904     3E FB 05 F1 | 	add	objptr, ##1854
01908     FD 6C C2 FA | 	rdbyte	local01, objptr
0190c     C2 FB 05 F1 | 	add	objptr, #450
01910     FD 6C 62 FC | 	wrlong	local01, objptr
01914     14 FA 85 F1 | 	sub	objptr, #20
01918     FD 5E 02 FB | 	rdlong	arg01, objptr
0191c     08 5E 06 F1 | 	add	arg01, #8
01920     01 00 00 FF 
01924     FD FA 85 F1 | 	sub	objptr, ##765
01928     FD 60 02 FB | 	rdlong	arg02, objptr
0192c     1E 60 26 F4 | 	bith	arg02, #30
01930                 | ' asm
01930     2F 61 62 FC | 	wrlong	arg02, arg01
01934     01 00 00 FF 
01938     FD FA 05 F1 | 	add	objptr, ##765
0193c     FD 5E 02 FB | 	rdlong	arg01, objptr
01940     0C 5E 06 F1 | 	add	arg01, #12
01944     01 00 00 FF 
01948     E9 FA 85 F1 | 	sub	objptr, ##745
0194c     FD 60 E2 FA | 	rdword	arg02, objptr
01950     08 FA 05 F1 | 	add	objptr, #8
01954     FD 76 02 FB | 	rdlong	local06, objptr
01958     3B 61 82 F1 | 	sub	arg02, local06
0195c                 | ' asm
0195c     2F 61 62 FC | 	wrlong	arg02, arg01
01960     01 00 00 FF 
01964     E1 FA 05 F1 | 	add	objptr, ##737
01968     FD 5E 02 FB | 	rdlong	arg01, objptr
0196c     10 5E 06 F1 | 	add	arg01, #16
01970     01 00 00 FF 
01974     E9 FA 85 F1 | 	sub	objptr, ##745
01978     FD 60 E2 FA | 	rdword	arg02, objptr
0197c     03 00 00 FF 
01980     03 FA 85 F1 | 	sub	objptr, ##1539
01984     0F 60 46 F7 | 	zerox	arg02, #15
01988                 | ' asm
01988     2F 61 62 FC | 	wrlong	arg02, arg01
0198c                 | LR__0014
0198c     04 00 00 FF 
01990     EC FA 05 F1 | 	add	objptr, ##2284
01994     FD 5E 02 FB | 	rdlong	arg01, objptr
01998     14 5E 06 F1 | 	add	arg01, #20
0199c     01 00 00 FF 
019a0     A5 FA 85 F1 | 	sub	objptr, ##677
019a4     FD 7A 02 FB | 	rdlong	local08, objptr
019a8     10 FA 05 F1 | 	add	objptr, #16
019ac     FD 76 02 FB | 	rdlong	local06, objptr
019b0     3B 7B 02 F1 | 	add	local08, local06
019b4     27 FB 85 F1 | 	sub	objptr, #295
019b8     FD 7C 02 FB | 	rdlong	local09, objptr
019bc     3E 7B 02 FD | 	qmul	local08, local09
019c0     18 60 62 FD | 	getqx	arg02
019c4                 | ' asm
019c4     2F 61 52 FC | 	wrword	arg02, arg01
019c8     01 00 00 FF 
019cc     BC FB 05 F1 | 	add	objptr, ##956
019d0     FD 5E 02 FB | 	rdlong	arg01, objptr
019d4     16 5E 06 F1 | 	add	arg01, #22
019d8                 | ' asm
019d8     0C 00 80 FF 
019dc     2F 01 58 FC | 	wrword	##6144, arg01
019e0     FD 5E 02 FB | 	rdlong	arg01, objptr
019e4     18 5E 06 F1 | 	add	arg01, #24
019e8     01 00 00 FF 
019ec     C5 FA 85 F1 | 	sub	objptr, ##709
019f0     FD 60 02 FB | 	rdlong	arg02, objptr
019f4     10 FA 05 F1 | 	add	objptr, #16
019f8     FD 76 02 FB | 	rdlong	local06, objptr
019fc     3B 61 02 F1 | 	add	arg02, local06
01a00                 | ' asm
01a00     2F 61 52 FC | 	wrword	arg02, arg01
01a04     01 00 00 FF 
01a08     B5 FA 05 F1 | 	add	objptr, ##693
01a0c     FD 5E 02 FB | 	rdlong	arg01, objptr
01a10     1A 5E 06 F1 | 	add	arg01, #26
01a14                 | ' asm
01a14     2F 03 58 FC | 	wrword	#1, arg01
01a18                 | '   
01a18                 | '   
01a18                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01a18                 | '     dpoke base+22, 8192-2048
01a18                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
01a18                 | '     dpoke base+26, 1
01a18                 | ' 
01a18                 | '  
01a18                 | '     if tracker.trigger(1) <> old2  then
01a18     AD FB 85 F1 | 	sub	objptr, #429
01a1c     FD 6C C2 FA | 	rdbyte	local01, objptr
01a20     C5 FB 05 F1 | 	add	objptr, #453
01a24     FD 7A 02 FB | 	rdlong	local08, objptr
01a28     04 00 00 FF 
01a2c     04 FB 85 F1 | 	sub	objptr, ##2308
01a30     3D 6D 0A F2 | 	cmp	local01, local08 wz
01a34     9C 00 90 AD |  if_e	jmp	#LR__0015
01a38     03 00 00 FF 
01a3c     3F FB 05 F1 | 	add	objptr, ##1855
01a40     FD 6C C2 FA | 	rdbyte	local01, objptr
01a44     C5 FB 05 F1 | 	add	objptr, #453
01a48     FD 6C 62 FC | 	wrlong	local01, objptr
01a4c     18 FA 85 F1 | 	sub	objptr, #24
01a50     FD 5E 02 FB | 	rdlong	arg01, objptr
01a54     28 5E 06 F1 | 	add	arg01, #40
01a58     01 00 00 FF 
01a5c     F9 FA 85 F1 | 	sub	objptr, ##761
01a60     FD 60 02 FB | 	rdlong	arg02, objptr
01a64     1E 60 26 F4 | 	bith	arg02, #30
01a68                 | ' asm
01a68     2F 61 62 FC | 	wrlong	arg02, arg01
01a6c     20 5E 06 F6 | 	mov	arg01, #32
01a70     01 00 00 FF 
01a74     F9 FA 05 F1 | 	add	objptr, ##761
01a78     FD 7A 02 FB | 	rdlong	local08, objptr
01a7c     3D 5F 02 F1 | 	add	arg01, local08
01a80     0C 5E 06 F1 | 	add	arg01, #12
01a84     01 00 00 FF 
01a88     E7 FA 85 F1 | 	sub	objptr, ##743
01a8c     FD 60 E2 FA | 	rdword	arg02, objptr
01a90     0A FA 05 F1 | 	add	objptr, #10
01a94     FD 76 02 FB | 	rdlong	local06, objptr
01a98     3B 61 82 F1 | 	sub	arg02, local06
01a9c                 | ' asm
01a9c     2F 61 62 FC | 	wrlong	arg02, arg01
01aa0     20 5E 06 F6 | 	mov	arg01, #32
01aa4     01 00 00 FF 
01aa8     DD FA 05 F1 | 	add	objptr, ##733
01aac     FD 7A 02 FB | 	rdlong	local08, objptr
01ab0     3D 5F 02 F1 | 	add	arg01, local08
01ab4     10 5E 06 F1 | 	add	arg01, #16
01ab8     01 00 00 FF 
01abc     E7 FA 85 F1 | 	sub	objptr, ##743
01ac0     FD 60 E2 FA | 	rdword	arg02, objptr
01ac4     03 00 00 FF 
01ac8     05 FA 85 F1 | 	sub	objptr, ##1541
01acc     0F 60 46 F7 | 	zerox	arg02, #15
01ad0                 | ' asm
01ad0     2F 61 62 FC | 	wrlong	arg02, arg01
01ad4                 | LR__0015
01ad4     20 5E 06 F6 | 	mov	arg01, #32
01ad8     04 00 00 FF 
01adc     EC FA 05 F1 | 	add	objptr, ##2284
01ae0     FD 7A 02 FB | 	rdlong	local08, objptr
01ae4     3D 5F 02 F1 | 	add	arg01, local08
01ae8     14 5E 06 F1 | 	add	arg01, #20
01aec     01 00 00 FF 
01af0     A1 FA 85 F1 | 	sub	objptr, ##673
01af4     FD 7A 02 FB | 	rdlong	local08, objptr
01af8     10 FA 05 F1 | 	add	objptr, #16
01afc     FD 76 02 FB | 	rdlong	local06, objptr
01b00     3B 7B 02 F1 | 	add	local08, local06
01b04     2B FB 85 F1 | 	sub	objptr, #299
01b08     FD 7C 02 FB | 	rdlong	local09, objptr
01b0c     3E 7B 02 FD | 	qmul	local08, local09
01b10     18 60 62 FD | 	getqx	arg02
01b14                 | ' asm
01b14     2F 61 52 FC | 	wrword	arg02, arg01
01b18     20 5E 06 F6 | 	mov	arg01, #32
01b1c     01 00 00 FF 
01b20     BC FB 05 F1 | 	add	objptr, ##956
01b24     FD 7A 02 FB | 	rdlong	local08, objptr
01b28     3D 5F 02 F1 | 	add	arg01, local08
01b2c     16 5E 06 F1 | 	add	arg01, #22
01b30                 | ' asm
01b30     14 00 80 FF 
01b34     2F 01 58 FC | 	wrword	##10240, arg01
01b38     20 5E 06 F6 | 	mov	arg01, #32
01b3c     FD 7A 02 FB | 	rdlong	local08, objptr
01b40     3D 5F 02 F1 | 	add	arg01, local08
01b44     18 5E 06 F1 | 	add	arg01, #24
01b48     01 00 00 FF 
01b4c     C1 FA 85 F1 | 	sub	objptr, ##705
01b50     FD 60 02 FB | 	rdlong	arg02, objptr
01b54     10 FA 05 F1 | 	add	objptr, #16
01b58     FD 76 02 FB | 	rdlong	local06, objptr
01b5c     3B 61 02 F1 | 	add	arg02, local06
01b60                 | ' asm
01b60     2F 61 52 FC | 	wrword	arg02, arg01
01b64     20 5E 06 F6 | 	mov	arg01, #32
01b68     01 00 00 FF 
01b6c     B1 FA 05 F1 | 	add	objptr, ##689
01b70     FD 7A 02 FB | 	rdlong	local08, objptr
01b74     3D 5F 02 F1 | 	add	arg01, local08
01b78     1A 5E 06 F1 | 	add	arg01, #26
01b7c                 | ' asm
01b7c     2F 03 58 FC | 	wrword	#1, arg01
01b80                 | '       
01b80                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01b80                 | '     dpoke 32+base+22, 8192+2048
01b80                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
01b80                 | '     dpoke 32+base+26, 1
01b80                 | ' 
01b80                 | '    if tracker.trigger(2) <> old3  then
01b80     AC FB 85 F1 | 	sub	objptr, #428
01b84     FD 6C C2 FA | 	rdbyte	local01, objptr
01b88     C8 FB 05 F1 | 	add	objptr, #456
01b8c     FD 7A 02 FB | 	rdlong	local08, objptr
01b90     04 00 00 FF 
01b94     08 FB 85 F1 | 	sub	objptr, ##2312
01b98     3D 6D 0A F2 | 	cmp	local01, local08 wz
01b9c     9C 00 90 AD |  if_e	jmp	#LR__0016
01ba0     03 00 00 FF 
01ba4     40 FB 05 F1 | 	add	objptr, ##1856
01ba8     FD 6C C2 FA | 	rdbyte	local01, objptr
01bac     C8 FB 05 F1 | 	add	objptr, #456
01bb0     FD 6C 62 FC | 	wrlong	local01, objptr
01bb4     1C FA 85 F1 | 	sub	objptr, #28
01bb8     FD 5E 02 FB | 	rdlong	arg01, objptr
01bbc     48 5E 06 F1 | 	add	arg01, #72
01bc0     01 00 00 FF 
01bc4     F5 FA 85 F1 | 	sub	objptr, ##757
01bc8     FD 60 02 FB | 	rdlong	arg02, objptr
01bcc     1E 60 26 F4 | 	bith	arg02, #30
01bd0                 | ' asm
01bd0     2F 61 62 FC | 	wrlong	arg02, arg01
01bd4     40 5E 06 F6 | 	mov	arg01, #64
01bd8     01 00 00 FF 
01bdc     F5 FA 05 F1 | 	add	objptr, ##757
01be0     FD 7A 02 FB | 	rdlong	local08, objptr
01be4     3D 5F 02 F1 | 	add	arg01, local08
01be8     0C 5E 06 F1 | 	add	arg01, #12
01bec     01 00 00 FF 
01bf0     E5 FA 85 F1 | 	sub	objptr, ##741
01bf4     FD 60 E2 FA | 	rdword	arg02, objptr
01bf8     0C FA 05 F1 | 	add	objptr, #12
01bfc     FD 76 02 FB | 	rdlong	local06, objptr
01c00     3B 61 82 F1 | 	sub	arg02, local06
01c04                 | ' asm
01c04     2F 61 62 FC | 	wrlong	arg02, arg01
01c08     40 5E 06 F6 | 	mov	arg01, #64
01c0c     01 00 00 FF 
01c10     D9 FA 05 F1 | 	add	objptr, ##729
01c14     FD 7A 02 FB | 	rdlong	local08, objptr
01c18     3D 5F 02 F1 | 	add	arg01, local08
01c1c     10 5E 06 F1 | 	add	arg01, #16
01c20     01 00 00 FF 
01c24     E5 FA 85 F1 | 	sub	objptr, ##741
01c28     FD 60 E2 FA | 	rdword	arg02, objptr
01c2c     03 00 00 FF 
01c30     07 FA 85 F1 | 	sub	objptr, ##1543
01c34     0F 60 46 F7 | 	zerox	arg02, #15
01c38                 | ' asm
01c38     2F 61 62 FC | 	wrlong	arg02, arg01
01c3c                 | LR__0016
01c3c     40 5E 06 F6 | 	mov	arg01, #64
01c40     04 00 00 FF 
01c44     EC FA 05 F1 | 	add	objptr, ##2284
01c48     FD 7A 02 FB | 	rdlong	local08, objptr
01c4c     3D 5F 02 F1 | 	add	arg01, local08
01c50     14 5E 06 F1 | 	add	arg01, #20
01c54     01 00 00 FF 
01c58     9D FA 85 F1 | 	sub	objptr, ##669
01c5c     FD 7A 02 FB | 	rdlong	local08, objptr
01c60     10 FA 05 F1 | 	add	objptr, #16
01c64     FD 76 02 FB | 	rdlong	local06, objptr
01c68     3B 7B 02 F1 | 	add	local08, local06
01c6c     2F FB 85 F1 | 	sub	objptr, #303
01c70     FD 7C 02 FB | 	rdlong	local09, objptr
01c74     3E 7B 02 FD | 	qmul	local08, local09
01c78     18 60 62 FD | 	getqx	arg02
01c7c                 | ' asm
01c7c     2F 61 52 FC | 	wrword	arg02, arg01
01c80     40 5E 06 F6 | 	mov	arg01, #64
01c84     01 00 00 FF 
01c88     BC FB 05 F1 | 	add	objptr, ##956
01c8c     FD 7A 02 FB | 	rdlong	local08, objptr
01c90     3D 5F 02 F1 | 	add	arg01, local08
01c94     16 5E 06 F1 | 	add	arg01, #22
01c98                 | ' asm
01c98     14 00 80 FF 
01c9c     2F 01 58 FC | 	wrword	##10240, arg01
01ca0     40 5E 06 F6 | 	mov	arg01, #64
01ca4     FD 7A 02 FB | 	rdlong	local08, objptr
01ca8     3D 5F 02 F1 | 	add	arg01, local08
01cac     18 5E 06 F1 | 	add	arg01, #24
01cb0     01 00 00 FF 
01cb4     BD FA 85 F1 | 	sub	objptr, ##701
01cb8     FD 60 02 FB | 	rdlong	arg02, objptr
01cbc     10 FA 05 F1 | 	add	objptr, #16
01cc0     FD 76 02 FB | 	rdlong	local06, objptr
01cc4     3B 61 02 F1 | 	add	arg02, local06
01cc8                 | ' asm
01cc8     2F 61 52 FC | 	wrword	arg02, arg01
01ccc     40 5E 06 F6 | 	mov	arg01, #64
01cd0     01 00 00 FF 
01cd4     AD FA 05 F1 | 	add	objptr, ##685
01cd8     FD 7A 02 FB | 	rdlong	local08, objptr
01cdc     3D 5F 02 F1 | 	add	arg01, local08
01ce0     1A 5E 06 F1 | 	add	arg01, #26
01ce4                 | ' asm
01ce4     2F 03 58 FC | 	wrword	#1, arg01
01ce8                 | '     
01ce8                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01ce8                 | '     dpoke 64+base+22, 8192+2048
01ce8                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
01ce8                 | '     dpoke 64+base+26, 1
01ce8                 | ' 
01ce8                 | '     if tracker.trigger(3) <> old4 then
01ce8     AB FB 85 F1 | 	sub	objptr, #427
01cec     FD 6C C2 FA | 	rdbyte	local01, objptr
01cf0     CB FB 05 F1 | 	add	objptr, #459
01cf4     FD 7A 02 FB | 	rdlong	local08, objptr
01cf8     04 00 00 FF 
01cfc     0C FB 85 F1 | 	sub	objptr, ##2316
01d00     3D 6D 0A F2 | 	cmp	local01, local08 wz
01d04     9C 00 90 AD |  if_e	jmp	#LR__0017
01d08     03 00 00 FF 
01d0c     41 FB 05 F1 | 	add	objptr, ##1857
01d10     FD 6C C2 FA | 	rdbyte	local01, objptr
01d14     CB FB 05 F1 | 	add	objptr, #459
01d18     FD 6C 62 FC | 	wrlong	local01, objptr
01d1c     20 FA 85 F1 | 	sub	objptr, #32
01d20     FD 5E 02 FB | 	rdlong	arg01, objptr
01d24     68 5E 06 F1 | 	add	arg01, #104
01d28     01 00 00 FF 
01d2c     F1 FA 85 F1 | 	sub	objptr, ##753
01d30     FD 60 02 FB | 	rdlong	arg02, objptr
01d34     1E 60 26 F4 | 	bith	arg02, #30
01d38                 | ' asm
01d38     2F 61 62 FC | 	wrlong	arg02, arg01
01d3c     60 5E 06 F6 | 	mov	arg01, #96
01d40     01 00 00 FF 
01d44     F1 FA 05 F1 | 	add	objptr, ##753
01d48     FD 7A 02 FB | 	rdlong	local08, objptr
01d4c     3D 5F 02 F1 | 	add	arg01, local08
01d50     0C 5E 06 F1 | 	add	arg01, #12
01d54     01 00 00 FF 
01d58     E3 FA 85 F1 | 	sub	objptr, ##739
01d5c     FD 60 E2 FA | 	rdword	arg02, objptr
01d60     0E FA 05 F1 | 	add	objptr, #14
01d64     FD 76 02 FB | 	rdlong	local06, objptr
01d68     3B 61 82 F1 | 	sub	arg02, local06
01d6c                 | ' asm
01d6c     2F 61 62 FC | 	wrlong	arg02, arg01
01d70     60 5E 06 F6 | 	mov	arg01, #96
01d74     01 00 00 FF 
01d78     D5 FA 05 F1 | 	add	objptr, ##725
01d7c     FD 7A 02 FB | 	rdlong	local08, objptr
01d80     3D 5F 02 F1 | 	add	arg01, local08
01d84     10 5E 06 F1 | 	add	arg01, #16
01d88     01 00 00 FF 
01d8c     E3 FA 85 F1 | 	sub	objptr, ##739
01d90     FD 60 E2 FA | 	rdword	arg02, objptr
01d94     03 00 00 FF 
01d98     09 FA 85 F1 | 	sub	objptr, ##1545
01d9c     0F 60 46 F7 | 	zerox	arg02, #15
01da0                 | ' asm
01da0     2F 61 62 FC | 	wrlong	arg02, arg01
01da4                 | LR__0017
01da4     60 5E 06 F6 | 	mov	arg01, #96
01da8     04 00 00 FF 
01dac     EC FA 05 F1 | 	add	objptr, ##2284
01db0     FD 7A 02 FB | 	rdlong	local08, objptr
01db4     3D 5F 02 F1 | 	add	arg01, local08
01db8     14 5E 06 F1 | 	add	arg01, #20
01dbc     01 00 00 FF 
01dc0     99 FA 85 F1 | 	sub	objptr, ##665
01dc4     FD 7A 02 FB | 	rdlong	local08, objptr
01dc8     10 FA 05 F1 | 	add	objptr, #16
01dcc     FD 76 02 FB | 	rdlong	local06, objptr
01dd0     3B 7B 02 F1 | 	add	local08, local06
01dd4     33 FB 85 F1 | 	sub	objptr, #307
01dd8     FD 7C 02 FB | 	rdlong	local09, objptr
01ddc     3E 7B 02 FD | 	qmul	local08, local09
01de0     18 60 62 FD | 	getqx	arg02
01de4                 | ' asm
01de4     2F 61 52 FC | 	wrword	arg02, arg01
01de8     60 5E 06 F6 | 	mov	arg01, #96
01dec     01 00 00 FF 
01df0     BC FB 05 F1 | 	add	objptr, ##956
01df4     FD 7A 02 FB | 	rdlong	local08, objptr
01df8     3D 5F 02 F1 | 	add	arg01, local08
01dfc     16 5E 06 F1 | 	add	arg01, #22
01e00                 | ' asm
01e00     0C 00 80 FF 
01e04     2F 01 58 FC | 	wrword	##6144, arg01
01e08     60 5E 06 F6 | 	mov	arg01, #96
01e0c     FD 7A 02 FB | 	rdlong	local08, objptr
01e10     3D 5F 02 F1 | 	add	arg01, local08
01e14     18 5E 06 F1 | 	add	arg01, #24
01e18     01 00 00 FF 
01e1c     B9 FA 85 F1 | 	sub	objptr, ##697
01e20     FD 60 02 FB | 	rdlong	arg02, objptr
01e24     10 FA 05 F1 | 	add	objptr, #16
01e28     FD 76 02 FB | 	rdlong	local06, objptr
01e2c     3B 61 02 F1 | 	add	arg02, local06
01e30                 | ' asm
01e30     2F 61 52 FC | 	wrword	arg02, arg01
01e34     60 5E 06 F6 | 	mov	arg01, #96
01e38     01 00 00 FF 
01e3c     A9 FA 05 F1 | 	add	objptr, ##681
01e40     FD 7A 02 FB | 	rdlong	local08, objptr
01e44     04 00 00 FF 
01e48     EC FA 85 F1 | 	sub	objptr, ##2284
01e4c     3D 5F 02 F1 | 	add	arg01, local08
01e50     1A 5E 06 F1 | 	add	arg01, #26
01e54     01 60 06 F6 | 	mov	arg02, #1
01e58                 | ' asm
01e58     2F 03 58 FC | 	wrword	#1, arg01
01e5c     4C EA BF FD | 	call	#_test
01e60     3C FA 9F FD | 	jmp	#LR__0013
01e64     AF F0 03 F6 | 	mov	ptra, fp
01e68     BA 00 A0 FD | 	call	#popregs_
01e6c                 | _program_ret
01e6c     2D 00 64 FD | 	ret
01e70                 | 
01e70                 | ' 
01e70                 | ' 
01e70                 | ' ''---------- putpixel - put a pixel on the screen
01e70                 | ' 
01e70                 | ' pub putpixel1(x,y,c) |byte b
01e70                 | _hng030rm_spin2_putpixel1
01e70                 | ' 
01e70                 | ' 
01e70                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01e70     00 1E 06 F6 | 	mov	_var01, #0
01e74     00 5E 5E F2 | 	cmps	arg01, #0 wcz
01e78     01 1E 66 36 |  if_ae	neg	_var01, #1
01e7c     00 20 06 F6 | 	mov	_var02, #0
01e80     90 FA 05 F1 | 	add	objptr, #144
01e84     FD 22 02 FB | 	rdlong	_var03, objptr
01e88     05 22 66 F0 | 	shl	_var03, #5
01e8c     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
01e90     01 20 66 C6 |  if_b	neg	_var02, #1
01e94     10 1F 02 F5 | 	and	_var01, _var02
01e98     00 24 06 F6 | 	mov	_var04, #0
01e9c     00 60 5E F2 | 	cmps	arg02, #0 wcz
01ea0     01 24 66 36 |  if_ae	neg	_var04, #1
01ea4     12 1F 02 F5 | 	and	_var01, _var04
01ea8     00 26 06 F6 | 	mov	_var05, #0
01eac     04 FA 05 F1 | 	add	objptr, #4
01eb0     FD 28 02 FB | 	rdlong	_var06, objptr
01eb4     94 FA 85 F1 | 	sub	objptr, #148
01eb8     14 61 5A F2 | 	cmps	arg02, _var06 wcz
01ebc     01 26 66 C6 |  if_b	neg	_var05, #1
01ec0     13 1F CA F7 | 	test	_var01, _var05 wz
01ec4     90 00 90 AD |  if_e	jmp	#LR__0020
01ec8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01ec8     FD 1E 02 FB | 	rdlong	_var01, objptr
01ecc     90 FA 05 F1 | 	add	objptr, #144
01ed0     FD 20 02 FB | 	rdlong	_var02, objptr
01ed4     90 FA 85 F1 | 	sub	objptr, #144
01ed8     02 20 66 F0 | 	shl	_var02, #2
01edc     30 21 02 FD | 	qmul	_var02, arg02
01ee0     18 2A 62 FD | 	getqx	_var07
01ee4     15 1F 02 F1 | 	add	_var01, _var07
01ee8     2F 25 02 F6 | 	mov	_var04, arg01
01eec     03 24 46 F0 | 	shr	_var04, #3
01ef0     12 1F 02 F1 | 	add	_var01, _var04
01ef4     0F 2D C2 FA | 	rdbyte	_var08, _var01
01ef8                 | '     if (c==0)
01ef8     00 62 0E F2 | 	cmp	arg03, #0 wz
01efc     18 00 90 5D |  if_ne	jmp	#LR__0018
01f00                 | '       b:=b & !(1<<(x//8))
01f00     2F 23 52 F6 | 	abs	_var03, arg01 wc
01f04     07 22 06 F5 | 	and	_var03, #7
01f08     11 23 62 C6 |  if_b	neg	_var03, _var03
01f0c     11 21 C2 F9 | 	decod	_var02, _var03
01f10     10 2D 22 F5 | 	andn	_var08, _var02
01f14                 | '     else
01f14     14 00 90 FD | 	jmp	#LR__0019
01f18                 | LR__0018
01f18                 | '       b:=b |(1<<(x//8))
01f18     2F 23 52 F6 | 	abs	_var03, arg01 wc
01f1c     07 22 06 F5 | 	and	_var03, #7
01f20     11 23 62 C6 |  if_b	neg	_var03, _var03
01f24     11 21 C2 F9 | 	decod	_var02, _var03
01f28     10 2D 42 F5 | 	or	_var08, _var02
01f2c                 | LR__0019
01f2c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01f2c     FD 1E 02 FB | 	rdlong	_var01, objptr
01f30     90 FA 05 F1 | 	add	objptr, #144
01f34     FD 20 02 FB | 	rdlong	_var02, objptr
01f38     90 FA 85 F1 | 	sub	objptr, #144
01f3c     02 20 66 F0 | 	shl	_var02, #2
01f40     30 21 02 FD | 	qmul	_var02, arg02
01f44     18 2A 62 FD | 	getqx	_var07
01f48     15 1F 02 F1 | 	add	_var01, _var07
01f4c     03 5E 46 F0 | 	shr	arg01, #3
01f50     2F 1F 02 F1 | 	add	_var01, arg01
01f54     0F 2D 42 FC | 	wrbyte	_var08, _var01
01f58                 | LR__0020
01f58                 | _hng030rm_spin2_putpixel1_ret
01f58     2D 00 64 FD | 	ret
01f5c                 | 
01f5c                 | ' 
01f5c                 | ' 
01f5c                 | ' pub putpixel2(x,y,c) |byte b
01f5c                 | _hng030rm_spin2_putpixel2
01f5c     2F 1F 02 F6 | 	mov	_var01, arg01
01f60     30 21 02 F6 | 	mov	_var02, arg02
01f64     31 23 02 F6 | 	mov	_var03, arg03
01f68                 | ' 
01f68                 | ' 
01f68                 | ' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
01f68     00 1E 5E F2 | 	cmps	_var01, #0 wcz
01f6c     C8 00 90 CD |  if_b	jmp	#LR__0021
01f70     90 FA 05 F1 | 	add	objptr, #144
01f74     FD 24 02 FB | 	rdlong	_var04, objptr
01f78     90 FA 85 F1 | 	sub	objptr, #144
01f7c     04 24 66 F0 | 	shl	_var04, #4
01f80     12 1F 5A F2 | 	cmps	_var01, _var04 wcz
01f84     B0 00 90 3D |  if_ae	jmp	#LR__0021
01f88     00 20 5E F2 | 	cmps	_var02, #0 wcz
01f8c     A8 00 90 CD |  if_b	jmp	#LR__0021
01f90     94 FA 05 F1 | 	add	objptr, #148
01f94     FD 26 02 FB | 	rdlong	_var05, objptr
01f98     94 FA 85 F1 | 	sub	objptr, #148
01f9c     13 21 5A F2 | 	cmps	_var02, _var05 wcz
01fa0     94 00 90 3D |  if_ae	jmp	#LR__0021
01fa4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01fa4     FD 24 02 FB | 	rdlong	_var04, objptr
01fa8     90 FA 05 F1 | 	add	objptr, #144
01fac     FD 28 02 FB | 	rdlong	_var06, objptr
01fb0     90 FA 85 F1 | 	sub	objptr, #144
01fb4     02 28 66 F0 | 	shl	_var06, #2
01fb8     10 29 02 FD | 	qmul	_var06, _var02
01fbc     18 2A 62 FD | 	getqx	_var07
01fc0     15 25 02 F1 | 	add	_var04, _var07
01fc4     0F 2D 02 F6 | 	mov	_var08, _var01
01fc8     02 2C 46 F0 | 	shr	_var08, #2
01fcc     16 25 02 F1 | 	add	_var04, _var08
01fd0     12 2F C2 FA | 	rdbyte	_var09, _var04
01fd4                 | '     b:=b & !(%11<<((x//4)<<1))
01fd4     0F 31 52 F6 | 	abs	_var10, _var01 wc
01fd8     03 30 06 F5 | 	and	_var10, #3
01fdc     18 31 62 C6 |  if_b	neg	_var10, _var10
01fe0     01 30 66 F0 | 	shl	_var10, #1
01fe4     03 28 06 F6 | 	mov	_var06, #3
01fe8     18 29 62 F0 | 	shl	_var06, _var10
01fec     14 2F 22 F5 | 	andn	_var09, _var06
01ff0                 | '     b:=b |(c<<((x//4)<<1))
01ff0     0F 31 52 F6 | 	abs	_var10, _var01 wc
01ff4     03 30 06 F5 | 	and	_var10, #3
01ff8     18 31 62 C6 |  if_b	neg	_var10, _var10
01ffc     01 30 66 F0 | 	shl	_var10, #1
02000     18 23 62 F0 | 	shl	_var03, _var10
02004     11 2F 42 F5 | 	or	_var09, _var03
02008                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02008     FD 24 02 FB | 	rdlong	_var04, objptr
0200c     90 FA 05 F1 | 	add	objptr, #144
02010     FD 28 02 FB | 	rdlong	_var06, objptr
02014     90 FA 85 F1 | 	sub	objptr, #144
02018     02 28 66 F0 | 	shl	_var06, #2
0201c     10 29 02 FD | 	qmul	_var06, _var02
02020     18 2A 62 FD | 	getqx	_var07
02024     15 25 02 F1 | 	add	_var04, _var07
02028     0F 2D 02 F6 | 	mov	_var08, _var01
0202c     02 2C 46 F0 | 	shr	_var08, #2
02030     16 25 02 F1 | 	add	_var04, _var08
02034     12 2F 42 FC | 	wrbyte	_var09, _var04
02038                 | LR__0021
02038                 | _hng030rm_spin2_putpixel2_ret
02038     2D 00 64 FD | 	ret
0203c                 | 
0203c                 | ' 
0203c                 | ' 
0203c                 | ' pub putpixel4(x,y,c) |byte b
0203c                 | _hng030rm_spin2_putpixel4
0203c                 | ' 
0203c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0203c     00 1E 06 F6 | 	mov	_var01, #0
02040     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02044     01 1E 66 36 |  if_ae	neg	_var01, #1
02048     00 20 06 F6 | 	mov	_var02, #0
0204c     90 FA 05 F1 | 	add	objptr, #144
02050     FD 22 02 FB | 	rdlong	_var03, objptr
02054     04 22 66 F0 | 	shl	_var03, #4
02058     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
0205c     01 20 66 C6 |  if_b	neg	_var02, #1
02060     10 1F 02 F5 | 	and	_var01, _var02
02064     00 24 06 F6 | 	mov	_var04, #0
02068     00 60 5E F2 | 	cmps	arg02, #0 wcz
0206c     01 24 66 36 |  if_ae	neg	_var04, #1
02070     12 1F 02 F5 | 	and	_var01, _var04
02074     00 26 06 F6 | 	mov	_var05, #0
02078     04 FA 05 F1 | 	add	objptr, #4
0207c     FD 28 02 FB | 	rdlong	_var06, objptr
02080     94 FA 85 F1 | 	sub	objptr, #148
02084     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02088     01 26 66 C6 |  if_b	neg	_var05, #1
0208c     13 1F CA F7 | 	test	_var01, _var05 wz
02090     90 00 90 AD |  if_e	jmp	#LR__0022
02094                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02094     FD 1E 02 FB | 	rdlong	_var01, objptr
02098     90 FA 05 F1 | 	add	objptr, #144
0209c     FD 20 02 FB | 	rdlong	_var02, objptr
020a0     90 FA 85 F1 | 	sub	objptr, #144
020a4     02 20 66 F0 | 	shl	_var02, #2
020a8     30 21 02 FD | 	qmul	_var02, arg02
020ac     18 2A 62 FD | 	getqx	_var07
020b0     15 1F 02 F1 | 	add	_var01, _var07
020b4     2F 25 02 F6 | 	mov	_var04, arg01
020b8     01 24 46 F0 | 	shr	_var04, #1
020bc     12 1F 02 F1 | 	add	_var01, _var04
020c0     0F 2D C2 FA | 	rdbyte	_var08, _var01
020c4                 | '     b:=b & !(%1111<<((x//2)<<2))
020c4     2F 23 52 F6 | 	abs	_var03, arg01 wc
020c8     01 22 06 F5 | 	and	_var03, #1
020cc     11 23 62 C6 |  if_b	neg	_var03, _var03
020d0     02 22 66 F0 | 	shl	_var03, #2
020d4     0F 20 06 F6 | 	mov	_var02, #15
020d8     11 21 62 F0 | 	shl	_var02, _var03
020dc     10 2D 22 F5 | 	andn	_var08, _var02
020e0                 | '     b:=b |(c<<((x//2)<<2))
020e0     2F 23 52 F6 | 	abs	_var03, arg01 wc
020e4     01 22 06 F5 | 	and	_var03, #1
020e8     11 23 62 C6 |  if_b	neg	_var03, _var03
020ec     02 22 66 F0 | 	shl	_var03, #2
020f0     11 63 62 F0 | 	shl	arg03, _var03
020f4     31 2D 42 F5 | 	or	_var08, arg03
020f8                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
020f8     FD 1E 02 FB | 	rdlong	_var01, objptr
020fc     90 FA 05 F1 | 	add	objptr, #144
02100     FD 20 02 FB | 	rdlong	_var02, objptr
02104     90 FA 85 F1 | 	sub	objptr, #144
02108     02 20 66 F0 | 	shl	_var02, #2
0210c     30 21 02 FD | 	qmul	_var02, arg02
02110     18 2A 62 FD | 	getqx	_var07
02114     15 1F 02 F1 | 	add	_var01, _var07
02118     01 5E 46 F0 | 	shr	arg01, #1
0211c     2F 1F 02 F1 | 	add	_var01, arg01
02120     0F 2D 42 FC | 	wrbyte	_var08, _var01
02124                 | LR__0022
02124                 | _hng030rm_spin2_putpixel4_ret
02124     2D 00 64 FD | 	ret
02128                 | 
02128                 | ' 
02128                 | ' 
02128                 | ' pub putpixel8(x,y,c)
02128                 | _hng030rm_spin2_putpixel8
02128                 | ' 
02128                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02128     00 1E 06 F6 | 	mov	_var01, #0
0212c     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02130     01 1E 66 36 |  if_ae	neg	_var01, #1
02134     00 20 06 F6 | 	mov	_var02, #0
02138     90 FA 05 F1 | 	add	objptr, #144
0213c     FD 22 02 FB | 	rdlong	_var03, objptr
02140     02 22 66 F0 | 	shl	_var03, #2
02144     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02148     01 20 66 C6 |  if_b	neg	_var02, #1
0214c     10 1F 02 F5 | 	and	_var01, _var02
02150     00 24 06 F6 | 	mov	_var04, #0
02154     00 60 5E F2 | 	cmps	arg02, #0 wcz
02158     01 24 66 36 |  if_ae	neg	_var04, #1
0215c     12 1F 02 F5 | 	and	_var01, _var04
02160     00 26 06 F6 | 	mov	_var05, #0
02164     04 FA 05 F1 | 	add	objptr, #4
02168     FD 28 02 FB | 	rdlong	_var06, objptr
0216c     94 FA 85 F1 | 	sub	objptr, #148
02170     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02174     01 26 66 C6 |  if_b	neg	_var05, #1
02178     13 1F CA F7 | 	test	_var01, _var05 wz
0217c     28 00 90 AD |  if_e	jmp	#LR__0023
02180                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02180     FD 1E 02 FB | 	rdlong	_var01, objptr
02184     90 FA 05 F1 | 	add	objptr, #144
02188     FD 20 02 FB | 	rdlong	_var02, objptr
0218c     90 FA 85 F1 | 	sub	objptr, #144
02190     02 20 66 F0 | 	shl	_var02, #2
02194     30 21 02 FD | 	qmul	_var02, arg02
02198     18 2A 62 FD | 	getqx	_var07
0219c     15 1F 02 F1 | 	add	_var01, _var07
021a0     2F 1F 02 F1 | 	add	_var01, arg01
021a4     0F 63 42 FC | 	wrbyte	arg03, _var01
021a8                 | LR__0023
021a8                 | _hng030rm_spin2_putpixel8_ret
021a8     2D 00 64 FD | 	ret
021ac                 | 
021ac                 | ' 
021ac                 | ' '*************************************************************************
021ac                 | ' '                                                                        *
021ac                 | ' '  VBlank functions                                                      *
021ac                 | ' '                                                                        *
021ac                 | ' '*************************************************************************
021ac                 | ' 
021ac                 | ' pub waitvbl(amount) | i
021ac                 | _hng030rm_spin2_waitvbl
021ac     04 5A 05 F6 | 	mov	COUNT_, #4
021b0     B0 00 A0 FD | 	call	#pushregs_
021b4     2F 6D 02 F6 | 	mov	local01, arg01
021b8                 | ' 
021b8                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
021b8                 | ' 
021b8                 | ' repeat i from 1 to amount
021b8     01 6E 06 F6 | 	mov	local02, #1
021bc     01 6C 5E F2 | 	cmps	local01, #1 wcz
021c0     01 70 06 16 |  if_a	mov	local03, #1
021c4     01 70 66 E6 |  if_be	neg	local03, #1
021c8     38 6D 02 F1 | 	add	local01, local03
021cc                 | LR__0024
021cc                 | '   repeat until vblank==0
021cc                 | LR__0025
021cc     40 FA 05 F1 | 	add	objptr, #64
021d0     FD 72 0A FB | 	rdlong	local04, objptr wz
021d4     40 FA 85 F1 | 	sub	objptr, #64
021d8     0C 00 90 AD |  if_e	jmp	#LR__0026
021dc                 | '     waitus(100)
021dc     64 5E 06 F6 | 	mov	arg01, #100
021e0     78 43 B0 FD | 	call	#__system___waitus
021e4     E4 FF 9F FD | 	jmp	#LR__0025
021e8                 | LR__0026
021e8                 | '   repeat until vblank==1
021e8                 | LR__0027
021e8     40 FA 05 F1 | 	add	objptr, #64
021ec     FD 72 02 FB | 	rdlong	local04, objptr
021f0     40 FA 85 F1 | 	sub	objptr, #64
021f4     01 72 0E F2 | 	cmp	local04, #1 wz
021f8     0C 00 90 AD |  if_e	jmp	#LR__0028
021fc                 | '     waitus(100)
021fc     64 5E 06 F6 | 	mov	arg01, #100
02200     58 43 B0 FD | 	call	#__system___waitus
02204     E0 FF 9F FD | 	jmp	#LR__0027
02208                 | LR__0028
02208     38 6F 02 F1 | 	add	local02, local03
0220c     36 6F 0A F2 | 	cmp	local02, local01 wz
02210     B8 FF 9F 5D |  if_ne	jmp	#LR__0024
02214     AF F0 03 F6 | 	mov	ptra, fp
02218     BA 00 A0 FD | 	call	#popregs_
0221c                 | _hng030rm_spin2_waitvbl_ret
0221c     2D 00 64 FD | 	ret
02220                 | 
02220                 | ' 
02220                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02220                 | ' 
02220                 | ' pub setbordercolor(r,g,b) | color
02220                 | _hng030rm_spin2_setbordercolor
02220                 | ' 
02220                 | ' color:=r<<24+g<<16+b<<8
02220     18 5E 66 F0 | 	shl	arg01, #24
02224     10 60 66 F0 | 	shl	arg02, #16
02228     30 5F 02 F1 | 	add	arg01, arg02
0222c     08 62 66 F0 | 	shl	arg03, #8
02230     31 5F 02 F1 | 	add	arg01, arg03
02234                 | ' bordercolor:=color
02234     2C FA 05 F1 | 	add	objptr, #44
02238     FD 5E 62 FC | 	wrlong	arg01, objptr
0223c     2C FA 85 F1 | 	sub	objptr, #44
02240                 | _hng030rm_spin2_setbordercolor_ret
02240     2D 00 64 FD | 	ret
02244                 | 
02244                 | ' 
02244                 | ' 
02244                 | ' '*************************************************************************
02244                 | ' '                                                                        *
02244                 | ' '  Text functions                                                        *
02244                 | ' '                                                                        *
02244                 | ' '*************************************************************************
02244                 | ' 
02244                 | ' ''---------- Clear the screen, set its foreground/background color
02244                 | ' 
02244                 | ' pub cls(fc,bc)   :c
02244                 | _hng030rm_spin2_cls
02244     06 5A 05 F6 | 	mov	COUNT_, #6
02248     B0 00 A0 FD | 	call	#pushregs_
0224c     2F 6D 02 F6 | 	mov	local01, arg01
02250     30 6F 02 F6 | 	mov	local02, arg02
02254                 | ' 
02254                 | ' if (graphmode<512)
02254     C4 FA 05 F1 | 	add	objptr, #196
02258     FD 70 02 FB | 	rdlong	local03, objptr
0225c     C4 FA 85 F1 | 	sub	objptr, #196
02260     01 00 00 FF 
02264     00 70 5E F2 | 	cmps	local03, ##512 wcz
02268     34 00 90 3D |  if_ae	jmp	#LR__0029
0226c                 | '   c:=fc<<24+bc<<16+$20
0226c     36 73 02 F6 | 	mov	local04, local01
02270     18 72 66 F0 | 	shl	local04, #24
02274     37 75 02 F6 | 	mov	local05, local02
02278     10 74 66 F0 | 	shl	local05, #16
0227c     3A 73 02 F1 | 	add	local04, local05
02280     20 72 06 F1 | 	add	local04, #32
02284                 | '   longfill(buf_ptr,c,buflen)
02284     FD 5E 02 FB | 	rdlong	arg01, objptr
02288     30 FA 05 F1 | 	add	objptr, #48
0228c     FD 62 02 FB | 	rdlong	arg03, objptr
02290     30 FA 85 F1 | 	sub	objptr, #48
02294     39 61 02 F6 | 	mov	arg02, local04
02298     A8 00 A0 FD | 	call	#\builtin_longfill_
0229c                 | ' else
0229c     AC 00 90 FD | 	jmp	#LR__0035
022a0                 | LR__0029
022a0                 | '   if (graphmode & 48) ==48
022a0     C4 FA 05 F1 | 	add	objptr, #196
022a4     FD 70 02 FB | 	rdlong	local03, objptr
022a8     C4 FA 85 F1 | 	sub	objptr, #196
022ac     30 70 06 F5 | 	and	local03, #48
022b0     30 70 0E F2 | 	cmp	local03, #48 wz
022b4                 | '     c:=bc
022b4     37 73 02 A6 |  if_e	mov	local04, local02
022b8     74 00 90 AD |  if_e	jmp	#LR__0034
022bc                 | '   elseif (graphmode & 48) ==32
022bc     C4 FA 05 F1 | 	add	objptr, #196
022c0     FD 70 02 FB | 	rdlong	local03, objptr
022c4     C4 FA 85 F1 | 	sub	objptr, #196
022c8     30 70 06 F5 | 	and	local03, #48
022cc     20 70 0E F2 | 	cmp	local03, #32 wz
022d0     10 00 90 5D |  if_ne	jmp	#LR__0030
022d4                 | '     c:=bc<<4+bc
022d4     37 73 02 F6 | 	mov	local04, local02
022d8     04 72 66 F0 | 	shl	local04, #4
022dc     37 73 02 F1 | 	add	local04, local02
022e0     4C 00 90 FD | 	jmp	#LR__0033
022e4                 | LR__0030
022e4                 | '   elseif (graphmode & 48) ==16
022e4     C4 FA 05 F1 | 	add	objptr, #196
022e8     FD 70 02 FB | 	rdlong	local03, objptr
022ec     C4 FA 85 F1 | 	sub	objptr, #196
022f0     30 70 06 F5 | 	and	local03, #48
022f4     10 70 0E F2 | 	cmp	local03, #16 wz
022f8     28 00 90 5D |  if_ne	jmp	#LR__0031
022fc                 | '     c:=bc<<6+bc<<4+bc<<2+bc
022fc     37 73 02 F6 | 	mov	local04, local02
02300     06 72 66 F0 | 	shl	local04, #6
02304     37 75 02 F6 | 	mov	local05, local02
02308     04 74 66 F0 | 	shl	local05, #4
0230c     3A 73 02 F1 | 	add	local04, local05
02310     37 77 02 F6 | 	mov	local06, local02
02314     02 76 66 F0 | 	shl	local06, #2
02318     3B 73 02 F1 | 	add	local04, local06
0231c     37 73 02 F1 | 	add	local04, local02
02320                 | '   else
02320     0C 00 90 FD | 	jmp	#LR__0032
02324                 | LR__0031
02324                 | '     if bc==1
02324     01 6E 0E F2 | 	cmp	local02, #1 wz
02328                 | '       c:=255
02328     FF 72 06 A6 |  if_e	mov	local04, #255
0232c                 | '     else
0232c                 | '       c:=0
0232c     00 72 06 56 |  if_ne	mov	local04, #0
02330                 | LR__0032
02330                 | LR__0033
02330                 | LR__0034
02330                 | '   bytefill(buf_ptr,c,buflen*4)
02330     FD 5E 02 FB | 	rdlong	arg01, objptr
02334     30 FA 05 F1 | 	add	objptr, #48
02338     FD 62 02 FB | 	rdlong	arg03, objptr
0233c     30 FA 85 F1 | 	sub	objptr, #48
02340     02 62 66 F0 | 	shl	arg03, #2
02344     39 61 02 F6 | 	mov	arg02, local04
02348     A0 00 A0 FD | 	call	#\builtin_bytefill_
0234c                 | LR__0035
0234c                 | ' setwritecolors(fc,bc)
0234c                 | ' 
0234c                 | ' 
0234c                 | ' write_color:=ff
0234c     38 FA 05 F1 | 	add	objptr, #56
02350     FD 6C 62 FC | 	wrlong	local01, objptr
02354                 | ' write_background:=bb
02354     04 FA 05 F1 | 	add	objptr, #4
02358     FD 6E 62 FC | 	wrlong	local02, objptr
0235c                 | ' cursor_x:=0
0235c     08 FA 85 F1 | 	sub	objptr, #8
02360     FD 00 48 FC | 	wrbyte	#0, objptr
02364                 | ' cursor_y:=0
02364     01 FA 05 F1 | 	add	objptr, #1
02368     FD 00 48 FC | 	wrbyte	#0, objptr
0236c     35 FA 85 F1 | 	sub	objptr, #53
02370     39 19 02 F6 | 	mov	result1, local04
02374     AF F0 03 F6 | 	mov	ptra, fp
02378     BA 00 A0 FD | 	call	#popregs_
0237c                 | _hng030rm_spin2_cls_ret
0237c     2D 00 64 FD | 	ret
02380                 | 
02380                 | ' 
02380                 | ' ''--------- Output a string at position x,y without changing colors
02380                 | ' 
02380                 | ' pub outtextxy(x,y,text) | iii
02380                 | _hng030rm_spin2_outtextxy
02380     0F 5A 05 F6 | 	mov	COUNT_, #15
02384     B0 00 A0 FD | 	call	#pushregs_
02388     2F 6D 02 F6 | 	mov	local01, arg01
0238c                 | ' 
0238c                 | ' repeat iii from 0 to strsize(text)-1
0238c     00 6E 06 F6 | 	mov	local02, #0
02390     31 5F 02 F6 | 	mov	arg01, arg03
02394     00 70 06 F6 | 	mov	local03, #0
02398     74 DC 9F FE | 	loc	pa,	#(@LR__0037-@LR__0036)
0239c     93 00 A0 FD | 	call	#FCACHE_LOAD_
023a0                 | LR__0036
023a0     2F 73 CA FA | 	rdbyte	local04, arg01 wz
023a4     01 70 06 51 |  if_ne	add	local03, #1
023a8     01 5E 06 51 |  if_ne	add	arg01, #1
023ac     F0 FF 9F 5D |  if_ne	jmp	#LR__0036
023b0                 | LR__0037
023b0     38 19 02 F6 | 	mov	result1, local03
023b4     0C 75 02 F6 | 	mov	local05, result1
023b8     01 74 86 F1 | 	sub	local05, #1
023bc     00 74 5E F2 | 	cmps	local05, #0 wcz
023c0     01 76 06 16 |  if_a	mov	local06, #1
023c4     01 76 66 E6 |  if_be	neg	local06, #1
023c8     3B 75 02 F1 | 	add	local05, local06
023cc     A8 DC 9F FE | 	loc	pa,	#(@LR__0039-@LR__0038)
023d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
023d4                 | LR__0038
023d4                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
023d4     FD 78 02 FB | 	rdlong	local07, objptr
023d8     90 FA 05 F1 | 	add	objptr, #144
023dc     FD 7A 02 FB | 	rdlong	local08, objptr
023e0     90 FA 85 F1 | 	sub	objptr, #144
023e4     30 7B 02 FD | 	qmul	local08, arg02
023e8     18 7C 62 FD | 	getqx	local09
023ec     36 7D 02 F1 | 	add	local09, local01
023f0     37 7D 02 F1 | 	add	local09, local02
023f4     02 7C 66 F0 | 	shl	local09, #2
023f8     3E 79 02 F1 | 	add	local07, local09
023fc     3C 7F 02 FB | 	rdlong	local10, local07
02400     FF 7E 26 F5 | 	andn	local10, #255
02404     31 81 02 F6 | 	mov	local11, arg03
02408     37 81 02 F1 | 	add	local11, local02
0240c     40 83 C2 FA | 	rdbyte	local12, local11
02410     41 7F 42 F5 | 	or	local10, local12
02414     FD 84 02 FB | 	rdlong	local13, objptr
02418     90 FA 05 F1 | 	add	objptr, #144
0241c     FD 86 02 FB | 	rdlong	local14, objptr
02420     90 FA 85 F1 | 	sub	objptr, #144
02424     30 87 02 FD | 	qmul	local14, arg02
02428     18 88 62 FD | 	getqx	local15
0242c     36 89 02 F1 | 	add	local15, local01
02430     37 89 02 F1 | 	add	local15, local02
02434     02 88 66 F0 | 	shl	local15, #2
02438     44 85 02 F1 | 	add	local13, local15
0243c     42 7F 62 FC | 	wrlong	local10, local13
02440     3B 6F 02 F1 | 	add	local02, local06
02444     3A 6F 0A F2 | 	cmp	local02, local05 wz
02448     88 FF 9F 5D |  if_ne	jmp	#LR__0038
0244c                 | LR__0039
0244c     AF F0 03 F6 | 	mov	ptra, fp
02450     BA 00 A0 FD | 	call	#popregs_
02454                 | _hng030rm_spin2_outtextxy_ret
02454     2D 00 64 FD | 	ret
02458                 | 
02458                 | ' 
02458                 | ' ''---------- Output a char at the cursor position, move the cursor
02458                 | ' 
02458                 | ' pub putchar(achar) | c,x,y
02458                 | _hng030rm_spin2_putchar
02458     0F 5A 05 F6 | 	mov	COUNT_, #15
0245c     B0 00 A0 FD | 	call	#pushregs_
02460     2F 6D 02 F6 | 	mov	local01, arg01
02464                 | ' 
02464                 | ' if achar==10
02464     0A 6C 0E F2 | 	cmp	local01, #10 wz
02468     08 00 90 5D |  if_ne	jmp	#LR__0040
0246c                 | '   crlf()
0246c     A0 04 B0 FD | 	call	#_hng030rm_spin2_crlf
02470                 | ' else  
02470     64 01 90 FD | 	jmp	#LR__0043
02474                 | LR__0040
02474                 | '   x:=cursor_x
02474     34 FA 05 F1 | 	add	objptr, #52
02478     FD 6E C2 FA | 	rdbyte	local02, objptr
0247c                 | '   y:=cursor_y
0247c     01 FA 05 F1 | 	add	objptr, #1
02480     FD 70 C2 FA | 	rdbyte	local03, objptr
02484                 | '   c:=write_color<<24+write_background<<16
02484     03 FA 05 F1 | 	add	objptr, #3
02488     FD 72 02 FB | 	rdlong	local04, objptr
0248c     18 72 66 F0 | 	shl	local04, #24
02490     04 FA 05 F1 | 	add	objptr, #4
02494     FD 74 02 FB | 	rdlong	local05, objptr
02498     3C FA 85 F1 | 	sub	objptr, #60
0249c     10 74 66 F0 | 	shl	local05, #16
024a0     3A 73 02 F1 | 	add	local04, local05
024a4                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
024a4     FD 76 02 FB | 	rdlong	local06, objptr
024a8     90 FA 05 F1 | 	add	objptr, #144
024ac     FD 78 02 FB | 	rdlong	local07, objptr
024b0     90 FA 85 F1 | 	sub	objptr, #144
024b4     38 79 02 FD | 	qmul	local07, local03
024b8     18 7A 62 FD | 	getqx	local08
024bc     37 7B 02 F1 | 	add	local08, local02
024c0     02 7A 66 F0 | 	shl	local08, #2
024c4     3D 77 02 F1 | 	add	local06, local08
024c8     3B 7D 02 FB | 	rdlong	local09, local06
024cc     7F 00 00 FF 
024d0     FF 7D 06 F5 | 	and	local09, ##65535
024d4     39 7D 42 F5 | 	or	local09, local04
024d8     FD 7E 02 FB | 	rdlong	local10, objptr
024dc     90 FA 05 F1 | 	add	objptr, #144
024e0     FD 80 02 FB | 	rdlong	local11, objptr
024e4     90 FA 85 F1 | 	sub	objptr, #144
024e8     38 81 02 FD | 	qmul	local11, local03
024ec     18 82 62 FD | 	getqx	local12
024f0     37 83 02 F1 | 	add	local12, local02
024f4     02 82 66 F0 | 	shl	local12, #2
024f8     41 7F 02 F1 | 	add	local10, local12
024fc     3F 7D 62 FC | 	wrlong	local09, local10
02500                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
02500     FD 76 02 FB | 	rdlong	local06, objptr
02504     90 FA 05 F1 | 	add	objptr, #144
02508     FD 78 02 FB | 	rdlong	local07, objptr
0250c     90 FA 85 F1 | 	sub	objptr, #144
02510     38 79 02 FD | 	qmul	local07, local03
02514     18 7A 62 FD | 	getqx	local08
02518     37 7B 02 F1 | 	add	local08, local02
0251c     02 7A 66 F0 | 	shl	local08, #2
02520     3D 77 02 F1 | 	add	local06, local08
02524     3B 7D 02 FB | 	rdlong	local09, local06
02528     FF 7C 26 F5 | 	andn	local09, #255
0252c     36 7F 02 F6 | 	mov	local10, local01
02530     FF 7E 06 F5 | 	and	local10, #255
02534     3F 7D 42 F5 | 	or	local09, local10
02538     FD 84 02 FB | 	rdlong	local13, objptr
0253c     90 FA 05 F1 | 	add	objptr, #144
02540     FD 86 02 FB | 	rdlong	local14, objptr
02544     38 87 02 FD | 	qmul	local14, local03
02548     18 88 62 FD | 	getqx	local15
0254c     37 89 02 F1 | 	add	local15, local02
02550     02 88 66 F0 | 	shl	local15, #2
02554     44 85 02 F1 | 	add	local13, local15
02558     42 7D 62 FC | 	wrlong	local09, local13
0255c                 | '   cursor_x+=1
0255c     5C FA 85 F1 | 	sub	objptr, #92
02560     FD 7C C2 FA | 	rdbyte	local09, objptr
02564     01 7C 06 F1 | 	add	local09, #1
02568     FD 7C 42 FC | 	wrbyte	local09, objptr
0256c                 | '   if cursor_x==cpl
0256c     FD 7C C2 FA | 	rdbyte	local09, objptr
02570     5C FA 05 F1 | 	add	objptr, #92
02574     FD 74 02 FB | 	rdlong	local05, objptr
02578     90 FA 85 F1 | 	sub	objptr, #144
0257c     3A 7D 0A F2 | 	cmp	local09, local05 wz
02580     54 00 90 5D |  if_ne	jmp	#LR__0042
02584                 | '     cursor_x:=0
02584     34 FA 05 F1 | 	add	objptr, #52
02588     FD 00 48 FC | 	wrbyte	#0, objptr
0258c                 | '     cursor_y+=1
0258c     01 FA 05 F1 | 	add	objptr, #1
02590     FD 7C C2 FA | 	rdbyte	local09, objptr
02594     01 7C 06 F1 | 	add	local09, #1
02598     FD 7C 42 FC | 	wrbyte	local09, objptr
0259c                 | '     if cursor_y>lines-1
0259c     5F FA 05 F1 | 	add	objptr, #95
025a0     FD 7C 02 FB | 	rdlong	local09, objptr
025a4     01 7C 86 F1 | 	sub	local09, #1
025a8     5F FA 85 F1 | 	sub	objptr, #95
025ac     FD 74 C2 FA | 	rdbyte	local05, objptr
025b0     35 FA 85 F1 | 	sub	objptr, #53
025b4     3E 75 5A F2 | 	cmps	local05, local09 wcz
025b8     1C 00 90 ED |  if_be	jmp	#LR__0041
025bc                 | '       scrollup()
025bc     7C 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
025c0                 | '       cursor_y:=lines-1
025c0     94 FA 05 F1 | 	add	objptr, #148
025c4     FD 7C 02 FB | 	rdlong	local09, objptr
025c8     01 7C 86 F1 | 	sub	local09, #1
025cc     5F FA 85 F1 | 	sub	objptr, #95
025d0     FD 7C 42 FC | 	wrbyte	local09, objptr
025d4     35 FA 85 F1 | 	sub	objptr, #53
025d8                 | LR__0041
025d8                 | LR__0042
025d8                 | LR__0043
025d8     AF F0 03 F6 | 	mov	ptra, fp
025dc     BA 00 A0 FD | 	call	#popregs_
025e0                 | _hng030rm_spin2_putchar_ret
025e0     2D 00 64 FD | 	ret
025e4                 | 
025e4                 | ' 
025e4                 | ' ''--------- Output a string at the cursor position, move the cursor
025e4                 | ' 
025e4                 | ' pub write(text) | iii,c,ncx,ncy
025e4                 | _hng030rm_spin2_write
025e4     16 5A 05 F6 | 	mov	COUNT_, #22
025e8     B0 00 A0 FD | 	call	#pushregs_
025ec     2F 6D 02 F6 | 	mov	local01, arg01
025f0                 | ' 
025f0                 | ' c:=write_color<<24+write_background<<16
025f0     38 FA 05 F1 | 	add	objptr, #56
025f4     FD 6E 02 FB | 	rdlong	local02, objptr
025f8     18 6E 66 F0 | 	shl	local02, #24
025fc     04 FA 05 F1 | 	add	objptr, #4
02600     FD 70 02 FB | 	rdlong	local03, objptr
02604     10 70 66 F0 | 	shl	local03, #16
02608     38 6F 02 F1 | 	add	local02, local03
0260c                 | ' 'debug(uhex_long(write_color))
0260c                 | ' ncy:=cursor_y
0260c     07 FA 85 F1 | 	sub	objptr, #7
02610     FD 72 C2 FA | 	rdbyte	local04, objptr
02614                 | ' ncx:=cursor_x+strsize(text)
02614     01 FA 85 F1 | 	sub	objptr, #1
02618     FD 74 C2 FA | 	rdbyte	local05, objptr
0261c     34 FA 85 F1 | 	sub	objptr, #52
02620     36 5F 02 F6 | 	mov	arg01, local01
02624     00 76 06 F6 | 	mov	local06, #0
02628     E4 D9 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
0262c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02630                 | LR__0044
02630     2F 79 CA FA | 	rdbyte	local07, arg01 wz
02634     01 76 06 51 |  if_ne	add	local06, #1
02638     01 5E 06 51 |  if_ne	add	arg01, #1
0263c     F0 FF 9F 5D |  if_ne	jmp	#LR__0044
02640                 | LR__0045
02640     3B 19 02 F6 | 	mov	result1, local06
02644     3B 75 02 F1 | 	add	local05, local06
02648     3A 7B 02 F6 | 	mov	local08, local05
0264c     E0 D9 9F FE | 	loc	pa,	#(@LR__0047-@LR__0046)
02650     93 00 A0 FD | 	call	#FCACHE_LOAD_
02654                 | ' repeat while ncx>cpl-1
02654                 | LR__0046
02654     90 FA 05 F1 | 	add	objptr, #144
02658     FD 74 02 FB | 	rdlong	local05, objptr
0265c     90 FA 85 F1 | 	sub	objptr, #144
02660     01 74 86 F1 | 	sub	local05, #1
02664     3A 7B 5A F2 | 	cmps	local08, local05 wcz
02668     18 00 90 ED |  if_be	jmp	#LR__0048
0266c                 | '   ncx-=cpl
0266c     90 FA 05 F1 | 	add	objptr, #144
02670     FD 7C 02 FB | 	rdlong	local09, objptr
02674     90 FA 85 F1 | 	sub	objptr, #144
02678     3E 7B 82 F1 | 	sub	local08, local09
0267c                 | '   ncy+=1
0267c     01 72 06 F1 | 	add	local04, #1
02680     D0 FF 9F FD | 	jmp	#LR__0046
02684                 | LR__0047
02684                 | LR__0048
02684                 | ' repeat while ncy>lines-1
02684                 | LR__0049
02684     94 FA 05 F1 | 	add	objptr, #148
02688     FD 74 02 FB | 	rdlong	local05, objptr
0268c     94 FA 85 F1 | 	sub	objptr, #148
02690     01 74 86 F1 | 	sub	local05, #1
02694     3A 73 5A F2 | 	cmps	local04, local05 wcz
02698     20 00 90 ED |  if_be	jmp	#LR__0050
0269c                 | '   ncy-=1
0269c     01 72 86 F1 | 	sub	local04, #1
026a0                 | '   scrollup()
026a0     98 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
026a4                 | '   cursor_y-=1
026a4     35 FA 05 F1 | 	add	objptr, #53
026a8     FD 74 C2 FA | 	rdbyte	local05, objptr
026ac     01 74 86 F1 | 	sub	local05, #1
026b0     FD 74 42 FC | 	wrbyte	local05, objptr
026b4     35 FA 85 F1 | 	sub	objptr, #53
026b8     C8 FF 9F FD | 	jmp	#LR__0049
026bc                 | LR__0050
026bc                 | ' 
026bc                 | ' repeat iii from 0 to strsize(text)-1
026bc     00 7E 06 F6 | 	mov	local10, #0
026c0     36 5F 02 F6 | 	mov	arg01, local01
026c4     00 76 06 F6 | 	mov	local06, #0
026c8     44 D9 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
026cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
026d0                 | LR__0051
026d0     2F 79 CA FA | 	rdbyte	local07, arg01 wz
026d4     01 76 06 51 |  if_ne	add	local06, #1
026d8     01 5E 06 51 |  if_ne	add	arg01, #1
026dc     F0 FF 9F 5D |  if_ne	jmp	#LR__0051
026e0                 | LR__0052
026e0     3B 19 02 F6 | 	mov	result1, local06
026e4     0C 81 02 F6 | 	mov	local11, result1
026e8     01 80 86 F1 | 	sub	local11, #1
026ec     00 80 5E F2 | 	cmps	local11, #0 wcz
026f0     01 70 06 16 |  if_a	mov	local03, #1
026f4     01 70 66 E6 |  if_be	neg	local03, #1
026f8     38 81 02 F1 | 	add	local11, local03
026fc     90 D9 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
02700     93 00 A0 FD | 	call	#FCACHE_LOAD_
02704                 | LR__0053
02704                 | ' 
02704                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02704     FD 82 02 FB | 	rdlong	local12, objptr
02708     90 FA 05 F1 | 	add	objptr, #144
0270c     FD 84 02 FB | 	rdlong	local13, objptr
02710     5B FA 85 F1 | 	sub	objptr, #91
02714     FD 86 C2 FA | 	rdbyte	local14, objptr
02718     43 85 02 FD | 	qmul	local13, local14
0271c     18 88 62 FD | 	getqx	local15
02720     01 FA 85 F1 | 	sub	objptr, #1
02724     FD 8A C2 FA | 	rdbyte	local16, objptr
02728     34 FA 85 F1 | 	sub	objptr, #52
0272c     45 89 02 F1 | 	add	local15, local16
02730     3F 89 02 F1 | 	add	local15, local10
02734     02 88 66 F0 | 	shl	local15, #2
02738     44 83 02 F1 | 	add	local12, local15
0273c     41 8D 02 FB | 	rdlong	local17, local12
02740     7F 00 00 FF 
02744     FF 8D 06 F5 | 	and	local17, ##65535
02748     37 8D 42 F5 | 	or	local17, local02
0274c     FD 8E 02 FB | 	rdlong	local18, objptr
02750     90 FA 05 F1 | 	add	objptr, #144
02754     FD 90 02 FB | 	rdlong	local19, objptr
02758     5B FA 85 F1 | 	sub	objptr, #91
0275c     FD 92 C2 FA | 	rdbyte	local20, objptr
02760     49 91 02 FD | 	qmul	local19, local20
02764     18 94 62 FD | 	getqx	local21
02768     01 FA 85 F1 | 	sub	objptr, #1
0276c     FD 96 C2 FA | 	rdbyte	local22, objptr
02770     34 FA 85 F1 | 	sub	objptr, #52
02774     4B 95 02 F1 | 	add	local21, local22
02778     3F 95 02 F1 | 	add	local21, local10
0277c     02 94 66 F0 | 	shl	local21, #2
02780     4A 8F 02 F1 | 	add	local18, local21
02784     47 8D 62 FC | 	wrlong	local17, local18
02788     38 7F 02 F1 | 	add	local10, local03
0278c     40 7F 0A F2 | 	cmp	local10, local11 wz
02790     70 FF 9F 5D |  if_ne	jmp	#LR__0053
02794                 | LR__0054
02794                 | ' 
02794                 | ' outtextxy(cursor_x,cursor_y,text)
02794     34 FA 05 F1 | 	add	objptr, #52
02798     FD 5E C2 FA | 	rdbyte	arg01, objptr
0279c     01 FA 05 F1 | 	add	objptr, #1
027a0     FD 60 C2 FA | 	rdbyte	arg02, objptr
027a4     35 FA 85 F1 | 	sub	objptr, #53
027a8     36 63 02 F6 | 	mov	arg03, local01
027ac     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
027b0                 | ' 
027b0                 | ' cursor_x:=ncx
027b0     34 FA 05 F1 | 	add	objptr, #52
027b4     FD 7A 42 FC | 	wrbyte	local08, objptr
027b8                 | ' cursor_y:=ncy
027b8     01 FA 05 F1 | 	add	objptr, #1
027bc     FD 72 42 FC | 	wrbyte	local04, objptr
027c0     35 FA 85 F1 | 	sub	objptr, #53
027c4     AF F0 03 F6 | 	mov	ptra, fp
027c8     BA 00 A0 FD | 	call	#popregs_
027cc                 | _hng030rm_spin2_write_ret
027cc     2D 00 64 FD | 	ret
027d0                 | 
027d0                 | ' 
027d0                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
027d0                 | ' 
027d0                 | ' pub writeln(text)
027d0                 | _hng030rm_spin2_writeln
027d0     02 5A 05 F6 | 	mov	COUNT_, #2
027d4     B0 00 A0 FD | 	call	#pushregs_
027d8                 | ' 
027d8                 | ' write(text)
027d8     08 FE BF FD | 	call	#_hng030rm_spin2_write
027dc                 | ' cursor_x:=0
027dc     34 FA 05 F1 | 	add	objptr, #52
027e0     FD 00 48 FC | 	wrbyte	#0, objptr
027e4                 | ' cursor_y+=1
027e4     01 FA 05 F1 | 	add	objptr, #1
027e8     FD 6C C2 FA | 	rdbyte	local01, objptr
027ec     01 6C 06 F1 | 	add	local01, #1
027f0     FD 6C 42 FC | 	wrbyte	local01, objptr
027f4                 | ' if (cursor_y>lines-1)
027f4     5F FA 05 F1 | 	add	objptr, #95
027f8     FD 6C 02 FB | 	rdlong	local01, objptr
027fc     01 6C 86 F1 | 	sub	local01, #1
02800     5F FA 85 F1 | 	sub	objptr, #95
02804     FD 6E C2 FA | 	rdbyte	local02, objptr
02808     35 FA 85 F1 | 	sub	objptr, #53
0280c     36 6F 5A F2 | 	cmps	local02, local01 wcz
02810     1C 00 90 ED |  if_be	jmp	#LR__0055
02814                 | '   scrollup()
02814     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
02818                 | '   cursor_y:=lines-1
02818     94 FA 05 F1 | 	add	objptr, #148
0281c     FD 6C 02 FB | 	rdlong	local01, objptr
02820     01 6C 86 F1 | 	sub	local01, #1
02824     5F FA 85 F1 | 	sub	objptr, #95
02828     FD 6C 42 FC | 	wrbyte	local01, objptr
0282c     35 FA 85 F1 | 	sub	objptr, #53
02830                 | LR__0055
02830     AF F0 03 F6 | 	mov	ptra, fp
02834     BA 00 A0 FD | 	call	#popregs_
02838                 | _hng030rm_spin2_writeln_ret
02838     2D 00 64 FD | 	ret
0283c                 | 
0283c                 | ' 
0283c                 | ' ''-----------  Scroll the screen one line up
0283c                 | ' 
0283c                 | ' pub scrollup() | i
0283c                 | _hng030rm_spin2_scrollup
0283c     0D 5A 05 F6 | 	mov	COUNT_, #13
02840     B0 00 A0 FD | 	call	#pushregs_
02844                 | ' 
02844                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02844     FD 5E 02 FB | 	rdlong	arg01, objptr
02848     2F 61 02 F6 | 	mov	arg02, arg01
0284c     90 FA 05 F1 | 	add	objptr, #144
02850     FD 6C 02 FB | 	rdlong	local01, objptr
02854     02 6C 66 F0 | 	shl	local01, #2
02858     36 61 02 F1 | 	add	arg02, local01
0285c     60 FA 85 F1 | 	sub	objptr, #96
02860     FD 62 02 FB | 	rdlong	arg03, objptr
02864     60 FA 05 F1 | 	add	objptr, #96
02868     FD 6E 02 FB | 	rdlong	local02, objptr
0286c     90 FA 85 F1 | 	sub	objptr, #144
02870     37 63 82 F1 | 	sub	arg03, local02
02874     BC 39 B0 FD | 	call	#__system__longmove
02878                 | ' repeat i from buflen-cpl to buflen-1
02878     30 FA 05 F1 | 	add	objptr, #48
0287c     FD 70 02 FB | 	rdlong	local03, objptr
02880     60 FA 05 F1 | 	add	objptr, #96
02884     FD 72 02 FB | 	rdlong	local04, objptr
02888     39 71 82 F1 | 	sub	local03, local04
0288c     60 FA 85 F1 | 	sub	objptr, #96
02890     FD 74 02 FB | 	rdlong	local05, objptr
02894     01 74 86 F1 | 	sub	local05, #1
02898     FD 76 02 FB | 	rdlong	local06, objptr
0289c     60 FA 05 F1 | 	add	objptr, #96
028a0     FD 78 02 FB | 	rdlong	local07, objptr
028a4     90 FA 85 F1 | 	sub	objptr, #144
028a8     3C 77 82 F1 | 	sub	local06, local07
028ac     3B 75 5A F2 | 	cmps	local05, local06 wcz
028b0     01 7A 06 16 |  if_a	mov	local08, #1
028b4     01 7A 66 E6 |  if_be	neg	local08, #1
028b8     3D 75 02 F1 | 	add	local05, local08
028bc     80 D7 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
028c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
028c4                 | LR__0056
028c4                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
028c4     FD 7C 02 FB | 	rdlong	local09, objptr
028c8     38 7F 02 F6 | 	mov	local10, local03
028cc     02 7E 66 F0 | 	shl	local10, #2
028d0     3F 7D 02 F1 | 	add	local09, local10
028d4     3E 81 02 FB | 	rdlong	local11, local09
028d8     80 FF 7F FF 
028dc     00 80 06 F5 | 	and	local11, ##-65536
028e0     20 80 46 F5 | 	or	local11, #32
028e4     FD 82 02 FB | 	rdlong	local12, objptr
028e8     38 85 02 F6 | 	mov	local13, local03
028ec     02 84 66 F0 | 	shl	local13, #2
028f0     42 83 02 F1 | 	add	local12, local13
028f4     41 81 62 FC | 	wrlong	local11, local12
028f8     3D 71 02 F1 | 	add	local03, local08
028fc     3A 71 0A F2 | 	cmp	local03, local05 wz
02900     C0 FF 9F 5D |  if_ne	jmp	#LR__0056
02904                 | LR__0057
02904     AF F0 03 F6 | 	mov	ptra, fp
02908     BA 00 A0 FD | 	call	#popregs_
0290c                 | _hng030rm_spin2_scrollup_ret
0290c     2D 00 64 FD | 	ret
02910                 | 
02910                 | ' 
02910                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
02910                 | ' 
02910                 | ' pub crlf()
02910                 | _hng030rm_spin2_crlf
02910     02 5A 05 F6 | 	mov	COUNT_, #2
02914     B0 00 A0 FD | 	call	#pushregs_
02918                 | ' 
02918                 | ' cursor_x:=0
02918     34 FA 05 F1 | 	add	objptr, #52
0291c     FD 00 48 FC | 	wrbyte	#0, objptr
02920                 | ' cursor_y+=1
02920     01 FA 05 F1 | 	add	objptr, #1
02924     FD 6C C2 FA | 	rdbyte	local01, objptr
02928     01 6C 06 F1 | 	add	local01, #1
0292c     FD 6C 42 FC | 	wrbyte	local01, objptr
02930                 | ' if cursor_y>lines-1
02930     5F FA 05 F1 | 	add	objptr, #95
02934     FD 6C 02 FB | 	rdlong	local01, objptr
02938     01 6C 86 F1 | 	sub	local01, #1
0293c     5F FA 85 F1 | 	sub	objptr, #95
02940     FD 6E C2 FA | 	rdbyte	local02, objptr
02944     35 FA 85 F1 | 	sub	objptr, #53
02948     36 6F 5A F2 | 	cmps	local02, local01 wcz
0294c     1C 00 90 ED |  if_be	jmp	#LR__0058
02950                 | '   scrollup()
02950     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
02954                 | '   cursor_y:=lines-1
02954     94 FA 05 F1 | 	add	objptr, #148
02958     FD 6C 02 FB | 	rdlong	local01, objptr
0295c     01 6C 86 F1 | 	sub	local01, #1
02960     5F FA 85 F1 | 	sub	objptr, #95
02964     FD 6C 42 FC | 	wrbyte	local01, objptr
02968     35 FA 85 F1 | 	sub	objptr, #53
0296c                 | LR__0058
0296c     AF F0 03 F6 | 	mov	ptra, fp
02970     BA 00 A0 FD | 	call	#popregs_
02974                 | _hng030rm_spin2_crlf_ret
02974     2D 00 64 FD | 	ret
02978                 | 
02978                 | ' 
02978                 | ' 
02978                 | ' 
02978                 | ' pub inttostr2(i,d):result |q,pos,k,j
02978                 | _hng030rm_spin2_inttostr2
02978                 | ' 
02978                 | ' j:=i
02978                 | ' pos:=d-1
02978     30 1F 02 F6 | 	mov	_var01, arg02
0297c     01 1E 86 F1 | 	sub	_var01, #1
02980                 | ' k:=0
02980                 | ' 
02980                 | ' n_string[d]:=0
02980     30 21 02 F6 | 	mov	_var02, arg02
02984     44 FA 05 F1 | 	add	objptr, #68
02988     FD 22 02 F6 | 	mov	_var03, objptr
0298c     FD 20 02 F1 | 	add	_var02, objptr
02990     10 01 48 FC | 	wrbyte	#0, _var02
02994                 | ' repeat k from 0 to d-1
02994     00 24 06 F6 | 	mov	_var04, #0
02998     01 60 86 F1 | 	sub	arg02, #1
0299c     30 27 02 F6 | 	mov	_var05, arg02
029a0     00 26 5E F2 | 	cmps	_var05, #0 wcz
029a4     44 FA 85 F1 | 	sub	objptr, #68
029a8     01 22 06 16 |  if_a	mov	_var03, #1
029ac     01 22 66 E6 |  if_be	neg	_var03, #1
029b0     11 27 02 F1 | 	add	_var05, _var03
029b4     68 D6 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
029b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
029bc                 | LR__0059
029bc                 | '   n_string[k]:=48
029bc     12 29 02 F6 | 	mov	_var06, _var04
029c0     44 FA 05 F1 | 	add	objptr, #68
029c4     FD 28 02 F1 | 	add	_var06, objptr
029c8     14 61 48 FC | 	wrbyte	#48, _var06
029cc     11 25 02 F1 | 	add	_var04, _var03
029d0     13 25 0A F2 | 	cmp	_var04, _var05 wz
029d4     44 FA 85 F1 | 	sub	objptr, #68
029d8     E0 FF 9F 5D |  if_ne	jmp	#LR__0059
029dc                 | LR__0060
029dc                 | ' 
029dc                 | ' if (j<>0)
029dc     00 5E 0E F2 | 	cmp	arg01, #0 wz
029e0     40 00 90 AD |  if_e	jmp	#LR__0063
029e4                 | ' 
029e4                 | '   repeat while (pos>-1)
029e4                 | LR__0061
029e4     FF FF 7F FF 
029e8     FF 1F 5E F2 | 	cmps	_var01, ##-1 wcz
029ec     34 00 90 ED |  if_be	jmp	#LR__0062
029f0                 | '     q:=j+//10
029f0     2F 99 02 F6 | 	mov	muldiva_, arg01
029f4     0A 9A 06 F6 | 	mov	muldivb_, #10
029f8     C2 00 A0 FD | 	call	#unsdivide_
029fc                 | '     q:=48+q
029fc     30 2A 06 F6 | 	mov	_var07, #48
02a00     4C 2B 02 F1 | 	add	_var07, muldiva_
02a04                 | '     n_string[pos]:=q
02a04     0F 61 02 F6 | 	mov	arg02, _var01
02a08     44 FA 05 F1 | 	add	objptr, #68
02a0c     FD 60 02 F1 | 	add	arg02, objptr
02a10     30 2B 42 FC | 	wrbyte	_var07, arg02
02a14                 | '     j:=j+/10
02a14     4D 5F 02 F6 | 	mov	arg01, muldivb_
02a18                 | '     pos-=1
02a18     01 1E 86 F1 | 	sub	_var01, #1
02a1c     44 FA 85 F1 | 	sub	objptr, #68
02a20     C0 FF 9F FD | 	jmp	#LR__0061
02a24                 | LR__0062
02a24                 | LR__0063
02a24                 | ' 
02a24                 | ' 
02a24                 | ' q:=@n_string
02a24     44 FA 05 F1 | 	add	objptr, #68
02a28     FD 18 02 F6 | 	mov	result1, objptr
02a2c     44 FA 85 F1 | 	sub	objptr, #68
02a30                 | ' return q
02a30                 | _hng030rm_spin2_inttostr2_ret
02a30     2D 00 64 FD | 	ret
02a34                 | 
02a34                 | ' 
02a34                 | ' '*************************************************************************
02a34                 | ' '                                                                        *
02a34                 | ' '  Mode setting and driver start                                                          *
02a34                 | ' '                                                                        *
02a34                 | ' '*************************************************************************
02a34                 | ' 
02a34                 | ' ''---------  Set the graphics mode
02a34                 | ' 
02a34                 | ' 
02a34                 | ' 
02a34                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02a34                 | _hng030rm_spin2_setmode
02a34     0A 5A 05 F6 | 	mov	COUNT_, #10
02a38     B0 00 A0 FD | 	call	#pushregs_
02a3c     2F 6D 02 F6 | 	mov	local01, arg01
02a40                 | ' 
02a40                 | ' '' mode:tn_bb_cc_vv_hh
02a40                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02a40                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02a40                 | ' 
02a40                 | ' if mode==(512+192+48)
02a40     01 00 00 FF 
02a44     F0 6C 0E F2 | 	cmp	local01, ##752 wz
02a48                 | '   return 'no RAM
02a48     C0 05 90 AD |  if_e	jmp	#LR__0086
02a4c                 | ' 
02a4c                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02a4c     36 6F 02 F6 | 	mov	local02, local01
02a50     06 6E 46 F0 | 	shr	local02, #6
02a54     07 6E 06 F5 | 	and	local02, #7
02a58     08 6E 26 F3 | 	fle	local02, #8
02a5c     37 71 02 F6 | 	mov	local03, local02
02a60     30 70 62 FD | 	jmprel	local03
02a64                 | LR__0064
02a64     20 00 90 FD | 	jmp	#LR__0065
02a68     48 00 90 FD | 	jmp	#LR__0066
02a6c     70 00 90 FD | 	jmp	#LR__0067
02a70     98 00 90 FD | 	jmp	#LR__0068
02a74     C0 00 90 FD | 	jmp	#LR__0069
02a78     E8 00 90 FD | 	jmp	#LR__0070
02a7c     10 01 90 FD | 	jmp	#LR__0071
02a80     38 01 90 FD | 	jmp	#LR__0072
02a84     68 01 90 FD | 	jmp	#LR__0073
02a88                 | LR__0065
02a88                 | ' 
02a88                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02a88     50 FA 05 F1 | 	add	objptr, #80
02a8c     FD 5E 02 F6 | 	mov	arg01, objptr
02a90     50 FA 85 F1 | 	sub	objptr, #80
02a94     0E 00 00 FF 
02a98     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02a9c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02aa0     0E 00 00 FF 
02aa4     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02aa8     10 62 06 F6 | 	mov	arg03, #16
02aac     84 37 B0 FD | 	call	#__system__longmove
02ab0     3C 01 90 FD | 	jmp	#LR__0073
02ab4                 | LR__0066
02ab4                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02ab4     50 FA 05 F1 | 	add	objptr, #80
02ab8     FD 5E 02 F6 | 	mov	arg01, objptr
02abc     50 FA 85 F1 | 	sub	objptr, #80
02ac0     0E 00 00 FF 
02ac4     98 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02ac8     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02acc     0E 00 00 FF 
02ad0     98 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02ad4     10 62 06 F6 | 	mov	arg03, #16
02ad8     58 37 B0 FD | 	call	#__system__longmove
02adc     10 01 90 FD | 	jmp	#LR__0073
02ae0                 | LR__0067
02ae0                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02ae0     50 FA 05 F1 | 	add	objptr, #80
02ae4     FD 5E 02 F6 | 	mov	arg01, objptr
02ae8     50 FA 85 F1 | 	sub	objptr, #80
02aec     0E 00 00 FF 
02af0     D8 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02af4     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02af8     0E 00 00 FF 
02afc     D8 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02b00     10 62 06 F6 | 	mov	arg03, #16
02b04     2C 37 B0 FD | 	call	#__system__longmove
02b08     E4 00 90 FD | 	jmp	#LR__0073
02b0c                 | LR__0068
02b0c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02b0c     50 FA 05 F1 | 	add	objptr, #80
02b10     FD 5E 02 F6 | 	mov	arg01, objptr
02b14     50 FA 85 F1 | 	sub	objptr, #80
02b18     0E 00 00 FF 
02b1c     18 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b20     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b24     0E 00 00 FF 
02b28     18 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b2c     10 62 06 F6 | 	mov	arg03, #16
02b30     00 37 B0 FD | 	call	#__system__longmove
02b34     B8 00 90 FD | 	jmp	#LR__0073
02b38                 | LR__0069
02b38                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02b38     50 FA 05 F1 | 	add	objptr, #80
02b3c     FD 5E 02 F6 | 	mov	arg01, objptr
02b40     50 FA 85 F1 | 	sub	objptr, #80
02b44     0E 00 00 FF 
02b48     58 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02b4c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b50     0E 00 00 FF 
02b54     58 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02b58     10 62 06 F6 | 	mov	arg03, #16
02b5c     D4 36 B0 FD | 	call	#__system__longmove
02b60     8C 00 90 FD | 	jmp	#LR__0073
02b64                 | LR__0070
02b64                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02b64     50 FA 05 F1 | 	add	objptr, #80
02b68     FD 5E 02 F6 | 	mov	arg01, objptr
02b6c     50 FA 85 F1 | 	sub	objptr, #80
02b70     0E 00 00 FF 
02b74     98 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b78     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b7c     0E 00 00 FF 
02b80     98 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b84     10 62 06 F6 | 	mov	arg03, #16
02b88     A8 36 B0 FD | 	call	#__system__longmove
02b8c     60 00 90 FD | 	jmp	#LR__0073
02b90                 | LR__0071
02b90                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02b90     50 FA 05 F1 | 	add	objptr, #80
02b94     FD 5E 02 F6 | 	mov	arg01, objptr
02b98     50 FA 85 F1 | 	sub	objptr, #80
02b9c     0E 00 00 FF 
02ba0     D8 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02ba4     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02ba8     0E 00 00 FF 
02bac     D8 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02bb0     10 62 06 F6 | 	mov	arg03, #16
02bb4     7C 36 B0 FD | 	call	#__system__longmove
02bb8     34 00 90 FD | 	jmp	#LR__0073
02bbc                 | LR__0072
02bbc                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02bbc     50 FA 05 F1 | 	add	objptr, #80
02bc0     FD 72 02 F6 | 	mov	local04, objptr
02bc4     0F 00 00 FF 
02bc8     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02bcc     03 75 02 F6 | 	mov	local05, ptr__hng030rm_spin2_dat__
02bd0     10 76 06 F6 | 	mov	local06, #16
02bd4     39 5F 02 F6 | 	mov	arg01, local04
02bd8     3A 61 02 F6 | 	mov	arg02, local05
02bdc     10 62 06 F6 | 	mov	arg03, #16
02be0     50 FA 85 F1 | 	sub	objptr, #80
02be4     0F 00 00 FF 
02be8     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02bec     44 36 B0 FD | 	call	#__system__longmove
02bf0                 | LR__0073
02bf0                 | ' 
02bf0                 | ' ' 4-bit graphics: do nothing with timings :)
02bf0                 | ' if mode<512
02bf0     01 00 00 FF 
02bf4     00 6C 5E F2 | 	cmps	local01, ##512 wcz
02bf8     1C 00 90 3D |  if_ae	jmp	#LR__0074
02bfc                 | '   palette_ptr:=@ataripalette
02bfc     0C 00 00 FF 
02c00     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c04     18 FA 05 F1 | 	add	objptr, #24
02c08     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c0c     18 FA 85 F1 | 	sub	objptr, #24
02c10     0C 00 00 FF 
02c14     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c18                 | LR__0074
02c18                 | ' 
02c18                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c18     36 6F 02 F6 | 	mov	local02, local01
02c1c     01 00 00 FF 
02c20     30 6E 06 F5 | 	and	local02, ##560
02c24     01 00 00 FF 
02c28     30 6E 0E F2 | 	cmp	local02, ##560 wz
02c2c     44 00 90 5D |  if_ne	jmp	#LR__0075
02c30                 | '   timings[5]:=4
02c30     64 FA 05 F1 | 	add	objptr, #100
02c34     FD 08 68 FC | 	wrlong	#4, objptr
02c38                 | '   timings[11]:=timings[11]<<1
02c38     18 FA 05 F1 | 	add	objptr, #24
02c3c     FD 6E 02 FB | 	rdlong	local02, objptr
02c40     01 6E 66 F0 | 	shl	local02, #1
02c44     FD 6E 62 FC | 	wrlong	local02, objptr
02c48                 | '   putpixel:=p8
02c48     6C FA 05 F1 | 	add	objptr, #108
02c4c     FD 6E 02 FB | 	rdlong	local02, objptr
02c50     10 FA 85 F1 | 	sub	objptr, #16
02c54     FD 6E 62 FC | 	wrlong	local02, objptr
02c58                 | '   palette_ptr:=@ataripalette
02c58     0C 00 00 FF 
02c5c     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c60     C0 FA 85 F1 | 	sub	objptr, #192
02c64     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c68     18 FA 85 F1 | 	sub	objptr, #24
02c6c     0C 00 00 FF 
02c70     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c74                 | LR__0075
02c74                 | ' 
02c74                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02c74     36 6F 02 F6 | 	mov	local02, local01
02c78     01 00 00 FF 
02c7c     30 6E 06 F5 | 	and	local02, ##560
02c80     01 00 00 FF 
02c84     10 6E 0E F2 | 	cmp	local02, ##528 wz
02c88     44 00 90 5D |  if_ne	jmp	#LR__0076
02c8c                 | '   timings[5]:=16
02c8c     64 FA 05 F1 | 	add	objptr, #100
02c90     FD 20 68 FC | 	wrlong	#16, objptr
02c94                 | '   timings[11]:=timings[11]>>1
02c94     18 FA 05 F1 | 	add	objptr, #24
02c98     FD 6E 02 FB | 	rdlong	local02, objptr
02c9c     01 6E 46 F0 | 	shr	local02, #1
02ca0     FD 6E 62 FC | 	wrlong	local02, objptr
02ca4                 | '   putpixel:=p2
02ca4     64 FA 05 F1 | 	add	objptr, #100
02ca8     FD 6E 02 FB | 	rdlong	local02, objptr
02cac     08 FA 85 F1 | 	sub	objptr, #8
02cb0     FD 6E 62 FC | 	wrlong	local02, objptr
02cb4                 | '   palette_ptr:=@fourcolors
02cb4     0C 00 00 FF 
02cb8     08 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02cbc     C0 FA 85 F1 | 	sub	objptr, #192
02cc0     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02cc4     18 FA 85 F1 | 	sub	objptr, #24
02cc8     0C 00 00 FF 
02ccc     08 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02cd0                 | LR__0076
02cd0                 | ' 
02cd0                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02cd0     36 6F 02 F6 | 	mov	local02, local01
02cd4     01 00 00 FF 
02cd8     30 6E 06 F5 | 	and	local02, ##560
02cdc     01 00 00 FF 
02ce0     00 6E 0E F2 | 	cmp	local02, ##512 wz
02ce4     44 00 90 5D |  if_ne	jmp	#LR__0077
02ce8                 | '   timings[5]:=32
02ce8     64 FA 05 F1 | 	add	objptr, #100
02cec     FD 40 68 FC | 	wrlong	#32, objptr
02cf0                 | '   timings[11]:=timings[11]>>2
02cf0     18 FA 05 F1 | 	add	objptr, #24
02cf4     FD 6E 02 FB | 	rdlong	local02, objptr
02cf8     02 6E 46 F0 | 	shr	local02, #2
02cfc     FD 6E 62 FC | 	wrlong	local02, objptr
02d00                 | '   putpixel:=p1
02d00     60 FA 05 F1 | 	add	objptr, #96
02d04     FD 6E 02 FB | 	rdlong	local02, objptr
02d08     04 FA 85 F1 | 	sub	objptr, #4
02d0c     FD 6E 62 FC | 	wrlong	local02, objptr
02d10                 | '   palette_ptr:=@twocolors
02d10     0C 00 00 FF 
02d14     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d18     C0 FA 85 F1 | 	sub	objptr, #192
02d1c     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d20     18 FA 85 F1 | 	sub	objptr, #24
02d24     0C 00 00 FF 
02d28     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d2c                 | LR__0077
02d2c                 | ' 
02d2c                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d2c     36 6F 02 F6 | 	mov	local02, local01
02d30     01 00 00 FF 
02d34     30 6E 06 F5 | 	and	local02, ##560
02d38     01 00 00 FF 
02d3c     20 6E 0E F2 | 	cmp	local02, ##544 wz
02d40     2C 00 90 5D |  if_ne	jmp	#LR__0078
02d44                 | '   putpixel:=p4
02d44     E4 FA 05 F1 | 	add	objptr, #228
02d48     FD 6E 02 FB | 	rdlong	local02, objptr
02d4c     0C FA 85 F1 | 	sub	objptr, #12
02d50     FD 6E 62 FC | 	wrlong	local02, objptr
02d54                 | '   palette_ptr:=@vga16
02d54     0C 00 00 FF 
02d58     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02d5c     C0 FA 85 F1 | 	sub	objptr, #192
02d60     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d64     18 FA 85 F1 | 	sub	objptr, #24
02d68     0C 00 00 FF 
02d6c     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d70                 | LR__0078
02d70                 | ' 
02d70                 | ' repeat i from 0 to 4
02d70     00 78 06 F6 | 	mov	local07, #0
02d74     E4 D2 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
02d78     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d7c                 | LR__0079
02d7c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d7c     3C 73 02 F6 | 	mov	local04, local07
02d80     02 72 66 F0 | 	shl	local04, #2
02d84     50 FA 05 F1 | 	add	objptr, #80
02d88     FD 74 02 F6 | 	mov	local05, objptr
02d8c     FD 72 02 F1 | 	add	local04, objptr
02d90     2C FA 85 F1 | 	sub	objptr, #44
02d94     FD 7A 02 FB | 	rdlong	local08, objptr
02d98     3D 77 02 F6 | 	mov	local06, local08
02d9c     11 76 66 F0 | 	shl	local06, #17
02da0     39 6F 02 FB | 	rdlong	local02, local04
02da4     3B 6F 02 F1 | 	add	local02, local06
02da8     80 40 38 FF 
02dac     00 6E 06 F1 | 	add	local02, ##1887502336
02db0     3C 7D 02 F6 | 	mov	local09, local07
02db4     02 7C 66 F0 | 	shl	local09, #2
02db8     2C FA 05 F1 | 	add	objptr, #44
02dbc     FD 7E 02 F6 | 	mov	local10, objptr
02dc0     FD 7C 02 F1 | 	add	local09, objptr
02dc4     3E 6F 62 FC | 	wrlong	local02, local09
02dc8     01 78 06 F1 | 	add	local07, #1
02dcc     05 78 5E F2 | 	cmps	local07, #5 wcz
02dd0     50 FA 85 F1 | 	sub	objptr, #80
02dd4     A4 FF 9F CD |  if_b	jmp	#LR__0079
02dd8                 | LR__0080
02dd8                 | ' timings[5]:=timings[5]+hdmibase<<17
02dd8     24 FA 05 F1 | 	add	objptr, #36
02ddc     FD 72 02 FB | 	rdlong	local04, objptr
02de0     11 72 66 F0 | 	shl	local04, #17
02de4     40 FA 05 F1 | 	add	objptr, #64
02de8     FD 76 02 FB | 	rdlong	local06, objptr
02dec     3B 6F 02 F6 | 	mov	local02, local06
02df0     39 6F 02 F1 | 	add	local02, local04
02df4     FD 6E 62 FC | 	wrlong	local02, objptr
02df8                 | ' clkfreq:=timings[13]
02df8     20 FA 05 F1 | 	add	objptr, #32
02dfc     FD 6E 02 FB | 	rdlong	local02, objptr
02e00     14 6E 66 FC | 	wrlong	local02, #20
02e04                 | ' hubset(timings[14])
02e04     04 FA 05 F1 | 	add	objptr, #4
02e08     FD 5E 02 FB | 	rdlong	arg01, objptr
02e0c     88 FA 85 F1 | 	sub	objptr, #136
02e10     00 5E 62 FD | 	hubset	arg01
02e14                 | ' waitms(1)
02e14     01 5E 06 F6 | 	mov	arg01, #1
02e18     C4 36 B0 FD | 	call	#__system___waitms
02e1c                 | ' 
02e1c                 | ' 
02e1c                 | ' xzoom:=1<<(mode & 3)
02e1c     36 73 02 F6 | 	mov	local04, local01
02e20     03 72 06 F5 | 	and	local04, #3
02e24     39 6F C2 F9 | 	decod	local02, local04
02e28     CC FA 05 F1 | 	add	objptr, #204
02e2c     FD 6E 62 FC | 	wrlong	local02, objptr
02e30                 | ' 
02e30                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02e30     37 73 02 F6 | 	mov	local04, local02
02e34     CC FA 85 F1 | 	sub	objptr, #204
02e38     08 72 0E F2 | 	cmp	local04, #8 wz
02e3c     24 00 90 5D |  if_ne	jmp	#LR__0081
02e40     36 75 02 F6 | 	mov	local05, local01
02e44     04 74 46 F0 | 	shr	local05, #4
02e48     03 74 06 F5 | 	and	local05, #3
02e4c     03 74 0E F2 | 	cmp	local05, #3 wz
02e50     10 00 90 AD |  if_e	jmp	#LR__0081
02e54                 | '   xzoom:=4
02e54     04 6E 06 F6 | 	mov	local02, #4
02e58     CC FA 05 F1 | 	add	objptr, #204
02e5c     FD 08 68 FC | 	wrlong	#4, objptr
02e60     CC FA 85 F1 | 	sub	objptr, #204
02e64                 | LR__0081
02e64                 | ' 
02e64                 | ' yzoom:=1<<((mode>>2) & 3)
02e64     36 73 02 F6 | 	mov	local04, local01
02e68     02 72 46 F0 | 	shr	local04, #2
02e6c     03 72 06 F5 | 	and	local04, #3
02e70     39 6F C2 F9 | 	decod	local02, local04
02e74     D0 FA 05 F1 | 	add	objptr, #208
02e78     FD 6E 62 FC | 	wrlong	local02, objptr
02e7c                 | ' azoom:=xzoom*yzoom
02e7c     04 FA 85 F1 | 	sub	objptr, #4
02e80     FD 72 02 FB | 	rdlong	local04, objptr
02e84     04 FA 05 F1 | 	add	objptr, #4
02e88     FD 76 02 FB | 	rdlong	local06, objptr
02e8c     3B 73 02 FD | 	qmul	local04, local06
02e90     18 6E 62 FD | 	getqx	local02
02e94     04 FA 05 F1 | 	add	objptr, #4
02e98     FD 6E 62 FC | 	wrlong	local02, objptr
02e9c                 | ' 
02e9c                 | ' cpl:=timings[11]
02e9c     58 FA 85 F1 | 	sub	objptr, #88
02ea0     FD 6E 02 FB | 	rdlong	local02, objptr
02ea4     14 FA 05 F1 | 	add	objptr, #20
02ea8     FD 6E 62 FC | 	wrlong	local02, objptr
02eac     90 FA 85 F1 | 	sub	objptr, #144
02eb0                 | ' if (mode<512)
02eb0     01 00 00 FF 
02eb4     00 6C 5E F2 | 	cmps	local01, ##512 wcz
02eb8     60 00 90 3D |  if_ae	jmp	#LR__0082
02ebc                 | '   lines:=(timings[12]>>4)+/yzoom
02ebc     80 FA 05 F1 | 	add	objptr, #128
02ec0     FD 98 02 FB | 	rdlong	muldiva_, objptr
02ec4     04 98 46 F0 | 	shr	muldiva_, #4
02ec8     50 FA 05 F1 | 	add	objptr, #80
02ecc     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02ed0     D0 FA 85 F1 | 	sub	objptr, #208
02ed4     C2 00 A0 FD | 	call	#unsdivide_
02ed8     94 FA 05 F1 | 	add	objptr, #148
02edc     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02ee0                 | '   if ((timings[12]>>4)+//yzoom) <>0
02ee0     14 FA 85 F1 | 	sub	objptr, #20
02ee4     FD 98 02 FB | 	rdlong	muldiva_, objptr
02ee8     04 98 46 F0 | 	shr	muldiva_, #4
02eec     50 FA 05 F1 | 	add	objptr, #80
02ef0     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02ef4     D0 FA 85 F1 | 	sub	objptr, #208
02ef8     C2 00 A0 FD | 	call	#unsdivide_
02efc     00 98 0E F2 | 	cmp	muldiva_, #0 wz
02f00     AC 00 90 AD |  if_e	jmp	#LR__0085
02f04                 | '     lines +=1
02f04     94 FA 05 F1 | 	add	objptr, #148
02f08     FD 6E 02 FB | 	rdlong	local02, objptr
02f0c     01 6E 06 F1 | 	add	local02, #1
02f10     FD 6E 62 FC | 	wrlong	local02, objptr
02f14     94 FA 85 F1 | 	sub	objptr, #148
02f18                 | ' 
02f18                 | ' else
02f18     94 00 90 FD | 	jmp	#LR__0085
02f1c                 | LR__0082
02f1c                 | '   lines:=timings[12]/yzoom
02f1c     80 FA 05 F1 | 	add	objptr, #128
02f20     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f24     50 FA 05 F1 | 	add	objptr, #80
02f28     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f2c     D0 FA 85 F1 | 	sub	objptr, #208
02f30     C6 00 A0 FD | 	call	#divide_
02f34     94 FA 05 F1 | 	add	objptr, #148
02f38     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02f3c                 | '   if cpl//xzoom==0
02f3c     04 FA 85 F1 | 	sub	objptr, #4
02f40     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f44     3C FA 05 F1 | 	add	objptr, #60
02f48     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f4c     CC FA 85 F1 | 	sub	objptr, #204
02f50     C6 00 A0 FD | 	call	#divide_
02f54     00 98 0E F2 | 	cmp	muldiva_, #0 wz
02f58     28 00 90 5D |  if_ne	jmp	#LR__0083
02f5c                 | '     cpl:=cpl/xzoom
02f5c     90 FA 05 F1 | 	add	objptr, #144
02f60     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f64     3C FA 05 F1 | 	add	objptr, #60
02f68     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f6c     CC FA 85 F1 | 	sub	objptr, #204
02f70     C6 00 A0 FD | 	call	#divide_
02f74     90 FA 05 F1 | 	add	objptr, #144
02f78     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02f7c     90 FA 85 F1 | 	sub	objptr, #144
02f80                 | '   else
02f80     2C 00 90 FD | 	jmp	#LR__0084
02f84                 | LR__0083
02f84                 | '     cpl:=cpl/xzoom+1
02f84     90 FA 05 F1 | 	add	objptr, #144
02f88     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f8c     3C FA 05 F1 | 	add	objptr, #60
02f90     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f94     CC FA 85 F1 | 	sub	objptr, #204
02f98     C6 00 A0 FD | 	call	#divide_
02f9c     4D 6F 02 F6 | 	mov	local02, muldivb_
02fa0     01 6E 06 F1 | 	add	local02, #1
02fa4     90 FA 05 F1 | 	add	objptr, #144
02fa8     FD 6E 62 FC | 	wrlong	local02, objptr
02fac     90 FA 85 F1 | 	sub	objptr, #144
02fb0                 | LR__0084
02fb0                 | LR__0085
02fb0                 | ' 
02fb0                 | ' buflen:=(cpl*lines)
02fb0     90 FA 05 F1 | 	add	objptr, #144
02fb4     FD 72 02 FB | 	rdlong	local04, objptr
02fb8     04 FA 05 F1 | 	add	objptr, #4
02fbc     FD 76 02 FB | 	rdlong	local06, objptr
02fc0     3B 73 02 FD | 	qmul	local04, local06
02fc4     18 6E 62 FD | 	getqx	local02
02fc8     64 FA 85 F1 | 	sub	objptr, #100
02fcc     FD 6E 62 FC | 	wrlong	local02, objptr
02fd0                 | ' buf_ptr:=$80000-4*buflen
02fd0     37 73 02 F6 | 	mov	local04, local02
02fd4     30 FA 85 F1 | 	sub	objptr, #48
02fd8     02 72 66 F0 | 	shl	local04, #2
02fdc     13 6E C6 F9 | 	decod	local02, #19
02fe0     39 6F 82 F1 | 	sub	local02, local04
02fe4     FD 6E 62 FC | 	wrlong	local02, objptr
02fe8                 | ' mode_ptr:=@timings
02fe8     50 FA 05 F1 | 	add	objptr, #80
02fec     FD 6E 02 F6 | 	mov	local02, objptr
02ff0     3C FA 85 F1 | 	sub	objptr, #60
02ff4     FD 6E 62 FC | 	wrlong	local02, objptr
02ff8                 | ' graphmode:=mode
02ff8     B0 FA 05 F1 | 	add	objptr, #176
02ffc     FD 6C 62 FC | 	wrlong	local01, objptr
03000     C4 FA 85 F1 | 	sub	objptr, #196
03004                 | ' makedl(mode)
03004     36 5F 02 F6 | 	mov	arg01, local01
03008     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
0300c                 | LR__0086
0300c     AF F0 03 F6 | 	mov	ptra, fp
03010     BA 00 A0 FD | 	call	#popregs_
03014                 | _hng030rm_spin2_setmode_ret
03014     2D 00 64 FD | 	ret
03018                 | 
03018                 | ' 
03018                 | ' 
03018                 | ' 
03018                 | ' 
03018                 | ' '---------- Make a display list
03018                 | ' 
03018                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
03018                 | _hng030rm_spin2_makedl
03018                 | ' 
03018                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03018                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03018                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03018                 | ' 
03018                 | ' '   0 - display a up/down border line
03018                 | ' 
03018                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03018                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03018                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03018                 | ' '    nnnn - font line to display, 0..15
03018                 | ' '    llllll - character line, determines the cursor Y position
03018                 | ' 
03018                 | ' 
03018                 | ' if (mode &256==0)
03018     00 5F CE F7 | 	test	arg01, #256 wz
0301c     1C 00 90 5D |  if_ne	jmp	#LR__0087
03020                 | '   dl_ptr:=buf_ptr-4*576
03020     FD 1E 02 FB | 	rdlong	_var01, objptr
03024     04 00 00 FF 
03028     00 1F 86 F1 | 	sub	_var01, ##2304
0302c     1C FA 05 F1 | 	add	objptr, #28
03030     FD 1E 62 FC | 	wrlong	_var01, objptr
03034     1C FA 85 F1 | 	sub	objptr, #28
03038                 | ' else
03038     18 00 90 FD | 	jmp	#LR__0088
0303c                 | LR__0087
0303c                 | '   dl_ptr:=buf_ptr-4*496
0303c     FD 1E 02 FB | 	rdlong	_var01, objptr
03040     03 00 00 FF 
03044     C0 1F 86 F1 | 	sub	_var01, ##1984
03048     1C FA 05 F1 | 	add	objptr, #28
0304c     FD 1E 62 FC | 	wrlong	_var01, objptr
03050     1C FA 85 F1 | 	sub	objptr, #28
03054                 | LR__0088
03054                 | '  ' dl_ptr:=buf_ptr-4*540
03054                 | ' 
03054                 | ' vzoom:=((mode>>2) & 3)
03054     2F 21 02 F6 | 	mov	_var02, arg01
03058     02 20 46 F0 | 	shr	_var02, #2
0305c     03 20 06 F5 | 	and	_var02, #3
03060                 | ' 
03060                 | ' 
03060                 | ' if mode<512 '' text modes
03060     01 00 00 FF 
03064     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03068     E8 01 90 3D |  if_ae	jmp	#LR__0096
0306c                 | ' 
0306c                 | '   if timings[6]>0 'borders
0306c     68 FA 05 F1 | 	add	objptr, #104
03070     FD 1E 02 FB | 	rdlong	_var01, objptr
03074     68 FA 85 F1 | 	sub	objptr, #104
03078     00 1E 5E F2 | 	cmps	_var01, #0 wcz
0307c     D4 00 90 ED |  if_be	jmp	#LR__0093
03080                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03080     00 22 06 F6 | 	mov	_var03, #0
03084     68 FA 05 F1 | 	add	objptr, #104
03088     FD 24 02 FB | 	rdlong	_var04, objptr
0308c     68 FA 85 F1 | 	sub	objptr, #104
03090     01 24 86 F1 | 	sub	_var04, #1
03094     00 24 5E F2 | 	cmps	_var04, #0 wcz
03098     01 26 06 16 |  if_a	mov	_var05, #1
0309c     01 26 66 E6 |  if_be	neg	_var05, #1
030a0     13 29 02 F6 | 	mov	_var06, _var05
030a4     13 25 02 F1 | 	add	_var04, _var05
030a8     7C CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
030ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
030b0                 | LR__0089
030b0                 | '       long[dl_ptr+4*i]:=$0
030b0     1C FA 05 F1 | 	add	objptr, #28
030b4     FD 2A 02 FB | 	rdlong	_var07, objptr
030b8     1C FA 85 F1 | 	sub	objptr, #28
030bc     11 2D 02 F6 | 	mov	_var08, _var03
030c0     02 2C 66 F0 | 	shl	_var08, #2
030c4     16 2B 02 F1 | 	add	_var07, _var08
030c8     15 01 68 FC | 	wrlong	#0, _var07
030cc     14 23 02 F1 | 	add	_var03, _var06
030d0     12 23 0A F2 | 	cmp	_var03, _var04 wz
030d4     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
030d8                 | LR__0090
030d8                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
030d8     68 FA 05 F1 | 	add	objptr, #104
030dc     FD 22 02 FB | 	rdlong	_var03, objptr
030e0     18 FA 05 F1 | 	add	objptr, #24
030e4     FD 26 02 FB | 	rdlong	_var05, objptr
030e8     13 23 02 F1 | 	add	_var03, _var05
030ec     0C FA 05 F1 | 	add	objptr, #12
030f0     FD 2E 02 FB | 	rdlong	_var09, objptr
030f4     01 2E 86 F1 | 	sub	_var09, #1
030f8     24 FA 85 F1 | 	sub	objptr, #36
030fc     FD 30 02 FB | 	rdlong	_var10, objptr
03100     18 FA 05 F1 | 	add	objptr, #24
03104     FD 32 02 FB | 	rdlong	_var11, objptr
03108     80 FA 85 F1 | 	sub	objptr, #128
0310c     19 31 02 F1 | 	add	_var10, _var11
03110     18 2F 5A F2 | 	cmps	_var09, _var10 wcz
03114     01 2C 06 16 |  if_a	mov	_var08, #1
03118     01 2C 66 E6 |  if_be	neg	_var08, #1
0311c     16 35 02 F6 | 	mov	_var12, _var08
03120     16 2F 02 F1 | 	add	_var09, _var08
03124     00 CF 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
03128     93 00 A0 FD | 	call	#FCACHE_LOAD_
0312c                 | LR__0091
0312c                 | '       long[dl_ptr+4*i]:=$0
0312c     1C FA 05 F1 | 	add	objptr, #28
03130     FD 36 02 FB | 	rdlong	_var13, objptr
03134     1C FA 85 F1 | 	sub	objptr, #28
03138     11 39 02 F6 | 	mov	_var14, _var03
0313c     02 38 66 F0 | 	shl	_var14, #2
03140     1C 37 02 F1 | 	add	_var13, _var14
03144     1B 01 68 FC | 	wrlong	#0, _var13
03148     1A 23 02 F1 | 	add	_var03, _var12
0314c     17 23 0A F2 | 	cmp	_var03, _var09 wz
03150     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
03154                 | LR__0092
03154                 | LR__0093
03154                 | '   lpc:=16<<vzoom
03154     10 3A 06 F6 | 	mov	_var15, #16
03158     10 3B 62 F0 | 	shl	_var15, _var02
0315c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
0315c     68 FA 05 F1 | 	add	objptr, #104
03160     FD 22 02 FB | 	rdlong	_var03, objptr
03164     11 3D 02 F6 | 	mov	_var16, _var03
03168     18 FA 05 F1 | 	add	objptr, #24
0316c     FD 3E 02 FB | 	rdlong	_var17, objptr
03170     1F 3D 02 F1 | 	add	_var16, _var17
03174     01 3C 86 F1 | 	sub	_var16, #1
03178     18 FA 85 F1 | 	sub	objptr, #24
0317c     FD 2C 02 FB | 	rdlong	_var08, objptr
03180     68 FA 85 F1 | 	sub	objptr, #104
03184     16 3D 5A F2 | 	cmps	_var16, _var08 wcz
03188     01 40 06 16 |  if_a	mov	_var18, #1
0318c     01 40 66 E6 |  if_be	neg	_var18, #1
03190     20 43 02 F6 | 	mov	_var19, _var18
03194     20 3D 02 F1 | 	add	_var16, _var18
03198     18 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
0319c     93 00 A0 FD | 	call	#FCACHE_LOAD_
031a0                 | LR__0094
031a0                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
031a0     11 99 02 F6 | 	mov	muldiva_, _var03
031a4     68 FA 05 F1 | 	add	objptr, #104
031a8     FD 44 02 FB | 	rdlong	_var20, objptr
031ac     68 FA 85 F1 | 	sub	objptr, #104
031b0     22 99 82 F1 | 	sub	muldiva_, _var20
031b4     1D 9B 02 F6 | 	mov	muldivb_, _var15
031b8     C2 00 A0 FD | 	call	#unsdivide_
031bc     10 99 42 F0 | 	shr	muldiva_, _var02
031c0     4C 47 02 F6 | 	mov	_var21, muldiva_
031c4                 | '     charline:=(i-timings[6])+/lpc
031c4     11 99 02 F6 | 	mov	muldiva_, _var03
031c8     68 FA 05 F1 | 	add	objptr, #104
031cc     FD 48 02 FB | 	rdlong	_var22, objptr
031d0     68 FA 85 F1 | 	sub	objptr, #104
031d4     24 99 82 F1 | 	sub	muldiva_, _var22
031d8     1D 9B 02 F6 | 	mov	muldivb_, _var15
031dc     C2 00 A0 FD | 	call	#unsdivide_
031e0     4D 4B 02 F6 | 	mov	_var23, muldivb_
031e4                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
031e4     FD 32 02 FB | 	rdlong	_var11, objptr
031e8     90 FA 05 F1 | 	add	objptr, #144
031ec     FD 44 02 FB | 	rdlong	_var20, objptr
031f0     25 45 02 FD | 	qmul	_var20, _var23
031f4     18 4C 62 FD | 	getqx	_var24
031f8     02 4C 66 F0 | 	shl	_var24, #2
031fc     26 33 02 F1 | 	add	_var11, _var24
03200     2F 39 02 F6 | 	mov	_var14, arg01
03204     03 38 06 F5 | 	and	_var14, #3
03208     1C 33 02 F1 | 	add	_var11, _var14
0320c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
0320c     0C 32 66 F0 | 	shl	_var11, #12
03210     23 49 02 F6 | 	mov	_var22, _var21
03214     08 48 66 F0 | 	shl	_var22, #8
03218     24 33 02 F1 | 	add	_var11, _var22
0321c     25 45 02 F6 | 	mov	_var20, _var23
03220     02 44 66 F0 | 	shl	_var20, #2
03224     22 33 02 F1 | 	add	_var11, _var20
03228     01 32 06 F1 | 	add	_var11, #1
0322c     74 FA 85 F1 | 	sub	objptr, #116
03230     FD 36 02 FB | 	rdlong	_var13, objptr
03234     1C FA 85 F1 | 	sub	objptr, #28
03238     11 39 02 F6 | 	mov	_var14, _var03
0323c     02 38 66 F0 | 	shl	_var14, #2
03240     1C 37 02 F1 | 	add	_var13, _var14
03244     1B 33 62 FC | 	wrlong	_var11, _var13
03248     21 23 02 F1 | 	add	_var03, _var19
0324c     1E 23 0A F2 | 	cmp	_var03, _var16 wz
03250     4C FF 9F 5D |  if_ne	jmp	#LR__0094
03254                 | LR__0095
03254                 | LR__0096
03254                 | ' 
03254                 | ' 
03254                 | ' 
03254                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03254     01 00 00 FF 
03258     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
0325c     A8 01 90 CD |  if_b	jmp	#LR__0104
03260                 | ' 
03260                 | '   if timings[6]>0 'borders
03260     68 FA 05 F1 | 	add	objptr, #104
03264     FD 1E 02 FB | 	rdlong	_var01, objptr
03268     68 FA 85 F1 | 	sub	objptr, #104
0326c     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03270     D4 00 90 ED |  if_be	jmp	#LR__0101
03274                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03274     00 22 06 F6 | 	mov	_var03, #0
03278     68 FA 05 F1 | 	add	objptr, #104
0327c     FD 4E 02 FB | 	rdlong	_var25, objptr
03280     68 FA 85 F1 | 	sub	objptr, #104
03284     01 4E 86 F1 | 	sub	_var25, #1
03288     00 4E 5E F2 | 	cmps	_var25, #0 wcz
0328c     01 26 06 16 |  if_a	mov	_var05, #1
03290     01 26 66 E6 |  if_be	neg	_var05, #1
03294     13 51 02 F6 | 	mov	_var26, _var05
03298     13 4F 02 F1 | 	add	_var25, _var05
0329c     88 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
032a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
032a4                 | LR__0097
032a4                 | '       long[dl_ptr+4*i]:=$0
032a4     1C FA 05 F1 | 	add	objptr, #28
032a8     FD 2A 02 FB | 	rdlong	_var07, objptr
032ac     1C FA 85 F1 | 	sub	objptr, #28
032b0     11 2D 02 F6 | 	mov	_var08, _var03
032b4     02 2C 66 F0 | 	shl	_var08, #2
032b8     16 2B 02 F1 | 	add	_var07, _var08
032bc     15 01 68 FC | 	wrlong	#0, _var07
032c0     28 23 02 F1 | 	add	_var03, _var26
032c4     27 23 0A F2 | 	cmp	_var03, _var25 wz
032c8     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
032cc                 | LR__0098
032cc                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
032cc     68 FA 05 F1 | 	add	objptr, #104
032d0     FD 22 02 FB | 	rdlong	_var03, objptr
032d4     18 FA 05 F1 | 	add	objptr, #24
032d8     FD 26 02 FB | 	rdlong	_var05, objptr
032dc     13 23 02 F1 | 	add	_var03, _var05
032e0     0C FA 05 F1 | 	add	objptr, #12
032e4     FD 52 02 FB | 	rdlong	_var27, objptr
032e8     01 52 86 F1 | 	sub	_var27, #1
032ec     24 FA 85 F1 | 	sub	objptr, #36
032f0     FD 30 02 FB | 	rdlong	_var10, objptr
032f4     18 FA 05 F1 | 	add	objptr, #24
032f8     FD 32 02 FB | 	rdlong	_var11, objptr
032fc     80 FA 85 F1 | 	sub	objptr, #128
03300     19 31 02 F1 | 	add	_var10, _var11
03304     18 53 5A F2 | 	cmps	_var27, _var10 wcz
03308     01 2C 06 16 |  if_a	mov	_var08, #1
0330c     01 2C 66 E6 |  if_be	neg	_var08, #1
03310     16 55 02 F6 | 	mov	_var28, _var08
03314     16 53 02 F1 | 	add	_var27, _var08
03318     0C CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
0331c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03320                 | LR__0099
03320                 | '       long[dl_ptr+4*i]:=$0
03320     1C FA 05 F1 | 	add	objptr, #28
03324     FD 36 02 FB | 	rdlong	_var13, objptr
03328     1C FA 85 F1 | 	sub	objptr, #28
0332c     11 39 02 F6 | 	mov	_var14, _var03
03330     02 38 66 F0 | 	shl	_var14, #2
03334     1C 37 02 F1 | 	add	_var13, _var14
03338     1B 01 68 FC | 	wrlong	#0, _var13
0333c     2A 23 02 F1 | 	add	_var03, _var28
03340     29 23 0A F2 | 	cmp	_var03, _var27 wz
03344     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
03348                 | LR__0100
03348                 | LR__0101
03348                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03348     68 FA 05 F1 | 	add	objptr, #104
0334c     FD 22 02 FB | 	rdlong	_var03, objptr
03350     11 57 02 F6 | 	mov	_var29, _var03
03354     18 FA 05 F1 | 	add	objptr, #24
03358     FD 3E 02 FB | 	rdlong	_var17, objptr
0335c     1F 57 02 F1 | 	add	_var29, _var17
03360     01 56 86 F1 | 	sub	_var29, #1
03364     18 FA 85 F1 | 	sub	objptr, #24
03368     FD 2C 02 FB | 	rdlong	_var08, objptr
0336c     68 FA 85 F1 | 	sub	objptr, #104
03370     16 57 5A F2 | 	cmps	_var29, _var08 wcz
03374     01 40 06 16 |  if_a	mov	_var18, #1
03378     01 40 66 E6 |  if_be	neg	_var18, #1
0337c     20 59 02 F6 | 	mov	_var30, _var18
03380     20 57 02 F1 | 	add	_var29, _var18
03384     F4 CC 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
03388     93 00 A0 FD | 	call	#FCACHE_LOAD_
0338c                 | LR__0102
0338c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
0338c     FD 32 02 FB | 	rdlong	_var11, objptr
03390     11 49 02 F6 | 	mov	_var22, _var03
03394     68 FA 05 F1 | 	add	objptr, #104
03398     FD 44 02 FB | 	rdlong	_var20, objptr
0339c     22 49 82 F1 | 	sub	_var22, _var20
033a0     10 49 42 F0 | 	shr	_var22, _var02
033a4     28 FA 05 F1 | 	add	objptr, #40
033a8     FD 38 02 FB | 	rdlong	_var14, objptr
033ac     24 39 02 FD | 	qmul	_var14, _var22
033b0     18 5A 62 FD | 	getqx	_var31
033b4     02 5A 66 F0 | 	shl	_var31, #2
033b8     2D 33 02 F1 | 	add	_var11, _var31
033bc     2F 5D 02 F6 | 	mov	_var32, arg01
033c0     03 5C 06 F5 | 	and	_var32, #3
033c4     2E 33 02 F1 | 	add	_var11, _var32
033c8                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
033c8     0C 32 66 F0 | 	shl	_var11, #12
033cc     02 32 06 F1 | 	add	_var11, #2
033d0     2F 49 02 F6 | 	mov	_var22, arg01
033d4     30 48 06 F5 | 	and	_var22, #48
033d8     02 48 46 F0 | 	shr	_var22, #2
033dc     24 33 02 F1 | 	add	_var11, _var22
033e0     74 FA 85 F1 | 	sub	objptr, #116
033e4     FD 44 02 FB | 	rdlong	_var20, objptr
033e8     1C FA 85 F1 | 	sub	objptr, #28
033ec     11 4D 02 F6 | 	mov	_var24, _var03
033f0     02 4C 66 F0 | 	shl	_var24, #2
033f4     26 45 02 F1 | 	add	_var20, _var24
033f8     22 33 62 FC | 	wrlong	_var11, _var20
033fc     2C 23 02 F1 | 	add	_var03, _var30
03400     2B 23 0A F2 | 	cmp	_var03, _var29 wz
03404     84 FF 9F 5D |  if_ne	jmp	#LR__0102
03408                 | LR__0103
03408                 | LR__0104
03408                 | _hng030rm_spin2_makedl_ret
03408     2D 00 64 FD | 	ret
0340c                 | 
0340c                 | '       
0340c                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
0340c                 | ' 
0340c                 | ' pub start(mode,base):result
0340c                 | _hng030rm_spin2_start
0340c     02 5A 05 F6 | 	mov	COUNT_, #2
03410     B0 00 A0 FD | 	call	#pushregs_
03414     2F 6D 02 F6 | 	mov	local01, arg01
03418                 | ' 
03418                 | ' ' initialize pointers and variables
03418                 | ' 
03418                 | ' border_ptr:=@bordercolor
03418     2C FA 05 F1 | 	add	objptr, #44
0341c     FD 6E 02 F6 | 	mov	local02, objptr
03420     24 FA 85 F1 | 	sub	objptr, #36
03424     FD 6E 62 FC | 	wrlong	local02, objptr
03428                 | ' font_ptr:=@st_font
03428     08 00 00 FF 
0342c     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
03430     04 FA 85 F1 | 	sub	objptr, #4
03434     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03438                 | ' hdmibase:=base
03438     20 FA 05 F1 | 	add	objptr, #32
0343c     FD 60 62 FC | 	wrlong	arg02, objptr
03440     24 FA 85 F1 | 	sub	objptr, #36
03444                 | ' p1:=@putpixel1
03444     FD 5E 02 F6 | 	mov	arg01, objptr
03448     05 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
0344c     08 00 00 FF 
03450     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
03454     7C 2E B0 FD | 	call	#__system___make_methodptr
03458     DC FA 05 F1 | 	add	objptr, #220
0345c     FD 18 62 FC | 	wrlong	result1, objptr
03460     DC FA 85 F1 | 	sub	objptr, #220
03464                 | ' p2:=@putpixel2
03464     FD 5E 02 F6 | 	mov	arg01, objptr
03468     06 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0346c     64 2E B0 FD | 	call	#__system___make_methodptr
03470     E0 FA 05 F1 | 	add	objptr, #224
03474     FD 18 62 FC | 	wrlong	result1, objptr
03478     E0 FA 85 F1 | 	sub	objptr, #224
0347c                 | ' p4:=@putpixel4
0347c     FD 5E 02 F6 | 	mov	arg01, objptr
03480     07 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
03484     4C 2E B0 FD | 	call	#__system___make_methodptr
03488     E4 FA 05 F1 | 	add	objptr, #228
0348c     FD 18 62 FC | 	wrlong	result1, objptr
03490     E4 FA 85 F1 | 	sub	objptr, #228
03494                 | ' p8:=@putpixel8
03494     FD 5E 02 F6 | 	mov	arg01, objptr
03498     08 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
0349c     34 2E B0 FD | 	call	#__system___make_methodptr
034a0     E8 FA 05 F1 | 	add	objptr, #232
034a4     FD 18 62 FC | 	wrlong	result1, objptr
034a8     E8 FA 85 F1 | 	sub	objptr, #232
034ac                 | ' 
034ac                 | ' 
034ac                 | ' ' the mode has to be set here to enable computing the buffer length
034ac                 | ' 
034ac                 | ' setmode(mode)
034ac     36 5F 02 F6 | 	mov	arg01, local01
034b0     80 F5 BF FD | 	call	#_hng030rm_spin2_setmode
034b4                 | ' 
034b4                 | ' vblank_ptr:=@vblank
034b4     40 FA 05 F1 | 	add	objptr, #64
034b8     FD 6E 02 F6 | 	mov	local02, objptr
034bc     34 FA 85 F1 | 	sub	objptr, #52
034c0     FD 6E 62 FC | 	wrlong	local02, objptr
034c4                 | ' cursor_ptr:=@cursor_x
034c4     28 FA 05 F1 | 	add	objptr, #40
034c8     FD 6E 02 F6 | 	mov	local02, objptr
034cc     24 FA 85 F1 | 	sub	objptr, #36
034d0     FD 6E 62 FC | 	wrlong	local02, objptr
034d4                 | ' 
034d4                 | ' fontnum_ptr:=@fontnum
034d4     88 FA 05 F1 | 	add	objptr, #136
034d8     FD 6E 02 F6 | 	mov	local02, objptr
034dc     78 FA 85 F1 | 	sub	objptr, #120
034e0     FD 6E 62 FC | 	wrlong	local02, objptr
034e4                 | ' 
034e4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
034e4     78 FA 05 F1 | 	add	objptr, #120
034e8     FD 00 68 FC | 	wrlong	#0, objptr
034ec                 | ' bytemove(@colors,@vgacolors,16)
034ec     1C FA 05 F1 | 	add	objptr, #28
034f0     FD 5E 02 F6 | 	mov	arg01, objptr
034f4     B4 FA 85 F1 | 	sub	objptr, #180
034f8     0F 00 00 FF 
034fc     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
03500     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03504     0F 00 00 FF 
03508     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
0350c     10 62 06 F6 | 	mov	arg03, #16
03510     90 2C B0 FD | 	call	#__system____builtin_memmove
03514                 | ' 
03514                 | ' ' initialize a cursor
03514                 | ' 
03514                 | ' cursor_x:=0
03514     34 FA 05 F1 | 	add	objptr, #52
03518     FD 00 48 FC | 	wrbyte	#0, objptr
0351c                 | ' cursor_y:=0
0351c     01 FA 05 F1 | 	add	objptr, #1
03520     FD 00 48 FC | 	wrbyte	#0, objptr
03524                 | ' cursor_sh:=14
03524     01 FA 05 F1 | 	add	objptr, #1
03528     FD 1C 48 FC | 	wrbyte	#14, objptr
0352c     36 FA 85 F1 | 	sub	objptr, #54
03530                 | ' 
03530                 | ' 
03530                 | ' ' start the cog
03530                 | ' 
03530                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
03530     0F 00 00 FF 
03534     68 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
03538     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0353c     0F 00 00 FF 
03540     68 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
03544     FD 62 02 F6 | 	mov	arg03, objptr
03548     10 5E 06 F6 | 	mov	arg01, #16
0354c     28 62 62 FD | 	setq	arg03
03550     30 5F F2 FC | 	coginit	arg01, arg02 wc
03554     01 5E 66 C6 |  if_b	neg	arg01, #1
03558     2F 19 02 F6 | 	mov	result1, arg01
0355c     28 FA 05 F1 | 	add	objptr, #40
03560     FD 18 62 FC | 	wrlong	result1, objptr
03564     28 FA 85 F1 | 	sub	objptr, #40
03568                 | ' waitms(20)
03568     14 5E 06 F6 | 	mov	arg01, #20
0356c     70 2F B0 FD | 	call	#__system___waitms
03570                 | ' 
03570                 | ' ' clear the screen and set the colors to green on black
03570                 | ' 
03570                 | ' cls(c_green,c_black)
03570     C7 5E 06 F6 | 	mov	arg01, #199
03574     00 60 06 F6 | 	mov	arg02, #0
03578     C8 EC BF FD | 	call	#_hng030rm_spin2_cls
0357c                 | ' setbordercolor(0,0,128)
0357c     00 5E 06 F6 | 	mov	arg01, #0
03580     00 60 06 F6 | 	mov	arg02, #0
03584     80 62 06 F6 | 	mov	arg03, #128
03588     94 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
0358c                 | ' setwritecolors(c_green,c_black)
0358c                 | ' 
0358c                 | ' 
0358c                 | ' write_color:=ff
0358c     38 FA 05 F1 | 	add	objptr, #56
03590     FD 8E 69 FC | 	wrlong	#199, objptr
03594                 | ' write_background:=bb
03594     04 FA 05 F1 | 	add	objptr, #4
03598     FD 00 68 FC | 	wrlong	#0, objptr
0359c                 | ' 
0359c                 | ' return cog
0359c     14 FA 85 F1 | 	sub	objptr, #20
035a0     FD 18 02 FB | 	rdlong	result1, objptr
035a4     28 FA 85 F1 | 	sub	objptr, #40
035a8     AF F0 03 F6 | 	mov	ptra, fp
035ac     BA 00 A0 FD | 	call	#popregs_
035b0                 | _hng030rm_spin2_start_ret
035b0     2D 00 64 FD | 	ret
035b4                 | 
035b4                 | ' 'this is the object and not a program
035b4                 | ' 
035b4                 | ' pub start() :cog
035b4                 | _retrocog_spin2_start
035b4     02 5A 05 F6 | 	mov	COUNT_, #2
035b8     B0 00 A0 FD | 	call	#pushregs_
035bc                 | ' 
035bc                 | ' cog:=cogspin(16,serialcog(),@serialstack)
035bc     FD 6C 02 F6 | 	mov	local01, objptr
035c0     01 00 00 FF 
035c4     40 FB 05 F1 | 	add	objptr, ##832
035c8     FD 6E 02 F6 | 	mov	local02, objptr
035cc     37 6D 62 FC | 	wrlong	local01, local02
035d0     04 6E 06 F1 | 	add	local02, #4
035d4     37 13 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
035d8     FD 62 02 F6 | 	mov	arg03, objptr
035dc     01 00 00 FF 
035e0     40 FB 85 F1 | 	sub	objptr, ##832
035e4     10 5E 06 F6 | 	mov	arg01, #16
035e8     28 62 62 FD | 	setq	arg03
035ec     FA 5E F2 FC | 	coginit	arg01, entryptr__ wc
035f0     01 5E 66 C6 |  if_b	neg	arg01, #1
035f4     2F 19 02 F6 | 	mov	result1, arg01
035f8                 | ' return cog
035f8     AF F0 03 F6 | 	mov	ptra, fp
035fc     BA 00 A0 FD | 	call	#popregs_
03600                 | _retrocog_spin2_start_ret
03600     2D 00 64 FD | 	ret
03604                 | 
03604                 | ' 
03604                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03604                 | _retrocog_spin2_serialcog
03604     0C 5A 05 F6 | 	mov	COUNT_, #12
03608     B0 00 A0 FD | 	call	#pushregs_
0360c                 | ' 
0360c                 | ' 'start serial and midi
0360c                 | ' 
0360c                 | ' serial_start(rxpin, txpin, baudrate)
0360c     20 5E 06 F6 | 	mov	arg01, #32
03610     21 60 06 F6 | 	mov	arg02, #33
03614     A6 0E 00 FF 
03618     00 62 06 F6 | 	mov	arg03, ##1920000
0361c     C0 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03620                 | ' serial_start(midiin,midiout,mbaudrate)
03620     1D 5E 06 F6 | 	mov	arg01, #29
03624     1E 60 06 F6 | 	mov	arg02, #30
03628     3D 00 00 FF 
0362c     12 62 06 F6 | 	mov	arg03, ##31250
03630     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03634                 | ' serial_start(srxpin,stxpin,sbaudrate)
03634     3E 6C 06 F6 | 	mov	local01, #62
03638     42 0F 00 FF 
0363c     80 6E 06 F6 | 	mov	local02, ##2000000
03640     3F 5E 06 F6 | 	mov	arg01, #63
03644     3E 60 06 F6 | 	mov	arg02, #62
03648     42 0F 00 FF 
0364c     80 62 06 F6 | 	mov	arg03, ##2000000
03650     8C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03654                 | ' 
03654                 | ' mb:=(-1)
03654     01 70 66 F6 | 	neg	local03, #1
03658                 | ' b:=(-1)
03658     01 72 66 F6 | 	neg	local04, #1
0365c                 | ' 
0365c                 | ' mousefront:=0
0365c     00 74 06 F6 | 	mov	local05, #0
03660     08 FA 05 F1 | 	add	objptr, #8
03664     FD 00 68 FC | 	wrlong	#0, objptr
03668                 | ' mousetail:=0
03668     04 FA 05 F1 | 	add	objptr, #4
0366c     FD 00 68 FC | 	wrlong	#0, objptr
03670     0C FA 85 F1 | 	sub	objptr, #12
03674                 | ' kbdfront:=0
03674     FD 00 68 FC | 	wrlong	#0, objptr
03678                 | ' kbdtail:=0
03678     04 FA 05 F1 | 	add	objptr, #4
0367c     FD 00 68 FC | 	wrlong	#0, objptr
03680                 | ' midifront:=0
03680     0C FA 05 F1 | 	add	objptr, #12
03684     FD 00 68 FC | 	wrlong	#0, objptr
03688                 | ' miditail:=0
03688     04 FA 05 F1 | 	add	objptr, #4
0368c     FD 00 68 FC | 	wrlong	#0, objptr
03690                 | ' serialfront:=0
03690     04 FA 05 F1 | 	add	objptr, #4
03694     FD 00 68 FC | 	wrlong	#0, objptr
03698                 | ' serialtail:=0
03698     04 FA 05 F1 | 	add	objptr, #4
0369c     FD 00 68 FC | 	wrlong	#0, objptr
036a0                 | ' long[$30]:=0
036a0     30 00 6C FC | 	wrlong	#0, #48
036a4                 | ' long[$34]:=0
036a4     34 00 6C FC | 	wrlong	#0, #52
036a8                 | ' long[$38]:=0
036a8     38 00 6C FC | 	wrlong	#0, #56
036ac     1C FA 85 F1 | 	sub	objptr, #28
036b0                 | ' long[$3C]:=0
036b0     3C 00 6C FC | 	wrlong	#0, #60
036b4                 | ' 
036b4                 | ' repeat
036b4                 | LR__0105
036b4                 | ' 
036b4                 | ' '  repeat 
036b4                 | '   rr:=rxcheck(rxpin)
036b4     20 5E 06 F6 | 	mov	arg01, #32
036b8     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
036bc     0C 77 02 F6 | 	mov	local06, result1
036c0                 | '   mrr:=rxcheck(midiin)
036c0     1D 5E 06 F6 | 	mov	arg01, #29
036c4     94 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
036c8     0C 79 02 F6 | 	mov	local07, result1
036cc                 | '   srr:=rxcheck(srxpin)
036cc     3F 5E 06 F6 | 	mov	arg01, #63
036d0     88 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
036d4     0C 75 02 F6 | 	mov	local05, result1
036d8     3A 7B 02 F6 | 	mov	local08, local05
036dc                 | ' 
036dc                 | ' '  until rr>=0 || mrr>=0  || srr>=0
036dc                 | ' 
036dc                 | '   
036dc                 | ' ' midi. Must be >= $80 for a command
036dc                 | ' '$80-$8F - 3 bytes note off. note, velocity
036dc                 | ' '$90-$9F - 3 bytes note on, note, velocity
036dc                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
036dc                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
036dc                 | ' '$C0-$CF - 2 bytes program change
036dc                 | ' '$D0-$DF - 2 bytes mono aftertouch
036dc                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
036dc                 | ' '$F0-$FF - 1 byte
036dc                 | '   
036dc                 | '   if srr>=0
036dc     00 7A 5E F2 | 	cmps	local08, #0 wcz
036e0     78 00 90 CD |  if_b	jmp	#LR__0107
036e4                 | '   
036e4                 | '     if serialfront<>((serialtail-1) //32)
036e4     1C FA 05 F1 | 	add	objptr, #28
036e8     FD 6C 02 FB | 	rdlong	local01, objptr
036ec     36 75 02 F6 | 	mov	local05, local01
036f0     01 74 86 F1 | 	sub	local05, #1
036f4     3A 6F 52 F6 | 	abs	local02, local05 wc
036f8     1F 6E 06 F5 | 	and	local02, #31
036fc     37 6F 62 C6 |  if_b	neg	local02, local02
03700     04 FA 85 F1 | 	sub	objptr, #4
03704     FD 7C 02 FB | 	rdlong	local09, objptr
03708     18 FA 85 F1 | 	sub	objptr, #24
0370c     3E 7F 02 F6 | 	mov	local10, local09
03710     37 7F 0A F2 | 	cmp	local10, local02 wz
03714     44 00 90 AD |  if_e	jmp	#LR__0106
03718                 | '       serialbuf[serialfront]:=srr
03718     18 FA 05 F1 | 	add	objptr, #24
0371c     FD 74 02 FB | 	rdlong	local05, objptr
03720     01 00 00 FF 
03724     08 FB 05 F1 | 	add	objptr, ##776
03728     FD 74 02 F1 | 	add	local05, objptr
0372c     3A 7B 42 FC | 	wrbyte	local08, local05
03730                 | '       serialfront+=1
03730     01 00 00 FF 
03734     08 FB 85 F1 | 	sub	objptr, ##776
03738     FD 6E 02 FB | 	rdlong	local02, objptr
0373c     01 6E 06 F1 | 	add	local02, #1
03740     FD 6E 62 FC | 	wrlong	local02, objptr
03744                 | '       serialfront:=serialfront // 32
03744     37 6D 02 F6 | 	mov	local01, local02
03748     36 75 52 F6 | 	abs	local05, local01 wc
0374c     1F 74 06 F5 | 	and	local05, #31
03750     3A 75 62 C6 |  if_b	neg	local05, local05
03754     FD 74 62 FC | 	wrlong	local05, objptr
03758     18 FA 85 F1 | 	sub	objptr, #24
0375c                 | LR__0106
0375c                 | LR__0107
0375c                 | '     
0375c                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
0375c     80 78 5E F2 | 	cmps	local07, #128 wcz
03760     08 00 90 CD |  if_b	jmp	#LR__0108
03764     BF 78 5E F2 | 	cmps	local07, #191 wcz
03768     10 00 90 ED |  if_be	jmp	#LR__0109
0376c                 | LR__0108
0376c     E0 78 5E F2 | 	cmps	local07, #224 wcz
03770     18 00 90 CD |  if_b	jmp	#LR__0110
03774     EF 78 5E F2 | 	cmps	local07, #239 wcz
03778     10 00 90 1D |  if_a	jmp	#LR__0110
0377c                 | LR__0109
0377c                 | '     mb:=2
0377c     02 70 06 F6 | 	mov	local03, #2
03780                 | '     midireport:=mrr<<24
03780     3C 75 02 F6 | 	mov	local05, local07
03784     18 74 66 F0 | 	shl	local05, #24
03788     3A 81 02 F6 | 	mov	local11, local05
0378c                 | LR__0110
0378c                 | ' 
0378c                 | '   if (mrr>=$C0) && (mrr<=$DF)
0378c     C0 78 5E F2 | 	cmps	local07, #192 wcz
03790     18 00 90 CD |  if_b	jmp	#LR__0111
03794     DF 78 5E F2 | 	cmps	local07, #223 wcz
03798     10 00 90 1D |  if_a	jmp	#LR__0111
0379c                 | '     mb:=1
0379c     01 70 06 F6 | 	mov	local03, #1
037a0                 | '     midireport:=mrr<<24
037a0     3C 75 02 F6 | 	mov	local05, local07
037a4     18 74 66 F0 | 	shl	local05, #24
037a8     3A 81 02 F6 | 	mov	local11, local05
037ac                 | LR__0111
037ac                 | '   
037ac                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
037ac     F0 78 5E F2 | 	cmps	local07, #240 wcz
037b0                 | '     mb:=4
037b0     04 70 06 36 |  if_ae	mov	local03, #4
037b4                 | '     midireport:=mrr<<24  
037b4     3C 81 02 36 |  if_ae	mov	local11, local07
037b8     18 80 66 30 |  if_ae	shl	local11, #24
037bc                 | '   
037bc                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
037bc     80 78 5E F2 | 	cmps	local07, #128 wcz
037c0     44 00 90 3D |  if_ae	jmp	#LR__0113
037c4     00 70 5E F2 | 	cmps	local03, #0 wcz
037c8     3C 00 90 ED |  if_be	jmp	#LR__0113
037cc     00 78 5E F2 | 	cmps	local07, #0 wcz
037d0     34 00 90 CD |  if_b	jmp	#LR__0113
037d4                 | '     
037d4                 | '     mb--
037d4     38 75 02 F6 | 	mov	local05, local03
037d8     38 6D 02 F6 | 	mov	local01, local03
037dc     01 6C 86 F1 | 	sub	local01, #1
037e0     36 71 02 F6 | 	mov	local03, local01
037e4                 | '     if mb<3
037e4     03 70 5E F2 | 	cmps	local03, #3 wcz
037e8     1C 00 90 3D |  if_ae	jmp	#LR__0112
037ec                 | '       midireport+=mrr<<(mb<<3)
037ec     40 75 02 F6 | 	mov	local05, local11
037f0     3C 6D 02 F6 | 	mov	local01, local07
037f4     38 6F 02 F6 | 	mov	local02, local03
037f8     03 6E 66 F0 | 	shl	local02, #3
037fc     37 6D 62 F0 | 	shl	local01, local02
03800     36 75 02 F1 | 	add	local05, local01
03804     3A 81 02 F6 | 	mov	local11, local05
03808                 | LR__0112
03808                 | LR__0113
03808                 | '   
03808                 | '   if mb==0
03808     00 70 0E F2 | 	cmp	local03, #0 wz
0380c     80 00 90 5D |  if_ne	jmp	#LR__0115
03810                 | '     
03810                 | '     if midifront<>((miditail-1) //32)
03810     14 FA 05 F1 | 	add	objptr, #20
03814     FD 6C 02 FB | 	rdlong	local01, objptr
03818     36 75 02 F6 | 	mov	local05, local01
0381c     01 74 86 F1 | 	sub	local05, #1
03820     3A 6F 52 F6 | 	abs	local02, local05 wc
03824     1F 6E 06 F5 | 	and	local02, #31
03828     37 6F 62 C6 |  if_b	neg	local02, local02
0382c     04 FA 85 F1 | 	sub	objptr, #4
03830     FD 7C 02 FB | 	rdlong	local09, objptr
03834     10 FA 85 F1 | 	sub	objptr, #16
03838     3E 7F 02 F6 | 	mov	local10, local09
0383c     37 7F 0A F2 | 	cmp	local10, local02 wz
03840     48 00 90 AD |  if_e	jmp	#LR__0114
03844                 | '       midibuf[midifront]:=midireport
03844     10 FA 05 F1 | 	add	objptr, #16
03848     FD 74 02 FB | 	rdlong	local05, objptr
0384c     02 74 66 F0 | 	shl	local05, #2
03850     01 00 00 FF 
03854     90 FA 05 F1 | 	add	objptr, ##656
03858     FD 74 02 F1 | 	add	local05, objptr
0385c     3A 81 62 FC | 	wrlong	local11, local05
03860                 | '       midifront+=1
03860     01 00 00 FF 
03864     90 FA 85 F1 | 	sub	objptr, ##656
03868     FD 6E 02 FB | 	rdlong	local02, objptr
0386c     01 6E 06 F1 | 	add	local02, #1
03870     FD 6E 62 FC | 	wrlong	local02, objptr
03874                 | '       midifront:=midifront // 32
03874     37 6D 02 F6 | 	mov	local01, local02
03878     36 75 52 F6 | 	abs	local05, local01 wc
0387c     1F 74 06 F5 | 	and	local05, #31
03880     3A 75 62 C6 |  if_b	neg	local05, local05
03884     FD 74 62 FC | 	wrlong	local05, objptr
03888     10 FA 85 F1 | 	sub	objptr, #16
0388c                 | LR__0114
0388c                 | '     mb:=(-1)
0388c     01 70 66 F6 | 	neg	local03, #1
03890                 | LR__0115
03890                 | ' 
03890                 | ' 'Keyboard and mouse
03890                 | ' 
03890                 | '   if (rr>=$80) && (rr<>$FF)
03890     80 76 5E F2 | 	cmps	local06, #128 wcz
03894     18 00 90 CD |  if_b	jmp	#LR__0116
03898     FF 76 0E F2 | 	cmp	local06, #255 wz
0389c     10 00 90 AD |  if_e	jmp	#LR__0116
038a0                 | '     b:=3
038a0     03 72 06 F6 | 	mov	local04, #3
038a4                 | '     kbmreport:=rr<<24
038a4     3B 75 02 F6 | 	mov	local05, local06
038a8     18 74 66 F0 | 	shl	local05, #24
038ac     3A 83 02 F6 | 	mov	local12, local05
038b0                 | LR__0116
038b0                 | '   
038b0                 | '   if (rr<$80) && (b>0) && (rr>=0)
038b0     80 76 5E F2 | 	cmps	local06, #128 wcz
038b4     30 00 90 3D |  if_ae	jmp	#LR__0117
038b8     00 72 5E F2 | 	cmps	local04, #0 wcz
038bc     28 00 90 ED |  if_be	jmp	#LR__0117
038c0     00 76 5E F2 | 	cmps	local06, #0 wcz
038c4     20 00 90 CD |  if_b	jmp	#LR__0117
038c8                 | '     b--
038c8     01 72 86 F1 | 	sub	local04, #1
038cc                 | '     kbmreport+=rr<<(b<<3)  
038cc     41 75 02 F6 | 	mov	local05, local12
038d0     3B 6D 02 F6 | 	mov	local01, local06
038d4     39 6F 02 F6 | 	mov	local02, local04
038d8     03 6E 66 F0 | 	shl	local02, #3
038dc     37 6D 62 F0 | 	shl	local01, local02
038e0     36 75 02 F1 | 	add	local05, local01
038e4     3A 83 02 F6 | 	mov	local12, local05
038e8                 | LR__0117
038e8                 | '   
038e8                 | '   if (rr==$FF)
038e8     FF 76 0E F2 | 	cmp	local06, #255 wz
038ec                 | '     b:=0   
038ec     00 72 06 A6 |  if_e	mov	local04, #0
038f0                 | ' 
038f0                 | '   if b==0  
038f0     00 72 0E F2 | 	cmp	local04, #0 wz
038f4     0C 01 90 5D |  if_ne	jmp	#LR__0122
038f8                 | '  
038f8                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
038f8     00 00 40 FF 
038fc     00 82 1E F2 | 	cmp	local12, ##-2147483648 wcz
03900     80 00 90 CD |  if_b	jmp	#LR__0119
03904     00 80 43 FF 
03908     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
0390c     74 00 90 3D |  if_ae	jmp	#LR__0119
03910                 | '       if mousefront<>((mousetail-1) //128)
03910     0C FA 05 F1 | 	add	objptr, #12
03914     FD 6C 02 FB | 	rdlong	local01, objptr
03918     36 75 02 F6 | 	mov	local05, local01
0391c     01 74 86 F1 | 	sub	local05, #1
03920     3A 6F 52 F6 | 	abs	local02, local05 wc
03924     7F 6E 06 F5 | 	and	local02, #127
03928     37 6F 62 C6 |  if_b	neg	local02, local02
0392c     04 FA 85 F1 | 	sub	objptr, #4
03930     FD 7C 02 FB | 	rdlong	local09, objptr
03934     08 FA 85 F1 | 	sub	objptr, #8
03938     3E 7F 02 F6 | 	mov	local10, local09
0393c     37 7F 0A F2 | 	cmp	local10, local02 wz
03940     40 00 90 AD |  if_e	jmp	#LR__0118
03944                 | '         mousebuf[mousefront]:=kbmreport
03944     08 FA 05 F1 | 	add	objptr, #8
03948     FD 74 02 FB | 	rdlong	local05, objptr
0394c     02 74 66 F0 | 	shl	local05, #2
03950     98 FA 05 F1 | 	add	objptr, #152
03954     FD 74 02 F1 | 	add	local05, objptr
03958     3A 83 62 FC | 	wrlong	local12, local05
0395c                 | '         mousefront+=1
0395c     98 FA 85 F1 | 	sub	objptr, #152
03960     FD 6E 02 FB | 	rdlong	local02, objptr
03964     01 6E 06 F1 | 	add	local02, #1
03968     FD 6E 62 FC | 	wrlong	local02, objptr
0396c                 | '         mousefront:=mousefront // 128
0396c     37 6D 02 F6 | 	mov	local01, local02
03970     36 75 52 F6 | 	abs	local05, local01 wc
03974     7F 74 06 F5 | 	and	local05, #127
03978     3A 75 62 C6 |  if_b	neg	local05, local05
0397c     FD 74 62 FC | 	wrlong	local05, objptr
03980     08 FA 85 F1 | 	sub	objptr, #8
03984                 | LR__0118
03984                 | LR__0119
03984                 | '     b:=(-1)
03984     01 72 66 F6 | 	neg	local04, #1
03988                 | ' 
03988                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03988     00 80 43 FF 
0398c     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
03990     6C 00 90 CD |  if_b	jmp	#LR__0121
03994     00 00 45 FF 
03998     00 82 1E F2 | 	cmp	local12, ##-1979711488 wcz
0399c     60 00 90 3D |  if_ae	jmp	#LR__0121
039a0                 | '       if kbdfront<>((kbdtail-1) //32)
039a0     04 FA 05 F1 | 	add	objptr, #4
039a4     FD 6C 02 FB | 	rdlong	local01, objptr
039a8     04 FA 85 F1 | 	sub	objptr, #4
039ac     36 75 02 F6 | 	mov	local05, local01
039b0     01 74 86 F1 | 	sub	local05, #1
039b4     3A 6F 52 F6 | 	abs	local02, local05 wc
039b8     1F 6E 06 F5 | 	and	local02, #31
039bc     37 6F 62 C6 |  if_b	neg	local02, local02
039c0     FD 7E 02 FB | 	rdlong	local10, objptr
039c4     37 7F 0A F2 | 	cmp	local10, local02 wz
039c8     34 00 90 AD |  if_e	jmp	#LR__0120
039cc                 | '         kbdbuf[kbdfront]:=kbmreport
039cc     FD 74 02 FB | 	rdlong	local05, objptr
039d0     02 74 66 F0 | 	shl	local05, #2
039d4     20 FA 05 F1 | 	add	objptr, #32
039d8     FD 74 02 F1 | 	add	local05, objptr
039dc     3A 83 62 FC | 	wrlong	local12, local05
039e0                 | '         kbdfront+=1
039e0     20 FA 85 F1 | 	sub	objptr, #32
039e4     FD 6C 02 FB | 	rdlong	local01, objptr
039e8     01 6C 06 F1 | 	add	local01, #1
039ec     FD 6C 62 FC | 	wrlong	local01, objptr
039f0                 | '         kbdfront:=kbdfront // 32
039f0     36 75 52 F6 | 	abs	local05, local01 wc
039f4     1F 74 06 F5 | 	and	local05, #31
039f8     3A 75 62 C6 |  if_b	neg	local05, local05
039fc     FD 74 62 FC | 	wrlong	local05, objptr
03a00                 | LR__0120
03a00                 | LR__0121
03a00                 | '     b:=(-1)
03a00     01 72 66 F6 | 	neg	local04, #1
03a04                 | LR__0122
03a04                 | ' 
03a04                 | ' 
03a04                 | '   if long[$30]==0
03a04     30 74 0E FB | 	rdlong	local05, #48 wz
03a08     64 00 90 5D |  if_ne	jmp	#LR__0124
03a0c                 | '     if kbdfront<>kbdtail
03a0c     FD 74 02 FB | 	rdlong	local05, objptr
03a10     04 FA 05 F1 | 	add	objptr, #4
03a14     FD 6E 02 FB | 	rdlong	local02, objptr
03a18     04 FA 85 F1 | 	sub	objptr, #4
03a1c     37 6D 02 F6 | 	mov	local01, local02
03a20     36 75 0A F2 | 	cmp	local05, local01 wz
03a24     48 00 90 AD |  if_e	jmp	#LR__0123
03a28                 | '       long[$30]:=kbdbuf[kbdtail]
03a28     04 FA 05 F1 | 	add	objptr, #4
03a2c     FD 74 02 FB | 	rdlong	local05, objptr
03a30     02 74 66 F0 | 	shl	local05, #2
03a34     1C FA 05 F1 | 	add	objptr, #28
03a38     FD 74 02 F1 | 	add	local05, objptr
03a3c     3A 7F 02 FB | 	rdlong	local10, local05
03a40     30 7E 66 FC | 	wrlong	local10, #48
03a44                 | '       kbdtail++
03a44     1C FA 85 F1 | 	sub	objptr, #28
03a48     FD 7E 02 FB | 	rdlong	local10, objptr
03a4c     3F 6F 02 F6 | 	mov	local02, local10
03a50     01 6E 06 F1 | 	add	local02, #1
03a54     FD 6E 62 FC | 	wrlong	local02, objptr
03a58                 | '       kbdtail:= kbdtail // 32
03a58     37 6D 02 F6 | 	mov	local01, local02
03a5c     36 75 52 F6 | 	abs	local05, local01 wc
03a60     1F 74 06 F5 | 	and	local05, #31
03a64     3A 75 62 C6 |  if_b	neg	local05, local05
03a68     FD 74 62 FC | 	wrlong	local05, objptr
03a6c     04 FA 85 F1 | 	sub	objptr, #4
03a70                 | LR__0123
03a70                 | LR__0124
03a70                 | '       
03a70                 | '   if long[$34]==0
03a70     34 74 0E FB | 	rdlong	local05, #52 wz
03a74     68 00 90 5D |  if_ne	jmp	#LR__0126
03a78                 | '     if mousefront<>mousetail
03a78     08 FA 05 F1 | 	add	objptr, #8
03a7c     FD 6C 02 FB | 	rdlong	local01, objptr
03a80     04 FA 05 F1 | 	add	objptr, #4
03a84     FD 7E 02 FB | 	rdlong	local10, objptr
03a88     0C FA 85 F1 | 	sub	objptr, #12
03a8c     3F 6F 02 F6 | 	mov	local02, local10
03a90     37 6D 0A F2 | 	cmp	local01, local02 wz
03a94     48 00 90 AD |  if_e	jmp	#LR__0125
03a98                 | '       long[$34]:=mousebuf[mousetail]
03a98     0C FA 05 F1 | 	add	objptr, #12
03a9c     FD 74 02 FB | 	rdlong	local05, objptr
03aa0     02 74 66 F0 | 	shl	local05, #2
03aa4     94 FA 05 F1 | 	add	objptr, #148
03aa8     FD 74 02 F1 | 	add	local05, objptr
03aac     3A 7F 02 FB | 	rdlong	local10, local05
03ab0     34 7E 66 FC | 	wrlong	local10, #52
03ab4                 | '       mousetail++
03ab4     94 FA 85 F1 | 	sub	objptr, #148
03ab8     FD 7E 02 FB | 	rdlong	local10, objptr
03abc     3F 6F 02 F6 | 	mov	local02, local10
03ac0     01 6E 06 F1 | 	add	local02, #1
03ac4     FD 6E 62 FC | 	wrlong	local02, objptr
03ac8                 | '       mousetail:= mousetail // 128
03ac8     37 6D 02 F6 | 	mov	local01, local02
03acc     36 75 52 F6 | 	abs	local05, local01 wc
03ad0     7F 74 06 F5 | 	and	local05, #127
03ad4     3A 75 62 C6 |  if_b	neg	local05, local05
03ad8     FD 74 62 FC | 	wrlong	local05, objptr
03adc     0C FA 85 F1 | 	sub	objptr, #12
03ae0                 | LR__0125
03ae0                 | LR__0126
03ae0                 | ' 
03ae0                 | '       
03ae0                 | '   if long[$38]==0
03ae0     38 74 0E FB | 	rdlong	local05, #56 wz
03ae4     70 00 90 5D |  if_ne	jmp	#LR__0128
03ae8                 | '     if midifront<>miditail
03ae8     10 FA 05 F1 | 	add	objptr, #16
03aec     FD 6C 02 FB | 	rdlong	local01, objptr
03af0     04 FA 05 F1 | 	add	objptr, #4
03af4     FD 7E 02 FB | 	rdlong	local10, objptr
03af8     14 FA 85 F1 | 	sub	objptr, #20
03afc     3F 6F 02 F6 | 	mov	local02, local10
03b00     37 6D 0A F2 | 	cmp	local01, local02 wz
03b04     50 00 90 AD |  if_e	jmp	#LR__0127
03b08                 | '       long[$38]:=midibuf[miditail]
03b08     14 FA 05 F1 | 	add	objptr, #20
03b0c     FD 74 02 FB | 	rdlong	local05, objptr
03b10     02 74 66 F0 | 	shl	local05, #2
03b14     01 00 00 FF 
03b18     8C FA 05 F1 | 	add	objptr, ##652
03b1c     FD 74 02 F1 | 	add	local05, objptr
03b20     3A 7F 02 FB | 	rdlong	local10, local05
03b24     38 7E 66 FC | 	wrlong	local10, #56
03b28                 | '       miditail++
03b28     01 00 00 FF 
03b2c     8C FA 85 F1 | 	sub	objptr, ##652
03b30     FD 7E 02 FB | 	rdlong	local10, objptr
03b34     3F 6F 02 F6 | 	mov	local02, local10
03b38     01 6E 06 F1 | 	add	local02, #1
03b3c     FD 6E 62 FC | 	wrlong	local02, objptr
03b40                 | '       miditail:= miditail // 32
03b40     37 6D 02 F6 | 	mov	local01, local02
03b44     36 75 52 F6 | 	abs	local05, local01 wc
03b48     1F 74 06 F5 | 	and	local05, #31
03b4c     3A 75 62 C6 |  if_b	neg	local05, local05
03b50     FD 74 62 FC | 	wrlong	local05, objptr
03b54     14 FA 85 F1 | 	sub	objptr, #20
03b58                 | LR__0127
03b58                 | LR__0128
03b58                 | '       
03b58                 | '   if long[$3c]==0
03b58     3C 74 0E FB | 	rdlong	local05, #60 wz
03b5c     54 FB 9F 5D |  if_ne	jmp	#LR__0105
03b60                 | '     if serialfront<>serialtail
03b60     18 FA 05 F1 | 	add	objptr, #24
03b64     FD 6C 02 FB | 	rdlong	local01, objptr
03b68     04 FA 05 F1 | 	add	objptr, #4
03b6c     FD 7E 02 FB | 	rdlong	local10, objptr
03b70     1C FA 85 F1 | 	sub	objptr, #28
03b74     3F 6F 02 F6 | 	mov	local02, local10
03b78     37 6D 0A F2 | 	cmp	local01, local02 wz
03b7c     34 FB 9F AD |  if_e	jmp	#LR__0105
03b80                 | '       byte[$3c]:=255
03b80     3C FE 4D FC | 	wrbyte	#255, #60
03b84                 | '       byte[$3D]:=serialbuf[serialtail]
03b84     1C FA 05 F1 | 	add	objptr, #28
03b88     FD 74 02 FB | 	rdlong	local05, objptr
03b8c     01 00 00 FF 
03b90     04 FB 05 F1 | 	add	objptr, ##772
03b94     FD 74 02 F1 | 	add	local05, objptr
03b98     3A 7F C2 FA | 	rdbyte	local10, local05
03b9c     3D 7E 46 FC | 	wrbyte	local10, #61
03ba0                 | '       serialtail++
03ba0     01 00 00 FF 
03ba4     04 FB 85 F1 | 	sub	objptr, ##772
03ba8     FD 7E 02 FB | 	rdlong	local10, objptr
03bac     3F 6F 02 F6 | 	mov	local02, local10
03bb0     01 6E 06 F1 | 	add	local02, #1
03bb4     FD 6E 62 FC | 	wrlong	local02, objptr
03bb8                 | '       serialtail:= serialtail // 32
03bb8     37 6D 02 F6 | 	mov	local01, local02
03bbc     36 75 52 F6 | 	abs	local05, local01 wc
03bc0     1F 74 06 F5 | 	and	local05, #31
03bc4     3A 75 62 C6 |  if_b	neg	local05, local05
03bc8     FD 74 62 FC | 	wrlong	local05, objptr
03bcc     1C FA 85 F1 | 	sub	objptr, #28
03bd0     E0 FA 9F FD | 	jmp	#LR__0105
03bd4     AF F0 03 F6 | 	mov	ptra, fp
03bd8     BA 00 A0 FD | 	call	#popregs_
03bdc                 | _retrocog_spin2_serialcog_ret
03bdc     2D 00 64 FD | 	ret
03be0                 | 
03be0                 | '       
03be0                 | ' 
03be0                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03be0                 | ' 
03be0                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03be0                 | _retrocog_spin2_serial_start
03be0     04 5A 05 F6 | 	mov	COUNT_, #4
03be4     B0 00 A0 FD | 	call	#pushregs_
03be8     2F 6D 02 F6 | 	mov	local01, arg01
03bec     30 6F 02 F6 | 	mov	local02, arg02
03bf0                 | ' 
03bf0                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03bf0     14 5E 06 FB | 	rdlong	arg01, #20
03bf4     10 60 C6 F9 | 	decod	arg02, #16
03bf8     30 5F 02 FD | 	qmul	arg01, arg02
03bfc     19 70 62 FD | 	getqy	local03
03c00     18 72 62 FD | 	getqx	local04
03c04     28 70 62 FD | 	setq	local03
03c08     31 73 12 FD | 	qdiv	local04, arg03
03c0c     18 18 62 FD | 	getqx	result1
03c10     0C 63 02 F6 | 	mov	arg03, result1
03c14     FE FF 7F FF 
03c18     00 62 06 F5 | 	and	arg03, ##-1024
03c1c                 | ' bitmode |= 7                                                  ' set bits (8)
03c1c     07 62 46 F5 | 	or	arg03, #7
03c20                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03c20     40 6C 62 FD | 	dirl	local01
03c24     08 00 80 FF 
03c28     36 7D 08 FC | 	wrpin	##4158, local01
03c2c     36 63 12 FC | 	wxpin	arg03, local01
03c30     36 01 28 FC | 	wypin	#0, local01
03c34     41 6C 62 FD | 	dirh	local01
03c38                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03c38     40 6E 62 FD | 	dirl	local02
03c3c     37 F9 08 FC | 	wrpin	#124, local02
03c40     37 63 12 FC | 	wxpin	arg03, local02
03c44     37 01 28 FC | 	wypin	#0, local02
03c48     41 6E 62 FD | 	dirh	local02
03c4c                 | ' pinhigh(rxpin)
03c4c     59 6C 62 FD | 	drvh	local01
03c50     AF F0 03 F6 | 	mov	ptra, fp
03c54     BA 00 A0 FD | 	call	#popregs_
03c58                 | _retrocog_spin2_serial_start_ret
03c58     2D 00 64 FD | 	ret
03c5c                 | 
03c5c                 | ' 
03c5c                 | ' pub rxcheck(pin) : rxbyte | check
03c5c                 | _retrocog_spin2_rxcheck
03c5c     03 5A 05 F6 | 	mov	COUNT_, #3
03c60     B0 00 A0 FD | 	call	#pushregs_
03c64     2F 6D 02 F6 | 	mov	local01, arg01
03c68                 | ' 
03c68                 | ' '' Check for serial input
03c68                 | ' '' -- returns -1 if nothing available
03c68                 | ' 
03c68                 | '   rxbyte := -1
03c68     01 6E 66 F6 | 	neg	local02, #1
03c6c                 | '   check := pinr(pin)
03c6c     36 5F 02 F6 | 	mov	arg01, local01
03c70     4C 28 B0 FD | 	call	#__system___pinread
03c74     0C 71 0A F6 | 	mov	local03, result1 wz
03c78                 | '   if (check)
03c78                 | '     rxbyte := rdpin(pin) >> 24
03c78     00 6E 06 56 |  if_ne	mov	local02, #0
03c7c     36 6F 8A 5A |  if_ne	rdpin	local02, local01
03c80     18 6E 46 50 |  if_ne	shr	local02, #24
03c84     37 19 02 F6 | 	mov	result1, local02
03c88     AF F0 03 F6 | 	mov	ptra, fp
03c8c     BA 00 A0 FD | 	call	#popregs_
03c90                 | _retrocog_spin2_rxcheck_ret
03c90     2D 00 64 FD | 	ret
03c94                 | 
03c94                 | _trackerplayer_spin2_initModule
03c94     0B 5A 05 F6 | 	mov	COUNT_, #11
03c98     B0 00 A0 FD | 	call	#pushregs_
03c9c     30 F0 07 F1 | 	add	ptra, #48
03ca0     AF 5E 62 FC | 	wrlong	arg01, fp
03ca4     04 5E 05 F1 | 	add	fp, #4
03ca8     AF 60 62 FC | 	wrlong	arg02, fp
03cac     04 5E 85 F1 | 	sub	fp, #4
03cb0                 | ' 
03cb0                 | '   ' Set some data pointers
03cb0                 | '   magicFour      := hubPtr + 1080
03cb0     AF 6C 02 FB | 	rdlong	local01, fp
03cb4     02 00 00 FF 
03cb8     38 6C 06 F1 | 	add	local01, ##1080
03cbc     9D FA 05 F1 | 	add	objptr, #157
03cc0     FD 6C 62 FC | 	wrlong	local01, objptr
03cc4                 | '   nameStr        := hubPtr
03cc4     AF 6C 02 FB | 	rdlong	local01, fp
03cc8     97 FA 85 F1 | 	sub	objptr, #151
03ccc     FD 6C 62 FC | 	wrlong	local01, objptr
03cd0                 | '   samplesInfoLut := hubPtr + 20
03cd0     AF 6C 02 FB | 	rdlong	local01, fp
03cd4     14 6C 06 F1 | 	add	local01, #20
03cd8     04 FA 05 F1 | 	add	objptr, #4
03cdc     FD 6C 62 FC | 	wrlong	local01, objptr
03ce0                 | ' 
03ce0                 | '   ' Is this a 31 sample module?
03ce0                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03ce0     93 FA 05 F1 | 	add	objptr, #147
03ce4     FD 6C 02 FB | 	rdlong	local01, objptr
03ce8     9D FA 85 F1 | 	sub	objptr, #157
03cec     36 6F C2 FA | 	rdbyte	local02, local01
03cf0     4D 6E 0E F2 | 	cmp	local02, #77 wz
03cf4     4C 01 90 5D |  if_ne	jmp	#LR__0132
03cf8     9D FA 05 F1 | 	add	objptr, #157
03cfc     FD 70 02 FB | 	rdlong	local03, objptr
03d00     9D FA 85 F1 | 	sub	objptr, #157
03d04     02 70 06 F1 | 	add	local03, #2
03d08     38 73 C2 FA | 	rdbyte	local04, local03
03d0c     4B 72 0E F2 | 	cmp	local04, #75 wz
03d10     30 01 90 5D |  if_ne	jmp	#LR__0132
03d14                 | '     songLength          := byte[hubPtr + 950]
03d14     AF 6C 02 FB | 	rdlong	local01, fp
03d18     01 00 00 FF 
03d1c     B6 6D 06 F1 | 	add	local01, ##950
03d20     36 75 C2 FA | 	rdbyte	local05, local01
03d24     9A FA 05 F1 | 	add	objptr, #154
03d28     FD 74 42 FC | 	wrbyte	local05, objptr
03d2c                 | '     unknown1            := byte[hubPtr + 951]
03d2c     AF 6C 02 FB | 	rdlong	local01, fp
03d30     01 00 00 FF 
03d34     B7 6D 06 F1 | 	add	local01, ##951
03d38     36 75 C2 FA | 	rdbyte	local05, local01
03d3c     02 FA 05 F1 | 	add	objptr, #2
03d40     FD 74 42 FC | 	wrbyte	local05, objptr
03d44                 | '     songPositionsLut    :=      hubPtr + 952
03d44     AF 6C 02 FB | 	rdlong	local01, fp
03d48     01 00 00 FF 
03d4c     B8 6D 06 F1 | 	add	local01, ##952
03d50     06 FA 85 F1 | 	sub	objptr, #6
03d54     FD 6C 62 FC | 	wrlong	local01, objptr
03d58                 | '     patternsData        :=      hubPtr + 1084
03d58     AF 6C 02 FB | 	rdlong	local01, fp
03d5c     02 00 00 FF 
03d60     3C 6C 06 F1 | 	add	local01, ##1084
03d64     04 FA 85 F1 | 	sub	objptr, #4
03d68     FD 6C 62 FC | 	wrlong	local01, objptr
03d6c                 | '     numberOfInstruments := 31
03d6c     14 FA 05 F1 | 	add	objptr, #20
03d70     FD 3E 48 FC | 	wrbyte	#31, objptr
03d74                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03d74     0B FA 85 F1 | 	sub	objptr, #11
03d78     FD 00 48 FC | 	wrbyte	#0, objptr
03d7c     9B FA 85 F1 | 	sub	objptr, #155
03d80                 | '     repeat i from 952 to 1079
03d80     08 5E 05 F1 | 	add	fp, #8
03d84     01 00 80 FF 
03d88     AF 70 6B FC | 	wrlong	##952, fp
03d8c     08 5E 85 F1 | 	sub	fp, #8
03d90     DC C2 9F FE | 	loc	pa,	#(@LR__0131-@LR__0129)
03d94     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d98                 | LR__0129
03d98                 | '       if byte[hubPtr][i] > numberOfPatterns
03d98     AF 76 02 FB | 	rdlong	local06, fp
03d9c     08 5E 05 F1 | 	add	fp, #8
03da0     AF 6E 02 FB | 	rdlong	local02, fp
03da4     08 5E 85 F1 | 	sub	fp, #8
03da8     3B 6F 02 F1 | 	add	local02, local06
03dac     37 73 C2 FA | 	rdbyte	local04, local02
03db0     9B FA 05 F1 | 	add	objptr, #155
03db4     FD 78 C2 FA | 	rdbyte	local07, objptr
03db8     9B FA 85 F1 | 	sub	objptr, #155
03dbc     3C 73 5A F2 | 	cmps	local04, local07 wcz
03dc0     24 00 90 ED |  if_be	jmp	#LR__0130
03dc4                 | '         numberOfPatterns := byte[hubPtr][i]
03dc4     AF 76 02 FB | 	rdlong	local06, fp
03dc8     08 5E 05 F1 | 	add	fp, #8
03dcc     AF 6E 02 FB | 	rdlong	local02, fp
03dd0     08 5E 85 F1 | 	sub	fp, #8
03dd4     3B 6F 02 F1 | 	add	local02, local06
03dd8     37 73 C2 FA | 	rdbyte	local04, local02
03ddc     9B FA 05 F1 | 	add	objptr, #155
03de0     FD 72 42 FC | 	wrbyte	local04, objptr
03de4     9B FA 85 F1 | 	sub	objptr, #155
03de8                 | LR__0130
03de8     08 5E 05 F1 | 	add	fp, #8
03dec     AF 74 02 FB | 	rdlong	local05, fp
03df0     01 74 06 F1 | 	add	local05, #1
03df4     AF 74 62 FC | 	wrlong	local05, fp
03df8     08 5E 85 F1 | 	sub	fp, #8
03dfc     02 00 00 FF 
03e00     38 74 1E F2 | 	cmp	local05, ##1080 wcz
03e04     90 FF 9F CD |  if_b	jmp	#LR__0129
03e08                 | LR__0131
03e08                 | '     numberOfPatterns++
03e08     9B FA 05 F1 | 	add	objptr, #155
03e0c     FD 74 C2 FA | 	rdbyte	local05, objptr
03e10     FD 6E C2 FA | 	rdbyte	local02, objptr
03e14     01 6E 06 F1 | 	add	local02, #1
03e18     FD 6E 42 FC | 	wrbyte	local02, objptr
03e1c                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03e1c     09 FA 85 F1 | 	sub	objptr, #9
03e20     FD 6C 02 FB | 	rdlong	local01, objptr
03e24     09 FA 05 F1 | 	add	objptr, #9
03e28     FD 6E C2 FA | 	rdbyte	local02, objptr
03e2c     0A 6E 66 F0 | 	shl	local02, #10
03e30     37 6D 02 F1 | 	add	local01, local02
03e34     8D FA 85 F1 | 	sub	objptr, #141
03e38     FD 6C 62 FC | 	wrlong	local01, objptr
03e3c     0E FA 85 F1 | 	sub	objptr, #14
03e40                 | ' 
03e40                 | '   ' This must be an oldschool 15 sample soundtracker module
03e40                 | '   else
03e40     1C 01 90 FD | 	jmp	#LR__0136
03e44                 | LR__0132
03e44                 | '     songLength          := byte[hubPtr + 470]
03e44     AF 6C 02 FB | 	rdlong	local01, fp
03e48     D6 6D 06 F1 | 	add	local01, #470
03e4c     36 75 C2 FA | 	rdbyte	local05, local01
03e50     9A FA 05 F1 | 	add	objptr, #154
03e54     FD 74 42 FC | 	wrbyte	local05, objptr
03e58                 | '     unknown1            := byte[hubPtr + 471]
03e58     AF 6C 02 FB | 	rdlong	local01, fp
03e5c     D7 6D 06 F1 | 	add	local01, #471
03e60     36 75 C2 FA | 	rdbyte	local05, local01
03e64     02 FA 05 F1 | 	add	objptr, #2
03e68     FD 74 42 FC | 	wrbyte	local05, objptr
03e6c                 | '     songPositionsLut    :=      hubPtr + 472
03e6c     AF 6C 02 FB | 	rdlong	local01, fp
03e70     D8 6D 06 F1 | 	add	local01, #472
03e74     06 FA 85 F1 | 	sub	objptr, #6
03e78     FD 6C 62 FC | 	wrlong	local01, objptr
03e7c                 | '     patternsData        :=      hubPtr + 600
03e7c     AF 6C 02 FB | 	rdlong	local01, fp
03e80     01 00 00 FF 
03e84     58 6C 06 F1 | 	add	local01, ##600
03e88     04 FA 85 F1 | 	sub	objptr, #4
03e8c     FD 6C 62 FC | 	wrlong	local01, objptr
03e90                 | '     numberOfInstruments := 15
03e90     14 FA 05 F1 | 	add	objptr, #20
03e94     FD 1E 48 FC | 	wrbyte	#15, objptr
03e98                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03e98     0B FA 85 F1 | 	sub	objptr, #11
03e9c     FD 00 48 FC | 	wrbyte	#0, objptr
03ea0     9B FA 85 F1 | 	sub	objptr, #155
03ea4                 | '     repeat i from 472 to 599
03ea4     08 5E 05 F1 | 	add	fp, #8
03ea8     AF B0 6B FC | 	wrlong	#472, fp
03eac     08 5E 85 F1 | 	sub	fp, #8
03eb0     BC C1 9F FE | 	loc	pa,	#(@LR__0135-@LR__0133)
03eb4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03eb8                 | LR__0133
03eb8                 | '       if byte[hubPtr][i] > numberOfPatterns
03eb8     AF 76 02 FB | 	rdlong	local06, fp
03ebc     08 5E 05 F1 | 	add	fp, #8
03ec0     AF 6E 02 FB | 	rdlong	local02, fp
03ec4     08 5E 85 F1 | 	sub	fp, #8
03ec8     3B 6F 02 F1 | 	add	local02, local06
03ecc     37 73 C2 FA | 	rdbyte	local04, local02
03ed0     9B FA 05 F1 | 	add	objptr, #155
03ed4     FD 78 C2 FA | 	rdbyte	local07, objptr
03ed8     9B FA 85 F1 | 	sub	objptr, #155
03edc     3C 73 5A F2 | 	cmps	local04, local07 wcz
03ee0     24 00 90 ED |  if_be	jmp	#LR__0134
03ee4                 | '         numberOfPatterns := byte[hubPtr][i]
03ee4     AF 76 02 FB | 	rdlong	local06, fp
03ee8     08 5E 05 F1 | 	add	fp, #8
03eec     AF 6E 02 FB | 	rdlong	local02, fp
03ef0     08 5E 85 F1 | 	sub	fp, #8
03ef4     3B 6F 02 F1 | 	add	local02, local06
03ef8     37 73 C2 FA | 	rdbyte	local04, local02
03efc     9B FA 05 F1 | 	add	objptr, #155
03f00     FD 72 42 FC | 	wrbyte	local04, objptr
03f04     9B FA 85 F1 | 	sub	objptr, #155
03f08                 | LR__0134
03f08     08 5E 05 F1 | 	add	fp, #8
03f0c     AF 74 02 FB | 	rdlong	local05, fp
03f10     01 74 06 F1 | 	add	local05, #1
03f14     AF 74 62 FC | 	wrlong	local05, fp
03f18     08 5E 85 F1 | 	sub	fp, #8
03f1c     01 00 00 FF 
03f20     58 74 1E F2 | 	cmp	local05, ##600 wcz
03f24     90 FF 9F CD |  if_b	jmp	#LR__0133
03f28                 | LR__0135
03f28                 | '     numberOfPatterns++
03f28     9B FA 05 F1 | 	add	objptr, #155
03f2c     FD 74 C2 FA | 	rdbyte	local05, objptr
03f30     FD 6E C2 FA | 	rdbyte	local02, objptr
03f34     01 6E 06 F1 | 	add	local02, #1
03f38     FD 6E 42 FC | 	wrbyte	local02, objptr
03f3c                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03f3c     09 FA 85 F1 | 	sub	objptr, #9
03f40     FD 6C 02 FB | 	rdlong	local01, objptr
03f44     09 FA 05 F1 | 	add	objptr, #9
03f48     FD 6E C2 FA | 	rdbyte	local02, objptr
03f4c     0A 6E 66 F0 | 	shl	local02, #10
03f50     37 6D 02 F1 | 	add	local01, local02
03f54     8D FA 85 F1 | 	sub	objptr, #141
03f58     FD 6C 62 FC | 	wrlong	local01, objptr
03f5c     0E FA 85 F1 | 	sub	objptr, #14
03f60                 | LR__0136
03f60                 | ' 
03f60                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03f60                 | '   tmpPtr := sampleDataPtr
03f60     0E FA 05 F1 | 	add	objptr, #14
03f64     FD 6C 02 FB | 	rdlong	local01, objptr
03f68     0C 5E 05 F1 | 	add	fp, #12
03f6c     AF 6C 62 FC | 	wrlong	local01, fp
03f70                 | '   repeat i from 1 to numberOfInstruments
03f70     04 5E 85 F1 | 	sub	fp, #4
03f74     AF 02 68 FC | 	wrlong	#1, fp
03f78     08 5E 85 F1 | 	sub	fp, #8
03f7c     98 FA 05 F1 | 	add	objptr, #152
03f80     FD 6E C2 FA | 	rdbyte	local02, objptr
03f84     01 6E 5E F2 | 	cmps	local02, #1 wcz
03f88     01 74 06 16 |  if_a	mov	local05, #1
03f8c     01 74 66 E6 |  if_be	neg	local05, #1
03f90     3A 7B 02 F6 | 	mov	local08, local05
03f94     FD 7C C2 FA | 	rdbyte	local09, objptr
03f98     A6 FA 85 F1 | 	sub	objptr, #166
03f9c     3D 7D 02 F1 | 	add	local09, local08
03fa0                 | LR__0137
03fa0                 | '     samplesPtrLut[i-1] := tmpPtr
03fa0     08 5E 05 F1 | 	add	fp, #8
03fa4     AF 7E 02 FB | 	rdlong	local10, fp
03fa8     01 7E 86 F1 | 	sub	local10, #1
03fac     02 7E 66 F0 | 	shl	local10, #2
03fb0     12 FA 05 F1 | 	add	objptr, #18
03fb4     FD 7E 02 F1 | 	add	local10, objptr
03fb8     04 5E 05 F1 | 	add	fp, #4
03fbc     AF 80 02 FB | 	rdlong	local11, fp
03fc0     3F 81 62 FC | 	wrlong	local11, local10
03fc4                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03fc4     04 5E 85 F1 | 	sub	fp, #4
03fc8     AF 5E 02 FB | 	rdlong	arg01, fp
03fcc     1C 5E 05 F1 | 	add	fp, #28
03fd0     AF 60 02 F6 | 	mov	arg02, fp
03fd4     14 5E 85 F1 | 	sub	fp, #20
03fd8     AF 62 02 F6 | 	mov	arg03, fp
03fdc     04 5E 05 F1 | 	add	fp, #4
03fe0     AF 64 02 F6 | 	mov	arg04, fp
03fe4     04 5E 05 F1 | 	add	fp, #4
03fe8     AF 66 02 F6 | 	mov	arg05, fp
03fec     04 5E 05 F1 | 	add	fp, #4
03ff0     AF 68 02 F6 | 	mov	arg06, fp
03ff4     04 5E 05 F1 | 	add	fp, #4
03ff8     AF 6A 02 F6 | 	mov	arg07, fp
03ffc     20 5E 85 F1 | 	sub	fp, #32
04000     12 FA 85 F1 | 	sub	objptr, #18
04004     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04008                 | '     tmpPtr += samLength
04008     0C 5E 05 F1 | 	add	fp, #12
0400c     AF 78 02 FB | 	rdlong	local07, fp
04010     04 5E 05 F1 | 	add	fp, #4
04014     AF 7E 02 FB | 	rdlong	local10, fp
04018     3F 79 02 F1 | 	add	local07, local10
0401c     04 5E 85 F1 | 	sub	fp, #4
04020     AF 78 62 FC | 	wrlong	local07, fp
04024     04 5E 85 F1 | 	sub	fp, #4
04028     AF 78 02 FB | 	rdlong	local07, fp
0402c     3D 79 02 F1 | 	add	local07, local08
04030     AF 78 62 FC | 	wrlong	local07, fp
04034     08 5E 85 F1 | 	sub	fp, #8
04038     3E 79 0A F2 | 	cmp	local07, local09 wz
0403c     60 FF 9F 5D |  if_ne	jmp	#LR__0137
04040                 | ' 
04040                 | '   ' Below this point, all play routine variables are resest to their default values
04040                 | '   tickCounter                 := 0
04040     A1 FA 05 F1 | 	add	objptr, #161
04044     FD 00 48 FC | 	wrbyte	#0, objptr
04048                 | '   patternRow                  := 0
04048     01 FA 05 F1 | 	add	objptr, #1
0404c     FD 00 48 FC | 	wrbyte	#0, objptr
04050                 | '   songPosition                := startPattern
04050     04 5E 05 F1 | 	add	fp, #4
04054     AF 6C 02 FB | 	rdlong	local01, fp
04058     04 5E 85 F1 | 	sub	fp, #4
0405c     01 FA 05 F1 | 	add	objptr, #1
04060     FD 6C 42 FC | 	wrbyte	local01, objptr
04064                 | '   currentSongSpeed            := 6
04064     01 FA 05 F1 | 	add	objptr, #1
04068     FD 0C 48 FC | 	wrbyte	#6, objptr
0406c                 | '   patternDelay                := 0
0406c     01 FA 05 F1 | 	add	objptr, #1
04070     FD 00 48 FC | 	wrbyte	#0, objptr
04074                 | '   ticksPerMinute              := 50 * 60
04074     02 FB 05 F1 | 	add	objptr, #258
04078     05 00 80 FF 
0407c     FD 70 6B FC | 	wrlong	##3000, objptr
04080     A7 FB 85 F1 | 	sub	objptr, #423
04084                 | '   cyclesToWait                := systemClock / 50
04084     FD 98 02 FB | 	rdlong	muldiva_, objptr
04088     32 9A 06 F6 | 	mov	muldivb_, #50
0408c     C6 00 A0 FD | 	call	#divide_
04090     AB FB 05 F1 | 	add	objptr, #427
04094     FD 9A 62 FC | 	wrlong	muldivb_, objptr
04098                 | '   sampleNumber_memory         := 0
04098     35 FA 05 F1 | 	add	objptr, #53
0409c     FD 00 48 FC | 	wrbyte	#0, objptr
040a0                 | '   lpFilter                    := 0
040a0     25 FA 85 F1 | 	sub	objptr, #37
040a4     FD 00 48 FC | 	wrbyte	#0, objptr
040a8                 | '   cmdD_memoryX                := 0
040a8     29 FA 05 F1 | 	add	objptr, #41
040ac     FD 00 48 FC | 	wrbyte	#0, objptr
040b0                 | '   cmdD_memoryY                := 0
040b0     01 FA 05 F1 | 	add	objptr, #1
040b4     FD 00 48 FC | 	wrbyte	#0, objptr
040b8                 | '   cmdD_updatePosition         := false
040b8     01 FA 05 F1 | 	add	objptr, #1
040bc     FD 00 48 FC | 	wrbyte	#0, objptr
040c0                 | '   cmdB_memoryZ                := 0
040c0     01 FA 05 F1 | 	add	objptr, #1
040c4     FD 00 48 FC | 	wrbyte	#0, objptr
040c8                 | '   cmdB_updatePosition         := false
040c8     01 FA 05 F1 | 	add	objptr, #1
040cc     FD 00 48 FC | 	wrbyte	#0, objptr
040d0                 | '   cmdE6_updatePositionCommon  := false
040d0     0D FA 05 F1 | 	add	objptr, #13
040d4     FD 00 48 FC | 	wrbyte	#0, objptr
040d8     F5 FB 85 F1 | 	sub	objptr, #501
040dc                 | ' 
040dc                 | '   repeat i from 0 to LAST_CHANNEL
040dc     08 5E 05 F1 | 	add	fp, #8
040e0     AF 00 68 FC | 	wrlong	#0, fp
040e4     08 5E 85 F1 | 	sub	fp, #8
040e8                 | LR__0138
040e8                 | ' 
040e8                 | '     currRepeatPoint[i]        := 0
040e8     08 5E 05 F1 | 	add	fp, #8
040ec     AF 70 02 FB | 	rdlong	local03, fp
040f0     01 70 66 F0 | 	shl	local03, #1
040f4     D7 FA 05 F1 | 	add	objptr, #215
040f8     FD 70 02 F1 | 	add	local03, objptr
040fc     38 01 58 FC | 	wrword	#0, local03
04100                 | '     currSampleLength[i]       := 4
04100     AF 70 02 FB | 	rdlong	local03, fp
04104     01 70 66 F0 | 	shl	local03, #1
04108     1C FA 85 F1 | 	sub	objptr, #28
0410c     FD 70 02 F1 | 	add	local03, objptr
04110     38 09 58 FC | 	wrword	#4, local03
04114                 | '     currSamplePtr[i]          := @null
04114     AF 6E 02 FB | 	rdlong	local02, fp
04118     02 6E 66 F0 | 	shl	local02, #2
0411c     14 FA 85 F1 | 	sub	objptr, #20
04120     FD 6E 02 F1 | 	add	local02, objptr
04124     37 15 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04128                 | '     currSampleNr[i]           := 0
04128     AF 74 02 FB | 	rdlong	local05, fp
0412c     10 FA 05 F1 | 	add	objptr, #16
04130     FD 74 02 F1 | 	add	local05, objptr
04134     3A 01 48 FC | 	wrbyte	#0, local05
04138                 | '     currRepeatLength[i]       := 1
04138     AF 74 02 FB | 	rdlong	local05, fp
0413c     02 74 66 F0 | 	shl	local05, #2
04140     0C FA 05 F1 | 	add	objptr, #12
04144     FD 74 02 F1 | 	add	local05, objptr
04148     3A 03 68 FC | 	wrlong	#1, local05
0414c                 | '     currPeriod[i]             := 400
0414c     AF 74 02 FB | 	rdlong	local05, fp
04150     02 74 66 F0 | 	shl	local05, #2
04154     1C FA 05 F1 | 	add	objptr, #28
04158     FD 74 02 F1 | 	add	local05, objptr
0415c     3A 21 6B FC | 	wrlong	#400, local05
04160                 | '     lastSetPeriod[i]          := 400
04160     AF 74 02 FB | 	rdlong	local05, fp
04164     02 74 66 F0 | 	shl	local05, #2
04168     48 FA 05 F1 | 	add	objptr, #72
0416c     FD 74 02 F1 | 	add	local05, objptr
04170     3A 21 6B FC | 	wrlong	#400, local05
04174                 | '     lastSetSamplePtr[i]       := 0
04174     AF 74 02 FB | 	rdlong	local05, fp
04178     02 74 66 F0 | 	shl	local05, #2
0417c     10 FA 05 F1 | 	add	objptr, #16
04180     FD 74 02 F1 | 	add	local05, objptr
04184     3A 01 68 FC | 	wrlong	#0, local05
04188                 | '     lastSetSampleNr[i]        := 0
04188     AF 74 02 FB | 	rdlong	local05, fp
0418c     02 74 66 F0 | 	shl	local05, #2
04190     10 FA 05 F1 | 	add	objptr, #16
04194     FD 74 02 F1 | 	add	local05, objptr
04198     3A 01 68 FC | 	wrlong	#0, local05
0419c                 | '     lastSetSampleLength[i]    := 0
0419c     AF 74 02 FB | 	rdlong	local05, fp
041a0     02 74 66 F0 | 	shl	local05, #2
041a4     10 FA 05 F1 | 	add	objptr, #16
041a8     FD 74 02 F1 | 	add	local05, objptr
041ac     3A 01 68 FC | 	wrlong	#0, local05
041b0                 | '     lastSetRepeatLength[i]    := 0
041b0     AF 74 02 FB | 	rdlong	local05, fp
041b4     02 74 66 F0 | 	shl	local05, #2
041b8     10 FA 05 F1 | 	add	objptr, #16
041bc     FD 74 02 F1 | 	add	local05, objptr
041c0     3A 01 68 FC | 	wrlong	#0, local05
041c4                 | '     lastSetRepeatPoint[i]     := 0
041c4     AF 74 02 FB | 	rdlong	local05, fp
041c8     02 74 66 F0 | 	shl	local05, #2
041cc     10 FA 05 F1 | 	add	objptr, #16
041d0     FD 74 02 F1 | 	add	local05, objptr
041d4     3A 01 68 FC | 	wrlong	#0, local05
041d8                 | '     currVolume[i]             := 0
041d8     AF 74 02 FB | 	rdlong	local05, fp
041dc     02 74 66 F0 | 	shl	local05, #2
041e0     78 FA 85 F1 | 	sub	objptr, #120
041e4     FD 74 02 F1 | 	add	local05, objptr
041e8     3A 01 68 FC | 	wrlong	#0, local05
041ec                 | '     currPanning[i]            := 0
041ec     AF 70 02 FB | 	rdlong	local03, fp
041f0     01 70 66 F0 | 	shl	local03, #1
041f4     20 FA 05 F1 | 	add	objptr, #32
041f8     FD 70 02 F1 | 	add	local03, objptr
041fc     38 01 58 FC | 	wrword	#0, local03
04200                 | '     cmd3_memoryZ[i]           := 0
04200     AF 74 02 FB | 	rdlong	local05, fp
04204     A9 FA 05 F1 | 	add	objptr, #169
04208     FD 74 02 F1 | 	add	local05, objptr
0420c     3A 01 48 FC | 	wrbyte	#0, local05
04210                 | '     cmd4_memoryY[i]           := 0
04210     AF 74 02 FB | 	rdlong	local05, fp
04214     04 FA 05 F1 | 	add	objptr, #4
04218     FD 74 02 F1 | 	add	local05, objptr
0421c     3A 01 48 FC | 	wrbyte	#0, local05
04220                 | '     cmd4_memoryX[i]           := 0
04220     AF 74 02 FB | 	rdlong	local05, fp
04224     04 FA 05 F1 | 	add	objptr, #4
04228     FD 74 02 F1 | 	add	local05, objptr
0422c     3A 01 48 FC | 	wrbyte	#0, local05
04230                 | '     cmd7_memoryY[i]           := 0
04230     AF 74 02 FB | 	rdlong	local05, fp
04234     04 FA 05 F1 | 	add	objptr, #4
04238     FD 74 02 F1 | 	add	local05, objptr
0423c     3A 01 48 FC | 	wrbyte	#0, local05
04240                 | '     cmd7_memoryX[i]           := 0
04240     AF 74 02 FB | 	rdlong	local05, fp
04244     04 FA 05 F1 | 	add	objptr, #4
04248     FD 74 02 F1 | 	add	local05, objptr
0424c     3A 01 48 FC | 	wrbyte	#0, local05
04250                 | '     cmd9_memoryZ[i]           := 0
04250     AF 74 02 FB | 	rdlong	local05, fp
04254     04 FA 05 F1 | 	add	objptr, #4
04258     FD 74 02 F1 | 	add	local05, objptr
0425c     3A 01 48 FC | 	wrbyte	#0, local05
04260                 | '     cmdE6_memory[i]           := 0
04260     AF 74 02 FB | 	rdlong	local05, fp
04264     0D FA 05 F1 | 	add	objptr, #13
04268     FD 74 02 F1 | 	add	local05, objptr
0426c     3A 01 48 FC | 	wrbyte	#0, local05
04270                 | '     cmdE6_counter[i]          := 0
04270     AF 74 02 FB | 	rdlong	local05, fp
04274     04 FA 05 F1 | 	add	objptr, #4
04278     FD 74 02 F1 | 	add	local05, objptr
0427c     3A 01 48 FC | 	wrbyte	#0, local05
04280                 | '     cmdE6_updatePosition[i]   := false
04280     AF 74 02 FB | 	rdlong	local05, fp
04284     04 FA 05 F1 | 	add	objptr, #4
04288     FD 74 02 F1 | 	add	local05, objptr
0428c     3A 01 48 FC | 	wrbyte	#0, local05
04290                 | '     sampleNumber_memory[i]    := 0
04290     AF 74 02 FB | 	rdlong	local05, fp
04294     11 FA 85 F1 | 	sub	objptr, #17
04298     FD 74 02 F1 | 	add	local05, objptr
0429c     3A 01 48 FC | 	wrbyte	#0, local05
042a0                 | '     vibratoPos[i]             := 0
042a0     AF 74 02 FB | 	rdlong	local05, fp
042a4     59 FA 85 F1 | 	sub	objptr, #89
042a8     FD 74 02 F1 | 	add	local05, objptr
042ac     3A 01 48 FC | 	wrbyte	#0, local05
042b0                 | '     portamentoPeriodMemory[i] := 0
042b0     AF 74 02 FB | 	rdlong	local05, fp
042b4     02 74 66 F0 | 	shl	local05, #2
042b8     10 FA 05 F1 | 	add	objptr, #16
042bc     FD 74 02 F1 | 	add	local05, objptr
042c0     3A 01 68 FC | 	wrlong	#0, local05
042c4                 | '     portaGlissando[i]         := 0
042c4     AF 74 02 FB | 	rdlong	local05, fp
042c8     25 FA 05 F1 | 	add	objptr, #37
042cc     FD 74 02 F1 | 	add	local05, objptr
042d0     3A 01 48 FC | 	wrbyte	#0, local05
042d4                 | '     vibratoType[i]            := 0
042d4     AF 74 02 FB | 	rdlong	local05, fp
042d8     04 FA 05 F1 | 	add	objptr, #4
042dc     FD 74 02 F1 | 	add	local05, objptr
042e0     3A 01 48 FC | 	wrbyte	#0, local05
042e4                 | '     tremoloType[i]            := 0
042e4     AF 74 02 FB | 	rdlong	local05, fp
042e8     04 FA 05 F1 | 	add	objptr, #4
042ec     FD 74 02 F1 | 	add	local05, objptr
042f0     3A 01 48 FC | 	wrbyte	#0, local05
042f4                 | '     tremoloPos[i]             := 0
042f4     AF 74 02 FB | 	rdlong	local05, fp
042f8     39 FA 85 F1 | 	sub	objptr, #57
042fc     FD 74 02 F1 | 	add	local05, objptr
04300     3A 01 48 FC | 	wrbyte	#0, local05
04304                 | '     deltaVolume[i]            := 0
04304     AF 74 02 FB | 	rdlong	local05, fp
04308     02 74 66 F0 | 	shl	local05, #2
0430c     7C FA 85 F1 | 	sub	objptr, #124
04310     FD 74 02 F1 | 	add	local05, objptr
04314     3A 01 68 FC | 	wrlong	#0, local05
04318                 | '     deltaPeriod[i]            := 0
04318     AF 74 02 FB | 	rdlong	local05, fp
0431c     02 74 66 F0 | 	shl	local05, #2
04320     20 FA 85 F1 | 	sub	objptr, #32
04324     FD 74 02 F1 | 	add	local05, objptr
04328     3A 01 68 FC | 	wrlong	#0, local05
0432c                 | '     resetTremolo[i]           := 0
0432c     AF 74 02 FB | 	rdlong	local05, fp
04330     A0 FA 05 F1 | 	add	objptr, #160
04334     FD 74 02 F1 | 	add	local05, objptr
04338     3A 01 48 FC | 	wrbyte	#0, local05
0433c                 | '     resetVibrato[i]           := 0
0433c     AF 74 02 FB | 	rdlong	local05, fp
04340     04 FA 05 F1 | 	add	objptr, #4
04344     FD 74 02 F1 | 	add	local05, objptr
04348     3A 01 48 FC | 	wrbyte	#0, local05
0434c     AF 74 02 FB | 	rdlong	local05, fp
04350     01 74 06 F1 | 	add	local05, #1
04354     AF 74 62 FC | 	wrlong	local05, fp
04358     08 5E 85 F1 | 	sub	fp, #8
0435c     04 74 5E F2 | 	cmps	local05, #4 wcz
04360     93 FB 85 F1 | 	sub	objptr, #403
04364     80 FD 9F CD |  if_b	jmp	#LR__0138
04368     AF F0 03 F6 | 	mov	ptra, fp
0436c     BA 00 A0 FD | 	call	#popregs_
04370                 | _trackerplayer_spin2_initModule_ret
04370     2D 00 64 FD | 	ret
04374                 | 
04374                 | ' 
04374                 | ' 
04374                 | ' ' This routine needs to be ticked X number of times per second
04374                 | ' ' in order to advance the tracker play routine
04374                 | ' '
04374                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04374                 | _trackerplayer_spin2_tick
04374     05 5A 05 F6 | 	mov	COUNT_, #5
04378     B0 00 A0 FD | 	call	#pushregs_
0437c     14 F0 07 F1 | 	add	ptra, #20
04380                 | ' 
04380                 | '   if currentSongSpeed == 0
04380     A4 FA 05 F1 | 	add	objptr, #164
04384     FD 6C CA FA | 	rdbyte	local01, objptr wz
04388     A4 FA 85 F1 | 	sub	objptr, #164
0438c                 | '     return
0438c     88 02 90 AD |  if_e	jmp	#LR__0150
04390                 | ' 
04390                 | '   ' Iterate over the channels and process everything
04390                 | '   repeat channel from 0 to LAST_CHANNEL
04390     AF 00 68 FC | 	wrlong	#0, fp
04394                 | LR__0139
04394                 | ' 
04394                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04394     AF 5E 02 FB | 	rdlong	arg01, fp
04398     A3 FA 05 F1 | 	add	objptr, #163
0439c     FD 60 C2 FA | 	rdbyte	arg02, objptr
043a0     01 FA 85 F1 | 	sub	objptr, #1
043a4     FD 62 C2 FA | 	rdbyte	arg03, objptr
043a8     A2 FA 85 F1 | 	sub	objptr, #162
043ac     04 5E 05 F1 | 	add	fp, #4
043b0     AF 64 02 F6 | 	mov	arg04, fp
043b4     04 5E 05 F1 | 	add	fp, #4
043b8     AF 66 02 F6 | 	mov	arg05, fp
043bc     04 5E 05 F1 | 	add	fp, #4
043c0     AF 68 02 F6 | 	mov	arg06, fp
043c4     0C 5E 85 F1 | 	sub	fp, #12
043c8     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
043cc                 | '     processChannel(channel, sampleNumber, period, effect)
043cc     AF 5E 02 FB | 	rdlong	arg01, fp
043d0     04 5E 05 F1 | 	add	fp, #4
043d4     AF 60 02 FB | 	rdlong	arg02, fp
043d8     04 5E 05 F1 | 	add	fp, #4
043dc     AF 62 02 FB | 	rdlong	arg03, fp
043e0     04 5E 05 F1 | 	add	fp, #4
043e4     AF 64 02 FB | 	rdlong	arg04, fp
043e8     0C 5E 85 F1 | 	sub	fp, #12
043ec     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
043f0     AF 6E 02 FB | 	rdlong	local02, fp
043f4     01 6E 06 F1 | 	add	local02, #1
043f8     AF 6E 62 FC | 	wrlong	local02, fp
043fc     04 6E 5E F2 | 	cmps	local02, #4 wcz
04400     90 FF 9F CD |  if_b	jmp	#LR__0139
04404                 | ' 
04404                 | '   ' Incrementation the main counter that drives the whole play routine
04404                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04404     A1 FA 05 F1 | 	add	objptr, #161
04408     FD 6C C2 FA | 	rdbyte	local01, objptr
0440c     01 6C 06 F1 | 	add	local01, #1
04410     FD 6C 42 FC | 	wrbyte	local01, objptr
04414     03 FA 05 F1 | 	add	objptr, #3
04418     FD 70 C2 FA | 	rdbyte	local03, objptr
0441c     01 FA 05 F1 | 	add	objptr, #1
04420     FD 72 C2 FA | 	rdbyte	local04, objptr
04424     39 71 02 F1 | 	add	local03, local04
04428     04 FA 85 F1 | 	sub	objptr, #4
0442c     FD 74 C2 FA | 	rdbyte	local05, objptr
04430     A1 FA 85 F1 | 	sub	objptr, #161
04434     38 75 5A F2 | 	cmps	local05, local03 wcz
04438                 | '     tickCounter := 0
04438     A1 FA 05 31 |  if_ae	add	objptr, #161
0443c     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04440     A1 FA 85 31 |  if_ae	sub	objptr, #161
04444                 | ' 
04444                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04444                 | '   if tickCounter == 0
04444     A1 FA 05 F1 | 	add	objptr, #161
04448     FD 6C CA FA | 	rdbyte	local01, objptr wz
0444c     A1 FA 85 F1 | 	sub	objptr, #161
04450     C4 01 90 5D |  if_ne	jmp	#LR__0149
04454                 | ' 
04454                 | '     ' Handle the "pattern repeat" command, "E6"
04454                 | '     if cmdE6_updatePositionCommon
04454     F5 FB 05 F1 | 	add	objptr, #501
04458     FD 6C CA FA | 	rdbyte	local01, objptr wz
0445c     F5 FB 85 F1 | 	sub	objptr, #501
04460     8C 00 90 AD |  if_e	jmp	#LR__0143
04464                 | '       repeat i from 0 to LAST_CHANNEL
04464     10 5E 05 F1 | 	add	fp, #16
04468     AF 00 68 FC | 	wrlong	#0, fp
0446c     10 5E 85 F1 | 	sub	fp, #16
04470     00 BC 9F FE | 	loc	pa,	#(@LR__0142-@LR__0140)
04474     93 00 A0 FD | 	call	#FCACHE_LOAD_
04478                 | LR__0140
04478                 | '         if cmdE6_updatePosition[i]
04478     10 5E 05 F1 | 	add	fp, #16
0447c     AF 6E 02 FB | 	rdlong	local02, fp
04480     10 5E 85 F1 | 	sub	fp, #16
04484     F1 FB 05 F1 | 	add	objptr, #497
04488     FD 6E 02 F1 | 	add	local02, objptr
0448c     37 73 CA FA | 	rdbyte	local04, local02 wz
04490     F1 FB 85 F1 | 	sub	objptr, #497
04494     24 00 90 AD |  if_e	jmp	#LR__0141
04498                 | '           patternRow := cmdE6_memory[i]
04498     10 5E 05 F1 | 	add	fp, #16
0449c     AF 6E 02 FB | 	rdlong	local02, fp
044a0     10 5E 85 F1 | 	sub	fp, #16
044a4     E9 FB 05 F1 | 	add	objptr, #489
044a8     FD 6E 02 F1 | 	add	local02, objptr
044ac     37 73 C2 FA | 	rdbyte	local04, local02
044b0     47 FB 85 F1 | 	sub	objptr, #327
044b4     FD 72 42 FC | 	wrbyte	local04, objptr
044b8     A2 FA 85 F1 | 	sub	objptr, #162
044bc                 | LR__0141
044bc                 | '         cmdE6_updatePosition[i] := false
044bc     10 5E 05 F1 | 	add	fp, #16
044c0     AF 6E 02 FB | 	rdlong	local02, fp
044c4     F1 FB 05 F1 | 	add	objptr, #497
044c8     FD 6E 02 F1 | 	add	local02, objptr
044cc     37 01 48 FC | 	wrbyte	#0, local02
044d0     AF 6E 02 FB | 	rdlong	local02, fp
044d4     01 6E 06 F1 | 	add	local02, #1
044d8     AF 6E 62 FC | 	wrlong	local02, fp
044dc     10 5E 85 F1 | 	sub	fp, #16
044e0     04 6E 5E F2 | 	cmps	local02, #4 wcz
044e4     F1 FB 85 F1 | 	sub	objptr, #497
044e8     8C FF 9F CD |  if_b	jmp	#LR__0140
044ec                 | LR__0142
044ec     CC 00 90 FD | 	jmp	#LR__0147
044f0                 | LR__0143
044f0                 | ' 
044f0                 | '     ' Handle the "skip to next pattern with offset command", "D"
044f0                 | '     elseif cmdD_updatePosition
044f0     E6 FB 05 F1 | 	add	objptr, #486
044f4     FD 6C CA FA | 	rdbyte	local01, objptr wz
044f8     E6 FB 85 F1 | 	sub	objptr, #486
044fc     64 00 90 AD |  if_e	jmp	#LR__0144
04500                 | '       if ++songPosition >= songLength
04500     A3 FA 05 F1 | 	add	objptr, #163
04504     FD 6C C2 FA | 	rdbyte	local01, objptr
04508     01 6C 06 F1 | 	add	local01, #1
0450c     FD 6C 42 FC | 	wrbyte	local01, objptr
04510     FD 70 C2 FA | 	rdbyte	local03, objptr
04514     09 FA 85 F1 | 	sub	objptr, #9
04518     FD 72 C2 FA | 	rdbyte	local04, objptr
0451c     9A FA 85 F1 | 	sub	objptr, #154
04520     39 71 5A F2 | 	cmps	local03, local04 wcz
04524                 | '         songPosition := 0
04524     A3 FA 05 31 |  if_ae	add	objptr, #163
04528     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
0452c     A3 FA 85 31 |  if_ae	sub	objptr, #163
04530                 | ' 
04530                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04530     E4 FB 05 F1 | 	add	objptr, #484
04534     FD 70 C2 FA | 	rdbyte	local03, objptr
04538     38 6D 02 F6 | 	mov	local01, local03
0453c     02 6C 66 F0 | 	shl	local01, #2
04540     38 6D 02 F1 | 	add	local01, local03
04544     01 6C 66 F0 | 	shl	local01, #1
04548     01 FA 05 F1 | 	add	objptr, #1
0454c     FD 72 C2 FA | 	rdbyte	local04, objptr
04550     39 6D 02 F1 | 	add	local01, local04
04554     43 FB 85 F1 | 	sub	objptr, #323
04558     FD 6C 42 FC | 	wrbyte	local01, objptr
0455c     A2 FA 85 F1 | 	sub	objptr, #162
04560                 | ' 
04560                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04560                 | '     else
04560     58 00 90 FD | 	jmp	#LR__0146
04564                 | LR__0144
04564                 | '       if ++patternRow >= PATTERN_LENGTH
04564     A2 FA 05 F1 | 	add	objptr, #162
04568     FD 6C C2 FA | 	rdbyte	local01, objptr
0456c     01 6C 06 F1 | 	add	local01, #1
04570     FD 6C 42 FC | 	wrbyte	local01, objptr
04574     FD 70 C2 FA | 	rdbyte	local03, objptr
04578     A2 FA 85 F1 | 	sub	objptr, #162
0457c     40 70 5E F2 | 	cmps	local03, #64 wcz
04580     38 00 90 CD |  if_b	jmp	#LR__0145
04584                 | '         patternRow := 0
04584     A2 FA 05 F1 | 	add	objptr, #162
04588     FD 00 48 FC | 	wrbyte	#0, objptr
0458c                 | ' 
0458c                 | '         if ++songPosition >= songLength
0458c     01 FA 05 F1 | 	add	objptr, #1
04590     FD 6C C2 FA | 	rdbyte	local01, objptr
04594     01 6C 06 F1 | 	add	local01, #1
04598     FD 6C 42 FC | 	wrbyte	local01, objptr
0459c     FD 70 C2 FA | 	rdbyte	local03, objptr
045a0     09 FA 85 F1 | 	sub	objptr, #9
045a4     FD 72 C2 FA | 	rdbyte	local04, objptr
045a8     9A FA 85 F1 | 	sub	objptr, #154
045ac     39 71 5A F2 | 	cmps	local03, local04 wcz
045b0                 | '           songPosition := 0
045b0     A3 FA 05 31 |  if_ae	add	objptr, #163
045b4     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
045b8     A3 FA 85 31 |  if_ae	sub	objptr, #163
045bc                 | LR__0145
045bc                 | LR__0146
045bc                 | LR__0147
045bc                 | ' 
045bc                 | '     ' Handle "jump to song position" command, "B"
045bc                 | '     if cmdB_updatePosition
045bc     E8 FB 05 F1 | 	add	objptr, #488
045c0     FD 6C CA FA | 	rdbyte	local01, objptr wz
045c4     E8 FB 85 F1 | 	sub	objptr, #488
045c8     28 00 90 AD |  if_e	jmp	#LR__0148
045cc                 | ' 
045cc                 | '       songPosition := cmdB_memoryZ
045cc     E7 FB 05 F1 | 	add	objptr, #487
045d0     FD 6C C2 FA | 	rdbyte	local01, objptr
045d4     44 FB 85 F1 | 	sub	objptr, #324
045d8     FD 6C 42 FC | 	wrbyte	local01, objptr
045dc                 | ' 
045dc                 | '       ifnot cmdD_updatePosition
045dc     43 FB 05 F1 | 	add	objptr, #323
045e0     FD 6C CA FA | 	rdbyte	local01, objptr wz
045e4     E6 FB 85 F1 | 	sub	objptr, #486
045e8                 | '         patternRow := 0
045e8     A2 FA 05 A1 |  if_e	add	objptr, #162
045ec     FD 00 48 AC |  if_e	wrbyte	#0, objptr
045f0     A2 FA 85 A1 |  if_e	sub	objptr, #162
045f4                 | LR__0148
045f4                 | ' 
045f4                 | '     ' We need to be sure that all positioning commands are reset for the next tick
045f4                 | '     cmdE6_updatePositionCommon := false
045f4     F5 FB 05 F1 | 	add	objptr, #501
045f8     FD 00 48 FC | 	wrbyte	#0, objptr
045fc                 | '     cmdB_updatePosition := false
045fc     0D FA 85 F1 | 	sub	objptr, #13
04600     FD 00 48 FC | 	wrbyte	#0, objptr
04604                 | '     cmdD_updatePosition := false
04604     02 FA 85 F1 | 	sub	objptr, #2
04608     FD 00 48 FC | 	wrbyte	#0, objptr
0460c                 | '     patternDelay := 0
0460c     41 FB 85 F1 | 	sub	objptr, #321
04610     FD 00 48 FC | 	wrbyte	#0, objptr
04614     A5 FA 85 F1 | 	sub	objptr, #165
04618                 | LR__0149
04618                 | LR__0150
04618     AF F0 03 F6 | 	mov	ptra, fp
0461c     BA 00 A0 FD | 	call	#popregs_
04620                 | _trackerplayer_spin2_tick_ret
04620     2D 00 64 FD | 	ret
04624                 | 
04624                 | ' 
04624                 | ' 
04624                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04624                 | _trackerplayer_spin2_amigaPeriodToNote
04624                 | ' 
04624                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04624     00 1E 06 F6 | 	mov	_var01, #0
04628     20 BA 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
0462c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04630                 | LR__0151
04630                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04630     06 00 00 FF 
04634     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04638     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
0463c     30 23 02 F6 | 	mov	_var03, arg02
04640     03 22 66 F0 | 	shl	_var03, #3
04644     30 23 02 F1 | 	add	_var03, arg02
04648     03 22 66 F0 | 	shl	_var03, #3
0464c     11 21 02 F1 | 	add	_var02, _var03
04650     0F 25 02 F6 | 	mov	_var04, _var01
04654     01 24 66 F0 | 	shl	_var04, #1
04658     10 25 02 F1 | 	add	_var04, _var02
0465c     12 27 E2 FA | 	rdword	_var05, _var04
04660     2F 27 5A F2 | 	cmps	_var05, arg01 wcz
04664                 | '       quit
04664     06 00 00 FF 
04668     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0466c     0C 00 90 ED |  if_be	jmp	#LR__0153
04670     01 1E 06 F1 | 	add	_var01, #1
04674     24 1E 5E F2 | 	cmps	_var01, #36 wcz
04678     B4 FF 9F CD |  if_b	jmp	#LR__0151
0467c                 | LR__0152
0467c                 | LR__0153
0467c                 | ' 
0467c                 | '   return i
0467c     0F 19 02 F6 | 	mov	result1, _var01
04680                 | _trackerplayer_spin2_amigaPeriodToNote_ret
04680     2D 00 64 FD | 	ret
04684                 | 
04684                 | ' 
04684                 | ' 
04684                 | ' PRI retunePeriod(period, fTune) | noteNumber
04684                 | _trackerplayer_spin2_retunePeriod
04684     06 5A 05 F6 | 	mov	COUNT_, #6
04688     B0 00 A0 FD | 	call	#pushregs_
0468c     2F 6D 02 F6 | 	mov	local01, arg01
04690     30 6F 02 F6 | 	mov	local02, arg02
04694                 | ' 
04694                 | '   if period > 0 and fTune < 16
04694     00 6C 5E F2 | 	cmps	local01, #0 wcz
04698     50 00 90 ED |  if_be	jmp	#LR__0154
0469c     10 6E 5E F2 | 	cmps	local02, #16 wcz
046a0     48 00 90 3D |  if_ae	jmp	#LR__0154
046a4                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
046a4     36 5F E2 FA | 	rdword	arg01, local01
046a8     00 60 06 F6 | 	mov	arg02, #0
046ac     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
046b0     0C 71 02 F6 | 	mov	local03, result1
046b4                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
046b4     06 00 00 FF 
046b8     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
046bc     0A 73 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
046c0     37 75 02 F6 | 	mov	local05, local02
046c4     03 74 66 F0 | 	shl	local05, #3
046c8     37 75 02 F1 | 	add	local05, local02
046cc     03 74 66 F0 | 	shl	local05, #3
046d0     3A 73 02 F1 | 	add	local04, local05
046d4     01 70 66 F0 | 	shl	local03, #1
046d8     39 71 02 F1 | 	add	local03, local04
046dc     38 77 E2 FA | 	rdword	local06, local03
046e0     36 77 52 FC | 	wrword	local06, local01
046e4     06 00 00 FF 
046e8     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
046ec                 | LR__0154
046ec     AF F0 03 F6 | 	mov	ptra, fp
046f0     BA 00 A0 FD | 	call	#popregs_
046f4                 | _trackerplayer_spin2_retunePeriod_ret
046f4     2D 00 64 FD | 	ret
046f8                 | 
046f8                 | ' 
046f8                 | ' 
046f8                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
046f8                 | _trackerplayer_spin2_getSampleInfo
046f8     2F 1F 0A F6 | 	mov	_var01, arg01 wz
046fc                 | ' 
046fc                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
046fc     08 00 90 AD |  if_e	jmp	#LR__0155
04700     1F 1E 5E F2 | 	cmps	_var01, #31 wcz
04704     08 00 90 ED |  if_be	jmp	#LR__0156
04708                 | LR__0155
04708                 | '     long[samplePtr] := 0
04708     30 01 68 FC | 	wrlong	#0, arg02
0470c                 | '     return
0470c     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04710                 | LR__0156
04710                 | ' 
04710                 | '   sampleNumber--
04710     01 1E 86 F1 | 	sub	_var01, #1
04714                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04714     0A FA 05 F1 | 	add	objptr, #10
04718     FD 20 02 FB | 	rdlong	_var02, objptr
0471c     0F 23 02 F6 | 	mov	_var03, _var01
04720     04 22 66 F0 | 	shl	_var03, #4
04724     0F 23 82 F1 | 	sub	_var03, _var01
04728     01 22 66 F0 | 	shl	_var03, #1
0472c     11 21 02 F1 | 	add	_var02, _var03
04730                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04730     10 25 02 F6 | 	mov	_var04, _var02
04734     16 24 06 F1 | 	add	_var04, #22
04738     12 27 C2 FA | 	rdbyte	_var05, _var04
0473c     08 26 66 F0 | 	shl	_var05, #8
04740     10 23 02 F6 | 	mov	_var03, _var02
04744     17 22 06 F1 | 	add	_var03, #23
04748     11 29 C2 FA | 	rdbyte	_var06, _var03
0474c     14 27 42 F5 | 	or	_var05, _var06
04750     01 26 66 F0 | 	shl	_var05, #1
04754     31 27 62 FC | 	wrlong	_var05, arg03
04758                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04758     10 27 02 F6 | 	mov	_var05, _var02
0475c     18 26 06 F1 | 	add	_var05, #24
04760     13 25 C2 FA | 	rdbyte	_var04, _var05
04764     32 25 62 FC | 	wrlong	_var04, arg04
04768                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04768     10 27 02 F6 | 	mov	_var05, _var02
0476c     19 26 06 F1 | 	add	_var05, #25
04770     13 25 C2 FA | 	rdbyte	_var04, _var05
04774     33 25 62 FC | 	wrlong	_var04, arg05
04778                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04778     10 25 02 F6 | 	mov	_var04, _var02
0477c     1A 24 06 F1 | 	add	_var04, #26
04780     12 27 C2 FA | 	rdbyte	_var05, _var04
04784     08 26 66 F0 | 	shl	_var05, #8
04788     10 23 02 F6 | 	mov	_var03, _var02
0478c     1B 22 06 F1 | 	add	_var03, #27
04790     11 29 C2 FA | 	rdbyte	_var06, _var03
04794     14 27 42 F5 | 	or	_var05, _var06
04798     01 26 66 F0 | 	shl	_var05, #1
0479c     34 27 62 FC | 	wrlong	_var05, arg06
047a0                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
047a0     10 25 02 F6 | 	mov	_var04, _var02
047a4     1C 24 06 F1 | 	add	_var04, #28
047a8     12 27 C2 FA | 	rdbyte	_var05, _var04
047ac     08 26 66 F0 | 	shl	_var05, #8
047b0     1D 20 06 F1 | 	add	_var02, #29
047b4     10 29 C2 FA | 	rdbyte	_var06, _var02
047b8     14 27 42 F5 | 	or	_var05, _var06
047bc     01 26 66 F0 | 	shl	_var05, #1
047c0     35 27 62 FC | 	wrlong	_var05, arg07
047c4                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
047c4     02 1E 66 F0 | 	shl	_var01, #2
047c8     08 FA 05 F1 | 	add	objptr, #8
047cc     FD 1E 02 F1 | 	add	_var01, objptr
047d0     0F 23 02 FB | 	rdlong	_var03, _var01
047d4     30 23 62 FC | 	wrlong	_var03, arg02
047d8                 | ' 
047d8                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
047d8     35 27 02 FB | 	rdlong	_var05, arg07
047dc     02 26 0E F2 | 	cmp	_var05, #2 wz
047e0     12 FA 85 F1 | 	sub	objptr, #18
047e4     08 00 90 5D |  if_ne	jmp	#LR__0157
047e8     34 25 0A FB | 	rdlong	_var04, arg06 wz
047ec                 | '     long[repeatLength] := 1
047ec     35 03 68 AC |  if_e	wrlong	#1, arg07
047f0                 | LR__0157
047f0                 | _trackerplayer_spin2_getSampleInfo_ret
047f0     2D 00 64 FD | 	ret
047f4                 | 
047f4                 | ' 
047f4                 | ' 
047f4                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
047f4                 | _trackerplayer_spin2_getNoteData
047f4                 | ' 
047f4                 | '   ' Get the note data for a specific channel/song position/pattern row
047f4                 | '   patternNumber := byte[songPositionsLut][position & 127]
047f4     96 FA 05 F1 | 	add	objptr, #150
047f8     FD 1E 02 FB | 	rdlong	_var01, objptr
047fc     7F 60 06 F5 | 	and	arg02, #127
04800     0F 61 02 F1 | 	add	arg02, _var01
04804     30 21 C2 FA | 	rdbyte	_var02, arg02
04808                 | '   patternPtr    := patternsData + (patternNumber << 10)
04808     04 FA 85 F1 | 	sub	objptr, #4
0480c     FD 22 02 FB | 	rdlong	_var03, objptr
04810     92 FA 85 F1 | 	sub	objptr, #146
04814     0A 20 66 F0 | 	shl	_var02, #10
04818     10 23 02 F1 | 	add	_var03, _var02
0481c                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
0481c     3F 62 06 F5 | 	and	arg03, #63
04820     04 62 66 F0 | 	shl	arg03, #4
04824     31 23 02 F1 | 	add	_var03, arg03
04828     03 5E 06 F5 | 	and	arg01, #3
0482c     02 5E 66 F0 | 	shl	arg01, #2
04830     2F 23 02 F1 | 	add	_var03, arg01
04834                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04834     11 25 C2 FA | 	rdbyte	_var04, _var03
04838     18 24 66 F0 | 	shl	_var04, #24
0483c     01 22 06 F1 | 	add	_var03, #1
04840     11 27 C2 FA | 	rdbyte	_var05, _var03
04844     10 26 66 F0 | 	shl	_var05, #16
04848     13 25 42 F5 | 	or	_var04, _var05
0484c     01 22 06 F1 | 	add	_var03, #1
04850     11 29 C2 FA | 	rdbyte	_var06, _var03
04854     08 28 66 F0 | 	shl	_var06, #8
04858     14 25 42 F5 | 	or	_var04, _var06
0485c     01 22 06 F1 | 	add	_var03, #1
04860     11 2B C2 FA | 	rdbyte	_var07, _var03
04864     15 25 42 F5 | 	or	_var04, _var07
04868                 | ' 
04868                 | '   ' Extract the different sub parts from the data
04868                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04868     12 2D 02 F6 | 	mov	_var08, _var04
0486c     0C 2C 46 F0 | 	shr	_var08, #12
04870     0F 2C 06 F5 | 	and	_var08, #15
04874     12 27 02 F6 | 	mov	_var05, _var04
04878     18 26 46 F0 | 	shr	_var05, #24
0487c     F0 26 06 F5 | 	and	_var05, #240
04880     13 2D 42 F5 | 	or	_var08, _var05
04884     32 2D 62 FC | 	wrlong	_var08, arg04
04888                 | '   long[period]       :=  (data >> 16) & $FFF
04888     12 2D 02 F6 | 	mov	_var08, _var04
0488c     10 2C 46 F0 | 	shr	_var08, #16
04890     07 00 00 FF 
04894     FF 2D 06 F5 | 	and	_var08, ##4095
04898     33 2D 62 FC | 	wrlong	_var08, arg05
0489c                 | '   long[effect]       :=   data & $FFF
0489c     07 00 00 FF 
048a0     FF 25 06 F5 | 	and	_var04, ##4095
048a4     34 25 62 FC | 	wrlong	_var04, arg06
048a8                 | _trackerplayer_spin2_getNoteData_ret
048a8     2D 00 64 FD | 	ret
048ac                 | 
048ac                 | ' 
048ac                 | ' 
048ac                 | ' PRI triggerNote(channel)
048ac                 | _trackerplayer_spin2_triggerNote
048ac                 | ' 
048ac                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
048ac     2F 1F 02 F6 | 	mov	_var01, arg01
048b0     02 1E 66 F0 | 	shl	_var01, #2
048b4     47 FB 05 F1 | 	add	objptr, #327
048b8     FD 1E 02 F1 | 	add	_var01, objptr
048bc     2F 21 02 F6 | 	mov	_var02, arg01
048c0     90 FA 85 F1 | 	sub	objptr, #144
048c4     0F 23 02 FB | 	rdlong	_var03, _var01
048c8     FD 20 02 F1 | 	add	_var02, objptr
048cc     10 23 42 FC | 	wrbyte	_var03, _var02
048d0                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
048d0     2F 1F 02 F6 | 	mov	_var01, arg01
048d4     02 1E 66 F0 | 	shl	_var01, #2
048d8     80 FA 05 F1 | 	add	objptr, #128
048dc     FD 1E 02 F1 | 	add	_var01, objptr
048e0     2F 21 02 F6 | 	mov	_var02, arg01
048e4     02 20 66 F0 | 	shl	_var02, #2
048e8     90 FA 85 F1 | 	sub	objptr, #144
048ec     0F 23 02 FB | 	rdlong	_var03, _var01
048f0     FD 20 02 F1 | 	add	_var02, objptr
048f4     10 23 62 FC | 	wrlong	_var03, _var02
048f8                 | '   currPeriod[channel]       := lastSetPeriod[channel]
048f8     2F 1F 02 F6 | 	mov	_var01, arg01
048fc     02 1E 66 F0 | 	shl	_var01, #2
04900     80 FA 05 F1 | 	add	objptr, #128
04904     FD 1E 02 F1 | 	add	_var01, objptr
04908     2F 21 02 F6 | 	mov	_var02, arg01
0490c     02 20 66 F0 | 	shl	_var02, #2
04910     48 FA 85 F1 | 	sub	objptr, #72
04914     0F 23 02 FB | 	rdlong	_var03, _var01
04918     FD 20 02 F1 | 	add	_var02, objptr
0491c     10 23 62 FC | 	wrlong	_var03, _var02
04920                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04920     2F 1F 02 F6 | 	mov	_var01, arg01
04924     02 1E 66 F0 | 	shl	_var01, #2
04928     78 FA 05 F1 | 	add	objptr, #120
0492c     FD 1E 02 F1 | 	add	_var01, objptr
04930     2F 25 02 F6 | 	mov	_var04, arg01
04934     01 24 66 F0 | 	shl	_var04, #1
04938     9C FA 85 F1 | 	sub	objptr, #156
0493c     0F 27 02 FB | 	rdlong	_var05, _var01
04940     FD 24 02 F1 | 	add	_var04, objptr
04944     12 27 52 FC | 	wrword	_var05, _var04
04948                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04948     2F 1F 02 F6 | 	mov	_var01, arg01
0494c     02 1E 66 F0 | 	shl	_var01, #2
04950     AC FA 05 F1 | 	add	objptr, #172
04954     FD 1E 02 F1 | 	add	_var01, objptr
04958     2F 21 02 F6 | 	mov	_var02, arg01
0495c     02 20 66 F0 | 	shl	_var02, #2
04960     A4 FA 85 F1 | 	sub	objptr, #164
04964     0F 23 02 FB | 	rdlong	_var03, _var01
04968     FD 20 02 F1 | 	add	_var02, objptr
0496c     10 23 62 FC | 	wrlong	_var03, _var02
04970                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04970     2F 1F 02 F6 | 	mov	_var01, arg01
04974     02 1E 66 F0 | 	shl	_var01, #2
04978     B4 FA 05 F1 | 	add	objptr, #180
0497c     FD 1E 02 F1 | 	add	_var01, objptr
04980     2F 25 02 F6 | 	mov	_var04, arg01
04984     01 24 66 F0 | 	shl	_var04, #1
04988     A0 FA 85 F1 | 	sub	objptr, #160
0498c     0F 27 02 FB | 	rdlong	_var05, _var01
04990     FD 24 02 F1 | 	add	_var04, objptr
04994     12 27 52 FC | 	wrword	_var05, _var04
04998                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04998     2F 29 02 F6 | 	mov	_var06, arg01
0499c     1F FB 05 F1 | 	add	objptr, #287
049a0     FD 28 02 F1 | 	add	_var06, objptr
049a4     14 1F C2 FA | 	rdbyte	_var01, _var06
049a8     01 1E 06 F1 | 	add	_var01, #1
049ac     FD 5E 02 F1 | 	add	arg01, objptr
049b0     2F 1F 42 FC | 	wrbyte	_var01, arg01
049b4     F6 FB 85 F1 | 	sub	objptr, #502
049b8                 | _trackerplayer_spin2_triggerNote_ret
049b8     2D 00 64 FD | 	ret
049bc                 | 
049bc                 | ' 
049bc                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
049bc                 | _trackerplayer_spin2_processChannel
049bc     08 5A 05 F6 | 	mov	COUNT_, #8
049c0     B0 00 A0 FD | 	call	#pushregs_
049c4     24 F0 07 F1 | 	add	ptra, #36
049c8     AF 5E 62 FC | 	wrlong	arg01, fp
049cc     04 5E 05 F1 | 	add	fp, #4
049d0     AF 60 62 FC | 	wrlong	arg02, fp
049d4     04 5E 05 F1 | 	add	fp, #4
049d8     AF 62 62 FC | 	wrlong	arg03, fp
049dc     04 5E 05 F1 | 	add	fp, #4
049e0     AF 64 62 FC | 	wrlong	arg04, fp
049e4     0C 5E 85 F1 | 	sub	fp, #12
049e8                 | ' 
049e8                 | '   channel := channel & 3
049e8     AF 6C 02 FB | 	rdlong	local01, fp
049ec     03 6C 06 F5 | 	and	local01, #3
049f0     AF 6C 62 FC | 	wrlong	local01, fp
049f4                 | '   cmd     := (effect >> 8) & $F
049f4     0C 5E 05 F1 | 	add	fp, #12
049f8     AF 6C 02 FB | 	rdlong	local01, fp
049fc     08 6C 46 F0 | 	shr	local01, #8
04a00     0F 6C 06 F5 | 	and	local01, #15
04a04     BA FB 05 F1 | 	add	objptr, #442
04a08     FD 6C 42 FC | 	wrbyte	local01, objptr
04a0c                 | '   x       := (effect >> 4) & $F
04a0c     AF 6C 02 FB | 	rdlong	local01, fp
04a10     04 6C 46 F0 | 	shr	local01, #4
04a14     0F 6C 06 F5 | 	and	local01, #15
04a18     03 FA 85 F1 | 	sub	objptr, #3
04a1c     FD 6C 42 FC | 	wrbyte	local01, objptr
04a20                 | '   y       := (effect     ) & $F
04a20     AF 6C 02 FB | 	rdlong	local01, fp
04a24     0F 6C 06 F5 | 	and	local01, #15
04a28     01 FA 05 F1 | 	add	objptr, #1
04a2c     FD 6C 42 FC | 	wrbyte	local01, objptr
04a30                 | '   z       := (effect     ) & $FF
04a30     AF 6C 02 FB | 	rdlong	local01, fp
04a34     0C 5E 85 F1 | 	sub	fp, #12
04a38     FF 6C 06 F5 | 	and	local01, #255
04a3c     01 FA 05 F1 | 	add	objptr, #1
04a40     FD 6C 42 FC | 	wrbyte	local01, objptr
04a44                 | ' 
04a44                 | '   ' Handle everything that executes on "tick zero"
04a44                 | '   if tickCounter == 0
04a44     18 FB 85 F1 | 	sub	objptr, #280
04a48     FD 6C CA FA | 	rdbyte	local01, objptr wz
04a4c     A1 FA 85 F1 | 	sub	objptr, #161
04a50     DC 03 90 5D |  if_ne	jmp	#LR__0168
04a54                 | ' 
04a54                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04a54                 | '     deltaPeriod[channel] := 0
04a54     AF 6C 02 FB | 	rdlong	local01, fp
04a58     02 6C 66 F0 | 	shl	local01, #2
04a5c     EF FA 05 F1 | 	add	objptr, #239
04a60     FD 6C 02 F1 | 	add	local01, objptr
04a64     36 01 68 FC | 	wrlong	#0, local01
04a68                 | '     deltaVolume[channel] := 0
04a68     AF 6C 02 FB | 	rdlong	local01, fp
04a6c     02 6C 66 F0 | 	shl	local01, #2
04a70     20 FA 05 F1 | 	add	objptr, #32
04a74     FD 6C 02 F1 | 	add	local01, objptr
04a78     36 01 68 FC | 	wrlong	#0, local01
04a7c                 | ' 
04a7c                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04a7c                 | '     if sampleNumber > 0
04a7c     04 5E 05 F1 | 	add	fp, #4
04a80     AF 6C 02 FB | 	rdlong	local01, fp
04a84     04 5E 85 F1 | 	sub	fp, #4
04a88     00 6C 5E F2 | 	cmps	local01, #0 wcz
04a8c     0F FB 85 F1 | 	sub	objptr, #271
04a90     20 00 90 ED |  if_be	jmp	#LR__0158
04a94                 | '       sampleNumber_memory[channel] := sampleNumber
04a94     AF 6C 02 FB | 	rdlong	local01, fp
04a98     E0 FB 05 F1 | 	add	objptr, #480
04a9c     FD 6C 02 F1 | 	add	local01, objptr
04aa0     04 5E 05 F1 | 	add	fp, #4
04aa4     AF 6E 02 FB | 	rdlong	local02, fp
04aa8     04 5E 85 F1 | 	sub	fp, #4
04aac     36 6F 42 FC | 	wrbyte	local02, local01
04ab0     E0 FB 85 F1 | 	sub	objptr, #480
04ab4                 | LR__0158
04ab4                 | ' 
04ab4                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04ab4                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04ab4     AF 70 02 FB | 	rdlong	local03, fp
04ab8     E0 FB 05 F1 | 	add	objptr, #480
04abc     FD 70 02 F1 | 	add	local03, objptr
04ac0     38 5F C2 FA | 	rdbyte	arg01, local03
04ac4     20 5E 05 F1 | 	add	fp, #32
04ac8     AF 60 02 F6 | 	mov	arg02, fp
04acc     10 5E 85 F1 | 	sub	fp, #16
04ad0     AF 62 02 F6 | 	mov	arg03, fp
04ad4     31 FA 85 F1 | 	sub	objptr, #49
04ad8     FD 64 02 F6 | 	mov	arg04, objptr
04adc     AF FB 85 F1 | 	sub	objptr, #431
04ae0     04 5E 05 F1 | 	add	fp, #4
04ae4     AF 66 02 F6 | 	mov	arg05, fp
04ae8     04 5E 05 F1 | 	add	fp, #4
04aec     AF 68 02 F6 | 	mov	arg06, fp
04af0     04 5E 05 F1 | 	add	fp, #4
04af4     AF 72 02 F6 | 	mov	local04, fp
04af8     39 75 02 F6 | 	mov	local05, local04
04afc     3A 6B 02 F6 | 	mov	arg07, local05
04b00     1C 5E 85 F1 | 	sub	fp, #28
04b04     F0 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04b08                 | ' 
04b08                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04b08                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04b08                 | '     if sampleNumber > 0
04b08     04 5E 05 F1 | 	add	fp, #4
04b0c     AF 6C 02 FB | 	rdlong	local01, fp
04b10     04 5E 85 F1 | 	sub	fp, #4
04b14     00 6C 5E F2 | 	cmps	local01, #0 wcz
04b18     24 00 90 ED |  if_be	jmp	#LR__0159
04b1c                 | '       currVolume[channel] := volume
04b1c     AF 6C 02 FB | 	rdlong	local01, fp
04b20     02 6C 66 F0 | 	shl	local01, #2
04b24     FF FA 05 F1 | 	add	objptr, #255
04b28     FD 6C 02 F1 | 	add	local01, objptr
04b2c     14 5E 05 F1 | 	add	fp, #20
04b30     AF 6E 02 FB | 	rdlong	local02, fp
04b34     14 5E 85 F1 | 	sub	fp, #20
04b38     36 6F 62 FC | 	wrlong	local02, local01
04b3c     FF FA 85 F1 | 	sub	objptr, #255
04b40                 | LR__0159
04b40                 | ' 
04b40                 | '     ' Handle all commands that executes on "zero tick"
04b40                 | '     sampleOffset := 0
04b40     B3 FB 05 F1 | 	add	objptr, #435
04b44     FD 00 68 FC | 	wrlong	#0, objptr
04b48     B3 FB 85 F1 | 	sub	objptr, #435
04b4c                 | '     handleZeroTickCommands(channel)
04b4c     AF 5E 02 FB | 	rdlong	arg01, fp
04b50     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04b54                 | ' 
04b54                 | '     ' Prepare sample data for triggering (now or later)
04b54                 | '     if period > 0
04b54     08 5E 05 F1 | 	add	fp, #8
04b58     AF 6C 02 FB | 	rdlong	local01, fp
04b5c     08 5E 85 F1 | 	sub	fp, #8
04b60     00 6C 5E F2 | 	cmps	local01, #0 wcz
04b64     D0 02 90 ED |  if_be	jmp	#LR__0169
04b68                 | ' 
04b68                 | '       retunePeriod(@period, fineTune)
04b68     08 5E 05 F1 | 	add	fp, #8
04b6c     AF 5E 02 F6 | 	mov	arg01, fp
04b70     08 5E 85 F1 | 	sub	fp, #8
04b74     AF FB 05 F1 | 	add	objptr, #431
04b78     FD 60 02 FB | 	rdlong	arg02, objptr
04b7c     AF FB 85 F1 | 	sub	objptr, #431
04b80     00 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04b84                 | '       currFineTune[channel]        := fineTune
04b84     AF 6C 02 FB | 	rdlong	local01, fp
04b88     D3 FA 05 F1 | 	add	objptr, #211
04b8c     FD 6C 02 F1 | 	add	local01, objptr
04b90     DC FA 05 F1 | 	add	objptr, #220
04b94     FD 6E 02 FB | 	rdlong	local02, objptr
04b98     36 6F 42 FC | 	wrbyte	local02, local01
04b9c                 | '       lastSetPeriod[channel]       := period
04b9c     AF 6C 02 FB | 	rdlong	local01, fp
04ba0     02 6C 66 F0 | 	shl	local01, #2
04ba4     88 FA 85 F1 | 	sub	objptr, #136
04ba8     FD 6C 02 F1 | 	add	local01, objptr
04bac     08 5E 05 F1 | 	add	fp, #8
04bb0     AF 6E 02 FB | 	rdlong	local02, fp
04bb4     36 6F 62 FC | 	wrlong	local02, local01
04bb8     08 5E 85 F1 | 	sub	fp, #8
04bbc                 | '       lastSetRepeatLength[channel] := repeatLength
04bbc     AF 6C 02 FB | 	rdlong	local01, fp
04bc0     02 6C 66 F0 | 	shl	local01, #2
04bc4     40 FA 05 F1 | 	add	objptr, #64
04bc8     FD 6C 02 F1 | 	add	local01, objptr
04bcc     1C 5E 05 F1 | 	add	fp, #28
04bd0     AF 6E 02 FB | 	rdlong	local02, fp
04bd4     36 6F 62 FC | 	wrlong	local02, local01
04bd8     1C 5E 85 F1 | 	sub	fp, #28
04bdc                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04bdc     AF 6C 02 FB | 	rdlong	local01, fp
04be0     02 6C 66 F0 | 	shl	local01, #2
04be4     10 FA 05 F1 | 	add	objptr, #16
04be8     FD 6C 02 F1 | 	add	local01, objptr
04bec     18 5E 05 F1 | 	add	fp, #24
04bf0     AF 6E 02 FB | 	rdlong	local02, fp
04bf4     36 6F 62 FC | 	wrlong	local02, local01
04bf8                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04bf8     08 5E 05 F1 | 	add	fp, #8
04bfc     AF 6C 02 FB | 	rdlong	local01, fp
04c00     20 5E 85 F1 | 	sub	fp, #32
04c04     3C FA 05 F1 | 	add	objptr, #60
04c08     FD 6E 02 FB | 	rdlong	local02, objptr
04c0c     37 6D 02 F1 | 	add	local01, local02
04c10     AF 76 02 FB | 	rdlong	local06, fp
04c14     02 76 66 F0 | 	shl	local06, #2
04c18     7C FA 85 F1 | 	sub	objptr, #124
04c1c     FD 78 02 F6 | 	mov	local07, objptr
04c20     FD 76 02 F1 | 	add	local06, objptr
04c24     3B 6D 62 FC | 	wrlong	local01, local06
04c28                 | '       lastSetSampleNr[channel]     := sampleNumber
04c28     AF 6C 02 FB | 	rdlong	local01, fp
04c2c     02 6C 66 F0 | 	shl	local01, #2
04c30     10 FA 05 F1 | 	add	objptr, #16
04c34     FD 6C 02 F1 | 	add	local01, objptr
04c38     04 5E 05 F1 | 	add	fp, #4
04c3c     AF 6E 02 FB | 	rdlong	local02, fp
04c40     36 6F 62 FC | 	wrlong	local02, local01
04c44                 | ' 
04c44                 | '       ' This calculates the correct sample length in all situations
04c44                 | '       if repeatLength > 2
04c44     18 5E 05 F1 | 	add	fp, #24
04c48     AF 6C 02 FB | 	rdlong	local01, fp
04c4c     1C 5E 85 F1 | 	sub	fp, #28
04c50     02 6C 5E F2 | 	cmps	local01, #2 wcz
04c54     47 FB 85 F1 | 	sub	objptr, #327
04c58     20 00 90 ED |  if_be	jmp	#LR__0160
04c5c                 | '         sampleLength := repeatPoint + repeatLength
04c5c     18 5E 05 F1 | 	add	fp, #24
04c60     AF 6C 02 FB | 	rdlong	local01, fp
04c64     04 5E 05 F1 | 	add	fp, #4
04c68     AF 6E 02 FB | 	rdlong	local02, fp
04c6c     37 6D 02 F1 | 	add	local01, local02
04c70     0C 5E 85 F1 | 	sub	fp, #12
04c74     AF 6C 62 FC | 	wrlong	local01, fp
04c78     10 5E 85 F1 | 	sub	fp, #16
04c7c                 | LR__0160
04c7c                 | ' 
04c7c                 | '       if sampleLength - sampleOffset < 1
04c7c     10 5E 05 F1 | 	add	fp, #16
04c80     AF 6C 02 FB | 	rdlong	local01, fp
04c84     10 5E 85 F1 | 	sub	fp, #16
04c88     B3 FB 05 F1 | 	add	objptr, #435
04c8c     FD 6E 02 FB | 	rdlong	local02, objptr
04c90     B3 FB 85 F1 | 	sub	objptr, #435
04c94     37 6D 82 F1 | 	sub	local01, local02
04c98     01 6C 5E F2 | 	cmps	local01, #1 wcz
04c9c     1C 00 90 3D |  if_ae	jmp	#LR__0161
04ca0                 | '         lastSetSampleLength[channel] := 1
04ca0     AF 6C 02 FB | 	rdlong	local01, fp
04ca4     02 6C 66 F0 | 	shl	local01, #2
04ca8     57 FB 05 F1 | 	add	objptr, #343
04cac     FD 6C 02 F1 | 	add	local01, objptr
04cb0     36 03 68 FC | 	wrlong	#1, local01
04cb4                 | '       else
04cb4     57 FB 85 F1 | 	sub	objptr, #343
04cb8     34 00 90 FD | 	jmp	#LR__0162
04cbc                 | LR__0161
04cbc                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04cbc     10 5E 05 F1 | 	add	fp, #16
04cc0     AF 6C 02 FB | 	rdlong	local01, fp
04cc4     10 5E 85 F1 | 	sub	fp, #16
04cc8     B3 FB 05 F1 | 	add	objptr, #435
04ccc     FD 6E 02 FB | 	rdlong	local02, objptr
04cd0     37 6D 82 F1 | 	sub	local01, local02
04cd4     AF 76 02 FB | 	rdlong	local06, fp
04cd8     02 76 66 F0 | 	shl	local06, #2
04cdc     5C FA 85 F1 | 	sub	objptr, #92
04ce0     FD 78 02 F6 | 	mov	local07, objptr
04ce4     FD 76 02 F1 | 	add	local06, objptr
04ce8     3B 6D 62 FC | 	wrlong	local01, local06
04cec     57 FB 85 F1 | 	sub	objptr, #343
04cf0                 | LR__0162
04cf0                 | ' 
04cf0                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04cf0                 | '       if sampleOffset > sampleLength
04cf0     B3 FB 05 F1 | 	add	objptr, #435
04cf4     FD 6C 02 FB | 	rdlong	local01, objptr
04cf8     B3 FB 85 F1 | 	sub	objptr, #435
04cfc     10 5E 05 F1 | 	add	fp, #16
04d00     AF 6E 02 FB | 	rdlong	local02, fp
04d04     10 5E 85 F1 | 	sub	fp, #16
04d08     37 6D 5A F2 | 	cmps	local01, local02 wcz
04d0c     54 00 90 ED |  if_be	jmp	#LR__0163
04d10                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04d10     20 5E 05 F1 | 	add	fp, #32
04d14     AF 6C 02 FB | 	rdlong	local01, fp
04d18     08 5E 85 F1 | 	sub	fp, #8
04d1c     AF 6E 02 FB | 	rdlong	local02, fp
04d20     18 5E 85 F1 | 	sub	fp, #24
04d24     37 6D 02 F1 | 	add	local01, local02
04d28     AF 76 02 FB | 	rdlong	local06, fp
04d2c     02 76 66 F0 | 	shl	local06, #2
04d30     37 FB 05 F1 | 	add	objptr, #311
04d34     FD 78 02 F6 | 	mov	local07, objptr
04d38     FD 76 02 F1 | 	add	local06, objptr
04d3c     3B 6D 62 FC | 	wrlong	local01, local06
04d40                 | '         lastSetSampleLength[channel] := repeatLength
04d40     AF 6C 02 FB | 	rdlong	local01, fp
04d44     02 6C 66 F0 | 	shl	local01, #2
04d48     20 FA 05 F1 | 	add	objptr, #32
04d4c     FD 6C 02 F1 | 	add	local01, objptr
04d50     1C 5E 05 F1 | 	add	fp, #28
04d54     AF 6E 02 FB | 	rdlong	local02, fp
04d58     1C 5E 85 F1 | 	sub	fp, #28
04d5c     36 6F 62 FC | 	wrlong	local02, local01
04d60     57 FB 85 F1 | 	sub	objptr, #343
04d64                 | LR__0163
04d64                 | ' 
04d64                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04d64                 | '       ifnot cmd == $3 || cmd == $5
04d64     BA FB 05 F1 | 	add	objptr, #442
04d68     FD 6C C2 FA | 	rdbyte	local01, objptr
04d6c     BA FB 85 F1 | 	sub	objptr, #442
04d70     03 6C 0E F2 | 	cmp	local01, #3 wz
04d74     54 00 90 AD |  if_e	jmp	#LR__0166
04d78     BA FB 05 F1 | 	add	objptr, #442
04d7c     FD 7A C2 FA | 	rdbyte	local08, objptr
04d80     BA FB 85 F1 | 	sub	objptr, #442
04d84     3D 6F 02 F6 | 	mov	local02, local08
04d88     05 6E 0E F2 | 	cmp	local02, #5 wz
04d8c     3C 00 90 AD |  if_e	jmp	#LR__0166
04d90                 | '         ifnot cmd == $E && x == $D
04d90     BA FB 05 F1 | 	add	objptr, #442
04d94     FD 70 C2 FA | 	rdbyte	local03, objptr
04d98     BA FB 85 F1 | 	sub	objptr, #442
04d9c     38 6D 02 F6 | 	mov	local01, local03
04da0     0E 6C 0E F2 | 	cmp	local01, #14 wz
04da4     18 00 90 5D |  if_ne	jmp	#LR__0164
04da8     B7 FB 05 F1 | 	add	objptr, #439
04dac     FD 7A C2 FA | 	rdbyte	local08, objptr
04db0     B7 FB 85 F1 | 	sub	objptr, #439
04db4     3D 6F 02 F6 | 	mov	local02, local08
04db8     0D 6E 0E F2 | 	cmp	local02, #13 wz
04dbc     0C 00 90 AD |  if_e	jmp	#LR__0165
04dc0                 | LR__0164
04dc0                 | '           triggerNote(channel)
04dc0     AF 6C 02 FB | 	rdlong	local01, fp
04dc4     36 5F 02 F6 | 	mov	arg01, local01
04dc8     E0 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04dcc                 | LR__0165
04dcc                 | LR__0166
04dcc                 | ' 
04dcc                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04dcc                 | '       if resetTremolo[channel] > 0
04dcc     AF 6C 02 FB | 	rdlong	local01, fp
04dd0     8F FB 05 F1 | 	add	objptr, #399
04dd4     FD 6C 02 F1 | 	add	local01, objptr
04dd8     36 6F C2 FA | 	rdbyte	local02, local01
04ddc     00 6E 5E F2 | 	cmps	local02, #0 wcz
04de0     8F FB 85 F1 | 	sub	objptr, #399
04de4     14 00 90 ED |  if_be	jmp	#LR__0167
04de8                 | '         tremoloPos[channel] := 0
04de8     AF 6C 02 FB | 	rdlong	local01, fp
04dec     8B FB 05 F1 | 	add	objptr, #395
04df0     FD 6C 02 F1 | 	add	local01, objptr
04df4     36 01 48 FC | 	wrbyte	#0, local01
04df8     8B FB 85 F1 | 	sub	objptr, #395
04dfc                 | LR__0167
04dfc                 | ' 
04dfc                 | '       if resetVibrato[channel] > 0
04dfc     AF 6C 02 FB | 	rdlong	local01, fp
04e00     93 FB 05 F1 | 	add	objptr, #403
04e04     FD 6C 02 F1 | 	add	local01, objptr
04e08     36 6F C2 FA | 	rdbyte	local02, local01
04e0c     00 6E 5E F2 | 	cmps	local02, #0 wcz
04e10     93 FB 85 F1 | 	sub	objptr, #403
04e14     20 00 90 ED |  if_be	jmp	#LR__0169
04e18                 | '         vibratoPos[channel] := 0
04e18     AF 6C 02 FB | 	rdlong	local01, fp
04e1c     87 FB 05 F1 | 	add	objptr, #391
04e20     FD 6C 02 F1 | 	add	local01, objptr
04e24     36 01 48 FC | 	wrbyte	#0, local01
04e28     87 FB 85 F1 | 	sub	objptr, #391
04e2c                 | ' 
04e2c                 | '   else
04e2c     08 00 90 FD | 	jmp	#LR__0169
04e30                 | LR__0168
04e30                 | '     ' Handle commands that executes on all "non zero ticks"
04e30                 | '     handleNonZeroTickCommands(channel)
04e30     AF 5E 02 FB | 	rdlong	arg01, fp
04e34     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04e38                 | LR__0169
04e38                 | ' 
04e38                 | '   ' Handle commands that executes on every tick
04e38                 | '   handleEveryTickCommands(channel)
04e38     AF 5E 02 FB | 	rdlong	arg01, fp
04e3c     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04e40                 | ' 
04e40                 | '   ' Handle boundaries that should be kept
04e40                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04e40     AF 70 02 FB | 	rdlong	local03, fp
04e44     02 70 66 F0 | 	shl	local03, #2
04e48     DF FA 05 F1 | 	add	objptr, #223
04e4c     FD 70 02 F1 | 	add	local03, objptr
04e50     38 6D 02 FB | 	rdlong	local01, local03
04e54     01 00 00 FF 
04e58     58 6D 66 F3 | 	fles	local01, ##856
04e5c     AF 7A 02 FB | 	rdlong	local08, fp
04e60     02 7A 66 F0 | 	shl	local08, #2
04e64     FD 7A 02 F1 | 	add	local08, objptr
04e68     3D 6D 62 FC | 	wrlong	local01, local08
04e6c                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04e6c     AF 70 02 FB | 	rdlong	local03, fp
04e70     02 70 66 F0 | 	shl	local03, #2
04e74     FD 70 02 F1 | 	add	local03, objptr
04e78     38 6D 02 FB | 	rdlong	local01, local03
04e7c     71 6C 46 F3 | 	fges	local01, #113
04e80     AF 7A 02 FB | 	rdlong	local08, fp
04e84     02 7A 66 F0 | 	shl	local08, #2
04e88     FD 7A 02 F1 | 	add	local08, objptr
04e8c     3D 6D 62 FC | 	wrlong	local01, local08
04e90                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04e90     AF 70 02 FB | 	rdlong	local03, fp
04e94     02 70 66 F0 | 	shl	local03, #2
04e98     20 FA 05 F1 | 	add	objptr, #32
04e9c     FD 70 02 F1 | 	add	local03, objptr
04ea0     38 6D 02 FB | 	rdlong	local01, local03
04ea4     40 6C 66 F3 | 	fles	local01, #64
04ea8     AF 7A 02 FB | 	rdlong	local08, fp
04eac     02 7A 66 F0 | 	shl	local08, #2
04eb0     FD 7A 02 F1 | 	add	local08, objptr
04eb4     3D 6D 62 FC | 	wrlong	local01, local08
04eb8                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04eb8     AF 70 02 FB | 	rdlong	local03, fp
04ebc     02 70 66 F0 | 	shl	local03, #2
04ec0     FD 70 02 F1 | 	add	local03, objptr
04ec4     38 6D 02 FB | 	rdlong	local01, local03
04ec8     00 6C 46 F3 | 	fges	local01, #0
04ecc     AF 7A 02 FB | 	rdlong	local08, fp
04ed0     02 7A 66 F0 | 	shl	local08, #2
04ed4     FD 7A 02 F1 | 	add	local08, objptr
04ed8     3D 6D 62 FC | 	wrlong	local01, local08
04edc     FF FA 85 F1 | 	sub	objptr, #255
04ee0     AF F0 03 F6 | 	mov	ptra, fp
04ee4     BA 00 A0 FD | 	call	#popregs_
04ee8                 | _trackerplayer_spin2_processChannel_ret
04ee8     2D 00 64 FD | 	ret
04eec                 | 
04eec                 | ' 
04eec                 | ' 
04eec                 | ' ' Handle all commands that executes on tick zero
04eec                 | ' '
04eec                 | ' PRI handleZeroTickCommands(channel)
04eec                 | _trackerplayer_spin2_handleZeroTickCommands
04eec     2F 1F 02 F6 | 	mov	_var01, arg01
04ef0                 | ' 
04ef0                 | '   CASE_FAST cmd
04ef0     BA FB 05 F1 | 	add	objptr, #442
04ef4     FD 20 C2 FA | 	rdbyte	_var02, objptr
04ef8     BA FB 85 F1 | 	sub	objptr, #442
04efc     10 23 02 F6 | 	mov	_var03, _var02
04f00     09 22 86 F1 | 	sub	_var03, #9
04f04     07 22 26 F3 | 	fle	_var03, #7
04f08     11 25 02 F6 | 	mov	_var04, _var03
04f0c     30 24 62 FD | 	jmprel	_var04
04f10                 | LR__0170
04f10     1C 00 90 FD | 	jmp	#LR__0171
04f14     30 04 90 FD | 	jmp	#LR__0194
04f18     64 00 90 FD | 	jmp	#LR__0173
04f1c     84 00 90 FD | 	jmp	#LR__0174
04f20     A0 00 90 FD | 	jmp	#LR__0175
04f24     D0 00 90 FD | 	jmp	#LR__0176
04f28     9C 03 90 FD | 	jmp	#LR__0191
04f2c     18 04 90 FD | 	jmp	#LR__0194
04f30                 | LR__0171
04f30                 | ' 
04f30                 | '     $9:                          ' Set sample offset
04f30                 | '       if z > 0
04f30     B9 FB 05 F1 | 	add	objptr, #441
04f34     FD 26 C2 FA | 	rdbyte	_var05, objptr
04f38     B9 FB 85 F1 | 	sub	objptr, #441
04f3c     00 26 5E F2 | 	cmps	_var05, #0 wcz
04f40     1C 00 90 ED |  if_be	jmp	#LR__0172
04f44                 | '         cmd9_memoryZ[channel] := z
04f44     0F 27 02 F6 | 	mov	_var05, _var01
04f48     DC FB 05 F1 | 	add	objptr, #476
04f4c     FD 26 02 F1 | 	add	_var05, objptr
04f50     23 FA 85 F1 | 	sub	objptr, #35
04f54     FD 28 C2 FA | 	rdbyte	_var06, objptr
04f58     B9 FB 85 F1 | 	sub	objptr, #441
04f5c     13 29 42 FC | 	wrbyte	_var06, _var05
04f60                 | LR__0172
04f60                 | ' 
04f60                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04f60     DC FB 05 F1 | 	add	objptr, #476
04f64     FD 1E 02 F1 | 	add	_var01, objptr
04f68     0F 27 C2 FA | 	rdbyte	_var05, _var01
04f6c     08 26 66 F0 | 	shl	_var05, #8
04f70     29 FA 85 F1 | 	sub	objptr, #41
04f74     FD 26 62 FC | 	wrlong	_var05, objptr
04f78     B3 FB 85 F1 | 	sub	objptr, #435
04f7c     C8 03 90 FD | 	jmp	#LR__0194
04f80                 | LR__0173
04f80                 | ' 
04f80                 | '     $B:                          ' Jump position
04f80                 | '       cmdB_memoryZ := z
04f80     B9 FB 05 F1 | 	add	objptr, #441
04f84     FD 26 C2 FA | 	rdbyte	_var05, objptr
04f88     2E FA 05 F1 | 	add	objptr, #46
04f8c     FD 26 42 FC | 	wrbyte	_var05, objptr
04f90                 | '       cmdB_updatePosition := true
04f90     01 FA 05 F1 | 	add	objptr, #1
04f94     FF FF FF FF 
04f98     FD FE 4B FC | 	wrbyte	##-1, objptr
04f9c     E8 FB 85 F1 | 	sub	objptr, #488
04fa0     A4 03 90 FD | 	jmp	#LR__0194
04fa4                 | LR__0174
04fa4                 | ' 
04fa4                 | '     $C:                          ' Set volume
04fa4                 | '       currVolume[channel] := z
04fa4     02 1E 66 F0 | 	shl	_var01, #2
04fa8     FF FA 05 F1 | 	add	objptr, #255
04fac     FD 1E 02 F1 | 	add	_var01, objptr
04fb0     BA FA 05 F1 | 	add	objptr, #186
04fb4     FD 28 C2 FA | 	rdbyte	_var06, objptr
04fb8     B9 FB 85 F1 | 	sub	objptr, #441
04fbc     0F 29 62 FC | 	wrlong	_var06, _var01
04fc0     84 03 90 FD | 	jmp	#LR__0194
04fc4                 | LR__0175
04fc4                 | ' 
04fc4                 | '     $D:                          ' Pattern break
04fc4                 | '       cmdD_memoryX := x
04fc4     B7 FB 05 F1 | 	add	objptr, #439
04fc8     FD 26 C2 FA | 	rdbyte	_var05, objptr
04fcc     2D FA 05 F1 | 	add	objptr, #45
04fd0     FD 26 42 FC | 	wrbyte	_var05, objptr
04fd4                 | '       cmdD_memoryY := y
04fd4     2C FA 85 F1 | 	sub	objptr, #44
04fd8     FD 26 C2 FA | 	rdbyte	_var05, objptr
04fdc     2D FA 05 F1 | 	add	objptr, #45
04fe0     FD 26 42 FC | 	wrbyte	_var05, objptr
04fe4                 | '       cmdD_updatePosition := true
04fe4     01 FA 05 F1 | 	add	objptr, #1
04fe8     FF FF FF FF 
04fec     FD FE 4B FC | 	wrbyte	##-1, objptr
04ff0     E6 FB 85 F1 | 	sub	objptr, #486
04ff4     50 03 90 FD | 	jmp	#LR__0194
04ff8                 | LR__0176
04ff8                 | ' 
04ff8                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04ff8                 | ' 
04ff8                 | '       CASE_FAST x
04ff8     B7 FB 05 F1 | 	add	objptr, #439
04ffc     FD 2A C2 FA | 	rdbyte	_var07, objptr
05000     B7 FB 85 F1 | 	sub	objptr, #439
05004     15 27 02 F6 | 	mov	_var05, _var07
05008     0F 26 26 F3 | 	fle	_var05, #15
0500c     13 2D 02 F6 | 	mov	_var08, _var05
05010     30 2C 62 FD | 	jmprel	_var08
05014                 | LR__0177
05014     3C 00 90 FD | 	jmp	#LR__0178
05018     58 00 90 FD | 	jmp	#LR__0179
0501c     8C 00 90 FD | 	jmp	#LR__0180
05020     C0 00 90 FD | 	jmp	#LR__0181
05024     DC 00 90 FD | 	jmp	#LR__0182
05028     14 01 90 FD | 	jmp	#LR__0183
0502c     28 01 90 FD | 	jmp	#LR__0184
05030     C0 01 90 FD | 	jmp	#LR__0187
05034     10 03 90 FD | 	jmp	#LR__0194
05038     0C 03 90 FD | 	jmp	#LR__0194
0503c     F0 01 90 FD | 	jmp	#LR__0188
05040     24 02 90 FD | 	jmp	#LR__0189
05044     00 03 90 FD | 	jmp	#LR__0194
05048     FC 02 90 FD | 	jmp	#LR__0194
0504c     50 02 90 FD | 	jmp	#LR__0190
05050     F4 02 90 FD | 	jmp	#LR__0194
05054                 | LR__0178
05054                 | ' 
05054                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
05054     B8 FB 05 F1 | 	add	objptr, #440
05058     FD 28 C2 FA | 	rdbyte	_var06, objptr
0505c     14 29 22 F6 | 	not	_var06, _var06
05060     01 28 06 F5 | 	and	_var06, #1
05064     03 FA 05 F1 | 	add	objptr, #3
05068     FD 28 42 FC | 	wrbyte	_var06, objptr
0506c     BB FB 85 F1 | 	sub	objptr, #443
05070     D4 02 90 FD | 	jmp	#LR__0194
05074                 | LR__0179
05074                 | ' 
05074                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
05074     0F 2F 02 F6 | 	mov	_var09, _var01
05078     02 2E 66 F0 | 	shl	_var09, #2
0507c     DF FA 05 F1 | 	add	objptr, #223
05080     FD 2E 02 F1 | 	add	_var09, objptr
05084     17 29 02 FB | 	rdlong	_var06, _var09
05088     D9 FA 05 F1 | 	add	objptr, #217
0508c     FD 30 C2 FA | 	rdbyte	_var10, objptr
05090     18 29 82 F1 | 	sub	_var06, _var10
05094     02 1E 66 F0 | 	shl	_var01, #2
05098     D9 FA 85 F1 | 	sub	objptr, #217
0509c     FD 1E 02 F1 | 	add	_var01, objptr
050a0     0F 29 62 FC | 	wrlong	_var06, _var01
050a4     DF FA 85 F1 | 	sub	objptr, #223
050a8     9C 02 90 FD | 	jmp	#LR__0194
050ac                 | LR__0180
050ac                 | ' 
050ac                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
050ac     0F 2F 02 F6 | 	mov	_var09, _var01
050b0     02 2E 66 F0 | 	shl	_var09, #2
050b4     DF FA 05 F1 | 	add	objptr, #223
050b8     FD 2E 02 F1 | 	add	_var09, objptr
050bc     17 29 02 FB | 	rdlong	_var06, _var09
050c0     D9 FA 05 F1 | 	add	objptr, #217
050c4     FD 30 C2 FA | 	rdbyte	_var10, objptr
050c8     18 29 02 F1 | 	add	_var06, _var10
050cc     02 1E 66 F0 | 	shl	_var01, #2
050d0     D9 FA 85 F1 | 	sub	objptr, #217
050d4     FD 1E 02 F1 | 	add	_var01, objptr
050d8     0F 29 62 FC | 	wrlong	_var06, _var01
050dc     DF FA 85 F1 | 	sub	objptr, #223
050e0     64 02 90 FD | 	jmp	#LR__0194
050e4                 | LR__0181
050e4                 | ' 
050e4                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
050e4     B8 FB 05 F1 | 	add	objptr, #440
050e8     FD 28 C2 FA | 	rdbyte	_var06, objptr
050ec     01 28 06 F5 | 	and	_var06, #1
050f0     04 FA 05 F1 | 	add	objptr, #4
050f4     FD 1E 02 F1 | 	add	_var01, objptr
050f8     0F 29 42 FC | 	wrbyte	_var06, _var01
050fc     BC FB 85 F1 | 	sub	objptr, #444
05100     44 02 90 FD | 	jmp	#LR__0194
05104                 | LR__0182
05104                 | ' 
05104                 | '         $4:                                      ' Set vibrato waveform type
05104                 | '           vibratoType[channel]  := y & 3
05104     B8 FB 05 F1 | 	add	objptr, #440
05108     FD 28 C2 FA | 	rdbyte	_var06, objptr
0510c     03 28 06 F5 | 	and	_var06, #3
05110     0F 33 02 F6 | 	mov	_var11, _var01
05114     08 FA 05 F1 | 	add	objptr, #8
05118     FD 32 02 F1 | 	add	_var11, objptr
0511c     19 29 42 FC | 	wrbyte	_var06, _var11
05120                 | '           resetVibrato[channel] := y & 4
05120     08 FA 85 F1 | 	sub	objptr, #8
05124     FD 28 C2 FA | 	rdbyte	_var06, objptr
05128     04 28 06 F5 | 	and	_var06, #4
0512c     25 FA 85 F1 | 	sub	objptr, #37
05130     FD 1E 02 F1 | 	add	_var01, objptr
05134     0F 29 42 FC | 	wrbyte	_var06, _var01
05138     93 FB 85 F1 | 	sub	objptr, #403
0513c     08 02 90 FD | 	jmp	#LR__0194
05140                 | LR__0183
05140                 | ' 
05140                 | '         $5: fineTune := y                        ' Set finetune
05140     B8 FB 05 F1 | 	add	objptr, #440
05144     FD 28 C2 FA | 	rdbyte	_var06, objptr
05148     09 FA 85 F1 | 	sub	objptr, #9
0514c     FD 28 62 FC | 	wrlong	_var06, objptr
05150     AF FB 85 F1 | 	sub	objptr, #431
05154     F0 01 90 FD | 	jmp	#LR__0194
05158                 | LR__0184
05158                 | ' 
05158                 | '         $6:                                      ' Pattern looping
05158                 | '           if y == 0
05158     B8 FB 05 F1 | 	add	objptr, #440
0515c     FD 28 CA FA | 	rdbyte	_var06, objptr wz
05160     B8 FB 85 F1 | 	sub	objptr, #440
05164     1C 00 90 5D |  if_ne	jmp	#LR__0185
05168                 | '             cmdE6_memory[channel] := patternRow
05168     E9 FB 05 F1 | 	add	objptr, #489
0516c     FD 1E 02 F1 | 	add	_var01, objptr
05170     47 FB 85 F1 | 	sub	objptr, #327
05174     FD 32 C2 FA | 	rdbyte	_var11, objptr
05178     A2 FA 85 F1 | 	sub	objptr, #162
0517c     0F 33 42 FC | 	wrbyte	_var11, _var01
05180                 | '           else
05180     C4 01 90 FD | 	jmp	#LR__0194
05184                 | LR__0185
05184                 | '             if ++cmdE6_counter[channel] <= y
05184     0F 2F 02 F6 | 	mov	_var09, _var01
05188     ED FB 05 F1 | 	add	objptr, #493
0518c     FD 2E 02 F1 | 	add	_var09, objptr
05190     17 29 C2 FA | 	rdbyte	_var06, _var09
05194     01 28 06 F1 | 	add	_var06, #1
05198     0F 31 02 F6 | 	mov	_var10, _var01
0519c     FD 30 02 F1 | 	add	_var10, objptr
051a0     18 29 42 FC | 	wrbyte	_var06, _var10
051a4     18 35 C2 FA | 	rdbyte	_var12, _var10
051a8     35 FA 85 F1 | 	sub	objptr, #53
051ac     FD 36 C2 FA | 	rdbyte	_var13, objptr
051b0     B8 FB 85 F1 | 	sub	objptr, #440
051b4     1B 35 5A F2 | 	cmps	_var12, _var13 wcz
051b8     24 00 90 1D |  if_a	jmp	#LR__0186
051bc                 | '               cmdE6_updatePosition[channel] := true
051bc     F1 FB 05 F1 | 	add	objptr, #497
051c0     FD 1E 02 F1 | 	add	_var01, objptr
051c4     FF FF FF FF 
051c8     0F FF 4B FC | 	wrbyte	##-1, _var01
051cc                 | '               cmdE6_updatePositionCommon    := true
051cc     04 FA 05 F1 | 	add	objptr, #4
051d0     FF FF FF FF 
051d4     FD FE 4B FC | 	wrbyte	##-1, objptr
051d8     F5 FB 85 F1 | 	sub	objptr, #501
051dc                 | '             else
051dc     68 01 90 FD | 	jmp	#LR__0194
051e0                 | LR__0186
051e0                 | '               cmdE6_counter[channel] := 0
051e0     ED FB 05 F1 | 	add	objptr, #493
051e4     FD 1E 02 F1 | 	add	_var01, objptr
051e8     0F 01 48 FC | 	wrbyte	#0, _var01
051ec     ED FB 85 F1 | 	sub	objptr, #493
051f0     54 01 90 FD | 	jmp	#LR__0194
051f4                 | LR__0187
051f4                 | ' 
051f4                 | '         $7:                                      ' Set tremolo waveform type
051f4                 | '           tremoloType[channel] := y & 3
051f4     B8 FB 05 F1 | 	add	objptr, #440
051f8     FD 28 C2 FA | 	rdbyte	_var06, objptr
051fc     03 28 06 F5 | 	and	_var06, #3
05200     0F 33 02 F6 | 	mov	_var11, _var01
05204     0C FA 05 F1 | 	add	objptr, #12
05208     FD 32 02 F1 | 	add	_var11, objptr
0520c     19 29 42 FC | 	wrbyte	_var06, _var11
05210                 | '           resetTremolo[channel] := y & 4
05210     0C FA 85 F1 | 	sub	objptr, #12
05214     FD 28 C2 FA | 	rdbyte	_var06, objptr
05218     04 28 06 F5 | 	and	_var06, #4
0521c     29 FA 85 F1 | 	sub	objptr, #41
05220     FD 1E 02 F1 | 	add	_var01, objptr
05224     0F 29 42 FC | 	wrbyte	_var06, _var01
05228     8F FB 85 F1 | 	sub	objptr, #399
0522c     18 01 90 FD | 	jmp	#LR__0194
05230                 | LR__0188
05230                 | ' 
05230                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05230     0F 2F 02 F6 | 	mov	_var09, _var01
05234     02 2E 66 F0 | 	shl	_var09, #2
05238     FF FA 05 F1 | 	add	objptr, #255
0523c     FD 2E 02 F1 | 	add	_var09, objptr
05240     17 29 02 FB | 	rdlong	_var06, _var09
05244     B9 FA 05 F1 | 	add	objptr, #185
05248     FD 30 C2 FA | 	rdbyte	_var10, objptr
0524c     18 29 02 F1 | 	add	_var06, _var10
05250     02 1E 66 F0 | 	shl	_var01, #2
05254     B9 FA 85 F1 | 	sub	objptr, #185
05258     FD 1E 02 F1 | 	add	_var01, objptr
0525c     0F 29 62 FC | 	wrlong	_var06, _var01
05260     FF FA 85 F1 | 	sub	objptr, #255
05264     E0 00 90 FD | 	jmp	#LR__0194
05268                 | LR__0189
05268                 | ' 
05268                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05268     0F 2F 02 F6 | 	mov	_var09, _var01
0526c     02 2E 66 F0 | 	shl	_var09, #2
05270     FF FA 05 F1 | 	add	objptr, #255
05274     FD 2E 02 F1 | 	add	_var09, objptr
05278     17 29 02 FB | 	rdlong	_var06, _var09
0527c     B9 FA 05 F1 | 	add	objptr, #185
05280     FD 30 C2 FA | 	rdbyte	_var10, objptr
05284     18 29 82 F1 | 	sub	_var06, _var10
05288     02 1E 66 F0 | 	shl	_var01, #2
0528c     B9 FA 85 F1 | 	sub	objptr, #185
05290     FD 1E 02 F1 | 	add	_var01, objptr
05294     0F 29 62 FC | 	wrlong	_var06, _var01
05298     FF FA 85 F1 | 	sub	objptr, #255
0529c     A8 00 90 FD | 	jmp	#LR__0194
052a0                 | LR__0190
052a0                 | ' 
052a0                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
052a0     B8 FB 05 F1 | 	add	objptr, #440
052a4     FD 2E C2 FA | 	rdbyte	_var09, objptr
052a8     14 FB 85 F1 | 	sub	objptr, #276
052ac     FD 30 C2 FA | 	rdbyte	_var10, objptr
052b0     18 2F 02 FD | 	qmul	_var09, _var10
052b4     18 28 62 FD | 	getqx	_var06
052b8     01 FA 05 F1 | 	add	objptr, #1
052bc     FD 28 42 FC | 	wrbyte	_var06, objptr
052c0     A5 FA 85 F1 | 	sub	objptr, #165
052c4     80 00 90 FD | 	jmp	#LR__0194
052c8                 | LR__0191
052c8                 | ' 
052c8                 | '     $F:                          ' Set speed
052c8                 | '       if z < 32
052c8     B9 FB 05 F1 | 	add	objptr, #441
052cc     FD 26 C2 FA | 	rdbyte	_var05, objptr
052d0     B9 FB 85 F1 | 	sub	objptr, #441
052d4     20 26 5E F2 | 	cmps	_var05, #32 wcz
052d8     18 00 90 3D |  if_ae	jmp	#LR__0192
052dc                 | '         currentSongSpeed := z
052dc     B9 FB 05 F1 | 	add	objptr, #441
052e0     FD 26 C2 FA | 	rdbyte	_var05, objptr
052e4     15 FB 85 F1 | 	sub	objptr, #277
052e8     FD 26 42 FC | 	wrbyte	_var05, objptr
052ec     A4 FA 85 F1 | 	sub	objptr, #164
052f0                 | '       else
052f0     54 00 90 FD | 	jmp	#LR__0193
052f4                 | LR__0192
052f4                 | '         ticksPerMinute := z * 24
052f4     B9 FB 05 F1 | 	add	objptr, #441
052f8     FD 2A C2 FA | 	rdbyte	_var07, objptr
052fc     15 27 02 F6 | 	mov	_var05, _var07
05300     01 26 66 F0 | 	shl	_var05, #1
05304     15 27 02 F1 | 	add	_var05, _var07
05308     03 26 66 F0 | 	shl	_var05, #3
0530c     12 FA 85 F1 | 	sub	objptr, #18
05310     FD 26 62 FC | 	wrlong	_var05, objptr
05314     A7 FB 85 F1 | 	sub	objptr, #423
05318                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05318     FD 98 02 FB | 	rdlong	muldiva_, objptr
0531c     A7 FB 05 F1 | 	add	objptr, #423
05320     FD 9A 02 FB | 	rdlong	muldivb_, objptr
05324     A7 FB 85 F1 | 	sub	objptr, #423
05328     C6 00 A0 FD | 	call	#divide_
0532c     4D 29 02 F6 | 	mov	_var06, muldivb_
05330     04 28 66 F0 | 	shl	_var06, #4
05334     4D 29 82 F1 | 	sub	_var06, muldivb_
05338     02 28 66 F0 | 	shl	_var06, #2
0533c     AB FB 05 F1 | 	add	objptr, #427
05340     FD 28 62 FC | 	wrlong	_var06, objptr
05344     AB FB 85 F1 | 	sub	objptr, #427
05348                 | LR__0193
05348                 | LR__0194
05348                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05348     2D 00 64 FD | 	ret
0534c                 | 
0534c                 | ' 
0534c                 | ' 
0534c                 | ' ' Handle all commands that executes on "non zero ticks"
0534c                 | ' '
0534c                 | ' PRI handleNonZeroTickCommands(channel)
0534c                 | _trackerplayer_spin2_handleNonZeroTickCommands
0534c     0A 5A 05 F6 | 	mov	COUNT_, #10
05350     B0 00 A0 FD | 	call	#pushregs_
05354     2F 6D 02 F6 | 	mov	local01, arg01
05358                 | ' 
05358                 | '   CASE_FAST cmd
05358     BA FB 05 F1 | 	add	objptr, #442
0535c     FD 6E C2 FA | 	rdbyte	local02, objptr
05360     BA FB 85 F1 | 	sub	objptr, #442
05364     37 71 02 F6 | 	mov	local03, local02
05368     01 70 86 F1 | 	sub	local03, #1
0536c     0E 70 26 F3 | 	fle	local03, #14
05370     38 73 02 F6 | 	mov	local04, local03
05374     30 72 62 FD | 	jmprel	local04
05378                 | LR__0195
05378     38 00 90 FD | 	jmp	#LR__0196
0537c     A0 00 90 FD | 	jmp	#LR__0197
05380     D4 00 90 FD | 	jmp	#LR__0198
05384     1C 02 90 FD | 	jmp	#LR__0208
05388     20 01 90 FD | 	jmp	#LR__0200
0538c     48 01 90 FD | 	jmp	#LR__0201
05390     50 01 90 FD | 	jmp	#LR__0202
05394     0C 02 90 FD | 	jmp	#LR__0208
05398     08 02 90 FD | 	jmp	#LR__0208
0539c     B0 01 90 FD | 	jmp	#LR__0205
053a0     00 02 90 FD | 	jmp	#LR__0208
053a4     FC 01 90 FD | 	jmp	#LR__0208
053a8     F8 01 90 FD | 	jmp	#LR__0208
053ac     AC 01 90 FD | 	jmp	#LR__0206
053b0     F0 01 90 FD | 	jmp	#LR__0208
053b4                 | LR__0196
053b4                 | ' 
053b4                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
053b4     36 75 02 F6 | 	mov	local05, local01
053b8     02 74 66 F0 | 	shl	local05, #2
053bc     DF FA 05 F1 | 	add	objptr, #223
053c0     FD 74 02 F1 | 	add	local05, objptr
053c4     3A 77 02 FB | 	rdlong	local06, local05
053c8     DA FA 05 F1 | 	add	objptr, #218
053cc     FD 78 C2 FA | 	rdbyte	local07, objptr
053d0     3C 77 82 F1 | 	sub	local06, local07
053d4     36 7B 02 F6 | 	mov	local08, local01
053d8     02 7A 66 F0 | 	shl	local08, #2
053dc     DA FA 85 F1 | 	sub	objptr, #218
053e0     FD 7A 02 F1 | 	add	local08, objptr
053e4     3D 77 62 FC | 	wrlong	local06, local08
053e8                 | ' 
053e8                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
053e8                 | '       if currPeriod[channel] < 0
053e8     36 77 02 F6 | 	mov	local06, local01
053ec     02 76 66 F0 | 	shl	local06, #2
053f0     FD 76 02 F1 | 	add	local06, objptr
053f4     3B 7D 02 FB | 	rdlong	local09, local06
053f8     00 7C 5E F2 | 	cmps	local09, #0 wcz
053fc     DF FA 85 F1 | 	sub	objptr, #223
05400     A0 01 90 3D |  if_ae	jmp	#LR__0208
05404                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05404     02 6C 66 F0 | 	shl	local01, #2
05408     DF FA 05 F1 | 	add	objptr, #223
0540c     FD 6C 02 F1 | 	add	local01, objptr
05410     01 00 80 FF 
05414     36 B1 6A FC | 	wrlong	##856, local01
05418     DF FA 85 F1 | 	sub	objptr, #223
0541c     84 01 90 FD | 	jmp	#LR__0208
05420                 | LR__0197
05420                 | ' 
05420                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05420     36 75 02 F6 | 	mov	local05, local01
05424     02 74 66 F0 | 	shl	local05, #2
05428     DF FA 05 F1 | 	add	objptr, #223
0542c     FD 74 02 F1 | 	add	local05, objptr
05430     3A 77 02 FB | 	rdlong	local06, local05
05434     DA FA 05 F1 | 	add	objptr, #218
05438     FD 78 C2 FA | 	rdbyte	local07, objptr
0543c     3C 77 02 F1 | 	add	local06, local07
05440     02 6C 66 F0 | 	shl	local01, #2
05444     DA FA 85 F1 | 	sub	objptr, #218
05448     FD 6C 02 F1 | 	add	local01, objptr
0544c     36 77 62 FC | 	wrlong	local06, local01
05450     DF FA 85 F1 | 	sub	objptr, #223
05454     4C 01 90 FD | 	jmp	#LR__0208
05458                 | LR__0198
05458                 | ' 
05458                 | '     $3:                                 ' Slide to note (portamento)
05458                 | '       if z > 0
05458     B9 FB 05 F1 | 	add	objptr, #441
0545c     FD 76 C2 FA | 	rdbyte	local06, objptr
05460     B9 FB 85 F1 | 	sub	objptr, #441
05464     00 76 5E F2 | 	cmps	local06, #0 wcz
05468     1C 00 90 ED |  if_be	jmp	#LR__0199
0546c                 | '         cmd3_memoryZ[channel] := z
0546c     36 77 02 F6 | 	mov	local06, local01
05470     C8 FB 05 F1 | 	add	objptr, #456
05474     FD 76 02 F1 | 	add	local06, objptr
05478     0F FA 85 F1 | 	sub	objptr, #15
0547c     FD 7C C2 FA | 	rdbyte	local09, objptr
05480     B9 FB 85 F1 | 	sub	objptr, #441
05484     3B 7D 42 FC | 	wrbyte	local09, local06
05488                 | LR__0199
05488                 | ' 
05488                 | '       doPortamento(channel, lastSetPeriod[channel])
05488     36 7D 02 F6 | 	mov	local09, local01
0548c     02 7C 66 F0 | 	shl	local09, #2
05490     27 FB 05 F1 | 	add	objptr, #295
05494     FD 7C 02 F1 | 	add	local09, objptr
05498     3E 61 02 FB | 	rdlong	arg02, local09
0549c     36 5F 02 F6 | 	mov	arg01, local01
054a0     27 FB 85 F1 | 	sub	objptr, #295
054a4     5C 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
054a8     F8 00 90 FD | 	jmp	#LR__0208
054ac                 | LR__0200
054ac                 | ' 
054ac                 | '     $5:                                 ' Volume slide + portamento
054ac                 | '       doVolumeSlide(channel)
054ac     36 5F 02 F6 | 	mov	arg01, local01
054b0     7C 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
054b4                 | '       doPortamento(channel, lastSetPeriod[channel])
054b4     36 7D 02 F6 | 	mov	local09, local01
054b8     02 7C 66 F0 | 	shl	local09, #2
054bc     27 FB 05 F1 | 	add	objptr, #295
054c0     FD 7C 02 F1 | 	add	local09, objptr
054c4     3E 61 02 FB | 	rdlong	arg02, local09
054c8     36 5F 02 F6 | 	mov	arg01, local01
054cc     27 FB 85 F1 | 	sub	objptr, #295
054d0     30 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
054d4     CC 00 90 FD | 	jmp	#LR__0208
054d8                 | LR__0201
054d8                 | ' 
054d8                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
054d8     36 5F 02 F6 | 	mov	arg01, local01
054dc     50 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
054e0     C0 00 90 FD | 	jmp	#LR__0208
054e4                 | LR__0202
054e4                 | ' 
054e4                 | '     $7:                                 ' Tremolo
054e4                 | '       if x > 0
054e4     B7 FB 05 F1 | 	add	objptr, #439
054e8     FD 76 C2 FA | 	rdbyte	local06, objptr
054ec     B7 FB 85 F1 | 	sub	objptr, #439
054f0     00 76 5E F2 | 	cmps	local06, #0 wcz
054f4     1C 00 90 ED |  if_be	jmp	#LR__0203
054f8                 | '         cmd7_memoryX[channel] := x
054f8     36 77 02 F6 | 	mov	local06, local01
054fc     D8 FB 05 F1 | 	add	objptr, #472
05500     FD 76 02 F1 | 	add	local06, objptr
05504     21 FA 85 F1 | 	sub	objptr, #33
05508     FD 7C C2 FA | 	rdbyte	local09, objptr
0550c     B7 FB 85 F1 | 	sub	objptr, #439
05510     3B 7D 42 FC | 	wrbyte	local09, local06
05514                 | LR__0203
05514                 | '       if y > 0
05514     B8 FB 05 F1 | 	add	objptr, #440
05518     FD 76 C2 FA | 	rdbyte	local06, objptr
0551c     B8 FB 85 F1 | 	sub	objptr, #440
05520     00 76 5E F2 | 	cmps	local06, #0 wcz
05524     1C 00 90 ED |  if_be	jmp	#LR__0204
05528                 | '         cmd7_memoryY[channel] := y
05528     36 77 02 F6 | 	mov	local06, local01
0552c     D4 FB 05 F1 | 	add	objptr, #468
05530     FD 76 02 F1 | 	add	local06, objptr
05534     1C FA 85 F1 | 	sub	objptr, #28
05538     FD 7C C2 FA | 	rdbyte	local09, objptr
0553c     B8 FB 85 F1 | 	sub	objptr, #440
05540     3B 7D 42 FC | 	wrbyte	local09, local06
05544                 | LR__0204
05544                 | ' 
05544                 | '       doTremolo(channel)
05544     36 5F 02 F6 | 	mov	arg01, local01
05548     F0 03 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
0554c     54 00 90 FD | 	jmp	#LR__0208
05550                 | LR__0205
05550                 | ' 
05550                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05550     36 5F 02 F6 | 	mov	arg01, local01
05554     D8 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05558     48 00 90 FD | 	jmp	#LR__0208
0555c                 | LR__0206
0555c                 | ' 
0555c                 | '     $E:                                 ' Retrig every Y ticks
0555c                 | '       if (x == $9) && ((tickcounter // y) == 0)
0555c     B7 FB 05 F1 | 	add	objptr, #439
05560     FD 74 C2 FA | 	rdbyte	local05, objptr
05564     B7 FB 85 F1 | 	sub	objptr, #439
05568     09 74 0E F2 | 	cmp	local05, #9 wz
0556c     34 00 90 5D |  if_ne	jmp	#LR__0207
05570     A1 FA 05 F1 | 	add	objptr, #161
05574     FD 78 C2 FA | 	rdbyte	local07, objptr
05578     3C 99 02 F6 | 	mov	muldiva_, local07
0557c     17 FB 05 F1 | 	add	objptr, #279
05580     FD 7E C2 FA | 	rdbyte	local10, objptr
05584     B8 FB 85 F1 | 	sub	objptr, #440
05588     3F 9B 02 F6 | 	mov	muldivb_, local10
0558c     C6 00 A0 FD | 	call	#divide_
05590     4C 7D 0A F6 | 	mov	local09, muldiva_ wz
05594     0C 00 90 5D |  if_ne	jmp	#LR__0207
05598                 | '         triggerNote(channel)
05598     36 77 02 F6 | 	mov	local06, local01
0559c     3B 5F 02 F6 | 	mov	arg01, local06
055a0     08 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
055a4                 | LR__0207
055a4                 | LR__0208
055a4     AF F0 03 F6 | 	mov	ptra, fp
055a8     BA 00 A0 FD | 	call	#popregs_
055ac                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
055ac     2D 00 64 FD | 	ret
055b0                 | 
055b0                 | ' 
055b0                 | ' 
055b0                 | ' ' Handle all commands that executes on every tick
055b0                 | ' '
055b0                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
055b0                 | _trackerplayer_spin2_handleEveryTickCommands
055b0     0F 5A 05 F6 | 	mov	COUNT_, #15
055b4     B0 00 A0 FD | 	call	#pushregs_
055b8     2F 6D 02 F6 | 	mov	local01, arg01
055bc                 | ' 
055bc                 | '   CASE_FAST cmd
055bc     BA FB 05 F1 | 	add	objptr, #442
055c0     FD 6E C2 FA | 	rdbyte	local02, objptr
055c4     BA FB 85 F1 | 	sub	objptr, #442
055c8     37 71 02 F6 | 	mov	local03, local02
055cc     0F 70 26 F3 | 	fle	local03, #15
055d0     38 73 02 F6 | 	mov	local04, local03
055d4     30 72 62 FD | 	jmprel	local04
055d8                 | LR__0209
055d8     3C 00 90 FD | 	jmp	#LR__0210
055dc     50 03 90 FD | 	jmp	#LR__0224
055e0     4C 03 90 FD | 	jmp	#LR__0224
055e4     48 03 90 FD | 	jmp	#LR__0224
055e8     D0 01 90 FD | 	jmp	#LR__0213
055ec     40 03 90 FD | 	jmp	#LR__0224
055f0     34 02 90 FD | 	jmp	#LR__0216
055f4     38 03 90 FD | 	jmp	#LR__0224
055f8     34 03 90 FD | 	jmp	#LR__0224
055fc     30 03 90 FD | 	jmp	#LR__0224
05600     2C 03 90 FD | 	jmp	#LR__0224
05604     28 03 90 FD | 	jmp	#LR__0224
05608     24 03 90 FD | 	jmp	#LR__0224
0560c     20 03 90 FD | 	jmp	#LR__0224
05610     20 02 90 FD | 	jmp	#LR__0217
05614     18 03 90 FD | 	jmp	#LR__0224
05618                 | LR__0210
05618                 | ' 
05618                 | '     $0:                                 ' Arpeggio
05618                 | '       arpCounter := tickCounter // 3
05618     A1 FA 05 F1 | 	add	objptr, #161
0561c     FD 98 C2 FA | 	rdbyte	muldiva_, objptr
05620     A1 FA 85 F1 | 	sub	objptr, #161
05624     03 9A 06 F6 | 	mov	muldivb_, #3
05628     C6 00 A0 FD | 	call	#divide_
0562c     4C 75 02 F6 | 	mov	local05, muldiva_
05630                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
05630     36 77 02 F6 | 	mov	local06, local01
05634     02 76 66 F0 | 	shl	local06, #2
05638     DF FA 05 F1 | 	add	objptr, #223
0563c     FD 76 02 F1 | 	add	local06, objptr
05640     3B 5F 02 FB | 	rdlong	arg01, local06
05644     36 79 02 F6 | 	mov	local07, local01
05648     0C FA 85 F1 | 	sub	objptr, #12
0564c     FD 78 02 F1 | 	add	local07, objptr
05650     3C 61 C2 FA | 	rdbyte	arg02, local07
05654     D3 FA 85 F1 | 	sub	objptr, #211
05658     C8 EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
0565c     0C 7B 02 F6 | 	mov	local08, result1
05660     3D 7D 02 F6 | 	mov	local09, local08
05664     24 7A 5E F2 | 	cmps	local08, #36 wcz
05668     C4 02 90 3D |  if_ae	jmp	#LR__0224
0566c                 | '         if arpCounter == 1 and x > 0
0566c     01 74 0E F2 | 	cmp	local05, #1 wz
05670     80 00 90 5D |  if_ne	jmp	#LR__0211
05674     B7 FB 05 F1 | 	add	objptr, #439
05678     FD 7E C2 FA | 	rdbyte	local10, objptr
0567c     B7 FB 85 F1 | 	sub	objptr, #439
05680     00 7E 5E F2 | 	cmps	local10, #0 wcz
05684     6C 00 90 ED |  if_be	jmp	#LR__0211
05688                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05688     3E 5F 02 F6 | 	mov	arg01, local09
0568c     B7 FB 05 F1 | 	add	objptr, #439
05690     FD 80 C2 FA | 	rdbyte	local11, objptr
05694     40 5F 02 F1 | 	add	arg01, local11
05698                 | ' 
05698                 | '   return word[@periodTable][noteNumber]
05698     06 00 00 FF 
0569c     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
056a0     01 5E 66 F0 | 	shl	arg01, #1
056a4     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
056a8     2F 19 E2 FA | 	rdword	result1, arg01
056ac     06 00 00 FF 
056b0     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
056b4     0C 77 02 F6 | 	mov	local06, result1
056b8     36 79 02 F6 | 	mov	local07, local01
056bc     02 78 66 F0 | 	shl	local07, #2
056c0     D8 FA 85 F1 | 	sub	objptr, #216
056c4     FD 80 02 F6 | 	mov	local11, objptr
056c8     FD 78 02 F1 | 	add	local07, objptr
056cc     3B 7F 02 F6 | 	mov	local10, local06
056d0     3C 83 02 FB | 	rdlong	local12, local07
056d4     41 7F 82 F1 | 	sub	local10, local12
056d8     36 85 02 F6 | 	mov	local13, local01
056dc     02 84 66 F0 | 	shl	local13, #2
056e0     10 FA 05 F1 | 	add	objptr, #16
056e4     FD 86 02 F6 | 	mov	local14, objptr
056e8     FD 84 02 F1 | 	add	local13, objptr
056ec     42 7F 62 FC | 	wrlong	local10, local13
056f0     EF FA 85 F1 | 	sub	objptr, #239
056f4                 | LR__0211
056f4                 | '         if arpCounter == 2 and y > 0
056f4     02 74 0E F2 | 	cmp	local05, #2 wz
056f8     80 00 90 5D |  if_ne	jmp	#LR__0212
056fc     B8 FB 05 F1 | 	add	objptr, #440
05700     FD 7E C2 FA | 	rdbyte	local10, objptr
05704     B8 FB 85 F1 | 	sub	objptr, #440
05708     00 7E 5E F2 | 	cmps	local10, #0 wcz
0570c     6C 00 90 ED |  if_be	jmp	#LR__0212
05710                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05710     3E 5F 02 F6 | 	mov	arg01, local09
05714     B8 FB 05 F1 | 	add	objptr, #440
05718     FD 80 C2 FA | 	rdbyte	local11, objptr
0571c     40 5F 02 F1 | 	add	arg01, local11
05720                 | ' 
05720                 | '   return word[@periodTable][noteNumber]
05720     06 00 00 FF 
05724     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05728     01 5E 66 F0 | 	shl	arg01, #1
0572c     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05730     2F 19 E2 FA | 	rdword	result1, arg01
05734     06 00 00 FF 
05738     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0573c     0C 77 02 F6 | 	mov	local06, result1
05740     36 79 02 F6 | 	mov	local07, local01
05744     02 78 66 F0 | 	shl	local07, #2
05748     D9 FA 85 F1 | 	sub	objptr, #217
0574c     FD 80 02 F6 | 	mov	local11, objptr
05750     FD 78 02 F1 | 	add	local07, objptr
05754     3B 7F 02 F6 | 	mov	local10, local06
05758     3C 83 02 FB | 	rdlong	local12, local07
0575c     41 7F 82 F1 | 	sub	local10, local12
05760     36 85 02 F6 | 	mov	local13, local01
05764     02 84 66 F0 | 	shl	local13, #2
05768     10 FA 05 F1 | 	add	objptr, #16
0576c     FD 86 02 F6 | 	mov	local14, objptr
05770     FD 84 02 F1 | 	add	local13, objptr
05774     42 7F 62 FC | 	wrlong	local10, local13
05778     EF FA 85 F1 | 	sub	objptr, #239
0577c                 | LR__0212
0577c                 | '         if arpCounter == 0 and (x + y) > 0
0577c     00 74 0E F2 | 	cmp	local05, #0 wz
05780     AC 01 90 5D |  if_ne	jmp	#LR__0224
05784     B7 FB 05 F1 | 	add	objptr, #439
05788     FD 7E C2 FA | 	rdbyte	local10, objptr
0578c     01 FA 05 F1 | 	add	objptr, #1
05790     FD 80 C2 FA | 	rdbyte	local11, objptr
05794     B8 FB 85 F1 | 	sub	objptr, #440
05798     40 7F 02 F1 | 	add	local10, local11
0579c     00 7E 5E F2 | 	cmps	local10, #0 wcz
057a0     8C 01 90 ED |  if_be	jmp	#LR__0224
057a4                 | '           deltaPeriod[channel] := 0
057a4     02 6C 66 F0 | 	shl	local01, #2
057a8     EF FA 05 F1 | 	add	objptr, #239
057ac     FD 6C 02 F1 | 	add	local01, objptr
057b0     36 01 68 FC | 	wrlong	#0, local01
057b4     EF FA 85 F1 | 	sub	objptr, #239
057b8     74 01 90 FD | 	jmp	#LR__0224
057bc                 | LR__0213
057bc                 | ' 
057bc                 | '     $4:                                 ' Vibrato
057bc                 | '       if x > 0
057bc     B7 FB 05 F1 | 	add	objptr, #439
057c0     FD 7E C2 FA | 	rdbyte	local10, objptr
057c4     B7 FB 85 F1 | 	sub	objptr, #439
057c8     00 7E 5E F2 | 	cmps	local10, #0 wcz
057cc     1C 00 90 ED |  if_be	jmp	#LR__0214
057d0                 | '         cmd4_memoryX[channel] := x
057d0     36 7F 02 F6 | 	mov	local10, local01
057d4     D0 FB 05 F1 | 	add	objptr, #464
057d8     FD 7E 02 F1 | 	add	local10, objptr
057dc     19 FA 85 F1 | 	sub	objptr, #25
057e0     FD 78 C2 FA | 	rdbyte	local07, objptr
057e4     B7 FB 85 F1 | 	sub	objptr, #439
057e8     3F 79 42 FC | 	wrbyte	local07, local10
057ec                 | LR__0214
057ec                 | '       if y > 0
057ec     B8 FB 05 F1 | 	add	objptr, #440
057f0     FD 7E C2 FA | 	rdbyte	local10, objptr
057f4     B8 FB 85 F1 | 	sub	objptr, #440
057f8     00 7E 5E F2 | 	cmps	local10, #0 wcz
057fc     1C 00 90 ED |  if_be	jmp	#LR__0215
05800                 | '         cmd4_memoryY[channel] := y
05800     36 7F 02 F6 | 	mov	local10, local01
05804     CC FB 05 F1 | 	add	objptr, #460
05808     FD 7E 02 F1 | 	add	local10, objptr
0580c     14 FA 85 F1 | 	sub	objptr, #20
05810     FD 78 C2 FA | 	rdbyte	local07, objptr
05814     B8 FB 85 F1 | 	sub	objptr, #440
05818     3F 79 42 FC | 	wrbyte	local07, local10
0581c                 | LR__0215
0581c                 | ' 
0581c                 | '       doVibrato(channel)
0581c     36 5F 02 F6 | 	mov	arg01, local01
05820     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05824     08 01 90 FD | 	jmp	#LR__0224
05828                 | LR__0216
05828                 | ' 
05828                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05828     36 5F 02 F6 | 	mov	arg01, local01
0582c     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05830     FC 00 90 FD | 	jmp	#LR__0224
05834                 | LR__0217
05834                 | ' 
05834                 | '     $E:
05834                 | '       if x == $C                        ' Cut note after Y ticks
05834     B7 FB 05 F1 | 	add	objptr, #439
05838     FD 7E C2 FA | 	rdbyte	local10, objptr
0583c     B7 FB 85 F1 | 	sub	objptr, #439
05840     0C 7E 0E F2 | 	cmp	local10, #12 wz
05844     34 00 90 5D |  if_ne	jmp	#LR__0218
05848                 | '         if tickcounter == y
05848     A1 FA 05 F1 | 	add	objptr, #161
0584c     FD 7E C2 FA | 	rdbyte	local10, objptr
05850     17 FB 05 F1 | 	add	objptr, #279
05854     FD 78 C2 FA | 	rdbyte	local07, objptr
05858     B8 FB 85 F1 | 	sub	objptr, #440
0585c     3C 7F 0A F2 | 	cmp	local10, local07 wz
05860     CC 00 90 5D |  if_ne	jmp	#LR__0223
05864                 | '           currVolume[channel] := 0
05864     02 6C 66 F0 | 	shl	local01, #2
05868     FF FA 05 F1 | 	add	objptr, #255
0586c     FD 6C 02 F1 | 	add	local01, objptr
05870     36 01 68 FC | 	wrlong	#0, local01
05874     FF FA 85 F1 | 	sub	objptr, #255
05878     B4 00 90 FD | 	jmp	#LR__0223
0587c                 | LR__0218
0587c                 | ' 
0587c                 | '       elseif x == $D                    ' Delay note Y ticks
0587c     B7 FB 05 F1 | 	add	objptr, #439
05880     FD 7E C2 FA | 	rdbyte	local10, objptr
05884     B7 FB 85 F1 | 	sub	objptr, #439
05888     0D 7E 0E F2 | 	cmp	local10, #13 wz
0588c     A0 00 90 5D |  if_ne	jmp	#LR__0222
05890                 | '         if tickcounter == y
05890     A1 FA 05 F1 | 	add	objptr, #161
05894     FD 7E C2 FA | 	rdbyte	local10, objptr
05898     17 FB 05 F1 | 	add	objptr, #279
0589c     FD 78 C2 FA | 	rdbyte	local07, objptr
058a0     B8 FB 85 F1 | 	sub	objptr, #440
058a4     3C 7F 0A F2 | 	cmp	local10, local07 wz
058a8     0C 00 90 5D |  if_ne	jmp	#LR__0219
058ac                 | '           triggerNote(channel)
058ac     36 5F 02 F6 | 	mov	arg01, local01
058b0     F8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
058b4     78 00 90 FD | 	jmp	#LR__0221
058b8                 | LR__0219
058b8                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
058b8                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
058b8     B8 FB 05 F1 | 	add	objptr, #440
058bc     FD 7E C2 FA | 	rdbyte	local10, objptr
058c0     14 FB 85 F1 | 	sub	objptr, #276
058c4     FD 78 C2 FA | 	rdbyte	local07, objptr
058c8     A4 FA 85 F1 | 	sub	objptr, #164
058cc     3C 7F 5A F2 | 	cmps	local10, local07 wcz
058d0     5C 00 90 CD |  if_b	jmp	#LR__0220
058d4     A4 FA 05 F1 | 	add	objptr, #164
058d8     FD 84 C2 FA | 	rdbyte	local13, objptr
058dc     42 83 02 F6 | 	mov	local12, local13
058e0     01 82 86 F1 | 	sub	local12, #1
058e4     03 FA 85 F1 | 	sub	objptr, #3
058e8     FD 88 C2 FA | 	rdbyte	local15, objptr
058ec     A1 FA 85 F1 | 	sub	objptr, #161
058f0     44 87 02 F6 | 	mov	local14, local15
058f4     41 87 0A F2 | 	cmp	local14, local12 wz
058f8     34 00 90 5D |  if_ne	jmp	#LR__0220
058fc                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
058fc     36 7F 02 F6 | 	mov	local10, local01
05900     02 7E 66 F0 | 	shl	local10, #2
05904     27 FB 05 F1 | 	add	objptr, #295
05908     FD 76 02 F6 | 	mov	local06, objptr
0590c     FD 7E 02 F1 | 	add	local10, objptr
05910     36 79 02 F6 | 	mov	local07, local01
05914     02 78 66 F0 | 	shl	local07, #2
05918     48 FA 85 F1 | 	sub	objptr, #72
0591c     FD 80 02 F6 | 	mov	local11, objptr
05920     3F 83 02 FB | 	rdlong	local12, local10
05924     40 79 02 F1 | 	add	local07, local11
05928     3C 83 62 FC | 	wrlong	local12, local07
0592c     DF FA 85 F1 | 	sub	objptr, #223
05930                 | LR__0220
05930                 | LR__0221
05930                 | LR__0222
05930                 | LR__0223
05930                 | LR__0224
05930     AF F0 03 F6 | 	mov	ptra, fp
05934     BA 00 A0 FD | 	call	#popregs_
05938                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05938     2D 00 64 FD | 	ret
0593c                 | 
0593c                 | ' 
0593c                 | ' 
0593c                 | ' PRI doTremolo(channel) | depth, sineWave, speed
0593c                 | _trackerplayer_spin2_doTremolo
0593c     2F 1F 02 F6 | 	mov	_var01, arg01
05940                 | ' 
05940                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05940     05 00 00 FF 
05944     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05948     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
0594c     0F 23 02 F6 | 	mov	_var03, _var01
05950     8B FB 05 F1 | 	add	objptr, #395
05954     FD 22 02 F1 | 	add	_var03, objptr
05958     11 25 C2 FA | 	rdbyte	_var04, _var03
0595c     02 24 66 F0 | 	shl	_var04, #2
05960     10 25 02 F1 | 	add	_var04, _var02
05964     12 27 02 FB | 	rdlong	_var05, _var04
05968                 | '   depth    := cmd7_memoryY[channel]
05968     0F 29 02 F6 | 	mov	_var06, _var01
0596c     49 FA 05 F1 | 	add	objptr, #73
05970     FD 28 02 F1 | 	add	_var06, objptr
05974     14 2B C2 FA | 	rdbyte	_var07, _var06
05978                 | '   speed    := cmd7_memoryX[channel]
05978     0F 29 02 F6 | 	mov	_var06, _var01
0597c     04 FA 05 F1 | 	add	objptr, #4
05980     FD 28 02 F1 | 	add	_var06, objptr
05984     14 2D C2 FA | 	rdbyte	_var08, _var06
05988                 | ' 
05988                 | '   CASE_FAST vibratoType[channel]
05988     0F 23 02 F6 | 	mov	_var03, _var01
0598c     18 FA 85 F1 | 	sub	objptr, #24
05990     FD 2E 02 F6 | 	mov	_var09, objptr
05994     FD 22 02 F1 | 	add	_var03, objptr
05998     11 29 C2 FA | 	rdbyte	_var06, _var03
0599c     03 28 26 F3 | 	fle	_var06, #3
059a0     14 31 02 F6 | 	mov	_var10, _var06
059a4     05 00 00 FF 
059a8     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
059ac     C0 FB 85 F1 | 	sub	objptr, #448
059b0     30 30 62 FD | 	jmprel	_var10
059b4                 | LR__0225
059b4     0C 00 90 FD | 	jmp	#LR__0226
059b8     30 00 90 FD | 	jmp	#LR__0227
059bc     6C 00 90 FD | 	jmp	#LR__0228
059c0     B4 00 90 FD | 	jmp	#LR__0229
059c4                 | LR__0226
059c4                 | ' 
059c4                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
059c4     13 2B 02 FD | 	qmul	_var07, _var05
059c8     18 24 62 FD | 	getqx	_var04
059cc     06 24 C6 F0 | 	sar	_var04, #6
059d0     0F 33 02 F6 | 	mov	_var11, _var01
059d4     02 32 66 F0 | 	shl	_var11, #2
059d8     0F FB 05 F1 | 	add	objptr, #271
059dc     FD 32 02 F1 | 	add	_var11, objptr
059e0     19 25 62 FC | 	wrlong	_var04, _var11
059e4     0F FB 85 F1 | 	sub	objptr, #271
059e8     8C 00 90 FD | 	jmp	#LR__0229
059ec                 | LR__0227
059ec                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
059ec     0F 33 02 F6 | 	mov	_var11, _var01
059f0     8B FB 05 F1 | 	add	objptr, #395
059f4     FD 32 02 F1 | 	add	_var11, objptr
059f8     19 21 C2 FA | 	rdbyte	_var02, _var11
059fc     03 20 66 F0 | 	shl	_var02, #3
05a00     10 2B 02 FD | 	qmul	_var07, _var02
05a04     18 24 62 FD | 	getqx	_var04
05a08     00 25 86 F1 | 	sub	_var04, #256
05a0c     06 24 C6 F0 | 	sar	_var04, #6
05a10     0F 35 02 F6 | 	mov	_var12, _var01
05a14     02 34 66 F0 | 	shl	_var12, #2
05a18     7C FA 85 F1 | 	sub	objptr, #124
05a1c     FD 34 02 F1 | 	add	_var12, objptr
05a20     1A 25 62 FC | 	wrlong	_var04, _var12
05a24     0F FB 85 F1 | 	sub	objptr, #271
05a28     4C 00 90 FD | 	jmp	#LR__0229
05a2c                 | LR__0228
05a2c                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05a2c     0F 33 02 F6 | 	mov	_var11, _var01
05a30     8B FB 05 F1 | 	add	objptr, #395
05a34     FD 36 02 F6 | 	mov	_var13, objptr
05a38     FD 32 02 F1 | 	add	_var11, objptr
05a3c     19 21 C2 FA | 	rdbyte	_var02, _var11
05a40     20 20 06 F5 | 	and	_var02, #32
05a44     04 20 66 F0 | 	shl	_var02, #4
05a48     10 2B 02 FD | 	qmul	_var07, _var02
05a4c     18 38 62 FD | 	getqx	_var14
05a50     1C 25 02 F6 | 	mov	_var04, _var14
05a54     00 25 86 F1 | 	sub	_var04, #256
05a58     06 24 C6 F0 | 	sar	_var04, #6
05a5c     0F 35 02 F6 | 	mov	_var12, _var01
05a60     02 34 66 F0 | 	shl	_var12, #2
05a64     7C FA 85 F1 | 	sub	objptr, #124
05a68     FD 3A 02 F6 | 	mov	_var15, objptr
05a6c     FD 34 02 F1 | 	add	_var12, objptr
05a70     1A 25 62 FC | 	wrlong	_var04, _var12
05a74     0F FB 85 F1 | 	sub	objptr, #271
05a78                 | LR__0229
05a78                 | ' 
05a78                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05a78     0F 23 02 F6 | 	mov	_var03, _var01
05a7c     8B FB 05 F1 | 	add	objptr, #395
05a80     FD 22 02 F1 | 	add	_var03, objptr
05a84     11 29 C2 FA | 	rdbyte	_var06, _var03
05a88     16 29 02 F1 | 	add	_var06, _var08
05a8c     3F 28 06 F5 | 	and	_var06, #63
05a90     FD 1E 02 F1 | 	add	_var01, objptr
05a94     0F 29 42 FC | 	wrbyte	_var06, _var01
05a98     8B FB 85 F1 | 	sub	objptr, #395
05a9c                 | _trackerplayer_spin2_doTremolo_ret
05a9c     2D 00 64 FD | 	ret
05aa0                 | 
05aa0                 | ' 
05aa0                 | ' 
05aa0                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05aa0                 | _trackerplayer_spin2_doVibrato
05aa0     2F 1F 02 F6 | 	mov	_var01, arg01
05aa4                 | ' 
05aa4                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05aa4     05 00 00 FF 
05aa8     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05aac     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05ab0     0F 23 02 F6 | 	mov	_var03, _var01
05ab4     87 FB 05 F1 | 	add	objptr, #391
05ab8     FD 22 02 F1 | 	add	_var03, objptr
05abc     11 25 C2 FA | 	rdbyte	_var04, _var03
05ac0     02 24 66 F0 | 	shl	_var04, #2
05ac4     10 25 02 F1 | 	add	_var04, _var02
05ac8     12 27 02 FB | 	rdlong	_var05, _var04
05acc                 | '   depth    := cmd4_memoryY[channel]
05acc     0F 29 02 F6 | 	mov	_var06, _var01
05ad0     45 FA 05 F1 | 	add	objptr, #69
05ad4     FD 28 02 F1 | 	add	_var06, objptr
05ad8     14 2B C2 FA | 	rdbyte	_var07, _var06
05adc                 | '   speed    := cmd4_memoryX[channel]
05adc     0F 29 02 F6 | 	mov	_var06, _var01
05ae0     04 FA 05 F1 | 	add	objptr, #4
05ae4     FD 28 02 F1 | 	add	_var06, objptr
05ae8     14 2D C2 FA | 	rdbyte	_var08, _var06
05aec                 | ' 
05aec                 | '   CASE_FAST vibratoType[channel]
05aec     0F 23 02 F6 | 	mov	_var03, _var01
05af0     10 FA 85 F1 | 	sub	objptr, #16
05af4     FD 2E 02 F6 | 	mov	_var09, objptr
05af8     FD 22 02 F1 | 	add	_var03, objptr
05afc     11 29 C2 FA | 	rdbyte	_var06, _var03
05b00     03 28 26 F3 | 	fle	_var06, #3
05b04     14 31 02 F6 | 	mov	_var10, _var06
05b08     05 00 00 FF 
05b0c     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05b10     C0 FB 85 F1 | 	sub	objptr, #448
05b14     30 30 62 FD | 	jmprel	_var10
05b18                 | LR__0230
05b18     0C 00 90 FD | 	jmp	#LR__0231
05b1c     30 00 90 FD | 	jmp	#LR__0232
05b20     6C 00 90 FD | 	jmp	#LR__0233
05b24     B4 00 90 FD | 	jmp	#LR__0234
05b28                 | LR__0231
05b28                 | ' 
05b28                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05b28     13 2B 02 FD | 	qmul	_var07, _var05
05b2c     18 24 62 FD | 	getqx	_var04
05b30     07 24 C6 F0 | 	sar	_var04, #7
05b34     0F 33 02 F6 | 	mov	_var11, _var01
05b38     02 32 66 F0 | 	shl	_var11, #2
05b3c     EF FA 05 F1 | 	add	objptr, #239
05b40     FD 32 02 F1 | 	add	_var11, objptr
05b44     19 25 62 FC | 	wrlong	_var04, _var11
05b48     EF FA 85 F1 | 	sub	objptr, #239
05b4c     8C 00 90 FD | 	jmp	#LR__0234
05b50                 | LR__0232
05b50                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05b50     0F 33 02 F6 | 	mov	_var11, _var01
05b54     87 FB 05 F1 | 	add	objptr, #391
05b58     FD 32 02 F1 | 	add	_var11, objptr
05b5c     19 21 C2 FA | 	rdbyte	_var02, _var11
05b60     03 20 66 F0 | 	shl	_var02, #3
05b64     10 2B 02 FD | 	qmul	_var07, _var02
05b68     18 24 62 FD | 	getqx	_var04
05b6c     00 25 86 F1 | 	sub	_var04, #256
05b70     07 24 C6 F0 | 	sar	_var04, #7
05b74     0F 35 02 F6 | 	mov	_var12, _var01
05b78     02 34 66 F0 | 	shl	_var12, #2
05b7c     98 FA 85 F1 | 	sub	objptr, #152
05b80     FD 34 02 F1 | 	add	_var12, objptr
05b84     1A 25 62 FC | 	wrlong	_var04, _var12
05b88     EF FA 85 F1 | 	sub	objptr, #239
05b8c     4C 00 90 FD | 	jmp	#LR__0234
05b90                 | LR__0233
05b90                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05b90     0F 33 02 F6 | 	mov	_var11, _var01
05b94     87 FB 05 F1 | 	add	objptr, #391
05b98     FD 36 02 F6 | 	mov	_var13, objptr
05b9c     FD 32 02 F1 | 	add	_var11, objptr
05ba0     19 21 C2 FA | 	rdbyte	_var02, _var11
05ba4     20 20 06 F5 | 	and	_var02, #32
05ba8     04 20 66 F0 | 	shl	_var02, #4
05bac     10 2B 02 FD | 	qmul	_var07, _var02
05bb0     18 38 62 FD | 	getqx	_var14
05bb4     1C 25 02 F6 | 	mov	_var04, _var14
05bb8     00 25 86 F1 | 	sub	_var04, #256
05bbc     07 24 C6 F0 | 	sar	_var04, #7
05bc0     0F 35 02 F6 | 	mov	_var12, _var01
05bc4     02 34 66 F0 | 	shl	_var12, #2
05bc8     98 FA 85 F1 | 	sub	objptr, #152
05bcc     FD 3A 02 F6 | 	mov	_var15, objptr
05bd0     FD 34 02 F1 | 	add	_var12, objptr
05bd4     1A 25 62 FC | 	wrlong	_var04, _var12
05bd8     EF FA 85 F1 | 	sub	objptr, #239
05bdc                 | LR__0234
05bdc                 | ' 
05bdc                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05bdc     0F 23 02 F6 | 	mov	_var03, _var01
05be0     87 FB 05 F1 | 	add	objptr, #391
05be4     FD 22 02 F1 | 	add	_var03, objptr
05be8     11 29 C2 FA | 	rdbyte	_var06, _var03
05bec     16 29 02 F1 | 	add	_var06, _var08
05bf0     3F 28 06 F5 | 	and	_var06, #63
05bf4     FD 1E 02 F1 | 	add	_var01, objptr
05bf8     0F 29 42 FC | 	wrbyte	_var06, _var01
05bfc     87 FB 85 F1 | 	sub	objptr, #391
05c00                 | _trackerplayer_spin2_doVibrato_ret
05c00     2D 00 64 FD | 	ret
05c04                 | 
05c04                 | ' 
05c04                 | ' 
05c04                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05c04                 | _trackerplayer_spin2_doPortamento
05c04                 | ' 
05c04                 | '   if period == currPeriod[channel]
05c04     2F 1F 02 F6 | 	mov	_var01, arg01
05c08     02 1E 66 F0 | 	shl	_var01, #2
05c0c     DF FA 05 F1 | 	add	objptr, #223
05c10     FD 20 02 F6 | 	mov	_var02, objptr
05c14     FD 1E 02 F1 | 	add	_var01, objptr
05c18     0F 23 02 FB | 	rdlong	_var03, _var01
05c1c     11 61 0A F2 | 	cmp	arg02, _var03 wz
05c20                 | '     return
05c20     DF FA 85 F1 | 	sub	objptr, #223
05c24     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05c28                 | ' 
05c28                 | '   if period > 0
05c28     00 60 5E F2 | 	cmps	arg02, #0 wcz
05c2c     1C 00 90 ED |  if_be	jmp	#LR__0235
05c30                 | '     portamentoPeriodMemory[channel] := period
05c30     2F 1F 02 F6 | 	mov	_var01, arg01
05c34     02 1E 66 F0 | 	shl	_var01, #2
05c38     97 FB 05 F1 | 	add	objptr, #407
05c3c     FD 1E 02 F1 | 	add	_var01, objptr
05c40     0F 61 62 FC | 	wrlong	arg02, _var01
05c44                 | '   else
05c44     97 FB 85 F1 | 	sub	objptr, #407
05c48     18 00 90 FD | 	jmp	#LR__0236
05c4c                 | LR__0235
05c4c                 | '     period := portamentoPeriodMemory[channel]
05c4c     2F 1F 02 F6 | 	mov	_var01, arg01
05c50     02 1E 66 F0 | 	shl	_var01, #2
05c54     97 FB 05 F1 | 	add	objptr, #407
05c58     FD 1E 02 F1 | 	add	_var01, objptr
05c5c     0F 61 02 FB | 	rdlong	arg02, _var01
05c60     97 FB 85 F1 | 	sub	objptr, #407
05c64                 | LR__0236
05c64                 | ' 
05c64                 | '   if period > currPeriod[channel]
05c64     2F 1F 02 F6 | 	mov	_var01, arg01
05c68     02 1E 66 F0 | 	shl	_var01, #2
05c6c     DF FA 05 F1 | 	add	objptr, #223
05c70     FD 1E 02 F1 | 	add	_var01, objptr
05c74     0F 23 02 FB | 	rdlong	_var03, _var01
05c78     11 61 5A F2 | 	cmps	arg02, _var03 wcz
05c7c     DF FA 85 F1 | 	sub	objptr, #223
05c80     68 00 90 ED |  if_be	jmp	#LR__0237
05c84                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05c84     2F 21 02 F6 | 	mov	_var02, arg01
05c88     02 20 66 F0 | 	shl	_var02, #2
05c8c     DF FA 05 F1 | 	add	objptr, #223
05c90     FD 20 02 F1 | 	add	_var02, objptr
05c94     2F 25 02 F6 | 	mov	_var04, arg01
05c98     E9 FA 05 F1 | 	add	objptr, #233
05c9c     10 1F 02 FB | 	rdlong	_var01, _var02
05ca0     FD 24 02 F1 | 	add	_var04, objptr
05ca4     12 27 C2 FA | 	rdbyte	_var05, _var04
05ca8     13 1F 02 F1 | 	add	_var01, _var05
05cac     2F 29 02 F6 | 	mov	_var06, arg01
05cb0     02 28 66 F0 | 	shl	_var06, #2
05cb4     E9 FA 85 F1 | 	sub	objptr, #233
05cb8     FD 28 02 F1 | 	add	_var06, objptr
05cbc     14 1F 62 FC | 	wrlong	_var01, _var06
05cc0                 | '     currPeriod[channel] <#= period
05cc0     2F 21 02 F6 | 	mov	_var02, arg01
05cc4     02 20 66 F0 | 	shl	_var02, #2
05cc8     FD 20 02 F1 | 	add	_var02, objptr
05ccc     10 1F 02 FB | 	rdlong	_var01, _var02
05cd0     30 1F 62 F3 | 	fles	_var01, arg02
05cd4     2F 25 02 F6 | 	mov	_var04, arg01
05cd8     02 24 66 F0 | 	shl	_var04, #2
05cdc     FD 24 02 F1 | 	add	_var04, objptr
05ce0     12 1F 62 FC | 	wrlong	_var01, _var04
05ce4     DF FA 85 F1 | 	sub	objptr, #223
05ce8     84 00 90 FD | 	jmp	#LR__0239
05cec                 | LR__0237
05cec                 | ' 
05cec                 | '   elseif period < currPeriod[channel]
05cec     2F 1F 02 F6 | 	mov	_var01, arg01
05cf0     02 1E 66 F0 | 	shl	_var01, #2
05cf4     DF FA 05 F1 | 	add	objptr, #223
05cf8     FD 1E 02 F1 | 	add	_var01, objptr
05cfc     0F 23 02 FB | 	rdlong	_var03, _var01
05d00     11 61 5A F2 | 	cmps	arg02, _var03 wcz
05d04     DF FA 85 F1 | 	sub	objptr, #223
05d08     64 00 90 3D |  if_ae	jmp	#LR__0238
05d0c                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05d0c     2F 21 02 F6 | 	mov	_var02, arg01
05d10     02 20 66 F0 | 	shl	_var02, #2
05d14     DF FA 05 F1 | 	add	objptr, #223
05d18     FD 20 02 F1 | 	add	_var02, objptr
05d1c     2F 25 02 F6 | 	mov	_var04, arg01
05d20     E9 FA 05 F1 | 	add	objptr, #233
05d24     10 1F 02 FB | 	rdlong	_var01, _var02
05d28     FD 24 02 F1 | 	add	_var04, objptr
05d2c     12 27 C2 FA | 	rdbyte	_var05, _var04
05d30     13 1F 82 F1 | 	sub	_var01, _var05
05d34     2F 29 02 F6 | 	mov	_var06, arg01
05d38     02 28 66 F0 | 	shl	_var06, #2
05d3c     E9 FA 85 F1 | 	sub	objptr, #233
05d40     FD 28 02 F1 | 	add	_var06, objptr
05d44     14 1F 62 FC | 	wrlong	_var01, _var06
05d48                 | '     currPeriod[channel] #>= period
05d48     2F 21 02 F6 | 	mov	_var02, arg01
05d4c     02 20 66 F0 | 	shl	_var02, #2
05d50     FD 20 02 F1 | 	add	_var02, objptr
05d54     10 1F 02 FB | 	rdlong	_var01, _var02
05d58     30 1F 42 F3 | 	fges	_var01, arg02
05d5c     2F 25 02 F6 | 	mov	_var04, arg01
05d60     02 24 66 F0 | 	shl	_var04, #2
05d64     FD 24 02 F1 | 	add	_var04, objptr
05d68     12 1F 62 FC | 	wrlong	_var01, _var04
05d6c     DF FA 85 F1 | 	sub	objptr, #223
05d70                 | LR__0238
05d70                 | LR__0239
05d70                 | ' 
05d70                 | '   ' Handle glissando if activated
05d70                 | '   if portaGlissando[channel] > 0
05d70     2F 1F 02 F6 | 	mov	_var01, arg01
05d74     BC FB 05 F1 | 	add	objptr, #444
05d78     FD 1E 02 F1 | 	add	_var01, objptr
05d7c     0F 23 C2 FA | 	rdbyte	_var03, _var01
05d80     00 22 5E F2 | 	cmps	_var03, #0 wcz
05d84     BC FB 85 F1 | 	sub	objptr, #444
05d88     A0 00 90 ED |  if_be	jmp	#LR__0242
05d8c                 | ' 
05d8c                 | '     tempPeriod := currPeriod[channel]
05d8c     2F 1F 02 F6 | 	mov	_var01, arg01
05d90     02 1E 66 F0 | 	shl	_var01, #2
05d94     DF FA 05 F1 | 	add	objptr, #223
05d98     FD 1E 02 F1 | 	add	_var01, objptr
05d9c     0F 2B 02 FB | 	rdlong	_var07, _var01
05da0                 | ' 
05da0                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05da0     00 2C 06 F6 | 	mov	_var08, #0
05da4     DF FA 85 F1 | 	sub	objptr, #223
05da8     B8 A2 9F FE | 	loc	pa,	#(@LR__0241-@LR__0240)
05dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
05db0                 | LR__0240
05db0                 | ' 
05db0                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05db0     06 00 00 FF 
05db4     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05db8     0A 2F 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05dbc     2F 23 02 F6 | 	mov	_var03, arg01
05dc0     D3 FA 05 F1 | 	add	objptr, #211
05dc4     FD 22 02 F1 | 	add	_var03, objptr
05dc8     11 27 C2 FA | 	rdbyte	_var05, _var03
05dcc     13 31 02 F6 | 	mov	_var10, _var05
05dd0     03 30 66 F0 | 	shl	_var10, #3
05dd4     13 31 02 F1 | 	add	_var10, _var05
05dd8     03 30 66 F0 | 	shl	_var10, #3
05ddc     18 2F 02 F1 | 	add	_var09, _var10
05de0     16 33 02 F6 | 	mov	_var11, _var08
05de4     01 32 66 F0 | 	shl	_var11, #1
05de8     17 33 02 F1 | 	add	_var11, _var09
05dec     19 35 E2 FA | 	rdword	_var12, _var11
05df0                 | '       if tempPeriod >= periodStep
05df0     1A 2B 5A F2 | 	cmps	_var07, _var12 wcz
05df4                 | '         i += 1000
05df4     06 00 00 FF 
05df8     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05dfc     D3 FA 85 F1 | 	sub	objptr, #211
05e00     01 00 00 3F 
05e04     E8 2D 06 31 |  if_ae	add	_var08, ##1000
05e08     01 2C 06 F1 | 	add	_var08, #1
05e0c     24 2C 5E F2 | 	cmps	_var08, #36 wcz
05e10     9C FF 9F CD |  if_b	jmp	#LR__0240
05e14                 | LR__0241
05e14                 | ' 
05e14                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05e14     15 35 82 F1 | 	sub	_var12, _var07
05e18     02 5E 66 F0 | 	shl	arg01, #2
05e1c     EF FA 05 F1 | 	add	objptr, #239
05e20     FD 5E 02 F1 | 	add	arg01, objptr
05e24     2F 35 62 FC | 	wrlong	_var12, arg01
05e28     EF FA 85 F1 | 	sub	objptr, #239
05e2c                 | LR__0242
05e2c                 | _trackerplayer_spin2_doPortamento_ret
05e2c     2D 00 64 FD | 	ret
05e30                 | 
05e30                 | ' 
05e30                 | ' 
05e30                 | ' PRI doVolumeSlide(channel)
05e30                 | _trackerplayer_spin2_doVolumeSlide
05e30                 | ' 
05e30                 | '   if x > 0
05e30     B7 FB 05 F1 | 	add	objptr, #439
05e34     FD 1E C2 FA | 	rdbyte	_var01, objptr
05e38     B7 FB 85 F1 | 	sub	objptr, #439
05e3c     00 1E 5E F2 | 	cmps	_var01, #0 wcz
05e40     38 00 90 ED |  if_be	jmp	#LR__0243
05e44                 | '     currVolume[channel] += x
05e44     2F 21 02 F6 | 	mov	_var02, arg01
05e48     02 20 66 F0 | 	shl	_var02, #2
05e4c     FF FA 05 F1 | 	add	objptr, #255
05e50     FD 20 02 F1 | 	add	_var02, objptr
05e54     10 1F 02 FB | 	rdlong	_var01, _var02
05e58     B8 FA 05 F1 | 	add	objptr, #184
05e5c     FD 22 C2 FA | 	rdbyte	_var03, objptr
05e60     11 1F 02 F1 | 	add	_var01, _var03
05e64     2F 25 02 F6 | 	mov	_var04, arg01
05e68     02 24 66 F0 | 	shl	_var04, #2
05e6c     B8 FA 85 F1 | 	sub	objptr, #184
05e70     FD 24 02 F1 | 	add	_var04, objptr
05e74     12 1F 62 FC | 	wrlong	_var01, _var04
05e78     FF FA 85 F1 | 	sub	objptr, #255
05e7c                 | LR__0243
05e7c                 | '   if y > 0
05e7c     B8 FB 05 F1 | 	add	objptr, #440
05e80     FD 1E C2 FA | 	rdbyte	_var01, objptr
05e84     B8 FB 85 F1 | 	sub	objptr, #440
05e88     00 1E 5E F2 | 	cmps	_var01, #0 wcz
05e8c     34 00 90 ED |  if_be	jmp	#LR__0244
05e90                 | '     currVolume[channel] -= y
05e90     2F 21 02 F6 | 	mov	_var02, arg01
05e94     02 20 66 F0 | 	shl	_var02, #2
05e98     FF FA 05 F1 | 	add	objptr, #255
05e9c     FD 20 02 F1 | 	add	_var02, objptr
05ea0     10 1F 02 FB | 	rdlong	_var01, _var02
05ea4     B9 FA 05 F1 | 	add	objptr, #185
05ea8     FD 22 C2 FA | 	rdbyte	_var03, objptr
05eac     11 1F 82 F1 | 	sub	_var01, _var03
05eb0     02 5E 66 F0 | 	shl	arg01, #2
05eb4     B9 FA 85 F1 | 	sub	objptr, #185
05eb8     FD 5E 02 F1 | 	add	arg01, objptr
05ebc     2F 1F 62 FC | 	wrlong	_var01, arg01
05ec0     FF FA 85 F1 | 	sub	objptr, #255
05ec4                 | LR__0244
05ec4                 | _trackerplayer_spin2_doVolumeSlide_ret
05ec4     2D 00 64 FD | 	ret
05ec8                 | 
05ec8                 | ' 
05ec8                 | ' 
05ec8                 | ' '--------------------------------------------------------------
05ec8                 | ' '---------- Init the variables, start the cog. ----------------
05ec8                 | ' '--------------------------------------------------------------
05ec8                 | ' 
05ec8                 | ' pub start() :cog,base | iii
05ec8                 | _audio019_spin2_start
05ec8     07 5A 05 F6 | 	mov	COUNT_, #7
05ecc     B0 00 A0 FD | 	call	#pushregs_
05ed0                 | ' 
05ed0                 | ' base:=@channel1[0]
05ed0     FD 6C 02 F6 | 	mov	local01, objptr
05ed4                 | ' 
05ed4                 | ' repeat iii from 0 to 7
05ed4     00 6E 06 F6 | 	mov	local02, #0
05ed8     30 A2 9F FE | 	loc	pa,	#(@LR__0246-@LR__0245)
05edc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ee0                 | LR__0245
05ee0                 | '   long [base+32*iii]:=0
05ee0     36 71 02 F6 | 	mov	local03, local01
05ee4     37 73 02 F6 | 	mov	local04, local02
05ee8     05 72 66 F0 | 	shl	local04, #5
05eec     39 71 02 F1 | 	add	local03, local04
05ef0     38 01 68 FC | 	wrlong	#0, local03
05ef4                 | '   long [base+32*iii+4]:=0
05ef4     36 71 02 F6 | 	mov	local03, local01
05ef8     37 73 02 F6 | 	mov	local04, local02
05efc     05 72 66 F0 | 	shl	local04, #5
05f00     39 71 02 F1 | 	add	local03, local04
05f04     04 70 06 F1 | 	add	local03, #4
05f08     38 01 68 FC | 	wrlong	#0, local03
05f0c                 | '   long[base+32*iii+12]:=0
05f0c     36 71 02 F6 | 	mov	local03, local01
05f10     37 73 02 F6 | 	mov	local04, local02
05f14     05 72 66 F0 | 	shl	local04, #5
05f18     39 71 02 F1 | 	add	local03, local04
05f1c     0C 70 06 F1 | 	add	local03, #12
05f20     38 01 68 FC | 	wrlong	#0, local03
05f24                 | '   long[base+32*iii+16]:=2 
05f24     36 71 02 F6 | 	mov	local03, local01
05f28     37 73 02 F6 | 	mov	local04, local02
05f2c     05 72 66 F0 | 	shl	local04, #5
05f30     39 71 02 F1 | 	add	local03, local04
05f34     10 70 06 F1 | 	add	local03, #16
05f38     38 05 68 FC | 	wrlong	#2, local03
05f3c                 | '   word[base+32*iii+20]:=0
05f3c     36 71 02 F6 | 	mov	local03, local01
05f40     37 73 02 F6 | 	mov	local04, local02
05f44     05 72 66 F0 | 	shl	local04, #5
05f48     39 71 02 F1 | 	add	local03, local04
05f4c     14 70 06 F1 | 	add	local03, #20
05f50     38 01 58 FC | 	wrword	#0, local03
05f54                 | '   word[base+32*iii+22]:=8192
05f54     36 71 02 F6 | 	mov	local03, local01
05f58     37 73 02 F6 | 	mov	local04, local02
05f5c     05 72 66 F0 | 	shl	local04, #5
05f60     39 71 02 F1 | 	add	local03, local04
05f64     16 70 06 F1 | 	add	local03, #22
05f68     10 00 80 FF 
05f6c     38 01 58 FC | 	wrword	##8192, local03
05f70                 | '   word[base+32*iii+24]:=100+2*iii
05f70     37 73 02 F6 | 	mov	local04, local02
05f74     01 72 66 F0 | 	shl	local04, #1
05f78     64 70 06 F6 | 	mov	local03, #100
05f7c     39 71 02 F1 | 	add	local03, local04
05f80     36 75 02 F6 | 	mov	local05, local01
05f84     37 77 02 F6 | 	mov	local06, local02
05f88     05 76 66 F0 | 	shl	local06, #5
05f8c     3B 75 02 F1 | 	add	local05, local06
05f90     18 74 06 F1 | 	add	local05, #24
05f94     3A 71 52 FC | 	wrword	local03, local05
05f98                 | '   word[base+32*iii+26]:=2
05f98     36 71 02 F6 | 	mov	local03, local01
05f9c     37 73 02 F6 | 	mov	local04, local02
05fa0     05 72 66 F0 | 	shl	local04, #5
05fa4     39 71 02 F1 | 	add	local03, local04
05fa8     1A 70 06 F1 | 	add	local03, #26
05fac     38 05 58 FC | 	wrword	#2, local03
05fb0                 | '   long [base+32*iii+8]:=@null | $C0000000
05fb0     01 00 00 FF 
05fb4     F8 02 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
05fb8     01 71 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
05fbc     3E 70 26 F4 | 	bith	local03, #62
05fc0     36 75 02 F6 | 	mov	local05, local01
05fc4     37 77 02 F6 | 	mov	local06, local02
05fc8     05 76 66 F0 | 	shl	local06, #5
05fcc     3B 75 02 F1 | 	add	local05, local06
05fd0     08 74 06 F1 | 	add	local05, #8
05fd4     3A 71 62 FC | 	wrlong	local03, local05
05fd8     01 6E 06 F1 | 	add	local02, #1
05fdc     08 6E 5E F2 | 	cmps	local02, #8 wcz
05fe0     01 00 00 FF 
05fe4     F8 02 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
05fe8     F4 FE 9F CD |  if_b	jmp	#LR__0245
05fec                 | LR__0246
05fec                 | '   
05fec                 | ' cog:=coginit(16,@audio,@channel1)
05fec     01 61 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
05ff0     FD 62 02 F6 | 	mov	arg03, objptr
05ff4     10 5E 06 F6 | 	mov	arg01, #16
05ff8     28 62 62 FD | 	setq	arg03
05ffc     30 5F F2 FC | 	coginit	arg01, arg02 wc
06000     01 5E 66 C6 |  if_b	neg	arg01, #1
06004     2F 19 02 F6 | 	mov	result1, arg01
06008     0C 79 02 F6 | 	mov	local07, result1
0600c                 | ' waitms(100)
0600c     64 5E 06 F6 | 	mov	arg01, #100
06010     CC 04 B0 FD | 	call	#__system___waitms
06014                 | ' return cog,base
06014     36 1B 02 F6 | 	mov	result2, local01
06018     3C 19 02 F6 | 	mov	result1, local07
0601c     AF F0 03 F6 | 	mov	ptra, fp
06020     BA 00 A0 FD | 	call	#popregs_
06024                 | _audio019_spin2_start_ret
06024     2D 00 64 FD | 	ret
06028                 | hubexit
06028     81 00 80 FD | 	jmp	#cogexit
0602c                 | 
0602c                 | __system___setbaud
0602c     14 98 06 FB | 	rdlong	muldiva_, #20
06030     2F 9B 02 F6 | 	mov	muldivb_, arg01
06034     C6 00 A0 FD | 	call	#divide_
06038     40 7C 64 FD | 	dirl	#62
0603c     40 7E 64 FD | 	dirl	#63
06040     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06044     10 9A 66 F0 | 	shl	muldivb_, #16
06048     07 60 06 F6 | 	mov	arg02, #7
0604c     4D 61 02 F1 | 	add	arg02, muldivb_
06050     3E F8 0C FC | 	wrpin	#124, #62
06054     3E 60 16 FC | 	wxpin	arg02, #62
06058     3F 7C 0C FC | 	wrpin	#62, #63
0605c     14 60 06 F1 | 	add	arg02, #20
06060     3F 60 16 FC | 	wxpin	arg02, #63
06064     41 7C 64 FD | 	dirh	#62
06068     41 7E 64 FD | 	dirh	#63
0606c                 | __system___setbaud_ret
0606c     2D 00 64 FD | 	ret
06070                 | 
06070                 | __system___txraw
06070     02 5A 05 F6 | 	mov	COUNT_, #2
06074     B0 00 A0 FD | 	call	#pushregs_
06078     2F 6D 02 F6 | 	mov	local01, arg01
0607c     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06080     0C 00 90 5D |  if_ne	jmp	#LR__0247
06084     08 07 00 FF 
06088     00 5E 06 F6 | 	mov	arg01, ##921600
0608c     9C FF BF FD | 	call	#__system___setbaud
06090                 | LR__0247
06090     3E 6C 26 FC | 	wypin	local01, #62
06094     1F 02 64 FD | 	waitx	#1
06098     6C 9F 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
0609c     93 00 A0 FD | 	call	#FCACHE_LOAD_
060a0                 | LR__0248
060a0     40 7C 74 FD | 	testp	#62 wc
060a4     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
060a8                 | LR__0249
060a8     01 18 06 F6 | 	mov	result1, #1
060ac     AF F0 03 F6 | 	mov	ptra, fp
060b0     BA 00 A0 FD | 	call	#popregs_
060b4                 | __system___txraw_ret
060b4     2D 00 64 FD | 	ret
060b8                 | 
060b8                 | __system___rxraw
060b8     0B 5A 05 F6 | 	mov	COUNT_, #11
060bc     B0 00 A0 FD | 	call	#pushregs_
060c0     2F 6D 02 F6 | 	mov	local01, arg01
060c4     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
060c8     0C 00 90 5D |  if_ne	jmp	#LR__0250
060cc     08 07 00 FF 
060d0     00 5E 06 F6 | 	mov	arg01, ##921600
060d4     54 FF BF FD | 	call	#__system___setbaud
060d8                 | LR__0250
060d8     00 6C 0E F2 | 	cmp	local01, #0 wz
060dc     18 00 90 AD |  if_e	jmp	#LR__0251
060e0     1A 70 62 FD | 	getct	local03
060e4     14 72 06 FB | 	rdlong	local04, #20
060e8     0A 72 46 F0 | 	shr	local04, #10
060ec     39 6D 02 FD | 	qmul	local01, local04
060f0     18 74 62 FD | 	getqx	local05
060f4     3A 71 02 F1 | 	add	local03, local05
060f8                 | LR__0251
060f8     01 76 66 F6 | 	neg	local06, #1
060fc     00 78 06 F6 | 	mov	local07, #0
06100     04 00 06 F1 | 	add	ptr___system__dat__, #4
06104     00 7B 02 FB | 	rdlong	local08, ptr___system__dat__
06108     04 00 86 F1 | 	sub	ptr___system__dat__, #4
0610c                 | LR__0252
0610c     08 7A 16 F4 | 	testb	local08, #8 wc
06110     09 7A 76 F4 | 	testbn	local08, #9 andc
06114     0A 7A 46 F0 | 	shr	local08, #10
06118     01 78 06 C6 |  if_b	mov	local07, #1
0611c     10 00 90 CD |  if_b	jmp	#LR__0253
06120     40 7E 6C FD | 	testp	#63 wz
06124     01 78 06 A6 |  if_e	mov	local07, #1
06128     3F 7A 8E AA |  if_e	rdpin	local08, #63
0612c     04 7A 46 A0 |  if_e	shr	local08, #4
06130                 | LR__0253
06130     00 6E 06 F6 | 	mov	local02, #0
06134     00 78 0E F2 | 	cmp	local07, #0 wz
06138     01 6E 66 56 |  if_ne	neg	local02, #1
0613c     00 7C 06 F6 | 	mov	local09, #0
06140     00 72 06 F6 | 	mov	local04, #0
06144     00 6C 0E F2 | 	cmp	local01, #0 wz
06148     01 72 66 56 |  if_ne	neg	local04, #1
0614c     00 74 06 F6 | 	mov	local05, #0
06150     00 7E 06 F6 | 	mov	local10, #0
06154     1A 80 62 FD | 	getct	local11
06158     38 81 82 F1 | 	sub	local11, local03
0615c     00 80 5E F2 | 	cmps	local11, #0 wcz
06160     01 7E 66 C6 |  if_b	neg	local10, #1
06164     00 7E 0E F2 | 	cmp	local10, #0 wz
06168     01 74 66 56 |  if_ne	neg	local05, #1
0616c     3A 73 CA F7 | 	test	local04, local05 wz
06170     01 7C 66 56 |  if_ne	neg	local09, #1
06174     3E 6F 4A F5 | 	or	local02, local09 wz
06178     90 FF 9F AD |  if_e	jmp	#LR__0252
0617c     00 78 0E F2 | 	cmp	local07, #0 wz
06180     3D 77 02 56 |  if_ne	mov	local06, local08
06184     FF 76 06 55 |  if_ne	and	local06, #255
06188     04 00 06 F1 | 	add	ptr___system__dat__, #4
0618c     00 7B 62 FC | 	wrlong	local08, ptr___system__dat__
06190     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06194     3B 19 02 F6 | 	mov	result1, local06
06198     AF F0 03 F6 | 	mov	ptra, fp
0619c     BA 00 A0 FD | 	call	#popregs_
061a0                 | __system___rxraw_ret
061a0     2D 00 64 FD | 	ret
061a4                 | 
061a4                 | __system____builtin_memmove
061a4     2F 1F 02 F6 | 	mov	_var01, arg01
061a8     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
061ac     50 00 90 3D |  if_ae	jmp	#LR__0261
061b0     6C 9E 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
061b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
061b8                 | LR__0254
061b8     03 62 5E F2 | 	cmps	arg03, #3 wcz
061bc     18 00 90 ED |  if_be	jmp	#LR__0256
061c0     30 21 02 FB | 	rdlong	_var02, arg02
061c4     2F 21 62 FC | 	wrlong	_var02, arg01
061c8     04 5E 06 F1 | 	add	arg01, #4
061cc     04 60 06 F1 | 	add	arg02, #4
061d0     04 62 86 F1 | 	sub	arg03, #4
061d4     E0 FF 9F FD | 	jmp	#LR__0254
061d8                 | LR__0255
061d8                 | LR__0256
061d8     31 23 0A F6 | 	mov	_var03, arg03 wz
061dc     4C 00 90 AD |  if_e	jmp	#LR__0267
061e0     30 9E 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
061e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
061e8                 | LR__0257
061e8     11 09 D8 FC | 	rep	@LR__0260, _var03
061ec                 | LR__0258
061ec     30 21 C2 FA | 	rdbyte	_var02, arg02
061f0     2F 21 42 FC | 	wrbyte	_var02, arg01
061f4     01 5E 06 F1 | 	add	arg01, #1
061f8     01 60 06 F1 | 	add	arg02, #1
061fc                 | LR__0259
061fc                 | LR__0260
061fc     2C 00 90 FD | 	jmp	#LR__0267
06200                 | LR__0261
06200     31 5F 02 F1 | 	add	arg01, arg03
06204     31 61 02 F1 | 	add	arg02, arg03
06208     31 25 0A F6 | 	mov	_var04, arg03 wz
0620c     1C 00 90 AD |  if_e	jmp	#LR__0266
06210     00 9E 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
06214     93 00 A0 FD | 	call	#FCACHE_LOAD_
06218                 | LR__0262
06218     12 09 D8 FC | 	rep	@LR__0265, _var04
0621c                 | LR__0263
0621c     01 5E 86 F1 | 	sub	arg01, #1
06220     01 60 86 F1 | 	sub	arg02, #1
06224     30 21 C2 FA | 	rdbyte	_var02, arg02
06228     2F 21 42 FC | 	wrbyte	_var02, arg01
0622c                 | LR__0264
0622c                 | LR__0265
0622c                 | LR__0266
0622c                 | LR__0267
0622c     0F 19 02 F6 | 	mov	result1, _var01
06230                 | __system____builtin_memmove_ret
06230     2D 00 64 FD | 	ret
06234                 | 
06234                 | __system__longmove
06234     2F 1F 02 F6 | 	mov	_var01, arg01
06238     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
0623c     28 00 90 3D |  if_ae	jmp	#LR__0272
06240     31 21 0A F6 | 	mov	_var02, arg03 wz
06244     5C 00 90 AD |  if_e	jmp	#LR__0278
06248     C8 9D 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
0624c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06250                 | LR__0268
06250     10 09 D8 FC | 	rep	@LR__0271, _var02
06254                 | LR__0269
06254     30 23 02 FB | 	rdlong	_var03, arg02
06258     2F 23 62 FC | 	wrlong	_var03, arg01
0625c     04 5E 06 F1 | 	add	arg01, #4
06260     04 60 06 F1 | 	add	arg02, #4
06264                 | LR__0270
06264                 | LR__0271
06264     3C 00 90 FD | 	jmp	#LR__0278
06268                 | LR__0272
06268     31 25 02 F6 | 	mov	_var04, arg03
0626c     02 24 66 F0 | 	shl	_var04, #2
06270     12 5F 02 F1 | 	add	arg01, _var04
06274     31 25 02 F6 | 	mov	_var04, arg03
06278     02 24 66 F0 | 	shl	_var04, #2
0627c     12 61 02 F1 | 	add	arg02, _var04
06280     31 27 0A F6 | 	mov	_var05, arg03 wz
06284     1C 00 90 AD |  if_e	jmp	#LR__0277
06288     88 9D 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
0628c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06290                 | LR__0273
06290     13 09 D8 FC | 	rep	@LR__0276, _var05
06294                 | LR__0274
06294     04 5E 86 F1 | 	sub	arg01, #4
06298     04 60 86 F1 | 	sub	arg02, #4
0629c     30 23 02 FB | 	rdlong	_var03, arg02
062a0     2F 23 62 FC | 	wrlong	_var03, arg01
062a4                 | LR__0275
062a4                 | LR__0276
062a4                 | LR__0277
062a4                 | LR__0278
062a4     0F 19 02 F6 | 	mov	result1, _var01
062a8                 | __system__longmove_ret
062a8     2D 00 64 FD | 	ret
062ac                 | 
062ac                 | __system____topofstack
062ac     00 5A 05 F6 | 	mov	COUNT_, #0
062b0     B0 00 A0 FD | 	call	#pushregs_
062b4     08 F0 07 F1 | 	add	ptra, #8
062b8     04 5E 05 F1 | 	add	fp, #4
062bc     AF 5E 62 FC | 	wrlong	arg01, fp
062c0     AF 18 02 F6 | 	mov	result1, fp
062c4     04 5E 85 F1 | 	sub	fp, #4
062c8     AF F0 03 F6 | 	mov	ptra, fp
062cc     BA 00 A0 FD | 	call	#popregs_
062d0                 | __system____topofstack_ret
062d0     2D 00 64 FD | 	ret
062d4                 | 
062d4                 | __system___make_methodptr
062d4     04 5A 05 F6 | 	mov	COUNT_, #4
062d8     B0 00 A0 FD | 	call	#pushregs_
062dc     2F 6D 02 F6 | 	mov	local01, arg01
062e0     30 6F 02 F6 | 	mov	local02, arg02
062e4     08 5E 06 F6 | 	mov	arg01, #8
062e8     84 0D B0 FD | 	call	#__system___gc_alloc_managed
062ec     0C 71 0A F6 | 	mov	local03, result1 wz
062f0     10 00 90 AD |  if_e	jmp	#LR__0279
062f4     38 6D 62 FC | 	wrlong	local01, local03
062f8     38 73 02 F6 | 	mov	local04, local03
062fc     04 72 06 F1 | 	add	local04, #4
06300     39 6F 62 FC | 	wrlong	local02, local04
06304                 | LR__0279
06304     38 19 02 F6 | 	mov	result1, local03
06308     AF F0 03 F6 | 	mov	ptra, fp
0630c     BA 00 A0 FD | 	call	#popregs_
06310                 | __system___make_methodptr_ret
06310     2D 00 64 FD | 	ret
06314                 | 
06314                 | __system___lockmem
06314     02 5A 05 F6 | 	mov	COUNT_, #2
06318     B0 00 A0 FD | 	call	#pushregs_
0631c     00 18 06 F6 | 	mov	result1, #0
06320     01 18 62 FD | 	cogid	result1
06324     0C 6D 02 F6 | 	mov	local01, result1
06328     00 6D 06 F1 | 	add	local01, #256
0632c                 | LR__0280
0632c     2F 6F 0A FB | 	rdlong	local02, arg01 wz
06330     2F 6D 62 AC |  if_e	wrlong	local01, arg01
06334     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06338     2F 6F 02 AB |  if_e	rdlong	local02, arg01
0633c     36 6F 0A F2 | 	cmp	local02, local01 wz
06340     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
06344     AF F0 03 F6 | 	mov	ptra, fp
06348     BA 00 A0 FD | 	call	#popregs_
0634c                 | __system___lockmem_ret
0634c     2D 00 64 FD | 	ret
06350                 | 
06350                 | __system___string_concat
06350     07 5A 05 F6 | 	mov	COUNT_, #7
06354     B0 00 A0 FD | 	call	#pushregs_
06358     2F 6D 02 F6 | 	mov	local01, arg01
0635c     30 6F 02 F6 | 	mov	local02, arg02
06360     36 5F 02 F6 | 	mov	arg01, local01
06364     00 70 06 F6 | 	mov	local03, #0
06368     A4 9C 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
0636c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06370                 | LR__0281
06370     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06374     01 70 06 51 |  if_ne	add	local03, #1
06378     01 5E 06 51 |  if_ne	add	arg01, #1
0637c     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
06380                 | LR__0282
06380     38 75 02 F6 | 	mov	local05, local03
06384     37 5F 02 F6 | 	mov	arg01, local02
06388     00 70 06 F6 | 	mov	local03, #0
0638c     80 9C 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
06390     93 00 A0 FD | 	call	#FCACHE_LOAD_
06394                 | LR__0283
06394     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06398     01 70 06 51 |  if_ne	add	local03, #1
0639c     01 5E 06 51 |  if_ne	add	arg01, #1
063a0     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
063a4                 | LR__0284
063a4     38 19 02 F6 | 	mov	result1, local03
063a8     0C 77 02 F6 | 	mov	local06, result1
063ac     3A 5F 02 F6 | 	mov	arg01, local05
063b0     3B 5F 02 F1 | 	add	arg01, local06
063b4     01 5E 06 F1 | 	add	arg01, #1
063b8     B4 0C B0 FD | 	call	#__system___gc_alloc_managed
063bc     0C 79 0A F6 | 	mov	local07, result1 wz
063c0     28 00 90 AD |  if_e	jmp	#LR__0285
063c4     3C 5F 02 F6 | 	mov	arg01, local07
063c8     36 61 02 F6 | 	mov	arg02, local01
063cc     3A 63 02 F6 | 	mov	arg03, local05
063d0     D0 FD BF FD | 	call	#__system____builtin_memmove
063d4     3C 5F 02 F6 | 	mov	arg01, local07
063d8     3A 5F 02 F1 | 	add	arg01, local05
063dc     01 76 06 F1 | 	add	local06, #1
063e0     37 61 02 F6 | 	mov	arg02, local02
063e4     3B 63 02 F6 | 	mov	arg03, local06
063e8     B8 FD BF FD | 	call	#__system____builtin_memmove
063ec                 | LR__0285
063ec     3C 19 02 F6 | 	mov	result1, local07
063f0     AF F0 03 F6 | 	mov	ptra, fp
063f4     BA 00 A0 FD | 	call	#popregs_
063f8                 | __system___string_concat_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | __system___tx
063fc     03 5A 05 F6 | 	mov	COUNT_, #3
06400     B0 00 A0 FD | 	call	#pushregs_
06404     2F 6D 02 F6 | 	mov	local01, arg01
06408     0A 6C 0E F2 | 	cmp	local01, #10 wz
0640c     20 00 90 5D |  if_ne	jmp	#LR__0286
06410     08 00 06 F1 | 	add	ptr___system__dat__, #8
06414     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06418     08 00 86 F1 | 	sub	ptr___system__dat__, #8
0641c     37 71 02 F6 | 	mov	local03, local02
06420     02 70 0E F5 | 	and	local03, #2 wz
06424     08 00 90 AD |  if_e	jmp	#LR__0286
06428     0D 5E 06 F6 | 	mov	arg01, #13
0642c     40 FC BF FD | 	call	#__system___txraw
06430                 | LR__0286
06430     36 5F 02 F6 | 	mov	arg01, local01
06434     38 FC BF FD | 	call	#__system___txraw
06438     AF F0 03 F6 | 	mov	ptra, fp
0643c     BA 00 A0 FD | 	call	#popregs_
06440                 | __system___tx_ret
06440     2D 00 64 FD | 	ret
06444                 | 
06444                 | __system___rx
06444     02 5A 05 F6 | 	mov	COUNT_, #2
06448     B0 00 A0 FD | 	call	#pushregs_
0644c                 | LR__0287
0644c     00 5E 06 F6 | 	mov	arg01, #0
06450     64 FC BF FD | 	call	#__system___rxraw
06454     0C 6D 02 F6 | 	mov	local01, result1
06458     FF FF 7F FF 
0645c     FF 6D 0E F2 | 	cmp	local01, ##-1 wz
06460     E8 FF 9F AD |  if_e	jmp	#LR__0287
06464     0D 6C 0E F2 | 	cmp	local01, #13 wz
06468     14 00 90 5D |  if_ne	jmp	#LR__0288
0646c     08 00 06 F1 | 	add	ptr___system__dat__, #8
06470     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06474     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06478     02 6E CE F7 | 	test	local02, #2 wz
0647c     0A 6C 06 56 |  if_ne	mov	local01, #10
06480                 | LR__0288
06480     08 00 06 F1 | 	add	ptr___system__dat__, #8
06484     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06488     08 00 86 F1 | 	sub	ptr___system__dat__, #8
0648c     01 6E CE F7 | 	test	local02, #1 wz
06490     1C 00 90 AD |  if_e	jmp	#LR__0291
06494     7F 6C 0E F2 | 	cmp	local01, #127 wz
06498     0C 00 90 5D |  if_ne	jmp	#LR__0289
0649c     08 5E 06 F6 | 	mov	arg01, #8
064a0     58 FF BF FD | 	call	#__system___tx
064a4     08 00 90 FD | 	jmp	#LR__0290
064a8                 | LR__0289
064a8     36 5F 02 F6 | 	mov	arg01, local01
064ac     4C FF BF FD | 	call	#__system___tx
064b0                 | LR__0290
064b0                 | LR__0291
064b0     36 19 02 F6 | 	mov	result1, local01
064b4     AF F0 03 F6 | 	mov	ptra, fp
064b8     BA 00 A0 FD | 	call	#popregs_
064bc                 | __system___rx_ret
064bc     2D 00 64 FD | 	ret
064c0                 | 
064c0                 | __system___pinread
064c0     20 5E CE F7 | 	test	arg01, #32 wz
064c4     FF 1F 02 56 |  if_ne	mov	_var01, inb
064c8     FE 1F 02 A6 |  if_e	mov	_var01, ina
064cc     2F 1F 42 F0 | 	shr	_var01, arg01
064d0     06 5E 46 F0 | 	shr	arg01, #6
064d4     2F 1F 42 F7 | 	zerox	_var01, arg01
064d8     0F 19 02 F6 | 	mov	result1, _var01
064dc                 | __system___pinread_ret
064dc     2D 00 64 FD | 	ret
064e0                 | 
064e0                 | __system___waitms
064e0     03 5A 05 F6 | 	mov	COUNT_, #3
064e4     B0 00 A0 FD | 	call	#pushregs_
064e8     2F 6D 02 F6 | 	mov	local01, arg01
064ec     14 6E 06 FB | 	rdlong	local02, #20
064f0     24 9B 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
064f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
064f8                 | LR__0292
064f8     01 00 00 FF 
064fc     E8 6D 5E F2 | 	cmps	local01, ##1000 wcz
06500     1F 6E 62 1D |  if_a	waitx	local02
06504     01 00 00 1F 
06508     E8 6D 86 11 |  if_a	sub	local01, ##1000
0650c     E8 FF 9F 1D |  if_a	jmp	#LR__0292
06510                 | LR__0293
06510     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06514     00 71 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06518     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
0651c     20 00 90 5D |  if_ne	jmp	#LR__0294
06520     37 99 02 F6 | 	mov	muldiva_, local02
06524     01 00 00 FF 
06528     E8 9B 06 F6 | 	mov	muldivb_, ##1000
0652c     C2 00 A0 FD | 	call	#unsdivide_
06530     4D 71 02 F6 | 	mov	local03, muldivb_
06534     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06538     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0653c     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
06540                 | LR__0294
06540     00 6C 5E F2 | 	cmps	local01, #0 wcz
06544     38 6D 02 1D |  if_a	qmul	local01, local03
06548     18 5E 62 1D |  if_a	getqx	arg01
0654c     1F 5E 62 1D |  if_a	waitx	arg01
06550     AF F0 03 F6 | 	mov	ptra, fp
06554     BA 00 A0 FD | 	call	#popregs_
06558                 | __system___waitms_ret
06558     2D 00 64 FD | 	ret
0655c                 | 
0655c                 | __system___waitus
0655c     02 5A 05 F6 | 	mov	COUNT_, #2
06560     B0 00 A0 FD | 	call	#pushregs_
06564     2F 6D 02 F6 | 	mov	local01, arg01
06568     10 00 06 F1 | 	add	ptr___system__dat__, #16
0656c     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06570     10 00 86 F1 | 	sub	ptr___system__dat__, #16
06574     20 00 90 5D |  if_ne	jmp	#LR__0295
06578     14 98 06 FB | 	rdlong	muldiva_, #20
0657c     A1 07 00 FF 
06580     40 9A 06 F6 | 	mov	muldivb_, ##1000000
06584     C2 00 A0 FD | 	call	#unsdivide_
06588     4D 6F 02 F6 | 	mov	local02, muldivb_
0658c     10 00 06 F1 | 	add	ptr___system__dat__, #16
06590     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06594     10 00 86 F1 | 	sub	ptr___system__dat__, #16
06598                 | LR__0295
06598     37 6D 02 FD | 	qmul	local01, local02
0659c     18 5E 62 FD | 	getqx	arg01
065a0     1F 5E 62 FD | 	waitx	arg01
065a4     AF F0 03 F6 | 	mov	ptra, fp
065a8     BA 00 A0 FD | 	call	#popregs_
065ac                 | __system___waitus_ret
065ac     2D 00 64 FD | 	ret
065b0                 | 
065b0                 | __system___basic_open
065b0     06 5A 05 F6 | 	mov	COUNT_, #6
065b4     B0 00 A0 FD | 	call	#pushregs_
065b8     30 6D 02 F6 | 	mov	local01, arg02
065bc     31 6F 02 F6 | 	mov	local02, arg03
065c0     32 71 02 F6 | 	mov	local03, arg04
065c4     9C 12 B0 FD | 	call	#__system____getftab
065c8     0C 73 0A F6 | 	mov	local04, result1 wz
065cc     18 00 90 5D |  if_ne	jmp	#LR__0296
065d0     F9 5E 02 F6 | 	mov	arg01, abortchain
065d4     0C 60 06 F6 | 	mov	arg02, #12
065d8     01 62 06 F6 | 	mov	arg03, #1
065dc     E6 00 A0 FD | 	call	#__longjmp
065e0     01 18 66 F6 | 	neg	result1, #1
065e4     90 00 90 FD | 	jmp	#LR__0301
065e8                 | LR__0296
065e8     08 72 06 F1 | 	add	local04, #8
065ec     39 75 0A FB | 	rdlong	local05, local04 wz
065f0     08 72 86 F1 | 	sub	local04, #8
065f4     08 00 90 AD |  if_e	jmp	#LR__0297
065f8     39 5F 02 F6 | 	mov	arg01, local04
065fc     C0 14 B0 FD | 	call	#__system___closeraw
06600                 | LR__0297
06600     00 6C 0E F2 | 	cmp	local01, #0 wz
06604     48 00 90 AD |  if_e	jmp	#LR__0299
06608     04 5E 06 F6 | 	mov	arg01, #4
0660c     60 0A B0 FD | 	call	#__system___gc_alloc_managed
06610     0C 77 0A F6 | 	mov	local06, result1 wz
06614     18 00 90 5D |  if_ne	jmp	#LR__0298
06618     F9 5E 02 F6 | 	mov	arg01, abortchain
0661c     07 60 06 F6 | 	mov	arg02, #7
06620     01 62 06 F6 | 	mov	arg03, #1
06624     E6 00 A0 FD | 	call	#__longjmp
06628     01 18 66 F6 | 	neg	result1, #1
0662c     48 00 90 FD | 	jmp	#LR__0301
06630                 | LR__0298
06630     3B 6D 62 FC | 	wrlong	local01, local06
06634     FE 60 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06638     3B 5F 02 F6 | 	mov	arg01, local06
0663c     94 FC BF FD | 	call	#__system___make_methodptr
06640     18 72 06 F1 | 	add	local04, #24
06644     39 19 62 FC | 	wrlong	result1, local04
06648     18 72 86 F1 | 	sub	local04, #24
0664c     0C 00 90 FD | 	jmp	#LR__0300
06650                 | LR__0299
06650     18 72 06 F1 | 	add	local04, #24
06654     39 6D 62 FC | 	wrlong	local01, local04
06658     18 72 86 F1 | 	sub	local04, #24
0665c                 | LR__0300
0665c     08 72 06 F1 | 	add	local04, #8
06660     39 0F 68 FC | 	wrlong	#7, local04
06664     14 72 06 F1 | 	add	local04, #20
06668     39 6F 62 FC | 	wrlong	local02, local04
0666c     04 72 06 F1 | 	add	local04, #4
06670     39 71 62 FC | 	wrlong	local03, local04
06674     00 18 06 F6 | 	mov	result1, #0
06678                 | LR__0301
06678     AF F0 03 F6 | 	mov	ptra, fp
0667c     BA 00 A0 FD | 	call	#popregs_
06680                 | __system___basic_open_ret
06680     2D 00 64 FD | 	ret
06684                 | 
06684                 | __system___basic_print_char
06684     05 5A 05 F6 | 	mov	COUNT_, #5
06688     B0 00 A0 FD | 	call	#pushregs_
0668c     30 6D 02 F6 | 	mov	local01, arg02
06690     98 13 B0 FD | 	call	#__system___gettxfunc
06694     0C 6F 0A F6 | 	mov	local02, result1 wz
06698     00 18 06 A6 |  if_e	mov	result1, #0
0669c     24 00 90 AD |  if_e	jmp	#LR__0302
066a0     37 71 02 FB | 	rdlong	local03, local02
066a4     04 6E 06 F1 | 	add	local02, #4
066a8     37 73 02 FB | 	rdlong	local04, local02
066ac     36 5F 02 F6 | 	mov	arg01, local01
066b0     FD 74 02 F6 | 	mov	local05, objptr
066b4     38 FB 01 F6 | 	mov	objptr, local03
066b8     2D 72 62 FD | 	call	local04
066bc     3A FB 01 F6 | 	mov	objptr, local05
066c0     01 18 06 F6 | 	mov	result1, #1
066c4                 | LR__0302
066c4     AF F0 03 F6 | 	mov	ptra, fp
066c8     BA 00 A0 FD | 	call	#popregs_
066cc                 | __system___basic_print_char_ret
066cc     2D 00 64 FD | 	ret
066d0                 | 
066d0                 | __system___basic_print_string
066d0     03 5A 05 F6 | 	mov	COUNT_, #3
066d4     B0 00 A0 FD | 	call	#pushregs_
066d8     30 6D 02 F6 | 	mov	local01, arg02
066dc     31 6F 02 F6 | 	mov	local02, arg03
066e0     48 13 B0 FD | 	call	#__system___gettxfunc
066e4     0C 71 0A F6 | 	mov	local03, result1 wz
066e8     00 18 06 A6 |  if_e	mov	result1, #0
066ec     1C 00 90 AD |  if_e	jmp	#LR__0303
066f0     00 6C 0E F2 | 	cmp	local01, #0 wz
066f4     00 18 06 A6 |  if_e	mov	result1, #0
066f8     10 00 90 AD |  if_e	jmp	#LR__0303
066fc     37 61 02 F6 | 	mov	arg02, local02
06700     36 63 02 F6 | 	mov	arg03, local01
06704     38 5F 02 F6 | 	mov	arg01, local03
06708     B0 00 B0 FD | 	call	#__system___fmtstr
0670c                 | LR__0303
0670c     AF F0 03 F6 | 	mov	ptra, fp
06710     BA 00 A0 FD | 	call	#popregs_
06714                 | __system___basic_print_string_ret
06714     2D 00 64 FD | 	ret
06718                 | 
06718                 | __system___basic_print_integer
06718     04 5A 05 F6 | 	mov	COUNT_, #4
0671c     B0 00 A0 FD | 	call	#pushregs_
06720     30 6D 02 F6 | 	mov	local01, arg02
06724     31 6F 02 F6 | 	mov	local02, arg03
06728     32 71 02 F6 | 	mov	local03, arg04
0672c     FC 12 B0 FD | 	call	#__system___gettxfunc
06730     0C 73 0A F6 | 	mov	local04, result1 wz
06734     00 18 06 A6 |  if_e	mov	result1, #0
06738     14 00 90 AD |  if_e	jmp	#LR__0304
0673c     37 61 02 F6 | 	mov	arg02, local02
06740     36 63 02 F6 | 	mov	arg03, local01
06744     38 65 02 F6 | 	mov	arg04, local03
06748     39 5F 02 F6 | 	mov	arg01, local04
0674c     64 01 B0 FD | 	call	#__system___fmtnum
06750                 | LR__0304
06750     AF F0 03 F6 | 	mov	ptra, fp
06754     BA 00 A0 FD | 	call	#popregs_
06758                 | __system___basic_print_integer_ret
06758     2D 00 64 FD | 	ret
0675c                 | 
0675c                 | __system___fmtchar
0675c     00 5A 05 F6 | 	mov	COUNT_, #0
06760     B0 00 A0 FD | 	call	#pushregs_
06764     14 F0 07 F1 | 	add	ptra, #20
06768     04 5E 05 F1 | 	add	fp, #4
0676c     AF 5E 62 FC | 	wrlong	arg01, fp
06770     04 5E 05 F1 | 	add	fp, #4
06774     AF 60 62 FC | 	wrlong	arg02, fp
06778     04 5E 05 F1 | 	add	fp, #4
0677c     AF 62 62 FC | 	wrlong	arg03, fp
06780     04 5E 05 F1 | 	add	fp, #4
06784     AF 62 42 FC | 	wrbyte	arg03, fp
06788     01 5E 05 F1 | 	add	fp, #1
0678c     AF 00 48 FC | 	wrbyte	#0, fp
06790     0D 5E 85 F1 | 	sub	fp, #13
06794     AF 5E 02 FB | 	rdlong	arg01, fp
06798     04 5E 05 F1 | 	add	fp, #4
0679c     AF 60 02 FB | 	rdlong	arg02, fp
067a0     08 5E 05 F1 | 	add	fp, #8
067a4     AF 62 02 F6 | 	mov	arg03, fp
067a8     10 5E 85 F1 | 	sub	fp, #16
067ac     0C 00 B0 FD | 	call	#__system___fmtstr
067b0     AF F0 03 F6 | 	mov	ptra, fp
067b4     BA 00 A0 FD | 	call	#popregs_
067b8                 | __system___fmtchar_ret
067b8     2D 00 64 FD | 	ret
067bc                 | 
067bc                 | __system___fmtstr
067bc     0E 5A 05 F6 | 	mov	COUNT_, #14
067c0     B0 00 A0 FD | 	call	#pushregs_
067c4     2F 6D 02 F6 | 	mov	local01, arg01
067c8     30 6F 02 F6 | 	mov	local02, arg02
067cc     31 71 02 F6 | 	mov	local03, arg03
067d0     37 73 02 F6 | 	mov	local04, local02
067d4     FF 72 06 F5 | 	and	local04, #255
067d8     38 5F 02 F6 | 	mov	arg01, local03
067dc     00 74 06 F6 | 	mov	local05, #0
067e0     2C 98 9F FE | 	loc	pa,	#(@LR__0306-@LR__0305)
067e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
067e8                 | LR__0305
067e8     2F 77 CA FA | 	rdbyte	local06, arg01 wz
067ec     01 74 06 51 |  if_ne	add	local05, #1
067f0     01 5E 06 51 |  if_ne	add	arg01, #1
067f4     F0 FF 9F 5D |  if_ne	jmp	#LR__0305
067f8                 | LR__0306
067f8     3A 19 02 F6 | 	mov	result1, local05
067fc     0C 79 02 F6 | 	mov	local07, result1
06800     00 72 0E F2 | 	cmp	local04, #0 wz
06804     04 00 90 AD |  if_e	jmp	#LR__0307
06808     39 79 7A F3 | 	fles	local07, local04 wcz
0680c                 | LR__0307
0680c     37 61 02 F6 | 	mov	arg02, local02
06810     3C 63 02 F6 | 	mov	arg03, local07
06814     36 5F 02 F6 | 	mov	arg01, local01
06818     02 64 06 F6 | 	mov	arg04, #2
0681c     BC 10 B0 FD | 	call	#__system___fmtpad
06820     0C 7B 02 F6 | 	mov	local08, result1
06824     00 7A 5E F2 | 	cmps	local08, #0 wcz
06828     3D 19 02 C6 |  if_b	mov	result1, local08
0682c     78 00 90 CD |  if_b	jmp	#LR__0310
06830     00 7C 06 F6 | 	mov	local09, #0
06834                 | LR__0308
06834     3C 7D 5A F2 | 	cmps	local09, local07 wcz
06838     44 00 90 3D |  if_ae	jmp	#LR__0309
0683c     36 7F 02 F6 | 	mov	local10, local01
06840     3F 81 02 FB | 	rdlong	local11, local10
06844     04 7E 06 F1 | 	add	local10, #4
06848     3F 83 02 FB | 	rdlong	local12, local10
0684c     38 5F C2 FA | 	rdbyte	arg01, local03
06850     FD 84 02 F6 | 	mov	local13, objptr
06854     40 FB 01 F6 | 	mov	objptr, local11
06858     01 70 06 F1 | 	add	local03, #1
0685c     2D 82 62 FD | 	call	local12
06860     42 FB 01 F6 | 	mov	objptr, local13
06864     0C 87 02 F6 | 	mov	local14, result1
06868     00 86 5E F2 | 	cmps	local14, #0 wcz
0686c     43 19 02 C6 |  if_b	mov	result1, local14
06870     34 00 90 CD |  if_b	jmp	#LR__0310
06874     43 7B 02 F1 | 	add	local08, local14
06878     01 7C 06 F1 | 	add	local09, #1
0687c     B4 FF 9F FD | 	jmp	#LR__0308
06880                 | LR__0309
06880     37 61 02 F6 | 	mov	arg02, local02
06884     3C 63 02 F6 | 	mov	arg03, local07
06888     36 5F 02 F6 | 	mov	arg01, local01
0688c     01 64 06 F6 | 	mov	arg04, #1
06890     48 10 B0 FD | 	call	#__system___fmtpad
06894     0C 87 02 F6 | 	mov	local14, result1
06898     00 86 5E F2 | 	cmps	local14, #0 wcz
0689c     43 19 02 C6 |  if_b	mov	result1, local14
068a0     43 7B 02 31 |  if_ae	add	local08, local14
068a4     3D 19 02 36 |  if_ae	mov	result1, local08
068a8                 | LR__0310
068a8     AF F0 03 F6 | 	mov	ptra, fp
068ac     BA 00 A0 FD | 	call	#popregs_
068b0                 | __system___fmtstr_ret
068b0     2D 00 64 FD | 	ret
068b4                 | 
068b4                 | __system___fmtnum
068b4     06 5A 05 F6 | 	mov	COUNT_, #6
068b8     B0 00 A0 FD | 	call	#pushregs_
068bc     70 F0 07 F1 | 	add	ptra, #112
068c0     04 5E 05 F1 | 	add	fp, #4
068c4     AF 5E 62 FC | 	wrlong	arg01, fp
068c8     04 5E 05 F1 | 	add	fp, #4
068cc     AF 60 62 FC | 	wrlong	arg02, fp
068d0     04 5E 05 F1 | 	add	fp, #4
068d4     AF 62 62 FC | 	wrlong	arg03, fp
068d8     04 5E 05 F1 | 	add	fp, #4
068dc     AF 64 62 FC | 	wrlong	arg04, fp
068e0     04 5E 05 F1 | 	add	fp, #4
068e4     AF 6C 02 F6 | 	mov	local01, fp
068e8     44 5E 05 F1 | 	add	fp, #68
068ec     AF 6C 62 FC | 	wrlong	local01, fp
068f0     04 5E 05 F1 | 	add	fp, #4
068f4     AF 00 68 FC | 	wrlong	#0, fp
068f8     54 5E 85 F1 | 	sub	fp, #84
068fc     AF 6C 02 FB | 	rdlong	local01, fp
06900     10 6C 46 F0 | 	shr	local01, #16
06904     3F 6C 06 F5 | 	and	local01, #63
06908     58 5E 05 F1 | 	add	fp, #88
0690c     AF 6C 62 FC | 	wrlong	local01, fp
06910     58 5E 85 F1 | 	sub	fp, #88
06914     AF 6C 02 FB | 	rdlong	local01, fp
06918     FF 6C 06 F5 | 	and	local01, #255
0691c     5C 5E 05 F1 | 	add	fp, #92
06920     AF 6C 62 FC | 	wrlong	local01, fp
06924     5C 5E 85 F1 | 	sub	fp, #92
06928     AF 6C 02 FB | 	rdlong	local01, fp
0692c     1A 6C 46 F0 | 	shr	local01, #26
06930     03 6C 06 F5 | 	and	local01, #3
06934     60 5E 05 F1 | 	add	fp, #96
06938     AF 6C 62 FC | 	wrlong	local01, fp
0693c     08 5E 85 F1 | 	sub	fp, #8
06940     AF 6C 02 FB | 	rdlong	local01, fp
06944     60 5E 85 F1 | 	sub	fp, #96
06948     00 6C 5E F2 | 	cmps	local01, #0 wcz
0694c     14 00 90 ED |  if_be	jmp	#LR__0311
06950     60 5E 05 F1 | 	add	fp, #96
06954     AF 6C 02 FB | 	rdlong	local01, fp
06958     01 6C 86 F1 | 	sub	local01, #1
0695c     AF 6C 62 FC | 	wrlong	local01, fp
06960     60 5E 85 F1 | 	sub	fp, #96
06964                 | LR__0311
06964     64 5E 05 F1 | 	add	fp, #100
06968     AF 6C 02 FB | 	rdlong	local01, fp
0696c     64 5E 85 F1 | 	sub	fp, #100
06970     40 6C 5E F2 | 	cmps	local01, #64 wcz
06974     14 00 90 1D |  if_a	jmp	#LR__0312
06978     64 5E 05 F1 | 	add	fp, #100
0697c     AF 6E 02 FB | 	rdlong	local02, fp
06980     64 5E 85 F1 | 	sub	fp, #100
06984     37 71 0A F6 | 	mov	local03, local02 wz
06988     0C 00 90 5D |  if_ne	jmp	#LR__0313
0698c                 | LR__0312
0698c     64 5E 05 F1 | 	add	fp, #100
06990     AF 80 68 FC | 	wrlong	#64, fp
06994     64 5E 85 F1 | 	sub	fp, #100
06998                 | LR__0313
06998     68 5E 05 F1 | 	add	fp, #104
0699c     AF 6C 02 FB | 	rdlong	local01, fp
069a0     68 5E 85 F1 | 	sub	fp, #104
069a4     03 6C 0E F2 | 	cmp	local01, #3 wz
069a8     10 00 90 5D |  if_ne	jmp	#LR__0314
069ac     68 5E 05 F1 | 	add	fp, #104
069b0     AF 00 68 FC | 	wrlong	#0, fp
069b4     68 5E 85 F1 | 	sub	fp, #104
069b8     30 00 90 FD | 	jmp	#LR__0316
069bc                 | LR__0314
069bc     0C 5E 05 F1 | 	add	fp, #12
069c0     AF 6C 02 FB | 	rdlong	local01, fp
069c4     0C 5E 85 F1 | 	sub	fp, #12
069c8     00 6C 5E F2 | 	cmps	local01, #0 wcz
069cc     1C 00 90 3D |  if_ae	jmp	#LR__0315
069d0     68 5E 05 F1 | 	add	fp, #104
069d4     AF 08 68 FC | 	wrlong	#4, fp
069d8     5C 5E 85 F1 | 	sub	fp, #92
069dc     AF 6C 02 FB | 	rdlong	local01, fp
069e0     36 6D 62 F6 | 	neg	local01, local01
069e4     AF 6C 62 FC | 	wrlong	local01, fp
069e8     0C 5E 85 F1 | 	sub	fp, #12
069ec                 | LR__0315
069ec                 | LR__0316
069ec     68 5E 05 F1 | 	add	fp, #104
069f0     AF 6C 0A FB | 	rdlong	local01, fp wz
069f4     68 5E 85 F1 | 	sub	fp, #104
069f8     EC 00 90 AD |  if_e	jmp	#LR__0323
069fc     5C 5E 05 F1 | 	add	fp, #92
06a00     AF 70 02 FB | 	rdlong	local03, fp
06a04     01 70 06 F1 | 	add	local03, #1
06a08     AF 70 62 FC | 	wrlong	local03, fp
06a0c     04 5E 05 F1 | 	add	fp, #4
06a10     AF 6C 02 FB | 	rdlong	local01, fp
06a14     04 5E 05 F1 | 	add	fp, #4
06a18     AF 70 02 FB | 	rdlong	local03, fp
06a1c     64 5E 85 F1 | 	sub	fp, #100
06a20     38 6D 0A F2 | 	cmp	local01, local03 wz
06a24     3C 00 90 5D |  if_ne	jmp	#LR__0318
06a28     60 5E 05 F1 | 	add	fp, #96
06a2c     AF 70 02 FB | 	rdlong	local03, fp
06a30     01 70 86 F1 | 	sub	local03, #1
06a34     AF 70 62 FC | 	wrlong	local03, fp
06a38     AF 6C 0A FB | 	rdlong	local01, fp wz
06a3c     60 5E 85 F1 | 	sub	fp, #96
06a40     20 00 90 5D |  if_ne	jmp	#LR__0317
06a44     04 5E 05 F1 | 	add	fp, #4
06a48     AF 5E 02 FB | 	rdlong	arg01, fp
06a4c     04 5E 05 F1 | 	add	fp, #4
06a50     AF 60 02 FB | 	rdlong	arg02, fp
06a54     08 5E 85 F1 | 	sub	fp, #8
06a58     23 62 06 F6 | 	mov	arg03, #35
06a5c     FC FC BF FD | 	call	#__system___fmtchar
06a60     70 01 90 FD | 	jmp	#LR__0328
06a64                 | LR__0317
06a64                 | LR__0318
06a64     68 5E 05 F1 | 	add	fp, #104
06a68     AF 6C 02 FB | 	rdlong	local01, fp
06a6c     68 5E 85 F1 | 	sub	fp, #104
06a70     02 6C 0E F2 | 	cmp	local01, #2 wz
06a74     20 00 90 5D |  if_ne	jmp	#LR__0319
06a78     58 5E 05 F1 | 	add	fp, #88
06a7c     AF 6C 02 FB | 	rdlong	local01, fp
06a80     36 71 02 F6 | 	mov	local03, local01
06a84     01 70 06 F1 | 	add	local03, #1
06a88     AF 70 62 FC | 	wrlong	local03, fp
06a8c     58 5E 85 F1 | 	sub	fp, #88
06a90     36 41 48 FC | 	wrbyte	#32, local01
06a94     50 00 90 FD | 	jmp	#LR__0322
06a98                 | LR__0319
06a98     68 5E 05 F1 | 	add	fp, #104
06a9c     AF 6C 02 FB | 	rdlong	local01, fp
06aa0     68 5E 85 F1 | 	sub	fp, #104
06aa4     04 6C 0E F2 | 	cmp	local01, #4 wz
06aa8     20 00 90 5D |  if_ne	jmp	#LR__0320
06aac     58 5E 05 F1 | 	add	fp, #88
06ab0     AF 6C 02 FB | 	rdlong	local01, fp
06ab4     36 71 02 F6 | 	mov	local03, local01
06ab8     01 70 06 F1 | 	add	local03, #1
06abc     AF 70 62 FC | 	wrlong	local03, fp
06ac0     58 5E 85 F1 | 	sub	fp, #88
06ac4     36 5B 48 FC | 	wrbyte	#45, local01
06ac8     1C 00 90 FD | 	jmp	#LR__0321
06acc                 | LR__0320
06acc     58 5E 05 F1 | 	add	fp, #88
06ad0     AF 6C 02 FB | 	rdlong	local01, fp
06ad4     36 71 02 F6 | 	mov	local03, local01
06ad8     01 70 06 F1 | 	add	local03, #1
06adc     AF 70 62 FC | 	wrlong	local03, fp
06ae0     58 5E 85 F1 | 	sub	fp, #88
06ae4     36 57 48 FC | 	wrbyte	#43, local01
06ae8                 | LR__0321
06ae8                 | LR__0322
06ae8                 | LR__0323
06ae8     58 5E 05 F1 | 	add	fp, #88
06aec     AF 5E 02 FB | 	rdlong	arg01, fp
06af0     4C 5E 85 F1 | 	sub	fp, #76
06af4     AF 60 02 FB | 	rdlong	arg02, fp
06af8     04 5E 05 F1 | 	add	fp, #4
06afc     AF 62 02 FB | 	rdlong	arg03, fp
06b00     50 5E 05 F1 | 	add	fp, #80
06b04     AF 64 02 FB | 	rdlong	arg04, fp
06b08     00 72 06 F6 | 	mov	local04, #0
06b0c     58 5E 85 F1 | 	sub	fp, #88
06b10     AF 74 02 FB | 	rdlong	local05, fp
06b14     08 5E 85 F1 | 	sub	fp, #8
06b18     1D 74 2E F4 | 	testbn	local05, #29 wz
06b1c     01 72 06 56 |  if_ne	mov	local04, #1
06b20     39 67 02 F6 | 	mov	arg05, local04
06b24     78 0E B0 FD | 	call	#__system___uitoa
06b28     0C 77 02 F6 | 	mov	local06, result1
06b2c     5C 5E 05 F1 | 	add	fp, #92
06b30     AF 6C 02 FB | 	rdlong	local01, fp
06b34     3B 6D 02 F1 | 	add	local01, local06
06b38     AF 6C 62 FC | 	wrlong	local01, fp
06b3c     08 5E 05 F1 | 	add	fp, #8
06b40     AF 70 02 FB | 	rdlong	local03, fp
06b44     64 5E 85 F1 | 	sub	fp, #100
06b48     38 6D 5A F2 | 	cmps	local01, local03 wcz
06b4c     64 00 90 ED |  if_be	jmp	#LR__0327
06b50     EC 94 9F FE | 	loc	pa,	#(@LR__0325-@LR__0324)
06b54     93 00 A0 FD | 	call	#FCACHE_LOAD_
06b58                 | LR__0324
06b58     64 5E 05 F1 | 	add	fp, #100
06b5c     AF 6C 02 FB | 	rdlong	local01, fp
06b60     36 71 02 F6 | 	mov	local03, local01
06b64     01 70 86 F1 | 	sub	local03, #1
06b68     AF 70 62 FC | 	wrlong	local03, fp
06b6c     64 5E 85 F1 | 	sub	fp, #100
06b70     00 6C 5E F2 | 	cmps	local01, #0 wcz
06b74     20 00 90 ED |  if_be	jmp	#LR__0326
06b78     58 5E 05 F1 | 	add	fp, #88
06b7c     AF 6C 02 FB | 	rdlong	local01, fp
06b80     36 71 02 F6 | 	mov	local03, local01
06b84     01 70 06 F1 | 	add	local03, #1
06b88     AF 70 62 FC | 	wrlong	local03, fp
06b8c     58 5E 85 F1 | 	sub	fp, #88
06b90     36 47 48 FC | 	wrbyte	#35, local01
06b94     C0 FF 9F FD | 	jmp	#LR__0324
06b98                 | LR__0325
06b98                 | LR__0326
06b98     58 5E 05 F1 | 	add	fp, #88
06b9c     AF 6C 02 FB | 	rdlong	local01, fp
06ba0     36 71 02 F6 | 	mov	local03, local01
06ba4     01 70 06 F1 | 	add	local03, #1
06ba8     AF 70 62 FC | 	wrlong	local03, fp
06bac     58 5E 85 F1 | 	sub	fp, #88
06bb0     36 01 48 FC | 	wrbyte	#0, local01
06bb4                 | LR__0327
06bb4     04 5E 05 F1 | 	add	fp, #4
06bb8     AF 5E 02 FB | 	rdlong	arg01, fp
06bbc     04 5E 05 F1 | 	add	fp, #4
06bc0     AF 60 02 FB | 	rdlong	arg02, fp
06bc4     0C 5E 05 F1 | 	add	fp, #12
06bc8     AF 62 02 F6 | 	mov	arg03, fp
06bcc     14 5E 85 F1 | 	sub	fp, #20
06bd0     E8 FB BF FD | 	call	#__system___fmtstr
06bd4                 | LR__0328
06bd4     AF F0 03 F6 | 	mov	ptra, fp
06bd8     BA 00 A0 FD | 	call	#popregs_
06bdc                 | __system___fmtnum_ret
06bdc     2D 00 64 FD | 	ret
06be0                 | 
06be0                 | __system__Chr_S
06be0     02 5A 05 F6 | 	mov	COUNT_, #2
06be4     B0 00 A0 FD | 	call	#pushregs_
06be8     2F 6D 02 F6 | 	mov	local01, arg01
06bec     03 5E 06 F6 | 	mov	arg01, #3
06bf0     7C 04 B0 FD | 	call	#__system___gc_alloc_managed
06bf4     0C 6F 0A F6 | 	mov	local02, result1 wz
06bf8     10 00 90 AD |  if_e	jmp	#LR__0329
06bfc     37 6D 42 FC | 	wrbyte	local01, local02
06c00     01 6E 06 F1 | 	add	local02, #1
06c04     37 01 48 FC | 	wrbyte	#0, local02
06c08     01 6E 86 F1 | 	sub	local02, #1
06c0c                 | LR__0329
06c0c     37 19 02 F6 | 	mov	result1, local02
06c10     AF F0 03 F6 | 	mov	ptra, fp
06c14     BA 00 A0 FD | 	call	#popregs_
06c18                 | __system__Chr_S_ret
06c18     2D 00 64 FD | 	ret
06c1c                 | 
06c1c                 | __system__Number_S
06c1c     09 5A 05 F6 | 	mov	COUNT_, #9
06c20     B0 00 A0 FD | 	call	#pushregs_
06c24     2F 6D 02 F6 | 	mov	local01, arg01
06c28     30 6F 0A F6 | 	mov	local02, arg02 wz
06c2c     31 71 02 F6 | 	mov	local03, arg03
06c30     40 00 90 5D |  if_ne	jmp	#LR__0332
06c34     01 6E 06 F6 | 	mov	local02, #1
06c38     38 73 02 F6 | 	mov	local04, local03
06c3c     01 74 06 F6 | 	mov	local05, #1
06c40                 | LR__0330
06c40     00 76 06 F6 | 	mov	local06, #0
06c44     36 73 1A F2 | 	cmp	local04, local01 wcz
06c48     01 76 66 E6 |  if_be	neg	local06, #1
06c4c     00 78 06 F6 | 	mov	local07, #0
06c50     39 75 1A F2 | 	cmp	local05, local04 wcz
06c54     01 78 66 C6 |  if_b	neg	local07, #1
06c58     3C 77 CA F7 | 	test	local06, local07 wz
06c5c     14 00 90 AD |  if_e	jmp	#LR__0331
06c60     39 75 02 F6 | 	mov	local05, local04
06c64     38 73 02 FD | 	qmul	local04, local03
06c68     18 72 62 FD | 	getqx	local04
06c6c     01 6E 06 F1 | 	add	local02, #1
06c70     CC FF 9F FD | 	jmp	#LR__0330
06c74                 | LR__0331
06c74                 | LR__0332
06c74     20 6E 3E F3 | 	fle	local02, #32 wcz
06c78     37 5F 02 F6 | 	mov	arg01, local02
06c7c     02 5E 06 F1 | 	add	arg01, #2
06c80     EC 03 B0 FD | 	call	#__system___gc_alloc_managed
06c84     0C 7B 02 F6 | 	mov	local08, result1
06c88     37 79 02 F6 | 	mov	local07, local02
06c8c     3D 79 02 F1 | 	add	local07, local08
06c90     3C 01 48 FC | 	wrbyte	#0, local07
06c94     A4 93 9F FE | 	loc	pa,	#(@LR__0334-@LR__0333)
06c98     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c9c                 | LR__0333
06c9c     00 6E 1E F2 | 	cmp	local02, #0 wcz
06ca0     34 00 90 ED |  if_be	jmp	#LR__0335
06ca4     01 6E 86 F1 | 	sub	local02, #1
06ca8     36 99 02 F6 | 	mov	muldiva_, local01
06cac     38 9B 02 F6 | 	mov	muldivb_, local03
06cb0     C2 00 A0 FD | 	call	#unsdivide_
06cb4     4C 7D 02 F6 | 	mov	local09, muldiva_
06cb8     4D 6D 02 F6 | 	mov	local01, muldivb_
06cbc     0A 7C 1E F2 | 	cmp	local09, #10 wcz
06cc0     30 7C 06 C1 |  if_b	add	local09, #48
06cc4     37 7C 06 31 |  if_ae	add	local09, #55
06cc8     37 79 02 F6 | 	mov	local07, local02
06ccc     3D 79 02 F1 | 	add	local07, local08
06cd0     3C 7D 42 FC | 	wrbyte	local09, local07
06cd4     C4 FF 9F FD | 	jmp	#LR__0333
06cd8                 | LR__0334
06cd8                 | LR__0335
06cd8     3D 19 02 F6 | 	mov	result1, local08
06cdc     AF F0 03 F6 | 	mov	ptra, fp
06ce0     BA 00 A0 FD | 	call	#popregs_
06ce4                 | __system__Number_S_ret
06ce4     2D 00 64 FD | 	ret
06ce8                 | 
06ce8                 | __system__String_S
06ce8     05 5A 05 F6 | 	mov	COUNT_, #5
06cec     B0 00 A0 FD | 	call	#pushregs_
06cf0     2F 6D 02 F6 | 	mov	local01, arg01
06cf4     30 6F 02 F6 | 	mov	local02, arg02
06cf8     37 5F 02 F6 | 	mov	arg01, local02
06cfc     00 70 06 F6 | 	mov	local03, #0
06d00     0C 93 9F FE | 	loc	pa,	#(@LR__0337-@LR__0336)
06d04     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d08                 | LR__0336
06d08     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06d0c     01 70 06 51 |  if_ne	add	local03, #1
06d10     01 5E 06 51 |  if_ne	add	arg01, #1
06d14     F0 FF 9F 5D |  if_ne	jmp	#LR__0336
06d18                 | LR__0337
06d18     38 19 0A F6 | 	mov	result1, local03 wz
06d1c     42 00 00 AF 
06d20     9A 19 06 A6 |  if_e	mov	result1, ##@LR__0454
06d24     4C 00 90 AD |  if_e	jmp	#LR__0339
06d28     00 6C 5E F2 | 	cmps	local01, #0 wcz
06d2c     42 00 00 EF 
06d30     9B 19 06 E6 |  if_be	mov	result1, ##@LR__0455
06d34     3C 00 90 ED |  if_be	jmp	#LR__0339
06d38     36 5F 02 F6 | 	mov	arg01, local01
06d3c     02 5E 06 F1 | 	add	arg01, #2
06d40     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06d44     0C 75 0A F6 | 	mov	local05, result1 wz
06d48     24 00 90 AD |  if_e	jmp	#LR__0338
06d4c     37 61 C2 FA | 	rdbyte	arg02, local02
06d50     3A 5F 02 F6 | 	mov	arg01, local05
06d54     36 63 02 F6 | 	mov	arg03, local01
06d58     A0 00 A0 FD | 	call	#\builtin_bytefill_
06d5c     01 6C 06 F1 | 	add	local01, #1
06d60     3A 6D 02 F1 | 	add	local01, local05
06d64     36 01 48 FC | 	wrbyte	#0, local01
06d68     3A 19 02 F6 | 	mov	result1, local05
06d6c     04 00 90 FD | 	jmp	#LR__0339
06d70                 | LR__0338
06d70     3A 19 02 F6 | 	mov	result1, local05
06d74                 | LR__0339
06d74     AF F0 03 F6 | 	mov	ptra, fp
06d78     BA 00 A0 FD | 	call	#popregs_
06d7c                 | __system__String_S_ret
06d7c     2D 00 64 FD | 	ret
06d80                 | 
06d80                 | __system___gc_ptrs
06d80     04 5A 05 F6 | 	mov	COUNT_, #4
06d84     B0 00 A0 FD | 	call	#pushregs_
06d88     F8 6C 02 F6 | 	mov	local01, __heap_ptr
06d8c     36 6F 02 F6 | 	mov	local02, local01
06d90     07 00 00 FF 
06d94     F8 6F 06 F1 | 	add	local02, ##4088
06d98     36 71 0A FB | 	rdlong	local03, local01 wz
06d9c     74 00 90 5D |  if_ne	jmp	#LR__0340
06da0     37 73 02 F6 | 	mov	local04, local02
06da4     36 73 82 F1 | 	sub	local04, local01
06da8     36 03 58 FC | 	wrword	#1, local01
06dac     36 71 02 F6 | 	mov	local03, local01
06db0     02 70 06 F1 | 	add	local03, #2
06db4     36 00 80 FF 
06db8     38 21 59 FC | 	wrword	##27792, local03
06dbc     36 71 02 F6 | 	mov	local03, local01
06dc0     04 70 06 F1 | 	add	local03, #4
06dc4     38 01 58 FC | 	wrword	#0, local03
06dc8     36 71 02 F6 | 	mov	local03, local01
06dcc     06 70 06 F1 | 	add	local03, #6
06dd0     38 03 58 FC | 	wrword	#1, local03
06dd4     10 6C 06 F1 | 	add	local01, #16
06dd8     39 71 52 F6 | 	abs	local03, local04 wc
06ddc     04 70 46 F0 | 	shr	local03, #4
06de0     38 71 62 C6 |  if_b	neg	local03, local03
06de4     36 71 52 FC | 	wrword	local03, local01
06de8     36 71 02 F6 | 	mov	local03, local01
06dec     02 70 06 F1 | 	add	local03, #2
06df0     36 00 80 FF 
06df4     38 1F 59 FC | 	wrword	##27791, local03
06df8     36 71 02 F6 | 	mov	local03, local01
06dfc     04 70 06 F1 | 	add	local03, #4
06e00     38 01 58 FC | 	wrword	#0, local03
06e04     36 71 02 F6 | 	mov	local03, local01
06e08     06 70 06 F1 | 	add	local03, #6
06e0c     38 01 58 FC | 	wrword	#0, local03
06e10     10 6C 86 F1 | 	sub	local01, #16
06e14                 | LR__0340
06e14     37 1B 02 F6 | 	mov	result2, local02
06e18     36 19 02 F6 | 	mov	result1, local01
06e1c     AF F0 03 F6 | 	mov	ptra, fp
06e20     BA 00 A0 FD | 	call	#popregs_
06e24                 | __system___gc_ptrs_ret
06e24     2D 00 64 FD | 	ret
06e28                 | 
06e28                 | __system___gc_nextBlockPtr
06e28     02 5A 05 F6 | 	mov	COUNT_, #2
06e2c     B0 00 A0 FD | 	call	#pushregs_
06e30     2F 6D 02 F6 | 	mov	local01, arg01
06e34     36 6F EA FA | 	rdword	local02, local01 wz
06e38     10 00 90 5D |  if_ne	jmp	#LR__0341
06e3c     42 00 00 FF 
06e40     9C 5F 06 F6 | 	mov	arg01, ##@LR__0456
06e44     F4 01 B0 FD | 	call	#__system___gc_errmsg
06e48     0C 00 90 FD | 	jmp	#LR__0342
06e4c                 | LR__0341
06e4c     36 19 02 F6 | 	mov	result1, local01
06e50     04 6E 66 F0 | 	shl	local02, #4
06e54     37 19 02 F1 | 	add	result1, local02
06e58                 | LR__0342
06e58     AF F0 03 F6 | 	mov	ptra, fp
06e5c     BA 00 A0 FD | 	call	#popregs_
06e60                 | __system___gc_nextBlockPtr_ret
06e60     2D 00 64 FD | 	ret
06e64                 | 
06e64                 | __system___gc_tryalloc
06e64     0D 5A 05 F6 | 	mov	COUNT_, #13
06e68     B0 00 A0 FD | 	call	#pushregs_
06e6c     2F 6D 02 F6 | 	mov	local01, arg01
06e70     30 6F 02 F6 | 	mov	local02, arg02
06e74     08 FF BF FD | 	call	#__system___gc_ptrs
06e78     0C 71 02 F6 | 	mov	local03, result1
06e7c     0D 73 02 F6 | 	mov	local04, result2
06e80     38 75 02 F6 | 	mov	local05, local03
06e84     00 76 06 F6 | 	mov	local06, #0
06e88     C4 91 9F FE | 	loc	pa,	#(@LR__0344-@LR__0343)
06e8c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06e90                 | LR__0343
06e90     3A 79 02 F6 | 	mov	local07, local05
06e94     3A 7B 02 F6 | 	mov	local08, local05
06e98     06 7A 06 F1 | 	add	local08, #6
06e9c     3D 7D E2 FA | 	rdword	local09, local08
06ea0     38 5F 02 F6 | 	mov	arg01, local03
06ea4     3E 61 0A F6 | 	mov	arg02, local09 wz
06ea8     00 18 06 A6 |  if_e	mov	result1, #0
06eac     04 60 66 50 |  if_ne	shl	arg02, #4
06eb0     30 5F 02 51 |  if_ne	add	arg01, arg02
06eb4     2F 19 02 56 |  if_ne	mov	result1, arg01
06eb8     0C 7F 02 F6 | 	mov	local10, result1
06ebc     3F 75 0A F6 | 	mov	local05, local10 wz
06ec0     3A 7F 02 56 |  if_ne	mov	local10, local05
06ec4     3F 77 E2 5A |  if_ne	rdword	local06, local10
06ec8     00 74 0E F2 | 	cmp	local05, #0 wz
06ecc     10 00 90 AD |  if_e	jmp	#LR__0345
06ed0     39 75 5A F2 | 	cmps	local05, local04 wcz
06ed4     08 00 90 3D |  if_ae	jmp	#LR__0345
06ed8     3B 6D 5A F2 | 	cmps	local01, local06 wcz
06edc     B0 FF 9F 1D |  if_a	jmp	#LR__0343
06ee0                 | LR__0344
06ee0                 | LR__0345
06ee0     00 74 0E F2 | 	cmp	local05, #0 wz
06ee4     3A 19 02 A6 |  if_e	mov	result1, local05
06ee8     44 01 90 AD |  if_e	jmp	#LR__0348
06eec     3A 7F 02 F6 | 	mov	local10, local05
06ef0     06 7E 06 F1 | 	add	local10, #6
06ef4     3F 81 E2 FA | 	rdword	local11, local10
06ef8     3B 6D 5A F2 | 	cmps	local01, local06 wcz
06efc     C0 00 90 3D |  if_ae	jmp	#LR__0347
06f00     3A 6D 52 FC | 	wrword	local01, local05
06f04     3A 5F 02 F6 | 	mov	arg01, local05
06f08     36 7D 02 F6 | 	mov	local09, local01
06f0c     04 7C 66 F0 | 	shl	local09, #4
06f10     3E 5F 02 F1 | 	add	arg01, local09
06f14     3B 7F 02 F6 | 	mov	local10, local06
06f18     36 7F 82 F1 | 	sub	local10, local01
06f1c     2F 7F 52 FC | 	wrword	local10, arg01
06f20     2F 7F 02 F6 | 	mov	local10, arg01
06f24     02 7E 06 F1 | 	add	local10, #2
06f28     36 00 80 FF 
06f2c     3F 1F 59 FC | 	wrword	##27791, local10
06f30     3A 61 0A F6 | 	mov	arg02, local05 wz
06f34     00 18 06 A6 |  if_e	mov	result1, #0
06f38     38 61 82 51 |  if_ne	sub	arg02, local03
06f3c     04 60 46 50 |  if_ne	shr	arg02, #4
06f40     30 19 02 56 |  if_ne	mov	result1, arg02
06f44     2F 7D 02 F6 | 	mov	local09, arg01
06f48     04 7C 06 F1 | 	add	local09, #4
06f4c     3E 19 52 FC | 	wrword	result1, local09
06f50     3A 7F 02 F6 | 	mov	local10, local05
06f54     06 7E 06 F1 | 	add	local10, #6
06f58     2F 7D 02 F6 | 	mov	local09, arg01
06f5c     3F 7B E2 FA | 	rdword	local08, local10
06f60     06 7C 06 F1 | 	add	local09, #6
06f64     3E 7B 52 FC | 	wrword	local08, local09
06f68     2F 83 02 F6 | 	mov	local12, arg01
06f6c     41 61 0A F6 | 	mov	arg02, local12 wz
06f70     00 18 06 A6 |  if_e	mov	result1, #0
06f74     38 61 82 51 |  if_ne	sub	arg02, local03
06f78     04 60 46 50 |  if_ne	shr	arg02, #4
06f7c     30 19 02 56 |  if_ne	mov	result1, arg02
06f80     0C 81 02 F6 | 	mov	local11, result1
06f84     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
06f88     0C 85 0A F6 | 	mov	local13, result1 wz
06f8c     30 00 90 AD |  if_e	jmp	#LR__0346
06f90     39 85 5A F2 | 	cmps	local13, local04 wcz
06f94     28 00 90 3D |  if_ae	jmp	#LR__0346
06f98     38 5F 02 F6 | 	mov	arg01, local03
06f9c     41 61 0A F6 | 	mov	arg02, local12 wz
06fa0     00 18 06 A6 |  if_e	mov	result1, #0
06fa4     2F 61 82 51 |  if_ne	sub	arg02, arg01
06fa8     04 60 46 50 |  if_ne	shr	arg02, #4
06fac     30 19 02 56 |  if_ne	mov	result1, arg02
06fb0     0C 7F 02 F6 | 	mov	local10, result1
06fb4     42 7D 02 F6 | 	mov	local09, local13
06fb8     04 7C 06 F1 | 	add	local09, #4
06fbc     3E 7F 52 FC | 	wrword	local10, local09
06fc0                 | LR__0346
06fc0                 | LR__0347
06fc0     06 78 06 F1 | 	add	local07, #6
06fc4     3C 81 52 FC | 	wrword	local11, local07
06fc8     36 00 00 FF 
06fcc     80 7E 06 F6 | 	mov	local10, ##27776
06fd0     37 7F 42 F5 | 	or	local10, local02
06fd4     00 18 06 F6 | 	mov	result1, #0
06fd8     01 18 62 FD | 	cogid	result1
06fdc     0C 7F 42 F5 | 	or	local10, result1
06fe0     3A 7B 02 F6 | 	mov	local08, local05
06fe4     02 7A 06 F1 | 	add	local08, #2
06fe8     3D 7F 52 FC | 	wrword	local10, local08
06fec     38 7F 02 F6 | 	mov	local10, local03
06ff0     08 7E 06 F1 | 	add	local10, #8
06ff4     3A 7D 02 F6 | 	mov	local09, local05
06ff8     3F 7B E2 FA | 	rdword	local08, local10
06ffc     06 7C 06 F1 | 	add	local09, #6
07000     3E 7B 52 FC | 	wrword	local08, local09
07004     3A 61 0A F6 | 	mov	arg02, local05 wz
07008     00 18 06 A6 |  if_e	mov	result1, #0
0700c     38 61 82 51 |  if_ne	sub	arg02, local03
07010     04 60 46 50 |  if_ne	shr	arg02, #4
07014     30 19 02 56 |  if_ne	mov	result1, arg02
07018     08 70 06 F1 | 	add	local03, #8
0701c     38 19 52 FC | 	wrword	result1, local03
07020     3A 19 02 F6 | 	mov	result1, local05
07024     08 18 06 F1 | 	add	result1, #8
07028     00 C0 31 FF 
0702c     00 18 46 F5 | 	or	result1, ##1669332992
07030                 | LR__0348
07030     AF F0 03 F6 | 	mov	ptra, fp
07034     BA 00 A0 FD | 	call	#popregs_
07038                 | __system___gc_tryalloc_ret
07038     2D 00 64 FD | 	ret
0703c                 | 
0703c                 | __system___gc_errmsg
0703c     02 5A 05 F6 | 	mov	COUNT_, #2
07040     B0 00 A0 FD | 	call	#pushregs_
07044     2F 6D 02 F6 | 	mov	local01, arg01
07048                 | LR__0349
07048     36 6F CA FA | 	rdbyte	local02, local01 wz
0704c     01 6C 06 F1 | 	add	local01, #1
07050     0C 00 90 AD |  if_e	jmp	#LR__0350
07054     37 5F 02 F6 | 	mov	arg01, local02
07058     A0 F3 BF FD | 	call	#__system___tx
0705c     E8 FF 9F FD | 	jmp	#LR__0349
07060                 | LR__0350
07060     00 18 06 F6 | 	mov	result1, #0
07064     AF F0 03 F6 | 	mov	ptra, fp
07068     BA 00 A0 FD | 	call	#popregs_
0706c                 | __system___gc_errmsg_ret
0706c     2D 00 64 FD | 	ret
07070                 | 
07070                 | __system___gc_alloc_managed
07070     02 5A 05 F6 | 	mov	COUNT_, #2
07074     B0 00 A0 FD | 	call	#pushregs_
07078     2F 6D 02 F6 | 	mov	local01, arg01
0707c     00 60 06 F6 | 	mov	arg02, #0
07080     30 00 B0 FD | 	call	#__system___gc_doalloc
07084     0C 6F 0A F6 | 	mov	local02, result1 wz
07088     18 00 90 5D |  if_ne	jmp	#LR__0351
0708c     00 6C 5E F2 | 	cmps	local01, #0 wcz
07090     10 00 90 ED |  if_be	jmp	#LR__0351
07094     42 00 00 FF 
07098     B8 5F 06 F6 | 	mov	arg01, ##@LR__0457
0709c     9C FF BF FD | 	call	#__system___gc_errmsg
070a0     04 00 90 FD | 	jmp	#LR__0352
070a4                 | LR__0351
070a4     37 19 02 F6 | 	mov	result1, local02
070a8                 | LR__0352
070a8     AF F0 03 F6 | 	mov	ptra, fp
070ac     BA 00 A0 FD | 	call	#popregs_
070b0                 | __system___gc_alloc_managed_ret
070b0     2D 00 64 FD | 	ret
070b4                 | 
070b4                 | __system___gc_doalloc
070b4     06 5A 05 F6 | 	mov	COUNT_, #6
070b8     B0 00 A0 FD | 	call	#pushregs_
070bc     2F 6D 0A F6 | 	mov	local01, arg01 wz
070c0     30 6F 02 F6 | 	mov	local02, arg02
070c4     00 18 06 A6 |  if_e	mov	result1, #0
070c8     94 00 90 AD |  if_e	jmp	#LR__0360
070cc     17 6C 06 F1 | 	add	local01, #23
070d0     0F 6C 26 F5 | 	andn	local01, #15
070d4     04 6C 46 F0 | 	shr	local01, #4
070d8     14 00 06 F1 | 	add	ptr___system__dat__, #20
070dc     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
070e0     14 00 86 F1 | 	sub	ptr___system__dat__, #20
070e4     2C F2 BF FD | 	call	#__system___lockmem
070e8     36 5F 02 F6 | 	mov	arg01, local01
070ec     37 61 02 F6 | 	mov	arg02, local02
070f0     70 FD BF FD | 	call	#__system___gc_tryalloc
070f4     0C 71 0A F6 | 	mov	local03, result1 wz
070f8     14 00 90 5D |  if_ne	jmp	#LR__0353
070fc     24 03 B0 FD | 	call	#__system___gc_docollect
07100     36 5F 02 F6 | 	mov	arg01, local01
07104     37 61 02 F6 | 	mov	arg02, local02
07108     58 FD BF FD | 	call	#__system___gc_tryalloc
0710c     0C 71 02 F6 | 	mov	local03, result1
07110                 | LR__0353
07110     14 00 06 F1 | 	add	ptr___system__dat__, #20
07114     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07118     14 00 86 F1 | 	sub	ptr___system__dat__, #20
0711c     2F 01 68 FC | 	wrlong	#0, arg01
07120     00 70 0E F2 | 	cmp	local03, #0 wz
07124     34 00 90 AD |  if_e	jmp	#LR__0359
07128     04 6C 66 F0 | 	shl	local01, #4
0712c     08 6C 86 F1 | 	sub	local01, #8
07130     36 73 52 F6 | 	abs	local04, local01 wc
07134     02 72 46 F0 | 	shr	local04, #2
07138     39 73 62 C6 |  if_b	neg	local04, local04
0713c     39 75 0A F6 | 	mov	local05, local04 wz
07140     38 77 02 F6 | 	mov	local06, local03
07144     14 00 90 AD |  if_e	jmp	#LR__0358
07148     C0 8E 9F FE | 	loc	pa,	#(@LR__0356-@LR__0354)
0714c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07150                 | LR__0354
07150     3A 05 D8 FC | 	rep	@LR__0357, local05
07154                 | LR__0355
07154     3B 01 68 FC | 	wrlong	#0, local06
07158     04 76 06 F1 | 	add	local06, #4
0715c                 | LR__0356
0715c                 | LR__0357
0715c                 | LR__0358
0715c                 | LR__0359
0715c     38 19 02 F6 | 	mov	result1, local03
07160                 | LR__0360
07160     AF F0 03 F6 | 	mov	ptra, fp
07164     BA 00 A0 FD | 	call	#popregs_
07168                 | __system___gc_doalloc_ret
07168     2D 00 64 FD | 	ret
0716c                 | 
0716c                 | __system___gc_isvalidptr
0716c     31 1F 02 F6 | 	mov	_var01, arg03
07170     0F 21 02 F6 | 	mov	_var02, _var01
07174     00 F8 7F FF 
07178     00 20 06 F5 | 	and	_var02, ##-1048576
0717c     00 C0 31 FF 
07180     00 20 0E F2 | 	cmp	_var02, ##1669332992 wz
07184     00 18 06 56 |  if_ne	mov	result1, #0
07188     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
0718c     08 1E 86 F1 | 	sub	_var01, #8
07190     00 F8 7F FF 
07194     00 1E 26 F5 | 	andn	_var01, ##-1048576
07198     2F 1F 5A F2 | 	cmps	_var01, arg01 wcz
0719c     08 00 90 CD |  if_b	jmp	#LR__0361
071a0     30 1F 5A F2 | 	cmps	_var01, arg02 wcz
071a4     08 00 90 CD |  if_b	jmp	#LR__0362
071a8                 | LR__0361
071a8     00 18 06 F6 | 	mov	result1, #0
071ac     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
071b0                 | LR__0362
071b0     0F 21 02 F6 | 	mov	_var02, _var01
071b4     2F 21 62 F5 | 	xor	_var02, arg01
071b8     0F 20 0E F5 | 	and	_var02, #15 wz
071bc     00 18 06 56 |  if_ne	mov	result1, #0
071c0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
071c4     0F 21 02 F6 | 	mov	_var02, _var01
071c8     02 20 06 F1 | 	add	_var02, #2
071cc     10 21 E2 FA | 	rdword	_var02, _var02
071d0     7F 00 00 FF 
071d4     C0 21 06 F5 | 	and	_var02, ##65472
071d8     36 00 00 FF 
071dc     80 20 0E F2 | 	cmp	_var02, ##27776 wz
071e0     00 18 06 56 |  if_ne	mov	result1, #0
071e4     0F 19 02 A6 |  if_e	mov	result1, _var01
071e8                 | __system___gc_isvalidptr_ret
071e8     2D 00 64 FD | 	ret
071ec                 | 
071ec                 | __system___gc_dofree
071ec     0D 5A 05 F6 | 	mov	COUNT_, #13
071f0     B0 00 A0 FD | 	call	#pushregs_
071f4     2F 6D 02 F6 | 	mov	local01, arg01
071f8     84 FB BF FD | 	call	#__system___gc_ptrs
071fc     0C 6F 02 F6 | 	mov	local02, result1
07200     0D 71 02 F6 | 	mov	local03, result2
07204     36 73 02 F6 | 	mov	local04, local01
07208     02 72 06 F1 | 	add	local04, #2
0720c     36 00 80 FF 
07210     39 1F 59 FC | 	wrword	##27791, local04
07214     36 75 02 F6 | 	mov	local05, local01
07218     36 5F 02 F6 | 	mov	arg01, local01
0721c     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
07220     0C 77 02 F6 | 	mov	local06, result1
07224     24 8E 9F FE | 	loc	pa,	#(@LR__0364-@LR__0363)
07228     93 00 A0 FD | 	call	#FCACHE_LOAD_
0722c                 | LR__0363
0722c     04 74 06 F1 | 	add	local05, #4
07230     3A 61 EA FA | 	rdword	arg02, local05 wz
07234     37 5F 02 F6 | 	mov	arg01, local02
07238     00 18 06 A6 |  if_e	mov	result1, #0
0723c     04 60 66 50 |  if_ne	shl	arg02, #4
07240     30 5F 02 51 |  if_ne	add	arg01, arg02
07244     2F 19 02 56 |  if_ne	mov	result1, arg01
07248     0C 75 0A F6 | 	mov	local05, result1 wz
0724c     28 00 90 AD |  if_e	jmp	#LR__0365
07250     3A 5F 02 F6 | 	mov	arg01, local05
07254     00 78 06 F6 | 	mov	local07, #0
07258     02 5E 06 F1 | 	add	arg01, #2
0725c     2F 7B E2 FA | 	rdword	local08, arg01
07260     36 00 00 FF 
07264     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07268     01 78 66 A6 |  if_e	neg	local07, #1
0726c     3C 19 02 F6 | 	mov	result1, local07
07270     0C 73 0A F6 | 	mov	local04, result1 wz
07274     B4 FF 9F AD |  if_e	jmp	#LR__0363
07278                 | LR__0364
07278                 | LR__0365
07278     00 74 0E F2 | 	cmp	local05, #0 wz
0727c     37 75 02 A6 |  if_e	mov	local05, local02
07280     3A 73 02 F6 | 	mov	local04, local05
07284     06 72 06 F1 | 	add	local04, #6
07288     36 7D 02 F6 | 	mov	local09, local01
0728c     39 7F E2 FA | 	rdword	local10, local04
07290     06 7C 06 F1 | 	add	local09, #6
07294     3E 7F 52 FC | 	wrword	local10, local09
07298     36 61 0A F6 | 	mov	arg02, local01 wz
0729c     00 18 06 A6 |  if_e	mov	result1, #0
072a0     37 61 82 51 |  if_ne	sub	arg02, local02
072a4     04 60 46 50 |  if_ne	shr	arg02, #4
072a8     30 19 02 56 |  if_ne	mov	result1, arg02
072ac     3A 7D 02 F6 | 	mov	local09, local05
072b0     06 7C 06 F1 | 	add	local09, #6
072b4     3E 19 52 FC | 	wrword	result1, local09
072b8     37 75 0A F2 | 	cmp	local05, local02 wz
072bc     84 00 90 AD |  if_e	jmp	#LR__0368
072c0     3A 5F 02 F6 | 	mov	arg01, local05
072c4     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
072c8     36 19 0A F2 | 	cmp	result1, local01 wz
072cc     74 00 90 5D |  if_ne	jmp	#LR__0367
072d0     3A 73 E2 FA | 	rdword	local04, local05
072d4     36 81 E2 FA | 	rdword	local11, local01
072d8     40 73 02 F1 | 	add	local04, local11
072dc     3A 73 52 FC | 	wrword	local04, local05
072e0     36 73 02 F6 | 	mov	local04, local01
072e4     02 72 06 F1 | 	add	local04, #2
072e8     39 01 58 FC | 	wrword	#0, local04
072ec     36 5F 02 F6 | 	mov	arg01, local01
072f0     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
072f4     0C 77 02 F6 | 	mov	local06, result1
072f8     38 77 5A F2 | 	cmps	local06, local03 wcz
072fc     20 00 90 3D |  if_ae	jmp	#LR__0366
07300     3A 61 0A F6 | 	mov	arg02, local05 wz
07304     00 18 06 A6 |  if_e	mov	result1, #0
07308     37 61 82 51 |  if_ne	sub	arg02, local02
0730c     04 60 46 50 |  if_ne	shr	arg02, #4
07310     30 19 02 56 |  if_ne	mov	result1, arg02
07314     3B 7D 02 F6 | 	mov	local09, local06
07318     04 7C 06 F1 | 	add	local09, #4
0731c     3E 19 52 FC | 	wrword	result1, local09
07320                 | LR__0366
07320     36 73 02 F6 | 	mov	local04, local01
07324     06 72 06 F1 | 	add	local04, #6
07328     3A 7D 02 F6 | 	mov	local09, local05
0732c     39 7F E2 FA | 	rdword	local10, local04
07330     06 7C 06 F1 | 	add	local09, #6
07334     3E 7F 52 FC | 	wrword	local10, local09
07338     06 6C 06 F1 | 	add	local01, #6
0733c     36 01 58 FC | 	wrword	#0, local01
07340     3A 6D 02 F6 | 	mov	local01, local05
07344                 | LR__0367
07344                 | LR__0368
07344     36 5F 02 F6 | 	mov	arg01, local01
07348     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
0734c     0C 83 0A F6 | 	mov	local12, result1 wz
07350     C0 00 90 AD |  if_e	jmp	#LR__0370
07354     38 83 5A F2 | 	cmps	local12, local03 wcz
07358     B8 00 90 3D |  if_ae	jmp	#LR__0370
0735c     41 5F 02 F6 | 	mov	arg01, local12
07360     00 78 06 F6 | 	mov	local07, #0
07364     02 5E 06 F1 | 	add	arg01, #2
07368     2F 7B E2 FA | 	rdword	local08, arg01
0736c     36 00 00 FF 
07370     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07374     01 78 66 A6 |  if_e	neg	local07, #1
07378     3C 19 0A F6 | 	mov	result1, local07 wz
0737c     94 00 90 AD |  if_e	jmp	#LR__0370
07380     36 75 02 F6 | 	mov	local05, local01
07384     3A 73 E2 FA | 	rdword	local04, local05
07388     41 6D 02 F6 | 	mov	local01, local12
0738c     36 81 E2 FA | 	rdword	local11, local01
07390     40 73 02 F1 | 	add	local04, local11
07394     3A 85 02 F6 | 	mov	local13, local05
07398     42 73 52 FC | 	wrword	local04, local13
0739c     36 73 02 F6 | 	mov	local04, local01
073a0     06 72 06 F1 | 	add	local04, #6
073a4     3A 7D 02 F6 | 	mov	local09, local05
073a8     39 7F E2 FA | 	rdword	local10, local04
073ac     06 7C 06 F1 | 	add	local09, #6
073b0     3E 7F 52 FC | 	wrword	local10, local09
073b4     36 73 02 F6 | 	mov	local04, local01
073b8     02 72 06 F1 | 	add	local04, #2
073bc     39 55 59 FC | 	wrword	#170, local04
073c0     36 73 02 F6 | 	mov	local04, local01
073c4     06 72 06 F1 | 	add	local04, #6
073c8     00 7C 06 F6 | 	mov	local09, #0
073cc     39 01 58 FC | 	wrword	#0, local04
073d0     36 5F 02 F6 | 	mov	arg01, local01
073d4     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
073d8     0C 73 02 F6 | 	mov	local04, result1
073dc     39 77 0A F6 | 	mov	local06, local04 wz
073e0     30 00 90 AD |  if_e	jmp	#LR__0369
073e4     38 77 5A F2 | 	cmps	local06, local03 wcz
073e8     28 00 90 3D |  if_ae	jmp	#LR__0369
073ec     37 5F 02 F6 | 	mov	arg01, local02
073f0     3A 61 0A F6 | 	mov	arg02, local05 wz
073f4     00 18 06 A6 |  if_e	mov	result1, #0
073f8     2F 61 82 51 |  if_ne	sub	arg02, arg01
073fc     04 60 46 50 |  if_ne	shr	arg02, #4
07400     30 19 02 56 |  if_ne	mov	result1, arg02
07404     0C 73 02 F6 | 	mov	local04, result1
07408     3B 7D 02 F6 | 	mov	local09, local06
0740c     04 7C 06 F1 | 	add	local09, #4
07410     3E 73 52 FC | 	wrword	local04, local09
07414                 | LR__0369
07414                 | LR__0370
07414     3B 19 02 F6 | 	mov	result1, local06
07418     AF F0 03 F6 | 	mov	ptra, fp
0741c     BA 00 A0 FD | 	call	#popregs_
07420                 | __system___gc_dofree_ret
07420     2D 00 64 FD | 	ret
07424                 | 
07424                 | __system___gc_docollect
07424     09 5A 05 F6 | 	mov	COUNT_, #9
07428     B0 00 A0 FD | 	call	#pushregs_
0742c     50 F9 BF FD | 	call	#__system___gc_ptrs
07430     0D 6D 02 F6 | 	mov	local01, result2
07434     0C 6F 02 F6 | 	mov	local02, result1
07438     37 5F 02 F6 | 	mov	arg01, local02
0743c     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07440     0C 71 0A F6 | 	mov	local03, result1 wz
07444     00 18 06 F6 | 	mov	result1, #0
07448     01 18 62 FD | 	cogid	result1
0744c     0C 73 02 F6 | 	mov	local04, result1
07450     34 00 90 AD |  if_e	jmp	#LR__0372
07454                 | LR__0371
07454     36 71 5A F2 | 	cmps	local03, local01 wcz
07458     2C 00 90 3D |  if_ae	jmp	#LR__0372
0745c     38 75 02 F6 | 	mov	local05, local03
07460     02 74 06 F1 | 	add	local05, #2
07464     3A 77 E2 FA | 	rdword	local06, local05
07468     20 76 26 F5 | 	andn	local06, #32
0746c     38 79 02 F6 | 	mov	local07, local03
07470     02 78 06 F1 | 	add	local07, #2
07474     3C 77 52 FC | 	wrword	local06, local07
07478     38 5F 02 F6 | 	mov	arg01, local03
0747c     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07480     0C 71 0A F6 | 	mov	local03, result1 wz
07484     CC FF 9F 5D |  if_ne	jmp	#LR__0371
07488                 | LR__0372
07488     00 76 06 F6 | 	mov	local06, #0
0748c     00 5E 06 F6 | 	mov	arg01, #0
07490     18 EE BF FD | 	call	#__system____topofstack
07494     0C 61 02 F6 | 	mov	arg02, result1
07498     3B 5F 02 F6 | 	mov	arg01, local06
0749c     9C 00 B0 FD | 	call	#__system___gc_markhub
074a0     2C 01 B0 FD | 	call	#__system___gc_markcog
074a4     37 5F 02 F6 | 	mov	arg01, local02
074a8     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
074ac     0C 7B 0A F6 | 	mov	local08, result1 wz
074b0     10 00 90 5D |  if_ne	jmp	#LR__0373
074b4     42 00 00 FF 
074b8     D5 5F 06 F6 | 	mov	arg01, ##@LR__0458
074bc     7C FB BF FD | 	call	#__system___gc_errmsg
074c0     6C 00 90 FD | 	jmp	#LR__0379
074c4                 | LR__0373
074c4                 | LR__0374
074c4     3D 71 02 F6 | 	mov	local03, local08
074c8     38 5F 02 F6 | 	mov	arg01, local03
074cc     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
074d0     0C 7B 02 F6 | 	mov	local08, result1
074d4     38 77 02 F6 | 	mov	local06, local03
074d8     02 76 06 F1 | 	add	local06, #2
074dc     3B 7D E2 FA | 	rdword	local09, local06
074e0     20 7C CE F7 | 	test	local09, #32 wz
074e4     38 00 90 5D |  if_ne	jmp	#LR__0377
074e8     3E 75 02 F6 | 	mov	local05, local09
074ec     10 74 0E F5 | 	and	local05, #16 wz
074f0     2C 00 90 5D |  if_ne	jmp	#LR__0377
074f4     3E 77 02 F6 | 	mov	local06, local09
074f8     0F 76 06 F5 | 	and	local06, #15
074fc     3B 7D 02 F6 | 	mov	local09, local06
07500     39 7D 0A F2 | 	cmp	local09, local04 wz
07504     08 00 90 AD |  if_e	jmp	#LR__0375
07508     0E 7C 0E F2 | 	cmp	local09, #14 wz
0750c     10 00 90 5D |  if_ne	jmp	#LR__0376
07510                 | LR__0375
07510     38 5F 02 F6 | 	mov	arg01, local03
07514     D4 FC BF FD | 	call	#__system___gc_dofree
07518     0C 77 02 F6 | 	mov	local06, result1
0751c     3B 7B 02 F6 | 	mov	local08, local06
07520                 | LR__0376
07520                 | LR__0377
07520     00 7A 0E F2 | 	cmp	local08, #0 wz
07524     08 00 90 AD |  if_e	jmp	#LR__0378
07528     36 7B 5A F2 | 	cmps	local08, local01 wcz
0752c     94 FF 9F CD |  if_b	jmp	#LR__0374
07530                 | LR__0378
07530                 | LR__0379
07530     AF F0 03 F6 | 	mov	ptra, fp
07534     BA 00 A0 FD | 	call	#popregs_
07538                 | __system___gc_docollect_ret
07538     2D 00 64 FD | 	ret
0753c                 | 
0753c                 | __system___gc_markhub
0753c     09 5A 05 F6 | 	mov	COUNT_, #9
07540     B0 00 A0 FD | 	call	#pushregs_
07544     2F 6D 02 F6 | 	mov	local01, arg01
07548     30 6F 02 F6 | 	mov	local02, arg02
0754c     30 F8 BF FD | 	call	#__system___gc_ptrs
07550     0C 71 02 F6 | 	mov	local03, result1
07554     0D 73 02 F6 | 	mov	local04, result2
07558                 | LR__0380
07558     37 6D 5A F2 | 	cmps	local01, local02 wcz
0755c     64 00 90 3D |  if_ae	jmp	#LR__0381
07560     36 63 02 FB | 	rdlong	arg03, local01
07564     04 6C 06 F1 | 	add	local01, #4
07568     39 61 02 F6 | 	mov	arg02, local04
0756c     38 5F 02 F6 | 	mov	arg01, local03
07570     F8 FB BF FD | 	call	#__system___gc_isvalidptr
07574     0C 75 0A F6 | 	mov	local05, result1 wz
07578     DC FF 9F AD |  if_e	jmp	#LR__0380
0757c     3A 5F 02 F6 | 	mov	arg01, local05
07580     00 76 06 F6 | 	mov	local06, #0
07584     02 5E 06 F1 | 	add	arg01, #2
07588     2F 79 E2 FA | 	rdword	local07, arg01
0758c     36 00 00 FF 
07590     8F 78 0E F2 | 	cmp	local07, ##27791 wz
07594     01 76 66 A6 |  if_e	neg	local06, #1
07598     3B 19 0A F6 | 	mov	result1, local06 wz
0759c     B8 FF 9F 5D |  if_ne	jmp	#LR__0380
075a0     3A 7B 02 F6 | 	mov	local08, local05
075a4     02 7A 06 F1 | 	add	local08, #2
075a8     3D 7D E2 FA | 	rdword	local09, local08
075ac     0F 7C 26 F5 | 	andn	local09, #15
075b0     2E 7C 46 F5 | 	or	local09, #46
075b4     3A 7B 02 F6 | 	mov	local08, local05
075b8     02 7A 06 F1 | 	add	local08, #2
075bc     3D 7D 52 FC | 	wrword	local09, local08
075c0     94 FF 9F FD | 	jmp	#LR__0380
075c4                 | LR__0381
075c4     AF F0 03 F6 | 	mov	ptra, fp
075c8     BA 00 A0 FD | 	call	#popregs_
075cc                 | __system___gc_markhub_ret
075cc     2D 00 64 FD | 	ret
075d0                 | 
075d0                 | __system___gc_markcog
075d0     06 5A 05 F6 | 	mov	COUNT_, #6
075d4     B0 00 A0 FD | 	call	#pushregs_
075d8     A4 F7 BF FD | 	call	#__system___gc_ptrs
075dc     0C 6D 02 F6 | 	mov	local01, result1
075e0     0D 6F 02 F6 | 	mov	local02, result2
075e4     00 70 06 F6 | 	mov	local03, #0
075e8                 | LR__0382
075e8     F0 73 06 F6 | 	mov	local04, #496
075ec     38 73 82 F1 | 	sub	local04, local03
075f0     F0 73 06 F1 | 	add	local04, #496
075f4                 | 	'.live	local04
075f4     00 72 96 F9 | 	alts	local04, #0
075f8     39 75 02 F6 | 	mov	local05, local04
075fc     36 5F 02 F6 | 	mov	arg01, local01
07600     37 61 02 F6 | 	mov	arg02, local02
07604     3A 63 02 F6 | 	mov	arg03, local05
07608     60 FB BF FD | 	call	#__system___gc_isvalidptr
0760c     0C 75 0A F6 | 	mov	local05, result1 wz
07610     18 00 90 AD |  if_e	jmp	#LR__0383
07614     3A 77 02 F6 | 	mov	local06, local05
07618     02 76 06 F1 | 	add	local06, #2
0761c     3B 73 E2 FA | 	rdword	local04, local06
07620     20 72 46 F5 | 	or	local04, #32
07624     02 74 06 F1 | 	add	local05, #2
07628     3A 73 52 FC | 	wrword	local04, local05
0762c                 | LR__0383
0762c     01 70 06 F1 | 	add	local03, #1
07630     F0 71 5E F2 | 	cmps	local03, #496 wcz
07634     B0 FF 9F CD |  if_b	jmp	#LR__0382
07638     AF F0 03 F6 | 	mov	ptra, fp
0763c     BA 00 A0 FD | 	call	#popregs_
07640                 | __system___gc_markcog_ret
07640     2D 00 64 FD | 	ret
07644                 | 
07644                 | __system__write
07644     03 5A 05 F6 | 	mov	COUNT_, #3
07648     B0 00 A0 FD | 	call	#pushregs_
0764c     2F 6D 02 F6 | 	mov	local01, arg01
07650     30 6F 02 F6 | 	mov	local02, arg02
07654     31 71 02 F6 | 	mov	local03, arg03
07658     0A 6C 1E F2 | 	cmp	local01, #10 wcz
0765c     14 00 90 CD |  if_b	jmp	#LR__0384
07660     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07664     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07668     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
0766c     01 18 66 F6 | 	neg	result1, #1
07670     28 00 90 FD | 	jmp	#LR__0385
07674                 | LR__0384
07674     36 5F 02 F6 | 	mov	arg01, local01
07678     01 5E 66 F0 | 	shl	arg01, #1
0767c     36 5F 02 F1 | 	add	arg01, local01
07680     04 5E 66 F0 | 	shl	arg01, #4
07684     24 00 06 F1 | 	add	ptr___system__dat__, #36
07688     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
0768c     37 61 02 F6 | 	mov	arg02, local02
07690     38 63 02 F6 | 	mov	arg03, local03
07694     24 00 86 F1 | 	sub	ptr___system__dat__, #36
07698     9C 08 B0 FD | 	call	#__system___vfswrite
0769c                 | LR__0385
0769c     AF F0 03 F6 | 	mov	ptra, fp
076a0     BA 00 A0 FD | 	call	#popregs_
076a4                 | __system__write_ret
076a4     2D 00 64 FD | 	ret
076a8                 | 
076a8                 | __system__read
076a8     03 5A 05 F6 | 	mov	COUNT_, #3
076ac     B0 00 A0 FD | 	call	#pushregs_
076b0     2F 6D 02 F6 | 	mov	local01, arg01
076b4     30 6F 02 F6 | 	mov	local02, arg02
076b8     31 71 02 F6 | 	mov	local03, arg03
076bc     0A 6C 1E F2 | 	cmp	local01, #10 wcz
076c0     14 00 90 CD |  if_b	jmp	#LR__0386
076c4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
076c8     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
076cc     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
076d0     01 18 66 F6 | 	neg	result1, #1
076d4     28 00 90 FD | 	jmp	#LR__0387
076d8                 | LR__0386
076d8     36 5F 02 F6 | 	mov	arg01, local01
076dc     01 5E 66 F0 | 	shl	arg01, #1
076e0     36 5F 02 F1 | 	add	arg01, local01
076e4     04 5E 66 F0 | 	shl	arg01, #4
076e8     24 00 06 F1 | 	add	ptr___system__dat__, #36
076ec     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
076f0     37 61 02 F6 | 	mov	arg02, local02
076f4     38 63 02 F6 | 	mov	arg03, local03
076f8     24 00 86 F1 | 	sub	ptr___system__dat__, #36
076fc     E4 09 B0 FD | 	call	#__system___vfsread
07700                 | LR__0387
07700     AF F0 03 F6 | 	mov	ptra, fp
07704     BA 00 A0 FD | 	call	#popregs_
07708                 | __system__read_ret
07708     2D 00 64 FD | 	ret
0770c                 | 
0770c                 | __system__close
0770c     01 5A 05 F6 | 	mov	COUNT_, #1
07710     B0 00 A0 FD | 	call	#pushregs_
07714     2F 6D 02 F6 | 	mov	local01, arg01
07718     0A 6C 1E F2 | 	cmp	local01, #10 wcz
0771c     14 00 90 CD |  if_b	jmp	#LR__0388
07720     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07724     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07728     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
0772c     01 18 66 F6 | 	neg	result1, #1
07730     20 00 90 FD | 	jmp	#LR__0389
07734                 | LR__0388
07734     36 5F 02 F6 | 	mov	arg01, local01
07738     01 5E 66 F0 | 	shl	arg01, #1
0773c     36 5F 02 F1 | 	add	arg01, local01
07740     04 5E 66 F0 | 	shl	arg01, #4
07744     24 00 06 F1 | 	add	ptr___system__dat__, #36
07748     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
0774c     24 00 86 F1 | 	sub	ptr___system__dat__, #36
07750     6C 03 B0 FD | 	call	#__system___closeraw
07754                 | LR__0389
07754     AF F0 03 F6 | 	mov	ptra, fp
07758     BA 00 A0 FD | 	call	#popregs_
0775c                 | __system__close_ret
0775c     2D 00 64 FD | 	ret
07760                 | 
07760                 | __system__lseek
07760     09 5A 05 F6 | 	mov	COUNT_, #9
07764     B0 00 A0 FD | 	call	#pushregs_
07768     2F 6D 02 F6 | 	mov	local01, arg01
0776c     30 6F 02 F6 | 	mov	local02, arg02
07770     31 71 02 F6 | 	mov	local03, arg03
07774     0A 6C 1E F2 | 	cmp	local01, #10 wcz
07778     14 00 90 CD |  if_b	jmp	#LR__0390
0777c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07780     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07784     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07788     01 18 66 F6 | 	neg	result1, #1
0778c     C8 00 90 FD | 	jmp	#LR__0394
07790                 | LR__0390
07790     36 73 02 F6 | 	mov	local04, local01
07794     01 72 66 F0 | 	shl	local04, #1
07798     36 73 02 F1 | 	add	local04, local01
0779c     04 72 66 F0 | 	shl	local04, #4
077a0     24 00 06 F1 | 	add	ptr___system__dat__, #36
077a4     00 73 02 F1 | 	add	local04, ptr___system__dat__
077a8     2C 72 06 F1 | 	add	local04, #44
077ac     39 75 0A FB | 	rdlong	local05, local04 wz
077b0     2C 72 86 F1 | 	sub	local04, #44
077b4     24 00 86 F1 | 	sub	ptr___system__dat__, #36
077b8     14 00 90 5D |  if_ne	jmp	#LR__0391
077bc     1C 00 06 F1 | 	add	ptr___system__dat__, #28
077c0     00 21 68 FC | 	wrlong	#16, ptr___system__dat__
077c4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
077c8     01 18 66 F6 | 	neg	result1, #1
077cc     88 00 90 FD | 	jmp	#LR__0394
077d0                 | LR__0391
077d0     08 72 06 F1 | 	add	local04, #8
077d4     39 75 02 FB | 	rdlong	local05, local04
077d8     08 72 86 F1 | 	sub	local04, #8
077dc     40 74 CE F7 | 	test	local05, #64 wz
077e0     14 00 90 AD |  if_e	jmp	#LR__0392
077e4     08 72 06 F1 | 	add	local04, #8
077e8     39 75 02 FB | 	rdlong	local05, local04
077ec     80 74 46 F5 | 	or	local05, #128
077f0     39 75 62 FC | 	wrlong	local05, local04
077f4     08 72 86 F1 | 	sub	local04, #8
077f8                 | LR__0392
077f8     2C 72 06 F1 | 	add	local04, #44
077fc     39 75 02 FB | 	rdlong	local05, local04
07800     2C 72 86 F1 | 	sub	local04, #44
07804     3A 77 02 FB | 	rdlong	local06, local05
07808     04 74 06 F1 | 	add	local05, #4
0780c     3A 79 02 FB | 	rdlong	local07, local05
07810     39 5F 02 F6 | 	mov	arg01, local04
07814     37 61 02 F6 | 	mov	arg02, local02
07818     38 63 02 F6 | 	mov	arg03, local03
0781c     FD 7A 02 F6 | 	mov	local08, objptr
07820     3B FB 01 F6 | 	mov	objptr, local06
07824     2D 78 62 FD | 	call	local07
07828     3D FB 01 F6 | 	mov	objptr, local08
0782c     0C 7D 02 F6 | 	mov	local09, result1
07830     00 7C 5E F2 | 	cmps	local09, #0 wcz
07834     1C 00 90 3D |  if_ae	jmp	#LR__0393
07838     3E 5F 6A F6 | 	neg	arg01, local09 wz
0783c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07840     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
07844     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07848     01 18 66 56 |  if_ne	neg	result1, #1
0784c     00 18 06 A6 |  if_e	mov	result1, #0
07850     04 00 90 FD | 	jmp	#LR__0394
07854                 | LR__0393
07854     3E 19 02 F6 | 	mov	result1, local09
07858                 | LR__0394
07858     AF F0 03 F6 | 	mov	ptra, fp
0785c     BA 00 A0 FD | 	call	#popregs_
07860                 | __system__lseek_ret
07860     2D 00 64 FD | 	ret
07864                 | 
07864                 | __system____getftab
07864     0A 5E 1E F2 | 	cmp	arg01, #10 wcz
07868     00 18 06 36 |  if_ae	mov	result1, #0
0786c     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07870     2F 19 02 F6 | 	mov	result1, arg01
07874     01 18 66 F0 | 	shl	result1, #1
07878     2F 19 02 F1 | 	add	result1, arg01
0787c     04 18 66 F0 | 	shl	result1, #4
07880     24 00 06 F1 | 	add	ptr___system__dat__, #36
07884     00 19 02 F1 | 	add	result1, ptr___system__dat__
07888     24 00 86 F1 | 	sub	ptr___system__dat__, #36
0788c                 | __system____getftab_ret
0788c     2D 00 64 FD | 	ret
07890                 | 
07890                 | __system___strrev
07890     2F 1F CA FA | 	rdbyte	_var01, arg01 wz
07894     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07898     2F 21 02 F6 | 	mov	_var02, arg01
0789c     6C 87 9F FE | 	loc	pa,	#(@LR__0396-@LR__0395)
078a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
078a4                 | LR__0395
078a4     10 1F CA FA | 	rdbyte	_var01, _var02 wz
078a8     01 20 06 51 |  if_ne	add	_var02, #1
078ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0395
078b0                 | LR__0396
078b0     01 20 86 F1 | 	sub	_var02, #1
078b4                 | LR__0397
078b4     2F 21 5A F2 | 	cmps	_var02, arg01 wcz
078b8     1C 00 90 ED |  if_be	jmp	#LR__0398
078bc     2F 23 C2 FA | 	rdbyte	_var03, arg01
078c0     10 25 C2 FA | 	rdbyte	_var04, _var02
078c4     2F 25 42 FC | 	wrbyte	_var04, arg01
078c8     10 23 42 FC | 	wrbyte	_var03, _var02
078cc     01 5E 06 F1 | 	add	arg01, #1
078d0     01 20 86 F1 | 	sub	_var02, #1
078d4     DC FF 9F FD | 	jmp	#LR__0397
078d8                 | LR__0398
078d8                 | __system___strrev_ret
078d8     2D 00 64 FD | 	ret
078dc                 | 
078dc                 | __system___fmtpad
078dc     0C 5A 05 F6 | 	mov	COUNT_, #12
078e0     B0 00 A0 FD | 	call	#pushregs_
078e4     2F 6D 02 F6 | 	mov	local01, arg01
078e8     30 6F 02 F6 | 	mov	local02, arg02
078ec     32 71 02 F6 | 	mov	local03, arg04
078f0     37 73 EA F8 | 	getbyte	local04, local02, #1
078f4     16 6E 46 F0 | 	shr	local02, #22
078f8     03 6E 0E F5 | 	and	local02, #3 wz
078fc     00 74 06 F6 | 	mov	local05, #0
07900     01 6E 06 A6 |  if_e	mov	local02, #1
07904     38 6F CA F7 | 	test	local02, local03 wz
07908     00 18 06 A6 |  if_e	mov	result1, #0
0790c     84 00 90 AD |  if_e	jmp	#LR__0402
07910     31 73 82 F1 | 	sub	local04, arg03
07914     39 77 02 F6 | 	mov	local06, local04
07918     00 76 5E F2 | 	cmps	local06, #0 wcz
0791c     00 18 06 E6 |  if_be	mov	result1, #0
07920     70 00 90 ED |  if_be	jmp	#LR__0402
07924     03 6E 0E F2 | 	cmp	local02, #3 wz
07928     18 00 90 5D |  if_ne	jmp	#LR__0399
0792c     01 70 0E F2 | 	cmp	local03, #1 wz
07930     6E 78 62 FD | 	wrz	local07
07934     3C 77 02 F1 | 	add	local06, local07
07938     3B 77 52 F6 | 	abs	local06, local06 wc
0793c     01 76 46 F0 | 	shr	local06, #1
07940     3B 77 62 C6 |  if_b	neg	local06, local06
07944                 | LR__0399
07944     00 7A 06 F6 | 	mov	local08, #0
07948                 | LR__0400
07948     3B 7B 5A F2 | 	cmps	local08, local06 wcz
0794c     40 00 90 3D |  if_ae	jmp	#LR__0401
07950     36 7D 02 F6 | 	mov	local09, local01
07954     3E 79 02 FB | 	rdlong	local07, local09
07958     04 7C 06 F1 | 	add	local09, #4
0795c     3E 7F 02 FB | 	rdlong	local10, local09
07960     20 5E 06 F6 | 	mov	arg01, #32
07964     FD 80 02 F6 | 	mov	local11, objptr
07968     3C FB 01 F6 | 	mov	objptr, local07
0796c     2D 7E 62 FD | 	call	local10
07970     40 FB 01 F6 | 	mov	objptr, local11
07974     0C 83 02 F6 | 	mov	local12, result1
07978     00 82 5E F2 | 	cmps	local12, #0 wcz
0797c     41 19 02 C6 |  if_b	mov	result1, local12
07980     10 00 90 CD |  if_b	jmp	#LR__0402
07984     41 75 02 F1 | 	add	local05, local12
07988     01 7A 06 F1 | 	add	local08, #1
0798c     B8 FF 9F FD | 	jmp	#LR__0400
07990                 | LR__0401
07990     3A 19 02 F6 | 	mov	result1, local05
07994                 | LR__0402
07994     AF F0 03 F6 | 	mov	ptra, fp
07998     BA 00 A0 FD | 	call	#popregs_
0799c                 | __system___fmtpad_ret
0799c     2D 00 64 FD | 	ret
079a0                 | 
079a0                 | __system___uitoa
079a0     09 5A 05 F6 | 	mov	COUNT_, #9
079a4     B0 00 A0 FD | 	call	#pushregs_
079a8     2F 6D 02 F6 | 	mov	local01, arg01
079ac     30 6F 02 F6 | 	mov	local02, arg02
079b0     31 71 02 F6 | 	mov	local03, arg03
079b4     32 73 02 F6 | 	mov	local04, arg04
079b8     33 75 0A F6 | 	mov	local05, arg05 wz
079bc     36 77 02 F6 | 	mov	local06, local01
079c0     00 78 06 F6 | 	mov	local07, #0
079c4     37 7A 06 56 |  if_ne	mov	local08, #55
079c8     57 7A 06 A6 |  if_e	mov	local08, #87
079cc                 | LR__0403
079cc     37 99 02 F6 | 	mov	muldiva_, local02
079d0     38 9B 02 F6 | 	mov	muldivb_, local03
079d4     C2 00 A0 FD | 	call	#unsdivide_
079d8     4C 7D 02 F6 | 	mov	local09, muldiva_
079dc     0A 7C 1E F2 | 	cmp	local09, #10 wcz
079e0     30 7C 06 C1 |  if_b	add	local09, #48
079e4     3D 7D 02 31 |  if_ae	add	local09, local08
079e8     3B 7D 42 FC | 	wrbyte	local09, local06
079ec     37 99 02 F6 | 	mov	muldiva_, local02
079f0     38 9B 02 F6 | 	mov	muldivb_, local03
079f4     01 76 06 F1 | 	add	local06, #1
079f8     C2 00 A0 FD | 	call	#unsdivide_
079fc     4D 6F 0A F6 | 	mov	local02, muldivb_ wz
07a00     01 78 06 F1 | 	add	local07, #1
07a04     C4 FF 9F 5D |  if_ne	jmp	#LR__0403
07a08     39 79 1A F2 | 	cmp	local07, local04 wcz
07a0c     BC FF 9F CD |  if_b	jmp	#LR__0403
07a10     3B 01 48 FC | 	wrbyte	#0, local06
07a14     36 5F 02 F6 | 	mov	arg01, local01
07a18     74 FE BF FD | 	call	#__system___strrev
07a1c     3C 19 02 F6 | 	mov	result1, local07
07a20     AF F0 03 F6 | 	mov	ptra, fp
07a24     BA 00 A0 FD | 	call	#popregs_
07a28                 | __system___uitoa_ret
07a28     2D 00 64 FD | 	ret
07a2c                 | 
07a2c                 | __system___gettxfunc
07a2c     03 5A 05 F6 | 	mov	COUNT_, #3
07a30     B0 00 A0 FD | 	call	#pushregs_
07a34     2C FE BF FD | 	call	#__system____getftab
07a38     0C 6D 0A F6 | 	mov	local01, result1 wz
07a3c     14 00 90 AD |  if_e	jmp	#LR__0404
07a40     08 6C 06 F1 | 	add	local01, #8
07a44     36 6F 02 FB | 	rdlong	local02, local01
07a48     08 6C 86 F1 | 	sub	local01, #8
07a4c     37 71 0A F6 | 	mov	local03, local02 wz
07a50     08 00 90 5D |  if_ne	jmp	#LR__0405
07a54                 | LR__0404
07a54     00 18 06 F6 | 	mov	result1, #0
07a58     0C 00 90 FD | 	jmp	#LR__0406
07a5c                 | LR__0405
07a5c     FF 60 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07a60     36 5F 02 F6 | 	mov	arg01, local01
07a64     6C E8 BF FD | 	call	#__system___make_methodptr
07a68                 | LR__0406
07a68     AF F0 03 F6 | 	mov	ptra, fp
07a6c     BA 00 A0 FD | 	call	#popregs_
07a70                 | __system___gettxfunc_ret
07a70     2D 00 64 FD | 	ret
07a74                 | 
07a74                 | __system___getiolock_0150
07a74     03 5A 05 F6 | 	mov	COUNT_, #3
07a78     B0 00 A0 FD | 	call	#pushregs_
07a7c     E4 FD BF FD | 	call	#__system____getftab
07a80     0C 6D 0A F6 | 	mov	local01, result1 wz
07a84     14 00 90 AD |  if_e	jmp	#LR__0407
07a88     08 6C 06 F1 | 	add	local01, #8
07a8c     36 6F 02 FB | 	rdlong	local02, local01
07a90     08 6C 86 F1 | 	sub	local01, #8
07a94     37 71 0A F6 | 	mov	local03, local02 wz
07a98     10 00 90 5D |  if_ne	jmp	#LR__0408
07a9c                 | LR__0407
07a9c     20 00 06 F1 | 	add	ptr___system__dat__, #32
07aa0     00 19 02 F6 | 	mov	result1, ptr___system__dat__
07aa4     20 00 86 F1 | 	sub	ptr___system__dat__, #32
07aa8     08 00 90 FD | 	jmp	#LR__0409
07aac                 | LR__0408
07aac     0C 6C 06 F1 | 	add	local01, #12
07ab0     36 19 02 F6 | 	mov	result1, local01
07ab4                 | LR__0409
07ab4     AF F0 03 F6 | 	mov	ptra, fp
07ab8     BA 00 A0 FD | 	call	#popregs_
07abc                 | __system___getiolock_0150_ret
07abc     2D 00 64 FD | 	ret
07ac0                 | 
07ac0                 | __system___closeraw
07ac0     06 5A 05 F6 | 	mov	COUNT_, #6
07ac4     B0 00 A0 FD | 	call	#pushregs_
07ac8     2F 6D 02 F6 | 	mov	local01, arg01
07acc     00 6E 06 F6 | 	mov	local02, #0
07ad0     08 6C 06 F1 | 	add	local01, #8
07ad4     36 71 0A FB | 	rdlong	local03, local01 wz
07ad8     08 6C 86 F1 | 	sub	local01, #8
07adc     14 00 90 5D |  if_ne	jmp	#LR__0410
07ae0     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07ae4     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07ae8     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07aec     01 18 66 F6 | 	neg	result1, #1
07af0     90 00 90 FD | 	jmp	#LR__0413
07af4                 | LR__0410
07af4     28 6C 06 F1 | 	add	local01, #40
07af8     36 71 0A FB | 	rdlong	local03, local01 wz
07afc     28 6C 86 F1 | 	sub	local01, #40
07b00     2C 00 90 AD |  if_e	jmp	#LR__0411
07b04     28 6C 06 F1 | 	add	local01, #40
07b08     36 71 02 FB | 	rdlong	local03, local01
07b0c     28 6C 86 F1 | 	sub	local01, #40
07b10     38 73 02 FB | 	rdlong	local04, local03
07b14     04 70 06 F1 | 	add	local03, #4
07b18     38 75 02 FB | 	rdlong	local05, local03
07b1c     36 5F 02 F6 | 	mov	arg01, local01
07b20     FD 76 02 F6 | 	mov	local06, objptr
07b24     39 FB 01 F6 | 	mov	objptr, local04
07b28     2D 74 62 FD | 	call	local05
07b2c     3B FB 01 F6 | 	mov	objptr, local06
07b30                 | LR__0411
07b30     20 6C 06 F1 | 	add	local01, #32
07b34     36 71 0A FB | 	rdlong	local03, local01 wz
07b38     20 6C 86 F1 | 	sub	local01, #32
07b3c     30 00 90 AD |  if_e	jmp	#LR__0412
07b40     20 6C 06 F1 | 	add	local01, #32
07b44     36 71 02 FB | 	rdlong	local03, local01
07b48     20 6C 86 F1 | 	sub	local01, #32
07b4c     38 73 02 FB | 	rdlong	local04, local03
07b50     04 70 06 F1 | 	add	local03, #4
07b54     38 75 02 FB | 	rdlong	local05, local03
07b58     36 5F 02 F6 | 	mov	arg01, local01
07b5c     FD 76 02 F6 | 	mov	local06, objptr
07b60     39 FB 01 F6 | 	mov	objptr, local04
07b64     2D 74 62 FD | 	call	local05
07b68     3B FB 01 F6 | 	mov	objptr, local06
07b6c     0C 6F 02 F6 | 	mov	local02, result1
07b70                 | LR__0412
07b70     36 5F 02 F6 | 	mov	arg01, local01
07b74     00 60 06 F6 | 	mov	arg02, #0
07b78     30 62 06 F6 | 	mov	arg03, #48
07b7c     A0 00 A0 FD | 	call	#\builtin_bytefill_
07b80     37 19 02 F6 | 	mov	result1, local02
07b84                 | LR__0413
07b84     AF F0 03 F6 | 	mov	ptra, fp
07b88     BA 00 A0 FD | 	call	#popregs_
07b8c                 | __system___closeraw_ret
07b8c     2D 00 64 FD | 	ret
07b90                 | 
07b90                 | __system____default_getc
07b90     05 5A 05 F6 | 	mov	COUNT_, #5
07b94     B0 00 A0 FD | 	call	#pushregs_
07b98     2F 6D 02 F6 | 	mov	local01, arg01
07b9c     36 6F 02 FB | 	rdlong	local02, local01
07ba0     08 6E 06 F1 | 	add	local02, #8
07ba4     37 71 02 FB | 	rdlong	local03, local02
07ba8     08 6E 86 F1 | 	sub	local02, #8
07bac     02 70 CE F7 | 	test	local03, #2 wz
07bb0     08 00 90 AD |  if_e	jmp	#LR__0414
07bb4     36 5F 02 F6 | 	mov	arg01, local01
07bb8     8C 01 B0 FD | 	call	#__system____default_flush
07bbc                 | LR__0414
07bbc     08 6E 06 F1 | 	add	local02, #8
07bc0     37 71 02 FB | 	rdlong	local03, local02
07bc4     01 70 46 F5 | 	or	local03, #1
07bc8     37 71 62 FC | 	wrlong	local03, local02
07bcc     08 6E 86 F1 | 	sub	local02, #8
07bd0     37 73 0A FB | 	rdlong	local04, local02 wz
07bd4     0C 00 90 5D |  if_ne	jmp	#LR__0415
07bd8     36 5F 02 F6 | 	mov	arg01, local01
07bdc     F8 07 B0 FD | 	call	#__system____default_filbuf
07be0     0C 73 02 F6 | 	mov	local04, result1
07be4                 | LR__0415
07be4     00 72 5E F2 | 	cmps	local04, #0 wcz
07be8     01 18 66 E6 |  if_be	neg	result1, #1
07bec     1C 00 90 ED |  if_be	jmp	#LR__0416
07bf0     01 72 86 F1 | 	sub	local04, #1
07bf4     37 73 62 FC | 	wrlong	local04, local02
07bf8     04 6E 06 F1 | 	add	local02, #4
07bfc     37 75 02 FB | 	rdlong	local05, local02
07c00     3A 19 C2 FA | 	rdbyte	result1, local05
07c04     01 74 06 F1 | 	add	local05, #1
07c08     37 75 62 FC | 	wrlong	local05, local02
07c0c                 | LR__0416
07c0c     AF F0 03 F6 | 	mov	ptra, fp
07c10     BA 00 A0 FD | 	call	#popregs_
07c14                 | __system____default_getc_ret
07c14     2D 00 64 FD | 	ret
07c18                 | 
07c18                 | __system____default_putc
07c18     06 5A 05 F6 | 	mov	COUNT_, #6
07c1c     B0 00 A0 FD | 	call	#pushregs_
07c20     2F 6D 02 F6 | 	mov	local01, arg01
07c24     30 6F 02 F6 | 	mov	local02, arg02
07c28     37 71 02 FB | 	rdlong	local03, local02
07c2c     08 70 06 F1 | 	add	local03, #8
07c30     38 73 02 FB | 	rdlong	local04, local03
07c34     08 70 86 F1 | 	sub	local03, #8
07c38     01 72 CE F7 | 	test	local04, #1 wz
07c3c     08 00 90 AD |  if_e	jmp	#LR__0417
07c40     37 5F 02 F6 | 	mov	arg01, local02
07c44     00 01 B0 FD | 	call	#__system____default_flush
07c48                 | LR__0417
07c48     08 70 06 F1 | 	add	local03, #8
07c4c     38 73 02 FB | 	rdlong	local04, local03
07c50     02 72 46 F5 | 	or	local04, #2
07c54     38 73 62 FC | 	wrlong	local04, local03
07c58     08 70 86 F1 | 	sub	local03, #8
07c5c     38 75 02 FB | 	rdlong	local05, local03
07c60     3A 77 02 F6 | 	mov	local06, local05
07c64     0C 70 06 F1 | 	add	local03, #12
07c68     38 77 02 F1 | 	add	local06, local03
07c6c     3B 6D 42 FC | 	wrbyte	local01, local06
07c70     FF 6C 06 F5 | 	and	local01, #255
07c74     01 74 06 F1 | 	add	local05, #1
07c78     0C 70 86 F1 | 	sub	local03, #12
07c7c     38 75 62 FC | 	wrlong	local05, local03
07c80     02 00 00 FF 
07c84     00 74 0E F2 | 	cmp	local05, ##1024 wz
07c88     10 00 90 5D |  if_ne	jmp	#LR__0418
07c8c     37 5F 02 F6 | 	mov	arg01, local02
07c90     B4 00 B0 FD | 	call	#__system____default_flush
07c94     00 18 0E F2 | 	cmp	result1, #0 wz
07c98     01 6C 66 56 |  if_ne	neg	local01, #1
07c9c                 | LR__0418
07c9c     36 19 02 F6 | 	mov	result1, local01
07ca0     AF F0 03 F6 | 	mov	ptra, fp
07ca4     BA 00 A0 FD | 	call	#popregs_
07ca8                 | __system____default_putc_ret
07ca8     2D 00 64 FD | 	ret
07cac                 | 
07cac                 | __system____default_putc_terminal
07cac     06 5A 05 F6 | 	mov	COUNT_, #6
07cb0     B0 00 A0 FD | 	call	#pushregs_
07cb4     2F 6D 02 F6 | 	mov	local01, arg01
07cb8     30 6F 02 F6 | 	mov	local02, arg02
07cbc     37 71 02 FB | 	rdlong	local03, local02
07cc0     08 70 06 F1 | 	add	local03, #8
07cc4     38 73 02 FB | 	rdlong	local04, local03
07cc8     08 70 86 F1 | 	sub	local03, #8
07ccc     01 72 CE F7 | 	test	local04, #1 wz
07cd0     08 00 90 AD |  if_e	jmp	#LR__0419
07cd4     37 5F 02 F6 | 	mov	arg01, local02
07cd8     6C 00 B0 FD | 	call	#__system____default_flush
07cdc                 | LR__0419
07cdc     08 70 06 F1 | 	add	local03, #8
07ce0     38 73 02 FB | 	rdlong	local04, local03
07ce4     02 72 46 F5 | 	or	local04, #2
07ce8     38 73 62 FC | 	wrlong	local04, local03
07cec     08 70 86 F1 | 	sub	local03, #8
07cf0     38 75 02 FB | 	rdlong	local05, local03
07cf4     3A 77 02 F6 | 	mov	local06, local05
07cf8     0C 70 06 F1 | 	add	local03, #12
07cfc     38 77 02 F1 | 	add	local06, local03
07d00     3B 6D 42 FC | 	wrbyte	local01, local06
07d04     FF 6C 06 F5 | 	and	local01, #255
07d08     0C 70 86 F1 | 	sub	local03, #12
07d0c     01 74 06 F1 | 	add	local05, #1
07d10     38 75 62 FC | 	wrlong	local05, local03
07d14     0A 6C 0E F2 | 	cmp	local01, #10 wz
07d18     0C 00 90 AD |  if_e	jmp	#LR__0420
07d1c     02 00 00 FF 
07d20     00 74 0E F2 | 	cmp	local05, ##1024 wz
07d24     10 00 90 5D |  if_ne	jmp	#LR__0421
07d28                 | LR__0420
07d28     37 5F 02 F6 | 	mov	arg01, local02
07d2c     18 00 B0 FD | 	call	#__system____default_flush
07d30     00 18 0E F2 | 	cmp	result1, #0 wz
07d34     01 6C 66 56 |  if_ne	neg	local01, #1
07d38                 | LR__0421
07d38     36 19 02 F6 | 	mov	result1, local01
07d3c     AF F0 03 F6 | 	mov	ptra, fp
07d40     BA 00 A0 FD | 	call	#popregs_
07d44                 | __system____default_putc_terminal_ret
07d44     2D 00 64 FD | 	ret
07d48                 | 
07d48                 | __system____default_flush
07d48     0D 5A 05 F6 | 	mov	COUNT_, #13
07d4c     B0 00 A0 FD | 	call	#pushregs_
07d50     2F 6D 02 F6 | 	mov	local01, arg01
07d54     36 6F 02 FB | 	rdlong	local02, local01
07d58     37 71 02 FB | 	rdlong	local03, local02
07d5c     08 6E 06 F1 | 	add	local02, #8
07d60     37 73 02 FB | 	rdlong	local04, local02
07d64     08 6E 86 F1 | 	sub	local02, #8
07d68     02 72 CE F7 | 	test	local04, #2 wz
07d6c     B8 00 90 AD |  if_e	jmp	#LR__0424
07d70     00 70 5E F2 | 	cmps	local03, #0 wcz
07d74     24 01 90 ED |  if_be	jmp	#LR__0426
07d78     08 6C 06 F1 | 	add	local01, #8
07d7c     36 73 02 FB | 	rdlong	local04, local01
07d80     08 6C 86 F1 | 	sub	local01, #8
07d84     40 72 CE F7 | 	test	local04, #64 wz
07d88     5C 00 90 AD |  if_e	jmp	#LR__0423
07d8c     08 6C 06 F1 | 	add	local01, #8
07d90     36 73 02 FB | 	rdlong	local04, local01
07d94     08 6C 86 F1 | 	sub	local01, #8
07d98     80 72 CE F7 | 	test	local04, #128 wz
07d9c     48 00 90 AD |  if_e	jmp	#LR__0422
07da0     2C 6C 06 F1 | 	add	local01, #44
07da4     36 73 02 FB | 	rdlong	local04, local01
07da8     2C 6C 86 F1 | 	sub	local01, #44
07dac     39 75 02 FB | 	rdlong	local05, local04
07db0     04 72 06 F1 | 	add	local04, #4
07db4     39 77 02 FB | 	rdlong	local06, local04
07db8     36 5F 02 F6 | 	mov	arg01, local01
07dbc     00 60 06 F6 | 	mov	arg02, #0
07dc0     02 62 06 F6 | 	mov	arg03, #2
07dc4     FD 78 02 F6 | 	mov	local07, objptr
07dc8     3A FB 01 F6 | 	mov	objptr, local05
07dcc     2D 76 62 FD | 	call	local06
07dd0     3C FB 01 F6 | 	mov	objptr, local07
07dd4     08 6C 06 F1 | 	add	local01, #8
07dd8     36 73 02 FB | 	rdlong	local04, local01
07ddc     80 72 26 F5 | 	andn	local04, #128
07de0     36 73 62 FC | 	wrlong	local04, local01
07de4     08 6C 86 F1 | 	sub	local01, #8
07de8                 | LR__0422
07de8                 | LR__0423
07de8     14 6C 06 F1 | 	add	local01, #20
07dec     36 73 02 FB | 	rdlong	local04, local01
07df0     14 6C 86 F1 | 	sub	local01, #20
07df4     39 75 02 FB | 	rdlong	local05, local04
07df8     04 72 06 F1 | 	add	local04, #4
07dfc     39 77 02 FB | 	rdlong	local06, local04
07e00     0C 6E 06 F1 | 	add	local02, #12
07e04     37 61 02 F6 | 	mov	arg02, local02
07e08     0C 6E 86 F1 | 	sub	local02, #12
07e0c     36 5F 02 F6 | 	mov	arg01, local01
07e10     38 63 02 F6 | 	mov	arg03, local03
07e14     FD 78 02 F6 | 	mov	local07, objptr
07e18     3A FB 01 F6 | 	mov	objptr, local05
07e1c     2D 76 62 FD | 	call	local06
07e20     3C FB 01 F6 | 	mov	objptr, local07
07e24     74 00 90 FD | 	jmp	#LR__0426
07e28                 | LR__0424
07e28     08 6E 06 F1 | 	add	local02, #8
07e2c     37 73 02 FB | 	rdlong	local04, local02
07e30     08 6E 86 F1 | 	sub	local02, #8
07e34     01 72 CE F7 | 	test	local04, #1 wz
07e38     60 00 90 AD |  if_e	jmp	#LR__0425
07e3c     00 70 0E F2 | 	cmp	local03, #0 wz
07e40     58 00 90 AD |  if_e	jmp	#LR__0425
07e44     2C 6C 06 F1 | 	add	local01, #44
07e48     36 7B 02 FB | 	rdlong	local08, local01
07e4c     2C 6C 86 F1 | 	sub	local01, #44
07e50     3D 73 02 F6 | 	mov	local04, local08
07e54     39 75 02 FB | 	rdlong	local05, local04
07e58     04 72 06 F1 | 	add	local04, #4
07e5c     39 7D 02 FB | 	rdlong	local09, local04
07e60     3E 77 02 F6 | 	mov	local06, local09
07e64     36 7F 02 F6 | 	mov	local10, local01
07e68     38 81 62 F6 | 	neg	local11, local03
07e6c     01 82 06 F6 | 	mov	local12, #1
07e70     3F 5F 02 F6 | 	mov	arg01, local10
07e74     40 61 02 F6 | 	mov	arg02, local11
07e78     01 62 06 F6 | 	mov	arg03, #1
07e7c     FD 78 02 F6 | 	mov	local07, objptr
07e80     3A FB 01 F6 | 	mov	objptr, local05
07e84     2D 76 62 FD | 	call	local06
07e88     3C FB 01 F6 | 	mov	objptr, local07
07e8c     0C 73 02 F6 | 	mov	local04, result1
07e90     39 85 02 F6 | 	mov	local13, local04
07e94     00 84 5E F2 | 	cmps	local13, #0 wcz
07e98     38 85 02 36 |  if_ae	mov	local13, local03
07e9c                 | LR__0425
07e9c                 | LR__0426
07e9c     37 01 68 FC | 	wrlong	#0, local02
07ea0     04 6E 06 F1 | 	add	local02, #4
07ea4     37 01 68 FC | 	wrlong	#0, local02
07ea8     04 6E 06 F1 | 	add	local02, #4
07eac     37 01 68 FC | 	wrlong	#0, local02
07eb0     00 18 06 F6 | 	mov	result1, #0
07eb4     AF F0 03 F6 | 	mov	ptra, fp
07eb8     BA 00 A0 FD | 	call	#popregs_
07ebc                 | __system____default_flush_ret
07ebc     2D 00 64 FD | 	ret
07ec0                 | 
07ec0                 | __system___rxtxioctl_0179
07ec0     02 5A 05 F6 | 	mov	COUNT_, #2
07ec4     B0 00 A0 FD | 	call	#pushregs_
07ec8     30 6D 02 F6 | 	mov	local01, arg02
07ecc     31 6F 02 F6 | 	mov	local02, arg03
07ed0     00 6D 0E F2 | 	cmp	local01, #256 wz
07ed4     0C 00 90 AD |  if_e	jmp	#LR__0427
07ed8     01 6D 0E F2 | 	cmp	local01, #257 wz
07edc     1C 00 90 AD |  if_e	jmp	#LR__0428
07ee0     30 00 90 FD | 	jmp	#LR__0429
07ee4                 | LR__0427
07ee4     08 00 06 F1 | 	add	ptr___system__dat__, #8
07ee8     00 19 02 FB | 	rdlong	result1, ptr___system__dat__
07eec     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07ef0     37 19 62 FC | 	wrlong	result1, local02
07ef4     00 18 06 F6 | 	mov	result1, #0
07ef8     28 00 90 FD | 	jmp	#LR__0430
07efc                 | LR__0428
07efc     37 5F 02 FB | 	rdlong	arg01, local02
07f00     08 00 06 F1 | 	add	ptr___system__dat__, #8
07f04     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
07f08     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07f0c     00 18 06 F6 | 	mov	result1, #0
07f10     10 00 90 FD | 	jmp	#LR__0430
07f14                 | LR__0429
07f14     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07f18     00 15 68 FC | 	wrlong	#10, ptr___system__dat__
07f1c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07f20     01 18 66 F6 | 	neg	result1, #1
07f24                 | LR__0430
07f24     AF F0 03 F6 | 	mov	ptra, fp
07f28     BA 00 A0 FD | 	call	#popregs_
07f2c                 | __system___rxtxioctl_0179_ret
07f2c     2D 00 64 FD | 	ret
07f30                 | 
07f30                 | __system____dummy_flush_0180
07f30     00 18 06 F6 | 	mov	result1, #0
07f34                 | __system____dummy_flush_0180_ret
07f34     2D 00 64 FD | 	ret
07f38                 | 
07f38                 | __system___vfswrite
07f38     0B 5A 05 F6 | 	mov	COUNT_, #11
07f3c     B0 00 A0 FD | 	call	#pushregs_
07f40     2F 6D 02 F6 | 	mov	local01, arg01
07f44     30 6F 02 F6 | 	mov	local02, arg02
07f48     31 71 02 F6 | 	mov	local03, arg03
07f4c     37 73 02 F6 | 	mov	local04, local02
07f50     08 6C 06 F1 | 	add	local01, #8
07f54     36 75 02 FB | 	rdlong	local05, local01
07f58     08 6C 86 F1 | 	sub	local01, #8
07f5c     02 74 CE F7 | 	test	local05, #2 wz
07f60     14 00 90 5D |  if_ne	jmp	#LR__0431
07f64     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07f68     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07f6c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07f70     01 18 66 F6 | 	neg	result1, #1
07f74     60 01 90 FD | 	jmp	#LR__0439
07f78                 | LR__0431
07f78     08 6C 06 F1 | 	add	local01, #8
07f7c     36 75 02 FB | 	rdlong	local05, local01
07f80     08 6C 86 F1 | 	sub	local01, #8
07f84     40 74 CE F7 | 	test	local05, #64 wz
07f88     5C 00 90 AD |  if_e	jmp	#LR__0433
07f8c     08 6C 06 F1 | 	add	local01, #8
07f90     36 75 02 FB | 	rdlong	local05, local01
07f94     08 6C 86 F1 | 	sub	local01, #8
07f98     80 74 CE F7 | 	test	local05, #128 wz
07f9c     48 00 90 AD |  if_e	jmp	#LR__0432
07fa0     2C 6C 06 F1 | 	add	local01, #44
07fa4     36 75 02 FB | 	rdlong	local05, local01
07fa8     2C 6C 86 F1 | 	sub	local01, #44
07fac     3A 77 02 FB | 	rdlong	local06, local05
07fb0     04 74 06 F1 | 	add	local05, #4
07fb4     3A 79 02 FB | 	rdlong	local07, local05
07fb8     36 5F 02 F6 | 	mov	arg01, local01
07fbc     00 60 06 F6 | 	mov	arg02, #0
07fc0     02 62 06 F6 | 	mov	arg03, #2
07fc4     FD 7A 02 F6 | 	mov	local08, objptr
07fc8     3B FB 01 F6 | 	mov	objptr, local06
07fcc     2D 78 62 FD | 	call	local07
07fd0     3D FB 01 F6 | 	mov	objptr, local08
07fd4     08 6C 06 F1 | 	add	local01, #8
07fd8     36 75 02 FB | 	rdlong	local05, local01
07fdc     80 74 26 F5 | 	andn	local05, #128
07fe0     36 75 62 FC | 	wrlong	local05, local01
07fe4     08 6C 86 F1 | 	sub	local01, #8
07fe8                 | LR__0432
07fe8                 | LR__0433
07fe8     14 6C 06 F1 | 	add	local01, #20
07fec     36 75 0A FB | 	rdlong	local05, local01 wz
07ff0     14 6C 86 F1 | 	sub	local01, #20
07ff4     74 00 90 AD |  if_e	jmp	#LR__0435
07ff8     14 6C 06 F1 | 	add	local01, #20
07ffc     36 75 02 FB | 	rdlong	local05, local01
08000     14 6C 86 F1 | 	sub	local01, #20
08004     3A 77 02 FB | 	rdlong	local06, local05
08008     04 74 06 F1 | 	add	local05, #4
0800c     3A 79 02 FB | 	rdlong	local07, local05
08010     37 61 02 F6 | 	mov	arg02, local02
08014     38 63 02 F6 | 	mov	arg03, local03
08018     36 5F 02 F6 | 	mov	arg01, local01
0801c     FD 7A 02 F6 | 	mov	local08, objptr
08020     3B FB 01 F6 | 	mov	objptr, local06
08024     2D 78 62 FD | 	call	local07
08028     3D FB 01 F6 | 	mov	objptr, local08
0802c     0C 7D 02 F6 | 	mov	local09, result1
08030     00 7C 5E F2 | 	cmps	local09, #0 wcz
08034     2C 00 90 3D |  if_ae	jmp	#LR__0434
08038     08 6C 06 F1 | 	add	local01, #8
0803c     36 75 02 FB | 	rdlong	local05, local01
08040     20 74 46 F5 | 	or	local05, #32
08044     36 75 62 FC | 	wrlong	local05, local01
08048     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0804c     00 7D 62 FC | 	wrlong	local09, ptr___system__dat__
08050     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08054     00 7C 0E F2 | 	cmp	local09, #0 wz
08058     01 18 66 56 |  if_ne	neg	result1, #1
0805c     00 18 06 A6 |  if_e	mov	result1, #0
08060     74 00 90 FD | 	jmp	#LR__0439
08064                 | LR__0434
08064     3E 19 02 F6 | 	mov	result1, local09
08068     6C 00 90 FD | 	jmp	#LR__0439
0806c                 | LR__0435
0806c     18 6C 06 F1 | 	add	local01, #24
08070     36 7F 0A FB | 	rdlong	local10, local01 wz
08074     18 6C 86 F1 | 	sub	local01, #24
08078     14 00 90 5D |  if_ne	jmp	#LR__0436
0807c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08080     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08084     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08088     01 18 66 F6 | 	neg	result1, #1
0808c     48 00 90 FD | 	jmp	#LR__0439
08090                 | LR__0436
08090     00 7C 06 F6 | 	mov	local09, #0
08094                 | LR__0437
08094     00 70 1E F2 | 	cmp	local03, #0 wcz
08098     38 00 90 ED |  if_be	jmp	#LR__0438
0809c     3F 75 02 F6 | 	mov	local05, local10
080a0     3A 77 02 FB | 	rdlong	local06, local05
080a4     04 74 06 F1 | 	add	local05, #4
080a8     3A 79 02 FB | 	rdlong	local07, local05
080ac     39 5F C2 FA | 	rdbyte	arg01, local04
080b0     36 61 02 F6 | 	mov	arg02, local01
080b4     FD 80 02 F6 | 	mov	local11, objptr
080b8     3B FB 01 F6 | 	mov	objptr, local06
080bc     01 72 06 F1 | 	add	local04, #1
080c0     2D 78 62 FD | 	call	local07
080c4     40 FB 01 F6 | 	mov	objptr, local11
080c8     0C 7D 02 F1 | 	add	local09, result1
080cc     01 70 86 F1 | 	sub	local03, #1
080d0     C0 FF 9F FD | 	jmp	#LR__0437
080d4                 | LR__0438
080d4     3E 19 02 F6 | 	mov	result1, local09
080d8                 | LR__0439
080d8     AF F0 03 F6 | 	mov	ptra, fp
080dc     BA 00 A0 FD | 	call	#popregs_
080e0                 | __system___vfswrite_ret
080e0     2D 00 64 FD | 	ret
080e4                 | 
080e4                 | __system___vfsread
080e4     0B 5A 05 F6 | 	mov	COUNT_, #11
080e8     B0 00 A0 FD | 	call	#pushregs_
080ec     28 F0 07 F1 | 	add	ptra, #40
080f0     04 5E 05 F1 | 	add	fp, #4
080f4     AF 5E 62 FC | 	wrlong	arg01, fp
080f8     04 5E 05 F1 | 	add	fp, #4
080fc     AF 60 62 FC | 	wrlong	arg02, fp
08100     04 5E 05 F1 | 	add	fp, #4
08104     AF 62 62 FC | 	wrlong	arg03, fp
08108     04 5E 85 F1 | 	sub	fp, #4
0810c     AF 6C 02 FB | 	rdlong	local01, fp
08110     14 5E 05 F1 | 	add	fp, #20
08114     AF 6C 62 FC | 	wrlong	local01, fp
08118     04 5E 05 F1 | 	add	fp, #4
0811c     AF 00 68 FC | 	wrlong	#0, fp
08120     1C 5E 85 F1 | 	sub	fp, #28
08124     AF 6E 02 FB | 	rdlong	local02, fp
08128     04 5E 85 F1 | 	sub	fp, #4
0812c     08 6E 06 F1 | 	add	local02, #8
08130     37 6D 02 FB | 	rdlong	local01, local02
08134     01 6C CE F7 | 	test	local01, #1 wz
08138     14 00 90 5D |  if_ne	jmp	#LR__0440
0813c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08140     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08144     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08148     01 18 66 F6 | 	neg	result1, #1
0814c     7C 02 90 FD | 	jmp	#LR__0448
08150                 | LR__0440
08150     04 5E 05 F1 | 	add	fp, #4
08154     AF 6C 02 FB | 	rdlong	local01, fp
08158     04 5E 85 F1 | 	sub	fp, #4
0815c     10 6C 06 F1 | 	add	local01, #16
08160     36 71 0A FB | 	rdlong	local03, local01 wz
08164     AC 00 90 AD |  if_e	jmp	#LR__0442
08168     04 5E 05 F1 | 	add	fp, #4
0816c     AF 72 02 FB | 	rdlong	local04, fp
08170     10 72 06 F1 | 	add	local04, #16
08174     39 6D 02 FB | 	rdlong	local01, local04
08178     36 6F 02 FB | 	rdlong	local02, local01
0817c     04 6C 06 F1 | 	add	local01, #4
08180     36 71 02 FB | 	rdlong	local03, local01
08184     AF 5E 02 FB | 	rdlong	arg01, fp
08188     04 5E 05 F1 | 	add	fp, #4
0818c     AF 60 02 FB | 	rdlong	arg02, fp
08190     04 5E 05 F1 | 	add	fp, #4
08194     AF 62 02 FB | 	rdlong	arg03, fp
08198     0C 5E 85 F1 | 	sub	fp, #12
0819c     FD 74 02 F6 | 	mov	local05, objptr
081a0     37 FB 01 F6 | 	mov	objptr, local02
081a4     2D 70 62 FD | 	call	local03
081a8     3A FB 01 F6 | 	mov	objptr, local05
081ac     10 5E 05 F1 | 	add	fp, #16
081b0     AF 18 62 FC | 	wrlong	result1, fp
081b4     10 5E 85 F1 | 	sub	fp, #16
081b8     00 18 5E F2 | 	cmps	result1, #0 wcz
081bc     44 00 90 3D |  if_ae	jmp	#LR__0441
081c0     04 5E 05 F1 | 	add	fp, #4
081c4     AF 6C 02 FB | 	rdlong	local01, fp
081c8     36 73 02 F6 | 	mov	local04, local01
081cc     08 72 06 F1 | 	add	local04, #8
081d0     39 71 02 FB | 	rdlong	local03, local04
081d4     20 70 46 F5 | 	or	local03, #32
081d8     08 6C 06 F1 | 	add	local01, #8
081dc     36 71 62 FC | 	wrlong	local03, local01
081e0     0C 5E 05 F1 | 	add	fp, #12
081e4     AF 5E 0A FB | 	rdlong	arg01, fp wz
081e8     10 5E 85 F1 | 	sub	fp, #16
081ec     1C 00 06 F1 | 	add	ptr___system__dat__, #28
081f0     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
081f4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
081f8     01 18 66 56 |  if_ne	neg	result1, #1
081fc     00 18 06 A6 |  if_e	mov	result1, #0
08200     C8 01 90 FD | 	jmp	#LR__0448
08204                 | LR__0441
08204     10 5E 05 F1 | 	add	fp, #16
08208     AF 18 02 FB | 	rdlong	result1, fp
0820c     10 5E 85 F1 | 	sub	fp, #16
08210     B8 01 90 FD | 	jmp	#LR__0448
08214                 | LR__0442
08214     04 5E 05 F1 | 	add	fp, #4
08218     AF 6C 02 FB | 	rdlong	local01, fp
0821c     1C 6C 06 F1 | 	add	local01, #28
08220     36 71 02 FB | 	rdlong	local03, local01
08224     14 5E 05 F1 | 	add	fp, #20
08228     AF 70 62 FC | 	wrlong	local03, fp
0822c     AF 6C 0A FB | 	rdlong	local01, fp wz
08230     18 5E 85 F1 | 	sub	fp, #24
08234     14 00 90 5D |  if_ne	jmp	#LR__0443
08238     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0823c     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08240     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08244     01 18 66 F6 | 	neg	result1, #1
08248     80 01 90 FD | 	jmp	#LR__0448
0824c                 | LR__0443
0824c     04 5E 05 F1 | 	add	fp, #4
08250     AF 6C 02 FB | 	rdlong	local01, fp
08254     04 5E 85 F1 | 	sub	fp, #4
08258     24 6C 06 F1 | 	add	local01, #36
0825c     36 71 0A FB | 	rdlong	local03, local01 wz
08260     94 00 90 AD |  if_e	jmp	#LR__0445
08264     04 5E 05 F1 | 	add	fp, #4
08268     AF 76 02 FB | 	rdlong	local06, fp
0826c     3B 73 02 F6 | 	mov	local04, local06
08270     24 72 06 F1 | 	add	local04, #36
08274     39 79 02 FB | 	rdlong	local07, local04
08278     3C 6D 02 F6 | 	mov	local01, local07
0827c     36 6F 02 FB | 	rdlong	local02, local01
08280     04 6C 06 F1 | 	add	local01, #4
08284     36 7B 02 FB | 	rdlong	local08, local01
08288     3D 71 02 F6 | 	mov	local03, local08
0828c     3B 7D 02 F6 | 	mov	local09, local06
08290     00 7F 06 F6 | 	mov	local10, #256
08294     20 5E 05 F1 | 	add	fp, #32
08298     AF 80 02 F6 | 	mov	local11, fp
0829c     3E 5F 02 F6 | 	mov	arg01, local09
082a0     00 61 06 F6 | 	mov	arg02, #256
082a4     40 63 02 F6 | 	mov	arg03, local11
082a8     FD 74 02 F6 | 	mov	local05, objptr
082ac     37 FB 01 F6 | 	mov	objptr, local02
082b0     24 5E 85 F1 | 	sub	fp, #36
082b4     2D 70 62 FD | 	call	local03
082b8     3A FB 01 F6 | 	mov	objptr, local05
082bc     10 5E 05 F1 | 	add	fp, #16
082c0     AF 18 62 FC | 	wrlong	result1, fp
082c4     AF 6E 0A FB | 	rdlong	local02, fp wz
082c8     10 5E 85 F1 | 	sub	fp, #16
082cc     28 00 90 5D |  if_ne	jmp	#LR__0444
082d0     24 5E 05 F1 | 	add	fp, #36
082d4     AF 72 02 FB | 	rdlong	local04, fp
082d8     24 5E 85 F1 | 	sub	fp, #36
082dc     39 71 02 F6 | 	mov	local03, local04
082e0     02 70 0E F5 | 	and	local03, #2 wz
082e4     10 00 90 AD |  if_e	jmp	#LR__0444
082e8     01 6C 06 F6 | 	mov	local01, #1
082ec     20 5E 05 F1 | 	add	fp, #32
082f0     AF 02 68 FC | 	wrlong	#1, fp
082f4     20 5E 85 F1 | 	sub	fp, #32
082f8                 | LR__0444
082f8                 | LR__0445
082f8     10 5E 05 F1 | 	add	fp, #16
082fc     AF 00 68 FC | 	wrlong	#0, fp
08300     10 5E 85 F1 | 	sub	fp, #16
08304                 | LR__0446
08304     0C 5E 05 F1 | 	add	fp, #12
08308     AF 6C 02 FB | 	rdlong	local01, fp
0830c     0C 5E 85 F1 | 	sub	fp, #12
08310     00 6C 1E F2 | 	cmp	local01, #0 wcz
08314     A8 00 90 ED |  if_be	jmp	#LR__0447
08318     18 5E 05 F1 | 	add	fp, #24
0831c     AF 6C 02 FB | 	rdlong	local01, fp
08320     36 6F 02 FB | 	rdlong	local02, local01
08324     04 6C 06 F1 | 	add	local01, #4
08328     36 71 02 FB | 	rdlong	local03, local01
0832c     14 5E 85 F1 | 	sub	fp, #20
08330     AF 5E 02 FB | 	rdlong	arg01, fp
08334     04 5E 85 F1 | 	sub	fp, #4
08338     FD 7A 02 F6 | 	mov	local08, objptr
0833c     37 FB 01 F6 | 	mov	objptr, local02
08340     2D 70 62 FD | 	call	local03
08344     3D FB 01 F6 | 	mov	objptr, local08
08348     14 5E 05 F1 | 	add	fp, #20
0834c     AF 18 62 FC | 	wrlong	result1, fp
08350     14 5E 85 F1 | 	sub	fp, #20
08354     00 18 5E F2 | 	cmps	result1, #0 wcz
08358     64 00 90 CD |  if_b	jmp	#LR__0447
0835c     1C 5E 05 F1 | 	add	fp, #28
08360     AF 6C 02 FB | 	rdlong	local01, fp
08364     36 71 02 F6 | 	mov	local03, local01
08368     01 70 06 F1 | 	add	local03, #1
0836c     AF 70 62 FC | 	wrlong	local03, fp
08370     08 5E 85 F1 | 	sub	fp, #8
08374     AF 76 02 FB | 	rdlong	local06, fp
08378     36 77 42 FC | 	wrbyte	local06, local01
0837c     04 5E 85 F1 | 	sub	fp, #4
08380     AF 6C 02 FB | 	rdlong	local01, fp
08384     01 6C 06 F1 | 	add	local01, #1
08388     AF 6C 62 FC | 	wrlong	local01, fp
0838c     04 5E 85 F1 | 	sub	fp, #4
08390     AF 6C 02 FB | 	rdlong	local01, fp
08394     01 6C 86 F1 | 	sub	local01, #1
08398     AF 6C 62 FC | 	wrlong	local01, fp
0839c     14 5E 05 F1 | 	add	fp, #20
083a0     AF 6C 0A FB | 	rdlong	local01, fp wz
083a4     20 5E 85 F1 | 	sub	fp, #32
083a8     58 FF 9F AD |  if_e	jmp	#LR__0446
083ac     14 5E 05 F1 | 	add	fp, #20
083b0     AF 70 02 FB | 	rdlong	local03, fp
083b4     14 5E 85 F1 | 	sub	fp, #20
083b8     0A 70 0E F2 | 	cmp	local03, #10 wz
083bc     44 FF 9F 5D |  if_ne	jmp	#LR__0446
083c0                 | LR__0447
083c0     10 5E 05 F1 | 	add	fp, #16
083c4     AF 18 02 FB | 	rdlong	result1, fp
083c8     10 5E 85 F1 | 	sub	fp, #16
083cc                 | LR__0448
083cc     AF F0 03 F6 | 	mov	ptra, fp
083d0     BA 00 A0 FD | 	call	#popregs_
083d4                 | __system___vfsread_ret
083d4     2D 00 64 FD | 	ret
083d8                 | 
083d8                 | __system____default_filbuf
083d8     06 5A 05 F6 | 	mov	COUNT_, #6
083dc     B0 00 A0 FD | 	call	#pushregs_
083e0     2F 6D 02 FB | 	rdlong	local01, arg01
083e4     10 5E 06 F1 | 	add	arg01, #16
083e8     2F 6F 02 FB | 	rdlong	local02, arg01
083ec     10 5E 86 F1 | 	sub	arg01, #16
083f0     37 71 02 FB | 	rdlong	local03, local02
083f4     04 6E 06 F1 | 	add	local02, #4
083f8     37 73 02 FB | 	rdlong	local04, local02
083fc     0C 6C 06 F1 | 	add	local01, #12
08400     36 61 02 F6 | 	mov	arg02, local01
08404     0C 6C 86 F1 | 	sub	local01, #12
08408     0A 62 C6 F9 | 	decod	arg03, #10
0840c     FD 74 02 F6 | 	mov	local05, objptr
08410     38 FB 01 F6 | 	mov	objptr, local03
08414     2D 72 62 FD | 	call	local04
08418     3A FB 01 F6 | 	mov	objptr, local05
0841c     0C 77 02 F6 | 	mov	local06, result1
08420     00 76 5E F2 | 	cmps	local06, #0 wcz
08424     01 18 66 C6 |  if_b	neg	result1, #1
08428     28 00 90 CD |  if_b	jmp	#LR__0449
0842c     36 77 62 FC | 	wrlong	local06, local01
08430     0C 6C 06 F1 | 	add	local01, #12
08434     36 6F 02 F6 | 	mov	local02, local01
08438     08 6C 86 F1 | 	sub	local01, #8
0843c     36 6F 62 FC | 	wrlong	local02, local01
08440     04 6C 06 F1 | 	add	local01, #4
08444     36 6F 02 FB | 	rdlong	local02, local01
08448     01 6E 46 F5 | 	or	local02, #1
0844c     36 6F 62 FC | 	wrlong	local02, local01
08450     3B 19 02 F6 | 	mov	result1, local06
08454                 | LR__0449
08454     AF F0 03 F6 | 	mov	ptra, fp
08458     BA 00 A0 FD | 	call	#popregs_
0845c                 | __system____default_filbuf_ret
0845c     2D 00 64 FD | 	ret
08460                 | 
08460                 | ' 	
08460                 | ' 	FUNCTION pfunc(c as integer) as integer
08460                 | ___strs_cl_pfunc
08460                 | ' 		if (i < 16) then
08460     04 FA 05 F1 | 	add	objptr, #4
08464     FD 1E 02 FB | 	rdlong	_var01, objptr
08468     04 FA 85 F1 | 	sub	objptr, #4
0846c     10 1E 5E F2 | 	cmps	_var01, #16 wcz
08470     2C 00 90 3D |  if_ae	jmp	#LR__0450
08474     FD 20 02 FB | 	rdlong	_var02, objptr
08478     04 FA 05 F1 | 	add	objptr, #4
0847c     FD 22 02 FB | 	rdlong	_var03, objptr
08480     10 23 02 F1 | 	add	_var03, _var02
08484     11 5F 42 FC | 	wrbyte	arg01, _var03
08488     FD 1E 02 FB | 	rdlong	_var01, objptr
0848c     01 1E 06 F1 | 	add	_var01, #1
08490     FD 1E 62 FC | 	wrlong	_var01, objptr
08494     04 FA 85 F1 | 	sub	objptr, #4
08498                 | ' 			p(i) = c
08498                 | ' 			i = i+1
08498                 | ' 			return 1
08498     01 18 06 F6 | 	mov	result1, #1
0849c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
084a0                 | LR__0450
084a0                 | ' 			return -1
084a0     01 18 66 F6 | 	neg	result1, #1
084a4                 | ___strs_cl_pfunc_ret
084a4     2D 00 64 FD | 	ret
084a8                 | 
084a8                 | __struct__s_vfs_file_t_putchar
084a8     04 5A 05 F6 | 	mov	COUNT_, #4
084ac     B0 00 A0 FD | 	call	#pushregs_
084b0     18 FA 05 F1 | 	add	objptr, #24
084b4     FD 6C 0A FB | 	rdlong	local01, objptr wz
084b8     18 FA 85 F1 | 	sub	objptr, #24
084bc     00 18 06 A6 |  if_e	mov	result1, #0
084c0     3C 00 90 AD |  if_e	jmp	#LR__0451
084c4     18 FA 05 F1 | 	add	objptr, #24
084c8     FD 6C 02 FB | 	rdlong	local01, objptr
084cc     18 FA 85 F1 | 	sub	objptr, #24
084d0     36 6F 02 FB | 	rdlong	local02, local01
084d4     04 6C 06 F1 | 	add	local01, #4
084d8     36 71 02 FB | 	rdlong	local03, local01
084dc     FD 60 02 F6 | 	mov	arg02, objptr
084e0     FD 72 02 F6 | 	mov	local04, objptr
084e4     37 FB 01 F6 | 	mov	objptr, local02
084e8     2D 70 62 FD | 	call	local03
084ec     39 FB 01 F6 | 	mov	objptr, local04
084f0     00 18 5E F2 | 	cmps	result1, #0 wcz
084f4     00 6C 06 C6 |  if_b	mov	local01, #0
084f8     01 6C 06 36 |  if_ae	mov	local01, #1
084fc     36 19 02 F6 | 	mov	result1, local01
08500                 | LR__0451
08500     AF F0 03 F6 | 	mov	ptra, fp
08504     BA 00 A0 FD | 	call	#popregs_
08508                 | __struct__s_vfs_file_t_putchar_ret
08508     2D 00 64 FD | 	ret
0850c                 | 
0850c                 | __struct__s_vfs_file_t_getchar
0850c     04 5A 05 F6 | 	mov	COUNT_, #4
08510     B0 00 A0 FD | 	call	#pushregs_
08514     1C FA 05 F1 | 	add	objptr, #28
08518     FD 6C 0A FB | 	rdlong	local01, objptr wz
0851c     1C FA 85 F1 | 	sub	objptr, #28
08520     01 18 66 A6 |  if_e	neg	result1, #1
08524     2C 00 90 AD |  if_e	jmp	#LR__0452
08528                 | '         return getcf(__this);
08528     1C FA 05 F1 | 	add	objptr, #28
0852c     FD 6C 02 FB | 	rdlong	local01, objptr
08530     1C FA 85 F1 | 	sub	objptr, #28
08534     36 6F 02 FB | 	rdlong	local02, local01
08538     04 6C 06 F1 | 	add	local01, #4
0853c     36 71 02 FB | 	rdlong	local03, local01
08540     FD 5E 02 F6 | 	mov	arg01, objptr
08544     FD 72 02 F6 | 	mov	local04, objptr
08548     37 FB 01 F6 | 	mov	objptr, local02
0854c     2D 70 62 FD | 	call	local03
08550     39 FB 01 F6 | 	mov	objptr, local04
08554                 | LR__0452
08554     AF F0 03 F6 | 	mov	ptra, fp
08558     BA 00 A0 FD | 	call	#popregs_
0855c                 | __struct__s_vfs_file_t_getchar_ret
0855c     2D 00 64 FD | 	ret
08560                 | 
08560                 | __struct___bas_wrap_sender_tx
08560     04 5A 05 F6 | 	mov	COUNT_, #4
08564     B0 00 A0 FD | 	call	#pushregs_
08568     FD 6C 02 FB | 	rdlong	local01, objptr
0856c     36 6F 02 FB | 	rdlong	local02, local01
08570     04 6C 06 F1 | 	add	local01, #4
08574     36 71 02 FB | 	rdlong	local03, local01
08578     FD 72 02 F6 | 	mov	local04, objptr
0857c     37 FB 01 F6 | 	mov	objptr, local02
08580     2D 70 62 FD | 	call	local03
08584     39 FB 01 F6 | 	mov	objptr, local04
08588     01 18 06 F6 | 	mov	result1, #1
0858c     AF F0 03 F6 | 	mov	ptra, fp
08590     BA 00 A0 FD | 	call	#popregs_
08594                 | __struct___bas_wrap_sender_tx_ret
08594     2D 00 64 FD | 	ret
08598                 | 
08598                 | LR__0453
08598     20          | 	byte	" "
08599     00          | 	byte	0
0859a                 | LR__0454
0859a                 | 	byte	
0859a     00          | 	byte	0
0859b                 | LR__0455
0859b                 | 	byte	
0859b     00          | 	byte	0
0859c                 | LR__0456
0859c     20 21 21 21 
085a0     20 63 6F 72 
085a4     72 75 70 74 
085a8     65 64 20 68 
085ac     65 61 70 3F 
085b0     3F 3F 20 21 
085b4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
085b7     00          | 	byte	0
085b8                 | LR__0457
085b8     20 21 21 21 
085bc     20 6F 75 74 
085c0     20 6F 66 20 
085c4     68 65 61 70 
085c8     20 6D 65 6D 
085cc     6F 72 79 20 
085d0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
085d4     00          | 	byte	0
085d5                 | LR__0458
085d5     20 21 21 21 
085d9     20 63 6F 72 
085dd     72 75 70 74 
085e1     65 64 20 68 
085e5     65 61 70 20 
085e9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
085ed     00          | 	byte	0
085ee                 | LR__0459
085ee     4E 61 6D 65 
085f2     20 20 20 20 
085f6     20 20 20 20 
085fa     20 20 20 20 
085fe     20 20 20 20 
08602     20 20 20 6C 
08606     65 6E 20 20 
0860a     20 66 74 20 
0860e     76 6F 6C 20 
08612     72 65 70 20 
08616     20 20 72 2E 
0861a     6C 65 6E 20 
0861e     20 20 20 20 
08622     20 20 20 20 
08626     4E 61 6D 65 
0862a     20 20 20 20 
0862e     20 20 20 20 
08632     20 20 20 20 
08636     20 20 20 20 
0863a     20 20 20 6C 
0863e     65 6E 20 20 
08642     20 66 74 20 
08646     76 6F 6C 20 
0864a     72 65 70 20 
0864e     20 20 72 2E 
08652     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
08656     00          | 	byte	0
08657                 | LR__0460
08657     53          | 	byte	"S"
08658     00          | 	byte	0
08659                 | LR__0461
08659     20 20 20 20 
0865d     20 20 20 20 
08661     20 20 20 20 
08665     20 20 20 20 
08669     20 20 20 20 
0866d     20 20       | 	byte	"                      "
0866f     00          | 	byte	0
08670                 | LR__0462
08670                 | 	byte	
08670     00          | 	byte	0
08671                 | LR__0463
08671     20          | 	byte	" "
08672     00          | 	byte	0
08673                 | LR__0464
08673     73 61 6D 70 
08677     6C 65 73 20 
0867b     6D 6F 64 75 
0867f     6C 65       | 	byte	"samples module"
08681     00          | 	byte	0
08682                 | LR__0465
08682     31 32 33 34 
08686     35 36 37 38 
0868a     39 30 31 32 
0868e     33 34 35 36 
08692     37 38 39 30 
08696     31 32 33 34 
0869a     35 36 37 38 
0869e     39 30       | 	byte	"123456789012345678901234567890"
086a0     00          | 	byte	0
086a1     00 00 00    | 	alignl
086a4                 | _dat_
086a4                 | 
086a4     23 23 20 62 
086a8     61 6C 6C 61 
086ac     64 61 20 23 
086b0     23 00 00 00 | module file "ballada.mod"
086b4     00 00 00 00 
086b8     78 74 64 20 
086bc     2F 20 75 6E 
086c0     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
086c4     28 63 69 61 
086c8     29 00 00 00 
086cc     00 00 0A ED 
086d0     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
086d4     00 87 2A 2A 
086d8     20 31 38 2E 
086dc     30 31 2E 31 
086e0     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
086e4     2A 2A 00 00 
086e8     00 00 00 00 
086ec     09 FE 00 40 
086f0     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
086f4     00 00 00 00 
086f8     00 00 00 00 
086fc     00 00 00 00 
08700     00 00 00 00 
08704     00 00 00 00 
08708     00 00       | 	byte	$00[22]
0870a     05 07 00 40 
0870e     00 00 00 01 
08712     00 00 00 00 
08716     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0871a     00 00 00 00 
0871e     00 00 00 00 
08722     00 00 00 00 
08726     00 00       | 	byte	$00[14]
08728     03 2A 00 40 
0872c     02 C5 00 65 
08730     00 00 00 00 
08734     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
08738     00 00 00 00 
0873c     00 00 00 00 
08740     00 00 00 00 
08744     00 00       | 	byte	$00[14]
08746     0A 01 00 30 
0874a     03 55 06 AC 
0874e     00 00 00 00 
08752     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
08756     00 00 00 00 
0875a     00 00 00 00 
0875e     00 00 00 00 
08762     00 00       | 	byte	$00[14]
08764     09 AA 00 30 
08768     03 F4 05 B6 
0876c     00 00 00 00 
08770     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
08774     00 00 00 00 
08778     00 00 00 00 
0877c     00 00 00 00 
08780     00 00       | 	byte	$00[14]
08782     01 E6 00 40 
08786     01 97 00 4F 
0878a     00 00 00 00 
0878e     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
08792     00 00 00 00 
08796     00 00 00 00 
0879a     00 00 00 00 
0879e     00 00 00 00 
087a2     00 00 00 00 
087a6     00          | 	byte	$00[21]
087a7     01 00 00 00 
087ab     00 00 00 00 
087af     00 00 00 00 
087b3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087b7     00 00 00 00 
087bb     00 00 00    | 	byte	$00[7]
087be     08 FB 00 40 
087c2     01 EA 07 11 
087c6     00 00 00 00 
087ca     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
087ce     00 00 00 00 
087d2     00 00 00 00 
087d6     00 00 00 00 
087da     00 00       | 	byte	$00[14]
087dc     04 5E 00 40 
087e0     00 00 00 01 
087e4     00 00 00 00 
087e8     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
087ec     00 00 00 00 
087f0     00 00 00 00 
087f4     00 00 00 00 
087f8     00 00       | 	byte	$00[14]
087fa     08 EC 00 40 
087fe     03 5C 05 90 
08802     00 00 00 00 
08806     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
0880a     00 00 00 00 
0880e     00 00 00 00 
08812     00 00 00 00 
08816     00 00 00 00 
0881a     00 00 00 00 
0881e     00          | 	byte	$00[21]
0881f     01 00 00 00 
08823     00 00 00 00 
08827     00 00 00 00 
0882b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0882f     00 00 00 00 
08833     00 00 00    | 	byte	$00[7]
08836     07 0E 00 30 
0883a     00 00 00 01 
0883e     00 00 00 00 
08842     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08846     00 00 00 00 
0884a     00 00 00 00 
0884e     00 00 00 00 
08852     00 00 00 00 
08856     00 00 00 00 
0885a     00          | 	byte	$00[21]
0885b     01 00 00 00 
0885f     00 00 00 00 
08863     00 00 00 00 
08867     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0886b     00 00 00 00 
0886f     00 00 00 00 
08873     00 00 00 00 
08877     00 00       | 	byte	$00[14]
08879     01 00 00 00 
0887d     00 00 00 00 
08881     00 00 00 00 
08885     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08889     00 00 00 00 
0888d     00 00 00 00 
08891     00 00 00 00 
08895     00 00       | 	byte	$00[14]
08897     01 00 00 00 
0889b     00 00 00 00 
0889f     00 00 00 00 
088a3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088a7     00 00 00 00 
088ab     00 00 00 00 
088af     00 00 00 00 
088b3     00 00       | 	byte	$00[14]
088b5     01 00 00 00 
088b9     00 00 00 00 
088bd     00 00 00 00 
088c1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088c5     00 00 00 00 
088c9     00 00 00 00 
088cd     00 00 00 00 
088d1     00 00       | 	byte	$00[14]
088d3     01 00 00 00 
088d7     00 00 00 00 
088db     00 00 00 00 
088df     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088e3     00 00 00 00 
088e7     00 00 00 00 
088eb     00 00 00 00 
088ef     00 00       | 	byte	$00[14]
088f1     01 00 00 00 
088f5     00 00 00 00 
088f9     00 00 00 00 
088fd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08901     00 00 00 00 
08905     00 00 00 00 
08909     00 00 00 00 
0890d     00 00       | 	byte	$00[14]
0890f     01 00 00 00 
08913     00 00 00 00 
08917     00 00 00 00 
0891b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0891f     00 00 00 00 
08923     00 00 00 00 
08927     00 00 00 00 
0892b     00 00       | 	byte	$00[14]
0892d     01 00 00 00 
08931     00 00 00 00 
08935     00 00 00 00 
08939     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0893d     00 00 00 00 
08941     00 00 00 00 
08945     00 00 00 00 
08949     00 00       | 	byte	$00[14]
0894b     01 00 00 00 
0894f     00 00 00 00 
08953     00 00 00 00 
08957     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0895b     00 00 00 00 
0895f     00 00 00 00 
08963     00 00 00 00 
08967     00 00       | 	byte	$00[14]
08969     01 00 00 00 
0896d     00 00 00 00 
08971     00 00 00 00 
08975     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08979     00 00 00 00 
0897d     00 00 00 00 
08981     00 00 00 00 
08985     00 00       | 	byte	$00[14]
08987     01 00 00 00 
0898b     00 00 00 00 
0898f     00 00 00 00 
08993     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08997     00 00 00 00 
0899b     00 00 00 00 
0899f     00 00 00 00 
089a3     00 00       | 	byte	$00[14]
089a5     01 00 00 00 
089a9     00 00 00 00 
089ad     00 00 00 00 
089b1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089b5     00 00 00 00 
089b9     00 00 00 00 
089bd     00 00 00 00 
089c1     00 00       | 	byte	$00[14]
089c3     01 00 00 00 
089c7     00 00 00 00 
089cb     00 00 00 00 
089cf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089d3     00 00 00 00 
089d7     00 00 00 00 
089db     00 00 00 00 
089df     00 00       | 	byte	$00[14]
089e1     01 00 00 00 
089e5     00 00 00 00 
089e9     00 00 00 00 
089ed     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089f1     00 00 00 00 
089f5     00 00 00 00 
089f9     00 00 00 00 
089fd     00 00       | 	byte	$00[14]
089ff     01 00 00 00 
08a03     00 00 00 00 
08a07     00 00 00 00 
08a0b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a0f     00 00 00 00 
08a13     00 00 00 00 
08a17     00 00 00 00 
08a1b     00 00       | 	byte	$00[14]
08a1d     01 00 00 00 
08a21     00 00 00 00 
08a25     00 00 00 00 
08a29     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a2d     00 00 00 00 
08a31     00 00 00 00 
08a35     00 00 00 00 
08a39     00 00       | 	byte	$00[14]
08a3b     01 00 00 00 
08a3f     00 00 00 00 
08a43     00 00 00 00 
08a47     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a4b     00 00 00 00 
08a4f     00 00 00 00 
08a53     00 00 00 00 
08a57     00 00       | 	byte	$00[14]
08a59     01 19 7F 00 
08a5d     01 02 04 03 
08a61     05 06 07 03 
08a65     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
08a69     0C 0D 0E 0F 
08a6d     0C 0D 10 11 
08a71     12 14 12 13 
08a75     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
08a79     00 00 00 00 
      ...             
08ad5     00 00 00 00 
08ad9     00 00 00    | 	byte	$00[99]
08adc     4D 2E 4B 2E 
08ae0     01 7D 1C 10 
08ae4     00 00 0F 05 
08ae8     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
08aec     00 00 0C 00 
08af0     00 00 00 00 
08af4     00 00 0C 00 
08af8     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
08afc     00 00 00 00 
      ...             
08b24     00 00 00 00 
08b28     00 00 00 00 | 	byte	$00[48]
08b2c     01 7D 1C 10 
08b30     01 53 1C 18 
08b34     00 00 00 00 
08b38     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
08b3c     00 00 00 00 
08b40     00 00       | 	byte	$00[6]
08b42     0C 10 00 00 
08b46     00 00 00 00 
08b4a     00 00 01 40 
08b4e     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
08b52     00 00 00 00 
08b56     00 00 00 00 
08b5a     00 00 00 00 
08b5e     00 00 00    | 	byte	$00[15]
08b61     FE 1C 30 00 
08b65     00 00 00 00 
08b69     00 00 00 00 
08b6d     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
08b71     00 00 00 00 
08b75     00 00 00 00 
08b79     00 00 00 00 
08b7d     00 00 00 00 
08b81     00          | 	byte	$00[17]
08b82     0C 20 00 00 
08b86     00 00 00 00 
08b8a     00 00 01 1D 
08b8e     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
08b92     00 00 00 00 
08b96     00 00 00 00 
08b9a     00 00 00 00 
08b9e     00 00 00    | 	byte	$00[15]
08ba1     BE 10 00 00 
08ba5     00 00 00 00 
08ba9     00 00 00 01 
08bad     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
08bb1     00 00 00 00 
08bb5     00 00 00 00 
08bb9     00 00 00 00 
08bbd     00 00 00 00 | 	byte	$00[16]
08bc1     BE 1A 06 00 
08bc5     00 00 00 00 
08bc9     00 00 00 00 
08bcd     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd1     A0 0E 93 00 
08bd5     00 00 00 00 
08bd9     00 00 00 00 
08bdd     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be1     7F 10 00 00 
08be5     00 00 00 00 
08be9     00 00 00 00 
08bed     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf1     00 00 00 00 
08bf5     00 00 00 00 
08bf9     00 00 00 00 | 	byte	$00[12]
08bfd     BE 1C 20 00 
08c01     8F 10 00 00 
08c05     00 00 00 00 
08c09     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c0d     AC 1C 30 00 
08c11     00 00 00 00 
08c15     00 00 00 00 
08c19     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c1d     00 00 00 00 
08c21     A0 0E 93 00 
08c25     00 00 00 00 
08c29     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c2d     00 00 00 00 
08c31     A0 10 00 00 
08c35     00 00 00 00 
08c39     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c3d     00 00 00 00 
08c41     AA 10 00 00 
08c45     00 00 00 00 
08c49     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c4d     00 00 00 00 
08c51     00          | 	byte	$00[5]
08c52     0A 06 00 00 
08c56     00 00 00 00 
08c5a     00 00 00 00 
08c5e     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08c62     10 00 00 00 
08c66     00 00 00 00 
08c6a     00 00 01 7D 
08c6e     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08c72     00 00 00 00 
08c76     00 00 00 00 
08c7a     00 00 00 00 
08c7e     00 00 00    | 	byte	$00[15]
08c81     FE 10 00 00 
08c85     00 00 00 00 
08c89     00 00 00 00 
08c8d     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c91     00 00 00 00 
08c95     00 00 00 00 
08c99     00 00 00 00 
08c9d     00 00 00 00 
08ca1     00 00 00 00 
08ca5     00 00 00 00 
08ca9     00 00 00 00 | 	byte	$00[28]
08cad     BE 10 00 00 
08cb1     FE 1C 20 00 
08cb5     00 00 00 00 
08cb9     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cbd     00 00 00 00 
08cc1     AA 10 00 00 
08cc5     00 00 00 00 
08cc9     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08ccd     AC 10 00 00 
08cd1     00 00 00 00 
08cd5     00 00 00 00 
08cd9     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cdd     00 00 00 00 
08ce1     D6 10 00 00 
08ce5     00 00 00 00 
08ce9     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ced     00 00 00 00 
      ...             
08d05     00 00 00 00 
08d09     00 00 00 00 | 	byte	$00[32]
08d0d     AA 10 00 00 
08d11     00 00 00 00 
08d15     00 00 00 00 
08d19     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d1d     00 00 00 00 
08d21     A0 10 00 00 
08d25     00 00 00 00 
08d29     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08d2d     E0 1C 30 00 
08d31     00 00 00 00 
08d35     00 00 00 00 
08d39     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d3d     00 00 00 00 
08d41     AA 10 00 00 
08d45     00 00 00 00 
08d49     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d4d     00 00 00 00 
08d51     00 00 00 00 
08d55     00 00 00 00 
08d59     00 00 00 00 | 	byte	$00[16]
08d5d     BE 10 00 00 
08d61     AA 10 00 00 
08d65     00 00 00 00 
08d69     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08d6d     AC 10 00 00 
08d71     00 00 00 00 
08d75     00 00 00 00 
08d79     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d7d     00 00 00 00 
08d81     BE 14 C1 00 
08d85     00 00 00 00 
08d89     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
08d8d     7D 10 00 00 
08d91     00 06 02 00 
08d95     00 00 00 00 
08d99     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d9d     00 0A 02 00 
08da1     00 06 02 00 
08da5     00 00 00 00 
08da9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dad     00 0A 02 00 
08db1     00 06 02 00 
08db5     00 00 00 00 
08db9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dbd     00 0A 02 00 
08dc1     A0 10 00 00 
08dc5     00 00 00 00 
08dc9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dcd     00 0A 02 00 
08dd1     8F 1D 01 00 
08dd5     00 00 00 00 
08dd9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ddd     00 0A 02 00 
08de1     00 00 00 00 
08de5     00 00 00 00 
08de9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ded     00 00 00 00 
      ...             
08edd     00 00 00 00 
08ee1     00          | 	byte	$00[245]
08ee2     0B 01 00 00 
08ee6     00 00 00 00 
08eea     00 00 00 00 
08eee     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08ef2     1F 05 00 BE 
08ef6     2A 02 00 00 
08efa     00 00 01 7D 
08efe     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08f02     00 00 00 00 
08f06     0A 02 00 00 
08f0a     00 00 00 00 
08f0e     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08f12     10 00 00 00 
08f16     0A 02 00 00 
08f1a     00 00 00 00 
08f1e     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08f22     1C 20 00 00 
08f26     0A 02 00 00 
08f2a     00 00 00 00 
08f2e     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08f32     10 00 00 BE 
08f36     0A 02 00 00 
08f3a     00 00 00 00 
08f3e     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08f42     00 00 00 00 
08f46     0A 02 00 00 
08f4a     00 00 00 00 
08f4e     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
08f52     40 00 00 F0 
08f56     2A 02 00 00 
08f5a     00 00 01 E0 
08f5e     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
08f62     00 00 00 00 
08f66     0A 02 00 00 
08f6a     00 00 00 00 
08f6e     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
08f72     4A 06 00 00 
08f76     0A 02 00 00 
08f7a     00 00 00 00 
08f7e     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08f82     0E 93 00 00 
08f86     0A 02 00 00 
08f8a     00 00 00 00 
08f8e     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08f92     40 00 00 00 
08f96     0A 02 00 00 
08f9a     00 00 00 00 
08f9e     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08fa2     00 00 00 00 
08fa6     0A 02 00 00 
08faa     00 00 00 F0 
08fae     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
08fb2     10 00 00 BE 
08fb6     2A 02 00 00 
08fba     00 00 01 7D 
08fbe     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08fc2     00 00 00 00 
08fc6     0A 02 00 00 
08fca     00 00 00 00 
08fce     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08fd2     10 00 00 00 
08fd6     0A 02 00 00 
08fda     00 00 00 00 
08fde     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08fe2     1C 20 00 00 
08fe6     0A 02 00 00 
08fea     00 00 00 00 
08fee     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08ff2     10 00 00 BE 
08ff6     00 00 00 00 
08ffa     00 00 01 7D 
08ffe     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
09002     1C 30 00 BE 
09006     0E 93 00 00 
0900a     00 00 00 00 
0900e     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09012     10 00 00 D6 
09016     2A 02 00 00 
0901a     00 00 01 AC 
0901e     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
09022     1C 30 00 00 
09026     0A 02 00 00 
0902a     00 00 00 00 
0902e     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09032     10 00 00 00 
09036     0A 02 00 00 
0903a     00 00 00 00 
0903e     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
09042     10 00 00 D6 
09046     2C 20 00 00 
0904a     00 00 00 00 
0904e     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09052     10 00 00 D6 
09056     2A 04 00 00 
0905a     00 00 00 00 
0905e     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
09062     00 00 00 00 
09066     0A 04 00 00 
0906a     00 00 00 00 
0906e     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
09072     10 00 00 F0 
09076     2A 02 00 00 
0907a     00 00 01 E0 
0907e     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
09082     0C 20 00 00 
09086     0A 02 00 00 
0908a     00 00 00 00 
0908e     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09092     0E 93 00 00 
09096     0A 02 00 00 
0909a     00 00 00 00 
0909e     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
090a2     1C 20 00 00 
090a6     0A 02 00 00 
090aa     00 00 00 F0 
090ae     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
090b2     10 00 00 F0 
090b6     2A 02 00 00 
090ba     00 00 00 00 
090be     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090c2     00 00 00 00 
090c6     0A 02 00 00 
090ca     00 00 00 00 
090ce     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
090d2     10 00 00 D6 
090d6     2A 01 00 00 
090da     00 00 01 AC 
090de     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
090e2     0C 20 00 00 
090e6     0A 01 00 00 
090ea     00 00 00 00 
090ee     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
090f2     0E 93 00 00 
090f6     0A 01 00 00 
090fa     00 00 00 00 
090fe     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09102     10 00 00 00 
09106     0A 01 00 00 
0910a     00 00 00 00 
0910e     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09112     10 00 00 00 
09116     0A 01 00 00 
0911a     00 00 01 AC 
0911e     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
09122     1C 20 00 00 
09126     0A 01 00 00 
0912a     00 00 00 00 
0912e     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09132     10 00 00 BE 
09136     2A 01 00 00 
0913a     00 00 01 7D 
0913e     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
09142     00 00 00 00 
09146     0A 01 00 00 
0914a     00 00 00 00 
0914e     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09152     10 00 01 7D 
09156     2A 01 00 00 
0915a     00 00 00 00 
0915e     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09162     00 00 00 D6 
09166     2C 38 00 00 
0916a     00 00 01 AC 
0916e     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
09172     10 00 00 00 
09176     0A 06 00 00 
0917a     00 00 00 00 
0917e     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09182     00 00 00 D6 
09186     0E 93 00 00 
0918a     00 00 00 00 
0918e     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
09192     10 00 00 BE 
09196     2C 30 00 00 
0919a     00 00 01 7D 
0919e     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
091a2     00 00 00 00 
091a6     0A 02 00 00 
091aa     00 00 00 00 
091ae     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091b2     00 00 00 00 
091b6     0A 02 00 00 
091ba     00 00 00 00 
091be     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091c2     00 00 00 00 
091c6     0A 02 00 00 
091ca     00 00 00 00 
091ce     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
091d2     10 00 00 00 
091d6     0A 02 00 00 
091da     00 00 00 00 
091de     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
091e2     1D 00 00 00 
091e6     0A 02 00 00 
091ea     00 00 00 00 
091ee     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091f2     00 00 00 00 
      ...             
092da     00 00 00 00 
092de     00 00 00    | 	byte	$00[239]
092e1     7F 1F 05 00 
092e5     BE 2A 02 00 
092e9     00 00 00 01 
092ed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
092f1     00 00 00 00 
092f5     00          | 	byte	$00[5]
092f6     0A 02 00 00 
092fa     00 00 00 00 
092fe     00 00 00 A0 
09302     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09306     0A 02 00 00 
0930a     00 00 00 00 
0930e     00 00 00 7F 
09312     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09316     0A 02 00 00 
0931a     00 00 00 00 
0931e     00 00 00 BE 
09322     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09326     0A 02 00 00 
0932a     00 00 00 00 
0932e     0A 02 00 00 
09332     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09336     0A 02 00 00 
0933a     00 00 00 00 
0933e     0A 02 00 F0 
09342     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09346     2A 02 00 00 
0934a     00 00 01 E0 
0934e     10 00 00 00 
09352     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09356     0A 02 00 00 
0935a     00 00 00 00 
0935e     00 00 00 D6 
09362     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09366     0A 02 00 00 
0936a     00 00 00 00 
0936e     00 00 00 F0 
09372     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09376     0A 02 00 00 
0937a     00 00 00 00 
0937e     00 00 00 F0 
09382     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09386     0A 02 00 00 
0938a     00 00 00 00 
0938e     0A 02 00 00 
09392     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09396     0A 02 00 00 
0939a     00 00 00 F0 
0939e     1A 02 00 7F 
093a2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
093a6     2A 02 00 00 
093aa     00 00 01 7D 
093ae     10 00 00 00 
093b2     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
093b6     0A 02 00 00 
093ba     00 00 00 00 
093be     00 00 00 A0 
093c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
093c6     0A 02 00 00 
093ca     00 00 00 00 
093ce     00 00 00 7F 
093d2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
093d6     0A 02 00 00 
093da     00 00 00 00 
093de     00 00 00 BE 
093e2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
093e6     00 00 00 00 
093ea     00 00       | 	byte	$00[6]
093ec     01 7D 10 00 
093f0     00 AA 1C 30 
093f4     00 BE 0E 93 
093f8     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
093fc     00 00 00 00 
09400     00          | 	byte	$00[5]
09401     A0 10 00 00 
09405     D6 2A 02 00 
09409     00 00 00 01 
0940d     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
09411     A0 1C 30 00 
09415     00 0A 02 00 
09419     00 00 00 00 
0941d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09421     AA 10 00 00 
09425     00 0A 02 00 
09429     00 00 00 00 
0942d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09431     BE 10 00 00 
09435     D6 2C 20 00 
09439     00 00 00 00 
0943d     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09441     AA 10 00 00 
09445     D6 2A 04 00 
09449     00 00 00 00 
0944d     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09451     00 00 00 00 
09455     00          | 	byte	$00[5]
09456     0A 04 00 00 
0945a     00 00 00 00 
0945e     0A 02 00 A0 
09462     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09466     2A 02 00 00 
0946a     00 00 01 E0 
0946e     10 00 00 00 
09472     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09476     0A 02 00 00 
0947a     00 00 00 00 
0947e     00 00 00 A0 
09482     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09486     0A 02 00 00 
0948a     00 00 00 00 
0948e     00 00 00 A0 
09492     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09496     0A 02 00 00 
0949a     00 00 00 F0 
0949e     10 00 00 A0 
094a2     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
094a6     2A 02 00 00 
094aa     00 00 00 00 
094ae     00 00 00 00 
094b2     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094b6     0A 02 00 00 
094ba     00 00 00 00 
094be     00 00 00 8F 
094c2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
094c6     2A 01 00 00 
094ca     00 00 01 AC 
094ce     10 00 00 00 
094d2     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
094d6     0A 01 00 00 
094da     00 00 00 00 
094de     00 00 00 8F 
094e2     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
094e6     0A 01 00 00 
094ea     00 00 00 00 
094ee     00 00 00 A0 
094f2     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
094f6     0A 01 00 00 
094fa     00 00 00 00 
094fe     00 00 00 8F 
09502     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09506     0A 01 00 00 
0950a     00 00 01 AC 
0950e     10 00 00 00 
09512     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09516     0A 01 00 00 
0951a     00 00 00 00 
0951e     00 00 00 BE 
09522     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09526     2A 01 00 00 
0952a     00 00 01 7D 
0952e     10 00 00 00 
09532     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09536     0A 01 00 00 
0953a     00 00 00 00 
0953e     00 00 00 A0 
09542     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09546     2A 01 00 00 
0954a     00 00 00 00 
0954e     00 00 00 00 
09552     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09556     2C 38 00 00 
0955a     00 00 01 AC 
0955e     10 00 00 AA 
09562     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
09566     0A 06 00 00 
0956a     00 00 00 00 
0956e     00 00 00 00 
09572     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09576     0E 93 00 00 
0957a     00 00 00 00 
0957e     00 00 00 BE 
09582     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09586     2C 30 01 7D 
0958a     2A 02 01 7D 
0958e     10 00 00 00 
09592     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09596     0A 02 00 00 
0959a     0A 02 00 00 
0959e     00 00 00 00 
095a2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095a6     0A 02 00 00 
095aa     0A 02 00 00 
095ae     00 00 00 BE 
095b2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
095b6     0A 02 00 00 
095ba     0A 02 00 00 
095be     00 00 00 A0 
095c2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
095c6     0A 02 00 00 
095ca     0A 02 00 00 
095ce     00 00 00 8F 
095d2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
095d6     0A 02 00 00 
095da     0A 02 00 00 
095de     0D 00 00 00 
095e2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
095e6     00 00 00 00 
      ...             
096da     00 00 00 00 
096de     00 00 00    | 	byte	$00[251]
096e1     7F 1F 05 00 
096e5     BE 2A 02 00 
096e9     CA 50 00 01 
096ed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
096f1     7F 1C 30 00 
096f5     00 0A 02 00 
096f9     00 00 00 00 
096fd     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09701     A0 10 00 00 
09705     00 0A 02 00 
09709     00 00 00 00 
0970d     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09711     7F 1C 30 00 
09715     00 0A 02 00 
09719     00 00 00 00 
0971d     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09721     BE 10 00 00 
09725     BE 0A 02 00 
09729     00 00 00 00 
0972d     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09731     A0 1C 30 00 
09735     00 0A 02 00 
09739     00 00 00 00 
0973d     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09741     F0 40 00 00 
09745     F0 2A 02 00 
09749     FE 60 00 01 
0974d     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
09751     00 00 00 00 
09755     00          | 	byte	$00[5]
09756     0A 02 00 00 
0975a     00 00 00 00 
0975e     00 00 00 D6 
09762     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09766     0A 02 00 00 
0976a     00 00 00 00 
0976e     00 00 00 D6 
09772     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
09776     0A 02 00 00 
0977a     00 00 00 00 
0977e     00 00 00 F0 
09782     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09786     0A 02 00 00 
0978a     00 00 00 00 
0978e     0A 02 00 00 
09792     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09796     0A 02 00 00 
0979a     00 00 00 F0 
0979e     1A 02 00 7F 
097a2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
097a6     2A 02 00 CA 
097aa     50 00 01 7D 
097ae     10 00 00 00 
097b2     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
097b6     0A 02 00 00 
097ba     00 00 00 00 
097be     00 00 00 A0 
097c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
097c6     0A 02 00 00 
097ca     00 00 00 00 
097ce     00 00 00 7F 
097d2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
097d6     0A 02 00 00 
097da     00 00 00 00 
097de     00 00 00 BE 
097e2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
097e6     00 00 00 00 
097ea     00 00       | 	byte	$00[6]
097ec     01 7D 10 00 
097f0     00 AA 1C 30 
097f4     00 BE 0E 93 
097f8     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
097fc     00 00 00 00 
09800     00          | 	byte	$00[5]
09801     A0 10 00 00 
09805     D6 2A 02 00 
09809     E2 60 00 01 
0980d     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09811     A0 1C 30 00 
09815     00 0A 02 00 
09819     00 00 00 00 
0981d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09821     AA 10 00 00 
09825     00 0A 02 00 
09829     00 00 00 00 
0982d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09831     BE 10 00 00 
09835     D6 2C 20 00 
09839     00 00 00 00 
0983d     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09841     AA 10 00 00 
09845     D6 2A 04 00 
09849     00 00 00 00 
0984d     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09851     00 00 00 00 
09855     00          | 	byte	$00[5]
09856     0A 04 00 00 
0985a     00 00 00 00 
0985e     0A 02 00 A0 
09862     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09866     2A 02 00 FE 
0986a     60 00 01 E0 
0986e     10 00 00 00 
09872     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09876     0A 02 00 00 
0987a     00 00 00 00 
0987e     00 00 00 A0 
09882     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09886     0A 02 00 00 
0988a     00 00 00 00 
0988e     00 00 00 A0 
09892     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09896     0A 02 00 00 
0989a     00 00 00 F0 
0989e     10 00 00 A0 
098a2     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
098a6     2A 02 00 00 
098aa     00 00 00 00 
098ae     00 00 00 00 
098b2     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098b6     0A 02 00 00 
098ba     00 00 00 00 
098be     00 00 00 AA 
098c2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
098c6     2A 01 00 E2 
098ca     60 00 01 AC 
098ce     10 00 00 00 
098d2     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
098d6     0A 01 00 00 
098da     00 00 00 00 
098de     00 00 00 AA 
098e2     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
098e6     0A 01 00 00 
098ea     00 00 00 00 
098ee     00 00 00 BE 
098f2     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
098f6     0A 01 00 00 
098fa     00 00 00 00 
098fe     00 00 00 AA 
09902     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
09906     0A 01 00 00 
0990a     00 00 01 AC 
0990e     10 00 00 00 
09912     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09916     0A 01 00 00 
0991a     00 00 00 00 
0991e     00 00 00 BE 
09922     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09926     2A 01 00 CA 
0992a     50 00 01 7D 
0992e     10 00 00 00 
09932     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09936     0A 01 00 00 
0993a     00 00 00 00 
0993e     00 00 00 A0 
09942     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09946     2A 01 00 00 
0994a     00 00 00 00 
0994e     00 00 00 00 
09952     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09956     2C 38 00 00 
0995a     00 00 01 AC 
0995e     10 00 00 AA 
09962     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
09966     0A 06 00 00 
0996a     00 00 00 00 
0996e     00 00 00 AA 
09972     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
09976     0E 93 00 00 
0997a     00 00 00 00 
0997e     00 00 00 BE 
09982     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09986     2C 30 00 00 
0998a     00 00 01 7D 
0998e     10 00 00 00 
09992     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09996     0A 02 00 00 
0999a     00 00 00 00 
0999e     00 00 00 00 
099a2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099a6     0A 02 00 00 
099aa     00 00 00 00 
099ae     00 00 00 00 
099b2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099b6     0A 02 00 00 
099ba     00 00 00 00 
099be     00 00 00 00 
099c2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099c6     0A 02 00 00 
099ca     00 00 00 00 
099ce     00 00 00 00 
099d2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099d6     0A 02 00 00 
099da     00 00 00 00 
099de     0D 00 00 00 
099e2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
099e6     00 00 00 00 
      ...             
09ada     00 00 00 00 
09ade     00 00 00    | 	byte	$00[251]
09ae1     7F 1F 05 00 
09ae5     BE 2A 02 00 
09ae9     CA 5C 10 01 
09aed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
09af1     00 00 00 00 
09af5     00          | 	byte	$00[5]
09af6     0A 02 00 00 
09afa     0A 10 00 00 
09afe     00 00 00 A0 
09b02     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09b06     0A 02 00 00 
09b0a     0A 10 00 00 
09b0e     00 00 00 7F 
09b12     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09b16     0A 02 00 00 
09b1a     0A 10 00 00 
09b1e     00 00 00 BE 
09b22     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09b26     0A 02 00 00 
09b2a     0A 10 00 00 
09b2e     0A 02 00 00 
09b32     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09b36     0A 02 00 00 
09b3a     0A 10 00 00 
09b3e     0A 02 00 F0 
09b42     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09b46     2A 02 00 FE 
09b4a     6C 20 01 E0 
09b4e     10 00 00 00 
09b52     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09b56     0A 02 00 00 
09b5a     0A 10 00 00 
09b5e     00 00 00 D6 
09b62     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09b66     0A 02 00 00 
09b6a     0A 10 00 00 
09b6e     00 00 00 F0 
09b72     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09b76     0A 02 00 00 
09b7a     0A 10 00 00 
09b7e     00 00 00 F0 
09b82     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09b86     0A 02 00 00 
09b8a     0A 10 00 00 
09b8e     0A 02 00 00 
09b92     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09b96     0A 02 00 00 
09b9a     0A 10 00 F0 
09b9e     1A 02 00 7F 
09ba2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
09ba6     2A 02 00 CA 
09baa     50 00 01 7D 
09bae     10 00 00 00 
09bb2     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09bb6     0A 02 00 00 
09bba     00 00 00 00 
09bbe     00 00 00 A0 
09bc2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09bc6     0A 02 00 00 
09bca     00 00 00 00 
09bce     00 00 00 7F 
09bd2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09bd6     0A 02 00 00 
09bda     00 00 00 00 
09bde     00 00 00 BE 
09be2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09be6     00 00 00 00 
09bea     00 00       | 	byte	$00[6]
09bec     01 7D 10 00 
09bf0     00 AA 1C 30 
09bf4     00 BE 0E 93 
09bf8     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09bfc     00 00 00 00 
09c00     00          | 	byte	$00[5]
09c01     A0 10 00 00 
09c05     D6 2A 02 00 
09c09     E2 60 00 01 
09c0d     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09c11     A0 1C 30 00 
09c15     00 0A 02 00 
09c19     00 00 00 00 
09c1d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c21     AA 10 00 00 
09c25     00 0A 02 00 
09c29     00 00 00 00 
09c2d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c31     BE 10 00 00 
09c35     D6 2C 20 00 
09c39     00 00 00 00 
09c3d     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c41     AA 10 00 00 
09c45     D6 2A 04 00 
09c49     00 00 00 00 
09c4d     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09c51     00 00 00 00 
09c55     00          | 	byte	$00[5]
09c56     0A 04 00 00 
09c5a     00 00 00 00 
09c5e     0A 02 00 A0 
09c62     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09c66     2A 02 00 FE 
09c6a     60 00 01 E0 
09c6e     10 00 00 00 
09c72     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09c76     0A 02 00 00 
09c7a     00 00 00 00 
09c7e     00 00 00 A0 
09c82     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09c86     0A 02 00 00 
09c8a     00 00 00 00 
09c8e     00 00 00 A0 
09c92     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09c96     0A 02 00 00 
09c9a     00 00 00 F0 
09c9e     10 00 00 A0 
09ca2     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
09ca6     2A 02 00 00 
09caa     00 00 00 00 
09cae     00 00 00 00 
09cb2     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cb6     0A 02 00 00 
09cba     00 00 00 00 
09cbe     00 00 00 8F 
09cc2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
09cc6     2A 01 00 E2 
09cca     60 00 01 AC 
09cce     10 00 00 00 
09cd2     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
09cd6     0A 01 00 00 
09cda     00 00 00 00 
09cde     00 00 00 8F 
09ce2     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
09ce6     0A 01 00 00 
09cea     00 00 00 00 
09cee     00 00 00 A0 
09cf2     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09cf6     0A 01 00 00 
09cfa     00 00 00 00 
09cfe     00 00 00 8F 
09d02     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09d06     0A 01 00 00 
09d0a     00 00 01 AC 
09d0e     10 00 00 00 
09d12     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09d16     0A 01 00 00 
09d1a     00 00 00 00 
09d1e     00 00 00 BE 
09d22     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09d26     2A 01 00 CA 
09d2a     50 00 01 7D 
09d2e     10 00 00 00 
09d32     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09d36     0A 01 00 00 
09d3a     00 00 00 00 
09d3e     00 00 00 A0 
09d42     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09d46     2A 01 00 00 
09d4a     00 00 00 00 
09d4e     00 00 00 00 
09d52     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09d56     2C 38 00 00 
09d5a     00 00 01 AC 
09d5e     10 00 00 8F 
09d62     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
09d66     0A 06 00 00 
09d6a     00 00 00 00 
09d6e     00 00 00 00 
09d72     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09d76     0E 93 00 00 
09d7a     00 00 00 00 
09d7e     00 00 00 7F 
09d82     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
09d86     2C 30 00 00 
09d8a     00 00 01 7D 
09d8e     10 00 00 00 
09d92     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09d96     0A 02 00 00 
09d9a     00 00 00 00 
09d9e     00 00 00 00 
09da2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09da6     0A 02 00 00 
09daa     00 00 00 00 
09dae     00 00 00 00 
09db2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09db6     0A 02 00 00 
09dba     00 00 00 00 
09dbe     00 00 00 A0 
09dc2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09dc6     0A 02 00 00 
09dca     00 00 00 00 
09dce     00 00 00 8F 
09dd2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
09dd6     0A 02 00 00 
09dda     00 00 00 00 
09dde     0D 00 00 00 
09de2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
09de6     00 00 00 00 
      ...             
09eda     00 00 00 00 
09ede     00 00 00    | 	byte	$00[251]
09ee1     7F 1F 05 00 
09ee5     BE 2A 02 00 
09ee9     CA 50 00 01 
09eed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
09ef1     00 0A 06 00 
09ef5     00 0A 02 00 
09ef9     00 00 00 00 
09efd     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f01     7F 0E 93 00 
09f05     00 0A 02 00 
09f09     00 00 00 00 
09f0d     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f11     8F 1C 30 00 
09f15     00 0A 02 00 
09f19     00 00 00 00 
09f1d     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f21     BE 10 00 00 
09f25     BE 2A 02 00 
09f29     00 00 00 00 
09f2d     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f31     00 00 00 00 
09f35     00          | 	byte	$00[5]
09f36     0A 02 00 00 
09f3a     00 00 00 00 
09f3e     00 00 00 7F 
09f42     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
09f46     0A 02 00 00 
09f4a     00 00 01 40 
09f4e     10 00 00 00 
09f52     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
09f56     0A 02 00 00 
09f5a     00 00 00 00 
09f5e     00 00 00 F0 
09f62     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
09f66     2A 02 00 00 
09f6a     00 00 00 00 
09f6e     00 00 00 F0 
09f72     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
09f76     2C 20 00 00 
09f7a     00 00 01 40 
09f7e     1A 08 00 FE 
09f82     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
09f86     2A 02 00 00 
09f8a     00 00 01 40 
09f8e     10 00 00 FE 
09f92     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
09f96     0A 02 00 00 
09f9a     00 00 01 1D 
09f9e     1C 20 00 8F 
09fa2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
09fa6     2A 02 00 E2 
09faa     60 00 01 1D 
09fae     10 00 00 8F 
09fb2     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
09fb6     0A 02 00 00 
09fba     00 00 00 00 
09fbe     0A 06 00 A0 
09fc2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
09fc6     0A 02 00 00 
09fca     00 00 01 1D 
09fce     0E 93 00 8F 
09fd2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
09fd6     0A 02 00 00 
09fda     00 00 01 1D 
09fde     10 00 00 AA 
09fe2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
09fe6     2A 08 00 00 
09fea     00 00 01 40 
09fee     1A 08 00 A0 
09ff2     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
09ff6     2C 30 00 00 
09ffa     00 00 00 00 
09ffe     0A 08 00 BE 
0a002     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0a006     2A 02 00 CA 
0a00a     50 00 01 7D 
0a00e     10 00 00 BE 
0a012     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0a016     0A 02 00 00 
0a01a     00 00 00 00 
0a01e     00 00 00 A0 
0a022     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0a026     0A 02 00 00 
0a02a     00 00 00 00 
0a02e     00 00 00 A0 
0a032     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a036     0A 02 00 00 
0a03a     00 00 00 00 
0a03e     00 00 00 8F 
0a042     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a046     0A 02 00 00 
0a04a     00 00 00 00 
0a04e     00 00 00 A0 
0a052     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a056     0A 02 00 00 
0a05a     00 00 00 00 
0a05e     00 00 00 7F 
0a062     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a066     2A 02 00 00 
0a06a     00 00 01 7D 
0a06e     10 00 00 7F 
0a072     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
0a076     0A 02 00 00 
0a07a     00 00 00 00 
0a07e     00 00 00 8F 
0a082     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a086     0A 02 00 00 
0a08a     00 00 00 00 
0a08e     00 00 00 8F 
0a092     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a096     0A 02 00 00 
0a09a     00 00 00 00 
0a09e     00 00 00 A0 
0a0a2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a0a6     2A 02 00 00 
0a0aa     00 00 00 00 
0a0ae     00 00 00 A0 
0a0b2     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a0b6     0A 02 00 00 
0a0ba     00 00 00 00 
0a0be     00 00 00 F0 
0a0c2     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
0a0c6     2A 02 00 FE 
0a0ca     60 00 01 E0 
0a0ce     10 00 00 F0 
0a0d2     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0a0d6     0A 02 00 00 
0a0da     00 00 00 00 
0a0de     00 00 00 7F 
0a0e2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a0e6     0A 02 00 00 
0a0ea     00 00 00 00 
0a0ee     00 00 00 7F 
0a0f2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0a0f6     0A 02 00 00 
0a0fa     00 00 00 00 
0a0fe     00 00 00 8F 
0a102     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
0a106     2A 02 00 00 
0a10a     00 00 00 00 
0a10e     00 00 00 7F 
0a112     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0a116     0A 02 00 00 
0a11a     00 00 00 00 
0a11e     00 00 00 7F 
0a122     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
0a126     2A 02 00 CA 
0a12a     50 00 01 7D 
0a12e     10 00 00 00 
0a132     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
0a136     0A 02 00 00 
0a13a     00 00 00 00 
0a13e     00 00 00 00 
0a142     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
0a146     0A 02 00 00 
0a14a     00 00 01 40 
0a14e     10 00 00 00 
0a152     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
0a156     0A 02 00 00 
0a15a     00 00 00 00 
0a15e     00 00 00 00 
0a162     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a166     0A 02 00 00 
0a16a     00 00 01 53 
0a16e     19 02 00 00 
0a172     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
0a176     0A 02 00 00 
0a17a     00 00 00 00 
0a17e     00 00 00 7F 
0a182     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a186     2A 02 00 00 
0a18a     00 00 01 7D 
0a18e     10 00 00 00 
0a192     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a196     0A 02 00 00 
0a19a     00 00 00 00 
0a19e     00 00 00 A0 
0a1a2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a1a6     0A 02 00 00 
0a1aa     00 00 00 00 
0a1ae     00 00 00 A0 
0a1b2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a1b6     0A 02 00 00 
0a1ba     00 00 00 00 
0a1be     00 00 00 8F 
0a1c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a1c6     0A 02 00 00 
0a1ca     00 00 00 00 
0a1ce     00 00 00 A0 
0a1d2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a1d6     0A 02 00 00 
0a1da     00 00 00 00 
0a1de     0D 00 00 00 
0a1e2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a1e6     00 00 00 00 
      ...             
0a2da     00 00 00 00 
0a2de     00 00 00    | 	byte	$00[251]
0a2e1     7F 1F 05 00 
0a2e5     BE 2A 02 00 
0a2e9     CA 50 00 01 
0a2ed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a2f1     00 0A 06 00 
0a2f5     00 0A 02 00 
0a2f9     00 00 00 00 
0a2fd     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a301     7F 0E 93 00 
0a305     00 0A 02 00 
0a309     00 00 00 00 
0a30d     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a311     8F 1C 30 00 
0a315     00 0A 02 00 
0a319     00 00 00 00 
0a31d     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a321     BE 10 00 00 
0a325     BE 2A 02 00 
0a329     00 00 00 00 
0a32d     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a331     00 00 00 00 
0a335     00          | 	byte	$00[5]
0a336     0A 02 00 00 
0a33a     00 00 00 00 
0a33e     00 00 00 7F 
0a342     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a346     0A 02 00 00 
0a34a     00 00 01 40 
0a34e     10 00 00 00 
0a352     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0a356     0A 02 00 00 
0a35a     00 00 00 00 
0a35e     00 00 00 F0 
0a362     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
0a366     2A 02 00 00 
0a36a     00 00 00 00 
0a36e     00 00 00 F0 
0a372     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
0a376     2C 20 00 00 
0a37a     00 00 01 40 
0a37e     1A 08 00 FE 
0a382     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
0a386     2A 02 00 00 
0a38a     00 00 01 40 
0a38e     10 00 00 FE 
0a392     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0a396     0A 02 00 00 
0a39a     00 00 01 1D 
0a39e     1C 20 00 8F 
0a3a2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
0a3a6     2A 02 00 E2 
0a3aa     60 00 01 1D 
0a3ae     10 00 00 8F 
0a3b2     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0a3b6     0A 02 00 00 
0a3ba     00 00 00 00 
0a3be     0A 06 00 A0 
0a3c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0a3c6     0A 02 00 00 
0a3ca     00 00 01 1D 
0a3ce     0E 93 00 8F 
0a3d2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
0a3d6     0A 02 00 00 
0a3da     00 00 01 1D 
0a3de     10 00 00 AA 
0a3e2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
0a3e6     2A 08 00 00 
0a3ea     00 00 01 40 
0a3ee     1A 08 00 A0 
0a3f2     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0a3f6     2C 30 00 00 
0a3fa     00 00 00 00 
0a3fe     0A 08 00 BE 
0a402     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0a406     2A 02 00 CA 
0a40a     50 00 01 7D 
0a40e     10 00 00 BE 
0a412     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0a416     0A 02 00 00 
0a41a     00 00 00 00 
0a41e     00 00 00 7F 
0a422     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
0a426     0A 02 00 00 
0a42a     00 00 00 00 
0a42e     00 00 00 7F 
0a432     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a436     0A 02 00 00 
0a43a     00 00 00 00 
0a43e     00 00 00 8F 
0a442     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a446     0A 02 00 00 
0a44a     00 00 00 00 
0a44e     00 00 00 7F 
0a452     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a456     0A 02 00 00 
0a45a     00 00 00 00 
0a45e     00 00 00 A0 
0a462     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a466     2A 02 00 00 
0a46a     00 00 01 7D 
0a46e     10 00 00 A0 
0a472     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0a476     0A 02 00 00 
0a47a     00 00 00 00 
0a47e     00 00 00 AA 
0a482     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0a486     0A 02 00 00 
0a48a     00 00 00 00 
0a48e     00 00 00 AA 
0a492     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
0a496     0A 02 00 00 
0a49a     00 00 00 00 
0a49e     00 00 00 BE 
0a4a2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a4a6     2A 02 00 00 
0a4aa     00 00 00 00 
0a4ae     00 00 00 BE 
0a4b2     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
0a4b6     0A 02 00 00 
0a4ba     00 00 00 00 
0a4be     00 00 00 D6 
0a4c2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
0a4c6     2A 02 00 E2 
0a4ca     60 00 01 AC 
0a4ce     10 00 00 D6 
0a4d2     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
0a4d6     0A 02 00 00 
0a4da     00 00 00 00 
0a4de     00 00 00 FE 
0a4e2     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
0a4e6     0A 02 00 00 
0a4ea     00 00 00 00 
0a4ee     00 00 00 FE 
0a4f2     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
0a4f6     0A 02 00 00 
0a4fa     00 00 00 00 
0a4fe     00 00 00 A0 
0a502     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
0a506     2A 02 00 00 
0a50a     00 00 01 AC 
0a50e     1C 30 00 A0 
0a512     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
0a516     0A 02 00 00 
0a51a     00 00 00 00 
0a51e     00 00 00 BE 
0a522     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a526     2A 02 00 CA 
0a52a     50 00 01 7D 
0a52e     10 00 00 00 
0a532     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a536     0A 02 00 00 
0a53a     00 00 00 00 
0a53e     00 00 00 00 
0a542     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a546     0A 02 00 00 
0a54a     00 00 00 00 
0a54e     00 00 00 00 
0a552     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a556     0A 02 00 00 
0a55a     00 00 00 00 
0a55e     00 00 00 BE 
0a562     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
0a566     0A 02 00 00 
0a56a     00 00 01 AC 
0a56e     19 02 00 00 
0a572     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
0a576     0A 02 00 00 
0a57a     00 00 00 00 
0a57e     00 00 00 00 
0a582     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
0a586     2A 02 00 00 
0a58a     00 00 01 7D 
0a58e     10 00 00 00 
0a592     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
0a596     0A 02 00 00 
0a59a     00 00 00 00 
0a59e     00 00 00 00 
0a5a2     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a5a6     0A 02 00 00 
0a5aa     00 00 00 00 
0a5ae     00 00 00 00 
0a5b2     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a5b6     0A 02 00 00 
0a5ba     00 00 00 00 
0a5be     00 00 00 A0 
0a5c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a5c6     0A 02 00 00 
0a5ca     00 00 00 00 
0a5ce     00 00 00 8F 
0a5d2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a5d6     0A 02 00 00 
0a5da     00 00 00 00 
0a5de     0D 00 00 00 
0a5e2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a5e6     00 00 00 00 
      ...             
0a6da     00 00 00 00 
0a6de     00 00 00    | 	byte	$00[251]
0a6e1     7F 1F 05 00 
0a6e5     BE 2A 02 00 
0a6e9     CA 50 00 01 
0a6ed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a6f1     00 00 00 00 
0a6f5     00          | 	byte	$00[5]
0a6f6     0A 02 00 00 
0a6fa     00 00 00 00 
0a6fe     00 00 00 A0 
0a702     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a706     0A 02 00 00 
0a70a     00 00 00 00 
0a70e     00 00 00 7F 
0a712     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a716     0A 02 00 00 
0a71a     00 00 00 00 
0a71e     00 00 00 BE 
0a722     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a726     0A 02 00 00 
0a72a     00 00 00 00 
0a72e     0A 02 00 00 
0a732     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a736     0A 02 00 00 
0a73a     00 00 00 00 
0a73e     0A 02 00 F0 
0a742     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0a746     2A 02 00 FE 
0a74a     60 00 01 E0 
0a74e     10 00 00 00 
0a752     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0a756     0A 02 00 00 
0a75a     00 00 00 00 
0a75e     00 00 00 D6 
0a762     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0a766     0A 02 00 00 
0a76a     00 00 00 00 
0a76e     00 00 00 F0 
0a772     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0a776     0A 02 00 00 
0a77a     00 00 00 00 
0a77e     00 00 00 F0 
0a782     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0a786     0A 02 00 00 
0a78a     00 00 00 00 
0a78e     0A 02 00 00 
0a792     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a796     0A 02 00 00 
0a79a     00 00 00 F0 
0a79e     1A 02 00 7F 
0a7a2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0a7a6     2A 02 00 CA 
0a7aa     50 00 01 7D 
0a7ae     10 00 00 00 
0a7b2     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a7b6     0A 02 00 00 
0a7ba     00 00 00 00 
0a7be     00 00 00 A0 
0a7c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a7c6     0A 02 00 00 
0a7ca     00 00 00 00 
0a7ce     00 00 00 7F 
0a7d2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a7d6     0A 02 00 00 
0a7da     00 00 00 00 
0a7de     00 00 00 BE 
0a7e2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a7e6     00 00 00 00 
0a7ea     00 00       | 	byte	$00[6]
0a7ec     01 7D 10 00 
0a7f0     00 AA 1C 30 
0a7f4     00 BE 0E 93 
0a7f8     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0a7fc     00 00 00 00 
0a800     00          | 	byte	$00[5]
0a801     A0 10 00 00 
0a805     D6 2A 02 00 
0a809     E2 60 00 01 
0a80d     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0a811     A0 1C 30 00 
0a815     00 0A 02 00 
0a819     00 00 00 00 
0a81d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a821     AA 10 00 00 
0a825     00 0A 02 00 
0a829     00 00 00 00 
0a82d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a831     BE 10 00 00 
0a835     D6 2C 20 00 
0a839     00 00 00 00 
0a83d     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a841     AA 10 00 00 
0a845     D6 2A 04 00 
0a849     00 00 00 00 
0a84d     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a851     00 00 00 00 
0a855     00          | 	byte	$00[5]
0a856     0A 04 00 00 
0a85a     00 00 00 00 
0a85e     0A 02 00 A0 
0a862     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0a866     2A 02 00 FE 
0a86a     60 00 01 E0 
0a86e     10 00 00 00 
0a872     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0a876     0A 02 00 00 
0a87a     00 00 00 00 
0a87e     00 00 00 A0 
0a882     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0a886     0A 02 00 00 
0a88a     00 00 00 00 
0a88e     00 00 00 A0 
0a892     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a896     0A 02 00 00 
0a89a     00 00 00 F0 
0a89e     10 00 00 A0 
0a8a2     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0a8a6     2A 02 00 00 
0a8aa     00 00 00 00 
0a8ae     00 00 00 00 
0a8b2     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8b6     0A 02 00 00 
0a8ba     00 00 00 00 
0a8be     00 00 00 8F 
0a8c2     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0a8c6     2A 01 00 E2 
0a8ca     60 00 01 AC 
0a8ce     10 00 00 00 
0a8d2     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0a8d6     0A 01 00 00 
0a8da     00 00 00 00 
0a8de     00 00 00 8F 
0a8e2     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0a8e6     0A 01 00 00 
0a8ea     00 00 00 00 
0a8ee     00 00 00 A0 
0a8f2     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a8f6     0A 01 00 00 
0a8fa     00 00 00 00 
0a8fe     00 00 00 8F 
0a902     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a906     0A 01 00 00 
0a90a     00 00 01 AC 
0a90e     10 00 00 00 
0a912     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0a916     0A 01 00 00 
0a91a     00 00 00 00 
0a91e     00 00 00 BE 
0a922     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a926     2A 01 00 CA 
0a92a     50 00 01 7D 
0a92e     10 00 00 00 
0a932     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a936     0A 01 00 00 
0a93a     00 00 00 00 
0a93e     00 00 00 A0 
0a942     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0a946     2A 01 00 00 
0a94a     00 00 00 00 
0a94e     00 00 00 00 
0a952     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a956     2C 38 00 00 
0a95a     00 00 01 AC 
0a95e     10 00 00 8F 
0a962     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
0a966     0A 06 00 00 
0a96a     00 00 00 00 
0a96e     00 00 00 00 
0a972     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a976     0E 93 00 00 
0a97a     00 00 00 00 
0a97e     00 00 00 7F 
0a982     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a986     2C 30 00 00 
0a98a     00 00 01 7D 
0a98e     10 00 00 00 
0a992     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a996     0A 02 00 00 
0a99a     00 00 00 00 
0a99e     00 00 00 00 
0a9a2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9a6     0A 02 00 00 
0a9aa     00 00 00 00 
0a9ae     00 00 00 00 
0a9b2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9b6     0A 02 00 00 
0a9ba     00 00 00 00 
0a9be     00 00 00 A0 
0a9c2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a9c6     0A 02 00 00 
0a9ca     00 00 00 00 
0a9ce     00 00 00 8F 
0a9d2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a9d6     0A 02 00 00 
0a9da     00 00 00 00 
0a9de     0D 00 00 00 
0a9e2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a9e6     00 00 00 00 
      ...             
0aada     00 00 00 00 
0aade     00 00 00    | 	byte	$00[251]
0aae1     7F 1F 05 01 
0aae5     1D 71 08 00 
0aae9     CA 50 00 01 
0aaed     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0aaf1     00 0A 06 01 
0aaf5     0D 73 F0 00 
0aaf9     00 00 00 00 
0aafd     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab01     7F 0E 93 00 
0ab05     00 04 A1 00 
0ab09     00 00 00 00 
0ab0d     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab11     8F 1C 30 00 
0ab15     00 04 A1 00 
0ab19     00 00 00 00 
0ab1d     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab21     BE 10 00 00 
0ab25     00 04 B2 00 
0ab29     00 00 00 00 
0ab2d     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab31     00 00 00 00 
0ab35     00          | 	byte	$00[5]
0ab36     04 B2 00 00 
0ab3a     00 00 00 00 
0ab3e     00 00 00 7F 
0ab42     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0ab46     04 C2 00 00 
0ab4a     00 00 01 40 
0ab4e     10 00 00 00 
0ab52     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0ab56     04 C2 00 00 
0ab5a     00 00 00 00 
0ab5e     00 00 00 F0 
0ab62     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
0ab66     70 00 00 00 
0ab6a     00 00 00 00 
0ab6e     00 00 00 F0 
0ab72     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
0ab76     0C 18 00 00 
0ab7a     00 00 01 40 
0ab7e     1A 08 00 FE 
0ab82     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
0ab86     70 00 00 00 
0ab8a     00 00 01 40 
0ab8e     10 00 00 FE 
0ab92     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0ab96     0C 18 00 00 
0ab9a     00 00 01 1D 
0ab9e     1C 20 00 8F 
0aba2     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
0aba6     71 08 00 E2 
0abaa     60 00 01 1D 
0abae     10 00 00 8F 
0abb2     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
0abb6     73 F0 00 00 
0abba     00 00 00 00 
0abbe     0A 06 00 A0 
0abc2     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0abc6     04 C2 00 00 
0abca     00 00 01 1D 
0abce     0E 93 00 8F 
0abd2     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
0abd6     74 C4 00 00 
0abda     00 00 01 1D 
0abde     10 00 00 AA 
0abe2     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
0abe6     73 F0 00 00 
0abea     00 00 01 40 
0abee     1A 08 00 A0 
0abf2     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
0abf6     7C 18 00 00 
0abfa     00 00 00 00 
0abfe     0A 08 00 BE 
0ac02     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0ac06     71 04 00 CA 
0ac0a     50 00 01 7D 
0ac0e     10 00 00 BE 
0ac12     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0ac16     73 F0 00 00 
0ac1a     00 00 00 00 
0ac1e     00 00 00 A0 
0ac22     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
0ac26     74 C1 00 00 
0ac2a     00 00 00 00 
0ac2e     00 00 00 A0 
0ac32     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0ac36     04 C1 00 00 
0ac3a     00 00 00 00 
0ac3e     00 00 00 8F 
0ac42     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
0ac46     71 04 00 00 
0ac4a     00 00 00 00 
0ac4e     00 00 00 A0 
0ac52     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
0ac56     73 F0 00 00 
0ac5a     00 00 00 00 
0ac5e     00 00 00 7F 
0ac62     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0ac66     71 02 00 00 
0ac6a     00 00 01 7D 
0ac6e     10 00 00 7F 
0ac72     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
0ac76     73 F0 00 00 
0ac7a     00 00 00 00 
0ac7e     00 00 00 8F 
0ac82     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0ac86     04 C1 00 00 
0ac8a     00 00 00 00 
0ac8e     00 00 00 8F 
0ac92     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0ac96     04 C1 00 00 
0ac9a     00 00 00 00 
0ac9e     00 00 00 A0 
0aca2     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0aca6     70 00 00 00 
0acaa     00 00 00 00 
0acae     00 00 00 A0 
0acb2     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
0acb6     73 F0 00 00 
0acba     00 00 00 00 
0acbe     00 00 00 F0 
0acc2     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
0acc6     73 F0 00 FE 
0acca     60 00 01 E0 
0acce     10 00 00 F0 
0acd2     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0acd6     04 C1 00 00 
0acda     00 00 00 00 
0acde     00 00 00 7F 
0ace2     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0ace6     73 F0 00 00 
0acea     00 00 00 00 
0acee     00 00 00 7F 
0acf2     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0acf6     04 C1 00 00 
0acfa     00 00 00 00 
0acfe     00 00 00 8F 
0ad02     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
0ad06     73 F0 00 00 
0ad0a     00 00 00 00 
0ad0e     00 00 00 7F 
0ad12     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0ad16     04 C1 00 00 
0ad1a     00 00 00 00 
0ad1e     00 00 00 7F 
0ad22     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
0ad26     71 04 00 CA 
0ad2a     50 00 01 7D 
0ad2e     10 00 00 00 
0ad32     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
0ad36     73 F0 00 00 
0ad3a     00 00 00 00 
0ad3e     00 00 00 00 
0ad42     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
0ad46     73 F0 00 00 
0ad4a     00 00 01 40 
0ad4e     10 00 00 00 
0ad52     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
0ad56     7C 18 00 00 
0ad5a     00 00 00 00 
0ad5e     00 00 00 00 
0ad62     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
0ad66     70 00 00 00 
0ad6a     00 00 01 53 
0ad6e     19 02 00 00 
0ad72     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
0ad76     7C 18 00 00 
0ad7a     00 00 00 00 
0ad7e     00 00 00 7F 
0ad82     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0ad86     71 04 00 00 
0ad8a     00 00 01 7D 
0ad8e     10 00 00 00 
0ad92     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0ad96     73 F0 00 00 
0ad9a     00 00 00 00 
0ad9e     00 00 00 A0 
0ada2     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0ada6     04 C2 00 00 
0adaa     00 00 00 00 
0adae     00 00 00 A0 
0adb2     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0adb6     06 01 00 00 
0adba     00 00 00 00 
0adbe     00 00 00 8F 
0adc2     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0adc6     06 01 00 00 
0adca     00 00 00 00 
0adce     00 00 00 A0 
0add2     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0add6     06 01 00 00 
0adda     00 00 00 00 
0adde     0D 00 00 00 
0ade2     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0ade6     00 00 00 00 
      ...             
0aeda     00 00 00 00 
0aede     00 00 00    | 	byte	$00[251]
0aee1     7F 1F 05 00 
0aee5     B4 71 03 00 
0aee9     CA 50 00 01 
0aeed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0aef1     00 0A 06 00 
0aef5     AA 73 F0 00 
0aef9     00 00 00 00 
0aefd     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af01     7F 0E 93 00 
0af05     00 04 C2 00 
0af09     00 00 00 00 
0af0d     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af11     8F 1C 30 00 
0af15     00 04 C2 00 
0af19     00 00 00 00 
0af1d     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af21     BE 10 00 00 
0af25     00 04 C2 00 
0af29     00 00 00 00 
0af2d     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af31     00 00 00 00 
0af35     00          | 	byte	$00[5]
0af36     04 C2 00 00 
0af3a     00 00 00 00 
0af3e     00 00 00 7F 
0af42     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
0af46     74 C1 00 00 
0af4a     00 00 01 40 
0af4e     10 00 00 00 
0af52     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0af56     04 C2 00 00 
0af5a     00 00 00 00 
0af5e     00 00 00 F0 
0af62     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0af66     04 C2 00 00 
0af6a     00 00 00 00 
0af6e     00 00 00 F0 
0af72     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
0af76     73 F0 00 00 
0af7a     00 00 01 40 
0af7e     1A 08 00 FE 
0af82     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
0af86     73 F0 00 00 
0af8a     00 00 01 40 
0af8e     10 00 00 FE 
0af92     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
0af96     73 F0 00 00 
0af9a     00 00 01 1D 
0af9e     1C 20 00 8F 
0afa2     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
0afa6     73 F0 00 E2 
0afaa     60 00 01 1D 
0afae     10 00 00 8F 
0afb2     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0afb6     04 C1 00 00 
0afba     00 00 00 00 
0afbe     0A 06 00 A0 
0afc2     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0afc6     02 06 00 00 
0afca     00 00 01 1D 
0afce     0E 93 00 8F 
0afd2     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
0afd6     73 F0 00 00 
0afda     00 00 01 1D 
0afde     10 00 00 AA 
0afe2     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
0afe6     70 00 00 00 
0afea     00 00 01 40 
0afee     1A 08 00 A0 
0aff2     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
0aff6     7C 20 00 00 
0affa     00 00 00 00 
0affe     0A 08 00 BE 
0b002     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0b006     71 06 00 CA 
0b00a     50 00 01 7D 
0b00e     10 00 00 BE 
0b012     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0b016     73 F0 00 00 
0b01a     00 00 00 00 
0b01e     00 00 00 7F 
0b022     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
0b026     70 00 00 00 
0b02a     00 00 00 00 
0b02e     00 00 00 7F 
0b032     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0b036     7C 20 00 00 
0b03a     00 00 00 00 
0b03e     00 00 00 8F 
0b042     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0b046     70 00 00 00 
0b04a     00 00 00 00 
0b04e     00 00 00 7F 
0b052     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
0b056     7C 20 00 00 
0b05a     00 00 00 00 
0b05e     00 00 00 A0 
0b062     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
0b066     70 00 00 00 
0b06a     00 00 01 7D 
0b06e     10 00 00 A0 
0b072     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0b076     00 00 00 00 
0b07a     00 00 00 00 
0b07e     00 00 00    | 	byte	$00[11]
0b081     AA 10 00 00 
0b085     B4 70 00 00 
0b089     00 00 00 00 
0b08d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b091     AA 1C 30 00 
0b095     AA 7C 20 00 
0b099     00 00 00 00 
0b09d     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0a1     BE 10 00 00 
0b0a5     AA 70 00 00 
0b0a9     00 00 00 00 
0b0ad     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0b1     BE 1C 30 00 
0b0b5     B4 7C 20 00 
0b0b9     00 00 00 00 
0b0bd     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0c1     D6 10 00 00 
0b0c5     97 70 00 00 
0b0c9     E2 60 00 01 
0b0cd     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0b0d1     D6 1C 30 00 
0b0d5     AA 7C 20 00 
0b0d9     00 00 00 00 
0b0dd     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0e1     FE 1A 04 00 
0b0e5     AA 70 00 00 
0b0e9     00 00 00 00 
0b0ed     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0f1     FE 0E 93 00 
0b0f5     97 7C 20 00 
0b0f9     00 00 00 00 
0b0fd     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b101     A0 10 00 00 
0b105     B4 70 00 00 
0b109     00 00 00 01 
0b10d     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
0b111     A0 1C 30 00 
0b115     AA 7C 20 00 
0b119     00 00 00 00 
0b11d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b121     BE 10 00 00 
0b125     AA 70 00 00 
0b129     CA 50 00 01 
0b12d     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b131     00 00 00 00 
0b135     B4 73 F0 00 
0b139     00 00 00 00 
0b13d     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b141     00 00 00 00 
0b145     CA 73 F0 00 
0b149     00 00 00 00 
0b14d     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b151     00 00 00 00 
0b155     00 00 00 00 
0b159     00 00 00 00 
0b15d     00 00 00 00 | 	byte	$00[16]
0b161     BE 1A 02 00 
0b165     F0 71 0A 00 
0b169     00 0F 03 01 
0b16d     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
0b171     00 0A 02 00 
0b175     E2 73 F0 00 
0b179     00 0F 02 00 
0b17d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b181     00 0A 02 00 
0b185     00 0C 10 00 
0b189     00 0F 03 00 
0b18d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b191     00 0A 02 00 
0b195     00 00 00 00 
0b199     00 0F 02 00 
0b19d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1a1     00 0A 02 00 
0b1a5     D6 71 0A 00 
0b1a9     00 0F 03 01 
0b1ad     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
0b1b1     00 0A 02 00 
0b1b5     CA 73 F0 00 
0b1b9     00 0F 02 00 
0b1bd     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1c1     00 0A 02 00 
0b1c5     00 04 C2 00 
0b1c9     00 0F 03 00 
0b1cd     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b1d1     00 0A 02 00 
0b1d5     00 06 02 00 
0b1d9     00 0F 02 00 
0b1dd     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1e1     00 0A 02 00 
0b1e5     00 06 02 00 
0b1e9     00 0F 03 00 
0b1ed     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b1f1     00 0A 02 00 
0b1f5     00 06 02 00 
0b1f9     00 0F 02 00 
0b1fd     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b201     00 0A 02 00 
0b205     00 06 02 00 
0b209     00 0F 03 00 
0b20d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b211     00 0A 02 00 
0b215     00 06 02 00 
0b219     00 0F 02 00 
0b21d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b221     A0 10 00 00 
0b225     AA 70 00 00 
0b229     00 0F 03 00 
0b22d     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b231     A0 1C 30 00 
0b235     00 00 00 00 
0b239     00 0F 02 00 
0b23d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b241     8F 10 00 00 
0b245     97 70 00 00 
0b249     00 0F 03 00 
0b24d     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b251     00 00 00 00 
0b255     00 00 00 00 
0b259     00          | 	byte	$00[9]
0b25a     0F 02 00 00 
0b25e     0D 00 00 00 
0b262     00 00 00 00 
0b266     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b26a     00 00 00 00 
      ...             
0b2da     00 00 00 00 
0b2de     00 00 00    | 	byte	$00[119]
0b2e1     7F 1F 05 00 
0b2e5     8F 71 02 00 
0b2e9     CA 50 00 01 
0b2ed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b2f1     00 00 00 00 
0b2f5     87 73 F0 00 
0b2f9     00 00 00 00 
0b2fd     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b301     A0 10 00 00 
0b305     00 04 C1 00 
0b309     00 00 00 00 
0b30d     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b311     7F 1C 20 00 
0b315     00 04 C1 00 
0b319     00 00 00 00 
0b31d     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b321     BE 10 00 00 
0b325     00 04 C1 00 
0b329     00 00 00 00 
0b32d     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b331     00 00 00 00 
0b335     00          | 	byte	$00[5]
0b336     04 C1 00 00 
0b33a     00 00 00 00 
0b33e     0A 02 00 F0 
0b342     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
0b346     70 00 00 FE 
0b34a     60 00 01 E0 
0b34e     10 00 00 00 
0b352     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
0b356     73 F0 00 00 
0b35a     00 00 00 00 
0b35e     00 00 00 D6 
0b362     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
0b366     73 F0 00 00 
0b36a     00 00 00 00 
0b36e     00 00 00 F0 
0b372     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0b376     0C 10 00 00 
0b37a     00 00 00 00 
0b37e     00 00 00 F0 
0b382     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
0b386     73 F0 00 00 
0b38a     00 00 00 00 
0b38e     0A 02 00 00 
0b392     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0b396     0C 10 00 00 
0b39a     00 00 00 F0 
0b39e     1A 02 00 7F 
0b3a2     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b3a6     71 06 00 CA 
0b3aa     50 00 01 7D 
0b3ae     10 00 00 00 
0b3b2     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b3b6     73 F0 00 00 
0b3ba     00 00 00 00 
0b3be     00 00 00 A0 
0b3c2     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b3c6     70 00 00 00 
0b3ca     00 00 00 00 
0b3ce     00 00 00 7F 
0b3d2     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b3d6     7C 20 00 00 
0b3da     00 00 00 00 
0b3de     00 00 00 BE 
0b3e2     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b3e6     70 00 00 00 
0b3ea     00 00 01 7D 
0b3ee     10 00 00 AA 
0b3f2     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b3f6     7C 20 00 00 
0b3fa     00 00 00 00 
0b3fe     00 00 00 A0 
0b402     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b406     70 00 00 E2 
0b40a     60 00 01 AC 
0b40e     10 00 00 A0 
0b412     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b416     0C 10 00 00 
0b41a     00 00 00 00 
0b41e     00 00 00 AA 
0b422     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b426     73 F0 00 00 
0b42a     00 00 00 00 
0b42e     00 00 00 BE 
0b432     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b436     0C 10 00 00 
0b43a     00 00 00 00 
0b43e     00 00 00 AA 
0b442     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b446     70 00 00 00 
0b44a     00 00 00 00 
0b44e     0A 02 00 00 
0b452     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b456     7C 20 00 00 
0b45a     00 00 00 00 
0b45e     0A 02 00 A0 
0b462     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b466     74 C1 00 FE 
0b46a     60 00 01 E0 
0b46e     10 00 00 00 
0b472     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b476     04 C1 00 00 
0b47a     00 00 00 00 
0b47e     00 00 00 A0 
0b482     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b486     04 C2 00 00 
0b48a     00 00 00 00 
0b48e     00 00 00 A0 
0b492     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b496     04 C2 00 00 
0b49a     00 00 00 F0 
0b49e     10 00 00 A0 
0b4a2     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b4a6     73 F0 00 00 
0b4aa     00 00 00 00 
0b4ae     00 00 00 00 
0b4b2     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b4b6     70 00 00 00 
0b4ba     00 00 00 00 
0b4be     00 00 00 8F 
0b4c2     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
0b4c6     71 04 00 E2 
0b4ca     60 00 01 AC 
0b4ce     10 00 00 00 
0b4d2     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b4d6     73 F0 00 00 
0b4da     00 00 00 00 
0b4de     00 00 00 8F 
0b4e2     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0b4e6     73 F0 00 00 
0b4ea     00 00 00 00 
0b4ee     00 00 00 A0 
0b4f2     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
0b4f6     7C 20 00 00 
0b4fa     00 00 00 00 
0b4fe     00 00 00 8F 
0b502     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0b506     70 00 00 00 
0b50a     00 00 01 AC 
0b50e     10 00 00 00 
0b512     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b516     7C 20 00 00 
0b51a     00 00 00 00 
0b51e     00 00 00 BE 
0b522     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b526     70 00 00 CA 
0b52a     50 00 01 7D 
0b52e     10 00 00 00 
0b532     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b536     7C 20 00 00 
0b53a     00 00 00 00 
0b53e     00 00 00 A0 
0b542     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b546     70 00 00 00 
0b54a     00 00 00 00 
0b54e     00 00 00 00 
0b552     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b556     70 00 00 00 
0b55a     00 00 01 AC 
0b55e     10 00 00 8F 
0b562     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
0b566     71 08 00 00 
0b56a     00 00 00 00 
0b56e     00 00 00 00 
0b572     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
0b576     73 F0 00 00 
0b57a     00 00 00 00 
0b57e     00 00 00 00 
0b582     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
0b586     0C 10 00 00 
0b58a     00 00 00 00 
0b58e     00 00 00 7F 
0b592     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0b596     71 06 00 00 
0b59a     00 00 01 7D 
0b59e     10 00 00 00 
0b5a2     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0b5a6     73 F0 00 00 
0b5aa     00 00 00 00 
0b5ae     00 00 00 00 
0b5b2     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b5b6     04 C1 00 00 
0b5ba     00 00 00 00 
0b5be     00 00 00 00 
0b5c2     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b5c6     06 02 00 00 
0b5ca     00 00 00 00 
0b5ce     00 00 00 A0 
0b5d2     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b5d6     06 02 00 00 
0b5da     00 00 00 00 
0b5de     00 00 00 8F 
0b5e2     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0b5e6     06 02 00 00 
0b5ea     00 00 00 00 
0b5ee     0D 00 00 00 
0b5f2     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b5f6     00 00 00 00 
      ...             
0b6da     00 00 00 00 
0b6de     00 00 00    | 	byte	$00[235]
0b6e1     7F 1F 05 00 
0b6e5     8F 71 04 00 
0b6e9     CA 50 00 01 
0b6ed     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b6f1     7F 1C 30 00 
0b6f5     87 73 F0 00 
0b6f9     00 00 00 00 
0b6fd     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b701     A0 10 00 00 
0b705     00 04 C1 00 
0b709     00 00 00 00 
0b70d     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b711     7F 1C 30 00 
0b715     00 04 C1 00 
0b719     00 00 00 00 
0b71d     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b721     BE 10 00 00 
0b725     AA 70 00 00 
0b729     00 00 00 00 
0b72d     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b731     A0 1C 30 00 
0b735     87 7C 20 00 
0b739     00 00 00 00 
0b73d     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b741     F0 40 00 00 
0b745     97 70 00 00 
0b749     FE 60 00 01 
0b74d     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0b751     00 00 00 00 
0b755     AA 73 F0 00 
0b759     00 00 00 00 
0b75d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b761     D6 4A 06 00 
0b765     97 73 F0 00 
0b769     00 00 00 00 
0b76d     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b771     D6 0E 93 00 
0b775     00 0C 10 00 
0b779     00 00 00 00 
0b77d     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b781     F0 40 00 00 
0b785     AA 73 F0 00 
0b789     00 00 00 00 
0b78d     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b791     00 00 00 00 
0b795     00          | 	byte	$00[5]
0b796     0C 10 00 00 
0b79a     00 00 00 F0 
0b79e     1A 02 00 7F 
0b7a2     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b7a6     71 06 00 CA 
0b7aa     50 00 01 7D 
0b7ae     10 00 00 00 
0b7b2     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b7b6     73 F0 00 00 
0b7ba     00 00 00 00 
0b7be     00 00 00 A0 
0b7c2     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b7c6     70 00 00 00 
0b7ca     00 00 00 00 
0b7ce     00 00 00 7F 
0b7d2     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b7d6     7C 20 00 00 
0b7da     00 00 00 00 
0b7de     00 00 00 BE 
0b7e2     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b7e6     70 00 00 00 
0b7ea     00 00 01 7D 
0b7ee     10 00 00 AA 
0b7f2     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b7f6     7C 20 00 00 
0b7fa     00 00 00 00 
0b7fe     00 00 00 A0 
0b802     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b806     70 00 00 E2 
0b80a     60 00 01 AC 
0b80e     10 00 00 A0 
0b812     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b816     0C 10 00 00 
0b81a     00 00 00 00 
0b81e     00 00 00 AA 
0b822     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b826     73 F0 00 00 
0b82a     00 00 00 00 
0b82e     00 00 00 BE 
0b832     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b836     0C 10 00 00 
0b83a     00 00 00 00 
0b83e     00 00 00 AA 
0b842     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b846     70 00 00 00 
0b84a     00 00 00 00 
0b84e     0A 02 00 00 
0b852     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b856     7C 20 00 00 
0b85a     00 00 00 00 
0b85e     0A 02 00 A0 
0b862     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b866     74 C1 00 FE 
0b86a     60 00 01 E0 
0b86e     10 00 00 00 
0b872     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b876     04 C1 00 00 
0b87a     00 00 00 00 
0b87e     00 00 00 A0 
0b882     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b886     04 C2 00 00 
0b88a     00 00 00 00 
0b88e     00 00 00 A0 
0b892     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b896     04 C2 00 00 
0b89a     00 00 00 F0 
0b89e     10 00 00 A0 
0b8a2     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b8a6     73 F0 00 00 
0b8aa     00 00 00 00 
0b8ae     00 00 00 00 
0b8b2     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b8b6     70 00 00 00 
0b8ba     00 00 00 00 
0b8be     00 00 00 AA 
0b8c2     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
0b8c6     71 04 00 E2 
0b8ca     60 00 01 AC 
0b8ce     10 00 00 00 
0b8d2     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b8d6     73 F0 00 00 
0b8da     00 00 00 00 
0b8de     00 00 00 AA 
0b8e2     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
0b8e6     73 F0 00 00 
0b8ea     00 00 00 00 
0b8ee     00 00 00 BE 
0b8f2     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0b8f6     7C 20 00 00 
0b8fa     00 00 00 00 
0b8fe     00 00 00 AA 
0b902     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0b906     70 00 00 00 
0b90a     00 00 01 AC 
0b90e     10 00 00 00 
0b912     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b916     7C 20 00 00 
0b91a     00 00 00 00 
0b91e     00 00 00 BE 
0b922     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b926     70 00 00 CA 
0b92a     50 00 01 7D 
0b92e     10 00 00 00 
0b932     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b936     7C 20 00 00 
0b93a     00 00 00 00 
0b93e     0F 06 00 A0 
0b942     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
0b946     70 00 00 00 
0b94a     00 00 00 00 
0b94e     00 00 00 00 
0b952     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b956     70 00 00 00 
0b95a     00 00 00 00 
0b95e     00 00 00 00 
0b962     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
0b966     74 C2 00 00 
0b96a     00 00 01 AC 
0b96e     10 00 00 AA 
0b972     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0b976     04 C2 00 00 
0b97a     00 00 00 00 
0b97e     0F 07 00 AA 
0b982     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
0b986     0C 10 00 00 
0b98a     00 00 00 00 
0b98e     0F 08 00 BE 
0b992     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
0b996     71 02 00 00 
0b99a     00 00 01 7D 
0b99e     1F 0A 00 00 
0b9a2     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
0b9a6     73 F0 00 00 
0b9aa     00 00 00 00 
0b9ae     04 A2 00 00 
0b9b2     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
0b9b6     04 C1 00 00 
0b9ba     0F 02 00 00 
0b9be     06 02 00 00 
0b9c2     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b9c6     06 02 00 00 
0b9ca     0E 60 00 00 
0b9ce     06 02 00 00 
0b9d2     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b9d6     06 02 00 00 
0b9da     0A 02 00 00 
0b9de     06 02 00 00 
0b9e2     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b9e6     06 02 00 00 
0b9ea     0E 6F 00 00 
0b9ee     06 02 00 BE 
0b9f2     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
0b9f6     7F 05 00 00 
0b9fa     00 00 00 00 
0b9fe     06 02 00 BE 
0ba02     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
0ba06     73 F0 00 00 
0ba0a     0D 00 00 00 
0ba0e     06 02 00 00 
0ba12     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
0ba16     00 00 00 00 
      ...             
0bada     00 00 00 00 
0bade     00 00 00    | 	byte	$00[203]
0bae1     7F 1F 05 00 
0bae5     8F 71 04 00 
0bae9     CA 90 00 00 
0baed     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0baf1     00 00 00 00 
0baf5     87 73 F0 00 
0baf9     00 00 00 00 
0bafd     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb01     A0 10 00 00 
0bb05     00 04 C2 00 
0bb09     00 00 00 00 
0bb0d     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb11     7F 1C 20 00 
0bb15     00 04 C2 00 
0bb19     00 00 00 00 
0bb1d     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb21     BE 10 00 00 
0bb25     97 73 F0 00 
0bb29     00 00 00 00 
0bb2d     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bb31     00 00 00 00 
0bb35     AA 73 F0 00 
0bb39     00 00 00 00 
0bb3d     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb41     F0 40 00 00 
0bb45     97 70 00 00 
0bb49     FE B0 00 00 
0bb4d     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0bb51     00 00 00 00 
0bb55     AA 7C 20 00 
0bb59     00 00 00 00 
0bb5d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb61     D6 4A 06 00 
0bb65     AA 70 00 00 
0bb69     00 00 00 00 
0bb6d     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb71     F0 0E 93 00 
0bb75     97 7C 20 00 
0bb79     00 00 00 00 
0bb7d     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb81     F0 40 00 00 
0bb85     B4 70 00 00 
0bb89     00 00 00 00 
0bb8d     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bb91     00 00 00 00 
0bb95     AA 7C 20 00 
0bb99     00 00 00 00 
0bb9d     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bba1     7F 10 00 00 
0bba5     CA 74 C1 00 
0bba9     CA 90 00 00 
0bbad     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bbb1     00 00 00 00 
0bbb5     00          | 	byte	$00[5]
0bbb6     06 01 00 00 
0bbba     00 00 00 00 
0bbbe     00 00 00 A0 
0bbc2     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0bbc6     06 01 00 00 
0bbca     00 00 00 BE 
0bbce     A0 00 00 7F 
0bbd2     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0bbd6     06 01 00 00 
0bbda     00 00 00 BE 
0bbde     A0 00 00 BE 
0bbe2     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bbe6     06 01 00 00 
0bbea     00 00 00 BE 
0bbee     3C 20 00 AA 
0bbf2     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
0bbf6     06 01 00 00 
0bbfa     00 00 00 BE 
0bbfe     A0 00 00 A0 
0bc02     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bc06     06 01 00 E2 
0bc0a     B0 00 00 BE 
0bc0e     D0 00 00 A0 
0bc12     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0bc16     06 01 00 00 
0bc1a     00 00 00 00 
0bc1e     00 00 00 AA 
0bc22     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0bc26     06 01 00 00 
0bc2a     00 00 00 BE 
0bc2e     A0 00 00 BE 
0bc32     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bc36     06 01 00 00 
0bc3a     00 00 00 00 
0bc3e     00 00 00 AA 
0bc42     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0bc46     70 00 00 00 
0bc4a     00 00 00 BE 
0bc4e     30 00 00 00 
0bc52     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
0bc56     7C 20 00 00 
0bc5a     00 00 00 BE 
0bc5e     A0 00 00 A0 
0bc62     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bc66     71 04 00 FE 
0bc6a     B0 00 00 BE 
0bc6e     30 00 00 00 
0bc72     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
0bc76     73 F0 00 00 
0bc7a     00 00 00 00 
0bc7e     00 00 00 A0 
0bc82     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0bc86     04 C1 00 00 
0bc8a     00 00 00 BE 
0bc8e     A0 00 00 A0 
0bc92     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
0bc96     04 C1 00 00 
0bc9a     00 00 00 BE 
0bc9e     A0 00 00 A0 
0bca2     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bca6     70 00 00 00 
0bcaa     00 00 00 BE 
0bcae     3C 20 00 00 
0bcb2     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
0bcb6     73 F0 00 00 
0bcba     00 00 00 BE 
0bcbe     A0 00 00 8F 
0bcc2     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
0bcc6     73 F0 00 E2 
0bcca     B0 00 00 BE 
0bcce     D0 00 00 00 
0bcd2     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
0bcd6     0C 10 00 00 
0bcda     00 00 00 00 
0bcde     00 00 00 8F 
0bce2     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0bce6     73 F0 00 00 
0bcea     00 00 00 BE 
0bcee     A0 00 00 A0 
0bcf2     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bcf6     0C 10 00 00 
0bcfa     00 00 00 00 
0bcfe     00 00 00 8F 
0bd02     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0bd06     74 C1 00 00 
0bd0a     00 00 00 BE 
0bd0e     30 00 00 00 
0bd12     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0bd16     04 C1 00 00 
0bd1a     00 00 00 BE 
0bd1e     A0 00 00 BE 
0bd22     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
0bd26     70 00 00 CA 
0bd2a     90 00 00 BE 
0bd2e     30 00 00 00 
0bd32     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
0bd36     73 F0 00 00 
0bd3a     00 00 00 00 
0bd3e     00 00 00 A0 
0bd42     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
0bd46     73 F0 00 00 
0bd4a     00 00 00 BE 
0bd4e     A0 00 00 00 
0bd52     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bd56     04 C1 00 00 
0bd5a     00 00 00 BE 
0bd5e     A0 00 00 8F 
0bd62     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0bd66     06 01 00 00 
0bd6a     00 00 00 BE 
0bd6e     3C 20 00 00 
0bd72     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0bd76     06 01 00 00 
0bd7a     00 00 00 BE 
0bd7e     A0 00 00 7F 
0bd82     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
0bd86     06 01 00 00 
0bd8a     00 00 00 BE 
0bd8e     D0 00 00 00 
0bd92     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0bd96     04 C2 00 00 
0bd9a     00 00 00 00 
0bd9e     00 00 00 00 
0bda2     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bda6     06 01 00 00 
0bdaa     00 00 00 BE 
0bdae     A0 00 00 00 
0bdb2     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bdb6     06 01 00 00 
0bdba     00 00 00 00 
0bdbe     00 00 00 A0 
0bdc2     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
0bdc6     70 00 00 00 
0bdca     00 00 00 BE 
0bdce     30 00 00 8F 
0bdd2     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
0bdd6     73 F0 00 00 
0bdda     0D 00 00 BE 
0bdde     A0 00 00 00 
0bde2     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bde6     00 00 00 00 
      ...             
0beda     00 00 00 00 
0bede     00 00 00    | 	byte	$00[251]
0bee1     7F 1F 05 00 
0bee5     87 74 C2 00 
0bee9     CA 90 00 00 
0beed     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bef1     7F 1C 30 00 
0bef5     00 04 C2 00 
0bef9     00 00 00 00 
0befd     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf01     A0 10 00 00 
0bf05     00 04 C2 00 
0bf09     00 00 00 00 
0bf0d     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf11     7F 1C 30 00 
0bf15     00 04 C2 00 
0bf19     00 00 00 00 
0bf1d     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf21     BE 10 00 00 
0bf25     97 73 F0 00 
0bf29     00 00 00 00 
0bf2d     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bf31     A0 1C 30 00 
0bf35     87 73 F0 00 
0bf39     00 00 00 00 
0bf3d     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf41     F0 40 00 00 
0bf45     7F 70 00 00 
0bf49     FE B0 00 00 
0bf4d     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0bf51     00 00 00 00 
0bf55     87 7C 20 00 
0bf59     00 00 00 00 
0bf5d     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf61     D6 4A 06 00 
0bf65     87 70 00 00 
0bf69     00 00 00 00 
0bf6d     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf71     D6 0E 93 00 
0bf75     7F 7C 20 00 
0bf79     00 00 00 00 
0bf7d     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf81     F0 40 00 00 
0bf85     97 70 00 00 
0bf89     00 00 00 00 
0bf8d     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bf91     00 00 00 00 
0bf95     87 7C 20 00 
0bf99     00 00 00 00 
0bf9d     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bfa1     7F 10 00 00 
0bfa5     8F 71 04 00 
0bfa9     CA 90 00 00 
0bfad     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bfb1     00 00 00 00 
0bfb5     87 73 F0 00 
0bfb9     00 00 00 00 
0bfbd     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bfc1     A0 10 00 00 
0bfc5     00 04 C2 00 
0bfc9     00 00 00 00 
0bfcd     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bfd1     7F 1C 20 00 
0bfd5     00 06 01 00 
0bfd9     00 00 00 00 
0bfdd     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bfe1     BE 10 00 00 
0bfe5     00 06 01 00 
0bfe9     00 00 00 00 
0bfed     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bff1     AA 1C 30 00 
0bff5     00 06 01 00 
0bff9     00 00 00 00 
0bffd     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c001     A0 10 00 00 
0c005     00 06 01 00 
0c009     E2 B0 00 00 
0c00d     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
0c011     A0 1C 30 00 
0c015     00 06 01 00 
0c019     00 00 00 00 
0c01d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c021     AA 10 00 00 
0c025     B4 71 03 00 
0c029     00 00 00 00 
0c02d     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c031     BE 10 00 00 
0c035     AA 73 F0 00 
0c039     00 00 00 00 
0c03d     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c041     AA 10 00 00 
0c045     B4 73 F0 00 
0c049     00 00 00 00 
0c04d     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c051     00 00 00 00 
0c055     00 00 00 00 
0c059     00 00 00 00 | 	byte	$00[12]
0c05d     BE A0 00 00 
0c061     A0 10 00 00 
0c065     D6 71 06 00 
0c069     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
0c06d     BE 30 00 00 
0c071     00 0C 20 00 
0c075     CA 73 F0 00 
0c079     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c07d     00 00 00 00 
0c081     A0 0E 93 00 
0c085     00 04 C2 00 
0c089     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c08d     BE A0 00 00 
0c091     A0 1C 20 00 
0c095     00 04 C2 00 
0c099     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c09d     BE A0 00 00 
0c0a1     A0 10 00 00 
0c0a5     B4 73 F0 00 
0c0a9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
0c0ad     BE 3C 20 00 
0c0b1     00 00 00 00 
0c0b5     CA 73 F0 00 
0c0b9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c0bd     BE A0 00 00 
0c0c1     AA 10 00 00 
0c0c5     E2 74 C2 00 
0c0c9     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
0c0cd     BE D0 00 00 
0c0d1     00 0C 20 00 
0c0d5     00 06 01 00 
0c0d9     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0dd     00 00 00 00 
0c0e1     AA 1E 93 01 
0c0e5     0D 74 C2 00 
0c0e9     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
0c0ed     BE A0 00 00 
0c0f1     BE 10 00 00 
0c0f5     00 0C 10 00 
0c0f9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c0fd     00 00 00 00 
0c101     AA 10 00 00 
0c105     E2 74 C2 00 
0c109     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
0c10d     BE 30 00 00 
0c111     00 00 00 00 
0c115     00 0C 10 00 
0c119     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c11d     BE A0 00 00 
0c121     BE 10 00 00 
0c125     D6 71 08 00 
0c129     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
0c12d     BE 30 00 00 
0c131     00 00 00 00 
0c135     CA 73 F0 00 
0c139     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c13d     00 00 00 00 
0c141     A0 10 00 00 
0c145     00 04 C2 00 
0c149     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c14d     BE A0 00 00 
0c151     00 00 00 00 
0c155     00 06 01 00 
0c159     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c15d     BE A0 00 00 
0c161     AA 10 00 00 
0c165     00 06 01 00 
0c169     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c16d     BE 3C 20 00 
0c171     AA 1E 93 00 
0c175     00 06 01 00 
0c179     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c17d     BE A0 00 00 
0c181     BE 10 00 00 
0c185     00 06 01 00 
0c189     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c18d     BE D0 00 00 
0c191     00 04 A1 00 
0c195     00 06 01 00 
0c199     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c19d     BE A0 00 00 
0c1a1     00 06 01 00 
0c1a5     00 06 01 00 
0c1a9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1ad     BE AC 20 00 
0c1b1     00 06 01 00 
0c1b5     00 06 01 00 
0c1b9     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1bd     BE 3C 20 00 
0c1c1     00 06 01 00 
0c1c5     00 06 01 00 
0c1c9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1cd     BE D0 00 00 
0c1d1     00 06 01 00 
0c1d5     00 06 01 00 
0c1d9     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
0c1dd     00 00 00 00 
      ...             
0c2d9     00 00 00 00 
0c2dd     00 00 00 00 | 	byte	$00[260]
0c2e1     BE 10 00 00 
0c2e5     00 06 01 00 
0c2e9     CA 90 00 00 
0c2ed     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c2f1     00 00 00 00 
0c2f5     00          | 	byte	$00[5]
0c2f6     06 01 00 00 
0c2fa     00 00 00 00 
0c2fe     00 00 00 A0 
0c302     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0c306     06 01 00 00 
0c30a     00 00 00 BE 
0c30e     A0 00 00 8F 
0c312     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0c316     06 01 00 00 
0c31a     00 00 00 BE 
0c31e     A0 00 00 A0 
0c322     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c326     06 01 00 00 
0c32a     00 00 00 BE 
0c32e     3C 20 00 AA 
0c332     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0c336     06 01 00 00 
0c33a     00 00 00 BE 
0c33e     A0 00 00 A0 
0c342     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c346     06 01 00 00 
0c34a     00 00 00 BE 
0c34e     D0 00 00 A0 
0c352     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0c356     06 01 00 00 
0c35a     00 00 00 00 
0c35e     00 00 00 AA 
0c362     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0c366     06 01 00 00 
0c36a     00 00 00 BE 
0c36e     A0 00 00 AA 
0c372     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0c376     06 01 00 00 
0c37a     00 00 00 00 
0c37e     00 00 00 BE 
0c382     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0c386     06 01 00 00 
0c38a     00 00 00 BE 
0c38e     30 00 00 BE 
0c392     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0c396     0C 00 00 00 
0c39a     00 00 00 BE 
0c39e     A0 00 00 AA 
0c3a2     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0c3a6     00 00 01 0D 
0c3aa     B0 00 00 BE 
0c3ae     30 00 00 00 
0c3b2     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0c3b6     00 00 00 00 
0c3ba     00 00 00 00 
0c3be     00 00 00    | 	byte	$00[11]
0c3c1     AA 1E 93 00 
0c3c5     00 00 00 00 
0c3c9     00 00 00 00 
0c3cd     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3d1     A0 10 00 00 
0c3d5     00 00 00 00 
0c3d9     00 00 00 00 
0c3dd     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3e1     AA 10 00 00 
0c3e5     00 00 00 00 
0c3e9     00 00 00 00 
0c3ed     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c3f1     BE 10 00 00 
0c3f5     00 00 00 00 
0c3f9     00 00 00 00 
0c3fd     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c401     AA 10 00 00 
0c405     00 00 00 00 
0c409     00 00 00 00 
0c40d     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c411     00 04 82 00 
0c415     00 00 00 00 
0c419     00 00 00 00 
0c41d     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c421     00 06 01 00 
0c425     00 00 00 00 
0c429     00 00 00 00 
0c42d     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c431     00 06 01 00 
0c435     00 00 00 00 
0c439     00 00 00 00 
0c43d     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c441     00 06 01 00 
0c445     00 00 00 00 
0c449     00 00 00 00 
0c44d     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c451     00 06 01 00 
0c455     00 00 00 00 
0c459     00 00 00 00 
0c45d     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c461     A0 10 00 00 
0c465     00 00 00 00 
0c469     CA 90 00 00 
0c46d     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c471     00 00 00 00 
0c475     00 00 00 00 
0c479     00 00 00 00 
0c47d     00 00 00 00 | 	byte	$00[16]
0c481     BE 1E 93 00 
0c485     00 00 00 00 
0c489     00 00 00 00 
0c48d     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c491     A0 10 00 00 
0c495     00 00 00 00 
0c499     00 00 00 00 
0c49d     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4a1     8F 10 00 00 
0c4a5     00 00 00 00 
0c4a9     00 00 00 00 
0c4ad     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c4b1     A0 10 00 00 
0c4b5     00 00 00 00 
0c4b9     00 00 00 00 
0c4bd     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4c1     7F 10 00 00 
0c4c5     00 00 00 00 
0c4c9     00 00 00 00 
0c4cd     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c4d1     7F 1C 30 00 
0c4d5     00 00 00 00 
0c4d9     00 00 00 00 
0c4dd     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4e1     BE 40 00 00 
0c4e5     00 00 00 00 
0c4e9     00 00 00 00 
0c4ed     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4f1     BE 4A 08 00 
0c4f5     00 00 00 00 
0c4f9     00 00 00 00 
0c4fd     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c501     D6 40 00 00 
0c505     00 00 00 00 
0c509     00 00 00 00 
0c50d     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c511     BE 40 00 00 
0c515     00 00 00 00 
0c519     00 00 00 00 
0c51d     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c521     7F 10 00 00 
0c525     00 00 00 01 
0c529     0D B0 00 00 
0c52d     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c531     7F 1C 30 00 
0c535     00 00 00 00 
0c539     00 00 00 00 
0c53d     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c541     7F 1E 93 00 
0c545     00 00 00 00 
0c549     00 00 00 00 
0c54d     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c551     F0 40 00 00 
0c555     00 00 00 00 
0c559     00 00 00 00 
0c55d     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c561     7F 10 00 00 
0c565     00 00 00 00 
0c569     00 00 00 00 
0c56d     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c571     8F 10 00 00 
0c575     00 00 00 00 
0c579     00 00 00 00 
0c57d     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c581     7F 10 00 00 
0c585     00 00 00 00 
0c589     00 00 00 00 
0c58d     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c591     00 04 81 00 
0c595     00 00 00 00 
0c599     00 00 00 00 
0c59d     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5a1     00 06 01 00 
0c5a5     00 00 00 00 
0c5a9     00 00 00 00 
0c5ad     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c5b1     00 06 01 00 
0c5b5     00 00 00 00 
0c5b9     00 00 00 00 
0c5bd     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5c1     00 06 01 00 
0c5c5     00 00 00 00 
0c5c9     00 00 00 00 
0c5cd     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c5d1     00 06 01 00 
0c5d5     00 0D 00 00 
0c5d9     00 00 00 00 
0c5dd     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c5e1     00 00 00 00 
      ...             
0c6d9     00 00 00 00 
0c6dd     00 00 00 00 | 	byte	$00[256]
0c6e1     BE 10 00 00 
0c6e5     00 00 00 00 
0c6e9     CA 90 00 00 
0c6ed     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c6f1     00 00 00 00 
0c6f5     00 00 00 00 
0c6f9     00 00 00 00 
0c6fd     00 00 00 00 | 	byte	$00[16]
0c701     A0 1E 93 00 
0c705     00 00 00 00 
0c709     00 00 00 00 
0c70d     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c711     8F 10 00 00 
0c715     00 00 00 00 
0c719     00 00 00 00 
0c71d     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c721     A0 10 00 00 
0c725     00 00 00 00 
0c729     00 00 00 00 
0c72d     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c731     AA 10 00 00 
0c735     00 00 00 00 
0c739     00 00 00 00 
0c73d     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c741     A0 10 00 00 
0c745     00 00 00 00 
0c749     00 00 00 00 
0c74d     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c751     A0 1C 30 00 
0c755     00 00 00 00 
0c759     00 00 00 00 
0c75d     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c761     AA 10 00 00 
0c765     00 00 00 00 
0c769     00 00 00 00 
0c76d     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c771     AA 1C 30 00 
0c775     00 00 00 00 
0c779     00 00 00 00 
0c77d     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c781     BE 10 00 00 
0c785     00 00 00 00 
0c789     00 00 00 00 
0c78d     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c791     BE 1C 30 00 
0c795     00 00 00 00 
0c799     00 00 00 00 
0c79d     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7a1     AA 10 00 00 
0c7a5     00 00 00 01 
0c7a9     0D B0 00 00 
0c7ad     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c7b1     00 00 00 00 
0c7b5     00 00 00 00 
0c7b9     00 00 00 00 
0c7bd     00 00 00 00 | 	byte	$00[16]
0c7c1     AA 1E 93 00 
0c7c5     00 00 00 00 
0c7c9     00 00 00 00 
0c7cd     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7d1     A0 10 00 00 
0c7d5     00 00 00 00 
0c7d9     00 00 00 00 
0c7dd     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7e1     AA 10 00 00 
0c7e5     00 00 00 00 
0c7e9     00 00 00 00 
0c7ed     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c7f1     BE 10 00 00 
0c7f5     00 00 00 00 
0c7f9     00 00 00 00 
0c7fd     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c801     AA 10 00 00 
0c805     00 00 00 00 
0c809     00 00 00 00 
0c80d     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c811     00 04 82 00 
0c815     00 00 00 00 
0c819     00 00 00 00 
0c81d     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c821     00 06 01 00 
0c825     00 00 00 00 
0c829     00 00 00 00 
0c82d     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c831     00 06 01 00 
0c835     00 00 00 00 
0c839     00 00 00 00 
0c83d     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c841     00 06 01 00 
0c845     00 00 00 00 
0c849     00 00 00 00 
0c84d     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c851     00 06 01 00 
0c855     00 00 00 00 
0c859     00 00 00 00 
0c85d     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c861     A0 10 00 00 
0c865     00 00 00 00 
0c869     FE B0 00 00 
0c86d     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0c871     00 0C 20 00 
0c875     00 00 00 00 
0c879     00 00 00 00 
0c87d     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c881     A0 0E 93 00 
0c885     00 00 00 00 
0c889     00 00 00 00 
0c88d     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c891     A0 1C 20 00 
0c895     00 00 00 00 
0c899     00 00 00 00 
0c89d     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c8a1     A0 10 00 00 
0c8a5     00 00 00 00 
0c8a9     00 00 00 00 
0c8ad     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c8b1     00 00 00 00 
0c8b5     00 00 00 00 
0c8b9     00 00 00 00 | 	byte	$00[12]
0c8bd     BE A0 00 00 
0c8c1     AA 10 00 00 
0c8c5     00 00 00 00 
0c8c9     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
0c8cd     BE D0 00 00 
0c8d1     00 0C 20 00 
0c8d5     00 00 00 00 
0c8d9     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8dd     00 00 00 00 
0c8e1     AA 1E 93 00 
0c8e5     00 00 00 00 
0c8e9     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8ed     BE A0 00 00 
0c8f1     BE 10 00 00 
0c8f5     00 00 00 00 
0c8f9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8fd     00 00 00 00 
0c901     AA 10 00 00 
0c905     00 00 00 00 
0c909     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c90d     BE 30 00 00 
0c911     00 00 00 00 
0c915     00 00 00 00 
0c919     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c91d     BE A0 00 00 
0c921     BE 10 00 00 
0c925     00 00 00 00 
0c929     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
0c92d     BE 30 00 00 
0c931     00 00 00 00 
0c935     00 00 00 00 
0c939     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c93d     00 00 00 00 
0c941     A0 10 00 00 
0c945     00 00 00 00 
0c949     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c94d     BE A0 00 00 
0c951     00 00 00 00 
0c955     00 00 00 00 
0c959     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c95d     BE A0 00 00 
0c961     AA 10 00 00 
0c965     00 00 00 00 
0c969     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c96d     BE 3C 20 00 
0c971     AA 1E 93 00 
0c975     00 00 00 00 
0c979     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c97d     BE A0 00 00 
0c981     BE 10 00 00 
0c985     00 00 00 00 
0c989     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c98d     BE D0 00 00 
0c991     00 04 A1 00 
0c995     00 00 00 00 
0c999     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c99d     BE A0 00 00 
0c9a1     00 06 01 00 
0c9a5     00 00 00 00 
0c9a9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9ad     BE AC 20 00 
0c9b1     00 06 01 00 
0c9b5     00 00 00 00 
0c9b9     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9bd     BE 3C 20 00 
0c9c1     00 06 01 00 
0c9c5     AA 70 00 00 
0c9c9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
0c9cd     BE D0 00 00 
0c9d1     00 06 01 00 
0c9d5     97 73 F0 00 
0c9d9     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
0c9dd     00 00 00 00 
      ...             
0cad9     00 00 00 00 
0cadd     00 00 00 00 | 	byte	$00[260]
0cae1     BE 10 00 00 
0cae5     CA 70 00 00 
0cae9     CA 90 00 00 
0caed     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0caf1     00 00 00 00 
0caf5     00          | 	byte	$00[5]
0caf6     04 C2 00 00 
0cafa     00 00 00 00 
0cafe     00 00 00 A0 
0cb02     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0cb06     04 C2 00 00 
0cb0a     00 00 00 BE 
0cb0e     A0 00 00 8F 
0cb12     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
0cb16     70 00 00 00 
0cb1a     00 00 00 BE 
0cb1e     A0 00 00 A0 
0cb22     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0cb26     73 F0 00 00 
0cb2a     00 00 00 BE 
0cb2e     3C 20 00 AA 
0cb32     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0cb36     0C 10 00 00 
0cb3a     00 00 00 BE 
0cb3e     A0 00 00 A0 
0cb42     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
0cb46     71 04 00 00 
0cb4a     00 00 00 BE 
0cb4e     D0 00 00 A0 
0cb52     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
0cb56     73 F0 00 00 
0cb5a     00 00 00 00 
0cb5e     00 00 00 AA 
0cb62     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0cb66     04 C2 00 00 
0cb6a     00 00 00 BE 
0cb6e     A0 00 00 AA 
0cb72     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0cb76     04 C2 00 00 
0cb7a     00 00 00 00 
0cb7e     00 00 00 BE 
0cb82     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0cb86     70 00 00 00 
0cb8a     00 00 00 BE 
0cb8e     30 00 00 BE 
0cb92     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cb96     00 00 00 00 
0cb9a     00 00 00    | 	byte	$00[7]
0cb9d     BE A0 00 00 
0cba1     AA 10 00 00 
0cba5     8F 71 03 01 
0cba9     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
0cbad     BE 30 00 00 
0cbb1     00 00 00 00 
0cbb5     87 73 F0 00 
0cbb9     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
0cbbd     00 00 00 00 
0cbc1     AA 1E 93 00 
0cbc5     00 04 C1 00 
0cbc9     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
0cbcd     BE A0 00 00 
0cbd1     A0 10 00 00 
0cbd5     00 06 01 00 
0cbd9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbdd     BE A0 00 00 
0cbe1     AA 10 00 00 
0cbe5     00 06 01 00 
0cbe9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbed     BE 3C 20 00 
0cbf1     BE 10 00 00 
0cbf5     00 06 01 00 
0cbf9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbfd     BE A0 00 00 
0cc01     AA 10 00 00 
0cc05     00 04 A2 00 
0cc09     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
0cc0d     BE D0 00 00 
0cc11     00 04 82 00 
0cc15     00 06 01 00 
0cc19     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cc1d     00 00 00 00 
0cc21     00          | 	byte	$00[5]
0cc22     06 01 00 00 
0cc26     06 01 00 00 
0cc2a     00 00 00 BE 
0cc2e     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cc32     06 01 00 00 
0cc36     06 01 00 00 
0cc3a     00 00 00 00 
0cc3e     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc42     06 01 00 00 
0cc46     06 01 00 00 
0cc4a     00 00 00 BE 
0cc4e     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cc52     06 01 00 00 
0cc56     06 01 00 00 
0cc5a     00 00 00 BE 
0cc5e     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cc62     10 00 00 AA 
0cc66     70 00 00 CA 
0cc6a     90 00 00 BE 
0cc6e     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0cc72     00 00 00 00 
0cc76     04 C2 00 00 
0cc7a     00 00 00 00 
0cc7e     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cc82     1E 93 00 00 
0cc86     04 C2 00 00 
0cc8a     00 00 00 BE 
0cc8e     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cc92     10 00 00 B4 
0cc96     73 F0 00 00 
0cc9a     00 00 00 BE 
0cc9e     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
0cca2     10 00 00 CA 
0cca6     73 F0 00 00 
0ccaa     00 00 00 BE 
0ccae     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
0ccb2     10 00 00 00 
0ccb6     0C 10 00 00 
0ccba     00 00 00 BE 
0ccbe     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0ccc2     10 00 00 BE 
0ccc6     71 06 00 00 
0ccca     00 00 00 BE 
0ccce     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
0ccd2     1C 30 00 B4 
0ccd6     73 F0 00 00 
0ccda     00 00 00 00 
0ccde     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cce2     40 00 00 CA 
0cce6     70 00 00 00 
0ccea     00 00 00 BE 
0ccee     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0ccf2     4A 08 00 AA 
0ccf6     73 F0 00 00 
0ccfa     00 00 00 00 
0ccfe     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0cd02     40 00 00 97 
0cd06     73 F0 00 00 
0cd0a     00 00 00 BE 
0cd0e     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
0cd12     40 00 00 00 
0cd16     0C 10 00 00 
0cd1a     00 00 00 BE 
0cd1e     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cd22     10 00 00 8F 
0cd26     71 02 01 0D 
0cd2a     B0 00 00 BE 
0cd2e     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
0cd32     1C 30 00 87 
0cd36     73 F0 00 00 
0cd3a     00 00 00 00 
0cd3e     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0cd42     1E 93 00 00 
0cd46     04 C1 00 00 
0cd4a     00 00 00 BE 
0cd4e     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
0cd52     40 00 00 00 
0cd56     04 C1 00 00 
0cd5a     00 00 00 BE 
0cd5e     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cd62     10 00 00 7F 
0cd66     73 F0 00 00 
0cd6a     00 00 00 BE 
0cd6e     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
0cd72     10 00 00 00 
0cd76     0C 10 00 00 
0cd7a     00 00 00 BE 
0cd7e     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cd82     10 00 00 8F 
0cd86     71 03 00 00 
0cd8a     00 00 00 BE 
0cd8e     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0cd92     04 81 00 87 
0cd96     73 F0 00 00 
0cd9a     00 00 00 00 
0cd9e     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cda2     06 01 00 00 
0cda6     04 C1 00 00 
0cdaa     00 00 00 BE 
0cdae     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cdb2     06 01 00 00 
0cdb6     06 01 00 00 
0cdba     00 00 00 00 
0cdbe     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cdc2     06 01 00 00 
0cdc6     04 C2 00 00 
0cdca     00 00 00 BE 
0cdce     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cdd2     06 01 00 00 
0cdd6     06 01 00 00 
0cdda     0D 00 00 BE 
0cdde     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
0cde2     00 00 00 00 
      ...             
0ceda     00 00 00 00 
0cede     00 00 00    | 	byte	$00[255]
0cee1     A0 10 00 00 
0cee5     7F 74 C1 00 
0cee9     FE B0 00 00 
0ceed     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0cef1     00 00 00 00 
0cef5     00          | 	byte	$00[5]
0cef6     04 C2 00 00 
0cefa     00 00 00 00 
0cefe     00 00 00 A0 
0cf02     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0cf06     04 C2 00 00 
0cf0a     00 00 00 BE 
0cf0e     A0 00 00 8F 
0cf12     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
0cf16     70 00 00 00 
0cf1a     00 00 00 BE 
0cf1e     A0 00 00 A0 
0cf22     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0cf26     73 F0 00 00 
0cf2a     00 00 00 BE 
0cf2e     3C 20 00 AA 
0cf32     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0cf36     0C 10 00 00 
0cf3a     00 00 00 BE 
0cf3e     A0 00 00 A0 
0cf42     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
0cf46     71 03 00 00 
0cf4a     00 00 00 BE 
0cf4e     D0 00 00 A0 
0cf52     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
0cf56     73 F0 00 00 
0cf5a     00 00 00 00 
0cf5e     00 00 00 AA 
0cf62     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0cf66     04 C1 00 00 
0cf6a     00 00 00 BE 
0cf6e     A0 00 00 AA 
0cf72     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0cf76     04 C1 00 00 
0cf7a     00 00 00 00 
0cf7e     00 00 00 BE 
0cf82     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
0cf86     73 F0 00 00 
0cf8a     00 00 00 BE 
0cf8e     30 00 00 BE 
0cf92     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cf96     0C 10 00 00 
0cf9a     00 00 00 BE 
0cf9e     A0 00 00 AA 
0cfa2     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
0cfa6     71 02 01 0D 
0cfaa     B0 00 00 BE 
0cfae     30 00 00 00 
0cfb2     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
0cfb6     73 F0 00 00 
0cfba     00 00 00 00 
0cfbe     00 00 00 AA 
0cfc2     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0cfc6     04 C1 00 00 
0cfca     00 00 00 BE 
0cfce     A0 00 00 A0 
0cfd2     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0cfd6     04 C1 00 00 
0cfda     00 00 00 BE 
0cfde     A0 00 00 AA 
0cfe2     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
0cfe6     71 03 00 00 
0cfea     00 00 00 BE 
0cfee     3C 20 00 BE 
0cff2     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
0cff6     7C 10 00 00 
0cffa     00 00 00 BE 
0cffe     A0 00 00 AA 
0d002     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0d006     00 00 00 00 
0d00a     00 00 00    | 	byte	$00[7]
0d00d     BE D0 00 00 
0d011     00 04 82 00 
0d015     00 00 00 00 
0d019     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d01d     00 00 00 00 
0d021     00          | 	byte	$00[5]
0d022     06 01 00 B4 
0d026     74 C2 00 00 
0d02a     00 00 00 BE 
0d02e     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d032     06 01 00 00 
0d036     04 C2 00 00 
0d03a     00 00 00 00 
0d03e     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d042     06 01 00 00 
0d046     04 C2 00 00 
0d04a     00 00 00 BE 
0d04e     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d052     06 01 00 00 
0d056     04 C2 00 00 
0d05a     00 00 00 BE 
0d05e     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d062     10 00 00 D6 
0d066     71 04 00 CA 
0d06a     90 00 00 BE 
0d06e     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d072     0C 20 00 CA 
0d076     73 F0 00 00 
0d07a     00 00 00 00 
0d07e     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0d082     0E 93 00 00 
0d086     04 C2 00 00 
0d08a     00 00 00 BE 
0d08e     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d092     1C 20 00 00 
0d096     06 01 00 00 
0d09a     00 00 00 BE 
0d09e     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d0a2     10 00 00 00 
0d0a6     06 01 00 00 
0d0aa     00 00 00 BE 
0d0ae     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d0b2     00 00 00 00 
0d0b6     06 01 00 00 
0d0ba     00 00 00 BE 
0d0be     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0d0c2     10 00 00 00 
0d0c6     06 01 00 E2 
0d0ca     B0 00 00 BE 
0d0ce     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
0d0d2     0C 20 00 00 
0d0d6     06 01 00 00 
0d0da     00 00 00 00 
0d0de     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d0e2     1E 93 00 00 
0d0e6     06 01 00 00 
0d0ea     00 00 00 BE 
0d0ee     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0d0f2     10 00 00 00 
0d0f6     06 01 00 00 
0d0fa     00 00 00 00 
0d0fe     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d102     10 00 00 00 
0d106     06 01 00 00 
0d10a     00 00 00 BE 
0d10e     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d112     00 00 00 00 
0d116     06 01 00 00 
0d11a     00 00 00 BE 
0d11e     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d122     10 00 00 00 
0d126     06 01 00 CA 
0d12a     90 00 00 BE 
0d12e     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d132     00 00 00 00 
0d136     06 01 00 00 
0d13a     00 00 00 00 
0d13e     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0d142     10 00 00 00 
0d146     06 01 00 00 
0d14a     00 00 00 BE 
0d14e     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d152     00 00 00 00 
0d156     06 01 00 00 
0d15a     00 00 00 BE 
0d15e     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
0d162     10 00 00 00 
0d166     06 01 00 00 
0d16a     00 00 00 BE 
0d16e     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
0d172     1E 93 00 00 
0d176     06 01 00 00 
0d17a     00 00 00 BE 
0d17e     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d182     10 00 00 00 
0d186     06 01 00 00 
0d18a     00 00 00 BE 
0d18e     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d192     04 A1 00 00 
0d196     06 01 00 00 
0d19a     00 00 00 BE 
0d19e     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d1a2     06 01 00 00 
0d1a6     06 01 00 00 
0d1aa     00 00 00 BE 
0d1ae     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
0d1b2     06 01 00 00 
0d1b6     06 01 00 00 
0d1ba     00 00 00 BE 
0d1be     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d1c2     06 01 00 00 
0d1c6     06 01 00 00 
0d1ca     00 00 00 BE 
0d1ce     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d1d2     06 01 00 00 
0d1d6     06 01 00 00 
0d1da     0D 00 00 00 
0d1de     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0d1e2     00 00 00 00 
      ...             
0d2da     00 00 00 00 
0d2de     00 00 00    | 	byte	$00[255]
0d2e1     7F 1F 05 00 
0d2e5     BE 20 00 00 
0d2e9     CA 90 00 00 
0d2ed     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d2f1     00 00 00 00 
0d2f5     00          | 	byte	$00[5]
0d2f6     0A 02 00 00 
0d2fa     00 00 00 00 
0d2fe     00 00 00 A0 
0d302     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d306     0A 02 00 00 
0d30a     00 00 00 BE 
0d30e     A0 00 00 7F 
0d312     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d316     0A 02 00 00 
0d31a     00 00 00 BE 
0d31e     A0 00 00 BE 
0d322     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d326     0A 02 00 00 
0d32a     00 00 00 BE 
0d32e     3C 20 00 00 
0d332     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d336     0A 02 00 00 
0d33a     00 00 00 BE 
0d33e     A0 00 00 F0 
0d342     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d346     20 00 00 FE 
0d34a     B0 00 00 BE 
0d34e     D0 00 00 00 
0d352     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d356     00 00 00 00 
0d35a     00 00 00 00 
0d35e     00 00 00    | 	byte	$00[11]
0d361     D6 4A 06 00 
0d365     BE 2E 93 00 
0d369     00 00 00 00 
0d36d     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d371     F0 0E 93 00 
0d375     BE 20 00 00 
0d379     00 00 00 00 
0d37d     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d381     F0 40 00 00 
0d385     D6 20 00 00 
0d389     00 00 00 00 
0d38d     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d391     00 00 00 00 
0d395     00          | 	byte	$00[5]
0d396     0C 20 00 00 
0d39a     00 00 00 BE 
0d39e     A0 00 00 7F 
0d3a2     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d3a6     20 00 00 CA 
0d3aa     90 00 00 BE 
0d3ae     30 00 00 00 
0d3b2     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d3b6     0A 02 00 00 
0d3ba     00 00 00 00 
0d3be     00 00 00 A0 
0d3c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d3c6     0A 02 00 00 
0d3ca     00 00 00 BE 
0d3ce     A0 00 00 7F 
0d3d2     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d3d6     0A 02 00 00 
0d3da     00 00 00 BE 
0d3de     A0 00 00 BE 
0d3e2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d3e6     00 00 00 00 
0d3ea     00 00 00    | 	byte	$00[7]
0d3ed     BE 3C 20 00 
0d3f1     AA 1C 30 00 
0d3f5     BE 0E 93 00 
0d3f9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d3fd     BE A0 00 00 
0d401     A0 10 00 00 
0d405     D6 20 00 00 
0d409     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d40d     BE D0 00 00 
0d411     A0 1C 30 00 
0d415     00 0A 02 00 
0d419     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d41d     00 00 00 00 
0d421     AA 10 00 00 
0d425     00 0A 02 00 
0d429     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d42d     BE A0 00 00 
0d431     BE 10 00 00 
0d435     D6 2C 20 00 
0d439     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d43d     00 00 00 00 
0d441     AA 10 00 00 
0d445     D6 2A 04 00 
0d449     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d44d     BE 30 00 00 
0d451     00 00 00 00 
0d455     00 0A 04 00 
0d459     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d45d     BE A0 00 00 
0d461     A0 10 00 00 
0d465     F0 20 00 00 
0d469     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d46d     BE 30 00 00 
0d471     00 0C 20 00 
0d475     00 00 00 00 
0d479     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d47d     00 00 00 00 
0d481     A0 0E 93 00 
0d485     F0 20 00 00 
0d489     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d48d     BE A0 00 00 
0d491     A0 1C 20 00 
0d495     F0 2C 30 00 
0d499     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d49d     BE A0 00 00 
0d4a1     A0 10 00 00 
0d4a5     F0 20 00 00 
0d4a9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d4ad     BE 3C 20 00 
0d4b1     00 00 00 00 
0d4b5     00 00 00 00 
0d4b9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4bd     BE A0 00 00 
0d4c1     8F 10 00 00 
0d4c5     D6 20 00 00 
0d4c9     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d4cd     BE D0 00 00 
0d4d1     00 0C 20 00 
0d4d5     00 00 00 00 
0d4d9     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4dd     00 00 00 00 
0d4e1     8F 1E 93 00 
0d4e5     D6 20 00 00 
0d4e9     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d4ed     BE A0 00 00 
0d4f1     A0 10 00 00 
0d4f5     BE 2C 30 00 
0d4f9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d4fd     00 00 00 00 
0d501     8F 10 00 00 
0d505     D6 20 00 00 
0d509     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d50d     BE 30 00 00 
0d511     00 00 00 00 
0d515     00 00 00 00 
0d519     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d51d     BE A0 00 00 
0d521     BE 10 00 00 
0d525     BE 20 00 00 
0d529     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
0d52d     BE 30 00 00 
0d531     00 00 00 00 
0d535     BE 2C 30 00 
0d539     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d53d     00 00 00 00 
0d541     A0 10 00 01 
0d545     7D 20 00 00 
0d549     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0d54d     BE A0 00 00 
0d551     00 00 00 00 
0d555     BE 2C 30 00 
0d559     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d55d     BE A0 00 00 
0d561     8F 10 00 00 
0d565     00 0A 06 00 
0d569     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
0d56d     BE 3C 20 00 
0d571     00 00 00 00 
0d575     BE 0E 93 00 
0d579     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d57d     BE A0 00 00 
0d581     7F 10 00 00 
0d585     BE 2C 30 00 
0d589     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d58d     BE D0 00 00 
0d591     00 00 00 00 
0d595     00 0A 02 00 
0d599     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d59d     00 00 00 00 
0d5a1     00 00 00 00 
0d5a5     00          | 	byte	$00[9]
0d5a6     0A 02 00 00 
0d5aa     00 00 00 BE 
0d5ae     A0 00 00 00 
0d5b2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d5b6     0A 02 00 00 
0d5ba     00 00 00 00 
0d5be     00 00 00 A0 
0d5c2     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0d5c6     0A 02 00 00 
0d5ca     00 00 00 BE 
0d5ce     30 00 00 8F 
0d5d2     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
0d5d6     0A 02 00 00 
0d5da     0D 00 00 BE 
0d5de     A0 00 00 00 
0d5e2     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d5e6     00 00 00 00 
      ...             
0d6da     00 00 00 00 
0d6de     00 00 00    | 	byte	$00[251]
0d6e1     7F 1F 05 00 
0d6e5     BE 20 00 00 
0d6e9     CA 90 00 00 
0d6ed     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d6f1     00 00 00 00 
0d6f5     00          | 	byte	$00[5]
0d6f6     0A 02 00 00 
0d6fa     00 00 00 00 
0d6fe     00 00 00 A0 
0d702     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d706     0A 02 00 00 
0d70a     00 00 00 BE 
0d70e     A0 00 00 7F 
0d712     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d716     0A 02 00 00 
0d71a     00 00 00 BE 
0d71e     A0 00 00 BE 
0d722     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d726     0A 02 00 00 
0d72a     00 00 00 BE 
0d72e     3C 20 00 00 
0d732     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d736     0A 02 00 00 
0d73a     00 00 00 BE 
0d73e     A0 00 00 F0 
0d742     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d746     20 00 00 FE 
0d74a     B0 00 00 BE 
0d74e     D0 00 00 00 
0d752     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d756     00 00 00 00 
0d75a     00 00 00 00 
0d75e     00 00 00    | 	byte	$00[11]
0d761     D6 4A 06 00 
0d765     BE 2E 93 00 
0d769     00 00 00 00 
0d76d     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d771     F0 0E 93 00 
0d775     BE 20 00 00 
0d779     00 00 00 00 
0d77d     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d781     F0 40 00 00 
0d785     D6 20 00 00 
0d789     00 00 00 00 
0d78d     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d791     00 00 00 00 
0d795     00          | 	byte	$00[5]
0d796     0C 20 00 00 
0d79a     00 00 00 BE 
0d79e     A0 00 00 7F 
0d7a2     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d7a6     20 00 00 CA 
0d7aa     90 00 00 BE 
0d7ae     30 00 00 00 
0d7b2     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d7b6     0A 02 00 00 
0d7ba     00 00 00 00 
0d7be     00 00 00 A0 
0d7c2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d7c6     0A 02 00 00 
0d7ca     00 00 00 BE 
0d7ce     A0 00 00 7F 
0d7d2     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d7d6     0A 02 00 00 
0d7da     00 00 00 BE 
0d7de     A0 00 00 BE 
0d7e2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d7e6     00 00 00 00 
0d7ea     00 00 00    | 	byte	$00[7]
0d7ed     BE 3C 20 00 
0d7f1     AA 1C 30 00 
0d7f5     BE 0E 93 00 
0d7f9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d7fd     BE A0 00 00 
0d801     A0 10 00 00 
0d805     D6 20 00 00 
0d809     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d80d     BE D0 00 00 
0d811     A0 1C 30 00 
0d815     00 0A 02 00 
0d819     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d81d     00 00 00 00 
0d821     AA 10 00 00 
0d825     00 0A 02 00 
0d829     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d82d     BE A0 00 00 
0d831     BE 10 00 00 
0d835     D6 2C 20 00 
0d839     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d83d     00 00 00 00 
0d841     AA 10 00 00 
0d845     D6 2A 04 00 
0d849     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d84d     BE 30 00 00 
0d851     00 00 00 00 
0d855     00 0A 04 00 
0d859     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d85d     BE A0 00 00 
0d861     A0 10 00 00 
0d865     F0 20 00 00 
0d869     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d86d     BE 30 00 00 
0d871     00 0C 20 00 
0d875     00 00 00 00 
0d879     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d87d     00 00 00 00 
0d881     A0 0E 93 00 
0d885     F0 20 00 00 
0d889     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d88d     BE A0 00 00 
0d891     A0 1C 20 00 
0d895     F0 2C 30 00 
0d899     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d89d     BE A0 00 00 
0d8a1     A0 10 00 00 
0d8a5     F0 20 00 00 
0d8a9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d8ad     BE 3C 20 00 
0d8b1     00 00 00 00 
0d8b5     00 00 00 00 
0d8b9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d8bd     BE A0 00 00 
0d8c1     8F 10 00 00 
0d8c5     D6 20 00 00 
0d8c9     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d8cd     BE D0 00 00 
0d8d1     00 0C 20 00 
0d8d5     00 00 00 00 
0d8d9     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d8dd     00 00 00 00 
0d8e1     8F 1E 93 00 
0d8e5     D6 20 00 00 
0d8e9     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d8ed     BE A0 00 00 
0d8f1     A0 10 00 00 
0d8f5     BE 2C 30 00 
0d8f9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d8fd     00 00 00 00 
0d901     8F 10 00 00 
0d905     D6 20 00 00 
0d909     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d90d     BE 30 00 00 
0d911     00 00 00 00 
0d915     00 00 00 00 
0d919     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d91d     BE A0 00 00 
0d921     BE 10 00 01 
0d925     1D 20 00 00 
0d929     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0d92d     BE 30 00 00 
0d931     BE 1C 30 00 
0d935     00 00 00 00 
0d939     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d93d     00 00 00 00 
0d941     BE 10 00 00 
0d945     00 00 00 00 
0d949     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
0d94d     BE A0 00 00 
0d951     BE 1C 30 01 
0d955     1D 2C 30 00 
0d959     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0d95d     BE A0 00 00 
0d961     D6 10 00 00 
0d965     00 00 00 00 
0d969     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d96d     BE 3C 20 00 
0d971     BE 1E D4 00 
0d975     00 00 00 00 
0d979     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
0d97d     BE A0 00 00 
0d981     BE 10 00 01 
0d985     1D 0C 20 00 
0d989     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0d98d     BE D0 00 00 
0d991     00 0A 01 00 
0d995     00 00 00 00 
0d999     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
0d99d     00 00 00 00 
0d9a1     00          | 	byte	$00[5]
0d9a2     0A 01 00 00 
0d9a6     00 00 00 00 
0d9aa     0A 01 00 00 
0d9ae     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9b2     0A 01 01 1D 
0d9b6     0C 10 00 00 
0d9ba     0A 01 00 00 
0d9be     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9c2     0A 01 00 00 
0d9c6     00 00 00 00 
0d9ca     0A 01 00 00 
0d9ce     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9d2     0A 01 00 00 
0d9d6     00 00 00 00 
0d9da     0A 01 00 00 
0d9de     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9e2     0A 01 00 00 
0d9e6     0C 00 00 00 
0d9ea     0A 01 00 00 
0d9ee     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9f2     0A 01 00 00 
0d9f6     0E 60 00 00 
0d9fa     0A 01 00 00 
0d9fe     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
0da02     0A 01 00 00 
0da06     0E 6F 00 00 
0da0a     0A 01 00 00 
0da0e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0da12     0C 00 00 00 
0da16     00 00 00 00 
0da1a     0C 00 00 00 
0da1e     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
0da22     0F 1F 00 00 
0da26     00 00 00 00 
0da2a     00 00 00 00 
0da2e     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0da32     00 00 00 00 
      ...             
0dada     00 00 00 00 
0dade     00 00 00    | 	byte	$00[175]
0dae1     7F 1F 05 00 
0dae5     BE 20 00 00 
0dae9     CA 90 00 00 
0daed     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0daf1     00 00 00 00 
0daf5     00          | 	byte	$00[5]
0daf6     0A 02 00 00 
0dafa     00 00 00 00 
0dafe     00 00 00 A0 
0db02     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0db06     0A 02 00 00 
0db0a     00 00 00 BE 
0db0e     A0 00 00 7F 
0db12     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0db16     0A 02 00 00 
0db1a     00 00 00 BE 
0db1e     A0 00 00 BE 
0db22     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0db26     0A 02 00 00 
0db2a     00 00 00 BE 
0db2e     3C 20 00 00 
0db32     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0db36     0A 02 00 00 
0db3a     00 00 00 BE 
0db3e     A0 00 00 F0 
0db42     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0db46     20 00 00 FE 
0db4a     B0 00 00 BE 
0db4e     D0 00 00 00 
0db52     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0db56     00 00 00 00 
0db5a     00 00 00 00 
0db5e     00 00 00    | 	byte	$00[11]
0db61     D6 4A 06 00 
0db65     BE 2E 93 00 
0db69     00 00 00 00 
0db6d     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0db71     F0 0E 93 00 
0db75     BE 20 00 00 
0db79     00 00 00 00 
0db7d     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0db81     F0 40 00 00 
0db85     D6 20 00 00 
0db89     00 00 00 00 
0db8d     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0db91     00 00 00 00 
0db95     00          | 	byte	$00[5]
0db96     0C 20 00 00 
0db9a     00 00 00 BE 
0db9e     A0 00 00 7F 
0dba2     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0dba6     20 00 00 CA 
0dbaa     90 00 00 BE 
0dbae     30 00 00 00 
0dbb2     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0dbb6     0A 02 00 00 
0dbba     00 00 00 00 
0dbbe     00 00 00 A0 
0dbc2     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0dbc6     0A 02 00 00 
0dbca     00 00 00 BE 
0dbce     A0 00 00 7F 
0dbd2     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0dbd6     0A 02 00 00 
0dbda     00 00 00 BE 
0dbde     A0 00 00 BE 
0dbe2     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0dbe6     00 00 00 00 
0dbea     00 00 00    | 	byte	$00[7]
0dbed     BE 3C 20 00 
0dbf1     AA 1C 30 00 
0dbf5     BE 0E 93 00 
0dbf9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0dbfd     BE A0 00 00 
0dc01     A0 10 00 00 
0dc05     D6 20 00 00 
0dc09     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0dc0d     BE D0 00 00 
0dc11     A0 1C 30 00 
0dc15     00 0A 02 00 
0dc19     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0dc1d     00 00 00 00 
0dc21     AA 10 00 00 
0dc25     00 0A 02 00 
0dc29     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0dc2d     BE A0 00 00 
0dc31     BE 10 00 00 
0dc35     D6 2C 20 00 
0dc39     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0dc3d     00 00 00 00 
0dc41     AA 10 00 00 
0dc45     D6 2A 04 00 
0dc49     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0dc4d     BE 30 00 00 
0dc51     00 00 00 00 
0dc55     00 0A 04 00 
0dc59     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0dc5d     BE A0 00 00 
0dc61     A0 10 00 00 
0dc65     F0 20 00 00 
0dc69     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0dc6d     BE 30 00 00 
0dc71     00 0C 20 00 
0dc75     00 00 00 00 
0dc79     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc7d     00 00 00 00 
0dc81     A0 0E 93 00 
0dc85     F0 20 00 00 
0dc89     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dc8d     BE A0 00 00 
0dc91     A0 1C 20 00 
0dc95     F0 2C 30 00 
0dc99     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0dc9d     BE A0 00 00 
0dca1     A0 10 00 00 
0dca5     F0 20 00 00 
0dca9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dcad     BE 3C 20 00 
0dcb1     00 00 00 00 
0dcb5     00 00 00 00 
0dcb9     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcbd     BE A0 00 00 
0dcc1     8F 10 00 00 
0dcc5     D6 20 00 00 
0dcc9     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0dccd     BE D0 00 00 
0dcd1     00 0C 20 00 
0dcd5     00 00 00 00 
0dcd9     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcdd     00 00 00 00 
0dce1     8F 1E 93 00 
0dce5     D6 20 00 00 
0dce9     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dced     BE A0 00 00 
0dcf1     A0 10 00 00 
0dcf5     BE 2C 30 00 
0dcf9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0dcfd     00 00 00 00 
0dd01     8F 10 00 00 
0dd05     D6 20 00 00 
0dd09     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dd0d     BE 30 00 00 
0dd11     00 00 00 00 
0dd15     00 00 00 00 
0dd19     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd1d     BE A0 00 00 
0dd21     BE 10 00 01 
0dd25     1D 20 00 00 
0dd29     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0dd2d     BE 30 00 00 
0dd31     00 00 00 00 
0dd35     00 00 00 00 
0dd39     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd3d     00 00 00 00 
0dd41     BE 10 00 00 
0dd45     00 00 00 00 
0dd49     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd4d     BE A0 00 00 
0dd51     00 00 00 01 
0dd55     1D 2C 30 00 
0dd59     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0dd5d     BE A0 00 00 
0dd61     D6 10 00 00 
0dd65     00 00 00 00 
0dd69     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd6d     BE 3C 20 00 
0dd71     00 00 00 00 
0dd75     00 00 00 00 
0dd79     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd7d     BE A0 00 00 
0dd81     BE 10 00 01 
0dd85     1D 0C 20 00 
0dd89     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0dd8d     BE D0 00 00 
0dd91     00 00 00 00 
0dd95     00 00 00 00 
0dd99     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd9d     00 00 00 00 
0dda1     BE 10 00 00 
0dda5     00 00 00 00 
0dda9     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddad     BE A0 00 00 
0ddb1     BE 1E D3 01 
0ddb5     1D 0C 10 00 
0ddb9     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
0ddbd     BE AC 20 00 
0ddc1     A0 10 00 00 
0ddc5     00 00 00 00 
0ddc9     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddcd     BE 30 00 00 
0ddd1     00 00 00 00 
0ddd5     00 00 00 00 
0ddd9     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dddd     BE AD 00 00 
0dde1     00 00 00 00 
0dde5     00 00 00 00 
0dde9     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dded     00 00 00 00 
      ...             
0dedd     00 00 00 00 
0dee1     00          | 	byte	$00[245]
0dee2     08 09 06 07 
0dee6     06 08 09 08 
0deea     09 0C 0A 09 
0deee     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
0def2     07 07 0A 0C 
0def6     0A 09 0A 08 
0defa     0A 09 0A 0C 
0defe     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
0df02     0D 0E 0C 0C 
0df06     12 04 1B 08 
0df0a     04 08 13 21 
0df0e     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
0df12     F7 FF F1 FD 
0df16     09 FE 08 08 
0df1a     F3 FF FF 00 
0df1e     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
0df22     22 12 2B 31 
0df26     00 F7 FF 30 
0df2a     18 38 26 31 
0df2e     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
0df32     13 25 26 1C 
0df36     01 1B 13 FF 
0df3a     ED EC EB E0 
0df3e     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
0df42     D0 D9 F6 E4 
0df46     CF FF ED DE 
0df4a     FF C7 C1 D9 
0df4e     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
0df52     F0 F6 FF E4 
0df56     E7 F9 DF EC 
0df5a     0C 09 12 2E 
0df5e     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
0df62     1C 34 3C 18 
0df66     2E 26 1B 39 
0df6a     25 4B 39 38 
0df6e     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
0df72     2B 33 48 1C 
0df76     2E 39 2A 34 
0df7a     34 32 1E 1C 
0df7e     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
0df82     09 25 30 00 
0df86     E2 FA 00 CF 
0df8a     EA C8 E2 FF 
0df8e     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
0df92     FD F6 F2 D0 
0df96     CF E2 E4 B0 
0df9a     D9 DA C6 E0 
0df9e     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
0dfa2     CF F6 E8 F6 
0dfa6     20 2A 46 4C 
0dfaa     26 20 2C 18 
0dfae     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
0dfb2     2E 48 39 3D 
0dfb6     4C 36 42 4E 
0dfba     39 2A 42 46 
0dfbe     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
0dfc2     1E 00 DA C6 
0dfc6     F3 EE EC F2 
0dfca     DB F1 FC 02 
0dfce     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
0dfd2     DA C0 CF D5 
0dfd6     C9 C4 BD B8 
0dfda     C1 C0 A6 C6 
0dfde     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
0dfe2     EC EE FA 09 
0dfe6     F9 12 33 13 
0dfea     FD FD 12 20 
0dfee     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
0dff2     49 4C 3E 4B 
0dff6     51 39 42 56 
0dffa     26 2E 3D 26 
0dffe     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
0e002     43 26 28 38 
0e006     45 39 2C 3A 
0e00a     3A 36 32 18 
0e00e     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
0e012     00 FF 12 2C 
0e016     20 33 43 2B 
0e01a     2A 26 09 00 
0e01e     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
0e022     00 DA EC FE 
0e026     F2 F0 F0 DA 
0e02a     F6 16 0C 08 
0e02e     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
0e032     13 F7 EC F0 
0e036     EA F1 F0 E6 
0e03a     F1 0D 0A 06 
0e03e     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
0e042     13 12 25 2D 
0e046     21 09 ED F6 
0e04a     F2 DA D4 D0 
0e04e     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
0e052     EB FD 00 ED 
0e056     E4 EA DC CF 
0e05a     D6 DA D0 CF 
0e05e     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
0e062     CC B4 B2 CF 
0e066     D6 D9 E4 DE 
0e06a     FF 10 04 19 
0e06e     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
0e072     0F 19 28 26 
0e076     36 44 3E 46 
0e07a     5E 58 49 4B 
0e07e     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
0e082     20 38 40 30 
0e086     32 26 21 2D 
0e08a     28 13 16 2B 
0e08e     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
0e092     10 16 13 00 
0e096     FF 00 E1 F1 
0e09a     06 01 0A 25 
0e09e     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
0e0a2     0E 14 20 13 
0e0a6     00 FD 02 02 
0e0aa     00 01 F9 F8 
0e0ae     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
0e0b2     1B 33 3F 4A 
0e0b6     3E 27 2E 32 
0e0ba     1F 09 FE FF 
0e0be     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
0e0c2     0D 21 1F 13 
0e0c6     14 1B 2A 2B 
0e0ca     26 1F 26 13 
0e0ce     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
0e0d2     DB D9 D0 CA 
0e0d6     E1 E5 DF F1 
0e0da     F9 F8 F6 E4 
0e0de     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
0e0e2     C4 CD C9 C3 
0e0e6     BD B4 BA C2 
0e0ea     C1 BE C1 C1 
0e0ee     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
0e0f2     FF 07 02 00 
0e0f6     F2 F6 06 00 
0e0fa     F3 FF 14 20 
0e0fe     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
0e102     58 4C 30 2C 
0e106     2C 28 2D 26 
0e10a     13 25 38 2B 
0e10e     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
0e112     25 24 26 26 
0e116     26 27 26 1C 
0e11a     0E 04 02 FC 
0e11e     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
0e122     18 18 1B 1C 
0e126     12 20 1C 0E 
0e12a     0D 04 F7 FD 
0e12e     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
0e132     04 00 FD FE 
0e136     08 25 32 2D 
0e13a     36 4B 54 56 
0e13e     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
0e142     21 13 09 12 
0e146     18 14 1F 1E 
0e14a     20 24 20 24 
0e14e     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
0e152     13 14 13 00 
0e156     F2 E4 E1 DC 
0e15a     C7 C6 CF E2 
0e15e     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
0e162     F0 ED F1 EB 
0e166     E5 E5 E4 DA 
0e16a     CD C4 C4 CF 
0e16e     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
0e172     D4 CF D6 EA 
0e176     F6 07 06 06 
0e17a     19 1F 10 0D 
0e17e     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
0e182     04 0D 20 38 
0e186     42 40 40 45 
0e18a     44 3C 2D 21 
0e18e     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
0e192     1F 20 19 16 
0e196     25 1C 0D 19 
0e19a     26 26 1A 13 
0e19e     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
0e1a2     F7 E6 DA D4 
0e1a6     E1 ED EE F7 
0e1aa     FD FF 0F 13 
0e1ae     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
0e1b2     E8 E2 F3 FE 
0e1b6     00 F6 E6 E4 
0e1ba     F1 FC F7 FE 
0e1be     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
0e1c2     42 48 46 43 
0e1c6     36 2D 26 20 
0e1ca     21 1A 1B 27 
0e1ce     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
0e1d2     3A 3A 31 2E 
0e1d6     38 31 26 1B 
0e1da     18 16 0E 00 
0e1de     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
0e1e2     DE DC D9 DB 
0e1e6     EC ED E4 E7 
0e1ea     F1 F0 F1 E8 
0e1ee     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
0e1f2     C6 CD CF CC 
0e1f6     C8 CD D6 DE 
0e1fa     E4 E6 F1 08 
0e1fe     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
0e202     22 28 27 26 
0e206     16 19 20 21 
0e20a     20 2E 3C 44 
0e20e     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
0e212     37 38 38 32 
0e216     26 20 2D 30 
0e21a     26 1A 19 22 
0e21e     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
0e222     18 20 2A 28 
0e226     1E 0E 01 F7 
0e22a     ED E6 E6 EB 
0e22e     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
0e232     08 16 15 04 
0e236     F4 F2 F1 F1 
0e23a     EE EA E6 E6 
0e23e     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
0e242     EB EC EE FD 
0e246     0F 1E 2D 33 
0e24a     32 30 26 1C 
0e24e     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
0e252     03 08 0E 18 
0e256     1F 20 20 27 
0e25a     2C 2D 26 1B 
0e25e     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
0e262     00 ED ED EA 
0e266     DF DA D9 E6 
0e26a     DE D8 D6 DE 
0e26e     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
0e272     F1 ED DF D8 
0e276     D9 DB D0 C8 
0e27a     CC CF D3 D5 
0e27e     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
0e282     F8 FF 03 0A 
0e286     16 1F 20 20 
0e28a     22 26 2B 28 
0e28e     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
0e292     46 48 46 4F 
0e296     56 51 4C 3C 
0e29a     34 36 34 30 
0e29e     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
0e2a2     30 30 27 1C 
0e2a6     18 1B 24 26 
0e2aa     22 27 27 1C 
0e2ae     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
0e2b2     F4 EB EC F1 
0e2b6     FD 0D 16 10 
0e2ba     0A 0D 09 02 
0e2be     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
0e2c2     F2 F1 F3 F3 
0e2c6     ED EC F0 EE 
0e2ca     F3 FF 0D 20 
0e2ce     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
0e2d2     2A 2D 26 18 
0e2d6     06 02 07 07 
0e2da     08 09 10 1C 
0e2de     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
0e2e2     20 1F 15 10 
0e2e6     0A 04 FC ED 
0e2ea     DE DF DF DA 
0e2ee     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
0e2f2     C4 C9 D6 DF 
0e2f6     DC D8 D9 DE 
0e2fa     E1 DA CD C7 
0e2fe     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
0e302     BD BC C6 CD 
0e306     D5 DC E2 EC 
0e30a     FC 02 03 07 
0e30e     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
0e312     18 16 1B 21 
0e316     27 2A 31 3D 
0e31a     4B 50 51 50 
0e31e     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
0e322     39 30 2A 32 
0e326     3A 34 30 34 
0e32a     34 2D 28 2A 
0e32e     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
0e332     27 22 1F 1C 
0e336     13 00 F4 F4 
0e33a     F9 FD 03 0D 
0e33e     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
0e342     14 0C 06 01 
0e346     FD F9 F7 F7 
0e34a     F9 F9 F7 F2 
0e34e     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
0e352     16 20 26 27 
0e356     33 3A 34 2B 
0e35a     26 22 18 0E 
0e35e     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
0e362     18 19 20 24 
0e366     26 26 26 26 
0e36a     24 1C 13 0A 
0e36e     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
0e372     EB E8 DF D3 
0e376     D0 D3 D6 D8 
0e37a     D9 DA DC E2 
0e37e     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
0e382     D6 D8 D5 CC 
0e386     C3 C0 C4 C6 
0e38a     C3 C4 CF E0 
0e38e     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
0e392     F9 03 0E 10 
0e396     0F 13 13 0F 
0e39a     0E 0F 0F 16 
0e39e     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
0e3a2     3A 44 44 3E 
0e3a6     34 2B 27 24 
0e3aa     1F 1E 22 27 
0e3ae     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
0e3b2     20 2A 2B 26 
0e3b6     26 28 27 27 
0e3ba     1F 15 0A 02 
0e3be     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
0e3c2     03 0E 14 1B 
0e3c6     1F 1F 1C 18 
0e3ca     13 0A 07 00 
0e3ce     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
0e3d2     F4 F0 F1 FA 
0e3d6     03 0A 15 24 
0e3da     30 34 36 3C 
0e3de     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
0e3e2     24 1E 18 18 
0e3e6     19 1C 1F 20 
0e3ea     24 2A 2E 30 
0e3ee     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
0e3f2     1C 0E 04 00 
0e3f6     FD F7 EE E5 
0e3fa     DF DA D9 D9 
0e3fe     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
0e402     E1 E0 E1 E2 
0e406     E6 E6 E0 D8 
0e40a     D3 D0 CC C4 
0e40e     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
0e412     D9 E2 E6 E7 
0e416     EB F6 FF 01 
0e41a     06 0D 16 19 
0e41e     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
0e422     18 19 1B 22 
0e426     2E 38 43 44 
0e42a     44 44 3D 30 
0e42e     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
0e432     26 22 1C 1B 
0e436     1E 22 26 1F 
0e43a     1E 24 27 25 
0e43e     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
0e442     0C 00 F4 F0 
0e446     F0 F1 FA FF 
0e44a     07 0A 10 16 
0e44e     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
0e452     FC FD FC F7 
0e456     F2 F0 EA E5 
0e45a     E6 EA F2 FA 
0e45e     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
0e462     2B 33 37 34 
0e466     2D 22 1C 1C 
0e46a     18 14 12 15 
0e46e     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
0e472     27 30 34 36 
0e476     34 27 1C 18 
0e47a     13 0F 04 FA 
0e47e     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
0e482     E0 DE E0 E1 
0e486     E0 DF E7 EE 
0e48a     F4 F2 F0 EE 
0e48e     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
0e492     D3 C8 C6 CC 
0e496     D2 D6 D9 E0 
0e49a     EC F1 F3 F7 
0e49e     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
0e4a2     13 13 15 19 
0e4a6     18 14 13 18 
0e4aa     1B 20 2A 33 
0e4ae     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
0e4b2     32 2B 28 28 
0e4b6     26 20 19 19 
0e4ba     1B 1A 19 1A 
0e4be     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
0e4c2     21 21 22 21 
0e4c6     1C 15 09 00 
0e4ca     F3 F2 F2 F1 
0e4ce     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
0e4d2     10 13 10 0E 
0e4d6     09 04 00 00 
0e4da     FE F9 F2 E8 
0e4de     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
0e4e2     F2 F6 FD 02 
0e4e6     10 20 2C 30 
0e4ea     32 31 2D 26 
0e4ee     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
0e4f2     0E 10 14 13 
0e4f6     14 1B 27 2E 
0e4fa     30 2B 26 22 
0e4fe     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
0e502     FE F9 F1 E7 
0e506     E4 E1 DF DA 
0e50a     D3 D0 D2 D8 
0e50e     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
0e512     E5 EC EE E8 
0e516     DC D3 CC C7 
0e51a     C3 C3 C8 CF 
0e51e     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
0e522     F1 FA FF 04 
0e526     09 10 16 1A 
0e52a     1B 1C 1E 1E 
0e52e     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
0e532     33 43 4F 4F 
0e536     4C 49 48 45 
0e53a     3D 37 31 2B 
0e53e     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
0e542     25 27 27 28 
0e546     27 28 2D 32 
0e54a     31 2C 26 1A 
0e54e     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
0e552     F2 F2 F4 F7 
0e556     FF 08 0F 10 
0e55a     0C 09 09 04 
0e55e     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
0e562     ED E5 E4 E5 
0e566     E6 E6 E6 EA 
0e56a     F3 FC 08 16 
0e56e     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
0e572     2E 28 1F 18 
0e576     16 18 13 0C 
0e57a     0A 0F 18 21 
0e57e     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
0e582     2D 2B 21 1E 
0e586     16 0E 04 FA 
0e58a     F3 EE EC E8 
0e58e     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
0e592     D9 D8 D5 D8 
0e596     DE E2 EA EB 
0e59a     EA EA E4 D5 
0e59e     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
0e5a2     C6 C9 CE D4 
0e5a6     DB E5 E8 ED 
0e5aa     F4 FC 02 06 
0e5ae     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
0e5b2     18 13 0C 0C 
0e5b6     16 20 2A 34 
0e5ba     3C 3D 42 44 
0e5be     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
0e5c2     31 2B 26 21 
0e5c6     22 25 24 21 
0e5ca     1F 20 25 2B 
0e5ce     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
0e5d2     2B 26 1C 13 
0e5d6     0A 01 F9 F7 
0e5da     F9 FF 08 0F 
0e5de     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
0e5e2     18 19 18 10 
0e5e6     09 00 FC F6 
0e5ea     F4 F3 F2 ED 
0e5ee     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
0e5f2     0D 1A 25 32 
0e5f6     36 34 32 31 
0e5fa     30 2B 26 1A 
0e5fe     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
0e602     18 20 26 2C 
0e606     2E 2D 2C 2C 
0e60a     2C 26 18 0C 
0e60e     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
0e612     E5 DF DA D6 
0e616     D5 D0 CD CD 
0e61a     CD CE D0 D6 
0e61e     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
0e622     DA CE C7 C2 
0e626     BD BB BB C1 
0e62a     CA CE D2 D9 
0e62e     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
0e632     F8 FD 08 12 
0e636     18 14 13 0C 
0e63a     0C 13 1A 20 
0e63e     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
0e642     43 42 40 42 
0e646     3E 39 30 2B 
0e64a     28 27 26 1E 
0e64e     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
0e652     21 25 2A 2D 
0e656     2E 2C 2A 26 
0e65a     1B 15 09 FD 
0e65e     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
0e662     FF 02 06 09 
0e666     0C 12 14 15 
0e66a     13 09 01 FD 
0e66e     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
0e672     EA EC EB EB 
0e676     EE F8 06 12 
0e67a     1E 26 2C 31 
0e67e     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
0e682     26 21 18 14 
0e686     15 16 20 26 
0e68a     2A 2C 33 3C 
0e68e     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
0e692     26 20 19 0E 
0e696     04 00 F8 F0 
0e69a     EA E6 E2 E1 
0e69e     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
0e6a2     D9 E5 EC EC 
0e6a6     ED EB E6 DA 
0e6aa     D0 C9 C7 C8 
0e6ae     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
0e6b2     D4 DE E4 E8 
0e6b6     EA EC F3 FE 
0e6ba     07 0A 0C 09 
0e6be     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
0e6c2     0A 14 1E 24 
0e6c6     27 2E 36 39 
0e6ca     3C 36 33 30 
0e6ce     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
0e6d2     15 14 13 12 
0e6d6     0E 10 18 1A 
0e6da     21 24 25 27 
0e6de     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
0e6e2     07 00 F9 F7 
0e6e6     FA FC FE FF 
0e6ea     03 09 12 16 
0e6ee     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
0e6f2     0F 07 02 FD 
0e6f6     FA F7 F2 ED 
0e6fa     E8 EC F4 FD 
0e6fe     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
0e702     2B 30 33 34 
0e706     34 30 28 1E 
0e70a     18 14 18 13 
0e70e     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
0e712     2D 32 36 36 
0e716     32 30 26 1C 
0e71a     14 0D 06 FD 
0e71e     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
0e722     E1 DB D6 D0 
0e726     D0 D2 D6 DC 
0e72a     E7 EE F0 EA 
0e72e     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
0e732     CE C9 C3 C7 
0e736     CD D4 DC E1 
0e73a     E5 E7 F0 F6 
0e73e     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
0e742     1A 18 13 12 
0e746     13 14 16 1E 
0e74a     22 2A 31 3C 
0e74e     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
0e752     3E 39 34 31 
0e756     2C 26 21 1C 
0e75a     18 13 14 19 
0e75e     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
0e762     28 2A 2B 26 
0e766     1C 13 06 00 
0e76a     FC F7 F4 F3 
0e76e     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
0e772     08 0D 0F 13 
0e776     10 0C 07 04 
0e77a     00 FC F7 EE 
0e77e     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
0e782     E7 F0 F6 FF 
0e786     0A 14 1E 2A 
0e78a     31 32 30 27 
0e78e     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
0e792     13 10 13 15 
0e796     1E 22 28 31 
0e79a     36 37 32 2E 
0e79e     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
0e7a2     09 03 00 F7 
0e7a6     F1 EA E4 DF 
0e7aa     DA D0 CD D0 
0e7ae     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
0e7b2     EB E8 E8 E6 
0e7b6     DB D5 CE C7 
0e7ba     C6 C9 CF D3 
0e7be     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
0e7c2     EA F1 FA 03 
0e7c6     09 0F 13 0F 
0e7ca     10 12 10 10 
0e7ce     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
0e7d2     2E 33 3A 3F 
0e7d6     44 43 3E 3A 
0e7da     39 37 30 28 
0e7de     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
0e7e2     16 19 1B 1C 
0e7e6     20 28 2E 33 
0e7ea     30 2A 24 1E 
0e7ee     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
0e7f2     FE FA FA FA 
0e7f6     FF 06 0E 10 
0e7fa     16 16 15 13 
0e7fe     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
0e802     01 F8 F2 ED 
0e806     EC EB EE F1 
0e80a     F4 FD 06 12 
0e80e     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
0e812     30 30 2B 26 
0e816     1C 18 14 13 
0e81a     0E 0F 19 21 
0e81e     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
0e822     32 32 2D 26 
0e826     1C 14 0C 04 
0e82a     FD F4 F1 EE 
0e82e     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
0e832     C4 CA CF D4 
0e836     D9 DB DE E1 
0e83a     E0 DC D5 CC 
0e83e     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
0e842     C3 C8 CA CE 
0e846     D0 D6 E0 EC 
0e84a     F6 FD 02 07 
0e84e     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
0e852     10 0D 12 15 
0e856     19 22 2E 36 
0e85a     3C 42 42 46 
0e85e     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
0e862     34 2C 26 21 
0e866     20 1F 18 13 
0e86a     16 1C 22 27 
0e86e     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
0e872     28 21 1C 16 
0e876     0F 09 00 FC 
0e87a     FC FF FF 06 
0e87e     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
0e882     15 15 14 13 
0e886     0E 07 00 FA 
0e88a     F3 F1 F0 ED 
0e88e     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
0e892     FF 0A 14 1E 
0e896     26 2D 2C 2C 
0e89a     2B 26 21 1C 
0e89e     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
0e8a2     1B 1F 28 31 
0e8a6     33 38 3D 32 
0e8aa     32 30 28 21 
0e8ae     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
0e8b2     07 00 ED DF 
0e8b6     D6 D2 D4 D4 
0e8ba     D5 DB DF E2 
0e8be     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
0e8c2     DA D2 C8 C4 
0e8c6     C3 C9 C8 C9 
0e8ca     C7 C9 CD D4 
0e8ce     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
0e8d2     FA 02 06 08 
0e8d6     0C 0A 07 07 
0e8da     08 08 12 16 
0e8de     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
0e8e2     36 36 37 38 
0e8e6     34 2C 27 22 
0e8ea     21 1C 13 0C 
0e8ee     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
0e8f2     16 18 1E 26 
0e8f6     21 20 21 1F 
0e8fa     1A 15 0C 07 
0e8fe     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
0e902     FF 09 10 16 
0e906     19 1B 1F 20 
0e90a     22 1F 18 0F 
0e90e     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
0e912     FC F9 F7 F4 
0e916     FA FF 07 12 
0e91a     1E 26 2D 32 
0e91e     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
0e922     26 1E 1A 13 
0e926     14 12 15 1E 
0e92a     26 2C 31 32 
0e92e     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
0e932     21 1C 16 15 
0e936     13 09 00 F7 
0e93a     EB E1 D8 D0 
0e93e     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
0e942     D8 DB E0 E7 
0e946     E4 DC DA CE 
0e94a     CD CA C7 C6 
0e94e     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
0e952     CC D4 D9 E2 
0e956     EB F3 FE 06 
0e95a     0C 0D 0E 0D 
0e95e     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
0e962     18 22 26 2A 
0e966     2E 37 3C 42 
0e96a     3F 39 3A 39 
0e96e     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
0e972     19 13 0E 0D 
0e976     0E 13 14 15 
0e97a     15 15 18 1C 
0e97e     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
0e982     03 FC F2 EA 
0e986     E8 EB F1 F6 
0e98a     F8 FA 01 08 
0e98e     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
0e992     0E 0A 07 06 
0e996     00 F7 F4 F3 
0e99a     F0 F0 F6 FF 
0e99e     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
0e9a2     25 33 39 3E 
0e9a6     3E 39 34 2E 
0e9aa     26 1A 19 19 
0e9ae     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
0e9b2     37 3D 40 3E 
0e9b6     36 31 2C 27 
0e9ba     24 1F 1A 15 
0e9be     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
0e9c2     E2 DC D5 D2 
0e9c6     D0 D4 DE E2 
0e9ca     E4 E7 E7 E1 
0e9ce     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
0e9d2     CE CC CC C8 
0e9d6     C9 CA CF CF 
0e9da     D6 DE E7 EC 
0e9de     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
0e9e2     0D 0C 08 09 
0e9e6     0D 10 13 15 
0e9ea     1A 24 2D 32 
0e9ee     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
0e9f2     3C 39 36 32 
0e9f6     28 20 18 13 
0e9fa     13 10 13 12 
0e9fe     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
0ea02     18 1B 16 18 
0ea06     13 10 09 00 
0ea0a     F9 F3 F2 F1 
0ea0e     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
0ea12     03 0A 12 13 
0ea16     15 15 13 0E 
0ea1a     0C 09 04 FC 
0ea1e     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
0ea22     F4 F6 FD 03 
0ea26     0A 16 20 2A 
0ea2a     33 3A 3C 3C 
0ea2e     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
0ea32     18 13 13 1A 
0ea36     1F 2A 33 39 
0ea3a     3A 3A 36 33 
0ea3e     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
0ea42     1C 18 0C 02 
0ea46     00 F0 E4 D5 
0ea4a     D2 CC CC D0 
0ea4e     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
0ea52     E1 E4 DC DB 
0ea56     DA D3 CD CE 
0ea5a     CC CC C8 C9 
0ea5e     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
0ea62     E6 EC F9 FF 
0ea66     07 09 08 0E 
0ea6a     0F 0E 10 13 
0ea6e     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
0ea72     2E 32 36 3D 
0ea76     3F 3F 42 40 
0ea7a     3E 36 2B 26 
0ea7e     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
0ea82     14 18 18 1A 
0ea86     1E 1E 1F 22 
0ea8a     22 21 1A 14 
0ea8e     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
0ea92     F8 F7 F7 F4 
0ea96     F7 FC FF 07 
0ea9a     0C 0D 13 13 
0ea9e     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
0eaa2     00 F9 F3 EE 
0eaa6     ED EC F0 F0 
0eaaa     F4 F9 FF 07 
0eaae     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
0eab2     36 32 30 2C 
0eab6     26 1C 13 0F 
0eaba     0F 16 1C 25 
0eabe     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
0eac2     38 34 33 31 
0eac6     2B 27 21 1C 
0eaca     18 0E 01 F9 
0eace     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
0ead2     D2 D8 DA DA 
0ead6     E0 E1 E5 E2 
0eada     E0 DC DA D4 
0eade     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
0eae2     C4 C8 CA CF 
0eae6     D3 D8 DE E6 
0eaea     EC F6 FE FE 
0eaee     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
0eaf2     0D 0C 0F 16 
0eaf6     16 1B 25 2B 
0eafa     2E 36 3C 40 
0eafe     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
0eb02     2D 26 1E 18 
0eb06     0F 0C 0C 0F 
0eb0a     0E 0E 14 18 
0eb0e     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
0eb12     18 13 0F 0E 
0eb16     09 07 01 F9 
0eb1a     F7 F8 FA FF 
0eb1e     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
0eb22     1B 21 26 20 
0eb26     1E 14 13 09 
0eb2a     02 00 FE FA 
0eb2e     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
0eb32     03 0F 1B 24 
0eb36     2E 36 36 40 
0eb3a     39 32 2B 21 
0eb3e     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
0eb42     15 20 28 2E 
0eb46     34 39 37 36 
0eb4a     31 27 26 27 
0eb4e     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
0eb52     06 F9 ED E1 
0eb56     DA CF CF C8 
0eb5a     CF D6 DB DC 
0eb5e     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
0eb62     D2 CE CA C7 
0eb66     C1 C0 C1 C2 
0eb6a     C3 CA CC D8 
0eb6e     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
0eb72     FA 08 09 09 
0eb76     0F 14 14 19 
0eb7a     16 19 24 28 
0eb7e     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
0eb82     49 4F 4C 48 
0eb86     4C 45 39 32 
0eb8a     2B 1F 1C 13 
0eb8e     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
0eb92     10 13 14 16 
0eb96     14 10 0C 0A 
0eb9a     09 04 00 F9 
0eb9e     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
0eba2     E8 E8 F1 F9 
0eba6     FC 07 12 15 
0ebaa     18 19 13 0C 
0ebae     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
0ebb2     FD F9 F9 F9 
0ebb6     F7 FA 03 09 
0ebba     12 1B 27 31 
0ebbe     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
0ebc2     34 2B 1F 1A 
0ebc6     19 19 1C 22 
0ebca     2A 2E 38 3F 
0ebce     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
0ebd2     31 2E 2B 28 
0ebd6     26 18 0D 04 
0ebda     F9 ED E2 DA 
0ebde     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
0ebe2     DC DE DF E1 
0ebe6     DC D9 D8 D0 
0ebea     C8 C8 C2 BB 
0ebee     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
0ebf2     C4 C6 CE D9 
0ebf6     E2 EB F1 F8 
0ebfa     FD 06 04 FF 
0ebfe     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
0ec02     13 15 1E 24 
0ec06     2C 32 38 42 
0ec0a     49 4C 4C 48 
0ec0e     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
0ec12     21 1E 19 14 
0ec16     16 1B 1A 1F 
0ec1a     21 1C 1B 1E 
0ec1e     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
0ec22     0C 07 00 F8 
0ec26     F4 F2 F1 ED 
0ec2a     F0 F6 F9 FF 
0ec2e     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
0ec32     15 0E 09 04 
0ec36     00 FC F9 F7 
0ec3a     F2 F7 F6 F8 
0ec3e     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
0ec42     1E 2A 37 3D 
0ec46     3D 39 31 2D 
0ec4a     26 19 19 16 
0ec4e     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
0ec52     2E 33 37 2E 
0ec56     30 34 32 31 
0ec5a     31 26 21 1C 
0ec5e     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
0ec62     E2 DB D4 D3 
0ec66     D4 D8 D8 DE 
0ec6a     E2 E1 E0 E1 
0ec6e     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
0ec72     C6 C4 C2 C1 
0ec76     C0 BE C3 C9 
0ec7a     CF D5 D9 E7 
0ec7e     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
0ec82     03 09 08 0D 
0ec86     0E 0F 15 18 
0ec8a     1A 21 28 2C 
0ec8e     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
0ec92     46 48 45 3F 
0ec96     3A 32 26 1A 
0ec9a     15 10 14 16 
0ec9e     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
0eca2     1A 18 18 13 
0eca6     0D 09 03 00 
0ecaa     00 FA F2 EE 
0ecae     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
0ecb2     F1 FC 03 0E 
0ecb6     0D 12 14 13 
0ecba     0C 0A 06 04 
0ecbe     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
0ecc2     F8 F8 F9 FF 
0ecc6     08 12 20 27 
0ecca     2E 3A 3E 39 
0ecce     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
0ecd2     20 1A 18 1A 
0ecd6     24 28 2E 33 
0ecda     36 39 3A 39 
0ecde     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
0ece2     2C 28 1F 13 
0ece6     04 F7 EA E2 
0ecea     DA D4 D3 D5 
0ecee     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
0ecf2     DE DE DF D5 
0ecf6     CE CE C9 BD 
0ecfa     BA B7 B7 B7 
0ecfe     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
0ed02     D6 DE E6 EE 
0ed06     F2 F8 FF 01 
0ed0a     04 0A 0D 0E 
0ed0e     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
0ed12     21 2A 33 3D 
0ed16     42 46 49 4C 
0ed1a     4C 4A 40 34 
0ed1e     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
0ed22     19 1A 1A 1A 
0ed26     1B 1C 21 1F 
0ed2a     1C 15 13 12 
0ed2e     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
0ed32     01 F8 F4 EE 
0ed36     EE F2 F4 FA 
0ed3a     03 0E 10 14 
0ed3e     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
0ed42     09 00 FD F9 
0ed46     F3 F1 F2 F0 
0ed4a     F1 F8 FA 03 
0ed4e     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
0ed52     33 34 34 30 
0ed56     27 21 1B 19 
0ed5a     18 16 1B 21 
0ed5e     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
0ed62     38 3A 39 37 
0ed66     38 37 30 2A 
0ed6a     26 1C 10 01 
0ed6e     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
0ed72     D6 D3 D2 D5 
0ed76     D9 DE DE DF 
0ed7a     E1 DC D6 D2 
0ed7e     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
0ed82     BB BA BA BE 
0ed86     C3 C9 D4 DE 
0ed8a     E6 F1 F6 FA 
0ed8e     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
0ed92     0E 13 13 15 
0ed96     18 1C 21 2A 
0ed9a     2B 31 3C 42 
0ed9e     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
0eda2     44 39 30 27 
0eda6     22 1F 19 14 
0edaa     15 15 19 1A 
0edae     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
0edb2     0C 0D 0C 0A 
0edb6     07 00 F9 F3 
0edba     F2 EB E6 EB 
0edbe     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
0edc2     08 12 14 14 
0edc6     15 13 0F 0A 
0edca     04 00 FD FA 
0edce     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
0edd2     FF 0A 14 1F 
0edd6     2A 33 38 3C 
0edda     39 36 34 2B 
0edde     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
0ede2     1C 20 26 2A 
0ede6     2D 31 33 37 
0edea     3A 36 39 36 
0edee     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
0edf2     13 04 F9 ED 
0edf6     E0 DC DA D0 
0edfa     D2 D4 D4 DC 
0edfe     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
0ee02     D8 D9 D3 CC 
0ee06     C7 C0 BD B8 
0ee0a     B6 B8 BE C1 
0ee0e     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
0ee12     F1 F8 FA FF 
0ee16     07 07 0A 0D 
0ee1a     10 16 1A 1B 
0ee1e     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
0ee22     36 3D 45 4B 
0ee26     4C 49 45 3D 
0ee2a     36 30 26 21 
0ee2e     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
0ee32     1A 18 18 13 
0ee36     10 0F 0F 0C 
0ee3a     0D 0A 07 03 
0ee3e     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
0ee42     EC EC EC F3 
0ee46     FA FF 09 0C 
0ee4a     14 1A 19 18 
0ee4e     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
0ee52     02 FE FA F8 
0ee56     F8 F9 FF 07 
0ee5a     0F 1A 20 2C 
0ee5e     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
0ee62     31 2B 26 1E 
0ee66     1A 18 19 1A 
0ee6a     1B 1F 27 2B 
0ee6e     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
0ee72     36 34 34 33 
0ee76     2B 26 15 07 
0ee7a     FC F2 E8 E0 
0ee7e     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
0ee82     D8 D9 DB E0 
0ee86     DE DC DE DA 
0ee8a     D8 D4 CE C7 
0ee8e     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
0ee92     BE C3 CE D5 
0ee96     DE E6 F0 F8 
0ee9a     FD 01 07 0C 
0ee9e     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
0eea2     1B 20 20 22 
0eea6     27 2D 37 3E 
0eeaa     46 4A 4E 4E 
0eeae     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
0eeb2     2B 26 1C 19 
0eeb6     1A 1A 18 13 
0eeba     13 10 0E 0C 
0eebe     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
0eec2     04 00 FA F7 
0eec6     F0 E8 E4 E4 
0eeca     E6 EA EC F6 
0eece     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
0eed2     10 12 13 0E 
0eed6     0C 07 02 01 
0eeda     FC FA F9 F8 
0eede     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
0eee2     1B 25 2E 33 
0eee6     3A 39 33 31 
0eeea     2D 27 21 1A 
0eeee     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
0eef2     25 2A 2D 30 
0eef6     34 36 37 3D 
0eefa     3F 39 32 28 
0eefe     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
0ef02     F0 E6 DE D5 
0ef06     D4 D3 D3 D9 
0ef0a     D9 D9 D9 DB 
0ef0e     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
0ef12     CA C4 BD B8 
0ef16     B6 B6 B6 BB 
0ef1a     C1 CC D4 DB 
0ef1e     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
0ef22     FD 02 06 0C 
0ef26     10 12 15 18 
0ef2a     19 1A 20 25 
0ef2e     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
0ef32     4C 4E 50 4C 
0ef36     40 36 32 2D 
0ef3a     26 22 21 20 
0ef3e     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
0ef42     18 16 15 13 
0ef46     10 0E 0E 09 
0ef4a     02 FD FC F4 
0ef4e     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
0ef52     F6 FA FF 0A 
0ef56     0F 15 18 1A 
0ef5a     18 16 10 0C 
0ef5e     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
0ef62     F8 FC FF 02 
0ef66     07 0E 19 22 
0ef6a     2A 31 33 37 
0ef6e     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
0ef72     1C 19 18 14 
0ef76     16 1B 21 24 
0ef7a     22 25 28 31 
0ef7e     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
0ef82     31 2B 26 15 
0ef86     09 01 F7 E8 
0ef8a     DF D8 D8 D6 
0ef8e     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
0ef92     DE DF DF DF 
0ef96     DB D8 D3 CC 
0ef9a     C4 C0 BC B7 
0ef9e     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
0efa2     D3 DB E2 EB 
0efa6     F1 F6 FA FF 
0efaa     06 09 0C 12 
0efae     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
0efb2     20 26 2A 30 
0efb6     3A 44 46 49 
0efba     4C 48 40 39 
0efbe     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
0efc2     1E 19 16 15 
0efc6     14 14 10 0D 
0efca     0E 0C 09 07 
0efce     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
0efd2     F4 EE EC E8 
0efd6     E7 EB F1 F4 
0efda     FA 03 0D 14 
0efde     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
0efe2     19 15 0F 09 
0efe6     06 03 03 01 
0efea     01 07 0D 16 
0efee     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
0eff2     39 3C 3A 39 
0eff6     36 2D 26 1E 
0effa     1B 1E 1F 1F 
0effe     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
0f002     28 2C 31 34 
0f006     36 36 32 2E 
0f00a     2B 21 13 04 
0f00e     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
0f012     DB D6 D4 D5 
0f016     D5 D6 D9 DB 
0f01a     DA DB DB DA 
0f01e     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
0f022     B8 B6 B4 B5 
0f026     BC C3 C9 D2 
0f02a     D9 E2 EA EC 
0f02e     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
0f032     08 0D 10 12 
0f036     14 18 1A 1F 
0f03a     26 2D 38 42 
0f03e     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
0f042     44 3E 3A 34 
0f046     30 26 21 1F 
0f04a     19 18 16 18 
0f04e     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
0f052     0C 0A 08 07 
0f056     02 FC F4 F1 
0f05a     ED EB E8 E5 
0f05e     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
0f062     06 0D 10 1A 
0f066     1C 1C 16 16 
0f06a     13 0E 07 02 
0f06e     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
0f072     06 0D 16 1E 
0f076     26 2D 33 39 
0f07a     3C 34 30 2A 
0f07e     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
0f082     1E 19 19 18 
0f086     19 1E 25 2A 
0f08a     30 34 37 39 
0f08e     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
0f092     1C 0E 04 F9 
0f096     F2 ED E6 DF 
0f09a     DB DA DB D9 
0f09e     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
0f0a2     E4 DF DC DA 
0f0a6     D0 C4 BE BA 
0f0aa     B8 B5 BA BE 
0f0ae     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
0f0b2     E5 E7 EE F3 
0f0b6     F9 FF 02 06 
0f0ba     08 0A 0C 10 
0f0be     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
0f0c2     2C 36 3F 43 
0f0c6     44 46 43 3E 
0f0ca     39 32 28 26 
0f0ce     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
0f0d2     16 18 13 0F 
0f0d6     0D 0F 0E 0E 
0f0da     0A 06 03 FF 
0f0de     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
0f0e2     E8 EA EA EC 
0f0e6     F3 FA 03 0A 
0f0ea     10 18 1C 20 
0f0ee     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
0f0f2     0D 09 09 04 
0f0f6     04 07 09 0E 
0f0fa     14 1A 24 2D 
0f0fe     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
0f102     34 31 30 28 
0f106     26 24 1F 1A 
0f10a     18 16 19 1B 
0f10e     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
0f112     33 36 38 38 
0f116     32 27 21 15 
0f11a     09 00 F4 ED 
0f11e     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
0f122     D9 DB DA DE 
0f126     E2 E6 E7 E5 
0f12a     E0 DF D5 CE 
0f12e     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
0f132     BE C2 C8 CE 
0f136     D5 D9 E0 E6 
0f13a     EE F6 FA FF 
0f13e     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
0f142     0F 0F 10 15 
0f146     19 24 2C 32 
0f14a     38 3F 44 44 
0f14e     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
0f152     32 2B 24 1F 
0f156     1C 19 16 15 
0f15a     13 10 10 10 
0f15e     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
0f162     04 00 FC F7 
0f166     F0 E8 E4 E5 
0f16a     E4 E6 ED F2 
0f16e     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
0f172     14 1A 19 18 
0f176     19 13 0E 0C 
0f17a     07 04 04 03 
0f17e     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
0f182     20 27 2D 31 
0f186     34 36 32 32 
0f18a     30 30 28 26 
0f18e     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
0f192     18 19 1B 1E 
0f196     24 2A 31 36 
0f19a     3A 3C 36 31 
0f19e     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
0f1a2     00 F4 ED E6 
0f1a6     E1 DE DC DC 
0f1aa     DF E0 E2 E6 
0f1ae     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
0f1b2     DB D5 CD C7 
0f1b6     C1 BE BC C1 
0f1ba     C6 C9 D0 D6 
0f1be     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
0f1c2     F6 FF 06 08 
0f1c6     09 09 0A 0C 
0f1ca     10 12 16 1E 
0f1ce     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
0f1d2     3F 42 45 44 
0f1d6     40 3C 39 30 
0f1da     28 26 21 1B 
0f1de     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
0f1e2     13 13 10 0E 
0f1e6     0D 09 09 03 
0f1ea     00 FC F3 ED 
0f1ee     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
0f1f2     EB F1 F7 FE 
0f1f6     06 0C 12 16 
0f1fa     1A 1B 18 15 
0f1fe     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
0f202     03 03 03 03 
0f206     08 10 1B 24 
0f20a     28 2D 32 32 
0f20e     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
0f212     2B 26 21 1C 
0f216     18 15 14 13 
0f21a     14 19 1E 24 
0f21e     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
0f222     30 2B 26 1A 
0f226     13 06 00 F2 
0f22a     E8 E1 DC D8 
0f22e     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
0f232     DC E0 E1 E2 
0f236     E0 DE DA D3 
0f23a     CA C3 BE BC 
0f23e     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
0f242     C9 CF D6 DA 
0f246     E2 EC F3 FA 
0f24a     FF 04 08 08 
0f24e     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
0f252     15 1B 25 2A 
0f256     31 37 3D 42 
0f25a     46 45 43 3F 
0f25e     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
0f262     26 20 1C 1C 
0f266     18 18 19 18 
0f26a     13 0F 10 10 
0f26e     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
0f272     F9 F3 EE EA 
0f276     E8 EA EB EE 
0f27a     F3 FA 03 0C 
0f27e     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
0f282     19 16 15 14 
0f286     10 0C 04 03 
0f28a     02 04 09 12 
0f28e     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
0f292     30 33 36 36 
0f296     36 34 30 2D 
0f29a     27 24 1F 1B 
0f29e     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
0f2a2     1F 25 2C 34 
0f2a6     38 39 39 34 
0f2aa     2E 26 1C 13 
0f2ae     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
0f2b2     E5 DE DA D9 
0f2b6     DA DB DE E1 
0f2ba     E5 E8 E7 E5 
0f2be     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
0f2c2     C7 C2 BE BE 
0f2c6     C0 C2 C7 CD 
0f2ca     D2 D8 DE E8 
0f2ce     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
0f2d2     03 06 04 06 
0f2d6     08 0D 10 15 
0f2da     1A 21 2A 31 
0f2de     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
0f2e2     3E 3C 39 36 
0f2e6     32 2B 26 20 
0f2ea     1C 1A 1A 16 
0f2ee     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
0f2f2     13 0F 0D 0C 
0f2f6     09 00 FC F7 
0f2fa     F2 F0 EC EA 
0f2fe     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
0f302     FF 09 0F 14 
0f306     18 1A 1E 1B 
0f30a     1B 1A 15 13 
0f30e     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
0f312     0C 10 15 1B 
0f316     22 2B 2D 32 
0f31a     38 38 36 37 
0f31e     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
0f322     20 1A 15 13 
0f326     10 13 19 20 
0f32a     27 2D 31 32 
0f32e     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
0f332     21 18 0F 04 
0f336     FC F0 E6 E1 
0f33a     DB D6 D8 D9 
0f33e     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
0f342     E6 E4 DF DB 
0f346     D5 CE CC C7 
0f34a     C2 C0 C1 C1 
0f34e     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
0f352     D9 E2 EC F3 
0f356     F8 FC FE FF 
0f35a     02 03 03 08 
0f35e     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
0f362     22 2A 32 36 
0f366     3A 3C 3E 3D 
0f36a     3C 37 31 2B 
0f36e     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
0f372     16 14 14 13 
0f376     0F 0F 12 13 
0f37a     0D 09 07 02 
0f37e     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
0f382     EA E7 E7 EC 
0f386     F1 F6 FC 03 
0f38a     0A 0D 13 16 
0f38e     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
0f392     15 13 0C 0A 
0f396     09 07 09 0E 
0f39a     14 19 1F 26 
0f39e     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
0f3a2     36 34 37 34 
0f3a6     30 2B 26 1E 
0f3aa     18 13 13 14 
0f3ae     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
0f3b2     2E 31 33 31 
0f3b6     30 2D 26 1E 
0f3ba     13 0C 02 F8 
0f3be     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
0f3c2     DB DE E2 E5 
0f3c6     E7 E8 E7 E8 
0f3ca     E5 DF DA D5 
0f3ce     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
0f3d2     C6 C8 C7 C8 
0f3d6     CD D3 D9 E4 
0f3da     EC F1 F8 FD 
0f3de     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
0f3e2     03 08 0A 0E 
0f3e6     14 1B 24 27 
0f3ea     2C 32 36 3C 
0f3ee     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
0f3f2     30 2B 26 20 
0f3f6     1F 1C 18 13 
0f3fa     12 0F 0F 0F 
0f3fe     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
0f402     06 02 FE F8 
0f406     F1 ED E8 E6 
0f40a     E6 EA EE F3 
0f40e     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
0f412     12 18 1A 1B 
0f416     1E 1A 16 13 
0f41a     0E 0D 0D 0D 
0f41e     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
0f422     20 26 2B 2E 
0f426     34 36 36 37 
0f42a     39 38 33 2D 
0f42e     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
0f432     13 14 19 1E 
0f436     21 25 2A 2E 
0f43a     30 30 2D 28 
0f43e     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
0f442     03 F9 F0 E6 
0f446     DF DB D9 DA 
0f44a     D9 DC E1 E5 
0f44e     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
0f452     DC D5 D3 CD 
0f456     CA C9 C7 C3 
0f45a     C4 C8 CE D3 
0f45e     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
0f462     F6 FA FF 03 
0f466     03 06 06 04 
0f46a     0C 12 14 18 
0f46e     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
0f472     34 38 3C 3D 
0f476     3A 39 33 2E 
0f47a     2D 26 1F 1C 
0f47e     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
0f482     13 13 0F 0D 
0f486     0D 0A 07 01 
0f48a     00 FA F4 F0 
0f48e     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
0f492     E8 ED F3 F6 
0f496     FD 01 0C 0F 
0f49a     15 19 1A 19 
0f49e     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
0f4a2     0C 0A 0D 0D 
0f4a6     10 15 19 21 
0f4aa     28 2B 2D 32 
0f4ae     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
0f4b2     33 30 28 20 
0f4b6     18 16 13 12 
0f4ba     00 00 0D 08 
0f4be     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
0f4c2     16 18 1E 18 
0f4c6     1C 1A 1F 18 
0f4ca     12 19 14 13 
0f4ce     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
0f4d2     15 13 0D 14 
0f4d6     1C 1E 1B 18 
0f4da     18 1F 13 16 
0f4de     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
0f4e2     F3 F2 EB F1 
0f4e6     EA F7 F2 F6 
0f4ea     F0 F7 F2 F7 
0f4ee     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
0f4f2     E8 D8 DC DF 
0f4f6     DF D3 DB E6 
0f4fa     E8 E4 DE EB 
0f4fe     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
0f502     F7 F7 F8 00 
0f506     00 FE 07 01 
0f50a     01 06 15 1C 
0f50e     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
0f512     1A 21 1E 1F 
0f516     10 14 12 0E 
0f51a     08 13 18 0C 
0f51e     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
0f522     09 08 0A 08 
0f526     00 03 00 FA 
0f52a     F4 FC FA F8 
0f52e     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
0f532     00 0C 0D 0D 
0f536     0F 13 14 0E 
0f53a     10 18 12 0E 
0f53e     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
0f542     19 15 0E 13 
0f546     14 1A 14 1C 
0f54a     20 22 21 26 
0f54e     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
0f552     14 10 07 06 
0f556     00 00 F3 1A 
0f55a     F7 2A EB 2A 
0f55e     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
0f562     10 3E 30 2A 
0f566     00 13 1A 0E 
0f56a     F3 E6 DB FC 
0f56e     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
0f572     CE D5 F7 D6 
0f576     C7 C9 CE D5 
0f57a     D6 C7 BB D8 
0f57e     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
0f582     D0 D2 E4 D6 
0f586     CC FC CC C7 
0f58a     B5 D5 00 EB 
0f58e     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
0f592     1E 1E 2A 4A 
0f596     3E 4A 37 48 
0f59a     54 2A 21 37 
0f59e     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
0f5a2     2C 2A 0C 09 
0f5a6     25 1A FE 0E 
0f5aa     1A FC 00 09 
0f5ae     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
0f5b2     E1 EB EC DF 
0f5b6     BD B0 00 EC 
0f5ba     EC E6 00 2A 
0f5be     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
0f5c2     10 2A 1F 0F 
0f5c6     13 2A F7 EB 
0f5ca     F7 EB 00 06 
0f5ce     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
0f5d2     0E 13 09 F8 
0f5d6     13 12 F7 F2 
0f5da     F4 F7 EA FC 
0f5de     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
0f5e2     E1 D8 CC 09 
0f5e6     EB EC FC 00 
0f5ea     25 1F 2A 00 
0f5ee     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
0f5f2     F7 2A 18 F2 
0f5f6     F1 F7 FC 00 
0f5fa     09 06 0D 09 
0f5fe     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
0f602     DE F3 F2 E2 
0f606     ED F1 EC F3 
0f60a     00 EC F7 00 
0f60e     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
0f612     EC E2 E0 E1 
0f616     00 2A 2A 3F 
0f61a     1F 1C 39 3F 
0f61e     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
0f622     00 0E 01 00 
0f626     FE 07 1A 0E 
0f62a     00 F2 00 0E 
0f62e     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
0f632     E2 EE FF E7 
0f636     D9 F6 C8 F0 
0f63a     E4 C1 D5 B6 
0f63e     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
0f642     EB 13 1A 46 
0f646     40 2E 24 3F 
0f64a     44 20 34 39 
0f64e     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
0f652     14 21 2A 34 
0f656     39 32 2A 3E 
0f65a     30 0D 19 2C 
0f65e     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
0f662     1A 10 1A 09 
0f666     15 14 F8 00 
0f66a     EB F7 00 F7 
0f66e     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
0f672     2A 1F 09 0D 
0f676     00 09 ED 09 
0f67a     04 DB DA D6 
0f67e     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
0f682     00 FA DF C6 
0f686     E8 D9 B0 C8 
0f68a     DB D5 CF ED 
0f68e     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
0f692     F3 00 E1 E0 
0f696     C6 D4 E0 D5 
0f69a     D6 D6 00 1C 
0f69e     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
0f6a2     2D 3E 34 2A 
0f6a6     3E 34 07 12 
0f6aa     1E 13 14 1A 
0f6ae     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
0f6b2     00 18 00 EC 
0f6b6     0E 08 00 09 
0f6ba     13 1A 00 09 
0f6be     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
0f6c2     EC DA E0 DE 
0f6c6     DB E8 CC 00 
0f6ca     1B 32 34 2A 
0f6ce     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
0f6d2     06 2A 14 FC 
0f6d6     F7 00 06 09 
0f6da     0E 1C 2B 36 
0f6de     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
0f6e2     FC 0D 0F FC 
0f6e6     0D 1E 09 13 
0f6ea     00 FD 13 14 
0f6ee     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
0f6f2     04 F7 F2 EB 
0f6f6     1B 2A 2B 34 
0f6fa     1C 1A 19 14 
0f6fe     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
0f702     D9 E8 F2 E6 
0f706     EB F1 00 00 
0f70a     00 E4 F1 ED 
0f70e     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
0f712     E0 E6 09 F7 
0f716     04 EE E0 18 
0f71a     F4 EB E1 EB 
0f71e     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
0f722     EB 0E 2B 3E 
0f726     3F 3C 32 43 
0f72a     34 1A 2A 30 
0f72e     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
0f732     00 03 0E 08 
0f736     19 09 FE 03 
0f73a     00 E0 EB FE 
0f73e     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
0f742     00 F2 E6 D5 
0f746     F2 E1 E1 CC 
0f74a     D0 E6 E0 F2 
0f74e     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
0f752     3E 34 30 2B 
0f756     3C 2A 03 31 
0f75a     30 0A 06 12 
0f75e     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
0f762     2E 3E 2A 27 
0f766     3C 14 13 13 
0f76a     14 14 01 27 
0f76e     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
0f772     0E 14 09 F7 
0f776     EC 00 04 0E 
0f77a     00 ED 00 1C 
0f77e     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
0f782     19 18 00 FC 
0f786     0E 00 EC E4 
0f78a     E6 E0 E4 EB 
0f78e     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
0f792     E0 F2 CE C1 
0f796     D5 D0 D6 D5 
0f79a     EC EB EB EC 
0f79e     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
0f7a2     D9 D0 EB DE 
0f7a6     F9 DB DB 00 
0f7aa     0E 32 3C 3D 
0f7ae     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
0f7b2     2A 43 30 1A 
0f7b6     13 0E 14 0E 
0f7ba     19 18 2A 21 
0f7be     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
0f7c2     FC 01 09 EE 
0f7c6     10 00 00 0E 
0f7ca     F2 E6 F2 F2 
0f7ce     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
0f7d2     EB F2 DE E0 
0f7d6     00 13 31 37 
0f7da     2A 25 34 2A 
0f7de     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
0f7e2     00 09 08 04 
0f7e6     09 1F 24 2D 
0f7ea     2C 13 30 21 
0f7ee     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
0f7f2     00 09 14 09 
0f7f6     15 F2 06 03 
0f7fa     00 FC E1 00 
0f7fe     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
0f802     F7 00 19 21 
0f806     30 1A 0A 22 
0f80a     09 F3 09 09 
0f80e     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
0f812     EC F7 F6 00 
0f816     01 00 F1 F2 
0f81a     EC D2 D9 EB 
0f81e     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
0f822     F7 00 E4 F1 
0f826     F0 F0 EC D5 
0f82a     EC EB FD EE 
0f82e     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
0f832     34 34 30 34 
0f836     48 2A 1E 38 
0f83a     39 1A 14 18 
0f83e     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
0f842     1B 2B 04 0F 
0f846     18 00 00 F3 
0f84a     0E FC FC 00 
0f84e     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
0f852     EC E8 EB D6 
0f856     D5 D9 E8 F7 
0f85a     E1 DB EE 09 
0f85e     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
0f862     2A 34 0E 13 
0f866     27 2A 0D 09 
0f86a     0E 09 0E 12 
0f86e     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
0f872     26 30 0E 09 
0f876     24 14 09 13 
0f87a     18 09 1F 00 
0f87e     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
0f882     EC 00 FE 06 
0f886     0D EC F7 F7 
0f88a     0D 22 28 1F 
0f88e     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
0f892     FA 0E 00 ED 
0f896     E8 F7 E4 ED 
0f89a     F3 F1 0A F3 
0f89e     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
0f8a2     CC E2 E1 DB 
0f8a6     EB E1 F7 00 
0f8aa     E2 E6 EC F1 
0f8ae     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
0f8b2     F7 F7 DB E4 
0f8b6     FC 0E 26 36 
0f8ba     2A 24 44 2A 
0f8be     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
0f8c2     14 13 14 0E 
0f8c6     04 14 13 26 
0f8ca     10 01 1F 09 
0f8ce     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
0f8d2     F7 09 F8 12 
0f8d6     00 E7 F3 E4 
0f8da     FA DB D5 E1 
0f8de     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
0f8e2     EB FE 13 2A 
0f8e6     37 21 24 3F 
0f8ea     21 10 26 2A 
0f8ee     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
0f8f2     14 19 18 2A 
0f8f6     2A 2A 2A 2A 
0f8fa     25 09 13 18 
0f8fe     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
0f902     1F 09 FE 04 
0f906     00 09 F7 FA 
0f90a     FC FE 14 FC 
0f90e     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
0f912     1E 1F 09 13 
0f916     1A 00 F4 09 
0f91a     00 F7 EB F7 
0f91e     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
0f922     00 00 DB F7 
0f926     ED DF CC DF 
0f92a     E1 D2 EB E1 
0f92e     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
0f932     DA F1 EC DE 
0f936     E0 DB F7 F7 
0f93a     E6 E4 EB 00 
0f93e     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
0f942     3E 39 1F 1E 
0f946     37 2B 14 22 
0f94a     16 14 0E 0D 
0f94e     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
0f952     13 13 00 FE 
0f956     09 01 FC 09 
0f95a     FD 09 0D ED 
0f95e     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
0f962     D8 E6 DB FD 
0f966     F9 E8 EA F1 
0f96a     02 1C 34 2A 
0f96e     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
0f972     24 25 21 0C 
0f976     0F 15 09 1C 
0f97a     0E 1B 3E 1F 
0f97e     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
0f982     0E 1F 09 13 
0f986     14 0C 1E 14 
0f98a     06 00 00 06 
0f98e     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
0f992     10 04 F4 F2 
0f996     FC 00 10 25 
0f99a     0D 10 1F 0E 
0f99e     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
0f9a2     F7 F2 F9 EB 
0f9a6     EC F7 00 04 
0f9aa     ED F2 F7 EC 
0f9ae     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
0f9b2     F0 EA E8 06 
0f9b6     ED F3 E1 F2 
0f9ba     FA DF ED DE 
0f9be     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
0f9c2     E8 F3 03 24 
0f9c6     2C 1B 2E 3C 
0f9ca     2A 1E 26 34 
0f9ce     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
0f9d2     14 0E 01 1C 
0f9d6     14 06 03 0E 
0f9da     04 F2 00 00 
0f9de     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
0f9e2     04 F6 EC E0 
0f9e6     EA EC D5 D6 
0f9ea     D3 EB FC ED 
0f9ee     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
0f9f2     26 2A 1C 2E 
0f9f6     39 15 18 2A 
0f9fa     2A 19 0C 1F 
0f9fe     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
0fa02     3C 2B 25 2A 
0fa06     30 2A 0E 2A 
0fa0a     14 1A 1C 0A 
0fa0e     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
0fa12     00 13 00 00 
0fa16     FC FF 13 0D 
0fa1a     00 F8 FC FD 
0fa1e     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
0fa22     1E 14 00 FC 
0fa26     0F 00 F2 FC 
0fa2a     EB EE F3 E7 
0fa2e     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
0fa32     EB ED D6 D0 
0fa36     E1 D9 E0 E1 
0fa3a     DB F8 ED EC 
0fa3e     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
0fa42     E2 D8 DE F2 
0fa46     F3 E6 E0 ED 
0fa4a     F3 0E 2A 1C 
0fa4e     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
0fa52     24 30 2C 13 
0fa56     1A 1A 10 14 
0fa5a     01 1E 1E 14 
0fa5e     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
0fa62     09 09 00 10 
0fa66     00 00 09 0D 
0fa6a     FC E6 F7 F2 
0fa6e     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
0fa72     00 F8 EE ED 
0fa76     F7 FE 1E 25 
0fa7a     1F 2A 37 2A 
0fa7e     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
0fa82     13 0F 10 0E 
0fa86     0E 0E 27 2C 
0fa8a     1F 1E 26 2A 
0fa8e     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
0fa92     1A 01 18 13 
0fa96     0D 04 F3 09 
0fa9a     FE FD F7 F1 
0fa9e     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
0faa2     F7 F6 FC 1A 
0faa6     1A 04 1C 1A 
0faaa     09 FC 01 0E 
0faae     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
0fab2     FC EC F7 00 
0fab6     01 F2 EE FE 
0faba     E1 DE EB E1 
0fabe     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
0fac2     FD 00 EC E8 
0fac6     F8 F0 F2 E1 
0faca     E4 F7 FD F7 
0face     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
0fad2     24 21 1C 39 
0fad6     3E 1A 22 34 
0fada     2A 1A 14 18 
0fade     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
0fae2     19 14 08 03 
0fae6     14 F9 FC 04 
0faea     F7 0E F3 FF 
0faee     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
0faf2     E6 EB E0 DB 
0faf6     D0 D5 F0 F7 
0fafa     EC E2 F0 EB 
0fafe     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
0fb02     2A 30 1A 13 
0fb06     2B 1A 14 13 
0fb0a     0D 13 14 13 
0fb0e     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
0fb12     2A 2C 18 1E 
0fb16     25 13 2A 15 
0fb1a     19 1F 1C 14 
0fb1e     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
0fb22     01 F7 00 0E 
0fb26     10 00 FC F7 
0fb2a     FC 0E 25 08 
0fb2e     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
0fb32     00 09 00 F2 
0fb36     FA ED F8 EC 
0fb3a     ED FC F7 F7 
0fb3e     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
0fb42     E0 D6 E8 E4 
0fb46     E0 EB ED FD 
0fb4a     EC DC EC E6 
0fb4e     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
0fb52     F3 F6 E1 E8 
0fb56     E1 F7 13 14 
0fb5a     1C 2A 34 2A 
0fb5e     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
0fb62     18 14 13 14 
0fb66     09 09 1B 18 
0fb6a     14 09 1A 09 
0fb6e     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
0fb72     06 01 0D 06 
0fb76     09 F2 EB EE 
0fb7a     ED F0 DC E0 
0fb7e     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
0fb82     F3 F1 FA 27 
0fb86     1E 18 34 32 
0fb8a     25 13 27 27 
0fb8e     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
0fb92     12 0D 19 21 
0fb96     2E 1A 24 2A 
0fb9a     14 1E 14 13 
0fb9e     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
0fba2     18 14 F9 00 
0fba6     00 00 00 F2 
0fbaa     F1 00 0D 00 
0fbae     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
0fbb2     0F 09 09 1C 
0fbb6     1A 00 00 04 
0fbba     04 F4 F9 ED 
0fbbe     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
0fbc2     FC FC E8 F3 
0fbc6     F9 D9 F0 E1 
0fbca     EB F3 E5 F6 
0fbce     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
0fbd2     F1 ED F7 ED 
0fbd6     DE E8 F8 01 
0fbda     F1 F2 F6 E6 
0fbde     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
0fbe2     38 39 1C 24 
0fbe6     32 2A 1E 14 
0fbea     13 13 09 09 
0fbee     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
0fbf2     0E 09 FC 04 
0fbf6     FD 00 04 FE 
0fbfa     00 FE 07 EE 
0fbfe     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
0fc02     DB D3 DB F1 
0fc06     F2 F2 EB E6 
0fc0a     EB 09 1A 0E 
0fc0e     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
0fc12     1E 2A 18 1C 
0fc16     0E 13 1E 0D 
0fc1a     19 20 32 24 
0fc1e     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
0fc22     21 1C 2A 1F 
0fc26     1C 1C 22 2A 
0fc2a     0E 09 06 09 
0fc2e     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
0fc32     1C 0E 04 07 
0fc36     ED FE 13 14 
0fc3a     0C 18 26 09 
0fc3e     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
0fc42     F9 F2 F3 F3 
0fc46     E7 F0 F7 F7 
0fc4a     EC EB F7 D9 
0fc4e     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
0fc52     DF EA E6 FC 
0fc56     F7 E2 E5 E4 
0fc5a     EA EC D6 D9 
0fc5e     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
0fc62     EC E0 F7 19 
0fc66     0D 15 2A 37 
0fc6a     22 19 2D 21 
0fc6e     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
0fc72     0D 0C 08 1A 
0fc76     18 04 13 0E 
0fc7a     08 0D 01 0D 
0fc7e     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
0fc82     13 00 F4 F1 
0fc86     EA F2 EC E4 
0fc8a     D9 F7 FF F3 
0fc8e     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
0fc92     1A 18 19 34 
0fc96     30 1F 19 2A 
0fc9a     1E 18 14 0E 
0fc9e     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
0fca2     24 25 13 32 
0fca6     1B 19 1F 13 
0fcaa     1E 18 18 0D 
0fcae     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
0fcb2     00 FF 09 FA 
0fcb6     F2 F7 01 09 
0fcba     00 01 ED E8 
0fcbe     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
0fcc2     1C 14 00 00 
0fcc6     00 FF FC F0 
0fcca     F3 F2 F0 E8 
0fcce     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
0fcd2     FC E6 EB E4 
0fcd6     E8 F3 EB F2 
0fcda     F0 00 00 F2 
0fcde     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
0fce2     F7 DE EB 00 
0fce6     00 00 F9 EC 
0fcea     F7 13 1B 14 
0fcee     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
0fcf2     2C 27 22 20 
0fcf6     0D 1C 0D 04 
0fcfa     04 0D 1C 00 
0fcfe     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
0fd02     FC 00 01 00 
0fd06     00 F6 03 00 
0fd0a     EC E8 DB EB 
0fd0e     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
0fd12     F7 ED F8 F2 
0fd16     DE F7 09 12 
0fd1a     0C 2A 34 1F 
0fd1e     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
0fd22     18 0E 14 15 
0fd26     09 16 24 2A 
0fd2a     1C 33 2A 26 
0fd2e     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
0fd32     21 1A 16 26 
0fd36     18 09 09 09 
0fd3a     04 10 00 F9 
0fd3e     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
0fd42     04 F0 00 13 
0fd46     0A 09 1C 2A 
0fd4a     04 03 04 00 
0fd4e     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
0fd52     EE E8 E6 00 
0fd56     EC E6 FA E4 
0fd5a     E6 DF DB E6 
0fd5e     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
0fd62     F8 EE EB E1 
0fd66     EC EB EC DE 
0fd6a     D5 F4 F2 F6 
0fd6e     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
0fd72     10 06 19 31 
0fd76     30 1C 22 2A 
0fd7a     1E 25 10 14 
0fd7e     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
0fd82     1F 07 09 14 
0fd86     07 0F 00 06 
0fd8a     0E 0D 0D FD 
0fd8e     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
0fd92     F1 ED F7 EC 
0fd96     E1 E0 F8 FD 
0fd9a     FF 04 EC F3 
0fd9e     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
0fda2     3C 30 21 26 
0fda6     1F 24 1A 13 
0fdaa     10 14 0F 09 
0fdae     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
0fdb2     2A 1E 21 14 
0fdb6     1E 1A 1C 14 
0fdba     0D 13 14 0A 
0fdbe     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
0fdc2     00 EC FE 06 
0fdc6     06 0E 04 ED 
0fdca     F1 09 01 00 
0fdce     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
0fdd2     07 FD 06 F7 
0fdd6     EE F7 ED EE 
0fdda     E4 FE F9 EB 
0fdde     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
0fde2     E0 EB EA F7 
0fde6     EB EB 00 F8 
0fdea     F2 F1 EE F8 
0fdee     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
0fdf2     00 FD 07 F7 
0fdf6     ED F7 0E 0E 
0fdfa     12 2A 37 2A 
0fdfe     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
0fe02     1C 10 14 0F 
0fe06     04 00 1A 09 
0fe0a     03 0E 06 0E 
0fe0e     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
0fe12     04 FC 00 04 
0fe16     FD EC E8 E4 
0fe1a     E8 ED D9 DA 
0fe1e     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
0fe22     EE E4 00 09 
0fe26     0A 0E 2E 30 
0fe2a     1A 22 18 22 
0fe2e     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
0fe32     15 09 13 26 
0fe36     1A 24 2A 24 
0fe3a     2A 1A 1E 1C 
0fe3e     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
0fe42     1A 14 08 00 
0fe46     08 09 0E FC 
0fe4a     FC 0C 0C 13 
0fe4e     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
0fe52     09 01 09 1C 
0fe56     1A 04 09 03 
0fe5a     04 04 F4 F8 
0fe5e     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
0fe62     00 EC F7 EC 
0fe66     F2 EC DA E5 
0fe6a     EA ED EC E0 
0fe6e     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
0fe72     E4 E8 F1 EC 
0fe76     DB E0 F2 F1 
0fe7a     00 FC E4 EB 
0fe7e     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
0fe82     31 2A 24 1F 
0fe86     22 24 1A 18 
0fe8a     12 10 09 FE 
0fe8e     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
0fe92     08 0E 04 00 
0fe96     01 08 13 00 
0fe9a     00 03 04 F7 
0fe9e     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
0fea2     E6 DE E8 EC 
0fea6     F8 02 00 E6 
0feaa     F7 09 0A 0C 
0feae     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
0feb2     22 1E 25 15 
0feb6     19 14 1A 09 
0feba     09 25 1C 24 
0febe     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
0fec2     1B 1E 1E 2A 
0fec6     0E 12 1C 14 
0feca     09 00 FC 00 
0fece     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
0fed2     01 09 0E 04 
0fed6     F1 F7 09 00 
0feda     FE 13 14 09 
0fede     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
0fee2     F7 F8 F4 F9 
0fee6     E1 EB FD ED 
0feea     F7 F2 F1 F2 
0feee     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
0fef2     F2 EE F3 01 
0fef6     FC F2 F1 EB 
0fefa     F7 F7 EC E6 
0fefe     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
0ff02     F2 EB FE 09 
0ff06     04 09 34 2A 
0ff0a     26 28 21 27 
0ff0e     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
0ff12     0E FA 09 09 
0ff16     03 0D 00 0D 
0ff1a     06 00 03 FF 
0ff1e     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
0ff22     01 FC ED E7 
0ff26     E2 F0 E8 D6 
0ff2a     E4 E6 EB F7 
0ff2e     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
0ff32     04 01 13 2C 
0ff36     27 20 1F 1E 
0ff3a     26 18 18 13 
0ff3e     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
0ff42     1C 22 2A 26 
0ff46     2D 2A 25 25 
0ff4a     26 2A 21 1A 
0ff4e     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
0ff52     02 08 0E 09 
0ff56     FC 04 06 07 
0ff5a     18 0E 00 F8 
0ff5e     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
0ff62     19 0E 09 04 
0ff66     06 04 FA F7 
0ff6a     F4 FC E6 E6 
0ff6e     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
0ff72     ED ED E4 E8 
0ff76     DE F0 ED E8 
0ff7a     EB F8 F8 F0 
0ff7e     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
0ff82     EC E4 EA ED 
0ff86     F1 00 F9 E6 
0ff8a     F3 00 04 00 
0ff8e     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
0ff92     21 2B 22 1F 
0ff96     14 1B 1C 00 
0ff9a     0C 10 06 10 
0ff9e     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
0ffa2     09 06 0D 0E 
0ffa6     01 06 0A 04 
0ffaa     FA F2 EA F1 
0ffae     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
0ffb2     E8 F7 00 F9 
0ffb6     E7 F7 09 00 
0ffba     09 24 2A 21 
0ffbe     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
0ffc2     15 0E 19 14 
0ffc6     04 13 14 1C 
0ffca     1F 20 26 1F 
0ffce     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
0ffd2     1A 13 18 1C 
0ffd6     14 0A 00 FF 
0ffda     09 09 F7 F8 
0ffde     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
0ffe2     00 F8 FC 09 
0ffe6     F7 09 16 14 
0ffea     0C 01 04 04 
0ffee     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
0fff2     F2 E7 F7 ED 
0fff6     F6 F2 EE F7 
0fffa     ED F2 E6 EB 
0fffe     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
10002     00 FC F7 EE 
10006     ED FE F3 E8 
1000a     F0 ED F4 FF 
1000e     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
10012     04 00 13 2A 
10016     25 27 1C 27 
1001a     21 1F 14 0E 
1001e     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
10022     02 04 01 03 
10026     00 03 00 FD 
1002a     00 04 FD FC 
1002e     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
10032     E7 E6 F7 E8 
10036     DC EB E4 F6 
1003a     00 FC F2 F1 
1003e     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
10042     2B 2D 2A 27 
10046     25 27 21 0D 
1004a     1C 1F 09 13 
1004e     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
10052     2A 21 2A 1F 
10056     18 24 20 15 
1005a     16 21 1F 15 
1005e     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
10062     00 FD 00 00 
10066     08 18 09 F9 
1006a     00 0F 00 00 
1006e     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
10072     09 06 03 00 
10076     F1 FE F7 E8 
1007a     F6 F0 F1 EE 
1007e     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
10082     DE DB ED EC 
10086     E1 EB F8 FC 
1008a     F3 EE E0 F3 
1008e     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
10092     E8 FC 00 F9 
10096     E8 FC 07 F9 
1009a     00 21 24 25 
1009e     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
100a2     14 0E 1E 09 
100a6     09 0C 06 0D 
100aa     04 0D 04 08 
100ae     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
100b2     04 F9 00 09 
100b6     06 FE EC EA 
100ba     F7 F7 E0 EC 
100be     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
100c2     00 F0 09 0A 
100c6     00 13 26 30 
100ca     2A 26 2A 24 
100ce     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
100d2     0A 12 18 13 
100d6     1F 1A 21 1E 
100da     21 21 0F 1A 
100de     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
100e2     1C 14 0E FC 
100e6     FD 09 00 FE 
100ea     F8 F7 FE 09 
100ee     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
100f2     01 F8 0D 10 
100f6     0E 09 09 01 
100fa     03 01 F0 00 
100fe     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
10102     FA F3 F3 F2 
10106     F0 F2 EC E0 
1010a     EB F3 E8 EB 
1010e     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
10112     EA EB FF ED 
10116     ED F2 E5 F3 
1011a     00 07 F2 F7 
1011e     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
10122     26 28 20 2A 
10126     20 26 1F 09 
1012a     1E 0E 03 0A 
1012e     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
10132     04 04 09 00 
10136     FF 00 06 F9 
1013a     FD 06 01 00 
1013e     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
10142     E4 DF E1 DB 
10146     EA FC 00 E8 
1014a     F7 07 F7 06 
1014e     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
10152     21 1C 26 14 
10156     0E 1C 10 0E 
1015a     15 1C 21 1C 
1015e     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
10162     1C 1C 25 1F 
10166     18 19 21 1F 
1016a     1F 0E FF 12 
1016e     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
10172     00 04 19 0D 
10176     FD 09 09 00 
1017a     03 0F 15 09 
1017e     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
10182     EC F7 F9 E8 
10186     F1 EC F7 F2 
1018a     F0 F3 EC F0 
1018e     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
10192     EA E6 F1 FC 
10196     00 F8 EC EB 
1019a     F4 F2 E6 EE 
1019e     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
101a2     F7 F1 09 00 
101a6     FF 0E 1E 25 
101aa     21 21 1F 24 
101ae     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
101b2     04 09 08 0F 
101b6     09 09 0E 06 
101ba     09 04 00 00 
101be     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
101c2     08 09 01 EC 
101c6     F4 FA F2 EA 
101ca     E8 E7 E8 FC 
101ce     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
101d2     01 00 0E 22 
101d6     20 1C 1F 14 
101da     24 14 09 13 
101de     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
101e2     1B 19 24 22 
101e6     21 22 21 19 
101ea     21 1F 14 13 
101ee     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
101f2     FE 07 0C 00 
101f6     00 FC FE 00 
101fa     10 12 00 09 
101fe     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
10202     14 0E 0A 04 
10206     FE 09 F9 F2 
1020a     FC EE F3 EB 
1020e     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
10212     F3 F3 F0 EC 
10216     EA F3 F3 E4 
1021a     F6 FC 00 01 
1021e     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
10222     ED EC E8 EC 
10226     F3 00 00 EB 
1022a     00 04 FF 01 
1022e     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
10232     14 19 1F 0E 
10236     0D 09 06 01 
1023a     02 04 04 04 
1023e     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
10242     00 00 06 04 
10246     FC FF 09 08 
1024a     07 F2 ED F8 
1024e     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
10252     E7 F7 06 F7 
10256     F7 09 04 03 
1025a     09 21 27 24 
1025e     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
10262     14 1C 0E 13 
10266     0E 13 1C 1A 
1026a     22 22 25 26 
1026e     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
10272     15 18 19 1C 
10276     22 18 04 02 
1027a     09 01 00 FC 
1027e     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
10282     00 00 0D 00 
10286     FD 00 0E 0D 
1028a     0E 09 FF 06 
1028e     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
10292     ED E8 ED F4 
10296     F0 F3 EE F0 
1029a     F2 E6 E8 EB 
1029e     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
102a2     F8 04 F8 EC 
102a6     F3 F7 F2 ED 
102aa     F0 E8 EB 00 
102ae     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
102b2     02 00 0E 21 
102b6     1C 2B 1F 1E 
102ba     2B 1B 19 14 
102be     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
102c2     0D 0E 0A 09 
102c6     09 10 03 00 
102ca     0D 04 FF FF 
102ce     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
102d2     EB F7 EE EE 
102d6     E7 E4 E4 E6 
102da     FF FC EB FE 
102de     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
102e2     1C 1E 27 1A 
102e6     1E 25 12 15 
102ea     0E 0D 09 08 
102ee     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
102f2     1F 26 1F 1F 
102f6     18 22 1B 0E 
102fa     16 15 21 1F 
102fe     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
10302     00 00 FF F8 
10306     00 16 09 00 
1030a     09 0A 00 00 
1030e     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
10312     06 0E 09 00 
10316     FE F7 F4 F2 
1031a     F1 F7 F8 FA 
1031e     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
10322     EC F1 F3 EE 
10326     E8 F3 F8 01 
1032a     01 EC F3 F3 
1032e     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
10332     E4 F4 02 EE 
10336     F4 FF FF FC 
1033a     FE 13 13 21 
1033e     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
10342     10 0A 06 04 
10346     FC 00 01 08 
1034a     04 04 06 07 
1034e     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
10352     FC FD 00 08 
10356     0D 04 F1 F8 
1035a     FA F2 F2 ED 
1035e     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
10362     F1 F8 03 04 
10366     00 09 1B 21 
1036a     2B 25 24 2C 
1036e     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
10372     14 0A 14 19 
10376     1F 26 1E 27 
1037a     2A 1F 1A 21 
1037e     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
10382     1C 22 14 08 
10386     08 09 06 00 
1038a     00 F7 F7 10 
1038e     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
10392     01 F7 03 07 
10396     0D 12 00 08 
1039a     04 FD F9 F2 
1039e     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
103a2     F3 F7 F7 F2 
103a6     F3 F7 E6 E6 
103aa     F0 EC EA ED 
103ae     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
103b2     F2 FA F7 F7 
103b6     F1 F2 E6 EB 
103ba     03 00 F8 01 
103be     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
103c2     19 24 2A 1C 
103c6     2B 22 1C 1A 
103ca     14 10 04 07 
103ce     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
103d2     0A 0E 0D 00 
103d6     FF 08 00 FF 
103da     FF 01 09 09 
103de     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
103e2     EC E8 E7 D6 
103e6     EB F7 EC F1 
103ea     FA 01 F8 00 
103ee     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
103f2     1C 26 1F 1A 
103f6     18 12 0E 0C 
103fa     09 13 19 21 
103fe     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
10402     1A 1E 21 18 
10406     15 19 15 26 
1040a     1F 09 09 07 
1040e     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
10412     ED 00 0D 00 
10416     03 08 09 FE 
1041a     02 09 0C 19 
1041e     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
10422     01 FC FE F2 
10426     F2 F3 F0 FE 
1042a     F8 F9 F7 FD 
1042e     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
10432     F0 ED F7 FC 
10436     07 00 F4 F7 
1043a     F9 F2 F2 F3 
1043e     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
10442     F3 F7 00 00 
10446     F8 06 0A 16 
1044a     1F 16 21 21 
1044e     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
10452     08 00 01 00 
10456     09 0C 04 09 
1045a     09 01 FC 03 
1045e     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
10462     03 0E 00 F4 
10466     F3 F2 EE E7 
1046a     EE DB E0 F8 
1046e     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
10472     00 FF 0E 13 
10476     2A 2A 21 2B 
1047a     2A 25 1C 1E 
1047e     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
10482     19 21 27 20 
10486     28 2B 21 1E 
1048a     21 20 18 1B 
1048e     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
10492     09 09 03 00 
10496     FE 00 F2 FC 
1049a     08 00 00 03 
1049e     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
104a2     03 13 09 04 
104a6     0C 01 04 FC 
104aa     FC F7 ED F2 
104ae     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
104b2     F2 F4 F8 E8 
104b6     F0 F0 EC F0 
104ba     ED F3 00 01 
104be     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
104c2     EC F1 EC E2 
104c6     F7 FA F8 F3 
104ca     00 01 F8 00 
104ce     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
104d2     1E 26 22 1A 
104d6     19 14 0E 08 
104da     04 03 06 10 
104de     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
104e2     00 02 07 00 
104e6     00 00 01 10 
104ea     09 F9 F7 F4 
104ee     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
104f2     DB F3 F7 F2 
104f6     F3 00 00 F7 
104fa     06 08 1C 21 
104fe     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
10502     1C 1C 19 0F 
10506     13 0D 0E 18 
1050a     20 1E 1E 2A 
1050e     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
10512     16 15 14 19 
10516     21 1A 09 06 
1051a     09 00 00 00 
1051e     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
10522     00 00 0D 00 
10526     FE 00 00 15 
1052a     14 08 0E 0C 
1052e     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
10532     F8 F7 F1 F2 
10536     FC FA F8 F7 
1053a     00 F3 EE F6 
1053e     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
10542     FE 03 FC F2 
10546     F0 F3 E8 ED 
1054a     EE DE EB F7 
1054e     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
10552     F7 FC FD 09 
10556     19 18 1C 1A 
1055a     21 1A 14 13 
1055e     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
10562     00 08 06 01 
10566     09 06 00 00 
1056a     04 FF FD FC 
1056e     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
10572     F4 F4 F2 EA 
10576     F0 EC DB E8 
1057a     F7 F4 F2 FE 
1057e     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
10582     13 28 21 2A 
10586     2B 2C 2A 21 
1058a     25 1C 1C 15 
1058e     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
10592     24 2C 2B 1F 
10596     26 25 1C 1C 
1059a     14 16 21 1B 
1059e     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
105a2     FA 03 F2 F1 
105a6     FC 03 FF F8 
105aa     08 00 FC FA 
105ae     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
105b2     07 0A 09 00 
105b6     FF FA FA F3 
105ba     F0 E8 F4 F8 
105be     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
105c2     EB F2 F2 EB 
105c6     EE EC F7 00 
105ca     FD F7 F0 F3 
105ce     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
105d2     E4 F4 F9 F3 
105d6     F7 04 FA FD 
105da     00 01 1C 1B 
105de     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
105e2     1A 1E 14 14 
105e6     0A 04 03 09 
105ea     12 09 0C 10 
105ee     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
105f2     00 00 F9 00 
105f6     08 04 F7 F4 
105fa     F6 E6 EB EC 
105fe     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
10602     EC F7 00 F8 
10606     FC FD 00 1A 
1060a     1E 1E 27 27 
1060e     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
10612     1A 18 0E 13 
10616     1C 1F 1E 24 
1061a     2A 1F 21 26 
1061e     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
10622     1C 1E 1A 07 
10626     07 04 FC 04 
1062a     FC F0 FA 00 
1062e     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
10632     00 00 F7 09 
10636     0E 0F 0F 0F 
1063a     15 0D 09 04 
1063e     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
10642     F6 00 FC FC 
10646     00 FD F3 FA 
1064a     F7 F2 F7 F2 
1064e     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
10652     F1 F7 EE EB 
10656     F3 EC E2 EB 
1065a     F7 F7 F1 FF 
1065e     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
10662     09 13 14 1C 
10666     1E 22 1B 1A 
1066a     13 0E 0C 01 
1066e     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
10672     06 0D 09 00 
10676     06 00 FE 00 
1067a     F3 FE 03 06 
1067e     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
10682     F0 F2 E6 E2 
10686     EB F7 EE F7 
1068a     00 FD 00 FC 
1068e     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
10692     25 2D 30 2B 
10696     25 26 20 1C 
1069a     18 10 1C 21 
1069e     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
106a2     20 25 1F 1C 
106a6     1A 0E 15 1C 
106aa     1B 0A 04 06 
106ae     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
106b2     F7 FD 06 FA 
106b6     03 06 FE 01 
106ba     F6 FD 09 09 
106be     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
106c2     0A 07 00 01 
106c6     FC F7 F1 FA 
106ca     FC F7 FD FF 
106ce     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
106d2     F7 EE ED F8 
106d6     00 00 F2 F7 
106da     F2 EB F7 F0 
106de     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
106e2     F2 FE FC FC 
106e6     FC F8 00 0F 
106ea     15 1A 1E 24 
106ee     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
106f2     0E 0D 00 00 
106f6     06 04 04 0C 
106fa     0D 00 03 03 
106fe     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
10702     00 04 01 F3 
10706     F8 EC EB F2 
1070a     EC E4 E0 F6 
1070e     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
10712     00 FC FC 09 
10716     19 21 21 2A 
1071a     2B 2C 2A 26 
1071e     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
10722     16 20 1C 1E 
10726     28 25 1F 25 
1072a     1F 1C 1C 10 
1072e     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
10732     08 09 FD 00 
10736     04 FC F7 F8 
1073a     00 FD 00 04 
1073e     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
10742     00 08 0E 0D 
10746     0F 10 09 09 
1074a     01 00 FF F7 
1074e     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
10752     F7 FE F4 F1 
10756     F7 ED F2 EE 
1075a     E6 ED F8 00 
1075e     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
10762     F1 F2 EC DF 
10766     F0 F4 ED F8 
1076a     F8 FC FE F7 
1076e     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
10772     1E 21 25 21 
10776     1E 19 14 12 
1077a     06 00 06 09 
1077e     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
10782     08 09 00 02 
10786     FD F7 FC 06 
1078a     07 F9 FD F7 
1078e     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
10792     E4 F1 F2 EB 
10796     FC F8 FE 00 
1079a     F7 00 0E 1C 
1079e     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
107a2     28 26 21 20 
107a6     1B 14 10 1C 
107aa     1B 18 24 26 
107ae     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
107b2     1C 14 0E 0F 
107b6     1C 14 09 0D 
107ba     00 FE 01 01 
107be     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
107c2     FE 00 00 01 
107c6     00 F4 FF 08 
107ca     0D 0F 10 18 
107ce     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
107d2     02 00 F4 F6 
107d6     FC F7 F7 00 
107da     00 F7 FC F7 
107de     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
107e2     F7 06 00 FA 
107e6     FD EE F6 F7 
107ea     F3 E7 E8 F8 
107ee     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
107f2     FD F7 F7 FF 
107f6     0E 13 18 1E 
107fa     21 1F 1C 18 
107fe     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
10802     00 07 01 03 
10806     0D 04 06 04 
1080a     00 02 FD F3 
1080e     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
10812     F9 F7 EB EE 
10816     F3 EE E4 EA 
1081a     F0 ED F7 F7 
1081e     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
10822     08 14 1E 21 
10826     2E 30 2B 2A 
1082a     25 24 22 1A 
1082e     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
10832     24 2E 21 27 
10836     26 20 25 1A 
1083a     14 0D 1C 1A 
1083e     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
10842     01 06 00 F6 
10846     00 00 FE 00 
1084a     00 00 00 FA 
1084e     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
10852     12 16 14 0E 
10856     0D 04 04 00 
1085a     F7 EE F8 F7 
1085e     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
10862     F8 F2 F3 F3 
10866     EC E6 E6 FC 
1086a     FC F3 F9 EE 
1086e     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
10872     E4 F2 EC F0 
10876     F8 F2 FE F7 
1087a     F7 FC 06 13 
1087e     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
10882     20 1B 15 15 
10886     0E 04 00 09 
1088a     07 03 13 09 
1088e     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
10892     01 FE F2 F7 
10896     03 00 FE FC 
1089a     F2 ED F3 F3 
1089e     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
108a2     F2 F9 F7 00 
108a6     FE FA 03 0E 
108aa     1A 20 2A 30 
108ae     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
108b2     25 1F 14 EB 
108b6     00 00 34 39 
108ba     33 37 4C 5D 
108be     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
108c2     A5 CF 2E 57 
108c6     36 18 0F 00 
108ca     AC 87 CF 5E 
108ce     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
108d2     FF 7F 60 DB 
108d6     3C 0C 16 30 
108da     A0 CF 30 E7 
108de     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
108e2     AB E7 D0 CF 
108e6     18 A0 9F BE 
108ea     B7 B8 B7 CF 
108ee     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
108f2     D0 FF 00 B7 
108f6     FF 30 0F 00 
108fa     06 D0 CF F4 
108fe     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
10902     AC 81 CF 00 
10906     C7 A0 9F 06 
1090a     A0 9F D0 87 
1090e     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
10912     18 FF E8 AC 
10916     B7 FF 00 BD 
1091a     DC CF F1 B8 
1091e     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
10922     18 EE D2 F3 
10926     09 E8 EB B8 
1092a     CF E8 FF 0A 
1092e     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
10932     10 28 34 5E 
10936     48 2E 5E 7F 
1093a     60 0A 52 30 
1093e     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
10942     3C 2E 5E 6C 
10946     30 46 3C 5E 
1094a     60 72 30 22 
1094e     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
10952     7F 60 46 55 
10956     48 5E 60 7F 
1095a     7F 7F 4F 7F 
1095e     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
10962     78 66 30 0A 
10966     46 30 2E 7F 
1096a     60 5E 60 5E 
1096e     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
10972     66 76 7F 7F 
10976     6F 49 7B 30 
1097a     46 60 42 46 
1097e     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
10982     46 46 69 48 
10986     28 5E 3C 46 
1098a     60 30 3A 3C 
1098e     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
10992     22 36 1E 37 
10996     18 2E 18 10 
1099a     2E 48 2A 1E 
1099e     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
109a2     00 EE A0 CF 
109a6     00 DF E7 DC 
109aa     B7 FF 0C EE 
109ae     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
109b2     0C FD 12 E8 
109b6     FF 00 E8 BD 
109ba     E1 EE D0 AB 
109be     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
109c2     C3 C4 A0 B7 
109c6     E8 A0 9F B8 
109ca     BE A0 AC A0 
109ce     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
109d2     A0 87 C0 A3 
109d6     C9 A0 9F B4 
109da     AC 80 9F AC 
109de     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
109e2     87 80 84 80 
109e6     84 80 80 9F 
109ea     80 80 80 80 
109ee     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
109f2     93 80 99 A0 
109f6     80 80 80 80 
109fa     93 80 80 80 
109fe     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
10a02     93 80 80 80 
10a06     9F 80 80 B8 
10a0a     80 80 A0 80 
10a0e     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
10a12     80 8E 80 80 
10a16     9D 80 9F 88 
10a1a     88 80 99 80 
10a1e     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
10a22     81 9F 80 93 
10a26     94 82 93 A6 
10a2a     91 9F 91 97 
10a2e     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
10a32     BD CA 93 CF 
10a36     A0 B7 B1 AC 
10a3a     B1 D3 A0 CF 
10a3e     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
10a42     F0 E4 DC C9 
10a46     E7 F4 D0 DB 
10a4a     FF 00 D2 F3 
10a4e     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
10a52     0A 16 18 E4 
10a56     2E 18 2E 2E 
10a5a     18 F3 52 00 
10a5e     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
10a62     2E 1B 24 0A 
10a66     3C 28 76 30 
10a6a     3F 36 2A 46 
10a6e     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
10a72     24 2E 5E 60 
10a76     6A 7C 6C 48 
10a7a     40 46 5E 6C 
10a7e     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
10a82     48 76 6C 60 
10a86     5E 7F 60 7F 
10a8a     60 6A 7F 73 
10a8e     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
10a92     76 7F 7F 7F 
10a96     7C 7F 78 7F 
10a9a     7F 7F 7F 7F 
10a9e     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
10aa2     7F 7F 7F 7F 
10aa6     7F 7F 7F 7F | 	byte	$7f[8]
10aaa     76 7F 7E 7F 
10aae     7F 7F 7F 7F 
10ab2     7F 7F 64 7F 
10ab6     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
10aba     7F 7F 7F 7F 
10abe     7F 7F       | 	byte	$7f[6]
10ac0     79 7F 66 64 
10ac4     6D 73 7F 7F 
10ac8     64 7F 60 6A 
10acc     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
10ad0     76 7F 7F 78 
10ad4     58 78 60 75 
10ad8     6C 46 66 48 
10adc     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
10ae0     45 51 5E 60 
10ae4     3A 5E 4E 40 
10ae8     5E 42 3F 3D 
10aec     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
10af0     42 0C 28 28 
10af4     3C 30 1F 40 
10af8     48 43 42 22 
10afc     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
10b00     0C 18 0C 04 
10b04     24 DB 1E F3 
10b08     00 FF 0C E7 
10b0c     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
10b10     00 F3 18 D0 
10b14     EE F3 E8 DB 
10b18     E1 D8 E7 E2 
10b1c     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
10b20     E8 BD D3 D5 
10b24     CD DB DC C3 
10b28     CA B7 D0 C3 
10b2c     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
10b30     C0 B8 88 9F 
10b34     C1 A0 C3 D0 
10b38     88 9F B8 A0 
10b3c     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
10b40     A0 80 82 80 
10b44     93 A0 87 94 
10b48     80 87 94 80 
10b4c     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
10b50     88 8D 9F 97 
10b54     90 9C 94 80 
10b58     8B 87 80 87 
10b5c     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
10b60     8E 9A 94 84 
10b64     9F A6 80 88 
10b68     80 81 8D 80 
10b6c     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
10b70     82 80 8D 80 
10b74     80 AC 80 9A 
10b78     9F 90 94 80 
10b7c     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
10b80     9F 94 80 80 
10b84     8E 80 80 80 
10b88     80 AC 8D 94 
10b8c     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
10b90     9F A0 80 AC 
10b94     87 8E 9F AC 
10b98     94 9A 91 93 
10b9c     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
10ba0     A0 9C C3 AF 
10ba4     A8 BB AF A3 
10ba8     AF AB B7 B8 
10bac     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
10bb0     BE C3 D2 BE 
10bb4     C3 D0 BD D9 
10bb8     DF BE C3 DC 
10bbc     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
10bc0     EE DF D9 E4 
10bc4     E4 DE F3 EE 
10bc8     E7 00 FF 0C 
10bcc     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
10bd0     06 07 06 FF 
10bd4     18 0C FF 1C 
10bd8     15 1B 27 1F 
10bdc     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
10be0     2E 48 13 2A 
10be4     2E 3C 30 3A 
10be8     48 3D 3F 40 
10bec     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
10bf0     5A 48 3A 5B 
10bf4     5A 5E 60 52 
10bf8     61 69 60 6A 
10bfc     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
10c00     69 66 6A 6F 
10c04     76 7F 7F 78 
10c08     6C 6A 78 64 
10c0c     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
10c10     7F 7F 78 7B 
10c14     7F 7F 7F 7F 
10c18     7F 7F 7F 7E 
10c1c     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
10c20     7F 79 7F 7F 
10c24     7F 7F 7F 7F 
10c28     7F 7F 7F 7F 
10c2c     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
10c30     7F 7F 7F 7F 
10c34     7F 7F 7F 7F 
10c38     7F 7F 7F 7F | 	byte	$7f[12]
10c3c     7E 7F 7F 7F 
10c40     7E 7F 7F 76 
10c44     78 76 6C 7F 
10c48     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
10c4c     6A 78 67 60 
10c50     64 64 6C 7C 
10c54     60 5E 78 60 
10c58     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
10c5c     60 52 66 5A 
10c60     4E 4B 48 3C 
10c64     37 46 30 2E 
10c68     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
10c6c     3F 30 2A 2D 
10c70     24 22 3A 3C 
10c74     28 2A 12 22 
10c78     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
10c7c     1B 1E 1F 1E 
10c80     0C 00 10 00 
10c84     FF 18 0A 06 
10c88     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
10c8c     F4 F3 EE DC 
10c90     DE E5 E7 E7 
10c94     F9 E8 D8 E1 
10c98     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
10c9c     E8 D2 CA DB 
10ca0     D0 CF D0 C9 
10ca4     C4 B8 B7 C9 
10ca8     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
10cac     BD BA B2 AE 
10cb0     A9 AF AC AF 
10cb4     A8 B7 AC 9F 
10cb8     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
10cbc     9C 94 8D 94 
10cc0     9F A0 A0 94 
10cc4     93 9F 97 9C 
10cc8     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
10ccc     87 91 80 80 
10cd0     80 80 80 87 
10cd4     88 87 80 81 
10cd8     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
10cdc     80 80 87 80 
10ce0     80 80 81 82 
10ce4     80 80 80 81 
10ce8     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
10cec     84 87 80 80 
10cf0     87 8E 93 88 
10cf4     80 81 85 8D 
10cf8     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
10cfc     8B 8E 93 8B 
10d00     93 96 8E 93 
10d04     9A 9F 99 97 
10d08     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
10d0c     A0 9F A8 A6 
10d10     A5 A8 A8 A8 
10d14     A0 9F A3 AB 
10d18     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
10d1c     B4 A6 B7 B8 
10d20     AB B1 B8 B1 
10d24     B7 B8 B7 BA 
10d28     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
10d2c     C7 C6 CA C4 
10d30     CF C4 CF D0 
10d34     DB D0 CF D0 
10d38     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
10d3c     DF DE DC DE 
10d40     E4 E2 F3 DC 
10d44     E7 E8 ED E8 
10d48     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
10d4c     E8 FF 00 FF 
10d50     00 FF 01 04 
10d54     07 07 13 12 
10d58     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
10d5c     07 16 18 18 
10d60     13 19 19 22 
10d64     27 34 30 22 
10d68     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
10d6c     36 33 37 37 
10d70     37 30 34 30 
10d74     2E 40 36 46 
10d78     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
10d7c     4C 4B 4C 5B 
10d80     55 5E 60 52 
10d84     57 4E 52 61 
10d88     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
10d8c     58 5E 60 5E 
10d90     66 69 6A 6F 
10d94     69 6A 66 67 
10d98     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
10d9c     73 73 76 78 
10da0     7C 7F 7B 79 
10da4     78 7B 6D 73 
10da8     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
10dac     76 72 73 76 
10db0     72 6D 67 70 
10db4     72 7B 78 7C 
10db8     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
10dbc     72 75 78 6F 
10dc0     70 6F 6F 67 
10dc4     6A 79 72 67 
10dc8     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
10dcc     70 6F 67 6A 
10dd0     60 64 60 57 
10dd4     57 5E 5A 5D 
10dd8     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
10ddc     54 4F 58 54 
10de0     51 52 4F 52 
10de4     4F 4F 4F 51 
10de8     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
10dec     3D 3F 3F 3C 
10df0     3F 36 37 30 
10df4     34 3C 36 33 
10df8     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
10dfc     27 2B 1E 22 
10e00     1E 1E 18 0F 
10e04     0D 0C 10 10 
10e08     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
10e0c     0F 06 0A 06 
10e10     0A 0A 00 F4 
10e14     F6 F0 F3 FD 
10e18     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
10e1c     EE EE EE E8 
10e20     E7 ED E8 E7 
10e24     E5 DF E1 DE 
10e28     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
10e2c     D8 DB D3 D8 
10e30     D0 C9 C7 C9 
10e34     CF D0 CF CF 
10e38     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
10e3c     BE C0 C1 C1 
10e40     C3 C1 C0 BE 
10e44     C1 BB BE BB 
10e48     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
10e4c     B8 B7 B5 AE 
10e50     B1 AF B5 AC 
10e54     A8 AB AE B1 
10e58     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
10e5c     9F 9D 9F A5 
10e60     A8 AC A3 A5 
10e64     A6 A6 A2 A3 
10e68     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
10e6c     B1 AC A6 A6 
10e70     A5 A6 A5 A8 
10e74     A3 A8 A8 A3 
10e78     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
10e7c     A5 A3 9D 9F 
10e80     A9 A8 AB A0 
10e84     9F A8 A2 AB 
10e88     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
10e8c     B2 AE B4 AF 
10e90     B1 AE B5 AF 
10e94     AE B7 B2 AF 
10e98     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
10e9c     AF B5 B7 B2 
10ea0     B4 B8 BB BD 
10ea4     C6 C4 C4 C6 
10ea8     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
10eac     C6 C7 CC CC 
10eb0     C7 C9 D0 C7 
10eb4     CF CC CD CF 
10eb8     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
10ebc     DE DB DC DF 
10ec0     DE DB E1 E4 
10ec4     E7 ED EA E5 
10ec8     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
10ecc     ED EE EB EB 
10ed0     F0 F3 F7 F6 
10ed4     FC FF 00 01 
10ed8     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
10edc     01 07 06 07 
10ee0     04 07 06 09 
10ee4     0C 0C 0C 0D 
10ee8     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
10eec     19 18 18 18 
10ef0     10 19 18 1B 
10ef4     19 1B 18 19 
10ef8     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
10efc     25 28 27 27 
10f00     2A 2E 30 30 
10f04     30 2A 28 2E 
10f08     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
10f0c     2B 28 2A 2D 
10f10     30 30 30 33 
10f14     36 37 36 37 
10f18     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
10f1c     3A 3C 36 3C 
10f20     3C 3C 3A 3C 
10f24     39 3D 3C 3C 
10f28     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
10f2c     40 46 43 40 
10f30     3F 40 40 3F 
10f34     42 3F 40 42 
10f38     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
10f3c     4C 4B 4E 4B 
10f40     49 4F 4B 4B 
10f44     48 48 45 48 
10f48     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
10f4c     45 48 42 3F 
10f50     43 43 46 48 
10f54     49 49 49 4B 
10f58     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
10f5c     43 45 43 42 
10f60     3F 3F 3D 3F 
10f64     45 43 43 3F 
10f68     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
10f6c     3D 3D 40 3F 
10f70     3F 39 3A 3A 
10f74     39 3C 3D 3C 
10f78     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
10f7c     33 33 34 36 
10f80     36 31 30 30 
10f84     2D 2A 28 27 
10f88     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
10f8c     28 28 24 22 
10f90     22 21 21 21 
10f94     22 1F 1F 21 
10f98     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
10f9c     21 1B 19 18 
10fa0     12 10 0F 0C 
10fa4     0C 0D 0C 0F 
10fa8     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
10fac     0C 0A 09 06 
10fb0     07 06 03 03 
10fb4     01 01 01 00 
10fb8     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
10fbc     FA F7 F7 F7 
10fc0     F6 F4 F1 F0 
10fc4     F3 F3 F6 F1 
10fc8     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
10fcc     E5 E7 E8 E7 
10fd0     E5 E4 E4 E5 
10fd4     E4 E7 E5 E4 
10fd8     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
10fdc     DE DB DB D9 
10fe0     D9 DB D9 D6 
10fe4     D8 D8 D8 D9 
10fe8     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
10fec     DC DC DE DC 
10ff0     D9 D6 D6 D5 
10ff4     D5 D5 D6 D3 
10ff8     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
10ffc     CF D0 D2 D2 
11000     D2 D2 D3 D2 
11004     D2 D2 D2 D0 
11008     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
1100c     D2 D3 D2 D2 
11010     D2 D2 D3 D3 
11014     D3 D5 D6 D8 
11018     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
1101c     D3 D5 D6 D6 
11020     D5 D5 D5 D5 
11024     D5 D3 D5 D5 
11028     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
1102c     D6 D6 D5 D5 
11030     D3 D5 D6 D6 
11034     D6 D8 D8 D9 
11038     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
1103c     D8 DB DE DF 
11040     DF DF DF DF 
11044     DF DF E1 DF 
11048     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
1104c     E5 E4 E4 E4 
11050     E2 E2 DE DF 
11054     E1 E1 E4 E4 
11058     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
1105c     E7 E8 EA EA 
11060     EA ED EE ED 
11064     ED EB ED F0 
11068     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
1106c     F1 F1 F1 F0 
11070     EE F0 F0 F0 
11074     F1 F1 F1 F1 
11078     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
1107c     F3 F4 F7 F9 
11080     FD FF FF FF 
11084     FF 00 00 00 
11088     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
1108c     FD FC FA FA 
11090     FA FC FD FD 
11094     FD FD FF 00 
11098     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
1109c     04 04 07 09 
110a0     09 0A 0C 0C 
110a4     0A 0A 09 09 
110a8     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
110ac     03 04 06 07 
110b0     0A 0C 0C 0D 
110b4     0D 0C 0A 0A 
110b8     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
110bc     0F 0F 0D 0C 
110c0     0D 0F 0D 0F 
110c4     0F 0F 0F 10 
110c8     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
110cc     0D 0C 0D 0D 
110d0     0D 0F 0D 0C 
110d4     0C 0C 0C 0F 
110d8     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
110dc     12 12 10 10 
110e0     10 12 13 13 
110e4     13 15 16 18 
110e8     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
110ec     19 19 18 13 
110f0     13 12 10 10 
110f4     0F 0F 0F 0F 
110f8     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
110fc     0D 0C 0D 0D 
11100     0F 10 12 10 
11104     10 0F 0F 0F 
11108     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
1110c     10 10 12 12 
11110     10 12 12 10 
11114     12 12 10 0F 
11118     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
1111c     0A 0C 0D 0F 
11120     10 12 12 12 
11124     0F 0D 0C 0A 
11128     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
1112c     0C 09 09 09 
11130     09 09 09 09 
11134     09 0A 0A 0C 
11138     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
1113c     0D 0D 0D 0C 
11140     0C 0A 09 09 
11144     09 09 09 09 
11148     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
1114c     07 06 03 03 
11150     03 06 06 07 
11154     07 06 06 06 
11158     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
1115c     03 01 01 00 
11160     01 01 01 03 
11164     03 06 09 09 
11168     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
1116c     03 01 01 01 
11170     03 03 03 01 
11174     01 01 01 00 
11178     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
1117c     01 03 01 00 
11180     00 FD FD FC 
11184     FC FC FC FA 
11188     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
1118c     FF 01 03 03 
11190     04 04 04 03 
11194     00 FD FC FC 
11198     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
1119c     FD FD FD FC 
111a0     FC FA FA F9 
111a4     F7 F9 FA FC 
111a8     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
111ac     FA FA F9 FA 
111b0     FA FA FC FC 
111b4     FC FD FD FD 
111b8     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
111bc     F7 F6 F6 F6 
111c0     F6 F7 F9 FA 
111c4     FC FD FD FF 
111c8     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
111cc     FF FF 00 00 
111d0     00 00 00 FF 
111d4     FC FA FA F9 
111d8     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
111dc     F7 F7 F9 F9 
111e0     F9 FA FA F9 
111e4     F9 F9 F7 F7 
111e8     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
111ec     FA FA FA FA 
111f0     FA FA       | 	byte	$fa[6]
111f2     F9 F9 F7 F7 
111f6     F7 F9 F9 FA 
111fa     FA FA F9 F9 
111fe     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
11202     FC FC FC FD 
11206     FC FD FD FC 
1120a     FC FC FD FD 
1120e     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
11212     F7 F9 FA FC 
11216     FC FC FC FC 
1121a     FC FC FC FC 
1121e     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
11222     F9 F9 F9 F7 
11226     F7 F7 F7 F6 
1122a     F7 F7 F7 F7 
1122e     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
11232     F7 F9 F9 F9 
11236     F9 F9 F9 F9 
1123a     F9 F9 F9 F7 
1123e     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
11242     FA FC FC FA 
11246     FC FC FA FA 
1124a     FA FA FA FA 
1124e     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
11252     F7 F9 F9 F9 
11256     F9 F7 F7 F6 
1125a     F7 F9 FC 00 
1125e     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
11262     FA FA F9 F9 
11266     F9 FA FC FC 
1126a     FC FC FC FD 
1126e     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
11272     FC FC FD FD 
11276     FC FA F9 F7 
1127a     F7 F9 FA FC 
1127e     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
11282     FC FC FC FC 
11286     FA FA F9 F9 
1128a     F9 F9 F9 F7 
1128e     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
11292     F7 F7 F7 F7 
11296     F7 F7 F7 F7 
1129a     F7          | 	byte	$f7[9]
1129b     F9 F9 F9 F9 
1129f     F9 F9 F9 F9 
112a3     F9 F9       | 	byte	$f9[10]
112a5     F7 F7 F7 F7 
112a9     F9 FA FC FC 
112ad     FA FC FC FA 
112b1     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
112b5     FA F9 F7 F7 
112b9     F7 F7 F9 F9 
112bd     F9 F9 F7 F7 
112c1     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
112c5     00 05 05 08 
112c9     08 09 0A 0B 
112cd     06 09 09 09 
112d1     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
112d5     0B 0A 0F 17 
112d9     04 10 FF 08 
112dd     F8 F3 08 07 
112e1     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
112e5     1D 24 00 FF 
112e9     14 20 0F 12 
112ed     10 20 01 10 
112f1     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
112f5     D8 F7 D7 F0 
112f9     FF CB F7 F7 
112fd     F2 FF EB E4 
11301     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
11305     18 32 27 17 
11309     1F 30 40 4C 
1130d     24 3C 27 23 
11311     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
11315     08 28 E7 00 
11319     ED E7 F8 F0 
1131d     FD F4 D7 E8 
11321     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
11325     D7 EC 1B 3B 
11329     20 25 16 13 
1132d     27 30 40 37 
11331     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
11335     19 E0 F5 EF 
11339     E1 FC F0 F2 
1133d     E0 D7 D2 C8 
11341     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
11345     EF FB FA 2B 
11349     FD 0F 1F 31 
1134d     3D 34 44 37 
11351     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
11355     38 22 3A 25 
11359     31 2A 00 0C 
1135d     00 0F 1B 38 
11361     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
11365     00 EF F4 F2 
11369     F7 0A 17 14 
1136d     10 EF ED F2 
11371     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
11375     10 1F 1C F0 
11379     F4 DB DF D9 
1137d     EE 00 E8 E2 
11381     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
11385     D4 BF DD E8 
11389     FF 04 18 0E 
1138d     0D 22 2D 34 
11391     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
11395     1B 36 2A 1C 
11399     22 13 2B 28 
1139d     0E 10 FF E6 
113a1     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
113a5     0C 1B 00 02 
113a9     00 FA FB 0B 
113ad     17 35 34 27 
113b1     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
113b5     0B 1A 11 23 
113b9     20 20 02 FA 
113bd     E1 D8 E6 E4 
113c1     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
113c5     CE D2 C8 C5 
113c9     CB CB CF EC 
113cd     FF 02 F4 05 
113d1     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
113d5     4A 28 25 26 
113d9     10 2F 1D 14 
113dd     1F 20 20 20 
113e1     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
113e5     14 17 0F 18 
113e9     0B F8 04 FC 
113ed     04 FD 07 2A 
113f1     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
113f5     1C 08 14 1A 
113f9     1B 1B 20 1C 
113fd     10 10 F4 E6 
11401     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
11405     F2 F3 E9 E8 
11409     D5 CE D8 D7 
1140d     DB DD F7 05 
11411     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
11415     04 1B 37 36 
11419     39 26 19 23 
1141d     1A 15 1F 0B 
11421     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
11425     F8 E0 E6 F1 
11429     FD 0D 09 02 
1142d     EC F5 00 EA 
11431     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
11435     37 3B 2D 20 
11439     1C 17 20 27 
1143d     31 29 2F 20 
11441     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
11445     E3 DF EF E8 
11449     F3 F3 E0 E0 
1144d     CF D7 D1 DD 
11451     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
11455     1D 21 13 1B 
11459     1B 32 43 40 
1145d     2E 2F 20 26 
11461     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
11465     14 23 19 01 
11469     F0 EA F3 F5 
1146d     07 12 F6 F3 
11471     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
11475     EE F1 0D 26 
11479     2A 20 13 10 
1147d     03 0C 1A 1B 
11481     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
11485     00 F0 E4 DF 
11489     E3 DD E9 F1 
1148d     F3 E4 DF D8 
11491     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
11495     F9 03 13 1B 
11499     1D 24 1C 1F 
1149d     3B 3B 48 40 
114a1     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
114a5     28 21 14 1E 
114a9     1D 21 0A F9 
114ad     F6 EF FD 13 
114b1     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
114b5     F4 F5 F0 F2 
114b9     F5 0B 28 26 
114bd     23 20 05 06 
114c1     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
114c5     1B 12 09 FC 
114c9     E3 E4 D9 D9 
114cd     CE DD E2 DF 
114d1     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
114d5     C8 CF DC E7 
114d9     FC 03 0E 20 
114dd     14 17 21 29 
114e1     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
114e5     30 23 31 28 
114e9     2C 22 29 30 
114ed     21 1A 10 F6 
114f1     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
114f5     11 05 FD F8 
114f9     FA F8 EC F5 
114fd     13 20 2B 2C 
11501     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
11505     14 1B 20 20 
11509     1E 10 02 F0 
1150d     EE E4 D8 DD 
11511     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
11515     DD DC CD CE 
11519     CD D7 EE ED 
1151d     FA 0C 0D 10 
11521     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
11525     31 39 2C 21 
11529     1A 1D 20 18 
1152d     1B 24 20 21 
11531     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
11535     03 11 1A 18 
11539     10 06 FF 07 
1153d     F6 F3 03 12 
11541     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
11545     1E 14 15 1A 
11549     1E 27 26 25 
1154d     18 04 FD F1 
11551     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
11555     E6 E6 EA E5 
11559     DA D4 C7 CF 
1155d     DF EA EE FF 
11561     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
11565     14 17 27 38 
11569     39 33 1E 1C 
1156d     20 18 19 20 
11571     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
11575     0A F6 F2 FB 
11579     06 0E 14 04 
1157d     FC FC F4 ED 
11581     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
11585     24 2E 26 18 
11589     14 0F 16 1B 
1158d     21 2C 2C 18 
11591     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
11595     E5 E5 E5 EB 
11599     F6 F2 F0 EC 
1159d     DA CF D9 DF 
115a1     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
115a5     10 12 14 10 
115a9     17 23 36 3E 
115ad     2A 22 20 15 
115b1     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
115b5     1C 1D 18 08 
115b9     F5 F4 F3 FF 
115bd     0E 0E 08 00 
115c1     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
115c5     F4 FD 0E 25 
115c9     2A 26 1B 10 
115cd     0C 11 11 21 
115d1     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
115d5     FE F3 E8 E4 
115d9     DA D9 E2 E5 
115dd     E9 F1 E2 D4 
115e1     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
115e5     F3 FF 08 13 
115e9     17 19 18 18 
115ed     2B 42 40 3C 
115f1     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
115f5     1F 21 21 26 
115f9     29 20 10 00 
115fd     F4 F6 FF 0D 
11601     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
11605     F0 E8 EA EA 
11609     F5 07 1B 25 
1160d     27 1A 13 10 
11611     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
11615     26 1C 13 04 
11619     F5 EF E4 DF 
1161d     DF DC E3 ED 
11621     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
11625     CF D6 E1 EC 
11629     F6 02 09 13 
1162d     14 0A 13 23 
11631     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
11635     29 20 1D 1E 
11639     1A 1F 26 29 
1163d     24 18 09 FA 
11641     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
11645     14 14 08 FC 
11649     F6 F4 F1 FD 
1164d     0B 1F 2D 2A 
11651     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
11655     14 20 27 25 
11659     25 14 04 FA 
1165d     E9 E0 DC D5 
11661     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
11665     E0 D0 C8 C6 
11669     D3 D9 E9 F2 
1166d     F9 07 14 10 
11671     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
11675     38 36 34 28 
11679     22 20 18 1A 
1167d     1C 23 27 23 
11681     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
11685     FF 05 0A 11 
11689     10 01 FC F5 
1168d     ED EE F1 05 
11691     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
11695     20 14 12 1B 
11699     23 2B 33 2C 
1169d     20 15 04 F9 
116a1     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
116a5     DF EF F0 EA 
116a9     D8 D0 CD D2 
116ad     DB E8 ED F5 
116b1     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
116b5     09 19 21 2D 
116b9     32 2B 23 1B 
116bd     12 10 0C 14 
116c1     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
116c5     06 FA FB FE 
116c9     03 0F 15 11 
116cd     0D 02 FB F4 
116d1     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
116d5     24 2B 2C 22 
116d9     14 14 10 1A 
116dd     26 2D 2A 20 
116e1     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
116e5     E6 DD D8 DD 
116e9     EB F2 E8 E0 
116ed     D6 CD D5 E2 
116f1     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
116f5     16 10 10 13 
116f9     1D 29 35 38 
116fd     34 2C 25 1C 
11701     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
11705     22 24 18 05 
11709     FC F6 F4 FB 
1170d     07 0D 0E 06 
11711     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
11715     EB F7 09 19 
11719     29 28 1E 17 
1171d     10 10 19 22 
11721     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
11725     08 00 F3 E8 
11729     E0 D5 DF ED 
1172d     EE EC E1 D6 
11731     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
11735     ED FB 08 10 
11739     0E 0E 0D 1B 
1173d     27 31 39 34 
11741     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
11745     13 17 1B 27 
11749     28 1E 14 06 
1174d     FE FB FF 0C 
11751     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
11755     01 F4 EF F1 
11759     F6 05 1B 27 
1175d     28 24 18 11 
11761     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
11765     2A 26 18 0A 
11769     FD F3 E8 D4 
1176d     CE D7 DF E3 
11771     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
11775     CD D3 D8 E5 
11779     F7 02 0E 0E 
1177d     0E 0F 15 27 
11781     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
11785     2C 20 1B 14 
11789     13 1D 25 26 
1178d     22 18 0D 00 
11791     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
11795     12 11 0C 00 
11799     F5 F2 EC EF 
1179d     FF 11 20 25 
117a1     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
117a5     17 22 2B 33 
117a9     2A 22 15 0C 
117ad     06 F0 DD DB 
117b1     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
117b5     E0 D1 CD D1 
117b9     D0 D5 DF EB 
117bd     FB 05 0A 06 
117c1     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
117c5     2D 2E 2C 21 
117c9     1C 10 07 0D 
117cd     13 19 1C 1C 
117d1     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
117d5     FF 0E 15 1A 
117d9     1D 14 0D 05 
117dd     FC F8 FB 06 
117e1     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
117e5     20 16 11 12 
117e9     20 29 2D 2A 
117ed     1C 13 10 00 
117f1     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
117f5     DE E5 E8 E0 
117f9     D5 D0 D1 D4 
117fd     D4 DF EE FE 
11801     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
11805     14 20 27 32 
11809     35 31 2C 20 
1180d     15 0C 0C 11 
11811     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
11815     03 F4 EC F3 
11819     F9 01 0C 0F 
1181d     0C 06 00 F6 
11821     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
11825     1F 30 34 2C 
11829     20 15 1A 23 
1182d     2E 36 2D 25 
11831     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
11835     E7 DC D8 E3 
11839     E8 EB E3 DA 
1183d     D6 D4 D2 D7 
11841     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
11845     0B 07 0B 10 
11849     16 26 2E 33 
1184d     32 2D 22 14 
11851     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
11855     14 13 10 08 
11859     FA F4 F4 F7 
1185d     03 0F 12 10 
11861     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
11865     F6 FD 09 1B 
11869     2B 32 2C 20 
1186d     14 10 1A 2B 
11871     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
11875     18 0A 00 E8 
11879     D9 D4 DE E7 
1187d     E6 E2 E0 D5 
11881     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
11885     EA FA 06 07 
11889     0D 0E 0E 19 
1188d     27 2D 35 37 
11891     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
11895     11 14 19 1A 
11899     1D 16 0C 04 
1189d     F9 F8 F8 FF 
118a1     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
118a5     00 F5 F0 F2 
118a9     F6 FF 0F 23 
118ad     2D 28 20 10 
118b1     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
118b5     2F 2B 24 1C 
118b9     14 01 F2 E1 
118bd     D9 E0 E5 E9 
118c1     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
118c5     CE D3 DA E3 
118c9     EF FE FF 0B 
118cd     0B 0D 13 1F 
118d1     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
118d5     26 19 0D 0A 
118d9     0C 11 17 17 
118dd     14 0D 08 01 
118e1     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
118e5     17 20 19 10 
118e9     02 FE FD FD 
118ed     03 17 27 2D 
118f1     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
118f5     12 22 2C 2E 
118f9     29 20 19 16 
118fd     05 F0 E0 D7 
11901     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
11905     D9 D3 CB CB 
11909     CD D4 E3 EF 
1190d     FB 08 0D 11 
11911     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
11915     3D 40 40 00 
11919     00 FF FF FE 
1191d     FF FF 00 00 
11921     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
11925     03 05 05 05 
11929     06 09 09 07 
1192d     05 02 03 06 
11931     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
11935     0E 06 FD F4 
11939     F3 F0 F0 F2 
1193d     FA FF FF FE 
11941     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
11945     FE F6 F0 F0 
11949     EB EC E4 DE 
1194d     DD D5 D4 C9 
11951     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
11955     E1 DD DC DD 
11959     E0 F5 07 17 
1195d     19 18 16 FC 
11961     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
11965     EE F9 FC FE 
11969     09 F6 F2 E1 
1196d     CE C3 BE BD 
11971     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
11975     FD 00 18 1E 
11979     2B 25 1B 0C 
1197d     03 FF FE F4 
11981     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
11985     F2 01 12 14 
11989     14 02 EC D1 
1198d     CC CC CA CA 
11991     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
11995     BD B7 B8 BD 
11999     C8 D1 E3 EC 
1199d     F7 02 08 07 
119a1     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
119a5     FB FE 09 17 
119a9     2B 32 38 39 
119ad     36 35 36 34 
119b1     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
119b5     EC E2 D4 DC 
119b9     E0 E7 F0 F8 
119bd     01 F9 F7 F2 
119c1     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
119c5     F1 FB FB 05 
119c9     00 F0 E2 D5 
119cd     D7 CD CE C6 
119d1     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
119d5     D8 C7 BD B8 
119d9     BE D2 E8 FE 
119dd     04 08 07 0C 
119e1     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
119e5     2E 29 23 0E 
119e9     FE E4 DF CB 
119ed     BA B9 B4 B8 
119f1     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
119f5     ED F2 F8 01 
119f9     07 07 0F 14 
119fd     1B 22 21 11 
11a01     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
11a05     0F 14 12 FD 
11a09     DC C9 AF 9F 
11a0d     9E 9E A5 B4 
11a11     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
11a15     D4 D9 E2 EF 
11a19     F4 FB 00 06 
11a1d     0B 0A 09 04 
11a21     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
11a25     F3 FD 05 17 
11a29     28 29 28 23 
11a2d     19 20 29 37 
11a31     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
11a35     FD 01 01 0D 
11a39     1D 1D 24 16 
11a3d     0D FA F3 DC 
11a41     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
11a45     CD DF E8 ED 
11a49     E7 EA ED ED 
11a4d     EE ED E3 DB 
11a51     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
11a55     D7 C7 C4 C5 
11a59     C7 DB E6 EA 
11a5d     E6 E5 E4 EB 
11a61     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
11a65     2C 2F 2E 2D 
11a69     21 09 F9 E4 
11a6d     DE DF E4 E6 
11a71     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
11a75     E4 E4 D9 D8 
11a79     D6 D4 DC F1 
11a7d     FC 12 1D 27 
11a81     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
11a85     37 30 08 E6 
11a89     C3 B0 A0 9F 
11a8d     A3 AA B8 C5 
11a91     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
11a95     C7 C6 C9 D4 
11a99     E3 01 15 27 
11a9d     35 38 35 30 
11aa1     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
11aa5     00 03 05 0A 
11aa9     15 08 FD F3 
11aad     F3 F8 01 0C 
11ab1     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
11ab5     0C 24 3A 41 
11ab9     4C 4A 38 2A 
11abd     17 F8 E3 CE 
11ac1     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
11ac5     D5 D0 D0 CF 
11ac9     CC CB CE CB 
11acd     C4 C7 CC DF 
11ad1     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
11ad5     0A 04 FF FE 
11ad9     FE 01 00 EF 
11add     EC E7 E6 E4 
11ae1     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
11ae5     FD FD F3 ED 
11ae9     E7 E2 DB E6 
11aed     F3 FC 11 19 
11af1     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
11af5     FB F3 DC CC 
11af9     C4 C7 CA E1 
11afd     ED 03 08 0B 
11b01     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
11b05     18 0C FD F0 
11b09     E6 E2 E4 EE 
11b0d     F2 F8 EC E7 
11b11     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
11b15     A8 9E AD BD 
11b19     D8 ED FA 0D 
11b1d     15 1B 2A 27 
11b21     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
11b25     1A 21 23 20 
11b29     1B 12 03 F2 
11b2d     F1 E8 EA E3 
11b31     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
11b35     1E 33 4C 53 
11b39     51 51 4A 41 
11b3d     3C 1D 09 FF 
11b41     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
11b45     DF CF C8 BB 
11b49     BF A6 A3 9D 
11b4d     94 9C A5 B5 
11b51     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
11b55     FC FE 08 0E 
11b59     18 0F 0F 08 
11b5d     01 03 03 08 
11b61     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
11b65     DD D4 C7 C2 
11b69     BC BF C9 D6 
11b6d     ED FA 0D 1B 
11b71     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
11b75     36 1F 0E FC 
11b79     EE EC F3 FC 
11b7d     09 0B 04 F6 
11b81     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
11b85     CA B9 B7 B5 
11b89     C5 D2 EE FD 
11b8d     14 08 09 09 
11b91     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
11b95     D7 D6 CE CF 
11b99     DA D3 D7 E3 
11b9d     EB F3 02 04 
11ba1     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
11ba5     1F 32 47 49 
11ba9     4F 44 3C 2F 
11bad     21 14 FE F4 
11bb1     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
11bb5     0E 18 26 18 
11bb9     10 0A 04 FB 
11bbd     F5 F5 F3 F6 
11bc1     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
11bc5     F5 EB E2 DA 
11bc9     D5 C7 C2 AA 
11bcd     A0 96 98 9B 
11bd1     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
11bd5     F0 FC 0F 1A 
11bd9     17 1E 27 2D 
11bdd     3C 3A 45 46 
11be1     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
11be5     F6 E9 E2 DA 
11be9     D5 CA C6 CC 
11bed     CE CF D4 DA 
11bf1     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
11bf5     F2 F0 EE E9 
11bf9     F7 F7 06 18 
11bfd     13 1F 1C 1B 
11c01     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
11c05     B1 9F A2 A5 
11c09     B5 D7 EE F3 
11c0d     FD FD 03 11 
11c11     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
11c15     1A 17 16 09 
11c19     04 05 06 09 
11c1d     0E 0F FD F4 
11c21     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
11c25     E7 ED FD 05 
11c29     08 0A 1A 23 
11c2d     21 21 1F 1C 
11c31     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
11c35     3B 33 22 07 
11c39     F2 E2 D4 CC 
11c3d     CF D7 E6 FA 
11c41     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
11c45     05 0A 0B 06 
11c49     FF F3 E0 C9 
11c4d     B9 BA BA CA 
11c51     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
11c55     E6 F0 ED F4 
11c59     ED ED EE F0 
11c5d     FB 00 07 17 
11c61     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
11c65     F4 F7 F6 F7 
11c69     F9 FE FE 04 
11c6d     F8 EF E6 DD 
11c71     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
11c75     DD E5 E5 ED 
11c79     FE 0A 1C 2E 
11c7d     2A 2F 2D 2A 
11c81     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
11c85     E8 E4 EF F7 
11c89     EB F0 E6 D4 
11c8d     D2 D3 D3 D4 
11c91     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
11c95     F5 FF 02 01 
11c99     00 03 05 07 
11c9d     07 0A 05 FE 
11ca1     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
11ca5     EA E9 E9 EE 
11ca9     F7 0A 1A 28 
11cad     39 44 49 58 
11cb1     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
11cb5     32 16 02 FC 
11cb9     EF F5 F5 FF 
11cbd     04 02 02 01 
11cc1     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
11cc5     D2 D4 D3 D0 
11cc9     CF CC C5 C6 
11ccd     BB C3 CC D0 
11cd1     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
11cd5     FD 00 0C 0F 
11cd9     09 02 F9 F1 
11cdd     EC F0 F0 F2 
11ce1     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
11ce5     31 32 30 2D 
11ce9     21 18 06 FD 
11ced     F9 F4 F5 FF 
11cf1     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
11cf5     DD D5 C8 C1 
11cf9     C6 C7 CF D8 
11cfd     DD EB F4 F8 
11d01     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
11d05     F4 F2 E8 E9 
11d09     E2 DB DB DD 
11d0d     ED EF F9 F6 
11d11     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
11d15     03 0A 14 1D 
11d19     25 2A 34 35 
11d1d     25 23 15 03 
11d21     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
11d25     09 16 1D 1A 
11d29     18 18 1A 25 
11d2d     29 2A 29 28 
11d31     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
11d35     EC E5 E0 E7 
11d39     E8 ED F1 F8 
11d3d     FF 04 00 F8 
11d41     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
11d45     D7 D3 C9 CA 
11d49     C7 C6 C9 D9 
11d4d     DE F1 FE 02 
11d51     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
11d55     07 0C 1B 1D 
11d59     1F 20 1B 1B 
11d5d     06 EC E3 DE 
11d61     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
11d65     02 00 03 05 
11d69     03 01 FE F4 
11d6d     F5 F2 F0 F0 
11d71     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
11d75     D2 D0 D3 D3 
11d79     D8 D7 E2 E3 
11d7d     EE ED F4 03 
11d81     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
11d85     28 17 0A F4 
11d89     E2 E0 E0 EC 
11d8d     FA 08 15 13 
11d91     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
11d95     0D FF 01 FE 
11d99     FB FA F7 F5 
11d9d     E8 E9 E6 E3 
11da1     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
11da5     FB 00 06 0B 
11da9     11 1C 31 46 
11dad     4C 48 3D 29 
11db1     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
11db5     E4 EE FE 0F 
11db9     18 23 21 23 
11dbd     24 10 0D 08 
11dc1     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
11dc5     00 00 F0 E6 
11dc9     D8 CB C4 C0 
11dcd     C2 C7 CB CF 
11dd1     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
11dd5     FC 00 07 07 
11dd9     07 F7 F4 DB 
11ddd     CB CF D7 E6 
11de1     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
11de5     25 20 1F 0D 
11de9     08 01 03 06 
11ded     10 0D 0B 00 
11df1     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
11df5     D3 D3 D0 DA 
11df9     E3 F5 0C 02 
11dfd     02 03 0B 19 
11e01     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
11e05     FC E0 D0 CD 
11e09     C8 CC D8 E3 
11e0d     E9 F2 F8 F6 
11e11     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
11e15     F9 00 09 0F 
11e19     18 18 18 16 
11e1d     0C 06 01 03 
11e21     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
11e25     1B 1C 12 1E 
11e29     2D 3A 4E 56 
11e2d     53 43 3C 1F 
11e31     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
11e35     E0 F0 F4 03 
11e39     08 12 0D 08 
11e3d     FF F7 F2 E1 
11e41     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
11e45     CE CB C6 C0 
11e49     BB BD C2 D1 
11e4d     D5 E4 EB F3 
11e51     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
11e55     1C 1E 27 25 
11e59     1B F7 E5 D5 
11e5d     DB EC FE 15 
11e61     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
11e65     4A 38 2E 1E 
11e69     11 04 00 F4 
11e6d     EC E8 E6 DA 
11e71     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
11e75     AA AF B1 C2 
11e79     D1 DB D3 DC 
11e7d     EB EF 04 12 
11e81     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
11e85     03 F9 F6 F7 
11e89     F7 06 0B 14 
11e8d     19 18 0E FF 
11e91     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
11e95     0A 14 18 1A 
11e99     21 1F 12 07 
11e9d     02 01 FE 00 
11ea1     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
11ea5     21 20 20 2A 
11ea9     29 29 1E 10 
11ead     07 EB D6 CE 
11eb1     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
11eb5     E7 FE 14 2A 
11eb9     2F 2E 2E 2E 
11ebd     26 1F 16 0E 
11ec1     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
11ec5     DE D5 CD CC 
11ec9     CF E0 E5 EF 
11ecd     FD 02 FC F3 
11ed1     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
11ed5     05 06 05 F4 
11ed9     E6 E2 D7 DC 
11edd     E7 ED F7 02 
11ee1     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
11ee5     06 05 F9 FB 
11ee9     F1 ED ED ED 
11eed     EE F3 F3 F2 
11ef1     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
11ef5     D7 E8 F2 F6 
11ef9     E8 E4 E6 00 
11efd     0F 21 36 38 
11f01     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
11f05     04 FC FD FA 
11f09     FF 06 05 15 
11f0d     0C 05 06 01 
11f11     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
11f15     E0 DE DF DF 
11f19     E0 E3 E5 E3 
11f1d     E6 EB F7 0E 
11f21     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
11f25     37 47 4B 51 
11f29     44 3E 2E 0C 
11f2d     FA DE D0 C9 
11f31     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
11f35     2E 43 48 3E 
11f39     34 24 1D 10 
11f3d     09 01 F9 F0 
11f41     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
11f45     E4 D6 D6 C4 
11f49     BB BD BE BD 
11f4d     BC B9 BC CD 
11f51     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
11f55     FE FB F9 F6 
11f59     F9 FE 08 16 
11f5d     22 2C 39 37 
11f61     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
11f65     04 02 02 05 
11f69     07 09 07 09 
11f6d     07 F8 EA D8 
11f71     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
11f75     ED EE EE EE 
11f79     F3 FC 07 0F 
11f7d     0F 0A 01 ED 
11f81     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
11f85     D9 E1 EA F2 
11f89     05 0D 13 14 
11f8d     16 17 1A 1C 
11f91     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
11f95     02 00 F2 E8 
11f99     E4 E5 EA F9 
11f9d     0D 24 42 4D 
11fa1     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
11fa5     31 2C 2D 22 
11fa9     15 02 F1 E8 
11fad     E4 E4 E5 ED 
11fb1     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
11fb5     0A 00 FA F9 
11fb9     F9 F7 FF F8 
11fbd     F9 FA F5 FB 
11fc1     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
11fc5     F6 EC EC EC 
11fc9     E9 E4 DB CD 
11fcd     C3 BE CC E1 
11fd1     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
11fd5     18 17 12 02 
11fd9     05 02 05 0F 
11fdd     1D 2A 2A 27 
11fe1     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
11fe5     FE F4 E5 CF 
11fe9     C4 B7 B4 AF 
11fed     AF AD AD B2 
11ff1     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
11ff5     FC 09 0E 15 
11ff9     1F 31 3D 44 
11ffd     41 27 11 07 
12001     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
12005     E8 FD 12 29 
12009     33 36 35 2A 
1200d     1A 15 0E 09 
12011     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
12015     06 07 06 07 
12019     06 03 01 01 
1201d     02 02 00 FD 
12021     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
12025     FD 03 05 F9 
12029     F1 F3 F6 FB 
1202d     04 0A 19 23 
12031     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
12035     1D 0F 00 FC 
12039     FB FD 0C 11 
1203d     1C 27 27 27 
12041     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
12045     D0 CB CC C9 
12049     C9 D0 D0 D3 
1204d     DD E8 F8 02 
12051     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
12055     D1 D3 D8 DE 
12059     EC F9 05 1C 
1205d     2B 2D 33 34 
12061     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
12065     03 FB EE E4 
12069     E0 CF C8 C2 
1206d     BC BE C9 DB 
12071     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
12075     24 16 16 14 
12079     1F 27 25 1B 
1207d     15 0F 0A 0D 
12081     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
12085     FC FE F6 F1 
12089     E8 E4 DB D7 
1208d     DB DC E6 EE 
12091     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
12095     1F 2C 2F 30 
12099     2D 2D 2E 26 
1209d     24 1F 0C 03 
120a1     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
120a5     08 0C 13 14 
120a9     1E 1F 15 17 
120ad     0F 15 14 16 
120b1     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
120b5     21 1A 1A 12 
120b9     0D 04 FE F4 
120bd     EB E5 E0 DF 
120c1     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
120c5     BF BD C2 D2 
120c9     D5 DC DD EA 
120cd     FE 0C 09 0A 
120d1     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
120d5     F3 F8 F9 04 
120d9     11 24 39 4A 
120dd     51 50 44 23 
120e1     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
120e5     D5 CE CE CC 
120e9     CE DA E0 E7 
120ed     E5 DE D7 D6 
120f1     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
120f5     DB E2 F3 05 
120f9     07 10 18 17 
120fd     22 26 28 33 
12101     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
12105     13 0F 09 00 
12109     F3 EA E7 E9 
1210d     EA F5 09 15 
12111     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
12115     37 30 27 1F 
12119     19 17 14 16 
1211d     16 11 FE FA 
12121     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
12125     E4 DA D6 D4 
12129     DE E6 EE F9 
1212d     F9 FE 07 16 
12131     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
12135     2D 32 2C 22 
12139     1E 0F 05 00 
1213d     F2 E8 E4 DB 
12141     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
12145     DA E3 F6 FD 
12149     EF EE EE FE 
1214d     FA FD FE 00 
12151     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
12155     1A 18 25 20 
12159     1B 1B 13 0E 
1215d     00 EF DD D1 
12161     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
12165     C8 CD D8 E3 
12169     FB FE 0C 01 
1216d     F3 EC E8 E9 
12171     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
12175     F3 07 0B 19 
12179     2B 33 3D 48 
1217d     4B 3D 35 21 
12181     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
12185     00 00 02 01 
12189     00 FE 06 06 
1218d     05 03 03 FC 
12191     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
12195     06 05 03 01 
12199     02 07 0E 0D 
1219d     05 03 03 0B 
121a1     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
121a5     FC FA F7 F9 
121a9     09 0C 0B 0D 
121ad     0D 15 24 38 
121b1     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
121b5     2B 24 18 15 
121b9     0F 09 04 03 
121bd     03 00 F8 F1 
121c1     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
121c5     AE A5 A1 9B 
121c9     9F BA C1 D1 
121cd     E4 F6 FF 08 
121d1     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
121d5     38 37 35 25 
121d9     23 15 11 F9 
121dd     E3 DE D4 D8 
121e1     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
121e5     ED FC 09 10 
121e9     14 04 FF EA 
121ed     E7 E5 ED EE 
121f1     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
121f5     19 1C 22 24 
121f9     21 1F 15 0F 
121fd     0F 05 05 F9 
12201     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
12205     F8 F9 FA F9 
12209     03 08 0F 14 
1220d     13 14 12 12 
12211     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
12215     27 1F 19 17 
12219     17 14 13 08 
1221d     FD FA F4 F3 
12221     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
12225     05 0F 1F 29 
12229     27 28 1E 16 
1222d     12 10 0F 08 
12231     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
12235     FB FE 04 06 
12239     07 0C 0A 14 
1223d     12 07 FC E4 
12241     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
12245     AD A2 A7 B7 
12249     C5 D8 F3 03 
1224d     09 17 1B 25 
12251     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
12255     30 2C 23 1F 
12259     1A 10 0A F6 
1225d     EE EB E2 E3 
12261     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
12265     D7 E2 EB EA 
12269     E5 D5 D1 CB 
1226d     DB DE EF F4 
12271     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
12275     24 23 24 23 
12279     18 17 0D 0F 
1227d     0D 0F 0F 0A 
12281     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
12285     05 06 03 05 
12289     07 0A 0D 14 
1228d     14 1E 24 2E 
12291     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
12295     19 0B FF FA 
12299     F1 E6 DB D7 
1229d     D2 D3 DD E8 
122a1     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
122a5     1F 2D 2F 2E 
122a9     22 19 10 07 
122ad     01 00 00 FE 
122b1     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
122b5     27 2B 31 2E 
122b9     23 2A 2A 1E 
122bd     0F F1 D9 BC 
122c1     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
122c5     BE C2 CC CC 
122c9     DE EC F1 FB 
122cd     FA FF 00 08 
122d1     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
122d5     0A 0B 09 07 
122d9     00 FC FA F0 
122dd     EC EE E7 E9 
122e1     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
122e5     EF F6 F3 EB 
122e9     E4 DE E0 EB 
122ed     EF FD 0E 19 
122f1     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
122f5     30 33 31 2E 
122f9     2E 30 31 34 
122fd     2A 18 0B F2 
12301     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
12305     DB DC E7 ED 
12309     F7 06 18 21 
1230d     30 39 41 45 
12311     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
12315     E8 DE D1 D4 
12319     D4 D4 D3 CE 
1231d     DF F5 0B 1B 
12321     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
12325     3A 39 31 22 
12329     15 0C FE 00 
1232d     F9 FF 04 0D 
12331     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
12335     21 21 20 20 
12339     1F 1C 11 FD 
1233d     E3 C5 B5 B4 
12341     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
12345     D8 CC CE D0 
12349     DD E8 E8 ED 
1234d     ED F8 FE 07 
12351     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
12355     1F 14 0C 04 
12359     FF FE F4 F0 
1235d     F0 F2 F3 F8 
12361     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
12365     13 10 F9 E1 
12369     D0 BF BE CB 
1236d     DB EE FE F7 
12371     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
12375     35 38 39 36 
12379     3B 3A 37 2F 
1237d     17 FD EC DB 
12381     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
12385     CA D6 ED 03 
12389     1C 32 48 4E 
1238d     5C 5E 60 50 
12391     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
12395     D3 D3 D8 E9 
12399     EE EE ED F4 
1239d     FF 0C 11 10 
123a1     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
123a5     28 28 23 19 
123a9     18 13 09 0B 
123ad     06 07 07 06 
123b1     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
123b5     0D 0F 12 13 
123b9     09 01 ED D6 
123bd     C6 C2 C2 CC 
123c1     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
123c5     E0 DA D9 DC 
123c9     E6 E4 EB EA 
123cd     F2 00 11 14 
123d1     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
123d5     F4 E2 E0 DB 
123d9     DC E1 EC F9 
123dd     06 12 28 2F 
123e1     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
123e5     0A E5 CC AF 
123e9     A6 AC BC D3 
123ed     E9 EF E5 E9 
123f1     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
123f5     37 41 44 46 
123f9     52 4E 42 32 
123fd     1C 0B F1 E5 
12401     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
12405     DE F4 05 17 
12409     1F 2A 37 37 
1240d     37 37 2C 17 
12411     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
12415     F9 01 0E 15 
12419     07 F8 F6 F7 
1241d     F6 F9 00 FD 
12421     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
12425     FE FD FE 01 
12429     02 07 0E 0F 
1242d     1A 22 1F 20 
12431     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
12435     27 1F 19 10 
12439     02 F4 E2 D0 
1243d     CD C6 CA D4 
12441     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
12445     DA E7 EF FE 
12449     0A 0E 0F 12 
1244d     10 0D 0B 01 
12451     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
12455     C9 CB CA CB 
12459     C9 D0 DF ED 
1245d     08 1C 2B 3B 
12461     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
12465     F8 DC CA C3 
12469     C5 CD DE E8 
1246d     EB E8 EA F7 
12471     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
12475     20 21 24 29 
12479     29 2E 30 2E 
1247d     30 2E 2D 1D 
12481     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
12485     FB FD 03 0C 
12489     11 18 1D 17 
1248d     16 FB E5 D5 
12491     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
12495     F6 10 24 24 
12499     24 21 1F 26 
1249d     27 27 24 18 
124a1     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
124a5     E7 ED F1 F2 
124a9     F2 F5 F7 FA 
124ad     FB 05 0D 21 
124b1     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
124b5     53 4B 3B 28 
124b9     08 F6 DD CC 
124bd     CA C9 CC DC 
124c1     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
124c5     BE C6 CC D6 
124c9     DE E6 EB F9 
124cd     02 06 03 03 
124d1     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
124d5     F4 E3 DA DB 
124d9     D9 E6 F4 07 
124dd     18 24 29 27 
124e1     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
124e5     EA E7 ED F4 
124e9     03 14 1D 18 
124ed     0E 08 02 05 
124f1     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
124f5     0A 0A 0A 02 
124f9     FC FB F6 F7 
124fd     F7 F9 FE 07 
12501     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
12505     1C 27 28 32 
12509     2D 22 13 FD 
1250d     E8 DE D0 CD 
12511     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
12515     0D 15 13 16 
12519     18 22 30 47 
1251d     4E 56 51 3D 
12521     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
12525     EE E4 E5 E3 
12529     E4 E9 ED EE 
1252d     F3 F0 F7 F9 
12531     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
12535     01 0B 0F 14 
12539     12 0A 09 09 
1253d     14 14 19 11 
12541     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
12545     C4 CB DA DC 
12549     DB E0 E0 DD 
1254d     DF EB EF 00 
12551     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
12555     24 19 18 17 
12559     14 13 16 16 
1255d     16 14 04 00 
12561     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
12565     BC B9 BA BD 
12569     CE E1 E5 EF 
1256d     03 06 0B 14 
12571     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
12575     23 1E 09 FE 
12579     FA F4 F5 FC 
1257d     03 0C 19 1D 
12581     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
12585     37 3F 3D 33 
12589     2B 1D 0A FE 
1258d     F5 F6 F7 F7 
12591     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
12595     13 0E 05 FD 
12599     F9 FD FE 06 
1259d     05 02 FA FA 
125a1     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
125a5     E8 E8 E9 FD 
125a9     05 0A 0B 0B 
125ad     0B 06 00 F9 
125b1     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
125b5     F7 FE 09 16 
125b9     1F 2D 34 3D 
125bd     43 41 2D 15 
125c1     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
125c5     E8 EA EF E7 
125c9     E6 DB CD C8 
125cd     BD B9 BC BA 
125d1     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
125d5     FF 0C 1E 26 
125d9     24 19 1A 12 
125dd     12 08 07 FD 
125e1     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
125e5     DE DC DB E2 
125e9     E9 E5 F0 F9 
125ed     06 1A 2B 39 
125f1     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
125f5     26 18 07 05 
125f9     05 06 10 18 
125fd     26 2B 31 31 
12601     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
12605     EA D2 C3 C0 
12609     BF BE CE E5 
1260d     F7 00 06 07 
12611     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
12615     1B 1A 15 0E 
12619     12 14 1C 1C 
1261d     12 0E 05 00 
12621     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
12625     03 0F 15 1C 
12629     22 20 21 1F 
1262d     1C 15 07 04 
12631     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
12635     00 06 05 07 
12639     06 01 00 F9 
1263d     F4 E6 E2 DB 
12641     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
12645     DF E0 EA E3 
12649     E4 DA D6 D6 
1264d     D4 CD D0 D8 
12651     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
12655     25 2C 37 3B 
12659     3A 37 30 1B 
1265d     12 FF F9 F6 
12661     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
12665     FB FE 01 FE 
12669     FD FA FA F5 
1266d     F1 F3 F2 F3 
12671     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
12675     EA F2 FC FB 
12679     FE 08 10 1E 
1267d     2C 36 3A 40 
12681     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
12685     EF DC D4 D1 
12689     D7 E8 FB 12 
1268d     21 31 3D 49 
12691     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
12695     18 13 14 17 
12699     2B 33 31 31 
1269d     27 1E 10 02 
126a1     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
126a5     C2 C6 C7 D1 
126a9     DA EC F4 01 
126ad     F6 EB E7 E0 
126b1     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
126b5     14 1E 2B 32 
126b9     30 30 23 0A 
126bd     FB F8 EF EE 
126c1     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
126c5     0B 0A 05 F4 
126c9     E6 DA D7 D7 
126cd     D9 E9 F5 0B 
126d1     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
126d5     36 2B 1C 09 
126d9     F9 DD C4 BD 
126dd     B8 BA CE DB 
126e1     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
126e5     EE E4 E0 E6 
126e9     EF F8 01 07 
126ed     15 1F 25 24 
126f1     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
126f5     09 0E 15 24 
126f9     2B 3A 3F 3F 
126fd     3E 2E 25 1F 
12701     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
12705     F1 EC F0 F8 
12709     04 12 14 16 
1270d     14 13 10 FA 
12711     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
12715     EA F2 F8 06 
12719     0A 0B 0B 06 
1271d     02 02 00 00 
12721     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
12725     07 06 05 06 
12729     09 0A 0A 0B 
1272d     0A 09 04 FE 
12731     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
12735     1B 28 37 3A 
12739     3F 2F 21 18 
1273d     10 03 F9 E6 
12741     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
12745     D2 C3 BA B4 
12749     AE B1 B6 B8 
1274d     C4 D6 E8 F6 
12751     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
12755     1C 22 23 1E 
12759     12 FE ED E9 
1275d     EA F5 03 08 
12761     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
12765     FF FC FA FA 
12769     FA F9 00 10 
1276d     21 31 30 31 
12771     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
12775     19 18 16 13 
12779     10 0D 03 F6 
1277d     F1 E2 DE D8 
12781     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
12785     C8 CF E0 F4 
12789     05 1C 2C 3A 
1278d     43 3F 2F 22 
12791     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
12795     16 1E 27 28 
12799     25 1E 10 04 
1279d     FF FA F9 FB 
127a1     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
127a5     1D 1B 1A 17 
127a9     0D 00 F8 F9 
127ad     EF E1 D4 D2 
127b1     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
127b5     FF FD FE F3 
127b9     EB E2 DA DD 
127bd     DB DD E7 ED 
127c1     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
127c5     08 FD F0 EB 
127c9     EA F2 F8 01 
127cd     0C 11 18 14 
127d1     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
127d5     11 10 10 0D 
127d9     00 00 00 07 
127dd     0E 14 13 0E 
127e1     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
127e5     D9 DB D6 D6 
127e9     D6 D6 DE EC 
127ed     F1 F7 F5 F5 
127f1     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
127f5     2C 37 41 3F 
127f9     3E 2E 1B 0B 
127fd     00 FC FE FE 
12801     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
12805     F6 FB 04 12 
12809     20 2C 38 30 
1280d     2E 2D 2D 32 
12811     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
12815     12 10 08 01 
12819     FA E9 E2 D5 
1281d     D7 D8 D3 CD 
12821     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
12825     DF DD E5 EB 
12829     01 11 1F 27 
1282d     23 19 1A 18 
12831     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
12835     2E 13 02 F4 
12839     EA E7 E2 E3 
1283d     E0 E3 F4 05 
12841     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
12845     08 00 01 00 
12849     F9 FA FA F9 
1284d     FA F9 F1 E8 
12851     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
12855     CB C1 BD BC 
12859     BD C2 D1 E8 
1285d     03 12 1E 1A 
12861     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
12865     1A 18 17 14 
12869     16 22 23 20 
1286d     1B 11 09 0A 
12871     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
12875     33 32 31 2C 
12879     1D 10 09 01 
1287d     FE 01 01 F9 
12881     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
12885     F0 F7 FC 03 
12889     F8 E4 DB DC 
1288d     DC E7 F0 F8 
12891     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
12895     30 33 34 2A 
12899     1C 10 0E 10 
1289d     10 0F 05 05 
128a1     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
128a5     E4 E6 F3 03 
128a9     17 1E 21 20 
128ad     28 25 28 38 
128b1     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
128b5     F0 E0 D3 D3 
128b9     D3 CE CA C6 
128bd     C0 C6 C6 D1 
128c1     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
128c5     CC E0 F6 10 
128c9     1F 32 36 35 
128cd     30 25 1D 0F 
128d1     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
128d5     EA DF D7 D3 
128d9     DA F2 01 12 
128dd     14 0E 08 06 
128e1     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
128e5     26 21 16 22 
128e9     1B 1B 1A 10 
128ed     08 02 FE 00 
128f1     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
128f5     D4 CA C4 C2 
128f9     BB BF D1 EE 
128fd     08 1D 2E 3F 
12901     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
12905     3A 45 37 27 
12909     11 01 F8 FA 
1290d     FB 07 0B 09 
12911     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
12915     26 24 19 18 
12919     13 16 17 17 
1291d     12 09 FC F0 
12921     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
12925     D9 DE D8 D6 
12929     D3 D4 D6 D9 
1292d     E3 F0 02 12 
12931     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
12935     0B 0B 0D 0D 
12939     0B 0A 07 07 
1293d     07 09 07 F7 
12941     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
12945     FB 09 1B 26 
12949     21 1F 1C 1B 
1294d     18 0E 00 FE 
12951     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
12955     DB DB DD E7 
12959     EF FC EC D0 
1295d     C1 B6 AD B1 
12961     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
12965     F9 0E 25 3F 
12969     57 5D 5B 58 
1296d     50 46 46 3C 
12971     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
12975     DB CB C9 CC 
12979     D9 F2 03 13 
1297d     24 30 33 31 
12981     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
12985     32 24 12 06 
12989     FD FA FE 04 
1298d     00 F8 EF E0 
12991     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
12995     CC CB CB D6 
12999     E4 F1 03 0E 
1299d     1B 1A 1B 1B 
129a1     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
129a5     1E 17 1A 15 
129a9     09 FE F9 F9 
129ad     00 0E 0B 06 
129b1     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
129b5     F6 00 04 0A 
129b9     09 04 03 06 
129bd     0E 0D 05 FE 
129c1     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
129c5     F4 E3 D9 CE 
129c9     C3 C0 C2 BF 
129cd     C2 CD CE DF 
129d1     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
129d5     26 2B 34 35 
129d9     2B 17 05 F7 
129dd     E1 D6 D6 D8 
129e1     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
129e5     19 2F 3F 4A 
129e9     51 4C 45 3E 
129ed     38 2E 21 18 
129f1     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
129f5     D3 D6 D9 E3 
129f9     E7 DB DF E0 
129fd     E3 E5 E6 EB 
12a01     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
12a05     0E 15 1E 2C 
12a09     3A 44 43 44 
12a0d     3D 2A 19 11 
12a11     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
12a15     E2 E4 E9 F3 
12a19     02 0C 11 0F 
12a1d     08 07 0A 0B 
12a21     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
12a25     0F 14 12 12 
12a29     12 0F 0F 0A 
12a2d     FB E5 C5 AC 
12a31     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
12a35     AE C2 D4 DF 
12a39     EB FF 17 30 
12a3d     41 48 46 44 
12a41     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
12a45     20 09 F9 E1 
12a49     D2 C7 C5 CB 
12a4d     D1 D7 E8 F2 
12a51     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
12a55     26 25 19 0C 
12a59     00 EF E7 E2 
12a5d     E3 EB FA 06 
12a61     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
12a65     F6 F6 F7 FC 
12a69     FA F7 F7 F7 
12a6d     FC FE FE 00 
12a71     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
12a75     22 2F 32 2C 
12a79     2D 26 24 1C 
12a7d     15 04 00 FC 
12a81     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
12a85     0A 15 22 29 
12a89     2D 32 32 22 
12a8d     10 04 06 06 
12a91     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
12a95     06 05 00 F5 
12a99     DC C3 AF A5 
12a9d     A1 AA BB CD 
12aa1     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
12aa5     20 31 41 49 
12aa9     4F 4E 3A 2D 
12aad     1B 01 EC DC 
12ab1     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
12ab5     DB E1 E7 F5 
12ab9     03 17 29 3A 
12abd     3C 3A 39 37 
12ac1     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
12ac5     FE F5 F0 E1 
12ac9     E6 E9 E4 DB 
12acd     D2 C4 BD BE 
12ad1     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
12ad5     C5 CD D8 DD 
12ad9     DF E7 FA 0A 
12add     22 39 4A 53 
12ae1     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
12ae5     3A 33 2A 18 
12ae9     05 FC F1 F2 
12aed     F0 EB EC EE 
12af1     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
12af5     1E 1C 1B 1A 
12af9     1B 22 23 24 
12afd     24 23 0E 05 
12b01     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
12b05     CC C9 C7 CF 
12b09     DB E0 E7 E9 
12b0d     F9 06 1C 32 
12b11     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
12b15     3D 39 2E 17 
12b19     05 F5 E9 E2 
12b1d     DE E5 E5 E4 
12b21     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
12b25     19 1E 29 28 
12b29     14 0C FF F3 
12b2d     E5 D9 D2 D4 
12b31     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
12b35     0C 0D 0A FF 
12b39     00 FD F3 EB 
12b3d     E3 D5 D7 DC 
12b41     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
12b45     03 05 0F 15 
12b49     1B 15 11 08 
12b4d     02 03 02 01 
12b51     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
12b55     DB DC DB DB 
12b59     E0 E7 FA 0F 
12b5d     21 39 37 36 
12b61     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
12b65     3A 33 2C 1D 
12b69     0A 06 FF EF 
12b6d     DC C5 BB B7 
12b71     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
12b75     E3 F5 05 18 
12b79     29 3B 47 4C 
12b7d     3F 32 2B 23 
12b81     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
12b85     EE F2 F7 FB 
12b89     FB F9 F4 FA 
12b8d     0A 1E 2A 2D 
12b91     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
12b95     15 0D 00 FE 
12b99     F5 F6 F6 00 
12b9d     00 01 FE 01 
12ba1     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
12ba5     E0 D7 C3 B1 
12ba9     AF B2 BF CC 
12bad     D1 DF EB 02 
12bb1     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
12bb5     3F 3D 3E 3D 
12bb9     3D 38 29 1D 
12bbd     0A FA F3 F0 
12bc1     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
12bc5     EE F6 F6 F3 
12bc9     F2 F0 EB F1 
12bcd     F8 01 09 0F 
12bd1     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
12bd5     EB E5 D6 CC 
12bd9     C4 C0 CC D9 
12bdd     DD ED F7 02 
12be1     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
12be5     46 3E 34 27 
12be9     1E 14 0C FF 
12bed     FA F1 F3 F5 
12bf1     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
12bf5     05 07 0F 1D 
12bf9     27 2D 2D 19 
12bfd     15 07 0A 07 
12c01     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
12c05     F6 00 03 05 
12c09     06 09 0A 11 
12c0d     12 12 07 F2 
12c11     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
12c15     E4 F1 00 0C 
12c19     1A 1D 24 25 
12c1d     20 1F 0F 03 
12c21     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
12c25     F6 EA E4 DE 
12c29     DC D7 D8 D6 
12c2d     D3 D6 E1 F6 
12c31     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
12c35     2A 37 44 47 
12c39     44 3D 2A 10 
12c3d     02 FC FE 00 
12c41     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
12c45     C4 B2 AB A7 
12c49     A9 BB CE E9 
12c4d     07 19 1E 16 
12c51     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
12c55     01 F5 EB E7 
12c59     EA FA 0D 1E 
12c5d     2A 2D 2A 2D 
12c61     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
12c65     15 03 FD F8 
12c69     FA FA 02 03 
12c6d     08 0F 15 13 
12c71     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
12c75     07 06 06 09 
12c79     06 EF DF CF 
12c7d     CE D5 DE EC 
12c81     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
12c85     07 0C 16 1E 
12c89     1F 1F 21 26 
12c8d     25 23 19 11 
12c91     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
12c95     13 16 1B 18 
12c99     17 12 03 FE 
12c9d     F4 E6 E2 DB 
12ca1     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
12ca5     E9 E6 E4 E5 
12ca9     E8 E8 E0 D4 
12cad     D4 D6 D8 E3 
12cb1     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
12cb5     2B 3D 50 57 
12cb9     4E 3A 24 13 
12cbd     0F 0A 0D 0B 
12cc1     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
12cc5     E3 DC DF DC 
12cc9     DD E7 EF FD 
12ccd     00 FE F4 EB 
12cd1     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
12cd5     E3 D9 DC EC 
12cd9     FA 0B 1C 25 
12cdd     29 2F 2D 23 
12ce1     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
12ce5     E8 DD DA DD 
12ce9     EF 02 13 24 
12ced     2F 33 27 1F 
12cf1     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
12cf5     01 06 0A 07 
12cf9     FD FD FE 08 
12cfd     0E 1A 16 0C 
12d01     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
12d05     F6 F9 00 06 
12d09     05 07 0F 19 
12d0d     1D 1C 17 16 
12d11     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
12d15     1B 16 16 09 
12d19     FC 00 00 E0 
12d1d     F6 F5 04 0D 
12d21     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
12d25     0E 0F 12 17 
12d29     17 0C FD F0 
12d2d     EC EE F8 08 
12d31     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
12d35     0A 07 06 01 
12d39     01 FF FF F8 
12d3d     F7 F2 E3 D9 
12d41     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
12d45     AB AC B8 C6 
12d49     DA ED FD 05 
12d4d     12 1C 2B 39 
12d51     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
12d55     35 16 F7 EE 
12d59     E9 EA E9 DF 
12d5d     D1 CE CE CE 
12d61     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
12d65     0E 1F 20 29 
12d69     2D 27 1B 16 
12d6d     0D 09 FF F9 
12d71     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
12d75     DF E3 E4 EE 
12d79     F7 04 12 20 
12d7d     2A 2E 2A 2D 
12d81     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
12d85     3F 38 1A 06 
12d89     F1 E0 D7 DB 
12d8d     CE D3 DA DC 
12d91     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
12d95     E7 E2 D9 DD 
12d99     D1 CD CE CB 
12d9d     D0 D7 DE ED 
12da1     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
12da5     06 0E 06 05 
12da9     05 0A 0E 15 
12dad     24 2E 33 38 
12db1     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
12db5     2C 2A 22 21 
12db9     10 03 F9 EA 
12dbd     E7 E2 C4 B9 
12dc1     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
12dc5     AF B1 BB C9 
12dc9     D6 EA E4 EF 
12dcd     EE FE 01 11 
12dd1     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
12dd5     1C 12 0D 04 
12dd9     F7 E9 D5 D3 
12ddd     C2 CC D3 DD 
12de1     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
12de5     41 5D 69 6E 
12de9     62 4A 3A 1F 
12ded     07 F9 E8 DF 
12df1     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
12df5     E4 EB ED F2 
12df9     F6 FA 01 08 
12dfd     07 07 0C 10 
12e01     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
12e05     15 0C FF F5 
12e09     F2 DA CF D3 
12e0d     C9 D1 E5 F6 
12e11     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
12e15     07 05 07 0C 
12e19     10 0F 0E FE 
12e1d     F9 F2 E1 DE 
12e21     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
12e25     E7 F2 00 08 
12e29     1B 2B 2D 32 
12e2d     38 36 1F 0C 
12e31     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
12e35     D5 DC E2 F0 
12e39     F4 FF 09 06 
12e3d     F2 D7 C7 B5 
12e41     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
12e45     E0 E7 FB 12 
12e49     19 31 32 34 
12e4d     2C 26 18 11 
12e51     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
12e55     03 FE FF FE 
12e59     F6 EF DC D4 
12e5d     CF C5 CC DB 
12e61     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
12e65     20 2D 2F 21 
12e69     21 16 1A 1A 
12e6d     17 14 0C F6 
12e71     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
12e75     E3 E4 EF EE 
12e79     FB 08 15 2E 
12e7d     48 58 63 60 
12e81     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
12e85     FB E7 E1 C5 
12e89     C5 C3 CB DB 
12e8d     EE FA 0B 12 
12e91     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
12e95     BB B9 B9 BC 
12e99     BF C7 D1 DE 
12e9d     E8 F5 FF 03 
12ea1     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
12ea5     E0 F0 04 1E 
12ea9     36 4E 67 6D 
12ead     75 6E 64 4C 
12eb1     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
12eb5     D0 CD C8 D1 
12eb9     DF E4 E9 D6 
12ebd     D1 CA CA CA 
12ec1     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
12ec5     E3 DC E8 ED 
12ec9     EE F3 F0 E3 
12ecd     E4 E4 EB F2 
12ed1     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
12ed5     09 FE F8 E9 
12ed9     DC D2 CD CB 
12edd     D5 DA F8 0E 
12ee1     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
12ee5     6C 52 43 28 
12ee9     19 12 0D 0D 
12eed     01 FD FE F9 
12ef1     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
12ef5     E3 D4 C8 B5 
12ef9     B6 C5 D8 EF 
12efd     06 17 23 31 
12f01     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
12f05     1D 01 EE D7 
12f09     D2 D3 D6 E8 
12f0d     03 17 1E 1D 
12f11     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
12f15     FE F9 F4 EA 
12f19     E4 DE DC D7 
12f1d     D8 DB D6 CA 
12f21     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
12f25     F7 11 20 37 
12f29     37 39 3E 38 
12f2d     31 1C 09 ED 
12f31     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
12f35     C4 D6 DF F4 
12f39     F7 EC DE D4 
12f3d     CC CB D0 DB 
12f41     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
12f45     32 36 3B 3A 
12f49     30 1B 0A F4 
12f4d     EE E1 DF EC 
12f51     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
12f55     EF FB FA F2 
12f59     E8 DA C1 A7 
12f5d     A3 A4 B4 C7 
12f61     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
12f65     1D 1D 25 2B 
12f69     31 3B 37 37 
12f6d     30 27 1A 07 
12f71     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
12f75     E0 DE DD E8 
12f79     F5 11 1F 2A 
12f7d     33 32 32 35 
12f81     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
12f85     EA D9 D6 D6 
12f89     E6 F3 00 13 
12f8d     0E FD DC CF 
12f91     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
12f95     B1 C1 C8 DC 
12f99     E5 EB FA FC 
12f9d     F9 EF DD D1 
12fa1     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
12fa5     07 2B 3E 54 
12fa9     60 6C 78 75 
12fad     65 4F 20 FD 
12fb1     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
12fb5     C2 CC D0 D2 
12fb9     CF CF D0 D2 
12fbd     D7 DD DB D6 
12fc1     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
12fc5     E9 EA E8 E9 
12fc9     E9 E4 E8 E0 
12fcd     E7 EE F3 02 
12fd1     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
12fd5     F5 FC FD FD 
12fd9     EB E4 DB D7 
12fdd     E3 F0 02 14 
12fe1     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
12fe5     26 25 1B 1D 
12fe9     1D 27 25 2A 
12fed     29 24 15 0B 
12ff1     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
12ff5     AB A7 AB BD 
12ff9     CC E2 F8 04 
12ffd     0D 1D 2A 38 
13001     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
13005     F8 E9 EA EA 
13009     FA 06 10 0F 
1300d     04 FF F5 F0 
13011     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
13015     FF 01 00 FD 
13019     E8 DD D6 C9 
1301d     C4 C3 C3 C6 
13021     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
13025     F9 01 01 08 
13029     12 1C 21 1D 
1302d     04 ED D6 C9 
13031     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
13035     ED F1 ED ED 
13039     EC EA EF F1 
1303d     FC 07 0F 18 
13041     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
13045     1A 1A 10 0F 
13049     08 F2 E6 CF 
1304d     D6 D3 D2 DD 
13051     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
13055     01 F5 E1 C6 
13059     B8 A8 A7 AB 
1305d     B7 C6 DA ED 
13061     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
13065     1E 30 41 4D 
13069     51 56 4F 3F 
1306d     28 18 06 EC 
13071     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
13075     DD E6 FE 0F 
13079     20 32 39 31 
1307d     28 28 20 23 
13081     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
13085     E8 E9 F3 EC 
13089     E5 D5 C2 B6 
1308d     B1 AB AF B2 
13091     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
13095     FC 00 FD FE 
13099     FD FB F4 F2 
1309d     E8 E3 E5 E8 
130a1     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
130a5     1D 2A 34 42 
130a9     58 5A 53 3D 
130ad     1D 03 DE C5 
130b1     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
130b5     B9 BE C8 D7 
130b9     E1 DA DC E1 
130bd     EB F1 F7 F3 
130c1     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
130c5     E5 EA EC E4 
130c9     DB DB E0 E1 
130cd     E9 EE F0 F2 
130d1     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
130d5     05 F9 EB E2 
130d9     E3 E1 F5 05 
130dd     18 28 21 26 
130e1     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
130e5     1D 26 35 3C 
130e9     44 3D 2A 09 
130ed     EC D3 C5 B2 
130f1     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
130f5     B9 C6 DC F3 
130f9     03 0C 1B 27 
130fd     3E 4B 50 40 
13101     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
13105     FE F9 F7 EB 
13109     D7 CB CF D2 
1310d     E3 EC FF 0F 
13111     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
13115     F9 E8 D1 CC 
13119     C8 CC CE D8 
1311d     D4 CA CC CC 
13121     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
13125     F5 02 10 1D 
13129     21 1B 10 00 
1312d     EF E6 DE E3 
13131     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
13135     D8 DB E2 E7 
13139     EE FC 08 16 
1313d     28 30 2D 2C 
13141     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
13145     1A FD E2 CF 
13149     BF B8 BC BF 
1314d     C7 D1 DA D3 
13151     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
13155     C8 C7 B7 B9 
13159     BA C7 DB E9 
1315d     EB F9 02 16 
13161     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
13165     64 66 66 5A 
13169     41 21 08 F4 
1316d     E5 E2 E0 EA 
13171     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
13175     0E 1A 12 12 
13179     08 0A 0D 18 
1317d     1C 11 16 0B 
13181     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
13185     CB C6 A9 A8 
13189     A1 A5 AF BD 
1318d     D4 E4 FB 0B 
13191     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
13195     12 FD FC EE 
13199     F2 F0 DE E0 
1319d     D6 DB E6 EF 
131a1     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
131a5     49 56 5A 4F 
131a9     3B 1C 03 E5 
131ad     CE C7 C2 C1 
131b1     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
131b5     B6 B9 C4 CD 
131b9     DB ED FD 00 
131bd     FF F4 F5 ED 
131c1     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
131c5     F5 F5 EB E7 
131c9     E9 E8 E9 E9 
131cd     E2 E3 E4 F4 
131d1     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
131d5     FD FD FF 09 
131d9     0F 0F 04 FF 
131dd     FF 01 08 11 
131e1     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
131e5     4C 40 27 0E 
131e9     F9 E0 CD C8 
131ed     C9 C6 C5 C5 
131f1     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
131f5     F7 09 15 28 
131f9     34 46 42 44 
131fd     33 25 17 FC 
13201     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
13205     BF BD C8 D7 
13209     E9 FE 0A 16 
1320d     1B 22 21 1F 
13211     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
13215     D9 DD D6 C8 
13219     C6 BC B3 AB 
1321d     B3 B4 C6 D5 
13221     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
13225     19 27 2A 29 
13229     1F 1A 10 07 
1322d     FA EB D4 C5 
13231     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
13235     E9 F9 0A 21 
13239     36 42 3F 42 
1323d     35 2A 17 0B 
13241     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
13245     BE BB B0 B7 
13249     B5 B4 B6 B6 
1324d     B6 C3 CB DA 
13251     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
13255     DC E6 E6 E8 
13259     ED F4 05 1B 
1325d     2B 3B 3E 4A 
13261     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
13265     31 2A 1C 10 
13269     07 02 06 09 
1326d     11 13 0E FF 
13271     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
13275     00 04 03 0D 
13279     0D 15 0E 05 
1327d     FB EB D8 C5 
13281     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
13285     9A A6 BA CF 
13289     DC F7 06 1B 
1328d     2D 38 36 36 
13291     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
13295     E7 E2 E5 E4 
13299     E5 E6 E6 EE 
1329d     FD 0F 21 2D 
132a1     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
132a5     1F 15 0D FD 
132a9     F0 E2 DE C0 
132ad     B0 A4 A2 A4 
132b1     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
132b5     E8 F4 02 0B 
132b9     0E 0E 0F 0D 
132bd     0F 0D 08 07 
132c1     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
132c5     C5 BC B9 BF 
132c9     CE D5 E2 E7 
132cd     EE FD 0A 14 
132d1     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
132d5     0A F8 F5 F7 
132d9     01 07 17 21 
132dd     2F 2A 2A 27 
132e1     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
132e5     F4 EF E8 DE 
132e9     E0 E0 EB E8 
132ed     E9 E6 E6 F0 
132f1     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
132f5     35 27 1F 16 
132f9     17 17 12 0E 
132fd     FD EF E2 CF 
13301     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
13305     F0 F4 03 07 
13309     11 12 14 12 
1330d     13 09 05 ED 
13311     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
13315     BC B9 BA B9 
13319     B6 B9 CA D6 
1331d     F3 FC 09 0E 
13321     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
13325     42 34 1F 03 
13329     E5 C7 B3 B1 
1332d     B4 BF D3 E5 
13331     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
13335     4A 43 42 3D 
13339     32 2C 1D 0B 
1333d     FB F8 F1 E7 
13341     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
13345     91 93 A0 A5 
13349     B3 B1 B9 C5 
1334d     DC E9 F6 FB 
13351     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
13355     F3 04 12 1F 
13359     29 28 2A 2D 
1335d     32 36 36 31 
13361     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
13365     28 29 28 28 
13369     1D 1C 0C FB 
1336d     E9 DD DF EF 
13371     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
13375     F4 EF F2 F5 
13379     FA F7 E5 D6 
1337d     BD AD A6 A9 
13381     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
13385     FD 13 24 39 
13389     37 35 2A 1A 
1338d     09 FB EF E3 
13391     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
13395     F0 ED E8 E9 
13399     EE 01 00 11 
1339d     15 0E 08 0A 
133a1     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
133a5     1E 01 E6 B9 
133a9     AA 9B 9A 9B 
133ad     9E B3 BF D8 
133b1     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
133b5     10 15 24 2E 
133b9     31 2B 22 19 
133bd     02 F8 E4 C9 
133c1     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
133c5     CD E4 EF EC 
133c9     E7 F3 00 11 
133cd     1D 1A 1C 12 
133d1     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
133d5     F2 06 0F 0D 
133d9     10 13 13 13 
133dd     0E 0A 06 05 
133e1     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
133e5     14 0F 0F 0E 
133e9     0E 0D 01 FD 
133ed     F8 FF FE FF 
133f1     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
133f5     F7 0B 1E 26 
133f9     21 11 FF E7 
133fd     DA DF DF E1 
13401     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
13405     16 1C 1A 1C 
13409     15 FF F7 EF 
1340d     E0 DB CC C8 
13411     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
13415     BF BE BE C6 
13419     CD E8 F5 02 
1341d     04 0A 19 2B 
13421     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
13425     FC E7 D7 D6 
13429     DD DF EA F2 
1342d     F8 0D 1B 2D 
13431     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
13435     23 21 21 11 
13439     0D 08 FE E7 
1343d     D7 C7 B5 A3 
13441     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
13445     B7 BD BD C4 
13449     CE DE F1 03 
1344d     11 13 14 02 
13451     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
13455     F5 FA 00 0E 
13459     1B 2D 31 42 
1345d     3F 41 43 44 
13461     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
13465     3E 2E 27 13 
13469     02 F2 EA E5 
1346d     E5 E8 E8 E0 
13471     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
13475     DE EC EF EE 
13479     EE D7 D0 CB 
1347d     CE D8 E7 F3 
13481     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
13485     20 16 0D 04 
13489     00 00 07 0E 
1348d     0E 15 14 0D 
13491     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
13495     DE DB DF E4 
13499     EA EC E7 E6 
1349d     EB F7 0B 12 
134a1     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
134a5     D1 C8 BC B9 
134a9     BA BD C9 D7 
134ad     EA F3 FD 03 
134b1     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
134b5     2F 23 1E 0B 
134b9     FF F2 E5 DE 
134bd     DD D8 D9 DB 
134c1     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
134c5     F0 EE E7 EE 
134c9     F8 05 0A 11 
134cd     17 FB F9 F4 
134d1     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
134d5     F3 F2 F3 F2 
134d9     F3 F6 FE 0C 
134dd     15 29 3E 40 
134e1     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
134e5     40 31 1F 05 
134e9     F1 D7 CC C4 
134ed     CB D4 D8 DD 
134f1     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
134f5     20 21 21 0A 
134f9     FE F4 F6 F9 
134fd     FB FB FE FE 
13501     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
13505     FF F8 F7 F5 
13509     F5 F0 EC ED 
1350d     E5 E8 E8 E8 
13511     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
13515     D4 D6 DE E4 
13519     E1 E3 DE DF 
1351d     E7 F6 03 16 
13521     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
13525     1D 20 1B 12 
13529     09 FE F9 F0 
1352d     F8 F5 F6 00 
13531     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
13535     16 0B 0A FF 
13539     F7 EA E1 D4 
1353d     C8 BA B5 AF 
13541     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
13545     CF D4 DE ED 
13549     F4 09 0A FF 
1354d     F4 E7 EA ED 
13551     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
13555     17 1C 2A 2D 
13559     3C 43 42 4E 
1355d     4B 50 59 58 
13561     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
13565     33 25 12 F3 
13569     DA C7 BF B9 
1356d     AF AF B0 AB 
13571     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
13575     F9 FB F7 F5 
13579     FF 03 11 18 
1357d     16 11 02 FE 
13581     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
13585     04 0D 1A 1E 
13589     2C 2F 2C 2C 
1358d     1F 11 04 FC 
13591     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
13595     C9 C9 C6 CD 
13599     D3 D2 D3 DE 
1359d     ED FF 08 0E 
135a1     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
135a5     FF 04 05 FB 
135a9     F1 EB E4 DF 
135ad     E3 E5 ED F2 
135b1     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
135b5     00 02 01 08 
135b9     09 0E 18 13 
135bd     12 07 FF F4 
135c1     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
135c5     D9 D8 E3 F3 
135c9     F8 01 F9 E9 
135cd     E4 E5 EA F5 
135d1     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
135d5     F2 F3 FF 12 
135d9     24 35 41 4F 
135dd     59 5D 5E 5E 
135e1     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
135e5     19 11 F8 E6 
135e9     D3 C8 BF C3 
135ed     C6 CD DC E8 
135f1     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
135f5     FE F9 F2 F5 
135f9     00 08 10 14 
135fd     0E 08 FA F6 
13601     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
13605     03 0B 0A 0D 
13609     0F 10 0D 03 
1360d     FF FE F4 F0 
13611     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
13615     AF AB B2 BE 
13619     CD D9 E6 FF 
1361d     14 30 32 37 
13621     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
13625     38 29 12 FE 
13629     E9 DC D2 CD 
1362d     CF D9 E7 EB 
13631     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
13635     FB FB F9 FB 
13639     FD FE FD F8 
1363d     E9 E5 DE DC 
13641     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
13645     D4 D4 DF EC 
13649     EF E9 E8 EA 
1364d     EC F7 00 0B 
13651     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
13655     21 31 36 35 
13659     40 44 49 4F 
1365d     54 5A 58 57 
13661     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
13665     12 01 E9 D2 
13669     C2 B1 AA AC 
1366d     B3 BA CA D1 
13671     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
13675     F2 F2 F3 F2 
13679     F7 00 03 08 
1367d     0E 0E 13 13 
13681     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
13685     1B 26 33 30 
13689     31 20 11 04 
1368d     F8 F4 EA E1 
13691     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
13695     A4 A1 AA B4 
13699     C6 D8 EF 06 
1369d     1D 22 25 25 
136a1     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
136a5     16 0B FE FA 
136a9     E5 DA D1 CD 
136ad     CF D7 E3 E7 
136b1     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
136b5     FF 06 05 10 
136b9     19 1E 1D 0D 
136bd     FF EE E6 E0 
136c1     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
136c5     E2 F0 F2 E2 
136c9     DB D5 D6 D1 
136cd     DD E2 F0 04 
136d1     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
136d5     31 2E 36 34 
136d9     35 3A 3B 40 
136dd     47 40 42 3D 
136e1     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
136e5     15 FC E3 D3 
136e9     BC B7 BC C7 
136ed     D7 E3 E1 E4 
136f1     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
136f5     F3 EB ED EE 
136f9     ED EC ED F8 
136fd     05 11 18 1E 
13701     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
13705     25 27 25 15 
13709     08 FC EF E3 
1370d     DE DC D5 CC 
13711     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
13715     C0 CE DC E6 
13719     F5 FA 0F 20 
1371d     1F 29 2D 21 
13721     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
13725     04 08 07 06 
13729     FF F9 F0 DC 
1372d     D4 CC CC D1 
13731     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
13735     06 0C 15 14 
13739     14 08 F8 E6 
1373d     D5 CD CA CE 
13741     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
13745     FA 04 01 FE 
13749     EE E1 D3 C7 
1374d     C5 D1 E5 00 
13751     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
13755     3B 3D 3F 47 
13759     4C 51 51 53 
1375d     50 3E 28 19 
13761     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
13765     FF F3 E8 DA 
13769     D8 DC E1 E7 
1376d     E8 E3 E6 E8 
13771     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
13775     DA D8 DD E7 
13779     FE 0E 25 2B 
1377d     29 28 1E 15 
13781     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
13785     14 0D 08 FC 
13789     FD F3 F5 F2 
1378d     ED E9 E2 C4 
13791     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
13795     B3 D5 EF 09 
13799     21 3C 40 3F 
1379d     35 1E FF E3 
137a1     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
137a5     F3 04 07 09 
137a9     10 12 10 12 
137ad     02 F8 E9 DF 
137b1     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
137b5     F0 FD 01 0B 
137b9     07 FD F5 E6 
137bd     E4 E8 EF F8 
137c1     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
137c5     ED E5 DF DF 
137c9     D4 D3 D8 DC 
137cd     ED 03 12 23 
137d1     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
137d5     2D 30 37 37 
137d9     3F 41 41 42 
137dd     43 3E 34 2B 
137e1     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
137e5     D7 C5 C1 C8 
137e9     D1 E3 F0 F7 
137ed     F6 00 06 05 
137f1     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
137f5     C2 B7 BF D3 
137f9     EE 0C 21 37 
137fd     46 4E 4B 48 
13801     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
13805     F3 EB E1 E3 
13809     DE DF E1 E6 
1380d     E6 E6 E8 DE 
13811     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
13815     DA E9 F5 03 
13819     14 15 17 0D 
1381d     F5 E4 CD CF 
13821     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
13825     1F 1B 11 08 
13829     00 01 FA F1 
1382d     F2 F3 F5 F7 
13831     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
13835     F0 F0 ED F0 
13839     F1 E9 DF DB 
1383d     E1 EA F8 09 
13841     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
13845     0D F9 D8 C1 
13849     A6 A4 AD C3 
1384d     E3 FC 0A 16 
13851     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
13855     52 56 5C 56 
13859     3D 2C 1B 09 
1385d     FB FE FD 07 
13861     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
13865     01 F4 EB EE 
13869     F3 02 06 0F 
1386d     0D 05 FC F3 
13871     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
13875     E0 F2 FE 12 
13879     13 10 12 0F 
1387d     10 13 18 0C 
13881     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
13885     EC EE EE F1 
13889     F6 FA E7 DD 
1388d     D5 C7 B9 B7 
13891     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
13895     23 36 42 33 
13899     24 09 FB E0 
1389d     CD C7 C4 D0 
138a1     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
138a5     1F 26 3A 3E 
138a9     3D 2B 15 FB 
138ad     E5 CF C2 BA 
138b1     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
138b5     D2 E2 EF FC 
138b9     FF FF 06 07 
138bd     05 02 03 08 
138c1     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
138c5     F9 F1 E8 E8 
138c9     E5 E6 EE F8 
138cd     05 0C 1B 22 
138d1     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
138d5     44 46 46 46 
138d9     3C 2E 1C 04 
138dd     F5 E9 DA D7 
138e1     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
138e5     D5 E1 F0 FE 
138e9     11 1F 30 31 
138ed     26 1E FF E9 
138f1     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
138f5     DB F2 08 21 
138f9     2C 2E 33 34 
138fd     2A 21 19 11 
13901     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
13905     EE E2 E0 DF 
13909     E1 EE F9 FE 
1390d     F8 EE E1 DC 
13911     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
13915     FF FA F2 E6 
13919     E6 D4 CD C9 
1391d     D4 E3 FA 0F 
13921     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
13925     13 18 21 1D 
13929     1C 1B 18 0D 
1392d     FF F3 DA C8 
13931     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
13935     E8 FA F9 F9 
13939     F9 F7 FC 07 
1393d     17 29 2D 29 
13941     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
13945     C3 BB B8 BA 
13949     CA D4 F0 FF 
1394d     0A 1E 30 42 
13951     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
13955     49 3B 28 17 
13959     00 F1 EA E2 
1395d     E5 EF F7 04 
13961     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
13965     0D 24 2B 31 
13969     38 34 1A 04 
1396d     F8 F0 EB ED 
13971     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
13975     F7 F7 F0 F0 
13979     ED EA EA EF 
1397d     F1 F3 F8 FA 
13981     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
13985     F7 E9 E2 E1 
13989     DF E4 E4 E5 
1398d     E5 F0 F6 00 
13991     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
13995     06 FA F3 E1 
13999     E0 E0 DF E0 
1399d     EB F1 00 0C 
139a1     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
139a5     3A 33 1F 0C 
139a9     FA EA D9 C6 
139ad     B4 A8 A1 A0 
139b1     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
139b5     02 14 13 13 
139b9     13 16 1B 1D 
139bd     20 1D 09 FC 
139c1     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
139c5     EA EC EE F9 
139c9     08 0F 1F 2C 
139cd     2E 3D 3B 3D 
139d1     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
139d5     3E 33 1B 01 
139d9     EC CC B9 AF 
139dd     B4 B2 B4 C5 
139e1     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
139e5     1F 3B 51 56 
139e9     3E 24 0F 02 
139ed     F9 F1 E8 E9 
139f1     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
139f5     01 07 03 08 
139f9     0C 10 17 17 
139fd     16 1B 18 16 
13a01     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
13a05     E2 E1 E4 F4 
13a09     F1 F2 F2 E8 
13a0d     E2 E3 E4 E4 
13a11     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
13a15     C3 CB CC DE 
13a19     F0 02 03 0A 
13a1d     11 10 12 14 
13a21     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
13a25     16 0E 0D 0B 
13a29     01 FC EE E9 
13a2d     D8 D3 C9 CE 
13a31     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
13a35     F6 F6 01 0C 
13a39     1A 28 2F 2A 
13a3d     11 F8 DF D3 
13a41     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
13a45     C9 DA E7 F9 
13a49     09 1B 32 47 
13a4d     47 4D 52 51 
13a51     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
13a55     0E FD E5 D9 
13a59     D5 CF D7 E2 
13a5d     EF FD 0A 17 
13a61     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
13a65     48 43 28 16 
13a69     01 F7 FA FB 
13a6d     FD FD F8 F1 
13a71     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
13a75     C2 C1 C3 D0 
13a79     DB F0 F9 03 
13a7d     16 24 1A 18 
13a81     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
13a85     EC E7 E8 E8 
13a89     E9 EE F0 F8 
13a8d     06 12 20 22 
13a91     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
13a95     E9 EC F3 FA 
13a99     F9 FA 01 FF 
13a9d     09 0F 18 18 
13aa1     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
13aa5     EC D8 CD C3 
13aa9     BB BA B9 BA 
13aad     BD C7 DE F5 
13ab1     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
13ab5     1C 1B 1D 1F 
13ab9     20 16 FE EF 
13abd     E6 E0 EB F9 
13ac1     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
13ac5     1B 1B 20 24 
13ac9     2A 2A 29 2A 
13acd     2C 2A 2D 2D 
13ad1     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
13ad5     DB C6 B0 A4 
13ad9     9C A3 B2 C3 
13add     E3 00 13 23 
13ae1     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
13ae5     4D 3C 29 19 
13ae9     11 0D 06 FD 
13aed     F8 F1 E8 E9 
13af1     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
13af5     06 07 0F 0F 
13af9     12 12 10 0F 
13afd     05 FD F4 EB 
13b01     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
13b05     DF E6 E8 E9 
13b09     DF D6 D1 D2 
13b0d     DD DB DD DF 
13b11     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
13b15     10 1A 25 28 
13b19     22 19 18 17 
13b1d     14 09 FE F4 
13b21     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
13b25     08 07 07 FF 
13b29     F8 EF E0 DB 
13b2d     DB DD E2 EB 
13b31     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
13b35     08 0A 11 03 
13b39     F6 E4 CD BB 
13b3d     BC C2 D1 E3 
13b41     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
13b45     21 2D 3F 46 
13b49     4B 4B 48 47 
13b4d     42 38 29 0E 
13b51     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
13b55     CF D5 DE EB 
13b59     F5 0A 21 36 
13b5d     3B 34 34 32 
13b61     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
13b65     07 FB FD FB 
13b69     00 FF FD EB 
13b6d     D7 C5 B2 B6 
13b71     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
13b75     E8 FA 0D 15 
13b79     28 24 27 24 
13b7d     1A 0D FF ED 
13b81     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
13b85     E4 F0 02 09 
13b89     0F 19 1D 12 
13b8d     0D 06 FD EF 
13b91     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
13b95     14 14 04 00 
13b99     FA FE 01 FA 
13b9d     F1 E1 CF CB 
13ba1     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
13ba5     D5 DA E1 E6 
13ba9     EB EA F7 FC 
13bad     02 0C 1E 2A 
13bb1     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
13bb5     08 F5 EE E9 
13bb9     E9 F3 FC 0C 
13bbd     20 2C 31 2D 
13bc1     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
13bc5     1B 1C 1F 1F 
13bc9     17 16 0E 0D 
13bcd     05 FC EE D8 
13bd1     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
13bd5     AD B3 C2 E2 
13bd9     08 28 39 40 
13bdd     45 50 4F 3F 
13be1     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
13be5     14 0C 0D 0F 
13be9     0D 05 FF F8 
13bed     F1 FC 02 08 
13bf1     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
13bf5     01 06 07 06 
13bf9     06 FF F9 EF 
13bfd     E2 D6 CD C3 
13c01     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
13c05     CD D4 D4 D9 
13c09     D9 D7 DE E7 
13c0d     EF FD 09 20 
13c11     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
13c15     33 1F 0C 05 
13c19     00 FA EB E8 
13c1d     EA ED F8 03 
13c21     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
13c25     01 F9 EA E5 
13c29     E0 DF DA DD 
13c2d     EF FD 07 0B 
13c31     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
13c35     C8 BF C2 C3 
13c39     CD DC F3 08 
13c3d     1F 2E 27 28 
13c41     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
13c45     3F 3A 30 1C 
13c49     10 07 FF 00 
13c4d     F5 F5 F2 F2 
13c51     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
13c55     09 10 1E 2C 
13c59     2E 35 31 29 
13c5d     1D 0A 0B 0B 
13c61     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
13c65     00 F8 F1 E8 
13c69     D4 C3 B7 B9 
13c6d     BE D4 E0 EF 
13c71     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
13c75     26 2F 2D 2A 
13c79     1A 0C FA EE 
13c7d     E1 D5 C9 CE 
13c81     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
13c85     1F 22 0F FB 
13c89     F0 ED F1 FC 
13c8d     00 06 12 20 
13c91     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
13c95     FE F3 E7 D1 
13c99     C2 BA B2 AE 
13c9d     AF BA CA E1 
13ca1     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
13ca5     0A 0F 14 0D 
13ca9     06 06 05 06 
13cad     11 10 10 0E 
13cb1     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
13cb5     04 17 28 39 
13cb9     3B 40 47 43 
13cbd     37 23 17 08 
13cc1     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
13cc5     FD F0 E7 DE 
13cc9     D5 CD C8 C7 
13ccd     C0 C3 C5 C7 
13cd1     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
13cd5     0D 1E 38 46 
13cd9     51 51 38 26 
13cdd     1D 17 1E 22 
13ce1     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
13ce5     28 2D 29 1D 
13ce9     14 06 FF FF 
13ced     FD F8 F7 F5 
13cf1     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
13cf5     02 01 01 FA 
13cf9     F0 E3 DA BD 
13cfd     AD A6 A7 A9 
13d01     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
13d05     DF D5 C8 D6 
13d09     EF 0E 27 3B 
13d0d     43 4E 51 4E 
13d11     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
13d15     FD EF EC E7 
13d19     E8 E9 EA F2 
13d1d     F8 01 06 0C 
13d21     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
13d25     FD EE EB E2 
13d29     E3 E5 EA F3 
13d2d     F3 E7 D3 B3 
13d31     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
13d35     F8 11 24 3B 
13d39     3C 43 49 47 
13d3d     42 32 2B 19 
13d41     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
13d45     F9 EA E5 E6 
13d49     EB F7 04 10 
13d4d     19 23 28 22 
13d51     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
13d55     1A 1D 25 1F 
13d59     14 FC ED EE 
13d5d     F8 03 0D 0A 
13d61     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
13d65     F0 E9 DF D6 
13d69     D8 DB D9 E1 
13d6d     EA F5 00 01 
13d71     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
13d75     19 18 1B 1A 
13d79     17 06 FA F3 
13d7d     EB EE F6 00 
13d81     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
13d85     D4 D3 DE F2 
13d89     08 1D 2D 38 
13d8d     3C 3E 3B 2B 
13d91     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
13d95     AB A6 A2 A4 
13d99     AC B1 BF D3 
13d9d     DE EC FA 06 
13da1     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
13da5     11 07 01 FA 
13da9     FA 04 0A 11 
13dad     0E FA F1 F5 
13db1     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
13db5     4E 52 51 54 
13db9     4D 3F 31 16 
13dbd     06 F8 EE E3 
13dc1     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
13dc5     AC 9F A0 A3 
13dc9     B5 C9 E3 FC 
13dcd     10 21 1D 20 
13dd1     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
13dd5     22 29 25 0B 
13dd9     00 02 05 20 
13ddd     36 45 53 53 
13de1     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
13de5     2D 16 FD EC 
13de9     E3 DF DF DF 
13ded     E0 DF DF DF 
13df1     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
13df5     FC F6 F5 E5 
13df9     D3 C2 BA B7 
13dfd     B6 C1 D1 E4 
13e01     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
13e05     D1 EA 08 22 
13e09     37 48 54 5E 
13e0d     61 61 55 48 
13e11     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
13e15     EB EC E2 D9 
13e19     D3 D2 D2 D9 
13e1d     E0 F0 FC 05 
13e21     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
13e25     FC EE E0 CC 
13e29     C5 C9 C4 B3 
13e2d     AF B0 C1 E3 
13e31     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
13e35     55 5A 57 54 
13e39     44 36 20 0E 
13e3d     FE F8 FB FE 
13e41     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
13e45     F1 F0 F7 03 
13e49     0B 16 23 28 
13e4d     2D 2E 2C 27 
13e51     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
13e55     01 F2 E6 DD 
13e59     DA E1 EA F9 
13e5d     03 08 0F 15 
13e61     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
13e65     0A F7 E6 D5 
13e69     CE D3 D4 DC 
13e6d     DD E2 EB F8 
13e71     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
13e75     3A 3E 38 31 
13e79     22 10 FD EA 
13e7d     DC D8 DC DB 
13e81     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
13e85     ED 05 1B 32 
13e89     41 3D 44 38 
13e8d     2A 1D 01 E3 
13e91     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
13e95     C1 CF CC CC 
13e99     CB CB CA D5 
13e9d     E4 F7 09 1B 
13ea1     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
13ea5     1A 0D 09 09 
13ea9     0A 0A FF F9 
13ead     F4 F6 01 16 
13eb1     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
13eb5     54 4D 41 32 
13eb9     1F 04 F1 DB 
13ebd     D1 C8 C4 C5 
13ec1     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
13ec5     B6 CB E5 08 
13ec9     19 29 32 2D 
13ecd     2D 22 14 06 
13ed1     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
13ed5     00 00 FF 02 
13ed9     13 30 46 5C 
13edd     6C 6B 65 5A 
13ee1     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
13ee5     F8 E1 D5 D1 
13ee9     CA CE CB CB 
13eed     CA CC D1 D2 
13ef1     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
13ef5     ED EA E8 E6 
13ef9     E4 E4 E3 D9 
13efd     DC DD D1 C3 
13f01     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
13f05     12 35 53 62 
13f09     6B 66 66 69 
13f0d     68 56 3D 1C 
13f11     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
13f15     BE B9 B8 B8 
13f19     BF C6 D5 DF 
13f1d     F2 03 0B 0A 
13f21     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
13f25     E2 DB D6 D1 
13f29     CA CA CB D8 
13f2d     EC FA 0D 25 
13f31     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
13f35     34 35 34 2F 
13f39     26 17 03 FC 
13f3d     FD FF 0B 0A 
13f41     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
13f45     FD FF 01 0B 
13f49     11 12 17 17 
13f4d     12 07 FA F0 
13f51     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
13f55     CC C3 C5 CA 
13f59     DA F3 0C 20 
13f5d     35 3D 42 3E 
13f61     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
13f65     E4 D5 CC CF 
13f69     DA E2 EA EE 
13f6d     F4 F6 02 10 
13f71     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
13f75     21 0E FC E9 
13f79     D7 D3 D2 D7 
13f7d     DE DC D9 CE 
13f81     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
13f85     10 30 34 38 
13f89     36 35 32 30 
13f8d     1E 03 EE DF 
13f91     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
13f95     B5 AE AC AC 
13f99     BC D0 EA 09 
13f9d     17 23 26 20 
13fa1     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
13fa5     30 36 36 24 
13fa9     10 FA E9 D9 
13fad     D8 E5 F5 09 
13fb1     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
13fb5     0E 0F 0D 00 
13fb9     F0 DF D7 D6 
13fbd     DC DC DB DB 
13fc1     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
13fc5     00 08 0E 0E 
13fc9     04 FF FF FD 
13fcd     FE 01 0C 1A 
13fd1     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
13fd5     02 FD 03 13 
13fd9     25 36 46 48 
13fdd     46 36 29 26 
13fe1     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
13fe5     E9 DC D2 D3 
13fe9     CE CF CA CA 
13fed     CC D8 E1 F0 
13ff1     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
13ff5     CD C5 B6 B9 
13ff9     BE CF E5 E7 
13ffd     E9 EC F1 F1 
14001     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
14005     3D 4B 57 55 
14009     5A 63 62 52 
1400d     39 1D FF E3 
14011     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
14015     AA A8 AB B2 
14019     CA D5 E7 F5 
1401d     F0 EB E4 E8 
14021     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
14025     23 26 23 16 
14029     FA E4 D4 CD 
1402d     D4 DF EC FF 
14031     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
14035     30 32 27 1A 
14039     11 0D 0E 15 
1403d     12 14 12 08 
14041     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
14045     06 05 F3 E7 
14049     DD D2 CE C9 
1404d     CC E0 F1 FC 
14051     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
14055     ED E8 E9 F1 
14059     00 09 0C 0A 
1405d     05 07 12 1C 
14061     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
14065     20 20 1F 17 
14069     0E 03 FD FB 
1406d     FE 00 00 29 
14071     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
14075     37 2A 25 2A 
14079     25 18 0F 00 
1407d     EA EF F1 E2 
14081     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
14085     EA FE 1A 13 
14089     00 05 16 29 
1408d     49 46 2E 31 
14091     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
14095     3D 2E 31 2E 
14099     25 1A 05 E8 
1409d     E2 E6 DF EF 
140a1     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
140a5     EA 00 1A 08 
140a9     00 07 1A 37 
140ad     4F 38 2E 37 
140b1     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
140b5     35 2A 31 29 
140b9     1D 16 00 E3 
140bd     E3 E3 E2 F2 
140c1     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
140c5     EF 0E 13 01 
140c9     00 0E 1E 3F 
140cd     46 35 2E 38 
140d1     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
140d5     2A 29 2A 21 
140d9     18 0F F1 E2 
140dd     E3 E3 EA F1 
140e1     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
140e5     FE 16 0F 00 
140e9     01 11 29 45 
140ed     3D 2E 35 3C 
140f1     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
140f5     25 2A 25 21 
140f9     13 00 ED E3 
140fd     E3 E2 EF EA 
14101     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
14105     00 11 05 00 
14109     02 16 31 46 
1410d     38 31 37 44 
14111     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
14115     25 2A 24 18 
14119     0F 00 E8 E2 
1411d     E3 E3 F1 E3 
14121     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
14125     08 08 00 00 
14129     08 1E 3C 46 
1412d     37 37 3C 46 
14131     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
14135     25 29 21 13 
14139     05 F1 E8 E2 
1413d     E3 EA EA D6 
14141     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
14145     08 05 00 00 
14149     11 29 44 3D 
1414d     37 3C 44 4D 
14151     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
14155     29 25 1A 0F 
14159     00 F1 E3 DF 
1415d     E2 EF E2 CF 
14161     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
14165     05 01 00 02 
14169     1A 31 44 3C 
1416d     38 3D 49 4F 
14171     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
14175     2A 21 18 0F 
14179     FB EF E2 DF 
1417d     E3 EA D6 C8 
14181     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
14185     01 00 00 0E 
14189     1E 3C 3F 3C 
1418d     3D 44 4F 54 
14191     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
14195     2A 21 13 05 
14199     F8 ED DF DF 
1419d     E8 E3 CF C8 
141a1     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
141a5     00 00 01 13 
141a9     2E 3F 3D 3D 
141ad     3F 49 54 54 
141b1     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
141b5     25 1D 0F 00 
141b9     F2 E8 DC DF 
141bd     E8 D7 C8 C9 
141c1     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
141c5     00 00 07 1D 
141c9     31 3F 3D 3F 
141cd     45 4F 54 54 
141d1     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
141d5     24 18 05 FB 
141d9     F2 DF DB E3 
141dd     E3 CB C4 CB 
141e1     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
141e5     00 00 0E 24 
141e9     3C 3D 3F 45 
141ed     49 54 58 4F 
141f1     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
141f5     21 11 01 FB 
141f9     F1 DB DC E6 
141fd     DF C4 C4 CF 
14201     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
14205     00 02 16 2E 
14209     3C 3D 44 46 
1420d     4F 58 5A 4F 
14211     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
14215     1D 08 00 F9 
14219     E8 DB DC E3 
1421d     D2 C1 C8 D2 
14221     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
14225     00 07 1E 31 
14229     3C 3F 46 4D 
1422d     54 5A 5A 4D 
14231     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
14235     18 05 FF F8 
14239     E2 D7 E2 DF 
1423d     C8 C1 C9 DB 
14241     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
14245     01 11 29 38 
14249     3C 44 49 4F 
1424d     58 5C 54 49 
14251     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
14255     0F 00 FE F1 
14259     DF D7 E3 D6 
1425d     BC C1 D2 DC 
14261     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
14265     05 18 2E 38 
14269     3D 46 4D 54 
1426d     5C 5C 54 46 
14271     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
14275     07 00 FE EA 
14279     D7 DC DF CB 
1427d     BA C8 D2 E3 
14281     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
14285     0E 1E 31 38 
14289     3F 49 4F 58 
1428d     5E 5A 4F 46 
14291     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
14295     01 00 F9 E3 
14299     D6 DC DB C3 
1429d     B7 C9 DB E6 
142a1     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
142a5     11 29 35 3C 
142a9     45 4F 54 5C 
142ad     5E 5A 4D 38 
142b1     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
142b5     00 00 F1 DF 
142b9     D6 DF D2 BA 
142bd     BC D2 DC E6 
142c1     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
142c5     1A 2E 37 3C 
142c9     49 4F 58 5E 
142cd     5E 54 46 35 
142d1     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
142d5     00 FF ED D7 
142d9     D7 DB C8 B7 
142dd     C4 D7 DF E6 
142e1     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
142e5     1E 2E 37 3F 
142e9     4D 54 5C 60 
142ed     5E 54 46 2E 
142f1     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
142f5     00 FB E8 D6 
142f9     DC D6 BC B7 
142fd     CF DB DF EA 
14301     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
14305     29 31 38 45 
14309     4F 58 5E 64 
1430d     5C 4F 3D 2E 
14311     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
14315     00 F2 DF D6 
14319     DB CB BA BB 
1431d     D2 DB E2 EF 
14321     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
14325     2E 31 3C 49 
14329     54 5C 64 64 
1432d     5A 4D 35 2E 
14331     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
14335     00 F1 DB D7 
14339     D7 C3 B3 C4 
1433d     D6 DB E6 F9 
14341     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
14345     2E 35 3F 4F 
14349     58 5E 65 5E 
1434d     54 46 35 2E 
14351     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
14355     FB E8 D6 D7 
14359     D2 BB B7 C9 
1435d     D6 DC EA FE 
14361     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
14365     2E 37 45 54 
14369     5C 64 65 5E 
1436d     4F 3D 2E 2A 
14371     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
14375     F8 E3 D6 D6 
14379     CB BA BB D2 
1437d     D7 DC EF 00 
14381     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
14385     2E 3C 4D 58 
14389     5E 65 64 5A 
1438d     4D 37 2E 25 
14391     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
14395     F1 DF D6 D2 
14399     C3 B3 C4 D2 
1439d     D7 E6 F9 00 
143a1     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
143a5     31 3F 4F 5A 
143a9     64 65 64 5A 
143ad     46 35 2A 21 
143b1     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
143b5     EA D7 D2 CB 
143b9     BA B7 C9 D2 
143bd     DB EA FE 02 
143c1     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
143c5     37 45 54 5E 
143c9     65 66 5E 54 
143cd     3D 2E 2A 18 
143d1     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
143d5     E6 D6 D2 C8 
143d9     BA BC C9 D2 
143dd     DC EF 00 07 
143e1     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
143e5     3C 4D 58 60 
143e9     66 65 5C 4D 
143ed     37 2E 24 11 
143f1     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
143f5     DF D2 CF BC 
143f9     B3 C1 CB D6 
143fd     E6 F9 01 0E 
14401     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
14405     3F 54 5C 65 
14409     66 64 5A 46 
1440d     35 2A 21 08 
14411     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
14415     DF D2 CB BA 
14419     B7 C4 CF DB 
1441d     EA FF 07 11 
14421     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
14425     45 58 60 66 
14429     66 60 54 46 
1442d     2E 25 18 05 
14431     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
14435     D7 CF C4 B3 
14439     BB 00 00 F9 
1443d     FC FC FD FF 
14441     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
14445     04 07 09 0A 
14449     0D 0D 0E 13 
1444d     13 13 10 0E 
14451     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
14455     21 20 1E 16 
14459     0E 07 07 03 
1445d     03 03 FD EA 
14461     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
14465     B1 B1 B3 AD 
14469     A7 A9 A6 A9 
1446d     A2 9D 9D 9A 
14471     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
14475     A0 A9 B1 AD 
14479     AF B1 B5 CC 
1447d     E0 F2 F6 F6 
14481     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
14485     CC CF DA E6 
14489     EC F0 FC EC 
1448d     EA DA CA C0 
14491     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
14495     E0 F3 04 09 
14499     21 2A 37 34 
1449d     2C 20 18 16 
144a1     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
144a5     01 09 16 26 
144a9     37 3B 3D 2D 
144ad     18 01 FF 00 
144b1     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
144b5     09 00 FC F7 
144b9     F9 FF 07 10 
144bd     24 2D 3A 44 
144c1     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
144c5     27 14 FF F2 
144c9     F6 01 14 1D 
144cd     21 21 20 20 
144d1     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
144d5     04 ED DC D3 
144d9     C5 CC D3 D9 
144dd     E2 EA F3 EC 
144e1     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
144e5     E0 E2 E8 F2 
144e9     F3 FD F9 EA 
144ed     DF D0 D4 CA 
144f1     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
144f5     D6 DA DC CA 
144f9     C3 BF C6 DA 
144fd     F0 04 0D 10 
14501     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
14505     36 3B 3D 3A 
14509     34 20 13 FC 
1450d     F7 E6 D6 D6 
14511     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
14515     FF 03 00 F6 
14519     E6 DC D3 CA 
1451d     D3 DA E2 EC 
14521     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
14525     D4 E0 E6 EC 
14529     EC DA BC AC 
1452d     92 84 86 89 
14531     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
14535     B9 BC C6 CC 
14539     D9 E6 EC F3 
1453d     F9 00 04 04 
14541     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
14545     F9 F9 F9 03 
14549     0A 1D 2D 30 
1454d     30 2C 24 2C 
14551     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
14555     30 1E 0D 13 
14559     13 1E 2D 30 
1455d     36 27 20 07 
14561     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
14565     80 80 83 94 
14569     9D A6 A0 A6 
1456d     A9 AC AD AD 
14571     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
14575     A2 A3 A3 96 
14579     96 98 9C B1 
1457d     BD C3 C0 C0 
14581     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
14585     F0 01 10 16 
14589     16 18 0E FC 
1458d     ED DA D6 DA 
14591     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
14595     F2 F3 EC ED 
14599     E3 E6 E6 E6 
1459d     F0 03 0E 27 
145a1     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
145a5     53 59 57 51 
145a9     2C 0D ED DC 
145ad     CF CF D4 DF 
145b1     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
145b5     FF 00 01 01 
145b9     04 10 20 40 
145bd     54 66 74 77 
145c1     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
145c5     4B 37 1E 0D 
145c9     FF F9 00 F6 
145cd     EA E0 E0 E6 
145d1     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
145d5     F0 F6 FC 10 
145d9     26 2D 3A 37 
145dd     26 18 07 EC 
145e1     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
145e5     B1 BC CC C9 
145e9     C9 C9 C6 C6 
145ed     C9 C6 C0 C5 
145f1     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
145f5     0D 0E 09 04 
145f9     01 01 01 04 
145fd     04 F7 F6 F2 
14601     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
14605     0A 10 0D 0D 
14609     03 00 FD F9 
1460d     F3 FF 0A 14 
14611     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
14615     27 20 18 04 
14619     E0 BC A0 96 
1461d     90 A6 B3 CA 
14621     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
14625     E3 ED ED E2 
14629     D6 CA C3 C0 
1462d     C5 D0 D6 DC 
14631     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
14635     B1 A6 9A 92 
14639     A2 B3 CF E6 
1463d     F3 04 0E 14 
14641     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
14645     1A 1A 1D 24 
14649     26 24 20 1A 
1464d     0A FD FD F6 
14651     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
14655     03 10 2D 43 
14659     5A 63 60 63 
1465d     5A 53 4D 2D 
14661     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
14665     A6 9A 92 83 
14669     80 80 80 80 
1466d     80 80 80 80 
14671     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
14675     B1 C5 C6 CA 
14679     D6 DF EA E2 
1467d     E3 E0 DA DF 
14681     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
14685     E6 D3 C5 BF 
14689     B3 B1 AC B1 
1468d     BD CA E3 F2 
14691     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
14695     37 3A 37 24 
14699     14 04 FC FC 
1469d     01 0D 1A 20 
146a1     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
146a5     10 00 ED DF 
146a9     DF DF F0 FD 
146ad     18 27 40 36 
146b1     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
146b5     1D 10 0E 0E 
146b9     09 0D 18 10 
146bd     16 21 2C 34 
146c1     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
146c5     49 4B 44 41 
146c9     41 37 3A 2D 
146cd     26 1A 0A 00 
146d1     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
146d5     F0 F6 FD 04 
146d9     13 04 FF FC 
146dd     F6 ED E8 E8 
146e1     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
146e5     FC F2 EC E2 
146e9     DA D3 CF C0 
146ed     BD A6 9D 94 
146f1     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
146f5     CF E2 F2 FD 
146f9     10 1A 18 20 
146fd     2A 31 41 40 
14701     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
14705     27 0D 04 FC 
14709     F6 ED EA E0 
1470d     DF E6 E8 EA 
14711     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
14715     0D 0E 10 0E 
14719     04 F3 ED DA 
1471d     D9 E0 D9 E6 
14721     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
14725     BD A0 86 80 
14729     80 80 92 B5 
1472d     CC D4 E0 E2 
14731     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
14735     04 04 07 04 
14739     04 FD F9 FC 
1473d     FD 01 04 09 
14741     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
14745     DF E2 EC F3 
14749     01 0A 0E 10 
1474d     21 2A 2A 2A 
14751     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
14755     37 41 49 41 
14759     31 16 03 F6 
1475d     EA E2 E6 EA 
14761     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
14765     B9 B5 B5 BC 
14769     BF BC B5 AC 
1476d     9C 86 80 80 
14771     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
14775     B5 B1 B1 BD 
14779     BC C3 BF C0 
1477d     C3 C6 D4 DA 
14781     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
14785     E2 DF DC E0 
14789     E2 E3 E8 F0 
1478d     F2 F9 ED E8 
14791     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
14795     DA E0 E3 ED 
14799     F0 F9 09 16 
1479d     2A 3D 3B 41 
147a1     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
147a5     14 0E 09 07 
147a9     13 1D 13 18 
147ad     10 01 01 03 
147b1     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
147b5     16 24 2D 37 
147b9     3B 3D 3D 41 
147bd     43 47 47 4B 
147c1     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
147c5     31 16 03 F0 
147c9     E0 DC E3 F7 
147cd     04 13 21 2D 
147d1     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
147d5     3A 30 1D 03 
147d9     F2 EC E0 E6 
147dd     E6 F0 F6 F6 
147e1     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
147e5     D0 CF C9 CC 
147e9     CC C9 C9 C6 
147ed     C0 C3 B9 C0 
147f1     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
147f5     E3 F0 FF 01 
147f9     0D 10 0D 07 
147fd     00 F9 F6 FC 
14801     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
14805     20 2D 40 41 
14809     41 40 34 2C 
1480d     1D 14 10 0D 
14811     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
14815     1A 10 00 F9 
14819     ED E6 E2 D4 
1481d     CA BF B5 B7 
14821     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
14825     CC CC C9 C9 
14829     C0 C3 BD B9 
1482d     BC BF CF D3 
14831     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
14835     E0 EC F0 F9 
14839     03 0D 14 1D 
1483d     26 2A 1D 1A 
14841     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
14845     FC FF 09 16 
14849     1E 1D 1D 1D 
1484d     20 2C 30 31 
14851     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
14855     0E FF FC F6 
14859     F2 F9 F9 FF 
1485d     01 09 0A 01 
14861     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
14865     9C 8F 89 86 
14869     80 80 80 80 
1486d     84 96 9C AF 
14871     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
14875     CF CF D0 D6 
14879     E8 EC F0 F2 
1487d     F0 F2 DF C6 
14881     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
14885     DA E2 EA EA 
14889     ED F2 F2 F2 
1488d     F2 EA EC EC 
14891     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
14895     E2 DF DA D9 
14899     DF E0 E6 E8 
1489d     F3 F6 01 01 
148a1     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
148a5     47 4B 47 3A 
148a9     2D 18 09 09 
148ad     0A 18 26 36 
148b1     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
148b5     4D 49 43 37 
148b9     3B 3A 37 37 
148bd     36 34 27 2A 
148c1     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
148c5     16 07 FF F6 
148c9     F3 F7 FD 07 
148cd     1A 30 36 31 
148d1     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
148d5     D9 D0 D4 DF 
148d9     ED FF 04 10 
148dd     0E 13 13 00 
148e1     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
148e5     F6 F6 F7 F7 
148e9     EA E0 D3 C6 
148ed     C0 BD C0 C6 
148f1     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
148f5     E0 F2 FF 03 
148f9     0A 0A 0D FF 
148fd     FD E6 D9 DF 
14901     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
14905     2C 36 36 31 
14909     31 20 1E 18 
1490d     1A 1E 2A 27 
14911     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
14915     03 F9 F7 F9 
14919     F7 01 09 1A 
1491d     2A 10 01 F2 
14921     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
14925     E6 D6 CF B5 
14929     A7 A6 A2 A7 
1492d     B5 C3 C9 D4 
14931     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
14935     E0 E2 E6 ED 
14939     F9 FF 09 09 
1493d     0A 0A 01 FF 
14941     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
14945     14 20 18 1D 
14949     13 1E 2D 3B 
1494d     51 59 57 47 
14951     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
14955     F2 F0 ED FF 
14959     01 0E 14 1E 
1495d     1A 14 01 E8 
14961     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
14965     80 80 80 80 
14969     80 80 80 80 
1496d     80          | 	byte	$80[9]
1496e     8C 92 A2 AC 
14972     B3 B5 BC C6 
14976     CF E3 E8 F2 
1497a     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
1497e     AC B3 C5 D9 
14982     F2 0A 1A 24 
14986     2C 2C 1D 14 
1498a     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
1498e     E8 E2 E0 E0 
14992     D6 D4 C6 C5 
14996     BD B1 B9 BC 
1499a     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
1499e     F0 FF 03 18 
149a2     27 30 37 3B 
149a6     2C 21 1A 18 
149aa     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
149ae     3D 43 44 3D 
149b2     30 2D 2D 31 
149b6     3A 40 4B 51 
149ba     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
149be     44 41 41 40 
149c2     41 49 4B 44 
149c6     31 1D 0E 09 
149ca     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
149ce     FC F3 D9 C5 
149d2     BD AD AF B1 
149d6     C3 D6 ED 01 
149da     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
149de     1D 14 0E 07 
149e2     00 F9 F6 F0 
149e6     E3 D6 CC C6 
149ea     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
149ee     EC F9 FF FC 
149f2     F3 F3 FC 00 
149f6     07 07 09 09 
149fa     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
149fe     E8 F3 F9 03 
14a02     0E 14 1D 1D 
14a06     18 18 18 0E 
14a0a     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
14a0e     07 09 0E 10 
14a12     10 07 FC FC 
14a16     F7 FD 0D 18 
14a1a     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
14a1e     2A 37 41 47 
14a22     37 2C 0E F2 
14a26     E3 D3 CC D0 
14a2a     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
14a2e     F2 EA E3 E6 
14a32     E3 E3 E3 DA 
14a36     DC CA CA CC 
14a3a     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
14a3e     D9 DC E2 F0 
14a42     04 16 27 2C 
14a46     2D 31 43 47 
14a4a     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
14a4e     0E FF E6 D9 
14a52     D3 DA EC FF 
14a56     21 36 49 4F 
14a5a     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
14a5e     1A 0D F3 D6 
14a62     B7 A7 98 98 
14a66     98 92 86 89 
14a6a     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
14a6e     80 80 80 80 
14a72     8C 9C AC B9 
14a76     BF C5 C5 C5 
14a7a     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
14a7e     EA F7 00 0E 
14a82     0E 0E 00 F6 
14a86     EA E8 E8 EA 
14a8a     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
14a8e     F9 FC ED E2 
14a92     D3 CC C9 D0 
14a96     DC F0 F3 F6 
14a9a     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
14a9e     1D 1E 1D 14 
14aa2     03 FC F2 F6 
14aa6     F6 F9 01 0A 
14aaa     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
14aae     3D 40 43 47 
14ab2     4B 51 4D 4B 
14ab6     43 37 36 2A 
14aba     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
14abe     36 4B 63 7F 
14ac2     7F 7F 7F 6A 
14ac6     4F 37 20 16 
14aca     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
14ace     D4 D0 D0 D3 
14ad2     DA E3 EC F6 
14ad6     FC F7 ED E8 
14ada     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
14ade     EA EC EC E8 
14ae2     ED F3 F2 F6 
14ae6     F3 EC E3 E3 
14aea     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
14aee     CA C0 BD CA 
14af2     E0 F7 0D 1A 
14af6     18 18 18 14 
14afa     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
14afe     16 26 34 34 
14b02     31 2D 26 1E 
14b06     20 10 07 FC 
14b0a     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
14b0e     CC CF CC CF 
14b12     D4 E0 F6 04 
14b16     13 20 2D 34 
14b1a     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
14b1e     6C 6A 51 3D 
14b22     34 18 04 F0 
14b26     DF D0 D6 E3 
14b2a     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
14b2e     00 F3 F0 EC 
14b32     E8 EA E8 EA 
14b36     EA ED F0 F0 
14b3a     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
14b3e     F2 F3 F6 F3 
14b42     F2 F2 E8 EC 
14b46     ED F7 FF 01 
14b4a     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
14b4e     FD 04 0A 1A 
14b52     24 30 3B 37 
14b56     31 21 14 07 
14b5a     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
14b5e     1A 24 27 18 
14b62     03 E0 C0 9A 
14b66     84 80 80 80 
14b6a     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
14b6e     89 94 A0 B1 
14b72     BD BC AD A6 
14b76     9C 96 9A A0 
14b7a     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
14b7e     EC FC FF 04 
14b82     09 03 FC F2 
14b86     EA E3 DF D4 
14b8a     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
14b8e     B1 AD B1 BD 
14b92     D0 E6 F9 07 
14b96     1A 20 14 16 
14b9a     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
14b9e     24 20 1D 1A 
14ba2     1E 20 1D 1A 
14ba6     1A 16 1A 14 
14baa     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
14bae     FF 03 04 10 
14bb2     1A 20 30 3B 
14bb6     44 51 5E 63 
14bba     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
14bbe     60 5E 5A 49 
14bc2     41 2D 27 2D 
14bc6     36 2D 1E 13 
14bca     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
14bce     00 F9 00 FF 
14bd2     00 04 04 0A 
14bd6     0A 0A 04 04 
14bda     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
14bde     E3 DC D6 D3 
14be2     D3 C5 BF B1 
14be6     B3 B5 B3 B9 
14bea     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
14bee     E6 F9 04 04 
14bf2     04 00 00 F7 
14bf6     F2 F6 FC FD 
14bfa     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
14bfe     4F 57 54 4B 
14c02     2C 14 03 F6 
14c06     EC E8 E2 E2 
14c0a     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
14c0e     00 FF FC F3 
14c12     F6 F7 F9 FC 
14c16     00 FF 04 16 
14c1a     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
14c1e     40 4B 4F 53 
14c22     5E 5A 54 51 
14c26     4D 34 20 09 
14c2a     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
14c2e     BD BF CA E0 
14c32     ED 00 0E 13 
14c36     14 16 10 09 
14c3a     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
14c3e     01 01 FF F0 
14c42     EC EC F7 E6 
14c46     E2 DC D4 D0 
14c4a     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
14c4e     F9 F9 FF 07 
14c52     16 1E 2C 34 
14c56     34 30 36 30 
14c5a     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
14c5e     09 FD F3 F0 
14c62     E2 CA AC 98 
14c66     84 86 8C 9D 
14c6a     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
14c6e     AD AC B1 B3 
14c72     B7 BC BC C0 
14c76     CC D9 D9 E6 
14c7a     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
14c7e     D9 CC BF AF 
14c82     A6 9D 9C 9A 
14c86     9C A6 AC B9 
14c8a     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
14c8e     EA DF D9 D6 
14c92     DA DC DA DA 
14c96     DC ED 01 07 
14c9a     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
14c9e     4B 51 43 3D 
14ca2     2C 27 1D 10 
14ca6     14 14 16 1A 
14caa     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
14cae     27 27 27 27 
14cb2     24 24 24 2A 
14cb6     31 36 36 36 
14cba     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
14cbe     44 3D 3D 40 
14cc2     47 47 47 47 
14cc6     41 3D 36 26 
14cca     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
14cce     F7 F7 FF 0D 
14cd2     20 27 2C 26 
14cd6     16 14 0E 03 
14cda     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
14cde     F2 F2 F0 E8 
14ce2     E2 CF B7 AD 
14ce6     A6 A3 9A 98 
14cea     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
14cee     CA DF F0 F9 
14cf2     01 0E 14 24 
14cf6     2D 34 34 31 
14cfa     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
14cfe     FF EC E6 DF 
14d02     E2 E3 E3 E8 
14d06     EA FC 0A 18 
14d0a     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
14d0e     00 FF FD 04 
14d12     07 0A 14 1A 
14d16     2A 37 3B 41 
14d1a     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
14d1e     34 36 2C 2D 
14d22     21 1E 18 1A 
14d26     1E 26 26 21 
14d2a     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
14d2e     F2 E8 E6 E6 
14d32     E8 E8 F0 FF 
14d36     03 03 FF F9 
14d3a     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
14d3e     F0 E8 E6 E0 
14d42     E0 E6 E8 EA 
14d46     F0 F9 03 13 
14d4a     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
14d4e     10 0D 0D 0D 
14d52     04 00 FD FF 
14d56     FC FF 01 07 
14d5a     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
14d5e     1A 18 0E 04 
14d62     F0 D4 CA B9 
14d66     A6 90 80 80 
14d6a     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
14d6e     AF B7 C5 CA 
14d72     D6 E8 E8 EC 
14d76     F2 EA E6 E0 
14d7a     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
14d7e     BD B5 B5 AD 
14d82     B1 AC A7 A7 
14d86     A9 AD BC C5 
14d8a     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
14d8e     AF C0 C6 D9 
14d92     E0 EA FC FF 
14d96     04 16 16 1A 
14d9a     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
14d9e     0E 0E 13 14 
14da2     13 13 10 10 
14da6     10 16 16 16 
14daa     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
14dae     30 31 3D 44 
14db2     51 60 64 64 
14db6     54 43 37 2D 
14dba     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
14dbe     0D 09 0A 16 
14dc2     21 30 3B 44 
14dc6     53 5D 6C 6E 
14dca     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
14dce     0D F9 F0 EC 
14dd2     EA E8 ED F7 
14dd6     03 0E 14 1A 
14dda     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
14dde     09 FC E0 C9 
14de2     AD A2 A3 A2 
14de6     A6 B1 B5 C0 
14dea     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
14dee     F2 F2 F6 F7 
14df2     00 09 0A 0D 
14df6     0A 04 07 04 
14dfa     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
14dfe     F3 F2 F3 ED 
14e02     F2 EC EC F0 
14e06     F6 FC 01 00 
14e0a     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
14e0e     FF 03 10 21 
14e12     2D 2C 2C 31 
14e16     3B 49 4F 4D 
14e1a     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
14e1e     54 4D 3B 31 
14e22     18 0E 0D 04 
14e26     07 07 09 14 
14e2a     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
14e2e     21 1E 18 16 
14e32     14 13 01 EC 
14e36     D3 C3 BC AF 
14e3a     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
14e3e     B5 C6 DF F6 
14e42     03 16 13 16 
14e46     27 27 27 21 
14e4a     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
14e4e     FC F3 FC 00 
14e52     09 0E 16 1D 
14e56     1E 20 21 21 
14e5a     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
14e5e     03 EC CF C0 
14e62     BF BC C9 D0 
14e66     DC DF C6 B5 
14e6a     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
14e6e     96 98 A6 AC 
14e72     B7 C5 CA CC 
14e76     D0 D6 CC C6 
14e7a     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
14e7e     B3 B5 B7 BC 
14e82     C0 CA D0 E0 
14e86     E3 E3 E3 CF 
14e8a     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
14e8e     AC BD D0 E2 
14e92     DF E3 ED 04 
14e96     14 21 27 2A 
14e9a     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
14e9e     2A 14 FF F2 
14ea2     E2 D9 D0 D4 
14ea6     D6 DA E8 FF 
14eaa     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
14eae     66 76 77 7C 
14eb2     6E 4D 34 18 
14eb6     07 FF FF 04 
14eba     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
14ebe     26 31 40 44 
14ec2     47 4D 4F 54 
14ec6     5D 63 64 60 
14eca     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
14ece     34 1D 0A FD 
14ed2     F3 F3 F3 F6 
14ed6     F6 F7 F9 FD 
14eda     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
14ede     C5 B5 B1 B3 
14ee2     BD CA D6 E3 
14ee6     E6 D3 CC CC 
14eea     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
14eee     E0 E8 F6 04 
14ef2     09 14 13 09 
14ef6     FD F0 DF DF 
14efa     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
14efe     FC 07 13 2A 
14f02     31 3B 3B 3A 
14f06     26 13 F2 DA 
14f0a     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
14f0e     E6 FC 01 FC 
14f12     FF 0A 1A 3A 
14f16     47 4F 5A 5E 
14f1a     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
14f1e     53 3D 2D 16 
14f22     0A 01 FC FC 
14f26     03 09 20 31 
14f2a     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
14f2e     51 43 31 18 
14f32     F7 D9 C6 BF 
14f36     C3 D0 DA E8 
14f3a     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
14f3e     DA DA E0 E8 
14f42     E6 EA F0 F0 
14f46     EC F0 ED F2 
14f4a     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
14f4e     04 10 1A 18 
14f52     1A 20 21 26 
14f56     24 24 1E 1A 
14f5a     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
14f5e     D9 D4 CF D3 
14f62     DF EC F6 F0 
14f66     F0 E6 F0 EC 
14f6a     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
14f6e     BC B7 B7 B5 
14f72     AD A6 9A 94 
14f76     89 80 83 84 
14f7a     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
14f7e     AD CA E0 F0 
14f82     00 01 01 FC 
14f86     E6 C9 AF A0 
14f8a     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
14f8e     C5 CA C9 CC 
14f92     DC F0 FD 04 
14f96     0A 0A 0E 13 
14f9a     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
14f9e     26 2A 2A 2C 
14fa2     1E 18 10 04 
14fa6     04 07 09 13 
14faa     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
14fae     2D 30 16 03 
14fb2     F7 F2 ED F3 
14fb6     07 1D 37 4D 
14fba     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
14fbe     57 59 5A 59 
14fc2     4D 40 34 27 
14fc6     26 21 2A 2D 
14fca     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
14fce     30 21 1A 0E 
14fd2     14 16 2A 34 
14fd6     37 3A 31 21 
14fda     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
14fde     BC B9 B7 BC 
14fe2     CA D0 C9 C0 
14fe6     B3 AF B9 BF 
14fea     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
14fee     ED F7 FC F9 
14ff2     F9 FC F3 F6 
14ff6     F3 F0 E0 D9 
14ffa     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
14ffe     04 16 24 2A 
15002     27 26 18 04 
15006     00 F6 F3 F9 
1500a     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
1500e     26 1E 18 14 
15012     18 1D 21 20 
15016     26 24 24 26 
1501a     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
1501e     18 18 1D 21 
15022     2C 2C 3A 43 
15026     43 44 51 53 
1502a     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
1502e     27 0D F6 D9 
15032     C5 B9 B7 BF 
15036     CF E2 EC EC 
1503a     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
1503e     24 2C 36 34 
15042     20 10 00 EC 
15046     EA DC D4 D6 
1504a     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
1504e     E6 EC EA F2 
15052     F6 F6 F9 F9 
15056     FF 00 0A 0E 
1505a     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
1505e     0D 18 18 1E 
15062     16 00 EC DC 
15066     D4 D0 D4 DA 
1506a     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
1506e     8A 89 94 9A 
15072     AC B1 C0 C9 
15076     CF D6 CC CF 
1507a     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
1507e     D4 D6 D6 C9 
15082     C6 B7 AC 9C 
15086     9A 8C 8C 8F 
1508a     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
1508e     CA E2 E6 ED 
15092     F7 00 0A 14 
15096     16 0D 0A F9 
1509a     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
1509e     F6 FF 09 16 
150a2     1D 24 27 3A 
150a6     3D 40 49 49 
150aa     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
150ae     14 0D 10 13 
150b2     14 1A 26 30 
150b6     3A 3A 36 2D 
150ba     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
150be     36 36 36 2D 
150c2     30 27 2D 30 
150c6     26 24 24 27 
150ca     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
150ce     3D 30 18 01 
150d2     F0 E2 D9 D9 
150d6     DF E2 E8 F3 
150da     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
150de     26 2C 2A 16 
150e2     00 F3 E2 D6 
150e6     D9 D9 DC E0 
150ea     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
150ee     BD B5 B1 B3 
150f2     B3 B5 C5 D6 
150f6     E0 F9 04 18 
150fa     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
150fe     10 13 09 09 
15102     01 FF FF F3 
15106     EC E8 E8 E8 
1510a     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
1510e     09 16 2A 3D 
15112     4B 5D 5A 5D 
15116     51 40 31 21 
1511a     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
1511e     3A 47 4D 54 
15122     54 54 47 3A 
15126     27 14 00 F3 
1512a     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
1512e     16 21 20 16 
15132     09 03 03 FD 
15136     F6 F0 F0 ED 
1513a     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
1513e     FC F3 F2 EA 
15142     E8 E2 E8 EA 
15146     ED F2 FD 03 
1514a     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
1514e     13 10 0A 00 
15152     FF F7 F3 F9 
15156     F7 FF 04 04 
1515a     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
1515e     FF F9 ED EA 
15162     E2 E6 E6 E3 
15166     E6 E8 E3 DF 
1516a     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
1516e     80 80 80 80 
15172     84 8C A3 B1 
15176     BF D6 E0 EC 
1517a     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
1517e     D9 D3 C0 BD 
15182     BD BF C3 C5 
15186     C6 CA CF D4 
1518a     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
1518e     D3 D0 D3 D4 
15192     D6 D9 D6 D9 
15196     D9 D9 E2 ED 
1519a     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
1519e     16 26 31 37 
151a2     40 36 30 1E 
151a6     09 FC EC E6 
151aa     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
151ae     27 3A 4B 57 
151b2     64 64 5A 4F 
151b6     47 3D 3A 3D 
151ba     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
151be     60 59 51 43 
151c2     37 26 18 0E 
151c6     03 00 04 04 
151ca     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
151ce     26 09 F0 DC 
151d2     CC C5 CA D6 
151d6     E6 FD 04 13 
151da     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
151de     F6 E8 E6 DC 
151e2     DC DC DC ED 
151e6     F7 FC FC F6 
151ea     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
151ee     CC D0 E0 EC 
151f2     00 10 21 2D 
151f6     2C 2D 24 16 
151fa     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
151fe     C0 BD C0 D4 
15202     E2 F2 F6 F3 
15206     F7 F9 F2 ED 
1520a     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
1520e     18 26 31 37 
15212     37 2D 27 21 
15216     21 24 2A 31 
1521a     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
1521e     60 60 53 4B 
15222     44 37 2D 2A 
15226     21 1E 1A 1E 
1522a     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
1522e     49 47 41 36 
15232     14 FD E6 D3 
15236     CC C5 CA D0 
1523a     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
1523e     E6 E3 E6 E6 
15242     E8 EA EC ED 
15246     F3 F6 F6 F6 
1524a     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
1524e     00 00 00 FD 
15252     F7 F0 F6 FD 
15256     09 16 24 34 
1525a     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
1525e     18 13 04 FD 
15262     EC E3 E2 E0 
15266     DF D0 B5 9A 
1526a     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
1526e     80 80 80 94 
15272     A2 AD B7 C5 
15276     C9 CF D6 DA 
1527a     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
1527e     A9 AC B9 C9 
15282     CF DF E2 E2 
15286     D9 CF CC CC 
1528a     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
1528e     EC FF 0E 10 
15292     13 13 0E 10 
15296     0A 04 04 04 
1529a     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
1529e     F2 F0 E2 E0 
152a2     DC DA D9 DA 
152a6     DC D6 E0 F2 
152aa     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
152ae     51 5A 59 4B 
152b2     40 40 37 3A 
152b6     3A 3B 44 4F 
152ba     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
152be     34 31 2C 2D 
152c2     30 37 40 49 
152c6     51 57 57 57 
152ca     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
152ce     0E F6 D9 C3 
152d2     BD BC C5 D3 
152d6     DF E8 E8 E8 
152da     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
152de     CA C9 CA D4 
152e2     DA EC FF 04 
152e6     01 F7 ED E2 
152ea     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
152ee     F6 00 04 0D 
152f2     0A 09 01 01 
152f6     03 0A 0A 0D 
152fa     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
152fe     07 10 16 16 
15302     13 0A F7 F2 
15306     ED E6 EA E6 
1530a     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
1530e     00 04 0D 0A 
15312     0D 0E 1A 26 
15316     36 47 54 5E 
1531a     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
1531e     30 26 21 24 
15322     26 2C 2C 21 
15326     21 24 2A 34 
1532a     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
1532e     63 63 60 60 
15332     60 54 41 27 
15336     0E FD F2 E3 
1533a     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
1533e     B5 B9 BC B7 
15342     B3 BD BF C9 
15346     C9 CC CA D4 
1534a     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
1534e     18 16 0D 0E 
15352     0E 13 1E 26 
15356     27 27 0E 00 
1535a     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
1535e     E6 E3 E6 F7 
15362     07 13 1A 18 
15366     13 00 EA D9 
1536a     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
1536e     9D A0 A2 9A 
15372     94 8C 86 8C 
15376     80 80 80 80 
1537a     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
1537e     A7 C3 D4 E0 
15382     E0 DF E0 E3 
15386     E3 E8 E8 E8 
1538a     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
1538e     FC F7 F0 EA 
15392     ED F6 00 0D 
15396     14 1D 1E 1E 
1539a     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
1539e     FC FC FF 00 
153a2     FC FF FC FC 
153a6     FD FC 03 0A 
153aa     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
153ae     F6 F7 01 0D 
153b2     14 1E 24 2D 
153b6     43 54 59 5A 
153ba     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
153be     40 40 41 37 
153c2     3A 2D 27 20 
153c6     1D 1E 21 30 
153ca     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
153ce     34 2C 1A 13 
153d2     1D 1E 1D 10 
153d6     F6 DA CA BD 
153da     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
153de     B3 AD B3 B5 
153e2     BF C6 C3 BC 
153e6     BC BD D3 E8 
153ea     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
153ee     26 21 18 10 
153f2     04 FC FD F9 
153f6     F0 E6 DF D6 
153fa     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
153fe     13 14 0E 0A 
15402     0A 0D 14 1E 
15406     26 30 2A 21 
1540a     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
1540e     21 1A 16 13 
15412     16 18 10 04 
15416     FF F3 EC E6 
1541a     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
1541e     13 2D 43 54 
15422     66 68 63 5E 
15426     63 66 71 64 
1542a     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
1542e     2D 30 3B 41 
15432     40 41 44 41 
15436     3D 31 21 09 
1543a     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
1543e     F3 F0 EA DF 
15442     D3 CA C9 C3 
15446     C5 C5 CA C6 
1544a     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
1544e     CC D9 E6 F7 
15452     07 09 0A 07 
15456     04 04 04 07 
1545a     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
1545e     04 04 09 07 
15462     F9 E8 DF E0 
15466     EA F9 FC FC 
1546a     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
1546e     BD BC B3 A7 
15472     A6 A0 9C 94 
15476     94 8C 8F 92 
1547a     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
1547e     8C 80 80 80 
15482     80 89 96 A9 
15486     BD C5 DC F3 
1548a     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
1548e     2D 27 20 21 
15492     1A 0E 07 F0 
15496     D9 C6 B9 B9 
1549a     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
1549e     09 1A 27 2D 
154a2     2D 30 34 3D 
154a6     43 37 2C 1D 
154aa     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
154ae     18 16 0E 09 
154b2     FD ED EC F2 
154b6     F2 F3 F3 F6 
154ba     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
154be     3B 49 49 4B 
154c2     4D 54 54 54 
154c6     59 54 4F 54 
154ca     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
154ce     1E 14 13 00 
154d2     F3 EC E2 DC 
154d6     DF DF E8 ED 
154da     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
154de     F0 F9 F7 F2 
154e2     EA E6 E3 E3 
154e6     E8 E2 D3 CA 
154ea     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
154ee     B3 B7 C3 C5 
154f2     D6 E3 FD 09 
154f6     16 1E 24 2D 
154fa     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
154fe     F7 E3 DA DC 
15502     DF EA FC 0A 
15506     0E 20 37 47 
1550a     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
1550e     4D 49 40 34 
15512     2C 1A 0A FC 
15516     F2 F2 F6 F9 
1551a     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
1551e     03 09 0A 0D 
15522     13 21 2C 2D 
15526     31 3B 43 4D 
1552a     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
1552e     76 70 5E 4F 
15532     47 41 41 36 
15536     26 13 0A 03 
1553a     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
1553e     ED E3 E2 E8 
15542     EA F6 FC F6 
15546     F3 F6 FC FC 
1554a     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
1554e     F9 EC D9 B9 
15552     A2 96 86 92 
15556     9C A9 BD D0 
1555a     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
1555e     2C 3D 43 43 
15562     41 40 40 3A 
15566     2C 20 07 F2 
1556a     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
1556e     80 80 80 8C 
15572     98 AC BC C0 
15576     C9 D3 D3 C9 
1557a     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
1557e     9C 9D A7 B7 
15582     C5 CF CC C6 
15586     BC BF C0 C3 
1558a     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
1558e     CC D3 D9 D9 
15592     DF E0 E3 ED 
15596     F9 07 14 18 
1559a     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
1559e     0D 09 FD F9 
155a2     F9 F3 F9 03 
155a6     0A 0E 1A 27 
155aa     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
155ae     31 21 18 1A 
155b2     1D 20 24 26 
155b6     26 26 26 21 
155ba     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
155be     D4 D0 DA EC 
155c2     FF 0A 18 2D 
155c6     3B 54 66 77 
155ca     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
155ce     64 4B 24 01 
155d2     E2 C9 B7 B5 
155d6     B7 C3 C9 D0 
155da     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
155de     20 21 20 20 
155e2     1E 13 0A 00 
155e6     FC EC E3 E0 
155ea     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
155ee     CF C6 B9 B3 
155f2     B5 B3 B7 BC 
155f6     C6 BF C9 D4 
155fa     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
155fe     07 20 37 49 
15602     53 4F 47 47 
15606     40 40 3A 31 
1560a     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
1560e     01 00 FF 00 
15612     01 04 10 20 
15616     2D 36 34 36 
1561a     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
1561e     43 44 44 31 
15622     2A 2D 24 0D 
15626     00 F9 F7 F7 
1562a     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
1562e     1A 2C 00 00 
15632     FC FF 02 04 
15636     05 07 07 09 
1563a     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
1563e     08 07 06 06 
15642     05 04 04 04 
15646     03 00 F4 EC 
1564a     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
1564e     00 BF FF 00 
15652     CF FF E0 FF 
15656     20 C0 FF 20 
1565a     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
1565e     10 FF 50 00 
15662     0F 20 07 18 
15666     10 17 10 FF 
1566a     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
1566e     28 F0 FF 10 
15672     F3 F1 FF 00 
15676     DF F8 F0 F3 
1567a     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
1567e     DF 10 F7 00 
15682     DF 1B 00 DF 
15686     20 EB FC 1F 
1568a     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
1568e     08 EF 0F 14 
15692     01 FF 10 03 
15696     17 00 FF 30 
1569a     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
1569e     00 FB 0F 00 
156a2     EF F0 EF 00 
156a6     FF 00 FF 00 
156aa     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
156ae     E8 F7 00 EB 
156b2     FB 02 F0 E0 
156b6     FF 10 FF 30 
156ba     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
156be     FF 1B 08 0F 
156c2     20 FF 10 FF 
156c6     10 FF 17 20 
156ca     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
156ce     F3 0E 00 EB 
156d2     D0 DF 06 00 
156d6     E0 FF 00 DF 
156da     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
156de     F0 EF FF 20 
156e2     E1 FF 10 FF 
156e6     10 FF 00 FF 
156ea     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
156ee     0B 08 F7 09 
156f2     2E 00 EF 20 
156f6     F3 FF 00 EB 
156fa     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
156fe     0D 00 E7 FF 
15702     10 FF 10 F7 
15706     07 20 00 EF 
1570a     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
1570e     E5 EF F0 F7 
15712     10 00 FB F8 
15716     F5 FD 06 00 
1571a     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
1571e     08 FF 18 08 
15722     07 18 00 F7 
15726     00 FF 09 12 
1572a     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
1572e     FF 00 FF 08 
15732     F9 E4 E5 F7 
15736     F4 E0 EF F0 
1573a     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
1573e     00 FF 1F 00 
15742     EF 20 07 00 
15746     FE F0 FF 00 
1574a     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
1574e     FF 00 FF 00 
15752     F7 0B 10 F0 
15756     FF 10 FB 00 
1575a     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
1575e     0F 10 0F 04 
15762     E8 FF 00 DF 
15766     FC F0 DF E4 
1576a     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
1576e     F7 06 00 EF 
15772     FE F4 FF 10 
15776     FF 07 08 07 
1577a     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
1577e     0F E0 FF 20 
15782     D7 1F 10 DF 
15786     20 FF 03 1F 
1578a     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
1578e     00 EF FF F0 
15792     EF 00 FF F1 
15796     FF 00 FF 0F 
1579a     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
1579e     00 EF 00 F4 
157a2     EF FF F8 FF 
157a6     00 FE F7 FF 
157aa     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
157ae     00 FF 10 FF 
157b2     00 06 03 17 
157b6     00 F7 08 05 
157ba     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
157be     FF F0 F7 0F 
157c2     00 F7 0B 10 
157c6     F0 F7 08 FF 
157ca     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
157ce     08 F0 FF 00 
157d2     F7 FF 08 E5 
157d6     FF 00 EF 0F 
157da     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
157de     FF 00 12 00 
157e2     FF 00 FF 10 
157e6     04 FF 02 0D 
157ea     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
157ee     FF 08 FB 05 
157f2     10 08 F8 FB 
157f6     FD 0B 00 EF 
157fa     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
157fe     10 00 EF 0F 
15802     00 FF 00 FF 
15806     07 00 EF 00 
1580a     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
1580e     00 FF 00 FF 
15812     00 EF 17 10 
15816     FF 10 F0 FF 
1581a     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
1581e     04 08 F0 FF 
15822     00 FD F0 FF 
15826     00 EF FF 00 
1582a     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
1582e     00 FF 08 F8 
15832     EB FF 00 FB 
15836     FB 0D 00 FF 
1583a     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
1583e     07 04 03 0A 
15842     F0 FF 08 F7 
15846     0F 08 FF 09 
1584a     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
1584e     00 0F 00 FF 
15852     00 F0 FF 00 
15856     F5 FF 00 0B 
1585a     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
1585e     F0 FF 08 F1 
15862     FF 00 FD FB 
15866     00 0B 00 F5 
1586a     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
1586e     0A 04 F8 FF 
15872     08 FB 07 00 
15876     FF 08 FF 0F 
1587a     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
1587e     0F 00 FF 00 
15882     FC F7 0C F2 
15886     FF 04 04 FF 
1588a     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
1588e     FF 03 08 FC 
15892     FA F2 FB FF 
15896     F8 EF FF F0 
1589a     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
1589e     00 FB 07 02 
158a2     0F 00 0F 09 
158a6     16 00 17 08 
158aa     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
158ae     09 00 EF 0F 
158b2     00 EF 0B 00 
158b6     FF 00 00 F7 
158ba     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
158be     FE FF F8 FF 
158c2     00 F7 FF 00 
158c6     FB F9 FC FF 
158ca     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
158ce     FF 03 0C F2 
158d2     FF 09 08 FB 
158d6     15 00 FF 00 
158da     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
158de     FD 15 00 FF 
158e2     00 04 03 0A 
158e6     F4 FF 00 FF 
158ea     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
158ee     E5 FF 00 F7 
158f2     FF 00 FF 00 
158f6     FF 0E 00 FF 
158fa     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
158fe     14 00 FF 00 
15902     F5 0F 00 FF 
15906     F3 FF FB 04 
1590a     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
1590e     00 FE F7 06 
15912     00 FF 09 00 
15916     07 00 ED FF 
1591a     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
1591e     F6 FF 05 00 
15922     FF 00 FD 04 
15926     F4 F9 F7 FD 
1592a     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
1592e     F7 08 F0 FD 
15932     FF 00 F3 0B 
15936     00 FF 07 00 
1593a     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
1593e     08 04 FF 08 
15942     F9 0C F7 12 
15946     F1 0F 00 FF 
1594a     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
1594e     FF 02 F8 FF 
15952     00 FD FF 00 
15956     FC FD 01 F8 
1595a     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
1595e     F9 02 FA F7 
15962     06 00 02 FB 
15966     04 07 04 FB 
1596a     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
1596e     04 00 FF F8 
15972     FF 07 00 FB 
15976     0E F2 FF 00 
1597a     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
1597e     F4 FA FF 00 
15982     FC FB 08 00 
15986     FF 03 00 FB 
1598a     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
1598e     01 00 00 FB 
15992     04 FD 04 00 
15996     FB 04 FA FF 
1599a     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
1599e     00 FF 03 08 
159a2     01 0A 00 08 
159a6     01 00 F7 0B 
159aa     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
159ae     FF F5 FB FD 
159b2     F8 FE FB FF 
159b6     FA F9 FF 05 
159ba     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
159be     06 01 04 FF 
159c2     08 F8 FF 00 
159c6     F6 FF FB 02 
159ca     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
159ce     00 EF 0D 00 
159d2     F6 FF 00 FB 
159d6     0A F3 08 03 
159da     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
159de     FB FF 00 F3 
159e2     FF FA F4 F7 
159e6     FF 00 F6 F9 
159ea     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
159ee     FA FF 00 FD 
159f2     08 F9 05 03 
159f6     04 00 FF 04 
159fa     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
159fe     F3 0E FB 08 
15a02     01 03 06 06 
15a06     02 FD 04 F9 
15a0a     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
15a0e     FE 00 F8 FB 
15a12     04 00 F8 FF 
15a16     04 00 F9 FF 
15a1a     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
15a1e     02 00 F9 FF 
15a22     01 00 FD 05 
15a26     04 04 04 00 
15a2a     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
15a2e     02 FF 0C FB 
15a32     08 03 04 00 
15a36     FD FE F9 FA 
15a3a     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
15a3e     F9 FF 00 F8 
15a42     FE FD 00 FE 
15a46     FB FF 00 FA 
15a4a     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
15a4e     00 FB 04 03 
15a52     08 01 04 FF 
15a56     04 FC FF 02 
15a5a     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
15a5e     02 00 00 03 
15a62     04 00 FF 08 
15a66     00 FF 06 00 
15a6a     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
15a6e     FD FF 00 01 
15a72     00 FB 00 F5 
15a76     FD F7 F6 FA 
15a7a     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
15a7e     04 02 04 00 
15a82     FF 03 00 FF 
15a86     08 F7 FF 02 
15a8a     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
15a8e     00 F9 FF FE 
15a92     00 FF 01 FE 
15a96     03 00 FB 06 
15a9a     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
15a9e     FF 05 01 00 
15aa2     FF 00 FB FF 
15aa6     FF FC FF 00 
15aaa     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
15aae     FD 00 FB 00 
15ab2     FF 00 FB 03 
15ab6     03 01 06 04 
15aba     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
15abe     FB 08 01 00 
15ac2     FF 00 FB FF 
15ac6     00 F7 08 F7 
15aca     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
15ace     FB F9 FB FE 
15ad2     FA FD FF 01 
15ad6     00 FF 02 00 
15ada     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
15ade     00 FF 04 FD 
15ae2     05 08 00 00 
15ae6     02 00 FF 00 
15aea     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
15aee     FD 05 04 FD 
15af2     09 08 01 02 
15af6     03 00 FD FE 
15afa     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
15afe     FF 00 F7 FE 
15b02     FC F5 FA FD 
15b06     F8 FB FF FD 
15b0a     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
15b0e     04 05 08 03 
15b12     07 04 01 04 
15b16     02 00 FE FC 
15b1a     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
15b1e     00 FF 00 FF 
15b22     04 00 FF 02 
15b26     FF 02 FF 03 
15b2a     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
15b2e     02 00 00 FF 
15b32     00 FE FC FD 
15b36     FE FC FD FC 
15b3a     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
15b3e     FA FF 02 FD 
15b42     FE 03 04 00 
15b46     04 05 02 05 
15b4a     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
15b4e     01 03 01 01 
15b52     01 FF 00 FF 
15b56     02 FA FD 00 
15b5a     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
15b5e     00 FE FF 04 
15b62     02 FF 01 02 
15b66     00 FD FE FC 
15b6a     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
15b6e     FE 00 00 FD 
15b72     FF 00 01 00 
15b76     FF 02 00 FF 
15b7a     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
15b7e     01 00 FF 00 
15b82     03 00 FD FE 
15b86     FF FD FF 00 
15b8a     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
15b8e     FF 02 FD FE 
15b92     FE FE FE FD 
15b96     FC FC FF 00 
15b9a     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
15b9e     04 02 01 00 
15ba2     FE FF FC FC 
15ba6     FD FF FD FE 
15baa     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
15bae     01 00 00 FF 
15bb2     03 01 FF 03 
15bb6     02 FF 03 02 
15bba     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
15bbe     00 00 FD 00 
15bc2     FF FC FA FC 
15bc6     FC FB FE FD 
15bca     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
15bce     FE FF 00 03 
15bd2     02 01 03 02 
15bd6     01 00 01 00 
15bda     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
15bde     00 00 FD FF 
15be2     00 FF 00 FF 
15be6     02 02 02 02 
15bea     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
15bee     00 FD FE FE 
15bf2     FF 00 FF 02 
15bf6     01 01 00 FD 
15bfa     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
15bfe     FB FD F8 FB 
15c02     FD FD FF 00 
15c06     03 01 03 02 
15c0a     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
15c0e     00 FF 04 01 
15c12     03 04 00 FF 
15c16     00 FF 01 00 
15c1a     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
15c1e     FD FE FF 01 
15c22     02 00 FE FE 
15c26     FF FE FF 00 
15c2a     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
15c2e     FF 01 FF FF 
15c32     00 FE FF 01 
15c36     01 01 01 01 
15c3a     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
15c3e     04 05 06 02 
15c42     03 02 00 00 
15c46     00 FF 00 FE 
15c4a     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
15c4e     FF 00 FE FD 
15c52     FE FC FA FB 
15c56     FC FC FD FD 
15c5a     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
15c5e     FE FF FF 01 
15c62     01 02 02 02 
15c66     02 02 01 01 
15c6a     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
15c6e     00 FF 00 FE 
15c72     FF 00 FE FF 
15c76     FF FF FF FF 
15c7a     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
15c7e     03 03 02 02 
15c82     00 FF 00 FD 
15c86     FD FD FC FB 
15c8a     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
15c8e     FC FD FE FF 
15c92     00 00 02 03 
15c96     01 03 00 FF 
15c9a     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
15c9e     FE FE FE FE 
15ca2     FD FE FF 00 
15ca6     FE FF 00 FF 
15caa     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
15cae     03 03 02 02 
15cb2     02 02 01 01 
15cb6     02 00 FF 00 
15cba     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
15cbe     FF FE FD FD 
15cc2     FC FB FB FC 
15cc6     FD FF 00 FE 
15cca     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
15cce     01 02 01 01 
15cd2     01 01 02 02 
15cd6     02 03 02 01 
15cda     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
15cde     00 00 FF FE 
15ce2     FF 00 01 01 
15ce6     02 00 01 00 
15cea     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
15cee     00 FE FE FE 
15cf2     FE FD FE FD 
15cf6     FD FD FD FD 
15cfa     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
15cfe     FE FF FF 01 
15d02     02 02 03 02 
15d06     03 04 02 02 
15d0a     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
15d0e     FE FE FE FF 
15d12     00 FF 00 00 
15d16     FF 00 FD FD 
15d1a     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
15d1e     FE FF FE FE 
15d22     FD FD FD FF 
15d26     FE FF 00 FE 
15d2a     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
15d2e     00 FF FE FE 
15d32     FD FE FF FF 
15d36     01 01 01 02 
15d3a     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
15d3e     06 04 03 02 
15d42     00 FF FF FF 
15d46     FC FA FA F9 
15d4a     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
15d4e     FA FB FB FB 
15d52     FC FC FD FE 
15d56     FF 01 01 01 
15d5a     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
15d5e     01 02 03 04 
15d62     02 01 00 FF 
15d66     00 00 FF FF 
15d6a     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
15d6e     FF 00 00 00 
15d72     00 00 00 00 
15d76     00 FF 00 FF 
15d7a     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
15d7e     FA FB FC FB 
15d82     FC FC FD FD 
15d86     FE FF FF 01 
15d8a     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
15d8e     FF 01 02 02 
15d92     02 04 03 02 
15d96     02 02 02 02 
15d9a     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
15d9e     00 00 FE FE 
15da2     FE FE FE FD 
15da6     FD FE FE FF 
15daa     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
15dae     00 00 00 00 
15db2     00 00 00 00 
15db6     00          | 	byte	$00[9]
15db7     FF FE FC FC 
15dbb     FC FC FD FE 
15dbf     FF FF 00 00 
15dc3     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
15dc7     01 01 01 00 
15dcb     00 00 01 01 
15dcf     01 01 00 00 
15dd3     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
15dd7     00 FF FF FF 
15ddb     FE FE FE FF 
15ddf     FF FF 01 00 
15de3     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
15de7     02 03 03 02 
15deb     01 01 01 01 
15def     01 01 01 00 
15df3     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
15df7     FF FF 00 00 
15dfb     01 03 05 06 
15dff     06 05 05 04 
15e03     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
15e07     00 FE FE FD 
15e0b     FC FC FB FA 
15e0f     FA FA FB FB 
15e13     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
15e17     FE FF 01 01 
15e1b     01 02 02 01 
15e1f     02 02 03 04 
15e23     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
15e27     02 01 00 01 
15e2b     01 01 00 00 
15e2f     00 FF FF FF 
15e33     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
15e37     02 03 03 02 
15e3b     02 00 00 FF 
15e3f     FF FF FF FF 
15e43     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
15e47     FD FD FD FC 
15e4b     FD FE FE FF 
15e4f     FE FE FF 01 
15e53     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
15e57     04 04 04 02 
15e5b     02 02 02 01 
15e5f     02 00 00 FE 
15e63     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
15e67     FD FC FC FD 
15e6b     FD FD FD FF 
15e6f     00 00 01 02 
15e73     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
15e77     00 00 00 00 
15e7b     00          | 	byte	$00[5]
15e7c     01 00 00 FF 
15e80     FE FE FE FD 
15e84     FE FF FF 00 
15e88     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
15e8c     05 06 05 04 
15e90     04 04 02 02 
15e94     00 00 00 FF 
15e98     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
15e9c     FD FE FE FE 
15ea0     FE FE FF FF 
15ea4     FE FD FD FD 
15ea8     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
15eac     FF FF FF FF 
15eb0     FF          | 	byte	$ff[5]
15eb1     00 00 FF FF 
15eb5     FF FE FE FE 
15eb9     FE FD FD FE 
15ebd     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
15ec1     01 02 02 02 
15ec5     02 02 03 02 
15ec9     02 01 01 00 
15ecd     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
15ed1     FC FD FE FD 
15ed5     FE FD FD FE 
15ed9     FE FE FF FE 
15edd     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
15ee1     01 01 01 02 
15ee5     03 04 03 02 
15ee9     02 01 FE 00 
15eed     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
15ef1     01 0A 10 13 
15ef5     16 0E 10 13 
15ef9     16 1D 1E 14 
15efd     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
15f01     04 14 13 1D 
15f05     1E 1D 1A 18 
15f09     16 13 13 13 
15f0d     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
15f11     E8 C5 8F 80 
15f15     80 80 80 80 
15f19     80 80 92 A7 
15f1d     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
15f21     EA FC 0A 18 
15f25     1D 13 FD E2 
15f29     C6 BF BC BD 
15f2d     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
15f31     AC AD B5 C6 
15f35     CA E3 F6 04 
15f39     09 13 18 14 
15f3d     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
15f41     F9 F6 F6 ED 
15f45     E6 ED E6 EC 
15f49     ED F9 03 10 
15f4d     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
15f51     40 43 41 47 
15f55     53 5D 5D 59 
15f59     3D 2A 18 09 
15f5d     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
15f61     0A 0E 24 31 
15f65     34 30 20 1D 
15f69     14 1A 0E 0D 
15f6d     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
15f71     20 30 36 3D 
15f75     47 44 34 26 
15f79     07 F9 F2 F7 
15f7d     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
15f81     1E 21 1E 14 
15f85     18 18 18 16 
15f89     0E 0E FF F3 
15f8d     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
15f91     B7 AD A9 A2 
15f95     A3 A6 A7 A9 
15f99     B3 C0 CF E3 
15f9d     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
15fa1     FD 0A 14 1A 
15fa5     1A 1A 1A 10 
15fa9     0D 04 FC F0 
15fad     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
15fb1     DF E8 FD 0E 
15fb5     21 3A 4D 68 
15fb9     76 7C 70 5A 
15fbd     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
15fc1     01 FC FD FC 
15fc5     F7 07 03 07 
15fc9     00 F6 E3 D4 
15fcd     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
15fd1     D4 DA E3 EA 
15fd5     F2 ED E8 E2 
15fd9     D6 CF CC B7 
15fdd     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
15fe1     CA DF F3 FD 
15fe5     FD F3 F6 F6 
15fe9     F9 FF 03 03 
15fed     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
15ff1     DF DC D9 DA 
15ff5     E2 E3 EC F7 
15ff9     03 0D 20 30 
15ffd     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
16001     2A 18 07 FD 
16005     F2 ED E8 F0 
16009     F6 01 07 10 
1600d     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
16011     DF C5 B1 A0 
16015     89 89 92 9A 
16019     AF C6 CF E8 
1601d     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
16021     D6 D0 C6 BF 
16025     C3 BD CA C9 
16029     CA CC C6 C0 
1602d     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
16031     A7 B7 C0 CF 
16035     DF ED 03 10 
16039     14 09 0A 03 
1603d     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
16041     01 F0 EC E6 
16045     E2 E2 E6 EA 
16049     F6 F7 03 13 
1604d     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
16051     74 74 71 63 
16055     44 31 18 07 
16059     03 EC EC EC 
1605d     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
16061     37 41 36 2A 
16065     18 00 F6 F3 
16069     F6 F9 FD 04 
1606d     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
16071     40 44 43 31 
16075     27 24 21 24 
16079     21 26 2C 3A 
1607d     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
16081     4D 36 20 01 
16085     E2 D0 C0 BD 
16089     B9 C3 D0 D4 
1608d     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
16091     BD BF C0 C5 
16095     C5 D0 D9 D3 
16099     E0 E3 E6 EC 
1609d     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
160a1     E6 ED F9 04 
160a5     0E 07 07 FF 
160a9     F9 EC E0 D9 
160ad     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
160b1     00 14 30 4D 
160b5     64 71 76 5E 
160b9     51 36 27 24 
160bd     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
160c1     14 10 13 0D 
160c5     0D 09 00 F6 
160c9     E8 CA BC B5 
160cd     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
160d1     E8 F7 00 07 
160d5     FF F9 ED D4 
160d9     C5 AF AD AF 
160dd     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
160e1     00 00 FD F6 
160e5     F0 F2 EC E8 
160e9     E3 DC D9 D4 
160ed     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
160f1     D3 C9 C0 C3 
160f5     CF E8 FC 13 
160f9     21 3A 3A 3D 
160fd     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
16101     13 FC E0 CC 
16105     C9 CA D6 E8 
16109     F2 04 09 00 
1610d     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
16111     E6 F0 F6 F6 
16115     ED E3 E8 E6 
16119     EC EC E3 D0 
1611d     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
16121     9D AC A9 AD 
16125     B1 B1 B7 C5 
16129     C5 BF B7 AC 
1612d     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
16131     90 A3 BF DA 
16135     F3 FC FF 00 
16139     09 10 18 24 
1613d     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
16141     0E FF F9 F0 
16145     F0 F2 E2 E2 
16149     E3 F0 FF 1A 
1614d     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
16151     43 49 49 44 
16155     2D 20 07 FC 
16159     F9 FC 0A 18 
1615d     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
16161     09 00 ED E3 
16165     E2 E8 EA FC 
16169     01 14 20 27 
1616d     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
16171     1E 13 0D 0E 
16175     20 3B 49 63 
16179     63 63 5A 59 
1617d     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
16181     0A EA CF BD 
16185     B5 AF B1 BC 
16189     C0 C3 C0 C0 
1618d     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
16191     CF C9 CA CF 
16195     D9 D6 DF E0 
16199     DF E0 E0 DC 
1619d     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
161a1     ED FD FC F3 
161a5     F6 F2 F6 FD 
161a9     FD FF F0 E8 
161ad     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
161b1     09 1A 36 3A 
161b5     3D 3A 31 31 
161b9     27 2C 2D 37 
161bd     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
161c1     2C 21 16 F9 
161c5     E2 D0 CC C9 
161c9     CF DF E6 EC 
161cd     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
161d1     F0 FD 00 01 
161d5     EC DC C9 BC 
161d9     BF BF D3 E0 
161dd     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
161e1     D9 D4 D0 DA 
161e5     DC EA EC ED 
161e9     F0 ED DA D3 
161ed     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
161f1     BF C3 D6 E2 
161f5     F6 F7 FC 03 
161f9     03 0A 16 20 
161fd     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
16201     E2 D6 D4 D4 
16205     E2 EC FD 01 
16209     FF FF FF FD 
1620d     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
16211     21 27 1E 07 
16215     F2 DA CC CA 
16219     C0 C0 BC A7 
1621d     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
16221     90 9C 9D A6 
16225     B1 BF C9 BD 
16229     AC 94 89 80 
1622d     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
16231     B3 C6 CC D6 
16235     F0 F2 00 13 
16239     24 31 37 40 
1623d     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
16241     FC E3 DF D3 
16245     D0 D0 DF EA 
16249     01 14 26 3A 
1624d     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
16251     31 36 2C 1D 
16255     0A 09 04 09 
16259     14 0E 09 FD 
1625d     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
16261     E0 E3 F2 04 
16265     16 20 31 37 
16269     36 37 37 37 
1626d     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
16271     26 2A 36 40 
16275     4D 54 5A 57 
16279     4B 44 49 43 
1627d     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
16281     CC B3 A7 A6 
16285     A7 A9 A9 AD 
16289     B7 C6 D3 CA 
1628d     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
16291     EA E6 E6 DA 
16295     DA DA DA E0 
16299     E2 DC D4 D4 
1629d     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
162a1     EC F0 F0 F9 
162a5     01 01 03 FC 
162a9     ED E6 E8 E6 
162ad     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
162b1     27 2D 26 1E 
162b5     21 1E 2A 34 
162b9     43 4B 54 4F 
162bd     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
162c1     E0 CF CC C9 
162c5     C9 CA DC EA 
162c9     FF 14 26 2D 
162cd     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
162d1     21 07 F7 ED 
162d5     D4 D3 CF CA 
162d9     CA C0 AF A6 
162dd     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
162e1     E0 F2 FD 09 
162e5     07 F6 E3 D4 
162e9     BF BD BC BF 
162ed     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
162f1     C6 C9 CC D6 
162f5     E3 EA F6 01 
162f9     10 1E 21 1E 
162fd     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
16301     EA ED F6 F6 
16305     EA EA E8 EC 
16309     F2 F7 FF 0A 
1630d     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
16311     37 27 10 F9 
16315     E2 D9 C9 AC 
16319     94 83 80 80 
1631d     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
16321     98 92 98 A0 
16325     A0 96 90 92 
16329     83 86 8A 98 
1632d     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
16331     DA F0 FF 16 
16335     26 36 43 47 
16339     49 40 27 0A 
1633d     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
16341     D9 E3 E2 E8 
16345     F3 01 0E 1D 
16349     16 16 0E 13 
1634d     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
16351     27 1E 18 07 
16355     FC F9 EC E8 
16359     CC CF C9 CF 
1635d     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
16361     27 3A 4B 51 
16365     53 49 47 34 
16369     34 27 2C 2C 
1636d     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
16371     26 30 40 54 
16375     64 6A 71 6A 
16379     5A 40 24 04 
1637d     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
16381     B1 AF A6 A6 
16385     A7 A6 A6 A9 
16389     B5 BD CC DF 
1638d     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
16391     E8 E0 E3 E6 
16395     F2 F0 EA EC 
16399     E2 E0 E2 E2 
1639d     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
163a1     E2 F2 F9 F9 
163a5     FD FD FF 00 
163a9     01 0A 13 13 
163ad     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
163b1     13 1D 2C 3D 
163b5     47 5A 59 4D 
163b9     37 20 0D F7 
163bd     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
163c1     E2 E3 E2 ED 
163c5     FD 03 16 2A 
163c9     36 4B 57 6A 
163cd     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
163d1     14 EA D0 BC 
163d5     AC 98 8F 8F 
163d9     9C AC BF D6 
163dd     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
163e1     FF FF F6 EA 
163e5     DF D4 C5 C9 
163e9     C5 B7 B7 AF 
163ed     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
163f1     BF CF DF F2 
163f5     FC 14 14 24 
163f9     27 27 1E 1A 
163fd     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
16401     DF CF D0 D0 
16405     D6 E2 F6 03 
16409     14 2C 41 4D 
1640d     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
16411     18 FC D3 B1 
16415     94 80 80 80 
16419     80 80 80 80 
1641d     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
16421     89 98 9D A2 
16425     A2 A2 A3 AD 
16429     AF B3 B9 C3 
1642d     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
16431     10 1E 1D 20 
16435     26 1D 10 0A 
16439     00 F7 F2 ED 
1643d     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
16441     01 F7 F7 F0 
16445     F3 F9 00 04 
16449     07 13 13 1D 
1644d     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
16451     ED DC D4 BF 
16455     B9 B7 BC C9 
16459     DF F3 00 1D 
1645d     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
16461     60 63 53 43 
16465     30 21 1D 18 
16469     1D 1D 1E 20 
1646d     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
16471     60 6C 6C 6A 
16475     60 53 43 24 
16479     09 ED DC CF 
1647d     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
16481     90 94 96 A2 
16485     B3 C5 D6 E2 
16489     F0 F9 FD FD 
1648d     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
16491     F9 F9 FC F0 
16495     E2 CC BC B3 
16499     B1 B7 C6 CF 
1649d     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
164a1     04 0E 18 18 
164a5     10 04 09 FC 
164a9     F9 FC 04 0D 
164ad     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
164b1     31 30 27 20 
164b5     14 10 04 01 
164b9     FD F3 F7 F7 
164bd     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
164c1     01 0D 1A 2D 
164c5     4B 51 54 49 
164c9     41 3A 3B 3B 
164cd     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
164d1     0A F3 E2 D0 
164d5     CA C3 C5 C5 
164d9     D3 D9 E3 E6 
164dd     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
164e1     E2 CC BD AD 
164e5     A0 A6 A6 A3 
164e9     A6 A6 A6 A9 
164ed     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
164f1     FD 03 0D 1D 
164f5     26 36 3B 2D 
164f9     1A 01 E6 C9 
164fd     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
16501     DA EC 03 18 
16505     2D 3D 4F 49 
16509     49 43 3A 36 
1650d     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
16511     F7 DA B5 80 
16515     80 80 80 80 
16519     80 80 80 80 
1651d     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
16521     AF B7 B7 B9 
16525     B3 B5 B7 CA 
16529     D9 E8 F3 F3 
1652d     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
16531     09 04 0D 0A 
16535     0D 0E 04 09 
16539     09 0A 03 03 
1653d     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
16541     D4 E6 F6 01 
16545     09 FC F3 F0 
16549     F6 F9 00 FF 
1654d     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
16551     B9 BF C5 DA 
16555     E8 FF 18 2D 
16559     41 57 57 57 
1655d     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
16561     1A 10 0E 10 
16565     14 21 21 20 
16569     1E 1E 26 3A 
1656d     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
16571     44 49 4F 5E 
16575     6A 68 4B 1D 
16579     F0 B3 9A 89 
1657d     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
16581     AD C5 DA F2 
16585     F2 F7 FD 00 
16589     0E 18 1D 16 
1658d     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
16591     D6 BD AF A3 
16595     A7 B3 C3 DA 
16599     E6 E3 DF EC 
1659d     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
165a1     16 0D FF E8 
165a5     E3 EC F3 07 
165a9     0E 0E 13 16 
165ad     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
165b1     0E 0E 13 18 
165b5     21 24 21 20 
165b9     20 20 21 21 
165bd     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
165c1     18 1A 1E 14 
165c5     09 10 18 2D 
165c9     41 49 44 36 
165cd     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
165d1     0A 0D 1A 27 
165d5     27 26 1E 10 
165d9     00 F6 E6 D0 
165dd     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
165e1     A7 A3 A0 A2 
165e5     A2 A2 A6 A6 
165e9     A7 AF B7 D4 
165ed     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
165f1     09 1A 1E 20 
165f5     1D 0A F6 E2 
165f9     D3 D4 DC DF 
165fd     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
16601     1D 2D 2A 30 
16605     27 2C 27 26 
16609     26 16 14 0E 
1660d     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
16611     C3 A9 92 80 
16615     80 80 80 80 
16619     80 80 80 8F 
1661d     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
16621     C9 B9 B9 B3 
16625     B7 B5 B5 BD 
16629     C5 D3 E2 F6 
1662d     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
16631     10 14 21 21 
16635     24 1A 18 0A 
16639     04 F6 E8 DA 
1663d     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
16641     D9 D3 CF C3 
16645     C3 CF DA EA 
16649     ED F0 F2 DC 
1664d     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
16651     F6 01 14 21 
16655     30 36 36 2D 
16659     26 20 1E 20 
1665d     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
16661     3B 36 2D 26 
16665     21 16 0E 0D 
16669     13 18 20 21 
1666d     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
16671     47 4F 53 51 
16675     49 2C 10 00 
16679     E6 D0 BF B1 
1667d     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
16681     E8 F0 F7 04 
16685     07 14 18 0D 
16689     09 F7 ED E0 
1668d     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
16691     CA CC D6 DC 
16695     E3 E3 E3 E3 
16699     DC E3 ED FC 
1669d     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
166a1     F3 F0 F9 F3 
166a5     F6 F3 F3 F3 
166a9     F6 F6 F7 FC 
166ad     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
166b1     43 44 4D 54 
166b5     54 51 4B 3D 
166b9     2D 16 03 ED 
166bd     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
166c1     F3 F9 04 14 
166c5     27 3B 40 40 
166c9     41 2C 21 18 
166cd     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
166d1     27 27 2C 30 
166d5     34 2C 2D 21 
166d9     18 07 F7 E2 
166dd     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
166e1     BD BF C0 BC 
166e5     B7 AF B5 B9 
166e9     C0 C9 C6 CA 
166ed     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
166f1     F0 03 0D 0A 
166f5     0D 0D 10 14 
166f9     10 09 01 F9 
166fd     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
16701     F7 00 FF 0E 
16705     10 16 18 0E 
16709     0E 03 FF F3 
1670d     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
16711     C0 BC C6 CA 
16715     C0 B3 9C 8F 
16719     8A 96 9C B3 
1671d     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
16721     9C A2 AD B5 
16725     BF C0 D3 D9 
16729     E8 EC FD 03 
1672d     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
16731     21 21 24 26 
16735     20 13 07 FD 
16739     ED D0 BC A9 
1673d     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
16741     9C 9A A7 B7 
16745     C6 E3 F0 F3 
16749     F2 F2 FD 01 
1674d     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
16751     09 07 07 04 
16755     09 0E 16 20 
16759     2D 34 43 49 
1675d     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
16761     27 20 14 0A 
16765     01 FC F9 F9 
16769     F9 00 07 07 
1676d     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
16771     41 49 3B 3A 
16775     3B 3A 40 44 
16779     44 37 20 09 
1677d     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
16781     D9 DF DF E6 
16785     E3 EC EC ED 
16789     ED F6 F6 FC 
1678d     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
16791     ED E3 DA D4 
16795     D0 CC CA CA 
16799     D6 E6 EC F6 
1679d     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
167a1     E3 ED F2 F6 
167a5     F6 EC F0 F2 
167a9     FF 10 21 34 
167ad     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
167b1     60 60 5A 51 
167b5     43 34 24 1D 
167b9     04 F7 E6 DC 
167bd     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
167c1     F3 00 0D 18 
167c5     1A 21 1A 16 
167c9     10 14 20 2A 
167cd     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
167d1     20 1E 1E 20 
167d5     2A 2C 30 37 
167d9     37 3A 36 2C 
167dd     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
167e1     CA C3 B7 AC 
167e5     9A 92 8C 8A 
167e9     92 A0 AF BD 
167ed     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
167f1     18 1E 21 24 
167f5     30 30 26 18 
167f9     04 F3 E0 D6 
167fd     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
16801     E3 EA EA ED 
16805     F6 F6 FD FD 
16809     FD FF 01 03 
1680d     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
16811     E8 E6 E2 E3 
16815     E2 DF D9 CA 
16819     C0 B9 A9 96 
1681d     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
16821     AD B9 BF C6 
16825     C9 D6 D6 E8 
16829     F0 F0 FC 00 
1682d     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
16831     1A 1D 18 0E 
16835     FD F6 E3 D6 
16839     BF AC 9D 8F 
1683d     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
16841     B1 B9 C9 DF 
16845     E8 EA E3 E6 
16849     E8 E8 F0 F9 
1684d     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
16851     14 16 1A 1D 
16855     20 21 27 34 
16859     43 40 43 36 
1685d     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
16861     09 01 F9 ED 
16865     E2 DF D0 CF 
16869     DA E3 F7 09 
1686d     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
16871     5A 5A 5E 5D 
16875     53 54 51 49 
16879     3B 3A 26 1A 
1687d     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
16881     DC D6 DC E3 
16885     EC EA EA F2 
16889     F0 FC 03 07 
1688d     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
16891     D4 D0 CA CA 
16895     CC CC D4 E2 
16899     E3 D4 CF C9 
1689d     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
168a1     E8 FC 03 13 
168a5     1E 21 2A 26 
168a9     30 2D 30 36 
168ad     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
168b1     43 40 3A 36 
168b5     36 2A 1D 04 
168b9     F0 E2 CC C9 
168bd     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
168c1     F7 FC 0A 0E 
168c5     0D 0E 0D 04 
168c9     09 0A 0A 0A 
168cd     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
168d1     3B 41 44 44 
168d5     49 4B 4D 51 
168d9     4F 41 36 2A 
168dd     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
168e1     C9 B1 9D 98 
168e5     8C 8F 98 A7 
168e9     B7 C3 D3 DA 
168ed     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
168f1     10 07 00 F2 
168f5     F2 EC F3 F7 
168f9     F9 F9 F3 F0 
168fd     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
16901     C9 CF E0 E6 
16905     F6 00 04 0A 
16909     14 14 16 0A 
1690d     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
16911     D4 D9 DA E6 
16915     EC F6 03 0D 
16919     04 F7 D4 B1 
1691d     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
16921     90 AD C6 E0 
16925     E6 ED ED F2 
16929     F6 FD 03 09 
1692d     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
16931     EC DF D4 D3 
16935     D6 D3 CC C3 
16939     BC AF AF B5 
1693d     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
16941     C9 CA CF D0 
16945     CA CC C9 C9 
16949     CF DA F3 01 
1694d     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
16951     1D 14 13 13 
16955     13 1E 1D 18 
16959     14 0A 0D 04 
1695d     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
16961     00 E3 CF BD 
16965     BC C9 DC FF 
16969     18 31 4B 66 
1696d     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
16971     31 18 0E 09 
16975     10 1D 2D 40 
16979     43 44 4F 51 
1697d     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
16981     01 E6 D3 C5 
16985     C5 CF DC E8 
16989     EC F6 F3 EA 
1698d     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
16991     DC E6 EC EA 
16995     E0 E0 DF D6 
16999     D0 D0 C6 C6 
1699d     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
169a1     04 16 18 1D 
169a5     1E 21 24 27 
169a9     2D 30 37 3B 
169ad     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
169b1     34 2C 1A 0A 
169b5     01 F0 E0 D0 
169b9     CC D4 E0 F2 
169bd     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
169c1     16 16 13 13 
169c5     00 ED DF D4 
169c9     DC F2 0A 2A 
169cd     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
169d1     6C 6A 5A 4F 
169d5     37 2C 1D 14 
169d9     0D 0E 0A 0D 
169dd     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
169e1     F7 DF C0 B5 
169e5     A7 A9 AF BF 
169e9     CC DC ED F2 
169ed     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
169f1     B3 B7 BF D6 
169f5     ED FF 09 07 
169f9     00 F9 F3 F6 
169fd     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
16a01     F0 F3 F6 F6 
16a05     F6 F2 F2 F2 
16a09     ED F2 F6 ED 
16a0d     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
16a11     FF 0E 1A 24 
16a15     30 24 14 01 
16a19     E3 CA A6 90 
16a1d     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
16a21     B1 BF CC D9 
16a25     EA F7 00 04 
16a29     0D 09 F3 E3 
16a2d     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
16a31     BF CA D9 DF 
16a35     E2 DF CC C3 
16a39     BC C0 C6 D9 
16a3d     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
16a41     DA D4 C6 BC 
16a45     B5 B9 CA DF 
16a49     EC 00 03 01 
16a4d     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
16a51     13 09 0A 03 
16a55     FD F7 F6 F9 
16a59     FC FF 04 0A 
16a5d     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
16a61     D6 D6 DF F2 
16a65     0D 27 44 5A 
16a69     66 59 4D 34 
16a6d     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
16a71     FC 04 16 31 
16a75     40 49 57 5E 
16a79     74 77 77 68 
16a7d     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
16a81     EC D3 C3 AC 
16a85     AD B3 BD CC 
16a89     DA E6 EA EA 
16a8d     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
16a91     F0 F6 F9 ED 
16a95     EC E6 E8 E2 
16a99     D9 DA D6 D9 
16a9d     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
16aa1     0D 14 26 2A 
16aa5     34 37 3A 3D 
16aa9     3D 3D 36 27 
16aad     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
16ab1     DC DA DC DF 
16ab5     E0 D6 DF EA 
16ab9     FC 07 1A 2A 
16abd     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
16ac1     10 FD E2 DA 
16ac5     D9 DA F6 0A 
16ac9     21 3B 47 49 
16acd     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
16ad1     3A 34 34 2D 
16ad5     2A 21 16 0D 
16ad9     0A 0A 0E 1D 
16add     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
16ae1     04 F3 DF CC 
16ae5     C6 C9 D4 CF 
16ae9     C6 BD BF AF 
16aed     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
16af1     DC F2 FC FF 
16af5     FD FD FD 03 
16af9     0D 0A 0A 0A 
16afd     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
16b01     D3 C3 C0 BC 
16b05     C9 D9 E8 F9 
16b09     F9 FC FC F9 
16b0d     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
16b11     30 2C 18 00 
16b15     F0 D9 CC C6 
16b19     C5 C5 CA C5 
16b1d     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
16b21     D6 EA FC 07 
16b25     03 FF F7 EC 
16b29     DA CA B7 A9 
16b2d     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
16b31     B7 C6 C3 C0 
16b35     C6 CA D9 F0 
16b39     F9 00 07 04 
16b3d     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
16b41     CA CF CF CF 
16b45     DA DA E2 E2 
16b49     DF E0 DF DF 
16b4d     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
16b51     F6 F9 03 04 
16b55     09 0A FF F3 
16b59     F0 F0 F0 F6 
16b5d     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
16b61     0E 1A 26 37 
16b65     3B 3B 27 1E 
16b69     1A 09 09 0A 
16b6d     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
16b71     31 40 49 59 
16b75     60 6E 71 6A 
16b79     59 47 37 2A 
16b7d     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
16b81     CA B7 B1 A9 
16b85     BD D9 EC FD 
16b89     FD FD FD 00 
16b8d     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
16b91     F6 EA DF D9 
16b95     DC DC DA DC 
16b99     DF EA F9 FF 
16b9d     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
16ba1     2D 30 34 36 
16ba5     3A 37 34 2A 
16ba9     13 FD EA CA 
16bad     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
16bb1     B9 CA D6 E6 
16bb5     00 14 24 40 
16bb9     57 5D 44 2D 
16bbd     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
16bc1     FC FD FD 01 
16bc5     09 10 18 1E 
16bc9     1D 21 27 2C 
16bcd     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
16bd1     3A 3A 30 21 
16bd5     16 0E 0A 0D 
16bd9     0E 20 1E 20 
16bdd     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
16be1     0E 04 FD EC 
16be5     C9 B9 A2 A3 
16be9     A3 B5 C9 DC 
16bed     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
16bf1     F3 F7 F7 FD 
16bf5     03 FF 00 FC 
16bf9     FC F9 F2 ED 
16bfd     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
16c01     C3 C9 D0 E0 
16c05     E6 F0 F6 F6 
16c09     00 0A 18 27 
16c0d     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
16c11     E6 DA D3 CF 
16c15     CF D0 D3 E3 
16c19     F0 FC FD FD 
16c1d     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
16c21     F7 F9 F7 ED 
16c25     E2 D0 BD AF 
16c29     98 90 8C 89 
16c2d     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
16c31     CA D9 E6 F2 
16c35     FD 04 10 0D 
16c39     F6 E6 D4 CC 
16c3d     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
16c41     D6 D0 CA BD 
16c45     BD B1 AD AF 
16c49     B3 C0 CC E3 
16c4d     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
16c51     14 14 0D 04 
16c55     00 F6 F6 F3 
16c59     F6 F7 F9 00 
16c5d     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
16c61     37 3B 31 24 
16c65     13 07 0D 10 
16c69     1A 21 21 24 
16c6d     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
16c71     49 4B 49 41 
16c75     36 30 26 13 
16c79     0A 01 FC FC 
16c7d     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
16c81     F3 F9 ED F3 
16c85     FC FF 03 03 
16c89     04 07 07 00 
16c8d     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
16c91     D9 E6 F0 FC 
16c95     01 01 07 09 
16c99     0D 13 18 18 
16c9d     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
16ca1     20 20 18 0D 
16ca5     FD ED D6 C3 
16ca9     AD A3 9C A3 
16cad     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
16cb1     13 24 3B 4D 
16cb5     59 59 51 43 
16cb9     31 21 1D 18 
16cbd     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
16cc1     FD FF 00 07 
16cc5     16 18 1E 20 
16cc9     2A 2A 2D 30 
16ccd     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
16cd1     18 10 04 04 
16cd5     04 07 0A 13 
16cd9     14 16 0E 07 
16cdd     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
16ce1     10 0E 01 F9 
16ce5     FF FF FD FD 
16ce9     FF FF F9 F3 
16ced     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
16cf1     E0 D9 DA DA 
16cf5     E3 EC F3 F3 
16cf9     F6 ED E8 E0 
16cfd     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
16d01     DA E3 ED FD 
16d05     FD FF 03 04 
16d09     0D 00 F6 E6 
16d0d     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
16d11     D6 E8 F2 FF 
16d15     07 14 24 30 
16d19     3A 31 24 10 
16d1d     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
16d21     D0 B7 A9 9A 
16d25     90 84 80 89 
16d29     92 A2 AD C3 
16d2d     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
16d31     F3 F3 FC EA 
16d35     E6 E0 D3 C9 
16d39     CC CC D3 D4 
16d3d     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
16d41     94 9A A0 AC 
16d45     B3 C5 D3 E6 
16d49     FC 03 16 14 
16d4d     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
16d51     FD ED DF D6 
16d55     D6 DC ED FC 
16d59     0D 16 1D 2A 
16d5d     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
16d61     16 0A 0E 16 
16d65     26 2C 37 37 
16d69     2A 27 24 27 
16d6d     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
16d71     03 00 F9 FF 
16d75     01 09 0E 14 
16d79     1D 21 27 27 
16d7d     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
16d81     20 1D 14 0D 
16d85     01 F9 F2 DF 
16d89     D9 D4 D4 DF 
16d8d     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
16d91     1A 16 0D 00 
16d95     FF 00 07 09 
16d99     0D 0D 07 04 
16d9d     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
16da1     E3 CF C0 B1 
16da5     A7 A2 A9 B1 
16da9     C0 E0 04 24 
16dad     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
16db1     4F 40 40 3B 
16db5     34 24 1D 14 
16db9     16 1A 18 13 
16dbd     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
16dc1     14 1D 1E 1E 
16dc5     1E 1D 1D 21 
16dc9     24 24 24 1E 
16dcd     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
16dd1     F7 ED E8 E3 
16dd5     EA F6 FC 01 
16dd9     03 09 09 07 
16ddd     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
16de1     3D 54 64 70 
16de5     6C 59 37 16 
16de9     F7 E6 DC D4 
16ded     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
16df1     D9 E6 F3 F9 
16df5     FC F2 EC E3 
16df9     D6 D3 CF D0 
16dfd     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
16e01     FD 00 FD F9 
16e05     EA D3 C5 BD 
16e09     C0 C3 CC DC 
16e0d     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
16e11     26 27 27 31 
16e15     36 40 40 3A 
16e19     26 03 E6 CA 
16e1d     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
16e21     98 9A A0 A6 
16e25     B1 B5 B9 C0 
16e29     D0 E0 E3 EC 
16e2d     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
16e31     CA CC CC D0 
16e35     C9 CC CC C5 
16e39     C0 B9 A7 9A 
16e3d     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
16e41     BD CF D3 E3 
16e45     F0 FF 0D 16 
16e49     16 16 09 FF 
16e4d     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
16e51     C6 CF DA F3 
16e55     09 1A 24 2A 
16e59     18 07 00 FF 
16e5d     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
16e61     2A 3A 44 44 
16e65     3D 31 20 16 
16e69     0D FC ED E8 
16e6d     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
16e71     FD 14 26 31 
16e75     31 3A 41 47 
16e79     4D 47 43 43 
16e7d     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
16e81     14 03 E8 D6 
16e85     D0 DC ED FF 
16e89     0E 1E 20 26 
16e8d     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
16e91     01 F3 F2 F0 
16e95     F0 ED EC E0 
16e99     D9 D0 C6 C0 
16e9d     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
16ea1     BC BF CF D4 
16ea5     E6 F7 04 16 
16ea9     30 40 4B 4B 
16ead     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
16eb1     1E 21 2C 2C 
16eb5     2C 2D 2D 36 
16eb9     31 26 20 13 
16ebd     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
16ec1     0A 09 09 0A 
16ec5     0D 14 1D 1D 
16ec9     1D 18 0E 03 
16ecd     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
16ed1     D0 D4 E6 F9 
16ed5     03 0E 0A 03 
16ed9     F9 04 1E 3D 
16edd     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
16ee1     7F 7F 77 68 
16ee5     57 41 26 0D 
16ee9     FC E8 DA D0 
16eed     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
16ef1     E3 EC EC EC 
16ef5     EA EA E3 D6 
16ef9     D6 CF D0 D4 
16efd     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
16f01     C9 A9 A6 A9 
16f05     B7 D9 F2 09 
16f09     1D 34 36 3D 
16f0d     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
16f11     27 18 16 0E 
16f15     03 00 FC ED 
16f19     E3 DA CC C5 
16f1d     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
16f21     CA C6 C0 BD 
16f25     C3 C3 C6 CA 
16f29     D4 D0 C6 B1 
16f2d     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
16f31     CA CA C6 C0 
16f35     BF BC B9 B5 
16f39     AC A6 A9 AD 
16f3d     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
16f41     DC DF E6 EA 
16f45     ED F9 FF 00 
16f49     03 04 03 F6 
16f4d     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
16f51     F0 FC 03 04 
16f55     FF ED DA DC 
16f59     E8 FD 13 27 
16f5d     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
16f61     4F 41 30 13 
16f65     FC E0 CF CC 
16f69     CA CC D6 DC 
16f6d     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
16f71     2A 36 49 54 
16f75     5A 54 47 3D 
16f79     3A 34 36 40 
16f7d     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
16f81     04 FC F7 03 
16f85     16 26 31 36 
16f89     36 37 31 24 
16f8d     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
16f91     DA CF CC CC 
16f95     BC A9 9C 90 
16f99     90 94 A7 BC 
16f9d     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
16fa1     0E 13 10 10 
16fa5     0E 13 18 20 
16fa9     1D 04 FD FF 
16fad     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
16fb1     51 53 54 57 
16fb5     57 44 31 1D 
16fb9     04 F7 F0 ED 
16fbd     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
16fc1     F3 F6 F7 00 
16fc5     04 10 14 10 
16fc9     10 03 F3 E3 
16fcd     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
16fd1     F9 0A 0E 03 
16fd5     F9 F9 FF 16 
16fd9     36 4F 64 76 
16fdd     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
16fe1     7F 7C 66 4D 
16fe5     3A 2C 24 24 
16fe9     13 00 F0 E0 
16fed     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
16ff1     D9 E0 ED F3 
16ff5     ED EA E0 D4 
16ff9     C9 B5 AF B5 
16ffd     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
17001     B3 D6 F9 1E 
17005     36 43 47 4D 
17009     4B 49 3B 2D 
1700d     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
17011     FC FD FF FF 
17015     F6 F2 F3 F3 
17019     F9 01 01 FF 
1701d     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
17021     CF C9 B7 AC 
17025     A6 A7 AC 9D 
17029     94 8C 8A 94 
1702d     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
17031     C9 D0 DA DF 
17035     E3 E3 CF BF 
17039     AF A0 9A A2 
1703d     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
17041     C3 D3 DC ED 
17045     FC 0A 18 20 
17049     1D 16 09 FC 
1704d     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
17051     D4 D4 CF CC 
17055     C9 DC F0 07 
17059     1E 36 47 43 
1705d     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
17061     13 F9 DF D3 
17065     CC D4 E2 F0 
17069     F0 F0 F2 F2 
1706d     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
17071     34 47 4F 57 
17075     5D 57 4D 41 
17079     40 40 41 43 
1707d     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
17081     31 3A 3B 3D 
17085     40 37 37 30 
17089     24 16 04 EC 
1708d     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
17091     AF B1 A2 9D 
17095     98 9A A6 B9 
17099     D3 F7 04 16 
1709d     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
170a1     04 F9 F2 F0 
170a5     F6 FC F7 F9 
170a9     F7 FC 0A 27 
170ad     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
170b1     60 57 47 36 
170b5     26 10 FF EA 
170b9     DF DC D6 DC 
170bd     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
170c1     E3 E6 ED 00 
170c5     00 F4 E0 C7 
170c9     F0 DF 5F 40 
170cd     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
170d1     1F 7F 00 DF 
170d5     7F 20 E0 BF 
170d9     3F 40 0B 10 
170dd     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
170e1     E2 DA D5 D3 
170e5     DF F9 E8 C8 
170e9     AF CA CB D5 
170ed     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
170f1     21 20 19 33 
170f5     4B 7F 7F 60 
170f9     2A 3F 40 4F 
170fd     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
17101     A0 DF 00 EA 
17105     D0 AF FF 00 
17109     80 83 DF D8 
1710d     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
17111     EF 1A 1C 08 
17115     0B 10 03 1B 
17119     3F 70 40 28 
1711d     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
17121     47 34 00 CD 
17125     EF 2A 08 C0 
17129     97 BF C0 CF 
1712d     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
17131     F8 C5 DF 17 
17135     04 07 F0 D7 
17139     FF 0F 5F 7F 
1713d     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
17141     F0 FF 6F 60 
17145     E0 FF 40 1F 
17149     3C 20 18 1A 
1714d     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
17151     00 E0 B4 C5 
17155     B0 AF EB D8 
17159     E7 FC FA 07 
1715d     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
17161     3C 43 54 40 
17165     10 0F 00 E7 
17169     13 00 FF 00 
1716d     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
17171     14 00 E8 B0 
17175     A9 B7 DB F7 
17179     16 00 E0 C0 
1717d     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
17181     29 35 20 E0 
17185     D7 FF 4F 7C 
17189     5A 60 40 00 
1718d     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
17191     37 2F 28 00 
17195     F0 D0 DF 0C 
17199     E0 C4 CF E0 
1719d     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
171a1     E0 D7 FF 3F 
171a5     38 4B 40 2D 
171a9     34 10 0F 04 
171ad     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
171b1     E0 80 81 BF 
171b5     A0 BF 37 00 
171b9     95 BF EF 28 
171bd     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
171c1     2B 20 FB 02 
171c5     E4 EB 1B 08 
171c9     FF 24 19 19 
171cd     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
171d1     F0 2F 60 A0 
171d5     FF 20 A0 B7 
171d9     DF E8 A4 AF 
171dd     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
171e1     18 02 1F 20 
171e5     00 EF 35 10 
171e9     09 E8 B4 B7 
171ed     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
171f1     40 DB 1F 30 
171f5     3F 7D 70 20 
171f9     0F 20 F7 2F 
171fd     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
17201     00 B7 FE D0 
17205     EF 0F 04 1F 
17209     20 D3 F3 E0 
1720d     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
17211     02 FF 3B 20 
17215     E0 C8 CF 17 
17219     14 10 08 11 
1721d     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
17221     C7 D8 A7 FF 
17225     E0 DF 20 E0 
17229     EF 40 E0 BF 
1722d     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
17231     1F 14 1F 7F 
17235     10 FF 7F 60 
17239     2F 60 2B 47 
1723d     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
17241     F0 E0 BC AE 
17245     C7 DF E8 C4 
17249     A0 9F F7 4F 
1724d     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
17251     FF 7F 20 12 
17255     D0 EF 30 E0 
17259     BF 3F 20 80 
1725d     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
17261     CC FF 10 C0 
17265     CF 14 F0 CC 
17269     C2 CF C0 9B 
1726d     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
17271     20 D4 CB FF 
17275     60 00 3F 60 
17279     01 00 0D 00 
1727d     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
17281     1F 20 0F 3F 
17285     20 FF 10 BB 
17289     EF 17 20 E8 
1728d     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
17291     E8 E2 E7 EC 
17295     C8 EF 1F 6F 
17299     50 E0 C7 17 
1729d     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
172a1     1F 30 E4 FF 
172a5     5F 50 00 2F 
172a9     7F 40 06 00 
172ad     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
172b1     3F 00 9F FF 
172b5     08 0A F0 B7 
172b9     1F 00 FF 6E 
172bd     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
172c1     2C E0 BF 14 
172c5     F0 F7 10 90 
172c9     9F 3F 40 10 
172cd     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
172d1     2A 2F 08 DE 
172d5     D4 DF 17 3F 
172d9     00 BF FF 00 
172dd     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
172e1     FF 10 F3 E0 
172e5     BF 00 80 BF 
172e9     18 D8 CC B4 
172ed     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
172f1     20 9F FF E0 
172f5     BF FF 30 D4 
172f9     FF 50 00 EF 
172fd     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
17301     08 F0 EB 00 
17305     C9 2F 20 9F 
17309     3F 20 C7 FA 
1730d     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
17311     B9 FF 58 00 
17315     B7 F7 33 3B 
17319     54 10 EA EF 
1731d     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
17321     20 0F 4F 08 
17325     FF 30 17 3F 
17329     20 1F 40 E0 
1732d     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
17331     00 B0 8B BF 
17335     10 00 E9 E0 
17339     C4 D7 FF 54 
1733d     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
17341     10 00 FF 2F 
17345     6F 68 20 FF 
17349     4F 60 13 3E 
1734d     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
17351     F6 1B 28 D0 
17355     B7 E4 C7 F7 
17359     D0 BF F9 E2 
1735d     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
17361     FF 24 20 27 
17365     6C 20 1D 20 
17369     10 F3 1F 28 
1736d     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
17371     EB 1F 40 E0 
17375     EF 14 D0 A0 
17379     D7 00 C0 D7 
1737d     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
17381     C0 DF 70 00 
17385     B6 DF EF 1F 
17389     00 FF 30 FF 
1738d     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
17391     FF 3F 40 D0 
17395     FF FB 2D 00 
17399     CF 0D E8 C0 
1739d     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
173a1     00 FF E0 D7 
173a5     FF 28 3F 20 
173a9     D5 FF 1F 10 
173ad     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
173b1     E0 BF 37 E0 
173b5     EF F2 F9 0F 
173b9     14 EB 13 00 
173bd     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
173c1     EF 40 00 A0 
173c5     BF DA C2 DF 
173c9     0F 10 FF 37 
173cd     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
173d1     35 48 10 DF 
173d5     F7 FC E8 EF 
173d9     2F 20 E8 C0 
173dd     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
173e1     F7 E8 B8 D7 
173e5     D0 C0 CF 13 
173e9     00 D1 FF F0 
173ed     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
173f1     30 04 FF 27 
173f5     2F 04 0F 48 
173f9     25 40 00 B3 
173fd     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
17401     1F 30 00 9F 
17405     1F 20 F8 FB 
17409     0B E0 B7 D7 
1740d     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
17411     20 E3 1F 00 
17415     C1 1F 74 20 
17419     F0 FF 00 1F 
1741d     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
17421     AF FF F7 08 
17425     D3 FF 00 CF 
17429     FF 1F 1C 08 
1742d     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
17431     14 00 FF 44 
17435     F0 1F 20 EF 
17439     4D 10 E2 C0 
1743d     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
17441     10 E4 C8 C0 
17445     BB CF CB DB 
17449     F7 0B 00 EF 
1744d     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
17451     1B 57 10 FF 
17455     20 1F 20 27 
17459     30 1F 30 00 
1745d     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
17461     34 E0 D7 0F 
17465     08 1B 10 17 
17469     20 3F 40 F0 
1746d     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
17471     C7 FF 08 00 
17475     FF 30 00 E9 
17479     D4 FF 40 1B 
1747d     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
17481     DF 3F 00 08 
17485     E8 EF E8 E7 
17489     08 D0 CF E2 
1748d     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
17491     10 D0 C2 A8 
17495     AF F7 0B 10 
17499     E0 B0 AF 1F 
1749d     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
174a1     34 00 FF 3F 
174a5     28 24 00 FF 
174a9     5F 40 DF F4 
174ad     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
174b1     10 C8 DF 0F 
174b5     00 ED F0 FF 
174b9     00 FF E0 DF 
174bd     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
174c1     2F 44 20 CB 
174c5     FF 14 1F 50 
174c9     00 DF F4 FF 
174cd     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
174d1     34 E0 CF F4 
174d5     DC FF 00 EB 
174d9     12 0B F0 BF 
174dd     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
174e1     B7 FF 00 C7 
174e5     FF F0 DF 02 
174e9     F8 FB 02 F7 
174ed     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
174f1     E7 0F 20 D0 
174f5     DF 38 C0 9F 
174f9     0F 00 B7 C8 
174fd     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
17501     00 C1 EE E5 
17505     0E 05 10 E8 
17509     E8 E7 3F 40 
1750d     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
17511     20 F0 FF 1E 
17515     F0 BF FF 38 
17519     00 EF 20 08 
1751d     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
17521     08 F7 3F 30 
17525     F7 37 38 2F 
17529     3C 28 08 13 
1752d     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
17531     1F 20 F0 F7 
17535     04 F0 EB FD 
17539     04 D0 D7 DB 
1753d     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
17541     00 D7 2A E8 
17545     DF 1F 20 FF 
17549     00 DD C0 AF 
1754d     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
17551     D0 D7 FF 29 
17555     14 2F 64 00 
17559     BF 1F 61 40 
1755d     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
17561     ED 0F 26 20 
17565     F7 1F 40 08 
17569     DF 0F 2C 02 
1756d     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
17571     D1 EF F7 2A 
17575     00 FF 10 0F 
17579     20 E8 EF ED 
1757d     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
17581     30 00 CF 35 
17585     04 F9 FF 03 
17589     27 E0 BF 17 
1758d     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
17591     E8 FF 14 00 
17595     ED FF 2C 00 
17599     E0 EF 13 0C 
1759d     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
175a1     F7 E0 EF F0 
175a5     EF C4 DF D0 
175a9     BF C8 D7 F4 
175ad     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
175b1     27 30 18 F8 
175b5     FF 2F 40 08 
175b9     1B 08 CF FF 
175bd     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
175c1     F7 F0 FF 1B 
175c5     2C 00 EF E0 
175c9     D7 0C EA E4 
175cd     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
175d1     D0 AB FF 18 
175d5     0F 00 FF FB 
175d9     11 F0 FF 00 
175dd     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
175e1     E8 D5 E7 F8 
175e5     B0 D7 F0 CF 
175e9     0F 07 2B 10 
175ed     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
175f1     08 E8 1F 60 
175f5     20 FE 02 E8 
175f9     D1 F7 0C E0 
175fd     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
17601     EB E1 FB 00 
17605     C0 DF 08 D0 
17609     EF 08 F3 0D 
1760d     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
17611     EB 0F 08 E0 
17615     DD EF F3 0F 
17619     00 CD DF E3 
1761d     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
17621     1F 20 00 04 
17625     E8 17 30 18 
17629     00 BF F7 FD 
1762d     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
17631     17 2A 10 E8 
17635     F7 10 E8 FF 
17639     17 00 CA DF 
1763d     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
17641     1D 10 0F 2A 
17645     20 1B 2D 30 
17649     22 22 24 04 
1764d     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
17651     EC E4 DF DD 
17655     FF 10 FF 00 
17659     E1 FF 10 F1 
1765d     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
17661     10 07 10 0A 
17665     FD 17 10 F4 
17669     D9 FF 00 FF 
1766d     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
17671     FB 20 E8 E7 
17675     1F 20 13 27 
17679     28 0C 1F 4A 
1767d     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
17681     1F 00 FF 20 
17685     FE F8 FF 20 
17689     F0 DF 0F 2B 
1768d     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
17691     FB 00 F5 1F 
17695     10 DF 17 00 
17699     E7 FE F3 0F 
1769d     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
176a1     05 0D 0C F4 
176a5     E7 FF 00 F7 
176a9     FC F5 F2 EA 
176ad     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
176b1     14 17 33 28 
176b5     03 2F 20 1F 
176b9     2E 20 08 00 
176bd     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
176c1     00 17 12 1E 
176c5     E8 DB 0F 1F 
176c9     10 EF 0B 00 
176cd     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
176d1     1F 20 F0 DF 
176d5     17 10 F0 D3 
176d9     FF 07 04 E1 
176dd     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
176e1     DF FF EC FF 
176e5     20 00 F8 D7 
176e9     FF 03 17 04 
176ed     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
176f1     04 0B 00 FB 
176f5     F0 FB E0 EF 
176f9     08 00 F4 F3 
176fd     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
17701     F7 16 00 EB 
17705     F0 E3 EB FF 
17709     F0 C8 DB EF 
1770d     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
17711     20 E4 DC BB 
17715     DF FA E9 E7 
17719     FB 00 E0 EB 
1771d     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
17721     08 0F 30 00 
17725     F8 E9 FE 0F 
17729     08 DD FB E8 
1772d     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
17731     CF EF F0 C4 
17735     CF ED FB 06 
17739     E0 DF F3 1F 
1773d     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
17741     03 F8 F7 00 
17745     F8 FB 0F 08 
17749     F3 F2 FF 16 
1774d     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
17751     E8 EB F5 FF 
17755     16 08 F8 E4 
17759     FD E8 DB FF 
1775d     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
17761     E3 F0 E0 D0 
17765     F7 14 E8 F7 
17769     00 EF 11 04 
1776d     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
17771     12 00 F2 FD 
17775     0B 00 E8 D7 
17779     FF 10 F3 FF 
1777d     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
17781     00 FB 12 00 
17785     FF 14 E8 FF 
17789     08 FF 12 00 
1778d     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
17791     22 1B 28 1D 
17795     12 0B 04 05 
17799     0E 00 06 07 
1779d     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
177a1     EF 1C 00 F0 
177a5     D7 FF 10 F5 
177a9     FF 1A 16 04 
177ad     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
177b1     27 28 F0 F7 
177b5     2F 20 15 22 
177b9     10 00 F5 F7 
177bd     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
177c1     D7 F7 14 E8 
177c5     DF FF 08 E8 
177c9     EF 14 E8 E7 
177cd     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
177d1     15 00 EF FF 
177d5     17 12 12 1B 
177d9     20 F4 17 14 
177dd     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
177e1     2F 28 00 03 
177e5     0D 13 21 08 
177e9     FB 0E 13 18 
177ed     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
177f1     1E 18 02 07 
177f5     14 0B 0A 0B 
177f9     27 20 00 06 
177fd     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
17801     00 F4 FF 20 
17805     F0 FF 10 F7 
17809     12 F0 DF 08 
1780d     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
17811     0F 24 00 F3 
17815     FF 07 10 00 
17819     F3 02 FF 04 
1781d     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
17821     FD 0A F0 E7 
17825     17 00 EF F4 
17829     D9 FF 00 E8 
1782d     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
17831     D3 FF F0 D7 
17835     FF 08 F8 DA 
17839     EF 07 1E 00 
1783d     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
17841     FB 17 10 13 
17845     10 07 08 0E 
17849     17 08 E8 E7 
1784d     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
17851     00 F3 E8 DB 
17855     FF E4 FF 18 
17859     E8 DE DC E9 
1785d     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
17861     FF F0 DF 17 
17865     00 F8 FB 1F 
17869     10 F0 FB 00 
1786d     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
17871     F8 EB F0 DE 
17875     ED EC EA E8 
17879     EF EB F7 18 
1787d     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
17881     13 00 FB 10 
17885     F6 F9 FF 08 
17889     E0 D3 FF 00 
1788d     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
17891     14 E0 EF 0A 
17895     F5 FF 04 E0 
17899     F7 0D 07 25 
1789d     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
178a1     E7 FB 0E 0C 
178a5     0F 22 00 F7 
178a9     08 02 05 08 
178ad     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
178b1     F7 0E F9 07 
178b5     08 FC F8 0B 
178b9     00 F3 0D 0C 
178bd     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
178c1     FC F0 D7 EB 
178c5     F7 0B F4 EF 
178c9     FE 00 EC F3 
178cd     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
178d1     02 FF F0 DB 
178d5     FF 00 F8 FB 
178d9     04 F5 0F 04 
178dd     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
178e1     18 00 E8 EF 
178e5     0A 00 03 F8 
178e9     EF 0F 24 00 
178ed     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
178f1     20 08 FF 0A 
178f5     F8 EB FF 20 
178f9     00 EF 10 EC 
178fd     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
17901     E8 FF 18 02 
17905     F4 F5 FB 12 
17909     04 F8 F0 EF 
1790d     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
17911     20 00 EF 1F 
17915     10 FB 00 FF 
17919     10 00 FF 18 
1791d     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
17921     FF 09 06 0F 
17925     20 01 0F 00 
17929     0F 04 F2 ED 
1792d     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
17931     19 00 D7 FF 
17935     17 1A 10 F0 
17939     D7 1F 24 00 
1793d     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
17941     04 0F 08 FD 
17945     0B 10 02 1B 
17949     10 0F 1C 00 
1794d     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
17951     13 10 00 0B 
17955     10 ED FF 0B 
17959     15 00 EB FC 
1795d     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
17961     00 FD 00 E5 
17965     FF 00 E4 FF 
17969     10 F6 F6 FF 
1796d     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
17971     04 0C 04 FB 
17975     0C FB 0F 14 
17979     10 F4 F7 08 
1797d     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
17981     FF 0A E8 F5 
17985     F8 F7 F0 FF 
17989     00 F7 04 F7 
1798d     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
17991     FB 02 0B 11 
17995     0C 06 0B 14 
17999     F8 FF 10 00 
1799d     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
179a1     FF 03 0D 04 
179a5     F6 FF FA FD 
179a9     00 E5 EF FF 
179ad     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
179b1     FD F0 EF FA 
179b5     01 07 16 00 
179b9     F3 FE FF 04 
179bd     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
179c1     EF FF 00 F7 
179c5     13 18 08 0D 
179c9     08 F5 07 10 
179cd     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
179d1     F0 FF 0C FA 
179d5     F6 FF 0C 04 
179d9     07 21 10 0A 
179dd     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
179e1     0C F8 FF 08 
179e5     FF 0C F0 F7 
179e9     FC FB 06 F4 
179ed     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
179f1     FD E8 F7 00 
179f5     E5 E9 F7 F0 
179f9     E7 0A 00 F0 
179fd     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
17a01     FF 2B 10 03 
17a05     17 08 FF 0D 
17a09     10 04 EE FF 
17a0d     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
17a11     09 06 00 F3 
17a15     FB 0F 10 E9 
17a19     F7 F0 ED F5 
17a1d     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
17a21     00 FC F0 F7 
17a25     15 16 08 EC 
17a29     FF 04 FE FF 
17a2d     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
17a31     F5 F2 F3 F8 
17a35     FD 04 EB EB 
17a39     FB 04 FC E8 
17a3d     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
17a41     F0 FF 00 F7 
17a45     FA 06 02 07 
17a49     02 06 0E 0E 
17a4d     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
17a51     0A 08 FC FA 
17a55     FF 00 E0 F7 
17a59     08 F6 FB F4 
17a5d     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
17a61     F8 FA FB 07 
17a65     04 EA FD 08 
17a69     02 08 0D 08 
17a6d     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
17a71     08 FF 04 0F 
17a75     18 00 0C F1 
17a79     FB F4 FF 0A 
17a7d     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
17a81     F0 EF F0 D4 
17a85     E7 F2 F0 EF 
17a89     F4 ED F9 F8 
17a8d     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
17a91     02 FF 04 06 
17a95     02 FF 1A 10 
17a99     09 1A 12 04 
17a9d     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
17aa1     1F 00 FF 08 
17aa5     01 0F 04 F9 
17aa9     05 00 FB F2 
17aad     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
17ab1     EA FF 10 04 
17ab5     EC FF 18 15 
17ab9     1A 16 10 09 
17abd     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
17ac1     FF 14 00 EE 
17ac5     E7 FB FE F4 
17ac9     E5 FF 06 06 
17acd     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
17ad1     08 F8 0F 10 
17ad5     F0 FF 00 FF 
17ad9     1E 10 FF 13 
17add     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
17ae1     1A 00 13 10 
17ae5     0C 02 02 00 
17ae9     F9 0A F0 EF 
17aed     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
17af1     FF 00 E4 F3 
17af5     00 F7 07 13 
17af9     14 00 05 02 
17afd     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
17b01     0D 11 0D 04 
17b05     FF 08 F8 FF 
17b09     0A 00 FB F8 
17b0d     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
17b11     0F 04 FB 06 
17b15     00 F3 FF 0C 
17b19     00 09 F2 EF 
17b1d     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
17b21     14 00 02 00 
17b25     FD 07 12 10 
17b29     0A 0C 04 0F 
17b2d     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
17b31     00 FF 0F 10 
17b35     0C FC FF 00 
17b39     F9 FF 08 00 
17b3d     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
17b41     DD EF F0 EF 
17b45     08 F0 F7 F0 
17b49     EF 06 09 05 
17b4d     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
17b51     F8 F5 01 FF 
17b55     14 00 ED ED 
17b59     EE F5 F4 EA 
17b5d     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
17b61     F0 EB FC EF 
17b65     F8 E0 FF 10 
17b69     F0 ED 0B 1C 
17b6d     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
17b71     13 18 FD 0A 
17b75     F8 0B 10 02 
17b79     F4 F6 FB FA 
17b7d     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
17b81     04 FA FF 04 
17b85     F8 EF 0D 10 
17b89     04 F0 0F 08 
17b8d     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
17b91     00 FF F0 F7 
17b95     F4 EF 17 0C 
17b99     07 16 00 FB 
17b9d     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
17ba1     0B 18 F0 EF 
17ba5     ED EF FF F2 
17ba9     F1 F6 F0 EA 
17bad     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
17bb1     F1 FE E4 EF 
17bb5     10 00 F3 FF 
17bb9     08 FA FD FF 
17bbd     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
17bc1     00 F9 F0 FF 
17bc5     18 00 FF 0C 
17bc9     E8 F5 F8 F7 
17bcd     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
17bd1     0E F0 F7 12 
17bd5     02 03 0F 18 
17bd9     FD 23 10 05 
17bdd     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
17be1     F2 FD 14 00 
17be5     F3 FD F7 F8 
17be9     EB FF F8 FB 
17bed     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
17bf1     FB 14 04 0F 
17bf5     10 F9 17 20 
17bf9     10 12 09 27 
17bfd     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
17c01     F7 05 15 08 
17c05     E9 F2 F7 01 
17c09     F0 ED FF 04 
17c0d     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
17c11     E7 FF 10 F0 
17c15     F5 03 F8 E9 
17c19     FF 00 ED F3 
17c1d     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
17c21     EF FF 10 00 
17c25     07 14 00 FB 
17c29     00 07 10 00 
17c2d     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
17c31     14 1A 00 FF 
17c35     0D 10 F8 FE 
17c39     FE FF 08 00 
17c3d     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
17c41     F9 0F 14 04 
17c45     00 FF 26 08 
17c49     FF 2D 20 FC 
17c4d     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
17c51     F8 F7 F0 EB 
17c55     00 EA F9 E0 
17c59     D7 F3 F8 F0 
17c5d     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
17c61     FF 16 10 0D 
17c65     14 0B 0A 01 
17c69     11 10 0D 08 
17c6d     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
17c71     F9 FB 00 ED 
17c75     EF F3 07 08 
17c79     02 07 08 F3 
17c7d     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
17c81     04 FF 10 F0 
17c85     F5 06 0A F8 
17c89     EF 0D 08 FB 
17c8d     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
17c91     03 08 F8 FF 
17c95     04 F7 0B 14 
17c99     08 EA F7 1C 
17c9d     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
17ca1     F8 F6 F7 FC 
17ca5     F2 F5 F8 E0 
17ca9     DF EA E4 E0 
17cad     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
17cb1     FD 08 F0 FB 
17cb5     00 03 0F 16 
17cb9     08 07 1B 20 
17cbd     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
17cc1     12 04 0D 0C 
17cc5     E8 EF 04 EA 
17cc9     EF FE F8 EF 
17ccd     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
17cd1     04 F7 0F 00 
17cd5     FD 05 0D 13 
17cd9     06 00 F1 FF 
17cdd     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
17ce1     EF FF FC F3 
17ce5     FE FC F6 FF 
17ce9     00 07 00 F9 
17ced     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
17cf1     09 04 EE FF 
17cf5     00 FB 07 03 
17cf9     00 F6 FD FA 
17cfd     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
17d01     00 E9 F5 07 
17d05     00 EF 0F 00 
17d09     FA 01 FD FF 
17d0d     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
17d11     0D 0D 08 00 
17d15     F7 0B 10 F0 
17d19     E7 FC F1 FF 
17d1d     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
17d21     01 09 01 0F 
17d25     18 07 1D 18 
17d29     08 0F 1A 14 
17d2d     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
17d31     0C 00 F4 0F 
17d35     04 EB FD E4 
17d39     DF F7 F8 EA 
17d3d     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
17d41     FA FF F8 FF 
17d45     0C 04 08 F0 
17d49     FF 0C 00 F6 
17d4d     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
17d51     FC F6 F6 F7 
17d55     05 0E 00 FB 
17d59     12 10 0C 02 
17d5d     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
17d61     08 04 00 F2 
17d65     FF 08 02 00 
17d69     FF 18 00 FE 
17d6d     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
17d71     05 00 F0 F3 
17d75     F6 F7 07 12 
17d79     00 E5 FF 10 
17d7d     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
17d81     01 FA FF 00 
17d85     FB 09 04 04 
17d89     F8 EA EB EF 
17d8d     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
17d91     08 F2 FF 16 
17d95     0E 0C 02 0B 
17d99     0C 08 06 08 
17d9d     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
17da1     F9 F4 F1 F1 
17da5     FF EC E4 E2 
17da9     EB F2 E9 EC 
17dad     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
17db1     F4 FF 1B 10 
17db5     00 0F 18 01 
17db9     0F 04 05 12 
17dbd     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
17dc1     00 EC F3 F8 
17dc5     EB F7 08 00 
17dc9     F7 F2 F3 02 
17dcd     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
17dd1     FF 06 00 FD 
17dd5     00 FF 12 08 
17dd9     F9 15 0A FA 
17ddd     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
17de1     FF 08 E9 F3 
17de5     FA F7 F6 F2 
17de9     F2 FD 0C F0 
17ded     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
17df1     F6 FB FD 0B 
17df5     08 FD F9 F7 
17df9     02 F0 F7 04 
17dfd     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
17e01     FF 02 09 08 
17e05     0D 10 F0 FF 
17e09     14 02 0F 10 
17e0d     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
17e11     FF 00 F1 F6 
17e15     EF FF 00 E8 
17e19     F7 04 ED FF 
17e1d     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
17e21     14 02 02 09 
17e25     0C 08 0F 10 
17e29     F4 F1 F7 0F 
17e2d     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
17e31     F6 F6 FF 00 
17e35     F7 09 00 F9 
17e39     FD 02 00 F6 
17e3d     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
17e41     00 FF 06 00 
17e45     FF 11 00 FF 
17e49     0D 00 FF 15 
17e4d     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
17e51     FD FA FF 00 
17e55     F9 FF FC 05 
17e59     08 0A 00 FF 
17e5d     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
17e61     0C 09 09 0C 
17e65     04 FF 04 FB 
17e69     08 00 F8 F2 
17e6d     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
17e71     FD F0 E9 EB 
17e75     FF 00 FB 00 
17e79     FF 0E 00 FF 
17e7d     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
17e81     08 F8 FF 00 
17e85     EA EF 05 00 
17e89     EF FB F6 FB 
17e8d     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
17e91     08 07 02 FE 
17e95     05 04 00 FB 
17e99     FC EC F5 F5 
17e9d     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
17ea1     F7 FF 08 FA 
17ea5     F1 0B 0A 00 
17ea9     FC F1 FF 00 
17ead     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
17eb1     F7 05 05 0B 
17eb5     00 FF 16 08 
17eb9     01 06 00 F8 
17ebd     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
17ec1     00 F7 0B 08 
17ec5     05 09 12 08 
17ec9     09 0C 05 04 
17ecd     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
17ed1     05 09 00 F5 
17ed5     FB 05 F4 F5 
17ed9     04 00 F4 F4 
17edd     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
17ee0                 | 	alignl
17ee0                 | _hng030rm_spin2_dat_
17ee0     00 00 00 00 
17ee4     00 00 00 00 
17ee8     00 00 00 00 
17eec     00 00 00 00 
17ef0     00 00 00    | vga_font       file "vgafont.def"
17ef3     7E 81 A5 81 
17ef7     81 BD 99 81 
17efb     81 7E 00 00 
17eff     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
17f03     7E FF DB FF 
17f07     FF C3 E7 FF 
17f0b     FF 7E 00 00 
17f0f     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
17f13     00 36 7F 7F 
17f17     7F 7F 3E 1C 
17f1b     08 00 00 00 
17f1f     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
17f23     00 08 1C 3E 
17f27     7F 3E 1C 08 
17f2b     00 00 00 00 
17f2f     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
17f33     18 3C 3C E7 
17f37     E7 E7 18 18 
17f3b     3C 00 00 00 
17f3f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17f43     18 3C 7E FF 
17f47     FF 7E 18 18 
17f4b     3C 00 00 00 
17f4f     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17f53     00 00 00 18 
17f57     3C 3C 18 00 
17f5b     00 00 00 00 
17f5f     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
17f63     FF FF FF E7 
17f67     C3 C3 E7 FF 
17f6b     FF FF FF FF 
17f6f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17f73     00 00 3C 66 
17f77     42 42 66 3C 
17f7b     00 00 00 00 
17f7f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
17f83     FF FF C3 99 
17f87     BD BD 99 C3 
17f8b     FF FF FF FF 
17f8f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17f93     78 70 58 4C 
17f97     1E 33 33 33 
17f9b     33 1E 00 00 
17f9f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
17fa3     3C 66 66 66 
17fa7     66 3C 18 7E 
17fab     18 18 00 00 
17faf     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
17fb3     FC CC FC 0C 
17fb7     0C 0C 0C 0E 
17fbb     0F 07 00 00 
17fbf     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
17fc3     FE C6 FE C6 
17fc7     C6 C6 C6 E6 
17fcb     E7 67 03 00 
17fcf     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
17fd3     18 18 DB 3C 
17fd7     E7 3C DB 18 
17fdb     18 00 00 00 
17fdf     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
17fe3     03 07 0F 1F 
17fe7     7F 1F 0F 07 
17feb     03 01 00 00 
17fef     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
17ff3     60 70 78 7C 
17ff7     7F 7C 78 70 
17ffb     60 40 00 00 
17fff     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
18003     18 3C 7E 18 
18007     18 18 7E 3C 
1800b     18 00 00 00 
1800f     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
18013     66 66 66 66 
18017     66 66 66    | 	byte	$66[7]
1801a     00 66 66 00 
1801e     00 00 00 00 
18022     00 FE DB DB 
18026     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1802a     D8 D8 D8 00 
1802e     00 00 00 3E 
18032     63 06 1C 36 
18036     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1803a     30 63 3E 00 
1803e     00 00 00 00 
18042     00 00 00 00 
18046     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1804a     7F 7F 7F 00 
1804e     00 00 00 00 
18052     00 18 3C 7E 
18056     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1805a     3C 18 7E 00 
1805e     00 00 00 00 
18062     00 18 3C 7E 
18066     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1806a     18 18 18 00 
1806e     00 00 00 00 
18072     00 18 18 18 
18076     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1807a     7E 3C 18 00 
1807e     00 00 00 00 
18082     00 00 00 18 
18086     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1808a     00 00 00 00 
1808e     00 00 00 00 
18092     00 00 00    | 	byte	$00[11]
18095     0C 06 7F 06 
18099     0C 00 00 00 
1809d     00 00 00 00 
180a1     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180a5     00 03 03 03 
180a9     7F 00 00 00 
180ad     00 00 00 00 
180b1     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180b5     14 36 7F 36 
180b9     14 00 00 00 
180bd     00 00 00 00 
180c1     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
180c5     1C 1C 3E 3E 
180c9     7F 7F 00 00 
180cd     00 00 00 00 
180d1     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
180d5     7F 3E 3E 1C 
180d9     1C 08 00 00 
180dd     00 00 00 00 
180e1     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180e5     00 00 00 00 
180e9     00 00 00 00 
180ed     00 00 00 00 
180f1     00 00       | 	byte	$00[14]
180f3     18 3C 3C 3C 
180f7     18 18 18 00 
180fb     18 18 00 00 
180ff     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
18103     66 24 00 00 
18107     00 00 00 00 
1810b     00 00 00 00 
1810f     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18113     00 36 36 7F 
18117     36 36 36 7F 
1811b     36 36 00 00 
1811f     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
18123     3E 63 43 03 
18127     3E 60 60 61 
1812b     63 3E 18 18 
1812f     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
18133     00 00 43 63 
18137     30 18 0C 06 
1813b     63 61 00 00 
1813f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
18143     1C 36 36 1C 
18147     6E 3B 33 33 
1814b     33 6E 00 00 
1814f     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
18153     0C 0C 0C 06 
18157     00 00 00 00 
1815b     00 00 00 00 
1815f     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18163     30 18 0C 0C 
18167     0C 0C 0C 0C 
1816b     18 30 00 00 
1816f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
18173     0C 18 30 30 
18177     30 30 30 30 
1817b     18 0C 00 00 
1817f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
18183     00 00 00 66 
18187     3C FF 3C 66 
1818b     00 00 00 00 
1818f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
18193     00 00 00 18 
18197     18 7E 18 18 
1819b     00 00 00 00 
1819f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
181a3     00 00 00 00 
181a7     00 00 00 00 | 	byte	$00[8]
181ab     18 18 18 0C 
181af     00 00 00 00 
181b3     00 00 00 00 
181b7     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
181bb     00 00 00 00 
181bf     00 00 00 00 
181c3     00 00 00 00 
181c7     00 00 00 00 | 	byte	$00[16]
181cb     18 18 00 00 
181cf     00 00 00 00 
181d3     00 00 40 60 
181d7     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
181db     03 01 00 00 
181df     00 00 00 00 
181e3     1C 36 63 63 
181e7     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
181eb     36 1C 00 00 
181ef     00 00 00 00 
181f3     18 1C 1E 18 
181f7     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
181fb     18 7E 00 00 
181ff     00 00 00 00 
18203     3E 63 60 30 
18207     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1820b     63 7F 00 00 
1820f     00 00 00 00 
18213     3E 63 60 60 
18217     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1821b     63 3E 00 00 
1821f     00 00 00 00 
18223     30 38 3C 36 
18227     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1822b     30 78 00 00 
1822f     00 00 00 00 
18233     7F 03 03 03 
18237     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1823b     63 3E 00 00 
1823f     00 00 00 00 
18243     1C 06 03 03 
18247     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1824b     63 3E 00 00 
1824f     00 00 00 00 
18253     7F 63 60 60 
18257     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1825b     0C 0C 00 00 
1825f     00 00 00 00 
18263     3E 63 63 63 
18267     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1826b     63 3E 00 00 
1826f     00 00 00 00 
18273     3E 63 63 63 
18277     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1827b     30 1E 00 00 
1827f     00 00 00 00 
18283     00 00 00 18 
18287     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1828b     18 18 00 00 
1828f     00 00 00 00 
18293     00 00 00 18 
18297     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1829b     18 18 0C 00 
1829f     00 00 00 00 
182a3     00 60 30 18 
182a7     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
182ab     30 60 00 00 
182af     00 00 00 00 
182b3     00 00 00 7E 
182b7     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
182bb     00 00 00 00 
182bf     00 00 00 00 
182c3     00          | 	byte	$00[9]
182c4     06 0C 18 30 
182c8     60 30 18 0C 
182cc     06 00 00 00 
182d0     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
182d4     63 63 30 18 
182d8     18 18 00 18 
182dc     18 00 00 00 
182e0     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
182e4     3E 63 63 7B 
182e8     7B 7B 3B 03 
182ec     3E 00 00 00 
182f0     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
182f4     1C 36 63 63 
182f8     7F 63 63 63 
182fc     63 00 00 00 
18300     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
18304     66 66 66 3E 
18308     66 66 66 66 
1830c     3F 00 00 00 
18310     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
18314     66 43 03 03 
18318     03 03 43 66 
1831c     3C 00 00 00 
18320     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
18324     36 66 66 66 
18328     66 66 66 36 
1832c     1F 00 00 00 
18330     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
18334     66 46 16 1E 
18338     16 06 46 66 
1833c     7F 00 00 00 
18340     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
18344     66 46 16 1E 
18348     16 06 06 06 
1834c     0F 00 00 00 
18350     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
18354     66 43 03 03 
18358     7B 63 63 66 
1835c     5C 00 00 00 
18360     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
18364     63 63 63 7F 
18368     63 63 63 63 
1836c     63 00 00 00 
18370     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
18374     18 18 18 18 
18378     18 18 18 18 | 	byte	$18[8]
1837c     3C 00 00 00 
18380     00 00 00 78 
18384     30 30 30 30 
18388     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1838c     1E 00 00 00 
18390     00 00 00 67 
18394     66 66 36 1E 
18398     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1839c     67 00 00 00 
183a0     00 00 00 0F 
183a4     06 06 06 06 
183a8     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
183ac     7F 00 00 00 
183b0     00 00 00 63 
183b4     77 7F 7F 6B 
183b8     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
183bc     63 00 00 00 
183c0     00 00 00 63 
183c4     67 6F 7F 7B 
183c8     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
183cc     63 00 00 00 
183d0     00 00 00 3E 
183d4     63 63 63 63 
183d8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
183dc     3E 00 00 00 
183e0     00 00 00 3F 
183e4     66 66 66 3E 
183e8     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
183ec     0F 00 00 00 
183f0     00 00 00 3E 
183f4     63 63 63 63 
183f8     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
183fc     3E 30 70 00 
18400     00 00 00 3F 
18404     66 66 66 3E 
18408     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1840c     67 00 00 00 
18410     00 00 00 3E 
18414     63 63 06 1C 
18418     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1841c     3E 00 00 00 
18420     00 00 00 7E 
18424     7E 5A 18 18 
18428     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1842c     3C 00 00 00 
18430     00 00 00 63 
18434     63 63 63 63 
18438     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1843c     3E 00 00 00 
18440     00 00 00 63 
18444     63 63 63 63 
18448     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1844c     08 00 00 00 
18450     00 00 00 63 
18454     63 63 63 6B 
18458     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1845c     36 00 00 00 
18460     00 00 00 63 
18464     63 36 3E 1C 
18468     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1846c     63 00 00 00 
18470     00 00 00 66 
18474     66 66 66 3C 
18478     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1847c     3C 00 00 00 
18480     00 00 00 7F 
18484     63 61 30 18 
18488     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1848c     7F 00 00 00 
18490     00 00 00 3C 
18494     0C 0C 0C 0C 
18498     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1849c     3C 00 00 00 
184a0     00 00 00 00 
184a4     01 03 07 0E 
184a8     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
184ac     40 00 00 00 
184b0     00 00 00 3C 
184b4     30 30 30 30 
184b8     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
184bc     3C 00 00 00 
184c0     1C 36 00 00 
184c4     00 00 00 00 
184c8     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
184cc     00 00 00 00 
184d0     00 00 00 00 
184d4     00 00 00 00 
184d8     00 00 00 00 
184dc     00          | 	byte	$00[17]
184dd     FF 00 00 0C 
184e1     18 00 00 00 
184e5     00 00 00 00 
184e9     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
184ed     00 00 00 00 
184f1     00 00 00 00 
184f5     00          | 	byte	$00[9]
184f6     1E 30 3E 33 
184fa     33 33 6E 00 
184fe     00 00 00 00 
18502     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
18506     1E 36 66 66 
1850a     66 66 3E 00 
1850e     00 00 00 00 
18512     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18516     3E 63 03 03 
1851a     03 63 3E 00 
1851e     00 00 00 00 
18522     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
18526     3C 36 33 33 
1852a     33 33 6E 00 
1852e     00 00 00 00 
18532     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18536     3E 63 7F 03 
1853a     03 63 3E 00 
1853e     00 00 00 00 
18542     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
18546     0C 1E 0C 0C 
1854a     0C 0C 1E 00 
1854e     00 00 00 00 
18552     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18556     6E 33 33 33 
1855a     33 33 3E 30 
1855e     33 1E 00 00 
18562     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
18566     36 6E 66 66 
1856a     66 66 67 00 
1856e     00 00 00 00 
18572     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
18576     1C 18 18 18 
1857a     18 18 3C 00 
1857e     00 00 00 00 
18582     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
18586     70 60 60 60 
1858a     60 60 60 66 
1858e     66 3C 00 00 
18592     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
18596     66 36 1E 1E 
1859a     36 66 67 00 
1859e     00 00 00 00 
185a2     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
185a6     18 18 18 18 
185aa     18 18       | 	byte	$18[6]
185ac     3C 00 00 00 
185b0     00 00 00 00 
185b4     00 00 37 7F 
185b8     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
185bc     63 00 00 00 
185c0     00 00 00 00 
185c4     00 00 3B 66 
185c8     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
185cc     66 00 00 00 
185d0     00 00 00 00 
185d4     00 00 3E 63 
185d8     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
185dc     3E 00 00 00 
185e0     00 00 00 00 
185e4     00 00 3B 66 
185e8     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
185ec     3E 06 06 0F 
185f0     00 00 00 00 
185f4     00 00 6E 33 
185f8     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
185fc     3E 30 30 78 
18600     00 00 00 00 
18604     00 00 3B 6E 
18608     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1860c     0F 00 00 00 
18610     00 00 00 00 
18614     00 00 3E 63 
18618     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1861c     3E 00 00 00 
18620     00 00 00 08 
18624     0C 0C 3F 0C 
18628     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1862c     38 00 00 00 
18630     00 00 00 00 
18634     00 00 33 33 
18638     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1863c     6E 00 00 00 
18640     00 00 00 00 
18644     00 00 63 63 
18648     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1864c     1C 00 00 00 
18650     00 00 00 00 
18654     00 00 63 63 
18658     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1865c     36 00 00 00 
18660     00 00 00 00 
18664     00 00 63 36 
18668     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1866c     63 00 00 00 
18670     00 00 00 00 
18674     00 00 63 63 
18678     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1867c     7E 60 30 1F 
18680     00 00 00 00 
18684     00 00 7F 33 
18688     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1868c     7F 00 00 00 
18690     00 00 00 70 
18694     18 18 18 0E 
18698     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1869c     70 00 00 00 
186a0     00 00 00 18 
186a4     18 18 18 18 
186a8     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
186ac     18 00 00 00 
186b0     00 00 00 0E 
186b4     18 18 18 70 
186b8     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
186bc     0E 00 00 00 
186c0     6E 3B 00 00 
186c4     00 00 00 00 
186c8     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
186cc     00 00 00 00 
186d0     00 00 00 00 
186d4     00 00       | 	byte	$00[10]
186d6     08 1C 36 63 
186da     63 63 7F 00 
186de     00 00 00 00 
186e2     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
186e6     03 03 03 03 
186ea     43 66 3C 18 
186ee     30 1E 00 00 
186f2     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
186f6     33 33 33 33 
186fa     33 33       | 	byte	$33[6]
186fc     6E 00 00 00 
18700     00 00 60 30 
18704     18 00 3E 63 
18708     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1870c     3E 00 00 00 
18710     00 00 08 1C 
18714     36 00 1E 30 
18718     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1871c     6E 00 00 00 
18720     00 00 00 00 
18724     33 00 1E 30 
18728     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1872c     6E 00 00 00 
18730     00 00 1C 36 
18734     1C 00 33 33 
18738     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1873c     6E 00 00 00 
18740     00 00 60 30 
18744     18 00 3E 63 
18748     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1874c     3E 00 00 00 
18750     00 00 00 00 
18754     00 00 3E 63 
18758     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1875c     3E 18 30 1E 
18760     00 00 00 1C 
18764     58 78 38 18 
18768     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1876c     3C 00 00 00 
18770     00 00 00 00 
18774     63 00 3E 63 
18778     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1877c     3E 00 00 00 
18780     66 33 00 3E 
18784     63 63 63 63 
18788     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1878c     3E 00 00 00 
18790     00 00 CC 66 
18794     33 00 3E 63 
18798     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1879c     3E 00 00 00 
187a0     00 00 18 3C 
187a4     66 00 1C 18 
187a8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
187ac     3C 00 00 00 
187b0     30 18 00 7F 
187b4     63 61 30 18 
187b8     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
187bc     7F 00 00 00 
187c0     00 63 00 08 
187c4     1C 36 63 63 
187c8     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
187cc     63 00 00 00 
187d0     30 18 00 3C 
187d4     66 43 03 03 
187d8     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
187dc     3C 00 00 00 
187e0     30 18 00 7F 
187e4     66 46 16 1E 
187e8     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
187ec     7F 00 00 00 
187f0     0C 06 00 0F 
187f4     06 06 06 06 
187f8     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
187fc     7F 00 00 00 
18800     30 18 00 1C 
18804     18 18 18 18 
18808     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1880c     3C 00 00 00 
18810     00 00 08 1C 
18814     36 00 3E 63 
18818     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1881c     3E 00 00 00 
18820     00 00 00 00 
18824     63 00 3E 63 
18828     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1882c     3E 00 00 00 
18830     00 00 00 6F 
18834     46 26 06 06 
18838     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1883c     7F 00 00 00 
18840     00 00 00 6E 
18844     4C 2C 0C 0C 
18848     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1884c     1E 00 00 00 
18850     30 18 00 3E 
18854     63 63 06 1C 
18858     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1885c     3E 00 00 00 
18860     00 00 60 30 
18864     18 00 3E 63 
18868     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1886c     3E 00 00 00 
18870     00 63 00 3E 
18874     63 63 63 63 
18878     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1887c     3E 00 00 00 
18880     00 63 00 63 
18884     63 63 63 63 
18888     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1888c     3E 00 00 00 
18890     6C 38 00 7E 
18894     7E 5A 18 18 
18898     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1889c     3C 00 00 00 
188a0     00 00 60 48 
188a4     2C 0C 3F 0C 
188a8     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
188ac     38 00 00 00 
188b0     00 00 00 0F 
188b4     26 36 1E 0E 
188b8     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
188bc     7F 00 00 00 
188c0     00 00 00 00 
188c4     00 63 36 1C 
188c8     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
188cc     00 00 00 00 
188d0     00 00       | 	byte	$00[6]
188d2     36 1C 08 00 
188d6     3E 63 03 03 
188da     03 63 3E 00 
188de     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
188e2     30 18 0C 00 
188e6     1E 30 3E 33 
188ea     33 33 6E 00 
188ee     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
188f2     60 30 18 00 
188f6     1C 18 18 18 
188fa     18 18 3C 00 
188fe     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
18902     60 30 18 00 
18906     3E 63 63 63 
1890a     63 63 3E 00 
1890e     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
18912     30 18 0C 00 
18916     33 33 33 33 
1891a     33 33 6E 00 
1891e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
18922     00 08 1C 36 
18926     63 63 7F 63 
1892a     63 63 63 18 
1892e     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
18932     00 00 00 00 
18936     1E 30 3E 33 
1893a     33 33 6E 18 
1893e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
18942     00 7F 63 61 
18946     30 18 0C 06 
1894a     43 63 7F 00 
1894e     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
18952     36 1C 08 00 
18956     7F 33 18 0C 
1895a     06 63 7F 00 
1895e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
18962     00 7F 66 46 
18966     16 1E 16 06 
1896a     46 66 7F 18 
1896e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
18972     00 00 00 00 
18976     3E 63 7F 03 
1897a     03 63 3E 18 
1897e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
18982     00 3C 66 03 
18986     1F 03 0F 03 
1898a     03 66 3C 00 
1898e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
18992     60 30 18 00 
18996     7F 33 18 0C 
1899a     06 63 7F 00 
1899e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
189a2     00 3C 66 43 
189a6     03 03 03 03 
189aa     43 66 3C 00 
189ae     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
189b2     00 00 00 00 
189b6     3E 63 06 1C 
189ba     30 63 3E 18 
189be     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
189c2     00 00 00 00 
189c6     00 00       | 	byte	$00[6]
189c8     6C 36 1B 36 
189cc     6C 00 00 00 
189d0     00 00 00 00 
189d4     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
189d8     1B 36 6C 36 
189dc     1B 00 00 00 
189e0     88 22 88 22 
189e4     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
189e8     88 22 88 22 
189ec     88 22 88 22 
189f0     AA 55 AA 55 
189f4     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
189f8     AA 55 AA 55 
189fc     AA 55 AA 55 
18a00     BB EE BB EE 
18a04     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
18a08     BB EE BB EE 
18a0c     BB EE BB EE 
18a10     18 18 18 18 
18a14     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
18a18     18 18 18 18 
18a1c     18 18 18 18 
18a20     18 18 18 18 
18a24     18 18 18    | 	byte	$18[15]
18a27     1F 18 18 18 
18a2b     18 18 18 18 
18a2f     18 30 18 00 
18a33     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
18a37     63 7F 63 63 
18a3b     63 63 00 00 
18a3f     00 1C 36 00 
18a43     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
18a47     63 7F 63 63 
18a4b     63 63 00 00 
18a4f     00 36 1C 00 
18a53     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
18a57     1E 16 06 46 
18a5b     66 7F 00 00 
18a5f     00 00 00 00 
18a63     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
18a67     1C 30 60 63 
18a6b     63 3E 18 30 
18a6f     1E 6C 6C 6C 
18a73     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
18a77     6F 6C 6C 6C 
18a7b     6C 6C 6C 6C 
18a7f     6C 6C 6C 6C 
18a83     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18a87     6C 6C 6C 6C 
18a8b     6C 6C 6C 6C 
18a8f     6C          | 	byte	$6c[9]
18a90     00 00 00 00 
18a94     00          | 	byte	$00[5]
18a95     7F 60 6F 6C 
18a99     6C 6C 6C 6C 
18a9d     6C 6C 6C 6C 
18aa1     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18aa5     6F 60 7F 00 
18aa9     00 00 00 00 
18aad     00 00 00 18 
18ab1     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
18ab5     61 30 18 0C 
18ab9     06 43 63 7F 
18abd     00 00 00 00 
18ac1     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
18ac5     00 7F 33 18 
18ac9     0C 06 63 7F 
18acd     00 00 00 00 
18ad1     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
18ad5     00 00 1F 18 
18ad9     18 18 18 18 
18add     18 18 18 18 
18ae1     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18ae5     18 18 F8 00 
18ae9     00 00 00 00 
18aed     00 00 00 18 
18af1     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18af5     18 18 FF 00 
18af9     00 00 00 00 
18afd     00 00 00 00 
18b01     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b05     00 00 FF 18 
18b09     18 18 18 18 
18b0d     18 18 18 18 
18b11     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18b15     18 18 F8 18 
18b19     18 18 18 18 
18b1d     18 18 18 00 
18b21     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
18b25     00 00 FF 00 
18b29     00 00 00 00 
18b2d     00 00 00 18 
18b31     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18b35     18 18 FF 18 
18b39     18 18 18 18 
18b3d     18 18 18 63 
18b41     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
18b45     36 63 63 7F 
18b49     63 63 63 63 
18b4d     00 00 00 00 
18b51     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
18b55     00 1E 30 3E 
18b59     33 33 33 6E 
18b5d     00 00 00 6C 
18b61     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18b65     EC 0C FC 00 
18b69     00 00 00 00 
18b6d     00 00 00 00 
18b71     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b75     FC 0C EC 6C 
18b79     6C 6C 6C 6C 
18b7d     6C 6C 6C 6C 
18b81     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18b85     EF 00 FF 00 
18b89     00 00 00 00 
18b8d     00 00 00 00 
18b91     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b95     FF 00 EF 6C 
18b99     6C 6C 6C 6C 
18b9d     6C 6C 6C 6C 
18ba1     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18ba5     EC 0C EC 6C 
18ba9     6C 6C 6C 6C 
18bad     6C 6C 6C 00 
18bb1     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18bb5     FF 00 FF 00 
18bb9     00 00 00 00 
18bbd     00 00 00 6C 
18bc1     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18bc5     EF 00 EF 6C 
18bc9     6C 6C 6C 6C 
18bcd     6C 6C 6C 00 
18bd1     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18bd5     63 3E 63 63 
18bd9     63 63 3E 63 
18bdd     00 00 00 00 
18be1     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
18be5     30 3C 36 33 
18be9     33 33 33 6E 
18bed     00 00 00 00 
18bf1     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
18bf5     66 66 6F 66 
18bf9     66 66 36 1F 
18bfd     00 00 00 36 
18c01     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
18c05     66 66 66 66 
18c09     66 66       | 	byte	$66[6]
18c0b     36 1F 00 00 
18c0f     00 00 63 00 
18c13     7F 66 46 16 
18c17     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
18c1b     66 7F 00 00 
18c1f     00 6C 38 00 
18c23     38 30 30 3C 
18c27     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
18c2b     33 6E 00 00 
18c2f     00 36 1C 00 
18c33     63 67 6F 7F 
18c37     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
18c3b     63 63 00 00 
18c3f     00 30 18 00 
18c43     3C 18 18 18 
18c47     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18c4b     18 3C 00 00 
18c4f     00 3C 66 00 
18c53     3C 18 18 18 
18c57     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18c5b     18 3C 00 00 
18c5f     00 00 00 36 
18c63     1C 08 00 3E 
18c67     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
18c6b     63 3E 00 00 
18c6f     00 18 18 18 
18c73     18 18 18 18 
18c77     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
18c7b     00 00 00 00 
18c7f     00 00 00 00 
18c83     00 00 00 00 | 	byte	$00[12]
18c87     F8 18 18 18 
18c8b     18 18 18 18 
18c8f     18 FF FF FF 
18c93     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
18c97     FF FF FF FF 
18c9b     FF FF FF FF 
18c9f     FF          | 	byte	$ff[9]
18ca0     00 00 00 00 
18ca4     00 00 00    | 	byte	$00[7]
18ca7     FF FF FF FF 
18cab     FF FF FF FF 
18caf     FF          | 	byte	$ff[9]
18cb0     00 00 00 7E 
18cb4     7E 5A 18 18 
18cb8     18 18 18 18 
18cbc     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
18cc0     1C 36 1C 63 
18cc4     63 63 63 63 
18cc8     63 63 63 63 
18ccc     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18cd0     FF FF FF FF 
18cd4     FF FF FF    | 	byte	$ff[7]
18cd7     00 00 00 00 
18cdb     00 00 00 00 
18cdf     00          | 	byte	$00[9]
18ce0     30 18 00 3E 
18ce4     63 63 63 63 
18ce8     63 63 63 63 
18cec     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18cf0     00 00 00 1E 
18cf4     33 33 33 1B 
18cf8     33 63 63 63 
18cfc     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
18d00     1C 36 00 3E 
18d04     63 63 63 63 
18d08     63 63 63 63 
18d0c     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18d10     30 18 00 63 
18d14     67 6F 7F 7B 
18d18     73 63 63 63 
18d1c     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
18d20     00 00 60 30 
18d24     18 00 3B 66 
18d28     66 66 66 66 
18d2c     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18d30     00 00 36 1C 
18d34     08 00 3B 66 
18d38     66 66 66 66 
18d3c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18d40     36 1C 00 3E 
18d44     63 63 06 1C 
18d48     30 60 63 63 
18d4c     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
18d50     00 00 36 1C 
18d54     08 00 3E 63 
18d58     06 1C 30 63 
18d5c     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
18d60     30 18 00 3F 
18d64     66 66 66 3E 
18d68     36 66 66 66 
18d6c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
18d70     30 18 00 63 
18d74     63 63 63 63 
18d78     63 63 63 63 
18d7c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18d80     00 00 60 30 
18d84     18 00 3B 6E 
18d88     66 06 06 06 
18d8c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
18d90     66 33 00 63 
18d94     63 63 63 63 
18d98     63 63 63 63 
18d9c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18da0     00 00 60 30 
18da4     18 00 63 63 
18da8     63 63 63 63 
18dac     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
18db0     30 18 00 66 
18db4     66 66 66 3C 
18db8     18 18 18 18 
18dbc     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
18dc0     00 00 00 08 
18dc4     0C 0C 3F 0C 
18dc8     0C 0C 0C 6C 
18dcc     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
18dd0     30 18 00 00 
18dd4     00 00 00 00 
18dd8     00 00 00 00 
18ddc     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18de0     00 00 00 00 
18de4     00 00 00 00 | 	byte	$00[8]
18de8     7F 00 00 00 
18dec     00 00 00 00 
18df0     66 33 00 00 
18df4     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
18df8     00 00 00 00 
18dfc     00 00 00 00 
18e00     00 00 00 00 
18e04     00 00 00 00 
18e08     00 00 00 00 
18e0c     00          | 	byte	$00[21]
18e0d     0C 06 3C 36 
18e11     1C 00 00 00 
18e15     00 00 00 00 
18e19     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e1d     00 00 00 63 
18e21     3E 00 00 00 
18e25     00 00 00 00 
18e29     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e2d     00 00 00 00 
18e31     3E 63 06 1C 
18e35     36 63 63 36 
18e39     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
18e3d     00 00 00 00 
18e41     00 00 00 00 | 	byte	$00[8]
18e45     18 00 7E 00 
18e49     18 00 00 00 
18e4d     00 00 00 00 
18e51     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e55     00 00 00 00 
18e59     00 00 00 00 | 	byte	$00[8]
18e5d     18 30 1E 00 
18e61     00 00 1C 36 
18e65     36 1C 00 00 
18e69     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
18e6d     00 00 00 00 
18e71     63 00 00 00 
18e75     00 00 00 00 
18e79     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e7d     00 00 00 18 
18e81     18 00 00 00 
18e85     00 00 00 00 
18e89     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e8d     00 00 00 00 
18e91     00          | 	byte	$00[5]
18e92     CC 66 33 00 
18e96     33 33 33 33 
18e9a     33 33 6E 00 
18e9e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
18ea2     00 3F 66 66 
18ea6     66 3E 36 66 
18eaa     66 66 6F 00 
18eae     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
18eb2     36 1C 08 00 
18eb6     3B 6E 66 06 
18eba     06 06 0F 00 
18ebe     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
18ec2     00 00 00 7E 
18ec6     7E 7E 7E 7E 
18eca     7E 7E 00 00 
18ece     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
18ed2     00 00 00 00 
18ed6     00 00 00 00 
18eda     00 00 00 00 
18ede     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ee0     00 00 00 00 
      ...             
18f10     00 00 00 00 
18f14     00 00 00    | st_font        file "st4font.def"
18f17     FF FF 00 00 
18f1b     00 00 00 00 
18f1f     00 18 18 18 
18f23     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18f27     18 18 18 18 
18f2b     18 18 18 18 
18f2f     18          | 	byte	$18[9]
18f30     00 00 00 00 
18f34     00 00 00    | 	byte	$00[7]
18f37     FF FF 18 18 
18f3b     18 18 18 18 
18f3f     18 18 18 18 
18f43     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18f47     FF FF 00 00 
18f4b     00 00 00 00 
18f4f     00 18 18 18 
18f53     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18f57     1F 1F 18 18 
18f5b     18 18 18 18 
18f5f     18 18 18 18 
18f63     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18f67     F8 F8 18 18 
18f6b     18 18 18 18 
18f6f     18 00 00 00 
18f73     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18f77     1F 1F 18 18 
18f7b     18 18 18 18 
18f7f     18 00 00 00 
18f83     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18f87     F8 F8 18 18 
18f8b     18 18 18 18 
18f8f     18 18 18 18 
18f93     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18f97     1F 1F 00 00 
18f9b     00 00 00 00 
18f9f     00 18 18 18 
18fa3     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18fa7     F8 F8 00 00 
18fab     00 00 00 00 
18faf     00 18 18 18 
18fb3     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18fb7     FF FF 18 18 
18fbb     18 18 18 18 
18fbf     18 00 00 18 
18fc3     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
18fc7     66 7E 7E 66 
18fcb     66 66 66 30 
18fcf     18 00 00 7E 
18fd3     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
18fd7     3E 06 06 06 
18fdb     06 7E 7E 18 
18fdf     0C 30 18 3C 
18fe3     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
18fe7     06 06 06 66 
18feb     66 7E 3C 00 
18fef     00 30 18 66 
18ff3     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
18ff7     7E 7E 76 76 
18ffb     66 66 66 00 
18fff     00 30 18 7C 
19003     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
19007     1C 38 70 60 
1900b     60 7E 3E 00 
1900f     00 30 18 7E 
19013     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
19017     18 0C 0C 06 
1901b     06 7E 7E 00 
1901f     00 18 18 00 
19023     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
19027     18 18 0C 0C 
1902b     06 7E 7E 00 
1902f     00 30 18 3C 
19033     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
19037     66 66 66 66 
1903b     66          | 	byte	$66[5]
1903c     7E 3C 00 00 
19040     00 00 06 06 
19044     06 06 16 1E 
19048     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1904c     7E 7E 00 00 
19050     00 00 00 00 
19054     00 3C 7C 60 
19058     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1905c     7E 7C 30 18 
19060     00 00 00 00 
19064     00 3C 7E 66 
19068     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1906c     7E 7C 18 0C 
19070     00 00 30 18 
19074     00 3C 3E 06 
19078     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1907c     7E 7C 00 00 
19080     00 00 30 18 
19084     00 3E 7E 66 
19088     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1908c     66 66 00 00 
19090     00 00 30 18 
19094     00 7C 7E 06 
19098     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1909c     7E 3E 00 00 
190a0     00 00 30 18 
190a4     00 7E 7E 30 
190a8     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
190ac     7E 7E 00 00 
190b0     00 00 18 18 
190b4     00 7E 7E 30 
190b8     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
190bc     7E 7E 00 00 
190c0     00 00 30 18 
190c4     00 3C 7E 66 
190c8     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
190cc     7E 3C 00 00 
190d0     00 00 1C 1C 
190d4     18 18 38 3C 
190d8     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
190dc     3C 3C 00 00 
190e0     00 00 00 00 
190e4     00 00 00 00 
190e8     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190ec     00 00 00 00 
190f0     00 00       | 	byte	$00[6]
190f2     18 18 18 18 
190f6     18 18 18 18 | 	byte	$18[8]
190fa     00 00 18 18 
190fe     00 00 00 00 
19102     66 66 66 66 
19106     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1910a     00 00 00 00 
1910e     00 00 00 00 
19112     00          | 	byte	$00[9]
19113     66 66 FF FF 
19117     66 66 FF FF 
1911b     66 66 00 00 
1911f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
19123     7C 7E 06 06 
19127     3E 7C 60 60 
1912b     7E 3E 18 18 
1912f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
19133     66 30 30 18 
19137     18 0C 0C 66 
1913b     66 00 00 00 
1913f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
19143     66 66 3C 1C 
19147     1C FC FE 66 
1914b     66 FE FC 00 
1914f     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
19153     18 18 18 18 
19157     00 00 00 00 
1915b     00 00 00 00 
1915f     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
19163     18 1C 0C 0C 
19167     0C 0C 0C 0C 
1916b     1C 18 30 00 
1916f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
19173     18 38 30 30 
19177     30 30 30 30 
1917b     38 18 0C 00 
1917f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
19183     66 66 3C 3C 
19187     FF FF 3C 3C 
1918b     66 66 00 00 
1918f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
19193     00 18 18 18 
19197     7E 7E 18 18 
1919b     18 00 00 00 
1919f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
191a3     00 00 00 00 
191a7     00 00       | 	byte	$00[6]
191a9     18 18 18 18 
191ad     18          | 	byte	$18[5]
191ae     0C 04 00 00 
191b2     00 00 00 00 
191b6     7E 7E 00 00 
191ba     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
191be     00 00 00 00 
191c2     00 00 00 00 
191c6     00 00 00 00 
191ca     00          | 	byte	$00[13]
191cb     18 18 18 00 
191cf     00 00 00 60 
191d3     60 60 30 30 
191d7     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
191db     06 06 06 00 
191df     00 00 00 3C 
191e3     7E 66 66 66 
191e7     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
191eb     66 7E 3C 00 
191ef     00 00 00 18 
191f3     18 1C 1C 18 
191f7     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
191fb     18 7E 7E 00 
191ff     00 00 00 3C 
19203     7E 66 66 30 
19207     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1920b     0C 7E 7E 00 
1920f     00 00 00 7E 
19213     7E 30 30 18 
19217     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1921b     66 7E 3C 00 
1921f     00 00 00 30 
19223     30 38 38 3C 
19227     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1922b     7E 30 30 00 
1922f     00 00 00 7E 
19233     7E 06 06 3E 
19237     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1923b     66 7E 3C 00 
1923f     00 00 00 38 
19243     3C 0E 06 06 
19247     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1924b     66 7E 3C 00 
1924f     00 00 00 7E 
19253     7E 60 60 30 
19257     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1925b     0C 0C 0C 00 
1925f     00 00 00 3C 
19263     7E 66 66 3C 
19267     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1926b     66 7E 3C 00 
1926f     00 00 00 3C 
19273     7E 66 66 7E 
19277     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1927b     70 3C 1C 00 
1927f     00 00 00 00 
19283     00 00 18 18 
19287     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1928b     18 18 18 00 
1928f     00 00 00 00 
19293     00 00 18 18 
19297     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1929b     18 18 18 0C 
1929f     04 00 00 00 
192a3     70 38 1C 0E 
192a7     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
192ab     70 00 00 00 
192af     00 00 00 00 
192b3     00 00 7E 7E 
192b7     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
192bb     00 00 00 00 
192bf     00 00 00 00 | 	byte	$00[8]
192c3     0E 1C 38 70 
192c7     E0 70 38 1C 
192cb     0E 00 00 00 
192cf     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
192d3     7E 66 66 30 
192d7     30 18 18 18 
192db     00 18 18 00 
192df     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
192e3     7E 66 66 66 
192e7     66 36 06 66 
192eb     66 7E 3C 00 
192ef     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
192f3     3C 7E 66 66 
192f7     66 7E 7E 66 
192fb     66 66 66 00 
192ff     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
19303     7E 66 66 7E 
19307     3E 66 66 66 
1930b     66 7E 3E 00 
1930f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
19313     7E 66 66 06 
19317     06 06 06 66 
1931b     66 7E 3C 00 
1931f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
19323     7E 66 66 66 
19327     66 66 66 66 
1932b     66 7E 3E 00 
1932f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
19333     7E 06 06 3E 
19337     3E 06 06 06 
1933b     06 7E 7E 00 
1933f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
19343     7E 06 06 3E 
19347     3E 06 06 06 
1934b     06 06 06 00 
1934f     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
19353     7E 06 06 76 
19357     76 66 66 66 
1935b     66 7E 3C 00 
1935f     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
19363     66 66 66 7E 
19367     7E 66 66 66 
1936b     66 66 66 00 
1936f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
19373     7E 18 18 18 
19377     18 18 18 18 
1937b     18 7E 7E 00 
1937f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
19383     60 60 60 60 
19387     60 60 60    | 	byte	$60[7]
1938a     66 66 7E 3C 
1938e     00 00 00 00 
19392     66 66 36 36 
19396     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1939a     66 66 C6 C6 
1939e     00 00 00 00 
193a2     06 06 06 06 
193a6     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
193aa     06 06 7E 7E 
193ae     00 00 00 00 
193b2     C6 C6 EE EE 
193b6     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
193ba     C6 C6 C6 C6 
193be     00 00 00 00 
193c2     66 66 66 6E 
193c6     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
193ca     76 66 66 66 
193ce     00 00 00 00 
193d2     3C 7E 66 66 
193d6     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
193da     66 66 7E 3C 
193de     00 00 00 00 
193e2     3E 7E 66 66 
193e6     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
193ea     06 06 06 06 
193ee     00 00 00 00 
193f2     3C 7E 66 66 
193f6     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
193fa     66 56 3E 6C 
193fe     00 00 00 00 
19402     3E 7E 66 66 
19406     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1940a     66 66 C6 C6 
1940e     00 00 00 00 
19412     7C 7E 06 06 
19416     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1941a     60 60 7E 3E 
1941e     00 00 00 00 
19422     7E 7E 18 18 
19426     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1942a     18 18 18 18 
1942e     00 00 00 00 
19432     66 66 66 66 
19436     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1943a     66 66 7E 3C 
1943e     00 00 00 00 
19442     66 66 66 66 
19446     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1944a     3C 3C 18 18 
1944e     00 00 00 00 
19452     C6 C6 C6 C6 
19456     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1945a     FE EE C6 82 
1945e     00 00 00 00 
19462     66 66 66 3C 
19466     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1946a     3C 66 66 66 
1946e     00 00 00 00 
19472     66 66 66 66 
19476     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1947a     18 18 18 18 
1947e     00 00 00 00 
19482     7E 7E 30 30 
19486     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1948a     06 06 7E 7E 
1948e     00 00 00 00 
19492     3C 3C 0C 0C 
19496     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1949a     0C 0C 3C 3C 
1949e     00 00 00 00 
194a2     06 06 0C 0C 
194a6     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
194aa     60 60 C0 C0 
194ae     00 00 00 00 
194b2     3C 3C 30 30 
194b6     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
194ba     30 30 3C 3C 
194be     00 00 00 00 
194c2     18 18 3C 3C 
194c6     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
194ca     00 00 00 00 
194ce     00 00 00 00 
194d2     00 00 00 00 
194d6     00 00 00 00 
194da     00 00       | 	byte	$00[18]
194dc     FE FE 00 00 
194e0     00 00 0C 0C 
194e4     18 18 00 00 
194e8     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
194ec     00 00 00 00 
194f0     00 00 00 00 
194f4     00          | 	byte	$00[9]
194f5     3C 7C 60 7C 
194f9     7E 66 66 7E 
194fd     7C 00 00 00 
19501     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
19505     3E 7E 66 66 
19509     66 66 66 7E 
1950d     3E 00 00 00 
19511     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
19515     3C 3E 06 06 
19519     06 06 06 7E 
1951d     7C 00 00 00 
19521     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
19525     7C 7E 66 66 
19529     66 66 66 7E 
1952d     7C 00 00 00 
19531     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
19535     3C 7E 66 66 
19539     7E 06 06 7E 
1953d     7C 00 00 00 
19541     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
19545     18 7E 7E 18 
19549     18 18 18 18 
1954d     18 00 00 00 
19551     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19555     7C 7E 66 66 
19559     66 66 7E 7C 
1955d     60 7E 3E 00 
19561     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
19565     3E 7E 66 66 
19569     66 66 66 66 
1956d     66 00 00 00 
19571     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
19575     1C 1C 18 18 
19579     18 18 18 3C 
1957d     3C 00 00 00 
19581     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
19585     30 30 30 30 
19589     30 30 30 30 
1958d     30          | 	byte	$30[9]
1958e     3E 1E 00 00 
19592     06 06 06 36 
19596     36 1E 1E 1E 
1959a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1959e     00 00 00 00 
195a2     1C 1C 18 18 
195a6     18 18 18 18 
195aa     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
195ae     00 00 00 00 
195b2     00 00 00    | 	byte	$00[7]
195b5     6C FE FE D6 
195b9     D6 C6 C6 C6 
195bd     C6 00 00 00 
195c1     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
195c5     3E 7E 66 66 
195c9     66 66 66 66 
195cd     66 00 00 00 
195d1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
195d5     3C 7E 66 66 
195d9     66 66 66 7E 
195dd     3C 00 00 00 
195e1     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
195e5     3E 7E 66 66 
195e9     66 66 66 7E 
195ed     3E 06 06 00 
195f1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
195f5     7C 7E 66 66 
195f9     66 66 66 7E 
195fd     7C 60 60 00 
19601     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
19605     3E 7E 66 06 
19609     06 06 06 06 
1960d     06 00 00 00 
19611     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
19615     7C 7E 06 0E 
19619     3C 70 60 7E 
1961d     3E 00 00 00 
19621     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
19625     7E 7E 18 18 
19629     18 18 18 78 
1962d     70 00 00 00 
19631     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
19635     66 66 66 66 
19639     66 66 66    | 	byte	$66[7]
1963c     7E 7C 00 00 
19640     00 00 00 00 
19644     00 66 66 66 
19648     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1964c     18 18 00 00 
19650     00 00 00 00 
19654     00 C6 C6 D6 
19658     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1965c     C6 82 00 00 
19660     00 00 00 00 
19664     00 66 66 3C 
19668     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1966c     66 66 00 00 
19670     00 00 00 00 
19674     00 66 66 66 
19678     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1967c     7C 60 7E 3E 
19680     00 00 00 00 
19684     00 7E 7E 30 
19688     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1968c     7E 7E 00 00 
19690     00 00 30 18 
19694     18 18 18 0C 
19698     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1969c     18 30 00 00 
196a0     00 00 18 18 
196a4     18 18 18 18 
196a8     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
196ac     18 18 00 00 
196b0     00 00 0C 18 
196b4     18 18 18 30 
196b8     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
196bc     18 0C 00 00 
196c0     00 00 6C 7E 
196c4     36 00 00 00 
196c8     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
196cc     00 00 00 00 
196d0     00 00 00 00 
196d4     00          | 	byte	$00[9]
196d5     18 18 18 18 
196d9     18 18 00 00 
196dd     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
196e0     00 00 00 00 
196e4     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
196e8     00 00 00 00 
196ec     00 80 80 80 
196f0     00 00 00 FF 
196f4     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
196f8     00 00 00 00 
196fc     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
196fd     80 00 00 00 
19701     00 80 00 00 
19705     80 80 00 00 
19709     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1970d     80 00 80 00 
19711     00 40 80 00 
19715     AA AA AA 00 
19719     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1971d     FF 00 00 00 
19721     00 FF 00 00 
19725     FF FF 00 00 
19729     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1972d     FF 00 FF 00 
19731     00 FF FF 00 
19735     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
19738     00 00 00 00 
1973c     00          | ataripalette   file "ataripalettep2.def"
1973d     11 11 11 00 
19741     22 22 22 00 
19745     33 33 33 00 
19749     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1974d     55 55 55 00 
19751     66 66 66 00 
19755     77 77 77 00 
19759     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1975d     99 99 99 00 
19761     AA AA AA 00 
19765     BB BB BB 00 
19769     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1976d     DD DD DD 00 
19771     EE EE EE 00 
19775     FF FF FF 00 
19779     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1977d     00 14 40 00 
19781     00 1E 60 00 
19785     00 28 80 00 
19789     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1978d     00 3C BF 00 
19791     00 46 DF 00 
19795     00 50 FF 00 
19799     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1979d     39 77 FF 00 
197a1     55 8A FF 00 
197a5     71 9E FF 00 
197a9     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
197ad     AA C5 FF 00 
197b1     C6 D8 FF 00 
197b5     E3 EC FF 00 
197b9     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
197bd     00 00 40 00 
197c1     00 00 60 00 
197c5     00 00 80 00 
197c9     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
197cd     00 00 BF 00 
197d1     00 00 DF 00 
197d5     00 00 FF 00 
197d9     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
197dd     39 39 FF 00 
197e1     55 55 FF 00 
197e5     71 71 FF 00 
197e9     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
197ed     AA AA FF 00 
197f1     C6 C6 FF 00 
197f5     E3 E3 FF 00 
197f9     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
197fd     20 00 40 00 
19801     30 00 60 00 
19805     40 00 80 00 
19809     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1980d     60 00 BF 00 
19811     70 00 DF 00 
19815     80 00 FF 00 
19819     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1981d     9C 39 FF 00 
19821     AA 55 FF 00 
19825     B8 71 FF 00 
19829     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1982d     D5 AA FF 00 
19831     E3 C6 FF 00 
19835     F1 E3 FF 00 
19839     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1983d     40 00 40 00 
19841     60 00 60 00 
19845     80 00 80 00 
19849     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1984d     BF 00 BF 00 
19851     DF 00 DF 00 
19855     FF 00 FF 00 
19859     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1985d     FF 39 FF 00 
19861     FF 55 FF 00 
19865     FF 71 FF 00 
19869     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1986d     FF AA FF 00 
19871     FF C6 FF 00 
19875     FF E3 FF 00 
19879     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1987d     40 00 20 00 
19881     60 00 30 00 
19885     80 00 40 00 
19889     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1988d     BF 00 60 00 
19891     DF 00 70 00 
19895     FF 00 80 00 
19899     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1989d     FF 39 9C 00 
198a1     FF 55 AA 00 
198a5     FF 71 B8 00 
198a9     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
198ad     FF AA D5 00 
198b1     FF C6 E3 00 
198b5     FF E3 F1 00 
198b9     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
198bd     40 00 00 00 
198c1     60 00 00 00 
198c5     80 00 00 00 
198c9     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
198cd     BF 00 00 00 
198d1     DF 00 00 00 
198d5     FF 00 00 00 
198d9     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
198dd     FF 39 39 00 
198e1     FF 55 55 00 
198e5     FF 71 71 00 
198e9     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
198ed     FF AA AA 00 
198f1     FF C6 C6 00 
198f5     FF E3 E3 00 
198f9     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
198fd     40 10 00 00 
19901     60 18 00 00 
19905     80 20 00 00 
19909     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1990d     BF 30 00 00 
19911     DF 38 00 00 
19915     FF 40 00 00 
19919     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1991d     FF 6A 39 00 
19921     FF 80 55 00 
19925     FF 95 71 00 
19929     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1992d     FF BF AA 00 
19931     FF D5 C6 00 
19935     FF EA E3 00 
19939     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1993d     40 20 00 00 
19941     60 30 00 00 
19945     80 40 00 00 
19949     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1994d     BF 60 00 00 
19951     DF 70 00 00 
19955     FF 80 00 00 
19959     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1995d     FF 9C 39 00 
19961     FF AA 55 00 
19965     FF B8 71 00 
19969     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1996d     FF D5 AA 00 
19971     FF E3 C6 00 
19975     FF F1 E3 00 
19979     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1997d     40 30 00 00 
19981     60 48 00 00 
19985     80 60 00 00 
19989     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1998d     BF 90 00 00 
19991     DF A8 00 00 
19995     FF C0 00 00 
19999     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1999d     FF CE 39 00 
199a1     FF D5 55 00 
199a5     FF DC 71 00 
199a9     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
199ad     FF EA AA 00 
199b1     FF F1 C6 00 
199b5     FF F8 E3 00 
199b9     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
199bd     30 40 00 00 
199c1     48 60 00 00 
199c5     60 80 00 00 
199c9     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
199cd     90 BF 00 00 
199d1     A8 DF 00 00 
199d5     C0 FF 00 00 
199d9     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
199dd     CE FF 39 00 
199e1     D5 FF 55 00 
199e5     DC FF 71 00 
199e9     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
199ed     EA FF AA 00 
199f1     F1 FF C6 00 
199f5     F8 FF E3 00 
199f9     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
199fd     00 40 00 00 
19a01     00 60 00 00 
19a05     00 80 00 00 
19a09     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
19a0d     00 BF 00 00 
19a11     00 DF 00 00 
19a15     00 FF 00 00 
19a19     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
19a1d     39 FF 39 00 
19a21     55 FF 55 00 
19a25     71 FF 71 00 
19a29     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
19a2d     AA FF AA 00 
19a31     C6 FF C6 00 
19a35     E3 FF E3 00 
19a39     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
19a3d     00 40 14 00 
19a41     00 60 1E 00 
19a45     00 80 28 00 
19a49     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
19a4d     00 BF 3C 00 
19a51     00 DF 46 00 
19a55     00 FF 50 00 
19a59     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
19a5d     39 FF 77 00 
19a61     55 FF 8A 00 
19a65     71 FF 9E 00 
19a69     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
19a6d     AA FF C5 00 
19a71     C6 FF D8 00 
19a75     E3 FF EC 00 
19a79     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
19a7d     00 40 28 00 
19a81     00 60 3C 00 
19a85     00 80 50 00 
19a89     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
19a8d     00 BF 78 00 
19a91     00 DF 8C 00 
19a95     00 FF A0 00 
19a99     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
19a9d     39 FF B5 00 
19aa1     55 FF C0 00 
19aa5     71 FF CA 00 
19aa9     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
19aad     AA FF DF 00 
19ab1     C6 FF EA 00 
19ab5     E3 FF F4 00 
19ab9     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
19abd     00 40 40 00 
19ac1     00 60 60 00 
19ac5     00 80 80 00 
19ac9     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
19acd     00 BF BF 00 
19ad1     00 DF DF 00 
19ad5     00 FF FF 00 
19ad9     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
19add     39 FF FF 00 
19ae1     55 FF FF 00 
19ae5     71 FF FF 00 
19ae9     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
19aed     AA FF FF 00 
19af1     C6 FF FF 00 
19af5     E3 FF FF 00 
19af9     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
19afd     00 28 40 00 
19b01     00 3C 60 00 
19b05     00 50 80 00 
19b09     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
19b0d     00 78 BF 00 
19b11     00 8C DF 00 
19b15     00 A0 FF 00 
19b19     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
19b1d     39 B5 FF 00 
19b21     55 C0 FF 00 
19b25     71 CA FF 00 
19b29     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
19b2d     AA DF FF 00 
19b31     C6 EA FF 00 
19b35     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
19b38                 | '**********************************************************************************
19b38                 | '
19b38                 | '        Timings and colors definitions
19b38                 | '
19b38                 | '**********************************************************************************
19b38                 | 
19b38                 |    'streamer sets for text mode, to add to timings[0..5]
19b38                 | ' todo for the retromachine: 768x576
19b38                 | 
19b38                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
19b38     10 00 00 00 
19b3c     50 00 00 00 
19b40     14 00 00 00 
19b44     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19b48     70 00 00 00 
19b4c     08 00 00 00 
19b50     30 00 00 00 
19b54     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
19b58     10 00 00 00 
19b5c     10 00 00 00 
19b60     00 00 00 00 
19b64     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
19b68     E0 01 00 00 
19b6c     F6 32 24 15 
19b70     FB 6C C3 01 
19b74     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19b78                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
19b78                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
19b78     30 00 00 00 
19b7c     50 00 00 00 
19b80     34 00 00 00 
19b84     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
19b88     20 00 00 00 
19b8c     08 00 00 00 
19b90     16 00 00 00 
19b94     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
19b98     24 00 00 00 
19b9c     18 00 00 00 
19ba0     40 00 00 00 
19ba4     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
19ba8     F0 01 00 00 
19bac     F6 32 24 15 
19bb0     FB 6C C3 01 
19bb4     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
19bb8                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
19bb8     10 00 00 00 
19bbc     40 00 00 00 
19bc0     10 00 00 00 
19bc4     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
19bc8     08 00 00 00 
19bcc     08 00 00 00 
19bd0     08 00 00 00 
19bd4     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
19bd8     40 00 00 00 
19bdc     20 00 00 00 
19be0     80 00 00 00 
19be4     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
19be8     E0 01 00 00 
19bec     70 AE E9 10 
19bf0     FB 8B FF 01 
19bf4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
19bf8     10 00 00 00 
19bfc     42 00 00 00 
19c00     14 00 00 00 
19c04     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19c08     00 00 00 00 
19c0c     08 00 00 00 
19c10     00 00 00 00 
19c14     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
19c18     10 00 00 00 
19c1c     10 00 00 00 
19c20     C0 00 00 00 
19c24     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
19c28     40 02 00 00 
19c2c     F6 32 24 15 
19c30     FB 6C C3 01 
19c34     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19c38     50 00 00 00 
19c3c     A0 00 00 00 
19c40     54 00 00 00 
19c44     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
19c48     08 00 00 00 
19c4c     08 00 00 00 
19c50     08 00 00 00 
19c54     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19c58     0C 00 00 00 
19c5c     08 00 00 00 
19c60     00 01 00 00 
19c64     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
19c68     E0 01 00 00 
19c6c     10 06 56 15 
19c70     FB 64 C3 01 
19c74     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
19c78     50 00 00 00 
19c7c     32 00 00 00 
19c80     50 00 00 00 
19c84     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19c88     08 00 00 00 
19c8c     08 00 00 00 
19c90     08 00 00 00 
19c94     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19c98     0C 00 00 00 
19c9c     08 00 00 00 
19ca0     40 01 00 00 
19ca4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
19ca8     E0 01 00 00 
19cac     F2 CD 33 13 
19cb0     FB 53 92 01 
19cb4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19cb8     18 00 00 00 
19cbc     30 00 00 00 
19cc0     18 00 00 00 
19cc4     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
19cc8     08 00 00 00 
19ccc     08 00 00 00 
19cd0     08 00 00 00 
19cd4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19cd8     0C 00 00 00 
19cdc     08 00 00 00 
19ce0     80 01 00 00 
19ce4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
19ce8     E0 01 00 00 
19cec     F4 8F 11 11 
19cf0     FB 3A 55 01 
19cf4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
19cf8     20 00 00 00 
19cfc     40 00 00 00 
19d00     22 00 00 00 
19d04     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19d08     00 00 00 00 
19d0c     08 00 00 00 
19d10     00 00 00 00 
19d14     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
19d18     0C 00 00 00 
19d1c     08 00 00 00 
19d20     C0 01 00 00 
19d24     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
19d28     F0 01 00 00 
19d2c     F2 CD 33 13 
19d30     FB 53 92 01 
19d34     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19d38                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
19d38     00 75 C7 97 
19d3c     27 47 F6 0A 
19d40     05 79 CB 9B 
19d44     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
19d48                 | 
19d48     28 12 64 FD | hdmi            setq    #9
19d4c     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
19d50                 |            '     setq2   #255
19d50                 |             '    rdlong  $100, paletteptr 
19d50     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
19d54     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
19d58     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
19d5c     78 F9 02 F1 |                 add     ii,hbase
19d60     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
19d64     7B 0B 80 FF 
19d68     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
19d6c                 | 
19d6c     66 66 86 FF 
19d70     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
19d74                 | 
19d74                 | 
19d74                 | ''--------  frame rendering main loop  ---------------------------------------------------
19d74                 | 
19d74                 | p101
19d74     28 14 64 FD |                 setq    #10
19d78     00 DF 06 FB |                 rdlong  framebuf,  ptra
19d7c     28 1E 64 FD |                 setq    #15
19d80     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
19d84     71 99 02 FB |                 rdlong  border,borderptr
19d88                 | 
19d88     01 C4 06 F1 |                 add     frames,#1
19d8c     76 F5 02 F6 |                 mov     dlptr2,dlptr
19d90                 | 
19d90     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
19d94     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
19d98     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
19d9c     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
19da0                 |  '' up porch
19da0                 | 
19da0     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
19da4     49 FF 02 F6 |                 mov     hsync1,sync_001
19da8     37 A8 46 FB |                 callpa  i_upporch ,#blank
19dac     72 01 68 FC |                 wrlong  #0,vblankptr
19db0                 |                 
19db0     1F EA 16 F4 |                 testb   paletteptr,#31 wc
19db4     29 FE 65 3D |          if_nc  setq2   #255
19db8     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
19dbc                 | 
19dbc                 | '' cursor blinking
19dbc                 | 
19dbc     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
19dc0     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
19dc4                 | 
19dc4                 | '' main screen
19dc4                 | 
19dc4     00 BE 06 F6 |                 mov linenum,#0
19dc8     00 18 07 F6 |                 mov rcnt,#0
19dcc     00 1C 07 F6 |                 mov rcnt2a,#0
19dd0                 | 
19dd0                 | 
19dd0     00 18 0F F2 | p301            cmp rcnt,#0 wz
19dd4     18 00 90 AD |         if_z    jmp #p306
19dd8     01 18 87 F1 |                 sub rcnt,#1
19ddc     90 F7 02 F6 |                 mov dl,rdl
19de0     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
19de4     8F F7 02 A1 |    if_z        add dl,roffset  
19de8     7B 21 03 F6 |                 mov rdl,dl
19dec     04 00 90 FD |                 jmp #p307          
19df0                 |           
19df0                 |                 
19df0     7A F7 02 FB | p306            rdlong  dl,dlptr2
19df4     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
19df8     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
19dfc     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
19e00                 | 
19e00                 | '' Special entry:
19e00                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
19e00                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
19e00                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
19e00                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
19e00                 | '' todo: set horizontal scroll (if needed)
19e00                 | 
19e00     02 FA 66 F0 |                 shl framebuf2,#2
19e04     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
19e08     04 22 0F F2 |                 cmp dlc,#%100 wz
19e0c                 |   
19e0c                 |                 
19e0c     04 F4 06 F1 |                 add dlptr2,#4
19e10     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
19e14     7A 21 03 FB |                  rdlong rdl,dlptr2
19e18     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
19e1c     04 18 47 F0 |                  shr rcnt,#4
19e20                 |              
19e20     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
19e24     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
19e28                 |                 
19e28     04 1E 47 F0 |                  shr roffset,#4
19e2c     0C 1E 67 F0 |                  shl roffset,#12
19e30                 |   
19e30     9C FF 9F FD |                  jmp #p301
19e34                 |                  
19e34                 |                  
19e34                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
19e34     0C FA 46 F0 |                 shr     framebuf2,#12
19e38     02 FA 66 F0 |                 shl     framebuf2,#2
19e3c                 | 
19e3c     7B 03 E3 F8 |                 getbyte t1,dl,#0
19e40     00 02 0F F2 |                 cmp     t1,#0 wz
19e44     34 00 90 AD |     if_z        jmp     #borderline
19e48                 | 
19e48     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
19e4c     50 00 90 CD |           if_c   jmp     #textline
19e50     50 02 90 3D |           if_nc  jmp     #graphline
19e54                 | '
19e54     01 BE 06 F1 | p302            add     linenum,#1
19e58     04 F4 06 F1 |                 add     dlptr2,#4
19e5c     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
19e60     6C FF 9F 5D |          if_nz  jmp     #p301
19e64                 | 
19e64     72 03 68 FC | p112            wrlong  #1,vblankptr
19e68     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
19e6c                 | 
19e6c     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
19e70     4B FF 02 F6 |                 mov     hsync1,sync_223
19e74     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
19e78     F8 FE 9F FD |                 jmp     #p101
19e7c                 | 
19e7c                 | '' ---------------  END of frame rendering loop -------------------------------------------
19e7c                 | 
19e7c                 | 
19e7c     14 00 B0 FD | borderline      call    #hsync                      ' make a border
19e80     4C A1 C2 FC |                 xcont   m_vi,border
19e84     CC FF 9F FD |                 jmp     #p302
19e88                 | 
19e88                 | 
19e88     08 00 B0 FD | blank           call    #hsync                          'blank lines
19e8c     7E A1 C2 FC |                 xcont   m_vi,hsync0
19e90     FD ED 6F 0B |         _ret_   djnz    pa,#blank
19e94                 | 
19e94     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
19e98     7F 9D B2 FC |                 xzero   m_sn,hsync1
19e9c     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
19ea0                 | 
19ea0                 | 
19ea0                 | 
19ea0                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
19ea0                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
19ea0                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
19ea0                 | 
19ea0                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
19ea0                 | 
19ea0     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
19ea4                 | 
19ea4     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
19ea8     7B 17 5B F8 |                 getnib  zoom, dl,#3
19eac     03 16 07 F5 |                 and             zoom, #3
19eb0                 | 
19eb0                 | 
19eb0                 | 
19eb0     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
19eb4     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
19eb8     3F BC 06 F5 |                 and     linestart,#63
19ebc     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
19ec0     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
19ec4                 | 
19ec4     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
19ec8                 | 
19ec8                 |                        ' if fontline =0, get a border color
19ec8                 | 
19ec8     51 03 33 F9 | p102            getword t1,m_border,#0
19ecc     00 02 0F F2 |                 cmp     t1, #0 wz
19ed0     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
19ed4                 | 
19ed4     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
19ed8     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
19edc     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
19ee0     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
19ee4     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
19ee8     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
19eec     52 BB 02 F6 |                 mov m_lut2, m_lut1
19ef0     6A BB 02 F1 |                 add m_lut2, lutt1
19ef4     58 0F 03 F6 |                 mov cpl2,i_cpl
19ef8                 | 
19ef8     02 16 0F F2 |                cmp zoom,#2 wz
19efc     E4 00 90 AD |           if_z jmp #p420
19f00     01 16 0F F2 |                cmp zoom,#1 wz
19f04     64 00 90 AD |           if_z jmp #p410
19f08     00 16 0F F2 |                 cmp zoom,#0 wz
19f0c     04 00 90 AD |           if_z jmp #p400
19f10     50 01 90 FD |                jmp #p430
19f14                 | 
19f14                 |                    '
19f14                 |  ''---------------------------------------------------------------------------------------------------------
19f14     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
19f18     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19f1c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19f20     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19f24     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19f28     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19f2c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19f30     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19f34     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19f38     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19f3c                 | 
19f3c     81 BB C2 FC |                         xcont m_lut2,t1
19f40                 | 
19f40     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19f44     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19f48     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19f4c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19f50     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19f54     01 C0 86 F1 |                         sub     lutaddr,#1
19f58                 | 
19f58     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19f5c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19f60     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19f64                 | 
19f64     EB 0F 6F FB |                         djnz   cpl2,#p400
19f68                 |                         
19f68                 | 
19f68                 |                         
19f68     28 01 90 FD |  p401                   jmp    #p103
19f6c                 | 
19f6c                 | ''------------------------------------------------------------------------------------------------------------
19f6c                 | 
19f6c     01 0E 47 F0 |  p410                   shr cpl2,#1
19f70                 | 
19f70                 | ''---------------------------------------------------------------------------------------------------------
19f70     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
19f74     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19f78     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19f7c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19f80     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19f84     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19f88     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19f8c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19f90     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19f94     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19f98                 | 
19f98                 | 
19f98     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
19f9c     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
19fa0     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
19fa4     03 02 07 FA |                         mul t1,#3
19fa8     81 BB C2 FC |                         xcont m_lut2,t1
19fac     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19fb0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19fb4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19fb8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19fbc     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19fc0     01 C0 86 F1 |                         sub     lutaddr,#1
19fc4     63 06 63 FD |                         mergew t3
19fc8     03 06 07 FA |                         mul t3,#3
19fcc     83 BB C2 FC |                         xcont m_lut2,t3
19fd0                 | 
19fd0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19fd4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19fd8                 | 
19fd8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19fdc                 | 
19fdc     E4 0F 6F FB |                         djnz   cpl2,#p412
19fe0     B0 00 90 FD |  p411                   jmp    #p103
19fe4                 | 
19fe4                 | ''------------------------------------------------------------------------------------------------------------
19fe4                 | 
19fe4     02 0E 47 F0 |  p420                   shr cpl2,#2
19fe8                 | 
19fe8                 | ''---------------------------------------------------------------------------------------
19fe8     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
19fec     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19ff0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19ff4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19ff8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19ffc     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1a000     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1a004     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1a008     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1a00c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1a010                 | 
1a010     61 02 63 FD |                         mergeb t1
1a014     81 07 3B F9 |                         getword t3,t1,#1
1a018     0F 02 07 FA |                         mul t1,#15
1a01c     81 BB C2 FC |                         xcont m_lut2,t1
1a020                 | 
1a020     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1a024     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1a028     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1a02c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1a030     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1a034     01 C0 86 F1 |                         sub     lutaddr,#1
1a038                 | 
1a038     81 09 EB F8 |                         getbyte t4,t1,#1        '
1a03c     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1a040                 | 
1a040     0F 06 07 FA |                         mul t3,#15
1a044     83 BB C2 FC |                         xcont m_lut2,t3
1a048                 | 
1a048     83 0B EB F8 |                         getbyte t5,t3,#1
1a04c     85 BB C2 FC |                         xcont m_lut2, t5
1a050     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1a054     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1a058                 | 
1a058     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1a05c                 | 
1a05c     E2 0F 6F FB |                         djnz   cpl2,#p422
1a060     30 00 90 FD |  p421                   jmp    #p103
1a064                 | 
1a064                 | '--------------------------------------------------------------------------------------------------------------
1a064                 | 
1a064     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1a068     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1a06c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1a070                 | 
1a070     00 BA C6 FC |                         xcont m_lut2,#0
1a074                 | 
1a074     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1a078     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1a07c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1a080     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1a084     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1a088     01 C0 86 F1 |                         sub     lutaddr,#1
1a08c                 | 
1a08c     F5 0F 6F FB |                         djnz   cpl2,#p430
1a090     00 00 90 FD |  p431                   jmp    #p103
1a094                 | 
1a094                 | ''------------------------------------------------------------------------------------------------------------
1a094                 | 
1a094                 | 
1a094                 | 
1a094     51 25 33 F9 | p103            getword  mb2,m_border,#0
1a098     00 24 0F F2 |                 cmp      mb2, #0 wz
1a09c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a0a0                 | 
1a0a0     B0 FD 9F FD |                 jmp #p302
1a0a4                 | 
1a0a4                 | '' -------------------------------------- END of text line ---------------------------------
1a0a4                 | 
1a0a4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1a0a4                 | 
1a0a4     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1a0a8                 | 
1a0a8                 | 
1a0a8     51 25 33 F9 | p202            getword mb2,m_border,#0
1a0ac     00 24 0F F2 |                 cmp     mb2, #0 wz
1a0b0     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1a0b4                 | 
1a0b4                 | '----------------------------------------- display pixels
1a0b4                 | 
1a0b4     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1a0b8     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1a0bc                 | 
1a0bc     7B 17 5B F8 |                 getnib  zoom, dl,#3
1a0c0     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1a0c4                 | 
1a0c4     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1a0c8     0C BC 06 F5 |                 and     colordepth,#12
1a0cc                 | 
1a0cc     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1a0d0     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1a0d4     64 00 90 AD |           if_z  jmp     #p240
1a0d8                 | 
1a0d8     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1a0dc     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1a0e0     98 00 90 AD |           if_z  jmp     #p250
1a0e4                 | 
1a0e4     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1a0e8     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1a0ec     FC 00 90 AD |           if_z  jmp     #p260
1a0f0                 | 
1a0f0     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1a0f4                 | 
1a0f4                 | '' --- 8 bit color modes
1a0f4                 | 
1a0f4     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1a0f8     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a0fc                 | 
1a0fc     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1a100     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1a104                 |        
1a104                 |  '  
1a104     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1a108     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1a10c                 |     
1a10c                 |  
1a10c     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1a110     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1a114                 |         
1a114                 | 
1a114                 |         
1a114     7D 11 03 FB | p235               rdlong  char,framebuf2
1a118     32 0C 63 FD |                    skipf skippattern
1a11c     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1a120     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1a124     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1a128     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1a12c     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1a130     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1a134     F7 0F 6F FB |                    djnz    cpl2,#p235
1a138                 | 
1a138     20 01 90 FD |                jmp    #p203
1a13c                 |                   
1a13c                 | 
1a13c                 | 
1a13c                 | '' --- 1 bit color modes
1a13c                 | 
1a13c     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1a140     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a144                 | 
1a144     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1a148     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1a14c     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1a150                 | 
1a150                 | 
1a150     7D 11 E3 FA | p241               rdword  char,framebuf2
1a154     44 10 FF F9 |                    movbyts char,#%01000100
1a158     63 10 63 FD |                    mergew  char
1a15c     32 0C 63 FD |                    skipf skippattern
1a160     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1a164     63 10 63 FD |                    mergew  char                    ' 1 0
1a168     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1a16c     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1a170     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1a174     F6 0F 6F FB |                    djnz   cpl2,#p241
1a178                 | 
1a178                 | 
1a178     E0 00 90 FD |                jmp    #p203
1a17c                 | 
1a17c                 | '' --- 2 bit color modes
1a17c                 | 
1a17c     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1a180     C8 00 90 AD |        if_z   jmp #p251
1a184                 | 
1a184     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a188     30 00 90 AD |        if_z   jmp #p252
1a18c                 | 
1a18c                 | 
1a18c     7D 11 C3 FA | p254               rdbyte char,framebuf2
1a190     04 0A 07 F6 |                    mov  t5,#4
1a194     02 10 67 F0 | p255               shl  char,#2
1a198     88 03 53 F8 |                    getnib  t1,char,#2
1a19c     03 02 07 F5 |                    and     t1,#3
1a1a0     55 02 07 FA |                    mul     t1,#$55
1a1a4     81 05 03 F9 |                    rolbyte  t2,t1,#0
1a1a8     FA 0B 6F FB |                    djnz    t5,#p255
1a1ac     82 BB C2 FC |                    xcont   m_lut2,t2
1a1b0     01 FA 06 F1 |                    add     framebuf2,#1
1a1b4     F5 0F 6F FB |                    djnz    cpl2,#p254
1a1b8     A0 00 90 FD |                    jmp     #p203
1a1bc                 | 
1a1bc     7D 11 E3 FA | p252               rdword char,framebuf2
1a1c0     08 0A 07 F6 |                    mov  t5,#8
1a1c4     02 10 67 F0 | p253               shl  char,#2
1a1c8     88 03 63 F8 |                    getnib  t1,char,#4
1a1cc     03 02 07 F5 |                    and     t1,#3
1a1d0     05 02 07 FA |                    mul     t1,#5
1a1d4     81 05 83 F8 |                    rolnib  t2,t1,#0
1a1d8     FA 0B 6F FB |                    djnz    t5,#p253
1a1dc     82 BB C2 FC |                    xcont   m_lut2,t2
1a1e0     02 FA 06 F1 |                    add     framebuf2,#2
1a1e4     F5 0F 6F FB |                    djnz    cpl2,#p252
1a1e8     70 00 90 FD |                    jmp     #p203
1a1ec                 | 
1a1ec                 | '' ------ 4 bit color modes
1a1ec                 | 
1a1ec     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1a1f0     58 00 90 AD |        if_z   jmp #p251
1a1f4                 | 
1a1f4     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a1f8     2C 00 90 AD |        if_z   jmp #p262
1a1fc                 | 
1a1fc                 | 
1a1fc     7D 11 C3 FA | p263               rdbyte char,framebuf2
1a200     02 0A DC FC |                            rep #5,#2
1a204     88 05 8B F8 |                              rolnib t2,char,#1
1a208     88 05 8B F8 |                                  rolnib t2,char,#1
1a20c     88 05 8B F8 |                              rolnib t2,char,#1
1a210     88 05 8B F8 |                                  rolnib t2,char,#1
1a214     04 10 67 F0 |                              shl char,#4
1a218     82 BB C2 FC |                    xcont   m_lut2,t2
1a21c     01 FA 06 F1 |                    add     framebuf2,#1
1a220     F6 0F 6F FB |                    djnz    cpl2,#p263
1a224     34 00 90 FD |                    jmp     #p203
1a228                 | 
1a228     7D 11 E3 FA | p262               rdword  char,framebuf2
1a22c     04 06 DC FC |                            rep #3,#4
1a230     88 05 9B F8 |                              rolnib t2,char,#3
1a234     88 05 9B F8 |                                  rolnib t2,char,#3
1a238     04 10 67 F0 |                              shl char,#4
1a23c     82 BB C2 FC |                    xcont   m_lut2,t2
1a240     02 FA 06 F1 |                    add     framebuf2,#2
1a244     F8 0F 6F FB |                    djnz    cpl2,#p262
1a248     10 00 90 FD |                    jmp     #p203
1a24c                 | 
1a24c                 | ''---------- all color modes without zoom
1a24c                 | 
1a24c     87 07 D8 FC | p251               rep  #3,cpl2
1a250     7D 11 03 FB |                    rdlong  char,framebuf2
1a254     04 FA 06 F1 |                    add     framebuf2,#4
1a258     88 BB C2 FC |                    xcont   m_lut2,char
1a25c                 |           
1a25c                 |  ''-----------------------------------------------------------------------------------------
1a25c                 | p203           ' getword  mb2,m_border,#0
1a25c     00 24 0F F2 |                 cmp      mb2, #0 wz
1a260     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a264                 | 
1a264     EC FB 9F FD |                 jmp #p302
1a268                 | 
1a268                 | '' -------------------------------------- END of graph  line ---------------------------------
1a268                 | 
1a268                 | '' consts and vars
1a268                 | 
1a268     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1a26c     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1a270     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1a274     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1a278                 | 
1a278     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1a27c                 | 
1a27c                 | '------ these longs will be set by setmode function
1a27c                 | 
1a27c     00 00 00 00 | m_bs            long    0        'blanks before sync
1a280     00 00 00 00 | m_sn            long    0        'sync
1a284     00 00 00 00 | m_bv            long    0        'blanks before visible
1a288     00 00 00 00 | m_vi            long    0        'visible pixels #
1a28c     00 00 00 00 | m_border        long    0        'left/right borders
1a290     00 00 00 00 | m_lut1          long    0        'characters
1a294     00 00 00 00 | i_vborder       long    0        'up/down borders
1a298     00 00 00 00 | i_upporch       long    0        'up porch lines
1a29c     00 00 00 00 | i_vsync         long    0        'vsync lines
1a2a0     00 00 00 00 | i_downporch     long    0        'down porch lines
1a2a4     00 00 00 00 | i_modenum       long    0        'mode #
1a2a8     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1a2ac     00 00 00 00 | i_lines         long    0        'scanlines #
1a2b0     00 00 00 00 | i_clock         long    0
1a2b4     00 00 00 00 | i_hubset        long    0
1a2b8     00 00 00 00 | i_totalvis      long    0
1a2bc                 | 
1a2bc                 | '-------------------------------------
1a2bc                 | 
1a2bc     00 00 00 00 | m_lut2          long    0
1a2c0                 | 
1a2c0                 | colordepth
1a2c0     00 00 00 00 | linestart       long    0
1a2c4     00 00 00 00 | linenum         long    0
1a2c8     00 01 00 00 | lutaddr         long    256
1a2cc                 | 
1a2cc     0E 00 00 00 | cursorsh        long    14
1a2d0     00 00 00 00 | frames          long    0
1a2d4     00 00 00 00 | cursorx         long    0
1a2d8     00 00 00 00 | cursory         long    0
1a2dc     00 00 00 00 | cursorpos       long    0
1a2e0     00 00 00 00 | cursorpos2      long    0
1a2e4     00 00 00 00 | fontstart       long    0
1a2e8     00 00 00 00 | border2         long 0
1a2ec     00 00 81 70 | lutiv           long $70810000
1a2f0     00 00 88 00 | lutt1           long $00880000
1a2f4     00 00 80 00 | lutg1           long $00800000
1a2f8     00 00 80 10 | lutg2           long $10800000
1a2fc     00 00 80 20 | lutg4           long $20800000
1a300     00 00 80 30 | lutg8           long $30800000
1a304     00 00 00 00 | framebuf        long 0
1a308     00 00 00 00 | fontbuf         long 0
1a30c     00 00 00 00 | borderptr       long 0
1a310     00 00 00 00 | vblankptr       long 0
1a314     00 00 00 00 | cursorptr       long 0
1a318     00 00 00 00 | modeptr         long 0
1a31c     00 00 00 00 | paletteptr      long 0
1a320     00 00 00 00 | dlptr           long 0
1a324                 | fontnumptr      res     1
1a324                 | fontnumptr      res     1
1a324                 | hbase           res     1
1a324                 | hbase           res     1
1a324                 | borderptr2      res     1
1a324                 | borderptr2      res     1
1a324                 | dlptr2 res 1
1a324                 | dlptr2 res 1
1a324                 | dl              res 1
1a324                 | dl              res 1
1a324                 | ii              res     1
1a324                 | ii              res     1
1a324                 | framebuf2       res     1
1a324                 | framebuf2       res     1
1a324                 | hsync0          res     1
1a324                 | hsync0          res     1
1a324                 | hsync1          res     1
1a324                 | hsync1          res     1
1a324                 | fontline        res     1
1a324                 | fontline        res     1
1a324                 | t1              res     1
1a324                 | t1              res     1
1a324                 | t2              res     1
1a324                 | t2              res     1
1a324                 | t3 res 1
1a324                 | t3 res 1
1a324                 | t4 res 1
1a324                 | t4 res 1
1a324                 | t5 res 1
1a324                 | t5 res 1
1a324                 | skippattern res 1
1a324                 | skippattern res 1
1a324                 | cpl2 res 1
1a324                 | cpl2 res 1
1a324                 | char            res     1
1a324                 | char            res     1
1a324                 | backcolor       res     1
1a324                 | backcolor       res     1
1a324                 | charcolor       res     1
1a324                 | charcolor       res     1
1a324                 | zoom res 1
1a324                 | zoom res 1
1a324     00 00 00 00 | rcnt long 0 'dl repeat count
1a328     00 00 00 00 | rcnt2 long 0
1a32c     00 00 00 00 | rcnt2a long 0
1a330     00 00 00 00 | roffset long 0
1a334     00 00 00 00 | rdl long 0  'dl repeat line
1a338     00 00 00 00 | dlc long 0 'dl command
1a33c     00 00 00 00 | mb2 long 0
1a340     00 00 00 00 | aend             long 0
1a344                 |                 fit     496                     '
1a344                 | _trackerplayer_spin2_dat_
1a344                 | 
1a344     00 00 00 00 | null             long  0
1a348     46 52 45 51 
1a34c     46 52 45 51 
1a350     46 52 45 51 
1a354     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1a358     46 52 45 51 
1a35c     46 52 45 51 
1a360     46 52 45 51 
1a364     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a368     46 52 45 51 
1a36c     46 52 45 51 
1a370     46 52 45 51 
1a374     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a378     46 52 45 51 
1a37c     46 52 45 51 
1a380     46 52 45 51 
1a384     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a388     46 52 45 51 
1a38c     46 52 45 51 
1a390     46 52 45 51 
1a394     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a398     46 52 45 51 
1a39c     46 52 45 51 
1a3a0     46 52 45 51 
1a3a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3a8     46 52 45 51 
1a3ac     46 52 45 51 
1a3b0     46 52 45 51 
1a3b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3b8     46 52 45 51 
1a3bc     46 52 45 51 
1a3c0     46 52 45 51 
1a3c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3c8     46 52 45 51 
1a3cc     46 52 45 51 
1a3d0     46 52 45 51 
1a3d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3d8     46 52 45 51 
1a3dc     46 52 45 51 
1a3e0     46 52 45 51 
1a3e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3e8     46 52 45 51 
1a3ec     46 52 45 51 
1a3f0     46 52 45 51 
1a3f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3f8     46 52 45 51 
1a3fc     46 52 45 51 
1a400     46 52 45 51 
1a404     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a408     46 52 45 51 
1a40c     46 52 45 51 
1a410     46 52 45 51 
1a414     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a418     46 52 45 51 
1a41c     46 52 45 51 
1a420     46 52 45 51 
1a424     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a428     46 52 45 51 
1a42c     46 52 45 51 
1a430     46 52 45 51 
1a434     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a438     46 52 45 51 
1a43c     46 52 45 51 
1a440     46 52 45 51 
1a444     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a448     46 52 45 51 
1a44c     46 52 45 51 
1a450     46 52 45 51 
1a454     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a458     46 52 45 51 
1a45c     46 52 45 51 
1a460     46 52 45 51 
1a464     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a468     46 52 45 51 
1a46c     46 52 45 51 
1a470     46 52 45 51 
1a474     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a478     46 52 45 51 
1a47c     46 52 45 51 
1a480     46 52 45 51 
1a484     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a488     46 52 45 51 
1a48c     46 52 45 51 
1a490     46 52 45 51 
1a494     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a498     46 52 45 51 
1a49c     46 52 45 51 
1a4a0     46 52 45 51 
1a4a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4a8     46 52 45 51 
1a4ac     46 52 45 51 
1a4b0     46 52 45 51 
1a4b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4b8     46 52 45 51 
1a4bc     46 52 45 51 
1a4c0     46 52 45 51 
1a4c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4c8     46 52 45 51 
1a4cc     46 52 45 51 
1a4d0     46 52 45 51 
1a4d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4d8     46 52 45 51 
1a4dc     46 52 45 51 
1a4e0     46 52 45 51 
1a4e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4e8     46 52 45 51 
1a4ec     46 52 45 51 
1a4f0     46 52 45 51 
1a4f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4f8     46 52 45 51 
1a4fc     46 52 45 51 
1a500     46 52 45 51 
1a504     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a508     46 52 45 51 
1a50c     46 52 45 51 
1a510     46 52 45 51 
1a514     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a518     46 52 45 51 
1a51c     46 52 45 51 
1a520     46 52 45 51 
1a524     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a528     46 52 45 51 
1a52c     46 52 45 51 
1a530     46 52 45 51 
1a534     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a538     46 52 45 51 
1a53c     46 52 45 51 
1a540     46 52 45 51 
1a544     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a548     46 52 45 51 
1a54c     46 52 45 51 
1a550     46 52 45 51 
1a554     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a558     46 52 45 51 
1a55c     46 52 45 51 
1a560     46 52 45 51 
1a564     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a568     46 52 45 51 
1a56c     46 52 45 51 
1a570     46 52 45 51 
1a574     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a578     46 52 45 51 
1a57c     46 52 45 51 
1a580     46 52 45 51 
1a584     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a588     46 52 45 51 
1a58c     46 52 45 51 
1a590     46 52 45 51 
1a594     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a598     46 52 45 51 
1a59c     46 52 45 51 
1a5a0     46 52 45 51 
1a5a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5a8     46 52 45 51 
1a5ac     46 52 45 51 
1a5b0     46 52 45 51 
1a5b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5b8     46 52 45 51 
1a5bc     46 52 45 51 
1a5c0     46 52 45 51 
1a5c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5c8     46 52 45 51 
1a5cc     46 52 45 51 
1a5d0     46 52 45 51 
1a5d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5d8     46 52 45 51 
1a5dc     46 52 45 51 
1a5e0     46 52 45 51 
1a5e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5e8     46 52 45 51 
1a5ec     46 52 45 51 
1a5f0     46 52 45 51 
1a5f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5f8     46 52 45 51 
1a5fc     46 52 45 51 
1a600     46 52 45 51 
1a604     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a608     46 52 45 51 
1a60c     46 52 45 51 
1a610     46 52 45 51 
1a614     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a618     46 52 45 51 
1a61c     46 52 45 51 
1a620     46 52 45 51 
1a624     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a628     46 52 45 51 
1a62c     46 52 45 51 
1a630     46 52 45 51 
1a634     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a638     46 52 45 51 
1a63c     46 52 45 51 
1a640     46 52 45 51 
1a644     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a648     46 52 45 51 
1a64c     46 52 45 51 
1a650     46 52 45 51 
1a654     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a658     46 52 45 51 
1a65c     46 52 45 51 
1a660     46 52 45 51 
1a664     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a668     46 52 45 51 
1a66c     46 52 45 51 
1a670     46 52 45 51 
1a674     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a678     46 52 45 51 
1a67c     46 52 45 51 
1a680     46 52 45 51 
1a684     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a688     46 52 45 51 
1a68c     46 52 45 51 
1a690     46 52 45 51 
1a694     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a698     46 52 45 51 
1a69c     46 52 45 51 
1a6a0     46 52 45 51 
1a6a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6a8     46 52 45 51 
1a6ac     46 52 45 51 
1a6b0     46 52 45 51 
1a6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6b8     46 52 45 51 
1a6bc     46 52 45 51 
1a6c0     46 52 45 51 
1a6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6c8     46 52 45 51 
1a6cc     46 52 45 51 
1a6d0     46 52 45 51 
1a6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6d8     46 52 45 51 
1a6dc     46 52 45 51 
1a6e0     46 52 45 51 
1a6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6e8     46 52 45 51 
1a6ec     46 52 45 51 
1a6f0     46 52 45 51 
1a6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6f8     46 52 45 51 
1a6fc     46 52 45 51 
1a700     46 52 45 51 
1a704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a708     46 52 45 51 
1a70c     46 52 45 51 
1a710     46 52 45 51 
1a714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a718     46 52 45 51 
1a71c     46 52 45 51 
1a720     46 52 45 51 
1a724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a728     46 52 45 51 
1a72c     46 52 45 51 
1a730     46 52 45 51 
1a734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a738     46 52 45 51 
1a73c     46 52 45 51 
1a740     46 52 45 51 
1a744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a748     46 52 45 51 
1a74c     46 52 45 51 
1a750     46 52 45 51 
1a754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a758     46 52 45 51 
1a75c     46 52 45 51 
1a760     46 52 45 51 
1a764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a768     46 52 45 51 
1a76c     46 52 45 51 
1a770     46 52 45 51 
1a774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a778     46 52 45 51 
1a77c     46 52 45 51 
1a780     46 52 45 51 
1a784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a788     46 52 45 51 
1a78c     46 52 45 51 
1a790     46 52 45 51 
1a794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a798     46 52 45 51 
1a79c     46 52 45 51 
1a7a0     46 52 45 51 
1a7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7a8     46 52 45 51 
1a7ac     46 52 45 51 
1a7b0     46 52 45 51 
1a7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7b8     46 52 45 51 
1a7bc     46 52 45 51 
1a7c0     46 52 45 51 
1a7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7c8     46 52 45 51 
1a7cc     46 52 45 51 
1a7d0     46 52 45 51 
1a7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7d8     46 52 45 51 
1a7dc     46 52 45 51 
1a7e0     46 52 45 51 
1a7e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7e8     46 52 45 51 
1a7ec     46 52 45 51 
1a7f0     46 52 45 51 
1a7f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7f8     46 52 45 51 
1a7fc     46 52 45 51 
1a800     46 52 45 51 
1a804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a808     46 52 45 51 
1a80c     46 52 45 51 
1a810     46 52 45 51 
1a814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a818     46 52 45 51 
1a81c     46 52 45 51 
1a820     46 52 45 51 
1a824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a828     46 52 45 51 
1a82c     46 52 45 51 
1a830     46 52 45 51 
1a834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a838     46 52 45 51 
1a83c     46 52 45 51 
1a840     46 52 45 51 
1a844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a848     46 52 45 51 
1a84c     46 52 45 51 
1a850     46 52 45 51 
1a854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a858     46 52 45 51 
1a85c     46 52 45 51 
1a860     46 52 45 51 
1a864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a868     46 52 45 51 
1a86c     46 52 45 51 
1a870     46 52 45 51 
1a874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a878     46 52 45 51 
1a87c     46 52 45 51 
1a880     46 52 45 51 
1a884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a888     46 52 45 51 
1a88c     46 52 45 51 
1a890     46 52 45 51 
1a894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a898     46 52 45 51 
1a89c     46 52 45 51 
1a8a0     46 52 45 51 
1a8a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8a8     46 52 45 51 
1a8ac     46 52 45 51 
1a8b0     46 52 45 51 
1a8b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8b8     46 52 45 51 
1a8bc     46 52 45 51 
1a8c0     46 52 45 51 
1a8c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8c8     46 52 45 51 
1a8cc     46 52 45 51 
1a8d0     46 52 45 51 
1a8d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8d8     46 52 45 51 
1a8dc     46 52 45 51 
1a8e0     46 52 45 51 
1a8e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8e8     46 52 45 51 
1a8ec     46 52 45 51 
1a8f0     46 52 45 51 
1a8f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8f8     46 52 45 51 
1a8fc     46 52 45 51 
1a900     46 52 45 51 
1a904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a908     46 52 45 51 
1a90c     46 52 45 51 
1a910     46 52 45 51 
1a914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a918     46 52 45 51 
1a91c     46 52 45 51 
1a920     46 52 45 51 
1a924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a928     46 52 45 51 
1a92c     46 52 45 51 
1a930     46 52 45 51 
1a934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a938     46 52 45 51 
1a93c     46 52 45 51 
1a940     46 52 45 51 
1a944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a948     46 52 45 51 
1a94c     46 52 45 51 
1a950     46 52 45 51 
1a954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a958     46 52 45 51 
1a95c     46 52 45 51 
1a960     46 52 45 51 
1a964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a968     46 52 45 51 
1a96c     46 52 45 51 
1a970     46 52 45 51 
1a974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a978     46 52 45 51 
1a97c     46 52 45 51 
1a980     46 52 45 51 
1a984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a988     46 52 45 51 
1a98c     46 52 45 51 
1a990     46 52 45 51 
1a994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a998     46 52 45 51 
1a99c     46 52 45 51 
1a9a0     46 52 45 51 
1a9a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9a8     46 52 45 51 
1a9ac     46 52 45 51 
1a9b0     46 52 45 51 
1a9b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9b8     46 52 45 51 
1a9bc     46 52 45 51 
1a9c0     46 52 45 51 
1a9c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9c8     46 52 45 51 
1a9cc     46 52 45 51 
1a9d0     46 52 45 51 
1a9d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9d8     46 52 45 51 
1a9dc     46 52 45 51 
1a9e0     46 52 45 51 
1a9e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9e8     46 52 45 51 
1a9ec     46 52 45 51 
1a9f0     46 52 45 51 
1a9f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9f8     46 52 45 51 
1a9fc     46 52 45 51 
1aa00     46 52 45 51 
1aa04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa08     46 52 45 51 
1aa0c     46 52 45 51 
1aa10     46 52 45 51 
1aa14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa18     46 52 45 51 
1aa1c     46 52 45 51 
1aa20     46 52 45 51 
1aa24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa28     46 52 45 51 
1aa2c     46 52 45 51 
1aa30     46 52 45 51 
1aa34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa38     46 52 45 51 
1aa3c     46 52 45 51 
1aa40     46 52 45 51 
1aa44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa48     46 52 45 51 
1aa4c     46 52 45 51 
1aa50     46 52 45 51 
1aa54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa58     46 52 45 51 
1aa5c     46 52 45 51 
1aa60     46 52 45 51 
1aa64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa68     46 52 45 51 
1aa6c     46 52 45 51 
1aa70     46 52 45 51 
1aa74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa78     46 52 45 51 
1aa7c     46 52 45 51 
1aa80     46 52 45 51 
1aa84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa88     46 52 45 51 
1aa8c     46 52 45 51 
1aa90     46 52 45 51 
1aa94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa98     46 52 45 51 
1aa9c     46 52 45 51 
1aaa0     46 52 45 51 
1aaa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaa8     46 52 45 51 
1aaac     46 52 45 51 
1aab0     46 52 45 51 
1aab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aab8     46 52 45 51 
1aabc     46 52 45 51 
1aac0     46 52 45 51 
1aac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aac8     46 52 45 51 
1aacc     46 52 45 51 
1aad0     46 52 45 51 
1aad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aad8     46 52 45 51 
1aadc     46 52 45 51 
1aae0     46 52 45 51 
1aae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aae8     46 52 45 51 
1aaec     46 52 45 51 
1aaf0     46 52 45 51 
1aaf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaf8     46 52 45 51 
1aafc     46 52 45 51 
1ab00     46 52 45 51 
1ab04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab08     46 52 45 51 
1ab0c     46 52 45 51 
1ab10     46 52 45 51 
1ab14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab18     46 52 45 51 
1ab1c     46 52 45 51 
1ab20     46 52 45 51 
1ab24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab28     46 52 45 51 
1ab2c     46 52 45 51 
1ab30     46 52 45 51 
1ab34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab38     46 52 45 51 
1ab3c     46 52 45 51 
1ab40     46 52 45 51 
1ab44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab48     46 52 45 51 
1ab4c     46 52 45 51 
1ab50     46 52 45 51 
1ab54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab58     46 52 45 51 
1ab5c     46 52 45 51 
1ab60     46 52 45 51 
1ab64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab68     46 52 45 51 
1ab6c     46 52 45 51 
1ab70     46 52 45 51 
1ab74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab78     46 52 45 51 
1ab7c     46 52 45 51 
1ab80     46 52 45 51 
1ab84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab88     46 52 45 51 
1ab8c     46 52 45 51 
1ab90     46 52 45 51 
1ab94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab98     46 52 45 51 
1ab9c     46 52 45 51 
1aba0     46 52 45 51 
1aba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aba8     46 52 45 51 
1abac     46 52 45 51 
1abb0     46 52 45 51 
1abb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abb8     46 52 45 51 
1abbc     46 52 45 51 
1abc0     46 52 45 51 
1abc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abc8     46 52 45 51 
1abcc     46 52 45 51 
1abd0     46 52 45 51 
1abd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abd8     46 52 45 51 
1abdc     46 52 45 51 
1abe0     46 52 45 51 
1abe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abe8     46 52 45 51 
1abec     46 52 45 51 
1abf0     46 52 45 51 
1abf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abf8     46 52 45 51 
1abfc     46 52 45 51 
1ac00     46 52 45 51 
1ac04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac08     46 52 45 51 
1ac0c     46 52 45 51 
1ac10     46 52 45 51 
1ac14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac18     46 52 45 51 
1ac1c     46 52 45 51 
1ac20     46 52 45 51 
1ac24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac28     46 52 45 51 
1ac2c     46 52 45 51 
1ac30     46 52 45 51 
1ac34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac38     46 52 45 51 
1ac3c     46 52 45 51 
1ac40     46 52 45 51 
1ac44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac48     46 52 45 51 
1ac4c     46 52 45 51 
1ac50     46 52 45 51 
1ac54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac58     46 52 45 51 
1ac5c     46 52 45 51 
1ac60     46 52 45 51 
1ac64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac68     46 52 45 51 
1ac6c     46 52 45 51 
1ac70     46 52 45 51 
1ac74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac78     46 52 45 51 
1ac7c     46 52 45 51 
1ac80     46 52 45 51 
1ac84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac88     46 52 45 51 
1ac8c     46 52 45 51 
1ac90     46 52 45 51 
1ac94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac98     46 52 45 51 
1ac9c     46 52 45 51 
1aca0     46 52 45 51 
1aca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aca8     46 52 45 51 
1acac     46 52 45 51 
1acb0     46 52 45 51 
1acb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acb8     46 52 45 51 
1acbc     46 52 45 51 
1acc0     46 52 45 51 
1acc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acc8     46 52 45 51 
1accc     46 52 45 51 
1acd0     46 52 45 51 
1acd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acd8     46 52 45 51 
1acdc     46 52 45 51 
1ace0     46 52 45 51 
1ace4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ace8     46 52 45 51 
1acec     46 52 45 51 
1acf0     46 52 45 51 
1acf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acf8     46 52 45 51 
1acfc     46 52 45 51 
1ad00     46 52 45 51 
1ad04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad08     46 52 45 51 
1ad0c     46 52 45 51 
1ad10     46 52 45 51 
1ad14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad18     46 52 45 51 
1ad1c     46 52 45 51 
1ad20     46 52 45 51 
1ad24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad28     46 52 45 51 
1ad2c     46 52 45 51 
1ad30     46 52 45 51 
1ad34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad38     46 52 45 51 
1ad3c     46 52 45 51 
1ad40     46 52 45 51 
1ad44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad48     46 52 45 51 
1ad4c     46 52 45 51 
1ad50     46 52 45 51 
1ad54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad58     46 52 45 51 
1ad5c     46 52 45 51 
1ad60     46 52 45 51 
1ad64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad68     46 52 45 51 
1ad6c     46 52 45 51 
1ad70     46 52 45 51 
1ad74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad78     46 52 45 51 
1ad7c     46 52 45 51 
1ad80     46 52 45 51 
1ad84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad88     46 52 45 51 
1ad8c     46 52 45 51 
1ad90     46 52 45 51 
1ad94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad98     46 52 45 51 
1ad9c     46 52 45 51 
1ada0     46 52 45 51 
1ada4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ada8     46 52 45 51 
1adac     46 52 45 51 
1adb0     46 52 45 51 
1adb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adb8     46 52 45 51 
1adbc     46 52 45 51 
1adc0     46 52 45 51 
1adc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adc8     46 52 45 51 
1adcc     46 52 45 51 
1add0     46 52 45 51 
1add4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1add8     46 52 45 51 
1addc     46 52 45 51 
1ade0     46 52 45 51 
1ade4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ade8     46 52 45 51 
1adec     46 52 45 51 
1adf0     46 52 45 51 
1adf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adf8     46 52 45 51 
1adfc     46 52 45 51 
1ae00     46 52 45 51 
1ae04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae08     46 52 45 51 
1ae0c     46 52 45 51 
1ae10     46 52 45 51 
1ae14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae18     46 52 45 51 
1ae1c     46 52 45 51 
1ae20     46 52 45 51 
1ae24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae28     46 52 45 51 
1ae2c     46 52 45 51 
1ae30     46 52 45 51 
1ae34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae38     46 52 45 51 
1ae3c     46 52 45 51 
1ae40     46 52 45 51 
1ae44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae48     46 52 45 51 
1ae4c     46 52 45 51 
1ae50     46 52 45 51 
1ae54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae58     46 52 45 51 
1ae5c     46 52 45 51 
1ae60     46 52 45 51 
1ae64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae68     46 52 45 51 
1ae6c     46 52 45 51 
1ae70     46 52 45 51 
1ae74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae78     46 52 45 51 
1ae7c     46 52 45 51 
1ae80     46 52 45 51 
1ae84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae88     46 52 45 51 
1ae8c     46 52 45 51 
1ae90     46 52 45 51 
1ae94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae98     46 52 45 51 
1ae9c     46 52 45 51 
1aea0     46 52 45 51 
1aea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aea8     46 52 45 51 
1aeac     46 52 45 51 
1aeb0     46 52 45 51 
1aeb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aeb8     46 52 45 51 
1aebc     46 52 45 51 
1aec0     46 52 45 51 
1aec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aec8     46 52 45 51 
1aecc     46 52 45 51 
1aed0     46 52 45 51 
1aed4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aed8     46 52 45 51 
1aedc     46 52 45 51 
1aee0     46 52 45 51 
1aee4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aee8                 | 
1aee8     00 00 00 00 
1aeec     18 00 00 00 
1aef0     31 00 00 00 
1aef4     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1aef8     61 00 00 00 
1aefc     78 00 00 00 
1af00     8D 00 00 00 
1af04     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1af08     B4 00 00 00 
1af0c     C5 00 00 00 
1af10     D4 00 00 00 
1af14     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1af18     EB 00 00 00 
1af1c     F4 00 00 00 
1af20     FA 00 00 00 
1af24     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1af28     FF 00 00 00 
1af2c     FD 00 00 00 
1af30     FA 00 00 00 
1af34     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1af38     EB 00 00 00 
1af3c     E0 00 00 00 
1af40     D4 00 00 00 
1af44     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1af48     B4 00 00 00 
1af4c     A1 00 00 00 
1af50     8D 00 00 00 
1af54     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1af58     61 00 00 00 
1af5c     4A 00 00 00 
1af60     31 00 00 00 
1af64     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1af68     00 00 00 00 
1af6c     E8 FF FF FF 
1af70     CF FF FF FF 
1af74     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1af78     9F FF FF FF 
1af7c     88 FF FF FF 
1af80     73 FF FF FF 
1af84     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1af88     4C FF FF FF 
1af8c     3B FF FF FF 
1af90     2C FF FF FF 
1af94     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1af98     15 FF FF FF 
1af9c     0C FF FF FF 
1afa0     06 FF FF FF 
1afa4     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1afa8     01 FF FF FF 
1afac     03 FF FF FF 
1afb0     06 FF FF FF 
1afb4     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1afb8     15 FF FF FF 
1afbc     20 FF FF FF 
1afc0     2C FF FF FF 
1afc4     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1afc8     4C FF FF FF 
1afcc     5F FF FF FF 
1afd0     73 FF FF FF 
1afd4     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1afd8     9F FF FF FF 
1afdc     B6 FF FF FF 
1afe0     CF FF FF FF 
1afe4     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1afe8                 | 
1afe8     58 03 28 03 
1afec     FA 02 D0 02 
1aff0     A6 02 80 02 
1aff4     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1aff8     1A 02 FC 01 
1affc     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1b000     AC 01 94 01 
1b004     7D 01 68 01 
1b008     53 01 40 01 
1b00c     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1b010     0D 01 FE 00 
1b014     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1b018     D6 00 CA 00 
1b01c     BE 00 B4 00 
1b020     AA 00 A0 00 
1b024     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1b028     87 00 7F 00 
1b02c     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1b030     6B 00 22 03 
1b034     F5 02 CB 02 
1b038     A2 02 7D 02 
1b03c     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1b040     17 02 F9 01 
1b044     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1b048     A9 01 91 01 
1b04c     7B 01 65 01 
1b050     51 01 3E 01 
1b054     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1b058     0C 01 FD 00 
1b05c     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1b060     D5 00 C9 00 
1b064     BD 00 B3 00 
1b068     A9 00 9F 00 
1b06c     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1b070     86 00 7E 00 
1b074     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1b078     4C 03 1C 03 
1b07c     F0 02 C5 02 
1b080     9E 02 78 02 
1b084     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1b088     14 02 F6 01 
1b08c     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1b090     A6 01 8E 01 
1b094     78 01 63 01 
1b098     4F 01 3C 01 
1b09c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1b0a0     0A 01 FB 00 
1b0a4     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1b0a8     D3 00 C7 00 
1b0ac     BC 00 B1 00 
1b0b0     A7 00 9E 00 
1b0b4     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1b0b8     85 00 7D 00 
1b0bc     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1b0c0     46 03 17 03 
1b0c4     EA 02 C0 02 
1b0c8     99 02 74 02 
1b0cc     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1b0d0     10 02 F2 01 
1b0d4     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1b0d8     A3 01 8B 01 
1b0dc     75 01 60 01 
1b0e0     4C 01 3A 01 
1b0e4     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1b0e8     08 01 F9 00 
1b0ec     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1b0f0     D1 00 C6 00 
1b0f4     BB 00 B0 00 
1b0f8     A6 00 9D 00 
1b0fc     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1b100     84 00 7D 00 
1b104     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1b108     40 03 11 03 
1b10c     E5 02 BB 02 
1b110     94 02 6F 02 
1b114     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1b118     0C 02 EF 01 
1b11c     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1b120     A0 01 88 01 
1b124     72 01 5E 01 
1b128     4A 01 38 01 
1b12c     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1b130     06 01 F7 00 
1b134     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1b138     D0 00 C4 00 
1b13c     B9 00 AF 00 
1b140     A5 00 9C 00 
1b144     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1b148     83 00 7C 00 
1b14c     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1b150     3A 03 0B 03 
1b154     E0 02 B6 02 
1b158     8F 02 6B 02 
1b15c     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1b160     08 02 EB 01 
1b164     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1b168     9D 01 86 01 
1b16c     70 01 5B 01 
1b170     48 01 35 01 
1b174     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1b178     04 01 F5 00 
1b17c     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1b180     CE 00 C3 00 
1b184     B8 00 AE 00 
1b188     A4 00 9B 00 
1b18c     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1b190     82 00 7B 00 
1b194     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1b198     34 03 06 03 
1b19c     DA 02 B1 02 
1b1a0     8B 02 66 02 
1b1a4     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1b1a8     04 02 E7 01 
1b1ac     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1b1b0     9A 01 83 01 
1b1b4     6D 01 59 01 
1b1b8     45 01 33 01 
1b1bc     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1b1c0     02 01 F4 00 
1b1c4     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1b1c8     CD 00 C1 00 
1b1cc     B7 00 AC 00 
1b1d0     A3 00 9A 00 
1b1d4     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1b1d8     81 00 7A 00 
1b1dc     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1b1e0     2E 03 00 03 
1b1e4     D5 02 AC 02 
1b1e8     86 02 62 02 
1b1ec     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1b1f0     01 02 E4 01 
1b1f4     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1b1f8     97 01 80 01 
1b1fc     6B 01 56 01 
1b200     43 01 31 01 
1b204     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1b208     00 01 F2 00 
1b20c     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1b210     CC 00 C0 00 
1b214     B5 00 AB 00 
1b218     A1 00 98 00 
1b21c     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1b220     80 00 79 00 
1b224     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1b228     8B 03 58 03 
1b22c     28 03 FA 02 
1b230     D0 02 A6 02 
1b234     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1b238     3A 02 1A 02 
1b23c     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1b240     C5 01 AC 01 
1b244     94 01 7D 01 
1b248     68 01 53 01 
1b24c     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1b250     1D 01 0D 01 
1b254     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1b258     E2 00 D6 00 
1b25c     CA 00 BE 00 
1b260     B4 00 AA 00 
1b264     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1b268     8F 00 87 00 
1b26c     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1b270     84 03 52 03 
1b274     22 03 F5 02 
1b278     CB 02 A3 02 
1b27c     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1b280     37 02 17 02 
1b284     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1b288     C2 01 A9 01 
1b28c     91 01 7B 01 
1b290     65 01 51 01 
1b294     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1b298     1C 01 0C 01 
1b29c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1b2a0     E1 00 D4 00 
1b2a4     C8 00 BD 00 
1b2a8     B3 00 A9 00 
1b2ac     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1b2b0     8E 00 86 00 
1b2b4     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1b2b8     7E 03 4C 03 
1b2bc     1C 03 F0 02 
1b2c0     C5 02 9E 02 
1b2c4     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1b2c8     33 02 14 02 
1b2cc     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1b2d0     BF 01 A6 01 
1b2d4     8E 01 78 01 
1b2d8     63 01 4F 01 
1b2dc     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1b2e0     1A 01 0A 01 
1b2e4     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1b2e8     DF 00 D3 00 
1b2ec     C7 00 BC 00 
1b2f0     B1 00 A7 00 
1b2f4     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1b2f8     8D 00 85 00 
1b2fc     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1b300     77 03 46 03 
1b304     17 03 EA 02 
1b308     C0 02 99 02 
1b30c     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1b310     2F 02 10 02 
1b314     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1b318     BC 01 A3 01 
1b31c     8B 01 75 01 
1b320     60 01 4C 01 
1b324     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1b328     18 01 08 01 
1b32c     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1b330     DE 00 D1 00 
1b334     C6 00 BB 00 
1b338     B0 00 A6 00 
1b33c     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1b340     8C 00 84 00 
1b344     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1b348     71 03 40 03 
1b34c     11 03 E5 02 
1b350     BB 02 94 02 
1b354     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1b358     2B 02 0C 02 
1b35c     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1b360     B9 01 A0 01 
1b364     88 01 72 01 
1b368     5E 01 4A 01 
1b36c     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1b370     16 01 06 01 
1b374     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1b378     DC 00 D0 00 
1b37c     C4 00 B9 00 
1b380     AF 00 A5 00 
1b384     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1b388     8B 00 83 00 
1b38c     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1b390     6B 03 3A 03 
1b394     0B 03 E0 02 
1b398     B6 02 8F 02 
1b39c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1b3a0     27 02 08 02 
1b3a4     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1b3a8     B5 01 9D 01 
1b3ac     86 01 70 01 
1b3b0     5B 01 48 01 
1b3b4     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1b3b8     14 01 04 01 
1b3bc     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1b3c0     DB 00 CE 00 
1b3c4     C3 00 B8 00 
1b3c8     AE 00 A4 00 
1b3cc     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1b3d0     8A 00 82 00 
1b3d4     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1b3d8     64 03 34 03 
1b3dc     06 03 DA 02 
1b3e0     B1 02 8B 02 
1b3e4     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1b3e8     23 02 04 02 
1b3ec     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1b3f0     B2 01 9A 01 
1b3f4     83 01 6D 01 
1b3f8     59 01 45 01 
1b3fc     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1b400     12 01 02 01 
1b404     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1b408     D9 00 CD 00 
1b40c     C1 00 B7 00 
1b410     AC 00 A3 00 
1b414     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1b418     89 00 81 00 
1b41c     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1b420     5E 03 2E 03 
1b424     00 03 D5 02 
1b428     AC 02 86 02 
1b42c     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1b430     1F 02 01 02 
1b434     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1b438     AF 01 97 01 
1b43c     80 01 6B 01 
1b440     56 01 43 01 
1b444     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1b448     10 01 00 01 
1b44c     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1b450     D8 00 CB 00 
1b454     C0 00 B5 00 
1b458     AB 00 A1 00 
1b45c     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1b460     88 00 80 00 
1b464     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1b468                 | 	alignl
1b468                 | _audio019_spin2_dat_
1b468                 | 
1b468                 | audio       org     0
1b468     00 F2 07 F6 | 			mov     ptrb,#0
1b46c     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1b470     0E C8 1C FC |             wxpin   #100,#left
1b474     0F 7A 05 FC |             wrpin   dac,#right
1b478     0F C8 1C FC |             wxpin   #100,#right
1b47c     41 9C 64 FD |             dirh    #left addpins 1
1b480     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1b484     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1b488     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1b48c                 |             
1b48c                 | '---------------------------------------------------------------------------------        
1b48c                 | '----------------- The main loop -------------------------------------------------
1b48c                 | '---------------------------------------------------------------------------------
1b48c                 | 
1b48c     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1b490     10 00 90 CD |       if_c  jmp     #loop1
1b494                 |   
1b494     09 4A 05 F6 |             mov     cn,#9
1b498     81 4A 8D F9 | p402        altd    cn,#a21000000
1b49c     80 00 80 F1 |             sub     0-0,a20000000
1b4a0     FD 4B 6D FB |             djnz    cn,#p402
1b4a4                 |     
1b4a4     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
1b4a8     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
1b4ac     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
1b4b0     01 4A 05 C6 |     if_c    mov     cn,#1
1b4b4     85 4C 39 F3 |             fle     ct,time3 wcz
1b4b8     02 4A 05 C6 |     if_c    mov     cn,#2     
1b4bc     86 4C 39 F3 |             fle     ct,time4 wcz
1b4c0     03 4A 05 C6 |     if_c    mov     cn,#3
1b4c4     87 4C 39 F3 |             fle     ct,time5 wcz
1b4c8     04 4A 05 C6 |     if_c    mov     cn,#4
1b4cc     88 4C 39 F3 |             fle     ct,time6 wcz
1b4d0     05 4A 05 C6 |     if_c    mov     cn,#5
1b4d4     89 4C 39 F3 |             fle     ct,time7 wcz
1b4d8     06 4A 05 C6 |     if_c    mov     cn,#6
1b4dc     8A 4C 39 F3 |             fle     ct,time8 wcz
1b4e0     07 4A 05 C6 |     if_c    mov     cn,#7
1b4e4                 | 
1b4e4                 | 
1b4e4                 | '----------------------------------------------------------------------------------
1b4e4                 | '------------- Compute channel samples --------------------------------------------
1b4e4                 | '----------------------------------------------------------------------------------
1b4e4                 | 
1b4e4                 | 
1b4e4     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1b4e8     05 20 65 F0 |             shl     channeladd,#5
1b4ec     90 F0 03 F1 |             add     ptra,channeladd
1b4f0                 | 
1b4f0     28 0E 64 FD |             setq    #7               
1b4f4     00 31 05 FB |             rdlong  pointer0,ptra
1b4f8                 |             
1b4f8     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
1b4fc     9D 44 31 F9 |     	    getword avol0,volpan0,#0
1b500     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
1b504     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
1b508                 | 
1b508     83 4A 95 F9 |             alts    cn, #time1
1b50c     00 4E 01 F6 |             mov     dt0,0-0   
1b510     82 4E 81 F1 |             sub     dt0,time0
1b514                 | 
1b514     83 4A 8D F9 |             altd    cn, #time1
1b518     A0 00 00 F1 |             add     0-0,afreq0  	
1b51c                 | 
1b51c     A1 30 01 F1 |             add     pointer0,askip0
1b520     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
1b524     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
1b528     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
1b52c     98 24 01 F6 |             mov     qq,pointer0
1b530     9A 24 01 F1 |             add     qq,sstart0
1b534                 | 
1b534     1F 34 0D F4 |             testb   sstart0,#31 wz
1b538                 | 
1b538     92 26 C1 5A |     if_nz   rdbyte  spl,qq
1b53c     08 26 65 50 |     if_nz   shl     spl,#8
1b540     92 26 E1 AA |     if_z    rdword  spl,qq
1b544                 | 
1b544     A2 26 31 FA |             scas    spl,avol0
1b548     00 26 01 F6 |             mov     spl,0-0
1b54c                 |  
1b54c     A3 26 31 FA |             scas    spl,apan0
1b550     00 50 01 F6 |             mov     ls0,0-0
1b554                 |  
1b554     AD 4A 8D F9 |             altd    cn,#ls1
1b558     A8 00 00 F6 |             mov     0-0,ls0
1b55c                 |              
1b55c     20 00 00 FF 
1b560     00 24 05 F6 |             mov     qq,##16384
1b564     A3 24 81 F1 |             sub     qq,apan0
1b568     92 26 31 FA |             scas    spl,qq
1b56c     00 52 01 F6 |             mov     rs0, 0-0
1b570                 | 
1b570     B5 4A 8D F9 |             altd    cn,#rs1
1b574     A9 00 00 F6 |             mov     0-0,rs0
1b578                 | 
1b578     A9 32 29 F9 |             setword sample0,rs0,#1
1b57c     A8 32 21 F9 |             setword sample0,ls0,#0
1b580                 |             
1b580                 | 
1b580     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
1b584     00 30 05 A6 |     if_z    mov    pointer0, #0  
1b588     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
1b58c     28 02 64 FD | p403        setq #1
1b590                 |      
1b590     00 31 65 FC |             wrlong  pointer0,ptra
1b594     90 F0 83 F1 |             sub     ptra, channeladd
1b598     00 00 90 FD |             jmp     #p101
1b59c                 |                        
1b59c                 |             
1b59c                 |           
1b59c                 |             
1b59c                 | '------------------------ Channels end here --------------------       
1b59c                 | 
1b59c                 | ' Now add all channels and put the sample to the buffer    
1b59c                 | 
1b59c                 | 
1b59c     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1b5a0     01 22 85 A1 |     if_z    sub     front,#1         ' 
1b5a4     FF 23 05 A5 |     if_z    and     front,#511     
1b5a8                 |            
1b5a8                 |     
1b5a8     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1b5ac     00 56 05 F6 |             mov     ls,#0
1b5b0     B5 58 01 F1 |             add     rs,rs1
1b5b4     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1b5b8     B7 58 01 F1 |             add     rs,rs3
1b5bc     B8 58 01 F1 |             add     rs,rs4
1b5c0     B9 58 01 F1 |             add     rs,rs5
1b5c4     BA 58 01 F1 |             add     rs,rs6
1b5c8     BB 58 01 F1 |             add     rs,rs7
1b5cc     BC 58 01 F1 |             add     rs,rs8
1b5d0                 | 
1b5d0                 |            
1b5d0     AD 56 01 F1 |             add     ls,ls1
1b5d4     AE 56 01 F1 |             add     ls,ls2
1b5d8     AF 56 01 F1 |             add     ls,ls3
1b5dc     B0 56 01 F1 |             add     ls,ls4
1b5e0     B1 56 01 F1 |             add     ls,ls5
1b5e4     B2 56 01 F1 |             add     ls,ls6
1b5e8     B3 56 01 F1 |             add     ls,ls7
1b5ec     B4 56 01 F1 |             add     ls,ls8
1b5f0                 | 
1b5f0                 |  		
1b5f0     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1b5f4     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1b5f8                 | 		    
1b5f8     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1b5fc     AC 16 01 F6 |             mov newsample, rs
1b600                 | 
1b600     82 48 01 F6 |             mov     oldt0,time0      ' update global time
1b604     A7 04 01 F1 |             add     time0,dt0    
1b608                 | 
1b608                 |             
1b608                 |  
1b608                 |                                      ' now push dt0 samples to the buffer
1b608     00 4E 0D F2 |             cmp      dt0,#0 wz
1b60c     94 FE 9F AD |     if_z    jmp      #loop1
1b610     A7 18 01 F6 |             mov      t1,dt0
1b614                 |   
1b614     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1b618     01 1A 85 F1 |             sub     t2,#1
1b61c     FF 1B 05 F5 |             and     t2,#511
1b620     91 1A 19 F2 |             cmp     t2,front wcz
1b624     EC FF 9F AD |     if_e    jmp     #p301    
1b628                 |     
1b628     91 16 31 FC |             wrlut   newsample, front
1b62c     01 22 05 F1 |             add     front,#1
1b630     FF 23 05 F5 |             and     front,#511
1b634     F7 19 6D FB |             djnz    t1,#p301
1b638                 |             
1b638     50 FE 9F FD |             jmp     #loop            'loop
1b63c                 | 
1b63c                 | '-------------------------------------------------------------------------
1b63c                 | '------------------ This is the end of the main loop ---------------------
1b63c                 | '-------------------------------------------------------------------------
1b63c                 | 
1b63c                 | '--------------------------------------------------------------------------
1b63c                 | '------ Interrupt service -------------------------------------------------
1b63c                 | '------ Output the sample, get the next one if exists ---------------------
1b63c                 | '--------------------------------------------------------------------------
1b63c                 | 
1b63c     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
1b640     0F 2A 25 FC |             wypin   rsample,#right       '4
1b644                 |            
1b644     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1b648     F5 FF 3B AB |     if_e    reti1                        '8/10
1b64c                 | 
1b64c     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1b650     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
1b654     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
1b658     F5 FF 3B FB |             reti1                        '17/19 
1b65c                 |           
1b65c                 | '---------------------------------------------------------------------------
1b65c                 | '-------- End of interrupt -------------------------------------------------
1b65c                 | '---------------------------------------------------------------------------    
1b65c                 | 
1b65c                 | 
1b65c                 | '---------------------------------------------------------------------------
1b65c                 | '------- Variables ---------------------------------------------------------
1b65c                 | '---------------------------------------------------------------------------
1b65c                 | 
1b65c                 | ' constants
1b65c                 | 
1b65c     00 00 00 00 | hp long 0
1b660     00 00 00 00 | lp long 0
1b664     00 00 00 00 | bp long 0
1b668     00 00 00 10 | a20000000   long $10000000
1b66c     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
1b670                 | 
1b670                 | ' Time variables
1b670                 | 
1b670     00 00 00 00 | time0       long 0    ' Global sample computing time
1b674     01 00 00 00 | time1       long 1    ' Local channels time
1b678     02 00 00 00 | time2       long 2
1b67c     03 00 00 00 | time3       long 3
1b680     04 00 00 00 | time4       long 4
1b684     05 00 00 00 | time5       long 5
1b688     06 00 00 00 | time6       long 6
1b68c     07 00 00 00 | time7       long 7
1b690     08 00 00 00 | time8       long 8
1b694                 | 
1b694                 | 
1b694                 | 
1b694     00 00 00 00 | newsample long 0
1b698                 | '
1b698     00 00 00 00 | t1 long 0
1b69c     00 00 00 00 | t2 long 0
1b6a0                 | '
1b6a0     00 00 00 00 | nrsample long 0
1b6a4     00 00 00 00 | nlsample long 0
1b6a8                 | '
1b6a8     00 00 00 00 | channeladd long 0
1b6ac                 | 
1b6ac                 | 
1b6ac     00 00 00 00 | front       long 0
1b6b0                 | 
1b6b0                 | ' temporary variables 
1b6b0                 | '
1b6b0     00 00 00 00 | qq          long 0
1b6b4     00 00 00 00 | spl         long 0
1b6b8                 | 
1b6b8                 | ' circular buffer in LUT
1b6b8                 | 
1b6b8                 | 
1b6b8                 | '
1b6b8                 | 
1b6b8                 | ' Interrupt ISR variables
1b6b8                 | 
1b6b8                 | 
1b6b8     00 00 00 00 | lsample     long 0
1b6bc     00 00 00 00 | rsample     long 0
1b6c0     00 00 00 00 | lsnext      long 0
1b6c4     00 00 00 00 | rsnext      long 0 
1b6c8                 | 
1b6c8                 | 
1b6c8     00 00 00 00 | pointer0    long 0
1b6cc     00 00 00 00 | sample0     long 0
1b6d0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1b6d4     00 00 00 00 | lstart0     long 0
1b6d8     00 00 00 00 | lend0       long 0
1b6dc     00 00 00 00 | volpan0     long 0
1b6e0     00 00 00 00 | freqskip0   long 0
1b6e4     00 00 00 00 | dummy0      long 0
1b6e8                 | 
1b6e8     00 00 00 00 | afreq0      long 0
1b6ec     00 00 00 00 | askip0      long 0
1b6f0     00 00 00 00 | avol0       long 0
1b6f4     00 00 00 00 | apan0       long 0
1b6f8                 | 
1b6f8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1b6fc     00 00 00 00 | cn          long 0
1b700     00 00 00 00 | ct          long 0
1b704     00 00 00 00 | dt0         long 0
1b708                 | 
1b708                 | ' Samples
1b708     00 00 00 00 | ls0         long 0
1b70c     00 00 00 00 | rs0         long 0
1b710     00 00 00 00 | channel     long 0
1b714     00 00 00 00 | ls          long 0    ' Global sample variable
1b718     00 00 00 00 | rs          long 0
1b71c                 | 
1b71c     00 00 00 00 | ls1         long 0    ' Channel samples
1b720     00 00 00 00 | ls2         long 0
1b724     00 00 00 00 | ls3         long 0
1b728     00 00 00 00 | ls4         long 0
1b72c     00 00 00 00 | ls5         long 0
1b730     00 00 00 00 | ls6         long 0
1b734     00 00 00 00 | ls7         long 0
1b738     00 00 00 00 | ls8         long 0
1b73c     00 00 00 00 | rs1         long 0
1b740     00 00 00 00 | rs2         long 0
1b744     00 00 00 00 | rs3         long 0
1b748     00 00 00 00 | rs4         long 0
1b74c     00 00 00 00 | rs5         long 0
1b750     00 00 00 00 | rs6         long 0
1b754     00 00 00 00 | rs7         long 0
1b758     00 00 00 00 | rs8         long 0
1b75c                 | 
1b75c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1b760                 | 
1b760     00 00 00 00 
1b764     00 00 00 00 | null  			long 	0,0           ' for channel reset
1b768     73 32 00 04 
1b76c     00 00 10 00 
1b770     00 00 00 00 
1b774     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1b778     00 00 C9 00 
1b77c     92 01 5B 02 
1b780     24 03 ED 03 
1b784     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1b788     48 06 11 07 
1b78c     D9 07 A2 08 
1b790     6A 09 33 0A 
1b794     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1b798     8C 0C 54 0D 
1b79c     1C 0E E3 0E 
1b7a0     AB 0F 72 10 
1b7a4     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1b7a8     C8 12 8F 13 
1b7ac     55 14 1C 15 
1b7b0     E2 15 A8 16 
1b7b4     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1b7b8     F9 18 BE 19 
1b7bc     82 1A 47 1B 
1b7c0     0B 1C CF 1C 
1b7c4     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1b7c8     1A 1F DD 1F 
1b7cc     9F 20 61 21 
1b7d0     23 22 E5 22 
1b7d4     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1b7d8     28 25 E8 25 
1b7dc     A8 26 67 27 
1b7e0     26 28 E5 28 
1b7e4     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1b7e8     1F 2B DC 2B 
1b7ec     99 2C 55 2D 
1b7f0     11 2E CC 2E 
1b7f4     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1b7f8     FB 30 B5 31 
1b7fc     6E 32 26 33 
1b800     DF 33 96 34 
1b804     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1b808     BA 36 6F 37 
1b80c     24 38 D9 38 
1b810     8C 39 40 3A 
1b814     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1b818     56 3C 07 3D 
1b81c     B8 3D 68 3E 
1b820     17 3F C5 3F 
1b824     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1b828     CE 41 7A 42 
1b82c     25 43 D0 43 
1b830     7A 44 24 45 
1b834     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1b838     1C 47 C3 47 
1b83c     69 48 0F 49 
1b840     B4 49 58 4A 
1b844     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1b848     3F 4C E0 4C 
1b84c     81 4D 20 4E 
1b850     BF 4E 5D 4F 
1b854     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1b858     33 51 CE 51 
1b85c     68 52 02 53 
1b860     9B 53 32 54 
1b864     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1b868     F5 55 8A 56 
1b86c     1D 57 B0 57 
1b870     42 58 D3 58 
1b874     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1b878     82 5A 0F 5B 
1b87c     9C 5B 28 5C 
1b880     B3 5C 3E 5D 
1b884     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1b888     D7 5E 5D 5F 
1b88c     E3 5F 68 60 
1b890     EB 60 6E 61 
1b894     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1b898     F1 62 70 63 
1b89c     EE 63 6C 64 
1b8a0     E8 64 63 65 
1b8a4     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1b8a8     CF 66 46 67 
1b8ac     BC 67 32 68 
1b8b0     A6 68 19 69 
1b8b4     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1b8b8     6D 6A DC 6A 
1b8bc     4A 6B B7 6B 
1b8c0     23 6C 8E 6C 
1b8c4     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1b8c8     C9 6D 30 6E 
1b8cc     96 6E FB 6E 
1b8d0     5E 6F C1 6F 
1b8d4     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1b8d8     E2 70 40 71 
1b8dc     9D 71 F9 71 
1b8e0     54 72 AE 72 
1b8e4     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1b8e8     B5 73 0A 74 
1b8ec     5F 74 B2 74 
1b8f0     04 75 55 75 
1b8f4     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1b8f8     41 76 8D 76 
1b8fc     D8 76 22 77 
1b900     6B 77 B3 77 
1b904     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1b908     84 78 C7 78 
1b90c     09 79 4A 79 
1b910     89 79 C8 79 
1b914     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1b918     7C 7A B6 7A 
1b91c     EE 7A 26 7B 
1b920     5C 7B 91 7B 
1b924     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1b928     29 7C 59 7C 
1b92c     88 7C B6 7C 
1b930     E3 7C 0E 7D 
1b934     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1b938     89 7D B0 7D 
1b93c     D5 7D FA 7D 
1b940     1D 7E 3E 7E 
1b944     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1b948     9C 7E B9 7E 
1b94c     D5 7E EF 7E 
1b950     09 7F 21 7F 
1b954     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1b958     61 7F 74 7F 
1b95c     86 7F 97 7F 
1b960     A6 7F B4 7F 
1b964     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1b968     D8 7F E1 7F 
1b96c     E9 7F F0 7F 
1b970     F5 7F F9 7F 
1b974     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1b978     FF 7F FE 7F 
1b97c     FD 7F F9 7F 
1b980     F5 7F F0 7F 
1b984     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1b988     D8 7F CD 7F 
1b98c     C1 7F B4 7F 
1b990     A6 7F 97 7F 
1b994     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1b998     61 7F 4D 7F 
1b99c     37 7F 21 7F 
1b9a0     09 7F EF 7E 
1b9a4     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1b9a8     9C 7E 7E 7E 
1b9ac     5F 7E 3E 7E 
1b9b0     1D 7E FA 7D 
1b9b4     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1b9b8     89 7D 62 7D 
1b9bc     39 7D 0E 7D 
1b9c0     E3 7C B6 7C 
1b9c4     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1b9c8     29 7C F8 7B 
1b9cc     C5 7B 91 7B 
1b9d0     5C 7B 26 7B 
1b9d4     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1b9d8     7C 7A 41 7A 
1b9dc     05 7A C8 79 
1b9e0     89 79 4A 79 
1b9e4     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1b9e8     84 78 3F 78 
1b9ec     FA 77 B3 77 
1b9f0     6B 77 22 77 
1b9f4     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1b9f8     41 76 F3 75 
1b9fc     A5 75 55 75 
1ba00     04 75 B2 74 
1ba04     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1ba08     B5 73 5E 73 
1ba0c     07 73 AE 72 
1ba10     54 72 F9 71 
1ba14     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1ba18     E2 70 83 70 
1ba1c     22 70 C1 6F 
1ba20     5E 6F FB 6E 
1ba24     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1ba28     C9 6D 61 6D 
1ba2c     F8 6C 8E 6C 
1ba30     23 6C B7 6B 
1ba34     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1ba38     6D 6A FD 69 
1ba3c     8B 69 19 69 
1ba40     A6 68 32 68 
1ba44     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1ba48     CF 66 56 66 
1ba4c     DD 65 63 65 
1ba50     E8 64 6C 64 
1ba54     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1ba58     F1 62 71 62 
1ba5c     F0 61 6E 61 
1ba60     EB 60 68 60 
1ba64     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1ba68     D7 5E 4F 5E 
1ba6c     C7 5D 3E 5D 
1ba70     B3 5C 28 5C 
1ba74     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1ba78     82 5A F3 59 
1ba7c     64 59 D3 58 
1ba80     42 58 B0 57 
1ba84     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1ba88     F5 55 60 55 
1ba8c     C9 54 32 54 
1ba90     9B 53 02 53 
1ba94     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1ba98     33 51 97 50 
1ba9c     FB 4F 5D 4F 
1baa0     BF 4E 20 4E 
1baa4     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1baa8     3F 4C 9D 4B 
1baac     FB 4A 58 4A 
1bab0     B4 49 0F 49 
1bab4     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1bab8     1C 47 75 46 
1babc     CD 45 24 45 
1bac0     7A 44 D0 43 
1bac4     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1bac8     CE 41 21 41 
1bacc     73 40 C5 3F 
1bad0     17 3F 68 3E 
1bad4     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1bad8     56 3C A5 3B 
1badc     F2 3A 40 3A 
1bae0     8C 39 D9 38 
1bae4     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1bae8     BA 36 04 36 
1baec     4D 35 96 34 
1baf0     DF 33 26 33 
1baf4     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1baf8     FB 30 41 30 
1bafc     87 2F CC 2E 
1bb00     11 2E 55 2D 
1bb04     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1bb08     1F 2B 61 2A 
1bb0c     A3 29 E5 28 
1bb10     26 28 67 27 
1bb14     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1bb18     28 25 67 24 
1bb1c     A6 23 E5 22 
1bb20     23 22 61 21 
1bb24     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1bb28     1A 1F 57 1E 
1bb2c     93 1D CF 1C 
1bb30     0B 1C 47 1B 
1bb34     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1bb38     F9 18 33 18 
1bb3c     6E 17 A8 16 
1bb40     E2 15 1C 15 
1bb44     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1bb48     C8 12 01 12 
1bb4c     3A 11 72 10 
1bb50     AB 0F E3 0E 
1bb54     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1bb58     8C 0C C4 0B 
1bb5c     FB 0A 33 0A 
1bb60     6A 09 A2 08 
1bb64     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1bb68     48 06 7F 05 
1bb6c     B6 04 ED 03 
1bb70     24 03 5B 02 
1bb74     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1bb78     00 00 37 FF 
1bb7c     6E FE A5 FD 
1bb80     DC FC 13 FC 
1bb84     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1bb88     B8 F9 EF F8 
1bb8c     27 F8 5E F7 
1bb90     96 F6 CD F5 
1bb94     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1bb98     74 F3 AC F2 
1bb9c     E4 F1 1D F1 
1bba0     55 F0 8E EF 
1bba4     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1bba8     38 ED 71 EC 
1bbac     AB EB E4 EA 
1bbb0     1E EA 58 E9 
1bbb4     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1bbb8     07 E7 42 E6 
1bbbc     7E E5 B9 E4 
1bbc0     F5 E3 31 E3 
1bbc4     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1bbc8     E6 E0 23 E0 
1bbcc     61 DF 9F DE 
1bbd0     DD DD 1B DD 
1bbd4     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1bbd8     D8 DA 18 DA 
1bbdc     58 D9 99 D8 
1bbe0     DA D7 1B D7 
1bbe4     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1bbe8     E1 D4 24 D4 
1bbec     67 D3 AB D2 
1bbf0     EF D1 34 D1 
1bbf4     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1bbf8     05 CF 4B CE 
1bbfc     92 CD DA CC 
1bc00     21 CC 6A CB 
1bc04     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1bc08     46 C9 91 C8 
1bc0c     DC C7 27 C7 
1bc10     74 C6 C0 C5 
1bc14     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1bc18     AA C3 F9 C2 
1bc1c     48 C2 98 C1 
1bc20     E9 C0 3B C0 
1bc24     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1bc28     32 BE 86 BD 
1bc2c     DB BC 30 BC 
1bc30     86 BB DC BA 
1bc34     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1bc38     E4 B8 3D B8 
1bc3c     97 B7 F1 B6 
1bc40     4C B6 A8 B5 
1bc44     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1bc48     C1 B3 20 B3 
1bc4c     7F B2 E0 B1 
1bc50     41 B1 A3 B0 
1bc54     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1bc58     CD AE 32 AE 
1bc5c     98 AD FE AC 
1bc60     65 AC CE AB 
1bc64     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1bc68     0B AA 76 A9 
1bc6c     E3 A8 50 A8 
1bc70     BE A7 2D A7 
1bc74     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1bc78     7E A5 F1 A4 
1bc7c     64 A4 D8 A3 
1bc80     4D A3 C2 A2 
1bc84     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1bc88     29 A1 A3 A0 
1bc8c     1D A0 98 9F 
1bc90     15 9F 92 9E 
1bc94     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1bc98     0F 9D 90 9C 
1bc9c     12 9C 94 9B 
1bca0     18 9B 9D 9A 
1bca4     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1bca8     31 99 BA 98 
1bcac     44 98 CE 97 
1bcb0     5A 97 E7 96 
1bcb4     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1bcb8     93 95 24 95 
1bcbc     B6 94 49 94 
1bcc0     DD 93 72 93 
1bcc4     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1bcc8     37 92 D0 91 
1bccc     6A 91 05 91 
1bcd0     A2 90 3F 90 
1bcd4     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1bcd8     1E 8F C0 8E 
1bcdc     63 8E 07 8E 
1bce0     AC 8D 52 8D 
1bce4     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1bce8     4B 8C F6 8B 
1bcec     A1 8B 4E 8B 
1bcf0     FC 8A AB 8A 
1bcf4     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1bcf8     BF 89 73 89 
1bcfc     28 89 DE 88 
1bd00     95 88 4D 88 
1bd04     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1bd08     7C 87 39 87 
1bd0c     F7 86 B6 86 
1bd10     77 86 38 86 
1bd14     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1bd18     84 85 4A 85 
1bd1c     12 85 DA 84 
1bd20     A4 84 6F 84 
1bd24     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1bd28     D7 83 A7 83 
1bd2c     78 83 4A 83 
1bd30     1D 83 F2 82 
1bd34     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1bd38     77 82 50 82 
1bd3c     2B 82 06 82 
1bd40     E3 81 C2 81 
1bd44     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1bd48     64 81 47 81 
1bd4c     2B 81 11 81 
1bd50     F7 80 DF 80 
1bd54     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1bd58     9F 80 8C 80 
1bd5c     7A 80 69 80 
1bd60     5A 80 4C 80 
1bd64     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1bd68     28 80 1F 80 
1bd6c     17 80 10 80 
1bd70     0B 80 07 80 
1bd74     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1bd78     01 80 02 80 
1bd7c     03 80 07 80 
1bd80     0B 80 10 80 
1bd84     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1bd88     28 80 33 80 
1bd8c     3F 80 4C 80 
1bd90     5A 80 69 80 
1bd94     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1bd98     9F 80 B3 80 
1bd9c     C9 80 DF 80 
1bda0     F7 80 11 81 
1bda4     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1bda8     64 81 82 81 
1bdac     A1 81 C2 81 
1bdb0     E3 81 06 82 
1bdb4     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1bdb8     77 82 9E 82 
1bdbc     C7 82 F2 82 
1bdc0     1D 83 4A 83 
1bdc4     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1bdc8     D7 83 08 84 
1bdcc     3B 84 6F 84 
1bdd0     A4 84 DA 84 
1bdd4     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1bdd8     84 85 BF 85 
1bddc     FB 85 38 86 
1bde0     77 86 B6 86 
1bde4     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1bde8     7C 87 C1 87 
1bdec     06 88 4D 88 
1bdf0     95 88 DE 88 
1bdf4     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1bdf8     BF 89 0D 8A 
1bdfc     5B 8A AB 8A 
1be00     FC 8A 4E 8B 
1be04     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1be08     4B 8C A2 8C 
1be0c     F9 8C 52 8D 
1be10     AC 8D 07 8E 
1be14     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1be18     1E 8F 7D 8F 
1be1c     DE 8F 3F 90 
1be20     A2 90 05 91 
1be24     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1be28     37 92 9F 92 
1be2c     08 93 72 93 
1be30     DD 93 49 94 
1be34     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1be38     93 95 03 96 
1be3c     75 96 E7 96 
1be40     5A 97 CE 97 
1be44     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1be48     31 99 AA 99 
1be4c     23 9A 9D 9A 
1be50     18 9B 94 9B 
1be54     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1be58     0F 9D 8F 9D 
1be5c     10 9E 92 9E 
1be60     15 9F 98 9F 
1be64     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1be68     29 A1 B1 A1 
1be6c     39 A2 C2 A2 
1be70     4D A3 D8 A3 
1be74     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1be78     7E A5 0D A6 
1be7c     9C A6 2D A7 
1be80     BE A7 50 A8 
1be84     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1be88     0B AA A0 AA 
1be8c     37 AB CE AB 
1be90     65 AC FE AC 
1be94     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1be98     CD AE 69 AF 
1be9c     05 B0 A3 B0 
1bea0     41 B1 E0 B1 
1bea4     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1bea8     C1 B3 63 B4 
1beac     05 B5 A8 B5 
1beb0     4C B6 F1 B6 
1beb4     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1beb8     E4 B8 8B B9 
1bebc     33 BA DC BA 
1bec0     86 BB 30 BC 
1bec4     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1bec8     32 BE DF BE 
1becc     8D BF 3B C0 
1bed0     E9 C0 98 C1 
1bed4     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1bed8     AA C3 5B C4 
1bedc     0E C5 C0 C5 
1bee0     74 C6 27 C7 
1bee4     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1bee8     46 C9 FC C9 
1beec     B3 CA 6A CB 
1bef0     21 CC DA CC 
1bef4     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1bef8     05 CF BF CF 
1befc     79 D0 34 D1 
1bf00     EF D1 AB D2 
1bf04     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1bf08     E1 D4 9F D5 
1bf0c     5D D6 1B D7 
1bf10     DA D7 99 D8 
1bf14     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1bf18     D8 DA 99 DB 
1bf1c     5A DC 1B DD 
1bf20     DD DD 9F DE 
1bf24     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1bf28     E6 E0 A9 E1 
1bf2c     6D E2 31 E3 
1bf30     F5 E3 B9 E4 
1bf34     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1bf38     07 E7 CD E7 
1bf3c     92 E8 58 E9 
1bf40     1E EA E4 EA 
1bf44     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1bf48     38 ED FF ED 
1bf4c     C6 EE 8E EF 
1bf50     55 F0 1D F1 
1bf54     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1bf58     74 F3 3C F4 
1bf5c     05 F5 CD F5 
1bf60     96 F6 5E F7 
1bf64     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1bf68     B8 F9 81 FA 
1bf6c     4A FB 13 FC 
1bf70     DC FC A5 FD 
1bf74     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1bf78                 | 	alignl
1bf78                 | __system__dat_
1bf78     00 00 00 00 
1bf7c     00 00 00 00 | 	byte	$00[8]
1bf80     03 00 00 00 
1bf84     00 00 00 00 
1bf88     00 00 00 00 
1bf8c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bf90     00 00 00 00 
1bf94     00 00 00 00 
1bf98     00 00 00 00 
1bf9c     00 00 00 00 
1bfa0     00 00 00 00 | 	byte	$00[20]
1bfa4     05 00 00 00 
1bfa8     00 00 00 00 
1bfac     00 00 00 00 
1bfb0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bfb4     7C C1 01 00 | 	long	@@@__system__dat_ + 516
1bfb8     84 C1 01 00 | 	long	@@@__system__dat_ + 524
1bfbc     00 00 00 00 | 	byte	$00, $00, $00, $00
1bfc0     8C C1 01 00 | 	long	@@@__system__dat_ + 532
1bfc4     94 C1 01 00 | 	long	@@@__system__dat_ + 540
1bfc8     00 00 00 00 
1bfcc     00 00 00 00 | 	byte	$00[8]
1bfd0     01 00 00 00 
1bfd4     06 00 00 00 
1bfd8     00 00 00 00 
1bfdc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bfe0     00 00 00 00 | 	byte	$00, $00, $00, $00
1bfe4     9C C1 01 00 | 	long	@@@__system__dat_ + 548
1bfe8     A4 C1 01 00 | 	long	@@@__system__dat_ + 556
1bfec     00 00 00 00 | 	byte	$00, $00, $00, $00
1bff0     AC C1 01 00 | 	long	@@@__system__dat_ + 564
1bff4     B4 C1 01 00 | 	long	@@@__system__dat_ + 572
1bff8     00 00 00 00 
1bffc     00 00 00 00 | 	byte	$00[8]
1c000     01 00 00 00 
1c004     06 00 00 00 
1c008     00 00 00 00 
1c00c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c010     00 00 00 00 | 	byte	$00, $00, $00, $00
1c014     BC C1 01 00 | 	long	@@@__system__dat_ + 580
1c018     C4 C1 01 00 | 	long	@@@__system__dat_ + 588
1c01c     00 00 00 00 | 	byte	$00, $00, $00, $00
1c020     CC C1 01 00 | 	long	@@@__system__dat_ + 596
1c024     D4 C1 01 00 | 	long	@@@__system__dat_ + 604
1c028     00 00 00 00 
      ...             
1c178     00 00 00 00 
1c17c     00 00 00 00 | 	byte	$00[344]
1c180     FC 63 00 00 | 	long	@@@__system___tx
1c184     00 00 00 00 | 	byte	$00, $00, $00, $00
1c188     44 64 00 00 | 	long	@@@__system___rx
1c18c     00 00 00 00 | 	byte	$00, $00, $00, $00
1c190     C0 7E 00 00 | 	long	@@@__system___rxtxioctl_0179
1c194     00 00 00 00 | 	byte	$00, $00, $00, $00
1c198     30 7F 00 00 | 	long	@@@__system____dummy_flush_0180
1c19c     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1a0     FC 63 00 00 | 	long	@@@__system___tx
1c1a4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1a8     44 64 00 00 | 	long	@@@__system___rx
1c1ac     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1b0     C0 7E 00 00 | 	long	@@@__system___rxtxioctl_0179
1c1b4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1b8     30 7F 00 00 | 	long	@@@__system____dummy_flush_0180
1c1bc     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1c0     FC 63 00 00 | 	long	@@@__system___tx
1c1c4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1c8     44 64 00 00 | 	long	@@@__system___rx
1c1cc     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1d0     C0 7E 00 00 | 	long	@@@__system___rxtxioctl_0179
1c1d4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1d8     30 7F 00 00 | 	long	@@@__system____dummy_flush_0180
1c1dc                 | __heap_base
1c1dc     00 00 00 00 
      ...             
1d1dc     00 00 00 00 
1d1e0     00 00 00 00 | 	long	0[1026]
1d1e4                 | objmem
1d1e4     00 00 00 00 
      ...             
1e384     00 00 00 00 
1e388     00 00 00 00 | 	long	0[1130]
1e38c                 | stackspace
1e38c     00 00 00 00 | 	long	0[1]
1e390 10f             | 	org	COG_BSS_START
1e390 10f             | _var01
1e390 10f             | 	res	1
1e390 110             | _var02
1e390 110             | 	res	1
1e390 111             | _var03
1e390 111             | 	res	1
1e390 112             | _var04
1e390 112             | 	res	1
1e390 113             | _var05
1e390 113             | 	res	1
1e390 114             | _var06
1e390 114             | 	res	1
1e390 115             | _var07
1e390 115             | 	res	1
1e390 116             | _var08
1e390 116             | 	res	1
1e390 117             | _var09
1e390 117             | 	res	1
1e390 118             | _var10
1e390 118             | 	res	1
1e390 119             | _var11
1e390 119             | 	res	1
1e390 11a             | _var12
1e390 11a             | 	res	1
1e390 11b             | _var13
1e390 11b             | 	res	1
1e390 11c             | _var14
1e390 11c             | 	res	1
1e390 11d             | _var15
1e390 11d             | 	res	1
1e390 11e             | _var16
1e390 11e             | 	res	1
1e390 11f             | _var17
1e390 11f             | 	res	1
1e390 120             | _var18
1e390 120             | 	res	1
1e390 121             | _var19
1e390 121             | 	res	1
1e390 122             | _var20
1e390 122             | 	res	1
1e390 123             | _var21
1e390 123             | 	res	1
1e390 124             | _var22
1e390 124             | 	res	1
1e390 125             | _var23
1e390 125             | 	res	1
1e390 126             | _var24
1e390 126             | 	res	1
1e390 127             | _var25
1e390 127             | 	res	1
1e390 128             | _var26
1e390 128             | 	res	1
1e390 129             | _var27
1e390 129             | 	res	1
1e390 12a             | _var28
1e390 12a             | 	res	1
1e390 12b             | _var29
1e390 12b             | 	res	1
1e390 12c             | _var30
1e390 12c             | 	res	1
1e390 12d             | _var31
1e390 12d             | 	res	1
1e390 12e             | _var32
1e390 12e             | 	res	1
1e390 12f             | arg01
1e390 12f             | 	res	1
1e390 130             | arg02
1e390 130             | 	res	1
1e390 131             | arg03
1e390 131             | 	res	1
1e390 132             | arg04
1e390 132             | 	res	1
1e390 133             | arg05
1e390 133             | 	res	1
1e390 134             | arg06
1e390 134             | 	res	1
1e390 135             | arg07
1e390 135             | 	res	1
1e390 136             | local01
1e390 136             | 	res	1
1e390 137             | local02
1e390 137             | 	res	1
1e390 138             | local03
1e390 138             | 	res	1
1e390 139             | local04
1e390 139             | 	res	1
1e390 13a             | local05
1e390 13a             | 	res	1
1e390 13b             | local06
1e390 13b             | 	res	1
1e390 13c             | local07
1e390 13c             | 	res	1
1e390 13d             | local08
1e390 13d             | 	res	1
1e390 13e             | local09
1e390 13e             | 	res	1
1e390 13f             | local10
1e390 13f             | 	res	1
1e390 140             | local11
1e390 140             | 	res	1
1e390 141             | local12
1e390 141             | 	res	1
1e390 142             | local13
1e390 142             | 	res	1
1e390 143             | local14
1e390 143             | 	res	1
1e390 144             | local15
1e390 144             | 	res	1
1e390 145             | local16
1e390 145             | 	res	1
1e390 146             | local17
1e390 146             | 	res	1
1e390 147             | local18
1e390 147             | 	res	1
1e390 148             | local19
1e390 148             | 	res	1
1e390 149             | local20
1e390 149             | 	res	1
1e390 14a             | local21
1e390 14a             | 	res	1
1e390 14b             | local22
1e390 14b             | 	res	1
1e390 14c             | muldiva_
1e390 14c             | 	res	1
1e390 14d             | muldivb_
1e390 14d             | 	res	1
1e390 14e             | 	fit	480
1e390 14e             | 
