00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 18 F1 07 F1 | 	add	ptra, ##2328
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 20 D6 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 28 E6 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 70 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 B8 7F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a C0 D3 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio014_spin2_dat__
00830 10b 84 C4 01 00 | 	long	@_audio014_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 94 81 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d FC 8E 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e B4 24 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 88 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 70 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 48 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 20 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 B0 33 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 60 B3 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     36 5A 05 F6 | 	mov	COUNT_, #54
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     A4 55 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     88 55 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     6C 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     50 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     EC 1F B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     B0 53 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     80 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     78 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     44 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     18 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     24 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     E0 56 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     04 18 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     02 00 00 FF 
00ac8     30 0F 06 F1 | 	add	objptr, ##1328
00acc     07 41 68 FC | 	wrlong	#32, objptr
00ad0     40 00 00 FF 
00ad4     69 7D 06 F6 | 	mov	local10, ##@LR__0453
00ad8     01 00 00 FF 
00adc     A4 0F 06 F1 | 	add	objptr, ##932
00ae0     07 7D 62 FC | 	wrlong	local10, objptr
00ae4     04 00 00 FF 
00ae8     D4 0E 86 F1 | 	sub	objptr, ##2260
00aec     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00af0     3F 5D 02 F6 | 	mov	arg01, local11
00af4     6C FD BF FD | 	call	#_addr
00af8     04 00 00 FF 
00afc     D8 0E 06 F1 | 	add	objptr, ##2264
00b00     07 2B 62 FC | 	wrlong	result1, objptr
00b04     15 5D 02 F6 | 	mov	arg01, result1
00b08     00 5E 06 F6 | 	mov	arg02, #0
00b0c     01 00 00 FF 
00b10     A4 0F 86 F1 | 	sub	objptr, ##932
00b14     40 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b18     01 5E 06 F6 | 	mov	arg02, #1
00b1c                 | ' 
00b1c                 | ' ''---------- Set the (x,y) position of cursor
00b1c                 | ' 
00b1c                 | ' cursor_x:=x
00b1c     02 00 00 FF 
00b20     00 0F 86 F1 | 	sub	objptr, ##1280
00b24     07 03 48 FC | 	wrbyte	#1, objptr
00b28                 | ' cursor_y:=y
00b28     01 0E 06 F1 | 	add	objptr, #1
00b2c     07 03 48 FC | 	wrbyte	#1, objptr
00b30                 | ' 
00b30                 | ' emptystr$="                      "
00b30                 | ' 
00b30                 | ' ma=addr(module)
00b30                 | ' tracker.initmodule(ma,0)
00b30                 | ' 
00b30                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b30     04 00 00 FF 
00b34     A3 0E 06 F1 | 	add	objptr, ##2211
00b38     07 81 02 FB | 	rdlong	local12, objptr
00b3c     40 83 02 F6 | 	mov	local13, local12
00b40     04 00 00 FF 
00b44     D8 0E 86 F1 | 	sub	objptr, ##2264
00b48     14 82 06 F1 | 	add	local13, #20
00b4c                 | LR__0001
00b4c     41 81 5A F2 | 	cmps	local12, local13 wcz
00b50     44 00 90 3D |  if_ae	jmp	#LR__0002
00b54     00 5C 06 F6 | 	mov	arg01, #0
00b58     E4 69 B0 FD | 	call	#__system___getiolock_0145
00b5c     15 5D 02 F6 | 	mov	arg01, result1
00b60     98 53 B0 FD | 	call	#__system___lockmem
00b64     00 84 06 F6 | 	mov	local14, #0
00b68                 | ' asm
00b68     40 2B C2 FA | 	rdbyte	result1, local12
00b6c                 | ' return r
00b6c     15 5F 02 F6 | 	mov	arg02, result1
00b70     07 5E 46 F7 | 	zerox	arg02, #7
00b74     00 5C 06 F6 | 	mov	arg01, #0
00b78     00 60 06 F6 | 	mov	arg03, #0
00b7c     C8 56 B0 FD | 	call	#__system___basic_print_char
00b80     00 5C 06 F6 | 	mov	arg01, #0
00b84     B8 69 B0 FD | 	call	#__system___getiolock_0145
00b88     15 01 68 FC | 	wrlong	#0, result1
00b8c     00 2A 06 F6 | 	mov	result1, #0
00b90     01 80 06 F1 | 	add	local12, #1
00b94     B4 FF 9F FD | 	jmp	#LR__0001
00b98                 | LR__0002
00b98     04 00 00 FF 
00b9c     DC 0E 06 F1 | 	add	objptr, ##2268
00ba0     07 1F 68 FC | 	wrlong	#15, objptr
00ba4                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00ba4     00 7C 06 F6 | 	mov	local10, #0
00ba8     04 0E 86 F1 | 	sub	objptr, #4
00bac     07 5D 02 FB | 	rdlong	arg01, objptr
00bb0     02 00 00 FF 
00bb4     38 5C 06 F1 | 	add	arg01, ##1080
00bb8                 | ' asm
00bb8     2E 87 C2 FA | 	rdbyte	local15, arg01
00bbc                 | ' return r
00bbc     07 86 46 F7 | 	zerox	local15, #7
00bc0     4D 86 0E F2 | 	cmp	local15, #77 wz
00bc4     01 7C 66 A6 |  if_e	neg	local10, #1
00bc8     00 88 06 F6 | 	mov	local16, #0
00bcc     07 5D 02 FB | 	rdlong	arg01, objptr
00bd0     04 00 00 FF 
00bd4     D8 0E 86 F1 | 	sub	objptr, ##2264
00bd8     02 00 00 FF 
00bdc     3A 5C 06 F1 | 	add	arg01, ##1082
00be0                 | ' asm
00be0     2E 2B C2 FA | 	rdbyte	result1, arg01
00be4                 | ' return r
00be4     15 8B 02 F6 | 	mov	local17, result1
00be8     07 8A 46 F7 | 	zerox	local17, #7
00bec     4B 8A 0E F2 | 	cmp	local17, #75 wz
00bf0     01 88 66 A6 |  if_e	neg	local16, #1
00bf4     44 7D CA F7 | 	test	local10, local16 wz
00bf8     04 00 00 5F 
00bfc     DC 0E 06 51 |  if_ne	add	objptr, ##2268
00c00     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00c04     04 00 00 5F 
00c08     DC 0E 86 51 |  if_ne	sub	objptr, ##2268
00c0c     02 5E 06 F6 | 	mov	arg02, #2
00c10                 | ' 
00c10                 | ' ''---------- Set the (x,y) position of cursor
00c10                 | ' 
00c10                 | ' cursor_x:=x
00c10     34 0E 06 F1 | 	add	objptr, #52
00c14     07 03 48 FC | 	wrbyte	#1, objptr
00c18                 | ' cursor_y:=y
00c18     01 0E 06 F1 | 	add	objptr, #1
00c1c     07 05 48 FC | 	wrbyte	#2, objptr
00c20     35 0E 86 F1 | 	sub	objptr, #53
00c24                 | ' position 1,2 : print samples;" ";"samples module"
00c24     00 5C 06 F6 | 	mov	arg01, #0
00c28     14 69 B0 FD | 	call	#__system___getiolock_0145
00c2c     15 5D 02 F6 | 	mov	arg01, result1
00c30     C8 52 B0 FD | 	call	#__system___lockmem
00c34     00 2A 06 F6 | 	mov	result1, #0
00c38     04 00 00 FF 
00c3c     DC 0E 06 F1 | 	add	objptr, ##2268
00c40     07 5F 02 FB | 	rdlong	arg02, objptr
00c44     04 00 00 FF 
00c48     DC 0E 86 F1 | 	sub	objptr, ##2268
00c4c     00 5C 06 F6 | 	mov	arg01, #0
00c50     00 60 06 F6 | 	mov	arg03, #0
00c54     0A 62 06 F6 | 	mov	arg04, #10
00c58     80 56 B0 FD | 	call	#__system___basic_print_integer
00c5c     40 00 00 FF 
00c60     80 5F 06 F6 | 	mov	arg02, ##@LR__0454
00c64     00 5C 06 F6 | 	mov	arg01, #0
00c68     00 60 06 F6 | 	mov	arg03, #0
00c6c     24 56 B0 FD | 	call	#__system___basic_print_string
00c70     40 00 00 FF 
00c74     82 5F 06 F6 | 	mov	arg02, ##@LR__0455
00c78     00 5C 06 F6 | 	mov	arg01, #0
00c7c     00 60 06 F6 | 	mov	arg03, #0
00c80     10 56 B0 FD | 	call	#__system___basic_print_string
00c84     00 5C 06 F6 | 	mov	arg01, #0
00c88     0A 5E 06 F6 | 	mov	arg02, #10
00c8c     00 60 06 F6 | 	mov	arg03, #0
00c90     B4 55 B0 FD | 	call	#__system___basic_print_char
00c94     01 2A 06 F6 | 	mov	result1, #1
00c98     00 5C 06 F6 | 	mov	arg01, #0
00c9c     A0 68 B0 FD | 	call	#__system___getiolock_0145
00ca0     15 01 68 FC | 	wrlong	#0, result1
00ca4     00 2A 06 F6 | 	mov	result1, #0
00ca8     04 00 00 FF 
00cac     D8 0E 06 F1 | 	add	objptr, ##2264
00cb0     07 8D 02 FB | 	rdlong	local18, objptr
00cb4     04 0E 06 F1 | 	add	objptr, #4
00cb8     07 8F 02 FB | 	rdlong	local19, objptr
00cbc     04 5E 06 F6 | 	mov	arg02, #4
00cc0                 | ' 
00cc0                 | ' ''---------- Set the (x,y) position of cursor
00cc0                 | ' 
00cc0                 | ' cursor_x:=x
00cc0     04 00 00 FF 
00cc4     A8 0E 86 F1 | 	sub	objptr, ##2216
00cc8     07 03 48 FC | 	wrbyte	#1, objptr
00ccc                 | ' cursor_y:=y
00ccc     01 0E 06 F1 | 	add	objptr, #1
00cd0     07 09 48 FC | 	wrbyte	#4, objptr
00cd4     35 0E 86 F1 | 	sub	objptr, #53
00cd8                 | ' 'v030. setwritecolors(170,147):
00cd8                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00cd8     00 5C 06 F6 | 	mov	arg01, #0
00cdc     60 68 B0 FD | 	call	#__system___getiolock_0145
00ce0     15 5D 02 F6 | 	mov	arg01, result1
00ce4     14 52 B0 FD | 	call	#__system___lockmem
00ce8     00 2A 06 F6 | 	mov	result1, #0
00cec     40 00 00 FF 
00cf0     FE 5E 06 F6 | 	mov	arg02, ##@LR__0451
00cf4     00 5C 06 F6 | 	mov	arg01, #0
00cf8     00 60 06 F6 | 	mov	arg03, #0
00cfc     94 55 B0 FD | 	call	#__system___basic_print_string
00d00     00 5C 06 F6 | 	mov	arg01, #0
00d04     0A 5E 06 F6 | 	mov	arg02, #10
00d08     00 60 06 F6 | 	mov	arg03, #0
00d0c     38 55 B0 FD | 	call	#__system___basic_print_char
00d10     01 2A 06 F6 | 	mov	result1, #1
00d14     00 5C 06 F6 | 	mov	arg01, #0
00d18     24 68 B0 FD | 	call	#__system___getiolock_0145
00d1c     15 01 68 FC | 	wrlong	#0, result1
00d20     00 2A 06 F6 | 	mov	result1, #0
00d24     04 00 00 FF 
00d28     50 0E 06 F1 | 	add	objptr, ##2128
00d2c     07 91 02 F6 | 	mov	local20, objptr
00d30     00 92 06 F6 | 	mov	local21, #0
00d34     04 00 00 FF 
00d38     50 0E 86 F1 | 	sub	objptr, ##2128
00d3c                 | LR__0003
00d3c     40 00 00 FF 
00d40     67 95 06 F6 | 	mov	local22, ##@LR__0452
00d44     49 97 02 F6 | 	mov	local23, local21
00d48     02 5E 06 F6 | 	mov	arg02, #2
00d4c     0A 60 06 F6 | 	mov	arg03, #10
00d50     02 98 0E F6 | 	mov	local24, #2 wz
00d54     34 00 90 FD | 	jmp	#LR__0006
00d58                 | LR__0004
00d58     00 9A 06 F6 | 	mov	local25, #0
00d5c     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d60     01 9A 66 E6 |  if_be	neg	local25, #1
00d64     00 9E 06 F6 | 	mov	local27, #0
00d68     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d6c     01 9E 66 C6 |  if_b	neg	local27, #1
00d70     4F 9B CA F7 | 	test	local25, local27 wz
00d74     14 00 90 AD |  if_e	jmp	#LR__0005
00d78     4E A1 02 F6 | 	mov	local28, local26
00d7c     0A 9C 06 FD | 	qmul	local26, #10
00d80     18 9C 62 FD | 	getqx	local26
00d84     01 98 06 F1 | 	add	local24, #1
00d88     CC FF 9F FD | 	jmp	#LR__0004
00d8c                 | LR__0005
00d8c                 | LR__0006
00d8c     20 98 3E F3 | 	fle	local24, #32 wcz
00d90     4C 5D 02 F6 | 	mov	arg01, local24
00d94     02 5C 06 F1 | 	add	arg01, #2
00d98     94 5D B0 FD | 	call	#__system___gc_alloc_managed
00d9c     15 A3 02 F6 | 	mov	local29, result1
00da0     4C A5 02 F6 | 	mov	local30, local24
00da4     51 A5 02 F1 | 	add	local30, local29
00da8     52 01 48 FC | 	wrbyte	#0, local30
00dac     8C F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00db0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00db4                 | LR__0007
00db4     00 98 1E F2 | 	cmp	local24, #0 wcz
00db8     34 00 90 ED |  if_be	jmp	#LR__0009
00dbc     01 98 86 F1 | 	sub	local24, #1
00dc0     4B 0B 03 F6 | 	mov	muldiva_, local23
00dc4     0A 0C 07 F6 | 	mov	muldivb_, #10
00dc8     CC 00 A0 FD | 	call	#unsdivide_
00dcc     85 A7 02 F6 | 	mov	local31, muldiva_
00dd0     86 97 02 F6 | 	mov	local23, muldivb_
00dd4     0A A6 1E F2 | 	cmp	local31, #10 wcz
00dd8     30 A6 06 C1 |  if_b	add	local31, #48
00ddc     37 A6 06 31 |  if_ae	add	local31, #55
00de0     4C A9 02 F6 | 	mov	local32, local24
00de4     51 A9 02 F1 | 	add	local32, local29
00de8     54 A7 42 FC | 	wrbyte	local31, local32
00dec     C4 FF 9F FD | 	jmp	#LR__0007
00df0                 | LR__0008
00df0                 | LR__0009
00df0     51 2B 02 F6 | 	mov	result1, local29
00df4     15 5F 02 F6 | 	mov	arg02, result1
00df8     4A 5D 02 F6 | 	mov	arg01, local22
00dfc     34 51 B0 FD | 	call	#__system___string_concat
00e00     15 AB 02 F6 | 	mov	local33, result1
00e04     13 5C 06 F6 | 	mov	arg01, #19
00e08     40 00 00 FF 
00e0c     A8 5E 06 F6 | 	mov	arg02, ##@LR__0445
00e10     8C 59 B0 FD | 	call	#__system__String_S
00e14     15 5F 02 F6 | 	mov	arg02, result1
00e18     55 5D 02 F6 | 	mov	arg01, local33
00e1c     14 51 B0 FD | 	call	#__system___string_concat
00e20     48 2B 62 FC | 	wrlong	result1, local20
00e24     01 92 06 F1 | 	add	local21, #1
00e28     04 90 06 F1 | 	add	local20, #4
00e2c     20 92 5E F2 | 	cmps	local21, #32 wcz
00e30     08 FF 9F CD |  if_b	jmp	#LR__0003
00e34                 | ' for i=1 to num
00e34     01 92 06 F6 | 	mov	local21, #1
00e38     01 8E 06 F1 | 	add	local19, #1
00e3c     46 AD 02 F6 | 	mov	local34, local18
00e40     14 AC 06 F1 | 	add	local34, #20
00e44     00 AE 06 F6 | 	mov	local35, #0
00e48     04 00 00 FF 
00e4c     54 0E 06 F1 | 	add	objptr, ##2132
00e50     07 B1 02 F6 | 	mov	local36, objptr
00e54     14 8C 06 F1 | 	add	local18, #20
00e58     00 B2 06 F6 | 	mov	local37, #0
00e5c     04 00 00 FF 
00e60     54 0E 86 F1 | 	sub	objptr, ##2132
00e64                 | LR__0010
00e64     47 93 5A F2 | 	cmps	local21, local19 wcz
00e68     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e6c     56 B5 02 F6 | 	mov	local38, local34
00e70     57 B5 02 F1 | 	add	local38, local35
00e74     00 B6 06 F6 | 	mov	local39, #0
00e78                 | LR__0011
00e78     58 5D 02 F6 | 	mov	arg01, local36
00e7c     E4 F9 BF FD | 	call	#_addr
00e80                 | ' asm
00e80     15 B9 02 FB | 	rdlong	local40, result1
00e84                 | ' return r
00e84     04 00 00 FF 
00e88     FC 0E 06 F1 | 	add	objptr, ##2300
00e8c     07 B9 62 FC | 	wrlong	local40, objptr
00e90     5A 5D 02 F6 | 	mov	arg01, local38
00e94     5B 5D 02 F1 | 	add	arg01, local39
00e98                 | ' asm
00e98     2E 2B C2 FA | 	rdbyte	result1, arg01
00e9c                 | ' return r
00e9c     15 95 02 F6 | 	mov	local22, result1
00ea0     07 94 46 F7 | 	zerox	local22, #7
00ea4     04 0E 06 F1 | 	add	objptr, #4
00ea8     07 95 62 FC | 	wrlong	local22, objptr
00eac                 | '     a=lpeek(addr(sn$(i)))
00eac                 | '     b=(peek(ma+20+30*(i-1)+j))
00eac                 | '     if b>=32 then poke a+j,b
00eac     04 00 00 FF 
00eb0     00 0F 86 F1 | 	sub	objptr, ##2304
00eb4     20 94 5E F2 | 	cmps	local22, #32 wcz
00eb8     24 00 90 CD |  if_b	jmp	#LR__0012
00ebc     04 00 00 FF 
00ec0     FC 0E 06 F1 | 	add	objptr, ##2300
00ec4     07 5D 02 FB | 	rdlong	arg01, objptr
00ec8     5B 5D 02 F1 | 	add	arg01, local39
00ecc     04 0E 06 F1 | 	add	objptr, #4
00ed0     07 5F 02 FB | 	rdlong	arg02, objptr
00ed4     04 00 00 FF 
00ed8     00 0F 86 F1 | 	sub	objptr, ##2304
00edc                 | ' asm
00edc     2E 5F 42 FC | 	wrbyte	arg02, arg01
00ee0                 | LR__0012
00ee0     01 B6 06 F1 | 	add	local39, #1
00ee4     16 B6 5E F2 | 	cmps	local39, #22 wcz
00ee8     8C FF 9F CD |  if_b	jmp	#LR__0011
00eec     46 BB 02 F6 | 	mov	local41, local18
00ef0     59 BB 02 F1 | 	add	local41, local37
00ef4     5D 5D 02 F6 | 	mov	arg01, local41
00ef8     16 5C 06 F1 | 	add	arg01, #22
00efc     5D BD 02 F6 | 	mov	local42, local41
00f00     17 BC 06 F1 | 	add	local42, #23
00f04                 | ' asm
00f04     2E AB C2 FA | 	rdbyte	local33, arg01
00f08                 | ' return r
00f08     07 AA 46 F7 | 	zerox	local33, #7
00f0c     08 AA 66 F0 | 	shl	local33, #8
00f10                 | ' asm
00f10     5E BF C2 FA | 	rdbyte	local43, local42
00f14                 | ' return r
00f14     07 BE 46 F7 | 	zerox	local43, #7
00f18     5F AB 02 F1 | 	add	local33, local43
00f1c     01 AA 66 F0 | 	shl	local33, #1
00f20     04 00 00 FF 
00f24     04 0F 06 F1 | 	add	objptr, ##2308
00f28     07 AB 62 FC | 	wrlong	local33, objptr
00f2c     5D 5D 02 F6 | 	mov	arg01, local41
00f30     1A 5C 06 F1 | 	add	arg01, #26
00f34     5D C1 02 F6 | 	mov	local44, local41
00f38     1B C0 06 F1 | 	add	local44, #27
00f3c                 | ' asm
00f3c     2E AB C2 FA | 	rdbyte	local33, arg01
00f40                 | ' return r
00f40     07 AA 46 F7 | 	zerox	local33, #7
00f44     08 AA 66 F0 | 	shl	local33, #8
00f48                 | ' asm
00f48     60 BF C2 FA | 	rdbyte	local43, local44
00f4c                 | ' return r
00f4c     07 BE 46 F7 | 	zerox	local43, #7
00f50     5F AB 02 F1 | 	add	local33, local43
00f54     01 AA 66 F0 | 	shl	local33, #1
00f58     04 0E 06 F1 | 	add	objptr, #4
00f5c     07 AB 62 FC | 	wrlong	local33, objptr
00f60     5D 5D 02 F6 | 	mov	arg01, local41
00f64     1C 5C 06 F1 | 	add	arg01, #28
00f68     5D C3 02 F6 | 	mov	local45, local41
00f6c     1D C2 06 F1 | 	add	local45, #29
00f70                 | ' asm
00f70     2E AB C2 FA | 	rdbyte	local33, arg01
00f74                 | ' return r
00f74     07 AA 46 F7 | 	zerox	local33, #7
00f78     08 AA 66 F0 | 	shl	local33, #8
00f7c                 | ' asm
00f7c     61 BF C2 FA | 	rdbyte	local43, local45
00f80                 | ' return r
00f80     07 BE 46 F7 | 	zerox	local43, #7
00f84     5F AB 02 F1 | 	add	local33, local43
00f88     01 AA 66 F0 | 	shl	local33, #1
00f8c     04 0E 06 F1 | 	add	objptr, #4
00f90     07 AB 62 FC | 	wrlong	local33, objptr
00f94     5D 5D 02 F6 | 	mov	arg01, local41
00f98     18 5C 06 F1 | 	add	arg01, #24
00f9c                 | ' asm
00f9c     2E 95 C2 FA | 	rdbyte	local22, arg01
00fa0                 | ' return r
00fa0     07 94 46 F7 | 	zerox	local22, #7
00fa4     04 0E 06 F1 | 	add	objptr, #4
00fa8     07 95 62 FC | 	wrlong	local22, objptr
00fac     19 BA 06 F1 | 	add	local41, #25
00fb0                 | ' asm
00fb0     5D 2B C2 FA | 	rdbyte	result1, local41
00fb4                 | ' return r
00fb4     15 95 02 F6 | 	mov	local22, result1
00fb8     07 94 46 F7 | 	zerox	local22, #7
00fbc     04 0E 06 F1 | 	add	objptr, #4
00fc0     07 95 62 FC | 	wrlong	local22, objptr
00fc4     04 00 00 FF 
00fc8     14 0F 86 F1 | 	sub	objptr, ##2324
00fcc                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00fcc                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00fcc                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00fcc                 | ' ft=peek(ma+20+30*(i-1)+24)
00fcc                 | ' vl=peek(ma+20+30*(i-1)+25)
00fcc                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00fcc     10 92 5E F2 | 	cmps	local21, #16 wcz
00fd0     C4 02 90 3D |  if_ae	jmp	#LR__0013
00fd4     05 C4 06 F6 | 	mov	local46, #5
00fd8     49 C5 02 F1 | 	add	local46, local21
00fdc     62 5F 02 F6 | 	mov	arg02, local46
00fe0                 | ' 
00fe0                 | ' ''---------- Set the (x,y) position of cursor
00fe0                 | ' 
00fe0                 | ' cursor_x:=x
00fe0     34 0E 06 F1 | 	add	objptr, #52
00fe4     07 03 48 FC | 	wrbyte	#1, objptr
00fe8                 | ' cursor_y:=y
00fe8     01 0E 06 F1 | 	add	objptr, #1
00fec     07 5F 42 FC | 	wrbyte	arg02, objptr
00ff0     49 C7 02 F6 | 	mov	local47, local21
00ff4     02 C6 66 F0 | 	shl	local47, #2
00ff8     04 00 00 FF 
00ffc     1B 0E 06 F1 | 	add	objptr, ##2075
01000     07 C7 02 F1 | 	add	local47, objptr
01004     00 5C 06 F6 | 	mov	arg01, #0
01008     04 00 00 FF 
0100c     50 0E 86 F1 | 	sub	objptr, ##2128
01010     2C 65 B0 FD | 	call	#__system___getiolock_0145
01014     15 5D 02 F6 | 	mov	arg01, result1
01018     E0 4E B0 FD | 	call	#__system___lockmem
0101c     00 2A 06 F6 | 	mov	result1, #0
01020     63 5F 02 FB | 	rdlong	arg02, local47
01024     00 5C 06 F6 | 	mov	arg01, #0
01028     00 60 06 F6 | 	mov	arg03, #0
0102c     64 52 B0 FD | 	call	#__system___basic_print_string
01030     00 5C 06 F6 | 	mov	arg01, #0
01034     0A 5E 06 F6 | 	mov	arg02, #10
01038     00 60 06 F6 | 	mov	arg03, #0
0103c     08 52 B0 FD | 	call	#__system___basic_print_char
01040     01 2A 06 F6 | 	mov	result1, #1
01044     00 5C 06 F6 | 	mov	arg01, #0
01048     F4 64 B0 FD | 	call	#__system___getiolock_0145
0104c     15 01 68 FC | 	wrlong	#0, result1
01050     00 2A 06 F6 | 	mov	result1, #0
01054     62 5F 02 F6 | 	mov	arg02, local46
01058                 | ' 
01058                 | ' ''---------- Set the (x,y) position of cursor
01058                 | ' 
01058                 | ' cursor_x:=x
01058     34 0E 06 F1 | 	add	objptr, #52
0105c     07 31 48 FC | 	wrbyte	#24, objptr
01060                 | ' cursor_y:=y
01060     01 0E 06 F1 | 	add	objptr, #1
01064     07 5F 42 FC | 	wrbyte	arg02, objptr
01068     35 0E 86 F1 | 	sub	objptr, #53
0106c     00 5C 06 F6 | 	mov	arg01, #0
01070     CC 64 B0 FD | 	call	#__system___getiolock_0145
01074     15 5D 02 F6 | 	mov	arg01, result1
01078     80 4E B0 FD | 	call	#__system___lockmem
0107c     00 2A 06 F6 | 	mov	result1, #0
01080     04 00 00 FF 
01084     04 0F 06 F1 | 	add	objptr, ##2308
01088     07 5F 02 FB | 	rdlong	arg02, objptr
0108c     04 00 00 FF 
01090     04 0F 86 F1 | 	sub	objptr, ##2308
01094     00 5C 06 F6 | 	mov	arg01, #0
01098     00 60 06 F6 | 	mov	arg03, #0
0109c     0A 62 06 F6 | 	mov	arg04, #10
010a0     38 52 B0 FD | 	call	#__system___basic_print_integer
010a4     00 5C 06 F6 | 	mov	arg01, #0
010a8     0A 5E 06 F6 | 	mov	arg02, #10
010ac     00 60 06 F6 | 	mov	arg03, #0
010b0     94 51 B0 FD | 	call	#__system___basic_print_char
010b4     01 2A 06 F6 | 	mov	result1, #1
010b8     00 5C 06 F6 | 	mov	arg01, #0
010bc     80 64 B0 FD | 	call	#__system___getiolock_0145
010c0     15 01 68 FC | 	wrlong	#0, result1
010c4     00 2A 06 F6 | 	mov	result1, #0
010c8     62 5F 02 F6 | 	mov	arg02, local46
010cc                 | ' 
010cc                 | ' ''---------- Set the (x,y) position of cursor
010cc                 | ' 
010cc                 | ' cursor_x:=x
010cc     34 0E 06 F1 | 	add	objptr, #52
010d0     07 3F 48 FC | 	wrbyte	#31, objptr
010d4                 | ' cursor_y:=y
010d4     01 0E 06 F1 | 	add	objptr, #1
010d8     07 5F 42 FC | 	wrbyte	arg02, objptr
010dc     35 0E 86 F1 | 	sub	objptr, #53
010e0     00 5C 06 F6 | 	mov	arg01, #0
010e4     58 64 B0 FD | 	call	#__system___getiolock_0145
010e8     15 5D 02 F6 | 	mov	arg01, result1
010ec     0C 4E B0 FD | 	call	#__system___lockmem
010f0     00 2A 06 F6 | 	mov	result1, #0
010f4     04 00 00 FF 
010f8     10 0F 06 F1 | 	add	objptr, ##2320
010fc     07 5F 02 FB | 	rdlong	arg02, objptr
01100     04 00 00 FF 
01104     10 0F 86 F1 | 	sub	objptr, ##2320
01108     00 5C 06 F6 | 	mov	arg01, #0
0110c     00 60 06 F6 | 	mov	arg03, #0
01110     0A 62 06 F6 | 	mov	arg04, #10
01114     C4 51 B0 FD | 	call	#__system___basic_print_integer
01118     00 5C 06 F6 | 	mov	arg01, #0
0111c     0A 5E 06 F6 | 	mov	arg02, #10
01120     00 60 06 F6 | 	mov	arg03, #0
01124     20 51 B0 FD | 	call	#__system___basic_print_char
01128     01 2A 06 F6 | 	mov	result1, #1
0112c     00 5C 06 F6 | 	mov	arg01, #0
01130     0C 64 B0 FD | 	call	#__system___getiolock_0145
01134     15 01 68 FC | 	wrlong	#0, result1
01138     00 2A 06 F6 | 	mov	result1, #0
0113c     62 5F 02 F6 | 	mov	arg02, local46
01140                 | ' 
01140                 | ' ''---------- Set the (x,y) position of cursor
01140                 | ' 
01140                 | ' cursor_x:=x
01140     34 0E 06 F1 | 	add	objptr, #52
01144     07 45 48 FC | 	wrbyte	#34, objptr
01148                 | ' cursor_y:=y
01148     01 0E 06 F1 | 	add	objptr, #1
0114c     07 5F 42 FC | 	wrbyte	arg02, objptr
01150     35 0E 86 F1 | 	sub	objptr, #53
01154     00 5C 06 F6 | 	mov	arg01, #0
01158     E4 63 B0 FD | 	call	#__system___getiolock_0145
0115c     15 5D 02 F6 | 	mov	arg01, result1
01160     98 4D B0 FD | 	call	#__system___lockmem
01164     00 2A 06 F6 | 	mov	result1, #0
01168     04 00 00 FF 
0116c     14 0F 06 F1 | 	add	objptr, ##2324
01170     07 5F 02 FB | 	rdlong	arg02, objptr
01174     04 00 00 FF 
01178     14 0F 86 F1 | 	sub	objptr, ##2324
0117c     00 5C 06 F6 | 	mov	arg01, #0
01180     00 60 06 F6 | 	mov	arg03, #0
01184     0A 62 06 F6 | 	mov	arg04, #10
01188     50 51 B0 FD | 	call	#__system___basic_print_integer
0118c     00 5C 06 F6 | 	mov	arg01, #0
01190     0A 5E 06 F6 | 	mov	arg02, #10
01194     00 60 06 F6 | 	mov	arg03, #0
01198     AC 50 B0 FD | 	call	#__system___basic_print_char
0119c     01 2A 06 F6 | 	mov	result1, #1
011a0     00 5C 06 F6 | 	mov	arg01, #0
011a4     98 63 B0 FD | 	call	#__system___getiolock_0145
011a8     15 01 68 FC | 	wrlong	#0, result1
011ac     00 2A 06 F6 | 	mov	result1, #0
011b0     62 5F 02 F6 | 	mov	arg02, local46
011b4                 | ' 
011b4                 | ' ''---------- Set the (x,y) position of cursor
011b4                 | ' 
011b4                 | ' cursor_x:=x
011b4     34 0E 06 F1 | 	add	objptr, #52
011b8     07 4B 48 FC | 	wrbyte	#37, objptr
011bc                 | ' cursor_y:=y
011bc     01 0E 06 F1 | 	add	objptr, #1
011c0     07 5F 42 FC | 	wrbyte	arg02, objptr
011c4     35 0E 86 F1 | 	sub	objptr, #53
011c8     00 5C 06 F6 | 	mov	arg01, #0
011cc     70 63 B0 FD | 	call	#__system___getiolock_0145
011d0     15 5D 02 F6 | 	mov	arg01, result1
011d4     24 4D B0 FD | 	call	#__system___lockmem
011d8     00 2A 06 F6 | 	mov	result1, #0
011dc     04 00 00 FF 
011e0     08 0F 06 F1 | 	add	objptr, ##2312
011e4     07 5F 02 FB | 	rdlong	arg02, objptr
011e8     04 00 00 FF 
011ec     08 0F 86 F1 | 	sub	objptr, ##2312
011f0     00 5C 06 F6 | 	mov	arg01, #0
011f4     00 60 06 F6 | 	mov	arg03, #0
011f8     0A 62 06 F6 | 	mov	arg04, #10
011fc     DC 50 B0 FD | 	call	#__system___basic_print_integer
01200     00 5C 06 F6 | 	mov	arg01, #0
01204     0A 5E 06 F6 | 	mov	arg02, #10
01208     00 60 06 F6 | 	mov	arg03, #0
0120c     38 50 B0 FD | 	call	#__system___basic_print_char
01210     01 2A 06 F6 | 	mov	result1, #1
01214     00 5C 06 F6 | 	mov	arg01, #0
01218     24 63 B0 FD | 	call	#__system___getiolock_0145
0121c     15 01 68 FC | 	wrlong	#0, result1
01220     00 2A 06 F6 | 	mov	result1, #0
01224     62 5F 02 F6 | 	mov	arg02, local46
01228                 | ' 
01228                 | ' ''---------- Set the (x,y) position of cursor
01228                 | ' 
01228                 | ' cursor_x:=x
01228     34 0E 06 F1 | 	add	objptr, #52
0122c     07 57 48 FC | 	wrbyte	#43, objptr
01230                 | ' cursor_y:=y
01230     01 0E 06 F1 | 	add	objptr, #1
01234     07 5F 42 FC | 	wrbyte	arg02, objptr
01238     35 0E 86 F1 | 	sub	objptr, #53
0123c     00 5C 06 F6 | 	mov	arg01, #0
01240     FC 62 B0 FD | 	call	#__system___getiolock_0145
01244     15 5D 02 F6 | 	mov	arg01, result1
01248     B0 4C B0 FD | 	call	#__system___lockmem
0124c     00 2A 06 F6 | 	mov	result1, #0
01250     04 00 00 FF 
01254     0C 0F 06 F1 | 	add	objptr, ##2316
01258     07 5F 02 FB | 	rdlong	arg02, objptr
0125c     04 00 00 FF 
01260     0C 0F 86 F1 | 	sub	objptr, ##2316
01264     00 5C 06 F6 | 	mov	arg01, #0
01268     00 60 06 F6 | 	mov	arg03, #0
0126c     0A 62 06 F6 | 	mov	arg04, #10
01270     68 50 B0 FD | 	call	#__system___basic_print_integer
01274     00 5C 06 F6 | 	mov	arg01, #0
01278     0A 5E 06 F6 | 	mov	arg02, #10
0127c     00 60 06 F6 | 	mov	arg03, #0
01280     C4 4F B0 FD | 	call	#__system___basic_print_char
01284     01 2A 06 F6 | 	mov	result1, #1
01288     00 5C 06 F6 | 	mov	arg01, #0
0128c     B0 62 B0 FD | 	call	#__system___getiolock_0145
01290     15 01 68 FC | 	wrlong	#0, result1
01294     00 2A 06 F6 | 	mov	result1, #0
01298                 | LR__0013
01298                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01298     10 92 5E F2 | 	cmps	local21, #16 wcz
0129c     C4 02 90 CD |  if_b	jmp	#LR__0014
012a0     49 C9 02 F6 | 	mov	local48, local21
012a4     0B C8 86 F1 | 	sub	local48, #11
012a8     64 5F 02 F6 | 	mov	arg02, local48
012ac                 | ' 
012ac                 | ' ''---------- Set the (x,y) position of cursor
012ac                 | ' 
012ac                 | ' cursor_x:=x
012ac     34 0E 06 F1 | 	add	objptr, #52
012b0     07 73 48 FC | 	wrbyte	#57, objptr
012b4                 | ' cursor_y:=y
012b4     01 0E 06 F1 | 	add	objptr, #1
012b8     07 5F 42 FC | 	wrbyte	arg02, objptr
012bc     49 CB 02 F6 | 	mov	local49, local21
012c0     02 CA 66 F0 | 	shl	local49, #2
012c4     04 00 00 FF 
012c8     1B 0E 06 F1 | 	add	objptr, ##2075
012cc     07 CB 02 F1 | 	add	local49, objptr
012d0     00 5C 06 F6 | 	mov	arg01, #0
012d4     04 00 00 FF 
012d8     50 0E 86 F1 | 	sub	objptr, ##2128
012dc     60 62 B0 FD | 	call	#__system___getiolock_0145
012e0     15 5D 02 F6 | 	mov	arg01, result1
012e4     14 4C B0 FD | 	call	#__system___lockmem
012e8     00 2A 06 F6 | 	mov	result1, #0
012ec     65 5F 02 FB | 	rdlong	arg02, local49
012f0     00 5C 06 F6 | 	mov	arg01, #0
012f4     00 60 06 F6 | 	mov	arg03, #0
012f8     98 4F B0 FD | 	call	#__system___basic_print_string
012fc     00 5C 06 F6 | 	mov	arg01, #0
01300     0A 5E 06 F6 | 	mov	arg02, #10
01304     00 60 06 F6 | 	mov	arg03, #0
01308     3C 4F B0 FD | 	call	#__system___basic_print_char
0130c     01 2A 06 F6 | 	mov	result1, #1
01310     00 5C 06 F6 | 	mov	arg01, #0
01314     28 62 B0 FD | 	call	#__system___getiolock_0145
01318     15 01 68 FC | 	wrlong	#0, result1
0131c     00 2A 06 F6 | 	mov	result1, #0
01320     64 5F 02 F6 | 	mov	arg02, local48
01324                 | ' 
01324                 | ' ''---------- Set the (x,y) position of cursor
01324                 | ' 
01324                 | ' cursor_x:=x
01324     34 0E 06 F1 | 	add	objptr, #52
01328     07 A1 48 FC | 	wrbyte	#80, objptr
0132c                 | ' cursor_y:=y
0132c     01 0E 06 F1 | 	add	objptr, #1
01330     07 5F 42 FC | 	wrbyte	arg02, objptr
01334     35 0E 86 F1 | 	sub	objptr, #53
01338     00 5C 06 F6 | 	mov	arg01, #0
0133c     00 62 B0 FD | 	call	#__system___getiolock_0145
01340     15 5D 02 F6 | 	mov	arg01, result1
01344     B4 4B B0 FD | 	call	#__system___lockmem
01348     00 2A 06 F6 | 	mov	result1, #0
0134c     04 00 00 FF 
01350     04 0F 06 F1 | 	add	objptr, ##2308
01354     07 5F 02 FB | 	rdlong	arg02, objptr
01358     04 00 00 FF 
0135c     04 0F 86 F1 | 	sub	objptr, ##2308
01360     00 5C 06 F6 | 	mov	arg01, #0
01364     00 60 06 F6 | 	mov	arg03, #0
01368     0A 62 06 F6 | 	mov	arg04, #10
0136c     6C 4F B0 FD | 	call	#__system___basic_print_integer
01370     00 5C 06 F6 | 	mov	arg01, #0
01374     0A 5E 06 F6 | 	mov	arg02, #10
01378     00 60 06 F6 | 	mov	arg03, #0
0137c     C8 4E B0 FD | 	call	#__system___basic_print_char
01380     01 2A 06 F6 | 	mov	result1, #1
01384     00 5C 06 F6 | 	mov	arg01, #0
01388     B4 61 B0 FD | 	call	#__system___getiolock_0145
0138c     15 01 68 FC | 	wrlong	#0, result1
01390     00 2A 06 F6 | 	mov	result1, #0
01394     64 5F 02 F6 | 	mov	arg02, local48
01398                 | ' 
01398                 | ' ''---------- Set the (x,y) position of cursor
01398                 | ' 
01398                 | ' cursor_x:=x
01398     34 0E 06 F1 | 	add	objptr, #52
0139c     07 AF 48 FC | 	wrbyte	#87, objptr
013a0                 | ' cursor_y:=y
013a0     01 0E 06 F1 | 	add	objptr, #1
013a4     07 5F 42 FC | 	wrbyte	arg02, objptr
013a8     35 0E 86 F1 | 	sub	objptr, #53
013ac     00 5C 06 F6 | 	mov	arg01, #0
013b0     8C 61 B0 FD | 	call	#__system___getiolock_0145
013b4     15 5D 02 F6 | 	mov	arg01, result1
013b8     40 4B B0 FD | 	call	#__system___lockmem
013bc     00 2A 06 F6 | 	mov	result1, #0
013c0     04 00 00 FF 
013c4     10 0F 06 F1 | 	add	objptr, ##2320
013c8     07 5F 02 FB | 	rdlong	arg02, objptr
013cc     04 00 00 FF 
013d0     10 0F 86 F1 | 	sub	objptr, ##2320
013d4     00 5C 06 F6 | 	mov	arg01, #0
013d8     00 60 06 F6 | 	mov	arg03, #0
013dc     0A 62 06 F6 | 	mov	arg04, #10
013e0     F8 4E B0 FD | 	call	#__system___basic_print_integer
013e4     00 5C 06 F6 | 	mov	arg01, #0
013e8     0A 5E 06 F6 | 	mov	arg02, #10
013ec     00 60 06 F6 | 	mov	arg03, #0
013f0     54 4E B0 FD | 	call	#__system___basic_print_char
013f4     01 2A 06 F6 | 	mov	result1, #1
013f8     00 5C 06 F6 | 	mov	arg01, #0
013fc     40 61 B0 FD | 	call	#__system___getiolock_0145
01400     15 01 68 FC | 	wrlong	#0, result1
01404     00 2A 06 F6 | 	mov	result1, #0
01408     64 5F 02 F6 | 	mov	arg02, local48
0140c                 | ' 
0140c                 | ' ''---------- Set the (x,y) position of cursor
0140c                 | ' 
0140c                 | ' cursor_x:=x
0140c     34 0E 06 F1 | 	add	objptr, #52
01410     07 B5 48 FC | 	wrbyte	#90, objptr
01414                 | ' cursor_y:=y
01414     01 0E 06 F1 | 	add	objptr, #1
01418     07 5F 42 FC | 	wrbyte	arg02, objptr
0141c     35 0E 86 F1 | 	sub	objptr, #53
01420     00 5C 06 F6 | 	mov	arg01, #0
01424     18 61 B0 FD | 	call	#__system___getiolock_0145
01428     15 5D 02 F6 | 	mov	arg01, result1
0142c     CC 4A B0 FD | 	call	#__system___lockmem
01430     00 2A 06 F6 | 	mov	result1, #0
01434     04 00 00 FF 
01438     14 0F 06 F1 | 	add	objptr, ##2324
0143c     07 5F 02 FB | 	rdlong	arg02, objptr
01440     04 00 00 FF 
01444     14 0F 86 F1 | 	sub	objptr, ##2324
01448     00 5C 06 F6 | 	mov	arg01, #0
0144c     00 60 06 F6 | 	mov	arg03, #0
01450     0A 62 06 F6 | 	mov	arg04, #10
01454     84 4E B0 FD | 	call	#__system___basic_print_integer
01458     00 5C 06 F6 | 	mov	arg01, #0
0145c     0A 5E 06 F6 | 	mov	arg02, #10
01460     00 60 06 F6 | 	mov	arg03, #0
01464     E0 4D B0 FD | 	call	#__system___basic_print_char
01468     01 2A 06 F6 | 	mov	result1, #1
0146c     00 5C 06 F6 | 	mov	arg01, #0
01470     CC 60 B0 FD | 	call	#__system___getiolock_0145
01474     15 01 68 FC | 	wrlong	#0, result1
01478     00 2A 06 F6 | 	mov	result1, #0
0147c     64 5F 02 F6 | 	mov	arg02, local48
01480                 | ' 
01480                 | ' ''---------- Set the (x,y) position of cursor
01480                 | ' 
01480                 | ' cursor_x:=x
01480     34 0E 06 F1 | 	add	objptr, #52
01484     07 BB 48 FC | 	wrbyte	#93, objptr
01488                 | ' cursor_y:=y
01488     01 0E 06 F1 | 	add	objptr, #1
0148c     07 5F 42 FC | 	wrbyte	arg02, objptr
01490     35 0E 86 F1 | 	sub	objptr, #53
01494     00 5C 06 F6 | 	mov	arg01, #0
01498     A4 60 B0 FD | 	call	#__system___getiolock_0145
0149c     15 5D 02 F6 | 	mov	arg01, result1
014a0     58 4A B0 FD | 	call	#__system___lockmem
014a4     00 2A 06 F6 | 	mov	result1, #0
014a8     04 00 00 FF 
014ac     08 0F 06 F1 | 	add	objptr, ##2312
014b0     07 5F 02 FB | 	rdlong	arg02, objptr
014b4     04 00 00 FF 
014b8     08 0F 86 F1 | 	sub	objptr, ##2312
014bc     00 5C 06 F6 | 	mov	arg01, #0
014c0     00 60 06 F6 | 	mov	arg03, #0
014c4     0A 62 06 F6 | 	mov	arg04, #10
014c8     10 4E B0 FD | 	call	#__system___basic_print_integer
014cc     00 5C 06 F6 | 	mov	arg01, #0
014d0     0A 5E 06 F6 | 	mov	arg02, #10
014d4     00 60 06 F6 | 	mov	arg03, #0
014d8     6C 4D B0 FD | 	call	#__system___basic_print_char
014dc     01 2A 06 F6 | 	mov	result1, #1
014e0     00 5C 06 F6 | 	mov	arg01, #0
014e4     58 60 B0 FD | 	call	#__system___getiolock_0145
014e8     15 01 68 FC | 	wrlong	#0, result1
014ec     00 2A 06 F6 | 	mov	result1, #0
014f0     64 5F 02 F6 | 	mov	arg02, local48
014f4                 | ' 
014f4                 | ' ''---------- Set the (x,y) position of cursor
014f4                 | ' 
014f4                 | ' cursor_x:=x
014f4     34 0E 06 F1 | 	add	objptr, #52
014f8     07 C7 48 FC | 	wrbyte	#99, objptr
014fc                 | ' cursor_y:=y
014fc     01 0E 06 F1 | 	add	objptr, #1
01500     07 5F 42 FC | 	wrbyte	arg02, objptr
01504     35 0E 86 F1 | 	sub	objptr, #53
01508     00 5C 06 F6 | 	mov	arg01, #0
0150c     30 60 B0 FD | 	call	#__system___getiolock_0145
01510     15 5D 02 F6 | 	mov	arg01, result1
01514     E4 49 B0 FD | 	call	#__system___lockmem
01518     00 2A 06 F6 | 	mov	result1, #0
0151c     04 00 00 FF 
01520     0C 0F 06 F1 | 	add	objptr, ##2316
01524     07 5F 02 FB | 	rdlong	arg02, objptr
01528     04 00 00 FF 
0152c     0C 0F 86 F1 | 	sub	objptr, ##2316
01530     00 5C 06 F6 | 	mov	arg01, #0
01534     00 60 06 F6 | 	mov	arg03, #0
01538     0A 62 06 F6 | 	mov	arg04, #10
0153c     9C 4D B0 FD | 	call	#__system___basic_print_integer
01540     00 5C 06 F6 | 	mov	arg01, #0
01544     0A 5E 06 F6 | 	mov	arg02, #10
01548     00 60 06 F6 | 	mov	arg03, #0
0154c     F8 4C B0 FD | 	call	#__system___basic_print_char
01550     01 2A 06 F6 | 	mov	result1, #1
01554     00 5C 06 F6 | 	mov	arg01, #0
01558     E4 5F B0 FD | 	call	#__system___getiolock_0145
0155c     15 01 68 FC | 	wrlong	#0, result1
01560     00 2A 06 F6 | 	mov	result1, #0
01564                 | LR__0014
01564     01 92 06 F1 | 	add	local21, #1
01568     1E AE 06 F1 | 	add	local35, #30
0156c     04 B0 06 F1 | 	add	local36, #4
01570     1E B2 06 F1 | 	add	local37, #30
01574     EC F8 9F FD | 	jmp	#LR__0010
01578                 | LR__0015
01578                 | ' print
01578     00 5C 06 F6 | 	mov	arg01, #0
0157c     C0 5F B0 FD | 	call	#__system___getiolock_0145
01580     15 5D 02 F6 | 	mov	arg01, result1
01584     74 49 B0 FD | 	call	#__system___lockmem
01588     00 2A 06 F6 | 	mov	result1, #0
0158c     00 5C 06 F6 | 	mov	arg01, #0
01590     0A 5E 06 F6 | 	mov	arg02, #10
01594     00 60 06 F6 | 	mov	arg03, #0
01598     AC 4C B0 FD | 	call	#__system___basic_print_char
0159c     01 2A 06 F6 | 	mov	result1, #1
015a0     00 5C 06 F6 | 	mov	arg01, #0
015a4     98 5F B0 FD | 	call	#__system___getiolock_0145
015a8     15 01 68 FC | 	wrlong	#0, result1
015ac     03 00 00 FF 
015b0     30 0F 06 F1 | 	add	objptr, ##1840
015b4     03 00 00 FF 
015b8     24 17 06 F1 | 	add	ptr__audio014_spin2_dat__, ##1828
015bc                 | ' 
015bc                 | ' 
015bc                 | ' channel1[0]:=@null
015bc     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
015c0                 | ' channel1[1]:=0
015c0     04 0E 06 F1 | 	add	objptr, #4
015c4     07 01 68 FC | 	wrlong	#0, objptr
015c8                 | ' channel1[2]:=0
015c8     04 0E 06 F1 | 	add	objptr, #4
015cc     07 01 68 FC | 	wrlong	#0, objptr
015d0                 | ' channel1[3]:=2
015d0     04 0E 06 F1 | 	add	objptr, #4
015d4     07 05 68 FC | 	wrlong	#2, objptr
015d8                 | ' channel1[4]:=0
015d8     04 0E 06 F1 | 	add	objptr, #4
015dc     07 01 68 FC | 	wrlong	#0, objptr
015e0                 | ' channel1[5]:=8192
015e0     04 0E 06 F1 | 	add	objptr, #4
015e4     10 00 80 FF 
015e8     07 01 68 FC | 	wrlong	##8192, objptr
015ec                 | ' channel1[6]:=101
015ec     04 0E 06 F1 | 	add	objptr, #4
015f0     07 CB 68 FC | 	wrlong	#101, objptr
015f4                 | ' channel1[7]:=2
015f4     04 0E 06 F1 | 	add	objptr, #4
015f8     07 05 68 FC | 	wrlong	#2, objptr
015fc                 | ' 
015fc                 | ' channel2[0]:=@null
015fc     08 0E 06 F1 | 	add	objptr, #8
01600     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01604                 | ' channel2[1]:=0
01604     04 0E 06 F1 | 	add	objptr, #4
01608     07 01 68 FC | 	wrlong	#0, objptr
0160c                 | ' channel2[2]:=0
0160c     04 0E 06 F1 | 	add	objptr, #4
01610     07 01 68 FC | 	wrlong	#0, objptr
01614                 | ' channel2[3]:=2
01614     04 0E 06 F1 | 	add	objptr, #4
01618     07 05 68 FC | 	wrlong	#2, objptr
0161c                 | ' channel2[4]:=0
0161c     04 0E 06 F1 | 	add	objptr, #4
01620     07 01 68 FC | 	wrlong	#0, objptr
01624                 | ' channel2[5]:=8192
01624     04 0E 06 F1 | 	add	objptr, #4
01628     10 00 80 FF 
0162c     07 01 68 FC | 	wrlong	##8192, objptr
01630                 | ' channel2[6]:=103
01630     04 0E 06 F1 | 	add	objptr, #4
01634     07 CF 68 FC | 	wrlong	#103, objptr
01638                 | ' channel2[7]:=2
01638     04 0E 06 F1 | 	add	objptr, #4
0163c     07 05 68 FC | 	wrlong	#2, objptr
01640                 | ' 
01640                 | ' channel3[0]:=@null
01640     08 0E 06 F1 | 	add	objptr, #8
01644     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01648                 | ' channel3[1]:=0
01648     04 0E 06 F1 | 	add	objptr, #4
0164c     07 01 68 FC | 	wrlong	#0, objptr
01650                 | ' channel3[2]:=0
01650     04 0E 06 F1 | 	add	objptr, #4
01654     07 01 68 FC | 	wrlong	#0, objptr
01658                 | ' channel3[3]:=2
01658     04 0E 06 F1 | 	add	objptr, #4
0165c     07 05 68 FC | 	wrlong	#2, objptr
01660                 | ' channel3[4]:=0
01660     04 0E 06 F1 | 	add	objptr, #4
01664     07 01 68 FC | 	wrlong	#0, objptr
01668                 | ' channel3[5]:=8192
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     10 00 80 FF 
01670     07 01 68 FC | 	wrlong	##8192, objptr
01674                 | ' channel3[6]:=107
01674     04 0E 06 F1 | 	add	objptr, #4
01678     07 D7 68 FC | 	wrlong	#107, objptr
0167c                 | ' channel3[7]:=2
0167c     04 0E 06 F1 | 	add	objptr, #4
01680     07 05 68 FC | 	wrlong	#2, objptr
01684                 | ' 
01684                 | ' channel4[0]:=@null
01684     08 0E 06 F1 | 	add	objptr, #8
01688     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
0168c                 | ' channel4[1]:=0
0168c     04 0E 06 F1 | 	add	objptr, #4
01690     07 01 68 FC | 	wrlong	#0, objptr
01694                 | ' channel4[2]:=0
01694     04 0E 06 F1 | 	add	objptr, #4
01698     07 01 68 FC | 	wrlong	#0, objptr
0169c                 | ' channel4[3]:=2
0169c     04 0E 06 F1 | 	add	objptr, #4
016a0     07 05 68 FC | 	wrlong	#2, objptr
016a4                 | ' channel4[4]:=0
016a4     04 0E 06 F1 | 	add	objptr, #4
016a8     07 01 68 FC | 	wrlong	#0, objptr
016ac                 | ' channel4[5]:=8192
016ac     04 0E 06 F1 | 	add	objptr, #4
016b0     10 00 80 FF 
016b4     07 01 68 FC | 	wrlong	##8192, objptr
016b8                 | ' channel4[6]:=109
016b8     04 0E 06 F1 | 	add	objptr, #4
016bc     07 DB 68 FC | 	wrlong	#109, objptr
016c0                 | ' channel4[7]:=2
016c0     04 0E 06 F1 | 	add	objptr, #4
016c4     07 05 68 FC | 	wrlong	#2, objptr
016c8                 | ' channel4[8]:=1
016c8     04 0E 06 F1 | 	add	objptr, #4
016cc     07 03 68 FC | 	wrlong	#1, objptr
016d0                 | ' 
016d0                 | ' channel5[0]:=@null
016d0     04 0E 06 F1 | 	add	objptr, #4
016d4     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
016d8                 | ' channel5[1]:=0
016d8     04 0E 06 F1 | 	add	objptr, #4
016dc     07 01 68 FC | 	wrlong	#0, objptr
016e0                 | ' channel5[2]:=0
016e0     04 0E 06 F1 | 	add	objptr, #4
016e4     07 01 68 FC | 	wrlong	#0, objptr
016e8                 | ' channel5[3]:=2
016e8     04 0E 06 F1 | 	add	objptr, #4
016ec     07 05 68 FC | 	wrlong	#2, objptr
016f0                 | ' channel5[4]:=0
016f0     04 0E 06 F1 | 	add	objptr, #4
016f4     07 01 68 FC | 	wrlong	#0, objptr
016f8                 | ' channel5[5]:=8192
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     10 00 80 FF 
01700     07 01 68 FC | 	wrlong	##8192, objptr
01704                 | ' channel5[6]:=113
01704     04 0E 06 F1 | 	add	objptr, #4
01708     07 E3 68 FC | 	wrlong	#113, objptr
0170c                 | ' channel5[7]:=2
0170c     04 0E 06 F1 | 	add	objptr, #4
01710     07 05 68 FC | 	wrlong	#2, objptr
01714                 | ' 
01714                 | ' channel6[0]:=@null
01714     08 0E 06 F1 | 	add	objptr, #8
01718     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
0171c                 | ' channel6[1]:=0
0171c     04 0E 06 F1 | 	add	objptr, #4
01720     07 01 68 FC | 	wrlong	#0, objptr
01724                 | ' channel6[2]:=0
01724     04 0E 06 F1 | 	add	objptr, #4
01728     07 01 68 FC | 	wrlong	#0, objptr
0172c                 | ' channel6[3]:=2
0172c     04 0E 06 F1 | 	add	objptr, #4
01730     07 05 68 FC | 	wrlong	#2, objptr
01734                 | ' channel6[4]:=0
01734     04 0E 06 F1 | 	add	objptr, #4
01738     07 01 68 FC | 	wrlong	#0, objptr
0173c                 | ' channel6[5]:=8192
0173c     04 0E 06 F1 | 	add	objptr, #4
01740     10 00 80 FF 
01744     07 01 68 FC | 	wrlong	##8192, objptr
01748                 | ' channel6[6]:=127
01748     04 0E 06 F1 | 	add	objptr, #4
0174c     07 FF 68 FC | 	wrlong	#127, objptr
01750                 | ' channel6[7]:=2
01750     04 0E 06 F1 | 	add	objptr, #4
01754     07 05 68 FC | 	wrlong	#2, objptr
01758                 | ' 
01758                 | ' channel7[0]:=@null
01758     08 0E 06 F1 | 	add	objptr, #8
0175c     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01760                 | ' channel7[1]:=0
01760     04 0E 06 F1 | 	add	objptr, #4
01764     07 01 68 FC | 	wrlong	#0, objptr
01768                 | ' channel7[2]:=0
01768     04 0E 06 F1 | 	add	objptr, #4
0176c     07 01 68 FC | 	wrlong	#0, objptr
01770                 | ' channel7[3]:=2
01770     04 0E 06 F1 | 	add	objptr, #4
01774     07 05 68 FC | 	wrlong	#2, objptr
01778                 | ' channel7[4]:=0
01778     04 0E 06 F1 | 	add	objptr, #4
0177c     07 01 68 FC | 	wrlong	#0, objptr
01780                 | ' channel7[5]:=8192
01780     04 0E 06 F1 | 	add	objptr, #4
01784     10 00 80 FF 
01788     07 01 68 FC | 	wrlong	##8192, objptr
0178c                 | ' channel7[6]:=131
0178c     04 0E 06 F1 | 	add	objptr, #4
01790     07 07 69 FC | 	wrlong	#131, objptr
01794                 | ' channel7[7]:=2
01794     04 0E 06 F1 | 	add	objptr, #4
01798     07 05 68 FC | 	wrlong	#2, objptr
0179c                 | ' 
0179c                 | ' channel8[0]:=@null
0179c     08 0E 06 F1 | 	add	objptr, #8
017a0     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
017a4                 | ' channel8[1]:=0
017a4     04 0E 06 F1 | 	add	objptr, #4
017a8     07 01 68 FC | 	wrlong	#0, objptr
017ac                 | ' channel8[2]:=0
017ac     04 0E 06 F1 | 	add	objptr, #4
017b0     07 01 68 FC | 	wrlong	#0, objptr
017b4                 | ' channel8[3]:=2
017b4     04 0E 06 F1 | 	add	objptr, #4
017b8     07 05 68 FC | 	wrlong	#2, objptr
017bc                 | ' channel8[4]:=0
017bc     04 0E 06 F1 | 	add	objptr, #4
017c0     07 01 68 FC | 	wrlong	#0, objptr
017c4                 | ' channel8[5]:=8192
017c4     04 0E 06 F1 | 	add	objptr, #4
017c8     10 00 80 FF 
017cc     07 01 68 FC | 	wrlong	##8192, objptr
017d0                 | ' channel8[6]:=137
017d0     04 0E 06 F1 | 	add	objptr, #4
017d4     07 13 69 FC | 	wrlong	#137, objptr
017d8                 | ' channel8[7]:=2
017d8     04 0E 06 F1 | 	add	objptr, #4
017dc     07 05 68 FC | 	wrlong	#2, objptr
017e0                 | ' 
017e0                 | ' channel1[8]:=1
017e0     F8 0E 86 F1 | 	sub	objptr, #248
017e4     07 03 68 FC | 	wrlong	#1, objptr
017e8                 | ' channel2[8]:=1
017e8     24 0E 06 F1 | 	add	objptr, #36
017ec     07 03 68 FC | 	wrlong	#1, objptr
017f0                 | ' channel3[8]:=1
017f0     24 0E 06 F1 | 	add	objptr, #36
017f4     07 03 68 FC | 	wrlong	#1, objptr
017f8                 | ' channel4[8]:=1
017f8     24 0E 06 F1 | 	add	objptr, #36
017fc     07 03 68 FC | 	wrlong	#1, objptr
01800                 | ' channel5[8]:=1
01800     24 0E 06 F1 | 	add	objptr, #36
01804     07 03 68 FC | 	wrlong	#1, objptr
01808                 | ' channel6[8]:=1
01808     24 0E 06 F1 | 	add	objptr, #36
0180c     07 03 68 FC | 	wrlong	#1, objptr
01810                 | ' channel7[8]:=1
01810     24 0E 06 F1 | 	add	objptr, #36
01814     07 03 68 FC | 	wrlong	#1, objptr
01818                 | ' channel8[8]:=1
01818     24 0E 06 F1 | 	add	objptr, #36
0181c     07 03 68 FC | 	wrlong	#1, objptr
01820     1C 0F 86 F1 | 	sub	objptr, #284
01824                 | ' 
01824                 | ' cog:=coginit(16,@audio,@channel1)
01824     03 00 00 FF 
01828     24 17 86 F1 | 	sub	ptr__audio014_spin2_dat__, ##1828
0182c     0B 5F 02 F6 | 	mov	arg02, ptr__audio014_spin2_dat__
01830     07 61 02 F6 | 	mov	arg03, objptr
01834     10 5C 06 F6 | 	mov	arg01, #16
01838     28 60 62 FD | 	setq	arg03
0183c     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01840     01 5C 66 C6 |  if_b	neg	arg01, #1
01844     2E 2B 02 F6 | 	mov	result1, arg01
01848                 | ' return cog
01848     B0 0F 06 F1 | 	add	objptr, #432
0184c     07 01 68 FC | 	wrlong	#0, objptr
01850     04 0E 06 F1 | 	add	objptr, #4
01854     07 01 68 FC | 	wrlong	#0, objptr
01858     04 0E 06 F1 | 	add	objptr, #4
0185c     07 01 68 FC | 	wrlong	#0, objptr
01860     04 0E 06 F1 | 	add	objptr, #4
01864     07 01 68 FC | 	wrlong	#0, objptr
01868     04 00 00 FF 
0186c     EC 0E 86 F1 | 	sub	objptr, ##2284
01870                 | ' getinfo(ma,samples)
01870                 | ' 
01870                 | ' paula.start
01870                 | ' 
01870                 | ' old1=0 : old2=0 :old3=0 : old4=0
01870                 | ' 
01870                 | ' do
01870                 | LR__0016
01870                 | ' 
01870                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01870                 | ' 
01870                 | ' repeat i from 1 to amount
01870     01 CC 06 F6 | 	mov	local50, #1
01874                 | LR__0017
01874                 | '   repeat until vblank==0
01874                 | LR__0018
01874     40 0E 06 F1 | 	add	objptr, #64
01878     07 CF 0A FB | 	rdlong	local51, objptr wz
0187c     40 0E 86 F1 | 	sub	objptr, #64
01880     0C 00 90 AD |  if_e	jmp	#LR__0019
01884                 | '     waitus(100)
01884     64 5C 06 F6 | 	mov	arg01, #100
01888     B4 48 B0 FD | 	call	#__system___waitus
0188c     E4 FF 9F FD | 	jmp	#LR__0018
01890                 | LR__0019
01890                 | '   repeat until vblank==1
01890                 | LR__0020
01890     40 0E 06 F1 | 	add	objptr, #64
01894     07 CF 02 FB | 	rdlong	local51, objptr
01898     40 0E 86 F1 | 	sub	objptr, #64
0189c     01 CE 0E F2 | 	cmp	local51, #1 wz
018a0     0C 00 90 AD |  if_e	jmp	#LR__0021
018a4                 | '     waitus(100)
018a4     64 5C 06 F6 | 	mov	arg01, #100
018a8     94 48 B0 FD | 	call	#__system___waitus
018ac     E0 FF 9F FD | 	jmp	#LR__0020
018b0                 | LR__0021
018b0     F0 CD 6E FB | 	djnz	local50, #LR__0017
018b4     02 00 00 FF 
018b8     34 0F 06 F1 | 	add	objptr, ##1332
018bc     74 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018c0     A7 0E 06 F1 | 	add	objptr, #167
018c4     07 7D 02 FB | 	rdlong	local10, objptr
018c8     55 0F 06 F1 | 	add	objptr, #341
018cc     07 7D 62 FC | 	wrlong	local10, objptr
018d0     04 0E 06 F1 | 	add	objptr, #4
018d4     07 03 68 FC | 	wrlong	#1, objptr
018d8     45 0F 86 F1 | 	sub	objptr, #325
018dc     07 7D E2 FA | 	rdword	local10, objptr
018e0     08 0E 06 F1 | 	add	objptr, #8
018e4     07 D1 02 FB | 	rdlong	local52, objptr
018e8     68 7D 82 F1 | 	sub	local10, local52
018ec     41 0F 06 F1 | 	add	objptr, #321
018f0     07 7D 62 FC | 	wrlong	local10, objptr
018f4     49 0F 86 F1 | 	sub	objptr, #329
018f8     07 7D E2 FA | 	rdword	local10, objptr
018fc     4D 0F 06 F1 | 	add	objptr, #333
01900     07 7D 62 FC | 	wrlong	local10, objptr
01904     09 0F 86 F1 | 	sub	objptr, #265
01908     07 7D 02 FB | 	rdlong	local10, objptr
0190c     10 0E 06 F1 | 	add	objptr, #16
01910     07 D1 02 FB | 	rdlong	local52, objptr
01914     68 7D 02 F1 | 	add	local10, local52
01918     13 0F 86 F1 | 	sub	objptr, #275
0191c     07 85 02 FB | 	rdlong	local14, objptr
01920     42 7D 02 FD | 	qmul	local10, local14
01924     18 D2 62 FD | 	getqx	local53
01928     01 00 00 FF 
0192c     10 0E 06 F1 | 	add	objptr, ##528
01930     07 D3 62 FC | 	wrlong	local53, objptr
01934     04 0E 06 F1 | 	add	objptr, #4
01938     0C 00 80 FF 
0193c     07 01 68 FC | 	wrlong	##6144, objptr
01940     31 0F 86 F1 | 	sub	objptr, #305
01944     07 7D 02 FB | 	rdlong	local10, objptr
01948     10 0E 06 F1 | 	add	objptr, #16
0194c     07 D1 02 FB | 	rdlong	local52, objptr
01950     68 7D 02 F1 | 	add	local10, local52
01954     25 0F 06 F1 | 	add	objptr, #293
01958     07 7D 62 FC | 	wrlong	local10, objptr
0195c     04 0E 06 F1 | 	add	objptr, #4
01960     07 03 68 FC | 	wrlong	#1, objptr
01964                 | ' 
01964                 | '     waitvbl
01964                 | '     tracker.tick
01964                 | '     
01964                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01964                 | ' 	paula.channel1(1)=1
01964                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01964                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01964                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01964                 | ' 	paula.channel1(5)=8192-2048
01964                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01964                 | ' 	paula.channel1(7)=1
01964                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus 100 : paula.channel1(8)=1 :old1=tracker.trigger(0)
01964     22 0E 86 F1 | 	sub	objptr, #34
01968     07 7D C2 FA | 	rdbyte	local10, objptr
0196c     B6 0F 06 F1 | 	add	objptr, #438
01970     07 D1 02 FB | 	rdlong	local52, objptr
01974     04 00 00 FF 
01978     E0 0E 86 F1 | 	sub	objptr, ##2272
0197c     68 7D 0A F2 | 	cmp	local10, local52 wz
01980     40 00 90 AD |  if_e	jmp	#LR__0022
01984     03 00 00 FF 
01988     50 0F 06 F1 | 	add	objptr, ##1872
0198c     07 01 68 FC | 	wrlong	#0, objptr
01990     03 00 00 FF 
01994     50 0F 86 F1 | 	sub	objptr, ##1872
01998     64 5C 06 F6 | 	mov	arg01, #100
0199c     A0 47 B0 FD | 	call	#__system___waitus
019a0     03 00 00 FF 
019a4     50 0F 06 F1 | 	add	objptr, ##1872
019a8     07 03 68 FC | 	wrlong	#1, objptr
019ac     26 0E 86 F1 | 	sub	objptr, #38
019b0     07 7D C2 FA | 	rdbyte	local10, objptr
019b4     B6 0F 06 F1 | 	add	objptr, #438
019b8     07 7D 62 FC | 	wrlong	local10, objptr
019bc     04 00 00 FF 
019c0     E0 0E 86 F1 | 	sub	objptr, ##2272
019c4                 | LR__0022
019c4     03 00 00 FF 
019c8     54 0F 06 F1 | 	add	objptr, ##1876
019cc     07 7D 02 FB | 	rdlong	local10, objptr
019d0     9C 0F 06 F1 | 	add	objptr, #412
019d4     07 7D 62 FC | 	wrlong	local10, objptr
019d8     01 00 00 FF 
019dc     11 0F 86 F1 | 	sub	objptr, ##785
019e0     07 7D 02 FB | 	rdlong	local10, objptr
019e4     75 0F 06 F1 | 	add	objptr, #373
019e8     07 7D 62 FC | 	wrlong	local10, objptr
019ec     04 0E 06 F1 | 	add	objptr, #4
019f0     07 03 68 FC | 	wrlong	#1, objptr
019f4     67 0F 86 F1 | 	sub	objptr, #359
019f8     07 7D E2 FA | 	rdword	local10, objptr
019fc     0A 0E 06 F1 | 	add	objptr, #10
01a00     07 D1 02 FB | 	rdlong	local52, objptr
01a04     68 7D 82 F1 | 	sub	local10, local52
01a08     61 0F 06 F1 | 	add	objptr, #353
01a0c     07 7D 62 FC | 	wrlong	local10, objptr
01a10     6B 0F 86 F1 | 	sub	objptr, #363
01a14     07 7D E2 FA | 	rdword	local10, objptr
01a18     6F 0F 06 F1 | 	add	objptr, #367
01a1c     07 7D 62 FC | 	wrlong	local10, objptr
01a20     29 0F 86 F1 | 	sub	objptr, #297
01a24     07 7D 02 FB | 	rdlong	local10, objptr
01a28     10 0E 06 F1 | 	add	objptr, #16
01a2c     07 D1 02 FB | 	rdlong	local52, objptr
01a30     68 7D 02 F1 | 	add	local10, local52
01a34     17 0F 86 F1 | 	sub	objptr, #279
01a38     07 85 02 FB | 	rdlong	local14, objptr
01a3c     42 7D 02 FD | 	qmul	local10, local14
01a40     18 D2 62 FD | 	getqx	local53
01a44     01 00 00 FF 
01a48     34 0E 06 F1 | 	add	objptr, ##564
01a4c     07 D3 62 FC | 	wrlong	local53, objptr
01a50     04 0E 06 F1 | 	add	objptr, #4
01a54     14 00 80 FF 
01a58     07 01 68 FC | 	wrlong	##10240, objptr
01a5c     51 0F 86 F1 | 	sub	objptr, #337
01a60     07 7D 02 FB | 	rdlong	local10, objptr
01a64     10 0E 06 F1 | 	add	objptr, #16
01a68     07 D1 02 FB | 	rdlong	local52, objptr
01a6c     68 7D 02 F1 | 	add	local10, local52
01a70     45 0F 06 F1 | 	add	objptr, #325
01a74     07 7D 62 FC | 	wrlong	local10, objptr
01a78     04 0E 06 F1 | 	add	objptr, #4
01a7c     07 03 68 FC | 	wrlong	#1, objptr
01a80                 | ' 
01a80                 | '     old12=paula.channel2(0)
01a80                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01a80                 | ' 	paula.channel2(1)=1
01a80                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01a80                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01a80                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01a80                 | ' 	paula.channel2(5)=8192+2048
01a80                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01a80                 | ' 	paula.channel2(7)=1
01a80                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus 100 : paula.channel2(8)=1 :old2=tracker.trigger(1)
01a80     45 0E 86 F1 | 	sub	objptr, #69
01a84     07 7D C2 FA | 	rdbyte	local10, objptr
01a88     B9 0F 06 F1 | 	add	objptr, #441
01a8c     07 D1 02 FB | 	rdlong	local52, objptr
01a90     04 00 00 FF 
01a94     E4 0E 86 F1 | 	sub	objptr, ##2276
01a98     68 7D 0A F2 | 	cmp	local10, local52 wz
01a9c     40 00 90 AD |  if_e	jmp	#LR__0023
01aa0     03 00 00 FF 
01aa4     74 0F 06 F1 | 	add	objptr, ##1908
01aa8     07 01 68 FC | 	wrlong	#0, objptr
01aac     03 00 00 FF 
01ab0     74 0F 86 F1 | 	sub	objptr, ##1908
01ab4     64 5C 06 F6 | 	mov	arg01, #100
01ab8     84 46 B0 FD | 	call	#__system___waitus
01abc     03 00 00 FF 
01ac0     74 0F 06 F1 | 	add	objptr, ##1908
01ac4     07 03 68 FC | 	wrlong	#1, objptr
01ac8     49 0E 86 F1 | 	sub	objptr, #73
01acc     07 7D C2 FA | 	rdbyte	local10, objptr
01ad0     B9 0F 06 F1 | 	add	objptr, #441
01ad4     07 7D 62 FC | 	wrlong	local10, objptr
01ad8     04 00 00 FF 
01adc     E4 0E 86 F1 | 	sub	objptr, ##2276
01ae0                 | LR__0023
01ae0     03 00 00 FF 
01ae4     78 0F 06 F1 | 	add	objptr, ##1912
01ae8     07 7D 02 FB | 	rdlong	local10, objptr
01aec     7C 0F 06 F1 | 	add	objptr, #380
01af0     07 7D 62 FC | 	wrlong	local10, objptr
01af4     01 00 00 FF 
01af8     11 0F 86 F1 | 	sub	objptr, ##785
01afc     07 7D 02 FB | 	rdlong	local10, objptr
01b00     95 0F 06 F1 | 	add	objptr, #405
01b04     07 7D 62 FC | 	wrlong	local10, objptr
01b08     04 0E 06 F1 | 	add	objptr, #4
01b0c     07 03 68 FC | 	wrlong	#1, objptr
01b10     89 0F 86 F1 | 	sub	objptr, #393
01b14     07 7D E2 FA | 	rdword	local10, objptr
01b18     0C 0E 06 F1 | 	add	objptr, #12
01b1c     07 D1 02 FB | 	rdlong	local52, objptr
01b20     68 7D 82 F1 | 	sub	local10, local52
01b24     81 0F 06 F1 | 	add	objptr, #385
01b28     07 7D 62 FC | 	wrlong	local10, objptr
01b2c     8D 0F 86 F1 | 	sub	objptr, #397
01b30     07 7D E2 FA | 	rdword	local10, objptr
01b34     91 0F 06 F1 | 	add	objptr, #401
01b38     07 7D 62 FC | 	wrlong	local10, objptr
01b3c     49 0F 86 F1 | 	sub	objptr, #329
01b40     07 7D 02 FB | 	rdlong	local10, objptr
01b44     10 0E 06 F1 | 	add	objptr, #16
01b48     07 D1 02 FB | 	rdlong	local52, objptr
01b4c     68 7D 02 F1 | 	add	local10, local52
01b50     1B 0F 86 F1 | 	sub	objptr, #283
01b54     07 85 02 FB | 	rdlong	local14, objptr
01b58     42 7D 02 FD | 	qmul	local10, local14
01b5c     18 D2 62 FD | 	getqx	local53
01b60     01 00 00 FF 
01b64     58 0E 06 F1 | 	add	objptr, ##600
01b68     07 D3 62 FC | 	wrlong	local53, objptr
01b6c     04 0E 06 F1 | 	add	objptr, #4
01b70     14 00 80 FF 
01b74     07 01 68 FC | 	wrlong	##10240, objptr
01b78     71 0F 86 F1 | 	sub	objptr, #369
01b7c     07 7D 02 FB | 	rdlong	local10, objptr
01b80     10 0E 06 F1 | 	add	objptr, #16
01b84     07 D1 02 FB | 	rdlong	local52, objptr
01b88     68 7D 02 F1 | 	add	local10, local52
01b8c     65 0F 06 F1 | 	add	objptr, #357
01b90     07 7D 62 FC | 	wrlong	local10, objptr
01b94     04 0E 06 F1 | 	add	objptr, #4
01b98     07 03 68 FC | 	wrlong	#1, objptr
01b9c                 | ' 
01b9c                 | '     old13=paula.channel3(0)
01b9c                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01b9c                 | ' 	paula.channel3(1)=1
01b9c                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01b9c                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01b9c                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01b9c                 | ' 	paula.channel3(5)=8192+2048
01b9c                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01b9c                 | ' 	paula.channel3(7)=1
01b9c                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus 100 : paula.channel3(8)=1 :old3=tracker.trigger(2)
01b9c     68 0E 86 F1 | 	sub	objptr, #104
01ba0     07 7D C2 FA | 	rdbyte	local10, objptr
01ba4     BC 0F 06 F1 | 	add	objptr, #444
01ba8     07 D1 02 FB | 	rdlong	local52, objptr
01bac     04 00 00 FF 
01bb0     E8 0E 86 F1 | 	sub	objptr, ##2280
01bb4     68 7D 0A F2 | 	cmp	local10, local52 wz
01bb8     40 00 90 AD |  if_e	jmp	#LR__0024
01bbc     03 00 00 FF 
01bc0     98 0F 06 F1 | 	add	objptr, ##1944
01bc4     07 01 68 FC | 	wrlong	#0, objptr
01bc8     03 00 00 FF 
01bcc     98 0F 86 F1 | 	sub	objptr, ##1944
01bd0     64 5C 06 F6 | 	mov	arg01, #100
01bd4     68 45 B0 FD | 	call	#__system___waitus
01bd8     03 00 00 FF 
01bdc     98 0F 06 F1 | 	add	objptr, ##1944
01be0     07 03 68 FC | 	wrlong	#1, objptr
01be4     6C 0E 86 F1 | 	sub	objptr, #108
01be8     07 7D C2 FA | 	rdbyte	local10, objptr
01bec     BC 0F 06 F1 | 	add	objptr, #444
01bf0     07 7D 62 FC | 	wrlong	local10, objptr
01bf4     04 00 00 FF 
01bf8     E8 0E 86 F1 | 	sub	objptr, ##2280
01bfc                 | LR__0024
01bfc     03 00 00 FF 
01c00     9C 0F 06 F1 | 	add	objptr, ##1948
01c04     07 7D 02 FB | 	rdlong	local10, objptr
01c08     5C 0F 06 F1 | 	add	objptr, #348
01c0c     07 7D 62 FC | 	wrlong	local10, objptr
01c10     01 00 00 FF 
01c14     11 0F 86 F1 | 	sub	objptr, ##785
01c18     07 7D 02 FB | 	rdlong	local10, objptr
01c1c     B5 0F 06 F1 | 	add	objptr, #437
01c20     07 7D 62 FC | 	wrlong	local10, objptr
01c24     04 0E 06 F1 | 	add	objptr, #4
01c28     07 03 68 FC | 	wrlong	#1, objptr
01c2c     AB 0F 86 F1 | 	sub	objptr, #427
01c30     07 7D E2 FA | 	rdword	local10, objptr
01c34     0E 0E 06 F1 | 	add	objptr, #14
01c38     07 D1 02 FB | 	rdlong	local52, objptr
01c3c     68 7D 82 F1 | 	sub	local10, local52
01c40     A1 0F 06 F1 | 	add	objptr, #417
01c44     07 7D 62 FC | 	wrlong	local10, objptr
01c48     AF 0F 86 F1 | 	sub	objptr, #431
01c4c     07 7D E2 FA | 	rdword	local10, objptr
01c50     B3 0F 06 F1 | 	add	objptr, #435
01c54     07 7D 62 FC | 	wrlong	local10, objptr
01c58     69 0F 86 F1 | 	sub	objptr, #361
01c5c     07 7D 02 FB | 	rdlong	local10, objptr
01c60     10 0E 06 F1 | 	add	objptr, #16
01c64     07 D1 02 FB | 	rdlong	local52, objptr
01c68     68 7D 02 F1 | 	add	local10, local52
01c6c     1F 0F 86 F1 | 	sub	objptr, #287
01c70     07 85 02 FB | 	rdlong	local14, objptr
01c74     42 7D 02 FD | 	qmul	local10, local14
01c78     18 D2 62 FD | 	getqx	local53
01c7c     01 00 00 FF 
01c80     7C 0E 06 F1 | 	add	objptr, ##636
01c84     07 D3 62 FC | 	wrlong	local53, objptr
01c88     04 0E 06 F1 | 	add	objptr, #4
01c8c     0C 00 80 FF 
01c90     07 01 68 FC | 	wrlong	##6144, objptr
01c94     91 0F 86 F1 | 	sub	objptr, #401
01c98     07 7D 02 FB | 	rdlong	local10, objptr
01c9c     10 0E 06 F1 | 	add	objptr, #16
01ca0     07 D1 02 FB | 	rdlong	local52, objptr
01ca4     68 7D 02 F1 | 	add	local10, local52
01ca8     85 0F 06 F1 | 	add	objptr, #389
01cac     07 7D 62 FC | 	wrlong	local10, objptr
01cb0     04 0E 06 F1 | 	add	objptr, #4
01cb4     07 03 68 FC | 	wrlong	#1, objptr
01cb8                 | ' 
01cb8                 | '     old14=paula.channel4(0)    
01cb8                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01cb8                 | ' 	paula.channel4(1)=1
01cb8                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01cb8                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01cb8                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*mainvolume
01cb8                 | ' 	paula.channel4(5)=8192-2048
01cb8                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01cb8                 | ' 	paula.channel4(7)=1
01cb8                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus 100 : paula.channel4(8)=1 :old4=tracker.trigger(3)
01cb8     8B 0E 86 F1 | 	sub	objptr, #139
01cbc     07 7D C2 FA | 	rdbyte	local10, objptr
01cc0     BF 0F 06 F1 | 	add	objptr, #447
01cc4     07 D1 02 FB | 	rdlong	local52, objptr
01cc8     04 00 00 FF 
01ccc     EC 0E 86 F1 | 	sub	objptr, ##2284
01cd0     68 7D 0A F2 | 	cmp	local10, local52 wz
01cd4     40 00 90 AD |  if_e	jmp	#LR__0025
01cd8     03 00 00 FF 
01cdc     BC 0F 06 F1 | 	add	objptr, ##1980
01ce0     07 01 68 FC | 	wrlong	#0, objptr
01ce4     03 00 00 FF 
01ce8     BC 0F 86 F1 | 	sub	objptr, ##1980
01cec     64 5C 06 F6 | 	mov	arg01, #100
01cf0     4C 44 B0 FD | 	call	#__system___waitus
01cf4     03 00 00 FF 
01cf8     BC 0F 06 F1 | 	add	objptr, ##1980
01cfc     07 03 68 FC | 	wrlong	#1, objptr
01d00     8F 0E 86 F1 | 	sub	objptr, #143
01d04     07 7D C2 FA | 	rdbyte	local10, objptr
01d08     BF 0F 06 F1 | 	add	objptr, #447
01d0c     07 7D 62 FC | 	wrlong	local10, objptr
01d10     04 00 00 FF 
01d14     EC 0E 86 F1 | 	sub	objptr, ##2284
01d18                 | LR__0025
01d18     1D 5E 06 F6 | 	mov	arg02, #29
01d1c                 | ' 
01d1c                 | ' ''---------- Set the (x,y) position of cursor
01d1c                 | ' 
01d1c                 | ' cursor_x:=x
01d1c     34 0E 06 F1 | 	add	objptr, #52
01d20     07 0B 48 FC | 	wrbyte	#5, objptr
01d24                 | ' cursor_y:=y
01d24     01 0E 06 F1 | 	add	objptr, #1
01d28     07 3B 48 FC | 	wrbyte	#29, objptr
01d2c     02 00 00 FF 
01d30     B6 0F 06 F1 | 	add	objptr, ##1462
01d34     07 D5 C2 FA | 	rdbyte	local54, objptr
01d38     02 D4 66 F0 | 	shl	local54, #2
01d3c     01 00 00 FF 
01d40     65 0E 06 F1 | 	add	objptr, ##613
01d44     07 D5 02 F1 | 	add	local54, objptr
01d48     6A 5D 02 FB | 	rdlong	arg01, local54
01d4c     04 00 00 FF 
01d50     50 0E 86 F1 | 	sub	objptr, ##2128
01d54     EC 08 B0 FD | 	call	#_hng030rm_spin2_write
01d58     04 00 00 FF 
01d5c     D4 0E 06 F1 | 	add	objptr, ##2260
01d60     07 5D 02 FB | 	rdlong	arg01, objptr
01d64     04 00 00 FF 
01d68     D4 0E 86 F1 | 	sub	objptr, ##2260
01d6c     D4 08 B0 FD | 	call	#_hng030rm_spin2_write
01d70                 | ' 
01d70                 | ' ''---------- Set the (x,y) position of cursor
01d70                 | ' 
01d70                 | ' cursor_x:=x
01d70     34 0E 06 F1 | 	add	objptr, #52
01d74     07 03 48 FC | 	wrbyte	#1, objptr
01d78                 | ' cursor_y:=y
01d78     01 0E 06 F1 | 	add	objptr, #1
01d7c     07 3B 48 FC | 	wrbyte	#29, objptr
01d80     02 00 00 FF 
01d84     DE 0F 06 F1 | 	add	objptr, ##1502
01d88     07 5D 02 FB | 	rdlong	arg01, objptr
01d8c     10 0E 06 F1 | 	add	objptr, #16
01d90     07 D5 02 FB | 	rdlong	local54, objptr
01d94     03 00 00 FF 
01d98     23 0E 86 F1 | 	sub	objptr, ##1571
01d9c     6A 5D 02 F1 | 	add	arg01, local54
01da0     03 5E 06 F6 | 	mov	arg02, #3
01da4     18 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01da8     15 5D 02 F6 | 	mov	arg01, result1
01dac     94 08 B0 FD | 	call	#_hng030rm_spin2_write
01db0     1D 5E 06 F6 | 	mov	arg02, #29
01db4                 | ' 
01db4                 | ' ''---------- Set the (x,y) position of cursor
01db4                 | ' 
01db4                 | ' cursor_x:=x
01db4     34 0E 06 F1 | 	add	objptr, #52
01db8     07 41 48 FC | 	wrbyte	#32, objptr
01dbc                 | ' cursor_y:=y
01dbc     01 0E 06 F1 | 	add	objptr, #1
01dc0     07 3B 48 FC | 	wrbyte	#29, objptr
01dc4     02 00 00 FF 
01dc8     B7 0F 06 F1 | 	add	objptr, ##1463
01dcc     07 D5 C2 FA | 	rdbyte	local54, objptr
01dd0     02 D4 66 F0 | 	shl	local54, #2
01dd4     01 00 00 FF 
01dd8     64 0E 06 F1 | 	add	objptr, ##612
01ddc     07 D5 02 F1 | 	add	local54, objptr
01de0     6A 5D 02 FB | 	rdlong	arg01, local54
01de4     04 00 00 FF 
01de8     50 0E 86 F1 | 	sub	objptr, ##2128
01dec     54 08 B0 FD | 	call	#_hng030rm_spin2_write
01df0     04 00 00 FF 
01df4     D4 0E 06 F1 | 	add	objptr, ##2260
01df8     07 5D 02 FB | 	rdlong	arg01, objptr
01dfc     04 00 00 FF 
01e00     D4 0E 86 F1 | 	sub	objptr, ##2260
01e04     3C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e08                 | ' 
01e08                 | ' ''---------- Set the (x,y) position of cursor
01e08                 | ' 
01e08                 | ' cursor_x:=x
01e08     34 0E 06 F1 | 	add	objptr, #52
01e0c     07 39 48 FC | 	wrbyte	#28, objptr
01e10                 | ' cursor_y:=y
01e10     01 0E 06 F1 | 	add	objptr, #1
01e14     07 3B 48 FC | 	wrbyte	#29, objptr
01e18     02 00 00 FF 
01e1c     E2 0F 06 F1 | 	add	objptr, ##1506
01e20     07 5D 02 FB | 	rdlong	arg01, objptr
01e24     10 0E 06 F1 | 	add	objptr, #16
01e28     07 D5 02 FB | 	rdlong	local54, objptr
01e2c     03 00 00 FF 
01e30     27 0E 86 F1 | 	sub	objptr, ##1575
01e34     6A 5D 02 F1 | 	add	arg01, local54
01e38     03 5E 06 F6 | 	mov	arg02, #3
01e3c     80 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e40     15 5D 02 F6 | 	mov	arg01, result1
01e44     FC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e48     1D 5E 06 F6 | 	mov	arg02, #29
01e4c                 | ' 
01e4c                 | ' ''---------- Set the (x,y) position of cursor
01e4c                 | ' 
01e4c                 | ' cursor_x:=x
01e4c     34 0E 06 F1 | 	add	objptr, #52
01e50     07 79 48 FC | 	wrbyte	#60, objptr
01e54                 | ' cursor_y:=y
01e54     01 0E 06 F1 | 	add	objptr, #1
01e58     07 3B 48 FC | 	wrbyte	#29, objptr
01e5c     02 00 00 FF 
01e60     B8 0F 06 F1 | 	add	objptr, ##1464
01e64     07 D5 C2 FA | 	rdbyte	local54, objptr
01e68     02 D4 66 F0 | 	shl	local54, #2
01e6c     01 00 00 FF 
01e70     63 0E 06 F1 | 	add	objptr, ##611
01e74     07 D5 02 F1 | 	add	local54, objptr
01e78     6A 5D 02 FB | 	rdlong	arg01, local54
01e7c     04 00 00 FF 
01e80     50 0E 86 F1 | 	sub	objptr, ##2128
01e84     BC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e88     04 00 00 FF 
01e8c     D4 0E 06 F1 | 	add	objptr, ##2260
01e90     07 5D 02 FB | 	rdlong	arg01, objptr
01e94     04 00 00 FF 
01e98     D4 0E 86 F1 | 	sub	objptr, ##2260
01e9c     A4 07 B0 FD | 	call	#_hng030rm_spin2_write
01ea0                 | ' 
01ea0                 | ' ''---------- Set the (x,y) position of cursor
01ea0                 | ' 
01ea0                 | ' cursor_x:=x
01ea0     34 0E 06 F1 | 	add	objptr, #52
01ea4     07 71 48 FC | 	wrbyte	#56, objptr
01ea8                 | ' cursor_y:=y
01ea8     01 0E 06 F1 | 	add	objptr, #1
01eac     07 3B 48 FC | 	wrbyte	#29, objptr
01eb0     02 00 00 FF 
01eb4     E6 0F 06 F1 | 	add	objptr, ##1510
01eb8     07 5D 02 FB | 	rdlong	arg01, objptr
01ebc     10 0E 06 F1 | 	add	objptr, #16
01ec0     07 D5 02 FB | 	rdlong	local54, objptr
01ec4     03 00 00 FF 
01ec8     2B 0E 86 F1 | 	sub	objptr, ##1579
01ecc     6A 5D 02 F1 | 	add	arg01, local54
01ed0     03 5E 06 F6 | 	mov	arg02, #3
01ed4     E8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ed8     15 5D 02 F6 | 	mov	arg01, result1
01edc     64 07 B0 FD | 	call	#_hng030rm_spin2_write
01ee0                 | ' 
01ee0                 | ' ''---------- Set the (x,y) position of cursor
01ee0                 | ' 
01ee0                 | ' cursor_x:=x
01ee0     34 0E 06 F1 | 	add	objptr, #52
01ee4     07 A9 48 FC | 	wrbyte	#84, objptr
01ee8                 | ' cursor_y:=y
01ee8     01 0E 06 F1 | 	add	objptr, #1
01eec     07 3B 48 FC | 	wrbyte	#29, objptr
01ef0     02 00 00 FF 
01ef4     EA 0F 06 F1 | 	add	objptr, ##1514
01ef8     07 5D 02 FB | 	rdlong	arg01, objptr
01efc     10 0E 06 F1 | 	add	objptr, #16
01f00     07 D5 02 FB | 	rdlong	local54, objptr
01f04     03 00 00 FF 
01f08     2F 0E 86 F1 | 	sub	objptr, ##1583
01f0c     6A 5D 02 F1 | 	add	arg01, local54
01f10     03 5E 06 F6 | 	mov	arg02, #3
01f14     A8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01f18     15 5D 02 F6 | 	mov	arg01, result1
01f1c     24 07 B0 FD | 	call	#_hng030rm_spin2_write
01f20     1D 5E 06 F6 | 	mov	arg02, #29
01f24                 | ' 
01f24                 | ' ''---------- Set the (x,y) position of cursor
01f24                 | ' 
01f24                 | ' cursor_x:=x
01f24     34 0E 06 F1 | 	add	objptr, #52
01f28     07 B1 48 FC | 	wrbyte	#88, objptr
01f2c                 | ' cursor_y:=y
01f2c     01 0E 06 F1 | 	add	objptr, #1
01f30     07 3B 48 FC | 	wrbyte	#29, objptr
01f34     02 00 00 FF 
01f38     B9 0F 06 F1 | 	add	objptr, ##1465
01f3c     07 D5 C2 FA | 	rdbyte	local54, objptr
01f40     02 D4 66 F0 | 	shl	local54, #2
01f44     01 00 00 FF 
01f48     62 0E 06 F1 | 	add	objptr, ##610
01f4c     07 D5 02 F1 | 	add	local54, objptr
01f50     6A 5D 02 FB | 	rdlong	arg01, local54
01f54     04 00 00 FF 
01f58     50 0E 86 F1 | 	sub	objptr, ##2128
01f5c     E4 06 B0 FD | 	call	#_hng030rm_spin2_write
01f60     04 00 00 FF 
01f64     D4 0E 06 F1 | 	add	objptr, ##2260
01f68     07 5D 02 FB | 	rdlong	arg01, objptr
01f6c     04 00 00 FF 
01f70     D4 0E 86 F1 | 	sub	objptr, ##2260
01f74     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01f78     F4 F8 9F FD | 	jmp	#LR__0016
01f7c     AF F0 03 F6 | 	mov	ptra, fp
01f80     BF 00 A0 FD | 	call	#popregs_
01f84                 | _program_ret
01f84     2D 00 64 FD | 	ret
01f88                 | 
01f88                 | ' 
01f88                 | ' 
01f88                 | ' ''---------- putpixel - put a pixel on the screen
01f88                 | ' 
01f88                 | ' pub putpixel1(x,y,c) |byte b
01f88                 | _hng030rm_spin2_putpixel1
01f88                 | ' 
01f88                 | ' 
01f88                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f88     00 30 06 F6 | 	mov	_var01, #0
01f8c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
01f90     01 30 66 36 |  if_ae	neg	_var01, #1
01f94     00 32 06 F6 | 	mov	_var02, #0
01f98     90 0E 06 F1 | 	add	objptr, #144
01f9c     07 35 02 FB | 	rdlong	_var03, objptr
01fa0     05 34 66 F0 | 	shl	_var03, #5
01fa4     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
01fa8     01 32 66 C6 |  if_b	neg	_var02, #1
01fac     19 31 02 F5 | 	and	_var01, _var02
01fb0     00 36 06 F6 | 	mov	_var04, #0
01fb4     00 5E 5E F2 | 	cmps	arg02, #0 wcz
01fb8     01 36 66 36 |  if_ae	neg	_var04, #1
01fbc     1B 31 02 F5 | 	and	_var01, _var04
01fc0     00 38 06 F6 | 	mov	_var05, #0
01fc4     04 0E 06 F1 | 	add	objptr, #4
01fc8     07 3B 02 FB | 	rdlong	_var06, objptr
01fcc     94 0E 86 F1 | 	sub	objptr, #148
01fd0     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
01fd4     01 38 66 C6 |  if_b	neg	_var05, #1
01fd8     1C 31 CA F7 | 	test	_var01, _var05 wz
01fdc     8C 00 90 AD |  if_e	jmp	#LR__0028
01fe0     90 0E 06 F1 | 	add	objptr, #144
01fe4     07 3D 02 FB | 	rdlong	_var07, objptr
01fe8     90 0E 86 F1 | 	sub	objptr, #144
01fec     02 3C 66 F0 | 	shl	_var07, #2
01ff0     2F 3D 02 FD | 	qmul	_var07, arg02
01ff4     18 3E 62 FD | 	getqx	_var08
01ff8     07 41 02 FB | 	rdlong	_var09, objptr
01ffc     1F 41 02 F1 | 	add	_var09, _var08
02000     2E 43 02 F6 | 	mov	_var10, arg01
02004     03 42 46 F0 | 	shr	_var10, #3
02008     21 41 02 F1 | 	add	_var09, _var10
0200c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
0200c     20 45 C2 FA | 	rdbyte	_var11, _var09
02010                 | '     if (c==0)
02010     00 60 0E F2 | 	cmp	arg03, #0 wz
02014     18 00 90 5D |  if_ne	jmp	#LR__0026
02018     2E 31 52 F6 | 	abs	_var01, arg01 wc
0201c     07 30 06 F5 | 	and	_var01, #7
02020     18 31 62 C6 |  if_b	neg	_var01, _var01
02024     18 47 C2 F9 | 	decod	_var12, _var01
02028                 | '       b:=b & !(1<<(x//8))
02028     23 45 22 F5 | 	andn	_var11, _var12
0202c                 | '     else
0202c     14 00 90 FD | 	jmp	#LR__0027
02030                 | LR__0026
02030     2E 31 52 F6 | 	abs	_var01, arg01 wc
02034     07 30 06 F5 | 	and	_var01, #7
02038     18 31 62 C6 |  if_b	neg	_var01, _var01
0203c     18 49 C2 F9 | 	decod	_var13, _var01
02040                 | '       b:=b |(1<<(x//8))
02040     24 45 42 F5 | 	or	_var11, _var13
02044                 | LR__0027
02044     90 0E 06 F1 | 	add	objptr, #144
02048     07 4B 02 FB | 	rdlong	_var14, objptr
0204c     90 0E 86 F1 | 	sub	objptr, #144
02050     02 4A 66 F0 | 	shl	_var14, #2
02054     2F 4B 02 FD | 	qmul	_var14, arg02
02058     18 4C 62 FD | 	getqx	_var15
0205c     07 4F 02 FB | 	rdlong	_var16, objptr
02060     26 4F 02 F1 | 	add	_var16, _var15
02064     21 4F 02 F1 | 	add	_var16, _var10
02068                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02068     27 45 42 FC | 	wrbyte	_var11, _var16
0206c                 | LR__0028
0206c                 | _hng030rm_spin2_putpixel1_ret
0206c     2D 00 64 FD | 	ret
02070                 | 
02070                 | ' 
02070                 | ' 
02070                 | ' pub putpixel2(x,y,c) |byte b
02070                 | _hng030rm_spin2_putpixel2
02070                 | ' 
02070                 | ' 
02070                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02070     00 30 06 F6 | 	mov	_var01, #0
02074     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02078     01 30 66 36 |  if_ae	neg	_var01, #1
0207c     00 32 06 F6 | 	mov	_var02, #0
02080     90 0E 06 F1 | 	add	objptr, #144
02084     07 35 02 FB | 	rdlong	_var03, objptr
02088     04 34 66 F0 | 	shl	_var03, #4
0208c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02090     01 32 66 C6 |  if_b	neg	_var02, #1
02094     19 31 02 F5 | 	and	_var01, _var02
02098     00 36 06 F6 | 	mov	_var04, #0
0209c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
020a0     01 36 66 36 |  if_ae	neg	_var04, #1
020a4     1B 31 02 F5 | 	and	_var01, _var04
020a8     00 38 06 F6 | 	mov	_var05, #0
020ac     04 0E 06 F1 | 	add	objptr, #4
020b0     07 3B 02 FB | 	rdlong	_var06, objptr
020b4     94 0E 86 F1 | 	sub	objptr, #148
020b8     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
020bc     01 38 66 C6 |  if_b	neg	_var05, #1
020c0     1C 31 CA F7 | 	test	_var01, _var05 wz
020c4     7C 00 90 AD |  if_e	jmp	#LR__0029
020c8     90 0E 06 F1 | 	add	objptr, #144
020cc     07 3D 02 FB | 	rdlong	_var07, objptr
020d0     90 0E 86 F1 | 	sub	objptr, #144
020d4     02 3C 66 F0 | 	shl	_var07, #2
020d8     2F 3D 02 FD | 	qmul	_var07, arg02
020dc     18 3E 62 FD | 	getqx	_var08
020e0     07 41 02 FB | 	rdlong	_var09, objptr
020e4     1F 41 02 F1 | 	add	_var09, _var08
020e8     2E 43 02 F6 | 	mov	_var10, arg01
020ec     02 42 46 F0 | 	shr	_var10, #2
020f0     21 41 02 F1 | 	add	_var09, _var10
020f4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
020f4     20 45 C2 FA | 	rdbyte	_var11, _var09
020f8     2E 31 52 F6 | 	abs	_var01, arg01 wc
020fc     03 30 06 F5 | 	and	_var01, #3
02100     18 31 62 C6 |  if_b	neg	_var01, _var01
02104     01 30 66 F0 | 	shl	_var01, #1
02108     03 46 06 F6 | 	mov	_var12, #3
0210c     18 47 62 F0 | 	shl	_var12, _var01
02110                 | '     b:=b & !(%11<<((x//4)<<1))
02110     23 45 22 F5 | 	andn	_var11, _var12
02114     18 61 62 F0 | 	shl	arg03, _var01
02118                 | '     b:=b |(c<<((x//4)<<1))
02118     30 45 42 F5 | 	or	_var11, arg03
0211c     90 0E 06 F1 | 	add	objptr, #144
02120     07 49 02 FB | 	rdlong	_var13, objptr
02124     90 0E 86 F1 | 	sub	objptr, #144
02128     02 48 66 F0 | 	shl	_var13, #2
0212c     2F 49 02 FD | 	qmul	_var13, arg02
02130     18 4A 62 FD | 	getqx	_var14
02134     07 4D 02 FB | 	rdlong	_var15, objptr
02138     25 4D 02 F1 | 	add	_var15, _var14
0213c     21 4D 02 F1 | 	add	_var15, _var10
02140                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02140     26 45 42 FC | 	wrbyte	_var11, _var15
02144                 | LR__0029
02144                 | _hng030rm_spin2_putpixel2_ret
02144     2D 00 64 FD | 	ret
02148                 | 
02148                 | ' 
02148                 | ' 
02148                 | ' pub putpixel4(x,y,c) |byte b
02148                 | _hng030rm_spin2_putpixel4
02148                 | ' 
02148                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02148     00 30 06 F6 | 	mov	_var01, #0
0214c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02150     01 30 66 36 |  if_ae	neg	_var01, #1
02154     00 32 06 F6 | 	mov	_var02, #0
02158     90 0E 06 F1 | 	add	objptr, #144
0215c     07 35 02 FB | 	rdlong	_var03, objptr
02160     04 34 66 F0 | 	shl	_var03, #4
02164     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02168     01 32 66 C6 |  if_b	neg	_var02, #1
0216c     19 31 02 F5 | 	and	_var01, _var02
02170     00 36 06 F6 | 	mov	_var04, #0
02174     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02178     01 36 66 36 |  if_ae	neg	_var04, #1
0217c     1B 31 02 F5 | 	and	_var01, _var04
02180     00 38 06 F6 | 	mov	_var05, #0
02184     04 0E 06 F1 | 	add	objptr, #4
02188     07 3B 02 FB | 	rdlong	_var06, objptr
0218c     94 0E 86 F1 | 	sub	objptr, #148
02190     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02194     01 38 66 C6 |  if_b	neg	_var05, #1
02198     1C 31 CA F7 | 	test	_var01, _var05 wz
0219c     7C 00 90 AD |  if_e	jmp	#LR__0030
021a0     90 0E 06 F1 | 	add	objptr, #144
021a4     07 3D 02 FB | 	rdlong	_var07, objptr
021a8     90 0E 86 F1 | 	sub	objptr, #144
021ac     02 3C 66 F0 | 	shl	_var07, #2
021b0     2F 3D 02 FD | 	qmul	_var07, arg02
021b4     18 3E 62 FD | 	getqx	_var08
021b8     07 41 02 FB | 	rdlong	_var09, objptr
021bc     1F 41 02 F1 | 	add	_var09, _var08
021c0     2E 43 02 F6 | 	mov	_var10, arg01
021c4     01 42 46 F0 | 	shr	_var10, #1
021c8     21 41 02 F1 | 	add	_var09, _var10
021cc                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
021cc     20 45 C2 FA | 	rdbyte	_var11, _var09
021d0     2E 31 52 F6 | 	abs	_var01, arg01 wc
021d4     01 30 06 F5 | 	and	_var01, #1
021d8     18 31 62 C6 |  if_b	neg	_var01, _var01
021dc     02 30 66 F0 | 	shl	_var01, #2
021e0     0F 46 06 F6 | 	mov	_var12, #15
021e4     18 47 62 F0 | 	shl	_var12, _var01
021e8                 | '     b:=b & !(%1111<<((x//2)<<2))
021e8     23 45 22 F5 | 	andn	_var11, _var12
021ec     18 61 62 F0 | 	shl	arg03, _var01
021f0                 | '     b:=b |(c<<((x//2)<<2))
021f0     30 45 42 F5 | 	or	_var11, arg03
021f4     90 0E 06 F1 | 	add	objptr, #144
021f8     07 49 02 FB | 	rdlong	_var13, objptr
021fc     90 0E 86 F1 | 	sub	objptr, #144
02200     02 48 66 F0 | 	shl	_var13, #2
02204     2F 49 02 FD | 	qmul	_var13, arg02
02208     18 4A 62 FD | 	getqx	_var14
0220c     07 4D 02 FB | 	rdlong	_var15, objptr
02210     25 4D 02 F1 | 	add	_var15, _var14
02214     21 4D 02 F1 | 	add	_var15, _var10
02218                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02218     26 45 42 FC | 	wrbyte	_var11, _var15
0221c                 | LR__0030
0221c                 | _hng030rm_spin2_putpixel4_ret
0221c     2D 00 64 FD | 	ret
02220                 | 
02220                 | ' 
02220                 | ' 
02220                 | ' pub putpixel8(x,y,c)
02220                 | _hng030rm_spin2_putpixel8
02220                 | ' 
02220                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02220     00 30 06 F6 | 	mov	_var01, #0
02224     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02228     01 30 66 36 |  if_ae	neg	_var01, #1
0222c     00 32 06 F6 | 	mov	_var02, #0
02230     90 0E 06 F1 | 	add	objptr, #144
02234     07 35 02 FB | 	rdlong	_var03, objptr
02238     02 34 66 F0 | 	shl	_var03, #2
0223c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02240     01 32 66 C6 |  if_b	neg	_var02, #1
02244     19 31 02 F5 | 	and	_var01, _var02
02248     00 36 06 F6 | 	mov	_var04, #0
0224c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02250     01 36 66 36 |  if_ae	neg	_var04, #1
02254     1B 31 02 F5 | 	and	_var01, _var04
02258     00 38 06 F6 | 	mov	_var05, #0
0225c     04 0E 06 F1 | 	add	objptr, #4
02260     07 3B 02 FB | 	rdlong	_var06, objptr
02264     94 0E 86 F1 | 	sub	objptr, #148
02268     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
0226c     01 38 66 C6 |  if_b	neg	_var05, #1
02270     1C 31 CA F7 | 	test	_var01, _var05 wz
02274     28 00 90 AD |  if_e	jmp	#LR__0031
02278     90 0E 06 F1 | 	add	objptr, #144
0227c     07 3D 02 FB | 	rdlong	_var07, objptr
02280     90 0E 86 F1 | 	sub	objptr, #144
02284     02 3C 66 F0 | 	shl	_var07, #2
02288     2F 3D 02 FD | 	qmul	_var07, arg02
0228c     18 3E 62 FD | 	getqx	_var08
02290     07 41 02 FB | 	rdlong	_var09, objptr
02294     1F 41 02 F1 | 	add	_var09, _var08
02298     2E 41 02 F1 | 	add	_var09, arg01
0229c                 | '     byte[buf_ptr+4*cpl*y+x]:=c
0229c     20 61 42 FC | 	wrbyte	arg03, _var09
022a0                 | LR__0031
022a0                 | _hng030rm_spin2_putpixel8_ret
022a0     2D 00 64 FD | 	ret
022a4                 | 
022a4                 | ' 
022a4                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
022a4                 | ' 
022a4                 | ' pub setbordercolor(r,g,b) | color
022a4                 | _hng030rm_spin2_setbordercolor
022a4     18 5C 66 F0 | 	shl	arg01, #24
022a8     10 5E 66 F0 | 	shl	arg02, #16
022ac     2F 5D 02 F1 | 	add	arg01, arg02
022b0     08 60 66 F0 | 	shl	arg03, #8
022b4     30 5D 02 F1 | 	add	arg01, arg03
022b8                 | ' 
022b8                 | ' color:=r<<24+g<<16+b<<8
022b8                 | ' bordercolor:=color
022b8     2C 0E 06 F1 | 	add	objptr, #44
022bc     07 5D 62 FC | 	wrlong	arg01, objptr
022c0     2C 0E 86 F1 | 	sub	objptr, #44
022c4                 | _hng030rm_spin2_setbordercolor_ret
022c4     2D 00 64 FD | 	ret
022c8                 | 
022c8                 | ' 
022c8                 | ' 
022c8                 | ' '*************************************************************************
022c8                 | ' '                                                                        *
022c8                 | ' '  Text functions                                                        *
022c8                 | ' '                                                                        *
022c8                 | ' '*************************************************************************
022c8                 | ' 
022c8                 | ' ''---------- Clear the screen, set its foreground/background color
022c8                 | ' 
022c8                 | ' pub cls(fc,bc)   :c
022c8                 | _hng030rm_spin2_cls
022c8     07 5A 05 F6 | 	mov	COUNT_, #7
022cc     B0 00 A0 FD | 	call	#pushregs_
022d0     2E 6B 02 F6 | 	mov	local01, arg01
022d4     2F 6D 02 F6 | 	mov	local02, arg02
022d8                 | ' 
022d8                 | ' if (graphmode<512)
022d8     C4 0E 06 F1 | 	add	objptr, #196
022dc     07 6F 02 FB | 	rdlong	local03, objptr
022e0     C4 0E 86 F1 | 	sub	objptr, #196
022e4     01 00 00 FF 
022e8     00 6E 5E F2 | 	cmps	local03, ##512 wcz
022ec     34 00 90 3D |  if_ae	jmp	#LR__0032
022f0     35 71 02 F6 | 	mov	local04, local01
022f4     18 70 66 F0 | 	shl	local04, #24
022f8     36 73 02 F6 | 	mov	local05, local02
022fc     10 72 66 F0 | 	shl	local05, #16
02300     39 71 02 F1 | 	add	local04, local05
02304     20 70 06 F1 | 	add	local04, #32
02308                 | '   c:=fc<<24+bc<<16+$20
02308                 | '   longfill(buf_ptr,c,buflen)
02308     07 5D 02 FB | 	rdlong	arg01, objptr
0230c     30 0E 06 F1 | 	add	objptr, #48
02310     07 61 02 FB | 	rdlong	arg03, objptr
02314     30 0E 86 F1 | 	sub	objptr, #48
02318     38 5F 02 F6 | 	mov	arg02, local04
0231c     A8 00 A0 FD | 	call	#\builtin_longfill_
02320                 | ' else
02320     AC 00 90 FD | 	jmp	#LR__0038
02324                 | LR__0032
02324                 | '   if (graphmode & 48) ==48
02324     C4 0E 06 F1 | 	add	objptr, #196
02328     07 6F 02 FB | 	rdlong	local03, objptr
0232c     C4 0E 86 F1 | 	sub	objptr, #196
02330     30 6E 06 F5 | 	and	local03, #48
02334     30 6E 0E F2 | 	cmp	local03, #48 wz
02338                 | '     c:=bc
02338     36 71 02 A6 |  if_e	mov	local04, local02
0233c     74 00 90 AD |  if_e	jmp	#LR__0037
02340                 | '   elseif (graphmode & 48) ==32
02340     C4 0E 06 F1 | 	add	objptr, #196
02344     07 6F 02 FB | 	rdlong	local03, objptr
02348     C4 0E 86 F1 | 	sub	objptr, #196
0234c     30 6E 06 F5 | 	and	local03, #48
02350     20 6E 0E F2 | 	cmp	local03, #32 wz
02354     10 00 90 5D |  if_ne	jmp	#LR__0033
02358     36 71 02 F6 | 	mov	local04, local02
0235c     04 70 66 F0 | 	shl	local04, #4
02360     36 71 02 F1 | 	add	local04, local02
02364                 | '     c:=bc<<4+bc
02364     4C 00 90 FD | 	jmp	#LR__0036
02368                 | LR__0033
02368                 | '   elseif (graphmode & 48) ==16
02368     C4 0E 06 F1 | 	add	objptr, #196
0236c     07 6F 02 FB | 	rdlong	local03, objptr
02370     C4 0E 86 F1 | 	sub	objptr, #196
02374     30 6E 06 F5 | 	and	local03, #48
02378     10 6E 0E F2 | 	cmp	local03, #16 wz
0237c     28 00 90 5D |  if_ne	jmp	#LR__0034
02380     36 71 02 F6 | 	mov	local04, local02
02384     06 70 66 F0 | 	shl	local04, #6
02388     36 75 02 F6 | 	mov	local06, local02
0238c     04 74 66 F0 | 	shl	local06, #4
02390     3A 71 02 F1 | 	add	local04, local06
02394     36 77 02 F6 | 	mov	local07, local02
02398     02 76 66 F0 | 	shl	local07, #2
0239c     3B 71 02 F1 | 	add	local04, local07
023a0     36 71 02 F1 | 	add	local04, local02
023a4                 | '     c:=bc<<6+bc<<4+bc<<2+bc
023a4                 | '   else
023a4     0C 00 90 FD | 	jmp	#LR__0035
023a8                 | LR__0034
023a8                 | '     if bc==1
023a8     01 6C 0E F2 | 	cmp	local02, #1 wz
023ac                 | '       c:=255
023ac     FF 70 06 A6 |  if_e	mov	local04, #255
023b0                 | '     else
023b0                 | '       c:=0
023b0     00 70 06 56 |  if_ne	mov	local04, #0
023b4                 | LR__0035
023b4                 | LR__0036
023b4                 | LR__0037
023b4     30 0E 06 F1 | 	add	objptr, #48
023b8     07 61 02 FB | 	rdlong	arg03, objptr
023bc     30 0E 86 F1 | 	sub	objptr, #48
023c0     02 60 66 F0 | 	shl	arg03, #2
023c4                 | '   bytefill(buf_ptr,c,buflen*4)
023c4     07 5D 02 FB | 	rdlong	arg01, objptr
023c8     38 5F 02 F6 | 	mov	arg02, local04
023cc     A0 00 A0 FD | 	call	#\builtin_bytefill_
023d0                 | LR__0038
023d0                 | ' setwritecolors(fc,bc)
023d0                 | ' 
023d0                 | ' 
023d0                 | ' write_color:=ff
023d0     38 0E 06 F1 | 	add	objptr, #56
023d4     07 6B 62 FC | 	wrlong	local01, objptr
023d8                 | ' write_background:=bb
023d8     04 0E 06 F1 | 	add	objptr, #4
023dc     07 6D 62 FC | 	wrlong	local02, objptr
023e0                 | ' cursor_x:=0
023e0     08 0E 86 F1 | 	sub	objptr, #8
023e4     07 01 48 FC | 	wrbyte	#0, objptr
023e8                 | ' cursor_y:=0
023e8     01 0E 06 F1 | 	add	objptr, #1
023ec     07 01 48 FC | 	wrbyte	#0, objptr
023f0     35 0E 86 F1 | 	sub	objptr, #53
023f4     38 2B 02 F6 | 	mov	result1, local04
023f8     AF F0 03 F6 | 	mov	ptra, fp
023fc     BF 00 A0 FD | 	call	#popregs_
02400                 | _hng030rm_spin2_cls_ret
02400     2D 00 64 FD | 	ret
02404                 | 
02404                 | ' 
02404                 | ' ''--------- Output a string at position x,y without changing colors
02404                 | ' 
02404                 | ' pub outtextxy(x,y,text) | iii
02404                 | _hng030rm_spin2_outtextxy
02404     0B 5A 05 F6 | 	mov	COUNT_, #11
02408     B0 00 A0 FD | 	call	#pushregs_
0240c     2E 6B 02 F6 | 	mov	local01, arg01
02410                 | ' 
02410                 | ' repeat iii from 0 to strsize(text)-1
02410     00 6C 06 F6 | 	mov	local02, #0
02414     30 5D 02 F6 | 	mov	arg01, arg03
02418     00 6E 06 F6 | 	mov	local03, #0
0241c     F0 DB 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
02420     93 00 A0 FD | 	call	#FCACHE_LOAD_
02424                 | LR__0039
02424     2E 71 CA FA | 	rdbyte	local04, arg01 wz
02428     01 6E 06 51 |  if_ne	add	local03, #1
0242c     01 5C 06 51 |  if_ne	add	arg01, #1
02430     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
02434                 | LR__0040
02434     37 2B 02 F6 | 	mov	result1, local03
02438     15 73 02 F6 | 	mov	local05, result1
0243c     01 72 86 F1 | 	sub	local05, #1
02440     00 72 5E F2 | 	cmps	local05, #0 wcz
02444     01 74 06 16 |  if_a	mov	local06, #1
02448     01 74 66 E6 |  if_be	neg	local06, #1
0244c     3A 73 02 F1 | 	add	local05, local06
02450     FC DB 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
02454     93 00 A0 FD | 	call	#FCACHE_LOAD_
02458                 | LR__0041
02458     90 0E 06 F1 | 	add	objptr, #144
0245c     07 77 02 FB | 	rdlong	local07, objptr
02460     90 0E 86 F1 | 	sub	objptr, #144
02464     2F 77 02 FD | 	qmul	local07, arg02
02468     18 78 62 FD | 	getqx	local08
0246c     35 79 02 F1 | 	add	local08, local01
02470     36 79 02 F1 | 	add	local08, local02
02474     02 78 66 F0 | 	shl	local08, #2
02478     07 7B 02 FB | 	rdlong	local09, objptr
0247c     3C 7B 02 F1 | 	add	local09, local08
02480     3D 7D 02 FB | 	rdlong	local10, local09
02484     FF 7C 26 F5 | 	andn	local10, #255
02488     30 7F 02 F6 | 	mov	local11, arg03
0248c     36 7F 02 F1 | 	add	local11, local02
02490     3F 77 C2 FA | 	rdbyte	local07, local11
02494     3B 7D 42 F5 | 	or	local10, local07
02498                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02498     3D 7D 62 FC | 	wrlong	local10, local09
0249c     3A 6D 02 F1 | 	add	local02, local06
024a0     39 6D 0A F2 | 	cmp	local02, local05 wz
024a4     B0 FF 9F 5D |  if_ne	jmp	#LR__0041
024a8                 | LR__0042
024a8     AF F0 03 F6 | 	mov	ptra, fp
024ac     BF 00 A0 FD | 	call	#popregs_
024b0                 | _hng030rm_spin2_outtextxy_ret
024b0     2D 00 64 FD | 	ret
024b4                 | 
024b4                 | ' 
024b4                 | ' ''---------- Output a char at the cursor position, move the cursor
024b4                 | ' 
024b4                 | ' pub putchar(achar) | c,x,y
024b4                 | _hng030rm_spin2_putchar
024b4     12 5A 05 F6 | 	mov	COUNT_, #18
024b8     B0 00 A0 FD | 	call	#pushregs_
024bc     2E 6B 02 F6 | 	mov	local01, arg01
024c0                 | ' 
024c0                 | ' if achar==10
024c0     0A 6A 0E F2 | 	cmp	local01, #10 wz
024c4     58 00 90 5D |  if_ne	jmp	#LR__0043
024c8                 | '   crlf()
024c8                 | ' 
024c8                 | ' cursor_x:=0
024c8     34 0E 06 F1 | 	add	objptr, #52
024cc     07 01 48 FC | 	wrbyte	#0, objptr
024d0                 | ' cursor_y+=1
024d0     01 0E 06 F1 | 	add	objptr, #1
024d4     07 6D C2 FA | 	rdbyte	local02, objptr
024d8     01 6C 06 F1 | 	add	local02, #1
024dc     07 6D 42 FC | 	wrbyte	local02, objptr
024e0                 | ' if cursor_y>lines-1
024e0     5F 0E 06 F1 | 	add	objptr, #95
024e4     07 6D 02 FB | 	rdlong	local02, objptr
024e8     01 6C 86 F1 | 	sub	local02, #1
024ec     5F 0E 86 F1 | 	sub	objptr, #95
024f0     07 6F C2 FA | 	rdbyte	local03, objptr
024f4     35 0E 86 F1 | 	sub	objptr, #53
024f8     36 6F 5A F2 | 	cmps	local03, local02 wcz
024fc     38 01 90 ED |  if_be	jmp	#LR__0046
02500                 | '   scrollup()
02500     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02504     94 0E 06 F1 | 	add	objptr, #148
02508     07 71 02 FB | 	rdlong	local04, objptr
0250c     01 70 86 F1 | 	sub	local04, #1
02510                 | '   cursor_y:=lines-1
02510     5F 0E 86 F1 | 	sub	objptr, #95
02514     07 71 42 FC | 	wrbyte	local04, objptr
02518     35 0E 86 F1 | 	sub	objptr, #53
0251c                 | ' else  
0251c     18 01 90 FD | 	jmp	#LR__0046
02520                 | LR__0043
02520                 | '   x:=cursor_x
02520     34 0E 06 F1 | 	add	objptr, #52
02524     07 73 C2 FA | 	rdbyte	local05, objptr
02528                 | '   y:=cursor_y
02528     01 0E 06 F1 | 	add	objptr, #1
0252c     07 75 C2 FA | 	rdbyte	local06, objptr
02530     03 0E 06 F1 | 	add	objptr, #3
02534     07 77 02 FB | 	rdlong	local07, objptr
02538     18 76 66 F0 | 	shl	local07, #24
0253c     04 0E 06 F1 | 	add	objptr, #4
02540     07 79 02 FB | 	rdlong	local08, objptr
02544     10 78 66 F0 | 	shl	local08, #16
02548     3C 77 02 F1 | 	add	local07, local08
0254c                 | '   c:=write_color<<24+write_background<<16
0254c     54 0E 06 F1 | 	add	objptr, #84
02550     07 7B 02 FB | 	rdlong	local09, objptr
02554     90 0E 86 F1 | 	sub	objptr, #144
02558     3A 7B 02 FD | 	qmul	local09, local06
0255c     18 7C 62 FD | 	getqx	local10
02560     39 7D 02 F1 | 	add	local10, local05
02564     02 7C 66 F0 | 	shl	local10, #2
02568     07 7F 02 FB | 	rdlong	local11, objptr
0256c     3E 7F 02 F1 | 	add	local11, local10
02570     3F 81 02 FB | 	rdlong	local12, local11
02574     7F 00 00 FF 
02578     FF 81 06 F5 | 	and	local12, ##65535
0257c     3B 81 42 F5 | 	or	local12, local07
02580                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02580     3F 81 62 FC | 	wrlong	local12, local11
02584     90 0E 06 F1 | 	add	objptr, #144
02588     07 7B 02 FB | 	rdlong	local09, objptr
0258c     90 0E 86 F1 | 	sub	objptr, #144
02590     3A 7B 02 FD | 	qmul	local09, local06
02594     18 82 62 FD | 	getqx	local13
02598     39 83 02 F1 | 	add	local13, local05
0259c     02 82 66 F0 | 	shl	local13, #2
025a0     07 85 02 FB | 	rdlong	local14, objptr
025a4     41 85 02 F1 | 	add	local14, local13
025a8     42 87 02 FB | 	rdlong	local15, local14
025ac     FF 86 26 F5 | 	andn	local15, #255
025b0     FF 6A 06 F5 | 	and	local01, #255
025b4     35 87 42 F5 | 	or	local15, local01
025b8                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
025b8     42 87 62 FC | 	wrlong	local15, local14
025bc                 | '   cursor_x+=1
025bc     34 0E 06 F1 | 	add	objptr, #52
025c0     07 89 C2 FA | 	rdbyte	local16, objptr
025c4     01 88 06 F1 | 	add	local16, #1
025c8     07 89 42 FC | 	wrbyte	local16, objptr
025cc                 | '   if cursor_x==cpl
025cc     07 89 C2 FA | 	rdbyte	local16, objptr
025d0     5C 0E 06 F1 | 	add	objptr, #92
025d4     07 8B 02 FB | 	rdlong	local17, objptr
025d8     90 0E 86 F1 | 	sub	objptr, #144
025dc     45 89 0A F2 | 	cmp	local16, local17 wz
025e0     54 00 90 5D |  if_ne	jmp	#LR__0045
025e4                 | '     cursor_x:=0
025e4     34 0E 06 F1 | 	add	objptr, #52
025e8     07 01 48 FC | 	wrbyte	#0, objptr
025ec                 | '     cursor_y+=1
025ec     01 0E 06 F1 | 	add	objptr, #1
025f0     07 89 C2 FA | 	rdbyte	local16, objptr
025f4     01 88 06 F1 | 	add	local16, #1
025f8     07 89 42 FC | 	wrbyte	local16, objptr
025fc                 | '     if cursor_y>lines-1
025fc     5F 0E 06 F1 | 	add	objptr, #95
02600     07 89 02 FB | 	rdlong	local16, objptr
02604     01 88 86 F1 | 	sub	local16, #1
02608     5F 0E 86 F1 | 	sub	objptr, #95
0260c     07 8B C2 FA | 	rdbyte	local17, objptr
02610     35 0E 86 F1 | 	sub	objptr, #53
02614     44 8B 5A F2 | 	cmps	local17, local16 wcz
02618     1C 00 90 ED |  if_be	jmp	#LR__0044
0261c                 | '       scrollup()
0261c     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02620     94 0E 06 F1 | 	add	objptr, #148
02624     07 8D 02 FB | 	rdlong	local18, objptr
02628     01 8C 86 F1 | 	sub	local18, #1
0262c                 | '       cursor_y:=lines-1
0262c     5F 0E 86 F1 | 	sub	objptr, #95
02630     07 8D 42 FC | 	wrbyte	local18, objptr
02634     35 0E 86 F1 | 	sub	objptr, #53
02638                 | LR__0044
02638                 | LR__0045
02638                 | LR__0046
02638     AF F0 03 F6 | 	mov	ptra, fp
0263c     BF 00 A0 FD | 	call	#popregs_
02640                 | _hng030rm_spin2_putchar_ret
02640     2D 00 64 FD | 	ret
02644                 | 
02644                 | ' 
02644                 | ' ''--------- Output a string at the cursor position, move the cursor
02644                 | ' 
02644                 | ' pub write(text) | iii,c,ncx,ncy
02644                 | _hng030rm_spin2_write
02644     11 5A 05 F6 | 	mov	COUNT_, #17
02648     B0 00 A0 FD | 	call	#pushregs_
0264c     2E 6B 02 F6 | 	mov	local01, arg01
02650     38 0E 06 F1 | 	add	objptr, #56
02654     07 6D 02 FB | 	rdlong	local02, objptr
02658     18 6C 66 F0 | 	shl	local02, #24
0265c     04 0E 06 F1 | 	add	objptr, #4
02660     07 6F 02 FB | 	rdlong	local03, objptr
02664     10 6E 66 F0 | 	shl	local03, #16
02668     37 6D 02 F1 | 	add	local02, local03
0266c                 | ' 
0266c                 | ' c:=write_color<<24+write_background<<16
0266c                 | ' 'debug(uhex_long(write_color))
0266c                 | ' ncy:=cursor_y
0266c     07 0E 86 F1 | 	sub	objptr, #7
02670     07 71 C2 FA | 	rdbyte	local04, objptr
02674                 | ' ncx:=cursor_x+strsize(text)
02674     01 0E 86 F1 | 	sub	objptr, #1
02678     07 73 C2 FA | 	rdbyte	local05, objptr
0267c     34 0E 86 F1 | 	sub	objptr, #52
02680     35 5D 02 F6 | 	mov	arg01, local01
02684     00 74 06 F6 | 	mov	local06, #0
02688     84 D9 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
0268c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02690                 | LR__0047
02690     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02694     01 74 06 51 |  if_ne	add	local06, #1
02698     01 5C 06 51 |  if_ne	add	arg01, #1
0269c     F0 FF 9F 5D |  if_ne	jmp	#LR__0047
026a0                 | LR__0048
026a0     3A 2B 02 F6 | 	mov	result1, local06
026a4     3A 73 02 F1 | 	add	local05, local06
026a8     39 79 02 F6 | 	mov	local08, local05
026ac     80 D9 9F FE | 	loc	pa,	#(@LR__0050-@LR__0049)
026b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
026b4                 | ' repeat while ncx>cpl-1
026b4                 | LR__0049
026b4     90 0E 06 F1 | 	add	objptr, #144
026b8     07 73 02 FB | 	rdlong	local05, objptr
026bc     90 0E 86 F1 | 	sub	objptr, #144
026c0     01 72 86 F1 | 	sub	local05, #1
026c4     39 79 5A F2 | 	cmps	local08, local05 wcz
026c8     18 00 90 ED |  if_be	jmp	#LR__0051
026cc                 | '   ncx-=cpl
026cc     90 0E 06 F1 | 	add	objptr, #144
026d0     07 7B 02 FB | 	rdlong	local09, objptr
026d4     90 0E 86 F1 | 	sub	objptr, #144
026d8     3D 79 82 F1 | 	sub	local08, local09
026dc                 | '   ncy+=1
026dc     01 70 06 F1 | 	add	local04, #1
026e0     D0 FF 9F FD | 	jmp	#LR__0049
026e4                 | LR__0050
026e4                 | LR__0051
026e4                 | ' repeat while ncy>lines-1
026e4                 | LR__0052
026e4     94 0E 06 F1 | 	add	objptr, #148
026e8     07 73 02 FB | 	rdlong	local05, objptr
026ec     94 0E 86 F1 | 	sub	objptr, #148
026f0     01 72 86 F1 | 	sub	local05, #1
026f4     39 71 5A F2 | 	cmps	local04, local05 wcz
026f8     20 00 90 ED |  if_be	jmp	#LR__0053
026fc                 | '   ncy-=1
026fc     01 70 86 F1 | 	sub	local04, #1
02700                 | '   scrollup()
02700     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
02704                 | '   cursor_y-=1
02704     35 0E 06 F1 | 	add	objptr, #53
02708     07 73 C2 FA | 	rdbyte	local05, objptr
0270c     01 72 86 F1 | 	sub	local05, #1
02710     07 73 42 FC | 	wrbyte	local05, objptr
02714     35 0E 86 F1 | 	sub	objptr, #53
02718     C8 FF 9F FD | 	jmp	#LR__0052
0271c                 | LR__0053
0271c                 | ' 
0271c                 | ' repeat iii from 0 to strsize(text)-1
0271c     00 7C 06 F6 | 	mov	local10, #0
02720     35 5D 02 F6 | 	mov	arg01, local01
02724     00 74 06 F6 | 	mov	local06, #0
02728     E4 D8 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
0272c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02730                 | LR__0054
02730     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02734     01 74 06 51 |  if_ne	add	local06, #1
02738     01 5C 06 51 |  if_ne	add	arg01, #1
0273c     F0 FF 9F 5D |  if_ne	jmp	#LR__0054
02740                 | LR__0055
02740     3A 2B 02 F6 | 	mov	result1, local06
02744     15 7F 02 F6 | 	mov	local11, result1
02748     01 7E 86 F1 | 	sub	local11, #1
0274c     00 7E 5E F2 | 	cmps	local11, #0 wcz
02750     01 80 06 16 |  if_a	mov	local12, #1
02754     01 80 66 E6 |  if_be	neg	local12, #1
02758     40 7F 02 F1 | 	add	local11, local12
0275c     F8 D8 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
02760     93 00 A0 FD | 	call	#FCACHE_LOAD_
02764                 | LR__0056
02764     90 0E 06 F1 | 	add	objptr, #144
02768     07 83 02 FB | 	rdlong	local13, objptr
0276c     5B 0E 86 F1 | 	sub	objptr, #91
02770     07 85 C2 FA | 	rdbyte	local14, objptr
02774     42 83 02 FD | 	qmul	local13, local14
02778     18 86 62 FD | 	getqx	local15
0277c     01 0E 86 F1 | 	sub	objptr, #1
02780     07 83 C2 FA | 	rdbyte	local13, objptr
02784     34 0E 86 F1 | 	sub	objptr, #52
02788     41 87 02 F1 | 	add	local15, local13
0278c     3E 87 02 F1 | 	add	local15, local10
02790     02 86 66 F0 | 	shl	local15, #2
02794     07 89 02 FB | 	rdlong	local16, objptr
02798     43 89 02 F1 | 	add	local16, local15
0279c     44 8B 02 FB | 	rdlong	local17, local16
027a0     7F 00 00 FF 
027a4     FF 8B 06 F5 | 	and	local17, ##65535
027a8     36 8B 42 F5 | 	or	local17, local02
027ac                 | ' 
027ac                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
027ac     44 8B 62 FC | 	wrlong	local17, local16
027b0     40 7D 02 F1 | 	add	local10, local12
027b4     3F 7D 0A F2 | 	cmp	local10, local11 wz
027b8     A8 FF 9F 5D |  if_ne	jmp	#LR__0056
027bc                 | LR__0057
027bc                 | ' 
027bc                 | ' outtextxy(cursor_x,cursor_y,text)
027bc     34 0E 06 F1 | 	add	objptr, #52
027c0     07 5D C2 FA | 	rdbyte	arg01, objptr
027c4     01 0E 06 F1 | 	add	objptr, #1
027c8     07 5F C2 FA | 	rdbyte	arg02, objptr
027cc     35 0E 86 F1 | 	sub	objptr, #53
027d0     35 61 02 F6 | 	mov	arg03, local01
027d4     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
027d8                 | ' 
027d8                 | ' cursor_x:=ncx
027d8     34 0E 06 F1 | 	add	objptr, #52
027dc     07 79 42 FC | 	wrbyte	local08, objptr
027e0                 | ' cursor_y:=ncy
027e0     01 0E 06 F1 | 	add	objptr, #1
027e4     07 71 42 FC | 	wrbyte	local04, objptr
027e8     35 0E 86 F1 | 	sub	objptr, #53
027ec     AF F0 03 F6 | 	mov	ptra, fp
027f0     BF 00 A0 FD | 	call	#popregs_
027f4                 | _hng030rm_spin2_write_ret
027f4     2D 00 64 FD | 	ret
027f8                 | 
027f8                 | ' 
027f8                 | ' ''-----------  Scroll the screen one line up
027f8                 | ' 
027f8                 | ' pub scrollup() | i
027f8                 | _hng030rm_spin2_scrollup
027f8     0A 5A 05 F6 | 	mov	COUNT_, #10
027fc     B0 00 A0 FD | 	call	#pushregs_
02800     90 0E 06 F1 | 	add	objptr, #144
02804     07 6B 02 FB | 	rdlong	local01, objptr
02808     90 0E 86 F1 | 	sub	objptr, #144
0280c     02 6A 66 F0 | 	shl	local01, #2
02810     07 5F 02 FB | 	rdlong	arg02, objptr
02814     35 5F 02 F1 | 	add	arg02, local01
02818     30 0E 06 F1 | 	add	objptr, #48
0281c     07 61 02 FB | 	rdlong	arg03, objptr
02820     60 0E 06 F1 | 	add	objptr, #96
02824     07 6D 02 FB | 	rdlong	local02, objptr
02828     90 0E 86 F1 | 	sub	objptr, #144
0282c     36 61 82 F1 | 	sub	arg03, local02
02830                 | ' 
02830                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02830     07 5D 02 FB | 	rdlong	arg01, objptr
02834     EC 35 B0 FD | 	call	#__system__longmove
02838                 | ' repeat i from buflen-cpl to buflen-1
02838     30 0E 06 F1 | 	add	objptr, #48
0283c     07 6F 02 FB | 	rdlong	local03, objptr
02840     60 0E 06 F1 | 	add	objptr, #96
02844     07 6D 02 FB | 	rdlong	local02, objptr
02848     36 6F 82 F1 | 	sub	local03, local02
0284c     60 0E 86 F1 | 	sub	objptr, #96
02850     07 71 02 FB | 	rdlong	local04, objptr
02854     01 70 86 F1 | 	sub	local04, #1
02858     07 73 02 FB | 	rdlong	local05, objptr
0285c     60 0E 06 F1 | 	add	objptr, #96
02860     07 75 02 FB | 	rdlong	local06, objptr
02864     90 0E 86 F1 | 	sub	objptr, #144
02868     3A 73 82 F1 | 	sub	local05, local06
0286c     39 71 5A F2 | 	cmps	local04, local05 wcz
02870     01 76 06 16 |  if_a	mov	local07, #1
02874     01 76 66 E6 |  if_be	neg	local07, #1
02878     3B 71 02 F1 | 	add	local04, local07
0287c     B0 D7 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
02880     93 00 A0 FD | 	call	#FCACHE_LOAD_
02884                 | LR__0058
02884     37 79 02 F6 | 	mov	local08, local03
02888     02 78 66 F0 | 	shl	local08, #2
0288c     07 7B 02 FB | 	rdlong	local09, objptr
02890     3C 7B 02 F1 | 	add	local09, local08
02894     3D 7D 02 FB | 	rdlong	local10, local09
02898     80 FF 7F FF 
0289c     00 7C 06 F5 | 	and	local10, ##-65536
028a0     20 7C 46 F5 | 	or	local10, #32
028a4                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
028a4     3D 7D 62 FC | 	wrlong	local10, local09
028a8     3B 6F 02 F1 | 	add	local03, local07
028ac     38 6F 0A F2 | 	cmp	local03, local04 wz
028b0     D0 FF 9F 5D |  if_ne	jmp	#LR__0058
028b4                 | LR__0059
028b4     AF F0 03 F6 | 	mov	ptra, fp
028b8     BF 00 A0 FD | 	call	#popregs_
028bc                 | _hng030rm_spin2_scrollup_ret
028bc     2D 00 64 FD | 	ret
028c0                 | 
028c0                 | ' 
028c0                 | ' 
028c0                 | ' 
028c0                 | ' pub inttostr2(i,d):result |q,pos,k,j
028c0                 | _hng030rm_spin2_inttostr2
028c0                 | ' 
028c0                 | ' j:=i
028c0     2F 31 02 F6 | 	mov	_var01, arg02
028c4     01 30 86 F1 | 	sub	_var01, #1
028c8                 | ' pos:=d-1
028c8     18 33 02 F6 | 	mov	_var02, _var01
028cc                 | ' k:=0
028cc     44 0E 06 F1 | 	add	objptr, #68
028d0     07 5F 02 F1 | 	add	arg02, objptr
028d4                 | ' 
028d4                 | ' n_string[d]:=0
028d4     2F 01 48 FC | 	wrbyte	#0, arg02
028d8                 | ' repeat k from 0 to d-1
028d8     00 34 06 F6 | 	mov	_var03, #0
028dc     00 30 5E F2 | 	cmps	_var01, #0 wcz
028e0     44 0E 86 F1 | 	sub	objptr, #68
028e4     01 36 06 16 |  if_a	mov	_var04, #1
028e8     01 36 66 E6 |  if_be	neg	_var04, #1
028ec     1B 31 02 F1 | 	add	_var01, _var04
028f0     2C D7 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
028f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
028f8                 | LR__0060
028f8     1A 39 02 F6 | 	mov	_var05, _var03
028fc     44 0E 06 F1 | 	add	objptr, #68
02900     07 39 02 F1 | 	add	_var05, objptr
02904                 | '   n_string[k]:=48
02904     1C 61 48 FC | 	wrbyte	#48, _var05
02908     1B 35 02 F1 | 	add	_var03, _var04
0290c     18 35 0A F2 | 	cmp	_var03, _var01 wz
02910     44 0E 86 F1 | 	sub	objptr, #68
02914     E0 FF 9F 5D |  if_ne	jmp	#LR__0060
02918                 | LR__0061
02918                 | ' 
02918                 | ' if (j<>0)
02918     00 5C 0E F2 | 	cmp	arg01, #0 wz
0291c     40 00 90 AD |  if_e	jmp	#LR__0064
02920                 | ' 
02920                 | '   repeat while (pos>-1)
02920                 | LR__0062
02920     FF FF 7F FF 
02924     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
02928     34 00 90 ED |  if_be	jmp	#LR__0063
0292c     2E 0B 03 F6 | 	mov	muldiva_, arg01
02930     0A 0C 07 F6 | 	mov	muldivb_, #10
02934     CC 00 A0 FD | 	call	#unsdivide_
02938     85 3B 02 F6 | 	mov	_var06, muldiva_
0293c                 | '     q:=j+//10
0293c                 | '     q:=48+q
0293c     30 3A 06 F1 | 	add	_var06, #48
02940     19 3D 02 F6 | 	mov	_var07, _var02
02944     44 0E 06 F1 | 	add	objptr, #68
02948     07 3D 02 F1 | 	add	_var07, objptr
0294c                 | '     n_string[pos]:=q
0294c     1E 3B 42 FC | 	wrbyte	_var06, _var07
02950                 | '     j:=j+/10
02950     86 5D 02 F6 | 	mov	arg01, muldivb_
02954                 | '     pos-=1
02954     01 32 86 F1 | 	sub	_var02, #1
02958     44 0E 86 F1 | 	sub	objptr, #68
0295c     C0 FF 9F FD | 	jmp	#LR__0062
02960                 | LR__0063
02960                 | LR__0064
02960     44 0E 06 F1 | 	add	objptr, #68
02964     07 2B 02 F6 | 	mov	result1, objptr
02968     44 0E 86 F1 | 	sub	objptr, #68
0296c                 | ' 
0296c                 | ' 
0296c                 | ' q:=@n_string
0296c                 | ' return q
0296c                 | _hng030rm_spin2_inttostr2_ret
0296c     2D 00 64 FD | 	ret
02970                 | 
02970                 | ' 
02970                 | ' 
02970                 | ' 
02970                 | ' '*************************************************************************
02970                 | ' '                                                                        *
02970                 | ' '  Mode setting and driver start                                                          *
02970                 | ' '                                                                        *
02970                 | ' '*************************************************************************
02970                 | ' 
02970                 | ' ''---------  Set the graphics mode
02970                 | ' 
02970                 | ' 
02970                 | ' 
02970                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02970                 | _hng030rm_spin2_setmode
02970     50 5A 05 F6 | 	mov	COUNT_, #80
02974     B0 00 A0 FD | 	call	#pushregs_
02978     2E 6B 02 F6 | 	mov	local01, arg01
0297c                 | ' 
0297c                 | ' '' mode:tn_bb_cc_vv_hh
0297c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
0297c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
0297c                 | ' 
0297c                 | ' if mode==(512+192+48)
0297c     01 00 00 FF 
02980     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02984                 | '   return 'no RAM
02984     1C 0A 90 AD |  if_e	jmp	#LR__0105
02988                 | ' 
02988                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02988     35 6D 02 F6 | 	mov	local02, local01
0298c     06 6C 46 F0 | 	shr	local02, #6
02990     07 6C 06 F5 | 	and	local02, #7
02994     08 6C 26 F3 | 	fle	local02, #8
02998     36 6F 02 F6 | 	mov	local03, local02
0299c     30 6E 62 FD | 	jmprel	local03
029a0                 | LR__0065
029a0     20 00 90 FD | 	jmp	#LR__0066
029a4     58 00 90 FD | 	jmp	#LR__0067
029a8     90 00 90 FD | 	jmp	#LR__0068
029ac     C8 00 90 FD | 	jmp	#LR__0069
029b0     00 01 90 FD | 	jmp	#LR__0070
029b4     38 01 90 FD | 	jmp	#LR__0071
029b8     70 01 90 FD | 	jmp	#LR__0072
029bc     A8 01 90 FD | 	jmp	#LR__0073
029c0     E4 01 90 FD | 	jmp	#LR__0074
029c4                 | LR__0066
029c4                 | ' 
029c4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
029c4     50 0E 06 F1 | 	add	objptr, #80
029c8     07 5D 02 F6 | 	mov	arg01, objptr
029cc     50 0E 86 F1 | 	sub	objptr, #80
029d0     0E 00 00 FF 
029d4     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
029d8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029dc     38 73 02 F6 | 	mov	local05, local04
029e0     10 74 06 F6 | 	mov	local06, #16
029e4     39 5F 02 F6 | 	mov	arg02, local05
029e8     10 60 06 F6 | 	mov	arg03, #16
029ec     0E 00 00 FF 
029f0     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029f4     2C 34 B0 FD | 	call	#__system__longmove
029f8     15 77 02 F6 | 	mov	local07, result1
029fc     A8 01 90 FD | 	jmp	#LR__0074
02a00                 | LR__0067
02a00                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02a00     50 0E 06 F1 | 	add	objptr, #80
02a04     07 5D 02 F6 | 	mov	arg01, objptr
02a08     50 0E 86 F1 | 	sub	objptr, #80
02a0c     0E 00 00 FF 
02a10     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02a14     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a18     38 73 02 F6 | 	mov	local05, local04
02a1c     10 74 06 F6 | 	mov	local06, #16
02a20     39 5F 02 F6 | 	mov	arg02, local05
02a24     10 60 06 F6 | 	mov	arg03, #16
02a28     0E 00 00 FF 
02a2c     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02a30     F0 33 B0 FD | 	call	#__system__longmove
02a34     15 77 02 F6 | 	mov	local07, result1
02a38     6C 01 90 FD | 	jmp	#LR__0074
02a3c                 | LR__0068
02a3c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02a3c     50 0E 06 F1 | 	add	objptr, #80
02a40     07 5D 02 F6 | 	mov	arg01, objptr
02a44     50 0E 86 F1 | 	sub	objptr, #80
02a48     0E 00 00 FF 
02a4c     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a50     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a54     38 73 02 F6 | 	mov	local05, local04
02a58     10 74 06 F6 | 	mov	local06, #16
02a5c     39 5F 02 F6 | 	mov	arg02, local05
02a60     10 60 06 F6 | 	mov	arg03, #16
02a64     0E 00 00 FF 
02a68     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a6c     B4 33 B0 FD | 	call	#__system__longmove
02a70     15 77 02 F6 | 	mov	local07, result1
02a74     30 01 90 FD | 	jmp	#LR__0074
02a78                 | LR__0069
02a78                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a78     50 0E 06 F1 | 	add	objptr, #80
02a7c     07 5D 02 F6 | 	mov	arg01, objptr
02a80     50 0E 86 F1 | 	sub	objptr, #80
02a84     0E 00 00 FF 
02a88     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a8c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a90     38 73 02 F6 | 	mov	local05, local04
02a94     10 74 06 F6 | 	mov	local06, #16
02a98     39 5F 02 F6 | 	mov	arg02, local05
02a9c     10 60 06 F6 | 	mov	arg03, #16
02aa0     0E 00 00 FF 
02aa4     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02aa8     78 33 B0 FD | 	call	#__system__longmove
02aac     15 77 02 F6 | 	mov	local07, result1
02ab0     F4 00 90 FD | 	jmp	#LR__0074
02ab4                 | LR__0070
02ab4                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02ab4     50 0E 06 F1 | 	add	objptr, #80
02ab8     07 5D 02 F6 | 	mov	arg01, objptr
02abc     50 0E 86 F1 | 	sub	objptr, #80
02ac0     0E 00 00 FF 
02ac4     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02ac8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02acc     38 73 02 F6 | 	mov	local05, local04
02ad0     10 74 06 F6 | 	mov	local06, #16
02ad4     39 5F 02 F6 | 	mov	arg02, local05
02ad8     10 60 06 F6 | 	mov	arg03, #16
02adc     0E 00 00 FF 
02ae0     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02ae4     3C 33 B0 FD | 	call	#__system__longmove
02ae8     15 77 02 F6 | 	mov	local07, result1
02aec     B8 00 90 FD | 	jmp	#LR__0074
02af0                 | LR__0071
02af0                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02af0     50 0E 06 F1 | 	add	objptr, #80
02af4     07 5D 02 F6 | 	mov	arg01, objptr
02af8     50 0E 86 F1 | 	sub	objptr, #80
02afc     0E 00 00 FF 
02b00     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b04     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b08     38 73 02 F6 | 	mov	local05, local04
02b0c     10 74 06 F6 | 	mov	local06, #16
02b10     39 5F 02 F6 | 	mov	arg02, local05
02b14     10 60 06 F6 | 	mov	arg03, #16
02b18     0E 00 00 FF 
02b1c     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b20     00 33 B0 FD | 	call	#__system__longmove
02b24     15 77 02 F6 | 	mov	local07, result1
02b28     7C 00 90 FD | 	jmp	#LR__0074
02b2c                 | LR__0072
02b2c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02b2c     50 0E 06 F1 | 	add	objptr, #80
02b30     07 5D 02 F6 | 	mov	arg01, objptr
02b34     50 0E 86 F1 | 	sub	objptr, #80
02b38     0E 00 00 FF 
02b3c     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02b40     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b44     38 73 02 F6 | 	mov	local05, local04
02b48     10 74 06 F6 | 	mov	local06, #16
02b4c     39 5F 02 F6 | 	mov	arg02, local05
02b50     10 60 06 F6 | 	mov	arg03, #16
02b54     0E 00 00 FF 
02b58     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02b5c     C4 32 B0 FD | 	call	#__system__longmove
02b60     15 77 02 F6 | 	mov	local07, result1
02b64     40 00 90 FD | 	jmp	#LR__0074
02b68                 | LR__0073
02b68                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02b68     50 0E 06 F1 | 	add	objptr, #80
02b6c     07 79 02 F6 | 	mov	local08, objptr
02b70     3C 7B 02 F6 | 	mov	local09, local08
02b74     0F 00 00 FF 
02b78     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02b7c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b80     38 73 02 F6 | 	mov	local05, local04
02b84     10 74 06 F6 | 	mov	local06, #16
02b88     3D 5D 02 F6 | 	mov	arg01, local09
02b8c     39 5F 02 F6 | 	mov	arg02, local05
02b90     10 60 06 F6 | 	mov	arg03, #16
02b94     50 0E 86 F1 | 	sub	objptr, #80
02b98     0F 00 00 FF 
02b9c     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02ba0     80 32 B0 FD | 	call	#__system__longmove
02ba4     15 77 02 F6 | 	mov	local07, result1
02ba8                 | LR__0074
02ba8                 | ' 
02ba8                 | ' ' 4-bit graphics: do nothing with timings :)
02ba8                 | ' if mode<512
02ba8     01 00 00 FF 
02bac     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02bb0     20 00 90 3D |  if_ae	jmp	#LR__0075
02bb4     0C 00 00 FF 
02bb8     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02bbc     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02bc0                 | '   palette_ptr:=@ataripalette
02bc0     18 0E 06 F1 | 	add	objptr, #24
02bc4     07 7D 62 FC | 	wrlong	local10, objptr
02bc8     18 0E 86 F1 | 	sub	objptr, #24
02bcc     0C 00 00 FF 
02bd0     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02bd4                 | LR__0075
02bd4                 | ' 
02bd4                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02bd4     35 6D 02 F6 | 	mov	local02, local01
02bd8     01 00 00 FF 
02bdc     30 6C 06 F5 | 	and	local02, ##560
02be0     01 00 00 FF 
02be4     30 6C 0E F2 | 	cmp	local02, ##560 wz
02be8     48 00 90 5D |  if_ne	jmp	#LR__0076
02bec                 | '   timings[5]:=4
02bec     64 0E 06 F1 | 	add	objptr, #100
02bf0     07 09 68 FC | 	wrlong	#4, objptr
02bf4     18 0E 06 F1 | 	add	objptr, #24
02bf8     07 7F 02 FB | 	rdlong	local11, objptr
02bfc     01 7E 66 F0 | 	shl	local11, #1
02c00                 | '   timings[11]:=timings[11]<<1
02c00     07 7F 62 FC | 	wrlong	local11, objptr
02c04                 | '   putpixel:=p8
02c04     6C 0E 06 F1 | 	add	objptr, #108
02c08     07 6D 02 FB | 	rdlong	local02, objptr
02c0c     10 0E 86 F1 | 	sub	objptr, #16
02c10     07 6D 62 FC | 	wrlong	local02, objptr
02c14     0C 00 00 FF 
02c18     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c1c     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02c20                 | '   palette_ptr:=@ataripalette
02c20     C0 0E 86 F1 | 	sub	objptr, #192
02c24     07 81 62 FC | 	wrlong	local12, objptr
02c28     18 0E 86 F1 | 	sub	objptr, #24
02c2c     0C 00 00 FF 
02c30     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c34                 | LR__0076
02c34                 | ' 
02c34                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02c34     35 6D 02 F6 | 	mov	local02, local01
02c38     01 00 00 FF 
02c3c     30 6C 06 F5 | 	and	local02, ##560
02c40     01 00 00 FF 
02c44     10 6C 0E F2 | 	cmp	local02, ##528 wz
02c48     48 00 90 5D |  if_ne	jmp	#LR__0077
02c4c                 | '   timings[5]:=16
02c4c     64 0E 06 F1 | 	add	objptr, #100
02c50     07 21 68 FC | 	wrlong	#16, objptr
02c54     18 0E 06 F1 | 	add	objptr, #24
02c58     07 83 02 FB | 	rdlong	local13, objptr
02c5c     01 82 46 F0 | 	shr	local13, #1
02c60                 | '   timings[11]:=timings[11]>>1
02c60     07 83 62 FC | 	wrlong	local13, objptr
02c64                 | '   putpixel:=p2
02c64     64 0E 06 F1 | 	add	objptr, #100
02c68     07 6D 02 FB | 	rdlong	local02, objptr
02c6c     08 0E 86 F1 | 	sub	objptr, #8
02c70     07 6D 62 FC | 	wrlong	local02, objptr
02c74     0C 00 00 FF 
02c78     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02c7c     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02c80                 | '   palette_ptr:=@fourcolors
02c80     C0 0E 86 F1 | 	sub	objptr, #192
02c84     07 85 62 FC | 	wrlong	local14, objptr
02c88     18 0E 86 F1 | 	sub	objptr, #24
02c8c     0C 00 00 FF 
02c90     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02c94                 | LR__0077
02c94                 | ' 
02c94                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02c94     35 6D 02 F6 | 	mov	local02, local01
02c98     01 00 00 FF 
02c9c     30 6C 06 F5 | 	and	local02, ##560
02ca0     01 00 00 FF 
02ca4     00 6C 0E F2 | 	cmp	local02, ##512 wz
02ca8     48 00 90 5D |  if_ne	jmp	#LR__0078
02cac                 | '   timings[5]:=32
02cac     64 0E 06 F1 | 	add	objptr, #100
02cb0     07 41 68 FC | 	wrlong	#32, objptr
02cb4     18 0E 06 F1 | 	add	objptr, #24
02cb8     07 87 02 FB | 	rdlong	local15, objptr
02cbc     02 86 46 F0 | 	shr	local15, #2
02cc0                 | '   timings[11]:=timings[11]>>2
02cc0     07 87 62 FC | 	wrlong	local15, objptr
02cc4                 | '   putpixel:=p1
02cc4     60 0E 06 F1 | 	add	objptr, #96
02cc8     07 6D 02 FB | 	rdlong	local02, objptr
02ccc     04 0E 86 F1 | 	sub	objptr, #4
02cd0     07 6D 62 FC | 	wrlong	local02, objptr
02cd4     0C 00 00 FF 
02cd8     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02cdc     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02ce0                 | '   palette_ptr:=@twocolors
02ce0     C0 0E 86 F1 | 	sub	objptr, #192
02ce4     07 89 62 FC | 	wrlong	local16, objptr
02ce8     18 0E 86 F1 | 	sub	objptr, #24
02cec     0C 00 00 FF 
02cf0     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02cf4                 | LR__0078
02cf4                 | ' 
02cf4                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02cf4     35 6D 02 F6 | 	mov	local02, local01
02cf8     01 00 00 FF 
02cfc     30 6C 06 F5 | 	and	local02, ##560
02d00     01 00 00 FF 
02d04     20 6C 0E F2 | 	cmp	local02, ##544 wz
02d08     30 00 90 5D |  if_ne	jmp	#LR__0079
02d0c                 | '   putpixel:=p4
02d0c     E4 0E 06 F1 | 	add	objptr, #228
02d10     07 6D 02 FB | 	rdlong	local02, objptr
02d14     0C 0E 86 F1 | 	sub	objptr, #12
02d18     07 6D 62 FC | 	wrlong	local02, objptr
02d1c     0C 00 00 FF 
02d20     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02d24     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02d28                 | '   palette_ptr:=@vga16
02d28     C0 0E 86 F1 | 	sub	objptr, #192
02d2c     07 8B 62 FC | 	wrlong	local17, objptr
02d30     18 0E 86 F1 | 	sub	objptr, #24
02d34     0C 00 00 FF 
02d38     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d3c                 | LR__0079
02d3c                 | ' 
02d3c                 | ' repeat i from 0 to 4
02d3c     00 8C 06 F6 | 	mov	local18, #0
02d40     00 D3 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
02d44     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d48                 | LR__0080
02d48     46 8F 02 F6 | 	mov	local19, local18
02d4c     02 8E 66 F0 | 	shl	local19, #2
02d50     50 0E 06 F1 | 	add	objptr, #80
02d54     07 8F 02 F1 | 	add	local19, objptr
02d58     2C 0E 86 F1 | 	sub	objptr, #44
02d5c     07 91 02 FB | 	rdlong	local20, objptr
02d60     24 0E 86 F1 | 	sub	objptr, #36
02d64     11 90 66 F0 | 	shl	local20, #17
02d68     47 93 02 FB | 	rdlong	local21, local19
02d6c     48 93 02 F1 | 	add	local21, local20
02d70     49 95 02 F6 | 	mov	local22, local21
02d74     80 40 38 FF 
02d78     00 94 06 F1 | 	add	local22, ##1887502336
02d7c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d7c     47 95 62 FC | 	wrlong	local22, local19
02d80     01 8C 06 F1 | 	add	local18, #1
02d84     05 8C 5E F2 | 	cmps	local18, #5 wcz
02d88     BC FF 9F CD |  if_b	jmp	#LR__0080
02d8c                 | LR__0081
02d8c     24 0E 06 F1 | 	add	objptr, #36
02d90     07 97 02 FB | 	rdlong	local23, objptr
02d94     11 96 66 F0 | 	shl	local23, #17
02d98     40 0E 06 F1 | 	add	objptr, #64
02d9c     07 99 02 FB | 	rdlong	local24, objptr
02da0     4B 99 02 F1 | 	add	local24, local23
02da4                 | ' timings[5]:=timings[5]+hdmibase<<17
02da4     07 99 62 FC | 	wrlong	local24, objptr
02da8                 | ' clkfreq:=timings[13]
02da8     20 0E 06 F1 | 	add	objptr, #32
02dac     07 6D 02 FB | 	rdlong	local02, objptr
02db0     14 6C 66 FC | 	wrlong	local02, #20
02db4                 | ' hubset(timings[14])
02db4     04 0E 06 F1 | 	add	objptr, #4
02db8     07 5D 02 FB | 	rdlong	arg01, objptr
02dbc     88 0E 86 F1 | 	sub	objptr, #136
02dc0     00 5C 62 FD | 	hubset	arg01
02dc4                 | ' waitms(1)
02dc4     01 5C 06 F6 | 	mov	arg01, #1
02dc8     F8 32 B0 FD | 	call	#__system___waitms
02dcc     35 9B 02 F6 | 	mov	local25, local01
02dd0     03 9A 06 F5 | 	and	local25, #3
02dd4     4D 9D C2 F9 | 	decod	local26, local25
02dd8                 | ' 
02dd8                 | ' 
02dd8                 | ' xzoom:=1<<(mode & 3)
02dd8     CC 0E 06 F1 | 	add	objptr, #204
02ddc     07 9D 62 FC | 	wrlong	local26, objptr
02de0                 | ' 
02de0                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02de0     4E 79 02 F6 | 	mov	local08, local26
02de4     CC 0E 86 F1 | 	sub	objptr, #204
02de8     08 78 0E F2 | 	cmp	local08, #8 wz
02dec     24 00 90 5D |  if_ne	jmp	#LR__0082
02df0     35 7B 02 F6 | 	mov	local09, local01
02df4     04 7A 46 F0 | 	shr	local09, #4
02df8     03 7A 06 F5 | 	and	local09, #3
02dfc     03 7A 0E F2 | 	cmp	local09, #3 wz
02e00     10 00 90 AD |  if_e	jmp	#LR__0082
02e04                 | '   xzoom:=4
02e04     04 6C 06 F6 | 	mov	local02, #4
02e08     CC 0E 06 F1 | 	add	objptr, #204
02e0c     07 09 68 FC | 	wrlong	#4, objptr
02e10     CC 0E 86 F1 | 	sub	objptr, #204
02e14                 | LR__0082
02e14     35 9F 02 F6 | 	mov	local27, local01
02e18     02 9E 46 F0 | 	shr	local27, #2
02e1c     03 9E 06 F5 | 	and	local27, #3
02e20     4F A1 C2 F9 | 	decod	local28, local27
02e24                 | ' 
02e24                 | ' yzoom:=1<<((mode>>2) & 3)
02e24     D0 0E 06 F1 | 	add	objptr, #208
02e28     07 A1 62 FC | 	wrlong	local28, objptr
02e2c     04 0E 86 F1 | 	sub	objptr, #4
02e30     07 79 02 FB | 	rdlong	local08, objptr
02e34     04 0E 06 F1 | 	add	objptr, #4
02e38     07 71 02 FB | 	rdlong	local04, objptr
02e3c     38 79 02 FD | 	qmul	local08, local04
02e40     18 A2 62 FD | 	getqx	local29
02e44                 | ' azoom:=xzoom*yzoom
02e44     04 0E 06 F1 | 	add	objptr, #4
02e48     07 A3 62 FC | 	wrlong	local29, objptr
02e4c                 | ' 
02e4c                 | ' cpl:=timings[11]
02e4c     58 0E 86 F1 | 	sub	objptr, #88
02e50     07 6D 02 FB | 	rdlong	local02, objptr
02e54     14 0E 06 F1 | 	add	objptr, #20
02e58     07 6D 62 FC | 	wrlong	local02, objptr
02e5c     90 0E 86 F1 | 	sub	objptr, #144
02e60                 | ' if (mode<512)
02e60     01 00 00 FF 
02e64     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02e68     60 00 90 3D |  if_ae	jmp	#LR__0083
02e6c     80 0E 06 F1 | 	add	objptr, #128
02e70     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e74     04 0A 47 F0 | 	shr	muldiva_, #4
02e78     50 0E 06 F1 | 	add	objptr, #80
02e7c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e80     D0 0E 86 F1 | 	sub	objptr, #208
02e84     CC 00 A0 FD | 	call	#unsdivide_
02e88                 | '   lines:=(timings[12]>>4)+/yzoom
02e88     94 0E 06 F1 | 	add	objptr, #148
02e8c     07 0D 63 FC | 	wrlong	muldivb_, objptr
02e90                 | '   if ((timings[12]>>4)+//yzoom) <>0
02e90     14 0E 86 F1 | 	sub	objptr, #20
02e94     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e98     04 0A 47 F0 | 	shr	muldiva_, #4
02e9c     50 0E 06 F1 | 	add	objptr, #80
02ea0     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ea4     D0 0E 86 F1 | 	sub	objptr, #208
02ea8     CC 00 A0 FD | 	call	#unsdivide_
02eac     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02eb0     AC 00 90 AD |  if_e	jmp	#LR__0086
02eb4                 | '     lines +=1
02eb4     94 0E 06 F1 | 	add	objptr, #148
02eb8     07 6D 02 FB | 	rdlong	local02, objptr
02ebc     01 6C 06 F1 | 	add	local02, #1
02ec0     07 6D 62 FC | 	wrlong	local02, objptr
02ec4     94 0E 86 F1 | 	sub	objptr, #148
02ec8                 | ' 
02ec8                 | ' else
02ec8     94 00 90 FD | 	jmp	#LR__0086
02ecc                 | LR__0083
02ecc     80 0E 06 F1 | 	add	objptr, #128
02ed0     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ed4     50 0E 06 F1 | 	add	objptr, #80
02ed8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02edc     D0 0E 86 F1 | 	sub	objptr, #208
02ee0     D0 00 A0 FD | 	call	#divide_
02ee4                 | '   lines:=timings[12]/yzoom
02ee4     94 0E 06 F1 | 	add	objptr, #148
02ee8     07 0D 63 FC | 	wrlong	muldivb_, objptr
02eec                 | '   if cpl//xzoom==0
02eec     04 0E 86 F1 | 	sub	objptr, #4
02ef0     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ef4     3C 0E 06 F1 | 	add	objptr, #60
02ef8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02efc     CC 0E 86 F1 | 	sub	objptr, #204
02f00     D0 00 A0 FD | 	call	#divide_
02f04     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f08     28 00 90 5D |  if_ne	jmp	#LR__0084
02f0c                 | '     cpl:=cpl/xzoom
02f0c     90 0E 06 F1 | 	add	objptr, #144
02f10     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f14     3C 0E 06 F1 | 	add	objptr, #60
02f18     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f1c     CC 0E 86 F1 | 	sub	objptr, #204
02f20     D0 00 A0 FD | 	call	#divide_
02f24     90 0E 06 F1 | 	add	objptr, #144
02f28     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f2c     90 0E 86 F1 | 	sub	objptr, #144
02f30                 | '   else
02f30     2C 00 90 FD | 	jmp	#LR__0085
02f34                 | LR__0084
02f34     90 0E 06 F1 | 	add	objptr, #144
02f38     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f3c     3C 0E 06 F1 | 	add	objptr, #60
02f40     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f44     CC 0E 86 F1 | 	sub	objptr, #204
02f48     D0 00 A0 FD | 	call	#divide_
02f4c     86 A5 02 F6 | 	mov	local30, muldivb_
02f50     01 A4 06 F1 | 	add	local30, #1
02f54                 | '     cpl:=cpl/xzoom+1
02f54     90 0E 06 F1 | 	add	objptr, #144
02f58     07 A5 62 FC | 	wrlong	local30, objptr
02f5c     90 0E 86 F1 | 	sub	objptr, #144
02f60                 | LR__0085
02f60                 | LR__0086
02f60     90 0E 06 F1 | 	add	objptr, #144
02f64     07 79 02 FB | 	rdlong	local08, objptr
02f68     04 0E 06 F1 | 	add	objptr, #4
02f6c     07 71 02 FB | 	rdlong	local04, objptr
02f70     38 79 02 FD | 	qmul	local08, local04
02f74     18 A6 62 FD | 	getqx	local31
02f78                 | ' 
02f78                 | ' buflen:=(cpl*lines)
02f78     64 0E 86 F1 | 	sub	objptr, #100
02f7c     07 A7 62 FC | 	wrlong	local31, objptr
02f80     30 0E 86 F1 | 	sub	objptr, #48
02f84     02 A6 66 F0 | 	shl	local31, #2
02f88     13 A8 C6 F9 | 	decod	local32, #19
02f8c     53 A9 82 F1 | 	sub	local32, local31
02f90                 | ' buf_ptr:=$80000-4*buflen
02f90     07 A9 62 FC | 	wrlong	local32, objptr
02f94     50 0E 06 F1 | 	add	objptr, #80
02f98     07 AB 02 F6 | 	mov	local33, objptr
02f9c                 | ' mode_ptr:=@timings
02f9c     3C 0E 86 F1 | 	sub	objptr, #60
02fa0     07 AB 62 FC | 	wrlong	local33, objptr
02fa4                 | ' graphmode:=mode
02fa4     B0 0E 06 F1 | 	add	objptr, #176
02fa8     07 6B 62 FC | 	wrlong	local01, objptr
02fac     C4 0E 86 F1 | 	sub	objptr, #196
02fb0                 | ' makedl(mode)
02fb0     35 5D 02 F6 | 	mov	arg01, local01
02fb4                 | ' 
02fb4                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02fb4                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02fb4                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02fb4                 | ' 
02fb4                 | ' '   0 - display a up/down border line
02fb4                 | ' 
02fb4                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02fb4                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02fb4                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02fb4                 | ' '    nnnn - font line to display, 0..15
02fb4                 | ' '    llllll - character line, determines the cursor Y position
02fb4                 | ' 
02fb4                 | ' 
02fb4                 | ' if (mode &256==0)
02fb4     00 5D CE F7 | 	test	arg01, #256 wz
02fb8     1C 00 90 5D |  if_ne	jmp	#LR__0087
02fbc     07 AD 02 FB | 	rdlong	local34, objptr
02fc0     04 00 00 FF 
02fc4     00 AD 86 F1 | 	sub	local34, ##2304
02fc8                 | '   dl_ptr:=buf_ptr-4*576
02fc8     1C 0E 06 F1 | 	add	objptr, #28
02fcc     07 AD 62 FC | 	wrlong	local34, objptr
02fd0     1C 0E 86 F1 | 	sub	objptr, #28
02fd4                 | ' else
02fd4     18 00 90 FD | 	jmp	#LR__0088
02fd8                 | LR__0087
02fd8     07 AF 02 FB | 	rdlong	local35, objptr
02fdc     03 00 00 FF 
02fe0     C0 AF 86 F1 | 	sub	local35, ##1984
02fe4                 | '   dl_ptr:=buf_ptr-4*496
02fe4     1C 0E 06 F1 | 	add	objptr, #28
02fe8     07 AF 62 FC | 	wrlong	local35, objptr
02fec     1C 0E 86 F1 | 	sub	objptr, #28
02ff0                 | LR__0088
02ff0     2E B1 02 F6 | 	mov	local36, arg01
02ff4     02 B0 46 F0 | 	shr	local36, #2
02ff8     03 B0 06 F5 | 	and	local36, #3
02ffc                 | '  ' dl_ptr:=buf_ptr-4*540
02ffc                 | ' 
02ffc                 | ' vzoom:=((mode>>2) & 3)
02ffc                 | ' 
02ffc                 | ' 
02ffc                 | ' if mode<512 '' text modes
02ffc     01 00 00 FF 
03000     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03004     E4 01 90 3D |  if_ae	jmp	#LR__0096
03008                 | ' 
03008                 | '   if timings[6]>0 'borders
03008     68 0E 06 F1 | 	add	objptr, #104
0300c     07 B3 02 FB | 	rdlong	local37, objptr
03010     68 0E 86 F1 | 	sub	objptr, #104
03014     00 B2 5E F2 | 	cmps	local37, #0 wcz
03018     D4 00 90 ED |  if_be	jmp	#LR__0093
0301c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0301c     00 B4 06 F6 | 	mov	local38, #0
03020     68 0E 06 F1 | 	add	objptr, #104
03024     07 B7 02 FB | 	rdlong	local39, objptr
03028     68 0E 86 F1 | 	sub	objptr, #104
0302c     01 B6 86 F1 | 	sub	local39, #1
03030     00 B6 5E F2 | 	cmps	local39, #0 wcz
03034     01 B8 06 16 |  if_a	mov	local40, #1
03038     01 B8 66 E6 |  if_be	neg	local40, #1
0303c     5C BB 02 F6 | 	mov	local41, local40
03040     5C B7 02 F1 | 	add	local39, local40
03044     E0 CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
03048     93 00 A0 FD | 	call	#FCACHE_LOAD_
0304c                 | LR__0089
0304c     5A BD 02 F6 | 	mov	local42, local38
03050     02 BC 66 F0 | 	shl	local42, #2
03054     1C 0E 06 F1 | 	add	objptr, #28
03058     07 BF 02 FB | 	rdlong	local43, objptr
0305c     1C 0E 86 F1 | 	sub	objptr, #28
03060     5E BF 02 F1 | 	add	local43, local42
03064                 | '       long[dl_ptr+4*i]:=$0
03064     5F 01 68 FC | 	wrlong	#0, local43
03068     5D B5 02 F1 | 	add	local38, local41
0306c     5B B5 0A F2 | 	cmp	local38, local39 wz
03070     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
03074                 | LR__0090
03074                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03074     68 0E 06 F1 | 	add	objptr, #104
03078     07 B5 02 FB | 	rdlong	local38, objptr
0307c     18 0E 06 F1 | 	add	objptr, #24
03080     07 B9 02 FB | 	rdlong	local40, objptr
03084     5C B5 02 F1 | 	add	local38, local40
03088     0C 0E 06 F1 | 	add	objptr, #12
0308c     07 C1 02 FB | 	rdlong	local44, objptr
03090     01 C0 86 F1 | 	sub	local44, #1
03094     24 0E 86 F1 | 	sub	objptr, #36
03098     07 C3 02 FB | 	rdlong	local45, objptr
0309c     18 0E 06 F1 | 	add	objptr, #24
030a0     07 C5 02 FB | 	rdlong	local46, objptr
030a4     80 0E 86 F1 | 	sub	objptr, #128
030a8     62 C3 02 F1 | 	add	local45, local46
030ac     61 C1 5A F2 | 	cmps	local44, local45 wcz
030b0     01 C6 06 16 |  if_a	mov	local47, #1
030b4     01 C6 66 E6 |  if_be	neg	local47, #1
030b8     63 C9 02 F6 | 	mov	local48, local47
030bc     63 C1 02 F1 | 	add	local44, local47
030c0     64 CF 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
030c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030c8                 | LR__0091
030c8     5A CB 02 F6 | 	mov	local49, local38
030cc     02 CA 66 F0 | 	shl	local49, #2
030d0     1C 0E 06 F1 | 	add	objptr, #28
030d4     07 CD 02 FB | 	rdlong	local50, objptr
030d8     1C 0E 86 F1 | 	sub	objptr, #28
030dc     65 CD 02 F1 | 	add	local50, local49
030e0                 | '       long[dl_ptr+4*i]:=$0
030e0     66 01 68 FC | 	wrlong	#0, local50
030e4     64 B5 02 F1 | 	add	local38, local48
030e8     60 B5 0A F2 | 	cmp	local38, local44 wz
030ec     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
030f0                 | LR__0092
030f0                 | LR__0093
030f0     10 CE 06 F6 | 	mov	local51, #16
030f4     58 CF 62 F0 | 	shl	local51, local36
030f8                 | '   lpc:=16<<vzoom
030f8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
030f8     68 0E 06 F1 | 	add	objptr, #104
030fc     07 B5 02 FB | 	rdlong	local38, objptr
03100     5A D1 02 F6 | 	mov	local52, local38
03104     18 0E 06 F1 | 	add	objptr, #24
03108     07 D3 02 FB | 	rdlong	local53, objptr
0310c     69 D1 02 F1 | 	add	local52, local53
03110     01 D0 86 F1 | 	sub	local52, #1
03114     18 0E 86 F1 | 	sub	objptr, #24
03118     07 C7 02 FB | 	rdlong	local47, objptr
0311c     68 0E 86 F1 | 	sub	objptr, #104
03120     63 D1 5A F2 | 	cmps	local52, local47 wcz
03124     01 D4 06 16 |  if_a	mov	local54, #1
03128     01 D4 66 E6 |  if_be	neg	local54, #1
0312c     6A D7 02 F6 | 	mov	local55, local54
03130     6A D1 02 F1 | 	add	local52, local54
03134     78 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
03138     93 00 A0 FD | 	call	#FCACHE_LOAD_
0313c                 | LR__0094
0313c     5A 0B 03 F6 | 	mov	muldiva_, local38
03140     68 0E 06 F1 | 	add	objptr, #104
03144     07 D9 02 FB | 	rdlong	local56, objptr
03148     68 0E 86 F1 | 	sub	objptr, #104
0314c     6C 0B 83 F1 | 	sub	muldiva_, local56
03150     67 0D 03 F6 | 	mov	muldivb_, local51
03154     CC 00 A0 FD | 	call	#unsdivide_
03158     58 0B 43 F0 | 	shr	muldiva_, local36
0315c                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
0315c     85 DB 02 F6 | 	mov	local57, muldiva_
03160     5A 0B 03 F6 | 	mov	muldiva_, local38
03164     68 0E 06 F1 | 	add	objptr, #104
03168     07 D9 02 FB | 	rdlong	local56, objptr
0316c     68 0E 86 F1 | 	sub	objptr, #104
03170     6C 0B 83 F1 | 	sub	muldiva_, local56
03174     67 0D 03 F6 | 	mov	muldivb_, local51
03178     CC 00 A0 FD | 	call	#unsdivide_
0317c     86 DD 02 F6 | 	mov	local58, muldivb_
03180                 | '     charline:=(i-timings[6])+/lpc
03180     90 0E 06 F1 | 	add	objptr, #144
03184     07 D9 02 FB | 	rdlong	local56, objptr
03188     90 0E 86 F1 | 	sub	objptr, #144
0318c     6E D9 02 FD | 	qmul	local56, local58
03190     18 DE 62 FD | 	getqx	local59
03194     02 DE 66 F0 | 	shl	local59, #2
03198     07 E1 02 FB | 	rdlong	local60, objptr
0319c     6F E1 02 F1 | 	add	local60, local59
031a0     2E E3 02 F6 | 	mov	local61, arg01
031a4     03 E2 06 F5 | 	and	local61, #3
031a8     71 E1 02 F1 | 	add	local60, local61
031ac                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
031ac     0C E0 66 F0 | 	shl	local60, #12
031b0     08 DA 66 F0 | 	shl	local57, #8
031b4     6D E1 02 F1 | 	add	local60, local57
031b8     02 DC 66 F0 | 	shl	local58, #2
031bc     6E E1 02 F1 | 	add	local60, local58
031c0     01 E0 06 F1 | 	add	local60, #1
031c4     5A E5 02 F6 | 	mov	local62, local38
031c8     02 E4 66 F0 | 	shl	local62, #2
031cc     1C 0E 06 F1 | 	add	objptr, #28
031d0     07 E7 02 FB | 	rdlong	local63, objptr
031d4     1C 0E 86 F1 | 	sub	objptr, #28
031d8     72 E7 02 F1 | 	add	local63, local62
031dc                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
031dc     73 E1 62 FC | 	wrlong	local60, local63
031e0     6B B5 02 F1 | 	add	local38, local55
031e4     68 B5 0A F2 | 	cmp	local38, local52 wz
031e8     50 FF 9F 5D |  if_ne	jmp	#LR__0094
031ec                 | LR__0095
031ec                 | LR__0096
031ec                 | ' 
031ec                 | ' 
031ec                 | ' 
031ec                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
031ec     01 00 00 FF 
031f0     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
031f4     AC 01 90 CD |  if_b	jmp	#LR__0104
031f8                 | ' 
031f8                 | '   if timings[6]>0 'borders
031f8     68 0E 06 F1 | 	add	objptr, #104
031fc     07 B3 02 FB | 	rdlong	local37, objptr
03200     68 0E 86 F1 | 	sub	objptr, #104
03204     00 B2 5E F2 | 	cmps	local37, #0 wcz
03208     D4 00 90 ED |  if_be	jmp	#LR__0101
0320c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0320c     00 B4 06 F6 | 	mov	local38, #0
03210     68 0E 06 F1 | 	add	objptr, #104
03214     07 E9 02 FB | 	rdlong	local64, objptr
03218     68 0E 86 F1 | 	sub	objptr, #104
0321c     01 E8 86 F1 | 	sub	local64, #1
03220     00 E8 5E F2 | 	cmps	local64, #0 wcz
03224     01 B8 06 16 |  if_a	mov	local40, #1
03228     01 B8 66 E6 |  if_be	neg	local40, #1
0322c     5C EB 02 F6 | 	mov	local65, local40
03230     5C E9 02 F1 | 	add	local64, local40
03234     F0 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03238     93 00 A0 FD | 	call	#FCACHE_LOAD_
0323c                 | LR__0097
0323c     5A ED 02 F6 | 	mov	local66, local38
03240     02 EC 66 F0 | 	shl	local66, #2
03244     1C 0E 06 F1 | 	add	objptr, #28
03248     07 EF 02 FB | 	rdlong	local67, objptr
0324c     1C 0E 86 F1 | 	sub	objptr, #28
03250     76 EF 02 F1 | 	add	local67, local66
03254                 | '       long[dl_ptr+4*i]:=$0
03254     77 01 68 FC | 	wrlong	#0, local67
03258     75 B5 02 F1 | 	add	local38, local65
0325c     74 B5 0A F2 | 	cmp	local38, local64 wz
03260     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
03264                 | LR__0098
03264                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03264     68 0E 06 F1 | 	add	objptr, #104
03268     07 B5 02 FB | 	rdlong	local38, objptr
0326c     18 0E 06 F1 | 	add	objptr, #24
03270     07 B9 02 FB | 	rdlong	local40, objptr
03274     5C B5 02 F1 | 	add	local38, local40
03278     0C 0E 06 F1 | 	add	objptr, #12
0327c     07 F1 02 FB | 	rdlong	local68, objptr
03280     01 F0 86 F1 | 	sub	local68, #1
03284     24 0E 86 F1 | 	sub	objptr, #36
03288     07 C3 02 FB | 	rdlong	local45, objptr
0328c     18 0E 06 F1 | 	add	objptr, #24
03290     07 C5 02 FB | 	rdlong	local46, objptr
03294     80 0E 86 F1 | 	sub	objptr, #128
03298     62 C3 02 F1 | 	add	local45, local46
0329c     61 F1 5A F2 | 	cmps	local68, local45 wcz
032a0     01 C6 06 16 |  if_a	mov	local47, #1
032a4     01 C6 66 E6 |  if_be	neg	local47, #1
032a8     63 F3 02 F6 | 	mov	local69, local47
032ac     63 F1 02 F1 | 	add	local68, local47
032b0     74 CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
032b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b8                 | LR__0099
032b8     5A F5 02 F6 | 	mov	local70, local38
032bc     02 F4 66 F0 | 	shl	local70, #2
032c0     1C 0E 06 F1 | 	add	objptr, #28
032c4     07 F7 02 FB | 	rdlong	local71, objptr
032c8     1C 0E 86 F1 | 	sub	objptr, #28
032cc     7A F7 02 F1 | 	add	local71, local70
032d0                 | '       long[dl_ptr+4*i]:=$0
032d0     7B 01 68 FC | 	wrlong	#0, local71
032d4     79 B5 02 F1 | 	add	local38, local69
032d8     78 B5 0A F2 | 	cmp	local38, local68 wz
032dc     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
032e0                 | LR__0100
032e0                 | LR__0101
032e0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
032e0     68 0E 06 F1 | 	add	objptr, #104
032e4     07 B5 02 FB | 	rdlong	local38, objptr
032e8     5A F9 02 F6 | 	mov	local72, local38
032ec     18 0E 06 F1 | 	add	objptr, #24
032f0     07 D3 02 FB | 	rdlong	local53, objptr
032f4     69 F9 02 F1 | 	add	local72, local53
032f8     01 F8 86 F1 | 	sub	local72, #1
032fc     18 0E 86 F1 | 	sub	objptr, #24
03300     07 C7 02 FB | 	rdlong	local47, objptr
03304     68 0E 86 F1 | 	sub	objptr, #104
03308     63 F9 5A F2 | 	cmps	local72, local47 wcz
0330c     01 D4 06 16 |  if_a	mov	local54, #1
03310     01 D4 66 E6 |  if_be	neg	local54, #1
03314     6A FB 02 F6 | 	mov	local73, local54
03318     6A F9 02 F1 | 	add	local72, local54
0331c     60 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
03320     93 00 A0 FD | 	call	#FCACHE_LOAD_
03324                 | LR__0102
03324     5A FD 02 F6 | 	mov	local74, local38
03328     68 0E 06 F1 | 	add	objptr, #104
0332c     07 D9 02 FB | 	rdlong	local56, objptr
03330     6C FD 82 F1 | 	sub	local74, local56
03334     58 FD 42 F0 | 	shr	local74, local36
03338     28 0E 06 F1 | 	add	objptr, #40
0333c     07 D9 02 FB | 	rdlong	local56, objptr
03340     90 0E 86 F1 | 	sub	objptr, #144
03344     7E D9 02 FD | 	qmul	local56, local74
03348     18 FE 62 FD | 	getqx	local75
0334c     02 FE 66 F0 | 	shl	local75, #2
03350     07 01 03 FB | 	rdlong	local76, objptr
03354     7F 01 03 F1 | 	add	local76, local75
03358     2E 03 03 F6 | 	mov	local77, arg01
0335c     03 02 07 F5 | 	and	local77, #3
03360     81 01 03 F1 | 	add	local76, local77
03364                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03364     0C 00 67 F0 | 	shl	local76, #12
03368     02 00 07 F1 | 	add	local76, #2
0336c     2E 05 03 F6 | 	mov	local78, arg01
03370     30 04 07 F5 | 	and	local78, #48
03374     02 04 47 F0 | 	shr	local78, #2
03378     82 01 03 F1 | 	add	local76, local78
0337c     5A 07 03 F6 | 	mov	local79, local38
03380     02 06 67 F0 | 	shl	local79, #2
03384     1C 0E 06 F1 | 	add	objptr, #28
03388     07 09 03 FB | 	rdlong	local80, objptr
0338c     1C 0E 86 F1 | 	sub	objptr, #28
03390     83 09 03 F1 | 	add	local80, local79
03394                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03394     84 01 63 FC | 	wrlong	local76, local80
03398     7D B5 02 F1 | 	add	local38, local73
0339c     7C B5 0A F2 | 	cmp	local38, local72 wz
033a0     80 FF 9F 5D |  if_ne	jmp	#LR__0102
033a4                 | LR__0103
033a4                 | LR__0104
033a4                 | LR__0105
033a4     AF F0 03 F6 | 	mov	ptra, fp
033a8     BF 00 A0 FD | 	call	#popregs_
033ac                 | _hng030rm_spin2_setmode_ret
033ac     2D 00 64 FD | 	ret
033b0                 | 
033b0                 | ' 
033b0                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
033b0                 | _retrocog_spin2_serialcog
033b0     1C 5A 05 F6 | 	mov	COUNT_, #28
033b4     B0 00 A0 FD | 	call	#pushregs_
033b8                 | ' 
033b8                 | ' 'start serial and midi
033b8                 | ' 
033b8                 | ' serial_start(rxpin, txpin, baudrate)
033b8     20 5C 06 F6 | 	mov	arg01, #32
033bc     21 5E 06 F6 | 	mov	arg02, #33
033c0     A6 0E 00 FF 
033c4     00 60 06 F6 | 	mov	arg03, ##1920000
033c8     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033cc                 | ' serial_start(midiin,midiout,mbaudrate)
033cc     1D 5C 06 F6 | 	mov	arg01, #29
033d0     1E 5E 06 F6 | 	mov	arg02, #30
033d4     3D 00 00 FF 
033d8     12 60 06 F6 | 	mov	arg03, ##31250
033dc     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033e0                 | ' serial_start(srxpin,stxpin,sbaudrate)
033e0     42 0F 00 FF 
033e4     80 6A 06 F6 | 	mov	local01, ##2000000
033e8     3F 5C 06 F6 | 	mov	arg01, #63
033ec     3E 5E 06 F6 | 	mov	arg02, #62
033f0     42 0F 00 FF 
033f4     80 60 06 F6 | 	mov	arg03, ##2000000
033f8     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033fc                 | ' 
033fc                 | ' mb:=(-1)
033fc     01 6C 66 F6 | 	neg	local02, #1
03400                 | ' b:=(-1)
03400     01 6E 66 F6 | 	neg	local03, #1
03404                 | ' 
03404                 | ' mousefront:=0
03404     00 70 06 F6 | 	mov	local04, #0
03408     08 0E 06 F1 | 	add	objptr, #8
0340c     07 01 68 FC | 	wrlong	#0, objptr
03410                 | ' mousetail:=0
03410     04 0E 06 F1 | 	add	objptr, #4
03414     07 01 68 FC | 	wrlong	#0, objptr
03418     0C 0E 86 F1 | 	sub	objptr, #12
0341c                 | ' kbdfront:=0
0341c     07 01 68 FC | 	wrlong	#0, objptr
03420                 | ' kbdtail:=0
03420     04 0E 06 F1 | 	add	objptr, #4
03424     07 01 68 FC | 	wrlong	#0, objptr
03428                 | ' midifront:=0
03428     0C 0E 06 F1 | 	add	objptr, #12
0342c     07 01 68 FC | 	wrlong	#0, objptr
03430                 | ' miditail:=0
03430     04 0E 06 F1 | 	add	objptr, #4
03434     07 01 68 FC | 	wrlong	#0, objptr
03438                 | ' serialfront:=0
03438     04 0E 06 F1 | 	add	objptr, #4
0343c     07 01 68 FC | 	wrlong	#0, objptr
03440                 | ' serialtail:=0
03440     04 0E 06 F1 | 	add	objptr, #4
03444     07 01 68 FC | 	wrlong	#0, objptr
03448                 | ' long[$30]:=0
03448     30 00 6C FC | 	wrlong	#0, #48
0344c                 | ' long[$34]:=0
0344c     34 00 6C FC | 	wrlong	#0, #52
03450                 | ' long[$38]:=0
03450     38 00 6C FC | 	wrlong	#0, #56
03454     1C 0E 86 F1 | 	sub	objptr, #28
03458                 | ' long[$3C]:=0
03458     3C 00 6C FC | 	wrlong	#0, #60
0345c                 | ' 
0345c                 | ' repeat
0345c                 | LR__0106
0345c                 | ' 
0345c                 | ' '  repeat 
0345c                 | '   rr:=rxcheck(rxpin)
0345c     20 5C 06 F6 | 	mov	arg01, #32
03460     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03464     15 73 02 F6 | 	mov	local05, result1
03468                 | '   mrr:=rxcheck(midiin)
03468     1D 5C 06 F6 | 	mov	arg01, #29
0346c     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03470     15 75 02 F6 | 	mov	local06, result1
03474                 | '   srr:=rxcheck(srxpin)
03474     3F 70 06 F6 | 	mov	local04, #63
03478     3F 5C 06 F6 | 	mov	arg01, #63
0347c     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03480     15 77 02 F6 | 	mov	local07, result1
03484     3B 79 02 F6 | 	mov	local08, local07
03488                 | ' 
03488                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03488                 | ' 
03488                 | '   
03488                 | ' ' midi. Must be >= $80 for a command
03488                 | ' '$80-$8F - 3 bytes note off. note, velocity
03488                 | ' '$90-$9F - 3 bytes note on, note, velocity
03488                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03488                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03488                 | ' '$C0-$CF - 2 bytes program change
03488                 | ' '$D0-$DF - 2 bytes mono aftertouch
03488                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03488                 | ' '$F0-$FF - 1 byte
03488                 | '   
03488                 | '   if srr>=0
03488     00 78 5E F2 | 	cmps	local08, #0 wcz
0348c     7C 00 90 CD |  if_b	jmp	#LR__0108
03490                 | '   
03490                 | '     if serialfront<>((serialtail-1) //32)
03490     1C 0E 06 F1 | 	add	objptr, #28
03494     07 77 02 FB | 	rdlong	local07, objptr
03498     3B 71 02 F6 | 	mov	local04, local07
0349c     01 70 86 F1 | 	sub	local04, #1
034a0     38 6B 52 F6 | 	abs	local01, local04 wc
034a4     1F 6A 06 F5 | 	and	local01, #31
034a8     35 6B 62 C6 |  if_b	neg	local01, local01
034ac     04 0E 86 F1 | 	sub	objptr, #4
034b0     07 7B 02 FB | 	rdlong	local09, objptr
034b4     18 0E 86 F1 | 	sub	objptr, #24
034b8     3D 7D 02 F6 | 	mov	local10, local09
034bc     35 7D 0A F2 | 	cmp	local10, local01 wz
034c0     48 00 90 AD |  if_e	jmp	#LR__0107
034c4     18 0E 06 F1 | 	add	objptr, #24
034c8     07 7D 02 FB | 	rdlong	local10, objptr
034cc     01 00 00 FF 
034d0     08 0F 06 F1 | 	add	objptr, ##776
034d4     07 7D 02 F1 | 	add	local10, objptr
034d8     3E 7F 02 F6 | 	mov	local11, local10
034dc                 | '       serialbuf[serialfront]:=srr
034dc     3F 79 42 FC | 	wrbyte	local08, local11
034e0                 | '       serialfront+=1
034e0     01 00 00 FF 
034e4     08 0F 86 F1 | 	sub	objptr, ##776
034e8     07 6B 02 FB | 	rdlong	local01, objptr
034ec     01 6A 06 F1 | 	add	local01, #1
034f0     07 6B 62 FC | 	wrlong	local01, objptr
034f4                 | '       serialfront:=serialfront // 32
034f4     35 77 02 F6 | 	mov	local07, local01
034f8     3B 71 52 F6 | 	abs	local04, local07 wc
034fc     1F 70 06 F5 | 	and	local04, #31
03500     38 71 62 C6 |  if_b	neg	local04, local04
03504     07 71 62 FC | 	wrlong	local04, objptr
03508     18 0E 86 F1 | 	sub	objptr, #24
0350c                 | LR__0107
0350c                 | LR__0108
0350c                 | '     
0350c                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
0350c     80 74 5E F2 | 	cmps	local06, #128 wcz
03510     08 00 90 CD |  if_b	jmp	#LR__0109
03514     BF 74 5E F2 | 	cmps	local06, #191 wcz
03518     10 00 90 ED |  if_be	jmp	#LR__0110
0351c                 | LR__0109
0351c     E0 74 5E F2 | 	cmps	local06, #224 wcz
03520     1C 00 90 CD |  if_b	jmp	#LR__0111
03524     EF 74 5E F2 | 	cmps	local06, #239 wcz
03528     14 00 90 1D |  if_a	jmp	#LR__0111
0352c                 | LR__0110
0352c                 | '     mb:=2
0352c     02 6C 06 F6 | 	mov	local02, #2
03530     3A 71 02 F6 | 	mov	local04, local06
03534     18 70 66 F0 | 	shl	local04, #24
03538     38 81 02 F6 | 	mov	local12, local04
0353c                 | '     midireport:=mrr<<24
0353c     40 83 02 F6 | 	mov	local13, local12
03540                 | LR__0111
03540                 | ' 
03540                 | '   if (mrr>=$C0) && (mrr<=$DF)
03540     C0 74 5E F2 | 	cmps	local06, #192 wcz
03544     1C 00 90 CD |  if_b	jmp	#LR__0112
03548     DF 74 5E F2 | 	cmps	local06, #223 wcz
0354c     14 00 90 1D |  if_a	jmp	#LR__0112
03550                 | '     mb:=1
03550     01 6C 06 F6 | 	mov	local02, #1
03554     3A 71 02 F6 | 	mov	local04, local06
03558     18 70 66 F0 | 	shl	local04, #24
0355c     38 85 02 F6 | 	mov	local14, local04
03560                 | '     midireport:=mrr<<24
03560     42 83 02 F6 | 	mov	local13, local14
03564                 | LR__0112
03564                 | '   
03564                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03564     F0 74 5E F2 | 	cmps	local06, #240 wcz
03568     10 00 90 CD |  if_b	jmp	#LR__0113
0356c                 | '     mb:=4
0356c     04 6C 06 F6 | 	mov	local02, #4
03570     3A 87 02 F6 | 	mov	local15, local06
03574     18 86 66 F0 | 	shl	local15, #24
03578                 | '     midireport:=mrr<<24  
03578     43 83 02 F6 | 	mov	local13, local15
0357c                 | LR__0113
0357c                 | '   
0357c                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
0357c     80 74 5E F2 | 	cmps	local06, #128 wcz
03580     44 00 90 3D |  if_ae	jmp	#LR__0115
03584     00 6C 5E F2 | 	cmps	local02, #0 wcz
03588     3C 00 90 ED |  if_be	jmp	#LR__0115
0358c     00 74 5E F2 | 	cmps	local06, #0 wcz
03590     34 00 90 CD |  if_b	jmp	#LR__0115
03594                 | '     
03594                 | '     mb--
03594     36 71 02 F6 | 	mov	local04, local02
03598     36 77 02 F6 | 	mov	local07, local02
0359c     01 76 86 F1 | 	sub	local07, #1
035a0     3B 6D 02 F6 | 	mov	local02, local07
035a4                 | '     if mb<3
035a4     03 6C 5E F2 | 	cmps	local02, #3 wcz
035a8     1C 00 90 3D |  if_ae	jmp	#LR__0114
035ac     36 89 02 F6 | 	mov	local16, local02
035b0     03 88 66 F0 | 	shl	local16, #3
035b4     3A 8B 02 F6 | 	mov	local17, local06
035b8     44 8B 62 F0 | 	shl	local17, local16
035bc                 | '       midireport+=mrr<<(mb<<3)
035bc     41 71 02 F6 | 	mov	local04, local13
035c0     45 71 02 F1 | 	add	local04, local17
035c4     38 83 02 F6 | 	mov	local13, local04
035c8                 | LR__0114
035c8                 | LR__0115
035c8                 | '   
035c8                 | '   if mb==0
035c8     00 6C 0E F2 | 	cmp	local02, #0 wz
035cc     84 00 90 5D |  if_ne	jmp	#LR__0117
035d0                 | '     
035d0                 | '     if midifront<>((miditail-1) //32)
035d0     14 0E 06 F1 | 	add	objptr, #20
035d4     07 77 02 FB | 	rdlong	local07, objptr
035d8     3B 71 02 F6 | 	mov	local04, local07
035dc     01 70 86 F1 | 	sub	local04, #1
035e0     38 6B 52 F6 | 	abs	local01, local04 wc
035e4     1F 6A 06 F5 | 	and	local01, #31
035e8     35 6B 62 C6 |  if_b	neg	local01, local01
035ec     04 0E 86 F1 | 	sub	objptr, #4
035f0     07 7B 02 FB | 	rdlong	local09, objptr
035f4     10 0E 86 F1 | 	sub	objptr, #16
035f8     3D 7D 02 F6 | 	mov	local10, local09
035fc     35 7D 0A F2 | 	cmp	local10, local01 wz
03600     4C 00 90 AD |  if_e	jmp	#LR__0116
03604     10 0E 06 F1 | 	add	objptr, #16
03608     07 7D 02 FB | 	rdlong	local10, objptr
0360c     02 7C 66 F0 | 	shl	local10, #2
03610     01 00 00 FF 
03614     90 0E 06 F1 | 	add	objptr, ##656
03618     07 7D 02 F1 | 	add	local10, objptr
0361c     3E 8D 02 F6 | 	mov	local18, local10
03620                 | '       midibuf[midifront]:=midireport
03620     46 83 62 FC | 	wrlong	local13, local18
03624                 | '       midifront+=1
03624     01 00 00 FF 
03628     90 0E 86 F1 | 	sub	objptr, ##656
0362c     07 6B 02 FB | 	rdlong	local01, objptr
03630     01 6A 06 F1 | 	add	local01, #1
03634     07 6B 62 FC | 	wrlong	local01, objptr
03638                 | '       midifront:=midifront // 32
03638     35 77 02 F6 | 	mov	local07, local01
0363c     3B 71 52 F6 | 	abs	local04, local07 wc
03640     1F 70 06 F5 | 	and	local04, #31
03644     38 71 62 C6 |  if_b	neg	local04, local04
03648     07 71 62 FC | 	wrlong	local04, objptr
0364c     10 0E 86 F1 | 	sub	objptr, #16
03650                 | LR__0116
03650                 | '     mb:=(-1)
03650     01 6C 66 F6 | 	neg	local02, #1
03654                 | LR__0117
03654                 | ' 
03654                 | ' 'Keyboard and mouse
03654                 | ' 
03654                 | '   if (rr>=$80) && (rr<>$FF)
03654     80 72 5E F2 | 	cmps	local05, #128 wcz
03658     1C 00 90 CD |  if_b	jmp	#LR__0118
0365c     FF 72 0E F2 | 	cmp	local05, #255 wz
03660     14 00 90 AD |  if_e	jmp	#LR__0118
03664                 | '     b:=3
03664     03 6E 06 F6 | 	mov	local03, #3
03668     39 71 02 F6 | 	mov	local04, local05
0366c     18 70 66 F0 | 	shl	local04, #24
03670     38 8F 02 F6 | 	mov	local19, local04
03674                 | '     kbmreport:=rr<<24
03674     47 91 02 F6 | 	mov	local20, local19
03678                 | LR__0118
03678                 | '   
03678                 | '   if (rr<$80) && (b>0) && (rr>=0)
03678     80 72 5E F2 | 	cmps	local05, #128 wcz
0367c     38 00 90 3D |  if_ae	jmp	#LR__0119
03680     00 6E 5E F2 | 	cmps	local03, #0 wcz
03684     30 00 90 ED |  if_be	jmp	#LR__0119
03688     00 72 5E F2 | 	cmps	local05, #0 wcz
0368c     28 00 90 CD |  if_b	jmp	#LR__0119
03690                 | '     b--
03690     37 77 02 F6 | 	mov	local07, local03
03694     01 76 86 F1 | 	sub	local07, #1
03698     3B 6F 02 F6 | 	mov	local03, local07
0369c     37 93 02 F6 | 	mov	local21, local03
036a0     03 92 66 F0 | 	shl	local21, #3
036a4     39 95 02 F6 | 	mov	local22, local05
036a8     49 95 62 F0 | 	shl	local22, local21
036ac                 | '     kbmreport+=rr<<(b<<3)  
036ac     48 71 02 F6 | 	mov	local04, local20
036b0     4A 71 02 F1 | 	add	local04, local22
036b4     38 91 02 F6 | 	mov	local20, local04
036b8                 | LR__0119
036b8                 | '   
036b8                 | '   if (rr==$FF)
036b8     FF 72 0E F2 | 	cmp	local05, #255 wz
036bc                 | '     b:=0   
036bc     00 6E 06 A6 |  if_e	mov	local03, #0
036c0                 | ' 
036c0                 | '   if b==0  
036c0     00 6E 0E F2 | 	cmp	local03, #0 wz
036c4     14 01 90 5D |  if_ne	jmp	#LR__0124
036c8                 | '  
036c8                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
036c8     00 00 40 FF 
036cc     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
036d0     84 00 90 CD |  if_b	jmp	#LR__0121
036d4     00 80 43 FF 
036d8     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
036dc     78 00 90 3D |  if_ae	jmp	#LR__0121
036e0                 | '       if mousefront<>((mousetail-1) //128)
036e0     0C 0E 06 F1 | 	add	objptr, #12
036e4     07 77 02 FB | 	rdlong	local07, objptr
036e8     3B 71 02 F6 | 	mov	local04, local07
036ec     01 70 86 F1 | 	sub	local04, #1
036f0     38 6B 52 F6 | 	abs	local01, local04 wc
036f4     7F 6A 06 F5 | 	and	local01, #127
036f8     35 6B 62 C6 |  if_b	neg	local01, local01
036fc     04 0E 86 F1 | 	sub	objptr, #4
03700     07 7B 02 FB | 	rdlong	local09, objptr
03704     08 0E 86 F1 | 	sub	objptr, #8
03708     3D 7D 02 F6 | 	mov	local10, local09
0370c     35 7D 0A F2 | 	cmp	local10, local01 wz
03710     44 00 90 AD |  if_e	jmp	#LR__0120
03714     08 0E 06 F1 | 	add	objptr, #8
03718     07 7D 02 FB | 	rdlong	local10, objptr
0371c     02 7C 66 F0 | 	shl	local10, #2
03720     98 0E 06 F1 | 	add	objptr, #152
03724     07 7D 02 F1 | 	add	local10, objptr
03728     3E 97 02 F6 | 	mov	local23, local10
0372c                 | '         mousebuf[mousefront]:=kbmreport
0372c     4B 91 62 FC | 	wrlong	local20, local23
03730                 | '         mousefront+=1
03730     98 0E 86 F1 | 	sub	objptr, #152
03734     07 6B 02 FB | 	rdlong	local01, objptr
03738     01 6A 06 F1 | 	add	local01, #1
0373c     07 6B 62 FC | 	wrlong	local01, objptr
03740                 | '         mousefront:=mousefront // 128
03740     35 77 02 F6 | 	mov	local07, local01
03744     3B 71 52 F6 | 	abs	local04, local07 wc
03748     7F 70 06 F5 | 	and	local04, #127
0374c     38 71 62 C6 |  if_b	neg	local04, local04
03750     07 71 62 FC | 	wrlong	local04, objptr
03754     08 0E 86 F1 | 	sub	objptr, #8
03758                 | LR__0120
03758                 | LR__0121
03758                 | '     b:=(-1)
03758     01 6E 66 F6 | 	neg	local03, #1
0375c                 | ' 
0375c                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
0375c     00 80 43 FF 
03760     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03764     70 00 90 CD |  if_b	jmp	#LR__0123
03768     00 00 45 FF 
0376c     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03770     64 00 90 3D |  if_ae	jmp	#LR__0123
03774                 | '       if kbdfront<>((kbdtail-1) //32)
03774     04 0E 06 F1 | 	add	objptr, #4
03778     07 77 02 FB | 	rdlong	local07, objptr
0377c     04 0E 86 F1 | 	sub	objptr, #4
03780     3B 71 02 F6 | 	mov	local04, local07
03784     01 70 86 F1 | 	sub	local04, #1
03788     38 6B 52 F6 | 	abs	local01, local04 wc
0378c     1F 6A 06 F5 | 	and	local01, #31
03790     35 6B 62 C6 |  if_b	neg	local01, local01
03794     07 7D 02 FB | 	rdlong	local10, objptr
03798     35 7D 0A F2 | 	cmp	local10, local01 wz
0379c     38 00 90 AD |  if_e	jmp	#LR__0122
037a0     07 6B 02 FB | 	rdlong	local01, objptr
037a4     02 6A 66 F0 | 	shl	local01, #2
037a8     20 0E 06 F1 | 	add	objptr, #32
037ac     07 6B 02 F1 | 	add	local01, objptr
037b0     35 99 02 F6 | 	mov	local24, local01
037b4                 | '         kbdbuf[kbdfront]:=kbmreport
037b4     4C 91 62 FC | 	wrlong	local20, local24
037b8                 | '         kbdfront+=1
037b8     20 0E 86 F1 | 	sub	objptr, #32
037bc     07 77 02 FB | 	rdlong	local07, objptr
037c0     01 76 06 F1 | 	add	local07, #1
037c4     07 77 62 FC | 	wrlong	local07, objptr
037c8                 | '         kbdfront:=kbdfront // 32
037c8     3B 71 52 F6 | 	abs	local04, local07 wc
037cc     1F 70 06 F5 | 	and	local04, #31
037d0     38 71 62 C6 |  if_b	neg	local04, local04
037d4     07 71 62 FC | 	wrlong	local04, objptr
037d8                 | LR__0122
037d8                 | LR__0123
037d8                 | '     b:=(-1)
037d8     01 6E 66 F6 | 	neg	local03, #1
037dc                 | LR__0124
037dc                 | ' 
037dc                 | ' 
037dc                 | '   if long[$30]==0
037dc     30 70 0E FB | 	rdlong	local04, #48 wz
037e0     5C 00 90 5D |  if_ne	jmp	#LR__0126
037e4                 | '     if kbdfront<>kbdtail
037e4     07 71 02 FB | 	rdlong	local04, objptr
037e8     04 0E 06 F1 | 	add	objptr, #4
037ec     07 6B 02 FB | 	rdlong	local01, objptr
037f0     04 0E 86 F1 | 	sub	objptr, #4
037f4     35 71 0A F2 | 	cmp	local04, local01 wz
037f8     44 00 90 AD |  if_e	jmp	#LR__0125
037fc     04 0E 06 F1 | 	add	objptr, #4
03800     07 9B 02 FB | 	rdlong	local25, objptr
03804     02 9A 66 F0 | 	shl	local25, #2
03808     1C 0E 06 F1 | 	add	objptr, #28
0380c     07 9B 02 F1 | 	add	local25, objptr
03810                 | '       long[$30]:=kbdbuf[kbdtail]
03810     4D 71 02 FB | 	rdlong	local04, local25
03814     30 70 66 FC | 	wrlong	local04, #48
03818                 | '       kbdtail++
03818     1C 0E 86 F1 | 	sub	objptr, #28
0381c     07 7D 02 FB | 	rdlong	local10, objptr
03820     3E 6B 02 F6 | 	mov	local01, local10
03824     01 6A 06 F1 | 	add	local01, #1
03828     07 6B 62 FC | 	wrlong	local01, objptr
0382c                 | '       kbdtail:= kbdtail // 32
0382c     35 71 52 F6 | 	abs	local04, local01 wc
03830     1F 70 06 F5 | 	and	local04, #31
03834     38 71 62 C6 |  if_b	neg	local04, local04
03838     07 71 62 FC | 	wrlong	local04, objptr
0383c     04 0E 86 F1 | 	sub	objptr, #4
03840                 | LR__0125
03840                 | LR__0126
03840                 | '       
03840                 | '   if long[$34]==0
03840     34 70 0E FB | 	rdlong	local04, #52 wz
03844     64 00 90 5D |  if_ne	jmp	#LR__0128
03848                 | '     if mousefront<>mousetail
03848     08 0E 06 F1 | 	add	objptr, #8
0384c     07 71 02 FB | 	rdlong	local04, objptr
03850     04 0E 06 F1 | 	add	objptr, #4
03854     07 7D 02 FB | 	rdlong	local10, objptr
03858     0C 0E 86 F1 | 	sub	objptr, #12
0385c     3E 6B 02 F6 | 	mov	local01, local10
03860     35 71 0A F2 | 	cmp	local04, local01 wz
03864     44 00 90 AD |  if_e	jmp	#LR__0127
03868     0C 0E 06 F1 | 	add	objptr, #12
0386c     07 9D 02 FB | 	rdlong	local26, objptr
03870     02 9C 66 F0 | 	shl	local26, #2
03874     94 0E 06 F1 | 	add	objptr, #148
03878     07 9D 02 F1 | 	add	local26, objptr
0387c                 | '       long[$34]:=mousebuf[mousetail]
0387c     4E 71 02 FB | 	rdlong	local04, local26
03880     34 70 66 FC | 	wrlong	local04, #52
03884                 | '       mousetail++
03884     94 0E 86 F1 | 	sub	objptr, #148
03888     07 7D 02 FB | 	rdlong	local10, objptr
0388c     3E 6B 02 F6 | 	mov	local01, local10
03890     01 6A 06 F1 | 	add	local01, #1
03894     07 6B 62 FC | 	wrlong	local01, objptr
03898                 | '       mousetail:= mousetail // 128
03898     35 71 52 F6 | 	abs	local04, local01 wc
0389c     7F 70 06 F5 | 	and	local04, #127
038a0     38 71 62 C6 |  if_b	neg	local04, local04
038a4     07 71 62 FC | 	wrlong	local04, objptr
038a8     0C 0E 86 F1 | 	sub	objptr, #12
038ac                 | LR__0127
038ac                 | LR__0128
038ac                 | ' 
038ac                 | '       
038ac                 | '   if long[$38]==0
038ac     38 70 0E FB | 	rdlong	local04, #56 wz
038b0     6C 00 90 5D |  if_ne	jmp	#LR__0130
038b4                 | '     if midifront<>miditail
038b4     10 0E 06 F1 | 	add	objptr, #16
038b8     07 71 02 FB | 	rdlong	local04, objptr
038bc     04 0E 06 F1 | 	add	objptr, #4
038c0     07 7D 02 FB | 	rdlong	local10, objptr
038c4     14 0E 86 F1 | 	sub	objptr, #20
038c8     3E 6B 02 F6 | 	mov	local01, local10
038cc     35 71 0A F2 | 	cmp	local04, local01 wz
038d0     4C 00 90 AD |  if_e	jmp	#LR__0129
038d4     14 0E 06 F1 | 	add	objptr, #20
038d8     07 9F 02 FB | 	rdlong	local27, objptr
038dc     02 9E 66 F0 | 	shl	local27, #2
038e0     01 00 00 FF 
038e4     8C 0E 06 F1 | 	add	objptr, ##652
038e8     07 9F 02 F1 | 	add	local27, objptr
038ec                 | '       long[$38]:=midibuf[miditail]
038ec     4F 71 02 FB | 	rdlong	local04, local27
038f0     38 70 66 FC | 	wrlong	local04, #56
038f4                 | '       miditail++
038f4     01 00 00 FF 
038f8     8C 0E 86 F1 | 	sub	objptr, ##652
038fc     07 7D 02 FB | 	rdlong	local10, objptr
03900     3E 6B 02 F6 | 	mov	local01, local10
03904     01 6A 06 F1 | 	add	local01, #1
03908     07 6B 62 FC | 	wrlong	local01, objptr
0390c                 | '       miditail:= miditail // 32
0390c     35 71 52 F6 | 	abs	local04, local01 wc
03910     1F 70 06 F5 | 	and	local04, #31
03914     38 71 62 C6 |  if_b	neg	local04, local04
03918     07 71 62 FC | 	wrlong	local04, objptr
0391c     14 0E 86 F1 | 	sub	objptr, #20
03920                 | LR__0129
03920                 | LR__0130
03920                 | '       
03920                 | '   if long[$3c]==0
03920     3C 70 0E FB | 	rdlong	local04, #60 wz
03924     34 FB 9F 5D |  if_ne	jmp	#LR__0106
03928                 | '     if serialfront<>serialtail
03928     18 0E 06 F1 | 	add	objptr, #24
0392c     07 71 02 FB | 	rdlong	local04, objptr
03930     04 0E 06 F1 | 	add	objptr, #4
03934     07 7D 02 FB | 	rdlong	local10, objptr
03938     1C 0E 86 F1 | 	sub	objptr, #28
0393c     3E 6B 02 F6 | 	mov	local01, local10
03940     35 71 0A F2 | 	cmp	local04, local01 wz
03944     14 FB 9F AD |  if_e	jmp	#LR__0106
03948                 | '       byte[$3c]:=255
03948     3C FE 4D FC | 	wrbyte	#255, #60
0394c     1C 0E 06 F1 | 	add	objptr, #28
03950     07 A1 02 FB | 	rdlong	local28, objptr
03954     01 00 00 FF 
03958     04 0F 06 F1 | 	add	objptr, ##772
0395c     07 A1 02 F1 | 	add	local28, objptr
03960                 | '       byte[$3D]:=serialbuf[serialtail]
03960     50 71 C2 FA | 	rdbyte	local04, local28
03964     3D 70 46 FC | 	wrbyte	local04, #61
03968                 | '       serialtail++
03968     01 00 00 FF 
0396c     04 0F 86 F1 | 	sub	objptr, ##772
03970     07 7D 02 FB | 	rdlong	local10, objptr
03974     3E 6B 02 F6 | 	mov	local01, local10
03978     01 6A 06 F1 | 	add	local01, #1
0397c     07 6B 62 FC | 	wrlong	local01, objptr
03980                 | '       serialtail:= serialtail // 32
03980     35 71 52 F6 | 	abs	local04, local01 wc
03984     1F 70 06 F5 | 	and	local04, #31
03988     38 71 62 C6 |  if_b	neg	local04, local04
0398c     07 71 62 FC | 	wrlong	local04, objptr
03990     1C 0E 86 F1 | 	sub	objptr, #28
03994     C4 FA 9F FD | 	jmp	#LR__0106
03998     AF F0 03 F6 | 	mov	ptra, fp
0399c     BF 00 A0 FD | 	call	#popregs_
039a0                 | _retrocog_spin2_serialcog_ret
039a0     2D 00 64 FD | 	ret
039a4                 | 
039a4                 | '       
039a4                 | ' 
039a4                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
039a4                 | ' 
039a4                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
039a4                 | _retrocog_spin2_serial_start
039a4     04 5A 05 F6 | 	mov	COUNT_, #4
039a8     B0 00 A0 FD | 	call	#pushregs_
039ac     2E 6B 02 F6 | 	mov	local01, arg01
039b0     2F 6D 02 F6 | 	mov	local02, arg02
039b4                 | ' 
039b4                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
039b4     14 5C 06 FB | 	rdlong	arg01, #20
039b8     10 5E C6 F9 | 	decod	arg02, #16
039bc     2F 5D 02 FD | 	qmul	arg01, arg02
039c0     19 6E 62 FD | 	getqy	local03
039c4     18 70 62 FD | 	getqx	local04
039c8     28 6E 62 FD | 	setq	local03
039cc     30 71 12 FD | 	qdiv	local04, arg03
039d0     18 2A 62 FD | 	getqx	result1
039d4     15 61 02 F6 | 	mov	arg03, result1
039d8     FE FF 7F FF 
039dc     00 60 06 F5 | 	and	arg03, ##-1024
039e0                 | ' bitmode |= 7                                                  ' set bits (8)
039e0     07 60 46 F5 | 	or	arg03, #7
039e4                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
039e4     40 6A 62 FD | 	dirl	local01
039e8     08 00 80 FF 
039ec     35 7D 08 FC | 	wrpin	##4158, local01
039f0     35 61 12 FC | 	wxpin	arg03, local01
039f4     35 01 28 FC | 	wypin	#0, local01
039f8     41 6A 62 FD | 	dirh	local01
039fc                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
039fc     40 6C 62 FD | 	dirl	local02
03a00     36 F9 08 FC | 	wrpin	#124, local02
03a04     36 61 12 FC | 	wxpin	arg03, local02
03a08     36 01 28 FC | 	wypin	#0, local02
03a0c     41 6C 62 FD | 	dirh	local02
03a10                 | ' pinhigh(rxpin)
03a10     59 6A 62 FD | 	drvh	local01
03a14     AF F0 03 F6 | 	mov	ptra, fp
03a18     BF 00 A0 FD | 	call	#popregs_
03a1c                 | _retrocog_spin2_serial_start_ret
03a1c     2D 00 64 FD | 	ret
03a20                 | 
03a20                 | ' 
03a20                 | ' pub rxcheck(pin) : rxbyte | check
03a20                 | _retrocog_spin2_rxcheck
03a20     03 5A 05 F6 | 	mov	COUNT_, #3
03a24     B0 00 A0 FD | 	call	#pushregs_
03a28     2E 6B 02 F6 | 	mov	local01, arg01
03a2c                 | ' 
03a2c                 | ' '' Check for serial input
03a2c                 | ' '' -- returns -1 if nothing available
03a2c                 | ' 
03a2c                 | '   rxbyte := -1
03a2c     01 6C 66 F6 | 	neg	local02, #1
03a30                 | '   check := pinr(pin)
03a30     35 5D 02 F6 | 	mov	arg01, local01
03a34     6C 26 B0 FD | 	call	#__system___pinread
03a38     15 6F 0A F6 | 	mov	local03, result1 wz
03a3c                 | '   if (check)
03a3c                 | '     rxbyte := rdpin(pin) >> 24
03a3c     00 6C 06 56 |  if_ne	mov	local02, #0
03a40     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03a44     18 6C 46 50 |  if_ne	shr	local02, #24
03a48     36 2B 02 F6 | 	mov	result1, local02
03a4c     AF F0 03 F6 | 	mov	ptra, fp
03a50     BF 00 A0 FD | 	call	#popregs_
03a54                 | _retrocog_spin2_rxcheck_ret
03a54     2D 00 64 FD | 	ret
03a58                 | 
03a58                 | _trackerplayer_spin2_initModule
03a58     3E 5A 05 F6 | 	mov	COUNT_, #62
03a5c     B0 00 A0 FD | 	call	#pushregs_
03a60     24 F1 07 F1 | 	add	ptra, #292
03a64     AF 5C 62 FC | 	wrlong	arg01, fp
03a68     04 5E 05 F1 | 	add	fp, #4
03a6c     AF 5E 62 FC | 	wrlong	arg02, fp
03a70     04 5E 85 F1 | 	sub	fp, #4
03a74     AF 6A 02 FB | 	rdlong	local01, fp
03a78     02 00 00 FF 
03a7c     38 6A 06 F1 | 	add	local01, ##1080
03a80                 | ' 
03a80                 | '   ' Set some data pointers
03a80                 | '   magicFour      := hubPtr + 1080
03a80     9D 0E 06 F1 | 	add	objptr, #157
03a84     07 6B 62 FC | 	wrlong	local01, objptr
03a88                 | '   nameStr        := hubPtr
03a88     AF 6C 02 FB | 	rdlong	local02, fp
03a8c     97 0E 86 F1 | 	sub	objptr, #151
03a90     07 6D 62 FC | 	wrlong	local02, objptr
03a94     AF 6E 02 FB | 	rdlong	local03, fp
03a98     14 6E 06 F1 | 	add	local03, #20
03a9c                 | '   samplesInfoLut := hubPtr + 20
03a9c     04 0E 06 F1 | 	add	objptr, #4
03aa0     07 6F 62 FC | 	wrlong	local03, objptr
03aa4                 | ' 
03aa4                 | '   ' Is this a 31 sample module?
03aa4                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03aa4     93 0E 06 F1 | 	add	objptr, #147
03aa8     07 6D 02 FB | 	rdlong	local02, objptr
03aac     9D 0E 86 F1 | 	sub	objptr, #157
03ab0     36 71 C2 FA | 	rdbyte	local04, local02
03ab4     4D 70 0E F2 | 	cmp	local04, #77 wz
03ab8     48 01 90 5D |  if_ne	jmp	#LR__0134
03abc     9D 0E 06 F1 | 	add	objptr, #157
03ac0     07 73 02 FB | 	rdlong	local05, objptr
03ac4     9D 0E 86 F1 | 	sub	objptr, #157
03ac8     02 72 06 F1 | 	add	local05, #2
03acc     39 75 C2 FA | 	rdbyte	local06, local05
03ad0     4B 74 0E F2 | 	cmp	local06, #75 wz
03ad4     2C 01 90 5D |  if_ne	jmp	#LR__0134
03ad8     AF 76 02 FB | 	rdlong	local07, fp
03adc     01 00 00 FF 
03ae0     B6 77 06 F1 | 	add	local07, ##950
03ae4                 | '     songLength          := byte[hubPtr + 950]
03ae4     3B 6D C2 FA | 	rdbyte	local02, local07
03ae8     9A 0E 06 F1 | 	add	objptr, #154
03aec     07 6D 42 FC | 	wrbyte	local02, objptr
03af0     AF 78 02 FB | 	rdlong	local08, fp
03af4     01 00 00 FF 
03af8     B7 79 06 F1 | 	add	local08, ##951
03afc                 | '     unknown1            := byte[hubPtr + 951]
03afc     3C 6D C2 FA | 	rdbyte	local02, local08
03b00     02 0E 06 F1 | 	add	objptr, #2
03b04     07 6D 42 FC | 	wrbyte	local02, objptr
03b08     AF 7A 02 FB | 	rdlong	local09, fp
03b0c     01 00 00 FF 
03b10     B8 7B 06 F1 | 	add	local09, ##952
03b14                 | '     songPositionsLut    :=      hubPtr + 952
03b14     06 0E 86 F1 | 	sub	objptr, #6
03b18     07 7B 62 FC | 	wrlong	local09, objptr
03b1c     AF 7C 02 FB | 	rdlong	local10, fp
03b20     02 00 00 FF 
03b24     3C 7C 06 F1 | 	add	local10, ##1084
03b28                 | '     patternsData        :=      hubPtr + 1084
03b28     04 0E 86 F1 | 	sub	objptr, #4
03b2c     07 7D 62 FC | 	wrlong	local10, objptr
03b30                 | '     numberOfInstruments := 31
03b30     14 0E 06 F1 | 	add	objptr, #20
03b34     07 3F 48 FC | 	wrbyte	#31, objptr
03b38                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03b38     0B 0E 86 F1 | 	sub	objptr, #11
03b3c     07 01 48 FC | 	wrbyte	#0, objptr
03b40     9B 0E 86 F1 | 	sub	objptr, #155
03b44                 | '     repeat i from 952 to 1079
03b44     08 5E 05 F1 | 	add	fp, #8
03b48     01 00 80 FF 
03b4c     AF 70 6B FC | 	wrlong	##952, fp
03b50     08 5E 85 F1 | 	sub	fp, #8
03b54     18 C5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
03b58     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b5c                 | LR__0131
03b5c                 | '       if byte[hubPtr][i] > numberOfPatterns
03b5c     AF 7E 02 FB | 	rdlong	local11, fp
03b60     08 5E 05 F1 | 	add	fp, #8
03b64     AF 70 02 FB | 	rdlong	local04, fp
03b68     08 5E 85 F1 | 	sub	fp, #8
03b6c     3F 71 02 F1 | 	add	local04, local11
03b70     38 75 C2 FA | 	rdbyte	local06, local04
03b74     9B 0E 06 F1 | 	add	objptr, #155
03b78     07 81 C2 FA | 	rdbyte	local12, objptr
03b7c     9B 0E 86 F1 | 	sub	objptr, #155
03b80     40 75 5A F2 | 	cmps	local06, local12 wcz
03b84     24 00 90 ED |  if_be	jmp	#LR__0132
03b88     AF 7E 02 FB | 	rdlong	local11, fp
03b8c     08 5E 05 F1 | 	add	fp, #8
03b90     AF 82 02 FB | 	rdlong	local13, fp
03b94     08 5E 85 F1 | 	sub	fp, #8
03b98     3F 83 02 F1 | 	add	local13, local11
03b9c                 | '         numberOfPatterns := byte[hubPtr][i]
03b9c     41 85 C2 FA | 	rdbyte	local14, local13
03ba0     9B 0E 06 F1 | 	add	objptr, #155
03ba4     07 85 42 FC | 	wrbyte	local14, objptr
03ba8     9B 0E 86 F1 | 	sub	objptr, #155
03bac                 | LR__0132
03bac     08 5E 05 F1 | 	add	fp, #8
03bb0     AF 84 02 FB | 	rdlong	local14, fp
03bb4     01 84 06 F1 | 	add	local14, #1
03bb8     AF 84 62 FC | 	wrlong	local14, fp
03bbc     08 5E 85 F1 | 	sub	fp, #8
03bc0     02 00 00 FF 
03bc4     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03bc8     90 FF 9F CD |  if_b	jmp	#LR__0131
03bcc                 | LR__0133
03bcc                 | '     numberOfPatterns++
03bcc     9B 0E 06 F1 | 	add	objptr, #155
03bd0     07 85 C2 FA | 	rdbyte	local14, objptr
03bd4     07 71 C2 FA | 	rdbyte	local04, objptr
03bd8     01 70 06 F1 | 	add	local04, #1
03bdc     07 71 42 FC | 	wrbyte	local04, objptr
03be0     07 87 C2 FA | 	rdbyte	local15, objptr
03be4     0A 86 66 F0 | 	shl	local15, #10
03be8     09 0E 86 F1 | 	sub	objptr, #9
03bec     07 89 02 FB | 	rdlong	local16, objptr
03bf0     43 89 02 F1 | 	add	local16, local15
03bf4                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03bf4     84 0E 86 F1 | 	sub	objptr, #132
03bf8     07 89 62 FC | 	wrlong	local16, objptr
03bfc     0E 0E 86 F1 | 	sub	objptr, #14
03c00                 | ' 
03c00                 | '   ' This must be an oldschool 15 sample soundtracker module
03c00                 | '   else
03c00     18 01 90 FD | 	jmp	#LR__0138
03c04                 | LR__0134
03c04     AF 8A 02 FB | 	rdlong	local17, fp
03c08     D6 8B 06 F1 | 	add	local17, #470
03c0c                 | '     songLength          := byte[hubPtr + 470]
03c0c     45 6D C2 FA | 	rdbyte	local02, local17
03c10     9A 0E 06 F1 | 	add	objptr, #154
03c14     07 6D 42 FC | 	wrbyte	local02, objptr
03c18     AF 8C 02 FB | 	rdlong	local18, fp
03c1c     D7 8D 06 F1 | 	add	local18, #471
03c20                 | '     unknown1            := byte[hubPtr + 471]
03c20     46 6D C2 FA | 	rdbyte	local02, local18
03c24     02 0E 06 F1 | 	add	objptr, #2
03c28     07 6D 42 FC | 	wrbyte	local02, objptr
03c2c     AF 8E 02 FB | 	rdlong	local19, fp
03c30     D8 8F 06 F1 | 	add	local19, #472
03c34                 | '     songPositionsLut    :=      hubPtr + 472
03c34     06 0E 86 F1 | 	sub	objptr, #6
03c38     07 8F 62 FC | 	wrlong	local19, objptr
03c3c     AF 90 02 FB | 	rdlong	local20, fp
03c40     01 00 00 FF 
03c44     58 90 06 F1 | 	add	local20, ##600
03c48                 | '     patternsData        :=      hubPtr + 600
03c48     04 0E 86 F1 | 	sub	objptr, #4
03c4c     07 91 62 FC | 	wrlong	local20, objptr
03c50                 | '     numberOfInstruments := 15
03c50     14 0E 06 F1 | 	add	objptr, #20
03c54     07 1F 48 FC | 	wrbyte	#15, objptr
03c58                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c58     0B 0E 86 F1 | 	sub	objptr, #11
03c5c     07 01 48 FC | 	wrbyte	#0, objptr
03c60     9B 0E 86 F1 | 	sub	objptr, #155
03c64                 | '     repeat i from 472 to 599
03c64     08 5E 05 F1 | 	add	fp, #8
03c68     AF B0 6B FC | 	wrlong	#472, fp
03c6c     08 5E 85 F1 | 	sub	fp, #8
03c70     FC C3 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
03c74     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c78                 | LR__0135
03c78                 | '       if byte[hubPtr][i] > numberOfPatterns
03c78     AF 7E 02 FB | 	rdlong	local11, fp
03c7c     08 5E 05 F1 | 	add	fp, #8
03c80     AF 70 02 FB | 	rdlong	local04, fp
03c84     08 5E 85 F1 | 	sub	fp, #8
03c88     3F 71 02 F1 | 	add	local04, local11
03c8c     38 75 C2 FA | 	rdbyte	local06, local04
03c90     9B 0E 06 F1 | 	add	objptr, #155
03c94     07 81 C2 FA | 	rdbyte	local12, objptr
03c98     9B 0E 86 F1 | 	sub	objptr, #155
03c9c     40 75 5A F2 | 	cmps	local06, local12 wcz
03ca0     24 00 90 ED |  if_be	jmp	#LR__0136
03ca4     AF 7E 02 FB | 	rdlong	local11, fp
03ca8     08 5E 05 F1 | 	add	fp, #8
03cac     AF 92 02 FB | 	rdlong	local21, fp
03cb0     08 5E 85 F1 | 	sub	fp, #8
03cb4     3F 93 02 F1 | 	add	local21, local11
03cb8                 | '         numberOfPatterns := byte[hubPtr][i]
03cb8     49 85 C2 FA | 	rdbyte	local14, local21
03cbc     9B 0E 06 F1 | 	add	objptr, #155
03cc0     07 85 42 FC | 	wrbyte	local14, objptr
03cc4     9B 0E 86 F1 | 	sub	objptr, #155
03cc8                 | LR__0136
03cc8     08 5E 05 F1 | 	add	fp, #8
03ccc     AF 84 02 FB | 	rdlong	local14, fp
03cd0     01 84 06 F1 | 	add	local14, #1
03cd4     AF 84 62 FC | 	wrlong	local14, fp
03cd8     08 5E 85 F1 | 	sub	fp, #8
03cdc     01 00 00 FF 
03ce0     58 84 5E F2 | 	cmps	local14, ##600 wcz
03ce4     90 FF 9F CD |  if_b	jmp	#LR__0135
03ce8                 | LR__0137
03ce8                 | '     numberOfPatterns++
03ce8     9B 0E 06 F1 | 	add	objptr, #155
03cec     07 85 C2 FA | 	rdbyte	local14, objptr
03cf0     07 71 C2 FA | 	rdbyte	local04, objptr
03cf4     01 70 06 F1 | 	add	local04, #1
03cf8     07 71 42 FC | 	wrbyte	local04, objptr
03cfc     07 95 C2 FA | 	rdbyte	local22, objptr
03d00     0A 94 66 F0 | 	shl	local22, #10
03d04     09 0E 86 F1 | 	sub	objptr, #9
03d08     07 97 02 FB | 	rdlong	local23, objptr
03d0c     4A 97 02 F1 | 	add	local23, local22
03d10                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d10     84 0E 86 F1 | 	sub	objptr, #132
03d14     07 97 62 FC | 	wrlong	local23, objptr
03d18     0E 0E 86 F1 | 	sub	objptr, #14
03d1c                 | LR__0138
03d1c                 | ' 
03d1c                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03d1c                 | '   tmpPtr := sampleDataPtr
03d1c     0E 0E 06 F1 | 	add	objptr, #14
03d20     07 6D 02 FB | 	rdlong	local02, objptr
03d24     0C 5E 05 F1 | 	add	fp, #12
03d28     AF 6C 62 FC | 	wrlong	local02, fp
03d2c                 | '   repeat i from 1 to numberOfInstruments
03d2c     04 5E 85 F1 | 	sub	fp, #4
03d30     AF 02 68 FC | 	wrlong	#1, fp
03d34     08 5E 85 F1 | 	sub	fp, #8
03d38     98 0E 06 F1 | 	add	objptr, #152
03d3c     07 71 C2 FA | 	rdbyte	local04, objptr
03d40     01 70 5E F2 | 	cmps	local04, #1 wcz
03d44     01 84 06 16 |  if_a	mov	local14, #1
03d48     01 84 66 E6 |  if_be	neg	local14, #1
03d4c     42 99 02 F6 | 	mov	local24, local14
03d50     07 9B C2 FA | 	rdbyte	local25, objptr
03d54     A6 0E 86 F1 | 	sub	objptr, #166
03d58     4C 9B 02 F1 | 	add	local25, local24
03d5c                 | LR__0139
03d5c     08 5E 05 F1 | 	add	fp, #8
03d60     AF 9C 02 FB | 	rdlong	local26, fp
03d64     01 9C 86 F1 | 	sub	local26, #1
03d68     02 9C 66 F0 | 	shl	local26, #2
03d6c     12 0E 06 F1 | 	add	objptr, #18
03d70     07 9D 02 F1 | 	add	local26, objptr
03d74                 | '     samplesPtrLut[i-1] := tmpPtr
03d74     04 5E 05 F1 | 	add	fp, #4
03d78     AF 80 02 FB | 	rdlong	local12, fp
03d7c     4E 81 62 FC | 	wrlong	local12, local26
03d80     18 5E 05 F1 | 	add	fp, #24
03d84     AF 5E 02 F6 | 	mov	arg02, fp
03d88     14 5E 85 F1 | 	sub	fp, #20
03d8c     AF 60 02 F6 | 	mov	arg03, fp
03d90     04 5E 05 F1 | 	add	fp, #4
03d94     AF 62 02 F6 | 	mov	arg04, fp
03d98     04 5E 05 F1 | 	add	fp, #4
03d9c     AF 64 02 F6 | 	mov	arg05, fp
03da0     04 5E 05 F1 | 	add	fp, #4
03da4     AF 66 02 F6 | 	mov	arg06, fp
03da8     04 5E 05 F1 | 	add	fp, #4
03dac     AF 68 02 F6 | 	mov	arg07, fp
03db0                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03db0     18 5E 85 F1 | 	sub	fp, #24
03db4     AF 5C 02 FB | 	rdlong	arg01, fp
03db8     08 5E 85 F1 | 	sub	fp, #8
03dbc     12 0E 86 F1 | 	sub	objptr, #18
03dc0     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03dc4                 | '     tmpPtr += samLength
03dc4     0C 5E 05 F1 | 	add	fp, #12
03dc8     AF 80 02 FB | 	rdlong	local12, fp
03dcc     04 5E 05 F1 | 	add	fp, #4
03dd0     AF 9E 02 FB | 	rdlong	local27, fp
03dd4     4F 81 02 F1 | 	add	local12, local27
03dd8     04 5E 85 F1 | 	sub	fp, #4
03ddc     AF 80 62 FC | 	wrlong	local12, fp
03de0     04 5E 85 F1 | 	sub	fp, #4
03de4     AF 80 02 FB | 	rdlong	local12, fp
03de8     4C 81 02 F1 | 	add	local12, local24
03dec     AF 80 62 FC | 	wrlong	local12, fp
03df0     08 5E 85 F1 | 	sub	fp, #8
03df4     4D 81 0A F2 | 	cmp	local12, local25 wz
03df8     60 FF 9F 5D |  if_ne	jmp	#LR__0139
03dfc                 | ' 
03dfc                 | '   ' Below this point, all play routine variables are resest to their default values
03dfc                 | '   tickCounter                 := 0
03dfc     A1 0E 06 F1 | 	add	objptr, #161
03e00     07 01 48 FC | 	wrbyte	#0, objptr
03e04                 | '   patternRow                  := 0
03e04     01 0E 06 F1 | 	add	objptr, #1
03e08     07 01 48 FC | 	wrbyte	#0, objptr
03e0c                 | '   songPosition                := startPattern
03e0c     04 5E 05 F1 | 	add	fp, #4
03e10     AF 6C 02 FB | 	rdlong	local02, fp
03e14     04 5E 85 F1 | 	sub	fp, #4
03e18     01 0E 06 F1 | 	add	objptr, #1
03e1c     07 6D 42 FC | 	wrbyte	local02, objptr
03e20                 | '   currentSongSpeed            := 6
03e20     01 0E 06 F1 | 	add	objptr, #1
03e24     07 0D 48 FC | 	wrbyte	#6, objptr
03e28                 | '   patternDelay                := 0
03e28     01 0E 06 F1 | 	add	objptr, #1
03e2c     07 01 48 FC | 	wrbyte	#0, objptr
03e30                 | '   ticksPerMinute              := 50 * 60
03e30     02 0F 06 F1 | 	add	objptr, #258
03e34     05 00 80 FF 
03e38     07 71 6B FC | 	wrlong	##3000, objptr
03e3c     A7 0F 86 F1 | 	sub	objptr, #423
03e40     07 0B 03 FB | 	rdlong	muldiva_, objptr
03e44     32 0C 07 F6 | 	mov	muldivb_, #50
03e48     D0 00 A0 FD | 	call	#divide_
03e4c                 | '   cyclesToWait                := systemClock / 50
03e4c     AB 0F 06 F1 | 	add	objptr, #427
03e50     07 0D 63 FC | 	wrlong	muldivb_, objptr
03e54                 | '   sampleNumber_memory         := 0
03e54     35 0E 06 F1 | 	add	objptr, #53
03e58     07 01 48 FC | 	wrbyte	#0, objptr
03e5c                 | '   lpFilter                    := 0
03e5c     25 0E 86 F1 | 	sub	objptr, #37
03e60     07 01 48 FC | 	wrbyte	#0, objptr
03e64                 | '   cmdD_memoryX                := 0
03e64     29 0E 06 F1 | 	add	objptr, #41
03e68     07 01 48 FC | 	wrbyte	#0, objptr
03e6c                 | '   cmdD_memoryY                := 0
03e6c     01 0E 06 F1 | 	add	objptr, #1
03e70     07 01 48 FC | 	wrbyte	#0, objptr
03e74                 | '   cmdD_updatePosition         := false
03e74     01 0E 06 F1 | 	add	objptr, #1
03e78     07 01 48 FC | 	wrbyte	#0, objptr
03e7c                 | '   cmdB_memoryZ                := 0
03e7c     01 0E 06 F1 | 	add	objptr, #1
03e80     07 01 48 FC | 	wrbyte	#0, objptr
03e84                 | '   cmdB_updatePosition         := false
03e84     01 0E 06 F1 | 	add	objptr, #1
03e88     07 01 48 FC | 	wrbyte	#0, objptr
03e8c                 | '   cmdE6_updatePositionCommon  := false
03e8c     0D 0E 06 F1 | 	add	objptr, #13
03e90     07 01 48 FC | 	wrbyte	#0, objptr
03e94     F5 0F 86 F1 | 	sub	objptr, #501
03e98                 | ' 
03e98                 | '   repeat i from 0 to LAST_CHANNEL
03e98     08 5E 05 F1 | 	add	fp, #8
03e9c     AF 00 68 FC | 	wrlong	#0, fp
03ea0     08 5E 85 F1 | 	sub	fp, #8
03ea4                 | LR__0140
03ea4     08 5E 05 F1 | 	add	fp, #8
03ea8     AF A0 02 FB | 	rdlong	local28, fp
03eac     01 A0 66 F0 | 	shl	local28, #1
03eb0     D7 0E 06 F1 | 	add	objptr, #215
03eb4     07 A1 02 F1 | 	add	local28, objptr
03eb8                 | ' 
03eb8                 | '     currRepeatPoint[i]        := 0
03eb8     50 01 58 FC | 	wrword	#0, local28
03ebc     AF A2 02 FB | 	rdlong	local29, fp
03ec0     01 A2 66 F0 | 	shl	local29, #1
03ec4     1C 0E 86 F1 | 	sub	objptr, #28
03ec8     07 A3 02 F1 | 	add	local29, objptr
03ecc                 | '     currSampleLength[i]       := 4
03ecc     51 09 58 FC | 	wrword	#4, local29
03ed0     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03ed4     AF A6 02 FB | 	rdlong	local31, fp
03ed8     02 A6 66 F0 | 	shl	local31, #2
03edc     14 0E 86 F1 | 	sub	objptr, #20
03ee0     07 A7 02 F1 | 	add	local31, objptr
03ee4                 | '     currSamplePtr[i]          := @null
03ee4     53 A5 62 FC | 	wrlong	local30, local31
03ee8     AF A8 02 FB | 	rdlong	local32, fp
03eec     10 0E 06 F1 | 	add	objptr, #16
03ef0     07 A9 02 F1 | 	add	local32, objptr
03ef4                 | '     currSampleNr[i]           := 0
03ef4     54 01 48 FC | 	wrbyte	#0, local32
03ef8     AF AA 02 FB | 	rdlong	local33, fp
03efc     02 AA 66 F0 | 	shl	local33, #2
03f00     0C 0E 06 F1 | 	add	objptr, #12
03f04     07 AB 02 F1 | 	add	local33, objptr
03f08                 | '     currRepeatLength[i]       := 1
03f08     55 03 68 FC | 	wrlong	#1, local33
03f0c     AF AC 02 FB | 	rdlong	local34, fp
03f10     02 AC 66 F0 | 	shl	local34, #2
03f14     1C 0E 06 F1 | 	add	objptr, #28
03f18     07 AD 02 F1 | 	add	local34, objptr
03f1c                 | '     currPeriod[i]             := 400
03f1c     56 21 6B FC | 	wrlong	#400, local34
03f20     AF AE 02 FB | 	rdlong	local35, fp
03f24     02 AE 66 F0 | 	shl	local35, #2
03f28     48 0E 06 F1 | 	add	objptr, #72
03f2c     07 AF 02 F1 | 	add	local35, objptr
03f30                 | '     lastSetPeriod[i]          := 400
03f30     57 21 6B FC | 	wrlong	#400, local35
03f34     AF B0 02 FB | 	rdlong	local36, fp
03f38     02 B0 66 F0 | 	shl	local36, #2
03f3c     10 0E 06 F1 | 	add	objptr, #16
03f40     07 B1 02 F1 | 	add	local36, objptr
03f44                 | '     lastSetSamplePtr[i]       := 0
03f44     58 01 68 FC | 	wrlong	#0, local36
03f48     AF B2 02 FB | 	rdlong	local37, fp
03f4c     02 B2 66 F0 | 	shl	local37, #2
03f50     10 0E 06 F1 | 	add	objptr, #16
03f54     07 B3 02 F1 | 	add	local37, objptr
03f58                 | '     lastSetSampleNr[i]        := 0
03f58     59 01 68 FC | 	wrlong	#0, local37
03f5c     AF B4 02 FB | 	rdlong	local38, fp
03f60     02 B4 66 F0 | 	shl	local38, #2
03f64     10 0E 06 F1 | 	add	objptr, #16
03f68     07 B5 02 F1 | 	add	local38, objptr
03f6c                 | '     lastSetSampleLength[i]    := 0
03f6c     5A 01 68 FC | 	wrlong	#0, local38
03f70     AF B6 02 FB | 	rdlong	local39, fp
03f74     02 B6 66 F0 | 	shl	local39, #2
03f78     10 0E 06 F1 | 	add	objptr, #16
03f7c     07 B7 02 F1 | 	add	local39, objptr
03f80                 | '     lastSetRepeatLength[i]    := 0
03f80     5B 01 68 FC | 	wrlong	#0, local39
03f84     AF B8 02 FB | 	rdlong	local40, fp
03f88     02 B8 66 F0 | 	shl	local40, #2
03f8c     10 0E 06 F1 | 	add	objptr, #16
03f90     07 B9 02 F1 | 	add	local40, objptr
03f94                 | '     lastSetRepeatPoint[i]     := 0
03f94     5C 01 68 FC | 	wrlong	#0, local40
03f98     AF BA 02 FB | 	rdlong	local41, fp
03f9c     02 BA 66 F0 | 	shl	local41, #2
03fa0     78 0E 86 F1 | 	sub	objptr, #120
03fa4     07 BB 02 F1 | 	add	local41, objptr
03fa8                 | '     currVolume[i]             := 0
03fa8     5D 01 68 FC | 	wrlong	#0, local41
03fac     AF BC 02 FB | 	rdlong	local42, fp
03fb0     01 BC 66 F0 | 	shl	local42, #1
03fb4     20 0E 06 F1 | 	add	objptr, #32
03fb8     07 BD 02 F1 | 	add	local42, objptr
03fbc                 | '     currPanning[i]            := 0
03fbc     5E 01 58 FC | 	wrword	#0, local42
03fc0     AF BE 02 FB | 	rdlong	local43, fp
03fc4     A9 0E 06 F1 | 	add	objptr, #169
03fc8     07 BF 02 F1 | 	add	local43, objptr
03fcc                 | '     cmd3_memoryZ[i]           := 0
03fcc     5F 01 48 FC | 	wrbyte	#0, local43
03fd0     AF C0 02 FB | 	rdlong	local44, fp
03fd4     04 0E 06 F1 | 	add	objptr, #4
03fd8     07 C1 02 F1 | 	add	local44, objptr
03fdc                 | '     cmd4_memoryY[i]           := 0
03fdc     60 01 48 FC | 	wrbyte	#0, local44
03fe0     AF C2 02 FB | 	rdlong	local45, fp
03fe4     04 0E 06 F1 | 	add	objptr, #4
03fe8     07 C3 02 F1 | 	add	local45, objptr
03fec                 | '     cmd4_memoryX[i]           := 0
03fec     61 01 48 FC | 	wrbyte	#0, local45
03ff0     AF C4 02 FB | 	rdlong	local46, fp
03ff4     04 0E 06 F1 | 	add	objptr, #4
03ff8     07 C5 02 F1 | 	add	local46, objptr
03ffc                 | '     cmd7_memoryY[i]           := 0
03ffc     62 01 48 FC | 	wrbyte	#0, local46
04000     AF C6 02 FB | 	rdlong	local47, fp
04004     04 0E 06 F1 | 	add	objptr, #4
04008     07 C7 02 F1 | 	add	local47, objptr
0400c                 | '     cmd7_memoryX[i]           := 0
0400c     63 01 48 FC | 	wrbyte	#0, local47
04010     AF C8 02 FB | 	rdlong	local48, fp
04014     04 0E 06 F1 | 	add	objptr, #4
04018     07 C9 02 F1 | 	add	local48, objptr
0401c                 | '     cmd9_memoryZ[i]           := 0
0401c     64 01 48 FC | 	wrbyte	#0, local48
04020     AF CA 02 FB | 	rdlong	local49, fp
04024     0D 0E 06 F1 | 	add	objptr, #13
04028     07 CB 02 F1 | 	add	local49, objptr
0402c                 | '     cmdE6_memory[i]           := 0
0402c     65 01 48 FC | 	wrbyte	#0, local49
04030     AF CC 02 FB | 	rdlong	local50, fp
04034     04 0E 06 F1 | 	add	objptr, #4
04038     07 CD 02 F1 | 	add	local50, objptr
0403c                 | '     cmdE6_counter[i]          := 0
0403c     66 01 48 FC | 	wrbyte	#0, local50
04040     AF CE 02 FB | 	rdlong	local51, fp
04044     04 0E 06 F1 | 	add	objptr, #4
04048     07 CF 02 F1 | 	add	local51, objptr
0404c                 | '     cmdE6_updatePosition[i]   := false
0404c     67 01 48 FC | 	wrbyte	#0, local51
04050     AF D0 02 FB | 	rdlong	local52, fp
04054     11 0E 86 F1 | 	sub	objptr, #17
04058     07 D1 02 F1 | 	add	local52, objptr
0405c                 | '     sampleNumber_memory[i]    := 0
0405c     68 01 48 FC | 	wrbyte	#0, local52
04060     AF D2 02 FB | 	rdlong	local53, fp
04064     59 0E 86 F1 | 	sub	objptr, #89
04068     07 D3 02 F1 | 	add	local53, objptr
0406c                 | '     vibratoPos[i]             := 0
0406c     69 01 48 FC | 	wrbyte	#0, local53
04070     AF D4 02 FB | 	rdlong	local54, fp
04074     02 D4 66 F0 | 	shl	local54, #2
04078     10 0E 06 F1 | 	add	objptr, #16
0407c     07 D5 02 F1 | 	add	local54, objptr
04080                 | '     portamentoPeriodMemory[i] := 0
04080     6A 01 68 FC | 	wrlong	#0, local54
04084     AF D6 02 FB | 	rdlong	local55, fp
04088     25 0E 06 F1 | 	add	objptr, #37
0408c     07 D7 02 F1 | 	add	local55, objptr
04090                 | '     portaGlissando[i]         := 0
04090     6B 01 48 FC | 	wrbyte	#0, local55
04094     AF D8 02 FB | 	rdlong	local56, fp
04098     04 0E 06 F1 | 	add	objptr, #4
0409c     07 D9 02 F1 | 	add	local56, objptr
040a0                 | '     vibratoType[i]            := 0
040a0     6C 01 48 FC | 	wrbyte	#0, local56
040a4     AF DA 02 FB | 	rdlong	local57, fp
040a8     04 0E 06 F1 | 	add	objptr, #4
040ac     07 DB 02 F1 | 	add	local57, objptr
040b0                 | '     tremoloType[i]            := 0
040b0     6D 01 48 FC | 	wrbyte	#0, local57
040b4     AF DC 02 FB | 	rdlong	local58, fp
040b8     39 0E 86 F1 | 	sub	objptr, #57
040bc     07 DD 02 F1 | 	add	local58, objptr
040c0                 | '     tremoloPos[i]             := 0
040c0     6E 01 48 FC | 	wrbyte	#0, local58
040c4     AF DE 02 FB | 	rdlong	local59, fp
040c8     02 DE 66 F0 | 	shl	local59, #2
040cc     7C 0E 86 F1 | 	sub	objptr, #124
040d0     07 DF 02 F1 | 	add	local59, objptr
040d4                 | '     deltaVolume[i]            := 0
040d4     6F 01 68 FC | 	wrlong	#0, local59
040d8     AF E0 02 FB | 	rdlong	local60, fp
040dc     02 E0 66 F0 | 	shl	local60, #2
040e0     20 0E 86 F1 | 	sub	objptr, #32
040e4     07 E1 02 F1 | 	add	local60, objptr
040e8                 | '     deltaPeriod[i]            := 0
040e8     70 01 68 FC | 	wrlong	#0, local60
040ec     AF E2 02 FB | 	rdlong	local61, fp
040f0     A0 0E 06 F1 | 	add	objptr, #160
040f4     07 E3 02 F1 | 	add	local61, objptr
040f8                 | '     resetTremolo[i]           := 0
040f8     71 01 48 FC | 	wrbyte	#0, local61
040fc     AF E4 02 FB | 	rdlong	local62, fp
04100     04 0E 06 F1 | 	add	objptr, #4
04104     07 E5 02 F1 | 	add	local62, objptr
04108                 | '     resetVibrato[i]           := 0
04108     72 01 48 FC | 	wrbyte	#0, local62
0410c     AF 84 02 FB | 	rdlong	local14, fp
04110     01 84 06 F1 | 	add	local14, #1
04114     AF 84 62 FC | 	wrlong	local14, fp
04118     08 5E 85 F1 | 	sub	fp, #8
0411c     04 84 5E F2 | 	cmps	local14, #4 wcz
04120     93 0F 86 F1 | 	sub	objptr, #403
04124     7C FD 9F CD |  if_b	jmp	#LR__0140
04128     AF F0 03 F6 | 	mov	ptra, fp
0412c     BF 00 A0 FD | 	call	#popregs_
04130                 | _trackerplayer_spin2_initModule_ret
04130     2D 00 64 FD | 	ret
04134                 | 
04134                 | ' 
04134                 | ' 
04134                 | ' ' This routine needs to be ticked X number of times per second
04134                 | ' ' in order to advance the tracker play routine
04134                 | ' '
04134                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04134                 | _trackerplayer_spin2_tick
04134     12 5A 05 F6 | 	mov	COUNT_, #18
04138     B0 00 A0 FD | 	call	#pushregs_
0413c     30 F0 07 F1 | 	add	ptra, #48
04140                 | ' 
04140                 | '   if currentSongSpeed == 0
04140     A4 0E 06 F1 | 	add	objptr, #164
04144     07 6B CA FA | 	rdbyte	local01, objptr wz
04148     A4 0E 86 F1 | 	sub	objptr, #164
0414c                 | '     return
0414c     34 03 90 AD |  if_e	jmp	#LR__0152
04150                 | ' 
04150                 | '   ' Iterate over the channels and process everything
04150                 | '   repeat channel from 0 to LAST_CHANNEL
04150     AF 00 68 FC | 	wrlong	#0, fp
04154                 | LR__0141
04154     04 5E 05 F1 | 	add	fp, #4
04158     AF 62 02 F6 | 	mov	arg04, fp
0415c     04 5E 05 F1 | 	add	fp, #4
04160     AF 64 02 F6 | 	mov	arg05, fp
04164     04 5E 05 F1 | 	add	fp, #4
04168     AF 66 02 F6 | 	mov	arg06, fp
0416c     0C 5E 85 F1 | 	sub	fp, #12
04170                 | ' 
04170                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04170     AF 5C 02 FB | 	rdlong	arg01, fp
04174     A3 0E 06 F1 | 	add	objptr, #163
04178     07 5F C2 FA | 	rdbyte	arg02, objptr
0417c     01 0E 86 F1 | 	sub	objptr, #1
04180     07 61 C2 FA | 	rdbyte	arg03, objptr
04184     7F 5E 06 F5 | 	and	arg02, #127
04188     0C 0E 86 F1 | 	sub	objptr, #12
0418c     07 6D 02 FB | 	rdlong	local02, objptr
04190     36 5F 02 F1 | 	add	arg02, local02
04194                 | ' 
04194                 | '   ' Get the note data for a specific channel/song position/pattern row
04194                 | '   patternNumber := byte[songPositionsLut][position & 127]
04194     2F 6F C2 FA | 	rdbyte	local03, arg02
04198     0A 6E 66 F0 | 	shl	local03, #10
0419c     04 0E 86 F1 | 	sub	objptr, #4
041a0     07 71 02 FB | 	rdlong	local04, objptr
041a4     92 0E 86 F1 | 	sub	objptr, #146
041a8     37 71 02 F1 | 	add	local04, local03
041ac                 | '   patternPtr    := patternsData + (patternNumber << 10)
041ac     3F 60 06 F5 | 	and	arg03, #63
041b0     04 60 66 F0 | 	shl	arg03, #4
041b4     30 71 02 F1 | 	add	local04, arg03
041b8     03 5C 06 F5 | 	and	arg01, #3
041bc     02 5C 66 F0 | 	shl	arg01, #2
041c0     2E 71 02 F1 | 	add	local04, arg01
041c4                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
041c4     38 73 C2 FA | 	rdbyte	local05, local04
041c8     18 72 66 F0 | 	shl	local05, #24
041cc     01 70 06 F1 | 	add	local04, #1
041d0     38 75 C2 FA | 	rdbyte	local06, local04
041d4     10 74 66 F0 | 	shl	local06, #16
041d8     3A 73 42 F5 | 	or	local05, local06
041dc     01 70 06 F1 | 	add	local04, #1
041e0     38 77 C2 FA | 	rdbyte	local07, local04
041e4     08 76 66 F0 | 	shl	local07, #8
041e8     3B 73 42 F5 | 	or	local05, local07
041ec     01 70 06 F1 | 	add	local04, #1
041f0     38 79 C2 FA | 	rdbyte	local08, local04
041f4     3C 73 42 F5 | 	or	local05, local08
041f8                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
041f8     39 7B 02 F6 | 	mov	local09, local05
041fc     0C 7A 46 F0 | 	shr	local09, #12
04200     0F 7A 06 F5 | 	and	local09, #15
04204     39 7D 02 F6 | 	mov	local10, local05
04208     18 7C 46 F0 | 	shr	local10, #24
0420c     F0 7C 06 F5 | 	and	local10, #240
04210     3E 7B 42 F5 | 	or	local09, local10
04214                 | ' 
04214                 | '   ' Extract the different sub parts from the data
04214                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04214     31 7B 62 FC | 	wrlong	local09, arg04
04218     39 7F 02 F6 | 	mov	local11, local05
0421c     10 7E 46 F0 | 	shr	local11, #16
04220     07 00 00 FF 
04224     FF 7F 06 F5 | 	and	local11, ##4095
04228                 | '   long[period]       :=  (data >> 16) & $FFF
04228     32 7F 62 FC | 	wrlong	local11, arg05
0422c     07 00 00 FF 
04230     FF 73 06 F5 | 	and	local05, ##4095
04234                 | '   long[effect]       :=   data & $FFF
04234     33 73 62 FC | 	wrlong	local05, arg06
04238                 | '     processChannel(channel, sampleNumber, period, effect)
04238     AF 5C 02 FB | 	rdlong	arg01, fp
0423c     04 5E 05 F1 | 	add	fp, #4
04240     AF 5E 02 FB | 	rdlong	arg02, fp
04244     04 5E 05 F1 | 	add	fp, #4
04248     AF 60 02 FB | 	rdlong	arg03, fp
0424c     04 5E 05 F1 | 	add	fp, #4
04250     AF 62 02 FB | 	rdlong	arg04, fp
04254     0C 5E 85 F1 | 	sub	fp, #12
04258     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
0425c     AF 80 02 FB | 	rdlong	local12, fp
04260     01 80 06 F1 | 	add	local12, #1
04264     AF 80 62 FC | 	wrlong	local12, fp
04268     04 80 5E F2 | 	cmps	local12, #4 wcz
0426c     E4 FE 9F CD |  if_b	jmp	#LR__0141
04270                 | ' 
04270                 | '   ' Incrementation the main counter that drives the whole play routine
04270                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04270     A1 0E 06 F1 | 	add	objptr, #161
04274     07 6B C2 FA | 	rdbyte	local01, objptr
04278     01 6A 06 F1 | 	add	local01, #1
0427c     07 6B 42 FC | 	wrbyte	local01, objptr
04280     03 0E 06 F1 | 	add	objptr, #3
04284     07 83 C2 FA | 	rdbyte	local13, objptr
04288     01 0E 06 F1 | 	add	objptr, #1
0428c     07 85 C2 FA | 	rdbyte	local14, objptr
04290     42 83 02 F1 | 	add	local13, local14
04294     04 0E 86 F1 | 	sub	objptr, #4
04298     07 87 C2 FA | 	rdbyte	local15, objptr
0429c     A1 0E 86 F1 | 	sub	objptr, #161
042a0     41 87 5A F2 | 	cmps	local15, local13 wcz
042a4                 | '     tickCounter := 0
042a4     A1 0E 06 31 |  if_ae	add	objptr, #161
042a8     07 01 48 3C |  if_ae	wrbyte	#0, objptr
042ac     A1 0E 86 31 |  if_ae	sub	objptr, #161
042b0                 | ' 
042b0                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
042b0                 | '   if tickCounter == 0
042b0     A1 0E 06 F1 | 	add	objptr, #161
042b4     07 6B CA FA | 	rdbyte	local01, objptr wz
042b8     A1 0E 86 F1 | 	sub	objptr, #161
042bc     C4 01 90 5D |  if_ne	jmp	#LR__0151
042c0                 | ' 
042c0                 | '     ' Handle the "pattern repeat" command, "E6"
042c0                 | '     if cmdE6_updatePositionCommon
042c0     F5 0F 06 F1 | 	add	objptr, #501
042c4     07 6B CA FA | 	rdbyte	local01, objptr wz
042c8     F5 0F 86 F1 | 	sub	objptr, #501
042cc     8C 00 90 AD |  if_e	jmp	#LR__0145
042d0                 | '       repeat i from 0 to LAST_CHANNEL
042d0     10 5E 05 F1 | 	add	fp, #16
042d4     AF 00 68 FC | 	wrlong	#0, fp
042d8     10 5E 85 F1 | 	sub	fp, #16
042dc     94 BD 9F FE | 	loc	pa,	#(@LR__0144-@LR__0142)
042e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
042e4                 | LR__0142
042e4                 | '         if cmdE6_updatePosition[i]
042e4     10 5E 05 F1 | 	add	fp, #16
042e8     AF 80 02 FB | 	rdlong	local12, fp
042ec     10 5E 85 F1 | 	sub	fp, #16
042f0     F1 0F 06 F1 | 	add	objptr, #497
042f4     07 81 02 F1 | 	add	local12, objptr
042f8     40 85 CA FA | 	rdbyte	local14, local12 wz
042fc     F1 0F 86 F1 | 	sub	objptr, #497
04300     24 00 90 AD |  if_e	jmp	#LR__0143
04304     10 5E 05 F1 | 	add	fp, #16
04308     AF 88 02 FB | 	rdlong	local16, fp
0430c     10 5E 85 F1 | 	sub	fp, #16
04310     E9 0F 06 F1 | 	add	objptr, #489
04314     07 89 02 F1 | 	add	local16, objptr
04318                 | '           patternRow := cmdE6_memory[i]
04318     44 81 C2 FA | 	rdbyte	local12, local16
0431c     47 0F 86 F1 | 	sub	objptr, #327
04320     07 81 42 FC | 	wrbyte	local12, objptr
04324     A2 0E 86 F1 | 	sub	objptr, #162
04328                 | LR__0143
04328     10 5E 05 F1 | 	add	fp, #16
0432c     AF 8A 02 FB | 	rdlong	local17, fp
04330     F1 0F 06 F1 | 	add	objptr, #497
04334     07 8B 02 F1 | 	add	local17, objptr
04338                 | '         cmdE6_updatePosition[i] := false
04338     45 01 48 FC | 	wrbyte	#0, local17
0433c     AF 80 02 FB | 	rdlong	local12, fp
04340     01 80 06 F1 | 	add	local12, #1
04344     AF 80 62 FC | 	wrlong	local12, fp
04348     10 5E 85 F1 | 	sub	fp, #16
0434c     04 80 5E F2 | 	cmps	local12, #4 wcz
04350     F1 0F 86 F1 | 	sub	objptr, #497
04354     8C FF 9F CD |  if_b	jmp	#LR__0142
04358                 | LR__0144
04358     CC 00 90 FD | 	jmp	#LR__0149
0435c                 | LR__0145
0435c                 | ' 
0435c                 | '     ' Handle the "skip to next pattern with offset command", "D"
0435c                 | '     elseif cmdD_updatePosition
0435c     E6 0F 06 F1 | 	add	objptr, #486
04360     07 6B CA FA | 	rdbyte	local01, objptr wz
04364     E6 0F 86 F1 | 	sub	objptr, #486
04368     64 00 90 AD |  if_e	jmp	#LR__0146
0436c                 | '       if ++songPosition >= songLength
0436c     A3 0E 06 F1 | 	add	objptr, #163
04370     07 6B C2 FA | 	rdbyte	local01, objptr
04374     01 6A 06 F1 | 	add	local01, #1
04378     07 6B 42 FC | 	wrbyte	local01, objptr
0437c     07 83 C2 FA | 	rdbyte	local13, objptr
04380     09 0E 86 F1 | 	sub	objptr, #9
04384     07 85 C2 FA | 	rdbyte	local14, objptr
04388     9A 0E 86 F1 | 	sub	objptr, #154
0438c     42 83 5A F2 | 	cmps	local13, local14 wcz
04390                 | '         songPosition := 0
04390     A3 0E 06 31 |  if_ae	add	objptr, #163
04394     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04398     A3 0E 86 31 |  if_ae	sub	objptr, #163
0439c     E4 0F 06 F1 | 	add	objptr, #484
043a0     07 81 C2 FA | 	rdbyte	local12, objptr
043a4     40 8D 02 F6 | 	mov	local18, local12
043a8     02 8C 66 F0 | 	shl	local18, #2
043ac     40 8D 02 F1 | 	add	local18, local12
043b0     01 8C 66 F0 | 	shl	local18, #1
043b4     01 0E 06 F1 | 	add	objptr, #1
043b8     07 81 C2 FA | 	rdbyte	local12, objptr
043bc     40 8D 02 F1 | 	add	local18, local12
043c0                 | ' 
043c0                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
043c0     43 0F 86 F1 | 	sub	objptr, #323
043c4     07 8D 42 FC | 	wrbyte	local18, objptr
043c8     A2 0E 86 F1 | 	sub	objptr, #162
043cc                 | ' 
043cc                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
043cc                 | '     else
043cc     58 00 90 FD | 	jmp	#LR__0148
043d0                 | LR__0146
043d0                 | '       if ++patternRow >= PATTERN_LENGTH
043d0     A2 0E 06 F1 | 	add	objptr, #162
043d4     07 6B C2 FA | 	rdbyte	local01, objptr
043d8     01 6A 06 F1 | 	add	local01, #1
043dc     07 6B 42 FC | 	wrbyte	local01, objptr
043e0     07 83 C2 FA | 	rdbyte	local13, objptr
043e4     A2 0E 86 F1 | 	sub	objptr, #162
043e8     40 82 5E F2 | 	cmps	local13, #64 wcz
043ec     38 00 90 CD |  if_b	jmp	#LR__0147
043f0                 | '         patternRow := 0
043f0     A2 0E 06 F1 | 	add	objptr, #162
043f4     07 01 48 FC | 	wrbyte	#0, objptr
043f8                 | ' 
043f8                 | '         if ++songPosition >= songLength
043f8     01 0E 06 F1 | 	add	objptr, #1
043fc     07 6B C2 FA | 	rdbyte	local01, objptr
04400     01 6A 06 F1 | 	add	local01, #1
04404     07 6B 42 FC | 	wrbyte	local01, objptr
04408     07 83 C2 FA | 	rdbyte	local13, objptr
0440c     09 0E 86 F1 | 	sub	objptr, #9
04410     07 85 C2 FA | 	rdbyte	local14, objptr
04414     9A 0E 86 F1 | 	sub	objptr, #154
04418     42 83 5A F2 | 	cmps	local13, local14 wcz
0441c                 | '           songPosition := 0
0441c     A3 0E 06 31 |  if_ae	add	objptr, #163
04420     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04424     A3 0E 86 31 |  if_ae	sub	objptr, #163
04428                 | LR__0147
04428                 | LR__0148
04428                 | LR__0149
04428                 | ' 
04428                 | '     ' Handle "jump to song position" command, "B"
04428                 | '     if cmdB_updatePosition
04428     E8 0F 06 F1 | 	add	objptr, #488
0442c     07 6B CA FA | 	rdbyte	local01, objptr wz
04430     E8 0F 86 F1 | 	sub	objptr, #488
04434     28 00 90 AD |  if_e	jmp	#LR__0150
04438                 | ' 
04438                 | '       songPosition := cmdB_memoryZ
04438     E7 0F 06 F1 | 	add	objptr, #487
0443c     07 6B C2 FA | 	rdbyte	local01, objptr
04440     44 0F 86 F1 | 	sub	objptr, #324
04444     07 6B 42 FC | 	wrbyte	local01, objptr
04448                 | ' 
04448                 | '       ifnot cmdD_updatePosition
04448     43 0F 06 F1 | 	add	objptr, #323
0444c     07 6B CA FA | 	rdbyte	local01, objptr wz
04450     E6 0F 86 F1 | 	sub	objptr, #486
04454                 | '         patternRow := 0
04454     A2 0E 06 A1 |  if_e	add	objptr, #162
04458     07 01 48 AC |  if_e	wrbyte	#0, objptr
0445c     A2 0E 86 A1 |  if_e	sub	objptr, #162
04460                 | LR__0150
04460                 | ' 
04460                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04460                 | '     cmdE6_updatePositionCommon := false
04460     F5 0F 06 F1 | 	add	objptr, #501
04464     07 01 48 FC | 	wrbyte	#0, objptr
04468                 | '     cmdB_updatePosition := false
04468     0D 0E 86 F1 | 	sub	objptr, #13
0446c     07 01 48 FC | 	wrbyte	#0, objptr
04470                 | '     cmdD_updatePosition := false
04470     02 0E 86 F1 | 	sub	objptr, #2
04474     07 01 48 FC | 	wrbyte	#0, objptr
04478                 | '     patternDelay := 0
04478     41 0F 86 F1 | 	sub	objptr, #321
0447c     07 01 48 FC | 	wrbyte	#0, objptr
04480     A5 0E 86 F1 | 	sub	objptr, #165
04484                 | LR__0151
04484                 | LR__0152
04484     AF F0 03 F6 | 	mov	ptra, fp
04488     BF 00 A0 FD | 	call	#popregs_
0448c                 | _trackerplayer_spin2_tick_ret
0448c     2D 00 64 FD | 	ret
04490                 | 
04490                 | ' 
04490                 | ' 
04490                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04490                 | _trackerplayer_spin2_amigaPeriodToNote
04490                 | ' 
04490                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04490     00 30 06 F6 | 	mov	_var01, #0
04494     B4 BB 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
04498     93 00 A0 FD | 	call	#FCACHE_LOAD_
0449c                 | LR__0153
0449c                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
0449c     06 00 00 FF 
044a0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
044a4     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
044a8     2F 35 02 F6 | 	mov	_var03, arg02
044ac     03 34 66 F0 | 	shl	_var03, #3
044b0     2F 35 02 F1 | 	add	_var03, arg02
044b4     03 34 66 F0 | 	shl	_var03, #3
044b8     1A 33 02 F1 | 	add	_var02, _var03
044bc     18 37 02 F6 | 	mov	_var04, _var01
044c0     01 36 66 F0 | 	shl	_var04, #1
044c4     19 37 02 F1 | 	add	_var04, _var02
044c8     1B 39 E2 FA | 	rdword	_var05, _var04
044cc     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
044d0                 | '       quit
044d0     06 00 00 FF 
044d4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
044d8     0C 00 90 ED |  if_be	jmp	#LR__0155
044dc     01 30 06 F1 | 	add	_var01, #1
044e0     24 30 5E F2 | 	cmps	_var01, #36 wcz
044e4     B4 FF 9F CD |  if_b	jmp	#LR__0153
044e8                 | LR__0154
044e8                 | LR__0155
044e8                 | ' 
044e8                 | '   return i
044e8     18 2B 02 F6 | 	mov	result1, _var01
044ec                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044ec     2D 00 64 FD | 	ret
044f0                 | 
044f0                 | ' 
044f0                 | ' 
044f0                 | ' PRI retunePeriod(period, fTune) | noteNumber
044f0                 | _trackerplayer_spin2_retunePeriod
044f0     06 5A 05 F6 | 	mov	COUNT_, #6
044f4     B0 00 A0 FD | 	call	#pushregs_
044f8     2E 6B 02 F6 | 	mov	local01, arg01
044fc     2F 6D 02 F6 | 	mov	local02, arg02
04500                 | ' 
04500                 | '   if period > 0 and fTune < 16
04500     00 6A 5E F2 | 	cmps	local01, #0 wcz
04504     50 00 90 ED |  if_be	jmp	#LR__0156
04508     10 6C 5E F2 | 	cmps	local02, #16 wcz
0450c     48 00 90 3D |  if_ae	jmp	#LR__0156
04510                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
04510     35 5D E2 FA | 	rdword	arg01, local01
04514     00 5E 06 F6 | 	mov	arg02, #0
04518     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
0451c     15 6F 02 F6 | 	mov	local03, result1
04520     06 00 00 FF 
04524     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04528     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
0452c     36 73 02 F6 | 	mov	local05, local02
04530     03 72 66 F0 | 	shl	local05, #3
04534     36 73 02 F1 | 	add	local05, local02
04538     03 72 66 F0 | 	shl	local05, #3
0453c     39 71 02 F1 | 	add	local04, local05
04540     01 6E 66 F0 | 	shl	local03, #1
04544     38 6F 02 F1 | 	add	local03, local04
04548                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
04548     37 75 E2 FA | 	rdword	local06, local03
0454c     35 75 52 FC | 	wrword	local06, local01
04550     06 00 00 FF 
04554     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04558                 | LR__0156
04558     AF F0 03 F6 | 	mov	ptra, fp
0455c     BF 00 A0 FD | 	call	#popregs_
04560                 | _trackerplayer_spin2_retunePeriod_ret
04560     2D 00 64 FD | 	ret
04564                 | 
04564                 | ' 
04564                 | ' 
04564                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04564                 | _trackerplayer_spin2_getSampleInfo
04564     2E 31 0A F6 | 	mov	_var01, arg01 wz
04568                 | ' 
04568                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04568     08 00 90 AD |  if_e	jmp	#LR__0157
0456c     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04570     08 00 90 ED |  if_be	jmp	#LR__0158
04574                 | LR__0157
04574                 | '     long[samplePtr] := 0
04574     2F 01 68 FC | 	wrlong	#0, arg02
04578                 | '     return
04578     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0457c                 | LR__0158
0457c                 | ' 
0457c                 | '   sampleNumber--
0457c     01 30 86 F1 | 	sub	_var01, #1
04580     18 33 02 F6 | 	mov	_var02, _var01
04584     04 32 66 F0 | 	shl	_var02, #4
04588     18 33 82 F1 | 	sub	_var02, _var01
0458c     01 32 66 F0 | 	shl	_var02, #1
04590     0A 0E 06 F1 | 	add	objptr, #10
04594     07 35 02 FB | 	rdlong	_var03, objptr
04598     19 35 02 F1 | 	add	_var03, _var02
0459c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0459c     1A 37 02 F6 | 	mov	_var04, _var03
045a0     16 36 06 F1 | 	add	_var04, #22
045a4     1B 39 C2 FA | 	rdbyte	_var05, _var04
045a8     08 38 66 F0 | 	shl	_var05, #8
045ac     1A 3B 02 F6 | 	mov	_var06, _var03
045b0     17 3A 06 F1 | 	add	_var06, #23
045b4     1D 3D C2 FA | 	rdbyte	_var07, _var06
045b8     1E 39 42 F5 | 	or	_var05, _var07
045bc     01 38 66 F0 | 	shl	_var05, #1
045c0                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
045c0     30 39 62 FC | 	wrlong	_var05, arg03
045c4     1A 3F 02 F6 | 	mov	_var08, _var03
045c8     18 3E 06 F1 | 	add	_var08, #24
045cc                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
045cc     1F 41 C2 FA | 	rdbyte	_var09, _var08
045d0     31 41 62 FC | 	wrlong	_var09, arg04
045d4     1A 43 02 F6 | 	mov	_var10, _var03
045d8     19 42 06 F1 | 	add	_var10, #25
045dc                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
045dc     21 41 C2 FA | 	rdbyte	_var09, _var10
045e0     32 41 62 FC | 	wrlong	_var09, arg05
045e4     1A 45 02 F6 | 	mov	_var11, _var03
045e8     1A 44 06 F1 | 	add	_var11, #26
045ec     22 47 C2 FA | 	rdbyte	_var12, _var11
045f0     08 46 66 F0 | 	shl	_var12, #8
045f4     1A 49 02 F6 | 	mov	_var13, _var03
045f8     1B 48 06 F1 | 	add	_var13, #27
045fc     24 3D C2 FA | 	rdbyte	_var07, _var13
04600     1E 47 42 F5 | 	or	_var12, _var07
04604     01 46 66 F0 | 	shl	_var12, #1
04608                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04608     33 47 62 FC | 	wrlong	_var12, arg06
0460c     1A 4B 02 F6 | 	mov	_var14, _var03
04610     1C 4A 06 F1 | 	add	_var14, #28
04614     25 4D C2 FA | 	rdbyte	_var15, _var14
04618     08 4C 66 F0 | 	shl	_var15, #8
0461c     1D 34 06 F1 | 	add	_var03, #29
04620     1A 3D C2 FA | 	rdbyte	_var07, _var03
04624     1E 4D 42 F5 | 	or	_var15, _var07
04628     01 4C 66 F0 | 	shl	_var15, #1
0462c                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
0462c     34 4D 62 FC | 	wrlong	_var15, arg07
04630     02 30 66 F0 | 	shl	_var01, #2
04634     08 0E 06 F1 | 	add	objptr, #8
04638     07 31 02 F1 | 	add	_var01, objptr
0463c                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
0463c     18 41 02 FB | 	rdlong	_var09, _var01
04640     2F 41 62 FC | 	wrlong	_var09, arg02
04644                 | ' 
04644                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04644     34 41 02 FB | 	rdlong	_var09, arg07
04648     02 40 0E F2 | 	cmp	_var09, #2 wz
0464c     12 0E 86 F1 | 	sub	objptr, #18
04650     08 00 90 5D |  if_ne	jmp	#LR__0159
04654     33 3D 0A FB | 	rdlong	_var07, arg06 wz
04658                 | '     long[repeatLength] := 1
04658     34 03 68 AC |  if_e	wrlong	#1, arg07
0465c                 | LR__0159
0465c                 | _trackerplayer_spin2_getSampleInfo_ret
0465c     2D 00 64 FD | 	ret
04660                 | 
04660                 | ' 
04660                 | ' 
04660                 | ' PRI triggerNote(channel)
04660                 | _trackerplayer_spin2_triggerNote
04660     2E 31 02 F6 | 	mov	_var01, arg01
04664     02 30 66 F0 | 	shl	_var01, #2
04668     47 0F 06 F1 | 	add	objptr, #327
0466c     07 31 02 F1 | 	add	_var01, objptr
04670     2E 33 02 F6 | 	mov	_var02, arg01
04674     90 0E 86 F1 | 	sub	objptr, #144
04678                 | ' 
04678                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04678     18 35 02 FB | 	rdlong	_var03, _var01
0467c     07 33 02 F1 | 	add	_var02, objptr
04680     19 35 42 FC | 	wrbyte	_var03, _var02
04684     2E 37 02 F6 | 	mov	_var04, arg01
04688     02 36 66 F0 | 	shl	_var04, #2
0468c     80 0E 06 F1 | 	add	objptr, #128
04690     07 37 02 F1 | 	add	_var04, objptr
04694     2E 39 02 F6 | 	mov	_var05, arg01
04698     02 38 66 F0 | 	shl	_var05, #2
0469c     90 0E 86 F1 | 	sub	objptr, #144
046a0                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
046a0     1B 35 02 FB | 	rdlong	_var03, _var04
046a4     07 39 02 F1 | 	add	_var05, objptr
046a8     1C 35 62 FC | 	wrlong	_var03, _var05
046ac     2E 3B 02 F6 | 	mov	_var06, arg01
046b0     02 3A 66 F0 | 	shl	_var06, #2
046b4     80 0E 06 F1 | 	add	objptr, #128
046b8     07 3B 02 F1 | 	add	_var06, objptr
046bc     2E 3D 02 F6 | 	mov	_var07, arg01
046c0     02 3C 66 F0 | 	shl	_var07, #2
046c4     48 0E 86 F1 | 	sub	objptr, #72
046c8                 | '   currPeriod[channel]       := lastSetPeriod[channel]
046c8     1D 35 02 FB | 	rdlong	_var03, _var06
046cc     07 3D 02 F1 | 	add	_var07, objptr
046d0     1E 35 62 FC | 	wrlong	_var03, _var07
046d4     2E 3F 02 F6 | 	mov	_var08, arg01
046d8     02 3E 66 F0 | 	shl	_var08, #2
046dc     78 0E 06 F1 | 	add	objptr, #120
046e0     07 3F 02 F1 | 	add	_var08, objptr
046e4     2E 41 02 F6 | 	mov	_var09, arg01
046e8     01 40 66 F0 | 	shl	_var09, #1
046ec     9C 0E 86 F1 | 	sub	objptr, #156
046f0                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
046f0     1F 35 02 FB | 	rdlong	_var03, _var08
046f4     07 41 02 F1 | 	add	_var09, objptr
046f8     20 35 52 FC | 	wrword	_var03, _var09
046fc     2E 43 02 F6 | 	mov	_var10, arg01
04700     02 42 66 F0 | 	shl	_var10, #2
04704     AC 0E 06 F1 | 	add	objptr, #172
04708     07 43 02 F1 | 	add	_var10, objptr
0470c     2E 45 02 F6 | 	mov	_var11, arg01
04710     02 44 66 F0 | 	shl	_var11, #2
04714     A4 0E 86 F1 | 	sub	objptr, #164
04718                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04718     21 35 02 FB | 	rdlong	_var03, _var10
0471c     07 45 02 F1 | 	add	_var11, objptr
04720     22 35 62 FC | 	wrlong	_var03, _var11
04724     2E 47 02 F6 | 	mov	_var12, arg01
04728     02 46 66 F0 | 	shl	_var12, #2
0472c     B4 0E 06 F1 | 	add	objptr, #180
04730     07 47 02 F1 | 	add	_var12, objptr
04734     2E 49 02 F6 | 	mov	_var13, arg01
04738     01 48 66 F0 | 	shl	_var13, #1
0473c     A0 0E 86 F1 | 	sub	objptr, #160
04740                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04740     23 35 02 FB | 	rdlong	_var03, _var12
04744     07 49 02 F1 | 	add	_var13, objptr
04748     24 35 52 FC | 	wrword	_var03, _var13
0474c     1F 0F 06 F1 | 	add	objptr, #287
04750     07 5D 02 F1 | 	add	arg01, objptr
04754     2E 4B C2 FA | 	rdbyte	_var14, arg01
04758     01 4A 06 F1 | 	add	_var14, #1
0475c                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
0475c     2E 4B 42 FC | 	wrbyte	_var14, arg01
04760     F6 0F 86 F1 | 	sub	objptr, #502
04764                 | _trackerplayer_spin2_triggerNote_ret
04764     2D 00 64 FD | 	ret
04768                 | 
04768                 | ' 
04768                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04768                 | _trackerplayer_spin2_processChannel
04768     31 5A 05 F6 | 	mov	COUNT_, #49
0476c     B0 00 A0 FD | 	call	#pushregs_
04770     D0 F0 07 F1 | 	add	ptra, #208
04774     AF 5C 62 FC | 	wrlong	arg01, fp
04778     04 5E 05 F1 | 	add	fp, #4
0477c     AF 5E 62 FC | 	wrlong	arg02, fp
04780     04 5E 05 F1 | 	add	fp, #4
04784     AF 60 62 FC | 	wrlong	arg03, fp
04788     04 5E 05 F1 | 	add	fp, #4
0478c     AF 62 62 FC | 	wrlong	arg04, fp
04790     0C 5E 85 F1 | 	sub	fp, #12
04794                 | ' 
04794                 | '   channel := channel & 3
04794     AF 6A 02 FB | 	rdlong	local01, fp
04798     03 6A 06 F5 | 	and	local01, #3
0479c     AF 6A 62 FC | 	wrlong	local01, fp
047a0     0C 5E 05 F1 | 	add	fp, #12
047a4     AF 6C 02 FB | 	rdlong	local02, fp
047a8     08 6C 46 F0 | 	shr	local02, #8
047ac     36 6F 02 F6 | 	mov	local03, local02
047b0     0F 6E 06 F5 | 	and	local03, #15
047b4                 | '   cmd     := (effect >> 8) & $F
047b4     BA 0F 06 F1 | 	add	objptr, #442
047b8     07 6F 42 FC | 	wrbyte	local03, objptr
047bc     AF 70 02 FB | 	rdlong	local04, fp
047c0     04 70 46 F0 | 	shr	local04, #4
047c4     38 73 02 F6 | 	mov	local05, local04
047c8     0F 72 06 F5 | 	and	local05, #15
047cc                 | '   x       := (effect >> 4) & $F
047cc     03 0E 86 F1 | 	sub	objptr, #3
047d0     07 73 42 FC | 	wrbyte	local05, objptr
047d4     AF 74 02 FB | 	rdlong	local06, fp
047d8     0F 74 06 F5 | 	and	local06, #15
047dc                 | '   y       := (effect     ) & $F
047dc     01 0E 06 F1 | 	add	objptr, #1
047e0     07 75 42 FC | 	wrbyte	local06, objptr
047e4     AF 76 02 FB | 	rdlong	local07, fp
047e8     0C 5E 85 F1 | 	sub	fp, #12
047ec     FF 76 06 F5 | 	and	local07, #255
047f0                 | '   z       := (effect     ) & $FF
047f0     01 0E 06 F1 | 	add	objptr, #1
047f4     07 77 42 FC | 	wrbyte	local07, objptr
047f8                 | ' 
047f8                 | '   ' Handle everything that executes on "tick zero"
047f8                 | '   if tickCounter == 0
047f8     18 0F 86 F1 | 	sub	objptr, #280
047fc     07 6B CA FA | 	rdbyte	local01, objptr wz
04800     A1 0E 86 F1 | 	sub	objptr, #161
04804     F0 03 90 5D |  if_ne	jmp	#LR__0170
04808     AF 78 02 FB | 	rdlong	local08, fp
0480c     02 78 66 F0 | 	shl	local08, #2
04810     EF 0E 06 F1 | 	add	objptr, #239
04814     07 79 02 F1 | 	add	local08, objptr
04818                 | ' 
04818                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04818                 | '     deltaPeriod[channel] := 0
04818     3C 01 68 FC | 	wrlong	#0, local08
0481c     AF 7A 02 FB | 	rdlong	local09, fp
04820     02 7A 66 F0 | 	shl	local09, #2
04824     20 0E 06 F1 | 	add	objptr, #32
04828     07 7B 02 F1 | 	add	local09, objptr
0482c                 | '     deltaVolume[channel] := 0
0482c     3D 01 68 FC | 	wrlong	#0, local09
04830                 | ' 
04830                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04830                 | '     if sampleNumber > 0
04830     04 5E 05 F1 | 	add	fp, #4
04834     AF 6A 02 FB | 	rdlong	local01, fp
04838     04 5E 85 F1 | 	sub	fp, #4
0483c     00 6A 5E F2 | 	cmps	local01, #0 wcz
04840     0F 0F 86 F1 | 	sub	objptr, #271
04844     20 00 90 ED |  if_be	jmp	#LR__0160
04848     AF 7C 02 FB | 	rdlong	local10, fp
0484c     E0 0F 06 F1 | 	add	objptr, #480
04850     07 7D 02 F1 | 	add	local10, objptr
04854                 | '       sampleNumber_memory[channel] := sampleNumber
04854     04 5E 05 F1 | 	add	fp, #4
04858     AF 6A 02 FB | 	rdlong	local01, fp
0485c     04 5E 85 F1 | 	sub	fp, #4
04860     3E 6B 42 FC | 	wrbyte	local01, local10
04864     E0 0F 86 F1 | 	sub	objptr, #480
04868                 | LR__0160
04868     AF 7E 02 FB | 	rdlong	local11, fp
0486c     E0 0F 06 F1 | 	add	objptr, #480
04870     07 7F 02 F1 | 	add	local11, objptr
04874     20 5E 05 F1 | 	add	fp, #32
04878     AF 80 02 F6 | 	mov	local12, fp
0487c     10 5E 85 F1 | 	sub	fp, #16
04880     AF 82 02 F6 | 	mov	local13, fp
04884     31 0E 86 F1 | 	sub	objptr, #49
04888     07 85 02 F6 | 	mov	local14, objptr
0488c     04 5E 05 F1 | 	add	fp, #4
04890     AF 86 02 F6 | 	mov	local15, fp
04894     04 5E 05 F1 | 	add	fp, #4
04898     AF 88 02 F6 | 	mov	local16, fp
0489c     04 5E 05 F1 | 	add	fp, #4
048a0     AF 8A 02 F6 | 	mov	local17, fp
048a4                 | ' 
048a4                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
048a4                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
048a4     3F 5D C2 FA | 	rdbyte	arg01, local11
048a8     42 63 02 F6 | 	mov	arg04, local14
048ac     43 8D 02 F6 | 	mov	local18, local15
048b0     44 8F 02 F6 | 	mov	local19, local16
048b4     45 91 02 F6 | 	mov	local20, local17
048b8     40 5F 02 F6 | 	mov	arg02, local12
048bc     41 61 02 F6 | 	mov	arg03, local13
048c0     46 65 02 F6 | 	mov	arg05, local18
048c4     47 67 02 F6 | 	mov	arg06, local19
048c8     48 69 02 F6 | 	mov	arg07, local20
048cc     AF 0F 86 F1 | 	sub	objptr, #431
048d0     1C 5E 85 F1 | 	sub	fp, #28
048d4     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
048d8                 | ' 
048d8                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
048d8                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
048d8                 | '     if sampleNumber > 0
048d8     04 5E 05 F1 | 	add	fp, #4
048dc     AF 6A 02 FB | 	rdlong	local01, fp
048e0     04 5E 85 F1 | 	sub	fp, #4
048e4     00 6A 5E F2 | 	cmps	local01, #0 wcz
048e8     24 00 90 ED |  if_be	jmp	#LR__0161
048ec     AF 92 02 FB | 	rdlong	local21, fp
048f0     02 92 66 F0 | 	shl	local21, #2
048f4     FF 0E 06 F1 | 	add	objptr, #255
048f8     07 93 02 F1 | 	add	local21, objptr
048fc                 | '       currVolume[channel] := volume
048fc     14 5E 05 F1 | 	add	fp, #20
04900     AF 6A 02 FB | 	rdlong	local01, fp
04904     14 5E 85 F1 | 	sub	fp, #20
04908     49 6B 62 FC | 	wrlong	local01, local21
0490c     FF 0E 86 F1 | 	sub	objptr, #255
04910                 | LR__0161
04910                 | ' 
04910                 | '     ' Handle all commands that executes on "zero tick"
04910                 | '     sampleOffset := 0
04910     B3 0F 06 F1 | 	add	objptr, #435
04914     07 01 68 FC | 	wrlong	#0, objptr
04918     B3 0F 86 F1 | 	sub	objptr, #435
0491c                 | '     handleZeroTickCommands(channel)
0491c     AF 5C 02 FB | 	rdlong	arg01, fp
04920     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04924                 | ' 
04924                 | '     ' Prepare sample data for triggering (now or later)
04924                 | '     if period > 0
04924     08 5E 05 F1 | 	add	fp, #8
04928     AF 6A 02 FB | 	rdlong	local01, fp
0492c     08 5E 85 F1 | 	sub	fp, #8
04930     00 6A 5E F2 | 	cmps	local01, #0 wcz
04934     C8 02 90 ED |  if_be	jmp	#LR__0171
04938     08 5E 05 F1 | 	add	fp, #8
0493c     AF 94 02 F6 | 	mov	local22, fp
04940                 | ' 
04940                 | '       retunePeriod(@period, fineTune)
04940     AF 0F 06 F1 | 	add	objptr, #431
04944     07 5F 02 FB | 	rdlong	arg02, objptr
04948     AF 0F 86 F1 | 	sub	objptr, #431
0494c     4A 5D 02 F6 | 	mov	arg01, local22
04950     08 5E 85 F1 | 	sub	fp, #8
04954     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04958     AF 96 02 FB | 	rdlong	local23, fp
0495c     D3 0E 06 F1 | 	add	objptr, #211
04960     07 97 02 F1 | 	add	local23, objptr
04964                 | '       currFineTune[channel]        := fineTune
04964     DC 0E 06 F1 | 	add	objptr, #220
04968     07 6B 02 FB | 	rdlong	local01, objptr
0496c     4B 6B 42 FC | 	wrbyte	local01, local23
04970     AF 98 02 FB | 	rdlong	local24, fp
04974     02 98 66 F0 | 	shl	local24, #2
04978     88 0E 86 F1 | 	sub	objptr, #136
0497c     07 99 02 F1 | 	add	local24, objptr
04980                 | '       lastSetPeriod[channel]       := period
04980     08 5E 05 F1 | 	add	fp, #8
04984     AF 6A 02 FB | 	rdlong	local01, fp
04988     4C 6B 62 FC | 	wrlong	local01, local24
0498c     08 5E 85 F1 | 	sub	fp, #8
04990     AF 9A 02 FB | 	rdlong	local25, fp
04994     02 9A 66 F0 | 	shl	local25, #2
04998     40 0E 06 F1 | 	add	objptr, #64
0499c     07 9B 02 F1 | 	add	local25, objptr
049a0                 | '       lastSetRepeatLength[channel] := repeatLength
049a0     1C 5E 05 F1 | 	add	fp, #28
049a4     AF 6A 02 FB | 	rdlong	local01, fp
049a8     4D 6B 62 FC | 	wrlong	local01, local25
049ac     1C 5E 85 F1 | 	sub	fp, #28
049b0     AF 9C 02 FB | 	rdlong	local26, fp
049b4     02 9C 66 F0 | 	shl	local26, #2
049b8     10 0E 06 F1 | 	add	objptr, #16
049bc     07 9D 02 F1 | 	add	local26, objptr
049c0                 | '       lastSetRepeatPoint[channel]  := repeatPoint
049c0     18 5E 05 F1 | 	add	fp, #24
049c4     AF 6A 02 FB | 	rdlong	local01, fp
049c8     4E 6B 62 FC | 	wrlong	local01, local26
049cc     08 5E 05 F1 | 	add	fp, #8
049d0     AF 9E 02 FB | 	rdlong	local27, fp
049d4     20 5E 85 F1 | 	sub	fp, #32
049d8     3C 0E 06 F1 | 	add	objptr, #60
049dc     07 A1 02 FB | 	rdlong	local28, objptr
049e0     50 9F 02 F1 | 	add	local27, local28
049e4     AF A2 02 FB | 	rdlong	local29, fp
049e8     02 A2 66 F0 | 	shl	local29, #2
049ec     7C 0E 86 F1 | 	sub	objptr, #124
049f0     07 A3 02 F1 | 	add	local29, objptr
049f4                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
049f4     51 9F 62 FC | 	wrlong	local27, local29
049f8     AF A4 02 FB | 	rdlong	local30, fp
049fc     02 A4 66 F0 | 	shl	local30, #2
04a00     10 0E 06 F1 | 	add	objptr, #16
04a04     07 A5 02 F1 | 	add	local30, objptr
04a08                 | '       lastSetSampleNr[channel]     := sampleNumber
04a08     04 5E 05 F1 | 	add	fp, #4
04a0c     AF 6A 02 FB | 	rdlong	local01, fp
04a10     52 6B 62 FC | 	wrlong	local01, local30
04a14                 | ' 
04a14                 | '       ' This calculates the correct sample length in all situations
04a14                 | '       if repeatLength > 2
04a14     18 5E 05 F1 | 	add	fp, #24
04a18     AF 6A 02 FB | 	rdlong	local01, fp
04a1c     1C 5E 85 F1 | 	sub	fp, #28
04a20     02 6A 5E F2 | 	cmps	local01, #2 wcz
04a24     47 0F 86 F1 | 	sub	objptr, #327
04a28     20 00 90 ED |  if_be	jmp	#LR__0162
04a2c     18 5E 05 F1 | 	add	fp, #24
04a30     AF A6 02 FB | 	rdlong	local31, fp
04a34     04 5E 05 F1 | 	add	fp, #4
04a38     AF A0 02 FB | 	rdlong	local28, fp
04a3c     50 A7 02 F1 | 	add	local31, local28
04a40                 | '         sampleLength := repeatPoint + repeatLength
04a40     0C 5E 85 F1 | 	sub	fp, #12
04a44     AF A6 62 FC | 	wrlong	local31, fp
04a48     10 5E 85 F1 | 	sub	fp, #16
04a4c                 | LR__0162
04a4c                 | ' 
04a4c                 | '       if sampleLength - sampleOffset < 1
04a4c     10 5E 05 F1 | 	add	fp, #16
04a50     AF 6A 02 FB | 	rdlong	local01, fp
04a54     10 5E 85 F1 | 	sub	fp, #16
04a58     B3 0F 06 F1 | 	add	objptr, #435
04a5c     07 A1 02 FB | 	rdlong	local28, objptr
04a60     B3 0F 86 F1 | 	sub	objptr, #435
04a64     50 6B 82 F1 | 	sub	local01, local28
04a68     01 6A 5E F2 | 	cmps	local01, #1 wcz
04a6c     1C 00 90 3D |  if_ae	jmp	#LR__0163
04a70     AF A8 02 FB | 	rdlong	local32, fp
04a74     02 A8 66 F0 | 	shl	local32, #2
04a78     57 0F 06 F1 | 	add	objptr, #343
04a7c     07 A9 02 F1 | 	add	local32, objptr
04a80                 | '         lastSetSampleLength[channel] := 1
04a80     54 03 68 FC | 	wrlong	#1, local32
04a84                 | '       else
04a84     57 0F 86 F1 | 	sub	objptr, #343
04a88     30 00 90 FD | 	jmp	#LR__0164
04a8c                 | LR__0163
04a8c     10 5E 05 F1 | 	add	fp, #16
04a90     AF AA 02 FB | 	rdlong	local33, fp
04a94     10 5E 85 F1 | 	sub	fp, #16
04a98     B3 0F 06 F1 | 	add	objptr, #435
04a9c     07 A1 02 FB | 	rdlong	local28, objptr
04aa0     50 AB 82 F1 | 	sub	local33, local28
04aa4     AF AC 02 FB | 	rdlong	local34, fp
04aa8     02 AC 66 F0 | 	shl	local34, #2
04aac     5C 0E 86 F1 | 	sub	objptr, #92
04ab0     07 AD 02 F1 | 	add	local34, objptr
04ab4                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04ab4     56 AB 62 FC | 	wrlong	local33, local34
04ab8     57 0F 86 F1 | 	sub	objptr, #343
04abc                 | LR__0164
04abc                 | ' 
04abc                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04abc                 | '       if sampleOffset > sampleLength
04abc     B3 0F 06 F1 | 	add	objptr, #435
04ac0     07 6B 02 FB | 	rdlong	local01, objptr
04ac4     B3 0F 86 F1 | 	sub	objptr, #435
04ac8     10 5E 05 F1 | 	add	fp, #16
04acc     AF A0 02 FB | 	rdlong	local28, fp
04ad0     10 5E 85 F1 | 	sub	fp, #16
04ad4     50 6B 5A F2 | 	cmps	local01, local28 wcz
04ad8     50 00 90 ED |  if_be	jmp	#LR__0165
04adc     20 5E 05 F1 | 	add	fp, #32
04ae0     AF AE 02 FB | 	rdlong	local35, fp
04ae4     08 5E 85 F1 | 	sub	fp, #8
04ae8     AF A0 02 FB | 	rdlong	local28, fp
04aec     18 5E 85 F1 | 	sub	fp, #24
04af0     50 AF 02 F1 | 	add	local35, local28
04af4     AF B0 02 FB | 	rdlong	local36, fp
04af8     02 B0 66 F0 | 	shl	local36, #2
04afc     37 0F 06 F1 | 	add	objptr, #311
04b00     07 B1 02 F1 | 	add	local36, objptr
04b04                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04b04     58 AF 62 FC | 	wrlong	local35, local36
04b08     AF B2 02 FB | 	rdlong	local37, fp
04b0c     02 B2 66 F0 | 	shl	local37, #2
04b10     20 0E 06 F1 | 	add	objptr, #32
04b14     07 B3 02 F1 | 	add	local37, objptr
04b18                 | '         lastSetSampleLength[channel] := repeatLength
04b18     1C 5E 05 F1 | 	add	fp, #28
04b1c     AF 6A 02 FB | 	rdlong	local01, fp
04b20     1C 5E 85 F1 | 	sub	fp, #28
04b24     59 6B 62 FC | 	wrlong	local01, local37
04b28     57 0F 86 F1 | 	sub	objptr, #343
04b2c                 | LR__0165
04b2c                 | ' 
04b2c                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04b2c                 | '       ifnot cmd == $3 || cmd == $5
04b2c     BA 0F 06 F1 | 	add	objptr, #442
04b30     07 6B C2 FA | 	rdbyte	local01, objptr
04b34     BA 0F 86 F1 | 	sub	objptr, #442
04b38     03 6A 0E F2 | 	cmp	local01, #3 wz
04b3c     54 00 90 AD |  if_e	jmp	#LR__0168
04b40     BA 0F 06 F1 | 	add	objptr, #442
04b44     07 B5 C2 FA | 	rdbyte	local38, objptr
04b48     BA 0F 86 F1 | 	sub	objptr, #442
04b4c     5A A1 02 F6 | 	mov	local28, local38
04b50     05 A0 0E F2 | 	cmp	local28, #5 wz
04b54     3C 00 90 AD |  if_e	jmp	#LR__0168
04b58                 | '         ifnot cmd == $E && x == $D
04b58     BA 0F 06 F1 | 	add	objptr, #442
04b5c     07 B7 C2 FA | 	rdbyte	local39, objptr
04b60     BA 0F 86 F1 | 	sub	objptr, #442
04b64     5B 6B 02 F6 | 	mov	local01, local39
04b68     0E 6A 0E F2 | 	cmp	local01, #14 wz
04b6c     18 00 90 5D |  if_ne	jmp	#LR__0166
04b70     B7 0F 06 F1 | 	add	objptr, #439
04b74     07 B5 C2 FA | 	rdbyte	local38, objptr
04b78     B7 0F 86 F1 | 	sub	objptr, #439
04b7c     5A A1 02 F6 | 	mov	local28, local38
04b80     0D A0 0E F2 | 	cmp	local28, #13 wz
04b84     0C 00 90 AD |  if_e	jmp	#LR__0167
04b88                 | LR__0166
04b88                 | '           triggerNote(channel)
04b88     AF 6A 02 FB | 	rdlong	local01, fp
04b8c     35 5D 02 F6 | 	mov	arg01, local01
04b90     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04b94                 | LR__0167
04b94                 | LR__0168
04b94                 | ' 
04b94                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04b94                 | '       if resetTremolo[channel] > 0
04b94     AF 6A 02 FB | 	rdlong	local01, fp
04b98     8F 0F 06 F1 | 	add	objptr, #399
04b9c     07 6B 02 F1 | 	add	local01, objptr
04ba0     35 A1 C2 FA | 	rdbyte	local28, local01
04ba4     00 A0 5E F2 | 	cmps	local28, #0 wcz
04ba8     8F 0F 86 F1 | 	sub	objptr, #399
04bac     14 00 90 ED |  if_be	jmp	#LR__0169
04bb0     AF B8 02 FB | 	rdlong	local40, fp
04bb4     8B 0F 06 F1 | 	add	objptr, #395
04bb8     07 B9 02 F1 | 	add	local40, objptr
04bbc                 | '         tremoloPos[channel] := 0
04bbc     5C 01 48 FC | 	wrbyte	#0, local40
04bc0     8B 0F 86 F1 | 	sub	objptr, #395
04bc4                 | LR__0169
04bc4                 | ' 
04bc4                 | '       if resetVibrato[channel] > 0
04bc4     AF 6A 02 FB | 	rdlong	local01, fp
04bc8     93 0F 06 F1 | 	add	objptr, #403
04bcc     07 6B 02 F1 | 	add	local01, objptr
04bd0     35 A1 C2 FA | 	rdbyte	local28, local01
04bd4     00 A0 5E F2 | 	cmps	local28, #0 wcz
04bd8     93 0F 86 F1 | 	sub	objptr, #403
04bdc     20 00 90 ED |  if_be	jmp	#LR__0171
04be0     AF BA 02 FB | 	rdlong	local41, fp
04be4     87 0F 06 F1 | 	add	objptr, #391
04be8     07 BB 02 F1 | 	add	local41, objptr
04bec                 | '         vibratoPos[channel] := 0
04bec     5D 01 48 FC | 	wrbyte	#0, local41
04bf0     87 0F 86 F1 | 	sub	objptr, #391
04bf4                 | ' 
04bf4                 | '   else
04bf4     08 00 90 FD | 	jmp	#LR__0171
04bf8                 | LR__0170
04bf8                 | '     ' Handle commands that executes on all "non zero ticks"
04bf8                 | '     handleNonZeroTickCommands(channel)
04bf8     AF 5C 02 FB | 	rdlong	arg01, fp
04bfc     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04c00                 | LR__0171
04c00                 | ' 
04c00                 | '   ' Handle commands that executes on every tick
04c00                 | '   handleEveryTickCommands(channel)
04c00     AF 5C 02 FB | 	rdlong	arg01, fp
04c04     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04c08     AF BC 02 FB | 	rdlong	local42, fp
04c0c     02 BC 66 F0 | 	shl	local42, #2
04c10     DF 0E 06 F1 | 	add	objptr, #223
04c14     07 BD 02 F1 | 	add	local42, objptr
04c18     5E BF 02 FB | 	rdlong	local43, local42
04c1c     01 00 00 FF 
04c20     58 BF 66 F3 | 	fles	local43, ##856
04c24                 | ' 
04c24                 | '   ' Handle boundaries that should be kept
04c24                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04c24     5E BF 62 FC | 	wrlong	local43, local42
04c28     AF C0 02 FB | 	rdlong	local44, fp
04c2c     02 C0 66 F0 | 	shl	local44, #2
04c30     07 C1 02 F1 | 	add	local44, objptr
04c34     60 C3 02 FB | 	rdlong	local45, local44
04c38     71 C2 46 F3 | 	fges	local45, #113
04c3c                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04c3c     60 C3 62 FC | 	wrlong	local45, local44
04c40     AF C4 02 FB | 	rdlong	local46, fp
04c44     02 C4 66 F0 | 	shl	local46, #2
04c48     20 0E 06 F1 | 	add	objptr, #32
04c4c     07 C5 02 F1 | 	add	local46, objptr
04c50     62 C7 02 FB | 	rdlong	local47, local46
04c54     40 C6 66 F3 | 	fles	local47, #64
04c58                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04c58     62 C7 62 FC | 	wrlong	local47, local46
04c5c     AF C8 02 FB | 	rdlong	local48, fp
04c60     02 C8 66 F0 | 	shl	local48, #2
04c64     07 C9 02 F1 | 	add	local48, objptr
04c68     64 CB 02 FB | 	rdlong	local49, local48
04c6c     00 CA 46 F3 | 	fges	local49, #0
04c70                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04c70     64 CB 62 FC | 	wrlong	local49, local48
04c74     FF 0E 86 F1 | 	sub	objptr, #255
04c78     AF F0 03 F6 | 	mov	ptra, fp
04c7c     BF 00 A0 FD | 	call	#popregs_
04c80                 | _trackerplayer_spin2_processChannel_ret
04c80     2D 00 64 FD | 	ret
04c84                 | 
04c84                 | ' 
04c84                 | ' 
04c84                 | ' ' Handle all commands that executes on tick zero
04c84                 | ' '
04c84                 | ' PRI handleZeroTickCommands(channel)
04c84                 | _trackerplayer_spin2_handleZeroTickCommands
04c84     2E 31 02 F6 | 	mov	_var01, arg01
04c88                 | ' 
04c88                 | '   CASE_FAST cmd
04c88     BA 0F 06 F1 | 	add	objptr, #442
04c8c     07 33 C2 FA | 	rdbyte	_var02, objptr
04c90     BA 0F 86 F1 | 	sub	objptr, #442
04c94     19 35 02 F6 | 	mov	_var03, _var02
04c98     09 34 86 F1 | 	sub	_var03, #9
04c9c     07 34 26 F3 | 	fle	_var03, #7
04ca0     1A 37 02 F6 | 	mov	_var04, _var03
04ca4     30 36 62 FD | 	jmprel	_var04
04ca8                 | LR__0172
04ca8     1C 00 90 FD | 	jmp	#LR__0173
04cac     30 04 90 FD | 	jmp	#LR__0196
04cb0     64 00 90 FD | 	jmp	#LR__0175
04cb4     84 00 90 FD | 	jmp	#LR__0176
04cb8     A0 00 90 FD | 	jmp	#LR__0177
04cbc     D0 00 90 FD | 	jmp	#LR__0178
04cc0     9C 03 90 FD | 	jmp	#LR__0193
04cc4     18 04 90 FD | 	jmp	#LR__0196
04cc8                 | LR__0173
04cc8                 | ' 
04cc8                 | '     $9:                          ' Set sample offset
04cc8                 | '       if z > 0
04cc8     B9 0F 06 F1 | 	add	objptr, #441
04ccc     07 39 C2 FA | 	rdbyte	_var05, objptr
04cd0     B9 0F 86 F1 | 	sub	objptr, #441
04cd4     00 38 5E F2 | 	cmps	_var05, #0 wcz
04cd8     1C 00 90 ED |  if_be	jmp	#LR__0174
04cdc                 | '         cmd9_memoryZ[channel] := z
04cdc     18 39 02 F6 | 	mov	_var05, _var01
04ce0     DC 0F 06 F1 | 	add	objptr, #476
04ce4     07 39 02 F1 | 	add	_var05, objptr
04ce8     23 0E 86 F1 | 	sub	objptr, #35
04cec     07 3B C2 FA | 	rdbyte	_var06, objptr
04cf0     B9 0F 86 F1 | 	sub	objptr, #441
04cf4     1C 3B 42 FC | 	wrbyte	_var06, _var05
04cf8                 | LR__0174
04cf8                 | ' 
04cf8                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04cf8     DC 0F 06 F1 | 	add	objptr, #476
04cfc     07 31 02 F1 | 	add	_var01, objptr
04d00     18 39 C2 FA | 	rdbyte	_var05, _var01
04d04     08 38 66 F0 | 	shl	_var05, #8
04d08     29 0E 86 F1 | 	sub	objptr, #41
04d0c     07 39 62 FC | 	wrlong	_var05, objptr
04d10     B3 0F 86 F1 | 	sub	objptr, #435
04d14     C8 03 90 FD | 	jmp	#LR__0196
04d18                 | LR__0175
04d18                 | ' 
04d18                 | '     $B:                          ' Jump position
04d18                 | '       cmdB_memoryZ := z
04d18     B9 0F 06 F1 | 	add	objptr, #441
04d1c     07 39 C2 FA | 	rdbyte	_var05, objptr
04d20     2E 0E 06 F1 | 	add	objptr, #46
04d24     07 39 42 FC | 	wrbyte	_var05, objptr
04d28                 | '       cmdB_updatePosition := true
04d28     01 0E 06 F1 | 	add	objptr, #1
04d2c     FF FF FF FF 
04d30     07 FF 4B FC | 	wrbyte	##-1, objptr
04d34     E8 0F 86 F1 | 	sub	objptr, #488
04d38     A4 03 90 FD | 	jmp	#LR__0196
04d3c                 | LR__0176
04d3c                 | ' 
04d3c                 | '     $C:                          ' Set volume
04d3c                 | '       currVolume[channel] := z
04d3c     02 30 66 F0 | 	shl	_var01, #2
04d40     FF 0E 06 F1 | 	add	objptr, #255
04d44     07 31 02 F1 | 	add	_var01, objptr
04d48     BA 0E 06 F1 | 	add	objptr, #186
04d4c     07 3B C2 FA | 	rdbyte	_var06, objptr
04d50     B9 0F 86 F1 | 	sub	objptr, #441
04d54     18 3B 62 FC | 	wrlong	_var06, _var01
04d58     84 03 90 FD | 	jmp	#LR__0196
04d5c                 | LR__0177
04d5c                 | ' 
04d5c                 | '     $D:                          ' Pattern break
04d5c                 | '       cmdD_memoryX := x
04d5c     B7 0F 06 F1 | 	add	objptr, #439
04d60     07 39 C2 FA | 	rdbyte	_var05, objptr
04d64     2D 0E 06 F1 | 	add	objptr, #45
04d68     07 39 42 FC | 	wrbyte	_var05, objptr
04d6c                 | '       cmdD_memoryY := y
04d6c     2C 0E 86 F1 | 	sub	objptr, #44
04d70     07 39 C2 FA | 	rdbyte	_var05, objptr
04d74     2D 0E 06 F1 | 	add	objptr, #45
04d78     07 39 42 FC | 	wrbyte	_var05, objptr
04d7c                 | '       cmdD_updatePosition := true
04d7c     01 0E 06 F1 | 	add	objptr, #1
04d80     FF FF FF FF 
04d84     07 FF 4B FC | 	wrbyte	##-1, objptr
04d88     E6 0F 86 F1 | 	sub	objptr, #486
04d8c     50 03 90 FD | 	jmp	#LR__0196
04d90                 | LR__0178
04d90                 | ' 
04d90                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04d90                 | ' 
04d90                 | '       CASE_FAST x
04d90     B7 0F 06 F1 | 	add	objptr, #439
04d94     07 3D C2 FA | 	rdbyte	_var07, objptr
04d98     B7 0F 86 F1 | 	sub	objptr, #439
04d9c     1E 39 02 F6 | 	mov	_var05, _var07
04da0     0F 38 26 F3 | 	fle	_var05, #15
04da4     1C 3F 02 F6 | 	mov	_var08, _var05
04da8     30 3E 62 FD | 	jmprel	_var08
04dac                 | LR__0179
04dac     3C 00 90 FD | 	jmp	#LR__0180
04db0     58 00 90 FD | 	jmp	#LR__0181
04db4     8C 00 90 FD | 	jmp	#LR__0182
04db8     C0 00 90 FD | 	jmp	#LR__0183
04dbc     DC 00 90 FD | 	jmp	#LR__0184
04dc0     14 01 90 FD | 	jmp	#LR__0185
04dc4     28 01 90 FD | 	jmp	#LR__0186
04dc8     C0 01 90 FD | 	jmp	#LR__0189
04dcc     10 03 90 FD | 	jmp	#LR__0196
04dd0     0C 03 90 FD | 	jmp	#LR__0196
04dd4     F0 01 90 FD | 	jmp	#LR__0190
04dd8     24 02 90 FD | 	jmp	#LR__0191
04ddc     00 03 90 FD | 	jmp	#LR__0196
04de0     FC 02 90 FD | 	jmp	#LR__0196
04de4     50 02 90 FD | 	jmp	#LR__0192
04de8     F4 02 90 FD | 	jmp	#LR__0196
04dec                 | LR__0180
04dec                 | ' 
04dec                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04dec     B8 0F 06 F1 | 	add	objptr, #440
04df0     07 3B C2 FA | 	rdbyte	_var06, objptr
04df4     1D 3B 22 F6 | 	not	_var06, _var06
04df8     01 3A 06 F5 | 	and	_var06, #1
04dfc     03 0E 06 F1 | 	add	objptr, #3
04e00     07 3B 42 FC | 	wrbyte	_var06, objptr
04e04     BB 0F 86 F1 | 	sub	objptr, #443
04e08     D4 02 90 FD | 	jmp	#LR__0196
04e0c                 | LR__0181
04e0c                 | ' 
04e0c                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04e0c     18 41 02 F6 | 	mov	_var09, _var01
04e10     02 40 66 F0 | 	shl	_var09, #2
04e14     DF 0E 06 F1 | 	add	objptr, #223
04e18     07 41 02 F1 | 	add	_var09, objptr
04e1c     20 3B 02 FB | 	rdlong	_var06, _var09
04e20     D9 0E 06 F1 | 	add	objptr, #217
04e24     07 43 C2 FA | 	rdbyte	_var10, objptr
04e28     21 3B 82 F1 | 	sub	_var06, _var10
04e2c     02 30 66 F0 | 	shl	_var01, #2
04e30     D9 0E 86 F1 | 	sub	objptr, #217
04e34     07 31 02 F1 | 	add	_var01, objptr
04e38     18 3B 62 FC | 	wrlong	_var06, _var01
04e3c     DF 0E 86 F1 | 	sub	objptr, #223
04e40     9C 02 90 FD | 	jmp	#LR__0196
04e44                 | LR__0182
04e44                 | ' 
04e44                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04e44     18 41 02 F6 | 	mov	_var09, _var01
04e48     02 40 66 F0 | 	shl	_var09, #2
04e4c     DF 0E 06 F1 | 	add	objptr, #223
04e50     07 41 02 F1 | 	add	_var09, objptr
04e54     20 3B 02 FB | 	rdlong	_var06, _var09
04e58     D9 0E 06 F1 | 	add	objptr, #217
04e5c     07 43 C2 FA | 	rdbyte	_var10, objptr
04e60     21 3B 02 F1 | 	add	_var06, _var10
04e64     02 30 66 F0 | 	shl	_var01, #2
04e68     D9 0E 86 F1 | 	sub	objptr, #217
04e6c     07 31 02 F1 | 	add	_var01, objptr
04e70     18 3B 62 FC | 	wrlong	_var06, _var01
04e74     DF 0E 86 F1 | 	sub	objptr, #223
04e78     64 02 90 FD | 	jmp	#LR__0196
04e7c                 | LR__0183
04e7c                 | ' 
04e7c                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04e7c     B8 0F 06 F1 | 	add	objptr, #440
04e80     07 3B C2 FA | 	rdbyte	_var06, objptr
04e84     01 3A 06 F5 | 	and	_var06, #1
04e88     04 0E 06 F1 | 	add	objptr, #4
04e8c     07 31 02 F1 | 	add	_var01, objptr
04e90     18 3B 42 FC | 	wrbyte	_var06, _var01
04e94     BC 0F 86 F1 | 	sub	objptr, #444
04e98     44 02 90 FD | 	jmp	#LR__0196
04e9c                 | LR__0184
04e9c                 | ' 
04e9c                 | '         $4:                                      ' Set vibrato waveform type
04e9c                 | '           vibratoType[channel]  := y & 3
04e9c     B8 0F 06 F1 | 	add	objptr, #440
04ea0     07 3B C2 FA | 	rdbyte	_var06, objptr
04ea4     03 3A 06 F5 | 	and	_var06, #3
04ea8     18 45 02 F6 | 	mov	_var11, _var01
04eac     08 0E 06 F1 | 	add	objptr, #8
04eb0     07 45 02 F1 | 	add	_var11, objptr
04eb4     22 3B 42 FC | 	wrbyte	_var06, _var11
04eb8                 | '           resetVibrato[channel] := y & 4
04eb8     08 0E 86 F1 | 	sub	objptr, #8
04ebc     07 3B C2 FA | 	rdbyte	_var06, objptr
04ec0     04 3A 06 F5 | 	and	_var06, #4
04ec4     25 0E 86 F1 | 	sub	objptr, #37
04ec8     07 31 02 F1 | 	add	_var01, objptr
04ecc     18 3B 42 FC | 	wrbyte	_var06, _var01
04ed0     93 0F 86 F1 | 	sub	objptr, #403
04ed4     08 02 90 FD | 	jmp	#LR__0196
04ed8                 | LR__0185
04ed8                 | ' 
04ed8                 | '         $5: fineTune := y                        ' Set finetune
04ed8     B8 0F 06 F1 | 	add	objptr, #440
04edc     07 3B C2 FA | 	rdbyte	_var06, objptr
04ee0     09 0E 86 F1 | 	sub	objptr, #9
04ee4     07 3B 62 FC | 	wrlong	_var06, objptr
04ee8     AF 0F 86 F1 | 	sub	objptr, #431
04eec     F0 01 90 FD | 	jmp	#LR__0196
04ef0                 | LR__0186
04ef0                 | ' 
04ef0                 | '         $6:                                      ' Pattern looping
04ef0                 | '           if y == 0
04ef0     B8 0F 06 F1 | 	add	objptr, #440
04ef4     07 3B CA FA | 	rdbyte	_var06, objptr wz
04ef8     B8 0F 86 F1 | 	sub	objptr, #440
04efc     1C 00 90 5D |  if_ne	jmp	#LR__0187
04f00                 | '             cmdE6_memory[channel] := patternRow
04f00     E9 0F 06 F1 | 	add	objptr, #489
04f04     07 31 02 F1 | 	add	_var01, objptr
04f08     47 0F 86 F1 | 	sub	objptr, #327
04f0c     07 45 C2 FA | 	rdbyte	_var11, objptr
04f10     A2 0E 86 F1 | 	sub	objptr, #162
04f14     18 45 42 FC | 	wrbyte	_var11, _var01
04f18                 | '           else
04f18     C4 01 90 FD | 	jmp	#LR__0196
04f1c                 | LR__0187
04f1c                 | '             if ++cmdE6_counter[channel] <= y
04f1c     18 41 02 F6 | 	mov	_var09, _var01
04f20     ED 0F 06 F1 | 	add	objptr, #493
04f24     07 41 02 F1 | 	add	_var09, objptr
04f28     20 3B C2 FA | 	rdbyte	_var06, _var09
04f2c     01 3A 06 F1 | 	add	_var06, #1
04f30     18 43 02 F6 | 	mov	_var10, _var01
04f34     07 43 02 F1 | 	add	_var10, objptr
04f38     21 3B 42 FC | 	wrbyte	_var06, _var10
04f3c     21 47 C2 FA | 	rdbyte	_var12, _var10
04f40     35 0E 86 F1 | 	sub	objptr, #53
04f44     07 49 C2 FA | 	rdbyte	_var13, objptr
04f48     B8 0F 86 F1 | 	sub	objptr, #440
04f4c     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04f50     24 00 90 1D |  if_a	jmp	#LR__0188
04f54                 | '               cmdE6_updatePosition[channel] := true
04f54     F1 0F 06 F1 | 	add	objptr, #497
04f58     07 31 02 F1 | 	add	_var01, objptr
04f5c     FF FF FF FF 
04f60     18 FF 4B FC | 	wrbyte	##-1, _var01
04f64                 | '               cmdE6_updatePositionCommon    := true
04f64     04 0E 06 F1 | 	add	objptr, #4
04f68     FF FF FF FF 
04f6c     07 FF 4B FC | 	wrbyte	##-1, objptr
04f70     F5 0F 86 F1 | 	sub	objptr, #501
04f74                 | '             else
04f74     68 01 90 FD | 	jmp	#LR__0196
04f78                 | LR__0188
04f78                 | '               cmdE6_counter[channel] := 0
04f78     ED 0F 06 F1 | 	add	objptr, #493
04f7c     07 31 02 F1 | 	add	_var01, objptr
04f80     18 01 48 FC | 	wrbyte	#0, _var01
04f84     ED 0F 86 F1 | 	sub	objptr, #493
04f88     54 01 90 FD | 	jmp	#LR__0196
04f8c                 | LR__0189
04f8c                 | ' 
04f8c                 | '         $7:                                      ' Set tremolo waveform type
04f8c                 | '           tremoloType[channel] := y & 3
04f8c     B8 0F 06 F1 | 	add	objptr, #440
04f90     07 3B C2 FA | 	rdbyte	_var06, objptr
04f94     03 3A 06 F5 | 	and	_var06, #3
04f98     18 45 02 F6 | 	mov	_var11, _var01
04f9c     0C 0E 06 F1 | 	add	objptr, #12
04fa0     07 45 02 F1 | 	add	_var11, objptr
04fa4     22 3B 42 FC | 	wrbyte	_var06, _var11
04fa8                 | '           resetTremolo[channel] := y & 4
04fa8     0C 0E 86 F1 | 	sub	objptr, #12
04fac     07 3B C2 FA | 	rdbyte	_var06, objptr
04fb0     04 3A 06 F5 | 	and	_var06, #4
04fb4     29 0E 86 F1 | 	sub	objptr, #41
04fb8     07 31 02 F1 | 	add	_var01, objptr
04fbc     18 3B 42 FC | 	wrbyte	_var06, _var01
04fc0     8F 0F 86 F1 | 	sub	objptr, #399
04fc4     18 01 90 FD | 	jmp	#LR__0196
04fc8                 | LR__0190
04fc8                 | ' 
04fc8                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
04fc8     18 41 02 F6 | 	mov	_var09, _var01
04fcc     02 40 66 F0 | 	shl	_var09, #2
04fd0     FF 0E 06 F1 | 	add	objptr, #255
04fd4     07 41 02 F1 | 	add	_var09, objptr
04fd8     20 3B 02 FB | 	rdlong	_var06, _var09
04fdc     B9 0E 06 F1 | 	add	objptr, #185
04fe0     07 43 C2 FA | 	rdbyte	_var10, objptr
04fe4     21 3B 02 F1 | 	add	_var06, _var10
04fe8     02 30 66 F0 | 	shl	_var01, #2
04fec     B9 0E 86 F1 | 	sub	objptr, #185
04ff0     07 31 02 F1 | 	add	_var01, objptr
04ff4     18 3B 62 FC | 	wrlong	_var06, _var01
04ff8     FF 0E 86 F1 | 	sub	objptr, #255
04ffc     E0 00 90 FD | 	jmp	#LR__0196
05000                 | LR__0191
05000                 | ' 
05000                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05000     18 41 02 F6 | 	mov	_var09, _var01
05004     02 40 66 F0 | 	shl	_var09, #2
05008     FF 0E 06 F1 | 	add	objptr, #255
0500c     07 41 02 F1 | 	add	_var09, objptr
05010     20 3B 02 FB | 	rdlong	_var06, _var09
05014     B9 0E 06 F1 | 	add	objptr, #185
05018     07 43 C2 FA | 	rdbyte	_var10, objptr
0501c     21 3B 82 F1 | 	sub	_var06, _var10
05020     02 30 66 F0 | 	shl	_var01, #2
05024     B9 0E 86 F1 | 	sub	objptr, #185
05028     07 31 02 F1 | 	add	_var01, objptr
0502c     18 3B 62 FC | 	wrlong	_var06, _var01
05030     FF 0E 86 F1 | 	sub	objptr, #255
05034     A8 00 90 FD | 	jmp	#LR__0196
05038                 | LR__0192
05038                 | ' 
05038                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05038     B8 0F 06 F1 | 	add	objptr, #440
0503c     07 41 C2 FA | 	rdbyte	_var09, objptr
05040     14 0F 86 F1 | 	sub	objptr, #276
05044     07 43 C2 FA | 	rdbyte	_var10, objptr
05048     21 41 02 FD | 	qmul	_var09, _var10
0504c     18 3A 62 FD | 	getqx	_var06
05050     01 0E 06 F1 | 	add	objptr, #1
05054     07 3B 42 FC | 	wrbyte	_var06, objptr
05058     A5 0E 86 F1 | 	sub	objptr, #165
0505c     80 00 90 FD | 	jmp	#LR__0196
05060                 | LR__0193
05060                 | ' 
05060                 | '     $F:                          ' Set speed
05060                 | '       if z < 32
05060     B9 0F 06 F1 | 	add	objptr, #441
05064     07 39 C2 FA | 	rdbyte	_var05, objptr
05068     B9 0F 86 F1 | 	sub	objptr, #441
0506c     20 38 5E F2 | 	cmps	_var05, #32 wcz
05070     18 00 90 3D |  if_ae	jmp	#LR__0194
05074                 | '         currentSongSpeed := z
05074     B9 0F 06 F1 | 	add	objptr, #441
05078     07 39 C2 FA | 	rdbyte	_var05, objptr
0507c     15 0F 86 F1 | 	sub	objptr, #277
05080     07 39 42 FC | 	wrbyte	_var05, objptr
05084     A4 0E 86 F1 | 	sub	objptr, #164
05088                 | '       else
05088     54 00 90 FD | 	jmp	#LR__0195
0508c                 | LR__0194
0508c                 | '         ticksPerMinute := z * 24
0508c     B9 0F 06 F1 | 	add	objptr, #441
05090     07 3D C2 FA | 	rdbyte	_var07, objptr
05094     1E 39 02 F6 | 	mov	_var05, _var07
05098     01 38 66 F0 | 	shl	_var05, #1
0509c     1E 39 02 F1 | 	add	_var05, _var07
050a0     03 38 66 F0 | 	shl	_var05, #3
050a4     12 0E 86 F1 | 	sub	objptr, #18
050a8     07 39 62 FC | 	wrlong	_var05, objptr
050ac     A7 0F 86 F1 | 	sub	objptr, #423
050b0                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
050b0     07 0B 03 FB | 	rdlong	muldiva_, objptr
050b4     A7 0F 06 F1 | 	add	objptr, #423
050b8     07 0D 03 FB | 	rdlong	muldivb_, objptr
050bc     A7 0F 86 F1 | 	sub	objptr, #423
050c0     D0 00 A0 FD | 	call	#divide_
050c4     86 3B 02 F6 | 	mov	_var06, muldivb_
050c8     04 3A 66 F0 | 	shl	_var06, #4
050cc     86 3B 82 F1 | 	sub	_var06, muldivb_
050d0     02 3A 66 F0 | 	shl	_var06, #2
050d4     AB 0F 06 F1 | 	add	objptr, #427
050d8     07 3B 62 FC | 	wrlong	_var06, objptr
050dc     AB 0F 86 F1 | 	sub	objptr, #427
050e0                 | LR__0195
050e0                 | LR__0196
050e0                 | _trackerplayer_spin2_handleZeroTickCommands_ret
050e0     2D 00 64 FD | 	ret
050e4                 | 
050e4                 | ' 
050e4                 | ' 
050e4                 | ' ' Handle all commands that executes on "non zero ticks"
050e4                 | ' '
050e4                 | ' PRI handleNonZeroTickCommands(channel)
050e4                 | _trackerplayer_spin2_handleNonZeroTickCommands
050e4     0A 5A 05 F6 | 	mov	COUNT_, #10
050e8     B0 00 A0 FD | 	call	#pushregs_
050ec     2E 6B 02 F6 | 	mov	local01, arg01
050f0                 | ' 
050f0                 | '   CASE_FAST cmd
050f0     BA 0F 06 F1 | 	add	objptr, #442
050f4     07 6D C2 FA | 	rdbyte	local02, objptr
050f8     BA 0F 86 F1 | 	sub	objptr, #442
050fc     36 6F 02 F6 | 	mov	local03, local02
05100     01 6E 86 F1 | 	sub	local03, #1
05104     0E 6E 26 F3 | 	fle	local03, #14
05108     37 71 02 F6 | 	mov	local04, local03
0510c     30 70 62 FD | 	jmprel	local04
05110                 | LR__0197
05110     38 00 90 FD | 	jmp	#LR__0198
05114     A0 00 90 FD | 	jmp	#LR__0199
05118     D4 00 90 FD | 	jmp	#LR__0200
0511c     1C 02 90 FD | 	jmp	#LR__0210
05120     20 01 90 FD | 	jmp	#LR__0202
05124     48 01 90 FD | 	jmp	#LR__0203
05128     50 01 90 FD | 	jmp	#LR__0204
0512c     0C 02 90 FD | 	jmp	#LR__0210
05130     08 02 90 FD | 	jmp	#LR__0210
05134     B0 01 90 FD | 	jmp	#LR__0207
05138     00 02 90 FD | 	jmp	#LR__0210
0513c     FC 01 90 FD | 	jmp	#LR__0210
05140     F8 01 90 FD | 	jmp	#LR__0210
05144     AC 01 90 FD | 	jmp	#LR__0208
05148     F0 01 90 FD | 	jmp	#LR__0210
0514c                 | LR__0198
0514c                 | ' 
0514c                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
0514c     35 73 02 F6 | 	mov	local05, local01
05150     02 72 66 F0 | 	shl	local05, #2
05154     DF 0E 06 F1 | 	add	objptr, #223
05158     07 73 02 F1 | 	add	local05, objptr
0515c     39 75 02 FB | 	rdlong	local06, local05
05160     DA 0E 06 F1 | 	add	objptr, #218
05164     07 77 C2 FA | 	rdbyte	local07, objptr
05168     3B 75 82 F1 | 	sub	local06, local07
0516c     35 79 02 F6 | 	mov	local08, local01
05170     02 78 66 F0 | 	shl	local08, #2
05174     DA 0E 86 F1 | 	sub	objptr, #218
05178     07 79 02 F1 | 	add	local08, objptr
0517c     3C 75 62 FC | 	wrlong	local06, local08
05180                 | ' 
05180                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05180                 | '       if currPeriod[channel] < 0
05180     35 75 02 F6 | 	mov	local06, local01
05184     02 74 66 F0 | 	shl	local06, #2
05188     07 75 02 F1 | 	add	local06, objptr
0518c     3A 7B 02 FB | 	rdlong	local09, local06
05190     00 7A 5E F2 | 	cmps	local09, #0 wcz
05194     DF 0E 86 F1 | 	sub	objptr, #223
05198     A0 01 90 3D |  if_ae	jmp	#LR__0210
0519c                 | '         currPeriod[channel] := MAXIMUM_PERIOD
0519c     02 6A 66 F0 | 	shl	local01, #2
051a0     DF 0E 06 F1 | 	add	objptr, #223
051a4     07 6B 02 F1 | 	add	local01, objptr
051a8     01 00 80 FF 
051ac     35 B1 6A FC | 	wrlong	##856, local01
051b0     DF 0E 86 F1 | 	sub	objptr, #223
051b4     84 01 90 FD | 	jmp	#LR__0210
051b8                 | LR__0199
051b8                 | ' 
051b8                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
051b8     35 73 02 F6 | 	mov	local05, local01
051bc     02 72 66 F0 | 	shl	local05, #2
051c0     DF 0E 06 F1 | 	add	objptr, #223
051c4     07 73 02 F1 | 	add	local05, objptr
051c8     39 75 02 FB | 	rdlong	local06, local05
051cc     DA 0E 06 F1 | 	add	objptr, #218
051d0     07 77 C2 FA | 	rdbyte	local07, objptr
051d4     3B 75 02 F1 | 	add	local06, local07
051d8     02 6A 66 F0 | 	shl	local01, #2
051dc     DA 0E 86 F1 | 	sub	objptr, #218
051e0     07 6B 02 F1 | 	add	local01, objptr
051e4     35 75 62 FC | 	wrlong	local06, local01
051e8     DF 0E 86 F1 | 	sub	objptr, #223
051ec     4C 01 90 FD | 	jmp	#LR__0210
051f0                 | LR__0200
051f0                 | ' 
051f0                 | '     $3:                                 ' Slide to note (portamento)
051f0                 | '       if z > 0
051f0     B9 0F 06 F1 | 	add	objptr, #441
051f4     07 75 C2 FA | 	rdbyte	local06, objptr
051f8     B9 0F 86 F1 | 	sub	objptr, #441
051fc     00 74 5E F2 | 	cmps	local06, #0 wcz
05200     1C 00 90 ED |  if_be	jmp	#LR__0201
05204                 | '         cmd3_memoryZ[channel] := z
05204     35 75 02 F6 | 	mov	local06, local01
05208     C8 0F 06 F1 | 	add	objptr, #456
0520c     07 75 02 F1 | 	add	local06, objptr
05210     0F 0E 86 F1 | 	sub	objptr, #15
05214     07 7B C2 FA | 	rdbyte	local09, objptr
05218     B9 0F 86 F1 | 	sub	objptr, #441
0521c     3A 7B 42 FC | 	wrbyte	local09, local06
05220                 | LR__0201
05220                 | ' 
05220                 | '       doPortamento(channel, lastSetPeriod[channel])
05220     35 73 02 F6 | 	mov	local05, local01
05224     02 72 66 F0 | 	shl	local05, #2
05228     27 0F 06 F1 | 	add	objptr, #295
0522c     07 73 02 F1 | 	add	local05, objptr
05230     39 5F 02 FB | 	rdlong	arg02, local05
05234     35 5D 02 F6 | 	mov	arg01, local01
05238     27 0F 86 F1 | 	sub	objptr, #295
0523c     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05240     F8 00 90 FD | 	jmp	#LR__0210
05244                 | LR__0202
05244                 | ' 
05244                 | '     $5:                                 ' Volume slide + portamento
05244                 | '       doVolumeSlide(channel)
05244     35 5D 02 F6 | 	mov	arg01, local01
05248     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0524c                 | '       doPortamento(channel, lastSetPeriod[channel])
0524c     35 73 02 F6 | 	mov	local05, local01
05250     02 72 66 F0 | 	shl	local05, #2
05254     27 0F 06 F1 | 	add	objptr, #295
05258     07 73 02 F1 | 	add	local05, objptr
0525c     39 5F 02 FB | 	rdlong	arg02, local05
05260     35 5D 02 F6 | 	mov	arg01, local01
05264     27 0F 86 F1 | 	sub	objptr, #295
05268     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0526c     CC 00 90 FD | 	jmp	#LR__0210
05270                 | LR__0203
05270                 | ' 
05270                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05270     35 5D 02 F6 | 	mov	arg01, local01
05274     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05278     C0 00 90 FD | 	jmp	#LR__0210
0527c                 | LR__0204
0527c                 | ' 
0527c                 | '     $7:                                 ' Tremolo
0527c                 | '       if x > 0
0527c     B7 0F 06 F1 | 	add	objptr, #439
05280     07 75 C2 FA | 	rdbyte	local06, objptr
05284     B7 0F 86 F1 | 	sub	objptr, #439
05288     00 74 5E F2 | 	cmps	local06, #0 wcz
0528c     1C 00 90 ED |  if_be	jmp	#LR__0205
05290                 | '         cmd7_memoryX[channel] := x
05290     35 75 02 F6 | 	mov	local06, local01
05294     D8 0F 06 F1 | 	add	objptr, #472
05298     07 75 02 F1 | 	add	local06, objptr
0529c     21 0E 86 F1 | 	sub	objptr, #33
052a0     07 7B C2 FA | 	rdbyte	local09, objptr
052a4     B7 0F 86 F1 | 	sub	objptr, #439
052a8     3A 7B 42 FC | 	wrbyte	local09, local06
052ac                 | LR__0205
052ac                 | '       if y > 0
052ac     B8 0F 06 F1 | 	add	objptr, #440
052b0     07 75 C2 FA | 	rdbyte	local06, objptr
052b4     B8 0F 86 F1 | 	sub	objptr, #440
052b8     00 74 5E F2 | 	cmps	local06, #0 wcz
052bc     1C 00 90 ED |  if_be	jmp	#LR__0206
052c0                 | '         cmd7_memoryY[channel] := y
052c0     35 75 02 F6 | 	mov	local06, local01
052c4     D4 0F 06 F1 | 	add	objptr, #468
052c8     07 75 02 F1 | 	add	local06, objptr
052cc     1C 0E 86 F1 | 	sub	objptr, #28
052d0     07 7B C2 FA | 	rdbyte	local09, objptr
052d4     B8 0F 86 F1 | 	sub	objptr, #440
052d8     3A 7B 42 FC | 	wrbyte	local09, local06
052dc                 | LR__0206
052dc                 | ' 
052dc                 | '       doTremolo(channel)
052dc     35 5D 02 F6 | 	mov	arg01, local01
052e0     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
052e4     54 00 90 FD | 	jmp	#LR__0210
052e8                 | LR__0207
052e8                 | ' 
052e8                 | '     $A: doVolumeSlide(channel)          ' Volume slide
052e8     35 5D 02 F6 | 	mov	arg01, local01
052ec     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052f0     48 00 90 FD | 	jmp	#LR__0210
052f4                 | LR__0208
052f4                 | ' 
052f4                 | '     $E:                                 ' Retrig every Y ticks
052f4                 | '       if (x == $9) && ((tickcounter // y) == 0)
052f4     B7 0F 06 F1 | 	add	objptr, #439
052f8     07 73 C2 FA | 	rdbyte	local05, objptr
052fc     B7 0F 86 F1 | 	sub	objptr, #439
05300     09 72 0E F2 | 	cmp	local05, #9 wz
05304     34 00 90 5D |  if_ne	jmp	#LR__0209
05308     A1 0E 06 F1 | 	add	objptr, #161
0530c     07 77 C2 FA | 	rdbyte	local07, objptr
05310     3B 0B 03 F6 | 	mov	muldiva_, local07
05314     17 0F 06 F1 | 	add	objptr, #279
05318     07 7D C2 FA | 	rdbyte	local10, objptr
0531c     B8 0F 86 F1 | 	sub	objptr, #440
05320     3E 0D 03 F6 | 	mov	muldivb_, local10
05324     D0 00 A0 FD | 	call	#divide_
05328     85 7B 0A F6 | 	mov	local09, muldiva_ wz
0532c     0C 00 90 5D |  if_ne	jmp	#LR__0209
05330                 | '         triggerNote(channel)
05330     35 75 02 F6 | 	mov	local06, local01
05334     3A 5D 02 F6 | 	mov	arg01, local06
05338     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
0533c                 | LR__0209
0533c                 | LR__0210
0533c     AF F0 03 F6 | 	mov	ptra, fp
05340     BF 00 A0 FD | 	call	#popregs_
05344                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
05344     2D 00 64 FD | 	ret
05348                 | 
05348                 | ' 
05348                 | ' 
05348                 | ' ' Handle all commands that executes on every tick
05348                 | ' '
05348                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05348                 | _trackerplayer_spin2_handleEveryTickCommands
05348     12 5A 05 F6 | 	mov	COUNT_, #18
0534c     B0 00 A0 FD | 	call	#pushregs_
05350     2E 6B 02 F6 | 	mov	local01, arg01
05354                 | ' 
05354                 | '   CASE_FAST cmd
05354     BA 0F 06 F1 | 	add	objptr, #442
05358     07 6D C2 FA | 	rdbyte	local02, objptr
0535c     BA 0F 86 F1 | 	sub	objptr, #442
05360     36 6F 02 F6 | 	mov	local03, local02
05364     0F 6E 26 F3 | 	fle	local03, #15
05368     37 71 02 F6 | 	mov	local04, local03
0536c     30 70 62 FD | 	jmprel	local04
05370                 | LR__0211
05370     3C 00 90 FD | 	jmp	#LR__0212
05374     68 03 90 FD | 	jmp	#LR__0226
05378     64 03 90 FD | 	jmp	#LR__0226
0537c     60 03 90 FD | 	jmp	#LR__0226
05380     E8 01 90 FD | 	jmp	#LR__0215
05384     58 03 90 FD | 	jmp	#LR__0226
05388     4C 02 90 FD | 	jmp	#LR__0218
0538c     50 03 90 FD | 	jmp	#LR__0226
05390     4C 03 90 FD | 	jmp	#LR__0226
05394     48 03 90 FD | 	jmp	#LR__0226
05398     44 03 90 FD | 	jmp	#LR__0226
0539c     40 03 90 FD | 	jmp	#LR__0226
053a0     3C 03 90 FD | 	jmp	#LR__0226
053a4     38 03 90 FD | 	jmp	#LR__0226
053a8     38 02 90 FD | 	jmp	#LR__0219
053ac     30 03 90 FD | 	jmp	#LR__0226
053b0                 | LR__0212
053b0                 | ' 
053b0                 | '     $0:                                 ' Arpeggio
053b0                 | '       arpCounter := tickCounter // 3
053b0     A1 0E 06 F1 | 	add	objptr, #161
053b4     07 0B C3 FA | 	rdbyte	muldiva_, objptr
053b8     A1 0E 86 F1 | 	sub	objptr, #161
053bc     03 0C 07 F6 | 	mov	muldivb_, #3
053c0     D0 00 A0 FD | 	call	#divide_
053c4     85 73 02 F6 | 	mov	local05, muldiva_
053c8                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
053c8     35 75 02 F6 | 	mov	local06, local01
053cc     02 74 66 F0 | 	shl	local06, #2
053d0     DF 0E 06 F1 | 	add	objptr, #223
053d4     07 75 02 F1 | 	add	local06, objptr
053d8     3A 5D 02 FB | 	rdlong	arg01, local06
053dc     35 77 02 F6 | 	mov	local07, local01
053e0     0C 0E 86 F1 | 	sub	objptr, #12
053e4     07 77 02 F1 | 	add	local07, objptr
053e8     3B 5F C2 FA | 	rdbyte	arg02, local07
053ec     D3 0E 86 F1 | 	sub	objptr, #211
053f0     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
053f4     15 79 02 F6 | 	mov	local08, result1
053f8     3C 7B 02 F6 | 	mov	local09, local08
053fc     24 78 5E F2 | 	cmps	local08, #36 wcz
05400     DC 02 90 3D |  if_ae	jmp	#LR__0226
05404                 | '         if arpCounter == 1 and x > 0
05404     01 72 0E F2 | 	cmp	local05, #1 wz
05408     8C 00 90 5D |  if_ne	jmp	#LR__0213
0540c     B7 0F 06 F1 | 	add	objptr, #439
05410     07 75 C2 FA | 	rdbyte	local06, objptr
05414     B7 0F 86 F1 | 	sub	objptr, #439
05418     00 74 5E F2 | 	cmps	local06, #0 wcz
0541c     78 00 90 ED |  if_be	jmp	#LR__0213
05420                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05420     3D 7D 02 F6 | 	mov	local10, local09
05424     B7 0F 06 F1 | 	add	objptr, #439
05428     07 77 C2 FA | 	rdbyte	local07, objptr
0542c     3B 7F 02 F6 | 	mov	local11, local07
05430     3B 7D 02 F1 | 	add	local10, local07
05434     3E 81 02 F6 | 	mov	local12, local10
05438     40 5D 02 F6 | 	mov	arg01, local12
0543c     06 00 00 FF 
05440     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05444     01 5C 66 F0 | 	shl	arg01, #1
05448     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0544c                 | ' 
0544c                 | '   return word[@periodTable][noteNumber]
0544c     2E 2B E2 FA | 	rdword	result1, arg01
05450     06 00 00 FF 
05454     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05458     15 83 02 F6 | 	mov	local13, result1
0545c     35 85 02 F6 | 	mov	local14, local01
05460     02 84 66 F0 | 	shl	local14, #2
05464     D8 0E 86 F1 | 	sub	objptr, #216
05468     07 87 02 F6 | 	mov	local15, objptr
0546c     07 85 02 F1 | 	add	local14, objptr
05470     41 75 02 F6 | 	mov	local06, local13
05474     42 89 02 FB | 	rdlong	local16, local14
05478     44 75 82 F1 | 	sub	local06, local16
0547c     35 8B 02 F6 | 	mov	local17, local01
05480     02 8A 66 F0 | 	shl	local17, #2
05484     10 0E 06 F1 | 	add	objptr, #16
05488     07 8D 02 F6 | 	mov	local18, objptr
0548c     07 8B 02 F1 | 	add	local17, objptr
05490     45 75 62 FC | 	wrlong	local06, local17
05494     EF 0E 86 F1 | 	sub	objptr, #239
05498                 | LR__0213
05498                 | '         if arpCounter == 2 and y > 0
05498     02 72 0E F2 | 	cmp	local05, #2 wz
0549c     8C 00 90 5D |  if_ne	jmp	#LR__0214
054a0     B8 0F 06 F1 | 	add	objptr, #440
054a4     07 75 C2 FA | 	rdbyte	local06, objptr
054a8     B8 0F 86 F1 | 	sub	objptr, #440
054ac     00 74 5E F2 | 	cmps	local06, #0 wcz
054b0     78 00 90 ED |  if_be	jmp	#LR__0214
054b4                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
054b4     3D 7D 02 F6 | 	mov	local10, local09
054b8     B8 0F 06 F1 | 	add	objptr, #440
054bc     07 77 C2 FA | 	rdbyte	local07, objptr
054c0     3B 7F 02 F6 | 	mov	local11, local07
054c4     3B 7D 02 F1 | 	add	local10, local07
054c8     3E 81 02 F6 | 	mov	local12, local10
054cc     40 5D 02 F6 | 	mov	arg01, local12
054d0     06 00 00 FF 
054d4     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054d8     01 5C 66 F0 | 	shl	arg01, #1
054dc     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054e0                 | ' 
054e0                 | '   return word[@periodTable][noteNumber]
054e0     2E 2B E2 FA | 	rdword	result1, arg01
054e4     06 00 00 FF 
054e8     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054ec     15 83 02 F6 | 	mov	local13, result1
054f0     35 85 02 F6 | 	mov	local14, local01
054f4     02 84 66 F0 | 	shl	local14, #2
054f8     D9 0E 86 F1 | 	sub	objptr, #217
054fc     07 87 02 F6 | 	mov	local15, objptr
05500     07 85 02 F1 | 	add	local14, objptr
05504     41 75 02 F6 | 	mov	local06, local13
05508     42 89 02 FB | 	rdlong	local16, local14
0550c     44 75 82 F1 | 	sub	local06, local16
05510     35 8B 02 F6 | 	mov	local17, local01
05514     02 8A 66 F0 | 	shl	local17, #2
05518     10 0E 06 F1 | 	add	objptr, #16
0551c     07 8D 02 F6 | 	mov	local18, objptr
05520     07 8B 02 F1 | 	add	local17, objptr
05524     45 75 62 FC | 	wrlong	local06, local17
05528     EF 0E 86 F1 | 	sub	objptr, #239
0552c                 | LR__0214
0552c                 | '         if arpCounter == 0 and (x + y) > 0
0552c     00 72 0E F2 | 	cmp	local05, #0 wz
05530     AC 01 90 5D |  if_ne	jmp	#LR__0226
05534     B7 0F 06 F1 | 	add	objptr, #439
05538     07 75 C2 FA | 	rdbyte	local06, objptr
0553c     01 0E 06 F1 | 	add	objptr, #1
05540     07 77 C2 FA | 	rdbyte	local07, objptr
05544     B8 0F 86 F1 | 	sub	objptr, #440
05548     3B 75 02 F1 | 	add	local06, local07
0554c     00 74 5E F2 | 	cmps	local06, #0 wcz
05550     8C 01 90 ED |  if_be	jmp	#LR__0226
05554                 | '           deltaPeriod[channel] := 0
05554     02 6A 66 F0 | 	shl	local01, #2
05558     EF 0E 06 F1 | 	add	objptr, #239
0555c     07 6B 02 F1 | 	add	local01, objptr
05560     35 01 68 FC | 	wrlong	#0, local01
05564     EF 0E 86 F1 | 	sub	objptr, #239
05568     74 01 90 FD | 	jmp	#LR__0226
0556c                 | LR__0215
0556c                 | ' 
0556c                 | '     $4:                                 ' Vibrato
0556c                 | '       if x > 0
0556c     B7 0F 06 F1 | 	add	objptr, #439
05570     07 75 C2 FA | 	rdbyte	local06, objptr
05574     B7 0F 86 F1 | 	sub	objptr, #439
05578     00 74 5E F2 | 	cmps	local06, #0 wcz
0557c     1C 00 90 ED |  if_be	jmp	#LR__0216
05580                 | '         cmd4_memoryX[channel] := x
05580     35 75 02 F6 | 	mov	local06, local01
05584     D0 0F 06 F1 | 	add	objptr, #464
05588     07 75 02 F1 | 	add	local06, objptr
0558c     19 0E 86 F1 | 	sub	objptr, #25
05590     07 7F C2 FA | 	rdbyte	local11, objptr
05594     B7 0F 86 F1 | 	sub	objptr, #439
05598     3A 7F 42 FC | 	wrbyte	local11, local06
0559c                 | LR__0216
0559c                 | '       if y > 0
0559c     B8 0F 06 F1 | 	add	objptr, #440
055a0     07 75 C2 FA | 	rdbyte	local06, objptr
055a4     B8 0F 86 F1 | 	sub	objptr, #440
055a8     00 74 5E F2 | 	cmps	local06, #0 wcz
055ac     1C 00 90 ED |  if_be	jmp	#LR__0217
055b0                 | '         cmd4_memoryY[channel] := y
055b0     35 75 02 F6 | 	mov	local06, local01
055b4     CC 0F 06 F1 | 	add	objptr, #460
055b8     07 75 02 F1 | 	add	local06, objptr
055bc     14 0E 86 F1 | 	sub	objptr, #20
055c0     07 7F C2 FA | 	rdbyte	local11, objptr
055c4     B8 0F 86 F1 | 	sub	objptr, #440
055c8     3A 7F 42 FC | 	wrbyte	local11, local06
055cc                 | LR__0217
055cc                 | ' 
055cc                 | '       doVibrato(channel)
055cc     35 5D 02 F6 | 	mov	arg01, local01
055d0     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055d4     08 01 90 FD | 	jmp	#LR__0226
055d8                 | LR__0218
055d8                 | ' 
055d8                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
055d8     35 5D 02 F6 | 	mov	arg01, local01
055dc     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055e0     FC 00 90 FD | 	jmp	#LR__0226
055e4                 | LR__0219
055e4                 | ' 
055e4                 | '     $E:
055e4                 | '       if x == $C                        ' Cut note after Y ticks
055e4     B7 0F 06 F1 | 	add	objptr, #439
055e8     07 75 C2 FA | 	rdbyte	local06, objptr
055ec     B7 0F 86 F1 | 	sub	objptr, #439
055f0     0C 74 0E F2 | 	cmp	local06, #12 wz
055f4     34 00 90 5D |  if_ne	jmp	#LR__0220
055f8                 | '         if tickcounter == y
055f8     A1 0E 06 F1 | 	add	objptr, #161
055fc     07 75 C2 FA | 	rdbyte	local06, objptr
05600     17 0F 06 F1 | 	add	objptr, #279
05604     07 7F C2 FA | 	rdbyte	local11, objptr
05608     B8 0F 86 F1 | 	sub	objptr, #440
0560c     3F 75 0A F2 | 	cmp	local06, local11 wz
05610     CC 00 90 5D |  if_ne	jmp	#LR__0225
05614                 | '           currVolume[channel] := 0
05614     02 6A 66 F0 | 	shl	local01, #2
05618     FF 0E 06 F1 | 	add	objptr, #255
0561c     07 6B 02 F1 | 	add	local01, objptr
05620     35 01 68 FC | 	wrlong	#0, local01
05624     FF 0E 86 F1 | 	sub	objptr, #255
05628     B4 00 90 FD | 	jmp	#LR__0225
0562c                 | LR__0220
0562c                 | ' 
0562c                 | '       elseif x == $D                    ' Delay note Y ticks
0562c     B7 0F 06 F1 | 	add	objptr, #439
05630     07 75 C2 FA | 	rdbyte	local06, objptr
05634     B7 0F 86 F1 | 	sub	objptr, #439
05638     0D 74 0E F2 | 	cmp	local06, #13 wz
0563c     A0 00 90 5D |  if_ne	jmp	#LR__0224
05640                 | '         if tickcounter == y
05640     A1 0E 06 F1 | 	add	objptr, #161
05644     07 75 C2 FA | 	rdbyte	local06, objptr
05648     17 0F 06 F1 | 	add	objptr, #279
0564c     07 7F C2 FA | 	rdbyte	local11, objptr
05650     B8 0F 86 F1 | 	sub	objptr, #440
05654     3F 75 0A F2 | 	cmp	local06, local11 wz
05658     0C 00 90 5D |  if_ne	jmp	#LR__0221
0565c                 | '           triggerNote(channel)
0565c     35 5D 02 F6 | 	mov	arg01, local01
05660     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05664     78 00 90 FD | 	jmp	#LR__0223
05668                 | LR__0221
05668                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05668                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05668     B8 0F 06 F1 | 	add	objptr, #440
0566c     07 75 C2 FA | 	rdbyte	local06, objptr
05670     14 0F 86 F1 | 	sub	objptr, #276
05674     07 7F C2 FA | 	rdbyte	local11, objptr
05678     A4 0E 86 F1 | 	sub	objptr, #164
0567c     3F 75 5A F2 | 	cmps	local06, local11 wcz
05680     5C 00 90 CD |  if_b	jmp	#LR__0222
05684     A4 0E 06 F1 | 	add	objptr, #164
05688     07 83 C2 FA | 	rdbyte	local13, objptr
0568c     41 81 02 F6 | 	mov	local12, local13
05690     01 80 86 F1 | 	sub	local12, #1
05694     03 0E 86 F1 | 	sub	objptr, #3
05698     07 87 C2 FA | 	rdbyte	local15, objptr
0569c     A1 0E 86 F1 | 	sub	objptr, #161
056a0     43 85 02 F6 | 	mov	local14, local15
056a4     40 85 0A F2 | 	cmp	local14, local12 wz
056a8     34 00 90 5D |  if_ne	jmp	#LR__0222
056ac                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
056ac     35 75 02 F6 | 	mov	local06, local01
056b0     02 74 66 F0 | 	shl	local06, #2
056b4     27 0F 06 F1 | 	add	objptr, #295
056b8     07 7D 02 F6 | 	mov	local10, objptr
056bc     07 75 02 F1 | 	add	local06, objptr
056c0     35 7F 02 F6 | 	mov	local11, local01
056c4     02 7E 66 F0 | 	shl	local11, #2
056c8     48 0E 86 F1 | 	sub	objptr, #72
056cc     07 77 02 F6 | 	mov	local07, objptr
056d0     3A 81 02 FB | 	rdlong	local12, local06
056d4     3B 7F 02 F1 | 	add	local11, local07
056d8     3F 81 62 FC | 	wrlong	local12, local11
056dc     DF 0E 86 F1 | 	sub	objptr, #223
056e0                 | LR__0222
056e0                 | LR__0223
056e0                 | LR__0224
056e0                 | LR__0225
056e0                 | LR__0226
056e0     AF F0 03 F6 | 	mov	ptra, fp
056e4     BF 00 A0 FD | 	call	#popregs_
056e8                 | _trackerplayer_spin2_handleEveryTickCommands_ret
056e8     2D 00 64 FD | 	ret
056ec                 | 
056ec                 | ' 
056ec                 | ' 
056ec                 | ' PRI doTremolo(channel) | depth, sineWave, speed
056ec                 | _trackerplayer_spin2_doTremolo
056ec     2E 31 02 F6 | 	mov	_var01, arg01
056f0     18 33 02 F6 | 	mov	_var02, _var01
056f4     8B 0F 06 F1 | 	add	objptr, #395
056f8     07 33 02 F1 | 	add	_var02, objptr
056fc     05 00 00 FF 
05700     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05704     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05708     19 37 C2 FA | 	rdbyte	_var04, _var02
0570c     02 36 66 F0 | 	shl	_var04, #2
05710     1A 37 02 F1 | 	add	_var04, _var03
05714                 | ' 
05714                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05714     1B 39 02 FB | 	rdlong	_var05, _var04
05718     18 3B 02 F6 | 	mov	_var06, _var01
0571c     49 0E 06 F1 | 	add	objptr, #73
05720     07 3B 02 F1 | 	add	_var06, objptr
05724                 | '   depth    := cmd7_memoryY[channel]
05724     1D 3D C2 FA | 	rdbyte	_var07, _var06
05728     18 3F 02 F6 | 	mov	_var08, _var01
0572c     04 0E 06 F1 | 	add	objptr, #4
05730     07 3F 02 F1 | 	add	_var08, objptr
05734                 | '   speed    := cmd7_memoryX[channel]
05734     1F 41 C2 FA | 	rdbyte	_var09, _var08
05738                 | ' 
05738                 | '   CASE_FAST vibratoType[channel]
05738     18 43 02 F6 | 	mov	_var10, _var01
0573c     18 0E 86 F1 | 	sub	objptr, #24
05740     07 45 02 F6 | 	mov	_var11, objptr
05744     07 43 02 F1 | 	add	_var10, objptr
05748     21 47 C2 FA | 	rdbyte	_var12, _var10
0574c     03 46 26 F3 | 	fle	_var12, #3
05750     23 49 02 F6 | 	mov	_var13, _var12
05754     05 00 00 FF 
05758     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0575c     C0 0F 86 F1 | 	sub	objptr, #448
05760     30 48 62 FD | 	jmprel	_var13
05764                 | LR__0227
05764     0C 00 90 FD | 	jmp	#LR__0228
05768     30 00 90 FD | 	jmp	#LR__0229
0576c     6C 00 90 FD | 	jmp	#LR__0230
05770     B4 00 90 FD | 	jmp	#LR__0231
05774                 | LR__0228
05774                 | ' 
05774                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05774     1C 3D 02 FD | 	qmul	_var07, _var05
05778     18 4A 62 FD | 	getqx	_var14
0577c     06 4A C6 F0 | 	sar	_var14, #6
05780     18 4D 02 F6 | 	mov	_var15, _var01
05784     02 4C 66 F0 | 	shl	_var15, #2
05788     0F 0F 06 F1 | 	add	objptr, #271
0578c     07 4D 02 F1 | 	add	_var15, objptr
05790     26 4B 62 FC | 	wrlong	_var14, _var15
05794     0F 0F 86 F1 | 	sub	objptr, #271
05798     8C 00 90 FD | 	jmp	#LR__0231
0579c                 | LR__0229
0579c                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
0579c     18 4D 02 F6 | 	mov	_var15, _var01
057a0     8B 0F 06 F1 | 	add	objptr, #395
057a4     07 4D 02 F1 | 	add	_var15, objptr
057a8     26 4F C2 FA | 	rdbyte	_var16, _var15
057ac     03 4E 66 F0 | 	shl	_var16, #3
057b0     27 3D 02 FD | 	qmul	_var07, _var16
057b4     18 4A 62 FD | 	getqx	_var14
057b8     00 4B 86 F1 | 	sub	_var14, #256
057bc     06 4A C6 F0 | 	sar	_var14, #6
057c0     18 51 02 F6 | 	mov	_var17, _var01
057c4     02 50 66 F0 | 	shl	_var17, #2
057c8     7C 0E 86 F1 | 	sub	objptr, #124
057cc     07 51 02 F1 | 	add	_var17, objptr
057d0     28 4B 62 FC | 	wrlong	_var14, _var17
057d4     0F 0F 86 F1 | 	sub	objptr, #271
057d8     4C 00 90 FD | 	jmp	#LR__0231
057dc                 | LR__0230
057dc                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
057dc     18 4D 02 F6 | 	mov	_var15, _var01
057e0     8B 0F 06 F1 | 	add	objptr, #395
057e4     07 53 02 F6 | 	mov	_var18, objptr
057e8     07 4D 02 F1 | 	add	_var15, objptr
057ec     26 4F C2 FA | 	rdbyte	_var16, _var15
057f0     20 4E 06 F5 | 	and	_var16, #32
057f4     04 4E 66 F0 | 	shl	_var16, #4
057f8     27 3D 02 FD | 	qmul	_var07, _var16
057fc     18 54 62 FD | 	getqx	_var19
05800     2A 4B 02 F6 | 	mov	_var14, _var19
05804     00 4B 86 F1 | 	sub	_var14, #256
05808     06 4A C6 F0 | 	sar	_var14, #6
0580c     18 51 02 F6 | 	mov	_var17, _var01
05810     02 50 66 F0 | 	shl	_var17, #2
05814     7C 0E 86 F1 | 	sub	objptr, #124
05818     07 57 02 F6 | 	mov	_var20, objptr
0581c     07 51 02 F1 | 	add	_var17, objptr
05820     28 4B 62 FC | 	wrlong	_var14, _var17
05824     0F 0F 86 F1 | 	sub	objptr, #271
05828                 | LR__0231
05828     8B 0F 06 F1 | 	add	objptr, #395
0582c     07 31 02 F1 | 	add	_var01, objptr
05830     18 59 C2 FA | 	rdbyte	_var21, _var01
05834     20 59 02 F1 | 	add	_var21, _var09
05838     3F 58 06 F5 | 	and	_var21, #63
0583c                 | ' 
0583c                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
0583c     18 59 42 FC | 	wrbyte	_var21, _var01
05840     8B 0F 86 F1 | 	sub	objptr, #395
05844                 | _trackerplayer_spin2_doTremolo_ret
05844     2D 00 64 FD | 	ret
05848                 | 
05848                 | ' 
05848                 | ' 
05848                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05848                 | _trackerplayer_spin2_doVibrato
05848     2E 31 02 F6 | 	mov	_var01, arg01
0584c     18 33 02 F6 | 	mov	_var02, _var01
05850     87 0F 06 F1 | 	add	objptr, #391
05854     07 33 02 F1 | 	add	_var02, objptr
05858     05 00 00 FF 
0585c     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05860     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05864     19 37 C2 FA | 	rdbyte	_var04, _var02
05868     02 36 66 F0 | 	shl	_var04, #2
0586c     1A 37 02 F1 | 	add	_var04, _var03
05870                 | ' 
05870                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05870     1B 39 02 FB | 	rdlong	_var05, _var04
05874     18 3B 02 F6 | 	mov	_var06, _var01
05878     45 0E 06 F1 | 	add	objptr, #69
0587c     07 3B 02 F1 | 	add	_var06, objptr
05880                 | '   depth    := cmd4_memoryY[channel]
05880     1D 3D C2 FA | 	rdbyte	_var07, _var06
05884     18 3F 02 F6 | 	mov	_var08, _var01
05888     04 0E 06 F1 | 	add	objptr, #4
0588c     07 3F 02 F1 | 	add	_var08, objptr
05890                 | '   speed    := cmd4_memoryX[channel]
05890     1F 41 C2 FA | 	rdbyte	_var09, _var08
05894                 | ' 
05894                 | '   CASE_FAST vibratoType[channel]
05894     18 43 02 F6 | 	mov	_var10, _var01
05898     10 0E 86 F1 | 	sub	objptr, #16
0589c     07 45 02 F6 | 	mov	_var11, objptr
058a0     07 43 02 F1 | 	add	_var10, objptr
058a4     21 47 C2 FA | 	rdbyte	_var12, _var10
058a8     03 46 26 F3 | 	fle	_var12, #3
058ac     23 49 02 F6 | 	mov	_var13, _var12
058b0     05 00 00 FF 
058b4     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
058b8     C0 0F 86 F1 | 	sub	objptr, #448
058bc     30 48 62 FD | 	jmprel	_var13
058c0                 | LR__0232
058c0     0C 00 90 FD | 	jmp	#LR__0233
058c4     30 00 90 FD | 	jmp	#LR__0234
058c8     6C 00 90 FD | 	jmp	#LR__0235
058cc     B4 00 90 FD | 	jmp	#LR__0236
058d0                 | LR__0233
058d0                 | ' 
058d0                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
058d0     1C 3D 02 FD | 	qmul	_var07, _var05
058d4     18 4A 62 FD | 	getqx	_var14
058d8     07 4A C6 F0 | 	sar	_var14, #7
058dc     18 4D 02 F6 | 	mov	_var15, _var01
058e0     02 4C 66 F0 | 	shl	_var15, #2
058e4     EF 0E 06 F1 | 	add	objptr, #239
058e8     07 4D 02 F1 | 	add	_var15, objptr
058ec     26 4B 62 FC | 	wrlong	_var14, _var15
058f0     EF 0E 86 F1 | 	sub	objptr, #239
058f4     8C 00 90 FD | 	jmp	#LR__0236
058f8                 | LR__0234
058f8                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
058f8     18 4D 02 F6 | 	mov	_var15, _var01
058fc     87 0F 06 F1 | 	add	objptr, #391
05900     07 4D 02 F1 | 	add	_var15, objptr
05904     26 4F C2 FA | 	rdbyte	_var16, _var15
05908     03 4E 66 F0 | 	shl	_var16, #3
0590c     27 3D 02 FD | 	qmul	_var07, _var16
05910     18 4A 62 FD | 	getqx	_var14
05914     00 4B 86 F1 | 	sub	_var14, #256
05918     07 4A C6 F0 | 	sar	_var14, #7
0591c     18 51 02 F6 | 	mov	_var17, _var01
05920     02 50 66 F0 | 	shl	_var17, #2
05924     98 0E 86 F1 | 	sub	objptr, #152
05928     07 51 02 F1 | 	add	_var17, objptr
0592c     28 4B 62 FC | 	wrlong	_var14, _var17
05930     EF 0E 86 F1 | 	sub	objptr, #239
05934     4C 00 90 FD | 	jmp	#LR__0236
05938                 | LR__0235
05938                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05938     18 4D 02 F6 | 	mov	_var15, _var01
0593c     87 0F 06 F1 | 	add	objptr, #391
05940     07 53 02 F6 | 	mov	_var18, objptr
05944     07 4D 02 F1 | 	add	_var15, objptr
05948     26 4F C2 FA | 	rdbyte	_var16, _var15
0594c     20 4E 06 F5 | 	and	_var16, #32
05950     04 4E 66 F0 | 	shl	_var16, #4
05954     27 3D 02 FD | 	qmul	_var07, _var16
05958     18 54 62 FD | 	getqx	_var19
0595c     2A 4B 02 F6 | 	mov	_var14, _var19
05960     00 4B 86 F1 | 	sub	_var14, #256
05964     07 4A C6 F0 | 	sar	_var14, #7
05968     18 51 02 F6 | 	mov	_var17, _var01
0596c     02 50 66 F0 | 	shl	_var17, #2
05970     98 0E 86 F1 | 	sub	objptr, #152
05974     07 57 02 F6 | 	mov	_var20, objptr
05978     07 51 02 F1 | 	add	_var17, objptr
0597c     28 4B 62 FC | 	wrlong	_var14, _var17
05980     EF 0E 86 F1 | 	sub	objptr, #239
05984                 | LR__0236
05984     87 0F 06 F1 | 	add	objptr, #391
05988     07 31 02 F1 | 	add	_var01, objptr
0598c     18 59 C2 FA | 	rdbyte	_var21, _var01
05990     20 59 02 F1 | 	add	_var21, _var09
05994     3F 58 06 F5 | 	and	_var21, #63
05998                 | ' 
05998                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05998     18 59 42 FC | 	wrbyte	_var21, _var01
0599c     87 0F 86 F1 | 	sub	objptr, #391
059a0                 | _trackerplayer_spin2_doVibrato_ret
059a0     2D 00 64 FD | 	ret
059a4                 | 
059a4                 | ' 
059a4                 | ' 
059a4                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
059a4                 | _trackerplayer_spin2_doPortamento
059a4                 | ' 
059a4                 | '   if period == currPeriod[channel]
059a4     2E 31 02 F6 | 	mov	_var01, arg01
059a8     02 30 66 F0 | 	shl	_var01, #2
059ac     DF 0E 06 F1 | 	add	objptr, #223
059b0     07 33 02 F6 | 	mov	_var02, objptr
059b4     07 31 02 F1 | 	add	_var01, objptr
059b8     18 35 02 FB | 	rdlong	_var03, _var01
059bc     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
059c0                 | '     return
059c0     DF 0E 86 F1 | 	sub	objptr, #223
059c4     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
059c8                 | ' 
059c8                 | '   if period > 0
059c8     00 5E 5E F2 | 	cmps	arg02, #0 wcz
059cc     1C 00 90 ED |  if_be	jmp	#LR__0237
059d0     2E 37 02 F6 | 	mov	_var04, arg01
059d4     02 36 66 F0 | 	shl	_var04, #2
059d8     97 0F 06 F1 | 	add	objptr, #407
059dc     07 37 02 F1 | 	add	_var04, objptr
059e0                 | '     portamentoPeriodMemory[channel] := period
059e0     1B 5F 62 FC | 	wrlong	arg02, _var04
059e4                 | '   else
059e4     97 0F 86 F1 | 	sub	objptr, #407
059e8     18 00 90 FD | 	jmp	#LR__0238
059ec                 | LR__0237
059ec     2E 39 02 F6 | 	mov	_var05, arg01
059f0     02 38 66 F0 | 	shl	_var05, #2
059f4     97 0F 06 F1 | 	add	objptr, #407
059f8     07 39 02 F1 | 	add	_var05, objptr
059fc                 | '     period := portamentoPeriodMemory[channel]
059fc     1C 5F 02 FB | 	rdlong	arg02, _var05
05a00     97 0F 86 F1 | 	sub	objptr, #407
05a04                 | LR__0238
05a04                 | ' 
05a04                 | '   if period > currPeriod[channel]
05a04     2E 31 02 F6 | 	mov	_var01, arg01
05a08     02 30 66 F0 | 	shl	_var01, #2
05a0c     DF 0E 06 F1 | 	add	objptr, #223
05a10     07 31 02 F1 | 	add	_var01, objptr
05a14     18 35 02 FB | 	rdlong	_var03, _var01
05a18     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a1c     DF 0E 86 F1 | 	sub	objptr, #223
05a20     50 00 90 ED |  if_be	jmp	#LR__0239
05a24     2E 3B 02 F6 | 	mov	_var06, arg01
05a28     02 3A 66 F0 | 	shl	_var06, #2
05a2c     DF 0E 06 F1 | 	add	objptr, #223
05a30     07 3B 02 F1 | 	add	_var06, objptr
05a34     2E 3D 02 F6 | 	mov	_var07, arg01
05a38     E9 0E 06 F1 | 	add	objptr, #233
05a3c     1D 3F 02 FB | 	rdlong	_var08, _var06
05a40     07 3D 02 F1 | 	add	_var07, objptr
05a44     1E 33 C2 FA | 	rdbyte	_var02, _var07
05a48     19 3F 02 F1 | 	add	_var08, _var02
05a4c                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05a4c     1D 3F 62 FC | 	wrlong	_var08, _var06
05a50     2E 41 02 F6 | 	mov	_var09, arg01
05a54     02 40 66 F0 | 	shl	_var09, #2
05a58     E9 0E 86 F1 | 	sub	objptr, #233
05a5c     07 41 02 F1 | 	add	_var09, objptr
05a60     20 43 02 FB | 	rdlong	_var10, _var09
05a64     2F 43 62 F3 | 	fles	_var10, arg02
05a68                 | '     currPeriod[channel] <#= period
05a68     20 43 62 FC | 	wrlong	_var10, _var09
05a6c     DF 0E 86 F1 | 	sub	objptr, #223
05a70     6C 00 90 FD | 	jmp	#LR__0241
05a74                 | LR__0239
05a74                 | ' 
05a74                 | '   elseif period < currPeriod[channel]
05a74     2E 31 02 F6 | 	mov	_var01, arg01
05a78     02 30 66 F0 | 	shl	_var01, #2
05a7c     DF 0E 06 F1 | 	add	objptr, #223
05a80     07 31 02 F1 | 	add	_var01, objptr
05a84     18 35 02 FB | 	rdlong	_var03, _var01
05a88     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a8c     DF 0E 86 F1 | 	sub	objptr, #223
05a90     4C 00 90 3D |  if_ae	jmp	#LR__0240
05a94     2E 45 02 F6 | 	mov	_var11, arg01
05a98     02 44 66 F0 | 	shl	_var11, #2
05a9c     DF 0E 06 F1 | 	add	objptr, #223
05aa0     07 45 02 F1 | 	add	_var11, objptr
05aa4     2E 47 02 F6 | 	mov	_var12, arg01
05aa8     E9 0E 06 F1 | 	add	objptr, #233
05aac     22 49 02 FB | 	rdlong	_var13, _var11
05ab0     07 47 02 F1 | 	add	_var12, objptr
05ab4     23 33 C2 FA | 	rdbyte	_var02, _var12
05ab8     19 49 82 F1 | 	sub	_var13, _var02
05abc                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05abc     22 49 62 FC | 	wrlong	_var13, _var11
05ac0     2E 4B 02 F6 | 	mov	_var14, arg01
05ac4     02 4A 66 F0 | 	shl	_var14, #2
05ac8     E9 0E 86 F1 | 	sub	objptr, #233
05acc     07 4B 02 F1 | 	add	_var14, objptr
05ad0     25 4D 02 FB | 	rdlong	_var15, _var14
05ad4     2F 4D 42 F3 | 	fges	_var15, arg02
05ad8                 | '     currPeriod[channel] #>= period
05ad8     25 4D 62 FC | 	wrlong	_var15, _var14
05adc     DF 0E 86 F1 | 	sub	objptr, #223
05ae0                 | LR__0240
05ae0                 | LR__0241
05ae0                 | ' 
05ae0                 | '   ' Handle glissando if activated
05ae0                 | '   if portaGlissando[channel] > 0
05ae0     2E 31 02 F6 | 	mov	_var01, arg01
05ae4     BC 0F 06 F1 | 	add	objptr, #444
05ae8     07 31 02 F1 | 	add	_var01, objptr
05aec     18 35 C2 FA | 	rdbyte	_var03, _var01
05af0     00 34 5E F2 | 	cmps	_var03, #0 wcz
05af4     BC 0F 86 F1 | 	sub	objptr, #444
05af8     A0 00 90 ED |  if_be	jmp	#LR__0244
05afc     2E 4F 02 F6 | 	mov	_var16, arg01
05b00     02 4E 66 F0 | 	shl	_var16, #2
05b04     DF 0E 06 F1 | 	add	objptr, #223
05b08     07 4F 02 F1 | 	add	_var16, objptr
05b0c                 | ' 
05b0c                 | '     tempPeriod := currPeriod[channel]
05b0c     27 51 02 FB | 	rdlong	_var17, _var16
05b10                 | ' 
05b10                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05b10     00 52 06 F6 | 	mov	_var18, #0
05b14     DF 0E 86 F1 | 	sub	objptr, #223
05b18     48 A5 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
05b1c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05b20                 | LR__0242
05b20     06 00 00 FF 
05b24     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05b28     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05b2c     2E 55 02 F6 | 	mov	_var19, arg01
05b30     D3 0E 06 F1 | 	add	objptr, #211
05b34     07 55 02 F1 | 	add	_var19, objptr
05b38     2A 33 C2 FA | 	rdbyte	_var02, _var19
05b3c     19 57 02 F6 | 	mov	_var20, _var02
05b40     03 56 66 F0 | 	shl	_var20, #3
05b44     19 57 02 F1 | 	add	_var20, _var02
05b48     03 56 66 F0 | 	shl	_var20, #3
05b4c     2B 35 02 F1 | 	add	_var03, _var20
05b50     29 59 02 F6 | 	mov	_var21, _var18
05b54     01 58 66 F0 | 	shl	_var21, #1
05b58     1A 59 02 F1 | 	add	_var21, _var03
05b5c                 | ' 
05b5c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05b5c     2C 5B E2 FA | 	rdword	_var22, _var21
05b60                 | '       if tempPeriod >= periodStep
05b60     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05b64                 | '         i += 1000
05b64     06 00 00 FF 
05b68     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05b6c     D3 0E 86 F1 | 	sub	objptr, #211
05b70     01 00 00 3F 
05b74     E8 53 06 31 |  if_ae	add	_var18, ##1000
05b78     01 52 06 F1 | 	add	_var18, #1
05b7c     24 52 5E F2 | 	cmps	_var18, #36 wcz
05b80     9C FF 9F CD |  if_b	jmp	#LR__0242
05b84                 | LR__0243
05b84     28 5B 82 F1 | 	sub	_var22, _var17
05b88     02 5C 66 F0 | 	shl	arg01, #2
05b8c     EF 0E 06 F1 | 	add	objptr, #239
05b90     07 5D 02 F1 | 	add	arg01, objptr
05b94                 | ' 
05b94                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05b94     2E 5B 62 FC | 	wrlong	_var22, arg01
05b98     EF 0E 86 F1 | 	sub	objptr, #239
05b9c                 | LR__0244
05b9c                 | _trackerplayer_spin2_doPortamento_ret
05b9c     2D 00 64 FD | 	ret
05ba0                 | 
05ba0                 | ' 
05ba0                 | ' 
05ba0                 | ' PRI doVolumeSlide(channel)
05ba0                 | _trackerplayer_spin2_doVolumeSlide
05ba0                 | ' 
05ba0                 | '   if x > 0
05ba0     B7 0F 06 F1 | 	add	objptr, #439
05ba4     07 31 C2 FA | 	rdbyte	_var01, objptr
05ba8     B7 0F 86 F1 | 	sub	objptr, #439
05bac     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bb0     28 00 90 ED |  if_be	jmp	#LR__0245
05bb4     2E 33 02 F6 | 	mov	_var02, arg01
05bb8     02 32 66 F0 | 	shl	_var02, #2
05bbc     FF 0E 06 F1 | 	add	objptr, #255
05bc0     07 33 02 F1 | 	add	_var02, objptr
05bc4     19 35 02 FB | 	rdlong	_var03, _var02
05bc8     B8 0E 06 F1 | 	add	objptr, #184
05bcc     07 37 C2 FA | 	rdbyte	_var04, objptr
05bd0     B7 0F 86 F1 | 	sub	objptr, #439
05bd4     1B 35 02 F1 | 	add	_var03, _var04
05bd8                 | '     currVolume[channel] += x
05bd8     19 35 62 FC | 	wrlong	_var03, _var02
05bdc                 | LR__0245
05bdc                 | '   if y > 0
05bdc     B8 0F 06 F1 | 	add	objptr, #440
05be0     07 31 C2 FA | 	rdbyte	_var01, objptr
05be4     B8 0F 86 F1 | 	sub	objptr, #440
05be8     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bec     24 00 90 ED |  if_be	jmp	#LR__0246
05bf0     02 5C 66 F0 | 	shl	arg01, #2
05bf4     FF 0E 06 F1 | 	add	objptr, #255
05bf8     07 5D 02 F1 | 	add	arg01, objptr
05bfc     2E 39 02 FB | 	rdlong	_var05, arg01
05c00     B9 0E 06 F1 | 	add	objptr, #185
05c04     07 37 C2 FA | 	rdbyte	_var04, objptr
05c08     B8 0F 86 F1 | 	sub	objptr, #440
05c0c     1B 39 82 F1 | 	sub	_var05, _var04
05c10                 | '     currVolume[channel] -= y
05c10     2E 39 62 FC | 	wrlong	_var05, arg01
05c14                 | LR__0246
05c14                 | _trackerplayer_spin2_doVolumeSlide_ret
05c14     2D 00 64 FD | 	ret
05c18                 | hubexit
05c18     81 00 80 FD | 	jmp	#cogexit
05c1c                 | 
05c1c                 | __system___setbaud
05c1c     14 0A 07 FB | 	rdlong	muldiva_, #20
05c20     2E 0D 03 F6 | 	mov	muldivb_, arg01
05c24     D0 00 A0 FD | 	call	#divide_
05c28     40 7C 64 FD | 	dirl	#62
05c2c     40 7E 64 FD | 	dirl	#63
05c30     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05c34     10 0C 67 F0 | 	shl	muldivb_, #16
05c38     07 5E 06 F6 | 	mov	arg02, #7
05c3c     86 5F 02 F1 | 	add	arg02, muldivb_
05c40     3E F8 0C FC | 	wrpin	#124, #62
05c44     3E 5E 16 FC | 	wxpin	arg02, #62
05c48     3F 7C 0C FC | 	wrpin	#62, #63
05c4c     14 5E 06 F1 | 	add	arg02, #20
05c50     3F 5E 16 FC | 	wxpin	arg02, #63
05c54     41 7C 64 FD | 	dirh	#62
05c58     41 7E 64 FD | 	dirh	#63
05c5c                 | __system___setbaud_ret
05c5c     2D 00 64 FD | 	ret
05c60                 | 
05c60                 | __system___txraw
05c60     02 5A 05 F6 | 	mov	COUNT_, #2
05c64     B0 00 A0 FD | 	call	#pushregs_
05c68     2E 6B 02 F6 | 	mov	local01, arg01
05c6c     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c70     0C 00 90 5D |  if_ne	jmp	#LR__0247
05c74     42 0F 00 FF 
05c78     80 5C 06 F6 | 	mov	arg01, ##2000000
05c7c     9C FF BF FD | 	call	#__system___setbaud
05c80                 | LR__0247
05c80     3E 6A 26 FC | 	wypin	local01, #62
05c84     1F 02 64 FD | 	waitx	#1
05c88     7C A3 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
05c8c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05c90                 | LR__0248
05c90     40 7C 74 FD | 	testp	#62 wc
05c94     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
05c98                 | LR__0249
05c98     01 2A 06 F6 | 	mov	result1, #1
05c9c     AF F0 03 F6 | 	mov	ptra, fp
05ca0     BF 00 A0 FD | 	call	#popregs_
05ca4                 | __system___txraw_ret
05ca4     2D 00 64 FD | 	ret
05ca8                 | 
05ca8                 | __system___rxraw
05ca8     0D 5A 05 F6 | 	mov	COUNT_, #13
05cac     B0 00 A0 FD | 	call	#pushregs_
05cb0     2E 6B 02 F6 | 	mov	local01, arg01
05cb4     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05cb8     0C 00 90 5D |  if_ne	jmp	#LR__0250
05cbc     42 0F 00 FF 
05cc0     80 5C 06 F6 | 	mov	arg01, ##2000000
05cc4     54 FF BF FD | 	call	#__system___setbaud
05cc8                 | LR__0250
05cc8     00 6A 0E F2 | 	cmp	local01, #0 wz
05ccc     18 00 90 AD |  if_e	jmp	#LR__0251
05cd0     14 6E 06 FB | 	rdlong	local03, #20
05cd4     0A 6E 46 F0 | 	shr	local03, #10
05cd8     37 6B 02 FD | 	qmul	local01, local03
05cdc     18 70 62 FD | 	getqx	local04
05ce0     1A 72 62 FD | 	getct	local05
05ce4     38 73 02 F1 | 	add	local05, local04
05ce8                 | LR__0251
05ce8     01 74 66 F6 | 	neg	local06, #1
05cec     00 76 06 F6 | 	mov	local07, #0
05cf0     04 14 06 F1 | 	add	ptr___system__dat__, #4
05cf4     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05cf8     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05cfc                 | LR__0252
05cfc     08 78 16 F4 | 	testb	local08, #8 wc
05d00     09 78 76 F4 | 	testbn	local08, #9 andc
05d04     0A 78 46 F0 | 	shr	local08, #10
05d08     01 76 06 C6 |  if_b	mov	local07, #1
05d0c     10 00 90 CD |  if_b	jmp	#LR__0253
05d10     40 7E 6C FD | 	testp	#63 wz
05d14     01 76 06 A6 |  if_e	mov	local07, #1
05d18     3F 78 8E AA |  if_e	rdpin	local08, #63
05d1c     04 78 46 A0 |  if_e	shr	local08, #4
05d20                 | LR__0253
05d20     00 6C 06 F6 | 	mov	local02, #0
05d24     00 76 0E F2 | 	cmp	local07, #0 wz
05d28     01 6C 66 56 |  if_ne	neg	local02, #1
05d2c     00 7A 06 F6 | 	mov	local09, #0
05d30     00 7C 06 F6 | 	mov	local10, #0
05d34     00 6A 0E F2 | 	cmp	local01, #0 wz
05d38     01 7C 66 56 |  if_ne	neg	local10, #1
05d3c     00 7E 06 F6 | 	mov	local11, #0
05d40     00 80 06 F6 | 	mov	local12, #0
05d44     1A 82 62 FD | 	getct	local13
05d48     39 83 82 F1 | 	sub	local13, local05
05d4c     00 82 5E F2 | 	cmps	local13, #0 wcz
05d50     01 80 66 C6 |  if_b	neg	local12, #1
05d54     00 80 0E F2 | 	cmp	local12, #0 wz
05d58     01 7E 66 56 |  if_ne	neg	local11, #1
05d5c     3F 7D CA F7 | 	test	local10, local11 wz
05d60     01 7A 66 56 |  if_ne	neg	local09, #1
05d64     3D 6D 4A F5 | 	or	local02, local09 wz
05d68     90 FF 9F AD |  if_e	jmp	#LR__0252
05d6c     00 76 0E F2 | 	cmp	local07, #0 wz
05d70     3C 75 02 56 |  if_ne	mov	local06, local08
05d74     FF 74 06 55 |  if_ne	and	local06, #255
05d78     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d7c     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05d80     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d84     3A 2B 02 F6 | 	mov	result1, local06
05d88     AF F0 03 F6 | 	mov	ptra, fp
05d8c     BF 00 A0 FD | 	call	#popregs_
05d90                 | __system___rxraw_ret
05d90     2D 00 64 FD | 	ret
05d94                 | 
05d94                 | __system____builtin_memmove
05d94     2E 31 02 F6 | 	mov	_var01, arg01
05d98     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05d9c     50 00 90 3D |  if_ae	jmp	#LR__0261
05da0     7C A2 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
05da4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05da8                 | LR__0254
05da8     03 60 5E F2 | 	cmps	arg03, #3 wcz
05dac     18 00 90 ED |  if_be	jmp	#LR__0256
05db0     2F 33 02 FB | 	rdlong	_var02, arg02
05db4     2E 33 62 FC | 	wrlong	_var02, arg01
05db8     04 5C 06 F1 | 	add	arg01, #4
05dbc     04 5E 06 F1 | 	add	arg02, #4
05dc0     04 60 86 F1 | 	sub	arg03, #4
05dc4     E0 FF 9F FD | 	jmp	#LR__0254
05dc8                 | LR__0255
05dc8                 | LR__0256
05dc8     30 35 0A F6 | 	mov	_var03, arg03 wz
05dcc     4C 00 90 AD |  if_e	jmp	#LR__0267
05dd0     40 A2 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
05dd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05dd8                 | LR__0257
05dd8     1A 09 D8 FC | 	rep	@LR__0260, _var03
05ddc                 | LR__0258
05ddc     2F 33 C2 FA | 	rdbyte	_var02, arg02
05de0     2E 33 42 FC | 	wrbyte	_var02, arg01
05de4     01 5C 06 F1 | 	add	arg01, #1
05de8     01 5E 06 F1 | 	add	arg02, #1
05dec                 | LR__0259
05dec                 | LR__0260
05dec     2C 00 90 FD | 	jmp	#LR__0267
05df0                 | LR__0261
05df0     30 5D 02 F1 | 	add	arg01, arg03
05df4     30 5F 02 F1 | 	add	arg02, arg03
05df8     30 37 0A F6 | 	mov	_var04, arg03 wz
05dfc     1C 00 90 AD |  if_e	jmp	#LR__0266
05e00     10 A2 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05e04     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e08                 | LR__0262
05e08     1B 09 D8 FC | 	rep	@LR__0265, _var04
05e0c                 | LR__0263
05e0c     01 5C 86 F1 | 	sub	arg01, #1
05e10     01 5E 86 F1 | 	sub	arg02, #1
05e14     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e18     2E 33 42 FC | 	wrbyte	_var02, arg01
05e1c                 | LR__0264
05e1c                 | LR__0265
05e1c                 | LR__0266
05e1c                 | LR__0267
05e1c     18 2B 02 F6 | 	mov	result1, _var01
05e20                 | __system____builtin_memmove_ret
05e20     2D 00 64 FD | 	ret
05e24                 | 
05e24                 | __system__longmove
05e24     2E 31 02 F6 | 	mov	_var01, arg01
05e28     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e2c     28 00 90 3D |  if_ae	jmp	#LR__0272
05e30     30 33 0A F6 | 	mov	_var02, arg03 wz
05e34     54 00 90 AD |  if_e	jmp	#LR__0278
05e38     D8 A1 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
05e3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e40                 | LR__0268
05e40     19 09 D8 FC | 	rep	@LR__0271, _var02
05e44                 | LR__0269
05e44     2F 35 02 FB | 	rdlong	_var03, arg02
05e48     2E 35 62 FC | 	wrlong	_var03, arg01
05e4c     04 5C 06 F1 | 	add	arg01, #4
05e50     04 5E 06 F1 | 	add	arg02, #4
05e54                 | LR__0270
05e54                 | LR__0271
05e54     34 00 90 FD | 	jmp	#LR__0278
05e58                 | LR__0272
05e58     30 37 02 F6 | 	mov	_var04, arg03
05e5c     02 36 66 F0 | 	shl	_var04, #2
05e60     1B 5D 02 F1 | 	add	arg01, _var04
05e64     1B 5F 02 F1 | 	add	arg02, _var04
05e68     30 39 0A F6 | 	mov	_var05, arg03 wz
05e6c     1C 00 90 AD |  if_e	jmp	#LR__0277
05e70     A0 A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05e74     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e78                 | LR__0273
05e78     1C 09 D8 FC | 	rep	@LR__0276, _var05
05e7c                 | LR__0274
05e7c     04 5C 86 F1 | 	sub	arg01, #4
05e80     04 5E 86 F1 | 	sub	arg02, #4
05e84     2F 35 02 FB | 	rdlong	_var03, arg02
05e88     2E 35 62 FC | 	wrlong	_var03, arg01
05e8c                 | LR__0275
05e8c                 | LR__0276
05e8c                 | LR__0277
05e8c                 | LR__0278
05e8c     18 2B 02 F6 | 	mov	result1, _var01
05e90                 | __system__longmove_ret
05e90     2D 00 64 FD | 	ret
05e94                 | 
05e94                 | __system____topofstack
05e94     00 5A 05 F6 | 	mov	COUNT_, #0
05e98     B0 00 A0 FD | 	call	#pushregs_
05e9c     0C F0 07 F1 | 	add	ptra, #12
05ea0     04 5E 05 F1 | 	add	fp, #4
05ea4     AF 5C 62 FC | 	wrlong	arg01, fp
05ea8     AF 2A 02 F6 | 	mov	result1, fp
05eac     04 5E 85 F1 | 	sub	fp, #4
05eb0     AF F0 03 F6 | 	mov	ptra, fp
05eb4     BF 00 A0 FD | 	call	#popregs_
05eb8                 | __system____topofstack_ret
05eb8     2D 00 64 FD | 	ret
05ebc                 | 
05ebc                 | __system___make_methodptr
05ebc     04 5A 05 F6 | 	mov	COUNT_, #4
05ec0     B0 00 A0 FD | 	call	#pushregs_
05ec4     2E 6B 02 F6 | 	mov	local01, arg01
05ec8     2F 6D 02 F6 | 	mov	local02, arg02
05ecc     08 5C 06 F6 | 	mov	arg01, #8
05ed0     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05ed4     15 6F 0A F6 | 	mov	local03, result1 wz
05ed8     10 00 90 AD |  if_e	jmp	#LR__0279
05edc     37 6B 62 FC | 	wrlong	local01, local03
05ee0     37 71 02 F6 | 	mov	local04, local03
05ee4     04 70 06 F1 | 	add	local04, #4
05ee8     38 6D 62 FC | 	wrlong	local02, local04
05eec                 | LR__0279
05eec     37 2B 02 F6 | 	mov	result1, local03
05ef0     AF F0 03 F6 | 	mov	ptra, fp
05ef4     BF 00 A0 FD | 	call	#popregs_
05ef8                 | __system___make_methodptr_ret
05ef8     2D 00 64 FD | 	ret
05efc                 | 
05efc                 | __system___lockmem
05efc     02 5A 05 F6 | 	mov	COUNT_, #2
05f00     B0 00 A0 FD | 	call	#pushregs_
05f04     01 2A 62 FD | 	cogid	result1
05f08     15 6B 02 F6 | 	mov	local01, result1
05f0c     00 6B 06 F1 | 	add	local01, #256
05f10                 | LR__0280
05f10     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05f14     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05f18     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f1c     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f20     35 6D 0A F2 | 	cmp	local02, local01 wz
05f24     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
05f28     AF F0 03 F6 | 	mov	ptra, fp
05f2c     BF 00 A0 FD | 	call	#popregs_
05f30                 | __system___lockmem_ret
05f30     2D 00 64 FD | 	ret
05f34                 | 
05f34                 | __system___string_concat
05f34     07 5A 05 F6 | 	mov	COUNT_, #7
05f38     B0 00 A0 FD | 	call	#pushregs_
05f3c     2E 6B 02 F6 | 	mov	local01, arg01
05f40     2F 6D 02 F6 | 	mov	local02, arg02
05f44     35 5D 02 F6 | 	mov	arg01, local01
05f48     00 6E 06 F6 | 	mov	local03, #0
05f4c     C0 A0 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
05f50     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f54                 | LR__0281
05f54     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f58     01 6E 06 51 |  if_ne	add	local03, #1
05f5c     01 5C 06 51 |  if_ne	add	arg01, #1
05f60     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
05f64                 | LR__0282
05f64     37 73 02 F6 | 	mov	local05, local03
05f68     36 5D 02 F6 | 	mov	arg01, local02
05f6c     00 6E 06 F6 | 	mov	local03, #0
05f70     9C A0 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
05f74     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f78                 | LR__0283
05f78     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f7c     01 6E 06 51 |  if_ne	add	local03, #1
05f80     01 5C 06 51 |  if_ne	add	arg01, #1
05f84     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
05f88                 | LR__0284
05f88     37 2B 02 F6 | 	mov	result1, local03
05f8c     15 75 02 F6 | 	mov	local06, result1
05f90     39 5D 02 F6 | 	mov	arg01, local05
05f94     3A 5D 02 F1 | 	add	arg01, local06
05f98     01 5C 06 F1 | 	add	arg01, #1
05f9c     90 0B B0 FD | 	call	#__system___gc_alloc_managed
05fa0     15 77 0A F6 | 	mov	local07, result1 wz
05fa4     28 00 90 AD |  if_e	jmp	#LR__0285
05fa8     3B 5D 02 F6 | 	mov	arg01, local07
05fac     35 5F 02 F6 | 	mov	arg02, local01
05fb0     39 61 02 F6 | 	mov	arg03, local05
05fb4     DC FD BF FD | 	call	#__system____builtin_memmove
05fb8     3B 5D 02 F6 | 	mov	arg01, local07
05fbc     39 5D 02 F1 | 	add	arg01, local05
05fc0     01 74 06 F1 | 	add	local06, #1
05fc4     36 5F 02 F6 | 	mov	arg02, local02
05fc8     3A 61 02 F6 | 	mov	arg03, local06
05fcc     C4 FD BF FD | 	call	#__system____builtin_memmove
05fd0                 | LR__0285
05fd0     3B 2B 02 F6 | 	mov	result1, local07
05fd4     AF F0 03 F6 | 	mov	ptra, fp
05fd8     BF 00 A0 FD | 	call	#popregs_
05fdc                 | __system___string_concat_ret
05fdc     2D 00 64 FD | 	ret
05fe0                 | 
05fe0                 | __system___tx
05fe0     02 5A 05 F6 | 	mov	COUNT_, #2
05fe4     B0 00 A0 FD | 	call	#pushregs_
05fe8     2E 6B 02 F6 | 	mov	local01, arg01
05fec     0A 6A 0E F2 | 	cmp	local01, #10 wz
05ff0     20 00 90 5D |  if_ne	jmp	#LR__0286
05ff4     08 14 06 F1 | 	add	ptr___system__dat__, #8
05ff8     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
05ffc     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06000     02 6C CE F7 | 	test	local02, #2 wz
06004     0C 00 90 AD |  if_e	jmp	#LR__0286
06008     0D 6C 06 F6 | 	mov	local02, #13
0600c     0D 5C 06 F6 | 	mov	arg01, #13
06010     4C FC BF FD | 	call	#__system___txraw
06014                 | LR__0286
06014     35 5D 02 F6 | 	mov	arg01, local01
06018     44 FC BF FD | 	call	#__system___txraw
0601c     AF F0 03 F6 | 	mov	ptra, fp
06020     BF 00 A0 FD | 	call	#popregs_
06024                 | __system___tx_ret
06024     2D 00 64 FD | 	ret
06028                 | 
06028                 | __system___rx
06028     02 5A 05 F6 | 	mov	COUNT_, #2
0602c     B0 00 A0 FD | 	call	#pushregs_
06030                 | LR__0287
06030     00 5C 06 F6 | 	mov	arg01, #0
06034     70 FC BF FD | 	call	#__system___rxraw
06038     15 6B 02 F6 | 	mov	local01, result1
0603c     FF FF 7F FF 
06040     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
06044     E8 FF 9F AD |  if_e	jmp	#LR__0287
06048     0D 6A 0E F2 | 	cmp	local01, #13 wz
0604c     14 00 90 5D |  if_ne	jmp	#LR__0288
06050     08 14 06 F1 | 	add	ptr___system__dat__, #8
06054     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06058     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0605c     02 6C CE F7 | 	test	local02, #2 wz
06060     0A 6A 06 56 |  if_ne	mov	local01, #10
06064                 | LR__0288
06064     08 14 06 F1 | 	add	ptr___system__dat__, #8
06068     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0606c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06070     01 6C CE F7 | 	test	local02, #1 wz
06074     1C 00 90 AD |  if_e	jmp	#LR__0291
06078     7F 6A 0E F2 | 	cmp	local01, #127 wz
0607c     0C 00 90 5D |  if_ne	jmp	#LR__0289
06080     08 5C 06 F6 | 	mov	arg01, #8
06084     58 FF BF FD | 	call	#__system___tx
06088     08 00 90 FD | 	jmp	#LR__0290
0608c                 | LR__0289
0608c     35 5D 02 F6 | 	mov	arg01, local01
06090     4C FF BF FD | 	call	#__system___tx
06094                 | LR__0290
06094                 | LR__0291
06094     35 2B 02 F6 | 	mov	result1, local01
06098     AF F0 03 F6 | 	mov	ptra, fp
0609c     BF 00 A0 FD | 	call	#popregs_
060a0                 | __system___rx_ret
060a0     2D 00 64 FD | 	ret
060a4                 | 
060a4                 | __system___pinread
060a4     20 5C CE F7 | 	test	arg01, #32 wz
060a8     FF 31 02 56 |  if_ne	mov	_var01, inb
060ac     FE 31 02 A6 |  if_e	mov	_var01, ina
060b0     18 2B 02 F6 | 	mov	result1, _var01
060b4     2E 2B 42 F0 | 	shr	result1, arg01
060b8     06 5C 46 F0 | 	shr	arg01, #6
060bc     2E 2B 42 F7 | 	zerox	result1, arg01
060c0                 | __system___pinread_ret
060c0     2D 00 64 FD | 	ret
060c4                 | 
060c4                 | __system___waitms
060c4     03 5A 05 F6 | 	mov	COUNT_, #3
060c8     B0 00 A0 FD | 	call	#pushregs_
060cc     2E 6B 02 F6 | 	mov	local01, arg01
060d0     14 6C 06 FB | 	rdlong	local02, #20
060d4     40 9F 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
060d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
060dc                 | LR__0292
060dc     01 00 00 FF 
060e0     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
060e4     1F 6C 62 1D |  if_a	waitx	local02
060e8     01 00 00 1F 
060ec     E8 6B 86 11 |  if_a	sub	local01, ##1000
060f0     E8 FF 9F 1D |  if_a	jmp	#LR__0292
060f4                 | LR__0293
060f4     0C 14 06 F1 | 	add	ptr___system__dat__, #12
060f8     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
060fc     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06100     20 00 90 5D |  if_ne	jmp	#LR__0294
06104     36 0B 03 F6 | 	mov	muldiva_, local02
06108     01 00 00 FF 
0610c     E8 0D 07 F6 | 	mov	muldivb_, ##1000
06110     CC 00 A0 FD | 	call	#unsdivide_
06114     86 6F 02 F6 | 	mov	local03, muldivb_
06118     0C 14 06 F1 | 	add	ptr___system__dat__, #12
0611c     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06120     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
06124                 | LR__0294
06124     00 6A 5E F2 | 	cmps	local01, #0 wcz
06128     37 6B 02 1D |  if_a	qmul	local01, local03
0612c     18 5C 62 1D |  if_a	getqx	arg01
06130     1F 5C 62 1D |  if_a	waitx	arg01
06134     AF F0 03 F6 | 	mov	ptra, fp
06138     BF 00 A0 FD | 	call	#popregs_
0613c                 | __system___waitms_ret
0613c     2D 00 64 FD | 	ret
06140                 | 
06140                 | __system___waitus
06140     02 5A 05 F6 | 	mov	COUNT_, #2
06144     B0 00 A0 FD | 	call	#pushregs_
06148     2E 6B 02 F6 | 	mov	local01, arg01
0614c     10 14 06 F1 | 	add	ptr___system__dat__, #16
06150     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06154     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06158     20 00 90 5D |  if_ne	jmp	#LR__0295
0615c     14 0A 07 FB | 	rdlong	muldiva_, #20
06160     A1 07 00 FF 
06164     40 0C 07 F6 | 	mov	muldivb_, ##1000000
06168     CC 00 A0 FD | 	call	#unsdivide_
0616c     86 6D 02 F6 | 	mov	local02, muldivb_
06170     10 14 06 F1 | 	add	ptr___system__dat__, #16
06174     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06178     10 14 86 F1 | 	sub	ptr___system__dat__, #16
0617c                 | LR__0295
0617c     36 6B 02 FD | 	qmul	local01, local02
06180     18 5C 62 FD | 	getqx	arg01
06184     1F 5C 62 FD | 	waitx	arg01
06188     AF F0 03 F6 | 	mov	ptra, fp
0618c     BF 00 A0 FD | 	call	#popregs_
06190                 | __system___waitus_ret
06190     2D 00 64 FD | 	ret
06194                 | 
06194                 | __system___basic_open
06194     05 5A 05 F6 | 	mov	COUNT_, #5
06198     B0 00 A0 FD | 	call	#pushregs_
0619c     2F 6B 02 F6 | 	mov	local01, arg02
061a0     30 6D 02 F6 | 	mov	local02, arg03
061a4     31 6F 02 F6 | 	mov	local03, arg04
061a8     88 11 B0 FD | 	call	#__system____getftab
061ac     15 71 0A F6 | 	mov	local04, result1 wz
061b0     18 00 90 5D |  if_ne	jmp	#LR__0296
061b4     03 5D 02 F6 | 	mov	arg01, abortchain
061b8     0C 5E 06 F6 | 	mov	arg02, #12
061bc     01 60 06 F6 | 	mov	arg03, #1
061c0     F0 00 A0 FD | 	call	#__longjmp
061c4     01 2A 66 F6 | 	neg	result1, #1
061c8     70 00 90 FD | 	jmp	#LR__0300
061cc                 | LR__0296
061cc     00 6A 0E F2 | 	cmp	local01, #0 wz
061d0     48 00 90 AD |  if_e	jmp	#LR__0298
061d4     04 5C 06 F6 | 	mov	arg01, #4
061d8     54 09 B0 FD | 	call	#__system___gc_alloc_managed
061dc     15 73 0A F6 | 	mov	local05, result1 wz
061e0     18 00 90 5D |  if_ne	jmp	#LR__0297
061e4     03 5D 02 F6 | 	mov	arg01, abortchain
061e8     07 5E 06 F6 | 	mov	arg02, #7
061ec     01 60 06 F6 | 	mov	arg03, #1
061f0     F0 00 A0 FD | 	call	#__longjmp
061f4     01 2A 66 F6 | 	neg	result1, #1
061f8     40 00 90 FD | 	jmp	#LR__0300
061fc                 | LR__0297
061fc     39 6B 62 FC | 	wrlong	local01, local05
06200     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06204     39 5D 02 F6 | 	mov	arg01, local05
06208     B0 FC BF FD | 	call	#__system___make_methodptr
0620c     18 70 06 F1 | 	add	local04, #24
06210     38 2B 62 FC | 	wrlong	result1, local04
06214     18 70 86 F1 | 	sub	local04, #24
06218     0C 00 90 FD | 	jmp	#LR__0299
0621c                 | LR__0298
0621c     18 70 06 F1 | 	add	local04, #24
06220     38 6B 62 FC | 	wrlong	local01, local04
06224     18 70 86 F1 | 	sub	local04, #24
06228                 | LR__0299
06228     1C 70 06 F1 | 	add	local04, #28
0622c     38 6D 62 FC | 	wrlong	local02, local04
06230     04 70 06 F1 | 	add	local04, #4
06234     38 6F 62 FC | 	wrlong	local03, local04
06238     00 2A 06 F6 | 	mov	result1, #0
0623c                 | LR__0300
0623c     AF F0 03 F6 | 	mov	ptra, fp
06240     BF 00 A0 FD | 	call	#popregs_
06244                 | __system___basic_open_ret
06244     2D 00 64 FD | 	ret
06248                 | 
06248                 | __system___basic_print_char
06248     05 5A 05 F6 | 	mov	COUNT_, #5
0624c     B0 00 A0 FD | 	call	#pushregs_
06250     2F 6B 02 F6 | 	mov	local01, arg02
06254     A0 12 B0 FD | 	call	#__system___gettxfunc
06258     15 6D 0A F6 | 	mov	local02, result1 wz
0625c     00 2A 06 A6 |  if_e	mov	result1, #0
06260     24 00 90 AD |  if_e	jmp	#LR__0301
06264     36 6F 02 FB | 	rdlong	local03, local02
06268     04 6C 06 F1 | 	add	local02, #4
0626c     36 71 02 FB | 	rdlong	local04, local02
06270     35 5D 02 F6 | 	mov	arg01, local01
06274     07 73 02 F6 | 	mov	local05, objptr
06278     37 0F 02 F6 | 	mov	objptr, local03
0627c     2D 70 62 FD | 	call	local04
06280     39 0F 02 F6 | 	mov	objptr, local05
06284     01 2A 06 F6 | 	mov	result1, #1
06288                 | LR__0301
06288     AF F0 03 F6 | 	mov	ptra, fp
0628c     BF 00 A0 FD | 	call	#popregs_
06290                 | __system___basic_print_char_ret
06290     2D 00 64 FD | 	ret
06294                 | 
06294                 | __system___basic_print_string
06294     03 5A 05 F6 | 	mov	COUNT_, #3
06298     B0 00 A0 FD | 	call	#pushregs_
0629c     2F 6B 02 F6 | 	mov	local01, arg02
062a0     30 6D 02 F6 | 	mov	local02, arg03
062a4     50 12 B0 FD | 	call	#__system___gettxfunc
062a8     15 6F 0A F6 | 	mov	local03, result1 wz
062ac     00 2A 06 A6 |  if_e	mov	result1, #0
062b0     1C 00 90 AD |  if_e	jmp	#LR__0302
062b4     00 6A 0E F2 | 	cmp	local01, #0 wz
062b8     00 2A 06 A6 |  if_e	mov	result1, #0
062bc     10 00 90 AD |  if_e	jmp	#LR__0302
062c0     37 5D 02 F6 | 	mov	arg01, local03
062c4     36 5F 02 F6 | 	mov	arg02, local02
062c8     35 61 02 F6 | 	mov	arg03, local01
062cc     B0 00 B0 FD | 	call	#__system___fmtstr
062d0                 | LR__0302
062d0     AF F0 03 F6 | 	mov	ptra, fp
062d4     BF 00 A0 FD | 	call	#popregs_
062d8                 | __system___basic_print_string_ret
062d8     2D 00 64 FD | 	ret
062dc                 | 
062dc                 | __system___basic_print_integer
062dc     04 5A 05 F6 | 	mov	COUNT_, #4
062e0     B0 00 A0 FD | 	call	#pushregs_
062e4     2F 6B 02 F6 | 	mov	local01, arg02
062e8     30 6D 02 F6 | 	mov	local02, arg03
062ec     31 6F 02 F6 | 	mov	local03, arg04
062f0     04 12 B0 FD | 	call	#__system___gettxfunc
062f4     15 71 0A F6 | 	mov	local04, result1 wz
062f8     00 2A 06 A6 |  if_e	mov	result1, #0
062fc     14 00 90 AD |  if_e	jmp	#LR__0303
06300     38 5D 02 F6 | 	mov	arg01, local04
06304     36 5F 02 F6 | 	mov	arg02, local02
06308     35 61 02 F6 | 	mov	arg03, local01
0630c     37 63 02 F6 | 	mov	arg04, local03
06310     60 01 B0 FD | 	call	#__system___fmtnum
06314                 | LR__0303
06314     AF F0 03 F6 | 	mov	ptra, fp
06318     BF 00 A0 FD | 	call	#popregs_
0631c                 | __system___basic_print_integer_ret
0631c     2D 00 64 FD | 	ret
06320                 | 
06320                 | __system___fmtchar
06320     00 5A 05 F6 | 	mov	COUNT_, #0
06324     B0 00 A0 FD | 	call	#pushregs_
06328     18 F0 07 F1 | 	add	ptra, #24
0632c     04 5E 05 F1 | 	add	fp, #4
06330     AF 5C 62 FC | 	wrlong	arg01, fp
06334     04 5E 05 F1 | 	add	fp, #4
06338     AF 5E 62 FC | 	wrlong	arg02, fp
0633c     04 5E 05 F1 | 	add	fp, #4
06340     AF 60 62 FC | 	wrlong	arg03, fp
06344     04 5E 05 F1 | 	add	fp, #4
06348     AF 60 42 FC | 	wrbyte	arg03, fp
0634c     01 5E 05 F1 | 	add	fp, #1
06350     AF 00 48 FC | 	wrbyte	#0, fp
06354     01 5E 85 F1 | 	sub	fp, #1
06358     AF 60 02 F6 | 	mov	arg03, fp
0635c     0C 5E 85 F1 | 	sub	fp, #12
06360     AF 5C 02 FB | 	rdlong	arg01, fp
06364     04 5E 05 F1 | 	add	fp, #4
06368     AF 5E 02 FB | 	rdlong	arg02, fp
0636c     08 5E 85 F1 | 	sub	fp, #8
06370     0C 00 B0 FD | 	call	#__system___fmtstr
06374     AF F0 03 F6 | 	mov	ptra, fp
06378     BF 00 A0 FD | 	call	#popregs_
0637c                 | __system___fmtchar_ret
0637c     2D 00 64 FD | 	ret
06380                 | 
06380                 | __system___fmtstr
06380     0E 5A 05 F6 | 	mov	COUNT_, #14
06384     B0 00 A0 FD | 	call	#pushregs_
06388     2E 6B 02 F6 | 	mov	local01, arg01
0638c     2F 6D 02 F6 | 	mov	local02, arg02
06390     30 6F 02 F6 | 	mov	local03, arg03
06394     36 71 02 F6 | 	mov	local04, local02
06398     FF 70 06 F5 | 	and	local04, #255
0639c     37 5D 02 F6 | 	mov	arg01, local03
063a0     00 72 06 F6 | 	mov	local05, #0
063a4     68 9C 9F FE | 	loc	pa,	#(@LR__0305-@LR__0304)
063a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
063ac                 | LR__0304
063ac     2E 75 CA FA | 	rdbyte	local06, arg01 wz
063b0     01 72 06 51 |  if_ne	add	local05, #1
063b4     01 5C 06 51 |  if_ne	add	arg01, #1
063b8     F0 FF 9F 5D |  if_ne	jmp	#LR__0304
063bc                 | LR__0305
063bc     39 2B 02 F6 | 	mov	result1, local05
063c0     15 77 02 F6 | 	mov	local07, result1
063c4     00 70 0E F2 | 	cmp	local04, #0 wz
063c8     04 00 90 AD |  if_e	jmp	#LR__0306
063cc     38 77 7A F3 | 	fles	local07, local04 wcz
063d0                 | LR__0306
063d0     35 5D 02 F6 | 	mov	arg01, local01
063d4     36 5F 02 F6 | 	mov	arg02, local02
063d8     3B 61 02 F6 | 	mov	arg03, local07
063dc     02 62 06 F6 | 	mov	arg04, #2
063e0     C8 0F B0 FD | 	call	#__system___fmtpad
063e4     15 79 02 F6 | 	mov	local08, result1
063e8     00 78 5E F2 | 	cmps	local08, #0 wcz
063ec     3C 2B 02 C6 |  if_b	mov	result1, local08
063f0     74 00 90 CD |  if_b	jmp	#LR__0309
063f4     00 76 5E F2 | 	cmps	local07, #0 wcz
063f8     44 00 90 ED |  if_be	jmp	#LR__0308
063fc     3B 7B 02 F6 | 	mov	local09, local07
06400                 | LR__0307
06400     35 7D 02 F6 | 	mov	local10, local01
06404     3E 7F 02 FB | 	rdlong	local11, local10
06408     04 7C 06 F1 | 	add	local10, #4
0640c     3E 81 02 FB | 	rdlong	local12, local10
06410     37 5D C2 FA | 	rdbyte	arg01, local03
06414     07 83 02 F6 | 	mov	local13, objptr
06418     3F 0F 02 F6 | 	mov	objptr, local11
0641c     01 6E 06 F1 | 	add	local03, #1
06420     2D 80 62 FD | 	call	local12
06424     41 0F 02 F6 | 	mov	objptr, local13
06428     15 85 02 F6 | 	mov	local14, result1
0642c     00 84 5E F2 | 	cmps	local14, #0 wcz
06430     42 2B 02 C6 |  if_b	mov	result1, local14
06434     30 00 90 CD |  if_b	jmp	#LR__0309
06438     42 79 02 F1 | 	add	local08, local14
0643c     F0 7B 6E FB | 	djnz	local09, #LR__0307
06440                 | LR__0308
06440     35 5D 02 F6 | 	mov	arg01, local01
06444     36 5F 02 F6 | 	mov	arg02, local02
06448     3B 61 02 F6 | 	mov	arg03, local07
0644c     01 62 06 F6 | 	mov	arg04, #1
06450     58 0F B0 FD | 	call	#__system___fmtpad
06454     15 85 02 F6 | 	mov	local14, result1
06458     00 84 5E F2 | 	cmps	local14, #0 wcz
0645c     42 2B 02 C6 |  if_b	mov	result1, local14
06460     42 79 02 31 |  if_ae	add	local08, local14
06464     3C 2B 02 36 |  if_ae	mov	result1, local08
06468                 | LR__0309
06468     AF F0 03 F6 | 	mov	ptra, fp
0646c     BF 00 A0 FD | 	call	#popregs_
06470                 | __system___fmtstr_ret
06470     2D 00 64 FD | 	ret
06474                 | 
06474                 | __system___fmtnum
06474     07 5A 05 F6 | 	mov	COUNT_, #7
06478     B0 00 A0 FD | 	call	#pushregs_
0647c     78 F0 07 F1 | 	add	ptra, #120
06480     04 5E 05 F1 | 	add	fp, #4
06484     AF 5C 62 FC | 	wrlong	arg01, fp
06488     04 5E 05 F1 | 	add	fp, #4
0648c     AF 5E 62 FC | 	wrlong	arg02, fp
06490     04 5E 05 F1 | 	add	fp, #4
06494     AF 60 62 FC | 	wrlong	arg03, fp
06498     04 5E 05 F1 | 	add	fp, #4
0649c     AF 62 62 FC | 	wrlong	arg04, fp
064a0     04 5E 05 F1 | 	add	fp, #4
064a4     AF 6A 02 F6 | 	mov	local01, fp
064a8     44 5E 05 F1 | 	add	fp, #68
064ac     AF 6A 62 FC | 	wrlong	local01, fp
064b0     04 5E 05 F1 | 	add	fp, #4
064b4     AF 00 68 FC | 	wrlong	#0, fp
064b8     54 5E 85 F1 | 	sub	fp, #84
064bc     AF 6A 02 FB | 	rdlong	local01, fp
064c0     10 6A 46 F0 | 	shr	local01, #16
064c4     3F 6A 06 F5 | 	and	local01, #63
064c8     58 5E 05 F1 | 	add	fp, #88
064cc     AF 6A 62 FC | 	wrlong	local01, fp
064d0     58 5E 85 F1 | 	sub	fp, #88
064d4     AF 6A 02 FB | 	rdlong	local01, fp
064d8     FF 6A 06 F5 | 	and	local01, #255
064dc     5C 5E 05 F1 | 	add	fp, #92
064e0     AF 6A 62 FC | 	wrlong	local01, fp
064e4     5C 5E 85 F1 | 	sub	fp, #92
064e8     AF 6A 02 FB | 	rdlong	local01, fp
064ec     1A 6A 46 F0 | 	shr	local01, #26
064f0     03 6A 06 F5 | 	and	local01, #3
064f4     60 5E 05 F1 | 	add	fp, #96
064f8     AF 6A 62 FC | 	wrlong	local01, fp
064fc     08 5E 85 F1 | 	sub	fp, #8
06500     AF 6A 02 FB | 	rdlong	local01, fp
06504     60 5E 85 F1 | 	sub	fp, #96
06508     00 6A 5E F2 | 	cmps	local01, #0 wcz
0650c     14 00 90 ED |  if_be	jmp	#LR__0310
06510     60 5E 05 F1 | 	add	fp, #96
06514     AF 6A 02 FB | 	rdlong	local01, fp
06518     01 6A 86 F1 | 	sub	local01, #1
0651c     AF 6A 62 FC | 	wrlong	local01, fp
06520     60 5E 85 F1 | 	sub	fp, #96
06524                 | LR__0310
06524     64 5E 05 F1 | 	add	fp, #100
06528     AF 6C 02 FB | 	rdlong	local02, fp
0652c     64 5E 85 F1 | 	sub	fp, #100
06530     40 6C 5E F2 | 	cmps	local02, #64 wcz
06534     14 00 90 1D |  if_a	jmp	#LR__0311
06538     64 5E 05 F1 | 	add	fp, #100
0653c     AF 6E 02 FB | 	rdlong	local03, fp
06540     64 5E 85 F1 | 	sub	fp, #100
06544     37 71 0A F6 | 	mov	local04, local03 wz
06548     0C 00 90 5D |  if_ne	jmp	#LR__0312
0654c                 | LR__0311
0654c     64 5E 05 F1 | 	add	fp, #100
06550     AF 80 68 FC | 	wrlong	#64, fp
06554     64 5E 85 F1 | 	sub	fp, #100
06558                 | LR__0312
06558     68 5E 05 F1 | 	add	fp, #104
0655c     AF 6A 02 FB | 	rdlong	local01, fp
06560     68 5E 85 F1 | 	sub	fp, #104
06564     03 6A 0E F2 | 	cmp	local01, #3 wz
06568     10 00 90 5D |  if_ne	jmp	#LR__0313
0656c     68 5E 05 F1 | 	add	fp, #104
06570     AF 00 68 FC | 	wrlong	#0, fp
06574     68 5E 85 F1 | 	sub	fp, #104
06578     30 00 90 FD | 	jmp	#LR__0315
0657c                 | LR__0313
0657c     0C 5E 05 F1 | 	add	fp, #12
06580     AF 6A 02 FB | 	rdlong	local01, fp
06584     0C 5E 85 F1 | 	sub	fp, #12
06588     00 6A 5E F2 | 	cmps	local01, #0 wcz
0658c     1C 00 90 3D |  if_ae	jmp	#LR__0314
06590     68 5E 05 F1 | 	add	fp, #104
06594     AF 08 68 FC | 	wrlong	#4, fp
06598     5C 5E 85 F1 | 	sub	fp, #92
0659c     AF 6A 02 FB | 	rdlong	local01, fp
065a0     35 6B 62 F6 | 	neg	local01, local01
065a4     AF 6A 62 FC | 	wrlong	local01, fp
065a8     0C 5E 85 F1 | 	sub	fp, #12
065ac                 | LR__0314
065ac                 | LR__0315
065ac     68 5E 05 F1 | 	add	fp, #104
065b0     AF 6A 0A FB | 	rdlong	local01, fp wz
065b4     68 5E 85 F1 | 	sub	fp, #104
065b8     EC 00 90 AD |  if_e	jmp	#LR__0322
065bc     5C 5E 05 F1 | 	add	fp, #92
065c0     AF 70 02 FB | 	rdlong	local04, fp
065c4     01 70 06 F1 | 	add	local04, #1
065c8     AF 70 62 FC | 	wrlong	local04, fp
065cc     04 5E 05 F1 | 	add	fp, #4
065d0     AF 6A 02 FB | 	rdlong	local01, fp
065d4     04 5E 05 F1 | 	add	fp, #4
065d8     AF 70 02 FB | 	rdlong	local04, fp
065dc     64 5E 85 F1 | 	sub	fp, #100
065e0     38 6B 0A F2 | 	cmp	local01, local04 wz
065e4     3C 00 90 5D |  if_ne	jmp	#LR__0317
065e8     60 5E 05 F1 | 	add	fp, #96
065ec     AF 70 02 FB | 	rdlong	local04, fp
065f0     01 70 86 F1 | 	sub	local04, #1
065f4     AF 70 62 FC | 	wrlong	local04, fp
065f8     AF 6A 0A FB | 	rdlong	local01, fp wz
065fc     60 5E 85 F1 | 	sub	fp, #96
06600     20 00 90 5D |  if_ne	jmp	#LR__0316
06604     04 5E 05 F1 | 	add	fp, #4
06608     AF 5C 02 FB | 	rdlong	arg01, fp
0660c     04 5E 05 F1 | 	add	fp, #4
06610     AF 5E 02 FB | 	rdlong	arg02, fp
06614     08 5E 85 F1 | 	sub	fp, #8
06618     23 60 06 F6 | 	mov	arg03, #35
0661c     00 FD BF FD | 	call	#__system___fmtchar
06620     70 01 90 FD | 	jmp	#LR__0327
06624                 | LR__0316
06624                 | LR__0317
06624     68 5E 05 F1 | 	add	fp, #104
06628     AF 6A 02 FB | 	rdlong	local01, fp
0662c     68 5E 85 F1 | 	sub	fp, #104
06630     02 6A 0E F2 | 	cmp	local01, #2 wz
06634     20 00 90 5D |  if_ne	jmp	#LR__0318
06638     58 5E 05 F1 | 	add	fp, #88
0663c     AF 6A 02 FB | 	rdlong	local01, fp
06640     35 71 02 F6 | 	mov	local04, local01
06644     01 70 06 F1 | 	add	local04, #1
06648     AF 70 62 FC | 	wrlong	local04, fp
0664c     58 5E 85 F1 | 	sub	fp, #88
06650     35 41 48 FC | 	wrbyte	#32, local01
06654     50 00 90 FD | 	jmp	#LR__0321
06658                 | LR__0318
06658     68 5E 05 F1 | 	add	fp, #104
0665c     AF 6A 02 FB | 	rdlong	local01, fp
06660     68 5E 85 F1 | 	sub	fp, #104
06664     04 6A 0E F2 | 	cmp	local01, #4 wz
06668     20 00 90 5D |  if_ne	jmp	#LR__0319
0666c     58 5E 05 F1 | 	add	fp, #88
06670     AF 6A 02 FB | 	rdlong	local01, fp
06674     35 71 02 F6 | 	mov	local04, local01
06678     01 70 06 F1 | 	add	local04, #1
0667c     AF 70 62 FC | 	wrlong	local04, fp
06680     58 5E 85 F1 | 	sub	fp, #88
06684     35 5B 48 FC | 	wrbyte	#45, local01
06688     1C 00 90 FD | 	jmp	#LR__0320
0668c                 | LR__0319
0668c     58 5E 05 F1 | 	add	fp, #88
06690     AF 6A 02 FB | 	rdlong	local01, fp
06694     35 71 02 F6 | 	mov	local04, local01
06698     01 70 06 F1 | 	add	local04, #1
0669c     AF 70 62 FC | 	wrlong	local04, fp
066a0     58 5E 85 F1 | 	sub	fp, #88
066a4     35 57 48 FC | 	wrbyte	#43, local01
066a8                 | LR__0320
066a8                 | LR__0321
066a8                 | LR__0322
066a8     58 5E 05 F1 | 	add	fp, #88
066ac     AF 5C 02 FB | 	rdlong	arg01, fp
066b0     4C 5E 85 F1 | 	sub	fp, #76
066b4     AF 5E 02 FB | 	rdlong	arg02, fp
066b8     04 5E 05 F1 | 	add	fp, #4
066bc     AF 60 02 FB | 	rdlong	arg03, fp
066c0     50 5E 05 F1 | 	add	fp, #80
066c4     AF 62 02 FB | 	rdlong	arg04, fp
066c8     00 72 06 F6 | 	mov	local05, #0
066cc     58 5E 85 F1 | 	sub	fp, #88
066d0     AF 74 02 FB | 	rdlong	local06, fp
066d4     08 5E 85 F1 | 	sub	fp, #8
066d8     1D 74 2E F4 | 	testbn	local06, #29 wz
066dc     01 72 06 56 |  if_ne	mov	local05, #1
066e0     39 65 02 F6 | 	mov	arg05, local05
066e4     84 0D B0 FD | 	call	#__system___uitoa
066e8     15 77 02 F6 | 	mov	local07, result1
066ec     5C 5E 05 F1 | 	add	fp, #92
066f0     AF 6A 02 FB | 	rdlong	local01, fp
066f4     3B 6B 02 F1 | 	add	local01, local07
066f8     AF 6A 62 FC | 	wrlong	local01, fp
066fc     08 5E 05 F1 | 	add	fp, #8
06700     AF 70 02 FB | 	rdlong	local04, fp
06704     64 5E 85 F1 | 	sub	fp, #100
06708     38 6B 5A F2 | 	cmps	local01, local04 wcz
0670c     64 00 90 ED |  if_be	jmp	#LR__0326
06710     2C 99 9F FE | 	loc	pa,	#(@LR__0324-@LR__0323)
06714     93 00 A0 FD | 	call	#FCACHE_LOAD_
06718                 | LR__0323
06718     64 5E 05 F1 | 	add	fp, #100
0671c     AF 6A 02 FB | 	rdlong	local01, fp
06720     35 71 02 F6 | 	mov	local04, local01
06724     01 70 86 F1 | 	sub	local04, #1
06728     AF 70 62 FC | 	wrlong	local04, fp
0672c     64 5E 85 F1 | 	sub	fp, #100
06730     00 6A 5E F2 | 	cmps	local01, #0 wcz
06734     20 00 90 ED |  if_be	jmp	#LR__0325
06738     58 5E 05 F1 | 	add	fp, #88
0673c     AF 6A 02 FB | 	rdlong	local01, fp
06740     35 71 02 F6 | 	mov	local04, local01
06744     01 70 06 F1 | 	add	local04, #1
06748     AF 70 62 FC | 	wrlong	local04, fp
0674c     58 5E 85 F1 | 	sub	fp, #88
06750     35 47 48 FC | 	wrbyte	#35, local01
06754     C0 FF 9F FD | 	jmp	#LR__0323
06758                 | LR__0324
06758                 | LR__0325
06758     58 5E 05 F1 | 	add	fp, #88
0675c     AF 6A 02 FB | 	rdlong	local01, fp
06760     35 71 02 F6 | 	mov	local04, local01
06764     01 70 06 F1 | 	add	local04, #1
06768     AF 70 62 FC | 	wrlong	local04, fp
0676c     58 5E 85 F1 | 	sub	fp, #88
06770     35 01 48 FC | 	wrbyte	#0, local01
06774                 | LR__0326
06774     14 5E 05 F1 | 	add	fp, #20
06778     AF 60 02 F6 | 	mov	arg03, fp
0677c     10 5E 85 F1 | 	sub	fp, #16
06780     AF 5C 02 FB | 	rdlong	arg01, fp
06784     04 5E 05 F1 | 	add	fp, #4
06788     AF 5E 02 FB | 	rdlong	arg02, fp
0678c     08 5E 85 F1 | 	sub	fp, #8
06790     EC FB BF FD | 	call	#__system___fmtstr
06794                 | LR__0327
06794     AF F0 03 F6 | 	mov	ptra, fp
06798     BF 00 A0 FD | 	call	#popregs_
0679c                 | __system___fmtnum_ret
0679c     2D 00 64 FD | 	ret
067a0                 | 
067a0                 | __system__String_S
067a0     06 5A 05 F6 | 	mov	COUNT_, #6
067a4     B0 00 A0 FD | 	call	#pushregs_
067a8     2E 6B 02 F6 | 	mov	local01, arg01
067ac     2F 6D 02 F6 | 	mov	local02, arg02
067b0     36 5D 02 F6 | 	mov	arg01, local02
067b4     00 6E 06 F6 | 	mov	local03, #0
067b8     54 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
067bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
067c0                 | LR__0328
067c0     2E 71 CA FA | 	rdbyte	local04, arg01 wz
067c4     01 6E 06 51 |  if_ne	add	local03, #1
067c8     01 5C 06 51 |  if_ne	add	arg01, #1
067cc     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
067d0                 | LR__0329
067d0     37 2B 0A F6 | 	mov	result1, local03 wz
067d4     40 00 00 AF 
067d8     AA 2A 06 A6 |  if_e	mov	result1, ##@LR__0446
067dc     50 00 90 AD |  if_e	jmp	#LR__0331
067e0     00 6A 5E F2 | 	cmps	local01, #0 wcz
067e4     40 00 00 EF 
067e8     AB 2A 06 E6 |  if_be	mov	result1, ##@LR__0447
067ec     40 00 90 ED |  if_be	jmp	#LR__0331
067f0     35 73 02 F6 | 	mov	local05, local01
067f4     01 72 06 F1 | 	add	local05, #1
067f8     39 5D 02 F6 | 	mov	arg01, local05
067fc     01 5C 06 F1 | 	add	arg01, #1
06800     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06804     15 75 0A F6 | 	mov	local06, result1 wz
06808     20 00 90 AD |  if_e	jmp	#LR__0330
0680c     36 5F C2 FA | 	rdbyte	arg02, local02
06810     3A 5D 02 F6 | 	mov	arg01, local06
06814     35 61 02 F6 | 	mov	arg03, local01
06818     A0 00 A0 FD | 	call	#\builtin_bytefill_
0681c     3A 73 02 F1 | 	add	local05, local06
06820     39 01 48 FC | 	wrbyte	#0, local05
06824     3A 2B 02 F6 | 	mov	result1, local06
06828     04 00 90 FD | 	jmp	#LR__0331
0682c                 | LR__0330
0682c     3A 2B 02 F6 | 	mov	result1, local06
06830                 | LR__0331
06830     AF F0 03 F6 | 	mov	ptra, fp
06834     BF 00 A0 FD | 	call	#popregs_
06838                 | __system__String_S_ret
06838     2D 00 64 FD | 	ret
0683c                 | 
0683c                 | __system___gc_ptrs
0683c     0A 5A 05 F6 | 	mov	COUNT_, #10
06840     B0 00 A0 FD | 	call	#pushregs_
06844     02 6B 02 F6 | 	mov	local01, __heap_ptr
06848     35 6D 02 F6 | 	mov	local02, local01
0684c     07 00 00 FF 
06850     F8 6D 06 F1 | 	add	local02, ##4088
06854     35 6F 0A FB | 	rdlong	local03, local01 wz
06858     74 00 90 5D |  if_ne	jmp	#LR__0332
0685c     36 71 02 F6 | 	mov	local04, local02
06860     35 71 82 F1 | 	sub	local04, local01
06864     35 03 58 FC | 	wrword	#1, local01
06868     35 73 02 F6 | 	mov	local05, local01
0686c     02 72 06 F1 | 	add	local05, #2
06870     36 00 80 FF 
06874     39 21 59 FC | 	wrword	##27792, local05
06878     35 75 02 F6 | 	mov	local06, local01
0687c     04 74 06 F1 | 	add	local06, #4
06880     3A 01 58 FC | 	wrword	#0, local06
06884     35 77 02 F6 | 	mov	local07, local01
06888     06 76 06 F1 | 	add	local07, #6
0688c     3B 03 58 FC | 	wrword	#1, local07
06890     10 6A 06 F1 | 	add	local01, #16
06894     38 6F 52 F6 | 	abs	local03, local04 wc
06898     04 6E 46 F0 | 	shr	local03, #4
0689c     37 6F 62 C6 |  if_b	neg	local03, local03
068a0     35 6F 52 FC | 	wrword	local03, local01
068a4     35 79 02 F6 | 	mov	local08, local01
068a8     02 78 06 F1 | 	add	local08, #2
068ac     36 00 80 FF 
068b0     3C 1F 59 FC | 	wrword	##27791, local08
068b4     35 7B 02 F6 | 	mov	local09, local01
068b8     04 7A 06 F1 | 	add	local09, #4
068bc     3D 01 58 FC | 	wrword	#0, local09
068c0     35 7D 02 F6 | 	mov	local10, local01
068c4     06 7C 06 F1 | 	add	local10, #6
068c8     3E 01 58 FC | 	wrword	#0, local10
068cc     10 6A 86 F1 | 	sub	local01, #16
068d0                 | LR__0332
068d0     36 2D 02 F6 | 	mov	result2, local02
068d4     35 2B 02 F6 | 	mov	result1, local01
068d8     AF F0 03 F6 | 	mov	ptra, fp
068dc     BF 00 A0 FD | 	call	#popregs_
068e0                 | __system___gc_ptrs_ret
068e0     2D 00 64 FD | 	ret
068e4                 | 
068e4                 | __system___gc_nextBlockPtr
068e4     02 5A 05 F6 | 	mov	COUNT_, #2
068e8     B0 00 A0 FD | 	call	#pushregs_
068ec     2E 6B 02 F6 | 	mov	local01, arg01
068f0     35 6D EA FA | 	rdword	local02, local01 wz
068f4     10 00 90 5D |  if_ne	jmp	#LR__0333
068f8     40 00 00 FF 
068fc     AC 5C 06 F6 | 	mov	arg01, ##@LR__0448
06900     F8 01 B0 FD | 	call	#__system___gc_errmsg
06904     0C 00 90 FD | 	jmp	#LR__0334
06908                 | LR__0333
06908     04 6C 66 F0 | 	shl	local02, #4
0690c     35 2B 02 F6 | 	mov	result1, local01
06910     36 2B 02 F1 | 	add	result1, local02
06914                 | LR__0334
06914     AF F0 03 F6 | 	mov	ptra, fp
06918     BF 00 A0 FD | 	call	#popregs_
0691c                 | __system___gc_nextBlockPtr_ret
0691c     2D 00 64 FD | 	ret
06920                 | 
06920                 | __system___gc_tryalloc
06920     1B 5A 05 F6 | 	mov	COUNT_, #27
06924     B0 00 A0 FD | 	call	#pushregs_
06928     2E 6B 02 F6 | 	mov	local01, arg01
0692c     2F 6D 02 F6 | 	mov	local02, arg02
06930     08 FF BF FD | 	call	#__system___gc_ptrs
06934     15 6F 02 F6 | 	mov	local03, result1
06938     16 71 02 F6 | 	mov	local04, result2
0693c     37 73 02 F6 | 	mov	local05, local03
06940     00 74 06 F6 | 	mov	local06, #0
06944     10 97 9F FE | 	loc	pa,	#(@LR__0336-@LR__0335)
06948     93 00 A0 FD | 	call	#FCACHE_LOAD_
0694c                 | LR__0335
0694c     39 77 02 F6 | 	mov	local07, local05
06950     06 72 06 F1 | 	add	local05, #6
06954     39 79 02 F6 | 	mov	local08, local05
06958     37 7B 02 F6 | 	mov	local09, local03
0695c     3C 7D E2 FA | 	rdword	local10, local08
06960     3D 5D 02 F6 | 	mov	arg01, local09
06964     3E 5F 0A F6 | 	mov	arg02, local10 wz
06968     00 2A 06 A6 |  if_e	mov	result1, #0
0696c     04 5E 66 50 |  if_ne	shl	arg02, #4
06970     2F 5D 02 51 |  if_ne	add	arg01, arg02
06974     2E 2B 02 56 |  if_ne	mov	result1, arg01
06978     15 7F 02 F6 | 	mov	local11, result1
0697c     3F 73 0A F6 | 	mov	local05, local11 wz
06980     39 7B 02 56 |  if_ne	mov	local09, local05
06984     3D 81 02 56 |  if_ne	mov	local12, local09
06988     40 75 E2 5A |  if_ne	rdword	local06, local12
0698c     00 72 0E F2 | 	cmp	local05, #0 wz
06990     10 00 90 AD |  if_e	jmp	#LR__0337
06994     38 73 5A F2 | 	cmps	local05, local04 wcz
06998     08 00 90 3D |  if_ae	jmp	#LR__0337
0699c     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069a0     A8 FF 9F 1D |  if_a	jmp	#LR__0335
069a4                 | LR__0336
069a4                 | LR__0337
069a4     00 72 0E F2 | 	cmp	local05, #0 wz
069a8     39 2B 02 A6 |  if_e	mov	result1, local05
069ac     40 01 90 AD |  if_e	jmp	#LR__0340
069b0     39 83 02 F6 | 	mov	local13, local05
069b4     06 82 06 F1 | 	add	local13, #6
069b8     41 85 E2 FA | 	rdword	local14, local13
069bc     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069c0     CC 00 90 3D |  if_ae	jmp	#LR__0339
069c4     39 87 02 F6 | 	mov	local15, local05
069c8     43 6B 52 FC | 	wrword	local01, local15
069cc     35 89 02 F6 | 	mov	local16, local01
069d0     04 88 66 F0 | 	shl	local16, #4
069d4     39 8B 02 F6 | 	mov	local17, local05
069d8     44 8B 02 F1 | 	add	local17, local16
069dc     3A 8D 02 F6 | 	mov	local18, local06
069e0     35 8D 82 F1 | 	sub	local18, local01
069e4     45 8F 02 F6 | 	mov	local19, local17
069e8     47 8D 52 FC | 	wrword	local18, local19
069ec     45 91 02 F6 | 	mov	local20, local17
069f0     02 90 06 F1 | 	add	local20, #2
069f4     36 00 80 FF 
069f8     48 1F 59 FC | 	wrword	##27791, local20
069fc     45 93 02 F6 | 	mov	local21, local17
06a00     04 92 06 F1 | 	add	local21, #4
06a04     39 5F 0A F6 | 	mov	arg02, local05 wz
06a08     00 2A 06 A6 |  if_e	mov	result1, #0
06a0c     37 5F 82 51 |  if_ne	sub	arg02, local03
06a10     04 5E 46 50 |  if_ne	shr	arg02, #4
06a14     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a18     49 2B 52 FC | 	wrword	result1, local21
06a1c     45 95 02 F6 | 	mov	local22, local17
06a20     41 7B E2 FA | 	rdword	local09, local13
06a24     06 94 06 F1 | 	add	local22, #6
06a28     4A 7B 52 FC | 	wrword	local09, local22
06a2c     45 97 02 F6 | 	mov	local23, local17
06a30     4B 5F 0A F6 | 	mov	arg02, local23 wz
06a34     00 2A 06 A6 |  if_e	mov	result1, #0
06a38     37 5F 82 51 |  if_ne	sub	arg02, local03
06a3c     04 5E 46 50 |  if_ne	shr	arg02, #4
06a40     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a44     15 85 02 F6 | 	mov	local14, result1
06a48     45 5D 02 F6 | 	mov	arg01, local17
06a4c     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06a50     15 99 0A F6 | 	mov	local24, result1 wz
06a54     38 00 90 AD |  if_e	jmp	#LR__0338
06a58     38 99 5A F2 | 	cmps	local24, local04 wcz
06a5c     30 00 90 3D |  if_ae	jmp	#LR__0338
06a60     4C 9B 02 F6 | 	mov	local25, local24
06a64     04 9A 06 F1 | 	add	local25, #4
06a68     37 7B 02 F6 | 	mov	local09, local03
06a6c     4B 7D 02 F6 | 	mov	local10, local23
06a70     3D 5D 02 F6 | 	mov	arg01, local09
06a74     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a78     00 2A 06 A6 |  if_e	mov	result1, #0
06a7c     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06a80     04 5E 46 50 |  if_ne	shr	arg02, #4
06a84     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a88     15 7F 02 F6 | 	mov	local11, result1
06a8c     4D 7F 52 FC | 	wrword	local11, local25
06a90                 | LR__0338
06a90                 | LR__0339
06a90     06 76 06 F1 | 	add	local07, #6
06a94     3B 85 52 FC | 	wrword	local14, local07
06a98     36 00 00 FF 
06a9c     80 7A 06 F6 | 	mov	local09, ##27776
06aa0     36 7B 42 F5 | 	or	local09, local02
06aa4     39 9D 02 F6 | 	mov	local26, local05
06aa8     02 9C 06 F1 | 	add	local26, #2
06aac     01 2A 62 FD | 	cogid	result1
06ab0     15 7B 42 F5 | 	or	local09, result1
06ab4     4E 7B 52 FC | 	wrword	local09, local26
06ab8     37 9F 02 F6 | 	mov	local27, local03
06abc     08 9E 06 F1 | 	add	local27, #8
06ac0     4F 7B E2 FA | 	rdword	local09, local27
06ac4     41 7B 52 FC | 	wrword	local09, local13
06ac8     39 5F 0A F6 | 	mov	arg02, local05 wz
06acc     00 2A 06 A6 |  if_e	mov	result1, #0
06ad0     37 5F 82 51 |  if_ne	sub	arg02, local03
06ad4     04 5E 46 50 |  if_ne	shr	arg02, #4
06ad8     2F 2B 02 56 |  if_ne	mov	result1, arg02
06adc     4F 2B 52 FC | 	wrword	result1, local27
06ae0     08 72 06 F1 | 	add	local05, #8
06ae4     39 2B 02 F6 | 	mov	result1, local05
06ae8     00 C0 31 FF 
06aec     00 2A 46 F5 | 	or	result1, ##1669332992
06af0                 | LR__0340
06af0     AF F0 03 F6 | 	mov	ptra, fp
06af4     BF 00 A0 FD | 	call	#popregs_
06af8                 | __system___gc_tryalloc_ret
06af8     2D 00 64 FD | 	ret
06afc                 | 
06afc                 | __system___gc_errmsg
06afc     02 5A 05 F6 | 	mov	COUNT_, #2
06b00     B0 00 A0 FD | 	call	#pushregs_
06b04     2E 6B 02 F6 | 	mov	local01, arg01
06b08                 | LR__0341
06b08     35 6D CA FA | 	rdbyte	local02, local01 wz
06b0c     01 6A 06 F1 | 	add	local01, #1
06b10     0C 00 90 AD |  if_e	jmp	#LR__0342
06b14     36 5D 02 F6 | 	mov	arg01, local02
06b18     C4 F4 BF FD | 	call	#__system___tx
06b1c     E8 FF 9F FD | 	jmp	#LR__0341
06b20                 | LR__0342
06b20     00 2A 06 F6 | 	mov	result1, #0
06b24     AF F0 03 F6 | 	mov	ptra, fp
06b28     BF 00 A0 FD | 	call	#popregs_
06b2c                 | __system___gc_errmsg_ret
06b2c     2D 00 64 FD | 	ret
06b30                 | 
06b30                 | __system___gc_alloc_managed
06b30     02 5A 05 F6 | 	mov	COUNT_, #2
06b34     B0 00 A0 FD | 	call	#pushregs_
06b38     2E 6B 02 F6 | 	mov	local01, arg01
06b3c     00 5E 06 F6 | 	mov	arg02, #0
06b40     30 00 B0 FD | 	call	#__system___gc_doalloc
06b44     15 6D 0A F6 | 	mov	local02, result1 wz
06b48     18 00 90 5D |  if_ne	jmp	#LR__0343
06b4c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06b50     10 00 90 ED |  if_be	jmp	#LR__0343
06b54     40 00 00 FF 
06b58     C8 5C 06 F6 | 	mov	arg01, ##@LR__0449
06b5c     9C FF BF FD | 	call	#__system___gc_errmsg
06b60     04 00 90 FD | 	jmp	#LR__0344
06b64                 | LR__0343
06b64     36 2B 02 F6 | 	mov	result1, local02
06b68                 | LR__0344
06b68     AF F0 03 F6 | 	mov	ptra, fp
06b6c     BF 00 A0 FD | 	call	#popregs_
06b70                 | __system___gc_alloc_managed_ret
06b70     2D 00 64 FD | 	ret
06b74                 | 
06b74                 | __system___gc_doalloc
06b74     07 5A 05 F6 | 	mov	COUNT_, #7
06b78     B0 00 A0 FD | 	call	#pushregs_
06b7c     2E 6B 0A F6 | 	mov	local01, arg01 wz
06b80     2F 6D 02 F6 | 	mov	local02, arg02
06b84     00 2A 06 A6 |  if_e	mov	result1, #0
06b88     8C 00 90 AD |  if_e	jmp	#LR__0352
06b8c     17 6A 06 F1 | 	add	local01, #23
06b90     0F 6A 26 F5 | 	andn	local01, #15
06b94     04 6A 46 F0 | 	shr	local01, #4
06b98     14 14 06 F1 | 	add	ptr___system__dat__, #20
06b9c     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06ba0     37 5D 02 F6 | 	mov	arg01, local03
06ba4     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06ba8     50 F3 BF FD | 	call	#__system___lockmem
06bac     35 5D 02 F6 | 	mov	arg01, local01
06bb0     36 5F 02 F6 | 	mov	arg02, local02
06bb4     68 FD BF FD | 	call	#__system___gc_tryalloc
06bb8     15 71 0A F6 | 	mov	local04, result1 wz
06bbc     14 00 90 5D |  if_ne	jmp	#LR__0345
06bc0     10 03 B0 FD | 	call	#__system___gc_docollect
06bc4     35 5D 02 F6 | 	mov	arg01, local01
06bc8     36 5F 02 F6 | 	mov	arg02, local02
06bcc     50 FD BF FD | 	call	#__system___gc_tryalloc
06bd0     15 71 02 F6 | 	mov	local04, result1
06bd4                 | LR__0345
06bd4     37 01 68 FC | 	wrlong	#0, local03
06bd8     00 70 0E F2 | 	cmp	local04, #0 wz
06bdc     34 00 90 AD |  if_e	jmp	#LR__0351
06be0     04 6A 66 F0 | 	shl	local01, #4
06be4     08 6A 86 F1 | 	sub	local01, #8
06be8     35 73 52 F6 | 	abs	local05, local01 wc
06bec     02 72 46 F0 | 	shr	local05, #2
06bf0     39 73 62 C6 |  if_b	neg	local05, local05
06bf4     39 75 0A F6 | 	mov	local06, local05 wz
06bf8     38 77 02 F6 | 	mov	local07, local04
06bfc     14 00 90 AD |  if_e	jmp	#LR__0350
06c00     08 94 9F FE | 	loc	pa,	#(@LR__0348-@LR__0346)
06c04     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c08                 | LR__0346
06c08     3A 05 D8 FC | 	rep	@LR__0349, local06
06c0c                 | LR__0347
06c0c     3B 01 68 FC | 	wrlong	#0, local07
06c10     04 76 06 F1 | 	add	local07, #4
06c14                 | LR__0348
06c14                 | LR__0349
06c14                 | LR__0350
06c14                 | LR__0351
06c14     38 2B 02 F6 | 	mov	result1, local04
06c18                 | LR__0352
06c18     AF F0 03 F6 | 	mov	ptra, fp
06c1c     BF 00 A0 FD | 	call	#popregs_
06c20                 | __system___gc_doalloc_ret
06c20     2D 00 64 FD | 	ret
06c24                 | 
06c24                 | __system___gc_isvalidptr
06c24     30 31 02 F6 | 	mov	_var01, arg03
06c28     18 33 02 F6 | 	mov	_var02, _var01
06c2c     00 F8 7F FF 
06c30     00 32 06 F5 | 	and	_var02, ##-1048576
06c34     00 C0 31 FF 
06c38     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06c3c     00 2A 06 56 |  if_ne	mov	result1, #0
06c40     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c44     08 30 86 F1 | 	sub	_var01, #8
06c48     18 35 02 F6 | 	mov	_var03, _var01
06c4c     00 F8 7F FF 
06c50     00 34 26 F5 | 	andn	_var03, ##-1048576
06c54     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06c58     08 00 90 CD |  if_b	jmp	#LR__0353
06c5c     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06c60     08 00 90 CD |  if_b	jmp	#LR__0354
06c64                 | LR__0353
06c64     00 2A 06 F6 | 	mov	result1, #0
06c68     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06c6c                 | LR__0354
06c6c     1A 33 02 F6 | 	mov	_var02, _var03
06c70     2E 33 62 F5 | 	xor	_var02, arg01
06c74     0F 32 0E F5 | 	and	_var02, #15 wz
06c78     00 2A 06 56 |  if_ne	mov	result1, #0
06c7c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c80     1A 37 02 F6 | 	mov	_var04, _var03
06c84     02 36 06 F1 | 	add	_var04, #2
06c88     1B 33 E2 FA | 	rdword	_var02, _var04
06c8c     7F 00 00 FF 
06c90     C0 33 06 F5 | 	and	_var02, ##65472
06c94     36 00 00 FF 
06c98     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06c9c     00 2A 06 56 |  if_ne	mov	result1, #0
06ca0     1A 2B 02 A6 |  if_e	mov	result1, _var03
06ca4                 | __system___gc_isvalidptr_ret
06ca4     2D 00 64 FD | 	ret
06ca8                 | 
06ca8                 | __system___gc_dofree
06ca8     1A 5A 05 F6 | 	mov	COUNT_, #26
06cac     B0 00 A0 FD | 	call	#pushregs_
06cb0     2E 6B 02 F6 | 	mov	local01, arg01
06cb4     84 FB BF FD | 	call	#__system___gc_ptrs
06cb8     16 6D 02 F6 | 	mov	local02, result2
06cbc     15 6F 02 F6 | 	mov	local03, result1
06cc0     35 71 02 F6 | 	mov	local04, local01
06cc4     02 70 06 F1 | 	add	local04, #2
06cc8     36 00 80 FF 
06ccc     38 1F 59 FC | 	wrword	##27791, local04
06cd0     35 73 02 F6 | 	mov	local05, local01
06cd4     35 5D 02 F6 | 	mov	arg01, local01
06cd8     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06cdc     15 75 02 F6 | 	mov	local06, result1
06ce0     6C 93 9F FE | 	loc	pa,	#(@LR__0356-@LR__0355)
06ce4     93 00 A0 FD | 	call	#FCACHE_LOAD_
06ce8                 | LR__0355
06ce8     04 72 06 F1 | 	add	local05, #4
06cec     39 77 02 F6 | 	mov	local07, local05
06cf0     3B 5F EA FA | 	rdword	arg02, local07 wz
06cf4     37 5D 02 F6 | 	mov	arg01, local03
06cf8     00 2A 06 A6 |  if_e	mov	result1, #0
06cfc     04 5E 66 50 |  if_ne	shl	arg02, #4
06d00     2F 5D 02 51 |  if_ne	add	arg01, arg02
06d04     2E 2B 02 56 |  if_ne	mov	result1, arg01
06d08     15 73 0A F6 | 	mov	local05, result1 wz
06d0c     28 00 90 AD |  if_e	jmp	#LR__0357
06d10     39 5D 02 F6 | 	mov	arg01, local05
06d14     00 78 06 F6 | 	mov	local08, #0
06d18     02 5C 06 F1 | 	add	arg01, #2
06d1c     2E 7B E2 FA | 	rdword	local09, arg01
06d20     36 00 00 FF 
06d24     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06d28     01 78 66 A6 |  if_e	neg	local08, #1
06d2c     3C 2B 02 F6 | 	mov	result1, local08
06d30     15 7D 0A F6 | 	mov	local10, result1 wz
06d34     B0 FF 9F AD |  if_e	jmp	#LR__0355
06d38                 | LR__0356
06d38                 | LR__0357
06d38     00 72 0E F2 | 	cmp	local05, #0 wz
06d3c     37 73 02 A6 |  if_e	mov	local05, local03
06d40     39 7F 02 F6 | 	mov	local11, local05
06d44     06 7E 06 F1 | 	add	local11, #6
06d48     35 81 02 F6 | 	mov	local12, local01
06d4c     3F 83 E2 FA | 	rdword	local13, local11
06d50     06 80 06 F1 | 	add	local12, #6
06d54     40 83 52 FC | 	wrword	local13, local12
06d58     35 5F 0A F6 | 	mov	arg02, local01 wz
06d5c     00 2A 06 A6 |  if_e	mov	result1, #0
06d60     37 5F 82 51 |  if_ne	sub	arg02, local03
06d64     04 5E 46 50 |  if_ne	shr	arg02, #4
06d68     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d6c     15 85 02 F6 | 	mov	local14, result1
06d70     3F 85 52 FC | 	wrword	local14, local11
06d74     37 73 0A F2 | 	cmp	local05, local03 wz
06d78     74 00 90 AD |  if_e	jmp	#LR__0360
06d7c     39 5D 02 F6 | 	mov	arg01, local05
06d80     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d84     35 2B 0A F2 | 	cmp	result1, local01 wz
06d88     64 00 90 5D |  if_ne	jmp	#LR__0359
06d8c     39 87 02 F6 | 	mov	local15, local05
06d90     43 89 E2 FA | 	rdword	local16, local15
06d94     35 8B 02 F6 | 	mov	local17, local01
06d98     45 7D E2 FA | 	rdword	local10, local17
06d9c     3E 89 02 F1 | 	add	local16, local10
06da0     43 89 52 FC | 	wrword	local16, local15
06da4     38 01 58 FC | 	wrword	#0, local04
06da8     35 5D 02 F6 | 	mov	arg01, local01
06dac     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06db0     15 75 02 F6 | 	mov	local06, result1
06db4     36 75 5A F2 | 	cmps	local06, local02 wcz
06db8     24 00 90 3D |  if_ae	jmp	#LR__0358
06dbc     3A 8D 02 F6 | 	mov	local18, local06
06dc0     04 8C 06 F1 | 	add	local18, #4
06dc4     39 5F 0A F6 | 	mov	arg02, local05 wz
06dc8     00 2A 06 A6 |  if_e	mov	result1, #0
06dcc     37 5F 82 51 |  if_ne	sub	arg02, local03
06dd0     04 5E 46 50 |  if_ne	shr	arg02, #4
06dd4     2F 2B 02 56 |  if_ne	mov	result1, arg02
06dd8     15 85 02 F6 | 	mov	local14, result1
06ddc     46 85 52 FC | 	wrword	local14, local18
06de0                 | LR__0358
06de0     40 83 E2 FA | 	rdword	local13, local12
06de4     3F 83 52 FC | 	wrword	local13, local11
06de8     40 01 58 FC | 	wrword	#0, local12
06dec     39 6B 02 F6 | 	mov	local01, local05
06df0                 | LR__0359
06df0                 | LR__0360
06df0     35 5D 02 F6 | 	mov	arg01, local01
06df4     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06df8     15 8F 0A F6 | 	mov	local19, result1 wz
06dfc     C4 00 90 AD |  if_e	jmp	#LR__0362
06e00     36 8F 5A F2 | 	cmps	local19, local02 wcz
06e04     BC 00 90 3D |  if_ae	jmp	#LR__0362
06e08     47 5D 02 F6 | 	mov	arg01, local19
06e0c     00 78 06 F6 | 	mov	local08, #0
06e10     02 5C 06 F1 | 	add	arg01, #2
06e14     2E 7B E2 FA | 	rdword	local09, arg01
06e18     36 00 00 FF 
06e1c     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06e20     01 78 66 A6 |  if_e	neg	local08, #1
06e24     3C 2B 0A F6 | 	mov	result1, local08 wz
06e28     98 00 90 AD |  if_e	jmp	#LR__0362
06e2c     35 73 02 F6 | 	mov	local05, local01
06e30     47 6B 02 F6 | 	mov	local01, local19
06e34     39 91 02 F6 | 	mov	local20, local05
06e38     48 93 E2 FA | 	rdword	local21, local20
06e3c     35 95 02 F6 | 	mov	local22, local01
06e40     4A 7D E2 FA | 	rdword	local10, local22
06e44     3E 93 02 F1 | 	add	local21, local10
06e48     48 93 52 FC | 	wrword	local21, local20
06e4c     35 97 02 F6 | 	mov	local23, local01
06e50     06 96 06 F1 | 	add	local23, #6
06e54     39 99 02 F6 | 	mov	local24, local05
06e58     4B 83 E2 FA | 	rdword	local13, local23
06e5c     06 98 06 F1 | 	add	local24, #6
06e60     4C 83 52 FC | 	wrword	local13, local24
06e64     35 9B 02 F6 | 	mov	local25, local01
06e68     02 9A 06 F1 | 	add	local25, #2
06e6c     4D 55 59 FC | 	wrword	#170, local25
06e70     4B 01 58 FC | 	wrword	#0, local23
06e74     35 83 02 F6 | 	mov	local13, local01
06e78     41 5D 02 F6 | 	mov	arg01, local13
06e7c     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06e80     15 7D 02 F6 | 	mov	local10, result1
06e84     3E 75 0A F6 | 	mov	local06, local10 wz
06e88     38 00 90 AD |  if_e	jmp	#LR__0361
06e8c     36 75 5A F2 | 	cmps	local06, local02 wcz
06e90     30 00 90 3D |  if_ae	jmp	#LR__0361
06e94     3A 9D 02 F6 | 	mov	local26, local06
06e98     04 9C 06 F1 | 	add	local26, #4
06e9c     37 83 02 F6 | 	mov	local13, local03
06ea0     39 7D 02 F6 | 	mov	local10, local05
06ea4     41 5D 02 F6 | 	mov	arg01, local13
06ea8     3E 5F 0A F6 | 	mov	arg02, local10 wz
06eac     00 2A 06 A6 |  if_e	mov	result1, #0
06eb0     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06eb4     04 5E 46 50 |  if_ne	shr	arg02, #4
06eb8     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ebc     15 85 02 F6 | 	mov	local14, result1
06ec0     4E 85 52 FC | 	wrword	local14, local26
06ec4                 | LR__0361
06ec4                 | LR__0362
06ec4     3A 2B 02 F6 | 	mov	result1, local06
06ec8     AF F0 03 F6 | 	mov	ptra, fp
06ecc     BF 00 A0 FD | 	call	#popregs_
06ed0                 | __system___gc_dofree_ret
06ed0     2D 00 64 FD | 	ret
06ed4                 | 
06ed4                 | __system___gc_docollect
06ed4     0C 5A 05 F6 | 	mov	COUNT_, #12
06ed8     B0 00 A0 FD | 	call	#pushregs_
06edc     5C F9 BF FD | 	call	#__system___gc_ptrs
06ee0     16 6B 02 F6 | 	mov	local01, result2
06ee4     15 6D 02 F6 | 	mov	local02, result1
06ee8     36 5D 02 F6 | 	mov	arg01, local02
06eec     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ef0     15 6F 0A F6 | 	mov	local03, result1 wz
06ef4     01 2A 62 FD | 	cogid	result1
06ef8     15 71 02 F6 | 	mov	local04, result1
06efc     2C 00 90 AD |  if_e	jmp	#LR__0364
06f00                 | LR__0363
06f00     35 6F 5A F2 | 	cmps	local03, local01 wcz
06f04     24 00 90 3D |  if_ae	jmp	#LR__0364
06f08     37 73 02 F6 | 	mov	local05, local03
06f0c     02 72 06 F1 | 	add	local05, #2
06f10     39 75 E2 FA | 	rdword	local06, local05
06f14     20 74 26 F5 | 	andn	local06, #32
06f18     39 75 52 FC | 	wrword	local06, local05
06f1c     37 5D 02 F6 | 	mov	arg01, local03
06f20     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f24     15 6F 0A F6 | 	mov	local03, result1 wz
06f28     D4 FF 9F 5D |  if_ne	jmp	#LR__0363
06f2c                 | LR__0364
06f2c     00 76 06 F6 | 	mov	local07, #0
06f30     00 5C 06 F6 | 	mov	arg01, #0
06f34     5C EF BF FD | 	call	#__system____topofstack
06f38     15 79 02 F6 | 	mov	local08, result1
06f3c     3B 5D 02 F6 | 	mov	arg01, local07
06f40     3C 5F 02 F6 | 	mov	arg02, local08
06f44     A0 00 B0 FD | 	call	#__system___gc_markhub
06f48     2C 01 B0 FD | 	call	#__system___gc_markcog
06f4c     36 5D 02 F6 | 	mov	arg01, local02
06f50     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f54     15 7B 0A F6 | 	mov	local09, result1 wz
06f58     10 00 90 5D |  if_ne	jmp	#LR__0365
06f5c     40 00 00 FF 
06f60     E5 5C 06 F6 | 	mov	arg01, ##@LR__0450
06f64     94 FB BF FD | 	call	#__system___gc_errmsg
06f68     70 00 90 FD | 	jmp	#LR__0371
06f6c                 | LR__0365
06f6c                 | LR__0366
06f6c     3D 6F 02 F6 | 	mov	local03, local09
06f70     37 5D 02 F6 | 	mov	arg01, local03
06f74     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f78     15 7B 02 F6 | 	mov	local09, result1
06f7c     37 7D 02 F6 | 	mov	local10, local03
06f80     02 7C 06 F1 | 	add	local10, #2
06f84     3E 7F E2 FA | 	rdword	local11, local10
06f88     20 7E CE F7 | 	test	local11, #32 wz
06f8c     3C 00 90 5D |  if_ne	jmp	#LR__0369
06f90     3F 81 02 F6 | 	mov	local12, local11
06f94     10 80 0E F5 | 	and	local12, #16 wz
06f98     30 00 90 5D |  if_ne	jmp	#LR__0369
06f9c     3F 77 02 F6 | 	mov	local07, local11
06fa0     0F 76 06 F5 | 	and	local07, #15
06fa4     3B 7F 02 F6 | 	mov	local11, local07
06fa8     38 7F 0A F2 | 	cmp	local11, local04 wz
06fac     08 00 90 AD |  if_e	jmp	#LR__0367
06fb0     0E 7E 0E F2 | 	cmp	local11, #14 wz
06fb4     14 00 90 5D |  if_ne	jmp	#LR__0368
06fb8                 | LR__0367
06fb8     37 77 02 F6 | 	mov	local07, local03
06fbc     3B 5D 02 F6 | 	mov	arg01, local07
06fc0     E4 FC BF FD | 	call	#__system___gc_dofree
06fc4     15 81 02 F6 | 	mov	local12, result1
06fc8     40 7B 02 F6 | 	mov	local09, local12
06fcc                 | LR__0368
06fcc                 | LR__0369
06fcc     00 7A 0E F2 | 	cmp	local09, #0 wz
06fd0     08 00 90 AD |  if_e	jmp	#LR__0370
06fd4     35 7B 5A F2 | 	cmps	local09, local01 wcz
06fd8     90 FF 9F CD |  if_b	jmp	#LR__0366
06fdc                 | LR__0370
06fdc                 | LR__0371
06fdc     AF F0 03 F6 | 	mov	ptra, fp
06fe0     BF 00 A0 FD | 	call	#popregs_
06fe4                 | __system___gc_docollect_ret
06fe4     2D 00 64 FD | 	ret
06fe8                 | 
06fe8                 | __system___gc_markhub
06fe8     0A 5A 05 F6 | 	mov	COUNT_, #10
06fec     B0 00 A0 FD | 	call	#pushregs_
06ff0     2E 6B 02 F6 | 	mov	local01, arg01
06ff4     2F 6D 02 F6 | 	mov	local02, arg02
06ff8     40 F8 BF FD | 	call	#__system___gc_ptrs
06ffc     15 6F 02 F6 | 	mov	local03, result1
07000     16 71 02 F6 | 	mov	local04, result2
07004                 | LR__0372
07004     36 6B 5A F2 | 	cmps	local01, local02 wcz
07008     60 00 90 3D |  if_ae	jmp	#LR__0373
0700c     35 61 02 FB | 	rdlong	arg03, local01
07010     04 6A 06 F1 | 	add	local01, #4
07014     37 5D 02 F6 | 	mov	arg01, local03
07018     38 5F 02 F6 | 	mov	arg02, local04
0701c     04 FC BF FD | 	call	#__system___gc_isvalidptr
07020     15 73 0A F6 | 	mov	local05, result1 wz
07024     DC FF 9F AD |  if_e	jmp	#LR__0372
07028     39 5D 02 F6 | 	mov	arg01, local05
0702c     00 74 06 F6 | 	mov	local06, #0
07030     02 5C 06 F1 | 	add	arg01, #2
07034     2E 77 E2 FA | 	rdword	local07, arg01
07038     36 00 00 FF 
0703c     8F 76 0E F2 | 	cmp	local07, ##27791 wz
07040     01 74 66 A6 |  if_e	neg	local06, #1
07044     3A 2B 02 F6 | 	mov	result1, local06
07048     15 79 0A F6 | 	mov	local08, result1 wz
0704c     B4 FF 9F 5D |  if_ne	jmp	#LR__0372
07050     39 7B 02 F6 | 	mov	local09, local05
07054     02 7A 06 F1 | 	add	local09, #2
07058     3D 7D E2 FA | 	rdword	local10, local09
0705c     0F 7C 26 F5 | 	andn	local10, #15
07060     2E 7C 46 F5 | 	or	local10, #46
07064     3D 7D 52 FC | 	wrword	local10, local09
07068     98 FF 9F FD | 	jmp	#LR__0372
0706c                 | LR__0373
0706c     AF F0 03 F6 | 	mov	ptra, fp
07070     BF 00 A0 FD | 	call	#popregs_
07074                 | __system___gc_markhub_ret
07074     2D 00 64 FD | 	ret
07078                 | 
07078                 | __system___gc_markcog
07078     06 5A 05 F6 | 	mov	COUNT_, #6
0707c     B0 00 A0 FD | 	call	#pushregs_
07080     B8 F7 BF FD | 	call	#__system___gc_ptrs
07084     15 6B 02 F6 | 	mov	local01, result1
07088     16 6D 02 F6 | 	mov	local02, result2
0708c     00 6E 06 F6 | 	mov	local03, #0
07090                 | LR__0374
07090     F0 71 06 F6 | 	mov	local04, #496
07094     37 71 82 F1 | 	sub	local04, local03
07098     F0 71 06 F1 | 	add	local04, #496
0709c                 | 	'.live	local04
0709c     00 70 96 F9 | 	alts	local04, #0
070a0     38 73 02 F6 | 	mov	local05, local04
070a4     36 5F 02 F6 | 	mov	arg02, local02
070a8     35 5D 02 F6 | 	mov	arg01, local01
070ac     39 61 02 F6 | 	mov	arg03, local05
070b0     70 FB BF FD | 	call	#__system___gc_isvalidptr
070b4     15 73 0A F6 | 	mov	local05, result1 wz
070b8     10 00 90 AD |  if_e	jmp	#LR__0375
070bc     02 72 06 F1 | 	add	local05, #2
070c0     39 75 E2 FA | 	rdword	local06, local05
070c4     20 74 46 F5 | 	or	local06, #32
070c8     39 75 52 FC | 	wrword	local06, local05
070cc                 | LR__0375
070cc     01 6E 06 F1 | 	add	local03, #1
070d0     F0 6F 5E F2 | 	cmps	local03, #496 wcz
070d4     B8 FF 9F CD |  if_b	jmp	#LR__0374
070d8     AF F0 03 F6 | 	mov	ptra, fp
070dc     BF 00 A0 FD | 	call	#popregs_
070e0                 | __system___gc_markcog_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | __system__write
070e4     03 5A 05 F6 | 	mov	COUNT_, #3
070e8     B0 00 A0 FD | 	call	#pushregs_
070ec     2E 6B 02 F6 | 	mov	local01, arg01
070f0     2F 6D 02 F6 | 	mov	local02, arg02
070f4     30 6F 02 F6 | 	mov	local03, arg03
070f8     0A 6A 1E F2 | 	cmp	local01, #10 wcz
070fc     1C 00 90 CD |  if_b	jmp	#LR__0376
07100     01 00 00 FF 
07104     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07108     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0710c     01 00 00 FF 
07110     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07114     01 2A 66 F6 | 	neg	result1, #1
07118     28 00 90 FD | 	jmp	#LR__0377
0711c                 | LR__0376
0711c     35 5D 02 F6 | 	mov	arg01, local01
07120     01 5C 66 F0 | 	shl	arg01, #1
07124     35 5D 02 F1 | 	add	arg01, local01
07128     04 5C 66 F0 | 	shl	arg01, #4
0712c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07130     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07134     36 5F 02 F6 | 	mov	arg02, local02
07138     37 61 02 F6 | 	mov	arg03, local03
0713c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07140     4C 09 B0 FD | 	call	#__system___vfswrite
07144                 | LR__0377
07144     AF F0 03 F6 | 	mov	ptra, fp
07148     BF 00 A0 FD | 	call	#popregs_
0714c                 | __system__write_ret
0714c     2D 00 64 FD | 	ret
07150                 | 
07150                 | __system__read
07150     03 5A 05 F6 | 	mov	COUNT_, #3
07154     B0 00 A0 FD | 	call	#pushregs_
07158     2E 6B 02 F6 | 	mov	local01, arg01
0715c     2F 6D 02 F6 | 	mov	local02, arg02
07160     30 6F 02 F6 | 	mov	local03, arg03
07164     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07168     1C 00 90 CD |  if_b	jmp	#LR__0378
0716c     01 00 00 FF 
07170     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07174     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07178     01 00 00 FF 
0717c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07180     01 2A 66 F6 | 	neg	result1, #1
07184     28 00 90 FD | 	jmp	#LR__0379
07188                 | LR__0378
07188     35 5D 02 F6 | 	mov	arg01, local01
0718c     01 5C 66 F0 | 	shl	arg01, #1
07190     35 5D 02 F1 | 	add	arg01, local01
07194     04 5C 66 F0 | 	shl	arg01, #4
07198     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0719c     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071a0     36 5F 02 F6 | 	mov	arg02, local02
071a4     37 61 02 F6 | 	mov	arg03, local03
071a8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071ac     A4 0A B0 FD | 	call	#__system___vfsread
071b0                 | LR__0379
071b0     AF F0 03 F6 | 	mov	ptra, fp
071b4     BF 00 A0 FD | 	call	#popregs_
071b8                 | __system__read_ret
071b8     2D 00 64 FD | 	ret
071bc                 | 
071bc                 | __system__close
071bc     01 5A 05 F6 | 	mov	COUNT_, #1
071c0     B0 00 A0 FD | 	call	#pushregs_
071c4     2E 6B 02 F6 | 	mov	local01, arg01
071c8     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071cc     1C 00 90 CD |  if_b	jmp	#LR__0380
071d0     01 00 00 FF 
071d4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071d8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071dc     01 00 00 FF 
071e0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071e4     01 2A 66 F6 | 	neg	result1, #1
071e8     20 00 90 FD | 	jmp	#LR__0381
071ec                 | LR__0380
071ec     35 5D 02 F6 | 	mov	arg01, local01
071f0     01 5C 66 F0 | 	shl	arg01, #1
071f4     35 5D 02 F1 | 	add	arg01, local01
071f8     04 5C 66 F0 | 	shl	arg01, #4
071fc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07200     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07204     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07208     80 03 B0 FD | 	call	#__system___closeraw
0720c                 | LR__0381
0720c     AF F0 03 F6 | 	mov	ptra, fp
07210     BF 00 A0 FD | 	call	#popregs_
07214                 | __system__close_ret
07214     2D 00 64 FD | 	ret
07218                 | 
07218                 | __system__lseek
07218     09 5A 05 F6 | 	mov	COUNT_, #9
0721c     B0 00 A0 FD | 	call	#pushregs_
07220     2E 6B 02 F6 | 	mov	local01, arg01
07224     2F 6D 02 F6 | 	mov	local02, arg02
07228     30 6F 02 F6 | 	mov	local03, arg03
0722c     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07230     1C 00 90 CD |  if_b	jmp	#LR__0382
07234     01 00 00 FF 
07238     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0723c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07240     01 00 00 FF 
07244     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07248     01 2A 66 F6 | 	neg	result1, #1
0724c     D8 00 90 FD | 	jmp	#LR__0386
07250                 | LR__0382
07250     35 71 02 F6 | 	mov	local04, local01
07254     01 70 66 F0 | 	shl	local04, #1
07258     35 71 02 F1 | 	add	local04, local01
0725c     04 70 66 F0 | 	shl	local04, #4
07260     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07264     0A 71 02 F1 | 	add	local04, ptr___system__dat__
07268     2C 70 06 F1 | 	add	local04, #44
0726c     38 73 0A FB | 	rdlong	local05, local04 wz
07270     2C 70 86 F1 | 	sub	local04, #44
07274     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07278     1C 00 90 5D |  if_ne	jmp	#LR__0383
0727c     01 00 00 FF 
07280     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07284     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07288     01 00 00 FF 
0728c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07290     01 2A 66 F6 | 	neg	result1, #1
07294     90 00 90 FD | 	jmp	#LR__0386
07298                 | LR__0383
07298     08 70 06 F1 | 	add	local04, #8
0729c     38 73 02 FB | 	rdlong	local05, local04
072a0     08 70 86 F1 | 	sub	local04, #8
072a4     40 72 CE F7 | 	test	local05, #64 wz
072a8     14 00 90 AD |  if_e	jmp	#LR__0384
072ac     08 70 06 F1 | 	add	local04, #8
072b0     38 73 02 FB | 	rdlong	local05, local04
072b4     80 72 46 F5 | 	or	local05, #128
072b8     38 73 62 FC | 	wrlong	local05, local04
072bc     08 70 86 F1 | 	sub	local04, #8
072c0                 | LR__0384
072c0     2C 70 06 F1 | 	add	local04, #44
072c4     38 73 02 FB | 	rdlong	local05, local04
072c8     2C 70 86 F1 | 	sub	local04, #44
072cc     39 75 02 FB | 	rdlong	local06, local05
072d0     04 72 06 F1 | 	add	local05, #4
072d4     39 77 02 FB | 	rdlong	local07, local05
072d8     38 5D 02 F6 | 	mov	arg01, local04
072dc     36 5F 02 F6 | 	mov	arg02, local02
072e0     37 61 02 F6 | 	mov	arg03, local03
072e4     07 79 02 F6 | 	mov	local08, objptr
072e8     3A 0F 02 F6 | 	mov	objptr, local06
072ec     2D 76 62 FD | 	call	local07
072f0     3C 0F 02 F6 | 	mov	objptr, local08
072f4     15 7B 02 F6 | 	mov	local09, result1
072f8     00 7A 5E F2 | 	cmps	local09, #0 wcz
072fc     24 00 90 3D |  if_ae	jmp	#LR__0385
07300     3D 5D 6A F6 | 	neg	arg01, local09 wz
07304     01 00 00 FF 
07308     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0730c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07310     01 00 00 FF 
07314     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07318     01 2A 66 56 |  if_ne	neg	result1, #1
0731c     00 2A 06 A6 |  if_e	mov	result1, #0
07320     04 00 90 FD | 	jmp	#LR__0386
07324                 | LR__0385
07324     3D 2B 02 F6 | 	mov	result1, local09
07328                 | LR__0386
07328     AF F0 03 F6 | 	mov	ptra, fp
0732c     BF 00 A0 FD | 	call	#popregs_
07330                 | __system__lseek_ret
07330     2D 00 64 FD | 	ret
07334                 | 
07334                 | __system____getftab
07334     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
07338     00 2A 06 36 |  if_ae	mov	result1, #0
0733c     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07340     2E 2B 02 F6 | 	mov	result1, arg01
07344     01 2A 66 F0 | 	shl	result1, #1
07348     2E 2B 02 F1 | 	add	result1, arg01
0734c     04 2A 66 F0 | 	shl	result1, #4
07350     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07354     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
07358     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
0735c                 | __system____getftab_ret
0735c     2D 00 64 FD | 	ret
07360                 | 
07360                 | __system___strrev
07360     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
07364     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07368     2E 33 02 F6 | 	mov	_var02, arg01
0736c     9C 8C 9F FE | 	loc	pa,	#(@LR__0388-@LR__0387)
07370     93 00 A0 FD | 	call	#FCACHE_LOAD_
07374                 | LR__0387
07374     19 31 CA FA | 	rdbyte	_var01, _var02 wz
07378     01 32 06 51 |  if_ne	add	_var02, #1
0737c     F4 FF 9F 5D |  if_ne	jmp	#LR__0387
07380                 | LR__0388
07380     01 32 86 F1 | 	sub	_var02, #1
07384                 | LR__0389
07384     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07388     1C 00 90 ED |  if_be	jmp	#LR__0390
0738c     2E 35 C2 FA | 	rdbyte	_var03, arg01
07390     19 37 C2 FA | 	rdbyte	_var04, _var02
07394     2E 37 42 FC | 	wrbyte	_var04, arg01
07398     19 35 42 FC | 	wrbyte	_var03, _var02
0739c     01 5C 06 F1 | 	add	arg01, #1
073a0     01 32 86 F1 | 	sub	_var02, #1
073a4     DC FF 9F FD | 	jmp	#LR__0389
073a8                 | LR__0390
073a8                 | __system___strrev_ret
073a8     2D 00 64 FD | 	ret
073ac                 | 
073ac                 | __system___fmtpad
073ac     0C 5A 05 F6 | 	mov	COUNT_, #12
073b0     B0 00 A0 FD | 	call	#pushregs_
073b4     2E 6B 02 F6 | 	mov	local01, arg01
073b8     2F 6D 02 F6 | 	mov	local02, arg02
073bc     31 6F 02 F6 | 	mov	local03, arg04
073c0     36 71 EA F8 | 	getbyte	local04, local02, #1
073c4     16 6C 46 F0 | 	shr	local02, #22
073c8     03 6C 0E F5 | 	and	local02, #3 wz
073cc     00 72 06 F6 | 	mov	local05, #0
073d0     01 6C 06 A6 |  if_e	mov	local02, #1
073d4     37 6D CA F7 | 	test	local02, local03 wz
073d8     00 2A 06 A6 |  if_e	mov	result1, #0
073dc     80 00 90 AD |  if_e	jmp	#LR__0394
073e0     30 71 82 F1 | 	sub	local04, arg03
073e4     38 75 02 F6 | 	mov	local06, local04
073e8     00 74 5E F2 | 	cmps	local06, #0 wcz
073ec     00 2A 06 E6 |  if_be	mov	result1, #0
073f0     6C 00 90 ED |  if_be	jmp	#LR__0394
073f4     03 6C 0E F2 | 	cmp	local02, #3 wz
073f8     18 00 90 5D |  if_ne	jmp	#LR__0391
073fc     01 6E 0E F2 | 	cmp	local03, #1 wz
07400     6E 76 62 FD | 	wrz	local07
07404     3B 75 02 F1 | 	add	local06, local07
07408     3A 75 52 F6 | 	abs	local06, local06 wc
0740c     01 74 46 F0 | 	shr	local06, #1
07410     3A 75 62 C6 |  if_b	neg	local06, local06
07414                 | LR__0391
07414     00 74 5E F2 | 	cmps	local06, #0 wcz
07418     40 00 90 ED |  if_be	jmp	#LR__0393
0741c     3A 79 02 F6 | 	mov	local08, local06
07420                 | LR__0392
07420     35 7B 02 F6 | 	mov	local09, local01
07424     3D 77 02 FB | 	rdlong	local07, local09
07428     04 7A 06 F1 | 	add	local09, #4
0742c     3D 7D 02 FB | 	rdlong	local10, local09
07430     20 5C 06 F6 | 	mov	arg01, #32
07434     07 7F 02 F6 | 	mov	local11, objptr
07438     3B 0F 02 F6 | 	mov	objptr, local07
0743c     2D 7C 62 FD | 	call	local10
07440     3F 0F 02 F6 | 	mov	objptr, local11
07444     15 81 02 F6 | 	mov	local12, result1
07448     00 80 5E F2 | 	cmps	local12, #0 wcz
0744c     40 2B 02 C6 |  if_b	mov	result1, local12
07450     0C 00 90 CD |  if_b	jmp	#LR__0394
07454     40 73 02 F1 | 	add	local05, local12
07458     F1 79 6E FB | 	djnz	local08, #LR__0392
0745c                 | LR__0393
0745c     39 2B 02 F6 | 	mov	result1, local05
07460                 | LR__0394
07460     AF F0 03 F6 | 	mov	ptra, fp
07464     BF 00 A0 FD | 	call	#popregs_
07468                 | __system___fmtpad_ret
07468     2D 00 64 FD | 	ret
0746c                 | 
0746c                 | __system___uitoa
0746c     09 5A 05 F6 | 	mov	COUNT_, #9
07470     B0 00 A0 FD | 	call	#pushregs_
07474     2E 6B 02 F6 | 	mov	local01, arg01
07478     2F 6D 02 F6 | 	mov	local02, arg02
0747c     30 6F 02 F6 | 	mov	local03, arg03
07480     31 71 02 F6 | 	mov	local04, arg04
07484     32 73 0A F6 | 	mov	local05, arg05 wz
07488     35 75 02 F6 | 	mov	local06, local01
0748c     00 76 06 F6 | 	mov	local07, #0
07490     37 78 06 56 |  if_ne	mov	local08, #55
07494     57 78 06 A6 |  if_e	mov	local08, #87
07498                 | LR__0395
07498     36 0B 03 F6 | 	mov	muldiva_, local02
0749c     37 0D 03 F6 | 	mov	muldivb_, local03
074a0     CC 00 A0 FD | 	call	#unsdivide_
074a4     85 7B 02 F6 | 	mov	local09, muldiva_
074a8     0A 7A 1E F2 | 	cmp	local09, #10 wcz
074ac     30 7A 06 C1 |  if_b	add	local09, #48
074b0     3C 7B 02 31 |  if_ae	add	local09, local08
074b4     3A 7B 42 FC | 	wrbyte	local09, local06
074b8     36 0B 03 F6 | 	mov	muldiva_, local02
074bc     37 0D 03 F6 | 	mov	muldivb_, local03
074c0     01 74 06 F1 | 	add	local06, #1
074c4     CC 00 A0 FD | 	call	#unsdivide_
074c8     86 6D 0A F6 | 	mov	local02, muldivb_ wz
074cc     01 76 06 F1 | 	add	local07, #1
074d0     C4 FF 9F 5D |  if_ne	jmp	#LR__0395
074d4     38 77 1A F2 | 	cmp	local07, local04 wcz
074d8     BC FF 9F CD |  if_b	jmp	#LR__0395
074dc     3A 01 48 FC | 	wrbyte	#0, local06
074e0     35 5D 02 F6 | 	mov	arg01, local01
074e4     78 FE BF FD | 	call	#__system___strrev
074e8     3B 2B 02 F6 | 	mov	result1, local07
074ec     AF F0 03 F6 | 	mov	ptra, fp
074f0     BF 00 A0 FD | 	call	#popregs_
074f4                 | __system___uitoa_ret
074f4     2D 00 64 FD | 	ret
074f8                 | 
074f8                 | __system___gettxfunc
074f8     03 5A 05 F6 | 	mov	COUNT_, #3
074fc     B0 00 A0 FD | 	call	#pushregs_
07500     30 FE BF FD | 	call	#__system____getftab
07504     15 6B 0A F6 | 	mov	local01, result1 wz
07508     14 00 90 AD |  if_e	jmp	#LR__0396
0750c     08 6A 06 F1 | 	add	local01, #8
07510     35 6D 02 FB | 	rdlong	local02, local01
07514     08 6A 86 F1 | 	sub	local01, #8
07518     36 6F 0A F6 | 	mov	local03, local02 wz
0751c     08 00 90 5D |  if_ne	jmp	#LR__0397
07520                 | LR__0396
07520     00 2A 06 F6 | 	mov	result1, #0
07524     0C 00 90 FD | 	jmp	#LR__0398
07528                 | LR__0397
07528     35 5D 02 F6 | 	mov	arg01, local01
0752c     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07530     88 E9 BF FD | 	call	#__system___make_methodptr
07534                 | LR__0398
07534     AF F0 03 F6 | 	mov	ptra, fp
07538     BF 00 A0 FD | 	call	#popregs_
0753c                 | __system___gettxfunc_ret
0753c     2D 00 64 FD | 	ret
07540                 | 
07540                 | __system___getiolock_0145
07540     03 5A 05 F6 | 	mov	COUNT_, #3
07544     B0 00 A0 FD | 	call	#pushregs_
07548     E8 FD BF FD | 	call	#__system____getftab
0754c     15 6B 0A F6 | 	mov	local01, result1 wz
07550     14 00 90 AD |  if_e	jmp	#LR__0399
07554     08 6A 06 F1 | 	add	local01, #8
07558     35 6D 02 FB | 	rdlong	local02, local01
0755c     08 6A 86 F1 | 	sub	local01, #8
07560     36 6F 0A F6 | 	mov	local03, local02 wz
07564     10 00 90 5D |  if_ne	jmp	#LR__0400
07568                 | LR__0399
07568     18 14 06 F1 | 	add	ptr___system__dat__, #24
0756c     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07570     18 14 86 F1 | 	sub	ptr___system__dat__, #24
07574     08 00 90 FD | 	jmp	#LR__0401
07578                 | LR__0400
07578     0C 6A 06 F1 | 	add	local01, #12
0757c     35 2B 02 F6 | 	mov	result1, local01
07580                 | LR__0401
07580     AF F0 03 F6 | 	mov	ptra, fp
07584     BF 00 A0 FD | 	call	#popregs_
07588                 | __system___getiolock_0145_ret
07588     2D 00 64 FD | 	ret
0758c                 | 
0758c                 | __system___closeraw
0758c     06 5A 05 F6 | 	mov	COUNT_, #6
07590     B0 00 A0 FD | 	call	#pushregs_
07594     2E 6B 02 F6 | 	mov	local01, arg01
07598     00 6C 06 F6 | 	mov	local02, #0
0759c     08 6A 06 F1 | 	add	local01, #8
075a0     35 6F 0A FB | 	rdlong	local03, local01 wz
075a4     08 6A 86 F1 | 	sub	local01, #8
075a8     1C 00 90 5D |  if_ne	jmp	#LR__0402
075ac     01 00 00 FF 
075b0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
075b4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075b8     01 00 00 FF 
075bc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
075c0     01 2A 66 F6 | 	neg	result1, #1
075c4     90 00 90 FD | 	jmp	#LR__0405
075c8                 | LR__0402
075c8     28 6A 06 F1 | 	add	local01, #40
075cc     35 6F 0A FB | 	rdlong	local03, local01 wz
075d0     28 6A 86 F1 | 	sub	local01, #40
075d4     2C 00 90 AD |  if_e	jmp	#LR__0403
075d8     28 6A 06 F1 | 	add	local01, #40
075dc     35 6F 02 FB | 	rdlong	local03, local01
075e0     28 6A 86 F1 | 	sub	local01, #40
075e4     37 71 02 FB | 	rdlong	local04, local03
075e8     04 6E 06 F1 | 	add	local03, #4
075ec     37 73 02 FB | 	rdlong	local05, local03
075f0     35 5D 02 F6 | 	mov	arg01, local01
075f4     07 75 02 F6 | 	mov	local06, objptr
075f8     38 0F 02 F6 | 	mov	objptr, local04
075fc     2D 72 62 FD | 	call	local05
07600     3A 0F 02 F6 | 	mov	objptr, local06
07604                 | LR__0403
07604     20 6A 06 F1 | 	add	local01, #32
07608     35 6F 0A FB | 	rdlong	local03, local01 wz
0760c     20 6A 86 F1 | 	sub	local01, #32
07610     30 00 90 AD |  if_e	jmp	#LR__0404
07614     20 6A 06 F1 | 	add	local01, #32
07618     35 6F 02 FB | 	rdlong	local03, local01
0761c     20 6A 86 F1 | 	sub	local01, #32
07620     37 71 02 FB | 	rdlong	local04, local03
07624     04 6E 06 F1 | 	add	local03, #4
07628     37 73 02 FB | 	rdlong	local05, local03
0762c     35 5D 02 F6 | 	mov	arg01, local01
07630     07 75 02 F6 | 	mov	local06, objptr
07634     38 0F 02 F6 | 	mov	objptr, local04
07638     2D 72 62 FD | 	call	local05
0763c     3A 0F 02 F6 | 	mov	objptr, local06
07640     15 6D 02 F6 | 	mov	local02, result1
07644                 | LR__0404
07644     35 5D 02 F6 | 	mov	arg01, local01
07648     00 5E 06 F6 | 	mov	arg02, #0
0764c     30 60 06 F6 | 	mov	arg03, #48
07650     A0 00 A0 FD | 	call	#\builtin_bytefill_
07654     36 2B 02 F6 | 	mov	result1, local02
07658                 | LR__0405
07658     AF F0 03 F6 | 	mov	ptra, fp
0765c     BF 00 A0 FD | 	call	#popregs_
07660                 | __system___closeraw_ret
07660     2D 00 64 FD | 	ret
07664                 | 
07664                 | __system____default_getc
07664     0C 5A 05 F6 | 	mov	COUNT_, #12
07668     B0 00 A0 FD | 	call	#pushregs_
0766c     2E 6B 02 F6 | 	mov	local01, arg01
07670     35 6D 02 FB | 	rdlong	local02, local01
07674     08 6C 06 F1 | 	add	local02, #8
07678     36 6F 02 FB | 	rdlong	local03, local02
0767c     08 6C 86 F1 | 	sub	local02, #8
07680     02 6E CE F7 | 	test	local03, #2 wz
07684     08 00 90 AD |  if_e	jmp	#LR__0406
07688     35 5D 02 F6 | 	mov	arg01, local01
0768c     FC 01 B0 FD | 	call	#__system____default_flush
07690                 | LR__0406
07690     08 6C 06 F1 | 	add	local02, #8
07694     36 6F 02 FB | 	rdlong	local03, local02
07698     01 6E 46 F5 | 	or	local03, #1
0769c     36 6F 62 FC | 	wrlong	local03, local02
076a0     08 6C 86 F1 | 	sub	local02, #8
076a4     36 71 0A FB | 	rdlong	local04, local02 wz
076a8     7C 00 90 5D |  if_ne	jmp	#LR__0408
076ac     35 5D 02 F6 | 	mov	arg01, local01
076b0     2E 73 02 FB | 	rdlong	local05, arg01
076b4     0C 72 06 F1 | 	add	local05, #12
076b8     39 5F 02 F6 | 	mov	arg02, local05
076bc     0C 72 86 F1 | 	sub	local05, #12
076c0     10 5C 06 F1 | 	add	arg01, #16
076c4     2E 75 02 FB | 	rdlong	local06, arg01
076c8     10 5C 86 F1 | 	sub	arg01, #16
076cc     3A 77 02 FB | 	rdlong	local07, local06
076d0     04 74 06 F1 | 	add	local06, #4
076d4     3A 79 02 FB | 	rdlong	local08, local06
076d8     0A 60 C6 F9 | 	decod	arg03, #10
076dc     07 7B 02 F6 | 	mov	local09, objptr
076e0     3B 0F 02 F6 | 	mov	objptr, local07
076e4     2D 78 62 FD | 	call	local08
076e8     3D 0F 02 F6 | 	mov	objptr, local09
076ec     15 7D 02 F6 | 	mov	local10, result1
076f0     00 7C 5E F2 | 	cmps	local10, #0 wcz
076f4     01 2A 66 C6 |  if_b	neg	result1, #1
076f8     28 00 90 CD |  if_b	jmp	#LR__0407
076fc     39 7D 62 FC | 	wrlong	local10, local05
07700     0C 72 06 F1 | 	add	local05, #12
07704     39 7F 02 F6 | 	mov	local11, local05
07708     08 72 86 F1 | 	sub	local05, #8
0770c     39 7F 62 FC | 	wrlong	local11, local05
07710     04 72 06 F1 | 	add	local05, #4
07714     39 75 02 FB | 	rdlong	local06, local05
07718     01 74 46 F5 | 	or	local06, #1
0771c     39 75 62 FC | 	wrlong	local06, local05
07720     3E 2B 02 F6 | 	mov	result1, local10
07724                 | LR__0407
07724     15 71 02 F6 | 	mov	local04, result1
07728                 | LR__0408
07728     00 70 5E F2 | 	cmps	local04, #0 wcz
0772c     01 2A 66 E6 |  if_be	neg	result1, #1
07730     1C 00 90 ED |  if_be	jmp	#LR__0409
07734     01 70 86 F1 | 	sub	local04, #1
07738     36 71 62 FC | 	wrlong	local04, local02
0773c     04 6C 06 F1 | 	add	local02, #4
07740     36 81 02 FB | 	rdlong	local12, local02
07744     40 2B C2 FA | 	rdbyte	result1, local12
07748     01 80 06 F1 | 	add	local12, #1
0774c     36 81 62 FC | 	wrlong	local12, local02
07750                 | LR__0409
07750     AF F0 03 F6 | 	mov	ptra, fp
07754     BF 00 A0 FD | 	call	#popregs_
07758                 | __system____default_getc_ret
07758     2D 00 64 FD | 	ret
0775c                 | 
0775c                 | __system____default_putc
0775c     06 5A 05 F6 | 	mov	COUNT_, #6
07760     B0 00 A0 FD | 	call	#pushregs_
07764     2E 6B 02 F6 | 	mov	local01, arg01
07768     2F 6D 02 F6 | 	mov	local02, arg02
0776c     36 6F 02 FB | 	rdlong	local03, local02
07770     08 6E 06 F1 | 	add	local03, #8
07774     37 71 02 FB | 	rdlong	local04, local03
07778     08 6E 86 F1 | 	sub	local03, #8
0777c     01 70 CE F7 | 	test	local04, #1 wz
07780     08 00 90 AD |  if_e	jmp	#LR__0410
07784     36 5D 02 F6 | 	mov	arg01, local02
07788     00 01 B0 FD | 	call	#__system____default_flush
0778c                 | LR__0410
0778c     08 6E 06 F1 | 	add	local03, #8
07790     37 71 02 FB | 	rdlong	local04, local03
07794     02 70 46 F5 | 	or	local04, #2
07798     37 71 62 FC | 	wrlong	local04, local03
0779c     08 6E 86 F1 | 	sub	local03, #8
077a0     37 73 02 FB | 	rdlong	local05, local03
077a4     39 75 02 F6 | 	mov	local06, local05
077a8     0C 6E 06 F1 | 	add	local03, #12
077ac     37 75 02 F1 | 	add	local06, local03
077b0     3A 6B 42 FC | 	wrbyte	local01, local06
077b4     FF 6A 06 F5 | 	and	local01, #255
077b8     01 72 06 F1 | 	add	local05, #1
077bc     0C 6E 86 F1 | 	sub	local03, #12
077c0     37 73 62 FC | 	wrlong	local05, local03
077c4     02 00 00 FF 
077c8     00 72 0E F2 | 	cmp	local05, ##1024 wz
077cc     10 00 90 5D |  if_ne	jmp	#LR__0411
077d0     36 5D 02 F6 | 	mov	arg01, local02
077d4     B4 00 B0 FD | 	call	#__system____default_flush
077d8     00 2A 0E F2 | 	cmp	result1, #0 wz
077dc     01 6A 66 56 |  if_ne	neg	local01, #1
077e0                 | LR__0411
077e0     35 2B 02 F6 | 	mov	result1, local01
077e4     AF F0 03 F6 | 	mov	ptra, fp
077e8     BF 00 A0 FD | 	call	#popregs_
077ec                 | __system____default_putc_ret
077ec     2D 00 64 FD | 	ret
077f0                 | 
077f0                 | __system____default_putc_terminal
077f0     06 5A 05 F6 | 	mov	COUNT_, #6
077f4     B0 00 A0 FD | 	call	#pushregs_
077f8     2E 6B 02 F6 | 	mov	local01, arg01
077fc     2F 6D 02 F6 | 	mov	local02, arg02
07800     36 6F 02 FB | 	rdlong	local03, local02
07804     08 6E 06 F1 | 	add	local03, #8
07808     37 71 02 FB | 	rdlong	local04, local03
0780c     08 6E 86 F1 | 	sub	local03, #8
07810     01 70 CE F7 | 	test	local04, #1 wz
07814     08 00 90 AD |  if_e	jmp	#LR__0412
07818     36 5D 02 F6 | 	mov	arg01, local02
0781c     6C 00 B0 FD | 	call	#__system____default_flush
07820                 | LR__0412
07820     08 6E 06 F1 | 	add	local03, #8
07824     37 71 02 FB | 	rdlong	local04, local03
07828     02 70 46 F5 | 	or	local04, #2
0782c     37 71 62 FC | 	wrlong	local04, local03
07830     08 6E 86 F1 | 	sub	local03, #8
07834     37 73 02 FB | 	rdlong	local05, local03
07838     39 75 02 F6 | 	mov	local06, local05
0783c     0C 6E 06 F1 | 	add	local03, #12
07840     37 75 02 F1 | 	add	local06, local03
07844     3A 6B 42 FC | 	wrbyte	local01, local06
07848     FF 6A 06 F5 | 	and	local01, #255
0784c     0C 6E 86 F1 | 	sub	local03, #12
07850     01 72 06 F1 | 	add	local05, #1
07854     37 73 62 FC | 	wrlong	local05, local03
07858     0A 6A 0E F2 | 	cmp	local01, #10 wz
0785c     0C 00 90 AD |  if_e	jmp	#LR__0413
07860     02 00 00 FF 
07864     00 72 0E F2 | 	cmp	local05, ##1024 wz
07868     10 00 90 5D |  if_ne	jmp	#LR__0414
0786c                 | LR__0413
0786c     36 5D 02 F6 | 	mov	arg01, local02
07870     18 00 B0 FD | 	call	#__system____default_flush
07874     00 2A 0E F2 | 	cmp	result1, #0 wz
07878     01 6A 66 56 |  if_ne	neg	local01, #1
0787c                 | LR__0414
0787c     35 2B 02 F6 | 	mov	result1, local01
07880     AF F0 03 F6 | 	mov	ptra, fp
07884     BF 00 A0 FD | 	call	#popregs_
07888                 | __system____default_putc_terminal_ret
07888     2D 00 64 FD | 	ret
0788c                 | 
0788c                 | __system____default_flush
0788c     0F 5A 05 F6 | 	mov	COUNT_, #15
07890     B0 00 A0 FD | 	call	#pushregs_
07894     2E 6B 02 F6 | 	mov	local01, arg01
07898     35 6D 02 FB | 	rdlong	local02, local01
0789c     36 6F 02 FB | 	rdlong	local03, local02
078a0     08 6C 06 F1 | 	add	local02, #8
078a4     36 71 02 FB | 	rdlong	local04, local02
078a8     08 6C 86 F1 | 	sub	local02, #8
078ac     02 70 CE F7 | 	test	local04, #2 wz
078b0     B8 00 90 AD |  if_e	jmp	#LR__0417
078b4     00 6E 5E F2 | 	cmps	local03, #0 wcz
078b8     30 01 90 ED |  if_be	jmp	#LR__0419
078bc     08 6A 06 F1 | 	add	local01, #8
078c0     35 71 02 FB | 	rdlong	local04, local01
078c4     08 6A 86 F1 | 	sub	local01, #8
078c8     40 70 CE F7 | 	test	local04, #64 wz
078cc     5C 00 90 AD |  if_e	jmp	#LR__0416
078d0     08 6A 06 F1 | 	add	local01, #8
078d4     35 71 02 FB | 	rdlong	local04, local01
078d8     08 6A 86 F1 | 	sub	local01, #8
078dc     80 70 CE F7 | 	test	local04, #128 wz
078e0     48 00 90 AD |  if_e	jmp	#LR__0415
078e4     2C 6A 06 F1 | 	add	local01, #44
078e8     35 71 02 FB | 	rdlong	local04, local01
078ec     2C 6A 86 F1 | 	sub	local01, #44
078f0     38 73 02 FB | 	rdlong	local05, local04
078f4     04 70 06 F1 | 	add	local04, #4
078f8     38 75 02 FB | 	rdlong	local06, local04
078fc     35 5D 02 F6 | 	mov	arg01, local01
07900     00 5E 06 F6 | 	mov	arg02, #0
07904     02 60 06 F6 | 	mov	arg03, #2
07908     07 77 02 F6 | 	mov	local07, objptr
0790c     39 0F 02 F6 | 	mov	objptr, local05
07910     2D 74 62 FD | 	call	local06
07914     3B 0F 02 F6 | 	mov	objptr, local07
07918     08 6A 06 F1 | 	add	local01, #8
0791c     35 71 02 FB | 	rdlong	local04, local01
07920     80 70 26 F5 | 	andn	local04, #128
07924     35 71 62 FC | 	wrlong	local04, local01
07928     08 6A 86 F1 | 	sub	local01, #8
0792c                 | LR__0415
0792c                 | LR__0416
0792c     0C 6C 06 F1 | 	add	local02, #12
07930     36 5F 02 F6 | 	mov	arg02, local02
07934     0C 6C 86 F1 | 	sub	local02, #12
07938     14 6A 06 F1 | 	add	local01, #20
0793c     35 71 02 FB | 	rdlong	local04, local01
07940     14 6A 86 F1 | 	sub	local01, #20
07944     38 73 02 FB | 	rdlong	local05, local04
07948     04 70 06 F1 | 	add	local04, #4
0794c     38 75 02 FB | 	rdlong	local06, local04
07950     35 5D 02 F6 | 	mov	arg01, local01
07954     37 61 02 F6 | 	mov	arg03, local03
07958     07 77 02 F6 | 	mov	local07, objptr
0795c     39 0F 02 F6 | 	mov	objptr, local05
07960     2D 74 62 FD | 	call	local06
07964     3B 0F 02 F6 | 	mov	objptr, local07
07968     80 00 90 FD | 	jmp	#LR__0419
0796c                 | LR__0417
0796c     08 6C 06 F1 | 	add	local02, #8
07970     36 71 02 FB | 	rdlong	local04, local02
07974     08 6C 86 F1 | 	sub	local02, #8
07978     01 70 CE F7 | 	test	local04, #1 wz
0797c     6C 00 90 AD |  if_e	jmp	#LR__0418
07980     00 6E 0E F2 | 	cmp	local03, #0 wz
07984     64 00 90 AD |  if_e	jmp	#LR__0418
07988     2C 6A 06 F1 | 	add	local01, #44
0798c     35 79 02 FB | 	rdlong	local08, local01
07990     2C 6A 86 F1 | 	sub	local01, #44
07994     3C 71 02 F6 | 	mov	local04, local08
07998     38 73 02 FB | 	rdlong	local05, local04
0799c     04 70 06 F1 | 	add	local04, #4
079a0     38 7B 02 FB | 	rdlong	local09, local04
079a4     04 70 86 F1 | 	sub	local04, #4
079a8     3D 75 02 F6 | 	mov	local06, local09
079ac     35 7D 02 F6 | 	mov	local10, local01
079b0     37 7F 02 F6 | 	mov	local11, local03
079b4     3F 7F 62 F6 | 	neg	local11, local11
079b8     3F 81 02 F6 | 	mov	local12, local11
079bc     01 76 06 F6 | 	mov	local07, #1
079c0     3E 5D 02 F6 | 	mov	arg01, local10
079c4     40 5F 02 F6 | 	mov	arg02, local12
079c8     01 60 06 F6 | 	mov	arg03, #1
079cc     07 83 02 F6 | 	mov	local13, objptr
079d0     39 0F 02 F6 | 	mov	objptr, local05
079d4     2D 74 62 FD | 	call	local06
079d8     41 0F 02 F6 | 	mov	objptr, local13
079dc     15 85 02 F6 | 	mov	local14, result1
079e0     42 87 02 F6 | 	mov	local15, local14
079e4     00 86 5E F2 | 	cmps	local15, #0 wcz
079e8     37 87 02 36 |  if_ae	mov	local15, local03
079ec                 | LR__0418
079ec                 | LR__0419
079ec     36 01 68 FC | 	wrlong	#0, local02
079f0     04 6C 06 F1 | 	add	local02, #4
079f4     36 01 68 FC | 	wrlong	#0, local02
079f8     04 6C 06 F1 | 	add	local02, #4
079fc     36 01 68 FC | 	wrlong	#0, local02
07a00     00 2A 06 F6 | 	mov	result1, #0
07a04     AF F0 03 F6 | 	mov	ptra, fp
07a08     BF 00 A0 FD | 	call	#popregs_
07a0c                 | __system____default_flush_ret
07a0c     2D 00 64 FD | 	ret
07a10                 | 
07a10                 | __system___rxtxioctl_0174
07a10     02 5A 05 F6 | 	mov	COUNT_, #2
07a14     B0 00 A0 FD | 	call	#pushregs_
07a18     2F 6B 02 F6 | 	mov	local01, arg02
07a1c     30 6D 02 F6 | 	mov	local02, arg03
07a20     00 6B 0E F2 | 	cmp	local01, #256 wz
07a24     0C 00 90 AD |  if_e	jmp	#LR__0420
07a28     01 6B 0E F2 | 	cmp	local01, #257 wz
07a2c     1C 00 90 AD |  if_e	jmp	#LR__0421
07a30     30 00 90 FD | 	jmp	#LR__0422
07a34                 | LR__0420
07a34     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a38     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07a3c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a40     36 2B 62 FC | 	wrlong	result1, local02
07a44     00 2A 06 F6 | 	mov	result1, #0
07a48     30 00 90 FD | 	jmp	#LR__0423
07a4c                 | LR__0421
07a4c     36 5D 02 FB | 	rdlong	arg01, local02
07a50     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a54     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07a58     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a5c     00 2A 06 F6 | 	mov	result1, #0
07a60     18 00 90 FD | 	jmp	#LR__0423
07a64                 | LR__0422
07a64     01 00 00 FF 
07a68     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a6c     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07a70     01 00 00 FF 
07a74     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a78     01 2A 66 F6 | 	neg	result1, #1
07a7c                 | LR__0423
07a7c     AF F0 03 F6 | 	mov	ptra, fp
07a80     BF 00 A0 FD | 	call	#popregs_
07a84                 | __system___rxtxioctl_0174_ret
07a84     2D 00 64 FD | 	ret
07a88                 | 
07a88                 | __system____dummy_flush_0175
07a88     00 2A 06 F6 | 	mov	result1, #0
07a8c                 | __system____dummy_flush_0175_ret
07a8c     2D 00 64 FD | 	ret
07a90                 | 
07a90                 | __system___vfswrite
07a90     0B 5A 05 F6 | 	mov	COUNT_, #11
07a94     B0 00 A0 FD | 	call	#pushregs_
07a98     2E 6B 02 F6 | 	mov	local01, arg01
07a9c     2F 6D 02 F6 | 	mov	local02, arg02
07aa0     30 6F 02 F6 | 	mov	local03, arg03
07aa4     36 71 02 F6 | 	mov	local04, local02
07aa8     08 6A 06 F1 | 	add	local01, #8
07aac     35 73 02 FB | 	rdlong	local05, local01
07ab0     08 6A 86 F1 | 	sub	local01, #8
07ab4     02 72 CE F7 | 	test	local05, #2 wz
07ab8     1C 00 90 5D |  if_ne	jmp	#LR__0424
07abc     01 00 00 FF 
07ac0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ac4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07ac8     01 00 00 FF 
07acc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07ad0     01 2A 66 F6 | 	neg	result1, #1
07ad4     70 01 90 FD | 	jmp	#LR__0432
07ad8                 | LR__0424
07ad8     08 6A 06 F1 | 	add	local01, #8
07adc     35 73 02 FB | 	rdlong	local05, local01
07ae0     08 6A 86 F1 | 	sub	local01, #8
07ae4     40 72 CE F7 | 	test	local05, #64 wz
07ae8     5C 00 90 AD |  if_e	jmp	#LR__0426
07aec     08 6A 06 F1 | 	add	local01, #8
07af0     35 73 02 FB | 	rdlong	local05, local01
07af4     08 6A 86 F1 | 	sub	local01, #8
07af8     80 72 CE F7 | 	test	local05, #128 wz
07afc     48 00 90 AD |  if_e	jmp	#LR__0425
07b00     2C 6A 06 F1 | 	add	local01, #44
07b04     35 73 02 FB | 	rdlong	local05, local01
07b08     2C 6A 86 F1 | 	sub	local01, #44
07b0c     39 75 02 FB | 	rdlong	local06, local05
07b10     04 72 06 F1 | 	add	local05, #4
07b14     39 77 02 FB | 	rdlong	local07, local05
07b18     35 5D 02 F6 | 	mov	arg01, local01
07b1c     00 5E 06 F6 | 	mov	arg02, #0
07b20     02 60 06 F6 | 	mov	arg03, #2
07b24     07 79 02 F6 | 	mov	local08, objptr
07b28     3A 0F 02 F6 | 	mov	objptr, local06
07b2c     2D 76 62 FD | 	call	local07
07b30     3C 0F 02 F6 | 	mov	objptr, local08
07b34     08 6A 06 F1 | 	add	local01, #8
07b38     35 73 02 FB | 	rdlong	local05, local01
07b3c     80 72 26 F5 | 	andn	local05, #128
07b40     35 73 62 FC | 	wrlong	local05, local01
07b44     08 6A 86 F1 | 	sub	local01, #8
07b48                 | LR__0425
07b48                 | LR__0426
07b48     14 6A 06 F1 | 	add	local01, #20
07b4c     35 73 0A FB | 	rdlong	local05, local01 wz
07b50     14 6A 86 F1 | 	sub	local01, #20
07b54     7C 00 90 AD |  if_e	jmp	#LR__0428
07b58     14 6A 06 F1 | 	add	local01, #20
07b5c     35 73 02 FB | 	rdlong	local05, local01
07b60     14 6A 86 F1 | 	sub	local01, #20
07b64     39 75 02 FB | 	rdlong	local06, local05
07b68     04 72 06 F1 | 	add	local05, #4
07b6c     39 77 02 FB | 	rdlong	local07, local05
07b70     36 5F 02 F6 | 	mov	arg02, local02
07b74     37 61 02 F6 | 	mov	arg03, local03
07b78     35 5D 02 F6 | 	mov	arg01, local01
07b7c     07 79 02 F6 | 	mov	local08, objptr
07b80     3A 0F 02 F6 | 	mov	objptr, local06
07b84     2D 76 62 FD | 	call	local07
07b88     3C 0F 02 F6 | 	mov	objptr, local08
07b8c     15 7B 02 F6 | 	mov	local09, result1
07b90     00 7A 5E F2 | 	cmps	local09, #0 wcz
07b94     34 00 90 3D |  if_ae	jmp	#LR__0427
07b98     08 6A 06 F1 | 	add	local01, #8
07b9c     35 73 02 FB | 	rdlong	local05, local01
07ba0     20 72 46 F5 | 	or	local05, #32
07ba4     35 73 62 FC | 	wrlong	local05, local01
07ba8     01 00 00 FF 
07bac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bb0     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07bb4     01 00 00 FF 
07bb8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bbc     00 7A 0E F2 | 	cmp	local09, #0 wz
07bc0     01 2A 66 56 |  if_ne	neg	result1, #1
07bc4     00 2A 06 A6 |  if_e	mov	result1, #0
07bc8     7C 00 90 FD | 	jmp	#LR__0432
07bcc                 | LR__0427
07bcc     3D 2B 02 F6 | 	mov	result1, local09
07bd0     74 00 90 FD | 	jmp	#LR__0432
07bd4                 | LR__0428
07bd4     18 6A 06 F1 | 	add	local01, #24
07bd8     35 7D 0A FB | 	rdlong	local10, local01 wz
07bdc     18 6A 86 F1 | 	sub	local01, #24
07be0     1C 00 90 5D |  if_ne	jmp	#LR__0429
07be4     01 00 00 FF 
07be8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bec     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07bf0     01 00 00 FF 
07bf4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bf8     01 2A 66 F6 | 	neg	result1, #1
07bfc     48 00 90 FD | 	jmp	#LR__0432
07c00                 | LR__0429
07c00     00 7A 06 F6 | 	mov	local09, #0
07c04                 | LR__0430
07c04     00 6E 1E F2 | 	cmp	local03, #0 wcz
07c08     38 00 90 ED |  if_be	jmp	#LR__0431
07c0c     3E 73 02 F6 | 	mov	local05, local10
07c10     39 75 02 FB | 	rdlong	local06, local05
07c14     04 72 06 F1 | 	add	local05, #4
07c18     39 77 02 FB | 	rdlong	local07, local05
07c1c     38 5D C2 FA | 	rdbyte	arg01, local04
07c20     35 5F 02 F6 | 	mov	arg02, local01
07c24     07 7F 02 F6 | 	mov	local11, objptr
07c28     3A 0F 02 F6 | 	mov	objptr, local06
07c2c     01 70 06 F1 | 	add	local04, #1
07c30     2D 76 62 FD | 	call	local07
07c34     3F 0F 02 F6 | 	mov	objptr, local11
07c38     15 7B 02 F1 | 	add	local09, result1
07c3c     01 6E 86 F1 | 	sub	local03, #1
07c40     C0 FF 9F FD | 	jmp	#LR__0430
07c44                 | LR__0431
07c44     3D 2B 02 F6 | 	mov	result1, local09
07c48                 | LR__0432
07c48     AF F0 03 F6 | 	mov	ptra, fp
07c4c     BF 00 A0 FD | 	call	#popregs_
07c50                 | __system___vfswrite_ret
07c50     2D 00 64 FD | 	ret
07c54                 | 
07c54                 | __system___vfsread
07c54     0F 5A 05 F6 | 	mov	COUNT_, #15
07c58     B0 00 A0 FD | 	call	#pushregs_
07c5c     2C F0 07 F1 | 	add	ptra, #44
07c60     04 5E 05 F1 | 	add	fp, #4
07c64     AF 5C 62 FC | 	wrlong	arg01, fp
07c68     04 5E 05 F1 | 	add	fp, #4
07c6c     AF 5E 62 FC | 	wrlong	arg02, fp
07c70     04 5E 05 F1 | 	add	fp, #4
07c74     AF 60 62 FC | 	wrlong	arg03, fp
07c78     04 5E 85 F1 | 	sub	fp, #4
07c7c     AF 6A 02 FB | 	rdlong	local01, fp
07c80     14 5E 05 F1 | 	add	fp, #20
07c84     AF 6A 62 FC | 	wrlong	local01, fp
07c88     04 5E 05 F1 | 	add	fp, #4
07c8c     AF 00 68 FC | 	wrlong	#0, fp
07c90     1C 5E 85 F1 | 	sub	fp, #28
07c94     AF 6C 02 FB | 	rdlong	local02, fp
07c98     04 5E 85 F1 | 	sub	fp, #4
07c9c     08 6C 06 F1 | 	add	local02, #8
07ca0     36 6B 02 FB | 	rdlong	local01, local02
07ca4     01 6A CE F7 | 	test	local01, #1 wz
07ca8     1C 00 90 5D |  if_ne	jmp	#LR__0433
07cac     01 00 00 FF 
07cb0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07cb4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07cb8     01 00 00 FF 
07cbc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07cc0     01 2A 66 F6 | 	neg	result1, #1
07cc4     9C 02 90 FD | 	jmp	#LR__0441
07cc8                 | LR__0433
07cc8     04 5E 05 F1 | 	add	fp, #4
07ccc     AF 6A 02 FB | 	rdlong	local01, fp
07cd0     04 5E 85 F1 | 	sub	fp, #4
07cd4     10 6A 06 F1 | 	add	local01, #16
07cd8     35 6F 0A FB | 	rdlong	local03, local01 wz
07cdc     B4 00 90 AD |  if_e	jmp	#LR__0435
07ce0     04 5E 05 F1 | 	add	fp, #4
07ce4     AF 70 02 FB | 	rdlong	local04, fp
07ce8     10 70 06 F1 | 	add	local04, #16
07cec     38 6B 02 FB | 	rdlong	local01, local04
07cf0     35 6D 02 FB | 	rdlong	local02, local01
07cf4     04 6A 06 F1 | 	add	local01, #4
07cf8     35 6F 02 FB | 	rdlong	local03, local01
07cfc     AF 5C 02 FB | 	rdlong	arg01, fp
07d00     04 5E 05 F1 | 	add	fp, #4
07d04     AF 5E 02 FB | 	rdlong	arg02, fp
07d08     04 5E 05 F1 | 	add	fp, #4
07d0c     AF 60 02 FB | 	rdlong	arg03, fp
07d10     0C 5E 85 F1 | 	sub	fp, #12
07d14     07 73 02 F6 | 	mov	local05, objptr
07d18     36 0F 02 F6 | 	mov	objptr, local02
07d1c     2D 6E 62 FD | 	call	local03
07d20     39 0F 02 F6 | 	mov	objptr, local05
07d24     10 5E 05 F1 | 	add	fp, #16
07d28     AF 2A 62 FC | 	wrlong	result1, fp
07d2c     10 5E 85 F1 | 	sub	fp, #16
07d30     00 2A 5E F2 | 	cmps	result1, #0 wcz
07d34     4C 00 90 3D |  if_ae	jmp	#LR__0434
07d38     04 5E 05 F1 | 	add	fp, #4
07d3c     AF 6A 02 FB | 	rdlong	local01, fp
07d40     35 71 02 F6 | 	mov	local04, local01
07d44     08 70 06 F1 | 	add	local04, #8
07d48     38 6F 02 FB | 	rdlong	local03, local04
07d4c     20 6E 46 F5 | 	or	local03, #32
07d50     08 6A 06 F1 | 	add	local01, #8
07d54     35 6F 62 FC | 	wrlong	local03, local01
07d58     0C 5E 05 F1 | 	add	fp, #12
07d5c     AF 5C 0A FB | 	rdlong	arg01, fp wz
07d60     10 5E 85 F1 | 	sub	fp, #16
07d64     01 00 00 FF 
07d68     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d6c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07d70     01 00 00 FF 
07d74     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d78     01 2A 66 56 |  if_ne	neg	result1, #1
07d7c     00 2A 06 A6 |  if_e	mov	result1, #0
07d80     E0 01 90 FD | 	jmp	#LR__0441
07d84                 | LR__0434
07d84     10 5E 05 F1 | 	add	fp, #16
07d88     AF 2A 02 FB | 	rdlong	result1, fp
07d8c     10 5E 85 F1 | 	sub	fp, #16
07d90     D0 01 90 FD | 	jmp	#LR__0441
07d94                 | LR__0435
07d94     04 5E 05 F1 | 	add	fp, #4
07d98     AF 6A 02 FB | 	rdlong	local01, fp
07d9c     1C 6A 06 F1 | 	add	local01, #28
07da0     35 6F 02 FB | 	rdlong	local03, local01
07da4     14 5E 05 F1 | 	add	fp, #20
07da8     AF 6E 62 FC | 	wrlong	local03, fp
07dac     AF 6A 0A FB | 	rdlong	local01, fp wz
07db0     18 5E 85 F1 | 	sub	fp, #24
07db4     1C 00 90 5D |  if_ne	jmp	#LR__0436
07db8     01 00 00 FF 
07dbc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07dc0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07dc4     01 00 00 FF 
07dc8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07dcc     01 2A 66 F6 | 	neg	result1, #1
07dd0     90 01 90 FD | 	jmp	#LR__0441
07dd4                 | LR__0436
07dd4     04 5E 05 F1 | 	add	fp, #4
07dd8     AF 6A 02 FB | 	rdlong	local01, fp
07ddc     04 5E 85 F1 | 	sub	fp, #4
07de0     24 6A 06 F1 | 	add	local01, #36
07de4     35 6F 0A FB | 	rdlong	local03, local01 wz
07de8     A0 00 90 AD |  if_e	jmp	#LR__0438
07dec     24 5E 05 F1 | 	add	fp, #36
07df0     AF 74 02 F6 | 	mov	local06, fp
07df4     20 5E 85 F1 | 	sub	fp, #32
07df8     AF 76 02 FB | 	rdlong	local07, fp
07dfc     3B 71 02 F6 | 	mov	local04, local07
07e00     24 70 06 F1 | 	add	local04, #36
07e04     38 79 02 FB | 	rdlong	local08, local04
07e08     3C 6B 02 F6 | 	mov	local01, local08
07e0c     35 6D 02 FB | 	rdlong	local02, local01
07e10     04 6A 06 F1 | 	add	local01, #4
07e14     35 7B 02 FB | 	rdlong	local09, local01
07e18     3D 6F 02 F6 | 	mov	local03, local09
07e1c     3B 7D 02 F6 | 	mov	local10, local07
07e20     04 5E 85 F1 | 	sub	fp, #4
07e24     3E 7F 02 F6 | 	mov	local11, local10
07e28     00 81 06 F6 | 	mov	local12, #256
07e2c     3A 83 02 F6 | 	mov	local13, local06
07e30     3F 5D 02 F6 | 	mov	arg01, local11
07e34     00 5F 06 F6 | 	mov	arg02, #256
07e38     41 61 02 F6 | 	mov	arg03, local13
07e3c     07 85 02 F6 | 	mov	local14, objptr
07e40     36 0F 02 F6 | 	mov	objptr, local02
07e44     2D 6E 62 FD | 	call	local03
07e48     42 0F 02 F6 | 	mov	objptr, local14
07e4c     15 87 02 F6 | 	mov	local15, result1
07e50     10 5E 05 F1 | 	add	fp, #16
07e54     AF 86 62 FC | 	wrlong	local15, fp
07e58     AF 6C 0A FB | 	rdlong	local02, fp wz
07e5c     10 5E 85 F1 | 	sub	fp, #16
07e60     28 00 90 5D |  if_ne	jmp	#LR__0437
07e64     24 5E 05 F1 | 	add	fp, #36
07e68     AF 70 02 FB | 	rdlong	local04, fp
07e6c     24 5E 85 F1 | 	sub	fp, #36
07e70     38 6F 02 F6 | 	mov	local03, local04
07e74     02 6E 0E F5 | 	and	local03, #2 wz
07e78     10 00 90 AD |  if_e	jmp	#LR__0437
07e7c     01 6A 06 F6 | 	mov	local01, #1
07e80     20 5E 05 F1 | 	add	fp, #32
07e84     AF 02 68 FC | 	wrlong	#1, fp
07e88     20 5E 85 F1 | 	sub	fp, #32
07e8c                 | LR__0437
07e8c                 | LR__0438
07e8c     10 5E 05 F1 | 	add	fp, #16
07e90     AF 00 68 FC | 	wrlong	#0, fp
07e94     10 5E 85 F1 | 	sub	fp, #16
07e98                 | LR__0439
07e98     0C 5E 05 F1 | 	add	fp, #12
07e9c     AF 6A 02 FB | 	rdlong	local01, fp
07ea0     0C 5E 85 F1 | 	sub	fp, #12
07ea4     00 6A 1E F2 | 	cmp	local01, #0 wcz
07ea8     AC 00 90 ED |  if_be	jmp	#LR__0440
07eac     18 5E 05 F1 | 	add	fp, #24
07eb0     AF 6A 02 FB | 	rdlong	local01, fp
07eb4     35 6D 02 FB | 	rdlong	local02, local01
07eb8     04 6A 06 F1 | 	add	local01, #4
07ebc     35 6F 02 FB | 	rdlong	local03, local01
07ec0     14 5E 85 F1 | 	sub	fp, #20
07ec4     AF 5C 02 FB | 	rdlong	arg01, fp
07ec8     04 5E 85 F1 | 	sub	fp, #4
07ecc     07 7F 02 F6 | 	mov	local11, objptr
07ed0     36 0F 02 F6 | 	mov	objptr, local02
07ed4     2D 6E 62 FD | 	call	local03
07ed8     3F 0F 02 F6 | 	mov	objptr, local11
07edc     15 7D 02 F6 | 	mov	local10, result1
07ee0     14 5E 05 F1 | 	add	fp, #20
07ee4     AF 7C 62 FC | 	wrlong	local10, fp
07ee8     14 5E 85 F1 | 	sub	fp, #20
07eec     00 7C 5E F2 | 	cmps	local10, #0 wcz
07ef0     64 00 90 CD |  if_b	jmp	#LR__0440
07ef4     1C 5E 05 F1 | 	add	fp, #28
07ef8     AF 6A 02 FB | 	rdlong	local01, fp
07efc     35 6F 02 F6 | 	mov	local03, local01
07f00     01 6E 06 F1 | 	add	local03, #1
07f04     AF 6E 62 FC | 	wrlong	local03, fp
07f08     08 5E 85 F1 | 	sub	fp, #8
07f0c     AF 76 02 FB | 	rdlong	local07, fp
07f10     35 77 42 FC | 	wrbyte	local07, local01
07f14     04 5E 85 F1 | 	sub	fp, #4
07f18     AF 6A 02 FB | 	rdlong	local01, fp
07f1c     01 6A 06 F1 | 	add	local01, #1
07f20     AF 6A 62 FC | 	wrlong	local01, fp
07f24     04 5E 85 F1 | 	sub	fp, #4
07f28     AF 6A 02 FB | 	rdlong	local01, fp
07f2c     01 6A 86 F1 | 	sub	local01, #1
07f30     AF 6A 62 FC | 	wrlong	local01, fp
07f34     14 5E 05 F1 | 	add	fp, #20
07f38     AF 6A 0A FB | 	rdlong	local01, fp wz
07f3c     20 5E 85 F1 | 	sub	fp, #32
07f40     54 FF 9F AD |  if_e	jmp	#LR__0439
07f44     14 5E 05 F1 | 	add	fp, #20
07f48     AF 6E 02 FB | 	rdlong	local03, fp
07f4c     14 5E 85 F1 | 	sub	fp, #20
07f50     0A 6E 0E F2 | 	cmp	local03, #10 wz
07f54     40 FF 9F 5D |  if_ne	jmp	#LR__0439
07f58                 | LR__0440
07f58     10 5E 05 F1 | 	add	fp, #16
07f5c     AF 2A 02 FB | 	rdlong	result1, fp
07f60     10 5E 85 F1 | 	sub	fp, #16
07f64                 | LR__0441
07f64     AF F0 03 F6 | 	mov	ptra, fp
07f68     BF 00 A0 FD | 	call	#popregs_
07f6c                 | __system___vfsread_ret
07f6c     2D 00 64 FD | 	ret
07f70                 | 
07f70                 | ' 	
07f70                 | ' 	FUNCTION pfunc(c as integer) as integer
07f70                 | ___strs_cl_pfunc
07f70                 | ' 		if (i < 16) then
07f70     04 0E 06 F1 | 	add	objptr, #4
07f74     07 31 02 FB | 	rdlong	_var01, objptr
07f78     04 0E 86 F1 | 	sub	objptr, #4
07f7c     10 30 5E F2 | 	cmps	_var01, #16 wcz
07f80     2C 00 90 3D |  if_ae	jmp	#LR__0442
07f84     07 33 02 FB | 	rdlong	_var02, objptr
07f88     04 0E 06 F1 | 	add	objptr, #4
07f8c     07 35 02 FB | 	rdlong	_var03, objptr
07f90     19 35 02 F1 | 	add	_var03, _var02
07f94     1A 5D 42 FC | 	wrbyte	arg01, _var03
07f98     07 31 02 FB | 	rdlong	_var01, objptr
07f9c     01 30 06 F1 | 	add	_var01, #1
07fa0     07 31 62 FC | 	wrlong	_var01, objptr
07fa4     04 0E 86 F1 | 	sub	objptr, #4
07fa8                 | ' 			p(i) = c
07fa8                 | ' 			i = i+1
07fa8                 | ' 			return 1
07fa8     01 2A 06 F6 | 	mov	result1, #1
07fac     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
07fb0                 | LR__0442
07fb0                 | ' 			return -1
07fb0     01 2A 66 F6 | 	neg	result1, #1
07fb4                 | ___strs_cl_pfunc_ret
07fb4     2D 00 64 FD | 	ret
07fb8                 | 
07fb8                 | __struct__s_vfs_file_t_putchar
07fb8     04 5A 05 F6 | 	mov	COUNT_, #4
07fbc     B0 00 A0 FD | 	call	#pushregs_
07fc0     18 0E 06 F1 | 	add	objptr, #24
07fc4     07 6B 0A FB | 	rdlong	local01, objptr wz
07fc8     18 0E 86 F1 | 	sub	objptr, #24
07fcc     00 2A 06 A6 |  if_e	mov	result1, #0
07fd0     3C 00 90 AD |  if_e	jmp	#LR__0443
07fd4     18 0E 06 F1 | 	add	objptr, #24
07fd8     07 6B 02 FB | 	rdlong	local01, objptr
07fdc     18 0E 86 F1 | 	sub	objptr, #24
07fe0     35 6D 02 FB | 	rdlong	local02, local01
07fe4     04 6A 06 F1 | 	add	local01, #4
07fe8     35 6F 02 FB | 	rdlong	local03, local01
07fec     07 5F 02 F6 | 	mov	arg02, objptr
07ff0     07 71 02 F6 | 	mov	local04, objptr
07ff4     36 0F 02 F6 | 	mov	objptr, local02
07ff8     2D 6E 62 FD | 	call	local03
07ffc     38 0F 02 F6 | 	mov	objptr, local04
08000     00 2A 5E F2 | 	cmps	result1, #0 wcz
08004     00 6A 06 C6 |  if_b	mov	local01, #0
08008     01 6A 06 36 |  if_ae	mov	local01, #1
0800c     35 2B 02 F6 | 	mov	result1, local01
08010                 | LR__0443
08010     AF F0 03 F6 | 	mov	ptra, fp
08014     BF 00 A0 FD | 	call	#popregs_
08018                 | __struct__s_vfs_file_t_putchar_ret
08018     2D 00 64 FD | 	ret
0801c                 | 
0801c                 | __struct__s_vfs_file_t_getchar
0801c     04 5A 05 F6 | 	mov	COUNT_, #4
08020     B0 00 A0 FD | 	call	#pushregs_
08024     1C 0E 06 F1 | 	add	objptr, #28
08028     07 6B 0A FB | 	rdlong	local01, objptr wz
0802c     1C 0E 86 F1 | 	sub	objptr, #28
08030     01 2A 66 A6 |  if_e	neg	result1, #1
08034     2C 00 90 AD |  if_e	jmp	#LR__0444
08038                 | '         return getcf(__this);
08038     1C 0E 06 F1 | 	add	objptr, #28
0803c     07 6B 02 FB | 	rdlong	local01, objptr
08040     1C 0E 86 F1 | 	sub	objptr, #28
08044     35 6D 02 FB | 	rdlong	local02, local01
08048     04 6A 06 F1 | 	add	local01, #4
0804c     35 6F 02 FB | 	rdlong	local03, local01
08050     07 5D 02 F6 | 	mov	arg01, objptr
08054     07 71 02 F6 | 	mov	local04, objptr
08058     36 0F 02 F6 | 	mov	objptr, local02
0805c     2D 6E 62 FD | 	call	local03
08060     38 0F 02 F6 | 	mov	objptr, local04
08064                 | LR__0444
08064     AF F0 03 F6 | 	mov	ptra, fp
08068     BF 00 A0 FD | 	call	#popregs_
0806c                 | __struct__s_vfs_file_t_getchar_ret
0806c     2D 00 64 FD | 	ret
08070                 | 
08070                 | __struct___bas_wrap_sender_tx
08070     04 5A 05 F6 | 	mov	COUNT_, #4
08074     B0 00 A0 FD | 	call	#pushregs_
08078     07 6B 02 FB | 	rdlong	local01, objptr
0807c     35 6D 02 FB | 	rdlong	local02, local01
08080     04 6A 06 F1 | 	add	local01, #4
08084     35 6F 02 FB | 	rdlong	local03, local01
08088     07 71 02 F6 | 	mov	local04, objptr
0808c     36 0F 02 F6 | 	mov	objptr, local02
08090     2D 6E 62 FD | 	call	local03
08094     38 0F 02 F6 | 	mov	objptr, local04
08098     01 2A 06 F6 | 	mov	result1, #1
0809c     AF F0 03 F6 | 	mov	ptra, fp
080a0     BF 00 A0 FD | 	call	#popregs_
080a4                 | __struct___bas_wrap_sender_tx_ret
080a4     2D 00 64 FD | 	ret
080a8                 | 
080a8                 | LR__0445
080a8     20          | 	byte	" "
080a9     00          | 	byte	0
080aa                 | LR__0446
080aa                 | 	byte	
080aa     00          | 	byte	0
080ab                 | LR__0447
080ab                 | 	byte	
080ab     00          | 	byte	0
080ac                 | LR__0448
080ac     20 21 21 21 
080b0     20 63 6F 72 
080b4     72 75 70 74 
080b8     65 64 20 68 
080bc     65 61 70 3F 
080c0     3F 3F 20 21 
080c4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
080c7     00          | 	byte	0
080c8                 | LR__0449
080c8     20 21 21 21 
080cc     20 6F 75 74 
080d0     20 6F 66 20 
080d4     68 65 61 70 
080d8     20 6D 65 6D 
080dc     6F 72 79 20 
080e0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
080e4     00          | 	byte	0
080e5                 | LR__0450
080e5     20 21 21 21 
080e9     20 63 6F 72 
080ed     72 75 70 74 
080f1     65 64 20 68 
080f5     65 61 70 20 
080f9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
080fd     00          | 	byte	0
080fe                 | LR__0451
080fe     4E 61 6D 65 
08102     20 20 20 20 
08106     20 20 20 20 
0810a     20 20 20 20 
0810e     20 20 20 20 
08112     20 20 20 6C 
08116     65 6E 20 20 
0811a     20 66 74 20 
0811e     76 6F 6C 20 
08122     72 65 70 20 
08126     20 20 72 2E 
0812a     6C 65 6E 20 
0812e     20 20 20 20 
08132     20 20 20 20 
08136     4E 61 6D 65 
0813a     20 20 20 20 
0813e     20 20 20 20 
08142     20 20 20 20 
08146     20 20 20 20 
0814a     20 20 20 6C 
0814e     65 6E 20 20 
08152     20 66 74 20 
08156     76 6F 6C 20 
0815a     72 65 70 20 
0815e     20 20 72 2E 
08162     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
08166     00          | 	byte	0
08167                 | LR__0452
08167     53          | 	byte	"S"
08168     00          | 	byte	0
08169                 | LR__0453
08169     20 20 20 20 
0816d     20 20 20 20 
08171     20 20 20 20 
08175     20 20 20 20 
08179     20 20 20 20 
0817d     20 20       | 	byte	"                      "
0817f     00          | 	byte	0
08180                 | LR__0454
08180     20          | 	byte	" "
08181     00          | 	byte	0
08182                 | LR__0455
08182     73 61 6D 70 
08186     6C 65 73 20 
0818a     6D 6F 64 75 
0818e     6C 65       | 	byte	"samples module"
08190     00          | 	byte	0
08191     00 00 00    | 	alignl
08194                 | _dat_
08194     6A 75 6E 67 
08198     6C 65 32 00 
0819c     00 00 00 00 
081a0     00 00 00 00 | module file "../../../mod/jungle.mod"
081a4     00 00 00 00 
081a8     73 74 2D 30 
081ac     33 3A 53 69 
081b0     6E 65 43 5A | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $33, $3a, $53, $69, $6e, $65, $43, $5a
081b4     00 00 00 00 
081b8     00 00 00 00 
081bc     00 00       | 	byte	$00[10]
081be     07 9E 00 40 
081c2     00 F6 04 31 
081c6     73 74 2D 30 
081ca     34 3A 54 69 | 	byte	$07, $9e, $00, $40, $00, $f6, $04, $31, $73, $74, $2d, $30, $34, $3a, $54, $69
081ce     6E 65 57 61 
081d2     76 65 00 00 
081d6     00 00 00 00 
081da     00 00 12 D1 | 	byte	$6e, $65, $57, $61, $76, $65, $00, $00, $00, $00, $00, $00, $00, $00, $12, $d1
081de     00 40 00 00 
081e2     00 01 73 74 
081e6     2D 30 34 3A 
081ea     53 79 6E 74 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $34, $3a, $53, $79, $6e, $74
081ee     68 65 42 61 
081f2     73 73 00 00 
081f6     00 00 00 00 
081fa     0F 6E 00 40 | 	byte	$68, $65, $42, $61, $73, $73, $00, $00, $00, $00, $00, $00, $0f, $6e, $00, $40
081fe     00 00 00 01 
08202     73 74 2D 30 
08206     32 3A 48 61 
0820a     6C 6C 42 72 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $61, $6c, $6c, $42, $72
0820e     61 73 73 00 
08212     00 00 00 00 
08216     00 00 12 5C 
0821a     00 40 00 00 | 	byte	$61, $73, $73, $00, $00, $00, $00, $00, $00, $00, $12, $5c, $00, $40, $00, $00
0821e     00 01 73 74 
08222     2D 30 31 3A 
08226     42 61 73 73 
0822a     44 72 75 6D | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $42, $61, $73, $73, $44, $72, $75, $6d
0822e     33 00 00 00 
08232     00 00 00 00 
08236     05 B3 00 40 
0823a     00 00 00 01 | 	byte	$33, $00, $00, $00, $00, $00, $00, $00, $05, $b3, $00, $40, $00, $00, $00, $01
0823e     73 74 2D 30 
08242     33 3A 50 6F 
08246     70 53 6E 61 
0824a     72 65 32 00 | 	byte	$73, $74, $2d, $30, $33, $3a, $50, $6f, $70, $53, $6e, $61, $72, $65, $32, $00
0824e     00 00 00 00 
08252     00 00       | 	byte	$00[6]
08254     07 D0 00 40 
08258     00 00 00 01 
0825c     73 74 2D 30 
08260     32 3A 48 69 | 	byte	$07, $d0, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $69
08264     48 61 74 32 
08268     00 00 00 00 
0826c     00 00 00 00 
08270     00 00 03 E8 | 	byte	$48, $61, $74, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $e8
08274     00 40 00 00 
08278     00 01 73 74 
0827c     2D 30 32 3A 
08280     4E 69 63 65 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $4e, $69, $63, $65
08284     00 00 00 00 
08288     00 00 00 00 
0828c     00 00 00 00 | 	byte	$00[12]
08290     0C E4 00 40 
08294     00 00 00 01 
08298     73 74 2D 30 
0829c     31 3A 44 69 | 	byte	$0c, $e4, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $44, $69
082a0     67 44 75 67 
082a4     00 00 00 00 
082a8     00 00 00 00 
082ac     00 00 06 0E | 	byte	$67, $44, $75, $67, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $0e
082b0     00 40 00 00 
082b4     00 01 00 00 
082b8     00 00 00 00 
082bc     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082c0     00 00 00 00 
      ...             
08544     00 00 00 00 
08548     00 00       | 	byte	$00[650]
0854a     23 00 00 01 
0854e     02 02 03 04 
08552     05 06 07 02 
08556     02 03 04 05 | 	byte	$23, $00, $00, $01, $02, $02, $03, $04, $05, $06, $07, $02, $02, $03, $04, $05
0855a     08 09 0A 0A 
0855e     0B 0C 0D 0D 
08562     0E 02 02 03 
08566     02 02 03 04 | 	byte	$08, $09, $0a, $0a, $0b, $0c, $0d, $0d, $0e, $02, $02, $03, $02, $02, $03, $04
0856a     05 06 0F 10 
0856e     11 00 00 00 
08572     00 00 00 00 
08576     00 00 00 00 | 	byte	$05, $06, $0f, $10, $11, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0857a     00 00 00 00 
      ...             
085c6     00 00 00 00 
085ca     00 00       | 	byte	$00[82]
085cc     4D 2E 4B 2E 
085d0     01 FC 1F 05 
085d4     03 58 10 00 
085d8     02 A6 10 00 | 	byte	$4d, $2e, $4b, $2e, $01, $fc, $1f, $05, $03, $58, $10, $00, $02, $a6, $10, $00
085dc     02 3A 10 00 
085e0     00 00 00 00 
085e4     00 00 00 00 
085e8     00 00 00 00 | 	byte	$02, $3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085ec     00 00 00 00 
      ...             
086c8     00 00 00 00 
086cc     00 00 00 00 | 	byte	$00[228]
086d0     02 FA 10 00 
086d4     02 5C 10 00 
086d8     01 FC 10 00 
086dc     01 AC 10 00 | 	byte	$02, $fa, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $ac, $10, $00
086e0     00 00 00 00 
      ...             
087c8     00 00 00 00 
087cc     00 00 00 00 | 	byte	$00[240]
087d0     02 D0 10 00 
087d4     02 5C 10 00 
087d8     01 FC 10 00 
087dc     01 C5 10 00 | 	byte	$02, $d0, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $c5, $10, $00
087e0     00 00 00 00 
      ...             
0888c     00 00 00 00 
08890     00 00       | 	byte	$00[178]
08892     0D 03 00 00 
08896     0D 03 00 00 
0889a     0D 03 00 00 
0889e     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
088a2     0D 03 00 00 
088a6     0D 03 00 00 
088aa     0D 03 00 00 
088ae     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
088b2     0D 03 00 00 
088b6     0D 03 00 00 
088ba     0D 03 00 00 
088be     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
088c2     0D 03 00 00 
088c6     0D 03 00 00 
088ca     0D 03 00 00 
088ce     0D 03 01 53 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $01, $53
088d2     20 00 00 00 
088d6     00 00 00 00 
088da     0D 03 00 00 
088de     0D 04 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $03, $00, $00, $0d, $04, $01, $2e
088e2     20 00 01 53 
088e6     2C 20 00 00 
088ea     0D 14 00 00 
088ee     0D 14 00 00 | 	byte	$20, $00, $01, $53, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088f2     00 00 01 2E 
088f6     2C 20 00 00 
088fa     0D 14 00 00 
088fe     0D 14 01 2E | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
08902     20 00 00 00 
08906     00 00 00 00 
0890a     0D 14 00 00 
0890e     0D 14 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
08912     20 00 01 2E 
08916     2C 20 00 00 
0891a     0D 14 00 00 
0891e     0D 14 00 00 | 	byte	$20, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
08922     00 00 01 2E 
08926     2C 20 00 00 
0892a     0D 14 00 00 
0892e     0D 14 00 00 | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
08932     00 00 00 00 
08936     00 00 00 00 | 	byte	$00[8]
0893a     0D 14 00 00 
0893e     0D 14 00 00 
08942     00 00 00 00 
08946     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0894a     0D 14 00 00 
0894e     0D 14 01 53 
08952     20 00 00 00 
08956     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
0895a     0D 14 00 00 
0895e     0D 14 01 2E 
08962     20 00 01 53 
08966     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00
0896a     0D 14 00 00 
0896e     0D 14 00 00 
08972     00 00 01 2E 
08976     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
0897a     0D 14 00 00 
0897e     0D 14 01 2E 
08982     20 00 00 00 
08986     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $00, $00, $00, $00, $00, $00
0898a     0D 14 00 00 
0898e     0D 14 01 2E 
08992     20 00 01 2E 
08996     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $2e, $2c, $20, $00, $00
0899a     0D 14 00 00 
0899e     0D 14 00 00 
089a2     00 00 01 2E 
089a6     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
089aa     0D 14 00 00 
089ae     0D 14 00 00 
089b2     00 00 00 00 
089b6     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089ba     0D 14 00 00 
089be     00 10 00 00 
089c2     00 00 00 00 
089c6     00 00 00 00 | 	byte	$0d, $14, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089ca     0C 00 00 00 
089ce     0C 00 01 53 
089d2     20 00 00 00 
089d6     00 00 00 00 | 	byte	$0c, $00, $00, $00, $0c, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
089da     00 00 00 00 
089de     00 00       | 	byte	$00[6]
089e0     01 2E 20 00 
089e4     01 53 2C 20 
089e8     00 00 00 00 
089ec     00 00 00 00 | 	byte	$01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00
089f0     00 00 00 00 
089f4     01 2E 00 00 
089f8     00 00 00 00 
089fc     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a00     01 2E 20 00 
08a04     00 00 00 00 
08a08     00 00 00 00 
08a0c     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a10     00 E2 20 00 
08a14     01 2E 00 00 
08a18     00 00 00 00 
08a1c     00 00 00 00 | 	byte	$00, $e2, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a20     00 FE 20 00 
08a24     00 E2 00 00 
08a28     00 00 00 00 
08a2c     00 00 00 00 | 	byte	$00, $fe, $20, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a30     01 2E 20 00 
08a34     00 FE 00 00 
08a38     00 00 00 00 
08a3c     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a40     00 FE 20 00 
08a44     01 2E 00 00 
08a48     00 00 00 00 
08a4c     00 00 00 00 | 	byte	$00, $fe, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a50     01 2E 20 00 
08a54     00 FE 00 00 
08a58     00 00 00 00 
08a5c     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a60     01 53 20 00 
08a64     01 2E 00 00 
08a68     00 00 00 00 
08a6c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a70     01 94 20 00 
08a74     01 53 00 00 
08a78     00 00 00 00 
08a7c     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a80     01 53 20 00 
08a84     01 94 00 00 
08a88     00 00 00 00 
08a8c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a90     01 94 20 00 
08a94     01 53 00 00 
08a98     00 00 00 00 
08a9c     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08aa0     01 C5 20 00 
08aa4     01 94 00 00 
08aa8     00 00 00 00 
08aac     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ab0     01 FC 20 00 
08ab4     01 C5 00 00 
08ab8     00 00 00 00 
08abc     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac0     00 00 00 00 
08ac4     01 FC 00 00 
08ac8     00 00 00 00 
08acc     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ad0     02 5C 20 00 
08ad4     00 00 00 00 
08ad8     00 00 00 00 
08adc     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ae0     02 5C 20 00 
08ae4     02 5C 00 00 
08ae8     00 00 00 00 
08aec     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af0     00 00 00 00 
08af4     02 5C 00 00 
08af8     00 00 00 00 
08afc     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b00     02 5C 20 00 
08b04     00 00 00 00 
08b08     00 00 00 00 
08b0c     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b10     01 2E 20 00 
08b14     02 5C 00 00 
08b18     00 00 00 00 
08b1c     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b20     01 53 20 00 
08b24     01 2E 00 00 
08b28     00 00 00 00 
08b2c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b30     01 94 20 00 
08b34     01 53 00 00 
08b38     00 00 00 00 
08b3c     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b40     01 53 20 00 
08b44     01 94 00 00 
08b48     00 00 00 00 
08b4c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b50     00 00 00 00 
08b54     01 53 00 00 
08b58     00 00 00 00 
08b5c     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b60     01 94 20 00 
08b64     00 00 00 00 
08b68     00 00 00 00 
08b6c     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b70     01 C5 20 00 
08b74     01 94 00 00 
08b78     00 00 00 00 
08b7c     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b80     01 94 20 00 
08b84     01 C5 00 00 
08b88     00 00 00 00 
08b8c     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b90     01 C5 20 00 
08b94     01 94 00 00 
08b98     00 00 00 00 
08b9c     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ba0     01 FC 20 00 
08ba4     01 C5 00 00 
08ba8     00 00 00 00 
08bac     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bb0     02 5C 20 00 
08bb4     01 FC 00 00 
08bb8     00 00 00 00 
08bbc     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bc0     00 00 00 00 
08bc4     02 5C 00 00 
08bc8     00 00 00 00 
08bcc     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd0     02 5C 20 00 
08bd4     00 00 00 00 
08bd8     00 00 00 00 
08bdc     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be0     02 5C 20 00 
08be4     02 5C 00 00 
08be8     00 00 00 00 
08bec     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf0     00 00 00 00 
08bf4     02 5C 00 00 
08bf8     00 00 00 00 
08bfc     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c00     02 5C 20 00 
08c04     00 00 00 00 
08c08     00 00 00 00 
08c0c     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c10     01 2E 20 00 
08c14     02 5C 00 00 
08c18     00 00 00 00 
08c1c     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c20     01 53 20 00 
08c24     01 2E 00 00 
08c28     00 00 00 00 
08c2c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c30     01 94 20 00 
08c34     01 53 00 00 
08c38     00 00 00 00 
08c3c     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c40     01 53 20 00 
08c44     01 94 00 00 
08c48     00 00 00 00 
08c4c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c50     00 00 00 00 
08c54     01 53 00 00 
08c58     00 00 00 00 
08c5c     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c60     01 94 20 00 
08c64     00 00 00 00 
08c68     00 00 00 00 
08c6c     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c70     01 C5 20 00 
08c74     01 94 00 00 
08c78     00 00 00 00 
08c7c     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c80     01 94 20 00 
08c84     01 C5 00 00 
08c88     00 00 00 00 
08c8c     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c90     01 C5 20 00 
08c94     01 94 00 00 
08c98     01 53 11 01 
08c9c     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $01, $53, $11, $01, $00, $d6, $60, $00
08ca0     01 FC 20 00 
08ca4     01 C5 00 00 
08ca8     00 00 01 01 
08cac     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08cb0     02 5C 20 00 
08cb4     01 FC 00 00 
08cb8     00 00 01 01 
08cbc     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08cc0     00 00 00 00 
08cc4     02 5C 00 00 
08cc8     00 00 01 01 
08ccc     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08cd0     02 5C 20 00 
08cd4     00 00 00 00 
08cd8     00 00 01 01 
08cdc     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08ce0     02 5C 20 00 
08ce4     02 5C 00 00 
08ce8     00 00 01 01 
08cec     01 1D 60 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $1d, $60, $00
08cf0     00 00 00 00 
08cf4     02 5C 00 00 
08cf8     00 00 01 01 
08cfc     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d00     02 5C 20 00 
08d04     00 00 00 00 
08d08     00 00 01 01 
08d0c     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d10     01 2E 20 00 
08d14     02 5C 00 00 
08d18     00 00 01 01 
08d1c     01 53 60 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $53, $60, $00
08d20     01 53 20 00 
08d24     01 2E 00 00 
08d28     00 00 01 01 
08d2c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d30     01 94 20 00 
08d34     01 53 00 00 
08d38     00 00 01 01 
08d3c     01 40 60 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d40     01 53 20 00 
08d44     01 94 00 00 
08d48     00 00 01 01 
08d4c     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d50     00 00 00 00 
08d54     01 53 00 00 
08d58     00 00 01 01 
08d5c     00 D6 60 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d60     01 94 20 00 
08d64     00 00 00 00 
08d68     00 00 01 01 
08d6c     00 D6 60 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d70     01 C5 20 00 
08d74     01 94 00 00 
08d78     00 00 01 01 
08d7c     01 40 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d80     01 94 20 00 
08d84     01 C5 00 00 
08d88     00 00 01 01 
08d8c     00 D6 60 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d90     01 C5 20 00 
08d94     01 94 00 00 
08d98     00 00 01 01 
08d9c     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08da0     01 FC 20 00 
08da4     01 C5 00 00 
08da8     00 00 01 01 
08dac     01 40 60 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08db0     02 5C 20 00 
08db4     01 FC 00 00 
08db8     00 00 01 01 
08dbc     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08dc0     00 00 00 00 
08dc4     02 5C 00 00 
08dc8     00 00 01 01 
08dcc     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08dd0     00 FE 10 00 
08dd4     01 FC 20 47 
08dd8     01 FC 30 00 
08ddc     01 AC 50 00 | 	byte	$00, $fe, $10, $00, $01, $fc, $20, $47, $01, $fc, $30, $00, $01, $ac, $50, $00
08de0     00 00 00 00 
08de4     00 00 00    | 	byte	$00[7]
08de7     47 00 00 00 
08deb     00 00 AA 70 
08def     00 00 00 00 
08df3     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08df7     47 00 00 00 
08dfb     00 00 AA 70 
08dff     00 00 00 00 
08e03     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e07     47 00 00 00 
08e0b     00 00 AA 70 
08e0f     00 00 00 00 
08e13     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e17     47 01 94 30 
08e1b     00 00 D6 60 
08e1f     00 00 00 00 
08e23     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08e27     47 00 00 00 
08e2b     00 00 AA 70 
08e2f     00 00 00 00 
08e33     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e37     47 00 00 00 
08e3b     00 00 AA 70 
08e3f     00 00 00 00 
08e43     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e47     47 00 00 00 
08e4b     00 00 AA 70 
08e4f     00 00 00 00 
08e53     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e57     47 01 53 30 
08e5b     00 01 AC 50 
08e5f     00 00 00 00 
08e63     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08e67     47 00 00 00 
08e6b     00 00 AA 70 
08e6f     00 00 00 00 
08e73     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e77     47 00 00 00 
08e7b     00 00 AA 70 
08e7f     00 00 00 00 
08e83     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e87     47 00 00 00 
08e8b     00 00 AA 70 
08e8f     00 00 00 00 
08e93     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e97     47 01 94 30 
08e9b     00 00 D6 60 
08e9f     00 00 00 00 
08ea3     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08ea7     47 00 00 00 
08eab     00 00 AA 70 
08eaf     00 01 2E 00 
08eb3     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $2e, $00, $00, $00, $00, $00
08eb7     47 01 53 30 
08ebb     00 01 AC 50 
08ebf     00 00 00 00 
08ec3     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08ec7     47 00 00 00 
08ecb     00 00 AA 70 
08ecf     00 01 53 00 
08ed3     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $01, $fc, $20
08ed7     47 01 FC 30 
08edb     00 01 AC 50 
08edf     00 00 00 00 
08ee3     00 00 00 00 | 	byte	$47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08ee7     47 00 00 00 
08eeb     00 00 AA 70 
08eef     00 01 53 00 
08ef3     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $00, $00, $00
08ef7     47 00 00 00 
08efb     00 00 AA 70 
08eff     00 00 00 00 
08f03     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f07     47 00 00 00 
08f0b     00 00 AA 70 
08f0f     00 01 94 00 
08f13     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08f17     47 01 94 30 
08f1b     00 00 D6 60 
08f1f     00 00 00 00 
08f23     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08f27     47 00 00 00 
08f2b     00 00 AA 70 
08f2f     00 01 C5 00 
08f33     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $00, $00
08f37     47 00 00 00 
08f3b     00 00 AA 70 
08f3f     00 00 00 00 
08f43     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f47     47 00 00 00 
08f4b     00 00 AA 70 
08f4f     00 01 C5 00 
08f53     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08f57     47 01 53 30 
08f5b     00 01 AC 50 
08f5f     00 00 00 00 
08f63     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08f67     47 00 00 00 
08f6b     00 00 AA 70 
08f6f     00 01 FC 00 
08f73     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $00, $00, $01, $fc, $20
08f77     47 00 00 00 
08f7b     00 00 AA 70 
08f7f     00 00 00 00 
08f83     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f87     47 00 00 00 
08f8b     00 00 AA 70 
08f8f     00 01 C5 00 
08f93     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08f97     47 01 94 30 
08f9b     00 00 D6 60 
08f9f     00 00 00 00 
08fa3     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08fa7     47 00 00 00 
08fab     00 00 AA 70 
08faf     00 01 94 00 
08fb3     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08fb7     47 01 53 30 
08fbb     00 01 AC 50 
08fbf     00 00 00 00 
08fc3     00 01 FC 20 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $01, $fc, $20
08fc7     47 00 00 00 
08fcb     00 00 AA 70 
08fcf     00 01 C5 00 
08fd3     00 00 E2 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $e2, $20
08fd7     00 02 5C 30 
08fdb     00 01 AC 50 
08fdf     00 00 00 00 
08fe3     00 00 00 00 | 	byte	$00, $02, $5c, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08fe7     00 00 00 00 
08feb     00 00       | 	byte	$00[6]
08fed     AA 70 00 01 
08ff1     FC 00 00 00 
08ff5     FE 20 00 00 
08ff9     00 00 00 00 | 	byte	$aa, $70, $00, $01, $fc, $00, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
08ffd     AA 70 00 00 
09001     00 00 00 00 
09005     00 00 00 00 
09009     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0900d     AA 70 00 01 
09011     2E 20 00 00 
09015     00 00 00 02 
09019     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
0901d     AC 50 00 01 
09021     53 20 00 01 
09025     2E 2C 40 00 
09029     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $40, $00, $00, $00, $00, $00
0902d     AA 70 00 01 
09031     94 20 00 01 
09035     53 2C 40 00 
09039     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $40, $00, $00, $00, $00, $00
0903d     AA 70 00 01 
09041     53 20 00 01 
09045     94 2C 40 00 
09049     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
0904d     AA 70 00 00 
09051     00 00 00 01 
09055     53 2C 40 02 
09059     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $2c, $40, $02, $5c, $30, $00, $01
0905d     AC 50 00 00 
09061     00 00 00 00 
09065     00 00 40 00 
09069     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
0906d     AA 70 00 01 
09071     94 20 00 00 
09075     00 00 40 00 
09079     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
0907d     AA 70 00 01 
09081     AC 20 00 01 
09085     94 2C 30 00 
09089     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $2c, $30, $00, $00, $00, $00, $00
0908d     AA 70 00 01 
09091     C5 20 00 01 
09095     AC 2C 30 02 
09099     5C 30 00 00 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $2c, $30, $02, $5c, $30, $00, $00
0909d     D6 60 00 01 
090a1     FC 20 00 01 
090a5     C5 2C 20 00 
090a9     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $20, $00, $00, $00, $00, $00
090ad     AA 70 00 02 
090b1     5C 20 00 01 
090b5     FC 2C 20 00 
090b9     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $2c, $20, $00, $00, $00, $00, $00
090bd     AA 70 00 00 
090c1     00 00 00 02 
090c5     5C 2C 20 00 
090c9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
090cd     AA 70 00 02 
090d1     5C 20 00 00 
090d5     00 0C 20 02 
090d9     5C 30 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $00
090dd     D6 60 00 00 
090e1     00 00 00 02 
090e5     5C 2C 20 00 
090e9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
090ed     AA 70 00 02 
090f1     5C 20 00 00 
090f5     00 0C 20 00 
090f9     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
090fd     AA 70 00 00 
09101     00 00 00 02 
09105     5C 2C 20 00 
09109     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
0910d     AA 70 00 01 
09111     2E 20 00 00 
09115     00 0C 20 02 
09119     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $01
0911d     AC 50 00 01 
09121     53 20 00 01 
09125     2E 2C 20 00 
09129     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $20, $00, $00, $00, $00, $00
0912d     AA 70 00 01 
09131     94 20 00 01 
09135     53 2C 20 00 
09139     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00
0913d     D6 60 00 00 
09141     E2 20 00 01 
09145     94 2C 20 00 
09149     00 00 00 00 | 	byte	$d6, $60, $00, $00, $e2, $20, $00, $01, $94, $2c, $20, $00, $00, $00, $00, $00
0914d     AA 70 00 00 
09151     00 00 00 00 
09155     E2 2C 20 02 
09159     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $e2, $2c, $20, $02, $5c, $30, $00, $00
0915d     D6 60 00 00 
09161     FE 20 00 00 
09165     00 0C 20 00 
09169     00 00 00 00 | 	byte	$d6, $60, $00, $00, $fe, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
0916d     AA 70 00 01 
09171     2E 20 00 00 
09175     FE 2C 20 00 
09179     00 00 00 00 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $fe, $2c, $20, $00, $00, $00, $00, $00
0917d     D6 60 00 01 
09181     53 20 00 01 
09185     2E 2C 30 00 
09189     00 00 00 00 | 	byte	$d6, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
0918d     AA 70 00 01 
09191     94 20 00 01 
09195     53 2C 30 02 
09199     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $30, $02, $5c, $30, $00, $01
0919d     AC 50 00 01 
091a1     C5 20 00 01 
091a5     94 2C 40 00 
091a9     00 00 00 00 | 	byte	$ac, $50, $00, $01, $c5, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
091ad     D6 60 00 01 
091b1     FC 20 00 01 
091b5     C5 2C 50 00 
091b9     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $50, $00, $00, $00, $00, $00
091bd     D6 60 00 00 
091c1     00 00 00 01 
091c5     FC 2C 60 00 
091c9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $01, $fc, $2c, $60, $00, $00, $00, $00, $00
091cd     D6 60 00 00 
091d1     AA 40 00 00 
091d5     E2 80 47 01 
091d9     C5 30 00 01 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
091dd     AC 50 00 00 
091e1     00 00 00 00 
091e5     00 00 47 00 
091e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
091ed     AA 70 00 00 
091f1     AA 40 00 00 
091f5     E2 80 47 00 
091f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
091fd     AA 70 00 00 
09201     00 00 00 00 
09205     00 00 47 00 
09209     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0920d     AA 70 00 00 
09211     AA 40 00 00 
09215     E2 80 47 01 
09219     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
0921d     D6 60 00 00 
09221     AA 40 00 00 
09225     E2 80 47 00 
09229     00 00 00 00 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0922d     AA 70 00 00 
09231     00 00 00 00 
09235     00 00 47 00 
09239     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0923d     AA 70 00 00 
09241     AA 40 00 00 
09245     E2 80 47 00 
09249     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0924d     AA 70 00 00 
09251     97 40 00 00 
09255     97 80 47 02 
09259     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $01
0925d     AC 50 00 00 
09261     00 00 00 00 
09265     00 00 47 00 
09269     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0926d     AA 70 00 00 
09271     97 40 00 00 
09275     97 80 47 00 
09279     00 00 00 00 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
0927d     AA 70 00 00 
09281     00 00 00 00 
09285     00 00 47 00 
09289     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0928d     AA 70 00 00 
09291     00 00 00 00 
09295     97 80 47 02 
09299     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
0929d     D6 60 00 00 
092a1     00 00 00 00 
092a5     00 00 47 00 
092a9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092ad     AA 70 00 00 
092b1     00 00 00 00 
092b5     97 80 47 00 
092b9     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
092bd     AC 50 00 00 
092c1     00 00 00 00 
092c5     00 00 47 00 
092c9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092cd     AA 70 00 00 
092d1     AA 40 00 00 
092d5     E2 80 47 01 
092d9     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
092dd     AC 50 00 00 
092e1     AA 40 00 00 
092e5     E2 80 47 00 
092e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092ed     AA 70 00 00 
092f1     AA 40 00 00 
092f5     E2 80 47 00 
092f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092fd     AA 70 00 00 
09301     00 00 00 00 
09305     00 00 47 00 
09309     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0930d     AA 70 00 00 
09311     AA 40 00 00 
09315     E2 80 47 01 
09319     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
0931d     D6 60 00 00 
09321     00 00 00 00 
09325     00 00 47 00 
09329     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0932d     AA 70 00 00 
09331     AA 40 00 00 
09335     E2 80 47 00 
09339     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0933d     AA 70 00 00 
09341     00 00 00 00 
09345     00 00 47 00 
09349     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0934d     AA 70 00 00 
09351     97 40 00 01 
09355     2E 80 47 02 
09359     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $01, $2e, $80, $47, $02, $5c, $30, $00, $01
0935d     AC 50 00 00 
09361     00 00 00 00 
09365     00 00 47 00 
09369     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0936d     AA 70 00 00 
09371     00 00 00 01 
09375     2E 80 47 00 
09379     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $2e, $80, $47, $00, $00, $00, $00, $00
0937d     AA 70 00 00 
09381     00 00 00 00 
09385     00 00 47 00 
09389     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0938d     AA 70 00 00 
09391     00 00 00 00 
09395     97 80 47 02 
09399     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
0939d     D6 60 00 00 
093a1     00 00 00 00 
093a5     97 80 47 00 
093a9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
093ad     AA 70 00 00 
093b1     00 00 00 00 
093b5     97 80 47 00 
093b9     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
093bd     AC 50 00 00 
093c1     00 00 00 00 
093c5     00 00 47 00 
093c9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093cd     AA 70 00 00 
093d1     AA 40 00 00 
093d5     E2 80 47 01 
093d9     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
093dd     AC 50 00 00 
093e1     00 00 00 00 
093e5     00 00 47 00 
093e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093ed     AA 70 00 00 
093f1     B4 40 00 00 
093f5     E2 80 47 00 
093f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
093fd     AA 70 00 00 
09401     00 00 00 00 
09405     00 00 47 00 
09409     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0940d     AA 70 00 00 
09411     AA 40 00 00 
09415     E2 80 47 01 
09419     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
0941d     AC 50 00 00 
09421     00 00 00 00 
09425     00 00 47 00 
09429     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0942d     AA 70 00 00 
09431     B4 40 00 00 
09435     E2 80 47 00 
09439     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0943d     AA 70 00 00 
09441     00 00 00 00 
09445     00 00 47 00 
09449     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0944d     AA 70 00 00 
09451     AA 40 00 00 
09455     E2 80 47 01 
09459     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
0945d     AC 50 00 00 
09461     00 00 00 00 
09465     00 00 47 00 
09469     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0946d     AA 70 00 00 
09471     B4 40 00 00 
09475     E2 80 47 00 
09479     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0947d     AA 70 00 00 
09481     00 00 00 00 
09485     00 00 47 00 
09489     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0948d     AA 70 00 00 
09491     AA 40 00 00 
09495     E2 80 47 01 
09499     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
0949d     D6 60 00 00 
094a1     00 00 00 00 
094a5     00 00 47 00 
094a9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094ad     AA 70 00 00 
094b1     B4 40 00 00 
094b5     E2 80 47 00 
094b9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
094bd     AA 70 00 00 
094c1     00 00 00 00 
094c5     00 00 47 00 
094c9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094cd     AA 70 00 00 
094d1     AA 40 00 00 
094d5     E2 80 47 01 
094d9     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
094dd     D6 60 00 00 
094e1     B4 40 00 00 
094e5     00 00 47 00 
094e9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094ed     AA 70 00 00 
094f1     00 00 00 00 
094f5     00 00 47 00 
094f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094fd     AA 70 00 00 
09501     00 00 00 00 
09505     00 00 47 00 
09509     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0950d     AA 70 00 00 
09511     AA 40 00 00 
09515     E2 80 47 01 
09519     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
0951d     AC 50 00 00 
09521     B4 40 00 00 
09525     00 00 47 00 
09529     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0952d     AA 70 00 00 
09531     00 00 00 00 
09535     00 00 47 00 
09539     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0953d     D6 60 00 00 
09541     00 00 00 00 
09545     00 00 47 00 
09549     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0954d     AA 70 00 00 
09551     AA 40 00 00 
09555     E2 80 47 01 
09559     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
0955d     D6 60 00 00 
09561     B4 40 00 00 
09565     E2 80 47 00 
09569     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0956d     AA 70 00 00 
09571     00 00 00 00 
09575     00 00 47 00 
09579     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0957d     D6 60 00 00 
09581     00 00 00 00 
09585     E2 80 47 00 
09589     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
0958d     AA 70 00 00 
09591     AA 40 00 00 
09595     E2 80 47 01 
09599     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
0959d     AC 50 00 00 
095a1     B4 40 00 00 
095a5     00 00 47 00 
095a9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
095ad     D6 60 00 00 
095b1     00 00 00 00 
095b5     E2 80 47 00 
095b9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
095bd     D6 60 00 00 
095c1     00 00 00 00 
095c5     E2 80 47 00 
095c9     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
095cd     D6 60 00 00 
095d1     7F 40 00 01 
095d5     94 20 38 01 
095d9     FC 30 00 01 | 	byte	$d6, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
095dd     AC 50 00 00 
095e1     7F 40 00 01 
095e5     94 20 38 00 
095e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
095ed     AA 70 00 00 
095f1     00 00 00 00 
095f5     00 00 38 00 
095f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
095fd     AA 70 00 00 
09601     7F 40 00 01 
09605     94 20 38 00 
09609     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
0960d     AA 70 00 00 
09611     00 00 00 00 
09615     00 00 38 01 
09619     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
0961d     1D 60 00 00 
09621     00 00 00 00 
09625     00 00 38 00 
09629     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
0962d     AA 70 00 00 
09631     00 00 00 00 
09635     00 00 38 00 
09639     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
0963d     AA 70 00 00 
09641     00 00 00 00 
09645     00 00 38 00 
09649     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
0964d     AA 70 00 00 
09651     8F 40 00 01 
09655     C5 20 59 01 
09659     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
0965d     AC 50 00 00 
09661     8F 40 00 01 
09665     C5 20 59 00 
09669     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
0966d     AA 70 00 00 
09671     00 00 00 00 
09675     00 00 59 00 
09679     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
0967d     AA 70 00 00 
09681     8F 40 00 01 
09685     C5 20 59 00 
09689     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
0968d     AA 70 00 00 
09691     00 00 00 00 
09695     00 00 59 01 
09699     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
0969d     1D 60 00 00 
096a1     00 00 00 00 
096a5     00 00 59 00 
096a9     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
096ad     AA 70 00 00 
096b1     00 00 00 00 
096b5     00 00 59 00 
096b9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
096bd     AA 70 00 00 
096c1     00 00 00 00 
096c5     00 00 59 00 
096c9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
096cd     AA 70 00 00 
096d1     BE 40 00 01 
096d5     7D 20 47 01 
096d9     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
096dd     AC 50 00 00 
096e1     BE 40 00 00 
096e5     00 00 47 00 
096e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096ed     AA 70 00 00 
096f1     BE 40 00 00 
096f5     00 00 47 00 
096f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096fd     AA 70 00 00 
09701     BE 40 00 00 
09705     00 00 47 00 
09709     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0970d     AA 70 00 00 
09711     BE 40 00 01 
09715     7D 20 47 01 
09719     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
0971d     1D 60 00 00 
09721     BE 40 00 00 
09725     00 00 47 00 
09729     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0972d     AA 70 00 00 
09731     BE 40 00 00 
09735     00 00 47 00 
09739     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0973d     AA 70 00 00 
09741     BE 40 00 00 
09745     00 00 47 00 
09749     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0974d     AA 70 00 00 
09751     CA 40 00 01 
09755     C5 20 47 01 
09759     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
0975d     AC 50 00 00 
09761     00 00 00 00 
09765     00 00 47 00 
09769     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0976d     AA 70 00 00 
09771     E2 40 00 01 
09775     C5 20 47 00 
09779     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
0977d     AA 70 00 00 
09781     00 00 00 00 
09785     00 00 47 00 
09789     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0978d     AA 70 00 00 
09791     E2 40 00 01 
09795     C5 20 47 01 
09799     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
0979d     1D 60 00 00 
097a1     00 00 00 01 
097a5     C5 20 47 00 
097a9     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
097ad     AA 70 00 00 
097b1     FE 40 00 01 
097b5     C5 20 47 00 
097b9     00 00 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $01
097bd     1D 60 00 00 
097c1     00 00 00 00 
097c5     00 00 47 00 
097c9     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
097cd     1D 60 00 00 
097d1     CA 40 00 02 
097d5     5C 20 47 02 
097d9     5C 30 00 01 | 	byte	$1d, $60, $00, $00, $ca, $40, $00, $02, $5c, $20, $47, $02, $5c, $30, $00, $01
097dd     AC 50 00 00 
097e1     00 00 00 00 
097e5     00 00 47 00 
097e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097ed     AA 70 00 00 
097f1     00 00 00 00 
097f5     00 00 47 00 
097f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097fd     AA 70 00 00 
09801     00 00 00 00 
09805     00 00 47 00 
09809     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
0980d     AA 70 00 01 
09811     2E 20 00 00 
09815     00 00 47 02 
09819     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $47, $02, $5c, $30, $00, $01
0981d     1D 60 00 01 
09821     53 20 00 01 
09825     2E 2C 30 00 
09829     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
0982d     AA 70 00 01 
09831     94 20 00 01 
09835     53 00 00 00 
09839     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
0983d     AA 70 00 01 
09841     53 20 00 01 
09845     94 00 00 00 
09849     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
0984d     AA 70 00 00 
09851     00 00 00 01 
09855     53 00 00 02 
09859     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
0985d     AC 50 00 00 
09861     00 00 00 00 
09865     00 00 00 00 
09869     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0986d     AA 70 00 01 
09871     94 20 00 00 
09875     00 00 00 00 
09879     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0987d     AA 70 00 01 
09881     AC 20 00 01 
09885     94 00 00 00 
09889     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
0988d     AA 70 00 01 
09891     C5 20 00 01 
09895     AC 00 00 02 
09899     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
0989d     1D 60 00 01 
098a1     FC 20 00 01 
098a5     C5 00 00 00 
098a9     00 00 00 00 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00
098ad     AA 70 00 02 
098b1     5C 20 00 01 
098b5     FC 00 00 00 
098b9     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
098bd     AA 70 00 00 
098c1     00 00 00 02 
098c5     5C 00 00 00 
098c9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
098cd     AA 70 00 02 
098d1     5C 20 00 00 
098d5     00 00 00 02 
098d9     5C 30 00 01 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
098dd     AC 50 00 00 
098e1     00 00 00 02 
098e5     5C 00 00 00 
098e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
098ed     AA 70 00 02 
098f1     5C 20 00 00 
098f5     00 00 00 00 
098f9     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098fd     AA 70 00 00 
09901     00 00 00 02 
09905     5C 00 00 00 
09909     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
0990d     AA 70 00 01 
09911     2E 20 00 00 
09915     00 00 00 02 
09919     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
0991d     1D 60 00 01 
09921     53 20 00 01 
09925     2E 00 00 00 
09929     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00
0992d     AA 70 00 01 
09931     94 20 00 01 
09935     53 00 00 00 
09939     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
0993d     AA 70 00 01 
09941     53 20 00 01 
09945     94 00 00 00 
09949     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
0994d     AA 70 00 00 
09951     00 00 00 01 
09955     53 00 00 02 
09959     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
0995d     AC 50 00 00 
09961     00 00 00 00 
09965     00 00 00 00 
09969     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0996d     AA 70 00 01 
09971     94 20 00 00 
09975     00 00 00 00 
09979     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0997d     AA 70 00 01 
09981     AC 20 00 01 
09985     94 00 00 00 
09989     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
0998d     AA 70 00 01 
09991     C5 20 00 01 
09995     AC 00 00 02 
09999     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
0999d     1D 60 00 01 
099a1     FC 20 00 01 
099a5     C5 00 00 00 
099a9     00 00 00 01 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $01
099ad     1D 60 00 02 
099b1     5C 20 00 01 
099b5     FC 00 00 00 
099b9     00 00 00 00 | 	byte	$1d, $60, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
099bd     AA 70 00 00 
099c1     00 00 00 02 
099c5     5C 00 00 00 
099c9     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $01
099cd     1D 60 00 00 
099d1     7F 40 00 01 
099d5     94 20 38 01 
099d9     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
099dd     AC 50 00 00 
099e1     7F 40 00 01 
099e5     94 20 38 00 
099e9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
099ed     AA 70 00 00 
099f1     00 00 00 00 
099f5     00 00 38 00 
099f9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
099fd     AA 70 00 00 
09a01     7F 40 00 01 
09a05     94 20 38 00 
09a09     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09a0d     AA 70 00 00 
09a11     00 00 00 00 
09a15     00 00 38 01 
09a19     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
09a1d     1D 60 00 00 
09a21     00 00 00 00 
09a25     00 00 38 00 
09a29     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a2d     AA 70 00 00 
09a31     00 00 00 00 
09a35     00 00 38 00 
09a39     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a3d     AA 70 00 00 
09a41     00 00 00 00 
09a45     00 00 38 00 
09a49     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a4d     AA 70 00 00 
09a51     8F 40 00 01 
09a55     C5 20 59 01 
09a59     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09a5d     AC 50 00 00 
09a61     8F 40 00 01 
09a65     C5 20 59 00 
09a69     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09a6d     AA 70 00 00 
09a71     00 00 00 00 
09a75     00 00 59 00 
09a79     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a7d     AA 70 00 00 
09a81     8F 40 00 01 
09a85     C5 20 59 00 
09a89     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09a8d     AA 70 00 00 
09a91     00 00 00 00 
09a95     00 00 59 01 
09a99     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09a9d     1D 60 00 00 
09aa1     00 00 00 00 
09aa5     00 00 59 00 
09aa9     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09aad     AA 70 00 00 
09ab1     00 00 00 00 
09ab5     00 00 59 00 
09ab9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09abd     AA 70 00 00 
09ac1     00 00 00 00 
09ac5     00 00 59 00 
09ac9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09acd     AA 70 00 00 
09ad1     BE 40 00 01 
09ad5     7D 20 47 01 
09ad9     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09add     AC 50 00 00 
09ae1     BE 40 00 00 
09ae5     00 00 47 00 
09ae9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09aed     AA 70 00 00 
09af1     BE 40 00 00 
09af5     00 00 47 00 
09af9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09afd     AA 70 00 00 
09b01     BE 40 00 00 
09b05     00 00 47 00 
09b09     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b0d     AA 70 00 00 
09b11     BE 40 00 01 
09b15     7D 20 47 01 
09b19     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09b1d     1D 60 00 00 
09b21     BE 40 00 00 
09b25     00 00 47 00 
09b29     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b2d     AA 70 00 00 
09b31     BE 40 00 00 
09b35     00 00 47 00 
09b39     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b3d     AA 70 00 00 
09b41     BE 40 00 00 
09b45     00 00 47 00 
09b49     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b4d     AA 70 00 00 
09b51     CA 40 00 01 
09b55     C5 20 47 01 
09b59     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09b5d     AC 50 00 00 
09b61     E2 40 00 00 
09b65     00 00 47 00 
09b69     00 00 00 00 | 	byte	$ac, $50, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b6d     AA 70 00 00 
09b71     00 00 00 00 
09b75     00 00 47 00 
09b79     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b7d     AA 70 00 00 
09b81     E2 40 00 00 
09b85     00 00 47 00 
09b89     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b8d     AA 70 00 00 
09b91     00 00 00 01 
09b95     C5 20 47 01 
09b99     E0 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $01, $e0, $30, $00, $01
09b9d     1D 60 00 00 
09ba1     00 00 00 00 
09ba5     00 00 47 00 
09ba9     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09bad     AA 70 00 00 
09bb1     00 00 00 00 
09bb5     00 00 47 00 
09bb9     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09bbd     1D 60 00 00 
09bc1     00 00 00 00 
09bc5     00 00 47 00 
09bc9     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09bcd     1D 60 00 00 
09bd1     7F 40 00 01 
09bd5     94 20 38 01 
09bd9     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09bdd     AC 50 00 00 
09be1     7F 40 00 01 
09be5     94 20 38 00 
09be9     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09bed     AA 70 00 00 
09bf1     00 00 00 00 
09bf5     00 00 38 00 
09bf9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09bfd     AA 70 00 00 
09c01     7F 40 00 01 
09c05     94 20 38 00 
09c09     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09c0d     AA 70 00 00 
09c11     00 00 00 00 
09c15     00 00 38 01 
09c19     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
09c1d     1D 60 00 00 
09c21     00 00 00 00 
09c25     00 00 38 00 
09c29     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c2d     AA 70 00 00 
09c31     00 00 00 00 
09c35     00 00 38 00 
09c39     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c3d     AA 70 00 00 
09c41     00 00 00 00 
09c45     00 00 38 00 
09c49     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c4d     AA 70 00 00 
09c51     8F 40 00 01 
09c55     C5 20 59 01 
09c59     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09c5d     AC 50 00 00 
09c61     8F 40 00 01 
09c65     C5 20 59 00 
09c69     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09c6d     AA 70 00 00 
09c71     00 00 00 00 
09c75     00 00 59 00 
09c79     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c7d     AA 70 00 00 
09c81     8F 40 00 01 
09c85     C5 20 59 00 
09c89     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09c8d     AA 70 00 00 
09c91     00 00 00 00 
09c95     00 00 59 01 
09c99     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09c9d     1D 60 00 00 
09ca1     00 00 00 00 
09ca5     00 00 59 00 
09ca9     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09cad     AA 70 00 00 
09cb1     00 00 00 00 
09cb5     00 00 59 00 
09cb9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09cbd     AA 70 00 00 
09cc1     00 00 00 00 
09cc5     00 00 59 00 
09cc9     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09ccd     AA 70 00 00 
09cd1     FE 40 00 01 
09cd5     7D 20 47 01 
09cd9     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09cdd     1D 60 00 00 
09ce1     FE 40 00 00 
09ce5     00 00 47 00 
09ce9     00 00 00 00 | 	byte	$1d, $60, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ced     00 00 00 00 
09cf1     FE 40 00 00 
09cf5     00 00 47 00 
09cf9     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cfd     00 00 00 00 
09d01     FE 40 00 00 
09d05     00 00 47 00 
09d09     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d0d     00 00 00 00 
09d11     FE 40 00 00 
09d15     00 00 47 00 
09d19     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d1d     00 00 00 00 
09d21     FE 40 00 00 
09d25     00 00 47 00 
09d29     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d2d     00 00 00 00 
09d31     FE 40 00 00 
09d35     00 00 47 00 
09d39     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d3d     00 00 00 00 
09d41     FE 40 00 00 
09d45     00 00 47 00 
09d49     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d4d     00 00 00 01 
09d51     0D 40 00 01 
09d55     C5 20 49 01 
09d59     C5 30 00 01 | 	byte	$00, $00, $00, $01, $0d, $40, $00, $01, $c5, $20, $49, $01, $c5, $30, $00, $01
09d5d     1D 60 00 01 
09d61     2E 40 00 00 
09d65     00 00 49 00 
09d69     00 00 00 00 | 	byte	$1d, $60, $00, $01, $2e, $40, $00, $00, $00, $00, $49, $00, $00, $00, $00, $00
09d6d     00 00 00 00 
09d71     00 00 00 00 
09d75     00 00       | 	byte	$00[10]
09d77     49 00 00 00 
09d7b     00 00 00 00 
09d7f     00 01 2E 40 
09d83     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $00, $00
09d87     49 00 00 00 
09d8b     00 00 00 00 
09d8f     00 00 00 00 
09d93     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d97     49 00 00 00 
09d9b     00 00 00 00 
09d9f     00 00 00 00 
09da3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09da7     49 00 00 00 
09dab     00 00 00 00 
09daf     00 00 00 00 
09db3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09db7     49 00 00 00 
09dbb     00 00 00 00 
09dbf     00 01 2E 40 
09dc3     00 01 E0 20 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $01, $e0, $20
09dc7     38 02 5C 30 
09dcb     00 03 58 60 
09dcf     00 00 00 00 
09dd3     00 00 00 00 | 	byte	$38, $02, $5c, $30, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
09dd7     38 00 00 00 
09ddb     00 00 00 00 
09ddf     00 00 00 00 
09de3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09de7     38 00 00 00 
09deb     00 00 00 00 
09def     00 00 00 00 
09df3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09df7     38 00 00 00 
09dfb     00 00 00 00 
09dff     00 00 00 00 
09e03     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e07     38 00 00 00 
09e0b     00 00 00 00 
09e0f     00 00 00 00 
09e13     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e17     38 00 00 00 
09e1b     00 00 00 00 
09e1f     00 00 00 00 
09e23     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e27     38 00 00 00 
09e2b     00 00 00 00 
09e2f     00 00 00 00 
09e33     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e37     38 00 00 00 
09e3b     00 00 00 00 
09e3f     00 00 00 00 
09e43     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e47     38 00 00 00 
09e4b     00 00 00 00 
09e4f     00 00 00 00 
09e53     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e57     38 00 00 00 
09e5b     00 00 00 00 
09e5f     00 00 00 00 
09e63     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e67     38 00 00 00 
09e6b     00 00 00 00 
09e6f     00 00 00 00 
09e73     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e77     38 00 00 00 
09e7b     00 00 00 00 
09e7f     00 00 00 00 
09e83     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e87     38 00 00 00 
09e8b     00 00 00 00 
09e8f     00 00 00 00 
09e93     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e97     38 00 00 00 
09e9b     00 00 00 00 
09e9f     00 00 00 00 
09ea3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ea7     38 00 00 00 
09eab     00 00 00 00 
09eaf     00 00 00 00 
09eb3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09eb7     38 00 00 00 
09ebb     00 00 00 00 
09ebf     00 00 00 00 
09ec3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ec7     38 00 00 00 
09ecb     00 00 00 00 
09ecf     00 01 53 40 
09ed3     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
09ed7     00 02 5C 90 
09edb     00 00 D6 50 
09edf     00 01 2E 40 
09ee3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
09ee7     00 02 5C 90 
09eeb     00 00 00 00 
09eef     00 00 00 00 
09ef3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09ef7     00 02 5C 90 
09efb     00 00 00 00 
09eff     00 01 2E 40 
09f03     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09f07     00 02 5C 90 
09f0b     00 00 00 00 
09f0f     00 00 00 00 
09f13     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f17     00 02 5C 90 
09f1b     00 00 D6 50 
09f1f     00 00 00 00 
09f23     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f27     00 02 5C 90 
09f2b     00 00 D6 50 
09f2f     00 00 00 00 
09f33     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f37     00 02 5C 90 
09f3b     00 00 D6 50 
09f3f     00 00 00 00 
09f43     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f47     00 02 5C 90 
09f4b     00 00 D6 50 
09f4f     00 01 53 40 
09f53     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
09f57     00 02 5C 90 
09f5b     00 01 AC 60 
09f5f     00 01 2E 40 
09f63     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
09f67     00 02 5C 90 
09f6b     00 00 00 00 
09f6f     00 00 00 00 
09f73     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f77     00 02 5C 90 
09f7b     00 00 00 00 
09f7f     00 01 2E 40 
09f83     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09f87     00 02 5C 90 
09f8b     00 00 00 00 
09f8f     00 00 00 00 
09f93     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f97     00 02 5C 90 
09f9b     00 00 D6 50 
09f9f     00 00 00 00 
09fa3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fa7     00 02 5C 90 
09fab     00 00 00 00 
09faf     00 00 00 00 
09fb3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09fb7     00 02 5C 90 
09fbb     00 00 00 00 
09fbf     00 00 00 00 
09fc3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09fc7     00 02 5C 90 
09fcb     00 00 00 00 
09fcf     00 00 FE 40 
09fd3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
09fd7     00 01 C5 90 
09fdb     00 00 D6 50 
09fdf     00 00 00 00 
09fe3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fe7     00 01 C5 90 
09feb     00 00 D6 50 
09fef     00 00 FE 40 
09ff3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
09ff7     00 01 C5 90 
09ffb     00 00 D6 50 
09fff     00 00 00 00 
0a003     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a007     00 01 C5 90 
0a00b     00 00 D6 50 
0a00f     00 00 FE 40 
0a013     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a017     00 01 C5 90 
0a01b     00 01 AC 60 
0a01f     00 00 FE 40 
0a023     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $fe, $40, $00, $00, $aa, $70
0a027     00 01 C5 90 
0a02b     00 00 00 00 
0a02f     00 01 0D 40 
0a033     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
0a037     00 01 C5 90 
0a03b     00 00 00 00 
0a03f     00 01 2E 40 
0a043     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a047     00 01 C5 90 
0a04b     00 00 00 00 
0a04f     00 01 0D 40 
0a053     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
0a057     00 02 5C 90 
0a05b     00 00 D6 50 
0a05f     00 01 2E 40 
0a063     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a067     00 02 5C 90 
0a06b     00 00 D6 50 
0a06f     00 00 00 00 
0a073     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a077     00 02 5C 90 
0a07b     00 00 D6 50 
0a07f     00 01 2E 40 
0a083     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a087     00 02 5C 90 
0a08b     00 00 D6 50 
0a08f     00 00 00 00 
0a093     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a097     00 02 5C 90 
0a09b     00 01 AC 60 
0a09f     00 00 00 00 
0a0a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a0a7     00 02 5C 90 
0a0ab     00 00 00 00 
0a0af     00 00 00 00 
0a0b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0b7     00 02 5C 90 
0a0bb     00 00 00 00 
0a0bf     00 00 00 00 
0a0c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0c7     00 02 5C 90 
0a0cb     00 00 00 00 
0a0cf     00 01 53 40 
0a0d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
0a0d7     00 02 5C 90 
0a0db     00 00 D6 50 
0a0df     00 01 53 40 
0a0e3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a0e7     00 02 5C 90 
0a0eb     00 00 00 00 
0a0ef     00 00 00 00 
0a0f3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0f7     00 02 5C 90 
0a0fb     00 00 00 00 
0a0ff     00 01 2E 40 
0a103     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a107     00 02 5C 90 
0a10b     00 00 00 00 
0a10f     00 00 00 00 
0a113     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a117     00 02 5C 90 
0a11b     00 00 D6 50 
0a11f     00 00 00 00 
0a123     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a127     00 02 5C 90 
0a12b     00 00 D6 50 
0a12f     00 00 00 00 
0a133     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a137     00 02 5C 90 
0a13b     00 00 D6 50 
0a13f     00 00 00 00 
0a143     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a147     00 02 5C 90 
0a14b     00 00 D6 50 
0a14f     00 01 53 40 
0a153     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a157     00 02 5C 90 
0a15b     00 01 AC 60 
0a15f     00 01 53 40 
0a163     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $53, $40, $00, $00, $aa, $70
0a167     00 02 5C 90 
0a16b     00 00 00 00 
0a16f     00 00 00 00 
0a173     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a177     00 02 5C 90 
0a17b     00 00 00 00 
0a17f     00 01 2E 40 
0a183     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a187     00 02 5C 90 
0a18b     00 00 00 00 
0a18f     00 00 00 00 
0a193     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a197     00 02 5C 90 
0a19b     00 00 D6 50 
0a19f     00 00 00 00 
0a1a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a1a7     00 02 5C 90 
0a1ab     00 00 00 00 
0a1af     00 01 2E 40 
0a1b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a1b7     00 02 5C 90 
0a1bb     00 01 AC 50 
0a1bf     00 01 2E 40 
0a1c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a1c7     00 02 5C 90 
0a1cb     00 01 AC 50 
0a1cf     00 00 FE 40 
0a1d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1d7     00 01 C5 90 
0a1db     00 00 D6 50 
0a1df     00 00 00 00 
0a1e3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a1e7     00 01 C5 90 
0a1eb     00 00 00 00 
0a1ef     00 00 FE 40 
0a1f3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1f7     00 01 C5 90 
0a1fb     00 00 00 00 
0a1ff     00 00 00 00 
0a203     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a207     00 01 C5 90 
0a20b     00 00 00 00 
0a20f     00 00 FE 40 
0a213     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a217     00 01 C5 90 
0a21b     00 00 D6 50 
0a21f     00 00 FE 40 
0a223     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a227     00 01 C5 90 
0a22b     00 00 D6 50 
0a22f     00 01 0D 40 
0a233     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a237     00 01 C5 90 
0a23b     00 00 D6 50 
0a23f     00 01 2E 40 
0a243     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a247     00 01 C5 90 
0a24b     00 00 D6 50 
0a24f     00 01 0D 40 
0a253     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a257     00 02 5C 90 
0a25b     00 01 AC 60 
0a25f     00 01 2E 40 
0a263     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
0a267     00 02 5C 90 
0a26b     00 00 00 00 
0a26f     00 00 00 00 
0a273     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a277     00 02 5C 90 
0a27b     00 00 00 00 
0a27f     00 01 2E 40 
0a283     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a287     00 02 5C 90 
0a28b     00 00 00 00 
0a28f     00 00 00 00 
0a293     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a297     00 02 5C 90 
0a29b     00 00 D6 50 
0a29f     00 00 00 00 
0a2a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a2a7     00 02 5C 90 
0a2ab     00 00 00 00 
0a2af     00 00 00 00 
0a2b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2b7     00 02 5C 90 
0a2bb     00 00 00 00 
0a2bf     00 00 00 00 
0a2c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2c7     00 02 5C 90 
0a2cb     00 00 00 00 
0a2cf     00 00 AA 40 
0a2d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a2d7     00 02 5C 90 
0a2db     00 00 D6 50 
0a2df     00 00 AA 40 
0a2e3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a2e7     00 02 5C 90 
0a2eb     00 00 00 00 
0a2ef     00 00 00 00 
0a2f3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2f7     00 02 5C 90 
0a2fb     00 00 00 00 
0a2ff     00 00 97 40 
0a303     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a307     00 02 5C 90 
0a30b     00 00 00 00 
0a30f     00 00 00 00 
0a313     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a317     00 02 5C 90 
0a31b     00 00 D6 50 
0a31f     00 00 00 00 
0a323     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a327     00 02 5C 90 
0a32b     00 00 D6 50 
0a32f     00 00 00 00 
0a333     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a337     00 02 5C 90 
0a33b     00 00 D6 50 
0a33f     00 00 00 00 
0a343     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a347     00 02 5C 90 
0a34b     00 00 D6 50 
0a34f     00 00 AA 40 
0a353     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a357     00 02 5C 90 
0a35b     00 01 AC 60 
0a35f     00 00 AA 40 
0a363     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa, $40, $00, $00, $aa, $70
0a367     00 02 5C 90 
0a36b     00 00 00 00 
0a36f     00 00 00 00 
0a373     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a377     00 02 5C 90 
0a37b     00 00 00 00 
0a37f     00 00 97 40 
0a383     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a387     00 02 5C 90 
0a38b     00 00 00 00 
0a38f     00 00 00 00 
0a393     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a397     00 02 5C 90 
0a39b     00 00 D6 50 
0a39f     00 00 00 00 
0a3a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a3a7     00 02 5C 90 
0a3ab     00 00 00 00 
0a3af     00 00 AA 40 
0a3b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a3b7     00 02 5C 90 
0a3bb     00 00 00 00 
0a3bf     00 00 97 40 
0a3c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a3c7     00 02 5C 90 
0a3cb     00 00 00 00 
0a3cf     00 00 7F 40 
0a3d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3d7     00 01 C5 90 
0a3db     00 00 D6 50 
0a3df     00 00 7F 40 
0a3e3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3e7     00 01 C5 90 
0a3eb     00 00 00 00 
0a3ef     00 00 7F 40 
0a3f3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3f7     00 01 C5 90 
0a3fb     00 00 00 00 
0a3ff     00 00 7F 40 
0a403     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a407     00 01 C5 90 
0a40b     00 00 00 00 
0a40f     00 00 7F 40 
0a413     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a417     00 01 C5 90 
0a41b     00 00 D6 50 
0a41f     00 00 7F 40 
0a423     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a427     00 01 C5 90 
0a42b     00 00 00 00 
0a42f     00 00 87 40 
0a433     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a437     00 01 C5 90 
0a43b     00 00 00 00 
0a43f     00 00 97 40 
0a443     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a447     00 01 C5 90 
0a44b     00 00 00 00 
0a44f     00 00 7F 40 
0a453     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a457     00 01 C5 90 
0a45b     00 00 D6 50 
0a45f     00 00 7F 40 
0a463     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a467     00 01 C5 90 
0a46b     00 00 00 00 
0a46f     00 00 7F 40 
0a473     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a477     00 01 C5 90 
0a47b     00 00 00 00 
0a47f     00 00 7F 40 
0a483     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a487     00 01 C5 90 
0a48b     00 00 00 00 
0a48f     00 00 7F 40 
0a493     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a497     00 01 C5 90 
0a49b     00 00 D6 50 
0a49f     00 00 7F 40 
0a4a3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4a7     00 01 C5 90 
0a4ab     00 00 00 00 
0a4af     00 00 87 40 
0a4b3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a4b7     00 01 C5 90 
0a4bb     00 00 00 00 
0a4bf     00 00 97 40 
0a4c3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a4c7     00 01 C5 90 
0a4cb     00 00 00 00 
0a4cf     00 00 7F 40 
0a4d3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4d7     00 01 C5 90 
0a4db     00 00 D6 50 
0a4df     00 00 7F 40 
0a4e3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4e7     00 01 C5 90 
0a4eb     00 00 00 00 
0a4ef     00 00 7F 40 
0a4f3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4f7     00 01 C5 90 
0a4fb     00 00 00 00 
0a4ff     00 00 7F 40 
0a503     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a507     00 01 C5 90 
0a50b     00 00 00 00 
0a50f     00 00 7F 40 
0a513     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a517     00 01 C5 90 
0a51b     00 00 D6 50 
0a51f     00 00 00 00 
0a523     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a527     00 00 00 00 
0a52b     00 00 00 00 
0a52f     00 00       | 	byte	$00[10]
0a531     7F 40 00 00 
0a535     AA 70 00 01 
0a539     C5 90 00 00 
0a53d     D6 50 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a541     00 00 00 00 
0a545     AA 70 00 00 
0a549     00 00 00 00 
0a54d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a551     00 00 00 00 
0a555     AA 70 00 01 
0a559     C5 90 00 00 
0a55d     D6 50 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a561     00 00 00 00 
0a565     AA 70 00 00 
0a569     00 00 00 00 
0a56d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a571     7F 40 00 00 
0a575     AA 70 00 00 
0a579     00 00 00 01 
0a57d     1D 60 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $1d, $60, $00, $00
0a581     00 00 00 00 
0a585     AA 70 00 00 
0a589     00 00 00 00 
0a58d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a591     87 40 00 00 
0a595     AA 70 00 00 
0a599     00 00 00 01 
0a59d     53 60 00 00 | 	byte	$87, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00
0a5a1     97 40 00 00 
0a5a5     AA 70 00 00 
0a5a9     00 00 00 00 
0a5ad     D6 60 00 00 | 	byte	$97, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $d6, $60, $00, $00
0a5b1     00 00 00 00 
0a5b5     AA 70 00 00 
0a5b9     00 00 00 01 
0a5bd     AC 60 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0a5c1     00 00 00 00 
0a5c5     AA 70 00 00 
0a5c9     00 00 00 00 
0a5cd     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5d1     00 00 00 00 
0a5d5     00 00       | 	byte	$00[6]
0a5d7     38 00 00 00 
0a5db     00 00 00 00 
0a5df     00 00 00 00 
0a5e3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5e7     38 00 00 00 
0a5eb     00 00 00 00 
0a5ef     00 00 00 00 
0a5f3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5f7     38 00 00 00 
0a5fb     00 00 00 00 
0a5ff     00 00 00 00 
0a603     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a607     38 00 00 00 
0a60b     00 00 00 00 
0a60f     00 00 00 00 
0a613     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a617     38 00 00 00 
0a61b     00 00 00 00 
0a61f     00 00 00 00 
0a623     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a627     38 00 00 00 
0a62b     00 00 00 00 
0a62f     00 00 00 00 
0a633     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a637     38 00 00 00 
0a63b     00 00 00 00 
0a63f     00 00 00 00 
0a643     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a647     38 00 00 00 
0a64b     00 00 00 00 
0a64f     00 00 00 00 
0a653     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a657     38 00 00 00 
0a65b     00 00 00 00 
0a65f     00 00 00 00 
0a663     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a667     38 00 00 00 
0a66b     00 00 00 00 
0a66f     00 00 00 00 
0a673     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a677     38 00 00 00 
0a67b     00 00 00 00 
0a67f     00 00 00 00 
0a683     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a687     38 00 00 00 
0a68b     00 00 00 00 
0a68f     00 00 00 00 
0a693     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a697     38 00 00 00 
0a69b     00 00 00 00 
0a69f     00 00 00 00 
0a6a3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6a7     38 00 00 00 
0a6ab     00 00 00 00 
0a6af     00 00 00 00 
0a6b3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6b7     38 00 00 00 
0a6bb     00 00 00 00 
0a6bf     00 00 00 00 
0a6c3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6c7     38 00 00 00 
0a6cb     00 00 00 00 
0a6cf     00 02 A6 20 
0a6d3     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a6d7     00 02 5C 90 
0a6db     00 00 D6 50 
0a6df     00 02 5C 20 
0a6e3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6e7     00 02 5C 90 
0a6eb     00 00 00 00 
0a6ef     00 00 00 00 
0a6f3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a6f7     00 02 5C 90 
0a6fb     00 00 00 00 
0a6ff     00 02 5C 20 
0a703     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a707     00 02 5C 90 
0a70b     00 00 00 00 
0a70f     00 02 5C 20 
0a713     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a717     00 02 5C 90 
0a71b     00 00 D6 50 
0a71f     00 00 00 00 
0a723     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a727     00 02 5C 90 
0a72b     00 00 D6 50 
0a72f     00 02 5C 20 
0a733     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a737     00 02 5C 90 
0a73b     00 00 D6 50 
0a73f     00 02 5C 20 
0a743     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a747     00 02 5C 90 
0a74b     00 00 D6 50 
0a74f     00 02 A6 20 
0a753     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a757     00 02 5C 90 
0a75b     00 01 AC 60 
0a75f     00 02 5C 20 
0a763     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a767     00 02 5C 90 
0a76b     00 00 00 00 
0a76f     00 00 00 00 
0a773     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a777     00 02 5C 90 
0a77b     00 00 00 00 
0a77f     00 02 5C 20 
0a783     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a787     00 02 5C 90 
0a78b     00 00 00 00 
0a78f     00 02 5C 20 
0a793     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a797     00 02 5C 90 
0a79b     00 00 D6 50 
0a79f     00 00 00 00 
0a7a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a7a7     00 02 5C 90 
0a7ab     00 00 00 00 
0a7af     00 02 5C 20 
0a7b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a7b7     00 02 5C 90 
0a7bb     00 00 00 00 
0a7bf     00 02 5C 20 
0a7c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a7c7     00 02 5C 90 
0a7cb     00 00 00 00 
0a7cf     00 01 C5 20 
0a7d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7d7     00 01 C5 90 
0a7db     00 00 D6 50 
0a7df     00 00 00 00 
0a7e3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a7e7     00 01 C5 90 
0a7eb     00 00 D6 50 
0a7ef     00 01 C5 20 
0a7f3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7f7     00 01 C5 90 
0a7fb     00 00 D6 50 
0a7ff     00 01 C5 20 
0a803     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a807     00 01 C5 90 
0a80b     00 00 D6 50 
0a80f     00 01 C5 20 
0a813     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a817     00 01 C5 90 
0a81b     00 01 AC 60 
0a81f     00 00 00 00 
0a823     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a827     00 01 C5 90 
0a82b     00 00 00 00 
0a82f     00 01 C5 20 
0a833     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a837     00 01 C5 90 
0a83b     00 00 00 00 
0a83f     00 01 C5 20 
0a843     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a847     00 01 C5 90 
0a84b     00 00 00 00 
0a84f     00 02 A6 20 
0a853     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a857     00 02 5C 90 
0a85b     00 00 D6 50 
0a85f     00 00 00 00 
0a863     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a867     00 02 5C 90 
0a86b     00 00 D6 50 
0a86f     00 02 5C 20 
0a873     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a877     00 02 5C 90 
0a87b     00 00 D6 50 
0a87f     00 02 5C 20 
0a883     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a887     00 02 5C 90 
0a88b     00 00 D6 50 
0a88f     00 02 5C 20 
0a893     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a897     00 02 5C 90 
0a89b     00 01 AC 60 
0a89f     00 00 00 00 
0a8a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a8a7     00 02 5C 90 
0a8ab     00 00 00 00 
0a8af     00 02 5C 20 
0a8b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8b7     00 02 5C 90 
0a8bb     00 00 00 00 
0a8bf     00 02 5C 20 
0a8c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8c7     00 02 5C 90 
0a8cb     00 00 00 00 
0a8cf     00 02 A6 20 
0a8d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a8d7     00 02 5C 90 
0a8db     00 00 D6 50 
0a8df     00 02 5C 20 
0a8e3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8e7     00 02 5C 90 
0a8eb     00 00 00 00 
0a8ef     00 00 00 00 
0a8f3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a8f7     00 02 5C 90 
0a8fb     00 00 00 00 
0a8ff     00 02 5C 20 
0a903     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a907     00 02 5C 90 
0a90b     00 00 00 00 
0a90f     00 02 5C 20 
0a913     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a917     00 02 5C 90 
0a91b     00 00 D6 50 
0a91f     00 00 00 00 
0a923     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a927     00 02 5C 90 
0a92b     00 00 D6 50 
0a92f     00 02 5C 20 
0a933     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a937     00 02 5C 90 
0a93b     00 00 D6 50 
0a93f     00 02 5C 20 
0a943     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a947     00 02 5C 90 
0a94b     00 00 D6 50 
0a94f     00 02 A6 20 
0a953     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a957     00 02 5C 90 
0a95b     00 01 AC 60 
0a95f     00 02 5C 20 
0a963     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a967     00 02 5C 90 
0a96b     00 00 00 00 
0a96f     00 00 00 00 
0a973     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a977     00 02 5C 90 
0a97b     00 00 00 00 
0a97f     00 02 5C 20 
0a983     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a987     00 02 5C 90 
0a98b     00 00 00 00 
0a98f     00 02 5C 20 
0a993     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a997     00 02 5C 90 
0a99b     00 00 D6 50 
0a99f     00 00 00 00 
0a9a3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a9a7     00 02 5C 90 
0a9ab     00 00 00 00 
0a9af     00 02 5C 20 
0a9b3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a9b7     00 02 5C 90 
0a9bb     00 01 AC 60 
0a9bf     00 02 5C 20 
0a9c3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a9c7     00 02 5C 90 
0a9cb     00 01 AC 60 
0a9cf     00 01 C5 20 
0a9d3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9d7     00 01 C5 90 
0a9db     00 00 D6 50 
0a9df     00 00 00 00 
0a9e3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a9e7     00 01 C5 90 
0a9eb     00 00 00 00 
0a9ef     00 01 C5 20 
0a9f3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9f7     00 01 C5 90 
0a9fb     00 00 00 00 
0a9ff     00 01 C5 20 
0aa03     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa07     00 01 C5 90 
0aa0b     00 00 00 00 
0aa0f     00 01 C5 20 
0aa13     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa17     00 01 C5 90 
0aa1b     00 00 D6 50 
0aa1f     00 00 00 00 
0aa23     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aa27     00 01 C5 90 
0aa2b     00 00 D6 50 
0aa2f     00 01 C5 20 
0aa33     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa37     00 01 C5 90 
0aa3b     00 00 D6 50 
0aa3f     00 01 C5 20 
0aa43     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa47     00 01 C5 90 
0aa4b     00 00 D6 50 
0aa4f     00 02 A6 20 
0aa53     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0aa57     00 02 5C 90 
0aa5b     00 01 AC 60 
0aa5f     00 00 00 00 
0aa63     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0aa67     00 02 5C 90 
0aa6b     00 00 00 00 
0aa6f     00 02 5C 20 
0aa73     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa77     00 02 5C 90 
0aa7b     00 00 00 00 
0aa7f     00 02 5C 20 
0aa83     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa87     00 02 5C 90 
0aa8b     00 00 00 00 
0aa8f     00 02 5C 20 
0aa93     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa97     00 02 5C 90 
0aa9b     00 00 D6 50 
0aa9f     00 00 00 00 
0aaa3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aaa7     00 02 5C 90 
0aaab     00 00 00 00 
0aaaf     00 02 5C 20 
0aab3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aab7     00 02 5C 90 
0aabb     00 00 00 00 
0aabf     00 02 5C 20 
0aac3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aac7     00 02 5C 90 
0aacb     00 00 00 00 
0aacf     00 02 A6 20 
0aad3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0aad7     00 02 5C 90 
0aadb     00 00 D6 50 
0aadf     00 02 5C 20 
0aae3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0aae7     00 02 5C 90 
0aaeb     00 00 00 00 
0aaef     00 00 00 00 
0aaf3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0aaf7     00 02 5C 90 
0aafb     00 00 00 00 
0aaff     00 02 5C 20 
0ab03     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab07     00 02 5C 90 
0ab0b     00 00 00 00 
0ab0f     00 02 5C 20 
0ab13     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab17     00 02 5C 90 
0ab1b     00 00 D6 50 
0ab1f     00 00 00 00 
0ab23     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ab27     00 02 5C 90 
0ab2b     00 00 D6 50 
0ab2f     00 02 5C 20 
0ab33     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab37     00 02 5C 90 
0ab3b     00 00 D6 50 
0ab3f     00 02 5C 20 
0ab43     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab47     00 02 5C 90 
0ab4b     00 00 D6 50 
0ab4f     00 02 A6 20 
0ab53     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0ab57     00 02 5C 90 
0ab5b     00 01 AC 60 
0ab5f     00 02 5C 20 
0ab63     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab67     00 02 5C 90 
0ab6b     00 00 00 00 
0ab6f     00 00 00 00 
0ab73     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0ab77     00 02 5C 90 
0ab7b     00 00 00 00 
0ab7f     00 02 5C 20 
0ab83     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab87     00 02 5C 90 
0ab8b     00 00 00 00 
0ab8f     00 02 5C 20 
0ab93     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab97     00 02 5C 90 
0ab9b     00 00 D6 50 
0ab9f     00 00 00 00 
0aba3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aba7     00 02 5C 90 
0abab     00 00 00 00 
0abaf     00 02 5C 20 
0abb3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0abb7     00 02 5C 90 
0abbb     00 00 00 00 
0abbf     00 02 5C 20 
0abc3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0abc7     00 02 5C 90 
0abcb     00 00 00 00 
0abcf     00 01 C5 20 
0abd3     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abd7     00 01 C5 90 
0abdb     00 00 D6 50 
0abdf     00 00 00 00 
0abe3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0abe7     00 01 C5 90 
0abeb     00 00 00 00 
0abef     00 01 C5 20 
0abf3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abf7     00 01 C5 90 
0abfb     00 00 00 00 
0abff     00 01 C5 20 
0ac03     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac07     00 01 C5 90 
0ac0b     00 00 00 00 
0ac0f     00 01 C5 20 
0ac13     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac17     00 01 C5 90 
0ac1b     00 00 D6 50 
0ac1f     00 00 00 00 
0ac23     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac27     00 01 C5 90 
0ac2b     00 00 00 00 
0ac2f     00 01 C5 20 
0ac33     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac37     00 01 C5 90 
0ac3b     00 00 00 00 
0ac3f     00 01 C5 20 
0ac43     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac47     00 01 C5 90 
0ac4b     00 00 00 00 
0ac4f     00 01 C5 20 
0ac53     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac57     00 01 C5 90 
0ac5b     00 00 D6 50 
0ac5f     00 00 00 00 
0ac63     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac67     00 01 C5 90 
0ac6b     00 00 00 00 
0ac6f     00 01 C5 20 
0ac73     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac77     00 01 C5 90 
0ac7b     00 00 00 00 
0ac7f     00 01 C5 20 
0ac83     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac87     00 01 C5 90 
0ac8b     00 00 00 00 
0ac8f     00 01 C5 20 
0ac93     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac97     00 01 C5 90 
0ac9b     00 00 D6 50 
0ac9f     00 00 00 00 
0aca3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aca7     00 01 C5 90 
0acab     00 00 00 00 
0acaf     00 01 C5 20 
0acb3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0acb7     00 01 C5 90 
0acbb     00 00 00 00 
0acbf     00 01 C5 20 
0acc3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0acc7     00 01 C5 90 
0accb     00 00 00 00 
0accf     00 01 C5 20 
0acd3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0acd7     00 01 C5 90 
0acdb     00 00 D6 50 
0acdf     00 00 00 00 
0ace3     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ace7     00 00 00 00 
0aceb     00 00 00 00 
0acef     00          | 	byte	$00[9]
0acf0     01 C5 20 00 
0acf4     00 AA 70 00 
0acf8     00 00 00 00 
0acfc     00 00 00 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad00     01 C5 20 00 
0ad04     00 AA 70 00 
0ad08     01 C5 90 00 
0ad0c     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0ad10     01 C5 20 00 
0ad14     00 AA 70 00 
0ad18     01 C5 90 00 
0ad1c     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0ad20     00 00 00 00 
0ad24     00          | 	byte	$00[5]
0ad25     AA 70 00 01 
0ad29     C5 90 00 00 
0ad2d     D6 50 00 00 
0ad31     FE 20 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $20, $00, $00
0ad35     AA 70 00 00 
0ad39     00 00 00 00 
0ad3d     00 00 00 00 
0ad41     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad45     AA 70 00 01 
0ad49     C5 90 00 00 
0ad4d     D6 50 00 00 
0ad51     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00
0ad55     AA 70 00 00 
0ad59     00 00 00 00 
0ad5d     00 00 00 00 
0ad61     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad65     AA 70 00 00 
0ad69     00 00 00 00 
0ad6d     00 00 00 00 
0ad71     FE 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00
0ad75     AA 70 00 00 
0ad79     00 00 00 00 
0ad7d     00 00 00 00 
0ad81     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad85     AA 70 00 00 
0ad89     00 00 00 00 
0ad8d     00 00 00 01 
0ad91     0D 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $20, $00, $00
0ad95     AA 70 00 00 
0ad99     00 00 00 00 
0ad9d     00 00 00 01 
0ada1     2E 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $20, $00, $00
0ada5     AA 70 00 00 
0ada9     00 00 00 00 
0adad     00 00 00 00 
0adb1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adb5     AA 70 00 00 
0adb9     00 00 00 00 
0adbd     00 00 00 00 
0adc1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adc5     AA 70 00 00 
0adc9     00 00 00 00 
0adcd     00 00 00 03 
0add1     28 10 38 03 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $28, $10, $38, $03
0add5     28 10 38 01 
0add9     FC 30 00 01 
0addd     AC 50 00 00 
0ade1     00 00 38 00 | 	byte	$28, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0ade5     00 00 38 00 
0ade9     00 00 00 00 
0aded     AA 70 00 00 
0adf1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0adf5     00 00 38 00 
0adf9     00 00 00 00 
0adfd     AA 70 00 00 
0ae01     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ae05     00 00 38 00 
0ae09     00 00 00 00 
0ae0d     AA 70 00 00 
0ae11     00 00 38 03 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $03
0ae15     28 10 38 01 
0ae19     94 30 00 01 
0ae1d     1D 60 00 00 
0ae21     00 00 38 00 | 	byte	$28, $10, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0ae25     00 00 38 00 
0ae29     00 00 00 00 
0ae2d     AA 70 00 00 
0ae31     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ae35     00 00 38 00 
0ae39     00 00 00 00 
0ae3d     AA 70 00 00 
0ae41     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ae45     00 00 38 00 
0ae49     00 00 00 00 
0ae4d     AA 70 00 02 
0ae51     A6 10 59 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $a6, $10, $59, $02
0ae55     A6 10 59 01 
0ae59     53 30 00 01 
0ae5d     AC 50 00 00 
0ae61     00 00 59 00 | 	byte	$a6, $10, $59, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $59, $00
0ae65     00 00 59 00 
0ae69     00 00 00 00 
0ae6d     AA 70 00 00 
0ae71     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae75     00 00 59 00 
0ae79     00 00 00 00 
0ae7d     AA 70 00 00 
0ae81     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae85     00 00 59 00 
0ae89     00 00 00 00 
0ae8d     AA 70 00 00 
0ae91     00 00 59 02 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $02
0ae95     A6 10 59 01 
0ae99     2E 30 00 01 
0ae9d     1D 60 00 00 
0aea1     00 00 59 00 | 	byte	$a6, $10, $59, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $59, $00
0aea5     00 00 59 00 
0aea9     00 00 00 00 
0aead     AA 70 00 00 
0aeb1     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0aeb5     00 00 59 01 
0aeb9     53 30 00 00 
0aebd     AA 70 00 00 
0aec1     00 00 59 00 | 	byte	$00, $00, $59, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0aec5     00 00 59 00 
0aec9     00 00 00 00 
0aecd     AA 70 00 01 
0aed1     FC 10 47 01 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $47, $01
0aed5     FC 10 47 01 
0aed9     FC 30 00 01 
0aedd     AC 50 00 00 
0aee1     00 00 47 00 | 	byte	$fc, $10, $47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $47, $00
0aee5     00 00 47 00 
0aee9     00 00 00 00 
0aeed     AA 70 00 00 
0aef1     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aef5     00 00 47 00 
0aef9     00 00 00 00 
0aefd     AA 70 00 00 
0af01     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0af05     00 00 47 00 
0af09     00 00 00 00 
0af0d     AA 70 00 00 
0af11     00 00 47 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $01
0af15     FC 10 47 01 
0af19     94 30 00 01 
0af1d     1D 60 00 00 
0af21     00 00 47 00 | 	byte	$fc, $10, $47, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $47, $00
0af25     00 00 47 00 
0af29     00 00 00 00 
0af2d     AA 70 00 00 
0af31     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0af35     00 00 47 00 
0af39     00 00 00 00 
0af3d     AA 70 00 00 
0af41     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0af45     00 00 47 00 
0af49     00 00 00 00 
0af4d     AA 70 00 01 
0af51     94 10 38 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $10, $38, $01
0af55     94 10 38 01 
0af59     53 30 00 01 
0af5d     AC 50 00 00 
0af61     00 00 38 00 | 	byte	$94, $10, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0af65     00 00 38 00 
0af69     00 00 00 00 
0af6d     AA 70 00 00 
0af71     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af75     00 00 38 00 
0af79     00 00 00 00 
0af7d     AA 70 00 00 
0af81     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af85     00 00 38 00 
0af89     00 00 00 00 
0af8d     AA 70 00 00 
0af91     00 00 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $01
0af95     94 10 38 01 
0af99     2E 30 00 01 
0af9d     1D 60 00 00 
0afa1     00 00 38 00 | 	byte	$94, $10, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0afa5     00 00 38 00 
0afa9     00 00 00 00 
0afad     AA 70 00 00 
0afb1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afb5     00 00 38 01 
0afb9     53 30 00 01 
0afbd     1D 60 00 00 
0afc1     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0afc5     00 00 38 00 
0afc9     00 00 00 01 
0afcd     1D 60 00 01 
0afd1     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0afd5     E0 10 38 01 
0afd9     2E 30 00 01 
0afdd     AC 50 00 00 
0afe1     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0afe5     00 00 38 00 
0afe9     00 00 00 00 
0afed     AA 70 00 00 
0aff1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0aff5     00 00 38 00 
0aff9     00 00 00 00 
0affd     AA 70 00 00 
0b001     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b005     00 00 38 00 
0b009     00 00 00 00 
0b00d     AA 70 00 00 
0b011     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b015     00 00 38 01 
0b019     2E 30 00 01 
0b01d     1D 60 00 00 
0b021     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b025     00 00 38 00 
0b029     00 00 00 00 
0b02d     AA 70 00 00 
0b031     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b035     00 00 38 00 
0b039     00 00 00 00 
0b03d     AA 70 00 00 
0b041     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b045     00 00 38 00 
0b049     00 00 00 00 
0b04d     AA 70 00 00 
0b051     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b055     00 00 38 01 
0b059     2E 30 00 01 
0b05d     AC 50 00 00 
0b061     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b065     00 00 38 00 
0b069     00 00 00 00 
0b06d     AA 70 00 00 
0b071     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b075     00 00 38 00 
0b079     00 00 00 01 
0b07d     AC 50 00 00 
0b081     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b085     00 00 38 00 
0b089     00 00 00 00 
0b08d     AA 70 00 00 
0b091     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b095     00 00 38 01 
0b099     2E 30 00 01 
0b09d     1D 60 00 00 
0b0a1     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b0a5     00 00 38 00 
0b0a9     00 00 00 00 
0b0ad     AA 70 00 00 
0b0b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0b5     00 00 38 00 
0b0b9     00 00 00 00 
0b0bd     AA 70 00 00 
0b0c1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0c5     00 00 38 00 
0b0c9     00 00 00 00 
0b0cd     AA 70 00 01 
0b0d1     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $e0, $10, $38, $01
0b0d5     E0 10 38 01 
0b0d9     2E 30 00 01 
0b0dd     AC 50 00 00 
0b0e1     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b0e5     00 00 38 00 
0b0e9     00 00 00 00 
0b0ed     AA 70 00 00 
0b0f1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0f5     00 00 38 00 
0b0f9     00 00 00 00 
0b0fd     AA 70 00 00 
0b101     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b105     00 00 38 00 
0b109     00 00 00 00 
0b10d     AA 70 00 00 
0b111     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b115     00 00 38 01 
0b119     2E 30 00 01 
0b11d     1D 60 00 00 
0b121     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b125     00 00 38 00 
0b129     00 00 00 00 
0b12d     AA 70 00 00 
0b131     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b135     00 00 38 00 
0b139     00 00 00 00 
0b13d     AA 70 00 00 
0b141     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b145     00 00 38 00 
0b149     00 00 00 00 
0b14d     AA 70 00 00 
0b151     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b155     00 00 38 01 
0b159     2E 30 00 01 
0b15d     AC 50 00 00 
0b161     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b165     00 00 38 00 
0b169     00 00 00 00 
0b16d     AA 70 00 00 
0b171     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b175     00 00 38 00 
0b179     00 00 00 01 
0b17d     AC 50 00 00 
0b181     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b185     00 00 38 00 
0b189     00 00 00 00 
0b18d     AA 70 00 00 
0b191     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b195     00 00 38 01 
0b199     2E 30 00 01 
0b19d     1D 60 00 00 
0b1a1     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b1a5     00 00 38 00 
0b1a9     00 00 00 01 
0b1ad     1D 60 00 00 
0b1b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b1b5     00 00 38 00 
0b1b9     00 00 00 00 
0b1bd     AA 70 00 00 
0b1c1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1c5     00 00 38 00 
0b1c9     00 00 00 01 
0b1cd     1D 60 00 01 
0b1d1     94 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $94, $10, $38, $01
0b1d5     94 10 38 01 
0b1d9     FC 30 00 01 
0b1dd     AC 50 00 00 
0b1e1     00 00 38 00 | 	byte	$94, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b1e5     00 00 38 00 
0b1e9     00 00 00 00 
0b1ed     AA 70 00 00 
0b1f1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1f5     00 00 38 00 
0b1f9     00 00 00 00 
0b1fd     AA 70 00 00 
0b201     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b205     00 00 38 00 
0b209     00 00 00 00 
0b20d     AA 70 00 00 
0b211     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b215     00 00 38 01 
0b219     94 30 00 01 
0b21d     1D 60 00 00 
0b221     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b225     00 00 38 00 
0b229     00 00 00 00 
0b22d     AA 70 00 00 
0b231     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b235     00 00 38 00 
0b239     00 00 00 00 
0b23d     AA 70 00 00 
0b241     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b245     00 00 38 00 
0b249     00 00 00 00 
0b24d     AA 70 00 00 
0b251     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b255     00 00 38 01 
0b259     53 30 00 01 
0b25d     AC 50 00 00 
0b261     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b265     00 00 38 00 
0b269     00 00 00 00 
0b26d     AA 70 00 00 
0b271     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b275     00 00 38 00 
0b279     00 00 00 00 
0b27d     AA 70 00 00 
0b281     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b285     00 00 38 00 
0b289     00 00 00 00 
0b28d     AA 70 00 00 
0b291     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b295     00 00 38 01 
0b299     94 30 00 01 
0b29d     1D 60 00 00 
0b2a1     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b2a5     00 00 38 00 
0b2a9     00 00 00 00 
0b2ad     AA 70 00 00 
0b2b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2b5     00 00 38 01 
0b2b9     53 30 00 00 
0b2bd     AA 70 00 00 
0b2c1     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2c5     00 00 38 00 
0b2c9     00 00 00 00 
0b2cd     AA 70 00 01 
0b2d1     68 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $68, $10, $38, $01
0b2d5     68 10 38 01 
0b2d9     C5 30 00 01 
0b2dd     AC 50 00 00 
0b2e1     00 00 38 00 | 	byte	$68, $10, $38, $01, $c5, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b2e5     00 00 38 00 
0b2e9     00 00 00 00 
0b2ed     AA 70 00 00 
0b2f1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2f5     00 00 38 00 
0b2f9     00 00 00 00 
0b2fd     AA 70 00 00 
0b301     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b305     00 00 38 00 
0b309     00 00 00 00 
0b30d     AA 70 00 00 
0b311     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b315     00 00 38 01 
0b319     68 30 00 01 
0b31d     1D 60 00 00 
0b321     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b325     00 00 38 00 
0b329     00 00 00 00 
0b32d     AA 70 00 00 
0b331     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b335     00 00 38 00 
0b339     00 00 00 00 
0b33d     AA 70 00 00 
0b341     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b345     00 00 38 00 
0b349     00 00 00 00 
0b34d     AA 70 00 00 
0b351     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b355     00 00 38 01 
0b359     2E 30 00 01 
0b35d     AC 50 00 00 
0b361     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b365     00 00 38 00 
0b369     00 00 00 00 
0b36d     AA 70 00 00 
0b371     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b375     00 00 38 00 
0b379     00 00 00 00 
0b37d     AA 70 00 00 
0b381     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b385     00 00 38 00 
0b389     00 00 00 00 
0b38d     AA 70 00 00 
0b391     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b395     00 00 38 01 
0b399     68 30 00 01 
0b39d     1D 60 00 00 
0b3a1     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b3a5     00 00 38 00 
0b3a9     00 00 00 00 
0b3ad     AA 70 00 00 
0b3b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3b5     00 00 38 00 
0b3b9     00 00 00 01 
0b3bd     1D 60 00 00 
0b3c1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b3c5     00 00 38 00 
0b3c9     00 00 00 01 
0b3cd     1D 60 00 02 
0b3d1     5C 10 38 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $02, $5c, $10, $38, $02
0b3d5     5C 10 38 01 
0b3d9     7D 30 00 01 
0b3dd     AC 50 00 00 
0b3e1     00 00 38 00 | 	byte	$5c, $10, $38, $01, $7d, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b3e5     00 00 38 00 
0b3e9     00 00 00 00 
0b3ed     AA 70 00 00 
0b3f1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3f5     00 00 38 00 
0b3f9     00 00 00 00 
0b3fd     AA 70 00 00 
0b401     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b405     00 00 38 00 
0b409     00 00 00 00 
0b40d     AA 70 00 00 
0b411     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b415     00 00 38 01 
0b419     2E 30 00 01 
0b41d     1D 60 00 00 
0b421     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b425     00 00 38 00 
0b429     00 00 00 00 
0b42d     AA 70 00 00 
0b431     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b435     00 00 38 00 
0b439     00 00 00 00 
0b43d     AA 70 00 00 
0b441     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b445     00 00 38 00 
0b449     00 00 00 00 
0b44d     AA 70 00 02 
0b451     5C 10 49 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $5c, $10, $49, $02
0b455     5C 10 49 01 
0b459     E0 30 00 01 
0b45d     AC 50 00 00 
0b461     00 00 49 00 | 	byte	$5c, $10, $49, $01, $e0, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b465     00 00 49 00 
0b469     00 00 00 00 
0b46d     AA 70 00 00 
0b471     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b475     00 00 49 00 
0b479     00 00 00 01 
0b47d     AC 50 00 00 
0b481     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b485     00 00 49 00 
0b489     00 00 00 00 
0b48d     AA 70 00 00 
0b491     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b495     00 00 49 01 
0b499     2E 30 00 01 
0b49d     1D 60 00 00 
0b4a1     00 00 49 00 | 	byte	$00, $00, $49, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b4a5     00 00 49 00 
0b4a9     00 00 00 00 
0b4ad     AA 70 00 00 
0b4b1     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4b5     00 00 49 00 
0b4b9     00 00 00 00 
0b4bd     AA 70 00 00 
0b4c1     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4c5     00 00 49 00 
0b4c9     00 00 00 00 
0b4cd     AA 70 00 02 
0b4d1     3A 10 49 02 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $3a, $10, $49, $02
0b4d5     3A 10 49 01 
0b4d9     53 30 00 01 
0b4dd     AC 50 00 00 
0b4e1     00 00 49 00 | 	byte	$3a, $10, $49, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b4e5     00 00 49 00 
0b4e9     00 00 00 00 
0b4ed     AA 70 00 00 
0b4f1     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4f5     00 00 49 00 
0b4f9     00 00 00 00 
0b4fd     AA 70 00 00 
0b501     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b505     00 00 49 00 
0b509     00 00 00 00 
0b50d     AA 70 00 00 
0b511     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b515     00 00 49 01 
0b519     53 30 00 01 
0b51d     1D 60 00 00 
0b521     00 00 49 00 | 	byte	$00, $00, $49, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b525     00 00 49 00 
0b529     00 00 00 00 
0b52d     AA 70 00 00 
0b531     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b535     00 00 49 00 
0b539     00 00 00 00 
0b53d     AA 70 00 00 
0b541     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b545     00 00 49 00 
0b549     00 00 00 00 
0b54d     AA 70 00 01 
0b551     FC 10 38 01 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $38, $01
0b555     FC 10 38 01 
0b559     40 30 00 01 
0b55d     AC 50 00 00 
0b561     00 00 38 00 | 	byte	$fc, $10, $38, $01, $40, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b565     00 00 38 00 
0b569     00 00 00 00 
0b56d     AA 70 00 00 
0b571     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b575     00 00 38 00 
0b579     00 00 00 01 
0b57d     AC 50 00 00 
0b581     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b585     00 00 38 00 
0b589     00 00 00 00 
0b58d     AA 70 00 00 
0b591     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b595     00 00 38 01 
0b599     40 30 00 01 
0b59d     1D 60 00 00 
0b5a1     00 00 38 00 | 	byte	$00, $00, $38, $01, $40, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b5a5     00 00 38 00 
0b5a9     00 00 00 01 
0b5ad     1D 60 00 00 
0b5b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b5b5     00 00 38 00 
0b5b9     00 00 00 00 
0b5bd     AA 70 00 00 
0b5c1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b5c5     00 00 38 00 
0b5c9     00 00 00 01 
0b5cd     1D 60 00 01 
0b5d1     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0b5d5     E0 10 38 01 
0b5d9     2E 30 00 02 
0b5dd     80 60 00 00 
0b5e1     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $02, $80, $60, $00, $00, $00, $00, $38, $00
0b5e5     00 00 38 00 
0b5e9     00 00 00 00 
0b5ed     00 00 00 00 
0b5f1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5f5     00 00 38 00 
0b5f9     00 00 00 00 
0b5fd     00 00 00 00 
0b601     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b605     00 00 38 00 
0b609     00 00 00 00 
0b60d     00 00 00 00 
0b611     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b615     00 00 38 00 
0b619     00 00 00 00 
0b61d     00 00 00 00 
0b621     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b625     00 00 38 00 
0b629     00 00 00 00 
0b62d     00 00 00 00 
0b631     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b635     00 00 38 00 
0b639     00 00 00 00 
0b63d     00 00 00 00 
0b641     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b645     00 00 38 00 
0b649     00 00 00 00 
0b64d     00 00 00 00 
0b651     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b655     00 00 38 00 
0b659     00 00 00 00 
0b65d     00 00 00 00 
0b661     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b665     00 00 38 00 
0b669     00 00 00 00 
0b66d     00 00 00 00 
0b671     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b675     00 00 38 00 
0b679     00 00 00 00 
0b67d     00 00 00 00 
0b681     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b685     00 00 38 00 
0b689     00 00 00 00 
0b68d     00 00 00 00 
0b691     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b695     00 00 38 00 
0b699     00 00 00 00 
0b69d     00 00 00 00 
0b6a1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6a5     00 00 38 00 
0b6a9     00 00 00 00 
0b6ad     00 00 00 00 
0b6b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6b5     00 00 38 00 
0b6b9     00 00 00 00 
0b6bd     00 00 00 00 
0b6c1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6c5     00 00 38 00 
0b6c9     00 00 00 00 
0b6cd     00 00 00 00 
0b6d1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b6d5     00 00 38 00 
0b6d9     00 00 00 00 
0b6dd     00 00 00 00 
0b6e1     00 0C 20 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $20, $00
0b6e5     00 0C 20 00 
0b6e9     00 00 00 00 
0b6ed     00 00 00 00 
0b6f1     00 0C 10 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00
0b6f5     00 0C 10 00 
0b6f9     00 00 00 00 
0b6fd     00 00 00 00 
0b701     00 0C 00 00 | 	byte	$00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00
0b705     00 0C 00 00 
0b709     00 00 00 00 
0b70d     00 00 00 00 
0b711     00 00 00 00 | 	byte	$00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b715     00 00 00 00 
      ...             
0b7c9     00 00 00 00 
0b7cd     00 00 00    | 	byte	$00[187]
0b7d0     02 A6 80 00 
0b7d4     00 AA 70 00 
0b7d8     02 A6 90 00 
0b7dc     01 AC 50 00 | 	byte	$02, $a6, $80, $00, $00, $aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00
0b7e0     02 5C 80 00 
0b7e4     00 AA 70 00 
0b7e8     02 5C 90 00 
0b7ec     00 00 00 00 | 	byte	$02, $5c, $80, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00
0b7f0     00 00 00 00 
0b7f4     00          | 	byte	$00[5]
0b7f5     AA 70 00 00 
0b7f9     00 00 00 01 
0b7fd     AC 50 00 02 
0b801     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b805     AA 70 00 02 
0b809     5C 90 00 01 
0b80d     AC 50 00 00 
0b811     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b815     D6 70 00 00 
0b819     00 00 00 01 
0b81d     AC 60 00 00 
0b821     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b825     AA 70 00 00 
0b829     00 00 00 00 
0b82d     00 00 00 00 
0b831     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b835     AA 70 00 00 
0b839     00 00 00 01 
0b83d     AC 50 00 00 
0b841     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b845     AA 70 00 00 
0b849     00 00 00 00 
0b84d     00 00 00 02 
0b851     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b855     AA 70 00 02 
0b859     A6 90 00 01 
0b85d     AC 50 00 02 
0b861     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b865     AA 70 00 02 
0b869     5C 90 00 00 
0b86d     00 00 00 00 
0b871     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b875     AA 70 00 00 
0b879     00 00 00 01 
0b87d     AC 50 00 02 
0b881     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b885     AA 70 00 02 
0b889     5C 90 00 01 
0b88d     AC 50 00 00 
0b891     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b895     D6 70 00 00 
0b899     00 00 00 01 
0b89d     AC 60 00 00 
0b8a1     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b8a5     AA 70 00 00 
0b8a9     00 00 00 00 
0b8ad     00 00 00 00 
0b8b1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8b5     AA 70 00 00 
0b8b9     00 00 00 01 
0b8bd     AC 50 00 00 
0b8c1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b8c5     AA 70 00 00 
0b8c9     00 00 00 00 
0b8cd     00 00 00 01 
0b8d1     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0b8d5     AA 70 00 01 
0b8d9     FC 90 00 01 
0b8dd     AC 50 00 01 
0b8e1     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b8e5     AA 70 00 01 
0b8e9     C5 90 00 00 
0b8ed     00 00 00 00 
0b8f1     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8f5     AA 70 00 00 
0b8f9     00 00 00 01 
0b8fd     AC 50 00 01 
0b901     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b905     AA 70 00 01 
0b909     C5 90 00 01 
0b90d     AC 50 00 00 
0b911     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b915     D6 70 00 00 
0b919     00 00 00 01 
0b91d     AC 60 00 00 
0b921     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b925     AA 70 00 00 
0b929     00 00 00 00 
0b92d     00 00 00 00 
0b931     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b935     AA 70 00 00 
0b939     00 00 00 01 
0b93d     AC 50 00 00 
0b941     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b945     AA 70 00 00 
0b949     00 00 00 00 
0b94d     00 00 00 02 
0b951     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b955     AA 70 00 02 
0b959     A6 90 00 01 
0b95d     AC 50 00 02 
0b961     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b965     AA 70 00 02 
0b969     5C 90 00 00 
0b96d     00 00 00 00 
0b971     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b975     AA 70 00 00 
0b979     00 00 00 01 
0b97d     AC 50 00 02 
0b981     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b985     AA 70 00 02 
0b989     5C 90 00 01 
0b98d     AC 50 00 00 
0b991     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b995     D6 70 00 00 
0b999     00 00 00 01 
0b99d     AC 60 00 00 
0b9a1     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b9a5     AA 70 00 00 
0b9a9     00 00 00 00 
0b9ad     00 00 00 00 
0b9b1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9b5     AA 70 00 00 
0b9b9     00 00 00 01 
0b9bd     AC 50 00 00 
0b9c1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b9c5     AA 70 00 00 
0b9c9     00 00 00 00 
0b9cd     00 00 00 02 
0b9d1     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b9d5     AA 70 00 02 
0b9d9     A6 90 00 01 
0b9dd     AC 50 00 02 
0b9e1     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b9e5     AA 70 00 02 
0b9e9     5C 90 00 01 
0b9ed     AC 50 00 00 
0b9f1     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0b9f5     AA 70 00 00 
0b9f9     00 00 00 00 
0b9fd     00 00 00 02 
0ba01     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0ba05     AA 70 00 02 
0ba09     5C 90 00 01 
0ba0d     AC 50 00 00 
0ba11     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba15     AA 70 00 00 
0ba19     00 00 00 01 
0ba1d     AC 60 00 00 
0ba21     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0ba25     AA 70 00 00 
0ba29     00 00 00 00 
0ba2d     00 00 00 00 
0ba31     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba35     AA 70 00 00 
0ba39     00 00 00 01 
0ba3d     AC 50 00 00 
0ba41     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0ba45     AA 70 00 00 
0ba49     00 00 00 00 
0ba4d     00 00 00 02 
0ba51     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0ba55     AA 70 00 02 
0ba59     A6 90 00 01 
0ba5d     AC 50 00 02 
0ba61     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0ba65     AA 70 00 02 
0ba69     5C 90 00 01 
0ba6d     AC 50 00 00 
0ba71     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba75     AA 70 00 00 
0ba79     00 00 00 00 
0ba7d     00 00 00 02 
0ba81     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0ba85     AA 70 00 02 
0ba89     5C 90 00 01 
0ba8d     AC 50 00 00 
0ba91     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba95     AA 70 00 00 
0ba99     00 00 00 01 
0ba9d     AC 60 00 00 
0baa1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0baa5     AA 70 00 00 
0baa9     00 00 00 00 
0baad     00 00 00 00 
0bab1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bab5     AA 70 00 00 
0bab9     00 00 00 01 
0babd     AC 50 00 00 
0bac1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bac5     AA 70 00 00 
0bac9     00 00 00 00 
0bacd     00 00 00 01 
0bad1     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0bad5     AA 70 00 01 
0bad9     FC 90 00 01 
0badd     AC 50 00 01 
0bae1     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bae5     AA 70 00 01 
0bae9     C5 90 00 01 
0baed     AC 50 00 00 
0baf1     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0baf5     AA 70 00 00 
0baf9     00 00 00 00 
0bafd     00 00 00 01 
0bb01     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $c5, $80, $00, $00
0bb05     AA 70 00 01 
0bb09     C5 90 00 01 
0bb0d     AC 50 00 00 
0bb11     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb15     AA 70 00 00 
0bb19     00 00 00 01 
0bb1d     AC 60 00 00 
0bb21     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bb25     AA 70 00 00 
0bb29     00 00 00 00 
0bb2d     00 00 00 00 
0bb31     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb35     AA 70 00 00 
0bb39     00 00 00 01 
0bb3d     AC 50 00 00 
0bb41     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb45     AA 70 00 00 
0bb49     00 00 00 00 
0bb4d     00 00 00 02 
0bb51     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bb55     AA 70 00 02 
0bb59     A6 90 00 01 
0bb5d     AC 50 00 02 
0bb61     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bb65     AA 70 00 02 
0bb69     5C 90 00 01 
0bb6d     AC 50 00 00 
0bb71     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb75     AA 70 00 00 
0bb79     00 00 00 00 
0bb7d     00 00 00 02 
0bb81     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bb85     AA 70 00 02 
0bb89     5C 90 00 01 
0bb8d     AC 50 00 00 
0bb91     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb95     AA 70 00 00 
0bb99     00 00 00 01 
0bb9d     AC 60 00 00 
0bba1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bba5     AA 70 00 00 
0bba9     00 00 00 00 
0bbad     00 00 00 00 
0bbb1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbb5     AA 70 00 00 
0bbb9     00 00 00 01 
0bbbd     AC 50 00 00 
0bbc1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bbc5     AA 70 00 00 
0bbc9     00 00 00 00 
0bbcd     00 00 00 02 
0bbd1     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bbd5     AA 70 00 02 
0bbd9     A6 90 00 01 
0bbdd     AC 50 00 02 
0bbe1     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bbe5     AA 70 00 02 
0bbe9     5C 90 00 00 
0bbed     00 00 00 00 
0bbf1     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbf5     AA 70 00 00 
0bbf9     00 00 00 01 
0bbfd     AC 50 00 02 
0bc01     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc05     AA 70 00 02 
0bc09     5C 90 00 01 
0bc0d     AC 50 00 00 
0bc11     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc15     AA 70 00 00 
0bc19     00 00 00 01 
0bc1d     AC 60 00 00 
0bc21     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bc25     AA 70 00 00 
0bc29     00 00 00 00 
0bc2d     00 00 00 00 
0bc31     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc35     AA 70 00 00 
0bc39     00 00 00 01 
0bc3d     AC 50 00 00 
0bc41     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc45     AA 70 00 00 
0bc49     00 00 00 00 
0bc4d     00 00 00 02 
0bc51     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bc55     AA 70 00 02 
0bc59     A6 90 00 01 
0bc5d     AC 50 00 02 
0bc61     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc65     AA 70 00 02 
0bc69     5C 90 00 00 
0bc6d     00 00 00 00 
0bc71     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc75     AA 70 00 00 
0bc79     00 00 00 01 
0bc7d     AC 50 00 02 
0bc81     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc85     AA 70 00 02 
0bc89     5C 90 00 01 
0bc8d     AC 50 00 00 
0bc91     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc95     AA 70 00 00 
0bc99     00 00 00 01 
0bc9d     AC 60 00 00 
0bca1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bca5     AA 70 00 00 
0bca9     00 00 00 00 
0bcad     00 00 00 00 
0bcb1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcb5     AA 70 00 00 
0bcb9     00 00 00 01 
0bcbd     AC 50 00 00 
0bcc1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bcc5     AA 70 00 00 
0bcc9     00 00 00 00 
0bccd     00 00 00 01 
0bcd1     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0bcd5     AA 70 00 01 
0bcd9     FC 90 00 01 
0bcdd     AC 50 00 01 
0bce1     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bce5     AA 70 00 01 
0bce9     C5 90 00 00 
0bced     00 00 00 00 
0bcf1     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcf5     AA 70 00 00 
0bcf9     00 00 00 01 
0bcfd     AC 50 00 01 
0bd01     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bd05     AA 70 00 01 
0bd09     C5 90 00 01 
0bd0d     AC 50 00 00 
0bd11     00 80 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0bd15     AA 70 00 00 
0bd19     00 00 00 01 
0bd1d     AC 60 00 00 
0bd21     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bd25     AA 70 00 00 
0bd29     00 00 00 00 
0bd2d     00 00 00 00 
0bd31     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd35     AA 70 00 00 
0bd39     00 00 00 01 
0bd3d     AC 50 00 00 
0bd41     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd45     AA 70 00 00 
0bd49     00 00 00 00 
0bd4d     00 00 00 02 
0bd51     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bd55     AA 70 00 02 
0bd59     A6 90 00 01 
0bd5d     AC 50 00 02 
0bd61     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd65     AA 70 00 02 
0bd69     5C 90 00 00 
0bd6d     00 00 00 00 
0bd71     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd75     AA 70 00 00 
0bd79     00 00 00 01 
0bd7d     AC 50 00 02 
0bd81     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd85     AA 70 00 02 
0bd89     5C 90 00 01 
0bd8d     AC 50 00 00 
0bd91     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd95     AA 70 00 00 
0bd99     00 00 00 01 
0bd9d     AC 60 00 00 
0bda1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bda5     AA 70 00 00 
0bda9     00 00 00 00 
0bdad     00 00 00 00 
0bdb1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdb5     AA 70 00 00 
0bdb9     00 00 00 01 
0bdbd     AC 50 00 00 
0bdc1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdc5     AA 70 00 00 
0bdc9     00 00 00 00 
0bdcd     00 00 00 02 
0bdd1     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bdd5     AA 70 00 02 
0bdd9     A6 90 00 01 
0bddd     AC 50 00 02 
0bde1     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bde5     AA 70 00 02 
0bde9     5C 90 00 01 
0bded     AC 50 00 00 
0bdf1     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdf5     AA 70 00 00 
0bdf9     00 00 00 00 
0bdfd     00 00 00 02 
0be01     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0be05     AA 70 00 02 
0be09     5C 90 00 01 
0be0d     AC 50 00 00 
0be11     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be15     AA 70 00 00 
0be19     00 00 00 01 
0be1d     AC 60 00 00 
0be21     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0be25     AA 70 00 00 
0be29     00 00 00 00 
0be2d     00 00 00 00 
0be31     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be35     AA 70 00 00 
0be39     00 00 00 01 
0be3d     AC 50 00 00 
0be41     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be45     AA 70 00 00 
0be49     00 00 00 00 
0be4d     00 00 00 02 
0be51     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0be55     AA 70 00 02 
0be59     A6 90 00 01 
0be5d     AC 50 00 02 
0be61     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0be65     AA 70 00 02 
0be69     5C 90 00 01 
0be6d     AC 50 00 00 
0be71     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be75     AA 70 00 00 
0be79     00 00 00 00 
0be7d     00 00 00 02 
0be81     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0be85     AA 70 00 02 
0be89     5C 90 00 01 
0be8d     AC 50 00 00 
0be91     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be95     AA 70 00 00 
0be99     00 00 00 01 
0be9d     AC 60 00 00 
0bea1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bea5     AA 70 00 00 
0bea9     00 00 00 00 
0bead     00 00 00 00 
0beb1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0beb5     AA 70 00 00 
0beb9     00 00 00 01 
0bebd     AC 50 00 00 
0bec1     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bec5     AA 70 00 00 
0bec9     00 00 00 00 
0becd     00 00 00 01 
0bed1     68 80 38 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bed5     68 20 38 01 
0bed9     C5 90 00 01 
0bedd     53 60 00 00 
0bee1     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bee5     00 00 38 00 
0bee9     00 00 00 00 
0beed     00 00 00 00 
0bef1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bef5     00 00 38 00 
0bef9     00 00 00 00 
0befd     00 00 00 00 
0bf01     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf05     00 00 38 00 
0bf09     00 00 00 00 
0bf0d     00 00 00 00 
0bf11     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf15     00 00 38 00 
0bf19     00 00 00 00 
0bf1d     00 00 00 00 
0bf21     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf25     00 00 38 00 
0bf29     00 00 00 00 
0bf2d     00 00 00 01 
0bf31     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bf35     68 20 38 01 
0bf39     C5 90 00 01 
0bf3d     53 60 00 00 
0bf41     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bf45     00 00 38 00 
0bf49     00 00 00 00 
0bf4d     00 00 00 00 
0bf51     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf55     00 00 38 00 
0bf59     00 00 00 00 
0bf5d     00 00 00 00 
0bf61     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf65     00 00 38 00 
0bf69     00 00 00 00 
0bf6d     00 00 00 00 
0bf71     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf75     00 00 38 00 
0bf79     00 00 00 00 
0bf7d     00 00 00 00 
0bf81     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf85     00 00 38 00 
0bf89     00 00 00 00 
0bf8d     00 00 00 01 
0bf91     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bf95     68 20 38 01 
0bf99     C5 90 00 01 
0bf9d     53 60 00 00 
0bfa1     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bfa5     00 00 38 00 
0bfa9     00 00 00 00 
0bfad     00 00 00 00 
0bfb1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfb5     00 00 38 00 
0bfb9     00 00 00 00 
0bfbd     00 00 00 00 
0bfc1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfc5     00 00 38 00 
0bfc9     00 00 00 00 
0bfcd     00 00 00 00 
0bfd1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfd5     00 00 38 00 
0bfd9     00 00 00 00 
0bfdd     00 00 00 00 
0bfe1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfe5     00 00 38 00 
0bfe9     00 00 00 00 
0bfed     00 00 00 00 
0bff1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bff5     00 00 38 00 
0bff9     00 00 00 00 
0bffd     00 00 00 00 
0c001     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c005     00 00 38 00 
0c009     00 00 00 00 
0c00d     00 00 00 01 
0c011     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c015     68 20 38 01 
0c019     C5 90 00 01 
0c01d     53 60 00 00 
0c021     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c025     00 00 38 00 
0c029     00 00 00 00 
0c02d     00 00 00 00 
0c031     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c035     00 00 38 00 
0c039     00 00 00 00 
0c03d     00 00 00 00 
0c041     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c045     00 00 38 00 
0c049     00 00 00 00 
0c04d     00 00 00 01 
0c051     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c055     68 20 38 01 
0c059     C5 90 00 01 
0c05d     53 60 00 00 
0c061     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c065     00 00 38 00 
0c069     00 00 00 00 
0c06d     00 00 00 00 
0c071     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c075     00 00 38 00 
0c079     00 00 00 00 
0c07d     00 00 00 00 
0c081     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c085     00 00 38 00 
0c089     00 00 00 00 
0c08d     00 00 00 00 
0c091     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c095     00 00 38 00 
0c099     00 00 00 00 
0c09d     00 00 00 00 
0c0a1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c0a5     00 00 38 00 
0c0a9     00 00 00 00 
0c0ad     00 00 00 00 
0c0b1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c0b5     00 00 38 00 
0c0b9     00 00 00 00 
0c0bd     00 00 00 00 
0c0c1     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c0c5     00 00 38 00 
0c0c9     00 00 00 00 
0c0cd     00 00 00 00 
0c0d1     71 12 02 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $71, $12, $02, $00
0c0d5     00 00 00 00 
0c0d9     00 00 00 00 
0c0dd     00 00 00 00 
0c0e1     00          | 	byte	$00[13]
0c0e2     02 02 00 00 
0c0e6     00 00 00 00 
0c0ea     00 00 00 00 
0c0ee     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0f2     02 02 00 00 
0c0f6     00 00 00 00 
0c0fa     00 00 00 00 
0c0fe     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c102     02 02 00 00 
0c106     00 00 00 00 
0c10a     00 00 00 00 
0c10e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c112     02 02 00 00 
0c116     00 00 00 00 
0c11a     00 00 00 00 
0c11e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c122     02 02 00 00 
0c126     00 00 00 00 
0c12a     00 00 00 00 
0c12e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c132     02 02 00 00 
0c136     00 00 00 00 
0c13a     00 00 00 00 
0c13e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c142     02 02 00 00 
0c146     00 00 00 00 
0c14a     00 00 00 00 
0c14e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c152     02 02 00 00 
0c156     00 00 00 00 
0c15a     00 00 00 AA 
0c15e     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c162     02 02 00 00 
0c166     00 00 00 00 
0c16a     00 00 00 00 
0c16e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c172     02 02 00 00 
0c176     00 00 00 00 
0c17a     00 00 00 AA 
0c17e     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c182     02 02 00 00 
0c186     00 00 00 00 
0c18a     00 00 00 00 
0c18e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c192     02 02 00 00 
0c196     00 00 00 00 
0c19a     00 00 00 AA 
0c19e     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c1a2     02 02 00 00 
0c1a6     00 00 00 00 
0c1aa     00 00 00 AA 
0c1ae     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c1b2     02 02 00 00 
0c1b6     00 00 00 00 
0c1ba     00 00 00 AA 
0c1be     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c1c2     02 02 00 00 
0c1c6     00 00 00 00 
0c1ca     00 00 00 AA 
0c1ce     70 00 00 FE | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $fe
0c1d2     40 00 00 AA 
0c1d6     70 00 01 C5 
0c1da     90 00 00 D6 
0c1de     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00
0c1e2     00 00 00 AA 
0c1e6     70 00 01 C5 
0c1ea     90 00 00 00 
0c1ee     00 00 00 FE | 	byte	$00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1f2     40 00 00 AA 
0c1f6     70 00 01 C5 
0c1fa     90 00 00 00 
0c1fe     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c202     40 00 00 AA 
0c206     70 00 01 C5 
0c20a     90 00 00 00 
0c20e     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c212     40 00 00 AA 
0c216     70 00 01 C5 
0c21a     90 00 00 D6 
0c21e     50 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe
0c222     40 00 00 AA 
0c226     70 00 01 C5 
0c22a     90 00 00 D6 
0c22e     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c232     40 00 00 AA 
0c236     70 00 01 C5 
0c23a     90 00 00 D6 
0c23e     50 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e
0c242     40 00 00 AA 
0c246     70 00 01 C5 
0c24a     90 00 00 D6 
0c24e     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c252     40 00 00 AA 
0c256     70 00 02 5C 
0c25a     90 00 01 AC 
0c25e     60 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e
0c262     40 00 00 AA 
0c266     70 00 02 5C 
0c26a     90 00 00 00 
0c26e     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c272     00 00 00 AA 
0c276     70 00 02 5C 
0c27a     90 00 00 00 
0c27e     00 00 01 2E | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e
0c282     40 00 00 AA 
0c286     70 00 02 5C 
0c28a     90 00 00 00 
0c28e     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c292     00 00 00 AA 
0c296     70 00 02 5C 
0c29a     90 00 00 D6 
0c29e     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c2a2     00 00 00 AA 
0c2a6     70 00 02 5C 
0c2aa     90 00 00 00 
0c2ae     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2b2     00 00 00 AA 
0c2b6     70 00 02 5C 
0c2ba     90 00 00 00 
0c2be     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2c2     00 00 00 AA 
0c2c6     70 00 02 5C 
0c2ca     90 00 00 00 
0c2ce     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c2d2     40 00 00 AA 
0c2d6     70 00 02 5C 
0c2da     90 00 00 D6 
0c2de     50 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c2e2     40 00 00 AA 
0c2e6     70 00 02 5C 
0c2ea     90 00 00 00 
0c2ee     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2f2     00 00 00 AA 
0c2f6     70 00 02 5C 
0c2fa     90 00 00 00 
0c2fe     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c302     40 00 00 AA 
0c306     70 00 02 5C 
0c30a     90 00 00 00 
0c30e     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c312     00 00 00 AA 
0c316     70 00 02 5C 
0c31a     90 00 00 D6 
0c31e     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c322     00 00 00 AA 
0c326     70 00 02 5C 
0c32a     90 00 00 D6 
0c32e     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c332     00 00 00 AA 
0c336     70 00 02 5C 
0c33a     90 00 00 D6 
0c33e     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c342     00 00 00 AA 
0c346     70 00 02 5C 
0c34a     90 00 00 D6 
0c34e     50 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c352     40 00 00 AA 
0c356     70 00 02 5C 
0c35a     90 00 01 AC 
0c35e     60 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa
0c362     40 00 00 AA 
0c366     70 00 02 5C 
0c36a     90 00 00 00 
0c36e     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c372     00 00 00 AA 
0c376     70 00 02 5C 
0c37a     90 00 00 00 
0c37e     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c382     40 00 00 AA 
0c386     70 00 02 5C 
0c38a     90 00 00 00 
0c38e     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c392     00 00 00 AA 
0c396     70 00 02 5C 
0c39a     90 00 00 D6 
0c39e     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c3a2     00 00 00 AA 
0c3a6     70 00 02 5C 
0c3aa     90 00 00 00 
0c3ae     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c3b2     40 00 00 AA 
0c3b6     70 00 02 5C 
0c3ba     90 00 00 00 
0c3be     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c3c2     40 00 00 AA 
0c3c6     70 00 02 5C 
0c3ca     90 00 00 00 
0c3ce     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f
0c3d2     40 00 00 AA 
0c3d6     70 00 01 C5 
0c3da     90 00 01 AC 
0c3de     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3e2     40 00 00 AA 
0c3e6     70 00 01 C5 
0c3ea     90 00 01 AC 
0c3ee     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3f2     40 00 00 AA 
0c3f6     70 00 01 C5 
0c3fa     90 00 01 AC 
0c3fe     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c402     40 00 00 AA 
0c406     70 00 01 C5 
0c40a     90 00 01 AC 
0c40e     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c412     40 00 00 AA 
0c416     70 00 01 C5 
0c41a     90 00 01 AC 
0c41e     60 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00
0c422     00 00 00 AA 
0c426     70 00 00 00 
0c42a     00 00 00 00 
0c42e     00 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $87
0c432     40 00 00 AA 
0c436     70 00 01 C5 
0c43a     90 00 01 AC 
0c43e     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $97
0c442     40 00 00 AA 
0c446     70 00 01 C5 
0c44a     90 00 00 00 
0c44e     00 00 00 87 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87
0c452     40 00 00 AA 
0c456     70 00 02 5C 
0c45a     90 00 01 AC 
0c45e     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $97
0c462     40 00 00 AA 
0c466     70 00 02 5C 
0c46a     90 00 01 AC 
0c46e     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c472     00 00 00 AA 
0c476     70 00 02 5C 
0c47a     90 00 01 AC 
0c47e     50 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $87
0c482     40 00 00 AA 
0c486     70 00 02 5C 
0c48a     90 00 01 AC 
0c48e     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c492     00 00 00 AA 
0c496     70 00 02 5C 
0c49a     90 00 01 AC 
0c49e     60 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00
0c4a2     00 00 00 AA 
0c4a6     70 00 00 00 
0c4aa     00 00 00 00 
0c4ae     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0c4b2     40 00 00 AA 
0c4b6     70 00 00 00 
0c4ba     00 00 00 00 
0c4be     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97
0c4c2     40 00 00 AA 
0c4c6     70 00 00 00 
0c4ca     00 00 00 00 
0c4ce     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0c4d2     40 00 01 FC 
0c4d6     20 47 01 FC 
0c4da     90 00 01 AC 
0c4de     50 00 00 97 | 	byte	$40, $00, $01, $fc, $20, $47, $01, $fc, $90, $00, $01, $ac, $50, $00, $00, $97
0c4e2     40 00 00 00 
0c4e6     00 47 00 00 
0c4ea     00 00 00 00 
0c4ee     00 00 00 00 | 	byte	$40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4f2     00 00 00 00 
0c4f6     00          | 	byte	$00[5]
0c4f7     47 00 00 00 
0c4fb     00 00 00 00 
0c4ff     00 00 97 40 
0c503     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c507     47 00 00 00 
0c50b     00 00 00 00 
0c50f     00 00 00 00 
0c513     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c517     47 00 00 00 
0c51b     00 00 00 00 
0c51f     00 00 00 00 
0c523     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c527     47 00 00 00 
0c52b     00 00 00 00 
0c52f     00 00 00 00 
0c533     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c537     47 00 00 00 
0c53b     00 00 00 00 
0c53f     00 00 7F 40 
0c543     00 01 C5 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $c5, $20
0c547     47 01 C5 90 
0c54b     00 01 AC 50 
0c54f     00 00 00 00 
0c553     00 00 00 00 | 	byte	$47, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c557     47 00 00 00 
0c55b     00 00 00 00 
0c55f     00 00 97 40 
0c563     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c567     47 00 00 00 
0c56b     00 00 00 00 
0c56f     00 00 00 00 
0c573     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c577     47 00 00 00 
0c57b     00 00 00 00 
0c57f     00 00 97 40 
0c583     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c587     47 00 00 00 
0c58b     00 00 00 00 
0c58f     00 00 7F 40 
0c593     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $fc, $20
0c597     49 01 7D 90 
0c59b     00 01 AC 50 
0c59f     00 00 97 40 
0c5a3     00 00 00 00 | 	byte	$49, $01, $7d, $90, $00, $01, $ac, $50, $00, $00, $97, $40, $00, $00, $00, $00
0c5a7     49 00 00 00 
0c5ab     00 00 00 00 
0c5af     00 00 00 00 
0c5b3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5b7     49 00 00 00 
0c5bb     00 00 00 00 
0c5bf     00 00 97 40 
0c5c3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c5c7     49 00 00 00 
0c5cb     00 00 00 00 
0c5cf     00 00 00 00 
0c5d3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5d7     49 00 00 00 
0c5db     00 00 00 00 
0c5df     00 00 00 00 
0c5e3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5e7     49 00 00 00 
0c5eb     00 00 00 00 
0c5ef     00 00 00 00 
0c5f3     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5f7     49 00 00 00 
0c5fb     00 00 00 00 
0c5ff     00 00 00 00 
0c603     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c607     49 00 00 00 
0c60b     00 00 00 00 
0c60f     00 00 00 00 
0c613     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c617     49 00 00 00 
0c61b     00 01 AC 50 
0c61f     00 00 00 00 
0c623     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c627     49 00 00 00 
0c62b     00 03 58 60 
0c62f     00 00 00 00 
0c633     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
0c637     49 00 00 00 
0c63b     00 00 00 00 
0c63f     00 00 00 00 
0c643     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c647     49 00 00 00 
0c64b     00 00 00 00 
0c64f     00 00 00 00 
0c653     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c657     00 00 00 00 
      ...             
0c6cb     00 00 00 00 
0c6cf     00          | 	byte	$00[121]
0c6d0     01 2E 20 00 
0c6d4     01 E0 20 38 
0c6d8     02 5C 30 00 
0c6dc     01 E0 20 00 | 	byte	$01, $2e, $20, $00, $01, $e0, $20, $38, $02, $5c, $30, $00, $01, $e0, $20, $00
0c6e0     00 00 00 00 
0c6e4     00 00 00    | 	byte	$00[7]
0c6e7     38 00 00 00 
0c6eb     00 00 00 00 
0c6ef     00 00 00 00 
0c6f3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6f7     38 00 00 00 
0c6fb     00 00 00 00 
0c6ff     00 00 00 00 
0c703     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c707     38 00 00 00 
0c70b     00 00 00 00 
0c70f     00 00 00 00 
0c713     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c717     38 00 00 00 
0c71b     00 00 00 00 
0c71f     00 00 00 00 
0c723     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c727     38 00 00 00 
0c72b     00 00 00 00 
0c72f     00 00 00 00 
0c733     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c737     38 00 00 00 
0c73b     00 00 00 00 
0c73f     00 00 00 00 
0c743     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c747     38 00 00 00 
0c74b     00 00 00 00 
0c74f     00 00 00 00 
0c753     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c757     38 00 00 00 
0c75b     00 00 00 00 
0c75f     00 00 00 00 
0c763     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c767     38 00 00 00 
0c76b     00 00 00 00 
0c76f     00 00 00 00 
0c773     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c777     38 00 00 00 
0c77b     00 00 00 00 
0c77f     00 00 00 00 
0c783     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c787     38 00 00 00 
0c78b     00 00 00 00 
0c78f     00 00 00 00 
0c793     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c797     38 00 00 00 
0c79b     00 00 00 00 
0c79f     00 00 00 00 
0c7a3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7a7     38 00 00 00 
0c7ab     00 00 00 00 
0c7af     00 00 00 00 
0c7b3     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7b7     00 00 00 00 
      ...             
0cdcf     00 00 00 00 
0cdd3     00          | 	byte	$00[1565]
0cdd4     E7 F0 14 26 
0cdd8     25 3B 3B 25 
0cddc     19 0F E9 DA 
0cde0     DA C5 C7 DD | 	byte	$e7, $f0, $14, $26, $25, $3b, $3b, $25, $19, $0f, $e9, $da, $da, $c5, $c7, $dd
0cde4     E9 F4 1D 27 
0cde8     27 3D 37 22 
0cdec     18 0A DF D8 
0cdf0     D7 C3 CC DF | 	byte	$e9, $f4, $1d, $27, $27, $3d, $37, $22, $18, $0a, $df, $d8, $d7, $c3, $cc, $df
0cdf4     E9 F7 21 28 
0cdf8     29 3E 33 1F 
0cdfc     16 05 DB D7 
0ce00     D6 C2 D1 E1 | 	byte	$e9, $f7, $21, $28, $29, $3e, $33, $1f, $16, $05, $db, $d7, $d6, $c2, $d1, $e1
0ce04     EA FF 27 29 
0ce08     2C 3E 2E 1E 
0ce0c     15 00 D7 D8 
0ce10     D3 C3 D5 E3 | 	byte	$ea, $ff, $27, $29, $2c, $3e, $2e, $1e, $15, $00, $d7, $d8, $d3, $c3, $d5, $e3
0ce14     EC 04 2B 29 
0ce18     30 3C 2A 1D 
0ce1c     13 F7 D4 D7 
0ce20     CF C5 D9 E3 | 	byte	$ec, $04, $2b, $29, $30, $3c, $2a, $1d, $13, $f7, $d4, $d7, $cf, $c5, $d9, $e3
0ce24     EE 0D 2D 29 
0ce28     33 38 26 1D 
0ce2c     10 ED D1 D7 
0ce30     CE C9 DC E4 | 	byte	$ee, $0d, $2d, $29, $33, $38, $26, $1d, $10, $ed, $d1, $d7, $ce, $c9, $dc, $e4
0ce34     F1 16 2F 29 
0ce38     33 35 23 1C 
0ce3c     0C E6 D0 D6 
0ce40     CC CE DE E5 | 	byte	$f1, $16, $2f, $29, $33, $35, $23, $1c, $0c, $e6, $d0, $d6, $cc, $ce, $de, $e5
0ce44     F6 18 2F 2A 
0ce48     34 30 22 1A 
0ce4c     07 E4 D1 D5 
0ce50     CD D2 DE E7 | 	byte	$f6, $18, $2f, $2a, $34, $30, $22, $1a, $07, $e4, $d1, $d5, $cd, $d2, $de, $e7
0ce54     F9 21 2F 2B 
0ce58     33 2D 22 18 
0ce5c     04 DB D1 D5 
0ce60     CF D4 DE E9 | 	byte	$f9, $21, $2f, $2b, $33, $2d, $22, $18, $04, $db, $d1, $d5, $cf, $d4, $de, $e9
0ce64     FF 27 30 2B 
0ce68     30 2A 23 14 
0ce6c     00 D8 D0 D6 
0ce70     D2 D7 DD ED | 	byte	$ff, $27, $30, $2b, $30, $2a, $23, $14, $00, $d8, $d0, $d6, $d2, $d7, $dd, $ed
0ce74     02 2B 31 29 
0ce78     2D 28 22 10 
0ce7c     FB D4 CF D8 
0ce80     D4 D8 DE F0 | 	byte	$02, $2b, $31, $29, $2d, $28, $22, $10, $fb, $d4, $cf, $d8, $d4, $d8, $de, $f0
0ce84     08 2C 30 26 
0ce88     2A 27 21 0D 
0ce8c     F4 D3 D0 DA 
0ce90     D7 D8 DF F5 | 	byte	$08, $2c, $30, $26, $2a, $27, $21, $0d, $f4, $d3, $d0, $da, $d7, $d8, $df, $f5
0ce94     0D 2F 2F 24 
0ce98     28 28 20 09 
0ce9c     F1 D2 D3 DD 
0cea0     D8 D8 E2 F8 | 	byte	$0d, $2f, $2f, $24, $28, $28, $20, $09, $f1, $d2, $d3, $dd, $d8, $d8, $e2, $f8
0cea4     12 30 2B 21 
0cea8     27 28 1E 05 
0ceac     ED CD D5 E0 
0ceb0     D9 D7 E3 FC | 	byte	$12, $30, $2b, $21, $27, $28, $1e, $05, $ed, $cd, $d5, $e0, $d9, $d7, $e3, $fc
0ceb4     14 32 29 1E 
0ceb8     27 28 1B 01 
0cebc     E8 CE DA E4 
0cec0     D8 D7 E8 02 | 	byte	$14, $32, $29, $1e, $27, $28, $1b, $01, $e8, $ce, $da, $e4, $d8, $d7, $e8, $02
0cec4     17 31 25 1A 
0cec8     27 28 17 FD 
0cecc     E4 CF DD E7 
0ced0     D7 D7 ED 04 | 	byte	$17, $31, $25, $1a, $27, $28, $17, $fd, $e4, $cf, $dd, $e7, $d7, $d7, $ed, $04
0ced4     1A 2F 22 18 
0ced8     29 27 10 FA 
0cedc     E3 D2 DF E8 
0cee0     D5 D8 F4 05 | 	byte	$1a, $2f, $22, $18, $29, $27, $10, $fa, $e3, $d2, $df, $e8, $d5, $d8, $f4, $05
0cee4     1E 2C 1D 17 
0cee8     2B 27 09 FA 
0ceec     E0 D5 E6 E9 
0cef0     D3 DA F8 06 | 	byte	$1e, $2c, $1d, $17, $2b, $27, $09, $fa, $e0, $d5, $e6, $e9, $d3, $da, $f8, $06
0cef4     21 2A 17 18 
0cef8     2D 25 05 F9 
0cefc     E0 D6 EC E9 
0cf00     D2 DE FE 07 | 	byte	$21, $2a, $17, $18, $2d, $25, $05, $f9, $e0, $d6, $ec, $e9, $d2, $de, $fe, $07
0cf04     1F 29 12 17 
0cf08     2F 21 FF F7 
0cf0c     E1 D8 EF E6 
0cf10     D0 E5 02 07 | 	byte	$1f, $29, $12, $17, $2f, $21, $ff, $f7, $e1, $d8, $ef, $e6, $d0, $e5, $02, $07
0cf14     1F 24 0F 1C 
0cf18     31 19 FD F7 
0cf1c     E1 DE F3 E1 
0cf20     CE EB 03 07 | 	byte	$1f, $24, $0f, $1c, $31, $19, $fd, $f7, $e1, $de, $f3, $e1, $ce, $eb, $03, $07
0cf24     22 1E 0A 22 
0cf28     32 10 FD F9 
0cf2c     DD E2 F8 DA 
0cf30     CF F3 03 06 | 	byte	$22, $1e, $0a, $22, $32, $10, $fd, $f9, $dd, $e2, $f8, $da, $cf, $f3, $03, $06
0cf34     24 1C 07 25 
0cf38     2E 09 FE FA 
0cf3c     DD E7 F9 D8 
0cf40     D5 F7 00 05 | 	byte	$24, $1c, $07, $25, $2e, $09, $fe, $fa, $dd, $e7, $f9, $d8, $d5, $f7, $00, $05
0cf44     23 16 08 2D 
0cf48     27 06 01 FB 
0cf4c     DE EC F6 D0 
0cf50     DD FD FD 06 | 	byte	$23, $16, $08, $2d, $27, $06, $01, $fb, $de, $ec, $f6, $d0, $dd, $fd, $fd, $06
0cf54     20 0F 09 32 
0cf58     20 00 05 F6 
0cf5c     E1 F2 F2 CE 
0cf60     E0 00 F8 0B | 	byte	$20, $0f, $09, $32, $20, $00, $05, $f6, $e1, $f2, $f2, $ce, $e0, $00, $f8, $0b
0cf64     1E 0A 11 32 
0cf68     1A 00 09 F4 
0cf6c     E2 F9 EF D0 
0cf70     E5 FF F5 0D | 	byte	$1e, $0a, $11, $32, $1a, $00, $09, $f4, $e2, $f9, $ef, $d0, $e5, $ff, $f5, $0d
0cf74     1C 06 16 2E 
0cf78     14 02 0B F4 
0cf7c     E4 FC E7 D4 
0cf80     EE FB F5 0D | 	byte	$1c, $06, $16, $2e, $14, $02, $0b, $f4, $e4, $fc, $e7, $d4, $ee, $fb, $f5, $0d
0cf84     1A 03 1D 2B 
0cf88     0C 07 09 F5 
0cf8c     E8 FC E1 D6 
0cf90     F6 F6 F8 0A | 	byte	$1a, $03, $1d, $2b, $0c, $07, $09, $f5, $e8, $fc, $e1, $d6, $f6, $f6, $f8, $0a
0cf94     15 04 1F 29 
0cf98     09 0C 07 F3 
0cf9c     ED F9 E2 D9 
0cfa0     F8 F2 F9 0C | 	byte	$15, $04, $1f, $29, $09, $0c, $07, $f3, $ed, $f9, $e2, $d9, $f8, $f2, $f9, $0c
0cfa4     10 0A 1E 23 
0cfa8     09 0E 07 F3 
0cfac     F1 F5 E2 DE 
0cfb0     F5 F1 F8 0E | 	byte	$10, $0a, $1e, $23, $09, $0e, $07, $f3, $f1, $f5, $e2, $de, $f5, $f1, $f8, $0e
0cfb4     0F 0D 1C 1C 
0cfb8     0C 0E 0A F1 
0cfbc     F2 F3 E0 E4 
0cfc0     F1 F2 F5 0E | 	byte	$0f, $0d, $1c, $1c, $0c, $0e, $0a, $f1, $f2, $f3, $e0, $e4, $f1, $f2, $f5, $0e
0cfc4     0F 0C 20 1A 
0cfc8     10 0E 0A F3 
0cfcc     F0 F5 E0 E8 
0cfd0     EF F1 F5 0C | 	byte	$0f, $0c, $20, $1a, $10, $0e, $0a, $f3, $f0, $f5, $e0, $e8, $ef, $f1, $f5, $0c
0cfd4     11 09 1F 18 
0cfd8     11 0F 0A F4 
0cfdc     EE F9 E1 E7 
0cfe0     EF EF F4 0D | 	byte	$11, $09, $1f, $18, $11, $0f, $0a, $f4, $ee, $f9, $e1, $e7, $ef, $ef, $f4, $0d
0cfe4     12 06 1E 1B 
0cfe8     0F 12 0B F2 
0cfec     ED F9 E3 E3 
0cff0     F1 EC F5 12 | 	byte	$12, $06, $1e, $1b, $0f, $12, $0b, $f2, $ed, $f9, $e3, $e3, $f1, $ec, $f5, $12
0cff4     11 07 1C 1D 
0cff8     0E 16 0A ED 
0cffc     F4 F6 E3 E3 
0d000     F1 E9 F7 18 | 	byte	$11, $07, $1c, $1d, $0e, $16, $0a, $ed, $f4, $f6, $e3, $e3, $f1, $e9, $f7, $18
0d004     09 0A 1E 1C 
0d008     0F 19 09 E7 
0d00c     FC F5 DF E6 
0d010     EF E6 F9 1C | 	byte	$09, $0a, $1e, $1c, $0f, $19, $09, $e7, $fc, $f5, $df, $e6, $ef, $e6, $f9, $1c
0d014     01 08 24 17 
0d018     12 1B 07 E4 
0d01c     02 F7 DA E8 
0d020     EC E5 FD 1B | 	byte	$01, $08, $24, $17, $12, $1b, $07, $e4, $02, $f7, $da, $e8, $ec, $e5, $fd, $1b
0d024     FD 0B 28 16 
0d028     16 1D FC E6 
0d02c     05 F4 D7 EC 
0d030     E8 E3 05 16 | 	byte	$fd, $0b, $28, $16, $16, $1d, $fc, $e6, $05, $f4, $d7, $ec, $e8, $e3, $05, $16
0d034     FA 0F 29 14 
0d038     1A 1D F5 EE 
0d03c     07 ED D8 EC 
0d040     E3 E2 10 0D | 	byte	$fa, $0f, $29, $14, $1a, $1d, $f5, $ee, $07, $ed, $d8, $ec, $e3, $e2, $10, $0d
0d044     F7 1A 28 14 
0d048     1F 1D EC F6 
0d04c     09 E1 DA EB 
0d050     DF E5 17 06 | 	byte	$f7, $1a, $28, $14, $1f, $1d, $ec, $f6, $09, $e1, $da, $eb, $df, $e5, $17, $06
0d054     F7 21 22 16 
0d058     23 17 E8 FC 
0d05c     0A DB E0 E9 
0d060     DB EE 18 01 | 	byte	$f7, $21, $22, $16, $23, $17, $e8, $fc, $0a, $db, $e0, $e9, $db, $ee, $18, $01
0d064     F8 28 20 1A 
0d068     26 0A E9 04 
0d06c     04 D6 E1 E4 
0d070     D9 F9 15 F9 | 	byte	$f8, $28, $20, $1a, $26, $0a, $e9, $04, $04, $d6, $e1, $e4, $d9, $f9, $15, $f9
0d074     03 2B 1D 1E 
0d078     27 04 ED 0C 
0d07c     FB D5 E3 DF 
0d080     DB 01 11 F2 | 	byte	$03, $2b, $1d, $1e, $27, $04, $ed, $0c, $fb, $d5, $e3, $df, $db, $01, $11, $f2
0d084     0D 2B 1D 24 
0d088     23 FB F3 0F 
0d08c     EE D6 E3 D9 
0d090     E0 05 0B F1 | 	byte	$0d, $2b, $1d, $24, $23, $fb, $f3, $0f, $ee, $d6, $e3, $d9, $e0, $05, $0b, $f1
0d094     15 2B 1E 28 
0d098     1B F7 F9 0E 
0d09c     E5 D6 E0 D7 
0d0a0     E6 0A 04 F5 | 	byte	$15, $2b, $1e, $28, $1b, $f7, $f9, $0e, $e5, $d6, $e0, $d7, $e6, $0a, $04, $f5
0d0a4     1E 2A 22 29 
0d0a8     14 F7 FF 09 
0d0ac     E1 D7 DB D7 
0d0b0     EF 09 FC F9 | 	byte	$1e, $2a, $22, $29, $14, $f7, $ff, $09, $e1, $d7, $db, $d7, $ef, $09, $fc, $f9
0d0b4     20 29 26 27 
0d0b8     0D F7 05 03 
0d0bc     DD D7 D7 DB 
0d0c0     F3 08 F9 00 | 	byte	$20, $29, $26, $27, $0d, $f7, $05, $03, $dd, $d7, $d7, $db, $f3, $08, $f9, $00
0d0c4     25 2A 2B 23 
0d0c8     0B FA 05 FA 
0d0cc     D9 D5 D5 DE 
0d0d0     F7 04 FB 08 | 	byte	$25, $2a, $2b, $23, $0b, $fa, $05, $fa, $d9, $d5, $d5, $de, $f7, $04, $fb, $08
0d0d4     29 2C 2A 1F 
0d0d8     09 FD 05 F4 
0d0dc     D7 D1 D7 E4 
0d0e0     F7 02 FD 0F | 	byte	$29, $2c, $2a, $1f, $09, $fd, $05, $f4, $d7, $d1, $d7, $e4, $f7, $02, $fd, $0f
0d0e4     2C 31 28 19 
0d0e8     09 FE 02 F0 
0d0ec     D2 CC D9 EA 
0d0f0     F4 03 FF 10 | 	byte	$2c, $31, $28, $19, $09, $fe, $02, $f0, $d2, $cc, $d9, $ea, $f4, $03, $ff, $10
0d0f4     31 35 25 13 
0d0f8     0D FB FE EF 
0d0fc     CC C9 DD EC 
0d100     F2 06 04 14 | 	byte	$31, $35, $25, $13, $0d, $fb, $fe, $ef, $cc, $c9, $dd, $ec, $f2, $06, $04, $14
0d104     37 36 21 14 
0d108     0E FA FA E8 
0d10c     C7 CD E2 EB 
0d110     F4 08 08 1B | 	byte	$37, $36, $21, $14, $0e, $fa, $fa, $e8, $c7, $cd, $e2, $eb, $f4, $08, $08, $1b
0d114     3E 31 1A 17 
0d118     09 F7 F7 E4 
0d11c     BE D1 E8 E6 
0d120     F9 0A 08 1F | 	byte	$3e, $31, $1a, $17, $09, $f7, $f7, $e4, $be, $d1, $e8, $e6, $f9, $0a, $08, $1f
0d124     44 2C 15 1C 
0d128     03 F3 F7 DA 
0d12c     BB D3 EB E1 
0d130     FC 0E 09 2A | 	byte	$44, $2c, $15, $1c, $03, $f3, $f7, $da, $bb, $d3, $eb, $e1, $fc, $0e, $09, $2a
0d134     45 2B 14 20 
0d138     00 EF F6 D0 
0d13c     BC D8 EB E1 
0d140     02 14 0C 36 | 	byte	$45, $2b, $14, $20, $00, $ef, $f6, $d0, $bc, $d8, $eb, $e1, $02, $14, $0c, $36
0d144     43 26 17 1D 
0d148     FC EB F2 C5 
0d14c     BF DE E3 E6 
0d150     06 16 11 3F | 	byte	$43, $26, $17, $1d, $fc, $eb, $f2, $c5, $bf, $de, $e3, $e6, $06, $16, $11, $3f
0d154     41 20 20 18 
0d158     F6 E9 EC BC 
0d15c     C0 E5 DB ED 
0d160     0D 16 1B 46 | 	byte	$41, $20, $20, $18, $f6, $e9, $ec, $bc, $c0, $e5, $db, $ed, $0d, $16, $1b, $46
0d164     40 19 26 11 
0d168     EF EA DF BA 
0d16c     C4 E7 D8 F3 
0d170     13 15 26 46 | 	byte	$40, $19, $26, $11, $ef, $ea, $df, $ba, $c4, $e7, $d8, $f3, $13, $15, $26, $46
0d174     3A 18 26 0C 
0d178     E8 E9 D3 B9 
0d17c     C9 E5 DB F8 
0d180     19 17 2F 48 | 	byte	$3a, $18, $26, $0c, $e8, $e9, $d3, $b9, $c9, $e5, $db, $f8, $19, $17, $2f, $48
0d184     34 1E 21 08 
0d188     E4 E6 CD B8 
0d18c     CF DE E1 FC 
0d190     1F 1D 36 49 | 	byte	$34, $1e, $21, $08, $e4, $e6, $cd, $b8, $cf, $de, $e1, $fc, $1f, $1d, $36, $49
0d194     32 25 1C 01 
0d198     DF DE C7 B8 
0d19c     D0 D9 E4 04 
0d1a0     22 27 3B 48 | 	byte	$32, $25, $1c, $01, $df, $de, $c7, $b8, $d0, $d9, $e4, $04, $22, $27, $3b, $48
0d1a4     2F 28 19 F8 
0d1a8     DD D3 C3 B9 
0d1ac     D1 D7 E9 0C 
0d1b0     24 31 3D 47 | 	byte	$2f, $28, $19, $f8, $dd, $d3, $c3, $b9, $d1, $d7, $e9, $0c, $24, $31, $3d, $47
0d1b4     2E 28 15 F3 
0d1b8     D9 CC C2 BA 
0d1bc     CF D9 EF 10 
0d1c0     2A 37 3F 46 | 	byte	$2e, $28, $15, $f3, $d9, $cc, $c2, $ba, $cf, $d9, $ef, $10, $2a, $37, $3f, $46
0d1c4     33 25 0E EB 
0d1c8     D2 C7 C0 BA 
0d1cc     CC DD F2 18 
0d1d0     32 3B 41 46 | 	byte	$33, $25, $0e, $eb, $d2, $c7, $c0, $ba, $cc, $dd, $f2, $18, $32, $3b, $41, $46
0d1d4     35 20 0A E3 
0d1d8     CC C3 BF B9 
0d1dc     CA E3 F9 20 
0d1e0     38 3F 42 47 | 	byte	$35, $20, $0a, $e3, $cc, $c3, $bf, $b9, $ca, $e3, $f9, $20, $38, $3f, $42, $47
0d1e4     37 1D 03 DC 
0d1e8     C4 BF BE B9 
0d1ec     C9 E5 01 24 
0d1f0     3F 42 44 47 | 	byte	$37, $1d, $03, $dc, $c4, $bf, $be, $b9, $c9, $e5, $01, $24, $3f, $42, $44, $47
0d1f4     39 17 FB D7 
0d1f8     BD BC BA BA 
0d1fc     C8 EB 09 2D 
0d200     45 45 48 47 | 	byte	$39, $17, $fb, $d7, $bd, $bc, $ba, $ba, $c8, $eb, $09, $2d, $45, $45, $48, $47
0d204     36 12 F2 D0 
0d208     B7 BB B6 B9 
0d20c     CB F0 0F 33 
0d210     4A 46 4B 47 | 	byte	$36, $12, $f2, $d0, $b7, $bb, $b6, $b9, $cb, $f0, $0f, $33, $4a, $46, $4b, $47
0d214     31 0F E9 CA 
0d218     B3 B9 B4 B8 
0d21c     CE F5 19 39 
0d220     4E 49 4D 49 | 	byte	$31, $0f, $e9, $ca, $b3, $b9, $b4, $b8, $ce, $f5, $19, $39, $4e, $49, $4d, $49
0d224     30 09 E2 C3 
0d228     B0 B5 B3 B6 
0d22c     D2 FA 21 40 
0d230     51 4E 4D 4A | 	byte	$30, $09, $e2, $c3, $b0, $b5, $b3, $b6, $d2, $fa, $21, $40, $51, $4e, $4d, $4a
0d234     2C 02 DA BC 
0d238     AE B0 B4 B6 
0d23c     DA 00 2A 48 
0d240     53 53 4D 49 | 	byte	$2c, $02, $da, $bc, $ae, $b0, $b4, $b6, $da, $00, $2a, $48, $53, $53, $4d, $49
0d244     28 FB D2 B6 
0d248     AB AB B4 B8 
0d24c     DB 0B 2E 4D 
0d250     56 57 4C 49 | 	byte	$28, $fb, $d2, $b6, $ab, $ab, $b4, $b8, $db, $0b, $2e, $4d, $56, $57, $4c, $49
0d254     20 F1 CD B1 
0d258     A7 A8 B4 B7 
0d25c     E1 17 33 51 
0d260     5C 58 4D 47 | 	byte	$20, $f1, $cd, $b1, $a7, $a8, $b4, $b7, $e1, $17, $33, $51, $5c, $58, $4d, $47
0d264     1B E8 CA AE 
0d268     A1 A8 B4 BB 
0d26c     E8 1E 3B 53 
0d270     61 59 4C 43 | 	byte	$1b, $e8, $ca, $ae, $a1, $a8, $b4, $bb, $e8, $1e, $3b, $53, $61, $59, $4c, $43
0d274     14 DD C2 AC 
0d278     9B A6 B5 BF 
0d27c     EC 26 42 56 
0d280     67 5A 4C 42 | 	byte	$14, $dd, $c2, $ac, $9b, $a6, $b5, $bf, $ec, $26, $42, $56, $67, $5a, $4c, $42
0d284     10 D6 BD A7 
0d288     98 A6 B4 C0 
0d28c     F6 2C 45 5C 
0d290     6A 58 4C 3E | 	byte	$10, $d6, $bd, $a7, $98, $a6, $b4, $c0, $f6, $2c, $45, $5c, $6a, $58, $4c, $3e
0d294     04 D2 B8 A0 
0d298     95 A9 B4 C5 
0d29c     04 30 4A 61 
0d2a0     6D 55 4B 3A | 	byte	$04, $d2, $b8, $a0, $95, $a9, $b4, $c5, $04, $30, $4a, $61, $6d, $55, $4b, $3a
0d2a4     F7 CC B3 9C 
0d2a8     93 AC B5 CB 
0d2ac     0F 36 4F 68 
0d2b0     6E 54 4B 31 | 	byte	$f7, $cc, $b3, $9c, $93, $ac, $b5, $cb, $0f, $36, $4f, $68, $6e, $54, $4b, $31
0d2b4     F2 C7 AD 95 
0d2b8     92 AC B7 D3 
0d2bc     13 3B 52 6E 
0d2c0     6D 55 49 2E | 	byte	$f2, $c7, $ad, $95, $92, $ac, $b7, $d3, $13, $3b, $52, $6e, $6d, $55, $49, $2e
0d2c4     E5 C2 AB 8F 
0d2c8     92 AD B7 DA 
0d2cc     1B 3E 5B 72 
0d2d0     6C 54 48 1F | 	byte	$e5, $c2, $ab, $8f, $92, $ad, $b7, $da, $1b, $3e, $5b, $72, $6c, $54, $48, $1f
0d2d4     DF BF A3 8C 
0d2d8     96 AD B9 DF 
0d2dc     24 42 60 77 
0d2e0     6B 53 46 1A | 	byte	$df, $bf, $a3, $8c, $96, $ad, $b9, $df, $24, $42, $60, $77, $6b, $53, $46, $1a
0d2e4     D6 BD 9C 88 
0d2e8     97 AE BC EC 
0d2ec     2C 45 68 79 
0d2f0     65 51 43 12 | 	byte	$d6, $bd, $9c, $88, $97, $ae, $bc, $ec, $2c, $45, $68, $79, $65, $51, $43, $12
0d2f4     D2 B8 95 87 
0d2f8     9C AF C1 F6 
0d2fc     30 4C 6E 7B 
0d300     64 51 3C 04 | 	byte	$d2, $b8, $95, $87, $9c, $af, $c1, $f6, $30, $4c, $6e, $7b, $64, $51, $3c, $04
0d304     CD B1 90 87 
0d308     9C B0 C7 00 
0d30c     33 52 71 79 
0d310     64 50 36 FA | 	byte	$cd, $b1, $90, $87, $9c, $b0, $c7, $00, $33, $52, $71, $79, $64, $50, $36, $fa
0d314     CB AB 8C 88 
0d318     9C B3 D0 0A 
0d31c     37 59 76 75 
0d320     64 4C 31 F1 | 	byte	$cb, $ab, $8c, $88, $9c, $b3, $d0, $0a, $37, $59, $76, $75, $64, $4c, $31, $f1
0d324     C5 A3 89 8D 
0d328     9D B7 D4 13 
0d32c     3B 62 79 73 
0d330     63 49 24 EC | 	byte	$c5, $a3, $89, $8d, $9d, $b7, $d4, $13, $3b, $62, $79, $73, $63, $49, $24, $ec
0d334     BE 9D 87 8F 
0d338     9E BA DF 18 
0d33c     42 67 7A 71 
0d340     62 44 1A E9 | 	byte	$be, $9d, $87, $8f, $9e, $ba, $df, $18, $42, $67, $7a, $71, $62, $44, $1a, $e9
0d344     B9 97 87 90 
0d348     9E BF EB 1A 
0d34c     4A 69 79 71 
0d350     60 3D 13 E3 | 	byte	$b9, $97, $87, $90, $9e, $bf, $eb, $1a, $4a, $69, $79, $71, $60, $3d, $13, $e3
0d354     B2 94 8A 8F 
0d358     A2 C5 F1 20 
0d35c     52 6E 75 73 
0d360     5A 3A 0C DC | 	byte	$b2, $94, $8a, $8f, $a2, $c5, $f1, $20, $52, $6e, $75, $73, $5a, $3a, $0c, $dc
0d364     AD 8F 8D 8D 
0d368     A9 CB F9 24 
0d36c     55 72 72 73 
0d370     54 31 07 D7 | 	byte	$ad, $8f, $8d, $8d, $a9, $cb, $f9, $24, $55, $72, $72, $73, $54, $31, $07, $d7
0d374     A8 8C 8F 8E 
0d378     AC D6 FD 2C 
0d37c     5A 73 71 71 
0d380     4E 25 04 CC | 	byte	$a8, $8c, $8f, $8e, $ac, $d6, $fd, $2c, $5a, $73, $71, $71, $4e, $25, $04, $cc
0d384     A2 8E 8E 8E 
0d388     B2 E0 01 36 
0d38c     5F 71 73 70 
0d390     4B 1C FF C3 | 	byte	$a2, $8e, $8e, $8e, $b2, $e0, $01, $36, $5f, $71, $73, $70, $4b, $1c, $ff, $c3
0d394     9E 90 8B 93 
0d398     BA E6 05 40 
0d39c     61 6D 77 6A 
0d3a0     41 19 F7 BD | 	byte	$9e, $90, $8b, $93, $ba, $e6, $05, $40, $61, $6d, $77, $6a, $41, $19, $f7, $bd
0d3a4     9D 94 8A 9A 
0d3a8     C5 E8 0D 43 
0d3ac     66 6C 79 63 
0d3b0     3B 17 EE BA | 	byte	$9d, $94, $8a, $9a, $c5, $e8, $0d, $43, $66, $6c, $79, $63, $3b, $17, $ee, $ba
0d3b4     9A 95 88 A1 
0d3b8     CB E9 12 48 
0d3bc     65 6D 78 5C 
0d3c0     2E 15 E8 B4 | 	byte	$9a, $95, $88, $a1, $cb, $e9, $12, $48, $65, $6d, $78, $5c, $2e, $15, $e8, $b4
0d3c4     9B 93 89 A8 
0d3c8     D6 EC 1D 50 
0d3cc     62 6F 76 55 
0d3d0     27 13 E0 AF | 	byte	$9b, $93, $89, $a8, $d6, $ec, $1d, $50, $62, $6f, $76, $55, $27, $13, $e0, $af
0d3d4     A0 90 8D AD 
0d3d8     DC EE 26 52 
0d3dc     5F 72 71 4E 
0d3e0     23 10 D7 AB | 	byte	$a0, $90, $8d, $ad, $dc, $ee, $26, $52, $5f, $72, $71, $4e, $23, $10, $d7, $ab
0d3e4     A2 8D 90 B8 
0d3e8     DD F5 29 54 
0d3ec     5E 74 6E 42 
0d3f0     22 07 D3 AB | 	byte	$a2, $8d, $90, $b8, $dd, $f5, $29, $54, $5e, $74, $6e, $42, $22, $07, $d3, $ab
0d3f4     A2 8C 95 C4 
0d3f8     DF FB 33 54 
0d3fc     60 74 68 38 
0d400     21 01 C9 AD | 	byte	$a2, $8c, $95, $c4, $df, $fb, $33, $54, $60, $74, $68, $38, $21, $01, $c9, $ad
0d404     9E 8E 9D CC 
0d408     E0 03 39 51 
0d40c     63 71 60 32 
0d410     20 FA C8 B0 | 	byte	$9e, $8e, $9d, $cc, $e0, $03, $39, $51, $63, $71, $60, $32, $20, $fa, $c8, $b0
0d414     9B 90 A7 D1 
0d418     E2 09 3A 4F 
0d41c     67 6F 51 2F 
0d420     19 F6 C3 B1 | 	byte	$9b, $90, $a7, $d1, $e2, $09, $3a, $4f, $67, $6f, $51, $2f, $19, $f6, $c3, $b1
0d424     98 93 B1 D2 
0d428     E8 0D 3E 50 
0d42c     69 6B 49 2C 
0d430     18 EF C2 B0 | 	byte	$98, $93, $b1, $d2, $e8, $0d, $3e, $50, $69, $6b, $49, $2c, $18, $ef, $c2, $b0
0d434     97 99 BB D5 
0d438     EB 16 3C 51 
0d43c     68 65 3F 29 
0d440     13 E8 C4 AC | 	byte	$97, $99, $bb, $d5, $eb, $16, $3c, $51, $68, $65, $3f, $29, $13, $e8, $c4, $ac
0d444     98 9F C4 D6 
0d448     F0 1C 3B 55 
0d44c     66 5B 3A 28 
0d450     0E E5 C3 A8 | 	byte	$98, $9f, $c4, $d6, $f0, $1c, $3b, $55, $66, $5b, $3a, $28, $0e, $e5, $c3, $a8
0d454     9C AA C6 DB 
0d458     F5 1B 3D 57 
0d45c     63 51 39 23 
0d460     0C E2 C0 A9 | 	byte	$9c, $aa, $c6, $db, $f5, $1b, $3d, $57, $63, $51, $39, $23, $0c, $e2, $c0, $a9
0d464     A0 B2 C9 E0 
0d468     F9 1E 3E 58 
0d46c     5C 4A 36 1F 
0d470     06 E1 BC A8 | 	byte	$a0, $b2, $c9, $e0, $f9, $1e, $3e, $58, $5c, $4a, $36, $1f, $06, $e1, $bc, $a8
0d474     A8 B9 CC E2 
0d478     FB 1E 43 58 
0d47c     53 44 31 1A 
0d480     03 E1 BA A9 | 	byte	$a8, $b9, $cc, $e2, $fb, $1e, $43, $58, $53, $44, $31, $1a, $03, $e1, $ba, $a9
0d484     B0 BE CF E9 
0d488     FD 1F 47 55 
0d48c     4A 41 2E 15 
0d490     02 DE B7 AD | 	byte	$b0, $be, $cf, $e9, $fd, $1f, $47, $55, $4a, $41, $2e, $15, $02, $de, $b7, $ad
0d494     B9 C0 D5 EB 
0d498     FE 24 4A 50 
0d49c     43 3E 28 13 
0d4a0     02 DC B5 B4 | 	byte	$b9, $c0, $d5, $eb, $fe, $24, $4a, $50, $43, $3e, $28, $13, $02, $dc, $b5, $b4
0d4a4     C0 C4 D9 EE 
0d4a8     FE 27 4A 48 
0d4ac     3E 3A 24 11 
0d4b0     01 D5 B6 BD | 	byte	$c0, $c4, $d9, $ee, $fe, $27, $4a, $48, $3e, $3a, $24, $11, $01, $d5, $b6, $bd
0d4b4     C3 C6 DF EE 
0d4b8     FE 2E 49 3E 
0d4bc     3D 37 1D 12 
0d4c0     FE CE B9 C7 | 	byte	$c3, $c6, $df, $ee, $fe, $2e, $49, $3e, $3d, $37, $1d, $12, $fe, $ce, $b9, $c7
0d4c4     C3 CC E5 EC 
0d4c8     04 34 44 36 
0d4cc     3D 33 19 16 
0d4d0     F9 CA C0 CD | 	byte	$c3, $cc, $e5, $ec, $04, $34, $44, $36, $3d, $33, $19, $16, $f9, $ca, $c0, $cd
0d4d4     C3 D0 E9 E9 
0d4d8     09 3B 3C 32 
0d4dc     3D 2C 16 19 
0d4e0     F0 C7 CB D1 | 	byte	$c3, $d0, $e9, $e9, $09, $3b, $3c, $32, $3d, $2c, $16, $19, $f0, $c7, $cb, $d1
0d4e4     C5 D8 EA E7 
0d4e8     14 3B 30 30 
0d4ec     3A 27 17 19 
0d4f0     EE C6 D3 CF | 	byte	$c5, $d8, $ea, $e7, $14, $3b, $30, $30, $3a, $27, $17, $19, $ee, $c6, $d3, $cf
0d4f4     C7 DE E8 EA 
0d4f8     17 38 29 31 
0d4fc     37 20 1B 16 
0d500     E6 CA DB CE | 	byte	$c7, $de, $e8, $ea, $17, $38, $29, $31, $37, $20, $1b, $16, $e6, $ca, $db, $ce
0d504     CA E2 E3 ED 
0d508     1F 32 22 32 
0d50c     33 1B 1E 10 
0d510     DF D2 DE CD | 	byte	$ca, $e2, $e3, $ed, $1f, $32, $22, $32, $33, $1b, $1e, $10, $df, $d2, $de, $cd
0d514     CF E6 E0 F5 
0d518     20 29 22 32 
0d51c     2E 1A 21 07 
0d520     DE DD DF CE | 	byte	$cf, $e6, $e0, $f5, $20, $29, $22, $32, $2e, $1a, $21, $07, $de, $dd, $df, $ce
0d524     D6 E6 DF FD 
0d528     22 1F 21 32 
0d52c     27 1B 20 04 
0d530     DE E4 DE CF | 	byte	$d6, $e6, $df, $fd, $22, $1f, $21, $32, $27, $1b, $20, $04, $de, $e4, $de, $cf
0d534     DA E3 E1 FF 
0d538     20 1A 23 31 
0d53c     23 1F 1E FC 
0d540     E3 E8 DC D0 | 	byte	$da, $e3, $e1, $ff, $20, $1a, $23, $31, $23, $1f, $1e, $fc, $e3, $e8, $dc, $d0
0d544     DF E0 E3 06 
0d548     19 16 25 2E 
0d54c     20 20 1B F7 
0d550     EA EA DA D4 | 	byte	$df, $e0, $e3, $06, $19, $16, $25, $2e, $20, $20, $1b, $f7, $ea, $ea, $da, $d4
0d554     E0 E0 E7 0A 
0d558     12 16 27 2A 
0d55c     20 20 16 F8 
0d560     F0 EA DA D8 | 	byte	$e0, $e0, $e7, $0a, $12, $16, $27, $2a, $20, $20, $16, $f8, $f0, $ea, $da, $d8
0d564     E0 E1 ED 08 
0d568     0E 16 28 26 
0d56c     21 1F 13 F9 
0d570     F3 E9 D8 DB | 	byte	$e0, $e1, $ed, $08, $0e, $16, $28, $26, $21, $1f, $13, $f9, $f3, $e9, $d8, $db
0d574     DF E1 F0 04 
0d578     0C 17 26 23 
0d57c     20 1E 0D FF 
0d580     F4 E8 DA DD | 	byte	$df, $e1, $f0, $04, $0c, $17, $26, $23, $20, $1e, $0d, $ff, $f4, $e8, $da, $dd
0d584     E0 E1 F3 FF 
0d588     0C 19 24 23 
0d58c     1F 1D 0C 02 
0d590     F3 E6 DC DC | 	byte	$e0, $e1, $f3, $ff, $0c, $19, $24, $23, $1f, $1d, $0c, $02, $f3, $e6, $dc, $dc
0d594     E2 E3 F2 FD 
0d598     0C 19 22 24 
0d59c     1D 1C 0F 03 
0d5a0     F4 E5 DE DC | 	byte	$e2, $e3, $f2, $fd, $0c, $19, $22, $24, $1d, $1c, $0f, $03, $f4, $e5, $de, $dc
0d5a4     E4 E5 EF FC 
0d5a8     0D 1B 21 24 
0d5ac     1C 1B 12 03 
0d5b0     F2 E5 DF DD | 	byte	$e4, $e5, $ef, $fc, $0d, $1b, $21, $24, $1c, $1b, $12, $03, $f2, $e5, $df, $dd
0d5b4     E4 E6 EC FD 
0d5b8     0E 1C 21 22 
0d5bc     1C 1A 15 02 
0d5c0     F1 E5 DE E0 | 	byte	$e4, $e6, $ec, $fd, $0e, $1c, $21, $22, $1c, $1a, $15, $02, $f1, $e5, $de, $e0
0d5c4     E4 E5 EB 00 
0d5c8     10 1B 22 20 
0d5cc     1C 1C 17 00 
0d5d0     F0 E5 DD E2 | 	byte	$e4, $e5, $eb, $00, $10, $1b, $22, $20, $1c, $1c, $17, $00, $f0, $e5, $dd, $e2
0d5d4     E4 E2 EA 00 
0d5d8     11 1A 22 1D 
0d5dc     1C 20 15 FD 
0d5e0     EE E4 DE E3 | 	byte	$e4, $e2, $ea, $00, $11, $1a, $22, $1d, $1c, $20, $15, $fd, $ee, $e4, $de, $e3
0d5e4     E3 DE ED 02 
0d5e8     11 1D 21 1C 
0d5ec     1E 24 12 FC 
0d5f0     EE E3 DF E4 | 	byte	$e3, $de, $ed, $02, $11, $1d, $21, $1c, $1e, $24, $12, $fc, $ee, $e3, $df, $e4
0d5f4     E1 DB ED 05 
0d5f8     11 1E 20 1C 
0d5fc     21 25 11 F9 
0d600     F0 E1 E1 E4 | 	byte	$e1, $db, $ed, $05, $11, $1e, $20, $1c, $21, $25, $11, $f9, $f0, $e1, $e1, $e4
0d604     DC DB F0 08 
0d608     11 20 1E 1C 
0d60c     27 25 0D F7 
0d610     EE E0 E2 E4 | 	byte	$dc, $db, $f0, $08, $11, $20, $1e, $1c, $27, $25, $0d, $f7, $ee, $e0, $e2, $e4
0d614     D6 DB F5 08 
0d618     13 20 1D 1D 
0d61c     2C 23 09 F8 
0d620     EB E0 E3 E1 | 	byte	$d6, $db, $f5, $08, $13, $20, $1d, $1d, $2c, $23, $09, $f8, $eb, $e0, $e3, $e1
0d624     D2 DF F6 08 
0d628     16 1F 1D 20 
0d62c     2F 1F 08 F8 
0d630     E8 E1 E3 DE | 	byte	$d2, $df, $f6, $08, $16, $1f, $1d, $20, $2f, $1f, $08, $f8, $e8, $e1, $e3, $de
0d634     CF E3 FB 08 
0d638     1A 1E 1D 25 
0d63c     31 1E 04 F7 
0d640     E6 E3 E4 D8 | 	byte	$cf, $e3, $fb, $08, $1a, $1e, $1d, $25, $31, $1e, $04, $f7, $e6, $e3, $e4, $d8
0d644     D0 E5 FE 09 
0d648     1C 1D 1D 2B 
0d64c     30 19 02 F5 
0d650     E3 E2 E2 D1 | 	byte	$d0, $e5, $fe, $09, $1c, $1d, $1d, $2b, $30, $19, $02, $f5, $e3, $e2, $e2, $d1
0d654     D1 E9 FE 0C 
0d658     1C 1D 1F 31 
0d65c     2D 16 01 F1 
0d660     E3 E2 E0 CC | 	byte	$d1, $e9, $fe, $0c, $1c, $1d, $1f, $31, $2d, $16, $01, $f1, $e3, $e2, $e0, $cc
0d664     D4 EC FF 0E 
0d668     1C 1D 23 35 
0d66c     2C 12 00 EF 
0d670     E3 E2 DA CA | 	byte	$d4, $ec, $ff, $0e, $1c, $1d, $23, $35, $2c, $12, $00, $ef, $e3, $e2, $da, $ca
0d674     D6 F1 00 11 
0d678     1D 1E 2A 36 
0d67c     28 0F FF EC 
0d680     E2 E1 D4 CA | 	byte	$d6, $f1, $00, $11, $1d, $1e, $2a, $36, $28, $0f, $ff, $ec, $e2, $e1, $d4, $ca
0d684     D9 F3 02 14 
0d688     1E 20 2F 36 
0d68c     26 0D FC EB 
0d690     E1 DE CF CA | 	byte	$d9, $f3, $02, $14, $1e, $20, $2f, $36, $26, $0d, $fc, $eb, $e1, $de, $cf, $ca
0d694     DC F4 06 15 
0d698     20 24 33 36 
0d69c     21 0D F8 E9 
0d6a0     DF D8 CD CA | 	byte	$dc, $f4, $06, $15, $20, $24, $33, $36, $21, $0d, $f8, $e9, $df, $d8, $cd, $ca
0d6a4     E0 F5 0A 17 
0d6a8     21 29 34 35 
0d6ac     1D 0A F5 E8 
0d6b0     DD D4 CB CB | 	byte	$e0, $f5, $0a, $17, $21, $29, $34, $35, $1d, $0a, $f5, $e8, $dd, $d4, $cb, $cb
0d6b4     E4 F9 0B 19 
0d6b8     23 30 35 34 
0d6bc     1D 04 F4 E5 
0d6c0     DB CE CB CD | 	byte	$e4, $f9, $0b, $19, $23, $30, $35, $34, $1d, $04, $f4, $e5, $db, $ce, $cb, $cd
0d6c4     E5 FD 0C 1D 
0d6c8     28 33 35 32 
0d6cc     1A 00 F3 E2 
0d6d0     D5 CD CA D0 | 	byte	$e5, $fd, $0c, $1d, $28, $33, $35, $32, $1a, $00, $f3, $e2, $d5, $cd, $ca, $d0
0d6d4     E6 02 0E 20 
0d6d8     2E 34 37 2F 
0d6dc     18 FB F2 DF 
0d6e0     CF CB C9 D2 | 	byte	$e6, $02, $0e, $20, $2e, $34, $37, $2f, $18, $fb, $f2, $df, $cf, $cb, $c9, $d2
0d6e4     EB 06 0F 24 
0d6e8     33 34 38 2F 
0d6ec     12 F9 F0 D9 
0d6f0     CB CB C8 D2 | 	byte	$eb, $06, $0f, $24, $33, $34, $38, $2f, $12, $f9, $f0, $d9, $cb, $cb, $c8, $d2
0d6f4     F1 06 13 2A 
0d6f8     36 35 39 2D 
0d6fc     0B F9 EB D4 
0d700     C8 CB C7 D5 | 	byte	$f1, $06, $13, $2a, $36, $35, $39, $2d, $0b, $f9, $eb, $d4, $c8, $cb, $c7, $d5
0d704     F5 07 17 30 
0d708     38 35 3A 27 
0d70c     08 F8 E8 CD 
0d710     C8 CA C6 DB | 	byte	$f5, $07, $17, $30, $38, $35, $3a, $27, $08, $f8, $e8, $cd, $c8, $ca, $c6, $db
0d714     FA 08 1B 35 
0d718     38 37 3A 22 
0d71c     05 F6 E1 C8 
0d720     C8 C9 C6 DE | 	byte	$fa, $08, $1b, $35, $38, $37, $3a, $22, $05, $f6, $e1, $c8, $c8, $c9, $c6, $de
0d724     FD 0A 24 39 
0d728     39 39 3A 1D 
0d72c     02 F4 D8 C4 
0d730     C7 C6 C7 E3 | 	byte	$fd, $0a, $24, $39, $39, $39, $3a, $1d, $02, $f4, $d8, $c4, $c7, $c6, $c7, $e3
0d734     FF 0E 28 3C 
0d738     39 3C 36 19 
0d73c     00 EF D4 C2 
0d740     C5 C3 CC E9 | 	byte	$ff, $0e, $28, $3c, $39, $3c, $36, $19, $00, $ef, $d4, $c2, $c5, $c3, $cc, $e9
0d744     00 12 2F 3E 
0d748     3B 3E 34 15 
0d74c     FE E9 CF C1 
0d750     C4 C1 D0 EF | 	byte	$00, $12, $2f, $3e, $3b, $3e, $34, $15, $fe, $e9, $cf, $c1, $c4, $c1, $d0, $ef
0d754     01 1A 34 3F 
0d758     3E 3F 2E 12 
0d75c     FE E2 CA C0 
0d760     C1 C1 D4 F0 | 	byte	$01, $1a, $34, $3f, $3e, $3f, $2e, $12, $fe, $e2, $ca, $c0, $c1, $c1, $d4, $f0
0d764     04 1F 38 41 
0d768     41 3D 2B 0E 
0d76c     FB DB C6 BE 
0d770     BD C5 D7 F3 | 	byte	$04, $1f, $38, $41, $41, $3d, $2b, $0e, $fb, $db, $c6, $be, $bd, $c5, $d7, $f3
0d774     08 26 3C 43 
0d778     45 3B 26 0C 
0d77c     F6 D7 C3 BC 
0d780     BB C7 DC F3 | 	byte	$08, $26, $3c, $43, $45, $3b, $26, $0c, $f6, $d7, $c3, $bc, $bb, $c7, $dc, $f3
0d784     0F 29 3F 46 
0d788     46 36 23 0A 
0d78c     EF D5 BF B9 
0d790     BA CA E0 F6 | 	byte	$0f, $29, $3f, $46, $46, $36, $23, $0a, $ef, $d5, $bf, $b9, $ba, $ca, $e0, $f6
0d794     13 2D 42 49 
0d798     45 35 1F 09 
0d79c     E9 CF BD B5 
0d7a0     BC CD E2 F9 | 	byte	$13, $2d, $42, $49, $45, $35, $1f, $09, $e9, $cf, $bd, $b5, $bc, $cd, $e2, $f9
0d7a4     18 30 45 4C 
0d7a8     44 32 1D 04 
0d7ac     E3 CD B9 B3 
0d7b0     BD D0 E3 FF | 	byte	$18, $30, $45, $4c, $44, $32, $1d, $04, $e3, $cd, $b9, $b3, $bd, $d0, $e3, $ff
0d7b4     1E 35 49 4E 
0d7b8     42 2F 1B FE 
0d7bc     E3 C8 B4 B1 
0d7c0     C0 D1 E7 03 | 	byte	$1e, $35, $49, $4e, $42, $2f, $1b, $fe, $e3, $c8, $b4, $b1, $c0, $d1, $e7, $03
0d7c4     1F 3A 4C 4E 
0d7c8     3F 2E 16 FA 
0d7cc     DE C2 B1 B2 
0d7d0     C0 D3 EC 05 | 	byte	$1f, $3a, $4c, $4e, $3f, $2e, $16, $fa, $de, $c2, $b1, $b2, $c0, $d3, $ec, $05
0d7d4     23 41 50 4D 
0d7d8     3F 2B 13 F9 
0d7dc     DA BE AF B3 
0d7e0     C1 D6 EF 09 | 	byte	$23, $41, $50, $4d, $3f, $2b, $13, $f9, $da, $be, $af, $b3, $c1, $d6, $ef, $09
0d7e4     28 45 52 4D 
0d7e8     3D 27 0E F6 
0d7ec     D8 B7 AE B5 
0d7f0     C3 D9 F4 0C | 	byte	$28, $45, $52, $4d, $3d, $27, $0e, $f6, $d8, $b7, $ae, $b5, $c3, $d9, $f4, $0c
0d7f4     2A 4C 51 4B 
0d7f8     3D 21 0B F2 
0d7fc     D2 B1 AF B5 
0d800     C4 DF F7 0F | 	byte	$2a, $4c, $51, $4b, $3d, $21, $0b, $f2, $d2, $b1, $af, $b5, $c4, $df, $f7, $0f
0d804     32 50 50 4B 
0d808     3D 1F 08 F1 
0d80c     C8 AD B0 B5 
0d810     C5 E4 F8 12 | 	byte	$32, $50, $50, $4b, $3d, $1f, $08, $f1, $c8, $ad, $b0, $b5, $c5, $e4, $f8, $12
0d814     38 53 4F 4B 
0d818     3A 18 07 EF 
0d81c     C2 AC B0 B5 
0d820     C8 EB F9 12 | 	byte	$38, $53, $4f, $4b, $3a, $18, $07, $ef, $c2, $ac, $b0, $b5, $c8, $eb, $f9, $12
0d824     41 53 4F 4B 
0d828     38 12 05 EB 
0d82c     BB AC B0 B4 
0d830     CD EF F9 17 | 	byte	$41, $53, $4f, $4b, $38, $12, $05, $eb, $bb, $ac, $b0, $b4, $cd, $ef, $f9, $17
0d834     47 52 4F 4C 
0d838     33 10 05 E5 
0d83c     B5 AE B1 B3 
0d840     D1 F1 FA 21 | 	byte	$47, $52, $4f, $4c, $33, $10, $05, $e5, $b5, $ae, $b1, $b3, $d1, $f1, $fa, $21
0d844     4E 50 4F 4C 
0d848     2B 0E 05 DB 
0d84c     B0 B0 B0 B4 
0d850     D8 F2 FC 29 | 	byte	$4e, $50, $4f, $4c, $2b, $0e, $05, $db, $b0, $b0, $b0, $b4, $d8, $f2, $fc, $29
0d854     52 50 51 4B 
0d858     24 0E 03 D1 
0d85c     AD B1 AF B7 
0d860     DD F2 00 31 | 	byte	$52, $50, $51, $4b, $24, $0e, $03, $d1, $ad, $b1, $af, $b7, $dd, $f2, $00, $31
0d864     53 4F 53 46 
0d868     20 0E 00 CE 
0d86c     AD B1 AC BA 
0d870     E4 F1 05 39 | 	byte	$53, $4f, $53, $46, $20, $0e, $00, $ce, $ad, $b1, $ac, $ba, $e4, $f1, $05, $39
0d874     52 4E 55 43 
0d878     1B 0E F9 C1 
0d87c     AE B1 AA C1 
0d880     E6 F1 0B 41 | 	byte	$52, $4e, $55, $43, $1b, $0e, $f9, $c1, $ae, $b1, $aa, $c1, $e6, $f1, $0b, $41
0d884     51 4F 56 3C 
0d888     19 0F F0 BF 
0d88c     AE AF AA C9 
0d890     E7 F1 15 43 | 	byte	$51, $4f, $56, $3c, $19, $0f, $f0, $bf, $ae, $af, $aa, $c9, $e7, $f1, $15, $43
0d894     50 51 55 35 
0d898     19 0D E6 BB 
0d89c     B0 AE AD CB 
0d8a0     E8 F4 1A 46 | 	byte	$50, $51, $55, $35, $19, $0d, $e6, $bb, $b0, $ae, $ad, $cb, $e8, $f4, $1a, $46
0d8a4     50 53 51 32 
0d8a8     17 0C E2 B9 
0d8ac     B0 AB B1 D0 
0d8b0     E8 F6 23 47 | 	byte	$50, $53, $51, $32, $17, $0c, $e2, $b9, $b0, $ab, $b1, $d0, $e8, $f6, $23, $47
0d8b4     50 56 4E 2D 
0d8b8     17 07 DA B9 
0d8bc     AF A9 B4 D5 
0d8c0     E7 FE 2B 46 | 	byte	$50, $56, $4e, $2d, $17, $07, $da, $b9, $af, $a9, $b4, $d5, $e7, $fe, $2b, $46
0d8c4     51 56 48 2A 
0d8c8     18 00 D7 B8 
0d8cc     AD AA BB D4 
0d8d0     E9 06 2B 48 | 	byte	$51, $56, $48, $2a, $18, $00, $d7, $b8, $ad, $aa, $bb, $d4, $e9, $06, $2b, $48
0d8d4     53 55 42 28 
0d8d8     16 FA D1 B7 
0d8dc     AC AC BE D7 
0d8e0     EC 0D 2F 4A | 	byte	$53, $55, $42, $28, $16, $fa, $d1, $b7, $ac, $ac, $be, $d7, $ec, $0d, $2f, $4a
0d8e4     55 53 41 29 
0d8e8     11 F3 CE B6 
0d8ec     AA B0 C2 D8 
0d8f0     F2 11 33 49 | 	byte	$55, $53, $41, $29, $11, $f3, $ce, $b6, $aa, $b0, $c2, $d8, $f2, $11, $33, $49
0d8f4     56 4E 3D 27 
0d8f8     0D EB CB B5 
0d8fc     AA B2 C5 DA 
0d900     F5 16 33 4D | 	byte	$56, $4e, $3d, $27, $0d, $eb, $cb, $b5, $aa, $b2, $c5, $da, $f5, $16, $33, $4d
0d904     55 4C 3A 27 
0d908     07 E7 CB B0 
0d90c     AB B7 C6 DB 
0d910     FD 19 35 4F | 	byte	$55, $4c, $3a, $27, $07, $e7, $cb, $b0, $ab, $b7, $c6, $db, $fd, $19, $35, $4f
0d914     54 47 3A 22 
0d918     00 E5 CA AF 
0d91c     AD BA C8 E0 
0d920     00 1D 3A 52 | 	byte	$54, $47, $3a, $22, $00, $e5, $ca, $af, $ad, $ba, $c8, $e0, $00, $1d, $3a, $52
0d924     52 45 38 1E 
0d928     FB E2 C4 AD 
0d92c     B1 BC C9 E5 
0d930     08 1F 3E 52 | 	byte	$52, $45, $38, $1e, $fb, $e2, $c4, $ad, $b1, $bc, $c9, $e5, $08, $1f, $3e, $52
0d934     4E 43 37 16 
0d938     F8 DF C2 AD 
0d93c     B4 BE CC EB 
0d940     0C 21 41 52 | 	byte	$4e, $43, $37, $16, $f8, $df, $c2, $ad, $b4, $be, $cc, $eb, $0c, $21, $41, $52
0d944     4B 41 35 11 
0d948     F4 DB BD AF 
0d94c     B7 BE CF F1 
0d950     0F 24 43 50 | 	byte	$4b, $41, $35, $11, $f4, $db, $bd, $af, $b7, $be, $cf, $f1, $0f, $24, $43, $50
0d954     48 42 2F 0A 
0d958     F1 D9 BB B0 
0d95c     B9 BE D4 F6 
0d960     10 29 47 4E | 	byte	$48, $42, $2f, $0a, $f1, $d9, $bb, $b0, $b9, $be, $d4, $f6, $10, $29, $47, $4e
0d964     45 41 29 06 
0d968     EE D8 B8 B3 
0d96c     BB C0 D8 FC 
0d970     13 2B 48 4B | 	byte	$45, $41, $29, $06, $ee, $d8, $b8, $b3, $bb, $c0, $d8, $fc, $13, $2b, $48, $4b
0d974     44 3F 24 00 
0d978     ED D3 B7 B6 
0d97c     BC C1 DE 01 
0d980     13 30 48 48 | 	byte	$44, $3f, $24, $00, $ed, $d3, $b7, $b6, $bc, $c1, $de, $01, $13, $30, $48, $48
0d984     44 3E 1D FF 
0d988     EB CE B8 B9 
0d98c     BC C3 E6 03 
0d990     17 32 47 46 | 	byte	$44, $3e, $1d, $ff, $eb, $ce, $b8, $b9, $bc, $c3, $e6, $03, $17, $32, $47, $46
0d994     44 39 16 FC 
0d998     E9 CC B9 BB 
0d99c     BD C9 E9 06 
0d9a0     1A 35 46 44 | 	byte	$44, $39, $16, $fc, $e9, $cc, $b9, $bb, $bd, $c9, $e9, $06, $1a, $35, $46, $44
0d9a4     43 33 14 F9 
0d9a8     E7 C9 BB BC 
0d9ac     BD CD F0 08 
0d9b0     1A 37 44 43 | 	byte	$43, $33, $14, $f9, $e7, $c9, $bb, $bc, $bd, $cd, $f0, $08, $1a, $37, $44, $43
0d9b4     42 30 0E F6 
0d9b8     E3 C7 BD BD 
0d9bc     BF D3 F5 0B 
0d9c0     20 39 42 43 | 	byte	$42, $30, $0e, $f6, $e3, $c7, $bd, $bd, $bf, $d3, $f5, $0b, $20, $39, $42, $43
0d9c4     41 29 0A F5 
0d9c8     E0 C8 BF BD 
0d9cc     C1 DB F8 0D 
0d9d0     21 38 40 42 | 	byte	$41, $29, $0a, $f5, $e0, $c8, $bf, $bd, $c1, $db, $f8, $0d, $21, $38, $40, $42
0d9d4     3D 24 06 F2 
0d9d8     DC C7 C0 BD 
0d9dc     C5 DE FC 0D 
0d9e0     24 38 3F 42 | 	byte	$3d, $24, $06, $f2, $dc, $c7, $c0, $bd, $c5, $de, $fc, $0d, $24, $38, $3f, $42
0d9e4     39 1E 02 F1 
0d9e8     DA C9 C1 BE 
0d9ec     C9 E5 FD 11 
0d9f0     25 36 3F 41 | 	byte	$39, $1e, $02, $f1, $da, $c9, $c1, $be, $c9, $e5, $fd, $11, $25, $36, $3f, $41
0d9f4     34 1A 02 EE 
0d9f8     DA CA C1 C0 
0d9fc     CF E9 FF 13 
0da00     26 35 3F 3F | 	byte	$34, $1a, $02, $ee, $da, $ca, $c1, $c0, $cf, $e9, $ff, $13, $26, $35, $3f, $3f
0da04     30 15 FE EC 
0da08     D9 CB C1 C2 
0da0c     D4 EC 03 15 
0da10     27 34 3F 3C | 	byte	$30, $15, $fe, $ec, $d9, $cb, $c1, $c2, $d4, $ec, $03, $15, $27, $34, $3f, $3c
0da14     2A 11 FD EA 
0da18     DB CB C0 C5 
0da1c     D9 EF 05 17 
0da20     25 35 3F 38 | 	byte	$2a, $11, $fd, $ea, $db, $cb, $c0, $c5, $d9, $ef, $05, $17, $25, $35, $3f, $38
0da24     26 0F F9 E9 
0da28     DC CB C1 CA 
0da2c     DC F2 07 17 
0da30     24 36 3E 35 | 	byte	$26, $0f, $f9, $e9, $dc, $cb, $c1, $ca, $dc, $f2, $07, $17, $24, $36, $3e, $35
0da34     21 0C F7 E8 
0da38     DD C9 C2 CE 
0da3c     E1 F5 0A 17 
0da40     24 37 3C 2F | 	byte	$21, $0c, $f7, $e8, $dd, $c9, $c2, $ce, $e1, $f5, $0a, $17, $24, $37, $3c, $2f
0da44     1F 0A F4 EA 
0da48     DD C8 C5 D4 
0da4c     E3 F7 0C 15 
0da50     24 38 38 2A | 	byte	$1f, $0a, $f4, $ea, $dd, $c8, $c5, $d4, $e3, $f7, $0c, $15, $24, $38, $38, $2a
0da54     1C 06 F4 EB 
0da58     DB C8 C9 D7 
0da5c     E5 FC 0D 14 
0da60     24 39 34 26 | 	byte	$1c, $06, $f4, $eb, $db, $c8, $c9, $d7, $e5, $fc, $0d, $14, $24, $39, $34, $26
0da64     19 05 F3 ED 
0da68     DB C7 CF DB 
0da6c     E9 FD 0D 12 
0da70     26 38 30 24 | 	byte	$19, $05, $f3, $ed, $db, $c7, $cf, $db, $e9, $fd, $0d, $12, $26, $38, $30, $24
0da74     16 01 F4 EF 
0da78     D7 C8 D3 DE 
0da7c     EA 01 0B 11 
0da80     2A 37 2A 21 | 	byte	$16, $01, $f4, $ef, $d7, $c8, $d3, $de, $ea, $01, $0b, $11, $2a, $37, $2a, $21
0da84     15 FE F6 EE 
0da88     D4 CA D8 DF 
0da8c     ED 04 09 13 
0da90     2B 33 25 21 | 	byte	$15, $fe, $f6, $ee, $d4, $ca, $d8, $df, $ed, $04, $09, $13, $2b, $33, $25, $21
0da94     11 FD F9 EC 
0da98     D4 CE DC E0 
0da9c     F1 04 06 15 
0daa0     2D 2F 23 1F | 	byte	$11, $fd, $f9, $ec, $d4, $ce, $dc, $e0, $f1, $04, $06, $15, $2d, $2f, $23, $1f
0daa4     0E FB FB EA 
0daa8     D3 D3 DE E2 
0daac     F4 04 04 18 
0dab0     2D 2A 21 1E | 	byte	$0e, $fb, $fb, $ea, $d3, $d3, $de, $e2, $f4, $04, $04, $18, $2d, $2a, $21, $1e
0dab4     0A FD FC E5 
0dab8     D3 D9 DF E3 
0dabc     F7 02 04 1C 
0dac0     2C 24 21 1B | 	byte	$0a, $fd, $fc, $e5, $d3, $d9, $df, $e3, $f7, $02, $04, $1c, $2c, $24, $21, $1b
0dac4     07 FF FB E5 
0dac8     D5 DD DF E7 
0dacc     FA FE 06 1D 
0dad0     2A 21 21 19 | 	byte	$07, $ff, $fb, $e5, $d5, $dd, $df, $e7, $fa, $fe, $06, $1d, $2a, $21, $21, $19
0dad4     06 03 FA E3 
0dad8     D9 E0 DF E9 
0dadc     FA FC 07 1E 
0dae0     25 1F 21 15 | 	byte	$06, $03, $fa, $e3, $d9, $e0, $df, $e9, $fa, $fc, $07, $1e, $25, $1f, $21, $15
0dae4     06 05 F9 E1 
0dae8     DD E2 E0 EB 
0daec     F9 FA 0B 1E 
0daf0     21 1E 1F 13 | 	byte	$06, $05, $f9, $e1, $dd, $e2, $e0, $eb, $f9, $fa, $0b, $1e, $21, $1e, $1f, $13
0daf4     08 06 F5 E2 
0daf8     E1 E2 E2 EE 
0dafc     F7 FA 0E 1D 
0db00     1E 1E 1E 10 | 	byte	$08, $06, $f5, $e2, $e1, $e2, $e2, $ee, $f7, $fa, $0e, $1d, $1e, $1e, $1e, $10
0db04     0A 05 F3 E4 
0db08     E3 E1 E2 F0 
0db0c     F5 FC 0E 1B 
0db10     1C 1F 1B 10 | 	byte	$0a, $05, $f3, $e4, $e3, $e1, $e2, $f0, $f5, $fc, $0e, $1b, $1c, $1f, $1b, $10
0db14     0C 02 F1 E7 
0db18     E4 E1 E6 F0 
0db1c     F3 FF 0F 18 
0db20     1C 1E 1A 11 | 	byte	$0c, $02, $f1, $e7, $e4, $e1, $e6, $f0, $f3, $ff, $0f, $18, $1c, $1e, $1a, $11
0db24     0C 01 F1 EA 
0db28     E4 E2 E7 EE 
0db2c     F3 00 0F 15 
0db30     1C 1D 18 13 | 	byte	$0c, $01, $f1, $ea, $e4, $e2, $e7, $ee, $f3, $00, $0f, $15, $1c, $1d, $18, $13
0db34     0D FF F2 EC 
0db38     E4 E3 E9 EC 
0db3c     F4 02 0D 14 
0db40     1C 1C 17 15 | 	byte	$0d, $ff, $f2, $ec, $e4, $e3, $e9, $ec, $f4, $02, $0d, $14, $1c, $1c, $17, $15
0db44     0B FD F4 EB 
0db48     E4 E4 E8 EA 
0db4c     F6 02 0A 15 
0db50     1C 1B 18 15 | 	byte	$0b, $fd, $f4, $eb, $e4, $e4, $e8, $ea, $f6, $02, $0a, $15, $1c, $1b, $18, $15
0db54     08 FE F6 EB 
0db58     E4 E5 E6 EB 
0db5c     F9 01 09 16 
0db60     1B 1A 1A 15 | 	byte	$08, $fe, $f6, $eb, $e4, $e5, $e6, $eb, $f9, $01, $09, $16, $1b, $1a, $1a, $15
0db64     07 FF F7 EA 
0db68     E5 E6 E5 ED 
0db6c     FA 00 08 18 
0db70     1A 1A 1D 13 | 	byte	$07, $ff, $f7, $ea, $e5, $e6, $e5, $ed, $fa, $00, $08, $18, $1a, $1a, $1d, $13
0db74     06 02 F6 E8 
0db78     E6 E5 E3 EE 
0db7c     FA FD 09 18 
0db80     19 1C 1D 10 | 	byte	$06, $02, $f6, $e8, $e6, $e5, $e3, $ee, $fa, $fd, $09, $18, $19, $1c, $1d, $10
0db84     06 04 F6 E7 
0db88     E7 E3 E3 F1 
0db8c     F9 FB 0B 18 
0db90     18 1E 1D 0D | 	byte	$06, $04, $f6, $e7, $e7, $e3, $e3, $f1, $f9, $fb, $0b, $18, $18, $1e, $1d, $0d
0db94     08 05 F2 E8 
0db98     E7 E0 E3 F4 
0db9c     F7 FA 0F 18 
0dba0     18 20 1B 0B | 	byte	$08, $05, $f2, $e8, $e7, $e0, $e3, $f4, $f7, $fa, $0f, $18, $18, $20, $1b, $0b
0dba4     0B 05 F1 E8 
0dba8     E7 DE E5 F5 
0dbac     F4 FB 11 17 
0dbb0     1A 23 18 0B | 	byte	$0b, $05, $f1, $e8, $e7, $de, $e5, $f5, $f4, $fb, $11, $17, $1a, $23, $18, $0b
0dbb4     0E 04 EE E9 
0dbb8     E5 DC E8 F4 
0dbbc     F1 FC 12 16 
0dbc0     1C 23 16 0C | 	byte	$0e, $04, $ee, $e9, $e5, $dc, $e8, $f4, $f1, $fc, $12, $16, $1c, $23, $16, $0c
0dbc4     10 00 ED EA 
0dbc8     E1 DC EC F2 
0dbcc     EF 00 13 16 
0dbd0     21 23 13 0E | 	byte	$10, $00, $ed, $ea, $e1, $dc, $ec, $f2, $ef, $00, $13, $16, $21, $23, $13, $0e
0dbd4     11 FD ED EA 
0dbd8     DE DE ED F0 
0dbdc     EF 03 13 17 
0dbe0     24 21 12 12 | 	byte	$11, $fd, $ed, $ea, $de, $de, $ed, $f0, $ef, $03, $13, $17, $24, $21, $12, $12
0dbe4     10 FB ED E8 
0dbe8     DB E0 EF EC 
0dbec     F1 06 13 19 
0dbf0     26 1F 12 15 | 	byte	$10, $fb, $ed, $e8, $db, $e0, $ef, $ec, $f1, $06, $13, $19, $26, $1f, $12, $15
0dbf4     0E F8 ED E6 
0dbf8     D9 E3 EE E9 
0dbfc     F2 0A 13 1D 
0dc00     27 1C 13 18 | 	byte	$0e, $f8, $ed, $e6, $d9, $e3, $ee, $e9, $f2, $0a, $13, $1d, $27, $1c, $13, $18
0dc04     0C F6 ED E1 
0dc08     D9 E5 EC E8 
0dc0c     F7 0A 13 21 
0dc10     26 19 16 19 | 	byte	$0c, $f6, $ed, $e1, $d9, $e5, $ec, $e8, $f7, $0a, $13, $21, $26, $19, $16, $19
0dc14     0A F5 EB DF 
0dc18     DA E7 E9 E8 
0dc1c     F9 0B 16 23 
0dc20     24 19 19 17 | 	byte	$0a, $f5, $eb, $df, $da, $e7, $e9, $e8, $f9, $0b, $16, $23, $24, $19, $19, $17
0dc24     05 F3 E9 DC 
0dc28     DD E7 E6 E9 
0dc2c     FB 0D 18 26 
0dc30     23 19 1C 16 | 	byte	$05, $f3, $e9, $dc, $dd, $e7, $e6, $e9, $fb, $0d, $18, $26, $23, $19, $1c, $16
0dc34     02 F4 E6 DA 
0dc38     DE E6 E3 EC 
0dc3c     FF 0D 1C 26 
0dc40     20 1B 1D 13 | 	byte	$02, $f4, $e6, $da, $de, $e6, $e3, $ec, $ff, $0d, $1c, $26, $20, $1b, $1d, $13
0dc44     00 F2 E2 DA 
0dc48     E0 E4 E3 EF 
0dc4c     00 10 20 26 
0dc50     1F 1D 1D 0F | 	byte	$00, $f2, $e2, $da, $e0, $e4, $e3, $ef, $00, $10, $20, $26, $1f, $1d, $1d, $0f
0dc54     FF EF E0 DA 
0dc58     E1 E1 E4 F1 
0dc5c     02 14 22 25 
0dc60     1F 21 1C 0D | 	byte	$ff, $ef, $e0, $da, $e1, $e1, $e4, $f1, $02, $14, $22, $25, $1f, $21, $1c, $0d
0dc64     FE EB DD DC 
0dc68     E0 DF E6 F4 
0dc6c     02 17 23 23 
0dc70     20 22 19 0B | 	byte	$fe, $eb, $dd, $dc, $e0, $df, $e6, $f4, $02, $17, $23, $23, $20, $22, $19, $0b
0dc74     FC E6 DC DD 
0dc78     DF DE E8 F6 
0dc7c     05 1C 23 22 
0dc80     22 22 16 0A | 	byte	$fc, $e6, $dc, $dd, $df, $de, $e8, $f6, $05, $1c, $23, $22, $22, $22, $16, $0a
0dc84     F8 E2 DC DD 
0dc88     DB DE EA F6 
0dc8c     0A 1F 23 23 
0dc90     25 21 15 08 | 	byte	$f8, $e2, $dc, $dd, $db, $de, $ea, $f6, $0a, $1f, $23, $23, $25, $21, $15, $08
0dc94     F6 E0 DD DD 
0dc98     D9 DF EC F9 
0dc9c     0E 20 22 23 
0dca0     27 1E 13 07 | 	byte	$f6, $e0, $dd, $dd, $d9, $df, $ec, $f9, $0e, $20, $22, $23, $27, $1e, $13, $07
0dca4     F0 DE DE DB 
0dca8     D8 E2 EE F9 
0dcac     12 22 22 26 
0dcb0     28 1C 12 04 | 	byte	$f0, $de, $de, $db, $d8, $e2, $ee, $f9, $12, $22, $22, $26, $28, $1c, $12, $04
0dcb4     ED DE DE D9 
0dcb8     D8 E5 EF FF 
0dcbc     16 22 23 29 
0dcc0     27 1B 10 01 | 	byte	$ed, $de, $de, $d9, $d8, $e5, $ef, $ff, $16, $22, $23, $29, $27, $1b, $10, $01
0dcc4     E8 DF DD D6 
0dcc8     D9 E7 F0 00 
0dccc     1A 22 24 2A 
0dcd0     26 19 0F FD | 	byte	$e8, $df, $dd, $d6, $d9, $e7, $f0, $00, $1a, $22, $24, $2a, $26, $19, $0f, $fd
0dcd4     E5 DE DB D4 
0dcd8     DA E8 F1 06 
0dcdc     1B 21 26 2C 
0dce0     24 18 0E F9 | 	byte	$e5, $de, $db, $d4, $da, $e8, $f1, $06, $1b, $21, $26, $2c, $24, $18, $0e, $f9
0dce4     E3 DE D9 D3 
0dce8     DE E9 F4 09 
0dcec     1D 22 28 2C 
0dcf0     23 16 0A F4 | 	byte	$e3, $de, $d9, $d3, $de, $e9, $f4, $09, $1d, $22, $28, $2c, $23, $16, $0a, $f4
0dcf4     E2 DE D6 D4 
0dcf8     DF EA F6 0D 
0dcfc     1E 22 2B 2C 
0dd00     20 15 08 F0 | 	byte	$e2, $de, $d6, $d4, $df, $ea, $f6, $0d, $1e, $22, $2b, $2c, $20, $15, $08, $f0
0dd04     E2 DC D4 D4 
0dd08     E1 EC FA 12 
0dd0c     00 00 00 00 
0dd10     28 03 F6 DE | 	byte	$e2, $dc, $d4, $d4, $e1, $ec, $fa, $12, $00, $00, $00, $00, $28, $03, $f6, $de
0dd14     B7 E4 04 27 
0dd18     5A 5C 59 11 
0dd1c     E8 BB A0 A2 
0dd20     CE 22 74 66 | 	byte	$b7, $e4, $04, $27, $5a, $5c, $59, $11, $e8, $bb, $a0, $a2, $ce, $22, $74, $66
0dd24     1B D4 BE BD 
0dd28     D5 DD ED FC 
0dd2c     F2 13 2C 34 
0dd30     2A 05 FD D1 | 	byte	$1b, $d4, $be, $bd, $d5, $dd, $ed, $fc, $f2, $13, $2c, $34, $2a, $05, $fd, $d1
0dd34     B0 DA FC 26 
0dd38     62 61 5E 16 
0dd3c     DB AB A7 A5 
0dd40     E0 30 7D 67 | 	byte	$b0, $da, $fc, $26, $62, $61, $5e, $16, $db, $ab, $a7, $a5, $e0, $30, $7d, $67
0dd44     0F CE B4 CC 
0dd48     B9 CA F0 04 
0dd4c     1F 27 23 1A 
0dd50     30 09 FC C3 | 	byte	$0f, $ce, $b4, $cc, $b9, $ca, $f0, $04, $1f, $27, $23, $1a, $30, $09, $fc, $c3
0dd54     BB D1 FF 2B 
0dd58     60 6E 54 1D 
0dd5c     C4 8F 9E C8 
0dd60     1B 6D 7C 53 | 	byte	$bb, $d1, $ff, $2b, $60, $6e, $54, $1d, $c4, $8f, $9e, $c8, $1b, $6d, $7c, $53
0dd64     DB B6 88 8C 
0dd68     83 93 CF 41 
0dd6c     6E 7D 76 57 
0dd70     52 03 B8 86 | 	byte	$db, $b6, $88, $8c, $83, $93, $cf, $41, $6e, $7d, $76, $57, $52, $03, $b8, $86
0dd74     9A C8 0C 5B 
0dd78     7F 7F 52 E7 
0dd7c     89 80 80 CD 
0dd80     4C 7F 7F 4B | 	byte	$9a, $c8, $0c, $5b, $7f, $7f, $52, $e7, $89, $80, $80, $cd, $4c, $7f, $7f, $4b
0dd84     D3 AD 98 88 
0dd88     82 82 BA 2F 
0dd8c     6C 7F 6A 5C 
0dd90     36 1C D4 87 | 	byte	$d3, $ad, $98, $88, $82, $82, $ba, $2f, $6c, $7f, $6a, $5c, $36, $1c, $d4, $87
0dd94     96 B8 EB 46 
0dd98     76 7F 59 F9 
0dd9c     A9 80 80 AD 
0dda0     39 7F 7F 55 | 	byte	$96, $b8, $eb, $46, $76, $7f, $59, $f9, $a9, $80, $80, $ad, $39, $7f, $7f, $55
0dda4     F1 B9 9C 8D 
0dda8     81 81 A1 18 
0ddac     63 7F 6B 51 
0ddb0     32 14 E9 9F | 	byte	$f1, $b9, $9c, $8d, $81, $81, $a1, $18, $63, $7f, $6b, $51, $32, $14, $e9, $9f
0ddb4     A2 B9 F0 2F 
0ddb8     65 70 50 FC 
0ddbc     BB 82 81 BD 
0ddc0     31 7F 7F 38 | 	byte	$a2, $b9, $f0, $2f, $65, $70, $50, $fc, $bb, $82, $81, $bd, $31, $7f, $7f, $38
0ddc4     08 D2 B3 8D 
0ddc8     80 82 A2 01 
0ddcc     55 72 7F 53 
0ddd0     32 0B E8 C4 | 	byte	$08, $d2, $b3, $8d, $80, $82, $a2, $01, $55, $72, $7f, $53, $32, $0b, $e8, $c4
0ddd4     B5 C2 F5 31 
0ddd8     54 5C 34 08 
0dddc     BB 9D 8E DC 
0dde0     3F 77 64 28 | 	byte	$b5, $c2, $f5, $31, $54, $5c, $34, $08, $bb, $9d, $8e, $dc, $3f, $77, $64, $28
0dde4     FE E8 C6 92 
0dde8     80 91 B9 F4 
0ddec     43 66 6E 56 
0ddf0     34 02 DD DC | 	byte	$fe, $e8, $c6, $92, $80, $91, $b9, $f4, $43, $66, $6e, $56, $34, $02, $dd, $dc
0ddf4     D9 D1 FB 2D 
0ddf8     42 41 23 ED 
0ddfc     BE A9 B0 F8 
0de00     52 66 38 FD | 	byte	$d9, $d1, $fb, $2d, $42, $41, $23, $ed, $be, $a9, $b0, $f8, $52, $66, $38, $fd
0de04     F4 FA DB 9A 
0de08     85 9A D5 03 
0de0c     43 52 5E 4D 
0de10     38 F6 CD EE | 	byte	$f4, $fa, $db, $9a, $85, $9a, $d5, $03, $43, $52, $5e, $4d, $38, $f6, $cd, $ee
0de14     F5 FE 07 21 
0de18     29 24 FB D1 
0de1c     BE B1 D1 20 
0de20     68 61 19 D9 | 	byte	$f5, $fe, $07, $21, $29, $24, $fb, $d1, $be, $b1, $d1, $20, $68, $61, $19, $d9
0de24     DF 03 F9 AC 
0de28     94 A4 E0 1E 
0de2c     37 48 56 40 
0de30     2C E9 C1 EB | 	byte	$df, $03, $f9, $ac, $94, $a4, $e0, $1e, $37, $48, $56, $40, $2c, $e9, $c1, $eb
0de34     FE 0E 2B 22 
0de38     28 05 E4 B9 
0de3c     BB BC F0 45 
0de40     7D 5D F4 BF | 	byte	$fe, $0e, $2b, $22, $28, $05, $e4, $b9, $bb, $bc, $f0, $45, $7d, $5d, $f4, $bf
0de44     C7 FA F9 CC 
0de48     A4 B4 DC 29 
0de4c     30 39 4D 3A 
0de50     2F DB C1 DC | 	byte	$c7, $fa, $f9, $cc, $a4, $b4, $dc, $29, $30, $39, $4d, $3a, $2f, $db, $c1, $dc
0de54     03 16 43 36 
0de58     28 F6 D5 9D 
0de5c     AD C1 16 69 
0de60     7F 6B E5 AA | 	byte	$03, $16, $43, $36, $28, $f6, $d5, $9d, $ad, $c1, $16, $69, $7f, $6b, $e5, $aa
0de64     A3 EA E3 D1 
0de68     BF D0 EB 2D 
0de6c     3A 33 44 2F 
0de70     25 C7 CC DF | 	byte	$a3, $ea, $e3, $d1, $bf, $d0, $eb, $2d, $3a, $33, $44, $2f, $25, $c7, $cc, $df
0de74     05 27 4B 4E 
0de78     2C EC BD 8D 
0de7c     95 BD 23 7F 
0de80     7F 61 E7 AC | 	byte	$05, $27, $4b, $4e, $2c, $ec, $bd, $8d, $95, $bd, $23, $7f, $7f, $61, $e7, $ac
0de84     A0 CF C4 D0 
0de88     CD ED 01 37 
0de8c     31 37 3A 37 
0de90     0A B9 BB E7 | 	byte	$a0, $cf, $c4, $d0, $cd, $ed, $01, $37, $31, $37, $3a, $37, $0a, $b9, $bb, $e7
0de94     00 34 53 59 
0de98     30 F2 AC 82 
0de9c     83 B5 2A 7F 
0dea0     7F 5F EB B6 | 	byte	$00, $34, $53, $59, $30, $f2, $ac, $82, $83, $b5, $2a, $7f, $7f, $5f, $eb, $b6
0dea4     A9 C5 A2 B7 
0dea8     D3 00 1A 3F 
0deac     39 3D 3D 3D 
0deb0     03 B2 B2 CE | 	byte	$a9, $c5, $a2, $b7, $d3, $00, $1a, $3f, $39, $3d, $3d, $3d, $03, $b2, $b2, $ce
0deb4     FE 3F 53 5B 
0deb8     2C F9 A8 80 
0debc     83 B1 3A 7F 
0dec0     7F 4C E0 B4 | 	byte	$fe, $3f, $53, $5b, $2c, $f9, $a8, $80, $83, $b1, $3a, $7f, $7f, $4c, $e0, $b4
0dec4     A7 B2 9D AB 
0dec8     DC 15 41 54 
0decc     3D 3C 38 36 
0ded0     FF B8 B6 CA | 	byte	$a7, $b2, $9d, $ab, $dc, $15, $41, $54, $3d, $3c, $38, $36, $ff, $b8, $b6, $ca
0ded4     FD 40 50 56 
0ded8     23 F6 AA 81 
0dedc     81 BB 38 7F 
0dee0     7F 30 DB B3 | 	byte	$fd, $40, $50, $56, $23, $f6, $aa, $81, $81, $bb, $38, $7f, $7f, $30, $db, $b3
0dee4     C3 AF 9D 98 
0dee8     D0 14 48 5C 
0deec     38 39 30 3D 
0def0     03 C3 B8 C5 | 	byte	$c3, $af, $9d, $98, $d0, $14, $48, $5c, $38, $39, $30, $3d, $03, $c3, $b8, $c5
0def4     F4 35 4E 52 
0def8     2A EC B3 8B 
0defc     85 CA 3B 7F 
0df00     7F 32 DA BA | 	byte	$f4, $35, $4e, $52, $2a, $ec, $b3, $8b, $85, $ca, $3b, $7f, $7f, $32, $da, $ba
0df04     CC B2 9C 95 
0df08     BF 08 4D 5D 
0df0c     41 3D 39 33 
0df10     03 CF C1 C7 | 	byte	$cc, $b2, $9c, $95, $bf, $08, $4d, $5d, $41, $3d, $39, $33, $03, $cf, $c1, $c7
0df14     F0 23 51 46 
0df18     26 EC B4 90 
0df1c     8B CD 55 7F 
0df20     7F 30 E0 C6 | 	byte	$f0, $23, $51, $46, $26, $ec, $b4, $90, $8b, $cd, $55, $7f, $7f, $30, $e0, $c6
0df24     CD BB A2 9E 
0df28     BB 01 43 5E 
0df2c     4F 3E 3E 1F 
0df30     F4 D2 D2 D1 | 	byte	$cd, $bb, $a2, $9e, $bb, $01, $43, $5e, $4f, $3e, $3e, $1f, $f4, $d2, $d2, $d1
0df34     F9 1C 4A 3F 
0df38     17 E0 AE 92 
0df3c     9E DC 59 7F 
0df40     69 27 E3 D6 | 	byte	$f9, $1c, $4a, $3f, $17, $e0, $ae, $92, $9e, $dc, $59, $7f, $69, $27, $e3, $d6
0df44     D6 BF A6 A6 
0df48     C6 FE 2E 4A 
0df4c     55 4D 45 17 
0df50     ED DC DB D8 | 	byte	$d6, $bf, $a6, $a6, $c6, $fe, $2e, $4a, $55, $4d, $45, $17, $ed, $dc, $db, $d8
0df54     FA 19 43 33 
0df58     12 DC B5 94 
0df5c     B5 F3 59 7F 
0df60     45 11 DD DB | 	byte	$fa, $19, $43, $33, $12, $dc, $b5, $94, $b5, $f3, $59, $7f, $45, $11, $dd, $db
0df64     CE C7 A9 BB 
0df68     D4 11 23 39 
0df6c     4D 44 49 13 
0df70     F3 E1 E6 EA | 	byte	$ce, $c7, $a9, $bb, $d4, $11, $23, $39, $4d, $44, $49, $13, $f3, $e1, $e6, $ea
0df74     FF 17 34 26 
0df78     01 D2 B2 9B 
0df7c     C2 12 63 7B 
0df80     34 06 D0 D8 | 	byte	$ff, $17, $34, $26, $01, $d2, $b2, $9b, $c2, $12, $63, $7b, $34, $06, $d0, $d8
0df84     C1 C7 AF C9 
0df88     E1 19 28 37 
0df8c     41 41 3A 01 
0df90     F1 DA EA 02 | 	byte	$c1, $c7, $af, $c9, $e1, $19, $28, $37, $41, $41, $3a, $01, $f1, $da, $ea, $02
0df94     13 23 29 1B 
0df98     EB C5 A1 95 
0df9c     DA 39 7A 7A 
0dfa0     2E FD CD C9 | 	byte	$13, $23, $29, $1b, $eb, $c5, $a1, $95, $da, $39, $7a, $7a, $2e, $fd, $cd, $c9
0dfa4     B7 C2 BB D1 
0dfa8     F5 1C 2D 3B 
0dfac     38 3F 31 03 
0dfb0     ED DD E1 0A | 	byte	$b7, $c2, $bb, $d1, $f5, $1c, $2d, $3b, $38, $3f, $31, $03, $ed, $dd, $e1, $0a
0dfb4     16 2F 25 14 
0dfb8     EA B7 98 92 
0dfbc     EA 46 7E 6D 
0dfc0     28 FB D0 C0 | 	byte	$16, $2f, $25, $14, $ea, $b7, $98, $92, $ea, $46, $7e, $6d, $28, $fb, $d0, $c0
0dfc4     AE C5 C7 DF 
0dfc8     00 25 2E 3D 
0dfcc     29 35 24 02 
0dfd0     F1 DE E4 10 | 	byte	$ae, $c5, $c7, $df, $00, $25, $2e, $3d, $29, $35, $24, $02, $f1, $de, $e4, $10
0dfd4     16 2E 25 1A 
0dfd8     E9 B9 97 98 
0dfdc     EA 49 74 59 
0dfe0     2B F4 DC BA | 	byte	$16, $2e, $25, $1a, $e9, $b9, $97, $98, $ea, $49, $74, $59, $2b, $f4, $dc, $ba
0dfe4     A7 BB CF EA 
0dfe8     16 2C 31 3E 
0dfec     27 2B 0B FD 
0dff0     F2 DF F2 13 | 	byte	$a7, $bb, $cf, $ea, $16, $2c, $31, $3e, $27, $2b, $0b, $fd, $f2, $df, $f2, $13
0dff4     22 30 1B 0C 
0dff8     E3 C1 9E B2 
0dffc     EA 36 61 52 
0e000     2E 00 E0 BC | 	byte	$22, $30, $1b, $0c, $e3, $c1, $9e, $b2, $ea, $36, $61, $52, $2e, $00, $e0, $bc
0e004     BA C9 DB F1 
0e008     14 21 22 24 
0e00c     10 13 0B 12 
0e010     06 EC F3 01 | 	byte	$ba, $c9, $db, $f1, $14, $21, $22, $24, $10, $13, $0b, $12, $06, $ec, $f3, $01
0e014     10 1B 18 0D 
0e018     F9 DF C1 C2 
0e01c     E4 10 40 45 
0e020     2B FD DF C8 | 	byte	$10, $1b, $18, $0d, $f9, $df, $c1, $c2, $e4, $10, $40, $45, $2b, $fd, $df, $c8
0e024     D2 E3 EB FA 
0e028     0B 14 0C 0D 
0e02c     07 0C 14 1E 
0e030     11 F3 F4 FF | 	byte	$d2, $e3, $eb, $fa, $0b, $14, $0c, $0d, $07, $0c, $14, $1e, $11, $f3, $f4, $ff
0e034     06 0E 10 0C 
0e038     00 EB CE C6 
0e03c     E2 0A 2F 41 
0e040     30 05 DD CC | 	byte	$06, $0e, $10, $0c, $00, $eb, $ce, $c6, $e2, $0a, $2f, $41, $30, $05, $dd, $cc
0e044     DD F0 F0 FD 
0e048     02 0F 05 0C 
0e04c     01 10 18 1F 
0e050     11 F5 FD FD | 	byte	$dd, $f0, $f0, $fd, $02, $0f, $05, $0c, $01, $10, $18, $1f, $11, $f5, $fd, $fd
0e054     07 09 0A 07 
0e058     FB E8 D3 C8 
0e05c     E4 0A 28 3F 
0e060     31 13 E8 D3 | 	byte	$07, $09, $0a, $07, $fb, $e8, $d3, $c8, $e4, $0a, $28, $3f, $31, $13, $e8, $d3
0e064     DC EF F1 F4 
0e068     FB 06 06 0A 
0e06c     07 10 15 1A 
0e070     0C FB 01 08 | 	byte	$dc, $ef, $f1, $f4, $fb, $06, $06, $0a, $07, $10, $15, $1a, $0c, $fb, $01, $08
0e074     05 0B 07 0C 
0e078     F7 DF CF CE 
0e07c     ED 07 28 3D 
0e080     30 10 E6 D3 | 	byte	$05, $0b, $07, $0c, $f7, $df, $cf, $ce, $ed, $07, $28, $3d, $30, $10, $e6, $d3
0e084     DA EF F0 F9 
0e088     02 09 03 0B 
0e08c     02 0D 16 16 
0e090     09 FA 03 0C | 	byte	$da, $ef, $f0, $f9, $02, $09, $03, $0b, $02, $0d, $16, $16, $09, $fa, $03, $0c
0e094     01 0A 03 14 
0e098     F3 DE CB D3 
0e09c     F4 05 21 3A 
0e0a0     32 12 E8 DB | 	byte	$01, $0a, $03, $14, $f3, $de, $cb, $d3, $f4, $05, $21, $3a, $32, $12, $e8, $db
0e0a4     DD EB EB F1 
0e0a8     FF 09 06 14 
0e0ac     0D 16 15 10 
0e0b0     FD EA FC 06 | 	byte	$dd, $eb, $eb, $f1, $ff, $09, $06, $14, $0d, $16, $15, $10, $fd, $ea, $fc, $06
0e0b4     03 09 0F 16 
0e0b8     FC E4 D5 DD 
0e0bc     F4 03 1E 31 
0e0c0     25 12 F3 E8 | 	byte	$03, $09, $0f, $16, $fc, $e4, $d5, $dd, $f4, $03, $1e, $31, $25, $12, $f3, $e8
0e0c4     DF E6 E6 E6 
0e0c8     F6 04 15 1F 
0e0cc     1B 14 0D 08 
0e0d0     F2 E4 F7 04 | 	byte	$df, $e6, $e6, $e6, $f6, $04, $15, $1f, $1b, $14, $0d, $08, $f2, $e4, $f7, $04
0e0d4     05 0F 13 16 
0e0d8     FD E3 D9 DA 
0e0dc     F7 FD 1B 2B 
0e0e0     27 10 F8 E8 | 	byte	$05, $0f, $13, $16, $fd, $e3, $d9, $da, $f7, $fd, $1b, $2b, $27, $10, $f8, $e8
0e0e4     DE E2 E6 EA 
0e0e8     F4 02 17 28 
0e0ec     1D 14 09 0D 
0e0f0     FC EB F2 FC | 	byte	$de, $e2, $e6, $ea, $f4, $02, $17, $28, $1d, $14, $09, $0d, $fc, $eb, $f2, $fc
0e0f4     FB 09 0D 0F 
0e0f8     FE EF E3 E7 
0e0fc     F7 FF 13 23 
0e100     20 13 FF EA | 	byte	$fb, $09, $0d, $0f, $fe, $ef, $e3, $e7, $f7, $ff, $13, $23, $20, $13, $ff, $ea
0e104     E1 E1 E5 E8 
0e108     ED FF 14 28 
0e10c     1C 18 07 0A 
0e110     F7 E4 EF FB | 	byte	$e1, $e1, $e5, $e8, $ed, $ff, $14, $28, $1c, $18, $07, $0a, $f7, $e4, $ef, $fb
0e114     05 14 15 0C 
0e118     F9 EB E2 E6 
0e11c     F5 FF 14 2A 
0e120     27 17 FE EE | 	byte	$05, $14, $15, $0c, $f9, $eb, $e2, $e6, $f5, $ff, $14, $2a, $27, $17, $fe, $ee
0e124     E5 E6 E3 E2 
0e128     E9 F3 10 20 
0e12c     21 1E 17 13 
0e130     F7 E0 E7 F6 | 	byte	$e5, $e6, $e3, $e2, $e9, $f3, $10, $20, $21, $1e, $17, $13, $f7, $e0, $e7, $f6
0e134     03 16 1B 13 
0e138     00 EF E0 E3 
0e13c     EA F0 10 2C 
0e140     2B 12 FE EB | 	byte	$03, $16, $1b, $13, $00, $ef, $e0, $e3, $ea, $f0, $10, $2c, $2b, $12, $fe, $eb
0e144     F0 F1 E6 E4 
0e148     E8 F8 0B 19 
0e14c     18 1F 22 17 
0e150     FB E0 E0 EA | 	byte	$f0, $f1, $e6, $e4, $e8, $f8, $0b, $19, $18, $1f, $22, $17, $fb, $e0, $e0, $ea
0e154     FC 17 1F 1B 
0e158     02 F5 E5 E9 
0e15c     E9 F2 0E 25 
0e160     1E 0A F7 EA | 	byte	$fc, $17, $1f, $1b, $02, $f5, $e5, $e9, $e9, $f2, $0e, $25, $1e, $0a, $f7, $ea
0e164     F8 00 F9 F5 
0e168     F6 00 05 08 
0e16c     FE 07 0A 11 
0e170     04 F8 EC EC | 	byte	$f8, $00, $f9, $f5, $f6, $00, $05, $08, $fe, $07, $0a, $11, $04, $f8, $ec, $ec
0e174     FA 11 17 0D 
0e178     FA F8 F6 FB 
0e17c     F4 F6 03 10 
0e180     07 FB F2 F0 | 	byte	$fa, $11, $17, $0d, $fa, $f8, $f6, $fb, $f4, $f6, $03, $10, $07, $fb, $f2, $f0
0e184     FE 11 0D 08 
0e188     05 06 08 01 
0e18c     F2 F4 FC 0B 
0e190     09 FF F0 EA | 	byte	$fe, $11, $0d, $08, $05, $06, $08, $01, $f2, $f4, $fc, $0b, $09, $ff, $f0, $ea
0e194     FB 0F 11 09 
0e198     FA FC 01 04 
0e19c     FB F5 FF 05 
0e1a0     02 FD F2 F5 | 	byte	$fb, $0f, $11, $09, $fa, $fc, $01, $04, $fb, $f5, $ff, $05, $02, $fd, $f2, $f5
0e1a4     00 15 17 0F 
0e1a8     09 07 01 FA 
0e1ac     EB ED F9 0B 
0e1b0     12 07 F4 E4 | 	byte	$00, $15, $17, $0f, $09, $07, $01, $fa, $eb, $ed, $f9, $0b, $12, $07, $f4, $e4
0e1b4     F8 08 07 03 
0e1b8     FE 06 0C 09 
0e1bc     FA F1 F8 FB 
0e1c0     FE 00 F5 FA | 	byte	$f8, $08, $07, $03, $fe, $06, $0c, $09, $fa, $f1, $f8, $fb, $fe, $00, $f5, $fa
0e1c4     06 12 19 13 
0e1c8     0A 03 FD F4 
0e1cc     EC EF FB 08 
0e1d0     10 06 F5 E6 | 	byte	$06, $12, $19, $13, $0a, $03, $fd, $f4, $ec, $ef, $fb, $08, $10, $06, $f5, $e6
0e1d4     F4 02 05 05 
0e1d8     08 0C 12 0C 
0e1dc     F8 EE EE F6 
0e1e0     FA 03 FC 02 | 	byte	$f4, $02, $05, $05, $08, $0c, $12, $0c, $f8, $ee, $ee, $f6, $fa, $03, $fc, $02
0e1e4     09 0D 0F 0D 
0e1e8     09 01 FF F4 
0e1ec     F2 F6 FF 03 
0e1f0     09 00 F8 EC | 	byte	$09, $0d, $0f, $0d, $09, $01, $ff, $f4, $f2, $f6, $ff, $03, $09, $00, $f8, $ec
0e1f4     F7 01 03 03 
0e1f8     05 0E 0F 06 
0e1fc     F8 F0 EF F4 
0e200     FB 00 01 FE | 	byte	$f7, $01, $03, $03, $05, $0e, $0f, $06, $f8, $f0, $ef, $f4, $fb, $00, $01, $fe
0e204     09 09 13 13 
0e208     0E 05 FB F2 
0e20c     EF F7 04 0B 
0e210     0C FF F1 EF | 	byte	$09, $09, $13, $13, $0e, $05, $fb, $f2, $ef, $f7, $04, $0b, $0c, $ff, $f1, $ef
0e214     F6 F9 FE 04 
0e218     0D 15 13 06 
0e21c     FB F1 EE E8 
0e220     F6 FC 02 00 | 	byte	$f6, $f9, $fe, $04, $0d, $15, $13, $06, $fb, $f1, $ee, $e8, $f6, $fc, $02, $00
0e224     06 0C 18 19 
0e228     13 07 F6 ED 
0e22c     ED FB 09 15 
0e230     10 00 EE EA | 	byte	$06, $0c, $18, $19, $13, $07, $f6, $ed, $ed, $fb, $09, $15, $10, $00, $ee, $ea
0e234     EF EC F3 00 
0e238     10 18 1B 0C 
0e23c     01 F9 F0 E6 
0e240     F0 F5 FB 05 | 	byte	$ef, $ec, $f3, $00, $10, $18, $1b, $0c, $01, $f9, $f0, $e6, $f0, $f5, $fb, $05
0e244     06 10 14 18 
0e248     10 07 F1 E5 
0e24c     ED FE 11 19 
0e250     12 00 F0 E7 | 	byte	$06, $10, $14, $18, $10, $07, $f1, $e5, $ed, $fe, $11, $19, $12, $00, $f0, $e7
0e254     EA E9 EF 03 
0e258     15 25 20 12 
0e25c     01 F3 E3 DA 
0e260     E2 F1 FD 11 | 	byte	$ea, $e9, $ef, $03, $15, $25, $20, $12, $01, $f3, $e3, $da, $e2, $f1, $fd, $11
0e264     17 1E 1E 19 
0e268     0C FB E6 DC 
0e26c     E7 FE 15 20 
0e270     16 05 EF E8 | 	byte	$17, $1e, $1e, $19, $0c, $fb, $e6, $dc, $e7, $fe, $15, $20, $16, $05, $ef, $e8
0e274     E6 E6 EC FC 
0e278     10 29 26 1B 
0e27c     07 F7 E3 DA 
0e280     D8 E7 FA 0F | 	byte	$e6, $e6, $ec, $fc, $10, $29, $26, $1b, $07, $f7, $e3, $da, $d8, $e7, $fa, $0f
0e284     1E 20 1D 15 
0e288     0A FC ED E5 
0e28c     ED 04 15 1D 
0e290     0E F7 E9 EF | 	byte	$1e, $20, $1d, $15, $0a, $fc, $ed, $e5, $ed, $04, $15, $1d, $0e, $f7, $e9, $ef
0e294     EF EE EC F3 
0e298     06 24 26 1E 
0e29c     0E FD E5 DD 
0e2a0     D9 E1 F7 16 | 	byte	$ef, $ee, $ec, $f3, $06, $24, $26, $1e, $0e, $fd, $e5, $dd, $d9, $e1, $f7, $16
0e2a4     1F 24 1A 0E 
0e2a8     07 F8 EE EB 
0e2ac     F3 06 1B 18 
0e2b0     07 EF E6 EC | 	byte	$1f, $24, $1a, $0e, $07, $f8, $ee, $eb, $f3, $06, $1b, $18, $07, $ef, $e6, $ec
0e2b4     ED EB ED F5 
0e2b8     0A 26 2C 22 
0e2bc     0E F8 E5 DD 
0e2c0     D9 E0 FB 16 | 	byte	$ed, $eb, $ed, $f5, $0a, $26, $2c, $22, $0e, $f8, $e5, $dd, $d9, $e0, $fb, $16
0e2c4     1D 1F 16 0D 
0e2c8     05 F7 EB EE 
0e2cc     F7 06 17 0F 
0e2d0     02 F1 F5 FC | 	byte	$1d, $1f, $16, $0d, $05, $f7, $eb, $ee, $f7, $06, $17, $0f, $02, $f1, $f5, $fc
0e2d4     F8 EC E8 EF 
0e2d8     04 18 24 21 
0e2dc     13 01 EC E3 
0e2e0     DD E4 F7 12 | 	byte	$f8, $ec, $e8, $ef, $04, $18, $24, $21, $13, $01, $ec, $e3, $dd, $e4, $f7, $12
0e2e4     1A 1A 1A 0E 
0e2e8     03 F2 EA F2 
0e2ec     FE 0D 16 0E 
0e2f0     01 F0 F8 F9 | 	byte	$1a, $1a, $1a, $0e, $03, $f2, $ea, $f2, $fe, $0d, $16, $0e, $01, $f0, $f8, $f9
0e2f4     F7 EB E8 EF 
0e2f8     09 11 1C 1B 
0e2fc     10 00 F1 E7 
0e300     E4 ED 00 0F | 	byte	$f7, $eb, $e8, $ef, $09, $11, $1c, $1b, $10, $00, $f1, $e7, $e4, $ed, $00, $0f
0e304     17 14 11 0D 
0e308     01 F7 ED F3 
0e30c     04 11 10 05 
0e310     F8 F4 FE FD | 	byte	$17, $14, $11, $0d, $01, $f7, $ed, $f3, $04, $11, $10, $05, $f8, $f4, $fe, $fd
0e314     F7 EA E9 F3 
0e318     0B 0F 12 14 
0e31c     10 FE F1 E5 
0e320     E5 F2 06 14 | 	byte	$f7, $ea, $e9, $f3, $0b, $0f, $12, $14, $10, $fe, $f1, $e5, $e5, $f2, $06, $14
0e324     18 11 09 0B 
0e328     01 FB F0 F4 
0e32c     05 16 0E 03 
0e330     F2 F4 FF FE | 	byte	$18, $11, $09, $0b, $01, $fb, $f0, $f4, $05, $16, $0e, $03, $f2, $f4, $ff, $fe
0e334     F7 EB F0 FC 
0e338     11 10 06 04 
0e33c     05 F7 F4 EA 
0e340     ED FA 0E 17 | 	byte	$f7, $eb, $f0, $fc, $11, $10, $06, $04, $05, $f7, $f4, $ea, $ed, $fa, $0e, $17
0e344     12 0A 02 0A 
0e348     03 FD F2 F7 
0e34c     08 16 0D FD 
0e350     EF F3 05 FD | 	byte	$12, $0a, $02, $0a, $03, $fd, $f2, $f7, $08, $16, $0d, $fd, $ef, $f3, $05, $fd
0e354     F4 EF F8 0D 
0e358     17 10 FF F6 
0e35c     F6 F0 EC EA 
0e360     F4 0B 19 18 | 	byte	$f4, $ef, $f8, $0d, $17, $10, $ff, $f6, $f6, $f0, $ec, $ea, $f4, $0b, $19, $18
0e364     0F 04 04 08 
0e368     05 FA F2 F9 
0e36c     09 14 0C FC 
0e370     F2 F4 00 FE | 	byte	$0f, $04, $04, $08, $05, $fa, $f2, $f9, $09, $14, $0c, $fc, $f2, $f4, $00, $fe
0e374     ED EE F7 12 
0e378     16 0F 01 F6 
0e37c     F1 EF E8 E8 
0e380     F9 12 21 17 | 	byte	$ed, $ee, $f7, $12, $16, $0f, $01, $f6, $f1, $ef, $e8, $e8, $f9, $12, $21, $17
0e384     0A 00 02 07 
0e388     04 FC F6 02 
0e38c     0C 0D 03 F8 
0e390     F0 FD FF FD | 	byte	$0a, $00, $02, $07, $04, $fc, $f6, $02, $0c, $0d, $03, $f8, $f0, $fd, $ff, $fd
0e394     F2 F4 FB 0E 
0e398     0E 05 FF FB 
0e39c     F5 F4 EF EC 
0e3a0     00 17 19 0A | 	byte	$f2, $f4, $fb, $0e, $0e, $05, $ff, $fb, $f5, $f4, $ef, $ec, $00, $17, $19, $0a
0e3a4     FE FC 06 0A 
0e3a8     0A 05 00 05 
0e3ac     0B 03 F8 EF 
0e3b0     F3 04 03 FD | 	byte	$fe, $fc, $06, $0a, $0a, $05, $00, $05, $0b, $03, $f8, $ef, $f3, $04, $03, $fd
0e3b4     F6 F8 01 0D 
0e3b8     08 FD FB FB 
0e3bc     F2 EF EF F1 
0e3c0     05 1C 1B 0E | 	byte	$f6, $f8, $01, $0d, $08, $fd, $fb, $fb, $f2, $ef, $ef, $f1, $05, $1c, $1b, $0e
0e3c4     FF FA 04 05 
0e3c8     08 FE 00 08 
0e3cc     12 06 F8 EA 
0e3d0     EE FF 01 F5 | 	byte	$ff, $fa, $04, $05, $08, $fe, $00, $08, $12, $06, $f8, $ea, $ee, $ff, $01, $f5
0e3d4     F2 FB 11 19 
0e3d8     0D 02 FB F9 
0e3dc     ED E8 E5 F4 
0e3e0     08 1D 18 0F | 	byte	$f2, $fb, $11, $19, $0d, $02, $fb, $f9, $ed, $e8, $e5, $f4, $08, $1d, $18, $0f
0e3e4     01 FC 04 04 
0e3e8     02 FB 03 0A 
0e3ec     13 06 FA EB 
0e3f0     F4 FD FD F0 | 	byte	$01, $fc, $04, $04, $02, $fb, $03, $0a, $13, $06, $fa, $eb, $f4, $fd, $fd, $f0
0e3f4     EE F8 11 18 
0e3f8     0F 06 03 FB 
0e3fc     EB E7 E3 F5 
0e400     08 14 0E 08 | 	byte	$ee, $f8, $11, $18, $0f, $06, $03, $fb, $eb, $e7, $e3, $f5, $08, $14, $0e, $08
0e404     05 08 10 0B 
0e408     03 F9 FF 09 
0e40c     0B FD F9 EF 
0e410     00 01 FF F3 | 	byte	$05, $08, $10, $0b, $03, $f9, $ff, $09, $0b, $fd, $f9, $ef, $00, $01, $ff, $f3
0e414     F0 F5 06 0A 
0e418     06 07 0D 04 
0e41c     F4 E8 E7 F6 
0e420     08 0A 01 01 | 	byte	$f0, $f5, $06, $0a, $06, $07, $0d, $04, $f4, $e8, $e7, $f6, $08, $0a, $01, $01
0e424     07 13 17 11 
0e428     02 FC FE 05 
0e42c     FE F5 EF F1 
0e430     03 07 03 FB | 	byte	$07, $13, $17, $11, $02, $fc, $fe, $05, $fe, $f5, $ef, $f1, $03, $07, $03, $fb
0e434     F9 FA FE FA 
0e438     FE 05 13 0A 
0e43c     FA E9 E9 FD 
0e440     0C 0D FD FA | 	byte	$f9, $fa, $fe, $fa, $fe, $05, $13, $0a, $fa, $e9, $e9, $fd, $0c, $0d, $fd, $fa
0e444     06 14 14 0B 
0e448     FC FC FF 0A 
0e44c     01 FA ED F5 
0e450     05 02 FB F7 | 	byte	$06, $14, $14, $0b, $fc, $fc, $ff, $0a, $01, $fa, $ed, $f5, $05, $02, $fb, $f7
0e454     FA 03 FF F5 
0e458     F9 03 11 0A 
0e45c     FE EF F0 FF 
0e460     09 06 F9 F8 | 	byte	$fa, $03, $ff, $f5, $f9, $03, $11, $0a, $fe, $ef, $f0, $ff, $09, $06, $f9, $f8
0e464     0A 19 1A 0F 
0e468     FA F6 FA 03 
0e46c     FB FB F3 FC 
0e470     0A 06 FD F8 | 	byte	$0a, $19, $1a, $0f, $fa, $f6, $fa, $03, $fb, $fb, $f3, $fc, $0a, $06, $fd, $f8
0e474     F6 04 FE F3 
0e478     F5 02 0A 03 
0e47c     FB F2 FA 05 
0e480     0E 04 FC F9 | 	byte	$f6, $04, $fe, $f3, $f5, $02, $0a, $03, $fb, $f2, $fa, $05, $0e, $04, $fc, $f9
0e484     09 15 15 0B 
0e488     F8 F8 FB 02 
0e48c     FC FE F5 00 
0e490     05 06 FA F6 | 	byte	$09, $15, $15, $0b, $f8, $f8, $fb, $02, $fc, $fe, $f5, $00, $05, $06, $fa, $f6
0e494     F7 06 03 F9 
0e498     F9 03 04 FD 
0e49c     F6 F0 FF 05 
0e4a0     0F 04 FF FE | 	byte	$f7, $06, $03, $f9, $f9, $03, $04, $fd, $f6, $f0, $ff, $05, $0f, $04, $ff, $fe
0e4a4     0F 14 11 01 
0e4a8     F3 F4 FC FF 
0e4ac     FE 01 01 0C 
0e4b0     0B 04 F8 F1 | 	byte	$0f, $14, $11, $01, $f3, $f4, $fc, $ff, $fe, $01, $01, $0c, $0b, $04, $f8, $f1
0e4b4     F1 FD FD FE 
0e4b8     FE 09 04 FC 
0e4bc     F7 F5 00 03 
0e4c0     02 F9 FE 08 | 	byte	$f1, $fd, $fd, $fe, $fe, $09, $04, $fc, $f7, $f5, $00, $03, $02, $f9, $fe, $08
0e4c4     16 15 15 F9 
0e4c8     F4 EF FB FA 
0e4cc     01 02 09 0F 
0e4d0     0B 01 F8 EF | 	byte	$16, $15, $15, $f9, $f4, $ef, $fb, $fa, $01, $02, $09, $0f, $0b, $01, $f8, $ef
0e4d4     F1 F7 F7 02 
0e4d8     04 0B 00 FE 
0e4dc     F9 02 01 FF 
0e4e0     F8 F4 FF 11 | 	byte	$f1, $f7, $f7, $02, $04, $0b, $00, $fe, $f9, $02, $01, $ff, $f8, $f4, $ff, $11
0e4e4     1F 1C 11 F7 
0e4e8     EF E9 F3 F4 
0e4ec     03 03 11 14 
0e4f0     0E 00 FA F1 | 	byte	$1f, $1c, $11, $f7, $ef, $e9, $f3, $f4, $03, $03, $11, $14, $0e, $00, $fa, $f1
0e4f4     F2 F0 F3 00 
0e4f8     0B 0D 02 03 
0e4fc     FA 03 FC FA 
0e500     EB EE FC 17 | 	byte	$f2, $f0, $f3, $00, $0b, $0d, $02, $03, $fa, $03, $fc, $fa, $eb, $ee, $fc, $17
0e504     25 26 14 F9 
0e508     EE EA EE EC 
0e50c     FA 00 15 1B 
0e510     17 02 F6 F1 | 	byte	$25, $26, $14, $f9, $ee, $ea, $ee, $ec, $fa, $00, $15, $1b, $17, $02, $f6, $f1
0e514     F1 ED EE 01 
0e518     0F 0E 04 FD 
0e51c     F5 FF FA F9 
0e520     E9 EC 00 1E | 	byte	$f1, $ed, $ee, $01, $0f, $0e, $04, $fd, $f5, $ff, $fa, $f9, $e9, $ec, $00, $1e
0e524     2B 2A 11 F7 
0e528     ED EB EB E6 
0e52c     F3 03 18 21 
0e530     15 02 F8 F8 | 	byte	$2b, $2a, $11, $f7, $ed, $eb, $eb, $e6, $f3, $03, $18, $21, $15, $02, $f8, $f8
0e534     FB EE EF F8 
0e538     0B 06 01 F9 
0e53c     F6 FF 01 FD 
0e540     EF F0 01 1B | 	byte	$fb, $ee, $ef, $f8, $0b, $06, $01, $f9, $f6, $ff, $01, $fd, $ef, $f0, $01, $1b
0e544     29 24 0E F9 
0e548     EF F0 E8 EC 
0e54c     F0 07 1C 20 
0e550     16 00 F7 F8 | 	byte	$29, $24, $0e, $f9, $ef, $f0, $e8, $ec, $f0, $07, $1c, $20, $16, $00, $f7, $f8
0e554     FB F2 F2 F6 
0e558     05 06 04 FA 
0e55c     F9 FA FB F5 
0e560     EB F2 05 20 | 	byte	$fb, $f2, $f2, $f6, $05, $06, $04, $fa, $f9, $fa, $fb, $f5, $eb, $f2, $05, $20
0e564     2C 25 0D FB 
0e568     EC EC E0 EA 
0e56c     F1 08 1E 28 
0e570     16 03 F0 EF | 	byte	$2c, $25, $0d, $fb, $ec, $ec, $e0, $ea, $f1, $08, $1e, $28, $16, $03, $f0, $ef
0e574     F0 EE F3 FD 
0e578     0C 0C 0B FD 
0e57c     FD F5 F6 F0 
0e580     EB F5 0C 1F | 	byte	$f0, $ee, $f3, $fd, $0c, $0c, $0b, $fd, $fd, $f5, $f6, $f0, $eb, $f5, $0c, $1f
0e584     2B 1C 06 FB 
0e588     F0 F0 E3 EB 
0e58c     F5 08 1A 21 
0e590     15 08 F7 F0 | 	byte	$2b, $1c, $06, $fb, $f0, $f0, $e3, $eb, $f5, $08, $1a, $21, $15, $08, $f7, $f0
0e594     EC EE F3 FE 
0e598     06 0A 09 01 
0e59c     00 F4 F5 ED 
0e5a0     F1 F6 10 20 | 	byte	$ec, $ee, $f3, $fe, $06, $0a, $09, $01, $00, $f4, $f5, $ed, $f1, $f6, $10, $20
0e5a4     28 1A 06 F9 
0e5a8     F5 EC E2 E6 
0e5ac     F1 08 1A 1C 
0e5b0     17 0E 01 F1 | 	byte	$28, $1a, $06, $f9, $f5, $ec, $e2, $e6, $f1, $08, $1a, $1c, $17, $0e, $01, $f1
0e5b4     E3 E7 F0 01 
0e5b8     08 0D 0B 06 
0e5bc     FE F5 F0 E8 
0e5c0     F0 FC 16 1E | 	byte	$e3, $e7, $f0, $01, $08, $0d, $0b, $06, $fe, $f5, $f0, $e8, $f0, $fc, $16, $1e
0e5c4     24 14 06 FA 
0e5c8     F8 EA E7 E8 
0e5cc     F3 0B 14 13 
0e5d0     0F 0F 09 FF | 	byte	$24, $14, $06, $fa, $f8, $ea, $e7, $e8, $f3, $0b, $14, $13, $0f, $0f, $09, $ff
0e5d4     EA EA F0 01 
0e5d8     06 09 04 02 
0e5dc     02 FC F5 E9 
0e5e0     EC FA 0F 14 | 	byte	$ea, $ea, $f0, $01, $06, $09, $04, $02, $02, $fc, $f5, $e9, $ec, $fa, $0f, $14
0e5e4     1B 0E 0D 03 
0e5e8     FE EE E9 EC 
0e5ec     F7 0D 12 09 
0e5f0     09 07 08 01 | 	byte	$1b, $0e, $0d, $03, $fe, $ee, $e9, $ec, $f7, $0d, $12, $09, $09, $07, $08, $01
0e5f4     ED E8 F0 02 
0e5f8     08 09 FE 02 
0e5fc     FE 00 F9 EF 
0e600     EE 02 14 1A | 	byte	$ed, $e8, $f0, $02, $08, $09, $fe, $02, $fe, $00, $f9, $ef, $ee, $02, $14, $1a
0e604     1A 0C 08 FE 
0e608     F5 E2 E5 F0 
0e60c     06 14 1A 06 
0e610     09 01 04 FA | 	byte	$1a, $0c, $08, $fe, $f5, $e2, $e5, $f0, $06, $14, $1a, $06, $09, $01, $04, $fa
0e614     EC E6 F1 03 
0e618     0D 0C 02 04 
0e61c     F9 FE F1 F1 
0e620     F3 09 14 1B | 	byte	$ec, $e6, $f1, $03, $0d, $0c, $02, $04, $f9, $fe, $f1, $f1, $f3, $09, $14, $1b
0e624     16 0A 06 FD 
0e628     EE E0 EA F4 
0e62c     0E 18 19 0B 
0e630     08 00 FB F0 | 	byte	$16, $0a, $06, $fd, $ee, $e0, $ea, $f4, $0e, $18, $19, $0b, $08, $00, $fb, $f0
0e634     E9 E7 F3 05 
0e638     0F 10 08 07 
0e63c     F9 F2 EA ED 
0e640     F5 0B 14 1F | 	byte	$e9, $e7, $f3, $05, $0f, $10, $08, $07, $f9, $f2, $ea, $ed, $f5, $0b, $14, $1f
0e644     18 0F 02 F6 
0e648     E4 E0 E8 F9 
0e64c     10 1F 1C 15 
0e650     0B 02 F6 E6 | 	byte	$18, $0f, $02, $f6, $e4, $e0, $e8, $f9, $10, $1f, $1c, $15, $0b, $02, $f6, $e6
0e654     E2 E8 FB 08 
0e658     14 0E 0E 03 
0e65c     F8 ED E5 EA 
0e660     FC 0E 18 23 | 	byte	$e2, $e8, $fb, $08, $14, $0e, $0e, $03, $f8, $ed, $e5, $ea, $fc, $0e, $18, $23
0e664     1E 13 00 F2 
0e668     DE DF E8 00 
0e66c     14 1E 14 10 
0e670     09 FE F1 E1 | 	byte	$1e, $13, $00, $f2, $de, $df, $e8, $00, $14, $1e, $14, $10, $09, $fe, $f1, $e1
0e674     E2 EC 04 0A 
0e678     16 0F 0E FE 
0e67c     F6 EE E6 EE 
0e680     00 12 18 1B | 	byte	$e2, $ec, $04, $0a, $16, $0f, $0e, $fe, $f6, $ee, $e6, $ee, $00, $12, $18, $1b
0e684     15 10 FC F2 
0e688     DF E6 ED 08 
0e68c     16 1A 12 10 
0e690     0A FD ED DC | 	byte	$15, $10, $fc, $f2, $df, $e6, $ed, $08, $16, $1a, $12, $10, $0a, $fd, $ed, $dc
0e694     E0 F0 0A 0F 
0e698     1B 12 13 FA 
0e69c     EC E3 E0 ED 
0e6a0     03 17 25 20 | 	byte	$e0, $f0, $0a, $0f, $1b, $12, $13, $fa, $ec, $e3, $e0, $ed, $03, $17, $25, $20
0e6a4     15 0B F4 E8 
0e6a8     DA E9 F5 0E 
0e6ac     19 1A 14 0F 
0e6b0     06 F8 E4 DE | 	byte	$15, $0b, $f4, $e8, $da, $e9, $f5, $0e, $19, $1a, $14, $0f, $06, $f8, $e4, $de
0e6b4     E1 F5 0B 14 
0e6b8     1A 12 0C F4 
0e6bc     E8 E0 E6 F3 
0e6c0     0D 19 28 1E | 	byte	$e1, $f5, $0b, $14, $1a, $12, $0c, $f4, $e8, $e0, $e6, $f3, $0d, $19, $28, $1e
0e6c4     13 01 EF E0 
0e6c8     DF F0 01 14 
0e6cc     19 18 0E 08 
0e6d0     FC F5 E5 E4 | 	byte	$13, $01, $ef, $e0, $df, $f0, $01, $14, $19, $18, $0e, $08, $fc, $f5, $e5, $e4
0e6d4     E9 FF 09 15 
0e6d8     16 12 06 F2 
0e6dc     E6 DF EA F9 
0e6e0     14 1B 24 1B | 	byte	$e9, $ff, $09, $15, $16, $12, $06, $f2, $e6, $df, $ea, $f9, $14, $1b, $24, $1b
0e6e4     0F F5 EB DD 
0e6e8     E5 F7 09 16 
0e6ec     1A 16 0F 06 
0e6f0     FD F3 E8 E7 | 	byte	$0f, $f5, $eb, $dd, $e5, $f7, $09, $16, $1a, $16, $0f, $06, $fd, $f3, $e8, $e7
0e6f4     ED 00 04 11 
0e6f8     11 0E 01 F5 
0e6fc     EB E5 EE 02 
0e700     11 1E 1D 16 | 	byte	$ed, $00, $04, $11, $11, $0e, $01, $f5, $eb, $e5, $ee, $02, $11, $1e, $1d, $16
0e704     0D F2 EB DF 
0e708     E9 F8 06 11 
0e70c     16 14 15 09 
0e710     FF F3 EA E6 | 	byte	$0d, $f2, $eb, $df, $e9, $f8, $06, $11, $16, $14, $15, $09, $ff, $f3, $ea, $e6
0e714     EE FE 03 10 
0e718     0D 0F FD F0 
0e71c     E8 E9 F0 08 
0e720     10 1C 18 12 | 	byte	$ee, $fe, $03, $10, $0d, $0f, $fd, $f0, $e8, $e9, $f0, $08, $10, $1c, $18, $12
0e724     0B F4 EE E2 
0e728     ED F6 07 0C 
0e72c     12 11 15 0A 
0e730     FE F0 EC EA | 	byte	$0b, $f4, $ee, $e2, $ed, $f6, $07, $0c, $12, $11, $15, $0a, $fe, $f0, $ec, $ea
0e734     F6 01 06 0F 
0e738     0C 0D FB EF 
0e73c     E7 EE FB 11 
0e740     16 17 12 07 | 	byte	$f6, $01, $06, $0f, $0c, $0d, $fb, $ef, $e7, $ee, $fb, $11, $16, $17, $12, $07
0e744     FC F0 E7 E8 
0e748     F6 02 11 15 
0e74c     11 0D 0A 03 
0e750     F7 EA EC EF | 	byte	$fc, $f0, $e7, $e8, $f6, $02, $11, $15, $11, $0d, $0a, $03, $f7, $ea, $ec, $ef
0e754     01 05 0B 0D 
0e758     09 06 F7 E9 
0e75c     E6 F3 06 1C 
0e760     1D 16 09 FF | 	byte	$01, $05, $0b, $0d, $09, $06, $f7, $e9, $e6, $f3, $06, $1c, $1d, $16, $09, $ff
0e764     EF EA E5 F1 
0e768     01 0E 13 14 
0e76c     0D 0B 01 FB 
0e770     F3 E8 EE F4 | 	byte	$ef, $ea, $e5, $f1, $01, $0e, $13, $14, $0d, $0b, $01, $fb, $f3, $e8, $ee, $f4
0e774     02 06 11 11 
0e778     10 FF EF E4 
0e77c     E5 F0 0A 1F 
0e780     25 1C 09 F7 | 	byte	$02, $06, $11, $11, $10, $ff, $ef, $e4, $e5, $f0, $0a, $1f, $25, $1c, $09, $f7
0e784     E1 E1 E2 F4 
0e788     07 1B 19 18 
0e78c     0A 07 F9 F6 
0e790     F3 ED F4 FA | 	byte	$e1, $e1, $e2, $f4, $07, $1b, $19, $18, $0a, $07, $f9, $f6, $f3, $ed, $f4, $fa
0e794     02 04 0F 0E 
0e798     13 FC F3 EA 
0e79c     E9 F0 08 1B 
0e7a0     24 1C 08 F6 | 	byte	$02, $04, $0f, $0e, $13, $fc, $f3, $ea, $e9, $f0, $08, $1b, $24, $1c, $08, $f6
0e7a4     E2 E0 DE F7 
0e7a8     09 1F 1F 15 
0e7ac     03 FC F3 F0 
0e7b0     F2 F5 FA 01 | 	byte	$e2, $e0, $de, $f7, $09, $1f, $1f, $15, $03, $fc, $f3, $f0, $f2, $f5, $fa, $01
0e7b4     04 03 11 0E 
0e7b8     12 FD F1 E9 
0e7bc     EA F2 07 18 
0e7c0     21 19 05 F3 | 	byte	$04, $03, $11, $0e, $12, $fd, $f1, $e9, $ea, $f2, $07, $18, $21, $19, $05, $f3
0e7c4     E6 DF E2 F8 
0e7c8     0E 20 24 16 
0e7cc     04 F7 EE ED 
0e7d0     ED FA FD 04 | 	byte	$e6, $df, $e2, $f8, $0e, $20, $24, $16, $04, $f7, $ee, $ed, $ed, $fa, $fd, $04
0e7d4     02 07 0D 0F 
0e7d8     0E FB EE EC 
0e7dc     F1 FD 10 19 
0e7e0     19 0D 01 EB | 	byte	$02, $07, $0d, $0f, $0e, $fb, $ee, $ec, $f1, $fd, $10, $19, $19, $0d, $01, $eb
0e7e4     E5 E0 EA F9 
0e7e8     0F 1F 28 1C 
0e7ec     07 F7 EC E8 
0e7f0     EB F8 FC 01 | 	byte	$e5, $e0, $ea, $f9, $0f, $1f, $28, $1c, $07, $f7, $ec, $e8, $eb, $f8, $fc, $01
0e7f4     02 0A 0E 12 
0e7f8     07 F7 EC E5 
0e7fc     F0 03 15 1B 
0e800     16 08 FD EB | 	byte	$02, $0a, $0e, $12, $07, $f7, $ec, $e5, $f0, $03, $15, $1b, $16, $08, $fd, $eb
0e804     E6 E3 EC FD 
0e808     10 1F 22 1A 
0e80c     0B F8 F0 EE 
0e810     EF F6 FD FE | 	byte	$e6, $e3, $ec, $fd, $10, $1f, $22, $1a, $0b, $f8, $f0, $ee, $ef, $f6, $fd, $fe
0e814     FD 06 0D 13 
0e818     05 F6 ED E7 
0e81c     F2 09 19 20 
0e820     15 06 F9 E9 | 	byte	$fd, $06, $0d, $13, $05, $f6, $ed, $e7, $f2, $09, $19, $20, $15, $06, $f9, $e9
0e824     E3 E1 EF 01 
0e828     15 20 20 11 
0e82c     06 F4 EC EA 
0e830     F0 F7 02 05 | 	byte	$e3, $e1, $ef, $01, $15, $20, $20, $11, $06, $f4, $ec, $ea, $f0, $f7, $02, $05
0e834     03 0C 0D 15 
0e838     FD EF E5 E8 
0e83c     F5 10 1A 22 
0e840     15 06 F4 E7 | 	byte	$03, $0c, $0d, $15, $fd, $ef, $e5, $e8, $f5, $10, $1a, $22, $15, $06, $f4, $e7
0e844     E3 E2 F3 05 
0e848     18 1F 1E 0F 
0e84c     09 F9 ED E8 
0e850     EF F4 FF 03 | 	byte	$e3, $e2, $f3, $05, $18, $1f, $1e, $0f, $09, $f9, $ed, $e8, $ef, $f4, $ff, $03
0e854     04 0E 11 14 
0e858     01 EF E4 E9 
0e85c     F8 0F 17 1C 
0e860     12 08 F5 EA | 	byte	$04, $0e, $11, $14, $01, $ef, $e4, $e9, $f8, $0f, $17, $1c, $12, $08, $f5, $ea
0e864     E3 E4 F5 08 
0e868     17 1C 14 0D 
0e86c     06 FB F1 E9 
0e870     F2 F7 FE FF | 	byte	$e3, $e4, $f5, $08, $17, $1c, $14, $0d, $06, $fb, $f1, $e9, $f2, $f7, $fe, $ff
0e874     07 0F 14 0B 
0e878     FF EE E9 EE 
0e87c     FD 0E 15 16 
0e880     0F 08 F9 EC | 	byte	$07, $0f, $14, $0b, $ff, $ee, $e9, $ee, $fd, $0e, $15, $16, $0f, $08, $f9, $ec
0e884     E2 EA F8 09 
0e888     12 18 0E 0B 
0e88c     03 FF F6 F0 
0e890     F2 F7 F9 FA | 	byte	$e2, $ea, $f8, $09, $12, $18, $0e, $0b, $03, $ff, $f6, $f0, $f2, $f7, $f9, $fa
0e894     07 0F 18 07 
0e898     FA E9 E9 F4 
0e89c     04 0E 14 12 
0e8a0     11 0A FB ED | 	byte	$07, $0f, $18, $07, $fa, $e9, $e9, $f4, $04, $0e, $14, $12, $11, $0a, $fb, $ed
0e8a4     E2 EE FB 09 
0e8a8     0D 11 0B 0A 
0e8ac     06 FE F8 F3 
0e8b0     F1 F7 F7 F6 | 	byte	$e2, $ee, $fb, $09, $0d, $11, $0b, $0a, $06, $fe, $f8, $f3, $f1, $f7, $f7, $f6
0e8b4     0A 11 19 06 
0e8b8     F5 EC F0 FC 
0e8bc     08 0E 0F 0E 
0e8c0     0D 03 F7 EF | 	byte	$0a, $11, $19, $06, $f5, $ec, $f0, $fc, $08, $0e, $0f, $0e, $0d, $03, $f7, $ef
0e8c4     E8 F3 FB 05 
0e8c8     05 0D 0C 0E 
0e8cc     0B 04 FD F7 
0e8d0     EE EE F1 F7 | 	byte	$e8, $f3, $fb, $05, $05, $0d, $0c, $0e, $0b, $04, $fd, $f7, $ee, $ee, $f1, $f7
0e8d4     0A 14 19 08 
0e8d8     F6 EA F1 F8 
0e8dc     09 0F 12 0F 
0e8e0     0C FF F5 E9 | 	byte	$0a, $14, $19, $08, $f6, $ea, $f1, $f8, $09, $0f, $12, $0f, $0c, $ff, $f5, $e9
0e8e4     E8 F3 F9 04 
0e8e8     09 0F 0F 10 
0e8ec     09 02 F8 F6 
0e8f0     EF F1 F1 FD | 	byte	$e8, $f3, $f9, $04, $09, $0f, $0f, $10, $09, $02, $f8, $f6, $ef, $f1, $f1, $fd
0e8f4     0A 18 13 01 
0e8f8     F4 EB F5 FA 
0e8fc     0D 14 14 0E 
0e900     08 F8 F0 E8 | 	byte	$0a, $18, $13, $01, $f4, $eb, $f5, $fa, $0d, $14, $14, $0e, $08, $f8, $f0, $e8
0e904     F1 FA 00 01 
0e908     06 0A 0E 0E 
0e90c     0B 05 FB F9 
0e910     F1 EE EA FA | 	byte	$f1, $fa, $00, $01, $06, $0a, $0e, $0e, $0b, $05, $fb, $f9, $f1, $ee, $ea, $fa
0e914     05 15 0F 03 
0e918     F9 F7 FA 02 
0e91c     09 0F 0E 09 
0e920     01 F6 F4 EB | 	byte	$05, $15, $0f, $03, $f9, $f7, $fa, $02, $09, $0f, $0e, $09, $01, $f6, $f4, $eb
0e924     F7 FE 02 FD 
0e928     01 04 0B 0A 
0e92c     0A 06 FF FA 
0e930     F5 F0 EB FB | 	byte	$f7, $fe, $02, $fd, $01, $04, $0b, $0a, $0a, $06, $ff, $fa, $f5, $f0, $eb, $fb
0e934     06 10 0A FF 
0e938     FB FD FE 02 
0e93c     04 06 09 0A 
0e940     05 FD F7 F2 | 	byte	$06, $10, $0a, $ff, $fb, $fd, $fe, $02, $04, $06, $09, $0a, $05, $fd, $f7, $f2
0e944     F7 FC FE FA 
0e948     FE 05 0B 0D 
0e94c     0A 08 05 FE 
0e950     F6 EC EA F8 | 	byte	$f7, $fc, $fe, $fa, $fe, $05, $0b, $0d, $0a, $08, $05, $fe, $f6, $ec, $ea, $f8
0e954     02 0B 05 01 
0e958     00 08 08 06 
0e95c     FE FD FC 07 
0e960     03 02 FB FA | 	byte	$02, $0b, $05, $01, $00, $08, $08, $06, $fe, $fd, $fc, $07, $03, $02, $fb, $fa
0e964     FC FC F8 F4 
0e968     F8 03 10 12 
0e96c     0F 06 07 FC 
0e970     F4 EB ED F8 | 	byte	$fc, $fc, $f8, $f4, $f8, $03, $10, $12, $0f, $06, $07, $fc, $f4, $eb, $ed, $f8
0e974     05 09 FF FB 
0e978     FD 07 0B 0B 
0e97c     00 FE FD 07 
0e980     05 04 FF 00 | 	byte	$05, $09, $ff, $fb, $fd, $07, $0b, $0b, $00, $fe, $fd, $07, $05, $04, $ff, $00
0e984     02 F8 F4 F0 
0e988     F5 FF 0B 0E 
0e98c     0C 05 09 02 
0e990     FA EF F3 F8 | 	byte	$02, $f8, $f4, $f0, $f5, $ff, $0b, $0e, $0c, $05, $09, $02, $fa, $ef, $f3, $f8
0e994     01 02 FB FC 
0e998     04 0C 0F 07 
0e99c     FF F9 FA 02 
0e9a0     02 05 05 06 | 	byte	$01, $02, $fb, $fc, $04, $0c, $0f, $07, $ff, $f9, $fa, $02, $02, $05, $05, $06
0e9a4     07 F8 ED EE 
0e9a8     F4 02 08 0D 
0e9ac     0C 08 09 07 
0e9b0     FD F2 F5 F9 | 	byte	$07, $f8, $ed, $ee, $f4, $02, $08, $0d, $0c, $08, $09, $07, $fd, $f2, $f5, $f9
0e9b4     FE FA F9 FA 
0e9b8     07 0C 12 07 
0e9bc     00 F6 F6 F8 
0e9c0     FA 03 08 0F | 	byte	$fe, $fa, $f9, $fa, $07, $0c, $12, $07, $00, $f6, $f6, $f8, $fa, $03, $08, $0f
0e9c4     0B FF EF F0 
0e9c8     F3 FD 02 08 
0e9cc     0A 0B 09 07 
0e9d0     01 F7 FA FC | 	byte	$0b, $ff, $ef, $f0, $f3, $fd, $02, $08, $0a, $0b, $09, $07, $01, $f7, $fa, $fc
0e9d4     FF F5 F4 F6 
0e9d8     04 0E 12 0E 
0e9dc     05 FB F8 F6 
0e9e0     F8 FD 05 0C | 	byte	$ff, $f5, $f4, $f6, $04, $0e, $12, $0e, $05, $fb, $f8, $f6, $f8, $fd, $05, $0c
0e9e4     05 00 F6 F3 
0e9e8     FA 01 05 07 
0e9ec     05 08 04 01 
0e9f0     FC FB 00 02 | 	byte	$05, $00, $f6, $f3, $fa, $01, $05, $07, $05, $08, $04, $01, $fc, $fb, $00, $02
0e9f4     FF F3 ED F5 
0e9f8     02 0E 15 13 
0e9fc     0B 00 F9 F1 
0ea00     F6 FB 06 0C | 	byte	$ff, $f3, $ed, $f5, $02, $0e, $15, $13, $0b, $00, $f9, $f1, $f6, $fb, $06, $0c
0ea04     05 00 FA F5 
0ea08     FA FC 00 01 
0ea0c     03 0C 06 01 
0ea10     F8 FC 02 02 | 	byte	$05, $00, $fa, $f5, $fa, $fc, $00, $01, $03, $0c, $06, $01, $f8, $fc, $02, $02
0ea14     FC F3 F2 FB 
0ea18     03 09 12 0F 
0ea1c     0D 03 F9 F0 
0ea20     F5 FB 05 0A | 	byte	$fc, $f3, $f2, $fb, $03, $09, $12, $0f, $0d, $03, $f9, $f0, $f5, $fb, $05, $0a
0ea24     02 FE FD FC 
0ea28     FD FE FD 00 
0ea2c     00 07 06 02 
0ea30     F9 00 03 03 | 	byte	$02, $fe, $fd, $fc, $fd, $fe, $fd, $00, $00, $07, $06, $02, $f9, $00, $03, $03
0ea34     FB F4 F3 FB 
0ea38     06 0C 11 0F 
0ea3c     09 00 F7 F1 
0ea40     F3 FB 04 0A | 	byte	$fb, $f4, $f3, $fb, $06, $0c, $11, $0f, $09, $00, $f7, $f1, $f3, $fb, $04, $0a
0ea44     07 02 01 00 
0ea48     FE FB F9 FC 
0ea4c     03 04 04 FE 
0ea50     F8 00 02 03 | 	byte	$07, $02, $01, $00, $fe, $fb, $f9, $fc, $03, $04, $04, $fe, $f8, $00, $02, $03
0ea54     FB F5 F4 FB 
0ea58     05 0F 10 0E 
0ea5c     07 05 FB F7 
0ea60     F3 F8 FF 04 | 	byte	$fb, $f5, $f4, $fb, $05, $0f, $10, $0e, $07, $05, $fb, $f7, $f3, $f8, $ff, $04
0ea64     03 00 03 06 
0ea68     06 FE FB F9 
0ea6c     06 05 02 FA 
0ea70     F6 FD 02 03 | 	byte	$03, $00, $03, $06, $06, $fe, $fb, $f9, $06, $05, $02, $fa, $f6, $fd, $02, $03
0ea74     FB F7 F5 FE 
0ea78     07 0F 0B 0B 
0ea7c     09 08 01 FA 
0ea80     F5 F6 FC FB | 	byte	$fb, $f7, $f5, $fe, $07, $0f, $0b, $0b, $09, $08, $01, $fa, $f5, $f6, $fc, $fb
0ea84     FC FC 03 07 
0ea88     08 02 FE FC 
0ea8c     05 05 FB F2 
0ea90     F4 FC 02 06 | 	byte	$fc, $fc, $03, $07, $08, $02, $fe, $fc, $05, $05, $fb, $f2, $f4, $fc, $02, $06
0ea94     FF FC FD 03 
0ea98     07 06 02 04 
0ea9c     09 0D 07 FF 
0eaa0     FB F6 F6 EF | 	byte	$ff, $fc, $fd, $03, $07, $06, $02, $04, $09, $0d, $07, $ff, $fb, $f6, $f6, $ef
0eaa4     F1 FA 06 0D 
0eaa8     0D 0A 05 02 
0eaac     03 01 F6 EB 
0eab0     F1 FA 03 03 | 	byte	$f1, $fa, $06, $0d, $0d, $0a, $05, $02, $03, $01, $f6, $eb, $f1, $fa, $03, $03
0eab4     00 FE 05 07 
0eab8     0B 04 FF 01 
0eabc     08 0A 06 00 
0eac0     FE FC F6 EF | 	byte	$00, $fe, $05, $07, $0b, $04, $ff, $01, $08, $0a, $06, $00, $fe, $fc, $f6, $ef
0eac4     EB F7 06 10 
0eac8     11 0B 05 04 
0eacc     03 FC F1 E8 
0ead0     F1 FB 04 02 | 	byte	$eb, $f7, $06, $10, $11, $0b, $05, $04, $03, $fc, $f1, $e8, $f1, $fb, $04, $02
0ead4     FE FF 06 0A 
0ead8     09 00 FA FF 
0eadc     0A 10 0C 06 
0eae0     03 FF F3 E8 | 	byte	$fe, $ff, $06, $0a, $09, $00, $fa, $ff, $0a, $10, $0c, $06, $03, $ff, $f3, $e8
0eae4     E1 EF 05 15 
0eae8     19 11 09 05 
0eaec     02 F6 EA E5 
0eaf0     F0 FD 09 07 | 	byte	$e1, $ef, $05, $15, $19, $11, $09, $05, $02, $f6, $ea, $e5, $f0, $fd, $09, $07
0eaf4     03 02 06 07 
0eaf8     04 FA F7 FE 
0eafc     0A 12 13 0B 
0eb00     04 FE F1 E6 | 	byte	$03, $02, $06, $07, $04, $fa, $f7, $fe, $0a, $12, $13, $0b, $04, $fe, $f1, $e6
0eb04     E2 EE 03 15 
0eb08     18 14 0B 08 
0eb0c     01 F7 E8 E8 
0eb10     F0 FE 0A 08 | 	byte	$e2, $ee, $03, $15, $18, $14, $0b, $08, $01, $f7, $e8, $e8, $f0, $fe, $0a, $08
0eb14     06 02 05 02 
0eb18     FD F6 F9 00 
0eb1c     0E 11 13 0C 
0eb20     05 FF EE E4 | 	byte	$06, $02, $05, $02, $fd, $f6, $f9, $00, $0e, $11, $13, $0c, $05, $ff, $ee, $e4
0eb24     E3 F2 01 13 
0eb28     16 15 0E 08 
0eb2c     00 F3 E5 E8 
0eb30     F1 00 09 0B | 	byte	$e3, $f2, $01, $13, $16, $15, $0e, $08, $00, $f3, $e5, $e8, $f1, $00, $09, $0b
0eb34     0A 09 05 FD 
0eb38     F5 F1 F6 01 
0eb3c     10 12 11 0D 
0eb40     08 FD EF E2 | 	byte	$0a, $09, $05, $fd, $f5, $f1, $f6, $01, $10, $12, $11, $0d, $08, $fd, $ef, $e2
0eb44     E6 F5 05 10 
0eb48     16 15 11 09 
0eb4c     FC EC E6 EC 
0eb50     F5 04 05 08 | 	byte	$e6, $f5, $05, $10, $16, $15, $11, $09, $fc, $ec, $e6, $ec, $f5, $04, $05, $08
0eb54     09 08 02 F8 
0eb58     F1 F3 FC 0A 
0eb5c     0F 13 0E 0C 
0eb60     0A FB F2 E7 | 	byte	$09, $08, $02, $f8, $f1, $f3, $fc, $0a, $0f, $13, $0e, $0c, $0a, $fb, $f2, $e7
0eb64     E9 F6 05 09 
0eb68     10 15 14 09 
0eb6c     F8 E5 E1 EA 
0eb70     FA 08 0B 0C | 	byte	$e9, $f6, $05, $09, $10, $15, $14, $09, $f8, $e5, $e1, $ea, $fa, $08, $0b, $0c
0eb74     0C 0A 01 F4 
0eb78     EB F0 FF 0B 
0eb7c     10 0F 0C 0C 
0eb80     0C FE F2 E7 | 	byte	$0c, $0a, $01, $f4, $eb, $f0, $ff, $0b, $10, $0f, $0c, $0c, $0c, $fe, $f2, $e7
0eb84     EA F5 03 08 
0eb88     0E 15 19 0E 
0eb8c     F8 E2 DE E8 
0eb90     FA 09 0B 0E | 	byte	$ea, $f5, $03, $08, $0e, $15, $19, $0e, $f8, $e2, $de, $e8, $fa, $09, $0b, $0e
0eb94     11 12 05 F5 
0eb98     E9 EE FC 0B 
0eb9c     0E 0B 0A 0B 
0eba0     0A FD F0 E7 | 	byte	$11, $12, $05, $f5, $e9, $ee, $fc, $0b, $0e, $0b, $0a, $0b, $0a, $fd, $f0, $e7
0eba4     EC F8 05 0B 
0eba8     0F 14 17 0B 
0ebac     F7 E1 DE E8 
0ebb0     FC 05 09 0C | 	byte	$ec, $f8, $05, $0b, $0f, $14, $17, $0b, $f7, $e1, $de, $e8, $fc, $05, $09, $0c
0ebb4     10 10 08 F8 
0ebb8     F0 F4 00 0C 
0ebbc     0C 06 03 07 
0ebc0     06 FF F4 EF | 	byte	$10, $10, $08, $f8, $f0, $f4, $00, $0c, $0c, $06, $03, $07, $06, $ff, $f4, $ef
0ebc4     F3 FD 05 09 
0ebc8     0F 13 13 07 
0ebcc     F3 DF DD E9 
0ebd0     FA 05 0A 12 | 	byte	$f3, $fd, $05, $09, $0f, $13, $13, $07, $f3, $df, $dd, $e9, $fa, $05, $0a, $12
0ebd4     16 0E 05 F5 
0ebd8     EE F2 FD 0B 
0ebdc     0F 0B 06 07 
0ebe0     01 FB F0 ED | 	byte	$16, $0e, $05, $f5, $ee, $f2, $fd, $0b, $0f, $0b, $06, $07, $01, $fb, $f0, $ed
0ebe4     F5 00 07 0C 
0ebe8     11 15 12 06 
0ebec     F1 E1 E2 EA 
0ebf0     F7 FF 08 13 | 	byte	$f5, $00, $07, $0c, $11, $15, $12, $06, $f1, $e1, $e2, $ea, $f7, $ff, $08, $13
0ebf4     18 11 07 F9 
0ebf8     F4 F7 FC 06 
0ebfc     0C 09 06 06 
0ec00     FF F8 EF EF | 	byte	$18, $11, $07, $f9, $f4, $f7, $fc, $06, $0c, $09, $06, $06, $ff, $f8, $ef, $ef
0ec04     F8 03 06 0A 
0ec08     0C 12 0F 03 
0ec0c     F1 E8 EA F1 
0ec10     F8 FC 07 11 | 	byte	$f8, $03, $06, $0a, $0c, $12, $0f, $03, $f1, $e8, $ea, $f1, $f8, $fc, $07, $11
0ec14     14 0D 03 F9 
0ec18     F8 F9 FD 02 
0ec1c     07 0B 0A 0A 
0ec20     00 F6 ED F2 | 	byte	$14, $0d, $03, $f9, $f8, $f9, $fd, $02, $07, $0b, $0a, $0a, $00, $f6, $ed, $f2
0ec24     F9 02 06 0B 
0ec28     0D 11 0B FE 
0ec2c     EF EA EB F3 
0ec30     F9 FE 07 11 | 	byte	$f9, $02, $06, $0b, $0d, $11, $0b, $fe, $ef, $ea, $eb, $f3, $f9, $fe, $07, $11
0ec34     12 0D 04 FC 
0ec38     FD FC FF FE 
0ec3c     00 07 0C 0B 
0ec40     FE F6 ED F3 | 	byte	$12, $0d, $04, $fc, $fd, $fc, $ff, $fe, $00, $07, $0c, $0b, $fe, $f6, $ed, $f3
0ec44     FA 02 08 0A 
0ec48     0F 11 06 F9 
0ec4c     EB ED F1 F7 
0ec50     FA FD 07 0D | 	byte	$fa, $02, $08, $0a, $0f, $11, $06, $f9, $eb, $ed, $f1, $f7, $fa, $fd, $07, $0d
0ec54     0E 0B 03 FE 
0ec58     01 00 01 FD 
0ec5c     FD 00 09 07 
0ec60     01 F7 F1 F7 | 	byte	$0e, $0b, $03, $fe, $01, $00, $01, $fd, $fd, $00, $09, $07, $01, $f7, $f1, $f7
0ec64     FF 05 08 0B 
0ec68     0D 0E 02 F3 
0ec6c     E9 EF F8 FF 
0ec70     FD FC 01 05 | 	byte	$ff, $05, $08, $0b, $0d, $0e, $02, $f3, $e9, $ef, $f8, $ff, $fd, $fc, $01, $05
0ec74     08 07 02 01 
0ec78     05 07 07 00 
0ec7c     FD FE 03 00 
0ec80     FC F5 F3 FA | 	byte	$08, $07, $02, $01, $05, $07, $07, $00, $fd, $fe, $03, $00, $fc, $f5, $f3, $fa
0ec84     05 09 0D 0C 
0ec88     0E 09 F9 E9 
0ec8c     E6 EE FD 07 
0ec90     02 00 FF 04 | 	byte	$05, $09, $0d, $0c, $0e, $09, $f9, $e9, $e6, $ee, $fd, $07, $02, $00, $ff, $04
0ec94     02 02 00 03 
0ec98     07 0B 07 04 
0ec9c     FE FB FD FA 
0eca0     F9 F5 F8 FF | 	byte	$02, $02, $00, $03, $07, $0b, $07, $04, $fe, $fb, $fd, $fa, $f9, $f5, $f8, $ff
0eca4     08 0C 0F 10 
0eca8     0F 05 F5 E5 
0ecac     E5 F0 00 0B 
0ecb0     09 05 FE FC | 	byte	$08, $0c, $0f, $10, $0f, $05, $f5, $e5, $e5, $f0, $00, $0b, $09, $05, $fe, $fc
0ecb4     FA FB 00 05 
0ecb8     0C 11 0C 03 
0ecbc     FD F6 F7 F6 
0ecc0     F9 F9 FE 04 | 	byte	$fa, $fb, $00, $05, $0c, $11, $0c, $03, $fd, $f6, $f7, $f6, $f9, $f9, $fe, $04
0ecc4     09 0B 0D 10 
0ecc8     0C 01 F1 E6 
0eccc     E9 F3 01 09 
0ecd0     0A 08 01 F8 | 	byte	$09, $0b, $0d, $10, $0c, $01, $f1, $e6, $e9, $f3, $01, $09, $0a, $08, $01, $f8
0ecd4     F5 F5 FE 08 
0ecd8     0F 14 0F 05 
0ecdc     FD F8 F3 F3 
0ece0     F5 FB 02 07 | 	byte	$f5, $f5, $fe, $08, $0f, $14, $0f, $05, $fd, $f8, $f3, $f3, $f5, $fb, $02, $07
0ece4     08 0C 0F 10 
0ece8     0A FD EE E6 
0ecec     EA F6 01 09 
0ecf0     0C 0A 06 FA | 	byte	$08, $0c, $0f, $10, $0a, $fd, $ee, $e6, $ea, $f6, $01, $09, $0c, $0a, $06, $fa
0ecf4     F1 EE F4 08 
0ecf8     12 18 11 07 
0ecfc     01 F9 F0 ED 
0ed00     EF F9 04 0C | 	byte	$f1, $ee, $f4, $08, $12, $18, $11, $07, $01, $f9, $f0, $ed, $ef, $f9, $04, $0c
0ed04     0B 0E 11 10 
0ed08     07 F9 ED E8 
0ed0c     ED FA 03 04 
0ed10     08 07 08 FE | 	byte	$0b, $0e, $11, $10, $07, $f9, $ed, $e8, $ed, $fa, $03, $04, $08, $07, $08, $fe
0ed14     F4 EF F5 07 
0ed18     12 14 0E 06 
0ed1c     00 FC F3 F0 
0ed20     EE F7 03 0A | 	byte	$f4, $ef, $f5, $07, $12, $14, $0e, $06, $00, $fc, $f3, $f0, $ee, $f7, $03, $0a
0ed24     0A 0E 11 11 
0ed28     07 F7 EC EA 
0ed2c     F0 FC 06 03 
0ed30     06 07 07 FF | 	byte	$0a, $0e, $11, $11, $07, $f7, $ec, $ea, $f0, $fc, $06, $03, $06, $07, $07, $ff
0ed34     F4 EC F4 01 
0ed38     11 16 0F 09 
0ed3c     03 FD F4 F0 
0ed40     EC F8 03 0B | 	byte	$f4, $ec, $f4, $01, $11, $16, $0f, $09, $03, $fd, $f4, $f0, $ec, $f8, $03, $0b
0ed44     0C 0F 11 0F 
0ed48     04 F5 E8 EA 
0ed4c     F3 01 08 04 
0ed50     04 07 04 FD | 	byte	$0c, $0f, $11, $0f, $04, $f5, $e8, $ea, $f3, $01, $08, $04, $04, $07, $04, $fd
0ed54     F3 EE F8 01 
0ed58     11 17 10 0B 
0ed5c     01 F9 F1 ED 
0ed60     EF FC 06 0B | 	byte	$f3, $ee, $f8, $01, $11, $17, $10, $0b, $01, $f9, $f1, $ed, $ef, $fc, $06, $0b
0ed64     0D 11 11 0D 
0ed68     01 F2 E6 EB 
0ed6c     F5 03 07 04 
0ed70     06 08 03 FA | 	byte	$0d, $11, $11, $0d, $01, $f2, $e6, $eb, $f5, $03, $07, $04, $06, $08, $03, $fa
0ed74     F1 EF F9 01 
0ed78     0F 14 13 0D 
0ed7c     06 F9 F2 EA 
0ed80     F1 FC 06 0A | 	byte	$f1, $ef, $f9, $01, $0f, $14, $13, $0d, $06, $f9, $f2, $ea, $f1, $fc, $06, $0a
0ed84     0D 11 11 0C 
0ed88     FD EE E7 EE 
0ed8c     FC 06 04 03 
0ed90     04 04 00 F9 | 	byte	$0d, $11, $11, $0c, $fd, $ee, $e7, $ee, $fc, $06, $04, $03, $04, $04, $00, $f9
0ed94     F5 F6 FE 02 
0ed98     0B 0D 0E 0B 
0ed9c     07 FB F4 EC 
0eda0     F2 FD 06 08 | 	byte	$f5, $f6, $fe, $02, $0b, $0d, $0e, $0b, $07, $fb, $f4, $ec, $f2, $fd, $06, $08
0eda4     0D 10 11 0A 
0eda8     FC EE ED F3 
0edac     FE 06 01 02 
0edb0     02 01 FC F9 | 	byte	$0d, $10, $11, $0a, $fc, $ee, $ed, $f3, $fe, $06, $01, $02, $02, $01, $fc, $f9
0edb4     F6 FC 02 06 
0edb8     07 06 08 09 
0edbc     09 01 F7 EF 
0edc0     F5 FD 03 04 | 	byte	$f6, $fc, $02, $06, $07, $06, $08, $09, $09, $01, $f7, $ef, $f5, $fd, $03, $04
0edc4     09 0E 11 0A 
0edc8     F9 ED EE F6 
0edcc     FE 05 00 05 
0edd0     07 03 FD F5 | 	byte	$09, $0e, $11, $0a, $f9, $ed, $ee, $f6, $fe, $05, $00, $05, $07, $03, $fd, $f5
0edd4     F3 FB 01 06 
0edd8     06 04 07 0B 
0eddc     0B 03 F8 F1 
0ede0     F7 FC 01 05 | 	byte	$f3, $fb, $01, $06, $06, $04, $07, $0b, $0b, $03, $f8, $f1, $f7, $fc, $01, $05
0ede4     0A 0F 0C 05 
0ede8     F4 ED F2 FC 
0edec     04 05 04 06 
0edf0     04 FD F6 F2 | 	byte	$0a, $0f, $0c, $05, $f4, $ed, $f2, $fc, $04, $05, $04, $06, $04, $fd, $f6, $f2
0edf4     F4 FE 05 09 
0edf8     08 03 05 0A 
0edfc     09 02 F9 F5 
0ee00     F9 FC FE 05 | 	byte	$f4, $fe, $05, $09, $08, $03, $05, $0a, $09, $02, $f9, $f5, $f9, $fc, $fe, $05
0ee04     0B 0F 0C 02 
0ee08     F4 ED F2 FD 
0ee0c     06 05 06 07 
0ee10     06 FE F5 F0 | 	byte	$0b, $0f, $0c, $02, $f4, $ed, $f2, $fd, $06, $05, $06, $07, $06, $fe, $f5, $f0
0ee14     F3 FF 06 0C 
0ee18     07 02 01 05 
0ee1c     05 01 FA FB 
0ee20     FE FF FE 02 | 	byte	$f3, $ff, $06, $0c, $07, $02, $01, $05, $05, $01, $fa, $fb, $fe, $ff, $fe, $02
0ee24     07 0A 08 01 
0ee28     F6 F2 F5 FD 
0ee2c     05 02 05 05 
0ee30     04 FD F5 F1 | 	byte	$07, $0a, $08, $01, $f6, $f2, $f5, $fd, $05, $02, $05, $05, $04, $fd, $f5, $f1
0ee34     F6 02 0A 0F 
0ee38     07 01 FE 01 
0ee3c     00 FC FA FE 
0ee40     02 03 02 02 | 	byte	$f6, $02, $0a, $0f, $07, $01, $fe, $01, $00, $fc, $fa, $fe, $02, $03, $02, $02
0ee44     04 06 06 FF 
0ee48     F9 F7 F9 00 
0ee4c     02 00 00 02 
0ee50     01 FC F6 F3 | 	byte	$04, $06, $06, $ff, $f9, $f7, $f9, $00, $02, $00, $00, $02, $01, $fc, $f6, $f3
0ee54     FA 03 0C 0D 
0ee58     08 01 FF FE 
0ee5c     FE F8 F8 FD 
0ee60     05 07 06 05 | 	byte	$fa, $03, $0c, $0d, $08, $01, $ff, $fe, $fe, $f8, $f8, $fd, $05, $07, $06, $05
0ee64     03 06 03 FC 
0ee68     F7 F9 FB FE 
0ee6c     FF 00 01 02 
0ee70     00 FE FB F8 | 	byte	$03, $06, $03, $fc, $f7, $f9, $fb, $fe, $ff, $00, $01, $02, $00, $fe, $fb, $f8
0ee74     FD FF 09 08 
0ee78     06 02 02 00 
0ee7c     FC F9 FA FF 
0ee80     03 05 05 04 | 	byte	$fd, $ff, $09, $08, $06, $02, $02, $00, $fc, $f9, $fa, $ff, $03, $05, $05, $04
0ee84     01 02 00 00 
0ee88     FD 00 02 FF 
0ee8c     FC FB FB FC 
0ee90     FD FF 00 FF | 	byte	$01, $02, $00, $00, $fd, $00, $02, $ff, $fc, $fb, $fb, $fc, $fd, $ff, $00, $ff
0ee94     03 02 05 02 
0ee98     FF 01 04 02 
0ee9c     FE FD FE 03 
0eea0     04 03 02 02 | 	byte	$03, $02, $05, $02, $ff, $01, $04, $02, $fe, $fd, $fe, $03, $04, $03, $02, $02
0eea4     01 00 FD FE 
0eea8     00 04 04 01 
0eeac     FB F9 F8 F9 
0eeb0     FA FE 00 04 | 	byte	$01, $00, $fd, $fe, $00, $04, $04, $01, $fb, $f9, $f8, $f9, $fa, $fe, $00, $04
0eeb4     06 06 06 FF 
0eeb8     FD 00 05 02 
0eebc     00 FE 00 02 
0eec0     03 FF 01 01 | 	byte	$06, $06, $06, $ff, $fd, $00, $05, $02, $00, $fe, $00, $02, $03, $ff, $01, $01
0eec4     02 00 FD FE 
0eec8     03 07 04 03 
0eecc     F9 F8 F6 F6 
0eed0     F8 FE 01 08 | 	byte	$02, $00, $fd, $fe, $03, $07, $04, $03, $f9, $f8, $f6, $f6, $f8, $fe, $01, $08
0eed4     0A 09 04 FD 
0eed8     FB FD 01 00 
0eedc     01 01 04 03 
0eee0     00 FE 01 01 | 	byte	$0a, $09, $04, $fd, $fb, $fd, $01, $00, $01, $01, $04, $03, $00, $fe, $01, $01
0eee4     02 01 FE FE 
0eee8     02 07 04 00 
0eeec     F8 F5 F5 F7 
0eef0     FA FF 05 0C | 	byte	$02, $01, $fe, $fe, $02, $07, $04, $00, $f8, $f5, $f5, $f7, $fa, $ff, $05, $0c
0eef4     0B 08 01 FA 
0eef8     FA FD 00 02 
0eefc     02 03 03 FF 
0ef00     F9 FA FF 03 | 	byte	$0b, $08, $01, $fa, $fa, $fd, $00, $02, $02, $03, $03, $ff, $f9, $fa, $ff, $03
0ef04     05 04 FF FF 
0ef08     02 04 04 00 
0ef0c     FA F8 F7 F8 
0ef10     FB FE 03 0A | 	byte	$05, $04, $ff, $ff, $02, $04, $04, $00, $fa, $f8, $f7, $f8, $fb, $fe, $03, $0a
0ef14     08 08 FF F9 
0ef18     FC 01 04 04 
0ef1c     04 01 00 FD 
0ef20     F7 FA 03 08 | 	byte	$08, $08, $ff, $f9, $fc, $01, $04, $04, $04, $01, $00, $fd, $f7, $fa, $03, $08
0ef24     09 02 FD FC 
0ef28     FF 02 05 01 
0ef2c     FE F9 F5 F6 
0ef30     F9 FF 04 0A | 	byte	$09, $02, $fd, $fc, $ff, $02, $05, $01, $fe, $f9, $f5, $f6, $f9, $ff, $04, $0a
0ef34     0A 08 FF F9 
0ef38     F9 00 04 06 
0ef3c     06 02 00 FC 
0ef40     F8 FB 00 08 | 	byte	$0a, $08, $ff, $f9, $f9, $00, $04, $06, $06, $02, $00, $fc, $f8, $fb, $00, $08
0ef44     09 03 FE FD 
0ef48     FF 03 05 03 
0ef4c     FF F7 F4 F5 
0ef50     FA FF 05 08 | 	byte	$09, $03, $fe, $fd, $ff, $03, $05, $03, $ff, $f7, $f4, $f5, $fa, $ff, $05, $08
0ef54     0B 08 FF F9 
0ef58     F8 FF 05 06 
0ef5c     04 02 FE FA 
0ef60     F8 FC 01 0A | 	byte	$0b, $08, $ff, $f9, $f8, $ff, $05, $06, $04, $02, $fe, $fa, $f8, $fc, $01, $0a
0ef64     0A 05 FF FD 
0ef68     FD 01 03 03 
0ef6c     00 FA F7 F5 
0ef70     FA FC 05 05 | 	byte	$0a, $05, $ff, $fd, $fd, $01, $03, $03, $00, $fa, $f7, $f5, $fa, $fc, $05, $05
0ef74     0A 08 01 FB 
0ef78     FA FC 03 05 
0ef7c     04 02 FD F8 
0ef80     F9 FF 03 0A | 	byte	$0a, $08, $01, $fb, $fa, $fc, $03, $05, $04, $02, $fd, $f8, $f9, $ff, $03, $0a
0ef84     08 05 FF FC 
0ef88     FD 00 02 03 
0ef8c     02 FD F8 F5 
0ef90     FA FD 04 05 | 	byte	$08, $05, $ff, $fc, $fd, $00, $02, $03, $02, $fd, $f8, $f5, $fa, $fd, $04, $05
0ef94     09 05 01 FB 
0ef98     FC FD 01 05 
0ef9c     05 04 FD F8 
0efa0     FA 02 04 08 | 	byte	$09, $05, $01, $fb, $fc, $fd, $01, $05, $05, $04, $fd, $f8, $fa, $02, $04, $08
0efa4     04 02 FF FE 
0efa8     FF 00 01 02 
0efac     00 FF F9 F7 
0efb0     FA FD 02 04 | 	byte	$04, $02, $ff, $fe, $ff, $00, $01, $02, $00, $ff, $f9, $f7, $fa, $fd, $02, $04
0efb4     07 03 01 FD 
0efb8     FD FD FE 02 
0efbc     05 04 FF FA 
0efc0     FD 03 06 04 | 	byte	$07, $03, $01, $fd, $fd, $fd, $fe, $02, $05, $04, $ff, $fa, $fd, $03, $06, $04
0efc4     FF 00 FF 01 
0efc8     00 00 FE FF 
0efcc     FE 00 FC FC 
0efd0     FA FE 01 02 | 	byte	$ff, $00, $ff, $01, $00, $00, $fe, $ff, $fe, $00, $fc, $fc, $fa, $fe, $01, $02
0efd4     03 FF FE FE 
0efd8     FF FE 00 03 
0efdc     08 05 FF FB 
0efe0     FE 01 06 02 | 	byte	$03, $ff, $fe, $fe, $ff, $fe, $00, $03, $08, $05, $ff, $fb, $fe, $01, $06, $02
0efe4     FD FD 01 07 
0efe8     04 FF FA FA 
0efec     F9 FC FC 00 
0eff0     01 05 05 03 | 	byte	$fd, $fd, $01, $07, $04, $ff, $fa, $fa, $f9, $fc, $fc, $00, $01, $05, $05, $03
0eff4     00 FD F9 FD 
0eff8     00 00 03 03 
0effc     06 01 FA FB 
0f000     00 04 09 02 | 	byte	$00, $fd, $f9, $fd, $00, $00, $03, $03, $06, $01, $fa, $fb, $00, $04, $09, $02
0f004     FF FC 02 07 
0f008     03 FE F9 F7 
0f00c     FA FC FE 04 
0f010     05 07 05 02 | 	byte	$ff, $fc, $02, $07, $03, $fe, $f9, $f7, $fa, $fc, $fe, $04, $05, $07, $05, $02
0f014     FD F9 F9 FE 
0f018     01 01 02 03 
0f01c     02 FF FB FD 
0f020     04 08 0A 02 | 	byte	$fd, $f9, $f9, $fe, $01, $01, $02, $03, $02, $ff, $fb, $fd, $04, $08, $0a, $02
0f024     FD FB FF 05 
0f028     02 FC F9 F8 
0f02c     F9 FA FF 05 
0f030     09 0B 08 05 | 	byte	$fd, $fb, $ff, $05, $02, $fc, $f9, $f8, $f9, $fa, $ff, $05, $09, $0b, $08, $05
0f034     FC F5 F5 FA 
0f038     FF 02 03 04 
0f03c     01 FE FD FF 
0f040     05 09 08 02 | 	byte	$fc, $f5, $f5, $fa, $ff, $02, $03, $04, $01, $fe, $fd, $ff, $05, $09, $08, $02
0f044     FD FD FF 02 
0f048     01 FD FC F8 
0f04c     F8 F9 FE 05 
0f050     0A 0E 0C 06 | 	byte	$fd, $fd, $ff, $02, $01, $fd, $fc, $f8, $f8, $f9, $fe, $05, $0a, $0e, $0c, $06
0f054     FD F2 F3 F9 
0f058     FF 06 06 05 
0f05c     FD F9 F8 FD 
0f060     07 0C 0B 05 | 	byte	$fd, $f2, $f3, $f9, $ff, $06, $06, $05, $fd, $f9, $f8, $fd, $07, $0c, $0b, $05
0f064     FF FD FC FA 
0f068     FB FA FE FD 
0f06c     FD FD 02 04 
0f070     08 0A 08 02 | 	byte	$ff, $fd, $fc, $fa, $fb, $fa, $fe, $fd, $fd, $fd, $02, $04, $08, $0a, $08, $02
0f074     FB F5 F7 FB 
0f078     02 08 07 03 
0f07c     FA F5 F7 00 
0f080     08 0D 0A 06 | 	byte	$fb, $f5, $f7, $fb, $02, $08, $07, $03, $fa, $f5, $f7, $00, $08, $0d, $0a, $06
0f084     01 FE FB F7 
0f088     F8 FA FD FE 
0f08c     FF 00 03 05 
0f090     09 08 05 00 | 	byte	$01, $fe, $fb, $f7, $f8, $fa, $fd, $fe, $ff, $00, $03, $05, $09, $08, $05, $00
0f094     F9 F7 F8 FC 
0f098     02 08 09 03 
0f09c     F8 F4 F5 FF 
0f0a0     05 0C 0B 09 | 	byte	$f9, $f7, $f8, $fc, $02, $08, $09, $03, $f8, $f4, $f5, $ff, $05, $0c, $0b, $09
0f0a4     04 01 FB F6 
0f0a8     F4 F8 FB FD 
0f0ac     FF 02 07 08 
0f0b0     0B 08 04 FB | 	byte	$04, $01, $fb, $f6, $f4, $f8, $fb, $fd, $ff, $02, $07, $08, $0b, $08, $04, $fb
0f0b4     F8 F8 FB FD 
0f0b8     02 06 07 02 
0f0bc     F9 F6 F7 00 
0f0c0     06 0B 08 07 | 	byte	$f8, $f8, $fb, $fd, $02, $06, $07, $02, $f9, $f6, $f7, $00, $06, $0b, $08, $07
0f0c4     03 01 FD F7 
0f0c8     F4 F9 FB FD 
0f0cc     FE 01 05 05 
0f0d0     09 06 04 FB | 	byte	$03, $01, $fd, $f7, $f4, $f9, $fb, $fd, $fe, $01, $05, $05, $09, $06, $04, $fb
0f0d4     FA FC 01 03 
0f0d8     04 04 02 FE 
0f0dc     F9 F8 FB 01 
0f0e0     06 08 05 03 | 	byte	$fa, $fc, $01, $03, $04, $04, $02, $fe, $f9, $f8, $fb, $01, $06, $08, $05, $03
0f0e4     00 00 FD FA 
0f0e8     F8 FA FD 00 
0f0ec     02 03 03 05 
0f0f0     05 03 00 FB | 	byte	$00, $00, $fd, $fa, $f8, $fa, $fd, $00, $02, $03, $03, $05, $05, $03, $00, $fb
0f0f4     F9 FF 03 06 
0f0f8     06 02 FE FA 
0f0fc     F7 F9 FE 02 
0f100     07 07 08 06 | 	byte	$f9, $ff, $03, $06, $06, $02, $fe, $fa, $f7, $f9, $fe, $02, $07, $07, $08, $06
0f104     03 00 FA F7 
0f108     F5 F6 FB 02 
0f10c     07 0B 07 07 
0f110     01 FF FB F8 | 	byte	$03, $00, $fa, $f7, $f5, $f6, $fb, $02, $07, $0b, $07, $07, $01, $ff, $fb, $f8
0f114     F7 FD 04 09 
0f118     0A 05 FF FA 
0f11c     F8 F9 FE FF 
0f120     03 03 08 09 | 	byte	$f7, $fd, $04, $09, $0a, $05, $ff, $fa, $f8, $f9, $fe, $ff, $03, $03, $08, $09
0f124     08 03 FB F8 
0f128     F6 F4 F8 00 
0f12c     08 0E 0B 07 
0f130     00 FA F7 F5 | 	byte	$08, $03, $fb, $f8, $f6, $f4, $f8, $00, $08, $0e, $0b, $07, $00, $fa, $f7, $f5
0f134     F7 FD 05 0A 
0f138     0C 08 01 FA 
0f13c     F8 FB FF 00 
0f140     00 00 06 09 | 	byte	$f7, $fd, $05, $0a, $0c, $08, $01, $fa, $f8, $fb, $ff, $00, $00, $00, $06, $09
0f144     08 03 FB F8 
0f148     F7 F4 F6 FD 
0f14c     09 10 12 0B 
0f150     01 F8 F1 F2 | 	byte	$08, $03, $fb, $f8, $f7, $f4, $f6, $fd, $09, $10, $12, $0b, $01, $f8, $f1, $f2
0f154     F6 FD 04 0B 
0f158     0C 0A 01 FA 
0f15c     F6 FA FE FF 
0f160     FE FF 08 0B | 	byte	$f6, $fd, $04, $0b, $0c, $0a, $01, $fa, $f6, $fa, $fe, $ff, $fe, $ff, $08, $0b
0f164     0A 04 FC F7 
0f168     F5 F2 F5 FB 
0f16c     09 10 14 0E 
0f170     03 F8 EF F1 | 	byte	$0a, $04, $fc, $f7, $f5, $f2, $f5, $fb, $09, $10, $14, $0e, $03, $f8, $ef, $f1
0f174     F5 FC 01 08 
0f178     0B 0A 02 FB 
0f17c     F8 FB FD FE 
0f180     FD FF 06 09 | 	byte	$f5, $fc, $01, $08, $0b, $0a, $02, $fb, $f8, $fb, $fd, $fe, $fd, $ff, $06, $09
0f184     0B 04 00 F9 
0f188     F3 F2 F5 FB 
0f18c     08 10 14 0E 
0f190     03 F7 EF EF | 	byte	$0b, $04, $00, $f9, $f3, $f2, $f5, $fb, $08, $10, $14, $0e, $03, $f7, $ef, $ef
0f194     F6 FF 03 09 
0f198     0B 09 00 FA 
0f19c     F7 FC FD 00 
0f1a0     FF 05 07 08 | 	byte	$f6, $ff, $03, $09, $0b, $09, $00, $fa, $f7, $fc, $fd, $00, $ff, $05, $07, $08
0f1a4     07 02 FC F8 
0f1a8     F2 F5 FA 02 
0f1ac     0A 0E 10 07 
0f1b0     FF F2 F0 F1 | 	byte	$07, $02, $fc, $f8, $f2, $f5, $fa, $02, $0a, $0e, $10, $07, $ff, $f2, $f0, $f1
0f1b4     FB 04 09 0A 
0f1b8     09 03 FD F8 
0f1bc     F9 FF 00 02 
0f1c0     01 08 06 05 | 	byte	$fb, $04, $09, $0a, $09, $03, $fd, $f8, $f9, $ff, $00, $02, $01, $08, $06, $05
0f1c4     03 00 FC F9 
0f1c8     F5 F7 FC 04 
0f1cc     09 0B 0A 02 
0f1d0     FE F6 F4 F5 | 	byte	$03, $00, $fc, $f9, $f5, $f7, $fc, $04, $09, $0b, $0a, $02, $fe, $f6, $f4, $f5
0f1d4     FC 05 0A 0B 
0f1d8     07 00 FB F7 
0f1dc     FA FE FF 02 
0f1e0     04 07 05 02 | 	byte	$fc, $05, $0a, $0b, $07, $00, $fb, $f7, $fa, $fe, $ff, $02, $04, $07, $05, $02
0f1e4     FE FD FC FA 
0f1e8     F9 FB 00 07 
0f1ec     09 08 03 FE 
0f1f0     FD FA FA F9 | 	byte	$fe, $fd, $fc, $fa, $f9, $fb, $00, $07, $09, $08, $03, $fe, $fd, $fa, $fa, $f9
0f1f4     FF 04 09 09 
0f1f8     04 FE FB F9 
0f1fc     FC FF 01 02 
0f200     05 07 05 01 | 	byte	$ff, $04, $09, $09, $04, $fe, $fb, $f9, $fc, $ff, $01, $02, $05, $07, $05, $01
0f204     FC FC FC FA 
0f208     F9 FC 00 08 
0f20c     08 06 FF FE 
0f210     FD FE FC FB | 	byte	$fc, $fc, $fc, $fa, $f9, $fc, $00, $08, $08, $06, $ff, $fe, $fd, $fe, $fc, $fb
0f214     FC 00 07 08 
0f218     05 00 FB FB 
0f21c     FF FF 01 00 
0f220     03 06 04 01 | 	byte	$fc, $00, $07, $08, $05, $00, $fb, $fb, $ff, $ff, $01, $00, $03, $06, $04, $01
0f224     FB FA F9 FB 
0f228     FB FF 02 0A 
0f22c     09 04 FB F9 
0f230     FA FF 02 01 | 	byte	$fb, $fa, $f9, $fb, $fb, $ff, $02, $0a, $09, $04, $fb, $f9, $fa, $ff, $02, $01
0f234     00 00 04 06 
0f238     02 FE FA FE 
0f23c     04 04 03 FE 
0f240     FF 01 FF FD | 	byte	$00, $00, $04, $06, $02, $fe, $fa, $fe, $04, $04, $03, $fe, $ff, $01, $ff, $fd
0f244     FA FA FD FF 
0f248     01 03 05 07 
0f24c     05 00 F8 F7 
0f250     F9 02 07 07 | 	byte	$fa, $fa, $fd, $ff, $01, $03, $05, $07, $05, $00, $f8, $f7, $f9, $02, $07, $07
0f254     03 02 02 02 
0f258     FE FB FA FF 
0f25c     06 07 04 FF 
0f260     00 00 FE FC | 	byte	$03, $02, $02, $02, $fe, $fb, $fa, $ff, $06, $07, $04, $ff, $00, $00, $fe, $fc
0f264     FA F8 FB FF 
0f268     05 06 0A 07 
0f26c     04 FD F7 F3 
0f270     F7 00 06 09 | 	byte	$fa, $f8, $fb, $ff, $05, $06, $0a, $07, $04, $fd, $f7, $f3, $f7, $00, $06, $09
0f274     05 04 02 00 
0f278     FB F9 F9 01 
0f27c     07 09 05 01 
0f280     00 FE FC FA | 	byte	$05, $04, $02, $00, $fb, $f9, $f9, $01, $07, $09, $05, $01, $00, $fe, $fc, $fa
0f284     F9 FA FB FF 
0f288     06 08 0B 07 
0f28c     03 FB F7 F3 
0f290     F8 00 06 09 | 	byte	$f9, $fa, $fb, $ff, $06, $08, $0b, $07, $03, $fb, $f7, $f3, $f8, $00, $06, $09
0f294     07 05 01 FE 
0f298     F9 F7 FB 04 
0f29c     08 0B 05 02 
0f2a0     00 FC FA F9 | 	byte	$07, $05, $01, $fe, $f9, $f7, $fb, $04, $08, $0b, $05, $02, $00, $fc, $fa, $f9
0f2a4     FA FB FC FE 
0f2a8     04 07 0A 06 
0f2ac     01 FA F7 F6 
0f2b0     FB 01 05 07 | 	byte	$fa, $fb, $fc, $fe, $04, $07, $0a, $06, $01, $fa, $f7, $f6, $fb, $01, $05, $07
0f2b4     08 08 04 FF 
0f2b8     F8 F7 FB 04 
0f2bc     07 09 03 01 
0f2c0     FE FA F8 F8 | 	byte	$08, $08, $04, $ff, $f8, $f7, $fb, $04, $07, $09, $03, $01, $fe, $fa, $f8, $f8
0f2c4     FC 00 00 00 
0f2c8     02 06 07 03 
0f2cc     00 FA FA FB 
0f2d0     FF 01 03 03 | 	byte	$fc, $00, $00, $00, $02, $06, $07, $03, $00, $fa, $fa, $fb, $ff, $01, $03, $03
0f2d4     06 07 04 FD 
0f2d8     F7 F8 FE 07 
0f2dc     08 07 04 01 
0f2e0     FD F7 F4 F8 | 	byte	$06, $07, $04, $fd, $f7, $f8, $fe, $07, $08, $07, $04, $01, $fd, $f7, $f4, $f8
0f2e4     FC 02 02 03 
0f2e8     02 06 06 02 
0f2ec     FE FB FB FD 
0f2f0     01 00 02 02 | 	byte	$fc, $02, $02, $03, $02, $06, $06, $02, $fe, $fb, $fb, $fd, $01, $00, $02, $02
0f2f4     05 07 05 FC 
0f2f8     F6 F7 FE 05 
0f2fc     08 07 07 05 
0f300     FE F9 F4 F6 | 	byte	$05, $07, $05, $fc, $f6, $f7, $fe, $05, $08, $07, $07, $05, $fe, $f9, $f4, $f6
0f304     FB 00 02 04 
0f308     04 06 05 02 
0f30c     FD FA FA FC 
0f310     01 02 03 03 | 	byte	$fb, $00, $02, $04, $04, $06, $05, $02, $fd, $fa, $fa, $fc, $01, $02, $03, $03
0f314     06 07 05 FA 
0f318     F6 F7 00 05 
0f31c     08 06 08 06 
0f320     FF F7 F3 F4 | 	byte	$06, $07, $05, $fa, $f6, $f7, $00, $05, $08, $06, $08, $06, $ff, $f7, $f3, $f4
0f324     FA FE 02 06 
0f328     06 07 04 01 
0f32c     FC F9 F9 FC 
0f330     00 02 03 05 | 	byte	$fa, $fe, $02, $06, $06, $07, $04, $01, $fc, $f9, $f9, $fc, $00, $02, $03, $05
0f334     09 08 04 FA 
0f338     F4 F5 FE 03 
0f33c     06 06 0A 08 
0f340     FF F7 F4 F4 | 	byte	$09, $08, $04, $fa, $f4, $f5, $fe, $03, $06, $06, $0a, $08, $ff, $f7, $f4, $f4
0f344     F9 FE 01 05 
0f348     06 06 03 01 
0f34c     FD FB FB FF 
0f350     00 00 01 04 | 	byte	$f9, $fe, $01, $05, $06, $06, $03, $01, $fd, $fb, $fb, $ff, $00, $00, $01, $04
0f354     08 08 03 FC 
0f358     F8 F9 FE 00 
0f35c     02 04 09 08 
0f360     01 F9 F6 F6 | 	byte	$08, $08, $03, $fc, $f8, $f9, $fe, $00, $02, $04, $09, $08, $01, $f9, $f6, $f6
0f364     F9 FE 01 04 
0f368     06 05 03 01 
0f36c     FD FC FA FF 
0f370     FF 01 01 04 | 	byte	$f9, $fe, $01, $04, $06, $05, $03, $01, $fd, $fc, $fa, $ff, $ff, $01, $01, $04
0f374     09 07 01 FC 
0f378     FA FD 00 FF 
0f37c     01 03 07 06 
0f380     00 F9 F6 F7 | 	byte	$09, $07, $01, $fc, $fa, $fd, $00, $ff, $01, $03, $07, $06, $00, $f9, $f6, $f7
0f384     FB FF 03 04 
0f388     06 05 03 00 
0f38c     FD FC FB FD 
0f390     FE 01 02 05 | 	byte	$fb, $ff, $03, $04, $06, $05, $03, $00, $fd, $fc, $fb, $fd, $fe, $01, $02, $05
0f394     07 06 FF FB 
0f398     FC 00 00 FF 
0f39c     FF 02 05 04 
0f3a0     00 FC F9 FA | 	byte	$07, $06, $ff, $fb, $fc, $00, $00, $ff, $ff, $02, $05, $04, $00, $fc, $f9, $fa
0f3a4     FD FF 01 01 
0f3a8     03 03 04 01 
0f3ac     00 FE FF FD 
0f3b0     FD FF 00 04 | 	byte	$fd, $ff, $01, $01, $03, $03, $04, $01, $00, $fe, $ff, $fd, $fd, $ff, $00, $04
0f3b4     05 05 00 FD 
0f3b8     FF 03 00 FE 
0f3bc     FD 01 04 01 
0f3c0     FD FC FB FC | 	byte	$05, $05, $00, $fd, $ff, $03, $00, $fe, $fd, $01, $04, $01, $fd, $fc, $fb, $fc
0f3c4     FE FF 00 00 
0f3c8     03 04 06 02 
0f3cc     02 FF FF FB 
0f3d0     F9 FB FF 04 | 	byte	$fe, $ff, $00, $00, $03, $04, $06, $02, $02, $ff, $ff, $fb, $f9, $fb, $ff, $04
0f3d4     05 03 01 FE 
0f3d8     01 04 00 FF 
0f3dc     00 04 05 00 
0f3e0     FB FB FA FD | 	byte	$05, $03, $01, $fe, $01, $04, $00, $ff, $00, $04, $05, $00, $fb, $fb, $fa, $fd
0f3e4     FD FE FE 01 
0f3e8     03 06 06 03 
0f3ec     03 01 00 FC 
0f3f0     F9 F8 FE 02 | 	byte	$fd, $fe, $fe, $01, $03, $06, $06, $03, $03, $01, $00, $fc, $f9, $f8, $fe, $02
0f3f4     05 01 01 02 
0f3f8     04 05 00 FF 
0f3fc     01 04 03 FD 
0f400     F9 FA FD 01 | 	byte	$05, $01, $01, $02, $04, $05, $00, $ff, $01, $04, $03, $fd, $f9, $fa, $fd, $01
0f404     00 FE FB FD 
0f408     FE 03 04 04 
0f40c     06 05 04 FE 
0f410     F8 F6 FB 00 | 	byte	$00, $fe, $fb, $fd, $fe, $03, $04, $04, $06, $05, $04, $fe, $f8, $f6, $fb, $00
0f414     03 01 01 04 
0f418     08 05 00 FE 
0f41c     00 03 FF FB 
0f420     F9 FC 01 04 | 	byte	$03, $01, $01, $04, $08, $05, $00, $fe, $00, $03, $ff, $fb, $f9, $fc, $01, $04
0f424     02 FE F9 F8 
0f428     FB 01 04 06 
0f42c     09 07 05 FD 
0f430     F8 F6 FA FE | 	byte	$02, $fe, $f9, $f8, $fb, $01, $04, $06, $09, $07, $05, $fd, $f8, $f6, $fa, $fe
0f434     00 FF 00 05 
0f438     0A 07 04 00 
0f43c     00 00 FD F8 
0f440     F8 FB 02 06 | 	byte	$00, $ff, $00, $05, $0a, $07, $04, $00, $00, $00, $fd, $f8, $f8, $fb, $02, $06
0f444     05 01 FA F8 
0f448     FA FF 01 05 
0f44c     08 09 06 00 
0f450     FA F9 FA FD | 	byte	$05, $01, $fa, $f8, $fa, $ff, $01, $05, $08, $09, $06, $00, $fa, $f9, $fa, $fd
0f454     FD FC FE 04 
0f458     0A 09 06 03 
0f45c     02 FE FC F7 
0f460     F9 FB 03 07 | 	byte	$fd, $fc, $fe, $04, $0a, $09, $06, $03, $02, $fe, $fc, $f7, $f9, $fb, $03, $07
0f464     07 01 FB F8 
0f468     FA FE 00 05 
0f46c     06 08 05 00 
0f470     FC FB FC FD | 	byte	$07, $01, $fb, $f8, $fa, $fe, $00, $05, $06, $08, $05, $00, $fc, $fb, $fc, $fd
0f474     FC FB FE 04 
0f478     08 08 09 06 
0f47c     05 FF FA F7 
0f480     F8 FD 02 05 | 	byte	$fc, $fb, $fe, $04, $08, $08, $09, $06, $05, $ff, $fa, $f7, $f8, $fd, $02, $05
0f484     05 00 FC F9 
0f488     FA FD FE 03 
0f48c     05 07 03 01 
0f490     FE FE FE FE | 	byte	$05, $00, $fc, $f9, $fa, $fd, $fe, $03, $05, $07, $03, $01, $fe, $fe, $fe, $fe
0f494     FC FB FF 04 
0f498     06 05 06 06 
0f49c     05 FF FA F7 
0f4a0     F8 FD 03 05 | 	byte	$fc, $fb, $ff, $04, $06, $05, $06, $06, $05, $ff, $fa, $f7, $f8, $fd, $03, $05
0f4a4     05 01 FE FB 
0f4a8     FB FB FD 02 
0f4ac     05 07 05 02 
0f4b0     FF FD FD FC | 	byte	$05, $01, $fe, $fb, $fb, $fb, $fd, $02, $05, $07, $05, $02, $ff, $fd, $fd, $fc
0f4b4     FC FD 01 06 
0f4b8     04 04 03 06 
0f4bc     06 02 F9 F5 
0f4c0     F7 FC 02 04 | 	byte	$fc, $fd, $01, $06, $04, $04, $03, $06, $06, $02, $f9, $f5, $f7, $fc, $02, $04
0f4c4     05 02 01 FD 
0f4c8     FC F9 FB FF 
0f4cc     05 07 04 03 
0f4d0     01 FE FC F9 | 	byte	$05, $02, $01, $fd, $fc, $f9, $fb, $ff, $05, $07, $04, $03, $01, $fe, $fc, $f9
0f4d4     F9 FD 04 08 
0f4d8     06 04 03 05 
0f4dc     05 00 F9 F7 
0f4e0     F8 FD 01 03 | 	byte	$f9, $fd, $04, $08, $06, $04, $03, $05, $05, $00, $f9, $f7, $f8, $fd, $01, $03
0f4e4     02 01 00 FF 
0f4e8     FD FA FC FE 
0f4ec     03 06 05 04 
0f4f0     02 01 FD F8 | 	byte	$02, $01, $00, $ff, $fd, $fa, $fc, $fe, $03, $06, $05, $04, $02, $01, $fd, $f8
0f4f4     F7 FC 04 09 
0f4f8     07 05 04 04 
0f4fc     02 FD F9 F8 
0f500     F9 FE 01 02 | 	byte	$f7, $fc, $04, $09, $07, $05, $04, $04, $02, $fd, $f9, $f8, $f9, $fe, $01, $02
0f504     00 00 FF FF 
0f508     FD FA FC FE 
0f50c     05 06 06 03 
0f510     03 01 FE F6 | 	byte	$00, $00, $ff, $ff, $fd, $fa, $fc, $fe, $05, $06, $06, $03, $03, $01, $fe, $f6
0f514     F5 FB 05 09 
0f518     08 07 05 04 
0f51c     FF FB F8 FA 
0f520     FA FF 02 02 | 	byte	$f5, $fb, $05, $09, $08, $07, $05, $04, $ff, $fb, $f8, $fa, $fa, $ff, $02, $02
0f524     01 00 00 00 
0f528     FC FB FC FF 
0f52c     03 04 05 03 
0f530     04 03 FE F8 | 	byte	$01, $00, $00, $00, $fc, $fb, $fc, $ff, $03, $04, $05, $03, $04, $03, $fe, $f8
0f534     F6 FB 05 07 
0f538     08 08 06 04 
0f53c     FF FA F9 FA 
0f540     FB FE 00 01 | 	byte	$f6, $fb, $05, $07, $08, $08, $06, $04, $ff, $fa, $f9, $fa, $fb, $fe, $00, $01
0f544     00 00 00 02 
0f548     FD FC FD 01 
0f54c     03 03 02 03 
0f550     04 03 FD F9 | 	byte	$00, $00, $00, $02, $fd, $fc, $fd, $01, $03, $03, $02, $03, $04, $03, $fd, $f9
0f554     F8 FE 05 06 
0f558     07 07 06 02 
0f55c     FE F9 FA FB 
0f560     FF 00 00 00 | 	byte	$f8, $fe, $05, $06, $07, $07, $06, $02, $fe, $f9, $fa, $fb, $ff, $00, $00, $00
0f564     FF FF FF 00 
0f568     FD FF 01 05 
0f56c     04 01 FF 00 
0f570     01 00 FB F9 | 	byte	$ff, $ff, $ff, $00, $fd, $ff, $01, $05, $04, $01, $ff, $00, $01, $00, $fb, $f9
0f574     FC 01 06 06 
0f578     07 05 04 00 
0f57c     FC FA FB FD 
0f580     02 02 00 FD | 	byte	$fc, $01, $06, $06, $07, $05, $04, $00, $fc, $fa, $fb, $fd, $02, $02, $00, $fd
0f584     FD FD FE FE 
0f588     FE 03 04 07 
0f58c     03 FF FC FE 
0f590     00 FF FC FC | 	byte	$fd, $fd, $fe, $fe, $fe, $03, $04, $07, $03, $ff, $fc, $fe, $00, $ff, $fc, $fc
0f594     FF 06 07 05 
0f598     03 03 03 00 
0f59c     FD FB FD FF 
0f5a0     02 01 FD FB | 	byte	$ff, $06, $07, $05, $03, $03, $03, $00, $fd, $fb, $fd, $ff, $02, $01, $fd, $fb
0f5a4     FB FE FF FF 
0f5a8     01 05 06 06 
0f5ac     02 FD FB FF 
0f5b0     FF FD FA FB | 	byte	$fb, $fe, $ff, $ff, $01, $05, $06, $06, $02, $fd, $fb, $ff, $ff, $fd, $fa, $fb
0f5b4     01 08 07 06 
0f5b8     03 02 02 FF 
0f5bc     FD FC FE FF 
0f5c0     03 01 FD FA | 	byte	$01, $08, $07, $06, $03, $02, $02, $ff, $fd, $fc, $fe, $ff, $03, $01, $fd, $fa
0f5c4     FA FC FF FF 
0f5c8     03 06 08 06 
0f5cc     FF FB F9 FE 
0f5d0     FE FC F9 FC | 	byte	$fa, $fc, $ff, $ff, $03, $06, $08, $06, $ff, $fb, $f9, $fe, $fe, $fc, $f9, $fc
0f5d4     03 0A 08 05 
0f5d8     00 00 FF FF 
0f5dc     FE FF 00 02 
0f5e0     03 00 FC F7 | 	byte	$03, $0a, $08, $05, $00, $00, $ff, $ff, $fe, $ff, $00, $02, $03, $00, $fc, $f7
0f5e4     F7 FC 01 02 
0f5e8     06 07 08 04 
0f5ec     FD F8 FA FD 
0f5f0     00 FD FC FE | 	byte	$f7, $fc, $01, $02, $06, $07, $08, $04, $fd, $f8, $fa, $fd, $00, $fd, $fc, $fe
0f5f4     04 08 06 03 
0f5f8     FF FF FD 00 
0f5fc     01 04 03 04 
0f600     01 FD F9 F6 | 	byte	$04, $08, $06, $03, $ff, $ff, $fd, $00, $01, $04, $03, $04, $01, $fd, $f9, $f6
0f604     F7 FD 03 05 
0f608     09 08 07 01 
0f60c     FB F7 FA FC 
0f610     FF FF FE 01 | 	byte	$f7, $fd, $03, $05, $09, $08, $07, $01, $fb, $f7, $fa, $fc, $ff, $ff, $fe, $01
0f614     05 06 06 03 
0f618     FF FF FD FF 
0f61c     00 03 04 05 
0f620     02 FE F8 F5 | 	byte	$05, $06, $06, $03, $ff, $ff, $fd, $ff, $00, $03, $04, $05, $02, $fe, $f8, $f5
0f624     F7 FD 02 06 
0f628     09 09 06 FF 
0f62c     FA F7 FA FD 
0f630     FE FF 01 04 | 	byte	$f7, $fd, $02, $06, $09, $09, $06, $ff, $fa, $f7, $fa, $fd, $fe, $ff, $01, $04
0f634     07 05 04 00 
0f638     FE FE FD FF 
0f63c     02 04 05 04 
0f640     01 FC F7 F6 | 	byte	$07, $05, $04, $00, $fe, $fe, $fd, $ff, $02, $04, $05, $04, $01, $fc, $f7, $f6
0f644     F9 FF 02 08 
0f648     0A 08 04 FD 
0f64c     F9 F9 FB FC 
0f650     FC FD 02 05 | 	byte	$f9, $ff, $02, $08, $0a, $08, $04, $fd, $f9, $f9, $fb, $fc, $fc, $fd, $02, $05
0f654     08 05 03 00 
0f658     FE FE FE FF 
0f65c     02 04 06 06 
0f660     00 FC F7 F7 | 	byte	$08, $05, $03, $00, $fe, $fe, $fe, $ff, $02, $04, $06, $06, $00, $fc, $f7, $f7
0f664     F9 FF 00 06 
0f668     09 08 03 FC 
0f66c     F9 FC FE FE 
0f670     FB FB 00 06 | 	byte	$f9, $ff, $00, $06, $09, $08, $03, $fc, $f9, $fc, $fe, $fe, $fb, $fb, $00, $06
0f674     08 05 03 00 
0f678     FF FE FD FE 
0f67c     00 02 06 07 
0f680     01 FB F6 F6 | 	byte	$08, $05, $03, $00, $ff, $fe, $fd, $fe, $00, $02, $06, $07, $01, $fb, $f6, $f6
0f684     F9 FE 02 07 
0f688     0A 09 01 FA 
0f68c     F6 FB FE FE 
0f690     FB FC 01 08 | 	byte	$f9, $fe, $02, $07, $0a, $09, $01, $fa, $f6, $fb, $fe, $fe, $fb, $fc, $01, $08
0f694     0A 07 03 00 
0f698     FF FE FC FC 
0f69c     FF 02 07 07 
0f6a0     02 FB F7 F6 | 	byte	$0a, $07, $03, $00, $ff, $fe, $fc, $fc, $ff, $02, $07, $07, $02, $fb, $f7, $f6
0f6a4     F9 FD 01 07 
0f6a8     09 07 00 F9 
0f6ac     F8 FC FF FF 
0f6b0     FC FC 01 08 | 	byte	$f9, $fd, $01, $07, $09, $07, $00, $f9, $f8, $fc, $ff, $ff, $fc, $fc, $01, $08
0f6b4     09 07 03 00 
0f6b8     00 FD FC FC 
0f6bc     FE 01 05 06 
0f6c0     03 FC F7 F7 | 	byte	$09, $07, $03, $00, $00, $fd, $fc, $fc, $fe, $01, $05, $06, $03, $fc, $f7, $f7
0f6c4     FB FF 03 08 
0f6c8     08 05 FE F7 
0f6cc     F8 FC FF FF 
0f6d0     FE FE 01 07 | 	byte	$fb, $ff, $03, $08, $08, $05, $fe, $f7, $f8, $fc, $ff, $ff, $fe, $fe, $01, $07
0f6d4     07 06 03 01 
0f6d8     01 FF FD FE 
0f6dc     FD 00 03 04 
0f6e0     02 FB F7 F8 | 	byte	$07, $06, $03, $01, $01, $ff, $fd, $fe, $fd, $00, $03, $04, $02, $fb, $f7, $f8
0f6e4     FD 01 05 08 
0f6e8     08 03 FB F7 
0f6ec     F9 FE 01 01 
0f6f0     FF FF 01 04 | 	byte	$fd, $01, $05, $08, $08, $03, $fb, $f7, $f9, $fe, $01, $01, $ff, $ff, $01, $04
0f6f4     05 05 03 02 
0f6f8     02 01 FE FE 
0f6fc     FC FE 02 03 
0f700     02 FD FA FA | 	byte	$05, $05, $03, $02, $02, $01, $fe, $fe, $fc, $fe, $02, $03, $02, $fd, $fa, $fa
0f704     FF 01 06 07 
0f708     06 00 FB F7 
0f70c     FA FE 00 00 
0f710     00 01 02 03 | 	byte	$ff, $01, $06, $07, $06, $00, $fb, $f7, $fa, $fe, $00, $00, $00, $01, $02, $03
0f714     03 04 04 03 
0f718     01 00 FF FD 
0f71c     FC FD 01 02 
0f720     00 FE FC FD | 	byte	$03, $04, $04, $03, $01, $00, $ff, $fd, $fc, $fd, $01, $02, $00, $fe, $fc, $fd
0f724     FF 02 06 06 
0f728     04 FF FB F9 
0f72c     FB FE FF 00 
0f730     01 02 04 02 | 	byte	$ff, $02, $06, $06, $04, $ff, $fb, $f9, $fb, $fe, $ff, $00, $01, $02, $04, $02
0f734     02 03 04 05 
0f738     02 FF FE FC 
0f73c     FA FC FF 00 
0f740     FE FE FE 00 | 	byte	$02, $03, $04, $05, $02, $ff, $fe, $fc, $fa, $fc, $ff, $00, $fe, $fe, $fe, $00
0f744     01 04 06 04 
0f748     02 FD FA FA 
0f74c     FD 00 01 00 
0f750     00 02 02 00 | 	byte	$01, $04, $06, $04, $02, $fd, $fa, $fa, $fd, $00, $01, $00, $00, $02, $02, $00
0f754     00 01 05 06 
0f758     05 02 00 FD 
0f75c     FB FC FD FE 
0f760     FD FD FF 02 | 	byte	$00, $01, $05, $06, $05, $02, $00, $fd, $fb, $fc, $fd, $fe, $fd, $fd, $ff, $02
0f764     03 05 06 04 
0f768     00 FB F8 F9 
0f76c     FE 01 02 01 
0f770     01 01 01 00 | 	byte	$03, $05, $06, $04, $00, $fb, $f8, $f9, $fe, $01, $02, $01, $01, $01, $01, $00
0f774     00 01 05 07 
0f778     06 02 FF FC 
0f77c     FC FC FD FC 
0f780     FD FD 00 03 | 	byte	$00, $01, $05, $07, $06, $02, $ff, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $00, $03
0f784     04 06 06 03 
0f788     FF F9 F6 F9 
0f78c     FD 02 02 01 
0f790     01 02 01 00 | 	byte	$04, $06, $06, $03, $ff, $f9, $f6, $f9, $fd, $02, $02, $01, $01, $02, $01, $00
0f794     FF 00 03 05 
0f798     06 03 00 FD 
0f79c     FD FD FC FB 
0f7a0     FC FE 01 04 | 	byte	$ff, $00, $03, $05, $06, $03, $00, $fd, $fd, $fd, $fc, $fb, $fc, $fe, $01, $04
0f7a4     04 06 05 04 
0f7a8     FF F9 F7 FB 
0f7ac     FF 02 01 02 
0f7b0     01 01 FF FF | 	byte	$04, $06, $05, $04, $ff, $f9, $f7, $fb, $ff, $02, $01, $02, $01, $01, $ff, $ff
0f7b4     00 02 03 04 
0f7b8     04 04 00 FD 
0f7bc     FB FC FC FC 
0f7c0     FD FF 02 03 | 	byte	$00, $02, $03, $04, $04, $04, $00, $fd, $fb, $fc, $fc, $fc, $fd, $ff, $02, $03
0f7c4     03 05 04 02 
0f7c8     FE FA FA FD 
0f7cc     01 02 01 01 
0f7d0     01 FF FE FE | 	byte	$03, $05, $04, $02, $fe, $fa, $fa, $fd, $01, $02, $01, $01, $01, $ff, $fe, $fe
0f7d4     00 03 04 03 
0f7d8     03 03 01 FF 
0f7dc     FD FB FB FB 
0f7e0     FE 00 02 03 | 	byte	$00, $03, $04, $03, $03, $03, $01, $ff, $fd, $fb, $fb, $fb, $fe, $00, $02, $03
0f7e4     04 05 04 FF 
0f7e8     FC FA FB FF 
0f7ec     01 02 00 01 
0f7f0     00 FF FE FE | 	byte	$04, $05, $04, $ff, $fc, $fa, $fb, $ff, $01, $02, $00, $01, $00, $ff, $fe, $fe
0f7f4     01 04 04 03 
0f7f8     01 01 00 FF 
0f7fc     FE FB FB FC 
0f800     FF 01 02 02 | 	byte	$01, $04, $04, $03, $01, $01, $00, $ff, $fe, $fb, $fb, $fc, $ff, $01, $02, $02
0f804     03 04 04 FF 
0f808     FC FB FE 00 
0f80c     00 00 FF 00 
0f810     FE FF 00 01 | 	byte	$03, $04, $04, $ff, $fc, $fb, $fe, $00, $00, $00, $ff, $00, $fe, $ff, $00, $01
0f814     02 04 02 02 
0f818     FF 00 00 00 
0f81c     FF FE FC FD 
0f820     FE 01 02 02 | 	byte	$02, $04, $02, $02, $ff, $00, $00, $00, $ff, $fe, $fc, $fd, $fe, $01, $02, $02
0f824     04 04 04 FF 
0f828     FC FB FE FF 
0f82c     00 00 FF 00 
0f830     00 FF 01 01 | 	byte	$04, $04, $04, $ff, $fc, $fb, $fe, $ff, $00, $00, $ff, $00, $00, $ff, $01, $01
0f834     01 01 00 00 
0f838     00 01 01 02 
0f83c     00 FD FB FB 
0f840     FE 02 03 03 | 	byte	$01, $01, $00, $00, $00, $01, $01, $02, $00, $fd, $fb, $fb, $fe, $02, $03, $03
0f844     03 03 01 FE 
0f848     FD FD 00 01 
0f84c     01 FF FF FE 
0f850     FF FF 01 02 | 	byte	$03, $03, $01, $fe, $fd, $fd, $00, $01, $01, $ff, $ff, $fe, $ff, $ff, $01, $02
0f854     01 02 00 01 
0f858     02 02 02 01 
0f85c     FE FC FB FC 
0f860     FF 03 03 04 | 	byte	$01, $02, $00, $01, $02, $02, $02, $01, $fe, $fc, $fb, $fc, $ff, $03, $03, $04
0f864     03 03 00 FC 
0f868     FB FD 00 01 
0f86c     01 00 FF FF 
0f870     FF 00 00 01 | 	byte	$03, $03, $00, $fc, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $ff, $00, $00, $01
0f874     01 00 00 01 
0f878     03 03 02 00 
0f87c     FD FC FB FD 
0f880     00 02 02 03 | 	byte	$01, $00, $00, $01, $03, $03, $02, $00, $fd, $fc, $fb, $fd, $00, $02, $02, $03
0f884     02 02 00 FD 
0f888     FC FE 00 01 
0f88c     00 FE FF FE 
0f890     FE 00 01 02 | 	byte	$02, $02, $00, $fd, $fc, $fe, $00, $01, $00, $fe, $ff, $fe, $fe, $00, $01, $02
0f894     02 01 01 02 
0f898     03 02 01 FE 
0f89c     FB FA FC FF 
0f8a0     02 04 03 02 | 	byte	$02, $01, $01, $02, $03, $02, $01, $fe, $fb, $fa, $fc, $ff, $02, $04, $03, $02
0f8a4     02 01 FE FC 
0f8a8     FD 01 03 03 
0f8ac     01 FE FD FC 
0f8b0     FD FE 00 01 | 	byte	$02, $01, $fe, $fc, $fd, $01, $03, $03, $01, $fe, $fd, $fc, $fd, $fe, $00, $01
0f8b4     02 02 02 03 
0f8b8     04 03 02 FE 
0f8bc     FB F9 FB 00 
0f8c0     04 05 03 02 | 	byte	$02, $02, $02, $03, $04, $03, $02, $fe, $fb, $f9, $fb, $00, $04, $05, $03, $02
0f8c4     02 00 FC FB 
0f8c8     FD 01 03 03 
0f8cc     01 FF FE FE 
0f8d0     FE FF FF 00 | 	byte	$02, $00, $fc, $fb, $fd, $01, $03, $03, $01, $ff, $fe, $fe, $fe, $ff, $ff, $00
0f8d4     01 01 02 04 
0f8d8     05 05 02 FE 
0f8dc     FA F8 FA FF 
0f8e0     03 04 03 03 | 	byte	$01, $01, $02, $04, $05, $05, $02, $fe, $fa, $f8, $fa, $ff, $03, $04, $03, $03
0f8e4     02 FF FC FB 
0f8e8     FE 01 02 02 
0f8ec     01 00 FE FE 
0f8f0     FF FF FF FF | 	byte	$02, $ff, $fc, $fb, $fe, $01, $02, $02, $01, $00, $fe, $fe, $ff, $ff, $ff, $ff
0f8f4     FF 01 03 05 
0f8f8     06 06 02 FE 
0f8fc     FB F8 FB FF 
0f900     03 04 04 03 | 	byte	$ff, $01, $03, $05, $06, $06, $02, $fe, $fb, $f8, $fb, $ff, $03, $04, $04, $03
0f904     00 FC FA FB 
0f908     00 02 04 03 
0f90c     01 00 FD FD 
0f910     FF 00 00 FF | 	byte	$00, $fc, $fa, $fb, $00, $02, $04, $03, $01, $00, $fd, $fd, $ff, $00, $00, $ff
0f914     00 00 02 04 
0f918     05 05 02 FE 
0f91c     FA F9 FC FF 
0f920     03 03 04 03 | 	byte	$00, $00, $02, $04, $05, $05, $02, $fe, $fa, $f9, $fc, $ff, $03, $03, $04, $03
0f924     00 FC FB FD 
0f928     01 03 03 02 
0f92c     00 FE FC FC 
0f930     FF 01 02 01 | 	byte	$00, $fc, $fb, $fd, $01, $03, $03, $02, $00, $fe, $fc, $fc, $ff, $01, $02, $01
0f934     00 00 02 03 
0f938     03 03 01 FF 
0f93c     FC FC FD 01 
0f940     02 03 03 01 | 	byte	$00, $00, $02, $03, $03, $03, $01, $ff, $fc, $fc, $fd, $01, $02, $03, $03, $01
0f944     FE FC FC FE 
0f948     02 03 03 01 
0f94c     FF FD FC FD 
0f950     FF 02 03 03 | 	byte	$fe, $fc, $fc, $fe, $02, $03, $03, $01, $ff, $fd, $fc, $fd, $ff, $02, $03, $03
0f954     00 01 01 02 
0f958     01 01 00 FE 
0f95c     FB FC FE 01 
0f960     03 05 04 00 | 	byte	$00, $01, $01, $02, $01, $01, $00, $fe, $fb, $fc, $fe, $01, $03, $05, $04, $00
0f964     FC FA FC FF 
0f968     02 04 04 02 
0f96c     00 FC FC FC 
0f970     FE 00 02 03 | 	byte	$fc, $fa, $fc, $ff, $02, $04, $04, $02, $00, $fc, $fc, $fc, $fe, $00, $02, $03
0f974     03 03 03 02 
0f978     01 00 FE FC 
0f97c     FA FC FF 04 
0f980     06 06 03 FE | 	byte	$03, $03, $03, $02, $01, $00, $fe, $fc, $fa, $fc, $ff, $04, $06, $06, $03, $fe
0f984     FA F9 FC 01 
0f988     04 06 05 02 
0f98c     FE FB FA FC 
0f990     00 02 03 04 | 	byte	$fa, $f9, $fc, $01, $04, $06, $05, $02, $fe, $fb, $fa, $fc, $00, $02, $03, $04
0f994     04 03 02 FF 
0f998     00 00 FF FB 
0f99c     F9 FC FF 03 
0f9a0     05 05 02 FF | 	byte	$04, $03, $02, $ff, $00, $00, $ff, $fb, $f9, $fc, $ff, $03, $05, $05, $02, $ff
0f9a4     FB FA FD 03 
0f9a8     05 06 04 01 
0f9ac     FD FA F9 FC 
0f9b0     00 02 04 05 | 	byte	$fb, $fa, $fd, $03, $05, $06, $04, $01, $fd, $fa, $f9, $fc, $00, $02, $04, $05
0f9b4     05 04 01 FE 
0f9b8     FF FF FE FB 
0f9bc     FB FC 00 03 
0f9c0     04 04 01 FE | 	byte	$05, $04, $01, $fe, $ff, $ff, $fe, $fb, $fb, $fc, $00, $03, $04, $04, $01, $fe
0f9c4     FB FC FF 03 
0f9c8     05 05 04 00 
0f9cc     FC F9 F8 FB 
0f9d0     FF 03 05 07 | 	byte	$fb, $fc, $ff, $03, $05, $05, $04, $00, $fc, $f9, $f8, $fb, $ff, $03, $05, $07
0f9d4     07 05 01 FD 
0f9d8     FC FC FC FC 
0f9dc     FD FE 01 02 
0f9e0     04 02 00 FD | 	byte	$07, $05, $01, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $01, $02, $04, $02, $00, $fd
0f9e4     FC FE 01 03 
0f9e8     04 04 03 00 
0f9ec     FD FA FA FC 
0f9f0     00 04 06 07 | 	byte	$fc, $fe, $01, $03, $04, $04, $03, $00, $fd, $fa, $fa, $fc, $00, $04, $06, $07
0f9f4     07 04 00 FD 
0f9f8     FB FB FC FD 
0f9fc     FE 00 01 01 
0fa00     01 01 FE FD | 	byte	$07, $04, $00, $fd, $fb, $fb, $fc, $fd, $fe, $00, $01, $01, $01, $01, $fe, $fd
0fa04     FD 00 04 04 
0fa08     03 03 01 00 
0fa0c     FD FA FA FC 
0fa10     FF 03 06 06 | 	byte	$fd, $00, $04, $04, $03, $03, $01, $00, $fd, $fa, $fa, $fc, $ff, $03, $06, $06
0fa14     05 03 FF FD 
0fa18     FC FD FD FE 
0fa1c     FF 01 02 01 
0fa20     00 00 FD FC | 	byte	$05, $03, $ff, $fd, $fc, $fd, $fd, $fe, $ff, $01, $02, $01, $00, $00, $fd, $fc
0fa24     FE 01 05 04 
0fa28     03 02 01 00 
0fa2c     FC F9 FA FB 
0fa30     FF 03 07 08 | 	byte	$fe, $01, $05, $04, $03, $02, $01, $00, $fc, $f9, $fa, $fb, $ff, $03, $07, $08
0fa34     04 01 FD FC 
0fa38     FC FD FD FF 
0fa3c     01 02 03 02 
0fa40     FF FE FD FC | 	byte	$04, $01, $fd, $fc, $fc, $fd, $fd, $ff, $01, $02, $03, $02, $ff, $fe, $fd, $fc
0fa44     FF 02 06 04 
0fa48     03 02 00 FF 
0fa4c     FB FA FA FC 
0fa50     00 03 06 07 | 	byte	$ff, $02, $06, $04, $03, $02, $00, $ff, $fb, $fa, $fa, $fc, $00, $03, $06, $07
0fa54     04 00 FC FC 
0fa58     FD FF FF 00 
0fa5c     01 02 02 01 
0fa60     FE FD FD FD | 	byte	$04, $00, $fc, $fc, $fd, $ff, $ff, $00, $01, $02, $02, $01, $fe, $fd, $fd, $fd
0fa64     00 04 05 03 
0fa68     02 01 01 FF 
0fa6c     FC FB FC FE 
0fa70     00 03 05 06 | 	byte	$00, $04, $05, $03, $02, $01, $01, $ff, $fc, $fb, $fc, $fe, $00, $03, $05, $06
0fa74     04 00 FC FB 
0fa78     FC FE 00 02 
0fa7c     02 03 02 01 
0fa80     FE FC FC FD | 	byte	$04, $00, $fc, $fb, $fc, $fe, $00, $02, $02, $03, $02, $01, $fe, $fc, $fc, $fd
0fa84     01 05 04 03 
0fa88     02 02 01 FD 
0fa8c     FA FA FC 00 
0fa90     02 04 06 05 | 	byte	$01, $05, $04, $03, $02, $02, $01, $fd, $fa, $fa, $fc, $00, $02, $04, $06, $05
0fa94     03 FE FB FA 
0fa98     FC FF 01 03 
0fa9c     04 03 02 00 
0faa0     FE FC FB FD | 	byte	$03, $fe, $fb, $fa, $fc, $ff, $01, $03, $04, $03, $02, $00, $fe, $fc, $fb, $fd
0faa4     01 04 03 02 
0faa8     03 02 01 FD 
0faac     FA FB FD 01 
0fab0     03 05 06 04 | 	byte	$01, $04, $03, $02, $03, $02, $01, $fd, $fa, $fb, $fd, $01, $03, $05, $06, $04
0fab4     01 FD FA FA 
0fab8     FC FE 02 04 
0fabc     05 03 02 00 
0fac0     FE FC FA FC | 	byte	$01, $fd, $fa, $fa, $fc, $fe, $02, $04, $05, $03, $02, $00, $fe, $fc, $fa, $fc
0fac4     01 03 02 02 
0fac8     03 03 01 FD 
0facc     F9 FA FD 01 
0fad0     05 07 06 04 | 	byte	$01, $03, $02, $02, $03, $03, $01, $fd, $f9, $fa, $fd, $01, $05, $07, $06, $04
0fad4     00 FD FB FA 
0fad8     FC FE 02 05 
0fadc     06 04 02 00 
0fae0     FD FC FA FD | 	byte	$00, $fd, $fb, $fa, $fc, $fe, $02, $05, $06, $04, $02, $00, $fd, $fc, $fa, $fd
0fae4     01 02 02 02 
0fae8     02 03 00 FD 
0faec     FA FB FE 02 
0faf0     06 07 05 02 | 	byte	$01, $02, $02, $02, $02, $03, $00, $fd, $fa, $fb, $fe, $02, $06, $07, $05, $02
0faf4     00 FD FB FB 
0faf8     FC FE 01 03 
0fafc     03 02 02 01 
0fb00     FF FD FC FF | 	byte	$00, $fd, $fb, $fb, $fc, $fe, $01, $03, $03, $02, $02, $01, $ff, $fd, $fc, $ff
0fb04     01 01 FF 01 
0fb08     02 02 01 FD 
0fb0c     FC FC FF 03 
0fb10     05 06 04 01 | 	byte	$01, $01, $ff, $01, $02, $02, $01, $fd, $fc, $fc, $ff, $03, $05, $06, $04, $01
0fb14     FE FC FA FB 
0fb18     FD FF 01 02 
0fb1c     02 02 01 01 
0fb20     00 FF FF 00 | 	byte	$fe, $fc, $fa, $fb, $fd, $ff, $01, $02, $02, $02, $01, $01, $00, $ff, $ff, $00
0fb24     01 FF FF FF 
0fb28     00 01 00 FD 
0fb2c     FD FD 00 03 
0fb30     05 06 05 02 | 	byte	$01, $ff, $ff, $ff, $00, $01, $00, $fd, $fd, $fd, $00, $03, $05, $06, $05, $02
0fb34     FE FC FA FC 
0fb38     FD FE 01 02 
0fb3c     02 02 01 00 
0fb40     FF FE 00 01 | 	byte	$fe, $fc, $fa, $fc, $fd, $fe, $01, $02, $02, $02, $01, $00, $ff, $fe, $00, $01
0fb44     02 FF FF FF 
0fb48     00 01 FF FE 
0fb4c     FE FF 00 02 
0fb50     05 06 04 02 | 	byte	$02, $ff, $ff, $ff, $00, $01, $ff, $fe, $fe, $ff, $00, $02, $05, $06, $04, $02
0fb54     FE FD FB FC 
0fb58     FE FF 00 00 
0fb5c     00 01 01 00 
0fb60     FF 00 02 02 | 	byte	$fe, $fd, $fb, $fc, $fe, $ff, $00, $00, $00, $01, $01, $00, $ff, $00, $02, $02
0fb64     02 FE FD FD 
0fb68     FE 00 00 01 
0fb6c     01 01 01 02 
0fb70     03 03 03 01 | 	byte	$02, $fe, $fd, $fd, $fe, $00, $00, $01, $01, $01, $01, $02, $03, $03, $03, $01
0fb74     FE FD FD FE 
0fb78     FE FF FF FE 
0fb7c     FE 00 00 00 
0fb80     00 01 03 04 | 	byte	$fe, $fd, $fd, $fe, $fe, $ff, $ff, $fe, $fe, $00, $00, $00, $00, $01, $03, $04
0fb84     01 FE FD FD 
0fb88     FD FE FF 00 
0fb8c     02 03 02 01 
0fb90     01 01 01 00 | 	byte	$01, $fe, $fd, $fd, $fd, $fe, $ff, $00, $02, $03, $02, $01, $01, $01, $01, $00
0fb94     FE FE FE FF 
0fb98     FF 00 FF FE 
0fb9c     FF 00 00 FF 
0fba0     00 01 03 03 | 	byte	$fe, $fe, $fe, $ff, $ff, $00, $ff, $fe, $ff, $00, $00, $ff, $00, $01, $03, $03
0fba4     01 FE FE FD 
0fba8     FD FD FE 00 
0fbac     02 04 04 03 
0fbb0     01 00 00 FF | 	byte	$01, $fe, $fe, $fd, $fd, $fd, $fe, $00, $02, $04, $04, $03, $01, $00, $00, $ff
0fbb4     FF FE FF 00 
0fbb8     00 00 FF FE 
0fbbc     FF FF 00 FF 
0fbc0     00 02 03 03 | 	byte	$ff, $fe, $ff, $00, $00, $00, $ff, $fe, $ff, $ff, $00, $ff, $00, $02, $03, $03
0fbc4     01 FF FE FD 
0fbc8     FD FD FF 02 
0fbcc     03 05 04 03 
0fbd0     01 00 FE FE | 	byte	$01, $ff, $fe, $fd, $fd, $fd, $ff, $02, $03, $05, $04, $03, $01, $00, $fe, $fe
0fbd4     FF FF 00 01 
0fbd8     00 FF FE FD 
0fbdc     00 00 FF FF 
0fbe0     FF 02 03 02 | 	byte	$ff, $ff, $00, $01, $00, $ff, $fe, $fd, $00, $00, $ff, $ff, $ff, $02, $03, $02
0fbe4     01 00 FE FD 
0fbe8     FD FD FE 02 
0fbec     04 04 03 02 
0fbf0     01 FF FE FD | 	byte	$01, $00, $fe, $fd, $fd, $fd, $fe, $02, $04, $04, $03, $02, $01, $ff, $fe, $fd
0fbf4     FE 00 02 01 
0fbf8     00 FE FD FE 
0fbfc     00 01 FF FE 
0fc00     FF 01 03 02 | 	byte	$fe, $00, $02, $01, $00, $fe, $fd, $fe, $00, $01, $ff, $fe, $ff, $01, $03, $02
0fc04     01 00 FF FE 
0fc08     FD FE FF 02 
0fc0c     04 03 02 02 
0fc10     01 FF FD FD | 	byte	$01, $00, $ff, $fe, $fd, $fe, $ff, $02, $04, $03, $02, $02, $01, $ff, $fd, $fd
0fc14     FE 00 02 01 
0fc18     FF FE FE 00 
0fc1c     01 01 FF FD 
0fc20     FD FF 02 03 | 	byte	$fe, $00, $02, $01, $ff, $fe, $fe, $00, $01, $01, $ff, $fd, $fd, $ff, $02, $03
0fc24     02 02 01 FE 
0fc28     FD FD FF 01 
0fc2c     03 03 03 02 
0fc30     01 00 FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $03, $03, $02, $01, $00, $fd, $fd
0fc34     FD 01 02 02 
0fc38     00 FE FE 00 
0fc3c     02 02 FF FD 
0fc40     FC FF 02 02 | 	byte	$fd, $01, $02, $02, $00, $fe, $fe, $00, $02, $02, $ff, $fd, $fc, $ff, $02, $02
0fc44     02 02 01 FE 
0fc48     FD FD FF 01 
0fc4c     03 04 04 03 
0fc50     01 FF FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $04, $04, $03, $01, $ff, $fd, $fd
0fc54     FD 00 02 01 
0fc58     00 FE FE 00 
0fc5c     02 01 FF FD 
0fc60     FD FF 02 02 | 	byte	$fd, $00, $02, $01, $00, $fe, $fe, $00, $02, $01, $ff, $fd, $fd, $ff, $02, $02
0fc64     03 03 02 FF 
0fc68     FD FD FE 00 
0fc6c     01 03 05 04 
0fc70     02 FE FD FD | 	byte	$03, $03, $02, $ff, $fd, $fd, $fe, $00, $01, $03, $05, $04, $02, $fe, $fd, $fd
0fc74     FD 00 01 01 
0fc78     00 FF FF 01 
0fc7c     02 01 FF FE 
0fc80     FE FF 01 01 | 	byte	$fd, $00, $01, $01, $00, $ff, $ff, $01, $02, $01, $ff, $fe, $fe, $ff, $01, $01
0fc84     02 03 01 FF 
0fc88     FD FD FE 01 
0fc8c     02 03 06 04 
0fc90     01 FE FC FC | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $01, $02, $03, $06, $04, $01, $fe, $fc, $fc
0fc94     FE 02 02 02 
0fc98     01 FF FF 00 
0fc9c     00 FF FE FE 
0fca0     FF 00 01 01 | 	byte	$fe, $02, $02, $02, $01, $ff, $ff, $00, $00, $ff, $fe, $fe, $ff, $00, $01, $01
0fca4     02 03 01 FF 
0fca8     FD FD FE 00 
0fcac     02 03 05 04 
0fcb0     01 FE FC FD | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $00, $02, $03, $05, $04, $01, $fe, $fc, $fd
0fcb4     FF 02 02 01 
0fcb8     FF FF 00 01 
0fcbc     01 FF FE FF 
0fcc0     00 01 00 FF | 	byte	$ff, $02, $02, $01, $ff, $ff, $00, $01, $01, $ff, $fe, $ff, $00, $01, $00, $ff
0fcc4     01 01 01 FF 
0fcc8     FE FF FF 01 
0fccc     01 02 02 02 
0fcd0     00 FF FE FE | 	byte	$01, $01, $01, $ff, $fe, $ff, $ff, $01, $01, $02, $02, $02, $00, $ff, $fe, $fe
0fcd4     00 02 01 FF 
0fcd8     FD FE 00 02 
0fcdc     01 FE FD FE 
0fce0     00 01 00 00 | 	byte	$00, $02, $01, $ff, $fd, $fe, $00, $02, $01, $fe, $fd, $fe, $00, $01, $00, $00
0fce4     01 01 00 FF 
0fce8     FF FF 00 01 
0fcec     01 02 01 01 
0fcf0     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $ff, $00, $01, $01, $02, $01, $01, $01, $00, $ff, $ff
0fcf4     01 01 FF FD 
0fcf8     FC FE 03 04 
0fcfc     03 FF FE FE 
0fd00     FF 00 FE FF | 	byte	$01, $01, $ff, $fd, $fc, $fe, $03, $04, $03, $ff, $fe, $fe, $ff, $00, $fe, $ff
0fd04     01 01 00 FF 
0fd08     FF 00 01 02 
0fd0c     01 01 00 01 
0fd10     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $00, $01, $02, $01, $01, $00, $01, $01, $00, $ff, $ff
0fd14     01 02 00 FD 
0fd18     FC FE 03 05 
0fd1c     03 FF FD FE 
0fd20     FE FE FE FF | 	byte	$01, $02, $00, $fd, $fc, $fe, $03, $05, $03, $ff, $fd, $fe, $fe, $fe, $fe, $ff
0fd24     01 01 00 FE 
0fd28     FF 01 02 02 
0fd2c     01 00 FF 00 
0fd30     01 00 00 01 | 	byte	$01, $01, $00, $fe, $ff, $01, $02, $02, $01, $00, $ff, $00, $01, $00, $00, $01
0fd34     02 02 FF FC 
0fd38     FB FE 03 05 
0fd3c     04 00 FE FD 
0fd40     FD FC FD 00 | 	byte	$02, $02, $ff, $fc, $fb, $fe, $03, $05, $04, $00, $fe, $fd, $fd, $fc, $fd, $00
0fd44     02 02 00 FF 
0fd48     00 00 01 02 
0fd4c     01 00 FF FF 
0fd50     00 01 01 02 | 	byte	$02, $02, $00, $ff, $00, $00, $01, $02, $01, $00, $ff, $ff, $00, $01, $01, $02
0fd54     02 01 FE FB 
0fd58     FB FE 02 05 
0fd5c     04 02 FF FE 
0fd60     FC FB FC FF | 	byte	$02, $01, $fe, $fb, $fb, $fe, $02, $05, $04, $02, $ff, $fe, $fc, $fb, $fc, $ff
0fd64     01 02 02 01 
0fd68     01 00 01 01 
0fd6c     01 FF FF FF 
0fd70     00 01 02 03 | 	byte	$01, $02, $02, $01, $01, $00, $01, $01, $01, $ff, $ff, $ff, $00, $01, $02, $03
0fd74     03 01 FD FB 
0fd78     FB FE 02 04 
0fd7c     04 04 01 FF 
0fd80     FD FB FC FE | 	byte	$03, $01, $fd, $fb, $fb, $fe, $02, $04, $04, $04, $01, $ff, $fd, $fb, $fc, $fe
0fd84     00 01 02 02 
0fd88     02 01 01 00 
0fd8c     00 FF FF FF 
0fd90     00 01 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $01, $00, $00, $ff, $ff, $ff, $00, $01, $02, $03
0fd94     04 01 FD FB 
0fd98     FB FF 02 03 
0fd9c     03 03 02 FF 
0fda0     FC FA FC FF | 	byte	$04, $01, $fd, $fb, $fb, $ff, $02, $03, $03, $03, $02, $ff, $fc, $fa, $fc, $ff
0fda4     00 01 02 02 
0fda8     02 01 00 FF 
0fdac     FF FF 00 00 
0fdb0     00 00 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $00, $ff, $ff, $ff, $00, $00, $00, $00, $02, $03
0fdb4     03 00 FD FB 
0fdb8     FC 00 01 02 
0fdbc     02 02 02 FF 
0fdc0     FB FA FD 00 | 	byte	$03, $00, $fd, $fb, $fc, $00, $01, $02, $02, $02, $02, $ff, $fb, $fa, $fd, $00
0fdc4     01 02 02 03 
0fdc8     02 01 00 FE 
0fdcc     FD FF 00 01 
0fdd0     02 01 02 03 | 	byte	$01, $02, $02, $03, $02, $01, $00, $fe, $fd, $ff, $00, $01, $02, $01, $02, $03
0fdd4     02 FF FC FB 
0fdd8     FD 00 03 02 
0fddc     02 02 00 FE 
0fde0     FA F9 FD FF | 	byte	$02, $ff, $fc, $fb, $fd, $00, $03, $02, $02, $02, $00, $fe, $fa, $f9, $fd, $ff
0fde4     02 02 03 03 
0fde8     03 02 00 FE 
0fdec     FD FE 00 01 
0fdf0     02 02 03 04 | 	byte	$02, $02, $03, $03, $03, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $04
0fdf4     02 00 FC FB 
0fdf8     FC FF 01 02 
0fdfc     03 03 01 FF 
0fe00     FB FA FD FF | 	byte	$02, $00, $fc, $fb, $fc, $ff, $01, $02, $03, $03, $01, $ff, $fb, $fa, $fd, $ff
0fe04     01 02 03 03 
0fe08     03 02 FF FE 
0fe0c     FD FE FF 01 
0fe10     01 02 03 03 | 	byte	$01, $02, $03, $03, $03, $02, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $03, $03
0fe14     02 00 FD FB 
0fe18     FD FE 00 01 
0fe1c     03 03 01 FE 
0fe20     FC FB FD FE | 	byte	$02, $00, $fd, $fb, $fd, $fe, $00, $01, $03, $03, $01, $fe, $fc, $fb, $fd, $fe
0fe24     00 02 03 04 
0fe28     04 02 00 FE 
0fe2c     FD FE 00 01 
0fe30     02 02 03 02 | 	byte	$00, $02, $03, $04, $04, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $02
0fe34     00 FE FC FC 
0fe38     FE 00 01 02 
0fe3c     03 02 00 FE 
0fe40     FC FD FE FF | 	byte	$00, $fe, $fc, $fc, $fe, $00, $01, $02, $03, $02, $00, $fe, $fc, $fd, $fe, $ff
0fe44     00 01 02 03 
0fe48     04 02 00 FF 
0fe4c     FE FF 00 01 
0fe50     01 01 02 02 | 	byte	$00, $01, $02, $03, $04, $02, $00, $ff, $fe, $ff, $00, $01, $01, $01, $02, $02
0fe54     FF FE FE FF 
0fe58     FF 00 00 01 
0fe5c     01 01 FF FE 
0fe60     FD FF 00 FF | 	byte	$ff, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $01, $ff, $fe, $fd, $ff, $00, $ff
0fe64     00 FF 02 03 
0fe68     03 01 00 FF 
0fe6c     00 00 01 01 
0fe70     01 02 02 01 | 	byte	$00, $ff, $02, $03, $03, $01, $00, $ff, $00, $00, $01, $01, $01, $02, $02, $01
0fe74     FF FD FE FF 
0fe78     00 01 00 00 
0fe7c     00 FF FE FC 
0fe80     FE 00 01 01 | 	byte	$ff, $fd, $fe, $ff, $00, $01, $00, $00, $00, $ff, $fe, $fc, $fe, $00, $01, $01
0fe84     00 00 01 02 
0fe88     02 01 FF FF 
0fe8c     FF 00 01 01 
0fe90     01 01 01 FF | 	byte	$00, $00, $01, $02, $02, $01, $ff, $ff, $ff, $00, $01, $01, $01, $01, $01, $ff
0fe94     FD FC FE 00 
0fe98     02 03 02 01 
0fe9c     FF FE FD FC 
0fea0     FD 00 01 02 | 	byte	$fd, $fc, $fe, $00, $02, $03, $02, $01, $ff, $fe, $fd, $fc, $fd, $00, $01, $02
0fea4     01 01 01 01 
0fea8     01          | 	byte	$01[5]
0fea9     00 FF FE FF 
0fead     01 02 02 02 
0feb1     01 00 FE FC 
0feb5     FC FE 01 04 | 	byte	$00, $ff, $fe, $ff, $01, $02, $02, $02, $01, $00, $fe, $fc, $fc, $fe, $01, $04
0feb9     04 02 00 FD 
0febd     FC FC FC FE 
0fec1     00 02 03 01 
0fec5     00 00 00 00 | 	byte	$04, $02, $00, $fd, $fc, $fc, $fc, $fe, $00, $02, $03, $01, $00, $00, $00, $00
0fec9     01 00 FF 00 
0fecd     00 01 01 01 
0fed1     01 00 FD FC 
0fed5     FC FF 02 05 | 	byte	$01, $00, $ff, $00, $00, $01, $01, $01, $01, $00, $fd, $fc, $fc, $ff, $02, $05
0fed9     05 03 01 FE 
0fedd     FC FB FB FD 
0fee1     00 02 03 02 
0fee5     01 00 00 00 | 	byte	$05, $03, $01, $fe, $fc, $fb, $fb, $fd, $00, $02, $03, $02, $01, $00, $00, $00
0fee9     00 FF FF 00 
0feed     01 02 01 01 
0fef1     01 FE FD FC 
0fef5     FD 00 03 05 | 	byte	$00, $ff, $ff, $00, $01, $02, $01, $01, $01, $fe, $fd, $fc, $fd, $00, $03, $05
0fef9     04 03 01 FE 
0fefd     FC F9 FA FD 
0ff01     00 03 04 03 
0ff05     01 FF FE FE | 	byte	$04, $03, $01, $fe, $fc, $f9, $fa, $fd, $00, $03, $04, $03, $01, $ff, $fe, $fe
0ff09     FF FF 00 01 
0ff0d     03 03 01 00 
0ff11     FF FD FC FC 
0ff15     FE 02 04 05 | 	byte	$ff, $ff, $00, $01, $03, $03, $01, $00, $ff, $fd, $fc, $fc, $fe, $02, $04, $05
0ff19     04 03 01 FF 
0ff1d     FB F9 FA FE 
0ff21     01 03 04 04 
0ff25     02 FF FE FC | 	byte	$04, $03, $01, $ff, $fb, $f9, $fa, $fe, $01, $03, $04, $04, $02, $ff, $fe, $fc
0ff29     FD FF 01 03 
0ff2d     04 04 02 00 
0ff31     FE FC FB FC 
0ff35     FF 03 05 05 | 	byte	$fd, $ff, $01, $03, $04, $04, $02, $00, $fe, $fc, $fb, $fc, $ff, $03, $05, $05
0ff39     04 03 00 FE 
0ff3d     FB F9 FB FE 
0ff41     01 03 03 03 
0ff45     01 00 FE FD | 	byte	$04, $03, $00, $fe, $fb, $f9, $fb, $fe, $01, $03, $03, $03, $01, $00, $fe, $fd
0ff49     FC FE 02 04 
0ff4d     05 04 02 01 
0ff51     FE FB FA FB 
0ff55     FF 03 05 05 | 	byte	$fc, $fe, $02, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $ff, $03, $05, $05
0ff59     05 03 01 FE 
0ff5d     FB FA FB FD 
0ff61     00 02 03 02 
0ff65     01 01 FF FE | 	byte	$05, $03, $01, $fe, $fb, $fa, $fb, $fd, $00, $02, $03, $02, $01, $01, $ff, $fe
0ff69     FC FE 01 04 
0ff6d     05 04 02 01 
0ff71     FE FB FA FB 
0ff75     00 03 05 05 | 	byte	$fc, $fe, $01, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $00, $03, $05, $05
0ff79     04 02 00 FE 
0ff7d     FC FC FD FF 
0ff81     00 01 01 00 
0ff85     01 01 00 FE | 	byte	$04, $02, $00, $fe, $fc, $fc, $fd, $ff, $00, $01, $01, $00, $01, $01, $00, $fe
0ff89     FD FE 00 03 
0ff8d     04 04 03 02 
0ff91     FE FB FA FC 
0ff95     00 03 05 04 | 	byte	$fd, $fe, $00, $03, $04, $04, $03, $02, $fe, $fb, $fa, $fc, $00, $03, $05, $04
0ff99     03 02 FF FE 
0ff9d     FC FD FE 00 
0ffa1     00 00 00 00 
0ffa5     01 01 01 FF | 	byte	$03, $02, $ff, $fe, $fc, $fd, $fe, $00, $00, $00, $00, $00, $01, $01, $01, $ff
0ffa9     FE FE 00 03 
0ffad     03 04 03 01 
0ffb1     FD FA FA FD 
0ffb5     01 04 04 04 | 	byte	$fe, $fe, $00, $03, $03, $04, $03, $01, $fd, $fa, $fa, $fd, $01, $04, $04, $04
0ffb9     03 01 FF FD 
0ffbd     FB FD 00 01 
0ffc1     01 00 FF FF 
0ffc5     00 00 00 FF | 	byte	$03, $01, $ff, $fd, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff
0ffc9     FF FF 01 03 
0ffcd     04 04 03 00 
0ffd1     FC FA FA FE 
0ffd5     01 04 05 04 | 	byte	$ff, $ff, $01, $03, $04, $04, $03, $00, $fc, $fa, $fa, $fe, $01, $04, $05, $04
0ffd9     03 00 FE FC 
0ffdd     FC FE 00 02 
0ffe1     01 00 FF FF 
0ffe5     00 00 00 FF | 	byte	$03, $00, $fe, $fc, $fc, $fe, $00, $02, $01, $00, $ff, $ff, $00, $00, $00, $ff
0ffe9     FF 00 01 03 
0ffed     03 04 03 00 
0fff1     FC FA FB FD 
0fff5     01 03 04 04 | 	byte	$ff, $00, $01, $03, $03, $04, $03, $00, $fc, $fa, $fb, $fd, $01, $03, $04, $04
0fff9     03 01 FE FC 
0fffd     FC FE 00 01 
10001     01 00 FF 00 
10005     00 00 00 FE | 	byte	$03, $01, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $fe
10009     FF 00 02 03 
1000d     05 04 03 FF 
10011     FC FA FB FE 
10015     01 04 04 04 | 	byte	$ff, $00, $02, $03, $05, $04, $03, $ff, $fc, $fa, $fb, $fe, $01, $04, $04, $04
10019     02 00 FE FC 
1001d     FC FE 00 01 
10021     01 00 FF FF 
10025     01 01 01 FF | 	byte	$02, $00, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $ff, $01, $01, $01, $ff
10029     FF FF 01 02 
1002d     03 04 02 FF 
10031     FC FB FC FF 
10035     01 03 03 04 | 	byte	$ff, $ff, $01, $02, $03, $04, $02, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $04
10039     02 00 FD FC 
1003d     FD FF 00 01 
10041     01 00 FF 00 
10045     00 00 00 FF | 	byte	$02, $00, $fd, $fc, $fd, $ff, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $ff
10049     00 00 01 02 
1004d     03 03 01 FE 
10051     FC FC FD 00 
10055     01 03 03 03 | 	byte	$00, $00, $01, $02, $03, $03, $01, $fe, $fc, $fc, $fd, $00, $01, $03, $03, $03
10059     01 FF FD FC 
1005d     FD FF 00 01 
10061     00 00 00 01 
10065     01 00 FF FF | 	byte	$01, $ff, $fd, $fc, $fd, $ff, $00, $01, $00, $00, $00, $01, $01, $00, $ff, $ff
10069     00 01 02 02 
1006d     02 01 FF FC 
10071     FB FC FF 01 
10075     03 03 03 02 | 	byte	$00, $01, $02, $02, $02, $01, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $03, $02
10079     01 FE FC FC 
1007d     FD FF 01 01 
10081     00 00 00 00 
10085     00 FF FF FF | 	byte	$01, $fe, $fc, $fc, $fd, $ff, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $ff
10089     00 01 02 02 
1008d     02 00 FE FC 
10091     FC FD 01 02 
10095     03 03 02 01 | 	byte	$00, $01, $02, $02, $02, $00, $fe, $fc, $fc, $fd, $01, $02, $03, $03, $02, $01
10099     00 FE FD FD 
1009d     FE FF 00 00 
100a1     00 00 00 01 
100a5     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fe, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
100a9     01 02 02 02 
100ad     01 00 FD FB 
100b1     FB FD 01 03 
100b5     04 04 02 01 | 	byte	$01, $02, $02, $02, $01, $00, $fd, $fb, $fb, $fd, $01, $03, $04, $04, $02, $01
100b9     00 FE FD FD 
100bd     FD FF 00 00 
100c1     00 00 00 01 
100c5     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fd, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
100c9     01 03 03 02 
100cd     00 FF FC FA 
100d1     FB FE 02 04 
100d5     05 04 01 00 | 	byte	$01, $03, $03, $02, $00, $ff, $fc, $fa, $fb, $fe, $02, $04, $05, $04, $01, $00
100d9     FF FF FE FF 
100dd     FF 00 00 FF 
100e1     FF FE FE 00 
100e5     01 01 01 01 | 	byte	$ff, $ff, $fe, $ff, $ff, $00, $00, $ff, $ff, $fe, $fe, $00, $01, $01, $01, $01
100e9     01 03 02 01 
100ed     00 FE FC FC 
100f1     FD 00 03 04 
100f5     05 03 00 FF | 	byte	$01, $03, $02, $01, $00, $fe, $fc, $fc, $fd, $00, $03, $04, $05, $03, $00, $ff
100f9     FE FF 00 01 
100fd     01 01 00 FF 
10101     FE FE FE FF 
10105     01 01 01 01 | 	byte	$fe, $ff, $00, $01, $01, $01, $00, $ff, $fe, $fe, $fe, $ff, $01, $01, $01, $01
10109     02 02 02 01 
1010d     00 FD FC FC 
10111     FE 01 03 04 
10115     04 02 00 FE | 	byte	$02, $02, $02, $01, $00, $fd, $fc, $fc, $fe, $01, $03, $04, $04, $02, $00, $fe
10119     FD FE FF 00 
1011d     01 01 00 FF 
10121     FE FD FE FF 
10125     01 01 02 02 | 	byte	$fd, $fe, $ff, $00, $01, $01, $00, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $02
10129     02 02 01 01 
1012d     FF FD FC FD 
10131     FF 01 02 03 
10135     03 02 00 FF | 	byte	$02, $02, $01, $01, $ff, $fd, $fc, $fd, $ff, $01, $02, $03, $03, $02, $00, $ff
10139     FE FE FE FF 
1013d     01 02 00 FF 
10141     FF FF FF 00 
10145     00 00 01 01 | 	byte	$fe, $fe, $fe, $ff, $01, $02, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $01
10149     01 02 02 02 
1014d     01 FD FC FC 
10151     FE 00 02 02 
10155     03 02 02 01 | 	byte	$01, $02, $02, $02, $01, $fd, $fc, $fc, $fe, $00, $02, $02, $03, $02, $02, $01
10159     FF FE FD FE 
1015d     00 01 01 01 
10161     FF 00 00 00 
10165     FF FF 00 00 | 	byte	$ff, $fe, $fd, $fe, $00, $01, $01, $01, $ff, $00, $00, $00, $ff, $ff, $00, $00
10169     01 01 01 01 
1016d     01          | 	byte	$01[5]
1016e     FE FD FD FF 
10172     01 02 02 02 
10176     02 02 01 00 
1017a     FD FC FD 00 | 	byte	$fe, $fd, $fd, $ff, $01, $02, $02, $02, $02, $02, $01, $00, $fd, $fc, $fd, $00
1017e     01 01 00 00 
10182     00 01 01 00 
10186     00 00 00 01 
1018a     FF 00 01 00 | 	byte	$01, $01, $00, $00, $00, $01, $01, $00, $00, $00, $00, $01, $ff, $00, $01, $00
1018e     FF FE FE 00 
10192     01 02 02 01 
10196     01 02 01 00 
1019a     FD FC FD 00 | 	byte	$ff, $fe, $fe, $00, $01, $02, $02, $01, $01, $02, $01, $00, $fd, $fc, $fd, $00
1019e     01 02 01 00 
101a2     00 00 01 00 
101a6     00 01 01 00 
101aa     FF FF 00 00 | 	byte	$01, $02, $01, $00, $00, $00, $01, $00, $00, $01, $01, $00, $ff, $ff, $00, $00
101ae     FF FF FF 01 
101b2     01 01 01 00 
101b6     01 02 02 00 
101ba     FD FC FC FF | 	byte	$ff, $ff, $ff, $01, $01, $01, $01, $00, $01, $02, $02, $00, $fd, $fc, $fc, $ff
101be     00 01 01 00 
101c2     00 01 01 00 
101c6     00 01 01 01 
101ca     00 FF FF FE | 	byte	$00, $01, $01, $00, $00, $01, $01, $00, $00, $01, $01, $01, $00, $ff, $ff, $fe
101ce     FE FF 00 01 
101d2     02 01 01 00 
101d6     01 02 01 00 
101da     FE FD FD FF | 	byte	$fe, $ff, $00, $01, $02, $01, $01, $00, $01, $02, $01, $00, $fe, $fd, $fd, $ff
101de     00 01 00 00 
101e2     00 01 01 01 
101e6     00 00 01 00 
101ea     00 FF FF FD | 	byte	$00, $01, $00, $00, $00, $01, $01, $01, $00, $00, $01, $00, $00, $ff, $ff, $fd
101ee     FE 00 01 02 
101f2     02 00 01 00 
101f6     01 01 01 00 
101fa     FE FD FD FE | 	byte	$fe, $00, $01, $02, $02, $00, $01, $00, $01, $01, $01, $00, $fe, $fd, $fd, $fe
101fe     FF 00 00 01 
10202     01 01 00 00 
10206     00 00 00 00 
1020a     00 00 FE FE | 	byte	$ff, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $fe
1020e     FE FF 01 02 
10212     02 01 00 00 
10216     00 01 00 00 
1021a     FE FE FF FE | 	byte	$fe, $ff, $01, $02, $02, $01, $00, $00, $00, $01, $00, $00, $fe, $fe, $ff, $fe
1021e     FF FF 00 01 
10222     01 01 01 00 
10226     00 FF FF 00 
1022a     00 00 FF FE | 	byte	$ff, $ff, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $00, $00, $00, $ff, $fe
1022e     FF 00 01 01 
10232     01 00 00 00 
10236     01 01 00 00 
1023a     FF FE FE FE | 	byte	$ff, $00, $01, $01, $01, $00, $00, $00, $01, $01, $00, $00, $ff, $fe, $fe, $fe
1023e     FF FF 00 01 
10242     02 02 01 01 
10246     00 FF FF 00 
1024a     00 00 FF FF | 	byte	$ff, $ff, $00, $01, $02, $02, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff, $ff
1024e     FF 00 01 01 
10252     01 00 FF 00 
10256     00 00 00 00 
1025a     FF FF FF FF | 	byte	$ff, $00, $01, $01, $01, $00, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff
1025e     FF FF FF 00 
10262     01 02 01 01 
10266     00 00 FF FF 
1026a     00 FF FF FF | 	byte	$ff, $ff, $ff, $00, $01, $02, $01, $01, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1026e     00 00 00 01 
10272     01 01 00 00 
10276     00 00 00 FF 
1027a     FF 00 FF FF | 	byte	$00, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $00, $ff, $ff
1027e     FF FF FF 00 
10282     01 02 02 01 
10286     00 00 FF FF 
1028a     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $01, $02, $02, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00
1028e     00 00 00 00 
10292     00          | 	byte	$00[5]
10293     01 00 00 00 
10297     00 00 FF FF 
1029b     FF FF FF 00 
1029f     FF 00 01 02 | 	byte	$01, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $00, $01, $02
102a3     01 01 01 00 
102a7     00 00 00 00 
102ab     00 00 01 00 
102af     00 00 00 F6 | 	byte	$01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $f6
102b3     F7 F8 F8 F8 
102b7     F9 FA FB FC 
102bb     FC FC FC FD 
102bf     F9 F0 E6 DF | 	byte	$f7, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fc, $fc, $fc, $fd, $f9, $f0, $e6, $df
102c3     DC DB DB DC 
102c7     DE E2 E5 E7 
102cb     E8 EA EB EC 
102cf     EF F3 F6 F8 | 	byte	$dc, $db, $db, $dc, $de, $e2, $e5, $e7, $e8, $ea, $eb, $ec, $ef, $f3, $f6, $f8
102d3     F9 FA FB FC 
102d7     FF 03 05 06 
102db     07 08 08 09 
102df     0A 0B 09 07 | 	byte	$f9, $fa, $fb, $fc, $ff, $03, $05, $06, $07, $08, $08, $09, $0a, $0b, $09, $07
102e3     04 02 01 02 
102e7     05 08 09 0A 
102eb     09 09 08 08 
102ef     0B 06 00 FF | 	byte	$04, $02, $01, $02, $05, $08, $09, $0a, $09, $09, $08, $08, $0b, $06, $00, $ff
102f3     00 01 02 04 
102f7     08 0D 0E 0F 
102fb     0F 0F 0F 0F 
102ff     11 10 0B 07 | 	byte	$00, $01, $02, $04, $08, $0d, $0e, $0f, $0f, $0f, $0f, $0f, $11, $10, $0b, $07
10303     04 03 03 03 
10307     07 0A 09 08 
1030b     07 06 06 09 
1030f     12 1B 1E 1F | 	byte	$04, $03, $03, $03, $07, $0a, $09, $08, $07, $06, $06, $09, $12, $1b, $1e, $1f
10313     20 20 20 22 
10317     28 2D 2E 2D 
1031b     2C 2B 2A 0F 
1031f     D0 B4 B4 B8 | 	byte	$20, $20, $20, $22, $28, $2d, $2e, $2d, $2c, $2b, $2a, $0f, $d0, $b4, $b4, $b8
10323     BC C0 C4 CA 
10327     D4 DA DD DE 
1032b     E0 E2 E3 E8 
1032f     F2 F4 F3 F4 | 	byte	$bc, $c0, $c4, $ca, $d4, $da, $dd, $de, $e0, $e2, $e3, $e8, $f2, $f4, $f3, $f4
10333     F5 F7 F8 FD 
10337     04 06 05 05 
1033b     06 06 08 0E 
1033f     1C 22 23 22 | 	byte	$f5, $f7, $f8, $fd, $04, $06, $05, $05, $06, $06, $08, $0e, $1c, $22, $23, $22
10343     21 20 20 24 
10347     29 2A 28 26 
1034b     24 23 23 2A 
1034f     38 3C 3B 39 | 	byte	$21, $20, $20, $24, $29, $2a, $28, $26, $24, $23, $23, $2a, $38, $3c, $3b, $39
10353     37 35 34 39 
10357     41 42 40 3D 
1035b     39 37 2D 14 
1035f     FE F7 F7 F7 | 	byte	$37, $35, $34, $39, $41, $42, $40, $3d, $39, $37, $2d, $14, $fe, $f7, $f7, $f7
10363     F8 F8 F3 EC 
10367     E4 E2 E6 E9 
1036b     ED EF F0 D1 
1036f     BE BF C3 C6 | 	byte	$f8, $f8, $f3, $ec, $e4, $e2, $e6, $e9, $ed, $ef, $f0, $d1, $be, $bf, $c3, $c6
10373     CA CE D3 DF 
10377     E9 EB EC ED 
1037b     EF F1 F6 0C 
1037f     19 1B 1A 19 | 	byte	$ca, $ce, $d3, $df, $e9, $eb, $ec, $ed, $ef, $f1, $f6, $0c, $19, $1b, $1a, $19
10383     19 18 1B 26 
10387     2C 2C 2A 28 
1038b     26 24 2A 3C 
1038f     44 42 3E 3A | 	byte	$19, $18, $1b, $26, $2c, $2c, $2a, $28, $26, $24, $2a, $3c, $44, $42, $3e, $3a
10393     37 34 36 3F 
10397     43 40 3B 37 
1039b     34 31 2C EA 
1039f     C1 BD BF C1 | 	byte	$37, $34, $36, $3f, $43, $40, $3b, $37, $34, $31, $2c, $ea, $c1, $bd, $bf, $c1
103a3     C2 C2 C2 C4 
103a7     C6 C7 CA CD 
103ab     D0 CD C0 C1 
103af     C5 C9 CB CE | 	byte	$c2, $c2, $c2, $c4, $c6, $c7, $ca, $cd, $d0, $cd, $c0, $c1, $c5, $c9, $cb, $ce
103b3     D1 D3 D4 D4 
103b7     D5 D7 DA DD 
103bb     E0 E6 FD 0F 
103bf     15 16 14 14 | 	byte	$d1, $d3, $d4, $d4, $d5, $d7, $da, $dd, $e0, $e6, $fd, $0f, $15, $16, $14, $14
103c3     14 16 1E 29 
103c7     2D 2B 29 27 
103cb     25 2B 3C 4A 
103cf     4B 47 43 3F | 	byte	$14, $16, $1e, $29, $2d, $2b, $29, $27, $25, $2b, $3c, $4a, $4b, $47, $43, $3f
103d3     3C 3C 41 49 
103d7     49 45 3F 3C 
103db     36 1D 01 F7 
103df     F7 F8 F8 F8 | 	byte	$3c, $3c, $41, $49, $49, $45, $3f, $3c, $36, $1d, $01, $f7, $f7, $f8, $f8, $f8
103e3     F8 F9 F5 EA 
103e7     E4 E6 E8 EA 
103eb     ED D2 9D 94 
103ef     9A 9F A4 A9 | 	byte	$f8, $f9, $f5, $ea, $e4, $e6, $e8, $ea, $ed, $d2, $9d, $94, $9a, $9f, $a4, $a9
103f3     AC B1 B6 BF 
103f7     C5 C9 CC D0 
103fb     D8 EC FE 0A 
103ff     0C 0C 0C 0C | 	byte	$ac, $b1, $b6, $bf, $c5, $c9, $cc, $d0, $d8, $ec, $fe, $0a, $0c, $0c, $0c, $0c
10403     0E 13 1E 27 
10407     28 26 24 23 
1040b     28 37 44 49 
1040f     48 44 40 3C | 	byte	$0e, $13, $1e, $27, $28, $26, $24, $23, $28, $37, $44, $49, $48, $44, $40, $3c
10413     3A 3E 45 4A 
10417     47 42 3E 3B 
1041b     41 4A 1B DE 
1041f     C7 C5 C5 C5 | 	byte	$3a, $3e, $45, $4a, $47, $42, $3e, $3b, $41, $4a, $1b, $de, $c7, $c5, $c5, $c5
10423     C5 C2 C1 C5 
10427     C8 CB CB B5 
1042b     8F 8C 9A A6 
1042f     AD B2 B6 BB | 	byte	$c5, $c2, $c1, $c5, $c8, $cb, $cb, $b5, $8f, $8c, $9a, $a6, $ad, $b2, $b6, $bb
10433     BE B9 B3 B7 
10437     BE C3 C8 D2 
1043b     E1 F5 02 0A 
1043f     0D 0D 0D 0E | 	byte	$be, $b9, $b3, $b7, $be, $c3, $c8, $d2, $e1, $f5, $02, $0a, $0d, $0d, $0d, $0e
10443     13 1C 26 2B 
10447     2B 2A 29 2E 
1044b     3A 45 4C 4E 
1044f     4C 49 45 42 | 	byte	$13, $1c, $26, $2b, $2b, $2a, $29, $2e, $3a, $45, $4c, $4e, $4c, $49, $45, $42
10453     44 48 4D 4F 
10457     4C 46 45 3F 
1045b     19 FA F3 F5 
1045f     F7 F7 F7 F9 | 	byte	$44, $48, $4d, $4f, $4c, $46, $45, $3f, $19, $fa, $f3, $f5, $f7, $f7, $f7, $f9
10463     FF 02 F9 E9 
10467     E4 E6 EB EA 
1046b     B6 90 8D 95 
1046f     9B A0 A2 9F | 	byte	$ff, $02, $f9, $e9, $e4, $e6, $eb, $ea, $b6, $90, $8d, $95, $9b, $a0, $a2, $9f
10473     9C A0 AC B8 
10477     BE C4 CF DB 
1047b     ED F8 02 08 
1047f     0B 0B 0C 10 | 	byte	$9c, $a0, $ac, $b8, $be, $c4, $cf, $db, $ed, $f8, $02, $08, $0b, $0b, $0c, $10
10483     17 1F 26 29 
10487     29 29 2D 35 
1048b     3F 46 49 4A 
1048f     48 44 41 41 | 	byte	$17, $1f, $26, $29, $29, $29, $2d, $35, $3f, $46, $49, $4a, $48, $44, $41, $41
10493     45 47 4A 4A 
10497     46 46 47 4C 
1049b     52 42 08 D7 
1049f     C8 C5 C5 C6 | 	byte	$45, $47, $4a, $4a, $46, $46, $47, $4c, $52, $42, $08, $d7, $c8, $c5, $c5, $c6
104a3     C0 BA BB C1 
104a7     BF 9D 82 80 
104ab     85 92 9E A9 
104af     AF B5 BA BE | 	byte	$c0, $ba, $bb, $c1, $bf, $9d, $82, $80, $85, $92, $9e, $a9, $af, $b5, $ba, $be
104b3     B7 AF B2 BA 
104b7     C3 CF D9 E9 
104bb     F7 00 07 0D 
104bf     10 11 14 1A | 	byte	$b7, $af, $b2, $ba, $c3, $cf, $d9, $e9, $f7, $00, $07, $0d, $10, $11, $14, $1a
104c3     21 27 2C 2F 
104c7     31 35 3A 43 
104cb     4A 4C 4F 4F 
104cf     4D 4A 48 4B | 	byte	$21, $27, $2c, $2f, $31, $35, $3a, $43, $4a, $4c, $4f, $4f, $4d, $4a, $48, $4b
104d3     4D 4E 50 4F 
104d7     50 50 42 1B 
104db     01 F7 F7 FA 
104df     FB FC FF 05 | 	byte	$4d, $4e, $50, $4f, $50, $50, $42, $1b, $01, $f7, $f7, $fa, $fb, $fc, $ff, $05
104e3     09 09 FE EE 
104e7     EB EE D9 AB 
104eb     90 8C 92 99 
104ef     9D 9B 95 97 | 	byte	$09, $09, $fe, $ee, $eb, $ee, $d9, $ab, $90, $8c, $92, $99, $9d, $9b, $95, $97
104f3     A0 AC B7 C3 
104f7     CE D8 E5 F2 
104fb     FC 03 0A 0F 
104ff     11 14 18 1F | 	byte	$a0, $ac, $b7, $c3, $ce, $d8, $e5, $f2, $fc, $03, $0a, $0f, $11, $14, $18, $1f
10503     24 28 2C 31 
10507     36 3A 40 48 
1050b     4B 4B 4D 4C 
1050f     4B 49 4A 4B | 	byte	$24, $28, $2c, $31, $36, $3a, $40, $48, $4b, $4b, $4d, $4c, $4b, $49, $4a, $4b
10513     4C 4C 4D 50 
10517     51 51 54 56 
1051b     54 32 FF DD 
1051f     CD CA C9 C3 | 	byte	$4c, $4c, $4d, $50, $51, $51, $54, $56, $54, $32, $ff, $dd, $cd, $ca, $c9, $c3
10523     BA B7 B1 98 
10527     81 81 82 89 
1052b     94 9E A9 B2 
1052f     B9 C1 C3 BD | 	byte	$ba, $b7, $b1, $98, $81, $81, $82, $89, $94, $9e, $a9, $b2, $b9, $c1, $c3, $bd
10533     B4 B3 BD CA 
10537     D5 E0 ED F9 
1053b     00 06 0D 11 
1053f     16 19 1F 24 | 	byte	$b4, $b3, $bd, $ca, $d5, $e0, $ed, $f9, $00, $06, $0d, $11, $16, $19, $1f, $24
10543     28 2C 32 39 
10547     3D 41 48 4C 
1054b     4D 4E 4F 4F 
1054f     4E 4E 4E 4F | 	byte	$28, $2c, $32, $39, $3d, $41, $48, $4c, $4d, $4e, $4f, $4f, $4e, $4e, $4e, $4f
10553     4F 50 53 56 
10557     53 42 21 09 
1055b     FD FB FB FE 
1055f     00 04 08 0C | 	byte	$4f, $50, $53, $56, $53, $42, $21, $09, $fd, $fb, $fb, $fe, $00, $04, $08, $0c
10563     0E 0D 06 FA 
10567     EE CC AA 93 
1056b     8C 8E 93 94 
1056f     90 8F 95 A0 | 	byte	$0e, $0d, $06, $fa, $ee, $cc, $aa, $93, $8c, $8e, $93, $94, $90, $8f, $95, $a0
10573     A9 B6 C5 D2 
10577     DB E7 F3 FB 
1057b     01 06 0C 11 
1057f     15 1A 1F 23 | 	byte	$a9, $b6, $c5, $d2, $db, $e7, $f3, $fb, $01, $06, $0c, $11, $15, $1a, $1f, $23
10583     27 2D 33 38 
10587     3B 41 47 49 
1058b     49 49 4A 4A 
1058f     4B 4A 4B 4B | 	byte	$27, $2d, $33, $38, $3b, $41, $47, $49, $49, $49, $4a, $4a, $4b, $4a, $4b, $4b
10593     4B 4E 51 52 
10597     53 55 56 54 
1059b     49 25 FE E1 
1059f     D2 CC C5 B9 | 	byte	$4b, $4e, $51, $52, $53, $55, $56, $54, $49, $25, $fe, $e1, $d2, $cc, $c5, $b9
105a3     A8 8E 81 81 
105a7     81 82 8A 94 
105ab     9E A7 B0 B9 
105af     C1 C4 BF B9 | 	byte	$a8, $8e, $81, $81, $81, $82, $8a, $94, $9e, $a7, $b0, $b9, $c1, $c4, $bf, $b9
105b3     B8 BF CA D4 
105b7     DF EC F6 FD 
105bb     03 08 0E 13 
105bf     19 1D 22 27 | 	byte	$b8, $bf, $ca, $d4, $df, $ec, $f6, $fd, $03, $08, $0e, $13, $19, $1d, $22, $27
105c3     2C 32 37 3B 
105c7     40 46 4A 4B 
105cb     4B 4B 4C 4C 
105cf     4D 4D 4D 4F | 	byte	$2c, $32, $37, $3b, $40, $46, $4a, $4b, $4b, $4b, $4c, $4c, $4d, $4d, $4d, $4f
105d3     50 53 54 51 
105d7     3E 26 0F 03 
105db     FD FC FE 01 
105df     04 07 0B 0F | 	byte	$50, $53, $54, $51, $3e, $26, $0f, $03, $fd, $fc, $fe, $01, $04, $07, $0b, $0f
105e3     12 13 0B F2 
105e7     CA AA 96 8D 
105eb     8B 8B 89 88 
105ef     8C 94 9E AB | 	byte	$12, $13, $0b, $f2, $ca, $aa, $96, $8d, $8b, $8b, $89, $88, $8c, $94, $9e, $ab
105f3     B7 C3 CE DA 
105f7     E5 F0 F8 FE 
105fb     02 07 0D 12 
105ff     17 1C 21 27 | 	byte	$b7, $c3, $ce, $da, $e5, $f0, $f8, $fe, $02, $07, $0d, $12, $17, $1c, $21, $27
10603     2C 31 35 39 
10607     3F 43 46 46 
1060b     45 46 47 48 
1060f     48 49 4A 4C | 	byte	$2c, $31, $35, $39, $3f, $43, $46, $46, $45, $46, $47, $48, $48, $49, $4a, $4c
10613     4E 4E 4F 50 
10617     52 53 52 4D 
1061b     39 1B FA E4 
1061f     D4 C6 B0 8F | 	byte	$4e, $4e, $4f, $50, $52, $53, $52, $4d, $39, $1b, $fa, $e4, $d4, $c6, $b0, $8f
10623     81 81 81 81 
10627     82 88 93 9B 
1062b     A5 AE B6 BF 
1062f     C3 C1 BE BE | 	byte	$81, $81, $81, $81, $82, $88, $93, $9b, $a5, $ae, $b6, $bf, $c3, $c1, $be, $be
10633     C2 C9 D2 DD 
10637     E9 F2 FA FF 
1063b     05 0A 10 16 
1063f     1B 21 27 2C | 	byte	$c2, $c9, $d2, $dd, $e9, $f2, $fa, $ff, $05, $0a, $10, $16, $1b, $21, $27, $2c
10643     31 35 39 3F 
10647     43 47 48 48 
1064b     48 48 49 4A 
1064f     4B 4D 4F 51 | 	byte	$31, $35, $39, $3f, $43, $47, $48, $48, $48, $48, $49, $4a, $4b, $4d, $4f, $51
10653     51 51 4B 3B 
10657     27 14 08 01 
1065b     FE FE 00 03 
1065f     07 0B 10 13 | 	byte	$51, $51, $4b, $3b, $27, $14, $08, $01, $fe, $fe, $00, $03, $07, $0b, $10, $13
10663     15 0E F2 D0 
10667     AF 99 8E 87 
1066b     84 83 83 88 
1066f     91 9E AC B7 | 	byte	$15, $0e, $f2, $d0, $af, $99, $8e, $87, $84, $83, $83, $88, $91, $9e, $ac, $b7
10673     C0 CB D6 E3 
10677     ED F5 FA 00 
1067b     05 0A 10 14 
1067f     1B 21 27 2C | 	byte	$c0, $cb, $d6, $e3, $ed, $f5, $fa, $00, $05, $0a, $10, $14, $1b, $21, $27, $2c
10683     2F 32 37 3D 
10687     42 43 44 44 
1068b     44 44 44 46 
1068f     48 4B 4D 4D | 	byte	$2f, $32, $37, $3d, $42, $43, $44, $44, $44, $44, $44, $46, $48, $4b, $4d, $4d
10693     4C 4D 4F 51 
10697     52 50 4D 45 
1069b     2B 0E F2 DC 
1069f     BD A0 85 80 | 	byte	$4c, $4d, $4f, $51, $52, $50, $4d, $45, $2b, $0e, $f2, $dc, $bd, $a0, $85, $80
106a3     81 81 81 82 
106a7     89 94 9D A6 
106ab     AF B6 BE C3 
106af     C5 C4 C4 C5 | 	byte	$81, $81, $81, $82, $89, $94, $9d, $a6, $af, $b6, $be, $c3, $c5, $c4, $c4, $c5
106b3     CA D3 DE E8 
106b7     F2 F9 FE 04 
106bb     09 0E 14 1A 
106bf     22 29 2D 30 | 	byte	$ca, $d3, $de, $e8, $f2, $f9, $fe, $04, $09, $0e, $14, $1a, $22, $29, $2d, $30
106c3     33 38 3E 43 
106c7     46 48 48 48 
106cb     48 48 49 4C 
106cf     4F 51 52 51 | 	byte	$33, $38, $3e, $43, $46, $48, $48, $48, $48, $48, $49, $4c, $4f, $51, $52, $51
106d3     4F 49 38 27 
106d7     16 0A 03 00 
106db     FF 01 03 08 
106df     0D 11 14 13 | 	byte	$4f, $49, $38, $27, $16, $0a, $03, $00, $ff, $01, $03, $08, $0d, $11, $14, $13
106e3     09 EE D0 B1 
106e7     9D 8E 85 82 
106eb     82 82 89 94 
106ef     A2 AD B8 C0 | 	byte	$09, $ee, $d0, $b1, $9d, $8e, $85, $82, $82, $82, $89, $94, $a2, $ad, $b8, $c0
106f3     CB D7 E1 EC 
106f7     F3 FA FF 04 
106fb     09 0E 14 1C 
106ff     23 28 2B 2D | 	byte	$cb, $d7, $e1, $ec, $f3, $fa, $ff, $04, $09, $0e, $14, $1c, $23, $28, $2b, $2d
10703     32 37 3D 41 
10707     42 43 42 43 
1070b     43 43 46 4A 
1070f     4C 4D 4C 4C | 	byte	$32, $37, $3d, $41, $42, $43, $42, $43, $43, $43, $46, $4a, $4c, $4d, $4c, $4c
10713     4C 4E 50 50 
10717     4F 4D 48 36 
1071b     1B F6 CF AE 
1071f     8F 81 81 81 | 	byte	$4c, $4e, $50, $50, $4f, $4d, $48, $36, $1b, $f6, $cf, $ae, $8f, $81, $81, $81
10723     82 81 83 8D 
10727     97 A0 A8 B0 
1072b     B8 C1 C6 C9 
1072f     C8 C7 C8 CD | 	byte	$82, $81, $83, $8d, $97, $a0, $a8, $b0, $b8, $c1, $c6, $c9, $c8, $c7, $c8, $cd
10733     D5 DF E9 F2 
10737     F9 FF 04 08 
1073b     0D 15 1D 24 
1073f     29 2D 2F 33 | 	byte	$d5, $df, $e9, $f2, $f9, $ff, $04, $08, $0d, $15, $1d, $24, $29, $2d, $2f, $33
10743     38 3D 42 44 
10747     46 46 46 45 
1074b     47 49 4D 50 
1074f     51 51 50 4C | 	byte	$38, $3d, $42, $44, $46, $46, $46, $45, $47, $49, $4d, $50, $51, $51, $50, $4c
10753     42 31 20 12 
10757     09 04 01 00 
1075b     02 07 0B 10 
1075f     13 14 0F FB | 	byte	$42, $31, $20, $12, $09, $04, $01, $00, $02, $07, $0b, $10, $13, $14, $0f, $fb
10763     E3 C8 AF 9D 
10767     8C 83 82 81 
1076b     83 8C 98 A6 
1076f     B1 B9 C2 CD | 	byte	$e3, $c8, $af, $9d, $8c, $83, $82, $81, $83, $8c, $98, $a6, $b1, $b9, $c2, $cd
10773     D8 E3 EC F4 
10777     FB 00 04 09 
1077b     10 17 1F 25 
1077f     29 2B 2D 32 | 	byte	$d8, $e3, $ec, $f4, $fb, $00, $04, $09, $10, $17, $1f, $25, $29, $2b, $2d, $32
10783     37 3B 3F 41 
10787     42 42 41 42 
1078b     44 48 4B 4D 
1078f     4C 4B 4B 4C | 	byte	$37, $3b, $3f, $41, $42, $42, $41, $42, $44, $48, $4b, $4d, $4c, $4b, $4b, $4c
10793     4F 4F 4F 4E 
10797     4C 48 3A 16 
1079b     EC BF 9C 87 
1079f     81 81 81 82 | 	byte	$4f, $4f, $4f, $4e, $4c, $48, $3a, $16, $ec, $bf, $9c, $87, $81, $81, $81, $82
107a3     82 87 93 9D 
107a7     A6 AE B5 BE 
107ab     C7 CC CC CB 
107af     CA CB D1 DA | 	byte	$82, $87, $93, $9d, $a6, $ae, $b5, $be, $c7, $cc, $cc, $cb, $ca, $cb, $d1, $da
107b3     E4 EC F5 FB 
107b7     01 05 0A 11 
107bb     18 20 25 2A 
107bf     2D 2F 33 39 | 	byte	$e4, $ec, $f5, $fb, $01, $05, $0a, $11, $18, $20, $25, $2a, $2d, $2f, $33, $39
107c3     3D 41 43 45 
107c7     45 45 45 48 
107cb     4B 4E 50 50 
107cf     4F 4E 48 3A | 	byte	$3d, $41, $43, $45, $45, $45, $45, $48, $4b, $4e, $50, $50, $4f, $4e, $48, $3a
107d3     2B 19 0E 06 
107d7     02 01 02 05 
107db     09 0E 11 14 
107df     12 03 EC D4 | 	byte	$2b, $19, $0e, $06, $02, $01, $02, $05, $09, $0e, $11, $14, $12, $03, $ec, $d4
107e3     C1 AE 9C 8B 
107e7     83 82 82 88 
107eb     93 9F A9 B4 
107ef     BC C5 D1 DB | 	byte	$c1, $ae, $9c, $8b, $83, $82, $82, $88, $93, $9f, $a9, $b4, $bc, $c5, $d1, $db
107f3     E6 EE F6 FC 
107f7     01 06 0D 13 
107fb     1A 21 25 28 
107ff     2B 2E 33 37 | 	byte	$e6, $ee, $f6, $fc, $01, $06, $0d, $13, $1a, $21, $25, $28, $2b, $2e, $33, $37
10803     3B 3E 40 41 
10807     41 41 44 46 
1080b     49 4A 4B 4A 
1080f     4A 4A 4B 4C | 	byte	$3b, $3e, $40, $41, $41, $41, $44, $46, $49, $4a, $4b, $4a, $4a, $4a, $4b, $4c
10813     4D 4C 4C 49 
10817     41 2B 07 DA 
1081b     B7 99 85 81 
1081f     82 81 81 84 | 	byte	$4d, $4c, $4c, $49, $41, $2b, $07, $da, $b7, $99, $85, $81, $82, $81, $81, $84
10823     8D 98 A1 A9 
10827     B2 BA C4 CC 
1082b     CE CD CB CB 
1082f     CD D3 DD E5 | 	byte	$8d, $98, $a1, $a9, $b2, $ba, $c4, $cc, $ce, $cd, $cb, $cb, $cd, $d3, $dd, $e5
10833     EE F6 FC 03 
10837     07 0E 15 1B 
1083b     21 26 2A 2D 
1083f     30 34 39 3D | 	byte	$ee, $f6, $fc, $03, $07, $0e, $15, $1b, $21, $26, $2a, $2d, $30, $34, $39, $3d
10843     40 42 44 44 
10847     46 47 49 4C 
1084b     4D 4E 4E 4D 
1084f     4B 43 34 22 | 	byte	$40, $42, $44, $44, $46, $47, $49, $4c, $4d, $4e, $4e, $4d, $4b, $43, $34, $22
10853     14 0A 04 02 
10857     02 04 08 0B 
1085b     0E 11 11 09 
1085f     F5 DD C9 B8 | 	byte	$14, $0a, $04, $02, $02, $04, $08, $0b, $0e, $11, $11, $09, $f5, $dd, $c9, $b8
10863     AA 9B 8C 85 
10867     83 86 8D 98 
1086b     A2 AC B5 BF 
1086f     C8 D3 DE E7 | 	byte	$aa, $9b, $8c, $85, $83, $86, $8d, $98, $a2, $ac, $b5, $bf, $c8, $d3, $de, $e7
10873     F0 F7 FE 03 
10877     0A 10 16 1C 
1087b     21 25 28 2B 
1087f     2F 34 38 3B | 	byte	$f0, $f7, $fe, $03, $0a, $10, $16, $1c, $21, $25, $28, $2b, $2f, $34, $38, $3b
10883     3E 40 41 44 
10887     45 47 49 4A 
1088b     4A 4A 4A 4A 
1088f     4B 4C 4C 4D | 	byte	$3e, $40, $41, $44, $45, $47, $49, $4a, $4a, $4a, $4a, $4a, $4b, $4c, $4c, $4d
10893     4C 49 40 2E 
10897     16 FA D7 B8 
1089b     9D 8B 82 81 
1089f     82 82 89 92 | 	byte	$4c, $49, $40, $2e, $16, $fa, $d7, $b8, $9d, $8b, $82, $81, $82, $82, $89, $92
108a3     9C A5 AF B8 
108a7     C1 C9 CF CF 
108ab     CD CB CC D1 
108af     D7 DF E8 EF | 	byte	$9c, $a5, $af, $b8, $c1, $c9, $cf, $cf, $cd, $cb, $cc, $d1, $d7, $df, $e8, $ef
108b3     F7 FE 04 0B 
108b7     11 17 1D 21 
108bb     26 29 2D 31 
108bf     35 39 3D 40 | 	byte	$f7, $fe, $04, $0b, $11, $17, $1d, $21, $26, $29, $2d, $31, $35, $39, $3d, $40
108c3     42 44 46 48 
108c7     49 4A 4B 4C 
108cb     4C 4C 4C 49 
108cf     3E 2E 1D 11 | 	byte	$42, $44, $46, $48, $49, $4a, $4b, $4c, $4c, $4c, $4c, $49, $3e, $2e, $1d, $11
108d3     08 05 05 06 
108d7     07 09 0C 0F 
108db     11 0D FC E6 
108df     CE BD AE A3 | 	byte	$08, $05, $05, $06, $07, $09, $0c, $0f, $11, $0d, $fc, $e6, $ce, $bd, $ae, $a3
108e3     9A 93 8F 8D 
108e7     8F 95 9D A5 
108eb     AE B7 C2 CC 
108ef     D6 E0 EA F1 | 	byte	$9a, $93, $8f, $8d, $8f, $95, $9d, $a5, $ae, $b7, $c2, $cc, $d6, $e0, $ea, $f1
108f3     F9 00 07 0D 
108f7     12 18 1C 20 
108fb     24 27 2C 30 
108ff     34 38 3B 3E | 	byte	$f9, $00, $07, $0d, $12, $18, $1c, $20, $24, $27, $2c, $30, $34, $38, $3b, $3e
10903     40 42 45 46 
10907     47 47 48 48 
1090b     48 48 49 4A 
1090f     4B 4B 4C 47 | 	byte	$40, $42, $45, $46, $47, $47, $48, $48, $48, $48, $49, $4a, $4b, $4b, $4c, $47
10913     3B 27 14 02 
10917     F2 D9 BE A7 
1091b     93 87 83 84 
1091f     87 8F 99 A1 | 	byte	$3b, $27, $14, $02, $f2, $d9, $be, $a7, $93, $87, $83, $84, $87, $8f, $99, $a1
10923     AC B5 BE C7 
10927     CD D0 CF CD 
1092b     CB CD D3 DA 
1092f     E2 EA F1 FA | 	byte	$ac, $b5, $be, $c7, $cd, $d0, $cf, $cd, $cb, $cd, $d3, $da, $e2, $ea, $f1, $fa
10933     01 09 0F 14 
10937     19 1D 21 25 
1093b     29 2D 31 35 
1093f     39 3D 40 43 | 	byte	$01, $09, $0f, $14, $19, $1d, $21, $25, $29, $2d, $31, $35, $39, $3d, $40, $43
10943     46 48 49 4A 
10947     49 4A 4A 4A 
1094b     4A 4A 45 37 
1094f     26 18 0D 08 | 	byte	$46, $48, $49, $4a, $49, $4a, $4a, $4a, $4a, $4a, $45, $37, $26, $18, $0d, $08
10953     06 06 07 09 
10957     0B 0D 0F 0E 
1095b     03 EF D7 C2 
1095f     B0 A3 9E 9C | 	byte	$06, $06, $07, $09, $0b, $0d, $0f, $0e, $03, $ef, $d7, $c2, $b0, $a3, $9e, $9c
10963     9B 9A 99 99 
10967     9D A2 AA B1 
1096b     BB C6 D0 DA 
1096f     E3 EC F5 FD | 	byte	$9b, $9a, $99, $99, $9d, $a2, $aa, $b1, $bb, $c6, $d0, $da, $e3, $ec, $f5, $fd
10973     04 0A 0F 13 
10977     17 1B 1F 22 
1097b     27 2B 30 34 
1097f     38 3B 3E 41 | 	byte	$04, $0a, $0f, $13, $17, $1b, $1f, $22, $27, $2b, $30, $34, $38, $3b, $3e, $41
10983     44 45 45 45 
10987     45 45 45 45 
1098b     47 49 4A 4A 
1098f     49 44 35 21 | 	byte	$44, $45, $45, $45, $45, $45, $45, $45, $47, $49, $4a, $4a, $49, $44, $35, $21
10993     0F FF F6 ED 
10997     DD C8 B0 9E 
1099b     90 8A 8A 8E 
1099f     95 9E A8 B3 | 	byte	$0f, $ff, $f6, $ed, $dd, $c8, $b0, $9e, $90, $8a, $8a, $8e, $95, $9e, $a8, $b3
109a3     BB C3 CA CF 
109a7     D0 CF CC CC 
109ab     CF D5 DD E4 
109af     EC F5 FD 05 | 	byte	$bb, $c3, $ca, $cf, $d0, $cf, $cc, $cc, $cf, $d5, $dd, $e4, $ec, $f5, $fd, $05
109b3     0C 10 15 18 
109b7     1D 20 24 28 
109bb     2E 32 37 3A 
109bf     3D 41 45 47 | 	byte	$0c, $10, $15, $18, $1d, $20, $24, $28, $2e, $32, $37, $3a, $3d, $41, $45, $47
109c3     49 49 48 48 
109c7     48 48 48 49 
109cb     48 40 31 20 
109cf     13 0C 09 07 | 	byte	$49, $49, $48, $48, $48, $48, $48, $49, $48, $40, $31, $20, $13, $0c, $09, $07
109d3     06 07 09 0A 
109d7     0C 0D 07 F7 
109db     DE C9 B4 A5 
109df     9E 9D 9F A3 | 	byte	$06, $07, $09, $0a, $0c, $0d, $07, $f7, $de, $c9, $b4, $a5, $9e, $9d, $9f, $a3
109e3     A4 A3 A2 A3 
109e7     A7 AD B4 BF 
109eb     C8 D2 DD E5 
109ef     EF F8 00 07 | 	byte	$a4, $a3, $a2, $a3, $a7, $ad, $b4, $bf, $c8, $d2, $dd, $e5, $ef, $f8, $00, $07
109f3     0B 10 13 16 
109f7     1A 1E 23 27 
109fb     2C 31 34 39 
109ff     3C 40 43 44 | 	byte	$0b, $10, $13, $16, $1a, $1e, $23, $27, $2c, $31, $34, $39, $3c, $40, $43, $44
10a03     44 44 44 43 
10a07     43 43 44 45 
10a0b     48 49 47 3E 
10a0f     2F 1B 0A FE | 	byte	$44, $44, $44, $43, $43, $43, $44, $45, $48, $49, $47, $3e, $2f, $1b, $0a, $fe
10a13     F5 F1 EF E7 
10a17     D7 C1 AD 9E 
10a1b     95 93 95 9C 
10a1f     A4 AE B7 BF | 	byte	$f5, $f1, $ef, $e7, $d7, $c1, $ad, $9e, $95, $93, $95, $9c, $a4, $ae, $b7, $bf
10a23     C6 CC CF CF 
10a27     CD CB CC D0 
10a2b     D7 DE E6 EF 
10a2f     F8 00 07 0C | 	byte	$c6, $cc, $cf, $cf, $cd, $cb, $cc, $d0, $d7, $de, $e6, $ef, $f8, $00, $07, $0c
10a33     10 14 17 1B 
10a37     1F 23 28 2D 
10a3b     32 37 3A 3F 
10a3f     43 45 47 48 | 	byte	$10, $14, $17, $1b, $1f, $23, $28, $2d, $32, $37, $3a, $3f, $43, $45, $47, $48
10a43     47 47 46 45 
10a47     46 47 48 46 
10a4b     3B 2D 1F 14 
10a4f     0E 09 08 07 | 	byte	$47, $47, $46, $45, $46, $47, $48, $46, $3b, $2d, $1f, $14, $0e, $09, $08, $07
10a53     08 08 09 0B 
10a57     09 FE EB D2 
10a5b     BD AB A1 9C 
10a5f     9D A2 A6 AA | 	byte	$08, $08, $09, $0b, $09, $fe, $eb, $d2, $bd, $ab, $a1, $9c, $9d, $a2, $a6, $aa
10a63     AC AB AB AC 
10a67     B0 B7 C0 CA 
10a6b     D4 DE E8 F1 
10a6f     F9 00 06 0A | 	byte	$ac, $ab, $ab, $ac, $b0, $b7, $c0, $ca, $d4, $de, $e8, $f1, $f9, $00, $06, $0a
10a73     0E 11 14 18 
10a77     1C 22 27 2C 
10a7b     31 35 3A 3E 
10a7f     41 43 43 43 | 	byte	$0e, $11, $14, $18, $1c, $22, $27, $2c, $31, $35, $3a, $3e, $41, $43, $43, $43
10a83     43 41 41 40 
10a87     41 43 45 47 
10a8b     45 3C 2B 1A 
10a8f     0B FF F8 F4 | 	byte	$43, $41, $41, $40, $41, $43, $45, $47, $45, $3c, $2b, $1a, $0b, $ff, $f8, $f4
10a93     F2 F2 EF E3 
10a97     D2 BD AE A2 
10a9b     9E 9F A4 AA 
10a9f     B2 BA C1 C7 | 	byte	$f2, $f2, $ef, $e3, $d2, $bd, $ae, $a2, $9e, $9f, $a4, $aa, $b2, $ba, $c1, $c7
10aa3     CC CF CF CD 
10aa7     CB CE D2 DA 
10aab     E1 E9 F2 FA 
10aaf     01 06 0B 0F | 	byte	$cc, $cf, $cf, $cd, $cb, $ce, $d2, $da, $e1, $e9, $f2, $fa, $01, $06, $0b, $0f
10ab3     12 16 19 1D 
10ab7     22 27 2D 32 
10abb     37 3C 40 44 
10abf     45 46 46 45 | 	byte	$12, $16, $19, $1d, $22, $27, $2d, $32, $37, $3c, $40, $44, $45, $46, $46, $45
10ac3     45 44 43 43 
10ac7     45 47 43 39 
10acb     2B 1F 14 0E 
10acf     0A 08 07 07 | 	byte	$45, $44, $43, $43, $45, $47, $43, $39, $2b, $1f, $14, $0e, $0a, $08, $07, $07
10ad3     08 08 09 03 
10ad7     F3 DE C6 B2 
10adb     A6 A0 9E A0 
10adf     A4 AA AF B3 | 	byte	$08, $08, $09, $03, $f3, $de, $c6, $b2, $a6, $a0, $9e, $a0, $a4, $aa, $af, $b3
10ae3     B4 B4 B3 B7 
10ae7     BC C4 CE D7 
10aeb     E1 EB F2 FA 
10aef     FF 04 09 0C | 	byte	$b4, $b4, $b3, $b7, $bc, $c4, $ce, $d7, $e1, $eb, $f2, $fa, $ff, $04, $09, $0c
10af3     10 13 17 1C 
10af7     21 27 2C 32 
10afb     37 3B 3E 41 
10aff     42 41 41 40 | 	byte	$10, $13, $17, $1c, $21, $27, $2c, $32, $37, $3b, $3e, $41, $42, $41, $41, $40
10b03     3F 3F 3E 41 
10b07     43 44 42 37 
10b0b     28 17 08 FF 
10b0f     F8 F5 F4 F4 | 	byte	$3f, $3f, $3e, $41, $43, $44, $42, $37, $28, $17, $08, $ff, $f8, $f5, $f4, $f4
10b13     F5 F5 EF E0 
10b17     CC BC B0 AA 
10b1b     AA AC B1 B7 
10b1f     BD C2 C8 CD | 	byte	$f5, $f5, $ef, $e0, $cc, $bc, $b0, $aa, $aa, $ac, $b1, $b7, $bd, $c2, $c8, $cd
10b23     CF CF CD CE 
10b27     D1 D6 DD E6 
10b2b     EE F5 FC 01 
10b2f     07 0B 0E 12 | 	byte	$cf, $cf, $cd, $ce, $d1, $d6, $dd, $e6, $ee, $f5, $fc, $01, $07, $0b, $0e, $12
10b33     15 18 1C 22 
10b37     27 2E 34 3A 
10b3b     3E 41 42 43 
10b3f     43 43 43 42 | 	byte	$15, $18, $1c, $22, $27, $2e, $34, $3a, $3e, $41, $42, $43, $43, $43, $43, $42
10b43     41 40 42 44 
10b47     45 3F 35 28 
10b4b     1C 13 0C 08 
10b4f     06 05 06 07 | 	byte	$41, $40, $42, $44, $45, $3f, $35, $28, $1c, $13, $0c, $08, $06, $05, $06, $07
10b53     07 05 F7 E4 
10b57     CD B8 AA A1 
10b5b     9F 9F A2 A7 
10b5f     AC B3 B8 BC | 	byte	$07, $05, $f7, $e4, $cd, $b8, $aa, $a1, $9f, $9f, $a2, $a7, $ac, $b3, $b8, $bc
10b63     BC BC BE C4 
10b67     CA D4 DD E7 
10b6b     EE F4 FA FF 
10b6f     04 08 0B 0F | 	byte	$bc, $bc, $be, $c4, $ca, $d4, $dd, $e7, $ee, $f4, $fa, $ff, $04, $08, $0b, $0f
10b73     11 16 1C 22 
10b77     29 30 36 3A 
10b7b     3D 3E 3F 3F 
10b7f     3F 3E 3E 3D | 	byte	$11, $16, $1c, $22, $29, $30, $36, $3a, $3d, $3e, $3f, $3f, $3f, $3e, $3e, $3d
10b83     3D 3E 3F 41 
10b87     3D 32 22 13 
10b8b     06 FD F7 F4 
10b8f     F4 F5 F6 F9 | 	byte	$3d, $3e, $3f, $41, $3d, $32, $22, $13, $06, $fd, $f7, $f4, $f4, $f5, $f6, $f9
10b93     FA F8 ED DB 
10b97     CB BD B6 B3 
10b9b     B3 B5 BA BE 
10b9f     C4 C9 CE CF | 	byte	$fa, $f8, $ed, $db, $cb, $bd, $b6, $b3, $b3, $b5, $ba, $be, $c4, $c9, $ce, $cf
10ba3     CD CD CE D2 
10ba7     D9 E1 EA F1 
10bab     F7 FC 01 05 
10baf     09 0D 10 13 | 	byte	$cd, $cd, $ce, $d2, $d9, $e1, $ea, $f1, $f7, $fc, $01, $05, $09, $0d, $10, $13
10bb3     17 1D 23 29 
10bb7     31 37 3C 3F 
10bbb     41 41 41 41 
10bbf     40 40 3F 3E | 	byte	$17, $1d, $23, $29, $31, $37, $3c, $3f, $41, $41, $41, $41, $40, $40, $3f, $3e
10bc3     3E 41 43 43 
10bc7     3D 32 24 19 
10bcb     0F 09 05 04 
10bcf     04 04 05 05 | 	byte	$3e, $41, $43, $43, $3d, $32, $24, $19, $0f, $09, $05, $04, $04, $04, $05, $05
10bd3     FC E9 D4 BE 
10bd7     AF A5 A0 9F 
10bdb     A1 A4 AA B0 
10bdf     B6 BD C2 C4 | 	byte	$fc, $e9, $d4, $be, $af, $a5, $a0, $9f, $a1, $a4, $aa, $b0, $b6, $bd, $c2, $c4
10be3     C6 C8 CD D4 
10be7     DC E4 EB F0 
10beb     F6 FA FE 03 
10bef     07 0A 0D 11 | 	byte	$c6, $c8, $cd, $d4, $dc, $e4, $eb, $f0, $f6, $fa, $fe, $03, $07, $0a, $0d, $11
10bf3     16 1C 24 2B 
10bf7     33 38 3B 3D 
10bfb     3E 3D 3D 3D 
10bff     3C 3C 3B 3B | 	byte	$16, $1c, $24, $2b, $33, $38, $3b, $3d, $3e, $3d, $3d, $3d, $3c, $3c, $3b, $3b
10c03     3D 3D 37 2C 
10c07     1D 10 05 FD 
10c0b     F8 F6 F6 F7 
10c0f     F9 FB FE 01 | 	byte	$3d, $3d, $37, $2c, $1d, $10, $05, $fd, $f8, $f6, $f6, $f7, $f9, $fb, $fe, $01
10c13     01 FA ED DB 
10c17     CD C2 BC B9 
10c1b     B9 BB BF C4 
10c1f     C9 CD CD CC | 	byte	$01, $fa, $ed, $db, $cd, $c2, $bc, $b9, $b9, $bb, $bf, $c4, $c9, $cd, $cd, $cc
10c23     CC CF D4 DD 
10c27     E4 EC F2 F7 
10c2b     FB FF 03 07 
10c2f     0A 0E 12 16 | 	byte	$cc, $cf, $d4, $dd, $e4, $ec, $f2, $f7, $fb, $ff, $03, $07, $0a, $0e, $12, $16
10c33     1C 23 2C 33 
10c37     39 3D 3F 3F 
10c3b     3F 3E 3E 3E 
10c3f     3D 3C 3C 3D | 	byte	$1c, $23, $2c, $33, $39, $3d, $3f, $3f, $3f, $3e, $3e, $3e, $3d, $3c, $3c, $3d
10c43     40 43 42 3A 
10c47     2F 21 16 0C 
10c4b     07 04 02 03 
10c4f     04 04 FF F1 | 	byte	$40, $43, $42, $3a, $2f, $21, $16, $0c, $07, $04, $02, $03, $04, $04, $ff, $f1
10c53     DC C5 B5 A9 
10c57     A3 A0 A1 A2 
10c5b     A6 AC B2 B9 
10c5f     BF C6 CB CF | 	byte	$dc, $c5, $b5, $a9, $a3, $a0, $a1, $a2, $a6, $ac, $b2, $b9, $bf, $c6, $cb, $cf
10c63     D3 D8 DD E4 
10c67     E9 EE F2 F5 
10c6b     F9 FC 00 05 
10c6f     08 0C 11 16 | 	byte	$d3, $d8, $dd, $e4, $e9, $ee, $f2, $f5, $f9, $fc, $00, $05, $08, $0c, $11, $16
10c73     1E 26 2E 34 
10c77     39 3B 3B 3B 
10c7b     3B 3A 3A 3A 
10c7f     39 39 3A 37 | 	byte	$1e, $26, $2e, $34, $39, $3b, $3b, $3b, $3b, $3a, $3a, $3a, $39, $39, $3a, $37
10c83     30 24 18 0C 
10c87     03 FD F9 F7 
10c8b     F6 F7 F9 FC 
10c8f     FE 01 06 09 | 	byte	$30, $24, $18, $0c, $03, $fd, $f9, $f7, $f6, $f7, $f9, $fc, $fe, $01, $06, $09
10c93     07 FD EC DB 
10c97     CF C5 BF BD 
10c9b     BE C0 C6 CA 
10c9f     CD CE CD CF | 	byte	$07, $fd, $ec, $db, $cf, $c5, $bf, $bd, $be, $c0, $c6, $ca, $cd, $ce, $cd, $cf
10ca3     D3 D9 E0 E7 
10ca7     ED F2 F5 F9 
10cab     FC 01 05 09 
10caf     0C 11 17 1F | 	byte	$d3, $d9, $e0, $e7, $ed, $f2, $f5, $f9, $fc, $01, $05, $09, $0c, $11, $17, $1f
10cb3     26 2F 34 3A 
10cb7     3D 3D 3D 3C 
10cbb     3B 3B 3B 3B 
10cbf     3B 3B 3E 42 | 	byte	$26, $2f, $34, $3a, $3d, $3d, $3d, $3c, $3b, $3b, $3b, $3b, $3b, $3b, $3e, $42
10cc3     44 41 38 2B 
10cc7     1E 14 0B 05 
10ccb     02 01 02 03 
10ccf     00 F5 E3 CD | 	byte	$44, $41, $38, $2b, $1e, $14, $0b, $05, $02, $01, $02, $03, $00, $f5, $e3, $cd
10cd3     BA AE A5 A1 
10cd7     A1 A2 A5 AA 
10cdb     AE B5 BC C3 
10cdf     CA D2 DA E0 | 	byte	$ba, $ae, $a5, $a1, $a1, $a2, $a5, $aa, $ae, $b5, $bc, $c3, $ca, $d2, $da, $e0
10ce3     E5 E9 EC EF 
10ce7     F2 F4 F6 F9 
10ceb     FD 00 04 08 
10cef     0C 13 1A 22 | 	byte	$e5, $e9, $ec, $ef, $f2, $f4, $f6, $f9, $fd, $00, $04, $08, $0c, $13, $1a, $22
10cf3     2A 30 35 38 
10cf7     3A 39 38 38 
10cfb     36 36 37 36 
10cff     36 32 28 1D | 	byte	$2a, $30, $35, $38, $3a, $39, $38, $38, $36, $36, $37, $36, $36, $32, $28, $1d
10d03     11 08 01 FC 
10d07     FA F8 F7 F8 
10d0b     FA FC FF 02 
10d0f     06 0C 12 13 | 	byte	$11, $08, $01, $fc, $fa, $f8, $f7, $f8, $fa, $fc, $ff, $02, $06, $0c, $12, $13
10d13     0A F9 E6 D8 
10d17     CC C5 C1 C0 
10d1b     C2 C6 CA CD 
10d1f     CE D0 D2 D7 | 	byte	$0a, $f9, $e6, $d8, $cc, $c5, $c1, $c0, $c2, $c6, $ca, $cd, $ce, $d0, $d2, $d7
10d23     DC E2 E8 ED 
10d27     F2 F5 F8 FB 
10d2b     FF 03 07 0C 
10d2f     13 1A 23 2A | 	byte	$dc, $e2, $e8, $ed, $f2, $f5, $f8, $fb, $ff, $03, $07, $0c, $13, $1a, $23, $2a
10d33     30 36 39 3B 
10d37     3C 3B 3A 39 
10d3b     38 38 38 39 
10d3f     3C 40 44 44 | 	byte	$30, $36, $39, $3b, $3c, $3b, $3a, $39, $38, $38, $38, $39, $3c, $40, $44, $44
10d43     3E 32 26 19 
10d47     10 08 03 00 
10d4b     FF 00 00 F8 
10d4f     E9 D3 C0 B0 | 	byte	$3e, $32, $26, $19, $10, $08, $03, $00, $ff, $00, $00, $f8, $e9, $d3, $c0, $b0
10d53     A6 A2 A0 A2 
10d57     A4 A8 AC B1 
10d5b     B8 BF C6 CF 
10d5f     D9 E4 EB F0 | 	byte	$a6, $a2, $a0, $a2, $a4, $a8, $ac, $b1, $b8, $bf, $c6, $cf, $d9, $e4, $eb, $f0
10d63     F2 F2 F4 F4 
10d67     F5 F6 F8 FA 
10d6b     FE 02 06 0D 
10d6f     16 1D 26 2B | 	byte	$f2, $f2, $f4, $f4, $f5, $f6, $f8, $fa, $fe, $02, $06, $0d, $16, $1d, $26, $2b
10d73     30 35 37 38 
10d77     37 36 34 34 
10d7b     34 34 32 2C 
10d7f     22 15 0A 02 | 	byte	$30, $35, $37, $38, $37, $36, $34, $34, $34, $34, $32, $2c, $22, $15, $0a, $02
10d83     FD FA F9 F9 
10d87     F9 F9 FA FC 
10d8b     FF 02 07 0D 
10d8f     15 1B 1C 14 | 	byte	$fd, $fa, $f9, $f9, $f9, $f9, $fa, $fc, $ff, $02, $07, $0d, $15, $1b, $1c, $14
10d93     06 F1 E0 D3 
10d97     CA C5 C3 C4 
10d9b     C7 CB CF D1 
10d9f     D4 D6 DA DF | 	byte	$06, $f1, $e0, $d3, $ca, $c5, $c3, $c4, $c7, $cb, $cf, $d1, $d4, $d6, $da, $df
10da3     E4 E9 ED F1 
10da7     F4 F7 FA FD 
10dab     02 07 0E 17 
10daf     1F 27 2D 32 | 	byte	$e4, $e9, $ed, $f1, $f4, $f7, $fa, $fd, $02, $07, $0e, $17, $1f, $27, $2d, $32
10db3     36 38 3A 3A 
10db7     39 37 36 35 
10dbb     35 37 3A 3F 
10dbf     44 45 43 3A | 	byte	$36, $38, $3a, $3a, $39, $37, $36, $35, $35, $37, $3a, $3f, $44, $45, $43, $3a
10dc3     2E 21 15 0C 
10dc7     05 01 FF FF 
10dcb     FF FB EF DB 
10dcf     C7 B6 AA A3 | 	byte	$2e, $21, $15, $0c, $05, $01, $ff, $ff, $ff, $fb, $ef, $db, $c7, $b6, $aa, $a3
10dd3     A1 A1 A3 A7 
10dd7     AA AF B4 BA 
10ddb     C2 CA D6 E1 
10ddf     EC F3 F8 F9 | 	byte	$a1, $a1, $a3, $a7, $aa, $af, $b4, $ba, $c2, $ca, $d6, $e1, $ec, $f3, $f8, $f9
10de3     F8 F7 F6 F6 
10de7     F6 F7 F9 FD 
10deb     01 07 0F 19 
10def     21 27 2B 2F | 	byte	$f8, $f7, $f6, $f6, $f6, $f7, $f9, $fd, $01, $07, $0f, $19, $21, $27, $2b, $2f
10df3     32 34 35 34 
10df7     33 32 31 30 
10dfb     2C 25 19 0F 
10dff     06 FE FA F8 | 	byte	$32, $34, $35, $34, $33, $32, $31, $30, $2c, $25, $19, $0f, $06, $fe, $fa, $f8
10e03     F8 F9 FA FB 
10e07     FC FD FF 02 
10e0b     07 0D 15 1B 
10e0f     22 23 1E 10 | 	byte	$f8, $f9, $fa, $fb, $fc, $fd, $ff, $02, $07, $0d, $15, $1b, $22, $23, $1e, $10
10e13     00 ED DD D3 
10e17     CB C7 C7 C9 
10e1b     CC D0 D3 D6 
10e1f     D7 DA DE E2 | 	byte	$00, $ed, $dd, $d3, $cb, $c7, $c7, $c9, $cc, $d0, $d3, $d6, $d7, $da, $de, $e2
10e23     E7 EB EE F2 
10e27     F5 F7 FB 00 
10e2b     06 0F 18 20 
10e2f     26 2C 30 33 | 	byte	$e7, $eb, $ee, $f2, $f5, $f7, $fb, $00, $06, $0f, $18, $20, $26, $2c, $30, $33
10e33     35 36 36 35 
10e37     34 33 32 33 
10e3b     36 3A 3F 44 
10e3f     44 3F 36 2A | 	byte	$35, $36, $36, $35, $34, $33, $32, $33, $36, $3a, $3f, $44, $44, $3f, $36, $2a
10e43     1E 14 0B 05 
10e47     00 FD FD FB 
10e4b     F4 E4 D2 C1 
10e4f     B2 A9 A3 A2 | 	byte	$1e, $14, $0b, $05, $00, $fd, $fd, $fb, $f4, $e4, $d2, $c1, $b2, $a9, $a3, $a2
10e53     A3 A5 A9 AD 
10e57     B1 B6 BC C4 
10e5b     CE DA E4 EF 
10e5f     F5 FB FD FD | 	byte	$a3, $a5, $a9, $ad, $b1, $b6, $bc, $c4, $ce, $da, $e4, $ef, $f5, $fb, $fd, $fd
10e63     FC FA F8 F7 
10e67     F7 F8 FB 00 
10e6b     08 10 19 1F 
10e6f     25 29 2C 2F | 	byte	$fc, $fa, $f8, $f7, $f7, $f8, $fb, $00, $08, $10, $19, $1f, $25, $29, $2c, $2f
10e73     31 31 31 30 
10e77     2F 2E 28 20 
10e7b     16 0D 05 FF 
10e7f     FB F9 F8 F9 | 	byte	$31, $31, $31, $30, $2f, $2e, $28, $20, $16, $0d, $05, $ff, $fb, $f9, $f8, $f9
10e83     FB FC FD FF 
10e87     01 03 06 0C 
10e8b     13 1A 21 25 
10e8f     27 24 19 0B | 	byte	$fb, $fc, $fd, $ff, $01, $03, $06, $0c, $13, $1a, $21, $25, $27, $24, $19, $0b
10e93     FA E9 DD D4 
10e97     CD CC CD D0 
10e9b     D4 D7 D9 DA 
10e9f     DC DE E2 E6 | 	byte	$fa, $e9, $dd, $d4, $cd, $cc, $cd, $d0, $d4, $d7, $d9, $da, $dc, $de, $e2, $e6
10ea3     E9 EE F1 F3 
10ea7     F7 FB 00 08 
10eab     10 19 20 27 
10eaf     2B 2E 30 32 | 	byte	$e9, $ee, $f1, $f3, $f7, $fb, $00, $08, $10, $19, $20, $27, $2b, $2e, $30, $32
10eb3     33 33 33 31 
10eb7     30 31 32 36 
10ebb     3B 3F 42 42 
10ebf     3C 32 26 1B | 	byte	$33, $33, $33, $31, $30, $31, $32, $36, $3b, $3f, $42, $42, $3c, $32, $26, $1b
10ec3     11 0A 04 00 
10ec7     FE FC F7 EC 
10ecb     DA C8 BB AE 
10ecf     A7 A2 A2 A3 | 	byte	$11, $0a, $04, $00, $fe, $fc, $f7, $ec, $da, $c8, $bb, $ae, $a7, $a2, $a2, $a3
10ed3     A7 AA AF B4 
10ed7     B9 C0 C9 D4 
10edb     DF E8 F2 F8 
10edf     FD 01 02 01 | 	byte	$a7, $aa, $af, $b4, $b9, $c0, $c9, $d4, $df, $e8, $f2, $f8, $fd, $01, $02, $01
10ee3     FF FC FA F9 
10ee7     FA FD 03 0A 
10eeb     12 1A 1F 24 
10eef     28 2A 2C 2E | 	byte	$ff, $fc, $fa, $f9, $fa, $fd, $03, $0a, $12, $1a, $1f, $24, $28, $2a, $2c, $2e
10ef3     2E 2E 2E 2B 
10ef7     25 1A 10 07 
10efb     00 FC F9 F8 
10eff     F7 F9 FA FC | 	byte	$2e, $2e, $2e, $2b, $25, $1a, $10, $07, $00, $fc, $f9, $f8, $f7, $f9, $fa, $fc
10f03     FE 00 02 04 
10f07     07 0B 12 19 
10f0b     1F 24 28 2A 
10f0f     28 20 13 02 | 	byte	$fe, $00, $02, $04, $07, $0b, $12, $19, $1f, $24, $28, $2a, $28, $20, $13, $02
10f13     F2 E5 DA D3 
10f17     D1 D1 D5 D7 
10f1b     D9 DA DB DC 
10f1f     DE E1 E4 E7 | 	byte	$f2, $e5, $da, $d3, $d1, $d1, $d5, $d7, $d9, $da, $db, $dc, $de, $e1, $e4, $e7
10f23     EB EE F1 F5 
10f27     FB 01 09 11 
10f2b     1A 21 25 29 
10f2f     2C 2D 2F 30 | 	byte	$eb, $ee, $f1, $f5, $fb, $01, $09, $11, $1a, $21, $25, $29, $2c, $2d, $2f, $30
10f33     30 30 2F 2F 
10f37     31 33 36 3C 
10f3b     3F 41 3F 37 
10f3f     2E 21 17 0E | 	byte	$30, $30, $2f, $2f, $31, $33, $36, $3c, $3f, $41, $3f, $37, $2e, $21, $17, $0e
10f43     07 02 FF FD 
10f47     F9 EE DF CD 
10f4b     BF B1 A9 A3 
10f4f     A1 A2 A4 A8 | 	byte	$07, $02, $ff, $fd, $f9, $ee, $df, $cd, $bf, $b1, $a9, $a3, $a1, $a2, $a4, $a8
10f53     AC B2 B7 BD 
10f57     C6 CE D9 E4 
10f5b     ED F5 FB 00 
10f5f     04 06 05 03 | 	byte	$ac, $b2, $b7, $bd, $c6, $ce, $d9, $e4, $ed, $f5, $fb, $00, $04, $06, $05, $03
10f63     00 FE FD FE 
10f67     01 07 0D 14 
10f6b     1A 20 23 26 
10f6f     28 29 2B 2B | 	byte	$00, $fe, $fd, $fe, $01, $07, $0d, $14, $1a, $20, $23, $26, $28, $29, $2b, $2b
10f73     2B 28 20 15 
10f77     09 01 FA F7 
10f7b     F6 F6 F7 F9 
10f7f     FA FD FF 02 | 	byte	$2b, $28, $20, $15, $09, $01, $fa, $f7, $f6, $f6, $f7, $f9, $fa, $fd, $ff, $02
10f83     04 07 0A 0E 
10f87     13 19 1F 25 
10f8b     2A 2D 2E 2C 
10f8f     25 19 09 F9 | 	byte	$04, $07, $0a, $0e, $13, $19, $1f, $25, $2a, $2d, $2e, $2c, $25, $19, $09, $f9
10f93     EB E0 D9 D6 
10f97     D7 D8 DA DA 
10f9b     DA DB DC DD 
10f9f     DF E2 E6 E9 | 	byte	$eb, $e0, $d9, $d6, $d7, $d8, $da, $da, $da, $db, $dc, $dd, $df, $e2, $e6, $e9
10fa3     ED F1 F6 FC 
10fa7     03 0C 13 1A 
10fab     21 25 28 2A 
10faf     2B 2C 2D 2D | 	byte	$ed, $f1, $f6, $fc, $03, $0c, $13, $1a, $21, $25, $28, $2a, $2b, $2c, $2d, $2d
10fb3     2D 2E 2F 31 
10fb7     34 38 3C 3F 
10fbb     3F 3C 34 27 
10fbf     1C 13 0A 04 | 	byte	$2d, $2e, $2f, $31, $34, $38, $3c, $3f, $3f, $3c, $34, $27, $1c, $13, $0a, $04
10fc3     00 FE FB F3 
10fc7     E3 D3 C2 B5 
10fcb     AB A4 A2 A1 
10fcf     A3 A6 AB AF | 	byte	$00, $fe, $fb, $f3, $e3, $d3, $c2, $b5, $ab, $a4, $a2, $a1, $a3, $a6, $ab, $af
10fd3     B5 BC C4 CD 
10fd7     D6 E0 E9 F1 
10fdb     F8 FD 02 05 
10fdf     07 08 06 04 | 	byte	$b5, $bc, $c4, $cd, $d6, $e0, $e9, $f1, $f8, $fd, $02, $05, $07, $08, $06, $04
10fe3     02 02 03 06 
10fe7     0A 10 16 1A 
10feb     1F 22 24 26 
10fef     27 28 27 23 | 	byte	$02, $02, $03, $06, $0a, $10, $16, $1a, $1f, $22, $24, $26, $27, $28, $27, $23
10ff3     1B 0F 03 FA 
10ff7     F4 F2 F2 F3 
10ffb     F5 F8 FA FD 
10fff     FF 02 05 07 | 	byte	$1b, $0f, $03, $fa, $f4, $f2, $f2, $f3, $f5, $f8, $fa, $fd, $ff, $02, $05, $07
11003     0B 0F 14 19 
11007     1E 24 29 2C 
1100b     2F 2F 2D 28 
1100f     1E 10 02 F3 | 	byte	$0b, $0f, $14, $19, $1e, $24, $29, $2c, $2f, $2f, $2d, $28, $1e, $10, $02, $f3
11013     E8 E1 DE DD 
11017     DD DC DB DA 
1101b     DA DA DC DD 
1101f     E0 E4 E8 ED | 	byte	$e8, $e1, $de, $dd, $dd, $dc, $db, $da, $da, $da, $dc, $dd, $e0, $e4, $e8, $ed
11023     F1 F7 FD 04 
11027     0C 13 19 1E 
1102b     22 25 27 28 
1102f     29 2A 2B 2B | 	byte	$f1, $f7, $fd, $04, $0c, $13, $19, $1e, $22, $25, $27, $28, $29, $2a, $2b, $2b
11033     2D 2F 31 35 
11037     37 3B 3D 3B 
1103b     37 2D 23 18 
1103f     0F 07 02 FF | 	byte	$2d, $2f, $31, $35, $37, $3b, $3d, $3b, $37, $2d, $23, $18, $0f, $07, $02, $ff
11043     FC F6 E9 DA 
11047     C9 B9 AE A7 
1104b     A3 A1 A2 A5 
1104f     A8 AE B3 BA | 	byte	$fc, $f6, $e9, $da, $c9, $b9, $ae, $a7, $a3, $a1, $a2, $a5, $a8, $ae, $b3, $ba
11053     C1 C9 D3 DC 
11057     E4 EC F4 FA 
1105b     FF 03 06 09 
1105f     0A 0A 0A 09 | 	byte	$c1, $c9, $d3, $dc, $e4, $ec, $f4, $fa, $ff, $03, $06, $09, $0a, $0a, $0a, $09
11063     09 09 0C 0F 
11067     12 17 1B 1E 
1106b     21 22 24 25 
1106f     24 1F 16 0A | 	byte	$09, $09, $0c, $0f, $12, $17, $1b, $1e, $21, $22, $24, $25, $24, $1f, $16, $0a
11073     FF F6 F0 EE 
11077     EE F0 F2 F6 
1107b     F8 FC FE 01 
1107f     04 07 0C 0F | 	byte	$ff, $f6, $f0, $ee, $ee, $f0, $f2, $f6, $f8, $fc, $fe, $01, $04, $07, $0c, $0f
11083     14 19 1D 22 
11087     27 2B 2E 30 
1108b     31 2E 2B 24 
1108f     17 0A FC F1 | 	byte	$14, $19, $1d, $22, $27, $2b, $2e, $30, $31, $2e, $2b, $24, $17, $0a, $fc, $f1
11093     EA E6 E3 E1 
11097     DF DC DB DA 
1109b     DA DB DD DF 
1109f     E4 E7 ED F2 | 	byte	$ea, $e6, $e3, $e1, $df, $dc, $db, $da, $da, $db, $dd, $df, $e4, $e7, $ed, $f2
110a3     F9 00 06 0D 
110a7     14 19 1D 21 
110ab     23 25 26 27 
110af     28 29 2A 2C | 	byte	$f9, $00, $06, $0d, $14, $19, $1d, $21, $23, $25, $26, $27, $28, $29, $2a, $2c
110b3     2F 32 35 38 
110b7     3A 3B 39 33 
110bb     29 20 15 0C 
110bf     06 02 FF F9 | 	byte	$2f, $32, $35, $38, $3a, $3b, $39, $33, $29, $20, $15, $0c, $06, $02, $ff, $f9
110c3     EE E0 CE BF 
110c7     B2 A8 A3 A1 
110cb     A1 A3 A7 AB 
110cf     B1 B7 BF C7 | 	byte	$ee, $e0, $ce, $bf, $b2, $a8, $a3, $a1, $a1, $a3, $a7, $ab, $b1, $b7, $bf, $c7
110d3     CF D7 E1 E8 
110d7     EF F6 FC 01 
110db     04 07 0A 0C 
110df     0E 0F 0E 0E | 	byte	$cf, $d7, $e1, $e8, $ef, $f6, $fc, $01, $04, $07, $0a, $0c, $0e, $0f, $0e, $0e
110e3     0E 10 12 15 
110e7     18 1A 1D 1F 
110eb     20 21 1F 19 
110ef     10 04 F9 F1 | 	byte	$0e, $10, $12, $15, $18, $1a, $1d, $1f, $20, $21, $1f, $19, $10, $04, $f9, $f1
110f3     EC EA EA ED 
110f7     F0 F4 F8 FB 
110fb     FF 02 05 08 
110ff     0C 10 14 19 | 	byte	$ec, $ea, $ea, $ed, $f0, $f4, $f8, $fb, $ff, $02, $05, $08, $0c, $10, $14, $19
11103     1D 22 26 29 
11107     2D 2F 30 31 
1110b     2F 2C 27 1D 
1110f     11 05 F9 F1 | 	byte	$1d, $22, $26, $29, $2d, $2f, $30, $31, $2f, $2c, $27, $1d, $11, $05, $f9, $f1
11113     EC E8 E4 E0 
11117     DD DA D9 D9 
1111b     DA DC DF E4 
1111f     E9 EE F4 FA | 	byte	$ec, $e8, $e4, $e0, $dd, $da, $d9, $d9, $da, $dc, $df, $e4, $e9, $ee, $f4, $fa
11123     01 07 0E 13 
11127     17 1C 1F 21 
1112b     23 24 26 27 
1112f     29 2B 2D 2F | 	byte	$01, $07, $0e, $13, $17, $1c, $1f, $21, $23, $24, $26, $27, $29, $2b, $2d, $2f
11133     32 35 37 38 
11137     39 35 2E 25 
1113b     1B 11 0A 05 
1113f     01 FC F3 E6 | 	byte	$32, $35, $37, $38, $39, $35, $2e, $25, $1b, $11, $0a, $05, $01, $fc, $f3, $e6
11143     D4 C4 B5 AB 
11147     A4 A1 A0 A2 
1114b     A5 AA AF B6 
1114f     BD C5 CC D4 | 	byte	$d4, $c4, $b5, $ab, $a4, $a1, $a0, $a2, $a5, $aa, $af, $b6, $bd, $c5, $cc, $d4
11153     DD E4 EB F2 
11157     F8 FD 01 04 
1115b     08 0A 0E 10 
1115f     13 13 14 14 | 	byte	$dd, $e4, $eb, $f2, $f8, $fd, $01, $04, $08, $0a, $0e, $10, $13, $13, $14, $14
11163     14 15 16 18 
11167     1A 1C 1D 1D 
1116b     1B 14 09 FE 
1116f     F3 EC E8 E7 | 	byte	$14, $15, $16, $18, $1a, $1c, $1d, $1d, $1b, $14, $09, $fe, $f3, $ec, $e8, $e7
11173     E7 EA EE F2 
11177     F7 FB FE 02 
1117b     06 09 0D 11 
1117f     15 19 1E 22 | 	byte	$e7, $ea, $ee, $f2, $f7, $fb, $fe, $02, $06, $09, $0d, $11, $15, $19, $1e, $22
11183     26 2A 2C 2F 
11187     31 31 32 30 
1118b     2E 2A 22 17 
1118f     0C 01 F8 F2 | 	byte	$26, $2a, $2c, $2f, $31, $31, $32, $30, $2e, $2a, $22, $17, $0c, $01, $f8, $f2
11193     EC E6 E1 DD 
11197     D9 D8 D8 DA 
1119b     DC E0 E5 EA 
1119f     EF F5 FC 02 | 	byte	$ec, $e6, $e1, $dd, $d9, $d8, $d8, $da, $dc, $e0, $e5, $ea, $ef, $f5, $fc, $02
111a3     08 0E 12 16 
111a7     1A 1D 1F 21 
111ab     23 25 26 28 
111af     2A 2C 2F 32 | 	byte	$08, $0e, $12, $16, $1a, $1d, $1f, $21, $23, $25, $26, $28, $2a, $2c, $2f, $32
111b3     34 36 37 35 
111b7     30 29 1F 16 
111bb     0E 08 03 FD 
111bf     F5 E9 D8 C9 | 	byte	$34, $36, $37, $35, $30, $29, $1f, $16, $0e, $08, $03, $fd, $f5, $e9, $d8, $c9
111c3     B9 AE A5 A0 
111c7     9F A0 A3 A8 
111cb     AE B4 BB C2 
111cf     CA D1 D9 E1 | 	byte	$b9, $ae, $a5, $a0, $9f, $a0, $a3, $a8, $ae, $b4, $bb, $c2, $ca, $d1, $d9, $e1
111d3     E8 EE F4 F9 
111d7     FE 02 05 09 
111db     0D 10 13 16 
111df     17 19 18 18 | 	byte	$e8, $ee, $f4, $f9, $fe, $02, $05, $09, $0d, $10, $13, $16, $17, $19, $18, $18
111e3     18 18 18 19 
111e7     1A 19 15 0E 
111eb     03 F9 EF E8 
111ef     E4 E3 E5 E8 | 	byte	$18, $18, $18, $19, $1a, $19, $15, $0e, $03, $f9, $ef, $e8, $e4, $e3, $e5, $e8
111f3     EB F0 F4 F9 
111f7     FD 01 05 0A 
111fb     0D 12 15 19 
111ff     1D 21 25 29 | 	byte	$eb, $f0, $f4, $f9, $fd, $01, $05, $0a, $0d, $12, $15, $19, $1d, $21, $25, $29
11203     2C 2E 30 31 
11207     32 33 32 30 
1120b     2D 27 1F 14 
1120f     0B 01 F9 F2 | 	byte	$2c, $2e, $30, $31, $32, $33, $32, $30, $2d, $27, $1f, $14, $0b, $01, $f9, $f2
11213     EA E3 DD D9 
11217     D8 D8 DA DD 
1121b     E1 E5 EA EF 
1121f     F6 FC 02 08 | 	byte	$ea, $e3, $dd, $d9, $d8, $d8, $da, $dd, $e1, $e5, $ea, $ef, $f6, $fc, $02, $08
11223     0D 11 14 18 
11227     1A 1D 20 22 
1122b     24 26 27 29 
1122f     2B 2E 30 31 | 	byte	$0d, $11, $14, $18, $1a, $1d, $20, $22, $24, $26, $27, $29, $2b, $2e, $30, $31
11233     33 33 32 2C 
11237     24 1C 15 0E 
1123b     07 01 F9 EE 
1123f     DF D0 C1 B4 | 	byte	$33, $33, $32, $2c, $24, $1c, $15, $0e, $07, $01, $f9, $ee, $df, $d0, $c1, $b4
11243     AA A4 A1 A0 
11247     A2 A6 AB B1 
1124b     B8 BE C5 CC 
1124f     D3 DB E3 E9 | 	byte	$aa, $a4, $a1, $a0, $a2, $a6, $ab, $b1, $b8, $be, $c5, $cc, $d3, $db, $e3, $e9
11253     EF F5 F9 FD 
11257     02 06 0A 0E 
1125b     11 14 17 1A 
1125f     1B 1C 1B 1B | 	byte	$ef, $f5, $f9, $fd, $02, $06, $0a, $0e, $11, $14, $17, $1a, $1b, $1c, $1b, $1b
11263     1A 19 19 17 
11267     12 0A 01 F6 
1126b     ED E6 E2 E1 
1126f     E2 E5 E9 ED | 	byte	$1a, $19, $19, $17, $12, $0a, $01, $f6, $ed, $e6, $e2, $e1, $e2, $e5, $e9, $ed
11273     F2 F6 FB FF 
11277     04 08 0D 11 
1127b     15 18 1C 20 
1127f     23 27 2A 2D | 	byte	$f2, $f6, $fb, $ff, $04, $08, $0d, $11, $15, $18, $1c, $20, $23, $27, $2a, $2d
11283     2F 30 32 33 
11287     33 33 32 30 
1128b     2C 26 1C 12 
1128f     09 00 F7 EE | 	byte	$2f, $30, $32, $33, $33, $33, $32, $30, $2c, $26, $1c, $12, $09, $00, $f7, $ee
11293     E6 E0 DB D9 
11297     DA DB DE E2 
1129b     E6 EA EF F4 
1129f     FB 00 05 0A | 	byte	$e6, $e0, $db, $d9, $da, $db, $de, $e2, $e6, $ea, $ef, $f4, $fb, $00, $05, $0a
112a3     0F 12 15 18 
112a7     1B 1E 20 22 
112ab     24 25 28 2A 
112af     2C 2E 30 31 | 	byte	$0f, $12, $15, $18, $1b, $1e, $20, $22, $24, $25, $28, $2a, $2c, $2e, $30, $31
112b3     31 2E 29 22 
112b7     1B 14 0D 06 
112bb     FE F3 E7 D6 
112bf     C8 B9 AE A6 | 	byte	$31, $2e, $29, $22, $1b, $14, $0d, $06, $fe, $f3, $e7, $d6, $c8, $b9, $ae, $a6
112c3     A1 9F A0 A4 
112c7     A8 AE B4 BB 
112cb     C2 C8 D0 D7 
112cf     DF E5 EB F1 | 	byte	$a1, $9f, $a0, $a4, $a8, $ae, $b4, $bb, $c2, $c8, $d0, $d7, $df, $e5, $eb, $f1
112d3     F6 FB FF 03 
112d7     08 0C 10 13 
112db     16 19 1D 1F 
112df     20 20 1F 1D | 	byte	$f6, $fb, $ff, $03, $08, $0c, $10, $13, $16, $19, $1d, $1f, $20, $20, $1f, $1d
112e3     1B 17 11 08 
112e7     FC F3 EA E4 
112eb     E0 DF E0 E3 
112ef     E6 EB F1 F5 | 	byte	$1b, $17, $11, $08, $fc, $f3, $ea, $e4, $e0, $df, $e0, $e3, $e6, $eb, $f1, $f5
112f3     FA FF 04 09 
112f7     0D 12 16 19 
112fb     1C 20 24 27 
112ff     2B 2E 30 32 | 	byte	$fa, $ff, $04, $09, $0d, $12, $16, $19, $1c, $20, $24, $27, $2b, $2e, $30, $32
11303     32 34 36 36 
11307     37 35 33 2F 
1130b     29 21 18 0F 
1130f     04 FA F0 E7 | 	byte	$32, $34, $36, $36, $37, $35, $33, $2f, $29, $21, $18, $0f, $04, $fa, $f0, $e7
11313     E0 DC DA DA 
11317     DC DF E2 E5 
1131b     EA EF F5 FA 
1131f     00 05 08 0D | 	byte	$e0, $dc, $da, $da, $dc, $df, $e2, $e5, $ea, $ef, $f5, $fa, $00, $05, $08, $0d
11323     10 14 17 1A 
11327     1D 1F 21 23 
1132b     24 27 29 2B 
1132f     2D 2E 2F 2E | 	byte	$10, $14, $17, $1a, $1d, $1f, $21, $23, $24, $27, $29, $2b, $2d, $2e, $2f, $2e
11333     2A 25 1E 18 
11337     10 09 00 F6 
1133b     E7 D9 C9 BA 
1133f     AF A6 A1 9F | 	byte	$2a, $25, $1e, $18, $10, $09, $00, $f6, $e7, $d9, $c9, $ba, $af, $a6, $a1, $9f
11343     A0 A2 A7 AD 
11347     B3 BA C0 C6 
1134b     CE D5 DD E3 
1134f     E9 EF F4 F9 | 	byte	$a0, $a2, $a7, $ad, $b3, $ba, $c0, $c6, $ce, $d5, $dd, $e3, $e9, $ef, $f4, $f9
11353     FE 03 07 0B 
11357     0F 12 15 18 
1135b     1B 1F 21 22 
1135f     22 21 1D 17 | 	byte	$fe, $03, $07, $0b, $0f, $12, $15, $18, $1b, $1f, $21, $22, $22, $21, $1d, $17
11363     0E 02 F8 EE 
11367     E5 E0 DC DC 
1136b     DE E0 E5 EA 
1136f     EF F5 FA FF | 	byte	$0e, $02, $f8, $ee, $e5, $e0, $dc, $dc, $de, $e0, $e5, $ea, $ef, $f5, $fa, $ff
11373     04 0A 0F 13 
11377     17 1A 1E 21 
1137b     24 27 2A 2D 
1137f     2F 31 32 34 | 	byte	$04, $0a, $0f, $13, $17, $1a, $1e, $21, $24, $27, $2a, $2d, $2f, $31, $32, $34
11383     36 37 38 38 
11387     36 34 30 2A 
1138b     23 1A 0F 04 
1138f     F9 EF E6 E0 | 	byte	$36, $37, $38, $38, $36, $34, $30, $2a, $23, $1a, $0f, $04, $f9, $ef, $e6, $e0
11393     DD DC DC DE 
11397     E1 E3 E7 EC 
1139b     F1 F7 FC 01 
1139f     05 09 0D 10 | 	byte	$dd, $dc, $dc, $de, $e1, $e3, $e7, $ec, $f1, $f7, $fc, $01, $05, $09, $0d, $10
113a3     14 17 1A 1C 
113a7     1E 20 22 24 
113ab     27 29 2A 2C 
113af     2C 2D 2B 26 | 	byte	$14, $17, $1a, $1c, $1e, $20, $22, $24, $27, $29, $2a, $2c, $2c, $2d, $2b, $26
113b3     20 19 11 0A 
113b7     00 F5 E8 D7 
113bb     C8 BA AD A6 
113bf     A0 9E 9F A3 | 	byte	$20, $19, $11, $0a, $00, $f5, $e8, $d7, $c8, $ba, $ad, $a6, $a0, $9e, $9f, $a3
113c3     A7 AE B3 BA 
113c7     C1 C7 CE D6 
113cb     DC E3 E9 EF 
113cf     F4 F9 FE 03 | 	byte	$a7, $ae, $b3, $ba, $c1, $c7, $ce, $d6, $dc, $e3, $e9, $ef, $f4, $f9, $fe, $03
113d3     08 0C 0F 13 
113d7     15 18 1B 1E 
113db     21 23 24 24 
113df     1F 16 0B FF | 	byte	$08, $0c, $0f, $13, $15, $18, $1b, $1e, $21, $23, $24, $24, $1f, $16, $0b, $ff
113e3     F3 E9 E2 DD 
113e7     DB DB DD E1 
113eb     E6 EB F0 F5 
113ef     FB 00 06 0B | 	byte	$f3, $e9, $e2, $dd, $db, $db, $dd, $e1, $e6, $eb, $f0, $f5, $fb, $00, $06, $0b
113f3     10 14 17 1B 
113f7     1E 20 24 27 
113fb     29 2C 2E 30 
113ff     32 34 36 37 | 	byte	$10, $14, $17, $1b, $1e, $20, $24, $27, $29, $2c, $2e, $30, $32, $34, $36, $37
11403     38 38 37 36 
11407     33 2F 2A 22 
1140b     19 0D 01 F6 
1140f     ED E5 E1 DE | 	byte	$38, $38, $37, $36, $33, $2f, $2a, $22, $19, $0d, $01, $f6, $ed, $e5, $e1, $de
11413     DD DE E0 E2 
11417     E5 E9 EF F3 
1141b     F8 FD 01 06 
1141f     0A 0E 12 15 | 	byte	$dd, $de, $e0, $e2, $e5, $e9, $ef, $f3, $f8, $fd, $01, $06, $0a, $0e, $12, $15
11423     17 19 1B 1D 
11427     1F 21 23 25 
1142b     27 29 2A 2A 
1142f     29 26 20 1A | 	byte	$17, $19, $1b, $1d, $1f, $21, $23, $25, $27, $29, $2a, $2a, $29, $26, $20, $1a
11433     11 09 FF F2 
11437     E3 D3 C5 B6 
1143b     AB A4 A0 9F 
1143f     A0 A4 A9 AE | 	byte	$11, $09, $ff, $f2, $e3, $d3, $c5, $b6, $ab, $a4, $a0, $9f, $a0, $a4, $a9, $ae
11443     B4 BA C1 C7 
11447     CF D5 DC E3 
1144b     E8 EE F3 F9 
1144f     FE 03 07 0C | 	byte	$b4, $ba, $c1, $c7, $cf, $d5, $dc, $e3, $e8, $ee, $f3, $f9, $fe, $03, $07, $0c
11453     0F 12 15 18 
11457     1B 1E 21 23 
1145b     24 21 1B 10 
1145f     05 F9 EE E6 | 	byte	$0f, $12, $15, $18, $1b, $1e, $21, $23, $24, $21, $1b, $10, $05, $f9, $ee, $e6
11463     E0 DC DB DC 
11467     DE E2 E7 EC 
1146b     F2 F7 FD 03 
1146f     08 0D 12 15 | 	byte	$e0, $dc, $db, $dc, $de, $e2, $e7, $ec, $f2, $f7, $fd, $03, $08, $0d, $12, $15
11473     19 1C 1F 22 
11477     25 28 2A 2D 
1147b     2F 31 33 35 
1147f     36 38 39 39 | 	byte	$19, $1c, $1f, $22, $25, $28, $2a, $2d, $2f, $31, $33, $35, $36, $38, $39, $39
11483     38 37 35 33 
11487     2E 28 20 15 
1148b     09 FE F4 EB 
1148f     E5 E1 DF DF | 	byte	$38, $37, $35, $33, $2e, $28, $20, $15, $09, $fe, $f4, $eb, $e5, $e1, $df, $df
11493     DF E1 E4 E8 
11497     ED F2 F6 FB 
1149b     FF 04 08 0C 
1149f     10 13 15 17 | 	byte	$df, $e1, $e4, $e8, $ed, $f2, $f6, $fb, $ff, $04, $08, $0c, $10, $13, $15, $17
114a3     19 1B 1D 20 
114a7     22 24 26 27 
114ab     29 2A 29 25 
114af     20 19 10 07 | 	byte	$19, $1b, $1d, $20, $22, $24, $26, $27, $29, $2a, $29, $25, $20, $19, $10, $07
114b3     FC EF E0 CF 
114b7     C0 B4 A9 A4 
114bb     A0 A0 A2 A6 
114bf     AB B1 B7 BD | 	byte	$fc, $ef, $e0, $cf, $c0, $b4, $a9, $a4, $a0, $a0, $a2, $a6, $ab, $b1, $b7, $bd
114c3     C3 C9 D0 D7 
114c7     DE E4 EA F0 
114cb     F5 FB 00 04 
114cf     08 0C 0F 11 | 	byte	$c3, $c9, $d0, $d7, $de, $e4, $ea, $f0, $f5, $fb, $00, $04, $08, $0c, $0f, $11
114d3     14 17 1A 1D 
114d7     1F 21 1F 1A 
114db     13 09 FE F3 
114df     EA E3 DE DB | 	byte	$14, $17, $1a, $1d, $1f, $21, $1f, $1a, $13, $09, $fe, $f3, $ea, $e3, $de, $db
114e3     DB DD E0 E5 
114e7     E9 EF F4 FA 
114eb     00 05 0B 10 
114ef     14 17 1A 1E | 	byte	$db, $dd, $e0, $e5, $e9, $ef, $f4, $fa, $00, $05, $0b, $10, $14, $17, $1a, $1e
114f3     20 23 26 29 
114f7     2B 2D 30 32 
114fb     34 36 38 39 
114ff     39 3A 39 38 | 	byte	$20, $23, $26, $29, $2b, $2d, $30, $32, $34, $36, $38, $39, $39, $3a, $39, $38
11503     36 34 32 2D 
11507     25 1C 11 06 
1150b     FA F1 EA E4 
1150f     E1 E0 E0 E1 | 	byte	$36, $34, $32, $2d, $25, $1c, $11, $06, $fa, $f1, $ea, $e4, $e1, $e0, $e0, $e1
11513     E4 E7 EB F0 
11517     F4 F9 FE 02 
1151b     06 0A 0E 10 
1151f     13 15 17 19 | 	byte	$e4, $e7, $eb, $f0, $f4, $f9, $fe, $02, $06, $0a, $0e, $10, $13, $15, $17, $19
11523     1B 1D 20 21 
11527     23 26 27 28 
1152b     27 24 1D 16 
1152f     0D 04 F8 EA | 	byte	$1b, $1d, $20, $21, $23, $26, $27, $28, $27, $24, $1d, $16, $0d, $04, $f8, $ea
11533     DB CB BD B1 
11537     A8 A3 A0 A1 
1153b     A3 A7 AB B1 
1153f     B7 BD C3 CA | 	byte	$db, $cb, $bd, $b1, $a8, $a3, $a0, $a1, $a3, $a7, $ab, $b1, $b7, $bd, $c3, $ca
11543     D1 D7 DE E4 
11547     EA F0 F7 FC 
1154b     01 05 08 0C 
1154f     0F 11 14 17 | 	byte	$d1, $d7, $de, $e4, $ea, $f0, $f7, $fc, $01, $05, $08, $0c, $0f, $11, $14, $17
11553     1A 1C 1E 1D 
11557     19 12 0A 01 
1155b     F8 F0 E8 E3 
1155f     DF DD DD DF | 	byte	$1a, $1c, $1e, $1d, $19, $12, $0a, $01, $f8, $f0, $e8, $e3, $df, $dd, $dd, $df
11563     E2 E6 EB F0 
11567     F7 FD 02 08 
1156b     0D 12 15 19 
1156f     1C 1E 21 24 | 	byte	$e2, $e6, $eb, $f0, $f7, $fd, $02, $08, $0d, $12, $15, $19, $1c, $1e, $21, $24
11573     27 29 2B 2E 
11577     30 33 35 37 
1157b     38 39 3A 3A 
1157f     39 39 37 35 | 	byte	$27, $29, $2b, $2e, $30, $33, $35, $37, $38, $39, $3a, $3a, $39, $39, $37, $35
11583     34 31 2C 25 
11587     1A 0F 03 F9 
1158b     EF E9 E4 E1 
1158f     E0 E1 E3 E6 | 	byte	$34, $31, $2c, $25, $1a, $0f, $03, $f9, $ef, $e9, $e4, $e1, $e0, $e1, $e3, $e6
11593     EA EE F2 F7 
11597     FC 01 05 08 
1159b     0C 0F 12 14 
1159f     16 18 1A 1C | 	byte	$ea, $ee, $f2, $f7, $fc, $01, $05, $08, $0c, $0f, $12, $14, $16, $18, $1a, $1c
115a3     1E 20 22 25 
115a7     27 28 27 24 
115ab     1E 15 0C 02 
115af     F6 E9 D9 CB | 	byte	$1e, $20, $22, $25, $27, $28, $27, $24, $1e, $15, $0c, $02, $f6, $e9, $d9, $cb
115b3     BC B1 A8 A3 
115b7     A2 A2 A4 A7 
115bb     AC B1 B6 BC 
115bf     C2 C9 CF D6 | 	byte	$bc, $b1, $a8, $a3, $a2, $a2, $a4, $a7, $ac, $b1, $b6, $bc, $c2, $c9, $cf, $d6
115c3     DC E2 E9 EF 
115c7     F6 FC 00 04 
115cb     08 0B 0E 10 
115cf     13 15 18 1A | 	byte	$dc, $e2, $e9, $ef, $f6, $fc, $00, $04, $08, $0b, $0e, $10, $13, $15, $18, $1a
115d3     1A 18 12 0B 
115d7     04 FC F5 EE 
115db     E9 E5 E2 E0 
115df     E0 E1 E4 E8 | 	byte	$1a, $18, $12, $0b, $04, $fc, $f5, $ee, $e9, $e5, $e2, $e0, $e0, $e1, $e4, $e8
115e3     EC F1 F7 FC 
115e7     03 08 0D 12 
115eb     16 19 1C 1E 
115ef     21 23 26 28 | 	byte	$ec, $f1, $f7, $fc, $03, $08, $0d, $12, $16, $19, $1c, $1e, $21, $23, $26, $28
115f3     2B 2D 2F 32 
115f7     35 36 38 39 
115fb     3A 39 39 39 
115ff     37 36 34 33 | 	byte	$2b, $2d, $2f, $32, $35, $36, $38, $39, $3a, $39, $39, $39, $37, $36, $34, $33
11603     31 2D 26 1C 
11607     11 06 FC F3 
1160b     EC E7 E4 E3 
1160f     E3 E4 E7 EA | 	byte	$31, $2d, $26, $1c, $11, $06, $fc, $f3, $ec, $e7, $e4, $e3, $e3, $e4, $e7, $ea
11613     ED F2 F7 FB 
11617     00 03 07 0A 
1161b     0C 0F 11 13 
1161f     15 17 19 1C | 	byte	$ed, $f2, $f7, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $15, $17, $19, $1c
11623     1D 20 22 24 
11627     25 23 1E 17 
1162b     0F 05 FB EF 
1162f     E2 D4 C6 BB | 	byte	$1d, $20, $22, $24, $25, $23, $1e, $17, $0f, $05, $fb, $ef, $e2, $d4, $c6, $bb
11633     B2 AB A7 A6 
11637     A6 A7 AB AF 
1163b     B4 B8 BD C4 
1163f     C9 D0 D6 DC | 	byte	$b2, $ab, $a7, $a6, $a6, $a7, $ab, $af, $b4, $b8, $bd, $c4, $c9, $d0, $d6, $dc
11643     E3 E9 F0 F5 
11647     FA 00 03 07 
1164b     0A 0D 0F 12 
1164f     15 16 16 14 | 	byte	$e3, $e9, $f0, $f5, $fa, $00, $03, $07, $0a, $0d, $0f, $12, $15, $16, $16, $14
11653     0F 08 02 FC 
11657     F6 F2 EE EB 
1165b     E8 E6 E5 E5 
1165f     E6 E9 EC F0 | 	byte	$0f, $08, $02, $fc, $f6, $f2, $ee, $eb, $e8, $e6, $e5, $e5, $e6, $e9, $ec, $f0
11663     F5 FA 00 05 
11667     0A 0F 12 16 
1166b     19 1C 1E 21 
1166f     23 26 29 2C | 	byte	$f5, $fa, $00, $05, $0a, $0f, $12, $16, $19, $1c, $1e, $21, $23, $26, $29, $2c
11673     2E 31 33 35 
11677     37 38 39 3A 
1167b     3A 3A 3A 38 
1167f     38 36 35 33 | 	byte	$2e, $31, $33, $35, $37, $38, $39, $3a, $3a, $3a, $3a, $38, $38, $36, $35, $33
11683     30 2A 22 18 
11687     0E 03 FB F2 
1168b     ED E8 E6 E5 
1168f     E5 E7 EA ED | 	byte	$30, $2a, $22, $18, $0e, $03, $fb, $f2, $ed, $e8, $e6, $e5, $e5, $e7, $ea, $ed
11693     F1 F5 F9 FD 
11697     00 04 07 0A 
1169b     0C 0D 10 12 
1169f     15 17 19 1C | 	byte	$f1, $f5, $f9, $fd, $00, $04, $07, $0a, $0c, $0d, $10, $12, $15, $17, $19, $1c
116a3     1E 21 23 22 
116a7     20 1A 14 0C 
116ab     03 F8 EC DF 
116af     D2 C5 BA B2 | 	byte	$1e, $21, $23, $22, $20, $1a, $14, $0c, $03, $f8, $ec, $df, $d2, $c5, $ba, $b2
116b3     AD A9 A8 A8 
116b7     A9 AC B0 B4 
116bb     B9 BE C4 CA 
116bf     D0 D8 DE E5 | 	byte	$ad, $a9, $a8, $a8, $a9, $ac, $b0, $b4, $b9, $be, $c4, $ca, $d0, $d8, $de, $e5
116c3     EB F1 F6 FB 
116c7     00 03 07 0A 
116cb     0C 0F 11 13 
116cf     13 10 0C 06 | 	byte	$eb, $f1, $f6, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $13, $10, $0c, $06
116d3     00 FA F5 F1 
116d7     EF ED EC EA 
116db     E9 E9 EA EC 
116df     EE F1 F6 FA | 	byte	$00, $fa, $f5, $f1, $ef, $ed, $ec, $ea, $e9, $e9, $ea, $ec, $ee, $f1, $f6, $fa
116e3     FF 04 08 0C 
116e7     10 14 17 1A 
116eb     1C 1F 21 24 
116ef     27 2A 2C 2F | 	byte	$ff, $04, $08, $0c, $10, $14, $17, $1a, $1c, $1f, $21, $24, $27, $2a, $2c, $2f
116f3     32 33 35 37 
116f7     38 39 39 39 
116fb     39 38 37 37 
116ff     36 36 34 32 | 	byte	$32, $33, $35, $37, $38, $39, $39, $39, $39, $38, $37, $37, $36, $36, $34, $32
11703     2D 26 1D 13 
11707     08 FF F6 EF 
1170b     EA E7 E6 E6 
1170f     E8 EA ED F1 | 	byte	$2d, $26, $1d, $13, $08, $ff, $f6, $ef, $ea, $e7, $e6, $e6, $e8, $ea, $ed, $f1
11713     F4 F8 FC FF 
11717     02 05 07 09 
1171b     0B 0E 10 13 
1171f     15 18 1B 1D | 	byte	$f4, $f8, $fc, $ff, $02, $05, $07, $09, $0b, $0e, $10, $13, $15, $18, $1b, $1d
11723     1F 20 1F 1C 
11727     17 0F 08 FF 
1172b     F4 E8 DB CF 
1172f     C2 B8 B1 AC | 	byte	$1f, $20, $1f, $1c, $17, $0f, $08, $ff, $f4, $e8, $db, $cf, $c2, $b8, $b1, $ac
11733     A9 A7 A8 AA 
11737     AD B0 B5 BA 
1173b     BF C5 CB D2 
1173f     D9 DF E6 EC | 	byte	$a9, $a7, $a8, $aa, $ad, $b0, $b5, $ba, $bf, $c5, $cb, $d2, $d9, $df, $e6, $ec
11743     F1 F7 FB 00 
11747     04 06 0A 0C 
1174b     0E 10 10 0E 
1174f     0A 05 FF F9 | 	byte	$f1, $f7, $fb, $00, $04, $06, $0a, $0c, $0e, $10, $10, $0e, $0a, $05, $ff, $f9
11753     F4 F0 EE ED 
11757     EC EC ED ED 
1175b     EE EF F2 F5 
1175f     F8 FC 00 04 | 	byte	$f4, $f0, $ee, $ed, $ec, $ec, $ed, $ed, $ee, $ef, $f2, $f5, $f8, $fc, $00, $04
11763     08 0C 0F 13 
11767     16 19 1B 1E 
1176b     1F 22 25 27 
1176f     2A 2D 2F 31 | 	byte	$08, $0c, $0f, $13, $16, $19, $1b, $1e, $1f, $22, $25, $27, $2a, $2d, $2f, $31
11773     34 35 36 37 
11777     38 38 38 37 
1177b     38 37 37 37 
1177f     36 35 33 2F | 	byte	$34, $35, $36, $37, $38, $38, $38, $37, $38, $37, $37, $37, $36, $35, $33, $2f
11783     2A 21 18 0E 
11787     05 FB F4 EE 
1178b     E9 E8 E7 E9 
1178f     EB ED F0 F3 | 	byte	$2a, $21, $18, $0e, $05, $fb, $f4, $ee, $e9, $e8, $e7, $e9, $eb, $ed, $f0, $f3
11793     F7 F9 FD 00 
11797     02 04 07 08 
1179b     0B 0D 10 14 
1179f     17 1A 1C 1D | 	byte	$f7, $f9, $fd, $00, $02, $04, $07, $08, $0b, $0d, $10, $14, $17, $1a, $1c, $1d
117a3     1E 1D 1A 15 
117a7     0E 06 FD F2 
117ab     E7 DA CE C2 
117af     BA B3 AD AA | 	byte	$1e, $1d, $1a, $15, $0e, $06, $fd, $f2, $e7, $da, $ce, $c2, $ba, $b3, $ad, $aa
117b3     A8 A9 AA AD 
117b7     B1 B5 B9 BE 
117bb     C5 CA D2 D9 
117bf     DF E6 EC F1 | 	byte	$a8, $a9, $aa, $ad, $b1, $b5, $b9, $be, $c5, $ca, $d2, $d9, $df, $e6, $ec, $f1
117c3     F7 FB FF 03 
117c7     06 09 0B 0D 
117cb     0D 0C 08 04 
117cf     FF F9 F4 F0 | 	byte	$f7, $fb, $ff, $03, $06, $09, $0b, $0d, $0d, $0c, $08, $04, $ff, $f9, $f4, $f0
117d3     EE EC EC EC 
117d7     ED EE F0 F1 
117db     F3 F6 F9 FC 
117df     FF 02 06 09 | 	byte	$ee, $ec, $ec, $ec, $ed, $ee, $f0, $f1, $f3, $f6, $f9, $fc, $ff, $02, $06, $09
117e3     0D 10 13 16 
117e7     18 1B 1D 1F 
117eb     21 24 27 2A 
117ef     2D 2F 32 33 | 	byte	$0d, $10, $13, $16, $18, $1b, $1d, $1f, $21, $24, $27, $2a, $2d, $2f, $32, $33
117f3     34 35 37 37 
117f7     37 37 37 37 
117fb     37 37 37 36 
117ff     35 33 31 2C | 	byte	$34, $35, $37, $37, $37, $37, $37, $37, $37, $37, $37, $36, $35, $33, $31, $2c
11803     26 1F 15 0D 
11807     03 FB F4 EF 
1180b     EB EA E9 EA 
1180f     EC EF F1 F4 | 	byte	$26, $1f, $15, $0d, $03, $fb, $f4, $ef, $eb, $ea, $e9, $ea, $ec, $ef, $f1, $f4
11813     F6 F9 FC FF 
11817     01 03 05 08 
1181b     0B 0D 11 14 
1181f     17 19 1B 1B | 	byte	$f6, $f9, $fc, $ff, $01, $03, $05, $08, $0b, $0d, $11, $14, $17, $19, $1b, $1b
11823     1A 17 13 0D 
11827     07 FE F6 EA 
1182b     DE D2 C7 BD 
1182f     B6 B0 AC AA | 	byte	$1a, $17, $13, $0d, $07, $fe, $f6, $ea, $de, $d2, $c7, $bd, $b6, $b0, $ac, $aa
11833     AA AB AD B1 
11837     B4 B9 BE C3 
1183b     C9 D0 D7 DE 
1183f     E4 EA EF F4 | 	byte	$aa, $ab, $ad, $b1, $b4, $b9, $be, $c3, $c9, $d0, $d7, $de, $e4, $ea, $ef, $f4
11843     F9 FD 01 04 
11847     07 09 0A 0A 
1184b     08 04 FF FA 
1184f     F5 F1 EE EC | 	byte	$f9, $fd, $01, $04, $07, $09, $0a, $0a, $08, $04, $ff, $fa, $f5, $f1, $ee, $ec
11853     EA EB EB EC 
11857     EE F0 F3 F6 
1185b     F9 FC FF 02 
1185f     05 08 0B 0E | 	byte	$ea, $eb, $eb, $ec, $ee, $f0, $f3, $f6, $f9, $fc, $ff, $02, $05, $08, $0b, $0e
11863     11 13 16 19 
11867     1A 1D 1F 21 
1186b     24 27 29 2C 
1186f     2F 31 32 34 | 	byte	$11, $13, $16, $19, $1a, $1d, $1f, $21, $24, $27, $29, $2c, $2f, $31, $32, $34
11873     35 35 36 36 
11877     36 36 36 37 
1187b     37 37 37 37 
1187f     36 33 2F 2C | 	byte	$35, $35, $36, $36, $36, $36, $36, $37, $37, $37, $37, $37, $36, $33, $2f, $2c
11883     25 1D 15 0C 
11887     03 FC F5 F1 
1188b     EE EC EC ED 
1188f     EE F0 F2 F4 | 	byte	$25, $1d, $15, $0c, $03, $fc, $f5, $f1, $ee, $ec, $ec, $ed, $ee, $f0, $f2, $f4
11893     F7 F9 FC FE 
11897     00 02 05 08 
1189b     0B 0E 12 14 
1189f     16 18 19 18 | 	byte	$f7, $f9, $fc, $fe, $00, $02, $05, $08, $0b, $0e, $12, $14, $16, $18, $19, $18
118a3     16 12 0D 07 
118a7     00 F8 EC E0 
118ab     D5 C9 C0 B8 
118af     B2 AE AB AA | 	byte	$16, $12, $0d, $07, $00, $f8, $ec, $e0, $d5, $c9, $c0, $b8, $b2, $ae, $ab, $aa
118b3     AB AD AF B3 
118b7     B7 BC C2 C8 
118bb     CF D5 DC E2 
118bf     E8 EE F3 F7 | 	byte	$ab, $ad, $af, $b3, $b7, $bc, $c2, $c8, $cf, $d5, $dc, $e2, $e8, $ee, $f3, $f7
118c3     FB FF 03 05 
118c7     07 07 06 03 
118cb     FF FB F5 F2 
118cf     EE EC EA EA | 	byte	$fb, $ff, $03, $05, $07, $07, $06, $03, $ff, $fb, $f5, $f2, $ee, $ec, $ea, $ea
118d3     EA EB ED EF 
118d7     F2 F5 F9 FD 
118db     01 04 08 0A 
118df     0D 0F 10 13 | 	byte	$ea, $eb, $ed, $ef, $f2, $f5, $f9, $fd, $01, $04, $08, $0a, $0d, $0f, $10, $13
118e3     15 17 19 1B 
118e7     1D 1F 21 24 
118eb     27 29 2B 2E 
118ef     30 31 33 34 | 	byte	$15, $17, $19, $1b, $1d, $1f, $21, $24, $27, $29, $2b, $2e, $30, $31, $33, $34
118f3     34 35 35 35 
118f7     36 36 37 38 
118fb     38 38 38 37 
118ff     35 32 2E 29 | 	byte	$34, $35, $35, $35, $36, $36, $37, $38, $38, $38, $38, $37, $35, $32, $2e, $29
11903     22 1A 12 0A 
11907     01 FB F6 F2 
1190b     EF EE EE EE 
1190f     EF F1 F3 F5 | 	byte	$22, $1a, $12, $0a, $01, $fb, $f6, $f2, $ef, $ee, $ee, $ee, $ef, $f1, $f3, $f5
11913     F7 F9 FB FE 
11917     01 03 06 0A 
1191b     0D 11 14 16 
1191f     17 17 16 14 | 	byte	$f7, $f9, $fb, $fe, $01, $03, $06, $0a, $0d, $11, $14, $16, $17, $17, $16, $14
11923     11 0C 07 FF 
11927     F7 EC E0 D4 
1192b     C9 BF B7 B0 
1192f     AC AA A9 AA | 	byte	$11, $0c, $07, $ff, $f7, $ec, $e0, $d4, $c9, $bf, $b7, $b0, $ac, $aa, $a9, $aa
11933     AB AE B2 B6 
11937     BB C1 C8 CF 
1193b     D5 DC E2 E8 
1193f     ED F2 F6 FB | 	byte	$ab, $ae, $b2, $b6, $bb, $c1, $c8, $cf, $d5, $dc, $e2, $e8, $ed, $f2, $f6, $fb
11943     FE 02 04 05 
11947     04 02 FE F9 
1194b     F5 F0 ED EB 
1194f     EA E9 E9 EA | 	byte	$fe, $02, $04, $05, $04, $02, $fe, $f9, $f5, $f0, $ed, $eb, $ea, $e9, $e9, $ea
11953     EB EE F0 F4 
11957     F7 FC 00 05 
1195b     09 0D 0F 11 
1195f     14 15 16 17 | 	byte	$eb, $ee, $f0, $f4, $f7, $fc, $00, $05, $09, $0d, $0f, $11, $14, $15, $16, $17
11963     19 1A 1C 1E 
11967     20 22 25 28 
1196b     2A 2C 2E 30 
1196f     31 33 33 34 | 	byte	$19, $1a, $1c, $1e, $20, $22, $25, $28, $2a, $2c, $2e, $30, $31, $33, $33, $34
11973     34 34 35 35 
11977     36 37 38 39 
1197b     39 39 38 35 
1197f     33 2E 2A 24 | 	byte	$34, $34, $35, $35, $36, $37, $38, $39, $39, $39, $38, $35, $33, $2e, $2a, $24
11983     1D 15 0D 05 
11987     FF F9 F5 F1 
1198b     F0 EF EF EF 
1198f     F0 F1 F3 F5 | 	byte	$1d, $15, $0d, $05, $ff, $f9, $f5, $f1, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
11993     F7 F9 FB FF 
11997     02 05 09 0C 
1199b     0F 12 13 14 
1199f     14 14 11 0E | 	byte	$f7, $f9, $fb, $ff, $02, $05, $09, $0c, $0f, $12, $13, $14, $14, $14, $11, $0e
119a3     09 04 FC F2 
119a7     E8 DC D0 C6 
119ab     BC B5 AF AB 
119af     AA A9 AA AC | 	byte	$09, $04, $fc, $f2, $e8, $dc, $d0, $c6, $bc, $b5, $af, $ab, $aa, $a9, $aa, $ac
119b3     AF B3 B7 BD 
119b7     C3 CA D0 D6 
119bb     DE E3 E8 ED 
119bf     F2 F6 FA FE | 	byte	$af, $b3, $b7, $bd, $c3, $ca, $d0, $d6, $de, $e3, $e8, $ed, $f2, $f6, $fa, $fe
119c3     00 02 01 FE 
119c7     FB F7 F2 EF 
119cb     EC E9 E8 E7 
119cf     E8 E9 EB ED | 	byte	$00, $02, $01, $fe, $fb, $f7, $f2, $ef, $ec, $e9, $e8, $e7, $e8, $e9, $eb, $ed
119d3     EF F3 F6 FB 
119d7     00 04 0A 0D 
119db     11 13 15 17 
119df     18 19 1A 1B | 	byte	$ef, $f3, $f6, $fb, $00, $04, $0a, $0d, $11, $13, $15, $17, $18, $19, $1a, $1b
119e3     1C 1E 20 22 
119e7     24 27 28 2B 
119eb     2C 2E 30 31 
119ef     32 33 33 33 | 	byte	$1c, $1e, $20, $22, $24, $27, $28, $2b, $2c, $2e, $30, $31, $32, $33, $33, $33
119f3     34 35 35 37 
119f7     38 39 39 3A 
119fb     39 38 36 32 
119ff     2F 29 25 1E | 	byte	$34, $35, $35, $37, $38, $39, $39, $3a, $39, $38, $36, $32, $2f, $29, $25, $1e
11a03     17 11 09 04 
11a07     FF FA F6 F3 
11a0b     F2 F0 F0 F0 
11a0f     F1 F2 F3 F5 | 	byte	$17, $11, $09, $04, $ff, $fa, $f6, $f3, $f2, $f0, $f0, $f0, $f1, $f2, $f3, $f5
11a13     F7 F9 FD 00 
11a17     03 07 09 0C 
11a1b     0E 10 10 10 
11a1f     0F 0C 09 06 | 	byte	$f7, $f9, $fd, $00, $03, $07, $09, $0c, $0e, $10, $10, $10, $0f, $0c, $09, $06
11a23     00 F9 F1 E6 
11a27     DC D0 C7 BE 
11a2b     B7 B1 AE AC 
11a2f     AB AC AD B0 | 	byte	$00, $f9, $f1, $e6, $dc, $d0, $c7, $be, $b7, $b1, $ae, $ac, $ab, $ac, $ad, $b0
11a33     B4 B9 BE C4 
11a37     CA D1 D7 DC 
11a3b     E2 E7 ED F1 
11a3f     F5 F9 FC FD | 	byte	$b4, $b9, $be, $c4, $ca, $d1, $d7, $dc, $e2, $e7, $ed, $f1, $f5, $f9, $fc, $fd
11a43     FD FB F8 F5 
11a47     F2 EE EC E9 
11a4b     E8 E7 E7 E8 
11a4f     EA EC EE F1 | 	byte	$fd, $fb, $f8, $f5, $f2, $ee, $ec, $e9, $e8, $e7, $e7, $e8, $ea, $ec, $ee, $f1
11a53     F5 F9 FE 02 
11a57     07 0C 10 14 
11a5b     17 19 1A 1B 
11a5f     1C 1D 1E 1E | 	byte	$f5, $f9, $fe, $02, $07, $0c, $10, $14, $17, $19, $1a, $1b, $1c, $1d, $1e, $1e
11a63     20 22 23 25 
11a67     28 29 2B 2D 
11a6b     2E 2F 30 31 
11a6f     32 32 32 33 | 	byte	$20, $22, $23, $25, $28, $29, $2b, $2d, $2e, $2f, $30, $31, $32, $32, $32, $33
11a73     34 35 37 38 
11a77     38 39 39 39 
11a7b     37 35 32 2E 
11a7f     29 25 1F 19 | 	byte	$34, $35, $37, $38, $38, $39, $39, $39, $37, $35, $32, $2e, $29, $25, $1f, $19
11a83     13 0D 07 02 
11a87     FD F9 F6 F3 
11a8b     F1 F1 F0 F1 
11a8f     F1 F2 F4 F7 | 	byte	$13, $0d, $07, $02, $fd, $f9, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f7
11a93     F9 FC FF 03 
11a97     06 08 0B 0D 
11a9b     0D 0D 0D 0B 
11a9f     09 07 02 FD | 	byte	$f9, $fc, $ff, $03, $06, $08, $0b, $0d, $0d, $0d, $0d, $0b, $09, $07, $02, $fd
11aa3     F4 EA E1 D5 
11aa7     CC C2 BA B4 
11aab     AF AC AB AB 
11aaf     AD AF B2 B7 | 	byte	$f4, $ea, $e1, $d5, $cc, $c2, $ba, $b4, $af, $ac, $ab, $ab, $ad, $af, $b2, $b7
11ab3     BC C2 C7 CE 
11ab7     D4 DA DF E4 
11abb     E9 EE F2 F6 
11abf     F9 FA F9 F7 | 	byte	$bc, $c2, $c7, $ce, $d4, $da, $df, $e4, $e9, $ee, $f2, $f6, $f9, $fa, $f9, $f7
11ac3     F5 F2 EF EC 
11ac7     EA E8 E7 E7 
11acb     E7 E8 EA EC 
11acf     EF F2 F5 FA | 	byte	$f5, $f2, $ef, $ec, $ea, $e8, $e7, $e7, $e7, $e8, $ea, $ec, $ef, $f2, $f5, $fa
11ad3     FF 04 09 0D 
11ad7     11 15 18 1C 
11adb     1E 20 21 21 
11adf     22 22 23 24 | 	byte	$ff, $04, $09, $0d, $11, $15, $18, $1c, $1e, $20, $21, $21, $22, $22, $23, $24
11ae3     26 28 29 2B 
11ae7     2C 2D 2E 2F 
11aeb     30 30 30 31 
11aef     31 32 33 34 | 	byte	$26, $28, $29, $2b, $2c, $2d, $2e, $2f, $30, $30, $30, $31, $31, $32, $33, $34
11af3     35 37 38 39 
11af7     38 39 38 36 
11afb     33 30 2C 27 
11aff     22 1D 18 13 | 	byte	$35, $37, $38, $39, $38, $39, $38, $36, $33, $30, $2c, $27, $22, $1d, $18, $13
11b03     0D 07 03 FE 
11b07     FA F6 F3 F2 
11b0b     F1 F0 F0 F1 
11b0f     F3 F5 F7 FA | 	byte	$0d, $07, $03, $fe, $fa, $f6, $f3, $f2, $f1, $f0, $f0, $f1, $f3, $f5, $f7, $fa
11b13     FD 00 03 06 
11b17     08 0A 0B 0B 
11b1b     0A 09 08 06 
11b1f     02 FC F4 EA | 	byte	$fd, $00, $03, $06, $08, $0a, $0b, $0b, $0a, $09, $08, $06, $02, $fc, $f4, $ea
11b23     E0 D6 CB C3 
11b27     BA B3 AF AC 
11b2b     AA AA AB AE 
11b2f     B2 B6 BB C1 | 	byte	$e0, $d6, $cb, $c3, $ba, $b3, $af, $ac, $aa, $aa, $ab, $ae, $b2, $b6, $bb, $c1
11b33     C7 CD D3 D8 
11b37     DE E3 E8 EC 
11b3b     F1 F4 F6 F6 
11b3f     F4 F2 EF ED | 	byte	$c7, $cd, $d3, $d8, $de, $e3, $e8, $ec, $f1, $f4, $f6, $f6, $f4, $f2, $ef, $ed
11b43     EA E8 E6 E6 
11b47     E5 E5 E6 E8 
11b4b     EA ED F0 F4 
11b4f     F7 FC 01 06 | 	byte	$ea, $e8, $e6, $e6, $e5, $e5, $e6, $e8, $ea, $ed, $f0, $f4, $f7, $fc, $01, $06
11b53     0B 0F 13 17 
11b57     1B 1E 20 22 
11b5b     23 24 24 25 
11b5f     26 27 28 29 | 	byte	$0b, $0f, $13, $17, $1b, $1e, $20, $22, $23, $24, $24, $25, $26, $27, $28, $29
11b63     2A 2B 2C 2D 
11b67     2E 2E 2F 2F 
11b6b     30 30 31 32 
11b6f     33 34 35 36 | 	byte	$2a, $2b, $2c, $2d, $2e, $2e, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $36
11b73     37 38 39 38 
11b77     38 36 34 31 
11b7b     2C 28 24 1F 
11b7f     1B 16 10 0B | 	byte	$37, $38, $39, $38, $38, $36, $34, $31, $2c, $28, $24, $1f, $1b, $16, $10, $0b
11b83     06 01 FC F9 
11b87     F5 F3 F1 F0 
11b8b     F0 F1 F2 F4 
11b8f     F6 F8 FC FF | 	byte	$06, $01, $fc, $f9, $f5, $f3, $f1, $f0, $f0, $f1, $f2, $f4, $f6, $f8, $fc, $ff
11b93     02 04 06 08 
11b97     09 08 08 07 
11b9b     05 03 00 F9 
11b9f     F2 E9 DE D4 | 	byte	$02, $04, $06, $08, $09, $08, $08, $07, $05, $03, $00, $f9, $f2, $e9, $de, $d4
11ba3     CA C1 B9 B3 
11ba7     AF AC AA AA 
11bab     AC AF B2 B7 
11baf     BC C3 C8 CE | 	byte	$ca, $c1, $b9, $b3, $af, $ac, $aa, $aa, $ac, $af, $b2, $b7, $bc, $c3, $c8, $ce
11bb3     D5 DA DF E4 
11bb7     E9 ED F1 F3 
11bbb     F4 F3 F0 EE 
11bbf     EB E9 E6 E5 | 	byte	$d5, $da, $df, $e4, $e9, $ed, $f1, $f3, $f4, $f3, $f0, $ee, $eb, $e9, $e6, $e5
11bc3     E4 E4 E4 E5 
11bc7     E7 E9 EB EE 
11bcb     F1 F5 F9 FE 
11bcf     03 08 0D 11 | 	byte	$e4, $e4, $e4, $e5, $e7, $e9, $eb, $ee, $f1, $f5, $f9, $fe, $03, $08, $0d, $11
11bd3     15 19 1C 1F 
11bd7     21 23 25 26 
11bdb     27 28 28 29 
11bdf     2A 2B 2C 2C | 	byte	$15, $19, $1c, $1f, $21, $23, $25, $26, $27, $28, $28, $29, $2a, $2b, $2c, $2c
11be3     2D 2D 2E 2E 
11be7     2E 2E 2F 2F 
11beb     30 31 32 34 
11bef     34 36 37 37 | 	byte	$2d, $2d, $2e, $2e, $2e, $2e, $2f, $2f, $30, $31, $32, $34, $34, $36, $37, $37
11bf3     37 37 36 35 
11bf7     33 30 2C 27 
11bfb     23 20 1C 17 
11bff     13 0E 09 04 | 	byte	$37, $37, $36, $35, $33, $30, $2c, $27, $23, $20, $1c, $17, $13, $0e, $09, $04
11c03     00 FB F7 F5 
11c07     F3 F1 F1 F1 
11c0b     F2 F3 F6 F8 
11c0f     FB FE 01 02 | 	byte	$00, $fb, $f7, $f5, $f3, $f1, $f1, $f1, $f2, $f3, $f6, $f8, $fb, $fe, $01, $02
11c13     04 05 05 05 
11c17     04 03 02 00 
11c1b     FD F7 EF E6 
11c1f     DD D2 C9 C0 | 	byte	$04, $05, $05, $05, $04, $03, $02, $00, $fd, $f7, $ef, $e6, $dd, $d2, $c9, $c0
11c23     B8 B3 AF AC 
11c27     AB AB AD B0 
11c2b     B4 B8 BE C3 
11c2f     C9 CE D4 DA | 	byte	$b8, $b3, $af, $ac, $ab, $ab, $ad, $b0, $b4, $b8, $be, $c3, $c9, $ce, $d4, $da
11c33     DE E3 E7 EC 
11c37     EE EF EF ED 
11c3b     EA E8 E6 E4 
11c3f     E3 E2 E2 E2 | 	byte	$de, $e3, $e7, $ec, $ee, $ef, $ef, $ed, $ea, $e8, $e6, $e4, $e3, $e2, $e2, $e2
11c43     E3 E5 E7 E9 
11c47     EC F0 F3 F7 
11c4b     FC 01 06 0A 
11c4f     0F 13 17 1A | 	byte	$e3, $e5, $e7, $e9, $ec, $f0, $f3, $f7, $fc, $01, $06, $0a, $0f, $13, $17, $1a
11c53     1D 20 23 25 
11c57     27 29 2A 2A 
11c5b     2B 2C 2D 2D 
11c5f     2E 2E 2F 2E | 	byte	$1d, $20, $23, $25, $27, $29, $2a, $2a, $2b, $2c, $2d, $2d, $2e, $2e, $2f, $2e
11c63     2E 2E 2E 2F 
11c67     2F 2F 30 31 
11c6b     32 33 34 35 
11c6f     36 36 37 36 | 	byte	$2e, $2e, $2e, $2f, $2f, $2f, $30, $31, $32, $33, $34, $35, $36, $36, $37, $36
11c73     36 35 32 30 
11c77     2C 29 25 20 
11c7b     1D 19 15 11 
11c7f     0C 08 03 FF | 	byte	$36, $35, $32, $30, $2c, $29, $25, $20, $1d, $19, $15, $11, $0c, $08, $03, $ff
11c83     FB F7 F5 F3 
11c87     F2 F2 F3 F4 
11c8b     F6 F8 FA FD 
11c8f     FF 01 03 03 | 	byte	$fb, $f7, $f5, $f3, $f2, $f2, $f3, $f4, $f6, $f8, $fa, $fd, $ff, $01, $03, $03
11c93     04 03 02 02 
11c97     01 FF FD F6 
11c9b     EF E6 DC D2 
11c9f     C9 C1 B9 B4 | 	byte	$04, $03, $02, $02, $01, $ff, $fd, $f6, $ef, $e6, $dc, $d2, $c9, $c1, $b9, $b4
11ca3     B0 AD AC AC 
11ca7     AE B1 B4 B9 
11cab     BD C2 C8 CD 
11caf     D4 D8 DE E2 | 	byte	$b0, $ad, $ac, $ac, $ae, $b1, $b4, $b9, $bd, $c2, $c8, $cd, $d4, $d8, $de, $e2
11cb3     E6 E9 EB EB 
11cb7     E9 E7 E5 E3 
11cbb     E1 E1 DF DF 
11cbf     E0 E1 E3 E5 | 	byte	$e6, $e9, $eb, $eb, $e9, $e7, $e5, $e3, $e1, $e1, $df, $df, $e0, $e1, $e3, $e5
11cc3     E7 EA ED F1 
11cc7     F5 F9 FE 03 
11ccb     08 0C 10 15 
11ccf     18 1C 1E 21 | 	byte	$e7, $ea, $ed, $f1, $f5, $f9, $fe, $03, $08, $0c, $10, $15, $18, $1c, $1e, $21
11cd3     24 26 28 2A 
11cd7     2C 2D 2E 2F 
11cdb     2F 30 30 30 
11cdf     30 2F 2F 2F | 	byte	$24, $26, $28, $2a, $2c, $2d, $2e, $2f, $2f, $30, $30, $30, $30, $2f, $2f, $2f
11ce3     2F 2F 2F 30 
11ce7     30 31 32 33 
11ceb     34 35 35 36 
11cef     36 36 35 34 | 	byte	$2f, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $35, $36, $36, $36, $35, $34
11cf3     32 30 2D 29 
11cf7     24 21 1E 1A 
11cfb     17 13 0F 0B 
11cff     06 01 FD FA | 	byte	$32, $30, $2d, $29, $24, $21, $1e, $1a, $17, $13, $0f, $0b, $06, $01, $fd, $fa
11d03     F7 F5 F3 F3 
11d07     F3 F4 F6 F7 
11d0b     FA FC FE FF 
11d0f     00 01 01 00 | 	byte	$f7, $f5, $f3, $f3, $f3, $f4, $f6, $f7, $fa, $fc, $fe, $ff, $00, $01, $01, $00
11d13     00 FF FF FD 
11d17     FA F5 ED E4 
11d1b     DC D2 C9 C0 
11d1f     B8 B3 AF AC | 	byte	$00, $ff, $ff, $fd, $fa, $f5, $ed, $e4, $dc, $d2, $c9, $c0, $b8, $b3, $af, $ac
11d23     AB AC AD B0 
11d27     B4 B8 BD C2 
11d2b     C8 CD D2 D8 
11d2f     DC E1 E5 E7 | 	byte	$ab, $ac, $ad, $b0, $b4, $b8, $bd, $c2, $c8, $cd, $d2, $d8, $dc, $e1, $e5, $e7
11d33     E7 E6 E5 E3 
11d37     E0 DF DE DD 
11d3b     DD DD DE E0 
11d3f     E2 E5 E7 EB | 	byte	$e7, $e6, $e5, $e3, $e0, $df, $de, $dd, $dd, $dd, $de, $e0, $e2, $e5, $e7, $eb
11d43     EE F3 F7 FB 
11d47     00 04 09 0E 
11d4b     12 16 1A 1D 
11d4f     20 22 25 27 | 	byte	$ee, $f3, $f7, $fb, $00, $04, $09, $0e, $12, $16, $1a, $1d, $20, $22, $25, $27
11d53     2A 2C 2E 2F 
11d57     31 31 32 32 
11d5b     32 32 32 31 
11d5f     30 30 30 30 | 	byte	$2a, $2c, $2e, $2f, $31, $31, $32, $32, $32, $32, $32, $31, $30, $30, $30, $30
11d63     30 30 31 31 
11d67     32 33 33 34 
11d6b     35 35 35 35 
11d6f     35 34 33 31 | 	byte	$30, $30, $31, $31, $32, $33, $33, $34, $35, $35, $35, $35, $35, $34, $33, $31
11d73     2E 2B 26 23 
11d77     1F 1C 19 16 
11d7b     13 0E 0A 06 
11d7f     02 FE FB F8 | 	byte	$2e, $2b, $26, $23, $1f, $1c, $19, $16, $13, $0e, $0a, $06, $02, $fe, $fb, $f8
11d83     F6 F5 F5 F5 
11d87     F6 F7 F8 FA 
11d8b     FB FC FD FD 
11d8f     FD FC FC FC | 	byte	$f6, $f5, $f5, $f5, $f6, $f7, $f8, $fa, $fb, $fc, $fd, $fd, $fd, $fc, $fc, $fc
11d93     FC FB F9 F4 
11d97     EE E6 DE D3 
11d9b     CB C2 BB B5 
11d9f     B1 AE AD AD | 	byte	$fc, $fb, $f9, $f4, $ee, $e6, $de, $d3, $cb, $c2, $bb, $b5, $b1, $ae, $ad, $ad
11da3     AE B0 B3 B8 
11da7     BB C0 C6 CB 
11dab     D0 D5 DA DE 
11daf     E1 E3 E3 E2 | 	byte	$ae, $b0, $b3, $b8, $bb, $c0, $c6, $cb, $d0, $d5, $da, $de, $e1, $e3, $e3, $e2
11db3     E0 DE DD DB 
11db7     DB DA DA DB 
11dbb     DC DE E1 E4 
11dbf     E7 EA EE F2 | 	byte	$e0, $de, $dd, $db, $db, $da, $da, $db, $dc, $de, $e1, $e4, $e7, $ea, $ee, $f2
11dc3     F7 FB FF 04 
11dc7     08 0D 11 15 
11dcb     19 1C 1F 22 
11dcf     24 26 29 2C | 	byte	$f7, $fb, $ff, $04, $08, $0d, $11, $15, $19, $1c, $1f, $22, $24, $26, $29, $2c
11dd3     2D 2F 31 32 
11dd7     33 33 33 33 
11ddb     32 31 31 30 
11ddf     30 30 30 30 | 	byte	$2d, $2f, $31, $32, $33, $33, $33, $33, $32, $31, $31, $30, $30, $30, $30, $30
11de3     30 31 31 32 
11de7     32 33 33 34 
11deb     34 34 34 33 
11def     33 31 2F 2C | 	byte	$30, $31, $31, $32, $32, $33, $33, $34, $34, $34, $34, $33, $33, $31, $2f, $2c
11df3     28 24 21 1D 
11df7     1A 17 14 11 
11dfb     0E 0A 07 04 
11dff     01 FF FC FA | 	byte	$28, $24, $21, $1d, $1a, $17, $14, $11, $0e, $0a, $07, $04, $01, $ff, $fc, $fa
11e03     F9 F8 F7 F8 
11e07     F8 F9 FA FB 
11e0b     FB FB FA FA 
11e0f     FA F9 F9 F9 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fb, $fb, $fa, $fa, $fa, $f9, $f9, $f9
11e13     F9 F6 F2 EC 
11e17     E6 DE D5 CE 
11e1b     C6 C0 BB B7 
11e1f     B4 B2 B2 B2 | 	byte	$f9, $f6, $f2, $ec, $e6, $de, $d5, $ce, $c6, $c0, $bb, $b7, $b4, $b2, $b2, $b2
11e23     B4 B6 B9 BD 
11e27     C1 C6 CA CF 
11e2b     D3 D8 DB DC 
11e2f     DD DD DC DB | 	byte	$b4, $b6, $b9, $bd, $c1, $c6, $ca, $cf, $d3, $d8, $db, $dc, $dd, $dd, $dc, $db
11e33     D9 D9 D8 D8 
11e37     D8 D9 DA DC 
11e3b     DE E1 E4 E7 
11e3f     EA EF F3 F6 | 	byte	$d9, $d9, $d8, $d8, $d8, $d9, $da, $dc, $de, $e1, $e4, $e7, $ea, $ef, $f3, $f6
11e43     FB FF 04 08 
11e47     0C 11 14 18 
11e4b     1B 1E 21 23 
11e4f     27 29 2B 2D | 	byte	$fb, $ff, $04, $08, $0c, $11, $14, $18, $1b, $1e, $21, $23, $27, $29, $2b, $2d
11e53     2F 31 32 33 
11e57     34 34 35 34 
11e5b     33 33 32 31 
11e5f     31 31 31 31 | 	byte	$2f, $31, $32, $33, $34, $34, $35, $34, $33, $33, $32, $31, $31, $31, $31, $31
11e63     31 31 31 32 
11e67     32 33 32 32 
11e6b     32 32 32 31 
11e6f     30 2E 2B 29 | 	byte	$31, $31, $31, $32, $32, $33, $32, $32, $32, $32, $32, $31, $30, $2e, $2b, $29
11e73     25 21 1E 1B 
11e77     18 16 13 10 
11e7b     0D 0B 07 04 
11e7f     02 FF FE FC | 	byte	$25, $21, $1e, $1b, $18, $16, $13, $10, $0d, $0b, $07, $04, $02, $ff, $fe, $fc
11e83     FA F9 F9 F9 
11e87     F9 FA FA F9 
11e8b     F9 F9 F8 F8 
11e8f     F8 F9 F8 F7 | 	byte	$fa, $f9, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f8, $f9, $f8, $f7
11e93     F4 F0 EB E4 
11e97     DD D5 CE C8 
11e9b     C1 BC B8 B5 
11e9f     B3 B3 B3 B4 | 	byte	$f4, $f0, $eb, $e4, $dd, $d5, $ce, $c8, $c1, $bc, $b8, $b5, $b3, $b3, $b3, $b4
11ea3     B7 BA BD C1 
11ea7     C5 CA CE D2 
11eab     D5 D7 D9 D9 
11eaf     D8 D8 D7 D5 | 	byte	$b7, $ba, $bd, $c1, $c5, $ca, $ce, $d2, $d5, $d7, $d9, $d9, $d8, $d8, $d7, $d5
11eb3     D5 D5 D5 D6 
11eb7     D8 D9 DB DE 
11ebb     E1 E4 E8 EC 
11ebf     F0 F4 F8 FC | 	byte	$d5, $d5, $d5, $d6, $d8, $d9, $db, $de, $e1, $e4, $e8, $ec, $f0, $f4, $f8, $fc
11ec3     01 05 09 0D 
11ec7     11 15 19 1C 
11ecb     1F 22 25 27 
11ecf     2A 2C 2E 30 | 	byte	$01, $05, $09, $0d, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30
11ed3     32 33 34 35 
11ed7     35 35 35 34 
11edb     33 33 33 32 
11edf     32 32 31 31 | 	byte	$32, $33, $34, $35, $35, $35, $35, $34, $33, $33, $33, $32, $32, $32, $31, $31
11ee3     31 31 31 31 
11ee7     32 32 32 32 
11eeb     32 31 31 30 
11eef     2E 2C 29 26 | 	byte	$31, $31, $31, $31, $32, $32, $32, $32, $32, $31, $31, $30, $2e, $2c, $29, $26
11ef3     22 1F 1B 19 
11ef7     16 13 11 0F 
11efb     0C 0A 07 04 
11eff     02 00 FE FC | 	byte	$22, $1f, $1b, $19, $16, $13, $11, $0f, $0c, $0a, $07, $04, $02, $00, $fe, $fc
11f03     FB FA FA F9 
11f07     F9 F9 F8 F8 
11f0b     F7 F7 F7 F7 
11f0f     F7 F7 F6 F3 | 	byte	$fb, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f7, $f7, $f7, $f7, $f7, $f7, $f6, $f3
11f13     EF EA E4 DD 
11f17     D6 CE C7 C2 
11f1b     BD B9 B6 B4 
11f1f     B4 B4 B5 B7 | 	byte	$ef, $ea, $e4, $dd, $d6, $ce, $c7, $c2, $bd, $b9, $b6, $b4, $b4, $b4, $b5, $b7
11f23     BA BD C0 C5 
11f27     C9 CD D0 D3 
11f2b     D5 D5 D6 D5 
11f2f     D4 D3 D3 D2 | 	byte	$ba, $bd, $c0, $c5, $c9, $cd, $d0, $d3, $d5, $d5, $d6, $d5, $d4, $d3, $d3, $d2
11f33     D3 D3 D4 D6 
11f37     D9 DB DF E3 
11f3b     E5 E9 ED F1 
11f3f     F6 F9 FE 02 | 	byte	$d3, $d3, $d4, $d6, $d9, $db, $df, $e3, $e5, $e9, $ed, $f1, $f6, $f9, $fe, $02
11f43     06 0A 0E 12 
11f47     16 19 1C 1F 
11f4b     22 25 28 2A 
11f4f     2C 2E 30 31 | 	byte	$06, $0a, $0e, $12, $16, $19, $1c, $1f, $22, $25, $28, $2a, $2c, $2e, $30, $31
11f53     33 34 36 36 
11f57     36 36 36 36 
11f5b     35 34 34 33 
11f5f     33 32 32 32 | 	byte	$33, $34, $36, $36, $36, $36, $36, $36, $35, $34, $34, $33, $33, $32, $32, $32
11f63     31 32 32 31 
11f67     31 31 31 31 
11f6b     31 30 2F 2E 
11f6f     2B 29 26 22 | 	byte	$31, $32, $32, $31, $31, $31, $31, $31, $31, $30, $2f, $2e, $2b, $29, $26, $22
11f73     1F 1C 19 17 
11f77     14 12 10 0E 
11f7b     0C 0A 07 05 
11f7f     02 00 FE FD | 	byte	$1f, $1c, $19, $17, $14, $12, $10, $0e, $0c, $0a, $07, $05, $02, $00, $fe, $fd
11f83     FC FB FA F9 
11f87     F9 F8 F7 F6 
11f8b     F6 F5 F6 F6 
11f8f     F5 F4 F2 EF | 	byte	$fc, $fb, $fa, $f9, $f9, $f8, $f7, $f6, $f6, $f5, $f6, $f6, $f5, $f4, $f2, $ef
11f93     EA E4 DD D7 
11f97     CF C8 C3 BD 
11f9b     BA B7 B5 B4 
11f9f     B4 B5 B7 B9 | 	byte	$ea, $e4, $dd, $d7, $cf, $c8, $c3, $bd, $ba, $b7, $b5, $b4, $b4, $b5, $b7, $b9
11fa3     BC BF C3 C7 
11fa7     CB CE D0 D2 
11fab     D2 D2 D1 D0 
11faf     D0 D0 CF D0 | 	byte	$bc, $bf, $c3, $c7, $cb, $ce, $d0, $d2, $d2, $d2, $d1, $d0, $d0, $d0, $cf, $d0
11fb3     D1 D2 D4 D7 
11fb7     DA DD E1 E4 
11fbb     E9 ED F1 F5 
11fbf     F9 FE 02 06 | 	byte	$d1, $d2, $d4, $d7, $da, $dd, $e1, $e4, $e9, $ed, $f1, $f5, $f9, $fe, $02, $06
11fc3     0A 0E 12 15 
11fc7     19 1C 1F 23 
11fcb     25 28 2A 2C 
11fcf     2E 30 31 33 | 	byte	$0a, $0e, $12, $15, $19, $1c, $1f, $23, $25, $28, $2a, $2c, $2e, $30, $31, $33
11fd3     34 35 36 36 
11fd7     37 37 37 36 
11fdb     35 35 34 34 
11fdf     33 32 31 31 | 	byte	$34, $35, $36, $36, $37, $37, $37, $36, $35, $35, $34, $34, $33, $32, $31, $31
11fe3     31 31 31 30 
11fe7     30 30 30 30 
11feb     30 2F 2E 2C 
11fef     29 26 23 20 | 	byte	$31, $31, $31, $30, $30, $30, $30, $30, $30, $2f, $2e, $2c, $29, $26, $23, $20
11ff3     1D 19 17 14 
11ff7     12 10 0E 0D 
11ffb     0B 09 07 05 
11fff     03 01 FF FE | 	byte	$1d, $19, $17, $14, $12, $10, $0e, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fe
12003     FD FC FA F9 
12007     F8 F7 F6 F6 
1200b     F5 F5 F5 F5 
1200f     F4 F3 EF EB | 	byte	$fd, $fc, $fa, $f9, $f8, $f7, $f6, $f6, $f5, $f5, $f5, $f5, $f4, $f3, $ef, $eb
12013     E6 DF D9 D3 
12017     CC C7 C2 BE 
1201b     BB B8 B7 B6 
1201f     B7 B8 BA BC | 	byte	$e6, $df, $d9, $d3, $cc, $c7, $c2, $be, $bb, $b8, $b7, $b6, $b7, $b8, $ba, $bc
12023     BF C3 C6 C9 
12027     CB CD CD CE 
1202b     CD CD CC CC 
1202f     CC CC CD CE | 	byte	$bf, $c3, $c6, $c9, $cb, $cd, $cd, $ce, $cd, $cd, $cc, $cc, $cc, $cc, $cd, $ce
12033     D0 D2 D5 D8 
12037     DB E0 E4 E8 
1203b     EC F0 F5 F9 
1203f     FD 02 06 09 | 	byte	$d0, $d2, $d5, $d8, $db, $e0, $e4, $e8, $ec, $f0, $f5, $f9, $fd, $02, $06, $09
12043     0E 11 15 19 
12047     1C 1F 22 26 
1204b     27 2A 2D 2E 
1204f     30 31 33 34 | 	byte	$0e, $11, $15, $19, $1c, $1f, $22, $26, $27, $2a, $2d, $2e, $30, $31, $33, $34
12053     35 36 37 38 
12057     38 38 38 37 
1205b     37 36 35 34 
1205f     33 33 32 31 | 	byte	$35, $36, $37, $38, $38, $38, $38, $37, $37, $36, $35, $34, $33, $33, $32, $31
12063     31 31 31 30 
12067     31 30 30 30 
1206b     2F 2E 2C 2A 
1206f     27 24 21 1E | 	byte	$31, $31, $31, $30, $31, $30, $30, $30, $2f, $2e, $2c, $2a, $27, $24, $21, $1e
12073     1A 18 15 13 
12077     11 10 0F 0D 
1207b     0B 09 07 05 
1207f     03 01 FF FD | 	byte	$1a, $18, $15, $13, $11, $10, $0f, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fd
12083     FC FB F9 F8 
12087     F7 F6 F5 F5 
1208b     F4 F4 F4 F3 
1208f     F1 EE E9 E4 | 	byte	$fc, $fb, $f9, $f8, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f1, $ee, $e9, $e4
12093     DE D8 D2 CC 
12097     C5 C1 BD BA 
1209b     B7 B6 B5 B6 
1209f     B7 B8 BB BE | 	byte	$de, $d8, $d2, $cc, $c5, $c1, $bd, $ba, $b7, $b6, $b5, $b6, $b7, $b8, $bb, $be
120a3     C1 C4 C6 C8 
120a7     CA CA CA CA 
120ab     C9 C9 C9 C9 
120af     CA CB CC CF | 	byte	$c1, $c4, $c6, $c8, $ca, $ca, $ca, $ca, $c9, $c9, $c9, $c9, $ca, $cb, $cc, $cf
120b3     D1 D5 D8 DC 
120b7     E0 E5 E9 EE 
120bb     F2 F6 FA FF 
120bf     03 07 0B 0F | 	byte	$d1, $d5, $d8, $dc, $e0, $e5, $e9, $ee, $f2, $f6, $fa, $ff, $03, $07, $0b, $0f
120c3     13 17 1A 1E 
120c7     21 23 27 29 
120cb     2C 2E 2F 31 
120cf     32 34 35 36 | 	byte	$13, $17, $1a, $1e, $21, $23, $27, $29, $2c, $2e, $2f, $31, $32, $34, $35, $36
120d3     37 38 39 39 
120d7     39 39 39 38 
120db     38 37 36 35 
120df     34 33 32 32 | 	byte	$37, $38, $39, $39, $39, $39, $39, $38, $38, $37, $36, $35, $34, $33, $32, $32
120e3     31 31 31 31 
120e7     30 30 30 30 
120eb     2E 2D 2B 28 
120ef     25 22 1F 1C | 	byte	$31, $31, $31, $31, $30, $30, $30, $30, $2e, $2d, $2b, $28, $25, $22, $1f, $1c
120f3     19 16 14 13 
120f7     11 10 0E 0C 
120fb     0A 08 06 04 
120ff     02 01 FE FD | 	byte	$19, $16, $14, $13, $11, $10, $0e, $0c, $0a, $08, $06, $04, $02, $01, $fe, $fd
12103     FB F9 F8 F7 
12107     F6 F4 F3 F3 
1210b     F2 F2 F0 EE 
1210f     EA E6 E0 DA | 	byte	$fb, $f9, $f8, $f7, $f6, $f4, $f3, $f3, $f2, $f2, $f0, $ee, $ea, $e6, $e0, $da
12113     D4 CE C8 C3 
12117     BF BB B8 B6 
1211b     B5 B5 B6 B7 
1211f     B9 BC BE C1 | 	byte	$d4, $ce, $c8, $c3, $bf, $bb, $b8, $b6, $b5, $b5, $b6, $b7, $b9, $bc, $be, $c1
12123     C3 C5 C6 C6 
12127     C6 C6 C6 C5 
1212b     C5 C5 C6 C8 
1212f     C9 CC CF D2 | 	byte	$c3, $c5, $c6, $c6, $c6, $c6, $c6, $c5, $c5, $c5, $c6, $c8, $c9, $cc, $cf, $d2
12133     D5 DA DE E2 
12137     E7 EC F0 F5 
1213b     F9 FD 02 06 
1213f     0A 0E 12 16 | 	byte	$d5, $da, $de, $e2, $e7, $ec, $f0, $f5, $f9, $fd, $02, $06, $0a, $0e, $12, $16
12143     19 1D 21 23 
12147     26 29 2B 2E 
1214b     2F 31 32 33 
1214f     35 36 37 38 | 	byte	$19, $1d, $21, $23, $26, $29, $2b, $2e, $2f, $31, $32, $33, $35, $36, $37, $38
12153     39 3A 3A 3B 
12157     3B 3B 3A 39 
1215b     38 37 36 35 
1215f     34 33 32 32 | 	byte	$39, $3a, $3a, $3b, $3b, $3b, $3a, $39, $38, $37, $36, $35, $34, $33, $32, $32
12163     32 31 30 30 
12167     30 30 2F 2D 
1216b     2C 29 27 24 
1216f     21 1E 1B 18 | 	byte	$32, $31, $30, $30, $30, $30, $2f, $2d, $2c, $29, $27, $24, $21, $1e, $1b, $18
12173     15 13 12 10 
12177     0E 0D 0B 09 
1217b     08 05 03 01 
1217f     FF FE FC FA | 	byte	$15, $13, $12, $10, $0e, $0d, $0b, $09, $08, $05, $03, $01, $ff, $fe, $fc, $fa
12183     F8 F6 F5 F4 
12187     F3 F2 F2 00 
1218b     00 00 00 03 
1218f     02 01 00 00 | 	byte	$f8, $f6, $f5, $f4, $f3, $f2, $f2, $00, $00, $00, $00, $03, $02, $01, $00, $00
12193     FE FE FD FC 
12197     FB FA FA F9 
1219b     FA FA FA FB 
1219f     FC FD FD FE | 	byte	$fe, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $fa, $fa, $fa, $fb, $fc, $fd, $fd, $fe
121a3     FE FE FF 00 
121a7     00 01 02 02 
121ab     02 00 00 FE 
121af     FD FC FB FA | 	byte	$fe, $fe, $ff, $00, $00, $01, $02, $02, $02, $00, $00, $fe, $fd, $fc, $fb, $fa
121b3     FA FA F9 F9 
121b7     F8 F9 F9 F9 
121bb     FA FB FC FE 
121bf     FF FF 00 00 | 	byte	$fa, $fa, $f9, $f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fe, $ff, $ff, $00, $00
121c3     00 00 00 01 
121c7     00 00 FF FF 
121cb     FD FB FA F9 
121cf     F8 F8 F8 F8 | 	byte	$00, $00, $00, $01, $00, $00, $ff, $ff, $fd, $fb, $fa, $f9, $f8, $f8, $f8, $f8
121d3     F8 F9 F9 F9 
121d7     FA FA FA FB 
121db     FC FE FE FF 
121df     FF FF FF FE | 	byte	$f8, $f9, $f9, $f9, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $ff, $ff, $ff, $ff, $fe
121e3     FE FE FF FF 
121e7     00 00 00 FF 
121eb     FF FF FF FF 
121ef     00 01 02 03 | 	byte	$fe, $fe, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $01, $02, $03
121f3     04 05 04 03 
121f7     03 02 02 02 
121fb     03 03 03 03 
121ff     03 03 03 03 | 	byte	$04, $05, $04, $03, $03, $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03
12203     04 05 07 08 
12207     09 09 0A 0A 
1220b     09 08 08 07 
1220f     06 05 03 01 | 	byte	$04, $05, $07, $08, $09, $09, $0a, $0a, $09, $08, $08, $07, $06, $05, $03, $01
12213     FE F9 F5 EF 
12217     ED EC EF F5 
1221b     FB 03 09 11 
1221f     17 1B 1F 21 | 	byte	$fe, $f9, $f5, $ef, $ed, $ec, $ef, $f5, $fb, $03, $09, $11, $17, $1b, $1f, $21
12223     24 25 24 20 
12227     1C 15 0E 04 
1222b     FC F2 EB E8 
1222f     E8 EA EB EC | 	byte	$24, $25, $24, $20, $1c, $15, $0e, $04, $fc, $f2, $eb, $e8, $e8, $ea, $eb, $ec
12233     EC EB EA EC 
12237     F1 F8 03 0E 
1223b     19 21 27 2A 
1223f     2B 29 27 25 | 	byte	$ec, $eb, $ea, $ec, $f1, $f8, $03, $0e, $19, $21, $27, $2a, $2b, $29, $27, $25
12243     24 21 1C 17 
12247     10 04 F4 E6 
1224b     DB D7 D9 DE 
1224f     E7 E9 E4 DC | 	byte	$24, $21, $1c, $17, $10, $04, $f4, $e6, $db, $d7, $d9, $de, $e7, $e9, $e4, $dc
12253     D8 DA E2 EE 
12257     00 10 20 2C 
1225b     34 3A 3A 36 
1225f     32 31 33 34 | 	byte	$d8, $da, $e2, $ee, $00, $10, $20, $2c, $34, $3a, $3a, $36, $32, $31, $33, $34
12263     30 27 1C 0E 
12267     F8 DC C5 C1 
1226b     C6 CE D6 E0 
1226f     E4 DA CB CA | 	byte	$30, $27, $1c, $0e, $f8, $dc, $c5, $c1, $c6, $ce, $d6, $e0, $e4, $da, $cb, $ca
12273     D3 E0 EF 01 
12277     16 28 36 40 
1227b     46 44 3B 35 
1227f     34 3A 3B 36 | 	byte	$d3, $e0, $ef, $01, $16, $28, $36, $40, $46, $44, $3b, $35, $34, $3a, $3b, $36
12283     2B 1B 09 F2 
12287     C6 B0 B9 C3 
1228b     C4 C8 D6 E1 
1228f     CC B6 C5 D4 | 	byte	$2b, $1b, $09, $f2, $c6, $b0, $b9, $c3, $c4, $c8, $d6, $e1, $cc, $b6, $c5, $d4
12293     DA EA 02 1A 
12297     31 3C 47 4D 
1229b     4A 3E 36 3E 
1229f     48 44 3F 33 | 	byte	$da, $ea, $02, $1a, $31, $3c, $47, $4d, $4a, $3e, $36, $3e, $48, $44, $3f, $33
122a3     1F 08 E8 BD 
122a7     AC B4 B9 BA 
122ab     C2 D0 DA D6 
122af     AC B6 CC D5 | 	byte	$1f, $08, $e8, $bd, $ac, $b4, $b9, $ba, $c2, $d0, $da, $d6, $ac, $b6, $cc, $d5
122b3     E4 F9 0B 2E 
122b7     38 47 51 4D 
122bb     3B 37 41 4B 
122bf     4B 48 40 2A | 	byte	$e4, $f9, $0b, $2e, $38, $47, $51, $4d, $3b, $37, $41, $4b, $4b, $48, $40, $2a
122c3     11 EB CA A5 
122c7     AC B4 B5 B5 
122cb     C3 CD D5 B2 
122cf     A7 C4 CD DB | 	byte	$11, $eb, $ca, $a5, $ac, $b4, $b5, $b5, $c3, $cd, $d5, $b2, $a7, $c4, $cd, $db
122d3     ED 00 19 36 
122d7     3F 55 54 41 
122db     3A 44 54 57 
122df     53 4E 3F 20 | 	byte	$ed, $00, $19, $36, $3f, $55, $54, $41, $3a, $44, $54, $57, $53, $4e, $3f, $20
122e3     FC DD AF A9 
122e7     AE B0 AC B9 
122eb     C4 CC CD 9E 
122ef     B3 C5 CF E0 | 	byte	$fc, $dd, $af, $a9, $ae, $b0, $ac, $b9, $c4, $cc, $cd, $9e, $b3, $c5, $cf, $e0
122f3     F1 07 1E 39 
122f7     47 57 46 3A 
122fb     46 51 5C 5C 
122ff     5A 52 3D 12 | 	byte	$f1, $07, $1e, $39, $47, $57, $46, $3a, $46, $51, $5c, $5c, $5a, $52, $3d, $12
12303     EB CD A7 AA 
12307     AC AA AD B9 
1230b     C4 CC B3 A0 
1230f     B7 C4 D5 E3 | 	byte	$eb, $cd, $a7, $aa, $ac, $aa, $ad, $b9, $c4, $cc, $b3, $a0, $b7, $c4, $d5, $e3
12313     F4 0E 20 3F 
12317     50 50 3B 43 
1231b     50 5F 65 66 
1231f     61 53 30 03 | 	byte	$f4, $0e, $20, $3f, $50, $50, $3b, $43, $50, $5f, $65, $66, $61, $53, $30, $03
12323     E9 B3 AB AD 
12327     AB A7 B0 BC 
1232b     C6 CD A3 A9 
1232f     BD C9 D8 E6 | 	byte	$e9, $b3, $ab, $ad, $ab, $a7, $b0, $bc, $c6, $cd, $a3, $a9, $bd, $c9, $d8, $e6
12333     F5 0D 22 42 
12337     52 3C 3B 49 
1233b     58 67 6C 6C 
1233f     68 55 23 FD | 	byte	$f5, $0d, $22, $42, $52, $3c, $3b, $49, $58, $67, $6c, $6c, $68, $55, $23, $fd
12343     DF B3 B0 AF 
12347     A9 AB B6 C2 
1234b     CD C9 A2 AC 
1234f     BE CF D7 E4 | 	byte	$df, $b3, $b0, $af, $a9, $ab, $b6, $c2, $cd, $c9, $a2, $ac, $be, $cf, $d7, $e4
12353     F7 06 26 41 
12357     45 31 40 50 
1235b     62 6F 74 73 
1235f     6E 4A 1C 01 | 	byte	$f7, $06, $26, $41, $45, $31, $40, $50, $62, $6f, $74, $73, $6e, $4a, $1c, $01
12363     CB B9 BA B1 
12367     AE B1 BE C9 
1236b     D4 BE A8 B0 
1236f     BC CE D0 DA | 	byte	$cb, $b9, $ba, $b1, $ae, $b1, $be, $c9, $d4, $be, $a8, $b0, $bc, $ce, $d0, $da
12373     F1 00 28 3A 
12377     2E 31 44 54 
1237b     6B 75 7C 7D 
1237f     70 3D 18 02 | 	byte	$f1, $00, $28, $3a, $2e, $31, $44, $54, $6b, $75, $7c, $7d, $70, $3d, $18, $02
12383     CB C4 BF B4 
12387     B2 B7 C4 D0 
1238b     D5 B0 A6 B5 
1238f     C1 D3 CE DB | 	byte	$cb, $c4, $bf, $b4, $b2, $b7, $c4, $d0, $d5, $b0, $a6, $b5, $c1, $d3, $ce, $db
12393     ED 05 2A 2D 
12397     26 38 47 5C 
1239b     6F 7A 7E 7F 
1239f     5E 35 1D F1 | 	byte	$ed, $05, $2a, $2d, $26, $38, $47, $5c, $6f, $7a, $7e, $7f, $5e, $35, $1d, $f1
123a3     D1 CC BD B7 
123a7     B2 BC C6 D5 
123ab     D3 A8 A7 B6 
123af     C6 D6 CF DD | 	byte	$d1, $cc, $bd, $b7, $b2, $bc, $c6, $d5, $d3, $a8, $a7, $b6, $c6, $d6, $cf, $dd
123b3     EE 08 27 21 
123b7     27 3F 4B 67 
123bb     76 7F 7F 7C 
123bf     4F 2D 21 E6 | 	byte	$ee, $08, $27, $21, $27, $3f, $4b, $67, $76, $7f, $7f, $7c, $4f, $2d, $21, $e6
123c3     D8 CF BE B5 
123c7     B3 C0 C8 D8 
123cb     CD A6 AB B7 
123cf     CB D4 CF DB | 	byte	$d8, $cf, $be, $b5, $b3, $c0, $c8, $d8, $cd, $a6, $ab, $b7, $cb, $d4, $cf, $db
123d3     F1 0B 1A 1C 
123d7     2D 3F 52 69 
123db     78 7F 7F 6A 
123df     42 32 10 EC | 	byte	$f1, $0b, $1a, $1c, $2d, $3f, $52, $69, $78, $7f, $7f, $6a, $42, $32, $10, $ec
123e3     E2 D0 C2 B4 
123e7     B7 C1 CF D9 
123eb     BA A4 B1 BE 
123ef     D3 CF D2 DD | 	byte	$e2, $d0, $c2, $b4, $b7, $c1, $cf, $d9, $ba, $a4, $b1, $be, $d3, $cf, $d2, $dd
123f3     F5 05 0F 20 
123f7     34 42 5A 6E 
123fb     7A 7F 7F 5A 
123ff     39 36 04 F3 | 	byte	$f5, $05, $0f, $20, $34, $42, $5a, $6e, $7a, $7f, $7f, $5a, $39, $36, $04, $f3
12403     E9 D5 C2 B4 
12407     BC C1 D6 DC 
1240b     AD A7 B1 C4 
1240f     D8 CA D2 E1 | 	byte	$e9, $d5, $c2, $b4, $bc, $c1, $d6, $dc, $ad, $a7, $b1, $c4, $d8, $ca, $d2, $e1
12413     F5 F9 0B 24 
12417     36 46 60 71 
1241b     7C 7F 6B 46 
1241f     3B 2F 05 FC | 	byte	$f5, $f9, $0b, $24, $36, $46, $60, $71, $7c, $7f, $6b, $46, $3b, $2f, $05, $fc
12423     EF DB BF B4 
12427     BC C6 DB DC 
1242b     A3 AB B5 C9 
1242f     D6 C8 CF E3 | 	byte	$ef, $db, $bf, $b4, $bc, $c6, $db, $dc, $a3, $ab, $b5, $c9, $d6, $c8, $cf, $e3
12433     EC F7 0C 29 
12437     37 4D 62 72 
1243b     7D 78 5A 39 
1243f     3D 19 0C 05 | 	byte	$ec, $f7, $0c, $29, $37, $4d, $62, $72, $7d, $78, $5a, $39, $3d, $19, $0c, $05
12443     F8 DD C0 B8 
12447     BE D2 E1 CD 
1244b     A4 AD BF D0 
1244f     D3 C9 D1 E5 | 	byte	$f8, $dd, $c0, $b8, $be, $d2, $e1, $cd, $a4, $ad, $bf, $d0, $d3, $c9, $d1, $e5
12453     DD FB 10 2B 
12457     3A 51 64 72 
1245b     7A 60 44 39 
1245f     3A 12 0F 12 | 	byte	$dd, $fb, $10, $2b, $3a, $51, $64, $72, $7a, $60, $44, $39, $3a, $12, $0f, $12
12463     04 DF C2 BB 
12467     C0 D9 E6 B8 
1246b     AA AF C4 D4 
1246f     CF CE D2 DA | 	byte	$04, $df, $c2, $bb, $c0, $d9, $e6, $b8, $aa, $af, $c4, $d4, $cf, $ce, $d2, $da
12473     D9 FE 18 2B 
12477     3F 56 66 73 
1247b     69 57 30 38 
1247f     27 14 18 1E | 	byte	$d9, $fe, $18, $2b, $3f, $56, $66, $73, $69, $57, $30, $38, $27, $14, $18, $1e
12483     0B E6 C4 BC 
12487     CA E0 E9 A9 
1248b     AC B8 C9 D6 
1248f     C8 D1 D2 CD | 	byte	$0b, $e6, $c4, $bc, $ca, $e0, $e9, $a9, $ac, $b8, $c9, $d6, $c8, $d1, $d2, $cd
12493     DD 03 20 31 
12497     46 57 69 6F 
1249b     54 41 2F 38 
1249f     16 15 25 29 | 	byte	$dd, $03, $20, $31, $46, $57, $69, $6f, $54, $41, $2f, $38, $16, $15, $25, $29
124a3     0F EB C7 BE 
124a7     D3 E8 E2 A7 
124ab     AC BF CE D6 
124af     C6 D1 C8 C8 | 	byte	$0f, $eb, $c7, $be, $d3, $e8, $e2, $a7, $ac, $bf, $ce, $d6, $c6, $d1, $c8, $c8
124b3     E7 02 26 33 
124b7     49 57 69 56 
124bb     50 28 2C 2F 
124bf     0E 1A 2F 30 | 	byte	$e7, $02, $26, $33, $49, $57, $69, $56, $50, $28, $2c, $2f, $0e, $1a, $2f, $30
124c3     1A EF C9 C2 
124c7     D9 ED C3 AC 
124cb     B0 C5 D1 D3 
124cf     C8 CC BE C8 | 	byte	$1a, $ef, $c9, $c2, $d9, $ed, $c3, $ac, $b0, $c5, $d1, $d3, $c8, $cc, $be, $c8
124d3     F7 05 29 3B 
124d7     4A 5D 60 4E 
124db     38 24 2E 1A 
124df     0E 25 37 36 | 	byte	$f7, $05, $29, $3b, $4a, $5d, $60, $4e, $38, $24, $2e, $1a, $0e, $25, $37, $36
124e3     25 F7 C8 C8 
124e7     E2 EF B4 AC 
124eb     B6 C8 D4 CD 
124ef     CF BF BC CE | 	byte	$25, $f7, $c8, $c8, $e2, $ef, $b4, $ac, $b6, $c8, $d4, $cd, $cf, $bf, $bc, $ce
124f3     FD 0B 2C 3E 
124f7     4C 5E 47 49 
124fb     25 20 2B 05 
124ff     12 2D 3E 3C | 	byte	$fd, $0b, $2c, $3e, $4c, $5e, $47, $49, $25, $20, $2b, $05, $12, $2d, $3e, $3c
12503     2C FB CC D1 
12507     E8 E2 B3 AD 
1250b     BE CC D7 C6 
1250f     CC B2 BD DD | 	byte	$2c, $fb, $cc, $d1, $e8, $e2, $b3, $ad, $be, $cc, $d7, $c6, $cc, $b2, $bd, $dd
12513     FD 15 2F 41 
12517     50 49 49 33 
1251b     1B 21 19 02 
1251f     1C 32 42 43 | 	byte	$fd, $15, $2f, $41, $50, $49, $49, $33, $1b, $21, $19, $02, $1c, $32, $42, $43
12523     35 00 D2 D5 
12527     EB D4 AE AF 
1252b     C4 D0 D7 C4 
1252f     BE AF C1 F0 | 	byte	$35, $00, $d2, $d5, $eb, $d4, $ae, $af, $c4, $d0, $d7, $c4, $be, $af, $c1, $f0
12533     FE 1D 35 44 
12537     4A 40 44 20 
1253b     19 23 04 09 
1253f     21 38 44 49 | 	byte	$fe, $1d, $35, $44, $4a, $40, $44, $20, $19, $23, $04, $09, $21, $38, $44, $49
12543     3F 0A D6 DB 
12547     E1 C9 AD B6 
1254b     C6 D4 CF C1 
1254f     B6 B1 C8 FB | 	byte	$3f, $0a, $d6, $db, $e1, $c9, $ad, $b6, $c6, $d4, $cf, $c1, $b6, $b1, $c8, $fb
12553     03 24 38 43 
12557     34 44 31 15 
1255b     17 19 FA 0F 
1255f     26 3C 48 4F | 	byte	$03, $24, $38, $43, $34, $44, $31, $15, $17, $19, $fa, $0f, $26, $3c, $48, $4f
12563     45 0E DA DD 
12567     DE BF AC BD 
1256b     CD D8 C6 B9 
1256f     B4 B7 DB FF | 	byte	$45, $0e, $da, $dd, $de, $bf, $ac, $bd, $cd, $d8, $c6, $b9, $b4, $b7, $db, $ff
12573     09 2E 3B 33 
12577     3A 3E 1D 11 
1257b     1A 08 FE 16 
1257f     2B 3E 4A 57 | 	byte	$09, $2e, $3b, $33, $3a, $3e, $1d, $11, $1a, $08, $fe, $16, $2b, $3e, $4a, $57
12583     4D 19 DC D2 
12587     E2 B6 AD C3 
1258b     D2 D8 BA B4 
1258f     B2 BA ED 00 | 	byte	$4d, $19, $dc, $d2, $e2, $b6, $ad, $c3, $d2, $d8, $ba, $b4, $b2, $ba, $ed, $00
12593     0D 35 34 28 
12597     3C 2F 12 11 
1259b     18 F9 04 1C 
1259f     2F 40 4C 5C | 	byte	$0d, $35, $34, $28, $3c, $2f, $12, $11, $18, $f9, $04, $1c, $2f, $40, $4c, $5c
125a3     54 25 D9 D4 
125a7     DC AB B4 C7 
125ab     D4 CE AF B4 
125af     B0 C6 F9 03 | 	byte	$54, $25, $d9, $d4, $dc, $ab, $b4, $c7, $d4, $ce, $af, $b4, $b0, $c6, $f9, $03
125b3     15 33 1E 30 
125b7     3A 1E 0C 15 
125bb     0B F7 0C 21 
125bf     33 41 52 60 | 	byte	$15, $33, $1e, $30, $3a, $1e, $0c, $15, $0b, $f7, $0c, $21, $33, $41, $52, $60
125c3     5B 21 CC DD 
125c7     CE A7 BB CD 
125cb     D9 BA AE B7 
125cf     B1 D5 FE 06 | 	byte	$5b, $21, $cc, $dd, $ce, $a7, $bb, $cd, $d9, $ba, $ae, $b7, $b1, $d5, $fe, $06
125d3     25 1F 25 32 
125d7     2B 14 0D 15 
125db     FC FC 12 25 
125df     35 42 56 64 | 	byte	$25, $1f, $25, $32, $2b, $14, $0d, $15, $fc, $fc, $12, $25, $35, $42, $56, $64
125e3     63 1F CC DE 
125e7     BB AC C1 D1 
125eb     D4 A8 AF B7 
125ef     B4 EA FE 08 | 	byte	$63, $1f, $cc, $de, $bb, $ac, $c1, $d1, $d4, $a8, $af, $b7, $b4, $ea, $fe, $08
125f3     24 15 29 2D 
125f7     23 0C 11 0D 
125fb     F6 05 18 2A 
125ff     38 46 5D 69 | 	byte	$24, $15, $29, $2d, $23, $0c, $11, $0d, $f6, $05, $18, $2a, $38, $46, $5d, $69
12603     69 08 D5 DB 
12607     A6 B3 C9 D5 
1260b     C0 A6 B3 B2 
1260f     BF F9 03 0D | 	byte	$69, $08, $d5, $db, $a6, $b3, $c9, $d5, $c0, $a6, $b3, $b2, $bf, $f9, $03, $0d
12613     11 1F 2C 21 
12617     19 0A 13 00 
1261b     F8 0A 1E 2B 
1261f     39 4D 60 6F | 	byte	$11, $1f, $2c, $21, $19, $0a, $13, $00, $f8, $0a, $1e, $2b, $39, $4d, $60, $6f
12623     66 09 DA CC 
12627     A4 B9 CD D3 
1262b     AE AB B7 AF 
1262f     D6 FD 07 05 | 	byte	$66, $09, $da, $cc, $a4, $b9, $cd, $d3, $ae, $ab, $b7, $af, $d6, $fd, $07, $05
12633     16 25 21 22 
12637     0F 0D 10 F8 
1263b     FE 0F 21 2D 
1263f     3A 51 62 76 | 	byte	$16, $25, $21, $22, $0f, $0d, $10, $f8, $fe, $0f, $21, $2d, $3a, $51, $62, $76
12643     54 17 DE B7 
12647     A7 C2 D0 C9 
1264b     A3 B0 B8 B2 
1264f     E5 FF 04 03 | 	byte	$54, $17, $de, $b7, $a7, $c2, $d0, $c9, $a3, $b0, $b8, $b2, $e5, $ff, $04, $03
12653     1B 24 1E 1A 
12657     0B 12 08 F6 
1265b     05 17 24 2F 
1265f     41 55 67 75 | 	byte	$1b, $24, $1e, $1a, $0b, $12, $08, $f6, $05, $17, $24, $2f, $41, $55, $67, $75
12663     50 12 D8 A8 
12667     AD C8 CF BA 
1266b     A2 B2 B4 BD 
1266f     F2 01 F0 14 | 	byte	$50, $12, $d8, $a8, $ad, $c8, $cf, $ba, $a2, $b2, $b4, $bd, $f2, $01, $f0, $14
12673     1E 17 1D 10 
12677     0B 11 FF F9 
1267b     0B 19 25 31 
1267f     45 59 6D 66 | 	byte	$1e, $17, $1d, $10, $0b, $11, $ff, $f9, $0b, $19, $25, $31, $45, $59, $6d, $66
12683     58 1A C5 A7 
12687     B5 CB C7 AC 
1268b     A9 B5 B1 C9 
1268f     FC F6 F5 17 | 	byte	$58, $1a, $c5, $a7, $b5, $cb, $c7, $ac, $a9, $b5, $b1, $c9, $fc, $f6, $f5, $17
12693     15 1C 16 0B 
12697     0F 0D F8 FE 
1269b     10 1D 25 36 
1269f     49 5C 6F 5C | 	byte	$15, $1c, $16, $0b, $0f, $0d, $f8, $fe, $10, $1d, $25, $36, $49, $5c, $6f, $5c
126a3     5C 17 BD A5 
126a7     BA C9 BE A7 
126ab     B0 B6 B0 D8 
126af     FE E5 10 15 | 	byte	$5c, $17, $bd, $a5, $ba, $c9, $be, $a7, $b0, $b6, $b0, $d8, $fe, $e5, $10, $15
126b3     11 1D 0E 0A 
126b7     11 07 F7 04 
126bb     14 1D 28 3B 
126bf     4E 61 66 5F | 	byte	$11, $1d, $0e, $0a, $11, $07, $f7, $04, $14, $1d, $28, $3b, $4e, $61, $66, $5f
126c3     5D FB B9 A8 
126c7     BD C2 B9 A3 
126cb     B1 B3 B3 E4 
126cf     EA F0 17 08 | 	byte	$5d, $fb, $b9, $a8, $bd, $c2, $b9, $a3, $b1, $b3, $b3, $e4, $ea, $f0, $17, $08
126d3     19 1B 08 0E 
126d7     10 FF FB 0D 
126db     19 21 2E 44 
126df     52 68 5A 65 | 	byte	$19, $1b, $08, $0e, $10, $ff, $fb, $0d, $19, $21, $2e, $44, $52, $68, $5a, $65
126e3     50 F4 B1 AD 
126e7     BC BB B7 A6 
126eb     B4 AD BB F0 
126ef     DB 04 0E 0F | 	byte	$50, $f4, $b1, $ad, $bc, $bb, $b7, $a6, $b4, $ad, $bb, $f0, $db, $04, $0e, $0f
126f3     1D 15 06 13 
126f7     11 FE 04 14 
126fb     1E 26 36 46 
126ff     55 61 52 5C | 	byte	$1d, $15, $06, $13, $11, $fe, $04, $14, $1e, $26, $36, $46, $55, $61, $52, $5c
12703     36 DE AE AB 
12707     AE B1 B2 A8 
1270b     B2 AD C5 E4 
1270f     EC 0E 10 1D | 	byte	$36, $de, $ae, $ab, $ae, $b1, $b2, $a8, $b2, $ad, $c5, $e4, $ec, $0e, $10, $1d
12713     23 11 0B 15 
12717     0B FB 07 13 
1271b     17 20 32 3F 
1271f     52 4E 50 4A | 	byte	$23, $11, $0b, $15, $0b, $fb, $07, $13, $17, $20, $32, $3f, $52, $4e, $50, $4a
12723     2A DB B5 AF 
12727     B1 BC BB BA 
1272b     BA C3 D5 EA 
1272f     00 14 1C 26 | 	byte	$2a, $db, $b5, $af, $b1, $bc, $bb, $ba, $ba, $c3, $d5, $ea, $00, $14, $1c, $26
12733     21 0E 10 17 
12737     05 FE 0D 13 
1273b     16 23 31 40 
1273f     4E 40 4A 3C | 	byte	$21, $0e, $10, $17, $05, $fe, $0d, $13, $16, $23, $31, $40, $4e, $40, $4a, $3c
12743     1C D7 B6 AD 
12747     B3 C2 BD C2 
1274b     BD CE DF F3 
1274f     08 19 1E 24 | 	byte	$1c, $d7, $b6, $ad, $b3, $c2, $bd, $c2, $bd, $ce, $df, $f3, $08, $19, $1e, $24
12753     18 0B 12 12 
12757     FC 00 0C 0F 
1275b     15 23 31 3E 
1275f     44 3B 3B 35 | 	byte	$18, $0b, $12, $12, $fc, $00, $0c, $0f, $15, $23, $31, $3e, $44, $3b, $3b, $35
12763     12 CD B2 AC 
12767     B8 C8 BD C4 
1276b     C5 D7 E8 FC 
1276f     10 1B 1F 1F | 	byte	$12, $cd, $b2, $ac, $b8, $c8, $bd, $c4, $c5, $d7, $e8, $fc, $10, $1b, $1f, $1f
12773     10 0C 14 09 
12777     F9 04 0C 0D 
1277b     15 24 2F 3D 
1277f     38 38 32 2D | 	byte	$10, $0c, $14, $09, $f9, $04, $0c, $0d, $15, $24, $2f, $3d, $38, $38, $32, $2d
12783     04 C7 B0 B0 
12787     BC CC C0 C3 
1278b     CF DE F0 03 
1278f     13 1C 1E 18 | 	byte	$04, $c7, $b0, $b0, $bc, $cc, $c0, $c3, $cf, $de, $f0, $03, $13, $1c, $1e, $18
12793     0B 0D 11 FF 
12797     FA 06 0A 0C 
1279b     17 24 30 3B 
1279f     2F 2E 30 27 | 	byte	$0b, $0d, $11, $ff, $fa, $06, $0a, $0c, $17, $24, $30, $3b, $2f, $2e, $30, $27
127a3     FA C3 B0 B6 
127a7     C2 CD C2 C5 
127ab     D6 E4 F6 08 
127af     15 1C 1C 11 | 	byte	$fa, $c3, $b0, $b6, $c2, $cd, $c2, $c5, $d6, $e4, $f6, $08, $15, $1c, $1c, $11
127b3     09 10 0B FB 
127b7     FF 08 09 0F 
127bb     1A 27 31 36 
127bf     29 2A 2C 21 | 	byte	$09, $10, $0b, $fb, $ff, $08, $09, $0f, $1a, $27, $31, $36, $29, $2a, $2c, $21
127c3     EE BD B4 BD 
127c7     C7 CD C3 CD 
127cb     DC EB FC 0C 
127cf     17 1B 16 0B | 	byte	$ee, $bd, $b4, $bd, $c7, $cd, $c3, $cd, $dc, $eb, $fc, $0c, $17, $1b, $16, $0b
127d3     0B 11 05 FA 
127d7     03 08 0A 10 
127db     1E 27 32 2D 
127df     23 29 29 19 | 	byte	$0b, $11, $05, $fa, $03, $08, $0a, $10, $1e, $27, $32, $2d, $23, $29, $29, $19
127e3     E0 BB BD C2 
127e7     CB CE C5 D5 
127eb     E3 F0 03 10 
127ef     19 19 12 09 | 	byte	$e0, $bb, $bd, $c2, $cb, $ce, $c5, $d5, $e3, $f0, $03, $10, $19, $19, $12, $09
127f3     0E 0F FE FB 
127f7     05 08 0B 14 
127fb     1F 29 31 23 
127ff     24 28 25 10 | 	byte	$0e, $0f, $fe, $fb, $05, $08, $0b, $14, $1f, $29, $31, $23, $24, $28, $25, $10
12803     D8 BE C4 C8 
12807     CE CF CC DA 
1280b     E8 F8 08 13 
1280f     19 16 0D 0A | 	byte	$d8, $be, $c4, $c8, $ce, $cf, $cc, $da, $e8, $f8, $08, $13, $19, $16, $0d, $0a
12813     11 0A FD 00 
12817     07 09 0C 17 
1281b     22 2A 2E 1C 
1281f     24 27 22 01 | 	byte	$11, $0a, $fd, $00, $07, $09, $0c, $17, $22, $2a, $2e, $1c, $24, $27, $22, $01
12823     D3 C5 CA CC 
12827     D2 D1 D3 E0 
1282b     ED FC 0B 14 
1282f     18 12 09 0B | 	byte	$d3, $c5, $ca, $cc, $d2, $d1, $d3, $e0, $ed, $fc, $0b, $14, $18, $12, $09, $0b
12833     0F 03 FB 01 
12837     07 09 0F 18 
1283b     22 29 25 1D 
1283f     22 24 19 F5 | 	byte	$0f, $03, $fb, $01, $07, $09, $0f, $18, $22, $29, $25, $1d, $22, $24, $19, $f5
12843     CF CC CE CF 
12847     D5 D0 D8 E4 
1284b     F2 00 0D 14 
1284f     15 0C 08 0E | 	byte	$cf, $cc, $ce, $cf, $d5, $d0, $d8, $e4, $f2, $00, $0d, $14, $15, $0c, $08, $0e
12853     0D FF FD 03 
12857     08 09 11 1B 
1285b     22 28 1D 1E 
1285f     22 21 10 EB | 	byte	$0d, $ff, $fd, $03, $08, $09, $11, $1b, $22, $28, $1d, $1e, $22, $21, $10, $eb
12863     D3 D2 D3 D4 
12867     D9 D5 DE E9 
1286b     F7 04 0F 14 
1286f     11 0A 09 0E | 	byte	$d3, $d2, $d3, $d4, $d9, $d5, $de, $e9, $f7, $04, $0f, $14, $11, $0a, $09, $0e
12873     07 FD FE 04 
12877     07 0B 13 1B 
1287b     22 22 19 1E 
1287f     20 1C 07 E8 | 	byte	$07, $fd, $fe, $04, $07, $0b, $13, $1b, $22, $22, $19, $1e, $20, $1c, $07, $e8
12883     D6 D4 D5 D7 
12887     DA D8 E1 ED 
1288b     F9 05 0E 13 
1288f     0F 09 09 0B | 	byte	$d6, $d4, $d5, $d7, $da, $d8, $e1, $ed, $f9, $05, $0e, $13, $0f, $09, $09, $0b
12893     01 FC 00 05 
12897     08 0C 14 1C 
1289b     22 1E 19 1D 
1289f     1E 19 01 E7 | 	byte	$01, $fc, $00, $05, $08, $0c, $14, $1c, $22, $1e, $19, $1d, $1e, $19, $01, $e7
128a3     D9 D9 D9 DB 
128a7     DC DB E6 F1 
128ab     FD 07 10 13 
128af     0E 09 09 06 | 	byte	$d9, $d9, $d9, $db, $dc, $db, $e6, $f1, $fd, $07, $10, $13, $0e, $09, $09, $06
128b3     FE FC 02 05 
128b7     07 0C 14 1B 
128bb     1D 1B 18 1B 
128bf     1B 14 FB E5 | 	byte	$fe, $fc, $02, $05, $07, $0c, $14, $1b, $1d, $1b, $18, $1b, $1b, $14, $fb, $e5
128c3     DB DB DC DC 
128c7     DC DD E9 F4 
128cb     FF 08 0F 11 
128cf     0D 09 08 02 | 	byte	$db, $db, $dc, $dc, $dc, $dd, $e9, $f4, $ff, $08, $0f, $11, $0d, $09, $08, $02
128d3     FB FD 02 04 
128d7     07 0D 14 1A 
128db     1B 18 18 1A 
128df     19 10 F8 E4 | 	byte	$fb, $fd, $02, $04, $07, $0d, $14, $1a, $1b, $18, $18, $1a, $19, $10, $f8, $e4
128e3     E0 DF DF DE 
128e7     E0 E0 ED F7 
128eb     01 0A 10 10 
128ef     0E 0B 07 FF | 	byte	$e0, $df, $df, $de, $e0, $e0, $ed, $f7, $01, $0a, $10, $10, $0e, $0b, $07, $ff
128f3     FC FF 03 04 
128f7     07 0D 14 18 
128fb     19 15 17 18 
128ff     17 0A F5 E5 | 	byte	$fc, $ff, $03, $04, $07, $0d, $14, $18, $19, $15, $17, $18, $17, $0a, $f5, $e5
12903     E2 E1 E0 DE 
12907     E2 E3 EE F9 
1290b     01 09 0E 0F 
1290f     0D 09 03 FD | 	byte	$e2, $e1, $e0, $de, $e2, $e3, $ee, $f9, $01, $09, $0e, $0f, $0d, $09, $03, $fd
12913     FC FF 02 04 
12917     08 0D 14 16 
1291b     18 14 16 17 
1291f     14 07 F2 E8 | 	byte	$fc, $ff, $02, $04, $08, $0d, $14, $16, $18, $14, $16, $17, $14, $07, $f2, $e8
12923     E5 E4 E2 E0 
12927     E4 E7 F2 FB 
1292b     03 09 0D 0E 
1292f     0D 09 01 FC | 	byte	$e5, $e4, $e2, $e0, $e4, $e7, $f2, $fb, $03, $09, $0d, $0e, $0d, $09, $01, $fc
12933     FD 00 02 04 
12937     09 0E 13 15 
1293b     14 13 14 15 
1293f     11 03 F1 EA | 	byte	$fd, $00, $02, $04, $09, $0e, $13, $15, $14, $13, $14, $15, $11, $03, $f1, $ea
12943     E7 E5 E3 E2 
12947     E6 EA F4 FC 
1294b     04 09 0C 0E 
1294f     0C 06 FF FC | 	byte	$e7, $e5, $e3, $e2, $e6, $ea, $f4, $fc, $04, $09, $0c, $0e, $0c, $06, $ff, $fc
12953     FD 00 01 05 
12957     09 0F 10 14 
1295b     11 12 14 14 
1295f     0E FF F1 EC | 	byte	$fd, $00, $01, $05, $09, $0f, $10, $14, $11, $12, $14, $14, $0e, $ff, $f1, $ec
12963     E9 E7 E5 E4 
12967     E8 ED F6 FD 
1296b     03 08 0B 0D 
1296f     0B 04 FD FD | 	byte	$e9, $e7, $e5, $e4, $e8, $ed, $f6, $fd, $03, $08, $0b, $0d, $0b, $04, $fd, $fd
12973     FE 00 02 05 
12977     09 0E 10 13 
1297b     10 12 13 12 
1297f     0A FD F2 EE | 	byte	$fe, $00, $02, $05, $09, $0e, $10, $13, $10, $12, $13, $12, $0a, $fd, $f2, $ee
12983     EB E8 E6 E6 
12987     EA EF F8 FE 
1298b     03 07 0B 0D 
1298f     09 02 FD FD | 	byte	$eb, $e8, $e6, $e6, $ea, $ef, $f8, $fe, $03, $07, $0b, $0d, $09, $02, $fd, $fd
12993     FF 00 02 05 
12997     0A 0D 10 10 
1299b     0F 11 11 10 
1299f     07 FB F2 EE | 	byte	$ff, $00, $02, $05, $0a, $0d, $10, $10, $0f, $11, $11, $10, $07, $fb, $f2, $ee
129a3     EB E9 E6 E8 
129a7     EB F2 F9 FF 
129ab     04 07 0B 0C 
129af     08 00 FD FE | 	byte	$eb, $e9, $e6, $e8, $eb, $f2, $f9, $ff, $04, $07, $0b, $0c, $08, $00, $fd, $fe
129b3     FF 00 02 05 
129b7     09 0C 0F 0E 
129bb     0F 0F 10 0E 
129bf     05 FA F3 EF | 	byte	$ff, $00, $02, $05, $09, $0c, $0f, $0e, $0f, $0f, $10, $0e, $05, $fa, $f3, $ef
129c3     ED EA E7 EB 
129c7     EE F4 FA 00 
129cb     04 08 0B 0C 
129cf     06 00 FE FF | 	byte	$ed, $ea, $e7, $eb, $ee, $f4, $fa, $00, $04, $08, $0b, $0c, $06, $00, $fe, $ff
129d3     01 01 03 06 
129d7     0A 0C 0F 0D 
129db     0E 0F 10 0C 
129df     04 F9 F4 F0 | 	byte	$01, $01, $03, $06, $0a, $0c, $0f, $0d, $0e, $0f, $10, $0c, $04, $f9, $f4, $f0
129e3     EE EB E9 ED 
129e7     EF F5 FB 00 
129eb     04 08 0B 09 
129ef     04 FF FE FF | 	byte	$ee, $eb, $e9, $ed, $ef, $f5, $fb, $00, $04, $08, $0b, $09, $04, $ff, $fe, $ff
129f3     00 01 03 06 
129f7     09 0C 0D 0C 
129fb     0D 0E 0E 09 
129ff     01 FA F5 F1 | 	byte	$00, $01, $03, $06, $09, $0c, $0d, $0c, $0d, $0e, $0e, $09, $01, $fa, $f5, $f1
12a03     EE EB EB EE 
12a07     F0 F6 FC 00 
12a0b     03 08 0A 08 
12a0f     03 00 FF 01 | 	byte	$ee, $eb, $eb, $ee, $f0, $f6, $fc, $00, $03, $08, $0a, $08, $03, $00, $ff, $01
12a13     01 01 03 07 
12a17     09 0C 0B 0C 
12a1b     0D 0D 0C 08 
12a1f     00 F9 F5 F2 | 	byte	$01, $01, $03, $07, $09, $0c, $0b, $0c, $0d, $0d, $0c, $08, $00, $f9, $f5, $f2
12a23     EE ED ED F0 
12a27     F3 F8 FD 01 
12a2b     04 08 09 07 
12a2f     02 00 00 01 | 	byte	$ee, $ed, $ed, $f0, $f3, $f8, $fd, $01, $04, $08, $09, $07, $02, $00, $00, $01
12a33     01 02 04 07 
12a37     08 0A 09 0A 
12a3b     0B 0C 0A 05 
12a3f     FF F8 F4 F1 | 	byte	$01, $02, $04, $07, $08, $0a, $09, $0a, $0b, $0c, $0a, $05, $ff, $f8, $f4, $f1
12a43     EF EE EF F1 
12a47     F3 F7 FC 00 
12a4b     04 07 08 05 
12a4f     02 00 00 01 | 	byte	$ef, $ee, $ef, $f1, $f3, $f7, $fc, $00, $04, $07, $08, $05, $02, $00, $00, $01
12a53     02 02 05 07 
12a57     09 09 0A 0B 
12a5b     0B 0B 09 05 
12a5f     FE F9 F6 F2 | 	byte	$02, $02, $05, $07, $09, $09, $0a, $0b, $0b, $0b, $09, $05, $fe, $f9, $f6, $f2
12a63     F0 EF F1 F1 
12a67     F5 F9 FE 01 
12a6b     05 07 07 04 
12a6f     02 00 01 02 | 	byte	$f0, $ef, $f1, $f1, $f5, $f9, $fe, $01, $05, $07, $07, $04, $02, $00, $01, $02
12a73     02 03 05 06 
12a77     08 08 09 0A 
12a7b     0A 0A 08 03 
12a7f     FD F8 F5 F1 | 	byte	$02, $03, $05, $06, $08, $08, $09, $0a, $0a, $0a, $08, $03, $fd, $f8, $f5, $f1
12a83     F0 F0 F1 F2 
12a87     F6 FA FE 01 
12a8b     05 06 05 04 
12a8f     02 01 01 02 | 	byte	$f0, $f0, $f1, $f2, $f6, $fa, $fe, $01, $05, $06, $05, $04, $02, $01, $01, $02
12a93     02 03 05 06 
12a97     07 07 09 0A 
12a9b     0A 09 07 02 
12a9f     FD F9 F5 F3 | 	byte	$02, $03, $05, $06, $07, $07, $09, $0a, $0a, $09, $07, $02, $fd, $f9, $f5, $f3
12aa3     F2 F2 F2 F4 
12aa7     F8 FB FF 02 
12aab     06 06 05 04 
12aaf     03 03 03 03 | 	byte	$f2, $f2, $f2, $f4, $f8, $fb, $ff, $02, $06, $06, $05, $04, $03, $03, $03, $03
12ab3     03 04 05 06 
12ab7     06 08 09 09 
12abb     09 08 06 01 
12abf     FC F8 F4 F4 | 	byte	$03, $04, $05, $06, $06, $08, $09, $09, $09, $08, $06, $01, $fc, $f8, $f4, $f4
12ac3     F3 F2 F2 F4 
12ac7     F7 FB FE 02 
12acb     04 05 04 04 
12acf     03 02 02 02 | 	byte	$f3, $f2, $f2, $f4, $f7, $fb, $fe, $02, $04, $05, $04, $04, $03, $02, $02, $02
12ad3     03 04 04 05 
12ad7     06 07 08 08 
12adb     08 08 05 00 
12adf     FB F7 F6 F5 | 	byte	$03, $04, $04, $05, $06, $07, $08, $08, $08, $08, $05, $00, $fb, $f7, $f6, $f5
12ae3     F4 F3 F3 F5 
12ae7     F8 FB FF 03 
12aeb     05 05 04 04 
12aef     03 03 03 03 | 	byte	$f4, $f3, $f3, $f5, $f8, $fb, $ff, $03, $05, $05, $04, $04, $03, $03, $03, $03
12af3     03 04 04 05 
12af7     05 07 07 08 
12afb     07 06 03 FF 
12aff     FA F7 F6 F5 | 	byte	$03, $04, $04, $05, $05, $07, $07, $08, $07, $06, $03, $ff, $fa, $f7, $f6, $f5
12b03     F4 F4 F4 F6 
12b07     F9 FC 00 03 
12b0b     04 04 04 04 
12b0f     03 03 03 03 | 	byte	$f4, $f4, $f4, $f6, $f9, $fc, $00, $03, $04, $04, $04, $04, $03, $03, $03, $03
12b13     03 03 04 04 
12b17     06 06 06 06 
12b1b     06 05 02 FE 
12b1f     FA F8 F7 F6 | 	byte	$03, $03, $04, $04, $06, $06, $06, $06, $06, $05, $02, $fe, $fa, $f8, $f7, $f6
12b23     F5 F4 F5 F7 
12b27     FA FC 01 03 
12b2b     04 04 04 04 
12b2f     04 03 03 03 | 	byte	$f5, $f4, $f5, $f7, $fa, $fc, $01, $03, $04, $04, $04, $04, $04, $03, $03, $03
12b33     04 03 04 04 
12b37     05 07 07 07 
12b3b     06 04 01 FC 
12b3f     FA F9 F7 F6 | 	byte	$04, $03, $04, $04, $05, $07, $07, $07, $06, $04, $01, $fc, $fa, $f9, $f7, $f6
12b43     F5 F4 F6 F7 
12b47     FA FD 01 03 
12b4b     03 04 04 04 
12b4f     04 04 03 04 | 	byte	$f5, $f4, $f6, $f7, $fa, $fd, $01, $03, $03, $04, $04, $04, $04, $04, $03, $04
12b53     04 03 03 04 
12b57     05 06 06 06 
12b5b     05 03 FE FB 
12b5f     FA F9 F7 F6 | 	byte	$04, $03, $03, $04, $05, $06, $06, $06, $05, $03, $fe, $fb, $fa, $f9, $f7, $f6
12b63     F5 F4 F6 F8 
12b67     FB FE 02 03 
12b6b     03 04 04 04 
12b6f     04 04 04 03 | 	byte	$f5, $f4, $f6, $f8, $fb, $fe, $02, $03, $03, $04, $04, $04, $04, $04, $04, $03
12b73     03 03 03 04 
12b77     04 05 05 05 
12b7b     04 00 FD FC 
12b7f     FB F9 F8 F7 | 	byte	$03, $03, $03, $04, $04, $05, $05, $05, $04, $00, $fd, $fc, $fb, $f9, $f8, $f7
12b83     F6 F6 F7 F9 
12b87     FB 00 03 03 
12b8b     04 04 05 06 
12b8f     05 05 04 04 | 	byte	$f6, $f6, $f7, $f9, $fb, $00, $03, $03, $04, $04, $05, $06, $05, $05, $04, $04
12b93     04 03 04 04 
12b97     05 05 05 04 
12b9b     03 FF FD FC 
12b9f     FB FA F9 F8 | 	byte	$04, $03, $04, $04, $05, $05, $05, $04, $03, $ff, $fd, $fc, $fb, $fa, $f9, $f8
12ba3     F6 F6 F7 F9 
12ba7     FC 00 02 03 
12bab     04 04 05 05 
12baf     05 04 04 04 | 	byte	$f6, $f6, $f7, $f9, $fc, $00, $02, $03, $04, $04, $05, $05, $05, $04, $04, $04
12bb3     03 03 03 04 
12bb7     04 04 04 03 
12bbb     FF FD FD FC 
12bbf     FB FA F9 F8 | 	byte	$03, $03, $03, $04, $04, $04, $04, $03, $ff, $fd, $fd, $fc, $fb, $fa, $f9, $f8
12bc3     F7 F7 F8 F9 
12bc7     FC 01 02 03 
12bcb     04 04 05 05 
12bcf     05 05 05 04 | 	byte	$f7, $f7, $f8, $f9, $fc, $01, $02, $03, $04, $04, $05, $05, $05, $05, $05, $04
12bd3     03 04 04 04 
12bd7     04 04 03 01 
12bdb     FD FD FC FC 
12bdf     FB FA FA F8 | 	byte	$03, $04, $04, $04, $04, $04, $03, $01, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $f8
12be3     F8 F8 F9 FA 
12be7     FE 02 02 03 
12beb     04 04 05 05 
12bef     05 05 04 03 | 	byte	$f8, $f8, $f9, $fa, $fe, $02, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03
12bf3     03 03 04 04 
12bf7     03 02 01 FD 
12bfb     FC FC FC FB 
12bff     FA FA FA F9 | 	byte	$03, $03, $04, $04, $03, $02, $01, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $fa, $f9
12c03     F8 F9 FA FC 
12c07     FF 01 02 02 
12c0b     03 04 05 05 
12c0f     05 05 04 03 | 	byte	$f8, $f9, $fa, $fc, $ff, $01, $02, $02, $03, $04, $05, $05, $05, $05, $04, $03
12c13     03 04 05 04 
12c17     04 03 FF FD 
12c1b     FD FC FC FB 
12c1f     FB FA FA F9 | 	byte	$03, $04, $05, $04, $04, $03, $ff, $fd, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $f9
12c23     F9 FA FA FD 
12c27     01 02 03 03 
12c2b     03 04 05 05 
12c2f     05 04 04 03 | 	byte	$f9, $fa, $fa, $fd, $01, $02, $03, $03, $03, $04, $05, $05, $05, $04, $04, $03
12c33     04 04 04 03 
12c37     03 00 FD FC 
12c3b     FC FC FB FB 
12c3f     FA FA FA F9 | 	byte	$04, $04, $04, $03, $03, $00, $fd, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa, $f9
12c43     F9 FA FB FE 
12c47     02 03 03 03 
12c4b     03 04 05 05 
12c4f     05 04 04 04 | 	byte	$f9, $fa, $fb, $fe, $02, $03, $03, $03, $03, $04, $05, $05, $05, $04, $04, $04
12c53     04 04 04 03 
12c57     02 FE FD FC 
12c5b     FC FC FC FB 
12c5f     FB FA FA FA | 	byte	$04, $04, $04, $03, $02, $fe, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa
12c63     FA FB FC 00 
12c67     03 03 04 04 
12c6b     04 05 06 05 
12c6f     05 05 04 05 | 	byte	$fa, $fb, $fc, $00, $03, $03, $04, $04, $04, $05, $06, $05, $05, $05, $04, $05
12c73     05 04 04 04 
12c77     01 FD FD FD 
12c7b     FC FC FB FA 
12c7f     FA FA FA F9 | 	byte	$05, $04, $04, $04, $01, $fd, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fa, $f9
12c83     FA FB FD 00 
12c87     03 03 03 04 
12c8b     04 04 05 05 
12c8f     05 04 04 04 | 	byte	$fa, $fb, $fd, $00, $03, $03, $03, $04, $04, $04, $05, $05, $05, $04, $04, $04
12c93     04 04 04 02 
12c97     FE FC FD FC 
12c9b     FC FC FB FB 
12c9f     FB FA FA FA | 	byte	$04, $04, $04, $02, $fe, $fc, $fd, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa
12ca3     FA FB FD 01 
12ca7     03 03 04 04 
12cab     04 05 05 05 
12caf     05 04 04 05 | 	byte	$fa, $fb, $fd, $01, $03, $03, $04, $04, $04, $05, $05, $05, $05, $04, $04, $05
12cb3     05 04 03 FF 
12cb7     FD FC FC FC 
12cbb     FC FC FB FB 
12cbf     FB FB FA FA | 	byte	$05, $04, $03, $ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa
12cc3     FB FC FF 03 
12cc7     04 04 04 05 
12ccb     05 05 05 05 
12ccf     04 04 04 04 | 	byte	$fb, $fc, $ff, $03, $04, $04, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04
12cd3     04 04 02 FE 
12cd7     FC FC FC FC 
12cdb     FB FB FB FA 
12cdf     FA FA FA FA | 	byte	$04, $04, $02, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $fa, $fa
12ce3     FC FD 01 03 
12ce7     04 04 04 04 
12ceb     04 05 05 05 
12cef     04 04 04 04 | 	byte	$fc, $fd, $01, $03, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $04, $04
12cf3     04 03 00 FD 
12cf7     FD FC FC FC 
12cfb     FC FB FB FB 
12cff     FB FB FA FB | 	byte	$04, $03, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fa, $fb
12d03     FC FE 01 04 
12d07     04 04 04 04 
12d0b     05 05 05 04 
12d0f     04 05 05 04 | 	byte	$fc, $fe, $01, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $05, $05, $04
12d13     03 01 FE FC 
12d17     FC FC FC FC 
12d1b     FB FB FB FB 
12d1f     FA FA FA FB | 	byte	$03, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa, $fa, $fb
12d23     FC FE 02 04 
12d27     05 04 05 05 
12d2b     05 05 05 04 
12d2f     04 04 04 03 | 	byte	$fc, $fe, $02, $04, $05, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04, $03
12d33     02 FF FD FC 
12d37     FC FC FC FB 
12d3b     FB FB FB FB 
12d3f     FB FB FB FC | 	byte	$02, $ff, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12d43     FE 00 03 05 
12d47     05 05 05 06 
12d4b     06 06 05 05 
12d4f     05 05 05 03 | 	byte	$fe, $00, $03, $05, $05, $05, $05, $06, $06, $06, $05, $05, $05, $05, $05, $03
12d53     01 FE FD FC 
12d57     FC FC FC FC 
12d5b     FB FB FB FB 
12d5f     FB FB FB FC | 	byte	$01, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12d63     FE 01 03 05 
12d67     05 05 05 05 
12d6b     05 05 05 04 
12d6f     04 04 03 01 | 	byte	$fe, $01, $03, $05, $05, $05, $05, $05, $05, $05, $05, $04, $04, $04, $03, $01
12d73     FF FD FC FC 
12d77     FC FC FC FB 
12d7b     FB FB FB FB 
12d7f     FB FB FB FD | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fd
12d83     FF 01 04 06 
12d87     05 06 05 06 
12d8b     06 06 05 05 
12d8f     05 04 02 01 | 	byte	$ff, $01, $04, $06, $05, $06, $05, $06, $06, $06, $05, $05, $05, $04, $02, $01
12d93     FE FC FC FC 
12d97     FC FC FC FB 
12d9b     FB FC FB FC 
12d9f     FC FB FC FE | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fc, $fb, $fc, $fc, $fb, $fc, $fe
12da3     00 02 04 06 
12da7     06 05 06 06 
12dab     05 05 05 05 
12daf     04 02 01 00 | 	byte	$00, $02, $04, $06, $06, $05, $06, $06, $05, $05, $05, $05, $04, $02, $01, $00
12db3     FD FC FC FC 
12db7     FC FB FB FB 
12dbb     FB FB FB FB 
12dbf     FB FB FC FE | 	byte	$fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fe
12dc3     00 02 04 06 
12dc7     06 06 05 05 
12dcb     05 06 05 05 
12dcf     03 02 01 FF | 	byte	$00, $02, $04, $06, $06, $06, $05, $05, $05, $06, $05, $05, $03, $02, $01, $ff
12dd3     FD FC FC FD 
12dd7     FD FC FC FC 
12ddb     FC FC FC FC 
12ddf     FC FC FD FF | 	byte	$fd, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $ff
12de3     00 02 05 06 
12de7     06 06 05 05 
12deb     06 05 05 04 
12def     02 01 00 FD | 	byte	$00, $02, $05, $06, $06, $06, $05, $05, $06, $05, $05, $04, $02, $01, $00, $fd
12df3     FC FC FC FC 
12df7     FC          | 	byte	$fc[5]
12df8     FB FB FC FB 
12dfc     FB FB FB FB 
12e00     FB FD FF 00 
12e04     02 05 07 06 | 	byte	$fb, $fb, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fd, $ff, $00, $02, $05, $07, $06
12e08     06 05 06 06 
12e0c     06 05 03 01 
12e10     01 FF FC FB 
12e14     FC FC FC FB | 	byte	$06, $05, $06, $06, $06, $05, $03, $01, $01, $ff, $fc, $fb, $fc, $fc, $fc, $fb
12e18     FB FB FC FC 
12e1c     FC FC FC FC 
12e20     FC FE 00 01 
12e24     03 06 07 07 | 	byte	$fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $01, $03, $06, $07, $07
12e28     07 07 07 07 
12e2c     06 04 03 02 
12e30     01 FE FC FC 
12e34     FC FC FC FC | 	byte	$07, $07, $07, $07, $06, $04, $03, $02, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fc
12e38     FC FC FC FC 
12e3c     FC FC FC FC | 	byte	$fc[8]
12e40     FD FE 00 01 
12e44     03 06 07 07 
12e48     06 06 06 06 
12e4c     05 03 01 01 | 	byte	$fd, $fe, $00, $01, $03, $06, $07, $07, $06, $06, $06, $06, $05, $03, $01, $01
12e50     00 FD FB FC 
12e54     FC FC FC FB 
12e58     FC FC FC FC 
12e5c     FC FC FC FC | 	byte	$00, $fd, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12e60     FD 00 00 01 
12e64     04 06 07 07 
12e68     06 07 07 06 
12e6c     04 02 02 01 | 	byte	$fd, $00, $00, $01, $04, $06, $07, $07, $06, $07, $07, $06, $04, $02, $02, $01
12e70     FF FC FC FC 
12e74     FC FC FC FC 
12e78     FC FC FC FC 
12e7c     FC FC FC FC | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12e80     FE 00 01 01 
12e84     04 07 08 07 
12e88     07 08 08 05 
12e8c     03 01 02 00 | 	byte	$fe, $00, $01, $01, $04, $07, $08, $07, $07, $08, $08, $05, $03, $01, $02, $00
12e90     FD FB FB FC 
12e94     FC FC FC FB 
12e98     FC FC FC FC 
12e9c     FC FC FC FD | 	byte	$fd, $fb, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd
12ea0     FE 00 01 02 
12ea4     04 07 07 07 
12ea8     07 08 07 04 
12eac     02 02 02 FF | 	byte	$fe, $00, $01, $02, $04, $07, $07, $07, $07, $08, $07, $04, $02, $02, $02, $ff
12eb0     FD FB FC FC 
12eb4     FC FC FD FD 
12eb8     FD FD FD FC 
12ebc     FD FD FD FD | 	byte	$fd, $fb, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd
12ec0     FF 00 01 02 
12ec4     05 08 07 07 
12ec8     08 08 06 03 
12ecc     02 02 01 FE | 	byte	$ff, $00, $01, $02, $05, $08, $07, $07, $08, $08, $06, $03, $02, $02, $01, $fe
12ed0     FC FB FC FC 
12ed4     FC FC FC FC 
12ed8     FD FD FC FC 
12edc     FD FC FC FD | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fd, $fc, $fc, $fd
12ee0     FF 00 01 02 
12ee4     05 07 07 07 
12ee8     08 07 04 02 
12eec     02 02 00 FC | 	byte	$ff, $00, $01, $02, $05, $07, $07, $07, $08, $07, $04, $02, $02, $02, $00, $fc
12ef0     FB FC FC FB 
12ef4     FB FC FD FD 
12ef8     FD FD FC FD 
12efc     FD FD FD FE | 	byte	$fb, $fc, $fc, $fb, $fb, $fc, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe
12f00     00 01 01 03 
12f04     06 08 09 09 
12f08     09 07 04 03 
12f0c     03 02 FE FC | 	byte	$00, $01, $01, $03, $06, $08, $09, $09, $09, $07, $04, $03, $03, $02, $fe, $fc
12f10     FC FC FC FC 
12f14     FC          | 	byte	$fc[5]
12f15     FD FD FD FE 
12f19     FE FD FD FD 
12f1d     FD FE FF 00 
12f21     01 01 03 06 | 	byte	$fd, $fd, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01, $01, $03, $06
12f25     07 08 09 08 
12f29     05 02 02 02 
12f2d     00 FD FB FB 
12f31     FB FB FC FC | 	byte	$07, $08, $09, $08, $05, $02, $02, $02, $00, $fd, $fb, $fb, $fb, $fb, $fc, $fc
12f35     FD FD FE FE 
12f39     FE FD FD FD 
12f3d     FD FE FE 00 
12f41     01 01 03 05 | 	byte	$fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $00, $01, $01, $03, $05
12f45     08 09 09 07 
12f49     04 02 02 02 
12f4d     FF FC FB FB 
12f51     FC FC FC FD | 	byte	$08, $09, $09, $07, $04, $02, $02, $02, $ff, $fc, $fb, $fb, $fc, $fc, $fc, $fd
12f55     FD FE FE FE 
12f59     FE FD FD FD 
12f5d     FE FF FF 01 
12f61     01 01 04 06 | 	byte	$fd, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $ff, $ff, $01, $01, $01, $04, $06
12f65     09 0A 09 06 
12f69     03 02 02 00 
12f6d     FD FB FB FA 
12f71     FB FC FD FE | 	byte	$09, $0a, $09, $06, $03, $02, $02, $00, $fd, $fb, $fb, $fa, $fb, $fc, $fd, $fe
12f75     FE FD FE FE 
12f79     FD FD FD FD 
12f7d     FD FF FF 01 
12f81     01 02 04 07 | 	byte	$fe, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $ff, $ff, $01, $01, $02, $04, $07
12f85     09 0A 08 05 
12f89     02 02 02 FF 
12f8d     FC FA FA FB 
12f91     FC FD FE FE | 	byte	$09, $0a, $08, $05, $02, $02, $02, $ff, $fc, $fa, $fa, $fb, $fc, $fd, $fe, $fe
12f95     FF FF FF FF 
12f99     FE FE FE FE 
12f9d     FE FF 00 01 
12fa1     01 02 04 07 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $00, $01, $01, $02, $04, $07
12fa5     0A 09 07 04 
12fa9     02 02 01 FD 
12fad     FB FA FB FB 
12fb1     FC FD FE FE | 	byte	$0a, $09, $07, $04, $02, $02, $01, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $fe
12fb5     FE FF FF FF 
12fb9     FD FE FD FD 
12fbd     FE FE FF 00 
12fc1     01 02 04 08 | 	byte	$fe, $ff, $ff, $ff, $fd, $fe, $fd, $fd, $fe, $fe, $ff, $00, $01, $02, $04, $08
12fc5     0A 08 06 03 
12fc9     02 01 FF FC 
12fcd     FA FA FA FC 
12fd1     FD FE FE FF | 	byte	$0a, $08, $06, $03, $02, $01, $ff, $fc, $fa, $fa, $fa, $fc, $fd, $fe, $fe, $ff
12fd5     FF FF FF FF 
12fd9     FE FE FE FE 
12fdd     FF FF 01 01 
12fe1     02 02 05 0A | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $01, $01, $02, $02, $05, $0a
12fe5     0A 08 06 03 
12fe9     03 01 FE FB 
12fed     FA FB FB FD 
12ff1     FE FE FF 00 | 	byte	$0a, $08, $06, $03, $03, $01, $fe, $fb, $fa, $fb, $fb, $fd, $fe, $fe, $ff, $00
12ff5     00 00 00 00 
12ff9     FE FF FE FE 
12ffd     FF FE 00 01 
13001     01 02 06 09 | 	byte	$00, $00, $00, $00, $fe, $ff, $fe, $fe, $ff, $fe, $00, $01, $01, $02, $06, $09
13005     09 07 04 02 
13009     01 FE FB F9 
1300d     F9 FA FC FD 
13011     FE FF FF 00 | 	byte	$09, $07, $04, $02, $01, $fe, $fb, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $ff, $00
13015     00 01 01 00 
13019     FF FF FF FE 
1301d     FF FE 01 01 
13021     01 03 07 09 | 	byte	$00, $01, $01, $00, $ff, $ff, $ff, $fe, $ff, $fe, $01, $01, $01, $03, $07, $09
13025     08 06 03 02 
13029     00 FD FA FA 
1302d     FA FB FD FE 
13031     FF 00 00 01 | 	byte	$08, $06, $03, $02, $00, $fd, $fa, $fa, $fa, $fb, $fd, $fe, $ff, $00, $00, $01
13035     01 01 01 00 
13039     FF FF FF FE 
1303d     FE FE 00 01 
13041     02 04 08 09 | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $01, $02, $04, $08, $09
13045     08 05 02 02 
13049     FE FA F9 F9 
1304d     FA FC FD FE 
13051     FF 00 01 01 | 	byte	$08, $05, $02, $02, $fe, $fa, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $00, $01, $01
13055     01 01 01 FF 
13059     FE FE FE FE 
1305d     FD FF 00 01 
13061     02 05 08 08 | 	byte	$01, $01, $01, $ff, $fe, $fe, $fe, $fe, $fd, $ff, $00, $01, $02, $05, $08, $08
13065     06 03 02 FF 
13069     FB F9 F8 FA 
1306d     FB FD FE FF 
13071     01 01 01 02 | 	byte	$06, $03, $02, $ff, $fb, $f9, $f8, $fa, $fb, $fd, $fe, $ff, $01, $01, $01, $02
13075     03 03 02 00 
13079     FF FF FF FF 
1307d     FD FF 01 01 
13081     02 06 08 08 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $ff, $fd, $ff, $01, $01, $02, $06, $08, $08
13085     05 02 00 FD 
13089     FA F8 F9 FA 
1308d     FC FE FF 00 
13091     01 02 02 02 | 	byte	$05, $02, $00, $fd, $fa, $f8, $f9, $fa, $fc, $fe, $ff, $00, $01, $02, $02, $02
13095     03 03 02 00 
13099     FF FF FE FE 
1309d     FD FF 01 01 
130a1     02 06 07 07 | 	byte	$03, $03, $02, $00, $ff, $ff, $fe, $fe, $fd, $ff, $01, $01, $02, $06, $07, $07
130a5     03 01 FE FA 
130a9     F8 F8 F9 FB 
130ad     FD FE 00 01 
130b1     02 03 03 03 | 	byte	$03, $01, $fe, $fa, $f8, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $03
130b5     03 03 02 00 
130b9     FF FF FF FD 
130bd     FD 00 02 01 
130c1     04 07 08 06 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $fd, $fd, $00, $02, $01, $04, $07, $08, $06
130c5     02 00 FC F9 
130c9     F8 F9 FB FD 
130cd     FE 00 01 02 
130d1     03 03 04 04 | 	byte	$02, $00, $fc, $f9, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $04, $04
130d5     04 04 03 00 
130d9     00 FF FF FC 
130dd     FD 00 01 01 
130e1     03 06 06 03 | 	byte	$04, $04, $03, $00, $00, $ff, $ff, $fc, $fd, $00, $01, $01, $03, $06, $06, $03
130e5     00 FD F9 F7 
130e9     F7 F9 FB FD 
130ed     FF 00 02 03 
130f1     04 04 04 05 | 	byte	$00, $fd, $f9, $f7, $f7, $f9, $fb, $fd, $ff, $00, $02, $03, $04, $04, $04, $05
130f5     05 05 03 00 
130f9     00 FF FE FB 
130fd     FE 00 01 01 
13101     03 05 05 00 | 	byte	$05, $05, $03, $00, $00, $ff, $fe, $fb, $fe, $00, $01, $01, $03, $05, $05, $00
13105     FE F9 F7 F7 
13109     F8 FA FD FE 
1310d     00 02 03 04 
13111     05 05 05 06 | 	byte	$fe, $f9, $f7, $f7, $f8, $fa, $fd, $fe, $00, $02, $03, $04, $05, $05, $05, $06
13115     06 05 03 00 
13119     00 FF FD FB 
1311d     FE 00 00 01 
13121     04 05 02 FF | 	byte	$06, $05, $03, $00, $00, $ff, $fd, $fb, $fe, $00, $00, $01, $04, $05, $02, $ff
13125     FB F7 F6 F7 
13129     F9 FB FE FF 
1312d     01 03 04 05 
13131     06 06 06 06 | 	byte	$fb, $f7, $f6, $f7, $f9, $fb, $fe, $ff, $01, $03, $04, $05, $06, $06, $06, $06
13135     06 05 02 00 
13139     00 FE FB FB 
1313d     FE 00 FF 01 
13141     04 04 FF FD | 	byte	$06, $05, $02, $00, $00, $fe, $fb, $fb, $fe, $00, $ff, $01, $04, $04, $ff, $fd
13145     F8 F5 F6 F8 
13149     FA FC FF 01 
1314d     03 04 06 06 
13151     07 07 07 08 | 	byte	$f8, $f5, $f6, $f8, $fa, $fc, $ff, $01, $03, $04, $06, $06, $07, $07, $07, $08
13155     07 06 02 01 
13159     00 FF FA FD 
1315d     FF FF FE 00 
13161     03 00 FC F9 | 	byte	$07, $06, $02, $01, $00, $ff, $fa, $fd, $ff, $ff, $fe, $00, $03, $00, $fc, $f9
13165     F5 F5 F7 F9 
13169     FB FD 00 02 
1316d     04 06 07 08 
13171     08 08 08 08 | 	byte	$f5, $f5, $f7, $f9, $fb, $fd, $00, $02, $04, $06, $07, $08, $08, $08, $08, $08
13175     07 06 01 00 
13179     FF FD F9 FC 
1317d     FE FD FD FF 
13181     01 FC F9 F5 | 	byte	$07, $06, $01, $00, $ff, $fd, $f9, $fc, $fe, $fd, $fd, $ff, $01, $fc, $f9, $f5
13185     F4 F5 F7 FA 
13189     FC FF 01 04 
1318d     05 07 08 09 
13191     09 09 09 09 | 	byte	$f4, $f5, $f7, $fa, $fc, $ff, $01, $04, $05, $07, $08, $09, $09, $09, $09, $09
13195     08 06 01 00 
13199     FF FB FA FD 
1319d     FE FC FE 01 
131a1     FF FA F7 F4 | 	byte	$08, $06, $01, $00, $ff, $fb, $fa, $fd, $fe, $fc, $fe, $01, $ff, $fa, $f7, $f4
131a5     F5 F7 F9 FC 
131a9     FF 01 03 05 
131ad     07 08 09 0A 
131b1     09 09 09 09 | 	byte	$f5, $f7, $f9, $fc, $ff, $01, $03, $05, $07, $08, $09, $0a, $09, $09, $09, $09
131b5     08 05 01 00 
131b9     FF FA FA FD 
131bd     FC FB FD FF 
131c1     FB F8 F5 F4 | 	byte	$08, $05, $01, $00, $ff, $fa, $fa, $fd, $fc, $fb, $fd, $ff, $fb, $f8, $f5, $f4
131c5     F5 F8 FA FD 
131c9     FF 01 04 05 
131cd     08 09 09 09 
131d1     09 09 09 09 | 	byte	$f5, $f8, $fa, $fd, $ff, $01, $04, $05, $08, $09, $09, $09, $09, $09, $09, $09
131d5     07 03 01 00 
131d9     FE F8 FB FD 
131dd     FA FB FD FC 
131e1     F8 F6 F4 F5 | 	byte	$07, $03, $01, $00, $fe, $f8, $fb, $fd, $fa, $fb, $fd, $fc, $f8, $f6, $f4, $f5
131e5     F7 F9 FC FE 
131e9     01 03 06 07 
131ed     08 09 0A 0A 
131f1     0A 09 09 08 | 	byte	$f7, $f9, $fc, $fe, $01, $03, $06, $07, $08, $09, $0a, $0a, $0a, $09, $09, $08
131f5     07 02 00 FF 
131f9     FD F9 FC FB 
131fd     F9 FB FD F9 
13201     F7 F5 F4 F6 | 	byte	$07, $02, $00, $ff, $fd, $f9, $fc, $fb, $f9, $fb, $fd, $f9, $f7, $f5, $f4, $f6
13205     F8 FA FD 00 
13209     02 04 06 08 
1320d     09 0A 0A 0A 
13211     0A 09 09 07 | 	byte	$f8, $fa, $fd, $00, $02, $04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $09, $07
13215     05 00 FF FF 
13219     FA F9 FC F8 
1321d     F8 FA FB F7 
13221     F6 F4 F5 F7 | 	byte	$05, $00, $ff, $ff, $fa, $f9, $fc, $f8, $f8, $fa, $fb, $f7, $f6, $f4, $f5, $f7
13225     F9 FC FE 01 
13229     03 05 07 09 
1322d     0A 0A 0A 0B 
13231     0A 0A 09 08 | 	byte	$f9, $fc, $fe, $01, $03, $05, $07, $09, $0a, $0a, $0a, $0b, $0a, $0a, $09, $08
13235     05 00 00 FF 
13239     FA FB FB F7 
1323d     F8 FB F7 F6 
13241     F5 F4 F6 F8 | 	byte	$05, $00, $00, $ff, $fa, $fb, $fb, $f7, $f8, $fb, $f7, $f6, $f5, $f4, $f6, $f8
13245     FA FD FF 02 
13249     04 06 08 09 
1324d     0B 0B 0B 0A 
13251     0A 09 08 07 | 	byte	$fa, $fd, $ff, $02, $04, $06, $08, $09, $0b, $0b, $0b, $0a, $0a, $09, $08, $07
13255     03 00 FF FE 
13259     F9 FA F8 F5 
1325d     F8 F8 F5 F5 
13261     F4 F5 F7 F9 | 	byte	$03, $00, $ff, $fe, $f9, $fa, $f8, $f5, $f8, $f8, $f5, $f5, $f4, $f5, $f7, $f9
13265     FC FE 01 03 
13269     05 07 09 0A 
1326d     0B 0B 0B 0B 
13271     0A 09 08 06 | 	byte	$fc, $fe, $01, $03, $05, $07, $09, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $06
13275     02 00 FF FD 
13279     F9 F9 F6 F6 
1327d     F8 F6 F3 F5 
13281     F5 F7 F9 FC | 	byte	$02, $00, $ff, $fd, $f9, $f9, $f6, $f6, $f8, $f6, $f3, $f5, $f5, $f7, $f9, $fc
13285     FE 00 03 05 
13289     08 09 0A 0B 
1328d     0C 0C 0C 0B 
13291     0A 0A 08 05 | 	byte	$fe, $00, $03, $05, $08, $09, $0a, $0b, $0c, $0c, $0c, $0b, $0a, $0a, $08, $05
13295     00 00 00 FC 
13299     F8 F5 F4 F5 
1329d     F6 F2 F3 F4 
132a1     F5 F7 FA FC | 	byte	$00, $00, $00, $fc, $f8, $f5, $f4, $f5, $f6, $f2, $f3, $f4, $f5, $f7, $fa, $fc
132a5     FF 01 03 05 
132a9     08 09 0B 0C 
132ad     0C 0C 0B 0B 
132b1     0A 09 07 03 | 	byte	$ff, $01, $03, $05, $08, $09, $0b, $0c, $0c, $0c, $0b, $0b, $0a, $09, $07, $03
132b5     00 00 FF FA 
132b9     F5 F3 F4 F5 
132bd     F3 F0 F3 F5 
132c1     F6 F9 FB FE | 	byte	$00, $00, $ff, $fa, $f5, $f3, $f4, $f5, $f3, $f0, $f3, $f5, $f6, $f9, $fb, $fe
132c5     01 03 05 07 
132c9     09 0B 0C 0C 
132cd     0D 0C 0C 0A 
132d1     0A 08 07 01 | 	byte	$01, $03, $05, $07, $09, $0b, $0c, $0c, $0d, $0c, $0c, $0a, $0a, $08, $07, $01
132d5     00 00 FF F8 
132d9     F2 F2 F4 F4 
132dd     F0 F0 F3 F6 
132e1     F8 FA FD FF | 	byte	$00, $00, $ff, $f8, $f2, $f2, $f4, $f4, $f0, $f0, $f3, $f6, $f8, $fa, $fd, $ff
132e5     02 04 06 08 
132e9     0A 0B 0C 0D 
132ed     0D 0C 0B 0A 
132f1     0A 08 04 00 | 	byte	$02, $04, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $0a, $0a, $08, $04, $00
132f5     FF 00 FD F4 
132f9     F0 F2 F3 F1 
132fd     ED F1 F5 F7 
13301     F9 FC FE 01 | 	byte	$ff, $00, $fd, $f4, $f0, $f2, $f3, $f1, $ed, $f1, $f5, $f7, $f9, $fc, $fe, $01
13305     03 05 07 09 
13309     0B 0C 0D 0D 
1330d     0D 0D 0B 0B 
13311     0A 08 03 01 | 	byte	$03, $05, $07, $09, $0b, $0c, $0d, $0d, $0d, $0d, $0b, $0b, $0a, $08, $03, $01
13315     01 00 FA F0 
13319     F1 F3 F2 EE 
1331d     EB F1 F6 F7 
13321     FA FE 00 02 | 	byte	$01, $00, $fa, $f0, $f1, $f3, $f2, $ee, $eb, $f1, $f6, $f7, $fa, $fe, $00, $02
13325     05 06 09 0A 
13329     0C 0D 0D 0E 
1332d     0D 0C 0B 0A 
13331     09 07 01 00 | 	byte	$05, $06, $09, $0a, $0c, $0d, $0d, $0e, $0d, $0c, $0b, $0a, $09, $07, $01, $00
13335     00 FD F6 EE 
13339     F0 F3 EF EA 
1333d     EB F2 F6 F8 
13341     FC FF 01 04 | 	byte	$00, $fd, $f6, $ee, $f0, $f3, $ef, $ea, $eb, $f2, $f6, $f8, $fc, $ff, $01, $04
13345     06 08 0A 0B 
13349     0C 0D 0E 0E 
1334d     0D 0C 0B 0A 
13351     08 05 01 01 | 	byte	$06, $08, $0a, $0b, $0c, $0d, $0e, $0e, $0d, $0c, $0b, $0a, $08, $05, $01, $01
13355     FF FA F1 EE 
13359     F2 F2 ED E8 
1335d     EC F3 F7 FA 
13361     FF 01 04 06 | 	byte	$ff, $fa, $f1, $ee, $f2, $f2, $ed, $e8, $ec, $f3, $f7, $fa, $ff, $01, $04, $06
13365     08 0A 0C 0D 
13369     0E 0F 0F 0F 
1336d     0E 0D 0B 0A 
13371     08 03 01 00 | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0e, $0d, $0b, $0a, $08, $03, $01, $00
13375     FC F6 EF EF 
13379     F2 EF E9 E6 
1337d     ED F3 F8 FC 
13381     FF 02 04 07 | 	byte	$fc, $f6, $ef, $ef, $f2, $ef, $e9, $e6, $ed, $f3, $f8, $fc, $ff, $02, $04, $07
13385     08 0A 0C 0D 
13389     0E 0F 0F 0E 
1338d     0D 0C 0B 09 
13391     07 03 01 FF | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0e, $0d, $0c, $0b, $09, $07, $03, $01, $ff
13395     F9 F2 EF F0 
13399     F1 ED E5 E6 
1339d     EE F5 FA FE 
133a1     01 04 06 08 | 	byte	$f9, $f2, $ef, $f0, $f1, $ed, $e5, $e6, $ee, $f5, $fa, $fe, $01, $04, $06, $08
133a5     0A 0C 0D 0E 
133a9     0F 10 10 0F 
133ad     0E 0C 0B 09 
133b1     05 02 00 FB | 	byte	$0a, $0c, $0d, $0e, $0f, $10, $10, $0f, $0e, $0c, $0b, $09, $05, $02, $00, $fb
133b5     F5 F2 EF F1 
133b9     F0 E9 E3 E7 
133bd     EF F6 FC 00 
133c1     03 05 08 09 | 	byte	$f5, $f2, $ef, $f1, $f0, $e9, $e3, $e7, $ef, $f6, $fc, $00, $03, $05, $08, $09
133c5     0C 0D 0E 0F 
133c9     0F 10 0F 0E 
133cd     0D 0B 0A 09 
133d1     04 01 FD F8 | 	byte	$0c, $0d, $0e, $0f, $0f, $10, $0f, $0e, $0d, $0b, $0a, $09, $04, $01, $fd, $f8
133d5     F1 F1 F0 F0 
133d9     ED E5 E1 E7 
133dd     F0 F8 FE 02 
133e1     05 07 09 0B | 	byte	$f1, $f1, $f0, $f0, $ed, $e5, $e1, $e7, $f0, $f8, $fe, $02, $05, $07, $09, $0b
133e5     0C 0E 0F 10 
133e9     10 10 10 0F 
133ed     0E 0C 0A 08 
133f1     03 00 FC F4 | 	byte	$0c, $0e, $0f, $10, $10, $10, $10, $0f, $0e, $0c, $0a, $08, $03, $00, $fc, $f4
133f5     F2 F3 F0 EF 
133f9     EA E2 E0 E8 
133fd     F1 F9 00 04 
13401     06 09 0A 0C | 	byte	$f2, $f3, $f0, $ef, $ea, $e2, $e0, $e8, $f1, $f9, $00, $04, $06, $09, $0a, $0c
13405     0D 0F 10 10 
13409     10 11 10 0F 
1340d     0D 0B 0A 06 
13411     01 FD F8 F1 | 	byte	$0d, $0f, $10, $10, $10, $11, $10, $0f, $0d, $0b, $0a, $06, $01, $fd, $f8, $f1
13415     F2 F3 F0 ED 
13419     E6 DE DF E9 
1341d     F2 FC 02 05 
13421     08 0A 0C 0D | 	byte	$f2, $f3, $f0, $ed, $e6, $de, $df, $e9, $f2, $fc, $02, $05, $08, $0a, $0c, $0d
13425     0F 10 10 11 
13429     11 11 10 0F 
1342d     0D 0C 0A 05 
13431     FF FB F4 F1 | 	byte	$0f, $10, $10, $11, $11, $11, $10, $0f, $0d, $0c, $0a, $05, $ff, $fb, $f4, $f1
13435     F3 F3 EF EB 
13439     E3 DC E0 EA 
1343d     F4 FF 05 08 
13441     0A 0C 0E 10 | 	byte	$f3, $f3, $ef, $eb, $e3, $dc, $e0, $ea, $f4, $ff, $05, $08, $0a, $0c, $0e, $10
13445     11 12 12 12 
13449     12 12 11 10 
1344d     0E 0C 0A 03 
13451     FD F8 F1 F1 | 	byte	$11, $12, $12, $12, $12, $12, $11, $10, $0e, $0c, $0a, $03, $fd, $f8, $f1, $f1
13455     F3 F3 ED E7 
13459     E0 DA E1 EB 
1345d     F7 00 07 09 
13461     0B 0D 0E 10 | 	byte	$f3, $f3, $ed, $e7, $e0, $da, $e1, $eb, $f7, $00, $07, $09, $0b, $0d, $0e, $10
13465     11 12 12 12 
13469     12 12 11 0F 
1346d     0D 0C 07 01 
13471     FB F5 F1 F2 | 	byte	$11, $12, $12, $12, $12, $12, $11, $0f, $0d, $0c, $07, $01, $fb, $f5, $f1, $f2
13475     F4 F2 EA E3 
13479     DB D9 E1 ED 
1347d     F9 03 09 0B 
13481     0D 0F 10 11 | 	byte	$f4, $f2, $ea, $e3, $db, $d9, $e1, $ed, $f9, $03, $09, $0b, $0d, $0f, $10, $11
13485     13 13 13 13 
13489     13 13       | 	byte	$13[6]
1348b     11 0F 0D 0B 
1348f     05 FE F8 F2 
13493     F1 F2 F4 F0 
13497     E7 DF D9 DA | 	byte	$11, $0f, $0d, $0b, $05, $fe, $f8, $f2, $f1, $f2, $f4, $f0, $e7, $df, $d9, $da
1349b     E3 F0 FC 06 
1349f     0B 0D 0E 10 
134a3     12 13 14 14 
134a7     14 14 13 12 | 	byte	$e3, $f0, $fc, $06, $0b, $0d, $0e, $10, $12, $13, $14, $14, $14, $14, $13, $12
134ab     11 0F 0D 09 
134af     02 FB F6 F1 
134b3     F0 F1 F2 EC 
134b7     E2 DB D6 DA | 	byte	$11, $0f, $0d, $09, $02, $fb, $f6, $f1, $f0, $f1, $f2, $ec, $e2, $db, $d6, $da
134bb     E5 F3 FF 09 
134bf     0E 0F 10 12 
134c3     13 14 14 15 
134c7     15 14 14 13 | 	byte	$e5, $f3, $ff, $09, $0e, $0f, $10, $12, $13, $14, $14, $15, $15, $14, $14, $13
134cb     11 0F 0D 08 
134cf     FF F9 F3 F1 
134d3     F1 F2 F1 E9 
134d7     DE D8 D6 DD | 	byte	$11, $0f, $0d, $08, $ff, $f9, $f3, $f1, $f1, $f2, $f1, $e9, $de, $d8, $d6, $dd
134db     E8 F6 02 0B 
134df     0F 10 12 13 
134e3     14 15 15 16 
134e7     15 15 14 13 | 	byte	$e8, $f6, $02, $0b, $0f, $10, $12, $13, $14, $15, $15, $16, $15, $15, $14, $13
134eb     11 0F 0B 06 
134ef     FC F6 F1 F0 
134f3     F0 F1 ED E3 
134f7     D9 D5 D6 DE | 	byte	$11, $0f, $0b, $06, $fc, $f6, $f1, $f0, $f0, $f1, $ed, $e3, $d9, $d5, $d6, $de
134fb     EA F8 05 0D 
134ff     11 12 14 15 
13503     16 16 16 16 
13507     16 15 14 13 | 	byte	$ea, $f8, $05, $0d, $11, $12, $14, $15, $16, $16, $16, $16, $16, $15, $14, $13
1350b     11 0F 09 02 
1350f     F9 F3 F1 EF 
13513     F0 EE E8 DF 
13517     D7 D4 D9 E2 | 	byte	$11, $0f, $09, $02, $f9, $f3, $f1, $ef, $f0, $ee, $e8, $df, $d7, $d4, $d9, $e2
1351b     ED FC 09 10 
1351f     13 15 16 17 
13523     18 18 18 18 
13527     18 16 15 14 | 	byte	$ed, $fc, $09, $10, $13, $15, $16, $17, $18, $18, $18, $18, $18, $16, $15, $14
1352b     12 0D 07 FE 
1352f     F8 F2 F0 EF 
13533     EE EA E4 DA 
13537     D4 D4 DA E4 | 	byte	$12, $0d, $07, $fe, $f8, $f2, $f0, $ef, $ee, $ea, $e4, $da, $d4, $d4, $da, $e4
1353b     F2 FF 0C 13 
1353f     15 16 17 18 
13543     19 19 19 18 
13547     17 16 15 14 | 	byte	$f2, $ff, $0c, $13, $15, $16, $17, $18, $19, $19, $19, $18, $17, $16, $15, $14
1354b     11 0B 04 FC 
1354f     F5 F1 EF EE 
13553     EB E6 DF D6 
13557     D2 D5 DC E6 | 	byte	$11, $0b, $04, $fc, $f5, $f1, $ef, $ee, $eb, $e6, $df, $d6, $d2, $d5, $dc, $e6
1355b     F4 03 0F 15 
1355f     17 18 19 1A 
13563     1B 1A 1A 19 
13567     19 17 16 14 | 	byte	$f4, $03, $0f, $15, $17, $18, $19, $1a, $1b, $1a, $1a, $19, $19, $17, $16, $14
1356b     0F 08 01 F9 
1356f     F3 F0 EE EC 
13573     E7 E1 DA D4 
13577     D2 D7 DF EB | 	byte	$0f, $08, $01, $f9, $f3, $f0, $ee, $ec, $e7, $e1, $da, $d4, $d2, $d7, $df, $eb
1357b     F8 07 12 17 
1357f     19 1A 1B 1B 
13583     1C 1C 1B 1A 
13587     18 17 16 12 | 	byte	$f8, $07, $12, $17, $19, $1a, $1b, $1b, $1c, $1c, $1b, $1a, $18, $17, $16, $12
1358b     0D 05 FE F6 
1358f     F1 EF EC E7 
13593     E0 DB D6 D1 
13597     D3 D9 E1 EF | 	byte	$0d, $05, $fe, $f6, $f1, $ef, $ec, $e7, $e0, $db, $d6, $d1, $d3, $d9, $e1, $ef
1359b     FD 0A 15 1A 
1359f     1B 1C 1D 1D 
135a3     1D 1D 1C 1B 
135a7     19 18 16 12 | 	byte	$fd, $0a, $15, $1a, $1b, $1c, $1d, $1d, $1d, $1d, $1c, $1b, $19, $18, $16, $12
135ab     0B 03 FD F5 
135af     F0 ED E9 E3 
135b3     DB D7 D3 D1 
135b7     D4 DC E5 F2 | 	byte	$0b, $03, $fd, $f5, $f0, $ed, $e9, $e3, $db, $d7, $d3, $d1, $d4, $dc, $e5, $f2
135bb     02 0E 18 1D 
135bf     1D 1E 1E 1F 
135c3     1F 1E 1D 1B 
135c7     1A 18 15 10 | 	byte	$02, $0e, $18, $1d, $1d, $1e, $1e, $1f, $1f, $1e, $1d, $1b, $1a, $18, $15, $10
135cb     08 01 F9 F2 
135cf     EE EA E4 DB 
135d3     D6 D3 D1 D1 
135d7     D7 DE E8 F7 | 	byte	$08, $01, $f9, $f2, $ee, $ea, $e4, $db, $d6, $d3, $d1, $d1, $d7, $de, $e8, $f7
135db     06 13 1B 1E 
135df     1E 1F 20 1F 
135e3     1F 1E 1D 1B 
135e7     19 18 13 0D | 	byte	$06, $13, $1b, $1e, $1e, $1f, $20, $1f, $1f, $1e, $1d, $1b, $19, $18, $13, $0d
135eb     05 FE F7 F0 
135ef     ED E7 DE D7 
135f3     D3 D2 D2 D4 
135f7     DB E3 ED FC | 	byte	$05, $fe, $f7, $f0, $ed, $e7, $de, $d7, $d3, $d2, $d2, $d4, $db, $e3, $ed, $fc
135fb     0C 16 1D 1F 
135ff     20 21 21 21 
13603     20 1F 1D 1C 
13607     1A 17 12 0A | 	byte	$0c, $16, $1d, $1f, $20, $21, $21, $21, $20, $1f, $1d, $1c, $1a, $17, $12, $0a
1360b     03 FD F7 EF 
1360f     EB E4 DA D3 
13613     D1 D3 D3 D7 
13617     DE E6 F2 00 | 	byte	$03, $fd, $f7, $ef, $eb, $e4, $da, $d3, $d1, $d3, $d3, $d7, $de, $e6, $f2, $00
1361b     0E 19 1E 1F 
1361f     20 20 20 20 
13623     1F 1E 1C 1A 
13627     19 16 0F 07 | 	byte	$0e, $19, $1e, $1f, $20, $20, $20, $20, $1f, $1e, $1c, $1a, $19, $16, $0f, $07
1362b     00 FB F4 ED 
1362f     E8 DE D6 D1 
13633     D1 D4 D4 DB 
13637     E2 EB F6 05 | 	byte	$00, $fb, $f4, $ed, $e8, $de, $d6, $d1, $d1, $d4, $d4, $db, $e2, $eb, $f6, $05
1363b     11 1B 1F 20 
1363f     20 20 21 20 
13643     1F 1E 1C 1B 
13647     18 13 0C 04 | 	byte	$11, $1b, $1f, $20, $20, $20, $21, $20, $1f, $1e, $1c, $1b, $18, $13, $0c, $04
1364b     FE FA F1 EB 
1364f     E4 D9 D2 D0 
13653     D2 D4 D8 DF 
13657     E6 EF FB 0A | 	byte	$fe, $fa, $f1, $eb, $e4, $d9, $d2, $d0, $d2, $d4, $d8, $df, $e6, $ef, $fb, $0a
1365b     14 1D 20 20 
1365f     21 21 21 20 
13663     1F 1E 1C 1A 
13667     16 10 09 01 | 	byte	$14, $1d, $20, $20, $21, $21, $21, $20, $1f, $1e, $1c, $1a, $16, $10, $09, $01
1366b     FD F7 EF E8 
1366f     DE D5 CF CF 
13673     D3 D4 DA E2 
13677     E9 F3 00 0D | 	byte	$fd, $f7, $ef, $e8, $de, $d5, $cf, $cf, $d3, $d4, $da, $e2, $e9, $f3, $00, $0d
1367b     18 1E 21 21 
1367f     21 21 20 1F 
13683     1E 1D 1B 19 
13687     15 0E 06 00 | 	byte	$18, $1e, $21, $21, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $15, $0e, $06, $00
1368b     FC F6 EC E4 
1368f     DA D2 CF D2 
13693     D5 D7 DE E6 
13697     EE F8 05 10 | 	byte	$fc, $f6, $ec, $e4, $da, $d2, $cf, $d2, $d5, $d7, $de, $e6, $ee, $f8, $05, $10
1369b     1A 20 21 21 
1369f     21 21 20 1F 
136a3     1D 1C 1B 18 
136a7     12 0B 03 FF | 	byte	$1a, $20, $21, $21, $21, $21, $20, $1f, $1d, $1c, $1b, $18, $12, $0b, $03, $ff
136ab     FA F3 E7 DE 
136af     D5 D0 CF D3 
136b3     D5 D9 E2 E9 
136b7     F1 FD 08 15 | 	byte	$fa, $f3, $e7, $de, $d5, $d0, $cf, $d3, $d5, $d9, $e2, $e9, $f1, $fd, $08, $15
136bb     1D 21 21 21 
136bf     21 20 20 1E 
136c3     1D 1B 19 15 
136c7     0F 08 01 FC | 	byte	$1d, $21, $21, $21, $21, $20, $20, $1e, $1d, $1b, $19, $15, $0f, $08, $01, $fc
136cb     F8 EE E3 D9 
136cf     D2 CF D1 D5 
136d3     D7 DE E6 ED 
136d7     F5 01 0E 18 | 	byte	$f8, $ee, $e3, $d9, $d2, $cf, $d1, $d5, $d7, $de, $e6, $ed, $f5, $01, $0e, $18
136db     1F 22 21 22 
136df     21 21 20 1F 
136e3     1E 1C 19 14 
136e7     0D 05 00 FB | 	byte	$1f, $22, $21, $22, $21, $21, $20, $1f, $1e, $1c, $19, $14, $0d, $05, $00, $fb
136eb     F6 EA DE D6 
136ef     D1 D0 D3 D5 
136f3     D9 E2 E9 F0 
136f7     FA 05 11 1B | 	byte	$f6, $ea, $de, $d6, $d1, $d0, $d3, $d5, $d9, $e2, $e9, $f0, $fa, $05, $11, $1b
136fb     1F 21 21 21 
136ff     20 20 1F 1E 
13703     1C 1A 16 11 
13707     09 03 FD FA | 	byte	$1f, $21, $21, $21, $20, $20, $1f, $1e, $1c, $1a, $16, $11, $09, $03, $fd, $fa
1370b     F1 E5 D9 D3 
1370f     D1 D3 D5 D7 
13713     DD E5 ED F4 
13717     FE 0A 14 1D | 	byte	$f1, $e5, $d9, $d3, $d1, $d3, $d5, $d7, $dd, $e5, $ed, $f4, $fe, $0a, $14, $1d
1371b     21 21 21 20 
1371f     20 1F 1E 1D 
13723     1C 19 14 0D 
13727     06 01 FD F6 | 	byte	$21, $21, $21, $20, $20, $1f, $1e, $1d, $1c, $19, $14, $0d, $06, $01, $fd, $f6
1372b     EC DF D6 D3 
1372f     D3 D4 D6 D9 
13733     E0 E9 F0 F8 
13737     03 0D 18 1E | 	byte	$ec, $df, $d6, $d3, $d3, $d4, $d6, $d9, $e0, $e9, $f0, $f8, $03, $0d, $18, $1e
1373b     21 21 21 20 
1373f     1F 1F 1E 1C 
13743     1A 17 10 0A 
13747     04 FF FA F2 | 	byte	$21, $21, $21, $20, $1f, $1f, $1e, $1c, $1a, $17, $10, $0a, $04, $ff, $fa, $f2
1374b     E5 DA D4 D4 
1374f     D5 D5 D7 DB 
13753     E3 EC F3 FB 
13757     06 11 1A 20 | 	byte	$e5, $da, $d4, $d4, $d5, $d5, $d7, $db, $e3, $ec, $f3, $fb, $06, $11, $1a, $20
1375b     22 21 21 20 
1375f     1F 1E 1D 1B 
13763     19 14 0E 07 
13767     02 FD F7 EC | 	byte	$22, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $14, $0e, $07, $02, $fd, $f7, $ec
1376b     E1 D8 D5 D6 
1376f     D7 D7 DB DF 
13773     E8 F0 F6 00 
13777     0A 14 1C 20 | 	byte	$e1, $d8, $d5, $d6, $d7, $d7, $db, $df, $e8, $f0, $f6, $00, $0a, $14, $1c, $20
1377b     21 20 20 1F 
1377f     1E 1D 1C 1A 
13783     16 11 0B 05 
13787     00 FB F2 E7 | 	byte	$21, $20, $20, $1f, $1e, $1d, $1c, $1a, $16, $11, $0b, $05, $00, $fb, $f2, $e7
1378b     DE D7 D6 D7 
1378f     D7 D8 DC E2 
13793     EA F3 F9 03 
13797     0D 17 1E 21 | 	byte	$de, $d7, $d6, $d7, $d7, $d8, $dc, $e2, $ea, $f3, $f9, $03, $0d, $17, $1e, $21
1379b     21 20 1F 1E 
1379f     1E 1C 1B 18 
137a3     13 0D 07 03 
137a7     FE F7 ED E2 | 	byte	$21, $20, $1f, $1e, $1e, $1c, $1b, $18, $13, $0d, $07, $03, $fe, $f7, $ed, $e2
137ab     DB D7 D9 D9 
137af     D8 DB DF E5 
137b3     EE F6 FD 07 
137b7     11 1A 1F 22 | 	byte	$db, $d7, $d9, $d9, $d8, $db, $df, $e5, $ee, $f6, $fd, $07, $11, $1a, $1f, $22
137bb     21 20 1F 1F 
137bf     1E 1C 1B 17 
137c3     11 0C 06 02 
137c7     FC F3 E9 E0 | 	byte	$21, $20, $1f, $1f, $1e, $1c, $1b, $17, $11, $0c, $06, $02, $fc, $f3, $e9, $e0
137cb     DA D9 DA DA 
137cf     DA DE E2 E9 
137d3     F1 F8 00 09 
137d7     13 1B 20 21 | 	byte	$da, $d9, $da, $da, $da, $de, $e2, $e9, $f1, $f8, $00, $09, $13, $1b, $20, $21
137db     20 1F 1F 1D 
137df     1D 1B 18 13 
137e3     0E 09 04 FF 
137e7     F9 EF E5 DE | 	byte	$20, $1f, $1f, $1d, $1d, $1b, $18, $13, $0e, $09, $04, $ff, $f9, $ef, $e5, $de
137eb     DB DB DC DB 
137ef     DD E1 E5 EC 
137f3     F5 FA 03 0C 
137f7     15 1D 20 20 | 	byte	$db, $db, $dc, $db, $dd, $e1, $e5, $ec, $f5, $fa, $03, $0c, $15, $1d, $20, $20
137fb     20 1E 1E 1D 
137ff     1B 19 16 11 
13803     0B 06 03 FD 
13807     F5 EA E2 DE | 	byte	$20, $1e, $1e, $1d, $1b, $19, $16, $11, $0b, $06, $03, $fd, $f5, $ea, $e2, $de
1380b     DC DD DD DC 
1380f     E0 E3 E8 F0 
13813     F7 FD 06 0E 
13817     17 1E 20 20 | 	byte	$dc, $dd, $dd, $dc, $e0, $e3, $e8, $f0, $f7, $fd, $06, $0e, $17, $1e, $20, $20
1381b     1F 1E 1D 1C 
1381f     1B 18 13 0D 
13823     09 04 01 FA 
13827     F0 E7 E1 DE | 	byte	$1f, $1e, $1d, $1c, $1b, $18, $13, $0d, $09, $04, $01, $fa, $f0, $e7, $e1, $de
1382b     DE DE DE DE 
1382f     E2 E4 E9 F2 
13833     F8 00 08 11 
13837     18 1E 20 1F | 	byte	$de, $de, $de, $de, $e2, $e4, $e9, $f2, $f8, $00, $08, $11, $18, $1e, $20, $1f
1383b     1F 1E 1D 1C 
1383f     19 15 10 0B 
13843     07 03 FE F6 
13847     EC E5 E2 E0 | 	byte	$1f, $1e, $1d, $1c, $19, $15, $10, $0b, $07, $03, $fe, $f6, $ec, $e5, $e2, $e0
1384b     E0 E1 DF E2 
1384f     E6 E8 EE F6 
13853     FB 02 0A 12 
13857     1A 1F 1F 1F | 	byte	$e0, $e1, $df, $e2, $e6, $e8, $ee, $f6, $fb, $02, $0a, $12, $1a, $1f, $1f, $1f
1385b     1D 1C 1B 1A 
1385f     16 12 0D 08 
13863     05 02 FB F2 
13867     E9 E4 E2 E1 | 	byte	$1d, $1c, $1b, $1a, $16, $12, $0d, $08, $05, $02, $fb, $f2, $e9, $e4, $e2, $e1
1386b     E2 E0 E0 E4 
1386f     E7 EA F0 F7 
13873     FD 04 0C 14 
13877     1A 1E 1F 1E | 	byte	$e2, $e0, $e0, $e4, $e7, $ea, $f0, $f7, $fd, $04, $0c, $14, $1a, $1e, $1f, $1e
1387b     1D 1B 1A 18 
1387f     14 0F 0B 07 
13883     04 FF F7 EF 
13887     E7 E4 E3 E3 | 	byte	$1d, $1b, $1a, $18, $14, $0f, $0b, $07, $04, $ff, $f7, $ef, $e7, $e4, $e3, $e3
1388b     E3 E1 E3 E7 
1388f     E9 EC F4 FA 
13893     FF 06 0E 15 
13897     1C 1F 1F 1E | 	byte	$e3, $e1, $e3, $e7, $e9, $ec, $f4, $fa, $ff, $06, $0e, $15, $1c, $1f, $1f, $1e
1389b     1C 1B 1A 16 
1389f     12 0D 09 06 
138a3     03 FD F5 EC 
138a7     E8 E6 E5 E5 | 	byte	$1c, $1b, $1a, $16, $12, $0d, $09, $06, $03, $fd, $f5, $ec, $e8, $e6, $e5, $e5
138ab     E4 E3 E5 E9 
138af     EB F0 F6 FB 
138b3     01 08 0F 16 
138b7     1C 1E 1E 1C | 	byte	$e4, $e3, $e5, $e9, $eb, $f0, $f6, $fb, $01, $08, $0f, $16, $1c, $1e, $1e, $1c
138bb     1B 1A 17 13 
138bf     0E 0A 07 05 
138c3     00 F9 F1 EA 
138c7     E7 E7 E6 E6 | 	byte	$1b, $1a, $17, $13, $0e, $0a, $07, $05, $00, $f9, $f1, $ea, $e7, $e7, $e6, $e6
138cb     E5 E5 E8 EC 
138cf     EE F2 F9 FD 
138d3     02 09 10 17 
138d7     1B 1D 1D 1C | 	byte	$e5, $e5, $e8, $ec, $ee, $f2, $f9, $fd, $02, $09, $10, $17, $1b, $1d, $1d, $1c
138db     1A 18 15 10 
138df     0D 09 07 03 
138e3     FE F6 EE EA 
138e7     E8 E8 E7 E7 | 	byte	$1a, $18, $15, $10, $0d, $09, $07, $03, $fe, $f6, $ee, $ea, $e8, $e8, $e7, $e7
138eb     E5 E7 EA EE 
138ef     F0 F5 FA FE 
138f3     04 0A 11 18 
138f7     1B 1D 1C 1B | 	byte	$e5, $e7, $ea, $ee, $f0, $f5, $fa, $fe, $04, $0a, $11, $18, $1b, $1d, $1c, $1b
138fb     19 16 12 0E 
138ff     0A 07 05 01 
13903     FB F3 EC E9 
13907     E9 E9 E8 E8 | 	byte	$19, $16, $12, $0e, $0a, $07, $05, $01, $fb, $f3, $ec, $e9, $e9, $e9, $e8, $e8
1390b     E6 E9 ED F0 
1390f     F1 F6 FB FF 
13913     04 0B 12 18 
13917     1B 1C 1B 1A | 	byte	$e6, $e9, $ed, $f0, $f1, $f6, $fb, $ff, $04, $0b, $12, $18, $1b, $1c, $1b, $1a
1391b     18 14 11 0C 
1391f     09 07 04 FF 
13923     F8 F1 EC EB 
13927     EB EA EA E9 | 	byte	$18, $14, $11, $0c, $09, $07, $04, $ff, $f8, $f1, $ec, $eb, $eb, $ea, $ea, $e9
1392b     E9 EC F0 F2 
1392f     F4 F9 FD 01 
13933     06 0C 13 18 
13937     1B 1B 1A 18 | 	byte	$e9, $ec, $f0, $f2, $f4, $f9, $fd, $01, $06, $0c, $13, $18, $1b, $1b, $1a, $18
1393b     15 11 0D 0A 
1393f     08 06 02 FC 
13943     F5 EF EC EC 
13947     EC EB EB E9 | 	byte	$15, $11, $0d, $0a, $08, $06, $02, $fc, $f5, $ef, $ec, $ec, $ec, $eb, $eb, $e9
1394b     EA ED F1 F3 
1394f     F5 FA FE 02 
13953     07 0D 13 18 
13957     1A 1B 19 16 | 	byte	$ea, $ed, $f1, $f3, $f5, $fa, $fe, $02, $07, $0d, $13, $18, $1a, $1b, $19, $16
1395b     13 0F 0C 09 
1395f     07 05 FF F9 
13963     F3 EE ED ED 
13967     ED EC EB EA | 	byte	$13, $0f, $0c, $09, $07, $05, $ff, $f9, $f3, $ee, $ed, $ed, $ed, $ec, $eb, $ea
1396b     EC F0 F3 F5 
1396f     F7 FC FF 03 
13973     09 0E 14 18 
13977     1B 1A 18 14 | 	byte	$ec, $f0, $f3, $f5, $f7, $fc, $ff, $03, $09, $0e, $14, $18, $1b, $1a, $18, $14
1397b     11 0E 0B 09 
1397f     07 04 FE F7 
13983     F2 EF EF EF 
13987     EE EE EC EC | 	byte	$11, $0e, $0b, $09, $07, $04, $fe, $f7, $f2, $ef, $ef, $ef, $ee, $ee, $ec, $ec
1398b     EE F2 F5 F6 
1398f     F9 FD 00 03 
13993     09 0E 14 18 
13997     19 18 15 12 | 	byte	$ee, $f2, $f5, $f6, $f9, $fd, $00, $03, $09, $0e, $14, $18, $19, $18, $15, $12
1399b     0F 0C 0A 08 
1399f     06 01 FB F4 
139a3     F1 EF F0 F0 
139a7     EF EF ED EE | 	byte	$0f, $0c, $0a, $08, $06, $01, $fb, $f4, $f1, $ef, $f0, $f0, $ef, $ef, $ed, $ee
139ab     F0 F4 F7 F8 
139af     FA FE 00 04 
139b3     09 0F 14 17 
139b7     18 17 14 11 | 	byte	$f0, $f4, $f7, $f8, $fa, $fe, $00, $04, $09, $0f, $14, $17, $18, $17, $14, $11
139bb     0D 0B 0A 08 
139bf     04 FF F9 F4 
139c3     F1 F1 F1 F0 
139c7     F0 EF EE EF | 	byte	$0d, $0b, $0a, $08, $04, $ff, $f9, $f4, $f1, $f1, $f1, $f0, $f0, $ef, $ee, $ef
139cb     F2 F5 F8 F9 
139cf     FB FE 01 05 
139d3     09 0F 13 17 
139d7     17 15 11 0F | 	byte	$f2, $f5, $f8, $f9, $fb, $fe, $01, $05, $09, $0f, $13, $17, $17, $15, $11, $0f
139db     0C 0A 09 06 
139df     02 FD F7 F4 
139e3     F1 F1 F2 F1 
139e7     F1 EF EE F0 | 	byte	$0c, $0a, $09, $06, $02, $fd, $f7, $f4, $f1, $f1, $f2, $f1, $f1, $ef, $ee, $f0
139eb     F3 F7 F9 F9 
139ef     FC FE 01 05 
139f3     0A 0F 14 16 
139f7     15 13 10 0E | 	byte	$f3, $f7, $f9, $f9, $fc, $fe, $01, $05, $0a, $0f, $14, $16, $15, $13, $10, $0e
139fb     0C 0A 08 05 
139ff     00 FB F6 F3 
13a03     F2 F3 F3 F2 
13a07     F2 F0 F0 F2 | 	byte	$0c, $0a, $08, $05, $00, $fb, $f6, $f3, $f2, $f3, $f3, $f2, $f2, $f0, $f0, $f2
13a0b     F6 F8 FA FB 
13a0f     FE 00 03 06 
13a13     0B 0F 14 15 
13a17     14 12 0F 0C | 	byte	$f6, $f8, $fa, $fb, $fe, $00, $03, $06, $0b, $0f, $14, $15, $14, $12, $0f, $0c
13a1b     0B 09 07 03 
13a1f     FE F9 F5 F3 
13a23     F3 F4 F4 F3 
13a27     F3 F1 F1 F3 | 	byte	$0b, $09, $07, $03, $fe, $f9, $f5, $f3, $f3, $f4, $f4, $f3, $f3, $f1, $f1, $f3
13a2b     F6 F9 FB FB 
13a2f     FD 00 02 06 
13a33     0B 0F 12 14 
13a37     12 10 0D 0C | 	byte	$f6, $f9, $fb, $fb, $fd, $00, $02, $06, $0b, $0f, $12, $14, $12, $10, $0d, $0c
13a3b     0A 08 06 01 
13a3f     FC F7 F5 F4 
13a43     F4 F5 F4 F3 
13a47     F3 F1 F3 F5 | 	byte	$0a, $08, $06, $01, $fc, $f7, $f5, $f4, $f4, $f5, $f4, $f3, $f3, $f1, $f3, $f5
13a4b     F8 FB FC FC 
13a4f     FE 01 03 07 
13a53     0C 10 12 13 
13a57     11 0F 0D 0C | 	byte	$f8, $fb, $fc, $fc, $fe, $01, $03, $07, $0c, $10, $12, $13, $11, $0f, $0d, $0c
13a5b     0B 08 05 01 
13a5f     FB F8 F6 F5 
13a63     F6 F7 F5 F4 
13a67     F3 F3 F5 F7 | 	byte	$0b, $08, $05, $01, $fb, $f8, $f6, $f5, $f6, $f7, $f5, $f4, $f3, $f3, $f5, $f7
13a6b     F9 FB FD FD 
13a6f     FF 01 04 07 
13a73     0B 0F 10 11 
13a77     10 0E 0C 0B | 	byte	$f9, $fb, $fd, $fd, $ff, $01, $04, $07, $0b, $0f, $10, $11, $10, $0e, $0c, $0b
13a7b     09 07 03 FD 
13a7f     F9 F7 F5 F5 
13a83     F6 F6 F5 F5 
13a87     F4 F4 F5 F8 | 	byte	$09, $07, $03, $fd, $f9, $f7, $f5, $f5, $f6, $f6, $f5, $f5, $f4, $f4, $f5, $f8
13a8b     FA FC FE FE 
13a8f     00 02 04 08 
13a93     0B 0E 0F 10 
13a97     0F 0D 0C 0A | 	byte	$fa, $fc, $fe, $fe, $00, $02, $04, $08, $0b, $0e, $0f, $10, $0f, $0d, $0c, $0a
13a9b     08 05 02 FC 
13a9f     F9 F7 F7 F7 
13aa3     F8 F7 F6 F6 
13aa7     F4 F5 F7 F9 | 	byte	$08, $05, $02, $fc, $f9, $f7, $f7, $f7, $f8, $f7, $f6, $f6, $f4, $f5, $f7, $f9
13aab     FB FD FE FE 
13aaf     00 02 05 08 
13ab3     0B 0D 0F 0E 
13ab7     0E 0C 0B 09 | 	byte	$fb, $fd, $fe, $fe, $00, $02, $05, $08, $0b, $0d, $0f, $0e, $0e, $0c, $0b, $09
13abb     07 04 00 FB 
13abf     F8 F7 F7 F7 
13ac3     F7 F7 F6 F5 
13ac7     F4 F5 F7 F9 | 	byte	$07, $04, $00, $fb, $f8, $f7, $f7, $f7, $f7, $f7, $f6, $f5, $f4, $f5, $f7, $f9
13acb     FC FE FF FE 
13acf     00 02 04 08 
13ad3     0A 0C 0D 0D 
13ad7     0D 0C 0A 09 | 	byte	$fc, $fe, $ff, $fe, $00, $02, $04, $08, $0a, $0c, $0d, $0d, $0d, $0c, $0a, $09
13adb     06 03 FE FA 
13adf     F8 F7 F8 F9 
13ae3     F9 F8 F7 F7 
13ae7     F6 F7 F8 FA | 	byte	$06, $03, $fe, $fa, $f8, $f7, $f8, $f9, $f9, $f8, $f7, $f7, $f6, $f7, $f8, $fa
13aeb     FD FF FF 00 
13aef     01 03 06 08 
13af3     0A 0C 0D 0D 
13af7     0C 0B 09 07 | 	byte	$fd, $ff, $ff, $00, $01, $03, $06, $08, $0a, $0c, $0d, $0d, $0c, $0b, $09, $07
13afb     05 00 FC F9 
13aff     F8 F8 F8 F9 
13b03     F9 F8 F8 F6 
13b07     F6 F7 F9 FB | 	byte	$05, $00, $fc, $f9, $f8, $f8, $f8, $f9, $f9, $f8, $f8, $f6, $f6, $f7, $f9, $fb
13b0b     FD FF FE FF 
13b0f     01 03 05 07 
13b13     09 0B 0C 0C 
13b17     0C 0A 09 06 | 	byte	$fd, $ff, $fe, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0c, $0c, $0a, $09, $06
13b1b     03 FF FB F9 
13b1f     F8 F8 F9 F9 
13b23     F9 F8 F7 F6 
13b27     F7 F8 FA FC | 	byte	$03, $ff, $fb, $f9, $f8, $f8, $f9, $f9, $f9, $f8, $f7, $f6, $f7, $f8, $fa, $fc
13b2b     FE FF FF 00 
13b2f     02 04 06 08 
13b33     09 0B 0C 0C 
13b37     0C 0A 08 06 | 	byte	$fe, $ff, $ff, $00, $02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0a, $08, $06
13b3b     02 FF FB FA 
13b3f     F9 FA FA FA 
13b43     FB FA F8 F7 
13b47     F8 FA FB FD | 	byte	$02, $ff, $fb, $fa, $f9, $fa, $fa, $fa, $fb, $fa, $f8, $f7, $f8, $fa, $fb, $fd
13b4b     FF 00 FF 01 
13b4f     02 04 05 08 
13b53     09 0A 0B 0B 
13b57     0A 09 06 04 | 	byte	$ff, $00, $ff, $01, $02, $04, $05, $08, $09, $0a, $0b, $0b, $0a, $09, $06, $04
13b5b     00 FD FA F9 
13b5f     F9 FA FA FA 
13b63     FA F9 F8 F8 
13b67     F9 FA FB FE | 	byte	$00, $fd, $fa, $f9, $f9, $fa, $fa, $fa, $fa, $f9, $f8, $f8, $f9, $fa, $fb, $fe
13b6b     00 00 00 02 
13b6f     03 04 05 07 
13b73     08 0A 0A 0A 
13b77     09 08 06 03 | 	byte	$00, $00, $00, $02, $03, $04, $05, $07, $08, $0a, $0a, $0a, $09, $08, $06, $03
13b7b     FF FC FA FA 
13b7f     FB FB FB FB 
13b83     FB F9 F8 F8 
13b87     F9 FA FC FE | 	byte	$ff, $fc, $fa, $fa, $fb, $fb, $fb, $fb, $fb, $f9, $f8, $f8, $f9, $fa, $fc, $fe
13b8b     00 00 00 02 
13b8f     03 04 06 07 
13b93     08 09 0A 0A 
13b97     09 07 04 01 | 	byte	$00, $00, $00, $02, $03, $04, $06, $07, $08, $09, $0a, $0a, $09, $07, $04, $01
13b9b     FE FB FA FA 
13b9f     FB FB FB FC 
13ba3     FB F9 F8 F9 
13ba7     F9 FA FC FE | 	byte	$fe, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fb, $f9, $f8, $f9, $f9, $fa, $fc, $fe
13bab     00 00 00 02 
13baf     02 03 05 06 
13bb3     07 08 09 09 
13bb7     08 05 04 01 | 	byte	$00, $00, $00, $02, $02, $03, $05, $06, $07, $08, $09, $09, $08, $05, $04, $01
13bbb     FE FB FB FB 
13bbf     FB FC FC FD 
13bc3     FB F9 F9 FA 
13bc7     FB FB FD FF | 	byte	$fe, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fb, $f9, $f9, $fa, $fb, $fb, $fd, $ff
13bcb     01 01 02 03 
13bcf     04 05 05 06 
13bd3     07 08 09 08 
13bd7     06 04 02 FF | 	byte	$01, $01, $02, $03, $04, $05, $05, $06, $07, $08, $09, $08, $06, $04, $02, $ff
13bdb     FC FB FB FC 
13bdf     FC FC FD FD 
13be3     FB F9 FA FA 
13be7     FB FC FD FF | 	byte	$fc, $fb, $fb, $fc, $fc, $fc, $fd, $fd, $fb, $f9, $fa, $fa, $fb, $fc, $fd, $ff
13beb     00 00 01 03 
13bef     03 04 05 06 
13bf3     07 08 08 07 
13bf7     06 03 01 FE | 	byte	$00, $00, $01, $03, $03, $04, $05, $06, $07, $08, $08, $07, $06, $03, $01, $fe
13bfb     FC FB FC FC 
13bff     FC FD FD FD 
13c03     FA F9 FA FB 
13c07     FB FC FE 00 | 	byte	$fc, $fb, $fc, $fc, $fc, $fd, $fd, $fd, $fa, $f9, $fa, $fb, $fb, $fc, $fe, $00
13c0b     00 01 02 03 
13c0f     03 04 05 06 
13c13     07 08 08 07 
13c17     05 03 01 FE | 	byte	$00, $01, $02, $03, $03, $04, $05, $06, $07, $08, $08, $07, $05, $03, $01, $fe
13c1b     FD FD FD FD 
13c1f     FE FE FE FD 
13c23     FB FA FB FB 
13c27     FC FD FE 00 | 	byte	$fd, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $00
13c2b     01 01 02 03 
13c2f     03 04 05 06 
13c33     07 07 07 05 
13c37     03 01 FF FD | 	byte	$01, $01, $02, $03, $03, $04, $05, $06, $07, $07, $07, $05, $03, $01, $ff, $fd
13c3b     FD FC FD FD 
13c3f     FE FE FE FC 
13c43     FA FB FB FB 
13c47     FC FD FF 00 | 	byte	$fd, $fc, $fd, $fd, $fe, $fe, $fe, $fc, $fa, $fb, $fb, $fb, $fc, $fd, $ff, $00
13c4b     00 01 03 03 
13c4f     03 03 04 05 
13c53     07 07 06 04 
13c57     02 01 FE FD | 	byte	$00, $01, $03, $03, $03, $03, $04, $05, $07, $07, $06, $04, $02, $01, $fe, $fd
13c5b     FD FD FE FE 
13c5f     FE FF FE FC 
13c63     FB FB FB FC 
13c67     FC FD FF 00 | 	byte	$fd, $fd, $fe, $fe, $fe, $ff, $fe, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00
13c6b     00 02 03 02 
13c6f     03 04 05 06 
13c73     06 06 05 03 
13c77     01 00 FE FD | 	byte	$00, $02, $03, $02, $03, $04, $05, $06, $06, $06, $05, $03, $01, $00, $fe, $fd
13c7b     FE FE FE FE 
13c7f     FE          | 	byte	$fe[5]
13c80     FF FD FC FB 
13c84     FB FB FC FC 
13c88     FD FF 00 01 
13c8c     02 02 02 02 | 	byte	$ff, $fd, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00, $01, $02, $02, $02, $02
13c90     03 04 05 06 
13c94     05 04 02 01 
13c98     00 FF FF FF 
13c9c     FE FE FF FF | 	byte	$03, $04, $05, $06, $05, $04, $02, $01, $00, $ff, $ff, $ff, $fe, $fe, $ff, $ff
13ca0     FF FD FC FC 
13ca4     FC FC FC FD 
13ca8     FF 00 00 01 
13cac     02 03 02 03 | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $ff, $00, $00, $01, $02, $03, $02, $03
13cb0     04 05 06 05 
13cb4     04 03 01 00 
13cb8     FF FE FE FE 
13cbc     FE FF FF FF | 	byte	$04, $05, $06, $05, $04, $03, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff
13cc0     FE FD FD FC 
13cc4     FC FC FD FD 
13cc8     FE FF FF 00 
13ccc     01 01 01 02 | 	byte	$fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00, $01, $01, $01, $02
13cd0     03 04 05 05 
13cd4     03 02 01 00 
13cd8     FF FF FF FF 
13cdc     FF FF FF FF | 	byte	$03, $04, $05, $05, $03, $02, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
13ce0     FD FD FD FC 
13ce4     FC FC FC FE 
13ce8     FF 00 00 00 
13cec     01 02 02 03 | 	byte	$fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00, $01, $02, $02, $03
13cf0     04 05 05 04 
13cf4     03 02 01 00 
13cf8     00 00 00 00 
13cfc     00 01 00 FF | 	byte	$04, $05, $05, $04, $03, $02, $01, $00, $00, $00, $00, $00, $00, $01, $00, $ff
13d00     FF FF FE FD 
13d04     FD FD FD FF 
13d08     FF 00 00 01 
13d0c     01 02 02 03 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $00, $00, $01, $01, $02, $02, $03
13d10     03 04 04 03 
13d14     01 00 00 00 
13d18     FF 00 00 FF 
13d1c     00 00 FF FE | 	byte	$03, $04, $04, $03, $01, $00, $00, $00, $ff, $00, $00, $ff, $00, $00, $ff, $fe
13d20     FE FE FE FD 
13d24     FD FD FD FF 
13d28     FF FF 00 01 
13d2c     01 01 02 03 | 	byte	$fe, $fe, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $00, $01, $01, $01, $02, $03
13d30     03 03 03 02 
13d34     01 00 01 00 
13d38     00 00 00 01 
13d3c     01 01 FF FF | 	byte	$03, $03, $03, $02, $01, $00, $01, $00, $00, $00, $00, $01, $01, $01, $ff, $ff
13d40     FF FF FD FD 
13d44     FD FD FE FF 
13d48     FF FF FF 00 
13d4c     01 01 02 03 | 	byte	$ff, $ff, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $ff, $ff, $00, $01, $01, $02, $03
13d50     03 03 02 02 
13d54     01 01 01 00 
13d58     00 00 01 01 
13d5c     01 00 FF FF | 	byte	$03, $03, $02, $02, $01, $01, $01, $00, $00, $00, $01, $01, $01, $00, $ff, $ff
13d60     FF FE FD FD 
13d64     FD FD FD FE 
13d68     FE FE 00 00 
13d6c     00 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $00, $00, $00, $00, $01, $02
13d70     02 02 01 01 
13d74     00 01 01 01 
13d78     01 01 01 01 
13d7c     01 00 FF FF | 	byte	$02, $02, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $ff
13d80     FF FF FE FD 
13d84     FD FD FE FF 
13d88     FE FF 00 00 
13d8c     01 01 02 02 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $ff, $fe, $ff, $00, $00, $01, $01, $02, $02
13d90     02 02 01 01 
13d94     01 01 01 00 
13d98     01 01 01 01 
13d9c     00 FF 00 FF | 	byte	$02, $02, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $00, $ff, $00, $ff
13da0     FF FF FE FD 
13da4     FD FD FE FE 
13da8     FE FE FF FF 
13dac     00 00 01 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01
13db0     01 01 01 01 
13db4     01 01 01 01 
13db8     01 01 01 01 | 	byte	$01[12]
13dbc     00 FF 00 FF 
13dc0     FF FE FE FD 
13dc4     FD FE FE FE 
13dc8     FE FE FF FF | 	byte	$00, $ff, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13dcc     00 00 01 02 
13dd0     01 02 02 02 
13dd4     02 02 02 02 
13dd8     02 02 02 02 | 	byte	$00, $00, $01, $02, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
13ddc     01 00 00 00 
13de0     00 FF FF FF 
13de4     FE FE FE FE 
13de8     FE FE FF FF | 	byte	$01, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13dec     00 00 01 01 
13df0     01 01 01 01 
13df4     02 01 01 01 
13df8     01 02 02 01 | 	byte	$00, $00, $01, $01, $01, $01, $01, $01, $02, $01, $01, $01, $01, $02, $02, $01
13dfc     00 00 00 00 
13e00     FF FF FE FE 
13e04     FE FE FE FD 
13e08     FE FE FF FF | 	byte	$00, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $ff, $ff
13e0c     00 00 00 01 
13e10     01 01 01 01 
13e14     02 01 01 02 
13e18     02 02 02 01 | 	byte	$00, $00, $00, $01, $01, $01, $01, $01, $02, $01, $01, $02, $02, $02, $02, $01
13e1c     00 01 00 00 
13e20     00 FF FE FE 
13e24     FE FE FE FD 
13e28     FE FE FE FF | 	byte	$00, $01, $00, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff
13e2c     00 00 00 01 
13e30     01 01 02 02 
13e34     02 01 02 02 
13e38     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $01, $02, $02, $02, $02, $01, $01
13e3c     01 00 00 00 
13e40     FF FF FE FE 
13e44     FE FE FD FC 
13e48     FD FE FE FF | 	byte	$01, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fc, $fd, $fe, $fe, $ff
13e4c     FF FF FF 00 
13e50     01 01 02 02 
13e54     02 02 02 03 
13e58     03 02 02 01 | 	byte	$ff, $ff, $ff, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $02, $02, $01
13e5c     01 01 01 00 
13e60     FF FF FF FE 
13e64     FE FE FD FD 
13e68     FD FF FF FF | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $ff, $ff, $ff
13e6c     00 00 00 01 
13e70     02 02 02 02 
13e74     02 02 02 02 
13e78     02 02 00 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $00, $00
13e7c     00 01 00 00 
13e80     FF FF FF FE 
13e84     FE FE FC FC 
13e88     FD FD FE FE | 	byte	$00, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fc, $fc, $fd, $fd, $fe, $fe
13e8c     FE FF 00 00 
13e90     01 02 02 02 
13e94     02 02 02 02 
13e98     02 01 01 01 | 	byte	$fe, $ff, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
13e9c     01 00 00 FF 
13ea0     FF FF FE FE 
13ea4     FE FD FD FC 
13ea8     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fd, $fe, $fe, $fe
13eac     FF 00 00 01 
13eb0     02 03 03 03 
13eb4     03 03 03 03 
13eb8     02 02 02 02 | 	byte	$ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02
13ebc     02 01 01 00 
13ec0     FF 00 FF FE 
13ec4     FE FD FC FD 
13ec8     FD FD FE FE | 	byte	$02, $01, $01, $00, $ff, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fd, $fe, $fe
13ecc     FF FF 00 01 
13ed0     02 02 02 02 
13ed4     02 03 02 02 
13ed8     02 01 01 01 | 	byte	$ff, $ff, $00, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02, $01, $01, $01
13edc     01 01 00 FF 
13ee0     FF FF FE FE 
13ee4     FD FD FC FD 
13ee8     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fe, $fe, $fe
13eec     FF 00 01 02 
13ef0     02 02 02 02 
13ef4     03 03 03 03 
13ef8     02 01 01 01 | 	byte	$ff, $00, $01, $02, $02, $02, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01
13efc     01 01 00 00 
13f00     FF FF FE FD 
13f04     FD FC FC FC 
13f08     FD FD FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13f0c     FF 00 01 02 
13f10     03 02 02 03 
13f14     03 03 03 02 
13f18     01 01 01 01 | 	byte	$ff, $00, $01, $02, $03, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01, $01
13f1c     01 00 00 FF 
13f20     FF FE FD FD 
13f24     FC FC FC FC 
13f28     FD FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13f2c     FE 00 01 02 
13f30     02 02 02 03 
13f34     03 03 03 03 
13f38     02 02 01 01 | 	byte	$fe, $00, $01, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01
13f3c     01 01 00 FF 
13f40     FF FE FE FD 
13f44     FD FC FC FD 
13f48     FD FE FE FF | 	byte	$01, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $ff
13f4c     00 01 02 02 
13f50     02 03 03 03 
13f54     02 02 02 02 
13f58     01 01 01 01 | 	byte	$00, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01
13f5c     01 00 00 FF 
13f60     FF FE FD FD 
13f64     FD FC FC FC 
13f68     FC FD FD FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe
13f6c     FF 01 01 02 
13f70     02 03 03 03 
13f74     03 03 03 01 
13f78     01 01 01 01 | 	byte	$ff, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01, $01
13f7c     01 00 FF FF 
13f80     FE FE FD FD 
13f84     FC FC FC FC 
13f88     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
13f8c     00 01 02 03 
13f90     03 03 04 03 
13f94     03 04 03 02 
13f98     02 02 02 02 | 	byte	$00, $01, $02, $03, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02
13f9c     02 01 00 FF 
13fa0     FF FE FE FD 
13fa4     FD FC FC FD 
13fa8     FD FD FE FF | 	byte	$02, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $ff
13fac     00 01 02 02 
13fb0     03 03 03 03 
13fb4     03 03 02 01 
13fb8     01 01 01 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
13fbc     01 00 FF FF 
13fc0     FE FE FD FD 
13fc4     FD FC FD FD 
13fc8     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
13fcc     01 01 02 02 
13fd0     03 03 03 03 
13fd4     03 03 02 01 
13fd8     01 01 02 01 | 	byte	$01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $02, $01
13fdc     01 00 FF FF 
13fe0     FE FD FD FD 
13fe4     FD FC FD FD 
13fe8     FD FE FF 00 | 	byte	$01, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $ff, $00
13fec     01 02 02 03 
13ff0     03 03 03 03 
13ff4     03 03 02 01 
13ff8     01 01 01 01 | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
13ffc     00 FF FF FE 
14000     FD FD FD FD 
14004     FC FC FC FC 
14008     FD FD FE FF | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
1400c     00 01 02 02 
14010     03 03 03 03 
14014     03 02 02 02 
14018     02 02 02 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01
1401c     00 FF FF FE 
14020     FD FD FD FD 
14024     FD FC FC FD 
14028     FE FE FF 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fe, $fe, $ff, $01
1402c     01 02 03 03 
14030     03 03 03 03 
14034     03 02 01 01 
14038     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
1403c     00 FF FF FE 
14040     FD FD FD FD 
14044     FD FC FC FC 
14048     FD FE FF 00 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $ff, $00
1404c     01 01 02 03 
14050     03 03 03 03 
14054     03 02 01 01 
14058     01 01 01 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
1405c     FF FF FE FD 
14060     FD FD FD FD 
14064     FC FC FC FD 
14068     FE FE FF 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $01
1406c     01 02 03 03 
14070     04 03 03 04 
14074     03 02 02 02 
14078     02 02 02 01 | 	byte	$01, $02, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02, $02, $01
1407c     00 FF FF FE 
14080     FE FE FE FD 
14084     FD FD FD FD 
14088     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
1408c     01 02 03 03 
14090     03 03 03 03 
14094     02 02 01 01 
14098     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $01, $01, $00
1409c     FF FF FE FD 
140a0     FD FD FD FD 
140a4     FD FC FD FD 
140a8     FE FF 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01
140ac     01 02 03 03 
140b0     03 03 03 03 
140b4     02 02 02 02 
140b8     02 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
140bc     FF FF FE FD 
140c0     FD FD FD FD 
140c4     FC FC FD FD 
140c8     FE 00 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $00, $00, $01
140cc     02 03 03 03 
140d0     03 03 03 02 
140d4     02 02 01 02 
140d8     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $02, $01, $01, $00, $ff
140dc     FF FE FD FD 
140e0     FD FD FD FC 
140e4     FC FC FC FE 
140e8     FF 00 00 00 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00
140ec     01 02 03 03 
140f0     03 03 03 03 
140f4     02 02 02 02 
140f8     02 01 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $00, $ff
140fc     FF FE FD FD 
14100     FD FD FD FD 
14104     FC FD FD FE 
14108     FF 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01, $02
1410c     02 03 03 03 
14110     03 03 03 02 
14114     01 02 02 01 
14118     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $02, $01, $01, $01, $00, $ff
1411c     FE FE FD FD 
14120     FD FD FD FD 
14124     FC FD FE FE 
14128     FF 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $00, $00, $01
1412c     02 03 03 03 
14130     03 03 03 02 
14134     01 02 01 01 
14138     01 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $01, $01, $01, $00, $ff, $fe
1413c     FE FD FD FD 
14140     FD FD FD FD 
14144     FC FD FE FF 
14148     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02
1414c     02 03 04 04 
14150     04 04 03 02 
14154     02 02 02 02 
14158     01 01 00 FF | 	byte	$02, $03, $04, $04, $04, $04, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff
1415c     FE FE FD FD 
14160     FD FD FD FD 
14164     FD FD FE FF 
14168     00 00 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $00, $01, $02
1416c     02 03 03 03 
14170     03 03 02 02 
14174     02 01 01 01 
14178     00 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $01, $00, $00, $ff, $fe
1417c     FE FD FD FD 
14180     FD FD FD FD 
14184     FD FE FF FF 
14188     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $02
1418c     03 03 03 04 
14190     03 03 02 02 
14194     02 02 02 01 
14198     00 00 FF FE | 	byte	$03, $03, $03, $04, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $fe
1419c     FE FD FD FD 
141a0     FD FD FD FC 
141a4     FD FE FF 00 
141a8     00 01 02 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02, $02
141ac     03 03 04 04 
141b0     03 02 02 02 
141b4     02 01 01 01 
141b8     00 FF FE FD | 	byte	$03, $03, $04, $04, $03, $02, $02, $02, $02, $01, $01, $01, $00, $ff, $fe, $fd
141bc     FD FD FD FD 
141c0     FC FC FC FC 
141c4     FD FE FF 00 
141c8     00 01 01 02 | 	byte	$fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $00, $00, $01, $01, $02
141cc     02 03 03 03 
141d0     03 02 02 02 
141d4     02 02 02 01 
141d8     00 FF FF FE | 	byte	$02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01, $00, $ff, $ff, $fe
141dc     FD FD FD FD 
141e0     FD FD FD FD | 	byte	$fd[8]
141e4     FE FF 00 01 
141e8     01 02 02 03 
141ec     03 03 03 03 
141f0     03 02 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
141f4     01 01 01 00 
141f8     00 FF FE FE 
141fc     FD FD FD FD 
14200     FD FD FD FD | 	byte	$01, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd
14204     FE FF FF 00 
14208     00 01 02 02 
1420c     02 03 04 03 
14210     02 02 02 02 | 	byte	$fe, $ff, $ff, $00, $00, $01, $02, $02, $02, $03, $04, $03, $02, $02, $02, $02
14214     01 01 00 00 
14218     FF FF FE FD 
1421c     FC FC FC FC 
14220     FD FD FD FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe
14224     FE FF 00 01 
14228     01 02 03 03 
1422c     04 04 04 03 
14230     03 03 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $03, $03, $04, $04, $04, $03, $03, $03, $02, $02
14234     02 01 01 00 
14238     00 FF FE FE 
1423c     FD FD FD FD 
14240     FD FD FD FE | 	byte	$02, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe
14244     FF FF 00 00 
14248     01 02 03 03 
1424c     03 03 03 02 
14250     02 02 02 01 | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $01
14254     01 00 00 00 
14258     FF FE FD FD 
1425c     FC FC FD FD 
14260     FD FD FD FE | 	byte	$01, $00, $00, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fe
14264     FF 00 01 01 
14268     01 02 03 03 
1426c     03 03 03 02 
14270     02 02 02 02 | 	byte	$ff, $00, $01, $01, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02
14274     02 01 00 00 
14278     FF FF FE FD 
1427c     FD FC FD FD 
14280     FD FD FE FF | 	byte	$02, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
14284     00 00 01 01 
14288     02 03 03 03 
1428c     04 03 02 02 
14290     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01
14294     01 00 00 FF 
14298     FF FD FD FC 
1429c     FD FC FC FC 
142a0     FC FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fd, $fd, $fc, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $fe
142a4     FF 00 01 01 
142a8     02 02 02 03 
142ac     03 02 02 02 
142b0     02 02 02 01 | 	byte	$ff, $00, $01, $01, $02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $01
142b4     01 01 01 00 
142b8     FF FE FD FD 
142bc     FC FC FD FD 
142c0     FD FD FF FF | 	byte	$01, $01, $01, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $ff
142c4     00 01 01 02 
142c8     02 03 03 04 
142cc     03 02 02 02 
142d0     02 02 01 01 | 	byte	$00, $01, $01, $02, $02, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01, $01
142d4     00 00 FF FF 
142d8     FE FD FC FC 
142dc     FC FD FD FD 
142e0     FD FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff
142e4     00 00 01 01 
142e8     02 03 03 03 
142ec     03 02 02 02 
142f0     02 01 01 00 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $01, $01, $00
142f4     00 00 FF FF 
142f8     FE FD FC FC 
142fc     FC FC FD FD 
14300     FD FE FF 00 | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
14304     01 01 01 02 
14308     03 03 04 03 
1430c     03 02 03 03 
14310     03 02 02 01 | 	byte	$01, $01, $01, $02, $03, $03, $04, $03, $03, $02, $03, $03, $03, $02, $02, $01
14314     01 00 00 FF 
14318     FE FE FD FC 
1431c     FD FD FE FE 
14320     FE FF 00 00 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00
14324     01 01 02 02 
14328     02 03 03 03 
1432c     02 02 02 02 
14330     02 01 01 00 | 	byte	$01, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14334     FF FF FF FE 
14338     FD FC FC FC 
1433c     FD FD FD FD 
14340     FE FF 00 01 | 	byte	$ff, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
14344     01 01 02 02 
14348     03 03 02 02 
1434c     02 02 02 02 
14350     02 01 01 00 | 	byte	$01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
14354     00 FF FF FE 
14358     FD FD FC FD 
1435c     FD FD FD FE 
14360     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
14364     01 01 02 03 
14368     03 03 03 02 
1436c     02 02 02 02 
14370     01 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00, $00
14374     00 FF FE FE 
14378     FD FC FC FC 
1437c     FD FD FD FE 
14380     FE FF 00 00 | 	byte	$00, $ff, $fe, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00
14384     01 01 02 03 
14388     02 02 02 02 
1438c     02 02 02 02 
14390     01 01 01 00 | 	byte	$01, $01, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00
14394     00 FF FF FE 
14398     FD FC FC FD 
1439c     FD FE FE FE 
143a0     FF 00 01 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
143a4     01 02 03 03 
143a8     03 03 03 03 
143ac     02 02 02 01 
143b0     01 00 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $00, $ff
143b4     FF FE FE FD 
143b8     FD FC FD FD 
143bc     FD FE FE FE 
143c0     FF 00 01 01 | 	byte	$ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
143c4     01 02 02 02 
143c8     02 02 02 02 
143cc     02 02 01 01 
143d0     01 00 00 FF | 	byte	$01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00, $00, $ff
143d4     FF FE FD FD 
143d8     FC FC FC FD 
143dc     FD FD FE FF 
143e0     FF 00 00 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01
143e4     02 02 02 03 
143e8     03 02 02 02 
143ec     02 02 02 02 
143f0     01 01 00 00 | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00
143f4     FF FF FE FE 
143f8     FD FD FD FE 
143fc     FE FE FF FF 
14400     00 01 01 01 | 	byte	$ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $01, $01, $01
14404     02 02 03 03 
14408     03 02 02 02 
1440c     02 01 01 01 
14410     01 00 FF FF | 	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff
14414     FE FE FD FD 
14418     FD FD FD FE 
1441c     FE FE FF 00 
14420     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
14424     02 02 03 02 
14428     02 02 02 02 
1442c     02 01 01 00 
14430     01 00 FF 00 | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $00, $01, $00, $ff, $00
14434     FF FE FE FD 
14438     FD FD FE FE 
1443c     FE FE FF 00 
14440     00 01 01 02 | 	byte	$ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
14444     02 02 03 02 
14448     02 02 02 02 
1444c     01 01 01 01 
14450     00 FF FF FF | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff, $ff
14454     FE FE FD FD 
14458     FD FD FD FE 
1445c     FE FE FF FF 
14460     00 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $00, $01
14464     02 02 02 02 
14468     02          | 	byte	$02[5]
14469     01 01 01 01 
1446d     01 01       | 	byte	$01[6]
1446f     00 00 00 FF 
14473     00 FF FF FE 
14477     FD FD FE FE 
1447b     FE FE FF FF | 	byte	$00, $00, $00, $ff, $00, $ff, $ff, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff
1447f     00 01 01 01 
14483     02 02 03 03 
14487     02 02 02 02 
1448b     02 01 01 00 | 	byte	$00, $01, $01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
1448f     00 FF FF FF 
14493     FE FE FE FD 
14497     FD FE FE FE 
1449b     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff
1449f     00 00 00 01 
144a3     02 02 02 02 
144a7     01 02 01 01 
144ab     01 01 01 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $01, $02, $01, $01, $01, $01, $01, $00
144af     00 FF FF FF 
144b3     FE FE FD FD 
144b7     FD FE FE FE 
144bb     FE FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00
144bf     00 00 01 01 
144c3     02 02 02 02 
144c7     02 02 02 02 
144cb     02 01 01 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
144cf     00 01 00 FF 
144d3     FF FF FF FE 
144d7     FE FE FF FF 
144db     FF FF 00 00 | 	byte	$00, $01, $00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $00, $00
144df     00 01 01 02 
144e3     02 02 02 02 
144e7     02 02 02 01 
144eb     01 00 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00
144ef     00 FF FF FF 
144f3     FE FE FE FE 
144f7     FE FE FF FF 
144fb     FF FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00
144ff     00 01 01 02 
14503     02 02 02 01 
14507     01 02 02 01 
1450b     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $01, $01, $02, $02, $01, $01, $01, $00, $00
1450f     00 FF FF FF 
14513     FF FE FE FE 
14517     FE FF FF FF 
1451b     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
1451f     00 01 01 02 
14523     02 02 02 02 
14527     02 02 01 01 
1452b     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $00
1452f     00 FF FF FF 
14533     FF FE FE FE 
14537     FE FE FE FF 
1453b     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff
1453f     00 00 01 01 
14543     01 02 02 02 
14547     01 01 00 00 
1454b     00 00 00 00 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $01, $01, $00, $00, $00, $00, $00, $00
1454f     FF 00 FF FF 
14553     FF FF FF FE 
14557     FE FF FF FF 
1455b     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
1455f     00 01 02 02 
14563     02 02 02 02 
14567     02 02 01 01 
1456b     00 00 00 FF | 	byte	$00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00, $ff
1456f     FF FF FF FF 
14573     FE FE FE FE 
14577     FF FF FF FF 
1457b     FF FF FF 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
1457f     00 01 01 01 
14583     01 01 01 01 
14587     01 00 00 00 
1458b     00 00 00 FF | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $ff
1458f     FF FF FF FF 
14593     FE FE FE FE 
14597     FE FF FF FF 
1459b     FF FF 00 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
1459f     00 01 01 02 
145a3     02 01 01 01 
145a7     01 01 01 01 
145ab     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00
145af     00 00 00 00 
145b3     00          | 	byte	$00[5]
145b4     FF FF FF FF 
145b8     00 00 FF 00 
145bc     00 00 00 01 
145c0     01 01 02 01 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $01, $01, $01, $02, $01
145c4     01 01 01 01 
145c8     01          | 	byte	$01[5]
145c9     00 00 00 00 
145cd     00          | 	byte	$00[5]
145ce     FF 00 FF FF 
145d2     FF FE FE FE 
145d6     FF FF FF FF 
145da     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
145de     00 01 01 01 
145e2     01 01 01 01 
145e6     01 01 01 00 
145ea     00 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
145ee     FF 00 00 FF 
145f2     00 FF FF FF 
145f6     FF FF FF FF 
145fa     FF FF 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
145fe     00 01 01 01 
14602     01 01 01 01 
14606     01 01 01 01 
1460a     01 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
1460e     FF 00 FF FF 
14612     FF FF FF FF 
14616     FF FF FF FF 
1461a     FF FF FF FF | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1461e     00 00 00 01 
14622     00 00 01 01 
14626     01 00 00 00 
1462a     00 00 00 00 | 	byte	$00, $00, $00, $01, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
1462e     00 00 00 00 
14632     00 00 00 00 | 	byte	$00[8]
14636     FF 00 00 FF 
1463a     00 FF 00 00 
1463e     00 01 01 01 
14642     00 00 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00
14646     7F 7F 7F 7F 
      ...             
14666     7F 7F 7F 7F 
1466a     7F          | 	byte	$7f[37]
1466b     74 5D 79 72 
1466f     4B 54 49 3B 
14673     44 38 1C 25 
14677     27 1A 2F 28 | 	byte	$74, $5d, $79, $72, $4b, $54, $49, $3b, $44, $38, $1c, $25, $27, $1a, $2f, $28
1467b     22 31 18 1E 
1467f     2B 35 32 24 
14683     34 24 18 36 
14687     24 13 2D 2E | 	byte	$22, $31, $18, $1e, $2b, $35, $32, $24, $34, $24, $18, $36, $24, $13, $2d, $2e
1468b     21 25 1D 0E 
1468f     29 28 0E 0A 
14693     08 FB 01 09 
14697     12 ED F1 F7 | 	byte	$21, $25, $1d, $0e, $29, $28, $0e, $0a, $08, $fb, $01, $09, $12, $ed, $f1, $f7
1469b     EA EA EC D6 
1469f     DD E5 DE DD 
146a3     CA C5 D0 C8 
146a7     B6 BF C2 C3 | 	byte	$ea, $ea, $ec, $d6, $dd, $e5, $de, $dd, $ca, $c5, $d0, $c8, $b6, $bf, $c2, $c3
146ab     BC B2 CB B4 
146af     B1 B9 9B A7 
146b3     A0 8B 8F 8D 
146b7     90 95 88 81 | 	byte	$bc, $b2, $cb, $b4, $b1, $b9, $9b, $a7, $a0, $8b, $8f, $8d, $90, $95, $88, $81
146bb     81 83 81 81 
146bf     81 81 81 81 
146c3     87 81 8B 95 
146c7     81 8B 91 87 | 	byte	$81, $83, $81, $81, $81, $81, $81, $81, $87, $81, $8b, $95, $81, $8b, $91, $87
146cb     A5 A2 88 87 
146cf     AF 94 8F 9C 
146d3     88 91 96 93 
146d7     97 99 AA 9B | 	byte	$a5, $a2, $88, $87, $af, $94, $8f, $9c, $88, $91, $96, $93, $97, $99, $aa, $9b
146db     99 AF A4 AF 
146df     B6 AC B3 CE 
146e3     C0 BE D9 CD 
146e7     D7 DC CC CF | 	byte	$99, $af, $a4, $af, $b6, $ac, $b3, $ce, $c0, $be, $d9, $cd, $d7, $dc, $cc, $cf
146eb     E8 D2 D6 DB 
146ef     D8 D0 E7 E2 
146f3     DC E5 F2 EA 
146f7     F3 07 FC 09 | 	byte	$e8, $d2, $d6, $db, $d8, $d0, $e7, $e2, $dc, $e5, $f2, $ea, $f3, $07, $fc, $09
146fb     17 11 13 20 
146ff     24 2F 3F 34 
14703     3F 63 4C 57 
14707     74 6D 7B 7F | 	byte	$17, $11, $13, $20, $24, $2f, $3f, $34, $3f, $63, $4c, $57, $74, $6d, $7b, $7f
1470b     77 7D 7F 7F 
1470f     7F 7F 7F 7F 
14713     7F 7F 7F 7F 
14717     7F 7F 7F 7F | 	byte	$77, $7d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
1471b     7F 7F 7F 7F 
1471f     7F 7F 7F 7F 
14723     7F 7F 7F 7F 
14727     7F 7F 7F 7F 
1472b     7F 7F 7F    | 	byte	$7f[19]
1472e     68 6E 6F 63 
14732     61 5C 46 4A 
14736     49 2E 34 3A 
1473a     1F 25 1C 05 | 	byte	$68, $6e, $6f, $63, $61, $5c, $46, $4a, $49, $2e, $34, $3a, $1f, $25, $1c, $05
1473e     13 19 02 04 
14742     F9 F2 F4 EB 
14746     E0 D3 DA D5 
1474a     B8 BA B2 AB | 	byte	$13, $19, $02, $04, $f9, $f2, $f4, $eb, $e0, $d3, $da, $d5, $b8, $ba, $b2, $ab
1474e     B6 98 87 89 
14752     83 81 81 81 
14756     81 81 81 81 
1475a     81 81 81 81 | 	byte	$b6, $98, $87, $89, $83, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
1475e     81 81 81 81 
      ...             
1478a     81 81 81 81 
1478e     81 81 81 81 | 	byte	$81[52]
14792     87 90 8B 9B 
14796     A4 A7 A9 B7 
1479a     B8 C3 D4 CE 
1479e     D2 E7 E4 EB | 	byte	$87, $90, $8b, $9b, $a4, $a7, $a9, $b7, $b8, $c3, $d4, $ce, $d2, $e7, $e4, $eb
147a2     FC FB 04 10 
147a6     18 13 1F 24 
147aa     27 3B 2D 2F 
147ae     43 3F 46 4A | 	byte	$fc, $fb, $04, $10, $18, $13, $1f, $24, $27, $3b, $2d, $2f, $43, $3f, $46, $4a
147b2     49 4C 52 55 
147b6     4B 51 5F 5D 
147ba     52 55 5B 5C 
147be     65 5A 4F 63 | 	byte	$49, $4c, $52, $55, $4b, $51, $5f, $5d, $52, $55, $5b, $5c, $65, $5a, $4f, $63
147c2     55 4F 53 4C 
147c6     53 53 4B 3E 
147ca     45 41 41 45 
147ce     3F 3F 3B 37 | 	byte	$55, $4f, $53, $4c, $53, $53, $4b, $3e, $45, $41, $41, $45, $3f, $3f, $3b, $37
147d2     36 3C 48 2D 
147d6     2B 37 29 25 
147da     28 21 22 24 
147de     18 10 19 0A | 	byte	$36, $3c, $48, $2d, $2b, $37, $29, $25, $28, $21, $22, $24, $18, $10, $19, $0a
147e2     11 12 00 0A 
147e6     08 FA 01 00 
147ea     FA FF FC F5 
147ee     F7 F7 F2 F6 | 	byte	$11, $12, $00, $0a, $08, $fa, $01, $00, $fa, $ff, $fc, $f5, $f7, $f7, $f2, $f6
147f2     F5 F0 EE EF 
147f6     EF E9 EC E2 
147fa     E2 DF DF D9 
147fe     DF DB CF DB | 	byte	$f5, $f0, $ee, $ef, $ef, $e9, $ec, $e2, $e2, $df, $df, $d9, $df, $db, $cf, $db
14802     DA CC D5 D0 
14806     D4 D8 D0 D4 
1480a     D6 DD E0 DF 
1480e     E2 E6 E8 E8 | 	byte	$da, $cc, $d5, $d0, $d4, $d8, $d0, $d4, $d6, $dd, $e0, $df, $e2, $e6, $e8, $e8
14812     F0 F7 FC 03 
14816     FB 01 12 0E 
1481a     15 11 18 21 
1481e     20 1C 29 2E | 	byte	$f0, $f7, $fc, $03, $fb, $01, $12, $0e, $15, $11, $18, $21, $20, $1c, $29, $2e
14822     29 33 2F 2F 
14826     3D 3F 3A 3D 
1482a     4A 49 4E 53 
1482e     53 57 66 60 | 	byte	$29, $33, $2f, $2f, $3d, $3f, $3a, $3d, $4a, $49, $4e, $53, $53, $57, $66, $60
14832     5F 66 66 67 
14836     72 6E 6D 77 
1483a     6F 6E 7E 74 
1483e     73 7F 76 74 | 	byte	$5f, $66, $66, $67, $72, $6e, $6d, $77, $6f, $6e, $7e, $74, $73, $7f, $76, $74
14842     7C 7B 7A 7A 
14846     78 7A 7F 7E 
1484a     75 7B 7F 7E 
1484e     7F 79 7F 7D | 	byte	$7c, $7b, $7a, $7a, $78, $7a, $7f, $7e, $75, $7b, $7f, $7e, $7f, $79, $7f, $7d
14852     78 77 76 79 
14856     6D 6D 70 6C 
1485a     6D 61 61 5D 
1485e     5F 5B 53 54 | 	byte	$78, $77, $76, $79, $6d, $6d, $70, $6c, $6d, $61, $61, $5d, $5f, $5b, $53, $54
14862     51 4A 4A 41 
14866     3C 35 38 31 
1486a     22 2A 23 10 
1486e     15 0C 05 07 | 	byte	$51, $4a, $4a, $41, $3c, $35, $38, $31, $22, $2a, $23, $10, $15, $0c, $05, $07
14872     00 F0 F6 E8 
14876     E1 E8 DE D9 
1487a     D8 D0 CB C9 
1487e     C7 BD B6 B1 | 	byte	$00, $f0, $f6, $e8, $e1, $e8, $de, $d9, $d8, $d0, $cb, $c9, $c7, $bd, $b6, $b1
14882     A9 A7 A6 98 
14886     90 95 8E 8A 
1488a     87 81 82 82 
1488e     81 81 82 81 | 	byte	$a9, $a7, $a6, $98, $90, $95, $8e, $8a, $87, $81, $82, $82, $81, $81, $82, $81
14892     81 81 81 81 
14896     81 81 81 81 
1489a     81          | 	byte	$81[9]
1489b     82 83 82 82 
1489f     84 85 82 89 
148a3     88 86 87 89 
148a7     88 90 92 8D | 	byte	$82, $83, $82, $82, $84, $85, $82, $89, $88, $86, $87, $89, $88, $90, $92, $8d
148ab     97 9A 92 9F 
148af     9F 9C A7 A4 
148b3     9C AB AD AA 
148b7     B2 B0 AB B7 | 	byte	$97, $9a, $92, $9f, $9f, $9c, $a7, $a4, $9c, $ab, $ad, $aa, $b2, $b0, $ab, $b7
148bb     B7 B5 BA BB 
148bf     BC BC BD C2 
148c3     C0 C5 BE C3 
148c7     C5 C4 C5 C9 | 	byte	$b7, $b5, $ba, $bb, $bc, $bc, $bd, $c2, $c0, $c5, $be, $c3, $c5, $c4, $c5, $c9
148cb     C2 C3 CB C6 
148cf     C7 CE C9 C7 
148d3     C6 D2 D2 CF 
148d7     D1 DD D8 DB | 	byte	$c2, $c3, $cb, $c6, $c7, $ce, $c9, $c7, $c6, $d2, $d2, $cf, $d1, $dd, $d8, $db
148db     DB DB E1 E9 
148df     EA E9 E2 E6 
148e3     F0 EE E7 F1 
148e7     F5 F7 FD F5 | 	byte	$db, $db, $e1, $e9, $ea, $e9, $e2, $e6, $f0, $ee, $e7, $f1, $f5, $f7, $fd, $f5
148eb     F9 09 04 05 
148ef     0E 0E 15 20 
148f3     17 1C 1F 21 
148f7     2B 32 2E 33 | 	byte	$f9, $09, $04, $05, $0e, $0e, $15, $20, $17, $1c, $1f, $21, $2b, $32, $2e, $33
148fb     31 33 3C 37 
148ff     3E 37 34 42 
14903     3C 37 3F 38 
14907     38 38 35 35 | 	byte	$31, $33, $3c, $37, $3e, $37, $34, $42, $3c, $37, $3f, $38, $38, $38, $35, $35
1490b     36 34 35 36 
1490f     33 38 32 33 
14913     37 37 34 3B 
14917     32 37 3B 3E | 	byte	$36, $34, $35, $36, $33, $38, $32, $33, $37, $37, $34, $3b, $32, $37, $3b, $3e
1491b     3C 3A 37 3B 
1491f     39 37 45 3D 
14923     3C 3B 33 3E 
14927     40 3B 3F 3C | 	byte	$3c, $3a, $37, $3b, $39, $37, $45, $3d, $3c, $3b, $33, $3e, $40, $3b, $3f, $3c
1492b     38 40 40 44 
1492f     48 40 3D 4E 
14933     48 4A 4E 44 
14937     47 50 46 49 | 	byte	$38, $40, $40, $44, $48, $40, $3d, $4e, $48, $4a, $4e, $44, $47, $50, $46, $49
1493b     49 45 46 46 
1493f     3D 3B 43 42 
14943     38 38 33 2F 
14947     31 36 24 2A | 	byte	$49, $45, $46, $46, $3d, $3b, $43, $42, $38, $38, $33, $2f, $31, $36, $24, $2a
1494b     27 1F 20 1C 
1494f     12 1E 13 0D 
14953     16 0D 06 09 
14957     08 06 01 01 | 	byte	$27, $1f, $20, $1c, $12, $1e, $13, $0d, $16, $0d, $06, $09, $08, $06, $01, $01
1495b     01 01 FF FC 
1495f     FE 01 FB F8 
14963     00 FE FD 01 
14967     F8 FA 00 F8 | 	byte	$01, $01, $ff, $fc, $fe, $01, $fb, $f8, $00, $fe, $fd, $01, $f8, $fa, $00, $f8
1496b     FF 02 FB 02 
1496f     03 07 04 05 
14973     0A 08 0E 0C 
14977     0E 0F 0C 16 | 	byte	$ff, $02, $fb, $02, $03, $07, $04, $05, $0a, $08, $0e, $0c, $0e, $0f, $0c, $16
1497b     12 10 0A 0F 
1497f     0E 0B 0D 01 
14983     03 04 FB FB 
14987     F3 F1 F2 EB | 	byte	$12, $10, $0a, $0f, $0e, $0b, $0d, $01, $03, $04, $fb, $fb, $f3, $f1, $f2, $eb
1498b     E7 E5 DF DC 
1498f     D6 E1 DA D5 
14993     D5 D1 CD D0 
14997     D0 C9 CB D0 | 	byte	$e7, $e5, $df, $dc, $d6, $e1, $da, $d5, $d5, $d1, $cd, $d0, $d0, $c9, $cb, $d0
1499b     C7 C7 C9 C3 
1499f     C8 C8 C0 BE 
149a3     C5 C4 C4 C0 
149a7     C4 CC C8 C7 | 	byte	$c7, $c7, $c9, $c3, $c8, $c8, $c0, $be, $c5, $c4, $c4, $c0, $c4, $cc, $c8, $c7
149ab     CF D3 D7 DC 
149af     D2 DD E3 EB 
149b3     EC EE F5 FD 
149b7     FD 00 01 01 | 	byte	$cf, $d3, $d7, $dc, $d2, $dd, $e3, $eb, $ec, $ee, $f5, $fd, $fd, $00, $01, $01
149bb     0E 0B 01 0A 
149bf     10 09 0B 11 
149c3     0C 07 10 0B 
149c7     0A 16 11 10 | 	byte	$0e, $0b, $01, $0a, $10, $09, $0b, $11, $0c, $07, $10, $0b, $0a, $16, $11, $10
149cb     10 08 0B 19 
149cf     12 0C 11 13 
149d3     0B 0E 08 0B 
149d7     11 0D 03 06 | 	byte	$10, $08, $0b, $19, $12, $0c, $11, $13, $0b, $0e, $08, $0b, $11, $0d, $03, $06
149db     04 FE 08 02 
149df     F1 F6 00 FD 
149e3     FB F9 F1 F7 
149e7     01 F0 F4 FC | 	byte	$04, $fe, $08, $02, $f1, $f6, $00, $fd, $fb, $f9, $f1, $f7, $01, $f0, $f4, $fc
149eb     F7 F5 FA F6 
149ef     F4 F2 EF F7 
149f3     EF ED EB E6 
149f7     DF E1 D6 DC | 	byte	$f7, $f5, $fa, $f6, $f4, $f2, $ef, $f7, $ef, $ed, $eb, $e6, $df, $e1, $d6, $dc
149fb     D4 CB CE C6 
149ff     C9 CB C2 C1 
14a03     C3 BE BF BA 
14a07     BB BA B8 BB | 	byte	$d4, $cb, $ce, $c6, $c9, $cb, $c2, $c1, $c3, $be, $bf, $ba, $bb, $ba, $b8, $bb
14a0b     B8 B8 C1 C0 
14a0f     B9 BF BA B4 
14a13     C3 C2 BF CB 
14a17     CA C4 CA CE | 	byte	$b8, $b8, $c1, $c0, $b9, $bf, $ba, $b4, $c3, $c2, $bf, $cb, $ca, $c4, $ca, $ce
14a1b     C9 CD DB D9 
14a1f     DA DF DE E9 
14a23     ED E2 EB F7 
14a27     F7 FD 06 FC | 	byte	$c9, $cd, $db, $d9, $da, $df, $de, $e9, $ed, $e2, $eb, $f7, $f7, $fd, $06, $fc
14a2b     06 16 11 17 
14a2f     1F 1D 29 2A 
14a33     27 2C 31 30 
14a37     31 37 38 3D | 	byte	$06, $16, $11, $17, $1f, $1d, $29, $2a, $27, $2c, $31, $30, $31, $37, $38, $3d
14a3b     3E 37 42 46 
14a3f     3E 3A 48 4B 
14a43     47 49 47 4D 
14a47     53 54 55 51 | 	byte	$3e, $37, $42, $46, $3e, $3a, $48, $4b, $47, $49, $47, $4d, $53, $54, $55, $51
14a4b     50 59 5D 56 
14a4f     4E 59 54 4A 
14a53     4B 4A 4F 4F 
14a57     44 43 41 43 | 	byte	$50, $59, $5d, $56, $4e, $59, $54, $4a, $4b, $4a, $4f, $4f, $44, $43, $41, $43
14a5b     44 40 40 40 
14a5f     38 3C 3A 36 
14a63     30 30 32 2D 
14a67     24 23 24 19 | 	byte	$44, $40, $40, $40, $38, $3c, $3a, $36, $30, $30, $32, $2d, $24, $23, $24, $19
14a6b     18 18 08 07 
14a6f     03 00 FD F1 
14a73     EA EC EB E4 
14a77     DB DF DA D2 | 	byte	$18, $18, $08, $07, $03, $00, $fd, $f1, $ea, $ec, $eb, $e4, $db, $df, $da, $d2
14a7b     D7 C9 C3 C1 
14a7f     BC BC B9 AF 
14a83     AB AE B0 A1 
14a87     A6 AB A4 A1 | 	byte	$d7, $c9, $c3, $c1, $bc, $bc, $b9, $af, $ab, $ae, $b0, $a1, $a6, $ab, $a4, $a1
14a8b     9E 9C 9E 9F 
14a8f     9B 9D 99 A3 
14a93     A6 A2 A6 AB 
14a97     AB B3 B1 AC | 	byte	$9e, $9c, $9e, $9f, $9b, $9d, $99, $a3, $a6, $a2, $a6, $ab, $ab, $b3, $b1, $ac
14a9b     BA C2 C4 BE 
14a9f     C9 D2 D1 CE 
14aa3     D9 DC DE E9 
14aa7     E0 E0 E9 EA | 	byte	$ba, $c2, $c4, $be, $c9, $d2, $d1, $ce, $d9, $dc, $de, $e9, $e0, $e0, $e9, $ea
14aab     F4 F5 F0 F5 
14aaf     F9 FE 01 07 
14ab3     0A 0B 0D 11 
14ab7     15 19 25 1E | 	byte	$f4, $f5, $f0, $f5, $f9, $fe, $01, $07, $0a, $0b, $0d, $11, $15, $19, $25, $1e
14abb     25 2F 29 2B 
14abf     2F 33 3A 3F 
14ac3     3B 3C 41 45 
14ac7     43 47 47 4A | 	byte	$25, $2f, $29, $2b, $2f, $33, $3a, $3f, $3b, $3c, $41, $45, $43, $47, $47, $4a
14acb     4E 57 51 53 
14acf     59 55 62 6A 
14ad3     5A 63 6D 69 
14ad7     6B 72 6E 70 | 	byte	$4e, $57, $51, $53, $59, $55, $62, $6a, $5a, $63, $6d, $69, $6b, $72, $6e, $70
14adb     6C 70 6F 70 
14adf     6D 6D 6E 6B 
14ae3     69 69 69 5E 
14ae7     67 68 5F 63 | 	byte	$6c, $70, $6f, $70, $6d, $6d, $6e, $6b, $69, $69, $69, $5e, $67, $68, $5f, $63
14aeb     60 55 62 56 
14aef     4E 52 4B 48 
14af3     42 41 41 36 
14af7     35 37 31 2E | 	byte	$60, $55, $62, $56, $4e, $52, $4b, $48, $42, $41, $41, $36, $35, $37, $31, $2e
14afb     25 1F 20 1D 
14aff     17 13 10 10 
14b03     08 01 02 06 
14b07     FC FD F4 E9 | 	byte	$25, $1f, $20, $1d, $17, $13, $10, $10, $08, $01, $02, $06, $fc, $fd, $f4, $e9
14b0b     F2 EC E5 E0 
14b0f     D2 D9 D6 D2 
14b13     CF CD CC CA 
14b17     C7 C9 C7 C7 | 	byte	$f2, $ec, $e5, $e0, $d2, $d9, $d6, $d2, $cf, $cd, $cc, $ca, $c7, $c9, $c7, $c7
14b1b     C9 CA C7 CC 
14b1f     CA CB CE CC 
14b23     CC CE CE CD 
14b27     D0 CB CB CC | 	byte	$c9, $ca, $c7, $cc, $ca, $cb, $ce, $cc, $cc, $ce, $ce, $cd, $d0, $cb, $cb, $cc
14b2b     C9 D0 CC C6 
14b2f     CB CA C9 D0 
14b33     CF CD CD CD 
14b37     D2 D2 CB CF | 	byte	$c9, $d0, $cc, $c6, $cb, $ca, $c9, $d0, $cf, $cd, $cd, $cd, $d2, $d2, $cb, $cf
14b3b     D1 CA D2 D0 
14b3f     CE D5 D3 D3 
14b43     D4 CC CF D3 
14b47     D1 D0 D0 CC | 	byte	$d1, $ca, $d2, $d0, $ce, $d5, $d3, $d3, $d4, $cc, $cf, $d3, $d1, $d0, $d0, $cc
14b4b     CE CA CC CA 
14b4f     CD D0 C7 CF 
14b53     CF C9 C6 CE 
14b57     CD D0 CF C9 | 	byte	$ce, $ca, $cc, $ca, $cd, $d0, $c7, $cf, $cf, $c9, $c6, $ce, $cd, $d0, $cf, $c9
14b5b     CC D8 D1 D1 
14b5f     D2 D1 D7 DD 
14b63     D8 D7 DA DD 
14b67     D4 D8 D3 D5 | 	byte	$cc, $d8, $d1, $d1, $d2, $d1, $d7, $dd, $d8, $d7, $da, $dd, $d4, $d8, $d3, $d5
14b6b     DD D4 C9 CF 
14b6f     D3 D1 D0 D0 
14b73     CF D0 D0 CF 
14b77     D2 D6 D5 D5 | 	byte	$dd, $d4, $c9, $cf, $d3, $d1, $d0, $d0, $cf, $d0, $d0, $cf, $d2, $d6, $d5, $d5
14b7b     DA D5 D7 DF 
14b7f     DD DD E3 DD 
14b83     E2 E7 DB DF 
14b87     E6 DE DB DD | 	byte	$da, $d5, $d7, $df, $dd, $dd, $e3, $dd, $e2, $e7, $db, $df, $e6, $de, $db, $dd
14b8b     DD DD DD DE 
14b8f     E0 DB E1 E0 
14b93     E3 E6 E4 E8 
14b97     EA ED F1 F2 | 	byte	$dd, $dd, $dd, $de, $e0, $db, $e1, $e0, $e3, $e6, $e4, $e8, $ea, $ed, $f1, $f2
14b9b     F2 F8 F8 F8 
14b9f     FE 00 00 0C 
14ba3     0A 0C 0D 0F 
14ba7     17 16 14 19 | 	byte	$f2, $f8, $f8, $f8, $fe, $00, $00, $0c, $0a, $0c, $0d, $0f, $17, $16, $14, $19
14bab     1A 1F 21 1E 
14baf     23 29 2A 2B 
14bb3     25 2D 36 2F 
14bb7     32 33 32 3A | 	byte	$1a, $1f, $21, $1e, $23, $29, $2a, $2b, $25, $2d, $36, $2f, $32, $33, $32, $3a
14bbb     39 34 3D 41 
14bbf     3C 3E 3C 3E 
14bc3     4A 45 3D 43 
14bc7     45 43 44 40 | 	byte	$39, $34, $3d, $41, $3c, $3e, $3c, $3e, $4a, $45, $3d, $43, $45, $43, $44, $40
14bcb     38 3B 3F 37 
14bcf     39 38 30 33 
14bd3     30 2C 32 2D 
14bd7     27 2D 2C 2D | 	byte	$38, $3b, $3f, $37, $39, $38, $30, $33, $30, $2c, $32, $2d, $27, $2d, $2c, $2d
14bdb     30 2F 2A 31 
14bdf     31 2C 33 33 
14be3     2D 31 33 2D 
14be7     2C 2F 2F 2F | 	byte	$30, $2f, $2a, $31, $31, $2c, $33, $33, $2d, $31, $33, $2d, $2c, $2f, $2f, $2f
14beb     30 23 28 28 
14bef     23 2D 2B 22 
14bf3     27 26 23 27 
14bf7     28 29 2A 28 | 	byte	$30, $23, $28, $28, $23, $2d, $2b, $22, $27, $26, $23, $27, $28, $29, $2a, $28
14bfb     23 28 2B 2F 
14bff     2C 29 28 2A 
14c03     26 25 26 24 
14c07     21 23 20 18 | 	byte	$23, $28, $2b, $2f, $2c, $29, $28, $2a, $26, $25, $26, $24, $21, $23, $20, $18
14c0b     1F 1E 1A 17 
14c0f     17 0D 12 12 
14c13     06 0D 12 09 
14c17     01 06 08 09 | 	byte	$1f, $1e, $1a, $17, $17, $0d, $12, $12, $06, $0d, $12, $09, $01, $06, $08, $09
14c1b     05 04 07 09 
14c1f     09 09 06 08 
14c23     0D 09 0C 0A 
14c27     07 0D 0F 09 | 	byte	$05, $04, $07, $09, $09, $09, $06, $08, $0d, $09, $0c, $0a, $07, $0d, $0f, $09
14c2b     06 0B 09 08 
14c2f     06 06 08 09 
14c33     02 02 08 08 
14c37     05 0B 04 03 | 	byte	$06, $0b, $09, $08, $06, $06, $08, $09, $02, $02, $08, $08, $05, $0b, $04, $03
14c3b     09 07 03 05 
14c3f     08 04 04 FC 
14c43     FA 00 FC F5 
14c47     F3 F1 F1 ED | 	byte	$09, $07, $03, $05, $08, $04, $04, $fc, $fa, $00, $fc, $f5, $f3, $f1, $f1, $ed
14c4b     E5 EA EB E4 
14c4f     E2 E0 DC DF 
14c53     DE DA D9 D7 
14c57     D5 D5 D5 D2 | 	byte	$e5, $ea, $eb, $e4, $e2, $e0, $dc, $df, $de, $da, $d9, $d7, $d5, $d5, $d5, $d2
14c5b     D0 CE CC CB 
14c5f     C9 C9 C7 C5 
14c63     C3 C2 C4 C3 
14c67     C3 C4 C0 C4 | 	byte	$d0, $ce, $cc, $cb, $c9, $c9, $c7, $c5, $c3, $c2, $c4, $c3, $c3, $c4, $c0, $c4
14c6b     C2 C3 C4 C1 
14c6f     C1 C2 C1 BF 
14c73     BD C0 BF BE 
14c77     BB BC BC BA | 	byte	$c2, $c3, $c4, $c1, $c1, $c2, $c1, $bf, $bd, $c0, $bf, $be, $bb, $bc, $bc, $ba
14c7b     C1 C0 B8 BD 
14c7f     C2 C3 C2 C2 
14c83     BD C4 C9 C6 
14c87     C4 C1 C6 C6 | 	byte	$c1, $c0, $b8, $bd, $c2, $c3, $c2, $c2, $bd, $c4, $c9, $c6, $c4, $c1, $c6, $c6
14c8b     C7 C4 C2 C6 
14c8f     C9 C4 C7 C5 
14c93     C7 CC CA C7 
14c97     CE D0 CF D8 | 	byte	$c7, $c4, $c2, $c6, $c9, $c4, $c7, $c5, $c7, $cc, $ca, $c7, $ce, $d0, $cf, $d8
14c9b     D8 D9 DB DA 
14c9f     DF E4 E2 E6 
14ca3     E6 E8 E8 EB 
14ca7     F0 F1 F3 F9 | 	byte	$d8, $d9, $db, $da, $df, $e4, $e2, $e6, $e6, $e8, $e8, $eb, $f0, $f1, $f3, $f9
14cab     FC FD 02 05 
14caf     07 10 0E 11 
14cb3     18 1A 1F 1F 
14cb7     1E 27 28 27 | 	byte	$fc, $fd, $02, $05, $07, $10, $0e, $11, $18, $1a, $1f, $1f, $1e, $27, $28, $27
14cbb     27 24 26 2D 
14cbf     2F 2B 27 2C 
14cc3     2F 2C 2D 30 
14cc7     2F 31 35 35 | 	byte	$27, $24, $26, $2d, $2f, $2b, $27, $2c, $2f, $2c, $2d, $30, $2f, $31, $35, $35
14ccb     35 39 38 39 
14ccf     3B 3A 38 3D 
14cd3     3C 38 38 3A 
14cd7     38 3A 33 36 | 	byte	$35, $39, $38, $39, $3b, $3a, $38, $3d, $3c, $38, $38, $3a, $38, $3a, $33, $36
14cdb     3A 36 37 36 
14cdf     32 35 37 37 
14ce3     32 31 34 33 
14ce7     35 34 31 32 | 	byte	$3a, $36, $37, $36, $32, $35, $37, $37, $32, $31, $34, $33, $35, $34, $31, $32
14ceb     33 2D 2F 2E 
14cef     2B 2D 29 26 
14cf3     2C 27 23 2B 
14cf7     21 1F 23 1E | 	byte	$33, $2d, $2f, $2e, $2b, $2d, $29, $26, $2c, $27, $23, $2b, $21, $1f, $23, $1e
14cfb     1C 20 1A 19 
14cff     1B 18 14 19 
14d03     16 0F 13 0F 
14d07     0B 0E 0E 07 | 	byte	$1c, $20, $1a, $19, $1b, $18, $14, $19, $16, $0f, $13, $0f, $0b, $0e, $0e, $07
14d0b     0A 10 08 05 
14d0f     0A 06 08 0E 
14d13     08 07 08 06 
14d17     06 06 01 02 | 	byte	$0a, $10, $08, $05, $0a, $06, $08, $0e, $08, $07, $08, $06, $06, $06, $01, $02
14d1b     02 FC FB FA 
14d1f     FA FA F5 F2 
14d23     F0 F3 F1 EA 
14d27     E8 E7 E8 E6 | 	byte	$02, $fc, $fb, $fa, $fa, $fa, $f5, $f2, $f0, $f3, $f1, $ea, $e8, $e7, $e8, $e6
14d2b     E4 E5 E0 E2 
14d2f     E3 E0 DF E0 
14d33     DE DC D8 D7 
14d37     DA DA D6 D6 | 	byte	$e4, $e5, $e0, $e2, $e3, $e0, $df, $e0, $de, $dc, $d8, $d7, $da, $da, $d6, $d6
14d3b     D6 D4 D8 D7 
14d3f     D5 D8 D9 D8 
14d43     D5 D9 D9 D8 
14d47     DA D9 DB DF | 	byte	$d6, $d4, $d8, $d7, $d5, $d8, $d9, $d8, $d5, $d9, $d9, $d8, $da, $d9, $db, $df
14d4b     DC DE E0 E1 
14d4f     E2 E5 E3 E1 
14d53     E5 E7 E2 E5 
14d57     E7 E9 E9 E6 | 	byte	$dc, $de, $e0, $e1, $e2, $e5, $e3, $e1, $e5, $e7, $e2, $e5, $e7, $e9, $e9, $e6
14d5b     EA EB ED ED 
14d5f     EE EF ED ED 
14d63     EF F2 F0 F0 
14d67     F1 F0 F0 F6 | 	byte	$ea, $eb, $ed, $ed, $ee, $ef, $ed, $ed, $ef, $f2, $f0, $f0, $f1, $f0, $f0, $f6
14d6b     F5 F9 FA FA 
14d6f     F9 FB FE FE 
14d73     00 01 00 01 
14d77     04 06 08 08 | 	byte	$f5, $f9, $fa, $fa, $f9, $fb, $fe, $fe, $00, $01, $00, $01, $04, $06, $08, $08
14d7b     09 0B 0E 0B 
14d7f     11 0F 0D 13 
14d83     10 11 14 15 
14d87     15 16 17 17 | 	byte	$09, $0b, $0e, $0b, $11, $0f, $0d, $13, $10, $11, $14, $15, $15, $16, $17, $17
14d8b     18 1C 1B 1B 
14d8f     1F 20 1F 1F 
14d93     20 20 23 20 
14d97     1E 22 21 1F | 	byte	$18, $1c, $1b, $1b, $1f, $20, $1f, $1f, $20, $20, $23, $20, $1e, $22, $21, $1f
14d9b     1D 1C 1B 1A 
14d9f     16 16 12 0E 
14da3     0D 0F 0C 0B 
14da7     07 04 03 03 | 	byte	$1d, $1c, $1b, $1a, $16, $16, $12, $0e, $0d, $0f, $0c, $0b, $07, $04, $03, $03
14dab     03 01 FE FD 
14daf     FE FB FB F8 
14db3     F8 FA F7 F7 
14db7     F6 F5 F3 F2 | 	byte	$03, $01, $fe, $fd, $fe, $fb, $fb, $f8, $f8, $fa, $f7, $f7, $f6, $f5, $f3, $f2
14dbb     F3 F1 F1 F2 
14dbf     F0 EF F0 EF 
14dc3     F0 F3 F5 F3 
14dc7     F3 F3 F5 F9 | 	byte	$f3, $f1, $f1, $f2, $f0, $ef, $f0, $ef, $f0, $f3, $f5, $f3, $f3, $f3, $f5, $f9
14dcb     F7 F9 FA FA 
14dcf     FD FE FD FD 
14dd3     FE FD FE 00 
14dd7     FD FE 00 00 | 	byte	$f7, $f9, $fa, $fa, $fd, $fe, $fd, $fd, $fe, $fd, $fe, $00, $fd, $fe, $00, $00
14ddb     FD FE 00 FF 
14ddf     00 FF 00 02 
14de3     02 01 01 05 
14de7     05 08 07 09 | 	byte	$fd, $fe, $00, $ff, $00, $ff, $00, $02, $02, $01, $01, $05, $05, $08, $07, $09
14deb     0B 09 09 0C 
14def     0F 12 11 10 
14df3     11 16 15 16 
14df7     19 16 19 1B | 	byte	$0b, $09, $09, $0c, $0f, $12, $11, $10, $11, $16, $15, $16, $19, $16, $19, $1b
14dfb     19 1A 1B 1B 
14dff     1A 19 17 16 
14e03     1C 1A 17 16 
14e07     14 12 13 12 | 	byte	$19, $1a, $1b, $1b, $1a, $19, $17, $16, $1c, $1a, $17, $16, $14, $12, $13, $12
14e0b     0F 10 0C 09 
14e0f     0B 08 05 06 
14e13     06 03 03 05 
14e17     00 FC FE FB | 	byte	$0f, $10, $0c, $09, $0b, $08, $05, $06, $06, $03, $03, $05, $00, $fc, $fe, $fb
14e1b     FB F7 F3 F2 
14e1f     F2 F2 EB EA 
14e23     EB E9 E6 E4 
14e27     E6 E6 E5 E2 | 	byte	$fb, $f7, $f3, $f2, $f2, $f2, $eb, $ea, $eb, $e9, $e6, $e4, $e6, $e6, $e5, $e2
14e2b     DF E1 E2 E0 
14e2f     DF DF E0 E3 
14e33     E2 DF E1 E2 
14e37     E0 E1 E1 DF | 	byte	$df, $e1, $e2, $e0, $df, $df, $e0, $e3, $e2, $df, $e1, $e2, $e0, $e1, $e1, $df
14e3b     E2 E5 E2 E0 
14e3f     E3 E5 E5 E5 
14e43     E5 E6 E9 E9 
14e47     E7 E9 EA EC | 	byte	$e2, $e5, $e2, $e0, $e3, $e5, $e5, $e5, $e5, $e6, $e9, $e9, $e7, $e9, $ea, $ec
14e4b     EB E9 EC EB 
14e4f     EA EF EC ED 
14e53     EE F0 F2 F2 
14e57     F0 EE F2 F3 | 	byte	$eb, $e9, $ec, $eb, $ea, $ef, $ec, $ed, $ee, $f0, $f2, $f2, $f0, $ee, $f2, $f3
14e5b     F5 F4 F3 F5 
14e5f     F7 FB FA F8 
14e63     F9 F8 FB FC 
14e67     F8 F9 FE FC | 	byte	$f5, $f4, $f3, $f5, $f7, $fb, $fa, $f8, $f9, $f8, $fb, $fc, $f8, $f9, $fe, $fc
14e6b     FB FD FB FD 
14e6f     02 00 00 03 
14e73     02 03 05 04 
14e77     05 09 08 05 | 	byte	$fb, $fd, $fb, $fd, $02, $00, $00, $03, $02, $03, $05, $04, $05, $09, $08, $05
14e7b     08 0A 0B 0B 
14e7f     0B 0B 0C 10 
14e83     0B 0B 12 0D 
14e87     0D 12 10 11 | 	byte	$08, $0a, $0b, $0b, $0b, $0b, $0c, $10, $0b, $0b, $12, $0d, $0d, $12, $10, $11
14e8b     14 11 13 14 
14e8f     13 13 12 11 
14e93     15 18 13 11 
14e97     12 14 14 12 | 	byte	$14, $11, $13, $14, $13, $13, $12, $11, $15, $18, $13, $11, $12, $14, $14, $12
14e9b     0F 10 11 11 
14e9f     11 10 10 0F 
14ea3     10 10 0E 10 
14ea7     11 10 10 0C | 	byte	$0f, $10, $11, $11, $11, $10, $10, $0f, $10, $10, $0e, $10, $11, $10, $10, $0c
14eab     0E 12 10 0B 
14eaf     0C 0C 0B 0C 
14eb3     09 08 08 06 
14eb7     07 07 05 06 | 	byte	$0e, $12, $10, $0b, $0c, $0c, $0b, $0c, $09, $08, $08, $06, $07, $07, $05, $06
14ebb     04 01 02 02 
14ebf     02 03 00 FF 
14ec3     00 00 FE FF 
14ec7     FF FE FD FD | 	byte	$04, $01, $02, $02, $02, $03, $00, $ff, $00, $00, $fe, $ff, $ff, $fe, $fd, $fd
14ecb     FB FA FA F7 
14ecf     F7 F6 F5 F4 
14ed3     F4 F0 ED EF 
14ed7     EC EB ED ED | 	byte	$fb, $fa, $fa, $f7, $f7, $f6, $f5, $f4, $f4, $f0, $ed, $ef, $ec, $eb, $ed, $ed
14edb     EA EA E9 E9 
14edf     E9 EC ED EB 
14ee3     EC EA EC F0 
14ee7     EF EE EF F1 | 	byte	$ea, $ea, $e9, $e9, $e9, $ec, $ed, $eb, $ec, $ea, $ec, $f0, $ef, $ee, $ef, $f1
14eeb     F1 F3 F7 F4 
14eef     F2 F4 F5 F8 
14ef3     F7 F8 F9 F8 
14ef7     FA FD FB FD | 	byte	$f1, $f3, $f7, $f4, $f2, $f4, $f5, $f8, $f7, $f8, $f9, $f8, $fa, $fd, $fb, $fd
14efb     01 03 03 05 
14eff     05 08 0C 0B 
14f03     0D 10 11 11 
14f07     13 15 15 17 | 	byte	$01, $03, $03, $05, $05, $08, $0c, $0b, $0d, $10, $11, $11, $13, $15, $15, $17
14f0b     18 16 15 17 
14f0f     18 18 16 15 
14f13     18 18 16 15 
14f17     16 18 18 17 | 	byte	$18, $16, $15, $17, $18, $18, $16, $15, $18, $18, $16, $15, $16, $18, $18, $17
14f1b     15 17 17 17 
14f1f     1A 19 1A 1B 
14f23     19 18 19 1B 
14f27     1B 19 19 1B | 	byte	$15, $17, $17, $17, $1a, $19, $1a, $1b, $19, $18, $19, $1b, $1b, $19, $19, $1b
14f2b     1B 19 19 19 
14f2f     1B 19 18 18 
14f33     19 18 18 18 
14f37     17 17 17 15 | 	byte	$1b, $19, $19, $19, $1b, $19, $18, $18, $19, $18, $18, $18, $17, $17, $17, $15
14f3b     15 15 13 14 
14f3f     15 13 12 10 
14f43     11 0F 0D 0B 
14f47     08 08 05 03 | 	byte	$15, $15, $13, $14, $15, $13, $12, $10, $11, $0f, $0d, $0b, $08, $08, $05, $03
14f4b     02 01 FE FC 
14f4f     FA F7 F4 F5 
14f53     F3 F0 EC E9 
14f57     EC EB E9 E7 | 	byte	$02, $01, $fe, $fc, $fa, $f7, $f4, $f5, $f3, $f0, $ec, $e9, $ec, $eb, $e9, $e7
14f5b     E6 E3 E5 E6 
14f5f     E3 E1 E0 DF 
14f63     E0 DE DA DB 
14f67     DE DB D8 D9 | 	byte	$e6, $e3, $e5, $e6, $e3, $e1, $e0, $df, $e0, $de, $da, $db, $de, $db, $d8, $d9
14f6b     D9 DA DB DA 
14f6f     D8 D9 DA DC 
14f73     DD DC DD DF 
14f77     E2 E1 E2 E4 | 	byte	$d9, $da, $db, $da, $d8, $d9, $da, $dc, $dd, $dc, $dd, $df, $e2, $e1, $e2, $e4
14f7b     E5 E7 E8 E8 
14f7f     E9 E9 EB EB 
14f83     EB EB EB ED 
14f87     EC ED EE ED | 	byte	$e5, $e7, $e8, $e8, $e9, $e9, $eb, $eb, $eb, $eb, $eb, $ed, $ec, $ed, $ee, $ed
14f8b     EF F0 F1 F2 
14f8f     F3 F4 F4 F7 
14f93     F6 F6 F8 FC 
14f97     FD FB FE FE | 	byte	$ef, $f0, $f1, $f2, $f3, $f4, $f4, $f7, $f6, $f6, $f8, $fc, $fd, $fb, $fe, $fe
14f9b     00 02 00 00 
14f9f     03 03 04 05 
14fa3     02 03 07 06 
14fa7     08 08 07 08 | 	byte	$00, $02, $00, $00, $03, $03, $04, $05, $02, $03, $07, $06, $08, $08, $07, $08
14fab     0B 0C 0C 0E 
14faf     0F 0E 0F 11 
14fb3     0F 11 14 11 
14fb7     10 13 13 12 | 	byte	$0b, $0c, $0c, $0e, $0f, $0e, $0f, $11, $0f, $11, $14, $11, $10, $13, $13, $12
14fbb     13 11 12 12 
14fbf     10 11 0F 0F 
14fc3     10 0E 0C 0B 
14fc7     0C 0C 0B 0B | 	byte	$13, $11, $12, $12, $10, $11, $0f, $0f, $10, $0e, $0c, $0b, $0c, $0c, $0b, $0b
14fcb     09 07 08 08 
14fcf     06 05 03 01 
14fd3     02 01 01 02 
14fd7     00 00 01 FF | 	byte	$09, $07, $08, $08, $06, $05, $03, $01, $02, $01, $01, $02, $00, $00, $01, $ff
14fdb     FE FF 00 00 
14fdf     FD FC FC FA 
14fe3     FB FA F8 F9 
14fe7     F8 F7 F9 F9 | 	byte	$fe, $ff, $00, $00, $fd, $fc, $fc, $fa, $fb, $fa, $f8, $f9, $f8, $f7, $f9, $f9
14feb     F7 F6 FA FA 
14fef     FA F9 FA FB 
14ff3     FA FC FD FB 
14ff7     FC FD FC FC | 	byte	$f7, $f6, $fa, $fa, $fa, $f9, $fa, $fb, $fa, $fc, $fd, $fb, $fc, $fd, $fc, $fc
14ffb     FD FD FC FB 
14fff     FA F9 FB FC 
15003     FB F9 FA FB 
15007     FB FC FC FB | 	byte	$fd, $fd, $fc, $fb, $fa, $f9, $fb, $fc, $fb, $f9, $fa, $fb, $fb, $fc, $fc, $fb
1500b     FD FE FD FC 
1500f     FD FE 00 FF 
15013     FD FE FE FE 
15017     FC FC FC FC | 	byte	$fd, $fe, $fd, $fc, $fd, $fe, $00, $ff, $fd, $fe, $fe, $fe, $fc, $fc, $fc, $fc
1501b     FC FB F9 F9 
1501f     F9 F8 F9 FA 
15023     F8 F9 FB F9 
15027     FA FC FA FB | 	byte	$fc, $fb, $f9, $f9, $f9, $f8, $f9, $fa, $f8, $f9, $fb, $f9, $fa, $fc, $fa, $fb
1502b     FD FA FB FC 
1502f     FB FC FD FA 
15033     FB FC FB FA 
15037     FA FA FA FB | 	byte	$fd, $fa, $fb, $fc, $fb, $fc, $fd, $fa, $fb, $fc, $fb, $fa, $fa, $fa, $fa, $fb
1503b     FB F9 F9 FA 
1503f     F9 FB FC F9 
15043     F9 FA FB FD 
15047     FB FB FD FD | 	byte	$fb, $f9, $f9, $fa, $f9, $fb, $fc, $f9, $f9, $fa, $fb, $fd, $fb, $fb, $fd, $fd
1504b     FC FD 00 00 
1504f     00 00 00 01 
15053     03 03 03 05 
15057     04 03 05 06 | 	byte	$fc, $fd, $00, $00, $00, $00, $00, $01, $03, $03, $03, $05, $04, $03, $05, $06
1505b     05 07 07 05 
1505f     07 08 07 06 
15063     06 09 09 08 
15067     07 07 0A 0A | 	byte	$05, $07, $07, $05, $07, $08, $07, $06, $06, $09, $09, $08, $07, $07, $0a, $0a
1506b     0B 0B 0B 0C 
1506f     0F 0B 0B 0E 
15073     0E 0F 10 0C 
15077     0D 0F 0C 0C | 	byte	$0b, $0b, $0b, $0c, $0f, $0b, $0b, $0e, $0e, $0f, $10, $0c, $0d, $0f, $0c, $0c
1507b     0C 0B 0A 0B 
1507f     09 09 0B 0A 
15083     0A 09 08 09 
15087     0B 0A 09 09 | 	byte	$0c, $0b, $0a, $0b, $09, $09, $0b, $0a, $0a, $09, $08, $09, $0b, $0a, $09, $09
1508b     08 07 0B 09 
1508f     07 08 08 07 
15093     08 07 04 05 
15097     05 03 03 02 | 	byte	$08, $07, $0b, $09, $07, $08, $08, $07, $08, $07, $04, $05, $05, $03, $03, $02
1509b     02 02 02 01 
1509f     00 00 02 01 
150a3     00 01 01 01 
150a7     02 01 00 01 | 	byte	$02, $02, $02, $01, $00, $00, $02, $01, $00, $01, $01, $01, $02, $01, $00, $01
150ab     02 03 02 01 
150af     02 04 04 03 
150b3     03 02 02 03 
150b7     04 03 02 02 | 	byte	$02, $03, $02, $01, $02, $04, $04, $03, $03, $02, $02, $03, $04, $03, $02, $02
150bb     01 02 02 01 
150bf     01 00 00 00 
150c3     00 FE 00 00 
150c7     00 FF FC FC | 	byte	$01, $02, $02, $01, $01, $00, $00, $00, $00, $fe, $00, $00, $00, $ff, $fc, $fc
150cb     FF FF FD FD 
150cf     FC FD FD FB 
150d3     FB FC FC FB 
150d7     FA F9 FB FC | 	byte	$ff, $ff, $fd, $fd, $fc, $fd, $fd, $fb, $fb, $fc, $fc, $fb, $fa, $f9, $fb, $fc
150db     FB FA FB FA 
150df     FA FA FA FA 
150e3     FB FA F9 F9 
150e7     F8 F8 F8 F8 | 	byte	$fb, $fa, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f8
150eb     F7 F8 F6 F6 
150ef     F6 F5 F6 F6 
150f3     F5 F5 F7 F5 
150f7     F4 F6 F6 F5 | 	byte	$f7, $f8, $f6, $f6, $f6, $f5, $f6, $f6, $f5, $f5, $f7, $f5, $f4, $f6, $f6, $f5
150fb     F6 F4 F6 F6 
150ff     F5 F5 F5 F5 
15103     F7 F7 F6 F5 
15107     F6 F6 F7 F7 | 	byte	$f6, $f4, $f6, $f6, $f5, $f5, $f5, $f5, $f7, $f7, $f6, $f5, $f6, $f6, $f7, $f7
1510b     F6 F6 F7 F7 
1510f     F7 F8 F7 F7 
15113     F9 FA F9 FA 
15117     FB FC FD FB | 	byte	$f6, $f6, $f7, $f7, $f7, $f8, $f7, $f7, $f9, $fa, $f9, $fa, $fb, $fc, $fd, $fb
1511b     FC FE FF 00 
1511f     00 FF 00 00 
15123     01 02 03 02 
15127     04 06 06 06 | 	byte	$fc, $fe, $ff, $00, $00, $ff, $00, $00, $01, $02, $03, $02, $04, $06, $06, $06
1512b     07 08 0A 09 
1512f     09 0A 0B 0C 
15133     0C 0C 0C 0E 
15137     0F 0E 0C 0D | 	byte	$07, $08, $0a, $09, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0e, $0f, $0e, $0c, $0d
1513b     0F 0F 0F 0E 
1513f     0F 0F 0F 0D 
15143     0E 0D 0D 0D 
15147     0B 0B 0A 09 | 	byte	$0f, $0f, $0f, $0e, $0f, $0f, $0f, $0d, $0e, $0d, $0d, $0d, $0b, $0b, $0a, $09
1514b     09 08 07 07 
1514f     06 05 04 04 
15153     03 02 01 01 
15157     00 00 FF 00 | 	byte	$09, $08, $07, $07, $06, $05, $04, $04, $03, $02, $01, $01, $00, $00, $ff, $00
1515b     FE FD FD FD 
1515f     FD FD FB FB 
15163     FB FB FA F9 
15167     FA FA F9 F9 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fb, $fb, $fb, $fb, $fa, $f9, $fa, $fa, $f9, $f9
1516b     F8 F8 F8 F9 
1516f     FA F9 F8 F9 
15173     F8 F7 F8 F9 
15177     F7 F7 F7 F7 | 	byte	$f8, $f8, $f8, $f9, $fa, $f9, $f8, $f9, $f8, $f7, $f8, $f9, $f7, $f7, $f7, $f7
1517b     F8 F7 F7 F7 
1517f     F7 F6 F7 F6 
15183     F7 F8 F7 F7 
15187     F7 F6 F7 F8 | 	byte	$f8, $f7, $f7, $f7, $f7, $f6, $f7, $f6, $f7, $f8, $f7, $f7, $f7, $f6, $f7, $f8
1518b     F7 F6 F7 F6 
1518f     F5 F5 F4 F4 
15193     F4 F3 F3 F1 
15197     F2 F2 F3 F2 | 	byte	$f7, $f6, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f3, $f1, $f2, $f2, $f3, $f2
1519b     F1 F1 F1 F2 
1519f     F3 F3 F2 F3 
151a3     F4 F3 F4 F4 
151a7     F5 00 00 00 | 	byte	$f1, $f1, $f1, $f2, $f3, $f3, $f2, $f3, $f4, $f3, $f4, $f4, $f5, $00, $00, $00
151ab     00 E4 B1 EA 
151af     80 F5 0A 0B 
151b3     02 15 9B 80 
151b7     40 D6 30 57 | 	byte	$00, $e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57
151bb     00 F2 58 E1 
151bf     33 0F 9B 7C 
151c3     41 90 94 3A 
151c7     AA 9D 0A AA | 	byte	$00, $f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa
151cb     E7 82 D2 E5 
151cf     B0 C0 DD C6 
151d3     F1 E9 08 06 
151d7     E3 F2 78 6C | 	byte	$e7, $82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c
151db     AE 17 7E 48 
151df     62 44 F7 19 
151e3     80 2C 64 3A 
151e7     34 67 0D 1D | 	byte	$ae, $17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d
151eb     4A D3 08 2C 
151ef     1B EE 3C FC 
151f3     B1 F3 DF F0 
151f7     DD BD DC CF | 	byte	$4a, $d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf
151fb     D5 CC D6 C3 
151ff     A7 EC EB 99 
15203     A5 E2 E3 B9 
15207     9A D3 10 E6 | 	byte	$d5, $cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6
1520b     94 E3 25 B7 
1520f     BA 31 B5 D9 
15213     21 DF 08 09 
15217     50 1B EA 5A | 	byte	$94, $e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a
1521b     28 14 53 51 
1521f     21 49 1A 27 
15223     65 55 3F 63 
15227     26 1C 38 43 | 	byte	$28, $14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43
1522b     3F 38 2C 1A 
1522f     27 20 22 36 
15233     47 22 23 F9 
15237     0E 09 0B 48 | 	byte	$3f, $38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48
1523b     CD FD 25 EA 
1523f     0B F8 06 21 
15243     DA 28 F5 B4 
15247     E3 0A F5 E0 | 	byte	$cd, $fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0
1524b     F4 F6 F0 AC 
1524f     D8 EA E4 CF 
15253     D5 DF B9 D3 
15257     C9 C5 C0 C4 | 	byte	$f4, $f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4
1525b     BC 99 B8 A7 
1525f     A3 B4 B5 BF 
15263     B4 99 C5 B3 
15267     C4 CE CB DF | 	byte	$bc, $99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df
1526b     D2 DA 01 E2 
1526f     DC E0 07 01 
15273     E3 F0 27 15 
15277     FA 08 13 31 | 	byte	$d2, $da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31
1527b     F9 31 4A 17 
1527f     2D 2D 54 38 
15283     4A 64 3B 4E 
15287     63 62 51 77 | 	byte	$f9, $31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77
1528b     49 57 79 60 
1528f     5B 6E 5E 71 
15293     76 42 68 7D 
15297     62 38 53 3B | 	byte	$49, $57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b
1529b     4C 4A ED FA 
1529f     63 2F FF 15 
152a3     DF 05 08 DC 
152a7     EA E4 F3 01 | 	byte	$4c, $4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01
152ab     C1 A1 EE C2 
152af     D6 CE CE E3 
152b3     D9 BD F2 C1 
152b7     D4 D0 DD B5 | 	byte	$c1, $a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5
152bb     BF BF D7 AA 
152bf     C6 C3 B8 B2 
152c3     BC B5 B2 A9 
152c7     A2 C3 BF AC | 	byte	$bf, $bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac
152cb     A0 C2 BF D4 
152cf     CD 89 C6 D9 
152d3     A8 C2 E8 DF 
152d7     AD CF EF E6 | 	byte	$a0, $c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6
152db     CB FE D7 ED 
152df     02 E1 12 FF 
152e3     FE 29 02 2A 
152e7     26 2B 42 34 | 	byte	$cb, $fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34
152eb     44 46 56 43 
152ef     6B 71 55 6F 
152f3     5F 6A 6E 3F 
152f7     5E 5E 59 66 | 	byte	$44, $46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66
152fb     6E 64 59 38 
152ff     21 39 51 63 
15303     49 56 55 1E 
15307     3D 3D 28 F6 | 	byte	$6e, $64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6
1530b     13 12 22 31 
1530f     05 FC 2B ED 
15313     1A DF 22 07 
15317     F3 DC F3 ED | 	byte	$13, $12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed
1531b     FC 0A FC C1 
1531f     F9 09 CA C8 
15323     B9 B9 DD E9 
15327     BF 96 D9 E0 | 	byte	$fc, $0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0
1532b     C2 C2 AA CC 
1532f     A8 A6 C8 B8 
15333     8A AE AD 98 
15337     AC 89 D1 A5 | 	byte	$c2, $c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5
1533b     AA B7 D0 D5 
1533f     AA A7 B3 0B 
15343     D2 D0 D8 02 
15347     DB F3 DF 03 | 	byte	$aa, $b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03
1534b     D2 0F 14 EC 
1534f     1B 1A EB 22 
15353     3D 1B 04 40 
15357     32 59 40 38 | 	byte	$d2, $0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38
1535b     3C 31 4E 41 
1535f     61 65 5F 4F 
15363     45 50 5F 6C 
15367     6D 80 4F 40 | 	byte	$3c, $31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40
1536b     6C 57 51 62 
1536f     50 3D 45 32 
15373     47 1D 4C 2E 
15377     F3 1F 1F 3E | 	byte	$6c, $57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e
1537b     1B EA 17 FD 
1537f     EA EF 11 E4 
15383     CE FC C9 DF 
15387     B8 BA BD D2 | 	byte	$1b, $ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2
1538b     D7 B3 C3 8B 
1538f     BD C6 98 D2 
15393     97 8F E5 8F 
15397     9A B9 A1 95 | 	byte	$d7, $b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95
1539b     E7 AF 91 B3 
1539f     CC CB A0 CE 
153a3     DA C2 B7 D2 
153a7     F5 D5 E8 E8 | 	byte	$e7, $af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8
153ab     E0 F3 10 CD 
153af     FD 16 D2 1C 
153b3     22 03 1B 08 
153b7     43 17 1C 2C | 	byte	$e0, $f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c
153bb     34 2A 37 26 
153bf     4D 30 2E 2D 
153c3     3D 53 30 6E 
153c7     2C 4A 5B 3A | 	byte	$34, $2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a
153cb     74 4E 45 65 
153cf     3C 48 45 5A 
153d3     80 2D 2B 37 
153d7     45 55 4B 53 | 	byte	$74, $4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53
153db     1D 33 3F 45 
153df     2F 03 2B 35 
153e3     05 2A 15 F3 
153e7     F5 E8 06 C5 | 	byte	$1d, $33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5
153eb     DB 03 A5 D0 
153ef     FE 9E A9 BE 
153f3     AF E0 C6 81 
153f7     BF E5 AF B2 | 	byte	$db, $03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2
153fb     BE B4 C8 AA 
153ff     90 C6 B6 DA 
15403     BE 99 16 AD 
15407     AA 0E AC BB | 	byte	$be, $b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb
1540b     D9 CE 0C 9C 
1540f     03 FD AA 1C 
15413     02 DC F5 D1 
15417     10 FF 09 F6 | 	byte	$d9, $ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6
1541b     0A 18 EB 49 
1541f     1D 2C 13 E3 
15423     23 5A DC 14 
15427     4B F7 43 12 | 	byte	$0a, $18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12
1542b     10 47 27 25 
1542f     2A 26 3F 1E 
15433     44 29 19 53 
15437     35 22 4B 26 | 	byte	$10, $47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26
1543b     15 67 1B 41 
1543f     3A 21 5B 40 
15443     2B 34 2A 2B 
15447     50 15 13 36 | 	byte	$15, $67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36
1544b     43 18 2D 16 
1544f     EA 47 02 FF 
15453     14 0B 0F E5 
15457     0A 16 C2 E7 | 	byte	$43, $18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7
1545b     1C C7 F4 E7 
1545f     F0 DD E5 E7 
15463     DF 8D E6 F3 
15467     AB EF DE DA | 	byte	$1c, $c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da
1546b     D2 B0 ED D2 
1546f     AA E7 EC A6 
15473     D8 C3 B1 F9 
15477     9E C4 C2 A3 | 	byte	$d2, $b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3
1547b     CE C6 C6 B5 
1547f     91 FC C8 C1 
15483     FA BD AB F1 
15487     D5 D6 EE CA | 	byte	$ce, $c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca
1548b     F6 EC BD 31 
1548f     FB C1 FD F4 
15493     1A 2F F8 19 
15497     1D 27 07 24 | 	byte	$f6, $ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24
1549b     3B 31 0E 49 
1549f     51 26 66 0B 
154a3     45 5A 3B 4C 
154a7     4C 43 68 1E | 	byte	$3b, $31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e
154ab     74 35 25 70 
154af     49 2D 38 33 
154b3     5D 25 33 31 
154b7     32 2A 44 45 | 	byte	$74, $35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45
154bb     2B 3D 21 0F 
154bf     19 2F 24 30 
154c3     0A E6 47 01 
154c7     E5 06 31 FD | 	byte	$2b, $3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd
154cb     D3 15 DF 12 
154cf     D0 09 F8 CD 
154d3     FC EF CB E6 
154d7     D3 E9 B8 E2 | 	byte	$d3, $15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2
154db     E5 C5 E7 BD 
154df     D7 F2 BA 90 
154e3     D9 E2 B6 BD 
154e7     BD C3 DF A9 | 	byte	$e5, $c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9
154eb     C1 B6 C1 F6 
154ef     9F 8E C6 CF 
154f3     CB D5 CA B5 
154f7     E1 B8 E2 DB | 	byte	$c1, $b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db
154fb     D6 DD EC E5 
154ff     FC F0 00 15 
15503     EC 23 18 F3 
15507     0E 30 0A 42 | 	byte	$d6, $dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42
1550b     47 1B 19 31 
1550f     30 4D 2E 3D 
15513     40 1C 50 45 
15517     2F 55 2A 32 | 	byte	$47, $1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32
1551b     4B 24 42 31 
1551f     30 27 40 3F 
15523     3F 62 38 1C 
15527     45 2F 43 04 | 	byte	$4b, $24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04
1552b     40 44 06 3E 
1552f     15 45 36 02 
15533     29 1D 1E 1D 
15537     EF 00 14 08 | 	byte	$40, $44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08
1553b     EF 12 F4 EC 
1553f     F7 EC E3 E6 
15543     E8 EA FA D1 
15547     CD B3 0B F9 | 	byte	$ef, $12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9
1554b     AA A8 CC D6 
1554f     D1 D2 A2 B2 
15553     BE E1 C8 9C 
15557     B8 BC CC A5 | 	byte	$aa, $a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5
1555b     8E D7 DE C7 
1555f     CB BD EA DF 
15563     CF F8 C2 BE 
15567     F2 EB FE C9 | 	byte	$8e, $d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9
1556b     DC 0E D2 13 
1556f     F5 CE 28 1F 
15573     E8 1D 04 F0 
15577     1A 1D 24 FE | 	byte	$dc, $0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe
1557b     04 12 2C 0D 
1557f     16 12 32 32 
15583     12 23 25 17 
15587     3C 29 2A 47 | 	byte	$04, $12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47
1558b     48 07 46 41 
1558f     32 22 3B 0D 
15593     2A 50 44 14 
15597     0E 60 57 2A | 	byte	$48, $07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a
1559b     17 2F 17 38 
1559f     2C 23 22 44 
155a3     1E F0 0D 4A 
155a7     15 20 EE 2A | 	byte	$17, $2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a
155ab     02 18 41 E1 
155af     E5 2E F6 DC 
155b3     04 F6 EF DE 
155b7     E8 E2 FA C5 | 	byte	$02, $18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5
155bb     DF F5 C8 C6 
155bf     FE AD D4 E9 
155c3     99 0C EE BE 
155c7     F0 A6 F5 BC | 	byte	$df, $f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc
155cb     DC B9 D4 FA 
155cf     C9 DA D2 A8 
155d3     D0 F0 E6 D6 
155d7     E0 DD CA C6 | 	byte	$dc, $b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6
155db     F9 C5 D3 E8 
155df     00 D9 DB CF 
155e3     EC 03 F1 F5 
155e7     E0 27 01 07 | 	byte	$f9, $c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07
155eb     38 08 D5 39 
155ef     14 12 2A 17 
155f3     11 2E 15 0B 
155f7     0C 21 40 18 | 	byte	$38, $08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18
155fb     11 20 16 2A 
155ff     59 1C 01 47 
15603     3B 46 38 0F 
15607     5F 0F 32 3C | 	byte	$11, $20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c
1560b     16 32 2E 31 
1560f     1F 48 18 1D 
15613     31 06 44 1F 
15617     0D 3E E7 05 | 	byte	$16, $32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05
1561b     3D 08 1E F9 
1561f     1A FC 04 EE 
15623     18 F4 FA 05 
15627     0A EB 02 E7 | 	byte	$3d, $08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7
1562b     1D D0 E9 F4 
1562f     E5 DB FA CA 
15633     E0 E3 BC 05 
15637     D4 C8 BF 05 | 	byte	$1d, $d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05
1563b     D8 C6 E9 BF 
1563f     E6 C9 D9 EA 
15643     BB C8 EF D1 
15647     F9 DA D3 E9 | 	byte	$d8, $c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9
1564b     BB D9 FB CE 
1564f     DF ED E9 DC 
15653     FE F7 FE EF 
15657     E4 0B D5 F0 | 	byte	$bb, $d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0
1565b     FB 1A 1D E3 
1565f     0F 1F F6 1D 
15663     FA 04 0A 19 
15667     27 03 0B 35 | 	byte	$fb, $1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35
1566b     1F 05 20 29 
1566f     23 08 2A 34 
15673     21 0B 3B 4D 
15677     4F 00 49 30 | 	byte	$1f, $05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30
1567b     2F 36 03 04 
1567f     2F 20 33 02 
15683     0C 49 1A 2C 
15687     F2 05 08 03 | 	byte	$2f, $36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03
1568b     28 14 FE EB 
1568f     00 1D EF 13 
15693     1B DD FA 00 
15697     D7 FC 09 09 | 	byte	$28, $14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09
1569b     DE E3 05 F9 
1569f     F1 CB DE 09 
156a3     FC DA FA D1 
156a7     E7 0C C0 1C | 	byte	$de, $e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c
156ab     EA 9E FF E5 
156af     ED FD D3 EF 
156b3     EE FA 04 F0 
156b7     E5 E8 EE FA | 	byte	$ea, $9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa
156bb     E6 EB D3 EC 
156bf     1C F5 DC F8 
156c3     E9 E5 14 EB 
156c7     F1 E8 ED 13 | 	byte	$e6, $eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13
156cb     19 03 C4 04 
156cf     06 F2 0F 07 
156d3     E2 0F 1C 02 
156d7     EB FE 09 1D | 	byte	$19, $03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d
156db     08 1A 2C 0C 
156df     00 1C 26 07 
156e3     06 11 16 12 
156e7     3C DE FE 1E | 	byte	$08, $1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e
156eb     08 15 1D 12 
156ef     FB 3C E9 0D 
156f3     12 1A 0D 02 
156f7     15 23 1D E9 | 	byte	$08, $15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9
156fb     01 FC 1A 1F 
156ff     14 F9 F1 02 
15703     26 21 E3 02 
15707     13 E3 12 FD | 	byte	$01, $fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd
1570b     11 E6 02 F1 
1570f     12 F5 0B 0A 
15713     E7 EB 11 F1 
15717     E4 0A 0F 15 | 	byte	$11, $e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15
1571b     0A F0 06 FB 
1571f     FB EE 09 F1 
15723     E9 F6 12 F5 
15727     05 FB F1 E7 | 	byte	$0a, $f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7
1572b     41 E8 E5 08 
1572f     D7 0E 00 0B 
15733     E1 E6 08 00 
15737     EE EF DA FC | 	byte	$41, $e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc
1573b     EE EB 15 F2 
1573f     04 F8 DC 24 
15743     03 F3 F7 E7 
15747     F4 04 F8 01 | 	byte	$ee, $eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01
1574b     ED FB 10 F5 
1574f     ED 04 0A ED 
15753     DF 05 01 13 
15757     E1 FF 09 ED | 	byte	$ed, $fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed
1575b     1A 15 FE F6 
1575f     E1 10 24 1B 
15763     E7 0F 0F 1B 
15767     25 EE EF 27 | 	byte	$1a, $15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27
1576b     14 FD 12 F6 
1576f     19 1C 10 10 
15773     EB FE 34 0C 
15777     FB 0E 06 38 | 	byte	$14, $fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38
1577b     FD FD 22 D8 
1577f     0C 1C 07 0A 
15783     19 E6 1A 0B 
15787     09 1C E6 01 | 	byte	$fd, $fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01
1578b     1C F0 04 18 
1578f     1C EE E4 07 
15793     05 FC 04 06 
15797     E0 E7 11 01 | 	byte	$1c, $f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01
1579b     F7 0D DB 0A 
1579f     F9 EC FB 15 
157a3     08 DE 02 10 
157a7     CD 03 1E EB | 	byte	$f7, $0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb
157ab     EA E4 E4 06 
157af     FC FD EC D4 
157b3     0F 09 F2 03 
157b7     02 D5 13 F1 | 	byte	$ea, $e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1
157bb     E3 02 15 E5 
157bf     0F 08 EF F8 
157c3     DD F7 02 09 
157c7     02 FD 02 00 | 	byte	$e3, $02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00
157cb     EE 0D FF 1E 
157cf     F3 EC 03 0B 
157d3     F0 0A 0A F5 
157d7     FB 0F 05 ED | 	byte	$ee, $0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed
157db     0D 1B 11 FB 
157df     0A 02 19 2E 
157e3     1F F2 24 FE 
157e7     F8 0B 25 12 | 	byte	$0d, $1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12
157eb     0D 00 1A EB 
157ef     E9 2B 20 0B 
157f3     E8 FA 21 22 
157f7     F7 EA 19 11 | 	byte	$0d, $00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11
157fb     03 F7 FE 12 
157ff     0E FD 15 04 
15803     06 FD 01 17 
15807     F0 19 0D F7 | 	byte	$03, $f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7
1580b     01 F7 09 0C 
1580f     F1 19 0D E2 
15813     F7 03 E5 04 
15817     F2 FF FE E8 | 	byte	$01, $f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8
1581b     01 02 E2 0E 
1581f     FF FD DC F1 
15823     16 D4 F2 EF 
15827     FA 01 01 0B | 	byte	$01, $02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b
1582b     FB D4 F0 1C 
1582f     20 E3 D7 10 
15833     F5 01 0A D5 
15837     01 08 E9 F7 | 	byte	$fb, $d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7
1583b     EE 09 EF 16 
1583f     FD F5 0E 06 
15843     14 E2 0E 14 
15847     1A 0C F8 F6 | 	byte	$ee, $09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6
1584b     10 20 03 F0 
1584f     EF 17 F7 33 
15853     0F D4 0E 0C 
15857     00 05 FD 0C | 	byte	$10, $20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c
1585b     00 16 03 F6 
1585f     0F EA 0E 12 
15863     0F 01 F6 F8 
15867     0E 09 04 E1 | 	byte	$00, $16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1
1586b     FB 0D 02 03 
1586f     06 18 02 09 
15873     04 EE 18 0B 
15877     EB 1D 05 E6 | 	byte	$fb, $0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6
1587b     F8 0E 07 25 
1587f     08 D9 11 0C 
15883     EE 26 11 F0 
15887     FE 01 1D FC | 	byte	$f8, $0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc
1588b     14 06 0C 10 
1588f     F1 09 EA EC 
15893     22 03 F2 05 
15897     EE 16 15 00 | 	byte	$14, $06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00
1589b     FB 0E D8 FD 
1589f     05 0D FD FB 
158a3     E9 EA 09 E8 
158a7     F8 F9 EF DF | 	byte	$fb, $0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df
158ab     16 FA 01 E5 
158af     FD F3 03 FE 
158b3     ED E8 F2 EA 
158b7     07 07 F9 F4 | 	byte	$16, $fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4
158bb     EF EE FB 0B 
158bf     EC EC F7 FA 
158c3     0A F0 10 F5 
158c7     ED 10 0A 04 | 	byte	$ef, $ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04
158cb     F3 15 F6 F4 
158cf     0D FC 0C 1F 
158d3     0F FD 01 F7 
158d7     23 FC 04 2F | 	byte	$f3, $15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f
158db     09 F9 12 0B 
158df     0F 2E F8 12 
158e3     10 00 26 10 
158e7     E6 1E FD 12 | 	byte	$09, $f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12
158eb     15 FB 01 20 
158ef     0E EF 1A F4 
158f3     FC 13 10 F8 
158f7     11 15 10 FA | 	byte	$15, $fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa
158fb     FA FF 08 08 
158ff     09 F0 EA 02 
15903     15 E1 F3 0D 
15907     E8 03 06 EF | 	byte	$fa, $ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef
1590b     E0 F8 01 06 
1590f     EB FD 0D FB 
15913     EE 01 EE ED 
15917     05 05 01 E8 | 	byte	$e0, $f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8
1591b     DE 18 FD F4 
1591f     F4 E4 FA F1 
15923     FA FA FE 04 
15927     E6 E9 03 D3 | 	byte	$de, $18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3
1592b     0D FA FD EB 
1592f     FA 04 02 FD 
15933     EE EF 2D EE 
15937     0C 03 F3 FB | 	byte	$0d, $fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb
1593b     FB 02 04 09 
1593f     18 F7 17 1D 
15943     FC FD 12 21 
15947     15 01 0D 07 | 	byte	$fb, $02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07
1594b     13 FA F4 1F 
1594f     1B 1B F6 F4 
15953     18 0B 16 FC 
15957     E3 10 1D 1E | 	byte	$13, $fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e
1595b     01 E6 10 11 
1595f     E7 EF 22 0A 
15963     F8 09 F9 E7 
15967     15 FD 01 F2 | 	byte	$01, $e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2
1596b     F0 13 F6 F0 
1596f     FD 11 F1 F8 
15973     0C F8 06 0A 
15977     FD F4 0C 05 | 	byte	$f0, $13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05
1597b     EC FC FC FF 
1597f     0C F2 02 11 
15983     EC DD 20 0A 
15987     0F E6 FD FF | 	byte	$ec, $fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff
1598b     0D 03 EB 17 
1598f     FB FC F3 F4 
15993     EF 07 0B FD 
15997     F5 00 DE 06 | 	byte	$0d, $03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06
1599b     F8 E8 E9 05 
1599f     0F FC F2 DB 
159a3     0C 09 E7 F6 
159a7     08 04 EF F8 | 	byte	$f8, $e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8
159ab     0A F3 10 1D 
159af     00 03 E5 01 
159b3     1C 07 07 12 
159b7     FA 0D 18 F2 | 	byte	$0a, $f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2
159bb     15 1B 04 F2 
159bf     0D 10 FB 09 
159c3     FC 0C 13 FA 
159c7     07 33 EF FD | 	byte	$15, $1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd
159cb     20 0C FE 0C 
159cf     FB 15 0C 0E 
159d3     08 F9 F0 11 
159d7     18 F6 DB 19 | 	byte	$20, $0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19
159db     03 05 02 E0 
159df     05 05 F5 04 
159e3     04 05 04 06 
159e7     E9 EF 1A 0A | 	byte	$03, $05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a
159eb     06 FE 00 07 
159ef     0B FB E6 FD 
159f3     FC 10 FA FC 
159f7     E0 F0 0A EA | 	byte	$06, $fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea
159fb     F1 E8 E5 F7 
159ff     FC EA FD F8 
15a03     DB 06 F7 E6 
15a07     FA 04 FD E9 | 	byte	$f1, $e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9
15a0b     E9 06 07 0A 
15a0f     E8 12 16 01 
15a13     00 F3 FF 2F 
15a17     0A F8 0D 20 | 	byte	$e9, $06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20
15a1b     10 08 ED 13 
15a1f     1B 0E 0D F3 
15a23     03 16 FC 0E 
15a27     08 06 08 FD | 	byte	$10, $08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd
15a2b     09 0D 20 FC 
15a2f     EF 18 0D F7 
15a33     0F EE FE 05 
15a37     0B EE ED 1A | 	byte	$09, $0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a
15a3b     1D F6 08 F1 
15a3f     F5 04 FF 1E 
15a43     EA F0 10 FE 
15a47     06 19 FF FE | 	byte	$1d, $f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe
15a4b     00 FD 02 0B 
15a4f     FA 01 0C 00 
15a53     F3 02 08 0B 
15a57     F5 0C FC F8 | 	byte	$00, $fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8
15a5b     E2 0B FD FA 
15a5f     F5 EB FC F7 
15a63     E0 F6 FF 15 
15a67     F6 EE F5 E6 | 	byte	$e2, $0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6
15a6b     E4 FF FF 06 
15a6f     E9 F2 F2 FC 
15a73     03 FE 06 FF 
15a77     EE 13 05 F4 | 	byte	$e4, $ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4
15a7b     0F 1D 23 00 
15a7f     08 15 01 00 
15a83     23 0E 03 13 
15a87     02 1B 08 12 | 	byte	$0f, $1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12
15a8b     0F 02 09 FD 
15a8f     11 03 08 01 
15a93     05 03 16 08 
15a97     0B FE 05 04 | 	byte	$0f, $02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04
15a9b     0B E3 FB 1D 
15a9f     03 05 01 09 
15aa3     09 01 FD FF 
15aa7     ED EC 08 0A | 	byte	$0b, $e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a
15aab     F5 E5 F7 16 
15aaf     01 F9 E2 FA 
15ab3     E1 06 01 F9 
15ab7     02 F1 E0 FB | 	byte	$f5, $e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb
15abb     0C 06 E9 DD 
15abf     F6 14 01 08 
15ac3     EC FD 0A 03 
15ac7     01 EB F7 00 | 	byte	$0c, $06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00
15acb     10 E7 00 08 
15acf     06 11 FA EF 
15ad3     13 EF F4 05 
15ad7     0E FE F6 F7 | 	byte	$10, $e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7
15adb     20 FB 04 02 
15adf     FE 01 F4 0F 
15ae3     2C 09 02 09 
15ae7     01 0F 13 08 | 	byte	$20, $fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08
15aeb     F6 0F 14 0D 
15aef     FA 08 15 F5 
15af3     31 11 E5 0A 
15af7     11 02 19 11 | 	byte	$f6, $0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11
15afb     FD FB 0D 0C 
15aff     FA 03 05 00 
15b03     00 01 03 05 
15b07     08 09 01 D9 | 	byte	$fd, $fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9
15b0b     12 04 E2 04 
15b0f     07 F8 E6 FC 
15b13     ED 01 0B F3 
15b17     FC ED FF 05 | 	byte	$12, $04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05
15b1b     EC F4 0C FF 
15b1f     F8 F3 F7 F7 
15b23     08 F4 F9 03 
15b27     F4 F4 F5 F2 | 	byte	$ec, $f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2
15b2b     FD 0A F7 FE 
15b2f     F7 ED 08 10 
15b33     EF FD F3 01 
15b37     03 F2 F8 F1 | 	byte	$fd, $0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1
15b3b     08 FE 08 FA 
15b3f     F2 FA 10 05 
15b43     F2 03 03 18 
15b47     07 E9 17 18 | 	byte	$08, $fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18
15b4b     04 0B 10 0C 
15b4f     FC 16 FE 09 
15b53     1C 0B 10 09 
15b57     14 1C 11 14 | 	byte	$04, $0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14
15b5b     0B 06 05 0F 
15b5f     0F 18 19 17 
15b63     F4 0E 07 12 
15b67     18 06 EF 0B | 	byte	$0b, $06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b
15b6b     12 FA FB F5 
15b6f     02 02 06 FD 
15b73     F3 E9 F3 F6 
15b77     EF FC FB E8 | 	byte	$12, $fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8
15b7b     EA EF F3 F8 
15b7f     FC F2 F2 EB 
15b83     DD E8 10 F9 
15b87     F1 04 FA E2 | 	byte	$ea, $ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2
15b8b     F5 FC F2 05 
15b8f     00 E8 F5 03 
15b93     FB E7 FD 01 
15b97     FC F1 03 03 | 	byte	$f5, $fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03
15b9b     F3 F0 FC F8 
15b9f     01 FB 0C EA 
15ba3     08 15 09 FC 
15ba7     FA 0A 00 F7 | 	byte	$f3, $f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7
15bab     19 08 09 F9 
15baf     0C 0F 0A 08 
15bb3     1A FA 1F 10 
15bb7     03 FC 0D 27 | 	byte	$19, $08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27
15bbb     18 07 10 06 
15bbf     1A 18 16 F7 
15bc3     21 13 0D 1F 
15bc7     F7 1A 0B 09 | 	byte	$18, $07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09
15bcb     FE 17 11 1E 
15bcf     F1 F2 0E 1D 
15bd3     FD 00 F4 F5 
15bd7     14 00 F5 F3 | 	byte	$fe, $17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3
15bdb     FC FE ED F9 
15bdf     F1 F9 F2 01 
15be3     F7 F3 FB E6 
15be7     F4 F0 FE EB | 	byte	$fc, $fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb
15beb     EB F3 E7 F6 
15bef     EE F3 E6 E4 
15bf3     08 F3 DF EC 
15bf7     FB 00 F1 F8 | 	byte	$eb, $f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8
15bfb     F5 F3 F4 FE 
15bff     09 F5 F9 FF 
15c03     02 0A FC FE 
15c07     F9 0D 06 F9 | 	byte	$f5, $f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9
15c0b     07 17 11 05 
15c0f     FF EE 05 0E 
15c13     0E 0E 17 F5 
15c17     03 10 05 08 | 	byte	$07, $17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08
15c1b     12 12 FE 0A 
15c1f     22 1B FE 16 
15c23     17 16 FF 0B 
15c27     23 14 0A 0D | 	byte	$12, $12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d
15c2b     10 03 11 14 
15c2f     02 FC 13 12 
15c33     17 F5 04 0D 
15c37     02 04 0F F0 | 	byte	$10, $03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0
15c3b     FB 0E 08 F2 
15c3f     F8 F9 0E F6 
15c43     F6 01 F9 F5 
15c47     EB F8 02 F7 | 	byte	$fb, $0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7
15c4b     FA F0 05 F6 
15c4f     05 E7 E0 0A 
15c53     F2 02 FE EC 
15c57     F3 09 F7 EC | 	byte	$fa, $f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec
15c5b     F5 F5 EF 03 
15c5f     F7 F9 08 FB 
15c63     EA 05 F1 FD 
15c67     FC 0B F5 F4 | 	byte	$f5, $f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4
15c6b     F1 F1 08 11 
15c6f     FE E6 FE F1 
15c73     0C 12 03 F4 
15c77     FD 06 12 12 | 	byte	$f1, $f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12
15c7b     F3 0C 02 12 
15c7f     F4 0F 02 08 
15c83     09 10 11 02 
15c87     FC 10 17 F7 | 	byte	$f3, $0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7
15c8b     05 0D 1A 08 
15c8f     00 0F 07 F8 
15c93     0F 12 0A 1C 
15c97     08 FB 0C 15 | 	byte	$05, $0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15
15c9b     12 F9 0F 1A 
15c9f     0E FD 13 13 
15ca3     04 02 04 02 
15ca7     F6 11 03 03 | 	byte	$12, $f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03
15cab     0A E8 01 FC 
15caf     FB EF 0A 06 
15cb3     EE F2 FA E6 
15cb7     F6 F9 04 F2 | 	byte	$0a, $e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2
15cbb     DF F8 FC F0 
15cbf     EB E4 FD FC 
15cc3     F4 F6 F0 FB 
15cc7     F3 FA 00 EA | 	byte	$df, $f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea
15ccb     08 F3 E0 01 
15ccf     FC E1 17 03 
15cd3     E4 FF FD FF 
15cd7     02 ED 09 FF | 	byte	$08, $f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff
15cdb     F5 F7 0B 03 
15cdf     08 09 05 00 
15ce3     F6 1B F4 06 
15ce7     1F 01 F8 FD | 	byte	$f5, $f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd
15ceb     0D 11 09 08 
15cef     06 0C 02 0E 
15cf3     03 FB 1D 0A 
15cf7     11 08 F8 16 | 	byte	$0d, $11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16
15cfb     20 F9 07 12 
15cff     FD 0D 15 08 
15d03     FD 0F 03 17 
15d07     00 FE 08 1F | 	byte	$20, $f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f
15d0b     00 04 11 F8 
15d0f     01 01 F7 14 
15d13     03 00 01 F7 
15d17     05 FD F1 FE | 	byte	$00, $04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe
15d1b     19 02 EB F4 
15d1f     F5 01 08 EF 
15d23     FE 00 F9 EB 
15d27     FD F5 FC F2 | 	byte	$19, $02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2
15d2b     F8 FD F3 F1 
15d2f     06 F1 FC F6 
15d33     FB F9 02 F6 
15d37     F3 01 FA 02 | 	byte	$f8, $fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02
15d3b     FB FD F6 FC 
15d3f     0B F5 F6 FE 
15d43     F8 04 FE FE 
15d47     FC 12 02 F2 | 	byte	$fb, $fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2
15d4b     06 0B FF 04 
15d4f     FB 0F FC 0F 
15d53     10 F9 11 0B 
15d57     FD F6 09 1C | 	byte	$06, $0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c
15d5b     0B 00 04 06 
15d5f     18 0C F8 F5 
15d63     14 0C 02 10 
15d67     FE 03 06 03 | 	byte	$0b, $00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03
15d6b     08 06 FE 01 
15d6f     0F 03 FB 01 
15d73     07 09 07 0A 
15d77     0B F4 FC 07 | 	byte	$08, $06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07
15d7b     01 FD 0B FD 
15d7f     FF F9 09 F4 
15d83     EF 0A 02 F6 
15d87     FD F5 F4 FF | 	byte	$01, $fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff
15d8b     10 03 ED 02 
15d8f     F8 F4 F9 0A 
15d93     FD F8 FE FF 
15d97     F9 FD 02 EC | 	byte	$10, $03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec
15d9b     06 F7 FB FE 
15d9f     04 FD 01 FD 
15da3     FC F3 01 FB 
15da7     FF FB FF 0A | 	byte	$06, $f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a
15dab     F9 FD FE 04 
15daf     0B F9 F5 08 
15db3     0E FE FF 0E 
15db7     00 06 05 0B | 	byte	$f9, $fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b
15dbb     0A FD 09 10 
15dbf     F1 06 08 FC 
15dc3     0A FD FF 06 
15dc7     01 FB 08 F6 | 	byte	$0a, $fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6
15dcb     F9 07 10 FA 
15dcf     FA F4 0D 09 
15dd3     01 00 F8 F9 
15dd7     0B FC F1 0B | 	byte	$f9, $07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b
15ddb     0F 05 FA 0B 
15ddf     F5 01 08 09 
15de3     FF F1 03 04 
15de7     07 06 FF 04 | 	byte	$0f, $05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04
15deb     FA FC FC 14 
15def     00 F4 FB 03 
15df3     FA 0E 02 F5 
15df7     06 FD 00 FA | 	byte	$fa, $fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa
15dfb     03 00 0F 04 
15dff     F7 FF 02 0E 
15e03     FC F7 10 09 
15e07     EB 06 11 FD | 	byte	$03, $00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd
15e0b     FE F1 FB 0A 
15e0f     FE FF FA FD 
15e13     08 07 04 ED 
15e17     F9 02 08 0A | 	byte	$fe, $f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a
15e1b     FE 00 FD 03 
15e1f     08 FE 06 00 
15e23     07 01 FA 03 
15e27     0D FA FF 02 | 	byte	$fe, $00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02
15e2b     03 08 11 F6 
15e2f     09 FF F9 06 
15e33     07 F5 0C FC 
15e37     0B F7 F4 00 | 	byte	$03, $08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00
15e3b     08 F6 02 FB 
15e3f     05 F7 FC 03 
15e43     07 0C F1 FA 
15e47     15 F2 00 FD | 	byte	$08, $f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd
15e4b     F5 18 03 ED 
15e4f     07 F2 0B 0A 
15e53     09 FB 0F FE 
15e57     02 0E F9 F7 | 	byte	$f5, $18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7
15e5b     0D 0A F7 FE 
15e5f     0A 02 F8 03 
15e63     0C F3 07 05 
15e67     FA F2 06 FE | 	byte	$0d, $0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe
15e6b     03 0A EC 03 
15e6f     03 FC 06 F6 
15e73     F9 0E 05 F4 
15e77     FC FB 06 0F | 	byte	$03, $0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f
15e7b     F8 FB FF FB 
15e7f     FF 19 FB F5 
15e83     FE FD 0A 07 
15e87     0A F8 04 04 | 	byte	$f8, $fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04
15e8b     10 06 FC 0E 
15e8f     FB F6 0C 14 
15e93     F6 FA 12 08 
15e97     08 FE 08 04 | 	byte	$10, $06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04
15e9b     01 00 10 0B 
15e9f     05 02 F6 0B 
15ea3     0B FE 04 01 
15ea7     F5 FA 0C FF | 	byte	$01, $00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff
15eab     F1 0A 08 F8 
15eaf     02 FD FC 04 
15eb3     F7 FF FA F3 
15eb7     12 F7 EF FD | 	byte	$f1, $0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd
15ebb     0D FA F5 05 
15ebf     FA EE 10 F3 
15ec3     F4 05 FC 00 
15ec7     04 F9 09 FB | 	byte	$0d, $fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb
15ecb     F0 FB 0D 01 
15ecf     FA F6 FF 0A 
15ed3     06 EA 02 FF 
15ed7     F7 05 FE 07 | 	byte	$f0, $fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07
15edb     01 FB FA 0F 
15edf     0D F0 FE 09 
15ee3     0A FD FE 01 
15ee7     0B 00 01 10 | 	byte	$01, $fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10
15eeb     04 FE 01 09 
15eef     FE 03 03 0A 
15ef3     05 FF 10 07 
15ef7     F7 02 0F 0E | 	byte	$04, $fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e
15efb     ED 05 0B FF 
15eff     FF 0A 08 FB 
15f03     06 09 F2 05 
15f07     10 FE FB 02 | 	byte	$ed, $05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02
15f0b     07 06 08 F8 
15f0f     F4 07 FD FF 
15f13     08 FA 02 0D 
15f17     FD E8 00 04 | 	byte	$07, $06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04
15f1b     04 05 F3 F4 
15f1f     0D 09 09 EC 
15f23     F9 0E F7 FF 
15f27     FB FE 0E 04 | 	byte	$04, $05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04
15f2b     F2 08 FB F5 
15f2f     FE F4 FD 05 
15f33     05 F0 08 F3 
15f37     FE FF F2 FB | 	byte	$f2, $08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb
15f3b     00 FD F9 04 
15f3f     FD FC FC 04 
15f43     FC F8 07 F1 
15f47     FC FD 04 01 | 	byte	$00, $fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01
15f4b     FE F9 03 FE 
15f4f     16 06 FA E8 
15f53     14 13 FB FD 
15f57     10 03 FE 0C | 	byte	$fe, $f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c
15f5b     04 F7 01 0C 
15f5f     01 F7 0B 0A 
15f63     0A 00 03 00 
15f67     03 0D 07 02 | 	byte	$04, $f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02
15f6b     FE 13 08 03 
15f6f     04 01 0C 0A 
15f73     F8 03 13 FD 
15f77     01 07 F5 14 | 	byte	$fe, $13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14
15f7b     15 F7 F7 0C 
15f7f     FF FF FF FA 
15f83     08 00 01 0B 
15f87     FE F6 FD FD | 	byte	$15, $f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd
15f8b     05 00 FB F6 
15f8f     02 FA 03 09 
15f93     02 F0 F9 F6 
15f97     06 FE FB 04 | 	byte	$05, $00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04
15f9b     F5 F6 02 F9 
15f9f     06 FA EF 01 
15fa3     05 F9 FD 00 
15fa7     FD 06 00 F8 | 	byte	$f5, $f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8
15fab     00 FF 03 05 
15faf     F7 FB 06 F7 
15fb3     00 00 08 FB 
15fb7     F9 FF 04 03 | 	byte	$00, $ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03
15fbb     0A F6 F6 07 
15fbf     01 F9 05 F8 
15fc3     08 01 08 05 
15fc7     01 FB 0C 00 | 	byte	$0a, $f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00
15fcb     F5 00 0A FD 
15fcf     01 15 FE 00 
15fd3     FC 10 0A FD 
15fd7     FB 07 FF F9 | 	byte	$f5, $00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9
15fdb     0B 03 01 0D 
15fdf     FB F7 13 07 
15fe3     02 03 F1 0B 
15fe7     0E 07 FA 02 | 	byte	$0b, $03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02
15feb     F4 11 0C FA 
15fef     F9 0E 01 05 
15ff3     FF FE FD 07 
15ff7     02 01 03 FE | 	byte	$f4, $11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe
15ffb     FE 09 F6 0C 
15fff     01 F9 F3 0A 
16003     05 FA F8 FF 
16007     11 05 F2 F5 | 	byte	$fe, $09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5
1600b     07 08 08 FB 
1600f     FB 07 FB 04 
16013     03 F7 00 F9 
16017     FE 0B 02 F8 | 	byte	$07, $08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8
1601b     09 FC 05 F8 
1601f     F9 0A FE 08 
16023     0F FA F6 FF 
16027     09 0D FD F9 | 	byte	$09, $fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9
1602b     08 FF 04 04 
1602f     FA 01 0E F8 
16033     01 03 01 FD 
16037     FF 01 01 FB | 	byte	$08, $ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb
1603b     06 FF F3 0F 
1603f     13 F4 F8 00 
16043     05 0E 03 F8 
16047     07 FF F7 04 | 	byte	$06, $ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04
1604b     FC F8 11 0A 
1604f     FA FA FC FE 
16053     FF FD 11 FE 
16057     F1 07 03 FD | 	byte	$fc, $f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd
1605b     00 F4 0B 06 
1605f     F4 FA 0D 03 
16063     F2 03 07 FA 
16067     00 08 05 FF | 	byte	$00, $f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff
1606b     FC 0D FE F1 
1606f     06 0F FD F8 
16073     05 07 07 F9 
16077     F9 0A FF FE | 	byte	$fc, $0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe
1607b     0E 01 FA 02 
1607f     05 FF 01 00 
16083     09 05 02 0C 
16087     0C 0C F9 01 | 	byte	$0e, $01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01
1608b     00 FE 0E 08 
1608f     F2 03 0A 08 
16093     01 FE FA 04 
16097     FA 06 FF FE | 	byte	$00, $fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe
1609b     04 01 00 FC 
1609f     FA 03 09 F2 
160a3     FE FF 06 F9 
160a7     02 FD 01 0B | 	byte	$04, $01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b
160ab     F0 F9 08 05 
160af     04 0B F7 00 
160b3     00 01 01 07 
160b7     F4 FC 07 05 | 	byte	$f0, $f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05
160bb     00 ED 0E 09 
160bf     F0 05 02 FD 
160c3     09 FB F9 F6 
160c7     11 F8 05 02 | 	byte	$00, $ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02
160cb     01 ED 02 0B 
160cf     F6 F7 06 F9 
160d3     FA 07 F4 F5 
160d7     0B F0 F9 01 | 	byte	$01, $ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01
160db     04 FA FA F8 
160df     01 FF 01 08 
160e3     FA FD 01 05 
160e7     06 FC 05 FF | 	byte	$04, $fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff
160eb     02 15 FF F5 
160ef     15 01 F8 0F 
160f3     04 08 04 0B 
160f7     02 00 12 14 | 	byte	$02, $15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14
160fb     05 FA 0C 02 
160ff     0B 0F 05 FE 
16103     09 08 FE 06 
16107     0E 08 F5 09 | 	byte	$05, $fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09
1610b     07 0A 0B 03 
1610f     FB 04 F5 0A 
16113     10 05 F6 06 
16117     FD 06 00 01 | 	byte	$07, $0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01
1611b     08 FA FF 03 
1611f     FD FE F6 FA 
16123     F7 04 0A F5 
16127     01 FC FF F1 | 	byte	$08, $fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1
1612b     07 03 F6 EF 
1612f     FE FC FF 01 
16133     F8 F4 F4 FB 
16137     FF F1 FD 00 | 	byte	$07, $03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00
1613b     FB F3 F5 F8 
1613f     F9 01 03 E9 
16143     FE FF FB FE 
16147     F9 00 00 00 | 	byte	$fb, $f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00, $00
1614b     00 01 02 00 
1614f     02 FF 01 00 
16153     FC 08 07 EC 
16157     2B D3 10 D9 | 	byte	$00, $01, $02, $00, $02, $ff, $01, $00, $fc, $08, $07, $ec, $2b, $d3, $10, $d9
1615b     55 B5 FE 4F 
1615f     DF C5 78 BE 
16163     28 05 E6 2E 
16167     BC 5D D1 05 | 	byte	$55, $b5, $fe, $4f, $df, $c5, $78, $be, $28, $05, $e6, $2e, $bc, $5d, $d1, $05
1616b     E9 27 DB 2E 
1616f     D0 2E C0 57 
16173     97 33 D0 1D 
16177     F7 CD 3A CC | 	byte	$e9, $27, $db, $2e, $d0, $2e, $c0, $57, $97, $33, $d0, $1d, $f7, $cd, $3a, $cc
1617b     3C 8F 6C 96 
1617f     60 A3 63 A7 
16183     4A DE 08 0F 
16187     03 DD 25 EC | 	byte	$3c, $8f, $6c, $96, $60, $a3, $63, $a7, $4a, $de, $08, $0f, $03, $dd, $25, $ec
1618b     1B A9 68 A6 
1618f     3B C4 5E 90 
16193     5E B8 7F 87 
16197     67 D9 F6 38 | 	byte	$1b, $a9, $68, $a6, $3b, $c4, $5e, $90, $5e, $b8, $7f, $87, $67, $d9, $f6, $38
1619b     A4 53 BE 64 
1619f     9D 41 E9 07 
161a3     E4 2D CC 59 
161a7     AA 56 E0 F9 | 	byte	$a4, $53, $be, $64, $9d, $41, $e9, $07, $e4, $2d, $cc, $59, $aa, $56, $e0, $f9
161ab     1C DB 31 C8 
161af     3C AB 5E 9C 
161b3     4F D0 33 D4 
161b7     4D A0 61 BD | 	byte	$1c, $db, $31, $c8, $3c, $ab, $5e, $9c, $4f, $d0, $33, $d4, $4d, $a0, $61, $bd
161bb     2D DC 34 C0 
161bf     1A E5 38 D5 
161c3     FD 0F D3 2A 
161c7     C3 37 CC 49 | 	byte	$2d, $dc, $34, $c0, $1a, $e5, $38, $d5, $fd, $0f, $d3, $2a, $c3, $37, $cc, $49
161cb     B0 28 F2 E5 
161cf     34 C8 3E DB 
161d3     F3 0D 30 B2 
161d7     40 D9 15 0B | 	byte	$b0, $28, $f2, $e5, $34, $c8, $3e, $db, $f3, $0d, $30, $b2, $40, $d9, $15, $0b
161db     FE FE DF 1B 
161df     AD 3E C4 0B 
161e3     0E FD 37 B3 
161e7     5E AD 4D CA | 	byte	$fe, $fe, $df, $1b, $ad, $3e, $c4, $0b, $0e, $fd, $37, $b3, $5e, $ad, $4d, $ca
161eb     38 CB 3C DF 
161ef     01 20 F8 DD 
161f3     42 D5 2F CB 
161f7     47 B2 5D 9C | 	byte	$38, $cb, $3c, $df, $01, $20, $f8, $dd, $42, $d5, $2f, $cb, $47, $b2, $5d, $9c
161fb     48 C9 0D FB 
161ff     E5 29 D0 36 
16203     D3 30 B0 49 
16207     C7 28 D0 23 | 	byte	$48, $c9, $0d, $fb, $e5, $29, $d0, $36, $d3, $30, $b0, $49, $c7, $28, $d0, $23
1620b     D5 22 F0 EB 
1620f     29 D8 1B 05 
16213     DD 2C CC 39 
16217     D3 2B D9 41 | 	byte	$d5, $22, $f0, $eb, $29, $d8, $1b, $05, $dd, $2c, $cc, $39, $d3, $2b, $d9, $41
1621b     A2 64 AB 2C 
1621f     FB D8 23 E0 
16223     11 F5 17 09 
16227     E1 2C E1 0B | 	byte	$a2, $64, $ab, $2c, $fb, $d8, $23, $e0, $11, $f5, $17, $09, $e1, $2c, $e1, $0b
1622b     FD EF 17 B6 
1622f     44 E3 F7 20 
16233     D8 1B 0B EC 
16237     03 13 DF 25 | 	byte	$fd, $ef, $17, $b6, $44, $e3, $f7, $20, $d8, $1b, $0b, $ec, $03, $13, $df, $25
1623b     CB 38 BE 40 
1623f     B5 3D C5 52 
16243     C3 29 D6 2F 
16247     C2 43 D2 1A | 	byte	$cb, $38, $be, $40, $b5, $3d, $c5, $52, $c3, $29, $d6, $2f, $c2, $43, $d2, $1a
1624b     F2 10 F0 08 
1624f     0A 09 F0 FF 
16253     23 C8 45 BD 
16257     42 D7 2A D1 | 	byte	$f2, $10, $f0, $08, $0a, $09, $f0, $ff, $23, $c8, $45, $bd, $42, $d7, $2a, $d1
1625b     41 DE 06 0B 
1625f     F6 13 F8 14 
16263     EB 25 DD 23 
16267     EF 09 E1 22 | 	byte	$41, $de, $06, $0b, $f6, $13, $f8, $14, $eb, $25, $dd, $23, $ef, $09, $e1, $22
1626b     DC 30 CD 31 
1626f     F7 F5 07 1A 
16273     DB 12 07 F5 
16277     10 F3 12 F1 | 	byte	$dc, $30, $cd, $31, $f7, $f5, $07, $1a, $db, $12, $07, $f5, $10, $f3, $12, $f1
1627b     1F FD EC 34 
1627f     CF 2A E4 2F 
16283     CF 2E F2 FF 
16287     06 16 F8 0E | 	byte	$1f, $fd, $ec, $34, $cf, $2a, $e4, $2f, $cf, $2e, $f2, $ff, $06, $16, $f8, $0e
1628b     FB 07 25 D8 
1628f     25 E8 12 FA 
16293     0B E6 25 D0 
16297     3C C4 2E E0 | 	byte	$fb, $07, $25, $d8, $25, $e8, $12, $fa, $0b, $e6, $25, $d0, $3c, $c4, $2e, $e0
1629b     1B EC 0B 05 
1629f     F9 1A D7 20 
162a3     FD 01 04 DC 
162a7     35 DF 16 E5 | 	byte	$1b, $ec, $0b, $05, $f9, $1a, $d7, $20, $fd, $01, $04, $dc, $35, $df, $16, $e5
162ab     2C BE 3C DF 
162af     1E EE 10 04 
162b3     06 FD 0F F1 
162b7     0B F2 17 D8 | 	byte	$2c, $be, $3c, $df, $1e, $ee, $10, $04, $06, $fd, $0f, $f1, $0b, $f2, $17, $d8
162bb     2C F3 F5 1A 
162bf     DF 28 E9 FD 
162c3     16 EA 02 08 
162c7     00 FB 02 01 | 	byte	$2c, $f3, $f5, $1a, $df, $28, $e9, $fd, $16, $ea, $02, $08, $00, $fb, $02, $01
162cb     10 E2 20 D8 
162cf     36 DE 17 F1 
162d3     0D FE 04 FC 
162d7     18 E9 17 EE | 	byte	$10, $e2, $20, $d8, $36, $de, $17, $f1, $0d, $fe, $04, $fc, $18, $e9, $17, $ee
162db     09 1B E8 21 
162df     E0 29 F2 23 
162e3     D9 2C CC 46 
162e7     C0 35 E8 0B | 	byte	$09, $1b, $e8, $21, $e0, $29, $f2, $23, $d9, $2c, $cc, $46, $c0, $35, $e8, $0b
162eb     0B EB 2A E5 
162ef     17 F2 FD 22 
162f3     E3 14 09 E6 
162f7     FF 04 FC 0B | 	byte	$0b, $eb, $2a, $e5, $17, $f2, $fd, $22, $e3, $14, $09, $e6, $ff, $04, $fc, $0b
162fb     0D D6 46 C8 
162ff     1C 08 0D E0 
16303     46 C8 22 E2 
16307     F7 2A D8 2F | 	byte	$0d, $d6, $46, $c8, $1c, $08, $0d, $e0, $46, $c8, $22, $e2, $f7, $2a, $d8, $2f
1630b     DD 27 ED 24 
1630f     C9 3B DF F6 
16313     25 E3 17 E8 
16317     1F E9 07 F3 | 	byte	$dd, $27, $ed, $24, $c9, $3b, $df, $f6, $25, $e3, $17, $e8, $1f, $e9, $07, $f3
1631b     08 FD F0 1E 
1631f     D4 28 E5 1F 
16323     E5 11 F8 F0 
16327     2D C0 44 C4 | 	byte	$08, $fd, $f0, $1e, $d4, $28, $e5, $1f, $e5, $11, $f8, $f0, $2d, $c0, $44, $c4
1632b     35 DC 2A D4 
1632f     36 D0 2B DE 
16333     FD 12 FB F3 
16337     02 F5 11 FB | 	byte	$35, $dc, $2a, $d4, $36, $d0, $2b, $de, $fd, $12, $fb, $f3, $02, $f5, $11, $fb
1633b     E9 20 D8 34 
1633f     D3 2A DC 29 
16343     E6 10 FA F7 
16347     0B 13 D3 36 | 	byte	$e9, $20, $d8, $34, $d3, $2a, $dc, $29, $e6, $10, $fa, $f7, $0b, $13, $d3, $36
1634b     D1 16 FD F1 
1634f     16 11 C4 4B 
16353     C2 43 AF 5A 
16357     BD 20 06 E3 | 	byte	$d1, $16, $fd, $f1, $16, $11, $c4, $4b, $c2, $43, $af, $5a, $bd, $20, $06, $e3
1635b     23 E6 07 FA 
1635f     02 FC 10 F6 
16363     F8 1B D6 38 
16367     CF 18 FD 02 | 	byte	$23, $e6, $07, $fa, $02, $fc, $10, $f6, $f8, $1b, $d6, $38, $cf, $18, $fd, $02
1636b     18 D0 40 CC 
1636f     21 F3 02 FF 
16373     1A F0 00 10 
16377     E8 21 EB 20 | 	byte	$18, $d0, $40, $cc, $21, $f3, $02, $ff, $1a, $f0, $00, $10, $e8, $21, $eb, $20
1637b     E0 29 D3 25 
1637f     E5 0F FB 10 
16383     E9 27 D2 1F 
16387     DD 1F F5 01 | 	byte	$e0, $29, $d3, $25, $e5, $0f, $fb, $10, $e9, $27, $d2, $1f, $dd, $1f, $f5, $01
1638b     FB 1B EC FA 
1638f     1E E6 09 FD 
16393     0B F1 0E F7 
16397     0D EE 1C F1 | 	byte	$fb, $1b, $ec, $fa, $1e, $e6, $09, $fd, $0b, $f1, $0e, $f7, $0d, $ee, $1c, $f1
1639b     0E 05 F5 20 
1639f     E3 21 E8 08 
163a3     06 01 EA 20 
163a7     F0 04 0D F9 | 	byte	$0e, $05, $f5, $20, $e3, $21, $e8, $08, $06, $01, $ea, $20, $f0, $04, $0d, $f9
163ab     09 E6 2C D7 
163af     20 EF 0D 05 
163b3     F3 07 FC 17 
163b7     D4 3B C8 14 | 	byte	$09, $e6, $2c, $d7, $20, $ef, $0d, $05, $f3, $07, $fc, $17, $d4, $3b, $c8, $14
163bb     0A F0 0A 00 
163bf     00 01 06 F1 
163c3     22 DC 18 FE 
163c7     04 F1 27 CA | 	byte	$0a, $f0, $0a, $00, $00, $01, $06, $f1, $22, $dc, $18, $fe, $04, $f1, $27, $ca
163cb     3E D0 25 E2 
163cf     27 DC 21 E9 
163d3     1C DE 2B E3 
163d7     09 07 F2 17 | 	byte	$3e, $d0, $25, $e2, $27, $dc, $21, $e9, $1c, $de, $2b, $e3, $09, $07, $f2, $17
163db     F0 1C D9 2D 
163df     E3 11 FD 09 
163e3     F9 16 DF 2C 
163e7     E0 1C FC 06 | 	byte	$f0, $1c, $d9, $2d, $e3, $11, $fd, $09, $f9, $16, $df, $2c, $e0, $1c, $fc, $06
163eb     0A F1 05 04 
163ef     06 F5 18 F6 
163f3     08 FC 10 F1 
163f7     21 E3 15 F9 | 	byte	$0a, $f1, $05, $04, $06, $f5, $18, $f6, $08, $fc, $10, $f1, $21, $e3, $15, $f9
163fb     00 09 FD FF 
163ff     09 ED 1A E8 
16403     1E E4 21 E1 
16407     0E FE F1 14 | 	byte	$00, $09, $fd, $ff, $09, $ed, $1a, $e8, $1e, $e4, $21, $e1, $0e, $fe, $f1, $14
1640b     07 E6 25 EA 
1640f     06 09 00 FC 
16413     05 00 F2 1D 
16417     EE 18 E8 27 | 	byte	$07, $e6, $25, $ea, $06, $09, $00, $fc, $05, $00, $f2, $1d, $ee, $18, $e8, $27
1641b     DE 1A EF 17 
1641f     DC 29 E0 10 
16423     FD FA 10 EF 
16427     17 EF 12 EF | 	byte	$de, $1a, $ef, $17, $dc, $29, $e0, $10, $fd, $fa, $10, $ef, $17, $ef, $12, $ef
1642b     1A D9 30 DC 
1642f     13 EB 2B C7 
16433     43 D2 1C EE 
16437     13 E5 17 E9 | 	byte	$1a, $d9, $30, $dc, $13, $eb, $2b, $c7, $43, $d2, $1c, $ee, $13, $e5, $17, $e9
1643b     18 F0 07 02 
1643f     01 F3 13 F8 
16443     04 0D ED 14 
16447     ED 0A E5 27 | 	byte	$18, $f0, $07, $02, $01, $f3, $13, $f8, $04, $0d, $ed, $14, $ed, $0a, $e5, $27
1644b     DF 0F FB 08 
1644f     F7 1C E5 17 
16453     F1 FA 11 EE 
16457     17 FD F3 20 | 	byte	$df, $0f, $fb, $08, $f7, $1c, $e5, $17, $f1, $fa, $11, $ee, $17, $fd, $f3, $20
1645b     DF 24 DF 20 
1645f     ED FC 17 EE 
16463     16 E4 17 E4 
16467     21 E9 07 06 | 	byte	$df, $24, $df, $20, $ed, $fc, $17, $ee, $16, $e4, $17, $e4, $21, $e9, $07, $06
1646b     FE FA 11 E9 
1646f     11 01 F8 09 
16473     01 FD 0D 07 
16477     ED 15 ED 1B | 	byte	$fe, $fa, $11, $e9, $11, $01, $f8, $09, $01, $fd, $0d, $07, $ed, $15, $ed, $1b
1647b     E1 28 DD 25 
1647f     D5 31 DC 1C 
16483     EC 18 E9 18 
16487     EB 12 FA 05 | 	byte	$e1, $28, $dd, $25, $d5, $31, $dc, $1c, $ec, $18, $e9, $18, $eb, $12, $fa, $05
1648b     07 F5 10 E9 
1648f     1B F0 FB 17 
16493     DD 2B D3 28 
16497     E3 16 F9 FC | 	byte	$07, $f5, $10, $e9, $1b, $f0, $fb, $17, $dd, $2b, $d3, $28, $e3, $16, $f9, $fc
1649b     08 01 00 F9 
1649f     13 EF 0F F2 
164a3     04 FD 02 03 
164a7     FC 0D EF 1C | 	byte	$08, $01, $00, $f9, $13, $ef, $0f, $f2, $04, $fd, $02, $03, $fc, $0d, $ef, $1c
164ab     E4 21 E5 15 
164af     F0 17 E9 15 
164b3     F5 01 0B EF 
164b7     13 F7 00 0A | 	byte	$e4, $21, $e5, $15, $f0, $17, $e9, $15, $f5, $01, $0b, $ef, $13, $f7, $00, $0a
164bb     E5 24 D9 20 
164bf     FD F6 08 FA 
164c3     0E EE 16 EA 
164c7     1C E8 1E E4 | 	byte	$e5, $24, $d9, $20, $fd, $f6, $08, $fa, $0e, $ee, $16, $ea, $1c, $e8, $1e, $e4
164cb     22 DD 2B CF 
164cf     37 CB 2C E4 
164d3     11 FB F5 1F 
164d7     D1 30 DC 27 | 	byte	$22, $dd, $2b, $cf, $37, $cb, $2c, $e4, $11, $fb, $f5, $1f, $d1, $30, $dc, $27
164db     DD 22 E9 06 
164df     0F E6 1C E8 
164e3     17 F2 04 FE 
164e7     04 FC 09 FF | 	byte	$dd, $22, $e9, $06, $0f, $e6, $1c, $e8, $17, $f2, $04, $fe, $04, $fc, $09, $ff
164eb     F7 16 EA 17 
164ef     F1 0A 02 FD 
164f3     01 05 04 F1 
164f7     22 D7 30 D7 | 	byte	$f7, $16, $ea, $17, $f1, $0a, $02, $fd, $01, $05, $04, $f1, $22, $d7, $30, $d7
164fb     22 F0 0F F6 
164ff     12 ED 14 F3 
16503     07 04 00 F9 
16507     16 E1 27 DF | 	byte	$22, $f0, $0f, $f6, $12, $ed, $14, $f3, $07, $04, $00, $f9, $16, $e1, $27, $df
1650b     22 E3 0E FE 
1650f     F7 14 EF 15 
16513     ED 1A F1 FE 
16517     0D F8 FE 08 | 	byte	$22, $e3, $0e, $fe, $f7, $14, $ef, $15, $ed, $1a, $f1, $fe, $0d, $f8, $fe, $08
1651b     F2 10 F8 02 
1651f     0D EE 15 F0 
16523     0D F9 01 02 
16527     06 00 06 F9 | 	byte	$f2, $10, $f8, $02, $0d, $ee, $15, $f0, $0d, $f9, $01, $02, $06, $00, $06, $f9
1652b     10 F6 15 F3 
1652f     0B FE FD 00 
16533     03 03 EE 18 
16537     E9 18 EA 15 | 	byte	$10, $f6, $15, $f3, $0b, $fe, $fd, $00, $03, $03, $ee, $18, $e9, $18, $ea, $15
1653b     F1 09 F8 0E 
1653f     F2 08 01 02 
16543     01 03 FC 06 
16547     FC 02 01 00 | 	byte	$f1, $09, $f8, $0e, $f2, $08, $01, $02, $01, $03, $fc, $06, $fc, $02, $01, $00
1654b     01 FF 00 00 
1654f     01 00 FC 06 
16553     F6 12 EB 11 
16557     F8 05 F9 0A | 	byte	$01, $ff, $00, $00, $01, $00, $fc, $06, $f6, $12, $eb, $11, $f8, $05, $f9, $0a
1655b     F6 07 FC 07 
1655f     FA 03 06 FD 
16563     FE 07 FC FC 
16567     0D F1 0F F2 | 	byte	$f6, $07, $fc, $07, $fa, $03, $06, $fd, $fe, $07, $fc, $fc, $0d, $f1, $0f, $f2
1656b     10 F1 10 F6 
1656f     00 06 F8 06 
16573     FD 00 F8 09 
16577     FC 05 F8 08 | 	byte	$10, $f1, $10, $f6, $00, $06, $f8, $06, $fd, $00, $f8, $09, $fc, $05, $f8, $08
1657b     F8 05 00 FC 
1657f     09 F1 12 EB 
16583     15 F3 04 04 
16587     F9 13 E9 18 | 	byte	$f8, $05, $00, $fc, $09, $f1, $12, $eb, $15, $f3, $04, $04, $f9, $13, $e9, $18
1658b     ED 0F F8 07 
1658f     FC 07 FF F8 
16593     0D F9 04 FF 
16597     04 F7 0F F6 | 	byte	$ed, $0f, $f8, $07, $fc, $07, $ff, $f8, $0d, $f9, $04, $ff, $04, $f7, $0f, $f6
1659b     05 FF 03 01 
1659f     00 FE 04 FE 
165a3     01 FD 05 FF 
165a7     00 04 F9 10 | 	byte	$05, $ff, $03, $01, $00, $fe, $04, $fe, $01, $fd, $05, $ff, $00, $04, $f9, $10
165ab     F1 0E F2 15 
165af     EA 13 ED 13 
165b3     ED 0B F6 0D 
165b7     EF 0E F3 0E | 	byte	$f1, $0e, $f2, $15, $ea, $13, $ed, $13, $ed, $0b, $f6, $0d, $ef, $0e, $f3, $0e
165bb     EF 03 03 FA 
165bf     06 FC 01 00 
165c3     03 F8 09 FB 
165c7     04 F2 15 EF | 	byte	$ef, $03, $03, $fa, $06, $fc, $01, $00, $03, $f8, $09, $fb, $04, $f2, $15, $ef
165cb     0B F9 02 07 
165cf     F3 11 F2 0A 
165d3     FF F8 09 F9 
165d7     FF 0A F5 09 | 	byte	$0b, $f9, $02, $07, $f3, $11, $f2, $0a, $ff, $f8, $09, $f9, $ff, $0a, $f5, $09
165db     F1 12 EC 0E 
165df     FC 05 F5 0D 
165e3     F8 FF 02 01 
165e7     FF FD 0E EF | 	byte	$f1, $12, $ec, $0e, $fc, $05, $f5, $0d, $f8, $ff, $02, $01, $ff, $fd, $0e, $ef
165eb     0F F3 08 FC 
165ef     02 FF 00 01 
165f3     03 FA 03 01 
165f7     07 F6 0D F9 | 	byte	$0f, $f3, $08, $fc, $02, $ff, $00, $01, $03, $fa, $03, $01, $07, $f6, $0d, $f9
165fb     04 FF 03 FB 
165ff     06 FA FC 03 
16603     FD 09 FB 05 
16607     FB 07 FA 06 | 	byte	$04, $ff, $03, $fb, $06, $fa, $fc, $03, $fd, $09, $fb, $05, $fb, $07, $fa, $06
1660b     06 F5 11 EF 
1660f     11 EF 14 EE 
16613     12 F5 09 FD 
16617     FC 00 0D F1 | 	byte	$06, $f5, $11, $ef, $11, $ef, $14, $ee, $12, $f5, $09, $fd, $fc, $00, $0d, $f1
1661b     13 EE 11 F1 
1661f     13 F1 0B F5 
16623     0D EB 18 E0 
16627     16 F0 03 01 | 	byte	$13, $ee, $11, $f1, $13, $f1, $0b, $f5, $0d, $eb, $18, $e0, $16, $f0, $03, $01
1662b     FA 0A F6 07 
1662f     F7 0A F8 06 
16633     02 FD 05 FC 
16637     04 FC 05 FC | 	byte	$fa, $0a, $f6, $07, $f7, $0a, $f8, $06, $02, $fd, $05, $fc, $04, $fc, $05, $fc
1663b     04 FE FF 03 
1663f     FC 07 F5 0E 
16643     F3 09 FB 02 
16647     01 03 FC 08 | 	byte	$04, $fe, $ff, $03, $fc, $07, $f5, $0e, $f3, $09, $fb, $02, $01, $03, $fc, $08
1664b     F9 08 FD FD 
1664f     09 FA 06 FC 
16653     00 03 01 FE 
16657     07 FD 01 0A | 	byte	$f9, $08, $fd, $fd, $09, $fa, $06, $fc, $00, $03, $01, $fe, $07, $fd, $01, $0a
1665b     F5 06 FF 04 
1665f     FD 03 FE 06 
16663     F8 0D FB 05 
16667     01 00 FC 0F | 	byte	$f5, $06, $ff, $04, $fd, $03, $fe, $06, $f8, $0d, $fb, $05, $01, $00, $fc, $0f
1666b     F2 0D F8 11 
1666f     EF 14 EF 0E 
16673     EE 16 EF 02 
16677     06 F8 0A F6 | 	byte	$f2, $0d, $f8, $11, $ef, $14, $ef, $0e, $ee, $16, $ef, $02, $06, $f8, $0a, $f6
1667b     06 FA 0E F1 
1667f     09 FE 01 04 
16683     F7 0A F9 03 
16687     FF FF 09 F3 | 	byte	$06, $fa, $0e, $f1, $09, $fe, $01, $04, $f7, $0a, $f9, $03, $ff, $ff, $09, $f3
1668b     0E F5 0A F7 
1668f     05 FC 03 FA 
16693     0A F8 05 FD 
16697     0B F5 0B F7 | 	byte	$0e, $f5, $0a, $f7, $05, $fc, $03, $fa, $0a, $f8, $05, $fd, $0b, $f5, $0b, $f7
1669b     08 F9 06 00 
1669f     FC 07 F8 08 
166a3     F7 10 EA 1A 
166a7     EC 14 F5 07 | 	byte	$08, $f9, $06, $00, $fc, $07, $f8, $08, $f7, $10, $ea, $1a, $ec, $14, $f5, $07
166ab     FD FD 03 FF 
166af     03 FB 0B F6 
166b3     08 F8 09 FA 
166b7     04 FD 08 F5 | 	byte	$fd, $fd, $03, $ff, $03, $fb, $0b, $f6, $08, $f8, $09, $fa, $04, $fd, $08, $f5
166bb     0D F6 0B F8 
166bf     07 F7 0A FA 
166c3     04 FF 03 02 
166c7     FB 07 F7 08 | 	byte	$0d, $f6, $0b, $f8, $07, $f7, $0a, $fa, $04, $ff, $03, $02, $fb, $07, $f7, $08
166cb     FB 04 FD 02 
166cf     01 FD 07 FB 
166d3     05 01 FF 03 
166d7     F9 09 FB 01 | 	byte	$fb, $04, $fd, $02, $01, $fd, $07, $fb, $05, $01, $ff, $03, $f9, $09, $fb, $01
166db     04 F9 08 F9 
166df     02 02 FB 05 
166e3     FA 05 FF FF 
166e7     FF 08 F7 03 | 	byte	$04, $f9, $08, $f9, $02, $02, $fb, $05, $fa, $05, $ff, $ff, $ff, $08, $f7, $03
166eb     01 00 05 F6 
166ef     0E EF 11 F0 
166f3     0B F9 01 02 
166f7     FD 04 FE 02 | 	byte	$01, $00, $05, $f6, $0e, $ef, $11, $f0, $0b, $f9, $01, $02, $fd, $04, $fe, $02
166fb     FA 0F F1 0B 
166ff     F9 08 F9 04 
16703     FE FF 02 02 
16707     FC 06 FC 03 | 	byte	$fa, $0f, $f1, $0b, $f9, $08, $f9, $04, $fe, $ff, $02, $02, $fc, $06, $fc, $03
1670b     FE 02 FE 03 
1670f     FB 04 FD 00 
16713     05 F7 08 F9 
16717     0A F9 FF 04 | 	byte	$fe, $02, $fe, $03, $fb, $04, $fd, $00, $05, $f7, $08, $f9, $0a, $f9, $ff, $04
1671b     FE 01 03 FF 
1671f     02 FE 04 FF 
16723     04 FF 07 01 
16727     01 00 07 FB | 	byte	$fe, $01, $03, $ff, $02, $fe, $04, $ff, $04, $ff, $07, $01, $01, $00, $07, $fb
1672b     04 01 01 01 
1672f     01 04 FF 02 
16733     04 FC 04 02 
16737     FB 08 FE 03 | 	byte	$04, $01, $01, $01, $01, $04, $ff, $02, $04, $fc, $04, $02, $fb, $08, $fe, $03
1673b     FD 0A F9 07 
1673f     FD 04 FB 03 
16743     01 02 02 01 
16747     00 FF 08 F7 | 	byte	$fd, $0a, $f9, $07, $fd, $04, $fb, $03, $01, $02, $02, $01, $00, $ff, $08, $f7
1674b     09 FA 09 F9 
1674f     08 F7 0E F5 
16753     09 FC 03 FD 
16757     08 FC 09 F8 | 	byte	$09, $fa, $09, $f9, $08, $f7, $0e, $f5, $09, $fc, $03, $fd, $08, $fc, $09, $f8
1675b     0B FA 04 01 
1675f     02 03 FC 09 
16763     F9 09 FA 0D 
16767     F8 0D F6 0D | 	byte	$0b, $fa, $04, $01, $02, $03, $fc, $09, $f9, $09, $fa, $0d, $f8, $0d, $f6, $0d
1676b     F9 09 FA 07 
1676f     FF 02 00 03 
16773     01 06 FC 0B 
16777     F9 0A F6 12 | 	byte	$f9, $09, $fa, $07, $ff, $02, $00, $03, $01, $06, $fc, $0b, $f9, $0a, $f6, $12
1677b     F6 09 FD 07 
1677f     FF FF 07 FD 
16783     05 FF 05 FF 
16787     01 05 FA 07 | 	byte	$f6, $09, $fd, $07, $ff, $ff, $07, $fd, $05, $ff, $05, $ff, $01, $05, $fa, $07
1678b     FC 01 02 FF 
1678f     00 FD 04 FC 
16793     01 02 03 FC 
16797     FD 05 FF 02 | 	byte	$fc, $01, $02, $ff, $00, $fd, $04, $fc, $01, $02, $03, $fc, $fd, $05, $ff, $02
1679b     FD 06 F8 09 
1679f     F5 08 FD 00 
167a3     01 01 00 02 
167a7     FE 02 00 02 | 	byte	$fd, $06, $f8, $09, $f5, $08, $fd, $00, $01, $01, $00, $02, $fe, $02, $00, $02
167ab     FA 0A FC 00 
167af     FC 03 FE 02 
167b3     FF FE 08 F7 
167b7     0D F7 06 FA | 	byte	$fa, $0a, $fc, $00, $fc, $03, $fe, $02, $ff, $fe, $08, $f7, $0d, $f7, $06, $fa
167bb     09 F9 04 FA 
167bf     09 F6 0A F9 
167c3     05 FD 04 FA 
167c7     0A FC 01 FF | 	byte	$09, $f9, $04, $fa, $09, $f6, $0a, $f9, $05, $fd, $04, $fa, $0a, $fc, $01, $ff
167cb     08 F9 06 FD 
167cf     03 FE 04 02 
167d3     00 00 02 01 
167d7     00 03 FE 07 | 	byte	$08, $f9, $06, $fd, $03, $fe, $04, $02, $00, $00, $02, $01, $00, $03, $fe, $07
167db     FF FC 08 F8 
167df     06 FD 01 FD 
167e3     03 FF 05 F7 
167e7     11 F2 0A F9 | 	byte	$ff, $fc, $08, $f8, $06, $fd, $01, $fd, $03, $ff, $05, $f7, $11, $f2, $0a, $f9
167eb     0A F8 04 FC 
167ef     03 FE 03 FF 
167f3     FF 01 00 00 
167f7     FF 02 01 FD | 	byte	$0a, $f8, $04, $fc, $03, $fe, $03, $ff, $ff, $01, $00, $00, $ff, $02, $01, $fd
167fb     04 00 FC 07 
167ff     F8 08 FC 06 
16803     F7 09 F7 09 
16807     FB 01 FE 06 | 	byte	$04, $00, $fc, $07, $f8, $08, $fc, $06, $f7, $09, $f7, $09, $fb, $01, $fe, $06
1680b     F8 0B F8 04 
1680f     02 FF 01 03 
16813     FB 07 F9 04 
16817     01 00 02 03 | 	byte	$f8, $0b, $f8, $04, $02, $ff, $01, $03, $fb, $07, $f9, $04, $01, $00, $02, $03
1681b     FA 07 FC 02 
1681f     FD 05 FD 01 
16823     01 00 00 02 
16827     02 FD 04 FE | 	byte	$fa, $07, $fc, $02, $fd, $05, $fd, $01, $01, $00, $00, $02, $02, $fd, $04, $fe
1682b     03 00 FF 02 
1682f     00 03 FC 0A 
16833     FA 0A F7 07 
16837     FD 01 FF 01 | 	byte	$03, $00, $ff, $02, $00, $03, $fc, $0a, $fa, $0a, $f7, $07, $fd, $01, $ff, $01
1683b     00 FE 01 FD 
1683f     03 FF 01 FF 
16843     FF 03 F9 0A 
16847     F7 04 01 FE | 	byte	$00, $fe, $01, $fd, $03, $ff, $01, $ff, $ff, $03, $f9, $0a, $f7, $04, $01, $fe
1684b     FF 02 00 01 
1684f     00 00 01 00 
16853     FF 02 FC 06 
16857     FB 03 FC 08 | 	byte	$ff, $02, $00, $01, $00, $00, $01, $00, $ff, $02, $fc, $06, $fb, $03, $fc, $08
1685b     F9 05 FF FF 
1685f     05 FC 03 FE 
16863     06 FB 07 FD 
16867     04 FF 02 FF | 	byte	$f9, $05, $ff, $ff, $05, $fc, $03, $fe, $06, $fb, $07, $fd, $04, $ff, $02, $ff
1686b     01 01 00 FD 
1686f     02 01 FD 03 
16873     FE 04 FB 06 
16877     FB 05 FD 03 | 	byte	$01, $01, $00, $fd, $02, $01, $fd, $03, $fe, $04, $fb, $06, $fb, $05, $fd, $03
1687b     01 FD 03 FB 
1687f     06 FC 01 FD 
16883     07 F7 07 F7 
16887     0A F9 07 FD | 	byte	$01, $fd, $03, $fb, $06, $fc, $01, $fd, $07, $f7, $07, $f7, $0a, $f9, $07, $fd
1688b     03 FF 03 FD 
1688f     01 01 00 00 
16893     03 FD 01 01 
16897     00 FE 04 FF | 	byte	$03, $ff, $03, $fd, $01, $01, $00, $00, $03, $fd, $01, $01, $00, $fe, $04, $ff
1689b     00 01 FD 05 
1689f     F9 06 FC 04 
168a3     FB 01 02 01 
168a7     02 FB 05 FC | 	byte	$00, $01, $fd, $05, $f9, $06, $fc, $04, $fb, $01, $02, $01, $02, $fb, $05, $fc
168ab     04 FE FF 00 
168af     02 FD 04 FE 
168b3     02 FF 00 01 
168b7     02 FD 02 FE | 	byte	$04, $fe, $ff, $00, $02, $fd, $04, $fe, $02, $ff, $00, $01, $02, $fd, $02, $fe
168bb     03 00 02 FF 
168bf     06 F9 07 FF 
168c3     FC 07 FF 02 
168c7     FD 05 FC 03 | 	byte	$03, $00, $02, $ff, $06, $f9, $07, $ff, $fc, $07, $ff, $02, $fd, $05, $fc, $03
168cb     FF 03 FD 03 
168cf     FD 04 FD 04 
168d3     FB 04 FB 05 
168d7     FB 06 F9 05 | 	byte	$ff, $03, $fd, $03, $fd, $04, $fd, $04, $fb, $04, $fb, $05, $fb, $06, $f9, $05
168db     FF 03 FC 03 
168df     01 FE 06 FA 
168e3     04 01 03 FD 
168e7     02 00 FF 01 | 	byte	$ff, $03, $fc, $03, $01, $fe, $06, $fa, $04, $01, $03, $fd, $02, $00, $ff, $01
168eb     01 01 03 00 
168ef     FE 02 02 00 
168f3     02 00 04 FF 
168f7     04 01 FF 02 | 	byte	$01, $01, $03, $00, $fe, $02, $02, $00, $02, $00, $04, $ff, $04, $01, $ff, $02
168fb     02 FE FF 06 
168ff     FD 03 03 FC 
16903     06 FE 08 FC 
16907     05 00 00 00 | 	byte	$02, $fe, $ff, $06, $fd, $03, $03, $fc, $06, $fe, $08, $fc, $05, $00, $00, $00
1690b     00 00 00 00 
1690f     00 00 00 00 
16913     00 00 00 00 
16917     00 00 00 00 
1691b     00          | 	byte	$00[17]
1691c     D3 CA D2 D6 
16920     E3 2D 3B 32 
16924     2E 2A 25 21 
16928     1F 1D 18 02 | 	byte	$d3, $ca, $d2, $d6, $e3, $2d, $3b, $32, $2e, $2a, $25, $21, $1f, $1d, $18, $02
1692c     BD BA C5 C8 
16930     CE D2 D7 DA 
16934     E2 DC E7 E7 
16938     E8 EF F3 FC | 	byte	$bd, $ba, $c5, $c8, $ce, $d2, $d7, $da, $e2, $dc, $e7, $e7, $e8, $ef, $f3, $fc
1693c     4E 5B 3A 28 
16940     3B 3A 2E 20 
16944     1D 21 36 29 
16948     1C 1A 12 DB | 	byte	$4e, $5b, $3a, $28, $3b, $3a, $2e, $20, $1d, $21, $36, $29, $1c, $1a, $12, $db
1694c     A0 A4 AE B6 
16950     BE C5 D8 DF 
16954     E3 F3 0A 07 
16958     05 04 04 24 | 	byte	$a0, $a4, $ae, $b6, $be, $c5, $d8, $df, $e3, $f3, $0a, $07, $05, $04, $04, $24
1695c     57 55 4A 42 
16960     3C 33 21 1A 
16964     17 06 EF F2 
16968     F5 F6 F7 D5 | 	byte	$57, $55, $4a, $42, $3c, $33, $21, $1a, $17, $06, $ef, $f2, $f5, $f6, $f7, $d5
1696c     A8 A9 B4 BC 
16970     C3 CB DF E6 
16974     E9 FD 12 0F 
16978     0D 0B 0B 2B | 	byte	$a8, $a9, $b4, $bc, $c3, $cb, $df, $e6, $e9, $fd, $12, $0f, $0d, $0b, $0b, $2b
1697c     59 56 4C 44 
16980     3D 34 1F 19 
16984     16 01 EB EE 
16988     F1 F3 F2 CF | 	byte	$59, $56, $4c, $44, $3d, $34, $1f, $19, $16, $01, $eb, $ee, $f1, $f3, $f2, $cf
1698c     A6 A9 B5 BC 
16990     C3 CF E2 E8 
16994     EC 05 18 14 
16998     11 0F 10 36 | 	byte	$a6, $a9, $b5, $bc, $c3, $cf, $e2, $e8, $ec, $05, $18, $14, $11, $0f, $10, $36
1699c     5A 57 4C 44 
169a0     3D 32 1D 17 
169a4     13 F7 E5 E9 
169a8     ED EF ED C7 | 	byte	$5a, $57, $4c, $44, $3d, $32, $1d, $17, $13, $f7, $e5, $e9, $ed, $ef, $ed, $c7
169ac     A7 AA B4 BC 
169b0     C3 D1 E5 EA 
169b4     EF 0C 1D 19 
169b8     16 13 17 38 | 	byte	$a7, $aa, $b4, $bc, $c3, $d1, $e5, $ea, $ef, $0c, $1d, $19, $16, $13, $17, $38
169bc     5A 57 4D 45 
169c0     3D 2E 1B 16 
169c4     10 F2 E1 E5 
169c8     E9 EC E7 C5 | 	byte	$5a, $57, $4d, $45, $3d, $2e, $1b, $16, $10, $f2, $e1, $e5, $e9, $ec, $e7, $c5
169cc     A7 AA B4 BD 
169d0     C5 D5 E7 EC 
169d4     F4 11 22 1D 
169d8     19 16 1D 3F | 	byte	$a7, $aa, $b4, $bd, $c5, $d5, $e7, $ec, $f4, $11, $22, $1d, $19, $16, $1d, $3f
169dc     59 57 4D 44 
169e0     3B 2A 18 14 
169e4     0B EC DC E1 
169e8     E5 E8 DF C2 | 	byte	$59, $57, $4d, $44, $3b, $2a, $18, $14, $0b, $ec, $dc, $e1, $e5, $e8, $df, $c2
169ec     A7 A9 B4 BC 
169f0     C6 D8 E8 ED 
169f4     F8 16 25 21 
169f8     1D 19 22 42 | 	byte	$a7, $a9, $b4, $bc, $c6, $d8, $e8, $ed, $f8, $16, $25, $21, $1d, $19, $22, $42
169fc     59 57 4C 44 
16a00     39 26 16 12 
16a04     03 E7 D7 DC 
16a08     E1 E4 D9 BC | 	byte	$59, $57, $4c, $44, $39, $26, $16, $12, $03, $e7, $d7, $dc, $e1, $e4, $d9, $bc
16a0c     A6 A9 B4 BC 
16a10     C8 DA EA EF 
16a14     FD 1A 29 25 
16a18     20 1D 2A 44 | 	byte	$a6, $a9, $b4, $bc, $c8, $da, $ea, $ef, $fd, $1a, $29, $25, $20, $1d, $2a, $44
16a1c     59 57 4C 43 
16a20     36 23 14 10 
16a24     FF E4 D4 D8 
16a28     DD E0 D4 B9 | 	byte	$59, $57, $4c, $43, $36, $23, $14, $10, $ff, $e4, $d4, $d8, $dd, $e0, $d4, $b9
16a2c     A7 AA B3 BD 
16a30     CB DD EC F0 
16a34     02 1D 2C 28 
16a38     23 21 2E 46 | 	byte	$a7, $aa, $b3, $bd, $cb, $dd, $ec, $f0, $02, $1d, $2c, $28, $23, $21, $2e, $46
16a3c     59 56 4C 43 
16a40     35 21 13 0E 
16a44     FC E0 D2 D5 
16a48     DA DD D0 B8 | 	byte	$59, $56, $4c, $43, $35, $21, $13, $0e, $fc, $e0, $d2, $d5, $da, $dd, $d0, $b8
16a4c     A7 AA B4 BE 
16a50     CD E1 ED F3 
16a54     04 1E 2E 2C 
16a58     26 25 33 4A | 	byte	$a7, $aa, $b4, $be, $cd, $e1, $ed, $f3, $04, $1e, $2e, $2c, $26, $25, $33, $4a
16a5c     58 56 4C 42 
16a60     30 1F 11 0C 
16a64     F9 DE D0 D1 
16a68     D8 D8 CA B7 | 	byte	$58, $56, $4c, $42, $30, $1f, $11, $0c, $f9, $de, $d0, $d1, $d8, $d8, $ca, $b7
16a6c     A8 AB B4 C0 
16a70     D0 E2 EF F5 
16a74     09 20 30 2F 
16a78     29 29 38 4B | 	byte	$a8, $ab, $b4, $c0, $d0, $e2, $ef, $f5, $09, $20, $30, $2f, $29, $29, $38, $4b
16a7c     58 56 4B 40 
16a80     2E 1C 11 09 
16a84     F4 DE CD CE 
16a88     D5 D4 C6 B4 | 	byte	$58, $56, $4b, $40, $2e, $1c, $11, $09, $f4, $de, $cd, $ce, $d5, $d4, $c6, $b4
16a8c     A9 AB B5 C1 
16a90     D1 E4 EF F7 
16a94     0A 23 31 32 
16a98     2C 2D 3C 4C | 	byte	$a9, $ab, $b5, $c1, $d1, $e4, $ef, $f7, $0a, $23, $31, $32, $2c, $2d, $3c, $4c
16a9c     57 55 4C 3E 
16aa0     2D 1B 0F 08 
16aa4     F5 DD CC CC 
16aa8     D3 D0 C3 B3 | 	byte	$57, $55, $4c, $3e, $2d, $1b, $0f, $08, $f5, $dd, $cc, $cc, $d3, $d0, $c3, $b3
16aac     A9 AB B6 C3 
16ab0     D6 E5 EF F9 
16ab4     0C 23 33 34 
16ab8     2E 31 3E 4E | 	byte	$a9, $ab, $b6, $c3, $d6, $e5, $ef, $f9, $0c, $23, $33, $34, $2e, $31, $3e, $4e
16abc     57 55 4B 3C 
16ac0     2A 1A 10 06 
16ac4     F3 DB CC CA 
16ac8     CF CC BF B2 | 	byte	$57, $55, $4b, $3c, $2a, $1a, $10, $06, $f3, $db, $cc, $ca, $cf, $cc, $bf, $b2
16acc     A9 AB B7 C5 
16ad0     D6 E7 F0 FB 
16ad4     0E 25 33 36 
16ad8     31 35 40 4E | 	byte	$a9, $ab, $b7, $c5, $d6, $e7, $f0, $fb, $0e, $25, $33, $36, $31, $35, $40, $4e
16adc     55 54 49 3A 
16ae0     28 19 0E 04 
16ae4     F1 DB CC C8 
16ae8     CC C8 BD B1 | 	byte	$55, $54, $49, $3a, $28, $19, $0e, $04, $f1, $db, $cc, $c8, $cc, $c8, $bd, $b1
16aec     AA AC B7 C8 
16af0     D7 E7 F2 FC 
16af4     10 24 33 38 
16af8     34 39 43 4F | 	byte	$aa, $ac, $b7, $c8, $d7, $e7, $f2, $fc, $10, $24, $33, $38, $34, $39, $43, $4f
16afc     55 54 49 39 
16b00     27 18 0E 02 
16b04     F1 DB CB C7 
16b08     C9 C4 BB B0 | 	byte	$55, $54, $49, $39, $27, $18, $0e, $02, $f1, $db, $cb, $c7, $c9, $c4, $bb, $b0
16b0c     AB AD B8 C8 
16b10     DA E7 F2 FF 
16b14     10 25 33 39 
16b18     38 3C 46 4F | 	byte	$ab, $ad, $b8, $c8, $da, $e7, $f2, $ff, $10, $25, $33, $39, $38, $3c, $46, $4f
16b1c     55 53 48 36 
16b20     25 18 0D 01 
16b24     EE DA CC C6 
16b28     C6 C1 B8 B0 | 	byte	$55, $53, $48, $36, $25, $18, $0d, $01, $ee, $da, $cc, $c6, $c6, $c1, $b8, $b0
16b2c     AB AE BA CB 
16b30     DA E8 F3 00 
16b34     13 25 34 3B 
16b38     3B 40 48 50 | 	byte	$ab, $ae, $ba, $cb, $da, $e8, $f3, $00, $13, $25, $34, $3b, $3b, $40, $48, $50
16b3c     55 52 45 35 
16b40     25 17 0C FE 
16b44     EE DB CB C5 
16b48     C2 BF B7 B0 | 	byte	$55, $52, $45, $35, $25, $17, $0c, $fe, $ee, $db, $cb, $c5, $c2, $bf, $b7, $b0
16b4c     AC AE BB CB 
16b50     DB E9 F3 01 
16b54     12 25 34 3B 
16b58     3E 42 49 51 | 	byte	$ac, $ae, $bb, $cb, $db, $e9, $f3, $01, $12, $25, $34, $3b, $3e, $42, $49, $51
16b5c     54 51 43 34 
16b60     24 17 0B FC 
16b64     ED DA CB C4 
16b68     C0 BC B5 AF | 	byte	$54, $51, $43, $34, $24, $17, $0b, $fc, $ed, $da, $cb, $c4, $c0, $bc, $b5, $af
16b6c     AC B0 BC CD 
16b70     DC E9 F4 03 
16b74     14 25 34 3C 
16b78     41 45 4B 51 | 	byte	$ac, $b0, $bc, $cd, $dc, $e9, $f4, $03, $14, $25, $34, $3c, $41, $45, $4b, $51
16b7c     54 50 44 34 
16b80     23 17 0B FC 
16b84     EB DB CD C4 
16b88     BE BA B4 AF | 	byte	$54, $50, $44, $34, $23, $17, $0b, $fc, $eb, $db, $cd, $c4, $be, $ba, $b4, $af
16b8c     AD B1 BE CD 
16b90     DD EA F5 05 
16b94     16 25 33 3D 
16b98     43 47 4C 51 | 	byte	$ad, $b1, $be, $cd, $dd, $ea, $f5, $05, $16, $25, $33, $3d, $43, $47, $4c, $51
16b9c     53 4F 42 32 
16ba0     23 16 0B FB 
16ba4     EC DB CC C3 
16ba8     BC B8 B4 AF | 	byte	$53, $4f, $42, $32, $23, $16, $0b, $fb, $ec, $db, $cc, $c3, $bc, $b8, $b4, $af
16bac     AD B2 BF CE 
16bb0     DE EA F7 05 
16bb4     16 26 33 3E 
16bb8     45 49 4D 51 | 	byte	$ad, $b2, $bf, $ce, $de, $ea, $f7, $05, $16, $26, $33, $3e, $45, $49, $4d, $51
16bbc     52 4D 40 31 
16bc0     22 15 09 F9 
16bc4     EA D9 CC C2 
16bc8     BA B6 B2 AF | 	byte	$52, $4d, $40, $31, $22, $15, $09, $f9, $ea, $d9, $cc, $c2, $ba, $b6, $b2, $af
16bcc     AE B4 BF CF 
16bd0     DE EA F8 07 
16bd4     17 27 33 3E 
16bd8     47 4A 4E 51 | 	byte	$ae, $b4, $bf, $cf, $de, $ea, $f8, $07, $17, $27, $33, $3e, $47, $4a, $4e, $51
16bdc     51 4C 40 31 
16be0     22 15 07 F8 
16be4     E7 DA CD C1 
16be8     B9 B4 B2 AF | 	byte	$51, $4c, $40, $31, $22, $15, $07, $f8, $e7, $da, $cd, $c1, $b9, $b4, $b2, $af
16bec     AF B5 C0 CF 
16bf0     DE EB F9 09 
16bf4     18 27 34 3E 
16bf8     47 4C 4F 51 | 	byte	$af, $b5, $c0, $cf, $de, $eb, $f9, $09, $18, $27, $34, $3e, $47, $4c, $4f, $51
16bfc     50 4A 3F 30 
16c00     21 16 07 F7 
16c04     E7 D9 CD C1 
16c08     B8 B4 B1 B0 | 	byte	$50, $4a, $3f, $30, $21, $16, $07, $f7, $e7, $d9, $cd, $c1, $b8, $b4, $b1, $b0
16c0c     B0 B7 C2 D1 
16c10     DE EB FB 0A 
16c14     1A 28 33 3F 
16c18     48 4D 4F 50 | 	byte	$b0, $b7, $c2, $d1, $de, $eb, $fb, $0a, $1a, $28, $33, $3f, $48, $4d, $4f, $50
16c1c     4F 49 3D 2E 
16c20     21 14 06 F5 
16c24     E6 D8 CB C1 
16c28     B7 B3 B1 B0 | 	byte	$4f, $49, $3d, $2e, $21, $14, $06, $f5, $e6, $d8, $cb, $c1, $b7, $b3, $b1, $b0
16c2c     B1 B8 C3 D1 
16c30     DE EC FC 0C 
16c34     1B 29 35 40 
16c38     49 4D 4F 50 | 	byte	$b1, $b8, $c3, $d1, $de, $ec, $fc, $0c, $1b, $29, $35, $40, $49, $4d, $4f, $50
16c3c     4E 47 3D 2E 
16c40     21 13 04 F3 
16c44     E3 D7 CB BF 
16c48     B7 B2 B1 B0 | 	byte	$4e, $47, $3d, $2e, $21, $13, $04, $f3, $e3, $d7, $cb, $bf, $b7, $b2, $b1, $b0
16c4c     B3 B9 C3 D2 
16c50     DF EC FD 0D 
16c54     1D 29 35 41 
16c58     49 4E 4F 50 | 	byte	$b3, $b9, $c3, $d2, $df, $ec, $fd, $0d, $1d, $29, $35, $41, $49, $4e, $4f, $50
16c5c     4D 47 3B 2F 
16c60     21 13 02 F2 
16c64     E3 D6 CA BF 
16c68     B6 B2 B2 B1 | 	byte	$4d, $47, $3b, $2f, $21, $13, $02, $f2, $e3, $d6, $ca, $bf, $b6, $b2, $b2, $b1
16c6c     B4 BA C5 D2 
16c70     E0 ED FE 10 
16c74     1E 2A 37 41 
16c78     4A 4E 4E 4E | 	byte	$b4, $ba, $c5, $d2, $e0, $ed, $fe, $10, $1e, $2a, $37, $41, $4a, $4e, $4e, $4e
16c7c     4C 46 3B 2D 
16c80     20 12 01 F0 
16c84     E1 D5 C9 BE 
16c88     B6 B2 B1 B2 | 	byte	$4c, $46, $3b, $2d, $20, $12, $01, $f0, $e1, $d5, $c9, $be, $b6, $b2, $b1, $b2
16c8c     B5 BC C6 D2 
16c90     E0 EE 00 10 
16c94     20 2B 37 42 
16c98     4A 4D 4E 4D | 	byte	$b5, $bc, $c6, $d2, $e0, $ee, $00, $10, $20, $2b, $37, $42, $4a, $4d, $4e, $4d
16c9c     4A 43 3A 2C 
16ca0     1F 11 FE EF 
16ca4     DF D3 C8 BD 
16ca8     B6 B2 B2 B3 | 	byte	$4a, $43, $3a, $2c, $1f, $11, $fe, $ef, $df, $d3, $c8, $bd, $b6, $b2, $b2, $b3
16cac     B6 BC C6 D4 
16cb0     E1 F1 01 12 
16cb4     21 2D 39 42 
16cb8     4A 4E 4E 4C | 	byte	$b6, $bc, $c6, $d4, $e1, $f1, $01, $12, $21, $2d, $39, $42, $4a, $4e, $4e, $4c
16cbc     49 43 38 2C 
16cc0     1E 0F FE ED 
16cc4     DE D2 C6 BC 
16cc8     B5 B3 B3 B4 | 	byte	$49, $43, $38, $2c, $1e, $0f, $fe, $ed, $de, $d2, $c6, $bc, $b5, $b3, $b3, $b4
16ccc     B7 BE C9 D5 
16cd0     E2 F1 04 13 
16cd4     23 2E 39 44 
16cd8     4A 4D 4D 4B | 	byte	$b7, $be, $c9, $d5, $e2, $f1, $04, $13, $23, $2e, $39, $44, $4a, $4d, $4d, $4b
16cdc     48 41 37 2C 
16ce0     1E 0D FC EB 
16ce4     DE D0 C6 BD 
16ce8     B5 B3 B3 B5 | 	byte	$48, $41, $37, $2c, $1e, $0d, $fc, $eb, $de, $d0, $c6, $bd, $b5, $b3, $b3, $b5
16cec     B9 C0 C8 D5 
16cf0     E4 F3 05 15 
16cf4     24 30 3B 44 
16cf8     4A 4D 4C 4B | 	byte	$b9, $c0, $c8, $d5, $e4, $f3, $05, $15, $24, $30, $3b, $44, $4a, $4d, $4c, $4b
16cfc     47 3F 36 2A 
16d00     1C 0B FB EA 
16d04     DB CF C4 BB 
16d08     B6 B3 B4 B6 | 	byte	$47, $3f, $36, $2a, $1c, $0b, $fb, $ea, $db, $cf, $c4, $bb, $b6, $b3, $b4, $b6
16d0c     BA C2 CA D6 
16d10     E6 F5 07 16 
16d14     25 32 3C 44 
16d18     4A 4C 4B 49 | 	byte	$ba, $c2, $ca, $d6, $e6, $f5, $07, $16, $25, $32, $3c, $44, $4a, $4c, $4b, $49
16d1c     45 3E 35 29 
16d20     1A 09 F9 E9 
16d24     DA CE C3 BB 
16d28     B6 B4 B6 B8 | 	byte	$45, $3e, $35, $29, $1a, $09, $f9, $e9, $da, $ce, $c3, $bb, $b6, $b4, $b6, $b8
16d2c     BB C2 CC D7 
16d30     E6 F8 08 18 
16d34     26 32 3D 44 
16d38     4A 4C 4B 48 | 	byte	$bb, $c2, $cc, $d7, $e6, $f8, $08, $18, $26, $32, $3d, $44, $4a, $4c, $4b, $48
16d3c     44 3D 34 28 
16d40     19 08 F7 E7 
16d44     D9 CD C3 BB 
16d48     B7 B5 B7 B9 | 	byte	$44, $3d, $34, $28, $19, $08, $f7, $e7, $d9, $cd, $c3, $bb, $b7, $b5, $b7, $b9
16d4c     BE C4 CD DA 
16d50     E9 F9 0A 19 
16d54     27 34 3E 45 
16d58     49 4B 49 46 | 	byte	$be, $c4, $cd, $da, $e9, $f9, $0a, $19, $27, $34, $3e, $45, $49, $4b, $49, $46
16d5c     43 3C 32 27 
16d60     16 07 F5 E6 
16d64     D9 CC C3 BC 
16d68     B7 B6 B8 BB | 	byte	$43, $3c, $32, $27, $16, $07, $f5, $e6, $d9, $cc, $c3, $bc, $b7, $b6, $b8, $bb
16d6c     BF C6 CE DA 
16d70     EB FB 0C 1A 
16d74     29 34 3E 44 
16d78     48 49 47 44 | 	byte	$bf, $c6, $ce, $da, $eb, $fb, $0c, $1a, $29, $34, $3e, $44, $48, $49, $47, $44
16d7c     40 39 30 24 
16d80     14 04 F3 E4 
16d84     D7 CA C2 BB 
16d88     B8 B7 B9 BC | 	byte	$40, $39, $30, $24, $14, $04, $f3, $e4, $d7, $ca, $c2, $bb, $b8, $b7, $b9, $bc
16d8c     C0 C8 D0 DE 
16d90     EC FD 0E 1C 
16d94     2A 36 3E 45 
16d98     48 48 46 43 | 	byte	$c0, $c8, $d0, $de, $ec, $fd, $0e, $1c, $2a, $36, $3e, $45, $48, $48, $46, $43
16d9c     3F 38 2F 20 
16da0     11 00 F2 E3 
16da4     D6 CA C1 BC 
16da8     B8 B8 BA BE | 	byte	$3f, $38, $2f, $20, $11, $00, $f2, $e3, $d6, $ca, $c1, $bc, $b8, $b8, $ba, $be
16dac     C3 C9 D2 E0 
16db0     EF 00 10 1D 
16db4     2B 36 3F 44 
16db8     47 47 45 42 | 	byte	$c3, $c9, $d2, $e0, $ef, $00, $10, $1d, $2b, $36, $3f, $44, $47, $47, $45, $42
16dbc     3D 37 2C 1E 
16dc0     0F FF F0 E2 
16dc4     D4 CA C1 BC 
16dc8     B9 BA BC BF | 	byte	$3d, $37, $2c, $1e, $0f, $ff, $f0, $e2, $d4, $ca, $c1, $bc, $b9, $ba, $bc, $bf
16dcc     C4 CB D5 E2 
16dd0     F3 01 11 20 
16dd4     2B 36 3E 44 
16dd8     46 46 43 40 | 	byte	$c4, $cb, $d5, $e2, $f3, $01, $11, $20, $2b, $36, $3e, $44, $46, $46, $43, $40
16ddc     3B 33 2A 1C 
16de0     0D FD ED E1 
16de4     D4 C9 C1 BC 
16de8     BA BB BE C1 | 	byte	$3b, $33, $2a, $1c, $0d, $fd, $ed, $e1, $d4, $c9, $c1, $bc, $ba, $bb, $be, $c1
16dec     C6 CD D8 E6 
16df0     F5 05 12 20 
16df4     2C 37 3F 43 
16df8     45 44 41 3E | 	byte	$c6, $cd, $d8, $e6, $f5, $05, $12, $20, $2c, $37, $3f, $43, $45, $44, $41, $3e
16dfc     39 32 27 19 
16e00     09 FB EC DF 
16e04     D3 C9 C2 BD 
16e08     BC BD BF C3 | 	byte	$39, $32, $27, $19, $09, $fb, $ec, $df, $d3, $c9, $c2, $bd, $bc, $bd, $bf, $c3
16e0c     C8 D0 DA E8 
16e10     F7 07 14 22 
16e14     2D 37 3E 43 
16e18     44 43 40 3C | 	byte	$c8, $d0, $da, $e8, $f7, $07, $14, $22, $2d, $37, $3e, $43, $44, $43, $40, $3c
16e1c     38 2F 24 18 
16e20     08 F8 EB DF 
16e24     D3 CA C2 BE 
16e28     BD BF C1 C4 | 	byte	$38, $2f, $24, $18, $08, $f8, $eb, $df, $d3, $ca, $c2, $be, $bd, $bf, $c1, $c4
16e2c     CA D3 DE EB 
16e30     FA 08 16 22 
16e34     2E 37 3D 42 
16e38     42 41 3F 3A | 	byte	$ca, $d3, $de, $eb, $fa, $08, $16, $22, $2e, $37, $3d, $42, $42, $41, $3f, $3a
16e3c     35 2D 21 14 
16e40     05 F7 EA DD 
16e44     D3 C9 C2 BF 
16e48     BE C0 C3 C6 | 	byte	$35, $2d, $21, $14, $05, $f7, $ea, $dd, $d3, $c9, $c2, $bf, $be, $c0, $c3, $c6
16e4c     CC D5 E1 ED 
16e50     FC 0A 17 23 
16e54     2D 36 3C 40 
16e58     41 3F 3C 38 | 	byte	$cc, $d5, $e1, $ed, $fc, $0a, $17, $23, $2d, $36, $3c, $40, $41, $3f, $3c, $38
16e5c     32 29 1E 10 
16e60     03 F5 E7 DC 
16e64     D2 C9 C3 BF 
16e68     BF C1 C4 C8 | 	byte	$32, $29, $1e, $10, $03, $f5, $e7, $dc, $d2, $c9, $c3, $bf, $bf, $c1, $c4, $c8
16e6c     CF D7 E3 F1 
16e70     FD 0C 18 24 
16e74     2E 36 3C 3F 
16e78     40 3E 3B 36 | 	byte	$cf, $d7, $e3, $f1, $fd, $0c, $18, $24, $2e, $36, $3c, $3f, $40, $3e, $3b, $36
16e7c     2F 26 1B 0F 
16e80     00 F4 E7 DB 
16e84     D2 CA C4 C1 
16e88     C0 C2 C6 CA | 	byte	$2f, $26, $1b, $0f, $00, $f4, $e7, $db, $d2, $ca, $c4, $c1, $c0, $c2, $c6, $ca
16e8c     D1 DA E5 F3 
16e90     01 0D 19 24 
16e94     2E 35 3B 3E 
16e98     3F 3D 39 34 | 	byte	$d1, $da, $e5, $f3, $01, $0d, $19, $24, $2e, $35, $3b, $3e, $3f, $3d, $39, $34
16e9c     2D 24 19 0B 
16ea0     00 F2 E7 DC 
16ea4     D2 CB C5 C2 
16ea8     C2 C4 C7 CD | 	byte	$2d, $24, $19, $0b, $00, $f2, $e7, $dc, $d2, $cb, $c5, $c2, $c2, $c4, $c7, $cd
16eac     D4 DD E9 F5 
16eb0     01 0E 19 25 
16eb4     2E 35 3B 3D 
16eb8     3D 3B 37 32 | 	byte	$d4, $dd, $e9, $f5, $01, $0e, $19, $25, $2e, $35, $3b, $3d, $3d, $3b, $37, $32
16ebc     2B 21 15 0A 
16ec0     FD F2 E6 DC 
16ec4     D2 CB C6 C3 
16ec8     C3 C5 C9 CE | 	byte	$2b, $21, $15, $0a, $fd, $f2, $e6, $dc, $d2, $cb, $c6, $c3, $c3, $c5, $c9, $ce
16ecc     D6 E0 EA F7 
16ed0     03 0F 1B 25 
16ed4     2E 35 3A 3C 
16ed8     3C 39 36 30 | 	byte	$d6, $e0, $ea, $f7, $03, $0f, $1b, $25, $2e, $35, $3a, $3c, $3c, $39, $36, $30
16edc     28 1F 13 08 
16ee0     FC F0 E5 DB 
16ee4     D3 CB C7 C5 
16ee8     C5 C7 CB D1 | 	byte	$28, $1f, $13, $08, $fc, $f0, $e5, $db, $d3, $cb, $c7, $c5, $c5, $c7, $cb, $d1
16eec     D9 E2 EE F9 
16ef0     05 10 1C 25 
16ef4     2D 34 39 3B 
16ef8     3B 39 35 2E | 	byte	$d9, $e2, $ee, $f9, $05, $10, $1c, $25, $2d, $34, $39, $3b, $3b, $39, $35, $2e
16efc     27 1D 12 07 
16f00     FB EF E5 DB 
16f04     D3 CC C8 C5 
16f08     C5 C8 CC D3 | 	byte	$27, $1d, $12, $07, $fb, $ef, $e5, $db, $d3, $cc, $c8, $c5, $c5, $c8, $cc, $d3
16f0c     DA E5 EF FB 
16f10     06 11 1C 26 
16f14     2E 35 39 3B 
16f18     3A 38 33 2C | 	byte	$da, $e5, $ef, $fb, $06, $11, $1c, $26, $2e, $35, $39, $3b, $3a, $38, $33, $2c
16f1c     24 1A 0F 04 
16f20     F7 ED E3 D9 
16f24     D2 CB C8 C6 
16f28     C6 CA CE D5 | 	byte	$24, $1a, $0f, $04, $f7, $ed, $e3, $d9, $d2, $cb, $c8, $c6, $c6, $ca, $ce, $d5
16f2c     DE E7 F2 FE 
16f30     09 15 1E 28 
16f34     2F 34 38 39 
16f38     38 35 30 29 | 	byte	$de, $e7, $f2, $fe, $09, $15, $1e, $28, $2f, $34, $38, $39, $38, $35, $30, $29
16f3c     20 17 0B 00 
16f40     F5 EA E0 D7 
16f44     D0 CB C7 C6 
16f48     C7 CB D0 D8 | 	byte	$20, $17, $0b, $00, $f5, $ea, $e0, $d7, $d0, $cb, $c7, $c6, $c7, $cb, $d0, $d8
16f4c     E0 EA F6 01 
16f50     0C 16 21 2A 
16f54     30 35 38 38 
16f58     37 33 2D 26 | 	byte	$e0, $ea, $f6, $01, $0c, $16, $21, $2a, $30, $35, $38, $38, $37, $33, $2d, $26
16f5c     1D 13 09 FD 
16f60     F3 E8 DE D6 
16f64     CF CB C8 C7 
16f68     C9 CD D3 DA | 	byte	$1d, $13, $09, $fd, $f3, $e8, $de, $d6, $cf, $cb, $c8, $c7, $c9, $cd, $d3, $da
16f6c     E4 EE F9 05 
16f70     0F 1A 22 2B 
16f74     30 35 38 38 
16f78     36 31 2B 23 | 	byte	$e4, $ee, $f9, $05, $0f, $1a, $22, $2b, $30, $35, $38, $38, $36, $31, $2b, $23
16f7c     1B 10 06 FA 
16f80     F0 E6 DC D6 
16f84     CF CB C9 C9 
16f88     CB CF D5 DE | 	byte	$1b, $10, $06, $fa, $f0, $e6, $dc, $d6, $cf, $cb, $c9, $c9, $cb, $cf, $d5, $de
16f8c     E7 F1 FC 07 
16f90     12 1C 24 2C 
16f94     31 35 37 36 
16f98     34 2F 29 20 | 	byte	$e7, $f1, $fc, $07, $12, $1c, $24, $2c, $31, $35, $37, $36, $34, $2f, $29, $20
16f9c     17 0D 02 F8 
16fa0     ED E4 DB D3 
16fa4     CE CB CA CA 
16fa8     CD D2 D9 E0 | 	byte	$17, $0d, $02, $f8, $ed, $e4, $db, $d3, $ce, $cb, $ca, $ca, $cd, $d2, $d9, $e0
16fac     EA F5 FF 0A 
16fb0     15 1E 26 2D 
16fb4     32 35 36 35 
16fb8     32 2C 26 1E | 	byte	$ea, $f5, $ff, $0a, $15, $1e, $26, $2d, $32, $35, $36, $35, $32, $2c, $26, $1e
16fbc     14 0A FF F5 
16fc0     EB E1 DA D3 
16fc4     CE CB CA CC 
16fc8     CF D4 DB E4 | 	byte	$14, $0a, $ff, $f5, $eb, $e1, $da, $d3, $ce, $cb, $ca, $cc, $cf, $d4, $db, $e4
16fcc     ED F7 01 0D 
16fd0     16 20 27 2E 
16fd4     33 35 35 34 
16fd8     30 2B 23 1C | 	byte	$ed, $f7, $01, $0d, $16, $20, $27, $2e, $33, $35, $35, $34, $30, $2b, $23, $1c
16fdc     12 08 FD F3 
16fe0     E9 E0 D8 D3 
16fe4     CE CC CC CD 
16fe8     D1 D7 DE E6 | 	byte	$12, $08, $fd, $f3, $e9, $e0, $d8, $d3, $ce, $cc, $cc, $cd, $d1, $d7, $de, $e6
16fec     EF FA 04 0F 
16ff0     18 21 28 2E 
16ff4     32 34 35 32 
16ff8     2F 28 21 19 | 	byte	$ef, $fa, $04, $0f, $18, $21, $28, $2e, $32, $34, $35, $32, $2f, $28, $21, $19
16ffc     0F 05 FA F1 
17000     E7 DE D7 D2 
17004     CE CC CD CE 
17008     D3 D8 E1 E9 | 	byte	$0f, $05, $fa, $f1, $e7, $de, $d7, $d2, $ce, $cc, $cd, $ce, $d3, $d8, $e1, $e9
1700c     F1 FC 07 11 
17010     1A 22 29 2E 
17014     32 33 32 30 
17018     2B 25 1E 15 | 	byte	$f1, $fc, $07, $11, $1a, $22, $29, $2e, $32, $33, $32, $30, $2b, $25, $1e, $15
1701c     0C 02 F8 EE 
17020     E5 DD D6 D1 
17024     CE CD CE D0 
17028     D5 DB E2 EB | 	byte	$0c, $02, $f8, $ee, $e5, $dd, $d6, $d1, $ce, $cd, $ce, $d0, $d5, $db, $e2, $eb
1702c     F5 FF 09 12 
17030     1C 24 29 2F 
17034     32 32 31 2F 
17038     2A 24 1C 13 | 	byte	$f5, $ff, $09, $12, $1c, $24, $29, $2f, $32, $32, $31, $2f, $2a, $24, $1c, $13
1703c     0A FF F6 EC 
17040     E4 DC D6 D1 
17044     CE CD CF D2 
17048     D6 DC E5 EE | 	byte	$0a, $ff, $f6, $ec, $e4, $dc, $d6, $d1, $ce, $cd, $cf, $d2, $d6, $dc, $e5, $ee
1704c     F7 01 0B 15 
17050     1D 24 2B 2E 
17054     31 32 30 2D 
17058     28 21 1A 10 | 	byte	$f7, $01, $0b, $15, $1d, $24, $2b, $2e, $31, $32, $30, $2d, $28, $21, $1a, $10
1705c     08 FE F4 EA 
17060     E2 DB D6 D1 
17064     CF CE D0 D3 
17068     D8 DF E7 F0 | 	byte	$08, $fe, $f4, $ea, $e2, $db, $d6, $d1, $cf, $ce, $d0, $d3, $d8, $df, $e7, $f0
1706c     F9 03 0D 17 
17070     1E 25 2B 2F 
17074     31 31 2F 2B 
17078     26 1F 18 0E | 	byte	$f9, $03, $0d, $17, $1e, $25, $2b, $2f, $31, $31, $2f, $2b, $26, $1f, $18, $0e
1707c     04 FC F2 EA 
17080     E1 DA D5 D1 
17084     CF CF D1 D5 
17088     DA E1 E9 F2 | 	byte	$04, $fc, $f2, $ea, $e1, $da, $d5, $d1, $cf, $cf, $d1, $d5, $da, $e1, $e9, $f2
1708c     FC 05 0E 17 
17090     1F 26 2B 2F 
17094     30 30 2E 2A 
17098     24 1D 15 0D | 	byte	$fc, $05, $0e, $17, $1f, $26, $2b, $2f, $30, $30, $2e, $2a, $24, $1d, $15, $0d
1709c     03 F9 F0 E7 
170a0     E0 DA D4 D1 
170a4     D0 D0 D2 D6 
170a8     DC E3 EB F4 | 	byte	$03, $f9, $f0, $e7, $e0, $da, $d4, $d1, $d0, $d0, $d2, $d6, $dc, $e3, $eb, $f4
170ac     FD 07 10 19 
170b0     20 27 2C 2F 
170b4     30 30 2D 29 
170b8     23 1C 14 0B | 	byte	$fd, $07, $10, $19, $20, $27, $2c, $2f, $30, $30, $2d, $29, $23, $1c, $14, $0b
170bc     02 F9 EF E7 
170c0     E0 D9 D5 D2 
170c4     D1 D1 D3 D8 
170c8     DD E5 ED F6 | 	byte	$02, $f9, $ef, $e7, $e0, $d9, $d5, $d2, $d1, $d1, $d3, $d8, $dd, $e5, $ed, $f6
170cc     FF 09 12 1A 
170d0     21 27 2B 2E 
170d4     30 2F 2B 27 
170d8     21 1A 12 09 | 	byte	$ff, $09, $12, $1a, $21, $27, $2b, $2e, $30, $2f, $2b, $27, $21, $1a, $12, $09
170dc     00 F6 EE E6 
170e0     DE D9 D5 D2 
170e4     D1 D2 D5 DA 
170e8     DF E6 EE F7 | 	byte	$00, $f6, $ee, $e6, $de, $d9, $d5, $d2, $d1, $d2, $d5, $da, $df, $e6, $ee, $f7
170ec     00 0A 13 1B 
170f0     21 27 2C 2D 
170f4     2E 2D 2A 26 
170f8     1F 18 0F 07 | 	byte	$00, $0a, $13, $1b, $21, $27, $2c, $2d, $2e, $2d, $2a, $26, $1f, $18, $0f, $07
170fc     FD F5 EC E4 
17100     DD D8 D4 D2 
17104     D1 D3 D6 DB 
17108     E1 E8 F1 FA | 	byte	$fd, $f5, $ec, $e4, $dd, $d8, $d4, $d2, $d1, $d3, $d6, $db, $e1, $e8, $f1, $fa
1710c     02 0C 15 1C 
17110     23 28 2C 2D 
17114     2E 2C 29 24 
17118     1E 17 0E 05 | 	byte	$02, $0c, $15, $1c, $23, $28, $2c, $2d, $2e, $2c, $29, $24, $1e, $17, $0e, $05
1711c     FC F3 EB E4 
17120     DD D8 D4 D2 
17124     D2 D4 D7 DC 
17128     E2 EA F2 FB | 	byte	$fc, $f3, $eb, $e4, $dd, $d8, $d4, $d2, $d2, $d4, $d7, $dc, $e2, $ea, $f2, $fb
1712c     04 0D 16 1D 
17130     23 28 2B 2E 
17134     2D 2B 28 23 
17138     1D 14 0D 04 | 	byte	$04, $0d, $16, $1d, $23, $28, $2b, $2e, $2d, $2b, $28, $23, $1d, $14, $0d, $04
1713c     FB F2 E9 E3 
17140     DD D8 D5 D3 
17144     D3 D5 D9 DE 
17148     E4 EC F4 FC | 	byte	$fb, $f2, $e9, $e3, $dd, $d8, $d5, $d3, $d3, $d5, $d9, $de, $e4, $ec, $f4, $fc
1714c     05 0F 16 1D 
17150     24 28 2B 2C 
17154     2C 2A 27 21 
17158     1B 13 0B 02 | 	byte	$05, $0f, $16, $1d, $24, $28, $2b, $2c, $2c, $2a, $27, $21, $1b, $13, $0b, $02
1715c     F9 F1 E9 E2 
17160     DD D8 D5 D3 
17164     D4 D6 DA DF 
17168     E5 ED F5 FE | 	byte	$f9, $f1, $e9, $e2, $dd, $d8, $d5, $d3, $d4, $d6, $da, $df, $e5, $ed, $f5, $fe
1716c     07 10 18 1F 
17170     24 28 2B 2C 
17174     2C 29 25 20 
17178     19 12 09 01 | 	byte	$07, $10, $18, $1f, $24, $28, $2b, $2c, $2c, $29, $25, $20, $19, $12, $09, $01
1717c     F8 EF E8 E1 
17180     DB D7 D5 D4 
17184     D5 D7 DB E0 
17188     E7 EF F7 00 | 	byte	$f8, $ef, $e8, $e1, $db, $d7, $d5, $d4, $d5, $d7, $db, $e0, $e7, $ef, $f7, $00
1718c     09 11 18 1F 
17190     25 29 2B 2C 
17194     2B 28 25 1F 
17198     18 10 08 00 | 	byte	$09, $11, $18, $1f, $25, $29, $2b, $2c, $2b, $28, $25, $1f, $18, $10, $08, $00
1719c     F7 EF E7 E1 
171a0     DC D8 D5 D5 
171a4     D6 D8 DC E2 
171a8     E9 F1 F9 01 | 	byte	$f7, $ef, $e7, $e1, $dc, $d8, $d5, $d5, $d6, $d8, $dc, $e2, $e9, $f1, $f9, $01
171ac     0A 12 19 20 
171b0     25 29 2B 2B 
171b4     2A 27 23 1D 
171b8     17 0E 06 FE | 	byte	$0a, $12, $19, $20, $25, $29, $2b, $2b, $2a, $27, $23, $1d, $17, $0e, $06, $fe
171bc     F6 ED E6 E0 
171c0     DB D8 D5 D5 
171c4     D6 DA DE E3 
171c8     EA F2 FA 03 | 	byte	$f6, $ed, $e6, $e0, $db, $d8, $d5, $d5, $d6, $da, $de, $e3, $ea, $f2, $fa, $03
171cc     0B 13 1A 20 
171d0     25 28 2A 2A 
171d4     29 26 21 1B 
171d8     14 0D 04 FC | 	byte	$0b, $13, $1a, $20, $25, $28, $2a, $2a, $29, $26, $21, $1b, $14, $0d, $04, $fc
171dc     F4 EC E5 E0 
171e0     DA D7 D5 D5 
171e4     D7 DA DF E5 
171e8     EC F4 FC 05 | 	byte	$f4, $ec, $e5, $e0, $da, $d7, $d5, $d5, $d7, $da, $df, $e5, $ec, $f4, $fc, $05
171ec     0D 14 1B 21 
171f0     26 28 2A 2A 
171f4     28 25 1F 1A 
171f8     12 0B 03 FA | 	byte	$0d, $14, $1b, $21, $26, $28, $2a, $2a, $28, $25, $1f, $1a, $12, $0b, $03, $fa
171fc     F3 EB E5 DF 
17200     DA D7 D6 D6 
17204     D8 DC E0 E7 
17208     ED F5 FD 06 | 	byte	$f3, $eb, $e5, $df, $da, $d7, $d6, $d6, $d8, $dc, $e0, $e7, $ed, $f5, $fd, $06
1720c     0E 15 1C 22 
17210     26 29 29 29 
17214     27 24 1E 18 
17218     11 09 01 F9 | 	byte	$0e, $15, $1c, $22, $26, $29, $29, $29, $27, $24, $1e, $18, $11, $09, $01, $f9
1721c     F1 EA E3 DF 
17220     DA D8 D6 D7 
17224     D9 DD E2 E8 
17228     EF F6 FF 08 | 	byte	$f1, $ea, $e3, $df, $da, $d8, $d6, $d7, $d9, $dd, $e2, $e8, $ef, $f6, $ff, $08
1722c     0F 16 1D 22 
17230     26 28 29 28 
17234     26 21 1D 17 
17238     0F 08 FF F8 | 	byte	$0f, $16, $1d, $22, $26, $28, $29, $28, $26, $21, $1d, $17, $0f, $08, $ff, $f8
1723c     F0 E8 E3 DD 
17240     DA D8 D7 D8 
17244     DA DE E3 EA 
17248     F1 FA 01 09 | 	byte	$f0, $e8, $e3, $dd, $da, $d8, $d7, $d8, $da, $de, $e3, $ea, $f1, $fa, $01, $09
1724c     10 18 1D 23 
17250     26 28 28 27 
17254     25 21 1B 14 
17258     0E 05 FE F6 | 	byte	$10, $18, $1d, $23, $26, $28, $28, $27, $25, $21, $1b, $14, $0e, $05, $fe, $f6
1725c     EF E8 E2 DD 
17260     DA D8 D8 D9 
17264     DC E0 E5 EC 
17268     F3 FB 02 0B | 	byte	$ef, $e8, $e2, $dd, $da, $d8, $d8, $d9, $dc, $e0, $e5, $ec, $f3, $fb, $02, $0b
1726c     12 19 1F 23 
17270     26 28 28 27 
17274     24 1F 1A 13 
17278     0C 04 FD F5 | 	byte	$12, $19, $1f, $23, $26, $28, $28, $27, $24, $1f, $1a, $13, $0c, $04, $fd, $f5
1727c     ED E7 E1 DD 
17280     DA D9 D9 DA 
17284     DD E1 E7 ED 
17288     F5 FD 04 0C | 	byte	$ed, $e7, $e1, $dd, $da, $d9, $d9, $da, $dd, $e1, $e7, $ed, $f5, $fd, $04, $0c
1728c     13 19 1F 23 
17290     26 27 27 26 
17294     22 1E 18 11 
17298     0A 02 FB F3 | 	byte	$13, $19, $1f, $23, $26, $27, $27, $26, $22, $1e, $18, $11, $0a, $02, $fb, $f3
1729c     EC E6 E1 DD 
172a0     DA D9 D9 DB 
172a4     DE E3 E8 EF 
172a8     F6 FE 06 0D | 	byte	$ec, $e6, $e1, $dd, $da, $d9, $d9, $db, $de, $e3, $e8, $ef, $f6, $fe, $06, $0d
172ac     14 1A 20 23 
172b0     26 26 26 24 
172b4     21 1C 15 0F 
172b8     09 00 F9 F2 | 	byte	$14, $1a, $20, $23, $26, $26, $26, $24, $21, $1c, $15, $0f, $09, $00, $f9, $f2
172bc     EB E5 E0 DC 
172c0     DA D9 DA DB 
172c4     DF E4 EA F1 
172c8     F8 00 07 0F | 	byte	$eb, $e5, $e0, $dc, $da, $d9, $da, $db, $df, $e4, $ea, $f1, $f8, $00, $07, $0f
172cc     15 1B 20 23 
172d0     25 26 25 23 
172d4     1F 1A 15 0D 
172d8     06 FF F7 F1 | 	byte	$15, $1b, $20, $23, $25, $26, $25, $23, $1f, $1a, $15, $0d, $06, $ff, $f7, $f1
172dc     EA E4 E0 DC 
172e0     DA DA DB DD 
172e4     E1 E5 EC F3 
172e8     FA 02 0A 10 | 	byte	$ea, $e4, $e0, $dc, $da, $da, $db, $dd, $e1, $e5, $ec, $f3, $fa, $02, $0a, $10
172ec     17 1C 21 24 
172f0     25 25 24 22 
172f4     1E 19 13 0C 
172f8     04 FE F6 EF | 	byte	$17, $1c, $21, $24, $25, $25, $24, $22, $1e, $19, $13, $0c, $04, $fe, $f6, $ef
172fc     E9 E4 DF DC 
17300     DB DB DC DF 
17304     E3 E8 EE F4 
17308     FC 03 0A 12 | 	byte	$e9, $e4, $df, $dc, $db, $db, $dc, $df, $e3, $e8, $ee, $f4, $fc, $03, $0a, $12
1730c     17 1D 21 23 
17310     25 25 23 20 
17314     1C 17 10 09 
17318     03 FC F5 ED | 	byte	$17, $1d, $21, $23, $25, $25, $23, $20, $1c, $17, $10, $09, $03, $fc, $f5, $ed
1731c     E8 E3 DF DC 
17320     DB DC DD E1 
17324     E4 EA F0 F7 
17328     FE 05 0C 13 | 	byte	$e8, $e3, $df, $dc, $db, $dc, $dd, $e1, $e4, $ea, $f0, $f7, $fe, $05, $0c, $13
1732c     18 1D 21 23 
17330     24 24 22 1F 
17334     1A 15 0F 08 
17338     01 F9 F3 ED | 	byte	$18, $1d, $21, $23, $24, $24, $22, $1f, $1a, $15, $0f, $08, $01, $f9, $f3, $ed
1733c     E7 E2 DF DD 
17340     DC DD DE E2 
17344     E6 EC F2 F9 
17348     00 07 0E 14 | 	byte	$e7, $e2, $df, $dd, $dc, $dd, $de, $e2, $e6, $ec, $f2, $f9, $00, $07, $0e, $14
1734c     19 1E 21 24 
17350     24 23 21 1D 
17354     18 13 0D 06 
17358     FF F8 F2 EB | 	byte	$19, $1e, $21, $24, $24, $23, $21, $1d, $18, $13, $0d, $06, $ff, $f8, $f2, $eb
1735c     E7 E2 DF DD 
17360     DD DE E0 E3 
17364     E8 EE F4 FB 
17368     02 09 0F 15 | 	byte	$e7, $e2, $df, $dd, $dd, $de, $e0, $e3, $e8, $ee, $f4, $fb, $02, $09, $0f, $15
1736c     1A 1E 21 23 
17370     23 21 1F 1C 
17374     17 11 0A 04 
17378     FE F7 F1 EA | 	byte	$1a, $1e, $21, $23, $23, $21, $1f, $1c, $17, $11, $0a, $04, $fe, $f7, $f1, $ea
1737c     E6 E2 DF DE 
17380     DE DE E1 E5 
17384     EA EF F6 FD 
17388     04 0A 10 16 | 	byte	$e6, $e2, $df, $de, $de, $de, $e1, $e5, $ea, $ef, $f6, $fd, $04, $0a, $10, $16
1738c     1B 1F 21 22 
17390     22 20 1E 19 
17394     14 0F 09 02 
17398     FB F4 EF E9 | 	byte	$1b, $1f, $21, $22, $22, $20, $1e, $19, $14, $0f, $09, $02, $fb, $f4, $ef, $e9
1739c     E5 E1 DF DE 
173a0     DE E0 E2 E7 
173a4     EC F1 F8 FE 
173a8     05 0C 12 17 | 	byte	$e5, $e1, $df, $de, $de, $e0, $e2, $e7, $ec, $f1, $f8, $fe, $05, $0c, $12, $17
173ac     1B 1F 21 21 
173b0     20 1F 1C 18 
173b4     13 0D 07 00 
173b8     F9 F3 ED E8 | 	byte	$1b, $1f, $21, $21, $20, $1f, $1c, $18, $13, $0d, $07, $00, $f9, $f3, $ed, $e8
173bc     E4 E1 DF DF 
173c0     E0 E1 E4 E8 
173c4     EE F3 FA 01 
173c8     07 0D 13 17 | 	byte	$e4, $e1, $df, $df, $e0, $e1, $e4, $e8, $ee, $f3, $fa, $01, $07, $0d, $13, $17
173cc     1C 1F 20 21 
173d0     20 1E 1A 16 
173d4     11 0B 05 FF 
173d8     F8 F2 ED E8 | 	byte	$1c, $1f, $20, $21, $20, $1e, $1a, $16, $11, $0b, $05, $ff, $f8, $f2, $ed, $e8
173dc     E4 E2 E0 E0 
173e0     E1 E3 E6 EA 
173e4     F0 F6 FC 03 
173e8     09 0E 14 19 | 	byte	$e4, $e2, $e0, $e0, $e1, $e3, $e6, $ea, $f0, $f6, $fc, $03, $09, $0e, $14, $19
173ec     1C 1F 20 20 
173f0     1F 1C 19 14 
173f4     0F 09 03 FD 
173f8     F7 F1 EB E7 | 	byte	$1c, $1f, $20, $20, $1f, $1c, $19, $14, $0f, $09, $03, $fd, $f7, $f1, $eb, $e7
173fc     E4 E2 E1 E1 
17400     E2 E5 E8 EC 
17404     F2 F8 FE 04 
17408     0A 0F 15 19 | 	byte	$e4, $e2, $e1, $e1, $e2, $e5, $e8, $ec, $f2, $f8, $fe, $04, $0a, $0f, $15, $19
1740c     1C 1E 1F 1F 
17410     1D 1A 16 12 
17414     0D 07 01 FA 
17418     F5 EF EB E7 | 	byte	$1c, $1e, $1f, $1f, $1d, $1a, $16, $12, $0d, $07, $01, $fa, $f5, $ef, $eb, $e7
1741c     E4 E2 E1 E2 
17420     E3 E6 EA EE 
17424     F4 F9 00 06 
17428     0B 11 15 1A | 	byte	$e4, $e2, $e1, $e2, $e3, $e6, $ea, $ee, $f4, $f9, $00, $06, $0b, $11, $15, $1a
1742c     1C 1E 1E 1E 
17430     1C 19 15 10 
17434     0B 05 00 F9 
17438     F4 EF EA E7 | 	byte	$1c, $1e, $1e, $1e, $1c, $19, $15, $10, $0b, $05, $00, $f9, $f4, $ef, $ea, $e7
1743c     E4 E2 E2 E3 
17440     E5 E8 EC F0 
17444     F6 FB 02 07 
17448     0D 12 17 1A | 	byte	$e4, $e2, $e2, $e3, $e5, $e8, $ec, $f0, $f6, $fb, $02, $07, $0d, $12, $17, $1a
1744c     1C 1D 1D 1C 
17450     1B 17 13 0F 
17454     09 03 FE F8 
17458     F2 EE E9 E6 | 	byte	$1c, $1d, $1d, $1c, $1b, $17, $13, $0f, $09, $03, $fe, $f8, $f2, $ee, $e9, $e6
1745c     E4 E2 E2 E4 
17460     E6 E9 EE F2 
17464     F8 FD 03 09 
17468     0E 13 16 1A | 	byte	$e4, $e2, $e2, $e4, $e6, $e9, $ee, $f2, $f8, $fd, $03, $09, $0e, $13, $16, $1a
1746c     1C 1C 1C 1B 
17470     19 15 11 0C 
17474     07 01 FB F6 
17478     F1 EC E9 E6 | 	byte	$1c, $1c, $1c, $1b, $19, $15, $11, $0c, $07, $01, $fb, $f6, $f1, $ec, $e9, $e6
1747c     E4 E3 E3 E5 
17480     E7 EB EF F5 
17484     F9 FF 04 0A 
17488     0F 13 17 1A | 	byte	$e4, $e3, $e3, $e5, $e7, $eb, $ef, $f5, $f9, $ff, $04, $0a, $0f, $13, $17, $1a
1748c     1B 1C 1B 1A 
17490     17 14 0F 0B 
17494     05 FF FA F5 
17498     F0 EC E8 E6 | 	byte	$1b, $1c, $1b, $1a, $17, $14, $0f, $0b, $05, $ff, $fa, $f5, $f0, $ec, $e8, $e6
1749c     E4 E4 E5 E6 
174a0     E9 ED F1 F6 
174a4     FB 01 06 0B 
174a8     10 14 17 1A | 	byte	$e4, $e4, $e5, $e6, $e9, $ed, $f1, $f6, $fb, $01, $06, $0b, $10, $14, $17, $1a
174ac     1B 1B 1A 19 
174b0     16 12 0E 09 
174b4     04 FF F9 F4 
174b8     EF EC E9 E7 | 	byte	$1b, $1b, $1a, $19, $16, $12, $0e, $09, $04, $ff, $f9, $f4, $ef, $ec, $e9, $e7
174bc     E5 E5 E6 E8 
174c0     EB EE F3 F7 
174c4     FD 02 07 0D 
174c8     11 15 18 1A | 	byte	$e5, $e5, $e6, $e8, $eb, $ee, $f3, $f7, $fd, $02, $07, $0d, $11, $15, $18, $1a
174cc     1A 1A 19 17 
174d0     14 10 0C 07 
174d4     02 FD F8 F3 
174d8     EF EB E8 E6 | 	byte	$1a, $1a, $19, $17, $14, $10, $0c, $07, $02, $fd, $f8, $f3, $ef, $eb, $e8, $e6
174dc     E5 E6 E7 E9 
174e0     EC F0 F4 F9 
174e4     FE 03 09 0D 
174e8     12 15 18 1A | 	byte	$e5, $e6, $e7, $e9, $ec, $f0, $f4, $f9, $fe, $03, $09, $0d, $12, $15, $18, $1a
174ec     1A 1A 19 16 
174f0     13 0F 0B 06 
174f4     01 FB F6 F2 
174f8     EE EB E8 E7 | 	byte	$1a, $1a, $19, $16, $13, $0f, $0b, $06, $01, $fb, $f6, $f2, $ee, $eb, $e8, $e7
174fc     E6 E7 E8 EA 
17500     ED F1 F5 FB 
17504     00 05 0A 0F 
17508     12 15 18 19 | 	byte	$e6, $e7, $e8, $ea, $ed, $f1, $f5, $fb, $00, $05, $0a, $0f, $12, $15, $18, $19
1750c     1A 19 18 15 
17510     12 0E 09 04 
17514     00 FB F6 F2 
17518     EE EB E9 E7 | 	byte	$1a, $19, $18, $15, $12, $0e, $09, $04, $00, $fb, $f6, $f2, $ee, $eb, $e9, $e7
1751c     E7 E8 E9 EC 
17520     EF F3 F7 FC 
17524     01 06 0B 0F 
17528     13 16 18 19 | 	byte	$e7, $e8, $e9, $ec, $ef, $f3, $f7, $fc, $01, $06, $0b, $0f, $13, $16, $18, $19
1752c     19 18 17 14 
17530     11 0C 07 03 
17534     FE F9 F4 F0 
17538     ED EA E8 E7 | 	byte	$19, $18, $17, $14, $11, $0c, $07, $03, $fe, $f9, $f4, $f0, $ed, $ea, $e8, $e7
1753c     E7 E8 EA ED 
17540     F0 F4 F9 FE 
17544     02 07 0C 10 
17548     13 15 17 18 | 	byte	$e7, $e8, $ea, $ed, $f0, $f4, $f9, $fe, $02, $07, $0c, $10, $13, $15, $17, $18
1754c     18 17 15 12 
17550     0E 0A 06 01 
17554     FC F7 F3 EF 
17558     EC EA E8 E7 | 	byte	$18, $17, $15, $12, $0e, $0a, $06, $01, $fc, $f7, $f3, $ef, $ec, $ea, $e8, $e7
1755c     E8 E9 EB EE 
17560     F1 F5 FA FF 
17564     03 09 0D 10 
17568     13 16 17 18 | 	byte	$e8, $e9, $eb, $ee, $f1, $f5, $fa, $ff, $03, $09, $0d, $10, $13, $16, $17, $18
1756c     17 16 14 11 
17570     0E 09 05 00 
17574     FC F7 F3 EF 
17578     EC EA E9 E8 | 	byte	$17, $16, $14, $11, $0e, $09, $05, $00, $fc, $f7, $f3, $ef, $ec, $ea, $e9, $e8
1757c     E8 EA EC EF 
17580     F3 F7 FB 01 
17584     05 09 0D 11 
17588     14 16 17 18 | 	byte	$e8, $ea, $ec, $ef, $f3, $f7, $fb, $01, $05, $09, $0d, $11, $14, $16, $17, $18
1758c     17 15 13 10 
17590     0C 08 04 FF 
17594     FB F6 F2 EF 
17598     EC EA E9 E9 | 	byte	$17, $15, $13, $10, $0c, $08, $04, $ff, $fb, $f6, $f2, $ef, $ec, $ea, $e9, $e9
1759c     EA EB ED F1 
175a0     F4 F9 FD 01 
175a4     06 0A 0E 12 
175a8     14 16 17 17 | 	byte	$ea, $eb, $ed, $f1, $f4, $f9, $fd, $01, $06, $0a, $0e, $12, $14, $16, $17, $17
175ac     16 14 12 0F 
175b0     0B 07 02 FE 
175b4     F9 F5 F1 EE 
175b8     EC EA E9 E9 | 	byte	$16, $14, $12, $0f, $0b, $07, $02, $fe, $f9, $f5, $f1, $ee, $ec, $ea, $e9, $e9
175bc     EA EC EF F2 
175c0     F6 FA FE 03 
175c4     07 0B 0F 12 
175c8     14 16 16 17 | 	byte	$ea, $ec, $ef, $f2, $f6, $fa, $fe, $03, $07, $0b, $0f, $12, $14, $16, $16, $17
175cc     15 13 11 0D 
175d0     0A 06 01 FC 
175d4     F8 F4 F0 EE 
175d8     EB EA E9 EA | 	byte	$15, $13, $11, $0d, $0a, $06, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $e9, $ea
175dc     EB ED F0 F3 
175e0     F7 FB 00 04 
175e4     08 0D 10 12 
175e8     14 16 16 16 | 	byte	$eb, $ed, $f0, $f3, $f7, $fb, $00, $04, $08, $0d, $10, $12, $14, $16, $16, $16
175ec     15 13 10 0D 
175f0     09 05 01 FC 
175f4     F8 F4 F0 EE 
175f8     EB EA EA EB | 	byte	$15, $13, $10, $0d, $09, $05, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $ea, $eb
175fc     EC EE F1 F4 
17600     F8 FC 00 05 
17604     09 0D 10 13 
17608     14 16 16 15 | 	byte	$ec, $ee, $f1, $f4, $f8, $fc, $00, $05, $09, $0d, $10, $13, $14, $16, $16, $15
1760c     14 12 0F 0B 
17610     07 03 FF FB 
17614     F7 F3 F0 ED 
17618     EB EA EA EB | 	byte	$14, $12, $0f, $0b, $07, $03, $ff, $fb, $f7, $f3, $f0, $ed, $eb, $ea, $ea, $eb
1761c     EC EE F2 F5 
17620     F8 FD 01 06 
17624     0A 0D 10 13 
17628     14 15 15 15 | 	byte	$ec, $ee, $f2, $f5, $f8, $fd, $01, $06, $0a, $0d, $10, $13, $14, $15, $15, $15
1762c     13 10 0D 0A 
17630     07 02 FD FA 
17634     F5 F2 EF ED 
17638     EB EA EB EB | 	byte	$13, $10, $0d, $0a, $07, $02, $fd, $fa, $f5, $f2, $ef, $ed, $eb, $ea, $eb, $eb
1763c     ED EF F2 F5 
17640     FA FE 02 07 
17644     0A 0E 11 13 
17648     14 15 15 14 | 	byte	$ed, $ef, $f2, $f5, $fa, $fe, $02, $07, $0a, $0e, $11, $13, $14, $15, $15, $14
1764c     12 0F 0D 09 
17650     05 01 FD F9 
17654     F5 F2 EF ED 
17658     EC EB EB EC | 	byte	$12, $0f, $0d, $09, $05, $01, $fd, $f9, $f5, $f2, $ef, $ed, $ec, $eb, $eb, $ec
1765c     EE F0 F3 F6 
17660     FA FF 03 07 
17664     0B 0E 11 13 
17668     14 15 15 13 | 	byte	$ee, $f0, $f3, $f6, $fa, $ff, $03, $07, $0b, $0e, $11, $13, $14, $15, $15, $13
1766c     12 0F 0C 08 
17670     05 00 FC F8 
17674     F4 F1 EF ED 
17678     EC EB EB ED | 	byte	$12, $0f, $0c, $08, $05, $00, $fc, $f8, $f4, $f1, $ef, $ed, $ec, $eb, $eb, $ed
1767c     EE F1 F4 F8 
17680     FC 00 04 08 
17684     0C 0F 11 13 
17688     14 15 14 13 | 	byte	$ee, $f1, $f4, $f8, $fc, $00, $04, $08, $0c, $0f, $11, $13, $14, $15, $14, $13
1768c     11 0E 0B 07 
17690     03 FF FB F8 
17694     F4 F0 EE ED 
17698     EC EB EC ED | 	byte	$11, $0e, $0b, $07, $03, $ff, $fb, $f8, $f4, $f0, $ee, $ed, $ec, $eb, $ec, $ed
1769c     EF F2 F5 F9 
176a0     FD 01 05 08 
176a4     0C 0F 11 13 
176a8     14 14 14 12 | 	byte	$ef, $f2, $f5, $f9, $fd, $01, $05, $08, $0c, $0f, $11, $13, $14, $14, $14, $12
176ac     10 0E 0B 07 
176b0     03 FE FB F7 
176b4     F3 F1 EE ED 
176b8     EC EC EC EE | 	byte	$10, $0e, $0b, $07, $03, $fe, $fb, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ec, $ee
176bc     F0 F3 F6 F9 
176c0     FD 02 06 0A 
176c4     0D 10 12 13 
176c8     14 14 14 12 | 	byte	$f0, $f3, $f6, $f9, $fd, $02, $06, $0a, $0d, $10, $12, $13, $14, $14, $14, $12
176cc     10 0D 0A 06 
176d0     02 FE FA F7 
176d4     F3 F1 EE ED 
176d8     EC EC ED EE | 	byte	$10, $0d, $0a, $06, $02, $fe, $fa, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ee
176dc     F1 F3 F7 FA 
176e0     FF 02 07 0A 
176e4     0D 10 12 14 
176e8     14 14 13 12 | 	byte	$f1, $f3, $f7, $fa, $ff, $02, $07, $0a, $0d, $10, $12, $14, $14, $14, $13, $12
176ec     0F 0C 09 05 
176f0     02 FD FA F6 
176f4     F3 F1 EE ED 
176f8     EC EC ED EF | 	byte	$0f, $0c, $09, $05, $02, $fd, $fa, $f6, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ef
176fc     F1 F4 F8 FB 
17700     FF 03 06 0A 
17704     0D 10 12 13 
17708     13 13 12 11 | 	byte	$f1, $f4, $f8, $fb, $ff, $03, $06, $0a, $0d, $10, $12, $13, $13, $13, $12, $11
1770c     0E 0B 08 04 
17710     00 FD F8 F5 
17714     F2 EF ED ED 
17718     EC EC ED EF | 	byte	$0e, $0b, $08, $04, $00, $fd, $f8, $f5, $f2, $ef, $ed, $ed, $ec, $ec, $ed, $ef
1771c     F1 F4 F8 FC 
17720     FF 03 07 0A 
17724     0E 10 12 13 
17728     14 13 12 10 | 	byte	$f1, $f4, $f8, $fc, $ff, $03, $07, $0a, $0e, $10, $12, $13, $14, $13, $12, $10
1772c     0E 0B 07 04 
17730     00 FC F8 F5 
17734     F2 F0 EE ED 
17738     EC ED EE F0 | 	byte	$0e, $0b, $07, $04, $00, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ec, $ed, $ee, $f0
1773c     F2 F5 F8 FD 
17740     01 04 08 0B 
17744     0E 10 12 13 
17748     13 13 11 0F | 	byte	$f2, $f5, $f8, $fd, $01, $04, $08, $0b, $0e, $10, $12, $13, $13, $13, $11, $0f
1774c     0D 0A 07 03 
17750     FF FC F8 F5 
17754     F2 F0 EE ED 
17758     ED EE EF F1 | 	byte	$0d, $0a, $07, $03, $ff, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ed, $ee, $ef, $f1
1775c     F3 F6 FA FD 
17760     01 05 08 0B 
17764     0E 10 12 13 
17768     13 12 11 0F | 	byte	$f3, $f6, $fa, $fd, $01, $05, $08, $0b, $0e, $10, $12, $13, $13, $12, $11, $0f
1776c     0D 09 06 02 
17770     FE FB F8 F4 
17774     F1 EF EE ED 
17778     ED EE EF F1 | 	byte	$0d, $09, $06, $02, $fe, $fb, $f8, $f4, $f1, $ef, $ee, $ed, $ed, $ee, $ef, $f1
1777c     F4 F7 FB FE 
17780     02 05 09 0C 
17784     0E 10 12 13 
17788     13 12 10 0F | 	byte	$f4, $f7, $fb, $fe, $02, $05, $09, $0c, $0e, $10, $12, $13, $13, $12, $10, $0f
1778c     0C 09 05 01 
17790     FE FA F7 F3 
17794     F1 EF EE ED 
17798     ED EE F0 F2 | 	byte	$0c, $09, $05, $01, $fe, $fa, $f7, $f3, $f1, $ef, $ee, $ed, $ed, $ee, $f0, $f2
1779c     F5 F8 FB FF 
177a0     03 06 09 0C 
177a4     0F 11 12 12 
177a8     12 11 10 0E | 	byte	$f5, $f8, $fb, $ff, $03, $06, $09, $0c, $0f, $11, $12, $12, $12, $11, $10, $0e
177ac     0B 08 04 01 
177b0     FE FA F7 F4 
177b4     F1 F0 EF EE 
177b8     EE EF F0 F3 | 	byte	$0b, $08, $04, $01, $fe, $fa, $f7, $f4, $f1, $f0, $ef, $ee, $ee, $ef, $f0, $f3
177bc     F5 F9 FC 00 
177c0     04 07 0A 0C 
177c4     0F 11 12 12 
177c8     12 11 0F 0D | 	byte	$f5, $f9, $fc, $00, $04, $07, $0a, $0c, $0f, $11, $12, $12, $12, $11, $0f, $0d
177cc     0B 07 04 00 
177d0     FD F9 F6 F3 
177d4     F1 EF EE EE 
177d8     EE EF F1 F3 | 	byte	$0b, $07, $04, $00, $fd, $f9, $f6, $f3, $f1, $ef, $ee, $ee, $ee, $ef, $f1, $f3
177dc     F6 F9 FC 00 
177e0     04 07 0A 0D 
177e4     0F 10 11 11 
177e8     11 10 0E 0C | 	byte	$f6, $f9, $fc, $00, $04, $07, $0a, $0d, $0f, $10, $11, $11, $11, $10, $0e, $0c
177ec     09 06 03 FF 
177f0     FC F8 F5 F3 
177f4     F0 EF EE EE 
177f8     EF EF F1 F4 | 	byte	$09, $06, $03, $ff, $fc, $f8, $f5, $f3, $f0, $ef, $ee, $ee, $ef, $ef, $f1, $f4
177fc     F6 FA FD 01 
17800     04 07 0A 0D 
17804     0F 11 11 11 
17808     11 10 0E 0C | 	byte	$f6, $fa, $fd, $01, $04, $07, $0a, $0d, $0f, $11, $11, $11, $11, $10, $0e, $0c
1780c     09 05 02 FF 
17810     FB F8 F5 F2 
17814     F1 EF EE EE 
17818     EF F0 F2 F4 | 	byte	$09, $05, $02, $ff, $fb, $f8, $f5, $f2, $f1, $ef, $ee, $ee, $ef, $f0, $f2, $f4
1781c     F7 FB FE 01 
17820     05 08 0B 0E 
17824     0F 10 11 11 
17828     11 0F 0D 0B | 	byte	$f7, $fb, $fe, $01, $05, $08, $0b, $0e, $0f, $10, $11, $11, $11, $0f, $0d, $0b
1782c     08 05 01 FE 
17830     FB F7 F5 F2 
17834     F0 EF EF EF 
17838     F0 F1 F3 F5 | 	byte	$08, $05, $01, $fe, $fb, $f7, $f5, $f2, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
1783c     F8 FB FF 02 
17840     06 09 0B 0D 
17844     0F 10 11 11 
17848     10 0E 0C 0A | 	byte	$f8, $fb, $ff, $02, $06, $09, $0b, $0d, $0f, $10, $11, $11, $10, $0e, $0c, $0a
1784c     07 04 01 FD 
17850     FA F7 F4 F2 
17854     F1 EF EF EF 
17858     F0 F2 F4 F6 | 	byte	$07, $04, $01, $fd, $fa, $f7, $f4, $f2, $f1, $ef, $ef, $ef, $f0, $f2, $f4, $f6
1785c     F9 FC FF 03 
17860     06 09 0B 0D 
17864     0F 10 11 10 
17868     0F 0E 0C 09 | 	byte	$f9, $fc, $ff, $03, $06, $09, $0b, $0d, $0f, $10, $11, $10, $0f, $0e, $0c, $09
1786c     07 03 00 FC 
17870     F9 F6 F4 F2 
17874     F0 F0 EF F0 
17878     F1 F2 F5 F7 | 	byte	$07, $03, $00, $fc, $f9, $f6, $f4, $f2, $f0, $f0, $ef, $f0, $f1, $f2, $f5, $f7
1787c     FA FD 00 03 
17880     07 09 0C 0E 
17884     0F 10 10 10 
17888     0F 0D 0B 09 | 	byte	$fa, $fd, $00, $03, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0f, $0d, $0b, $09
1788c     06 03 FF FC 
17890     F9 F6 F4 F2 
17894     F1 F0 F0 F0 
17898     F1 F3 F5 F8 | 	byte	$06, $03, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f0, $f1, $f3, $f5, $f8
1789c     FB FE 01 04 
178a0     07 09 0C 0E 
178a4     0F 10 10 10 
178a8     0E 0D 0A 08 | 	byte	$fb, $fe, $01, $04, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0e, $0d, $0a, $08
178ac     05 02 FF FC 
178b0     F9 F6 F4 F2 
178b4     F1 F0 F0 F1 
178b8     F2 F3 F5 F9 | 	byte	$05, $02, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f1, $f2, $f3, $f5, $f9
178bc     FB FF 02 05 
178c0     08 0A 0C 0E 
178c4     0F 10 0F 0E 
178c8     0D 0C 09 06 | 	byte	$fb, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $10, $0f, $0e, $0d, $0c, $09, $06
178cc     04 00 FE FB 
178d0     F8 F6 F3 F1 
178d4     F1 F0 F1 F1 
178d8     F2 F4 F6 F9 | 	byte	$04, $00, $fe, $fb, $f8, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f6, $f9
178dc     FC FF 02 05 
178e0     08 0A 0C 0E 
178e4     0F 0F 10 0E 
178e8     0D 0B 09 06 | 	byte	$fc, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $0f, $10, $0e, $0d, $0b, $09, $06
178ec     03 01 FD FA 
178f0     F8 F5 F4 F2 
178f4     F1 F1 F1 F2 
178f8     F3 F5 F7 FA | 	byte	$03, $01, $fd, $fa, $f8, $f5, $f4, $f2, $f1, $f1, $f1, $f2, $f3, $f5, $f7, $fa
178fc     FD 00 03 05 
17900     08 0B 0C 0D 
17904     0F 0F 0E 0E 
17908     0C 0A 08 05 | 	byte	$fd, $00, $03, $05, $08, $0b, $0c, $0d, $0f, $0f, $0e, $0e, $0c, $0a, $08, $05
1790c     03 00 FD FA 
17910     F7 F5 F4 F2 
17914     F2 F1 F2 F3 
17918     F4 F6 F8 FB | 	byte	$03, $00, $fd, $fa, $f7, $f5, $f4, $f2, $f2, $f1, $f2, $f3, $f4, $f6, $f8, $fb
1791c     FE 01 03 06 
17920     09 0B 0C 0D 
17924     0E 0E 0E 0D 
17928     0B 09 07 04 | 	byte	$fe, $01, $03, $06, $09, $0b, $0c, $0d, $0e, $0e, $0e, $0d, $0b, $09, $07, $04
1792c     02 FF FC F9 
17930     F7 F5 F3 F2 
17934     F2 F2 F2 F3 
17938     F5 F7 F9 FC | 	byte	$02, $ff, $fc, $f9, $f7, $f5, $f3, $f2, $f2, $f2, $f2, $f3, $f5, $f7, $f9, $fc
1793c     FE 01 04 07 
17940     09 0B 0D 0D 
17944     0E 0D 0D 0C 
17948     0B 09 06 04 | 	byte	$fe, $01, $04, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0c, $0b, $09, $06, $04
1794c     01 FF FB F9 
17950     F6 F5 F3 F2 
17954     F2 F2 F3 F4 
17958     F6 F7 FA FC | 	byte	$01, $ff, $fb, $f9, $f6, $f5, $f3, $f2, $f2, $f2, $f3, $f4, $f6, $f7, $fa, $fc
1795c     FF 02 05 07 
17960     09 0B 0D 0D 
17964     0E 0D 0D 0B 
17968     0A 08 06 03 | 	byte	$ff, $02, $05, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0b, $0a, $08, $06, $03
1796c     01 FE FB F9 
17970     F7 F5 F4 F3 
17974     F3 F3 F4 F5 
17978     F6 F9 FB FE | 	byte	$01, $fe, $fb, $f9, $f7, $f5, $f4, $f3, $f3, $f3, $f4, $f5, $f6, $f9, $fb, $fe
1797c     00 03 05 08 
17980     0A 0B 0C 0D 
17984     0E 0D 0C 0B 
17988     09 07 05 02 | 	byte	$00, $03, $05, $08, $0a, $0b, $0c, $0d, $0e, $0d, $0c, $0b, $09, $07, $05, $02
1798c     00 FD FA F8 
17990     F6 F5 F4 F3 
17994     F3 F3 F4 F6 
17998     F7 F9 FC FE | 	byte	$00, $fd, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f3, $f4, $f6, $f7, $f9, $fc, $fe
1799c     01 03 06 08 
179a0     0A 0B 0C 0D 
179a4     0D 0C 0B 09 
179a8     08 06 04 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $09, $08, $06, $04, $01
179ac     FF FC FA F8 
179b0     F6 F5 F4 F3 
179b4     F3 F4 F5 F6 
179b8     F8 FA FC FF | 	byte	$ff, $fc, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f4, $f5, $f6, $f8, $fa, $fc, $ff
179bc     01 03 06 08 
179c0     0A 0B 0B 0C 
179c4     0C 0C 0B 09 
179c8     07 05 03 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0b, $0c, $0c, $0c, $0b, $09, $07, $05, $03, $01
179cc     FE FC F9 F8 
179d0     F6 F5 F4 F3 
179d4     F4 F4 F5 F7 
179d8     F8 FA FD FF | 	byte	$fe, $fc, $f9, $f8, $f6, $f5, $f4, $f3, $f4, $f4, $f5, $f7, $f8, $fa, $fd, $ff
179dc     02 04 06 08 
179e0     09 0B 0C 0C 
179e4     0C 0B 0A 08 
179e8     06 04 02 00 | 	byte	$02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0b, $0a, $08, $06, $04, $02, $00
179ec     FE FB FA F7 
179f0     F6 F5 F4 F4 
179f4     F4 F5 F6 F8 
179f8     FA FC FE 00 | 	byte	$fe, $fb, $fa, $f7, $f6, $f5, $f4, $f4, $f4, $f5, $f6, $f8, $fa, $fc, $fe, $00
179fc     03 05 07 08 
17a00     0A 0B 0B 0B 
17a04     0B 0A 09 08 
17a08     05 03 01 FF | 	byte	$03, $05, $07, $08, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $05, $03, $01, $ff
17a0c     FD FB F9 F7 
17a10     F6 F5 F4 F5 
17a14     F5 F6 F7 F8 
17a18     FB FC FF 01 | 	byte	$fd, $fb, $f9, $f7, $f6, $f5, $f4, $f5, $f5, $f6, $f7, $f8, $fb, $fc, $ff, $01
17a1c     03 05 07 09 
17a20     0A 0A 0B 0B 
17a24     0A 0A 08 07 
17a28     05 03 01 FE | 	byte	$03, $05, $07, $09, $0a, $0a, $0b, $0b, $0a, $0a, $08, $07, $05, $03, $01, $fe
17a2c     FC FA F8 F7 
17a30     F6 F5 F5 F5 
17a34     F6 F6 F8 F9 
17a38     FB FD FF 01 | 	byte	$fc, $fa, $f8, $f7, $f6, $f5, $f5, $f5, $f6, $f6, $f8, $f9, $fb, $fd, $ff, $01
17a3c     03 05 07 08 
17a40     09 0A 0B 0B 
17a44     0A 09 08 06 
17a48     04 02 00 FE | 	byte	$03, $05, $07, $08, $09, $0a, $0b, $0b, $0a, $09, $08, $06, $04, $02, $00, $fe
17a4c     FC FB F9 F7 
17a50     F6 F6 F6 F6 
17a54     F7 F7 F9 FA 
17a58     FD FE 00 03 | 	byte	$fc, $fb, $f9, $f7, $f6, $f6, $f6, $f6, $f7, $f7, $f9, $fa, $fd, $fe, $00, $03
17a5c     04 06 08 09 
17a60     0A 0A 0A 0A 
17a64     09 08 07 05 
17a68     04 01 00 FD | 	byte	$04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $08, $07, $05, $04, $01, $00, $fd
17a6c     FC FA F8 F7 
17a70     F6 F6 F6 F6 
17a74     F7 F8 F9 FB 
17a78     FD FE 01 03 | 	byte	$fc, $fa, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $fe, $01, $03
17a7c     05 06 08 09 
17a80     09 0A 09 09 
17a84     08 07 06 04 
17a88     03 01 FF FD | 	byte	$05, $06, $08, $09, $09, $0a, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd
17a8c     FB F9 F8 F7 
17a90     F6 F6 F6 F6 
17a94     F7 F8 F9 FB 
17a98     FD FF 01 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $ff, $01, $03
17a9c     05 06 07 09 
17aa0     09 0A 0A 09 
17aa4     08 07 05 04 
17aa8     02 00 FF FD | 	byte	$05, $06, $07, $09, $09, $0a, $0a, $09, $08, $07, $05, $04, $02, $00, $ff, $fd
17aac     FB F9 F8 F7 
17ab0     F6 F6 F6 F7 
17ab4     F8 F9 FA FC 
17ab8     FE 00 02 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f7, $f8, $f9, $fa, $fc, $fe, $00, $02, $03
17abc     05 07 08 08 
17ac0     09 09 09 09 
17ac4     08 06 05 03 
17ac8     02 00 FE FC | 	byte	$05, $07, $08, $08, $09, $09, $09, $09, $08, $06, $05, $03, $02, $00, $fe, $fc
17acc     FA F9 F8 F7 
17ad0     F7 F7 F7 F7 
17ad4     F8 F9 FB FD 
17ad8     FF 00 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f7, $f8, $f9, $fb, $fd, $ff, $00, $02, $04
17adc     06 07 08 08 
17ae0     09 09 09 08 
17ae4     07 06 04 03 
17ae8     01 FF FD FC | 	byte	$06, $07, $08, $08, $09, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd, $fc
17aec     FA F9 F8 F7 
17af0     F7 F7 F7 F8 
17af4     F9 FA FC FD 
17af8     FF 01 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04
17afc     06 07 08 09 
17b00     09 09 08 08 
17b04     07 05 04 02 
17b08     01 FF FD FB | 	byte	$06, $07, $08, $09, $09, $09, $08, $08, $07, $05, $04, $02, $01, $ff, $fd, $fb
17b0c     FA F9 F8 F7 
17b10     F7 F7 F8 F8 
17b14     F9 FA FC FE 
17b18     FF 01 03 05 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $03, $05
17b1c     06 07 08 09 
17b20     09 09 08 07 
17b24     06 05 04 02 
17b28     00 FF FD FC | 	byte	$06, $07, $08, $09, $09, $09, $08, $07, $06, $05, $04, $02, $00, $ff, $fd, $fc
17b2c     FA F9 F8 F8 
17b30     F8 F8 F8 F9 
17b34     FA FB FD FE 
17b38     00 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fd, $fe, $00, $02, $04, $05
17b3c     06 07 08 08 
17b40     08 09 08 07 
17b44     06 05 03 01 
17b48     00 FE FD FB | 	byte	$06, $07, $08, $08, $08, $09, $08, $07, $06, $05, $03, $01, $00, $fe, $fd, $fb
17b4c     FA F9 F8 F8 
17b50     F8 F8 F8 F9 
17b54     FA FC FD FF 
17b58     01 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04, $05
17b5c     06 07 08 08 
17b60     08 08 07 06 
17b64     05 04 02 00 
17b68     FF FE FC FA | 	byte	$06, $07, $08, $08, $08, $08, $07, $06, $05, $04, $02, $00, $ff, $fe, $fc, $fa
17b6c     F9 F8 F8 F7 
17b70     F8 F8 F8 F9 
17b74     FA FC FE FF 
17b78     01 02 04 05 | 	byte	$f9, $f8, $f8, $f7, $f8, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $02, $04, $05
17b7c     07 07 08 08 
17b80     08 08 07 06 
17b84     05 03 02 01 
17b88     FF FD FC FA | 	byte	$07, $07, $08, $08, $08, $08, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fa
17b8c     F9 F8 F8 F8 
17b90     F8 F8 F9 FA 
17b94     FB FC FE 00 
17b98     01 03 04 05 | 	byte	$f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $00, $01, $03, $04, $05
17b9c     07 07 08 08 
17ba0     08 07 07 06 
17ba4     05 03 02 00 
17ba8     FE FD FB FA | 	byte	$07, $07, $08, $08, $08, $07, $07, $06, $05, $03, $02, $00, $fe, $fd, $fb, $fa
17bac     F9 F8 F8 F8 
17bb0     F8 F9 F9 FA 
17bb4     FC FD FF 00 
17bb8     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $f9, $fa, $fc, $fd, $ff, $00, $02, $04, $05, $06
17bbc     07 07 08 08 
17bc0     08 07 06 05 
17bc4     04 02 01 FF 
17bc8     FE FC FB FA | 	byte	$07, $07, $08, $08, $08, $07, $06, $05, $04, $02, $01, $ff, $fe, $fc, $fb, $fa
17bcc     F9 F8 F8 F8 
17bd0     F8 F9 FA FB 
17bd4     FC FE FF 01 
17bd8     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17bdc     07 07 07 08 
17be0     07 07 06 05 
17be4     03 02 01 FF 
17be8     FD FC FB F9 | 	byte	$07, $07, $07, $08, $07, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $f9
17bec     F9 F8 F7 F8 
17bf0     F8 F9 FA FB 
17bf4     FC FE FF 01 
17bf8     02 04 05 06 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17bfc     07 07 08 08 
17c00     07 07 06 04 
17c04     03 02 00 FF 
17c08     FD FC FB FA | 	byte	$07, $07, $08, $08, $07, $07, $06, $04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa
17c0c     F9 F9 F8 F9 
17c10     F9 FA FA FC 
17c14     FD FE 00 01 
17c18     03 04 05 06 | 	byte	$f9, $f9, $f8, $f9, $f9, $fa, $fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06
17c1c     07 07 08 07 
17c20     07 06 05 04 
17c24     03 02 00 FE 
17c28     FD FC FB FA | 	byte	$07, $07, $08, $07, $07, $06, $05, $04, $03, $02, $00, $fe, $fd, $fc, $fb, $fa
17c2c     F9 F8 F9 F9 
17c30     F9 FA FB FC 
17c34     FD FF 01 02 
17c38     03 05 06 06 | 	byte	$f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fd, $ff, $01, $02, $03, $05, $06, $06
17c3c     07 07 07 07 
17c40     07          | 	byte	$07[5]
17c41     06 05 03 02 
17c45     01 FF FE FC 
17c49     FB FA F9 F9 
17c4d     F8 F8 F8 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fe, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f9
17c51     FA FB FC FD 
17c55     FF 00 02 03 
17c59     04 05 07 07 
17c5d     07 07 07 07 | 	byte	$fa, $fb, $fc, $fd, $ff, $00, $02, $03, $04, $05, $07, $07, $07, $07, $07, $07
17c61     06 05 03 02 
17c65     01 FF FD FC 
17c69     FB FA F9 F9 
17c6d     F8 F8 F9 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f9, $f9
17c71     FA FB FD FE 
17c75     FF 01 02 04 
17c79     05 06 07 07 
17c7d     07 07 07 07 | 	byte	$fa, $fb, $fd, $fe, $ff, $01, $02, $04, $05, $06, $07, $07, $07, $07, $07, $07
17c81     06 04 03 02 
17c85     01 FF FD FC 
17c89     FB FA F9 F9 
17c8d     F9 F9 F9 F9 | 	byte	$06, $04, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $f9
17c91     FA FC FD FE 
17c95     00 01 03 04 
17c99     05 06 07 07 
17c9d     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17ca1     05 04 03 01 
17ca5     00 FF FD FC 
17ca9     FB F9 F9 F9 
17cad     F8 F8 F9 FA | 	byte	$05, $04, $03, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f9, $f8, $f8, $f9, $fa
17cb1     FA FC FD FE 
17cb5     00 01 03 04 
17cb9     05 06 07 07 
17cbd     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17cc1     05 04 02 01 
17cc5     00 FF FD FC 
17cc9     FB F9 F9 F8 
17ccd     F8 F9 F9 FA | 	byte	$05, $04, $02, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f8, $f8, $f9, $f9, $fa
17cd1     FB FC FD FE 
17cd5     00 02 03 04 
17cd9     05 06 07 07 
17cdd     07 07 06 06 | 	byte	$fb, $fc, $fd, $fe, $00, $02, $03, $04, $05, $06, $07, $07, $07, $07, $06, $06
17ce1     05 04 03 01 
17ce5     00 FE FD FC 
17ce9     FB FA F9 F9 
17ced     F9 F9 FA FB | 	byte	$05, $04, $03, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb
17cf1     FC FD FE FF 
17cf5     01 02 03 04 
17cf9     06 06 07 07 
17cfd     07 07 06 05 | 	byte	$fc, $fd, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17d01     05 04 02 01 
17d05     00 FE FD FB 
17d09     FB FA F9 F9 
17d0d     F9 F9 FA FA | 	byte	$05, $04, $02, $01, $00, $fe, $fd, $fb, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17d11     FC FC FE FF 
17d15     01 02 03 05 
17d19     06 06 07 07 
17d1d     07 06 06 05 | 	byte	$fc, $fc, $fe, $ff, $01, $02, $03, $05, $06, $06, $07, $07, $07, $06, $06, $05
17d21     04 03 01 00 
17d25     FF FD FC FB 
17d29     FA FA F9 F9 
17d2d     F9 F9 FA FA | 	byte	$04, $03, $01, $00, $ff, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17d31     FB FC FE FF 
17d35     01 02 03 04 
17d39     06 06 07 07 
17d3d     07 07 06 05 | 	byte	$fb, $fc, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17d41     04 03 02 00 
17d45     FF FD FC FB 
17d49     FA F9 F9 F9 
17d4d     F9 F9 FA FB | 	byte	$04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $fa, $fb
17d51     FC FD FE 00 
17d55     01 02 03 04 
17d59     05 06 07 07 
17d5d     07 06 06 05 | 	byte	$fc, $fd, $fe, $00, $01, $02, $03, $04, $05, $06, $07, $07, $07, $06, $06, $05
17d61     04 03 02 00 
17d65     FF FE FC FB 
17d69     FA FA F9 F9 
17d6d     F9 F9 FB FC | 	byte	$04, $03, $02, $00, $ff, $fe, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fb, $fc
17d71     FC FD FF 00 
17d75     02 03 04 05 
17d79     06 06 07 07 
17d7d     07 06 06 05 | 	byte	$fc, $fd, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $07, $06, $06, $05
17d81     04 02 01 00 
17d85     FF FD FC FB 
17d89     FA F9 F9 F9 
17d8d     F9 FA FB FB | 	byte	$04, $02, $01, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb, $fb
17d91     FC FE FF 01 
17d95     01 03 04 05 
17d99     06 06 06 06 
17d9d     07 06 05 04 | 	byte	$fc, $fe, $ff, $01, $01, $03, $04, $05, $06, $06, $06, $06, $07, $06, $05, $04
17da1     03 02 01 00 
17da5     FE FD FC FB 
17da9     FA F9 F9 F9 
17dad     F9 FA FA FB | 	byte	$03, $02, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa, $fb
17db1     FC FE FF 00 
17db5     02 03 04 05 
17db9     06 06 07 07 
17dbd     06 06 05 04 | 	byte	$fc, $fe, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17dc1     03 02 01 FF 
17dc5     FF FD FC FB 
17dc9     FA F9 F9 FA 
17dcd     FA FA FB FC | 	byte	$03, $02, $01, $ff, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $fa, $fa, $fa, $fb, $fc
17dd1     FD FE 00 01 
17dd5     02 03 04 05 
17dd9     06 06 07 07 
17ddd     06 06 05 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17de1     03 02 00 FF 
17de5     FE FD FC FB 
17de9     FA FA FA FA 
17ded     FA FB FB FC | 	byte	$03, $02, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fc
17df1     FD FE 00 01 
17df5     02 03 04 05 
17df9     06 06 06 06 
17dfd     06 05 04 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $04
17e01     02 01 00 FE 
17e05     FD FC FB FA 
17e09     FA F9 F9 F9 
17e0d     FA FA FB FC | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $fa, $fa, $fb, $fc
17e11     FD FE 00 01 
17e15     02 03 04 05 
17e19     06 06 06 06 
17e1d     06 05 04 03 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $03
17e21     02 01 00 FE 
17e25     FD FC FB FB 
17e29     FA FA FA FA 
17e2d     FA FB FB FD | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fd
17e31     FE FF 00 01 
17e35     03 03 04 05 
17e39     06 06 06 06 
17e3d     05 05 04 03 | 	byte	$fe, $ff, $00, $01, $03, $03, $04, $05, $06, $06, $06, $06, $05, $05, $04, $03
17e41     02 01 FF FE 
17e45     FD FC FB FB 
17e49     FA FA FA FA 
17e4d     FA FB FC FD | 	byte	$02, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fc, $fd
17e51     FE FF 01 02 
17e55     03 04 05 05 
17e59     05 06 06 05 
17e5d     05 04 04 03 | 	byte	$fe, $ff, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $04, $03
17e61     01 01 FF FE 
17e65     FD FC FB FB 
17e69     FA FA FA FB 
17e6d     FB FC FC FD | 	byte	$01, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fc, $fd
17e71     FF 00 01 02 
17e75     03 04 05 05 
17e79     05 06 05 05 
17e7d     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $05, $05, $06, $05, $05, $05, $04, $03, $02
17e81     01 00 FF FE 
17e85     FD FC FB FA 
17e89     FA FA FA FB 
17e8d     FB FB FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fb, $fb, $fd, $fe
17e91     FE 00 01 02 
17e95     03 04 05 05 
17e99     05 06 06 05 
17e9d     05 04 03 02 | 	byte	$fe, $00, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $03, $02
17ea1     01 00 FF FE 
17ea5     FD FC FB FB 
17ea9     FB FA FA FB 
17ead     FB FC FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fa, $fa, $fb, $fb, $fc, $fd, $fe
17eb1     FF 00 01 02 
17eb5     03 04 05 06 
17eb9     05 06 05 05 
17ebd     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $06, $05, $06, $05, $05, $05, $04, $03, $02
17ec1     01 00 FF FE 
17ec5     FD FC FB FB 
17ec9     FB FB FB FB 
17ecd     FC FD FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe
17ed1     FF 01 02 03 
17ed5     03 04 05 05 
17ed9     05 05 05 05 
17edd     04 03 02 01 | 	byte	$ff, $01, $02, $03, $03, $04, $05, $05, $05, $05, $05, $05, $04, $03, $02, $01
17ee1     00 FF FE FD 
17ee5     FC FC FB FB 
17ee9     FA FA FB FB 
17eed     FB FC FD FE | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fd, $fe
17ef1     FF 00 01 02 
17ef5     03 04 04 05 
17ef9     05 05 05 04 
17efd     03 03 02 01 | 	byte	$ff, $00, $01, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03, $03, $02, $01
17f01     00 FF FE FD 
17f05     FC FB FB FB 
17f09     FB FB FB FB 
17f0d     FC FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fe, $ff
17f11     00 01 02 03 
17f15     03 04 04 05 
17f19     05 05 04 04 
17f1d     04 03 02 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $05, $04, $04, $04, $03, $02, $01
17f21     00 FF FE FD 
17f25     FC FB FB FB 
17f29     FB FB FB FC 
17f2d     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff
17f31     00 01 02 02 
17f35     03 04 04 05 
17f39     05 05 04 04 
17f3d     03 02 02 01 | 	byte	$00, $01, $02, $02, $03, $04, $04, $05, $05, $05, $04, $04, $03, $02, $02, $01
17f41     00 FF FE FD 
17f45     FC FC FB FB 
17f49     FB FB FC FC 
17f4d     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
17f51     00 01 02 03 
17f55     03 04 04 05 
17f59     05 04 04 03 
17f5d     03 02 01 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $04, $04, $03, $03, $02, $01, $01
17f61     00 FF FE FD 
17f65     FD FC FB FC 
17f69     FB FB FC FC 
17f6d     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fb, $fc, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $00
17f71     01 02 02 03 
17f75     04 04 04 04 
17f79     04 04 04 04 
17f7d     03 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $04, $03, $02, $01, $00
17f81     00 FF FE FD 
17f85     FD FC FC FC 
17f89     FC FC FD FD 
17f8d     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
17f91     01 02 02 03 
17f95     04 04 04 04 
17f99     04 04 04 03 
17f9d     02 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00
17fa1     FF FF FE FD 
17fa5     FC FC FC FC 
17fa9     FC FD FD FD 
17fad     FE FF FF 00 | 	byte	$ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00
17fb1     01 02 02 03 
17fb5     04 04 04 04 
17fb9     04 04 03 02 
17fbd     02 01 00 FF | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00, $ff
17fc1     FE FE FD FC 
17fc5     FC FC FC FC 
17fc9     FC FC FD FD 
17fcd     FE FF FF 00 | 	byte	$fe, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00
17fd1     01 01 02 03 
17fd5     03 03 04 04 
17fd9     03 03 03 02 
17fdd     02 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $04, $04, $03, $03, $03, $02, $02, $01, $00, $00
17fe1     FF FE FD FD 
17fe5     FC FC FC FC 
17fe9     FC FC FD FE 
17fed     FE FF FF 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $ff, $01
17ff1     01 01 02 03 
17ff5     03 04 03 04 
17ff9     03 03 03 02 
17ffd     01 00 00 FF | 	byte	$01, $01, $02, $03, $03, $04, $03, $04, $03, $03, $03, $02, $01, $00, $00, $ff
18001     FE FE FD FD 
18005     FD FD FC FC 
18009     FD FD FD FE 
1800d     FE FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
18011     01 02 02 03 
18015     03 03 03 03 
18019     03 03 02 01 
1801d     01 01 00 FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $00, $ff
18021     FE FE FD FD 
18025     FD FC FC FD 
18029     FD FD FD FE 
1802d     FF FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $01
18031     01 02 02 03 
18035     03 03 03 03 
18039     03 02 02 01 
1803d     01 00 FF FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $ff, $ff
18041     FE FD FD FD 
18045     FD FC FC FC 
18049     FD FD FE FE 
1804d     FF 00 00 01 | 	byte	$fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe, $ff, $00, $00, $01
18051     01 02 02 02 
18055     03 03 03 03 
18059     03 03 02 01 
1805d     01 00 FF FF | 	byte	$01, $02, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $00, $ff, $ff
18061     FE FE FD FD 
18065     FD FD FD FD 
18069     FD FE FE FF 
1806d     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00, $01, $01
18071     02 02 03 03 
18075     03 03 03 03 
18079     03 02 02 01 
1807d     01 00 00 FF | 	byte	$02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $00, $ff
18081     FE FE FD FD 
18085     FD FD FD FE 
18089     FE FE FE FF 
1808d     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01
18091     02 02 02 03 
18095     03 03 03 02 
18099     02 02 01 01 
1809d     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff
180a1     FE FE FD FD 
180a5     FD FD FD FD 
180a9     FD FE FE FF 
180ad     FF 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $01, $01
180b1     02 02 02 03 
180b5     03 03 02 02 
180b9     02 02 01 00 
180bd     00 00 FF FE | 	byte	$02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $00, $00, $00, $ff, $fe
180c1     FE FE FD FD 
180c5     FD FD FD FD 
180c9     FD FE FF FF 
180cd     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $01
180d1     02 02 02 02 
180d5     03 02 02 02 
180d9     02 02 01 01 
180dd     00 FF FF FE | 	byte	$02, $02, $02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $ff, $fe
180e1     FE FE FD FD 
180e5     FD FD FD FE 
180e9     FE FF FF 00 
180ed     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
180f1     02 02 03 03 
180f5     03 03 03 02 
180f9     02 01 01 01 
180fd     00 FF FF FE | 	byte	$02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $00, $ff, $ff, $fe
18101     FE FD FD FD 
18105     FD FD FE FE 
18109     FE FF FF 00 
1810d     00 01 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
18111     02 02 02 02 
18115     03 03 02 02 
18119     02 01 01 00 
1811d     FF FF FF FE | 	byte	$02, $02, $02, $02, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff, $fe
18121     FE FD FD FE 
18125     FD FD FD FE 
18129     FE FF FF FF 
1812d     00 01 01 02 | 	byte	$fe, $fd, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $00, $01, $01, $02
18131     02 02 02 03 
18135     03 02 02 02 
18139     02 02 01 00 
1813d     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $ff, $ff
18141     FE FE FE FE 
18145     FE FE FE FE | 	byte	$fe[8]
18149     FF FF 00 00 
1814d     01 01 02 02 
18151     03 03 03 03 
18155     03 03 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02
18159     01 01 01 00 
1815d     00 FF FF FE 
18161     FE FE FE FE 
18165     FE FE FE FE | 	byte	$01, $01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe
18169     FF FF 00 00 
1816d     01 01 02 02 
18171     02 02 03 02 
18175     02 02 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $02, $02, $03, $02, $02, $02, $02, $02
18179     01 01 00 00 
1817d     FF FF FE FE 
18181     FE FE FD FD 
18185     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe
18189     FF FF 00 00 
1818d     00 01 01 02 
18191     02 02 02 02 
18195     03 02 02 02 | 	byte	$ff, $ff, $00, $00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02
18199     01 01 00 00 
1819d     FF FF FE FE 
181a1     FD FD FD FD 
181a5     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
181a9     FE FF 00 00 
181ad     01 01 01 02 
181b1     02 02 02 02 
181b5     02 02 02 01 | 	byte	$fe, $ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01
181b9     01 01 00 FF 
181bd     FF FF FE FE 
181c1     FD FD FD FD 
181c5     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
181c9     FF 00 00 01 
181cd     01 01 02 02 
181d1     02 02 02 02 
181d5     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01
181d9     01 00 00 FF 
181dd     FE FE FE FE 
181e1     FE FD FD FE 
181e5     FE FE FE FE | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe
181e9     FF 00 00 01 
181ed     01 01 02 02 
181f1     02 02 02 02 
181f5     02 02 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
181f9     01 00 00 FF 
181fd     FF FE FE FE 
18201     FE FD FD FD 
18205     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe
18209     FF 00 00 01 
1820d     01 01 01 02 
18211     02 02 03 02 
18215     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $01, $02, $02, $02, $03, $02, $02, $02, $02, $01
18219     00 00 00 FF 
1821d     FF FF FE FE 
18221     FE FE FE FE 
18225     FE FE FE FF | 	byte	$00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff
18229     00 00 01 01 
1822d     02 02 02 02 
18231     02 03 03 03 
18235     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $03, $02, $02, $02, $01
18239     01 00 FF FF 
1823d     FF FE FE FE 
18241     FE FD FE FE 
18245     FE FF FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
18249     00 00 00 01 
1824d     01 01 02 02 
18251     02 02 02 02 
18255     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
18259     01 00 FF FF 
1825d     FE FE FE FD 
18261     FD FD FD FE 
18265     FE FE FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff
18269     FF 00 00 01 
1826d     01 01 02 02 
18271     02 02 02 02 
18275     02 01 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
18279     01 00 FF FF 
1827d     FF FE FE FE 
18281     FD FE FD FE 
18285     FE FE FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff
18289     00 00 01 01 
1828d     01 01 02 02 
18291     02 02 02 02 
18295     02 01 01 00 | 	byte	$00, $00, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
18299     00 00 FF FF 
1829d     FE FE FE FD 
182a1     FE FD FE FE 
182a5     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
182a9     00 00 01 01 
182ad     01 02 02 02 
182b1     02 02 02 02 
182b5     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
182b9     00 00 FF FF 
182bd     FE FE FE FD 
182c1     FD FD FD FE 
182c5     FE FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff
182c9     00 00 01 01 
182cd     01 02 02 02 
182d1     02 02 02 02 
182d5     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
182d9     00 FF FF FF 
182dd     FE FE FE 00 
182e1     00 00 00 2E 
182e5     2D 2B 29 26 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $00, $00, $00, $2e, $2d, $2b, $29, $26
182e9     25 23 21 1F 
182ed     1E 1C 1A 18 
182f1     16 14 12 10 
182f5     0E 0C 09 07 | 	byte	$25, $23, $21, $1f, $1e, $1c, $1a, $18, $16, $14, $12, $10, $0e, $0c, $09, $07
182f9     06 03 01 FE 
182fd     FC FA F7 F5 
18301     F2 F1 EE EC 
18305     E9 E7 E5 E3 | 	byte	$06, $03, $01, $fe, $fc, $fa, $f7, $f5, $f2, $f1, $ee, $ec, $e9, $e7, $e5, $e3
18309     E0 DF DC DA 
1830d     D8 D6 D4 D3 
18311     D1 CF CE CC 
18315     CB C9 C9 C8 | 	byte	$e0, $df, $dc, $da, $d8, $d6, $d4, $d3, $d1, $cf, $ce, $cc, $cb, $c9, $c9, $c8
18319     C7 C6 C6 C5 
1831d     C5 C5 C5 C5 
18321     C6 C6 C6 C7 
18325     C7 C8 C9 C9 | 	byte	$c7, $c6, $c6, $c5, $c5, $c5, $c5, $c5, $c6, $c6, $c6, $c7, $c7, $c8, $c9, $c9
18329     CA CB CD CE 
1832d     CF D1 D2 D3 
18331     D4 D5 D7 D9 
18335     DA DC DE E0 | 	byte	$ca, $cb, $cd, $ce, $cf, $d1, $d2, $d3, $d4, $d5, $d7, $d9, $da, $dc, $de, $e0
18339     E1 E3 E4 E7 
1833d     E9 EC EE F1 
18341     F4 F7 FC 00 
18345     06 0F 19 24 | 	byte	$e1, $e3, $e4, $e7, $e9, $ec, $ee, $f1, $f4, $f7, $fc, $00, $06, $0f, $19, $24
18349     30 3F 50 5F 
1834d     6C 6B 52 1B 
18351     E0 D5 F1 0D 
18355     23 31 3B 41 | 	byte	$30, $3f, $50, $5f, $6c, $6b, $52, $1b, $e0, $d5, $f1, $0d, $23, $31, $3b, $41
18359     46 47 49 4A 
1835d     4A 49 48 46 
18361     44 42 40 3E 
18365     3C 3A 38 35 | 	byte	$46, $47, $49, $4a, $4a, $49, $48, $46, $44, $42, $40, $3e, $3c, $3a, $38, $35
18369     33 31 2F 2C 
1836d     2A 27 25 23 
18371     21 1F 1D 1A 
18375     18 15 13 10 | 	byte	$33, $31, $2f, $2c, $2a, $27, $25, $23, $21, $1f, $1d, $1a, $18, $15, $13, $10
18379     0E 0C 09 07 
1837d     05 02 00 FD 
18381     FB F8 F5 F3 
18385     F1 EF EC EA | 	byte	$0e, $0c, $09, $07, $05, $02, $00, $fd, $fb, $f8, $f5, $f3, $f1, $ef, $ec, $ea
18389     E8 E6 E4 E2 
1838d     E0 DE DC DB 
18391     D9 D7 D6 D4 
18395     D3 D3 D2 D1 | 	byte	$e8, $e6, $e4, $e2, $e0, $de, $dc, $db, $d9, $d7, $d6, $d4, $d3, $d3, $d2, $d1
18399     D0 D0 CF CE 
1839d     CE CD CD CD 
183a1     CD CE CE CF 
183a5     CF CF D0 D1 | 	byte	$d0, $d0, $cf, $ce, $ce, $cd, $cd, $cd, $cd, $ce, $ce, $cf, $cf, $cf, $d0, $d1
183a9     D1 D3 D3 D4 
183ad     D5 D6 D8 D9 
183b1     DA DB DD DE 
183b5     E0 E1 E3 E5 | 	byte	$d1, $d3, $d3, $d4, $d5, $d6, $d8, $d9, $da, $db, $dd, $de, $e0, $e1, $e3, $e5
183b9     E7 EA EC EF 
183bd     F2 F4 F7 FB 
183c1     00 05 0A 11 
183c5     18 22 2C 38 | 	byte	$e7, $ea, $ec, $ef, $f2, $f4, $f7, $fb, $00, $05, $0a, $11, $18, $22, $2c, $38
183c9     45 53 5D 65 
183cd     62 4C 27 F4 
183d1     D1 CC D9 EE 
183d5     FF 0E 19 23 | 	byte	$45, $53, $5d, $65, $62, $4c, $27, $f4, $d1, $cc, $d9, $ee, $ff, $0e, $19, $23
183d9     2B 31 36 39 
183dd     3B 3D 3D 3C 
183e1     3C 3B 3A 39 
183e5     38 36 35 33 | 	byte	$2b, $31, $36, $39, $3b, $3d, $3d, $3c, $3c, $3b, $3a, $39, $38, $36, $35, $33
183e9     31 2F 2E 2B 
183ed     29 27 25 23 
183f1     21 1F 1C 1A 
183f5     17 15 13 10 | 	byte	$31, $2f, $2e, $2b, $29, $27, $25, $23, $21, $1f, $1c, $1a, $17, $15, $13, $10
183f9     0F 0C 0A 08 
183fd     06 03 02 FF 
18401     FD FA F8 F6 
18405     F4 F2 F0 EE | 	byte	$0f, $0c, $0a, $08, $06, $03, $02, $ff, $fd, $fa, $f8, $f6, $f4, $f2, $f0, $ee
18409     EB EA E8 E6 
1840d     E4 E3 E2 E0 
18411     DE DC DB DA 
18415     D9 D8 D7 D6 | 	byte	$eb, $ea, $e8, $e6, $e4, $e3, $e2, $e0, $de, $dc, $db, $da, $d9, $d8, $d7, $d6
18419     D6 D5 D5 D4 
1841d     D4 D4 D3 D3 
18421     D3 D4 D4 D4 
18425     D4 D5 D6 D6 | 	byte	$d6, $d5, $d5, $d4, $d4, $d4, $d3, $d3, $d3, $d4, $d4, $d4, $d4, $d5, $d6, $d6
18429     D7 D8 D9 DA 
1842d     DB DC DE DF 
18431     E1 E2 E4 E7 
18435     E8 EA EC EE | 	byte	$d7, $d8, $d9, $da, $db, $dc, $de, $df, $e1, $e2, $e4, $e7, $e8, $ea, $ec, $ee
18439     F0 F2 F5 F8 
1843d     FB FE 03 09 
18441     0F 15 1B 22 
18445     2C 35 3F 48 | 	byte	$f0, $f2, $f5, $f8, $fb, $fe, $03, $09, $0f, $15, $1b, $22, $2c, $35, $3f, $48
18449     51 58 59 54 
1844d     42 28 02 DE 
18451     C8 C0 C5 D2 
18455     E1 EE FC 08 | 	byte	$51, $58, $59, $54, $42, $28, $02, $de, $c8, $c0, $c5, $d2, $e1, $ee, $fc, $08
18459     10 1A 20 25 
1845d     2A 2C 2F 31 
18461     32 32 32 32 
18465     31 2F 2F 2D | 	byte	$10, $1a, $20, $25, $2a, $2c, $2f, $31, $32, $32, $32, $32, $31, $2f, $2f, $2d
18469     2C 2A 29 27 
1846d     26 24 22 20 
18471     1D 1C 1A 18 
18475     16 14 12 10 | 	byte	$2c, $2a, $29, $27, $26, $24, $22, $20, $1d, $1c, $1a, $18, $16, $14, $12, $10
18479     0E 0B 0A 08 
1847d     06 04 02 00 
18481     FE FC FB F8 
18485     F6 F4 F2 F1 | 	byte	$0e, $0b, $0a, $08, $06, $04, $02, $00, $fe, $fc, $fb, $f8, $f6, $f4, $f2, $f1
18489     EF ED EC EA 
1848d     E8 E7 E5 E4 
18491     E3 E2 E1 E0 
18495     DF DE DE DD | 	byte	$ef, $ed, $ec, $ea, $e8, $e7, $e5, $e4, $e3, $e2, $e1, $e0, $df, $de, $de, $dd
18499     DC DB DB DA 
1849d     DA DA DA DA 
184a1     DA DA DB DA 
184a5     DB DC DC DD | 	byte	$dc, $db, $db, $da, $da, $da, $da, $da, $da, $da, $db, $da, $db, $dc, $dc, $dd
184a9     DE DE DF E0 
184ad     E1 E3 E4 E5 
184b1     E6 E8 EB EC 
184b5     EE F0 F2 F5 | 	byte	$de, $de, $df, $e0, $e1, $e3, $e4, $e5, $e6, $e8, $eb, $ec, $ee, $f0, $f2, $f5
184b9     F7 FB FE 03 
184bd     07 0B 11 17 
184c1     1C 23 29 31 
184c5     3A 43 4A 4F | 	byte	$f7, $fb, $fe, $03, $07, $0b, $11, $17, $1c, $23, $29, $31, $3a, $43, $4a, $4f
184c9     52 51 4A 3C 
184cd     29 0C EE D6 
184d1     C3 BB BC C3 
184d5     CD D9 E4 F0 | 	byte	$52, $51, $4a, $3c, $29, $0c, $ee, $d6, $c3, $bb, $bc, $c3, $cd, $d9, $e4, $f0
184d9     F8 00 09 10 
184dd     16 1B 1F 21 
184e1     24 26 27 28 
184e5     28 28 29 28 | 	byte	$f8, $00, $09, $10, $16, $1b, $1f, $21, $24, $26, $27, $28, $28, $28, $29, $28
184e9     28 26 25 24 
184ed     23 21 20 1E 
184f1     1D 1B 19 18 
184f5     16 15 13 11 | 	byte	$28, $26, $25, $24, $23, $21, $20, $1e, $1d, $1b, $19, $18, $16, $15, $13, $11
184f9     0F 0E 0C 0A 
184fd     08 06 04 03 
18501     00 FF FD FB 
18505     F9 F8 F6 F5 | 	byte	$0f, $0e, $0c, $0a, $08, $06, $04, $03, $00, $ff, $fd, $fb, $f9, $f8, $f6, $f5
18509     F3 F1 F0 EE 
1850d     ED EC EB EA 
18511     E9 E8 E9 E8 
18515     E7 E6 E5 E4 | 	byte	$f3, $f1, $f0, $ee, $ed, $ec, $eb, $ea, $e9, $e8, $e9, $e8, $e7, $e6, $e5, $e4
18519     E3 E3 E2 E1 
1851d     E1 E1 E0 E0 
18521     E0 E0 E0 E0 
18525     E1 E1 E2 E3 | 	byte	$e3, $e3, $e2, $e1, $e1, $e1, $e0, $e0, $e0, $e0, $e0, $e0, $e1, $e1, $e2, $e3
18529     E4 E4 E5 E6 
1852d     E7 E8 EA EB 
18531     ED EE F0 F2 
18535     F4 F7 F9 FC | 	byte	$e4, $e4, $e5, $e6, $e7, $e8, $ea, $eb, $ed, $ee, $f0, $f2, $f4, $f7, $f9, $fc
18539     00 03 07 0B 
1853d     10 14 19 1F 
18541     24 2A 30 36 
18545     3C 42 47 49 | 	byte	$00, $03, $07, $0b, $10, $14, $19, $1f, $24, $2a, $30, $36, $3c, $42, $47, $49
18549     48 44 3A 2C 
1854d     19 03 EB D3 
18551     C4 BA B5 B7 
18555     BD C4 CD D8 | 	byte	$48, $44, $3a, $2c, $19, $03, $eb, $d3, $c4, $ba, $b5, $b7, $bd, $c4, $cd, $d8
18559     E1 EA F3 FB 
1855d     03 08 0C 10 
18561     14 18 1A 1C 
18565     1E 1F 20 20 | 	byte	$e1, $ea, $f3, $fb, $03, $08, $0c, $10, $14, $18, $1a, $1c, $1e, $1f, $20, $20
18569     20 21 20 20 
1856d     1F 1F 1E 1D 
18571     1B 1A 18 18 
18575     17 15 14 12 | 	byte	$20, $21, $20, $20, $1f, $1f, $1e, $1d, $1b, $1a, $18, $18, $17, $15, $14, $12
18579     11 0F 0E 0C 
1857d     0A 09 07 06 
18581     04 03 01 FF 
18585     FD FC FA F9 | 	byte	$11, $0f, $0e, $0c, $0a, $09, $07, $06, $04, $03, $01, $ff, $fd, $fc, $fa, $f9
18589     F8 F7 F6 F5 
1858d     F3 F2 F1 F0 
18591     EF EE EE EC 
18595     EB EB EA EA | 	byte	$f8, $f7, $f6, $f5, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ec, $eb, $eb, $ea, $ea
18599     E9 E9 E8 E8 
1859d     E8 E8 E8 E7 
185a1     E7 E8 E8 E9 
185a5     E9 E9 EA EB | 	byte	$e9, $e9, $e8, $e8, $e8, $e8, $e8, $e7, $e7, $e8, $e8, $e9, $e9, $e9, $ea, $eb
185a9     EB EC ED EE 
185ad     F0 F1 F2 F4 
185b1     F6 F7 F9 FB 
185b5     FD 00 02 05 | 	byte	$eb, $ec, $ed, $ee, $f0, $f1, $f2, $f4, $f6, $f7, $f9, $fb, $fd, $00, $02, $05
185b9     08 0C 0F 13 
185bd     17 1C 22 27 
185c1     2C 31 36 3A 
185c5     3E 41 42 41 | 	byte	$08, $0c, $0f, $13, $17, $1c, $22, $27, $2c, $31, $36, $3a, $3e, $41, $42, $41
185c9     3D 37 2C 1D 
185cd     0D F9 E6 D3 
185d1     C4 B9 B3 B2 
185d5     B3 B7 BF C7 | 	byte	$3d, $37, $2c, $1d, $0d, $f9, $e6, $d3, $c4, $b9, $b3, $b2, $b3, $b7, $bf, $c7
185d9     CF D8 E0 E8 
185dd     F0 F7 FD 02 
185e1     07 0B 0F 11 
185e5     13 15 16 18 | 	byte	$cf, $d8, $e0, $e8, $f0, $f7, $fd, $02, $07, $0b, $0f, $11, $13, $15, $16, $18
185e9     19 1A 1A 1A 
185ed     1A 1A 19 19 
185f1     18 19 19 18 
185f5     17 16 15 13 | 	byte	$19, $1a, $1a, $1a, $1a, $1a, $19, $19, $18, $19, $19, $18, $17, $16, $15, $13
185f9     11 10 0E 0D 
185fd     0C 0A 08 07 
18601     06 04 03 02 
18605     00 FF FE FD | 	byte	$11, $10, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $03, $02, $00, $ff, $fe, $fd
18609     FB FA F8 F8 
1860d     F7 F6 F5 F4 
18611     F4 F3 F2 F1 
18615     F1 F0 EF EF | 	byte	$fb, $fa, $f8, $f8, $f7, $f6, $f5, $f4, $f4, $f3, $f2, $f1, $f1, $f0, $ef, $ef
18619     EF EE EE EE 
1861d     EE EE EE EE 
18621     EE EE EE EE 
18625     EF EF F0 F0 | 	byte	$ef, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ef, $ef, $f0, $f0
18629     F1 F2 F3 F4 
1862d     F5 F6 F8 F9 
18631     FB FE 00 02 
18635     04 07 09 0C | 	byte	$f1, $f2, $f3, $f4, $f5, $f6, $f8, $f9, $fb, $fe, $00, $02, $04, $07, $09, $0c
18639     0F 12 17 1C 
1863d     1F 23 27 2C 
18641     30 33 37 3A 
18645     3C 3C 3B 38 | 	byte	$0f, $12, $17, $1c, $1f, $23, $27, $2c, $30, $33, $37, $3a, $3c, $3c, $3b, $38
18649     32 2B 20 14 
1864d     04 F4 E3 D3 
18651     C5 BB B4 B1 
18655     B0 B1 B5 BB | 	byte	$32, $2b, $20, $14, $04, $f4, $e3, $d3, $c5, $bb, $b4, $b1, $b0, $b1, $b5, $bb
18659     C1 C8 D0 D7 
1865d     DF E5 EC F1 
18661     F7 FC 01 05 
18665     08 0B 0E 10 | 	byte	$c1, $c8, $d0, $d7, $df, $e5, $ec, $f1, $f7, $fc, $01, $05, $08, $0b, $0e, $10
18669     12 14 14 14 
1866d     15 16 16 16 
18671     17 17 16 16 
18675     15 14 14 13 | 	byte	$12, $14, $14, $14, $15, $16, $16, $16, $17, $17, $16, $16, $15, $14, $14, $13
18679     12 11 10 0F 
1867d     0E 0C 0B 0A 
18681     09 08 07 06 
18685     05 04 03 02 | 	byte	$12, $11, $10, $0f, $0e, $0c, $0b, $0a, $09, $08, $07, $06, $05, $04, $03, $02
18689     01 00 FE FE 
1868d     FC FB FB FA 
18691     F9 F8 F8 F7 
18695     F7 F6 F5 F5 | 	byte	$01, $00, $fe, $fe, $fc, $fb, $fb, $fa, $f9, $f8, $f8, $f7, $f7, $f6, $f5, $f5
18699     F5 F4 F4 F4 
1869d     F4 F4 F4 F4 
186a1     F4 F4 F5 F5 
186a5     F6 F6 F7 F8 | 	byte	$f5, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f8
186a9     F8 FA FA FC 
186ad     FD FE FF 00 
186b1     02 04 06 09 
186b5     0B 0D 11 14 | 	byte	$f8, $fa, $fa, $fc, $fd, $fe, $ff, $00, $02, $04, $06, $09, $0b, $0d, $11, $14
186b9     17 1A 1E 21 
186bd     24 27 2B 2E 
186c1     31 33 35 36 
186c5     37 36 33 2E | 	byte	$17, $1a, $1e, $21, $24, $27, $2b, $2e, $31, $33, $35, $36, $37, $36, $33, $2e
186c9     28 1F 14 07 
186cd     F9 EA DD D0 
186d1     C4 BC B5 B1 
186d5     AF B0 B2 B6 | 	byte	$28, $1f, $14, $07, $f9, $ea, $dd, $d0, $c4, $bc, $b5, $b1, $af, $b0, $b2, $b6
186d9     BA C0 C7 CD 
186dd     D4 D9 DF E4 
186e1     EA EF F4 F8 
186e5     FC 00 03 06 | 	byte	$ba, $c0, $c7, $cd, $d4, $d9, $df, $e4, $ea, $ef, $f4, $f8, $fc, $00, $03, $06
186e9     09 0B 0D 0E 
186ed     0F 10 11 12 
186f1     12 12 12 12 
186f5     12 12 11 11 | 	byte	$09, $0b, $0d, $0e, $0f, $10, $11, $12, $12, $12, $12, $12, $12, $12, $11, $11
186f9     11 10 0F 0F 
186fd     0E 0D 0D 0C 
18701     0B 0A 09 08 
18705     07 06 05 05 | 	byte	$11, $10, $0f, $0f, $0e, $0d, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $05
18709     04 03 02 02 
1870d     01 00 FF FF 
18711     FE FD FD FC 
18715     FC FB FB FB | 	byte	$04, $03, $02, $02, $01, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fb, $fb, $fb
18719     FA FA FA FA 
1871d     FA FA FA FA | 	byte	$fa[8]
18721     FB FB FB FB 
18725     FC FD FD FE 
18729     FF 00 02 03 
1872d     04 06 07 09 | 	byte	$fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff, $00, $02, $03, $04, $06, $07, $09
18731     0B 0C 0E 11 
18735     13 15 17 1A 
18739     1D 20 23 25 
1873d     29 2C 2E 30 | 	byte	$0b, $0c, $0e, $11, $13, $15, $17, $1a, $1d, $20, $23, $25, $29, $2c, $2e, $30
18741     32 33 33 33 
18745     31 2E 29 24 
18749     1C 12 08 FC 
1874d     EF E3 D7 CC | 	byte	$32, $33, $33, $33, $31, $2e, $29, $24, $1c, $12, $08, $fc, $ef, $e3, $d7, $cc
18751     C2 B9 B4 AF 
18755     AD AD AE B1 
18759     B5 BA C0 C6 
1875d     CC D2 D7 DD | 	byte	$c2, $b9, $b4, $af, $ad, $ad, $ae, $b1, $b5, $ba, $c0, $c6, $cc, $d2, $d7, $dd
18761     E3 E8 ED F0 
18765     F5 F9 FC FF 
18769     02 05 07 09 
1876d     0A 0B 0D 0E | 	byte	$e3, $e8, $ed, $f0, $f5, $f9, $fc, $ff, $02, $05, $07, $09, $0a, $0b, $0d, $0e
18771     0F 0F 10 10 
18775     10 10 10 10 
18779     10 10 0F 0F 
1877d     0F 0E 0E 0D | 	byte	$0f, $0f, $10, $10, $10, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e, $0e, $0d
18781     0C 0C 0B 0A 
18785     0A 09 08 08 
18789     07 06 06 05 
1878d     04 04 03 03 | 	byte	$0c, $0c, $0b, $0a, $0a, $09, $08, $08, $07, $06, $06, $05, $04, $04, $03, $03
18791     02 02 01 01 
18795     01 01 00 FF 
18799     00 FF FF FF 
1879d     00 00 00 00 | 	byte	$02, $02, $01, $01, $01, $01, $00, $ff, $00, $ff, $ff, $ff, $00, $00, $00, $00
187a1     00 00 01 01 
187a5     02 03 03 04 
187a9     05 06 07 08 
187ad     0A 0B 0D 0F | 	byte	$00, $00, $01, $01, $02, $03, $03, $04, $05, $06, $07, $08, $0a, $0b, $0d, $0f
187b1     12 14 16 18 
187b5     1A 1C 1E 20 
187b9     23 25 28 2A 
187bd     2B 2C 2E 2F | 	byte	$12, $14, $16, $18, $1a, $1c, $1e, $20, $23, $25, $28, $2a, $2b, $2c, $2e, $2f
187c1     2F 2E 2D 2B 
187c5     28 24 1F 18 
187c9     10 06 FD F1 
187cd     E7 DB D1 C7 | 	byte	$2f, $2e, $2d, $2b, $28, $24, $1f, $18, $10, $06, $fd, $f1, $e7, $db, $d1, $c7
187d1     BE B8 B2 AE 
187d5     AC AC AD AF 
187d9     B2 B6 BA BF 
187dd     C5 CA CF D5 | 	byte	$be, $b8, $b2, $ae, $ac, $ac, $ad, $af, $b2, $b6, $ba, $bf, $c5, $ca, $cf, $d5
187e1     DA E0 E4 E9 
187e5     EE F2 F6 F9 
187e9     FC FE 01 03 
187ed     05 07 09 0A | 	byte	$da, $e0, $e4, $e9, $ee, $f2, $f6, $f9, $fc, $fe, $01, $03, $05, $07, $09, $0a
187f1     0C 0D 0E 0E 
187f5     0F 0F 0F 10 
187f9     10 10 10 10 
187fd     0F 0F 0F 0E | 	byte	$0c, $0d, $0e, $0e, $0f, $0f, $0f, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e
18801     0D 0D 0C 0C 
18805     0C 0B 0B 0A 
18809     0A 09 09 08 
1880d     08 07 07 07 | 	byte	$0d, $0d, $0c, $0c, $0c, $0b, $0b, $0a, $0a, $09, $09, $08, $08, $07, $07, $07
18811     06 06 06 06 
18815     05 05 04 05 
18819     05 05 04 04 
1881d     05 05 05 05 | 	byte	$06, $06, $06, $06, $05, $05, $04, $05, $05, $05, $04, $04, $05, $05, $05, $05
18821     05 06 07 08 
18825     09 09 0A 0B 
18829     0C 0D 0E 0F 
1882d     11 12 13 14 | 	byte	$05, $06, $07, $08, $09, $09, $0a, $0b, $0c, $0d, $0e, $0f, $11, $12, $13, $14
18831     16 18 1A 1B 
18835     1E 20 22 24 
18839     26 28 29 2B 
1883d     2C 2D 2D 2D | 	byte	$16, $18, $1a, $1b, $1e, $20, $22, $24, $26, $28, $29, $2b, $2c, $2d, $2d, $2d
18841     2C 2B 29 26 
18845     22 1D 18 10 
18849     07 FE F4 EB 
1884d     E1 D7 CE C5 | 	byte	$2c, $2b, $29, $26, $22, $1d, $18, $10, $07, $fe, $f4, $eb, $e1, $d7, $ce, $c5
18851     BE B7 B2 AF 
18855     AD AC AC AE 
18859     B0 B4 B7 BB 
1885d     C0 C5 CA CF | 	byte	$be, $b7, $b2, $af, $ad, $ac, $ac, $ae, $b0, $b4, $b7, $bb, $c0, $c5, $ca, $cf
18861     D4 D9 DE E2 
18865     E7 EB EF F2 
18869     F6 F9 FC FE 
1886d     01 03 04 06 | 	byte	$d4, $d9, $de, $e2, $e7, $eb, $ef, $f2, $f6, $f9, $fc, $fe, $01, $03, $04, $06
18871     08 09 0B 0C 
18875     0C 0D 0E 0E 
18879     0F 0F 0F 0F 
1887d     0F 0F 0F 0F | 	byte	$08, $09, $0b, $0c, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
18881     0F 0E 0E 0E 
18885     0E 0D 0D 0C 
18889     0C 0C 0C 0C 
1888d     0B 0B 0B 0B | 	byte	$0f, $0e, $0e, $0e, $0e, $0d, $0d, $0c, $0c, $0c, $0c, $0c, $0b, $0b, $0b, $0b
18891     0C 0C 0B 0B 
18895     0A 0A 0A 0A 
18899     0A 0A 0A 09 
1889d     09 09 09 0A | 	byte	$0c, $0c, $0b, $0b, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $09, $09, $09, $09, $0a
188a1     0A 0A 0B 0C 
188a5     0C 0D 0E 0F 
188a9     11 12 13 14 
188ad     16 17 19 1A | 	byte	$0a, $0a, $0b, $0c, $0c, $0d, $0e, $0f, $11, $12, $13, $14, $16, $17, $19, $1a
188b1     1B 1D 1F 20 
188b5     22 23 25 26 
188b9     28 29 2A 2B 
188bd     2B 2B 2B 29 | 	byte	$1b, $1d, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2b, $2b, $2b, $2b, $29
188c1     27 25 22 1E 
188c5     1A 14 0D 05 
188c9     FE F5 EC E3 
188cd     DA D1 CA C2 | 	byte	$27, $25, $22, $1e, $1a, $14, $0d, $05, $fe, $f5, $ec, $e3, $da, $d1, $ca, $c2
188d1     BC B7 B2 AF 
188d5     AD AD AD AD 
188d9     B0 B2 B6 BA 
188dd     BE C2 C7 CC | 	byte	$bc, $b7, $b2, $af, $ad, $ad, $ad, $ad, $b0, $b2, $b6, $ba, $be, $c2, $c7, $cc
188e1     D0 D5 D9 DE 
188e5     E2 E6 EA EE 
188e9     F1 F5 F7 FA 
188ed     FC FF 01 03 | 	byte	$d0, $d5, $d9, $de, $e2, $e6, $ea, $ee, $f1, $f5, $f7, $fa, $fc, $ff, $01, $03
188f1     05 07 08 0A 
188f5     0B 0B 0C 0D 
188f9     0E 0E 0F 0F 
188fd     0F 0F 0F 10 | 	byte	$05, $07, $08, $0a, $0b, $0b, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $10
18901     10 10 10 10 
18905     10 10 10 10 | 	byte	$10[8]
18909     0F 0F 0F 0F 
1890d     0F          | 	byte	$0f[5]
1890e     0E 0E 0E 0E 
18912     0E          | 	byte	$0e[5]
18913     0D 0E 0E 0D 
18917     0D 0D 0D 0D 
1891b     0D 0E 0F 0F 
1891f     0F 0F 10 10 | 	byte	$0d, $0e, $0e, $0d, $0d, $0d, $0d, $0d, $0d, $0e, $0f, $0f, $0f, $0f, $10, $10
18923     11 12 12 13 
18927     14 15 16 16 
1892b     17 19 1A 1B 
1892f     1D 1F 20 21 | 	byte	$11, $12, $12, $13, $14, $15, $16, $16, $17, $19, $1a, $1b, $1d, $1f, $20, $21
18933     22 24 25 26 
18937     28 29 2A 2A 
1893b     2A 2B 2A 29 
1893f     27 25 23 1F | 	byte	$22, $24, $25, $26, $28, $29, $2a, $2a, $2a, $2b, $2a, $29, $27, $25, $23, $1f
18943     1C 17 12 0B 
18947     05 FE F5 EE 
1894b     E5 DD D5 CD 
1894f     C7 C0 BB B6 | 	byte	$1c, $17, $12, $0b, $05, $fe, $f5, $ee, $e5, $dd, $d5, $cd, $c7, $c0, $bb, $b6
18953     B2 AF AE AD 
18957     AD AE B0 B2 
1895b     B5 B9 BC C0 
1895f     C4 C8 CD D2 | 	byte	$b2, $af, $ae, $ad, $ad, $ae, $b0, $b2, $b5, $b9, $bc, $c0, $c4, $c8, $cd, $d2
18963     D6 DB DF E3 
18967     E6 EA ED F0 
1896b     F4 F7 F9 FC 
1896f     FE 02 04 06 | 	byte	$d6, $db, $df, $e3, $e6, $ea, $ed, $f0, $f4, $f7, $f9, $fc, $fe, $02, $04, $06
18973     08 09 0A 0B 
18977     0C 0D 0E 0E 
1897b     0F 0E 0F 0F 
1897f     0F 0F 0F 10 | 	byte	$08, $09, $0a, $0b, $0c, $0d, $0e, $0e, $0f, $0e, $0f, $0f, $0f, $0f, $0f, $10
18983     10 10 10 10 
18987     10 10 10 10 
1898b     10 10 10    | 	byte	$10[11]
1898e     11 11 11 10 
18992     10 10 11 10 
18996     11 11 11 11 
1899a     11 12 12 12 | 	byte	$11, $11, $11, $10, $10, $10, $11, $10, $11, $11, $11, $11, $11, $12, $12, $12
1899e     13 13 13 14 
189a2     15 16 16 17 
189a6     18 19 1A 1A 
189aa     1B 1C 1D 1F | 	byte	$13, $13, $13, $14, $15, $16, $16, $17, $18, $19, $1a, $1a, $1b, $1c, $1d, $1f
189ae     20 21 21 23 
189b2     24 25 26 27 
189b6     28 29 29 29 
189ba     29 29 28 27 | 	byte	$20, $21, $21, $23, $24, $25, $26, $27, $28, $29, $29, $29, $29, $29, $28, $27
189be     25 23 20 1D 
189c2     1A 15 10 0A 
189c6     05 FE F6 EF 
189ca     E7 E0 D8 D1 | 	byte	$25, $23, $20, $1d, $1a, $15, $10, $0a, $05, $fe, $f6, $ef, $e7, $e0, $d8, $d1
189ce     CB C4 BE BA 
189d2     B6 B2 B0 AF 
189d6     AE AE AF B0 
189da     B2 B5 B8 BB | 	byte	$cb, $c4, $be, $ba, $b6, $b2, $b0, $af, $ae, $ae, $af, $b0, $b2, $b5, $b8, $bb
189de     BF C3 C6 CB 
189e2     CF D3 D8 DB 
189e6     DF E3 E7 EA 
189ea     ED F1 F4 F7 | 	byte	$bf, $c3, $c6, $cb, $cf, $d3, $d8, $db, $df, $e3, $e7, $ea, $ed, $f1, $f4, $f7
189ee     F9 FB FE 00 
189f2     02 04 06 07 
189f6     09 0A 0C 0D 
189fa     0E 0E 0F 10 | 	byte	$f9, $fb, $fe, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0e, $0e, $0f, $10
189fe     10 11 11 12 
18a02     12 12 12 12 
18a06     13 13 13 13 
18a0a     13 13 13 13 | 	byte	$10, $11, $11, $12, $12, $12, $12, $12, $13, $13, $13, $13, $13, $13, $13, $13
18a0e     13 13 13 14 
18a12     14 14 14 15 
18a16     15 15 15 15 
18a1a     16 16 16 16 | 	byte	$13, $13, $13, $14, $14, $14, $14, $15, $15, $15, $15, $15, $16, $16, $16, $16
18a1e     17 18 18 19 
18a22     19 1A 1B 1B 
18a26     1C 1D 1E 1F 
18a2a     20 20 21 22 | 	byte	$17, $18, $18, $19, $19, $1a, $1b, $1b, $1c, $1d, $1e, $1f, $20, $20, $21, $22
18a2e     23 24 25 26 
18a32     27 27 28 29 
18a36     29 29 29 29 
18a3a     28 27 26 24 | 	byte	$23, $24, $25, $26, $27, $27, $28, $29, $29, $29, $29, $29, $28, $27, $26, $24
18a3e     21 1E 1B 18 
18a42     13 0F 0A 04 
18a46     FE F7 F1 EA 
18a4a     E3 DC D5 CF | 	byte	$21, $1e, $1b, $18, $13, $0f, $0a, $04, $fe, $f7, $f1, $ea, $e3, $dc, $d5, $cf
18a4e     C9 C4 C0 BC 
18a52     B8 B5 B2 B0 
18a56     AF B0 B0 B1 
18a5a     B3 B5 B7 B9 | 	byte	$c9, $c4, $c0, $bc, $b8, $b5, $b2, $b0, $af, $b0, $b0, $b1, $b3, $b5, $b7, $b9
18a5e     BD C1 C4 C8 
18a62     CB D0 D3 D8 
18a66     DC E0 E3 E7 
18a6a     EA ED F0 F3 | 	byte	$bd, $c1, $c4, $c8, $cb, $d0, $d3, $d8, $dc, $e0, $e3, $e7, $ea, $ed, $f0, $f3
18a6e     F6 F8 FB FD 
18a72     FF 02 03 04 
18a76     07 08 09 0B 
18a7a     0C 0D 0E 0F | 	byte	$f6, $f8, $fb, $fd, $ff, $02, $03, $04, $07, $08, $09, $0b, $0c, $0d, $0e, $0f
18a7e     10 11 11 12 
18a82     12 13 13 14 
18a86     14 14 15 15 
18a8a     15 15 16 16 | 	byte	$10, $11, $11, $12, $12, $13, $13, $14, $14, $14, $15, $15, $15, $15, $16, $16
18a8e     16 16 16 17 
18a92     17 17 17 17 
18a96     18 18 18 19 
18a9a     19 1A 1B 1B | 	byte	$16, $16, $16, $17, $17, $17, $17, $17, $18, $18, $18, $19, $19, $1a, $1b, $1b
18a9e     1B 1B 1B 1C 
18aa2     1D 1D 1E 1F 
18aa6     1F 20 21 21 
18aaa     22 23 24 25 | 	byte	$1b, $1b, $1b, $1c, $1d, $1d, $1e, $1f, $1f, $20, $21, $21, $22, $23, $24, $25
18aae     26 27 27 28 
18ab2     28 28 29 29 
18ab6     29 28 28 27 
18aba     26 25 23 21 | 	byte	$26, $27, $27, $28, $28, $28, $29, $29, $29, $28, $28, $27, $26, $25, $23, $21
18abe     1E 1B 17 13 
18ac2     0E 0A 05 00 
18ac6     FA F3 ED E6 
18aca     E0 D9 D4 CE | 	byte	$1e, $1b, $17, $13, $0e, $0a, $05, $00, $fa, $f3, $ed, $e6, $e0, $d9, $d4, $ce
18ace     C9 C3 BF BB 
18ad2     B7 B4 B2 B1 
18ad6     B0 B0 B1 B1 
18ada     B3 B5 B7 BA | 	byte	$c9, $c3, $bf, $bb, $b7, $b4, $b2, $b1, $b0, $b0, $b1, $b1, $b3, $b5, $b7, $ba
18ade     BD C0 C4 C7 
18ae2     CB CF D2 D6 
18ae6     D9 DD E1 E5 
18aea     E8 EB EE F1 | 	byte	$bd, $c0, $c4, $c7, $cb, $cf, $d2, $d6, $d9, $dd, $e1, $e5, $e8, $eb, $ee, $f1
18aee     F4 F7 F9 FB 
18af2     FE 00 02 04 
18af6     06 08 09 0B 
18afa     0C 0D 0E 0F | 	byte	$f4, $f7, $f9, $fb, $fe, $00, $02, $04, $06, $08, $09, $0b, $0c, $0d, $0e, $0f
18afe     10 11 12 12 
18b02     13 14 14 15 
18b06     15 16 16 16 
18b0a     16 16 17 18 | 	byte	$10, $11, $12, $12, $13, $14, $14, $15, $15, $16, $16, $16, $16, $16, $17, $18
18b0e     18 19 19 19 
18b12     1A 1A 1A 1B 
18b16     1B 1B 1B 1C 
18b1a     1C 1D 1D 1D | 	byte	$18, $19, $19, $19, $1a, $1a, $1a, $1b, $1b, $1b, $1b, $1c, $1c, $1d, $1d, $1d
18b1e     1E 1E 1F 20 
18b22     21 21 21 22 
18b26     23 23 24 25 
18b2a     25 26 26 27 | 	byte	$1e, $1e, $1f, $20, $21, $21, $21, $22, $23, $23, $24, $25, $25, $26, $26, $27
18b2e     28 29 2A 2B 
18b32     2A 2A 2A 29 
18b36     29 28 27 25 
18b3a     24 21 1F 1C | 	byte	$28, $29, $2a, $2b, $2a, $2a, $2a, $29, $29, $28, $27, $25, $24, $21, $1f, $1c
18b3e     19 15 11 0E 
18b42     09 05 FF FA 
18b46     F4 EE E8 E2 
18b4a     DC D6 D1 CC | 	byte	$19, $15, $11, $0e, $09, $05, $ff, $fa, $f4, $ee, $e8, $e2, $dc, $d6, $d1, $cc
18b4e     C7 C2 BE BB 
18b52     B7 B5 B3 B1 
18b56     B1 B0 B1 B2 
18b5a     B3 B5 B7 B9 | 	byte	$c7, $c2, $be, $bb, $b7, $b5, $b3, $b1, $b1, $b0, $b1, $b2, $b3, $b5, $b7, $b9
18b5e     BC BF C2 C5 
18b62     C9 CD D0 D4 
18b66     D7 DB DE E2 
18b6a     E5 E8 EC EE | 	byte	$bc, $bf, $c2, $c5, $c9, $cd, $d0, $d4, $d7, $db, $de, $e2, $e5, $e8, $ec, $ee
18b6e     F1 F4 F7 F9 
18b72     FB FE 00 03 
18b76     04 06 08 0A 
18b7a     0B 0D 0E 0F | 	byte	$f1, $f4, $f7, $f9, $fb, $fe, $00, $03, $04, $06, $08, $0a, $0b, $0d, $0e, $0f
18b7e     10 11 11 12 
18b82     14 14 15 15 
18b86     16 17 17 18 
18b8a     18 19 1A 1A | 	byte	$10, $11, $11, $12, $14, $14, $15, $15, $16, $17, $17, $18, $18, $19, $1a, $1a
18b8e     1B 1B 1B 1C 
18b92     1C 1C 1C 1D 
18b96     1E 1E 1F 1F 
18b9a     1F 20 20 21 | 	byte	$1b, $1b, $1b, $1c, $1c, $1c, $1c, $1d, $1e, $1e, $1f, $1f, $1f, $20, $20, $21
18b9e     21 22 22 23 
18ba2     23 24 25 26 
18ba6     26 27 27 28 
18baa     29 29 29 29 | 	byte	$21, $22, $22, $23, $23, $24, $25, $26, $26, $27, $27, $28, $29, $29, $29, $29
18bae     2A 2A 2A 2A 
18bb2     2A          | 	byte	$2a[5]
18bb3     29 29 28 27 
18bb7     26 25 23 21 
18bbb     1F 1C 1A 16 
18bbf     13 0F 0A 06 | 	byte	$29, $29, $28, $27, $26, $25, $23, $21, $1f, $1c, $1a, $16, $13, $0f, $0a, $06
18bc3     01 FC F7 F1 
18bc7     EB E5 E0 DA 
18bcb     D5 D0 CC C7 
18bcf     C3 BF BB B9 | 	byte	$01, $fc, $f7, $f1, $eb, $e5, $e0, $da, $d5, $d0, $cc, $c7, $c3, $bf, $bb, $b9
18bd3     B6 B4 B3 B2 
18bd7     B2 B2 B3 B4 
18bdb     B5 B8 BA BC 
18bdf     BF C2 C5 C8 | 	byte	$b6, $b4, $b3, $b2, $b2, $b2, $b3, $b4, $b5, $b8, $ba, $bc, $bf, $c2, $c5, $c8
18be3     CC CF D2 D6 
18be7     D9 DD DF E3 
18beb     E6 E9 EC EF 
18bef     F2 F5 F7 FA | 	byte	$cc, $cf, $d2, $d6, $d9, $dd, $df, $e3, $e6, $e9, $ec, $ef, $f2, $f5, $f7, $fa
18bf3     FC FF 01 03 
18bf7     05 07 09 0A 
18bfb     0C 0D 0E 10 
18bff     11 12 13 14 | 	byte	$fc, $ff, $01, $03, $05, $07, $09, $0a, $0c, $0d, $0e, $10, $11, $12, $13, $14
18c03     15 16 17 18 
18c07     18 19 1A 1A 
18c0b     1B 1C 1C 1D 
18c0f     1F 1F 1F 1F | 	byte	$15, $16, $17, $18, $18, $19, $1a, $1a, $1b, $1c, $1c, $1d, $1f, $1f, $1f, $1f
18c13     20 20 20 21 
18c17     21 21 21 22 
18c1b     22 22 22 23 
18c1f     23 24 24 25 | 	byte	$20, $20, $20, $21, $21, $21, $21, $22, $22, $22, $22, $23, $23, $24, $24, $25
18c23     25 26 26 27 
18c27     27 28 28 28 
18c2b     29 29 2A 2A 
18c2f     2A 29 2A 29 | 	byte	$25, $26, $26, $27, $27, $28, $28, $28, $29, $29, $2a, $2a, $2a, $29, $2a, $29
18c33     29 28 27 26 
18c37     24 23 21 1F 
18c3b     1D 1A 17 14 
18c3f     10 0C 08 04 | 	byte	$29, $28, $27, $26, $24, $23, $21, $1f, $1d, $1a, $17, $14, $10, $0c, $08, $04
18c43     FE FA F5 F0 
18c47     EA E5 E0 DA 
18c4b     D5 D1 CC C7 
18c4f     C4 C0 BD BA | 	byte	$fe, $fa, $f5, $f0, $ea, $e5, $e0, $da, $d5, $d1, $cc, $c7, $c4, $c0, $bd, $ba
18c53     B8 B6 B5 B4 
18c57     B4 B4 B4 B5 
18c5b     B6 B8 B9 BB 
18c5f     BE C0 C3 C6 | 	byte	$b8, $b6, $b5, $b4, $b4, $b4, $b4, $b5, $b6, $b8, $b9, $bb, $be, $c0, $c3, $c6
18c63     C9 CC CF D3 
18c67     D6 D9 DD E0 
18c6b     E3 E7 EA ED 
18c6f     F0 F3 F5 F7 | 	byte	$c9, $cc, $cf, $d3, $d6, $d9, $dd, $e0, $e3, $e7, $ea, $ed, $f0, $f3, $f5, $f7
18c73     FA FC FF 01 
18c77     03 05 07 09 
18c7b     0B 0C 0D 0F 
18c7f     11 12 14 15 | 	byte	$fa, $fc, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0d, $0f, $11, $12, $14, $15
18c83     16 17 18 18 
18c87     19 1A 1B 1C 
18c8b     1C 1D 1E 1F 
18c8f     1F 1F 20 21 | 	byte	$16, $17, $18, $18, $19, $1a, $1b, $1c, $1c, $1d, $1e, $1f, $1f, $1f, $20, $21
18c93     21 22 22 23 
18c97     23 23 24 24 
18c9b     25 25 26 26 
18c9f     27 27 28 28 | 	byte	$21, $22, $22, $23, $23, $23, $24, $24, $25, $25, $26, $26, $27, $27, $28, $28
18ca3     29 29 29 29 
18ca7     2A 2A 2A 2B 
18cab     2B 2B 2B 2B 
18caf     2B 2B 2A 29 | 	byte	$29, $29, $29, $29, $2a, $2a, $2a, $2b, $2b, $2b, $2b, $2b, $2b, $2b, $2a, $29
18cb3     29 28 27 26 
18cb7     24 22 20 1E 
18cbb     1B 18 15 12 
18cbf     0E 0B 07 03 | 	byte	$29, $28, $27, $26, $24, $22, $20, $1e, $1b, $18, $15, $12, $0e, $0b, $07, $03
18cc3     FD F8 F4 EF 
18cc7     E9 E4 E0 DB 
18ccb     D7 D2 CE C9 
18ccf     C5 C2 BF BC | 	byte	$fd, $f8, $f4, $ef, $e9, $e4, $e0, $db, $d7, $d2, $ce, $c9, $c5, $c2, $bf, $bc
18cd3     BA B8 B6 B5 
18cd7     B5 B4 B5 B5 
18cdb     B6 B7 B9 BB 
18cdf     BD BF C2 C5 | 	byte	$ba, $b8, $b6, $b5, $b5, $b4, $b5, $b5, $b6, $b7, $b9, $bb, $bd, $bf, $c2, $c5
18ce3     C7 CA CD D1 
18ce7     D4 D7 DA DE 
18ceb     E1 E4 E7 EB 
18cef     EF F2 F4 F6 | 	byte	$c7, $ca, $cd, $d1, $d4, $d7, $da, $de, $e1, $e4, $e7, $eb, $ef, $f2, $f4, $f6
18cf3     F9 FB FD 00 
18cf7     02 04 06 07 
18cfb     09 0A 0C 0D 
18cff     0F 10 11 13 | 	byte	$f9, $fb, $fd, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0f, $10, $11, $13
18d03     14 16 17 18 
18d07     19 1A 1B 1C 
18d0b     1D 1E 1E 1F 
18d0f     20 20 21 22 | 	byte	$14, $16, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1e, $1f, $20, $20, $21, $22
18d13     22 23 24 24 
18d17     25 25 25 26 
18d1b     26 27 28 28 
18d1f     29 29 29 2A | 	byte	$22, $23, $24, $24, $25, $25, $25, $26, $26, $27, $28, $28, $29, $29, $29, $2a
18d23     2A 2A 2B 2B 
18d27     2C 2C 2C 2C 
18d2b     2C 2C 2C 2B 
18d2f     2B 2A 2A 29 | 	byte	$2a, $2a, $2b, $2b, $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2b, $2b, $2a, $2a, $29
18d33     28 27 26 25 
18d37     23 21 1F 1D 
18d3b     1A 16 13 10 
18d3f     0C 09 05 01 | 	byte	$28, $27, $26, $25, $23, $21, $1f, $1d, $1a, $16, $13, $10, $0c, $09, $05, $01
18d43     FC F8 F3 EE 
18d47     E9 E5 E0 DB 
18d4b     D7 D3 CF CB 
18d4f     C7 C3 C0 BE | 	byte	$fc, $f8, $f3, $ee, $e9, $e5, $e0, $db, $d7, $d3, $cf, $cb, $c7, $c3, $c0, $be
18d53     BB B9 B8 B7 
18d57     B6 B5 B5 B6 
18d5b     B7 B8 B9 BA 
18d5f     BD BF C1 C4 | 	byte	$bb, $b9, $b8, $b7, $b6, $b5, $b5, $b6, $b7, $b8, $b9, $ba, $bd, $bf, $c1, $c4
18d63     C6 C9 CC CF 
18d67     D2 D5 D8 DB 
18d6b     DF E2 E5 E8 
18d6f     EB EE F1 F3 | 	byte	$c6, $c9, $cc, $cf, $d2, $d5, $d8, $db, $df, $e2, $e5, $e8, $eb, $ee, $f1, $f3
18d73     F6 F8 FB FD 
18d77     00 02 04 06 
18d7b     08 0A 0C 0E 
18d7f     10 11 12 14 | 	byte	$f6, $f8, $fb, $fd, $00, $02, $04, $06, $08, $0a, $0c, $0e, $10, $11, $12, $14
18d83     15 17 18 19 
18d87     1A 1B 1C 1D 
18d8b     1E 1F 20 21 
18d8f     21 22 23 23 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1f, $20, $21, $21, $22, $23, $23
18d93     25 25 26 26 
18d97     27 27 28 28 
18d9b     29 29 2A 2B 
18d9f     2B 2B 2C 2C | 	byte	$25, $25, $26, $26, $27, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c, $2c
18da3     2C 2C 2D 2D 
18da7     2D 2D 2D 2D 
18dab     2D 2D 2C 2C 
18daf     2B 2B 2A 29 | 	byte	$2c, $2c, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2c, $2c, $2b, $2b, $2a, $29
18db3     28 27 25 24 
18db7     22 20 1D 1B 
18dbb     18 15 12 0E 
18dbf     0B 07 03 FE | 	byte	$28, $27, $25, $24, $22, $20, $1d, $1b, $18, $15, $12, $0e, $0b, $07, $03, $fe
18dc3     FA F6 F2 ED 
18dc7     E8 E3 DF DB 
18dcb     D7 D3 D0 CD 
18dcf     C9 C5 C2 BF | 	byte	$fa, $f6, $f2, $ed, $e8, $e3, $df, $db, $d7, $d3, $d0, $cd, $c9, $c5, $c2, $bf
18dd3     BE BB B9 B8 
18dd7     B7 B7 B7 B6 
18ddb     B7 B7 B8 BA 
18ddf     BC BD C0 C2 | 	byte	$be, $bb, $b9, $b8, $b7, $b7, $b7, $b6, $b7, $b7, $b8, $ba, $bc, $bd, $c0, $c2
18de3     C5 C8 CA CD 
18de7     D0 D3 D7 DA 
18deb     DD E0 E3 E6 
18def     E9 EC EF F1 | 	byte	$c5, $c8, $ca, $cd, $d0, $d3, $d7, $da, $dd, $e0, $e3, $e6, $e9, $ec, $ef, $f1
18df3     F4 F7 F9 FC 
18df7     FE 00 03 05 
18dfb     07 09 0B 0D 
18dff     0F 11 12 13 | 	byte	$f4, $f7, $f9, $fc, $fe, $00, $03, $05, $07, $09, $0b, $0d, $0f, $11, $12, $13
18e03     15 17 18 19 
18e07     1A 1B 1C 1E 
18e0b     1F 20 21 22 
18e0f     23 23 24 25 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1e, $1f, $20, $21, $22, $23, $23, $24, $25
18e13     26 26 27 28 
18e17     29 29 2A 2A 
18e1b     2A 2B 2B 2C 
18e1f     2D 2D 2D 2D | 	byte	$26, $26, $27, $28, $29, $29, $2a, $2a, $2a, $2b, $2b, $2c, $2d, $2d, $2d, $2d
18e23     2E 2E 2E 2E 
18e27     2E 2E 2E 2E 
18e2b     2E          | 	byte	$2e[9]
18e2c     2D 2D 2C 2C 
18e30     2B 2A 28 27 
18e34     26 24 22 20 
18e38     1E 1C 19 16 | 	byte	$2d, $2d, $2c, $2c, $2b, $2a, $28, $27, $26, $24, $22, $20, $1e, $1c, $19, $16
18e3c     13 10 0C 08 
18e40     05 01 FD F9 
18e44     F4 EF EB E6 
18e48     E3 DE DA D6 | 	byte	$13, $10, $0c, $08, $05, $01, $fd, $f9, $f4, $ef, $eb, $e6, $e3, $de, $da, $d6
18e4c     D2 CE CB C8 
18e50     C5 C2 BF BD 
18e54     BB BA B8 B8 
18e58     B8 B8 B8 B9 | 	byte	$d2, $ce, $cb, $c8, $c5, $c2, $bf, $bd, $bb, $ba, $b8, $b8, $b8, $b8, $b8, $b9
18e5c     B9 BA BC BD 
18e60     BF C1 C3 C6 
18e64     C8 CB CE D1 
18e68     D3 D6 DA DD | 	byte	$b9, $ba, $bc, $bd, $bf, $c1, $c3, $c6, $c8, $cb, $ce, $d1, $d3, $d6, $da, $dd
18e6c     E0 E2 E5 E8 
18e70     EB EE F1 F4 
18e74     F6 F9 FC FE 
18e78     01 03 05 07 | 	byte	$e0, $e2, $e5, $e8, $eb, $ee, $f1, $f4, $f6, $f9, $fc, $fe, $01, $03, $05, $07
18e7c     09 0B 0D 0F 
18e80     11 13 14 15 
18e84     17 18 1A 1B 
18e88     1C 1E 1F 20 | 	byte	$09, $0b, $0d, $0f, $11, $13, $14, $15, $17, $18, $1a, $1b, $1c, $1e, $1f, $20
18e8c     21 22 23 24 
18e90     25 26 27 28 
18e94     28 29 29 2A 
18e98     2B 2B 2B 2C | 	byte	$21, $22, $23, $24, $25, $26, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c
18e9c     2D 2D 2E 2E 
18ea0     2E 2F 2F 2F 
18ea4     2F 2F 2F 2F 
18ea8     2F 2F 2E 2E | 	byte	$2d, $2d, $2e, $2e, $2e, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2e, $2e
18eac     2E 2E 2E 2C 
18eb0     2B 2A 29 27 
18eb4     25 23 21 1F 
18eb8     1C 19 16 13 | 	byte	$2e, $2e, $2e, $2c, $2b, $2a, $29, $27, $25, $23, $21, $1f, $1c, $19, $16, $13
18ebc     10 0C 09 05 
18ec0     01 FD F9 F5 
18ec4     F1 EC E8 E4 
18ec8     E0 DC D8 D4 | 	byte	$10, $0c, $09, $05, $01, $fd, $f9, $f5, $f1, $ec, $e8, $e4, $e0, $dc, $d8, $d4
18ecc     D1 CD CA C7 
18ed0     C4 C1 BF BD 
18ed4     BC BA B9 B9 
18ed8     B9 B8 B8 B9 | 	byte	$d1, $cd, $ca, $c7, $c4, $c1, $bf, $bd, $bc, $ba, $b9, $b9, $b9, $b8, $b8, $b9
18edc     BA BB BC BD 
18ee0     C0 C1 C3 C6 
18ee4     C8 CB CE D0 
18ee8     D3 D6 D9 DC | 	byte	$ba, $bb, $bc, $bd, $c0, $c1, $c3, $c6, $c8, $cb, $ce, $d0, $d3, $d6, $d9, $dc
18eec     DF E2 E5 E8 
18ef0     EA ED F0 F2 
18ef4     F6 F8 FB FE 
18ef8     00 02 04 07 | 	byte	$df, $e2, $e5, $e8, $ea, $ed, $f0, $f2, $f6, $f8, $fb, $fe, $00, $02, $04, $07
18efc                 | 	alignl
18efc                 | _hng030rm_spin2_dat_
18efc     00 00 00 00 
18f00     00 00 00 00 
18f04     00 00 00 00 
18f08     00 00 00 00 
18f0c     00 00 00    | vga_font       file "vgafont.def"
18f0f     7E 81 A5 81 
18f13     81 BD 99 81 
18f17     81 7E 00 00 
18f1b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
18f1f     7E FF DB FF 
18f23     FF C3 E7 FF 
18f27     FF 7E 00 00 
18f2b     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
18f2f     00 36 7F 7F 
18f33     7F 7F 3E 1C 
18f37     08 00 00 00 
18f3b     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
18f3f     00 08 1C 3E 
18f43     7F 3E 1C 08 
18f47     00 00 00 00 
18f4b     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
18f4f     18 3C 3C E7 
18f53     E7 E7 18 18 
18f57     3C 00 00 00 
18f5b     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18f5f     18 3C 7E FF 
18f63     FF 7E 18 18 
18f67     3C 00 00 00 
18f6b     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18f6f     00 00 00 18 
18f73     3C 3C 18 00 
18f77     00 00 00 00 
18f7b     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
18f7f     FF FF FF E7 
18f83     C3 C3 E7 FF 
18f87     FF FF FF FF 
18f8b     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
18f8f     00 00 3C 66 
18f93     42 42 66 3C 
18f97     00 00 00 00 
18f9b     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
18f9f     FF FF C3 99 
18fa3     BD BD 99 C3 
18fa7     FF FF FF FF 
18fab     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
18faf     78 70 58 4C 
18fb3     1E 33 33 33 
18fb7     33 1E 00 00 
18fbb     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
18fbf     3C 66 66 66 
18fc3     66 3C 18 7E 
18fc7     18 18 00 00 
18fcb     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
18fcf     FC CC FC 0C 
18fd3     0C 0C 0C 0E 
18fd7     0F 07 00 00 
18fdb     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
18fdf     FE C6 FE C6 
18fe3     C6 C6 C6 E6 
18fe7     E7 67 03 00 
18feb     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
18fef     18 18 DB 3C 
18ff3     E7 3C DB 18 
18ff7     18 00 00 00 
18ffb     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
18fff     03 07 0F 1F 
19003     7F 1F 0F 07 
19007     03 01 00 00 
1900b     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1900f     60 70 78 7C 
19013     7F 7C 78 70 
19017     60 40 00 00 
1901b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1901f     18 3C 7E 18 
19023     18 18 7E 3C 
19027     18 00 00 00 
1902b     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1902f     66 66 66 66 
19033     66 66 66    | 	byte	$66[7]
19036     00 66 66 00 
1903a     00 00 00 00 
1903e     00 FE DB DB 
19042     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
19046     D8 D8 D8 00 
1904a     00 00 00 3E 
1904e     63 06 1C 36 
19052     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
19056     30 63 3E 00 
1905a     00 00 00 00 
1905e     00 00 00 00 
19062     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
19066     7F 7F 7F 00 
1906a     00 00 00 00 
1906e     00 18 3C 7E 
19072     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
19076     3C 18 7E 00 
1907a     00 00 00 00 
1907e     00 18 3C 7E 
19082     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
19086     18 18 18 00 
1908a     00 00 00 00 
1908e     00 18 18 18 
19092     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19096     7E 3C 18 00 
1909a     00 00 00 00 
1909e     00 00 00 18 
190a2     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
190a6     00 00 00 00 
190aa     00 00 00 00 
190ae     00 00 00    | 	byte	$00[11]
190b1     0C 06 7F 06 
190b5     0C 00 00 00 
190b9     00 00 00 00 
190bd     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190c1     00 03 03 03 
190c5     7F 00 00 00 
190c9     00 00 00 00 
190cd     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190d1     14 36 7F 36 
190d5     14 00 00 00 
190d9     00 00 00 00 
190dd     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
190e1     1C 1C 3E 3E 
190e5     7F 7F 00 00 
190e9     00 00 00 00 
190ed     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
190f1     7F 3E 3E 1C 
190f5     1C 08 00 00 
190f9     00 00 00 00 
190fd     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19101     00 00 00 00 
19105     00 00 00 00 
19109     00 00 00 00 
1910d     00 00       | 	byte	$00[14]
1910f     18 3C 3C 3C 
19113     18 18 18 00 
19117     18 18 00 00 
1911b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1911f     66 24 00 00 
19123     00 00 00 00 
19127     00 00 00 00 
1912b     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1912f     00 36 36 7F 
19133     36 36 36 7F 
19137     36 36 00 00 
1913b     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1913f     3E 63 43 03 
19143     3E 60 60 61 
19147     63 3E 18 18 
1914b     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1914f     00 00 43 63 
19153     30 18 0C 06 
19157     63 61 00 00 
1915b     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1915f     1C 36 36 1C 
19163     6E 3B 33 33 
19167     33 6E 00 00 
1916b     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1916f     0C 0C 0C 06 
19173     00 00 00 00 
19177     00 00 00 00 
1917b     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1917f     30 18 0C 0C 
19183     0C 0C 0C 0C 
19187     18 30 00 00 
1918b     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1918f     0C 18 30 30 
19193     30 30 30 30 
19197     18 0C 00 00 
1919b     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1919f     00 00 00 66 
191a3     3C FF 3C 66 
191a7     00 00 00 00 
191ab     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
191af     00 00 00 18 
191b3     18 7E 18 18 
191b7     00 00 00 00 
191bb     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
191bf     00 00 00 00 
191c3     00 00 00 00 | 	byte	$00[8]
191c7     18 18 18 0C 
191cb     00 00 00 00 
191cf     00 00 00 00 
191d3     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
191d7     00 00 00 00 
191db     00 00 00 00 
191df     00 00 00 00 
191e3     00 00 00 00 | 	byte	$00[16]
191e7     18 18 00 00 
191eb     00 00 00 00 
191ef     00 00 40 60 
191f3     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
191f7     03 01 00 00 
191fb     00 00 00 00 
191ff     1C 36 63 63 
19203     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
19207     36 1C 00 00 
1920b     00 00 00 00 
1920f     18 1C 1E 18 
19213     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
19217     18 7E 00 00 
1921b     00 00 00 00 
1921f     3E 63 60 30 
19223     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
19227     63 7F 00 00 
1922b     00 00 00 00 
1922f     3E 63 60 60 
19233     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
19237     63 3E 00 00 
1923b     00 00 00 00 
1923f     30 38 3C 36 
19243     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
19247     30 78 00 00 
1924b     00 00 00 00 
1924f     7F 03 03 03 
19253     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
19257     63 3E 00 00 
1925b     00 00 00 00 
1925f     1C 06 03 03 
19263     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
19267     63 3E 00 00 
1926b     00 00 00 00 
1926f     7F 63 60 60 
19273     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
19277     0C 0C 00 00 
1927b     00 00 00 00 
1927f     3E 63 63 63 
19283     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
19287     63 3E 00 00 
1928b     00 00 00 00 
1928f     3E 63 63 63 
19293     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
19297     30 1E 00 00 
1929b     00 00 00 00 
1929f     00 00 00 18 
192a3     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
192a7     18 18 00 00 
192ab     00 00 00 00 
192af     00 00 00 18 
192b3     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
192b7     18 18 0C 00 
192bb     00 00 00 00 
192bf     00 60 30 18 
192c3     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
192c7     30 60 00 00 
192cb     00 00 00 00 
192cf     00 00 00 7E 
192d3     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
192d7     00 00 00 00 
192db     00 00 00 00 
192df     00          | 	byte	$00[9]
192e0     06 0C 18 30 
192e4     60 30 18 0C 
192e8     06 00 00 00 
192ec     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
192f0     63 63 30 18 
192f4     18 18 00 18 
192f8     18 00 00 00 
192fc     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
19300     3E 63 63 7B 
19304     7B 7B 3B 03 
19308     3E 00 00 00 
1930c     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
19310     1C 36 63 63 
19314     7F 63 63 63 
19318     63 00 00 00 
1931c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
19320     66 66 66 3E 
19324     66 66 66 66 
19328     3F 00 00 00 
1932c     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
19330     66 43 03 03 
19334     03 03 43 66 
19338     3C 00 00 00 
1933c     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
19340     36 66 66 66 
19344     66 66 66 36 
19348     1F 00 00 00 
1934c     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
19350     66 46 16 1E 
19354     16 06 46 66 
19358     7F 00 00 00 
1935c     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
19360     66 46 16 1E 
19364     16 06 06 06 
19368     0F 00 00 00 
1936c     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
19370     66 43 03 03 
19374     7B 63 63 66 
19378     5C 00 00 00 
1937c     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
19380     63 63 63 7F 
19384     63 63 63 63 
19388     63 00 00 00 
1938c     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
19390     18 18 18 18 
19394     18 18 18 18 | 	byte	$18[8]
19398     3C 00 00 00 
1939c     00 00 00 78 
193a0     30 30 30 30 
193a4     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
193a8     1E 00 00 00 
193ac     00 00 00 67 
193b0     66 66 36 1E 
193b4     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
193b8     67 00 00 00 
193bc     00 00 00 0F 
193c0     06 06 06 06 
193c4     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
193c8     7F 00 00 00 
193cc     00 00 00 63 
193d0     77 7F 7F 6B 
193d4     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
193d8     63 00 00 00 
193dc     00 00 00 63 
193e0     67 6F 7F 7B 
193e4     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
193e8     63 00 00 00 
193ec     00 00 00 3E 
193f0     63 63 63 63 
193f4     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
193f8     3E 00 00 00 
193fc     00 00 00 3F 
19400     66 66 66 3E 
19404     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
19408     0F 00 00 00 
1940c     00 00 00 3E 
19410     63 63 63 63 
19414     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
19418     3E 30 70 00 
1941c     00 00 00 3F 
19420     66 66 66 3E 
19424     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
19428     67 00 00 00 
1942c     00 00 00 3E 
19430     63 63 06 1C 
19434     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
19438     3E 00 00 00 
1943c     00 00 00 7E 
19440     7E 5A 18 18 
19444     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
19448     3C 00 00 00 
1944c     00 00 00 63 
19450     63 63 63 63 
19454     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
19458     3E 00 00 00 
1945c     00 00 00 63 
19460     63 63 63 63 
19464     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
19468     08 00 00 00 
1946c     00 00 00 63 
19470     63 63 63 6B 
19474     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
19478     36 00 00 00 
1947c     00 00 00 63 
19480     63 36 3E 1C 
19484     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
19488     63 00 00 00 
1948c     00 00 00 66 
19490     66 66 66 3C 
19494     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
19498     3C 00 00 00 
1949c     00 00 00 7F 
194a0     63 61 30 18 
194a4     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
194a8     7F 00 00 00 
194ac     00 00 00 3C 
194b0     0C 0C 0C 0C 
194b4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
194b8     3C 00 00 00 
194bc     00 00 00 00 
194c0     01 03 07 0E 
194c4     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
194c8     40 00 00 00 
194cc     00 00 00 3C 
194d0     30 30 30 30 
194d4     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
194d8     3C 00 00 00 
194dc     1C 36 00 00 
194e0     00 00 00 00 
194e4     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
194e8     00 00 00 00 
194ec     00 00 00 00 
194f0     00 00 00 00 
194f4     00 00 00 00 
194f8     00          | 	byte	$00[17]
194f9     FF 00 00 0C 
194fd     18 00 00 00 
19501     00 00 00 00 
19505     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19509     00 00 00 00 
1950d     00 00 00 00 
19511     00          | 	byte	$00[9]
19512     1E 30 3E 33 
19516     33 33 6E 00 
1951a     00 00 00 00 
1951e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
19522     1E 36 66 66 
19526     66 66 3E 00 
1952a     00 00 00 00 
1952e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19532     3E 63 03 03 
19536     03 63 3E 00 
1953a     00 00 00 00 
1953e     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
19542     3C 36 33 33 
19546     33 33 6E 00 
1954a     00 00 00 00 
1954e     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19552     3E 63 7F 03 
19556     03 63 3E 00 
1955a     00 00 00 00 
1955e     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
19562     0C 1E 0C 0C 
19566     0C 0C 1E 00 
1956a     00 00 00 00 
1956e     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19572     6E 33 33 33 
19576     33 33 3E 30 
1957a     33 1E 00 00 
1957e     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
19582     36 6E 66 66 
19586     66 66 67 00 
1958a     00 00 00 00 
1958e     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
19592     1C 18 18 18 
19596     18 18 3C 00 
1959a     00 00 00 00 
1959e     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
195a2     70 60 60 60 
195a6     60 60 60 66 
195aa     66 3C 00 00 
195ae     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
195b2     66 36 1E 1E 
195b6     36 66 67 00 
195ba     00 00 00 00 
195be     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
195c2     18 18 18 18 
195c6     18 18       | 	byte	$18[6]
195c8     3C 00 00 00 
195cc     00 00 00 00 
195d0     00 00 37 7F 
195d4     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
195d8     63 00 00 00 
195dc     00 00 00 00 
195e0     00 00 3B 66 
195e4     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
195e8     66 00 00 00 
195ec     00 00 00 00 
195f0     00 00 3E 63 
195f4     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
195f8     3E 00 00 00 
195fc     00 00 00 00 
19600     00 00 3B 66 
19604     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
19608     3E 06 06 0F 
1960c     00 00 00 00 
19610     00 00 6E 33 
19614     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
19618     3E 30 30 78 
1961c     00 00 00 00 
19620     00 00 3B 6E 
19624     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
19628     0F 00 00 00 
1962c     00 00 00 00 
19630     00 00 3E 63 
19634     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
19638     3E 00 00 00 
1963c     00 00 00 08 
19640     0C 0C 3F 0C 
19644     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
19648     38 00 00 00 
1964c     00 00 00 00 
19650     00 00 33 33 
19654     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
19658     6E 00 00 00 
1965c     00 00 00 00 
19660     00 00 63 63 
19664     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
19668     1C 00 00 00 
1966c     00 00 00 00 
19670     00 00 63 63 
19674     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
19678     36 00 00 00 
1967c     00 00 00 00 
19680     00 00 63 36 
19684     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
19688     63 00 00 00 
1968c     00 00 00 00 
19690     00 00 63 63 
19694     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
19698     7E 60 30 1F 
1969c     00 00 00 00 
196a0     00 00 7F 33 
196a4     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
196a8     7F 00 00 00 
196ac     00 00 00 70 
196b0     18 18 18 0E 
196b4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
196b8     70 00 00 00 
196bc     00 00 00 18 
196c0     18 18 18 18 
196c4     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
196c8     18 00 00 00 
196cc     00 00 00 0E 
196d0     18 18 18 70 
196d4     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
196d8     0E 00 00 00 
196dc     6E 3B 00 00 
196e0     00 00 00 00 
196e4     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
196e8     00 00 00 00 
196ec     00 00 00 00 
196f0     00 00       | 	byte	$00[10]
196f2     08 1C 36 63 
196f6     63 63 7F 00 
196fa     00 00 00 00 
196fe     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
19702     03 03 03 03 
19706     43 66 3C 18 
1970a     30 1E 00 00 
1970e     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
19712     33 33 33 33 
19716     33 33       | 	byte	$33[6]
19718     6E 00 00 00 
1971c     00 00 60 30 
19720     18 00 3E 63 
19724     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
19728     3E 00 00 00 
1972c     00 00 08 1C 
19730     36 00 1E 30 
19734     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
19738     6E 00 00 00 
1973c     00 00 00 00 
19740     33 00 1E 30 
19744     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
19748     6E 00 00 00 
1974c     00 00 1C 36 
19750     1C 00 33 33 
19754     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
19758     6E 00 00 00 
1975c     00 00 60 30 
19760     18 00 3E 63 
19764     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
19768     3E 00 00 00 
1976c     00 00 00 00 
19770     00 00 3E 63 
19774     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
19778     3E 18 30 1E 
1977c     00 00 00 1C 
19780     58 78 38 18 
19784     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
19788     3C 00 00 00 
1978c     00 00 00 00 
19790     63 00 3E 63 
19794     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
19798     3E 00 00 00 
1979c     66 33 00 3E 
197a0     63 63 63 63 
197a4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
197a8     3E 00 00 00 
197ac     00 00 CC 66 
197b0     33 00 3E 63 
197b4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
197b8     3E 00 00 00 
197bc     00 00 18 3C 
197c0     66 00 1C 18 
197c4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
197c8     3C 00 00 00 
197cc     30 18 00 7F 
197d0     63 61 30 18 
197d4     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
197d8     7F 00 00 00 
197dc     00 63 00 08 
197e0     1C 36 63 63 
197e4     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
197e8     63 00 00 00 
197ec     30 18 00 3C 
197f0     66 43 03 03 
197f4     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
197f8     3C 00 00 00 
197fc     30 18 00 7F 
19800     66 46 16 1E 
19804     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
19808     7F 00 00 00 
1980c     0C 06 00 0F 
19810     06 06 06 06 
19814     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
19818     7F 00 00 00 
1981c     30 18 00 1C 
19820     18 18 18 18 
19824     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
19828     3C 00 00 00 
1982c     00 00 08 1C 
19830     36 00 3E 63 
19834     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
19838     3E 00 00 00 
1983c     00 00 00 00 
19840     63 00 3E 63 
19844     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
19848     3E 00 00 00 
1984c     00 00 00 6F 
19850     46 26 06 06 
19854     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
19858     7F 00 00 00 
1985c     00 00 00 6E 
19860     4C 2C 0C 0C 
19864     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
19868     1E 00 00 00 
1986c     30 18 00 3E 
19870     63 63 06 1C 
19874     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
19878     3E 00 00 00 
1987c     00 00 60 30 
19880     18 00 3E 63 
19884     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
19888     3E 00 00 00 
1988c     00 63 00 3E 
19890     63 63 63 63 
19894     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
19898     3E 00 00 00 
1989c     00 63 00 63 
198a0     63 63 63 63 
198a4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
198a8     3E 00 00 00 
198ac     6C 38 00 7E 
198b0     7E 5A 18 18 
198b4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
198b8     3C 00 00 00 
198bc     00 00 60 48 
198c0     2C 0C 3F 0C 
198c4     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
198c8     38 00 00 00 
198cc     00 00 00 0F 
198d0     26 36 1E 0E 
198d4     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
198d8     7F 00 00 00 
198dc     00 00 00 00 
198e0     00 63 36 1C 
198e4     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
198e8     00 00 00 00 
198ec     00 00       | 	byte	$00[6]
198ee     36 1C 08 00 
198f2     3E 63 03 03 
198f6     03 63 3E 00 
198fa     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
198fe     30 18 0C 00 
19902     1E 30 3E 33 
19906     33 33 6E 00 
1990a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1990e     60 30 18 00 
19912     1C 18 18 18 
19916     18 18 3C 00 
1991a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1991e     60 30 18 00 
19922     3E 63 63 63 
19926     63 63 3E 00 
1992a     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1992e     30 18 0C 00 
19932     33 33 33 33 
19936     33 33 6E 00 
1993a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1993e     00 08 1C 36 
19942     63 63 7F 63 
19946     63 63 63 18 
1994a     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1994e     00 00 00 00 
19952     1E 30 3E 33 
19956     33 33 6E 18 
1995a     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1995e     00 7F 63 61 
19962     30 18 0C 06 
19966     43 63 7F 00 
1996a     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1996e     36 1C 08 00 
19972     7F 33 18 0C 
19976     06 63 7F 00 
1997a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1997e     00 7F 66 46 
19982     16 1E 16 06 
19986     46 66 7F 18 
1998a     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1998e     00 00 00 00 
19992     3E 63 7F 03 
19996     03 63 3E 18 
1999a     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1999e     00 3C 66 03 
199a2     1F 03 0F 03 
199a6     03 66 3C 00 
199aa     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
199ae     60 30 18 00 
199b2     7F 33 18 0C 
199b6     06 63 7F 00 
199ba     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
199be     00 3C 66 43 
199c2     03 03 03 03 
199c6     43 66 3C 00 
199ca     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
199ce     00 00 00 00 
199d2     3E 63 06 1C 
199d6     30 63 3E 18 
199da     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
199de     00 00 00 00 
199e2     00 00       | 	byte	$00[6]
199e4     6C 36 1B 36 
199e8     6C 00 00 00 
199ec     00 00 00 00 
199f0     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
199f4     1B 36 6C 36 
199f8     1B 00 00 00 
199fc     88 22 88 22 
19a00     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
19a04     88 22 88 22 
19a08     88 22 88 22 
19a0c     AA 55 AA 55 
19a10     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
19a14     AA 55 AA 55 
19a18     AA 55 AA 55 
19a1c     BB EE BB EE 
19a20     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
19a24     BB EE BB EE 
19a28     BB EE BB EE 
19a2c     18 18 18 18 
19a30     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
19a34     18 18 18 18 
19a38     18 18 18 18 
19a3c     18 18 18 18 
19a40     18 18 18    | 	byte	$18[15]
19a43     1F 18 18 18 
19a47     18 18 18 18 
19a4b     18 30 18 00 
19a4f     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
19a53     63 7F 63 63 
19a57     63 63 00 00 
19a5b     00 1C 36 00 
19a5f     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
19a63     63 7F 63 63 
19a67     63 63 00 00 
19a6b     00 36 1C 00 
19a6f     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
19a73     1E 16 06 46 
19a77     66 7F 00 00 
19a7b     00 00 00 00 
19a7f     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
19a83     1C 30 60 63 
19a87     63 3E 18 30 
19a8b     1E 6C 6C 6C 
19a8f     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
19a93     6F 6C 6C 6C 
19a97     6C 6C 6C 6C 
19a9b     6C 6C 6C 6C 
19a9f     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19aa3     6C 6C 6C 6C 
19aa7     6C 6C 6C 6C 
19aab     6C          | 	byte	$6c[9]
19aac     00 00 00 00 
19ab0     00          | 	byte	$00[5]
19ab1     7F 60 6F 6C 
19ab5     6C 6C 6C 6C 
19ab9     6C 6C 6C 6C 
19abd     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19ac1     6F 60 7F 00 
19ac5     00 00 00 00 
19ac9     00 00 00 18 
19acd     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
19ad1     61 30 18 0C 
19ad5     06 43 63 7F 
19ad9     00 00 00 00 
19add     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
19ae1     00 7F 33 18 
19ae5     0C 06 63 7F 
19ae9     00 00 00 00 
19aed     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
19af1     00 00 1F 18 
19af5     18 18 18 18 
19af9     18 18 18 18 
19afd     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19b01     18 18 F8 00 
19b05     00 00 00 00 
19b09     00 00 00 18 
19b0d     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19b11     18 18 FF 00 
19b15     00 00 00 00 
19b19     00 00 00 00 
19b1d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b21     00 00 FF 18 
19b25     18 18 18 18 
19b29     18 18 18 18 
19b2d     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19b31     18 18 F8 18 
19b35     18 18 18 18 
19b39     18 18 18 00 
19b3d     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19b41     00 00 FF 00 
19b45     00 00 00 00 
19b49     00 00 00 18 
19b4d     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19b51     18 18 FF 18 
19b55     18 18 18 18 
19b59     18 18 18 63 
19b5d     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
19b61     36 63 63 7F 
19b65     63 63 63 63 
19b69     00 00 00 00 
19b6d     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
19b71     00 1E 30 3E 
19b75     33 33 33 6E 
19b79     00 00 00 6C 
19b7d     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19b81     EC 0C FC 00 
19b85     00 00 00 00 
19b89     00 00 00 00 
19b8d     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b91     FC 0C EC 6C 
19b95     6C 6C 6C 6C 
19b99     6C 6C 6C 6C 
19b9d     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19ba1     EF 00 FF 00 
19ba5     00 00 00 00 
19ba9     00 00 00 00 
19bad     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19bb1     FF 00 EF 6C 
19bb5     6C 6C 6C 6C 
19bb9     6C 6C 6C 6C 
19bbd     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19bc1     EC 0C EC 6C 
19bc5     6C 6C 6C 6C 
19bc9     6C 6C 6C 00 
19bcd     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19bd1     FF 00 FF 00 
19bd5     00 00 00 00 
19bd9     00 00 00 6C 
19bdd     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19be1     EF 00 EF 6C 
19be5     6C 6C 6C 6C 
19be9     6C 6C 6C 00 
19bed     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19bf1     63 3E 63 63 
19bf5     63 63 3E 63 
19bf9     00 00 00 00 
19bfd     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
19c01     30 3C 36 33 
19c05     33 33 33 6E 
19c09     00 00 00 00 
19c0d     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
19c11     66 66 6F 66 
19c15     66 66 36 1F 
19c19     00 00 00 36 
19c1d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
19c21     66 66 66 66 
19c25     66 66       | 	byte	$66[6]
19c27     36 1F 00 00 
19c2b     00 00 63 00 
19c2f     7F 66 46 16 
19c33     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
19c37     66 7F 00 00 
19c3b     00 6C 38 00 
19c3f     38 30 30 3C 
19c43     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
19c47     33 6E 00 00 
19c4b     00 36 1C 00 
19c4f     63 67 6F 7F 
19c53     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
19c57     63 63 00 00 
19c5b     00 30 18 00 
19c5f     3C 18 18 18 
19c63     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19c67     18 3C 00 00 
19c6b     00 3C 66 00 
19c6f     3C 18 18 18 
19c73     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19c77     18 3C 00 00 
19c7b     00 00 00 36 
19c7f     1C 08 00 3E 
19c83     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
19c87     63 3E 00 00 
19c8b     00 18 18 18 
19c8f     18 18 18 18 
19c93     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
19c97     00 00 00 00 
19c9b     00 00 00 00 
19c9f     00 00 00 00 | 	byte	$00[12]
19ca3     F8 18 18 18 
19ca7     18 18 18 18 
19cab     18 FF FF FF 
19caf     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
19cb3     FF FF FF FF 
19cb7     FF FF FF FF 
19cbb     FF          | 	byte	$ff[9]
19cbc     00 00 00 00 
19cc0     00 00 00    | 	byte	$00[7]
19cc3     FF FF FF FF 
19cc7     FF FF FF FF 
19ccb     FF          | 	byte	$ff[9]
19ccc     00 00 00 7E 
19cd0     7E 5A 18 18 
19cd4     18 18 18 18 
19cd8     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
19cdc     1C 36 1C 63 
19ce0     63 63 63 63 
19ce4     63 63 63 63 
19ce8     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19cec     FF FF FF FF 
19cf0     FF FF FF    | 	byte	$ff[7]
19cf3     00 00 00 00 
19cf7     00 00 00 00 
19cfb     00          | 	byte	$00[9]
19cfc     30 18 00 3E 
19d00     63 63 63 63 
19d04     63 63 63 63 
19d08     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d0c     00 00 00 1E 
19d10     33 33 33 1B 
19d14     33 63 63 63 
19d18     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
19d1c     1C 36 00 3E 
19d20     63 63 63 63 
19d24     63 63 63 63 
19d28     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d2c     30 18 00 63 
19d30     67 6F 7F 7B 
19d34     73 63 63 63 
19d38     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
19d3c     00 00 60 30 
19d40     18 00 3B 66 
19d44     66 66 66 66 
19d48     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19d4c     00 00 36 1C 
19d50     08 00 3B 66 
19d54     66 66 66 66 
19d58     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19d5c     36 1C 00 3E 
19d60     63 63 06 1C 
19d64     30 60 63 63 
19d68     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
19d6c     00 00 36 1C 
19d70     08 00 3E 63 
19d74     06 1C 30 63 
19d78     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
19d7c     30 18 00 3F 
19d80     66 66 66 3E 
19d84     36 66 66 66 
19d88     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
19d8c     30 18 00 63 
19d90     63 63 63 63 
19d94     63 63 63 63 
19d98     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d9c     00 00 60 30 
19da0     18 00 3B 6E 
19da4     66 06 06 06 
19da8     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
19dac     66 33 00 63 
19db0     63 63 63 63 
19db4     63 63 63 63 
19db8     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19dbc     00 00 60 30 
19dc0     18 00 63 63 
19dc4     63 63 63 63 
19dc8     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
19dcc     30 18 00 66 
19dd0     66 66 66 3C 
19dd4     18 18 18 18 
19dd8     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
19ddc     00 00 00 08 
19de0     0C 0C 3F 0C 
19de4     0C 0C 0C 6C 
19de8     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
19dec     30 18 00 00 
19df0     00 00 00 00 
19df4     00 00 00 00 
19df8     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19dfc     00 00 00 00 
19e00     00 00 00 00 | 	byte	$00[8]
19e04     7F 00 00 00 
19e08     00 00 00 00 
19e0c     66 33 00 00 
19e10     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
19e14     00 00 00 00 
19e18     00 00 00 00 
19e1c     00 00 00 00 
19e20     00 00 00 00 
19e24     00 00 00 00 
19e28     00          | 	byte	$00[21]
19e29     0C 06 3C 36 
19e2d     1C 00 00 00 
19e31     00 00 00 00 
19e35     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e39     00 00 00 63 
19e3d     3E 00 00 00 
19e41     00 00 00 00 
19e45     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e49     00 00 00 00 
19e4d     3E 63 06 1C 
19e51     36 63 63 36 
19e55     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
19e59     00 00 00 00 
19e5d     00 00 00 00 | 	byte	$00[8]
19e61     18 00 7E 00 
19e65     18 00 00 00 
19e69     00 00 00 00 
19e6d     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e71     00 00 00 00 
19e75     00 00 00 00 | 	byte	$00[8]
19e79     18 30 1E 00 
19e7d     00 00 1C 36 
19e81     36 1C 00 00 
19e85     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
19e89     00 00 00 00 
19e8d     63 00 00 00 
19e91     00 00 00 00 
19e95     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e99     00 00 00 18 
19e9d     18 00 00 00 
19ea1     00 00 00 00 
19ea5     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ea9     00 00 00 00 
19ead     00          | 	byte	$00[5]
19eae     CC 66 33 00 
19eb2     33 33 33 33 
19eb6     33 33 6E 00 
19eba     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
19ebe     00 3F 66 66 
19ec2     66 3E 36 66 
19ec6     66 66 6F 00 
19eca     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
19ece     36 1C 08 00 
19ed2     3B 6E 66 06 
19ed6     06 06 0F 00 
19eda     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
19ede     00 00 00 7E 
19ee2     7E 7E 7E 7E 
19ee6     7E 7E 00 00 
19eea     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
19eee     00 00 00 00 
19ef2     00 00 00 00 
19ef6     00 00 00 00 
19efa     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19efc     00 00 00 00 
      ...             
19f2c     00 00 00 00 
19f30     00 00 00    | st_font        file "st4font.def"
19f33     FF FF 00 00 
19f37     00 00 00 00 
19f3b     00 18 18 18 
19f3f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f43     18 18 18 18 
19f47     18 18 18 18 
19f4b     18          | 	byte	$18[9]
19f4c     00 00 00 00 
19f50     00 00 00    | 	byte	$00[7]
19f53     FF FF 18 18 
19f57     18 18 18 18 
19f5b     18 18 18 18 
19f5f     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f63     FF FF 00 00 
19f67     00 00 00 00 
19f6b     00 18 18 18 
19f6f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f73     1F 1F 18 18 
19f77     18 18 18 18 
19f7b     18 18 18 18 
19f7f     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f83     F8 F8 18 18 
19f87     18 18 18 18 
19f8b     18 00 00 00 
19f8f     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19f93     1F 1F 18 18 
19f97     18 18 18 18 
19f9b     18 00 00 00 
19f9f     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19fa3     F8 F8 18 18 
19fa7     18 18 18 18 
19fab     18 18 18 18 
19faf     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19fb3     1F 1F 00 00 
19fb7     00 00 00 00 
19fbb     00 18 18 18 
19fbf     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19fc3     F8 F8 00 00 
19fc7     00 00 00 00 
19fcb     00 18 18 18 
19fcf     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19fd3     FF FF 18 18 
19fd7     18 18 18 18 
19fdb     18 00 00 18 
19fdf     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
19fe3     66 7E 7E 66 
19fe7     66 66 66 30 
19feb     18 00 00 7E 
19fef     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
19ff3     3E 06 06 06 
19ff7     06 7E 7E 18 
19ffb     0C 30 18 3C 
19fff     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1a003     06 06 06 66 
1a007     66 7E 3C 00 
1a00b     00 30 18 66 
1a00f     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1a013     7E 7E 76 76 
1a017     66 66 66 00 
1a01b     00 30 18 7C 
1a01f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1a023     1C 38 70 60 
1a027     60 7E 3E 00 
1a02b     00 30 18 7E 
1a02f     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1a033     18 0C 0C 06 
1a037     06 7E 7E 00 
1a03b     00 18 18 00 
1a03f     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1a043     18 18 0C 0C 
1a047     06 7E 7E 00 
1a04b     00 30 18 3C 
1a04f     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1a053     66 66 66 66 
1a057     66          | 	byte	$66[5]
1a058     7E 3C 00 00 
1a05c     00 00 06 06 
1a060     06 06 16 1E 
1a064     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1a068     7E 7E 00 00 
1a06c     00 00 00 00 
1a070     00 3C 7C 60 
1a074     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1a078     7E 7C 30 18 
1a07c     00 00 00 00 
1a080     00 3C 7E 66 
1a084     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1a088     7E 7C 18 0C 
1a08c     00 00 30 18 
1a090     00 3C 3E 06 
1a094     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1a098     7E 7C 00 00 
1a09c     00 00 30 18 
1a0a0     00 3E 7E 66 
1a0a4     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1a0a8     66 66 00 00 
1a0ac     00 00 30 18 
1a0b0     00 7C 7E 06 
1a0b4     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1a0b8     7E 3E 00 00 
1a0bc     00 00 30 18 
1a0c0     00 7E 7E 30 
1a0c4     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a0c8     7E 7E 00 00 
1a0cc     00 00 18 18 
1a0d0     00 7E 7E 30 
1a0d4     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a0d8     7E 7E 00 00 
1a0dc     00 00 30 18 
1a0e0     00 3C 7E 66 
1a0e4     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1a0e8     7E 3C 00 00 
1a0ec     00 00 1C 1C 
1a0f0     18 18 38 3C 
1a0f4     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1a0f8     3C 3C 00 00 
1a0fc     00 00 00 00 
1a100     00 00 00 00 
1a104     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a108     00 00 00 00 
1a10c     00 00       | 	byte	$00[6]
1a10e     18 18 18 18 
1a112     18 18 18 18 | 	byte	$18[8]
1a116     00 00 18 18 
1a11a     00 00 00 00 
1a11e     66 66 66 66 
1a122     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1a126     00 00 00 00 
1a12a     00 00 00 00 
1a12e     00          | 	byte	$00[9]
1a12f     66 66 FF FF 
1a133     66 66 FF FF 
1a137     66 66 00 00 
1a13b     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1a13f     7C 7E 06 06 
1a143     3E 7C 60 60 
1a147     7E 3E 18 18 
1a14b     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1a14f     66 30 30 18 
1a153     18 0C 0C 66 
1a157     66 00 00 00 
1a15b     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1a15f     66 66 3C 1C 
1a163     1C FC FE 66 
1a167     66 FE FC 00 
1a16b     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1a16f     18 18 18 18 
1a173     00 00 00 00 
1a177     00 00 00 00 
1a17b     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1a17f     18 1C 0C 0C 
1a183     0C 0C 0C 0C 
1a187     1C 18 30 00 
1a18b     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1a18f     18 38 30 30 
1a193     30 30 30 30 
1a197     38 18 0C 00 
1a19b     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1a19f     66 66 3C 3C 
1a1a3     FF FF 3C 3C 
1a1a7     66 66 00 00 
1a1ab     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1a1af     00 18 18 18 
1a1b3     7E 7E 18 18 
1a1b7     18 00 00 00 
1a1bb     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a1bf     00 00 00 00 
1a1c3     00 00       | 	byte	$00[6]
1a1c5     18 18 18 18 
1a1c9     18          | 	byte	$18[5]
1a1ca     0C 04 00 00 
1a1ce     00 00 00 00 
1a1d2     7E 7E 00 00 
1a1d6     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1a1da     00 00 00 00 
1a1de     00 00 00 00 
1a1e2     00 00 00 00 
1a1e6     00          | 	byte	$00[13]
1a1e7     18 18 18 00 
1a1eb     00 00 00 60 
1a1ef     60 60 30 30 
1a1f3     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1a1f7     06 06 06 00 
1a1fb     00 00 00 3C 
1a1ff     7E 66 66 66 
1a203     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1a207     66 7E 3C 00 
1a20b     00 00 00 18 
1a20f     18 1C 1C 18 
1a213     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1a217     18 7E 7E 00 
1a21b     00 00 00 3C 
1a21f     7E 66 66 30 
1a223     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1a227     0C 7E 7E 00 
1a22b     00 00 00 7E 
1a22f     7E 30 30 18 
1a233     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1a237     66 7E 3C 00 
1a23b     00 00 00 30 
1a23f     30 38 38 3C 
1a243     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1a247     7E 30 30 00 
1a24b     00 00 00 7E 
1a24f     7E 06 06 3E 
1a253     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1a257     66 7E 3C 00 
1a25b     00 00 00 38 
1a25f     3C 0E 06 06 
1a263     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1a267     66 7E 3C 00 
1a26b     00 00 00 7E 
1a26f     7E 60 60 30 
1a273     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1a277     0C 0C 0C 00 
1a27b     00 00 00 3C 
1a27f     7E 66 66 3C 
1a283     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1a287     66 7E 3C 00 
1a28b     00 00 00 3C 
1a28f     7E 66 66 7E 
1a293     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1a297     70 3C 1C 00 
1a29b     00 00 00 00 
1a29f     00 00 18 18 
1a2a3     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1a2a7     18 18 18 00 
1a2ab     00 00 00 00 
1a2af     00 00 18 18 
1a2b3     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1a2b7     18 18 18 0C 
1a2bb     04 00 00 00 
1a2bf     70 38 1C 0E 
1a2c3     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1a2c7     70 00 00 00 
1a2cb     00 00 00 00 
1a2cf     00 00 7E 7E 
1a2d3     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1a2d7     00 00 00 00 
1a2db     00 00 00 00 | 	byte	$00[8]
1a2df     0E 1C 38 70 
1a2e3     E0 70 38 1C 
1a2e7     0E 00 00 00 
1a2eb     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1a2ef     7E 66 66 30 
1a2f3     30 18 18 18 
1a2f7     00 18 18 00 
1a2fb     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1a2ff     7E 66 66 66 
1a303     66 36 06 66 
1a307     66 7E 3C 00 
1a30b     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1a30f     3C 7E 66 66 
1a313     66 7E 7E 66 
1a317     66 66 66 00 
1a31b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1a31f     7E 66 66 7E 
1a323     3E 66 66 66 
1a327     66 7E 3E 00 
1a32b     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1a32f     7E 66 66 06 
1a333     06 06 06 66 
1a337     66 7E 3C 00 
1a33b     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1a33f     7E 66 66 66 
1a343     66 66 66 66 
1a347     66 7E 3E 00 
1a34b     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1a34f     7E 06 06 3E 
1a353     3E 06 06 06 
1a357     06 7E 7E 00 
1a35b     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1a35f     7E 06 06 3E 
1a363     3E 06 06 06 
1a367     06 06 06 00 
1a36b     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1a36f     7E 06 06 76 
1a373     76 66 66 66 
1a377     66 7E 3C 00 
1a37b     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1a37f     66 66 66 7E 
1a383     7E 66 66 66 
1a387     66 66 66 00 
1a38b     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1a38f     7E 18 18 18 
1a393     18 18 18 18 
1a397     18 7E 7E 00 
1a39b     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1a39f     60 60 60 60 
1a3a3     60 60 60    | 	byte	$60[7]
1a3a6     66 66 7E 3C 
1a3aa     00 00 00 00 
1a3ae     66 66 36 36 
1a3b2     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1a3b6     66 66 C6 C6 
1a3ba     00 00 00 00 
1a3be     06 06 06 06 
1a3c2     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1a3c6     06 06 7E 7E 
1a3ca     00 00 00 00 
1a3ce     C6 C6 EE EE 
1a3d2     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1a3d6     C6 C6 C6 C6 
1a3da     00 00 00 00 
1a3de     66 66 66 6E 
1a3e2     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1a3e6     76 66 66 66 
1a3ea     00 00 00 00 
1a3ee     3C 7E 66 66 
1a3f2     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a3f6     66 66 7E 3C 
1a3fa     00 00 00 00 
1a3fe     3E 7E 66 66 
1a402     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1a406     06 06 06 06 
1a40a     00 00 00 00 
1a40e     3C 7E 66 66 
1a412     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a416     66 56 3E 6C 
1a41a     00 00 00 00 
1a41e     3E 7E 66 66 
1a422     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1a426     66 66 C6 C6 
1a42a     00 00 00 00 
1a42e     7C 7E 06 06 
1a432     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1a436     60 60 7E 3E 
1a43a     00 00 00 00 
1a43e     7E 7E 18 18 
1a442     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1a446     18 18 18 18 
1a44a     00 00 00 00 
1a44e     66 66 66 66 
1a452     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a456     66 66 7E 3C 
1a45a     00 00 00 00 
1a45e     66 66 66 66 
1a462     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a466     3C 3C 18 18 
1a46a     00 00 00 00 
1a46e     C6 C6 C6 C6 
1a472     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1a476     FE EE C6 82 
1a47a     00 00 00 00 
1a47e     66 66 66 3C 
1a482     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1a486     3C 66 66 66 
1a48a     00 00 00 00 
1a48e     66 66 66 66 
1a492     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1a496     18 18 18 18 
1a49a     00 00 00 00 
1a49e     7E 7E 30 30 
1a4a2     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1a4a6     06 06 7E 7E 
1a4aa     00 00 00 00 
1a4ae     3C 3C 0C 0C 
1a4b2     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1a4b6     0C 0C 3C 3C 
1a4ba     00 00 00 00 
1a4be     06 06 0C 0C 
1a4c2     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1a4c6     60 60 C0 C0 
1a4ca     00 00 00 00 
1a4ce     3C 3C 30 30 
1a4d2     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1a4d6     30 30 3C 3C 
1a4da     00 00 00 00 
1a4de     18 18 3C 3C 
1a4e2     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1a4e6     00 00 00 00 
1a4ea     00 00 00 00 
1a4ee     00 00 00 00 
1a4f2     00 00 00 00 
1a4f6     00 00       | 	byte	$00[18]
1a4f8     FE FE 00 00 
1a4fc     00 00 0C 0C 
1a500     18 18 00 00 
1a504     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1a508     00 00 00 00 
1a50c     00 00 00 00 
1a510     00          | 	byte	$00[9]
1a511     3C 7C 60 7C 
1a515     7E 66 66 7E 
1a519     7C 00 00 00 
1a51d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1a521     3E 7E 66 66 
1a525     66 66 66 7E 
1a529     3E 00 00 00 
1a52d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1a531     3C 3E 06 06 
1a535     06 06 06 7E 
1a539     7C 00 00 00 
1a53d     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1a541     7C 7E 66 66 
1a545     66 66 66 7E 
1a549     7C 00 00 00 
1a54d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1a551     3C 7E 66 66 
1a555     7E 06 06 7E 
1a559     7C 00 00 00 
1a55d     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1a561     18 7E 7E 18 
1a565     18 18 18 18 
1a569     18 00 00 00 
1a56d     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a571     7C 7E 66 66 
1a575     66 66 7E 7C 
1a579     60 7E 3E 00 
1a57d     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1a581     3E 7E 66 66 
1a585     66 66 66 66 
1a589     66 00 00 00 
1a58d     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1a591     1C 1C 18 18 
1a595     18 18 18 3C 
1a599     3C 00 00 00 
1a59d     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1a5a1     30 30 30 30 
1a5a5     30 30 30 30 
1a5a9     30          | 	byte	$30[9]
1a5aa     3E 1E 00 00 
1a5ae     06 06 06 36 
1a5b2     36 1E 1E 1E 
1a5b6     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1a5ba     00 00 00 00 
1a5be     1C 1C 18 18 
1a5c2     18 18 18 18 
1a5c6     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1a5ca     00 00 00 00 
1a5ce     00 00 00    | 	byte	$00[7]
1a5d1     6C FE FE D6 
1a5d5     D6 C6 C6 C6 
1a5d9     C6 00 00 00 
1a5dd     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1a5e1     3E 7E 66 66 
1a5e5     66 66 66 66 
1a5e9     66 00 00 00 
1a5ed     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1a5f1     3C 7E 66 66 
1a5f5     66 66 66 7E 
1a5f9     3C 00 00 00 
1a5fd     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1a601     3E 7E 66 66 
1a605     66 66 66 7E 
1a609     3E 06 06 00 
1a60d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1a611     7C 7E 66 66 
1a615     66 66 66 7E 
1a619     7C 60 60 00 
1a61d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1a621     3E 7E 66 06 
1a625     06 06 06 06 
1a629     06 00 00 00 
1a62d     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1a631     7C 7E 06 0E 
1a635     3C 70 60 7E 
1a639     3E 00 00 00 
1a63d     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1a641     7E 7E 18 18 
1a645     18 18 18 78 
1a649     70 00 00 00 
1a64d     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1a651     66 66 66 66 
1a655     66 66 66    | 	byte	$66[7]
1a658     7E 7C 00 00 
1a65c     00 00 00 00 
1a660     00 66 66 66 
1a664     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1a668     18 18 00 00 
1a66c     00 00 00 00 
1a670     00 C6 C6 D6 
1a674     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1a678     C6 82 00 00 
1a67c     00 00 00 00 
1a680     00 66 66 3C 
1a684     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1a688     66 66 00 00 
1a68c     00 00 00 00 
1a690     00 66 66 66 
1a694     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1a698     7C 60 7E 3E 
1a69c     00 00 00 00 
1a6a0     00 7E 7E 30 
1a6a4     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a6a8     7E 7E 00 00 
1a6ac     00 00 30 18 
1a6b0     18 18 18 0C 
1a6b4     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1a6b8     18 30 00 00 
1a6bc     00 00 18 18 
1a6c0     18 18 18 18 
1a6c4     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a6c8     18 18 00 00 
1a6cc     00 00 0C 18 
1a6d0     18 18 18 30 
1a6d4     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1a6d8     18 0C 00 00 
1a6dc     00 00 6C 7E 
1a6e0     36 00 00 00 
1a6e4     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1a6e8     00 00 00 00 
1a6ec     00 00 00 00 
1a6f0     00          | 	byte	$00[9]
1a6f1     18 18 18 18 
1a6f5     18 18 00 00 
1a6f9     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1a6fc     00 00 00 00 
1a700     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1a704     00 00 00 00 
1a708     00 80 80 80 
1a70c     00 00 00 FF 
1a710     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1a714     00 00 00 00 
1a718     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1a719     80 00 00 00 
1a71d     00 80 00 00 
1a721     80 80 00 00 
1a725     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1a729     80 00 80 00 
1a72d     00 40 80 00 
1a731     AA AA AA 00 
1a735     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1a739     FF 00 00 00 
1a73d     00 FF 00 00 
1a741     FF FF 00 00 
1a745     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1a749     FF 00 FF 00 
1a74d     00 FF FF 00 
1a751     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1a754     00 00 00 00 
1a758     00          | ataripalette   file "ataripalettep2.def"
1a759     11 11 11 00 
1a75d     22 22 22 00 
1a761     33 33 33 00 
1a765     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1a769     55 55 55 00 
1a76d     66 66 66 00 
1a771     77 77 77 00 
1a775     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1a779     99 99 99 00 
1a77d     AA AA AA 00 
1a781     BB BB BB 00 
1a785     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1a789     DD DD DD 00 
1a78d     EE EE EE 00 
1a791     FF FF FF 00 
1a795     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1a799     00 14 40 00 
1a79d     00 1E 60 00 
1a7a1     00 28 80 00 
1a7a5     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1a7a9     00 3C BF 00 
1a7ad     00 46 DF 00 
1a7b1     00 50 FF 00 
1a7b5     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1a7b9     39 77 FF 00 
1a7bd     55 8A FF 00 
1a7c1     71 9E FF 00 
1a7c5     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1a7c9     AA C5 FF 00 
1a7cd     C6 D8 FF 00 
1a7d1     E3 EC FF 00 
1a7d5     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1a7d9     00 00 40 00 
1a7dd     00 00 60 00 
1a7e1     00 00 80 00 
1a7e5     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1a7e9     00 00 BF 00 
1a7ed     00 00 DF 00 
1a7f1     00 00 FF 00 
1a7f5     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1a7f9     39 39 FF 00 
1a7fd     55 55 FF 00 
1a801     71 71 FF 00 
1a805     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1a809     AA AA FF 00 
1a80d     C6 C6 FF 00 
1a811     E3 E3 FF 00 
1a815     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1a819     20 00 40 00 
1a81d     30 00 60 00 
1a821     40 00 80 00 
1a825     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1a829     60 00 BF 00 
1a82d     70 00 DF 00 
1a831     80 00 FF 00 
1a835     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1a839     9C 39 FF 00 
1a83d     AA 55 FF 00 
1a841     B8 71 FF 00 
1a845     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1a849     D5 AA FF 00 
1a84d     E3 C6 FF 00 
1a851     F1 E3 FF 00 
1a855     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1a859     40 00 40 00 
1a85d     60 00 60 00 
1a861     80 00 80 00 
1a865     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1a869     BF 00 BF 00 
1a86d     DF 00 DF 00 
1a871     FF 00 FF 00 
1a875     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1a879     FF 39 FF 00 
1a87d     FF 55 FF 00 
1a881     FF 71 FF 00 
1a885     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1a889     FF AA FF 00 
1a88d     FF C6 FF 00 
1a891     FF E3 FF 00 
1a895     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1a899     40 00 20 00 
1a89d     60 00 30 00 
1a8a1     80 00 40 00 
1a8a5     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1a8a9     BF 00 60 00 
1a8ad     DF 00 70 00 
1a8b1     FF 00 80 00 
1a8b5     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1a8b9     FF 39 9C 00 
1a8bd     FF 55 AA 00 
1a8c1     FF 71 B8 00 
1a8c5     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1a8c9     FF AA D5 00 
1a8cd     FF C6 E3 00 
1a8d1     FF E3 F1 00 
1a8d5     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1a8d9     40 00 00 00 
1a8dd     60 00 00 00 
1a8e1     80 00 00 00 
1a8e5     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1a8e9     BF 00 00 00 
1a8ed     DF 00 00 00 
1a8f1     FF 00 00 00 
1a8f5     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1a8f9     FF 39 39 00 
1a8fd     FF 55 55 00 
1a901     FF 71 71 00 
1a905     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1a909     FF AA AA 00 
1a90d     FF C6 C6 00 
1a911     FF E3 E3 00 
1a915     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1a919     40 10 00 00 
1a91d     60 18 00 00 
1a921     80 20 00 00 
1a925     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1a929     BF 30 00 00 
1a92d     DF 38 00 00 
1a931     FF 40 00 00 
1a935     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1a939     FF 6A 39 00 
1a93d     FF 80 55 00 
1a941     FF 95 71 00 
1a945     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1a949     FF BF AA 00 
1a94d     FF D5 C6 00 
1a951     FF EA E3 00 
1a955     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1a959     40 20 00 00 
1a95d     60 30 00 00 
1a961     80 40 00 00 
1a965     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1a969     BF 60 00 00 
1a96d     DF 70 00 00 
1a971     FF 80 00 00 
1a975     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1a979     FF 9C 39 00 
1a97d     FF AA 55 00 
1a981     FF B8 71 00 
1a985     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1a989     FF D5 AA 00 
1a98d     FF E3 C6 00 
1a991     FF F1 E3 00 
1a995     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1a999     40 30 00 00 
1a99d     60 48 00 00 
1a9a1     80 60 00 00 
1a9a5     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1a9a9     BF 90 00 00 
1a9ad     DF A8 00 00 
1a9b1     FF C0 00 00 
1a9b5     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1a9b9     FF CE 39 00 
1a9bd     FF D5 55 00 
1a9c1     FF DC 71 00 
1a9c5     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1a9c9     FF EA AA 00 
1a9cd     FF F1 C6 00 
1a9d1     FF F8 E3 00 
1a9d5     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1a9d9     30 40 00 00 
1a9dd     48 60 00 00 
1a9e1     60 80 00 00 
1a9e5     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1a9e9     90 BF 00 00 
1a9ed     A8 DF 00 00 
1a9f1     C0 FF 00 00 
1a9f5     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1a9f9     CE FF 39 00 
1a9fd     D5 FF 55 00 
1aa01     DC FF 71 00 
1aa05     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1aa09     EA FF AA 00 
1aa0d     F1 FF C6 00 
1aa11     F8 FF E3 00 
1aa15     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1aa19     00 40 00 00 
1aa1d     00 60 00 00 
1aa21     00 80 00 00 
1aa25     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1aa29     00 BF 00 00 
1aa2d     00 DF 00 00 
1aa31     00 FF 00 00 
1aa35     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1aa39     39 FF 39 00 
1aa3d     55 FF 55 00 
1aa41     71 FF 71 00 
1aa45     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1aa49     AA FF AA 00 
1aa4d     C6 FF C6 00 
1aa51     E3 FF E3 00 
1aa55     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1aa59     00 40 14 00 
1aa5d     00 60 1E 00 
1aa61     00 80 28 00 
1aa65     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1aa69     00 BF 3C 00 
1aa6d     00 DF 46 00 
1aa71     00 FF 50 00 
1aa75     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1aa79     39 FF 77 00 
1aa7d     55 FF 8A 00 
1aa81     71 FF 9E 00 
1aa85     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1aa89     AA FF C5 00 
1aa8d     C6 FF D8 00 
1aa91     E3 FF EC 00 
1aa95     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1aa99     00 40 28 00 
1aa9d     00 60 3C 00 
1aaa1     00 80 50 00 
1aaa5     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1aaa9     00 BF 78 00 
1aaad     00 DF 8C 00 
1aab1     00 FF A0 00 
1aab5     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1aab9     39 FF B5 00 
1aabd     55 FF C0 00 
1aac1     71 FF CA 00 
1aac5     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1aac9     AA FF DF 00 
1aacd     C6 FF EA 00 
1aad1     E3 FF F4 00 
1aad5     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1aad9     00 40 40 00 
1aadd     00 60 60 00 
1aae1     00 80 80 00 
1aae5     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1aae9     00 BF BF 00 
1aaed     00 DF DF 00 
1aaf1     00 FF FF 00 
1aaf5     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1aaf9     39 FF FF 00 
1aafd     55 FF FF 00 
1ab01     71 FF FF 00 
1ab05     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1ab09     AA FF FF 00 
1ab0d     C6 FF FF 00 
1ab11     E3 FF FF 00 
1ab15     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1ab19     00 28 40 00 
1ab1d     00 3C 60 00 
1ab21     00 50 80 00 
1ab25     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1ab29     00 78 BF 00 
1ab2d     00 8C DF 00 
1ab31     00 A0 FF 00 
1ab35     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1ab39     39 B5 FF 00 
1ab3d     55 C0 FF 00 
1ab41     71 CA FF 00 
1ab45     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1ab49     AA DF FF 00 
1ab4d     C6 EA FF 00 
1ab51     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1ab54                 | '**********************************************************************************
1ab54                 | '
1ab54                 | '        Timings and colors definitions
1ab54                 | '
1ab54                 | '**********************************************************************************
1ab54                 | 
1ab54                 |    'streamer sets for text mode, to add to timings[0..5]
1ab54                 | ' todo for the retromachine: 768x576
1ab54                 | 
1ab54                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1ab54     10 00 00 00 
1ab58     50 00 00 00 
1ab5c     14 00 00 00 
1ab60     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ab64     70 00 00 00 
1ab68     08 00 00 00 
1ab6c     30 00 00 00 
1ab70     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1ab74     10 00 00 00 
1ab78     10 00 00 00 
1ab7c     00 00 00 00 
1ab80     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1ab84     E0 01 00 00 
1ab88     F6 32 24 15 
1ab8c     FB 6C C3 01 
1ab90     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ab94                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1ab94                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1ab94     30 00 00 00 
1ab98     50 00 00 00 
1ab9c     34 00 00 00 
1aba0     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1aba4     20 00 00 00 
1aba8     08 00 00 00 
1abac     16 00 00 00 
1abb0     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1abb4     24 00 00 00 
1abb8     18 00 00 00 
1abbc     40 00 00 00 
1abc0     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1abc4     F0 01 00 00 
1abc8     F6 32 24 15 
1abcc     FB 6C C3 01 
1abd0     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1abd4                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1abd4     10 00 00 00 
1abd8     40 00 00 00 
1abdc     10 00 00 00 
1abe0     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1abe4     08 00 00 00 
1abe8     08 00 00 00 
1abec     08 00 00 00 
1abf0     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1abf4     40 00 00 00 
1abf8     20 00 00 00 
1abfc     80 00 00 00 
1ac00     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1ac04     E0 01 00 00 
1ac08     70 AE E9 10 
1ac0c     FB 8B FF 01 
1ac10     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1ac14     10 00 00 00 
1ac18     42 00 00 00 
1ac1c     14 00 00 00 
1ac20     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ac24     00 00 00 00 
1ac28     08 00 00 00 
1ac2c     00 00 00 00 
1ac30     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1ac34     10 00 00 00 
1ac38     10 00 00 00 
1ac3c     C0 00 00 00 
1ac40     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1ac44     40 02 00 00 
1ac48     F6 32 24 15 
1ac4c     FB 6C C3 01 
1ac50     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ac54     50 00 00 00 
1ac58     A0 00 00 00 
1ac5c     54 00 00 00 
1ac60     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1ac64     08 00 00 00 
1ac68     08 00 00 00 
1ac6c     08 00 00 00 
1ac70     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ac74     0C 00 00 00 
1ac78     08 00 00 00 
1ac7c     00 01 00 00 
1ac80     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1ac84     E0 01 00 00 
1ac88     10 06 56 15 
1ac8c     FB 64 C3 01 
1ac90     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1ac94     50 00 00 00 
1ac98     32 00 00 00 
1ac9c     50 00 00 00 
1aca0     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1aca4     08 00 00 00 
1aca8     08 00 00 00 
1acac     08 00 00 00 
1acb0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1acb4     0C 00 00 00 
1acb8     08 00 00 00 
1acbc     40 01 00 00 
1acc0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1acc4     E0 01 00 00 
1acc8     F2 CD 33 13 
1accc     FB 53 92 01 
1acd0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1acd4     18 00 00 00 
1acd8     30 00 00 00 
1acdc     18 00 00 00 
1ace0     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1ace4     08 00 00 00 
1ace8     08 00 00 00 
1acec     08 00 00 00 
1acf0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1acf4     0C 00 00 00 
1acf8     08 00 00 00 
1acfc     80 01 00 00 
1ad00     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1ad04     E0 01 00 00 
1ad08     F4 8F 11 11 
1ad0c     FB 3A 55 01 
1ad10     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1ad14     20 00 00 00 
1ad18     40 00 00 00 
1ad1c     22 00 00 00 
1ad20     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ad24     00 00 00 00 
1ad28     08 00 00 00 
1ad2c     00 00 00 00 
1ad30     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1ad34     0C 00 00 00 
1ad38     08 00 00 00 
1ad3c     C0 01 00 00 
1ad40     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1ad44     F0 01 00 00 
1ad48     F2 CD 33 13 
1ad4c     FB 53 92 01 
1ad50     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ad54                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1ad54     00 75 C7 97 
1ad58     27 47 F6 0A 
1ad5c     05 79 CB 9B 
1ad60     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1ad64                 | 
1ad64     28 12 64 FD | hdmi            setq    #9
1ad68     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1ad6c                 |            '     setq2   #255
1ad6c                 |             '    rdlong  $100, paletteptr 
1ad6c     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1ad70     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1ad74     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1ad78     78 F9 02 F1 |                 add     ii,hbase
1ad7c     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1ad80     7B 0B 80 FF 
1ad84     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1ad88                 | 
1ad88     66 66 86 FF 
1ad8c     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1ad90                 | 
1ad90                 | 
1ad90                 | ''--------  frame rendering main loop  ---------------------------------------------------
1ad90                 | 
1ad90                 | p101
1ad90     28 14 64 FD |                 setq    #10
1ad94     00 DF 06 FB |                 rdlong  framebuf,  ptra
1ad98     28 1E 64 FD |                 setq    #15
1ad9c     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1ada0     71 99 02 FB |                 rdlong  border,borderptr
1ada4                 | 
1ada4     01 C4 06 F1 |                 add     frames,#1
1ada8     76 F5 02 F6 |                 mov     dlptr2,dlptr
1adac                 | 
1adac     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1adb0     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1adb4     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1adb8     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1adbc                 |  '' up porch
1adbc                 | 
1adbc     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1adc0     49 FF 02 F6 |                 mov     hsync1,sync_001
1adc4     37 A8 46 FB |                 callpa  i_upporch ,#blank
1adc8     72 01 68 FC |                 wrlong  #0,vblankptr
1adcc                 |                 
1adcc     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1add0     29 FE 65 3D |          if_nc  setq2   #255
1add4     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1add8                 | 
1add8                 | '' cursor blinking
1add8                 | 
1add8     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1addc     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1ade0                 | 
1ade0                 | '' main screen
1ade0                 | 
1ade0     00 BE 06 F6 |                 mov linenum,#0
1ade4     00 18 07 F6 |                 mov rcnt,#0
1ade8     00 1C 07 F6 |                 mov rcnt2a,#0
1adec                 | 
1adec                 | 
1adec     00 18 0F F2 | p301            cmp rcnt,#0 wz
1adf0     18 00 90 AD |         if_z    jmp #p306
1adf4     01 18 87 F1 |                 sub rcnt,#1
1adf8     90 F7 02 F6 |                 mov dl,rdl
1adfc     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1ae00     8F F7 02 A1 |    if_z        add dl,roffset  
1ae04     7B 21 03 F6 |                 mov rdl,dl
1ae08     04 00 90 FD |                 jmp #p307          
1ae0c                 |           
1ae0c                 |                 
1ae0c     7A F7 02 FB | p306            rdlong  dl,dlptr2
1ae10     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1ae14     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1ae18     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1ae1c                 | 
1ae1c                 | '' Special entry:
1ae1c                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1ae1c                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1ae1c                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1ae1c                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1ae1c                 | '' todo: set horizontal scroll (if needed)
1ae1c                 | 
1ae1c     02 FA 66 F0 |                 shl framebuf2,#2
1ae20     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1ae24     04 22 0F F2 |                 cmp dlc,#%100 wz
1ae28                 |   
1ae28                 |                 
1ae28     04 F4 06 F1 |                 add dlptr2,#4
1ae2c     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1ae30     7A 21 03 FB |                  rdlong rdl,dlptr2
1ae34     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1ae38     04 18 47 F0 |                  shr rcnt,#4
1ae3c                 |              
1ae3c     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1ae40     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1ae44                 |                 
1ae44     04 1E 47 F0 |                  shr roffset,#4
1ae48     0C 1E 67 F0 |                  shl roffset,#12
1ae4c                 |   
1ae4c     9C FF 9F FD |                  jmp #p301
1ae50                 |                  
1ae50                 |                  
1ae50                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1ae50     0C FA 46 F0 |                 shr     framebuf2,#12
1ae54     02 FA 66 F0 |                 shl     framebuf2,#2
1ae58                 | 
1ae58     7B 03 E3 F8 |                 getbyte t1,dl,#0
1ae5c     00 02 0F F2 |                 cmp     t1,#0 wz
1ae60     34 00 90 AD |     if_z        jmp     #borderline
1ae64                 | 
1ae64     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1ae68     50 00 90 CD |           if_c   jmp     #textline
1ae6c     50 02 90 3D |           if_nc  jmp     #graphline
1ae70                 | '
1ae70     01 BE 06 F1 | p302            add     linenum,#1
1ae74     04 F4 06 F1 |                 add     dlptr2,#4
1ae78     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1ae7c     6C FF 9F 5D |          if_nz  jmp     #p301
1ae80                 | 
1ae80     72 03 68 FC | p112            wrlong  #1,vblankptr
1ae84     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1ae88                 | 
1ae88     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1ae8c     4B FF 02 F6 |                 mov     hsync1,sync_223
1ae90     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1ae94     F8 FE 9F FD |                 jmp     #p101
1ae98                 | 
1ae98                 | '' ---------------  END of frame rendering loop -------------------------------------------
1ae98                 | 
1ae98                 | 
1ae98     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1ae9c     4C A1 C2 FC |                 xcont   m_vi,border
1aea0     CC FF 9F FD |                 jmp     #p302
1aea4                 | 
1aea4                 | 
1aea4     08 00 B0 FD | blank           call    #hsync                          'blank lines
1aea8     7E A1 C2 FC |                 xcont   m_vi,hsync0
1aeac     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1aeb0                 | 
1aeb0     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1aeb4     7F 9D B2 FC |                 xzero   m_sn,hsync1
1aeb8     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1aebc                 | 
1aebc                 | 
1aebc                 | 
1aebc                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1aebc                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1aebc                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1aebc                 | 
1aebc                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1aebc                 | 
1aebc     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1aec0                 | 
1aec0     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1aec4     7B 17 5B F8 |                 getnib  zoom, dl,#3
1aec8     03 16 07 F5 |                 and             zoom, #3
1aecc                 | 
1aecc                 | 
1aecc                 | 
1aecc     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1aed0     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1aed4     3F BC 06 F5 |                 and     linestart,#63
1aed8     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1aedc     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1aee0                 | 
1aee0     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1aee4                 | 
1aee4                 |                        ' if fontline =0, get a border color
1aee4                 | 
1aee4     51 03 33 F9 | p102            getword t1,m_border,#0
1aee8     00 02 0F F2 |                 cmp     t1, #0 wz
1aeec     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1aef0                 | 
1aef0     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1aef4     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1aef8     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1aefc     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1af00     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1af04     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1af08     52 BB 02 F6 |                 mov m_lut2, m_lut1
1af0c     6A BB 02 F1 |                 add m_lut2, lutt1
1af10     58 0F 03 F6 |                 mov cpl2,i_cpl
1af14                 | 
1af14     02 16 0F F2 |                cmp zoom,#2 wz
1af18     E4 00 90 AD |           if_z jmp #p420
1af1c     01 16 0F F2 |                cmp zoom,#1 wz
1af20     64 00 90 AD |           if_z jmp #p410
1af24     00 16 0F F2 |                 cmp zoom,#0 wz
1af28     04 00 90 AD |           if_z jmp #p400
1af2c     50 01 90 FD |                jmp #p430
1af30                 | 
1af30                 |                    '
1af30                 |  ''---------------------------------------------------------------------------------------------------------
1af30     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1af34     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1af38     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1af3c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1af40     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1af44     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1af48     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1af4c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1af50     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1af54     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1af58                 | 
1af58     81 BB C2 FC |                         xcont m_lut2,t1
1af5c                 | 
1af5c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1af60     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1af64     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1af68     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1af6c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1af70     01 C0 86 F1 |                         sub     lutaddr,#1
1af74                 | 
1af74     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1af78     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1af7c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1af80                 | 
1af80     EB 0F 6F FB |                         djnz   cpl2,#p400
1af84     28 01 90 FD |  p401                   jmp    #p103
1af88                 | 
1af88                 | ''------------------------------------------------------------------------------------------------------------
1af88                 | 
1af88     01 0E 47 F0 |  p410                   shr cpl2,#1
1af8c                 | 
1af8c                 | ''---------------------------------------------------------------------------------------------------------
1af8c     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1af90     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1af94     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1af98     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1af9c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1afa0     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1afa4     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1afa8     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1afac     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1afb0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1afb4                 | 
1afb4                 | 
1afb4     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1afb8     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1afbc     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1afc0     03 02 07 FA |                         mul t1,#3
1afc4     81 BB C2 FC |                         xcont m_lut2,t1
1afc8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1afcc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1afd0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1afd4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1afd8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1afdc     01 C0 86 F1 |                         sub     lutaddr,#1
1afe0     63 06 63 FD |                         mergew t3
1afe4     03 06 07 FA |                         mul t3,#3
1afe8     83 BB C2 FC |                         xcont m_lut2,t3
1afec                 | 
1afec     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1aff0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1aff4                 | 
1aff4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1aff8                 | 
1aff8     E4 0F 6F FB |                         djnz   cpl2,#p412
1affc     B0 00 90 FD |  p411                   jmp    #p103
1b000                 | 
1b000                 | ''------------------------------------------------------------------------------------------------------------
1b000                 | 
1b000     02 0E 47 F0 |  p420                   shr cpl2,#2
1b004                 | 
1b004                 | ''---------------------------------------------------------------------------------------
1b004     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1b008     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b00c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b010     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1b014     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1b018     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1b01c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1b020     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1b024     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1b028     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1b02c                 | 
1b02c     61 02 63 FD |                         mergeb t1
1b030     81 07 3B F9 |                         getword t3,t1,#1
1b034     0F 02 07 FA |                         mul t1,#15
1b038     81 BB C2 FC |                         xcont m_lut2,t1
1b03c                 | 
1b03c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b040     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b044     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b048     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b04c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b050     01 C0 86 F1 |                         sub     lutaddr,#1
1b054                 | 
1b054     81 09 EB F8 |                         getbyte t4,t1,#1        '
1b058     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1b05c                 | 
1b05c     0F 06 07 FA |                         mul t3,#15
1b060     83 BB C2 FC |                         xcont m_lut2,t3
1b064                 | 
1b064     83 0B EB F8 |                         getbyte t5,t3,#1
1b068     85 BB C2 FC |                         xcont m_lut2, t5
1b06c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b070     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b074                 | 
1b074     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b078                 | 
1b078     E2 0F 6F FB |                         djnz   cpl2,#p422
1b07c     30 00 90 FD |  p421                   jmp    #p103
1b080                 | 
1b080                 | '--------------------------------------------------------------------------------------------------------------
1b080                 | 
1b080     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1b084     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b088     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b08c                 | 
1b08c     00 BA C6 FC |                         xcont m_lut2,#0
1b090                 | 
1b090     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b094     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b098     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b09c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b0a0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b0a4     01 C0 86 F1 |                         sub     lutaddr,#1
1b0a8                 | 
1b0a8     F5 0F 6F FB |                         djnz   cpl2,#p430
1b0ac     00 00 90 FD |  p431                   jmp    #p103
1b0b0                 | 
1b0b0                 | ''------------------------------------------------------------------------------------------------------------
1b0b0                 | 
1b0b0                 | 
1b0b0                 | 
1b0b0     51 25 33 F9 | p103            getword  mb2,m_border,#0
1b0b4     00 24 0F F2 |                 cmp      mb2, #0 wz
1b0b8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b0bc                 | 
1b0bc     B0 FD 9F FD |                 jmp #p302
1b0c0                 | 
1b0c0                 | '' -------------------------------------- END of text line ---------------------------------
1b0c0                 | 
1b0c0                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1b0c0                 | 
1b0c0     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1b0c4                 | 
1b0c4                 | 
1b0c4     51 25 33 F9 | p202            getword mb2,m_border,#0
1b0c8     00 24 0F F2 |                 cmp     mb2, #0 wz
1b0cc     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1b0d0                 | 
1b0d0                 | '----------------------------------------- display pixels
1b0d0                 | 
1b0d0     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1b0d4     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1b0d8                 | 
1b0d8     7B 17 5B F8 |                 getnib  zoom, dl,#3
1b0dc     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1b0e0                 | 
1b0e0     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1b0e4     0C BC 06 F5 |                 and     colordepth,#12
1b0e8                 | 
1b0e8     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1b0ec     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1b0f0     64 00 90 AD |           if_z  jmp     #p240
1b0f4                 | 
1b0f4     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1b0f8     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1b0fc     98 00 90 AD |           if_z  jmp     #p250
1b100                 | 
1b100     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1b104     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1b108     FC 00 90 AD |           if_z  jmp     #p260
1b10c                 | 
1b10c     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1b110                 | 
1b110                 | '' --- 8 bit color modes
1b110                 | 
1b110     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1b114     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b118                 | 
1b118     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1b11c     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1b120                 |        
1b120                 |  '  
1b120     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1b124     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1b128                 |     
1b128                 |  
1b128     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1b12c     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1b130                 |         
1b130                 | 
1b130                 |         
1b130     7D 11 03 FB | p235               rdlong  char,framebuf2
1b134     32 0C 63 FD |                    skipf skippattern
1b138     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1b13c     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1b140     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1b144     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1b148     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1b14c     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1b150     F7 0F 6F FB |                    djnz    cpl2,#p235
1b154                 | 
1b154     20 01 90 FD |                jmp    #p203
1b158                 |                   
1b158                 | 
1b158                 | 
1b158                 | '' --- 1 bit color modes
1b158                 | 
1b158     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1b15c     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b160                 | 
1b160     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1b164     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1b168     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1b16c                 | 
1b16c                 | 
1b16c     7D 11 E3 FA | p241               rdword  char,framebuf2
1b170     44 10 FF F9 |                    movbyts char,#%01000100
1b174     63 10 63 FD |                    mergew  char
1b178     32 0C 63 FD |                    skipf skippattern
1b17c     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1b180     63 10 63 FD |                    mergew  char                    ' 1 0
1b184     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1b188     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1b18c     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1b190     F6 0F 6F FB |                    djnz   cpl2,#p241
1b194                 | 
1b194                 | 
1b194     E0 00 90 FD |                jmp    #p203
1b198                 | 
1b198                 | '' --- 2 bit color modes
1b198                 | 
1b198     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1b19c     C8 00 90 AD |        if_z   jmp #p251
1b1a0                 | 
1b1a0     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b1a4     30 00 90 AD |        if_z   jmp #p252
1b1a8                 | 
1b1a8                 | 
1b1a8     7D 11 C3 FA | p254               rdbyte char,framebuf2
1b1ac     04 0A 07 F6 |                    mov  t5,#4
1b1b0     02 10 67 F0 | p255               shl  char,#2
1b1b4     88 03 53 F8 |                    getnib  t1,char,#2
1b1b8     03 02 07 F5 |                    and     t1,#3
1b1bc     55 02 07 FA |                    mul     t1,#$55
1b1c0     81 05 03 F9 |                    rolbyte  t2,t1,#0
1b1c4     FA 0B 6F FB |                    djnz    t5,#p255
1b1c8     82 BB C2 FC |                    xcont   m_lut2,t2
1b1cc     01 FA 06 F1 |                    add     framebuf2,#1
1b1d0     F5 0F 6F FB |                    djnz    cpl2,#p254
1b1d4     A0 00 90 FD |                    jmp     #p203
1b1d8                 | 
1b1d8     7D 11 E3 FA | p252               rdword char,framebuf2
1b1dc     08 0A 07 F6 |                    mov  t5,#8
1b1e0     02 10 67 F0 | p253               shl  char,#2
1b1e4     88 03 63 F8 |                    getnib  t1,char,#4
1b1e8     03 02 07 F5 |                    and     t1,#3
1b1ec     05 02 07 FA |                    mul     t1,#5
1b1f0     81 05 83 F8 |                    rolnib  t2,t1,#0
1b1f4     FA 0B 6F FB |                    djnz    t5,#p253
1b1f8     82 BB C2 FC |                    xcont   m_lut2,t2
1b1fc     02 FA 06 F1 |                    add     framebuf2,#2
1b200     F5 0F 6F FB |                    djnz    cpl2,#p252
1b204     70 00 90 FD |                    jmp     #p203
1b208                 | 
1b208                 | '' ------ 4 bit color modes
1b208                 | 
1b208     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1b20c     58 00 90 AD |        if_z   jmp #p251
1b210                 | 
1b210     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b214     2C 00 90 AD |        if_z   jmp #p262
1b218                 | 
1b218                 | 
1b218     7D 11 C3 FA | p263               rdbyte char,framebuf2
1b21c     02 0A DC FC |                            rep #5,#2
1b220     88 05 8B F8 |                              rolnib t2,char,#1
1b224     88 05 8B F8 |                                  rolnib t2,char,#1
1b228     88 05 8B F8 |                              rolnib t2,char,#1
1b22c     88 05 8B F8 |                                  rolnib t2,char,#1
1b230     04 10 67 F0 |                              shl char,#4
1b234     82 BB C2 FC |                    xcont   m_lut2,t2
1b238     01 FA 06 F1 |                    add     framebuf2,#1
1b23c     F6 0F 6F FB |                    djnz    cpl2,#p263
1b240     34 00 90 FD |                    jmp     #p203
1b244                 | 
1b244     7D 11 E3 FA | p262               rdword  char,framebuf2
1b248     04 06 DC FC |                            rep #3,#4
1b24c     88 05 9B F8 |                              rolnib t2,char,#3
1b250     88 05 9B F8 |                                  rolnib t2,char,#3
1b254     04 10 67 F0 |                              shl char,#4
1b258     82 BB C2 FC |                    xcont   m_lut2,t2
1b25c     02 FA 06 F1 |                    add     framebuf2,#2
1b260     F8 0F 6F FB |                    djnz    cpl2,#p262
1b264     10 00 90 FD |                    jmp     #p203
1b268                 | 
1b268                 | ''---------- all color modes without zoom
1b268                 | 
1b268     87 07 D8 FC | p251               rep  #3,cpl2
1b26c     7D 11 03 FB |                    rdlong  char,framebuf2
1b270     04 FA 06 F1 |                    add     framebuf2,#4
1b274     88 BB C2 FC |                    xcont   m_lut2,char
1b278                 |           
1b278                 |  ''-----------------------------------------------------------------------------------------
1b278                 | p203           ' getword  mb2,m_border,#0
1b278     00 24 0F F2 |                 cmp      mb2, #0 wz
1b27c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b280                 | 
1b280     EC FB 9F FD |                 jmp #p302
1b284                 | 
1b284                 | '' -------------------------------------- END of graph  line ---------------------------------
1b284                 | 
1b284                 | '' consts and vars
1b284                 | 
1b284     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1b288     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1b28c     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1b290     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1b294                 | 
1b294     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1b298                 | 
1b298                 | '------ these longs will be set by setmode function
1b298                 | 
1b298     00 00 00 00 | m_bs            long    0        'blanks before sync
1b29c     00 00 00 00 | m_sn            long    0        'sync
1b2a0     00 00 00 00 | m_bv            long    0        'blanks before visible
1b2a4     00 00 00 00 | m_vi            long    0        'visible pixels #
1b2a8     00 00 00 00 | m_border        long    0        'left/right borders
1b2ac     00 00 00 00 | m_lut1          long    0        'characters
1b2b0     00 00 00 00 | i_vborder       long    0        'up/down borders
1b2b4     00 00 00 00 | i_upporch       long    0        'up porch lines
1b2b8     00 00 00 00 | i_vsync         long    0        'vsync lines
1b2bc     00 00 00 00 | i_downporch     long    0        'down porch lines
1b2c0     00 00 00 00 | i_modenum       long    0        'mode #
1b2c4     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1b2c8     00 00 00 00 | i_lines         long    0        'scanlines #
1b2cc     00 00 00 00 | i_clock         long    0
1b2d0     00 00 00 00 | i_hubset        long    0
1b2d4     00 00 00 00 | i_totalvis      long    0
1b2d8                 | 
1b2d8                 | '-------------------------------------
1b2d8                 | 
1b2d8     00 00 00 00 | m_lut2          long    0
1b2dc                 | 
1b2dc                 | colordepth
1b2dc     00 00 00 00 | linestart       long    0
1b2e0     00 00 00 00 | linenum         long    0
1b2e4     00 01 00 00 | lutaddr         long    256
1b2e8                 | 
1b2e8     0E 00 00 00 | cursorsh        long    14
1b2ec     00 00 00 00 | frames          long    0
1b2f0     00 00 00 00 | cursorx         long    0
1b2f4     00 00 00 00 | cursory         long    0
1b2f8     00 00 00 00 | cursorpos       long    0
1b2fc     00 00 00 00 | cursorpos2      long    0
1b300     00 00 00 00 | fontstart       long    0
1b304     00 00 00 00 | border2         long 0
1b308     00 00 81 70 | lutiv           long $70810000
1b30c     00 00 88 00 | lutt1           long $00880000
1b310     00 00 80 00 | lutg1           long $00800000
1b314     00 00 80 10 | lutg2           long $10800000
1b318     00 00 80 20 | lutg4           long $20800000
1b31c     00 00 80 30 | lutg8           long $30800000
1b320     00 00 00 00 | framebuf        long 0
1b324     00 00 00 00 | fontbuf         long 0
1b328     00 00 00 00 | borderptr       long 0
1b32c     00 00 00 00 | vblankptr       long 0
1b330     00 00 00 00 | cursorptr       long 0
1b334     00 00 00 00 | modeptr         long 0
1b338     00 00 00 00 | paletteptr      long 0
1b33c     00 00 00 00 | dlptr           long 0
1b340                 | fontnumptr      res     1
1b340                 | fontnumptr      res     1
1b340                 | hbase           res     1
1b340                 | hbase           res     1
1b340                 | borderptr2      res     1
1b340                 | borderptr2      res     1
1b340                 | dlptr2 res 1
1b340                 | dlptr2 res 1
1b340                 | dl              res 1
1b340                 | dl              res 1
1b340                 | ii              res     1
1b340                 | ii              res     1
1b340                 | framebuf2       res     1
1b340                 | framebuf2       res     1
1b340                 | hsync0          res     1
1b340                 | hsync0          res     1
1b340                 | hsync1          res     1
1b340                 | hsync1          res     1
1b340                 | fontline        res     1
1b340                 | fontline        res     1
1b340                 | t1              res     1
1b340                 | t1              res     1
1b340                 | t2              res     1
1b340                 | t2              res     1
1b340                 | t3 res 1
1b340                 | t3 res 1
1b340                 | t4 res 1
1b340                 | t4 res 1
1b340                 | t5 res 1
1b340                 | t5 res 1
1b340                 | skippattern res 1
1b340                 | skippattern res 1
1b340                 | cpl2 res 1
1b340                 | cpl2 res 1
1b340                 | char            res     1
1b340                 | char            res     1
1b340                 | backcolor       res     1
1b340                 | backcolor       res     1
1b340                 | charcolor       res     1
1b340                 | charcolor       res     1
1b340                 | zoom res 1
1b340                 | zoom res 1
1b340     00 00 00 00 | rcnt long 0 'dl repeat count
1b344     00 00 00 00 | rcnt2 long 0
1b348     00 00 00 00 | rcnt2a long 0
1b34c     00 00 00 00 | roffset long 0
1b350     00 00 00 00 | rdl long 0  'dl repeat line
1b354     00 00 00 00 | dlc long 0 'dl command
1b358     00 00 00 00 | mb2 long 0
1b35c     00 00 00 00 | aend             long 0
1b360                 |                 fit     496                     '
1b360                 | _trackerplayer_spin2_dat_
1b360                 | 
1b360     00 00 00 00 | null             long  0
1b364     46 52 45 51 
1b368     46 52 45 51 
1b36c     46 52 45 51 
1b370     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1b374     46 52 45 51 
1b378     46 52 45 51 
1b37c     46 52 45 51 
1b380     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b384     46 52 45 51 
1b388     46 52 45 51 
1b38c     46 52 45 51 
1b390     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b394     46 52 45 51 
1b398     46 52 45 51 
1b39c     46 52 45 51 
1b3a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3a4     46 52 45 51 
1b3a8     46 52 45 51 
1b3ac     46 52 45 51 
1b3b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3b4     46 52 45 51 
1b3b8     46 52 45 51 
1b3bc     46 52 45 51 
1b3c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3c4     46 52 45 51 
1b3c8     46 52 45 51 
1b3cc     46 52 45 51 
1b3d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3d4     46 52 45 51 
1b3d8     46 52 45 51 
1b3dc     46 52 45 51 
1b3e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3e4     46 52 45 51 
1b3e8     46 52 45 51 
1b3ec     46 52 45 51 
1b3f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3f4     46 52 45 51 
1b3f8     46 52 45 51 
1b3fc     46 52 45 51 
1b400     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b404     46 52 45 51 
1b408     46 52 45 51 
1b40c     46 52 45 51 
1b410     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b414     46 52 45 51 
1b418     46 52 45 51 
1b41c     46 52 45 51 
1b420     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b424     46 52 45 51 
1b428     46 52 45 51 
1b42c     46 52 45 51 
1b430     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b434     46 52 45 51 
1b438     46 52 45 51 
1b43c     46 52 45 51 
1b440     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b444     46 52 45 51 
1b448     46 52 45 51 
1b44c     46 52 45 51 
1b450     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b454     46 52 45 51 
1b458     46 52 45 51 
1b45c     46 52 45 51 
1b460     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b464     46 52 45 51 
1b468     46 52 45 51 
1b46c     46 52 45 51 
1b470     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b474     46 52 45 51 
1b478     46 52 45 51 
1b47c     46 52 45 51 
1b480     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b484     46 52 45 51 
1b488     46 52 45 51 
1b48c     46 52 45 51 
1b490     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b494     46 52 45 51 
1b498     46 52 45 51 
1b49c     46 52 45 51 
1b4a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4a4     46 52 45 51 
1b4a8     46 52 45 51 
1b4ac     46 52 45 51 
1b4b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4b4     46 52 45 51 
1b4b8     46 52 45 51 
1b4bc     46 52 45 51 
1b4c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4c4     46 52 45 51 
1b4c8     46 52 45 51 
1b4cc     46 52 45 51 
1b4d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4d4     46 52 45 51 
1b4d8     46 52 45 51 
1b4dc     46 52 45 51 
1b4e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4e4     46 52 45 51 
1b4e8     46 52 45 51 
1b4ec     46 52 45 51 
1b4f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4f4     46 52 45 51 
1b4f8     46 52 45 51 
1b4fc     46 52 45 51 
1b500     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b504     46 52 45 51 
1b508     46 52 45 51 
1b50c     46 52 45 51 
1b510     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b514     46 52 45 51 
1b518     46 52 45 51 
1b51c     46 52 45 51 
1b520     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b524     46 52 45 51 
1b528     46 52 45 51 
1b52c     46 52 45 51 
1b530     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b534     46 52 45 51 
1b538     46 52 45 51 
1b53c     46 52 45 51 
1b540     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b544     46 52 45 51 
1b548     46 52 45 51 
1b54c     46 52 45 51 
1b550     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b554     46 52 45 51 
1b558     46 52 45 51 
1b55c     46 52 45 51 
1b560     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b564     46 52 45 51 
1b568     46 52 45 51 
1b56c     46 52 45 51 
1b570     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b574     46 52 45 51 
1b578     46 52 45 51 
1b57c     46 52 45 51 
1b580     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b584     46 52 45 51 
1b588     46 52 45 51 
1b58c     46 52 45 51 
1b590     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b594     46 52 45 51 
1b598     46 52 45 51 
1b59c     46 52 45 51 
1b5a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5a4     46 52 45 51 
1b5a8     46 52 45 51 
1b5ac     46 52 45 51 
1b5b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5b4     46 52 45 51 
1b5b8     46 52 45 51 
1b5bc     46 52 45 51 
1b5c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5c4     46 52 45 51 
1b5c8     46 52 45 51 
1b5cc     46 52 45 51 
1b5d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5d4     46 52 45 51 
1b5d8     46 52 45 51 
1b5dc     46 52 45 51 
1b5e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5e4     46 52 45 51 
1b5e8     46 52 45 51 
1b5ec     46 52 45 51 
1b5f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5f4     46 52 45 51 
1b5f8     46 52 45 51 
1b5fc     46 52 45 51 
1b600     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b604     46 52 45 51 
1b608     46 52 45 51 
1b60c     46 52 45 51 
1b610     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b614     46 52 45 51 
1b618     46 52 45 51 
1b61c     46 52 45 51 
1b620     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b624     46 52 45 51 
1b628     46 52 45 51 
1b62c     46 52 45 51 
1b630     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b634     46 52 45 51 
1b638     46 52 45 51 
1b63c     46 52 45 51 
1b640     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b644     46 52 45 51 
1b648     46 52 45 51 
1b64c     46 52 45 51 
1b650     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b654     46 52 45 51 
1b658     46 52 45 51 
1b65c     46 52 45 51 
1b660     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b664     46 52 45 51 
1b668     46 52 45 51 
1b66c     46 52 45 51 
1b670     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b674     46 52 45 51 
1b678     46 52 45 51 
1b67c     46 52 45 51 
1b680     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b684     46 52 45 51 
1b688     46 52 45 51 
1b68c     46 52 45 51 
1b690     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b694     46 52 45 51 
1b698     46 52 45 51 
1b69c     46 52 45 51 
1b6a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6a4     46 52 45 51 
1b6a8     46 52 45 51 
1b6ac     46 52 45 51 
1b6b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6b4     46 52 45 51 
1b6b8     46 52 45 51 
1b6bc     46 52 45 51 
1b6c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6c4     46 52 45 51 
1b6c8     46 52 45 51 
1b6cc     46 52 45 51 
1b6d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6d4     46 52 45 51 
1b6d8     46 52 45 51 
1b6dc     46 52 45 51 
1b6e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6e4     46 52 45 51 
1b6e8     46 52 45 51 
1b6ec     46 52 45 51 
1b6f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6f4     46 52 45 51 
1b6f8     46 52 45 51 
1b6fc     46 52 45 51 
1b700     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b704     46 52 45 51 
1b708     46 52 45 51 
1b70c     46 52 45 51 
1b710     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b714     46 52 45 51 
1b718     46 52 45 51 
1b71c     46 52 45 51 
1b720     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b724     46 52 45 51 
1b728     46 52 45 51 
1b72c     46 52 45 51 
1b730     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b734     46 52 45 51 
1b738     46 52 45 51 
1b73c     46 52 45 51 
1b740     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b744     46 52 45 51 
1b748     46 52 45 51 
1b74c     46 52 45 51 
1b750     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b754     46 52 45 51 
1b758     46 52 45 51 
1b75c     46 52 45 51 
1b760     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b764     46 52 45 51 
1b768     46 52 45 51 
1b76c     46 52 45 51 
1b770     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b774     46 52 45 51 
1b778     46 52 45 51 
1b77c     46 52 45 51 
1b780     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b784     46 52 45 51 
1b788     46 52 45 51 
1b78c     46 52 45 51 
1b790     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b794     46 52 45 51 
1b798     46 52 45 51 
1b79c     46 52 45 51 
1b7a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7a4     46 52 45 51 
1b7a8     46 52 45 51 
1b7ac     46 52 45 51 
1b7b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7b4     46 52 45 51 
1b7b8     46 52 45 51 
1b7bc     46 52 45 51 
1b7c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7c4     46 52 45 51 
1b7c8     46 52 45 51 
1b7cc     46 52 45 51 
1b7d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7d4     46 52 45 51 
1b7d8     46 52 45 51 
1b7dc     46 52 45 51 
1b7e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7e4     46 52 45 51 
1b7e8     46 52 45 51 
1b7ec     46 52 45 51 
1b7f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7f4     46 52 45 51 
1b7f8     46 52 45 51 
1b7fc     46 52 45 51 
1b800     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b804     46 52 45 51 
1b808     46 52 45 51 
1b80c     46 52 45 51 
1b810     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b814     46 52 45 51 
1b818     46 52 45 51 
1b81c     46 52 45 51 
1b820     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b824     46 52 45 51 
1b828     46 52 45 51 
1b82c     46 52 45 51 
1b830     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b834     46 52 45 51 
1b838     46 52 45 51 
1b83c     46 52 45 51 
1b840     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b844     46 52 45 51 
1b848     46 52 45 51 
1b84c     46 52 45 51 
1b850     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b854     46 52 45 51 
1b858     46 52 45 51 
1b85c     46 52 45 51 
1b860     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b864     46 52 45 51 
1b868     46 52 45 51 
1b86c     46 52 45 51 
1b870     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b874     46 52 45 51 
1b878     46 52 45 51 
1b87c     46 52 45 51 
1b880     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b884     46 52 45 51 
1b888     46 52 45 51 
1b88c     46 52 45 51 
1b890     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b894     46 52 45 51 
1b898     46 52 45 51 
1b89c     46 52 45 51 
1b8a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8a4     46 52 45 51 
1b8a8     46 52 45 51 
1b8ac     46 52 45 51 
1b8b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8b4     46 52 45 51 
1b8b8     46 52 45 51 
1b8bc     46 52 45 51 
1b8c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8c4     46 52 45 51 
1b8c8     46 52 45 51 
1b8cc     46 52 45 51 
1b8d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8d4     46 52 45 51 
1b8d8     46 52 45 51 
1b8dc     46 52 45 51 
1b8e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8e4     46 52 45 51 
1b8e8     46 52 45 51 
1b8ec     46 52 45 51 
1b8f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8f4     46 52 45 51 
1b8f8     46 52 45 51 
1b8fc     46 52 45 51 
1b900     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b904     46 52 45 51 
1b908     46 52 45 51 
1b90c     46 52 45 51 
1b910     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b914     46 52 45 51 
1b918     46 52 45 51 
1b91c     46 52 45 51 
1b920     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b924     46 52 45 51 
1b928     46 52 45 51 
1b92c     46 52 45 51 
1b930     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b934     46 52 45 51 
1b938     46 52 45 51 
1b93c     46 52 45 51 
1b940     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b944     46 52 45 51 
1b948     46 52 45 51 
1b94c     46 52 45 51 
1b950     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b954     46 52 45 51 
1b958     46 52 45 51 
1b95c     46 52 45 51 
1b960     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b964     46 52 45 51 
1b968     46 52 45 51 
1b96c     46 52 45 51 
1b970     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b974     46 52 45 51 
1b978     46 52 45 51 
1b97c     46 52 45 51 
1b980     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b984     46 52 45 51 
1b988     46 52 45 51 
1b98c     46 52 45 51 
1b990     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b994     46 52 45 51 
1b998     46 52 45 51 
1b99c     46 52 45 51 
1b9a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9a4     46 52 45 51 
1b9a8     46 52 45 51 
1b9ac     46 52 45 51 
1b9b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9b4     46 52 45 51 
1b9b8     46 52 45 51 
1b9bc     46 52 45 51 
1b9c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9c4     46 52 45 51 
1b9c8     46 52 45 51 
1b9cc     46 52 45 51 
1b9d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9d4     46 52 45 51 
1b9d8     46 52 45 51 
1b9dc     46 52 45 51 
1b9e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9e4     46 52 45 51 
1b9e8     46 52 45 51 
1b9ec     46 52 45 51 
1b9f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9f4     46 52 45 51 
1b9f8     46 52 45 51 
1b9fc     46 52 45 51 
1ba00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba04     46 52 45 51 
1ba08     46 52 45 51 
1ba0c     46 52 45 51 
1ba10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba14     46 52 45 51 
1ba18     46 52 45 51 
1ba1c     46 52 45 51 
1ba20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba24     46 52 45 51 
1ba28     46 52 45 51 
1ba2c     46 52 45 51 
1ba30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba34     46 52 45 51 
1ba38     46 52 45 51 
1ba3c     46 52 45 51 
1ba40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba44     46 52 45 51 
1ba48     46 52 45 51 
1ba4c     46 52 45 51 
1ba50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba54     46 52 45 51 
1ba58     46 52 45 51 
1ba5c     46 52 45 51 
1ba60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba64     46 52 45 51 
1ba68     46 52 45 51 
1ba6c     46 52 45 51 
1ba70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba74     46 52 45 51 
1ba78     46 52 45 51 
1ba7c     46 52 45 51 
1ba80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba84     46 52 45 51 
1ba88     46 52 45 51 
1ba8c     46 52 45 51 
1ba90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba94     46 52 45 51 
1ba98     46 52 45 51 
1ba9c     46 52 45 51 
1baa0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baa4     46 52 45 51 
1baa8     46 52 45 51 
1baac     46 52 45 51 
1bab0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bab4     46 52 45 51 
1bab8     46 52 45 51 
1babc     46 52 45 51 
1bac0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bac4     46 52 45 51 
1bac8     46 52 45 51 
1bacc     46 52 45 51 
1bad0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bad4     46 52 45 51 
1bad8     46 52 45 51 
1badc     46 52 45 51 
1bae0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bae4     46 52 45 51 
1bae8     46 52 45 51 
1baec     46 52 45 51 
1baf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baf4     46 52 45 51 
1baf8     46 52 45 51 
1bafc     46 52 45 51 
1bb00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb04     46 52 45 51 
1bb08     46 52 45 51 
1bb0c     46 52 45 51 
1bb10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb14     46 52 45 51 
1bb18     46 52 45 51 
1bb1c     46 52 45 51 
1bb20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb24     46 52 45 51 
1bb28     46 52 45 51 
1bb2c     46 52 45 51 
1bb30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb34     46 52 45 51 
1bb38     46 52 45 51 
1bb3c     46 52 45 51 
1bb40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb44     46 52 45 51 
1bb48     46 52 45 51 
1bb4c     46 52 45 51 
1bb50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb54     46 52 45 51 
1bb58     46 52 45 51 
1bb5c     46 52 45 51 
1bb60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb64     46 52 45 51 
1bb68     46 52 45 51 
1bb6c     46 52 45 51 
1bb70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb74     46 52 45 51 
1bb78     46 52 45 51 
1bb7c     46 52 45 51 
1bb80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb84     46 52 45 51 
1bb88     46 52 45 51 
1bb8c     46 52 45 51 
1bb90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb94     46 52 45 51 
1bb98     46 52 45 51 
1bb9c     46 52 45 51 
1bba0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bba4     46 52 45 51 
1bba8     46 52 45 51 
1bbac     46 52 45 51 
1bbb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbb4     46 52 45 51 
1bbb8     46 52 45 51 
1bbbc     46 52 45 51 
1bbc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbc4     46 52 45 51 
1bbc8     46 52 45 51 
1bbcc     46 52 45 51 
1bbd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbd4     46 52 45 51 
1bbd8     46 52 45 51 
1bbdc     46 52 45 51 
1bbe0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbe4     46 52 45 51 
1bbe8     46 52 45 51 
1bbec     46 52 45 51 
1bbf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbf4     46 52 45 51 
1bbf8     46 52 45 51 
1bbfc     46 52 45 51 
1bc00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc04     46 52 45 51 
1bc08     46 52 45 51 
1bc0c     46 52 45 51 
1bc10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc14     46 52 45 51 
1bc18     46 52 45 51 
1bc1c     46 52 45 51 
1bc20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc24     46 52 45 51 
1bc28     46 52 45 51 
1bc2c     46 52 45 51 
1bc30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc34     46 52 45 51 
1bc38     46 52 45 51 
1bc3c     46 52 45 51 
1bc40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc44     46 52 45 51 
1bc48     46 52 45 51 
1bc4c     46 52 45 51 
1bc50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc54     46 52 45 51 
1bc58     46 52 45 51 
1bc5c     46 52 45 51 
1bc60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc64     46 52 45 51 
1bc68     46 52 45 51 
1bc6c     46 52 45 51 
1bc70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc74     46 52 45 51 
1bc78     46 52 45 51 
1bc7c     46 52 45 51 
1bc80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc84     46 52 45 51 
1bc88     46 52 45 51 
1bc8c     46 52 45 51 
1bc90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc94     46 52 45 51 
1bc98     46 52 45 51 
1bc9c     46 52 45 51 
1bca0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bca4     46 52 45 51 
1bca8     46 52 45 51 
1bcac     46 52 45 51 
1bcb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcb4     46 52 45 51 
1bcb8     46 52 45 51 
1bcbc     46 52 45 51 
1bcc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcc4     46 52 45 51 
1bcc8     46 52 45 51 
1bccc     46 52 45 51 
1bcd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcd4     46 52 45 51 
1bcd8     46 52 45 51 
1bcdc     46 52 45 51 
1bce0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bce4     46 52 45 51 
1bce8     46 52 45 51 
1bcec     46 52 45 51 
1bcf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcf4     46 52 45 51 
1bcf8     46 52 45 51 
1bcfc     46 52 45 51 
1bd00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd04     46 52 45 51 
1bd08     46 52 45 51 
1bd0c     46 52 45 51 
1bd10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd14     46 52 45 51 
1bd18     46 52 45 51 
1bd1c     46 52 45 51 
1bd20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd24     46 52 45 51 
1bd28     46 52 45 51 
1bd2c     46 52 45 51 
1bd30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd34     46 52 45 51 
1bd38     46 52 45 51 
1bd3c     46 52 45 51 
1bd40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd44     46 52 45 51 
1bd48     46 52 45 51 
1bd4c     46 52 45 51 
1bd50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd54     46 52 45 51 
1bd58     46 52 45 51 
1bd5c     46 52 45 51 
1bd60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd64     46 52 45 51 
1bd68     46 52 45 51 
1bd6c     46 52 45 51 
1bd70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd74     46 52 45 51 
1bd78     46 52 45 51 
1bd7c     46 52 45 51 
1bd80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd84     46 52 45 51 
1bd88     46 52 45 51 
1bd8c     46 52 45 51 
1bd90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd94     46 52 45 51 
1bd98     46 52 45 51 
1bd9c     46 52 45 51 
1bda0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bda4     46 52 45 51 
1bda8     46 52 45 51 
1bdac     46 52 45 51 
1bdb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdb4     46 52 45 51 
1bdb8     46 52 45 51 
1bdbc     46 52 45 51 
1bdc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdc4     46 52 45 51 
1bdc8     46 52 45 51 
1bdcc     46 52 45 51 
1bdd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdd4     46 52 45 51 
1bdd8     46 52 45 51 
1bddc     46 52 45 51 
1bde0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bde4     46 52 45 51 
1bde8     46 52 45 51 
1bdec     46 52 45 51 
1bdf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdf4     46 52 45 51 
1bdf8     46 52 45 51 
1bdfc     46 52 45 51 
1be00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be04     46 52 45 51 
1be08     46 52 45 51 
1be0c     46 52 45 51 
1be10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be14     46 52 45 51 
1be18     46 52 45 51 
1be1c     46 52 45 51 
1be20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be24     46 52 45 51 
1be28     46 52 45 51 
1be2c     46 52 45 51 
1be30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be34     46 52 45 51 
1be38     46 52 45 51 
1be3c     46 52 45 51 
1be40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be44     46 52 45 51 
1be48     46 52 45 51 
1be4c     46 52 45 51 
1be50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be54     46 52 45 51 
1be58     46 52 45 51 
1be5c     46 52 45 51 
1be60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be64     46 52 45 51 
1be68     46 52 45 51 
1be6c     46 52 45 51 
1be70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be74     46 52 45 51 
1be78     46 52 45 51 
1be7c     46 52 45 51 
1be80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be84     46 52 45 51 
1be88     46 52 45 51 
1be8c     46 52 45 51 
1be90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be94     46 52 45 51 
1be98     46 52 45 51 
1be9c     46 52 45 51 
1bea0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bea4     46 52 45 51 
1bea8     46 52 45 51 
1beac     46 52 45 51 
1beb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1beb4     46 52 45 51 
1beb8     46 52 45 51 
1bebc     46 52 45 51 
1bec0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bec4     46 52 45 51 
1bec8     46 52 45 51 
1becc     46 52 45 51 
1bed0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bed4     46 52 45 51 
1bed8     46 52 45 51 
1bedc     46 52 45 51 
1bee0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bee4     46 52 45 51 
1bee8     46 52 45 51 
1beec     46 52 45 51 
1bef0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bef4     46 52 45 51 
1bef8     46 52 45 51 
1befc     46 52 45 51 
1bf00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bf04                 | 
1bf04     00 00 00 00 
1bf08     18 00 00 00 
1bf0c     31 00 00 00 
1bf10     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1bf14     61 00 00 00 
1bf18     78 00 00 00 
1bf1c     8D 00 00 00 
1bf20     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1bf24     B4 00 00 00 
1bf28     C5 00 00 00 
1bf2c     D4 00 00 00 
1bf30     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1bf34     EB 00 00 00 
1bf38     F4 00 00 00 
1bf3c     FA 00 00 00 
1bf40     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1bf44     FF 00 00 00 
1bf48     FD 00 00 00 
1bf4c     FA 00 00 00 
1bf50     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1bf54     EB 00 00 00 
1bf58     E0 00 00 00 
1bf5c     D4 00 00 00 
1bf60     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1bf64     B4 00 00 00 
1bf68     A1 00 00 00 
1bf6c     8D 00 00 00 
1bf70     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1bf74     61 00 00 00 
1bf78     4A 00 00 00 
1bf7c     31 00 00 00 
1bf80     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1bf84     00 00 00 00 
1bf88     E8 FF FF FF 
1bf8c     CF FF FF FF 
1bf90     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1bf94     9F FF FF FF 
1bf98     88 FF FF FF 
1bf9c     73 FF FF FF 
1bfa0     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1bfa4     4C FF FF FF 
1bfa8     3B FF FF FF 
1bfac     2C FF FF FF 
1bfb0     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1bfb4     15 FF FF FF 
1bfb8     0C FF FF FF 
1bfbc     06 FF FF FF 
1bfc0     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1bfc4     01 FF FF FF 
1bfc8     03 FF FF FF 
1bfcc     06 FF FF FF 
1bfd0     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1bfd4     15 FF FF FF 
1bfd8     20 FF FF FF 
1bfdc     2C FF FF FF 
1bfe0     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1bfe4     4C FF FF FF 
1bfe8     5F FF FF FF 
1bfec     73 FF FF FF 
1bff0     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1bff4     9F FF FF FF 
1bff8     B6 FF FF FF 
1bffc     CF FF FF FF 
1c000     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1c004                 | 
1c004     58 03 28 03 
1c008     FA 02 D0 02 
1c00c     A6 02 80 02 
1c010     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1c014     1A 02 FC 01 
1c018     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1c01c     AC 01 94 01 
1c020     7D 01 68 01 
1c024     53 01 40 01 
1c028     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1c02c     0D 01 FE 00 
1c030     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1c034     D6 00 CA 00 
1c038     BE 00 B4 00 
1c03c     AA 00 A0 00 
1c040     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1c044     87 00 7F 00 
1c048     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1c04c     6B 00 22 03 
1c050     F5 02 CB 02 
1c054     A2 02 7D 02 
1c058     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1c05c     17 02 F9 01 
1c060     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1c064     A9 01 91 01 
1c068     7B 01 65 01 
1c06c     51 01 3E 01 
1c070     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1c074     0C 01 FD 00 
1c078     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1c07c     D5 00 C9 00 
1c080     BD 00 B3 00 
1c084     A9 00 9F 00 
1c088     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1c08c     86 00 7E 00 
1c090     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1c094     4C 03 1C 03 
1c098     F0 02 C5 02 
1c09c     9E 02 78 02 
1c0a0     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1c0a4     14 02 F6 01 
1c0a8     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1c0ac     A6 01 8E 01 
1c0b0     78 01 63 01 
1c0b4     4F 01 3C 01 
1c0b8     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1c0bc     0A 01 FB 00 
1c0c0     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1c0c4     D3 00 C7 00 
1c0c8     BC 00 B1 00 
1c0cc     A7 00 9E 00 
1c0d0     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1c0d4     85 00 7D 00 
1c0d8     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1c0dc     46 03 17 03 
1c0e0     EA 02 C0 02 
1c0e4     99 02 74 02 
1c0e8     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1c0ec     10 02 F2 01 
1c0f0     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1c0f4     A3 01 8B 01 
1c0f8     75 01 60 01 
1c0fc     4C 01 3A 01 
1c100     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1c104     08 01 F9 00 
1c108     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1c10c     D1 00 C6 00 
1c110     BB 00 B0 00 
1c114     A6 00 9D 00 
1c118     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1c11c     84 00 7D 00 
1c120     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1c124     40 03 11 03 
1c128     E5 02 BB 02 
1c12c     94 02 6F 02 
1c130     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1c134     0C 02 EF 01 
1c138     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1c13c     A0 01 88 01 
1c140     72 01 5E 01 
1c144     4A 01 38 01 
1c148     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1c14c     06 01 F7 00 
1c150     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1c154     D0 00 C4 00 
1c158     B9 00 AF 00 
1c15c     A5 00 9C 00 
1c160     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1c164     83 00 7C 00 
1c168     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1c16c     3A 03 0B 03 
1c170     E0 02 B6 02 
1c174     8F 02 6B 02 
1c178     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1c17c     08 02 EB 01 
1c180     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1c184     9D 01 86 01 
1c188     70 01 5B 01 
1c18c     48 01 35 01 
1c190     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1c194     04 01 F5 00 
1c198     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1c19c     CE 00 C3 00 
1c1a0     B8 00 AE 00 
1c1a4     A4 00 9B 00 
1c1a8     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1c1ac     82 00 7B 00 
1c1b0     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1c1b4     34 03 06 03 
1c1b8     DA 02 B1 02 
1c1bc     8B 02 66 02 
1c1c0     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1c1c4     04 02 E7 01 
1c1c8     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1c1cc     9A 01 83 01 
1c1d0     6D 01 59 01 
1c1d4     45 01 33 01 
1c1d8     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1c1dc     02 01 F4 00 
1c1e0     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1c1e4     CD 00 C1 00 
1c1e8     B7 00 AC 00 
1c1ec     A3 00 9A 00 
1c1f0     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1c1f4     81 00 7A 00 
1c1f8     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1c1fc     2E 03 00 03 
1c200     D5 02 AC 02 
1c204     86 02 62 02 
1c208     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1c20c     01 02 E4 01 
1c210     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1c214     97 01 80 01 
1c218     6B 01 56 01 
1c21c     43 01 31 01 
1c220     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1c224     00 01 F2 00 
1c228     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1c22c     CC 00 C0 00 
1c230     B5 00 AB 00 
1c234     A1 00 98 00 
1c238     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1c23c     80 00 79 00 
1c240     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1c244     8B 03 58 03 
1c248     28 03 FA 02 
1c24c     D0 02 A6 02 
1c250     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1c254     3A 02 1A 02 
1c258     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1c25c     C5 01 AC 01 
1c260     94 01 7D 01 
1c264     68 01 53 01 
1c268     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1c26c     1D 01 0D 01 
1c270     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1c274     E2 00 D6 00 
1c278     CA 00 BE 00 
1c27c     B4 00 AA 00 
1c280     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1c284     8F 00 87 00 
1c288     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1c28c     84 03 52 03 
1c290     22 03 F5 02 
1c294     CB 02 A3 02 
1c298     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1c29c     37 02 17 02 
1c2a0     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1c2a4     C2 01 A9 01 
1c2a8     91 01 7B 01 
1c2ac     65 01 51 01 
1c2b0     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1c2b4     1C 01 0C 01 
1c2b8     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1c2bc     E1 00 D4 00 
1c2c0     C8 00 BD 00 
1c2c4     B3 00 A9 00 
1c2c8     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1c2cc     8E 00 86 00 
1c2d0     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1c2d4     7E 03 4C 03 
1c2d8     1C 03 F0 02 
1c2dc     C5 02 9E 02 
1c2e0     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1c2e4     33 02 14 02 
1c2e8     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1c2ec     BF 01 A6 01 
1c2f0     8E 01 78 01 
1c2f4     63 01 4F 01 
1c2f8     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1c2fc     1A 01 0A 01 
1c300     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1c304     DF 00 D3 00 
1c308     C7 00 BC 00 
1c30c     B1 00 A7 00 
1c310     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1c314     8D 00 85 00 
1c318     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1c31c     77 03 46 03 
1c320     17 03 EA 02 
1c324     C0 02 99 02 
1c328     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1c32c     2F 02 10 02 
1c330     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1c334     BC 01 A3 01 
1c338     8B 01 75 01 
1c33c     60 01 4C 01 
1c340     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1c344     18 01 08 01 
1c348     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1c34c     DE 00 D1 00 
1c350     C6 00 BB 00 
1c354     B0 00 A6 00 
1c358     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1c35c     8C 00 84 00 
1c360     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1c364     71 03 40 03 
1c368     11 03 E5 02 
1c36c     BB 02 94 02 
1c370     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1c374     2B 02 0C 02 
1c378     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1c37c     B9 01 A0 01 
1c380     88 01 72 01 
1c384     5E 01 4A 01 
1c388     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1c38c     16 01 06 01 
1c390     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1c394     DC 00 D0 00 
1c398     C4 00 B9 00 
1c39c     AF 00 A5 00 
1c3a0     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1c3a4     8B 00 83 00 
1c3a8     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1c3ac     6B 03 3A 03 
1c3b0     0B 03 E0 02 
1c3b4     B6 02 8F 02 
1c3b8     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1c3bc     27 02 08 02 
1c3c0     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1c3c4     B5 01 9D 01 
1c3c8     86 01 70 01 
1c3cc     5B 01 48 01 
1c3d0     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1c3d4     14 01 04 01 
1c3d8     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1c3dc     DB 00 CE 00 
1c3e0     C3 00 B8 00 
1c3e4     AE 00 A4 00 
1c3e8     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1c3ec     8A 00 82 00 
1c3f0     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1c3f4     64 03 34 03 
1c3f8     06 03 DA 02 
1c3fc     B1 02 8B 02 
1c400     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1c404     23 02 04 02 
1c408     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1c40c     B2 01 9A 01 
1c410     83 01 6D 01 
1c414     59 01 45 01 
1c418     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1c41c     12 01 02 01 
1c420     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1c424     D9 00 CD 00 
1c428     C1 00 B7 00 
1c42c     AC 00 A3 00 
1c430     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1c434     89 00 81 00 
1c438     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1c43c     5E 03 2E 03 
1c440     00 03 D5 02 
1c444     AC 02 86 02 
1c448     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1c44c     1F 02 01 02 
1c450     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1c454     AF 01 97 01 
1c458     80 01 6B 01 
1c45c     56 01 43 01 
1c460     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1c464     10 01 00 01 
1c468     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1c46c     D8 00 CB 00 
1c470     C0 00 B5 00 
1c474     AB 00 A1 00 
1c478     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1c47c     88 00 80 00 
1c480     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1c484                 | 	alignl
1c484                 | _audio014_spin2_dat_
1c484                 | 
1c484                 | audio       org     0
1c484     00 F2 07 F6 | 			mov ptrb,#0
1c488     0E 90 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1c48c     0E C8 1C FC |             wxpin   #100,#left
1c490                 | 
1c490     0F 90 07 FC |             wrpin   dac,#right
1c494     0F C8 1C FC |             wxpin   #100,#right
1c498                 | 
1c498     41 9C 64 FD |             dirh    #left addpins 1
1c49c                 | 
1c49c     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1c4a0     36 E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1c4a4     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1c4a8                 |             
1c4a8                 | '---------------------------------------------------------------------------------        
1c4a8                 | '----------------- The main loop -------------------------------------------------
1c4a8                 | '---------------------------------------------------------------------------------
1c4a8                 | 
1c4a8     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
1c4ac     61 C3 06 FB |             rdlong  sstart1,ptra++
1c4b0     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
1c4b4     61 D5 06 FB |             rdlong  sstart2,ptra++
1c4b8     28 10 64 FD |             setq    #8
1c4bc     61 E7 06 FB |             rdlong  sstart3,ptra++
1c4c0     28 10 64 FD |             setq    #8
1c4c4     61 F9 06 FB |             rdlong  sstart4,ptra++
1c4c8     28 10 64 FD |             setq    #8
1c4cc     61 0B 07 FB |             rdlong  sstart5,ptra++
1c4d0     28 10 64 FD |             setq    #8
1c4d4     61 1D 07 FB |             rdlong  sstart6,ptra++
1c4d8     28 10 64 FD |             setq    #8
1c4dc     61 2F 07 FB |             rdlong  sstart7,ptra++
1c4e0     28 10 64 FD |             setq    #8
1c4e4     61 41 07 FB |             rdlong  sstart8,ptra++
1c4e8                 | 
1c4e8     20 F1 87 F1 |             sub     ptra,#9*4*8    
1c4ec                 |             
1c4ec     44 53 13 F2 |             cmp     time0,a21000000 wc
1c4f0                 | 
1c4f0     43 55 83 31 |      if_nc  sub     time1,a20000000
1c4f4     43 57 83 31 |      if_nc  sub     time2,a20000000
1c4f8     43 59 83 31 |      if_nc  sub     time3,a20000000
1c4fc     43 5B 83 31 |      if_nc  sub     time4,a20000000
1c500     43 5D 83 31 |      if_nc  sub     time5,a20000000
1c504     43 5F 83 31 |      if_nc  sub     time6,a20000000
1c508     43 61 83 31 |      if_nc  sub     time7,a20000000
1c50c     43 63 83 31 |      if_nc  sub     time8,a20000000
1c510     43 53 83 31 |      if_nc  sub     time0,a20000000
1c514                 | 
1c514                 |        
1c514                 |     
1c514     00 D2 0E F2 | loop1           cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
1c518     00 A0 06 A6 |     if_e    mov     p1,#0
1c51c     00 E4 0E F2 |             cmp     acmd2,#0 wz
1c520     00 A2 06 A6 |     if_e    mov     p2,#0
1c524     00 F6 0E F2 |             cmp     acmd3,#0 wz
1c528     00 A4 06 A6 |     if_e    mov     p3,#0
1c52c     00 08 0F F2 |             cmp     acmd4,#0 wz
1c530     00 A6 06 A6 |     if_e    mov     p4,#0
1c534     00 1A 0F F2 |             cmp     acmd5,#0 wz
1c538     00 A8 06 A6 |     if_e    mov     p5,#0
1c53c     00 2C 0F F2 |             cmp     acmd6,#0 wz
1c540     00 AA 06 A6 |     if_e    mov     p6,#0
1c544     00 3E 0F F2 |             cmp     acmd7,#0 wz
1c548     00 AC 06 A6 |     if_e    mov     p7,#0
1c54c     00 50 0F F2 |             cmp     acmd8,#0 wz
1c550     00 AE 06 A6 |     if_e    mov     p8,#0
1c554                 |           
1c554     F9 B1 02 F6 |             mov     qq,ptrb         ' Check if the buffer is full	
1c558     02 B0 86 F1 |             sub     qq,#2
1c55c     FF B1 06 F5 |             and     qq,#511
1c560     5A B1 1A F2 |             cmp     qq,front wcz
1c564     40 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
1c568                 |       
1c568     4A 66 07 F6 |             mov     cn,#p201           ' Find the channel to compute
1c56c     AA 69 03 F6 |             mov     ct,time1        ' with the lowest next sample time
1c570     AB 69 3B F3 |             fle     ct,time2 wcz   
1c574     62 66 07 C6 |     if_c    mov     cn,#p202 
1c578     AC 69 3B F3 |             fle     ct,time3 wcz
1c57c     7A 66 07 C6 |     if_c    mov     cn,#p203     
1c580     AD 69 3B F3 |             fle     ct,time4 wcz
1c584     92 66 07 C6 |     if_c    mov     cn,#p204
1c588     AE 69 3B F3 |             fle     ct,time5 wcz
1c58c     AA 66 07 C6 |     if_c    mov     cn,#p205 
1c590     AF 69 3B F3 |             fle     ct,time6 wcz
1c594     C1 66 07 C6 |     if_c    mov     cn,#p206
1c598     B0 69 3B F3 |             fle     ct,time7 wcz
1c59c     D8 66 07 C6 |     if_c    mov     cn,#p207
1c5a0     B1 69 3B F3 |             fle     ct,time8 wcz
1c5a4     EF 66 07 C6 |     if_c    mov     cn,#p208 
1c5a8                 |  
1c5a8     2C 66 63 FD |             jmp     cn
1c5ac                 |    
1c5ac                 | '----------------------------------------------------------------------------------
1c5ac                 | '------------- Compute channel samples --------------------------------------------
1c5ac                 | '----------------------------------------------------------------------------------
1c5ac                 | 	
1c5ac                 | ' ------------  Channel 1
1c5ac                 |  
1c5ac     AA 6B 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
1c5b0     A9 6B 83 F1 |             sub     dt0,time0
1c5b4     67 55 03 F1 |             add     time1,freq1    ' compute the next channel time	
1c5b8                 | 	        
1c5b8     68 A1 02 F1 |             add     p1,askip1      ' update the phase accumulator
1c5bc     64 A1 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
1c5c0     64 A1 82 31 |     if_ge   sub     p1,lend1	        
1c5c4     63 A1 02 31 |     if_ge   add     p1,lstart1       
1c5c8     50 B1 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
1c5cc     61 B1 02 F1 |             add     qq,sstart1
1c5d0                 |             
1c5d0     00 C4 0E F2 |             cmp     type1,#0 wz    ' check the sample type
1c5d4     58 B3 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
1c5d8     08 B2 66 50 |     if_nz   shl     spl,#8
1c5dc     58 B3 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
1c5e0     98 03 B0 FD |             call    #delay
1c5e4     65 B3 32 FA |             scas    spl,vol1       ' apply the volume
1c5e8     00 B2 02 F6 |             mov     spl,0-0
1c5ec                 | 
1c5ec     66 B3 32 FA |             scas    spl,apan1      ' apply the pan
1c5f0     00 70 03 F6 |             mov     ls1,0-0
1c5f4     20 00 00 FF 
1c5f8     00 B0 06 F6 |             mov     qq,##16384
1c5fc     66 B1 82 F1 |             sub     qq,apan1
1c600     58 B3 32 FA |             scas    spl,qq
1c604     00 72 03 F6 |             mov     rs1,0-0
1c608                 |             
1c608     90 02 90 FD |             jmp     #p101              
1c60c                 | 	    	
1c60c                 | ' ------------  Channel 2
1c60c                 |  
1c60c     AB 6B 03 F6 | p202        mov     dt0,time2
1c610     A9 6B 83 F1 |             sub     dt0,time0
1c614     70 57 03 F1 |             add     time2,freq2  	
1c618                 | 	        
1c618     71 A3 02 F1 |             add     p2,askip2
1c61c     6D A3 1A F2 |             cmp     p2,lend2 wcz
1c620     6D A3 82 31 |     if_ge   sub     p2,lend2	        
1c624     6C A3 02 31 |     if_ge   add     p2,lstart2       
1c628     51 B1 02 F6 |             mov     qq,p2
1c62c     6A B1 02 F1 |             add     qq,sstart2
1c630                 | 
1c630     00 D6 0E F2 |             cmp     type2,#0 wz
1c634     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c638     08 B2 66 50 |     if_nz   shl     spl,#8
1c63c     58 B3 E2 AA |     if_z    rdword  spl,qq
1c640     38 03 B0 FD |             call #delay
1c644     6E B3 32 FA |             scas    spl,vol2
1c648     00 B2 02 F6 |             mov     spl,0-0
1c64c                 |             
1c64c     6F B3 32 FA |             scas    spl,apan2
1c650     00 74 03 F6 |             mov     ls2,0-0
1c654     20 00 00 FF 
1c658     00 B0 06 F6 |             mov     qq,##16384
1c65c     6F B1 82 F1 |             sub     qq,apan2
1c660     58 B3 32 FA |             scas    spl,qq
1c664     00 76 03 F6 |             mov     rs2,0-0
1c668                 |             
1c668     30 02 90 FD |             jmp     #p101
1c66c                 | 
1c66c                 | ' ------------  Channel 3
1c66c                 |  
1c66c     AC 6B 03 F6 | p203        mov     dt0,time3
1c670     A9 6B 83 F1 |             sub     dt0,time0
1c674     79 59 03 F1 |             add     time3,freq3  	
1c678                 | 	        
1c678     7A A5 02 F1 |             add     p3,askip3
1c67c     76 A5 1A F2 |             cmp     p3,lend3 wcz
1c680     76 A5 82 31 |     if_ge   sub     p3,lend3	        
1c684     75 A5 02 31 |     if_ge   add     p3,lstart3       
1c688     52 B1 02 F6 |             mov     qq,p3
1c68c     73 B1 02 F1 |             add     qq,sstart3
1c690                 |             
1c690     00 E8 0E F2 |             cmp     type3,#0 wz
1c694     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c698     08 B2 66 50 |     if_nz   shl     spl,#8
1c69c     58 B3 E2 AA |     if_z    rdword  spl,qq
1c6a0     D8 02 B0 FD |             call #delay
1c6a4     77 B3 32 FA |             scas    spl,vol3
1c6a8     00 B2 02 F6 |             mov     spl,0-0
1c6ac                 |     	
1c6ac     78 B3 32 FA |             scas    spl,apan3
1c6b0     00 78 03 F6 |             mov     ls3,0-0
1c6b4                 |             
1c6b4     20 00 00 FF 
1c6b8     00 B0 06 F6 |             mov     qq,##16384
1c6bc     78 B1 82 F1 |             sub     qq,apan3
1c6c0     58 B3 32 FA |             scas    spl,qq
1c6c4     00 7A 03 F6 |             mov     rs3,0-0
1c6c8                 | 
1c6c8     D0 01 90 FD |             jmp     #p101
1c6cc                 |             
1c6cc                 | ' ------------  Channel 4
1c6cc                 |  
1c6cc     AD 6B 03 F6 | p204        mov     dt0,time4
1c6d0     A9 6B 83 F1 |             sub     dt0,time0
1c6d4     82 5B 03 F1 |             add     time4,freq4  	
1c6d8                 | 
1c6d8                 | 	        
1c6d8     83 A7 02 F1 |             add     p4,askip4
1c6dc     7F A7 1A F2 |             cmp     p4,lend4 wcz
1c6e0     7F A7 82 31 |     if_ge   sub     p4,lend4	        
1c6e4     7E A7 02 31 |     if_ge   add     p4,lstart4       
1c6e8     53 B1 02 F6 |             mov     qq,p4
1c6ec     7C B1 02 F1 |             add     qq,sstart4
1c6f0                 |             
1c6f0     00 FA 0E F2 |             cmp     type4,#0 wz
1c6f4     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c6f8     08 B2 66 50 |     if_nz   shl     spl,#8
1c6fc     58 B3 E2 AA |     if_z    rdword  spl,qq
1c700     78 02 B0 FD |            call #delay
1c704     80 B3 32 FA |             scas    spl,vol4
1c708     00 B2 02 F6 |             mov     spl,0-0
1c70c                 |     	
1c70c     81 B3 32 FA |             scas    spl,apan4
1c710     00 7E 03 F6 |             mov     ls4,0-0
1c714                 |             
1c714     20 00 00 FF 
1c718     00 B0 06 F6 |             mov     qq,##16384
1c71c     81 B1 82 F1 |             sub     qq,apan4
1c720     58 B3 32 FA |             scas    spl,qq
1c724     00 7C 03 F6 |             mov     rs4,0-0
1c728                 | 
1c728     70 01 90 FD |             jmp     #p101
1c72c                 |             
1c72c                 | ' ------------  Channel 5
1c72c                 |  
1c72c     AE 6B 03 F6 | p205        mov     dt0,time5
1c730     A9 6B 83 F1 |             sub     dt0,time0
1c734     8B 5D 03 F1 |             add     time5,freq5  	
1c738                 | 
1c738                 | 	        
1c738     8C A9 02 F1 |             add     p5,askip5
1c73c     88 A9 1A F2 |             cmp     p5,lend5 wcz
1c740     88 A9 82 31 |     if_ge   sub     p5,lend5	        
1c744     87 A9 02 31 |     if_ge   add     p5,lstart5       
1c748     54 B1 02 F6 |             mov     qq,p5
1c74c     85 B1 02 F1 |             add     qq,sstart5
1c750                 |             
1c750     00 0C 0F F2 |             cmp     type5,#0 wz
1c754     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c758     08 B2 66 50 |     if_nz   shl     spl,#8
1c75c     58 B3 E2 AA |     if_z    rdword  spl,qq
1c760                 | 
1c760     89 B3 32 FA |             scas    spl,vol5
1c764     00 B2 02 F6 |             mov     spl,0-0
1c768                 |     	
1c768     8A B3 32 FA |             scas    spl,apan5
1c76c     00 82 03 F6 |             mov     ls5,0-0
1c770                 |             
1c770     20 00 00 FF 
1c774     00 B0 06 F6 |             mov     qq,##16384
1c778     8A B1 82 F1 |             sub     qq,apan5
1c77c     58 B3 32 FA |             scas    spl,qq
1c780     00 80 03 F6 |             mov     rs5,0-0
1c784                 | 
1c784     14 01 90 FD |             jmp     #p101
1c788                 |   
1c788                 | ' ------------  Channel 6
1c788                 |  
1c788     AF 6B 03 F6 | p206        mov     dt0,time6
1c78c     A9 6B 83 F1 |             sub     dt0,time0
1c790     94 5F 03 F1 |             add     time6,freq6  	
1c794                 | 
1c794                 | 	        
1c794     95 AB 02 F1 |             add     p6,askip6
1c798     91 AB 1A F2 |             cmp     p6,lend6 wcz
1c79c     91 AB 82 31 |     if_ge   sub     p6,lend6	        
1c7a0     90 AB 02 31 |     if_ge   add     p6,lstart6       
1c7a4     55 B1 02 F6 |             mov     qq,p6
1c7a8     8E B1 02 F1 |             add     qq,sstart6
1c7ac                 |             
1c7ac     00 1E 0F F2 |             cmp     type6,#0 wz
1c7b0     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c7b4     08 B2 66 50 |     if_nz   shl     spl,#8
1c7b8     58 B3 E2 AA |     if_z    rdword  spl,qq
1c7bc                 |           
1c7bc     92 B3 32 FA |             scas    spl,vol6
1c7c0     00 B2 02 F6 |             mov     spl,0-0
1c7c4                 |     	
1c7c4     93 B3 32 FA |             scas    spl,apan6
1c7c8     00 86 03 F6 |             mov     ls6,0-0
1c7cc                 |             
1c7cc     20 00 00 FF 
1c7d0     00 B0 06 F6 |             mov     qq,##16384
1c7d4     93 B1 82 F1 |             sub     qq,apan6
1c7d8     58 B3 32 FA |             scas    spl,qq
1c7dc     00 84 03 F6 |             mov     rs6,0-0
1c7e0                 | 
1c7e0     B8 00 90 FD |             jmp     #p101
1c7e4                 |             
1c7e4                 | ' ------------  Channel 7
1c7e4                 |  
1c7e4     B0 6B 03 F6 | p207        mov     dt0,time7
1c7e8     A9 6B 83 F1 |             sub     dt0,time0
1c7ec     9D 61 03 F1 |             add     time7,freq7  	
1c7f0                 | 
1c7f0                 | 	        
1c7f0     9E AD 02 F1 |             add     p7,askip7
1c7f4     9A AD 1A F2 |             cmp     p7,lend7 wcz
1c7f8     9A AD 82 31 |     if_ge   sub     p7,lend7	        
1c7fc     99 AD 02 31 |     if_ge   add     p7,lstart7       
1c800     56 B1 02 F6 |             mov     qq,p7
1c804     97 B1 02 F1 |             add     qq,sstart7
1c808                 |             
1c808     00 30 0F F2 |             cmp     type7,#0 wz
1c80c     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c810     08 B2 66 50 |     if_nz   shl     spl,#8
1c814     58 B3 E2 AA |     if_z    rdword  spl,qq
1c818                 | 
1c818     9B B3 32 FA |             scas    spl,vol7
1c81c     00 B2 02 F6 |             mov     spl,0-0
1c820                 |     	
1c820     9C B3 32 FA |             scas    spl,apan7
1c824     00 8A 03 F6 |             mov     ls7,0-0
1c828                 |             
1c828     20 00 00 FF 
1c82c     00 B0 06 F6 |             mov     qq,##16384
1c830     9C B1 82 F1 |             sub     qq,apan7
1c834     58 B3 32 FA |             scas    spl,qq
1c838     00 88 03 F6 |             mov     rs7,0-0
1c83c                 | 
1c83c     5C 00 90 FD |             jmp     #p101     
1c840                 |                    
1c840                 | ' ------------  Channel 8
1c840                 |  
1c840     B1 6B 03 F6 | p208        mov     dt0,time8
1c844     A9 6B 83 F1 |             sub     dt0,time0
1c848     A6 63 03 F1 |             add     time8,freq8  	
1c84c                 | 
1c84c                 | 	        
1c84c     A7 AF 02 F1 |             add     p8,askip8
1c850     A3 AF 1A F2 |             cmp     p8,lend8 wcz
1c854     A3 AF 82 31 |     if_ge   sub     p8,lend8	        
1c858     A2 AF 02 31 |     if_ge   add     p8,lstart8       
1c85c     57 B1 02 F6 |             mov     qq,p8
1c860     A0 B1 02 F1 |             add     qq,sstart8
1c864                 |             
1c864     00 42 0F F2 |             cmp     type8,#0 wz
1c868     58 B3 C2 5A |     if_nz   rdbyte  spl,qq
1c86c     08 B2 66 50 |     if_nz   shl     spl,#8
1c870     58 B3 E2 AA |     if_z    rdword  spl,qq
1c874                 | 
1c874     A4 B3 32 FA |             scas    spl,vol8
1c878     00 B2 02 F6 |             mov     spl,0-0
1c87c                 |     	
1c87c     A5 B3 32 FA |             scas    spl,apan8
1c880     00 8E 03 F6 |             mov     ls8,0-0
1c884                 |             
1c884     20 00 00 FF 
1c888     00 B0 06 F6 |             mov     qq,##16384
1c88c     A5 B1 82 F1 |             sub     qq,apan8
1c890     58 B3 32 FA |             scas    spl,qq
1c894     00 8C 03 F6 |             mov     rs8,0-0
1c898                 | 
1c898     00 00 90 FD |             jmp     #p101            
1c89c                 |             
1c89c                 | '------------------------ Channels end here --------------------       
1c89c                 | 
1c89c                 | ' Now add all channels and put the sample to the buffer    
1c89c                 | 
1c89c                 | 
1c89c     A9 65 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1c8a0     02 B4 86 A1 |     if_z    sub     front,#2         ' 
1c8a4     FF B5 06 A5 |     if_z    and     front,#511     
1c8a8                 |   
1c8a8     00 6E 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1c8ac     00 6C 07 F6 |             mov     ls,#0
1c8b0     B9 6F 03 F1 |             add     rs,rs1
1c8b4     BB 6F 03 F1 |             add     rs,rs2
1c8b8     BD 6F 03 F1 |             add     rs,rs3
1c8bc     BE 6F 03 F1 |             add     rs,rs4
1c8c0     C0 6F 03 F1 |             add     rs,rs5
1c8c4     C2 6F 03 F1 |             add     rs,rs6
1c8c8     C4 6F 03 F1 |             add     rs,rs7
1c8cc     C6 6F 03 F1 |             add     rs,rs8
1c8d0                 |             
1c8d0     B8 6D 03 F1 |             add     ls,ls1
1c8d4     BA 6D 03 F1 |             add     ls,ls2
1c8d8     BC 6D 03 F1 |             add     ls,ls3
1c8dc     BF 6D 03 F1 |             add     ls,ls4
1c8e0     C1 6D 03 F1 |             add     ls,ls5
1c8e4     C3 6D 03 F1 |             add     ls,ls6
1c8e8     C5 6D 03 F1 |             add     ls,ls7
1c8ec     C7 6D 03 F1 |             add     ls,ls8
1c8f0                 |  		
1c8f0     0F 6C E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1c8f4     0F 6E E7 F4 |             bitnot  rs,#15		
1c8f8     46 6D 03 F5 |  		    and ls,affff
1c8fc     46 6F 03 F5 | 	 	    and rs,affff
1c900                 | 		    
1c900                 |   '         setword rs,ls,#1         ' Pack L and R to one long    		
1c900                 | '
1c900                 |     '     mov newsample, rs
1c900                 | 
1c900                 | 
1c900     A9 65 03 F6 |             mov     oldt0,time0      ' update global time
1c904     B5 53 03 F1 |             add     time0,dt0     
1c908                 |             
1c908                 |   ' now push dt0 samples to the buffer
1c908     00 6A 0F F2 |    cmp dt0,#0 wz
1c90c     04 FC 9F AD |   if_z jmp #loop1
1c910     B5 8F 02 F6 |   mov t1,dt0
1c914                 |   
1c914     F9 91 02 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1c918     01 90 86 F1 |             sub     t2,#1
1c91c     FF 91 06 F5 |             and     t2,#511
1c920     5A 91 1A F2 |             cmp     t2,front wcz
1c924     EC FF 9F AD |     if_e    jmp     #p301    
1c928                 |     
1c928     1F 92 06 FA |             mul nl,#31
1c92c     1F 94 06 FA |             mul nr,#31
1c930     B6 93 02 F1 |            add nl, ls
1c934     B7 95 02 F1 |             add nr,rs
1c938     05 92 46 F0 |             shr nl,#5
1c93c     05 94 46 F0 |            shr nr,#5
1c940                 | '
1c940     4A 8B 02 F6 |             mov newsample,nr
1c944     49 8B 2A F9 |             setword newsample, nl,#1
1c948                 | 
1c948     5A 8B 32 FC |             wrlut   newsample, front
1c94c     01 B4 06 F1 |             add     front,#1
1c950     FF B5 06 F5 |             and     front,#511
1c954     EF 8F 6E FB |             djnz t1,#p301
1c958                 | 
1c958                 |                
1c958     4C FB 9F FD |             jmp     #loop            'loop
1c95c                 | 
1c95c                 | '-------------------------------------------------------------------------
1c95c                 | '------------------ This is the end of the main loop ---------------------
1c95c                 | '-------------------------------------------------------------------------
1c95c                 | 
1c95c                 | '--------------------------------------------------------------------------
1c95c                 | '------ Interrupt service -------------------------------------------------
1c95c                 | '------ Output the sample, get the next one if exists ---------------------
1c95c                 | '--------------------------------------------------------------------------
1c95c                 | 
1c95c     0E B8 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1c960     0F BA 26 FC |             wypin   rsample,#right       '4
1c964                 |            
1c964     5A F3 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1c968     F5 FF 3B AB |     if_e    reti1                        '8/10
1c96c                 | 
1c96c     E1 BD A6 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1c970     5E BB 3A F9 |           	getword rsample,lsnext,#1    '13
1c974     5E B9 32 F9 |           	getword lsample,lsnext,#0    '15
1c978     F5 FF 3B FB |             reti1                        '17/19 
1c97c                 |             
1c97c                 |       
1c97c                 |           
1c97c                 | '---------------------------------------------------------------------------
1c97c                 | '-------- End of interrupt -------------------------------------------------
1c97c                 | '---------------------------------------------------------------------------    
1c97c                 | 
1c97c                 | 
1c97c     00 00 00 FF 
1c980     50 B0 06 F6 | delay   mov qq,##80
1c984     FF B1 6E FB | p900    djnz qq,#p900
1c988                 | 
1c988                 | 
1c988     2D 00 64 FD |         ret
1c98c                 | 
1c98c                 | '---------------------------------------------------------------------------
1c98c                 | '------- Variables ---------------------------------------------------------
1c98c                 | '---------------------------------------------------------------------------
1c98c                 | 
1c98c                 | ' constants
1c98c                 | 
1c98c     FF FF FF 1F | a1fffffff long $1fffffff
1c990     00 00 00 20 | a20000000 long $20000000
1c994     00 00 00 21 | a21000000 long $21000000
1c998     00 00 00 00 | newsample long 0
1c99c     FF FF 00 00 | affff long $ffff
1c9a0     00 00 00 00 | t1 long 0
1c9a4     00 00 00 00 | t2 long 0
1c9a8     00 00 00 00 | nl long 0
1c9ac     00 00 00 00 | nr long 0
1c9b0     00 00 00 00 | nrsample long 0
1c9b4     00 00 00 00 | nlsample long 0
1c9b8     1F 00 00 00 | fl long 31
1c9bc     1F 00 00 00 | fr long 31
1c9c0     00 00 00 00 | d long 0
1c9c4                 | ' phase accumulators
1c9c4                 | 
1c9c4     00 00 00 00 | p1          long 0
1c9c8     00 00 00 00 | p2          long 0
1c9cc     00 00 00 00 | p3          long 0
1c9d0     00 00 00 00 | p4          long 0
1c9d4     00 00 00 00 | p5          long 0
1c9d8     00 00 00 00 | p6          long 0
1c9dc     00 00 00 00 | p7          long 0
1c9e0     00 00 00 00 | p8          long 0
1c9e4                 | 
1c9e4                 | ' temporary variables 
1c9e4                 | 
1c9e4     00 00 00 00 | qq          long 0
1c9e8     00 00 00 00 | spl         long 0
1c9ec                 | 
1c9ec                 | ' circular buffer in LUT
1c9ec                 | 
1c9ec     00 00 00 00 | front       long 0
1c9f0                 | 'tail        long 0
1c9f0                 | 
1c9f0                 | ' Interrupt ISR variables
1c9f0                 | 
1c9f0     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
1c9f4     00 00 00 00 | lsample     long 0
1c9f8     00 00 00 00 | rsample     long 0
1c9fc     00 00 00 00 | lsnext      long 0
1ca00     00 00 00 00 | rsnext      long 0 
1ca04     00 00 00 00 | irqtime     long 0
1ca08                 | 
1ca08                 | ' Channel 1 registers. TODO - optimize the memory usage
1ca08                 | 
1ca08     00 00 00 00 | sstart1     long 0       ' Sample start pointer
1ca0c     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
1ca10     00 00 00 00 | lstart1     long 0       ' Loop start
1ca14     02 00 00 00 | lend1       long 2       ' Loop end
1ca18     00 00 00 00 | vol1        long 0       ' volume, 0..16384
1ca1c     00 00 00 00 | apan1       long 0       ' pan, 0..16384
1ca20     65 00 00 00 | freq1       long 101     ' frequency divider
1ca24     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
1ca28     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
1ca2c                 | 
1ca2c                 | ' Channel 2 registers
1ca2c                 | 
1ca2c     00 00 00 00 | sstart2     long 0
1ca30     00 00 00 00 | type2       long 0
1ca34     00 00 00 00 | lstart2     long 0
1ca38     02 00 00 00 | lend2       long 2        		
1ca3c     00 00 00 00 | vol2        long 0
1ca40     00 00 00 00 | apan2       long 0
1ca44     67 00 00 00 | freq2       long 103
1ca48     02 00 00 00 | askip2      long 2
1ca4c     00 00 00 00 | acmd2       long 0
1ca50                 | 
1ca50                 | ' Channel 3 registers
1ca50                 | 
1ca50     00 00 00 00 | sstart3     long 0
1ca54     00 00 00 00 | type3       long 0
1ca58     00 00 00 00 | lstart3     long 0
1ca5c     02 00 00 00 | lend3       long 2       		'
1ca60     00 00 00 00 | vol3        long 0
1ca64     00 00 00 00 | apan3       long 0
1ca68     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
1ca6c     02 00 00 00 | askip3      long 2
1ca70     00 00 00 00 | acmd3       long 0
1ca74                 | 
1ca74                 | ' Channel 4 registers
1ca74                 | 
1ca74     00 00 00 00 | sstart4     long 0
1ca78     00 00 00 00 | type4       long 0
1ca7c     00 00 00 00 | lstart4     long 0
1ca80     02 00 00 00 | lend4       long 2       		'
1ca84     00 00 00 00 | vol4        long 0
1ca88     00 00 00 00 | apan4       long 0
1ca8c     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
1ca90     02 00 00 00 | askip4      long 2
1ca94     00 00 00 00 | acmd4       long 0
1ca98                 | 
1ca98                 | ' Channel 5 registers
1ca98                 | 
1ca98     00 00 00 00 | sstart5     long 0
1ca9c     00 00 00 00 | type5       long 0
1caa0     00 00 00 00 | lstart5     long 0
1caa4     02 00 00 00 | lend5       long 2       		'
1caa8     00 00 00 00 | vol5        long 0
1caac     00 00 00 00 | apan5       long 0
1cab0     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
1cab4     02 00 00 00 | askip5      long 2
1cab8     00 00 00 00 | acmd5       long 0
1cabc                 | 
1cabc                 | ' Channel 6 registers
1cabc                 | 
1cabc     00 00 00 00 | sstart6     long 0
1cac0     00 00 00 00 | type6       long 0
1cac4     00 00 00 00 | lstart6     long 0
1cac8     02 00 00 00 | lend6       long 2       		'
1cacc     00 00 00 00 | vol6        long 0
1cad0     00 00 00 00 | apan6       long 0
1cad4     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
1cad8     02 00 00 00 | askip6      long 2
1cadc     00 00 00 00 | acmd6       long 0
1cae0                 | 
1cae0                 | ' Channel 7 registers
1cae0                 | 
1cae0     00 00 00 00 | sstart7     long 0
1cae4     00 00 00 00 | type7       long 0
1cae8     00 00 00 00 | lstart7     long 0
1caec     02 00 00 00 | lend7       long 2       		'
1caf0     00 00 00 00 | vol7        long 0
1caf4     00 00 00 00 | apan7       long 0
1caf8     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
1cafc     02 00 00 00 | askip7      long 2
1cb00     00 00 00 00 | acmd7       long 0
1cb04                 | 
1cb04                 | ' Channel 8 registers
1cb04                 | 
1cb04     00 00 00 00 | sstart8     long 0
1cb08     00 00 00 00 | type8       long 0
1cb0c     00 00 00 00 | lstart8     long 0
1cb10     02 00 00 00 | lend8       long 2       		'
1cb14     00 00 00 00 | vol8        long 0
1cb18     00 00 00 00 | apan8       long 0
1cb1c     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
1cb20     02 00 00 00 | askip8      long 2
1cb24     00 00 00 00 | acmd8       long 0
1cb28                 | 
1cb28                 | ' Time variables
1cb28                 | 
1cb28     00 00 00 00 | time0       long 0    ' Global sample computing time
1cb2c     01 00 00 00 | time1       long 1    ' Local channels time
1cb30     02 00 00 00 | time2       long 2
1cb34     03 00 00 00 | time3       long 3
1cb38     04 00 00 00 | time4       long 4
1cb3c     05 00 00 00 | time5       long 5
1cb40     06 00 00 00 | time6       long 6
1cb44     07 00 00 00 | time7       long 7
1cb48     08 00 00 00 | time8       long 8
1cb4c                 | 
1cb4c     00 00 00 00 | oldt0       long 0    'Temporary time variables
1cb50     00 00 00 00 | cn          long 0
1cb54     00 00 00 00 | ct          long 0
1cb58     00 00 00 00 | dt0         long 0
1cb5c                 | 
1cb5c                 | ' Samples
1cb5c                 | 
1cb5c     00 00 00 00 | ls          long 0    ' Global sample variable
1cb60     00 00 00 00 | rs          long 0
1cb64                 | 
1cb64     00 00 00 00 | ls1         long 0    ' Channel samples
1cb68     00 00 00 00 | rs1         long 0
1cb6c     00 00 00 00 | ls2         long 0
1cb70     00 00 00 00 | rs2         long 0
1cb74     00 00 00 00 | ls3         long 0
1cb78     00 00 00 00 | rs3         long 0
1cb7c     00 00 00 00 | rs4         long 0
1cb80     00 00 00 00 | ls4         long 0
1cb84     00 00 00 00 | rs5         long 0
1cb88     00 00 00 00 | ls5         long 0
1cb8c     00 00 00 00 | rs6         long 0
1cb90     00 00 00 00 | ls6         long 0
1cb94     00 00 00 00 | rs7         long 0
1cb98     00 00 00 00 | ls7         long 0
1cb9c     00 00 00 00 | rs8         long 0
1cba0     00 00 00 00 | ls8         long 0
1cba4                 | 
1cba4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1cba8                 | 
1cba8     00 00 00 00 
1cbac     00 00 00 00 | null  			long 	0,0           ' for channel reset
1cbb0     73 32 00 04 
1cbb4     00 00 10 00 
1cbb8     00 00 00 00 
1cbbc     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1cbc0     00 00 C9 00 
1cbc4     92 01 5B 02 
1cbc8     24 03 ED 03 
1cbcc     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1cbd0     48 06 11 07 
1cbd4     D9 07 A2 08 
1cbd8     6A 09 33 0A 
1cbdc     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1cbe0     8C 0C 54 0D 
1cbe4     1C 0E E3 0E 
1cbe8     AB 0F 72 10 
1cbec     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1cbf0     C8 12 8F 13 
1cbf4     55 14 1C 15 
1cbf8     E2 15 A8 16 
1cbfc     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1cc00     F9 18 BE 19 
1cc04     82 1A 47 1B 
1cc08     0B 1C CF 1C 
1cc0c     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1cc10     1A 1F DD 1F 
1cc14     9F 20 61 21 
1cc18     23 22 E5 22 
1cc1c     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1cc20     28 25 E8 25 
1cc24     A8 26 67 27 
1cc28     26 28 E5 28 
1cc2c     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1cc30     1F 2B DC 2B 
1cc34     99 2C 55 2D 
1cc38     11 2E CC 2E 
1cc3c     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1cc40     FB 30 B5 31 
1cc44     6E 32 26 33 
1cc48     DF 33 96 34 
1cc4c     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1cc50     BA 36 6F 37 
1cc54     24 38 D9 38 
1cc58     8C 39 40 3A 
1cc5c     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1cc60     56 3C 07 3D 
1cc64     B8 3D 68 3E 
1cc68     17 3F C5 3F 
1cc6c     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1cc70     CE 41 7A 42 
1cc74     25 43 D0 43 
1cc78     7A 44 24 45 
1cc7c     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1cc80     1C 47 C3 47 
1cc84     69 48 0F 49 
1cc88     B4 49 58 4A 
1cc8c     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1cc90     3F 4C E0 4C 
1cc94     81 4D 20 4E 
1cc98     BF 4E 5D 4F 
1cc9c     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1cca0     33 51 CE 51 
1cca4     68 52 02 53 
1cca8     9B 53 32 54 
1ccac     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1ccb0     F5 55 8A 56 
1ccb4     1D 57 B0 57 
1ccb8     42 58 D3 58 
1ccbc     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1ccc0     82 5A 0F 5B 
1ccc4     9C 5B 28 5C 
1ccc8     B3 5C 3E 5D 
1cccc     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1ccd0     D7 5E 5D 5F 
1ccd4     E3 5F 68 60 
1ccd8     EB 60 6E 61 
1ccdc     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1cce0     F1 62 70 63 
1cce4     EE 63 6C 64 
1cce8     E8 64 63 65 
1ccec     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1ccf0     CF 66 46 67 
1ccf4     BC 67 32 68 
1ccf8     A6 68 19 69 
1ccfc     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1cd00     6D 6A DC 6A 
1cd04     4A 6B B7 6B 
1cd08     23 6C 8E 6C 
1cd0c     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1cd10     C9 6D 30 6E 
1cd14     96 6E FB 6E 
1cd18     5E 6F C1 6F 
1cd1c     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1cd20     E2 70 40 71 
1cd24     9D 71 F9 71 
1cd28     54 72 AE 72 
1cd2c     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1cd30     B5 73 0A 74 
1cd34     5F 74 B2 74 
1cd38     04 75 55 75 
1cd3c     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1cd40     41 76 8D 76 
1cd44     D8 76 22 77 
1cd48     6B 77 B3 77 
1cd4c     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1cd50     84 78 C7 78 
1cd54     09 79 4A 79 
1cd58     89 79 C8 79 
1cd5c     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1cd60     7C 7A B6 7A 
1cd64     EE 7A 26 7B 
1cd68     5C 7B 91 7B 
1cd6c     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1cd70     29 7C 59 7C 
1cd74     88 7C B6 7C 
1cd78     E3 7C 0E 7D 
1cd7c     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1cd80     89 7D B0 7D 
1cd84     D5 7D FA 7D 
1cd88     1D 7E 3E 7E 
1cd8c     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1cd90     9C 7E B9 7E 
1cd94     D5 7E EF 7E 
1cd98     09 7F 21 7F 
1cd9c     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1cda0     61 7F 74 7F 
1cda4     86 7F 97 7F 
1cda8     A6 7F B4 7F 
1cdac     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1cdb0     D8 7F E1 7F 
1cdb4     E9 7F F0 7F 
1cdb8     F5 7F F9 7F 
1cdbc     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1cdc0     FF 7F FE 7F 
1cdc4     FD 7F F9 7F 
1cdc8     F5 7F F0 7F 
1cdcc     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1cdd0     D8 7F CD 7F 
1cdd4     C1 7F B4 7F 
1cdd8     A6 7F 97 7F 
1cddc     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1cde0     61 7F 4D 7F 
1cde4     37 7F 21 7F 
1cde8     09 7F EF 7E 
1cdec     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1cdf0     9C 7E 7E 7E 
1cdf4     5F 7E 3E 7E 
1cdf8     1D 7E FA 7D 
1cdfc     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1ce00     89 7D 62 7D 
1ce04     39 7D 0E 7D 
1ce08     E3 7C B6 7C 
1ce0c     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1ce10     29 7C F8 7B 
1ce14     C5 7B 91 7B 
1ce18     5C 7B 26 7B 
1ce1c     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1ce20     7C 7A 41 7A 
1ce24     05 7A C8 79 
1ce28     89 79 4A 79 
1ce2c     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1ce30     84 78 3F 78 
1ce34     FA 77 B3 77 
1ce38     6B 77 22 77 
1ce3c     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1ce40     41 76 F3 75 
1ce44     A5 75 55 75 
1ce48     04 75 B2 74 
1ce4c     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1ce50     B5 73 5E 73 
1ce54     07 73 AE 72 
1ce58     54 72 F9 71 
1ce5c     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1ce60     E2 70 83 70 
1ce64     22 70 C1 6F 
1ce68     5E 6F FB 6E 
1ce6c     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1ce70     C9 6D 61 6D 
1ce74     F8 6C 8E 6C 
1ce78     23 6C B7 6B 
1ce7c     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1ce80     6D 6A FD 69 
1ce84     8B 69 19 69 
1ce88     A6 68 32 68 
1ce8c     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1ce90     CF 66 56 66 
1ce94     DD 65 63 65 
1ce98     E8 64 6C 64 
1ce9c     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1cea0     F1 62 71 62 
1cea4     F0 61 6E 61 
1cea8     EB 60 68 60 
1ceac     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1ceb0     D7 5E 4F 5E 
1ceb4     C7 5D 3E 5D 
1ceb8     B3 5C 28 5C 
1cebc     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1cec0     82 5A F3 59 
1cec4     64 59 D3 58 
1cec8     42 58 B0 57 
1cecc     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1ced0     F5 55 60 55 
1ced4     C9 54 32 54 
1ced8     9B 53 02 53 
1cedc     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1cee0     33 51 97 50 
1cee4     FB 4F 5D 4F 
1cee8     BF 4E 20 4E 
1ceec     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1cef0     3F 4C 9D 4B 
1cef4     FB 4A 58 4A 
1cef8     B4 49 0F 49 
1cefc     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1cf00     1C 47 75 46 
1cf04     CD 45 24 45 
1cf08     7A 44 D0 43 
1cf0c     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1cf10     CE 41 21 41 
1cf14     73 40 C5 3F 
1cf18     17 3F 68 3E 
1cf1c     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1cf20     56 3C A5 3B 
1cf24     F2 3A 40 3A 
1cf28     8C 39 D9 38 
1cf2c     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1cf30     BA 36 04 36 
1cf34     4D 35 96 34 
1cf38     DF 33 26 33 
1cf3c     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1cf40     FB 30 41 30 
1cf44     87 2F CC 2E 
1cf48     11 2E 55 2D 
1cf4c     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1cf50     1F 2B 61 2A 
1cf54     A3 29 E5 28 
1cf58     26 28 67 27 
1cf5c     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1cf60     28 25 67 24 
1cf64     A6 23 E5 22 
1cf68     23 22 61 21 
1cf6c     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1cf70     1A 1F 57 1E 
1cf74     93 1D CF 1C 
1cf78     0B 1C 47 1B 
1cf7c     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1cf80     F9 18 33 18 
1cf84     6E 17 A8 16 
1cf88     E2 15 1C 15 
1cf8c     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1cf90     C8 12 01 12 
1cf94     3A 11 72 10 
1cf98     AB 0F E3 0E 
1cf9c     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1cfa0     8C 0C C4 0B 
1cfa4     FB 0A 33 0A 
1cfa8     6A 09 A2 08 
1cfac     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1cfb0     48 06 7F 05 
1cfb4     B6 04 ED 03 
1cfb8     24 03 5B 02 
1cfbc     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1cfc0     00 00 37 FF 
1cfc4     6E FE A5 FD 
1cfc8     DC FC 13 FC 
1cfcc     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1cfd0     B8 F9 EF F8 
1cfd4     27 F8 5E F7 
1cfd8     96 F6 CD F5 
1cfdc     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1cfe0     74 F3 AC F2 
1cfe4     E4 F1 1D F1 
1cfe8     55 F0 8E EF 
1cfec     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1cff0     38 ED 71 EC 
1cff4     AB EB E4 EA 
1cff8     1E EA 58 E9 
1cffc     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1d000     07 E7 42 E6 
1d004     7E E5 B9 E4 
1d008     F5 E3 31 E3 
1d00c     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1d010     E6 E0 23 E0 
1d014     61 DF 9F DE 
1d018     DD DD 1B DD 
1d01c     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1d020     D8 DA 18 DA 
1d024     58 D9 99 D8 
1d028     DA D7 1B D7 
1d02c     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1d030     E1 D4 24 D4 
1d034     67 D3 AB D2 
1d038     EF D1 34 D1 
1d03c     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1d040     05 CF 4B CE 
1d044     92 CD DA CC 
1d048     21 CC 6A CB 
1d04c     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1d050     46 C9 91 C8 
1d054     DC C7 27 C7 
1d058     74 C6 C0 C5 
1d05c     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1d060     AA C3 F9 C2 
1d064     48 C2 98 C1 
1d068     E9 C0 3B C0 
1d06c     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1d070     32 BE 86 BD 
1d074     DB BC 30 BC 
1d078     86 BB DC BA 
1d07c     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1d080     E4 B8 3D B8 
1d084     97 B7 F1 B6 
1d088     4C B6 A8 B5 
1d08c     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1d090     C1 B3 20 B3 
1d094     7F B2 E0 B1 
1d098     41 B1 A3 B0 
1d09c     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1d0a0     CD AE 32 AE 
1d0a4     98 AD FE AC 
1d0a8     65 AC CE AB 
1d0ac     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1d0b0     0B AA 76 A9 
1d0b4     E3 A8 50 A8 
1d0b8     BE A7 2D A7 
1d0bc     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1d0c0     7E A5 F1 A4 
1d0c4     64 A4 D8 A3 
1d0c8     4D A3 C2 A2 
1d0cc     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1d0d0     29 A1 A3 A0 
1d0d4     1D A0 98 9F 
1d0d8     15 9F 92 9E 
1d0dc     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1d0e0     0F 9D 90 9C 
1d0e4     12 9C 94 9B 
1d0e8     18 9B 9D 9A 
1d0ec     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1d0f0     31 99 BA 98 
1d0f4     44 98 CE 97 
1d0f8     5A 97 E7 96 
1d0fc     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1d100     93 95 24 95 
1d104     B6 94 49 94 
1d108     DD 93 72 93 
1d10c     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1d110     37 92 D0 91 
1d114     6A 91 05 91 
1d118     A2 90 3F 90 
1d11c     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1d120     1E 8F C0 8E 
1d124     63 8E 07 8E 
1d128     AC 8D 52 8D 
1d12c     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1d130     4B 8C F6 8B 
1d134     A1 8B 4E 8B 
1d138     FC 8A AB 8A 
1d13c     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1d140     BF 89 73 89 
1d144     28 89 DE 88 
1d148     95 88 4D 88 
1d14c     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1d150     7C 87 39 87 
1d154     F7 86 B6 86 
1d158     77 86 38 86 
1d15c     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1d160     84 85 4A 85 
1d164     12 85 DA 84 
1d168     A4 84 6F 84 
1d16c     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1d170     D7 83 A7 83 
1d174     78 83 4A 83 
1d178     1D 83 F2 82 
1d17c     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1d180     77 82 50 82 
1d184     2B 82 06 82 
1d188     E3 81 C2 81 
1d18c     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1d190     64 81 47 81 
1d194     2B 81 11 81 
1d198     F7 80 DF 80 
1d19c     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1d1a0     9F 80 8C 80 
1d1a4     7A 80 69 80 
1d1a8     5A 80 4C 80 
1d1ac     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1d1b0     28 80 1F 80 
1d1b4     17 80 10 80 
1d1b8     0B 80 07 80 
1d1bc     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1d1c0     01 80 02 80 
1d1c4     03 80 07 80 
1d1c8     0B 80 10 80 
1d1cc     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1d1d0     28 80 33 80 
1d1d4     3F 80 4C 80 
1d1d8     5A 80 69 80 
1d1dc     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1d1e0     9F 80 B3 80 
1d1e4     C9 80 DF 80 
1d1e8     F7 80 11 81 
1d1ec     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1d1f0     64 81 82 81 
1d1f4     A1 81 C2 81 
1d1f8     E3 81 06 82 
1d1fc     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1d200     77 82 9E 82 
1d204     C7 82 F2 82 
1d208     1D 83 4A 83 
1d20c     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1d210     D7 83 08 84 
1d214     3B 84 6F 84 
1d218     A4 84 DA 84 
1d21c     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1d220     84 85 BF 85 
1d224     FB 85 38 86 
1d228     77 86 B6 86 
1d22c     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1d230     7C 87 C1 87 
1d234     06 88 4D 88 
1d238     95 88 DE 88 
1d23c     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1d240     BF 89 0D 8A 
1d244     5B 8A AB 8A 
1d248     FC 8A 4E 8B 
1d24c     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1d250     4B 8C A2 8C 
1d254     F9 8C 52 8D 
1d258     AC 8D 07 8E 
1d25c     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1d260     1E 8F 7D 8F 
1d264     DE 8F 3F 90 
1d268     A2 90 05 91 
1d26c     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1d270     37 92 9F 92 
1d274     08 93 72 93 
1d278     DD 93 49 94 
1d27c     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1d280     93 95 03 96 
1d284     75 96 E7 96 
1d288     5A 97 CE 97 
1d28c     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1d290     31 99 AA 99 
1d294     23 9A 9D 9A 
1d298     18 9B 94 9B 
1d29c     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1d2a0     0F 9D 8F 9D 
1d2a4     10 9E 92 9E 
1d2a8     15 9F 98 9F 
1d2ac     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1d2b0     29 A1 B1 A1 
1d2b4     39 A2 C2 A2 
1d2b8     4D A3 D8 A3 
1d2bc     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1d2c0     7E A5 0D A6 
1d2c4     9C A6 2D A7 
1d2c8     BE A7 50 A8 
1d2cc     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1d2d0     0B AA A0 AA 
1d2d4     37 AB CE AB 
1d2d8     65 AC FE AC 
1d2dc     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1d2e0     CD AE 69 AF 
1d2e4     05 B0 A3 B0 
1d2e8     41 B1 E0 B1 
1d2ec     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1d2f0     C1 B3 63 B4 
1d2f4     05 B5 A8 B5 
1d2f8     4C B6 F1 B6 
1d2fc     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1d300     E4 B8 8B B9 
1d304     33 BA DC BA 
1d308     86 BB 30 BC 
1d30c     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1d310     32 BE DF BE 
1d314     8D BF 3B C0 
1d318     E9 C0 98 C1 
1d31c     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1d320     AA C3 5B C4 
1d324     0E C5 C0 C5 
1d328     74 C6 27 C7 
1d32c     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1d330     46 C9 FC C9 
1d334     B3 CA 6A CB 
1d338     21 CC DA CC 
1d33c     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1d340     05 CF BF CF 
1d344     79 D0 34 D1 
1d348     EF D1 AB D2 
1d34c     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1d350     E1 D4 9F D5 
1d354     5D D6 1B D7 
1d358     DA D7 99 D8 
1d35c     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1d360     D8 DA 99 DB 
1d364     5A DC 1B DD 
1d368     DD DD 9F DE 
1d36c     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1d370     E6 E0 A9 E1 
1d374     6D E2 31 E3 
1d378     F5 E3 B9 E4 
1d37c     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1d380     07 E7 CD E7 
1d384     92 E8 58 E9 
1d388     1E EA E4 EA 
1d38c     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1d390     38 ED FF ED 
1d394     C6 EE 8E EF 
1d398     55 F0 1D F1 
1d39c     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1d3a0     74 F3 3C F4 
1d3a4     05 F5 CD F5 
1d3a8     96 F6 5E F7 
1d3ac     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1d3b0     B8 F9 81 FA 
1d3b4     4A FB 13 FC 
1d3b8     DC FC A5 FD 
1d3bc     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1d3c0                 | 	alignl
1d3c0                 | __system__dat_
1d3c0     00 00 00 00 
1d3c4     00 00 00 00 | 	byte	$00[8]
1d3c8     03 00 00 00 
1d3cc     00 00 00 00 
1d3d0     00 00 00 00 
1d3d4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d3d8     00 00 00 00 
1d3dc     00 00 00 00 
1d3e0     00 00 00 00 | 	byte	$00[12]
1d3e4     05 00 00 00 
1d3e8     00 00 00 00 
1d3ec     00 00 00 00 
1d3f0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d3f4     BC D5 01 00 | 	long	@@@__system__dat_ + 508
1d3f8     C4 D5 01 00 | 	long	@@@__system__dat_ + 516
1d3fc     00 00 00 00 | 	byte	$00, $00, $00, $00
1d400     CC D5 01 00 | 	long	@@@__system__dat_ + 524
1d404     D4 D5 01 00 | 	long	@@@__system__dat_ + 532
1d408     00 00 00 00 
1d40c     00 00 00 00 | 	byte	$00[8]
1d410     01 00 00 00 
1d414     06 00 00 00 
1d418     00 00 00 00 
1d41c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d420     00 00 00 00 | 	byte	$00, $00, $00, $00
1d424     DC D5 01 00 | 	long	@@@__system__dat_ + 540
1d428     E4 D5 01 00 | 	long	@@@__system__dat_ + 548
1d42c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d430     EC D5 01 00 | 	long	@@@__system__dat_ + 556
1d434     F4 D5 01 00 | 	long	@@@__system__dat_ + 564
1d438     00 00 00 00 
1d43c     00 00 00 00 | 	byte	$00[8]
1d440     01 00 00 00 
1d444     06 00 00 00 
1d448     00 00 00 00 
1d44c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d450     00 00 00 00 | 	byte	$00, $00, $00, $00
1d454     FC D5 01 00 | 	long	@@@__system__dat_ + 572
1d458     04 D6 01 00 | 	long	@@@__system__dat_ + 580
1d45c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d460     0C D6 01 00 | 	long	@@@__system__dat_ + 588
1d464     14 D6 01 00 | 	long	@@@__system__dat_ + 596
1d468     00 00 00 00 
      ...             
1d5b8     00 00 00 00 
1d5bc     00 00 00 00 | 	byte	$00[344]
1d5c0     E0 5F 00 00 | 	long	@@@__system___tx
1d5c4     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5c8     28 60 00 00 | 	long	@@@__system___rx
1d5cc     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5d0     10 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
1d5d4     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5d8     88 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d5dc     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5e0     E0 5F 00 00 | 	long	@@@__system___tx
1d5e4     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5e8     28 60 00 00 | 	long	@@@__system___rx
1d5ec     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5f0     10 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
1d5f4     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5f8     88 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d5fc     00 00 00 00 | 	byte	$00, $00, $00, $00
1d600     E0 5F 00 00 | 	long	@@@__system___tx
1d604     00 00 00 00 | 	byte	$00, $00, $00, $00
1d608     28 60 00 00 | 	long	@@@__system___rx
1d60c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d610     10 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
1d614     00 00 00 00 | 	byte	$00, $00, $00, $00
1d618     88 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d61c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d620                 | __heap_base
1d620     00 00 00 00 
      ...             
1e620     00 00 00 00 
1e624     00 00 00 00 | 	long	0[1026]
1e628                 | objmem
1e628     00 00 00 00 | 	long	0[1]
1e62c 118             | 	org	COG_BSS_START
1e62c 118             | _var01
1e62c 118             | 	res	1
1e62c 119             | _var02
1e62c 119             | 	res	1
1e62c 11a             | _var03
1e62c 11a             | 	res	1
1e62c 11b             | _var04
1e62c 11b             | 	res	1
1e62c 11c             | _var05
1e62c 11c             | 	res	1
1e62c 11d             | _var06
1e62c 11d             | 	res	1
1e62c 11e             | _var07
1e62c 11e             | 	res	1
1e62c 11f             | _var08
1e62c 11f             | 	res	1
1e62c 120             | _var09
1e62c 120             | 	res	1
1e62c 121             | _var10
1e62c 121             | 	res	1
1e62c 122             | _var11
1e62c 122             | 	res	1
1e62c 123             | _var12
1e62c 123             | 	res	1
1e62c 124             | _var13
1e62c 124             | 	res	1
1e62c 125             | _var14
1e62c 125             | 	res	1
1e62c 126             | _var15
1e62c 126             | 	res	1
1e62c 127             | _var16
1e62c 127             | 	res	1
1e62c 128             | _var17
1e62c 128             | 	res	1
1e62c 129             | _var18
1e62c 129             | 	res	1
1e62c 12a             | _var19
1e62c 12a             | 	res	1
1e62c 12b             | _var20
1e62c 12b             | 	res	1
1e62c 12c             | _var21
1e62c 12c             | 	res	1
1e62c 12d             | _var22
1e62c 12d             | 	res	1
1e62c 12e             | arg01
1e62c 12e             | 	res	1
1e62c 12f             | arg02
1e62c 12f             | 	res	1
1e62c 130             | arg03
1e62c 130             | 	res	1
1e62c 131             | arg04
1e62c 131             | 	res	1
1e62c 132             | arg05
1e62c 132             | 	res	1
1e62c 133             | arg06
1e62c 133             | 	res	1
1e62c 134             | arg07
1e62c 134             | 	res	1
1e62c 135             | local01
1e62c 135             | 	res	1
1e62c 136             | local02
1e62c 136             | 	res	1
1e62c 137             | local03
1e62c 137             | 	res	1
1e62c 138             | local04
1e62c 138             | 	res	1
1e62c 139             | local05
1e62c 139             | 	res	1
1e62c 13a             | local06
1e62c 13a             | 	res	1
1e62c 13b             | local07
1e62c 13b             | 	res	1
1e62c 13c             | local08
1e62c 13c             | 	res	1
1e62c 13d             | local09
1e62c 13d             | 	res	1
1e62c 13e             | local10
1e62c 13e             | 	res	1
1e62c 13f             | local11
1e62c 13f             | 	res	1
1e62c 140             | local12
1e62c 140             | 	res	1
1e62c 141             | local13
1e62c 141             | 	res	1
1e62c 142             | local14
1e62c 142             | 	res	1
1e62c 143             | local15
1e62c 143             | 	res	1
1e62c 144             | local16
1e62c 144             | 	res	1
1e62c 145             | local17
1e62c 145             | 	res	1
1e62c 146             | local18
1e62c 146             | 	res	1
1e62c 147             | local19
1e62c 147             | 	res	1
1e62c 148             | local20
1e62c 148             | 	res	1
1e62c 149             | local21
1e62c 149             | 	res	1
1e62c 14a             | local22
1e62c 14a             | 	res	1
1e62c 14b             | local23
1e62c 14b             | 	res	1
1e62c 14c             | local24
1e62c 14c             | 	res	1
1e62c 14d             | local25
1e62c 14d             | 	res	1
1e62c 14e             | local26
1e62c 14e             | 	res	1
1e62c 14f             | local27
1e62c 14f             | 	res	1
1e62c 150             | local28
1e62c 150             | 	res	1
1e62c 151             | local29
1e62c 151             | 	res	1
1e62c 152             | local30
1e62c 152             | 	res	1
1e62c 153             | local31
1e62c 153             | 	res	1
1e62c 154             | local32
1e62c 154             | 	res	1
1e62c 155             | local33
1e62c 155             | 	res	1
1e62c 156             | local34
1e62c 156             | 	res	1
1e62c 157             | local35
1e62c 157             | 	res	1
1e62c 158             | local36
1e62c 158             | 	res	1
1e62c 159             | local37
1e62c 159             | 	res	1
1e62c 15a             | local38
1e62c 15a             | 	res	1
1e62c 15b             | local39
1e62c 15b             | 	res	1
1e62c 15c             | local40
1e62c 15c             | 	res	1
1e62c 15d             | local41
1e62c 15d             | 	res	1
1e62c 15e             | local42
1e62c 15e             | 	res	1
1e62c 15f             | local43
1e62c 15f             | 	res	1
1e62c 160             | local44
1e62c 160             | 	res	1
1e62c 161             | local45
1e62c 161             | 	res	1
1e62c 162             | local46
1e62c 162             | 	res	1
1e62c 163             | local47
1e62c 163             | 	res	1
1e62c 164             | local48
1e62c 164             | 	res	1
1e62c 165             | local49
1e62c 165             | 	res	1
1e62c 166             | local50
1e62c 166             | 	res	1
1e62c 167             | local51
1e62c 167             | 	res	1
1e62c 168             | local52
1e62c 168             | 	res	1
1e62c 169             | local53
1e62c 169             | 	res	1
1e62c 16a             | local54
1e62c 16a             | 	res	1
1e62c 16b             | local55
1e62c 16b             | 	res	1
1e62c 16c             | local56
1e62c 16c             | 	res	1
1e62c 16d             | local57
1e62c 16d             | 	res	1
1e62c 16e             | local58
1e62c 16e             | 	res	1
1e62c 16f             | local59
1e62c 16f             | 	res	1
1e62c 170             | local60
1e62c 170             | 	res	1
1e62c 171             | local61
1e62c 171             | 	res	1
1e62c 172             | local62
1e62c 172             | 	res	1
1e62c 173             | local63
1e62c 173             | 	res	1
1e62c 174             | local64
1e62c 174             | 	res	1
1e62c 175             | local65
1e62c 175             | 	res	1
1e62c 176             | local66
1e62c 176             | 	res	1
1e62c 177             | local67
1e62c 177             | 	res	1
1e62c 178             | local68
1e62c 178             | 	res	1
1e62c 179             | local69
1e62c 179             | 	res	1
1e62c 17a             | local70
1e62c 17a             | 	res	1
1e62c 17b             | local71
1e62c 17b             | 	res	1
1e62c 17c             | local72
1e62c 17c             | 	res	1
1e62c 17d             | local73
1e62c 17d             | 	res	1
1e62c 17e             | local74
1e62c 17e             | 	res	1
1e62c 17f             | local75
1e62c 17f             | 	res	1
1e62c 180             | local76
1e62c 180             | 	res	1
1e62c 181             | local77
1e62c 181             | 	res	1
1e62c 182             | local78
1e62c 182             | 	res	1
1e62c 183             | local79
1e62c 183             | 	res	1
1e62c 184             | local80
1e62c 184             | 	res	1
1e62c 185             | muldiva_
1e62c 185             | 	res	1
1e62c 186             | muldivb_
1e62c 186             | 	res	1
1e62c 187             | 	fit	480
1e62c 187             | 
