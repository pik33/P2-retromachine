00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 2C F1 07 F1 | 	add	ptra, ##2348
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 B2 E1 80 FF 
00428 009 00 F0 65 FD | 	hubset	##29582584
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c B2 E1 00 FF 
00438 00d FB EC 07 F6 | 	mov	pa, ##29582587
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 19 92 8A FF 
00448 011 14 1E 6C FC | 	wrlong	##354693647, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 38 08 02 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 40 18 02 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 68 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 B0 7F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a D8 05 02 00 | 	long	@__system__dat_
00830 10b             | ptr__audio016_spin2_dat__
00830 10b D0 F6 01 00 | 	long	@_audio016_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 8C 81 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d 48 C1 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e AC 24 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 80 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 68 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 40 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 18 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 A8 33 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 AC E5 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     36 5A 05 F6 | 	mov	COUNT_, #54
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     9C 55 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     80 55 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     64 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     48 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     E4 1F B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     A8 53 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     78 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     70 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     3C 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     10 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     1C 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     D8 56 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     FC 17 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     02 00 00 FF 
00ac8     30 0F 06 F1 | 	add	objptr, ##1328
00acc     07 01 69 FC | 	wrlong	#128, objptr
00ad0     04 0E 06 F1 | 	add	objptr, #4
00ad4     07 7B 68 FC | 	wrlong	#61, objptr
00ad8     04 0E 06 F1 | 	add	objptr, #4
00adc     07 79 68 FC | 	wrlong	#60, objptr
00ae0     04 0E 06 F1 | 	add	objptr, #4
00ae4     07 77 68 FC | 	wrlong	#59, objptr
00ae8     04 0E 06 F1 | 	add	objptr, #4
00aec     07 75 68 FC | 	wrlong	#58, objptr
00af0     04 0E 06 F1 | 	add	objptr, #4
00af4     07 07 68 FC | 	wrlong	#3, objptr
00af8     40 00 00 FF 
00afc     61 7D 06 F6 | 	mov	local10, ##@LR__0453
00b00     01 00 00 FF 
00b04     A4 0F 06 F1 | 	add	objptr, ##932
00b08     07 7D 62 FC | 	wrlong	local10, objptr
00b0c     04 00 00 FF 
00b10     E8 0E 86 F1 | 	sub	objptr, ##2280
00b14     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00b18     3F 5D 02 F6 | 	mov	arg01, local11
00b1c     44 FD BF FD | 	call	#_addr
00b20     04 00 00 FF 
00b24     EC 0E 06 F1 | 	add	objptr, ##2284
00b28     07 2B 62 FC | 	wrlong	result1, objptr
00b2c     15 5D 02 F6 | 	mov	arg01, result1
00b30     00 5E 06 F6 | 	mov	arg02, #0
00b34     01 00 00 FF 
00b38     A4 0F 86 F1 | 	sub	objptr, ##932
00b3c     10 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b40     01 5E 06 F6 | 	mov	arg02, #1
00b44                 | ' 
00b44                 | ' ''---------- Set the (x,y) position of cursor
00b44                 | ' 
00b44                 | ' cursor_x:=x
00b44     02 00 00 FF 
00b48     14 0F 86 F1 | 	sub	objptr, ##1300
00b4c     07 03 48 FC | 	wrbyte	#1, objptr
00b50                 | ' cursor_y:=y
00b50     01 0E 06 F1 | 	add	objptr, #1
00b54     07 03 48 FC | 	wrbyte	#1, objptr
00b58                 | ' 
00b58                 | ' emptystr$="                      "
00b58                 | ' 
00b58                 | ' ma=addr(module)
00b58                 | ' tracker.initmodule(ma,0)
00b58                 | ' 
00b58                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b58     04 00 00 FF 
00b5c     B7 0E 06 F1 | 	add	objptr, ##2231
00b60     07 81 02 FB | 	rdlong	local12, objptr
00b64     40 83 02 F6 | 	mov	local13, local12
00b68     04 00 00 FF 
00b6c     EC 0E 86 F1 | 	sub	objptr, ##2284
00b70     14 82 06 F1 | 	add	local13, #20
00b74                 | LR__0001
00b74     41 81 5A F2 | 	cmps	local12, local13 wcz
00b78     44 00 90 3D |  if_ae	jmp	#LR__0002
00b7c     00 5C 06 F6 | 	mov	arg01, #0
00b80     B4 69 B0 FD | 	call	#__system___getiolock_0145
00b84     15 5D 02 F6 | 	mov	arg01, result1
00b88     68 53 B0 FD | 	call	#__system___lockmem
00b8c     00 84 06 F6 | 	mov	local14, #0
00b90                 | ' asm
00b90     40 2B C2 FA | 	rdbyte	result1, local12
00b94                 | ' return r
00b94     15 5F 02 F6 | 	mov	arg02, result1
00b98     07 5E 46 F7 | 	zerox	arg02, #7
00b9c     00 5C 06 F6 | 	mov	arg01, #0
00ba0     00 60 06 F6 | 	mov	arg03, #0
00ba4     98 56 B0 FD | 	call	#__system___basic_print_char
00ba8     00 5C 06 F6 | 	mov	arg01, #0
00bac     88 69 B0 FD | 	call	#__system___getiolock_0145
00bb0     15 01 68 FC | 	wrlong	#0, result1
00bb4     00 2A 06 F6 | 	mov	result1, #0
00bb8     01 80 06 F1 | 	add	local12, #1
00bbc     B4 FF 9F FD | 	jmp	#LR__0001
00bc0                 | LR__0002
00bc0     04 00 00 FF 
00bc4     F0 0E 06 F1 | 	add	objptr, ##2288
00bc8     07 1F 68 FC | 	wrlong	#15, objptr
00bcc                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00bcc     00 7C 06 F6 | 	mov	local10, #0
00bd0     04 0E 86 F1 | 	sub	objptr, #4
00bd4     07 5D 02 FB | 	rdlong	arg01, objptr
00bd8     02 00 00 FF 
00bdc     38 5C 06 F1 | 	add	arg01, ##1080
00be0                 | ' asm
00be0     2E 87 C2 FA | 	rdbyte	local15, arg01
00be4                 | ' return r
00be4     07 86 46 F7 | 	zerox	local15, #7
00be8     4D 86 0E F2 | 	cmp	local15, #77 wz
00bec     01 7C 66 A6 |  if_e	neg	local10, #1
00bf0     00 88 06 F6 | 	mov	local16, #0
00bf4     07 5D 02 FB | 	rdlong	arg01, objptr
00bf8     04 00 00 FF 
00bfc     EC 0E 86 F1 | 	sub	objptr, ##2284
00c00     02 00 00 FF 
00c04     3A 5C 06 F1 | 	add	arg01, ##1082
00c08                 | ' asm
00c08     2E 2B C2 FA | 	rdbyte	result1, arg01
00c0c                 | ' return r
00c0c     15 8B 02 F6 | 	mov	local17, result1
00c10     07 8A 46 F7 | 	zerox	local17, #7
00c14     4B 8A 0E F2 | 	cmp	local17, #75 wz
00c18     01 88 66 A6 |  if_e	neg	local16, #1
00c1c     44 7D CA F7 | 	test	local10, local16 wz
00c20     04 00 00 5F 
00c24     F0 0E 06 51 |  if_ne	add	objptr, ##2288
00c28     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00c2c     04 00 00 5F 
00c30     F0 0E 86 51 |  if_ne	sub	objptr, ##2288
00c34     02 5E 06 F6 | 	mov	arg02, #2
00c38                 | ' 
00c38                 | ' ''---------- Set the (x,y) position of cursor
00c38                 | ' 
00c38                 | ' cursor_x:=x
00c38     34 0E 06 F1 | 	add	objptr, #52
00c3c     07 03 48 FC | 	wrbyte	#1, objptr
00c40                 | ' cursor_y:=y
00c40     01 0E 06 F1 | 	add	objptr, #1
00c44     07 05 48 FC | 	wrbyte	#2, objptr
00c48     35 0E 86 F1 | 	sub	objptr, #53
00c4c                 | ' position 1,2 : print samples;" ";"samples module"
00c4c     00 5C 06 F6 | 	mov	arg01, #0
00c50     E4 68 B0 FD | 	call	#__system___getiolock_0145
00c54     15 5D 02 F6 | 	mov	arg01, result1
00c58     98 52 B0 FD | 	call	#__system___lockmem
00c5c     00 2A 06 F6 | 	mov	result1, #0
00c60     04 00 00 FF 
00c64     F0 0E 06 F1 | 	add	objptr, ##2288
00c68     07 5F 02 FB | 	rdlong	arg02, objptr
00c6c     04 00 00 FF 
00c70     F0 0E 86 F1 | 	sub	objptr, ##2288
00c74     00 5C 06 F6 | 	mov	arg01, #0
00c78     00 60 06 F6 | 	mov	arg03, #0
00c7c     0A 62 06 F6 | 	mov	arg04, #10
00c80     50 56 B0 FD | 	call	#__system___basic_print_integer
00c84     40 00 00 FF 
00c88     78 5F 06 F6 | 	mov	arg02, ##@LR__0454
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     00 60 06 F6 | 	mov	arg03, #0
00c94     F4 55 B0 FD | 	call	#__system___basic_print_string
00c98     40 00 00 FF 
00c9c     7A 5F 06 F6 | 	mov	arg02, ##@LR__0455
00ca0     00 5C 06 F6 | 	mov	arg01, #0
00ca4     00 60 06 F6 | 	mov	arg03, #0
00ca8     E0 55 B0 FD | 	call	#__system___basic_print_string
00cac     00 5C 06 F6 | 	mov	arg01, #0
00cb0     0A 5E 06 F6 | 	mov	arg02, #10
00cb4     00 60 06 F6 | 	mov	arg03, #0
00cb8     84 55 B0 FD | 	call	#__system___basic_print_char
00cbc     01 2A 06 F6 | 	mov	result1, #1
00cc0     00 5C 06 F6 | 	mov	arg01, #0
00cc4     70 68 B0 FD | 	call	#__system___getiolock_0145
00cc8     15 01 68 FC | 	wrlong	#0, result1
00ccc     00 2A 06 F6 | 	mov	result1, #0
00cd0     04 00 00 FF 
00cd4     EC 0E 06 F1 | 	add	objptr, ##2284
00cd8     07 8D 02 FB | 	rdlong	local18, objptr
00cdc     04 0E 06 F1 | 	add	objptr, #4
00ce0     07 8F 02 FB | 	rdlong	local19, objptr
00ce4     04 5E 06 F6 | 	mov	arg02, #4
00ce8                 | ' 
00ce8                 | ' ''---------- Set the (x,y) position of cursor
00ce8                 | ' 
00ce8                 | ' cursor_x:=x
00ce8     04 00 00 FF 
00cec     BC 0E 86 F1 | 	sub	objptr, ##2236
00cf0     07 03 48 FC | 	wrbyte	#1, objptr
00cf4                 | ' cursor_y:=y
00cf4     01 0E 06 F1 | 	add	objptr, #1
00cf8     07 09 48 FC | 	wrbyte	#4, objptr
00cfc     35 0E 86 F1 | 	sub	objptr, #53
00d00                 | ' 'v030. setwritecolors(170,147):
00d00                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00d00     00 5C 06 F6 | 	mov	arg01, #0
00d04     30 68 B0 FD | 	call	#__system___getiolock_0145
00d08     15 5D 02 F6 | 	mov	arg01, result1
00d0c     E4 51 B0 FD | 	call	#__system___lockmem
00d10     00 2A 06 F6 | 	mov	result1, #0
00d14     40 00 00 FF 
00d18     F6 5E 06 F6 | 	mov	arg02, ##@LR__0451
00d1c     00 5C 06 F6 | 	mov	arg01, #0
00d20     00 60 06 F6 | 	mov	arg03, #0
00d24     64 55 B0 FD | 	call	#__system___basic_print_string
00d28     00 5C 06 F6 | 	mov	arg01, #0
00d2c     0A 5E 06 F6 | 	mov	arg02, #10
00d30     00 60 06 F6 | 	mov	arg03, #0
00d34     08 55 B0 FD | 	call	#__system___basic_print_char
00d38     01 2A 06 F6 | 	mov	result1, #1
00d3c     00 5C 06 F6 | 	mov	arg01, #0
00d40     F4 67 B0 FD | 	call	#__system___getiolock_0145
00d44     15 01 68 FC | 	wrlong	#0, result1
00d48     00 2A 06 F6 | 	mov	result1, #0
00d4c     04 00 00 FF 
00d50     64 0E 06 F1 | 	add	objptr, ##2148
00d54     07 91 02 F6 | 	mov	local20, objptr
00d58     00 92 06 F6 | 	mov	local21, #0
00d5c     04 00 00 FF 
00d60     64 0E 86 F1 | 	sub	objptr, ##2148
00d64                 | LR__0003
00d64     40 00 00 FF 
00d68     5F 95 06 F6 | 	mov	local22, ##@LR__0452
00d6c     49 97 02 F6 | 	mov	local23, local21
00d70     02 5E 06 F6 | 	mov	arg02, #2
00d74     0A 60 06 F6 | 	mov	arg03, #10
00d78     02 98 0E F6 | 	mov	local24, #2 wz
00d7c     34 00 90 FD | 	jmp	#LR__0006
00d80                 | LR__0004
00d80     00 9A 06 F6 | 	mov	local25, #0
00d84     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d88     01 9A 66 E6 |  if_be	neg	local25, #1
00d8c     00 9E 06 F6 | 	mov	local27, #0
00d90     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d94     01 9E 66 C6 |  if_b	neg	local27, #1
00d98     4F 9B CA F7 | 	test	local25, local27 wz
00d9c     14 00 90 AD |  if_e	jmp	#LR__0005
00da0     4E A1 02 F6 | 	mov	local28, local26
00da4     0A 9C 06 FD | 	qmul	local26, #10
00da8     18 9C 62 FD | 	getqx	local26
00dac     01 98 06 F1 | 	add	local24, #1
00db0     CC FF 9F FD | 	jmp	#LR__0004
00db4                 | LR__0005
00db4                 | LR__0006
00db4     20 98 3E F3 | 	fle	local24, #32 wcz
00db8     4C 5D 02 F6 | 	mov	arg01, local24
00dbc     02 5C 06 F1 | 	add	arg01, #2
00dc0     64 5D B0 FD | 	call	#__system___gc_alloc_managed
00dc4     15 A3 02 F6 | 	mov	local29, result1
00dc8     4C A5 02 F6 | 	mov	local30, local24
00dcc     51 A5 02 F1 | 	add	local30, local29
00dd0     52 01 48 FC | 	wrbyte	#0, local30
00dd4     64 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00dd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ddc                 | LR__0007
00ddc     00 98 1E F2 | 	cmp	local24, #0 wcz
00de0     34 00 90 ED |  if_be	jmp	#LR__0009
00de4     01 98 86 F1 | 	sub	local24, #1
00de8     4B 0B 03 F6 | 	mov	muldiva_, local23
00dec     0A 0C 07 F6 | 	mov	muldivb_, #10
00df0     CC 00 A0 FD | 	call	#unsdivide_
00df4     85 A7 02 F6 | 	mov	local31, muldiva_
00df8     86 97 02 F6 | 	mov	local23, muldivb_
00dfc     0A A6 1E F2 | 	cmp	local31, #10 wcz
00e00     30 A6 06 C1 |  if_b	add	local31, #48
00e04     37 A6 06 31 |  if_ae	add	local31, #55
00e08     4C A9 02 F6 | 	mov	local32, local24
00e0c     51 A9 02 F1 | 	add	local32, local29
00e10     54 A7 42 FC | 	wrbyte	local31, local32
00e14     C4 FF 9F FD | 	jmp	#LR__0007
00e18                 | LR__0008
00e18                 | LR__0009
00e18     51 2B 02 F6 | 	mov	result1, local29
00e1c     15 5F 02 F6 | 	mov	arg02, result1
00e20     4A 5D 02 F6 | 	mov	arg01, local22
00e24     04 51 B0 FD | 	call	#__system___string_concat
00e28     15 AB 02 F6 | 	mov	local33, result1
00e2c     13 5C 06 F6 | 	mov	arg01, #19
00e30     40 00 00 FF 
00e34     A0 5E 06 F6 | 	mov	arg02, ##@LR__0445
00e38     5C 59 B0 FD | 	call	#__system__String_S
00e3c     15 5F 02 F6 | 	mov	arg02, result1
00e40     55 5D 02 F6 | 	mov	arg01, local33
00e44     E4 50 B0 FD | 	call	#__system___string_concat
00e48     48 2B 62 FC | 	wrlong	result1, local20
00e4c     01 92 06 F1 | 	add	local21, #1
00e50     04 90 06 F1 | 	add	local20, #4
00e54     20 92 5E F2 | 	cmps	local21, #32 wcz
00e58     08 FF 9F CD |  if_b	jmp	#LR__0003
00e5c                 | ' for i=1 to num
00e5c     01 92 06 F6 | 	mov	local21, #1
00e60     01 8E 06 F1 | 	add	local19, #1
00e64     46 AD 02 F6 | 	mov	local34, local18
00e68     14 AC 06 F1 | 	add	local34, #20
00e6c     00 AE 06 F6 | 	mov	local35, #0
00e70     04 00 00 FF 
00e74     68 0E 06 F1 | 	add	objptr, ##2152
00e78     07 B1 02 F6 | 	mov	local36, objptr
00e7c     14 8C 06 F1 | 	add	local18, #20
00e80     00 B2 06 F6 | 	mov	local37, #0
00e84     04 00 00 FF 
00e88     68 0E 86 F1 | 	sub	objptr, ##2152
00e8c                 | LR__0010
00e8c     47 93 5A F2 | 	cmps	local21, local19 wcz
00e90     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e94     56 B5 02 F6 | 	mov	local38, local34
00e98     57 B5 02 F1 | 	add	local38, local35
00e9c     00 B6 06 F6 | 	mov	local39, #0
00ea0                 | LR__0011
00ea0     58 5D 02 F6 | 	mov	arg01, local36
00ea4     BC F9 BF FD | 	call	#_addr
00ea8                 | ' asm
00ea8     15 B9 02 FB | 	rdlong	local40, result1
00eac                 | ' return r
00eac     04 00 00 FF 
00eb0     10 0F 06 F1 | 	add	objptr, ##2320
00eb4     07 B9 62 FC | 	wrlong	local40, objptr
00eb8     5A 5D 02 F6 | 	mov	arg01, local38
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0                 | ' asm
00ec0     2E 2B C2 FA | 	rdbyte	result1, arg01
00ec4                 | ' return r
00ec4     15 95 02 F6 | 	mov	local22, result1
00ec8     07 94 46 F7 | 	zerox	local22, #7
00ecc     04 0E 06 F1 | 	add	objptr, #4
00ed0     07 95 62 FC | 	wrlong	local22, objptr
00ed4                 | '     a=lpeek(addr(sn$(i)))
00ed4                 | '     b=(peek(ma+20+30*(i-1)+j))
00ed4                 | '     if b>=32 then poke a+j,b
00ed4     04 00 00 FF 
00ed8     14 0F 86 F1 | 	sub	objptr, ##2324
00edc     20 94 5E F2 | 	cmps	local22, #32 wcz
00ee0     24 00 90 CD |  if_b	jmp	#LR__0012
00ee4     04 00 00 FF 
00ee8     10 0F 06 F1 | 	add	objptr, ##2320
00eec     07 5D 02 FB | 	rdlong	arg01, objptr
00ef0     5B 5D 02 F1 | 	add	arg01, local39
00ef4     04 0E 06 F1 | 	add	objptr, #4
00ef8     07 5F 02 FB | 	rdlong	arg02, objptr
00efc     04 00 00 FF 
00f00     14 0F 86 F1 | 	sub	objptr, ##2324
00f04                 | ' asm
00f04     2E 5F 42 FC | 	wrbyte	arg02, arg01
00f08                 | LR__0012
00f08     01 B6 06 F1 | 	add	local39, #1
00f0c     16 B6 5E F2 | 	cmps	local39, #22 wcz
00f10     8C FF 9F CD |  if_b	jmp	#LR__0011
00f14     46 BB 02 F6 | 	mov	local41, local18
00f18     59 BB 02 F1 | 	add	local41, local37
00f1c     5D 5D 02 F6 | 	mov	arg01, local41
00f20     16 5C 06 F1 | 	add	arg01, #22
00f24     5D BD 02 F6 | 	mov	local42, local41
00f28     17 BC 06 F1 | 	add	local42, #23
00f2c                 | ' asm
00f2c     2E AB C2 FA | 	rdbyte	local33, arg01
00f30                 | ' return r
00f30     07 AA 46 F7 | 	zerox	local33, #7
00f34     08 AA 66 F0 | 	shl	local33, #8
00f38                 | ' asm
00f38     5E BF C2 FA | 	rdbyte	local43, local42
00f3c                 | ' return r
00f3c     07 BE 46 F7 | 	zerox	local43, #7
00f40     5F AB 02 F1 | 	add	local33, local43
00f44     01 AA 66 F0 | 	shl	local33, #1
00f48     04 00 00 FF 
00f4c     18 0F 06 F1 | 	add	objptr, ##2328
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1A 5C 06 F1 | 	add	arg01, #26
00f5c     5D C1 02 F6 | 	mov	local44, local41
00f60     1B C0 06 F1 | 	add	local44, #27
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     60 BF C2 FA | 	rdbyte	local43, local44
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     1C 5C 06 F1 | 	add	arg01, #28
00f90     5D C3 02 F6 | 	mov	local45, local41
00f94     1D C2 06 F1 | 	add	local45, #29
00f98                 | ' asm
00f98     2E AB C2 FA | 	rdbyte	local33, arg01
00f9c                 | ' return r
00f9c     07 AA 46 F7 | 	zerox	local33, #7
00fa0     08 AA 66 F0 | 	shl	local33, #8
00fa4                 | ' asm
00fa4     61 BF C2 FA | 	rdbyte	local43, local45
00fa8                 | ' return r
00fa8     07 BE 46 F7 | 	zerox	local43, #7
00fac     5F AB 02 F1 | 	add	local33, local43
00fb0     01 AA 66 F0 | 	shl	local33, #1
00fb4     04 0E 06 F1 | 	add	objptr, #4
00fb8     07 AB 62 FC | 	wrlong	local33, objptr
00fbc     5D 5D 02 F6 | 	mov	arg01, local41
00fc0     18 5C 06 F1 | 	add	arg01, #24
00fc4                 | ' asm
00fc4     2E 95 C2 FA | 	rdbyte	local22, arg01
00fc8                 | ' return r
00fc8     07 94 46 F7 | 	zerox	local22, #7
00fcc     04 0E 06 F1 | 	add	objptr, #4
00fd0     07 95 62 FC | 	wrlong	local22, objptr
00fd4     19 BA 06 F1 | 	add	local41, #25
00fd8                 | ' asm
00fd8     5D 2B C2 FA | 	rdbyte	result1, local41
00fdc                 | ' return r
00fdc     15 95 02 F6 | 	mov	local22, result1
00fe0     07 94 46 F7 | 	zerox	local22, #7
00fe4     04 0E 06 F1 | 	add	objptr, #4
00fe8     07 95 62 FC | 	wrlong	local22, objptr
00fec     04 00 00 FF 
00ff0     28 0F 86 F1 | 	sub	objptr, ##2344
00ff4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ff4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ff4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ff4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ff4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ff4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ff4     10 92 5E F2 | 	cmps	local21, #16 wcz
00ff8     C4 02 90 3D |  if_ae	jmp	#LR__0013
00ffc     05 C4 06 F6 | 	mov	local46, #5
01000     49 C5 02 F1 | 	add	local46, local21
01004     62 5F 02 F6 | 	mov	arg02, local46
01008                 | ' 
01008                 | ' ''---------- Set the (x,y) position of cursor
01008                 | ' 
01008                 | ' cursor_x:=x
01008     34 0E 06 F1 | 	add	objptr, #52
0100c     07 03 48 FC | 	wrbyte	#1, objptr
01010                 | ' cursor_y:=y
01010     01 0E 06 F1 | 	add	objptr, #1
01014     07 5F 42 FC | 	wrbyte	arg02, objptr
01018     49 C7 02 F6 | 	mov	local47, local21
0101c     02 C6 66 F0 | 	shl	local47, #2
01020     04 00 00 FF 
01024     2F 0E 06 F1 | 	add	objptr, ##2095
01028     07 C7 02 F1 | 	add	local47, objptr
0102c     00 5C 06 F6 | 	mov	arg01, #0
01030     04 00 00 FF 
01034     64 0E 86 F1 | 	sub	objptr, ##2148
01038     FC 64 B0 FD | 	call	#__system___getiolock_0145
0103c     15 5D 02 F6 | 	mov	arg01, result1
01040     B0 4E B0 FD | 	call	#__system___lockmem
01044     00 2A 06 F6 | 	mov	result1, #0
01048     63 5F 02 FB | 	rdlong	arg02, local47
0104c     00 5C 06 F6 | 	mov	arg01, #0
01050     00 60 06 F6 | 	mov	arg03, #0
01054     34 52 B0 FD | 	call	#__system___basic_print_string
01058     00 5C 06 F6 | 	mov	arg01, #0
0105c     0A 5E 06 F6 | 	mov	arg02, #10
01060     00 60 06 F6 | 	mov	arg03, #0
01064     D8 51 B0 FD | 	call	#__system___basic_print_char
01068     01 2A 06 F6 | 	mov	result1, #1
0106c     00 5C 06 F6 | 	mov	arg01, #0
01070     C4 64 B0 FD | 	call	#__system___getiolock_0145
01074     15 01 68 FC | 	wrlong	#0, result1
01078     00 2A 06 F6 | 	mov	result1, #0
0107c     62 5F 02 F6 | 	mov	arg02, local46
01080                 | ' 
01080                 | ' ''---------- Set the (x,y) position of cursor
01080                 | ' 
01080                 | ' cursor_x:=x
01080     34 0E 06 F1 | 	add	objptr, #52
01084     07 31 48 FC | 	wrbyte	#24, objptr
01088                 | ' cursor_y:=y
01088     01 0E 06 F1 | 	add	objptr, #1
0108c     07 5F 42 FC | 	wrbyte	arg02, objptr
01090     35 0E 86 F1 | 	sub	objptr, #53
01094     00 5C 06 F6 | 	mov	arg01, #0
01098     9C 64 B0 FD | 	call	#__system___getiolock_0145
0109c     15 5D 02 F6 | 	mov	arg01, result1
010a0     50 4E B0 FD | 	call	#__system___lockmem
010a4     00 2A 06 F6 | 	mov	result1, #0
010a8     04 00 00 FF 
010ac     18 0F 06 F1 | 	add	objptr, ##2328
010b0     07 5F 02 FB | 	rdlong	arg02, objptr
010b4     04 00 00 FF 
010b8     18 0F 86 F1 | 	sub	objptr, ##2328
010bc     00 5C 06 F6 | 	mov	arg01, #0
010c0     00 60 06 F6 | 	mov	arg03, #0
010c4     0A 62 06 F6 | 	mov	arg04, #10
010c8     08 52 B0 FD | 	call	#__system___basic_print_integer
010cc     00 5C 06 F6 | 	mov	arg01, #0
010d0     0A 5E 06 F6 | 	mov	arg02, #10
010d4     00 60 06 F6 | 	mov	arg03, #0
010d8     64 51 B0 FD | 	call	#__system___basic_print_char
010dc     01 2A 06 F6 | 	mov	result1, #1
010e0     00 5C 06 F6 | 	mov	arg01, #0
010e4     50 64 B0 FD | 	call	#__system___getiolock_0145
010e8     15 01 68 FC | 	wrlong	#0, result1
010ec     00 2A 06 F6 | 	mov	result1, #0
010f0     62 5F 02 F6 | 	mov	arg02, local46
010f4                 | ' 
010f4                 | ' ''---------- Set the (x,y) position of cursor
010f4                 | ' 
010f4                 | ' cursor_x:=x
010f4     34 0E 06 F1 | 	add	objptr, #52
010f8     07 3F 48 FC | 	wrbyte	#31, objptr
010fc                 | ' cursor_y:=y
010fc     01 0E 06 F1 | 	add	objptr, #1
01100     07 5F 42 FC | 	wrbyte	arg02, objptr
01104     35 0E 86 F1 | 	sub	objptr, #53
01108     00 5C 06 F6 | 	mov	arg01, #0
0110c     28 64 B0 FD | 	call	#__system___getiolock_0145
01110     15 5D 02 F6 | 	mov	arg01, result1
01114     DC 4D B0 FD | 	call	#__system___lockmem
01118     00 2A 06 F6 | 	mov	result1, #0
0111c     04 00 00 FF 
01120     24 0F 06 F1 | 	add	objptr, ##2340
01124     07 5F 02 FB | 	rdlong	arg02, objptr
01128     04 00 00 FF 
0112c     24 0F 86 F1 | 	sub	objptr, ##2340
01130     00 5C 06 F6 | 	mov	arg01, #0
01134     00 60 06 F6 | 	mov	arg03, #0
01138     0A 62 06 F6 | 	mov	arg04, #10
0113c     94 51 B0 FD | 	call	#__system___basic_print_integer
01140     00 5C 06 F6 | 	mov	arg01, #0
01144     0A 5E 06 F6 | 	mov	arg02, #10
01148     00 60 06 F6 | 	mov	arg03, #0
0114c     F0 50 B0 FD | 	call	#__system___basic_print_char
01150     01 2A 06 F6 | 	mov	result1, #1
01154     00 5C 06 F6 | 	mov	arg01, #0
01158     DC 63 B0 FD | 	call	#__system___getiolock_0145
0115c     15 01 68 FC | 	wrlong	#0, result1
01160     00 2A 06 F6 | 	mov	result1, #0
01164     62 5F 02 F6 | 	mov	arg02, local46
01168                 | ' 
01168                 | ' ''---------- Set the (x,y) position of cursor
01168                 | ' 
01168                 | ' cursor_x:=x
01168     34 0E 06 F1 | 	add	objptr, #52
0116c     07 45 48 FC | 	wrbyte	#34, objptr
01170                 | ' cursor_y:=y
01170     01 0E 06 F1 | 	add	objptr, #1
01174     07 5F 42 FC | 	wrbyte	arg02, objptr
01178     35 0E 86 F1 | 	sub	objptr, #53
0117c     00 5C 06 F6 | 	mov	arg01, #0
01180     B4 63 B0 FD | 	call	#__system___getiolock_0145
01184     15 5D 02 F6 | 	mov	arg01, result1
01188     68 4D B0 FD | 	call	#__system___lockmem
0118c     00 2A 06 F6 | 	mov	result1, #0
01190     04 00 00 FF 
01194     28 0F 06 F1 | 	add	objptr, ##2344
01198     07 5F 02 FB | 	rdlong	arg02, objptr
0119c     04 00 00 FF 
011a0     28 0F 86 F1 | 	sub	objptr, ##2344
011a4     00 5C 06 F6 | 	mov	arg01, #0
011a8     00 60 06 F6 | 	mov	arg03, #0
011ac     0A 62 06 F6 | 	mov	arg04, #10
011b0     20 51 B0 FD | 	call	#__system___basic_print_integer
011b4     00 5C 06 F6 | 	mov	arg01, #0
011b8     0A 5E 06 F6 | 	mov	arg02, #10
011bc     00 60 06 F6 | 	mov	arg03, #0
011c0     7C 50 B0 FD | 	call	#__system___basic_print_char
011c4     01 2A 06 F6 | 	mov	result1, #1
011c8     00 5C 06 F6 | 	mov	arg01, #0
011cc     68 63 B0 FD | 	call	#__system___getiolock_0145
011d0     15 01 68 FC | 	wrlong	#0, result1
011d4     00 2A 06 F6 | 	mov	result1, #0
011d8     62 5F 02 F6 | 	mov	arg02, local46
011dc                 | ' 
011dc                 | ' ''---------- Set the (x,y) position of cursor
011dc                 | ' 
011dc                 | ' cursor_x:=x
011dc     34 0E 06 F1 | 	add	objptr, #52
011e0     07 4B 48 FC | 	wrbyte	#37, objptr
011e4                 | ' cursor_y:=y
011e4     01 0E 06 F1 | 	add	objptr, #1
011e8     07 5F 42 FC | 	wrbyte	arg02, objptr
011ec     35 0E 86 F1 | 	sub	objptr, #53
011f0     00 5C 06 F6 | 	mov	arg01, #0
011f4     40 63 B0 FD | 	call	#__system___getiolock_0145
011f8     15 5D 02 F6 | 	mov	arg01, result1
011fc     F4 4C B0 FD | 	call	#__system___lockmem
01200     00 2A 06 F6 | 	mov	result1, #0
01204     04 00 00 FF 
01208     1C 0F 06 F1 | 	add	objptr, ##2332
0120c     07 5F 02 FB | 	rdlong	arg02, objptr
01210     04 00 00 FF 
01214     1C 0F 86 F1 | 	sub	objptr, ##2332
01218     00 5C 06 F6 | 	mov	arg01, #0
0121c     00 60 06 F6 | 	mov	arg03, #0
01220     0A 62 06 F6 | 	mov	arg04, #10
01224     AC 50 B0 FD | 	call	#__system___basic_print_integer
01228     00 5C 06 F6 | 	mov	arg01, #0
0122c     0A 5E 06 F6 | 	mov	arg02, #10
01230     00 60 06 F6 | 	mov	arg03, #0
01234     08 50 B0 FD | 	call	#__system___basic_print_char
01238     01 2A 06 F6 | 	mov	result1, #1
0123c     00 5C 06 F6 | 	mov	arg01, #0
01240     F4 62 B0 FD | 	call	#__system___getiolock_0145
01244     15 01 68 FC | 	wrlong	#0, result1
01248     00 2A 06 F6 | 	mov	result1, #0
0124c     62 5F 02 F6 | 	mov	arg02, local46
01250                 | ' 
01250                 | ' ''---------- Set the (x,y) position of cursor
01250                 | ' 
01250                 | ' cursor_x:=x
01250     34 0E 06 F1 | 	add	objptr, #52
01254     07 57 48 FC | 	wrbyte	#43, objptr
01258                 | ' cursor_y:=y
01258     01 0E 06 F1 | 	add	objptr, #1
0125c     07 5F 42 FC | 	wrbyte	arg02, objptr
01260     35 0E 86 F1 | 	sub	objptr, #53
01264     00 5C 06 F6 | 	mov	arg01, #0
01268     CC 62 B0 FD | 	call	#__system___getiolock_0145
0126c     15 5D 02 F6 | 	mov	arg01, result1
01270     80 4C B0 FD | 	call	#__system___lockmem
01274     00 2A 06 F6 | 	mov	result1, #0
01278     04 00 00 FF 
0127c     20 0F 06 F1 | 	add	objptr, ##2336
01280     07 5F 02 FB | 	rdlong	arg02, objptr
01284     04 00 00 FF 
01288     20 0F 86 F1 | 	sub	objptr, ##2336
0128c     00 5C 06 F6 | 	mov	arg01, #0
01290     00 60 06 F6 | 	mov	arg03, #0
01294     0A 62 06 F6 | 	mov	arg04, #10
01298     38 50 B0 FD | 	call	#__system___basic_print_integer
0129c     00 5C 06 F6 | 	mov	arg01, #0
012a0     0A 5E 06 F6 | 	mov	arg02, #10
012a4     00 60 06 F6 | 	mov	arg03, #0
012a8     94 4F B0 FD | 	call	#__system___basic_print_char
012ac     01 2A 06 F6 | 	mov	result1, #1
012b0     00 5C 06 F6 | 	mov	arg01, #0
012b4     80 62 B0 FD | 	call	#__system___getiolock_0145
012b8     15 01 68 FC | 	wrlong	#0, result1
012bc     00 2A 06 F6 | 	mov	result1, #0
012c0                 | LR__0013
012c0                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
012c0     10 92 5E F2 | 	cmps	local21, #16 wcz
012c4     C4 02 90 CD |  if_b	jmp	#LR__0014
012c8     49 C9 02 F6 | 	mov	local48, local21
012cc     0B C8 86 F1 | 	sub	local48, #11
012d0     64 5F 02 F6 | 	mov	arg02, local48
012d4                 | ' 
012d4                 | ' ''---------- Set the (x,y) position of cursor
012d4                 | ' 
012d4                 | ' cursor_x:=x
012d4     34 0E 06 F1 | 	add	objptr, #52
012d8     07 73 48 FC | 	wrbyte	#57, objptr
012dc                 | ' cursor_y:=y
012dc     01 0E 06 F1 | 	add	objptr, #1
012e0     07 5F 42 FC | 	wrbyte	arg02, objptr
012e4     49 CB 02 F6 | 	mov	local49, local21
012e8     02 CA 66 F0 | 	shl	local49, #2
012ec     04 00 00 FF 
012f0     2F 0E 06 F1 | 	add	objptr, ##2095
012f4     07 CB 02 F1 | 	add	local49, objptr
012f8     00 5C 06 F6 | 	mov	arg01, #0
012fc     04 00 00 FF 
01300     64 0E 86 F1 | 	sub	objptr, ##2148
01304     30 62 B0 FD | 	call	#__system___getiolock_0145
01308     15 5D 02 F6 | 	mov	arg01, result1
0130c     E4 4B B0 FD | 	call	#__system___lockmem
01310     00 2A 06 F6 | 	mov	result1, #0
01314     65 5F 02 FB | 	rdlong	arg02, local49
01318     00 5C 06 F6 | 	mov	arg01, #0
0131c     00 60 06 F6 | 	mov	arg03, #0
01320     68 4F B0 FD | 	call	#__system___basic_print_string
01324     00 5C 06 F6 | 	mov	arg01, #0
01328     0A 5E 06 F6 | 	mov	arg02, #10
0132c     00 60 06 F6 | 	mov	arg03, #0
01330     0C 4F B0 FD | 	call	#__system___basic_print_char
01334     01 2A 06 F6 | 	mov	result1, #1
01338     00 5C 06 F6 | 	mov	arg01, #0
0133c     F8 61 B0 FD | 	call	#__system___getiolock_0145
01340     15 01 68 FC | 	wrlong	#0, result1
01344     00 2A 06 F6 | 	mov	result1, #0
01348     64 5F 02 F6 | 	mov	arg02, local48
0134c                 | ' 
0134c                 | ' ''---------- Set the (x,y) position of cursor
0134c                 | ' 
0134c                 | ' cursor_x:=x
0134c     34 0E 06 F1 | 	add	objptr, #52
01350     07 A1 48 FC | 	wrbyte	#80, objptr
01354                 | ' cursor_y:=y
01354     01 0E 06 F1 | 	add	objptr, #1
01358     07 5F 42 FC | 	wrbyte	arg02, objptr
0135c     35 0E 86 F1 | 	sub	objptr, #53
01360     00 5C 06 F6 | 	mov	arg01, #0
01364     D0 61 B0 FD | 	call	#__system___getiolock_0145
01368     15 5D 02 F6 | 	mov	arg01, result1
0136c     84 4B B0 FD | 	call	#__system___lockmem
01370     00 2A 06 F6 | 	mov	result1, #0
01374     04 00 00 FF 
01378     18 0F 06 F1 | 	add	objptr, ##2328
0137c     07 5F 02 FB | 	rdlong	arg02, objptr
01380     04 00 00 FF 
01384     18 0F 86 F1 | 	sub	objptr, ##2328
01388     00 5C 06 F6 | 	mov	arg01, #0
0138c     00 60 06 F6 | 	mov	arg03, #0
01390     0A 62 06 F6 | 	mov	arg04, #10
01394     3C 4F B0 FD | 	call	#__system___basic_print_integer
01398     00 5C 06 F6 | 	mov	arg01, #0
0139c     0A 5E 06 F6 | 	mov	arg02, #10
013a0     00 60 06 F6 | 	mov	arg03, #0
013a4     98 4E B0 FD | 	call	#__system___basic_print_char
013a8     01 2A 06 F6 | 	mov	result1, #1
013ac     00 5C 06 F6 | 	mov	arg01, #0
013b0     84 61 B0 FD | 	call	#__system___getiolock_0145
013b4     15 01 68 FC | 	wrlong	#0, result1
013b8     00 2A 06 F6 | 	mov	result1, #0
013bc     64 5F 02 F6 | 	mov	arg02, local48
013c0                 | ' 
013c0                 | ' ''---------- Set the (x,y) position of cursor
013c0                 | ' 
013c0                 | ' cursor_x:=x
013c0     34 0E 06 F1 | 	add	objptr, #52
013c4     07 AF 48 FC | 	wrbyte	#87, objptr
013c8                 | ' cursor_y:=y
013c8     01 0E 06 F1 | 	add	objptr, #1
013cc     07 5F 42 FC | 	wrbyte	arg02, objptr
013d0     35 0E 86 F1 | 	sub	objptr, #53
013d4     00 5C 06 F6 | 	mov	arg01, #0
013d8     5C 61 B0 FD | 	call	#__system___getiolock_0145
013dc     15 5D 02 F6 | 	mov	arg01, result1
013e0     10 4B B0 FD | 	call	#__system___lockmem
013e4     00 2A 06 F6 | 	mov	result1, #0
013e8     04 00 00 FF 
013ec     24 0F 06 F1 | 	add	objptr, ##2340
013f0     07 5F 02 FB | 	rdlong	arg02, objptr
013f4     04 00 00 FF 
013f8     24 0F 86 F1 | 	sub	objptr, ##2340
013fc     00 5C 06 F6 | 	mov	arg01, #0
01400     00 60 06 F6 | 	mov	arg03, #0
01404     0A 62 06 F6 | 	mov	arg04, #10
01408     C8 4E B0 FD | 	call	#__system___basic_print_integer
0140c     00 5C 06 F6 | 	mov	arg01, #0
01410     0A 5E 06 F6 | 	mov	arg02, #10
01414     00 60 06 F6 | 	mov	arg03, #0
01418     24 4E B0 FD | 	call	#__system___basic_print_char
0141c     01 2A 06 F6 | 	mov	result1, #1
01420     00 5C 06 F6 | 	mov	arg01, #0
01424     10 61 B0 FD | 	call	#__system___getiolock_0145
01428     15 01 68 FC | 	wrlong	#0, result1
0142c     00 2A 06 F6 | 	mov	result1, #0
01430     64 5F 02 F6 | 	mov	arg02, local48
01434                 | ' 
01434                 | ' ''---------- Set the (x,y) position of cursor
01434                 | ' 
01434                 | ' cursor_x:=x
01434     34 0E 06 F1 | 	add	objptr, #52
01438     07 B5 48 FC | 	wrbyte	#90, objptr
0143c                 | ' cursor_y:=y
0143c     01 0E 06 F1 | 	add	objptr, #1
01440     07 5F 42 FC | 	wrbyte	arg02, objptr
01444     35 0E 86 F1 | 	sub	objptr, #53
01448     00 5C 06 F6 | 	mov	arg01, #0
0144c     E8 60 B0 FD | 	call	#__system___getiolock_0145
01450     15 5D 02 F6 | 	mov	arg01, result1
01454     9C 4A B0 FD | 	call	#__system___lockmem
01458     00 2A 06 F6 | 	mov	result1, #0
0145c     04 00 00 FF 
01460     28 0F 06 F1 | 	add	objptr, ##2344
01464     07 5F 02 FB | 	rdlong	arg02, objptr
01468     04 00 00 FF 
0146c     28 0F 86 F1 | 	sub	objptr, ##2344
01470     00 5C 06 F6 | 	mov	arg01, #0
01474     00 60 06 F6 | 	mov	arg03, #0
01478     0A 62 06 F6 | 	mov	arg04, #10
0147c     54 4E B0 FD | 	call	#__system___basic_print_integer
01480     00 5C 06 F6 | 	mov	arg01, #0
01484     0A 5E 06 F6 | 	mov	arg02, #10
01488     00 60 06 F6 | 	mov	arg03, #0
0148c     B0 4D B0 FD | 	call	#__system___basic_print_char
01490     01 2A 06 F6 | 	mov	result1, #1
01494     00 5C 06 F6 | 	mov	arg01, #0
01498     9C 60 B0 FD | 	call	#__system___getiolock_0145
0149c     15 01 68 FC | 	wrlong	#0, result1
014a0     00 2A 06 F6 | 	mov	result1, #0
014a4     64 5F 02 F6 | 	mov	arg02, local48
014a8                 | ' 
014a8                 | ' ''---------- Set the (x,y) position of cursor
014a8                 | ' 
014a8                 | ' cursor_x:=x
014a8     34 0E 06 F1 | 	add	objptr, #52
014ac     07 BB 48 FC | 	wrbyte	#93, objptr
014b0                 | ' cursor_y:=y
014b0     01 0E 06 F1 | 	add	objptr, #1
014b4     07 5F 42 FC | 	wrbyte	arg02, objptr
014b8     35 0E 86 F1 | 	sub	objptr, #53
014bc     00 5C 06 F6 | 	mov	arg01, #0
014c0     74 60 B0 FD | 	call	#__system___getiolock_0145
014c4     15 5D 02 F6 | 	mov	arg01, result1
014c8     28 4A B0 FD | 	call	#__system___lockmem
014cc     00 2A 06 F6 | 	mov	result1, #0
014d0     04 00 00 FF 
014d4     1C 0F 06 F1 | 	add	objptr, ##2332
014d8     07 5F 02 FB | 	rdlong	arg02, objptr
014dc     04 00 00 FF 
014e0     1C 0F 86 F1 | 	sub	objptr, ##2332
014e4     00 5C 06 F6 | 	mov	arg01, #0
014e8     00 60 06 F6 | 	mov	arg03, #0
014ec     0A 62 06 F6 | 	mov	arg04, #10
014f0     E0 4D B0 FD | 	call	#__system___basic_print_integer
014f4     00 5C 06 F6 | 	mov	arg01, #0
014f8     0A 5E 06 F6 | 	mov	arg02, #10
014fc     00 60 06 F6 | 	mov	arg03, #0
01500     3C 4D B0 FD | 	call	#__system___basic_print_char
01504     01 2A 06 F6 | 	mov	result1, #1
01508     00 5C 06 F6 | 	mov	arg01, #0
0150c     28 60 B0 FD | 	call	#__system___getiolock_0145
01510     15 01 68 FC | 	wrlong	#0, result1
01514     00 2A 06 F6 | 	mov	result1, #0
01518     64 5F 02 F6 | 	mov	arg02, local48
0151c                 | ' 
0151c                 | ' ''---------- Set the (x,y) position of cursor
0151c                 | ' 
0151c                 | ' cursor_x:=x
0151c     34 0E 06 F1 | 	add	objptr, #52
01520     07 C7 48 FC | 	wrbyte	#99, objptr
01524                 | ' cursor_y:=y
01524     01 0E 06 F1 | 	add	objptr, #1
01528     07 5F 42 FC | 	wrbyte	arg02, objptr
0152c     35 0E 86 F1 | 	sub	objptr, #53
01530     00 5C 06 F6 | 	mov	arg01, #0
01534     00 60 B0 FD | 	call	#__system___getiolock_0145
01538     15 5D 02 F6 | 	mov	arg01, result1
0153c     B4 49 B0 FD | 	call	#__system___lockmem
01540     00 2A 06 F6 | 	mov	result1, #0
01544     04 00 00 FF 
01548     20 0F 06 F1 | 	add	objptr, ##2336
0154c     07 5F 02 FB | 	rdlong	arg02, objptr
01550     04 00 00 FF 
01554     20 0F 86 F1 | 	sub	objptr, ##2336
01558     00 5C 06 F6 | 	mov	arg01, #0
0155c     00 60 06 F6 | 	mov	arg03, #0
01560     0A 62 06 F6 | 	mov	arg04, #10
01564     6C 4D B0 FD | 	call	#__system___basic_print_integer
01568     00 5C 06 F6 | 	mov	arg01, #0
0156c     0A 5E 06 F6 | 	mov	arg02, #10
01570     00 60 06 F6 | 	mov	arg03, #0
01574     C8 4C B0 FD | 	call	#__system___basic_print_char
01578     01 2A 06 F6 | 	mov	result1, #1
0157c     00 5C 06 F6 | 	mov	arg01, #0
01580     B4 5F B0 FD | 	call	#__system___getiolock_0145
01584     15 01 68 FC | 	wrlong	#0, result1
01588     00 2A 06 F6 | 	mov	result1, #0
0158c                 | LR__0014
0158c     01 92 06 F1 | 	add	local21, #1
01590     1E AE 06 F1 | 	add	local35, #30
01594     04 B0 06 F1 | 	add	local36, #4
01598     1E B2 06 F1 | 	add	local37, #30
0159c     EC F8 9F FD | 	jmp	#LR__0010
015a0                 | LR__0015
015a0                 | ' print
015a0     00 5C 06 F6 | 	mov	arg01, #0
015a4     90 5F B0 FD | 	call	#__system___getiolock_0145
015a8     15 5D 02 F6 | 	mov	arg01, result1
015ac     44 49 B0 FD | 	call	#__system___lockmem
015b0     00 2A 06 F6 | 	mov	result1, #0
015b4     00 5C 06 F6 | 	mov	arg01, #0
015b8     0A 5E 06 F6 | 	mov	arg02, #10
015bc     00 60 06 F6 | 	mov	arg03, #0
015c0     7C 4C B0 FD | 	call	#__system___basic_print_char
015c4     01 2A 06 F6 | 	mov	result1, #1
015c8     00 5C 06 F6 | 	mov	arg01, #0
015cc     68 5F B0 FD | 	call	#__system___getiolock_0145
015d0     15 01 68 FC | 	wrlong	#0, result1
015d4     03 00 00 FF 
015d8     44 0F 06 F1 | 	add	objptr, ##1860
015dc     03 00 00 FF 
015e0     F0 16 06 F1 | 	add	ptr__audio016_spin2_dat__, ##1776
015e4                 | ' 
015e4                 | ' 
015e4                 | ' channel1[0]:=@null
015e4     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
015e8                 | ' channel1[1]:=0
015e8     04 0E 06 F1 | 	add	objptr, #4
015ec     07 01 68 FC | 	wrlong	#0, objptr
015f0                 | ' channel1[2]:=0
015f0     04 0E 06 F1 | 	add	objptr, #4
015f4     07 01 68 FC | 	wrlong	#0, objptr
015f8                 | ' channel1[3]:=2
015f8     04 0E 06 F1 | 	add	objptr, #4
015fc     07 05 68 FC | 	wrlong	#2, objptr
01600                 | ' channel1[4]:=0
01600     04 0E 06 F1 | 	add	objptr, #4
01604     07 01 68 FC | 	wrlong	#0, objptr
01608                 | ' channel1[5]:=8192
01608     04 0E 06 F1 | 	add	objptr, #4
0160c     10 00 80 FF 
01610     07 01 68 FC | 	wrlong	##8192, objptr
01614                 | ' channel1[6]:=101
01614     04 0E 06 F1 | 	add	objptr, #4
01618     07 CB 68 FC | 	wrlong	#101, objptr
0161c                 | ' channel1[7]:=2
0161c     04 0E 06 F1 | 	add	objptr, #4
01620     07 05 68 FC | 	wrlong	#2, objptr
01624                 | ' 
01624                 | ' channel2[0]:=@null
01624     08 0E 06 F1 | 	add	objptr, #8
01628     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
0162c                 | ' channel2[1]:=0
0162c     04 0E 06 F1 | 	add	objptr, #4
01630     07 01 68 FC | 	wrlong	#0, objptr
01634                 | ' channel2[2]:=0
01634     04 0E 06 F1 | 	add	objptr, #4
01638     07 01 68 FC | 	wrlong	#0, objptr
0163c                 | ' channel2[3]:=2
0163c     04 0E 06 F1 | 	add	objptr, #4
01640     07 05 68 FC | 	wrlong	#2, objptr
01644                 | ' channel2[4]:=0
01644     04 0E 06 F1 | 	add	objptr, #4
01648     07 01 68 FC | 	wrlong	#0, objptr
0164c                 | ' channel2[5]:=8192
0164c     04 0E 06 F1 | 	add	objptr, #4
01650     10 00 80 FF 
01654     07 01 68 FC | 	wrlong	##8192, objptr
01658                 | ' channel2[6]:=103
01658     04 0E 06 F1 | 	add	objptr, #4
0165c     07 CF 68 FC | 	wrlong	#103, objptr
01660                 | ' channel2[7]:=2
01660     04 0E 06 F1 | 	add	objptr, #4
01664     07 05 68 FC | 	wrlong	#2, objptr
01668                 | ' 
01668                 | ' channel3[0]:=@null
01668     08 0E 06 F1 | 	add	objptr, #8
0166c     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01670                 | ' channel3[1]:=0
01670     04 0E 06 F1 | 	add	objptr, #4
01674     07 01 68 FC | 	wrlong	#0, objptr
01678                 | ' channel3[2]:=0
01678     04 0E 06 F1 | 	add	objptr, #4
0167c     07 01 68 FC | 	wrlong	#0, objptr
01680                 | ' channel3[3]:=2
01680     04 0E 06 F1 | 	add	objptr, #4
01684     07 05 68 FC | 	wrlong	#2, objptr
01688                 | ' channel3[4]:=0
01688     04 0E 06 F1 | 	add	objptr, #4
0168c     07 01 68 FC | 	wrlong	#0, objptr
01690                 | ' channel3[5]:=8192
01690     04 0E 06 F1 | 	add	objptr, #4
01694     10 00 80 FF 
01698     07 01 68 FC | 	wrlong	##8192, objptr
0169c                 | ' channel3[6]:=107
0169c     04 0E 06 F1 | 	add	objptr, #4
016a0     07 D7 68 FC | 	wrlong	#107, objptr
016a4                 | ' channel3[7]:=2
016a4     04 0E 06 F1 | 	add	objptr, #4
016a8     07 05 68 FC | 	wrlong	#2, objptr
016ac                 | ' 
016ac                 | ' channel4[0]:=@null
016ac     08 0E 06 F1 | 	add	objptr, #8
016b0     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
016b4                 | ' channel4[1]:=0
016b4     04 0E 06 F1 | 	add	objptr, #4
016b8     07 01 68 FC | 	wrlong	#0, objptr
016bc                 | ' channel4[2]:=0
016bc     04 0E 06 F1 | 	add	objptr, #4
016c0     07 01 68 FC | 	wrlong	#0, objptr
016c4                 | ' channel4[3]:=2
016c4     04 0E 06 F1 | 	add	objptr, #4
016c8     07 05 68 FC | 	wrlong	#2, objptr
016cc                 | ' channel4[4]:=0
016cc     04 0E 06 F1 | 	add	objptr, #4
016d0     07 01 68 FC | 	wrlong	#0, objptr
016d4                 | ' channel4[5]:=8192
016d4     04 0E 06 F1 | 	add	objptr, #4
016d8     10 00 80 FF 
016dc     07 01 68 FC | 	wrlong	##8192, objptr
016e0                 | ' channel4[6]:=109
016e0     04 0E 06 F1 | 	add	objptr, #4
016e4     07 DB 68 FC | 	wrlong	#109, objptr
016e8                 | ' channel4[7]:=2
016e8     04 0E 06 F1 | 	add	objptr, #4
016ec     07 05 68 FC | 	wrlong	#2, objptr
016f0                 | ' channel4[8]:=1
016f0     04 0E 06 F1 | 	add	objptr, #4
016f4     07 03 68 FC | 	wrlong	#1, objptr
016f8                 | ' 
016f8                 | ' channel5[0]:=@null
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01700                 | ' channel5[1]:=0
01700     04 0E 06 F1 | 	add	objptr, #4
01704     07 01 68 FC | 	wrlong	#0, objptr
01708                 | ' channel5[2]:=0
01708     04 0E 06 F1 | 	add	objptr, #4
0170c     07 01 68 FC | 	wrlong	#0, objptr
01710                 | ' channel5[3]:=2
01710     04 0E 06 F1 | 	add	objptr, #4
01714     07 05 68 FC | 	wrlong	#2, objptr
01718                 | ' channel5[4]:=0
01718     04 0E 06 F1 | 	add	objptr, #4
0171c     07 01 68 FC | 	wrlong	#0, objptr
01720                 | ' channel5[5]:=8192
01720     04 0E 06 F1 | 	add	objptr, #4
01724     10 00 80 FF 
01728     07 01 68 FC | 	wrlong	##8192, objptr
0172c                 | ' channel5[6]:=113
0172c     04 0E 06 F1 | 	add	objptr, #4
01730     07 E3 68 FC | 	wrlong	#113, objptr
01734                 | ' channel5[7]:=2
01734     04 0E 06 F1 | 	add	objptr, #4
01738     07 05 68 FC | 	wrlong	#2, objptr
0173c                 | ' 
0173c                 | ' channel6[0]:=@null
0173c     08 0E 06 F1 | 	add	objptr, #8
01740     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01744                 | ' channel6[1]:=0
01744     04 0E 06 F1 | 	add	objptr, #4
01748     07 01 68 FC | 	wrlong	#0, objptr
0174c                 | ' channel6[2]:=0
0174c     04 0E 06 F1 | 	add	objptr, #4
01750     07 01 68 FC | 	wrlong	#0, objptr
01754                 | ' channel6[3]:=2
01754     04 0E 06 F1 | 	add	objptr, #4
01758     07 05 68 FC | 	wrlong	#2, objptr
0175c                 | ' channel6[4]:=0
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 01 68 FC | 	wrlong	#0, objptr
01764                 | ' channel6[5]:=8192
01764     04 0E 06 F1 | 	add	objptr, #4
01768     10 00 80 FF 
0176c     07 01 68 FC | 	wrlong	##8192, objptr
01770                 | ' channel6[6]:=127
01770     04 0E 06 F1 | 	add	objptr, #4
01774     07 FF 68 FC | 	wrlong	#127, objptr
01778                 | ' channel6[7]:=2
01778     04 0E 06 F1 | 	add	objptr, #4
0177c     07 05 68 FC | 	wrlong	#2, objptr
01780                 | ' 
01780                 | ' channel7[0]:=@null
01780     08 0E 06 F1 | 	add	objptr, #8
01784     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
01788                 | ' channel7[1]:=0
01788     04 0E 06 F1 | 	add	objptr, #4
0178c     07 01 68 FC | 	wrlong	#0, objptr
01790                 | ' channel7[2]:=0
01790     04 0E 06 F1 | 	add	objptr, #4
01794     07 01 68 FC | 	wrlong	#0, objptr
01798                 | ' channel7[3]:=2
01798     04 0E 06 F1 | 	add	objptr, #4
0179c     07 05 68 FC | 	wrlong	#2, objptr
017a0                 | ' channel7[4]:=0
017a0     04 0E 06 F1 | 	add	objptr, #4
017a4     07 01 68 FC | 	wrlong	#0, objptr
017a8                 | ' channel7[5]:=8192
017a8     04 0E 06 F1 | 	add	objptr, #4
017ac     10 00 80 FF 
017b0     07 01 68 FC | 	wrlong	##8192, objptr
017b4                 | ' channel7[6]:=131
017b4     04 0E 06 F1 | 	add	objptr, #4
017b8     07 07 69 FC | 	wrlong	#131, objptr
017bc                 | ' channel7[7]:=2
017bc     04 0E 06 F1 | 	add	objptr, #4
017c0     07 05 68 FC | 	wrlong	#2, objptr
017c4                 | ' 
017c4                 | ' channel8[0]:=@null
017c4     08 0E 06 F1 | 	add	objptr, #8
017c8     07 17 62 FC | 	wrlong	ptr__audio016_spin2_dat__, objptr
017cc                 | ' channel8[1]:=0
017cc     04 0E 06 F1 | 	add	objptr, #4
017d0     07 01 68 FC | 	wrlong	#0, objptr
017d4                 | ' channel8[2]:=0
017d4     04 0E 06 F1 | 	add	objptr, #4
017d8     07 01 68 FC | 	wrlong	#0, objptr
017dc                 | ' channel8[3]:=2
017dc     04 0E 06 F1 | 	add	objptr, #4
017e0     07 05 68 FC | 	wrlong	#2, objptr
017e4                 | ' channel8[4]:=0
017e4     04 0E 06 F1 | 	add	objptr, #4
017e8     07 01 68 FC | 	wrlong	#0, objptr
017ec                 | ' channel8[5]:=8192
017ec     04 0E 06 F1 | 	add	objptr, #4
017f0     10 00 80 FF 
017f4     07 01 68 FC | 	wrlong	##8192, objptr
017f8                 | ' channel8[6]:=137
017f8     04 0E 06 F1 | 	add	objptr, #4
017fc     07 13 69 FC | 	wrlong	#137, objptr
01800                 | ' channel8[7]:=2
01800     04 0E 06 F1 | 	add	objptr, #4
01804     07 05 68 FC | 	wrlong	#2, objptr
01808                 | ' 
01808                 | ' channel1[8]:=1
01808     F8 0E 86 F1 | 	sub	objptr, #248
0180c     07 03 68 FC | 	wrlong	#1, objptr
01810                 | ' channel2[8]:=1
01810     24 0E 06 F1 | 	add	objptr, #36
01814     07 03 68 FC | 	wrlong	#1, objptr
01818                 | ' channel3[8]:=1
01818     24 0E 06 F1 | 	add	objptr, #36
0181c     07 03 68 FC | 	wrlong	#1, objptr
01820                 | ' channel4[8]:=1
01820     24 0E 06 F1 | 	add	objptr, #36
01824     07 03 68 FC | 	wrlong	#1, objptr
01828                 | ' channel5[8]:=1
01828     24 0E 06 F1 | 	add	objptr, #36
0182c     07 03 68 FC | 	wrlong	#1, objptr
01830                 | ' channel6[8]:=1
01830     24 0E 06 F1 | 	add	objptr, #36
01834     07 03 68 FC | 	wrlong	#1, objptr
01838                 | ' channel7[8]:=1
01838     24 0E 06 F1 | 	add	objptr, #36
0183c     07 03 68 FC | 	wrlong	#1, objptr
01840                 | ' channel8[8]:=1
01840     24 0E 06 F1 | 	add	objptr, #36
01844     07 03 68 FC | 	wrlong	#1, objptr
01848     1C 0F 86 F1 | 	sub	objptr, #284
0184c                 | ' 
0184c                 | ' cog:=coginit(16,@audio,@channel1)
0184c     03 00 00 FF 
01850     F0 16 86 F1 | 	sub	ptr__audio016_spin2_dat__, ##1776
01854     0B 5F 02 F6 | 	mov	arg02, ptr__audio016_spin2_dat__
01858     07 61 02 F6 | 	mov	arg03, objptr
0185c     10 5C 06 F6 | 	mov	arg01, #16
01860     28 60 62 FD | 	setq	arg03
01864     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01868     01 5C 66 C6 |  if_b	neg	arg01, #1
0186c     2E 2B 02 F6 | 	mov	result1, arg01
01870                 | ' return cog
01870     B0 0F 06 F1 | 	add	objptr, #432
01874     07 01 68 FC | 	wrlong	#0, objptr
01878     04 0E 06 F1 | 	add	objptr, #4
0187c     07 01 68 FC | 	wrlong	#0, objptr
01880     04 0E 06 F1 | 	add	objptr, #4
01884     07 01 68 FC | 	wrlong	#0, objptr
01888     04 0E 06 F1 | 	add	objptr, #4
0188c     07 01 68 FC | 	wrlong	#0, objptr
01890     04 00 00 FF 
01894     00 0F 86 F1 | 	sub	objptr, ##2304
01898                 | ' getinfo(ma,samples)
01898                 | ' 
01898                 | ' paula.start
01898                 | ' 
01898                 | ' old1=0 : old2=0 :old3=0 : old4=0
01898                 | ' 
01898                 | ' do
01898                 | LR__0016
01898                 | ' 
01898                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01898                 | ' 
01898                 | ' repeat i from 1 to amount
01898     01 CC 06 F6 | 	mov	local50, #1
0189c                 | LR__0017
0189c                 | '   repeat until vblank==0
0189c                 | LR__0018
0189c     40 0E 06 F1 | 	add	objptr, #64
018a0     07 CF 0A FB | 	rdlong	local51, objptr wz
018a4     40 0E 86 F1 | 	sub	objptr, #64
018a8     0C 00 90 AD |  if_e	jmp	#LR__0019
018ac                 | '     waitus(100)
018ac     64 5C 06 F6 | 	mov	arg01, #100
018b0     84 48 B0 FD | 	call	#__system___waitus
018b4     E4 FF 9F FD | 	jmp	#LR__0018
018b8                 | LR__0019
018b8                 | '   repeat until vblank==1
018b8                 | LR__0020
018b8     40 0E 06 F1 | 	add	objptr, #64
018bc     07 CF 02 FB | 	rdlong	local51, objptr
018c0     40 0E 86 F1 | 	sub	objptr, #64
018c4     01 CE 0E F2 | 	cmp	local51, #1 wz
018c8     0C 00 90 AD |  if_e	jmp	#LR__0021
018cc                 | '     waitus(100)
018cc     64 5C 06 F6 | 	mov	arg01, #100
018d0     64 48 B0 FD | 	call	#__system___waitus
018d4     E0 FF 9F FD | 	jmp	#LR__0020
018d8                 | LR__0021
018d8     F0 CD 6E FB | 	djnz	local50, #LR__0017
018dc     02 00 00 FF 
018e0     48 0F 06 F1 | 	add	objptr, ##1352
018e4     44 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018e8     A7 0E 06 F1 | 	add	objptr, #167
018ec     07 7D 02 FB | 	rdlong	local10, objptr
018f0     55 0F 06 F1 | 	add	objptr, #341
018f4     07 7D 62 FC | 	wrlong	local10, objptr
018f8     04 0E 06 F1 | 	add	objptr, #4
018fc     07 03 68 FC | 	wrlong	#1, objptr
01900     45 0F 86 F1 | 	sub	objptr, #325
01904     07 7D E2 FA | 	rdword	local10, objptr
01908     08 0E 06 F1 | 	add	objptr, #8
0190c     07 D1 02 FB | 	rdlong	local52, objptr
01910     68 7D 82 F1 | 	sub	local10, local52
01914     41 0F 06 F1 | 	add	objptr, #321
01918     07 7D 62 FC | 	wrlong	local10, objptr
0191c     49 0F 86 F1 | 	sub	objptr, #329
01920     07 7D E2 FA | 	rdword	local10, objptr
01924     4D 0F 06 F1 | 	add	objptr, #333
01928     07 7D 62 FC | 	wrlong	local10, objptr
0192c     09 0F 86 F1 | 	sub	objptr, #265
01930     07 7D 02 FB | 	rdlong	local10, objptr
01934     10 0E 06 F1 | 	add	objptr, #16
01938     07 D1 02 FB | 	rdlong	local52, objptr
0193c     68 7D 02 F1 | 	add	local10, local52
01940     27 0F 86 F1 | 	sub	objptr, #295
01944     07 85 02 FB | 	rdlong	local14, objptr
01948     42 7D 02 FD | 	qmul	local10, local14
0194c     18 D2 62 FD | 	getqx	local53
01950     01 00 00 FF 
01954     24 0E 06 F1 | 	add	objptr, ##548
01958     07 D3 62 FC | 	wrlong	local53, objptr
0195c     04 0E 06 F1 | 	add	objptr, #4
01960     0C 00 80 FF 
01964     07 01 68 FC | 	wrlong	##6144, objptr
01968     31 0F 86 F1 | 	sub	objptr, #305
0196c     07 7D 02 FB | 	rdlong	local10, objptr
01970     10 0E 06 F1 | 	add	objptr, #16
01974     07 D1 02 FB | 	rdlong	local52, objptr
01978     68 7D 02 F1 | 	add	local10, local52
0197c     25 0F 06 F1 | 	add	objptr, #293
01980     07 7D 62 FC | 	wrlong	local10, objptr
01984     04 0E 06 F1 | 	add	objptr, #4
01988     07 03 68 FC | 	wrlong	#1, objptr
0198c     08 0E 06 F1 | 	add	objptr, #8
01990     07 7D 02 FB | 	rdlong	local10, objptr
01994     9C 0F 06 F1 | 	add	objptr, #412
01998     07 7D 62 FC | 	wrlong	local10, objptr
0199c     01 00 00 FF 
019a0     11 0F 86 F1 | 	sub	objptr, ##785
019a4     07 7D 02 FB | 	rdlong	local10, objptr
019a8     75 0F 06 F1 | 	add	objptr, #373
019ac     07 7D 62 FC | 	wrlong	local10, objptr
019b0     04 0E 06 F1 | 	add	objptr, #4
019b4     07 03 68 FC | 	wrlong	#1, objptr
019b8     67 0F 86 F1 | 	sub	objptr, #359
019bc     07 7D E2 FA | 	rdword	local10, objptr
019c0     0A 0E 06 F1 | 	add	objptr, #10
019c4     07 D1 02 FB | 	rdlong	local52, objptr
019c8     68 7D 82 F1 | 	sub	local10, local52
019cc     61 0F 06 F1 | 	add	objptr, #353
019d0     07 7D 62 FC | 	wrlong	local10, objptr
019d4     6B 0F 86 F1 | 	sub	objptr, #363
019d8     07 7D E2 FA | 	rdword	local10, objptr
019dc     6F 0F 06 F1 | 	add	objptr, #367
019e0     07 7D 62 FC | 	wrlong	local10, objptr
019e4     29 0F 86 F1 | 	sub	objptr, #297
019e8     07 7D 02 FB | 	rdlong	local10, objptr
019ec     10 0E 06 F1 | 	add	objptr, #16
019f0     07 D1 02 FB | 	rdlong	local52, objptr
019f4     68 7D 02 F1 | 	add	local10, local52
019f8     2B 0F 86 F1 | 	sub	objptr, #299
019fc     07 85 02 FB | 	rdlong	local14, objptr
01a00     42 7D 02 FD | 	qmul	local10, local14
01a04     18 D2 62 FD | 	getqx	local53
01a08     01 00 00 FF 
01a0c     48 0E 06 F1 | 	add	objptr, ##584
01a10     07 D3 62 FC | 	wrlong	local53, objptr
01a14     04 0E 06 F1 | 	add	objptr, #4
01a18     14 00 80 FF 
01a1c     07 01 68 FC | 	wrlong	##10240, objptr
01a20     51 0F 86 F1 | 	sub	objptr, #337
01a24     07 7D 02 FB | 	rdlong	local10, objptr
01a28     10 0E 06 F1 | 	add	objptr, #16
01a2c     07 D1 02 FB | 	rdlong	local52, objptr
01a30     68 7D 02 F1 | 	add	local10, local52
01a34     45 0F 06 F1 | 	add	objptr, #325
01a38     07 7D 62 FC | 	wrlong	local10, objptr
01a3c     04 0E 06 F1 | 	add	objptr, #4
01a40     07 03 68 FC | 	wrlong	#1, objptr
01a44     08 0E 06 F1 | 	add	objptr, #8
01a48     07 7D 02 FB | 	rdlong	local10, objptr
01a4c     7C 0F 06 F1 | 	add	objptr, #380
01a50     07 7D 62 FC | 	wrlong	local10, objptr
01a54     01 00 00 FF 
01a58     11 0F 86 F1 | 	sub	objptr, ##785
01a5c     07 7D 02 FB | 	rdlong	local10, objptr
01a60     95 0F 06 F1 | 	add	objptr, #405
01a64     07 7D 62 FC | 	wrlong	local10, objptr
01a68     04 0E 06 F1 | 	add	objptr, #4
01a6c     07 03 68 FC | 	wrlong	#1, objptr
01a70     89 0F 86 F1 | 	sub	objptr, #393
01a74     07 7D E2 FA | 	rdword	local10, objptr
01a78     0C 0E 06 F1 | 	add	objptr, #12
01a7c     07 D1 02 FB | 	rdlong	local52, objptr
01a80     68 7D 82 F1 | 	sub	local10, local52
01a84     81 0F 06 F1 | 	add	objptr, #385
01a88     07 7D 62 FC | 	wrlong	local10, objptr
01a8c     8D 0F 86 F1 | 	sub	objptr, #397
01a90     07 7D E2 FA | 	rdword	local10, objptr
01a94     91 0F 06 F1 | 	add	objptr, #401
01a98     07 7D 62 FC | 	wrlong	local10, objptr
01a9c     49 0F 86 F1 | 	sub	objptr, #329
01aa0     07 7D 02 FB | 	rdlong	local10, objptr
01aa4     10 0E 06 F1 | 	add	objptr, #16
01aa8     07 D1 02 FB | 	rdlong	local52, objptr
01aac     68 7D 02 F1 | 	add	local10, local52
01ab0     2F 0F 86 F1 | 	sub	objptr, #303
01ab4     07 85 02 FB | 	rdlong	local14, objptr
01ab8     42 7D 02 FD | 	qmul	local10, local14
01abc     18 D2 62 FD | 	getqx	local53
01ac0     01 00 00 FF 
01ac4     6C 0E 06 F1 | 	add	objptr, ##620
01ac8     07 D3 62 FC | 	wrlong	local53, objptr
01acc     04 0E 06 F1 | 	add	objptr, #4
01ad0     14 00 80 FF 
01ad4     07 01 68 FC | 	wrlong	##10240, objptr
01ad8     71 0F 86 F1 | 	sub	objptr, #369
01adc     07 7D 02 FB | 	rdlong	local10, objptr
01ae0     10 0E 06 F1 | 	add	objptr, #16
01ae4     07 D1 02 FB | 	rdlong	local52, objptr
01ae8     68 7D 02 F1 | 	add	local10, local52
01aec     65 0F 06 F1 | 	add	objptr, #357
01af0     07 7D 62 FC | 	wrlong	local10, objptr
01af4     04 0E 06 F1 | 	add	objptr, #4
01af8     07 03 68 FC | 	wrlong	#1, objptr
01afc     08 0E 06 F1 | 	add	objptr, #8
01b00     07 7D 02 FB | 	rdlong	local10, objptr
01b04     5C 0F 06 F1 | 	add	objptr, #348
01b08     07 7D 62 FC | 	wrlong	local10, objptr
01b0c     01 00 00 FF 
01b10     11 0F 86 F1 | 	sub	objptr, ##785
01b14     07 7D 02 FB | 	rdlong	local10, objptr
01b18     B5 0F 06 F1 | 	add	objptr, #437
01b1c     07 7D 62 FC | 	wrlong	local10, objptr
01b20     04 0E 06 F1 | 	add	objptr, #4
01b24     07 03 68 FC | 	wrlong	#1, objptr
01b28     AB 0F 86 F1 | 	sub	objptr, #427
01b2c     07 7D E2 FA | 	rdword	local10, objptr
01b30     0E 0E 06 F1 | 	add	objptr, #14
01b34     07 D1 02 FB | 	rdlong	local52, objptr
01b38     68 7D 82 F1 | 	sub	local10, local52
01b3c     A1 0F 06 F1 | 	add	objptr, #417
01b40     07 7D 62 FC | 	wrlong	local10, objptr
01b44     AF 0F 86 F1 | 	sub	objptr, #431
01b48     07 7D E2 FA | 	rdword	local10, objptr
01b4c     B3 0F 06 F1 | 	add	objptr, #435
01b50     07 7D 62 FC | 	wrlong	local10, objptr
01b54     69 0F 86 F1 | 	sub	objptr, #361
01b58     07 7D 02 FB | 	rdlong	local10, objptr
01b5c     10 0E 06 F1 | 	add	objptr, #16
01b60     07 D1 02 FB | 	rdlong	local52, objptr
01b64     68 7D 02 F1 | 	add	local10, local52
01b68     33 0F 86 F1 | 	sub	objptr, #307
01b6c     07 85 02 FB | 	rdlong	local14, objptr
01b70     42 7D 02 FD | 	qmul	local10, local14
01b74     18 D2 62 FD | 	getqx	local53
01b78     01 00 00 FF 
01b7c     90 0E 06 F1 | 	add	objptr, ##656
01b80     07 D3 62 FC | 	wrlong	local53, objptr
01b84     04 0E 06 F1 | 	add	objptr, #4
01b88     0C 00 80 FF 
01b8c     07 01 68 FC | 	wrlong	##6144, objptr
01b90     91 0F 86 F1 | 	sub	objptr, #401
01b94     07 7D 02 FB | 	rdlong	local10, objptr
01b98     10 0E 06 F1 | 	add	objptr, #16
01b9c     07 D1 02 FB | 	rdlong	local52, objptr
01ba0     68 7D 02 F1 | 	add	local10, local52
01ba4     85 0F 06 F1 | 	add	objptr, #389
01ba8     07 7D 62 FC | 	wrlong	local10, objptr
01bac     04 0E 06 F1 | 	add	objptr, #4
01bb0     07 03 68 FC | 	wrlong	#1, objptr
01bb4                 | ' 
01bb4                 | '     waitvbl
01bb4                 | '     tracker.tick
01bb4                 | '     
01bb4                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01bb4                 | ' 	paula.channel1(1)=1
01bb4                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01bb4                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01bb4                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01bb4                 | ' 	paula.channel1(5)=8192-2048
01bb4                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01bb4                 | ' 	paula.channel1(7)=1
01bb4                 | ' 
01bb4                 | ' 
01bb4                 | '     old12=paula.channel2(0)
01bb4                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01bb4                 | ' 	paula.channel2(1)=1
01bb4                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01bb4                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01bb4                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01bb4                 | ' 	paula.channel2(5)=8192+2048
01bb4                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01bb4                 | ' 	paula.channel2(7)=1
01bb4                 | ' 
01bb4                 | ' 
01bb4                 | '     old13=paula.channel3(0)
01bb4                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01bb4                 | ' 	paula.channel3(1)=1
01bb4                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01bb4                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01bb4                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01bb4                 | ' 	paula.channel3(5)=8192+2048
01bb4                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01bb4                 | ' 	paula.channel3(7)=1
01bb4                 | ' 
01bb4                 | ' 
01bb4                 | '     old14=paula.channel4(0)    
01bb4                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01bb4                 | ' 	paula.channel4(1)=1
01bb4                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01bb4                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01bb4                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*mainvolume
01bb4                 | ' 	paula.channel4(5)=8192-2048
01bb4                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01bb4                 | ' 	paula.channel4(7)=1
01bb4                 | ' 
01bb4                 | '  
01bb4                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 : old1=tracker.trigger(0)
01bb4     8E 0E 86 F1 | 	sub	objptr, #142
01bb8     07 7D C2 FA | 	rdbyte	local10, objptr
01bbc     B6 0F 06 F1 | 	add	objptr, #438
01bc0     07 D1 02 FB | 	rdlong	local52, objptr
01bc4     04 00 00 FF 
01bc8     F4 0E 86 F1 | 	sub	objptr, ##2292
01bcc     68 7D 0A F2 | 	cmp	local10, local52 wz
01bd0     24 00 90 AD |  if_e	jmp	#LR__0022
01bd4     03 00 00 FF 
01bd8     64 0F 06 F1 | 	add	objptr, ##1892
01bdc     07 01 68 FC | 	wrlong	#0, objptr
01be0     26 0E 86 F1 | 	sub	objptr, #38
01be4     07 7D C2 FA | 	rdbyte	local10, objptr
01be8     B6 0F 06 F1 | 	add	objptr, #438
01bec     07 7D 62 FC | 	wrlong	local10, objptr
01bf0     04 00 00 FF 
01bf4     F4 0E 86 F1 | 	sub	objptr, ##2292
01bf8                 | LR__0022
01bf8                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 : old2=tracker.trigger(1)  
01bf8     03 00 00 FF 
01bfc     3F 0F 06 F1 | 	add	objptr, ##1855
01c00     07 7D C2 FA | 	rdbyte	local10, objptr
01c04     B9 0F 06 F1 | 	add	objptr, #441
01c08     07 D1 02 FB | 	rdlong	local52, objptr
01c0c     04 00 00 FF 
01c10     F8 0E 86 F1 | 	sub	objptr, ##2296
01c14     68 7D 0A F2 | 	cmp	local10, local52 wz
01c18     24 00 90 AD |  if_e	jmp	#LR__0023
01c1c     03 00 00 FF 
01c20     88 0F 06 F1 | 	add	objptr, ##1928
01c24     07 01 68 FC | 	wrlong	#0, objptr
01c28     49 0E 86 F1 | 	sub	objptr, #73
01c2c     07 7D C2 FA | 	rdbyte	local10, objptr
01c30     B9 0F 06 F1 | 	add	objptr, #441
01c34     07 7D 62 FC | 	wrlong	local10, objptr
01c38     04 00 00 FF 
01c3c     F8 0E 86 F1 | 	sub	objptr, ##2296
01c40                 | LR__0023
01c40                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 : old3=tracker.trigger(2)  
01c40     03 00 00 FF 
01c44     40 0F 06 F1 | 	add	objptr, ##1856
01c48     07 7D C2 FA | 	rdbyte	local10, objptr
01c4c     BC 0F 06 F1 | 	add	objptr, #444
01c50     07 D1 02 FB | 	rdlong	local52, objptr
01c54     04 00 00 FF 
01c58     FC 0E 86 F1 | 	sub	objptr, ##2300
01c5c     68 7D 0A F2 | 	cmp	local10, local52 wz
01c60     24 00 90 AD |  if_e	jmp	#LR__0024
01c64     03 00 00 FF 
01c68     AC 0F 06 F1 | 	add	objptr, ##1964
01c6c     07 01 68 FC | 	wrlong	#0, objptr
01c70     6C 0E 86 F1 | 	sub	objptr, #108
01c74     07 7D C2 FA | 	rdbyte	local10, objptr
01c78     BC 0F 06 F1 | 	add	objptr, #444
01c7c     07 7D 62 FC | 	wrlong	local10, objptr
01c80     04 00 00 FF 
01c84     FC 0E 86 F1 | 	sub	objptr, ##2300
01c88                 | LR__0024
01c88                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 : old4=tracker.trigger(3) 
01c88     03 00 00 FF 
01c8c     41 0F 06 F1 | 	add	objptr, ##1857
01c90     07 7D C2 FA | 	rdbyte	local10, objptr
01c94     BF 0F 06 F1 | 	add	objptr, #447
01c98     07 D1 02 FB | 	rdlong	local52, objptr
01c9c     04 00 00 FF 
01ca0     00 0F 86 F1 | 	sub	objptr, ##2304
01ca4     68 7D 0A F2 | 	cmp	local10, local52 wz
01ca8     24 00 90 AD |  if_e	jmp	#LR__0025
01cac     03 00 00 FF 
01cb0     D0 0F 06 F1 | 	add	objptr, ##2000
01cb4     07 01 68 FC | 	wrlong	#0, objptr
01cb8     8F 0E 86 F1 | 	sub	objptr, #143
01cbc     07 7D C2 FA | 	rdbyte	local10, objptr
01cc0     BF 0F 06 F1 | 	add	objptr, #447
01cc4     07 7D 62 FC | 	wrlong	local10, objptr
01cc8     04 00 00 FF 
01ccc     00 0F 86 F1 | 	sub	objptr, ##2304
01cd0                 | LR__0025
01cd0     2C 5D 06 F6 | 	mov	arg01, #300
01cd4     60 44 B0 FD | 	call	#__system___waitus
01cd8     03 00 00 FF 
01cdc     64 0F 06 F1 | 	add	objptr, ##1892
01ce0     FF FF FF FF 
01ce4     07 FF 6B FC | 	wrlong	##-1, objptr
01ce8     24 0E 06 F1 | 	add	objptr, #36
01cec     FF FF FF FF 
01cf0     07 FF 6B FC | 	wrlong	##-1, objptr
01cf4     24 0E 06 F1 | 	add	objptr, #36
01cf8     FF FF FF FF 
01cfc     07 FF 6B FC | 	wrlong	##-1, objptr
01d00     24 0E 06 F1 | 	add	objptr, #36
01d04     FF FF FF FF 
01d08     07 FF 6B FC | 	wrlong	##-1, objptr
01d0c     1D 5E 06 F6 | 	mov	arg02, #29
01d10                 | ' 
01d10                 | ' ''---------- Set the (x,y) position of cursor
01d10                 | ' 
01d10                 | ' cursor_x:=x
01d10     03 00 00 FF 
01d14     9C 0F 86 F1 | 	sub	objptr, ##1948
01d18     07 0B 48 FC | 	wrbyte	#5, objptr
01d1c                 | ' cursor_y:=y
01d1c     01 0E 06 F1 | 	add	objptr, #1
01d20     07 3B 48 FC | 	wrbyte	#29, objptr
01d24     02 00 00 FF 
01d28     CA 0F 06 F1 | 	add	objptr, ##1482
01d2c     07 D5 C2 FA | 	rdbyte	local54, objptr
01d30     02 D4 66 F0 | 	shl	local54, #2
01d34     01 00 00 FF 
01d38     65 0E 06 F1 | 	add	objptr, ##613
01d3c     07 D5 02 F1 | 	add	local54, objptr
01d40     6A 5D 02 FB | 	rdlong	arg01, local54
01d44     04 00 00 FF 
01d48     64 0E 86 F1 | 	sub	objptr, ##2148
01d4c     EC 08 B0 FD | 	call	#_hng030rm_spin2_write
01d50     04 00 00 FF 
01d54     E8 0E 06 F1 | 	add	objptr, ##2280
01d58     07 5D 02 FB | 	rdlong	arg01, objptr
01d5c     04 00 00 FF 
01d60     E8 0E 86 F1 | 	sub	objptr, ##2280
01d64     D4 08 B0 FD | 	call	#_hng030rm_spin2_write
01d68                 | ' 
01d68                 | ' ''---------- Set the (x,y) position of cursor
01d68                 | ' 
01d68                 | ' cursor_x:=x
01d68     34 0E 06 F1 | 	add	objptr, #52
01d6c     07 03 48 FC | 	wrbyte	#1, objptr
01d70                 | ' cursor_y:=y
01d70     01 0E 06 F1 | 	add	objptr, #1
01d74     07 3B 48 FC | 	wrbyte	#29, objptr
01d78     02 00 00 FF 
01d7c     F2 0F 06 F1 | 	add	objptr, ##1522
01d80     07 5D 02 FB | 	rdlong	arg01, objptr
01d84     10 0E 06 F1 | 	add	objptr, #16
01d88     07 D5 02 FB | 	rdlong	local54, objptr
01d8c     03 00 00 FF 
01d90     37 0E 86 F1 | 	sub	objptr, ##1591
01d94     6A 5D 02 F1 | 	add	arg01, local54
01d98     03 5E 06 F6 | 	mov	arg02, #3
01d9c     18 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01da0     15 5D 02 F6 | 	mov	arg01, result1
01da4     94 08 B0 FD | 	call	#_hng030rm_spin2_write
01da8     1D 5E 06 F6 | 	mov	arg02, #29
01dac                 | ' 
01dac                 | ' ''---------- Set the (x,y) position of cursor
01dac                 | ' 
01dac                 | ' cursor_x:=x
01dac     34 0E 06 F1 | 	add	objptr, #52
01db0     07 41 48 FC | 	wrbyte	#32, objptr
01db4                 | ' cursor_y:=y
01db4     01 0E 06 F1 | 	add	objptr, #1
01db8     07 3B 48 FC | 	wrbyte	#29, objptr
01dbc     02 00 00 FF 
01dc0     CB 0F 06 F1 | 	add	objptr, ##1483
01dc4     07 D5 C2 FA | 	rdbyte	local54, objptr
01dc8     02 D4 66 F0 | 	shl	local54, #2
01dcc     01 00 00 FF 
01dd0     64 0E 06 F1 | 	add	objptr, ##612
01dd4     07 D5 02 F1 | 	add	local54, objptr
01dd8     6A 5D 02 FB | 	rdlong	arg01, local54
01ddc     04 00 00 FF 
01de0     64 0E 86 F1 | 	sub	objptr, ##2148
01de4     54 08 B0 FD | 	call	#_hng030rm_spin2_write
01de8     04 00 00 FF 
01dec     E8 0E 06 F1 | 	add	objptr, ##2280
01df0     07 5D 02 FB | 	rdlong	arg01, objptr
01df4     04 00 00 FF 
01df8     E8 0E 86 F1 | 	sub	objptr, ##2280
01dfc     3C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e00                 | ' 
01e00                 | ' ''---------- Set the (x,y) position of cursor
01e00                 | ' 
01e00                 | ' cursor_x:=x
01e00     34 0E 06 F1 | 	add	objptr, #52
01e04     07 39 48 FC | 	wrbyte	#28, objptr
01e08                 | ' cursor_y:=y
01e08     01 0E 06 F1 | 	add	objptr, #1
01e0c     07 3B 48 FC | 	wrbyte	#29, objptr
01e10     02 00 00 FF 
01e14     F6 0F 06 F1 | 	add	objptr, ##1526
01e18     07 5D 02 FB | 	rdlong	arg01, objptr
01e1c     10 0E 06 F1 | 	add	objptr, #16
01e20     07 D5 02 FB | 	rdlong	local54, objptr
01e24     03 00 00 FF 
01e28     3B 0E 86 F1 | 	sub	objptr, ##1595
01e2c     6A 5D 02 F1 | 	add	arg01, local54
01e30     03 5E 06 F6 | 	mov	arg02, #3
01e34     80 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e38     15 5D 02 F6 | 	mov	arg01, result1
01e3c     FC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e40     1D 5E 06 F6 | 	mov	arg02, #29
01e44                 | ' 
01e44                 | ' ''---------- Set the (x,y) position of cursor
01e44                 | ' 
01e44                 | ' cursor_x:=x
01e44     34 0E 06 F1 | 	add	objptr, #52
01e48     07 79 48 FC | 	wrbyte	#60, objptr
01e4c                 | ' cursor_y:=y
01e4c     01 0E 06 F1 | 	add	objptr, #1
01e50     07 3B 48 FC | 	wrbyte	#29, objptr
01e54     02 00 00 FF 
01e58     CC 0F 06 F1 | 	add	objptr, ##1484
01e5c     07 D5 C2 FA | 	rdbyte	local54, objptr
01e60     02 D4 66 F0 | 	shl	local54, #2
01e64     01 00 00 FF 
01e68     63 0E 06 F1 | 	add	objptr, ##611
01e6c     07 D5 02 F1 | 	add	local54, objptr
01e70     6A 5D 02 FB | 	rdlong	arg01, local54
01e74     04 00 00 FF 
01e78     64 0E 86 F1 | 	sub	objptr, ##2148
01e7c     BC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e80     04 00 00 FF 
01e84     E8 0E 06 F1 | 	add	objptr, ##2280
01e88     07 5D 02 FB | 	rdlong	arg01, objptr
01e8c     04 00 00 FF 
01e90     E8 0E 86 F1 | 	sub	objptr, ##2280
01e94     A4 07 B0 FD | 	call	#_hng030rm_spin2_write
01e98                 | ' 
01e98                 | ' ''---------- Set the (x,y) position of cursor
01e98                 | ' 
01e98                 | ' cursor_x:=x
01e98     34 0E 06 F1 | 	add	objptr, #52
01e9c     07 71 48 FC | 	wrbyte	#56, objptr
01ea0                 | ' cursor_y:=y
01ea0     01 0E 06 F1 | 	add	objptr, #1
01ea4     07 3B 48 FC | 	wrbyte	#29, objptr
01ea8     02 00 00 FF 
01eac     FA 0F 06 F1 | 	add	objptr, ##1530
01eb0     07 5D 02 FB | 	rdlong	arg01, objptr
01eb4     10 0E 06 F1 | 	add	objptr, #16
01eb8     07 D5 02 FB | 	rdlong	local54, objptr
01ebc     03 00 00 FF 
01ec0     3F 0E 86 F1 | 	sub	objptr, ##1599
01ec4     6A 5D 02 F1 | 	add	arg01, local54
01ec8     03 5E 06 F6 | 	mov	arg02, #3
01ecc     E8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ed0     15 5D 02 F6 | 	mov	arg01, result1
01ed4     64 07 B0 FD | 	call	#_hng030rm_spin2_write
01ed8                 | ' 
01ed8                 | ' ''---------- Set the (x,y) position of cursor
01ed8                 | ' 
01ed8                 | ' cursor_x:=x
01ed8     34 0E 06 F1 | 	add	objptr, #52
01edc     07 A9 48 FC | 	wrbyte	#84, objptr
01ee0                 | ' cursor_y:=y
01ee0     01 0E 06 F1 | 	add	objptr, #1
01ee4     07 3B 48 FC | 	wrbyte	#29, objptr
01ee8     02 00 00 FF 
01eec     FE 0F 06 F1 | 	add	objptr, ##1534
01ef0     07 5D 02 FB | 	rdlong	arg01, objptr
01ef4     10 0E 06 F1 | 	add	objptr, #16
01ef8     07 D5 02 FB | 	rdlong	local54, objptr
01efc     03 00 00 FF 
01f00     43 0E 86 F1 | 	sub	objptr, ##1603
01f04     6A 5D 02 F1 | 	add	arg01, local54
01f08     03 5E 06 F6 | 	mov	arg02, #3
01f0c     A8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01f10     15 5D 02 F6 | 	mov	arg01, result1
01f14     24 07 B0 FD | 	call	#_hng030rm_spin2_write
01f18     1D 5E 06 F6 | 	mov	arg02, #29
01f1c                 | ' 
01f1c                 | ' ''---------- Set the (x,y) position of cursor
01f1c                 | ' 
01f1c                 | ' cursor_x:=x
01f1c     34 0E 06 F1 | 	add	objptr, #52
01f20     07 B1 48 FC | 	wrbyte	#88, objptr
01f24                 | ' cursor_y:=y
01f24     01 0E 06 F1 | 	add	objptr, #1
01f28     07 3B 48 FC | 	wrbyte	#29, objptr
01f2c     02 00 00 FF 
01f30     CD 0F 06 F1 | 	add	objptr, ##1485
01f34     07 D5 C2 FA | 	rdbyte	local54, objptr
01f38     02 D4 66 F0 | 	shl	local54, #2
01f3c     01 00 00 FF 
01f40     62 0E 06 F1 | 	add	objptr, ##610
01f44     07 D5 02 F1 | 	add	local54, objptr
01f48     6A 5D 02 FB | 	rdlong	arg01, local54
01f4c     04 00 00 FF 
01f50     64 0E 86 F1 | 	sub	objptr, ##2148
01f54     E4 06 B0 FD | 	call	#_hng030rm_spin2_write
01f58     04 00 00 FF 
01f5c     E8 0E 06 F1 | 	add	objptr, ##2280
01f60     07 5D 02 FB | 	rdlong	arg01, objptr
01f64     04 00 00 FF 
01f68     E8 0E 86 F1 | 	sub	objptr, ##2280
01f6c     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01f70     24 F9 9F FD | 	jmp	#LR__0016
01f74     AF F0 03 F6 | 	mov	ptra, fp
01f78     BF 00 A0 FD | 	call	#popregs_
01f7c                 | _program_ret
01f7c     2D 00 64 FD | 	ret
01f80                 | 
01f80                 | ' 
01f80                 | ' 
01f80                 | ' ''---------- putpixel - put a pixel on the screen
01f80                 | ' 
01f80                 | ' pub putpixel1(x,y,c) |byte b
01f80                 | _hng030rm_spin2_putpixel1
01f80                 | ' 
01f80                 | ' 
01f80                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f80     00 30 06 F6 | 	mov	_var01, #0
01f84     00 5C 5E F2 | 	cmps	arg01, #0 wcz
01f88     01 30 66 36 |  if_ae	neg	_var01, #1
01f8c     00 32 06 F6 | 	mov	_var02, #0
01f90     90 0E 06 F1 | 	add	objptr, #144
01f94     07 35 02 FB | 	rdlong	_var03, objptr
01f98     05 34 66 F0 | 	shl	_var03, #5
01f9c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
01fa0     01 32 66 C6 |  if_b	neg	_var02, #1
01fa4     19 31 02 F5 | 	and	_var01, _var02
01fa8     00 36 06 F6 | 	mov	_var04, #0
01fac     00 5E 5E F2 | 	cmps	arg02, #0 wcz
01fb0     01 36 66 36 |  if_ae	neg	_var04, #1
01fb4     1B 31 02 F5 | 	and	_var01, _var04
01fb8     00 38 06 F6 | 	mov	_var05, #0
01fbc     04 0E 06 F1 | 	add	objptr, #4
01fc0     07 3B 02 FB | 	rdlong	_var06, objptr
01fc4     94 0E 86 F1 | 	sub	objptr, #148
01fc8     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
01fcc     01 38 66 C6 |  if_b	neg	_var05, #1
01fd0     1C 31 CA F7 | 	test	_var01, _var05 wz
01fd4     8C 00 90 AD |  if_e	jmp	#LR__0028
01fd8     90 0E 06 F1 | 	add	objptr, #144
01fdc     07 3D 02 FB | 	rdlong	_var07, objptr
01fe0     90 0E 86 F1 | 	sub	objptr, #144
01fe4     02 3C 66 F0 | 	shl	_var07, #2
01fe8     2F 3D 02 FD | 	qmul	_var07, arg02
01fec     18 3E 62 FD | 	getqx	_var08
01ff0     07 41 02 FB | 	rdlong	_var09, objptr
01ff4     1F 41 02 F1 | 	add	_var09, _var08
01ff8     2E 43 02 F6 | 	mov	_var10, arg01
01ffc     03 42 46 F0 | 	shr	_var10, #3
02000     21 41 02 F1 | 	add	_var09, _var10
02004                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02004     20 45 C2 FA | 	rdbyte	_var11, _var09
02008                 | '     if (c==0)
02008     00 60 0E F2 | 	cmp	arg03, #0 wz
0200c     18 00 90 5D |  if_ne	jmp	#LR__0026
02010     2E 31 52 F6 | 	abs	_var01, arg01 wc
02014     07 30 06 F5 | 	and	_var01, #7
02018     18 31 62 C6 |  if_b	neg	_var01, _var01
0201c     18 47 C2 F9 | 	decod	_var12, _var01
02020                 | '       b:=b & !(1<<(x//8))
02020     23 45 22 F5 | 	andn	_var11, _var12
02024                 | '     else
02024     14 00 90 FD | 	jmp	#LR__0027
02028                 | LR__0026
02028     2E 31 52 F6 | 	abs	_var01, arg01 wc
0202c     07 30 06 F5 | 	and	_var01, #7
02030     18 31 62 C6 |  if_b	neg	_var01, _var01
02034     18 49 C2 F9 | 	decod	_var13, _var01
02038                 | '       b:=b |(1<<(x//8))
02038     24 45 42 F5 | 	or	_var11, _var13
0203c                 | LR__0027
0203c     90 0E 06 F1 | 	add	objptr, #144
02040     07 4B 02 FB | 	rdlong	_var14, objptr
02044     90 0E 86 F1 | 	sub	objptr, #144
02048     02 4A 66 F0 | 	shl	_var14, #2
0204c     2F 4B 02 FD | 	qmul	_var14, arg02
02050     18 4C 62 FD | 	getqx	_var15
02054     07 4F 02 FB | 	rdlong	_var16, objptr
02058     26 4F 02 F1 | 	add	_var16, _var15
0205c     21 4F 02 F1 | 	add	_var16, _var10
02060                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02060     27 45 42 FC | 	wrbyte	_var11, _var16
02064                 | LR__0028
02064                 | _hng030rm_spin2_putpixel1_ret
02064     2D 00 64 FD | 	ret
02068                 | 
02068                 | ' 
02068                 | ' 
02068                 | ' pub putpixel2(x,y,c) |byte b
02068                 | _hng030rm_spin2_putpixel2
02068                 | ' 
02068                 | ' 
02068                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02068     00 30 06 F6 | 	mov	_var01, #0
0206c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02070     01 30 66 36 |  if_ae	neg	_var01, #1
02074     00 32 06 F6 | 	mov	_var02, #0
02078     90 0E 06 F1 | 	add	objptr, #144
0207c     07 35 02 FB | 	rdlong	_var03, objptr
02080     04 34 66 F0 | 	shl	_var03, #4
02084     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02088     01 32 66 C6 |  if_b	neg	_var02, #1
0208c     19 31 02 F5 | 	and	_var01, _var02
02090     00 36 06 F6 | 	mov	_var04, #0
02094     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02098     01 36 66 36 |  if_ae	neg	_var04, #1
0209c     1B 31 02 F5 | 	and	_var01, _var04
020a0     00 38 06 F6 | 	mov	_var05, #0
020a4     04 0E 06 F1 | 	add	objptr, #4
020a8     07 3B 02 FB | 	rdlong	_var06, objptr
020ac     94 0E 86 F1 | 	sub	objptr, #148
020b0     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
020b4     01 38 66 C6 |  if_b	neg	_var05, #1
020b8     1C 31 CA F7 | 	test	_var01, _var05 wz
020bc     7C 00 90 AD |  if_e	jmp	#LR__0029
020c0     90 0E 06 F1 | 	add	objptr, #144
020c4     07 3D 02 FB | 	rdlong	_var07, objptr
020c8     90 0E 86 F1 | 	sub	objptr, #144
020cc     02 3C 66 F0 | 	shl	_var07, #2
020d0     2F 3D 02 FD | 	qmul	_var07, arg02
020d4     18 3E 62 FD | 	getqx	_var08
020d8     07 41 02 FB | 	rdlong	_var09, objptr
020dc     1F 41 02 F1 | 	add	_var09, _var08
020e0     2E 43 02 F6 | 	mov	_var10, arg01
020e4     02 42 46 F0 | 	shr	_var10, #2
020e8     21 41 02 F1 | 	add	_var09, _var10
020ec                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
020ec     20 45 C2 FA | 	rdbyte	_var11, _var09
020f0     2E 31 52 F6 | 	abs	_var01, arg01 wc
020f4     03 30 06 F5 | 	and	_var01, #3
020f8     18 31 62 C6 |  if_b	neg	_var01, _var01
020fc     01 30 66 F0 | 	shl	_var01, #1
02100     03 46 06 F6 | 	mov	_var12, #3
02104     18 47 62 F0 | 	shl	_var12, _var01
02108                 | '     b:=b & !(%11<<((x//4)<<1))
02108     23 45 22 F5 | 	andn	_var11, _var12
0210c     18 61 62 F0 | 	shl	arg03, _var01
02110                 | '     b:=b |(c<<((x//4)<<1))
02110     30 45 42 F5 | 	or	_var11, arg03
02114     90 0E 06 F1 | 	add	objptr, #144
02118     07 49 02 FB | 	rdlong	_var13, objptr
0211c     90 0E 86 F1 | 	sub	objptr, #144
02120     02 48 66 F0 | 	shl	_var13, #2
02124     2F 49 02 FD | 	qmul	_var13, arg02
02128     18 4A 62 FD | 	getqx	_var14
0212c     07 4D 02 FB | 	rdlong	_var15, objptr
02130     25 4D 02 F1 | 	add	_var15, _var14
02134     21 4D 02 F1 | 	add	_var15, _var10
02138                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02138     26 45 42 FC | 	wrbyte	_var11, _var15
0213c                 | LR__0029
0213c                 | _hng030rm_spin2_putpixel2_ret
0213c     2D 00 64 FD | 	ret
02140                 | 
02140                 | ' 
02140                 | ' 
02140                 | ' pub putpixel4(x,y,c) |byte b
02140                 | _hng030rm_spin2_putpixel4
02140                 | ' 
02140                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02140     00 30 06 F6 | 	mov	_var01, #0
02144     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02148     01 30 66 36 |  if_ae	neg	_var01, #1
0214c     00 32 06 F6 | 	mov	_var02, #0
02150     90 0E 06 F1 | 	add	objptr, #144
02154     07 35 02 FB | 	rdlong	_var03, objptr
02158     04 34 66 F0 | 	shl	_var03, #4
0215c     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02160     01 32 66 C6 |  if_b	neg	_var02, #1
02164     19 31 02 F5 | 	and	_var01, _var02
02168     00 36 06 F6 | 	mov	_var04, #0
0216c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02170     01 36 66 36 |  if_ae	neg	_var04, #1
02174     1B 31 02 F5 | 	and	_var01, _var04
02178     00 38 06 F6 | 	mov	_var05, #0
0217c     04 0E 06 F1 | 	add	objptr, #4
02180     07 3B 02 FB | 	rdlong	_var06, objptr
02184     94 0E 86 F1 | 	sub	objptr, #148
02188     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
0218c     01 38 66 C6 |  if_b	neg	_var05, #1
02190     1C 31 CA F7 | 	test	_var01, _var05 wz
02194     7C 00 90 AD |  if_e	jmp	#LR__0030
02198     90 0E 06 F1 | 	add	objptr, #144
0219c     07 3D 02 FB | 	rdlong	_var07, objptr
021a0     90 0E 86 F1 | 	sub	objptr, #144
021a4     02 3C 66 F0 | 	shl	_var07, #2
021a8     2F 3D 02 FD | 	qmul	_var07, arg02
021ac     18 3E 62 FD | 	getqx	_var08
021b0     07 41 02 FB | 	rdlong	_var09, objptr
021b4     1F 41 02 F1 | 	add	_var09, _var08
021b8     2E 43 02 F6 | 	mov	_var10, arg01
021bc     01 42 46 F0 | 	shr	_var10, #1
021c0     21 41 02 F1 | 	add	_var09, _var10
021c4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
021c4     20 45 C2 FA | 	rdbyte	_var11, _var09
021c8     2E 31 52 F6 | 	abs	_var01, arg01 wc
021cc     01 30 06 F5 | 	and	_var01, #1
021d0     18 31 62 C6 |  if_b	neg	_var01, _var01
021d4     02 30 66 F0 | 	shl	_var01, #2
021d8     0F 46 06 F6 | 	mov	_var12, #15
021dc     18 47 62 F0 | 	shl	_var12, _var01
021e0                 | '     b:=b & !(%1111<<((x//2)<<2))
021e0     23 45 22 F5 | 	andn	_var11, _var12
021e4     18 61 62 F0 | 	shl	arg03, _var01
021e8                 | '     b:=b |(c<<((x//2)<<2))
021e8     30 45 42 F5 | 	or	_var11, arg03
021ec     90 0E 06 F1 | 	add	objptr, #144
021f0     07 49 02 FB | 	rdlong	_var13, objptr
021f4     90 0E 86 F1 | 	sub	objptr, #144
021f8     02 48 66 F0 | 	shl	_var13, #2
021fc     2F 49 02 FD | 	qmul	_var13, arg02
02200     18 4A 62 FD | 	getqx	_var14
02204     07 4D 02 FB | 	rdlong	_var15, objptr
02208     25 4D 02 F1 | 	add	_var15, _var14
0220c     21 4D 02 F1 | 	add	_var15, _var10
02210                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02210     26 45 42 FC | 	wrbyte	_var11, _var15
02214                 | LR__0030
02214                 | _hng030rm_spin2_putpixel4_ret
02214     2D 00 64 FD | 	ret
02218                 | 
02218                 | ' 
02218                 | ' 
02218                 | ' pub putpixel8(x,y,c)
02218                 | _hng030rm_spin2_putpixel8
02218                 | ' 
02218                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02218     00 30 06 F6 | 	mov	_var01, #0
0221c     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02220     01 30 66 36 |  if_ae	neg	_var01, #1
02224     00 32 06 F6 | 	mov	_var02, #0
02228     90 0E 06 F1 | 	add	objptr, #144
0222c     07 35 02 FB | 	rdlong	_var03, objptr
02230     02 34 66 F0 | 	shl	_var03, #2
02234     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02238     01 32 66 C6 |  if_b	neg	_var02, #1
0223c     19 31 02 F5 | 	and	_var01, _var02
02240     00 36 06 F6 | 	mov	_var04, #0
02244     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02248     01 36 66 36 |  if_ae	neg	_var04, #1
0224c     1B 31 02 F5 | 	and	_var01, _var04
02250     00 38 06 F6 | 	mov	_var05, #0
02254     04 0E 06 F1 | 	add	objptr, #4
02258     07 3B 02 FB | 	rdlong	_var06, objptr
0225c     94 0E 86 F1 | 	sub	objptr, #148
02260     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02264     01 38 66 C6 |  if_b	neg	_var05, #1
02268     1C 31 CA F7 | 	test	_var01, _var05 wz
0226c     28 00 90 AD |  if_e	jmp	#LR__0031
02270     90 0E 06 F1 | 	add	objptr, #144
02274     07 3D 02 FB | 	rdlong	_var07, objptr
02278     90 0E 86 F1 | 	sub	objptr, #144
0227c     02 3C 66 F0 | 	shl	_var07, #2
02280     2F 3D 02 FD | 	qmul	_var07, arg02
02284     18 3E 62 FD | 	getqx	_var08
02288     07 41 02 FB | 	rdlong	_var09, objptr
0228c     1F 41 02 F1 | 	add	_var09, _var08
02290     2E 41 02 F1 | 	add	_var09, arg01
02294                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02294     20 61 42 FC | 	wrbyte	arg03, _var09
02298                 | LR__0031
02298                 | _hng030rm_spin2_putpixel8_ret
02298     2D 00 64 FD | 	ret
0229c                 | 
0229c                 | ' 
0229c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
0229c                 | ' 
0229c                 | ' pub setbordercolor(r,g,b) | color
0229c                 | _hng030rm_spin2_setbordercolor
0229c     18 5C 66 F0 | 	shl	arg01, #24
022a0     10 5E 66 F0 | 	shl	arg02, #16
022a4     2F 5D 02 F1 | 	add	arg01, arg02
022a8     08 60 66 F0 | 	shl	arg03, #8
022ac     30 5D 02 F1 | 	add	arg01, arg03
022b0                 | ' 
022b0                 | ' color:=r<<24+g<<16+b<<8
022b0                 | ' bordercolor:=color
022b0     2C 0E 06 F1 | 	add	objptr, #44
022b4     07 5D 62 FC | 	wrlong	arg01, objptr
022b8     2C 0E 86 F1 | 	sub	objptr, #44
022bc                 | _hng030rm_spin2_setbordercolor_ret
022bc     2D 00 64 FD | 	ret
022c0                 | 
022c0                 | ' 
022c0                 | ' 
022c0                 | ' '*************************************************************************
022c0                 | ' '                                                                        *
022c0                 | ' '  Text functions                                                        *
022c0                 | ' '                                                                        *
022c0                 | ' '*************************************************************************
022c0                 | ' 
022c0                 | ' ''---------- Clear the screen, set its foreground/background color
022c0                 | ' 
022c0                 | ' pub cls(fc,bc)   :c
022c0                 | _hng030rm_spin2_cls
022c0     07 5A 05 F6 | 	mov	COUNT_, #7
022c4     B0 00 A0 FD | 	call	#pushregs_
022c8     2E 6B 02 F6 | 	mov	local01, arg01
022cc     2F 6D 02 F6 | 	mov	local02, arg02
022d0                 | ' 
022d0                 | ' if (graphmode<512)
022d0     C4 0E 06 F1 | 	add	objptr, #196
022d4     07 6F 02 FB | 	rdlong	local03, objptr
022d8     C4 0E 86 F1 | 	sub	objptr, #196
022dc     01 00 00 FF 
022e0     00 6E 5E F2 | 	cmps	local03, ##512 wcz
022e4     34 00 90 3D |  if_ae	jmp	#LR__0032
022e8     35 71 02 F6 | 	mov	local04, local01
022ec     18 70 66 F0 | 	shl	local04, #24
022f0     36 73 02 F6 | 	mov	local05, local02
022f4     10 72 66 F0 | 	shl	local05, #16
022f8     39 71 02 F1 | 	add	local04, local05
022fc     20 70 06 F1 | 	add	local04, #32
02300                 | '   c:=fc<<24+bc<<16+$20
02300                 | '   longfill(buf_ptr,c,buflen)
02300     07 5D 02 FB | 	rdlong	arg01, objptr
02304     30 0E 06 F1 | 	add	objptr, #48
02308     07 61 02 FB | 	rdlong	arg03, objptr
0230c     30 0E 86 F1 | 	sub	objptr, #48
02310     38 5F 02 F6 | 	mov	arg02, local04
02314     A8 00 A0 FD | 	call	#\builtin_longfill_
02318                 | ' else
02318     AC 00 90 FD | 	jmp	#LR__0038
0231c                 | LR__0032
0231c                 | '   if (graphmode & 48) ==48
0231c     C4 0E 06 F1 | 	add	objptr, #196
02320     07 6F 02 FB | 	rdlong	local03, objptr
02324     C4 0E 86 F1 | 	sub	objptr, #196
02328     30 6E 06 F5 | 	and	local03, #48
0232c     30 6E 0E F2 | 	cmp	local03, #48 wz
02330                 | '     c:=bc
02330     36 71 02 A6 |  if_e	mov	local04, local02
02334     74 00 90 AD |  if_e	jmp	#LR__0037
02338                 | '   elseif (graphmode & 48) ==32
02338     C4 0E 06 F1 | 	add	objptr, #196
0233c     07 6F 02 FB | 	rdlong	local03, objptr
02340     C4 0E 86 F1 | 	sub	objptr, #196
02344     30 6E 06 F5 | 	and	local03, #48
02348     20 6E 0E F2 | 	cmp	local03, #32 wz
0234c     10 00 90 5D |  if_ne	jmp	#LR__0033
02350     36 71 02 F6 | 	mov	local04, local02
02354     04 70 66 F0 | 	shl	local04, #4
02358     36 71 02 F1 | 	add	local04, local02
0235c                 | '     c:=bc<<4+bc
0235c     4C 00 90 FD | 	jmp	#LR__0036
02360                 | LR__0033
02360                 | '   elseif (graphmode & 48) ==16
02360     C4 0E 06 F1 | 	add	objptr, #196
02364     07 6F 02 FB | 	rdlong	local03, objptr
02368     C4 0E 86 F1 | 	sub	objptr, #196
0236c     30 6E 06 F5 | 	and	local03, #48
02370     10 6E 0E F2 | 	cmp	local03, #16 wz
02374     28 00 90 5D |  if_ne	jmp	#LR__0034
02378     36 71 02 F6 | 	mov	local04, local02
0237c     06 70 66 F0 | 	shl	local04, #6
02380     36 75 02 F6 | 	mov	local06, local02
02384     04 74 66 F0 | 	shl	local06, #4
02388     3A 71 02 F1 | 	add	local04, local06
0238c     36 77 02 F6 | 	mov	local07, local02
02390     02 76 66 F0 | 	shl	local07, #2
02394     3B 71 02 F1 | 	add	local04, local07
02398     36 71 02 F1 | 	add	local04, local02
0239c                 | '     c:=bc<<6+bc<<4+bc<<2+bc
0239c                 | '   else
0239c     0C 00 90 FD | 	jmp	#LR__0035
023a0                 | LR__0034
023a0                 | '     if bc==1
023a0     01 6C 0E F2 | 	cmp	local02, #1 wz
023a4                 | '       c:=255
023a4     FF 70 06 A6 |  if_e	mov	local04, #255
023a8                 | '     else
023a8                 | '       c:=0
023a8     00 70 06 56 |  if_ne	mov	local04, #0
023ac                 | LR__0035
023ac                 | LR__0036
023ac                 | LR__0037
023ac     30 0E 06 F1 | 	add	objptr, #48
023b0     07 61 02 FB | 	rdlong	arg03, objptr
023b4     30 0E 86 F1 | 	sub	objptr, #48
023b8     02 60 66 F0 | 	shl	arg03, #2
023bc                 | '   bytefill(buf_ptr,c,buflen*4)
023bc     07 5D 02 FB | 	rdlong	arg01, objptr
023c0     38 5F 02 F6 | 	mov	arg02, local04
023c4     A0 00 A0 FD | 	call	#\builtin_bytefill_
023c8                 | LR__0038
023c8                 | ' setwritecolors(fc,bc)
023c8                 | ' 
023c8                 | ' 
023c8                 | ' write_color:=ff
023c8     38 0E 06 F1 | 	add	objptr, #56
023cc     07 6B 62 FC | 	wrlong	local01, objptr
023d0                 | ' write_background:=bb
023d0     04 0E 06 F1 | 	add	objptr, #4
023d4     07 6D 62 FC | 	wrlong	local02, objptr
023d8                 | ' cursor_x:=0
023d8     08 0E 86 F1 | 	sub	objptr, #8
023dc     07 01 48 FC | 	wrbyte	#0, objptr
023e0                 | ' cursor_y:=0
023e0     01 0E 06 F1 | 	add	objptr, #1
023e4     07 01 48 FC | 	wrbyte	#0, objptr
023e8     35 0E 86 F1 | 	sub	objptr, #53
023ec     38 2B 02 F6 | 	mov	result1, local04
023f0     AF F0 03 F6 | 	mov	ptra, fp
023f4     BF 00 A0 FD | 	call	#popregs_
023f8                 | _hng030rm_spin2_cls_ret
023f8     2D 00 64 FD | 	ret
023fc                 | 
023fc                 | ' 
023fc                 | ' ''--------- Output a string at position x,y without changing colors
023fc                 | ' 
023fc                 | ' pub outtextxy(x,y,text) | iii
023fc                 | _hng030rm_spin2_outtextxy
023fc     0B 5A 05 F6 | 	mov	COUNT_, #11
02400     B0 00 A0 FD | 	call	#pushregs_
02404     2E 6B 02 F6 | 	mov	local01, arg01
02408                 | ' 
02408                 | ' repeat iii from 0 to strsize(text)-1
02408     00 6C 06 F6 | 	mov	local02, #0
0240c     30 5D 02 F6 | 	mov	arg01, arg03
02410     00 6E 06 F6 | 	mov	local03, #0
02414     F8 DB 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
02418     93 00 A0 FD | 	call	#FCACHE_LOAD_
0241c                 | LR__0039
0241c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
02420     01 6E 06 51 |  if_ne	add	local03, #1
02424     01 5C 06 51 |  if_ne	add	arg01, #1
02428     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
0242c                 | LR__0040
0242c     37 2B 02 F6 | 	mov	result1, local03
02430     15 73 02 F6 | 	mov	local05, result1
02434     01 72 86 F1 | 	sub	local05, #1
02438     00 72 5E F2 | 	cmps	local05, #0 wcz
0243c     01 74 06 16 |  if_a	mov	local06, #1
02440     01 74 66 E6 |  if_be	neg	local06, #1
02444     3A 73 02 F1 | 	add	local05, local06
02448     04 DC 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
0244c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02450                 | LR__0041
02450     90 0E 06 F1 | 	add	objptr, #144
02454     07 77 02 FB | 	rdlong	local07, objptr
02458     90 0E 86 F1 | 	sub	objptr, #144
0245c     2F 77 02 FD | 	qmul	local07, arg02
02460     18 78 62 FD | 	getqx	local08
02464     35 79 02 F1 | 	add	local08, local01
02468     36 79 02 F1 | 	add	local08, local02
0246c     02 78 66 F0 | 	shl	local08, #2
02470     07 7B 02 FB | 	rdlong	local09, objptr
02474     3C 7B 02 F1 | 	add	local09, local08
02478     3D 7D 02 FB | 	rdlong	local10, local09
0247c     FF 7C 26 F5 | 	andn	local10, #255
02480     30 7F 02 F6 | 	mov	local11, arg03
02484     36 7F 02 F1 | 	add	local11, local02
02488     3F 77 C2 FA | 	rdbyte	local07, local11
0248c     3B 7D 42 F5 | 	or	local10, local07
02490                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02490     3D 7D 62 FC | 	wrlong	local10, local09
02494     3A 6D 02 F1 | 	add	local02, local06
02498     39 6D 0A F2 | 	cmp	local02, local05 wz
0249c     B0 FF 9F 5D |  if_ne	jmp	#LR__0041
024a0                 | LR__0042
024a0     AF F0 03 F6 | 	mov	ptra, fp
024a4     BF 00 A0 FD | 	call	#popregs_
024a8                 | _hng030rm_spin2_outtextxy_ret
024a8     2D 00 64 FD | 	ret
024ac                 | 
024ac                 | ' 
024ac                 | ' ''---------- Output a char at the cursor position, move the cursor
024ac                 | ' 
024ac                 | ' pub putchar(achar) | c,x,y
024ac                 | _hng030rm_spin2_putchar
024ac     12 5A 05 F6 | 	mov	COUNT_, #18
024b0     B0 00 A0 FD | 	call	#pushregs_
024b4     2E 6B 02 F6 | 	mov	local01, arg01
024b8                 | ' 
024b8                 | ' if achar==10
024b8     0A 6A 0E F2 | 	cmp	local01, #10 wz
024bc     58 00 90 5D |  if_ne	jmp	#LR__0043
024c0                 | '   crlf()
024c0                 | ' 
024c0                 | ' cursor_x:=0
024c0     34 0E 06 F1 | 	add	objptr, #52
024c4     07 01 48 FC | 	wrbyte	#0, objptr
024c8                 | ' cursor_y+=1
024c8     01 0E 06 F1 | 	add	objptr, #1
024cc     07 6D C2 FA | 	rdbyte	local02, objptr
024d0     01 6C 06 F1 | 	add	local02, #1
024d4     07 6D 42 FC | 	wrbyte	local02, objptr
024d8                 | ' if cursor_y>lines-1
024d8     5F 0E 06 F1 | 	add	objptr, #95
024dc     07 6D 02 FB | 	rdlong	local02, objptr
024e0     01 6C 86 F1 | 	sub	local02, #1
024e4     5F 0E 86 F1 | 	sub	objptr, #95
024e8     07 6F C2 FA | 	rdbyte	local03, objptr
024ec     35 0E 86 F1 | 	sub	objptr, #53
024f0     36 6F 5A F2 | 	cmps	local03, local02 wcz
024f4     38 01 90 ED |  if_be	jmp	#LR__0046
024f8                 | '   scrollup()
024f8     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
024fc     94 0E 06 F1 | 	add	objptr, #148
02500     07 71 02 FB | 	rdlong	local04, objptr
02504     01 70 86 F1 | 	sub	local04, #1
02508                 | '   cursor_y:=lines-1
02508     5F 0E 86 F1 | 	sub	objptr, #95
0250c     07 71 42 FC | 	wrbyte	local04, objptr
02510     35 0E 86 F1 | 	sub	objptr, #53
02514                 | ' else  
02514     18 01 90 FD | 	jmp	#LR__0046
02518                 | LR__0043
02518                 | '   x:=cursor_x
02518     34 0E 06 F1 | 	add	objptr, #52
0251c     07 73 C2 FA | 	rdbyte	local05, objptr
02520                 | '   y:=cursor_y
02520     01 0E 06 F1 | 	add	objptr, #1
02524     07 75 C2 FA | 	rdbyte	local06, objptr
02528     03 0E 06 F1 | 	add	objptr, #3
0252c     07 77 02 FB | 	rdlong	local07, objptr
02530     18 76 66 F0 | 	shl	local07, #24
02534     04 0E 06 F1 | 	add	objptr, #4
02538     07 79 02 FB | 	rdlong	local08, objptr
0253c     10 78 66 F0 | 	shl	local08, #16
02540     3C 77 02 F1 | 	add	local07, local08
02544                 | '   c:=write_color<<24+write_background<<16
02544     54 0E 06 F1 | 	add	objptr, #84
02548     07 7B 02 FB | 	rdlong	local09, objptr
0254c     90 0E 86 F1 | 	sub	objptr, #144
02550     3A 7B 02 FD | 	qmul	local09, local06
02554     18 7C 62 FD | 	getqx	local10
02558     39 7D 02 F1 | 	add	local10, local05
0255c     02 7C 66 F0 | 	shl	local10, #2
02560     07 7F 02 FB | 	rdlong	local11, objptr
02564     3E 7F 02 F1 | 	add	local11, local10
02568     3F 81 02 FB | 	rdlong	local12, local11
0256c     7F 00 00 FF 
02570     FF 81 06 F5 | 	and	local12, ##65535
02574     3B 81 42 F5 | 	or	local12, local07
02578                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02578     3F 81 62 FC | 	wrlong	local12, local11
0257c     90 0E 06 F1 | 	add	objptr, #144
02580     07 7B 02 FB | 	rdlong	local09, objptr
02584     90 0E 86 F1 | 	sub	objptr, #144
02588     3A 7B 02 FD | 	qmul	local09, local06
0258c     18 82 62 FD | 	getqx	local13
02590     39 83 02 F1 | 	add	local13, local05
02594     02 82 66 F0 | 	shl	local13, #2
02598     07 85 02 FB | 	rdlong	local14, objptr
0259c     41 85 02 F1 | 	add	local14, local13
025a0     42 87 02 FB | 	rdlong	local15, local14
025a4     FF 86 26 F5 | 	andn	local15, #255
025a8     FF 6A 06 F5 | 	and	local01, #255
025ac     35 87 42 F5 | 	or	local15, local01
025b0                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
025b0     42 87 62 FC | 	wrlong	local15, local14
025b4                 | '   cursor_x+=1
025b4     34 0E 06 F1 | 	add	objptr, #52
025b8     07 89 C2 FA | 	rdbyte	local16, objptr
025bc     01 88 06 F1 | 	add	local16, #1
025c0     07 89 42 FC | 	wrbyte	local16, objptr
025c4                 | '   if cursor_x==cpl
025c4     07 89 C2 FA | 	rdbyte	local16, objptr
025c8     5C 0E 06 F1 | 	add	objptr, #92
025cc     07 8B 02 FB | 	rdlong	local17, objptr
025d0     90 0E 86 F1 | 	sub	objptr, #144
025d4     45 89 0A F2 | 	cmp	local16, local17 wz
025d8     54 00 90 5D |  if_ne	jmp	#LR__0045
025dc                 | '     cursor_x:=0
025dc     34 0E 06 F1 | 	add	objptr, #52
025e0     07 01 48 FC | 	wrbyte	#0, objptr
025e4                 | '     cursor_y+=1
025e4     01 0E 06 F1 | 	add	objptr, #1
025e8     07 89 C2 FA | 	rdbyte	local16, objptr
025ec     01 88 06 F1 | 	add	local16, #1
025f0     07 89 42 FC | 	wrbyte	local16, objptr
025f4                 | '     if cursor_y>lines-1
025f4     5F 0E 06 F1 | 	add	objptr, #95
025f8     07 89 02 FB | 	rdlong	local16, objptr
025fc     01 88 86 F1 | 	sub	local16, #1
02600     5F 0E 86 F1 | 	sub	objptr, #95
02604     07 8B C2 FA | 	rdbyte	local17, objptr
02608     35 0E 86 F1 | 	sub	objptr, #53
0260c     44 8B 5A F2 | 	cmps	local17, local16 wcz
02610     1C 00 90 ED |  if_be	jmp	#LR__0044
02614                 | '       scrollup()
02614     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02618     94 0E 06 F1 | 	add	objptr, #148
0261c     07 8D 02 FB | 	rdlong	local18, objptr
02620     01 8C 86 F1 | 	sub	local18, #1
02624                 | '       cursor_y:=lines-1
02624     5F 0E 86 F1 | 	sub	objptr, #95
02628     07 8D 42 FC | 	wrbyte	local18, objptr
0262c     35 0E 86 F1 | 	sub	objptr, #53
02630                 | LR__0044
02630                 | LR__0045
02630                 | LR__0046
02630     AF F0 03 F6 | 	mov	ptra, fp
02634     BF 00 A0 FD | 	call	#popregs_
02638                 | _hng030rm_spin2_putchar_ret
02638     2D 00 64 FD | 	ret
0263c                 | 
0263c                 | ' 
0263c                 | ' ''--------- Output a string at the cursor position, move the cursor
0263c                 | ' 
0263c                 | ' pub write(text) | iii,c,ncx,ncy
0263c                 | _hng030rm_spin2_write
0263c     11 5A 05 F6 | 	mov	COUNT_, #17
02640     B0 00 A0 FD | 	call	#pushregs_
02644     2E 6B 02 F6 | 	mov	local01, arg01
02648     38 0E 06 F1 | 	add	objptr, #56
0264c     07 6D 02 FB | 	rdlong	local02, objptr
02650     18 6C 66 F0 | 	shl	local02, #24
02654     04 0E 06 F1 | 	add	objptr, #4
02658     07 6F 02 FB | 	rdlong	local03, objptr
0265c     10 6E 66 F0 | 	shl	local03, #16
02660     37 6D 02 F1 | 	add	local02, local03
02664                 | ' 
02664                 | ' c:=write_color<<24+write_background<<16
02664                 | ' 'debug(uhex_long(write_color))
02664                 | ' ncy:=cursor_y
02664     07 0E 86 F1 | 	sub	objptr, #7
02668     07 71 C2 FA | 	rdbyte	local04, objptr
0266c                 | ' ncx:=cursor_x+strsize(text)
0266c     01 0E 86 F1 | 	sub	objptr, #1
02670     07 73 C2 FA | 	rdbyte	local05, objptr
02674     34 0E 86 F1 | 	sub	objptr, #52
02678     35 5D 02 F6 | 	mov	arg01, local01
0267c     00 74 06 F6 | 	mov	local06, #0
02680     8C D9 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
02684     93 00 A0 FD | 	call	#FCACHE_LOAD_
02688                 | LR__0047
02688     2E 77 CA FA | 	rdbyte	local07, arg01 wz
0268c     01 74 06 51 |  if_ne	add	local06, #1
02690     01 5C 06 51 |  if_ne	add	arg01, #1
02694     F0 FF 9F 5D |  if_ne	jmp	#LR__0047
02698                 | LR__0048
02698     3A 2B 02 F6 | 	mov	result1, local06
0269c     3A 73 02 F1 | 	add	local05, local06
026a0     39 79 02 F6 | 	mov	local08, local05
026a4     88 D9 9F FE | 	loc	pa,	#(@LR__0050-@LR__0049)
026a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
026ac                 | ' repeat while ncx>cpl-1
026ac                 | LR__0049
026ac     90 0E 06 F1 | 	add	objptr, #144
026b0     07 73 02 FB | 	rdlong	local05, objptr
026b4     90 0E 86 F1 | 	sub	objptr, #144
026b8     01 72 86 F1 | 	sub	local05, #1
026bc     39 79 5A F2 | 	cmps	local08, local05 wcz
026c0     18 00 90 ED |  if_be	jmp	#LR__0051
026c4                 | '   ncx-=cpl
026c4     90 0E 06 F1 | 	add	objptr, #144
026c8     07 7B 02 FB | 	rdlong	local09, objptr
026cc     90 0E 86 F1 | 	sub	objptr, #144
026d0     3D 79 82 F1 | 	sub	local08, local09
026d4                 | '   ncy+=1
026d4     01 70 06 F1 | 	add	local04, #1
026d8     D0 FF 9F FD | 	jmp	#LR__0049
026dc                 | LR__0050
026dc                 | LR__0051
026dc                 | ' repeat while ncy>lines-1
026dc                 | LR__0052
026dc     94 0E 06 F1 | 	add	objptr, #148
026e0     07 73 02 FB | 	rdlong	local05, objptr
026e4     94 0E 86 F1 | 	sub	objptr, #148
026e8     01 72 86 F1 | 	sub	local05, #1
026ec     39 71 5A F2 | 	cmps	local04, local05 wcz
026f0     20 00 90 ED |  if_be	jmp	#LR__0053
026f4                 | '   ncy-=1
026f4     01 70 86 F1 | 	sub	local04, #1
026f8                 | '   scrollup()
026f8     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
026fc                 | '   cursor_y-=1
026fc     35 0E 06 F1 | 	add	objptr, #53
02700     07 73 C2 FA | 	rdbyte	local05, objptr
02704     01 72 86 F1 | 	sub	local05, #1
02708     07 73 42 FC | 	wrbyte	local05, objptr
0270c     35 0E 86 F1 | 	sub	objptr, #53
02710     C8 FF 9F FD | 	jmp	#LR__0052
02714                 | LR__0053
02714                 | ' 
02714                 | ' repeat iii from 0 to strsize(text)-1
02714     00 7C 06 F6 | 	mov	local10, #0
02718     35 5D 02 F6 | 	mov	arg01, local01
0271c     00 74 06 F6 | 	mov	local06, #0
02720     EC D8 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
02724     93 00 A0 FD | 	call	#FCACHE_LOAD_
02728                 | LR__0054
02728     2E 77 CA FA | 	rdbyte	local07, arg01 wz
0272c     01 74 06 51 |  if_ne	add	local06, #1
02730     01 5C 06 51 |  if_ne	add	arg01, #1
02734     F0 FF 9F 5D |  if_ne	jmp	#LR__0054
02738                 | LR__0055
02738     3A 2B 02 F6 | 	mov	result1, local06
0273c     15 7F 02 F6 | 	mov	local11, result1
02740     01 7E 86 F1 | 	sub	local11, #1
02744     00 7E 5E F2 | 	cmps	local11, #0 wcz
02748     01 80 06 16 |  if_a	mov	local12, #1
0274c     01 80 66 E6 |  if_be	neg	local12, #1
02750     40 7F 02 F1 | 	add	local11, local12
02754     00 D9 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
02758     93 00 A0 FD | 	call	#FCACHE_LOAD_
0275c                 | LR__0056
0275c     90 0E 06 F1 | 	add	objptr, #144
02760     07 83 02 FB | 	rdlong	local13, objptr
02764     5B 0E 86 F1 | 	sub	objptr, #91
02768     07 85 C2 FA | 	rdbyte	local14, objptr
0276c     42 83 02 FD | 	qmul	local13, local14
02770     18 86 62 FD | 	getqx	local15
02774     01 0E 86 F1 | 	sub	objptr, #1
02778     07 83 C2 FA | 	rdbyte	local13, objptr
0277c     34 0E 86 F1 | 	sub	objptr, #52
02780     41 87 02 F1 | 	add	local15, local13
02784     3E 87 02 F1 | 	add	local15, local10
02788     02 86 66 F0 | 	shl	local15, #2
0278c     07 89 02 FB | 	rdlong	local16, objptr
02790     43 89 02 F1 | 	add	local16, local15
02794     44 8B 02 FB | 	rdlong	local17, local16
02798     7F 00 00 FF 
0279c     FF 8B 06 F5 | 	and	local17, ##65535
027a0     36 8B 42 F5 | 	or	local17, local02
027a4                 | ' 
027a4                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
027a4     44 8B 62 FC | 	wrlong	local17, local16
027a8     40 7D 02 F1 | 	add	local10, local12
027ac     3F 7D 0A F2 | 	cmp	local10, local11 wz
027b0     A8 FF 9F 5D |  if_ne	jmp	#LR__0056
027b4                 | LR__0057
027b4                 | ' 
027b4                 | ' outtextxy(cursor_x,cursor_y,text)
027b4     34 0E 06 F1 | 	add	objptr, #52
027b8     07 5D C2 FA | 	rdbyte	arg01, objptr
027bc     01 0E 06 F1 | 	add	objptr, #1
027c0     07 5F C2 FA | 	rdbyte	arg02, objptr
027c4     35 0E 86 F1 | 	sub	objptr, #53
027c8     35 61 02 F6 | 	mov	arg03, local01
027cc     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
027d0                 | ' 
027d0                 | ' cursor_x:=ncx
027d0     34 0E 06 F1 | 	add	objptr, #52
027d4     07 79 42 FC | 	wrbyte	local08, objptr
027d8                 | ' cursor_y:=ncy
027d8     01 0E 06 F1 | 	add	objptr, #1
027dc     07 71 42 FC | 	wrbyte	local04, objptr
027e0     35 0E 86 F1 | 	sub	objptr, #53
027e4     AF F0 03 F6 | 	mov	ptra, fp
027e8     BF 00 A0 FD | 	call	#popregs_
027ec                 | _hng030rm_spin2_write_ret
027ec     2D 00 64 FD | 	ret
027f0                 | 
027f0                 | ' 
027f0                 | ' ''-----------  Scroll the screen one line up
027f0                 | ' 
027f0                 | ' pub scrollup() | i
027f0                 | _hng030rm_spin2_scrollup
027f0     0A 5A 05 F6 | 	mov	COUNT_, #10
027f4     B0 00 A0 FD | 	call	#pushregs_
027f8     90 0E 06 F1 | 	add	objptr, #144
027fc     07 6B 02 FB | 	rdlong	local01, objptr
02800     90 0E 86 F1 | 	sub	objptr, #144
02804     02 6A 66 F0 | 	shl	local01, #2
02808     07 5F 02 FB | 	rdlong	arg02, objptr
0280c     35 5F 02 F1 | 	add	arg02, local01
02810     30 0E 06 F1 | 	add	objptr, #48
02814     07 61 02 FB | 	rdlong	arg03, objptr
02818     60 0E 06 F1 | 	add	objptr, #96
0281c     07 6D 02 FB | 	rdlong	local02, objptr
02820     90 0E 86 F1 | 	sub	objptr, #144
02824     36 61 82 F1 | 	sub	arg03, local02
02828                 | ' 
02828                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02828     07 5D 02 FB | 	rdlong	arg01, objptr
0282c     EC 35 B0 FD | 	call	#__system__longmove
02830                 | ' repeat i from buflen-cpl to buflen-1
02830     30 0E 06 F1 | 	add	objptr, #48
02834     07 6F 02 FB | 	rdlong	local03, objptr
02838     60 0E 06 F1 | 	add	objptr, #96
0283c     07 6D 02 FB | 	rdlong	local02, objptr
02840     36 6F 82 F1 | 	sub	local03, local02
02844     60 0E 86 F1 | 	sub	objptr, #96
02848     07 71 02 FB | 	rdlong	local04, objptr
0284c     01 70 86 F1 | 	sub	local04, #1
02850     07 73 02 FB | 	rdlong	local05, objptr
02854     60 0E 06 F1 | 	add	objptr, #96
02858     07 75 02 FB | 	rdlong	local06, objptr
0285c     90 0E 86 F1 | 	sub	objptr, #144
02860     3A 73 82 F1 | 	sub	local05, local06
02864     39 71 5A F2 | 	cmps	local04, local05 wcz
02868     01 76 06 16 |  if_a	mov	local07, #1
0286c     01 76 66 E6 |  if_be	neg	local07, #1
02870     3B 71 02 F1 | 	add	local04, local07
02874     B8 D7 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
02878     93 00 A0 FD | 	call	#FCACHE_LOAD_
0287c                 | LR__0058
0287c     37 79 02 F6 | 	mov	local08, local03
02880     02 78 66 F0 | 	shl	local08, #2
02884     07 7B 02 FB | 	rdlong	local09, objptr
02888     3C 7B 02 F1 | 	add	local09, local08
0288c     3D 7D 02 FB | 	rdlong	local10, local09
02890     80 FF 7F FF 
02894     00 7C 06 F5 | 	and	local10, ##-65536
02898     20 7C 46 F5 | 	or	local10, #32
0289c                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
0289c     3D 7D 62 FC | 	wrlong	local10, local09
028a0     3B 6F 02 F1 | 	add	local03, local07
028a4     38 6F 0A F2 | 	cmp	local03, local04 wz
028a8     D0 FF 9F 5D |  if_ne	jmp	#LR__0058
028ac                 | LR__0059
028ac     AF F0 03 F6 | 	mov	ptra, fp
028b0     BF 00 A0 FD | 	call	#popregs_
028b4                 | _hng030rm_spin2_scrollup_ret
028b4     2D 00 64 FD | 	ret
028b8                 | 
028b8                 | ' 
028b8                 | ' 
028b8                 | ' 
028b8                 | ' pub inttostr2(i,d):result |q,pos,k,j
028b8                 | _hng030rm_spin2_inttostr2
028b8                 | ' 
028b8                 | ' j:=i
028b8     2F 31 02 F6 | 	mov	_var01, arg02
028bc     01 30 86 F1 | 	sub	_var01, #1
028c0                 | ' pos:=d-1
028c0     18 33 02 F6 | 	mov	_var02, _var01
028c4                 | ' k:=0
028c4     44 0E 06 F1 | 	add	objptr, #68
028c8     07 5F 02 F1 | 	add	arg02, objptr
028cc                 | ' 
028cc                 | ' n_string[d]:=0
028cc     2F 01 48 FC | 	wrbyte	#0, arg02
028d0                 | ' repeat k from 0 to d-1
028d0     00 34 06 F6 | 	mov	_var03, #0
028d4     00 30 5E F2 | 	cmps	_var01, #0 wcz
028d8     44 0E 86 F1 | 	sub	objptr, #68
028dc     01 36 06 16 |  if_a	mov	_var04, #1
028e0     01 36 66 E6 |  if_be	neg	_var04, #1
028e4     1B 31 02 F1 | 	add	_var01, _var04
028e8     34 D7 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
028ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
028f0                 | LR__0060
028f0     1A 39 02 F6 | 	mov	_var05, _var03
028f4     44 0E 06 F1 | 	add	objptr, #68
028f8     07 39 02 F1 | 	add	_var05, objptr
028fc                 | '   n_string[k]:=48
028fc     1C 61 48 FC | 	wrbyte	#48, _var05
02900     1B 35 02 F1 | 	add	_var03, _var04
02904     18 35 0A F2 | 	cmp	_var03, _var01 wz
02908     44 0E 86 F1 | 	sub	objptr, #68
0290c     E0 FF 9F 5D |  if_ne	jmp	#LR__0060
02910                 | LR__0061
02910                 | ' 
02910                 | ' if (j<>0)
02910     00 5C 0E F2 | 	cmp	arg01, #0 wz
02914     40 00 90 AD |  if_e	jmp	#LR__0064
02918                 | ' 
02918                 | '   repeat while (pos>-1)
02918                 | LR__0062
02918     FF FF 7F FF 
0291c     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
02920     34 00 90 ED |  if_be	jmp	#LR__0063
02924     2E 0B 03 F6 | 	mov	muldiva_, arg01
02928     0A 0C 07 F6 | 	mov	muldivb_, #10
0292c     CC 00 A0 FD | 	call	#unsdivide_
02930     85 3B 02 F6 | 	mov	_var06, muldiva_
02934                 | '     q:=j+//10
02934                 | '     q:=48+q
02934     30 3A 06 F1 | 	add	_var06, #48
02938     19 3D 02 F6 | 	mov	_var07, _var02
0293c     44 0E 06 F1 | 	add	objptr, #68
02940     07 3D 02 F1 | 	add	_var07, objptr
02944                 | '     n_string[pos]:=q
02944     1E 3B 42 FC | 	wrbyte	_var06, _var07
02948                 | '     j:=j+/10
02948     86 5D 02 F6 | 	mov	arg01, muldivb_
0294c                 | '     pos-=1
0294c     01 32 86 F1 | 	sub	_var02, #1
02950     44 0E 86 F1 | 	sub	objptr, #68
02954     C0 FF 9F FD | 	jmp	#LR__0062
02958                 | LR__0063
02958                 | LR__0064
02958     44 0E 06 F1 | 	add	objptr, #68
0295c     07 2B 02 F6 | 	mov	result1, objptr
02960     44 0E 86 F1 | 	sub	objptr, #68
02964                 | ' 
02964                 | ' 
02964                 | ' q:=@n_string
02964                 | ' return q
02964                 | _hng030rm_spin2_inttostr2_ret
02964     2D 00 64 FD | 	ret
02968                 | 
02968                 | ' 
02968                 | ' 
02968                 | ' 
02968                 | ' '*************************************************************************
02968                 | ' '                                                                        *
02968                 | ' '  Mode setting and driver start                                                          *
02968                 | ' '                                                                        *
02968                 | ' '*************************************************************************
02968                 | ' 
02968                 | ' ''---------  Set the graphics mode
02968                 | ' 
02968                 | ' 
02968                 | ' 
02968                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02968                 | _hng030rm_spin2_setmode
02968     50 5A 05 F6 | 	mov	COUNT_, #80
0296c     B0 00 A0 FD | 	call	#pushregs_
02970     2E 6B 02 F6 | 	mov	local01, arg01
02974                 | ' 
02974                 | ' '' mode:tn_bb_cc_vv_hh
02974                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02974                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02974                 | ' 
02974                 | ' if mode==(512+192+48)
02974     01 00 00 FF 
02978     F0 6A 0E F2 | 	cmp	local01, ##752 wz
0297c                 | '   return 'no RAM
0297c     1C 0A 90 AD |  if_e	jmp	#LR__0105
02980                 | ' 
02980                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02980     35 6D 02 F6 | 	mov	local02, local01
02984     06 6C 46 F0 | 	shr	local02, #6
02988     07 6C 06 F5 | 	and	local02, #7
0298c     08 6C 26 F3 | 	fle	local02, #8
02990     36 6F 02 F6 | 	mov	local03, local02
02994     30 6E 62 FD | 	jmprel	local03
02998                 | LR__0065
02998     20 00 90 FD | 	jmp	#LR__0066
0299c     58 00 90 FD | 	jmp	#LR__0067
029a0     90 00 90 FD | 	jmp	#LR__0068
029a4     C8 00 90 FD | 	jmp	#LR__0069
029a8     00 01 90 FD | 	jmp	#LR__0070
029ac     38 01 90 FD | 	jmp	#LR__0071
029b0     70 01 90 FD | 	jmp	#LR__0072
029b4     A8 01 90 FD | 	jmp	#LR__0073
029b8     E4 01 90 FD | 	jmp	#LR__0074
029bc                 | LR__0066
029bc                 | ' 
029bc                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
029bc     50 0E 06 F1 | 	add	objptr, #80
029c0     07 5D 02 F6 | 	mov	arg01, objptr
029c4     50 0E 86 F1 | 	sub	objptr, #80
029c8     0E 00 00 FF 
029cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
029d0     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029d4     38 73 02 F6 | 	mov	local05, local04
029d8     10 74 06 F6 | 	mov	local06, #16
029dc     39 5F 02 F6 | 	mov	arg02, local05
029e0     10 60 06 F6 | 	mov	arg03, #16
029e4     0E 00 00 FF 
029e8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029ec     2C 34 B0 FD | 	call	#__system__longmove
029f0     15 77 02 F6 | 	mov	local07, result1
029f4     A8 01 90 FD | 	jmp	#LR__0074
029f8                 | LR__0067
029f8                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
029f8     50 0E 06 F1 | 	add	objptr, #80
029fc     07 5D 02 F6 | 	mov	arg01, objptr
02a00     50 0E 86 F1 | 	sub	objptr, #80
02a04     0E 00 00 FF 
02a08     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02a0c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a10     38 73 02 F6 | 	mov	local05, local04
02a14     10 74 06 F6 | 	mov	local06, #16
02a18     39 5F 02 F6 | 	mov	arg02, local05
02a1c     10 60 06 F6 | 	mov	arg03, #16
02a20     0E 00 00 FF 
02a24     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02a28     F0 33 B0 FD | 	call	#__system__longmove
02a2c     15 77 02 F6 | 	mov	local07, result1
02a30     6C 01 90 FD | 	jmp	#LR__0074
02a34                 | LR__0068
02a34                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02a34     50 0E 06 F1 | 	add	objptr, #80
02a38     07 5D 02 F6 | 	mov	arg01, objptr
02a3c     50 0E 86 F1 | 	sub	objptr, #80
02a40     0E 00 00 FF 
02a44     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a48     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a4c     38 73 02 F6 | 	mov	local05, local04
02a50     10 74 06 F6 | 	mov	local06, #16
02a54     39 5F 02 F6 | 	mov	arg02, local05
02a58     10 60 06 F6 | 	mov	arg03, #16
02a5c     0E 00 00 FF 
02a60     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a64     B4 33 B0 FD | 	call	#__system__longmove
02a68     15 77 02 F6 | 	mov	local07, result1
02a6c     30 01 90 FD | 	jmp	#LR__0074
02a70                 | LR__0069
02a70                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a70     50 0E 06 F1 | 	add	objptr, #80
02a74     07 5D 02 F6 | 	mov	arg01, objptr
02a78     50 0E 86 F1 | 	sub	objptr, #80
02a7c     0E 00 00 FF 
02a80     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a84     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a88     38 73 02 F6 | 	mov	local05, local04
02a8c     10 74 06 F6 | 	mov	local06, #16
02a90     39 5F 02 F6 | 	mov	arg02, local05
02a94     10 60 06 F6 | 	mov	arg03, #16
02a98     0E 00 00 FF 
02a9c     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02aa0     78 33 B0 FD | 	call	#__system__longmove
02aa4     15 77 02 F6 | 	mov	local07, result1
02aa8     F4 00 90 FD | 	jmp	#LR__0074
02aac                 | LR__0070
02aac                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02aac     50 0E 06 F1 | 	add	objptr, #80
02ab0     07 5D 02 F6 | 	mov	arg01, objptr
02ab4     50 0E 86 F1 | 	sub	objptr, #80
02ab8     0E 00 00 FF 
02abc     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02ac0     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02ac4     38 73 02 F6 | 	mov	local05, local04
02ac8     10 74 06 F6 | 	mov	local06, #16
02acc     39 5F 02 F6 | 	mov	arg02, local05
02ad0     10 60 06 F6 | 	mov	arg03, #16
02ad4     0E 00 00 FF 
02ad8     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02adc     3C 33 B0 FD | 	call	#__system__longmove
02ae0     15 77 02 F6 | 	mov	local07, result1
02ae4     B8 00 90 FD | 	jmp	#LR__0074
02ae8                 | LR__0071
02ae8                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02ae8     50 0E 06 F1 | 	add	objptr, #80
02aec     07 5D 02 F6 | 	mov	arg01, objptr
02af0     50 0E 86 F1 | 	sub	objptr, #80
02af4     0E 00 00 FF 
02af8     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02afc     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b00     38 73 02 F6 | 	mov	local05, local04
02b04     10 74 06 F6 | 	mov	local06, #16
02b08     39 5F 02 F6 | 	mov	arg02, local05
02b0c     10 60 06 F6 | 	mov	arg03, #16
02b10     0E 00 00 FF 
02b14     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b18     00 33 B0 FD | 	call	#__system__longmove
02b1c     15 77 02 F6 | 	mov	local07, result1
02b20     7C 00 90 FD | 	jmp	#LR__0074
02b24                 | LR__0072
02b24                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02b24     50 0E 06 F1 | 	add	objptr, #80
02b28     07 5D 02 F6 | 	mov	arg01, objptr
02b2c     50 0E 86 F1 | 	sub	objptr, #80
02b30     0E 00 00 FF 
02b34     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02b38     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b3c     38 73 02 F6 | 	mov	local05, local04
02b40     10 74 06 F6 | 	mov	local06, #16
02b44     39 5F 02 F6 | 	mov	arg02, local05
02b48     10 60 06 F6 | 	mov	arg03, #16
02b4c     0E 00 00 FF 
02b50     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02b54     C4 32 B0 FD | 	call	#__system__longmove
02b58     15 77 02 F6 | 	mov	local07, result1
02b5c     40 00 90 FD | 	jmp	#LR__0074
02b60                 | LR__0073
02b60                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02b60     50 0E 06 F1 | 	add	objptr, #80
02b64     07 79 02 F6 | 	mov	local08, objptr
02b68     3C 7B 02 F6 | 	mov	local09, local08
02b6c     0F 00 00 FF 
02b70     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02b74     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b78     38 73 02 F6 | 	mov	local05, local04
02b7c     10 74 06 F6 | 	mov	local06, #16
02b80     3D 5D 02 F6 | 	mov	arg01, local09
02b84     39 5F 02 F6 | 	mov	arg02, local05
02b88     10 60 06 F6 | 	mov	arg03, #16
02b8c     50 0E 86 F1 | 	sub	objptr, #80
02b90     0F 00 00 FF 
02b94     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02b98     80 32 B0 FD | 	call	#__system__longmove
02b9c     15 77 02 F6 | 	mov	local07, result1
02ba0                 | LR__0074
02ba0                 | ' 
02ba0                 | ' ' 4-bit graphics: do nothing with timings :)
02ba0                 | ' if mode<512
02ba0     01 00 00 FF 
02ba4     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02ba8     20 00 90 3D |  if_ae	jmp	#LR__0075
02bac     0C 00 00 FF 
02bb0     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02bb4     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02bb8                 | '   palette_ptr:=@ataripalette
02bb8     18 0E 06 F1 | 	add	objptr, #24
02bbc     07 7D 62 FC | 	wrlong	local10, objptr
02bc0     18 0E 86 F1 | 	sub	objptr, #24
02bc4     0C 00 00 FF 
02bc8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02bcc                 | LR__0075
02bcc                 | ' 
02bcc                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02bcc     35 6D 02 F6 | 	mov	local02, local01
02bd0     01 00 00 FF 
02bd4     30 6C 06 F5 | 	and	local02, ##560
02bd8     01 00 00 FF 
02bdc     30 6C 0E F2 | 	cmp	local02, ##560 wz
02be0     48 00 90 5D |  if_ne	jmp	#LR__0076
02be4                 | '   timings[5]:=4
02be4     64 0E 06 F1 | 	add	objptr, #100
02be8     07 09 68 FC | 	wrlong	#4, objptr
02bec     18 0E 06 F1 | 	add	objptr, #24
02bf0     07 7F 02 FB | 	rdlong	local11, objptr
02bf4     01 7E 66 F0 | 	shl	local11, #1
02bf8                 | '   timings[11]:=timings[11]<<1
02bf8     07 7F 62 FC | 	wrlong	local11, objptr
02bfc                 | '   putpixel:=p8
02bfc     6C 0E 06 F1 | 	add	objptr, #108
02c00     07 6D 02 FB | 	rdlong	local02, objptr
02c04     10 0E 86 F1 | 	sub	objptr, #16
02c08     07 6D 62 FC | 	wrlong	local02, objptr
02c0c     0C 00 00 FF 
02c10     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c14     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02c18                 | '   palette_ptr:=@ataripalette
02c18     C0 0E 86 F1 | 	sub	objptr, #192
02c1c     07 81 62 FC | 	wrlong	local12, objptr
02c20     18 0E 86 F1 | 	sub	objptr, #24
02c24     0C 00 00 FF 
02c28     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c2c                 | LR__0076
02c2c                 | ' 
02c2c                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02c2c     35 6D 02 F6 | 	mov	local02, local01
02c30     01 00 00 FF 
02c34     30 6C 06 F5 | 	and	local02, ##560
02c38     01 00 00 FF 
02c3c     10 6C 0E F2 | 	cmp	local02, ##528 wz
02c40     48 00 90 5D |  if_ne	jmp	#LR__0077
02c44                 | '   timings[5]:=16
02c44     64 0E 06 F1 | 	add	objptr, #100
02c48     07 21 68 FC | 	wrlong	#16, objptr
02c4c     18 0E 06 F1 | 	add	objptr, #24
02c50     07 83 02 FB | 	rdlong	local13, objptr
02c54     01 82 46 F0 | 	shr	local13, #1
02c58                 | '   timings[11]:=timings[11]>>1
02c58     07 83 62 FC | 	wrlong	local13, objptr
02c5c                 | '   putpixel:=p2
02c5c     64 0E 06 F1 | 	add	objptr, #100
02c60     07 6D 02 FB | 	rdlong	local02, objptr
02c64     08 0E 86 F1 | 	sub	objptr, #8
02c68     07 6D 62 FC | 	wrlong	local02, objptr
02c6c     0C 00 00 FF 
02c70     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02c74     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02c78                 | '   palette_ptr:=@fourcolors
02c78     C0 0E 86 F1 | 	sub	objptr, #192
02c7c     07 85 62 FC | 	wrlong	local14, objptr
02c80     18 0E 86 F1 | 	sub	objptr, #24
02c84     0C 00 00 FF 
02c88     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02c8c                 | LR__0077
02c8c                 | ' 
02c8c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02c8c     35 6D 02 F6 | 	mov	local02, local01
02c90     01 00 00 FF 
02c94     30 6C 06 F5 | 	and	local02, ##560
02c98     01 00 00 FF 
02c9c     00 6C 0E F2 | 	cmp	local02, ##512 wz
02ca0     48 00 90 5D |  if_ne	jmp	#LR__0078
02ca4                 | '   timings[5]:=32
02ca4     64 0E 06 F1 | 	add	objptr, #100
02ca8     07 41 68 FC | 	wrlong	#32, objptr
02cac     18 0E 06 F1 | 	add	objptr, #24
02cb0     07 87 02 FB | 	rdlong	local15, objptr
02cb4     02 86 46 F0 | 	shr	local15, #2
02cb8                 | '   timings[11]:=timings[11]>>2
02cb8     07 87 62 FC | 	wrlong	local15, objptr
02cbc                 | '   putpixel:=p1
02cbc     60 0E 06 F1 | 	add	objptr, #96
02cc0     07 6D 02 FB | 	rdlong	local02, objptr
02cc4     04 0E 86 F1 | 	sub	objptr, #4
02cc8     07 6D 62 FC | 	wrlong	local02, objptr
02ccc     0C 00 00 FF 
02cd0     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02cd4     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02cd8                 | '   palette_ptr:=@twocolors
02cd8     C0 0E 86 F1 | 	sub	objptr, #192
02cdc     07 89 62 FC | 	wrlong	local16, objptr
02ce0     18 0E 86 F1 | 	sub	objptr, #24
02ce4     0C 00 00 FF 
02ce8     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02cec                 | LR__0078
02cec                 | ' 
02cec                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02cec     35 6D 02 F6 | 	mov	local02, local01
02cf0     01 00 00 FF 
02cf4     30 6C 06 F5 | 	and	local02, ##560
02cf8     01 00 00 FF 
02cfc     20 6C 0E F2 | 	cmp	local02, ##544 wz
02d00     30 00 90 5D |  if_ne	jmp	#LR__0079
02d04                 | '   putpixel:=p4
02d04     E4 0E 06 F1 | 	add	objptr, #228
02d08     07 6D 02 FB | 	rdlong	local02, objptr
02d0c     0C 0E 86 F1 | 	sub	objptr, #12
02d10     07 6D 62 FC | 	wrlong	local02, objptr
02d14     0C 00 00 FF 
02d18     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02d1c     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02d20                 | '   palette_ptr:=@vga16
02d20     C0 0E 86 F1 | 	sub	objptr, #192
02d24     07 8B 62 FC | 	wrlong	local17, objptr
02d28     18 0E 86 F1 | 	sub	objptr, #24
02d2c     0C 00 00 FF 
02d30     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d34                 | LR__0079
02d34                 | ' 
02d34                 | ' repeat i from 0 to 4
02d34     00 8C 06 F6 | 	mov	local18, #0
02d38     08 D3 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
02d3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d40                 | LR__0080
02d40     46 8F 02 F6 | 	mov	local19, local18
02d44     02 8E 66 F0 | 	shl	local19, #2
02d48     50 0E 06 F1 | 	add	objptr, #80
02d4c     07 8F 02 F1 | 	add	local19, objptr
02d50     2C 0E 86 F1 | 	sub	objptr, #44
02d54     07 91 02 FB | 	rdlong	local20, objptr
02d58     24 0E 86 F1 | 	sub	objptr, #36
02d5c     11 90 66 F0 | 	shl	local20, #17
02d60     47 93 02 FB | 	rdlong	local21, local19
02d64     48 93 02 F1 | 	add	local21, local20
02d68     49 95 02 F6 | 	mov	local22, local21
02d6c     80 40 38 FF 
02d70     00 94 06 F1 | 	add	local22, ##1887502336
02d74                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d74     47 95 62 FC | 	wrlong	local22, local19
02d78     01 8C 06 F1 | 	add	local18, #1
02d7c     05 8C 5E F2 | 	cmps	local18, #5 wcz
02d80     BC FF 9F CD |  if_b	jmp	#LR__0080
02d84                 | LR__0081
02d84     24 0E 06 F1 | 	add	objptr, #36
02d88     07 97 02 FB | 	rdlong	local23, objptr
02d8c     11 96 66 F0 | 	shl	local23, #17
02d90     40 0E 06 F1 | 	add	objptr, #64
02d94     07 99 02 FB | 	rdlong	local24, objptr
02d98     4B 99 02 F1 | 	add	local24, local23
02d9c                 | ' timings[5]:=timings[5]+hdmibase<<17
02d9c     07 99 62 FC | 	wrlong	local24, objptr
02da0                 | ' clkfreq:=timings[13]
02da0     20 0E 06 F1 | 	add	objptr, #32
02da4     07 6D 02 FB | 	rdlong	local02, objptr
02da8     14 6C 66 FC | 	wrlong	local02, #20
02dac                 | ' hubset(timings[14])
02dac     04 0E 06 F1 | 	add	objptr, #4
02db0     07 5D 02 FB | 	rdlong	arg01, objptr
02db4     88 0E 86 F1 | 	sub	objptr, #136
02db8     00 5C 62 FD | 	hubset	arg01
02dbc                 | ' waitms(1)
02dbc     01 5C 06 F6 | 	mov	arg01, #1
02dc0     F8 32 B0 FD | 	call	#__system___waitms
02dc4     35 9B 02 F6 | 	mov	local25, local01
02dc8     03 9A 06 F5 | 	and	local25, #3
02dcc     4D 9D C2 F9 | 	decod	local26, local25
02dd0                 | ' 
02dd0                 | ' 
02dd0                 | ' xzoom:=1<<(mode & 3)
02dd0     CC 0E 06 F1 | 	add	objptr, #204
02dd4     07 9D 62 FC | 	wrlong	local26, objptr
02dd8                 | ' 
02dd8                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02dd8     4E 79 02 F6 | 	mov	local08, local26
02ddc     CC 0E 86 F1 | 	sub	objptr, #204
02de0     08 78 0E F2 | 	cmp	local08, #8 wz
02de4     24 00 90 5D |  if_ne	jmp	#LR__0082
02de8     35 7B 02 F6 | 	mov	local09, local01
02dec     04 7A 46 F0 | 	shr	local09, #4
02df0     03 7A 06 F5 | 	and	local09, #3
02df4     03 7A 0E F2 | 	cmp	local09, #3 wz
02df8     10 00 90 AD |  if_e	jmp	#LR__0082
02dfc                 | '   xzoom:=4
02dfc     04 6C 06 F6 | 	mov	local02, #4
02e00     CC 0E 06 F1 | 	add	objptr, #204
02e04     07 09 68 FC | 	wrlong	#4, objptr
02e08     CC 0E 86 F1 | 	sub	objptr, #204
02e0c                 | LR__0082
02e0c     35 9F 02 F6 | 	mov	local27, local01
02e10     02 9E 46 F0 | 	shr	local27, #2
02e14     03 9E 06 F5 | 	and	local27, #3
02e18     4F A1 C2 F9 | 	decod	local28, local27
02e1c                 | ' 
02e1c                 | ' yzoom:=1<<((mode>>2) & 3)
02e1c     D0 0E 06 F1 | 	add	objptr, #208
02e20     07 A1 62 FC | 	wrlong	local28, objptr
02e24     04 0E 86 F1 | 	sub	objptr, #4
02e28     07 79 02 FB | 	rdlong	local08, objptr
02e2c     04 0E 06 F1 | 	add	objptr, #4
02e30     07 71 02 FB | 	rdlong	local04, objptr
02e34     38 79 02 FD | 	qmul	local08, local04
02e38     18 A2 62 FD | 	getqx	local29
02e3c                 | ' azoom:=xzoom*yzoom
02e3c     04 0E 06 F1 | 	add	objptr, #4
02e40     07 A3 62 FC | 	wrlong	local29, objptr
02e44                 | ' 
02e44                 | ' cpl:=timings[11]
02e44     58 0E 86 F1 | 	sub	objptr, #88
02e48     07 6D 02 FB | 	rdlong	local02, objptr
02e4c     14 0E 06 F1 | 	add	objptr, #20
02e50     07 6D 62 FC | 	wrlong	local02, objptr
02e54     90 0E 86 F1 | 	sub	objptr, #144
02e58                 | ' if (mode<512)
02e58     01 00 00 FF 
02e5c     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02e60     60 00 90 3D |  if_ae	jmp	#LR__0083
02e64     80 0E 06 F1 | 	add	objptr, #128
02e68     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e6c     04 0A 47 F0 | 	shr	muldiva_, #4
02e70     50 0E 06 F1 | 	add	objptr, #80
02e74     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e78     D0 0E 86 F1 | 	sub	objptr, #208
02e7c     CC 00 A0 FD | 	call	#unsdivide_
02e80                 | '   lines:=(timings[12]>>4)+/yzoom
02e80     94 0E 06 F1 | 	add	objptr, #148
02e84     07 0D 63 FC | 	wrlong	muldivb_, objptr
02e88                 | '   if ((timings[12]>>4)+//yzoom) <>0
02e88     14 0E 86 F1 | 	sub	objptr, #20
02e8c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e90     04 0A 47 F0 | 	shr	muldiva_, #4
02e94     50 0E 06 F1 | 	add	objptr, #80
02e98     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e9c     D0 0E 86 F1 | 	sub	objptr, #208
02ea0     CC 00 A0 FD | 	call	#unsdivide_
02ea4     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02ea8     AC 00 90 AD |  if_e	jmp	#LR__0086
02eac                 | '     lines +=1
02eac     94 0E 06 F1 | 	add	objptr, #148
02eb0     07 6D 02 FB | 	rdlong	local02, objptr
02eb4     01 6C 06 F1 | 	add	local02, #1
02eb8     07 6D 62 FC | 	wrlong	local02, objptr
02ebc     94 0E 86 F1 | 	sub	objptr, #148
02ec0                 | ' 
02ec0                 | ' else
02ec0     94 00 90 FD | 	jmp	#LR__0086
02ec4                 | LR__0083
02ec4     80 0E 06 F1 | 	add	objptr, #128
02ec8     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ecc     50 0E 06 F1 | 	add	objptr, #80
02ed0     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ed4     D0 0E 86 F1 | 	sub	objptr, #208
02ed8     D0 00 A0 FD | 	call	#divide_
02edc                 | '   lines:=timings[12]/yzoom
02edc     94 0E 06 F1 | 	add	objptr, #148
02ee0     07 0D 63 FC | 	wrlong	muldivb_, objptr
02ee4                 | '   if cpl//xzoom==0
02ee4     04 0E 86 F1 | 	sub	objptr, #4
02ee8     07 0B 03 FB | 	rdlong	muldiva_, objptr
02eec     3C 0E 06 F1 | 	add	objptr, #60
02ef0     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ef4     CC 0E 86 F1 | 	sub	objptr, #204
02ef8     D0 00 A0 FD | 	call	#divide_
02efc     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f00     28 00 90 5D |  if_ne	jmp	#LR__0084
02f04                 | '     cpl:=cpl/xzoom
02f04     90 0E 06 F1 | 	add	objptr, #144
02f08     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f0c     3C 0E 06 F1 | 	add	objptr, #60
02f10     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f14     CC 0E 86 F1 | 	sub	objptr, #204
02f18     D0 00 A0 FD | 	call	#divide_
02f1c     90 0E 06 F1 | 	add	objptr, #144
02f20     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f24     90 0E 86 F1 | 	sub	objptr, #144
02f28                 | '   else
02f28     2C 00 90 FD | 	jmp	#LR__0085
02f2c                 | LR__0084
02f2c     90 0E 06 F1 | 	add	objptr, #144
02f30     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f34     3C 0E 06 F1 | 	add	objptr, #60
02f38     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f3c     CC 0E 86 F1 | 	sub	objptr, #204
02f40     D0 00 A0 FD | 	call	#divide_
02f44     86 A5 02 F6 | 	mov	local30, muldivb_
02f48     01 A4 06 F1 | 	add	local30, #1
02f4c                 | '     cpl:=cpl/xzoom+1
02f4c     90 0E 06 F1 | 	add	objptr, #144
02f50     07 A5 62 FC | 	wrlong	local30, objptr
02f54     90 0E 86 F1 | 	sub	objptr, #144
02f58                 | LR__0085
02f58                 | LR__0086
02f58     90 0E 06 F1 | 	add	objptr, #144
02f5c     07 79 02 FB | 	rdlong	local08, objptr
02f60     04 0E 06 F1 | 	add	objptr, #4
02f64     07 71 02 FB | 	rdlong	local04, objptr
02f68     38 79 02 FD | 	qmul	local08, local04
02f6c     18 A6 62 FD | 	getqx	local31
02f70                 | ' 
02f70                 | ' buflen:=(cpl*lines)
02f70     64 0E 86 F1 | 	sub	objptr, #100
02f74     07 A7 62 FC | 	wrlong	local31, objptr
02f78     30 0E 86 F1 | 	sub	objptr, #48
02f7c     02 A6 66 F0 | 	shl	local31, #2
02f80     13 A8 C6 F9 | 	decod	local32, #19
02f84     53 A9 82 F1 | 	sub	local32, local31
02f88                 | ' buf_ptr:=$80000-4*buflen
02f88     07 A9 62 FC | 	wrlong	local32, objptr
02f8c     50 0E 06 F1 | 	add	objptr, #80
02f90     07 AB 02 F6 | 	mov	local33, objptr
02f94                 | ' mode_ptr:=@timings
02f94     3C 0E 86 F1 | 	sub	objptr, #60
02f98     07 AB 62 FC | 	wrlong	local33, objptr
02f9c                 | ' graphmode:=mode
02f9c     B0 0E 06 F1 | 	add	objptr, #176
02fa0     07 6B 62 FC | 	wrlong	local01, objptr
02fa4     C4 0E 86 F1 | 	sub	objptr, #196
02fa8                 | ' makedl(mode)
02fa8     35 5D 02 F6 | 	mov	arg01, local01
02fac                 | ' 
02fac                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02fac                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02fac                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02fac                 | ' 
02fac                 | ' '   0 - display a up/down border line
02fac                 | ' 
02fac                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02fac                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02fac                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02fac                 | ' '    nnnn - font line to display, 0..15
02fac                 | ' '    llllll - character line, determines the cursor Y position
02fac                 | ' 
02fac                 | ' 
02fac                 | ' if (mode &256==0)
02fac     00 5D CE F7 | 	test	arg01, #256 wz
02fb0     1C 00 90 5D |  if_ne	jmp	#LR__0087
02fb4     07 AD 02 FB | 	rdlong	local34, objptr
02fb8     04 00 00 FF 
02fbc     00 AD 86 F1 | 	sub	local34, ##2304
02fc0                 | '   dl_ptr:=buf_ptr-4*576
02fc0     1C 0E 06 F1 | 	add	objptr, #28
02fc4     07 AD 62 FC | 	wrlong	local34, objptr
02fc8     1C 0E 86 F1 | 	sub	objptr, #28
02fcc                 | ' else
02fcc     18 00 90 FD | 	jmp	#LR__0088
02fd0                 | LR__0087
02fd0     07 AF 02 FB | 	rdlong	local35, objptr
02fd4     03 00 00 FF 
02fd8     C0 AF 86 F1 | 	sub	local35, ##1984
02fdc                 | '   dl_ptr:=buf_ptr-4*496
02fdc     1C 0E 06 F1 | 	add	objptr, #28
02fe0     07 AF 62 FC | 	wrlong	local35, objptr
02fe4     1C 0E 86 F1 | 	sub	objptr, #28
02fe8                 | LR__0088
02fe8     2E B1 02 F6 | 	mov	local36, arg01
02fec     02 B0 46 F0 | 	shr	local36, #2
02ff0     03 B0 06 F5 | 	and	local36, #3
02ff4                 | '  ' dl_ptr:=buf_ptr-4*540
02ff4                 | ' 
02ff4                 | ' vzoom:=((mode>>2) & 3)
02ff4                 | ' 
02ff4                 | ' 
02ff4                 | ' if mode<512 '' text modes
02ff4     01 00 00 FF 
02ff8     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
02ffc     E4 01 90 3D |  if_ae	jmp	#LR__0096
03000                 | ' 
03000                 | '   if timings[6]>0 'borders
03000     68 0E 06 F1 | 	add	objptr, #104
03004     07 B3 02 FB | 	rdlong	local37, objptr
03008     68 0E 86 F1 | 	sub	objptr, #104
0300c     00 B2 5E F2 | 	cmps	local37, #0 wcz
03010     D4 00 90 ED |  if_be	jmp	#LR__0093
03014                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03014     00 B4 06 F6 | 	mov	local38, #0
03018     68 0E 06 F1 | 	add	objptr, #104
0301c     07 B7 02 FB | 	rdlong	local39, objptr
03020     68 0E 86 F1 | 	sub	objptr, #104
03024     01 B6 86 F1 | 	sub	local39, #1
03028     00 B6 5E F2 | 	cmps	local39, #0 wcz
0302c     01 B8 06 16 |  if_a	mov	local40, #1
03030     01 B8 66 E6 |  if_be	neg	local40, #1
03034     5C BB 02 F6 | 	mov	local41, local40
03038     5C B7 02 F1 | 	add	local39, local40
0303c     E8 CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
03040     93 00 A0 FD | 	call	#FCACHE_LOAD_
03044                 | LR__0089
03044     5A BD 02 F6 | 	mov	local42, local38
03048     02 BC 66 F0 | 	shl	local42, #2
0304c     1C 0E 06 F1 | 	add	objptr, #28
03050     07 BF 02 FB | 	rdlong	local43, objptr
03054     1C 0E 86 F1 | 	sub	objptr, #28
03058     5E BF 02 F1 | 	add	local43, local42
0305c                 | '       long[dl_ptr+4*i]:=$0
0305c     5F 01 68 FC | 	wrlong	#0, local43
03060     5D B5 02 F1 | 	add	local38, local41
03064     5B B5 0A F2 | 	cmp	local38, local39 wz
03068     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
0306c                 | LR__0090
0306c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0306c     68 0E 06 F1 | 	add	objptr, #104
03070     07 B5 02 FB | 	rdlong	local38, objptr
03074     18 0E 06 F1 | 	add	objptr, #24
03078     07 B9 02 FB | 	rdlong	local40, objptr
0307c     5C B5 02 F1 | 	add	local38, local40
03080     0C 0E 06 F1 | 	add	objptr, #12
03084     07 C1 02 FB | 	rdlong	local44, objptr
03088     01 C0 86 F1 | 	sub	local44, #1
0308c     24 0E 86 F1 | 	sub	objptr, #36
03090     07 C3 02 FB | 	rdlong	local45, objptr
03094     18 0E 06 F1 | 	add	objptr, #24
03098     07 C5 02 FB | 	rdlong	local46, objptr
0309c     80 0E 86 F1 | 	sub	objptr, #128
030a0     62 C3 02 F1 | 	add	local45, local46
030a4     61 C1 5A F2 | 	cmps	local44, local45 wcz
030a8     01 C6 06 16 |  if_a	mov	local47, #1
030ac     01 C6 66 E6 |  if_be	neg	local47, #1
030b0     63 C9 02 F6 | 	mov	local48, local47
030b4     63 C1 02 F1 | 	add	local44, local47
030b8     6C CF 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
030bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
030c0                 | LR__0091
030c0     5A CB 02 F6 | 	mov	local49, local38
030c4     02 CA 66 F0 | 	shl	local49, #2
030c8     1C 0E 06 F1 | 	add	objptr, #28
030cc     07 CD 02 FB | 	rdlong	local50, objptr
030d0     1C 0E 86 F1 | 	sub	objptr, #28
030d4     65 CD 02 F1 | 	add	local50, local49
030d8                 | '       long[dl_ptr+4*i]:=$0
030d8     66 01 68 FC | 	wrlong	#0, local50
030dc     64 B5 02 F1 | 	add	local38, local48
030e0     60 B5 0A F2 | 	cmp	local38, local44 wz
030e4     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
030e8                 | LR__0092
030e8                 | LR__0093
030e8     10 CE 06 F6 | 	mov	local51, #16
030ec     58 CF 62 F0 | 	shl	local51, local36
030f0                 | '   lpc:=16<<vzoom
030f0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
030f0     68 0E 06 F1 | 	add	objptr, #104
030f4     07 B5 02 FB | 	rdlong	local38, objptr
030f8     5A D1 02 F6 | 	mov	local52, local38
030fc     18 0E 06 F1 | 	add	objptr, #24
03100     07 D3 02 FB | 	rdlong	local53, objptr
03104     69 D1 02 F1 | 	add	local52, local53
03108     01 D0 86 F1 | 	sub	local52, #1
0310c     18 0E 86 F1 | 	sub	objptr, #24
03110     07 C7 02 FB | 	rdlong	local47, objptr
03114     68 0E 86 F1 | 	sub	objptr, #104
03118     63 D1 5A F2 | 	cmps	local52, local47 wcz
0311c     01 D4 06 16 |  if_a	mov	local54, #1
03120     01 D4 66 E6 |  if_be	neg	local54, #1
03124     6A D7 02 F6 | 	mov	local55, local54
03128     6A D1 02 F1 | 	add	local52, local54
0312c     80 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
03130     93 00 A0 FD | 	call	#FCACHE_LOAD_
03134                 | LR__0094
03134     5A 0B 03 F6 | 	mov	muldiva_, local38
03138     68 0E 06 F1 | 	add	objptr, #104
0313c     07 D9 02 FB | 	rdlong	local56, objptr
03140     68 0E 86 F1 | 	sub	objptr, #104
03144     6C 0B 83 F1 | 	sub	muldiva_, local56
03148     67 0D 03 F6 | 	mov	muldivb_, local51
0314c     CC 00 A0 FD | 	call	#unsdivide_
03150     58 0B 43 F0 | 	shr	muldiva_, local36
03154                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03154     85 DB 02 F6 | 	mov	local57, muldiva_
03158     5A 0B 03 F6 | 	mov	muldiva_, local38
0315c     68 0E 06 F1 | 	add	objptr, #104
03160     07 D9 02 FB | 	rdlong	local56, objptr
03164     68 0E 86 F1 | 	sub	objptr, #104
03168     6C 0B 83 F1 | 	sub	muldiva_, local56
0316c     67 0D 03 F6 | 	mov	muldivb_, local51
03170     CC 00 A0 FD | 	call	#unsdivide_
03174     86 DD 02 F6 | 	mov	local58, muldivb_
03178                 | '     charline:=(i-timings[6])+/lpc
03178     90 0E 06 F1 | 	add	objptr, #144
0317c     07 D9 02 FB | 	rdlong	local56, objptr
03180     90 0E 86 F1 | 	sub	objptr, #144
03184     6E D9 02 FD | 	qmul	local56, local58
03188     18 DE 62 FD | 	getqx	local59
0318c     02 DE 66 F0 | 	shl	local59, #2
03190     07 E1 02 FB | 	rdlong	local60, objptr
03194     6F E1 02 F1 | 	add	local60, local59
03198     2E E3 02 F6 | 	mov	local61, arg01
0319c     03 E2 06 F5 | 	and	local61, #3
031a0     71 E1 02 F1 | 	add	local60, local61
031a4                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
031a4     0C E0 66 F0 | 	shl	local60, #12
031a8     08 DA 66 F0 | 	shl	local57, #8
031ac     6D E1 02 F1 | 	add	local60, local57
031b0     02 DC 66 F0 | 	shl	local58, #2
031b4     6E E1 02 F1 | 	add	local60, local58
031b8     01 E0 06 F1 | 	add	local60, #1
031bc     5A E5 02 F6 | 	mov	local62, local38
031c0     02 E4 66 F0 | 	shl	local62, #2
031c4     1C 0E 06 F1 | 	add	objptr, #28
031c8     07 E7 02 FB | 	rdlong	local63, objptr
031cc     1C 0E 86 F1 | 	sub	objptr, #28
031d0     72 E7 02 F1 | 	add	local63, local62
031d4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
031d4     73 E1 62 FC | 	wrlong	local60, local63
031d8     6B B5 02 F1 | 	add	local38, local55
031dc     68 B5 0A F2 | 	cmp	local38, local52 wz
031e0     50 FF 9F 5D |  if_ne	jmp	#LR__0094
031e4                 | LR__0095
031e4                 | LR__0096
031e4                 | ' 
031e4                 | ' 
031e4                 | ' 
031e4                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
031e4     01 00 00 FF 
031e8     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
031ec     AC 01 90 CD |  if_b	jmp	#LR__0104
031f0                 | ' 
031f0                 | '   if timings[6]>0 'borders
031f0     68 0E 06 F1 | 	add	objptr, #104
031f4     07 B3 02 FB | 	rdlong	local37, objptr
031f8     68 0E 86 F1 | 	sub	objptr, #104
031fc     00 B2 5E F2 | 	cmps	local37, #0 wcz
03200     D4 00 90 ED |  if_be	jmp	#LR__0101
03204                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03204     00 B4 06 F6 | 	mov	local38, #0
03208     68 0E 06 F1 | 	add	objptr, #104
0320c     07 E9 02 FB | 	rdlong	local64, objptr
03210     68 0E 86 F1 | 	sub	objptr, #104
03214     01 E8 86 F1 | 	sub	local64, #1
03218     00 E8 5E F2 | 	cmps	local64, #0 wcz
0321c     01 B8 06 16 |  if_a	mov	local40, #1
03220     01 B8 66 E6 |  if_be	neg	local40, #1
03224     5C EB 02 F6 | 	mov	local65, local40
03228     5C E9 02 F1 | 	add	local64, local40
0322c     F8 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03230     93 00 A0 FD | 	call	#FCACHE_LOAD_
03234                 | LR__0097
03234     5A ED 02 F6 | 	mov	local66, local38
03238     02 EC 66 F0 | 	shl	local66, #2
0323c     1C 0E 06 F1 | 	add	objptr, #28
03240     07 EF 02 FB | 	rdlong	local67, objptr
03244     1C 0E 86 F1 | 	sub	objptr, #28
03248     76 EF 02 F1 | 	add	local67, local66
0324c                 | '       long[dl_ptr+4*i]:=$0
0324c     77 01 68 FC | 	wrlong	#0, local67
03250     75 B5 02 F1 | 	add	local38, local65
03254     74 B5 0A F2 | 	cmp	local38, local64 wz
03258     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
0325c                 | LR__0098
0325c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0325c     68 0E 06 F1 | 	add	objptr, #104
03260     07 B5 02 FB | 	rdlong	local38, objptr
03264     18 0E 06 F1 | 	add	objptr, #24
03268     07 B9 02 FB | 	rdlong	local40, objptr
0326c     5C B5 02 F1 | 	add	local38, local40
03270     0C 0E 06 F1 | 	add	objptr, #12
03274     07 F1 02 FB | 	rdlong	local68, objptr
03278     01 F0 86 F1 | 	sub	local68, #1
0327c     24 0E 86 F1 | 	sub	objptr, #36
03280     07 C3 02 FB | 	rdlong	local45, objptr
03284     18 0E 06 F1 | 	add	objptr, #24
03288     07 C5 02 FB | 	rdlong	local46, objptr
0328c     80 0E 86 F1 | 	sub	objptr, #128
03290     62 C3 02 F1 | 	add	local45, local46
03294     61 F1 5A F2 | 	cmps	local68, local45 wcz
03298     01 C6 06 16 |  if_a	mov	local47, #1
0329c     01 C6 66 E6 |  if_be	neg	local47, #1
032a0     63 F3 02 F6 | 	mov	local69, local47
032a4     63 F1 02 F1 | 	add	local68, local47
032a8     7C CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
032ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b0                 | LR__0099
032b0     5A F5 02 F6 | 	mov	local70, local38
032b4     02 F4 66 F0 | 	shl	local70, #2
032b8     1C 0E 06 F1 | 	add	objptr, #28
032bc     07 F7 02 FB | 	rdlong	local71, objptr
032c0     1C 0E 86 F1 | 	sub	objptr, #28
032c4     7A F7 02 F1 | 	add	local71, local70
032c8                 | '       long[dl_ptr+4*i]:=$0
032c8     7B 01 68 FC | 	wrlong	#0, local71
032cc     79 B5 02 F1 | 	add	local38, local69
032d0     78 B5 0A F2 | 	cmp	local38, local68 wz
032d4     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
032d8                 | LR__0100
032d8                 | LR__0101
032d8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
032d8     68 0E 06 F1 | 	add	objptr, #104
032dc     07 B5 02 FB | 	rdlong	local38, objptr
032e0     5A F9 02 F6 | 	mov	local72, local38
032e4     18 0E 06 F1 | 	add	objptr, #24
032e8     07 D3 02 FB | 	rdlong	local53, objptr
032ec     69 F9 02 F1 | 	add	local72, local53
032f0     01 F8 86 F1 | 	sub	local72, #1
032f4     18 0E 86 F1 | 	sub	objptr, #24
032f8     07 C7 02 FB | 	rdlong	local47, objptr
032fc     68 0E 86 F1 | 	sub	objptr, #104
03300     63 F9 5A F2 | 	cmps	local72, local47 wcz
03304     01 D4 06 16 |  if_a	mov	local54, #1
03308     01 D4 66 E6 |  if_be	neg	local54, #1
0330c     6A FB 02 F6 | 	mov	local73, local54
03310     6A F9 02 F1 | 	add	local72, local54
03314     68 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
03318     93 00 A0 FD | 	call	#FCACHE_LOAD_
0331c                 | LR__0102
0331c     5A FD 02 F6 | 	mov	local74, local38
03320     68 0E 06 F1 | 	add	objptr, #104
03324     07 D9 02 FB | 	rdlong	local56, objptr
03328     6C FD 82 F1 | 	sub	local74, local56
0332c     58 FD 42 F0 | 	shr	local74, local36
03330     28 0E 06 F1 | 	add	objptr, #40
03334     07 D9 02 FB | 	rdlong	local56, objptr
03338     90 0E 86 F1 | 	sub	objptr, #144
0333c     7E D9 02 FD | 	qmul	local56, local74
03340     18 FE 62 FD | 	getqx	local75
03344     02 FE 66 F0 | 	shl	local75, #2
03348     07 01 03 FB | 	rdlong	local76, objptr
0334c     7F 01 03 F1 | 	add	local76, local75
03350     2E 03 03 F6 | 	mov	local77, arg01
03354     03 02 07 F5 | 	and	local77, #3
03358     81 01 03 F1 | 	add	local76, local77
0335c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
0335c     0C 00 67 F0 | 	shl	local76, #12
03360     02 00 07 F1 | 	add	local76, #2
03364     2E 05 03 F6 | 	mov	local78, arg01
03368     30 04 07 F5 | 	and	local78, #48
0336c     02 04 47 F0 | 	shr	local78, #2
03370     82 01 03 F1 | 	add	local76, local78
03374     5A 07 03 F6 | 	mov	local79, local38
03378     02 06 67 F0 | 	shl	local79, #2
0337c     1C 0E 06 F1 | 	add	objptr, #28
03380     07 09 03 FB | 	rdlong	local80, objptr
03384     1C 0E 86 F1 | 	sub	objptr, #28
03388     83 09 03 F1 | 	add	local80, local79
0338c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0338c     84 01 63 FC | 	wrlong	local76, local80
03390     7D B5 02 F1 | 	add	local38, local73
03394     7C B5 0A F2 | 	cmp	local38, local72 wz
03398     80 FF 9F 5D |  if_ne	jmp	#LR__0102
0339c                 | LR__0103
0339c                 | LR__0104
0339c                 | LR__0105
0339c     AF F0 03 F6 | 	mov	ptra, fp
033a0     BF 00 A0 FD | 	call	#popregs_
033a4                 | _hng030rm_spin2_setmode_ret
033a4     2D 00 64 FD | 	ret
033a8                 | 
033a8                 | ' 
033a8                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
033a8                 | _retrocog_spin2_serialcog
033a8     1C 5A 05 F6 | 	mov	COUNT_, #28
033ac     B0 00 A0 FD | 	call	#pushregs_
033b0                 | ' 
033b0                 | ' 'start serial and midi
033b0                 | ' 
033b0                 | ' serial_start(rxpin, txpin, baudrate)
033b0     20 5C 06 F6 | 	mov	arg01, #32
033b4     21 5E 06 F6 | 	mov	arg02, #33
033b8     A6 0E 00 FF 
033bc     00 60 06 F6 | 	mov	arg03, ##1920000
033c0     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033c4                 | ' serial_start(midiin,midiout,mbaudrate)
033c4     1D 5C 06 F6 | 	mov	arg01, #29
033c8     1E 5E 06 F6 | 	mov	arg02, #30
033cc     3D 00 00 FF 
033d0     12 60 06 F6 | 	mov	arg03, ##31250
033d4     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033d8                 | ' serial_start(srxpin,stxpin,sbaudrate)
033d8     42 0F 00 FF 
033dc     80 6A 06 F6 | 	mov	local01, ##2000000
033e0     3F 5C 06 F6 | 	mov	arg01, #63
033e4     3E 5E 06 F6 | 	mov	arg02, #62
033e8     42 0F 00 FF 
033ec     80 60 06 F6 | 	mov	arg03, ##2000000
033f0     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033f4                 | ' 
033f4                 | ' mb:=(-1)
033f4     01 6C 66 F6 | 	neg	local02, #1
033f8                 | ' b:=(-1)
033f8     01 6E 66 F6 | 	neg	local03, #1
033fc                 | ' 
033fc                 | ' mousefront:=0
033fc     00 70 06 F6 | 	mov	local04, #0
03400     08 0E 06 F1 | 	add	objptr, #8
03404     07 01 68 FC | 	wrlong	#0, objptr
03408                 | ' mousetail:=0
03408     04 0E 06 F1 | 	add	objptr, #4
0340c     07 01 68 FC | 	wrlong	#0, objptr
03410     0C 0E 86 F1 | 	sub	objptr, #12
03414                 | ' kbdfront:=0
03414     07 01 68 FC | 	wrlong	#0, objptr
03418                 | ' kbdtail:=0
03418     04 0E 06 F1 | 	add	objptr, #4
0341c     07 01 68 FC | 	wrlong	#0, objptr
03420                 | ' midifront:=0
03420     0C 0E 06 F1 | 	add	objptr, #12
03424     07 01 68 FC | 	wrlong	#0, objptr
03428                 | ' miditail:=0
03428     04 0E 06 F1 | 	add	objptr, #4
0342c     07 01 68 FC | 	wrlong	#0, objptr
03430                 | ' serialfront:=0
03430     04 0E 06 F1 | 	add	objptr, #4
03434     07 01 68 FC | 	wrlong	#0, objptr
03438                 | ' serialtail:=0
03438     04 0E 06 F1 | 	add	objptr, #4
0343c     07 01 68 FC | 	wrlong	#0, objptr
03440                 | ' long[$30]:=0
03440     30 00 6C FC | 	wrlong	#0, #48
03444                 | ' long[$34]:=0
03444     34 00 6C FC | 	wrlong	#0, #52
03448                 | ' long[$38]:=0
03448     38 00 6C FC | 	wrlong	#0, #56
0344c     1C 0E 86 F1 | 	sub	objptr, #28
03450                 | ' long[$3C]:=0
03450     3C 00 6C FC | 	wrlong	#0, #60
03454                 | ' 
03454                 | ' repeat
03454                 | LR__0106
03454                 | ' 
03454                 | ' '  repeat 
03454                 | '   rr:=rxcheck(rxpin)
03454     20 5C 06 F6 | 	mov	arg01, #32
03458     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
0345c     15 73 02 F6 | 	mov	local05, result1
03460                 | '   mrr:=rxcheck(midiin)
03460     1D 5C 06 F6 | 	mov	arg01, #29
03464     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03468     15 75 02 F6 | 	mov	local06, result1
0346c                 | '   srr:=rxcheck(srxpin)
0346c     3F 70 06 F6 | 	mov	local04, #63
03470     3F 5C 06 F6 | 	mov	arg01, #63
03474     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03478     15 77 02 F6 | 	mov	local07, result1
0347c     3B 79 02 F6 | 	mov	local08, local07
03480                 | ' 
03480                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03480                 | ' 
03480                 | '   
03480                 | ' ' midi. Must be >= $80 for a command
03480                 | ' '$80-$8F - 3 bytes note off. note, velocity
03480                 | ' '$90-$9F - 3 bytes note on, note, velocity
03480                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03480                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03480                 | ' '$C0-$CF - 2 bytes program change
03480                 | ' '$D0-$DF - 2 bytes mono aftertouch
03480                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03480                 | ' '$F0-$FF - 1 byte
03480                 | '   
03480                 | '   if srr>=0
03480     00 78 5E F2 | 	cmps	local08, #0 wcz
03484     7C 00 90 CD |  if_b	jmp	#LR__0108
03488                 | '   
03488                 | '     if serialfront<>((serialtail-1) //32)
03488     1C 0E 06 F1 | 	add	objptr, #28
0348c     07 77 02 FB | 	rdlong	local07, objptr
03490     3B 71 02 F6 | 	mov	local04, local07
03494     01 70 86 F1 | 	sub	local04, #1
03498     38 6B 52 F6 | 	abs	local01, local04 wc
0349c     1F 6A 06 F5 | 	and	local01, #31
034a0     35 6B 62 C6 |  if_b	neg	local01, local01
034a4     04 0E 86 F1 | 	sub	objptr, #4
034a8     07 7B 02 FB | 	rdlong	local09, objptr
034ac     18 0E 86 F1 | 	sub	objptr, #24
034b0     3D 7D 02 F6 | 	mov	local10, local09
034b4     35 7D 0A F2 | 	cmp	local10, local01 wz
034b8     48 00 90 AD |  if_e	jmp	#LR__0107
034bc     18 0E 06 F1 | 	add	objptr, #24
034c0     07 7D 02 FB | 	rdlong	local10, objptr
034c4     01 00 00 FF 
034c8     08 0F 06 F1 | 	add	objptr, ##776
034cc     07 7D 02 F1 | 	add	local10, objptr
034d0     3E 7F 02 F6 | 	mov	local11, local10
034d4                 | '       serialbuf[serialfront]:=srr
034d4     3F 79 42 FC | 	wrbyte	local08, local11
034d8                 | '       serialfront+=1
034d8     01 00 00 FF 
034dc     08 0F 86 F1 | 	sub	objptr, ##776
034e0     07 6B 02 FB | 	rdlong	local01, objptr
034e4     01 6A 06 F1 | 	add	local01, #1
034e8     07 6B 62 FC | 	wrlong	local01, objptr
034ec                 | '       serialfront:=serialfront // 32
034ec     35 77 02 F6 | 	mov	local07, local01
034f0     3B 71 52 F6 | 	abs	local04, local07 wc
034f4     1F 70 06 F5 | 	and	local04, #31
034f8     38 71 62 C6 |  if_b	neg	local04, local04
034fc     07 71 62 FC | 	wrlong	local04, objptr
03500     18 0E 86 F1 | 	sub	objptr, #24
03504                 | LR__0107
03504                 | LR__0108
03504                 | '     
03504                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03504     80 74 5E F2 | 	cmps	local06, #128 wcz
03508     08 00 90 CD |  if_b	jmp	#LR__0109
0350c     BF 74 5E F2 | 	cmps	local06, #191 wcz
03510     10 00 90 ED |  if_be	jmp	#LR__0110
03514                 | LR__0109
03514     E0 74 5E F2 | 	cmps	local06, #224 wcz
03518     1C 00 90 CD |  if_b	jmp	#LR__0111
0351c     EF 74 5E F2 | 	cmps	local06, #239 wcz
03520     14 00 90 1D |  if_a	jmp	#LR__0111
03524                 | LR__0110
03524                 | '     mb:=2
03524     02 6C 06 F6 | 	mov	local02, #2
03528     3A 71 02 F6 | 	mov	local04, local06
0352c     18 70 66 F0 | 	shl	local04, #24
03530     38 81 02 F6 | 	mov	local12, local04
03534                 | '     midireport:=mrr<<24
03534     40 83 02 F6 | 	mov	local13, local12
03538                 | LR__0111
03538                 | ' 
03538                 | '   if (mrr>=$C0) && (mrr<=$DF)
03538     C0 74 5E F2 | 	cmps	local06, #192 wcz
0353c     1C 00 90 CD |  if_b	jmp	#LR__0112
03540     DF 74 5E F2 | 	cmps	local06, #223 wcz
03544     14 00 90 1D |  if_a	jmp	#LR__0112
03548                 | '     mb:=1
03548     01 6C 06 F6 | 	mov	local02, #1
0354c     3A 71 02 F6 | 	mov	local04, local06
03550     18 70 66 F0 | 	shl	local04, #24
03554     38 85 02 F6 | 	mov	local14, local04
03558                 | '     midireport:=mrr<<24
03558     42 83 02 F6 | 	mov	local13, local14
0355c                 | LR__0112
0355c                 | '   
0355c                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
0355c     F0 74 5E F2 | 	cmps	local06, #240 wcz
03560     10 00 90 CD |  if_b	jmp	#LR__0113
03564                 | '     mb:=4
03564     04 6C 06 F6 | 	mov	local02, #4
03568     3A 87 02 F6 | 	mov	local15, local06
0356c     18 86 66 F0 | 	shl	local15, #24
03570                 | '     midireport:=mrr<<24  
03570     43 83 02 F6 | 	mov	local13, local15
03574                 | LR__0113
03574                 | '   
03574                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
03574     80 74 5E F2 | 	cmps	local06, #128 wcz
03578     44 00 90 3D |  if_ae	jmp	#LR__0115
0357c     00 6C 5E F2 | 	cmps	local02, #0 wcz
03580     3C 00 90 ED |  if_be	jmp	#LR__0115
03584     00 74 5E F2 | 	cmps	local06, #0 wcz
03588     34 00 90 CD |  if_b	jmp	#LR__0115
0358c                 | '     
0358c                 | '     mb--
0358c     36 71 02 F6 | 	mov	local04, local02
03590     36 77 02 F6 | 	mov	local07, local02
03594     01 76 86 F1 | 	sub	local07, #1
03598     3B 6D 02 F6 | 	mov	local02, local07
0359c                 | '     if mb<3
0359c     03 6C 5E F2 | 	cmps	local02, #3 wcz
035a0     1C 00 90 3D |  if_ae	jmp	#LR__0114
035a4     36 89 02 F6 | 	mov	local16, local02
035a8     03 88 66 F0 | 	shl	local16, #3
035ac     3A 8B 02 F6 | 	mov	local17, local06
035b0     44 8B 62 F0 | 	shl	local17, local16
035b4                 | '       midireport+=mrr<<(mb<<3)
035b4     41 71 02 F6 | 	mov	local04, local13
035b8     45 71 02 F1 | 	add	local04, local17
035bc     38 83 02 F6 | 	mov	local13, local04
035c0                 | LR__0114
035c0                 | LR__0115
035c0                 | '   
035c0                 | '   if mb==0
035c0     00 6C 0E F2 | 	cmp	local02, #0 wz
035c4     84 00 90 5D |  if_ne	jmp	#LR__0117
035c8                 | '     
035c8                 | '     if midifront<>((miditail-1) //32)
035c8     14 0E 06 F1 | 	add	objptr, #20
035cc     07 77 02 FB | 	rdlong	local07, objptr
035d0     3B 71 02 F6 | 	mov	local04, local07
035d4     01 70 86 F1 | 	sub	local04, #1
035d8     38 6B 52 F6 | 	abs	local01, local04 wc
035dc     1F 6A 06 F5 | 	and	local01, #31
035e0     35 6B 62 C6 |  if_b	neg	local01, local01
035e4     04 0E 86 F1 | 	sub	objptr, #4
035e8     07 7B 02 FB | 	rdlong	local09, objptr
035ec     10 0E 86 F1 | 	sub	objptr, #16
035f0     3D 7D 02 F6 | 	mov	local10, local09
035f4     35 7D 0A F2 | 	cmp	local10, local01 wz
035f8     4C 00 90 AD |  if_e	jmp	#LR__0116
035fc     10 0E 06 F1 | 	add	objptr, #16
03600     07 7D 02 FB | 	rdlong	local10, objptr
03604     02 7C 66 F0 | 	shl	local10, #2
03608     01 00 00 FF 
0360c     90 0E 06 F1 | 	add	objptr, ##656
03610     07 7D 02 F1 | 	add	local10, objptr
03614     3E 8D 02 F6 | 	mov	local18, local10
03618                 | '       midibuf[midifront]:=midireport
03618     46 83 62 FC | 	wrlong	local13, local18
0361c                 | '       midifront+=1
0361c     01 00 00 FF 
03620     90 0E 86 F1 | 	sub	objptr, ##656
03624     07 6B 02 FB | 	rdlong	local01, objptr
03628     01 6A 06 F1 | 	add	local01, #1
0362c     07 6B 62 FC | 	wrlong	local01, objptr
03630                 | '       midifront:=midifront // 32
03630     35 77 02 F6 | 	mov	local07, local01
03634     3B 71 52 F6 | 	abs	local04, local07 wc
03638     1F 70 06 F5 | 	and	local04, #31
0363c     38 71 62 C6 |  if_b	neg	local04, local04
03640     07 71 62 FC | 	wrlong	local04, objptr
03644     10 0E 86 F1 | 	sub	objptr, #16
03648                 | LR__0116
03648                 | '     mb:=(-1)
03648     01 6C 66 F6 | 	neg	local02, #1
0364c                 | LR__0117
0364c                 | ' 
0364c                 | ' 'Keyboard and mouse
0364c                 | ' 
0364c                 | '   if (rr>=$80) && (rr<>$FF)
0364c     80 72 5E F2 | 	cmps	local05, #128 wcz
03650     1C 00 90 CD |  if_b	jmp	#LR__0118
03654     FF 72 0E F2 | 	cmp	local05, #255 wz
03658     14 00 90 AD |  if_e	jmp	#LR__0118
0365c                 | '     b:=3
0365c     03 6E 06 F6 | 	mov	local03, #3
03660     39 71 02 F6 | 	mov	local04, local05
03664     18 70 66 F0 | 	shl	local04, #24
03668     38 8F 02 F6 | 	mov	local19, local04
0366c                 | '     kbmreport:=rr<<24
0366c     47 91 02 F6 | 	mov	local20, local19
03670                 | LR__0118
03670                 | '   
03670                 | '   if (rr<$80) && (b>0) && (rr>=0)
03670     80 72 5E F2 | 	cmps	local05, #128 wcz
03674     38 00 90 3D |  if_ae	jmp	#LR__0119
03678     00 6E 5E F2 | 	cmps	local03, #0 wcz
0367c     30 00 90 ED |  if_be	jmp	#LR__0119
03680     00 72 5E F2 | 	cmps	local05, #0 wcz
03684     28 00 90 CD |  if_b	jmp	#LR__0119
03688                 | '     b--
03688     37 77 02 F6 | 	mov	local07, local03
0368c     01 76 86 F1 | 	sub	local07, #1
03690     3B 6F 02 F6 | 	mov	local03, local07
03694     37 93 02 F6 | 	mov	local21, local03
03698     03 92 66 F0 | 	shl	local21, #3
0369c     39 95 02 F6 | 	mov	local22, local05
036a0     49 95 62 F0 | 	shl	local22, local21
036a4                 | '     kbmreport+=rr<<(b<<3)  
036a4     48 71 02 F6 | 	mov	local04, local20
036a8     4A 71 02 F1 | 	add	local04, local22
036ac     38 91 02 F6 | 	mov	local20, local04
036b0                 | LR__0119
036b0                 | '   
036b0                 | '   if (rr==$FF)
036b0     FF 72 0E F2 | 	cmp	local05, #255 wz
036b4                 | '     b:=0   
036b4     00 6E 06 A6 |  if_e	mov	local03, #0
036b8                 | ' 
036b8                 | '   if b==0  
036b8     00 6E 0E F2 | 	cmp	local03, #0 wz
036bc     14 01 90 5D |  if_ne	jmp	#LR__0124
036c0                 | '  
036c0                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
036c0     00 00 40 FF 
036c4     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
036c8     84 00 90 CD |  if_b	jmp	#LR__0121
036cc     00 80 43 FF 
036d0     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
036d4     78 00 90 3D |  if_ae	jmp	#LR__0121
036d8                 | '       if mousefront<>((mousetail-1) //128)
036d8     0C 0E 06 F1 | 	add	objptr, #12
036dc     07 77 02 FB | 	rdlong	local07, objptr
036e0     3B 71 02 F6 | 	mov	local04, local07
036e4     01 70 86 F1 | 	sub	local04, #1
036e8     38 6B 52 F6 | 	abs	local01, local04 wc
036ec     7F 6A 06 F5 | 	and	local01, #127
036f0     35 6B 62 C6 |  if_b	neg	local01, local01
036f4     04 0E 86 F1 | 	sub	objptr, #4
036f8     07 7B 02 FB | 	rdlong	local09, objptr
036fc     08 0E 86 F1 | 	sub	objptr, #8
03700     3D 7D 02 F6 | 	mov	local10, local09
03704     35 7D 0A F2 | 	cmp	local10, local01 wz
03708     44 00 90 AD |  if_e	jmp	#LR__0120
0370c     08 0E 06 F1 | 	add	objptr, #8
03710     07 7D 02 FB | 	rdlong	local10, objptr
03714     02 7C 66 F0 | 	shl	local10, #2
03718     98 0E 06 F1 | 	add	objptr, #152
0371c     07 7D 02 F1 | 	add	local10, objptr
03720     3E 97 02 F6 | 	mov	local23, local10
03724                 | '         mousebuf[mousefront]:=kbmreport
03724     4B 91 62 FC | 	wrlong	local20, local23
03728                 | '         mousefront+=1
03728     98 0E 86 F1 | 	sub	objptr, #152
0372c     07 6B 02 FB | 	rdlong	local01, objptr
03730     01 6A 06 F1 | 	add	local01, #1
03734     07 6B 62 FC | 	wrlong	local01, objptr
03738                 | '         mousefront:=mousefront // 128
03738     35 77 02 F6 | 	mov	local07, local01
0373c     3B 71 52 F6 | 	abs	local04, local07 wc
03740     7F 70 06 F5 | 	and	local04, #127
03744     38 71 62 C6 |  if_b	neg	local04, local04
03748     07 71 62 FC | 	wrlong	local04, objptr
0374c     08 0E 86 F1 | 	sub	objptr, #8
03750                 | LR__0120
03750                 | LR__0121
03750                 | '     b:=(-1)
03750     01 6E 66 F6 | 	neg	local03, #1
03754                 | ' 
03754                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03754     00 80 43 FF 
03758     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
0375c     70 00 90 CD |  if_b	jmp	#LR__0123
03760     00 00 45 FF 
03764     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03768     64 00 90 3D |  if_ae	jmp	#LR__0123
0376c                 | '       if kbdfront<>((kbdtail-1) //32)
0376c     04 0E 06 F1 | 	add	objptr, #4
03770     07 77 02 FB | 	rdlong	local07, objptr
03774     04 0E 86 F1 | 	sub	objptr, #4
03778     3B 71 02 F6 | 	mov	local04, local07
0377c     01 70 86 F1 | 	sub	local04, #1
03780     38 6B 52 F6 | 	abs	local01, local04 wc
03784     1F 6A 06 F5 | 	and	local01, #31
03788     35 6B 62 C6 |  if_b	neg	local01, local01
0378c     07 7D 02 FB | 	rdlong	local10, objptr
03790     35 7D 0A F2 | 	cmp	local10, local01 wz
03794     38 00 90 AD |  if_e	jmp	#LR__0122
03798     07 6B 02 FB | 	rdlong	local01, objptr
0379c     02 6A 66 F0 | 	shl	local01, #2
037a0     20 0E 06 F1 | 	add	objptr, #32
037a4     07 6B 02 F1 | 	add	local01, objptr
037a8     35 99 02 F6 | 	mov	local24, local01
037ac                 | '         kbdbuf[kbdfront]:=kbmreport
037ac     4C 91 62 FC | 	wrlong	local20, local24
037b0                 | '         kbdfront+=1
037b0     20 0E 86 F1 | 	sub	objptr, #32
037b4     07 77 02 FB | 	rdlong	local07, objptr
037b8     01 76 06 F1 | 	add	local07, #1
037bc     07 77 62 FC | 	wrlong	local07, objptr
037c0                 | '         kbdfront:=kbdfront // 32
037c0     3B 71 52 F6 | 	abs	local04, local07 wc
037c4     1F 70 06 F5 | 	and	local04, #31
037c8     38 71 62 C6 |  if_b	neg	local04, local04
037cc     07 71 62 FC | 	wrlong	local04, objptr
037d0                 | LR__0122
037d0                 | LR__0123
037d0                 | '     b:=(-1)
037d0     01 6E 66 F6 | 	neg	local03, #1
037d4                 | LR__0124
037d4                 | ' 
037d4                 | ' 
037d4                 | '   if long[$30]==0
037d4     30 70 0E FB | 	rdlong	local04, #48 wz
037d8     5C 00 90 5D |  if_ne	jmp	#LR__0126
037dc                 | '     if kbdfront<>kbdtail
037dc     07 71 02 FB | 	rdlong	local04, objptr
037e0     04 0E 06 F1 | 	add	objptr, #4
037e4     07 6B 02 FB | 	rdlong	local01, objptr
037e8     04 0E 86 F1 | 	sub	objptr, #4
037ec     35 71 0A F2 | 	cmp	local04, local01 wz
037f0     44 00 90 AD |  if_e	jmp	#LR__0125
037f4     04 0E 06 F1 | 	add	objptr, #4
037f8     07 9B 02 FB | 	rdlong	local25, objptr
037fc     02 9A 66 F0 | 	shl	local25, #2
03800     1C 0E 06 F1 | 	add	objptr, #28
03804     07 9B 02 F1 | 	add	local25, objptr
03808                 | '       long[$30]:=kbdbuf[kbdtail]
03808     4D 71 02 FB | 	rdlong	local04, local25
0380c     30 70 66 FC | 	wrlong	local04, #48
03810                 | '       kbdtail++
03810     1C 0E 86 F1 | 	sub	objptr, #28
03814     07 7D 02 FB | 	rdlong	local10, objptr
03818     3E 6B 02 F6 | 	mov	local01, local10
0381c     01 6A 06 F1 | 	add	local01, #1
03820     07 6B 62 FC | 	wrlong	local01, objptr
03824                 | '       kbdtail:= kbdtail // 32
03824     35 71 52 F6 | 	abs	local04, local01 wc
03828     1F 70 06 F5 | 	and	local04, #31
0382c     38 71 62 C6 |  if_b	neg	local04, local04
03830     07 71 62 FC | 	wrlong	local04, objptr
03834     04 0E 86 F1 | 	sub	objptr, #4
03838                 | LR__0125
03838                 | LR__0126
03838                 | '       
03838                 | '   if long[$34]==0
03838     34 70 0E FB | 	rdlong	local04, #52 wz
0383c     64 00 90 5D |  if_ne	jmp	#LR__0128
03840                 | '     if mousefront<>mousetail
03840     08 0E 06 F1 | 	add	objptr, #8
03844     07 71 02 FB | 	rdlong	local04, objptr
03848     04 0E 06 F1 | 	add	objptr, #4
0384c     07 7D 02 FB | 	rdlong	local10, objptr
03850     0C 0E 86 F1 | 	sub	objptr, #12
03854     3E 6B 02 F6 | 	mov	local01, local10
03858     35 71 0A F2 | 	cmp	local04, local01 wz
0385c     44 00 90 AD |  if_e	jmp	#LR__0127
03860     0C 0E 06 F1 | 	add	objptr, #12
03864     07 9D 02 FB | 	rdlong	local26, objptr
03868     02 9C 66 F0 | 	shl	local26, #2
0386c     94 0E 06 F1 | 	add	objptr, #148
03870     07 9D 02 F1 | 	add	local26, objptr
03874                 | '       long[$34]:=mousebuf[mousetail]
03874     4E 71 02 FB | 	rdlong	local04, local26
03878     34 70 66 FC | 	wrlong	local04, #52
0387c                 | '       mousetail++
0387c     94 0E 86 F1 | 	sub	objptr, #148
03880     07 7D 02 FB | 	rdlong	local10, objptr
03884     3E 6B 02 F6 | 	mov	local01, local10
03888     01 6A 06 F1 | 	add	local01, #1
0388c     07 6B 62 FC | 	wrlong	local01, objptr
03890                 | '       mousetail:= mousetail // 128
03890     35 71 52 F6 | 	abs	local04, local01 wc
03894     7F 70 06 F5 | 	and	local04, #127
03898     38 71 62 C6 |  if_b	neg	local04, local04
0389c     07 71 62 FC | 	wrlong	local04, objptr
038a0     0C 0E 86 F1 | 	sub	objptr, #12
038a4                 | LR__0127
038a4                 | LR__0128
038a4                 | ' 
038a4                 | '       
038a4                 | '   if long[$38]==0
038a4     38 70 0E FB | 	rdlong	local04, #56 wz
038a8     6C 00 90 5D |  if_ne	jmp	#LR__0130
038ac                 | '     if midifront<>miditail
038ac     10 0E 06 F1 | 	add	objptr, #16
038b0     07 71 02 FB | 	rdlong	local04, objptr
038b4     04 0E 06 F1 | 	add	objptr, #4
038b8     07 7D 02 FB | 	rdlong	local10, objptr
038bc     14 0E 86 F1 | 	sub	objptr, #20
038c0     3E 6B 02 F6 | 	mov	local01, local10
038c4     35 71 0A F2 | 	cmp	local04, local01 wz
038c8     4C 00 90 AD |  if_e	jmp	#LR__0129
038cc     14 0E 06 F1 | 	add	objptr, #20
038d0     07 9F 02 FB | 	rdlong	local27, objptr
038d4     02 9E 66 F0 | 	shl	local27, #2
038d8     01 00 00 FF 
038dc     8C 0E 06 F1 | 	add	objptr, ##652
038e0     07 9F 02 F1 | 	add	local27, objptr
038e4                 | '       long[$38]:=midibuf[miditail]
038e4     4F 71 02 FB | 	rdlong	local04, local27
038e8     38 70 66 FC | 	wrlong	local04, #56
038ec                 | '       miditail++
038ec     01 00 00 FF 
038f0     8C 0E 86 F1 | 	sub	objptr, ##652
038f4     07 7D 02 FB | 	rdlong	local10, objptr
038f8     3E 6B 02 F6 | 	mov	local01, local10
038fc     01 6A 06 F1 | 	add	local01, #1
03900     07 6B 62 FC | 	wrlong	local01, objptr
03904                 | '       miditail:= miditail // 32
03904     35 71 52 F6 | 	abs	local04, local01 wc
03908     1F 70 06 F5 | 	and	local04, #31
0390c     38 71 62 C6 |  if_b	neg	local04, local04
03910     07 71 62 FC | 	wrlong	local04, objptr
03914     14 0E 86 F1 | 	sub	objptr, #20
03918                 | LR__0129
03918                 | LR__0130
03918                 | '       
03918                 | '   if long[$3c]==0
03918     3C 70 0E FB | 	rdlong	local04, #60 wz
0391c     34 FB 9F 5D |  if_ne	jmp	#LR__0106
03920                 | '     if serialfront<>serialtail
03920     18 0E 06 F1 | 	add	objptr, #24
03924     07 71 02 FB | 	rdlong	local04, objptr
03928     04 0E 06 F1 | 	add	objptr, #4
0392c     07 7D 02 FB | 	rdlong	local10, objptr
03930     1C 0E 86 F1 | 	sub	objptr, #28
03934     3E 6B 02 F6 | 	mov	local01, local10
03938     35 71 0A F2 | 	cmp	local04, local01 wz
0393c     14 FB 9F AD |  if_e	jmp	#LR__0106
03940                 | '       byte[$3c]:=255
03940     3C FE 4D FC | 	wrbyte	#255, #60
03944     1C 0E 06 F1 | 	add	objptr, #28
03948     07 A1 02 FB | 	rdlong	local28, objptr
0394c     01 00 00 FF 
03950     04 0F 06 F1 | 	add	objptr, ##772
03954     07 A1 02 F1 | 	add	local28, objptr
03958                 | '       byte[$3D]:=serialbuf[serialtail]
03958     50 71 C2 FA | 	rdbyte	local04, local28
0395c     3D 70 46 FC | 	wrbyte	local04, #61
03960                 | '       serialtail++
03960     01 00 00 FF 
03964     04 0F 86 F1 | 	sub	objptr, ##772
03968     07 7D 02 FB | 	rdlong	local10, objptr
0396c     3E 6B 02 F6 | 	mov	local01, local10
03970     01 6A 06 F1 | 	add	local01, #1
03974     07 6B 62 FC | 	wrlong	local01, objptr
03978                 | '       serialtail:= serialtail // 32
03978     35 71 52 F6 | 	abs	local04, local01 wc
0397c     1F 70 06 F5 | 	and	local04, #31
03980     38 71 62 C6 |  if_b	neg	local04, local04
03984     07 71 62 FC | 	wrlong	local04, objptr
03988     1C 0E 86 F1 | 	sub	objptr, #28
0398c     C4 FA 9F FD | 	jmp	#LR__0106
03990     AF F0 03 F6 | 	mov	ptra, fp
03994     BF 00 A0 FD | 	call	#popregs_
03998                 | _retrocog_spin2_serialcog_ret
03998     2D 00 64 FD | 	ret
0399c                 | 
0399c                 | '       
0399c                 | ' 
0399c                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
0399c                 | ' 
0399c                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
0399c                 | _retrocog_spin2_serial_start
0399c     04 5A 05 F6 | 	mov	COUNT_, #4
039a0     B0 00 A0 FD | 	call	#pushregs_
039a4     2E 6B 02 F6 | 	mov	local01, arg01
039a8     2F 6D 02 F6 | 	mov	local02, arg02
039ac                 | ' 
039ac                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
039ac     14 5C 06 FB | 	rdlong	arg01, #20
039b0     10 5E C6 F9 | 	decod	arg02, #16
039b4     2F 5D 02 FD | 	qmul	arg01, arg02
039b8     19 6E 62 FD | 	getqy	local03
039bc     18 70 62 FD | 	getqx	local04
039c0     28 6E 62 FD | 	setq	local03
039c4     30 71 12 FD | 	qdiv	local04, arg03
039c8     18 2A 62 FD | 	getqx	result1
039cc     15 61 02 F6 | 	mov	arg03, result1
039d0     FE FF 7F FF 
039d4     00 60 06 F5 | 	and	arg03, ##-1024
039d8                 | ' bitmode |= 7                                                  ' set bits (8)
039d8     07 60 46 F5 | 	or	arg03, #7
039dc                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
039dc     40 6A 62 FD | 	dirl	local01
039e0     08 00 80 FF 
039e4     35 7D 08 FC | 	wrpin	##4158, local01
039e8     35 61 12 FC | 	wxpin	arg03, local01
039ec     35 01 28 FC | 	wypin	#0, local01
039f0     41 6A 62 FD | 	dirh	local01
039f4                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
039f4     40 6C 62 FD | 	dirl	local02
039f8     36 F9 08 FC | 	wrpin	#124, local02
039fc     36 61 12 FC | 	wxpin	arg03, local02
03a00     36 01 28 FC | 	wypin	#0, local02
03a04     41 6C 62 FD | 	dirh	local02
03a08                 | ' pinhigh(rxpin)
03a08     59 6A 62 FD | 	drvh	local01
03a0c     AF F0 03 F6 | 	mov	ptra, fp
03a10     BF 00 A0 FD | 	call	#popregs_
03a14                 | _retrocog_spin2_serial_start_ret
03a14     2D 00 64 FD | 	ret
03a18                 | 
03a18                 | ' 
03a18                 | ' pub rxcheck(pin) : rxbyte | check
03a18                 | _retrocog_spin2_rxcheck
03a18     03 5A 05 F6 | 	mov	COUNT_, #3
03a1c     B0 00 A0 FD | 	call	#pushregs_
03a20     2E 6B 02 F6 | 	mov	local01, arg01
03a24                 | ' 
03a24                 | ' '' Check for serial input
03a24                 | ' '' -- returns -1 if nothing available
03a24                 | ' 
03a24                 | '   rxbyte := -1
03a24     01 6C 66 F6 | 	neg	local02, #1
03a28                 | '   check := pinr(pin)
03a28     35 5D 02 F6 | 	mov	arg01, local01
03a2c     6C 26 B0 FD | 	call	#__system___pinread
03a30     15 6F 0A F6 | 	mov	local03, result1 wz
03a34                 | '   if (check)
03a34                 | '     rxbyte := rdpin(pin) >> 24
03a34     00 6C 06 56 |  if_ne	mov	local02, #0
03a38     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03a3c     18 6C 46 50 |  if_ne	shr	local02, #24
03a40     36 2B 02 F6 | 	mov	result1, local02
03a44     AF F0 03 F6 | 	mov	ptra, fp
03a48     BF 00 A0 FD | 	call	#popregs_
03a4c                 | _retrocog_spin2_rxcheck_ret
03a4c     2D 00 64 FD | 	ret
03a50                 | 
03a50                 | _trackerplayer_spin2_initModule
03a50     3E 5A 05 F6 | 	mov	COUNT_, #62
03a54     B0 00 A0 FD | 	call	#pushregs_
03a58     24 F1 07 F1 | 	add	ptra, #292
03a5c     AF 5C 62 FC | 	wrlong	arg01, fp
03a60     04 5E 05 F1 | 	add	fp, #4
03a64     AF 5E 62 FC | 	wrlong	arg02, fp
03a68     04 5E 85 F1 | 	sub	fp, #4
03a6c     AF 6A 02 FB | 	rdlong	local01, fp
03a70     02 00 00 FF 
03a74     38 6A 06 F1 | 	add	local01, ##1080
03a78                 | ' 
03a78                 | '   ' Set some data pointers
03a78                 | '   magicFour      := hubPtr + 1080
03a78     9D 0E 06 F1 | 	add	objptr, #157
03a7c     07 6B 62 FC | 	wrlong	local01, objptr
03a80                 | '   nameStr        := hubPtr
03a80     AF 6C 02 FB | 	rdlong	local02, fp
03a84     97 0E 86 F1 | 	sub	objptr, #151
03a88     07 6D 62 FC | 	wrlong	local02, objptr
03a8c     AF 6E 02 FB | 	rdlong	local03, fp
03a90     14 6E 06 F1 | 	add	local03, #20
03a94                 | '   samplesInfoLut := hubPtr + 20
03a94     04 0E 06 F1 | 	add	objptr, #4
03a98     07 6F 62 FC | 	wrlong	local03, objptr
03a9c                 | ' 
03a9c                 | '   ' Is this a 31 sample module?
03a9c                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03a9c     93 0E 06 F1 | 	add	objptr, #147
03aa0     07 6D 02 FB | 	rdlong	local02, objptr
03aa4     9D 0E 86 F1 | 	sub	objptr, #157
03aa8     36 71 C2 FA | 	rdbyte	local04, local02
03aac     4D 70 0E F2 | 	cmp	local04, #77 wz
03ab0     48 01 90 5D |  if_ne	jmp	#LR__0134
03ab4     9D 0E 06 F1 | 	add	objptr, #157
03ab8     07 73 02 FB | 	rdlong	local05, objptr
03abc     9D 0E 86 F1 | 	sub	objptr, #157
03ac0     02 72 06 F1 | 	add	local05, #2
03ac4     39 75 C2 FA | 	rdbyte	local06, local05
03ac8     4B 74 0E F2 | 	cmp	local06, #75 wz
03acc     2C 01 90 5D |  if_ne	jmp	#LR__0134
03ad0     AF 76 02 FB | 	rdlong	local07, fp
03ad4     01 00 00 FF 
03ad8     B6 77 06 F1 | 	add	local07, ##950
03adc                 | '     songLength          := byte[hubPtr + 950]
03adc     3B 6D C2 FA | 	rdbyte	local02, local07
03ae0     9A 0E 06 F1 | 	add	objptr, #154
03ae4     07 6D 42 FC | 	wrbyte	local02, objptr
03ae8     AF 78 02 FB | 	rdlong	local08, fp
03aec     01 00 00 FF 
03af0     B7 79 06 F1 | 	add	local08, ##951
03af4                 | '     unknown1            := byte[hubPtr + 951]
03af4     3C 6D C2 FA | 	rdbyte	local02, local08
03af8     02 0E 06 F1 | 	add	objptr, #2
03afc     07 6D 42 FC | 	wrbyte	local02, objptr
03b00     AF 7A 02 FB | 	rdlong	local09, fp
03b04     01 00 00 FF 
03b08     B8 7B 06 F1 | 	add	local09, ##952
03b0c                 | '     songPositionsLut    :=      hubPtr + 952
03b0c     06 0E 86 F1 | 	sub	objptr, #6
03b10     07 7B 62 FC | 	wrlong	local09, objptr
03b14     AF 7C 02 FB | 	rdlong	local10, fp
03b18     02 00 00 FF 
03b1c     3C 7C 06 F1 | 	add	local10, ##1084
03b20                 | '     patternsData        :=      hubPtr + 1084
03b20     04 0E 86 F1 | 	sub	objptr, #4
03b24     07 7D 62 FC | 	wrlong	local10, objptr
03b28                 | '     numberOfInstruments := 31
03b28     14 0E 06 F1 | 	add	objptr, #20
03b2c     07 3F 48 FC | 	wrbyte	#31, objptr
03b30                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03b30     0B 0E 86 F1 | 	sub	objptr, #11
03b34     07 01 48 FC | 	wrbyte	#0, objptr
03b38     9B 0E 86 F1 | 	sub	objptr, #155
03b3c                 | '     repeat i from 952 to 1079
03b3c     08 5E 05 F1 | 	add	fp, #8
03b40     01 00 80 FF 
03b44     AF 70 6B FC | 	wrlong	##952, fp
03b48     08 5E 85 F1 | 	sub	fp, #8
03b4c     20 C5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
03b50     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b54                 | LR__0131
03b54                 | '       if byte[hubPtr][i] > numberOfPatterns
03b54     AF 7E 02 FB | 	rdlong	local11, fp
03b58     08 5E 05 F1 | 	add	fp, #8
03b5c     AF 70 02 FB | 	rdlong	local04, fp
03b60     08 5E 85 F1 | 	sub	fp, #8
03b64     3F 71 02 F1 | 	add	local04, local11
03b68     38 75 C2 FA | 	rdbyte	local06, local04
03b6c     9B 0E 06 F1 | 	add	objptr, #155
03b70     07 81 C2 FA | 	rdbyte	local12, objptr
03b74     9B 0E 86 F1 | 	sub	objptr, #155
03b78     40 75 5A F2 | 	cmps	local06, local12 wcz
03b7c     24 00 90 ED |  if_be	jmp	#LR__0132
03b80     AF 7E 02 FB | 	rdlong	local11, fp
03b84     08 5E 05 F1 | 	add	fp, #8
03b88     AF 82 02 FB | 	rdlong	local13, fp
03b8c     08 5E 85 F1 | 	sub	fp, #8
03b90     3F 83 02 F1 | 	add	local13, local11
03b94                 | '         numberOfPatterns := byte[hubPtr][i]
03b94     41 85 C2 FA | 	rdbyte	local14, local13
03b98     9B 0E 06 F1 | 	add	objptr, #155
03b9c     07 85 42 FC | 	wrbyte	local14, objptr
03ba0     9B 0E 86 F1 | 	sub	objptr, #155
03ba4                 | LR__0132
03ba4     08 5E 05 F1 | 	add	fp, #8
03ba8     AF 84 02 FB | 	rdlong	local14, fp
03bac     01 84 06 F1 | 	add	local14, #1
03bb0     AF 84 62 FC | 	wrlong	local14, fp
03bb4     08 5E 85 F1 | 	sub	fp, #8
03bb8     02 00 00 FF 
03bbc     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03bc0     90 FF 9F CD |  if_b	jmp	#LR__0131
03bc4                 | LR__0133
03bc4                 | '     numberOfPatterns++
03bc4     9B 0E 06 F1 | 	add	objptr, #155
03bc8     07 85 C2 FA | 	rdbyte	local14, objptr
03bcc     07 71 C2 FA | 	rdbyte	local04, objptr
03bd0     01 70 06 F1 | 	add	local04, #1
03bd4     07 71 42 FC | 	wrbyte	local04, objptr
03bd8     07 87 C2 FA | 	rdbyte	local15, objptr
03bdc     0A 86 66 F0 | 	shl	local15, #10
03be0     09 0E 86 F1 | 	sub	objptr, #9
03be4     07 89 02 FB | 	rdlong	local16, objptr
03be8     43 89 02 F1 | 	add	local16, local15
03bec                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03bec     84 0E 86 F1 | 	sub	objptr, #132
03bf0     07 89 62 FC | 	wrlong	local16, objptr
03bf4     0E 0E 86 F1 | 	sub	objptr, #14
03bf8                 | ' 
03bf8                 | '   ' This must be an oldschool 15 sample soundtracker module
03bf8                 | '   else
03bf8     18 01 90 FD | 	jmp	#LR__0138
03bfc                 | LR__0134
03bfc     AF 8A 02 FB | 	rdlong	local17, fp
03c00     D6 8B 06 F1 | 	add	local17, #470
03c04                 | '     songLength          := byte[hubPtr + 470]
03c04     45 6D C2 FA | 	rdbyte	local02, local17
03c08     9A 0E 06 F1 | 	add	objptr, #154
03c0c     07 6D 42 FC | 	wrbyte	local02, objptr
03c10     AF 8C 02 FB | 	rdlong	local18, fp
03c14     D7 8D 06 F1 | 	add	local18, #471
03c18                 | '     unknown1            := byte[hubPtr + 471]
03c18     46 6D C2 FA | 	rdbyte	local02, local18
03c1c     02 0E 06 F1 | 	add	objptr, #2
03c20     07 6D 42 FC | 	wrbyte	local02, objptr
03c24     AF 8E 02 FB | 	rdlong	local19, fp
03c28     D8 8F 06 F1 | 	add	local19, #472
03c2c                 | '     songPositionsLut    :=      hubPtr + 472
03c2c     06 0E 86 F1 | 	sub	objptr, #6
03c30     07 8F 62 FC | 	wrlong	local19, objptr
03c34     AF 90 02 FB | 	rdlong	local20, fp
03c38     01 00 00 FF 
03c3c     58 90 06 F1 | 	add	local20, ##600
03c40                 | '     patternsData        :=      hubPtr + 600
03c40     04 0E 86 F1 | 	sub	objptr, #4
03c44     07 91 62 FC | 	wrlong	local20, objptr
03c48                 | '     numberOfInstruments := 15
03c48     14 0E 06 F1 | 	add	objptr, #20
03c4c     07 1F 48 FC | 	wrbyte	#15, objptr
03c50                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c50     0B 0E 86 F1 | 	sub	objptr, #11
03c54     07 01 48 FC | 	wrbyte	#0, objptr
03c58     9B 0E 86 F1 | 	sub	objptr, #155
03c5c                 | '     repeat i from 472 to 599
03c5c     08 5E 05 F1 | 	add	fp, #8
03c60     AF B0 6B FC | 	wrlong	#472, fp
03c64     08 5E 85 F1 | 	sub	fp, #8
03c68     04 C4 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
03c6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c70                 | LR__0135
03c70                 | '       if byte[hubPtr][i] > numberOfPatterns
03c70     AF 7E 02 FB | 	rdlong	local11, fp
03c74     08 5E 05 F1 | 	add	fp, #8
03c78     AF 70 02 FB | 	rdlong	local04, fp
03c7c     08 5E 85 F1 | 	sub	fp, #8
03c80     3F 71 02 F1 | 	add	local04, local11
03c84     38 75 C2 FA | 	rdbyte	local06, local04
03c88     9B 0E 06 F1 | 	add	objptr, #155
03c8c     07 81 C2 FA | 	rdbyte	local12, objptr
03c90     9B 0E 86 F1 | 	sub	objptr, #155
03c94     40 75 5A F2 | 	cmps	local06, local12 wcz
03c98     24 00 90 ED |  if_be	jmp	#LR__0136
03c9c     AF 7E 02 FB | 	rdlong	local11, fp
03ca0     08 5E 05 F1 | 	add	fp, #8
03ca4     AF 92 02 FB | 	rdlong	local21, fp
03ca8     08 5E 85 F1 | 	sub	fp, #8
03cac     3F 93 02 F1 | 	add	local21, local11
03cb0                 | '         numberOfPatterns := byte[hubPtr][i]
03cb0     49 85 C2 FA | 	rdbyte	local14, local21
03cb4     9B 0E 06 F1 | 	add	objptr, #155
03cb8     07 85 42 FC | 	wrbyte	local14, objptr
03cbc     9B 0E 86 F1 | 	sub	objptr, #155
03cc0                 | LR__0136
03cc0     08 5E 05 F1 | 	add	fp, #8
03cc4     AF 84 02 FB | 	rdlong	local14, fp
03cc8     01 84 06 F1 | 	add	local14, #1
03ccc     AF 84 62 FC | 	wrlong	local14, fp
03cd0     08 5E 85 F1 | 	sub	fp, #8
03cd4     01 00 00 FF 
03cd8     58 84 5E F2 | 	cmps	local14, ##600 wcz
03cdc     90 FF 9F CD |  if_b	jmp	#LR__0135
03ce0                 | LR__0137
03ce0                 | '     numberOfPatterns++
03ce0     9B 0E 06 F1 | 	add	objptr, #155
03ce4     07 85 C2 FA | 	rdbyte	local14, objptr
03ce8     07 71 C2 FA | 	rdbyte	local04, objptr
03cec     01 70 06 F1 | 	add	local04, #1
03cf0     07 71 42 FC | 	wrbyte	local04, objptr
03cf4     07 95 C2 FA | 	rdbyte	local22, objptr
03cf8     0A 94 66 F0 | 	shl	local22, #10
03cfc     09 0E 86 F1 | 	sub	objptr, #9
03d00     07 97 02 FB | 	rdlong	local23, objptr
03d04     4A 97 02 F1 | 	add	local23, local22
03d08                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d08     84 0E 86 F1 | 	sub	objptr, #132
03d0c     07 97 62 FC | 	wrlong	local23, objptr
03d10     0E 0E 86 F1 | 	sub	objptr, #14
03d14                 | LR__0138
03d14                 | ' 
03d14                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03d14                 | '   tmpPtr := sampleDataPtr
03d14     0E 0E 06 F1 | 	add	objptr, #14
03d18     07 6D 02 FB | 	rdlong	local02, objptr
03d1c     0C 5E 05 F1 | 	add	fp, #12
03d20     AF 6C 62 FC | 	wrlong	local02, fp
03d24                 | '   repeat i from 1 to numberOfInstruments
03d24     04 5E 85 F1 | 	sub	fp, #4
03d28     AF 02 68 FC | 	wrlong	#1, fp
03d2c     08 5E 85 F1 | 	sub	fp, #8
03d30     98 0E 06 F1 | 	add	objptr, #152
03d34     07 71 C2 FA | 	rdbyte	local04, objptr
03d38     01 70 5E F2 | 	cmps	local04, #1 wcz
03d3c     01 84 06 16 |  if_a	mov	local14, #1
03d40     01 84 66 E6 |  if_be	neg	local14, #1
03d44     42 99 02 F6 | 	mov	local24, local14
03d48     07 9B C2 FA | 	rdbyte	local25, objptr
03d4c     A6 0E 86 F1 | 	sub	objptr, #166
03d50     4C 9B 02 F1 | 	add	local25, local24
03d54                 | LR__0139
03d54     08 5E 05 F1 | 	add	fp, #8
03d58     AF 9C 02 FB | 	rdlong	local26, fp
03d5c     01 9C 86 F1 | 	sub	local26, #1
03d60     02 9C 66 F0 | 	shl	local26, #2
03d64     12 0E 06 F1 | 	add	objptr, #18
03d68     07 9D 02 F1 | 	add	local26, objptr
03d6c                 | '     samplesPtrLut[i-1] := tmpPtr
03d6c     04 5E 05 F1 | 	add	fp, #4
03d70     AF 80 02 FB | 	rdlong	local12, fp
03d74     4E 81 62 FC | 	wrlong	local12, local26
03d78     18 5E 05 F1 | 	add	fp, #24
03d7c     AF 5E 02 F6 | 	mov	arg02, fp
03d80     14 5E 85 F1 | 	sub	fp, #20
03d84     AF 60 02 F6 | 	mov	arg03, fp
03d88     04 5E 05 F1 | 	add	fp, #4
03d8c     AF 62 02 F6 | 	mov	arg04, fp
03d90     04 5E 05 F1 | 	add	fp, #4
03d94     AF 64 02 F6 | 	mov	arg05, fp
03d98     04 5E 05 F1 | 	add	fp, #4
03d9c     AF 66 02 F6 | 	mov	arg06, fp
03da0     04 5E 05 F1 | 	add	fp, #4
03da4     AF 68 02 F6 | 	mov	arg07, fp
03da8                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03da8     18 5E 85 F1 | 	sub	fp, #24
03dac     AF 5C 02 FB | 	rdlong	arg01, fp
03db0     08 5E 85 F1 | 	sub	fp, #8
03db4     12 0E 86 F1 | 	sub	objptr, #18
03db8     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03dbc                 | '     tmpPtr += samLength
03dbc     0C 5E 05 F1 | 	add	fp, #12
03dc0     AF 80 02 FB | 	rdlong	local12, fp
03dc4     04 5E 05 F1 | 	add	fp, #4
03dc8     AF 9E 02 FB | 	rdlong	local27, fp
03dcc     4F 81 02 F1 | 	add	local12, local27
03dd0     04 5E 85 F1 | 	sub	fp, #4
03dd4     AF 80 62 FC | 	wrlong	local12, fp
03dd8     04 5E 85 F1 | 	sub	fp, #4
03ddc     AF 80 02 FB | 	rdlong	local12, fp
03de0     4C 81 02 F1 | 	add	local12, local24
03de4     AF 80 62 FC | 	wrlong	local12, fp
03de8     08 5E 85 F1 | 	sub	fp, #8
03dec     4D 81 0A F2 | 	cmp	local12, local25 wz
03df0     60 FF 9F 5D |  if_ne	jmp	#LR__0139
03df4                 | ' 
03df4                 | '   ' Below this point, all play routine variables are resest to their default values
03df4                 | '   tickCounter                 := 0
03df4     A1 0E 06 F1 | 	add	objptr, #161
03df8     07 01 48 FC | 	wrbyte	#0, objptr
03dfc                 | '   patternRow                  := 0
03dfc     01 0E 06 F1 | 	add	objptr, #1
03e00     07 01 48 FC | 	wrbyte	#0, objptr
03e04                 | '   songPosition                := startPattern
03e04     04 5E 05 F1 | 	add	fp, #4
03e08     AF 6C 02 FB | 	rdlong	local02, fp
03e0c     04 5E 85 F1 | 	sub	fp, #4
03e10     01 0E 06 F1 | 	add	objptr, #1
03e14     07 6D 42 FC | 	wrbyte	local02, objptr
03e18                 | '   currentSongSpeed            := 6
03e18     01 0E 06 F1 | 	add	objptr, #1
03e1c     07 0D 48 FC | 	wrbyte	#6, objptr
03e20                 | '   patternDelay                := 0
03e20     01 0E 06 F1 | 	add	objptr, #1
03e24     07 01 48 FC | 	wrbyte	#0, objptr
03e28                 | '   ticksPerMinute              := 50 * 60
03e28     02 0F 06 F1 | 	add	objptr, #258
03e2c     05 00 80 FF 
03e30     07 71 6B FC | 	wrlong	##3000, objptr
03e34     A7 0F 86 F1 | 	sub	objptr, #423
03e38     07 0B 03 FB | 	rdlong	muldiva_, objptr
03e3c     32 0C 07 F6 | 	mov	muldivb_, #50
03e40     D0 00 A0 FD | 	call	#divide_
03e44                 | '   cyclesToWait                := systemClock / 50
03e44     AB 0F 06 F1 | 	add	objptr, #427
03e48     07 0D 63 FC | 	wrlong	muldivb_, objptr
03e4c                 | '   sampleNumber_memory         := 0
03e4c     35 0E 06 F1 | 	add	objptr, #53
03e50     07 01 48 FC | 	wrbyte	#0, objptr
03e54                 | '   lpFilter                    := 0
03e54     25 0E 86 F1 | 	sub	objptr, #37
03e58     07 01 48 FC | 	wrbyte	#0, objptr
03e5c                 | '   cmdD_memoryX                := 0
03e5c     29 0E 06 F1 | 	add	objptr, #41
03e60     07 01 48 FC | 	wrbyte	#0, objptr
03e64                 | '   cmdD_memoryY                := 0
03e64     01 0E 06 F1 | 	add	objptr, #1
03e68     07 01 48 FC | 	wrbyte	#0, objptr
03e6c                 | '   cmdD_updatePosition         := false
03e6c     01 0E 06 F1 | 	add	objptr, #1
03e70     07 01 48 FC | 	wrbyte	#0, objptr
03e74                 | '   cmdB_memoryZ                := 0
03e74     01 0E 06 F1 | 	add	objptr, #1
03e78     07 01 48 FC | 	wrbyte	#0, objptr
03e7c                 | '   cmdB_updatePosition         := false
03e7c     01 0E 06 F1 | 	add	objptr, #1
03e80     07 01 48 FC | 	wrbyte	#0, objptr
03e84                 | '   cmdE6_updatePositionCommon  := false
03e84     0D 0E 06 F1 | 	add	objptr, #13
03e88     07 01 48 FC | 	wrbyte	#0, objptr
03e8c     F5 0F 86 F1 | 	sub	objptr, #501
03e90                 | ' 
03e90                 | '   repeat i from 0 to LAST_CHANNEL
03e90     08 5E 05 F1 | 	add	fp, #8
03e94     AF 00 68 FC | 	wrlong	#0, fp
03e98     08 5E 85 F1 | 	sub	fp, #8
03e9c                 | LR__0140
03e9c     08 5E 05 F1 | 	add	fp, #8
03ea0     AF A0 02 FB | 	rdlong	local28, fp
03ea4     01 A0 66 F0 | 	shl	local28, #1
03ea8     D7 0E 06 F1 | 	add	objptr, #215
03eac     07 A1 02 F1 | 	add	local28, objptr
03eb0                 | ' 
03eb0                 | '     currRepeatPoint[i]        := 0
03eb0     50 01 58 FC | 	wrword	#0, local28
03eb4     AF A2 02 FB | 	rdlong	local29, fp
03eb8     01 A2 66 F0 | 	shl	local29, #1
03ebc     1C 0E 86 F1 | 	sub	objptr, #28
03ec0     07 A3 02 F1 | 	add	local29, objptr
03ec4                 | '     currSampleLength[i]       := 4
03ec4     51 09 58 FC | 	wrword	#4, local29
03ec8     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03ecc     AF A6 02 FB | 	rdlong	local31, fp
03ed0     02 A6 66 F0 | 	shl	local31, #2
03ed4     14 0E 86 F1 | 	sub	objptr, #20
03ed8     07 A7 02 F1 | 	add	local31, objptr
03edc                 | '     currSamplePtr[i]          := @null
03edc     53 A5 62 FC | 	wrlong	local30, local31
03ee0     AF A8 02 FB | 	rdlong	local32, fp
03ee4     10 0E 06 F1 | 	add	objptr, #16
03ee8     07 A9 02 F1 | 	add	local32, objptr
03eec                 | '     currSampleNr[i]           := 0
03eec     54 01 48 FC | 	wrbyte	#0, local32
03ef0     AF AA 02 FB | 	rdlong	local33, fp
03ef4     02 AA 66 F0 | 	shl	local33, #2
03ef8     0C 0E 06 F1 | 	add	objptr, #12
03efc     07 AB 02 F1 | 	add	local33, objptr
03f00                 | '     currRepeatLength[i]       := 1
03f00     55 03 68 FC | 	wrlong	#1, local33
03f04     AF AC 02 FB | 	rdlong	local34, fp
03f08     02 AC 66 F0 | 	shl	local34, #2
03f0c     1C 0E 06 F1 | 	add	objptr, #28
03f10     07 AD 02 F1 | 	add	local34, objptr
03f14                 | '     currPeriod[i]             := 400
03f14     56 21 6B FC | 	wrlong	#400, local34
03f18     AF AE 02 FB | 	rdlong	local35, fp
03f1c     02 AE 66 F0 | 	shl	local35, #2
03f20     48 0E 06 F1 | 	add	objptr, #72
03f24     07 AF 02 F1 | 	add	local35, objptr
03f28                 | '     lastSetPeriod[i]          := 400
03f28     57 21 6B FC | 	wrlong	#400, local35
03f2c     AF B0 02 FB | 	rdlong	local36, fp
03f30     02 B0 66 F0 | 	shl	local36, #2
03f34     10 0E 06 F1 | 	add	objptr, #16
03f38     07 B1 02 F1 | 	add	local36, objptr
03f3c                 | '     lastSetSamplePtr[i]       := 0
03f3c     58 01 68 FC | 	wrlong	#0, local36
03f40     AF B2 02 FB | 	rdlong	local37, fp
03f44     02 B2 66 F0 | 	shl	local37, #2
03f48     10 0E 06 F1 | 	add	objptr, #16
03f4c     07 B3 02 F1 | 	add	local37, objptr
03f50                 | '     lastSetSampleNr[i]        := 0
03f50     59 01 68 FC | 	wrlong	#0, local37
03f54     AF B4 02 FB | 	rdlong	local38, fp
03f58     02 B4 66 F0 | 	shl	local38, #2
03f5c     10 0E 06 F1 | 	add	objptr, #16
03f60     07 B5 02 F1 | 	add	local38, objptr
03f64                 | '     lastSetSampleLength[i]    := 0
03f64     5A 01 68 FC | 	wrlong	#0, local38
03f68     AF B6 02 FB | 	rdlong	local39, fp
03f6c     02 B6 66 F0 | 	shl	local39, #2
03f70     10 0E 06 F1 | 	add	objptr, #16
03f74     07 B7 02 F1 | 	add	local39, objptr
03f78                 | '     lastSetRepeatLength[i]    := 0
03f78     5B 01 68 FC | 	wrlong	#0, local39
03f7c     AF B8 02 FB | 	rdlong	local40, fp
03f80     02 B8 66 F0 | 	shl	local40, #2
03f84     10 0E 06 F1 | 	add	objptr, #16
03f88     07 B9 02 F1 | 	add	local40, objptr
03f8c                 | '     lastSetRepeatPoint[i]     := 0
03f8c     5C 01 68 FC | 	wrlong	#0, local40
03f90     AF BA 02 FB | 	rdlong	local41, fp
03f94     02 BA 66 F0 | 	shl	local41, #2
03f98     78 0E 86 F1 | 	sub	objptr, #120
03f9c     07 BB 02 F1 | 	add	local41, objptr
03fa0                 | '     currVolume[i]             := 0
03fa0     5D 01 68 FC | 	wrlong	#0, local41
03fa4     AF BC 02 FB | 	rdlong	local42, fp
03fa8     01 BC 66 F0 | 	shl	local42, #1
03fac     20 0E 06 F1 | 	add	objptr, #32
03fb0     07 BD 02 F1 | 	add	local42, objptr
03fb4                 | '     currPanning[i]            := 0
03fb4     5E 01 58 FC | 	wrword	#0, local42
03fb8     AF BE 02 FB | 	rdlong	local43, fp
03fbc     A9 0E 06 F1 | 	add	objptr, #169
03fc0     07 BF 02 F1 | 	add	local43, objptr
03fc4                 | '     cmd3_memoryZ[i]           := 0
03fc4     5F 01 48 FC | 	wrbyte	#0, local43
03fc8     AF C0 02 FB | 	rdlong	local44, fp
03fcc     04 0E 06 F1 | 	add	objptr, #4
03fd0     07 C1 02 F1 | 	add	local44, objptr
03fd4                 | '     cmd4_memoryY[i]           := 0
03fd4     60 01 48 FC | 	wrbyte	#0, local44
03fd8     AF C2 02 FB | 	rdlong	local45, fp
03fdc     04 0E 06 F1 | 	add	objptr, #4
03fe0     07 C3 02 F1 | 	add	local45, objptr
03fe4                 | '     cmd4_memoryX[i]           := 0
03fe4     61 01 48 FC | 	wrbyte	#0, local45
03fe8     AF C4 02 FB | 	rdlong	local46, fp
03fec     04 0E 06 F1 | 	add	objptr, #4
03ff0     07 C5 02 F1 | 	add	local46, objptr
03ff4                 | '     cmd7_memoryY[i]           := 0
03ff4     62 01 48 FC | 	wrbyte	#0, local46
03ff8     AF C6 02 FB | 	rdlong	local47, fp
03ffc     04 0E 06 F1 | 	add	objptr, #4
04000     07 C7 02 F1 | 	add	local47, objptr
04004                 | '     cmd7_memoryX[i]           := 0
04004     63 01 48 FC | 	wrbyte	#0, local47
04008     AF C8 02 FB | 	rdlong	local48, fp
0400c     04 0E 06 F1 | 	add	objptr, #4
04010     07 C9 02 F1 | 	add	local48, objptr
04014                 | '     cmd9_memoryZ[i]           := 0
04014     64 01 48 FC | 	wrbyte	#0, local48
04018     AF CA 02 FB | 	rdlong	local49, fp
0401c     0D 0E 06 F1 | 	add	objptr, #13
04020     07 CB 02 F1 | 	add	local49, objptr
04024                 | '     cmdE6_memory[i]           := 0
04024     65 01 48 FC | 	wrbyte	#0, local49
04028     AF CC 02 FB | 	rdlong	local50, fp
0402c     04 0E 06 F1 | 	add	objptr, #4
04030     07 CD 02 F1 | 	add	local50, objptr
04034                 | '     cmdE6_counter[i]          := 0
04034     66 01 48 FC | 	wrbyte	#0, local50
04038     AF CE 02 FB | 	rdlong	local51, fp
0403c     04 0E 06 F1 | 	add	objptr, #4
04040     07 CF 02 F1 | 	add	local51, objptr
04044                 | '     cmdE6_updatePosition[i]   := false
04044     67 01 48 FC | 	wrbyte	#0, local51
04048     AF D0 02 FB | 	rdlong	local52, fp
0404c     11 0E 86 F1 | 	sub	objptr, #17
04050     07 D1 02 F1 | 	add	local52, objptr
04054                 | '     sampleNumber_memory[i]    := 0
04054     68 01 48 FC | 	wrbyte	#0, local52
04058     AF D2 02 FB | 	rdlong	local53, fp
0405c     59 0E 86 F1 | 	sub	objptr, #89
04060     07 D3 02 F1 | 	add	local53, objptr
04064                 | '     vibratoPos[i]             := 0
04064     69 01 48 FC | 	wrbyte	#0, local53
04068     AF D4 02 FB | 	rdlong	local54, fp
0406c     02 D4 66 F0 | 	shl	local54, #2
04070     10 0E 06 F1 | 	add	objptr, #16
04074     07 D5 02 F1 | 	add	local54, objptr
04078                 | '     portamentoPeriodMemory[i] := 0
04078     6A 01 68 FC | 	wrlong	#0, local54
0407c     AF D6 02 FB | 	rdlong	local55, fp
04080     25 0E 06 F1 | 	add	objptr, #37
04084     07 D7 02 F1 | 	add	local55, objptr
04088                 | '     portaGlissando[i]         := 0
04088     6B 01 48 FC | 	wrbyte	#0, local55
0408c     AF D8 02 FB | 	rdlong	local56, fp
04090     04 0E 06 F1 | 	add	objptr, #4
04094     07 D9 02 F1 | 	add	local56, objptr
04098                 | '     vibratoType[i]            := 0
04098     6C 01 48 FC | 	wrbyte	#0, local56
0409c     AF DA 02 FB | 	rdlong	local57, fp
040a0     04 0E 06 F1 | 	add	objptr, #4
040a4     07 DB 02 F1 | 	add	local57, objptr
040a8                 | '     tremoloType[i]            := 0
040a8     6D 01 48 FC | 	wrbyte	#0, local57
040ac     AF DC 02 FB | 	rdlong	local58, fp
040b0     39 0E 86 F1 | 	sub	objptr, #57
040b4     07 DD 02 F1 | 	add	local58, objptr
040b8                 | '     tremoloPos[i]             := 0
040b8     6E 01 48 FC | 	wrbyte	#0, local58
040bc     AF DE 02 FB | 	rdlong	local59, fp
040c0     02 DE 66 F0 | 	shl	local59, #2
040c4     7C 0E 86 F1 | 	sub	objptr, #124
040c8     07 DF 02 F1 | 	add	local59, objptr
040cc                 | '     deltaVolume[i]            := 0
040cc     6F 01 68 FC | 	wrlong	#0, local59
040d0     AF E0 02 FB | 	rdlong	local60, fp
040d4     02 E0 66 F0 | 	shl	local60, #2
040d8     20 0E 86 F1 | 	sub	objptr, #32
040dc     07 E1 02 F1 | 	add	local60, objptr
040e0                 | '     deltaPeriod[i]            := 0
040e0     70 01 68 FC | 	wrlong	#0, local60
040e4     AF E2 02 FB | 	rdlong	local61, fp
040e8     A0 0E 06 F1 | 	add	objptr, #160
040ec     07 E3 02 F1 | 	add	local61, objptr
040f0                 | '     resetTremolo[i]           := 0
040f0     71 01 48 FC | 	wrbyte	#0, local61
040f4     AF E4 02 FB | 	rdlong	local62, fp
040f8     04 0E 06 F1 | 	add	objptr, #4
040fc     07 E5 02 F1 | 	add	local62, objptr
04100                 | '     resetVibrato[i]           := 0
04100     72 01 48 FC | 	wrbyte	#0, local62
04104     AF 84 02 FB | 	rdlong	local14, fp
04108     01 84 06 F1 | 	add	local14, #1
0410c     AF 84 62 FC | 	wrlong	local14, fp
04110     08 5E 85 F1 | 	sub	fp, #8
04114     04 84 5E F2 | 	cmps	local14, #4 wcz
04118     93 0F 86 F1 | 	sub	objptr, #403
0411c     7C FD 9F CD |  if_b	jmp	#LR__0140
04120     AF F0 03 F6 | 	mov	ptra, fp
04124     BF 00 A0 FD | 	call	#popregs_
04128                 | _trackerplayer_spin2_initModule_ret
04128     2D 00 64 FD | 	ret
0412c                 | 
0412c                 | ' 
0412c                 | ' 
0412c                 | ' ' This routine needs to be ticked X number of times per second
0412c                 | ' ' in order to advance the tracker play routine
0412c                 | ' '
0412c                 | ' PUB tick() | channel, sampleNumber, period, effect, i
0412c                 | _trackerplayer_spin2_tick
0412c     12 5A 05 F6 | 	mov	COUNT_, #18
04130     B0 00 A0 FD | 	call	#pushregs_
04134     30 F0 07 F1 | 	add	ptra, #48
04138                 | ' 
04138                 | '   if currentSongSpeed == 0
04138     A4 0E 06 F1 | 	add	objptr, #164
0413c     07 6B CA FA | 	rdbyte	local01, objptr wz
04140     A4 0E 86 F1 | 	sub	objptr, #164
04144                 | '     return
04144     34 03 90 AD |  if_e	jmp	#LR__0152
04148                 | ' 
04148                 | '   ' Iterate over the channels and process everything
04148                 | '   repeat channel from 0 to LAST_CHANNEL
04148     AF 00 68 FC | 	wrlong	#0, fp
0414c                 | LR__0141
0414c     04 5E 05 F1 | 	add	fp, #4
04150     AF 62 02 F6 | 	mov	arg04, fp
04154     04 5E 05 F1 | 	add	fp, #4
04158     AF 64 02 F6 | 	mov	arg05, fp
0415c     04 5E 05 F1 | 	add	fp, #4
04160     AF 66 02 F6 | 	mov	arg06, fp
04164     0C 5E 85 F1 | 	sub	fp, #12
04168                 | ' 
04168                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04168     AF 5C 02 FB | 	rdlong	arg01, fp
0416c     A3 0E 06 F1 | 	add	objptr, #163
04170     07 5F C2 FA | 	rdbyte	arg02, objptr
04174     01 0E 86 F1 | 	sub	objptr, #1
04178     07 61 C2 FA | 	rdbyte	arg03, objptr
0417c     7F 5E 06 F5 | 	and	arg02, #127
04180     0C 0E 86 F1 | 	sub	objptr, #12
04184     07 6D 02 FB | 	rdlong	local02, objptr
04188     36 5F 02 F1 | 	add	arg02, local02
0418c                 | ' 
0418c                 | '   ' Get the note data for a specific channel/song position/pattern row
0418c                 | '   patternNumber := byte[songPositionsLut][position & 127]
0418c     2F 6F C2 FA | 	rdbyte	local03, arg02
04190     0A 6E 66 F0 | 	shl	local03, #10
04194     04 0E 86 F1 | 	sub	objptr, #4
04198     07 71 02 FB | 	rdlong	local04, objptr
0419c     92 0E 86 F1 | 	sub	objptr, #146
041a0     37 71 02 F1 | 	add	local04, local03
041a4                 | '   patternPtr    := patternsData + (patternNumber << 10)
041a4     3F 60 06 F5 | 	and	arg03, #63
041a8     04 60 66 F0 | 	shl	arg03, #4
041ac     30 71 02 F1 | 	add	local04, arg03
041b0     03 5C 06 F5 | 	and	arg01, #3
041b4     02 5C 66 F0 | 	shl	arg01, #2
041b8     2E 71 02 F1 | 	add	local04, arg01
041bc                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
041bc     38 73 C2 FA | 	rdbyte	local05, local04
041c0     18 72 66 F0 | 	shl	local05, #24
041c4     01 70 06 F1 | 	add	local04, #1
041c8     38 75 C2 FA | 	rdbyte	local06, local04
041cc     10 74 66 F0 | 	shl	local06, #16
041d0     3A 73 42 F5 | 	or	local05, local06
041d4     01 70 06 F1 | 	add	local04, #1
041d8     38 77 C2 FA | 	rdbyte	local07, local04
041dc     08 76 66 F0 | 	shl	local07, #8
041e0     3B 73 42 F5 | 	or	local05, local07
041e4     01 70 06 F1 | 	add	local04, #1
041e8     38 79 C2 FA | 	rdbyte	local08, local04
041ec     3C 73 42 F5 | 	or	local05, local08
041f0                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
041f0     39 7B 02 F6 | 	mov	local09, local05
041f4     0C 7A 46 F0 | 	shr	local09, #12
041f8     0F 7A 06 F5 | 	and	local09, #15
041fc     39 7D 02 F6 | 	mov	local10, local05
04200     18 7C 46 F0 | 	shr	local10, #24
04204     F0 7C 06 F5 | 	and	local10, #240
04208     3E 7B 42 F5 | 	or	local09, local10
0420c                 | ' 
0420c                 | '   ' Extract the different sub parts from the data
0420c                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
0420c     31 7B 62 FC | 	wrlong	local09, arg04
04210     39 7F 02 F6 | 	mov	local11, local05
04214     10 7E 46 F0 | 	shr	local11, #16
04218     07 00 00 FF 
0421c     FF 7F 06 F5 | 	and	local11, ##4095
04220                 | '   long[period]       :=  (data >> 16) & $FFF
04220     32 7F 62 FC | 	wrlong	local11, arg05
04224     07 00 00 FF 
04228     FF 73 06 F5 | 	and	local05, ##4095
0422c                 | '   long[effect]       :=   data & $FFF
0422c     33 73 62 FC | 	wrlong	local05, arg06
04230                 | '     processChannel(channel, sampleNumber, period, effect)
04230     AF 5C 02 FB | 	rdlong	arg01, fp
04234     04 5E 05 F1 | 	add	fp, #4
04238     AF 5E 02 FB | 	rdlong	arg02, fp
0423c     04 5E 05 F1 | 	add	fp, #4
04240     AF 60 02 FB | 	rdlong	arg03, fp
04244     04 5E 05 F1 | 	add	fp, #4
04248     AF 62 02 FB | 	rdlong	arg04, fp
0424c     0C 5E 85 F1 | 	sub	fp, #12
04250     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04254     AF 80 02 FB | 	rdlong	local12, fp
04258     01 80 06 F1 | 	add	local12, #1
0425c     AF 80 62 FC | 	wrlong	local12, fp
04260     04 80 5E F2 | 	cmps	local12, #4 wcz
04264     E4 FE 9F CD |  if_b	jmp	#LR__0141
04268                 | ' 
04268                 | '   ' Incrementation the main counter that drives the whole play routine
04268                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04268     A1 0E 06 F1 | 	add	objptr, #161
0426c     07 6B C2 FA | 	rdbyte	local01, objptr
04270     01 6A 06 F1 | 	add	local01, #1
04274     07 6B 42 FC | 	wrbyte	local01, objptr
04278     03 0E 06 F1 | 	add	objptr, #3
0427c     07 83 C2 FA | 	rdbyte	local13, objptr
04280     01 0E 06 F1 | 	add	objptr, #1
04284     07 85 C2 FA | 	rdbyte	local14, objptr
04288     42 83 02 F1 | 	add	local13, local14
0428c     04 0E 86 F1 | 	sub	objptr, #4
04290     07 87 C2 FA | 	rdbyte	local15, objptr
04294     A1 0E 86 F1 | 	sub	objptr, #161
04298     41 87 5A F2 | 	cmps	local15, local13 wcz
0429c                 | '     tickCounter := 0
0429c     A1 0E 06 31 |  if_ae	add	objptr, #161
042a0     07 01 48 3C |  if_ae	wrbyte	#0, objptr
042a4     A1 0E 86 31 |  if_ae	sub	objptr, #161
042a8                 | ' 
042a8                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
042a8                 | '   if tickCounter == 0
042a8     A1 0E 06 F1 | 	add	objptr, #161
042ac     07 6B CA FA | 	rdbyte	local01, objptr wz
042b0     A1 0E 86 F1 | 	sub	objptr, #161
042b4     C4 01 90 5D |  if_ne	jmp	#LR__0151
042b8                 | ' 
042b8                 | '     ' Handle the "pattern repeat" command, "E6"
042b8                 | '     if cmdE6_updatePositionCommon
042b8     F5 0F 06 F1 | 	add	objptr, #501
042bc     07 6B CA FA | 	rdbyte	local01, objptr wz
042c0     F5 0F 86 F1 | 	sub	objptr, #501
042c4     8C 00 90 AD |  if_e	jmp	#LR__0145
042c8                 | '       repeat i from 0 to LAST_CHANNEL
042c8     10 5E 05 F1 | 	add	fp, #16
042cc     AF 00 68 FC | 	wrlong	#0, fp
042d0     10 5E 85 F1 | 	sub	fp, #16
042d4     9C BD 9F FE | 	loc	pa,	#(@LR__0144-@LR__0142)
042d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
042dc                 | LR__0142
042dc                 | '         if cmdE6_updatePosition[i]
042dc     10 5E 05 F1 | 	add	fp, #16
042e0     AF 80 02 FB | 	rdlong	local12, fp
042e4     10 5E 85 F1 | 	sub	fp, #16
042e8     F1 0F 06 F1 | 	add	objptr, #497
042ec     07 81 02 F1 | 	add	local12, objptr
042f0     40 85 CA FA | 	rdbyte	local14, local12 wz
042f4     F1 0F 86 F1 | 	sub	objptr, #497
042f8     24 00 90 AD |  if_e	jmp	#LR__0143
042fc     10 5E 05 F1 | 	add	fp, #16
04300     AF 88 02 FB | 	rdlong	local16, fp
04304     10 5E 85 F1 | 	sub	fp, #16
04308     E9 0F 06 F1 | 	add	objptr, #489
0430c     07 89 02 F1 | 	add	local16, objptr
04310                 | '           patternRow := cmdE6_memory[i]
04310     44 81 C2 FA | 	rdbyte	local12, local16
04314     47 0F 86 F1 | 	sub	objptr, #327
04318     07 81 42 FC | 	wrbyte	local12, objptr
0431c     A2 0E 86 F1 | 	sub	objptr, #162
04320                 | LR__0143
04320     10 5E 05 F1 | 	add	fp, #16
04324     AF 8A 02 FB | 	rdlong	local17, fp
04328     F1 0F 06 F1 | 	add	objptr, #497
0432c     07 8B 02 F1 | 	add	local17, objptr
04330                 | '         cmdE6_updatePosition[i] := false
04330     45 01 48 FC | 	wrbyte	#0, local17
04334     AF 80 02 FB | 	rdlong	local12, fp
04338     01 80 06 F1 | 	add	local12, #1
0433c     AF 80 62 FC | 	wrlong	local12, fp
04340     10 5E 85 F1 | 	sub	fp, #16
04344     04 80 5E F2 | 	cmps	local12, #4 wcz
04348     F1 0F 86 F1 | 	sub	objptr, #497
0434c     8C FF 9F CD |  if_b	jmp	#LR__0142
04350                 | LR__0144
04350     CC 00 90 FD | 	jmp	#LR__0149
04354                 | LR__0145
04354                 | ' 
04354                 | '     ' Handle the "skip to next pattern with offset command", "D"
04354                 | '     elseif cmdD_updatePosition
04354     E6 0F 06 F1 | 	add	objptr, #486
04358     07 6B CA FA | 	rdbyte	local01, objptr wz
0435c     E6 0F 86 F1 | 	sub	objptr, #486
04360     64 00 90 AD |  if_e	jmp	#LR__0146
04364                 | '       if ++songPosition >= songLength
04364     A3 0E 06 F1 | 	add	objptr, #163
04368     07 6B C2 FA | 	rdbyte	local01, objptr
0436c     01 6A 06 F1 | 	add	local01, #1
04370     07 6B 42 FC | 	wrbyte	local01, objptr
04374     07 83 C2 FA | 	rdbyte	local13, objptr
04378     09 0E 86 F1 | 	sub	objptr, #9
0437c     07 85 C2 FA | 	rdbyte	local14, objptr
04380     9A 0E 86 F1 | 	sub	objptr, #154
04384     42 83 5A F2 | 	cmps	local13, local14 wcz
04388                 | '         songPosition := 0
04388     A3 0E 06 31 |  if_ae	add	objptr, #163
0438c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04390     A3 0E 86 31 |  if_ae	sub	objptr, #163
04394     E4 0F 06 F1 | 	add	objptr, #484
04398     07 81 C2 FA | 	rdbyte	local12, objptr
0439c     40 8D 02 F6 | 	mov	local18, local12
043a0     02 8C 66 F0 | 	shl	local18, #2
043a4     40 8D 02 F1 | 	add	local18, local12
043a8     01 8C 66 F0 | 	shl	local18, #1
043ac     01 0E 06 F1 | 	add	objptr, #1
043b0     07 81 C2 FA | 	rdbyte	local12, objptr
043b4     40 8D 02 F1 | 	add	local18, local12
043b8                 | ' 
043b8                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
043b8     43 0F 86 F1 | 	sub	objptr, #323
043bc     07 8D 42 FC | 	wrbyte	local18, objptr
043c0     A2 0E 86 F1 | 	sub	objptr, #162
043c4                 | ' 
043c4                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
043c4                 | '     else
043c4     58 00 90 FD | 	jmp	#LR__0148
043c8                 | LR__0146
043c8                 | '       if ++patternRow >= PATTERN_LENGTH
043c8     A2 0E 06 F1 | 	add	objptr, #162
043cc     07 6B C2 FA | 	rdbyte	local01, objptr
043d0     01 6A 06 F1 | 	add	local01, #1
043d4     07 6B 42 FC | 	wrbyte	local01, objptr
043d8     07 83 C2 FA | 	rdbyte	local13, objptr
043dc     A2 0E 86 F1 | 	sub	objptr, #162
043e0     40 82 5E F2 | 	cmps	local13, #64 wcz
043e4     38 00 90 CD |  if_b	jmp	#LR__0147
043e8                 | '         patternRow := 0
043e8     A2 0E 06 F1 | 	add	objptr, #162
043ec     07 01 48 FC | 	wrbyte	#0, objptr
043f0                 | ' 
043f0                 | '         if ++songPosition >= songLength
043f0     01 0E 06 F1 | 	add	objptr, #1
043f4     07 6B C2 FA | 	rdbyte	local01, objptr
043f8     01 6A 06 F1 | 	add	local01, #1
043fc     07 6B 42 FC | 	wrbyte	local01, objptr
04400     07 83 C2 FA | 	rdbyte	local13, objptr
04404     09 0E 86 F1 | 	sub	objptr, #9
04408     07 85 C2 FA | 	rdbyte	local14, objptr
0440c     9A 0E 86 F1 | 	sub	objptr, #154
04410     42 83 5A F2 | 	cmps	local13, local14 wcz
04414                 | '           songPosition := 0
04414     A3 0E 06 31 |  if_ae	add	objptr, #163
04418     07 01 48 3C |  if_ae	wrbyte	#0, objptr
0441c     A3 0E 86 31 |  if_ae	sub	objptr, #163
04420                 | LR__0147
04420                 | LR__0148
04420                 | LR__0149
04420                 | ' 
04420                 | '     ' Handle "jump to song position" command, "B"
04420                 | '     if cmdB_updatePosition
04420     E8 0F 06 F1 | 	add	objptr, #488
04424     07 6B CA FA | 	rdbyte	local01, objptr wz
04428     E8 0F 86 F1 | 	sub	objptr, #488
0442c     28 00 90 AD |  if_e	jmp	#LR__0150
04430                 | ' 
04430                 | '       songPosition := cmdB_memoryZ
04430     E7 0F 06 F1 | 	add	objptr, #487
04434     07 6B C2 FA | 	rdbyte	local01, objptr
04438     44 0F 86 F1 | 	sub	objptr, #324
0443c     07 6B 42 FC | 	wrbyte	local01, objptr
04440                 | ' 
04440                 | '       ifnot cmdD_updatePosition
04440     43 0F 06 F1 | 	add	objptr, #323
04444     07 6B CA FA | 	rdbyte	local01, objptr wz
04448     E6 0F 86 F1 | 	sub	objptr, #486
0444c                 | '         patternRow := 0
0444c     A2 0E 06 A1 |  if_e	add	objptr, #162
04450     07 01 48 AC |  if_e	wrbyte	#0, objptr
04454     A2 0E 86 A1 |  if_e	sub	objptr, #162
04458                 | LR__0150
04458                 | ' 
04458                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04458                 | '     cmdE6_updatePositionCommon := false
04458     F5 0F 06 F1 | 	add	objptr, #501
0445c     07 01 48 FC | 	wrbyte	#0, objptr
04460                 | '     cmdB_updatePosition := false
04460     0D 0E 86 F1 | 	sub	objptr, #13
04464     07 01 48 FC | 	wrbyte	#0, objptr
04468                 | '     cmdD_updatePosition := false
04468     02 0E 86 F1 | 	sub	objptr, #2
0446c     07 01 48 FC | 	wrbyte	#0, objptr
04470                 | '     patternDelay := 0
04470     41 0F 86 F1 | 	sub	objptr, #321
04474     07 01 48 FC | 	wrbyte	#0, objptr
04478     A5 0E 86 F1 | 	sub	objptr, #165
0447c                 | LR__0151
0447c                 | LR__0152
0447c     AF F0 03 F6 | 	mov	ptra, fp
04480     BF 00 A0 FD | 	call	#popregs_
04484                 | _trackerplayer_spin2_tick_ret
04484     2D 00 64 FD | 	ret
04488                 | 
04488                 | ' 
04488                 | ' 
04488                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04488                 | _trackerplayer_spin2_amigaPeriodToNote
04488                 | ' 
04488                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04488     00 30 06 F6 | 	mov	_var01, #0
0448c     BC BB 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
04490     93 00 A0 FD | 	call	#FCACHE_LOAD_
04494                 | LR__0153
04494                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04494     06 00 00 FF 
04498     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
0449c     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
044a0     2F 35 02 F6 | 	mov	_var03, arg02
044a4     03 34 66 F0 | 	shl	_var03, #3
044a8     2F 35 02 F1 | 	add	_var03, arg02
044ac     03 34 66 F0 | 	shl	_var03, #3
044b0     1A 33 02 F1 | 	add	_var02, _var03
044b4     18 37 02 F6 | 	mov	_var04, _var01
044b8     01 36 66 F0 | 	shl	_var04, #1
044bc     19 37 02 F1 | 	add	_var04, _var02
044c0     1B 39 E2 FA | 	rdword	_var05, _var04
044c4     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
044c8                 | '       quit
044c8     06 00 00 FF 
044cc     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
044d0     0C 00 90 ED |  if_be	jmp	#LR__0155
044d4     01 30 06 F1 | 	add	_var01, #1
044d8     24 30 5E F2 | 	cmps	_var01, #36 wcz
044dc     B4 FF 9F CD |  if_b	jmp	#LR__0153
044e0                 | LR__0154
044e0                 | LR__0155
044e0                 | ' 
044e0                 | '   return i
044e0     18 2B 02 F6 | 	mov	result1, _var01
044e4                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044e4     2D 00 64 FD | 	ret
044e8                 | 
044e8                 | ' 
044e8                 | ' 
044e8                 | ' PRI retunePeriod(period, fTune) | noteNumber
044e8                 | _trackerplayer_spin2_retunePeriod
044e8     06 5A 05 F6 | 	mov	COUNT_, #6
044ec     B0 00 A0 FD | 	call	#pushregs_
044f0     2E 6B 02 F6 | 	mov	local01, arg01
044f4     2F 6D 02 F6 | 	mov	local02, arg02
044f8                 | ' 
044f8                 | '   if period > 0 and fTune < 16
044f8     00 6A 5E F2 | 	cmps	local01, #0 wcz
044fc     50 00 90 ED |  if_be	jmp	#LR__0156
04500     10 6C 5E F2 | 	cmps	local02, #16 wcz
04504     48 00 90 3D |  if_ae	jmp	#LR__0156
04508                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
04508     35 5D E2 FA | 	rdword	arg01, local01
0450c     00 5E 06 F6 | 	mov	arg02, #0
04510     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
04514     15 6F 02 F6 | 	mov	local03, result1
04518     06 00 00 FF 
0451c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04520     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
04524     36 73 02 F6 | 	mov	local05, local02
04528     03 72 66 F0 | 	shl	local05, #3
0452c     36 73 02 F1 | 	add	local05, local02
04530     03 72 66 F0 | 	shl	local05, #3
04534     39 71 02 F1 | 	add	local04, local05
04538     01 6E 66 F0 | 	shl	local03, #1
0453c     38 6F 02 F1 | 	add	local03, local04
04540                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
04540     37 75 E2 FA | 	rdword	local06, local03
04544     35 75 52 FC | 	wrword	local06, local01
04548     06 00 00 FF 
0454c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04550                 | LR__0156
04550     AF F0 03 F6 | 	mov	ptra, fp
04554     BF 00 A0 FD | 	call	#popregs_
04558                 | _trackerplayer_spin2_retunePeriod_ret
04558     2D 00 64 FD | 	ret
0455c                 | 
0455c                 | ' 
0455c                 | ' 
0455c                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
0455c                 | _trackerplayer_spin2_getSampleInfo
0455c     2E 31 0A F6 | 	mov	_var01, arg01 wz
04560                 | ' 
04560                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04560     08 00 90 AD |  if_e	jmp	#LR__0157
04564     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04568     08 00 90 ED |  if_be	jmp	#LR__0158
0456c                 | LR__0157
0456c                 | '     long[samplePtr] := 0
0456c     2F 01 68 FC | 	wrlong	#0, arg02
04570                 | '     return
04570     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04574                 | LR__0158
04574                 | ' 
04574                 | '   sampleNumber--
04574     01 30 86 F1 | 	sub	_var01, #1
04578     18 33 02 F6 | 	mov	_var02, _var01
0457c     04 32 66 F0 | 	shl	_var02, #4
04580     18 33 82 F1 | 	sub	_var02, _var01
04584     01 32 66 F0 | 	shl	_var02, #1
04588     0A 0E 06 F1 | 	add	objptr, #10
0458c     07 35 02 FB | 	rdlong	_var03, objptr
04590     19 35 02 F1 | 	add	_var03, _var02
04594                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04594     1A 37 02 F6 | 	mov	_var04, _var03
04598     16 36 06 F1 | 	add	_var04, #22
0459c     1B 39 C2 FA | 	rdbyte	_var05, _var04
045a0     08 38 66 F0 | 	shl	_var05, #8
045a4     1A 3B 02 F6 | 	mov	_var06, _var03
045a8     17 3A 06 F1 | 	add	_var06, #23
045ac     1D 3D C2 FA | 	rdbyte	_var07, _var06
045b0     1E 39 42 F5 | 	or	_var05, _var07
045b4     01 38 66 F0 | 	shl	_var05, #1
045b8                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
045b8     30 39 62 FC | 	wrlong	_var05, arg03
045bc     1A 3F 02 F6 | 	mov	_var08, _var03
045c0     18 3E 06 F1 | 	add	_var08, #24
045c4                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
045c4     1F 41 C2 FA | 	rdbyte	_var09, _var08
045c8     31 41 62 FC | 	wrlong	_var09, arg04
045cc     1A 43 02 F6 | 	mov	_var10, _var03
045d0     19 42 06 F1 | 	add	_var10, #25
045d4                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
045d4     21 41 C2 FA | 	rdbyte	_var09, _var10
045d8     32 41 62 FC | 	wrlong	_var09, arg05
045dc     1A 45 02 F6 | 	mov	_var11, _var03
045e0     1A 44 06 F1 | 	add	_var11, #26
045e4     22 47 C2 FA | 	rdbyte	_var12, _var11
045e8     08 46 66 F0 | 	shl	_var12, #8
045ec     1A 49 02 F6 | 	mov	_var13, _var03
045f0     1B 48 06 F1 | 	add	_var13, #27
045f4     24 3D C2 FA | 	rdbyte	_var07, _var13
045f8     1E 47 42 F5 | 	or	_var12, _var07
045fc     01 46 66 F0 | 	shl	_var12, #1
04600                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04600     33 47 62 FC | 	wrlong	_var12, arg06
04604     1A 4B 02 F6 | 	mov	_var14, _var03
04608     1C 4A 06 F1 | 	add	_var14, #28
0460c     25 4D C2 FA | 	rdbyte	_var15, _var14
04610     08 4C 66 F0 | 	shl	_var15, #8
04614     1D 34 06 F1 | 	add	_var03, #29
04618     1A 3D C2 FA | 	rdbyte	_var07, _var03
0461c     1E 4D 42 F5 | 	or	_var15, _var07
04620     01 4C 66 F0 | 	shl	_var15, #1
04624                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
04624     34 4D 62 FC | 	wrlong	_var15, arg07
04628     02 30 66 F0 | 	shl	_var01, #2
0462c     08 0E 06 F1 | 	add	objptr, #8
04630     07 31 02 F1 | 	add	_var01, objptr
04634                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
04634     18 41 02 FB | 	rdlong	_var09, _var01
04638     2F 41 62 FC | 	wrlong	_var09, arg02
0463c                 | ' 
0463c                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
0463c     34 41 02 FB | 	rdlong	_var09, arg07
04640     02 40 0E F2 | 	cmp	_var09, #2 wz
04644     12 0E 86 F1 | 	sub	objptr, #18
04648     08 00 90 5D |  if_ne	jmp	#LR__0159
0464c     33 3D 0A FB | 	rdlong	_var07, arg06 wz
04650                 | '     long[repeatLength] := 1
04650     34 03 68 AC |  if_e	wrlong	#1, arg07
04654                 | LR__0159
04654                 | _trackerplayer_spin2_getSampleInfo_ret
04654     2D 00 64 FD | 	ret
04658                 | 
04658                 | ' 
04658                 | ' 
04658                 | ' PRI triggerNote(channel)
04658                 | _trackerplayer_spin2_triggerNote
04658     2E 31 02 F6 | 	mov	_var01, arg01
0465c     02 30 66 F0 | 	shl	_var01, #2
04660     47 0F 06 F1 | 	add	objptr, #327
04664     07 31 02 F1 | 	add	_var01, objptr
04668     2E 33 02 F6 | 	mov	_var02, arg01
0466c     90 0E 86 F1 | 	sub	objptr, #144
04670                 | ' 
04670                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04670     18 35 02 FB | 	rdlong	_var03, _var01
04674     07 33 02 F1 | 	add	_var02, objptr
04678     19 35 42 FC | 	wrbyte	_var03, _var02
0467c     2E 37 02 F6 | 	mov	_var04, arg01
04680     02 36 66 F0 | 	shl	_var04, #2
04684     80 0E 06 F1 | 	add	objptr, #128
04688     07 37 02 F1 | 	add	_var04, objptr
0468c     2E 39 02 F6 | 	mov	_var05, arg01
04690     02 38 66 F0 | 	shl	_var05, #2
04694     90 0E 86 F1 | 	sub	objptr, #144
04698                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
04698     1B 35 02 FB | 	rdlong	_var03, _var04
0469c     07 39 02 F1 | 	add	_var05, objptr
046a0     1C 35 62 FC | 	wrlong	_var03, _var05
046a4     2E 3B 02 F6 | 	mov	_var06, arg01
046a8     02 3A 66 F0 | 	shl	_var06, #2
046ac     80 0E 06 F1 | 	add	objptr, #128
046b0     07 3B 02 F1 | 	add	_var06, objptr
046b4     2E 3D 02 F6 | 	mov	_var07, arg01
046b8     02 3C 66 F0 | 	shl	_var07, #2
046bc     48 0E 86 F1 | 	sub	objptr, #72
046c0                 | '   currPeriod[channel]       := lastSetPeriod[channel]
046c0     1D 35 02 FB | 	rdlong	_var03, _var06
046c4     07 3D 02 F1 | 	add	_var07, objptr
046c8     1E 35 62 FC | 	wrlong	_var03, _var07
046cc     2E 3F 02 F6 | 	mov	_var08, arg01
046d0     02 3E 66 F0 | 	shl	_var08, #2
046d4     78 0E 06 F1 | 	add	objptr, #120
046d8     07 3F 02 F1 | 	add	_var08, objptr
046dc     2E 41 02 F6 | 	mov	_var09, arg01
046e0     01 40 66 F0 | 	shl	_var09, #1
046e4     9C 0E 86 F1 | 	sub	objptr, #156
046e8                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
046e8     1F 35 02 FB | 	rdlong	_var03, _var08
046ec     07 41 02 F1 | 	add	_var09, objptr
046f0     20 35 52 FC | 	wrword	_var03, _var09
046f4     2E 43 02 F6 | 	mov	_var10, arg01
046f8     02 42 66 F0 | 	shl	_var10, #2
046fc     AC 0E 06 F1 | 	add	objptr, #172
04700     07 43 02 F1 | 	add	_var10, objptr
04704     2E 45 02 F6 | 	mov	_var11, arg01
04708     02 44 66 F0 | 	shl	_var11, #2
0470c     A4 0E 86 F1 | 	sub	objptr, #164
04710                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04710     21 35 02 FB | 	rdlong	_var03, _var10
04714     07 45 02 F1 | 	add	_var11, objptr
04718     22 35 62 FC | 	wrlong	_var03, _var11
0471c     2E 47 02 F6 | 	mov	_var12, arg01
04720     02 46 66 F0 | 	shl	_var12, #2
04724     B4 0E 06 F1 | 	add	objptr, #180
04728     07 47 02 F1 | 	add	_var12, objptr
0472c     2E 49 02 F6 | 	mov	_var13, arg01
04730     01 48 66 F0 | 	shl	_var13, #1
04734     A0 0E 86 F1 | 	sub	objptr, #160
04738                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04738     23 35 02 FB | 	rdlong	_var03, _var12
0473c     07 49 02 F1 | 	add	_var13, objptr
04740     24 35 52 FC | 	wrword	_var03, _var13
04744     1F 0F 06 F1 | 	add	objptr, #287
04748     07 5D 02 F1 | 	add	arg01, objptr
0474c     2E 4B C2 FA | 	rdbyte	_var14, arg01
04750     01 4A 06 F1 | 	add	_var14, #1
04754                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04754     2E 4B 42 FC | 	wrbyte	_var14, arg01
04758     F6 0F 86 F1 | 	sub	objptr, #502
0475c                 | _trackerplayer_spin2_triggerNote_ret
0475c     2D 00 64 FD | 	ret
04760                 | 
04760                 | ' 
04760                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04760                 | _trackerplayer_spin2_processChannel
04760     31 5A 05 F6 | 	mov	COUNT_, #49
04764     B0 00 A0 FD | 	call	#pushregs_
04768     D0 F0 07 F1 | 	add	ptra, #208
0476c     AF 5C 62 FC | 	wrlong	arg01, fp
04770     04 5E 05 F1 | 	add	fp, #4
04774     AF 5E 62 FC | 	wrlong	arg02, fp
04778     04 5E 05 F1 | 	add	fp, #4
0477c     AF 60 62 FC | 	wrlong	arg03, fp
04780     04 5E 05 F1 | 	add	fp, #4
04784     AF 62 62 FC | 	wrlong	arg04, fp
04788     0C 5E 85 F1 | 	sub	fp, #12
0478c                 | ' 
0478c                 | '   channel := channel & 3
0478c     AF 6A 02 FB | 	rdlong	local01, fp
04790     03 6A 06 F5 | 	and	local01, #3
04794     AF 6A 62 FC | 	wrlong	local01, fp
04798     0C 5E 05 F1 | 	add	fp, #12
0479c     AF 6C 02 FB | 	rdlong	local02, fp
047a0     08 6C 46 F0 | 	shr	local02, #8
047a4     36 6F 02 F6 | 	mov	local03, local02
047a8     0F 6E 06 F5 | 	and	local03, #15
047ac                 | '   cmd     := (effect >> 8) & $F
047ac     BA 0F 06 F1 | 	add	objptr, #442
047b0     07 6F 42 FC | 	wrbyte	local03, objptr
047b4     AF 70 02 FB | 	rdlong	local04, fp
047b8     04 70 46 F0 | 	shr	local04, #4
047bc     38 73 02 F6 | 	mov	local05, local04
047c0     0F 72 06 F5 | 	and	local05, #15
047c4                 | '   x       := (effect >> 4) & $F
047c4     03 0E 86 F1 | 	sub	objptr, #3
047c8     07 73 42 FC | 	wrbyte	local05, objptr
047cc     AF 74 02 FB | 	rdlong	local06, fp
047d0     0F 74 06 F5 | 	and	local06, #15
047d4                 | '   y       := (effect     ) & $F
047d4     01 0E 06 F1 | 	add	objptr, #1
047d8     07 75 42 FC | 	wrbyte	local06, objptr
047dc     AF 76 02 FB | 	rdlong	local07, fp
047e0     0C 5E 85 F1 | 	sub	fp, #12
047e4     FF 76 06 F5 | 	and	local07, #255
047e8                 | '   z       := (effect     ) & $FF
047e8     01 0E 06 F1 | 	add	objptr, #1
047ec     07 77 42 FC | 	wrbyte	local07, objptr
047f0                 | ' 
047f0                 | '   ' Handle everything that executes on "tick zero"
047f0                 | '   if tickCounter == 0
047f0     18 0F 86 F1 | 	sub	objptr, #280
047f4     07 6B CA FA | 	rdbyte	local01, objptr wz
047f8     A1 0E 86 F1 | 	sub	objptr, #161
047fc     F0 03 90 5D |  if_ne	jmp	#LR__0170
04800     AF 78 02 FB | 	rdlong	local08, fp
04804     02 78 66 F0 | 	shl	local08, #2
04808     EF 0E 06 F1 | 	add	objptr, #239
0480c     07 79 02 F1 | 	add	local08, objptr
04810                 | ' 
04810                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04810                 | '     deltaPeriod[channel] := 0
04810     3C 01 68 FC | 	wrlong	#0, local08
04814     AF 7A 02 FB | 	rdlong	local09, fp
04818     02 7A 66 F0 | 	shl	local09, #2
0481c     20 0E 06 F1 | 	add	objptr, #32
04820     07 7B 02 F1 | 	add	local09, objptr
04824                 | '     deltaVolume[channel] := 0
04824     3D 01 68 FC | 	wrlong	#0, local09
04828                 | ' 
04828                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04828                 | '     if sampleNumber > 0
04828     04 5E 05 F1 | 	add	fp, #4
0482c     AF 6A 02 FB | 	rdlong	local01, fp
04830     04 5E 85 F1 | 	sub	fp, #4
04834     00 6A 5E F2 | 	cmps	local01, #0 wcz
04838     0F 0F 86 F1 | 	sub	objptr, #271
0483c     20 00 90 ED |  if_be	jmp	#LR__0160
04840     AF 7C 02 FB | 	rdlong	local10, fp
04844     E0 0F 06 F1 | 	add	objptr, #480
04848     07 7D 02 F1 | 	add	local10, objptr
0484c                 | '       sampleNumber_memory[channel] := sampleNumber
0484c     04 5E 05 F1 | 	add	fp, #4
04850     AF 6A 02 FB | 	rdlong	local01, fp
04854     04 5E 85 F1 | 	sub	fp, #4
04858     3E 6B 42 FC | 	wrbyte	local01, local10
0485c     E0 0F 86 F1 | 	sub	objptr, #480
04860                 | LR__0160
04860     AF 7E 02 FB | 	rdlong	local11, fp
04864     E0 0F 06 F1 | 	add	objptr, #480
04868     07 7F 02 F1 | 	add	local11, objptr
0486c     20 5E 05 F1 | 	add	fp, #32
04870     AF 80 02 F6 | 	mov	local12, fp
04874     10 5E 85 F1 | 	sub	fp, #16
04878     AF 82 02 F6 | 	mov	local13, fp
0487c     31 0E 86 F1 | 	sub	objptr, #49
04880     07 85 02 F6 | 	mov	local14, objptr
04884     04 5E 05 F1 | 	add	fp, #4
04888     AF 86 02 F6 | 	mov	local15, fp
0488c     04 5E 05 F1 | 	add	fp, #4
04890     AF 88 02 F6 | 	mov	local16, fp
04894     04 5E 05 F1 | 	add	fp, #4
04898     AF 8A 02 F6 | 	mov	local17, fp
0489c                 | ' 
0489c                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
0489c                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
0489c     3F 5D C2 FA | 	rdbyte	arg01, local11
048a0     42 63 02 F6 | 	mov	arg04, local14
048a4     43 8D 02 F6 | 	mov	local18, local15
048a8     44 8F 02 F6 | 	mov	local19, local16
048ac     45 91 02 F6 | 	mov	local20, local17
048b0     40 5F 02 F6 | 	mov	arg02, local12
048b4     41 61 02 F6 | 	mov	arg03, local13
048b8     46 65 02 F6 | 	mov	arg05, local18
048bc     47 67 02 F6 | 	mov	arg06, local19
048c0     48 69 02 F6 | 	mov	arg07, local20
048c4     AF 0F 86 F1 | 	sub	objptr, #431
048c8     1C 5E 85 F1 | 	sub	fp, #28
048cc     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
048d0                 | ' 
048d0                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
048d0                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
048d0                 | '     if sampleNumber > 0
048d0     04 5E 05 F1 | 	add	fp, #4
048d4     AF 6A 02 FB | 	rdlong	local01, fp
048d8     04 5E 85 F1 | 	sub	fp, #4
048dc     00 6A 5E F2 | 	cmps	local01, #0 wcz
048e0     24 00 90 ED |  if_be	jmp	#LR__0161
048e4     AF 92 02 FB | 	rdlong	local21, fp
048e8     02 92 66 F0 | 	shl	local21, #2
048ec     FF 0E 06 F1 | 	add	objptr, #255
048f0     07 93 02 F1 | 	add	local21, objptr
048f4                 | '       currVolume[channel] := volume
048f4     14 5E 05 F1 | 	add	fp, #20
048f8     AF 6A 02 FB | 	rdlong	local01, fp
048fc     14 5E 85 F1 | 	sub	fp, #20
04900     49 6B 62 FC | 	wrlong	local01, local21
04904     FF 0E 86 F1 | 	sub	objptr, #255
04908                 | LR__0161
04908                 | ' 
04908                 | '     ' Handle all commands that executes on "zero tick"
04908                 | '     sampleOffset := 0
04908     B3 0F 06 F1 | 	add	objptr, #435
0490c     07 01 68 FC | 	wrlong	#0, objptr
04910     B3 0F 86 F1 | 	sub	objptr, #435
04914                 | '     handleZeroTickCommands(channel)
04914     AF 5C 02 FB | 	rdlong	arg01, fp
04918     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
0491c                 | ' 
0491c                 | '     ' Prepare sample data for triggering (now or later)
0491c                 | '     if period > 0
0491c     08 5E 05 F1 | 	add	fp, #8
04920     AF 6A 02 FB | 	rdlong	local01, fp
04924     08 5E 85 F1 | 	sub	fp, #8
04928     00 6A 5E F2 | 	cmps	local01, #0 wcz
0492c     C8 02 90 ED |  if_be	jmp	#LR__0171
04930     08 5E 05 F1 | 	add	fp, #8
04934     AF 94 02 F6 | 	mov	local22, fp
04938                 | ' 
04938                 | '       retunePeriod(@period, fineTune)
04938     AF 0F 06 F1 | 	add	objptr, #431
0493c     07 5F 02 FB | 	rdlong	arg02, objptr
04940     AF 0F 86 F1 | 	sub	objptr, #431
04944     4A 5D 02 F6 | 	mov	arg01, local22
04948     08 5E 85 F1 | 	sub	fp, #8
0494c     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04950     AF 96 02 FB | 	rdlong	local23, fp
04954     D3 0E 06 F1 | 	add	objptr, #211
04958     07 97 02 F1 | 	add	local23, objptr
0495c                 | '       currFineTune[channel]        := fineTune
0495c     DC 0E 06 F1 | 	add	objptr, #220
04960     07 6B 02 FB | 	rdlong	local01, objptr
04964     4B 6B 42 FC | 	wrbyte	local01, local23
04968     AF 98 02 FB | 	rdlong	local24, fp
0496c     02 98 66 F0 | 	shl	local24, #2
04970     88 0E 86 F1 | 	sub	objptr, #136
04974     07 99 02 F1 | 	add	local24, objptr
04978                 | '       lastSetPeriod[channel]       := period
04978     08 5E 05 F1 | 	add	fp, #8
0497c     AF 6A 02 FB | 	rdlong	local01, fp
04980     4C 6B 62 FC | 	wrlong	local01, local24
04984     08 5E 85 F1 | 	sub	fp, #8
04988     AF 9A 02 FB | 	rdlong	local25, fp
0498c     02 9A 66 F0 | 	shl	local25, #2
04990     40 0E 06 F1 | 	add	objptr, #64
04994     07 9B 02 F1 | 	add	local25, objptr
04998                 | '       lastSetRepeatLength[channel] := repeatLength
04998     1C 5E 05 F1 | 	add	fp, #28
0499c     AF 6A 02 FB | 	rdlong	local01, fp
049a0     4D 6B 62 FC | 	wrlong	local01, local25
049a4     1C 5E 85 F1 | 	sub	fp, #28
049a8     AF 9C 02 FB | 	rdlong	local26, fp
049ac     02 9C 66 F0 | 	shl	local26, #2
049b0     10 0E 06 F1 | 	add	objptr, #16
049b4     07 9D 02 F1 | 	add	local26, objptr
049b8                 | '       lastSetRepeatPoint[channel]  := repeatPoint
049b8     18 5E 05 F1 | 	add	fp, #24
049bc     AF 6A 02 FB | 	rdlong	local01, fp
049c0     4E 6B 62 FC | 	wrlong	local01, local26
049c4     08 5E 05 F1 | 	add	fp, #8
049c8     AF 9E 02 FB | 	rdlong	local27, fp
049cc     20 5E 85 F1 | 	sub	fp, #32
049d0     3C 0E 06 F1 | 	add	objptr, #60
049d4     07 A1 02 FB | 	rdlong	local28, objptr
049d8     50 9F 02 F1 | 	add	local27, local28
049dc     AF A2 02 FB | 	rdlong	local29, fp
049e0     02 A2 66 F0 | 	shl	local29, #2
049e4     7C 0E 86 F1 | 	sub	objptr, #124
049e8     07 A3 02 F1 | 	add	local29, objptr
049ec                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
049ec     51 9F 62 FC | 	wrlong	local27, local29
049f0     AF A4 02 FB | 	rdlong	local30, fp
049f4     02 A4 66 F0 | 	shl	local30, #2
049f8     10 0E 06 F1 | 	add	objptr, #16
049fc     07 A5 02 F1 | 	add	local30, objptr
04a00                 | '       lastSetSampleNr[channel]     := sampleNumber
04a00     04 5E 05 F1 | 	add	fp, #4
04a04     AF 6A 02 FB | 	rdlong	local01, fp
04a08     52 6B 62 FC | 	wrlong	local01, local30
04a0c                 | ' 
04a0c                 | '       ' This calculates the correct sample length in all situations
04a0c                 | '       if repeatLength > 2
04a0c     18 5E 05 F1 | 	add	fp, #24
04a10     AF 6A 02 FB | 	rdlong	local01, fp
04a14     1C 5E 85 F1 | 	sub	fp, #28
04a18     02 6A 5E F2 | 	cmps	local01, #2 wcz
04a1c     47 0F 86 F1 | 	sub	objptr, #327
04a20     20 00 90 ED |  if_be	jmp	#LR__0162
04a24     18 5E 05 F1 | 	add	fp, #24
04a28     AF A6 02 FB | 	rdlong	local31, fp
04a2c     04 5E 05 F1 | 	add	fp, #4
04a30     AF A0 02 FB | 	rdlong	local28, fp
04a34     50 A7 02 F1 | 	add	local31, local28
04a38                 | '         sampleLength := repeatPoint + repeatLength
04a38     0C 5E 85 F1 | 	sub	fp, #12
04a3c     AF A6 62 FC | 	wrlong	local31, fp
04a40     10 5E 85 F1 | 	sub	fp, #16
04a44                 | LR__0162
04a44                 | ' 
04a44                 | '       if sampleLength - sampleOffset < 1
04a44     10 5E 05 F1 | 	add	fp, #16
04a48     AF 6A 02 FB | 	rdlong	local01, fp
04a4c     10 5E 85 F1 | 	sub	fp, #16
04a50     B3 0F 06 F1 | 	add	objptr, #435
04a54     07 A1 02 FB | 	rdlong	local28, objptr
04a58     B3 0F 86 F1 | 	sub	objptr, #435
04a5c     50 6B 82 F1 | 	sub	local01, local28
04a60     01 6A 5E F2 | 	cmps	local01, #1 wcz
04a64     1C 00 90 3D |  if_ae	jmp	#LR__0163
04a68     AF A8 02 FB | 	rdlong	local32, fp
04a6c     02 A8 66 F0 | 	shl	local32, #2
04a70     57 0F 06 F1 | 	add	objptr, #343
04a74     07 A9 02 F1 | 	add	local32, objptr
04a78                 | '         lastSetSampleLength[channel] := 1
04a78     54 03 68 FC | 	wrlong	#1, local32
04a7c                 | '       else
04a7c     57 0F 86 F1 | 	sub	objptr, #343
04a80     30 00 90 FD | 	jmp	#LR__0164
04a84                 | LR__0163
04a84     10 5E 05 F1 | 	add	fp, #16
04a88     AF AA 02 FB | 	rdlong	local33, fp
04a8c     10 5E 85 F1 | 	sub	fp, #16
04a90     B3 0F 06 F1 | 	add	objptr, #435
04a94     07 A1 02 FB | 	rdlong	local28, objptr
04a98     50 AB 82 F1 | 	sub	local33, local28
04a9c     AF AC 02 FB | 	rdlong	local34, fp
04aa0     02 AC 66 F0 | 	shl	local34, #2
04aa4     5C 0E 86 F1 | 	sub	objptr, #92
04aa8     07 AD 02 F1 | 	add	local34, objptr
04aac                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04aac     56 AB 62 FC | 	wrlong	local33, local34
04ab0     57 0F 86 F1 | 	sub	objptr, #343
04ab4                 | LR__0164
04ab4                 | ' 
04ab4                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04ab4                 | '       if sampleOffset > sampleLength
04ab4     B3 0F 06 F1 | 	add	objptr, #435
04ab8     07 6B 02 FB | 	rdlong	local01, objptr
04abc     B3 0F 86 F1 | 	sub	objptr, #435
04ac0     10 5E 05 F1 | 	add	fp, #16
04ac4     AF A0 02 FB | 	rdlong	local28, fp
04ac8     10 5E 85 F1 | 	sub	fp, #16
04acc     50 6B 5A F2 | 	cmps	local01, local28 wcz
04ad0     50 00 90 ED |  if_be	jmp	#LR__0165
04ad4     20 5E 05 F1 | 	add	fp, #32
04ad8     AF AE 02 FB | 	rdlong	local35, fp
04adc     08 5E 85 F1 | 	sub	fp, #8
04ae0     AF A0 02 FB | 	rdlong	local28, fp
04ae4     18 5E 85 F1 | 	sub	fp, #24
04ae8     50 AF 02 F1 | 	add	local35, local28
04aec     AF B0 02 FB | 	rdlong	local36, fp
04af0     02 B0 66 F0 | 	shl	local36, #2
04af4     37 0F 06 F1 | 	add	objptr, #311
04af8     07 B1 02 F1 | 	add	local36, objptr
04afc                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04afc     58 AF 62 FC | 	wrlong	local35, local36
04b00     AF B2 02 FB | 	rdlong	local37, fp
04b04     02 B2 66 F0 | 	shl	local37, #2
04b08     20 0E 06 F1 | 	add	objptr, #32
04b0c     07 B3 02 F1 | 	add	local37, objptr
04b10                 | '         lastSetSampleLength[channel] := repeatLength
04b10     1C 5E 05 F1 | 	add	fp, #28
04b14     AF 6A 02 FB | 	rdlong	local01, fp
04b18     1C 5E 85 F1 | 	sub	fp, #28
04b1c     59 6B 62 FC | 	wrlong	local01, local37
04b20     57 0F 86 F1 | 	sub	objptr, #343
04b24                 | LR__0165
04b24                 | ' 
04b24                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04b24                 | '       ifnot cmd == $3 || cmd == $5
04b24     BA 0F 06 F1 | 	add	objptr, #442
04b28     07 6B C2 FA | 	rdbyte	local01, objptr
04b2c     BA 0F 86 F1 | 	sub	objptr, #442
04b30     03 6A 0E F2 | 	cmp	local01, #3 wz
04b34     54 00 90 AD |  if_e	jmp	#LR__0168
04b38     BA 0F 06 F1 | 	add	objptr, #442
04b3c     07 B5 C2 FA | 	rdbyte	local38, objptr
04b40     BA 0F 86 F1 | 	sub	objptr, #442
04b44     5A A1 02 F6 | 	mov	local28, local38
04b48     05 A0 0E F2 | 	cmp	local28, #5 wz
04b4c     3C 00 90 AD |  if_e	jmp	#LR__0168
04b50                 | '         ifnot cmd == $E && x == $D
04b50     BA 0F 06 F1 | 	add	objptr, #442
04b54     07 B7 C2 FA | 	rdbyte	local39, objptr
04b58     BA 0F 86 F1 | 	sub	objptr, #442
04b5c     5B 6B 02 F6 | 	mov	local01, local39
04b60     0E 6A 0E F2 | 	cmp	local01, #14 wz
04b64     18 00 90 5D |  if_ne	jmp	#LR__0166
04b68     B7 0F 06 F1 | 	add	objptr, #439
04b6c     07 B5 C2 FA | 	rdbyte	local38, objptr
04b70     B7 0F 86 F1 | 	sub	objptr, #439
04b74     5A A1 02 F6 | 	mov	local28, local38
04b78     0D A0 0E F2 | 	cmp	local28, #13 wz
04b7c     0C 00 90 AD |  if_e	jmp	#LR__0167
04b80                 | LR__0166
04b80                 | '           triggerNote(channel)
04b80     AF 6A 02 FB | 	rdlong	local01, fp
04b84     35 5D 02 F6 | 	mov	arg01, local01
04b88     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04b8c                 | LR__0167
04b8c                 | LR__0168
04b8c                 | ' 
04b8c                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04b8c                 | '       if resetTremolo[channel] > 0
04b8c     AF 6A 02 FB | 	rdlong	local01, fp
04b90     8F 0F 06 F1 | 	add	objptr, #399
04b94     07 6B 02 F1 | 	add	local01, objptr
04b98     35 A1 C2 FA | 	rdbyte	local28, local01
04b9c     00 A0 5E F2 | 	cmps	local28, #0 wcz
04ba0     8F 0F 86 F1 | 	sub	objptr, #399
04ba4     14 00 90 ED |  if_be	jmp	#LR__0169
04ba8     AF B8 02 FB | 	rdlong	local40, fp
04bac     8B 0F 06 F1 | 	add	objptr, #395
04bb0     07 B9 02 F1 | 	add	local40, objptr
04bb4                 | '         tremoloPos[channel] := 0
04bb4     5C 01 48 FC | 	wrbyte	#0, local40
04bb8     8B 0F 86 F1 | 	sub	objptr, #395
04bbc                 | LR__0169
04bbc                 | ' 
04bbc                 | '       if resetVibrato[channel] > 0
04bbc     AF 6A 02 FB | 	rdlong	local01, fp
04bc0     93 0F 06 F1 | 	add	objptr, #403
04bc4     07 6B 02 F1 | 	add	local01, objptr
04bc8     35 A1 C2 FA | 	rdbyte	local28, local01
04bcc     00 A0 5E F2 | 	cmps	local28, #0 wcz
04bd0     93 0F 86 F1 | 	sub	objptr, #403
04bd4     20 00 90 ED |  if_be	jmp	#LR__0171
04bd8     AF BA 02 FB | 	rdlong	local41, fp
04bdc     87 0F 06 F1 | 	add	objptr, #391
04be0     07 BB 02 F1 | 	add	local41, objptr
04be4                 | '         vibratoPos[channel] := 0
04be4     5D 01 48 FC | 	wrbyte	#0, local41
04be8     87 0F 86 F1 | 	sub	objptr, #391
04bec                 | ' 
04bec                 | '   else
04bec     08 00 90 FD | 	jmp	#LR__0171
04bf0                 | LR__0170
04bf0                 | '     ' Handle commands that executes on all "non zero ticks"
04bf0                 | '     handleNonZeroTickCommands(channel)
04bf0     AF 5C 02 FB | 	rdlong	arg01, fp
04bf4     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04bf8                 | LR__0171
04bf8                 | ' 
04bf8                 | '   ' Handle commands that executes on every tick
04bf8                 | '   handleEveryTickCommands(channel)
04bf8     AF 5C 02 FB | 	rdlong	arg01, fp
04bfc     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04c00     AF BC 02 FB | 	rdlong	local42, fp
04c04     02 BC 66 F0 | 	shl	local42, #2
04c08     DF 0E 06 F1 | 	add	objptr, #223
04c0c     07 BD 02 F1 | 	add	local42, objptr
04c10     5E BF 02 FB | 	rdlong	local43, local42
04c14     01 00 00 FF 
04c18     58 BF 66 F3 | 	fles	local43, ##856
04c1c                 | ' 
04c1c                 | '   ' Handle boundaries that should be kept
04c1c                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04c1c     5E BF 62 FC | 	wrlong	local43, local42
04c20     AF C0 02 FB | 	rdlong	local44, fp
04c24     02 C0 66 F0 | 	shl	local44, #2
04c28     07 C1 02 F1 | 	add	local44, objptr
04c2c     60 C3 02 FB | 	rdlong	local45, local44
04c30     71 C2 46 F3 | 	fges	local45, #113
04c34                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04c34     60 C3 62 FC | 	wrlong	local45, local44
04c38     AF C4 02 FB | 	rdlong	local46, fp
04c3c     02 C4 66 F0 | 	shl	local46, #2
04c40     20 0E 06 F1 | 	add	objptr, #32
04c44     07 C5 02 F1 | 	add	local46, objptr
04c48     62 C7 02 FB | 	rdlong	local47, local46
04c4c     40 C6 66 F3 | 	fles	local47, #64
04c50                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04c50     62 C7 62 FC | 	wrlong	local47, local46
04c54     AF C8 02 FB | 	rdlong	local48, fp
04c58     02 C8 66 F0 | 	shl	local48, #2
04c5c     07 C9 02 F1 | 	add	local48, objptr
04c60     64 CB 02 FB | 	rdlong	local49, local48
04c64     00 CA 46 F3 | 	fges	local49, #0
04c68                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04c68     64 CB 62 FC | 	wrlong	local49, local48
04c6c     FF 0E 86 F1 | 	sub	objptr, #255
04c70     AF F0 03 F6 | 	mov	ptra, fp
04c74     BF 00 A0 FD | 	call	#popregs_
04c78                 | _trackerplayer_spin2_processChannel_ret
04c78     2D 00 64 FD | 	ret
04c7c                 | 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' ' Handle all commands that executes on tick zero
04c7c                 | ' '
04c7c                 | ' PRI handleZeroTickCommands(channel)
04c7c                 | _trackerplayer_spin2_handleZeroTickCommands
04c7c     2E 31 02 F6 | 	mov	_var01, arg01
04c80                 | ' 
04c80                 | '   CASE_FAST cmd
04c80     BA 0F 06 F1 | 	add	objptr, #442
04c84     07 33 C2 FA | 	rdbyte	_var02, objptr
04c88     BA 0F 86 F1 | 	sub	objptr, #442
04c8c     19 35 02 F6 | 	mov	_var03, _var02
04c90     09 34 86 F1 | 	sub	_var03, #9
04c94     07 34 26 F3 | 	fle	_var03, #7
04c98     1A 37 02 F6 | 	mov	_var04, _var03
04c9c     30 36 62 FD | 	jmprel	_var04
04ca0                 | LR__0172
04ca0     1C 00 90 FD | 	jmp	#LR__0173
04ca4     30 04 90 FD | 	jmp	#LR__0196
04ca8     64 00 90 FD | 	jmp	#LR__0175
04cac     84 00 90 FD | 	jmp	#LR__0176
04cb0     A0 00 90 FD | 	jmp	#LR__0177
04cb4     D0 00 90 FD | 	jmp	#LR__0178
04cb8     9C 03 90 FD | 	jmp	#LR__0193
04cbc     18 04 90 FD | 	jmp	#LR__0196
04cc0                 | LR__0173
04cc0                 | ' 
04cc0                 | '     $9:                          ' Set sample offset
04cc0                 | '       if z > 0
04cc0     B9 0F 06 F1 | 	add	objptr, #441
04cc4     07 39 C2 FA | 	rdbyte	_var05, objptr
04cc8     B9 0F 86 F1 | 	sub	objptr, #441
04ccc     00 38 5E F2 | 	cmps	_var05, #0 wcz
04cd0     1C 00 90 ED |  if_be	jmp	#LR__0174
04cd4                 | '         cmd9_memoryZ[channel] := z
04cd4     18 39 02 F6 | 	mov	_var05, _var01
04cd8     DC 0F 06 F1 | 	add	objptr, #476
04cdc     07 39 02 F1 | 	add	_var05, objptr
04ce0     23 0E 86 F1 | 	sub	objptr, #35
04ce4     07 3B C2 FA | 	rdbyte	_var06, objptr
04ce8     B9 0F 86 F1 | 	sub	objptr, #441
04cec     1C 3B 42 FC | 	wrbyte	_var06, _var05
04cf0                 | LR__0174
04cf0                 | ' 
04cf0                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04cf0     DC 0F 06 F1 | 	add	objptr, #476
04cf4     07 31 02 F1 | 	add	_var01, objptr
04cf8     18 39 C2 FA | 	rdbyte	_var05, _var01
04cfc     08 38 66 F0 | 	shl	_var05, #8
04d00     29 0E 86 F1 | 	sub	objptr, #41
04d04     07 39 62 FC | 	wrlong	_var05, objptr
04d08     B3 0F 86 F1 | 	sub	objptr, #435
04d0c     C8 03 90 FD | 	jmp	#LR__0196
04d10                 | LR__0175
04d10                 | ' 
04d10                 | '     $B:                          ' Jump position
04d10                 | '       cmdB_memoryZ := z
04d10     B9 0F 06 F1 | 	add	objptr, #441
04d14     07 39 C2 FA | 	rdbyte	_var05, objptr
04d18     2E 0E 06 F1 | 	add	objptr, #46
04d1c     07 39 42 FC | 	wrbyte	_var05, objptr
04d20                 | '       cmdB_updatePosition := true
04d20     01 0E 06 F1 | 	add	objptr, #1
04d24     FF FF FF FF 
04d28     07 FF 4B FC | 	wrbyte	##-1, objptr
04d2c     E8 0F 86 F1 | 	sub	objptr, #488
04d30     A4 03 90 FD | 	jmp	#LR__0196
04d34                 | LR__0176
04d34                 | ' 
04d34                 | '     $C:                          ' Set volume
04d34                 | '       currVolume[channel] := z
04d34     02 30 66 F0 | 	shl	_var01, #2
04d38     FF 0E 06 F1 | 	add	objptr, #255
04d3c     07 31 02 F1 | 	add	_var01, objptr
04d40     BA 0E 06 F1 | 	add	objptr, #186
04d44     07 3B C2 FA | 	rdbyte	_var06, objptr
04d48     B9 0F 86 F1 | 	sub	objptr, #441
04d4c     18 3B 62 FC | 	wrlong	_var06, _var01
04d50     84 03 90 FD | 	jmp	#LR__0196
04d54                 | LR__0177
04d54                 | ' 
04d54                 | '     $D:                          ' Pattern break
04d54                 | '       cmdD_memoryX := x
04d54     B7 0F 06 F1 | 	add	objptr, #439
04d58     07 39 C2 FA | 	rdbyte	_var05, objptr
04d5c     2D 0E 06 F1 | 	add	objptr, #45
04d60     07 39 42 FC | 	wrbyte	_var05, objptr
04d64                 | '       cmdD_memoryY := y
04d64     2C 0E 86 F1 | 	sub	objptr, #44
04d68     07 39 C2 FA | 	rdbyte	_var05, objptr
04d6c     2D 0E 06 F1 | 	add	objptr, #45
04d70     07 39 42 FC | 	wrbyte	_var05, objptr
04d74                 | '       cmdD_updatePosition := true
04d74     01 0E 06 F1 | 	add	objptr, #1
04d78     FF FF FF FF 
04d7c     07 FF 4B FC | 	wrbyte	##-1, objptr
04d80     E6 0F 86 F1 | 	sub	objptr, #486
04d84     50 03 90 FD | 	jmp	#LR__0196
04d88                 | LR__0178
04d88                 | ' 
04d88                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04d88                 | ' 
04d88                 | '       CASE_FAST x
04d88     B7 0F 06 F1 | 	add	objptr, #439
04d8c     07 3D C2 FA | 	rdbyte	_var07, objptr
04d90     B7 0F 86 F1 | 	sub	objptr, #439
04d94     1E 39 02 F6 | 	mov	_var05, _var07
04d98     0F 38 26 F3 | 	fle	_var05, #15
04d9c     1C 3F 02 F6 | 	mov	_var08, _var05
04da0     30 3E 62 FD | 	jmprel	_var08
04da4                 | LR__0179
04da4     3C 00 90 FD | 	jmp	#LR__0180
04da8     58 00 90 FD | 	jmp	#LR__0181
04dac     8C 00 90 FD | 	jmp	#LR__0182
04db0     C0 00 90 FD | 	jmp	#LR__0183
04db4     DC 00 90 FD | 	jmp	#LR__0184
04db8     14 01 90 FD | 	jmp	#LR__0185
04dbc     28 01 90 FD | 	jmp	#LR__0186
04dc0     C0 01 90 FD | 	jmp	#LR__0189
04dc4     10 03 90 FD | 	jmp	#LR__0196
04dc8     0C 03 90 FD | 	jmp	#LR__0196
04dcc     F0 01 90 FD | 	jmp	#LR__0190
04dd0     24 02 90 FD | 	jmp	#LR__0191
04dd4     00 03 90 FD | 	jmp	#LR__0196
04dd8     FC 02 90 FD | 	jmp	#LR__0196
04ddc     50 02 90 FD | 	jmp	#LR__0192
04de0     F4 02 90 FD | 	jmp	#LR__0196
04de4                 | LR__0180
04de4                 | ' 
04de4                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04de4     B8 0F 06 F1 | 	add	objptr, #440
04de8     07 3B C2 FA | 	rdbyte	_var06, objptr
04dec     1D 3B 22 F6 | 	not	_var06, _var06
04df0     01 3A 06 F5 | 	and	_var06, #1
04df4     03 0E 06 F1 | 	add	objptr, #3
04df8     07 3B 42 FC | 	wrbyte	_var06, objptr
04dfc     BB 0F 86 F1 | 	sub	objptr, #443
04e00     D4 02 90 FD | 	jmp	#LR__0196
04e04                 | LR__0181
04e04                 | ' 
04e04                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04e04     18 41 02 F6 | 	mov	_var09, _var01
04e08     02 40 66 F0 | 	shl	_var09, #2
04e0c     DF 0E 06 F1 | 	add	objptr, #223
04e10     07 41 02 F1 | 	add	_var09, objptr
04e14     20 3B 02 FB | 	rdlong	_var06, _var09
04e18     D9 0E 06 F1 | 	add	objptr, #217
04e1c     07 43 C2 FA | 	rdbyte	_var10, objptr
04e20     21 3B 82 F1 | 	sub	_var06, _var10
04e24     02 30 66 F0 | 	shl	_var01, #2
04e28     D9 0E 86 F1 | 	sub	objptr, #217
04e2c     07 31 02 F1 | 	add	_var01, objptr
04e30     18 3B 62 FC | 	wrlong	_var06, _var01
04e34     DF 0E 86 F1 | 	sub	objptr, #223
04e38     9C 02 90 FD | 	jmp	#LR__0196
04e3c                 | LR__0182
04e3c                 | ' 
04e3c                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04e3c     18 41 02 F6 | 	mov	_var09, _var01
04e40     02 40 66 F0 | 	shl	_var09, #2
04e44     DF 0E 06 F1 | 	add	objptr, #223
04e48     07 41 02 F1 | 	add	_var09, objptr
04e4c     20 3B 02 FB | 	rdlong	_var06, _var09
04e50     D9 0E 06 F1 | 	add	objptr, #217
04e54     07 43 C2 FA | 	rdbyte	_var10, objptr
04e58     21 3B 02 F1 | 	add	_var06, _var10
04e5c     02 30 66 F0 | 	shl	_var01, #2
04e60     D9 0E 86 F1 | 	sub	objptr, #217
04e64     07 31 02 F1 | 	add	_var01, objptr
04e68     18 3B 62 FC | 	wrlong	_var06, _var01
04e6c     DF 0E 86 F1 | 	sub	objptr, #223
04e70     64 02 90 FD | 	jmp	#LR__0196
04e74                 | LR__0183
04e74                 | ' 
04e74                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04e74     B8 0F 06 F1 | 	add	objptr, #440
04e78     07 3B C2 FA | 	rdbyte	_var06, objptr
04e7c     01 3A 06 F5 | 	and	_var06, #1
04e80     04 0E 06 F1 | 	add	objptr, #4
04e84     07 31 02 F1 | 	add	_var01, objptr
04e88     18 3B 42 FC | 	wrbyte	_var06, _var01
04e8c     BC 0F 86 F1 | 	sub	objptr, #444
04e90     44 02 90 FD | 	jmp	#LR__0196
04e94                 | LR__0184
04e94                 | ' 
04e94                 | '         $4:                                      ' Set vibrato waveform type
04e94                 | '           vibratoType[channel]  := y & 3
04e94     B8 0F 06 F1 | 	add	objptr, #440
04e98     07 3B C2 FA | 	rdbyte	_var06, objptr
04e9c     03 3A 06 F5 | 	and	_var06, #3
04ea0     18 45 02 F6 | 	mov	_var11, _var01
04ea4     08 0E 06 F1 | 	add	objptr, #8
04ea8     07 45 02 F1 | 	add	_var11, objptr
04eac     22 3B 42 FC | 	wrbyte	_var06, _var11
04eb0                 | '           resetVibrato[channel] := y & 4
04eb0     08 0E 86 F1 | 	sub	objptr, #8
04eb4     07 3B C2 FA | 	rdbyte	_var06, objptr
04eb8     04 3A 06 F5 | 	and	_var06, #4
04ebc     25 0E 86 F1 | 	sub	objptr, #37
04ec0     07 31 02 F1 | 	add	_var01, objptr
04ec4     18 3B 42 FC | 	wrbyte	_var06, _var01
04ec8     93 0F 86 F1 | 	sub	objptr, #403
04ecc     08 02 90 FD | 	jmp	#LR__0196
04ed0                 | LR__0185
04ed0                 | ' 
04ed0                 | '         $5: fineTune := y                        ' Set finetune
04ed0     B8 0F 06 F1 | 	add	objptr, #440
04ed4     07 3B C2 FA | 	rdbyte	_var06, objptr
04ed8     09 0E 86 F1 | 	sub	objptr, #9
04edc     07 3B 62 FC | 	wrlong	_var06, objptr
04ee0     AF 0F 86 F1 | 	sub	objptr, #431
04ee4     F0 01 90 FD | 	jmp	#LR__0196
04ee8                 | LR__0186
04ee8                 | ' 
04ee8                 | '         $6:                                      ' Pattern looping
04ee8                 | '           if y == 0
04ee8     B8 0F 06 F1 | 	add	objptr, #440
04eec     07 3B CA FA | 	rdbyte	_var06, objptr wz
04ef0     B8 0F 86 F1 | 	sub	objptr, #440
04ef4     1C 00 90 5D |  if_ne	jmp	#LR__0187
04ef8                 | '             cmdE6_memory[channel] := patternRow
04ef8     E9 0F 06 F1 | 	add	objptr, #489
04efc     07 31 02 F1 | 	add	_var01, objptr
04f00     47 0F 86 F1 | 	sub	objptr, #327
04f04     07 45 C2 FA | 	rdbyte	_var11, objptr
04f08     A2 0E 86 F1 | 	sub	objptr, #162
04f0c     18 45 42 FC | 	wrbyte	_var11, _var01
04f10                 | '           else
04f10     C4 01 90 FD | 	jmp	#LR__0196
04f14                 | LR__0187
04f14                 | '             if ++cmdE6_counter[channel] <= y
04f14     18 41 02 F6 | 	mov	_var09, _var01
04f18     ED 0F 06 F1 | 	add	objptr, #493
04f1c     07 41 02 F1 | 	add	_var09, objptr
04f20     20 3B C2 FA | 	rdbyte	_var06, _var09
04f24     01 3A 06 F1 | 	add	_var06, #1
04f28     18 43 02 F6 | 	mov	_var10, _var01
04f2c     07 43 02 F1 | 	add	_var10, objptr
04f30     21 3B 42 FC | 	wrbyte	_var06, _var10
04f34     21 47 C2 FA | 	rdbyte	_var12, _var10
04f38     35 0E 86 F1 | 	sub	objptr, #53
04f3c     07 49 C2 FA | 	rdbyte	_var13, objptr
04f40     B8 0F 86 F1 | 	sub	objptr, #440
04f44     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04f48     24 00 90 1D |  if_a	jmp	#LR__0188
04f4c                 | '               cmdE6_updatePosition[channel] := true
04f4c     F1 0F 06 F1 | 	add	objptr, #497
04f50     07 31 02 F1 | 	add	_var01, objptr
04f54     FF FF FF FF 
04f58     18 FF 4B FC | 	wrbyte	##-1, _var01
04f5c                 | '               cmdE6_updatePositionCommon    := true
04f5c     04 0E 06 F1 | 	add	objptr, #4
04f60     FF FF FF FF 
04f64     07 FF 4B FC | 	wrbyte	##-1, objptr
04f68     F5 0F 86 F1 | 	sub	objptr, #501
04f6c                 | '             else
04f6c     68 01 90 FD | 	jmp	#LR__0196
04f70                 | LR__0188
04f70                 | '               cmdE6_counter[channel] := 0
04f70     ED 0F 06 F1 | 	add	objptr, #493
04f74     07 31 02 F1 | 	add	_var01, objptr
04f78     18 01 48 FC | 	wrbyte	#0, _var01
04f7c     ED 0F 86 F1 | 	sub	objptr, #493
04f80     54 01 90 FD | 	jmp	#LR__0196
04f84                 | LR__0189
04f84                 | ' 
04f84                 | '         $7:                                      ' Set tremolo waveform type
04f84                 | '           tremoloType[channel] := y & 3
04f84     B8 0F 06 F1 | 	add	objptr, #440
04f88     07 3B C2 FA | 	rdbyte	_var06, objptr
04f8c     03 3A 06 F5 | 	and	_var06, #3
04f90     18 45 02 F6 | 	mov	_var11, _var01
04f94     0C 0E 06 F1 | 	add	objptr, #12
04f98     07 45 02 F1 | 	add	_var11, objptr
04f9c     22 3B 42 FC | 	wrbyte	_var06, _var11
04fa0                 | '           resetTremolo[channel] := y & 4
04fa0     0C 0E 86 F1 | 	sub	objptr, #12
04fa4     07 3B C2 FA | 	rdbyte	_var06, objptr
04fa8     04 3A 06 F5 | 	and	_var06, #4
04fac     29 0E 86 F1 | 	sub	objptr, #41
04fb0     07 31 02 F1 | 	add	_var01, objptr
04fb4     18 3B 42 FC | 	wrbyte	_var06, _var01
04fb8     8F 0F 86 F1 | 	sub	objptr, #399
04fbc     18 01 90 FD | 	jmp	#LR__0196
04fc0                 | LR__0190
04fc0                 | ' 
04fc0                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
04fc0     18 41 02 F6 | 	mov	_var09, _var01
04fc4     02 40 66 F0 | 	shl	_var09, #2
04fc8     FF 0E 06 F1 | 	add	objptr, #255
04fcc     07 41 02 F1 | 	add	_var09, objptr
04fd0     20 3B 02 FB | 	rdlong	_var06, _var09
04fd4     B9 0E 06 F1 | 	add	objptr, #185
04fd8     07 43 C2 FA | 	rdbyte	_var10, objptr
04fdc     21 3B 02 F1 | 	add	_var06, _var10
04fe0     02 30 66 F0 | 	shl	_var01, #2
04fe4     B9 0E 86 F1 | 	sub	objptr, #185
04fe8     07 31 02 F1 | 	add	_var01, objptr
04fec     18 3B 62 FC | 	wrlong	_var06, _var01
04ff0     FF 0E 86 F1 | 	sub	objptr, #255
04ff4     E0 00 90 FD | 	jmp	#LR__0196
04ff8                 | LR__0191
04ff8                 | ' 
04ff8                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
04ff8     18 41 02 F6 | 	mov	_var09, _var01
04ffc     02 40 66 F0 | 	shl	_var09, #2
05000     FF 0E 06 F1 | 	add	objptr, #255
05004     07 41 02 F1 | 	add	_var09, objptr
05008     20 3B 02 FB | 	rdlong	_var06, _var09
0500c     B9 0E 06 F1 | 	add	objptr, #185
05010     07 43 C2 FA | 	rdbyte	_var10, objptr
05014     21 3B 82 F1 | 	sub	_var06, _var10
05018     02 30 66 F0 | 	shl	_var01, #2
0501c     B9 0E 86 F1 | 	sub	objptr, #185
05020     07 31 02 F1 | 	add	_var01, objptr
05024     18 3B 62 FC | 	wrlong	_var06, _var01
05028     FF 0E 86 F1 | 	sub	objptr, #255
0502c     A8 00 90 FD | 	jmp	#LR__0196
05030                 | LR__0192
05030                 | ' 
05030                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05030     B8 0F 06 F1 | 	add	objptr, #440
05034     07 41 C2 FA | 	rdbyte	_var09, objptr
05038     14 0F 86 F1 | 	sub	objptr, #276
0503c     07 43 C2 FA | 	rdbyte	_var10, objptr
05040     21 41 02 FD | 	qmul	_var09, _var10
05044     18 3A 62 FD | 	getqx	_var06
05048     01 0E 06 F1 | 	add	objptr, #1
0504c     07 3B 42 FC | 	wrbyte	_var06, objptr
05050     A5 0E 86 F1 | 	sub	objptr, #165
05054     80 00 90 FD | 	jmp	#LR__0196
05058                 | LR__0193
05058                 | ' 
05058                 | '     $F:                          ' Set speed
05058                 | '       if z < 32
05058     B9 0F 06 F1 | 	add	objptr, #441
0505c     07 39 C2 FA | 	rdbyte	_var05, objptr
05060     B9 0F 86 F1 | 	sub	objptr, #441
05064     20 38 5E F2 | 	cmps	_var05, #32 wcz
05068     18 00 90 3D |  if_ae	jmp	#LR__0194
0506c                 | '         currentSongSpeed := z
0506c     B9 0F 06 F1 | 	add	objptr, #441
05070     07 39 C2 FA | 	rdbyte	_var05, objptr
05074     15 0F 86 F1 | 	sub	objptr, #277
05078     07 39 42 FC | 	wrbyte	_var05, objptr
0507c     A4 0E 86 F1 | 	sub	objptr, #164
05080                 | '       else
05080     54 00 90 FD | 	jmp	#LR__0195
05084                 | LR__0194
05084                 | '         ticksPerMinute := z * 24
05084     B9 0F 06 F1 | 	add	objptr, #441
05088     07 3D C2 FA | 	rdbyte	_var07, objptr
0508c     1E 39 02 F6 | 	mov	_var05, _var07
05090     01 38 66 F0 | 	shl	_var05, #1
05094     1E 39 02 F1 | 	add	_var05, _var07
05098     03 38 66 F0 | 	shl	_var05, #3
0509c     12 0E 86 F1 | 	sub	objptr, #18
050a0     07 39 62 FC | 	wrlong	_var05, objptr
050a4     A7 0F 86 F1 | 	sub	objptr, #423
050a8                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
050a8     07 0B 03 FB | 	rdlong	muldiva_, objptr
050ac     A7 0F 06 F1 | 	add	objptr, #423
050b0     07 0D 03 FB | 	rdlong	muldivb_, objptr
050b4     A7 0F 86 F1 | 	sub	objptr, #423
050b8     D0 00 A0 FD | 	call	#divide_
050bc     86 3B 02 F6 | 	mov	_var06, muldivb_
050c0     04 3A 66 F0 | 	shl	_var06, #4
050c4     86 3B 82 F1 | 	sub	_var06, muldivb_
050c8     02 3A 66 F0 | 	shl	_var06, #2
050cc     AB 0F 06 F1 | 	add	objptr, #427
050d0     07 3B 62 FC | 	wrlong	_var06, objptr
050d4     AB 0F 86 F1 | 	sub	objptr, #427
050d8                 | LR__0195
050d8                 | LR__0196
050d8                 | _trackerplayer_spin2_handleZeroTickCommands_ret
050d8     2D 00 64 FD | 	ret
050dc                 | 
050dc                 | ' 
050dc                 | ' 
050dc                 | ' ' Handle all commands that executes on "non zero ticks"
050dc                 | ' '
050dc                 | ' PRI handleNonZeroTickCommands(channel)
050dc                 | _trackerplayer_spin2_handleNonZeroTickCommands
050dc     0A 5A 05 F6 | 	mov	COUNT_, #10
050e0     B0 00 A0 FD | 	call	#pushregs_
050e4     2E 6B 02 F6 | 	mov	local01, arg01
050e8                 | ' 
050e8                 | '   CASE_FAST cmd
050e8     BA 0F 06 F1 | 	add	objptr, #442
050ec     07 6D C2 FA | 	rdbyte	local02, objptr
050f0     BA 0F 86 F1 | 	sub	objptr, #442
050f4     36 6F 02 F6 | 	mov	local03, local02
050f8     01 6E 86 F1 | 	sub	local03, #1
050fc     0E 6E 26 F3 | 	fle	local03, #14
05100     37 71 02 F6 | 	mov	local04, local03
05104     30 70 62 FD | 	jmprel	local04
05108                 | LR__0197
05108     38 00 90 FD | 	jmp	#LR__0198
0510c     A0 00 90 FD | 	jmp	#LR__0199
05110     D4 00 90 FD | 	jmp	#LR__0200
05114     1C 02 90 FD | 	jmp	#LR__0210
05118     20 01 90 FD | 	jmp	#LR__0202
0511c     48 01 90 FD | 	jmp	#LR__0203
05120     50 01 90 FD | 	jmp	#LR__0204
05124     0C 02 90 FD | 	jmp	#LR__0210
05128     08 02 90 FD | 	jmp	#LR__0210
0512c     B0 01 90 FD | 	jmp	#LR__0207
05130     00 02 90 FD | 	jmp	#LR__0210
05134     FC 01 90 FD | 	jmp	#LR__0210
05138     F8 01 90 FD | 	jmp	#LR__0210
0513c     AC 01 90 FD | 	jmp	#LR__0208
05140     F0 01 90 FD | 	jmp	#LR__0210
05144                 | LR__0198
05144                 | ' 
05144                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05144     35 73 02 F6 | 	mov	local05, local01
05148     02 72 66 F0 | 	shl	local05, #2
0514c     DF 0E 06 F1 | 	add	objptr, #223
05150     07 73 02 F1 | 	add	local05, objptr
05154     39 75 02 FB | 	rdlong	local06, local05
05158     DA 0E 06 F1 | 	add	objptr, #218
0515c     07 77 C2 FA | 	rdbyte	local07, objptr
05160     3B 75 82 F1 | 	sub	local06, local07
05164     35 79 02 F6 | 	mov	local08, local01
05168     02 78 66 F0 | 	shl	local08, #2
0516c     DA 0E 86 F1 | 	sub	objptr, #218
05170     07 79 02 F1 | 	add	local08, objptr
05174     3C 75 62 FC | 	wrlong	local06, local08
05178                 | ' 
05178                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05178                 | '       if currPeriod[channel] < 0
05178     35 75 02 F6 | 	mov	local06, local01
0517c     02 74 66 F0 | 	shl	local06, #2
05180     07 75 02 F1 | 	add	local06, objptr
05184     3A 7B 02 FB | 	rdlong	local09, local06
05188     00 7A 5E F2 | 	cmps	local09, #0 wcz
0518c     DF 0E 86 F1 | 	sub	objptr, #223
05190     A0 01 90 3D |  if_ae	jmp	#LR__0210
05194                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05194     02 6A 66 F0 | 	shl	local01, #2
05198     DF 0E 06 F1 | 	add	objptr, #223
0519c     07 6B 02 F1 | 	add	local01, objptr
051a0     01 00 80 FF 
051a4     35 B1 6A FC | 	wrlong	##856, local01
051a8     DF 0E 86 F1 | 	sub	objptr, #223
051ac     84 01 90 FD | 	jmp	#LR__0210
051b0                 | LR__0199
051b0                 | ' 
051b0                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
051b0     35 73 02 F6 | 	mov	local05, local01
051b4     02 72 66 F0 | 	shl	local05, #2
051b8     DF 0E 06 F1 | 	add	objptr, #223
051bc     07 73 02 F1 | 	add	local05, objptr
051c0     39 75 02 FB | 	rdlong	local06, local05
051c4     DA 0E 06 F1 | 	add	objptr, #218
051c8     07 77 C2 FA | 	rdbyte	local07, objptr
051cc     3B 75 02 F1 | 	add	local06, local07
051d0     02 6A 66 F0 | 	shl	local01, #2
051d4     DA 0E 86 F1 | 	sub	objptr, #218
051d8     07 6B 02 F1 | 	add	local01, objptr
051dc     35 75 62 FC | 	wrlong	local06, local01
051e0     DF 0E 86 F1 | 	sub	objptr, #223
051e4     4C 01 90 FD | 	jmp	#LR__0210
051e8                 | LR__0200
051e8                 | ' 
051e8                 | '     $3:                                 ' Slide to note (portamento)
051e8                 | '       if z > 0
051e8     B9 0F 06 F1 | 	add	objptr, #441
051ec     07 75 C2 FA | 	rdbyte	local06, objptr
051f0     B9 0F 86 F1 | 	sub	objptr, #441
051f4     00 74 5E F2 | 	cmps	local06, #0 wcz
051f8     1C 00 90 ED |  if_be	jmp	#LR__0201
051fc                 | '         cmd3_memoryZ[channel] := z
051fc     35 75 02 F6 | 	mov	local06, local01
05200     C8 0F 06 F1 | 	add	objptr, #456
05204     07 75 02 F1 | 	add	local06, objptr
05208     0F 0E 86 F1 | 	sub	objptr, #15
0520c     07 7B C2 FA | 	rdbyte	local09, objptr
05210     B9 0F 86 F1 | 	sub	objptr, #441
05214     3A 7B 42 FC | 	wrbyte	local09, local06
05218                 | LR__0201
05218                 | ' 
05218                 | '       doPortamento(channel, lastSetPeriod[channel])
05218     35 73 02 F6 | 	mov	local05, local01
0521c     02 72 66 F0 | 	shl	local05, #2
05220     27 0F 06 F1 | 	add	objptr, #295
05224     07 73 02 F1 | 	add	local05, objptr
05228     39 5F 02 FB | 	rdlong	arg02, local05
0522c     35 5D 02 F6 | 	mov	arg01, local01
05230     27 0F 86 F1 | 	sub	objptr, #295
05234     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05238     F8 00 90 FD | 	jmp	#LR__0210
0523c                 | LR__0202
0523c                 | ' 
0523c                 | '     $5:                                 ' Volume slide + portamento
0523c                 | '       doVolumeSlide(channel)
0523c     35 5D 02 F6 | 	mov	arg01, local01
05240     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05244                 | '       doPortamento(channel, lastSetPeriod[channel])
05244     35 73 02 F6 | 	mov	local05, local01
05248     02 72 66 F0 | 	shl	local05, #2
0524c     27 0F 06 F1 | 	add	objptr, #295
05250     07 73 02 F1 | 	add	local05, objptr
05254     39 5F 02 FB | 	rdlong	arg02, local05
05258     35 5D 02 F6 | 	mov	arg01, local01
0525c     27 0F 86 F1 | 	sub	objptr, #295
05260     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05264     CC 00 90 FD | 	jmp	#LR__0210
05268                 | LR__0203
05268                 | ' 
05268                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05268     35 5D 02 F6 | 	mov	arg01, local01
0526c     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05270     C0 00 90 FD | 	jmp	#LR__0210
05274                 | LR__0204
05274                 | ' 
05274                 | '     $7:                                 ' Tremolo
05274                 | '       if x > 0
05274     B7 0F 06 F1 | 	add	objptr, #439
05278     07 75 C2 FA | 	rdbyte	local06, objptr
0527c     B7 0F 86 F1 | 	sub	objptr, #439
05280     00 74 5E F2 | 	cmps	local06, #0 wcz
05284     1C 00 90 ED |  if_be	jmp	#LR__0205
05288                 | '         cmd7_memoryX[channel] := x
05288     35 75 02 F6 | 	mov	local06, local01
0528c     D8 0F 06 F1 | 	add	objptr, #472
05290     07 75 02 F1 | 	add	local06, objptr
05294     21 0E 86 F1 | 	sub	objptr, #33
05298     07 7B C2 FA | 	rdbyte	local09, objptr
0529c     B7 0F 86 F1 | 	sub	objptr, #439
052a0     3A 7B 42 FC | 	wrbyte	local09, local06
052a4                 | LR__0205
052a4                 | '       if y > 0
052a4     B8 0F 06 F1 | 	add	objptr, #440
052a8     07 75 C2 FA | 	rdbyte	local06, objptr
052ac     B8 0F 86 F1 | 	sub	objptr, #440
052b0     00 74 5E F2 | 	cmps	local06, #0 wcz
052b4     1C 00 90 ED |  if_be	jmp	#LR__0206
052b8                 | '         cmd7_memoryY[channel] := y
052b8     35 75 02 F6 | 	mov	local06, local01
052bc     D4 0F 06 F1 | 	add	objptr, #468
052c0     07 75 02 F1 | 	add	local06, objptr
052c4     1C 0E 86 F1 | 	sub	objptr, #28
052c8     07 7B C2 FA | 	rdbyte	local09, objptr
052cc     B8 0F 86 F1 | 	sub	objptr, #440
052d0     3A 7B 42 FC | 	wrbyte	local09, local06
052d4                 | LR__0206
052d4                 | ' 
052d4                 | '       doTremolo(channel)
052d4     35 5D 02 F6 | 	mov	arg01, local01
052d8     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
052dc     54 00 90 FD | 	jmp	#LR__0210
052e0                 | LR__0207
052e0                 | ' 
052e0                 | '     $A: doVolumeSlide(channel)          ' Volume slide
052e0     35 5D 02 F6 | 	mov	arg01, local01
052e4     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052e8     48 00 90 FD | 	jmp	#LR__0210
052ec                 | LR__0208
052ec                 | ' 
052ec                 | '     $E:                                 ' Retrig every Y ticks
052ec                 | '       if (x == $9) && ((tickcounter // y) == 0)
052ec     B7 0F 06 F1 | 	add	objptr, #439
052f0     07 73 C2 FA | 	rdbyte	local05, objptr
052f4     B7 0F 86 F1 | 	sub	objptr, #439
052f8     09 72 0E F2 | 	cmp	local05, #9 wz
052fc     34 00 90 5D |  if_ne	jmp	#LR__0209
05300     A1 0E 06 F1 | 	add	objptr, #161
05304     07 77 C2 FA | 	rdbyte	local07, objptr
05308     3B 0B 03 F6 | 	mov	muldiva_, local07
0530c     17 0F 06 F1 | 	add	objptr, #279
05310     07 7D C2 FA | 	rdbyte	local10, objptr
05314     B8 0F 86 F1 | 	sub	objptr, #440
05318     3E 0D 03 F6 | 	mov	muldivb_, local10
0531c     D0 00 A0 FD | 	call	#divide_
05320     85 7B 0A F6 | 	mov	local09, muldiva_ wz
05324     0C 00 90 5D |  if_ne	jmp	#LR__0209
05328                 | '         triggerNote(channel)
05328     35 75 02 F6 | 	mov	local06, local01
0532c     3A 5D 02 F6 | 	mov	arg01, local06
05330     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
05334                 | LR__0209
05334                 | LR__0210
05334     AF F0 03 F6 | 	mov	ptra, fp
05338     BF 00 A0 FD | 	call	#popregs_
0533c                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
0533c     2D 00 64 FD | 	ret
05340                 | 
05340                 | ' 
05340                 | ' 
05340                 | ' ' Handle all commands that executes on every tick
05340                 | ' '
05340                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05340                 | _trackerplayer_spin2_handleEveryTickCommands
05340     12 5A 05 F6 | 	mov	COUNT_, #18
05344     B0 00 A0 FD | 	call	#pushregs_
05348     2E 6B 02 F6 | 	mov	local01, arg01
0534c                 | ' 
0534c                 | '   CASE_FAST cmd
0534c     BA 0F 06 F1 | 	add	objptr, #442
05350     07 6D C2 FA | 	rdbyte	local02, objptr
05354     BA 0F 86 F1 | 	sub	objptr, #442
05358     36 6F 02 F6 | 	mov	local03, local02
0535c     0F 6E 26 F3 | 	fle	local03, #15
05360     37 71 02 F6 | 	mov	local04, local03
05364     30 70 62 FD | 	jmprel	local04
05368                 | LR__0211
05368     3C 00 90 FD | 	jmp	#LR__0212
0536c     68 03 90 FD | 	jmp	#LR__0226
05370     64 03 90 FD | 	jmp	#LR__0226
05374     60 03 90 FD | 	jmp	#LR__0226
05378     E8 01 90 FD | 	jmp	#LR__0215
0537c     58 03 90 FD | 	jmp	#LR__0226
05380     4C 02 90 FD | 	jmp	#LR__0218
05384     50 03 90 FD | 	jmp	#LR__0226
05388     4C 03 90 FD | 	jmp	#LR__0226
0538c     48 03 90 FD | 	jmp	#LR__0226
05390     44 03 90 FD | 	jmp	#LR__0226
05394     40 03 90 FD | 	jmp	#LR__0226
05398     3C 03 90 FD | 	jmp	#LR__0226
0539c     38 03 90 FD | 	jmp	#LR__0226
053a0     38 02 90 FD | 	jmp	#LR__0219
053a4     30 03 90 FD | 	jmp	#LR__0226
053a8                 | LR__0212
053a8                 | ' 
053a8                 | '     $0:                                 ' Arpeggio
053a8                 | '       arpCounter := tickCounter // 3
053a8     A1 0E 06 F1 | 	add	objptr, #161
053ac     07 0B C3 FA | 	rdbyte	muldiva_, objptr
053b0     A1 0E 86 F1 | 	sub	objptr, #161
053b4     03 0C 07 F6 | 	mov	muldivb_, #3
053b8     D0 00 A0 FD | 	call	#divide_
053bc     85 73 02 F6 | 	mov	local05, muldiva_
053c0                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
053c0     35 75 02 F6 | 	mov	local06, local01
053c4     02 74 66 F0 | 	shl	local06, #2
053c8     DF 0E 06 F1 | 	add	objptr, #223
053cc     07 75 02 F1 | 	add	local06, objptr
053d0     3A 5D 02 FB | 	rdlong	arg01, local06
053d4     35 77 02 F6 | 	mov	local07, local01
053d8     0C 0E 86 F1 | 	sub	objptr, #12
053dc     07 77 02 F1 | 	add	local07, objptr
053e0     3B 5F C2 FA | 	rdbyte	arg02, local07
053e4     D3 0E 86 F1 | 	sub	objptr, #211
053e8     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
053ec     15 79 02 F6 | 	mov	local08, result1
053f0     3C 7B 02 F6 | 	mov	local09, local08
053f4     24 78 5E F2 | 	cmps	local08, #36 wcz
053f8     DC 02 90 3D |  if_ae	jmp	#LR__0226
053fc                 | '         if arpCounter == 1 and x > 0
053fc     01 72 0E F2 | 	cmp	local05, #1 wz
05400     8C 00 90 5D |  if_ne	jmp	#LR__0213
05404     B7 0F 06 F1 | 	add	objptr, #439
05408     07 75 C2 FA | 	rdbyte	local06, objptr
0540c     B7 0F 86 F1 | 	sub	objptr, #439
05410     00 74 5E F2 | 	cmps	local06, #0 wcz
05414     78 00 90 ED |  if_be	jmp	#LR__0213
05418                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05418     3D 7D 02 F6 | 	mov	local10, local09
0541c     B7 0F 06 F1 | 	add	objptr, #439
05420     07 77 C2 FA | 	rdbyte	local07, objptr
05424     3B 7F 02 F6 | 	mov	local11, local07
05428     3B 7D 02 F1 | 	add	local10, local07
0542c     3E 81 02 F6 | 	mov	local12, local10
05430     40 5D 02 F6 | 	mov	arg01, local12
05434     06 00 00 FF 
05438     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
0543c     01 5C 66 F0 | 	shl	arg01, #1
05440     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05444                 | ' 
05444                 | '   return word[@periodTable][noteNumber]
05444     2E 2B E2 FA | 	rdword	result1, arg01
05448     06 00 00 FF 
0544c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05450     15 83 02 F6 | 	mov	local13, result1
05454     35 85 02 F6 | 	mov	local14, local01
05458     02 84 66 F0 | 	shl	local14, #2
0545c     D8 0E 86 F1 | 	sub	objptr, #216
05460     07 87 02 F6 | 	mov	local15, objptr
05464     07 85 02 F1 | 	add	local14, objptr
05468     41 75 02 F6 | 	mov	local06, local13
0546c     42 89 02 FB | 	rdlong	local16, local14
05470     44 75 82 F1 | 	sub	local06, local16
05474     35 8B 02 F6 | 	mov	local17, local01
05478     02 8A 66 F0 | 	shl	local17, #2
0547c     10 0E 06 F1 | 	add	objptr, #16
05480     07 8D 02 F6 | 	mov	local18, objptr
05484     07 8B 02 F1 | 	add	local17, objptr
05488     45 75 62 FC | 	wrlong	local06, local17
0548c     EF 0E 86 F1 | 	sub	objptr, #239
05490                 | LR__0213
05490                 | '         if arpCounter == 2 and y > 0
05490     02 72 0E F2 | 	cmp	local05, #2 wz
05494     8C 00 90 5D |  if_ne	jmp	#LR__0214
05498     B8 0F 06 F1 | 	add	objptr, #440
0549c     07 75 C2 FA | 	rdbyte	local06, objptr
054a0     B8 0F 86 F1 | 	sub	objptr, #440
054a4     00 74 5E F2 | 	cmps	local06, #0 wcz
054a8     78 00 90 ED |  if_be	jmp	#LR__0214
054ac                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
054ac     3D 7D 02 F6 | 	mov	local10, local09
054b0     B8 0F 06 F1 | 	add	objptr, #440
054b4     07 77 C2 FA | 	rdbyte	local07, objptr
054b8     3B 7F 02 F6 | 	mov	local11, local07
054bc     3B 7D 02 F1 | 	add	local10, local07
054c0     3E 81 02 F6 | 	mov	local12, local10
054c4     40 5D 02 F6 | 	mov	arg01, local12
054c8     06 00 00 FF 
054cc     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054d0     01 5C 66 F0 | 	shl	arg01, #1
054d4     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054d8                 | ' 
054d8                 | '   return word[@periodTable][noteNumber]
054d8     2E 2B E2 FA | 	rdword	result1, arg01
054dc     06 00 00 FF 
054e0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054e4     15 83 02 F6 | 	mov	local13, result1
054e8     35 85 02 F6 | 	mov	local14, local01
054ec     02 84 66 F0 | 	shl	local14, #2
054f0     D9 0E 86 F1 | 	sub	objptr, #217
054f4     07 87 02 F6 | 	mov	local15, objptr
054f8     07 85 02 F1 | 	add	local14, objptr
054fc     41 75 02 F6 | 	mov	local06, local13
05500     42 89 02 FB | 	rdlong	local16, local14
05504     44 75 82 F1 | 	sub	local06, local16
05508     35 8B 02 F6 | 	mov	local17, local01
0550c     02 8A 66 F0 | 	shl	local17, #2
05510     10 0E 06 F1 | 	add	objptr, #16
05514     07 8D 02 F6 | 	mov	local18, objptr
05518     07 8B 02 F1 | 	add	local17, objptr
0551c     45 75 62 FC | 	wrlong	local06, local17
05520     EF 0E 86 F1 | 	sub	objptr, #239
05524                 | LR__0214
05524                 | '         if arpCounter == 0 and (x + y) > 0
05524     00 72 0E F2 | 	cmp	local05, #0 wz
05528     AC 01 90 5D |  if_ne	jmp	#LR__0226
0552c     B7 0F 06 F1 | 	add	objptr, #439
05530     07 75 C2 FA | 	rdbyte	local06, objptr
05534     01 0E 06 F1 | 	add	objptr, #1
05538     07 77 C2 FA | 	rdbyte	local07, objptr
0553c     B8 0F 86 F1 | 	sub	objptr, #440
05540     3B 75 02 F1 | 	add	local06, local07
05544     00 74 5E F2 | 	cmps	local06, #0 wcz
05548     8C 01 90 ED |  if_be	jmp	#LR__0226
0554c                 | '           deltaPeriod[channel] := 0
0554c     02 6A 66 F0 | 	shl	local01, #2
05550     EF 0E 06 F1 | 	add	objptr, #239
05554     07 6B 02 F1 | 	add	local01, objptr
05558     35 01 68 FC | 	wrlong	#0, local01
0555c     EF 0E 86 F1 | 	sub	objptr, #239
05560     74 01 90 FD | 	jmp	#LR__0226
05564                 | LR__0215
05564                 | ' 
05564                 | '     $4:                                 ' Vibrato
05564                 | '       if x > 0
05564     B7 0F 06 F1 | 	add	objptr, #439
05568     07 75 C2 FA | 	rdbyte	local06, objptr
0556c     B7 0F 86 F1 | 	sub	objptr, #439
05570     00 74 5E F2 | 	cmps	local06, #0 wcz
05574     1C 00 90 ED |  if_be	jmp	#LR__0216
05578                 | '         cmd4_memoryX[channel] := x
05578     35 75 02 F6 | 	mov	local06, local01
0557c     D0 0F 06 F1 | 	add	objptr, #464
05580     07 75 02 F1 | 	add	local06, objptr
05584     19 0E 86 F1 | 	sub	objptr, #25
05588     07 7F C2 FA | 	rdbyte	local11, objptr
0558c     B7 0F 86 F1 | 	sub	objptr, #439
05590     3A 7F 42 FC | 	wrbyte	local11, local06
05594                 | LR__0216
05594                 | '       if y > 0
05594     B8 0F 06 F1 | 	add	objptr, #440
05598     07 75 C2 FA | 	rdbyte	local06, objptr
0559c     B8 0F 86 F1 | 	sub	objptr, #440
055a0     00 74 5E F2 | 	cmps	local06, #0 wcz
055a4     1C 00 90 ED |  if_be	jmp	#LR__0217
055a8                 | '         cmd4_memoryY[channel] := y
055a8     35 75 02 F6 | 	mov	local06, local01
055ac     CC 0F 06 F1 | 	add	objptr, #460
055b0     07 75 02 F1 | 	add	local06, objptr
055b4     14 0E 86 F1 | 	sub	objptr, #20
055b8     07 7F C2 FA | 	rdbyte	local11, objptr
055bc     B8 0F 86 F1 | 	sub	objptr, #440
055c0     3A 7F 42 FC | 	wrbyte	local11, local06
055c4                 | LR__0217
055c4                 | ' 
055c4                 | '       doVibrato(channel)
055c4     35 5D 02 F6 | 	mov	arg01, local01
055c8     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055cc     08 01 90 FD | 	jmp	#LR__0226
055d0                 | LR__0218
055d0                 | ' 
055d0                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
055d0     35 5D 02 F6 | 	mov	arg01, local01
055d4     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055d8     FC 00 90 FD | 	jmp	#LR__0226
055dc                 | LR__0219
055dc                 | ' 
055dc                 | '     $E:
055dc                 | '       if x == $C                        ' Cut note after Y ticks
055dc     B7 0F 06 F1 | 	add	objptr, #439
055e0     07 75 C2 FA | 	rdbyte	local06, objptr
055e4     B7 0F 86 F1 | 	sub	objptr, #439
055e8     0C 74 0E F2 | 	cmp	local06, #12 wz
055ec     34 00 90 5D |  if_ne	jmp	#LR__0220
055f0                 | '         if tickcounter == y
055f0     A1 0E 06 F1 | 	add	objptr, #161
055f4     07 75 C2 FA | 	rdbyte	local06, objptr
055f8     17 0F 06 F1 | 	add	objptr, #279
055fc     07 7F C2 FA | 	rdbyte	local11, objptr
05600     B8 0F 86 F1 | 	sub	objptr, #440
05604     3F 75 0A F2 | 	cmp	local06, local11 wz
05608     CC 00 90 5D |  if_ne	jmp	#LR__0225
0560c                 | '           currVolume[channel] := 0
0560c     02 6A 66 F0 | 	shl	local01, #2
05610     FF 0E 06 F1 | 	add	objptr, #255
05614     07 6B 02 F1 | 	add	local01, objptr
05618     35 01 68 FC | 	wrlong	#0, local01
0561c     FF 0E 86 F1 | 	sub	objptr, #255
05620     B4 00 90 FD | 	jmp	#LR__0225
05624                 | LR__0220
05624                 | ' 
05624                 | '       elseif x == $D                    ' Delay note Y ticks
05624     B7 0F 06 F1 | 	add	objptr, #439
05628     07 75 C2 FA | 	rdbyte	local06, objptr
0562c     B7 0F 86 F1 | 	sub	objptr, #439
05630     0D 74 0E F2 | 	cmp	local06, #13 wz
05634     A0 00 90 5D |  if_ne	jmp	#LR__0224
05638                 | '         if tickcounter == y
05638     A1 0E 06 F1 | 	add	objptr, #161
0563c     07 75 C2 FA | 	rdbyte	local06, objptr
05640     17 0F 06 F1 | 	add	objptr, #279
05644     07 7F C2 FA | 	rdbyte	local11, objptr
05648     B8 0F 86 F1 | 	sub	objptr, #440
0564c     3F 75 0A F2 | 	cmp	local06, local11 wz
05650     0C 00 90 5D |  if_ne	jmp	#LR__0221
05654                 | '           triggerNote(channel)
05654     35 5D 02 F6 | 	mov	arg01, local01
05658     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
0565c     78 00 90 FD | 	jmp	#LR__0223
05660                 | LR__0221
05660                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05660                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05660     B8 0F 06 F1 | 	add	objptr, #440
05664     07 75 C2 FA | 	rdbyte	local06, objptr
05668     14 0F 86 F1 | 	sub	objptr, #276
0566c     07 7F C2 FA | 	rdbyte	local11, objptr
05670     A4 0E 86 F1 | 	sub	objptr, #164
05674     3F 75 5A F2 | 	cmps	local06, local11 wcz
05678     5C 00 90 CD |  if_b	jmp	#LR__0222
0567c     A4 0E 06 F1 | 	add	objptr, #164
05680     07 83 C2 FA | 	rdbyte	local13, objptr
05684     41 81 02 F6 | 	mov	local12, local13
05688     01 80 86 F1 | 	sub	local12, #1
0568c     03 0E 86 F1 | 	sub	objptr, #3
05690     07 87 C2 FA | 	rdbyte	local15, objptr
05694     A1 0E 86 F1 | 	sub	objptr, #161
05698     43 85 02 F6 | 	mov	local14, local15
0569c     40 85 0A F2 | 	cmp	local14, local12 wz
056a0     34 00 90 5D |  if_ne	jmp	#LR__0222
056a4                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
056a4     35 75 02 F6 | 	mov	local06, local01
056a8     02 74 66 F0 | 	shl	local06, #2
056ac     27 0F 06 F1 | 	add	objptr, #295
056b0     07 7D 02 F6 | 	mov	local10, objptr
056b4     07 75 02 F1 | 	add	local06, objptr
056b8     35 7F 02 F6 | 	mov	local11, local01
056bc     02 7E 66 F0 | 	shl	local11, #2
056c0     48 0E 86 F1 | 	sub	objptr, #72
056c4     07 77 02 F6 | 	mov	local07, objptr
056c8     3A 81 02 FB | 	rdlong	local12, local06
056cc     3B 7F 02 F1 | 	add	local11, local07
056d0     3F 81 62 FC | 	wrlong	local12, local11
056d4     DF 0E 86 F1 | 	sub	objptr, #223
056d8                 | LR__0222
056d8                 | LR__0223
056d8                 | LR__0224
056d8                 | LR__0225
056d8                 | LR__0226
056d8     AF F0 03 F6 | 	mov	ptra, fp
056dc     BF 00 A0 FD | 	call	#popregs_
056e0                 | _trackerplayer_spin2_handleEveryTickCommands_ret
056e0     2D 00 64 FD | 	ret
056e4                 | 
056e4                 | ' 
056e4                 | ' 
056e4                 | ' PRI doTremolo(channel) | depth, sineWave, speed
056e4                 | _trackerplayer_spin2_doTremolo
056e4     2E 31 02 F6 | 	mov	_var01, arg01
056e8     18 33 02 F6 | 	mov	_var02, _var01
056ec     8B 0F 06 F1 | 	add	objptr, #395
056f0     07 33 02 F1 | 	add	_var02, objptr
056f4     05 00 00 FF 
056f8     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
056fc     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05700     19 37 C2 FA | 	rdbyte	_var04, _var02
05704     02 36 66 F0 | 	shl	_var04, #2
05708     1A 37 02 F1 | 	add	_var04, _var03
0570c                 | ' 
0570c                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
0570c     1B 39 02 FB | 	rdlong	_var05, _var04
05710     18 3B 02 F6 | 	mov	_var06, _var01
05714     49 0E 06 F1 | 	add	objptr, #73
05718     07 3B 02 F1 | 	add	_var06, objptr
0571c                 | '   depth    := cmd7_memoryY[channel]
0571c     1D 3D C2 FA | 	rdbyte	_var07, _var06
05720     18 3F 02 F6 | 	mov	_var08, _var01
05724     04 0E 06 F1 | 	add	objptr, #4
05728     07 3F 02 F1 | 	add	_var08, objptr
0572c                 | '   speed    := cmd7_memoryX[channel]
0572c     1F 41 C2 FA | 	rdbyte	_var09, _var08
05730                 | ' 
05730                 | '   CASE_FAST vibratoType[channel]
05730     18 43 02 F6 | 	mov	_var10, _var01
05734     18 0E 86 F1 | 	sub	objptr, #24
05738     07 45 02 F6 | 	mov	_var11, objptr
0573c     07 43 02 F1 | 	add	_var10, objptr
05740     21 47 C2 FA | 	rdbyte	_var12, _var10
05744     03 46 26 F3 | 	fle	_var12, #3
05748     23 49 02 F6 | 	mov	_var13, _var12
0574c     05 00 00 FF 
05750     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05754     C0 0F 86 F1 | 	sub	objptr, #448
05758     30 48 62 FD | 	jmprel	_var13
0575c                 | LR__0227
0575c     0C 00 90 FD | 	jmp	#LR__0228
05760     30 00 90 FD | 	jmp	#LR__0229
05764     6C 00 90 FD | 	jmp	#LR__0230
05768     B4 00 90 FD | 	jmp	#LR__0231
0576c                 | LR__0228
0576c                 | ' 
0576c                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
0576c     1C 3D 02 FD | 	qmul	_var07, _var05
05770     18 4A 62 FD | 	getqx	_var14
05774     06 4A C6 F0 | 	sar	_var14, #6
05778     18 4D 02 F6 | 	mov	_var15, _var01
0577c     02 4C 66 F0 | 	shl	_var15, #2
05780     0F 0F 06 F1 | 	add	objptr, #271
05784     07 4D 02 F1 | 	add	_var15, objptr
05788     26 4B 62 FC | 	wrlong	_var14, _var15
0578c     0F 0F 86 F1 | 	sub	objptr, #271
05790     8C 00 90 FD | 	jmp	#LR__0231
05794                 | LR__0229
05794                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05794     18 4D 02 F6 | 	mov	_var15, _var01
05798     8B 0F 06 F1 | 	add	objptr, #395
0579c     07 4D 02 F1 | 	add	_var15, objptr
057a0     26 4F C2 FA | 	rdbyte	_var16, _var15
057a4     03 4E 66 F0 | 	shl	_var16, #3
057a8     27 3D 02 FD | 	qmul	_var07, _var16
057ac     18 4A 62 FD | 	getqx	_var14
057b0     00 4B 86 F1 | 	sub	_var14, #256
057b4     06 4A C6 F0 | 	sar	_var14, #6
057b8     18 51 02 F6 | 	mov	_var17, _var01
057bc     02 50 66 F0 | 	shl	_var17, #2
057c0     7C 0E 86 F1 | 	sub	objptr, #124
057c4     07 51 02 F1 | 	add	_var17, objptr
057c8     28 4B 62 FC | 	wrlong	_var14, _var17
057cc     0F 0F 86 F1 | 	sub	objptr, #271
057d0     4C 00 90 FD | 	jmp	#LR__0231
057d4                 | LR__0230
057d4                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
057d4     18 4D 02 F6 | 	mov	_var15, _var01
057d8     8B 0F 06 F1 | 	add	objptr, #395
057dc     07 53 02 F6 | 	mov	_var18, objptr
057e0     07 4D 02 F1 | 	add	_var15, objptr
057e4     26 4F C2 FA | 	rdbyte	_var16, _var15
057e8     20 4E 06 F5 | 	and	_var16, #32
057ec     04 4E 66 F0 | 	shl	_var16, #4
057f0     27 3D 02 FD | 	qmul	_var07, _var16
057f4     18 54 62 FD | 	getqx	_var19
057f8     2A 4B 02 F6 | 	mov	_var14, _var19
057fc     00 4B 86 F1 | 	sub	_var14, #256
05800     06 4A C6 F0 | 	sar	_var14, #6
05804     18 51 02 F6 | 	mov	_var17, _var01
05808     02 50 66 F0 | 	shl	_var17, #2
0580c     7C 0E 86 F1 | 	sub	objptr, #124
05810     07 57 02 F6 | 	mov	_var20, objptr
05814     07 51 02 F1 | 	add	_var17, objptr
05818     28 4B 62 FC | 	wrlong	_var14, _var17
0581c     0F 0F 86 F1 | 	sub	objptr, #271
05820                 | LR__0231
05820     8B 0F 06 F1 | 	add	objptr, #395
05824     07 31 02 F1 | 	add	_var01, objptr
05828     18 59 C2 FA | 	rdbyte	_var21, _var01
0582c     20 59 02 F1 | 	add	_var21, _var09
05830     3F 58 06 F5 | 	and	_var21, #63
05834                 | ' 
05834                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05834     18 59 42 FC | 	wrbyte	_var21, _var01
05838     8B 0F 86 F1 | 	sub	objptr, #395
0583c                 | _trackerplayer_spin2_doTremolo_ret
0583c     2D 00 64 FD | 	ret
05840                 | 
05840                 | ' 
05840                 | ' 
05840                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05840                 | _trackerplayer_spin2_doVibrato
05840     2E 31 02 F6 | 	mov	_var01, arg01
05844     18 33 02 F6 | 	mov	_var02, _var01
05848     87 0F 06 F1 | 	add	objptr, #391
0584c     07 33 02 F1 | 	add	_var02, objptr
05850     05 00 00 FF 
05854     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05858     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
0585c     19 37 C2 FA | 	rdbyte	_var04, _var02
05860     02 36 66 F0 | 	shl	_var04, #2
05864     1A 37 02 F1 | 	add	_var04, _var03
05868                 | ' 
05868                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05868     1B 39 02 FB | 	rdlong	_var05, _var04
0586c     18 3B 02 F6 | 	mov	_var06, _var01
05870     45 0E 06 F1 | 	add	objptr, #69
05874     07 3B 02 F1 | 	add	_var06, objptr
05878                 | '   depth    := cmd4_memoryY[channel]
05878     1D 3D C2 FA | 	rdbyte	_var07, _var06
0587c     18 3F 02 F6 | 	mov	_var08, _var01
05880     04 0E 06 F1 | 	add	objptr, #4
05884     07 3F 02 F1 | 	add	_var08, objptr
05888                 | '   speed    := cmd4_memoryX[channel]
05888     1F 41 C2 FA | 	rdbyte	_var09, _var08
0588c                 | ' 
0588c                 | '   CASE_FAST vibratoType[channel]
0588c     18 43 02 F6 | 	mov	_var10, _var01
05890     10 0E 86 F1 | 	sub	objptr, #16
05894     07 45 02 F6 | 	mov	_var11, objptr
05898     07 43 02 F1 | 	add	_var10, objptr
0589c     21 47 C2 FA | 	rdbyte	_var12, _var10
058a0     03 46 26 F3 | 	fle	_var12, #3
058a4     23 49 02 F6 | 	mov	_var13, _var12
058a8     05 00 00 FF 
058ac     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
058b0     C0 0F 86 F1 | 	sub	objptr, #448
058b4     30 48 62 FD | 	jmprel	_var13
058b8                 | LR__0232
058b8     0C 00 90 FD | 	jmp	#LR__0233
058bc     30 00 90 FD | 	jmp	#LR__0234
058c0     6C 00 90 FD | 	jmp	#LR__0235
058c4     B4 00 90 FD | 	jmp	#LR__0236
058c8                 | LR__0233
058c8                 | ' 
058c8                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
058c8     1C 3D 02 FD | 	qmul	_var07, _var05
058cc     18 4A 62 FD | 	getqx	_var14
058d0     07 4A C6 F0 | 	sar	_var14, #7
058d4     18 4D 02 F6 | 	mov	_var15, _var01
058d8     02 4C 66 F0 | 	shl	_var15, #2
058dc     EF 0E 06 F1 | 	add	objptr, #239
058e0     07 4D 02 F1 | 	add	_var15, objptr
058e4     26 4B 62 FC | 	wrlong	_var14, _var15
058e8     EF 0E 86 F1 | 	sub	objptr, #239
058ec     8C 00 90 FD | 	jmp	#LR__0236
058f0                 | LR__0234
058f0                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
058f0     18 4D 02 F6 | 	mov	_var15, _var01
058f4     87 0F 06 F1 | 	add	objptr, #391
058f8     07 4D 02 F1 | 	add	_var15, objptr
058fc     26 4F C2 FA | 	rdbyte	_var16, _var15
05900     03 4E 66 F0 | 	shl	_var16, #3
05904     27 3D 02 FD | 	qmul	_var07, _var16
05908     18 4A 62 FD | 	getqx	_var14
0590c     00 4B 86 F1 | 	sub	_var14, #256
05910     07 4A C6 F0 | 	sar	_var14, #7
05914     18 51 02 F6 | 	mov	_var17, _var01
05918     02 50 66 F0 | 	shl	_var17, #2
0591c     98 0E 86 F1 | 	sub	objptr, #152
05920     07 51 02 F1 | 	add	_var17, objptr
05924     28 4B 62 FC | 	wrlong	_var14, _var17
05928     EF 0E 86 F1 | 	sub	objptr, #239
0592c     4C 00 90 FD | 	jmp	#LR__0236
05930                 | LR__0235
05930                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05930     18 4D 02 F6 | 	mov	_var15, _var01
05934     87 0F 06 F1 | 	add	objptr, #391
05938     07 53 02 F6 | 	mov	_var18, objptr
0593c     07 4D 02 F1 | 	add	_var15, objptr
05940     26 4F C2 FA | 	rdbyte	_var16, _var15
05944     20 4E 06 F5 | 	and	_var16, #32
05948     04 4E 66 F0 | 	shl	_var16, #4
0594c     27 3D 02 FD | 	qmul	_var07, _var16
05950     18 54 62 FD | 	getqx	_var19
05954     2A 4B 02 F6 | 	mov	_var14, _var19
05958     00 4B 86 F1 | 	sub	_var14, #256
0595c     07 4A C6 F0 | 	sar	_var14, #7
05960     18 51 02 F6 | 	mov	_var17, _var01
05964     02 50 66 F0 | 	shl	_var17, #2
05968     98 0E 86 F1 | 	sub	objptr, #152
0596c     07 57 02 F6 | 	mov	_var20, objptr
05970     07 51 02 F1 | 	add	_var17, objptr
05974     28 4B 62 FC | 	wrlong	_var14, _var17
05978     EF 0E 86 F1 | 	sub	objptr, #239
0597c                 | LR__0236
0597c     87 0F 06 F1 | 	add	objptr, #391
05980     07 31 02 F1 | 	add	_var01, objptr
05984     18 59 C2 FA | 	rdbyte	_var21, _var01
05988     20 59 02 F1 | 	add	_var21, _var09
0598c     3F 58 06 F5 | 	and	_var21, #63
05990                 | ' 
05990                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05990     18 59 42 FC | 	wrbyte	_var21, _var01
05994     87 0F 86 F1 | 	sub	objptr, #391
05998                 | _trackerplayer_spin2_doVibrato_ret
05998     2D 00 64 FD | 	ret
0599c                 | 
0599c                 | ' 
0599c                 | ' 
0599c                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
0599c                 | _trackerplayer_spin2_doPortamento
0599c                 | ' 
0599c                 | '   if period == currPeriod[channel]
0599c     2E 31 02 F6 | 	mov	_var01, arg01
059a0     02 30 66 F0 | 	shl	_var01, #2
059a4     DF 0E 06 F1 | 	add	objptr, #223
059a8     07 33 02 F6 | 	mov	_var02, objptr
059ac     07 31 02 F1 | 	add	_var01, objptr
059b0     18 35 02 FB | 	rdlong	_var03, _var01
059b4     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
059b8                 | '     return
059b8     DF 0E 86 F1 | 	sub	objptr, #223
059bc     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
059c0                 | ' 
059c0                 | '   if period > 0
059c0     00 5E 5E F2 | 	cmps	arg02, #0 wcz
059c4     1C 00 90 ED |  if_be	jmp	#LR__0237
059c8     2E 37 02 F6 | 	mov	_var04, arg01
059cc     02 36 66 F0 | 	shl	_var04, #2
059d0     97 0F 06 F1 | 	add	objptr, #407
059d4     07 37 02 F1 | 	add	_var04, objptr
059d8                 | '     portamentoPeriodMemory[channel] := period
059d8     1B 5F 62 FC | 	wrlong	arg02, _var04
059dc                 | '   else
059dc     97 0F 86 F1 | 	sub	objptr, #407
059e0     18 00 90 FD | 	jmp	#LR__0238
059e4                 | LR__0237
059e4     2E 39 02 F6 | 	mov	_var05, arg01
059e8     02 38 66 F0 | 	shl	_var05, #2
059ec     97 0F 06 F1 | 	add	objptr, #407
059f0     07 39 02 F1 | 	add	_var05, objptr
059f4                 | '     period := portamentoPeriodMemory[channel]
059f4     1C 5F 02 FB | 	rdlong	arg02, _var05
059f8     97 0F 86 F1 | 	sub	objptr, #407
059fc                 | LR__0238
059fc                 | ' 
059fc                 | '   if period > currPeriod[channel]
059fc     2E 31 02 F6 | 	mov	_var01, arg01
05a00     02 30 66 F0 | 	shl	_var01, #2
05a04     DF 0E 06 F1 | 	add	objptr, #223
05a08     07 31 02 F1 | 	add	_var01, objptr
05a0c     18 35 02 FB | 	rdlong	_var03, _var01
05a10     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a14     DF 0E 86 F1 | 	sub	objptr, #223
05a18     50 00 90 ED |  if_be	jmp	#LR__0239
05a1c     2E 3B 02 F6 | 	mov	_var06, arg01
05a20     02 3A 66 F0 | 	shl	_var06, #2
05a24     DF 0E 06 F1 | 	add	objptr, #223
05a28     07 3B 02 F1 | 	add	_var06, objptr
05a2c     2E 3D 02 F6 | 	mov	_var07, arg01
05a30     E9 0E 06 F1 | 	add	objptr, #233
05a34     1D 3F 02 FB | 	rdlong	_var08, _var06
05a38     07 3D 02 F1 | 	add	_var07, objptr
05a3c     1E 33 C2 FA | 	rdbyte	_var02, _var07
05a40     19 3F 02 F1 | 	add	_var08, _var02
05a44                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05a44     1D 3F 62 FC | 	wrlong	_var08, _var06
05a48     2E 41 02 F6 | 	mov	_var09, arg01
05a4c     02 40 66 F0 | 	shl	_var09, #2
05a50     E9 0E 86 F1 | 	sub	objptr, #233
05a54     07 41 02 F1 | 	add	_var09, objptr
05a58     20 43 02 FB | 	rdlong	_var10, _var09
05a5c     2F 43 62 F3 | 	fles	_var10, arg02
05a60                 | '     currPeriod[channel] <#= period
05a60     20 43 62 FC | 	wrlong	_var10, _var09
05a64     DF 0E 86 F1 | 	sub	objptr, #223
05a68     6C 00 90 FD | 	jmp	#LR__0241
05a6c                 | LR__0239
05a6c                 | ' 
05a6c                 | '   elseif period < currPeriod[channel]
05a6c     2E 31 02 F6 | 	mov	_var01, arg01
05a70     02 30 66 F0 | 	shl	_var01, #2
05a74     DF 0E 06 F1 | 	add	objptr, #223
05a78     07 31 02 F1 | 	add	_var01, objptr
05a7c     18 35 02 FB | 	rdlong	_var03, _var01
05a80     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a84     DF 0E 86 F1 | 	sub	objptr, #223
05a88     4C 00 90 3D |  if_ae	jmp	#LR__0240
05a8c     2E 45 02 F6 | 	mov	_var11, arg01
05a90     02 44 66 F0 | 	shl	_var11, #2
05a94     DF 0E 06 F1 | 	add	objptr, #223
05a98     07 45 02 F1 | 	add	_var11, objptr
05a9c     2E 47 02 F6 | 	mov	_var12, arg01
05aa0     E9 0E 06 F1 | 	add	objptr, #233
05aa4     22 49 02 FB | 	rdlong	_var13, _var11
05aa8     07 47 02 F1 | 	add	_var12, objptr
05aac     23 33 C2 FA | 	rdbyte	_var02, _var12
05ab0     19 49 82 F1 | 	sub	_var13, _var02
05ab4                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05ab4     22 49 62 FC | 	wrlong	_var13, _var11
05ab8     2E 4B 02 F6 | 	mov	_var14, arg01
05abc     02 4A 66 F0 | 	shl	_var14, #2
05ac0     E9 0E 86 F1 | 	sub	objptr, #233
05ac4     07 4B 02 F1 | 	add	_var14, objptr
05ac8     25 4D 02 FB | 	rdlong	_var15, _var14
05acc     2F 4D 42 F3 | 	fges	_var15, arg02
05ad0                 | '     currPeriod[channel] #>= period
05ad0     25 4D 62 FC | 	wrlong	_var15, _var14
05ad4     DF 0E 86 F1 | 	sub	objptr, #223
05ad8                 | LR__0240
05ad8                 | LR__0241
05ad8                 | ' 
05ad8                 | '   ' Handle glissando if activated
05ad8                 | '   if portaGlissando[channel] > 0
05ad8     2E 31 02 F6 | 	mov	_var01, arg01
05adc     BC 0F 06 F1 | 	add	objptr, #444
05ae0     07 31 02 F1 | 	add	_var01, objptr
05ae4     18 35 C2 FA | 	rdbyte	_var03, _var01
05ae8     00 34 5E F2 | 	cmps	_var03, #0 wcz
05aec     BC 0F 86 F1 | 	sub	objptr, #444
05af0     A0 00 90 ED |  if_be	jmp	#LR__0244
05af4     2E 4F 02 F6 | 	mov	_var16, arg01
05af8     02 4E 66 F0 | 	shl	_var16, #2
05afc     DF 0E 06 F1 | 	add	objptr, #223
05b00     07 4F 02 F1 | 	add	_var16, objptr
05b04                 | ' 
05b04                 | '     tempPeriod := currPeriod[channel]
05b04     27 51 02 FB | 	rdlong	_var17, _var16
05b08                 | ' 
05b08                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05b08     00 52 06 F6 | 	mov	_var18, #0
05b0c     DF 0E 86 F1 | 	sub	objptr, #223
05b10     50 A5 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
05b14     93 00 A0 FD | 	call	#FCACHE_LOAD_
05b18                 | LR__0242
05b18     06 00 00 FF 
05b1c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05b20     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05b24     2E 55 02 F6 | 	mov	_var19, arg01
05b28     D3 0E 06 F1 | 	add	objptr, #211
05b2c     07 55 02 F1 | 	add	_var19, objptr
05b30     2A 33 C2 FA | 	rdbyte	_var02, _var19
05b34     19 57 02 F6 | 	mov	_var20, _var02
05b38     03 56 66 F0 | 	shl	_var20, #3
05b3c     19 57 02 F1 | 	add	_var20, _var02
05b40     03 56 66 F0 | 	shl	_var20, #3
05b44     2B 35 02 F1 | 	add	_var03, _var20
05b48     29 59 02 F6 | 	mov	_var21, _var18
05b4c     01 58 66 F0 | 	shl	_var21, #1
05b50     1A 59 02 F1 | 	add	_var21, _var03
05b54                 | ' 
05b54                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05b54     2C 5B E2 FA | 	rdword	_var22, _var21
05b58                 | '       if tempPeriod >= periodStep
05b58     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05b5c                 | '         i += 1000
05b5c     06 00 00 FF 
05b60     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05b64     D3 0E 86 F1 | 	sub	objptr, #211
05b68     01 00 00 3F 
05b6c     E8 53 06 31 |  if_ae	add	_var18, ##1000
05b70     01 52 06 F1 | 	add	_var18, #1
05b74     24 52 5E F2 | 	cmps	_var18, #36 wcz
05b78     9C FF 9F CD |  if_b	jmp	#LR__0242
05b7c                 | LR__0243
05b7c     28 5B 82 F1 | 	sub	_var22, _var17
05b80     02 5C 66 F0 | 	shl	arg01, #2
05b84     EF 0E 06 F1 | 	add	objptr, #239
05b88     07 5D 02 F1 | 	add	arg01, objptr
05b8c                 | ' 
05b8c                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05b8c     2E 5B 62 FC | 	wrlong	_var22, arg01
05b90     EF 0E 86 F1 | 	sub	objptr, #239
05b94                 | LR__0244
05b94                 | _trackerplayer_spin2_doPortamento_ret
05b94     2D 00 64 FD | 	ret
05b98                 | 
05b98                 | ' 
05b98                 | ' 
05b98                 | ' PRI doVolumeSlide(channel)
05b98                 | _trackerplayer_spin2_doVolumeSlide
05b98                 | ' 
05b98                 | '   if x > 0
05b98     B7 0F 06 F1 | 	add	objptr, #439
05b9c     07 31 C2 FA | 	rdbyte	_var01, objptr
05ba0     B7 0F 86 F1 | 	sub	objptr, #439
05ba4     00 30 5E F2 | 	cmps	_var01, #0 wcz
05ba8     28 00 90 ED |  if_be	jmp	#LR__0245
05bac     2E 33 02 F6 | 	mov	_var02, arg01
05bb0     02 32 66 F0 | 	shl	_var02, #2
05bb4     FF 0E 06 F1 | 	add	objptr, #255
05bb8     07 33 02 F1 | 	add	_var02, objptr
05bbc     19 35 02 FB | 	rdlong	_var03, _var02
05bc0     B8 0E 06 F1 | 	add	objptr, #184
05bc4     07 37 C2 FA | 	rdbyte	_var04, objptr
05bc8     B7 0F 86 F1 | 	sub	objptr, #439
05bcc     1B 35 02 F1 | 	add	_var03, _var04
05bd0                 | '     currVolume[channel] += x
05bd0     19 35 62 FC | 	wrlong	_var03, _var02
05bd4                 | LR__0245
05bd4                 | '   if y > 0
05bd4     B8 0F 06 F1 | 	add	objptr, #440
05bd8     07 31 C2 FA | 	rdbyte	_var01, objptr
05bdc     B8 0F 86 F1 | 	sub	objptr, #440
05be0     00 30 5E F2 | 	cmps	_var01, #0 wcz
05be4     24 00 90 ED |  if_be	jmp	#LR__0246
05be8     02 5C 66 F0 | 	shl	arg01, #2
05bec     FF 0E 06 F1 | 	add	objptr, #255
05bf0     07 5D 02 F1 | 	add	arg01, objptr
05bf4     2E 39 02 FB | 	rdlong	_var05, arg01
05bf8     B9 0E 06 F1 | 	add	objptr, #185
05bfc     07 37 C2 FA | 	rdbyte	_var04, objptr
05c00     B8 0F 86 F1 | 	sub	objptr, #440
05c04     1B 39 82 F1 | 	sub	_var05, _var04
05c08                 | '     currVolume[channel] -= y
05c08     2E 39 62 FC | 	wrlong	_var05, arg01
05c0c                 | LR__0246
05c0c                 | _trackerplayer_spin2_doVolumeSlide_ret
05c0c     2D 00 64 FD | 	ret
05c10                 | hubexit
05c10     81 00 80 FD | 	jmp	#cogexit
05c14                 | 
05c14                 | __system___setbaud
05c14     14 0A 07 FB | 	rdlong	muldiva_, #20
05c18     2E 0D 03 F6 | 	mov	muldivb_, arg01
05c1c     D0 00 A0 FD | 	call	#divide_
05c20     40 7C 64 FD | 	dirl	#62
05c24     40 7E 64 FD | 	dirl	#63
05c28     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05c2c     10 0C 67 F0 | 	shl	muldivb_, #16
05c30     07 5E 06 F6 | 	mov	arg02, #7
05c34     86 5F 02 F1 | 	add	arg02, muldivb_
05c38     3E F8 0C FC | 	wrpin	#124, #62
05c3c     3E 5E 16 FC | 	wxpin	arg02, #62
05c40     3F 7C 0C FC | 	wrpin	#62, #63
05c44     14 5E 06 F1 | 	add	arg02, #20
05c48     3F 5E 16 FC | 	wxpin	arg02, #63
05c4c     41 7C 64 FD | 	dirh	#62
05c50     41 7E 64 FD | 	dirh	#63
05c54                 | __system___setbaud_ret
05c54     2D 00 64 FD | 	ret
05c58                 | 
05c58                 | __system___txraw
05c58     02 5A 05 F6 | 	mov	COUNT_, #2
05c5c     B0 00 A0 FD | 	call	#pushregs_
05c60     2E 6B 02 F6 | 	mov	local01, arg01
05c64     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c68     0C 00 90 5D |  if_ne	jmp	#LR__0247
05c6c     08 07 00 FF 
05c70     00 5C 06 F6 | 	mov	arg01, ##921600
05c74     9C FF BF FD | 	call	#__system___setbaud
05c78                 | LR__0247
05c78     3E 6A 26 FC | 	wypin	local01, #62
05c7c     1F 02 64 FD | 	waitx	#1
05c80     84 A3 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
05c84     93 00 A0 FD | 	call	#FCACHE_LOAD_
05c88                 | LR__0248
05c88     40 7C 74 FD | 	testp	#62 wc
05c8c     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
05c90                 | LR__0249
05c90     01 2A 06 F6 | 	mov	result1, #1
05c94     AF F0 03 F6 | 	mov	ptra, fp
05c98     BF 00 A0 FD | 	call	#popregs_
05c9c                 | __system___txraw_ret
05c9c     2D 00 64 FD | 	ret
05ca0                 | 
05ca0                 | __system___rxraw
05ca0     0D 5A 05 F6 | 	mov	COUNT_, #13
05ca4     B0 00 A0 FD | 	call	#pushregs_
05ca8     2E 6B 02 F6 | 	mov	local01, arg01
05cac     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05cb0     0C 00 90 5D |  if_ne	jmp	#LR__0250
05cb4     08 07 00 FF 
05cb8     00 5C 06 F6 | 	mov	arg01, ##921600
05cbc     54 FF BF FD | 	call	#__system___setbaud
05cc0                 | LR__0250
05cc0     00 6A 0E F2 | 	cmp	local01, #0 wz
05cc4     18 00 90 AD |  if_e	jmp	#LR__0251
05cc8     14 6E 06 FB | 	rdlong	local03, #20
05ccc     0A 6E 46 F0 | 	shr	local03, #10
05cd0     37 6B 02 FD | 	qmul	local01, local03
05cd4     18 70 62 FD | 	getqx	local04
05cd8     1A 72 62 FD | 	getct	local05
05cdc     38 73 02 F1 | 	add	local05, local04
05ce0                 | LR__0251
05ce0     01 74 66 F6 | 	neg	local06, #1
05ce4     00 76 06 F6 | 	mov	local07, #0
05ce8     04 14 06 F1 | 	add	ptr___system__dat__, #4
05cec     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05cf0     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05cf4                 | LR__0252
05cf4     08 78 16 F4 | 	testb	local08, #8 wc
05cf8     09 78 76 F4 | 	testbn	local08, #9 andc
05cfc     0A 78 46 F0 | 	shr	local08, #10
05d00     01 76 06 C6 |  if_b	mov	local07, #1
05d04     10 00 90 CD |  if_b	jmp	#LR__0253
05d08     40 7E 6C FD | 	testp	#63 wz
05d0c     01 76 06 A6 |  if_e	mov	local07, #1
05d10     3F 78 8E AA |  if_e	rdpin	local08, #63
05d14     04 78 46 A0 |  if_e	shr	local08, #4
05d18                 | LR__0253
05d18     00 6C 06 F6 | 	mov	local02, #0
05d1c     00 76 0E F2 | 	cmp	local07, #0 wz
05d20     01 6C 66 56 |  if_ne	neg	local02, #1
05d24     00 7A 06 F6 | 	mov	local09, #0
05d28     00 7C 06 F6 | 	mov	local10, #0
05d2c     00 6A 0E F2 | 	cmp	local01, #0 wz
05d30     01 7C 66 56 |  if_ne	neg	local10, #1
05d34     00 7E 06 F6 | 	mov	local11, #0
05d38     00 80 06 F6 | 	mov	local12, #0
05d3c     1A 82 62 FD | 	getct	local13
05d40     39 83 82 F1 | 	sub	local13, local05
05d44     00 82 5E F2 | 	cmps	local13, #0 wcz
05d48     01 80 66 C6 |  if_b	neg	local12, #1
05d4c     00 80 0E F2 | 	cmp	local12, #0 wz
05d50     01 7E 66 56 |  if_ne	neg	local11, #1
05d54     3F 7D CA F7 | 	test	local10, local11 wz
05d58     01 7A 66 56 |  if_ne	neg	local09, #1
05d5c     3D 6D 4A F5 | 	or	local02, local09 wz
05d60     90 FF 9F AD |  if_e	jmp	#LR__0252
05d64     00 76 0E F2 | 	cmp	local07, #0 wz
05d68     3C 75 02 56 |  if_ne	mov	local06, local08
05d6c     FF 74 06 55 |  if_ne	and	local06, #255
05d70     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d74     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05d78     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d7c     3A 2B 02 F6 | 	mov	result1, local06
05d80     AF F0 03 F6 | 	mov	ptra, fp
05d84     BF 00 A0 FD | 	call	#popregs_
05d88                 | __system___rxraw_ret
05d88     2D 00 64 FD | 	ret
05d8c                 | 
05d8c                 | __system____builtin_memmove
05d8c     2E 31 02 F6 | 	mov	_var01, arg01
05d90     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05d94     50 00 90 3D |  if_ae	jmp	#LR__0261
05d98     84 A2 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
05d9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05da0                 | LR__0254
05da0     03 60 5E F2 | 	cmps	arg03, #3 wcz
05da4     18 00 90 ED |  if_be	jmp	#LR__0256
05da8     2F 33 02 FB | 	rdlong	_var02, arg02
05dac     2E 33 62 FC | 	wrlong	_var02, arg01
05db0     04 5C 06 F1 | 	add	arg01, #4
05db4     04 5E 06 F1 | 	add	arg02, #4
05db8     04 60 86 F1 | 	sub	arg03, #4
05dbc     E0 FF 9F FD | 	jmp	#LR__0254
05dc0                 | LR__0255
05dc0                 | LR__0256
05dc0     30 35 0A F6 | 	mov	_var03, arg03 wz
05dc4     4C 00 90 AD |  if_e	jmp	#LR__0267
05dc8     48 A2 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
05dcc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05dd0                 | LR__0257
05dd0     1A 09 D8 FC | 	rep	@LR__0260, _var03
05dd4                 | LR__0258
05dd4     2F 33 C2 FA | 	rdbyte	_var02, arg02
05dd8     2E 33 42 FC | 	wrbyte	_var02, arg01
05ddc     01 5C 06 F1 | 	add	arg01, #1
05de0     01 5E 06 F1 | 	add	arg02, #1
05de4                 | LR__0259
05de4                 | LR__0260
05de4     2C 00 90 FD | 	jmp	#LR__0267
05de8                 | LR__0261
05de8     30 5D 02 F1 | 	add	arg01, arg03
05dec     30 5F 02 F1 | 	add	arg02, arg03
05df0     30 37 0A F6 | 	mov	_var04, arg03 wz
05df4     1C 00 90 AD |  if_e	jmp	#LR__0266
05df8     18 A2 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05dfc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e00                 | LR__0262
05e00     1B 09 D8 FC | 	rep	@LR__0265, _var04
05e04                 | LR__0263
05e04     01 5C 86 F1 | 	sub	arg01, #1
05e08     01 5E 86 F1 | 	sub	arg02, #1
05e0c     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e10     2E 33 42 FC | 	wrbyte	_var02, arg01
05e14                 | LR__0264
05e14                 | LR__0265
05e14                 | LR__0266
05e14                 | LR__0267
05e14     18 2B 02 F6 | 	mov	result1, _var01
05e18                 | __system____builtin_memmove_ret
05e18     2D 00 64 FD | 	ret
05e1c                 | 
05e1c                 | __system__longmove
05e1c     2E 31 02 F6 | 	mov	_var01, arg01
05e20     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e24     28 00 90 3D |  if_ae	jmp	#LR__0272
05e28     30 33 0A F6 | 	mov	_var02, arg03 wz
05e2c     54 00 90 AD |  if_e	jmp	#LR__0278
05e30     E0 A1 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
05e34     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e38                 | LR__0268
05e38     19 09 D8 FC | 	rep	@LR__0271, _var02
05e3c                 | LR__0269
05e3c     2F 35 02 FB | 	rdlong	_var03, arg02
05e40     2E 35 62 FC | 	wrlong	_var03, arg01
05e44     04 5C 06 F1 | 	add	arg01, #4
05e48     04 5E 06 F1 | 	add	arg02, #4
05e4c                 | LR__0270
05e4c                 | LR__0271
05e4c     34 00 90 FD | 	jmp	#LR__0278
05e50                 | LR__0272
05e50     30 37 02 F6 | 	mov	_var04, arg03
05e54     02 36 66 F0 | 	shl	_var04, #2
05e58     1B 5D 02 F1 | 	add	arg01, _var04
05e5c     1B 5F 02 F1 | 	add	arg02, _var04
05e60     30 39 0A F6 | 	mov	_var05, arg03 wz
05e64     1C 00 90 AD |  if_e	jmp	#LR__0277
05e68     A8 A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05e6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e70                 | LR__0273
05e70     1C 09 D8 FC | 	rep	@LR__0276, _var05
05e74                 | LR__0274
05e74     04 5C 86 F1 | 	sub	arg01, #4
05e78     04 5E 86 F1 | 	sub	arg02, #4
05e7c     2F 35 02 FB | 	rdlong	_var03, arg02
05e80     2E 35 62 FC | 	wrlong	_var03, arg01
05e84                 | LR__0275
05e84                 | LR__0276
05e84                 | LR__0277
05e84                 | LR__0278
05e84     18 2B 02 F6 | 	mov	result1, _var01
05e88                 | __system__longmove_ret
05e88     2D 00 64 FD | 	ret
05e8c                 | 
05e8c                 | __system____topofstack
05e8c     00 5A 05 F6 | 	mov	COUNT_, #0
05e90     B0 00 A0 FD | 	call	#pushregs_
05e94     0C F0 07 F1 | 	add	ptra, #12
05e98     04 5E 05 F1 | 	add	fp, #4
05e9c     AF 5C 62 FC | 	wrlong	arg01, fp
05ea0     AF 2A 02 F6 | 	mov	result1, fp
05ea4     04 5E 85 F1 | 	sub	fp, #4
05ea8     AF F0 03 F6 | 	mov	ptra, fp
05eac     BF 00 A0 FD | 	call	#popregs_
05eb0                 | __system____topofstack_ret
05eb0     2D 00 64 FD | 	ret
05eb4                 | 
05eb4                 | __system___make_methodptr
05eb4     04 5A 05 F6 | 	mov	COUNT_, #4
05eb8     B0 00 A0 FD | 	call	#pushregs_
05ebc     2E 6B 02 F6 | 	mov	local01, arg01
05ec0     2F 6D 02 F6 | 	mov	local02, arg02
05ec4     08 5C 06 F6 | 	mov	arg01, #8
05ec8     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05ecc     15 6F 0A F6 | 	mov	local03, result1 wz
05ed0     10 00 90 AD |  if_e	jmp	#LR__0279
05ed4     37 6B 62 FC | 	wrlong	local01, local03
05ed8     37 71 02 F6 | 	mov	local04, local03
05edc     04 70 06 F1 | 	add	local04, #4
05ee0     38 6D 62 FC | 	wrlong	local02, local04
05ee4                 | LR__0279
05ee4     37 2B 02 F6 | 	mov	result1, local03
05ee8     AF F0 03 F6 | 	mov	ptra, fp
05eec     BF 00 A0 FD | 	call	#popregs_
05ef0                 | __system___make_methodptr_ret
05ef0     2D 00 64 FD | 	ret
05ef4                 | 
05ef4                 | __system___lockmem
05ef4     02 5A 05 F6 | 	mov	COUNT_, #2
05ef8     B0 00 A0 FD | 	call	#pushregs_
05efc     01 2A 62 FD | 	cogid	result1
05f00     15 6B 02 F6 | 	mov	local01, result1
05f04     00 6B 06 F1 | 	add	local01, #256
05f08                 | LR__0280
05f08     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05f0c     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05f10     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f14     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f18     35 6D 0A F2 | 	cmp	local02, local01 wz
05f1c     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
05f20     AF F0 03 F6 | 	mov	ptra, fp
05f24     BF 00 A0 FD | 	call	#popregs_
05f28                 | __system___lockmem_ret
05f28     2D 00 64 FD | 	ret
05f2c                 | 
05f2c                 | __system___string_concat
05f2c     07 5A 05 F6 | 	mov	COUNT_, #7
05f30     B0 00 A0 FD | 	call	#pushregs_
05f34     2E 6B 02 F6 | 	mov	local01, arg01
05f38     2F 6D 02 F6 | 	mov	local02, arg02
05f3c     35 5D 02 F6 | 	mov	arg01, local01
05f40     00 6E 06 F6 | 	mov	local03, #0
05f44     C8 A0 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
05f48     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f4c                 | LR__0281
05f4c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f50     01 6E 06 51 |  if_ne	add	local03, #1
05f54     01 5C 06 51 |  if_ne	add	arg01, #1
05f58     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
05f5c                 | LR__0282
05f5c     37 73 02 F6 | 	mov	local05, local03
05f60     36 5D 02 F6 | 	mov	arg01, local02
05f64     00 6E 06 F6 | 	mov	local03, #0
05f68     A4 A0 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
05f6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f70                 | LR__0283
05f70     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f74     01 6E 06 51 |  if_ne	add	local03, #1
05f78     01 5C 06 51 |  if_ne	add	arg01, #1
05f7c     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
05f80                 | LR__0284
05f80     37 2B 02 F6 | 	mov	result1, local03
05f84     15 75 02 F6 | 	mov	local06, result1
05f88     39 5D 02 F6 | 	mov	arg01, local05
05f8c     3A 5D 02 F1 | 	add	arg01, local06
05f90     01 5C 06 F1 | 	add	arg01, #1
05f94     90 0B B0 FD | 	call	#__system___gc_alloc_managed
05f98     15 77 0A F6 | 	mov	local07, result1 wz
05f9c     28 00 90 AD |  if_e	jmp	#LR__0285
05fa0     3B 5D 02 F6 | 	mov	arg01, local07
05fa4     35 5F 02 F6 | 	mov	arg02, local01
05fa8     39 61 02 F6 | 	mov	arg03, local05
05fac     DC FD BF FD | 	call	#__system____builtin_memmove
05fb0     3B 5D 02 F6 | 	mov	arg01, local07
05fb4     39 5D 02 F1 | 	add	arg01, local05
05fb8     01 74 06 F1 | 	add	local06, #1
05fbc     36 5F 02 F6 | 	mov	arg02, local02
05fc0     3A 61 02 F6 | 	mov	arg03, local06
05fc4     C4 FD BF FD | 	call	#__system____builtin_memmove
05fc8                 | LR__0285
05fc8     3B 2B 02 F6 | 	mov	result1, local07
05fcc     AF F0 03 F6 | 	mov	ptra, fp
05fd0     BF 00 A0 FD | 	call	#popregs_
05fd4                 | __system___string_concat_ret
05fd4     2D 00 64 FD | 	ret
05fd8                 | 
05fd8                 | __system___tx
05fd8     02 5A 05 F6 | 	mov	COUNT_, #2
05fdc     B0 00 A0 FD | 	call	#pushregs_
05fe0     2E 6B 02 F6 | 	mov	local01, arg01
05fe4     0A 6A 0E F2 | 	cmp	local01, #10 wz
05fe8     20 00 90 5D |  if_ne	jmp	#LR__0286
05fec     08 14 06 F1 | 	add	ptr___system__dat__, #8
05ff0     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
05ff4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05ff8     02 6C CE F7 | 	test	local02, #2 wz
05ffc     0C 00 90 AD |  if_e	jmp	#LR__0286
06000     0D 6C 06 F6 | 	mov	local02, #13
06004     0D 5C 06 F6 | 	mov	arg01, #13
06008     4C FC BF FD | 	call	#__system___txraw
0600c                 | LR__0286
0600c     35 5D 02 F6 | 	mov	arg01, local01
06010     44 FC BF FD | 	call	#__system___txraw
06014     AF F0 03 F6 | 	mov	ptra, fp
06018     BF 00 A0 FD | 	call	#popregs_
0601c                 | __system___tx_ret
0601c     2D 00 64 FD | 	ret
06020                 | 
06020                 | __system___rx
06020     02 5A 05 F6 | 	mov	COUNT_, #2
06024     B0 00 A0 FD | 	call	#pushregs_
06028                 | LR__0287
06028     00 5C 06 F6 | 	mov	arg01, #0
0602c     70 FC BF FD | 	call	#__system___rxraw
06030     15 6B 02 F6 | 	mov	local01, result1
06034     FF FF 7F FF 
06038     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
0603c     E8 FF 9F AD |  if_e	jmp	#LR__0287
06040     0D 6A 0E F2 | 	cmp	local01, #13 wz
06044     14 00 90 5D |  if_ne	jmp	#LR__0288
06048     08 14 06 F1 | 	add	ptr___system__dat__, #8
0604c     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06050     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06054     02 6C CE F7 | 	test	local02, #2 wz
06058     0A 6A 06 56 |  if_ne	mov	local01, #10
0605c                 | LR__0288
0605c     08 14 06 F1 | 	add	ptr___system__dat__, #8
06060     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06064     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06068     01 6C CE F7 | 	test	local02, #1 wz
0606c     1C 00 90 AD |  if_e	jmp	#LR__0291
06070     7F 6A 0E F2 | 	cmp	local01, #127 wz
06074     0C 00 90 5D |  if_ne	jmp	#LR__0289
06078     08 5C 06 F6 | 	mov	arg01, #8
0607c     58 FF BF FD | 	call	#__system___tx
06080     08 00 90 FD | 	jmp	#LR__0290
06084                 | LR__0289
06084     35 5D 02 F6 | 	mov	arg01, local01
06088     4C FF BF FD | 	call	#__system___tx
0608c                 | LR__0290
0608c                 | LR__0291
0608c     35 2B 02 F6 | 	mov	result1, local01
06090     AF F0 03 F6 | 	mov	ptra, fp
06094     BF 00 A0 FD | 	call	#popregs_
06098                 | __system___rx_ret
06098     2D 00 64 FD | 	ret
0609c                 | 
0609c                 | __system___pinread
0609c     20 5C CE F7 | 	test	arg01, #32 wz
060a0     FF 31 02 56 |  if_ne	mov	_var01, inb
060a4     FE 31 02 A6 |  if_e	mov	_var01, ina
060a8     18 2B 02 F6 | 	mov	result1, _var01
060ac     2E 2B 42 F0 | 	shr	result1, arg01
060b0     06 5C 46 F0 | 	shr	arg01, #6
060b4     2E 2B 42 F7 | 	zerox	result1, arg01
060b8                 | __system___pinread_ret
060b8     2D 00 64 FD | 	ret
060bc                 | 
060bc                 | __system___waitms
060bc     03 5A 05 F6 | 	mov	COUNT_, #3
060c0     B0 00 A0 FD | 	call	#pushregs_
060c4     2E 6B 02 F6 | 	mov	local01, arg01
060c8     14 6C 06 FB | 	rdlong	local02, #20
060cc     48 9F 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
060d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
060d4                 | LR__0292
060d4     01 00 00 FF 
060d8     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
060dc     1F 6C 62 1D |  if_a	waitx	local02
060e0     01 00 00 1F 
060e4     E8 6B 86 11 |  if_a	sub	local01, ##1000
060e8     E8 FF 9F 1D |  if_a	jmp	#LR__0292
060ec                 | LR__0293
060ec     0C 14 06 F1 | 	add	ptr___system__dat__, #12
060f0     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
060f4     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
060f8     20 00 90 5D |  if_ne	jmp	#LR__0294
060fc     36 0B 03 F6 | 	mov	muldiva_, local02
06100     01 00 00 FF 
06104     E8 0D 07 F6 | 	mov	muldivb_, ##1000
06108     CC 00 A0 FD | 	call	#unsdivide_
0610c     86 6F 02 F6 | 	mov	local03, muldivb_
06110     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06114     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06118     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
0611c                 | LR__0294
0611c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06120     37 6B 02 1D |  if_a	qmul	local01, local03
06124     18 5C 62 1D |  if_a	getqx	arg01
06128     1F 5C 62 1D |  if_a	waitx	arg01
0612c     AF F0 03 F6 | 	mov	ptra, fp
06130     BF 00 A0 FD | 	call	#popregs_
06134                 | __system___waitms_ret
06134     2D 00 64 FD | 	ret
06138                 | 
06138                 | __system___waitus
06138     02 5A 05 F6 | 	mov	COUNT_, #2
0613c     B0 00 A0 FD | 	call	#pushregs_
06140     2E 6B 02 F6 | 	mov	local01, arg01
06144     10 14 06 F1 | 	add	ptr___system__dat__, #16
06148     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0614c     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06150     20 00 90 5D |  if_ne	jmp	#LR__0295
06154     14 0A 07 FB | 	rdlong	muldiva_, #20
06158     A1 07 00 FF 
0615c     40 0C 07 F6 | 	mov	muldivb_, ##1000000
06160     CC 00 A0 FD | 	call	#unsdivide_
06164     86 6D 02 F6 | 	mov	local02, muldivb_
06168     10 14 06 F1 | 	add	ptr___system__dat__, #16
0616c     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
06170     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06174                 | LR__0295
06174     36 6B 02 FD | 	qmul	local01, local02
06178     18 5C 62 FD | 	getqx	arg01
0617c     1F 5C 62 FD | 	waitx	arg01
06180     AF F0 03 F6 | 	mov	ptra, fp
06184     BF 00 A0 FD | 	call	#popregs_
06188                 | __system___waitus_ret
06188     2D 00 64 FD | 	ret
0618c                 | 
0618c                 | __system___basic_open
0618c     05 5A 05 F6 | 	mov	COUNT_, #5
06190     B0 00 A0 FD | 	call	#pushregs_
06194     2F 6B 02 F6 | 	mov	local01, arg02
06198     30 6D 02 F6 | 	mov	local02, arg03
0619c     31 6F 02 F6 | 	mov	local03, arg04
061a0     88 11 B0 FD | 	call	#__system____getftab
061a4     15 71 0A F6 | 	mov	local04, result1 wz
061a8     18 00 90 5D |  if_ne	jmp	#LR__0296
061ac     03 5D 02 F6 | 	mov	arg01, abortchain
061b0     0C 5E 06 F6 | 	mov	arg02, #12
061b4     01 60 06 F6 | 	mov	arg03, #1
061b8     F0 00 A0 FD | 	call	#__longjmp
061bc     01 2A 66 F6 | 	neg	result1, #1
061c0     70 00 90 FD | 	jmp	#LR__0300
061c4                 | LR__0296
061c4     00 6A 0E F2 | 	cmp	local01, #0 wz
061c8     48 00 90 AD |  if_e	jmp	#LR__0298
061cc     04 5C 06 F6 | 	mov	arg01, #4
061d0     54 09 B0 FD | 	call	#__system___gc_alloc_managed
061d4     15 73 0A F6 | 	mov	local05, result1 wz
061d8     18 00 90 5D |  if_ne	jmp	#LR__0297
061dc     03 5D 02 F6 | 	mov	arg01, abortchain
061e0     07 5E 06 F6 | 	mov	arg02, #7
061e4     01 60 06 F6 | 	mov	arg03, #1
061e8     F0 00 A0 FD | 	call	#__longjmp
061ec     01 2A 66 F6 | 	neg	result1, #1
061f0     40 00 90 FD | 	jmp	#LR__0300
061f4                 | LR__0297
061f4     39 6B 62 FC | 	wrlong	local01, local05
061f8     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
061fc     39 5D 02 F6 | 	mov	arg01, local05
06200     B0 FC BF FD | 	call	#__system___make_methodptr
06204     18 70 06 F1 | 	add	local04, #24
06208     38 2B 62 FC | 	wrlong	result1, local04
0620c     18 70 86 F1 | 	sub	local04, #24
06210     0C 00 90 FD | 	jmp	#LR__0299
06214                 | LR__0298
06214     18 70 06 F1 | 	add	local04, #24
06218     38 6B 62 FC | 	wrlong	local01, local04
0621c     18 70 86 F1 | 	sub	local04, #24
06220                 | LR__0299
06220     1C 70 06 F1 | 	add	local04, #28
06224     38 6D 62 FC | 	wrlong	local02, local04
06228     04 70 06 F1 | 	add	local04, #4
0622c     38 6F 62 FC | 	wrlong	local03, local04
06230     00 2A 06 F6 | 	mov	result1, #0
06234                 | LR__0300
06234     AF F0 03 F6 | 	mov	ptra, fp
06238     BF 00 A0 FD | 	call	#popregs_
0623c                 | __system___basic_open_ret
0623c     2D 00 64 FD | 	ret
06240                 | 
06240                 | __system___basic_print_char
06240     05 5A 05 F6 | 	mov	COUNT_, #5
06244     B0 00 A0 FD | 	call	#pushregs_
06248     2F 6B 02 F6 | 	mov	local01, arg02
0624c     A0 12 B0 FD | 	call	#__system___gettxfunc
06250     15 6D 0A F6 | 	mov	local02, result1 wz
06254     00 2A 06 A6 |  if_e	mov	result1, #0
06258     24 00 90 AD |  if_e	jmp	#LR__0301
0625c     36 6F 02 FB | 	rdlong	local03, local02
06260     04 6C 06 F1 | 	add	local02, #4
06264     36 71 02 FB | 	rdlong	local04, local02
06268     35 5D 02 F6 | 	mov	arg01, local01
0626c     07 73 02 F6 | 	mov	local05, objptr
06270     37 0F 02 F6 | 	mov	objptr, local03
06274     2D 70 62 FD | 	call	local04
06278     39 0F 02 F6 | 	mov	objptr, local05
0627c     01 2A 06 F6 | 	mov	result1, #1
06280                 | LR__0301
06280     AF F0 03 F6 | 	mov	ptra, fp
06284     BF 00 A0 FD | 	call	#popregs_
06288                 | __system___basic_print_char_ret
06288     2D 00 64 FD | 	ret
0628c                 | 
0628c                 | __system___basic_print_string
0628c     03 5A 05 F6 | 	mov	COUNT_, #3
06290     B0 00 A0 FD | 	call	#pushregs_
06294     2F 6B 02 F6 | 	mov	local01, arg02
06298     30 6D 02 F6 | 	mov	local02, arg03
0629c     50 12 B0 FD | 	call	#__system___gettxfunc
062a0     15 6F 0A F6 | 	mov	local03, result1 wz
062a4     00 2A 06 A6 |  if_e	mov	result1, #0
062a8     1C 00 90 AD |  if_e	jmp	#LR__0302
062ac     00 6A 0E F2 | 	cmp	local01, #0 wz
062b0     00 2A 06 A6 |  if_e	mov	result1, #0
062b4     10 00 90 AD |  if_e	jmp	#LR__0302
062b8     37 5D 02 F6 | 	mov	arg01, local03
062bc     36 5F 02 F6 | 	mov	arg02, local02
062c0     35 61 02 F6 | 	mov	arg03, local01
062c4     B0 00 B0 FD | 	call	#__system___fmtstr
062c8                 | LR__0302
062c8     AF F0 03 F6 | 	mov	ptra, fp
062cc     BF 00 A0 FD | 	call	#popregs_
062d0                 | __system___basic_print_string_ret
062d0     2D 00 64 FD | 	ret
062d4                 | 
062d4                 | __system___basic_print_integer
062d4     04 5A 05 F6 | 	mov	COUNT_, #4
062d8     B0 00 A0 FD | 	call	#pushregs_
062dc     2F 6B 02 F6 | 	mov	local01, arg02
062e0     30 6D 02 F6 | 	mov	local02, arg03
062e4     31 6F 02 F6 | 	mov	local03, arg04
062e8     04 12 B0 FD | 	call	#__system___gettxfunc
062ec     15 71 0A F6 | 	mov	local04, result1 wz
062f0     00 2A 06 A6 |  if_e	mov	result1, #0
062f4     14 00 90 AD |  if_e	jmp	#LR__0303
062f8     38 5D 02 F6 | 	mov	arg01, local04
062fc     36 5F 02 F6 | 	mov	arg02, local02
06300     35 61 02 F6 | 	mov	arg03, local01
06304     37 63 02 F6 | 	mov	arg04, local03
06308     60 01 B0 FD | 	call	#__system___fmtnum
0630c                 | LR__0303
0630c     AF F0 03 F6 | 	mov	ptra, fp
06310     BF 00 A0 FD | 	call	#popregs_
06314                 | __system___basic_print_integer_ret
06314     2D 00 64 FD | 	ret
06318                 | 
06318                 | __system___fmtchar
06318     00 5A 05 F6 | 	mov	COUNT_, #0
0631c     B0 00 A0 FD | 	call	#pushregs_
06320     18 F0 07 F1 | 	add	ptra, #24
06324     04 5E 05 F1 | 	add	fp, #4
06328     AF 5C 62 FC | 	wrlong	arg01, fp
0632c     04 5E 05 F1 | 	add	fp, #4
06330     AF 5E 62 FC | 	wrlong	arg02, fp
06334     04 5E 05 F1 | 	add	fp, #4
06338     AF 60 62 FC | 	wrlong	arg03, fp
0633c     04 5E 05 F1 | 	add	fp, #4
06340     AF 60 42 FC | 	wrbyte	arg03, fp
06344     01 5E 05 F1 | 	add	fp, #1
06348     AF 00 48 FC | 	wrbyte	#0, fp
0634c     01 5E 85 F1 | 	sub	fp, #1
06350     AF 60 02 F6 | 	mov	arg03, fp
06354     0C 5E 85 F1 | 	sub	fp, #12
06358     AF 5C 02 FB | 	rdlong	arg01, fp
0635c     04 5E 05 F1 | 	add	fp, #4
06360     AF 5E 02 FB | 	rdlong	arg02, fp
06364     08 5E 85 F1 | 	sub	fp, #8
06368     0C 00 B0 FD | 	call	#__system___fmtstr
0636c     AF F0 03 F6 | 	mov	ptra, fp
06370     BF 00 A0 FD | 	call	#popregs_
06374                 | __system___fmtchar_ret
06374     2D 00 64 FD | 	ret
06378                 | 
06378                 | __system___fmtstr
06378     0E 5A 05 F6 | 	mov	COUNT_, #14
0637c     B0 00 A0 FD | 	call	#pushregs_
06380     2E 6B 02 F6 | 	mov	local01, arg01
06384     2F 6D 02 F6 | 	mov	local02, arg02
06388     30 6F 02 F6 | 	mov	local03, arg03
0638c     36 71 02 F6 | 	mov	local04, local02
06390     FF 70 06 F5 | 	and	local04, #255
06394     37 5D 02 F6 | 	mov	arg01, local03
06398     00 72 06 F6 | 	mov	local05, #0
0639c     70 9C 9F FE | 	loc	pa,	#(@LR__0305-@LR__0304)
063a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
063a4                 | LR__0304
063a4     2E 75 CA FA | 	rdbyte	local06, arg01 wz
063a8     01 72 06 51 |  if_ne	add	local05, #1
063ac     01 5C 06 51 |  if_ne	add	arg01, #1
063b0     F0 FF 9F 5D |  if_ne	jmp	#LR__0304
063b4                 | LR__0305
063b4     39 2B 02 F6 | 	mov	result1, local05
063b8     15 77 02 F6 | 	mov	local07, result1
063bc     00 70 0E F2 | 	cmp	local04, #0 wz
063c0     04 00 90 AD |  if_e	jmp	#LR__0306
063c4     38 77 7A F3 | 	fles	local07, local04 wcz
063c8                 | LR__0306
063c8     35 5D 02 F6 | 	mov	arg01, local01
063cc     36 5F 02 F6 | 	mov	arg02, local02
063d0     3B 61 02 F6 | 	mov	arg03, local07
063d4     02 62 06 F6 | 	mov	arg04, #2
063d8     C8 0F B0 FD | 	call	#__system___fmtpad
063dc     15 79 02 F6 | 	mov	local08, result1
063e0     00 78 5E F2 | 	cmps	local08, #0 wcz
063e4     3C 2B 02 C6 |  if_b	mov	result1, local08
063e8     74 00 90 CD |  if_b	jmp	#LR__0309
063ec     00 76 5E F2 | 	cmps	local07, #0 wcz
063f0     44 00 90 ED |  if_be	jmp	#LR__0308
063f4     3B 7B 02 F6 | 	mov	local09, local07
063f8                 | LR__0307
063f8     35 7D 02 F6 | 	mov	local10, local01
063fc     3E 7F 02 FB | 	rdlong	local11, local10
06400     04 7C 06 F1 | 	add	local10, #4
06404     3E 81 02 FB | 	rdlong	local12, local10
06408     37 5D C2 FA | 	rdbyte	arg01, local03
0640c     07 83 02 F6 | 	mov	local13, objptr
06410     3F 0F 02 F6 | 	mov	objptr, local11
06414     01 6E 06 F1 | 	add	local03, #1
06418     2D 80 62 FD | 	call	local12
0641c     41 0F 02 F6 | 	mov	objptr, local13
06420     15 85 02 F6 | 	mov	local14, result1
06424     00 84 5E F2 | 	cmps	local14, #0 wcz
06428     42 2B 02 C6 |  if_b	mov	result1, local14
0642c     30 00 90 CD |  if_b	jmp	#LR__0309
06430     42 79 02 F1 | 	add	local08, local14
06434     F0 7B 6E FB | 	djnz	local09, #LR__0307
06438                 | LR__0308
06438     35 5D 02 F6 | 	mov	arg01, local01
0643c     36 5F 02 F6 | 	mov	arg02, local02
06440     3B 61 02 F6 | 	mov	arg03, local07
06444     01 62 06 F6 | 	mov	arg04, #1
06448     58 0F B0 FD | 	call	#__system___fmtpad
0644c     15 85 02 F6 | 	mov	local14, result1
06450     00 84 5E F2 | 	cmps	local14, #0 wcz
06454     42 2B 02 C6 |  if_b	mov	result1, local14
06458     42 79 02 31 |  if_ae	add	local08, local14
0645c     3C 2B 02 36 |  if_ae	mov	result1, local08
06460                 | LR__0309
06460     AF F0 03 F6 | 	mov	ptra, fp
06464     BF 00 A0 FD | 	call	#popregs_
06468                 | __system___fmtstr_ret
06468     2D 00 64 FD | 	ret
0646c                 | 
0646c                 | __system___fmtnum
0646c     07 5A 05 F6 | 	mov	COUNT_, #7
06470     B0 00 A0 FD | 	call	#pushregs_
06474     78 F0 07 F1 | 	add	ptra, #120
06478     04 5E 05 F1 | 	add	fp, #4
0647c     AF 5C 62 FC | 	wrlong	arg01, fp
06480     04 5E 05 F1 | 	add	fp, #4
06484     AF 5E 62 FC | 	wrlong	arg02, fp
06488     04 5E 05 F1 | 	add	fp, #4
0648c     AF 60 62 FC | 	wrlong	arg03, fp
06490     04 5E 05 F1 | 	add	fp, #4
06494     AF 62 62 FC | 	wrlong	arg04, fp
06498     04 5E 05 F1 | 	add	fp, #4
0649c     AF 6A 02 F6 | 	mov	local01, fp
064a0     44 5E 05 F1 | 	add	fp, #68
064a4     AF 6A 62 FC | 	wrlong	local01, fp
064a8     04 5E 05 F1 | 	add	fp, #4
064ac     AF 00 68 FC | 	wrlong	#0, fp
064b0     54 5E 85 F1 | 	sub	fp, #84
064b4     AF 6A 02 FB | 	rdlong	local01, fp
064b8     10 6A 46 F0 | 	shr	local01, #16
064bc     3F 6A 06 F5 | 	and	local01, #63
064c0     58 5E 05 F1 | 	add	fp, #88
064c4     AF 6A 62 FC | 	wrlong	local01, fp
064c8     58 5E 85 F1 | 	sub	fp, #88
064cc     AF 6A 02 FB | 	rdlong	local01, fp
064d0     FF 6A 06 F5 | 	and	local01, #255
064d4     5C 5E 05 F1 | 	add	fp, #92
064d8     AF 6A 62 FC | 	wrlong	local01, fp
064dc     5C 5E 85 F1 | 	sub	fp, #92
064e0     AF 6A 02 FB | 	rdlong	local01, fp
064e4     1A 6A 46 F0 | 	shr	local01, #26
064e8     03 6A 06 F5 | 	and	local01, #3
064ec     60 5E 05 F1 | 	add	fp, #96
064f0     AF 6A 62 FC | 	wrlong	local01, fp
064f4     08 5E 85 F1 | 	sub	fp, #8
064f8     AF 6A 02 FB | 	rdlong	local01, fp
064fc     60 5E 85 F1 | 	sub	fp, #96
06500     00 6A 5E F2 | 	cmps	local01, #0 wcz
06504     14 00 90 ED |  if_be	jmp	#LR__0310
06508     60 5E 05 F1 | 	add	fp, #96
0650c     AF 6A 02 FB | 	rdlong	local01, fp
06510     01 6A 86 F1 | 	sub	local01, #1
06514     AF 6A 62 FC | 	wrlong	local01, fp
06518     60 5E 85 F1 | 	sub	fp, #96
0651c                 | LR__0310
0651c     64 5E 05 F1 | 	add	fp, #100
06520     AF 6C 02 FB | 	rdlong	local02, fp
06524     64 5E 85 F1 | 	sub	fp, #100
06528     40 6C 5E F2 | 	cmps	local02, #64 wcz
0652c     14 00 90 1D |  if_a	jmp	#LR__0311
06530     64 5E 05 F1 | 	add	fp, #100
06534     AF 6E 02 FB | 	rdlong	local03, fp
06538     64 5E 85 F1 | 	sub	fp, #100
0653c     37 71 0A F6 | 	mov	local04, local03 wz
06540     0C 00 90 5D |  if_ne	jmp	#LR__0312
06544                 | LR__0311
06544     64 5E 05 F1 | 	add	fp, #100
06548     AF 80 68 FC | 	wrlong	#64, fp
0654c     64 5E 85 F1 | 	sub	fp, #100
06550                 | LR__0312
06550     68 5E 05 F1 | 	add	fp, #104
06554     AF 6A 02 FB | 	rdlong	local01, fp
06558     68 5E 85 F1 | 	sub	fp, #104
0655c     03 6A 0E F2 | 	cmp	local01, #3 wz
06560     10 00 90 5D |  if_ne	jmp	#LR__0313
06564     68 5E 05 F1 | 	add	fp, #104
06568     AF 00 68 FC | 	wrlong	#0, fp
0656c     68 5E 85 F1 | 	sub	fp, #104
06570     30 00 90 FD | 	jmp	#LR__0315
06574                 | LR__0313
06574     0C 5E 05 F1 | 	add	fp, #12
06578     AF 6A 02 FB | 	rdlong	local01, fp
0657c     0C 5E 85 F1 | 	sub	fp, #12
06580     00 6A 5E F2 | 	cmps	local01, #0 wcz
06584     1C 00 90 3D |  if_ae	jmp	#LR__0314
06588     68 5E 05 F1 | 	add	fp, #104
0658c     AF 08 68 FC | 	wrlong	#4, fp
06590     5C 5E 85 F1 | 	sub	fp, #92
06594     AF 6A 02 FB | 	rdlong	local01, fp
06598     35 6B 62 F6 | 	neg	local01, local01
0659c     AF 6A 62 FC | 	wrlong	local01, fp
065a0     0C 5E 85 F1 | 	sub	fp, #12
065a4                 | LR__0314
065a4                 | LR__0315
065a4     68 5E 05 F1 | 	add	fp, #104
065a8     AF 6A 0A FB | 	rdlong	local01, fp wz
065ac     68 5E 85 F1 | 	sub	fp, #104
065b0     EC 00 90 AD |  if_e	jmp	#LR__0322
065b4     5C 5E 05 F1 | 	add	fp, #92
065b8     AF 70 02 FB | 	rdlong	local04, fp
065bc     01 70 06 F1 | 	add	local04, #1
065c0     AF 70 62 FC | 	wrlong	local04, fp
065c4     04 5E 05 F1 | 	add	fp, #4
065c8     AF 6A 02 FB | 	rdlong	local01, fp
065cc     04 5E 05 F1 | 	add	fp, #4
065d0     AF 70 02 FB | 	rdlong	local04, fp
065d4     64 5E 85 F1 | 	sub	fp, #100
065d8     38 6B 0A F2 | 	cmp	local01, local04 wz
065dc     3C 00 90 5D |  if_ne	jmp	#LR__0317
065e0     60 5E 05 F1 | 	add	fp, #96
065e4     AF 70 02 FB | 	rdlong	local04, fp
065e8     01 70 86 F1 | 	sub	local04, #1
065ec     AF 70 62 FC | 	wrlong	local04, fp
065f0     AF 6A 0A FB | 	rdlong	local01, fp wz
065f4     60 5E 85 F1 | 	sub	fp, #96
065f8     20 00 90 5D |  if_ne	jmp	#LR__0316
065fc     04 5E 05 F1 | 	add	fp, #4
06600     AF 5C 02 FB | 	rdlong	arg01, fp
06604     04 5E 05 F1 | 	add	fp, #4
06608     AF 5E 02 FB | 	rdlong	arg02, fp
0660c     08 5E 85 F1 | 	sub	fp, #8
06610     23 60 06 F6 | 	mov	arg03, #35
06614     00 FD BF FD | 	call	#__system___fmtchar
06618     70 01 90 FD | 	jmp	#LR__0327
0661c                 | LR__0316
0661c                 | LR__0317
0661c     68 5E 05 F1 | 	add	fp, #104
06620     AF 6A 02 FB | 	rdlong	local01, fp
06624     68 5E 85 F1 | 	sub	fp, #104
06628     02 6A 0E F2 | 	cmp	local01, #2 wz
0662c     20 00 90 5D |  if_ne	jmp	#LR__0318
06630     58 5E 05 F1 | 	add	fp, #88
06634     AF 6A 02 FB | 	rdlong	local01, fp
06638     35 71 02 F6 | 	mov	local04, local01
0663c     01 70 06 F1 | 	add	local04, #1
06640     AF 70 62 FC | 	wrlong	local04, fp
06644     58 5E 85 F1 | 	sub	fp, #88
06648     35 41 48 FC | 	wrbyte	#32, local01
0664c     50 00 90 FD | 	jmp	#LR__0321
06650                 | LR__0318
06650     68 5E 05 F1 | 	add	fp, #104
06654     AF 6A 02 FB | 	rdlong	local01, fp
06658     68 5E 85 F1 | 	sub	fp, #104
0665c     04 6A 0E F2 | 	cmp	local01, #4 wz
06660     20 00 90 5D |  if_ne	jmp	#LR__0319
06664     58 5E 05 F1 | 	add	fp, #88
06668     AF 6A 02 FB | 	rdlong	local01, fp
0666c     35 71 02 F6 | 	mov	local04, local01
06670     01 70 06 F1 | 	add	local04, #1
06674     AF 70 62 FC | 	wrlong	local04, fp
06678     58 5E 85 F1 | 	sub	fp, #88
0667c     35 5B 48 FC | 	wrbyte	#45, local01
06680     1C 00 90 FD | 	jmp	#LR__0320
06684                 | LR__0319
06684     58 5E 05 F1 | 	add	fp, #88
06688     AF 6A 02 FB | 	rdlong	local01, fp
0668c     35 71 02 F6 | 	mov	local04, local01
06690     01 70 06 F1 | 	add	local04, #1
06694     AF 70 62 FC | 	wrlong	local04, fp
06698     58 5E 85 F1 | 	sub	fp, #88
0669c     35 57 48 FC | 	wrbyte	#43, local01
066a0                 | LR__0320
066a0                 | LR__0321
066a0                 | LR__0322
066a0     58 5E 05 F1 | 	add	fp, #88
066a4     AF 5C 02 FB | 	rdlong	arg01, fp
066a8     4C 5E 85 F1 | 	sub	fp, #76
066ac     AF 5E 02 FB | 	rdlong	arg02, fp
066b0     04 5E 05 F1 | 	add	fp, #4
066b4     AF 60 02 FB | 	rdlong	arg03, fp
066b8     50 5E 05 F1 | 	add	fp, #80
066bc     AF 62 02 FB | 	rdlong	arg04, fp
066c0     00 72 06 F6 | 	mov	local05, #0
066c4     58 5E 85 F1 | 	sub	fp, #88
066c8     AF 74 02 FB | 	rdlong	local06, fp
066cc     08 5E 85 F1 | 	sub	fp, #8
066d0     1D 74 2E F4 | 	testbn	local06, #29 wz
066d4     01 72 06 56 |  if_ne	mov	local05, #1
066d8     39 65 02 F6 | 	mov	arg05, local05
066dc     84 0D B0 FD | 	call	#__system___uitoa
066e0     15 77 02 F6 | 	mov	local07, result1
066e4     5C 5E 05 F1 | 	add	fp, #92
066e8     AF 6A 02 FB | 	rdlong	local01, fp
066ec     3B 6B 02 F1 | 	add	local01, local07
066f0     AF 6A 62 FC | 	wrlong	local01, fp
066f4     08 5E 05 F1 | 	add	fp, #8
066f8     AF 70 02 FB | 	rdlong	local04, fp
066fc     64 5E 85 F1 | 	sub	fp, #100
06700     38 6B 5A F2 | 	cmps	local01, local04 wcz
06704     64 00 90 ED |  if_be	jmp	#LR__0326
06708     34 99 9F FE | 	loc	pa,	#(@LR__0324-@LR__0323)
0670c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06710                 | LR__0323
06710     64 5E 05 F1 | 	add	fp, #100
06714     AF 6A 02 FB | 	rdlong	local01, fp
06718     35 71 02 F6 | 	mov	local04, local01
0671c     01 70 86 F1 | 	sub	local04, #1
06720     AF 70 62 FC | 	wrlong	local04, fp
06724     64 5E 85 F1 | 	sub	fp, #100
06728     00 6A 5E F2 | 	cmps	local01, #0 wcz
0672c     20 00 90 ED |  if_be	jmp	#LR__0325
06730     58 5E 05 F1 | 	add	fp, #88
06734     AF 6A 02 FB | 	rdlong	local01, fp
06738     35 71 02 F6 | 	mov	local04, local01
0673c     01 70 06 F1 | 	add	local04, #1
06740     AF 70 62 FC | 	wrlong	local04, fp
06744     58 5E 85 F1 | 	sub	fp, #88
06748     35 47 48 FC | 	wrbyte	#35, local01
0674c     C0 FF 9F FD | 	jmp	#LR__0323
06750                 | LR__0324
06750                 | LR__0325
06750     58 5E 05 F1 | 	add	fp, #88
06754     AF 6A 02 FB | 	rdlong	local01, fp
06758     35 71 02 F6 | 	mov	local04, local01
0675c     01 70 06 F1 | 	add	local04, #1
06760     AF 70 62 FC | 	wrlong	local04, fp
06764     58 5E 85 F1 | 	sub	fp, #88
06768     35 01 48 FC | 	wrbyte	#0, local01
0676c                 | LR__0326
0676c     14 5E 05 F1 | 	add	fp, #20
06770     AF 60 02 F6 | 	mov	arg03, fp
06774     10 5E 85 F1 | 	sub	fp, #16
06778     AF 5C 02 FB | 	rdlong	arg01, fp
0677c     04 5E 05 F1 | 	add	fp, #4
06780     AF 5E 02 FB | 	rdlong	arg02, fp
06784     08 5E 85 F1 | 	sub	fp, #8
06788     EC FB BF FD | 	call	#__system___fmtstr
0678c                 | LR__0327
0678c     AF F0 03 F6 | 	mov	ptra, fp
06790     BF 00 A0 FD | 	call	#popregs_
06794                 | __system___fmtnum_ret
06794     2D 00 64 FD | 	ret
06798                 | 
06798                 | __system__String_S
06798     06 5A 05 F6 | 	mov	COUNT_, #6
0679c     B0 00 A0 FD | 	call	#pushregs_
067a0     2E 6B 02 F6 | 	mov	local01, arg01
067a4     2F 6D 02 F6 | 	mov	local02, arg02
067a8     36 5D 02 F6 | 	mov	arg01, local02
067ac     00 6E 06 F6 | 	mov	local03, #0
067b0     5C 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
067b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
067b8                 | LR__0328
067b8     2E 71 CA FA | 	rdbyte	local04, arg01 wz
067bc     01 6E 06 51 |  if_ne	add	local03, #1
067c0     01 5C 06 51 |  if_ne	add	arg01, #1
067c4     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
067c8                 | LR__0329
067c8     37 2B 0A F6 | 	mov	result1, local03 wz
067cc     40 00 00 AF 
067d0     A2 2A 06 A6 |  if_e	mov	result1, ##@LR__0446
067d4     50 00 90 AD |  if_e	jmp	#LR__0331
067d8     00 6A 5E F2 | 	cmps	local01, #0 wcz
067dc     40 00 00 EF 
067e0     A3 2A 06 E6 |  if_be	mov	result1, ##@LR__0447
067e4     40 00 90 ED |  if_be	jmp	#LR__0331
067e8     35 73 02 F6 | 	mov	local05, local01
067ec     01 72 06 F1 | 	add	local05, #1
067f0     39 5D 02 F6 | 	mov	arg01, local05
067f4     01 5C 06 F1 | 	add	arg01, #1
067f8     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
067fc     15 75 0A F6 | 	mov	local06, result1 wz
06800     20 00 90 AD |  if_e	jmp	#LR__0330
06804     36 5F C2 FA | 	rdbyte	arg02, local02
06808     3A 5D 02 F6 | 	mov	arg01, local06
0680c     35 61 02 F6 | 	mov	arg03, local01
06810     A0 00 A0 FD | 	call	#\builtin_bytefill_
06814     3A 73 02 F1 | 	add	local05, local06
06818     39 01 48 FC | 	wrbyte	#0, local05
0681c     3A 2B 02 F6 | 	mov	result1, local06
06820     04 00 90 FD | 	jmp	#LR__0331
06824                 | LR__0330
06824     3A 2B 02 F6 | 	mov	result1, local06
06828                 | LR__0331
06828     AF F0 03 F6 | 	mov	ptra, fp
0682c     BF 00 A0 FD | 	call	#popregs_
06830                 | __system__String_S_ret
06830     2D 00 64 FD | 	ret
06834                 | 
06834                 | __system___gc_ptrs
06834     0A 5A 05 F6 | 	mov	COUNT_, #10
06838     B0 00 A0 FD | 	call	#pushregs_
0683c     02 6B 02 F6 | 	mov	local01, __heap_ptr
06840     35 6D 02 F6 | 	mov	local02, local01
06844     07 00 00 FF 
06848     F8 6D 06 F1 | 	add	local02, ##4088
0684c     35 6F 0A FB | 	rdlong	local03, local01 wz
06850     74 00 90 5D |  if_ne	jmp	#LR__0332
06854     36 71 02 F6 | 	mov	local04, local02
06858     35 71 82 F1 | 	sub	local04, local01
0685c     35 03 58 FC | 	wrword	#1, local01
06860     35 73 02 F6 | 	mov	local05, local01
06864     02 72 06 F1 | 	add	local05, #2
06868     36 00 80 FF 
0686c     39 21 59 FC | 	wrword	##27792, local05
06870     35 75 02 F6 | 	mov	local06, local01
06874     04 74 06 F1 | 	add	local06, #4
06878     3A 01 58 FC | 	wrword	#0, local06
0687c     35 77 02 F6 | 	mov	local07, local01
06880     06 76 06 F1 | 	add	local07, #6
06884     3B 03 58 FC | 	wrword	#1, local07
06888     10 6A 06 F1 | 	add	local01, #16
0688c     38 6F 52 F6 | 	abs	local03, local04 wc
06890     04 6E 46 F0 | 	shr	local03, #4
06894     37 6F 62 C6 |  if_b	neg	local03, local03
06898     35 6F 52 FC | 	wrword	local03, local01
0689c     35 79 02 F6 | 	mov	local08, local01
068a0     02 78 06 F1 | 	add	local08, #2
068a4     36 00 80 FF 
068a8     3C 1F 59 FC | 	wrword	##27791, local08
068ac     35 7B 02 F6 | 	mov	local09, local01
068b0     04 7A 06 F1 | 	add	local09, #4
068b4     3D 01 58 FC | 	wrword	#0, local09
068b8     35 7D 02 F6 | 	mov	local10, local01
068bc     06 7C 06 F1 | 	add	local10, #6
068c0     3E 01 58 FC | 	wrword	#0, local10
068c4     10 6A 86 F1 | 	sub	local01, #16
068c8                 | LR__0332
068c8     36 2D 02 F6 | 	mov	result2, local02
068cc     35 2B 02 F6 | 	mov	result1, local01
068d0     AF F0 03 F6 | 	mov	ptra, fp
068d4     BF 00 A0 FD | 	call	#popregs_
068d8                 | __system___gc_ptrs_ret
068d8     2D 00 64 FD | 	ret
068dc                 | 
068dc                 | __system___gc_nextBlockPtr
068dc     02 5A 05 F6 | 	mov	COUNT_, #2
068e0     B0 00 A0 FD | 	call	#pushregs_
068e4     2E 6B 02 F6 | 	mov	local01, arg01
068e8     35 6D EA FA | 	rdword	local02, local01 wz
068ec     10 00 90 5D |  if_ne	jmp	#LR__0333
068f0     40 00 00 FF 
068f4     A4 5C 06 F6 | 	mov	arg01, ##@LR__0448
068f8     F8 01 B0 FD | 	call	#__system___gc_errmsg
068fc     0C 00 90 FD | 	jmp	#LR__0334
06900                 | LR__0333
06900     04 6C 66 F0 | 	shl	local02, #4
06904     35 2B 02 F6 | 	mov	result1, local01
06908     36 2B 02 F1 | 	add	result1, local02
0690c                 | LR__0334
0690c     AF F0 03 F6 | 	mov	ptra, fp
06910     BF 00 A0 FD | 	call	#popregs_
06914                 | __system___gc_nextBlockPtr_ret
06914     2D 00 64 FD | 	ret
06918                 | 
06918                 | __system___gc_tryalloc
06918     1B 5A 05 F6 | 	mov	COUNT_, #27
0691c     B0 00 A0 FD | 	call	#pushregs_
06920     2E 6B 02 F6 | 	mov	local01, arg01
06924     2F 6D 02 F6 | 	mov	local02, arg02
06928     08 FF BF FD | 	call	#__system___gc_ptrs
0692c     15 6F 02 F6 | 	mov	local03, result1
06930     16 71 02 F6 | 	mov	local04, result2
06934     37 73 02 F6 | 	mov	local05, local03
06938     00 74 06 F6 | 	mov	local06, #0
0693c     18 97 9F FE | 	loc	pa,	#(@LR__0336-@LR__0335)
06940     93 00 A0 FD | 	call	#FCACHE_LOAD_
06944                 | LR__0335
06944     39 77 02 F6 | 	mov	local07, local05
06948     06 72 06 F1 | 	add	local05, #6
0694c     39 79 02 F6 | 	mov	local08, local05
06950     37 7B 02 F6 | 	mov	local09, local03
06954     3C 7D E2 FA | 	rdword	local10, local08
06958     3D 5D 02 F6 | 	mov	arg01, local09
0695c     3E 5F 0A F6 | 	mov	arg02, local10 wz
06960     00 2A 06 A6 |  if_e	mov	result1, #0
06964     04 5E 66 50 |  if_ne	shl	arg02, #4
06968     2F 5D 02 51 |  if_ne	add	arg01, arg02
0696c     2E 2B 02 56 |  if_ne	mov	result1, arg01
06970     15 7F 02 F6 | 	mov	local11, result1
06974     3F 73 0A F6 | 	mov	local05, local11 wz
06978     39 7B 02 56 |  if_ne	mov	local09, local05
0697c     3D 81 02 56 |  if_ne	mov	local12, local09
06980     40 75 E2 5A |  if_ne	rdword	local06, local12
06984     00 72 0E F2 | 	cmp	local05, #0 wz
06988     10 00 90 AD |  if_e	jmp	#LR__0337
0698c     38 73 5A F2 | 	cmps	local05, local04 wcz
06990     08 00 90 3D |  if_ae	jmp	#LR__0337
06994     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06998     A8 FF 9F 1D |  if_a	jmp	#LR__0335
0699c                 | LR__0336
0699c                 | LR__0337
0699c     00 72 0E F2 | 	cmp	local05, #0 wz
069a0     39 2B 02 A6 |  if_e	mov	result1, local05
069a4     40 01 90 AD |  if_e	jmp	#LR__0340
069a8     39 83 02 F6 | 	mov	local13, local05
069ac     06 82 06 F1 | 	add	local13, #6
069b0     41 85 E2 FA | 	rdword	local14, local13
069b4     3A 6B 5A F2 | 	cmps	local01, local06 wcz
069b8     CC 00 90 3D |  if_ae	jmp	#LR__0339
069bc     39 87 02 F6 | 	mov	local15, local05
069c0     43 6B 52 FC | 	wrword	local01, local15
069c4     35 89 02 F6 | 	mov	local16, local01
069c8     04 88 66 F0 | 	shl	local16, #4
069cc     39 8B 02 F6 | 	mov	local17, local05
069d0     44 8B 02 F1 | 	add	local17, local16
069d4     3A 8D 02 F6 | 	mov	local18, local06
069d8     35 8D 82 F1 | 	sub	local18, local01
069dc     45 8F 02 F6 | 	mov	local19, local17
069e0     47 8D 52 FC | 	wrword	local18, local19
069e4     45 91 02 F6 | 	mov	local20, local17
069e8     02 90 06 F1 | 	add	local20, #2
069ec     36 00 80 FF 
069f0     48 1F 59 FC | 	wrword	##27791, local20
069f4     45 93 02 F6 | 	mov	local21, local17
069f8     04 92 06 F1 | 	add	local21, #4
069fc     39 5F 0A F6 | 	mov	arg02, local05 wz
06a00     00 2A 06 A6 |  if_e	mov	result1, #0
06a04     37 5F 82 51 |  if_ne	sub	arg02, local03
06a08     04 5E 46 50 |  if_ne	shr	arg02, #4
06a0c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a10     49 2B 52 FC | 	wrword	result1, local21
06a14     45 95 02 F6 | 	mov	local22, local17
06a18     41 7B E2 FA | 	rdword	local09, local13
06a1c     06 94 06 F1 | 	add	local22, #6
06a20     4A 7B 52 FC | 	wrword	local09, local22
06a24     45 97 02 F6 | 	mov	local23, local17
06a28     4B 5F 0A F6 | 	mov	arg02, local23 wz
06a2c     00 2A 06 A6 |  if_e	mov	result1, #0
06a30     37 5F 82 51 |  if_ne	sub	arg02, local03
06a34     04 5E 46 50 |  if_ne	shr	arg02, #4
06a38     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a3c     15 85 02 F6 | 	mov	local14, result1
06a40     45 5D 02 F6 | 	mov	arg01, local17
06a44     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06a48     15 99 0A F6 | 	mov	local24, result1 wz
06a4c     38 00 90 AD |  if_e	jmp	#LR__0338
06a50     38 99 5A F2 | 	cmps	local24, local04 wcz
06a54     30 00 90 3D |  if_ae	jmp	#LR__0338
06a58     4C 9B 02 F6 | 	mov	local25, local24
06a5c     04 9A 06 F1 | 	add	local25, #4
06a60     37 7B 02 F6 | 	mov	local09, local03
06a64     4B 7D 02 F6 | 	mov	local10, local23
06a68     3D 5D 02 F6 | 	mov	arg01, local09
06a6c     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a70     00 2A 06 A6 |  if_e	mov	result1, #0
06a74     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06a78     04 5E 46 50 |  if_ne	shr	arg02, #4
06a7c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a80     15 7F 02 F6 | 	mov	local11, result1
06a84     4D 7F 52 FC | 	wrword	local11, local25
06a88                 | LR__0338
06a88                 | LR__0339
06a88     06 76 06 F1 | 	add	local07, #6
06a8c     3B 85 52 FC | 	wrword	local14, local07
06a90     36 00 00 FF 
06a94     80 7A 06 F6 | 	mov	local09, ##27776
06a98     36 7B 42 F5 | 	or	local09, local02
06a9c     39 9D 02 F6 | 	mov	local26, local05
06aa0     02 9C 06 F1 | 	add	local26, #2
06aa4     01 2A 62 FD | 	cogid	result1
06aa8     15 7B 42 F5 | 	or	local09, result1
06aac     4E 7B 52 FC | 	wrword	local09, local26
06ab0     37 9F 02 F6 | 	mov	local27, local03
06ab4     08 9E 06 F1 | 	add	local27, #8
06ab8     4F 7B E2 FA | 	rdword	local09, local27
06abc     41 7B 52 FC | 	wrword	local09, local13
06ac0     39 5F 0A F6 | 	mov	arg02, local05 wz
06ac4     00 2A 06 A6 |  if_e	mov	result1, #0
06ac8     37 5F 82 51 |  if_ne	sub	arg02, local03
06acc     04 5E 46 50 |  if_ne	shr	arg02, #4
06ad0     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ad4     4F 2B 52 FC | 	wrword	result1, local27
06ad8     08 72 06 F1 | 	add	local05, #8
06adc     39 2B 02 F6 | 	mov	result1, local05
06ae0     00 C0 31 FF 
06ae4     00 2A 46 F5 | 	or	result1, ##1669332992
06ae8                 | LR__0340
06ae8     AF F0 03 F6 | 	mov	ptra, fp
06aec     BF 00 A0 FD | 	call	#popregs_
06af0                 | __system___gc_tryalloc_ret
06af0     2D 00 64 FD | 	ret
06af4                 | 
06af4                 | __system___gc_errmsg
06af4     02 5A 05 F6 | 	mov	COUNT_, #2
06af8     B0 00 A0 FD | 	call	#pushregs_
06afc     2E 6B 02 F6 | 	mov	local01, arg01
06b00                 | LR__0341
06b00     35 6D CA FA | 	rdbyte	local02, local01 wz
06b04     01 6A 06 F1 | 	add	local01, #1
06b08     0C 00 90 AD |  if_e	jmp	#LR__0342
06b0c     36 5D 02 F6 | 	mov	arg01, local02
06b10     C4 F4 BF FD | 	call	#__system___tx
06b14     E8 FF 9F FD | 	jmp	#LR__0341
06b18                 | LR__0342
06b18     00 2A 06 F6 | 	mov	result1, #0
06b1c     AF F0 03 F6 | 	mov	ptra, fp
06b20     BF 00 A0 FD | 	call	#popregs_
06b24                 | __system___gc_errmsg_ret
06b24     2D 00 64 FD | 	ret
06b28                 | 
06b28                 | __system___gc_alloc_managed
06b28     02 5A 05 F6 | 	mov	COUNT_, #2
06b2c     B0 00 A0 FD | 	call	#pushregs_
06b30     2E 6B 02 F6 | 	mov	local01, arg01
06b34     00 5E 06 F6 | 	mov	arg02, #0
06b38     30 00 B0 FD | 	call	#__system___gc_doalloc
06b3c     15 6D 0A F6 | 	mov	local02, result1 wz
06b40     18 00 90 5D |  if_ne	jmp	#LR__0343
06b44     00 6A 5E F2 | 	cmps	local01, #0 wcz
06b48     10 00 90 ED |  if_be	jmp	#LR__0343
06b4c     40 00 00 FF 
06b50     C0 5C 06 F6 | 	mov	arg01, ##@LR__0449
06b54     9C FF BF FD | 	call	#__system___gc_errmsg
06b58     04 00 90 FD | 	jmp	#LR__0344
06b5c                 | LR__0343
06b5c     36 2B 02 F6 | 	mov	result1, local02
06b60                 | LR__0344
06b60     AF F0 03 F6 | 	mov	ptra, fp
06b64     BF 00 A0 FD | 	call	#popregs_
06b68                 | __system___gc_alloc_managed_ret
06b68     2D 00 64 FD | 	ret
06b6c                 | 
06b6c                 | __system___gc_doalloc
06b6c     07 5A 05 F6 | 	mov	COUNT_, #7
06b70     B0 00 A0 FD | 	call	#pushregs_
06b74     2E 6B 0A F6 | 	mov	local01, arg01 wz
06b78     2F 6D 02 F6 | 	mov	local02, arg02
06b7c     00 2A 06 A6 |  if_e	mov	result1, #0
06b80     8C 00 90 AD |  if_e	jmp	#LR__0352
06b84     17 6A 06 F1 | 	add	local01, #23
06b88     0F 6A 26 F5 | 	andn	local01, #15
06b8c     04 6A 46 F0 | 	shr	local01, #4
06b90     14 14 06 F1 | 	add	ptr___system__dat__, #20
06b94     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06b98     37 5D 02 F6 | 	mov	arg01, local03
06b9c     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06ba0     50 F3 BF FD | 	call	#__system___lockmem
06ba4     35 5D 02 F6 | 	mov	arg01, local01
06ba8     36 5F 02 F6 | 	mov	arg02, local02
06bac     68 FD BF FD | 	call	#__system___gc_tryalloc
06bb0     15 71 0A F6 | 	mov	local04, result1 wz
06bb4     14 00 90 5D |  if_ne	jmp	#LR__0345
06bb8     10 03 B0 FD | 	call	#__system___gc_docollect
06bbc     35 5D 02 F6 | 	mov	arg01, local01
06bc0     36 5F 02 F6 | 	mov	arg02, local02
06bc4     50 FD BF FD | 	call	#__system___gc_tryalloc
06bc8     15 71 02 F6 | 	mov	local04, result1
06bcc                 | LR__0345
06bcc     37 01 68 FC | 	wrlong	#0, local03
06bd0     00 70 0E F2 | 	cmp	local04, #0 wz
06bd4     34 00 90 AD |  if_e	jmp	#LR__0351
06bd8     04 6A 66 F0 | 	shl	local01, #4
06bdc     08 6A 86 F1 | 	sub	local01, #8
06be0     35 73 52 F6 | 	abs	local05, local01 wc
06be4     02 72 46 F0 | 	shr	local05, #2
06be8     39 73 62 C6 |  if_b	neg	local05, local05
06bec     39 75 0A F6 | 	mov	local06, local05 wz
06bf0     38 77 02 F6 | 	mov	local07, local04
06bf4     14 00 90 AD |  if_e	jmp	#LR__0350
06bf8     10 94 9F FE | 	loc	pa,	#(@LR__0348-@LR__0346)
06bfc     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c00                 | LR__0346
06c00     3A 05 D8 FC | 	rep	@LR__0349, local06
06c04                 | LR__0347
06c04     3B 01 68 FC | 	wrlong	#0, local07
06c08     04 76 06 F1 | 	add	local07, #4
06c0c                 | LR__0348
06c0c                 | LR__0349
06c0c                 | LR__0350
06c0c                 | LR__0351
06c0c     38 2B 02 F6 | 	mov	result1, local04
06c10                 | LR__0352
06c10     AF F0 03 F6 | 	mov	ptra, fp
06c14     BF 00 A0 FD | 	call	#popregs_
06c18                 | __system___gc_doalloc_ret
06c18     2D 00 64 FD | 	ret
06c1c                 | 
06c1c                 | __system___gc_isvalidptr
06c1c     30 31 02 F6 | 	mov	_var01, arg03
06c20     18 33 02 F6 | 	mov	_var02, _var01
06c24     00 F8 7F FF 
06c28     00 32 06 F5 | 	and	_var02, ##-1048576
06c2c     00 C0 31 FF 
06c30     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06c34     00 2A 06 56 |  if_ne	mov	result1, #0
06c38     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c3c     08 30 86 F1 | 	sub	_var01, #8
06c40     18 35 02 F6 | 	mov	_var03, _var01
06c44     00 F8 7F FF 
06c48     00 34 26 F5 | 	andn	_var03, ##-1048576
06c4c     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06c50     08 00 90 CD |  if_b	jmp	#LR__0353
06c54     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06c58     08 00 90 CD |  if_b	jmp	#LR__0354
06c5c                 | LR__0353
06c5c     00 2A 06 F6 | 	mov	result1, #0
06c60     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06c64                 | LR__0354
06c64     1A 33 02 F6 | 	mov	_var02, _var03
06c68     2E 33 62 F5 | 	xor	_var02, arg01
06c6c     0F 32 0E F5 | 	and	_var02, #15 wz
06c70     00 2A 06 56 |  if_ne	mov	result1, #0
06c74     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c78     1A 37 02 F6 | 	mov	_var04, _var03
06c7c     02 36 06 F1 | 	add	_var04, #2
06c80     1B 33 E2 FA | 	rdword	_var02, _var04
06c84     7F 00 00 FF 
06c88     C0 33 06 F5 | 	and	_var02, ##65472
06c8c     36 00 00 FF 
06c90     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06c94     00 2A 06 56 |  if_ne	mov	result1, #0
06c98     1A 2B 02 A6 |  if_e	mov	result1, _var03
06c9c                 | __system___gc_isvalidptr_ret
06c9c     2D 00 64 FD | 	ret
06ca0                 | 
06ca0                 | __system___gc_dofree
06ca0     1A 5A 05 F6 | 	mov	COUNT_, #26
06ca4     B0 00 A0 FD | 	call	#pushregs_
06ca8     2E 6B 02 F6 | 	mov	local01, arg01
06cac     84 FB BF FD | 	call	#__system___gc_ptrs
06cb0     16 6D 02 F6 | 	mov	local02, result2
06cb4     15 6F 02 F6 | 	mov	local03, result1
06cb8     35 71 02 F6 | 	mov	local04, local01
06cbc     02 70 06 F1 | 	add	local04, #2
06cc0     36 00 80 FF 
06cc4     38 1F 59 FC | 	wrword	##27791, local04
06cc8     35 73 02 F6 | 	mov	local05, local01
06ccc     35 5D 02 F6 | 	mov	arg01, local01
06cd0     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06cd4     15 75 02 F6 | 	mov	local06, result1
06cd8     74 93 9F FE | 	loc	pa,	#(@LR__0356-@LR__0355)
06cdc     93 00 A0 FD | 	call	#FCACHE_LOAD_
06ce0                 | LR__0355
06ce0     04 72 06 F1 | 	add	local05, #4
06ce4     39 77 02 F6 | 	mov	local07, local05
06ce8     3B 5F EA FA | 	rdword	arg02, local07 wz
06cec     37 5D 02 F6 | 	mov	arg01, local03
06cf0     00 2A 06 A6 |  if_e	mov	result1, #0
06cf4     04 5E 66 50 |  if_ne	shl	arg02, #4
06cf8     2F 5D 02 51 |  if_ne	add	arg01, arg02
06cfc     2E 2B 02 56 |  if_ne	mov	result1, arg01
06d00     15 73 0A F6 | 	mov	local05, result1 wz
06d04     28 00 90 AD |  if_e	jmp	#LR__0357
06d08     39 5D 02 F6 | 	mov	arg01, local05
06d0c     00 78 06 F6 | 	mov	local08, #0
06d10     02 5C 06 F1 | 	add	arg01, #2
06d14     2E 7B E2 FA | 	rdword	local09, arg01
06d18     36 00 00 FF 
06d1c     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06d20     01 78 66 A6 |  if_e	neg	local08, #1
06d24     3C 2B 02 F6 | 	mov	result1, local08
06d28     15 7D 0A F6 | 	mov	local10, result1 wz
06d2c     B0 FF 9F AD |  if_e	jmp	#LR__0355
06d30                 | LR__0356
06d30                 | LR__0357
06d30     00 72 0E F2 | 	cmp	local05, #0 wz
06d34     37 73 02 A6 |  if_e	mov	local05, local03
06d38     39 7F 02 F6 | 	mov	local11, local05
06d3c     06 7E 06 F1 | 	add	local11, #6
06d40     35 81 02 F6 | 	mov	local12, local01
06d44     3F 83 E2 FA | 	rdword	local13, local11
06d48     06 80 06 F1 | 	add	local12, #6
06d4c     40 83 52 FC | 	wrword	local13, local12
06d50     35 5F 0A F6 | 	mov	arg02, local01 wz
06d54     00 2A 06 A6 |  if_e	mov	result1, #0
06d58     37 5F 82 51 |  if_ne	sub	arg02, local03
06d5c     04 5E 46 50 |  if_ne	shr	arg02, #4
06d60     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d64     15 85 02 F6 | 	mov	local14, result1
06d68     3F 85 52 FC | 	wrword	local14, local11
06d6c     37 73 0A F2 | 	cmp	local05, local03 wz
06d70     74 00 90 AD |  if_e	jmp	#LR__0360
06d74     39 5D 02 F6 | 	mov	arg01, local05
06d78     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d7c     35 2B 0A F2 | 	cmp	result1, local01 wz
06d80     64 00 90 5D |  if_ne	jmp	#LR__0359
06d84     39 87 02 F6 | 	mov	local15, local05
06d88     43 89 E2 FA | 	rdword	local16, local15
06d8c     35 8B 02 F6 | 	mov	local17, local01
06d90     45 7D E2 FA | 	rdword	local10, local17
06d94     3E 89 02 F1 | 	add	local16, local10
06d98     43 89 52 FC | 	wrword	local16, local15
06d9c     38 01 58 FC | 	wrword	#0, local04
06da0     35 5D 02 F6 | 	mov	arg01, local01
06da4     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06da8     15 75 02 F6 | 	mov	local06, result1
06dac     36 75 5A F2 | 	cmps	local06, local02 wcz
06db0     24 00 90 3D |  if_ae	jmp	#LR__0358
06db4     3A 8D 02 F6 | 	mov	local18, local06
06db8     04 8C 06 F1 | 	add	local18, #4
06dbc     39 5F 0A F6 | 	mov	arg02, local05 wz
06dc0     00 2A 06 A6 |  if_e	mov	result1, #0
06dc4     37 5F 82 51 |  if_ne	sub	arg02, local03
06dc8     04 5E 46 50 |  if_ne	shr	arg02, #4
06dcc     2F 2B 02 56 |  if_ne	mov	result1, arg02
06dd0     15 85 02 F6 | 	mov	local14, result1
06dd4     46 85 52 FC | 	wrword	local14, local18
06dd8                 | LR__0358
06dd8     40 83 E2 FA | 	rdword	local13, local12
06ddc     3F 83 52 FC | 	wrword	local13, local11
06de0     40 01 58 FC | 	wrword	#0, local12
06de4     39 6B 02 F6 | 	mov	local01, local05
06de8                 | LR__0359
06de8                 | LR__0360
06de8     35 5D 02 F6 | 	mov	arg01, local01
06dec     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06df0     15 8F 0A F6 | 	mov	local19, result1 wz
06df4     C4 00 90 AD |  if_e	jmp	#LR__0362
06df8     36 8F 5A F2 | 	cmps	local19, local02 wcz
06dfc     BC 00 90 3D |  if_ae	jmp	#LR__0362
06e00     47 5D 02 F6 | 	mov	arg01, local19
06e04     00 78 06 F6 | 	mov	local08, #0
06e08     02 5C 06 F1 | 	add	arg01, #2
06e0c     2E 7B E2 FA | 	rdword	local09, arg01
06e10     36 00 00 FF 
06e14     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06e18     01 78 66 A6 |  if_e	neg	local08, #1
06e1c     3C 2B 0A F6 | 	mov	result1, local08 wz
06e20     98 00 90 AD |  if_e	jmp	#LR__0362
06e24     35 73 02 F6 | 	mov	local05, local01
06e28     47 6B 02 F6 | 	mov	local01, local19
06e2c     39 91 02 F6 | 	mov	local20, local05
06e30     48 93 E2 FA | 	rdword	local21, local20
06e34     35 95 02 F6 | 	mov	local22, local01
06e38     4A 7D E2 FA | 	rdword	local10, local22
06e3c     3E 93 02 F1 | 	add	local21, local10
06e40     48 93 52 FC | 	wrword	local21, local20
06e44     35 97 02 F6 | 	mov	local23, local01
06e48     06 96 06 F1 | 	add	local23, #6
06e4c     39 99 02 F6 | 	mov	local24, local05
06e50     4B 83 E2 FA | 	rdword	local13, local23
06e54     06 98 06 F1 | 	add	local24, #6
06e58     4C 83 52 FC | 	wrword	local13, local24
06e5c     35 9B 02 F6 | 	mov	local25, local01
06e60     02 9A 06 F1 | 	add	local25, #2
06e64     4D 55 59 FC | 	wrword	#170, local25
06e68     4B 01 58 FC | 	wrword	#0, local23
06e6c     35 83 02 F6 | 	mov	local13, local01
06e70     41 5D 02 F6 | 	mov	arg01, local13
06e74     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06e78     15 7D 02 F6 | 	mov	local10, result1
06e7c     3E 75 0A F6 | 	mov	local06, local10 wz
06e80     38 00 90 AD |  if_e	jmp	#LR__0361
06e84     36 75 5A F2 | 	cmps	local06, local02 wcz
06e88     30 00 90 3D |  if_ae	jmp	#LR__0361
06e8c     3A 9D 02 F6 | 	mov	local26, local06
06e90     04 9C 06 F1 | 	add	local26, #4
06e94     37 83 02 F6 | 	mov	local13, local03
06e98     39 7D 02 F6 | 	mov	local10, local05
06e9c     41 5D 02 F6 | 	mov	arg01, local13
06ea0     3E 5F 0A F6 | 	mov	arg02, local10 wz
06ea4     00 2A 06 A6 |  if_e	mov	result1, #0
06ea8     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06eac     04 5E 46 50 |  if_ne	shr	arg02, #4
06eb0     2F 2B 02 56 |  if_ne	mov	result1, arg02
06eb4     15 85 02 F6 | 	mov	local14, result1
06eb8     4E 85 52 FC | 	wrword	local14, local26
06ebc                 | LR__0361
06ebc                 | LR__0362
06ebc     3A 2B 02 F6 | 	mov	result1, local06
06ec0     AF F0 03 F6 | 	mov	ptra, fp
06ec4     BF 00 A0 FD | 	call	#popregs_
06ec8                 | __system___gc_dofree_ret
06ec8     2D 00 64 FD | 	ret
06ecc                 | 
06ecc                 | __system___gc_docollect
06ecc     0C 5A 05 F6 | 	mov	COUNT_, #12
06ed0     B0 00 A0 FD | 	call	#pushregs_
06ed4     5C F9 BF FD | 	call	#__system___gc_ptrs
06ed8     16 6B 02 F6 | 	mov	local01, result2
06edc     15 6D 02 F6 | 	mov	local02, result1
06ee0     36 5D 02 F6 | 	mov	arg01, local02
06ee4     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ee8     15 6F 0A F6 | 	mov	local03, result1 wz
06eec     01 2A 62 FD | 	cogid	result1
06ef0     15 71 02 F6 | 	mov	local04, result1
06ef4     2C 00 90 AD |  if_e	jmp	#LR__0364
06ef8                 | LR__0363
06ef8     35 6F 5A F2 | 	cmps	local03, local01 wcz
06efc     24 00 90 3D |  if_ae	jmp	#LR__0364
06f00     37 73 02 F6 | 	mov	local05, local03
06f04     02 72 06 F1 | 	add	local05, #2
06f08     39 75 E2 FA | 	rdword	local06, local05
06f0c     20 74 26 F5 | 	andn	local06, #32
06f10     39 75 52 FC | 	wrword	local06, local05
06f14     37 5D 02 F6 | 	mov	arg01, local03
06f18     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f1c     15 6F 0A F6 | 	mov	local03, result1 wz
06f20     D4 FF 9F 5D |  if_ne	jmp	#LR__0363
06f24                 | LR__0364
06f24     00 76 06 F6 | 	mov	local07, #0
06f28     00 5C 06 F6 | 	mov	arg01, #0
06f2c     5C EF BF FD | 	call	#__system____topofstack
06f30     15 79 02 F6 | 	mov	local08, result1
06f34     3B 5D 02 F6 | 	mov	arg01, local07
06f38     3C 5F 02 F6 | 	mov	arg02, local08
06f3c     A0 00 B0 FD | 	call	#__system___gc_markhub
06f40     2C 01 B0 FD | 	call	#__system___gc_markcog
06f44     36 5D 02 F6 | 	mov	arg01, local02
06f48     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f4c     15 7B 0A F6 | 	mov	local09, result1 wz
06f50     10 00 90 5D |  if_ne	jmp	#LR__0365
06f54     40 00 00 FF 
06f58     DD 5C 06 F6 | 	mov	arg01, ##@LR__0450
06f5c     94 FB BF FD | 	call	#__system___gc_errmsg
06f60     70 00 90 FD | 	jmp	#LR__0371
06f64                 | LR__0365
06f64                 | LR__0366
06f64     3D 6F 02 F6 | 	mov	local03, local09
06f68     37 5D 02 F6 | 	mov	arg01, local03
06f6c     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f70     15 7B 02 F6 | 	mov	local09, result1
06f74     37 7D 02 F6 | 	mov	local10, local03
06f78     02 7C 06 F1 | 	add	local10, #2
06f7c     3E 7F E2 FA | 	rdword	local11, local10
06f80     20 7E CE F7 | 	test	local11, #32 wz
06f84     3C 00 90 5D |  if_ne	jmp	#LR__0369
06f88     3F 81 02 F6 | 	mov	local12, local11
06f8c     10 80 0E F5 | 	and	local12, #16 wz
06f90     30 00 90 5D |  if_ne	jmp	#LR__0369
06f94     3F 77 02 F6 | 	mov	local07, local11
06f98     0F 76 06 F5 | 	and	local07, #15
06f9c     3B 7F 02 F6 | 	mov	local11, local07
06fa0     38 7F 0A F2 | 	cmp	local11, local04 wz
06fa4     08 00 90 AD |  if_e	jmp	#LR__0367
06fa8     0E 7E 0E F2 | 	cmp	local11, #14 wz
06fac     14 00 90 5D |  if_ne	jmp	#LR__0368
06fb0                 | LR__0367
06fb0     37 77 02 F6 | 	mov	local07, local03
06fb4     3B 5D 02 F6 | 	mov	arg01, local07
06fb8     E4 FC BF FD | 	call	#__system___gc_dofree
06fbc     15 81 02 F6 | 	mov	local12, result1
06fc0     40 7B 02 F6 | 	mov	local09, local12
06fc4                 | LR__0368
06fc4                 | LR__0369
06fc4     00 7A 0E F2 | 	cmp	local09, #0 wz
06fc8     08 00 90 AD |  if_e	jmp	#LR__0370
06fcc     35 7B 5A F2 | 	cmps	local09, local01 wcz
06fd0     90 FF 9F CD |  if_b	jmp	#LR__0366
06fd4                 | LR__0370
06fd4                 | LR__0371
06fd4     AF F0 03 F6 | 	mov	ptra, fp
06fd8     BF 00 A0 FD | 	call	#popregs_
06fdc                 | __system___gc_docollect_ret
06fdc     2D 00 64 FD | 	ret
06fe0                 | 
06fe0                 | __system___gc_markhub
06fe0     0A 5A 05 F6 | 	mov	COUNT_, #10
06fe4     B0 00 A0 FD | 	call	#pushregs_
06fe8     2E 6B 02 F6 | 	mov	local01, arg01
06fec     2F 6D 02 F6 | 	mov	local02, arg02
06ff0     40 F8 BF FD | 	call	#__system___gc_ptrs
06ff4     15 6F 02 F6 | 	mov	local03, result1
06ff8     16 71 02 F6 | 	mov	local04, result2
06ffc                 | LR__0372
06ffc     36 6B 5A F2 | 	cmps	local01, local02 wcz
07000     60 00 90 3D |  if_ae	jmp	#LR__0373
07004     35 61 02 FB | 	rdlong	arg03, local01
07008     04 6A 06 F1 | 	add	local01, #4
0700c     37 5D 02 F6 | 	mov	arg01, local03
07010     38 5F 02 F6 | 	mov	arg02, local04
07014     04 FC BF FD | 	call	#__system___gc_isvalidptr
07018     15 73 0A F6 | 	mov	local05, result1 wz
0701c     DC FF 9F AD |  if_e	jmp	#LR__0372
07020     39 5D 02 F6 | 	mov	arg01, local05
07024     00 74 06 F6 | 	mov	local06, #0
07028     02 5C 06 F1 | 	add	arg01, #2
0702c     2E 77 E2 FA | 	rdword	local07, arg01
07030     36 00 00 FF 
07034     8F 76 0E F2 | 	cmp	local07, ##27791 wz
07038     01 74 66 A6 |  if_e	neg	local06, #1
0703c     3A 2B 02 F6 | 	mov	result1, local06
07040     15 79 0A F6 | 	mov	local08, result1 wz
07044     B4 FF 9F 5D |  if_ne	jmp	#LR__0372
07048     39 7B 02 F6 | 	mov	local09, local05
0704c     02 7A 06 F1 | 	add	local09, #2
07050     3D 7D E2 FA | 	rdword	local10, local09
07054     0F 7C 26 F5 | 	andn	local10, #15
07058     2E 7C 46 F5 | 	or	local10, #46
0705c     3D 7D 52 FC | 	wrword	local10, local09
07060     98 FF 9F FD | 	jmp	#LR__0372
07064                 | LR__0373
07064     AF F0 03 F6 | 	mov	ptra, fp
07068     BF 00 A0 FD | 	call	#popregs_
0706c                 | __system___gc_markhub_ret
0706c     2D 00 64 FD | 	ret
07070                 | 
07070                 | __system___gc_markcog
07070     06 5A 05 F6 | 	mov	COUNT_, #6
07074     B0 00 A0 FD | 	call	#pushregs_
07078     B8 F7 BF FD | 	call	#__system___gc_ptrs
0707c     15 6B 02 F6 | 	mov	local01, result1
07080     16 6D 02 F6 | 	mov	local02, result2
07084     00 6E 06 F6 | 	mov	local03, #0
07088                 | LR__0374
07088     F0 71 06 F6 | 	mov	local04, #496
0708c     37 71 82 F1 | 	sub	local04, local03
07090     F0 71 06 F1 | 	add	local04, #496
07094                 | 	'.live	local04
07094     00 70 96 F9 | 	alts	local04, #0
07098     38 73 02 F6 | 	mov	local05, local04
0709c     36 5F 02 F6 | 	mov	arg02, local02
070a0     35 5D 02 F6 | 	mov	arg01, local01
070a4     39 61 02 F6 | 	mov	arg03, local05
070a8     70 FB BF FD | 	call	#__system___gc_isvalidptr
070ac     15 73 0A F6 | 	mov	local05, result1 wz
070b0     10 00 90 AD |  if_e	jmp	#LR__0375
070b4     02 72 06 F1 | 	add	local05, #2
070b8     39 75 E2 FA | 	rdword	local06, local05
070bc     20 74 46 F5 | 	or	local06, #32
070c0     39 75 52 FC | 	wrword	local06, local05
070c4                 | LR__0375
070c4     01 6E 06 F1 | 	add	local03, #1
070c8     F0 6F 5E F2 | 	cmps	local03, #496 wcz
070cc     B8 FF 9F CD |  if_b	jmp	#LR__0374
070d0     AF F0 03 F6 | 	mov	ptra, fp
070d4     BF 00 A0 FD | 	call	#popregs_
070d8                 | __system___gc_markcog_ret
070d8     2D 00 64 FD | 	ret
070dc                 | 
070dc                 | __system__write
070dc     03 5A 05 F6 | 	mov	COUNT_, #3
070e0     B0 00 A0 FD | 	call	#pushregs_
070e4     2E 6B 02 F6 | 	mov	local01, arg01
070e8     2F 6D 02 F6 | 	mov	local02, arg02
070ec     30 6F 02 F6 | 	mov	local03, arg03
070f0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
070f4     1C 00 90 CD |  if_b	jmp	#LR__0376
070f8     01 00 00 FF 
070fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07100     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07104     01 00 00 FF 
07108     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0710c     01 2A 66 F6 | 	neg	result1, #1
07110     28 00 90 FD | 	jmp	#LR__0377
07114                 | LR__0376
07114     35 5D 02 F6 | 	mov	arg01, local01
07118     01 5C 66 F0 | 	shl	arg01, #1
0711c     35 5D 02 F1 | 	add	arg01, local01
07120     04 5C 66 F0 | 	shl	arg01, #4
07124     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07128     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
0712c     36 5F 02 F6 | 	mov	arg02, local02
07130     37 61 02 F6 | 	mov	arg03, local03
07134     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07138     4C 09 B0 FD | 	call	#__system___vfswrite
0713c                 | LR__0377
0713c     AF F0 03 F6 | 	mov	ptra, fp
07140     BF 00 A0 FD | 	call	#popregs_
07144                 | __system__write_ret
07144     2D 00 64 FD | 	ret
07148                 | 
07148                 | __system__read
07148     03 5A 05 F6 | 	mov	COUNT_, #3
0714c     B0 00 A0 FD | 	call	#pushregs_
07150     2E 6B 02 F6 | 	mov	local01, arg01
07154     2F 6D 02 F6 | 	mov	local02, arg02
07158     30 6F 02 F6 | 	mov	local03, arg03
0715c     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07160     1C 00 90 CD |  if_b	jmp	#LR__0378
07164     01 00 00 FF 
07168     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0716c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07170     01 00 00 FF 
07174     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07178     01 2A 66 F6 | 	neg	result1, #1
0717c     28 00 90 FD | 	jmp	#LR__0379
07180                 | LR__0378
07180     35 5D 02 F6 | 	mov	arg01, local01
07184     01 5C 66 F0 | 	shl	arg01, #1
07188     35 5D 02 F1 | 	add	arg01, local01
0718c     04 5C 66 F0 | 	shl	arg01, #4
07190     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07194     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07198     36 5F 02 F6 | 	mov	arg02, local02
0719c     37 61 02 F6 | 	mov	arg03, local03
071a0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071a4     A4 0A B0 FD | 	call	#__system___vfsread
071a8                 | LR__0379
071a8     AF F0 03 F6 | 	mov	ptra, fp
071ac     BF 00 A0 FD | 	call	#popregs_
071b0                 | __system__read_ret
071b0     2D 00 64 FD | 	ret
071b4                 | 
071b4                 | __system__close
071b4     01 5A 05 F6 | 	mov	COUNT_, #1
071b8     B0 00 A0 FD | 	call	#pushregs_
071bc     2E 6B 02 F6 | 	mov	local01, arg01
071c0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071c4     1C 00 90 CD |  if_b	jmp	#LR__0380
071c8     01 00 00 FF 
071cc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071d0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071d4     01 00 00 FF 
071d8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071dc     01 2A 66 F6 | 	neg	result1, #1
071e0     20 00 90 FD | 	jmp	#LR__0381
071e4                 | LR__0380
071e4     35 5D 02 F6 | 	mov	arg01, local01
071e8     01 5C 66 F0 | 	shl	arg01, #1
071ec     35 5D 02 F1 | 	add	arg01, local01
071f0     04 5C 66 F0 | 	shl	arg01, #4
071f4     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071f8     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071fc     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07200     80 03 B0 FD | 	call	#__system___closeraw
07204                 | LR__0381
07204     AF F0 03 F6 | 	mov	ptra, fp
07208     BF 00 A0 FD | 	call	#popregs_
0720c                 | __system__close_ret
0720c     2D 00 64 FD | 	ret
07210                 | 
07210                 | __system__lseek
07210     09 5A 05 F6 | 	mov	COUNT_, #9
07214     B0 00 A0 FD | 	call	#pushregs_
07218     2E 6B 02 F6 | 	mov	local01, arg01
0721c     2F 6D 02 F6 | 	mov	local02, arg02
07220     30 6F 02 F6 | 	mov	local03, arg03
07224     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07228     1C 00 90 CD |  if_b	jmp	#LR__0382
0722c     01 00 00 FF 
07230     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07234     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07238     01 00 00 FF 
0723c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07240     01 2A 66 F6 | 	neg	result1, #1
07244     D8 00 90 FD | 	jmp	#LR__0386
07248                 | LR__0382
07248     35 71 02 F6 | 	mov	local04, local01
0724c     01 70 66 F0 | 	shl	local04, #1
07250     35 71 02 F1 | 	add	local04, local01
07254     04 70 66 F0 | 	shl	local04, #4
07258     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0725c     0A 71 02 F1 | 	add	local04, ptr___system__dat__
07260     2C 70 06 F1 | 	add	local04, #44
07264     38 73 0A FB | 	rdlong	local05, local04 wz
07268     2C 70 86 F1 | 	sub	local04, #44
0726c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07270     1C 00 90 5D |  if_ne	jmp	#LR__0383
07274     01 00 00 FF 
07278     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0727c     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07280     01 00 00 FF 
07284     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07288     01 2A 66 F6 | 	neg	result1, #1
0728c     90 00 90 FD | 	jmp	#LR__0386
07290                 | LR__0383
07290     08 70 06 F1 | 	add	local04, #8
07294     38 73 02 FB | 	rdlong	local05, local04
07298     08 70 86 F1 | 	sub	local04, #8
0729c     40 72 CE F7 | 	test	local05, #64 wz
072a0     14 00 90 AD |  if_e	jmp	#LR__0384
072a4     08 70 06 F1 | 	add	local04, #8
072a8     38 73 02 FB | 	rdlong	local05, local04
072ac     80 72 46 F5 | 	or	local05, #128
072b0     38 73 62 FC | 	wrlong	local05, local04
072b4     08 70 86 F1 | 	sub	local04, #8
072b8                 | LR__0384
072b8     2C 70 06 F1 | 	add	local04, #44
072bc     38 73 02 FB | 	rdlong	local05, local04
072c0     2C 70 86 F1 | 	sub	local04, #44
072c4     39 75 02 FB | 	rdlong	local06, local05
072c8     04 72 06 F1 | 	add	local05, #4
072cc     39 77 02 FB | 	rdlong	local07, local05
072d0     38 5D 02 F6 | 	mov	arg01, local04
072d4     36 5F 02 F6 | 	mov	arg02, local02
072d8     37 61 02 F6 | 	mov	arg03, local03
072dc     07 79 02 F6 | 	mov	local08, objptr
072e0     3A 0F 02 F6 | 	mov	objptr, local06
072e4     2D 76 62 FD | 	call	local07
072e8     3C 0F 02 F6 | 	mov	objptr, local08
072ec     15 7B 02 F6 | 	mov	local09, result1
072f0     00 7A 5E F2 | 	cmps	local09, #0 wcz
072f4     24 00 90 3D |  if_ae	jmp	#LR__0385
072f8     3D 5D 6A F6 | 	neg	arg01, local09 wz
072fc     01 00 00 FF 
07300     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07304     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07308     01 00 00 FF 
0730c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07310     01 2A 66 56 |  if_ne	neg	result1, #1
07314     00 2A 06 A6 |  if_e	mov	result1, #0
07318     04 00 90 FD | 	jmp	#LR__0386
0731c                 | LR__0385
0731c     3D 2B 02 F6 | 	mov	result1, local09
07320                 | LR__0386
07320     AF F0 03 F6 | 	mov	ptra, fp
07324     BF 00 A0 FD | 	call	#popregs_
07328                 | __system__lseek_ret
07328     2D 00 64 FD | 	ret
0732c                 | 
0732c                 | __system____getftab
0732c     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
07330     00 2A 06 36 |  if_ae	mov	result1, #0
07334     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07338     2E 2B 02 F6 | 	mov	result1, arg01
0733c     01 2A 66 F0 | 	shl	result1, #1
07340     2E 2B 02 F1 | 	add	result1, arg01
07344     04 2A 66 F0 | 	shl	result1, #4
07348     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0734c     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
07350     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07354                 | __system____getftab_ret
07354     2D 00 64 FD | 	ret
07358                 | 
07358                 | __system___strrev
07358     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
0735c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
07360     2E 33 02 F6 | 	mov	_var02, arg01
07364     A4 8C 9F FE | 	loc	pa,	#(@LR__0388-@LR__0387)
07368     93 00 A0 FD | 	call	#FCACHE_LOAD_
0736c                 | LR__0387
0736c     19 31 CA FA | 	rdbyte	_var01, _var02 wz
07370     01 32 06 51 |  if_ne	add	_var02, #1
07374     F4 FF 9F 5D |  if_ne	jmp	#LR__0387
07378                 | LR__0388
07378     01 32 86 F1 | 	sub	_var02, #1
0737c                 | LR__0389
0737c     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07380     1C 00 90 ED |  if_be	jmp	#LR__0390
07384     2E 35 C2 FA | 	rdbyte	_var03, arg01
07388     19 37 C2 FA | 	rdbyte	_var04, _var02
0738c     2E 37 42 FC | 	wrbyte	_var04, arg01
07390     19 35 42 FC | 	wrbyte	_var03, _var02
07394     01 5C 06 F1 | 	add	arg01, #1
07398     01 32 86 F1 | 	sub	_var02, #1
0739c     DC FF 9F FD | 	jmp	#LR__0389
073a0                 | LR__0390
073a0                 | __system___strrev_ret
073a0     2D 00 64 FD | 	ret
073a4                 | 
073a4                 | __system___fmtpad
073a4     0C 5A 05 F6 | 	mov	COUNT_, #12
073a8     B0 00 A0 FD | 	call	#pushregs_
073ac     2E 6B 02 F6 | 	mov	local01, arg01
073b0     2F 6D 02 F6 | 	mov	local02, arg02
073b4     31 6F 02 F6 | 	mov	local03, arg04
073b8     36 71 EA F8 | 	getbyte	local04, local02, #1
073bc     16 6C 46 F0 | 	shr	local02, #22
073c0     03 6C 0E F5 | 	and	local02, #3 wz
073c4     00 72 06 F6 | 	mov	local05, #0
073c8     01 6C 06 A6 |  if_e	mov	local02, #1
073cc     37 6D CA F7 | 	test	local02, local03 wz
073d0     00 2A 06 A6 |  if_e	mov	result1, #0
073d4     80 00 90 AD |  if_e	jmp	#LR__0394
073d8     30 71 82 F1 | 	sub	local04, arg03
073dc     38 75 02 F6 | 	mov	local06, local04
073e0     00 74 5E F2 | 	cmps	local06, #0 wcz
073e4     00 2A 06 E6 |  if_be	mov	result1, #0
073e8     6C 00 90 ED |  if_be	jmp	#LR__0394
073ec     03 6C 0E F2 | 	cmp	local02, #3 wz
073f0     18 00 90 5D |  if_ne	jmp	#LR__0391
073f4     01 6E 0E F2 | 	cmp	local03, #1 wz
073f8     6E 76 62 FD | 	wrz	local07
073fc     3B 75 02 F1 | 	add	local06, local07
07400     3A 75 52 F6 | 	abs	local06, local06 wc
07404     01 74 46 F0 | 	shr	local06, #1
07408     3A 75 62 C6 |  if_b	neg	local06, local06
0740c                 | LR__0391
0740c     00 74 5E F2 | 	cmps	local06, #0 wcz
07410     40 00 90 ED |  if_be	jmp	#LR__0393
07414     3A 79 02 F6 | 	mov	local08, local06
07418                 | LR__0392
07418     35 7B 02 F6 | 	mov	local09, local01
0741c     3D 77 02 FB | 	rdlong	local07, local09
07420     04 7A 06 F1 | 	add	local09, #4
07424     3D 7D 02 FB | 	rdlong	local10, local09
07428     20 5C 06 F6 | 	mov	arg01, #32
0742c     07 7F 02 F6 | 	mov	local11, objptr
07430     3B 0F 02 F6 | 	mov	objptr, local07
07434     2D 7C 62 FD | 	call	local10
07438     3F 0F 02 F6 | 	mov	objptr, local11
0743c     15 81 02 F6 | 	mov	local12, result1
07440     00 80 5E F2 | 	cmps	local12, #0 wcz
07444     40 2B 02 C6 |  if_b	mov	result1, local12
07448     0C 00 90 CD |  if_b	jmp	#LR__0394
0744c     40 73 02 F1 | 	add	local05, local12
07450     F1 79 6E FB | 	djnz	local08, #LR__0392
07454                 | LR__0393
07454     39 2B 02 F6 | 	mov	result1, local05
07458                 | LR__0394
07458     AF F0 03 F6 | 	mov	ptra, fp
0745c     BF 00 A0 FD | 	call	#popregs_
07460                 | __system___fmtpad_ret
07460     2D 00 64 FD | 	ret
07464                 | 
07464                 | __system___uitoa
07464     09 5A 05 F6 | 	mov	COUNT_, #9
07468     B0 00 A0 FD | 	call	#pushregs_
0746c     2E 6B 02 F6 | 	mov	local01, arg01
07470     2F 6D 02 F6 | 	mov	local02, arg02
07474     30 6F 02 F6 | 	mov	local03, arg03
07478     31 71 02 F6 | 	mov	local04, arg04
0747c     32 73 0A F6 | 	mov	local05, arg05 wz
07480     35 75 02 F6 | 	mov	local06, local01
07484     00 76 06 F6 | 	mov	local07, #0
07488     37 78 06 56 |  if_ne	mov	local08, #55
0748c     57 78 06 A6 |  if_e	mov	local08, #87
07490                 | LR__0395
07490     36 0B 03 F6 | 	mov	muldiva_, local02
07494     37 0D 03 F6 | 	mov	muldivb_, local03
07498     CC 00 A0 FD | 	call	#unsdivide_
0749c     85 7B 02 F6 | 	mov	local09, muldiva_
074a0     0A 7A 1E F2 | 	cmp	local09, #10 wcz
074a4     30 7A 06 C1 |  if_b	add	local09, #48
074a8     3C 7B 02 31 |  if_ae	add	local09, local08
074ac     3A 7B 42 FC | 	wrbyte	local09, local06
074b0     36 0B 03 F6 | 	mov	muldiva_, local02
074b4     37 0D 03 F6 | 	mov	muldivb_, local03
074b8     01 74 06 F1 | 	add	local06, #1
074bc     CC 00 A0 FD | 	call	#unsdivide_
074c0     86 6D 0A F6 | 	mov	local02, muldivb_ wz
074c4     01 76 06 F1 | 	add	local07, #1
074c8     C4 FF 9F 5D |  if_ne	jmp	#LR__0395
074cc     38 77 1A F2 | 	cmp	local07, local04 wcz
074d0     BC FF 9F CD |  if_b	jmp	#LR__0395
074d4     3A 01 48 FC | 	wrbyte	#0, local06
074d8     35 5D 02 F6 | 	mov	arg01, local01
074dc     78 FE BF FD | 	call	#__system___strrev
074e0     3B 2B 02 F6 | 	mov	result1, local07
074e4     AF F0 03 F6 | 	mov	ptra, fp
074e8     BF 00 A0 FD | 	call	#popregs_
074ec                 | __system___uitoa_ret
074ec     2D 00 64 FD | 	ret
074f0                 | 
074f0                 | __system___gettxfunc
074f0     03 5A 05 F6 | 	mov	COUNT_, #3
074f4     B0 00 A0 FD | 	call	#pushregs_
074f8     30 FE BF FD | 	call	#__system____getftab
074fc     15 6B 0A F6 | 	mov	local01, result1 wz
07500     14 00 90 AD |  if_e	jmp	#LR__0396
07504     08 6A 06 F1 | 	add	local01, #8
07508     35 6D 02 FB | 	rdlong	local02, local01
0750c     08 6A 86 F1 | 	sub	local01, #8
07510     36 6F 0A F6 | 	mov	local03, local02 wz
07514     08 00 90 5D |  if_ne	jmp	#LR__0397
07518                 | LR__0396
07518     00 2A 06 F6 | 	mov	result1, #0
0751c     0C 00 90 FD | 	jmp	#LR__0398
07520                 | LR__0397
07520     35 5D 02 F6 | 	mov	arg01, local01
07524     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07528     88 E9 BF FD | 	call	#__system___make_methodptr
0752c                 | LR__0398
0752c     AF F0 03 F6 | 	mov	ptra, fp
07530     BF 00 A0 FD | 	call	#popregs_
07534                 | __system___gettxfunc_ret
07534     2D 00 64 FD | 	ret
07538                 | 
07538                 | __system___getiolock_0145
07538     03 5A 05 F6 | 	mov	COUNT_, #3
0753c     B0 00 A0 FD | 	call	#pushregs_
07540     E8 FD BF FD | 	call	#__system____getftab
07544     15 6B 0A F6 | 	mov	local01, result1 wz
07548     14 00 90 AD |  if_e	jmp	#LR__0399
0754c     08 6A 06 F1 | 	add	local01, #8
07550     35 6D 02 FB | 	rdlong	local02, local01
07554     08 6A 86 F1 | 	sub	local01, #8
07558     36 6F 0A F6 | 	mov	local03, local02 wz
0755c     10 00 90 5D |  if_ne	jmp	#LR__0400
07560                 | LR__0399
07560     18 14 06 F1 | 	add	ptr___system__dat__, #24
07564     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07568     18 14 86 F1 | 	sub	ptr___system__dat__, #24
0756c     08 00 90 FD | 	jmp	#LR__0401
07570                 | LR__0400
07570     0C 6A 06 F1 | 	add	local01, #12
07574     35 2B 02 F6 | 	mov	result1, local01
07578                 | LR__0401
07578     AF F0 03 F6 | 	mov	ptra, fp
0757c     BF 00 A0 FD | 	call	#popregs_
07580                 | __system___getiolock_0145_ret
07580     2D 00 64 FD | 	ret
07584                 | 
07584                 | __system___closeraw
07584     06 5A 05 F6 | 	mov	COUNT_, #6
07588     B0 00 A0 FD | 	call	#pushregs_
0758c     2E 6B 02 F6 | 	mov	local01, arg01
07590     00 6C 06 F6 | 	mov	local02, #0
07594     08 6A 06 F1 | 	add	local01, #8
07598     35 6F 0A FB | 	rdlong	local03, local01 wz
0759c     08 6A 86 F1 | 	sub	local01, #8
075a0     1C 00 90 5D |  if_ne	jmp	#LR__0402
075a4     01 00 00 FF 
075a8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
075ac     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075b0     01 00 00 FF 
075b4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
075b8     01 2A 66 F6 | 	neg	result1, #1
075bc     90 00 90 FD | 	jmp	#LR__0405
075c0                 | LR__0402
075c0     28 6A 06 F1 | 	add	local01, #40
075c4     35 6F 0A FB | 	rdlong	local03, local01 wz
075c8     28 6A 86 F1 | 	sub	local01, #40
075cc     2C 00 90 AD |  if_e	jmp	#LR__0403
075d0     28 6A 06 F1 | 	add	local01, #40
075d4     35 6F 02 FB | 	rdlong	local03, local01
075d8     28 6A 86 F1 | 	sub	local01, #40
075dc     37 71 02 FB | 	rdlong	local04, local03
075e0     04 6E 06 F1 | 	add	local03, #4
075e4     37 73 02 FB | 	rdlong	local05, local03
075e8     35 5D 02 F6 | 	mov	arg01, local01
075ec     07 75 02 F6 | 	mov	local06, objptr
075f0     38 0F 02 F6 | 	mov	objptr, local04
075f4     2D 72 62 FD | 	call	local05
075f8     3A 0F 02 F6 | 	mov	objptr, local06
075fc                 | LR__0403
075fc     20 6A 06 F1 | 	add	local01, #32
07600     35 6F 0A FB | 	rdlong	local03, local01 wz
07604     20 6A 86 F1 | 	sub	local01, #32
07608     30 00 90 AD |  if_e	jmp	#LR__0404
0760c     20 6A 06 F1 | 	add	local01, #32
07610     35 6F 02 FB | 	rdlong	local03, local01
07614     20 6A 86 F1 | 	sub	local01, #32
07618     37 71 02 FB | 	rdlong	local04, local03
0761c     04 6E 06 F1 | 	add	local03, #4
07620     37 73 02 FB | 	rdlong	local05, local03
07624     35 5D 02 F6 | 	mov	arg01, local01
07628     07 75 02 F6 | 	mov	local06, objptr
0762c     38 0F 02 F6 | 	mov	objptr, local04
07630     2D 72 62 FD | 	call	local05
07634     3A 0F 02 F6 | 	mov	objptr, local06
07638     15 6D 02 F6 | 	mov	local02, result1
0763c                 | LR__0404
0763c     35 5D 02 F6 | 	mov	arg01, local01
07640     00 5E 06 F6 | 	mov	arg02, #0
07644     30 60 06 F6 | 	mov	arg03, #48
07648     A0 00 A0 FD | 	call	#\builtin_bytefill_
0764c     36 2B 02 F6 | 	mov	result1, local02
07650                 | LR__0405
07650     AF F0 03 F6 | 	mov	ptra, fp
07654     BF 00 A0 FD | 	call	#popregs_
07658                 | __system___closeraw_ret
07658     2D 00 64 FD | 	ret
0765c                 | 
0765c                 | __system____default_getc
0765c     0C 5A 05 F6 | 	mov	COUNT_, #12
07660     B0 00 A0 FD | 	call	#pushregs_
07664     2E 6B 02 F6 | 	mov	local01, arg01
07668     35 6D 02 FB | 	rdlong	local02, local01
0766c     08 6C 06 F1 | 	add	local02, #8
07670     36 6F 02 FB | 	rdlong	local03, local02
07674     08 6C 86 F1 | 	sub	local02, #8
07678     02 6E CE F7 | 	test	local03, #2 wz
0767c     08 00 90 AD |  if_e	jmp	#LR__0406
07680     35 5D 02 F6 | 	mov	arg01, local01
07684     FC 01 B0 FD | 	call	#__system____default_flush
07688                 | LR__0406
07688     08 6C 06 F1 | 	add	local02, #8
0768c     36 6F 02 FB | 	rdlong	local03, local02
07690     01 6E 46 F5 | 	or	local03, #1
07694     36 6F 62 FC | 	wrlong	local03, local02
07698     08 6C 86 F1 | 	sub	local02, #8
0769c     36 71 0A FB | 	rdlong	local04, local02 wz
076a0     7C 00 90 5D |  if_ne	jmp	#LR__0408
076a4     35 5D 02 F6 | 	mov	arg01, local01
076a8     2E 73 02 FB | 	rdlong	local05, arg01
076ac     0C 72 06 F1 | 	add	local05, #12
076b0     39 5F 02 F6 | 	mov	arg02, local05
076b4     0C 72 86 F1 | 	sub	local05, #12
076b8     10 5C 06 F1 | 	add	arg01, #16
076bc     2E 75 02 FB | 	rdlong	local06, arg01
076c0     10 5C 86 F1 | 	sub	arg01, #16
076c4     3A 77 02 FB | 	rdlong	local07, local06
076c8     04 74 06 F1 | 	add	local06, #4
076cc     3A 79 02 FB | 	rdlong	local08, local06
076d0     0A 60 C6 F9 | 	decod	arg03, #10
076d4     07 7B 02 F6 | 	mov	local09, objptr
076d8     3B 0F 02 F6 | 	mov	objptr, local07
076dc     2D 78 62 FD | 	call	local08
076e0     3D 0F 02 F6 | 	mov	objptr, local09
076e4     15 7D 02 F6 | 	mov	local10, result1
076e8     00 7C 5E F2 | 	cmps	local10, #0 wcz
076ec     01 2A 66 C6 |  if_b	neg	result1, #1
076f0     28 00 90 CD |  if_b	jmp	#LR__0407
076f4     39 7D 62 FC | 	wrlong	local10, local05
076f8     0C 72 06 F1 | 	add	local05, #12
076fc     39 7F 02 F6 | 	mov	local11, local05
07700     08 72 86 F1 | 	sub	local05, #8
07704     39 7F 62 FC | 	wrlong	local11, local05
07708     04 72 06 F1 | 	add	local05, #4
0770c     39 75 02 FB | 	rdlong	local06, local05
07710     01 74 46 F5 | 	or	local06, #1
07714     39 75 62 FC | 	wrlong	local06, local05
07718     3E 2B 02 F6 | 	mov	result1, local10
0771c                 | LR__0407
0771c     15 71 02 F6 | 	mov	local04, result1
07720                 | LR__0408
07720     00 70 5E F2 | 	cmps	local04, #0 wcz
07724     01 2A 66 E6 |  if_be	neg	result1, #1
07728     1C 00 90 ED |  if_be	jmp	#LR__0409
0772c     01 70 86 F1 | 	sub	local04, #1
07730     36 71 62 FC | 	wrlong	local04, local02
07734     04 6C 06 F1 | 	add	local02, #4
07738     36 81 02 FB | 	rdlong	local12, local02
0773c     40 2B C2 FA | 	rdbyte	result1, local12
07740     01 80 06 F1 | 	add	local12, #1
07744     36 81 62 FC | 	wrlong	local12, local02
07748                 | LR__0409
07748     AF F0 03 F6 | 	mov	ptra, fp
0774c     BF 00 A0 FD | 	call	#popregs_
07750                 | __system____default_getc_ret
07750     2D 00 64 FD | 	ret
07754                 | 
07754                 | __system____default_putc
07754     06 5A 05 F6 | 	mov	COUNT_, #6
07758     B0 00 A0 FD | 	call	#pushregs_
0775c     2E 6B 02 F6 | 	mov	local01, arg01
07760     2F 6D 02 F6 | 	mov	local02, arg02
07764     36 6F 02 FB | 	rdlong	local03, local02
07768     08 6E 06 F1 | 	add	local03, #8
0776c     37 71 02 FB | 	rdlong	local04, local03
07770     08 6E 86 F1 | 	sub	local03, #8
07774     01 70 CE F7 | 	test	local04, #1 wz
07778     08 00 90 AD |  if_e	jmp	#LR__0410
0777c     36 5D 02 F6 | 	mov	arg01, local02
07780     00 01 B0 FD | 	call	#__system____default_flush
07784                 | LR__0410
07784     08 6E 06 F1 | 	add	local03, #8
07788     37 71 02 FB | 	rdlong	local04, local03
0778c     02 70 46 F5 | 	or	local04, #2
07790     37 71 62 FC | 	wrlong	local04, local03
07794     08 6E 86 F1 | 	sub	local03, #8
07798     37 73 02 FB | 	rdlong	local05, local03
0779c     39 75 02 F6 | 	mov	local06, local05
077a0     0C 6E 06 F1 | 	add	local03, #12
077a4     37 75 02 F1 | 	add	local06, local03
077a8     3A 6B 42 FC | 	wrbyte	local01, local06
077ac     FF 6A 06 F5 | 	and	local01, #255
077b0     01 72 06 F1 | 	add	local05, #1
077b4     0C 6E 86 F1 | 	sub	local03, #12
077b8     37 73 62 FC | 	wrlong	local05, local03
077bc     02 00 00 FF 
077c0     00 72 0E F2 | 	cmp	local05, ##1024 wz
077c4     10 00 90 5D |  if_ne	jmp	#LR__0411
077c8     36 5D 02 F6 | 	mov	arg01, local02
077cc     B4 00 B0 FD | 	call	#__system____default_flush
077d0     00 2A 0E F2 | 	cmp	result1, #0 wz
077d4     01 6A 66 56 |  if_ne	neg	local01, #1
077d8                 | LR__0411
077d8     35 2B 02 F6 | 	mov	result1, local01
077dc     AF F0 03 F6 | 	mov	ptra, fp
077e0     BF 00 A0 FD | 	call	#popregs_
077e4                 | __system____default_putc_ret
077e4     2D 00 64 FD | 	ret
077e8                 | 
077e8                 | __system____default_putc_terminal
077e8     06 5A 05 F6 | 	mov	COUNT_, #6
077ec     B0 00 A0 FD | 	call	#pushregs_
077f0     2E 6B 02 F6 | 	mov	local01, arg01
077f4     2F 6D 02 F6 | 	mov	local02, arg02
077f8     36 6F 02 FB | 	rdlong	local03, local02
077fc     08 6E 06 F1 | 	add	local03, #8
07800     37 71 02 FB | 	rdlong	local04, local03
07804     08 6E 86 F1 | 	sub	local03, #8
07808     01 70 CE F7 | 	test	local04, #1 wz
0780c     08 00 90 AD |  if_e	jmp	#LR__0412
07810     36 5D 02 F6 | 	mov	arg01, local02
07814     6C 00 B0 FD | 	call	#__system____default_flush
07818                 | LR__0412
07818     08 6E 06 F1 | 	add	local03, #8
0781c     37 71 02 FB | 	rdlong	local04, local03
07820     02 70 46 F5 | 	or	local04, #2
07824     37 71 62 FC | 	wrlong	local04, local03
07828     08 6E 86 F1 | 	sub	local03, #8
0782c     37 73 02 FB | 	rdlong	local05, local03
07830     39 75 02 F6 | 	mov	local06, local05
07834     0C 6E 06 F1 | 	add	local03, #12
07838     37 75 02 F1 | 	add	local06, local03
0783c     3A 6B 42 FC | 	wrbyte	local01, local06
07840     FF 6A 06 F5 | 	and	local01, #255
07844     0C 6E 86 F1 | 	sub	local03, #12
07848     01 72 06 F1 | 	add	local05, #1
0784c     37 73 62 FC | 	wrlong	local05, local03
07850     0A 6A 0E F2 | 	cmp	local01, #10 wz
07854     0C 00 90 AD |  if_e	jmp	#LR__0413
07858     02 00 00 FF 
0785c     00 72 0E F2 | 	cmp	local05, ##1024 wz
07860     10 00 90 5D |  if_ne	jmp	#LR__0414
07864                 | LR__0413
07864     36 5D 02 F6 | 	mov	arg01, local02
07868     18 00 B0 FD | 	call	#__system____default_flush
0786c     00 2A 0E F2 | 	cmp	result1, #0 wz
07870     01 6A 66 56 |  if_ne	neg	local01, #1
07874                 | LR__0414
07874     35 2B 02 F6 | 	mov	result1, local01
07878     AF F0 03 F6 | 	mov	ptra, fp
0787c     BF 00 A0 FD | 	call	#popregs_
07880                 | __system____default_putc_terminal_ret
07880     2D 00 64 FD | 	ret
07884                 | 
07884                 | __system____default_flush
07884     0F 5A 05 F6 | 	mov	COUNT_, #15
07888     B0 00 A0 FD | 	call	#pushregs_
0788c     2E 6B 02 F6 | 	mov	local01, arg01
07890     35 6D 02 FB | 	rdlong	local02, local01
07894     36 6F 02 FB | 	rdlong	local03, local02
07898     08 6C 06 F1 | 	add	local02, #8
0789c     36 71 02 FB | 	rdlong	local04, local02
078a0     08 6C 86 F1 | 	sub	local02, #8
078a4     02 70 CE F7 | 	test	local04, #2 wz
078a8     B8 00 90 AD |  if_e	jmp	#LR__0417
078ac     00 6E 5E F2 | 	cmps	local03, #0 wcz
078b0     30 01 90 ED |  if_be	jmp	#LR__0419
078b4     08 6A 06 F1 | 	add	local01, #8
078b8     35 71 02 FB | 	rdlong	local04, local01
078bc     08 6A 86 F1 | 	sub	local01, #8
078c0     40 70 CE F7 | 	test	local04, #64 wz
078c4     5C 00 90 AD |  if_e	jmp	#LR__0416
078c8     08 6A 06 F1 | 	add	local01, #8
078cc     35 71 02 FB | 	rdlong	local04, local01
078d0     08 6A 86 F1 | 	sub	local01, #8
078d4     80 70 CE F7 | 	test	local04, #128 wz
078d8     48 00 90 AD |  if_e	jmp	#LR__0415
078dc     2C 6A 06 F1 | 	add	local01, #44
078e0     35 71 02 FB | 	rdlong	local04, local01
078e4     2C 6A 86 F1 | 	sub	local01, #44
078e8     38 73 02 FB | 	rdlong	local05, local04
078ec     04 70 06 F1 | 	add	local04, #4
078f0     38 75 02 FB | 	rdlong	local06, local04
078f4     35 5D 02 F6 | 	mov	arg01, local01
078f8     00 5E 06 F6 | 	mov	arg02, #0
078fc     02 60 06 F6 | 	mov	arg03, #2
07900     07 77 02 F6 | 	mov	local07, objptr
07904     39 0F 02 F6 | 	mov	objptr, local05
07908     2D 74 62 FD | 	call	local06
0790c     3B 0F 02 F6 | 	mov	objptr, local07
07910     08 6A 06 F1 | 	add	local01, #8
07914     35 71 02 FB | 	rdlong	local04, local01
07918     80 70 26 F5 | 	andn	local04, #128
0791c     35 71 62 FC | 	wrlong	local04, local01
07920     08 6A 86 F1 | 	sub	local01, #8
07924                 | LR__0415
07924                 | LR__0416
07924     0C 6C 06 F1 | 	add	local02, #12
07928     36 5F 02 F6 | 	mov	arg02, local02
0792c     0C 6C 86 F1 | 	sub	local02, #12
07930     14 6A 06 F1 | 	add	local01, #20
07934     35 71 02 FB | 	rdlong	local04, local01
07938     14 6A 86 F1 | 	sub	local01, #20
0793c     38 73 02 FB | 	rdlong	local05, local04
07940     04 70 06 F1 | 	add	local04, #4
07944     38 75 02 FB | 	rdlong	local06, local04
07948     35 5D 02 F6 | 	mov	arg01, local01
0794c     37 61 02 F6 | 	mov	arg03, local03
07950     07 77 02 F6 | 	mov	local07, objptr
07954     39 0F 02 F6 | 	mov	objptr, local05
07958     2D 74 62 FD | 	call	local06
0795c     3B 0F 02 F6 | 	mov	objptr, local07
07960     80 00 90 FD | 	jmp	#LR__0419
07964                 | LR__0417
07964     08 6C 06 F1 | 	add	local02, #8
07968     36 71 02 FB | 	rdlong	local04, local02
0796c     08 6C 86 F1 | 	sub	local02, #8
07970     01 70 CE F7 | 	test	local04, #1 wz
07974     6C 00 90 AD |  if_e	jmp	#LR__0418
07978     00 6E 0E F2 | 	cmp	local03, #0 wz
0797c     64 00 90 AD |  if_e	jmp	#LR__0418
07980     2C 6A 06 F1 | 	add	local01, #44
07984     35 79 02 FB | 	rdlong	local08, local01
07988     2C 6A 86 F1 | 	sub	local01, #44
0798c     3C 71 02 F6 | 	mov	local04, local08
07990     38 73 02 FB | 	rdlong	local05, local04
07994     04 70 06 F1 | 	add	local04, #4
07998     38 7B 02 FB | 	rdlong	local09, local04
0799c     04 70 86 F1 | 	sub	local04, #4
079a0     3D 75 02 F6 | 	mov	local06, local09
079a4     35 7D 02 F6 | 	mov	local10, local01
079a8     37 7F 02 F6 | 	mov	local11, local03
079ac     3F 7F 62 F6 | 	neg	local11, local11
079b0     3F 81 02 F6 | 	mov	local12, local11
079b4     01 76 06 F6 | 	mov	local07, #1
079b8     3E 5D 02 F6 | 	mov	arg01, local10
079bc     40 5F 02 F6 | 	mov	arg02, local12
079c0     01 60 06 F6 | 	mov	arg03, #1
079c4     07 83 02 F6 | 	mov	local13, objptr
079c8     39 0F 02 F6 | 	mov	objptr, local05
079cc     2D 74 62 FD | 	call	local06
079d0     41 0F 02 F6 | 	mov	objptr, local13
079d4     15 85 02 F6 | 	mov	local14, result1
079d8     42 87 02 F6 | 	mov	local15, local14
079dc     00 86 5E F2 | 	cmps	local15, #0 wcz
079e0     37 87 02 36 |  if_ae	mov	local15, local03
079e4                 | LR__0418
079e4                 | LR__0419
079e4     36 01 68 FC | 	wrlong	#0, local02
079e8     04 6C 06 F1 | 	add	local02, #4
079ec     36 01 68 FC | 	wrlong	#0, local02
079f0     04 6C 06 F1 | 	add	local02, #4
079f4     36 01 68 FC | 	wrlong	#0, local02
079f8     00 2A 06 F6 | 	mov	result1, #0
079fc     AF F0 03 F6 | 	mov	ptra, fp
07a00     BF 00 A0 FD | 	call	#popregs_
07a04                 | __system____default_flush_ret
07a04     2D 00 64 FD | 	ret
07a08                 | 
07a08                 | __system___rxtxioctl_0174
07a08     02 5A 05 F6 | 	mov	COUNT_, #2
07a0c     B0 00 A0 FD | 	call	#pushregs_
07a10     2F 6B 02 F6 | 	mov	local01, arg02
07a14     30 6D 02 F6 | 	mov	local02, arg03
07a18     00 6B 0E F2 | 	cmp	local01, #256 wz
07a1c     0C 00 90 AD |  if_e	jmp	#LR__0420
07a20     01 6B 0E F2 | 	cmp	local01, #257 wz
07a24     1C 00 90 AD |  if_e	jmp	#LR__0421
07a28     30 00 90 FD | 	jmp	#LR__0422
07a2c                 | LR__0420
07a2c     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a30     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07a34     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a38     36 2B 62 FC | 	wrlong	result1, local02
07a3c     00 2A 06 F6 | 	mov	result1, #0
07a40     30 00 90 FD | 	jmp	#LR__0423
07a44                 | LR__0421
07a44     36 5D 02 FB | 	rdlong	arg01, local02
07a48     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a4c     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07a50     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a54     00 2A 06 F6 | 	mov	result1, #0
07a58     18 00 90 FD | 	jmp	#LR__0423
07a5c                 | LR__0422
07a5c     01 00 00 FF 
07a60     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a64     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07a68     01 00 00 FF 
07a6c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a70     01 2A 66 F6 | 	neg	result1, #1
07a74                 | LR__0423
07a74     AF F0 03 F6 | 	mov	ptra, fp
07a78     BF 00 A0 FD | 	call	#popregs_
07a7c                 | __system___rxtxioctl_0174_ret
07a7c     2D 00 64 FD | 	ret
07a80                 | 
07a80                 | __system____dummy_flush_0175
07a80     00 2A 06 F6 | 	mov	result1, #0
07a84                 | __system____dummy_flush_0175_ret
07a84     2D 00 64 FD | 	ret
07a88                 | 
07a88                 | __system___vfswrite
07a88     0B 5A 05 F6 | 	mov	COUNT_, #11
07a8c     B0 00 A0 FD | 	call	#pushregs_
07a90     2E 6B 02 F6 | 	mov	local01, arg01
07a94     2F 6D 02 F6 | 	mov	local02, arg02
07a98     30 6F 02 F6 | 	mov	local03, arg03
07a9c     36 71 02 F6 | 	mov	local04, local02
07aa0     08 6A 06 F1 | 	add	local01, #8
07aa4     35 73 02 FB | 	rdlong	local05, local01
07aa8     08 6A 86 F1 | 	sub	local01, #8
07aac     02 72 CE F7 | 	test	local05, #2 wz
07ab0     1C 00 90 5D |  if_ne	jmp	#LR__0424
07ab4     01 00 00 FF 
07ab8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07abc     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07ac0     01 00 00 FF 
07ac4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07ac8     01 2A 66 F6 | 	neg	result1, #1
07acc     70 01 90 FD | 	jmp	#LR__0432
07ad0                 | LR__0424
07ad0     08 6A 06 F1 | 	add	local01, #8
07ad4     35 73 02 FB | 	rdlong	local05, local01
07ad8     08 6A 86 F1 | 	sub	local01, #8
07adc     40 72 CE F7 | 	test	local05, #64 wz
07ae0     5C 00 90 AD |  if_e	jmp	#LR__0426
07ae4     08 6A 06 F1 | 	add	local01, #8
07ae8     35 73 02 FB | 	rdlong	local05, local01
07aec     08 6A 86 F1 | 	sub	local01, #8
07af0     80 72 CE F7 | 	test	local05, #128 wz
07af4     48 00 90 AD |  if_e	jmp	#LR__0425
07af8     2C 6A 06 F1 | 	add	local01, #44
07afc     35 73 02 FB | 	rdlong	local05, local01
07b00     2C 6A 86 F1 | 	sub	local01, #44
07b04     39 75 02 FB | 	rdlong	local06, local05
07b08     04 72 06 F1 | 	add	local05, #4
07b0c     39 77 02 FB | 	rdlong	local07, local05
07b10     35 5D 02 F6 | 	mov	arg01, local01
07b14     00 5E 06 F6 | 	mov	arg02, #0
07b18     02 60 06 F6 | 	mov	arg03, #2
07b1c     07 79 02 F6 | 	mov	local08, objptr
07b20     3A 0F 02 F6 | 	mov	objptr, local06
07b24     2D 76 62 FD | 	call	local07
07b28     3C 0F 02 F6 | 	mov	objptr, local08
07b2c     08 6A 06 F1 | 	add	local01, #8
07b30     35 73 02 FB | 	rdlong	local05, local01
07b34     80 72 26 F5 | 	andn	local05, #128
07b38     35 73 62 FC | 	wrlong	local05, local01
07b3c     08 6A 86 F1 | 	sub	local01, #8
07b40                 | LR__0425
07b40                 | LR__0426
07b40     14 6A 06 F1 | 	add	local01, #20
07b44     35 73 0A FB | 	rdlong	local05, local01 wz
07b48     14 6A 86 F1 | 	sub	local01, #20
07b4c     7C 00 90 AD |  if_e	jmp	#LR__0428
07b50     14 6A 06 F1 | 	add	local01, #20
07b54     35 73 02 FB | 	rdlong	local05, local01
07b58     14 6A 86 F1 | 	sub	local01, #20
07b5c     39 75 02 FB | 	rdlong	local06, local05
07b60     04 72 06 F1 | 	add	local05, #4
07b64     39 77 02 FB | 	rdlong	local07, local05
07b68     36 5F 02 F6 | 	mov	arg02, local02
07b6c     37 61 02 F6 | 	mov	arg03, local03
07b70     35 5D 02 F6 | 	mov	arg01, local01
07b74     07 79 02 F6 | 	mov	local08, objptr
07b78     3A 0F 02 F6 | 	mov	objptr, local06
07b7c     2D 76 62 FD | 	call	local07
07b80     3C 0F 02 F6 | 	mov	objptr, local08
07b84     15 7B 02 F6 | 	mov	local09, result1
07b88     00 7A 5E F2 | 	cmps	local09, #0 wcz
07b8c     34 00 90 3D |  if_ae	jmp	#LR__0427
07b90     08 6A 06 F1 | 	add	local01, #8
07b94     35 73 02 FB | 	rdlong	local05, local01
07b98     20 72 46 F5 | 	or	local05, #32
07b9c     35 73 62 FC | 	wrlong	local05, local01
07ba0     01 00 00 FF 
07ba4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ba8     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07bac     01 00 00 FF 
07bb0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bb4     00 7A 0E F2 | 	cmp	local09, #0 wz
07bb8     01 2A 66 56 |  if_ne	neg	result1, #1
07bbc     00 2A 06 A6 |  if_e	mov	result1, #0
07bc0     7C 00 90 FD | 	jmp	#LR__0432
07bc4                 | LR__0427
07bc4     3D 2B 02 F6 | 	mov	result1, local09
07bc8     74 00 90 FD | 	jmp	#LR__0432
07bcc                 | LR__0428
07bcc     18 6A 06 F1 | 	add	local01, #24
07bd0     35 7D 0A FB | 	rdlong	local10, local01 wz
07bd4     18 6A 86 F1 | 	sub	local01, #24
07bd8     1C 00 90 5D |  if_ne	jmp	#LR__0429
07bdc     01 00 00 FF 
07be0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07be4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07be8     01 00 00 FF 
07bec     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bf0     01 2A 66 F6 | 	neg	result1, #1
07bf4     48 00 90 FD | 	jmp	#LR__0432
07bf8                 | LR__0429
07bf8     00 7A 06 F6 | 	mov	local09, #0
07bfc                 | LR__0430
07bfc     00 6E 1E F2 | 	cmp	local03, #0 wcz
07c00     38 00 90 ED |  if_be	jmp	#LR__0431
07c04     3E 73 02 F6 | 	mov	local05, local10
07c08     39 75 02 FB | 	rdlong	local06, local05
07c0c     04 72 06 F1 | 	add	local05, #4
07c10     39 77 02 FB | 	rdlong	local07, local05
07c14     38 5D C2 FA | 	rdbyte	arg01, local04
07c18     35 5F 02 F6 | 	mov	arg02, local01
07c1c     07 7F 02 F6 | 	mov	local11, objptr
07c20     3A 0F 02 F6 | 	mov	objptr, local06
07c24     01 70 06 F1 | 	add	local04, #1
07c28     2D 76 62 FD | 	call	local07
07c2c     3F 0F 02 F6 | 	mov	objptr, local11
07c30     15 7B 02 F1 | 	add	local09, result1
07c34     01 6E 86 F1 | 	sub	local03, #1
07c38     C0 FF 9F FD | 	jmp	#LR__0430
07c3c                 | LR__0431
07c3c     3D 2B 02 F6 | 	mov	result1, local09
07c40                 | LR__0432
07c40     AF F0 03 F6 | 	mov	ptra, fp
07c44     BF 00 A0 FD | 	call	#popregs_
07c48                 | __system___vfswrite_ret
07c48     2D 00 64 FD | 	ret
07c4c                 | 
07c4c                 | __system___vfsread
07c4c     0F 5A 05 F6 | 	mov	COUNT_, #15
07c50     B0 00 A0 FD | 	call	#pushregs_
07c54     2C F0 07 F1 | 	add	ptra, #44
07c58     04 5E 05 F1 | 	add	fp, #4
07c5c     AF 5C 62 FC | 	wrlong	arg01, fp
07c60     04 5E 05 F1 | 	add	fp, #4
07c64     AF 5E 62 FC | 	wrlong	arg02, fp
07c68     04 5E 05 F1 | 	add	fp, #4
07c6c     AF 60 62 FC | 	wrlong	arg03, fp
07c70     04 5E 85 F1 | 	sub	fp, #4
07c74     AF 6A 02 FB | 	rdlong	local01, fp
07c78     14 5E 05 F1 | 	add	fp, #20
07c7c     AF 6A 62 FC | 	wrlong	local01, fp
07c80     04 5E 05 F1 | 	add	fp, #4
07c84     AF 00 68 FC | 	wrlong	#0, fp
07c88     1C 5E 85 F1 | 	sub	fp, #28
07c8c     AF 6C 02 FB | 	rdlong	local02, fp
07c90     04 5E 85 F1 | 	sub	fp, #4
07c94     08 6C 06 F1 | 	add	local02, #8
07c98     36 6B 02 FB | 	rdlong	local01, local02
07c9c     01 6A CE F7 | 	test	local01, #1 wz
07ca0     1C 00 90 5D |  if_ne	jmp	#LR__0433
07ca4     01 00 00 FF 
07ca8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07cac     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07cb0     01 00 00 FF 
07cb4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07cb8     01 2A 66 F6 | 	neg	result1, #1
07cbc     9C 02 90 FD | 	jmp	#LR__0441
07cc0                 | LR__0433
07cc0     04 5E 05 F1 | 	add	fp, #4
07cc4     AF 6A 02 FB | 	rdlong	local01, fp
07cc8     04 5E 85 F1 | 	sub	fp, #4
07ccc     10 6A 06 F1 | 	add	local01, #16
07cd0     35 6F 0A FB | 	rdlong	local03, local01 wz
07cd4     B4 00 90 AD |  if_e	jmp	#LR__0435
07cd8     04 5E 05 F1 | 	add	fp, #4
07cdc     AF 70 02 FB | 	rdlong	local04, fp
07ce0     10 70 06 F1 | 	add	local04, #16
07ce4     38 6B 02 FB | 	rdlong	local01, local04
07ce8     35 6D 02 FB | 	rdlong	local02, local01
07cec     04 6A 06 F1 | 	add	local01, #4
07cf0     35 6F 02 FB | 	rdlong	local03, local01
07cf4     AF 5C 02 FB | 	rdlong	arg01, fp
07cf8     04 5E 05 F1 | 	add	fp, #4
07cfc     AF 5E 02 FB | 	rdlong	arg02, fp
07d00     04 5E 05 F1 | 	add	fp, #4
07d04     AF 60 02 FB | 	rdlong	arg03, fp
07d08     0C 5E 85 F1 | 	sub	fp, #12
07d0c     07 73 02 F6 | 	mov	local05, objptr
07d10     36 0F 02 F6 | 	mov	objptr, local02
07d14     2D 6E 62 FD | 	call	local03
07d18     39 0F 02 F6 | 	mov	objptr, local05
07d1c     10 5E 05 F1 | 	add	fp, #16
07d20     AF 2A 62 FC | 	wrlong	result1, fp
07d24     10 5E 85 F1 | 	sub	fp, #16
07d28     00 2A 5E F2 | 	cmps	result1, #0 wcz
07d2c     4C 00 90 3D |  if_ae	jmp	#LR__0434
07d30     04 5E 05 F1 | 	add	fp, #4
07d34     AF 6A 02 FB | 	rdlong	local01, fp
07d38     35 71 02 F6 | 	mov	local04, local01
07d3c     08 70 06 F1 | 	add	local04, #8
07d40     38 6F 02 FB | 	rdlong	local03, local04
07d44     20 6E 46 F5 | 	or	local03, #32
07d48     08 6A 06 F1 | 	add	local01, #8
07d4c     35 6F 62 FC | 	wrlong	local03, local01
07d50     0C 5E 05 F1 | 	add	fp, #12
07d54     AF 5C 0A FB | 	rdlong	arg01, fp wz
07d58     10 5E 85 F1 | 	sub	fp, #16
07d5c     01 00 00 FF 
07d60     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d64     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07d68     01 00 00 FF 
07d6c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d70     01 2A 66 56 |  if_ne	neg	result1, #1
07d74     00 2A 06 A6 |  if_e	mov	result1, #0
07d78     E0 01 90 FD | 	jmp	#LR__0441
07d7c                 | LR__0434
07d7c     10 5E 05 F1 | 	add	fp, #16
07d80     AF 2A 02 FB | 	rdlong	result1, fp
07d84     10 5E 85 F1 | 	sub	fp, #16
07d88     D0 01 90 FD | 	jmp	#LR__0441
07d8c                 | LR__0435
07d8c     04 5E 05 F1 | 	add	fp, #4
07d90     AF 6A 02 FB | 	rdlong	local01, fp
07d94     1C 6A 06 F1 | 	add	local01, #28
07d98     35 6F 02 FB | 	rdlong	local03, local01
07d9c     14 5E 05 F1 | 	add	fp, #20
07da0     AF 6E 62 FC | 	wrlong	local03, fp
07da4     AF 6A 0A FB | 	rdlong	local01, fp wz
07da8     18 5E 85 F1 | 	sub	fp, #24
07dac     1C 00 90 5D |  if_ne	jmp	#LR__0436
07db0     01 00 00 FF 
07db4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07db8     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07dbc     01 00 00 FF 
07dc0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07dc4     01 2A 66 F6 | 	neg	result1, #1
07dc8     90 01 90 FD | 	jmp	#LR__0441
07dcc                 | LR__0436
07dcc     04 5E 05 F1 | 	add	fp, #4
07dd0     AF 6A 02 FB | 	rdlong	local01, fp
07dd4     04 5E 85 F1 | 	sub	fp, #4
07dd8     24 6A 06 F1 | 	add	local01, #36
07ddc     35 6F 0A FB | 	rdlong	local03, local01 wz
07de0     A0 00 90 AD |  if_e	jmp	#LR__0438
07de4     24 5E 05 F1 | 	add	fp, #36
07de8     AF 74 02 F6 | 	mov	local06, fp
07dec     20 5E 85 F1 | 	sub	fp, #32
07df0     AF 76 02 FB | 	rdlong	local07, fp
07df4     3B 71 02 F6 | 	mov	local04, local07
07df8     24 70 06 F1 | 	add	local04, #36
07dfc     38 79 02 FB | 	rdlong	local08, local04
07e00     3C 6B 02 F6 | 	mov	local01, local08
07e04     35 6D 02 FB | 	rdlong	local02, local01
07e08     04 6A 06 F1 | 	add	local01, #4
07e0c     35 7B 02 FB | 	rdlong	local09, local01
07e10     3D 6F 02 F6 | 	mov	local03, local09
07e14     3B 7D 02 F6 | 	mov	local10, local07
07e18     04 5E 85 F1 | 	sub	fp, #4
07e1c     3E 7F 02 F6 | 	mov	local11, local10
07e20     00 81 06 F6 | 	mov	local12, #256
07e24     3A 83 02 F6 | 	mov	local13, local06
07e28     3F 5D 02 F6 | 	mov	arg01, local11
07e2c     00 5F 06 F6 | 	mov	arg02, #256
07e30     41 61 02 F6 | 	mov	arg03, local13
07e34     07 85 02 F6 | 	mov	local14, objptr
07e38     36 0F 02 F6 | 	mov	objptr, local02
07e3c     2D 6E 62 FD | 	call	local03
07e40     42 0F 02 F6 | 	mov	objptr, local14
07e44     15 87 02 F6 | 	mov	local15, result1
07e48     10 5E 05 F1 | 	add	fp, #16
07e4c     AF 86 62 FC | 	wrlong	local15, fp
07e50     AF 6C 0A FB | 	rdlong	local02, fp wz
07e54     10 5E 85 F1 | 	sub	fp, #16
07e58     28 00 90 5D |  if_ne	jmp	#LR__0437
07e5c     24 5E 05 F1 | 	add	fp, #36
07e60     AF 70 02 FB | 	rdlong	local04, fp
07e64     24 5E 85 F1 | 	sub	fp, #36
07e68     38 6F 02 F6 | 	mov	local03, local04
07e6c     02 6E 0E F5 | 	and	local03, #2 wz
07e70     10 00 90 AD |  if_e	jmp	#LR__0437
07e74     01 6A 06 F6 | 	mov	local01, #1
07e78     20 5E 05 F1 | 	add	fp, #32
07e7c     AF 02 68 FC | 	wrlong	#1, fp
07e80     20 5E 85 F1 | 	sub	fp, #32
07e84                 | LR__0437
07e84                 | LR__0438
07e84     10 5E 05 F1 | 	add	fp, #16
07e88     AF 00 68 FC | 	wrlong	#0, fp
07e8c     10 5E 85 F1 | 	sub	fp, #16
07e90                 | LR__0439
07e90     0C 5E 05 F1 | 	add	fp, #12
07e94     AF 6A 02 FB | 	rdlong	local01, fp
07e98     0C 5E 85 F1 | 	sub	fp, #12
07e9c     00 6A 1E F2 | 	cmp	local01, #0 wcz
07ea0     AC 00 90 ED |  if_be	jmp	#LR__0440
07ea4     18 5E 05 F1 | 	add	fp, #24
07ea8     AF 6A 02 FB | 	rdlong	local01, fp
07eac     35 6D 02 FB | 	rdlong	local02, local01
07eb0     04 6A 06 F1 | 	add	local01, #4
07eb4     35 6F 02 FB | 	rdlong	local03, local01
07eb8     14 5E 85 F1 | 	sub	fp, #20
07ebc     AF 5C 02 FB | 	rdlong	arg01, fp
07ec0     04 5E 85 F1 | 	sub	fp, #4
07ec4     07 7F 02 F6 | 	mov	local11, objptr
07ec8     36 0F 02 F6 | 	mov	objptr, local02
07ecc     2D 6E 62 FD | 	call	local03
07ed0     3F 0F 02 F6 | 	mov	objptr, local11
07ed4     15 7D 02 F6 | 	mov	local10, result1
07ed8     14 5E 05 F1 | 	add	fp, #20
07edc     AF 7C 62 FC | 	wrlong	local10, fp
07ee0     14 5E 85 F1 | 	sub	fp, #20
07ee4     00 7C 5E F2 | 	cmps	local10, #0 wcz
07ee8     64 00 90 CD |  if_b	jmp	#LR__0440
07eec     1C 5E 05 F1 | 	add	fp, #28
07ef0     AF 6A 02 FB | 	rdlong	local01, fp
07ef4     35 6F 02 F6 | 	mov	local03, local01
07ef8     01 6E 06 F1 | 	add	local03, #1
07efc     AF 6E 62 FC | 	wrlong	local03, fp
07f00     08 5E 85 F1 | 	sub	fp, #8
07f04     AF 76 02 FB | 	rdlong	local07, fp
07f08     35 77 42 FC | 	wrbyte	local07, local01
07f0c     04 5E 85 F1 | 	sub	fp, #4
07f10     AF 6A 02 FB | 	rdlong	local01, fp
07f14     01 6A 06 F1 | 	add	local01, #1
07f18     AF 6A 62 FC | 	wrlong	local01, fp
07f1c     04 5E 85 F1 | 	sub	fp, #4
07f20     AF 6A 02 FB | 	rdlong	local01, fp
07f24     01 6A 86 F1 | 	sub	local01, #1
07f28     AF 6A 62 FC | 	wrlong	local01, fp
07f2c     14 5E 05 F1 | 	add	fp, #20
07f30     AF 6A 0A FB | 	rdlong	local01, fp wz
07f34     20 5E 85 F1 | 	sub	fp, #32
07f38     54 FF 9F AD |  if_e	jmp	#LR__0439
07f3c     14 5E 05 F1 | 	add	fp, #20
07f40     AF 6E 02 FB | 	rdlong	local03, fp
07f44     14 5E 85 F1 | 	sub	fp, #20
07f48     0A 6E 0E F2 | 	cmp	local03, #10 wz
07f4c     40 FF 9F 5D |  if_ne	jmp	#LR__0439
07f50                 | LR__0440
07f50     10 5E 05 F1 | 	add	fp, #16
07f54     AF 2A 02 FB | 	rdlong	result1, fp
07f58     10 5E 85 F1 | 	sub	fp, #16
07f5c                 | LR__0441
07f5c     AF F0 03 F6 | 	mov	ptra, fp
07f60     BF 00 A0 FD | 	call	#popregs_
07f64                 | __system___vfsread_ret
07f64     2D 00 64 FD | 	ret
07f68                 | 
07f68                 | ' 	
07f68                 | ' 	FUNCTION pfunc(c as integer) as integer
07f68                 | ___strs_cl_pfunc
07f68                 | ' 		if (i < 16) then
07f68     04 0E 06 F1 | 	add	objptr, #4
07f6c     07 31 02 FB | 	rdlong	_var01, objptr
07f70     04 0E 86 F1 | 	sub	objptr, #4
07f74     10 30 5E F2 | 	cmps	_var01, #16 wcz
07f78     2C 00 90 3D |  if_ae	jmp	#LR__0442
07f7c     07 33 02 FB | 	rdlong	_var02, objptr
07f80     04 0E 06 F1 | 	add	objptr, #4
07f84     07 35 02 FB | 	rdlong	_var03, objptr
07f88     19 35 02 F1 | 	add	_var03, _var02
07f8c     1A 5D 42 FC | 	wrbyte	arg01, _var03
07f90     07 31 02 FB | 	rdlong	_var01, objptr
07f94     01 30 06 F1 | 	add	_var01, #1
07f98     07 31 62 FC | 	wrlong	_var01, objptr
07f9c     04 0E 86 F1 | 	sub	objptr, #4
07fa0                 | ' 			p(i) = c
07fa0                 | ' 			i = i+1
07fa0                 | ' 			return 1
07fa0     01 2A 06 F6 | 	mov	result1, #1
07fa4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
07fa8                 | LR__0442
07fa8                 | ' 			return -1
07fa8     01 2A 66 F6 | 	neg	result1, #1
07fac                 | ___strs_cl_pfunc_ret
07fac     2D 00 64 FD | 	ret
07fb0                 | 
07fb0                 | __struct__s_vfs_file_t_putchar
07fb0     04 5A 05 F6 | 	mov	COUNT_, #4
07fb4     B0 00 A0 FD | 	call	#pushregs_
07fb8     18 0E 06 F1 | 	add	objptr, #24
07fbc     07 6B 0A FB | 	rdlong	local01, objptr wz
07fc0     18 0E 86 F1 | 	sub	objptr, #24
07fc4     00 2A 06 A6 |  if_e	mov	result1, #0
07fc8     3C 00 90 AD |  if_e	jmp	#LR__0443
07fcc     18 0E 06 F1 | 	add	objptr, #24
07fd0     07 6B 02 FB | 	rdlong	local01, objptr
07fd4     18 0E 86 F1 | 	sub	objptr, #24
07fd8     35 6D 02 FB | 	rdlong	local02, local01
07fdc     04 6A 06 F1 | 	add	local01, #4
07fe0     35 6F 02 FB | 	rdlong	local03, local01
07fe4     07 5F 02 F6 | 	mov	arg02, objptr
07fe8     07 71 02 F6 | 	mov	local04, objptr
07fec     36 0F 02 F6 | 	mov	objptr, local02
07ff0     2D 6E 62 FD | 	call	local03
07ff4     38 0F 02 F6 | 	mov	objptr, local04
07ff8     00 2A 5E F2 | 	cmps	result1, #0 wcz
07ffc     00 6A 06 C6 |  if_b	mov	local01, #0
08000     01 6A 06 36 |  if_ae	mov	local01, #1
08004     35 2B 02 F6 | 	mov	result1, local01
08008                 | LR__0443
08008     AF F0 03 F6 | 	mov	ptra, fp
0800c     BF 00 A0 FD | 	call	#popregs_
08010                 | __struct__s_vfs_file_t_putchar_ret
08010     2D 00 64 FD | 	ret
08014                 | 
08014                 | __struct__s_vfs_file_t_getchar
08014     04 5A 05 F6 | 	mov	COUNT_, #4
08018     B0 00 A0 FD | 	call	#pushregs_
0801c     1C 0E 06 F1 | 	add	objptr, #28
08020     07 6B 0A FB | 	rdlong	local01, objptr wz
08024     1C 0E 86 F1 | 	sub	objptr, #28
08028     01 2A 66 A6 |  if_e	neg	result1, #1
0802c     2C 00 90 AD |  if_e	jmp	#LR__0444
08030                 | '         return getcf(__this);
08030     1C 0E 06 F1 | 	add	objptr, #28
08034     07 6B 02 FB | 	rdlong	local01, objptr
08038     1C 0E 86 F1 | 	sub	objptr, #28
0803c     35 6D 02 FB | 	rdlong	local02, local01
08040     04 6A 06 F1 | 	add	local01, #4
08044     35 6F 02 FB | 	rdlong	local03, local01
08048     07 5D 02 F6 | 	mov	arg01, objptr
0804c     07 71 02 F6 | 	mov	local04, objptr
08050     36 0F 02 F6 | 	mov	objptr, local02
08054     2D 6E 62 FD | 	call	local03
08058     38 0F 02 F6 | 	mov	objptr, local04
0805c                 | LR__0444
0805c     AF F0 03 F6 | 	mov	ptra, fp
08060     BF 00 A0 FD | 	call	#popregs_
08064                 | __struct__s_vfs_file_t_getchar_ret
08064     2D 00 64 FD | 	ret
08068                 | 
08068                 | __struct___bas_wrap_sender_tx
08068     04 5A 05 F6 | 	mov	COUNT_, #4
0806c     B0 00 A0 FD | 	call	#pushregs_
08070     07 6B 02 FB | 	rdlong	local01, objptr
08074     35 6D 02 FB | 	rdlong	local02, local01
08078     04 6A 06 F1 | 	add	local01, #4
0807c     35 6F 02 FB | 	rdlong	local03, local01
08080     07 71 02 F6 | 	mov	local04, objptr
08084     36 0F 02 F6 | 	mov	objptr, local02
08088     2D 6E 62 FD | 	call	local03
0808c     38 0F 02 F6 | 	mov	objptr, local04
08090     01 2A 06 F6 | 	mov	result1, #1
08094     AF F0 03 F6 | 	mov	ptra, fp
08098     BF 00 A0 FD | 	call	#popregs_
0809c                 | __struct___bas_wrap_sender_tx_ret
0809c     2D 00 64 FD | 	ret
080a0                 | 
080a0                 | LR__0445
080a0     20          | 	byte	" "
080a1     00          | 	byte	0
080a2                 | LR__0446
080a2                 | 	byte	
080a2     00          | 	byte	0
080a3                 | LR__0447
080a3                 | 	byte	
080a3     00          | 	byte	0
080a4                 | LR__0448
080a4     20 21 21 21 
080a8     20 63 6F 72 
080ac     72 75 70 74 
080b0     65 64 20 68 
080b4     65 61 70 3F 
080b8     3F 3F 20 21 
080bc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
080bf     00          | 	byte	0
080c0                 | LR__0449
080c0     20 21 21 21 
080c4     20 6F 75 74 
080c8     20 6F 66 20 
080cc     68 65 61 70 
080d0     20 6D 65 6D 
080d4     6F 72 79 20 
080d8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
080dc     00          | 	byte	0
080dd                 | LR__0450
080dd     20 21 21 21 
080e1     20 63 6F 72 
080e5     72 75 70 74 
080e9     65 64 20 68 
080ed     65 61 70 20 
080f1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
080f5     00          | 	byte	0
080f6                 | LR__0451
080f6     4E 61 6D 65 
080fa     20 20 20 20 
080fe     20 20 20 20 
08102     20 20 20 20 
08106     20 20 20 20 
0810a     20 20 20 6C 
0810e     65 6E 20 20 
08112     20 66 74 20 
08116     76 6F 6C 20 
0811a     72 65 70 20 
0811e     20 20 72 2E 
08122     6C 65 6E 20 
08126     20 20 20 20 
0812a     20 20 20 20 
0812e     4E 61 6D 65 
08132     20 20 20 20 
08136     20 20 20 20 
0813a     20 20 20 20 
0813e     20 20 20 20 
08142     20 20 20 6C 
08146     65 6E 20 20 
0814a     20 66 74 20 
0814e     76 6F 6C 20 
08152     72 65 70 20 
08156     20 20 72 2E 
0815a     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0815e     00          | 	byte	0
0815f                 | LR__0452
0815f     53          | 	byte	"S"
08160     00          | 	byte	0
08161                 | LR__0453
08161     20 20 20 20 
08165     20 20 20 20 
08169     20 20 20 20 
0816d     20 20 20 20 
08171     20 20 20 20 
08175     20 20       | 	byte	"                      "
08177     00          | 	byte	0
08178                 | LR__0454
08178     20          | 	byte	" "
08179     00          | 	byte	0
0817a                 | LR__0455
0817a     73 61 6D 70 
0817e     6C 65 73 20 
08182     6D 6F 64 75 
08186     6C 65       | 	byte	"samples module"
08188     00          | 	byte	0
08189     00 00 00    | 	alignl
0818c                 | _dat_
0818c     74 68 65 20 
08190     61 77 61 6B 
08194     65 6E 69 6E 
08198     67 00 00 00 | module file "../../../mod/awaken.mod"
0819c     00 00 00 00 
081a0     6D 75 73 69 
081a4     63 20 62 79 
081a8     20 78 74 64 | 	byte	$00, $00, $00, $00, $6d, $75, $73, $69, $63, $20, $62, $79, $20, $78, $74, $64
081ac     00 00 00 00 
081b0     00 00 00 00 
081b4     00 00 00 00 
081b8     00 00 00 00 
081bc     00          | 	byte	$00[17]
081bd     01 67 64 79 
081c1     6E 69 61 20 
081c5     61 6E 64 20 
081c9     6A 61 6E 6F | 	byte	$01, $67, $64, $79, $6e, $69, $61, $20, $61, $6e, $64, $20, $6a, $61, $6e, $6f
081cd     77 6F 63 69 
081d1     74 79 00 08 
081d5     44 00 40 00 
081d9     00 00 01 00 | 	byte	$77, $6f, $63, $69, $74, $79, $00, $08, $44, $00, $40, $00, $00, $00, $01, $00
081dd     00 00 00 00 
081e1     00 00 00 00 
081e5     00 00 00 00 
081e9     00 00 00 00 
081ed     00 00 00 00 
081f1     00 00 00 00 
081f5     00 00 00 00 | 	byte	$00[28]
081f9     01 00 00 00 
081fd     00 00 00 00 
08201     00 00 00 00 
08205     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08209     00 00 00 00 
0820d     00 00 00 00 
08211     00 00 00 00 
08215     00 00       | 	byte	$00[14]
08217     01 00 00 00 
0821b     00 00 00 00 
0821f     00 00 00 00 
08223     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08227     00 00 00 00 
0822b     00 00 00    | 	byte	$00[7]
0822e     03 EB 00 15 
08232     00 00 00 01 
08236     74 61 6C 65 
0823a     7A 00 00 00 | 	byte	$03, $eb, $00, $15, $00, $00, $00, $01, $74, $61, $6c, $65, $7a, $00, $00, $00
0823e     00 00 00 00 
08242     00 00 00 00 
08246     00 00 00 00 
0824a     00 00       | 	byte	$00[14]
0824c     13 69 00 40 
08250     00 00 00 01 
08254     00 00 00 00 
08258     00 00 00 00 | 	byte	$13, $69, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0825c     00 00 00 00 
08260     00 00 00 00 
08264     00 00 00 00 
08268     00 00 00 00 
0826c     00 00 00 00 
08270     00          | 	byte	$00[21]
08271     01 00 00 00 
08275     00 00 00 00 
08279     00 00 00 00 
0827d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08281     00 00 00 00 
08285     00 00 00 00 
08289     00 00 00 00 
0828d     00 00       | 	byte	$00[14]
0828f     01 00 00 00 
08293     00 00 00 00 
08297     00 00 00 00 
0829b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0829f     00 00 00 00 
082a3     00 00 00 00 
082a7     00 00 00 00 
082ab     00 00       | 	byte	$00[14]
082ad     01 00 00 00 
082b1     00 00 00 00 
082b5     00 00 00 00 
082b9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082bd     00 00 00 00 
082c1     00 00 00 00 
082c5     00 00 00 00 
082c9     00 00       | 	byte	$00[14]
082cb     01 00 00 00 
082cf     00 00 00 00 
082d3     00 00 00 00 
082d7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082db     00 00 00 00 
082df     00 00 00 00 
082e3     00 00 00 00 
082e7     00 00       | 	byte	$00[14]
082e9     01 00 00 00 
082ed     00 00 00 00 
082f1     00 00 00 00 
082f5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082f9     00 00 00 00 
082fd     00 00 00    | 	byte	$00[7]
08300     13 19 00 40 
08304     00 00 00 01 
08308     00 00 00 00 
0830c     00 00 00 00 | 	byte	$13, $19, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08310     00 00 00 00 
08314     00 00 00 00 
08318     00 00 00 00 
0831c     00 00       | 	byte	$00[14]
0831e     0F 25 00 40 
08322     00 00 00 01 
08326     00 00 00 00 
0832a     00 00 00 00 | 	byte	$0f, $25, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0832e     00 00 00 00 
08332     00 00 00 00 
08336     00 00 00 00 
0833a     00 00 00 00 
0833e     00 00 00 00 
08342     00          | 	byte	$00[21]
08343     01 00 00 00 
08347     00 00 00 00 
0834b     00 00 00 00 
0834f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08353     00 00 00 00 
08357     00 00 00 00 
0835b     00 00 00 00 
0835f     00 00       | 	byte	$00[14]
08361     01 00 00 00 
08365     00 00 00 00 
08369     00 00 00 00 
0836d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08371     00 00 00 00 
08375     00 00 00 00 
08379     00 00 00 00 
0837d     00 00       | 	byte	$00[14]
0837f     01 00 00 00 
08383     00 00 00 00 
08387     00 00 00 00 
0838b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0838f     00 00 00 00 
08393     00 00 00 00 
08397     00 00 00 00 
0839b     00 00       | 	byte	$00[14]
0839d     01 00 00 00 
083a1     00 00 00 00 
083a5     00 00 00 00 
083a9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083ad     00 00 00 00 
083b1     00 00 00    | 	byte	$00[7]
083b4     04 19 00 40 
083b8     00 00 00 01 
083bc     00 00 00 00 
083c0     00 00 00 00 | 	byte	$04, $19, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
083c4     00 00 00 00 
083c8     00 00 00 00 
083cc     00 00 00 00 
083d0     00 00 00 00 
083d4     00 00 00 00 
083d8     00          | 	byte	$00[21]
083d9     01 00 00 00 
083dd     00 00 00 00 
083e1     00 00 00 00 
083e5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083e9     00 00 00 00 
083ed     00 00 00 00 
083f1     00 00 00 00 
083f5     00 00       | 	byte	$00[14]
083f7     01 00 00 00 
083fb     00 00 00 00 
083ff     00 00 00 00 
08403     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08407     00 00 00 00 
0840b     00 00 00    | 	byte	$00[7]
0840e     07 D0 00 40 
08412     00 00 00 01 
08416     00 00 00 00 
0841a     00 00 00 00 | 	byte	$07, $d0, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0841e     00 00 00 00 
08422     00 00 00 00 
08426     00 00 00 00 
0842a     00 00 00 00 
0842e     00 00 00 00 
08432     00          | 	byte	$00[21]
08433     01 00 00 00 
08437     00 00 00 00 
0843b     00 00 00 00 
0843f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08443     00 00 00 00 
08447     00 00 00 00 
0844b     00 00 00 00 
0844f     00 00       | 	byte	$00[14]
08451     01 00 00 00 
08455     00 00 00 00 
08459     00 00 00 00 
0845d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08461     00 00 00 00 
08465     00 00 00 00 
08469     00 00 00 00 
0846d     00 00       | 	byte	$00[14]
0846f     01 00 00 00 
08473     00 00 00 00 
08477     00 00 00 00 
0847b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0847f     00 00 00 00 
08483     00 00 00 00 
08487     00 00 00 00 
0848b     00 00       | 	byte	$00[14]
0848d     01 00 00 00 
08491     00 00 00 00 
08495     00 00 00 00 
08499     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0849d     00 00 00 00 
084a1     00 00 00 00 
084a5     00 00 00 00 
084a9     00 00       | 	byte	$00[14]
084ab     01 00 00 00 
084af     00 00 00 00 
084b3     00 00 00 00 
084b7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084bb     00 00 00 00 
084bf     00 00 00 00 
084c3     00 00 00 00 
084c7     00 00       | 	byte	$00[14]
084c9     01 00 00 00 
084cd     00 00 00 00 
084d1     00 00 00 00 
084d5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084d9     00 00 00 00 
084dd     00 00 00 00 
084e1     00 00 00 00 
084e5     00 00       | 	byte	$00[14]
084e7     01 00 00 00 
084eb     00 00 00 00 
084ef     00 00 00 00 
084f3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084f7     00 00 00 00 
084fb     00 00 00 00 
084ff     00 00 00 00 
08503     00 00       | 	byte	$00[14]
08505     01 00 00 00 
08509     00 00 00 00 
0850d     00 00 00 00 
08511     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08515     00 00 00 00 
08519     00 00 00 00 
0851d     00 00 00 00 
08521     00 00       | 	byte	$00[14]
08523     01 00 00 00 
08527     00 00 00 00 
0852b     00 00 00 00 
0852f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08533     00 00 00 00 
08537     00 00 00 00 
0853b     00 00 00 00 
0853f     00 00       | 	byte	$00[14]
08541     01 10 04 00 
08545     01 02 03 04 
08549     05 06 07 08 
0854d     09 0A 0B 0C | 	byte	$01, $10, $04, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c
08551     0D 0E 0F 10 
08555     11 12 13 0E 
08559     0F 14 15 18 
0855d     19 1A 1B 1C | 	byte	$0d, $0e, $0f, $10, $11, $12, $13, $0e, $0f, $14, $15, $18, $19, $1a, $1b, $1c
08561     1D 1E 1E 1F 
08565     20 21 22 23 
08569     24 24 25 26 
0856d     27 00 00 00 | 	byte	$1d, $1e, $1e, $1f, $20, $21, $22, $23, $24, $24, $25, $26, $27, $00, $00, $00
08571     00 00 00 00 
      ...             
085bd     00 00 00 00 
085c1     00 00 00    | 	byte	$00[83]
085c4     4D 2E 4B 2E 
085c8     01 7D DF 06 
085cc     02 FA C0 00 
085d0     00 00 00 00 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $00, $00, $00
085d4     00 00 00 00 
085d8     00 00 00 00 
085dc     00 00 00 00 
085e0     00 00 00 00 
085e4     00 00 00 00 | 	byte	$00[20]
085e8     01 40 D0 00 
085ec     00 00 00 00 
085f0     00 00 00 00 
085f4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085f8     00 00 00 00 
085fc     00 00 00 00 
08600     00 00 00 00 
08604     00 00 00 00 
08608     00          | 	byte	$00[17]
08609     FE D0 00 00 
0860d     00 00 00 00 
08611     00 00 00 00 
08615     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08619     00 00 00 00 
0861d     00 00 00 00 
08621     00 00 00 00 
08625     00 00 00 00 | 	byte	$00[16]
08629     BE D0 00 00 
0862d     00 00 00 00 
08631     00 00 00 00 
08635     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08639     00 00 00 00 
0863d     00 00 00 00 
08641     00 00 00 00 
08645     00 00 00    | 	byte	$00[15]
08648     01 7D D0 00 
0864c     00 00 00 00 
08650     00 00 00 00 
08654     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08658     00 00 00 00 
0865c     00 00 00 00 
08660     00 00 00 00 
08664     00 00 00 00 | 	byte	$00[16]
08668     01 40 D0 00 
0866c     00 00 00 00 
08670     00 00 00 00 
08674     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08678     00 00 00 00 
0867c     00 00 00 00 
08680     00 00 00 00 
08684     00 00 00 00 
08688     00          | 	byte	$00[17]
08689     FE D0 00 00 
0868d     00 00 00 00 
08691     00 00 00 00 
08695     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08699     00 00 00 00 
0869d     00 00 00 00 
086a1     00 00 00 00 
086a5     00 00 00 00 | 	byte	$00[16]
086a9     BE D0 00 00 
086ad     00 00 00 00 
086b1     00 00 00 00 
086b5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086b9     00 00 00 00 
086bd     00 00 00 00 
086c1     00 00 00 00 
086c5     00 00 00    | 	byte	$00[15]
086c8     01 7D D0 00 
086cc     02 FA C0 00 
086d0     00 00 00 00 
086d4     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
086d8     00 00 00 00 
086dc     00 00 00 00 
086e0     00 00 00 00 
086e4     00 00 00 00 | 	byte	$00[16]
086e8     01 40 D0 00 
086ec     00 00 00 00 
086f0     00 00 00 00 
086f4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086f8     00 00 00 00 
086fc     00 00 00 00 
08700     00 00 00 00 
08704     00 00 00 00 
08708     00          | 	byte	$00[17]
08709     FE D0 00 00 
0870d     00 00 00 00 
08711     00 00 00 00 
08715     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08719     00 00 00 00 
0871d     00 00 00 00 
08721     00 00 00 00 
08725     00 00 00 00 | 	byte	$00[16]
08729     BE D0 00 00 
0872d     00 00 00 00 
08731     00 00 00 00 
08735     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08739     00 00 00 00 
0873d     00 00 00 00 
08741     00 00 00 00 
08745     00 00 00    | 	byte	$00[15]
08748     01 7D D0 00 
0874c     00 00 00 00 
08750     00 00 00 00 
08754     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08758     00 00 00 00 
0875c     00 00 00 00 
08760     00 00 00 00 
08764     00 00 00 00 | 	byte	$00[16]
08768     01 40 D0 00 
0876c     00 00 00 00 
08770     00 00 00 00 
08774     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08778     00 00 00 00 
0877c     00 00 00 00 
08780     00 00 00 00 
08784     00 00 00 00 
08788     00          | 	byte	$00[17]
08789     FE D0 00 00 
0878d     00 00 00 00 
08791     00 00 00 00 
08795     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08799     00 00 00 00 
0879d     00 00 00 00 
087a1     00 00 00 00 
087a5     00 00 00 00 | 	byte	$00[16]
087a9     BE D0 00 00 
087ad     00 00 00 00 
087b1     00 00 00 00 
087b5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087b9     00 00 00 00 
087bd     00 00 00 00 
087c1     00 00 00 00 
087c5     00 00 00    | 	byte	$00[15]
087c8     01 AC D0 00 
087cc     03 58 C0 00 
087d0     00 00 00 00 
087d4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
087d8     00 00 00 00 
087dc     00 00 00 00 
087e0     00 00 00 00 
087e4     00 00 00 00 | 	byte	$00[16]
087e8     01 53 D0 00 
087ec     00 00 00 00 
087f0     00 00 00 00 
087f4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087f8     00 00 00 00 
087fc     00 00 00 00 
08800     00 00 00 00 
08804     00 00 00 00 | 	byte	$00[16]
08808     01 1D D0 00 
0880c     00 00 00 00 
08810     00 00 00 00 
08814     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08818     00 00 00 00 
0881c     00 00 00 00 
08820     00 00 00 00 
08824     00 00 00 00 
08828     00          | 	byte	$00[17]
08829     D6 D0 00 00 
0882d     00 00 00 00 
08831     00 00 00 00 
08835     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08839     00 00 00 00 
0883d     00 00 00 00 
08841     00 00 00 00 
08845     00 00 00    | 	byte	$00[15]
08848     01 AC D0 00 
0884c     00 00 00 00 
08850     00 00 00 00 
08854     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08858     00 00 00 00 
0885c     00 00 00 00 
08860     00 00 00 00 
08864     00 00 00 00 | 	byte	$00[16]
08868     01 53 D0 00 
0886c     00 00 00 00 
08870     00 00 00 00 
08874     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08878     00 00 00 00 
0887c     00 00 00 00 
08880     00 00 00 00 
08884     00 00 00 00 | 	byte	$00[16]
08888     01 1D D0 00 
0888c     00 00 00 00 
08890     00 00 00 00 
08894     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08898     00 00 00 00 
0889c     00 00 00 00 
088a0     00 00 00 00 
088a4     00 00 00 00 
088a8     00          | 	byte	$00[17]
088a9     D6 D0 00 00 
088ad     00 00 00 00 
088b1     00 00 00 00 
088b5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088b9     00 00 00 00 
088bd     00 00 00 00 
088c1     00 00 00 00 
088c5     00 00 00    | 	byte	$00[15]
088c8     01 AC D0 00 
088cc     03 58 C0 00 
088d0     00 00 00 00 
088d4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
088d8     00 00 00 00 
088dc     00 00 00 00 
088e0     00 00 00 00 
088e4     00 00 00 00 | 	byte	$00[16]
088e8     01 53 D0 00 
088ec     00 00 00 00 
088f0     00 00 00 00 
088f4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088f8     00 00 00 00 
088fc     00 00 00 00 
08900     00 00 00 00 
08904     00 00 00 00 | 	byte	$00[16]
08908     01 1D D0 00 
0890c     00 00 00 00 
08910     00 00 00 00 
08914     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08918     00 00 00 00 
0891c     00 00 00 00 
08920     00 00 00 00 
08924     00 00 00 00 
08928     00          | 	byte	$00[17]
08929     D6 D0 00 00 
0892d     00 00 00 00 
08931     00 00 00 00 
08935     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08939     00 00 00 00 
0893d     00 00 00 00 
08941     00 00 00 00 
08945     00 00 00    | 	byte	$00[15]
08948     01 AC D0 00 
0894c     00 00 00 00 
08950     00 00 00 00 
08954     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08958     00 00 00 00 
0895c     00 00 00 00 
08960     00 00 00 00 
08964     00 00 00 00 | 	byte	$00[16]
08968     01 53 D0 00 
0896c     00 00 00 00 
08970     00 00 00 00 
08974     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08978     00 00 00 00 
0897c     00 00 00 00 
08980     00 00 00 00 
08984     00 00 00 00 | 	byte	$00[16]
08988     01 1D D0 00 
0898c     00 00 00 00 
08990     00 00 00 00 
08994     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08998     00 00 00 00 
0899c     00 00 00 00 
089a0     00 00 00 00 
089a4     00 00 00 00 
089a8     00          | 	byte	$00[17]
089a9     D6 D0 00 00 
089ad     00 00 00 00 
089b1     00 00 00 00 
089b5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089b9     00 00 00 00 
089bd     00 00 00 00 
089c1     00 00 00 00 
089c5     00 00 00    | 	byte	$00[15]
089c8     01 7D DF 06 
089cc     02 FA C0 00 
089d0     00 00 00 00 
089d4     00 00 00 00 | 	byte	$01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
089d8     00 00 00 00 
089dc     00 00 00 00 
089e0     00 00 00 00 
089e4     00 00 00 00 | 	byte	$00[16]
089e8     01 40 D0 00 
089ec     00 00 00 00 
089f0     00 00 00 00 
089f4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089f8     00 00 00 00 
089fc     00 00 00 00 
08a00     00 00 00 00 
08a04     00 00 00 00 
08a08     00          | 	byte	$00[17]
08a09     FE D0 00 00 
08a0d     00 00 00 00 
08a11     00 00 00 00 
08a15     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a19     00 00 00 00 
08a1d     00 00 00 00 
08a21     00 00 00 00 
08a25     00 00 00 00 | 	byte	$00[16]
08a29     BE D0 00 00 
08a2d     00 00 00 00 
08a31     00 00 00 00 
08a35     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a39     00 00 00 00 
08a3d     00 00 00 00 
08a41     00 00 00 00 
08a45     00 00 00    | 	byte	$00[15]
08a48     01 7D D0 00 
08a4c     00 00 00 00 
08a50     00 00 00 00 
08a54     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a58     00 00 00 00 
08a5c     00 00 00 00 
08a60     00 00 00 00 
08a64     00 00 00 00 | 	byte	$00[16]
08a68     01 40 D0 00 
08a6c     00 00 00 00 
08a70     00 00 00 00 
08a74     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a78     00 00 00 00 
08a7c     00 00 00 00 
08a80     00 00 00 00 
08a84     00 00 00 00 
08a88     00          | 	byte	$00[17]
08a89     FE D0 00 00 
08a8d     00 00 00 00 
08a91     00 00 00 00 
08a95     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a99     00 00 00 00 
08a9d     00 00 00 00 
08aa1     00 00 00 00 
08aa5     00 00 00 00 | 	byte	$00[16]
08aa9     BE D0 00 00 
08aad     00 00 00 00 
08ab1     00 00 00 00 
08ab5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ab9     00 00 00 00 
08abd     00 00 00 00 
08ac1     00 00 00 00 
08ac5     00 00 00    | 	byte	$00[15]
08ac8     01 7D D0 00 
08acc     02 FA C0 00 
08ad0     00 00 00 00 
08ad4     11 1D 2C 40 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $00, $00, $00, $11, $1d, $2c, $40
08ad8     00 00 00 00 
08adc     00 00 00 00 | 	byte	$00[8]
08ae0     11 1D 2C 40 
08ae4     00 00 00 00 
08ae8     01 40 D0 00 
08aec     00 00 00 00 | 	byte	$11, $1d, $2c, $40, $00, $00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00
08af0     00 00 00 00 
08af4     00 00 00 00 
08af8     00 00 00 00 
08afc     00 00 00 00 
08b00     00 00 00 00 | 	byte	$00[20]
08b04     11 1D 2C 30 
08b08     00 FE D0 00 
08b0c     00 00 00 00 
08b10     11 1D 2C 30 | 	byte	$11, $1d, $2c, $30, $00, $fe, $d0, $00, $00, $00, $00, $00, $11, $1d, $2c, $30
08b14     00 00 00 00 
08b18     00 00 00 00 
08b1c     00 00 00 00 
08b20     00 00 00 00 
08b24     00 00 00 00 
08b28     00          | 	byte	$00[21]
08b29     BE D0 00 00 
08b2d     00 00 00 00 
08b31     00 00 00 11 
08b35     1D 2C 25 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $1d, $2c, $25, $00
08b39     00 00 00 00 
08b3d     00 00 00    | 	byte	$00[7]
08b40     11 1D 2C 25 
08b44     00 00 00 00 
08b48     01 7D D0 00 
08b4c     00 00 00 00 | 	byte	$11, $1d, $2c, $25, $00, $00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00
08b50     00 00 00 00 
08b54     00 00 00 00 
08b58     00 00 00 00 
08b5c     00 00 00 00 
08b60     00 00 00 00 | 	byte	$00[20]
08b64     11 1D 2C 20 
08b68     01 40 D0 00 
08b6c     00 00 00 00 
08b70     11 1D 2C 20 | 	byte	$11, $1d, $2c, $20, $01, $40, $d0, $00, $00, $00, $00, $00, $11, $1d, $2c, $20
08b74     00 00 00 00 
08b78     00 00 00 00 
08b7c     00 00 00 00 
08b80     00 00 00 00 
08b84     00 00 00 00 
08b88     00          | 	byte	$00[21]
08b89     FE D0 00 00 
08b8d     00 00 00 00 
08b91     00 00 00 11 
08b95     1D 2C 15 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $1d, $2c, $15, $00
08b99     00 00 00 00 
08b9d     00 00 00    | 	byte	$00[7]
08ba0     11 1D 2C 15 
08ba4     00 00 00 00 
08ba8     00 BE D0 00 
08bac     00 00 00 00 | 	byte	$11, $1d, $2c, $15, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00
08bb0     00 00 00 00 
08bb4     00 00 00 00 
08bb8     00 00 00 00 
08bbc     00 00 00 00 
08bc0     00 00 00 00 
08bc4     00 00 00 00 | 	byte	$00[24]
08bc8     01 AC D0 00 
08bcc     03 58 C0 00 
08bd0     00 00 00 00 
08bd4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd8     00 00 00 00 
08bdc     00 00 00 00 
08be0     00 00 00 00 
08be4     00 00 00 00 | 	byte	$00[16]
08be8     01 53 D0 00 
08bec     00 00 00 00 
08bf0     00 00 00 00 
08bf4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf8     00 00 00 00 
08bfc     00 00 00 00 
08c00     00 00 00 00 
08c04     00 00 00 00 | 	byte	$00[16]
08c08     01 1D D0 00 
08c0c     00 00 00 00 
08c10     00 00 00 00 
08c14     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c18     00 00 00 00 
08c1c     00 00 00 00 
08c20     00 00 00 00 
08c24     00 00 00 00 
08c28     00          | 	byte	$00[17]
08c29     D6 D0 00 00 
08c2d     00 00 00 00 
08c31     00 00 00 00 
08c35     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c39     00 00 00 00 
08c3d     00 00 00 00 
08c41     00 00 00 00 
08c45     00 00 00    | 	byte	$00[15]
08c48     01 AC D0 00 
08c4c     00 00 00 00 
08c50     00 00 00 00 
08c54     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c58     00 00 00 00 
08c5c     00 00 00 00 
08c60     00 00 00 00 
08c64     00 00 00 00 | 	byte	$00[16]
08c68     01 53 D0 00 
08c6c     00 00 00 00 
08c70     00 00 00 00 
08c74     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c78     00 00 00 00 
08c7c     00 00 00 00 
08c80     00 00 00 00 
08c84     00 00 00 00 | 	byte	$00[16]
08c88     01 1D D0 00 
08c8c     00 00 00 00 
08c90     00 00 00 00 
08c94     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c98     00 00 00 00 
08c9c     00 00 00 00 
08ca0     00 00 00 00 
08ca4     00 00 00 00 
08ca8     00          | 	byte	$00[17]
08ca9     D6 D0 00 00 
08cad     00 00 00 00 
08cb1     00 00 00 00 
08cb5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cb9     00 00 00 00 
08cbd     00 00 00 00 
08cc1     00 00 00 00 
08cc5     00 00 00    | 	byte	$00[15]
08cc8     01 AC D0 00 
08ccc     03 58 C0 00 
08cd0     00 00 0C 40 
08cd4     11 40 2C 40 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $0c, $40, $11, $40, $2c, $40
08cd8     00 00 00 00 
08cdc     00 00 00 00 | 	byte	$00[8]
08ce0     11 40 2C 40 
08ce4     00 00 00 00 
08ce8     01 53 D0 00 
08cec     00 00 00 00 | 	byte	$11, $40, $2c, $40, $00, $00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00
08cf0     00 00 00 00 
08cf4     00 00 00 00 
08cf8     00 00 00 00 
08cfc     00 00 00 00 
08d00     00 00 00 00 | 	byte	$00[20]
08d04     11 40 2C 30 
08d08     01 1D D0 00 
08d0c     00 00 00 00 
08d10     11 40 2C 30 | 	byte	$11, $40, $2c, $30, $01, $1d, $d0, $00, $00, $00, $00, $00, $11, $40, $2c, $30
08d14     00 00 00 00 
08d18     00 00 00 00 
08d1c     00 00 00 00 
08d20     00 00 00 00 
08d24     00 00 00 00 
08d28     00          | 	byte	$00[21]
08d29     D6 D0 00 00 
08d2d     00 00 00 00 
08d31     00 00 00 11 
08d35     40 2C 25 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $40, $2c, $25, $00
08d39     00 00 00 00 
08d3d     00 00 00    | 	byte	$00[7]
08d40     11 40 2C 25 
08d44     00 00 00 00 
08d48     01 AC D0 00 
08d4c     00 00 00 00 | 	byte	$11, $40, $2c, $25, $00, $00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00
08d50     00 00 00 00 
08d54     00 00 00 00 
08d58     00 00 00 00 
08d5c     00 00 00 00 
08d60     00 00 00 00 | 	byte	$00[20]
08d64     11 40 2C 20 
08d68     01 53 D0 00 
08d6c     00 00 00 00 
08d70     11 40 2C 20 | 	byte	$11, $40, $2c, $20, $01, $53, $d0, $00, $00, $00, $00, $00, $11, $40, $2c, $20
08d74     00 00 00 00 
08d78     00 00 00 00 
08d7c     00 00 00 00 
08d80     00 00 00 00 
08d84     00 00 00 00 | 	byte	$00[20]
08d88     01 1D D0 00 
08d8c     00 00 00 00 
08d90     00 00 00 00 
08d94     11 40 2C 15 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $40, $2c, $15
08d98     00 00 00 00 
08d9c     00 00 00 00 | 	byte	$00[8]
08da0     11 40 2C 15 
08da4     00 00 00 00 
08da8     00 D6 D0 00 
08dac     00 00 00 00 | 	byte	$11, $40, $2c, $15, $00, $00, $00, $00, $00, $d6, $d0, $00, $00, $00, $00, $00
08db0     00 00 00 00 
08db4     00 00 00 00 
08db8     00 00 00 00 
08dbc     00 00 00 00 
08dc0     00 00 00 00 
08dc4     00 00 00 00 | 	byte	$00[24]
08dc8     01 7D DF 06 
08dcc     02 FA C0 00 
08dd0     00 BE 20 00 
08dd4     00 BE 60 00 | 	byte	$01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
08dd8     00 00 00 00 
08ddc     00 00 00 00 
08de0     00 00 00 00 
08de4     00 00 00 00 | 	byte	$00[16]
08de8     01 40 D0 00 
08dec     00 00 00 00 
08df0     00 00 00 00 
08df4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08df8     00 00 00 00 
08dfc     00 00 00 00 
08e00     00 00 00 00 
08e04     00 00 00 00 
08e08     00          | 	byte	$00[17]
08e09     FE D0 00 00 
08e0d     00 00 00 00 
08e11     00 00 00 00 
08e15     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e19     00 00 00 00 
08e1d     00 00 00 00 
08e21     00 00 00 00 
08e25     00 00 00 00 | 	byte	$00[16]
08e29     BE D0 00 00 
08e2d     00 00 00 00 
08e31     BE 20 00 00 
08e35     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
08e39     00 00 00 00 
08e3d     00 00 00 00 
08e41     00 00 00 00 
08e45     00 00 00    | 	byte	$00[15]
08e48     01 7D D0 00 
08e4c     00 00 00 00 
08e50     00 BE 20 00 
08e54     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
08e58     00 00 00 00 
08e5c     00 00 00 00 
08e60     00 00 00 00 
08e64     00 00 00 00 | 	byte	$00[16]
08e68     01 40 D0 00 
08e6c     00 00 00 00 
08e70     00 00 00 00 
08e74     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e78     00 00 00 00 
08e7c     00 00 00 00 
08e80     00 00 00 00 
08e84     00 00 00 00 
08e88     00          | 	byte	$00[17]
08e89     FE D0 00 00 
08e8d     00 00 00 00 
08e91     00 00 00 00 
08e95     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e99     00 00 00 00 
08e9d     00 00 00 00 
08ea1     00 00 00 00 
08ea5     00 00 00 00 | 	byte	$00[16]
08ea9     BE D0 00 00 
08ead     00 00 00 00 
08eb1     BE 20 00 00 
08eb5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
08eb9     00 00 00 00 
08ebd     00 00 00 00 
08ec1     00 00 00 00 
08ec5     00 00 00    | 	byte	$00[15]
08ec8     01 7D D0 00 
08ecc     02 FA C0 00 
08ed0     00 BE 20 00 
08ed4     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
08ed8     00 00 00 00 
08edc     00 00 00 00 
08ee0     00 00 00 00 
08ee4     00 00 00 00 | 	byte	$00[16]
08ee8     01 40 D0 00 
08eec     00 00 00 00 
08ef0     00 00 00 00 
08ef4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ef8     00 00 00 00 
08efc     00 00 00 00 
08f00     00 00 00 00 
08f04     00 00 00 00 
08f08     00          | 	byte	$00[17]
08f09     FE D0 00 00 
08f0d     00 00 00 00 
08f11     00 00 00 00 
08f15     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f19     00 00 00 00 
08f1d     00 00 00 00 
08f21     00 00 00 00 
08f25     00 00 00 00 | 	byte	$00[16]
08f29     BE D0 00 00 
08f2d     00 00 00 00 
08f31     BE 20 00 00 
08f35     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
08f39     00 00 00 00 
08f3d     00 00 00 00 
08f41     00 00 00 00 
08f45     00 00 00    | 	byte	$00[15]
08f48     01 7D D0 00 
08f4c     00 00 00 00 
08f50     00 BE 20 00 
08f54     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
08f58     00 00 00 00 
08f5c     00 00 00 00 
08f60     00 00 00 00 
08f64     00 00 00 00 | 	byte	$00[16]
08f68     01 40 D0 00 
08f6c     00 00 00 00 
08f70     00 00 00 00 
08f74     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f78     00 00 00 00 
08f7c     00 00 00 00 
08f80     00 00 00 00 
08f84     00 00 00 00 
08f88     00          | 	byte	$00[17]
08f89     FE D0 00 00 
08f8d     00 00 00 00 
08f91     00 00 00 00 
08f95     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08f99     00 00 00 00 
08f9d     00 00 00 00 
08fa1     00 00 00 00 
08fa5     00 00 00 00 | 	byte	$00[16]
08fa9     BE D0 00 00 
08fad     00 00 00 00 
08fb1     00 00 00 00 
08fb5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fb9     00 00 00 00 
08fbd     00 00 00 00 
08fc1     00 00 00 00 
08fc5     00 00 00    | 	byte	$00[15]
08fc8     01 AC D0 00 
08fcc     03 58 C0 00 
08fd0     00 BE 20 00 
08fd4     00 BE 60 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
08fd8     00 00 00 00 
08fdc     00 00 00 00 
08fe0     00 00 00 00 
08fe4     00 00 00 00 | 	byte	$00[16]
08fe8     01 53 D0 00 
08fec     00 00 00 00 
08ff0     00 00 00 00 
08ff4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ff8     00 00 00 00 
08ffc     00 00 00 00 
09000     00 00 00 00 
09004     00 00 00 00 | 	byte	$00[16]
09008     01 1D D0 00 
0900c     00 00 00 00 
09010     00 00 00 00 
09014     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09018     00 00 00 00 
0901c     00 00 00 00 
09020     00 00 00 00 
09024     00 00 00 00 
09028     00          | 	byte	$00[17]
09029     D6 D0 00 00 
0902d     00 00 00 00 
09031     BE 20 00 00 
09035     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09039     00 00 00 00 
0903d     00 00 00 00 
09041     00 00 00 00 
09045     00 00 00    | 	byte	$00[15]
09048     01 AC D0 00 
0904c     00 00 00 00 
09050     00 BE 20 00 
09054     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09058     00 00 00 00 
0905c     00 00 00 00 
09060     00 00 00 00 
09064     00 00 00 00 | 	byte	$00[16]
09068     01 53 D0 00 
0906c     00 00 00 00 
09070     00 00 00 00 
09074     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09078     00 00 00 00 
0907c     00 00 00 00 
09080     00 00 00 00 
09084     00 00 00 00 | 	byte	$00[16]
09088     01 1D D0 00 
0908c     00 00 00 00 
09090     00 00 00 00 
09094     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09098     00 00 00 00 
0909c     00 00 00 00 
090a0     00 00 00 00 
090a4     00 00 00 00 
090a8     00          | 	byte	$00[17]
090a9     D6 D0 00 00 
090ad     00 00 00 00 
090b1     BE 20 00 00 
090b5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
090b9     00 00 00 00 
090bd     00 00 00 00 
090c1     00 00 00 00 
090c5     00 00 00    | 	byte	$00[15]
090c8     01 AC D0 00 
090cc     03 58 C0 00 
090d0     00 BE 20 00 
090d4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
090d8     00 00 00 00 
090dc     00 00 00 00 
090e0     00 00 00 00 
090e4     00 00 00 00 | 	byte	$00[16]
090e8     01 53 D0 00 
090ec     00 00 00 00 
090f0     00 00 00 00 
090f4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090f8     00 00 00 00 
090fc     00 00 00 00 
09100     00 00 00 00 
09104     00 00 00 00 | 	byte	$00[16]
09108     01 1D D0 00 
0910c     00 00 00 00 
09110     00 00 00 00 
09114     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09118     00 00 00 00 
0911c     00 00 00 00 
09120     00 00 00 00 
09124     00 00 00 00 
09128     00          | 	byte	$00[17]
09129     D6 D0 00 00 
0912d     00 00 00 00 
09131     BE 20 00 00 
09135     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09139     00 00 00 00 
0913d     00 00 00 00 
09141     00 00 00 00 
09145     00 00 00    | 	byte	$00[15]
09148     01 AC D0 00 
0914c     00 00 00 00 
09150     00 BE 20 00 
09154     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09158     00 00 00 00 
0915c     00 00 00 00 
09160     00 00 00 00 
09164     00 00 00 00 | 	byte	$00[16]
09168     01 53 D0 00 
0916c     00 00 00 00 
09170     00 00 00 00 
09174     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09178     00 00 00 00 
0917c     00 00 00 00 
09180     00          | 	byte	$00[9]
09181     BE 20 00 00 
09185     00 00 00 01 
09189     1D D0 00 00 
0918d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
09191     00 00 00 00 
09195     00 00 00 00 
09199     00 00 00 00 
0919d     00 00 00 00 
091a1     00 00 00 00 
091a5     00 00 00 00 | 	byte	$00[24]
091a9     D6 D0 00 00 
091ad     00 00 00 00 
091b1     BE 20 00 00 
091b5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
091b9     00 00 00 00 
091bd     00 00 00 00 
091c1     00 00 00 00 
091c5     00 00 00    | 	byte	$00[15]
091c8     01 7D DF 06 
091cc     02 FA C0 00 
091d0     00 BE 20 00 
091d4     00 BE 60 00 | 	byte	$01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
091d8     00 00 00 00 
091dc     00 00 00 00 
091e0     00 00 00 00 
091e4     00 00 00 00 | 	byte	$00[16]
091e8     01 40 D0 00 
091ec     00 00 00 00 
091f0     00 00 00 00 
091f4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091f8     00 00 00 00 
091fc     00 00 00 00 
09200     00 00 00 00 
09204     00 00 00 00 
09208     00          | 	byte	$00[17]
09209     FE D0 00 00 
0920d     00 00 00 00 
09211     BE 20 00 00 
09215     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09219     00 00 00 00 
0921d     00 00 00 00 
09221     00 00 00 00 
09225     00 00 00 00 | 	byte	$00[16]
09229     BE D0 00 00 
0922d     00 00 00 00 
09231     BE 20 00 00 
09235     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09239     00 00 00 00 
0923d     00 00 00 00 
09241     00 00 00 00 
09245     00 00 00    | 	byte	$00[15]
09248     01 7D D0 00 
0924c     00 00 00 00 
09250     00 BE 20 00 
09254     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09258     00 00 00 00 
0925c     00 00 00 00 
09260     00 00 00 00 
09264     00 00 00 00 | 	byte	$00[16]
09268     01 40 D0 00 
0926c     00 00 00 00 
09270     00 00 00 00 
09274     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09278     00 00 00 00 
0927c     00 00 00 00 
09280     00 00 00 00 
09284     00 00 00 00 
09288     00          | 	byte	$00[17]
09289     FE D0 00 00 
0928d     00 00 00 00 
09291     BE 20 00 00 
09295     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09299     00 00 00 00 
0929d     00 00 00 00 
092a1     00 00 00 00 
092a5     00 00 00 00 | 	byte	$00[16]
092a9     BE D0 00 00 
092ad     00 00 00 00 
092b1     BE 20 00 00 
092b5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
092b9     00 00 00 00 
092bd     00 00 00 00 
092c1     00 00 00 00 
092c5     00 00 00    | 	byte	$00[15]
092c8     01 7D D0 00 
092cc     02 FA C0 00 
092d0     00 BE 20 00 
092d4     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
092d8     00 00 00 00 
092dc     00 00 00 00 
092e0     00 00 00 00 
092e4     00 00 00 00 | 	byte	$00[16]
092e8     01 40 D0 00 
092ec     00 00 00 00 
092f0     00 00 00 00 
092f4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092f8     00 00 00 00 
092fc     00 00 00 00 
09300     00 00 00 00 
09304     00 00 00 00 
09308     00          | 	byte	$00[17]
09309     FE D0 00 00 
0930d     00 00 00 00 
09311     BE 20 00 00 
09315     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09319     00 00 00 00 
0931d     00 00 00 00 
09321     00 00 00 00 
09325     00 00 00 00 | 	byte	$00[16]
09329     BE D0 00 00 
0932d     00 00 00 00 
09331     BE 20 00 00 
09335     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09339     00 00 00 00 
0933d     00 00 00 00 
09341     00 00 00 00 
09345     00 00 00    | 	byte	$00[15]
09348     01 7D D0 00 
0934c     00 00 00 00 
09350     00 BE 20 00 
09354     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09358     00 00 00 00 
0935c     00 00 00 00 
09360     00 00 00 00 
09364     00 00 00 00 | 	byte	$00[16]
09368     01 40 D0 00 
0936c     00 00 00 00 
09370     00 00 00 00 
09374     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09378     00 00 00 00 
0937c     00 00 00 00 
09380     00          | 	byte	$00[9]
09381     BE 20 00 00 
09385     00 00 00 00 
09389     FE D0 00 00 
0938d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
09391     00 00 00 00 
09395     00 00 00 00 
09399     00 00 00 00 
0939d     00 00 00 00 
093a1     00 00 00 00 
093a5     00 00 00 00 | 	byte	$00[24]
093a9     BE D0 00 00 
093ad     00 00 00 00 
093b1     BE 20 00 00 
093b5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
093b9     00 00 00 00 
093bd     00 00 00 00 
093c1     00 00 00 00 
093c5     00 00 00    | 	byte	$00[15]
093c8     01 AC D0 00 
093cc     03 58 C0 00 
093d0     00 BE 20 00 
093d4     00 BE 60 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
093d8     00 00 00 00 
093dc     00 00 00 00 
093e0     00 00 00 00 
093e4     00 00 00 00 | 	byte	$00[16]
093e8     01 53 D0 00 
093ec     00 00 00 00 
093f0     00 00 00 00 
093f4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093f8     00 00 00 00 
093fc     00 00 00 00 
09400     00 00 00 00 
09404     00 00 00 00 | 	byte	$00[16]
09408     01 1D D0 00 
0940c     00 00 00 00 
09410     00 BE 20 00 
09414     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09418     00 00 00 00 
0941c     00 00 00 00 
09420     00 00 00 00 
09424     00 00 00 00 
09428     00          | 	byte	$00[17]
09429     D6 D0 00 00 
0942d     00 00 00 00 
09431     BE 20 00 00 
09435     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09439     00 00 00 00 
0943d     00 00 00 00 
09441     00 00 00 00 
09445     00 00 00    | 	byte	$00[15]
09448     01 AC D0 00 
0944c     00 00 00 00 
09450     00 BE 20 00 
09454     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09458     00 00 00 00 
0945c     00 00 00 00 
09460     00 00 00 00 
09464     00 00 00 00 | 	byte	$00[16]
09468     01 53 D0 00 
0946c     00 00 00 00 
09470     00 BE 20 00 
09474     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09478     00 00 00 00 
0947c     00 00 00 00 
09480     00 00 00 00 
09484     00 00 00 00 | 	byte	$00[16]
09488     01 1D D0 00 
0948c     00 00 00 00 
09490     00 00 00 00 
09494     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09498     00 00 00 00 
0949c     00 00 00 00 
094a0     00 00 00 00 
094a4     00 00 00 00 
094a8     00          | 	byte	$00[17]
094a9     D6 D0 00 00 
094ad     00 00 00 00 
094b1     BE 20 00 00 
094b5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
094b9     00 00 00 00 
094bd     00 00 00 00 
094c1     00 00 00 00 
094c5     00 00 00    | 	byte	$00[15]
094c8     01 AC D0 00 
094cc     03 58 C0 00 
094d0     00 BE 20 00 
094d4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
094d8     00 00 00 00 
094dc     00 00 00 00 
094e0     00 00 00 00 
094e4     00 00 00 00 | 	byte	$00[16]
094e8     01 53 D0 00 
094ec     00 00 00 00 
094f0     00 BE 20 00 
094f4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
094f8     00 00 00 00 
094fc     00 00 00 00 
09500     00 00 00 00 
09504     00 00 00 00 | 	byte	$00[16]
09508     01 1D D0 00 
0950c     00 00 00 00 
09510     00 00 00 00 
09514     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09518     00 00 00 00 
0951c     00 00 00 00 
09520     00 00 00 00 
09524     00 00 00 00 
09528     00          | 	byte	$00[17]
09529     D6 D0 00 00 
0952d     00 00 00 00 
09531     BE 20 00 00 
09535     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
09539     00 00 00 00 
0953d     00 00 00 00 
09541     00 00 00 00 
09545     00 00 00    | 	byte	$00[15]
09548     01 AC D0 00 
0954c     00 00 00 00 
09550     00 BE 20 00 
09554     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09558     00 00 00 00 
0955c     00 00 00 00 
09560     00 00 00 00 
09564     00 00 00 00 | 	byte	$00[16]
09568     01 53 D0 00 
0956c     00 00 00 00 
09570     00 BE 20 00 
09574     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
09578     00 00 00 00 
0957c     00 00 00 00 
09580     00          | 	byte	$00[9]
09581     BE 20 00 00 
09585     00 00 00 01 
09589     1D D0 00 00 
0958d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
09591     00 00 00 00 
09595     00 00 00 00 
09599     00 00 00 00 
0959d     00 00 00 00 
095a1     00 00 00 00 
095a5     00 00 00 00 | 	byte	$00[24]
095a9     D6 D0 00 00 
095ad     00 00 00 00 
095b1     BE 20 00 00 
095b5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
095b9     00 00 00 00 
095bd     00 00 00 00 
095c1     00 00 00 00 
095c5     00 00 00 00 | 	byte	$00[16]
095c9     BE C0 00 02 
095cd     FA C0 00 00 
095d1     BE 60 00 00 
095d5     BE 20 00 00 | 	byte	$be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $60, $00, $00, $be, $20, $00, $00
095d9     00 00 00 00 
095dd     00 00 00 00 
095e1     00 00 00 00 
095e5     00 00 00 00 | 	byte	$00[16]
095e9     BE C0 00 00 
095ed     00 00 00 00 
095f1     00 00 00 00 
095f5     BE 50 00 00 | 	byte	$be, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
095f9     00 00 00 00 
095fd     00 00 00 00 
09601     00 00 00 00 
09605     00 00 00 00 | 	byte	$00[16]
09609     A0 C0 00 00 
0960d     00 00 00 00 
09611     00 00 00 00 
09615     BE 50 00 00 | 	byte	$a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
09619     00 00 00 00 
0961d     00 00 00 00 
09621     00 00 00 00 
09625     00 00 00 00 | 	byte	$00[16]
09629     8F C0 00 00 
0962d     00 00 00 00 
09631     BE 20 00 00 
09635     BE 50 00 00 | 	byte	$8f, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
09639     00 00 00 00 
0963d     00 00 00 00 
09641     00 00 00 00 
09645     00 00 00 00 | 	byte	$00[16]
09649     7F C0 00 00 
0964d     00 00 00 10 
09651     D6 50 00 00 
09655     BE 50 00 00 | 	byte	$7f, $c0, $00, $00, $00, $00, $00, $10, $d6, $50, $00, $00, $be, $50, $00, $00
09659     00 00 00 00 
0965d     00 00 00 00 
09661     00 00 00 00 
09665     00 00 00 00 
09669     00 00 00 00 
0966d     00 00 00 00 
09671     00 00 00 00 | 	byte	$00[28]
09675     BE 50 00 00 
09679     00 00 00 00 
0967d     00 00 00 00 
09681     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09685     00 00 00 00 
09689     7F C0 00 00 
0968d     00 00 00 00 
09691     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09695     BE 50 00 00 
09699     00 00 00 00 
0969d     00 00 00 00 
096a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096a5     00 00 00 00 
096a9     7F C0 00 00 
096ad     00 00 00 00 
096b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096b5     BE 50 00 00 
096b9     00 00 00 00 
096bd     00 00 00 00 
096c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096c5     00 00 00 00 
096c9     78 C0 00 02 
096cd     FA C0 00 00 
096d1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $78, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
096d5     BE 50 00 00 
096d9     00 00 00 00 
096dd     00 00 00 00 
096e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096e5     00 00 00 00 
096e9     00 00 00 00 
096ed     00 00 00 00 
096f1     00 00 00 00 | 	byte	$00[16]
096f5     BE 50 00 00 
096f9     00 00 00 00 
096fd     00 00 00 00 
09701     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09705     00 00 00 00 
09709     7F C0 00 00 
0970d     00 00 00 00 
09711     00 00 00 00 | 	byte	$00, $00, $00, $00, $7f, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09715     BE 50 00 00 
09719     00 00 00 00 
0971d     00 00 00 00 
09721     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09725     00 00 00 00 
09729     00 00 00 00 
0972d     00 00 00 00 | 	byte	$00[12]
09731     BE 20 00 00 
09735     BE 50 00 00 
09739     00 00 00 00 
0973d     00 00 00 00 | 	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09741     00 00 00 00 
09745     00 00 00 00 | 	byte	$00[8]
09749     8F C0 00 00 
0974d     00 00 00 10 
09751     BE 50 00 00 
09755     BE 50 00 00 | 	byte	$8f, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
09759     00 00 00 00 
0975d     00 00 00 00 
09761     00 00 00 00 
09765     00 00 00 00 
09769     00 00 00 00 
0976d     00 00 00 00 
09771     00 00 00 00 | 	byte	$00[28]
09775     BE 50 00 00 
09779     00 00 00 00 
0977d     00 00 00 00 
09781     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09785     00 00 00 00 
09789     A0 C0 00 00 
0978d     00 00 00 00 
09791     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09795     BE 50 00 00 
09799     00 00 00 00 
0979d     00 00 00 00 
097a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097a5     00 00 00 00 
097a9     00 00 00 00 
097ad     00 00 00 00 
097b1     00 00 00 00 | 	byte	$00[16]
097b5     BE 50 00 00 
097b9     00 00 00 00 
097bd     00 00 00 00 
097c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097c5     00 00 00 00 
097c9     8F C0 00 03 
097cd     58 C0 00 00 
097d1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $8f, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
097d5     BE 50 00 00 
097d9     00 00 00 00 
097dd     00 00 00 00 
097e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097e5     00 00 00 00 
097e9     00 00 00 00 
097ed     00 00 00 00 
097f1     00 00 00 00 | 	byte	$00[16]
097f5     BE 50 00 00 
097f9     00 00 00 00 
097fd     00 00 00 00 
09801     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09805     00 00 00 00 
09809     A0 C0 00 00 
0980d     00 00 00 00 
09811     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09815     BE 50 00 00 
09819     00 00 00 00 
0981d     00 00 00 00 
09821     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09825     00 00 00 00 
09829     00 00 00 00 
0982d     00 00 00 00 | 	byte	$00[12]
09831     BE 20 00 00 
09835     BE 50 00 00 
09839     00 00 00 00 
0983d     00 00 00 00 | 	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09841     00 00 00 00 
09845     00 00 00 00 | 	byte	$00[8]
09849     AA C0 00 00 
0984d     00 00 00 10 
09851     BE 50 00 00 
09855     BE 50 00 00 | 	byte	$aa, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
09859     00 00 00 00 
0985d     00 00 00 00 
09861     00 00 00 00 
09865     00 00 00 00 
09869     00 00 00 00 
0986d     00 00 00 00 
09871     00 00 00 00 | 	byte	$00[28]
09875     BE 50 00 00 
09879     00 00 00 00 
0987d     00 00 00 00 
09881     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09885     00 00 00 00 
09889     A0 C0 00 00 
0988d     00 00 00 00 
09891     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09895     BE 50 00 00 
09899     00 00 00 00 
0989d     00 00 00 00 
098a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098a5     00 00 00 00 
098a9     00 00 00 00 
098ad     00 00 00 00 
098b1     00 00 00 00 | 	byte	$00[16]
098b5     BE 50 00 00 
098b9     00 00 00 00 
098bd     00 00 00 00 
098c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098c5     00 00 00 00 
098c9     AA C0 00 03 
098cd     58 C0 00 00 
098d1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $aa, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
098d5     BE 50 00 00 
098d9     00 00 00 00 
098dd     00 00 00 00 
098e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098e5     00 00 00 00 
098e9     00 00 00 00 
098ed     00 00 00 00 
098f1     00 00 00 00 | 	byte	$00[16]
098f5     BE 50 00 00 
098f9     00 00 00 00 
098fd     00 00 00 00 
09901     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09905     00 00 00 00 
09909     D6 C0 00 00 
0990d     00 00 00 00 
09911     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09915     BE 50 00 00 
09919     00 00 00 00 
0991d     00 00 00 00 
09921     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09925     00 00 00 00 
09929     00 00 00 00 
0992d     00 00 00 00 | 	byte	$00[12]
09931     BE 20 00 00 
09935     BE 50 00 00 
09939     00 00 00 00 
0993d     00 00 00 00 | 	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09941     00 00 00 00 
09945     00 00 00 00 
09949     00 00 00 00 
0994d     00 00 00    | 	byte	$00[15]
09950     10 BE 50 00 
09954     00 BE 50 00 
09958     00 00 00 00 
0995c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
09960     00 00 00 00 
09964     00 00 00 00 
09968     00 00 00 00 
0996c     00 00 00 00 
09970     00 00 00 00 
09974     00          | 	byte	$00[21]
09975     BE 50 00 00 
09979     00 00 00 00 
0997d     00 00 00 10 
09981     BE 50 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09985     00 00 00 00 
09989     D6 C0 00 00 
0998d     00 00 00 10 
09991     BE 50 00 00 | 	byte	$00, $00, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09995     BE 50 00 00 
09999     00 00 00 00 
0999d     00 00 00 00 
099a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099a5     00 00 00 00 
099a9     00 00 00 00 
099ad     00 00 00    | 	byte	$00[11]
099b0     10 BE 50 00 
099b4     00 BE 50 00 
099b8     00 00 00 00 
099bc     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
099c0     00 00 00 00 
099c4     00 00 00 00 
099c8     00          | 	byte	$00[9]
099c9     BE C0 00 02 
099cd     FA C0 00 00 
099d1     BE 20 00 00 
099d5     BE 50 00 00 | 	byte	$be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
099d9     00 00 00 00 
099dd     00 00 00 00 
099e1     00 00 00 00 
099e5     00 00 00 00 
099e9     00 00 00 00 
099ed     00 00 00 00 
099f1     00 00 00 00 | 	byte	$00[28]
099f5     BE 50 00 00 
099f9     00 00 00 00 
099fd     00 00 00 00 
09a01     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a05     00 00 00 00 
09a09     FE C0 00 00 
09a0d     00 00 00 00 
09a11     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a15     BE 50 00 00 
09a19     00 00 00 00 
09a1d     00 00 00 00 
09a21     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a25     00 00 00 01 
09a29     1D C0 00 00 
09a2d     00 00 00 00 
09a31     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
09a35     BE 50 00 00 
09a39     00 00 00 00 
09a3d     00 00 00 00 
09a41     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a45     00 00 00 01 
09a49     40 C0 00 00 
09a4d     00 00 00 10 
09a51     D6 50 00 00 | 	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $10, $d6, $50, $00, $00
09a55     BE 50 00 00 
09a59     00 00 00 00 
09a5d     00 00 00 00 
09a61     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a65     00 00 00 01 
09a69     1D C0 00 00 
09a6d     00 00 00 00 
09a71     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a75     BE 50 00 00 
09a79     00 00 00 00 
09a7d     00 00 00 00 
09a81     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a85     00 00 00 00 
09a89     FE C0 00 00 
09a8d     00 00 00 00 
09a91     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a95     BE 50 00 00 
09a99     00 00 00 00 
09a9d     00 00 00 00 
09aa1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09aa5     00 00 00 00 
09aa9     00 00 00 00 
09aad     00 00 00 00 
09ab1     00 00 00 00 | 	byte	$00[16]
09ab5     BE 50 00 00 
09ab9     00 00 00 00 
09abd     00 00 00 00 
09ac1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ac5     00 00 00 00 
09ac9     BE C0 00 02 
09acd     FA C0 00 00 
09ad1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
09ad5     BE 50 00 00 
09ad9     00 00 00 00 
09add     00 00 00 00 
09ae1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ae5     00 00 00 00 
09ae9     00 00 00 00 
09aed     00 00 00 00 
09af1     00 00 00 00 | 	byte	$00[16]
09af5     BE 50 00 00 
09af9     00 00 00 00 
09afd     00 00 00 00 
09b01     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b05     00 00 00 00 
09b09     FE C0 00 00 
09b0d     00 00 00 00 
09b11     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b15     BE 50 00 00 
09b19     00 00 00 00 
09b1d     00 00 00 00 
09b21     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b25     00 00 00 01 
09b29     1D C0 00 00 
09b2d     00 00 00 00 
09b31     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
09b35     BE 50 00 00 
09b39     00 00 00 00 
09b3d     00 00 00 00 
09b41     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b45     00 00 00 01 
09b49     40 C0 00 00 
09b4d     00 00 00 10 
09b51     BE 50 00 00 | 	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09b55     BE 50 00 00 
09b59     00 00 00 00 
09b5d     00 00 00 00 
09b61     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b65     00 00 00 01 
09b69     1D C0 00 00 
09b6d     00 00 00 00 
09b71     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b75     BE 50 00 00 
09b79     00 00 00 00 
09b7d     00 00 00 00 
09b81     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b85     00 00 00 00 
09b89     FE C0 00 00 
09b8d     00 00 00 00 
09b91     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b95     BE 50 00 00 
09b99     00 00 00 00 
09b9d     00 00 00 00 
09ba1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ba5     00 00 00 01 
09ba9     40 C0 00 00 
09bad     00 00 00 00 
09bb1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bb5     BE 50 00 00 
09bb9     00 00 00 00 
09bbd     00 00 00 00 
09bc1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bc5     00 00 00 01 
09bc9     1D C0 00 03 
09bcd     58 C0 00 00 
09bd1     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
09bd5     BE 50 00 00 
09bd9     00 00 00 00 
09bdd     00 00 00 00 
09be1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09be5     00 00 00 00 
09be9     00 00 00 00 
09bed     00 00 00 00 
09bf1     00 00 00 00 | 	byte	$00[16]
09bf5     BE 50 00 00 
09bf9     00 00 00 00 
09bfd     00 00 00 00 
09c01     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c05     00 00 00 01 
09c09     53 C0 00 00 
09c0d     00 00 00 00 
09c11     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c15     BE 50 00 00 
09c19     00 00 00 00 
09c1d     00 00 00 00 
09c21     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c25     00 00 00 01 
09c29     7D C0 00 00 
09c2d     00 00 00 00 
09c31     BE 20 00 00 | 	byte	$00, $00, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
09c35     BE 50 00 00 
09c39     00 00 00 00 
09c3d     00 00 00 00 
09c41     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c45     00 00 00 01 
09c49     AC C0 00 00 
09c4d     00 00 00 10 
09c51     BE 50 00 00 | 	byte	$00, $00, $00, $01, $ac, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09c55     BE 50 00 00 
09c59     00 00 00 00 
09c5d     00 00 00 00 
09c61     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c65     00 00 00 01 
09c69     7D C0 00 00 
09c6d     00 00 00 00 
09c71     00 00 00 00 | 	byte	$00, $00, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c75     BE 50 00 00 
09c79     00 00 00 00 
09c7d     00 00 00 00 
09c81     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c85     00 00 00 01 
09c89     53 C0 00 00 
09c8d     00 00 00 00 
09c91     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c95     BE 50 00 00 
09c99     00 00 00 00 
09c9d     00 00 00 00 
09ca1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ca5     00 00 00 00 
09ca9     00 00 00 00 
09cad     00 00 00 00 
09cb1     00 00 00 00 | 	byte	$00[16]
09cb5     BE 50 00 00 
09cb9     00 00 00 00 
09cbd     00 00 00 00 
09cc1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cc5     00 00 00 01 
09cc9     AC C0 00 03 
09ccd     58 C0 00 00 
09cd1     BE 20 00 00 | 	byte	$00, $00, $00, $01, $ac, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
09cd5     BE 50 00 01 
09cd9     7D C0 00 00 
09cdd     00 00 00 00 
09ce1     00 00 00 00 | 	byte	$be, $50, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ce5     00 00 00 01 
09ce9     53 C0 00 00 
09ced     00 00 00 00 
09cf1     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cf5     BE 50 00 01 
09cf9     40 C0 00 00 
09cfd     00 00 00 00 
09d01     00 00 00 00 | 	byte	$be, $50, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d05     00 00 00 01 
09d09     1D C0 00 00 
09d0d     00 00 00 00 
09d11     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d15     BE 50 00 00 
09d19     FE C0 00 00 
09d1d     00 00 00 00 
09d21     00 00 00 00 | 	byte	$be, $50, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d25     00 00 00 00 
09d29     F0 C0 00 00 
09d2d     00 00 00 00 
09d31     BE 20 00 00 | 	byte	$00, $00, $00, $00, $f0, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
09d35     BE 50 00 00 
09d39     D6 C0 00 00 
09d3d     00 00 00 00 
09d41     00 00 00 00 | 	byte	$be, $50, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d45     00 00 00 01 
09d49     AC C0 00 00 
09d4d     00 00 00 10 
09d51     BE 50 00 00 | 	byte	$00, $00, $00, $01, $ac, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09d55     BE 50 00 01 
09d59     7D C0 00 00 
09d5d     00 00 00 00 
09d61     00 00 00 00 | 	byte	$be, $50, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d65     00 00 00 01 
09d69     53 C0 00 00 
09d6d     00 00 00 00 
09d71     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d75     BE 50 00 01 
09d79     40 C0 00 00 
09d7d     00 00 00 10 
09d81     BE 50 00 00 | 	byte	$be, $50, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09d85     00 00 00 01 
09d89     1D C0 00 00 
09d8d     00 00 00 10 
09d91     BE 50 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09d95     BE 50 00 00 
09d99     FE C0 00 00 
09d9d     00 00 00 00 
09da1     00 00 00 00 | 	byte	$be, $50, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09da5     00 00 00 00 
09da9     F0 C0 00 00 
09dad     00 00 00 10 
09db1     BE 50 00 00 | 	byte	$00, $00, $00, $00, $f0, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
09db5     BE 50 00 00 
09db9     D6 C0 00 00 
09dbd     00 00 00 00 
09dc1     00 00 00 00 | 	byte	$be, $50, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dc5     00 00 00 00 
09dc9     BE C0 00 02 
09dcd     FA C0 00 00 
09dd1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
09dd5     BE 50 00 00 
09dd9     00 0C 00 00 
09ddd     00 00 00 00 
09de1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09de5     00 00 00 00 
09de9     BE C0 00 00 
09ded     00 00 00 00 
09df1     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09df5     BE 50 00 00 
09df9     00 0C 00 00 
09dfd     00 00 00 00 
09e01     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e05     00 00 00 00 
09e09     00 00 00 00 
09e0d     00 00 00 00 
09e11     00 00 00 00 | 	byte	$00[16]
09e15     BE 50 00 00 
09e19     00 00 00 00 
09e1d     00 00 00 00 
09e21     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e25     00 00 00 00 
09e29     00 00 00 00 
09e2d     00 00 00 00 | 	byte	$00[12]
09e31     BE 20 00 00 
09e35     BE 50 00 00 
09e39     00 00 00 00 
09e3d     00 00 00 00 | 	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e41     00 00 00 00 
09e45     00 00 00 00 
09e49     00 00 00 00 
09e4d     00 00 00    | 	byte	$00[15]
09e50     10 D6 50 00 
09e54     00 BE 50 00 
09e58     00 00 00 00 
09e5c     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e60     00 00 00 00 
09e64     00 00 00 00 
09e68     00 00 00 00 
09e6c     00 00 00 00 
09e70     00 00 00 00 
09e74     00          | 	byte	$00[21]
09e75     BE 50 00 00 
09e79     00 00 00 00 
09e7d     00 00 00 00 
09e81     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e85     00 00 00 00 
09e89     00 00 00 00 
09e8d     00 00 00 00 
09e91     00 00 00 00 | 	byte	$00[16]
09e95     BE 50 00 00 
09e99     00 00 00 00 
09e9d     00 00 00 00 
09ea1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ea5     00 00 00 00 
09ea9     00 00 00 00 
09ead     00 00 00 00 
09eb1     00 00 00 00 | 	byte	$00[16]
09eb5     BE 50 00 00 
09eb9     00 00 00 00 
09ebd     00 00 00 00 
09ec1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ec5     00 00 00 00 
09ec9     BE C0 00 02 
09ecd     FA C0 00 00 
09ed1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
09ed5     BE 50 00 00 
09ed9     00 0C 00 00 
09edd     00 00 00 00 
09ee1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ee5     00 00 00 00 
09ee9     BE C0 00 00 
09eed     00 00 00 00 
09ef1     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ef5     BE 50 00 00 
09ef9     00 0C 00 00 
09efd     00 00 00 00 
09f01     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f05     00 00 00 00 
09f09     00 00 00 00 
09f0d     00 00 00 00 
09f11     00 00 00 00 | 	byte	$00[16]
09f15     BE 50 00 00 
09f19     00 00 00 00 
09f1d     00 00 00 00 
09f21     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f25     00 00 00 00 
09f29     00 00 00 00 
09f2d     00 00 00 00 | 	byte	$00[12]
09f31     BE 20 00 00 
09f35     BE 50 00 00 
09f39     00 00 00 00 
09f3d     00 00 00 00 | 	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f41     00 00 00 00 
09f45     00 00 00 00 | 	byte	$00[8]
09f49     BE C0 00 00 
09f4d     00 00 00 10 
09f51     BE 50 00 00 
09f55     BE 50 00 00 | 	byte	$be, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
09f59     00 0C 00 00 
09f5d     00 00 00 00 
09f61     00 00 00 00 
09f65     00 00 00 00 | 	byte	$00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f69     00 00 00 00 
09f6d     00 00 00 00 
09f71     00 00 00 00 | 	byte	$00[12]
09f75     BE 50 00 00 
09f79     00 00 00 00 
09f7d     00 00 00 00 
09f81     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f85     00 00 00 00 
09f89     A0 C0 00 00 
09f8d     00 00 00 00 
09f91     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f95     BE 50 00 00 
09f99     00 0C 00 00 
09f9d     00 00 00 00 
09fa1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fa5     00 00 00 00 
09fa9     00 00 00 00 
09fad     00 00 00 00 
09fb1     00 00 00 00 | 	byte	$00[16]
09fb5     BE 50 00 00 
09fb9     00 00 00 00 
09fbd     00 00 00 00 
09fc1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fc5     00 00 00 00 
09fc9     AA C0 00 03 
09fcd     58 C0 00 00 
09fd1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $aa, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
09fd5     BE 50 00 00 
09fd9     00 0C 00 00 
09fdd     00 00 00 00 
09fe1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fe5     00 00 00 00 
09fe9     AA C0 00 00 
09fed     00 00 00 00 
09ff1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ff5     BE 50 00 00 
09ff9     00 0C 00 00 
09ffd     00 00 00 00 
0a001     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a005     00 00 00 00 
0a009     00 00 00 00 
0a00d     00 00 00 00 
0a011     00 00 00 00 | 	byte	$00[16]
0a015     BE 50 00 00 
0a019     00 00 00 00 
0a01d     00 00 00 00 
0a021     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a025     00 00 00 00 
0a029     00 00 00 00 
0a02d     00 00 00 00 | 	byte	$00[12]
0a031     BE 20 00 00 
0a035     BE 50 00 00 
0a039     00 00 00 00 
0a03d     00 00 00 00 | 	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a041     00 00 00 00 
0a045     00 00 00 00 
0a049     00 00 00 00 
0a04d     00 00 00    | 	byte	$00[15]
0a050     10 BE 50 00 
0a054     00 BE 50 00 
0a058     00 00 00 00 
0a05c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a060     00 00 00 00 
0a064     00 00 00 00 
0a068     00 00 00 00 
0a06c     00 00 00 00 
0a070     00 00 00 00 
0a074     00          | 	byte	$00[21]
0a075     BE 50 00 00 
0a079     00 00 00 00 
0a07d     00 00 00 00 
0a081     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a085     00 00 00 00 
0a089     00 00 00 00 
0a08d     00 00 00 00 
0a091     00 00 00 00 | 	byte	$00[16]
0a095     BE 50 00 00 
0a099     00 00 00 00 
0a09d     00 00 00 00 
0a0a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0a5     00 00 00 00 
0a0a9     00 00 00 00 
0a0ad     00 00 00 00 
0a0b1     00 00 00 00 | 	byte	$00[16]
0a0b5     BE 50 00 00 
0a0b9     00 00 00 00 
0a0bd     00 00 00 00 
0a0c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0c5     00 00 00 01 
0a0c9     7D C0 00 03 
0a0cd     58 C0 00 00 
0a0d1     BE 20 00 00 | 	byte	$00, $00, $00, $01, $7d, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
0a0d5     BE 50 00 00 
0a0d9     00 0C 00 00 
0a0dd     00 00 00 00 
0a0e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0e5     00 00 00 01 
0a0e9     53 C0 00 00 
0a0ed     00 00 00 00 
0a0f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0f5     BE 50 00 00 
0a0f9     00 0C 00 00 
0a0fd     00 00 00 00 
0a101     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a105     00 00 00 01 
0a109     40 C0 00 00 
0a10d     00 00 00 00 
0a111     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a115     BE 50 00 00 
0a119     00 0C 00 00 
0a11d     00 00 00 00 
0a121     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a125     00 00 00 01 
0a129     1D C0 00 00 
0a12d     00 00 00 00 
0a131     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0a135     BE 50 00 00 
0a139     00 0C 00 00 
0a13d     00 00 00 00 
0a141     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a145     00 00 00 00 
0a149     FE C0 00 00 
0a14d     00 00 00 10 
0a151     BE 50 00 00 | 	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a155     BE 50 00 00 
0a159     00 0C 00 00 
0a15d     00 00 00 00 
0a161     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a165     00 00 00 00 
0a169     E2 C0 00 00 
0a16d     00 00 00 00 
0a171     00 00 00 00 | 	byte	$00, $00, $00, $00, $e2, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a175     BE 50 00 00 
0a179     00 0C 00 00 
0a17d     00 00 00 10 
0a181     BE 50 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a185     00 00 00 00 
0a189     D6 C0 00 00 
0a18d     00 00 00 10 
0a191     BE 50 00 00 | 	byte	$00, $00, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a195     BE 50 00 00 
0a199     00 0C 00 00 
0a19d     00 00 00 00 
0a1a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1a5     00 00 00 00 
0a1a9     BE C0 00 00 
0a1ad     00 00 00 10 
0a1b1     BE 50 00 00 | 	byte	$00, $00, $00, $00, $be, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a1b5     BE 50 00 00 
0a1b9     00 0C 00 00 
0a1bd     00 00 00 00 
0a1c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1c5     00 00 00 01 
0a1c9     7D D0 00 02 
0a1cd     FA C0 00 00 
0a1d1     BE 20 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
0a1d5     BE 50 00 00 
0a1d9     00 00 00 00 
0a1dd     00 00 00 00 
0a1e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1e5     00 00 00 01 
0a1e9     40 D0 00 00 
0a1ed     00 00 00 00 
0a1f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1f5     BE 50 00 00 
0a1f9     00 00 00 00 
0a1fd     00 00 00 00 
0a201     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a205     00 00 00 00 
0a209     FE D0 00 00 
0a20d     00 00 00 00 
0a211     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a215     BE 50 00 00 
0a219     00 00 00 00 
0a21d     00 00 00 00 
0a221     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a225     00 00 00 01 
0a229     7D D0 00 00 
0a22d     00 00 00 00 
0a231     BE 20 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0a235     BE 50 00 00 
0a239     00 00 00 00 
0a23d     00 00 00 00 
0a241     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a245     00 00 00 01 
0a249     40 D0 00 00 
0a24d     00 00 00 10 
0a251     D6 50 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $10, $d6, $50, $00, $00
0a255     BE 50 00 00 
0a259     00 00 00 00 
0a25d     00 00 00 00 
0a261     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a265     00 00 00 00 
0a269     FE D0 00 00 
0a26d     00 00 00 00 
0a271     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a275     BE 50 00 00 
0a279     00 00 00 00 
0a27d     00 00 00 00 
0a281     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a285     00 00 00 01 
0a289     7D D0 00 00 
0a28d     00 00 00 00 
0a291     00 00 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a295     BE 50 00 00 
0a299     00 00 00 00 
0a29d     00 00 00 00 
0a2a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2a5     00 00 00 01 
0a2a9     40 D0 00 00 
0a2ad     00 00 00 00 
0a2b1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2b5     BE 50 00 00 
0a2b9     00 00 00 00 
0a2bd     00 00 00 00 
0a2c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2c5     00 00 00 00 
0a2c9     FE D0 00 02 
0a2cd     FA C0 00 00 
0a2d1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
0a2d5     BE 50 00 00 
0a2d9     00 00 00 00 
0a2dd     00 00 00 00 
0a2e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2e5     00 00 00 01 
0a2e9     7D D0 00 00 
0a2ed     00 00 00 00 
0a2f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2f5     BE 50 00 00 
0a2f9     00 00 00 00 
0a2fd     00 00 00 00 
0a301     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a305     00 00 00 01 
0a309     40 D0 00 00 
0a30d     00 00 00 00 
0a311     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a315     BE 50 00 00 
0a319     00 00 00 00 
0a31d     00 00 00 00 
0a321     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a325     00 00 00 00 
0a329     FE D0 00 00 
0a32d     00 00 00 00 
0a331     BE 20 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0a335     BE 50 00 00 
0a339     00 00 00 00 
0a33d     00 00 00 00 
0a341     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a345     00 00 00 01 
0a349     7D D0 00 00 
0a34d     00 00 00 10 
0a351     BE 50 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a355     BE 50 00 00 
0a359     00 00 00 00 
0a35d     00 00 00 00 
0a361     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a365     00 00 00 01 
0a369     40 D0 00 00 
0a36d     00 00 00 00 
0a371     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a375     BE 50 00 00 
0a379     00 00 00 00 
0a37d     00 00 00 00 
0a381     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a385     00 00 00 00 
0a389     FE D0 00 00 
0a38d     00 00 00 00 
0a391     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a395     BE 50 00 00 
0a399     00 00 00 00 
0a39d     00 00 00 00 
0a3a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3a5     00 00 00 01 
0a3a9     40 D0 00 00 
0a3ad     00 00 00 00 
0a3b1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3b5     BE 50 00 00 
0a3b9     00 00 00 00 
0a3bd     00 00 00 00 
0a3c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3c5     00 00 00 01 
0a3c9     AC D0 00 03 
0a3cd     58 C0 00 00 
0a3d1     BE 20 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
0a3d5     BE 50 00 00 
0a3d9     00 00 00 00 
0a3dd     00 00 00 00 
0a3e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3e5     00 00 00 01 
0a3e9     53 D0 00 00 
0a3ed     00 00 00 00 
0a3f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3f5     BE 50 00 00 
0a3f9     00 00 00 00 
0a3fd     00 00 00 00 
0a401     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a405     00 00 00 01 
0a409     1D D0 00 00 
0a40d     00 00 00 00 
0a411     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a415     BE 50 00 00 
0a419     00 00 00 00 
0a41d     00 00 00 00 
0a421     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a425     00 00 00 01 
0a429     AC D0 00 00 
0a42d     00 00 00 00 
0a431     BE 20 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0a435     BE 50 00 00 
0a439     00 00 00 00 
0a43d     00 00 00 00 
0a441     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a445     00 00 00 01 
0a449     53 D0 00 00 
0a44d     00 00 00 10 
0a451     BE 50 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a455     BE 50 00 00 
0a459     00 00 00 00 
0a45d     00 00 00 00 
0a461     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a465     00 00 00 01 
0a469     1D D0 00 00 
0a46d     00 00 00 00 
0a471     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a475     BE 50 00 00 
0a479     00 00 00 00 
0a47d     00 00 00 00 
0a481     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a485     00 00 00 01 
0a489     AC D0 00 00 
0a48d     00 00 00 00 
0a491     00 00 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a495     BE 50 00 00 
0a499     00 00 00 00 
0a49d     00 00 00 00 
0a4a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4a5     00 00 00 01 
0a4a9     53 D0 00 00 
0a4ad     00 00 00 00 
0a4b1     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4b5     BE 50 00 00 
0a4b9     00 00 00 00 
0a4bd     00 00 00 00 
0a4c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4c5     00 00 00 01 
0a4c9     1D D0 00 03 
0a4cd     58 C0 00 00 
0a4d1     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
0a4d5     BE 50 00 00 
0a4d9     00 00 00 00 
0a4dd     00 00 00 00 
0a4e1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4e5     00 00 00 01 
0a4e9     AC D0 00 00 
0a4ed     00 00 00 00 
0a4f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4f5     BE 50 00 00 
0a4f9     00 00 00 00 
0a4fd     00 00 00 00 
0a501     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a505     00 00 00 01 
0a509     53 D0 00 00 
0a50d     00 00 00 00 
0a511     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a515     BE 50 00 00 
0a519     00 00 00 00 
0a51d     00 00 00 00 
0a521     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a525     00 00 00 01 
0a529     1D D0 00 00 
0a52d     00 00 00 00 
0a531     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0a535     BE 50 00 00 
0a539     00 00 00 00 
0a53d     00 00 00 00 
0a541     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a545     00 00 00 01 
0a549     53 D0 00 00 
0a54d     00 00 00 10 
0a551     BE 50 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a555     BE 50 00 00 
0a559     00 00 00 00 
0a55d     00 00 00 00 
0a561     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a565     00 00 00 01 
0a569     1D D0 00 00 
0a56d     00 00 00 00 
0a571     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a575     BE 50 00 00 
0a579     00 00 00 00 
0a57d     00 00 00 10 
0a581     BE 50 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a585     00 00 00 01 
0a589     53 D0 00 00 
0a58d     00 00 00 10 
0a591     BE 50 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a595     BE 50 00 00 
0a599     00 00 00 00 
0a59d     00 00 00 00 
0a5a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5a5     00 00 00 01 
0a5a9     AC D0 00 00 
0a5ad     00 00 00 10 
0a5b1     BE 50 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a5b5     BE 50 00 00 
0a5b9     00 00 00 00 
0a5bd     00 00 00 00 
0a5c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5c5     00 00 00 01 
0a5c9     7D D0 00 01 
0a5cd     40 D0 00 00 
0a5d1     BE 20 00 02 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $be, $20, $00, $02
0a5d5     FA C0 00 00 
0a5d9     00 00 00 00 
0a5dd     00 00 00 00 
0a5e1     00 00 00 00 | 	byte	$fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5e5     00 00 00 01 
0a5e9     40 D0 00 00 
0a5ed     FE D0 00 00 
0a5f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
0a5f5     BE 50 00 00 
0a5f9     00 00 00 00 
0a5fd     00 00 00 00 
0a601     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a605     00 00 00 00 
0a609     FE D0 00 00 
0a60d     BE D0 00 02 
0a611     FA C0 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $02, $fa, $c0, $00, $00
0a615     BE 50 00 00 
0a619     00 00 00 00 
0a61d     00 00 00 00 
0a621     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a625     00 00 00 01 
0a629     7D D0 00 01 
0a62d     40 D0 00 00 
0a631     BE 20 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $be, $20, $00, $00
0a635     BE 50 00 00 
0a639     00 00 00 00 
0a63d     00 00 00 00 
0a641     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a645     00 00 00 01 
0a649     40 D0 00 00 
0a64d     FE D0 00 10 
0a651     D6 50 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $10, $d6, $50, $00, $00
0a655     BE 50 00 00 
0a659     00 00 00 00 
0a65d     00 00 00 00 
0a661     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a665     00 00 00 00 
0a669     FE D0 00 00 
0a66d     BE D0 00 00 
0a671     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00
0a675     BE 50 00 00 
0a679     00 00 00 00 
0a67d     00 00 00 00 
0a681     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a685     00 00 00 01 
0a689     7D D0 00 01 
0a68d     40 D0 00 00 
0a691     00 00 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00
0a695     BE 50 00 00 
0a699     00 00 00 00 
0a69d     00 00 00 00 
0a6a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6a5     00 00 00 01 
0a6a9     40 D0 00 00 
0a6ad     FE D0 00 00 
0a6b1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
0a6b5     BE 50 00 00 
0a6b9     00 00 00 00 
0a6bd     00 00 00 00 
0a6c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6c5     00 00 00 00 
0a6c9     FE D0 00 00 
0a6cd     BE D0 00 00 
0a6d1     BE 20 00 02 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $be, $20, $00, $02
0a6d5     FA C0 00 00 
0a6d9     00 00 00 00 
0a6dd     00 00 00 00 
0a6e1     00 00 00 00 | 	byte	$fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6e5     00 00 00 01 
0a6e9     7D D0 00 01 
0a6ed     40 D0 00 00 
0a6f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00
0a6f5     BE 50 00 00 
0a6f9     00 00 00 00 
0a6fd     00 00 00 00 
0a701     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a705     00 00 00 01 
0a709     40 D0 00 00 
0a70d     FE D0 00 02 
0a711     FA C0 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $02, $fa, $c0, $00, $00
0a715     BE 50 00 00 
0a719     00 00 00 00 
0a71d     00 00 00 00 
0a721     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a725     00 00 00 00 
0a729     FE D0 00 00 
0a72d     BE D0 00 00 
0a731     BE 20 00 00 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $be, $20, $00, $00
0a735     BE 50 00 00 
0a739     00 00 00 00 
0a73d     00 00 00 00 
0a741     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a745     00 00 00 01 
0a749     7D D0 00 01 
0a74d     40 D0 00 10 
0a751     BE 50 00 00 | 	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $10, $be, $50, $00, $00
0a755     BE 50 00 00 
0a759     00 00 00 00 
0a75d     00 00 00 00 
0a761     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a765     00 00 00 01 
0a769     40 D0 00 00 
0a76d     FE D0 00 00 
0a771     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
0a775     BE 50 00 00 
0a779     00 00 00 00 
0a77d     00 00 00 00 
0a781     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a785     00 00 00 00 
0a789     FE D0 00 00 
0a78d     BE D0 00 00 
0a791     00 00 00 02 | 	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $02
0a795     FA C0 00 00 
0a799     00 00 00 00 
0a79d     00 00 00 00 
0a7a1     00 00 00 00 | 	byte	$fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7a5     00 00 00 01 
0a7a9     40 D0 00 00 
0a7ad     FE D0 00 00 
0a7b1     00 00 00 00 | 	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
0a7b5     BE 50 00 00 
0a7b9     00 00 00 00 
0a7bd     00 00 00 00 
0a7c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7c5     00 00 00 01 
0a7c9     AC D0 00 01 
0a7cd     53 D0 00 00 
0a7d1     BE 20 00 03 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $be, $20, $00, $03
0a7d5     58 C0 00 00 
0a7d9     00 00 00 00 
0a7dd     00 00 00 00 
0a7e1     00 00 00 00 | 	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7e5     00 00 00 01 
0a7e9     53 D0 00 01 
0a7ed     1D D0 00 00 
0a7f1     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
0a7f5     BE 50 00 00 
0a7f9     00 00 00 00 
0a7fd     00 00 00 00 
0a801     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a805     00 00 00 01 
0a809     1D D0 00 00 
0a80d     D6 D0 00 03 
0a811     58 C0 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $03, $58, $c0, $00, $00
0a815     BE 50 00 00 
0a819     00 00 00 00 
0a81d     00 00 00 00 
0a821     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a825     00 00 00 01 
0a829     AC D0 00 01 
0a82d     53 D0 00 00 
0a831     BE 20 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $be, $20, $00, $00
0a835     BE 50 00 00 
0a839     00 00 00 00 
0a83d     00 00 00 00 
0a841     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a845     00 00 00 01 
0a849     53 D0 00 01 
0a84d     1D D0 00 10 
0a851     BE 50 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $10, $be, $50, $00, $00
0a855     BE 50 00 00 
0a859     00 00 00 00 
0a85d     00 00 00 00 
0a861     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a865     00 00 00 01 
0a869     1D D0 00 00 
0a86d     D6 D0 00 00 
0a871     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $00, $00, $00, $00, $00
0a875     BE 50 00 00 
0a879     00 00 00 00 
0a87d     00 00 00 00 
0a881     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a885     00 00 00 01 
0a889     AC D0 00 01 
0a88d     53 D0 00 00 
0a891     00 00 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00
0a895     BE 50 00 00 
0a899     00 00 00 00 
0a89d     00 00 00 00 
0a8a1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8a5     00 00 00 01 
0a8a9     53 D0 00 01 
0a8ad     1D D0 00 00 
0a8b1     00 00 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
0a8b5     BE 50 00 00 
0a8b9     00 00 00 00 
0a8bd     00 00 00 00 
0a8c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8c5     00 00 00 01 
0a8c9     1D D0 00 00 
0a8cd     D6 D0 00 00 
0a8d1     BE 20 00 03 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $00, $be, $20, $00, $03
0a8d5     58 C0 00 00 
0a8d9     00 00 00 00 
0a8dd     00 00 00 00 
0a8e1     00 00 00 00 | 	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8e5     00 00 00 01 
0a8e9     AC D0 00 01 
0a8ed     53 D0 00 00 
0a8f1     00 00 00 03 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $03
0a8f5     58 C0 00 00 
0a8f9     00 00 00 00 
0a8fd     00 00 00 00 
0a901     00 00 00 00 | 	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a905     00 00 00 01 
0a909     53 D0 00 01 
0a90d     1D D0 00 03 
0a911     58 C0 00 00 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $03, $58, $c0, $00, $00
0a915     BE 50 00 00 
0a919     00 00 00 00 
0a91d     00 00 00 00 
0a921     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a925     00 00 00 01 
0a929     1D D0 00 00 
0a92d     D6 D0 00 00 
0a931     BE 20 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $00, $be, $20, $00, $00
0a935     BE 50 00 00 
0a939     00 00 00 00 
0a93d     00 00 00 00 
0a941     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a945     00 00 00 01 
0a949     53 D0 00 01 
0a94d     1D D0 00 10 
0a951     BE 50 00 03 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $10, $be, $50, $00, $03
0a955     58 C0 00 00 
0a959     00 00 00 00 
0a95d     00 00 00 00 
0a961     00 00 00 00 | 	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a965     00 00 00 01 
0a969     1D D0 00 01 
0a96d     53 D0 00 00 
0a971     00 00 00 00 | 	byte	$00, $00, $00, $01, $1d, $d0, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00
0a975     BE 50 00 00 
0a979     00 00 00 00 
0a97d     00 00 00 10 
0a981     BE 50 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
0a985     00 00 00 01 
0a989     53 D0 00 01 
0a98d     1D D0 00 10 
0a991     BE 50 00 03 | 	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $10, $be, $50, $00, $03
0a995     58 C0 00 00 
0a999     00 00 00 00 
0a99d     00 00 00 00 
0a9a1     00 00 00 00 | 	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9a5     00 00 00 01 
0a9a9     AC D0 00 01 
0a9ad     53 D0 00 10 
0a9b1     BE 50 00 00 | 	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $10, $be, $50, $00, $00
0a9b5     BE 50 00 00 
0a9b9     00 00 00 00 
0a9bd     00 00 00 00 
0a9c1     00 00 00 00 | 	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9c5     00 00 00 00 
0a9c9     BE 60 00 00 
0a9cd     BE 6C 00 00 
0a9d1     BE 20 00 00 | 	byte	$00, $00, $00, $00, $be, $60, $00, $00, $be, $6c, $00, $00, $be, $20, $00, $00
0a9d5     BE 2C 00 00 
0a9d9     00 00 00 00 
0a9dd     D6 60 00 00 
0a9e1     00 00 00 00 | 	byte	$be, $2c, $00, $00, $00, $00, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00
0a9e5     00 00 00 00 
      ...             
0aa0d     00 00 00 00 
0aa11     00 00 00    | 	byte	$00[47]
0aa14     10 BE 50 00 
0aa18     00 00 00 00 
0aa1c     00 00 00 00 
0aa20     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa24     00 00 00 00 
      ...             
0aa4c     00 00 00 00 
0aa50     00          | 	byte	$00[45]
0aa51     BE 20 00 00 
0aa55     00 00 00 00 
0aa59     00 00 00 00 
0aa5d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa61     BE 20 00 00 
0aa65     00 00 00 00 
0aa69     00 00 00 00 
0aa6d     BE 60 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00
0aa71     00 00 00 10 
0aa75     BE 50 00 00 
0aa79     00 00 00 00 
0aa7d     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa81     BE 20 00 00 
0aa85     00 00 00 00 
0aa89     00 00 00 00 
0aa8d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa91     BE 20 00 00 
0aa95     00 00 00 00 
0aa99     00 00 00 00 
0aa9d     BE 60 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00
0aaa1     00 00 00 10 
0aaa5     BE 50 00 00 
0aaa9     00 00 00 00 
0aaad     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aab1     BE 20 00 00 
0aab5     00 00 00 00 
0aab9     00 00 00 00 
0aabd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aac1     BE 20 00 00 
0aac5     00 00 00 00 
0aac9     00 00 00 00 
0aacd     BE 60 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00
0aad1     00 00 00 10 
0aad5     BE 50 00 00 
0aad9     00 00 00 00 
0aadd     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aae1     00 00 00 00 
0aae5     00 00 00 00 
0aae9     00 00 00 00 
0aaed     00 00 00 00 
0aaf1     00 00 00    | 	byte	$00[19]
0aaf4     10 BE 50 00 
0aaf8     00 00 00 00 
0aafc     00 00 00 00 
0ab00     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab04     00 00 00 00 
0ab08     00 00 00 00 
0ab0c     00          | 	byte	$00[9]
0ab0d     BE 60 00 00 
0ab11     BE 20 00 00 
0ab15     00 00 00 00 
0ab19     00 00 00 00 | 	byte	$be, $60, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab1d     00 00 00 00 
      ...             
0ab4d     00 00 00 00 
0ab51     00 00 00    | 	byte	$00[55]
0ab54     10 BE 50 00 
0ab58     00 00 00 00 
0ab5c     00 00 00 00 
0ab60     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab64     00 00 00 00 
      ...             
0ab8c     00 00 00 00 
0ab90     00          | 	byte	$00[45]
0ab91     BE 20 00 00 
0ab95     00 00 00 00 
0ab99     00 00 00 00 
0ab9d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aba1     BE 20 00 00 
0aba5     00 00 00 00 
0aba9     00 00 00 00 
0abad     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abb1     00 00 00 10 
0abb5     BE 50 00 00 
0abb9     00 00 00 00 
0abbd     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abc1     00 00 00 00 
0abc5     00 00 00 00 
0abc9     00 00 00 00 | 	byte	$00[12]
0abcd     BE 60 00 00 
0abd1     BE 20 00 00 
0abd5     00 00 00 00 
0abd9     00 00 00 00 | 	byte	$be, $60, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abdd     00 00 00 00 
      ...             
0ac0d     00 00 00 00 
0ac11     00 00 00    | 	byte	$00[55]
0ac14     10 D6 50 00 
0ac18     00 00 00 00 
0ac1c     00 00 00 00 
0ac20     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac24     00 00 00 00 
      ...             
0ac3c     00 00 00 00 
0ac40     00 00 00 00 | 	byte	$00[32]
0ac44     10 D6 50 00 
0ac48     00 00 00 00 
0ac4c     00 00 00 00 
0ac50     00 D6 20 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $20, $00
0ac54     00 00 00 00 
      ...             
0ac6c     00 00 00 00 
0ac70     00          | 	byte	$00[29]
0ac71     D6 20 00 00 
0ac75     00 00 00 00 
0ac79     00 00 00 00 
0ac7d     00 00 00 00 | 	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac81     D6 20 00 00 
0ac85     00 00 00 00 
0ac89     00 00 00 00 
0ac8d     00 00 00 00 | 	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac91     00 00 00 10 
0ac95     D6 50 00 00 
0ac99     00 00 00 00 
0ac9d     00 00 00 00 | 	byte	$00, $00, $00, $10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aca1     00 00 00 00 
0aca5     00 00 00 00 
0aca9     00 00 00 00 
0acad     00 00 00 00 
0acb1     00 00 00    | 	byte	$00[19]
0acb4     10 D6 50 00 
0acb8     00 00 00 00 
0acbc     00 00 00 00 
0acc0     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acc4     10 D6 50 00 
0acc8     00 00 00 00 
0accc     00 00 00 00 
0acd0     00 D6 20 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $20, $00
0acd4     00 00 00 00 
      ...             
0acec     00 00 00 00 
0acf0     00          | 	byte	$00[29]
0acf1     D6 20 00 00 
0acf5     00 00 00 00 
0acf9     00 00 00 00 
0acfd     00 00 00 00 | 	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad01     00 00 00 00 
0ad05     00 00 00 00 
0ad09     00 00 00 00 
0ad0d     00 00 00 00 | 	byte	$00[16]
0ad11     D6 20 00 00 
0ad15     00 00 00 00 
0ad19     00 00 00 00 
0ad1d     00 00 00 00 | 	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad21     00 00 00 00 
0ad25     00 00 00 00 
0ad29     00 00 00 00 
0ad2d     00 00 00 00 | 	byte	$00[16]
0ad31     D6 20 00 00 
0ad35     00 00 00 00 
0ad39     00 00 00 00 
0ad3d     00 00 00 00 | 	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad41     00 00 00 00 
0ad45     00 00 00 00 
0ad49     00 00 00 00 
0ad4d     00 00 00 00 
0ad51     00 00 00    | 	byte	$00[19]
0ad54     10 D6 50 00 
0ad58     00 00 00 00 
0ad5c     00 00 00 00 
0ad60     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad64     10 D6 50 00 
0ad68     00 00 00 00 
0ad6c     00 00 00 00 
0ad70     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad74     00 00 00 00 
0ad78     00 00 00 00 
0ad7c     00 00 00 00 
0ad80     00 00 00 00 | 	byte	$00[16]
0ad84     10 D6 50 00 
0ad88     00 00 00 00 
0ad8c     00 00 00 00 
0ad90     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad94     00 00 00 00 
0ad98     00 00 00 00 
0ad9c     00 00 00 00 
0ada0     00 00 00 00 | 	byte	$00[16]
0ada4     10 D6 50 00 
0ada8     00 00 00 00 
0adac     00 00 00 00 
0adb0     00 00 00 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0adb4     00 00 00 00 
0adb8     00 00 00 00 
0adbc     00 00 00 00 
0adc0     00 00 00 00 | 	byte	$00[16]
0adc4     10 D6 50 00 
0adc8     00 00 00 00 
0adcc     00 BE 60 00 
0add0     00 BE 20 00 | 	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00, $be, $20, $00
0add4     00 00 00 00 
0add8     00 00 00 00 
0addc     00 00 00 00 
0ade0     00 00 00 00 
0ade4     00          | 	byte	$00[17]
0ade5     BE 20 00 00 
0ade9     00 00 00 00 
0aded     00 00 00 00 
0adf1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0adf5     00 00 00 00 
0adf9     00 00 00 00 
0adfd     00 00 00 00 
0ae01     00 00 00 00 | 	byte	$00[16]
0ae05     BE 20 00 00 
0ae09     00 00 00 00 
0ae0d     00 00 00 00 
0ae11     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0ae15     00 00 00 00 
0ae19     00 00 00 00 
0ae1d     00 00 00 00 
0ae21     00 00 00 00 | 	byte	$00[16]
0ae25     BE 20 00 00 
0ae29     00 00 00 00 
0ae2d     00 00 00 00 
0ae31     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0ae35     00 00 00 00 
0ae39     00 00 00 00 
0ae3d     00 00 00 00 
0ae41     00 00 00 00 | 	byte	$00[16]
0ae45     BE 20 00 00 
0ae49     00 00 00 00 
0ae4d     00 00 00 00 
0ae51     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0ae55     00 00 00 00 
0ae59     00 00 00 00 
0ae5d     00 00 00 00 
0ae61     00 00 00 00 | 	byte	$00[16]
0ae65     BE 20 00 00 
0ae69     00 00 00 00 
0ae6d     00 00 00 00 
0ae71     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0ae75     00 00 00 00 
0ae79     00 00 00 00 
0ae7d     00 00 00 00 
0ae81     00 00 00 00 | 	byte	$00[16]
0ae85     BE 20 00 00 
0ae89     00 00 00 00 
0ae8d     00 00 00 00 
0ae91     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0ae95     00 00 00 00 
0ae99     00 00 00 00 
0ae9d     00 00 00 00 
0aea1     00 00 00 00 | 	byte	$00[16]
0aea5     BE 20 00 00 
0aea9     00 00 00 00 
0aead     00 00 00 00 
0aeb1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0aeb5     00 00 00 00 
0aeb9     00 00 00 00 
0aebd     00 00 00 00 
0aec1     00 00 00 00 | 	byte	$00[16]
0aec5     BE 20 00 00 
0aec9     00 00 00 10 
0aecd     BE 50 00 00 
0aed1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
0aed5     00 00 00 00 
0aed9     00 00 00 00 
0aedd     00 00 00 00 
0aee1     00 00 00 00 | 	byte	$00[16]
0aee5     BE 20 00 00 
0aee9     00 00 00 10 
0aeed     BE 50 00 00 
0aef1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
0aef5     00 00 00 00 
0aef9     00 00 00 00 
0aefd     00 00 00 00 
0af01     00 00 00 00 | 	byte	$00[16]
0af05     BE 20 00 00 
0af09     00 00 00 00 
0af0d     00 00 00 00 
0af11     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0af15     00 00 00 00 
0af19     00 00 00 00 
0af1d     00 00 00 00 
0af21     00 00 00 00 | 	byte	$00[16]
0af25     BE 20 00 00 
0af29     00 00 00 00 
0af2d     00 00 00 00 
0af31     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0af35     00 00 00 00 
0af39     00 00 00 00 
0af3d     00 00 00 00 
0af41     00 00 00 00 | 	byte	$00[16]
0af45     BE 20 00 00 
0af49     00 00 00 00 
0af4d     00 00 00 00 
0af51     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0af55     00 00 00 00 
0af59     00 00 00 00 
0af5d     00 00 00 00 
0af61     00 00 00 00 | 	byte	$00[16]
0af65     BE 20 00 00 
0af69     00 00 00 00 
0af6d     00 00 00 00 
0af71     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0af75     00 00 00 00 
0af79     00 00 00 00 
0af7d     00 00 00 00 
0af81     00 00 00 00 | 	byte	$00[16]
0af85     BE 20 00 00 
0af89     00 00 00 00 
0af8d     00 00 00 00 
0af91     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0af95     00 00 00 00 
0af99     00 00 00 00 
0af9d     00 00 00 00 
0afa1     00 00 00 00 | 	byte	$00[16]
0afa5     BE 20 00 00 
0afa9     00 00 00 00 
0afad     00 00 00 00 
0afb1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0afb5     00 00 00 00 
0afb9     00 00 00 00 
0afbd     00 00 00 00 
0afc1     00 00 00 00 | 	byte	$00[16]
0afc5     BE 20 00 00 
0afc9     00 00 00 10 
0afcd     BE 50 00 00 
0afd1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
0afd5     00 00 00 00 
0afd9     00 00 00 00 
0afdd     00 00 00 00 
0afe1     00 00 00 00 | 	byte	$00[16]
0afe5     BE 20 00 00 
0afe9     00 00 00 00 
0afed     00 00 00 00 
0aff1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0aff5     00 00 00 00 
0aff9     00 00 00 00 
0affd     00 00 00 00 
0b001     00 00 00 00 | 	byte	$00[16]
0b005     BE 20 00 00 
0b009     00 00 00 00 
0b00d     00 00 00 00 
0b011     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b015     00 00 00 00 
0b019     00 00 00 00 
0b01d     00 00 00 00 
0b021     00 00 00 00 | 	byte	$00[16]
0b025     BE 20 00 00 
0b029     00 00 00 00 
0b02d     00 00 00 00 
0b031     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b035     00 00 00 00 
0b039     00 00 00 00 
0b03d     00 00 00 00 
0b041     00 00 00 00 | 	byte	$00[16]
0b045     BE 20 00 00 
0b049     00 00 00 00 
0b04d     00 00 00 00 
0b051     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b055     00 00 00 00 
0b059     00 00 00 00 
0b05d     00 00 00 00 
0b061     00 00 00 00 | 	byte	$00[16]
0b065     BE 20 00 00 
0b069     00 00 00 00 
0b06d     00 00 00 00 
0b071     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b075     00 00 00 00 
0b079     00 00 00 00 
0b07d     00 00 00 00 
0b081     00 00 00 00 | 	byte	$00[16]
0b085     BE 20 00 00 
0b089     00 00 00 00 
0b08d     00 00 00 00 
0b091     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b095     00 00 00 00 
0b099     00 00 00 00 
0b09d     00 00 00 00 
0b0a1     00 00 00 00 | 	byte	$00[16]
0b0a5     BE 20 00 00 
0b0a9     00 00 00 00 
0b0ad     00 00 00 00 
0b0b1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b0b5     00 00 00 00 
0b0b9     00 00 00 00 
0b0bd     00 00 00 00 
0b0c1     00 00 00 00 | 	byte	$00[16]
0b0c5     BE 20 00 00 
0b0c9     00 00 00 10 
0b0cd     BE 50 00 00 
0b0d1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b0d5     00 00 00 00 
0b0d9     00 00 00 00 
0b0dd     00 00 00 00 
0b0e1     00 00 00 00 | 	byte	$00[16]
0b0e5     BE 20 00 00 
0b0e9     00 00 00 10 
0b0ed     BE 50 00 00 
0b0f1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b0f5     00 00 00 00 
0b0f9     00 00 00 00 
0b0fd     00 00 00 00 
0b101     00 00 00 00 | 	byte	$00[16]
0b105     BE 20 00 00 
0b109     00 00 00 00 
0b10d     00 00 00 00 
0b111     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b115     00 00 00 00 
0b119     00 00 00 00 
0b11d     00 00 00 00 
0b121     00 00 00 00 | 	byte	$00[16]
0b125     BE 20 00 00 
0b129     00 00 00 00 
0b12d     00 00 00 00 
0b131     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b135     00 00 00 00 
0b139     00 00 00 00 
0b13d     00 00 00 00 
0b141     00 00 00 00 | 	byte	$00[16]
0b145     BE 20 00 00 
0b149     00 00 00 00 
0b14d     00 00 00 00 
0b151     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b155     00 00 00 00 
0b159     00 00 00 00 
0b15d     00 00 00 00 
0b161     00 00 00 00 | 	byte	$00[16]
0b165     BE 20 00 00 
0b169     00 00 00 00 
0b16d     00 00 00 00 
0b171     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b175     00 00 00 00 
0b179     00 00 00 00 
0b17d     00 00 00 00 
0b181     00 00 00 00 | 	byte	$00[16]
0b185     BE 20 00 00 
0b189     00 00 00 00 
0b18d     00 00 00 00 
0b191     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b195     00 00 00 00 
0b199     00 00 00 00 
0b19d     00 00 00 00 
0b1a1     00 00 00 00 | 	byte	$00[16]
0b1a5     BE 20 00 00 
0b1a9     00 00 00 00 
0b1ad     00 00 00 00 
0b1b1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b1b5     00 00 00 00 
0b1b9     00 00 00 00 
0b1bd     00 00 00 00 
0b1c1     00 00 00 00 | 	byte	$00[16]
0b1c5     BE 20 00 10 
0b1c9     FE 5C 20 00 
0b1cd     BE 60 00 00 
0b1d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b1d5     00 00 00 00 
0b1d9     00 00 00 00 
0b1dd     00 00 00 00 
0b1e1     00 00 00 00 | 	byte	$00[16]
0b1e5     BE 20 00 10 
0b1e9     FE 5C 20 00 
0b1ed     00 00 00 00 
0b1f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b1f5     00 00 00 10 
0b1f9     FE 5C 20 00 
0b1fd     00 00 00 00 
0b201     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b205     BE 20 00 10 
0b209     FE 5C 20 00 
0b20d     00 00 00 00 
0b211     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b215     00 00 00 00 
0b219     00 00 00 00 
0b21d     00 00 00 00 
0b221     00 00 00 00 | 	byte	$00[16]
0b225     BE 20 00 10 
0b229     FE 5C 20 00 
0b22d     00 00 00 00 
0b231     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b235     00 00 00 00 
0b239     00 00 00 00 
0b23d     00 00 00 00 
0b241     00 00 00 00 | 	byte	$00[16]
0b245     BE 20 00 10 
0b249     FE 5C 20 00 
0b24d     00 00 00 00 
0b251     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b255     00 00 00 10 
0b259     FE 5C 20 00 
0b25d     00 00 00 00 
0b261     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b265     BE 20 00 10 
0b269     FE 5C 20 00 
0b26d     00 00 00 00 
0b271     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b275     00 00 00 00 
0b279     00 00 00 00 
0b27d     00 00 00 00 
0b281     00 00 00 00 | 	byte	$00[16]
0b285     BE 20 00 10 
0b289     FE 5C 20 00 
0b28d     00 00 00 00 
0b291     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b295     00 00 00 00 
0b299     00 00 00 00 
0b29d     00 00 00 00 
0b2a1     00 00 00 00 | 	byte	$00[16]
0b2a5     BE 20 00 10 
0b2a9     FE 5C 20 00 
0b2ad     00 00 00 00 
0b2b1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b2b5     00 00 00 00 
0b2b9     00 00 00 00 
0b2bd     00 00 00 00 
0b2c1     00 00 00 00 | 	byte	$00[16]
0b2c5     BE 20 00 10 
0b2c9     FE 5C 20 10 
0b2cd     BE 50 00 00 
0b2d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b2d5     00 00 00 00 
0b2d9     00 00 00 00 
0b2dd     00 00 00 00 
0b2e1     00 00 00 00 | 	byte	$00[16]
0b2e5     BE 20 00 10 
0b2e9     FE 5C 20 10 
0b2ed     BE 50 00 00 
0b2f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b2f5     00 00 00 10 
0b2f9     FE 5C 20 00 
0b2fd     00 00 00 00 
0b301     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b305     BE 20 00 10 
0b309     FE 5C 20 00 
0b30d     00 00 00 00 
0b311     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b315     00 00 00 00 
0b319     00 00 00 00 
0b31d     00 00 00 00 
0b321     00 00 00 00 | 	byte	$00[16]
0b325     BE 20 00 10 
0b329     FE 5C 20 00 
0b32d     00 00 00 00 
0b331     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b335     00 00 00 00 
0b339     00 00 00 00 
0b33d     00 00 00 00 
0b341     00 00 00 00 | 	byte	$00[16]
0b345     BE 20 00 10 
0b349     FE 5C 20 00 
0b34d     00 00 00 00 
0b351     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b355     00 00 00 10 
0b359     FE 5C 20 00 
0b35d     00 00 00 00 
0b361     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b365     BE 20 00 10 
0b369     FE 5C 20 00 
0b36d     00 00 00 00 
0b371     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b375     00 00 00 00 
0b379     00 00 00 00 
0b37d     00 00 00 00 
0b381     00 00 00 00 | 	byte	$00[16]
0b385     BE 20 00 10 
0b389     FE 5C 20 00 
0b38d     00 00 00 00 
0b391     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b395     00 00 00 00 
0b399     00 00 00 00 
0b39d     00 00 00 00 
0b3a1     00 00 00 00 | 	byte	$00[16]
0b3a5     BE 20 00 10 
0b3a9     FE 5C 20 00 
0b3ad     00 00 00 00 
0b3b1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b3b5     00 00 00 00 
0b3b9     00 00 00 00 
0b3bd     00 00 00 00 
0b3c1     00 00 00 00 | 	byte	$00[16]
0b3c5     BE 20 00 10 
0b3c9     FE 5C 20 10 
0b3cd     BE 50 00 00 
0b3d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b3d5     00 00 00 00 
0b3d9     00 00 00 00 
0b3dd     00 00 00 00 
0b3e1     00 00 00 00 | 	byte	$00[16]
0b3e5     BE 20 00 10 
0b3e9     FE 5C 20 00 
0b3ed     00 00 00 00 
0b3f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b3f5     00 00 00 10 
0b3f9     FE 5C 20 00 
0b3fd     00 00 00 00 
0b401     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b405     BE 20 00 10 
0b409     FE 5C 20 00 
0b40d     00 00 00 00 
0b411     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b415     00 00 00 00 
0b419     00 00 00 00 
0b41d     00 00 00 00 
0b421     00 00 00 00 | 	byte	$00[16]
0b425     BE 20 00 10 
0b429     FE 5C 20 00 
0b42d     00 00 00 00 
0b431     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b435     00 00 00 00 
0b439     00 00 00 00 
0b43d     00 00 00 00 
0b441     00 00 00 00 | 	byte	$00[16]
0b445     BE 20 00 10 
0b449     FE 5C 20 00 
0b44d     00 00 00 00 
0b451     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b455     00 00 00 10 
0b459     FE 5C 20 00 
0b45d     00 00 00 00 
0b461     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b465     BE 20 00 00 
0b469     00 00 00 00 
0b46d     00 00 00 00 
0b471     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b475     00 00 00 10 
0b479     FE 5C 20 00 
0b47d     00 00 00 00 
0b481     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b485     BE 20 00 00 
0b489     00 00 00 00 
0b48d     00 00 00 00 
0b491     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b495     00 00 00 10 
0b499     FE 5C 20 00 
0b49d     00 00 00 00 
0b4a1     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4a5     BE 20 00 00 
0b4a9     00 00 00 00 
0b4ad     00 00 00 00 
0b4b1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b4b5     00 00 00 10 
0b4b9     FE 5C 20 00 
0b4bd     00 00 00 00 
0b4c1     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4c5     BE 20 00 10 
0b4c9     FE 5C 20 10 
0b4cd     BE 50 00 00 
0b4d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b4d5     00 00 00 00 
0b4d9     00 00 00 00 
0b4dd     00 00 00 00 
0b4e1     00 00 00 00 | 	byte	$00[16]
0b4e5     BE 20 00 10 
0b4e9     FE 5C 20 10 
0b4ed     BE 50 00 00 
0b4f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b4f5     00 00 00 00 
0b4f9     00 00 00 00 
0b4fd     00 00 00 00 
0b501     00 00 00 00 | 	byte	$00[16]
0b505     BE 20 00 10 
0b509     FE 5C 20 00 
0b50d     00 00 00 00 
0b511     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b515     00 00 00 10 
0b519     FE 5C 20 00 
0b51d     00 00 00 00 
0b521     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b525     BE 20 00 00 
0b529     00 00 00 00 
0b52d     00 00 00 00 
0b531     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b535     00 00 00 10 
0b539     FE 5C 20 00 
0b53d     00 00 00 00 
0b541     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b545     BE 20 00 00 
0b549     00 00 00 00 
0b54d     00 00 00 00 
0b551     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b555     00 00 00 10 
0b559     FE 5C 20 00 
0b55d     00 00 00 00 
0b561     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b565     BE 20 00 00 
0b569     00 00 00 00 
0b56d     00 00 00 00 
0b571     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b575     00 00 00 10 
0b579     FE 5C 20 00 
0b57d     00 00 00 00 
0b581     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b585     BE 20 00 10 
0b589     FE 5C 20 00 
0b58d     00 00 00 00 
0b591     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b595     00 00 00 00 
0b599     00 00 00 00 
0b59d     00 00 00 00 
0b5a1     00 00 00 00 | 	byte	$00[16]
0b5a5     BE 20 00 10 
0b5a9     FE 5C 20 00 
0b5ad     00 00 00 00 
0b5b1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b5b5     00 00 00 00 
0b5b9     00 00 00 00 
0b5bd     00 00 00 00 
0b5c1     00 00 00 00 | 	byte	$00[16]
0b5c5     BE 20 00 10 
0b5c9     FE 5C 20 00 
0b5cd     BE 60 00 00 
0b5d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b5d5     00 00 00 00 
0b5d9     00 00 00 00 
0b5dd     00 00 00 00 
0b5e1     00 00 00 00 | 	byte	$00[16]
0b5e5     BE 20 00 10 
0b5e9     FE 5C 20 00 
0b5ed     00 00 00 00 
0b5f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b5f5     00 00 00 10 
0b5f9     FE 5C 20 00 
0b5fd     00 00 00 00 
0b601     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b605     BE 20 00 10 
0b609     FE 5C 20 00 
0b60d     BE 60 00 00 
0b611     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b615     00 00 00 00 
0b619     00 00 00 00 
0b61d     00 00 00 00 
0b621     00 00 00 00 | 	byte	$00[16]
0b625     BE 20 00 10 
0b629     FE 5C 20 00 
0b62d     00 00 00 00 
0b631     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b635     00 00 00 00 
0b639     00 00 00 00 
0b63d     00 00 00 00 
0b641     00 00 00 00 | 	byte	$00[16]
0b645     BE 20 00 10 
0b649     FE 5C 20 00 
0b64d     BE 60 00 00 
0b651     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b655     00 00 00 10 
0b659     FE 5C 20 00 
0b65d     00 00 00 00 
0b661     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b665     BE 20 00 10 
0b669     FE 5C 20 00 
0b66d     00 00 00 00 
0b671     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b675     00 00 00 00 
0b679     00 00 00 00 | 	byte	$00[8]
0b67d     BE 60 00 00 
0b681     00 00 00 00 
0b685     BE 20 00 10 
0b689     FE 5C 20 00 | 	byte	$be, $60, $00, $00, $00, $00, $00, $00, $be, $20, $00, $10, $fe, $5c, $20, $00
0b68d     00 00 00 00 
0b691     BE 20 00 00 
0b695     00 00 00 00 
0b699     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b69d     00 00 00 00 
0b6a1     00 00 00 00 | 	byte	$00[8]
0b6a5     BE 20 00 10 
0b6a9     FE 5C 20 00 
0b6ad     00 00 00 00 
0b6b1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b6b5     00 00 00 00 
0b6b9     00 00 00 00 
0b6bd     00 00 00 00 
0b6c1     00 00 00 00 | 	byte	$00[16]
0b6c5     BE 20 00 10 
0b6c9     FE 5C 20 10 
0b6cd     BE 50 00 00 
0b6d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b6d5     00 00 00 00 
0b6d9     00 00 00 00 
0b6dd     00 00 00 00 
0b6e1     00 00 00 00 | 	byte	$00[16]
0b6e5     BE 20 00 10 
0b6e9     FE 5C 20 10 
0b6ed     BE 50 00 00 
0b6f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b6f5     00 00 00 10 
0b6f9     FE 5C 20 00 
0b6fd     00 00 00 00 
0b701     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b705     BE 20 00 10 
0b709     FE 5C 20 00 
0b70d     BE 60 00 00 
0b711     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b715     00 00 00 00 
0b719     00 00 00 00 
0b71d     00 00 00 00 
0b721     00 00 00 00 | 	byte	$00[16]
0b725     BE 20 00 10 
0b729     FE 5C 20 00 
0b72d     00 00 00 00 
0b731     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b735     00 00 00 00 
0b739     00 00 00 00 
0b73d     00 00 00 00 
0b741     00 00 00 00 | 	byte	$00[16]
0b745     BE 20 00 10 
0b749     FE 5C 20 00 
0b74d     BE 60 00 00 
0b751     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b755     00 00 00 10 
0b759     FE 5C 20 00 
0b75d     00 00 00 00 
0b761     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b765     BE 20 00 10 
0b769     FE 5C 20 00 
0b76d     00 00 00 00 
0b771     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b775     00 00 00 00 
0b779     00 00 00 00 
0b77d     00 00 00 00 
0b781     00 00 00 00 | 	byte	$00[16]
0b785     BE 20 00 10 
0b789     FE 5C 20 00 
0b78d     BE 60 00 00 
0b791     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b795     00 00 00 00 
0b799     00 00 00 00 
0b79d     00 00 00 00 
0b7a1     00 00 00 00 | 	byte	$00[16]
0b7a5     BE 20 00 10 
0b7a9     FE 5C 20 00 
0b7ad     00 00 00 00 
0b7b1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b7b5     00 00 00 00 
0b7b9     00 00 00 00 
0b7bd     00 00 00 00 
0b7c1     00 00 00 00 | 	byte	$00[16]
0b7c5     BE 20 00 10 
0b7c9     FE 5C 20 10 
0b7cd     BE 50 00 00 
0b7d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b7d5     00 00 00 00 
0b7d9     00 00 00 00 
0b7dd     00 00 00 00 
0b7e1     00 00 00 00 | 	byte	$00[16]
0b7e5     BE 20 00 10 
0b7e9     FE 5C 20 00 
0b7ed     00 00 00 00 
0b7f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b7f5     00 00 00 10 
0b7f9     FE 5C 20 00 
0b7fd     BE 60 00 00 
0b801     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
0b805     BE 20 00 10 
0b809     FE 5C 20 00 
0b80d     00 00 00 00 
0b811     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b815     00 00 00 00 
0b819     00 00 00 00 
0b81d     00 00 00 00 
0b821     00 00 00 00 | 	byte	$00[16]
0b825     BE 20 00 10 
0b829     FE 5C 20 00 
0b82d     BE 60 00 00 
0b831     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b835     00 00 00 00 
0b839     00 00 00 00 
0b83d     00 00 00 00 
0b841     00 00 00 00 | 	byte	$00[16]
0b845     BE 20 00 10 
0b849     FE 5C 20 00 
0b84d     00 00 00 00 
0b851     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b855     00 00 00 10 
0b859     FE 5C 20 00 
0b85d     BE 60 00 00 
0b861     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
0b865     BE 20 00 00 
0b869     00 00 00 00 
0b86d     00 00 00 00 
0b871     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b875     00 00 00 10 
0b879     FE 5C 20 00 
0b87d     00 00 00 00 
0b881     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b885     BE 20 00 00 
0b889     00 00 00 00 
0b88d     BE 60 00 00 
0b891     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b895     00 00 00 10 
0b899     FE 5C 20 00 
0b89d     00 00 00 00 
0b8a1     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8a5     BE 20 00 00 
0b8a9     00 00 00 00 
0b8ad     00 00 00 00 
0b8b1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b8b5     00 00 00 10 
0b8b9     FE 5C 20 00 
0b8bd     00 00 00 00 
0b8c1     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8c5     BE 20 00 10 
0b8c9     FE 5C 20 10 
0b8cd     BE 50 00 00 
0b8d1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b8d5     00 00 00 00 
0b8d9     00 00 00 00 
0b8dd     00 00 00 00 
0b8e1     00 00 00 00 | 	byte	$00[16]
0b8e5     BE 20 00 10 
0b8e9     FE 5C 20 10 
0b8ed     BE 50 00 00 
0b8f1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
0b8f5     00 00 00 00 
0b8f9     00 00 00 00 
0b8fd     00 00 00 00 
0b901     00 00 00 00 | 	byte	$00[16]
0b905     BE 20 00 10 
0b909     FE 5C 20 00 
0b90d     00 00 00 00 
0b911     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b915     00 00 00 10 
0b919     FE 5C 20 00 
0b91d     BE 60 00 00 
0b921     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
0b925     BE 20 00 00 
0b929     00 00 00 00 
0b92d     00 00 00 00 
0b931     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b935     00 00 00 10 
0b939     FE 5C 20 00 
0b93d     BE 60 00 00 
0b941     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
0b945     BE 20 00 00 
0b949     00 00 00 00 
0b94d     00 00 00 00 
0b951     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b955     00 00 00 10 
0b959     FE 5C 20 00 
0b95d     00 00 00 00 
0b961     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b965     BE 20 00 00 
0b969     00 00 00 00 
0b96d     BE 60 00 00 
0b971     BE 20 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b975     00 00 00 10 
0b979     FE 5C 20 00 
0b97d     00 00 00 00 
0b981     00 00 00 00 | 	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b985     BE 20 00 10 
0b989     FE 5C 20 00 
0b98d     00 00 00 00 
0b991     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
0b995     00 00 00 00 
0b999     00 00 00 00 
0b99d     00 00 00 00 
0b9a1     00 00 00 00 | 	byte	$00[16]
0b9a5     BE 20 00 10 
0b9a9     FE 5C 20 00 
0b9ad     BE 60 00 00 
0b9b1     BE 20 00 00 | 	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
0b9b5     00 00 00 00 
0b9b9     00 00 00 00 
0b9bd     00 00 00 00 
0b9c1     00 00 00 00 | 	byte	$00[16]
0b9c5     BE 20 00 00 
0b9c9     BE 60 00 00 
0b9cd     D6 60 00 00 
0b9d1     BE 20 00 00 | 	byte	$be, $20, $00, $00, $be, $60, $00, $00, $d6, $60, $00, $00, $be, $20, $00, $00
0b9d5     00 00 00 00 
0b9d9     00 00 00 00 
0b9dd     00 00 00 00 
0b9e1     00 00 00 00 
0b9e5     00 00 00 00 
0b9e9     00 00 00 00 
0b9ed     00 00 00 00 | 	byte	$00[28]
0b9f1     BE 20 00 00 
0b9f5     00 00 00 00 
0b9f9     00 00 00 00 
0b9fd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba01     00 00 00 00 
0ba05     00 00 00 00 
0ba09     00 00 00 00 
0ba0d     00 00 00 00 | 	byte	$00[16]
0ba11     BE 20 00 00 
0ba15     00 00 00 00 
0ba19     00 00 00 00 
0ba1d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba21     00 00 00 00 
0ba25     00 00 00 00 
0ba29     00 00 00 00 
0ba2d     00 00 00 00 | 	byte	$00[16]
0ba31     BE 20 00 00 
0ba35     00 00 00 00 
0ba39     00 00 00 00 
0ba3d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba41     00 00 00 00 
0ba45     00 00 00 00 
0ba49     00 00 00 00 
0ba4d     00 00 00 00 | 	byte	$00[16]
0ba51     BE 20 00 00 
0ba55     00 00 00 00 
0ba59     00 00 00 00 
0ba5d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba61     00 00 00 00 
0ba65     00 00 00 00 
0ba69     00 00 00 00 
0ba6d     00 00 00 00 | 	byte	$00[16]
0ba71     BE 20 00 00 
0ba75     00 00 00 00 
0ba79     00 00 00 00 
0ba7d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba81     00 00 00 00 
0ba85     00 00 00 00 
0ba89     00 00 00 00 
0ba8d     00 00 00 00 | 	byte	$00[16]
0ba91     BE 20 00 00 
0ba95     00 00 00 00 
0ba99     00 00 00 00 
0ba9d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0baa1     00 00 00 00 
0baa5     00 00 00 00 
0baa9     00 00 00 00 
0baad     00 00 00 00 | 	byte	$00[16]
0bab1     BE 20 00 10 
0bab5     BE 50 00 00 
0bab9     00 00 00 00 
0babd     00 00 00 00 | 	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bac1     00 00 00 00 
0bac5     00 00 00 00 
0bac9     00 00 00 00 
0bacd     00 00 00 00 | 	byte	$00[16]
0bad1     BE 20 00 00 
0bad5     00 00 00 00 
0bad9     00 00 00 00 
0badd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bae1     00 00 00 00 
0bae5     00 00 00 00 
0bae9     00 00 00 00 
0baed     00 00 00 00 | 	byte	$00[16]
0baf1     BE 20 00 00 
0baf5     00 00 00 00 
0baf9     00 00 00 00 
0bafd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb01     00 00 00 00 
0bb05     00 00 00 00 
0bb09     00 00 00 00 
0bb0d     00 00 00 00 | 	byte	$00[16]
0bb11     BE 20 00 00 
0bb15     00 00 00 00 
0bb19     00 00 00 00 
0bb1d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb21     00 00 00 00 
0bb25     00 00 00 00 
0bb29     00 00 00 00 
0bb2d     00 00 00 00 | 	byte	$00[16]
0bb31     BE 20 00 00 
0bb35     00 00 00 00 
0bb39     00 00 00 00 
0bb3d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb41     00 00 00 00 
0bb45     00 00 00 00 
0bb49     00 00 00 00 
0bb4d     00 00 00 00 | 	byte	$00[16]
0bb51     BE 20 00 00 
0bb55     00 00 00 00 
0bb59     00 00 00 00 
0bb5d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb61     00 00 00 00 
0bb65     00 00 00 00 
0bb69     00 00 00 00 
0bb6d     00 00 00 00 | 	byte	$00[16]
0bb71     BE 20 00 00 
0bb75     00 00 00 00 
0bb79     00 00 00 00 
0bb7d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb81     00 00 00 00 
0bb85     00 00 00 00 
0bb89     00 00 00 00 
0bb8d     00 00 00 00 | 	byte	$00[16]
0bb91     BE 20 00 10 
0bb95     BE 50 00 00 
0bb99     00 00 00 00 
0bb9d     00 00 00 00 | 	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bba1     00 00 00 00 
0bba5     00 00 00 00 
0bba9     00 00 00 00 
0bbad     00 00 00 00 | 	byte	$00[16]
0bbb1     BE 20 00 10 
0bbb5     BE 50 00 00 
0bbb9     00 00 00 00 
0bbbd     00 00 00 00 | 	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbc1     00 00 00 00 
0bbc5     00 00 00 00 
0bbc9     00 00 00 00 
0bbcd     00 00 00 00 | 	byte	$00[16]
0bbd1     BE 20 00 00 
0bbd5     00 00 00 00 
0bbd9     00 00 00 00 
0bbdd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbe1     00 00 00 00 
0bbe5     00 00 00 00 
0bbe9     00 00 00 00 
0bbed     00 00 00 00 | 	byte	$00[16]
0bbf1     BE 20 00 00 
0bbf5     00 00 00 00 
0bbf9     00 00 00 00 
0bbfd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc01     00 00 00 00 
0bc05     00 00 00 00 
0bc09     00 00 00 00 
0bc0d     00 00 00 00 | 	byte	$00[16]
0bc11     BE 20 00 00 
0bc15     00 00 00 00 
0bc19     00 00 00 00 
0bc1d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc21     00 00 00 00 
0bc25     00 00 00 00 
0bc29     00 00 00 00 
0bc2d     00 00 00 00 | 	byte	$00[16]
0bc31     BE 20 00 00 
0bc35     00 00 00 00 
0bc39     00 00 00 00 
0bc3d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc41     00 00 00 00 
0bc45     00 00 00 00 
0bc49     00 00 00 00 
0bc4d     00 00 00 00 | 	byte	$00[16]
0bc51     BE 20 00 00 
0bc55     00 00 00 00 
0bc59     00 00 00 00 
0bc5d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc61     00 00 00 00 
0bc65     00 00 00 00 
0bc69     00 00 00 00 
0bc6d     00 00 00 00 | 	byte	$00[16]
0bc71     BE 20 00 00 
0bc75     00 00 00 00 
0bc79     00 00 00 00 
0bc7d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc81     00 00 00 00 
0bc85     00 00 00 00 
0bc89     00 00 00 00 
0bc8d     00 00 00 00 | 	byte	$00[16]
0bc91     BE 20 00 00 
0bc95     00 00 00 00 
0bc99     00 00 00 00 
0bc9d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bca1     00 00 00 00 
0bca5     00 00 00 00 
0bca9     00 00 00 00 
0bcad     00 00 00 00 | 	byte	$00[16]
0bcb1     BE 20 00 10 
0bcb5     BE 50 00 00 
0bcb9     00 00 00 00 
0bcbd     00 00 00 00 | 	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcc1     00 00 00 00 
0bcc5     00 00 00 00 
0bcc9     00 00 00 00 
0bccd     00 00 00 00 | 	byte	$00[16]
0bcd1     BE 20 00 00 
0bcd5     00 00 00 00 
0bcd9     00 00 00 00 
0bcdd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bce1     00 00 00 00 
0bce5     00 00 00 00 
0bce9     00 00 00 00 
0bced     00 00 00 00 | 	byte	$00[16]
0bcf1     BE 20 00 00 
0bcf5     00 00 00 00 
0bcf9     00 00 00 00 
0bcfd     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd01     00 00 00 00 
0bd05     00 00 00 00 
0bd09     00 00 00 00 
0bd0d     00 00 00 00 | 	byte	$00[16]
0bd11     BE 20 00 00 
0bd15     00 00 00 00 
0bd19     00 00 00 00 
0bd1d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd21     00 00 00 00 
0bd25     00 00 00 00 
0bd29     00 00 00 00 
0bd2d     00 00 00 00 | 	byte	$00[16]
0bd31     BE 20 00 10 
0bd35     BE 50 00 00 
0bd39     00 00 00 00 
0bd3d     00 00 00 00 | 	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd41     00 00 00 10 
0bd45     BE 50 00 00 
0bd49     00 00 00 00 
0bd4d     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd51     BE 20 00 00 
0bd55     00 00 00 00 
0bd59     00 00 00 00 
0bd5d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd61     00 00 00 10 
0bd65     BE 50 00 00 
0bd69     00 00 00 00 
0bd6d     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd71     BE 20 00 00 
0bd75     00 00 00 00 
0bd79     00 00 00 00 
0bd7d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd81     00 00 00 10 
0bd85     BE 50 00 00 
0bd89     00 00 00 00 
0bd8d     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd91     BE 20 00 00 
0bd95     00 00 00 00 
0bd99     00 00 00 00 
0bd9d     00 00 00 00 | 	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bda1     00 00 00 10 
0bda5     BE 50 00 00 
0bda9     00 00 00 00 
0bdad     00 00 00 00 | 	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdb1     BE 20 00 10 
0bdb5     BE 50 00 00 
0bdb9     00 00 00 00 
0bdbd     00 00 00 00 | 	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdc1     00 00 00 00 
0bdc5     00 00 00    | 	byte	$00[7]
0bdc8     01 7D D0 00 
0bdcc     02 FA C0 00 
0bdd0     00 BE 20 00 
0bdd4     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
0bdd8     00 00 00 00 
0bddc     00 00 00 00 
0bde0     00 00 00 00 
0bde4     00 00 00 00 | 	byte	$00[16]
0bde8     01 7D D0 00 
0bdec     00 00 00 00 
0bdf0     00 00 00 00 
0bdf4     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdf8     00 00 00 00 
0bdfc     00 00 00 00 
0be00     00 00 00 00 
0be04     00 00 00 00 | 	byte	$00[16]
0be08     01 40 D0 00 
0be0c     00 00 00 00 
0be10     00 00 00 00 
0be14     00 BE 50 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0be18     00 00 00 00 
0be1c     00 00 00 00 
0be20     00 00 00 00 
0be24     00 00 00 00 | 	byte	$00[16]
0be28     01 1D D0 00 
0be2c     00 00 00 00 
0be30     00 00 00 00 
0be34     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be38     00 00 00 00 
0be3c     00 00 00 00 
0be40     00 00 00 00 
0be44     00 00 00 00 
0be48     00          | 	byte	$00[17]
0be49     FE D0 00 00 
0be4d     00 00 00 10 
0be51     BE 50 00 00 
0be55     BE 50 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
0be59     00 00 00 00 
0be5d     00 00 00 00 
0be61     00 00 00 00 
0be65     00 00 00 00 | 	byte	$00[16]
0be69     F0 D0 00 00 
0be6d     00 00 00 00 
0be71     00 00 00 00 
0be75     00 00 00 00 | 	byte	$f0, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be79     00 00 00 00 
0be7d     00 00 00 00 
0be81     00 00 00 00 
0be85     00 00 00 00 | 	byte	$00[16]
0be89     FE D0 00 00 
0be8d     00 00 00 00 
0be91     00 00 00 00 
0be95     BE 50 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
0be99     00 00 00 00 
0be9d     00 00 00 00 
0bea1     00 00 00 00 
0bea5     00 00 00 00 | 	byte	$00[16]
0bea9     D6 D0 00 00 
0bead     00 00 00 10 
0beb1     BE 50 00 00 
0beb5     00 00 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
0beb9     00 00 00 00 
0bebd     00 00 00 00 
0bec1     00 00 00 00 
0bec5     00 00 00 00 | 	byte	$00[16]
0bec9     F0 D0 00 02 
0becd     FA C0 00 00 
0bed1     BE 20 00 00 
0bed5     BE 50 00 00 | 	byte	$f0, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
0bed9     00 00 00 00 
0bedd     00 00 00 00 
0bee1     00 00 00 00 
0bee5     00 00 00 00 | 	byte	$00[16]
0bee9     AA D0 00 00 
0beed     00 00 00 00 
0bef1     00 00 00 00 
0bef5     00 00 00 00 | 	byte	$aa, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bef9     00 00 00 00 
0befd     00 00 00 00 
0bf01     00 00 00 00 
0bf05     00 00 00 00 | 	byte	$00[16]
0bf09     BE D0 00 00 
0bf0d     00 00 00 00 
0bf11     00 00 00 00 
0bf15     BE 50 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
0bf19     00 00 00 00 
0bf1d     00 00 00 00 
0bf21     00 00 00 00 
0bf25     00 00 00 00 | 	byte	$00[16]
0bf29     A0 D0 00 00 
0bf2d     00 00 00 00 
0bf31     00 00 00 00 
0bf35     00 00 00 00 | 	byte	$a0, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf39     00 00 00 00 
0bf3d     00 00 00 00 
0bf41     00 00 00 00 
0bf45     00 00 00 00 | 	byte	$00[16]
0bf49     AA D0 00 00 
0bf4d     00 00 00 10 
0bf51     BE 50 00 00 
0bf55     BE 50 00 00 | 	byte	$aa, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
0bf59     00 00 00 00 
0bf5d     00 00 00 00 
0bf61     00 00 00 00 
0bf65     00 00 00 00 | 	byte	$00[16]
0bf69     BE D0 00 00 
0bf6d     00 00 00 00 
0bf71     00 00 00 00 
0bf75     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf79     00 00 00 00 
0bf7d     00 00 00 00 
0bf81     00 00 00 00 
0bf85     00 00 00 00 | 	byte	$00[16]
0bf89     D6 D0 00 00 
0bf8d     00 00 00 00 
0bf91     00 00 00 00 
0bf95     BE 50 00 00 | 	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
0bf99     00 00 00 00 
0bf9d     00 00 00 00 
0bfa1     00 00 00 00 
0bfa5     00 00 00 00 | 	byte	$00[16]
0bfa9     BE D0 00 00 
0bfad     00 00 00 10 
0bfb1     BE 50 00 00 
0bfb5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
0bfb9     00 00 00 00 
0bfbd     00 00 00 00 
0bfc1     00 00 00 00 
0bfc5     00 00 00 00 | 	byte	$00[16]
0bfc9     D6 D0 00 03 
0bfcd     58 C0 00 00 
0bfd1     BE 20 00 00 
0bfd5     BE 50 00 00 | 	byte	$d6, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
0bfd9     00 00 00 00 
0bfdd     00 00 00 00 
0bfe1     00 00 00 00 
0bfe5     00 00 00 00 | 	byte	$00[16]
0bfe9     FE D0 00 00 
0bfed     00 00 00 00 
0bff1     00 00 00 00 
0bff5     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bff9     00 00 00 00 
0bffd     00 00 00 00 
0c001     00 00 00 00 
0c005     00 00 00    | 	byte	$00[15]
0c008     01 1D D0 00 
0c00c     00 00 00 00 
0c010     10 BE 50 00 
0c014     00 BE 50 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c018     00 00 00 00 
0c01c     00 00 00 00 
0c020     00 00 00 00 
0c024     00 00 00 00 
0c028     00          | 	byte	$00[17]
0c029     FE D0 00 00 
0c02d     00 00 00 10 
0c031     BE 50 00 00 
0c035     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
0c039     00 00 00 00 
0c03d     00 00 00 00 
0c041     00 00 00 00 
0c045     00 00 00 00 | 	byte	$00[16]
0c049     F0 D0 00 00 
0c04d     00 00 00 00 
0c051     00 00 00 00 
0c055     BE 50 00 00 | 	byte	$f0, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
0c059     00 00 00 00 
0c05d     00 00 00 00 
0c061     00 00 00 00 
0c065     00 00 00 00 | 	byte	$00[16]
0c069     FE D0 00 00 
0c06d     00 00 00 10 
0c071     BE 50 00 00 
0c075     00 00 00 00 | 	byte	$fe, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
0c079     00 00 00 00 
0c07d     00 00 00 00 
0c081     00 00 00 00 
0c085     00 00 00    | 	byte	$00[15]
0c088     01 1D D0 00 
0c08c     00 00 00 00 
0c090     10 BE 50 00 
0c094     00 BE 50 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c098     00 00 00 00 
0c09c     00 00 00 00 
0c0a0     00 00 00 00 
0c0a4     00 00 00 00 | 	byte	$00[16]
0c0a8     01 40 D0 00 
0c0ac     00 00 00 00 
0c0b0     00 00 00 00 
0c0b4     00 00 00 00 | 	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0b8     00 00 00 00 
0c0bc     00 00 00 00 
0c0c0     00 00 00 00 
0c0c4     00 00 00 00 | 	byte	$00[16]
0c0c8     01 53 D0 00 
0c0cc     03 58 C0 00 
0c0d0     00 BE 20 00 
0c0d4     00 BE 50 00 | 	byte	$01, $53, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
0c0d8     00 00 00 00 
0c0dc     00 00 00 00 
0c0e0     00 00 00 00 
0c0e4     00 00 00 00 | 	byte	$00[16]
0c0e8     01 AC D0 00 
0c0ec     00 00 00 00 
0c0f0     00 00 00 00 
0c0f4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0f8     00 00 00 00 
0c0fc     00 00 00 00 
0c100     00 00 00 00 
0c104     00 00 00 00 | 	byte	$00[16]
0c108     02 3A D0 00 
0c10c     00 00 00 00 
0c110     00 00 00 00 
0c114     00 BE 50 00 | 	byte	$02, $3a, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c118     00 00 00 00 
0c11c     00 00 00 00 
0c120     00 00 00 00 
0c124     00 00 00 00 | 	byte	$00[16]
0c128     01 C5 D0 00 
0c12c     00 00 00 00 
0c130     00 00 00 00 
0c134     00 00 00 00 | 	byte	$01, $c5, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c138     00 00 00 00 
0c13c     00 00 00 00 | 	byte	$00[8]
0c140     10 BE 50 00 
0c144     00 00 00 00 
0c148     01 E0 D0 00 
0c14c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $01, $e0, $d0, $00, $00, $00, $00, $00
0c150     10 BE 50 00 
0c154     00 BE 50 00 
0c158     00 00 00 00 
0c15c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c160     00 00 00 00 
0c164     00 00 00 00 | 	byte	$00[8]
0c168     01 FC D0 00 
0c16c     00 00 00 00 
0c170     10 BE 50 00 
0c174     00 00 00 00 | 	byte	$01, $fc, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
0c178     00 00 00 00 
0c17c     00 00 00 00 
0c180     00 00 00 00 
0c184     00 00 00 00 
0c188     00 00 00 00 
0c18c     00 00 00 00 | 	byte	$00[24]
0c190     10 BE 50 00 
0c194     00 BE 50 00 
0c198     00 00 00 00 
0c19c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1a0     00 00 00 00 
0c1a4     00 00 00 00 
0c1a8     00 00 00 00 
0c1ac     00 00 00 00 | 	byte	$00[16]
0c1b0     10 BE 50 00 
0c1b4     00 00 00 00 
0c1b8     00 00 00 00 
0c1bc     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1c0     00 00 00 00 
0c1c4     00 00 00 00 | 	byte	$00[8]
0c1c8     01 7D D0 00 
0c1cc     02 FA C0 00 
0c1d0     00 BE 20 00 
0c1d4     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
0c1d8     00 00 00 00 
      ...             
0c200     00 00 00 00 
0c204     00 00 00 00 | 	byte	$00[48]
0c208     01 7D D0 00 
0c20c     00 00 00 00 
0c210     00 00 00 00 
0c214     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c218     00 00 00 00 
      ...             
0c240     00 00 00 00 
0c244     00 00 00 00 | 	byte	$00[48]
0c248     01 7D D0 00 
0c24c     00 00 00 00 
0c250     10 BE 50 00 
0c254     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c258     00 00 00 00 
      ...             
0c280     00 00 00 00 
0c284     00 00 00 00 | 	byte	$00[48]
0c288     01 7D D0 00 
0c28c     00 00 00 00 
0c290     00 00 00 00 
0c294     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c298     00 00 00 00 
0c29c     00 00 00 00 
0c2a0     00 00 00 00 
0c2a4     00 00 00 00 | 	byte	$00[16]
0c2a8     01 7D D0 00 
0c2ac     00 00 00 00 
0c2b0     10 BE 50 00 
0c2b4     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
0c2b8     00 00 00 00 
0c2bc     00 00 00 00 
0c2c0     00 00 00 00 
0c2c4     00 00 00 00 | 	byte	$00[16]
0c2c8     01 7D D0 00 
0c2cc     02 FA C0 00 
0c2d0     00 BE 20 00 
0c2d4     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
0c2d8     00 00 00 00 
      ...             
0c300     00 00 00 00 
0c304     00 00 00 00 | 	byte	$00[48]
0c308     01 7D D0 00 
0c30c     00 00 00 00 
0c310     00 00 00 00 
0c314     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c318     00 00 00 00 
      ...             
0c340     00 00 00 00 
0c344     00 00 00 00 | 	byte	$00[48]
0c348     01 7D D0 00 
0c34c     00 00 00 00 
0c350     10 BE 50 00 
0c354     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c358     00 00 00 00 
      ...             
0c380     00 00 00 00 
0c384     00 00 00 00 | 	byte	$00[48]
0c388     01 7D D0 00 
0c38c     00 00 00 00 
0c390     00 00 00 00 
0c394     00 BE 50 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c398     00 00 00 00 
0c39c     00 00 00 00 
0c3a0     00 00 00 00 
0c3a4     00 00 00 00 | 	byte	$00[16]
0c3a8     01 7D D0 00 
0c3ac     00 00 00 00 
0c3b0     10 BE 50 00 
0c3b4     00 00 00 00 | 	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
0c3b8     00 00 00 00 
0c3bc     00 00 00 00 
0c3c0     00 00 00 00 
0c3c4     00 00 00 00 | 	byte	$00[16]
0c3c8     01 AC D0 00 
0c3cc     03 58 C0 00 
0c3d0     00 BE 20 00 
0c3d4     00 BE 50 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
0c3d8     00 00 00 00 
      ...             
0c400     00 00 00 00 
0c404     00 00 00 00 | 	byte	$00[48]
0c408     01 AC D0 00 
0c40c     00 00 00 00 
0c410     10 BE 50 00 
0c414     00 BE 50 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c418     00 00 00 00 
0c41c     00 00 00 00 
0c420     00 00 00 00 
0c424     00 00 00 00 
0c428     00 00 00 00 
0c42c     00 00 00 00 | 	byte	$00[24]
0c430     10 BE 50 00 
0c434     00 00 00 00 
0c438     00 00 00 00 
0c43c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c440     00 00 00 00 
0c444     00 00 00 00 | 	byte	$00[8]
0c448     01 AC D0 00 
0c44c     00 00 00 00 
0c450     00 00 00 00 
0c454     00 BE 50 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c458     00 00 00 00 
0c45c     00 00 00 00 
0c460     00 00 00 00 
0c464     00 00 00 00 
0c468     00 00 00 00 
0c46c     00 00 00 00 | 	byte	$00[24]
0c470     10 BE 50 00 
0c474     00 00 00 00 
0c478     00 00 00 00 
0c47c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c480     00 00 00 00 
0c484     00 00 00 00 | 	byte	$00[8]
0c488     01 AC D0 00 
0c48c     00 00 00 00 
0c490     10 BE 50 00 
0c494     00 BE 50 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c498     00 00 00 00 
0c49c     00 00 00 00 
0c4a0     00 00 00 00 
0c4a4     00 00 00 00 | 	byte	$00[16]
0c4a8     01 AC D0 00 
0c4ac     00 00 00 00 
0c4b0     00 00 00 00 
0c4b4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4b8     00 00 00 00 
0c4bc     00 00 00 00 
0c4c0     00 00 00 00 
0c4c4     00 00 00 00 | 	byte	$00[16]
0c4c8     01 AC D0 00 
0c4cc     03 58 C0 00 
0c4d0     00 BE 20 00 
0c4d4     00 BE 50 00 | 	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
0c4d8     00 00 00 00 
0c4dc     00 00 00 00 
0c4e0     00 00 00 00 
0c4e4     00 00 00 00 | 	byte	$00[16]
0c4e8     01 53 D0 00 
0c4ec     00 00 00 00 
0c4f0     00 00 00 00 
0c4f4     00 00 00 00 | 	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4f8     00 00 00 00 
0c4fc     00 00 00 00 
0c500     00 00 00 00 
0c504     00 00 00 00 | 	byte	$00[16]
0c508     01 1D D0 00 
0c50c     00 00 00 00 
0c510     00 00 00 00 
0c514     00 BE 50 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
0c518     00 00 00 00 
0c51c     00 00 00 00 
0c520     00 00 00 00 
0c524     00 00 00 00 | 	byte	$00[16]
0c528     01 AC D0 00 
0c52c     00 00 00 00 
0c530     00 00 00 00 
0c534     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c538     00 00 00 00 
0c53c     00 00 00 00 | 	byte	$00[8]
0c540     10 BE 50 00 
0c544     00 00 00 00 
0c548     01 53 D0 00 
0c54c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00
0c550     10 BE 50 00 
0c554     00 BE 50 00 
0c558     00 00 00 00 
0c55c     00 00 00 00 | 	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c560     00 00 00 00 
0c564     00 00 00 00 | 	byte	$00[8]
0c568     01 1D D0 00 
0c56c     00 00 00 00 
0c570     10 BE 50 00 
0c574     00 00 00 00 | 	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
0c578     00 00 00 00 
0c57c     00 00 00 00 
0c580     00 00 00 00 
0c584     00 00 00 00 | 	byte	$00[16]
0c588     01 AC D0 00 
0c58c     00 00 00 00 
0c590     10 BE 50 00 
0c594     00 BE 50 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
0c598     00 00 00 00 
0c59c     00 00 00 00 
0c5a0     00 00 00 00 
0c5a4     00 00 00 00 | 	byte	$00[16]
0c5a8     01 AC D0 00 
0c5ac     00 00 00 00 
0c5b0     10 BE 50 00 
0c5b4     00 00 00 00 | 	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
0c5b8     00 00 00 00 
      ...             
125c8     00 00 00 00 
125cc     00 00       | 	byte	$00[24598]
125ce     10 80 00 00 
125d2     00 00 00 00 
125d6     00 00 00 00 
125da     00 00 00 00 | 	byte	$10, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
125de     00 00 00 00 
      ...             
125f6     00 00 00 00 
125fa     00          | 	byte	$00[29]
125fb     FF FF 00 02 
125ff     02 FD 01 FB 
12603     C0 CD 24 F9 
12607     CF 3F 41 C9 | 	byte	$ff, $ff, $00, $02, $02, $fd, $01, $fb, $c0, $cd, $24, $f9, $cf, $3f, $41, $c9
1260b     92 BD 1A 47 
1260f     0C F3 F2 D6 
12613     19 1F BC A5 
12617     F7 0D B6 B6 | 	byte	$92, $bd, $1a, $47, $0c, $f3, $f2, $d6, $19, $1f, $bc, $a5, $f7, $0d, $b6, $b6
1261b     07 EE CE C4 
1261f     C5 0D 13 A2 
12623     80 E4 2B E8 
12627     97 AD E1 FC | 	byte	$07, $ee, $ce, $c4, $c5, $0d, $13, $a2, $80, $e4, $2b, $e8, $97, $ad, $e1, $fc
1262b     F7 E0 B3 DE 
1262f     3B FC BD E8 
12633     15 1B 0A 13 
12637     02 F2 05 18 | 	byte	$f7, $e0, $b3, $de, $3b, $fc, $bd, $e8, $15, $1b, $0a, $13, $02, $f2, $05, $18
1263b     24 05 FC 1F 
1263f     21 0E 16 F7 
12643     EB 2A 18 FE 
12647     0A 11 FB F5 | 	byte	$24, $05, $fc, $1f, $21, $0e, $16, $f7, $eb, $2a, $18, $fe, $0a, $11, $fb, $f5
1264b     18 0B FF 07 
1264f     D7 B6 DA FF 
12653     17 19 F3 8A 
12657     80 BF D2 B7 | 	byte	$18, $0b, $ff, $07, $d7, $b6, $da, $ff, $17, $19, $f3, $8a, $80, $bf, $d2, $b7
1265b     D7 F4 EC BC 
1265f     82 80 8E 9D 
12663     85 80 88 82 
12667     81 80 80 80 | 	byte	$d7, $f4, $ec, $bc, $82, $80, $8e, $9d, $85, $80, $88, $82, $81, $80, $80, $80
1266b     80 80 80 80 
1266f     80 80 80 80 
12673     80 80 80 80 
12677     80 80 80 80 
1267b     80 80 80 80 | 	byte	$80[20]
1267f     83 8D 92 99 
12683     9C 9D A2 AF 
12687     BB BD C3 C5 
1268b     CB D7 DC E0 | 	byte	$83, $8d, $92, $99, $9c, $9d, $a2, $af, $bb, $bd, $c3, $c5, $cb, $d7, $dc, $e0
1268f     E8 E9 F4 F5 
12693     F1 00 02 06 
12697     16 19 0C 0D 
1269b     21 2A 2A 2B | 	byte	$e8, $e9, $f4, $f5, $f1, $00, $02, $06, $16, $19, $0c, $0d, $21, $2a, $2a, $2b
1269f     22 28 2F 25 
126a3     46 66 32 13 
126a7     4D 6F 44 30 
126ab     40 37 3C 4D | 	byte	$22, $28, $2f, $25, $46, $66, $32, $13, $4d, $6f, $44, $30, $40, $37, $3c, $4d
126af     59 46 34 3D 
126b3     39 39 45 4F 
126b7     4B 46 3C 40 
126bb     3A 34 31 29 | 	byte	$59, $46, $34, $3d, $39, $39, $45, $4f, $4b, $46, $3c, $40, $3a, $34, $31, $29
126bf     26 1D 1B 19 
126c3     11 0B FF FA 
126c7     F6 ED E7 DF 
126cb     D8 D2 CB C6 | 	byte	$26, $1d, $1b, $19, $11, $0b, $ff, $fa, $f6, $ed, $e7, $df, $d8, $d2, $cb, $c6
126cf     C0 B5 AF AD 
126d3     AC A8 9D 92 
126d7     8B 86 82 80 
126db     80 80 80 80 | 	byte	$c0, $b5, $af, $ad, $ac, $a8, $9d, $92, $8b, $86, $82, $80, $80, $80, $80, $80
126df     80 80 80 80 
      ...             
1270b     80 80 80 80 
1270f     80 80       | 	byte	$80[50]
12711     8A 80 80 80 
12715     80 87 8A 80 
12719     80 88 8F 98 
1271d     9F A3 AA B3 | 	byte	$8a, $80, $80, $80, $80, $87, $8a, $80, $80, $88, $8f, $98, $9f, $a3, $aa, $b3
12721     B6 BC C5 CE 
12725     D4 D7 DF E4 
12729     EA F0 F5 FB 
1272d     FE 01 07 0E | 	byte	$b6, $bc, $c5, $ce, $d4, $d7, $df, $e4, $ea, $f0, $f5, $fb, $fe, $01, $07, $0e
12731     13 17 16 1A 
12735     23 2D 31 32 
12739     38 39 3B 3D 
1273d     3F 4C 4F 4B | 	byte	$13, $17, $16, $1a, $23, $2d, $31, $32, $38, $39, $3b, $3d, $3f, $4c, $4f, $4b
12741     45 4E 58 58 
12745     57 55 55 56 
12749     59 61 63 5F 
1274d     5F 61 61 62 | 	byte	$45, $4e, $58, $58, $57, $55, $55, $56, $59, $61, $63, $5f, $5f, $61, $61, $62
12751     67 65 5E 65 
12755     69 68 68 64 
12759     62 60 5F 5E 
1275d     5C 5B 58 56 | 	byte	$67, $65, $5e, $65, $69, $68, $68, $64, $62, $60, $5f, $5e, $5c, $5b, $58, $56
12761     54 52 50 4D 
12765     4B 49 46 44 
12769     42 40 3D 39 
1276d     32 31 34 2E | 	byte	$54, $52, $50, $4d, $4b, $49, $46, $44, $42, $40, $3d, $39, $32, $31, $34, $2e
12771     24 1D 10 07 
12775     09 0E 03 F3 
12779     E6 DE E6 E6 
1277d     D8 CA BD B3 | 	byte	$24, $1d, $10, $07, $09, $0e, $03, $f3, $e6, $de, $e6, $e6, $d8, $ca, $bd, $b3
12781     B4 B2 AA A5 
12785     9B 90 8F 8E 
12789     85 81 80 80 
1278d     80 80 80 80 | 	byte	$b4, $b2, $aa, $a5, $9b, $90, $8f, $8e, $85, $81, $80, $80, $80, $80, $80, $80
12791     80 80 80 80 
      ...             
127d1     80 80 80 80 
127d5     80 80 80    | 	byte	$80[71]
127d8     8B 9A A2 9E 
127dc     98 9C A4 B8 
127e0     BF B5 B1 B9 
127e4     C5 CC CE CF | 	byte	$8b, $9a, $a2, $9e, $98, $9c, $a4, $b8, $bf, $b5, $b1, $b9, $c5, $cc, $ce, $cf
127e8     D5 E0 E7 ED 
127ec     F4 F5 F4 F7 
127f0     FF 06 0D 14 
127f4     17 16 17 20 | 	byte	$d5, $e0, $e7, $ed, $f4, $f5, $f4, $f7, $ff, $06, $0d, $14, $17, $16, $17, $20
127f8     29 2D 2C 2A 
127fc     2E 33 38 3B 
12800     3C 43 49 47 
12804     45 48 4C 4C | 	byte	$29, $2d, $2c, $2a, $2e, $33, $38, $3b, $3c, $43, $49, $47, $45, $48, $4c, $4c
12808     4C 54 5B 5C 
1280c     5A 59 5C 5E 
12810     5E 5C 60 61 
12814     61 63 65 65 | 	byte	$4c, $54, $5b, $5c, $5a, $59, $5c, $5e, $5e, $5c, $60, $61, $61, $63, $65, $65
12818     64 66 64 64 
1281c     63 68 6B 69 
12820     62 5F 6A 6B 
12824     63 5F 5C 5D | 	byte	$64, $66, $64, $64, $63, $68, $6b, $69, $62, $5f, $6a, $6b, $63, $5f, $5c, $5d
12828     5E 5D 58 51 
1282c     54 58 53 50 
12830     4A 40 42 46 
12834     48 42 42 3B | 	byte	$5e, $5d, $58, $51, $54, $58, $53, $50, $4a, $40, $42, $46, $48, $42, $42, $3b
12838     2C 33 34 29 
1283c     21 21 22 28 
12840     21 0E 0F 10 
12844     0A 03 00 FF | 	byte	$2c, $33, $34, $29, $21, $21, $22, $28, $21, $0e, $0f, $10, $0a, $03, $00, $ff
12848     FD F9 F3 F0 
1284c     ED EB E9 E3 
12850     DD D5 CE D4 
12854     D4 C8 C1 C3 | 	byte	$fd, $f9, $f3, $f0, $ed, $eb, $e9, $e3, $dd, $d5, $ce, $d4, $d4, $c8, $c1, $c3
12858     C5 BB B7 B8 
1285c     B4 B3 B4 A8 
12860     A7 AA A5 A3 
12864     9F 9A 9D 9B | 	byte	$c5, $bb, $b7, $b8, $b4, $b3, $b4, $a8, $a7, $aa, $a5, $a3, $9f, $9a, $9d, $9b
12868     97 96 92 91 
1286c     94 90 8B 8B 
12870     89 89 89 87 
12874     87 84 85 89 | 	byte	$97, $96, $92, $91, $94, $90, $8b, $8b, $89, $89, $89, $87, $87, $84, $85, $89
12878     87 81 80 82 
1287c     80 80 80 80 
12880     80 80 80 80 
12884     80 80 80 80 | 	byte	$87, $81, $80, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
12888     80 80 80 80 
1288c     80 80 80 80 
12890     80 80 80 80 
12894     80 80 80 80 
12898     80 80 80 80 
1289c     80 80 80    | 	byte	$80[23]
1289f     84 83 80 80 
128a3     80 84 85 83 
128a7     80 85 83 81 
128ab     84 8A 8E 8D | 	byte	$84, $83, $80, $80, $80, $84, $85, $83, $80, $85, $83, $81, $84, $8a, $8e, $8d
128af     89 8E 93 93 
128b3     8E 88 8D 92 
128b7     92 93 93 92 
128bb     97 9D 9C 9B | 	byte	$89, $8e, $93, $93, $8e, $88, $8d, $92, $92, $93, $93, $92, $97, $9d, $9c, $9b
128bf     9E A0 9F 9E 
128c3     9E 9E 9E A2 
128c7     A4 A5 A8 AF 
128cb     AF AC B0 AC | 	byte	$9e, $a0, $9f, $9e, $9e, $9e, $9e, $a2, $a4, $a5, $a8, $af, $af, $ac, $b0, $ac
128cf     A8 AC B5 BA 
128d3     BB BE BD BD 
128d7     BC BD C2 C2 
128db     C5 CA CC CF | 	byte	$a8, $ac, $b5, $ba, $bb, $be, $bd, $bd, $bc, $bd, $c2, $c2, $c5, $ca, $cc, $cf
128df     D0 D1 D3 DA 
128e3     E1 E3 DF DB 
128e7     DE E7 EC EE 
128eb     ED ED F2 FA | 	byte	$d0, $d1, $d3, $da, $e1, $e3, $df, $db, $de, $e7, $ec, $ee, $ed, $ed, $f2, $fa
128ef     FE FD FF 01 
128f3     05 0A 0D 0D 
128f7     0F 12 16 1B 
128fb     1F 1F 1F 23 | 	byte	$fe, $fd, $ff, $01, $05, $0a, $0d, $0d, $0f, $12, $16, $1b, $1f, $1f, $1f, $23
128ff     2B 2F 2F 31 
12903     34 38 3C 3F 
12907     3F 42 49 4D 
1290b     4C 4F 54 55 | 	byte	$2b, $2f, $2f, $31, $34, $38, $3c, $3f, $3f, $42, $49, $4d, $4c, $4f, $54, $55
1290f     59 5B 5C 5D 
12913     5F 63 65 68 
12917     6B 6E 6F 70 
1291b     71 71 74 78 | 	byte	$59, $5b, $5c, $5d, $5f, $63, $65, $68, $6b, $6e, $6f, $70, $71, $71, $74, $78
1291f     77 78 7A 7D 
12923     7B 79 7C 7F 
12927     7F 7F 7F 7E 
1292b     79 78 7F 7F | 	byte	$77, $78, $7a, $7d, $7b, $79, $7c, $7f, $7f, $7f, $7f, $7e, $79, $78, $7f, $7f
1292f     7F 7F 7D 7B 
12933     7A 7B 7E 7B 
12937     7C 7F 7E 7A 
1293b     79 7C 7C 75 | 	byte	$7f, $7f, $7d, $7b, $7a, $7b, $7e, $7b, $7c, $7f, $7e, $7a, $79, $7c, $7c, $75
1293f     71 74 75 71 
12943     68 6A 73 75 
12947     6C 60 64 6B 
1294b     68 61 5C 5A | 	byte	$71, $74, $75, $71, $68, $6a, $73, $75, $6c, $60, $64, $6b, $68, $61, $5c, $5a
1294f     5E 5F 58 52 
12953     51 51 4D 49 
12957     46 44 40 3B 
1295b     3A 38 36 2E | 	byte	$5e, $5f, $58, $52, $51, $51, $4d, $49, $46, $44, $40, $3b, $3a, $38, $36, $2e
1295f     27 26 25 20 
12963     1A 15 13 10 
12967     0B 06 FF FA 
1296b     F6 F2 EF E8 | 	byte	$27, $26, $25, $20, $1a, $15, $13, $10, $0b, $06, $ff, $fa, $f6, $f2, $ef, $e8
1296f     E3 DC D8 D8 
12973     D4 CB C3 BF 
12977     B9 B4 B5 B2 
1297b     AC A7 A1 9B | 	byte	$e3, $dc, $d8, $d8, $d4, $cb, $c3, $bf, $b9, $b4, $b5, $b2, $ac, $a7, $a1, $9b
1297f     95 91 90 8E 
12983     8B 88 82 80 
12987     80 80 80 80 
1298b     80 80 80 80 | 	byte	$95, $91, $90, $8e, $8b, $88, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80
1298f     80 80 80 80 
      ...             
129b3     80 80 80 80 
129b7     80 80 80 80 | 	byte	$80[44]
129bb     81 85 85 85 
129bf     87 88 88 8C 
129c3     8F 8D 8F 91 
129c7     92 96 99 9B | 	byte	$81, $85, $85, $85, $87, $88, $88, $8c, $8f, $8d, $8f, $91, $92, $96, $99, $9b
129cb     9C 9E A1 A6 
129cf     A7 A5 A4 A6 
129d3     AC B9 BE BA 
129d7     B9 B6 B7 BF | 	byte	$9c, $9e, $a1, $a6, $a7, $a5, $a4, $a6, $ac, $b9, $be, $ba, $b9, $b6, $b7, $bf
129db     CA CF CE D1 
129df     D8 DB DC DF 
129e3     E9 ED EC EF 
129e7     F4 F6 F8 FE | 	byte	$ca, $cf, $ce, $d1, $d8, $db, $dc, $df, $e9, $ed, $ec, $ef, $f4, $f6, $f8, $fe
129eb     06 0A 0C 0C 
129ef     10 16 19 1C 
129f3     1F 23 28 2B 
129f7     2D 30 33 38 | 	byte	$06, $0a, $0c, $0c, $10, $16, $19, $1c, $1f, $23, $28, $2b, $2d, $30, $33, $38
129fb     3D 3D 3D 42 
129ff     47 46 47 4C 
12a03     4F 51 52 53 
12a07     55 58 5B 5E | 	byte	$3d, $3d, $3d, $42, $47, $46, $47, $4c, $4f, $51, $52, $53, $55, $58, $5b, $5e
12a0b     5E 5E 61 63 
12a0f     64 65 68 6A 
12a13     69 68 68 69 
12a17     6D 6E 70 72 | 	byte	$5e, $5e, $61, $63, $64, $65, $68, $6a, $69, $68, $68, $69, $6d, $6e, $70, $72
12a1b     70 6D 6E 71 
12a1f     73 71 73 74 
12a23     73 73 6F 6C 
12a27     6D 6D 6C 6F | 	byte	$70, $6d, $6e, $71, $73, $71, $73, $74, $73, $73, $6f, $6c, $6d, $6d, $6c, $6f
12a2b     71 6D 6B 6C 
12a2f     6D 6A 66 66 
12a33     66 60 5F 64 
12a37     67 66 5F 59 | 	byte	$71, $6d, $6b, $6c, $6d, $6a, $66, $66, $66, $60, $5f, $64, $67, $66, $5f, $59
12a3b     58 58 57 53 
12a3f     51 54 56 55 
12a43     50 4A 47 49 
12a47     4B 49 43 3F | 	byte	$58, $58, $57, $53, $51, $54, $56, $55, $50, $4a, $47, $49, $4b, $49, $43, $3f
12a4b     3E 3B 3A 3C 
12a4f     3B 34 34 37 
12a53     34 31 2F 2B 
12a57     27 28 28 26 | 	byte	$3e, $3b, $3a, $3c, $3b, $34, $34, $37, $34, $31, $2f, $2b, $27, $28, $28, $26
12a5b     21 1D 1B 1C 
12a5f     1D 1A 13 0E 
12a63     11 14 0E 08 
12a67     06 05 06 04 | 	byte	$21, $1d, $1b, $1c, $1d, $1a, $13, $0e, $11, $14, $0e, $08, $06, $05, $06, $04
12a6b     FC F8 FB FB 
12a6f     F7 F5 F5 F2 
12a73     F1 F0 EC EA 
12a77     E9 E8 E8 E7 | 	byte	$fc, $f8, $fb, $fb, $f7, $f5, $f5, $f2, $f1, $f0, $ec, $ea, $e9, $e8, $e8, $e7
12a7b     E7 E5 E1 E2 
12a7f     E3 DF DE E2 
12a83     E4 DF DD E0 
12a87     DE D7 D8 E4 | 	byte	$e7, $e5, $e1, $e2, $e3, $df, $de, $e2, $e4, $df, $dd, $e0, $de, $d7, $d8, $e4
12a8b     E8 E2 DF DD 
12a8f     D7 D4 DD ED 
12a93     F1 E6 DD E0 
12a97     E5 E6 E7 E4 | 	byte	$e8, $e2, $df, $dd, $d7, $d4, $dd, $ed, $f1, $e6, $dd, $e0, $e5, $e6, $e7, $e4
12a9b     E4 EC F2 EE 
12a9f     EA ED F1 F2 
12aa3     F2 F0 F1 F5 
12aa7     F2 EF F4 F8 | 	byte	$e4, $ec, $f2, $ee, $ea, $ed, $f1, $f2, $f2, $f0, $f1, $f5, $f2, $ef, $f4, $f8
12aab     F5 F3 F6 FA 
12aaf     F9 F9 F8 F5 
12ab3     F3 F7 F9 F7 
12ab7     F7 F9 F9 F6 | 	byte	$f5, $f3, $f6, $fa, $f9, $f9, $f8, $f5, $f3, $f7, $f9, $f7, $f7, $f9, $f9, $f6
12abb     F3 F3 F4 F4 
12abf     F7 F8 F5 F4 
12ac3     F6 F6 F3 F4 
12ac7     F4 F6 F9 FA | 	byte	$f3, $f3, $f4, $f4, $f7, $f8, $f5, $f4, $f6, $f6, $f3, $f4, $f4, $f6, $f9, $fa
12acb     F5 F4 F7 F9 
12acf     F5 F3 F6 F5 
12ad3     EF F0 F7 01 
12ad7     02 F5 ED F2 | 	byte	$f5, $f4, $f7, $f9, $f5, $f3, $f6, $f5, $ef, $f0, $f7, $01, $02, $f5, $ed, $f2
12adb     F3 F2 F9 FE 
12adf     01 01 F9 F4 
12ae3     F6 F9 FB FB 
12ae7     FC FC FD F8 | 	byte	$f3, $f2, $f9, $fe, $01, $01, $f9, $f4, $f6, $f9, $fb, $fb, $fc, $fc, $fd, $f8
12aeb     F0 F4 01 02 
12aef     F7 F2 F9 00 
12af3     FD F2 F0 FB 
12af7     03 03 FF FE | 	byte	$f0, $f4, $01, $02, $f7, $f2, $f9, $00, $fd, $f2, $f0, $fb, $03, $03, $ff, $fe
12afb     03 05 00 FC 
12aff     FE 05 06 00 
12b03     00 07 0A 07 
12b07     04 03 05 08 | 	byte	$03, $05, $00, $fc, $fe, $05, $06, $00, $00, $07, $0a, $07, $04, $03, $05, $08
12b0b     06 03 06 07 
12b0f     05 04 06 06 
12b13     06 06 02 01 
12b17     03 04 07 0C | 	byte	$06, $03, $06, $07, $05, $04, $06, $06, $06, $06, $02, $01, $03, $04, $07, $0c
12b1b     0B 06 07 09 
12b1f     08 0B 0E 0C 
12b23     0C 0E 0D 0D 
12b27     0D 0B 10 12 | 	byte	$0b, $06, $07, $09, $08, $0b, $0e, $0c, $0c, $0e, $0d, $0d, $0d, $0b, $10, $12
12b2b     0E 10 18 18 
12b2f     15 16 1A 1D 
12b33     1D 18 15 16 
12b37     1A 1E 24 28 | 	byte	$0e, $10, $18, $18, $15, $16, $1a, $1d, $1d, $18, $15, $16, $1a, $1e, $24, $28
12b3b     25 1D 1C 23 
12b3f     24 23 26 28 
12b43     2D 35 37 33 
12b47     32 32 32 35 | 	byte	$25, $1d, $1c, $23, $24, $23, $26, $28, $2d, $35, $37, $33, $32, $32, $32, $35
12b4b     37 37 38 3A 
12b4f     3D 3F 3B 38 
12b53     3A 3E 42 41 
12b57     3C 38 3D 41 | 	byte	$37, $37, $38, $3a, $3d, $3f, $3b, $38, $3a, $3e, $42, $41, $3c, $38, $3d, $41
12b5b     3E 3B 3A 39 
12b5f     3B 3D 39 33 
12b63     34 36 34 34 
12b67     33 32 32 33 | 	byte	$3e, $3b, $3a, $39, $3b, $3d, $39, $33, $34, $36, $34, $34, $33, $32, $32, $33
12b6b     31 2E 2D 2E 
12b6f     2F 31 32 2F 
12b73     2D 2E 2F 30 
12b77     2D 2A 2A 2B | 	byte	$31, $2e, $2d, $2e, $2f, $31, $32, $2f, $2d, $2e, $2f, $30, $2d, $2a, $2a, $2b
12b7b     2C 2F 30 31 
12b7f     2F 2A 26 2A 
12b83     31 32 2D 2D 
12b87     31 2E 28 29 | 	byte	$2c, $2f, $30, $31, $2f, $2a, $26, $2a, $31, $32, $2d, $2d, $31, $2e, $28, $29
12b8b     2C 2B 2C 2C 
12b8f     2C 2C 2E 2F 
12b93     2C 28 26 27 
12b97     2C 2D 2A 2A | 	byte	$2c, $2b, $2c, $2c, $2c, $2c, $2e, $2f, $2c, $28, $26, $27, $2c, $2d, $2a, $2a
12b9b     27 25 29 28 
12b9f     25 24 27 28 
12ba3     25 20 1F 23 
12ba7     24 22 21 20 | 	byte	$27, $25, $29, $28, $25, $24, $27, $28, $25, $20, $1f, $23, $24, $22, $21, $20
12bab     1D 19 1B 1E 
12baf     20 1E 1A 17 
12bb3     16 18 19 15 
12bb7     12 16 18 14 | 	byte	$1d, $19, $1b, $1e, $20, $1e, $1a, $17, $16, $18, $19, $15, $12, $16, $18, $14
12bbb     11 13 15 15 
12bbf     14 12 12 13 
12bc3     13 12 14 15 
12bc7     13 11 10 10 | 	byte	$11, $13, $15, $15, $14, $12, $12, $13, $13, $12, $14, $15, $13, $11, $10, $10
12bcb     13 13 11 11 
12bcf     10 0F 0D 0E 
12bd3     0F 12 14 13 
12bd7     10 0C 0A 0E | 	byte	$13, $13, $11, $11, $10, $0f, $0d, $0e, $0f, $12, $14, $13, $10, $0c, $0a, $0e
12bdb     12 10 11 14 
12bdf     11 0C 09 0A 
12be3     0D 12 14 12 
12be7     11 10 0D 0E | 	byte	$12, $10, $11, $14, $11, $0c, $09, $0a, $0d, $12, $14, $12, $11, $10, $0d, $0e
12beb     11 0E 10 16 
12bef     17 13 11 13 
12bf3     1B 20 1E 1B 
12bf7     18 1B 27 2B | 	byte	$11, $0e, $10, $16, $17, $13, $11, $13, $1b, $20, $1e, $1b, $18, $1b, $27, $2b
12bfb     28 27 2C 30 
12bff     2F 2C 2B 2F 
12c03     32 2F 31 3B 
12c07     3F 39 35 37 | 	byte	$28, $27, $2c, $30, $2f, $2c, $2b, $2f, $32, $2f, $31, $3b, $3f, $39, $35, $37
12c0b     3F 45 42 3D 
12c0f     3C 44 4C 48 
12c13     42 46 4D 4C 
12c17     49 48 4C 53 | 	byte	$3f, $45, $42, $3d, $3c, $44, $4c, $48, $42, $46, $4d, $4c, $49, $48, $4c, $53
12c1b     55 50 4C 4F 
12c1f     54 57 59 55 
12c23     51 53 57 5A 
12c27     5A 54 56 5B | 	byte	$55, $50, $4c, $4f, $54, $57, $59, $55, $51, $53, $57, $5a, $5a, $54, $56, $5b
12c2b     5C 58 57 57 
12c2f     56 55 56 5A 
12c33     59 53 52 4F 
12c37     47 48 57 60 | 	byte	$5c, $58, $57, $57, $56, $55, $56, $5a, $59, $53, $52, $4f, $47, $48, $57, $60
12c3b     58 45 3F 48 
12c3f     4B 4A 46 3F 
12c43     41 4B 49 3B 
12c47     39 43 3E 31 | 	byte	$58, $45, $3f, $48, $4b, $4a, $46, $3f, $41, $4b, $49, $3b, $39, $43, $3e, $31
12c4b     30 32 32 2E 
12c4f     29 2A 2F 2A 
12c53     1F 1B 22 26 
12c57     20 19 17 14 | 	byte	$30, $32, $32, $2e, $29, $2a, $2f, $2a, $1f, $1b, $22, $26, $20, $19, $17, $14
12c5b     15 17 12 0A 
12c5f     0A 0B 06 03 
12c63     06 05 FD FB 
12c67     00 FE F9 F6 | 	byte	$15, $17, $12, $0a, $0a, $0b, $06, $03, $06, $05, $fd, $fb, $00, $fe, $f9, $f6
12c6b     F6 F7 F5 F5 
12c6f     F4 F4 F7 F4 
12c73     ED EF F2 F2 
12c77     F1 EF EE EE | 	byte	$f6, $f7, $f5, $f5, $f4, $f4, $f7, $f4, $ed, $ef, $f2, $f2, $f1, $ef, $ee, $ee
12c7b     F0 F0 F0 F7 
12c7f     F9 F0 EC F1 
12c83     F3 F2 F8 FD 
12c87     FB F8 F9 F6 | 	byte	$f0, $f0, $f0, $f7, $f9, $f0, $ec, $f1, $f3, $f2, $f8, $fd, $fb, $f8, $f9, $f6
12c8b     F1 F5 01 07 
12c8f     06 06 04 02 
12c93     02 04 09 0A 
12c97     0C 10 14 19 | 	byte	$f1, $f5, $01, $07, $06, $06, $04, $02, $02, $04, $09, $0a, $0c, $10, $14, $19
12c9b     19 10 0D 14 
12c9f     1C 22 26 27 
12ca3     29 2B 2D 2E 
12ca7     2E 30 33 31 | 	byte	$19, $10, $0d, $14, $1c, $22, $26, $27, $29, $2b, $2d, $2e, $2e, $30, $33, $31
12cab     31 37 3E 42 
12caf     42 42 41 43 
12cb3     46 46 45 44 
12cb7     48 4D 4D 4B | 	byte	$31, $37, $3e, $42, $42, $42, $41, $43, $46, $46, $45, $44, $48, $4d, $4d, $4b
12cbb     4A 4D 4F 50 
12cbf     4F 4F 54 55 
12cc3     53 54 58 59 
12cc7     59 59 56 54 | 	byte	$4a, $4d, $4f, $50, $4f, $4f, $54, $55, $53, $54, $58, $59, $59, $59, $56, $54
12ccb     58 5B 59 5A 
12ccf     5A 57 57 56 
12cd3     54 58 5C 59 
12cd7     53 4E 4F 51 | 	byte	$58, $5b, $59, $5a, $5a, $57, $57, $56, $54, $58, $5c, $59, $53, $4e, $4f, $51
12cdb     53 52 4F 4F 
12cdf     4F 4D 4A 49 
12ce3     4A 49 48 49 
12ce7     47 41 3A 39 | 	byte	$53, $52, $4f, $4f, $4f, $4d, $4a, $49, $4a, $49, $48, $49, $47, $41, $3a, $39
12ceb     3F 43 40 3E 
12cef     3F 3A 36 37 
12cf3     36 37 37 35 
12cf7     34 31 30 30 | 	byte	$3f, $43, $40, $3e, $3f, $3a, $36, $37, $36, $37, $37, $35, $34, $31, $30, $30
12cfb     2E 2C 2C 2B 
12cff     2A 29 28 27 
12d03     27 28 27 26 
12d07     26 22 1D 1D | 	byte	$2e, $2c, $2c, $2b, $2a, $29, $28, $27, $27, $28, $27, $26, $26, $22, $1d, $1d
12d0b     21 20 1C 1B 
12d0f     1C 1E 1F 1C 
12d13     17 18 1D 1D 
12d17     19 16 16 1A | 	byte	$21, $20, $1c, $1b, $1c, $1e, $1f, $1c, $17, $18, $1d, $1d, $19, $16, $16, $1a
12d1b     1D 1B 18 18 
12d1f     18 16 16 17 
12d23     16 17 1A 18 
12d27     17 16 15 15 | 	byte	$1d, $1b, $18, $18, $18, $16, $16, $17, $16, $17, $1a, $18, $17, $16, $15, $15
12d2b     17 17 15 15 
12d2f     16 16 16 17 
12d33     18 16 15 19 
12d37     1A 14 14 19 | 	byte	$17, $17, $15, $15, $16, $16, $16, $17, $18, $16, $15, $19, $1a, $14, $14, $19
12d3b     19 15 15 1A 
12d3f     1C 18 18 1B 
12d43     1C 1C 1C 17 
12d47     15 1B 20 1B | 	byte	$19, $15, $15, $1a, $1c, $18, $18, $1b, $1c, $1c, $1c, $17, $15, $1b, $20, $1b
12d4b     16 1B 20 1F 
12d4f     1C 1B 1E 20 
12d53     1C 18 1C 25 
12d57     25 1C 1A 1F | 	byte	$16, $1b, $20, $1f, $1c, $1b, $1e, $20, $1c, $18, $1c, $25, $25, $1c, $1a, $1f
12d5b     25 25 20 1B 
12d5f     1A 1E 21 1D 
12d63     1F 26 27 22 
12d67     20 22 25 23 | 	byte	$25, $25, $20, $1b, $1a, $1e, $21, $1d, $1f, $26, $27, $22, $20, $22, $25, $23
12d6b     20 22 23 25 
12d6f     25 23 22 26 
12d73     27 24 23 25 
12d77     26 26 25 23 | 	byte	$20, $22, $23, $25, $25, $23, $22, $26, $27, $24, $23, $25, $26, $26, $25, $23
12d7b     22 25 27 26 
12d7f     23 22 20 21 
12d83     25 23 20 1F 
12d87     1F 1C 1B 1F | 	byte	$22, $25, $27, $26, $23, $22, $20, $21, $25, $23, $20, $1f, $1f, $1c, $1b, $1f
12d8b     20 1F 20 20 
12d8f     1D 1A 19 19 
12d93     19 19 1C 1C 
12d97     18 19 1B 1A | 	byte	$20, $1f, $20, $20, $1d, $1a, $19, $19, $19, $19, $1c, $1c, $18, $19, $1b, $1a
12d9b     1E 21 1D 18 
12d9f     18 1B 1E 20 
12da3     21 1E 1C 21 
12da7     25 20 1D 1F | 	byte	$1e, $21, $1d, $18, $18, $1b, $1e, $20, $21, $1e, $1c, $21, $25, $20, $1d, $1f
12dab     21 20 22 27 
12daf     28 27 28 2A 
12db3     2C 2E 2D 2C 
12db7     2E 35 38 35 | 	byte	$21, $20, $22, $27, $28, $27, $28, $2a, $2c, $2e, $2d, $2c, $2e, $35, $38, $35
12dbb     33 34 37 3B 
12dbf     3D 3C 3B 3F 
12dc3     40 40 44 46 
12dc7     43 43 47 49 | 	byte	$33, $34, $37, $3b, $3d, $3c, $3b, $3f, $40, $40, $44, $46, $43, $43, $47, $49
12dcb     48 49 49 48 
12dcf     49 4A 49 4C 
12dd3     4E 4E 4C 49 
12dd7     49 48 49 4B | 	byte	$48, $49, $49, $48, $49, $4a, $49, $4c, $4e, $4e, $4c, $49, $49, $48, $49, $4b
12ddb     49 47 47 47 
12ddf     48 49 48 45 
12de3     43 43 43 44 
12de7     44 44 41 3D | 	byte	$49, $47, $47, $47, $48, $49, $48, $45, $43, $43, $43, $44, $44, $44, $41, $3d
12deb     3D 40 3D 38 
12def     3C 40 3A 33 
12df3     32 32 33 34 
12df7     32 30 2E 2D | 	byte	$3d, $40, $3d, $38, $3c, $40, $3a, $33, $32, $32, $33, $34, $32, $30, $2e, $2d
12dfb     2D 2B 27 24 
12dff     24 27 29 26 
12e03     22 1F 1D 1C 
12e07     18 15 13 12 | 	byte	$2d, $2b, $27, $24, $24, $27, $29, $26, $22, $1f, $1d, $1c, $18, $15, $13, $12
12e0b     17 17 11 0C 
12e0f     0E 0F 0B 07 
12e13     04 03 06 07 
12e17     04 00 01 02 | 	byte	$17, $17, $11, $0c, $0e, $0f, $0b, $07, $04, $03, $06, $07, $04, $00, $01, $02
12e1b     00 FE FC FC 
12e1f     FC FB FA F9 
12e23     F8 F8 F7 F5 
12e27     F4 F3 F2 F1 | 	byte	$00, $fe, $fc, $fc, $fc, $fb, $fa, $f9, $f8, $f8, $f7, $f5, $f4, $f3, $f2, $f1
12e2b     F0 EF ED EF 
12e2f     F0 EE EC EB 
12e33     EA EB ED F0 
12e37     F1 EE E8 E7 | 	byte	$f0, $ef, $ed, $ef, $f0, $ee, $ec, $eb, $ea, $eb, $ed, $f0, $f1, $ee, $e8, $e7
12e3b     EB ED EF F2 
12e3f     F4 F1 EE EE 
12e43     F0 EF EF F1 
12e47     F2 F5 F9 F7 | 	byte	$eb, $ed, $ef, $f2, $f4, $f1, $ee, $ee, $f0, $ef, $ef, $f1, $f2, $f5, $f9, $f7
12e4b     F4 F7 00 02 
12e4f     FC FA FB FF 
12e53     01 02 05 07 
12e57     08 06 06 09 | 	byte	$f4, $f7, $00, $02, $fc, $fa, $fb, $ff, $01, $02, $05, $07, $08, $06, $06, $09
12e5b     0C 0C 0C 0B 
12e5f     0D 12 14 13 
12e63     12 13 16 16 
12e67     15 16 19 1B | 	byte	$0c, $0c, $0c, $0b, $0d, $12, $14, $13, $12, $13, $16, $16, $15, $16, $19, $1b
12e6b     1B 1C 1E 1E 
12e6f     1E 20 21 22 
12e73     22 22 22 23 
12e77     26 26 26 26 | 	byte	$1b, $1c, $1e, $1e, $1e, $20, $21, $22, $22, $22, $22, $23, $26, $26, $26, $26
12e7b     27 29 2A 29 
12e7f     27 27 28 29 
12e83     2D 31 2E 2A 
12e87     29 2D 2F 33 | 	byte	$27, $29, $2a, $29, $27, $27, $28, $29, $2d, $31, $2e, $2a, $29, $2d, $2f, $33
12e8b     35 32 31 33 
12e8f     33 30 30 35 
12e93     36 35 35 36 
12e97     37 37 38 39 | 	byte	$35, $32, $31, $33, $33, $30, $30, $35, $36, $35, $35, $36, $37, $37, $38, $39
12e9b     39 3C 3C 39 
12e9f     3B 3E 3E 3C 
12ea3     3D 3E 3D 3D 
12ea7     3F 3E 3D 40 | 	byte	$39, $3c, $3c, $39, $3b, $3e, $3e, $3c, $3d, $3e, $3d, $3d, $3f, $3e, $3d, $40
12eab     42 41 42 44 
12eaf     45 44 42 43 
12eb3     46 46 44 43 
12eb7     44 47 49 45 | 	byte	$42, $41, $42, $44, $45, $44, $42, $43, $46, $46, $44, $43, $44, $47, $49, $45
12ebb     40 42 45 46 
12ebf     44 41 41 43 
12ec3     44 44 42 42 
12ec7     41 3D 3B 3C | 	byte	$40, $42, $45, $46, $44, $41, $41, $43, $44, $44, $42, $42, $41, $3d, $3b, $3c
12ecb     3C 3B 3A 39 
12ecf     3A 3A 38 35 
12ed3     33 32 32 30 
12ed7     2F 30 30 2F | 	byte	$3c, $3b, $3a, $39, $3a, $3a, $38, $35, $33, $32, $32, $30, $2f, $30, $30, $2f
12edb     2C 29 28 29 
12edf     28 25 22 21 
12ee3     22 23 23 21 
12ee7     1D 1C 1B 1A | 	byte	$2c, $29, $28, $29, $28, $25, $22, $21, $22, $23, $23, $21, $1d, $1c, $1b, $1a
12eeb     19 1A 1B 17 
12eef     14 15 14 0E 
12ef3     0E 11 11 0F 
12ef7     0E 0C 0A 09 | 	byte	$19, $1a, $1b, $17, $14, $15, $14, $0e, $0e, $11, $11, $0f, $0e, $0c, $0a, $09
12efb     09 08 07 06 
12eff     02 FE FF 03 
12f03     01 FD FB FB 
12f07     FA F9 F8 F6 | 	byte	$09, $08, $07, $06, $02, $fe, $ff, $03, $01, $fd, $fb, $fb, $fa, $f9, $f8, $f6
12f0b     F4 F6 F6 F2 
12f0f     F2 F4 F3 EE 
12f13     EB EB EC EC 
12f17     EA E7 E7 E8 | 	byte	$f4, $f6, $f6, $f2, $f2, $f4, $f3, $ee, $eb, $eb, $ec, $ec, $ea, $e7, $e7, $e8
12f1b     E7 E4 E1 E2 
12f1f     E2 E2 E0 DE 
12f23     DD DD DE DD 
12f27     DB DA D9 D9 | 	byte	$e7, $e4, $e1, $e2, $e2, $e2, $e0, $de, $dd, $dd, $de, $dd, $db, $da, $d9, $d9
12f2b     DB D9 D6 D4 
12f2f     D6 D8 D9 D8 
12f33     D6 D6 D8 D8 
12f37     D6 D5 D6 D8 | 	byte	$db, $d9, $d6, $d4, $d6, $d8, $d9, $d8, $d6, $d6, $d8, $d8, $d6, $d5, $d6, $d8
12f3b     D9 DA DB DA 
12f3f     DB DB DB DB 
12f43     DD DF DF E0 
12f47     E2 E3 E4 E5 | 	byte	$d9, $da, $db, $da, $db, $db, $db, $db, $dd, $df, $df, $e0, $e2, $e3, $e4, $e5
12f4b     E4 E3 E7 ED 
12f4f     EE EB EB EF 
12f53     F1 F1 F2 F5 
12f57     F7 F9 FA FC | 	byte	$e4, $e3, $e7, $ed, $ee, $eb, $eb, $ef, $f1, $f1, $f2, $f5, $f7, $f9, $fa, $fc
12f5b     FE FF 00 02 
12f5f     04 06 09 0C 
12f63     0D 0C 0D 10 
12f67     12 15 17 19 | 	byte	$fe, $ff, $00, $02, $04, $06, $09, $0c, $0d, $0c, $0d, $10, $12, $15, $17, $19
12f6b     1C 1F 22 23 
12f6f     22 23 26 2A 
12f73     2C 2C 2D 30 
12f77     33 36 36 36 | 	byte	$1c, $1f, $22, $23, $22, $23, $26, $2a, $2c, $2c, $2d, $30, $33, $36, $36, $36
12f7b     38 3A 3B 3C 
12f7f     3D 3F 42 43 
12f83     43 44 46 45 
12f87     46 49 4B 4B | 	byte	$38, $3a, $3b, $3c, $3d, $3f, $42, $43, $43, $44, $46, $45, $46, $49, $4b, $4b
12f8b     4C 4C 4C 4D 
12f8f     50 51 51 53 
12f93     54 54 52 53 
12f97     55 55 54 55 | 	byte	$4c, $4c, $4c, $4d, $50, $51, $51, $53, $54, $54, $52, $53, $55, $55, $54, $55
12f9b     55 55 55 54 
12f9f     54 55 55 54 
12fa3     53 53 54 53 
12fa7     50 50 50 4E | 	byte	$55, $55, $55, $54, $54, $55, $55, $54, $53, $53, $54, $53, $50, $50, $50, $4e
12fab     4E 4E 4B 49 
12faf     4A 48 45 43 
12fb3     44 44 44 42 
12fb7     3F 3E 3C 3B | 	byte	$4e, $4e, $4b, $49, $4a, $48, $45, $43, $44, $44, $44, $42, $3f, $3e, $3c, $3b
12fbb     39 37 38 38 
12fbf     35 34 33 32 
12fc3     32 30 2D 2C 
12fc7     2E 2D 2A 28 | 	byte	$39, $37, $38, $38, $35, $34, $33, $32, $32, $30, $2d, $2c, $2e, $2d, $2a, $28
12fcb     27 26 25 24 
12fcf     22 20 1E 1C 
12fd3     1C 1A 19 17 
12fd7     16 15 15 14 | 	byte	$27, $26, $25, $24, $22, $20, $1e, $1c, $1c, $1a, $19, $17, $16, $15, $15, $14
12fdb     11 0F 0E 0E 
12fdf     0D 0B 08 05 
12fe3     06 07 06 04 
12fe7     05 03 FE FB | 	byte	$11, $0f, $0e, $0e, $0d, $0b, $08, $05, $06, $07, $06, $04, $05, $03, $fe, $fb
12feb     F9 FB FE FD 
12fef     FA F9 F8 F7 
12ff3     F5 F3 F2 F2 
12ff7     F1 F0 EF F0 | 	byte	$f9, $fb, $fe, $fd, $fa, $f9, $f8, $f7, $f5, $f3, $f2, $f2, $f1, $f0, $ef, $f0
12ffb     EF ED EB EB 
12fff     ED ED E9 E8 
13003     EA EB EA E8 
13007     E7 E8 E9 E9 | 	byte	$ef, $ed, $eb, $eb, $ed, $ed, $e9, $e8, $ea, $eb, $ea, $e8, $e7, $e8, $e9, $e9
1300b     E8 E6 E7 E8 
1300f     E7 E6 E6 E6 
13013     E5 E7 E9 EA 
13017     E8 E7 E8 EB | 	byte	$e8, $e6, $e7, $e8, $e7, $e6, $e6, $e6, $e5, $e7, $e9, $ea, $e8, $e7, $e8, $eb
1301b     EB E9 E9 EB 
1301f     EE EE ED EC 
13023     EE F0 F1 F0 
13027     EF EF F1 F3 | 	byte	$eb, $e9, $e9, $eb, $ee, $ee, $ed, $ec, $ee, $f0, $f1, $f0, $ef, $ef, $f1, $f3
1302b     F3 F6 F8 F7 
1302f     F6 F8 FA FA 
13033     FB FC FD FD 
13037     FD FD FF 02 | 	byte	$f3, $f6, $f8, $f7, $f6, $f8, $fa, $fa, $fb, $fc, $fd, $fd, $fd, $fd, $ff, $02
1303b     05 07 04 03 
1303f     05 07 08 08 
13043     09 0B 0C 0C 
13047     0D 0E 0D 0D | 	byte	$05, $07, $04, $03, $05, $07, $08, $08, $09, $0b, $0c, $0c, $0d, $0e, $0d, $0d
1304b     0F 12 13 13 
1304f     12 11 11 14 
13053     16 15 15 17 
13057     18 17 16 17 | 	byte	$0f, $12, $13, $13, $12, $11, $11, $14, $16, $15, $15, $17, $18, $17, $16, $17
1305b     18 19 18 19 
1305f     1A 1A 1B 1B 
13063     1D 1E 1E 1D 
13067     1E 1F 20 20 | 	byte	$18, $19, $18, $19, $1a, $1a, $1b, $1b, $1d, $1e, $1e, $1d, $1e, $1f, $20, $20
1306b     21 23 23 23 
1306f     24 24 24 25 
13073     26 25 25 27 
13077     29 29 29 2A | 	byte	$21, $23, $23, $23, $24, $24, $24, $25, $26, $25, $25, $27, $29, $29, $29, $2a
1307b     2B 2C 2B 2B 
1307f     2A 2C 2E 2F 
13083     30 2F 2E 2E 
13087     30 32 32 31 | 	byte	$2b, $2c, $2b, $2b, $2a, $2c, $2e, $2f, $30, $2f, $2e, $2e, $30, $32, $32, $31
1308b     30 31 33 33 
1308f     33 34 34 35 
13093     34 34 33 33 
13097     34 35 35 35 | 	byte	$30, $31, $33, $33, $33, $34, $34, $35, $34, $34, $33, $33, $34, $35, $35, $35
1309b     35 35 34 33 
1309f     33 34 33 32 
130a3     32 31 31 30 
130a7     2F 2F 30 2F | 	byte	$35, $35, $34, $33, $33, $34, $33, $32, $32, $31, $31, $30, $2f, $2f, $30, $2f
130ab     2D 2D 2D 2C 
130af     2D 2D 2C 29 
130b3     28 28 28 27 
130b7     26 26 25 24 | 	byte	$2d, $2d, $2d, $2c, $2d, $2d, $2c, $29, $28, $28, $28, $27, $26, $26, $25, $24
130bb     23 22 21 20 
130bf     1E 1C 1C 1B 
130c3     1A 19 17 14 
130c7     12 13 14 12 | 	byte	$23, $22, $21, $20, $1e, $1c, $1c, $1b, $1a, $19, $17, $14, $12, $13, $14, $12
130cb     10 0D 0B 0B 
130cf     0A 08 06 04 
130d3     04 04 03 00 
130d7     FF FE FE FD | 	byte	$10, $0d, $0b, $0b, $0a, $08, $06, $04, $04, $04, $03, $00, $ff, $fe, $fe, $fd
130db     FA F9 F9 F9 
130df     F8 F7 F5 F4 
130e3     F4 F4 F4 F2 
130e7     F1 F1 F0 EF | 	byte	$fa, $f9, $f9, $f9, $f8, $f7, $f5, $f4, $f4, $f4, $f4, $f2, $f1, $f1, $f0, $ef
130eb     F0 F0 F0 EF 
130ef     ED ED ED EC 
130f3     EB EA EB EC 
130f7     EC EB EB EB | 	byte	$f0, $f0, $f0, $ef, $ed, $ed, $ed, $ec, $eb, $ea, $eb, $ec, $ec, $eb, $eb, $eb
130fb     EB EC EB EA 
130ff     EB EC EC EB 
13103     EC ED ED EB 
13107     EB EC ED ED | 	byte	$eb, $ec, $eb, $ea, $eb, $ec, $ec, $eb, $ec, $ed, $ed, $eb, $eb, $ec, $ed, $ed
1310b     ED EC EC EE 
1310f     EF EF EF F0 
13113     EF EF F0 F2 
13117     F2 F0 F1 F2 | 	byte	$ed, $ec, $ec, $ee, $ef, $ef, $ef, $f0, $ef, $ef, $f0, $f2, $f2, $f0, $f1, $f2
1311b     F3 F3 F4 F4 
1311f     F5 F6 F5 F5 
13123     F7 F7 F7 F8 
13127     F8 F9 F9 FB | 	byte	$f3, $f3, $f4, $f4, $f5, $f6, $f5, $f5, $f7, $f7, $f7, $f8, $f8, $f9, $f9, $fb
1312b     FB FB FB FC 
1312f     FC FD FE FF 
13133     FF 00 01 01 
13137     02 03 05 06 | 	byte	$fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $ff, $00, $01, $01, $02, $03, $05, $06
1313b     06 07 06 06 
1313f     07 0A 0B 0B 
13143     0B 0C 0D 0E 
13147     0E 0E 0F 10 | 	byte	$06, $07, $06, $06, $07, $0a, $0b, $0b, $0b, $0c, $0d, $0e, $0e, $0e, $0f, $10
1314b     0F 10 12 14 
1314f     15 14 13 14 
13153     15 16 16 17 
13157     18 19 19 1A | 	byte	$0f, $10, $12, $14, $15, $14, $13, $14, $15, $16, $16, $17, $18, $19, $19, $1a
1315b     1B 1C 1C 1C 
1315f     1C 1D 1E 1F 
13163     1E 1E 20 21 
13167     21 20 20 22 | 	byte	$1b, $1c, $1c, $1c, $1c, $1d, $1e, $1f, $1e, $1e, $20, $21, $21, $20, $20, $22
1316b     23 23 23 23 
1316f     23          | 	byte	$23[5]
13170     25 25 24 25 
13174     26 26 26 27 
13178     26 26 25 26 
1317c     27 27 26 26 | 	byte	$25, $25, $24, $25, $26, $26, $26, $27, $26, $26, $25, $26, $27, $27, $26, $26
13180     28 29 28 26 
13184     26 26 27 28 
13188     27 27 27 27 
1318c     27 28 27 27 | 	byte	$28, $29, $28, $26, $26, $26, $27, $28, $27, $27, $27, $27, $27, $28, $27, $27
13190     25 24 24 25 
13194     25 25 24 24 
13198     23 23 22 22 
1319c     22 22 21 20 | 	byte	$25, $24, $24, $25, $25, $25, $24, $24, $23, $23, $22, $22, $22, $22, $21, $20
131a0     1E 1F 20 1F 
131a4     1F 1E 1E 1D 
131a8     1C 1C 1C 1B 
131ac     1A 1B 1B 1A | 	byte	$1e, $1f, $20, $1f, $1f, $1e, $1e, $1d, $1c, $1c, $1c, $1b, $1a, $1b, $1b, $1a
131b0     18 17 18 18 
131b4     18 17 16 15 
131b8     16 15 14 13 
131bc     13 14 13 12 | 	byte	$18, $17, $18, $18, $18, $17, $16, $15, $16, $15, $14, $13, $13, $14, $13, $12
131c0     11 11 11 11 
131c4     10 10 0F 0E 
131c8     0D 0E 0E 0D 
131cc     0C 0C 0B 0B | 	byte	$11, $11, $11, $11, $10, $10, $0f, $0e, $0d, $0e, $0e, $0d, $0c, $0c, $0b, $0b
131d0     0A 09 09 09 
131d4     08 08 07 07 
131d8     07 07 06 04 
131dc     03 03 03 02 | 	byte	$0a, $09, $09, $09, $08, $08, $07, $07, $07, $07, $06, $04, $03, $03, $03, $02
131e0     01 01 01 01 
131e4     01          | 	byte	$01[5]
131e5     FF FE FD FC 
131e9     FD FD FD FC 
131ed     FB F9 F9 F8 
131f1     F8 F8 F8 F7 | 	byte	$ff, $fe, $fd, $fc, $fd, $fd, $fd, $fc, $fb, $f9, $f9, $f8, $f8, $f8, $f8, $f7
131f5     F7 F6 F6 F5 
131f9     F5 F5 F4 F3 
131fd     F2 F2 F2 F3 
13201     F3 F2 F1 F1 | 	byte	$f7, $f6, $f6, $f5, $f5, $f5, $f4, $f3, $f2, $f2, $f2, $f3, $f3, $f2, $f1, $f1
13205     F1 F1 F1 F1 
13209     F2 F2 F1 F1 
1320d     F2 F2 F3 F3 
13211     F2 F2 F2 F3 | 	byte	$f1, $f1, $f1, $f1, $f2, $f2, $f1, $f1, $f2, $f2, $f3, $f3, $f2, $f2, $f2, $f3
13215     F3 F4 F5 F5 
13219     F5 F6 F6 F5 
1321d     F6 F7 F8 F9 
13221     F9 F9 FA FB | 	byte	$f3, $f4, $f5, $f5, $f5, $f6, $f6, $f5, $f6, $f7, $f8, $f9, $f9, $f9, $fa, $fb
13225     FC FC FD FE 
13229     FE FF 01 01 
1322d     01 01 03 04 
13231     06 07 06 06 | 	byte	$fc, $fc, $fd, $fe, $fe, $ff, $01, $01, $01, $01, $03, $04, $06, $07, $06, $06
13235     08 0A 0A 0A 
13239     0B 0C 0C 0C 
1323d     0D 0E 0F 11 
13241     12 11 11 12 | 	byte	$08, $0a, $0a, $0a, $0b, $0c, $0c, $0c, $0d, $0e, $0f, $11, $12, $11, $11, $12
13245     13 14 14 14 
13249     14 15 15 15 
1324d     16 17 16 16 
13251     16 18 19 19 | 	byte	$13, $14, $14, $14, $14, $15, $15, $15, $16, $17, $16, $16, $16, $18, $19, $19
13255     18 19 19 1A 
13259     1A 19 1A 1B 
1325d     1A 19 1A 1A 
13261     1A 1A 1A 1A | 	byte	$18, $19, $19, $1a, $1a, $19, $1a, $1b, $1a, $19, $1a, $1a, $1a, $1a, $1a, $1a
13265     1A 1A 1A 19 
13269     19 1A 1B 1A 
1326d     19 19 19 19 
13271     1A 19 18 18 | 	byte	$1a, $1a, $1a, $19, $19, $1a, $1b, $1a, $19, $19, $19, $19, $1a, $19, $18, $18
13275     18 18 18 18 
13279     18          | 	byte	$18[5]
1327a     17 17 17 17 
1327e     17 17       | 	byte	$17[6]
13280     16 16 15 15 
13284     15 15 15 15 
13288     14 14 14 14 
1328c     14 14 14 13 | 	byte	$16, $16, $15, $15, $15, $15, $15, $15, $14, $14, $14, $14, $14, $14, $14, $13
13290     13 14 14 14 
13294     13 13 12 12 
13298     12 12 11 12 
1329c     12 11 11 10 | 	byte	$13, $14, $14, $14, $13, $13, $12, $12, $12, $12, $11, $12, $12, $11, $11, $10
132a0     10 10 11 11 
132a4     0F 0F 0F 0F 
132a8     0F 0E 0E 0E 
132ac     0D 0D 0D 0D | 	byte	$10, $10, $11, $11, $0f, $0f, $0f, $0f, $0f, $0e, $0e, $0e, $0d, $0d, $0d, $0d
132b0     0D 0C 0B 0B 
132b4     0B 0C 0B 0A 
132b8     0A 0A 0A 09 
132bc     08 08 08 08 | 	byte	$0d, $0c, $0b, $0b, $0b, $0c, $0b, $0a, $0a, $0a, $0a, $09, $08, $08, $08, $08
132c0     07 06 07 07 
132c4     06 05 05 05 
132c8     05 05 04 04 
132cc     03 04 03 03 | 	byte	$07, $06, $07, $07, $06, $05, $05, $05, $05, $05, $04, $04, $03, $04, $03, $03
132d0     02 02 02 02 
132d4     01 01 01 01 
132d8     01 01 01 00 
132dc     00 01 01 01 | 	byte	$02, $02, $02, $02, $01, $01, $01, $01, $01, $01, $01, $00, $00, $01, $01, $01
132e0     00 00 01 01 
132e4     01 00 00 01 
132e8     02 02 01 01 
132ec     01 01 01 01 | 	byte	$00, $00, $01, $01, $01, $00, $00, $01, $02, $02, $01, $01, $01, $01, $01, $01
132f0     02 02 02 02 
132f4     03 03 03 03 
132f8     03 03 04 04 
132fc     04 04 05 05 | 	byte	$02, $02, $02, $02, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $05, $05
13300     05 05 05 05 
13304     06 06 06 06 
13308     06 06 06 06 
1330c     06 06 06 06 | 	byte	$05, $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06
13310     06 06 05 05 
13314     06 07 06 06 
13318     05 05 06 06 
1331c     05 05 05 06 | 	byte	$06, $06, $05, $05, $06, $07, $06, $06, $05, $05, $06, $06, $05, $05, $05, $06
13320     06 05 04 04 
13324     05 05 05 05 
13328     04 04 04 04 
1332c     05 04 04 04 | 	byte	$06, $05, $04, $04, $05, $05, $05, $05, $04, $04, $04, $04, $05, $04, $04, $04
13330     04 04 04 04 
13334     04 04       | 	byte	$04[6]
13336     05 05 05 04 
1333a     04 04 04 04 
1333e     05 05 06 06 
13342     05 05 05 06 | 	byte	$05, $05, $05, $04, $04, $04, $04, $04, $05, $05, $06, $06, $05, $05, $05, $06
13346     06 05 05 06 
1334a     07 07 07 07 
1334e     07 07 07 08 
13352     08 09 08 08 | 	byte	$06, $05, $05, $06, $07, $07, $07, $07, $07, $07, $07, $08, $08, $09, $08, $08
13356     09 09 09 09 
1335a     0A 0A 0A 0B 
1335e     0B 0B 0B 0C 
13362     0C 0C 0C 0C | 	byte	$09, $09, $09, $09, $0a, $0a, $0a, $0b, $0b, $0b, $0b, $0c, $0c, $0c, $0c, $0c
13366     0C 0D 0D 0D 
1336a     0D 0E 0E 0E 
1336e     0E 0E 0E 0E 
13372     0F 0E 0E 0E | 	byte	$0c, $0d, $0d, $0d, $0d, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0f, $0e, $0e, $0e
13376     0F 0F 0F 0F 
1337a     0E 0E 0E 0F 
1337e     0E 0F 0F 0F 
13382     0F 0E 0E 0E | 	byte	$0f, $0f, $0f, $0f, $0e, $0e, $0e, $0f, $0e, $0f, $0f, $0f, $0f, $0e, $0e, $0e
13386     0E 0E 0E 0E 
1338a     0E          | 	byte	$0e[5]
1338b     0D 0D 0D 0D 
1338f     0C 0C 0D 0D 
13393     0D 0C 0B 0B 
13397     0A 0A 0A 0A | 	byte	$0d, $0d, $0d, $0d, $0c, $0c, $0d, $0d, $0d, $0c, $0b, $0b, $0a, $0a, $0a, $0a
1339b     0A 0A 09 08 
1339f     08 08 08 08 
133a3     07 07 07 07 
133a7     07 07 06 06 | 	byte	$0a, $0a, $09, $08, $08, $08, $08, $08, $07, $07, $07, $07, $07, $07, $06, $06
133ab     06 06 05 06 
133af     05 05 05 04 
133b3     04 04 04 04 
133b7     04 03 03 03 | 	byte	$06, $06, $05, $06, $05, $05, $05, $04, $04, $04, $04, $04, $04, $03, $03, $03
133bb     03 03 03 03 
133bf     03          | 	byte	$03[5]
133c0     02 03 03 03 
133c4     02 02 02 02 
133c8     03 02 02 02 
133cc     02 03 03 02 | 	byte	$02, $03, $03, $03, $02, $02, $02, $02, $03, $02, $02, $02, $02, $03, $03, $02
133d0     02 02 02 03 
133d4     02 02 02 02 
133d8     02 02 02 02 
133dc     02 02 02 03 | 	byte	$02, $02, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $03
133e0     03 02 02 02 
133e4     02 02 03 03 
133e8     03 03 03 02 
133ec     02 02 03 03 | 	byte	$03, $02, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $03, $03
133f0     03 03 03 02 
133f4     02 02 02 03 
133f8     03 03 03 03 
133fc     03 02 02 02 | 	byte	$03, $03, $03, $02, $02, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
13400     03 04 04 03 
13404     03 03 03 03 
13408     03 04 04 04 
1340c     04 05 05 05 | 	byte	$03, $04, $04, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $05, $05, $05
13410     05 05 05 05 
13414     05          | 	byte	$05[5]
13415     06 06 06 06 
13419     06 06 06    | 	byte	$06[7]
1341c     07 07 07 07 
13420     07 07 07    | 	byte	$07[7]
13423     08 08 08 08 
13427     08 08 08 08 
1342b     08 08 08    | 	byte	$08[11]
1342e     09 09 09 08 
13432     08 09 09 09 
13436     09 09 09 09 
1343a     09 0A 0A 0A | 	byte	$09, $09, $09, $08, $08, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0a
1343e     0A 09 09 09 
13442     09 09 09 0A 
13446     0A 09 09 09 
1344a     09 09 09 09 | 	byte	$0a, $09, $09, $09, $09, $09, $09, $0a, $0a, $09, $09, $09, $09, $09, $09, $09
1344e     09 09 09 09 
13452     09 09 09 09 
13456     09 09 09 09 | 	byte	$09[12]
1345a     08 09 09 08 
1345e     08 08 08 08 
13462     08 08 08 08 
13466     08 08 08 08 | 	byte	$08, $09, $09, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
1346a     08 08 08 08 
1346e     08 08 08 08 
13472     08 08 08 08 
13476     08 08 08    | 	byte	$08[15]
13479     07 07 07 08 
1347d     08 08 07 07 
13481     07 07 07 07 
13485     07 07 07 07 | 	byte	$07, $07, $07, $08, $08, $08, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
13489     07 07 07 07 
1348d     07          | 	byte	$07[5]
1348e     06 06 06 06 
13492     06 06 06    | 	byte	$06[7]
13495     05 05 05 05 
13499     05 05       | 	byte	$05[6]
1349b     04 04 04 04 
1349f     04 04 04 04 | 	byte	$04[8]
134a3     03 03 03 03 
134a7     02 02 02 02 
134ab     02 02 02 01 
134af     01 01 01 01 | 	byte	$03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $01
134b3     01 00 00 00 
134b7     00 00 00 FF 
134bb     FF FF 00 FF 
134bf     FF FF FF FF | 	byte	$01, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff
134c3     FF FF FE FE 
134c7     FE FE FF FE 
134cb     FE FE FE FE 
134cf     FE FE FE FE | 	byte	$ff, $ff, $fe, $fe, $fe, $fe, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe
134d3     FE FE FE FE 
134d7     FE          | 	byte	$fe[5]
134d8     FF FF FE FE 
134dc     FE FE FF FF 
134e0     FF FF FF 00 
134e4     FF FF FF 00 | 	byte	$ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $ff, $00
134e8     00 00 00 00 
134ec     00          | 	byte	$00[5]
134ed     01 01 01 01 
134f1     01 01       | 	byte	$01[6]
134f3     02 02 02 02 
134f7     02          | 	byte	$02[5]
134f8     03 03 03 03 
134fc     04 04 04 04 
13500     04 04 05 05 
13504     05 05 05 06 | 	byte	$03, $03, $03, $03, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $06
13508     06 06 06 06 
1350c     06 06 06    | 	byte	$06[7]
1350f     07 07 06 07 
13513     07 07 07 07 
13517     07 07 07 07 
1351b     07 07 07 07 | 	byte	$07, $07, $06, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
1351f     07 07 07 07 
13523     07 07 07 07 
13527     07 07 07 07 
1352b     07 07 07 07 
1352f     07          | 	byte	$07[17]
13530     06 06 06 06 
13534     06 06 06 06 
13538     06          | 	byte	$06[9]
13539     05 06 05 05 
1353d     05 05 05 05 
13541     05 05 05 05 
13545     05 05 05 04 | 	byte	$05, $06, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $04
13549     04 04 04 04 
1354d     04 04 04 04 
13551     04          | 	byte	$04[9]
13552     03 03 03 03 
13556     03 03 03 03 
1355a     03 03 03 03 | 	byte	$03[12]
1355e     02 02 02 02 
13562     03 02 02 02 
13566     02 02 02 01 
1356a     01 02 02 01 | 	byte	$02, $02, $02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $02, $02, $01
1356e     01 01 01 01 
13572     01 01 01 01 
13576     01 01 01    | 	byte	$01[11]
13579     00 00 00 00 
      ...             
13595     00 00 00 00 
13599     00          | 	byte	$00[33]
1359a     01 01 01 00 
1359e     01 01 01 01 
135a2     01 01 01 01 
135a6     01 01 01 01 | 	byte	$01, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
135aa     01 01 01 02 
135ae     02 02 02 02 
135b2     02 02 02 02 
135b6     03 03 02 02 | 	byte	$01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $03, $03, $02, $02
135ba     02 02 02 03 
135be     03 02 02 02 
135c2     02 03 02 03 
135c6     03 03 03 02 | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $03, $02, $03, $03, $03, $03, $02
135ca     02 02 03 03 
135ce     03 02 02 02 
135d2     02 02 02 02 
135d6     02 02 02 02 | 	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
135da     02 01 02 02 
135de     02 02 01 01 
135e2     01 01 02 01 
135e6     01 01 01 01 | 	byte	$02, $01, $02, $02, $02, $02, $01, $01, $01, $01, $02, $01, $01, $01, $01, $01
135ea     01 01 01 01 
      ...             
13606     01 01 01 01 
1360a     01 01 01 01 | 	byte	$01[36]
1360e     02 02 02 02 
13612     02 02       | 	byte	$02[6]
13614     03 03 03 03 
13618     03 03 03 03 
1361c     03 03 03 03 
13620     03 03 03    | 	byte	$03[15]
13623     04 04 04 04 
13627     04 04 04 04 
1362b     04 04 04 04 
1362f     04 04       | 	byte	$04[14]
13631     05 04 04 05 
13635     04 04 04 04 
13639     04 04 04 04 
1363d     04 04 04 04 | 	byte	$05, $04, $04, $05, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
13641     04 04 04 04 
13645     04 04 04 04 
13649     04 04 04    | 	byte	$04[11]
1364c     03 03 03 03 
13650     00 00 00 00 
13654     3E 80 F9 F5 
13658     FB F1 F1 17 | 	byte	$03, $03, $03, $03, $00, $00, $00, $00, $3e, $80, $f9, $f5, $fb, $f1, $f1, $17
1365c     29 B9 0D 42 
13660     E2 C4 3F 07 
13664     33 06 81 D8 
13668     F9 DE 78 04 | 	byte	$29, $b9, $0d, $42, $e2, $c4, $3f, $07, $33, $06, $81, $d8, $f9, $de, $78, $04
1366c     08 2F EF 81 
13670     D2 1C 49 1A 
13674     32 07 E2 E2 
13678     DD F9 3A 3A | 	byte	$08, $2f, $ef, $81, $d2, $1c, $49, $1a, $32, $07, $e2, $e2, $dd, $f9, $3a, $3a
1367c     FE 24 58 2E 
13680     0A 46 33 29 
13684     16 0E FA EE 
13688     C9 C9 59 18 | 	byte	$fe, $24, $58, $2e, $0a, $46, $33, $29, $16, $0e, $fa, $ee, $c9, $c9, $59, $18
1368c     81 A4 AD 70 
13690     0C 37 80 F7 
13694     55 E3 A0 19 
13698     13 42 3F C8 | 	byte	$81, $a4, $ad, $70, $0c, $37, $80, $f7, $55, $e3, $a0, $19, $13, $42, $3f, $c8
1369c     03 0F D9 F0 
136a0     31 94 A4 D7 
136a4     C3 97 45 B1 
136a8     CC 0B B4 B9 | 	byte	$03, $0f, $d9, $f0, $31, $94, $a4, $d7, $c3, $97, $45, $b1, $cc, $0b, $b4, $b9
136ac     15 99 36 DB 
136b0     F8 E2 26 D1 
136b4     9B 2C DB 0D 
136b8     0A 06 01 27 | 	byte	$15, $99, $36, $db, $f8, $e2, $26, $d1, $9b, $2c, $db, $0d, $0a, $06, $01, $27
136bc     DD ED ED D9 
136c0     80 99 0D 00 
136c4     F0 09 80 B4 
136c8     50 2A 08 BB | 	byte	$dd, $ed, $ed, $d9, $80, $99, $0d, $00, $f0, $09, $80, $b4, $50, $2a, $08, $bb
136cc     5D C0 80 59 
136d0     38 16 0E 02 
136d4     1A F9 59 50 
136d8     DE 80 42 28 | 	byte	$5d, $c0, $80, $59, $38, $16, $0e, $02, $1a, $f9, $59, $50, $de, $80, $42, $28
136dc     3E 0D 2D 26 
136e0     F8 8C 81 B0 
136e4     BC 8E 25 82 
136e8     2E DB FE D7 | 	byte	$3e, $0d, $2d, $26, $f8, $8c, $81, $b0, $bc, $8e, $25, $82, $2e, $db, $fe, $d7
136ec     42 3D 9E 32 
136f0     31 F8 3E 39 
136f4     DB 43 04 DC 
136f8     B6 10 FE 95 | 	byte	$42, $3d, $9e, $32, $31, $f8, $3e, $39, $db, $43, $04, $dc, $b6, $10, $fe, $95
136fc     02 E1 FC 1E 
13700     43 BD 25 25 
13704     DC 36 D4 A7 
13708     F2 4A 80 C5 | 	byte	$02, $e1, $fc, $1e, $43, $bd, $25, $25, $dc, $36, $d4, $a7, $f2, $4a, $80, $c5
1370c     80 96 9B 1D 
13710     08 82 66 1F 
13714     B7 41 E7 CC 
13718     09 43 D0 0F | 	byte	$80, $96, $9b, $1d, $08, $82, $66, $1f, $b7, $41, $e7, $cc, $09, $43, $d0, $0f
1371c     70 BC BA 2B 
13720     FD 35 09 C5 
13724     E9 05 0F CE 
13728     F6 E9 12 FE | 	byte	$70, $bc, $ba, $2b, $fd, $35, $09, $c5, $e9, $05, $0f, $ce, $f6, $e9, $12, $fe
1372c     82 0B CB D1 
13730     E3 4A 3B 7C 
13734     0E A1 29 AB 
13738     55 38 E6 67 | 	byte	$82, $0b, $cb, $d1, $e3, $4a, $3b, $7c, $0e, $a1, $29, $ab, $55, $38, $e6, $67
1373c     AD 6D 86 49 
13740     DF 15 00 3C 
13744     9E 4C DE FE 
13748     1C 4F DA 3F | 	byte	$ad, $6d, $86, $49, $df, $15, $00, $3c, $9e, $4c, $de, $fe, $1c, $4f, $da, $3f
1374c     32 06 14 32 
13750     DD 3E 23 D4 
13754     D3 00 E5 F5 
13758     EF 40 07 95 | 	byte	$32, $06, $14, $32, $dd, $3e, $23, $d4, $d3, $00, $e5, $f5, $ef, $40, $07, $95
1375c     DD D7 A1 F8 
13760     2D 5E 59 ED 
13764     5F E5 4E 1D 
13768     BE 48 8B 2A | 	byte	$dd, $d7, $a1, $f8, $2d, $5e, $59, $ed, $5f, $e5, $4e, $1d, $be, $48, $8b, $2a
1376c     CD 00 1F 2B 
13770     DB 81 D9 F6 
13774     CC A9 EF F2 
13778     17 C9 5C EE | 	byte	$cd, $00, $1f, $2b, $db, $81, $d9, $f6, $cc, $a9, $ef, $f2, $17, $c9, $5c, $ee
1377c     3C 02 76 16 
13780     E5 2E 2D EB 
13784     29 BC F9 D1 
13788     E1 7B 18 D2 | 	byte	$3c, $02, $76, $16, $e5, $2e, $2d, $eb, $29, $bc, $f9, $d1, $e1, $7b, $18, $d2
1378c     2D EC 12 47 
13790     03 22 15 1E 
13794     1C C5 4E F5 
13798     DB 81 D5 04 | 	byte	$2d, $ec, $12, $47, $03, $22, $15, $1e, $1c, $c5, $4e, $f5, $db, $81, $d5, $04
1379c     90 E5 0C DE 
137a0     49 9D FF 18 
137a4     2A 17 38 EA 
137a8     9A 18 F3 C4 | 	byte	$90, $e5, $0c, $de, $49, $9d, $ff, $18, $2a, $17, $38, $ea, $9a, $18, $f3, $c4
137ac     66 3A EE 4A 
137b0     E3 0A 46 DA 
137b4     81 B4 92 CC 
137b8     06 0D F4 3B | 	byte	$66, $3a, $ee, $4a, $e3, $0a, $46, $da, $81, $b4, $92, $cc, $06, $0d, $f4, $3b
137bc     EF E4 D6 B3 
137c0     FA E4 D3 80 
137c4     B0 23 3A AF 
137c8     63 EA 14 45 | 	byte	$ef, $e4, $d6, $b3, $fa, $e4, $d3, $80, $b0, $23, $3a, $af, $63, $ea, $14, $45
137cc     4C C4 20 80 
137d0     52 34 11 F4 
137d4     C9 80 E2 FC 
137d8     4B F1 FE D6 | 	byte	$4c, $c4, $20, $80, $52, $34, $11, $f4, $c9, $80, $e2, $fc, $4b, $f1, $fe, $d6
137dc     88 0E 22 1A 
137e0     24 F0 FE E6 
137e4     BA 38 F9 14 
137e8     CF 2F C5 28 | 	byte	$88, $0e, $22, $1a, $24, $f0, $fe, $e6, $ba, $38, $f9, $14, $cf, $2f, $c5, $28
137ec     17 DA 21 80 
137f0     CC DC F4 2C 
137f4     C1 0E 06 F3 
137f8     41 8C B0 20 | 	byte	$17, $da, $21, $80, $cc, $dc, $f4, $2c, $c1, $0e, $06, $f3, $41, $8c, $b0, $20
137fc     01 0F 16 CE 
13800     8D C2 D2 89 
13804     29 4A 25 08 
13808     32 F6 C9 09 | 	byte	$01, $0f, $16, $ce, $8d, $c2, $d2, $89, $29, $4a, $25, $08, $32, $f6, $c9, $09
1380c     25 11 2F 1F 
13810     E7 2C 11 89 
13814     23 2C 9E 64 
13818     24 84 E6 0A | 	byte	$25, $11, $2f, $1f, $e7, $2c, $11, $89, $23, $2c, $9e, $64, $24, $84, $e6, $0a
1381c     F4 E9 2F E5 
13820     F3 9E FA 2C 
13824     D6 6B F5 09 
13828     2B DF E0 E1 | 	byte	$f4, $e9, $2f, $e5, $f3, $9e, $fa, $2c, $d6, $6b, $f5, $09, $2b, $df, $e0, $e1
1382c     50 05 50 03 
13830     E8 FC 12 82 
13834     3D 2C DE 05 
13838     2A AD E3 CD | 	byte	$50, $05, $50, $03, $e8, $fc, $12, $82, $3d, $2c, $de, $05, $2a, $ad, $e3, $cd
1383c     2D D4 51 FC 
13840     E5 12 1C F5 
13844     71 1D F8 5B 
13848     3C C0 3E 14 | 	byte	$2d, $d4, $51, $fc, $e5, $12, $1c, $f5, $71, $1d, $f8, $5b, $3c, $c0, $3e, $14
1384c     0B D2 5F 94 
13850     BB FA A5 CF 
13854     FF DE E6 22 
13858     CD E9 0B 0B | 	byte	$0b, $d2, $5f, $94, $bb, $fa, $a5, $cf, $ff, $de, $e6, $22, $cd, $e9, $0b, $0b
1385c     03 46 67 1B 
13860     32 2D E3 D3 
13864     15 E6 C4 12 
13868     DA D1 B3 65 | 	byte	$03, $46, $67, $1b, $32, $2d, $e3, $d3, $15, $e6, $c4, $12, $da, $d1, $b3, $65
1386c     E2 C6 4E ED 
13870     38 03 F2 44 
13874     FD EF 44 08 
13878     C7 22 BF 31 | 	byte	$e2, $c6, $4e, $ed, $38, $03, $f2, $44, $fd, $ef, $44, $08, $c7, $22, $bf, $31
1387c     DB B9 F5 A3 
13880     27 18 D3 D9 
13884     C4 2B 1C DB 
13888     38 4D FD 41 | 	byte	$db, $b9, $f5, $a3, $27, $18, $d3, $d9, $c4, $2b, $1c, $db, $38, $4d, $fd, $41
1388c     EC 16 DF 57 
13890     16 21 F2 20 
13894     23 24 1C F3 
13898     23 C1 FB 47 | 	byte	$ec, $16, $df, $57, $16, $21, $f2, $20, $23, $24, $1c, $f3, $23, $c1, $fb, $47
1389c     9E 21 FF 4C 
138a0     CC 20 DF AA 
138a4     1F E4 3D 23 
138a8     29 F4 3F C1 | 	byte	$9e, $21, $ff, $4c, $cc, $20, $df, $aa, $1f, $e4, $3d, $23, $29, $f4, $3f, $c1
138ac     ED 41 C2 06 
138b0     D1 20 EA EB 
138b4     C2 03 F6 D0 
138b8     39 AB EA D9 | 	byte	$ed, $41, $c2, $06, $d1, $20, $ea, $eb, $c2, $03, $f6, $d0, $39, $ab, $ea, $d9
138bc     80 1C 2D 49 
138c0     F3 02 31 F3 
138c4     CF E0 EE D8 
138c8     11 E0 C9 EF | 	byte	$80, $1c, $2d, $49, $f3, $02, $31, $f3, $cf, $e0, $ee, $d8, $11, $e0, $c9, $ef
138cc     27 D5 49 0D 
138d0     CC 1C 4E EE 
138d4     C0 41 E1 11 
138d8     E9 F6 02 E3 | 	byte	$27, $d5, $49, $0d, $cc, $1c, $4e, $ee, $c0, $41, $e1, $11, $e9, $f6, $02, $e3
138dc     C5 E6 05 B7 
138e0     2A F3 D2 22 
138e4     0C F8 12 F4 
138e8     EF E1 3A DE | 	byte	$c5, $e6, $05, $b7, $2a, $f3, $d2, $22, $0c, $f8, $12, $f4, $ef, $e1, $3a, $de
138ec     19 F6 03 16 
138f0     1A E8 14 53 
138f4     B4 FD FC 0B 
138f8     E9 F8 00 F2 | 	byte	$19, $f6, $03, $16, $1a, $e8, $14, $53, $b4, $fd, $fc, $0b, $e9, $f8, $00, $f2
138fc     10 02 3E D1 
13900     C9 27 B0 E3 
13904     DD 06 1B 11 
13908     3D 1B 20 E1 | 	byte	$10, $02, $3e, $d1, $c9, $27, $b0, $e3, $dd, $06, $1b, $11, $3d, $1b, $20, $e1
1390c     49 04 0B 01 
13910     34 F1 FB 33 
13914     F1 B0 15 17 
13918     CA 10 E6 40 | 	byte	$49, $04, $0b, $01, $34, $f1, $fb, $33, $f1, $b0, $15, $17, $ca, $10, $e6, $40
1391c     F0 FB DD 24 
13920     00 31 3B 34 
13924     F2 F8 45 EA 
13928     FE 1F 19 DD | 	byte	$f0, $fb, $dd, $24, $00, $31, $3b, $34, $f2, $f8, $45, $ea, $fe, $1f, $19, $dd
1392c     24 13 DC E3 
13930     0F FE 07 2C 
13934     B8 FB DB E9 
13938     1A 2C E8 23 | 	byte	$24, $13, $dc, $e3, $0f, $fe, $07, $2c, $b8, $fb, $db, $e9, $1a, $2c, $e8, $23
1393c     F9 C8 D9 E0 
13940     F5 DC 28 08 
13944     0B EE DC 17 
13948     B9 19 08 06 | 	byte	$f9, $c8, $d9, $e0, $f5, $dc, $28, $08, $0b, $ee, $dc, $17, $b9, $19, $08, $06
1394c     F3 DF 30 09 
13950     14 28 38 0D 
13954     ED F7 E9 E2 
13958     06 DD 12 CF | 	byte	$f3, $df, $30, $09, $14, $28, $38, $0d, $ed, $f7, $e9, $e2, $06, $dd, $12, $cf
1395c     E3 F3 13 EA 
13960     0F D9 07 16 
13964     07 BC F6 05 
13968     18 22 01 17 | 	byte	$e3, $f3, $13, $ea, $0f, $d9, $07, $16, $07, $bc, $f6, $05, $18, $22, $01, $17
1396c     01 28 D7 FF 
13970     0A A9 4B 07 
13974     EB 00 18 ED 
13978     FB 19 0D 0E | 	byte	$01, $28, $d7, $ff, $0a, $a9, $4b, $07, $eb, $00, $18, $ed, $fb, $19, $0d, $0e
1397c     EA FC 30 FC 
13980     33 01 0F 16 
13984     D7 36 E6 FC 
13988     DB 1C E4 2F | 	byte	$ea, $fc, $30, $fc, $33, $01, $0f, $16, $d7, $36, $e6, $fc, $db, $1c, $e4, $2f
1398c     F7 F9 DB 0B 
13990     17 EB FE EE 
13994     01 E0 F3 11 
13998     ED 1F 06 07 | 	byte	$f7, $f9, $db, $0b, $17, $eb, $fe, $ee, $01, $e0, $f3, $11, $ed, $1f, $06, $07
1399c     11 14 EB 22 
139a0     E3 ED 1C F9 
139a4     E0 11 0A 06 
139a8     EA 0A DC D1 | 	byte	$11, $14, $eb, $22, $e3, $ed, $1c, $f9, $e0, $11, $0a, $06, $ea, $0a, $dc, $d1
139ac     FF 07 06 16 
139b0     CF 0D 15 0A 
139b4     22 22 FE 1F 
139b8     19 15 F3 36 | 	byte	$ff, $07, $06, $16, $cf, $0d, $15, $0a, $22, $22, $fe, $1f, $19, $15, $f3, $36
139bc     0D 05 F6 0B 
139c0     FC E6 0B FF 
139c4     12 E4 FA F1 
139c8     D6 F6 0D 10 | 	byte	$0d, $05, $f6, $0b, $fc, $e6, $0b, $ff, $12, $e4, $fa, $f1, $d6, $f6, $0d, $10
139cc     F3 22 07 11 
139d0     EC 1C 1F F5 
139d4     40 E8 45 F1 
139d8     F1 0D EA F4 | 	byte	$f3, $22, $07, $11, $ec, $1c, $1f, $f5, $40, $e8, $45, $f1, $f1, $0d, $ea, $f4
139dc     05 E4 D2 39 
139e0     EB 04 04 FF 
139e4     07 01 F2 09 
139e8     36 FD 00 FE | 	byte	$05, $e4, $d2, $39, $eb, $04, $04, $ff, $07, $01, $f2, $09, $36, $fd, $00, $fe
139ec     09 C2 46 F8 
139f0     E8 02 C4 09 
139f4     F0 F2 0B CB 
139f8     06 EF 24 CF | 	byte	$09, $c2, $46, $f8, $e8, $02, $c4, $09, $f0, $f2, $0b, $cb, $06, $ef, $24, $cf
139fc     06 0B 18 12 
13a00     04 09 E2 0D 
13a04     F5 23 D7 D7 
13a08     1E C8 D8 0F | 	byte	$06, $0b, $18, $12, $04, $09, $e2, $0d, $f5, $23, $d7, $d7, $1e, $c8, $d8, $0f
13a0c     D8 FC FE 01 
13a10     1B 05 D9 0D 
13a14     E8 18 23 18 
13a18     16 0A 0D EC | 	byte	$d8, $fc, $fe, $01, $1b, $05, $d9, $0d, $e8, $18, $23, $18, $16, $0a, $0d, $ec
13a1c     01 F7 1C 06 
13a20     FA 03 05 EF 
13a24     E0 2D E4 ED 
13a28     05 F5 EF 11 | 	byte	$01, $f7, $1c, $06, $fa, $03, $05, $ef, $e0, $2d, $e4, $ed, $05, $f5, $ef, $11
13a2c     01 05 23 18 
13a30     25 08 F5 04 
13a34     09 F8 0C 23 
13a38     E4 00 E4 F2 | 	byte	$01, $05, $23, $18, $25, $08, $f5, $04, $09, $f8, $0c, $23, $e4, $00, $e4, $f2
13a3c     08 E2 12 13 
13a40     06 F4 06 FB 
13a44     F2 18 07 19 
13a48     02 26 FD 09 | 	byte	$08, $e2, $12, $13, $06, $f4, $06, $fb, $f2, $18, $07, $19, $02, $26, $fd, $09
13a4c     0E 33 07 F5 
13a50     F6 ED 08 EC 
13a54     F0 EC 01 F4 
13a58     EF FE DD E5 | 	byte	$0e, $33, $07, $f5, $f6, $ed, $08, $ec, $f0, $ec, $01, $f4, $ef, $fe, $dd, $e5
13a5c     0B E0 EF 1F 
13a60     E8 D8 1C F1 
13a64     0A 06 0A 16 
13a68     0B 12 FD 08 | 	byte	$0b, $e0, $ef, $1f, $e8, $d8, $1c, $f1, $0a, $06, $0a, $16, $0b, $12, $fd, $08
13a6c     0E 16 11 0C 
13a70     FA 01 15 F1 
13a74     F0 0E 17 DD 
13a78     EE F1 F8 F0 | 	byte	$0e, $16, $11, $0c, $fa, $01, $15, $f1, $f0, $0e, $17, $dd, $ee, $f1, $f8, $f0
13a7c     08 16 0A 12 
13a80     F0 0B 02 0E 
13a84     11 F3 08 14 
13a88     00 F3 0A 00 | 	byte	$08, $16, $0a, $12, $f0, $0b, $02, $0e, $11, $f3, $08, $14, $00, $f3, $0a, $00
13a8c     1E 05 FA 18 
13a90     F3 F8 F7 1A 
13a94     ED 19 1D E7 
13a98     17 F7 F4 F9 | 	byte	$1e, $05, $fa, $18, $f3, $f8, $f7, $1a, $ed, $19, $1d, $e7, $17, $f7, $f4, $f9
13a9c     0C F5 FD 07 
13aa0     DC 0D FF FE 
13aa4     00 00 10 E3 
13aa8     05 F4 FA 0A | 	byte	$0c, $f5, $fd, $07, $dc, $0d, $ff, $fe, $00, $00, $10, $e3, $05, $f4, $fa, $0a
13aac     02 F9 FF 0B 
13ab0     F8 02 D9 22 
13ab4     08 EC FF 00 
13ab8     F5 F3 08 ED | 	byte	$02, $f9, $ff, $0b, $f8, $02, $d9, $22, $08, $ec, $ff, $00, $f5, $f3, $08, $ed
13abc     16 F9 FA 02 
13ac0     00 FB F1 0E 
13ac4     E5 06 0B F9 
13ac8     1B FE FB ED | 	byte	$16, $f9, $fa, $02, $00, $fb, $f1, $0e, $e5, $06, $0b, $f9, $1b, $fe, $fb, $ed
13acc     1C F2 1C FF 
13ad0     0F 04 FC FC 
13ad4     F4 0A E9 10 
13ad8     FF FD FD FC | 	byte	$1c, $f2, $1c, $ff, $0f, $04, $fc, $fc, $f4, $0a, $e9, $10, $ff, $fd, $fd, $fc
13adc     09 F0 15 04 
13ae0     0E ED 0C F4 
13ae4     02 12 F0 F9 
13ae8     06 13 FC 00 | 	byte	$09, $f0, $15, $04, $0e, $ed, $0c, $f4, $02, $12, $f0, $f9, $06, $13, $fc, $00
13aec     0B F7 1F F6 
13af0     0B 02 03 F3 
13af4     02 06 03 0E 
13af8     00 18 01 F9 | 	byte	$0b, $f7, $1f, $f6, $0b, $02, $03, $f3, $02, $06, $03, $0e, $00, $18, $01, $f9
13afc     F8 F7 FF 00 
13b00     0F E4 1A F2 
13b04     03 F4 01 12 
13b08     0C F7 F7 0C | 	byte	$f8, $f7, $ff, $00, $0f, $e4, $1a, $f2, $03, $f4, $01, $12, $0c, $f7, $f7, $0c
13b0c     FB 0A 0D 00 
13b10     10 F3 0E F2 
13b14     08 01 F8 F5 
13b18     00 FA 06 F6 | 	byte	$fb, $0a, $0d, $00, $10, $f3, $0e, $f2, $08, $01, $f8, $f5, $00, $fa, $06, $f6
13b1c     EE 16 F7 02 
13b20     00 F5 0B F0 
13b24     FB 11 EE 1A 
13b28     00 0F 05 12 | 	byte	$ee, $16, $f7, $02, $00, $f5, $0b, $f0, $fb, $11, $ee, $1a, $00, $0f, $05, $12
13b2c     EB 0C 02 09 
13b30     0C F8 EC 08 
13b34     FE FB 0E F9 
13b38     FD F8 FA 09 | 	byte	$eb, $0c, $02, $09, $0c, $f8, $ec, $08, $fe, $fb, $0e, $f9, $fd, $f8, $fa, $09
13b3c     F0 FF 00 01 
13b40     EB 1F 07 F1 
13b44     0D 0B 11 FD 
13b48     04 01 09 02 | 	byte	$f0, $ff, $00, $01, $eb, $1f, $07, $f1, $0d, $0b, $11, $fd, $04, $01, $09, $02
13b4c     EE 0D 09 E8 
13b50     06 0B F2 03 
13b54     0A F6 0A 08 
13b58     00 00 F7 09 | 	byte	$ee, $0d, $09, $e8, $06, $0b, $f2, $03, $0a, $f6, $0a, $08, $00, $00, $f7, $09
13b5c     05 E7 04 FD 
13b60     F3 FE 00 F8 
13b64     06 FE FC 09 
13b68     01 06 09 09 | 	byte	$05, $e7, $04, $fd, $f3, $fe, $00, $f8, $06, $fe, $fc, $09, $01, $06, $09, $09
13b6c     F1 1C 05 00 
13b70     02 16 04 EE 
13b74     0D 0D 05 FC 
13b78     FC 06 F4 07 | 	byte	$f1, $1c, $05, $00, $02, $16, $04, $ee, $0d, $0d, $05, $fc, $fc, $06, $f4, $07
13b7c     FE F9 02 07 
13b80     F0 F7 F9 F5 
13b84     0E FB 09 17 
13b88     F9 F4 15 04 | 	byte	$fe, $f9, $02, $07, $f0, $f7, $f9, $f5, $0e, $fb, $09, $17, $f9, $f4, $15, $04
13b8c     FC 08 FD FF 
13b90     FD FE 05 10 
13b94     ED 0A 0F F2 
13b98     06 FE F5 F6 | 	byte	$fc, $08, $fd, $ff, $fd, $fe, $05, $10, $ed, $0a, $0f, $f2, $06, $fe, $f5, $f6
13b9c     01 F9 FF FC 
13ba0     FF 07 10 F9 
13ba4     09 0C 00 06 
13ba8     08 F8 0D 07 | 	byte	$01, $f9, $ff, $fc, $ff, $07, $10, $f9, $09, $0c, $00, $06, $08, $f8, $0d, $07
13bac     03 F7 0E FB 
13bb0     04 F0 FB FE 
13bb4     F4 F0 FE 06 
13bb8     04 FE 06 FA | 	byte	$03, $f7, $0e, $fb, $04, $f0, $fb, $fe, $f4, $f0, $fe, $06, $04, $fe, $06, $fa
13bbc     03 0D 03 F7 
13bc0     06 FC 04 00 
13bc4     F6 F7 0A F6 
13bc8     03 08 F3 F8 | 	byte	$03, $0d, $03, $f7, $06, $fc, $04, $00, $f6, $f7, $0a, $f6, $03, $08, $f3, $f8
13bcc     0A 05 04 09 
13bd0     04 FA 15 0D 
13bd4     FC 0B 05 01 
13bd8     09 F5 FA 0B | 	byte	$0a, $05, $04, $09, $04, $fa, $15, $0d, $fc, $0b, $05, $01, $09, $f5, $fa, $0b
13bdc     FD E9 FB 07 
13be0     EC FA 05 FA 
13be4     00 FE F9 FD 
13be8     FE 0A 08 FC | 	byte	$fd, $e9, $fb, $07, $ec, $fa, $05, $fa, $00, $fe, $f9, $fd, $fe, $0a, $08, $fc
13bec     07 00 0C F8 
13bf0     05 05 04 02 
13bf4     0E 0D 01 09 
13bf8     FC 07 FB F9 | 	byte	$07, $00, $0c, $f8, $05, $05, $04, $02, $0e, $0d, $01, $09, $fc, $07, $fb, $f9
13bfc     0A F6 FA FD 
13c00     F7 F9 FD 0E 
13c04     F4 FD FB 05 
13c08     FC FC FF 05 | 	byte	$0a, $f6, $fa, $fd, $f7, $f9, $fd, $0e, $f4, $fd, $fb, $05, $fc, $fc, $ff, $05
13c0c     02 05 07 0D 
13c10     01 04 12 FF 
13c14     03 0B FA 02 
13c18     FF FE FC F2 | 	byte	$02, $05, $07, $0d, $01, $04, $12, $ff, $03, $0b, $fa, $02, $ff, $fe, $fc, $f2
13c1c     FF FE 01 EE 
13c20     FB FB FE FD 
13c24     06 01 F2 03 
13c28     06 FD 0E 08 | 	byte	$ff, $fe, $01, $ee, $fb, $fb, $fe, $fd, $06, $01, $f2, $03, $06, $fd, $0e, $08
13c2c     02 02 04 06 
13c30     02 FD 06 06 
13c34     05 FA 04 0A 
13c38     FD 02 01 FF | 	byte	$02, $02, $04, $06, $02, $fd, $06, $06, $05, $fa, $04, $0a, $fd, $02, $01, $ff
13c3c     EF 0A FE F7 
13c40     07 F9 FC 06 
13c44     FE 06 00 F9 
13c48     FE 06 FC FF | 	byte	$ef, $0a, $fe, $f7, $07, $f9, $fc, $06, $fe, $06, $00, $f9, $fe, $06, $fc, $ff
13c4c     09 08 01 0C 
13c50     07 F4 07 0B 
13c54     04 FF 05 FD 
13c58     09 FB F9 07 | 	byte	$09, $08, $01, $0c, $07, $f4, $07, $0b, $04, $ff, $05, $fd, $09, $fb, $f9, $07
13c5c     FB FA 0D FA 
13c60     FB 03 FE FD 
13c64     0E FC 0C FF 
13c68     FD 0F 06 F9 | 	byte	$fb, $fa, $0d, $fa, $fb, $03, $fe, $fd, $0e, $fc, $0c, $ff, $fd, $0f, $06, $f9
13c6c     FF 07 FD 00 
13c70     01 06 FF 04 
13c74     01 02 09 FE 
13c78     00 04 01 FB | 	byte	$ff, $07, $fd, $00, $01, $06, $ff, $04, $01, $02, $09, $fe, $00, $04, $01, $fb
13c7c     00 FB 00 06 
13c80     FE FE F9 01 
13c84     00 F3 08 FF 
13c88     F4 08 FF 04 | 	byte	$00, $fb, $00, $06, $fe, $fe, $f9, $01, $00, $f3, $08, $ff, $f4, $08, $ff, $04
13c8c     07 FE 07 0C 
13c90     02 F9 05 F9 
13c94     FF 0A 04 FC 
13c98     02 FC 02 FC | 	byte	$07, $fe, $07, $0c, $02, $f9, $05, $f9, $ff, $0a, $04, $fc, $02, $fc, $02, $fc
13c9c     04 03 04 FD 
13ca0     05 FE F6 01 
13ca4     02 FC 03 03 
13ca8     FB F5 05 FB | 	byte	$04, $03, $04, $fd, $05, $fe, $f6, $01, $02, $fc, $03, $03, $fb, $f5, $05, $fb
13cac     03 02 F6 05 
13cb0     04 F9 09 04 
13cb4     00 06 06 06 
13cb8     03 F6 05 FD | 	byte	$03, $02, $f6, $05, $04, $f9, $09, $04, $00, $06, $06, $06, $03, $f6, $05, $fd
13cbc     02 04 01 FF 
13cc0     05 00 FC FE 
13cc4     F0 0B 01 F9 
13cc8     0B FD FB 01 | 	byte	$02, $04, $01, $ff, $05, $00, $fc, $fe, $f0, $0b, $01, $f9, $0b, $fd, $fb, $01
13ccc     0B FC 05 09 
13cd0     FF 05 00 FC 
13cd4     0A 04 00 06 
13cd8     02 F2 05 01 | 	byte	$0b, $fc, $05, $09, $ff, $05, $00, $fc, $0a, $04, $00, $06, $02, $f2, $05, $01
13cdc     FC 03 04 F7 
13ce0     FF 02 FC 00 
13ce4     FD 02 0C 02 
13ce8     FC 05 01 FD | 	byte	$fc, $03, $04, $f7, $ff, $02, $fc, $00, $fd, $02, $0c, $02, $fc, $05, $01, $fd
13cec     06 00 07 FD 
13cf0     02 01 FF 02 
13cf4     01 01 F7 04 
13cf8     05 FC FB 0A | 	byte	$06, $00, $07, $fd, $02, $01, $ff, $02, $01, $01, $f7, $04, $05, $fc, $fb, $0a
13cfc     08 FF 02 FC 
13d00     02 FD 01 FD 
13d04     FD FE FF 00 
13d08     FE 00 FB 02 | 	byte	$08, $ff, $02, $fc, $02, $fd, $01, $fd, $fd, $fe, $ff, $00, $fe, $00, $fb, $02
13d0c     FE 00 0A 00 
13d10     F8 0D 03 FE 
13d14     05 06 02 04 
13d18     00 00 FE FF | 	byte	$fe, $00, $0a, $00, $f8, $0d, $03, $fe, $05, $06, $02, $04, $00, $00, $fe, $ff
13d1c     FE FE FB FB 
13d20     03 F9 FC 0A 
13d24     01 F9 03 FF 
13d28     04 FE F9 00 | 	byte	$fe, $fe, $fb, $fb, $03, $f9, $fc, $0a, $01, $f9, $03, $ff, $04, $fe, $f9, $00
13d2c     05 01 08 03 
13d30     FC 03 06 F9 
13d34     01 04 FB FE 
13d38     00 01 04 FB | 	byte	$05, $01, $08, $03, $fc, $03, $06, $f9, $01, $04, $fb, $fe, $00, $01, $04, $fb
13d3c     F9 06 02 F6 
13d40     F9 01 00 FE 
13d44     FA FD FC 03 
13d48     06 03 FF 04 | 	byte	$f9, $06, $02, $f6, $f9, $01, $00, $fe, $fa, $fd, $fc, $03, $06, $03, $ff, $04
13d4c     FF FD 02 09 
13d50     FC 04 03 00 
13d54     09 02 FF 08 
13d58     00 FE 08 FC | 	byte	$ff, $fd, $02, $09, $fc, $04, $03, $00, $09, $02, $ff, $08, $00, $fe, $08, $fc
13d5c     FA 08 FA F9 
13d60     08 F8 03 00 
13d64     F6 07 02 F7 
13d68     02 06 FC 02 | 	byte	$fa, $08, $fa, $f9, $08, $f8, $03, $00, $f6, $07, $02, $f7, $02, $06, $fc, $02
13d6c     04 FF 0D 05 
13d70     00 04 05 06 
13d74     08 02 01 04 
13d78     0A FF 01 06 | 	byte	$04, $ff, $0d, $05, $00, $04, $05, $06, $08, $02, $01, $04, $0a, $ff, $01, $06
13d7c     FD 02 FD FF 
13d80     FF FF 02 02 
13d84     FC FF FF FA 
13d88     01 08 FE 00 | 	byte	$fd, $02, $fd, $ff, $ff, $ff, $02, $02, $fc, $ff, $ff, $fa, $01, $08, $fe, $00
13d8c     01 00 09 02 
13d90     03 08 01 05 
13d94     01 03 04 01 
13d98     01 01 05 01 | 	byte	$01, $00, $09, $02, $03, $08, $01, $05, $01, $03, $04, $01, $01, $01, $05, $01
13d9c     03 F8 FC 05 
13da0     FA FD FD 00 
13da4     02 FD FF FF 
13da8     03 02 03 05 | 	byte	$03, $f8, $fc, $05, $fa, $fd, $fd, $00, $02, $fd, $ff, $ff, $03, $02, $03, $05
13dac     01 FE 03 01 
13db0     01 03 02 FF 
13db4     02 03 FD 00 
13db8     FC 03 03 F9 | 	byte	$01, $fe, $03, $01, $01, $03, $02, $ff, $02, $03, $fd, $00, $fc, $03, $03, $f9
13dbc     03 02 FE 06 
13dc0     FC 00 03 00 
13dc4     00 00 00 00 
13dc8     00 00 00 00 | 	byte	$03, $02, $fe, $06, $fc, $00, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00
13dcc     00 00 00 00 
      ...             
13e24     00 00 00 00 
13e28     00 00       | 	byte	$00[94]
13e2a     FF 00 DF 78 
13e2e     80 70 00 FF 
13e32     C0 FF BF 00 
13e36     BF 3F 00 BF | 	byte	$ff, $00, $df, $78, $80, $70, $00, $ff, $c0, $ff, $bf, $00, $bf, $3f, $00, $bf
13e3a     FF 60 87 60 
13e3e     DF 40 BF C1 
13e42     3F 81 DF 6E 
13e46     00 BF 3F 40 | 	byte	$ff, $60, $87, $60, $df, $40, $bf, $c1, $3f, $81, $df, $6e, $00, $bf, $3f, $40
13e4a     81 7F 60 80 
13e4e     7F 80 BF 6F 
13e52     00 8F 7C 80 
13e56     FF 60 83 7C | 	byte	$81, $7f, $60, $80, $7f, $80, $bf, $6f, $00, $8f, $7c, $80, $ff, $60, $83, $7c
13e5a     1E 80 BF 40 
13e5e     81 7F 00 80 
13e62     FF 00 9F 07 
13e66     00 30 BF 40 | 	byte	$1e, $80, $bf, $40, $81, $7f, $00, $80, $ff, $00, $9f, $07, $00, $30, $bf, $40
13e6a     FF 20 AF FF 
13e6e     40 BF 34 7C 
13e72     87 7C FF C0 
13e76     FF FF E0 FF | 	byte	$ff, $20, $af, $ff, $40, $bf, $34, $7c, $87, $7c, $ff, $c0, $ff, $ff, $e0, $ff
13e7a     2F 00 BF FF 
13e7e     60 83 3F C0 
13e82     BF 40 9F 40 
13e86     87 FF 60 C7 | 	byte	$2f, $00, $bf, $ff, $60, $83, $3f, $c0, $bf, $40, $9f, $40, $87, $ff, $60, $c7
13e8a     80 FF 00 FF 
13e8e     07 60 87 60 
13e92     9F FE FF 20 
13e96     DF DF 2C 1F | 	byte	$80, $ff, $00, $ff, $07, $60, $87, $60, $9f, $fe, $ff, $20, $df, $df, $2c, $1f
13e9a     81 FF 78 80 
13e9e     30 0F 20 C0 
13ea2     FF 00 FF C0 
13ea6     7C 9F DF 7F | 	byte	$81, $ff, $78, $80, $30, $0f, $20, $c0, $ff, $00, $ff, $c0, $7c, $9f, $df, $7f
13eaa     80 FE FF 40 
13eae     8F 78 80 BF 
13eb2     00 BF BF 7C 
13eb6     80 FF C0 BF | 	byte	$80, $fe, $ff, $40, $8f, $78, $80, $bf, $00, $bf, $bf, $7c, $80, $ff, $c0, $bf
13eba     70 87 E0 BF 
13ebe     40 8B 5F 00 
13ec2     DF 07 60 83 
13ec6     3F 4A 81 FF | 	byte	$70, $87, $e0, $bf, $40, $8b, $5f, $00, $df, $07, $60, $83, $3f, $4a, $81, $ff
13eca     03 00 20 83 
13ece     DF 78 80 FF 
13ed2     00 40 BF 60 
13ed6     83 7C 9F FE | 	byte	$03, $00, $20, $83, $df, $78, $80, $ff, $00, $40, $bf, $60, $83, $7c, $9f, $fe
13eda     8F 7E 80 FF 
13ede     00 BF 78 B3 
13ee2     1F 7C 80 FF 
13ee6     60 87 7E EF | 	byte	$8f, $7e, $80, $ff, $00, $bf, $78, $b3, $1f, $7c, $80, $ff, $60, $87, $7e, $ef
13eea     00 BF 07 40 
13eee     87 FF 40 81 
13ef2     FF 40 9F 20 
13ef6     FF BF 70 9F | 	byte	$00, $bf, $07, $40, $87, $ff, $40, $81, $ff, $40, $9f, $20, $ff, $bf, $70, $9f
13efa     1F 38 8F 78 
13efe     C0 BF 40 3F 
13f02     80 7F 00 BF 
13f06     50 3F 40 AF | 	byte	$1f, $38, $8f, $78, $c0, $bf, $40, $3f, $80, $7f, $00, $bf, $50, $3f, $40, $af
13f0a     40 FF 00 FF 
13f0e     00 80 3F 40 
13f12     00 87 60 9F 
13f16     00 BF 00 40 | 	byte	$40, $ff, $00, $ff, $00, $80, $3f, $40, $00, $87, $60, $9f, $00, $bf, $00, $40
13f1a     81 3F 60 83 
13f1e     7E 00 87 7F 
13f22     00 8F 50 FF 
13f26     C0 BF E0 FF | 	byte	$81, $3f, $60, $83, $7e, $00, $87, $7f, $00, $8f, $50, $ff, $c0, $bf, $e0, $ff
13f2a     00 BF 40 8F 
13f2e     5E BF 00 87 
13f32     7C BF FF C3 
13f36     3F 80 9F 40 | 	byte	$00, $bf, $40, $8f, $5e, $bf, $00, $87, $7c, $bf, $ff, $c3, $3f, $80, $9f, $40
13f3a     DF 40 BF 60 
13f3e     87 7F 80 FF 
13f42     C0 FF 40 83 
13f46     FF 40 87 32 | 	byte	$df, $40, $bf, $60, $87, $7f, $80, $ff, $c0, $ff, $40, $83, $ff, $40, $87, $32
13f4a     8F 3E BF 3E 
13f4e     00 9F 60 9F 
13f52     00 BF 7E 00 
13f56     F8 FF 60 9F | 	byte	$8f, $3e, $bf, $3e, $00, $9f, $60, $9f, $00, $bf, $7e, $00, $f8, $ff, $60, $9f
13f5a     40 00 FF 20 
13f5e     00 9F 50 BF 
13f62     70 00 8F 7E 
13f66     C0 FF 60 A0 | 	byte	$40, $00, $ff, $20, $00, $9f, $50, $bf, $70, $00, $8f, $7e, $c0, $ff, $60, $a0
13f6a     FF FF 38 EE 
13f6e     DF FE 9F 78 
13f72     FF 60 9F 60 
13f76     00 BF 10 BF | 	byte	$ff, $ff, $38, $ee, $df, $fe, $9f, $78, $ff, $60, $9f, $60, $00, $bf, $10, $bf
13f7a     20 BF 40 3C 
13f7e     C0 FF 34 C0 
13f82     FF 2F 00 A1 
13f86     3F 00 9F 40 | 	byte	$20, $bf, $40, $3c, $c0, $ff, $34, $c0, $ff, $2f, $00, $a1, $3f, $00, $9f, $40
13f8a     00 FF 00 DF 
13f8e     60 A0 3E 00 
13f92     00 8F 70 80 
13f96     40 9F 00 9F | 	byte	$00, $ff, $00, $df, $60, $a0, $3e, $00, $00, $8f, $70, $80, $40, $9f, $00, $9f
13f9a     57 00 BF 00 
13f9e     5F 00 BB 78 
13fa2     80 FF 03 00 
13fa6     38 9F 78 81 | 	byte	$57, $00, $bf, $00, $5f, $00, $bb, $78, $80, $ff, $03, $00, $38, $9f, $78, $81
13faa     60 87 50 C0 
13fae     BF 70 81 78 
13fb2     A7 00 9F 58 
13fb6     A1 3C 00 CF | 	byte	$60, $87, $50, $c0, $bf, $70, $81, $78, $a7, $00, $9f, $58, $a1, $3c, $00, $cf
13fba     FF 20 BF 40 
13fbe     CF 00 1F 00 
13fc2     FF 40 FF E0 
13fc6     FF 20 83 FF | 	byte	$ff, $20, $bf, $40, $cf, $00, $1f, $00, $ff, $40, $ff, $e0, $ff, $20, $83, $ff
13fca     00 BF 1F 00 
13fce     BF A7 FF 87 
13fd2     FF C0 BF 00 
13fd6     AF 00 FF C0 | 	byte	$00, $bf, $1f, $00, $bf, $a7, $ff, $87, $ff, $c0, $bf, $00, $af, $00, $ff, $c0
13fda     00 20 A7 78 
13fde     C0 BF 40 BF 
13fe2     20 BF 3F 00 
13fe6     BF 40 FF 00 | 	byte	$00, $20, $a7, $78, $c0, $bf, $40, $bf, $20, $bf, $3f, $00, $bf, $40, $ff, $00
13fea     3F 00 FF 24 
13fee     E3 FF D7 70 
13ff2     BF 40 BF 20 
13ff6     70 81 3F 00 | 	byte	$3f, $00, $ff, $24, $e3, $ff, $d7, $70, $bf, $40, $bf, $20, $70, $81, $3f, $00
13ffa     9F 58 BF 83 
13ffe     FF 00 BF 40 
14002     BF 60 8F 5E 
14006     E0 FF 00 FF | 	byte	$9f, $58, $bf, $83, $ff, $00, $bf, $40, $bf, $60, $8f, $5e, $e0, $ff, $00, $ff
1400a     40 AF FF C0 
1400e     FF 40 BF 40 
14012     8F 7C 8F 3C 
14016     C3 50 C7 00 | 	byte	$40, $af, $ff, $c0, $ff, $40, $bf, $40, $8f, $7c, $8f, $3c, $c3, $50, $c7, $00
1401a     F7 20 F7 08 
1401e     D0 FF 40 E0 
14022     BF 20 FF 60 
14026     83 60 00 FF | 	byte	$f7, $20, $f7, $08, $d0, $ff, $40, $e0, $bf, $20, $ff, $60, $83, $60, $00, $ff
1402a     00 FF 00 78 
1402e     E0 E4 3C 1F 
14032     E0 BF 40 CB 
14036     40 C0 BF 40 | 	byte	$00, $ff, $00, $78, $e0, $e4, $3c, $1f, $e0, $bf, $40, $cb, $40, $c0, $bf, $40
1403a     AF FF 38 95 
1403e     3F 00 F0 FF 
14042     00 18 F0 E9 
14046     3F 00 DF 40 | 	byte	$af, $ff, $38, $95, $3f, $00, $f0, $ff, $00, $18, $f0, $e9, $3f, $00, $df, $40
1404a     8F 40 BF 40 
1404e     8F 70 C0 10 
14052     E3 60 81 20 
14056     1F 00 FF 83 | 	byte	$8f, $40, $bf, $40, $8f, $70, $c0, $10, $e3, $60, $81, $20, $1f, $00, $ff, $83
1405a     17 03 00 20 
1405e     97 40 FF 40 
14062     20 C3 70 C0 
14066     FF 30 FF 10 | 	byte	$17, $03, $00, $20, $97, $40, $ff, $40, $20, $c3, $70, $c0, $ff, $30, $ff, $10
1406a     2F 00 F6 FF 
1406e     20 FE DF 18 
14072     FF C0 BF 20 
14076     AF 00 EF E9 | 	byte	$2f, $00, $f6, $ff, $20, $fe, $df, $18, $ff, $c0, $bf, $20, $af, $00, $ef, $e9
1407a     E0 FF 80 FF 
1407e     FF DF 3C 8F 
14082     20 BF 40 BF 
14086     20 FF 60 DF | 	byte	$e0, $ff, $80, $ff, $ff, $df, $3c, $8f, $20, $bf, $40, $bf, $20, $ff, $60, $df
1408a     40 BF 33 20 
1408e     87 5F 00 FF 
14092     DF 00 FF 00 
14096     00 8F 40 9F | 	byte	$40, $bf, $33, $20, $87, $5f, $00, $ff, $df, $00, $ff, $00, $00, $8f, $40, $9f
1409a     10 BF FD F8 
1409e     F7 D7 FC 0F 
140a2     20 9F 18 FF 
140a6     00 FF AF 5E | 	byte	$10, $bf, $fd, $f8, $f7, $d7, $fc, $0f, $20, $9f, $18, $ff, $00, $ff, $af, $5e
140aa     C0 FF 00 BF 
140ae     40 AC FF 00 
140b2     70 E0 E0 FF 
140b6     40 D7 FF DF | 	byte	$c0, $ff, $00, $bf, $40, $ac, $ff, $00, $70, $e0, $e0, $ff, $40, $d7, $ff, $df
140ba     EB 3F 00 BF 
140be     03 3E BF FF 
140c2     F7 FF 1F C7 
140c6     FF 17 00 FF | 	byte	$eb, $3f, $00, $bf, $03, $3e, $bf, $ff, $f7, $ff, $1f, $c7, $ff, $17, $00, $ff
140ca     F0 FF 03 30 
140ce     9B FF 00 EF 
140d2     00 9F 40 C1 
140d6     FF 83 70 83 | 	byte	$f0, $ff, $03, $30, $9b, $ff, $00, $ef, $00, $9f, $40, $c1, $ff, $83, $70, $83
140da     60 87 3F E0 
140de     DF 30 E0 FF 
140e2     10 DF 20 2C 
140e6     00 FF 00 FF | 	byte	$60, $87, $3f, $e0, $df, $30, $e0, $ff, $10, $df, $20, $2c, $00, $ff, $00, $ff
140ea     10 9F 7C 81 
140ee     3F 00 DF 30 
140f2     BF 70 9F 10 
140f6     3E 9F 70 9F | 	byte	$10, $9f, $7c, $81, $3f, $00, $df, $30, $bf, $70, $9f, $10, $3e, $9f, $70, $9f
140fa     60 C0 FF 00 
140fe     BF FF 30 C0 
14102     FF 00 3C 00 
14106     FF 40 C0 FF | 	byte	$60, $c0, $ff, $00, $bf, $ff, $30, $c0, $ff, $00, $3c, $00, $ff, $40, $c0, $ff
1410a     40 AF 01 1F 
1410e     00 FF 10 DF 
14112     60 A7 00 1F 
14116     00 CF 58 84 | 	byte	$40, $af, $01, $1f, $00, $ff, $10, $df, $60, $a7, $00, $1f, $00, $cf, $58, $84
1411a     FF 20 BF FF 
1411e     3B 00 FF FF 
14122     00 50 00 40 
14126     CF 40 FF 00 | 	byte	$ff, $20, $bf, $ff, $3b, $00, $ff, $ff, $00, $50, $00, $40, $cf, $40, $ff, $00
1412a     BF 38 FF 20 
1412e     BF 40 FF 18 
14132     E0 FF 40 BF 
14136     40 D7 4C 97 | 	byte	$bf, $38, $ff, $20, $bf, $40, $ff, $18, $e0, $ff, $40, $bf, $40, $d7, $4c, $97
1413a     FF 00 FF 10 
1413e     DF 09 10 CB 
14142     1F 87 3F C0 
14146     BF 20 08 FF | 	byte	$ff, $00, $ff, $10, $df, $09, $10, $cb, $1f, $87, $3f, $c0, $bf, $20, $08, $ff
1414a     50 8B 70 00 
1414e     FF C0 FF 00 
14152     BF 00 E7 28 
14156     AF 00 BF 28 | 	byte	$50, $8b, $70, $00, $ff, $c0, $ff, $00, $bf, $00, $e7, $28, $af, $00, $bf, $28
1415a     DB FF 00 BF 
1415e     24 00 CF 40 
14162     BF 00 BF 30 
14166     00 DF 00 FF | 	byte	$db, $ff, $00, $bf, $24, $00, $cf, $40, $bf, $00, $bf, $30, $00, $df, $00, $ff
1416a     00 FF CF 3F 
1416e     AF 38 EF C7 
14172     3F BF D1 FF 
14176     00 BF 00 BF | 	byte	$00, $ff, $cf, $3f, $af, $38, $ef, $c7, $3f, $bf, $d1, $ff, $00, $bf, $00, $bf
1417a     20 FF DF 38 
1417e     BF 20 FE AF 
14182     38 20 D7 E0 
14186     FF 20 00 DF | 	byte	$20, $ff, $df, $38, $bf, $20, $fe, $af, $38, $20, $d7, $e0, $ff, $20, $00, $df
1418a     36 F7 00 FF 
1418e     20 FF 28 E0 
14192     E8 3F 40 9F 
14196     3E 00 EF 40 | 	byte	$36, $f7, $00, $ff, $20, $ff, $28, $e0, $e8, $3f, $40, $9f, $3e, $00, $ef, $40
1419a     87 40 FF 00 
1419e     DF FF F5 38 
141a2     C0 BF 78 AF 
141a6     3C DF 60 C3 | 	byte	$87, $40, $ff, $00, $df, $ff, $f5, $38, $c0, $bf, $78, $af, $3c, $df, $60, $c3
141aa     40 EF 00 38 
141ae     00 EA 3E 10 
141b2     50 BF 40 FF 
141b6     20 10 DF 18 | 	byte	$40, $ef, $00, $38, $00, $ea, $3e, $10, $50, $bf, $40, $ff, $20, $10, $df, $18
141ba     1C DF F8 FF 
141be     20 00 9F 3F 
141c2     C0 FE C9 60 
141c6     AF 60 A3 FF | 	byte	$1c, $df, $f8, $ff, $20, $00, $9f, $3f, $c0, $fe, $c9, $60, $af, $60, $a3, $ff
141ca     00 BF 00 1C 
141ce     DF 28 08 BF 
141d2     1F 20 9F 60 
141d6     87 3F 40 BF | 	byte	$00, $bf, $00, $1c, $df, $28, $08, $bf, $1f, $20, $9f, $60, $87, $3f, $40, $bf
141da     40 EF 00 DF 
141de     00 BF 70 A0 
141e2     3C C0 38 C1 
141e6     48 83 3F EF | 	byte	$40, $ef, $00, $df, $00, $bf, $70, $a0, $3c, $c0, $38, $c1, $48, $83, $3f, $ef
141ea     C1 FF 00 DF 
141ee     40 BB 60 87 
141f2     78 83 FF 10 
141f6     10 EF 50 00 | 	byte	$c1, $ff, $00, $df, $40, $bb, $60, $87, $78, $83, $ff, $10, $10, $ef, $50, $00
141fa     DF 28 E8 2C 
141fe     00 24 00 F7 
14202     FF 17 C8 DF 
14206     1F 00 FF 00 | 	byte	$df, $28, $e8, $2c, $00, $24, $00, $f7, $ff, $17, $c8, $df, $1f, $00, $ff, $00
1420a     FF 9F 3C DF 
1420e     FF 00 EF 08 
14212     DF 3E 00 FF 
14216     40 DF 01 17 | 	byte	$ff, $9f, $3c, $df, $ff, $00, $ef, $08, $df, $3e, $00, $ff, $40, $df, $01, $17
1421a     20 C0 3F 20 
1421e     DF 00 1F 00 
14222     00 BF 3F 40 
14226     CF 30 90 FF | 	byte	$20, $c0, $3f, $20, $df, $00, $1f, $00, $00, $bf, $3f, $40, $cf, $30, $90, $ff
1422a     40 E8 C5 2F 
1422e     00 FF 00 FF 
14232     00 00 9F 5C 
14236     C1 FF 00 BF | 	byte	$40, $e8, $c5, $2f, $00, $ff, $00, $ff, $00, $00, $9f, $5c, $c1, $ff, $00, $bf
1423a     40 FF 00 DF 
1423e     08 FF DB 3E 
14242     E0 FF 00 FF 
14246     34 BF 5C C0 | 	byte	$40, $ff, $00, $df, $08, $ff, $db, $3e, $e0, $ff, $00, $ff, $34, $bf, $5c, $c0
1424a     FF 0A 07 00 
1424e     DB DF 3E C0 
14252     FF 28 E0 9F 
14256     70 C0 3F 00 | 	byte	$ff, $0a, $07, $00, $db, $df, $3e, $c0, $ff, $28, $e0, $9f, $70, $c0, $3f, $00
1425a     BF 40 BF 70 
1425e     C1 20 FF 40 
14262     30 00 40 EF 
14266     F8 28 F9 FF | 	byte	$bf, $40, $bf, $70, $c1, $20, $ff, $40, $30, $00, $40, $ef, $f8, $28, $f9, $ff
1426a     00 DF C0 BF 
1426e     20 00 9F 20 
14272     FA E0 FF 00 
14276     FF 00 FF 00 | 	byte	$00, $df, $c0, $bf, $20, $00, $9f, $20, $fa, $e0, $ff, $00, $ff, $00, $ff, $00
1427a     9F 3F E0 FF 
1427e     FF 60 00 FF 
14282     40 BF 78 C1 
14286     60 00 1F 00 | 	byte	$9f, $3f, $e0, $ff, $ff, $60, $00, $ff, $40, $bf, $78, $c1, $60, $00, $1f, $00
1428a     FB FF 1C EF 
1428e     F0 FF 20 EE 
14292     E0 F7 00 BF 
14296     20 CF C1 2F | 	byte	$fb, $ff, $1c, $ef, $f0, $ff, $20, $ee, $e0, $f7, $00, $bf, $20, $cf, $c1, $2f
1429a     00 00 DF 20 
1429e     DF 00 1F 00 
142a2     FF 40 C7 58 
142a6     C7 1F 20 BF | 	byte	$00, $00, $df, $20, $df, $00, $1f, $00, $ff, $40, $c7, $58, $c7, $1f, $20, $bf
142aa     60 C7 40 BF 
142ae     FF 60 8F 60 
142b2     AF 40 87 28 
142b6     FF 00 FF AF | 	byte	$60, $c7, $40, $bf, $ff, $60, $8f, $60, $af, $40, $87, $28, $ff, $00, $ff, $af
142ba     FF DF 30 AF 
142be     38 00 5E 00 
142c2     FF 40 B1 50 
142c6     00 10 2A 00 | 	byte	$ff, $df, $30, $af, $38, $00, $5e, $00, $ff, $40, $b1, $50, $00, $10, $2a, $00
142ca     C7 3E AF 3F 
142ce     00 FF 10 00 
142d2     CF 20 E7 00 
142d6     FF 40 9F 20 | 	byte	$c7, $3e, $af, $3f, $00, $ff, $10, $00, $cf, $20, $e7, $00, $ff, $40, $9f, $20
142da     DF 20 BF 40 
142de     00 3F C0 FF 
142e2     40 BF 40 E3 
142e6     10 E7 FF F0 | 	byte	$df, $20, $bf, $40, $00, $3f, $c0, $ff, $40, $bf, $40, $e3, $10, $e7, $ff, $f0
142ea     FF 20 CF 16 
142ee     BF 5E 9F 3C 
142f2     EF E7 3E 9F 
142f6     3F 00 FF 00 | 	byte	$ff, $20, $cf, $16, $bf, $5e, $9f, $3c, $ef, $e7, $3e, $9f, $3f, $00, $ff, $00
142fa     EF 1B 20 DF 
142fe     00 FF 01 20 
14302     83 FF 00 FF 
14306     D0 3F D0 FF | 	byte	$ef, $1b, $20, $df, $00, $ff, $01, $20, $83, $ff, $00, $ff, $d0, $3f, $d0, $ff
1430a     FF 40 E7 26 
1430e     13 00 DF 00 
14312     DF 00 BF 00 
14316     BF 40 C3 FF | 	byte	$ff, $40, $e7, $26, $13, $00, $df, $00, $df, $00, $bf, $00, $bf, $40, $c3, $ff
1431a     C0 FF 00 E0 
1431e     BF 40 9F 3C 
14322     00 CF 1E 00 
14326     DF 2E BF 3F | 	byte	$c0, $ff, $00, $e0, $bf, $40, $9f, $3c, $00, $cf, $1e, $00, $df, $2e, $bf, $3f
1432a     D0 FF 17 10 
1432e     0F 20 07 00 
14332     FF 40 FF 00 
14336     10 00 1E 00 | 	byte	$d0, $ff, $17, $10, $0f, $20, $07, $00, $ff, $40, $ff, $00, $10, $00, $1e, $00
1433a     FF 00 DF FF 
1433e     D0 BF 00 FF 
14342     D0 FF 00 1F 
14346     00 FF 20 DF | 	byte	$ff, $00, $df, $ff, $d0, $bf, $00, $ff, $d0, $ff, $00, $1f, $00, $ff, $20, $df
1434a     D7 28 BF 3C 
1434e     BF 38 FF E0 
14352     3F 00 FF 20 
14356     FF 00 1F 00 | 	byte	$d7, $28, $bf, $3c, $bf, $38, $ff, $e0, $3f, $00, $ff, $20, $ff, $00, $1f, $00
1435a     3F 87 3F 00 
1435e     DF 20 FF C0 
14362     70 81 30 C3 
14366     1F 00 BF 40 | 	byte	$3f, $87, $3f, $00, $df, $20, $ff, $c0, $70, $81, $30, $c3, $1f, $00, $bf, $40
1436a     DF 20 BF 40 
1436e     DF 00 FF 00 
14372     FF 30 E1 F8 
14376     3F 20 FF 00 | 	byte	$df, $20, $bf, $40, $df, $00, $ff, $00, $ff, $30, $e1, $f8, $3f, $20, $ff, $00
1437a     3F 00 DF 00 
1437e     FF 50 C1 30 
14382     00 F7 00 FF 
14386     00 FF E0 F8 | 	byte	$3f, $00, $df, $00, $ff, $50, $c1, $30, $00, $f7, $00, $ff, $00, $ff, $e0, $f8
1438a     FF E0 FF 00 
1438e     FF 40 DF 40 
14392     9F 0B 1F C9 
14396     FF 1F 3C AF | 	byte	$ff, $e0, $ff, $00, $ff, $40, $df, $40, $9f, $0b, $1f, $c9, $ff, $1f, $3c, $af
1439a     3F C0 3F 00 
1439e     F4 FE FF 40 
143a2     A3 60 C1 1F 
143a6     9F 1F DF 28 | 	byte	$3f, $c0, $3f, $00, $f4, $fe, $ff, $40, $a3, $60, $c1, $1f, $9f, $1f, $df, $28
143aa     D5 FF C0 FF 
143ae     40 9F 30 C0 
143b2     FF 00 DF 08 
143b6     FF C7 FF 00 | 	byte	$d5, $ff, $c0, $ff, $40, $9f, $30, $c0, $ff, $00, $df, $08, $ff, $c7, $ff, $00
143ba     FF 10 FF 0A 
143be     DF 3F 00 BF 
143c2     40 87 FF 00 
143c6     FF 00 EF 00 | 	byte	$ff, $10, $ff, $0a, $df, $3f, $00, $bf, $40, $87, $ff, $00, $ff, $00, $ef, $00
143ca     CF 18 0F C3 
143ce     DF 03 00 EF 
143d2     20 BF 30 E0 
143d6     3F 00 DF 00 | 	byte	$cf, $18, $0f, $c3, $df, $03, $00, $ef, $20, $bf, $30, $e0, $3f, $00, $df, $00
143da     14 C7 20 BF 
143de     00 00 87 7C 
143e2     87 FF 00 D7 
143e6     20 FF 00 DF | 	byte	$14, $c7, $20, $bf, $00, $00, $87, $7c, $87, $ff, $00, $d7, $20, $ff, $00, $df
143ea     28 8F 7E C0 
143ee     3F 00 FF 00 
143f2     FF 70 B7 20 
143f6     EF 10 3C 00 | 	byte	$28, $8f, $7e, $c0, $3f, $00, $ff, $00, $ff, $70, $b7, $20, $ef, $10, $3c, $00
143fa     FF C3 1F 00 
143fe     BF 30 FF 00 
14402     BF 60 C3 FF 
14406     00 AF FF 40 | 	byte	$ff, $c3, $1f, $00, $bf, $30, $ff, $00, $bf, $60, $c3, $ff, $00, $af, $ff, $40
1440a     C5 DF 08 FF 
1440e     18 DF 30 FF 
14412     00 FF 40 0F 
14416     00 FF 10 BF | 	byte	$c5, $df, $08, $ff, $18, $df, $30, $ff, $00, $ff, $40, $0f, $00, $ff, $10, $bf
1441a     40 FF AF FF 
1441e     20 FF 00 F8 
14422     FF 40 AF 1F 
14426     00 DF FF C0 | 	byte	$40, $ff, $af, $ff, $20, $ff, $00, $f8, $ff, $40, $af, $1f, $00, $df, $ff, $c0
1442a     FF 00 C0 FF 
1442e     40 B7 FF 34 
14432     00 FF 40 BF 
14436     60 3C 00 FF | 	byte	$ff, $00, $c0, $ff, $40, $b7, $ff, $34, $00, $ff, $40, $bf, $60, $3c, $00, $ff
1443a     00 FF 10 F0 
1443e     CF 3F 00 BF 
14442     60 83 3F 00 
14446     FF 40 00 BF | 	byte	$00, $ff, $10, $f0, $cf, $3f, $00, $bf, $60, $83, $3f, $00, $ff, $40, $00, $bf
1444a     30 FF 40 DF 
1444e     00 60 C0 FF 
14452     00 DF 00 FF 
14456     C7 5E A7 FF | 	byte	$30, $ff, $40, $df, $00, $60, $c0, $ff, $00, $df, $00, $ff, $c7, $5e, $a7, $ff
1445a     C0 FF 00 F0 
1445e     FF 60 8F 40 
14462     9F FF 20 D7 
14466     20 CF 4C AF | 	byte	$c0, $ff, $00, $f0, $ff, $60, $8f, $40, $9f, $ff, $20, $d7, $20, $cf, $4c, $af
1446a     FF FF 00 00 
1446e     FD F3 40 A3 
14472     1F 07 C0 3F 
14476     00 BF 00 BF | 	byte	$ff, $ff, $00, $00, $fd, $f3, $40, $a3, $1f, $07, $c0, $3f, $00, $bf, $00, $bf
1447a     00 FF 00 FF 
1447e     40 DF 28 D7 
14482     FF 1E C0 FF 
14486     60 BF 30 0F | 	byte	$00, $ff, $00, $ff, $40, $df, $28, $d7, $ff, $1e, $c0, $ff, $60, $bf, $30, $0f
1448a     00 BF 40 BF 
1448e     20 EF 30 E0 
14492     1F 00 DF 00 
14496     FF 28 18 C0 | 	byte	$00, $bf, $40, $bf, $20, $ef, $30, $e0, $1f, $00, $df, $00, $ff, $28, $18, $c0
1449a     FF 00 FF 1E 
1449e     00 FF 1F E2 
144a2     FF BF 3C 9F 
144a6     3C 00 20 C0 | 	byte	$ff, $00, $ff, $1e, $00, $ff, $1f, $e2, $ff, $bf, $3c, $9f, $3c, $00, $20, $c0
144aa     3F 00 FF CF 
144ae     34 AF 3C D7 
144b2     38 CB 50 C0 
144b6     FF 48 00 EF | 	byte	$3f, $00, $ff, $cf, $34, $af, $3c, $d7, $38, $cb, $50, $c0, $ff, $48, $00, $ef
144ba     40 AF 3F 00 
144be     BF 78 8F FF 
144c2     C0 FF 3A 00 
144c6     BF 30 E7 1F | 	byte	$40, $af, $3f, $00, $bf, $78, $8f, $ff, $c0, $ff, $3a, $00, $bf, $30, $e7, $1f
144ca     E0 BF 20 FF 
144ce     F0 10 FF 40 
144d2     9F 40 E3 3F 
144d6     00 BF 1F 48 | 	byte	$e0, $bf, $20, $ff, $f0, $10, $ff, $40, $9f, $40, $e3, $3f, $00, $bf, $1f, $48
144da     DF 10 DF 40 
144de     FF 20 EF 50 
144e2     C3 EF 1F 18 
144e6     00 DF 20 CF | 	byte	$df, $10, $df, $40, $ff, $20, $ef, $50, $c3, $ef, $1f, $18, $00, $df, $20, $cf
144ea     FF 2E 81 BF 
144ee     40 BF 40 8F 
144f2     60 8F E0 DF 
144f6     00 1F 00 D0 | 	byte	$ff, $2e, $81, $bf, $40, $bf, $40, $8f, $60, $8f, $e0, $df, $00, $1f, $00, $d0
144fa     FF 03 1F 10 
144fe     DF 60 00 DD 
14502     3F 00 FF 00 
14506     FF 10 04 08 | 	byte	$ff, $03, $1f, $10, $df, $60, $00, $dd, $3f, $00, $ff, $00, $ff, $10, $04, $08
1450a     00 DF 28 DF 
1450e     08 DF 20 E0 
14512     FF 00 BF 28 
14516     D3 20 C1 17 | 	byte	$00, $df, $28, $df, $08, $df, $20, $e0, $ff, $00, $bf, $28, $d3, $20, $c1, $17
1451a     0F 00 AF 3E 
1451e     E0 FF 2F D0 
14522     FF 00 FF 22 
14526     00 1F CF 3F | 	byte	$0f, $00, $af, $3e, $e0, $ff, $2f, $d0, $ff, $00, $ff, $22, $00, $1f, $cf, $3f
1452a     E0 FF 00 E0 
1452e     EF 38 00 FA 
14532     AF FF 00 FF 
14536     E0 FF FF 40 | 	byte	$e0, $ff, $00, $e0, $ef, $38, $00, $fa, $af, $ff, $00, $ff, $e0, $ff, $ff, $40
1453a     9F 60 AF 40 
1453e     A7 00 AF 40 
14542     9F FF 40 8F 
14546     70 8B FF 40 | 	byte	$9f, $60, $af, $40, $a7, $00, $af, $40, $9f, $ff, $40, $8f, $70, $8b, $ff, $40
1454a     8F 28 C0 FF 
1454e     40 C8 DF 40 
14552     00 FF 80 BF 
14556     50 BF DF 18 | 	byte	$8f, $28, $c0, $ff, $40, $c8, $df, $40, $00, $ff, $80, $bf, $50, $bf, $df, $18
1455a     FF 20 BF 30 
1455e     FF 40 FF 00 
14562     FF 40 AF 38 
14566     9F 7C A1 10 | 	byte	$ff, $20, $bf, $30, $ff, $40, $ff, $00, $ff, $40, $af, $38, $9f, $7c, $a1, $10
1456a     07 00 AF 20 
1456e     CF 28 EF F8 
14572     BF 50 CF 40 
14576     97 70 87 40 | 	byte	$07, $00, $af, $20, $cf, $28, $ef, $f8, $bf, $50, $cf, $40, $97, $70, $87, $40
1457a     9F 10 EF 28 
1457e     E0 FE FF 20 
14582     FF 00 FF 00 
14586     CF 3F 00 FF | 	byte	$9f, $10, $ef, $28, $e0, $fe, $ff, $20, $ff, $00, $ff, $00, $cf, $3f, $00, $ff
1458a     E0 20 00 1F 
1458e     00 FF 00 BF 
14592     20 00 BF 38 
14596     D7 F7 34 E0 | 	byte	$e0, $20, $00, $1f, $00, $ff, $00, $bf, $20, $00, $bf, $38, $d7, $f7, $34, $e0
1459a     FF 00 08 F0 
1459e     FF 30 BF 20 
145a2     DF 1F 00 DF 
145a6     10 E0 EF 3C | 	byte	$ff, $00, $08, $f0, $ff, $30, $bf, $20, $df, $1f, $00, $df, $10, $e0, $ef, $3c
145aa     BF FF EF 20 
145ae     FF 00 FF 60 
145b2     AF 28 00 EF 
145b6     20 E0 FF FF | 	byte	$bf, $ff, $ef, $20, $ff, $00, $ff, $60, $af, $28, $00, $ef, $20, $e0, $ff, $ff
145ba     10 EF D3 FF 
145be     18 C3 FF 00 
145c2     DF 20 BF 1F 
145c6     08 EF 17 20 | 	byte	$10, $ef, $d3, $ff, $18, $c3, $ff, $00, $df, $20, $bf, $1f, $08, $ef, $17, $20
145ca     DF 40 E7 FE 
145ce     EF 38 00 F8 
145d2     FF 40 EF 40 
145d6     8F 6C 9F 3C | 	byte	$df, $40, $e7, $fe, $ef, $38, $00, $f8, $ff, $40, $ef, $40, $8f, $6c, $9f, $3c
145da     AF 30 FF 40 
145de     81 3F 00 FF 
145e2     F0 FF 20 E1 
145e6     F3 FF 12 00 | 	byte	$af, $30, $ff, $40, $81, $3f, $00, $ff, $f0, $ff, $20, $e1, $f3, $ff, $12, $00
145ea     F0 DF 38 F5 
145ee     15 00 BF 10 
145f2     DF 00 1C DF 
145f6     00 FF 00 FF | 	byte	$f0, $df, $38, $f5, $15, $00, $bf, $10, $df, $00, $1c, $df, $00, $ff, $00, $ff
145fa     10 FF 00 DF 
145fe     40 C7 FF 08 
14602     FB 00 10 E0 
14606     28 C3 FF 07 | 	byte	$10, $ff, $00, $df, $40, $c7, $ff, $08, $fb, $00, $10, $e0, $28, $c3, $ff, $07
1460a     00 EF 00 F8 
1460e     FF 00 15 00 
14612     FF 00 FF 00 
14616     FF 00 FF 40 | 	byte	$00, $ef, $00, $f8, $ff, $00, $15, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $40
1461a     FF 00 DF 40 
1461e     CF F3 FF DF 
14622     F4 9F 48 9F 
14626     3C DF F8 FF | 	byte	$ff, $00, $df, $40, $cf, $f3, $ff, $df, $f4, $9f, $48, $9f, $3c, $df, $f8, $ff
1462a     FF 00 BF 20 
1462e     FE FF 28 CF 
14632     58 C1 20 FB 
14636     20 EF 10 E0 | 	byte	$ff, $00, $bf, $20, $fe, $ff, $28, $cf, $58, $c1, $20, $fb, $20, $ef, $10, $e0
1463a     FF 20 D7 0A 
1463e     EF 3C E0 F7 
14642     0F 38 C0 3F 
14646     00 FF 20 DF | 	byte	$ff, $20, $d7, $0a, $ef, $3c, $e0, $f7, $0f, $38, $c0, $3f, $00, $ff, $20, $df
1464a     E0 FF 20 FF 
1464e     20 CF 3F C0 
14652     FF 10 10 D9 
14656     30 C3 2F 00 | 	byte	$e0, $ff, $20, $ff, $20, $cf, $3f, $c0, $ff, $10, $10, $d9, $30, $c3, $2f, $00
1465a     DF CF FF C0 
1465e     FF C0 FF 01 
14662     10 C1 3F 00 
14666     FF CF FF 28 | 	byte	$df, $cf, $ff, $c0, $ff, $c0, $ff, $01, $10, $c1, $3f, $00, $ff, $cf, $ff, $28
1466a     00 FF 00 FF 
1466e     20 DF 20 E7 
14672     00 BF 2F EF 
14676     3C C0 FF 00 | 	byte	$00, $ff, $00, $ff, $20, $df, $20, $e7, $00, $bf, $2f, $ef, $3c, $c0, $ff, $00
1467a     FF 00 1F C3 
1467e     FF 30 CB 40 
14682     A7 FF FF 10 
14686     BF 3E E0 EF | 	byte	$ff, $00, $1f, $c3, $ff, $30, $cb, $40, $a7, $ff, $ff, $10, $bf, $3e, $e0, $ef
1468a     20 D7 FB 40 
1468e     83 3E DF 05 
14692     10 E7 00 FF 
14696     40 D7 1C EF | 	byte	$20, $d7, $fb, $40, $83, $3e, $df, $05, $10, $e7, $00, $ff, $40, $d7, $1c, $ef
1469a     20 CF 30 00 
1469e     1A 00 1F D0 
146a2     FF 30 E0 FF 
146a6     20 FF 00 1E | 	byte	$20, $cf, $30, $00, $1a, $00, $1f, $d0, $ff, $30, $e0, $ff, $20, $ff, $00, $1e
146aa     D0 FF 00 FF 
146ae     00 EF 18 E0 
146b2     CF 40 CF 0F 
146b6     00 BF 60 AF | 	byte	$d0, $ff, $00, $ff, $00, $ef, $18, $e0, $cf, $40, $cf, $0f, $00, $bf, $60, $af
146ba     18 DF 04 FF 
146be     20 BF 3F 00 
146c2     FF C3 FF 20 
146c6     C0 BF 30 F3 | 	byte	$18, $df, $04, $ff, $20, $bf, $3f, $00, $ff, $c3, $ff, $20, $c0, $bf, $30, $f3
146ca     FF 00 BF 3C 
146ce     E9 F0 BF 38 
146d2     00 BF 38 D7 
146d6     10 1E B0 FF | 	byte	$ff, $00, $bf, $3c, $e9, $f0, $bf, $38, $00, $bf, $38, $d7, $10, $1e, $b0, $ff
146da     20 FF 00 DF 
146de     FF 40 C7 0C 
146e2     0F 20 CF FF 
146e6     F9 38 C7 30 | 	byte	$20, $ff, $00, $df, $ff, $40, $c7, $0c, $0f, $20, $cf, $ff, $f9, $38, $c7, $30
146ea     C7 2F C1 FF 
146ee     CF 2C DF F4 
146f2     EF 0B 1E C8 
146f6     FF D9 2C 0A | 	byte	$c7, $2f, $c1, $ff, $cf, $2c, $df, $f4, $ef, $0b, $1e, $c8, $ff, $d9, $2c, $0a
146fa     E0 FF 00 FF 
146fe     00 FF 00 BF 
14702     00 9F 50 DF 
14706     60 C1 28 10 | 	byte	$e0, $ff, $00, $ff, $00, $ff, $00, $bf, $00, $9f, $50, $df, $60, $c1, $28, $10
1470a     EF 18 F4 DF 
1470e     3E E0 20 DF 
14712     70 A7 00 F7 
14716     40 F7 E0 28 | 	byte	$ef, $18, $f4, $df, $3e, $e0, $20, $df, $70, $a7, $00, $f7, $40, $f7, $e0, $28
1471a     E7 10 F0 F7 
1471e     FD 2E 00 D0 
14722     FF 40 E0 EF 
14726     00 FF 00 FF | 	byte	$e7, $10, $f0, $f7, $fd, $2e, $00, $d0, $ff, $40, $e0, $ef, $00, $ff, $00, $ff
1472a     00 D7 1F 00 
1472e     EF FF 30 CF 
14732     30 00 FF 00 
14736     BF 30 00 EF | 	byte	$00, $d7, $1f, $00, $ef, $ff, $30, $cf, $30, $00, $ff, $00, $bf, $30, $00, $ef
1473a     40 C7 FF 30 
1473e     00 E9 FF 1F 
14742     00 FF 00 FF 
14746     00 08 C0 FF | 	byte	$40, $c7, $ff, $30, $00, $e9, $ff, $1f, $00, $ff, $00, $ff, $00, $08, $c0, $ff
1474a     00 FF E0 FF 
1474e     40 C7 00 DF 
14752     00 FF 00 BF 
14756     60 D7 20 D7 | 	byte	$00, $ff, $e0, $ff, $40, $c7, $00, $df, $00, $ff, $00, $bf, $60, $d7, $20, $d7
1475a     13 30 D0 1B 
1475e     00 1F 00 04 
14762     AF 3F 00 FF 
14766     20 CF 3E E0 | 	byte	$13, $30, $d0, $1b, $00, $1f, $00, $04, $af, $3f, $00, $ff, $20, $cf, $3e, $e0
1476a     FF 00 FF 10 
1476e     E7 FF E0 FF 
14772     00 C7 1F CF 
14776     FF E0 FF 00 | 	byte	$ff, $00, $ff, $10, $e7, $ff, $e0, $ff, $00, $c7, $1f, $cf, $ff, $e0, $ff, $00
1477a     0F 00 EF DB 
1477e     FF 40 AB 2D 
14782     00 FF 0F 00 
14786     BF 3E EF FC | 	byte	$0f, $00, $ef, $db, $ff, $40, $ab, $2d, $00, $ff, $0f, $00, $bf, $3e, $ef, $fc
1478a     BF 60 C0 F7 
1478e     F7 20 D0 FF 
14792     00 FF 20 DF 
14796     E0 FF 20 BF | 	byte	$bf, $60, $c0, $f7, $f7, $20, $d0, $ff, $00, $ff, $20, $df, $e0, $ff, $20, $bf
1479a     00 BF 3C 00 
1479e     BF 2C ED 18 
147a2     FF 20 DF 60 
147a6     E8 E7 FF 3F | 	byte	$00, $bf, $3c, $00, $bf, $2c, $ed, $18, $ff, $20, $df, $60, $e8, $e7, $ff, $3f
147aa     E0 F0 FF 20 
147ae     F9 F0 C7 1F 
147b2     00 00 C7 FF 
147b6     20 FE C0 FF | 	byte	$e0, $f0, $ff, $20, $f9, $f0, $c7, $1f, $00, $00, $c7, $ff, $20, $fe, $c0, $ff
147ba     00 FF 00 BF 
147be     30 00 17 00 
147c2     FF 00 EF DF 
147c6     1F F7 1C D0 | 	byte	$00, $ff, $00, $bf, $30, $00, $17, $00, $ff, $00, $ef, $df, $1f, $f7, $1c, $d0
147ca     FF 2C D0 DF 
147ce     1F CF FF E0 
147d2     BF 00 30 CF 
147d6     18 FF 00 DF | 	byte	$ff, $2c, $d0, $df, $1f, $cf, $ff, $e0, $bf, $00, $30, $cf, $18, $ff, $00, $df
147da     15 00 DF 70 
147de     A1 29 07 00 
147e2     EF EB 10 CF 
147e6     40 AF FF 00 | 	byte	$15, $00, $df, $70, $a1, $29, $07, $00, $ef, $eb, $10, $cf, $40, $af, $ff, $00
147ea     FF 00 EF 40 
147ee     CF 3C 00 FF 
147f2     20 EF 00 DF 
147f6     08 FF 00 BF | 	byte	$ff, $00, $ef, $40, $cf, $3c, $00, $ff, $20, $ef, $00, $df, $08, $ff, $00, $bf
147fa     20 D5 FF C7 
147fe     FF 00 FF 00 
14802     E7 00 F7 10 
14806     D0 FF 40 CF | 	byte	$20, $d5, $ff, $c7, $ff, $00, $ff, $00, $e7, $00, $f7, $10, $d0, $ff, $40, $cf
1480a     08 CF 3F 00 
1480e     FF 20 FF 20 
14812     FC C7 2B 00 
14816     FF 20 EF 20 | 	byte	$08, $cf, $3f, $00, $ff, $20, $ff, $20, $fc, $c7, $2b, $00, $ff, $20, $ef, $20
1481a     C7 FF 10 DF 
1481e     30 D1 FF D3 
14822     FF F0 FF 00 
14826     FF 40 BF 3E | 	byte	$c7, $ff, $10, $df, $30, $d1, $ff, $d3, $ff, $f0, $ff, $00, $ff, $40, $bf, $3e
1482a     D0 FF 40 AF 
1482e     3E CF 2C BF 
14832     50 BF 50 D1 
14836     2F C1 FF 00 | 	byte	$d0, $ff, $40, $af, $3e, $cf, $2c, $bf, $50, $bf, $50, $d1, $2f, $c1, $ff, $00
1483a     CF 20 00 F0 
1483e     FF 00 DF 08 
14842     DF FF 1A D7 
14846     FF F0 FF 00 | 	byte	$cf, $20, $00, $f0, $ff, $00, $df, $08, $df, $ff, $1a, $d7, $ff, $f0, $ff, $00
1484a     07 00 DF 10 
1484e     DF 20 00 FF 
14852     00 FF 00 FF 
14856     00 FF 10 DF | 	byte	$07, $00, $df, $10, $df, $20, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $10, $df
1485a     40 C3 FF 00 
1485e     E7 10 F7 00 
14862     BF 20 EF 00 
14866     D1 FF 00 F7 | 	byte	$40, $c3, $ff, $00, $e7, $10, $f7, $00, $bf, $20, $ef, $00, $d1, $ff, $00, $f7
1486a     00 DF 30 00 
1486e     FF 00 20 00 
14872     FF 00 FF F0 
14876     FE EB 28 00 | 	byte	$00, $df, $30, $00, $ff, $00, $20, $00, $ff, $00, $ff, $f0, $fe, $eb, $28, $00
1487a     CF 1F DF 18 
1487e     1F C0 FF 00 
14882     FF 00 FF 00 
14886     30 81 FF 10 | 	byte	$cf, $1f, $df, $18, $1f, $c0, $ff, $00, $ff, $00, $ff, $00, $30, $81, $ff, $10
1488a     CB 30 C0 FF 
1488e     10 E0 FF 08 
14892     F8 EB 1E 00 
14896     FF 08 E0 FF | 	byte	$cb, $30, $c0, $ff, $10, $e0, $ff, $08, $f8, $eb, $1e, $00, $ff, $08, $e0, $ff
1489a     10 1E E8 FB 
1489e     FF 18 FF 20 
148a2     BF 10 FF D0 
148a6     FF 00 ED FF | 	byte	$10, $1e, $e8, $fb, $ff, $18, $ff, $20, $bf, $10, $ff, $d0, $ff, $00, $ed, $ff
148aa     F0 E0 FF 10 
148ae     BF 40 E7 20 
148b2     F8 D1 27 00 
148b6     F0 EF 0F 30 | 	byte	$f0, $e0, $ff, $10, $bf, $40, $e7, $20, $f8, $d1, $27, $00, $f0, $ef, $0f, $30
148ba     E0 F3 FF 40 
148be     C3 20 F0 F3 
148c2     20 C1 FF 00 
148c6     FA FF 00 BF | 	byte	$e0, $f3, $ff, $40, $c3, $20, $f0, $f3, $20, $c1, $ff, $00, $fa, $ff, $00, $bf
148ca     20 D7 DF 3C 
148ce     EB 18 00 DF 
148d2     40 E0 E7 28 
148d6     E0 FF 10 F7 | 	byte	$20, $d7, $df, $3c, $eb, $18, $00, $df, $40, $e0, $e7, $28, $e0, $ff, $10, $f7
148da     20 00 E7 10 
148de     1F 20 FF 40 
148e2     DF 00 F7 1C 
148e6     E0 FF 00 FF | 	byte	$20, $00, $e7, $10, $1f, $20, $ff, $40, $df, $00, $f7, $1c, $e0, $ff, $00, $ff
148ea     00 00 EF 00 
148ee     FF E0 FF 00 
148f2     DF 20 E0 FF 
148f6     02 07 E7 10 | 	byte	$00, $00, $ef, $00, $ff, $e0, $ff, $00, $df, $20, $e0, $ff, $02, $07, $e7, $10
148fa     BF 48 AF FF 
148fe     20 CF 1F CF 
14902     FF 00 FF 00 
14906     EF 10 DF 18 | 	byte	$bf, $48, $af, $ff, $20, $cf, $1f, $cf, $ff, $00, $ff, $00, $ef, $10, $df, $18
1490a     E1 1F 00 DF 
1490e     00 1F D0 FF 
14912     00 FF 40 DB 
14916     FF 18 EB 10 | 	byte	$e1, $1f, $00, $df, $00, $1f, $d0, $ff, $00, $ff, $40, $db, $ff, $18, $eb, $10
1491a     F3 00 1F 00 
1491e     DF 10 08 F7 
14922     E0 FF 10 DF 
14926     20 C5 FC FF | 	byte	$f3, $00, $1f, $00, $df, $10, $08, $f7, $e0, $ff, $10, $df, $20, $c5, $fc, $ff
1492a     00 EC EF 10 
1492e     E0 FF D3 FF 
14932     00 FF D0 FF 
14936     40 DF 00 FF | 	byte	$00, $ec, $ef, $10, $e0, $ff, $d3, $ff, $00, $ff, $d0, $ff, $40, $df, $00, $ff
1493a     20 E0 FF 00 
1493e     FF 00 F8 EB 
14942     3F 00 FF 00 
14946     E7 FF 00 9F | 	byte	$20, $e0, $ff, $00, $ff, $00, $f8, $eb, $3f, $00, $ff, $00, $e7, $ff, $00, $9f
1494a     50 EB F0 EF 
1494e     00 10 00 FF 
14952     00 FF 00 EA 
14956     DF 2E 00 FF | 	byte	$50, $eb, $f0, $ef, $00, $10, $00, $ff, $00, $ff, $00, $ea, $df, $2e, $00, $ff
1495a     00 1C E0 FF 
1495e     00 DF 58 00 
14962     FD FF 20 DF 
14966     20 C7 00 CF | 	byte	$00, $1c, $e0, $ff, $00, $df, $58, $00, $fd, $ff, $20, $df, $20, $c7, $00, $cf
1496a     02 FF C0 FF 
1496e     00 FF 40 CF 
14972     1D 00 DF 20 
14976     EB 0F 00 CF | 	byte	$02, $ff, $c0, $ff, $00, $ff, $40, $cf, $1d, $00, $df, $20, $eb, $0f, $00, $cf
1497a     FF 40 CF F0 
1497e     FF 00 FF 00 
14982     FF 00 FF E0 
14986     20 E3 38 00 | 	byte	$ff, $40, $cf, $f0, $ff, $00, $ff, $00, $ff, $00, $ff, $e0, $20, $e3, $38, $00
1498a     D1 1F 00 F8 
1498e     C3 1F D7 FF 
14992     E0 FF 20 C7 
14996     20 BF 3F 20 | 	byte	$d1, $1f, $00, $f8, $c3, $1f, $d7, $ff, $e0, $ff, $20, $c7, $20, $bf, $3f, $20
1499a     AF 40 AF 3A 
1499e     00 DB FF 07 
149a2     20 BF 3E BF 
149a6     38 EF 08 FF | 	byte	$af, $40, $af, $3a, $00, $db, $ff, $07, $20, $bf, $3e, $bf, $38, $ef, $08, $ff
149aa     20 FC C5 30 
149ae     E7 50 D1 E0 
149b2     FF 00 BF 10 
149b6     BF 3E C0 FF | 	byte	$20, $fc, $c5, $30, $e7, $50, $d1, $e0, $ff, $00, $bf, $10, $bf, $3e, $c0, $ff
149ba     00 DF 3C A0 
149be     FF 40 CF 10 
149c2     DF 14 0F 00 
149c6     FF 2F 00 DF | 	byte	$00, $df, $3c, $a0, $ff, $40, $cf, $10, $df, $14, $0f, $00, $ff, $2f, $00, $df
149ca     00 DF 40 D0 
149ce     FF E3 2F 00 
149d2     FF 20 AF 1F 
149d6     00 EF 0F 00 | 	byte	$00, $df, $40, $d0, $ff, $e3, $2f, $00, $ff, $20, $af, $1f, $00, $ef, $0f, $00
149da     BF 10 BF 18 
149de     00 BF 70 C0 
149e2     FF 00 0F 00 
149e6     FF 20 FF 30 | 	byte	$bf, $10, $bf, $18, $00, $bf, $70, $c0, $ff, $00, $0f, $00, $ff, $20, $ff, $30
149ea     FF 60 A7 64 
149ee     C6 FF 20 F4 
149f2     FB 18 08 D0 
149f6     FF 00 FF 00 | 	byte	$ff, $60, $a7, $64, $c6, $ff, $20, $f4, $fb, $18, $08, $d0, $ff, $00, $ff, $00
149fa     DF 00 FF 00 
149fe     F6 E7 16 EF 
14a02     08 BF 20 F0 
14a06     20 C1 3F 00 | 	byte	$df, $00, $ff, $00, $f6, $e7, $16, $ef, $08, $bf, $20, $f0, $20, $c1, $3f, $00
14a0a     BF 40 E3 F7 
14a0e     1F 00 FF 10 
14a12     04 04 FF 00 
14a16     FF 20 EF 00 | 	byte	$bf, $40, $e3, $f7, $1f, $00, $ff, $10, $04, $04, $ff, $00, $ff, $20, $ef, $00
14a1a     FF 00 FF 00 
14a1e     DF 00 F7 CF 
14a22     4E C0 FF 20 
14a26     DF 2E 00 0E | 	byte	$ff, $00, $ff, $00, $df, $00, $f7, $cf, $4e, $c0, $ff, $20, $df, $2e, $00, $0e
14a2a     E7 FF 0F 00 
14a2e     FF E0 FF 40 
14a32     9F 40 00 C1 
14a36     FF 00 FF 40 | 	byte	$e7, $ff, $0f, $00, $ff, $e0, $ff, $40, $9f, $40, $00, $c1, $ff, $00, $ff, $40
14a3a     BF 1F 10 F7 
14a3e     EC EF 30 00 
14a42     FF E4 EF 3F 
14a46     00 9F 3C 20 | 	byte	$bf, $1f, $10, $f7, $ec, $ef, $30, $00, $ff, $e4, $ef, $3f, $00, $9f, $3c, $20
14a4a     DF 12 EF 07 
14a4e     28 C3 FF 10 
14a52     1E E0 FF 20 
14a56     00 CF 30 C3 | 	byte	$df, $12, $ef, $07, $28, $c3, $ff, $10, $1e, $e0, $ff, $20, $00, $cf, $30, $c3
14a5a     FF E0 DF 20 
14a5e     E1 FF 1C E0 
14a62     10 0F 00 CF 
14a66     FF 30 00 FF | 	byte	$ff, $e0, $df, $20, $e1, $ff, $1c, $e0, $10, $0f, $00, $cf, $ff, $30, $00, $ff
14a6a     00 9F 3F 20 
14a6e     BF 30 DF 1C 
14a72     FA 0F 1E E0 
14a76     FF 00 FF E9 | 	byte	$00, $9f, $3f, $20, $bf, $30, $df, $1c, $fa, $0f, $1e, $e0, $ff, $00, $ff, $e9
14a7a     08 EC DF 3E 
14a7e     C0 DF 00 F7 
14a82     E0 BF 30 08 
14a86     E0 EF 0F 40 | 	byte	$08, $ec, $df, $3e, $c0, $df, $00, $f7, $e0, $bf, $30, $08, $e0, $ef, $0f, $40
14a8a     BF 60 C0 38 
14a8e     08 00 FF 10 
14a92     EF EF FF 00 
14a96     FF D7 FF F5 | 	byte	$bf, $60, $c0, $38, $08, $00, $ff, $10, $ef, $ef, $ff, $00, $ff, $d7, $ff, $f5
14a9a     FF 00 C7 3E 
14a9e     DF EE FF 07 
14aa2     00 DF C1 1F 
14aa6     00 BF FF 00 | 	byte	$ff, $00, $c7, $3e, $df, $ee, $ff, $07, $00, $df, $c1, $1f, $00, $bf, $ff, $00
14aaa     EF E1 FF 30 
14aae     00 E0 FF 60 
14ab2     C7 FF 00 DF 
14ab6     60 C0 FF 00 | 	byte	$ef, $e1, $ff, $30, $00, $e0, $ff, $60, $c7, $ff, $00, $df, $60, $c0, $ff, $00
14aba     F0 DF 20 DF 
14abe     38 C0 EF 10 
14ac2     04 E0 EF 38 
14ac6     C0 20 C7 20 | 	byte	$f0, $df, $20, $df, $38, $c0, $ef, $10, $04, $e0, $ef, $38, $c0, $20, $c7, $20
14aca     CF FF EF 07 
14ace     18 00 D0 FF 
14ad2     34 E0 FF 20 
14ad6     E7 18 00 FF | 	byte	$cf, $ff, $ef, $07, $18, $00, $d0, $ff, $34, $e0, $ff, $20, $e7, $18, $00, $ff
14ada     00 DF 40 CF 
14ade     20 BF 30 BF 
14ae2     30 C7 1F 00 
14ae6     FF 10 C3 1F | 	byte	$00, $df, $40, $cf, $20, $bf, $30, $bf, $30, $c7, $1f, $00, $ff, $10, $c3, $1f
14aea     10 D0 FF 20 
14aee     D8 FF 20 C7 
14af2     2F 00 FF 10 
14af6     18 E0 FF 00 | 	byte	$10, $d0, $ff, $20, $d8, $ff, $20, $c7, $2f, $00, $ff, $10, $18, $e0, $ff, $00
14afa     1F 00 DB 3E 
14afe     00 DF 10 CF 
14b02     10 FF 00 FF 
14b06     00 DF 20 C1 | 	byte	$1f, $00, $db, $3e, $00, $df, $10, $cf, $10, $ff, $00, $ff, $00, $df, $20, $c1
14b0a     FF E0 FF 00 
14b0e     FF 00 EB FF 
14b12     20 FF 00 EF 
14b16     20 CF 5C B7 | 	byte	$ff, $e0, $ff, $00, $ff, $00, $eb, $ff, $20, $ff, $00, $ef, $20, $cf, $5c, $b7
14b1a     FF 00 08 EF 
14b1e     0E 00 DF 20 
14b22     D0 FF 00 EF 
14b26     14 00 EF 24 | 	byte	$ff, $00, $08, $ef, $0e, $00, $df, $20, $d0, $ff, $00, $ef, $14, $00, $ef, $24
14b2a     00 FF 00 DF 
14b2e     40 C0 FF 40 
14b32     CF 40 C5 EF 
14b36     2F 00 C7 FF | 	byte	$00, $ff, $00, $df, $40, $c0, $ff, $40, $cf, $40, $c5, $ef, $2f, $00, $c7, $ff
14b3a     00 EF 00 FF 
14b3e     00 DF 10 DF 
14b42     20 00 D0 FF 
14b46     00 FF 00 EF | 	byte	$00, $ef, $00, $ff, $00, $df, $10, $df, $20, $00, $d0, $ff, $00, $ff, $00, $ef
14b4a     00 FF 10 E7 
14b4e     13 20 E0 FF 
14b52     3E CA 3E E0 
14b56     FF 02 00 E3 | 	byte	$00, $ff, $10, $e7, $13, $20, $e0, $ff, $3e, $ca, $3e, $e0, $ff, $02, $00, $e3
14b5a     EF 1C 00 FF 
14b5e     00 1F 00 DF 
14b62     10 DF 20 E0 
14b66     FF 00 EF 0F | 	byte	$ef, $1c, $00, $ff, $00, $1f, $00, $df, $10, $df, $20, $e0, $ff, $00, $ef, $0f
14b6a     00 FF D7 FF 
14b6e     00 FF 20 D7 
14b72     10 0F 00 BF 
14b76     20 FF 20 DB | 	byte	$00, $ff, $d7, $ff, $00, $ff, $20, $d7, $10, $0f, $00, $bf, $20, $ff, $20, $db
14b7a     30 00 17 00 
14b7e     DF 38 00 F0 
14b82     DF 20 CF FF 
14b86     E8 FF 10 E7 | 	byte	$30, $00, $17, $00, $df, $38, $00, $f0, $df, $20, $cf, $ff, $e8, $ff, $10, $e7
14b8a     FF 10 14 00 
14b8e     FF 00 EF 08 
14b92     EF 04 E0 FF 
14b96     20 BF 40 BF | 	byte	$ff, $10, $14, $00, $ff, $00, $ef, $08, $ef, $04, $e0, $ff, $20, $bf, $40, $bf
14b9a     1E FF 00 FF 
14b9e     20 DF 19 10 
14ba2     BF 60 C3 FF 
14ba6     00 FF 00 FF | 	byte	$1e, $ff, $00, $ff, $20, $df, $19, $10, $bf, $60, $c3, $ff, $00, $ff, $00, $ff
14baa     DF 38 E0 FF 
14bae     20 BF 48 9F 
14bb2     FF 20 E8 F7 
14bb6     0D 0D 00 E7 | 	byte	$df, $38, $e0, $ff, $20, $bf, $48, $9f, $ff, $20, $e8, $f7, $0d, $0d, $00, $e7
14bba     00 FF 00 DF 
14bbe     F6 FF 10 DF 
14bc2     20 CF 3F 00 
14bc6     BF 20 DF 20 | 	byte	$00, $ff, $00, $df, $f6, $ff, $10, $df, $20, $cf, $3f, $00, $bf, $20, $df, $20
14bca     C7 FF 20 D3 
14bce     FF 01 02 EF 
14bd2     00 BF 50 BF 
14bd6     30 00 04 06 | 	byte	$c7, $ff, $20, $d3, $ff, $01, $02, $ef, $00, $bf, $50, $bf, $30, $00, $04, $06
14bda     F0 1F 00 DF 
14bde     00 0F C7 FF 
14be2     00 FF D0 FF 
14be6     E0 FF 00 CF | 	byte	$f0, $1f, $00, $df, $00, $0f, $c7, $ff, $00, $ff, $d0, $ff, $e0, $ff, $00, $cf
14bea     10 F2 10 F9 
14bee     10 CF 40 00 
14bf2     EF 3C 00 FF 
14bf6     00 FF 20 F7 | 	byte	$10, $f2, $10, $f9, $10, $cf, $40, $00, $ef, $3c, $00, $ff, $00, $ff, $20, $f7
14bfa     00 E7 3A 10 
14bfe     B0 FF 00 FF 
14c02     00 FF FF 20 
14c06     BF FF 0B 00 | 	byte	$00, $e7, $3a, $10, $b0, $ff, $00, $ff, $00, $ff, $ff, $20, $bf, $ff, $0b, $00
14c0a     E0 EF 00 EF 
14c0e     20 BF FF F1 
14c12     20 F0 E7 28 
14c16     00 FF 00 FF | 	byte	$e0, $ef, $00, $ef, $20, $bf, $ff, $f1, $20, $f0, $e7, $28, $00, $ff, $00, $ff
14c1a     07 12 E8 FF 
14c1e     10 00 FF 28 
14c22     D7 30 EB 00 
14c26     FF 00 FF 00 | 	byte	$07, $12, $e8, $ff, $10, $00, $ff, $28, $d7, $30, $eb, $00, $ff, $00, $ff, $00
14c2a     FF 00 1F C0 
14c2e     FF 00 EB 1F 
14c32     00 BF 30 C3 
14c36     FF 00 DF 10 | 	byte	$ff, $00, $1f, $c0, $ff, $00, $eb, $1f, $00, $bf, $30, $c3, $ff, $00, $df, $10
14c3a     E1 10 EF 20 
14c3e     E7 00 FF 20 
14c42     EF E7 FF 08 
14c46     1F E0 FF 60 | 	byte	$e1, $10, $ef, $20, $e7, $00, $ff, $20, $ef, $e7, $ff, $08, $1f, $e0, $ff, $60
14c4a     A7 FF 00 FF 
14c4e     40 DF 20 DF 
14c52     1F 00 EB FF 
14c56     E8 FF 10 C1 | 	byte	$a7, $ff, $00, $ff, $40, $df, $20, $df, $1f, $00, $eb, $ff, $e8, $ff, $10, $c1
14c5a     FF 10 D3 18 
14c5e     E0 FF 10 D0 
14c62     FF 04 FB FE 
14c66     FF DF 3F BF | 	byte	$ff, $10, $d3, $18, $e0, $ff, $10, $d0, $ff, $04, $fb, $fe, $ff, $df, $3f, $bf
14c6a     FF E0 FF 00 
14c6e     FF 00 FF 10 
14c72     DF FF 00 FF 
14c76     00 FF E0 FF | 	byte	$ff, $e0, $ff, $00, $ff, $00, $ff, $10, $df, $ff, $00, $ff, $00, $ff, $e0, $ff
14c7a     20 BF 2F 00 
14c7e     FF 00 BF 40 
14c82     DF 20 CF 00 
14c86     F7 00 E0 EF | 	byte	$20, $bf, $2f, $00, $ff, $00, $bf, $40, $df, $20, $cf, $00, $f7, $00, $e0, $ef
14c8a     40 BF 28 CF 
14c8e     3E 00 FF 00 
14c92     FF 00 BF 00 
14c96     FF 20 EB 20 | 	byte	$40, $bf, $28, $cf, $3e, $00, $ff, $00, $ff, $00, $bf, $00, $ff, $20, $eb, $20
14c9a     CF 2F 00 FE 
14c9e     DF 18 00 F7 
14ca2     14 AF 3F 00 
14ca6     DF 20 DF 00 | 	byte	$cf, $2f, $00, $fe, $df, $18, $00, $f7, $14, $af, $3f, $00, $df, $20, $df, $00
14caa     FF E0 DF 58 
14cae     C0 FF 00 EF 
14cb2     20 DF 28 01 
14cb6     FF F0 FF 10 | 	byte	$ff, $e0, $df, $58, $c0, $ff, $00, $ef, $20, $df, $28, $01, $ff, $f0, $ff, $10
14cba     FF 40 AF 60 
14cbe     C7 20 C7 FF 
14cc2     10 FE E0 FF 
14cc6     3C AF FF E0 | 	byte	$ff, $40, $af, $60, $c7, $20, $c7, $ff, $10, $fe, $e0, $ff, $3c, $af, $ff, $e0
14cca     FF 00 EF 00 
14cce     FF 20 BF 30 
14cd2     00 20 C1 26 
14cd6     E1 FF 00 E1 | 	byte	$ff, $00, $ef, $00, $ff, $20, $bf, $30, $00, $20, $c1, $26, $e1, $ff, $00, $e1
14cda     FF 10 FF EE 
14cde     FF E0 FF 00 
14ce2     DF 40 CF 20 
14ce6     EF 10 BF 50 | 	byte	$ff, $10, $ff, $ee, $ff, $e0, $ff, $00, $df, $40, $cf, $20, $ef, $10, $bf, $50
14cea     00 BF 30 BF 
14cee     58 C0 FF 08 
14cf2     FF 08 FF 00 
14cf6     EF 60 8F 3F | 	byte	$00, $bf, $30, $bf, $58, $c0, $ff, $08, $ff, $08, $ff, $00, $ef, $60, $8f, $3f
14cfa     00 DB 17 00 
14cfe     FF F0 FF 00 
14d02     FF 20 CF 20 
14d06     DF 00 FF E3 | 	byte	$00, $db, $17, $00, $ff, $f0, $ff, $00, $ff, $20, $cf, $20, $df, $00, $ff, $e3
14d0a     0F F7 00 00 
14d0e     CF 1F D0 FF 
14d12     20 DF 13 00 
14d16     FF 00 FF E0 | 	byte	$0f, $f7, $00, $00, $cf, $1f, $d0, $ff, $20, $df, $13, $00, $ff, $00, $ff, $e0
14d1a     FF 00 EF 00 
14d1e     BF 30 E0 FF 
14d22     20 BF FF 00 
14d26     FF 00 E7 FF | 	byte	$ff, $00, $ef, $00, $bf, $30, $e0, $ff, $20, $bf, $ff, $00, $ff, $00, $e7, $ff
14d2a     23 00 BF 38 
14d2e     00 EF 00 EF 
14d32     14 00 F7 F6 
14d36     FF 00 1F E0 | 	byte	$23, $00, $bf, $38, $00, $ef, $00, $ef, $14, $00, $f7, $f6, $ff, $00, $1f, $e0
14d3a     DF 30 E9 FF 
14d3e     10 F0 1F 00 
14d42     FF 00 0F E7 
14d46     00 BF 3E C0 | 	byte	$df, $30, $e9, $ff, $10, $f0, $1f, $00, $ff, $00, $0f, $e7, $00, $bf, $3e, $c0
14d4a     FF 00 00 FF 
14d4e     F0 FF 00 DF 
14d52     FF 10 E3 1A 
14d56     E0 FF 20 00 | 	byte	$ff, $00, $00, $ff, $f0, $ff, $00, $df, $ff, $10, $e3, $1a, $e0, $ff, $20, $00
14d5a     00 F7 1C 00 
14d5e     FF 00 FF 00 
14d62     FC FF 20 DB 
14d66     00 07 00 FF | 	byte	$00, $f7, $1c, $00, $ff, $00, $ff, $00, $fc, $ff, $20, $db, $00, $07, $00, $ff
14d6a     00 BF 30 CB 
14d6e     FF 00 EF 00 
14d72     DF 20 ED F8 
14d76     F7 20 E0 FF | 	byte	$00, $bf, $30, $cb, $ff, $00, $ef, $00, $df, $20, $ed, $f8, $f7, $20, $e0, $ff
14d7a     10 FF 20 EF 
14d7e     00 CF 2C DF 
14d82     38 B7 3E 00 
14d86     18 C1 FF 08 | 	byte	$10, $ff, $20, $ef, $00, $cf, $2c, $df, $38, $b7, $3e, $00, $18, $c1, $ff, $08
14d8a     F0 F7 00 0F 
14d8e     D3 FF E0 FF 
14d92     20 CB 17 00 
14d96     EF 20 DF 20 | 	byte	$f0, $f7, $00, $0f, $d3, $ff, $e0, $ff, $20, $cb, $17, $00, $ef, $20, $df, $20
14d9a     FF 00 F7 04 
14d9e     DF 28 E2 FF 
14da2     00 FF 20 BF 
14da6     28 F7 30 C1 | 	byte	$ff, $00, $f7, $04, $df, $28, $e2, $ff, $00, $ff, $20, $bf, $28, $f7, $30, $c1
14daa     1F 00 DF 30 
14dae     E0 FF 0D 00 
14db2     C7 2F E0 F7 
14db6     10 A7 4F A7 | 	byte	$1f, $00, $df, $30, $e0, $ff, $0d, $00, $c7, $2f, $e0, $f7, $10, $a7, $4f, $a7
14dba     FF C8 FF 00 
14dbe     E7 E8 1F 00 
14dc2     DF 00 FF 28 
14dc6     00 EF 00 FF | 	byte	$ff, $c8, $ff, $00, $e7, $e8, $1f, $00, $df, $00, $ff, $28, $00, $ef, $00, $ff
14dca     20 BF 20 FF 
14dce     40 C3 0A DF 
14dd2     3C E0 DF 20 
14dd6     E7 EB EF 0C | 	byte	$20, $bf, $20, $ff, $40, $c3, $0a, $df, $3c, $e0, $df, $20, $e7, $eb, $ef, $0c
14dda     E0 FF 00 AF 
14dde     3E C0 FF 02 
14de2     08 DF 20 CB 
14de6     2A 00 FF 00 | 	byte	$e0, $ff, $00, $af, $3e, $c0, $ff, $02, $08, $df, $20, $cb, $2a, $00, $ff, $00
14dea     FD FF 20 F7 
14dee     E0 FF 20 EF 
14df2     00 FF 00 EF 
14df6     16 E8 28 E0 | 	byte	$fd, $ff, $20, $f7, $e0, $ff, $20, $ef, $00, $ff, $00, $ef, $16, $e8, $28, $e0
14dfa     22 00 FF 08 
14dfe     D0 FF 00 DF 
14e02     00 DF 10 FB 
14e06     FF 00 0F 00 | 	byte	$22, $00, $ff, $08, $d0, $ff, $00, $df, $00, $df, $10, $fb, $ff, $00, $0f, $00
14e0a     FF EF 16 E6 
14e0e     FF 10 E7 FF 
14e12     12 00 FF 10 
14e16     DF 18 14 DD | 	byte	$ff, $ef, $16, $e6, $ff, $10, $e7, $ff, $12, $00, $ff, $10, $df, $18, $14, $dd
14e1a     FF EF 38 D3 
14e1e     20 E3 20 C7 
14e22     FF 00 FF 12 
14e26     00 DF 30 FF | 	byte	$ff, $ef, $38, $d3, $20, $e3, $20, $c7, $ff, $00, $ff, $12, $00, $df, $30, $ff
14e2a     00 FF 00 FF 
14e2e     00 DF 18 00 
14e32     EF 00 EF 10 
14e36     EF F8 EF 17 | 	byte	$00, $ff, $00, $ff, $00, $df, $18, $00, $ef, $00, $ef, $10, $ef, $f8, $ef, $17
14e3a     10 D0 DF 2A 
14e3e     00 FF E7 1E 
14e42     00 FF 00 EF 
14e46     1C 10 DF 10 | 	byte	$10, $d0, $df, $2a, $00, $ff, $e7, $1e, $00, $ff, $00, $ef, $1c, $10, $df, $10
14e4a     F7 17 EA F6 
14e4e     FF 30 BF 28 
14e52     00 00 E5 FF 
14e56     14 0F 10 CB | 	byte	$f7, $17, $ea, $f6, $ff, $30, $bf, $28, $00, $00, $e5, $ff, $14, $0f, $10, $cb
14e5a     FF 2F 20 BF 
14e5e     1C EF 20 FC 
14e62     F0 EF 10 F3 
14e66     00 FF 00 FF | 	byte	$ff, $2f, $20, $bf, $1c, $ef, $20, $fc, $f0, $ef, $10, $f3, $00, $ff, $00, $ff
14e6a     00 DF 00 1F 
14e6e     C7 FF 00 FF 
14e72     05 F0 FF 20 
14e76     EB FC E7 FF | 	byte	$00, $df, $00, $1f, $c7, $ff, $00, $ff, $05, $f0, $ff, $20, $eb, $fc, $e7, $ff
14e7a     00 E2 EF 1E 
14e7e     00 FF 00 1F 
14e82     00 DF 00 FF 
14e86     10 F0 EF 28 | 	byte	$00, $e2, $ef, $1e, $00, $ff, $00, $1f, $00, $df, $00, $ff, $10, $f0, $ef, $28
14e8a     00 F7 00 EF 
14e8e     2A 00 DF 00 
14e92     EF 00 07 E3 
14e96     16 E7 1F E8 | 	byte	$00, $f7, $00, $ef, $2a, $00, $df, $00, $ef, $00, $07, $e3, $16, $e7, $1f, $e8
14e9a     FF 00 F7 F8 
14e9e     F5 FF 00 F3 
14ea2     F3 0B 00 FF 
14ea6     00 FF 20 DF | 	byte	$ff, $00, $f7, $f8, $f5, $ff, $00, $f3, $f3, $0b, $00, $ff, $00, $ff, $20, $df
14eaa     20 FF F0 FF 
14eae     00 08 00 F0 
14eb2     FF 20 DF F1 
14eb6     FF 30 D0 EF | 	byte	$20, $ff, $f0, $ff, $00, $08, $00, $f0, $ff, $20, $df, $f1, $ff, $30, $d0, $ef
14eba     20 DF 10 DF 
14ebe     EF 3F 00 FF 
14ec2     40 DF 00 EF 
14ec6     00 18 E3 FB | 	byte	$20, $df, $10, $df, $ef, $3f, $00, $ff, $40, $df, $00, $ef, $00, $18, $e3, $fb
14eca     F7 0F EF FF 
14ece     D7 FF 00 FF 
14ed2     00 EF 10 FF 
14ed6     00 DF 40 D3 | 	byte	$f7, $0f, $ef, $ff, $d7, $ff, $00, $ff, $00, $ef, $10, $ff, $00, $df, $40, $d3
14eda     0F E3 FF 10 
14ede     C1 3F 00 FF 
14ee2     00 DF 0F 1C 
14ee6     D7 FF 00 FF | 	byte	$0f, $e3, $ff, $10, $c1, $3f, $00, $ff, $00, $df, $0f, $1c, $d7, $ff, $00, $ff
14eea     1C F0 DF 18 
14eee     F3 FF FB F7 
14ef2     00 F7 00 DF 
14ef6     14 EF 1C EF | 	byte	$1c, $f0, $df, $18, $f3, $ff, $fb, $f7, $00, $f7, $00, $df, $14, $ef, $1c, $ef
14efa     20 FF 20 DF 
14efe     20 D7 14 00 
14f02     D3 2F 00 DF 
14f06     1B 00 BF 3E | 	byte	$20, $ff, $20, $df, $20, $d7, $14, $00, $d3, $2f, $00, $df, $1b, $00, $bf, $3e
14f0a     E0 FF 00 F7 
14f0e     1F 00 CF 12 
14f12     FF 10 CF FF 
14f16     00 0F 00 EF | 	byte	$e0, $ff, $00, $f7, $1f, $00, $cf, $12, $ff, $10, $cf, $ff, $00, $0f, $00, $ef
14f1a     08 FF DF FF 
14f1e     00 FE DF 1C 
14f22     FF 10 FF 00 
14f26     DF 20 E7 E7 | 	byte	$08, $ff, $df, $ff, $00, $fe, $df, $1c, $ff, $10, $ff, $00, $df, $20, $e7, $e7
14f2a     FF 0B 10 C3 
14f2e     FF 10 FF 00 
14f32     F4 FF 40 C0 
14f36     FF 0B 10 CF | 	byte	$ff, $0b, $10, $c3, $ff, $10, $ff, $00, $f4, $ff, $40, $c0, $ff, $0b, $10, $cf
14f3a     04 DF 2C F0 
14f3e     CF FF 18 00 
14f42     DF DF 1F 10 
14f46     C0 DF 2E 10 | 	byte	$04, $df, $2c, $f0, $cf, $ff, $18, $00, $df, $df, $1f, $10, $c0, $df, $2e, $10
14f4a     D7 FE EF 1E 
14f4e     E0 DF 24 E7 
14f52     FF E0 FF 20 
14f56     10 C1 3C 00 | 	byte	$d7, $fe, $ef, $1e, $e0, $df, $24, $e7, $ff, $e0, $ff, $20, $10, $c1, $3c, $00
14f5a     FF 00 EF 20 
14f5e     F1 20 C7 FF 
14f62     17 00 CF 1C 
14f66     DF 10 F7 E8 | 	byte	$ff, $00, $ef, $20, $f1, $20, $c7, $ff, $17, $00, $cf, $1c, $df, $10, $f7, $e8
14f6a     FF 00 DF 20 
14f6e     FF 00 FF 00 
14f72     DF 18 02 DF 
14f76     FF 00 FF 20 | 	byte	$ff, $00, $df, $20, $ff, $00, $ff, $00, $df, $18, $02, $df, $ff, $00, $ff, $20
14f7a     DF 1E 00 EB 
14f7e     FF 00 FF 20 
14f82     DF 20 07 00 
14f86     EF 00 BF 3C | 	byte	$df, $1e, $00, $eb, $ff, $00, $ff, $20, $df, $20, $07, $00, $ef, $00, $bf, $3c
14f8a     C1 FF 20 E0 
14f8e     EF 0F 08 D3 
14f92     2B 00 DF 08 
14f96     DF 0F 00 DF | 	byte	$c1, $ff, $20, $e0, $ef, $0f, $08, $d3, $2b, $00, $df, $08, $df, $0f, $00, $df
14f9a     F0 FF 20 ED 
14f9e     FA F8 FF 38 
14fa2     E0 FF FF 10 
14fa6     E7 20 D7 1F | 	byte	$f0, $ff, $20, $ed, $fa, $f8, $ff, $38, $e0, $ff, $ff, $10, $e7, $20, $d7, $1f
14faa     08 E3 0F 00 
14fae     FF 00 EF 1F 
14fb2     00 DF 20 EF 
14fb6     F0 FF FC FF | 	byte	$08, $e3, $0f, $00, $ff, $00, $ef, $1f, $00, $df, $20, $ef, $f0, $ff, $fc, $ff
14fba     1E 00 BF 40 
14fbe     00 00 DF 0C 
14fc2     FF 00 DF 30 
14fc6     F0 E0 FF 00 | 	byte	$1e, $00, $bf, $40, $00, $00, $df, $0c, $ff, $00, $df, $30, $f0, $e0, $ff, $00
14fca     FF 00 CF 10 
14fce     00 0A 00 CF 
14fd2     3F 00 FF 20 
14fd6     F7 00 EF 05 | 	byte	$ff, $00, $cf, $10, $00, $0a, $00, $cf, $3f, $00, $ff, $20, $f7, $00, $ef, $05
14fda     00 FF 00 E7 
14fde     E1 2F 00 EF 
14fe2     F8 FF 10 E7 
14fe6     FF 00 FF 10 | 	byte	$00, $ff, $00, $e7, $e1, $2f, $00, $ef, $f8, $ff, $10, $e7, $ff, $00, $ff, $10
14fea     BF 30 D3 FF 
14fee     00 E0 FF 20 
14ff2     C4 FF 00 DF 
14ff6     14 F0 FF 10 | 	byte	$bf, $30, $d3, $ff, $00, $e0, $ff, $20, $c4, $ff, $00, $df, $14, $f0, $ff, $10
14ffa     CF 18 F7 20 
14ffe     F5 F8 EF 30 
15002     F7 10 DF 1A 
15006     10 D1 17 00 | 	byte	$cf, $18, $f7, $20, $f5, $f8, $ef, $30, $f7, $10, $df, $1a, $10, $d1, $17, $00
1500a     1F C3 FF 00 
1500e     FF 00 DF 00 
15012     13 00 FF 08 
15016     EF 08 E0 FF | 	byte	$1f, $c3, $ff, $00, $ff, $00, $df, $00, $13, $00, $ff, $08, $ef, $08, $e0, $ff
1501a     20 DF 10 E3 
1501e     FF 08 EF 08 
15022     FA FB 1E 00 
15026     FF E8 FF 0F | 	byte	$20, $df, $10, $e3, $ff, $08, $ef, $08, $fa, $fb, $1e, $00, $ff, $e8, $ff, $0f
1502a     10 F7 00 F7 
1502e     10 DF 1E DF 
15032     FF 00 FF 00 
15036     DF 2C E0 FF | 	byte	$10, $f7, $00, $f7, $10, $df, $1e, $df, $ff, $00, $ff, $00, $df, $2c, $e0, $ff
1503a     00 00 D7 20 
1503e     C3 FF 00 EF 
15042     08 EF 10 CF 
15046     1F DF 30 BF | 	byte	$00, $00, $d7, $20, $c3, $ff, $00, $ef, $08, $ef, $10, $cf, $1f, $df, $30, $bf
1504a     38 00 00 FE 
1504e     F7 38 00 FF 
15052     00 EF 00 DF 
15056     00 FF 20 E3 | 	byte	$38, $00, $00, $fe, $f7, $38, $00, $ff, $00, $ef, $00, $df, $00, $ff, $20, $e3
1505a     F8 FF 20 C7 
1505e     FF 00 FF 00 
15062     F7 16 00 FF 
15066     00 F7 16 00 | 	byte	$f8, $ff, $20, $c7, $ff, $00, $ff, $00, $f7, $16, $00, $ff, $00, $f7, $16, $00
1506a     E5 FF 10 EF 
1506e     20 E7 13 00 
15072     FF 00 FF 10 
15076     E1 10 D7 FF | 	byte	$e5, $ff, $10, $ef, $20, $e7, $13, $00, $ff, $00, $ff, $10, $e1, $10, $d7, $ff
1507a     10 F0 E7 18 
1507e     00 FF 00 EF 
15082     24 BF FF 00 
15086     FF 18 D0 FF | 	byte	$10, $f0, $e7, $18, $00, $ff, $00, $ef, $24, $bf, $ff, $00, $ff, $18, $d0, $ff
1508a     20 DF 00 EF 
1508e     00 FF 00 FF 
15092     00 FF 00 F7 
15096     16 00 FF 00 | 	byte	$20, $df, $00, $ef, $00, $ff, $00, $ff, $00, $ff, $00, $f7, $16, $00, $ff, $00
1509a     DF 20 00 D3 
1509e     FF 00 DF FF 
150a2     00 10 E0 DF 
150a6     1C 00 20 C0 | 	byte	$df, $20, $00, $d3, $ff, $00, $df, $ff, $00, $10, $e0, $df, $1c, $00, $20, $c0
150aa     1F 00 F5 FF 
150ae     04 F7 FF F0 
150b2     FF 2F 00 FF 
150b6     FB 2F 00 EF | 	byte	$1f, $00, $f5, $ff, $04, $f7, $ff, $f0, $ff, $2f, $00, $ff, $fb, $2f, $00, $ef
150ba     00 BF 20 CF 
150be     18 EF 30 00 
150c2     FF 00 FF 00 
150c6     BF 18 00 FF | 	byte	$00, $bf, $20, $cf, $18, $ef, $30, $00, $ff, $00, $ff, $00, $bf, $18, $00, $ff
150ca     00 DF 30 D7 
150ce     10 00 F8 08 
150d2     EB F8 FF 10 
150d6     EF 00 EF 20 | 	byte	$00, $df, $30, $d7, $10, $00, $f8, $08, $eb, $f8, $ff, $10, $ef, $00, $ef, $20
150da     DF 14 FF 10 
150de     EF 0F 10 FF 
150e2     00 F7 00 FF 
150e6     20 DF 10 C7 | 	byte	$df, $14, $ff, $10, $ef, $0f, $10, $ff, $00, $f7, $00, $ff, $20, $df, $10, $c7
150ea     FF 00 FF 00 
150ee     CF 3C D4 FF 
150f2     00 EF 08 F3 
150f6     FF 17 00 DF | 	byte	$ff, $00, $ff, $00, $cf, $3c, $d4, $ff, $00, $ef, $08, $f3, $ff, $17, $00, $df
150fa     28 00 FF 20 
150fe     DF 30 00 F8 
15102     FD 04 08 FF 
15106     00 F7 08 F7 | 	byte	$28, $00, $ff, $20, $df, $30, $00, $f8, $fd, $04, $08, $ff, $00, $f7, $08, $f7
1510a     00 D7 00 FF 
1510e     00 DF FF 00 
15112     EF 10 DF 20 
15116     DF 18 F5 10 | 	byte	$00, $d7, $00, $ff, $00, $df, $ff, $00, $ef, $10, $df, $20, $df, $18, $f5, $10
1511a     E3 16 E0 FF 
1511e     20 DB 20 D7 
15122     FF 00 FF 08 
15126     E7 FF 00 FF | 	byte	$e3, $16, $e0, $ff, $20, $db, $20, $d7, $ff, $00, $ff, $08, $e7, $ff, $00, $ff
1512a     F0 FF 00 FF 
1512e     00 1F 00 EF 
15132     00 EF 28 00 
15136     FF 08 F7 00 | 	byte	$f0, $ff, $00, $ff, $00, $1f, $00, $ef, $00, $ef, $28, $00, $ff, $08, $f7, $00
1513a     F5 FF 19 00 
1513e     CF 20 CF 34 
15142     CF FF 00 FF 
15146     00 04 E7 FF | 	byte	$f5, $ff, $19, $00, $cf, $20, $cf, $34, $cf, $ff, $00, $ff, $00, $04, $e7, $ff
1514a     F0 FF 08 FE 
1514e     F7 10 D7 30 
15152     00 08 CB 17 
15156     E7 0F E7 FF | 	byte	$f0, $ff, $08, $fe, $f7, $10, $d7, $30, $00, $08, $cb, $17, $e7, $0f, $e7, $ff
1515a     0B 00 FF EF 
1515e     0C 07 00 FF 
15162     18 00 10 06 
15166     00 FF 00 0F | 	byte	$0b, $00, $ff, $ef, $0c, $07, $00, $ff, $18, $00, $10, $06, $00, $ff, $00, $0f
1516a     00 F1 E3 16 
1516e     E7 FF 00 EF 
15172     10 DB FF 00 
15176     EF 00 EF 20 | 	byte	$00, $f1, $e3, $16, $e7, $ff, $00, $ef, $10, $db, $ff, $00, $ef, $00, $ef, $20
1517a     00 D1 FF 1E 
1517e     00 FF 10 E2 
15182     FF 00 0C F3 
15186     30 00 EF 00 | 	byte	$00, $d1, $ff, $1e, $00, $ff, $10, $e2, $ff, $00, $0c, $f3, $30, $00, $ef, $00
1518a     DF 28 C9 FF 
1518e     00 DF 10 00 
15192     FF 18 E0 FF 
15196     00 EF 10 CF | 	byte	$df, $28, $c9, $ff, $00, $df, $10, $00, $ff, $18, $e0, $ff, $00, $ef, $10, $cf
1519a     FF 00 FF E5 
1519e     10 E1 17 00 
151a2     FF 00 E9 FF 
151a6     00 DF 18 F1 | 	byte	$ff, $00, $ff, $e5, $10, $e1, $17, $00, $ff, $00, $e9, $ff, $00, $df, $18, $f1
151aa     00 E7 FF 00 
151ae     FF 00 FF 20 
151b2     FF 00 FF 00 
151b6     DF 20 EB FF | 	byte	$00, $e7, $ff, $00, $ff, $00, $ff, $20, $ff, $00, $ff, $00, $df, $20, $eb, $ff
151ba     10 DF 0E FF 
151be     1C E0 FF 1C 
151c2     DF FF 00 F7 
151c6     10 E0 FF 00 | 	byte	$10, $df, $0e, $ff, $1c, $e0, $ff, $1c, $df, $ff, $00, $f7, $10, $e0, $ff, $00
151ca     FF E0 14 00 
151ce     EF 18 E4 E7 
151d2     1F E7 FF 00 
151d6     FF 00 13 00 | 	byte	$ff, $e0, $14, $00, $ef, $18, $e4, $e7, $1f, $e7, $ff, $00, $ff, $00, $13, $00
151da     FF 00 FF 00 
151de     EF 28 00 EF 
151e2     10 E0 2F 00 
151e6     BF 1C 00 DF | 	byte	$ff, $00, $ff, $00, $ef, $28, $00, $ef, $10, $e0, $2f, $00, $bf, $1c, $00, $df
151ea     FF 00 FF 00 
151ee     D7 00 DF 08 
151f2     EF 00 FF 00 
151f6     FF 00 FF 00 | 	byte	$ff, $00, $ff, $00, $d7, $00, $df, $08, $ef, $00, $ff, $00, $ff, $00, $ff, $00
151fa     10 EF 20 EF 
151fe     00 F7 00 00 
15202     FF 00 D7 1F 
15206     00 DF FF 00 | 	byte	$10, $ef, $20, $ef, $00, $f7, $00, $00, $ff, $00, $d7, $1f, $00, $df, $ff, $00
1520a     FF 00 EB 05 
1520e     00 F0 20 00 
15212     FF 00 DF 0A 
15216     07 00 F7 10 | 	byte	$ff, $00, $eb, $05, $00, $f0, $20, $00, $ff, $00, $df, $0a, $07, $00, $f7, $10
1521a     FF 00 FF 00 
1521e     DF 28 BF 1C 
15222     FF F8 FF 00 
15226     FF 00 F7 00 | 	byte	$ff, $00, $ff, $00, $df, $28, $bf, $1c, $ff, $f8, $ff, $00, $ff, $00, $f7, $00
1522a     FF 00 FF 00 
1522e     FF 10 DF 30 
15232     E7 FF 10 D3 
15236     FF 00 0D E7 | 	byte	$ff, $00, $ff, $00, $ff, $10, $df, $30, $e7, $ff, $10, $d3, $ff, $00, $0d, $e7
1523a     FF 03 04 EF 
1523e     28 DF 1C 00 
15242     FF 10 F0 FF 
15246     00 FC F7 08 | 	byte	$ff, $03, $04, $ef, $28, $df, $1c, $00, $ff, $10, $f0, $ff, $00, $fc, $f7, $08
1524a     FF 00 DF 08 
1524e     FF 03 00 CF 
15252     2F E0 FF 00 
15256     EF FF ED FF | 	byte	$ff, $00, $df, $08, $ff, $03, $00, $cf, $2f, $e0, $ff, $00, $ef, $ff, $ed, $ff
1525a     06 F0 FF F7 
1525e     0E 0B 00 FF 
15262     FF 00 0F 00 
15266     EF 14 FB 10 | 	byte	$06, $f0, $ff, $f7, $0e, $0b, $00, $ff, $ff, $00, $0f, $00, $ef, $14, $fb, $10
1526a     E9 FF 08 DF 
1526e     FF 01 04 E3 
15272     F4 EF 04 07 
15276     00 DF 24 00 | 	byte	$e9, $ff, $08, $df, $ff, $01, $04, $e3, $f4, $ef, $04, $07, $00, $df, $24, $00
1527a     FF 08 00 FF 
1527e     00 EF 20 00 
15282     E3 FF 00 FF 
15286     00 FF 00 FF | 	byte	$ff, $08, $00, $ff, $00, $ef, $20, $00, $e3, $ff, $00, $ff, $00, $ff, $00, $ff
1528a     12 E8 FF 20 
1528e     EF 10 F0 FF 
15292     10 00 FF FD 
15296     F5 16 00 EF | 	byte	$12, $e8, $ff, $20, $ef, $10, $f0, $ff, $10, $00, $ff, $fd, $f5, $16, $00, $ef
1529a     00 FF 00 EF 
1529e     FF 18 E0 1E 
152a2     00 FF 00 EF 
152a6     16 00 EF 00 | 	byte	$00, $ff, $00, $ef, $ff, $18, $e0, $1e, $00, $ff, $00, $ef, $16, $00, $ef, $00
152aa     FB 04 00 FF 
152ae     00 FF 00 EF 
152b2     E7 1F 00 FF 
152b6     00 FF 10 F0 | 	byte	$fb, $04, $00, $ff, $00, $ff, $00, $ef, $e7, $1f, $00, $ff, $00, $ff, $10, $f0
152ba     EF 20 00 FF 
152be     00 FF 10 F8 
152c2     E0 FF 10 10 
152c6     D3 20 00 F7 | 	byte	$ef, $20, $00, $ff, $00, $ff, $10, $f8, $e0, $ff, $10, $10, $d3, $20, $00, $f7
152ca     04 FB 10 00 
152ce     F0 FF 08 E3 
152d2     FE EF 1C E0 
152d6     FF 00 EF 1F | 	byte	$04, $fb, $10, $00, $f0, $ff, $08, $e3, $fe, $ef, $1c, $e0, $ff, $00, $ef, $1f
152da     00 EF 40 CF 
152de     02 FF FB 11 
152e2     E7 FF FF 0F 
152e6     00 DF 06 F7 | 	byte	$00, $ef, $40, $cf, $02, $ff, $fb, $11, $e7, $ff, $ff, $0f, $00, $df, $06, $f7
152ea     00 EF 00 FF 
152ee     18 F7 00 FE 
152f2     F7 18 E0 FF 
152f6     00 FF 00 DF | 	byte	$00, $ef, $00, $ff, $18, $f7, $00, $fe, $f7, $18, $e0, $ff, $00, $ff, $00, $df
152fa     18 00 EF 14 
152fe     F4 FE F3 FF 
15302     0C ED FF 08 
15306     04 FB 00 FF | 	byte	$18, $00, $ef, $14, $f4, $fe, $f3, $ff, $0c, $ed, $ff, $08, $04, $fb, $00, $ff
1530a     16 F2 FF F4 
1530e     FF 10 E3 FF 
15312     10 EF 20 DF 
15316     10 DF 04 EF | 	byte	$16, $f2, $ff, $f4, $ff, $10, $e3, $ff, $10, $ef, $20, $df, $10, $df, $04, $ef
1531a     00 EF 10 EF 
1531e     F9 FF 0F 00 
15322     DF 20 00 FF 
15326     00 F7 18 00 | 	byte	$00, $ef, $10, $ef, $f9, $ff, $0f, $00, $df, $20, $00, $ff, $00, $f7, $18, $00
1532a     FF 0A 00 FF 
1532e     00 DF 20 DF 
15332     08 FB 10 00 
15336     E8 FF 00 EB | 	byte	$ff, $0a, $00, $ff, $00, $df, $20, $df, $08, $fb, $10, $00, $e8, $ff, $00, $eb
1533a     FF F0 FF 00 
1533e     F0 EF 20 F3 
15342     10 C7 1F 00 
15346     FF 00 EF 0F | 	byte	$ff, $f0, $ff, $00, $f0, $ef, $20, $f3, $10, $c7, $1f, $00, $ff, $00, $ef, $0f
1534a     10 EB 10 E9 
1534e     0F 00 EF FF 
15352     00 FF 00 FF 
15356     08 FF F0 FF | 	byte	$10, $eb, $10, $e9, $0f, $00, $ef, $ff, $00, $ff, $00, $ff, $08, $ff, $f0, $ff
1535a     00 FF 00 EF 
1535e     07 F0 EF 00 
15362     FF 00 DF 16 
15366     08 D7 1F 00 | 	byte	$00, $ff, $00, $ef, $07, $f0, $ef, $00, $ff, $00, $df, $16, $08, $d7, $1f, $00
1536a     FF 04 0C 00 
1536e     FE FF 08 FF 
15372     00 0E 00 FC 
15376     EB 20 D1 FF | 	byte	$ff, $04, $0c, $00, $fe, $ff, $08, $ff, $00, $0e, $00, $fc, $eb, $20, $d1, $ff
1537a     00 F7 0F 00 
1537e     FF 00 FB F7 
15382     00 EF 28 E0 
15386     FF 20 D7 FF | 	byte	$00, $f7, $0f, $00, $ff, $00, $fb, $f7, $00, $ef, $28, $e0, $ff, $20, $d7, $ff
1538a     00 08 00 FF 
1538e     00 27 C3 FF 
15392     00 FF 10 E7 
15396     0F 00 FF 10 | 	byte	$00, $08, $00, $ff, $00, $27, $c3, $ff, $00, $ff, $10, $e7, $0f, $00, $ff, $10
1539a     D7 1F 00 FF 
1539e     E7 FF 00 F7 
153a2     12 E8 FF 10 
153a6     F7 00 FF 00 | 	byte	$d7, $1f, $00, $ff, $e7, $ff, $00, $f7, $12, $e8, $ff, $10, $f7, $00, $ff, $00
153aa     17 00 FF 0B 
153ae     00 EF 02 00 
153b2     F7 10 D7 17 
153b6     EF 08 DF FF | 	byte	$17, $00, $ff, $0b, $00, $ef, $02, $00, $f7, $10, $d7, $17, $ef, $08, $df, $ff
153ba     00 F7 FA FF 
153be     10 00 FF 08 
153c2     F6 FF 0B 00 
153c6     FF 00 F1 FF | 	byte	$00, $f7, $fa, $ff, $10, $00, $ff, $08, $f6, $ff, $0b, $00, $ff, $00, $f1, $ff
153ca     10 FF F0 FF 
153ce     10 F8 F7 10 
153d2     EF 20 E3 F8 
153d6     F7 00 FF 00 | 	byte	$10, $ff, $f0, $ff, $10, $f8, $f7, $10, $ef, $20, $e3, $f8, $f7, $00, $ff, $00
153da     DF 38 00 ED 
153de     FB 10 00 00 
153e2     EF 00 EF 0F 
153e6     00 F7 10 F0 | 	byte	$df, $38, $00, $ed, $fb, $10, $00, $00, $ef, $00, $ef, $0f, $00, $f7, $10, $f0
153ea     FF 00 1E 00 
153ee     DF 1F 00 FF 
153f2     00 F7 00 08 
153f6     F1 00 E7 18 | 	byte	$ff, $00, $1e, $00, $df, $1f, $00, $ff, $00, $f7, $00, $08, $f1, $00, $e7, $18
153fa     00 E5 FF 18 
153fe     DF F8 FF 30 
15402     00 DF 18 F3 
15406     10 F3 F8 FF | 	byte	$00, $e5, $ff, $18, $df, $f8, $ff, $30, $00, $df, $18, $f3, $10, $f3, $f8, $ff
1540a     00 E7 F1 0F 
1540e     10 DF FF 00 
15412     0F 00 DF 14 
15416     FF F8 FF 00 | 	byte	$00, $e7, $f1, $0f, $10, $df, $ff, $00, $0f, $00, $df, $14, $ff, $f8, $ff, $00
1541a     FB 00 EF 14 
1541e     EB FF 00 DF 
15422     1F 00 EF 08 
15426     00 FB F7 00 | 	byte	$fb, $00, $ef, $14, $eb, $ff, $00, $df, $1f, $00, $ef, $08, $00, $fb, $f7, $00
1542a     EF 08 EF FE 
1542e     E9 20 00 FF 
15432     00 FF 00 F0 
15436     FF 20 E0 FF | 	byte	$ef, $08, $ef, $fe, $e9, $20, $00, $ff, $00, $ff, $00, $f0, $ff, $20, $e0, $ff
1543a     02 00 FF F0 
1543e     FF 00 EF 00 
15442     DF 1C 00 DF 
15446     1A FF 04 EF | 	byte	$02, $00, $ff, $f0, $ff, $00, $ef, $00, $df, $1c, $00, $df, $1a, $ff, $04, $ef
1544a     FF FB F4 FF 
1544e     0A E1 FF 18 
15452     F7 08 F7 08 
15456     E3 FF 20 E0 | 	byte	$ff, $fb, $f4, $ff, $0a, $e1, $ff, $18, $f7, $08, $f7, $08, $e3, $ff, $20, $e0
1545a     FF E3 FF 00 
1545e     FF EF 14 FB 
15462     10 D1 FF 08 
15466     E8 F0 FF 20 | 	byte	$ff, $e3, $ff, $00, $ff, $ef, $14, $fb, $10, $d1, $ff, $08, $e8, $f0, $ff, $20
1546a     00 EF F7 FF 
1546e     07 08 E0 FF 
15472     10 EF 08 EF 
15476     FF 00 EF 10 | 	byte	$00, $ef, $f7, $ff, $07, $08, $e0, $ff, $10, $ef, $08, $ef, $ff, $00, $ef, $10
1547a     03 00 E7 FF 
1547e     10 F2 FF 00 
15482     F7 02 10 D3 
15486     30 00 FF 00 | 	byte	$03, $00, $e7, $ff, $10, $f2, $ff, $00, $f7, $02, $10, $d3, $30, $00, $ff, $00
1548a     FF 10 E3 EF 
1548e     01 08 00 E8 
15492     FF 08 DF 10 
15496     FF 00 FF D7 | 	byte	$ff, $10, $e3, $ef, $01, $08, $00, $e8, $ff, $08, $df, $10, $ff, $00, $ff, $d7
1549a     FF F7 18 E0 
1549e     FF 05 00 F7 
154a2     00 DF FF 0B 
154a6     00 F7 FF 07 | 	byte	$ff, $f7, $18, $e0, $ff, $05, $00, $f7, $00, $df, $ff, $0b, $00, $f7, $ff, $07
154aa     00 DF 20 D7 
154ae     FF E8 FF 10 
154b2     F1 F5 18 00 
154b6     FF 00 FF 08 | 	byte	$00, $df, $20, $d7, $ff, $e8, $ff, $10, $f1, $f5, $18, $00, $ff, $00, $ff, $08
154ba     FE EF 1E 10 
154be     00 DF 1F 00 
154c2     F7 00 0F 00 
154c6     FF EF FF F0 | 	byte	$fe, $ef, $1e, $10, $00, $df, $1f, $00, $f7, $00, $0f, $00, $ff, $ef, $ff, $f0
154ca     FF 00 DF 28 
154ce     F0 FA FF 10 
154d2     F7 00 FF 00 
154d6     EB FF 00 F7 | 	byte	$ff, $00, $df, $28, $f0, $fa, $ff, $10, $f7, $00, $ff, $00, $eb, $ff, $00, $f7
154da     13 00 FF E3 
154de     FF 10 00 FF 
154e2     20 EF 10 FB 
154e6     05 00 FD 00 | 	byte	$13, $00, $ff, $e3, $ff, $10, $00, $ff, $20, $ef, $10, $fb, $05, $00, $fd, $00
154ea     FF 0F 00 DF 
154ee     1F 00 EF 00 
154f2     FF 03 00 C7 
154f6     FF 00 FE EF | 	byte	$ff, $0f, $00, $df, $1f, $00, $ef, $00, $ff, $03, $00, $c7, $ff, $00, $fe, $ef
154fa     00 FF 20 EF 
154fe     10 DF 22 EE 
15502     FD FF 00 FF 
15506     00 FF 20 EF | 	byte	$00, $ff, $20, $ef, $10, $df, $22, $ee, $fd, $ff, $00, $ff, $00, $ff, $20, $ef
1550a     00 F7 08 F7 
1550e     F7 FF 08 F0 
15512     F7 0C F8 F4 
15516     F7 00 FF F7 | 	byte	$00, $f7, $08, $f7, $f7, $ff, $08, $f0, $f7, $0c, $f8, $f4, $f7, $00, $ff, $f7
1551a     08 EF 28 E0 
1551e     FF 08 00 F1 
15522     F5 17 00 FF 
15526     00 EF 0C 0A | 	byte	$08, $ef, $28, $e0, $ff, $08, $00, $f1, $f5, $17, $00, $ff, $00, $ef, $0c, $0a
1552a     F0 FF 10 CF 
1552e     1F 00 FF 00 
15532     FF 00 FF 00 
15536     00 EF 00 E7 | 	byte	$f0, $ff, $10, $cf, $1f, $00, $ff, $00, $ff, $00, $ff, $00, $00, $ef, $00, $e7
1553a     10 EF 00 FF 
1553e     00 FF 00 FF 
15542     10 F7 00 FF 
15546     10 FF 00 FF | 	byte	$10, $ef, $00, $ff, $00, $ff, $00, $ff, $10, $f7, $00, $ff, $10, $ff, $00, $ff
1554a     28 E7 EF 1C 
1554e     F0 FF 00 EF 
15552     00 EF 00 DF 
15556     1C 00 E7 0A | 	byte	$28, $e7, $ef, $1c, $f0, $ff, $00, $ef, $00, $ef, $00, $df, $1c, $00, $e7, $0a
1555a     F0 FF 10 D7 
1555e     FF 0F 00 FF 
15562     00 FF 10 F7 
15566     00 FF 10 F3 | 	byte	$f0, $ff, $10, $d7, $ff, $0f, $00, $ff, $00, $ff, $10, $f7, $00, $ff, $10, $f3
1556a     F3 0F 10 EF 
1556e     10 E5 1F 00 
15572     EF 02 FF FF 
15576     00 DF 30 CF | 	byte	$f3, $0f, $10, $ef, $10, $e5, $1f, $00, $ef, $02, $ff, $ff, $00, $df, $30, $cf
1557a     18 EF 20 EF 
1557e     00 EF 10 FF 
15582     02 F0 FF 10 
15586     F2 FF 00 FF | 	byte	$18, $ef, $20, $ef, $00, $ef, $10, $ff, $02, $f0, $ff, $10, $f2, $ff, $00, $ff
1558a     00 F7 00 FF 
1558e     00 EF 10 F7 
15592     10 FD 00 F7 
15596     0F 00 ED 17 | 	byte	$00, $f7, $00, $ff, $00, $ef, $10, $f7, $10, $fd, $00, $f7, $0f, $00, $ed, $17
1559a     00 DF 18 FF 
1559e     00 F7 00 FF 
155a2     00 FF 00 EF 
155a6     14 E8 FF 10 | 	byte	$00, $df, $18, $ff, $00, $f7, $00, $ff, $00, $ff, $00, $ef, $14, $e8, $ff, $10
155aa     EF 16 EF 10 
155ae     F3 18 E0 0F 
155b2     00 FF 20 E1 
155b6     FB F7 04 E7 | 	byte	$ef, $16, $ef, $10, $f3, $18, $e0, $0f, $00, $ff, $20, $e1, $fb, $f7, $04, $e7
155ba     0F F0 FF 08 
155be     D7 FF EC FF 
155c2     F0 FF 10 00 
155c6     EF 10 F7 00 | 	byte	$0f, $f0, $ff, $08, $d7, $ff, $ec, $ff, $f0, $ff, $10, $00, $ef, $10, $f7, $00
155ca     FF F0 18 00 
155ce     EF 10 FB 00 
155d2     FF 0E 00 FF 
155d6     00 0F F8 FF | 	byte	$ff, $f0, $18, $00, $ef, $10, $fb, $00, $ff, $0e, $00, $ff, $00, $0f, $f8, $ff
155da     F0 FF 00 E7 
155de     00 EF 00 F7 
155e2     01 F0 DF 18 
155e6     00 E7 FF 08 | 	byte	$f0, $ff, $00, $e7, $00, $ef, $00, $f7, $01, $f0, $df, $18, $00, $e7, $ff, $08
155ea     00 FF 00 FF 
155ee     08 E9 08 00 
155f2     1F 00 DF 30 
155f6     E7 0E 00 F7 | 	byte	$00, $ff, $00, $ff, $08, $e9, $08, $00, $1f, $00, $df, $30, $e7, $0e, $00, $f7
155fa     10 FF 00 FF 
155fe     00 F8 ED 10 
15602     00 F0 FF 00 
15606     FF 00 E7 FD | 	byte	$10, $ff, $00, $ff, $00, $f8, $ed, $10, $00, $f0, $ff, $00, $ff, $00, $e7, $fd
1560a     02 F3 FF E8 
1560e     FF 00 EF 14 
15612     F0 FF 10 E3 
15616     17 00 FF 00 | 	byte	$02, $f3, $ff, $e8, $ff, $00, $ef, $14, $f0, $ff, $10, $e3, $17, $00, $ff, $00
1561a     FF 00 FF 00 
1561e     F7 00 FF 00 
15622     EF 10 F1 FF 
15626     08 F0 FF 00 | 	byte	$ff, $00, $ff, $00, $f7, $00, $ff, $00, $ef, $10, $f1, $ff, $08, $f0, $ff, $00
1562a     FF 00 EF 00 
1562e     FF 10 DF 00 
15632     FF 00 DF 00 
15636     EF 10 EF FE | 	byte	$ff, $00, $ef, $00, $ff, $10, $df, $00, $ff, $00, $df, $00, $ef, $10, $ef, $fe
1563a     FF 00 FF 20 
1563e     E3 00 EF 10 
15642     FF 00 FF 18 
15646     EF 18 F3 00 | 	byte	$ff, $00, $ff, $20, $e3, $00, $ef, $10, $ff, $00, $ff, $18, $ef, $18, $f3, $00
1564a     FD 06 00 FF 
1564e     10 D7 FF 10 
15652     EF FF 0A F2 
15656     FF 00 EF 0C | 	byte	$fd, $06, $00, $ff, $10, $d7, $ff, $10, $ef, $ff, $0a, $f2, $ff, $00, $ef, $0c
1565a     EF 04 FF 00 
1565e     FF 00 EF 10 
15662     FF 00 EF 14 
15666     F7 EC FF 10 | 	byte	$ef, $04, $ff, $00, $ff, $00, $ef, $10, $ff, $00, $ef, $14, $f7, $ec, $ff, $10
1566a     F7 00 EB 06 
1566e     EF 1C CF FF 
15672     04 F8 FF 10 
15676     FB 10 E7 FF | 	byte	$f7, $00, $eb, $06, $ef, $1c, $cf, $ff, $04, $f8, $ff, $10, $fb, $10, $e7, $ff
1567a     18 00 F3 FF 
1567e     06 00 F3 00 
15682     F1 08 00 F9 
15686     0B 00 DF FF | 	byte	$18, $00, $f3, $ff, $06, $00, $f3, $00, $f1, $08, $00, $f9, $0b, $00, $df, $ff
1568a     07 00 F0 F7 
1568e     18 00 F7 00 
15692     EF 12 F3 FF 
15696     FF 00 FF 00 | 	byte	$07, $00, $f0, $f7, $18, $00, $f7, $00, $ef, $12, $f3, $ff, $ff, $00, $ff, $00
1569a     F7 10 F7 10 
1569e     DF 14 EF FF 
156a2     FF 10 EF 08 
156a6     00 F2 FF 02 | 	byte	$f7, $10, $f7, $10, $df, $14, $ef, $ff, $ff, $10, $ef, $08, $00, $f2, $ff, $02
156aa     F0 FF 0C 00 
156ae     EF 18 00 FF 
156b2     04 00 FC E9 
156b6     FF 00 EF FF | 	byte	$f0, $ff, $0c, $00, $ef, $18, $00, $ff, $04, $00, $fc, $e9, $ff, $00, $ef, $ff
156ba     00 FF 08 F7 
156be     FF F0 FF 10 
156c2     EA FF 10 F3 
156c6     FF 08 FF 00 | 	byte	$00, $ff, $08, $f7, $ff, $f0, $ff, $10, $ea, $ff, $10, $f3, $ff, $08, $ff, $00
156ca     FF 20 D7 FF 
156ce     10 E1 FF 00 
156d2     FF 10 E1 FF 
156d6     07 00 E7 FC | 	byte	$ff, $20, $d7, $ff, $10, $e1, $ff, $00, $ff, $10, $e1, $ff, $07, $00, $e7, $fc
156da     FF 18 E1 FF 
156de     00 FF 00 DF 
156e2     2C 00 DF 01 
156e6     FF 00 FF FB | 	byte	$ff, $18, $e1, $ff, $00, $ff, $00, $df, $2c, $00, $df, $01, $ff, $00, $ff, $fb
156ea     0C FE 0E 00 
156ee     EF 16 00 FF 
156f2     00 FF 0F E8 
156f6     FF F8 10 00 | 	byte	$0c, $fe, $0e, $00, $ef, $16, $00, $ff, $00, $ff, $0f, $e8, $ff, $f8, $10, $00
156fa     FB F8 10 00 
156fe     FE F7 FF 10 
15702     E0 FF 20 E8 
15706     FC F1 0F 00 | 	byte	$fb, $f8, $10, $00, $fe, $f7, $ff, $10, $e0, $ff, $20, $e8, $fc, $f1, $0f, $00
1570a     FF F3 FF EF 
1570e     0F F0 FF 00 
15712     FF 00 FF 00 
15716     F7 1C 00 EF | 	byte	$ff, $f3, $ff, $ef, $0f, $f0, $ff, $00, $ff, $00, $ff, $00, $f7, $1c, $00, $ef
1571a     0C F7 18 E8 
1571e     F7 08 FD F5 
15722     FF 00 FF 00 
15726     FF F8 FE FB | 	byte	$0c, $f7, $18, $e8, $f7, $08, $fd, $f5, $ff, $00, $ff, $00, $ff, $f8, $fe, $fb
1572a     00 E7 20 D3 
1572e     FF 00 FF F0 
15732     FF 00 F7 08 
15736     F7 00 FF 00 | 	byte	$00, $e7, $20, $d3, $ff, $00, $ff, $f0, $ff, $00, $f7, $08, $f7, $00, $ff, $00
1573a     F7 00 F9 0F 
1573e     00 EF 18 00 
15742     F7 00 00 F7 
15746     04 E7 FF 00 | 	byte	$f7, $00, $f9, $0f, $00, $ef, $18, $00, $f7, $00, $00, $f7, $04, $e7, $ff, $00
1574a     FF 00 F7 FF 
1574e     00 F7 08 EF 
15752     FF EF 1E E0 
15756     FF 0D 08 DB | 	byte	$ff, $00, $f7, $ff, $00, $f7, $08, $ef, $ff, $ef, $1e, $e0, $ff, $0d, $08, $db
1575a     FF 00 FF 00 
1575e     E3 17 00 FF 
15762     EC FF 10 E7 
15766     10 E7 0F 00 | 	byte	$ff, $00, $ff, $00, $e3, $17, $00, $ff, $ec, $ff, $10, $e7, $10, $e7, $0f, $00
1576a     F4 EF 28 D5 
1576e     FF 00 EF FF 
15772     FC 08 F9 FF 
15776     04 F2 FF 00 | 	byte	$f4, $ef, $28, $d5, $ff, $00, $ef, $ff, $fc, $08, $f9, $ff, $04, $f2, $ff, $00
1577a     FC FB 05 00 
1577e     FF E7 FF 00 
15782     EF 00 F7 FF 
15786     00 FF 00 F7 | 	byte	$fc, $fb, $05, $00, $ff, $e7, $ff, $00, $ef, $00, $f7, $ff, $00, $ff, $00, $f7
1578a     10 EF 05 0B 
1578e     00 EF 1C 00 
15792     08 E3 17 00 
15796     FF 01 00 EF | 	byte	$10, $ef, $05, $0b, $00, $ef, $1c, $00, $08, $e3, $17, $00, $ff, $01, $00, $ef
1579a     0C EF 10 FB 
1579e     00 F7 00 0F 
157a2     00 D7 FF 00 
157a6     FE F0 FF 10 | 	byte	$0c, $ef, $10, $fb, $00, $f7, $00, $0f, $00, $d7, $ff, $00, $fe, $f0, $ff, $10
157aa     E8 FF 10 FF 
157ae     00 18 00 EF 
157b2     0C 0F F0 FF 
157b6     08 FB 10 00 | 	byte	$e8, $ff, $10, $ff, $00, $18, $00, $ef, $0c, $0f, $f0, $ff, $08, $fb, $10, $00
157ba     EF 0D 00 FF 
157be     00 FB 04 00 
157c2     F7 FF 00 E7 
157c6     04 F7 00 EF | 	byte	$ef, $0d, $00, $ff, $00, $fb, $04, $00, $f7, $ff, $00, $e7, $04, $f7, $00, $ef
157ca     08 F0 FF 09 
157ce     00 F7 FF 04 
157d2     F0 F7 12 00 
157d6     F3 FF 10 FF | 	byte	$08, $f0, $ff, $09, $00, $f7, $ff, $04, $f0, $f7, $12, $00, $f3, $ff, $10, $ff
157da     10 F3 04 0B 
157de     00 EF FF 10 
157e2     E3 FF F5 FF 
157e6     00 D7 FF 09 | 	byte	$10, $f3, $04, $0b, $00, $ef, $ff, $10, $e3, $ff, $f5, $ff, $00, $d7, $ff, $09
157ea     00 EF 00 FF 
157ee     00 FF F0 FF 
157f2     10 F3 F0 FF 
157f6     00 FF 00 FF | 	byte	$00, $ef, $00, $ff, $00, $ff, $f0, $ff, $10, $f3, $f0, $ff, $00, $ff, $00, $ff
157fa     00 FF 00 FF 
157fe     00 F7 00 FF 
15802     08 EF FF FF 
15806     00 FF 00 FB | 	byte	$00, $ff, $00, $ff, $00, $f7, $00, $ff, $08, $ef, $ff, $ff, $00, $ff, $00, $fb
1580a     10 FF 00 FF 
1580e     00 02 EB 0A 
15812     E7 FF 00 F4 
15816     FF 18 E0 FF | 	byte	$10, $ff, $00, $ff, $00, $02, $eb, $0a, $e7, $ff, $00, $f4, $ff, $18, $e0, $ff
1581a     00 FF 00 FF 
1581e     00 FF 00 FF 
15822     00 FA F3 07 
15826     00 F7 08 00 | 	byte	$00, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $fa, $f3, $07, $00, $f7, $08, $00
1582a     FA FF 00 FF 
1582e     10 E7 08 EF 
15832     14 00 EF 0B 
15836     F8 FD FF 00 | 	byte	$fa, $ff, $00, $ff, $10, $e7, $08, $ef, $14, $00, $ef, $0b, $f8, $fd, $ff, $00
1583a     EF 10 00 FF 
1583e     00 FF F7 FF 
15842     00 FD FF 02 
15846     FC 08 F0 FF | 	byte	$ef, $10, $00, $ff, $00, $ff, $f7, $ff, $00, $fd, $ff, $02, $fc, $08, $f0, $ff
1584a     08 F2 F7 1E 
1584e     EC FF E8 FF 
15852     00 17 00 DF 
15856     0D 04 F0 FB | 	byte	$08, $f2, $f7, $1e, $ec, $ff, $e8, $ff, $00, $17, $00, $df, $0d, $04, $f0, $fb
1585a     08 F7 00 EF 
1585e     0E 00 EF 10 
15862     E7 16 EA FF 
15866     08 00 F0 FF | 	byte	$08, $f7, $00, $ef, $0e, $00, $ef, $10, $e7, $16, $ea, $ff, $08, $00, $f0, $ff
1586a     00 0B 00 EF 
1586e     0E 00 EF FB 
15872     0F 00 DF 13 
15876     00 F7 04 F9 | 	byte	$00, $0b, $00, $ef, $0e, $00, $ef, $fb, $0f, $00, $df, $13, $00, $f7, $04, $f9
1587a     F7 0F 00 FB 
1587e     04 00 F5 FF 
15882     0C 00 FF 00 
15886     FF 00 F7 FF | 	byte	$f7, $0f, $00, $fb, $04, $00, $f5, $ff, $0c, $00, $ff, $00, $ff, $00, $f7, $ff
1588a     00 FF E0 17 
1588e     00 F7 00 F5 
15892     FD FF 10 E0 
15896     EF 08 FE F8 | 	byte	$00, $ff, $e0, $17, $00, $f7, $00, $f5, $fd, $ff, $10, $e0, $ef, $08, $fe, $f8
1589a     F7 00 F7 08 
1589e     EF FF 03 00 
158a2     EF 10 00 FF 
158a6     00 FB 10 00 | 	byte	$f7, $00, $f7, $08, $ef, $ff, $03, $00, $ef, $10, $00, $ff, $00, $fb, $10, $00
158aa     EF 00 FF 00 
158ae     DF 18 F0 00 
158b2     F3 0A EF FF 
158b6     00 F7 00 FC | 	byte	$ef, $00, $ff, $00, $df, $18, $f0, $00, $f3, $0a, $ef, $ff, $00, $f7, $00, $fc
158ba     F0 FF 06 00 
158be     EF 00 E7 18 
158c2     F0 FD FF 00 
158c6     FF 10 E0 FF | 	byte	$f0, $ff, $06, $00, $ef, $00, $e7, $18, $f0, $fd, $ff, $00, $ff, $10, $e0, $ff
158ca     18 F2 FC FF 
158ce     10 E7 FF 00 
158d2     FF 10 E0 EF 
158d6     0F 00 F3 F0 | 	byte	$18, $f2, $fc, $ff, $10, $e7, $ff, $00, $ff, $10, $e0, $ef, $0f, $00, $f3, $f0
158da     F7 10 00 F7 
158de     00 F7 0A F0 
158e2     F7 0A F7 FE 
158e6     F7 FF 00 F8 | 	byte	$f7, $10, $00, $f7, $00, $f7, $0a, $f0, $f7, $0a, $f7, $fe, $f7, $ff, $00, $f8
158ea     FB 10 03 00 
158ee     E7 FF 10 EB 
158f2     FF 01 0F 00 
158f6     E3 FF 12 00 | 	byte	$fb, $10, $03, $00, $e7, $ff, $10, $eb, $ff, $01, $0f, $00, $e3, $ff, $12, $00
158fa     E3 FF FF 00 
158fe     EF 08 EF 18 
15902     EB FA 0F 00 
15906     FF 00 FF 00 | 	byte	$e3, $ff, $ff, $00, $ef, $08, $ef, $18, $eb, $fa, $0f, $00, $ff, $00, $ff, $00
1590a     0A F1 F7 F7 
1590e     14 F0 EF 0E 
15912     00 04 00 F3 
15916     0F 00 FF 00 | 	byte	$0a, $f1, $f7, $f7, $14, $f0, $ef, $0e, $00, $04, $00, $f3, $0f, $00, $ff, $00
1591a     FF F9 FF FF 
1591e     F8 F7 10 EB 
15922     FF 00 E5 FF 
15926     04 FB F7 FF | 	byte	$ff, $f9, $ff, $ff, $f8, $f7, $10, $eb, $ff, $00, $e5, $ff, $04, $fb, $f7, $ff
1592a     00 FF 00 FF 
1592e     00 07 00 FF 
15932     10 EF FF F1 
15936     00 F7 04 00 | 	byte	$00, $ff, $00, $ff, $00, $07, $00, $ff, $10, $ef, $ff, $f1, $00, $f7, $04, $00
1593a     F8 F7 16 00 
1593e     FF 00 F7 0A 
15942     FF F0 FF 08 
15946     F7 F7 FF 00 | 	byte	$f8, $f7, $16, $00, $ff, $00, $f7, $0a, $ff, $f0, $ff, $08, $f7, $f7, $ff, $00
1594a     FF 00 FF 00 
1594e     FF 00 0F 00 
15952     FF 20 F3 00 
15956     EF 0B 00 FF | 	byte	$ff, $00, $ff, $00, $ff, $00, $0f, $00, $ff, $20, $f3, $00, $ef, $0b, $00, $ff
1595a     00 EB FF 08 
1595e     00 EF 16 F0 
15962     FF F3 FF 04 
15966     F8 F5 FF 0B | 	byte	$00, $eb, $ff, $08, $00, $ef, $16, $f0, $ff, $f3, $ff, $04, $f8, $f5, $ff, $0b
1596a     08 EC FB FF 
1596e     08 00 FF 00 
15972     FF 00 FF 00 
15976     FF 00 FF 10 | 	byte	$08, $ec, $fb, $ff, $08, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $10
1597a     E7 FF 00 FF 
1597e     10 EF FD 09 
15982     00 F7 FF F9 
15986     08 E9 0F 00 | 	byte	$e7, $ff, $00, $ff, $10, $ef, $fd, $09, $00, $f7, $ff, $f9, $08, $e9, $0f, $00
1598a     FF 00 F3 10 
1598e     00 FF 00 0F 
15992     F0 FF 10 EF 
15996     00 FF 10 E7 | 	byte	$ff, $00, $f3, $10, $00, $ff, $00, $0f, $f0, $ff, $10, $ef, $00, $ff, $10, $e7
1599a     FF 00 FF 00 
1599e     F0 F7 10 00 
159a2     FF F3 0A F7 
159a6     08 F2 FF F8 | 	byte	$ff, $00, $ff, $00, $f0, $f7, $10, $00, $ff, $f3, $0a, $f7, $08, $f2, $ff, $f8
159aa     FE FB 10 D7 
159ae     FF 00 FF 00 
159b2     FF 00 EF 01 
159b6     03 00 FF 0C | 	byte	$fe, $fb, $10, $d7, $ff, $00, $ff, $00, $ff, $00, $ef, $01, $03, $00, $ff, $0c
159ba     00 F7 10 DF 
159be     FF F8 FF 00 
159c2     FF 00 EF 18 
159c6     00 FF 00 FF | 	byte	$00, $f7, $10, $df, $ff, $f8, $ff, $00, $ff, $00, $ef, $18, $00, $ff, $00, $ff
159ca     0C FD F8 FF 
159ce     20 DF 10 E7 
159d2     FF 00 FF F0 
159d6     FF 00 08 00 | 	byte	$0c, $fd, $f8, $ff, $20, $df, $10, $e7, $ff, $00, $ff, $f0, $ff, $00, $08, $00
159da     FF 00 FF 08 
159de     FF F4 FF 00 
159e2     08 F0 FF 00 
159e6     FF 00 FF 08 | 	byte	$ff, $00, $ff, $08, $ff, $f4, $ff, $00, $08, $f0, $ff, $00, $ff, $00, $ff, $08
159ea     FF F0 FF 00 
159ee     FF 0A F0 FF 
159f2     04 09 00 DF 
159f6     1C CF FF 00 | 	byte	$ff, $f0, $ff, $00, $ff, $0a, $f0, $ff, $04, $09, $00, $df, $1c, $cf, $ff, $00
159fa     FF 00 FE FB 
159fe     0C 00 FF 08 
15a02     F5 FF 00 F7 
15a06     14 00 F0 EB | 	byte	$ff, $00, $fe, $fb, $0c, $00, $ff, $08, $f5, $ff, $00, $f7, $14, $00, $f0, $eb
15a0a     1D 00 F0 EF 
15a0e     0C 00 FE EA 
15a12     FF 00 F5 F8 
15a16     FF 10 00 EC | 	byte	$1d, $00, $f0, $ef, $0c, $00, $fe, $ea, $ff, $00, $f5, $f8, $ff, $10, $00, $ec
15a1a     FF 0E 00 F1 
15a1e     FD FA FF 04 
15a22     F1 F7 06 00 
15a26     FB FA FF 08 | 	byte	$ff, $0e, $00, $f1, $fd, $fa, $ff, $04, $f1, $f7, $06, $00, $fb, $fa, $ff, $08
15a2a     F0 FF 00 FF 
15a2e     00 FF 00 FF 
15a32     00 FB FB FF 
15a36     00 EB FF 04 | 	byte	$f0, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $fb, $fb, $ff, $00, $eb, $ff, $04
15a3a     F9 F7 F8 FF 
15a3e     04 F7 00 F7 
15a42     18 00 F7 04 
15a46     01 00 F5 F8 | 	byte	$f9, $f7, $f8, $ff, $04, $f7, $00, $f7, $18, $00, $f7, $04, $01, $00, $f5, $f8
15a4a     FF 00 E3 FF 
15a4e     0B 08 EA FC 
15a52     FF 10 00 EF 
15a56     FF 14 F0 FB | 	byte	$ff, $00, $e3, $ff, $0b, $08, $ea, $fc, $ff, $10, $00, $ef, $ff, $14, $f0, $fb
15a5a     F8 FF 00 EB 
15a5e     FF 08 F9 FA 
15a62     F3 16 00 F3 
15a66     FF 00 FB 04 | 	byte	$f8, $ff, $00, $eb, $ff, $08, $f9, $fa, $f3, $16, $00, $f3, $ff, $00, $fb, $04
15a6a     E1 FF 04 FB 
15a6e     F3 FF FA FF 
15a72     F7 0C F4 F6 
15a76     FF FA FF 00 | 	byte	$e1, $ff, $04, $fb, $f3, $ff, $fa, $ff, $f7, $0c, $f4, $f6, $ff, $fa, $ff, $00
15a7a     EF 05 FF 10 
15a7e     EC F7 FF 10 
15a82     F0 FF 00 00 
15a86     F7 05 00 F3 | 	byte	$ef, $05, $ff, $10, $ec, $f7, $ff, $10, $f0, $ff, $00, $00, $f7, $05, $00, $f3
15a8a     FF 00 FF 00 
15a8e     F3 FF 00 FE 
15a92     F8 FF 00 FE 
15a96     F0 FF 00 EF | 	byte	$ff, $00, $ff, $00, $f3, $ff, $00, $fe, $f8, $ff, $00, $fe, $f0, $ff, $00, $ef
15a9a     FC FF 00 FF 
15a9e     00 FD 06 00 
15aa2     F3 0A 00 FF 
15aa6     00 F7 04 FF | 	byte	$fc, $ff, $00, $ff, $00, $fd, $06, $00, $f3, $0a, $00, $ff, $00, $f7, $04, $ff
15aaa     00 FF 00 EF 
15aae     08 00 F8 F6 
15ab2     FF 04 F7 06 
15ab6     F7 FF FF 00 | 	byte	$00, $ff, $00, $ef, $08, $00, $f8, $f6, $ff, $04, $f7, $06, $f7, $ff, $ff, $00
15aba     FB 04 00 FF 
15abe     00 FD FC F5 
15ac2     FF 00 FF 00 
15ac6     FB 04 F3 08 | 	byte	$fb, $04, $00, $ff, $00, $fd, $fc, $f5, $ff, $00, $ff, $00, $fb, $04, $f3, $08
15aca     00 0D EF FF 
15ace     00 FB 00 05 
15ad2     00 FF 10 E7 
15ad6     FF 00 FC FF | 	byte	$00, $0d, $ef, $ff, $00, $fb, $00, $05, $00, $ff, $10, $e7, $ff, $00, $fc, $ff
15ada     F8 FF 05 00 
15ade     F7 FF FB 05 
15ae2     00 FF 00 F7 
15ae6     08 F3 0B 00 | 	byte	$f8, $ff, $05, $00, $f7, $ff, $fb, $05, $00, $ff, $00, $f7, $08, $f3, $0b, $00
15aea     F3 FF 08 00 
15aee     EB 0F F3 FF 
15af2     FF 10 E9 14 
15af6     00 FF 08 FB | 	byte	$f3, $ff, $08, $00, $eb, $0f, $f3, $ff, $ff, $10, $e9, $14, $00, $ff, $08, $fb
15afa     F8 F7 0B 00 
15afe     F7 00 FB 08 
15b02     00 F4 F7 10 
15b06     EB FF EC FF | 	byte	$f8, $f7, $0b, $00, $f7, $00, $fb, $08, $00, $f4, $f7, $10, $eb, $ff, $ec, $ff
15b0a     08 F2 F7 FF 
15b0e     08 F0 FF 00 
15b12     F3 FF 00 FD 
15b16     FF 00 F3 0C | 	byte	$08, $f2, $f7, $ff, $08, $f0, $ff, $00, $f3, $ff, $00, $fd, $ff, $00, $f3, $0c
15b1a     00 00 F3 07 
15b1e     00 FC FF 00 
15b22     FF 00 FF 00 
15b26     FF 00 FF 00 | 	byte	$00, $00, $f3, $07, $00, $fc, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $00
15b2a     EF 0A F7 FF 
15b2e     00 FF 00 EF 
15b32     00 F8 FF 00 
15b36     F5 FF 0C 00 | 	byte	$ef, $0a, $f7, $ff, $00, $ff, $00, $ef, $00, $f8, $ff, $00, $f5, $ff, $0c, $00
15b3a     F0 FB FF 10 
15b3e     EF 09 EB FF 
15b42     00 FF 00 FF 
15b46     00 F7 04 02 | 	byte	$f0, $fb, $ff, $10, $ef, $09, $eb, $ff, $00, $ff, $00, $ff, $00, $f7, $04, $02
15b4a     F8 F7 08 F7 
15b4e     0E 00 FF 00 
15b52     F7 10 00 F8 
15b56     FF 00 EF 0E | 	byte	$f8, $f7, $08, $f7, $0e, $00, $ff, $00, $f7, $10, $00, $f8, $ff, $00, $ef, $0e
15b5a     F6 FF F8 FF 
15b5e     00 F0 FF 10 
15b62     EF 00 EF 08 
15b66     FF 00 F2 05 | 	byte	$f6, $ff, $f8, $ff, $00, $f0, $ff, $10, $ef, $00, $ef, $08, $ff, $00, $f2, $05
15b6a     00 FE FF FD 
15b6e     08 F3 08 FB 
15b72     0A E7 FF 08 
15b76     FF 00 FF 00 | 	byte	$00, $fe, $ff, $fd, $08, $f3, $08, $fb, $0a, $e7, $ff, $08, $ff, $00, $ff, $00
15b7a     F7 02 F7 04 
15b7e     FF 0C F0 FF 
15b82     0C F0 FF 00 
15b86     FF 00 FF 00 | 	byte	$f7, $02, $f7, $04, $ff, $0c, $f0, $ff, $0c, $f0, $ff, $00, $ff, $00, $ff, $00
15b8a     FF 00 EF 10 
15b8e     FF 00 F5 FC 
15b92     EF 1F 00 FB 
15b96     00 FB 09 00 | 	byte	$ff, $00, $ef, $10, $ff, $00, $f5, $fc, $ef, $1f, $00, $fb, $00, $fb, $09, $00
15b9a     FF 00 F7 08 
15b9e     EF 0E EF FF 
15ba2     EA 10 00 00 
15ba6     EF 06 F5 FF | 	byte	$ff, $00, $f7, $08, $ef, $0e, $ef, $ff, $ea, $10, $00, $00, $ef, $06, $f5, $ff
15baa     04 F3 02 F3 
15bae     04 FB 00 F7 
15bb2     10 F0 FB 0F 
15bb6     F4 FF F7 10 | 	byte	$04, $f3, $02, $f3, $04, $fb, $00, $f7, $10, $f0, $fb, $0f, $f4, $ff, $f7, $10
15bba     00 FF 00 FF 
15bbe     0C F0 F7 02 
15bc2     FF 00 FF F3 
15bc6     FF 00 EF 10 | 	byte	$00, $ff, $00, $ff, $0c, $f0, $f7, $02, $ff, $00, $ff, $f3, $ff, $00, $ef, $10
15bca     E7 07 F4 FF 
15bce     00 FD 06 00 
15bd2     F9 08 00 FF 
15bd6     02 FF 08 F3 | 	byte	$e7, $07, $f4, $ff, $00, $fd, $06, $00, $f9, $08, $00, $ff, $02, $ff, $08, $f3
15bda     07 00 FF 0C 
15bde     00 FF 00 06 
15be2     F7 FF F8 FB 
15be6     08 EB FF EF | 	byte	$07, $00, $ff, $0c, $00, $ff, $00, $06, $f7, $ff, $f8, $fb, $08, $eb, $ff, $ef
15bea     FF F0 FF 00 
15bee     EF 00 E7 04 
15bf2     FF 00 EF 10 
15bf6     F1 08 00 FF | 	byte	$ff, $f0, $ff, $00, $ef, $00, $e7, $04, $ff, $00, $ef, $10, $f1, $08, $00, $ff
15bfa     05 00 FE F9 
15bfe     FF 08 EF FF 
15c02     FF 10 EB FB 
15c06     07 08 F8 FB | 	byte	$05, $00, $fe, $f9, $ff, $08, $ef, $ff, $ff, $10, $eb, $fb, $07, $08, $f8, $fb
15c0a     FF 02 F0 EF 
15c0e     0E F6 FF F0 
15c12     F7 07 08 E3 
15c16     FF 08 04 F9 | 	byte	$ff, $02, $f0, $ef, $0e, $f6, $ff, $f0, $f7, $07, $08, $e3, $ff, $08, $04, $f9
15c1a     FC F7 FF 0B 
15c1e     F0 FF 10 F7 
15c22     00 F7 16 F0 
15c26     FF 00 FF 00 | 	byte	$fc, $f7, $ff, $0b, $f0, $ff, $10, $f7, $00, $f7, $16, $f0, $ff, $00, $ff, $00
15c2a     EF 00 FB 04 
15c2e     F7 08 00 FF 
15c32     00 F7 04 03 
15c36     00 F7 03 00 | 	byte	$ef, $00, $fb, $04, $f7, $08, $00, $ff, $00, $f7, $04, $03, $00, $f7, $03, $00
15c3a     FF FD FF 00 
15c3e     FF 00 EF 0A 
15c42     00 FA F7 10 
15c46     00 FF 00 EF | 	byte	$ff, $fd, $ff, $00, $ff, $00, $ef, $0a, $00, $fa, $f7, $10, $00, $ff, $00, $ef
15c4a     10 07 00 EF 
15c4e     0F 00 FF 00 
15c52     FF F0 FF 00 
15c56     FF 08 F8 FF | 	byte	$10, $07, $00, $ef, $0f, $00, $ff, $00, $ff, $f0, $ff, $00, $ff, $08, $f8, $ff
15c5a     10 EF FF 00 
15c5e     FF 00 FF F0 
15c62     FF 00 F7 FB 
15c66     06 00 F3 FF | 	byte	$10, $ef, $ff, $00, $ff, $00, $ff, $f0, $ff, $00, $f7, $fb, $06, $00, $f3, $ff
15c6a     00 EF 00 FF 
15c6e     00 FF 08 F1 
15c72     F8 FF 10 EF 
15c76     04 EF 14 00 | 	byte	$00, $ef, $00, $ff, $00, $ff, $08, $f1, $f8, $ff, $10, $ef, $04, $ef, $14, $00
15c7a     FF 00 FF 00 
15c7e     FE F3 0F 00 
15c82     FA FD 0C FA 
15c86     00 E5 19 00 | 	byte	$ff, $00, $ff, $00, $fe, $f3, $0f, $00, $fa, $fd, $0c, $fa, $00, $e5, $19, $00
15c8a     FF 00 FF 00 
15c8e     FF 00 FF 00 
15c92     FF F5 FF 00 
15c96     FB FF FF FD | 	byte	$ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $f5, $ff, $00, $fb, $ff, $ff, $fd
15c9a     0C F0 FF 00 
15c9e     FF 00 07 00 
15ca2     FF 00 FB F8 
15ca6     FF 08 F3 FF | 	byte	$0c, $f0, $ff, $00, $ff, $00, $07, $00, $ff, $00, $fb, $f8, $ff, $08, $f3, $ff
15caa     08 EB 0B 00 
15cae     FB FF 0E F0 
15cb2     FF 00 FF 00 
15cb6     FF 00 0F 00 | 	byte	$08, $eb, $0b, $00, $fb, $ff, $0e, $f0, $ff, $00, $ff, $00, $ff, $00, $0f, $00
15cba     F7 FF 02 FB 
15cbe     04 F7 08 01 
15cc2     08 E3 FF 00 
15cc6     FF F7 16 F4 | 	byte	$f7, $ff, $02, $fb, $04, $f7, $08, $01, $08, $e3, $ff, $00, $ff, $f7, $16, $f4
15cca     FF FF F8 FF 
15cce     00 FF 00 FF 
15cd2     04 F8 FF 00 
15cd6     F7 FF 04 F9 | 	byte	$ff, $ff, $f8, $ff, $00, $ff, $00, $ff, $04, $f8, $ff, $00, $f7, $ff, $04, $f9
15cda     00 F7 FD FB 
15cde     FD FF 04 EF 
15ce2     FF 03 04 F5 
15ce6     01 FD 00 F7 | 	byte	$00, $f7, $fd, $fb, $fd, $ff, $04, $ef, $ff, $03, $04, $f5, $01, $fd, $00, $f7
15cea     08 F7 FF F9 
15cee     FE FF 0C 00 
15cf2     FF 08 FB 05 
15cf6     00 FF 02 01 | 	byte	$08, $f7, $ff, $f9, $fe, $ff, $0c, $00, $ff, $08, $fb, $05, $00, $ff, $02, $01
15cfa     00 F7 00 FB 
15cfe     03 00 FC FE 
15d02     06 F0 F7 FF 
15d06     00 FF 00 FF | 	byte	$00, $f7, $00, $fb, $03, $00, $fc, $fe, $06, $f0, $f7, $ff, $00, $ff, $00, $ff
15d0a     00 FF 00 FF 
15d0e     00 FF F1 FF 
15d12     00 FB 00 F7 
15d16     07 00 F8 FF | 	byte	$00, $ff, $00, $ff, $00, $ff, $f1, $ff, $00, $fb, $00, $f7, $07, $00, $f8, $ff
15d1a     FB 01 F9 FF 
15d1e     00 FB F8 FF 
15d22     00 FF 00 F7 
15d26     08 F7 FE FF | 	byte	$fb, $01, $f9, $ff, $00, $fb, $f8, $ff, $00, $ff, $00, $f7, $08, $f7, $fe, $ff
15d2a     00 FE F8 FF 
15d2e     00 FF 04 00 
15d32     FD 07 00 FF 
15d36     10 EB 0B 00 | 	byte	$00, $fe, $f8, $ff, $00, $ff, $04, $00, $fd, $07, $00, $ff, $10, $eb, $0b, $00
15d3a     FF 00 F3 02 
15d3e     F7 04 F3 FE 
15d42     00 F7 F8 F7 
15d46     00 FF 00 F7 | 	byte	$ff, $00, $f3, $02, $f7, $04, $f3, $fe, $00, $f7, $f8, $f7, $00, $ff, $00, $f7
15d4a     04 FF 00 FD 
15d4e     FF 0E 00 FF 
15d52     00 F7 0A 00 
15d56     EF FF 00 FF | 	byte	$04, $ff, $00, $fd, $ff, $0e, $00, $ff, $00, $f7, $0a, $00, $ef, $ff, $00, $ff
15d5a     F8 F9 06 02 
15d5e     00 F1 FF 00 
15d62     F3 FD FF 02 
15d66     F8 F7 FF 10 | 	byte	$f8, $f9, $06, $02, $00, $f1, $ff, $00, $f3, $fd, $ff, $02, $f8, $f7, $ff, $10
15d6a     00 FA F3 0F 
15d6e     00 FF F8 FF 
15d72     05 00 EF FF 
15d76     00 FB FB FF | 	byte	$00, $fa, $f3, $0f, $00, $ff, $f8, $ff, $05, $00, $ef, $ff, $00, $fb, $fb, $ff
15d7a     00 FF 00 FF 
15d7e     00 FF 00 F7 
15d82     FF 08 F4 FF 
15d86     01 0D 00 F3 | 	byte	$00, $ff, $00, $ff, $00, $ff, $00, $f7, $ff, $08, $f4, $ff, $01, $0d, $00, $f3
15d8a     02 07 00 EF 
15d8e     FF FF 00 FA 
15d92     F7 0E 00 F7 
15d96     F8 0B 00 EF | 	byte	$02, $07, $00, $ef, $ff, $ff, $00, $fa, $f7, $0e, $00, $f7, $f8, $0b, $00, $ef
15d9a     FF 04 F7 05 
15d9e     F7 FF FD FF 
15da2     F9 FE F7 05 
15da6     00 FF 00 FF | 	byte	$ff, $04, $f7, $05, $f7, $ff, $fd, $ff, $f9, $fe, $f7, $05, $00, $ff, $00, $ff
15daa     00 FF F8 0C 
15dae     00 09 00 FF 
15db2     05 04 EB FF 
15db6     00 FB F4 FF | 	byte	$00, $ff, $f8, $0c, $00, $09, $00, $ff, $05, $04, $eb, $ff, $00, $fb, $f4, $ff
15dba     00 F7 00 FF 
15dbe     FF 09 ED FF 
15dc2     00 FF 00 FC 
15dc6     FF F8 FD FF | 	byte	$00, $f7, $00, $ff, $ff, $09, $ed, $ff, $00, $ff, $00, $fc, $ff, $f8, $fd, $ff
15dca     02 07 F0 FF 
15dce     04 00 F9 08 
15dd2     F0 FF 05 00 
15dd6     F7 08 F7 FF | 	byte	$02, $07, $f0, $ff, $04, $00, $f9, $08, $f0, $ff, $05, $00, $f7, $08, $f7, $ff
15dda     FB 14 F0 FF 
15dde     00 FF 00 00 
15de2     F7 02 F3 FF 
15de6     00 FF 00 F7 | 	byte	$fb, $14, $f0, $ff, $00, $ff, $00, $00, $f7, $02, $f3, $ff, $00, $ff, $00, $f7
15dea     00 FF 00 FF 
15dee     00 FF 00 F1 
15df2     FF 08 F4 F7 
15df6     0A 01 00 FB | 	byte	$00, $ff, $00, $ff, $00, $ff, $00, $f1, $ff, $08, $f4, $f7, $0a, $01, $00, $fb
15dfa     FA FB 0B 00 
15dfe     F5 FE FF 00 
15e02     FF 00 FD 00 
15e06     F3 01 FF 00 | 	byte	$fa, $fb, $0b, $00, $f5, $fe, $ff, $00, $ff, $00, $fd, $00, $f3, $01, $ff, $00
15e0a     FB 04 F8 07 
15e0e     00 FF 00 FF 
15e12     00 F7 FF 04 
15e16     F3 FF 01 00 | 	byte	$fb, $04, $f8, $07, $00, $ff, $00, $ff, $00, $f7, $ff, $04, $f3, $ff, $01, $00
15e1a     EB 0F 00 FF 
15e1e     00 FF 03 00 
15e22     FF 00 FF 08 
15e26     F1 FB 08 00 | 	byte	$eb, $0f, $00, $ff, $00, $ff, $03, $00, $ff, $00, $ff, $08, $f1, $fb, $08, $00
15e2a     FF 00 F7 08 
15e2e     F7 08 00 00 
15e32     F3 0A 00 FB 
15e36     08 F5 FF 00 | 	byte	$ff, $00, $f7, $08, $f7, $08, $00, $00, $f3, $0a, $00, $fb, $08, $f5, $ff, $00
15e3a     FF 00 F9 00 
15e3e     F7 FF 00 00 
15e42     F7 FF FF 00 
15e46     FD F7 04 FF | 	byte	$ff, $00, $f9, $00, $f7, $ff, $00, $00, $f7, $ff, $ff, $00, $fd, $f7, $04, $ff
15e4a     04 F4 FB 01 
15e4e     01 00 F8 FF 
15e52     00 04 00 FB 
15e56     FF FC 00 FE | 	byte	$04, $f4, $fb, $01, $01, $00, $f8, $ff, $00, $04, $00, $fb, $ff, $fc, $00, $fe
15e5a     FC FF F8 FB 
15e5e     00 FE FB F8 
15e62     FB 00 FF 00 
15e66     FF 00 FF 00 | 	byte	$fc, $ff, $f8, $fb, $00, $fe, $fb, $f8, $fb, $00, $ff, $00, $ff, $00, $ff, $00
15e6a     F7 04 01 00 
15e6e     EB FF 03 0C 
15e72     EF FF 03 00 
15e76     FE FE FF 08 | 	byte	$f7, $04, $01, $00, $eb, $ff, $03, $0c, $ef, $ff, $03, $00, $fe, $fe, $ff, $08
15e7a     EB FF 04 00 
15e7e     EC FF 00 FC 
15e82     F5 FA F3 0D 
15e86     00 FF 00 FB | 	byte	$eb, $ff, $04, $00, $ec, $ff, $00, $fc, $f5, $fa, $f3, $0d, $00, $ff, $00, $fb
15e8a     02 00 F7 08 
15e8e     00 00 F7 05 
15e92     00 FF FF FF 
15e96     00 F9 FF FF | 	byte	$02, $00, $f7, $08, $00, $00, $f7, $05, $00, $ff, $ff, $ff, $00, $f9, $ff, $ff
15e9a     0A 00 F3 07 
15e9e     00 F7 FF FC 
15ea2     FF FC FD 00 
15ea6     F7 FF F3 FF | 	byte	$0a, $00, $f3, $07, $00, $f7, $ff, $fc, $ff, $fc, $fd, $00, $f7, $ff, $f3, $ff
15eaa     00 F7 F8 FF 
15eae     00 02 FB 00 
15eb2     FE 01 00 FF 
15eb6     04 F5 FF 08 | 	byte	$00, $f7, $f8, $ff, $00, $02, $fb, $00, $fe, $01, $00, $ff, $04, $f5, $ff, $08
15eba     F4 FC FF 00 
15ebe     FF 00 F7 0B 
15ec2     F2 FC FD 06 
15ec6     00 F7 01 00 | 	byte	$f4, $fc, $ff, $00, $ff, $00, $f7, $0b, $f2, $fc, $fd, $06, $00, $f7, $01, $00
15eca     F7 FB FF 00 
15ece     F7 FF 00 F4 
15ed2     FF 08 F8 FF 
15ed6     02 FF 10 E8 | 	byte	$f7, $fb, $ff, $00, $f7, $ff, $00, $f4, $ff, $08, $f8, $ff, $02, $ff, $10, $e8
15eda     FF 03 06 F7 
15ede     FF F4 FF 00 
15ee2     F7 F8 FF 02 
15ee6     F1 FF 00 FF | 	byte	$ff, $03, $06, $f7, $ff, $f4, $ff, $00, $f7, $f8, $ff, $02, $f1, $ff, $00, $ff
15eea     00 EF 06 05 
15eee     00 FE 00 FB 
15ef2     0C E3 FF 00 
15ef6     FF F8 FF 06 | 	byte	$00, $ef, $06, $05, $00, $fe, $00, $fb, $0c, $e3, $ff, $00, $ff, $f8, $ff, $06
15efa     00 F7 00 F1 
15efe     10 EB 04 E7 
15f02     16 F0 FF 00 
15f06     FF 00 EF 08 | 	byte	$00, $f7, $00, $f1, $10, $eb, $04, $e7, $16, $f0, $ff, $00, $ff, $00, $ef, $08
15f0a     FF F5 FF F2 
15f0e     FF 00 FF F4 
15f12     FF 00 0A 00 
15f16     07 00 FF EF | 	byte	$ff, $f5, $ff, $f2, $ff, $00, $ff, $f4, $ff, $00, $0a, $00, $07, $00, $ff, $ef
15f1a     FF 00 FF 00 
15f1e     F7 04 05 00 
15f22     EE FF 00 EF 
15f26     0C EF 08 F3 | 	byte	$ff, $00, $ff, $00, $f7, $04, $05, $00, $ee, $ff, $00, $ef, $0c, $ef, $08, $f3
15f2a     08 00 00 F7 
15f2e     FF 00 FF 00 
15f32     FF 04 F4 FF 
15f36     08 FF 00 F3 | 	byte	$08, $00, $00, $f7, $ff, $00, $ff, $00, $ff, $04, $f4, $ff, $08, $ff, $00, $f3
15f3a     06 01 0A F5 
15f3e     FF 00 FE F0 
15f42     0F 00 EF FF 
15f46     FA FF 00 F6 | 	byte	$06, $01, $0a, $f5, $ff, $00, $fe, $f0, $0f, $00, $ef, $ff, $fa, $ff, $00, $f6
15f4a     FB FF FA FF 
15f4e     00 EF 05 F7 
15f52     06 F7 FF 00 
15f56     FF 00 FB 07 | 	byte	$fb, $ff, $fa, $ff, $00, $ef, $05, $f7, $06, $f7, $ff, $00, $ff, $00, $fb, $07
15f5a     00 FF F8 FF 
15f5e     00 F7 00 FF 
15f62     08 EB 18 00 
15f66     0A 00 FF 02 | 	byte	$00, $ff, $f8, $ff, $00, $f7, $00, $ff, $08, $eb, $18, $00, $0a, $00, $ff, $02
15f6a     FF 00 F8 F7 
15f6e     0C 00 FB FB 
15f72     FF 00 FD F7 
15f76     0F 00 FF 00 | 	byte	$ff, $00, $f8, $f7, $0c, $00, $fb, $fb, $ff, $00, $fd, $f7, $0f, $00, $ff, $00
15f7a     FF 08 FF F2 
15f7e     FF 0C 00 FB 
15f82     FB 08 00 FF 
15f86     00 FF 00 F7 | 	byte	$ff, $08, $ff, $f2, $ff, $0c, $00, $fb, $fb, $08, $00, $ff, $00, $ff, $00, $f7
15f8a     01 FF 02 F7 
15f8e     FF FF 00 F4 
15f92     FF 00 FB 00 
15f96     F2 FF 00 EF | 	byte	$01, $ff, $02, $f7, $ff, $ff, $00, $f4, $ff, $00, $fb, $00, $f2, $ff, $00, $ef
15f9a     00 F7 00 FE 
15f9e     08 F3 FF F7 
15fa2     FF 00 FF 00 
15fa6     F7 FF 00 FF | 	byte	$00, $f7, $00, $fe, $08, $f3, $ff, $f7, $ff, $00, $ff, $00, $f7, $ff, $00, $ff
15faa     FC F7 FF 08 
15fae     F8 F5 FF FF 
15fb2     F9 FF 00 F7 
15fb6     FF F9 FF 00 | 	byte	$fc, $f7, $ff, $08, $f8, $f5, $ff, $ff, $f9, $ff, $00, $f7, $ff, $f9, $ff, $00
15fba     FF F7 FF 00 
15fbe     EB FF 00 FF 
15fc2     08 F7 FF 01 
15fc6     00 FD 00 F8 | 	byte	$ff, $f7, $ff, $00, $eb, $ff, $00, $ff, $08, $f7, $ff, $01, $00, $fd, $00, $f8
15fca     FF 08 F4 FF 
15fce     04 00 F7 FF 
15fd2     00 FF 00 F7 
15fd6     FF 01 F8 F9 | 	byte	$ff, $08, $f4, $ff, $04, $00, $f7, $ff, $00, $ff, $00, $f7, $ff, $01, $f8, $f9
15fda     FF 0E 00 F3 
15fde     FF 09 00 F7 
15fe2     FF 05 00 F6 
15fe6     F7 08 FC FE | 	byte	$ff, $0e, $00, $f3, $ff, $09, $00, $f7, $ff, $05, $00, $f6, $f7, $08, $fc, $fe
15fea     FB 08 00 FD 
15fee     F8 FF 08 F8 
15ff2     F4 FF 00 FF 
15ff6     F8 FB 00 FF | 	byte	$fb, $08, $00, $fd, $f8, $ff, $08, $f8, $f4, $ff, $00, $ff, $f8, $fb, $00, $ff
15ffa     00 F7 FF 06 
15ffe     F4 FF 00 FF 
16002     00 FB 03 07 
16006     00 F7 FC FF | 	byte	$00, $f7, $ff, $06, $f4, $ff, $00, $ff, $00, $fb, $03, $07, $00, $f7, $fc, $ff
1600a     00 F7 FF F8 
1600e     FF 00 ED FF 
16012     00 FF F8 FF 
16016     00 FF 00 F7 | 	byte	$00, $f7, $ff, $f8, $ff, $00, $ed, $ff, $00, $ff, $f8, $ff, $00, $ff, $00, $f7
1601a     FB 07 00 F7 
1601e     FF 00 FF 00 
16022     FF 10 F0 FE 
16026     F5 0B 00 FF | 	byte	$fb, $07, $00, $f7, $ff, $00, $ff, $00, $ff, $10, $f0, $fe, $f5, $0b, $00, $ff
1602a     00 FF 04 FF 
1602e     00 F3 07 F8 
16032     FF 00 EF 06 
16036     EF FF F4 FF | 	byte	$00, $ff, $04, $ff, $00, $f3, $07, $f8, $ff, $00, $ef, $06, $ef, $ff, $f4, $ff
1603a     00 FB F8 0B 
1603e     00 FF 00 FD 
16042     04 00 FF 00 
16046     FD FD FF FD | 	byte	$00, $fb, $f8, $0b, $00, $ff, $00, $fd, $04, $00, $ff, $00, $fd, $fd, $ff, $fd
1604a     FF 00 EF FF 
1604e     00 FF 00 FF 
16052     00 F7 08 00 
16056     FC FB 04 00 | 	byte	$ff, $00, $ef, $ff, $00, $ff, $00, $ff, $00, $f7, $08, $00, $fc, $fb, $04, $00
1605a     FB FF FD 00 
1605e     F1 FF 00 01 
16062     EB FF 08 00 
16066     F8 F3 05 01 | 	byte	$fb, $ff, $fd, $00, $f1, $ff, $00, $01, $eb, $ff, $08, $00, $f8, $f3, $05, $01
1606a     02 F4 FF 04 
1606e     F7 FF 01 00 
16072     F4 FF 00 FF 
16076     02 F5 FF 02 | 	byte	$02, $f4, $ff, $04, $f7, $ff, $01, $00, $f4, $ff, $00, $ff, $02, $f5, $ff, $02
1607a     00 FF F8 FB 
1607e     08 00 FF 00 
16082     FD FC FF 00 
16086     F7 03 F8 FF | 	byte	$00, $ff, $f8, $fb, $08, $00, $ff, $00, $fd, $fc, $ff, $00, $f7, $03, $f8, $ff
1608a     00 FD 00 FF 
1608e     02 FB FE F9 
16092     0B 00 EF 08 
16096     F8 FF 00 FF | 	byte	$00, $fd, $00, $ff, $02, $fb, $fe, $f9, $0b, $00, $ef, $08, $f8, $ff, $00, $ff
1609a     00 FF 01 00 
1609e     F7 FF 00 FF 
160a2     00 F3 FF 00 
160a6     FE FD FD FF | 	byte	$00, $ff, $01, $00, $f7, $ff, $00, $ff, $00, $f3, $ff, $00, $fe, $fd, $fd, $ff
160aa     FC FE FF 00 
160ae     FD FE F8 FF 
160b2     00 F3 FF 00 
160b6     EF 0C EF FF | 	byte	$fc, $fe, $ff, $00, $fd, $fe, $f8, $ff, $00, $f3, $ff, $00, $ef, $0c, $ef, $ff
160ba     00 00 FD 00 
160be     F3 FF 00 F6 
160c2     F7 08 F9 FF 
160c6     02 F2 FF 00 | 	byte	$00, $00, $fd, $00, $f3, $ff, $00, $f6, $f7, $08, $f9, $ff, $02, $f2, $ff, $00
160ca     FB 09 00 FD 
160ce     01 00 04 00 
160d2     F9 FD FF 03 
160d6     04 F8 FB 00 | 	byte	$fb, $09, $00, $fd, $01, $00, $04, $00, $f9, $fd, $ff, $03, $04, $f8, $fb, $00
160da     07 00 EF 0C 
160de     F9 00 F9 FF 
160e2     00 00 EF 0C 
160e6     00 FA FF FC | 	byte	$07, $00, $ef, $0c, $f9, $00, $f9, $ff, $00, $00, $ef, $0c, $00, $fa, $ff, $fc
160ea     FF 00 EB 0A 
160ee     00 00 F5 FF 
160f2     05 04 F7 00 
160f6     FC FF FE FC | 	byte	$ff, $00, $eb, $0a, $00, $00, $f5, $ff, $05, $04, $f7, $00, $fc, $ff, $fe, $fc
160fa     FF 00 FF 00 
160fe     F7 08 F6 FC 
16102     FD 00 FD F8 
16106     FE F8 FF 00 | 	byte	$ff, $00, $ff, $00, $f7, $08, $f6, $fc, $fd, $00, $fd, $f8, $fe, $f8, $ff, $00
1610a     F7 FB 02 F9 
1610e     FF 00 FF 00 
16112     FF 00 FF 00 
16116     FF 04 FA FE | 	byte	$f7, $fb, $02, $f9, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $04, $fa, $fe
1611a     F9 05 00 FF 
1611e     00 F1 FF 00 
16122     F7 FE FD 08 
16126     F7 FC FB 00 | 	byte	$f9, $05, $00, $ff, $00, $f1, $ff, $00, $f7, $fe, $fd, $08, $f7, $fc, $fb, $00
1612a     FB FF F9 FD 
1612e     01 FC FA FF 
16132     00 F7 FF 07 
16136     00 F5 FC FB | 	byte	$fb, $ff, $f9, $fd, $01, $fc, $fa, $ff, $00, $f7, $ff, $07, $00, $f5, $fc, $fb
1613a     07 00 FF 08 
1613e     EF FF 00 F7 
16142     FF 00 FF 08 
16146     FF F6 FB FF | 	byte	$07, $00, $ff, $08, $ef, $ff, $00, $f7, $ff, $00, $ff, $08, $ff, $f6, $fb, $ff
1614a     00 F4 FF 00 
1614e     EF 08 00 FD 
16152     FD FE FF 00 
16156     F3 FF 00 F5 | 	byte	$00, $f4, $ff, $00, $ef, $08, $00, $fd, $fd, $fe, $ff, $00, $f3, $ff, $00, $f5
1615a     FF 00 FF 00 
1615e     F9 00 F9 00 
16162     F7 FF 00 FB 
16166     F8 FF 10 F3 | 	byte	$ff, $00, $ff, $00, $f9, $00, $f9, $00, $f7, $ff, $00, $fb, $f8, $ff, $10, $f3
1616a     FB FF 04 FB 
1616e     08 F5 FF 00 
16172     F7 0A 00 F7 
16176     FF FD FF 00 | 	byte	$fb, $ff, $04, $fb, $08, $f5, $ff, $00, $f7, $0a, $00, $f7, $ff, $fd, $ff, $00
1617a     F5 FF 00 FF 
1617e     00 F3 0B 00 
16182     FF 08 F3 FF 
16186     00 FA FC FF | 	byte	$f5, $ff, $00, $ff, $00, $f3, $0b, $00, $ff, $08, $f3, $ff, $00, $fa, $fc, $ff
1618a     00 FF F1 FF 
1618e     00 FB FA FF 
16192     00 FE F8 FB 
16196     06 00 F7 00 | 	byte	$00, $ff, $f1, $ff, $00, $fb, $fa, $ff, $00, $fe, $f8, $fb, $06, $00, $f7, $00
1619a     FD 07 00 FB 
1619e     FF 02 02 FD 
161a2     00 EF 0B 00 
161a6     FF 07 00 F7 | 	byte	$fd, $07, $00, $fb, $ff, $02, $02, $fd, $00, $ef, $0b, $00, $ff, $07, $00, $f7
161aa     08 F9 08 EF 
161ae     FF 00 FC FF 
161b2     FC F7 FE F9 
161b6     FF 00 FE F9 | 	byte	$08, $f9, $08, $ef, $ff, $00, $fc, $ff, $fc, $f7, $fe, $f9, $ff, $00, $fe, $f9
161ba     06 FA FF FA 
161be     FF 05 FB FF 
161c2     FF 01 FF FF 
161c6     FA FF 00 FF | 	byte	$06, $fa, $ff, $fa, $ff, $05, $fb, $ff, $ff, $01, $ff, $ff, $fa, $ff, $00, $ff
161ca     08 F6 FB 00 
161ce     FD FF 00 EF 
161d2     FF 04 00 F7 
161d6     FE FC FF 00 | 	byte	$08, $f6, $fb, $00, $fd, $ff, $00, $ef, $ff, $04, $00, $f7, $fe, $fc, $ff, $00
161da     FC F9 FE FB 
161de     01 F7 0C F4 
161e2     FF 00 FF 00 
161e6     F8 FB 0A 00 | 	byte	$fc, $f9, $fe, $fb, $01, $f7, $0c, $f4, $ff, $00, $ff, $00, $f8, $fb, $0a, $00
161ea     FC FB FD FF 
161ee     00 EF 08 00 
161f2     FC F3 07 00 
161f6     FF 00 FF 00 | 	byte	$fc, $fb, $fd, $ff, $00, $ef, $08, $00, $fc, $f3, $07, $00, $ff, $00, $ff, $00
161fa     F7 00 FB 04 
161fe     FA FF 02 F7 
16202     07 F7 FF 00 
16206     FD FF FF 07 | 	byte	$f7, $00, $fb, $04, $fa, $ff, $02, $f7, $07, $f7, $ff, $00, $fd, $ff, $ff, $07
1620a     00 FF 00 EF 
1620e     FF 08 00 FF 
16212     00 F7 08 F3 
16216     07 00 FE FD | 	byte	$00, $ff, $00, $ef, $ff, $08, $00, $ff, $00, $f7, $08, $f3, $07, $00, $fe, $fd
1621a     FF FF 02 F0 
1621e     FF 00 07 00 
16222     F3 FF 04 FE 
16226     04 F8 FE F5 | 	byte	$ff, $ff, $02, $f0, $ff, $00, $07, $00, $f3, $ff, $04, $fe, $04, $f8, $fe, $f5
1622a     FF 00 F7 FF 
1622e     FC FF FF 00 
16232     FE F8 FF 00 
16236     FB FF 00 FB | 	byte	$ff, $00, $f7, $ff, $fc, $ff, $ff, $00, $fe, $f8, $ff, $00, $fb, $ff, $00, $fb
1623a     FF 00 FF FD 
1623e     FE FB 00 F8 
16242     05 00 FF FE 
16246     F9 FF 08 00 | 	byte	$ff, $00, $ff, $fd, $fe, $fb, $00, $f8, $05, $00, $ff, $fe, $f9, $ff, $08, $00
1624a     F6 FB 08 00 
1624e     FB 04 F7 FC 
16252     FD 03 00 F5 
16256     FD 00 FF 00 | 	byte	$f6, $fb, $08, $00, $fb, $04, $f7, $fc, $fd, $03, $00, $f5, $fd, $00, $ff, $00
1625a     F7 F9 FF 00 
1625e     FF 00 FB FC 
16262     FD 01 00 F9 
16266     FF 00 FB FF | 	byte	$f7, $f9, $ff, $00, $ff, $00, $fb, $fc, $fd, $01, $00, $f9, $ff, $00, $fb, $ff
1626a     01 00 F3 FF 
1626e     00 02 F9 FF 
16272     F9 FD FF 00 
16276     FB 08 F2 F7 | 	byte	$01, $00, $f3, $ff, $00, $02, $f9, $ff, $f9, $fd, $ff, $00, $fb, $08, $f2, $f7
1627a     08 00 FA F7 
1627e     FF 01 00 FF 
16282     04 F5 FF 03 
16286     08 F2 FF 04 | 	byte	$08, $00, $fa, $f7, $ff, $01, $00, $ff, $04, $f5, $ff, $03, $08, $f2, $ff, $04
1628a     F7 06 00 FC 
1628e     F9 FF FD 00 
16292     01 00 FB 07 
16296     00 F8 FF 00 | 	byte	$f7, $06, $00, $fc, $f9, $ff, $fd, $00, $01, $00, $fb, $07, $00, $f8, $ff, $00
1629a     FE FC F7 05 
1629e     F8 FF 00 F7 
162a2     FE 02 00 FF 
162a6     00 FF 00 FD | 	byte	$fe, $fc, $f7, $05, $f8, $ff, $00, $f7, $fe, $02, $00, $ff, $00, $ff, $00, $fd
162aa     08 F8 FB FF 
162ae     00 00 FB 00 
162b2     F1 0B 00 FA 
162b6     FB 00 FF 00 | 	byte	$08, $f8, $fb, $ff, $00, $00, $fb, $00, $f1, $0b, $00, $fa, $fb, $00, $ff, $00
162ba     00 FB 00 F4 
162be     FF 00 F7 FF 
162c2     F8 FF 00 04 
162c6     F4 FF F9 05 | 	byte	$00, $fb, $00, $f4, $ff, $00, $f7, $ff, $f8, $ff, $00, $04, $f4, $ff, $f9, $05
162ca     00 FF 00 FD 
162ce     03 00 FF 00 
162d2     FE 00 F7 02 
162d6     00 00 F7 07 | 	byte	$00, $ff, $00, $fd, $03, $00, $ff, $00, $fe, $00, $f7, $02, $00, $00, $f7, $07
162da     F8 FF 00 FF 
162de     00 FF 00 FF 
162e2     00 F7 FE FF 
162e6     FC FF 00 FF | 	byte	$f8, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $f7, $fe, $ff, $fc, $ff, $00, $ff
162ea     04 F4 FB 08 
162ee     ED FF 00 FF 
162f2     00 F7 00 FB 
162f6     00 FF 00 FF | 	byte	$04, $f4, $fb, $08, $ed, $ff, $00, $ff, $00, $f7, $00, $fb, $00, $ff, $00, $ff
162fa     FE FF 00 FF 
162fe     F8 FF 00 FF 
16302     00 FF 00 FF 
16306     00 FF 00 FF | 	byte	$fe, $ff, $00, $ff, $f8, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff
1630a     00 FB 01 F6 
1630e     FF 00 FC F8 
16312     FD 06 F8 FF 
16316     00 FB 00 F7 | 	byte	$00, $fb, $01, $f6, $ff, $00, $fc, $f8, $fd, $06, $f8, $ff, $00, $fb, $00, $f7
1631a     FF 00 F9 FE 
1631e     00 FD 04 F7 
16322     FF 00 FD 02 
16326     00 FB FF 03 | 	byte	$ff, $00, $f9, $fe, $00, $fd, $04, $f7, $ff, $00, $fd, $02, $00, $fb, $ff, $03
1632a     FC FF F8 FF 
1632e     08 F3 FF 00 
16332     FE F7 FF F9 
16336     FF 00 FB 02 | 	byte	$fc, $ff, $f8, $ff, $08, $f3, $ff, $00, $fe, $f7, $ff, $f9, $ff, $00, $fb, $02
1633a     00 FB FD FF 
1633e     00 F9 FD FF 
16342     00 F9 FC FF 
16346     00 FA FF 00 | 	byte	$00, $fb, $fd, $ff, $00, $f9, $fd, $ff, $00, $f9, $fc, $ff, $00, $fa, $ff, $00
1634a     FF 00 FC FE 
1634e     FF 00 FB FF 
16352     00 FB FF FB 
16356     FF FD FC FB | 	byte	$ff, $00, $fc, $fe, $ff, $00, $fb, $ff, $00, $fb, $ff, $fb, $ff, $fd, $fc, $fb
1635a     FF F7 04 F8 
1635e     FE FF 00 FF 
16362     00 F8 FF 00 
16366     FF 04 F1 FF | 	byte	$ff, $f7, $04, $f8, $fe, $ff, $00, $ff, $00, $f8, $ff, $00, $ff, $04, $f1, $ff
1636a     04 F7 FF F8 
1636e     FF 00 04 00 
16372     FF 00 FF 00 
16376     FF FC FD FF | 	byte	$04, $f7, $ff, $f8, $ff, $00, $04, $00, $ff, $00, $ff, $00, $ff, $fc, $fd, $ff
1637a     03 00 FA FD 
1637e     00 FD 02 FE 
16382     FF FA FF 01 
16386     FB FB FF 00 | 	byte	$03, $00, $fa, $fd, $00, $fd, $02, $fe, $ff, $fa, $ff, $01, $fb, $fb, $ff, $00
1638a     FF FA FD 00 
1638e     F4 FF 00 F9 
16392     02 F8 FF 04 
16396     F4 F7 0B 00 | 	byte	$ff, $fa, $fd, $00, $f4, $ff, $00, $f9, $02, $f8, $ff, $04, $f4, $f7, $0b, $00
1639a     FF 00 FF 03 
1639e     F9 FF 00 FF 
163a2     00 FF 00 FF 
163a6     00 FB FF 02 | 	byte	$ff, $00, $ff, $03, $f9, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $fb, $ff, $02
163aa     02 F8 FD FB 
163ae     05 00 FF 00 
163b2     FA FF 00 F7 
163b6     FF 00 F8 FD | 	byte	$02, $f8, $fd, $fb, $05, $00, $ff, $00, $fa, $ff, $00, $f7, $ff, $00, $f8, $fd
163ba     00 FF 00 F7 
163be     FF FC FF F8 
163c2     FF 00 FF 00 
163c6     FF 08 FB FC | 	byte	$00, $ff, $00, $f7, $ff, $fc, $ff, $f8, $ff, $00, $ff, $00, $ff, $08, $fb, $fc
163ca     F7 0F 00 F7 
163ce     FF 00 FF 00 
163d2     FC FC FD FC 
163d6     FD 00 FB FF | 	byte	$f7, $0f, $00, $f7, $ff, $00, $ff, $00, $fc, $fc, $fd, $fc, $fd, $00, $fb, $ff
163da     F5 FF 04 00 
163de     F0 08 00 07 
163e2     00 F7 06 00 
163e6     FF 00 FF 08 | 	byte	$f5, $ff, $04, $00, $f0, $08, $00, $07, $00, $f7, $06, $00, $ff, $00, $ff, $08
163ea     FB FC FF 00 
163ee     F7 00 FF 00 
163f2     F7 FF 00 FF 
163f6     F8 FF 00 03 | 	byte	$fb, $fc, $ff, $00, $f7, $00, $ff, $00, $f7, $ff, $00, $ff, $f8, $ff, $00, $03
163fa     00 F4 FF 00 
163fe     FF 04 FB 04 
16402     F9 00 F3 0B 
16406     00 FF 00 FF | 	byte	$00, $f4, $ff, $00, $ff, $04, $fb, $04, $f9, $00, $f3, $0b, $00, $ff, $00, $ff
1640a     04 F8 F7 FF 
1640e     FF 00 F8 FB 
16412     FF 00 FB FF 
16416     FA FF 00 F7 | 	byte	$04, $f8, $f7, $ff, $ff, $00, $f8, $fb, $ff, $00, $fb, $ff, $fa, $ff, $00, $f7
1641a     03 03 F6 FF 
1641e     00 FE FD FB 
16422     FF 00 FB FB 
16426     FF 00 F7 00 | 	byte	$03, $03, $f6, $ff, $00, $fe, $fd, $fb, $ff, $00, $fb, $fb, $ff, $00, $f7, $00
1642a     F7 06 00 F9 
1642e     FE FD FE FE 
16432     F9 FF 00 FB 
16436     FD FF 00 FC | 	byte	$f7, $06, $00, $f9, $fe, $fd, $fe, $fe, $f9, $ff, $00, $fb, $fd, $ff, $00, $fc
1643a     FA 08 00 02 
1643e     F0 FF 08 FF 
16442     F8 FB 04 01 
16446     00 FB 03 00 | 	byte	$fa, $08, $00, $02, $f0, $ff, $08, $ff, $f8, $fb, $04, $01, $00, $fb, $03, $00
1644a     F9 FF 08 FA 
1644e     F8 FF 00 FF 
16452     00 F7 FF 01 
16456     F9 FF FC FF | 	byte	$f9, $ff, $08, $fa, $f8, $ff, $00, $ff, $00, $f7, $ff, $01, $f9, $ff, $fc, $ff
1645a     00 FB 04 F7 
1645e     FF 00 FF 00 
16462     FD FF FC FF 
16466     00 FD FC FB | 	byte	$00, $fb, $04, $f7, $ff, $00, $ff, $00, $fd, $ff, $fc, $ff, $00, $fd, $fc, $fb
1646a     05 00 F9 FF 
1646e     04 F8 FF 00 
16472     FF 04 00 FB 
16476     00 FF 00 FF | 	byte	$05, $00, $f9, $ff, $04, $f8, $ff, $00, $ff, $04, $00, $fb, $00, $ff, $00, $ff
1647a     FE FF FC FB 
1647e     FE FF 00 FF 
16482     00 FB 04 FC 
16486     F9 FF 00 F9 | 	byte	$fe, $ff, $fc, $fb, $fe, $ff, $00, $ff, $00, $fb, $04, $fc, $f9, $ff, $00, $f9
1648a     01 FB 03 FA 
1648e     FE FF 00 FE 
16492     FE FF 00 FB 
16496     FE FF 00 FE | 	byte	$01, $fb, $03, $fa, $fe, $ff, $00, $fe, $fe, $ff, $00, $fb, $fe, $ff, $00, $fe
1649a     F8 FF 02 FD 
1649e     F8 FF 02 00 
164a2     FA FB 01 F9 
164a6     FD 01 F9 FF | 	byte	$f8, $ff, $02, $fd, $f8, $ff, $02, $00, $fa, $fb, $01, $f9, $fd, $01, $f9, $ff
164aa     FA FF 00 FF 
164ae     00 F7 08 F7 
164b2     04 FA FF 00 
164b6     FB FF 00 F9 | 	byte	$fa, $ff, $00, $ff, $00, $f7, $08, $f7, $04, $fa, $ff, $00, $fb, $ff, $00, $f9
164ba     FF 00 F8 FF 
164be     00 FB FE FB 
164c2     04 F7 FF FF 
164c6     05 F3 FF 00 | 	byte	$ff, $00, $f8, $ff, $00, $fb, $fe, $fb, $04, $f7, $ff, $ff, $05, $f3, $ff, $00
164ca     FF F9 FE FA 
164ce     FF 00 FA FB 
164d2     FF 00 FA FF 
164d6     08 F4 FF 00 | 	byte	$ff, $f9, $fe, $fa, $ff, $00, $fa, $fb, $ff, $00, $fa, $ff, $08, $f4, $ff, $00
164da     FF 00 FD F7 
164de     FF 00 FF 00 
164e2     F7 04 00 FF 
164e6     00 FD 00 F7 | 	byte	$ff, $00, $fd, $f7, $ff, $00, $ff, $00, $f7, $04, $00, $ff, $00, $fd, $00, $f7
164ea     FF 00 FF F9 
164ee     FF 00 FF 00 
164f2     FB FF 00 00 
164f6     00 00 00 00 | 	byte	$ff, $00, $ff, $f9, $ff, $00, $ff, $00, $fb, $ff, $00, $00, $00, $00, $00, $00
164fa     00 00 F0 ED 
164fe     EC EB F1 FC 
16502     07 0E 12 16 
16506     17 12 0A 01 | 	byte	$00, $00, $f0, $ed, $ec, $eb, $f1, $fc, $07, $0e, $12, $16, $17, $12, $0a, $01
1650a     FD F8 F4 F1 
1650e     F4 F7 FA FC 
16512     FC FC FB F8 
16516     F6 F5 F8 FB | 	byte	$fd, $f8, $f4, $f1, $f4, $f7, $fa, $fc, $fc, $fc, $fb, $f8, $f6, $f5, $f8, $fb
1651a     FF 04 09 0D 
1651e     0E 0D 0A 06 
16522     01 FA F7 F8 
16526     FB FC FD FF | 	byte	$ff, $04, $09, $0d, $0e, $0d, $0a, $06, $01, $fa, $f7, $f8, $fb, $fc, $fd, $ff
1652a     02 01 FE FB 
1652e     FB FA FB FD 
16532     03 0B 0D 0D 
16536     0D 0B 02 F8 | 	byte	$02, $01, $fe, $fb, $fb, $fa, $fb, $fd, $03, $0b, $0d, $0d, $0d, $0b, $02, $f8
1653a     F4 F5 F5 F4 
1653e     F8 FF 07 0A 
16542     09 09 08 04 
16546     FD F6 F3 F5 | 	byte	$f4, $f5, $f5, $f4, $f8, $ff, $07, $0a, $09, $09, $08, $04, $fd, $f6, $f3, $f5
1654a     FA FC FD FF 
1654e     02 04 01 FD 
16552     FC FD FF 02 
16556     08 0E 13 14 | 	byte	$fa, $fc, $fd, $ff, $02, $04, $01, $fd, $fc, $fd, $ff, $02, $08, $0e, $13, $14
1655a     11 0C 04 F6 
1655e     EC E4 DE DB 
16562     DF EF FF 0F 
16566     19 23 29 23 | 	byte	$11, $0c, $04, $f6, $ec, $e4, $de, $db, $df, $ef, $ff, $0f, $19, $23, $29, $23
1656a     18 0B 02 FA 
1656e     F1 EC ED F1 
16572     F4 F5 F6 F6 
16576     F5 F1 EF EE | 	byte	$18, $0b, $02, $fa, $f1, $ec, $ed, $f1, $f4, $f5, $f6, $f6, $f5, $f1, $ef, $ee
1657a     F1 F7 FF 09 
1657e     12 18 1C 1B 
16582     15 0D 00 F7 
16586     F1 F3 F4 F5 | 	byte	$f1, $f7, $ff, $09, $12, $18, $1c, $1b, $15, $0d, $00, $f7, $f1, $f3, $f4, $f5
1658a     F8 FE 03 02 
1658e     FD FA F9 F9 
16592     F8 FA 03 0D 
16596     12 13 13 10 | 	byte	$f8, $fe, $03, $02, $fd, $fa, $f9, $f9, $f8, $fa, $03, $0d, $12, $13, $13, $10
1659a     06 F6 EE EF 
1659e     F1 F1 F5 FF 
165a2     0C 11 11 0E 
165a6     0B 04 FB F2 | 	byte	$06, $f6, $ee, $ef, $f1, $f1, $f5, $ff, $0c, $11, $11, $0e, $0b, $04, $fb, $f2
165aa     EA E7 EC F5 
165ae     FD 02 07 0B 
165b2     0C 08 01 FC 
165b6     FC FF 06 0D | 	byte	$ea, $e7, $ec, $f5, $fd, $02, $07, $0b, $0c, $08, $01, $fc, $fc, $ff, $06, $0d
165ba     13 17 19 16 
165be     0B FB E9 DE 
165c2     D2 C9 CD DD 
165c6     F7 0B 1B 2A | 	byte	$13, $17, $19, $16, $0b, $fb, $e9, $de, $d2, $c9, $cd, $dd, $f7, $0b, $1b, $2a
165ca     38 38 29 18 
165ce     0A 01 F6 EB 
165d2     E8 EA ED EF 
165d6     ED EC EA E7 | 	byte	$38, $38, $29, $18, $0a, $01, $f6, $eb, $e8, $ea, $ed, $ef, $ed, $ec, $ea, $e7
165da     E5 E5 E8 F1 
165de     FF 0F 1E 27 
165e2     2C 2C 26 19 
165e6     04 F3 EF EE | 	byte	$e5, $e5, $e8, $f1, $ff, $0f, $1e, $27, $2c, $2c, $26, $19, $04, $f3, $ef, $ee
165ea     EC EA F1 FA 
165ee     FF FE FA F8 
165f2     F9 F7 F4 F7 
165f6     03 0F 17 18 | 	byte	$ec, $ea, $f1, $fa, $ff, $fe, $fa, $f8, $f9, $f7, $f4, $f7, $03, $0f, $17, $18
165fa     15 13 0A F8 
165fe     E7 E4 ED F3 
16602     F7 FF 11 1D 
16606     1C 15 0B 01 | 	byte	$15, $13, $0a, $f8, $e7, $e4, $ed, $f3, $f7, $ff, $11, $1d, $1c, $15, $0b, $01
1660a     F5 E9 E0 DA 
1660e     DD E9 FD 09 
16612     0F 13 17 17 
16616     0C FE F9 FE | 	byte	$f5, $e9, $e0, $da, $dd, $e9, $fd, $09, $0f, $13, $17, $17, $0c, $fe, $f9, $fe
1661a     05 09 0F 17 
1661e     1F 1D 10 FE 
16622     EA DA C9 BA 
16626     B9 CD EB 04 | 	byte	$05, $09, $0f, $17, $1f, $1d, $10, $fe, $ea, $da, $c9, $ba, $b9, $cd, $eb, $04
1662a     19 2E 41 49 
1662e     3B 25 16 0C 
16632     FE F0 E7 E7 
16636     EB EA E6 E0 | 	byte	$19, $2e, $41, $49, $3b, $25, $16, $0c, $fe, $f0, $e7, $e7, $eb, $ea, $e6, $e0
1663a     DD D9 D7 D8 
1663e     DE EB FD 17 
16642     2B 39 3D 3F 
16646     38 20 06 F4 | 	byte	$dd, $d9, $d7, $d8, $de, $eb, $fd, $17, $2b, $39, $3d, $3f, $38, $20, $06, $f4
1664a     EE EA E1 DF 
1664e     E9 F5 FA F8 
16652     F5 F6 F8 F6 
16656     F3 F8 04 13 | 	byte	$ee, $ea, $e1, $df, $e9, $f5, $fa, $f8, $f5, $f6, $f8, $f6, $f3, $f8, $04, $13
1665a     1B 1C 18 14 
1665e     0C F8 E2 DA 
16662     E5 F6 FD 07 
16666     17 29 2B 1C | 	byte	$1b, $1c, $18, $14, $0c, $f8, $e2, $da, $e5, $f6, $fd, $07, $17, $29, $2b, $1c
1666a     0C FD EC DD 
1666e     D1 CC CF DF 
16672     FB 13 1D 21 
16676     26 24 15 02 | 	byte	$0c, $fd, $ec, $dd, $d1, $cc, $cf, $df, $fb, $13, $1d, $21, $26, $24, $15, $02
1667a     F7 F8 FD FF 
1667e     09 15 21 21 
16682     16 04 EE DB 
16686     C3 B0 AC BF | 	byte	$f7, $f8, $fd, $ff, $09, $15, $21, $21, $16, $04, $ee, $db, $c3, $b0, $ac, $bf
1668a     DF FF 17 33 
1668e     4A 55 48 31 
16692     20 11 02 F2 
16696     E7 E5 E8 E7 | 	byte	$df, $ff, $17, $33, $4a, $55, $48, $31, $20, $11, $02, $f2, $e7, $e5, $e8, $e7
1669a     E1 D8 D3 CE 
1669e     CC CE D5 E5 
166a2     FD 1D 37 45 
166a6     4D 50 43 28 | 	byte	$e1, $d8, $d3, $ce, $cc, $ce, $d5, $e5, $fd, $1d, $37, $45, $4d, $50, $43, $28
166aa     09 F9 F0 E2 
166ae     D8 D8 E3 EC 
166b2     ED EE F1 F5 
166b6     F6 F5 F5 FB | 	byte	$09, $f9, $f0, $e2, $d8, $d8, $e3, $ec, $ed, $ee, $f1, $f5, $f6, $f5, $f5, $fb
166ba     09 15 1C 1C 
166be     18 11 08 F9 
166c2     E4 D8 DF F7 
166c6     07 10 1D 2D | 	byte	$09, $15, $1c, $1c, $18, $11, $08, $f9, $e4, $d8, $df, $f7, $07, $10, $1d, $2d
166ca     32 24 0E F6 
166ce     E0 D1 C8 C0 
166d2     C5 DB FE 1F 
166d6     2C 33 37 31 | 	byte	$32, $24, $0e, $f6, $e0, $d1, $c8, $c0, $c5, $db, $fe, $1f, $2c, $33, $37, $31
166da     20 03 F5 EF 
166de     EE F1 FB 0D 
166e2     18 1C 18 08 
166e6     F4 DC C6 B0 | 	byte	$20, $03, $f5, $ef, $ee, $f1, $fb, $0d, $18, $1c, $18, $08, $f4, $dc, $c6, $b0
166ea     A9 BE DF FB 
166ee     17 33 4D 59 
166f2     50 3B 24 14 
166f6     04 F5 E8 E3 | 	byte	$a9, $be, $df, $fb, $17, $33, $4d, $59, $50, $3b, $24, $14, $04, $f5, $e8, $e3
166fa     E4 E6 E1 D9 
166fe     D1 CA C9 CC 
16702     D1 E1 FF 1F 
16706     3A 4B 54 54 | 	byte	$e4, $e6, $e1, $d9, $d1, $ca, $c9, $cc, $d1, $e1, $ff, $1f, $3a, $4b, $54, $54
1670a     44 28 10 00 
1670e     EC DA D1 D5 
16712     DD DF E2 E9 
16716     F1 F5 F8 FA | 	byte	$44, $28, $10, $00, $ec, $da, $d1, $d5, $dd, $df, $e2, $e9, $f1, $f5, $f8, $fa
1671a     FC 01 0B 15 
1671e     1A 18 15 0F 
16722     06 F9 EC DD 
16726     DF F7 0D 19 | 	byte	$fc, $01, $0b, $15, $1a, $18, $15, $0f, $06, $f9, $ec, $dd, $df, $f7, $0d, $19
1672a     21 2D 33 29 
1672e     10 F0 D9 CC 
16732     C0 B8 BF DF 
16736     0E 2A 36 3F | 	byte	$21, $2d, $33, $29, $10, $f0, $d9, $cc, $c0, $b8, $bf, $df, $0e, $2a, $36, $3f
1673a     43 34 18 FD 
1673e     EC E2 DE E4 
16742     F4 07 15 1C 
16746     1C 10 F8 E4 | 	byte	$43, $34, $18, $fd, $ec, $e2, $de, $e4, $f4, $07, $15, $1c, $1c, $10, $f8, $e4
1674a     CC B6 AD BF 
1674e     E3 FF 19 33 
16752     4F 59 50 35 
16756     1D 0A FA F0 | 	byte	$cc, $b6, $ad, $bf, $e3, $ff, $19, $33, $4f, $59, $50, $35, $1d, $0a, $fa, $f0
1675a     E6 E3 E5 EB 
1675e     EB E2 D6 CF 
16762     CC CB CD DF 
16766     FE 23 39 4A | 	byte	$e6, $e3, $e5, $eb, $eb, $e2, $d6, $cf, $cc, $cb, $cd, $df, $fe, $23, $39, $4a
1676a     56 53 3C 26 
1676e     13 02 E8 D4 
16772     CF D3 D7 D8 
16776     DF EA F2 F7 | 	byte	$56, $53, $3c, $26, $13, $02, $e8, $d4, $cf, $d3, $d7, $d8, $df, $ea, $f2, $f7
1677a     FB FF 03 06 
1677e     0F 18 19 14 
16782     10 0D 02 F8 
16786     EC E3 E1 EF | 	byte	$fb, $ff, $03, $06, $0f, $18, $19, $14, $10, $0d, $02, $f8, $ec, $e3, $e1, $ef
1678a     0B 1F 28 2D 
1678e     34 2E 14 F2 
16792     D6 C7 B6 AF 
16796     C5 EF 12 2B | 	byte	$0b, $1f, $28, $2d, $34, $2e, $14, $f2, $d6, $c7, $b6, $af, $c5, $ef, $12, $2b
1679a     3E 4C 49 2D 
1679e     10 F6 E5 D4 
167a2     CF DA EF FF 
167a6     10 19 1C 12 | 	byte	$3e, $4c, $49, $2d, $10, $f6, $e5, $d4, $cf, $da, $ef, $ff, $10, $19, $1c, $12
167aa     FC E9 D2 BD 
167ae     B6 C9 EF 0B 
167b2     1F 39 51 56 
167b6     44 2A 13 FC | 	byte	$fc, $e9, $d2, $bd, $b6, $c9, $ef, $0b, $1f, $39, $51, $56, $44, $2a, $13, $fc
167ba     EA E3 E3 E7 
167be     EE F6 FA F4 
167c2     E8 DA D1 C9 
167c6     CC DF FB 19 | 	byte	$ea, $e3, $e3, $e7, $ee, $f6, $fa, $f4, $e8, $da, $d1, $c9, $cc, $df, $fb, $19
167ca     2E 47 53 49 
167ce     34 22 15 02 
167d2     E4 D3 D1 D6 
167d6     D6 D5 DD EB | 	byte	$2e, $47, $53, $49, $34, $22, $15, $02, $e4, $d3, $d1, $d6, $d6, $d5, $dd, $eb
167da     F4 F9 FF 05 
167de     08 0B 13 1A 
167e2     19 12 0D 0A 
167e6     FD F0 E9 E5 | 	byte	$f4, $f9, $ff, $05, $08, $0b, $13, $1a, $19, $12, $0d, $0a, $fd, $f0, $e9, $e5
167ea     E1 E9 FF 22 
167ee     31 35 38 34 
167f2     20 FC DC BC 
167f6     AE B7 D3 EF | 	byte	$e1, $e9, $ff, $22, $31, $35, $38, $34, $20, $fc, $dc, $bc, $ae, $b7, $d3, $ef
167fa     0D 29 45 4F 
167fe     40 1C 06 F2 
16802     E0 CB C8 D6 
16806     ED FF 09 12 | 	byte	$0d, $29, $45, $4f, $40, $1c, $06, $f2, $e0, $cb, $c8, $d6, $ed, $ff, $09, $12
1680a     17 10 FD EE 
1680e     DD CC C9 DF 
16812     FF 19 26 37 
16816     47 44 2D 11 | 	byte	$17, $10, $fd, $ee, $dd, $cc, $c9, $df, $ff, $19, $26, $37, $47, $44, $2d, $11
1681a     FC EA DC D9 
1681e     E5 F4 FF 0B 
16822     0F 0C FD E6 
16826     D0 C9 CF DD | 	byte	$fc, $ea, $dc, $d9, $e5, $f4, $ff, $0b, $0f, $0c, $fd, $e6, $d0, $c9, $cf, $dd
1682a     EF 07 23 3D 
1682e     45 39 28 1D 
16832     15 02 E8 D8 
16836     D9 DD DB D8 | 	byte	$ef, $07, $23, $3d, $45, $39, $28, $1d, $15, $02, $e8, $d8, $d9, $dd, $db, $d8
1683a     DF EB F5 F9 
1683e     FF 09 0E 13 
16842     19 1F 1C 11 
16846     08 01 F6 E4 | 	byte	$df, $eb, $f5, $f9, $ff, $09, $0e, $13, $19, $1f, $1c, $11, $08, $01, $f6, $e4
1684a     DE E1 E1 E6 
1684e     FB 23 3E 44 
16852     40 39 2E 0A 
16856     DA B9 B9 CB | 	byte	$de, $e1, $e1, $e6, $fb, $23, $3e, $44, $40, $39, $2e, $0a, $da, $b9, $b9, $cb
1685a     D6 E5 FF 27 
1685e     3E 3C 28 14 
16862     02 F2 E0 D1 
16866     D0 DD EB F8 | 	byte	$d6, $e5, $ff, $27, $3e, $3c, $28, $14, $02, $f2, $e0, $d1, $d0, $dd, $eb, $f8
1686a     FF 07 0B 08 
1686e     FE F6 F0 E6 
16872     E6 FB 16 27 
16876     29 2C 30 29 | 	byte	$ff, $07, $0b, $08, $fe, $f6, $f0, $e6, $e6, $fb, $16, $27, $29, $2c, $30, $29
1687a     0D F0 E2 DA 
1687e     D5 DB EF 0B 
16882     1D 23 26 20 
16886     08 EC D5 CD | 	byte	$0d, $f0, $e2, $da, $d5, $db, $ef, $0b, $1d, $23, $26, $20, $08, $ec, $d5, $cd
1688a     CC D1 DF F9 
1688e     13 28 31 2D 
16892     20 17 11 06 
16896     F4 E4 E3 E6 | 	byte	$cc, $d1, $df, $f9, $13, $28, $31, $2d, $20, $17, $11, $06, $f4, $e4, $e3, $e6
1689a     E3 DD DE E7 
1689e     F3 F9 FF 0E 
168a2     15 1B 21 25 
168a6     20 10 FF F4 | 	byte	$e3, $dd, $de, $e7, $f3, $f9, $ff, $0e, $15, $1b, $21, $25, $20, $10, $ff, $f4
168aa     E9 D8 CE D5 
168ae     E1 E9 FB 1F 
168b2     47 54 4C 45 
168b6     34 10 EA D4 | 	byte	$e9, $d8, $ce, $d5, $e1, $e9, $fb, $1f, $47, $54, $4c, $45, $34, $10, $ea, $d4
168ba     CD C9 CC DD 
168be     FB 0D 17 1C 
168c2     1B 12 02 F4 
168c6     ED E5 E0 DF | 	byte	$cd, $c9, $cc, $dd, $fb, $0d, $17, $1c, $1b, $12, $02, $f4, $ed, $e5, $e0, $df
168ca     E6 ED F1 F6 
168ce     FF 04 07 0C 
168d2     0F 08 06 14 
168d6     27 29 19 10 | 	byte	$e6, $ed, $f1, $f6, $ff, $04, $07, $0c, $0f, $08, $06, $14, $27, $29, $19, $10
168da     0C 01 EA D0 
168de     CC D5 DD EA 
168e2     05 23 3B 40 
168e6     39 29 14 F9 | 	byte	$0c, $01, $ea, $d0, $cc, $d5, $dd, $ea, $05, $23, $3b, $40, $39, $29, $14, $f9
168ea     E0 C8 BD BF 
168ee     CF E5 F7 0B 
168f2     1E 29 20 14 
168f6     11 12 05 F4 | 	byte	$e0, $c8, $bd, $bf, $cf, $e5, $f7, $0b, $1e, $29, $20, $14, $11, $12, $05, $f4
168fa     E9 EB EC E6 
168fe     E1 E7 F3 FF 
16902     0A 13 19 1F 
16906     25 27 1E 08 | 	byte	$e9, $eb, $ec, $e6, $e1, $e7, $f3, $ff, $0a, $13, $19, $1f, $25, $27, $1e, $08
1690a     F7 E8 DC CD 
1690e     C3 C9 DF EF 
16912     FD 1B 43 61 
16916     60 48 35 2C | 	byte	$f7, $e8, $dc, $cd, $c3, $c9, $df, $ef, $fd, $1b, $43, $61, $60, $48, $35, $2c
1691a     18 F4 D0 C3 
1691e     C9 D1 D4 DD 
16922     EF 05 13 10 
16926     08 05 03 FA | 	byte	$18, $f4, $d0, $c3, $c9, $d1, $d4, $dd, $ef, $05, $13, $10, $08, $05, $03, $fa
1692a     EA DD DA DF 
1692e     E6 ED FA 0B 
16932     1B 29 2F 24 
16936     1C 1F 26 19 | 	byte	$ea, $dd, $da, $df, $e6, $ed, $fa, $0b, $1b, $29, $2f, $24, $1c, $1f, $26, $19
1693a     00 EE E8 E0 
1693e     CE C0 C4 D7 
16942     ED FD 13 33 
16946     4F 54 43 35 | 	byte	$00, $ee, $e8, $e0, $ce, $c0, $c4, $d7, $ed, $fd, $13, $33, $4f, $54, $43, $35
1694a     23 08 E2 C0 
1694e     B2 B1 B7 C5 
16952     DD F9 0F 23 
16956     29 20 14 13 | 	byte	$23, $08, $e2, $c0, $b2, $b1, $b7, $c5, $dd, $f9, $0f, $23, $29, $20, $14, $13
1695a     10 00 ED E7 
1695e     EC F0 EE EF 
16962     F9 07 13 19 
16966     19 1B 21 21 | 	byte	$10, $00, $ed, $e7, $ec, $f0, $ee, $ef, $f9, $07, $13, $19, $19, $1b, $21, $21
1696a     16 03 F0 E4 
1696e     D7 CB C1 C3 
16972     D7 ED F9 0D 
16976     37 5B 60 54 | 	byte	$16, $03, $f0, $e4, $d7, $cb, $c1, $c3, $d7, $ed, $f9, $0d, $37, $5b, $60, $54
1697a     52 55 3C 0C 
1697e     E2 CB C0 B1 
16982     A9 B7 D1 EF 
16986     03 15 19 16 | 	byte	$52, $55, $3c, $0c, $e2, $cb, $c0, $b1, $a9, $b7, $d1, $ef, $03, $15, $19, $16
1698a     0D 01 F1 DC 
1698e     D1 D4 E3 F2 
16992     07 1B 32 43 
16996     48 38 24 1E | 	byte	$0d, $01, $f1, $dc, $d1, $d4, $e3, $f2, $07, $1b, $32, $43, $48, $38, $24, $1e
1699a     19 08 E8 D4 
1699e     CF CC C2 BC 
169a2     C3 DD F7 0B 
169a6     1D 3D 55 5A | 	byte	$19, $08, $e8, $d4, $cf, $cc, $c2, $bc, $c3, $dd, $f7, $0b, $1d, $3d, $55, $5a
169aa     52 44 30 10 
169ae     E8 C4 AE A1 
169b2     A0 AB C7 E7 
169b6     05 1D 2F 32 | 	byte	$52, $44, $30, $10, $e8, $c4, $ae, $a1, $a0, $ab, $c7, $e7, $05, $1d, $2f, $32
169ba     22 0D 05 02 
169be     F3 E5 E3 F1 
169c2     FF 06 09 13 
169c6     1F 22 1B 12 | 	byte	$22, $0d, $05, $02, $f3, $e5, $e3, $f1, $ff, $06, $09, $13, $1f, $22, $1b, $12
169ca     13 15 0E 00 
169ce     F0 E6 DC D0 
169d2     C7 C3 CF E1 
169d6     EE FD 1F 3F | 	byte	$13, $15, $0e, $00, $f0, $e6, $dc, $d0, $c7, $c3, $cf, $e1, $ee, $fd, $1f, $3f
169da     5A 69 71 70 
169de     5C 30 06 DC 
169e2     B4 9C 91 9B 
169e6     B5 D3 EF 0F | 	byte	$5a, $69, $71, $70, $5c, $30, $06, $dc, $b4, $9c, $91, $9b, $b5, $d3, $ef, $0f
169ea     1F 21 14 00 
169ee     F1 E1 D4 CF 
169f2     DD FB 17 31 
169f6     43 55 5A 46 | 	byte	$1f, $21, $14, $00, $f1, $e1, $d4, $cf, $dd, $fb, $17, $31, $43, $55, $5a, $46
169fa     28 16 0D F6 
169fe     D9 C2 C0 C1 
16a02     BD BA C6 DD 
16a06     F9 0B 21 37 | 	byte	$28, $16, $0d, $f6, $d9, $c2, $c0, $c1, $bd, $ba, $c6, $dd, $f9, $0b, $21, $37
16a0a     4F 5C 5D 51 
16a0e     39 1C F4 D1 
16a12     B0 9C 95 9F 
16a16     B5 D6 F7 17 | 	byte	$4f, $5c, $5d, $51, $39, $1c, $f4, $d1, $b0, $9c, $95, $9f, $b5, $d6, $f7, $17
16a1a     2A 36 30 18 
16a1e     00 F0 ED E9 
16a22     E3 E9 FF 1B 
16a26     26 27 2A 2C | 	byte	$2a, $36, $30, $18, $00, $f0, $ed, $e9, $e3, $e9, $ff, $1b, $26, $27, $2a, $2c
16a2a     24 14 09 06 
16a2e     01 F5 ED E8 
16a32     E2 D8 CE C9 
16a36     CB D3 DE EB | 	byte	$24, $14, $09, $06, $01, $f5, $ed, $e8, $e2, $d8, $ce, $c9, $cb, $d3, $de, $eb
16a3a     FF 1F 49 6C 
16a3e     7F 7F 74 5A 
16a42     30 00 C8 A0 
16a46     8C 89 99 B1 | 	byte	$ff, $1f, $49, $6c, $7f, $7f, $74, $5a, $30, $00, $c8, $a0, $8c, $89, $99, $b1
16a4a     D7 FB 13 1F 
16a4e     19 05 F0 E0 
16a52     D8 D5 DF F7 
16a56     1F 3F 55 63 | 	byte	$d7, $fb, $13, $1f, $19, $05, $f0, $e0, $d8, $d5, $df, $f7, $1f, $3f, $55, $63
16a5a     66 52 34 1A 
16a5e     08 F0 CC B8 
16a62     B5 B9 B5 B5 
16a66     BF DB F3 09 | 	byte	$66, $52, $34, $1a, $08, $f0, $cc, $b8, $b5, $b9, $b5, $b5, $bf, $db, $f3, $09
16a6a     1D 33 45 58 
16a6e     60 58 44 28 
16a72     0A E4 C0 A3 
16a76     97 9B AD C5 | 	byte	$1d, $33, $45, $58, $60, $58, $44, $28, $0a, $e4, $c0, $a3, $97, $9b, $ad, $c5
16a7a     E6 07 21 2E 
16a7e     2E 22 0C EC 
16a82     D8 D9 E5 ED 
16a86     FB 15 35 43 | 	byte	$e6, $07, $21, $2e, $2e, $22, $0c, $ec, $d8, $d9, $e5, $ed, $fb, $15, $35, $43
16a8a     44 3C 2D 1D 
16a8e     0E 01 F4 E9 
16a92     E3 E4 E2 DC 
16a96     D5 D2 D0 D0 | 	byte	$44, $3c, $2d, $1d, $0e, $01, $f4, $e9, $e3, $e4, $e2, $dc, $d5, $d2, $d0, $d0
16a9a     D6 DD E9 FE 
16a9e     23 57 79 7F 
16aa2     7F 76 5C 24 
16aa6     F0 B8 9A 8B | 	byte	$d6, $dd, $e9, $fe, $23, $57, $79, $7f, $7f, $76, $5c, $24, $f0, $b8, $9a, $8b
16aaa     8A 99 B9 DD 
16aae     FB 0D 11 09 
16ab2     F8 E4 D6 D7 
16ab6     E3 F7 15 3E | 	byte	$8a, $99, $b9, $dd, $fb, $0d, $11, $09, $f8, $e4, $d6, $d7, $e3, $f7, $15, $3e
16aba     5B 73 76 62 
16abe     42 2D 15 F6 
16ac2     CC B3 AD AC 
16ac6     A8 A7 B7 D1 | 	byte	$5b, $73, $76, $62, $42, $2d, $15, $f6, $cc, $b3, $ad, $ac, $a8, $a7, $b7, $d1
16aca     EB FF 17 2B 
16ace     3F 4F 5A 5B 
16ad2     4B 34 18 FC 
16ad6     D8 BA A5 A3 | 	byte	$eb, $ff, $17, $2b, $3f, $4f, $5a, $5b, $4b, $34, $18, $fc, $d8, $ba, $a5, $a3
16ada     AB BF D3 F1 
16ade     0B 1F 23 1B 
16ae2     0D FA E0 CB 
16ae6     CF E7 FD 13 | 	byte	$ab, $bf, $d3, $f1, $0b, $1f, $23, $1b, $0d, $fa, $e0, $cb, $cf, $e7, $fd, $13
16aea     2A 47 5C 59 
16aee     45 2C 1C 0C 
16af2     F8 E0 D5 D6 
16af6     D9 D8 D5 D5 | 	byte	$2a, $47, $5c, $59, $45, $2c, $1c, $0c, $f8, $e0, $d5, $d6, $d9, $d8, $d5, $d5
16afa     D6 D5 D7 DB 
16afe     DE E7 FF 2D 
16b02     5D 79 7F 7F 
16b06     78 58 20 E8 | 	byte	$d6, $d5, $d7, $db, $de, $e7, $ff, $2d, $5d, $79, $7f, $7f, $78, $58, $20, $e8
16b0a     BA A0 91 8E 
16b0e     9D B7 D7 EF 
16b12     FD FF FA ED 
16b16     DD D4 DD F5 | 	byte	$ba, $a0, $91, $8e, $9d, $b7, $d7, $ef, $fd, $ff, $fa, $ed, $dd, $d4, $dd, $f5
16b1a     0F 31 53 71 
16b1e     7F 78 58 44 
16b22     30 10 DC B8 
16b26     A8 A1 98 94 | 	byte	$0f, $31, $53, $71, $7f, $78, $58, $44, $30, $10, $dc, $b8, $a8, $a1, $98, $94
16b2a     A1 BB D9 F3 
16b2e     0D 25 37 45 
16b32     50 55 4E 3A 
16b36     24 0C F2 D8 | 	byte	$a1, $bb, $d9, $f3, $0d, $25, $37, $45, $50, $55, $4e, $3a, $24, $0c, $f2, $d8
16b3a     C1 B7 B8 BF 
16b3e     CD DF F3 05 
16b42     0D 0E 05 F8 
16b46     EC DA CC CF | 	byte	$c1, $b7, $b8, $bf, $cd, $df, $f3, $05, $0d, $0e, $05, $f8, $ec, $da, $cc, $cf
16b4a     EB 0F 2A 3E 
16b4e     55 6A 68 4E 
16b52     34 1E 09 EC 
16b56     D0 C7 C7 C8 | 	byte	$eb, $0f, $2a, $3e, $55, $6a, $68, $4e, $34, $1e, $09, $ec, $d0, $c7, $c7, $c8
16b5a     C9 CF D8 DC 
16b5e     DE E1 E1 E1 
16b62     EB 07 2F 53 
16b66     69 79 7D 72 | 	byte	$c9, $cf, $d8, $dc, $de, $e1, $e1, $e1, $eb, $07, $2f, $53, $69, $79, $7d, $72
16b6a     56 28 F9 CC 
16b6e     B0 9C 97 9F 
16b72     B2 C9 DC E7 
16b76     EB E8 E4 DF | 	byte	$56, $28, $f9, $cc, $b0, $9c, $97, $9f, $b2, $c9, $dc, $e7, $eb, $e8, $e4, $df
16b7a     DD E9 05 27 
16b7e     43 5F 7C 7F 
16b82     74 64 54 32 
16b86     04 D0 B4 A0 | 	byte	$dd, $e9, $05, $27, $43, $5f, $7c, $7f, $74, $64, $54, $32, $04, $d0, $b4, $a0
16b8a     8C 80 85 9F 
16b8e     BD DD FF 1B 
16b92     35 42 4B 4D 
16b96     49 3D 2C 1A | 	byte	$8c, $80, $85, $9f, $bd, $dd, $ff, $1b, $35, $42, $4b, $4d, $49, $3d, $2c, $1a
16b9a     05 F2 E1 D6 
16b9e     D0 CF D2 DB 
16ba2     E3 EB F0 F3 
16ba6     F3 ED E4 DF | 	byte	$05, $f2, $e1, $d6, $d0, $cf, $d2, $db, $e3, $eb, $f0, $f3, $f3, $ed, $e4, $df
16baa     DD DA DD EF 
16bae     1B 3B 52 5F 
16bb2     69 69 5A 41 
16bb6     22 FD E2 CB | 	byte	$dd, $da, $dd, $ef, $1b, $3b, $52, $5f, $69, $69, $5a, $41, $22, $fd, $e2, $cb
16bba     BD B3 B3 BE 
16bbe     CD D9 DF E9 
16bc2     EF EB EC F7 
16bc6     0B 26 43 5C | 	byte	$bd, $b3, $b3, $be, $cd, $d9, $df, $e9, $ef, $eb, $ec, $f7, $0b, $26, $43, $5c
16bca     6E 72 68 50 
16bce     32 08 E0 C0 
16bd2     AC A1 A1 A9 
16bd6     B9 C7 D3 D9 | 	byte	$6e, $72, $68, $50, $32, $08, $e0, $c0, $ac, $a1, $a1, $a9, $b9, $c7, $d3, $d9
16bda     DC DF E5 EB 
16bde     F9 0F 2F 55 
16be2     6D 76 78 7B 
16be6     76 5A 2C F8 | 	byte	$dc, $df, $e5, $eb, $f9, $0f, $2f, $55, $6d, $76, $78, $7b, $76, $5a, $2c, $f8
16bea     D4 B0 8C 80 
16bee     80 83 9F BF 
16bf2     E3 0E 29 3B 
16bf6     47 4B 44 39 | 	byte	$d4, $b0, $8c, $80, $80, $83, $9f, $bf, $e3, $0e, $29, $3b, $47, $4b, $44, $39
16bfa     2C 21 12 04 
16bfe     F8 F3 EF E8 
16c02     E3 E1 E1 DF 
16c06     DC D9 D8 D9 | 	byte	$2c, $21, $12, $04, $f8, $f3, $ef, $e8, $e3, $e1, $e1, $df, $dc, $d9, $d8, $d9
16c0a     D9 D8 DA E5 
16c0e     ED F3 03 1F 
16c12     47 5D 61 61 
16c16     68 61 48 18 | 	byte	$d9, $d8, $da, $e5, $ed, $f3, $03, $1f, $47, $5d, $61, $61, $68, $61, $48, $18
16c1a     F8 DC C6 B1 
16c1e     A3 A6 B7 C9 
16c22     D8 E7 F7 FA 
16c26     F2 F7 07 14 | 	byte	$f8, $dc, $c6, $b1, $a3, $a6, $b7, $c9, $d8, $e7, $f7, $fa, $f2, $f7, $07, $14
16c2a     1B 2F 4F 67 
16c2e     66 59 4C 3A 
16c32     19 F0 CC B8 
16c36     AB A3 A2 A9 | 	byte	$1b, $2f, $4f, $67, $66, $59, $4c, $3a, $19, $f0, $cc, $b8, $ab, $a3, $a2, $a9
16c3a     B6 C3 CD D6 
16c3e     DF ED FB 09 
16c42     1B 3B 5A 67 
16c46     6C 78 7F 7C | 	byte	$b6, $c3, $cd, $d6, $df, $ed, $fb, $09, $1b, $3b, $5a, $67, $6c, $78, $7f, $7c
16c4a     51 22 FC D5 
16c4e     A8 80 80 80 
16c52     85 9F BF EF 
16c56     17 2D 3D 47 | 	byte	$51, $22, $fc, $d5, $a8, $80, $80, $80, $85, $9f, $bf, $ef, $17, $2d, $3d, $47
16c5a     46 39 28 20 
16c5e     1B 14 08 05 
16c62     08 06 FD F2 
16c66     E9 E0 D4 C8 | 	byte	$46, $39, $28, $20, $1b, $14, $08, $05, $08, $06, $fd, $f2, $e9, $e0, $d4, $c8
16c6a     C1 C0 C3 CB 
16c6e     D5 DF F1 FF 
16c72     0B 15 2D 4F 
16c76     5F 5E 5F 65 | 	byte	$c1, $c0, $c3, $cb, $d5, $df, $f1, $ff, $0b, $15, $2d, $4f, $5f, $5e, $5f, $65
16c7a     60 40 18 F1 
16c7e     D8 BC A6 9B 
16c82     A3 B5 C9 D9 
16c86     EF FF FF F8 | 	byte	$60, $40, $18, $f1, $d8, $bc, $a6, $9b, $a3, $b5, $c9, $d9, $ef, $ff, $ff, $f8
16c8a     FF 17 19 14 
16c8e     21 49 61 5F 
16c92     50 4A 42 24 
16c96     FA D8 BE B0 | 	byte	$ff, $17, $19, $14, $21, $49, $61, $5f, $50, $4a, $42, $24, $fa, $d8, $be, $b0
16c9a     A1 9A 9F AB 
16c9e     BB CA DA E9 
16ca2     FB 09 15 27 
16ca6     43 51 58 67 | 	byte	$a1, $9a, $9f, $ab, $bb, $ca, $da, $e9, $fb, $09, $15, $27, $43, $51, $58, $67
16caa     7F 7F 68 44 
16cae     20 FC C5 98 
16cb2     80 80 80 8A 
16cb6     A5 CF F7 1B | 	byte	$7f, $7f, $68, $44, $20, $fc, $c5, $98, $80, $80, $80, $8a, $a5, $cf, $f7, $1b
16cba     2B 37 3F 3C 
16cbe     2B 1C 18 1B 
16cc2     1A 16 15 19 
16cc6     19 0C F8 E8 | 	byte	$2b, $37, $3f, $3c, $2b, $1c, $18, $1b, $1a, $16, $15, $19, $19, $0c, $f8, $e8
16cca     D5 C3 B5 AD 
16cce     AE B8 C6 D9 
16cd2     E9 FF 13 1B 
16cd6     27 3B 53 5B | 	byte	$d5, $c3, $b5, $ad, $ae, $b8, $c6, $d9, $e9, $ff, $13, $1b, $27, $3b, $53, $5b
16cda     5C 5F 5F 50 
16cde     30 0C E9 C9 
16ce2     B0 A0 9D A8 
16ce6     BC CD DF F9 | 	byte	$5c, $5f, $5f, $50, $30, $0c, $e9, $c9, $b0, $a0, $9d, $a8, $bc, $cd, $df, $f9
16cea     03 00 FD 0B 
16cee     1D 1A 10 1F 
16cf2     43 5D 59 4B 
16cf6     48 42 2A 00 | 	byte	$03, $00, $fd, $0b, $1d, $1a, $10, $1f, $43, $5d, $59, $4b, $48, $42, $2a, $00
16cfa     D2 BC AC 9D 
16cfe     94 98 A6 BB 
16d02     CF E3 F9 0A 
16d06     16 23 35 3F | 	byte	$d2, $bc, $ac, $9d, $94, $98, $a6, $bb, $cf, $e3, $f9, $0a, $16, $23, $35, $3f
16d0a     47 5B 73 7C 
16d0e     70 54 3A 18 
16d12     E2 B0 8C 80 
16d16     80 81 95 BB | 	byte	$47, $5b, $73, $7c, $70, $54, $3a, $18, $e2, $b0, $8c, $80, $80, $81, $95, $bb
16d1a     DF 05 19 25 
16d1e     2F 35 30 20 
16d22     15 18 23 25 
16d26     24 25 27 21 | 	byte	$df, $05, $19, $25, $2f, $35, $30, $20, $15, $18, $23, $25, $24, $25, $27, $21
16d2a     0C F2 D9 C4 
16d2e     B2 A5 A1 A7 
16d32     B9 CD E4 FC 
16d36     13 21 28 33 | 	byte	$0c, $f2, $d9, $c4, $b2, $a5, $a1, $a7, $b9, $cd, $e4, $fc, $13, $21, $28, $33
16d3a     45 55 5B 5C 
16d3e     5B 52 3D 1D 
16d42     FA D9 BC A8 
16d46     9E A2 B3 C7 | 	byte	$45, $55, $5b, $5c, $5b, $52, $3d, $1d, $fa, $d9, $bc, $a8, $9e, $a2, $b3, $c7
16d4a     DA F1 FF 03 
16d4e     FE FF 13 1D 
16d52     18 13 29 4D 
16d56     5E 56 4B 46 | 	byte	$da, $f1, $ff, $03, $fe, $ff, $13, $1d, $18, $13, $29, $4d, $5e, $56, $4b, $46
16d5a     3C 1C EC C9 
16d5e     B1 A4 96 92 
16d62     9D AF C7 DD 
16d66     F2 07 13 1F | 	byte	$3c, $1c, $ec, $c9, $b1, $a4, $96, $92, $9d, $af, $c7, $dd, $f2, $07, $13, $1f
16d6a     2D 36 3D 4F 
16d6e     69 76 6E 5C 
16d72     44 28 FC C4 
16d76     99 84 80 80 | 	byte	$2d, $36, $3d, $4f, $69, $76, $6e, $5c, $44, $28, $fc, $c4, $99, $84, $80, $80
16d7a     8F AD CF F7 
16d7e     0E 1C 24 2A 
16d82     2C 24 18 17 
16d86     23 2F 31 2F | 	byte	$8f, $ad, $cf, $f7, $0e, $1c, $24, $2a, $2c, $24, $18, $17, $23, $2f, $31, $2f
16d8a     2D 28 19 FC 
16d8e     E0 C2 B0 A1 
16d92     9B 9F AF C3 
16d96     DF F5 0F 21 | 	byte	$2d, $28, $19, $fc, $e0, $c2, $b0, $a1, $9b, $9f, $af, $c3, $df, $f5, $0f, $21
16d9a     2A 31 3F 4F 
16d9e     58 5B 59 52 
16da2     44 24 02 E0 
16da6     C3 AC 9F 9F | 	byte	$2a, $31, $3f, $4f, $58, $5b, $59, $52, $44, $24, $02, $e0, $c3, $ac, $9f, $9f
16daa     AD BF D6 EA 
16dae     FD 06 01 FD 
16db2     09 19 1D 17 
16db6     1F 3F 5F 61 | 	byte	$ad, $bf, $d6, $ea, $fd, $06, $01, $fd, $09, $19, $1d, $17, $1f, $3f, $5f, $61
16dba     53 48 40 28 
16dbe     00 D4 B3 A4 
16dc2     98 93 99 AB 
16dc6     C3 DC F3 04 | 	byte	$53, $48, $40, $28, $00, $d4, $b3, $a4, $98, $93, $99, $ab, $c3, $dc, $f3, $04
16dca     0F 1A 25 2D 
16dce     33 47 63 75 
16dd2     72 64 50 34 
16dd6     04 D2 A2 89 | 	byte	$0f, $1a, $25, $2d, $33, $47, $63, $75, $72, $64, $50, $34, $04, $d2, $a2, $89
16dda     80 80 8B A3 
16dde     C7 EB 09 17 
16de2     1E 23 29 28 
16de6     1E 19 25 35 | 	byte	$80, $80, $8b, $a3, $c7, $eb, $09, $17, $1e, $23, $29, $28, $1e, $19, $25, $35
16dea     3A 36 31 2D 
16dee     1C 02 E0 C2 
16df2     AC 9F 98 9C 
16df6     AD C5 DF F5 | 	byte	$3a, $36, $31, $2d, $1c, $02, $e0, $c2, $ac, $9f, $98, $9c, $ad, $c5, $df, $f5
16dfa     0F 1F 28 2F 
16dfe     3D 4C 56 5A 
16e02     5A 54 44 2C 
16e06     08 E2 C4 AC | 	byte	$0f, $1f, $28, $2f, $3d, $4c, $56, $5a, $5a, $54, $44, $2c, $08, $e2, $c4, $ac
16e0a     9F 9E A9 BF 
16e0e     D3 E7 FB 08 
16e12     06 FD FF 0F 
16e16     1E 1A 1F 3B | 	byte	$9f, $9e, $a9, $bf, $d3, $e7, $fb, $08, $06, $fd, $ff, $0f, $1e, $1a, $1f, $3b
16e1a     63 6D 5D 4D 
16e1e     41 2C 00 CD 
16e22     B0 9D 95 93 
16e26     9D AF CB E1 | 	byte	$63, $6d, $5d, $4d, $41, $2c, $00, $cd, $b0, $9d, $95, $93, $9d, $af, $cb, $e1
16e2a     F5 05 0C 12 
16e2e     1B 22 2B 3F 
16e32     5E 75 78 6D 
16e36     5A 40 10 D8 | 	byte	$f5, $05, $0c, $12, $1b, $22, $2b, $3f, $5e, $75, $78, $6d, $5a, $40, $10, $d8
16e3a     A8 88 80 80 
16e3e     81 9E BF E3 
16e42     05 19 21 23 
16e46     29 2A 24 1E | 	byte	$a8, $88, $80, $80, $81, $9e, $bf, $e3, $05, $19, $21, $23, $29, $2a, $24, $1e
16e4a     27 39 40 3C 
16e4e     35 2C 1D FC 
16e52     D8 BC A8 9B 
16e56     96 9D AF C9 | 	byte	$27, $39, $40, $3c, $35, $2c, $1d, $fc, $d8, $bc, $a8, $9b, $96, $9d, $af, $c9
16e5a     DF F9 0F 1F 
16e5e     23 2B 3B 49 
16e62     54 59 5B 58 
16e66     48 2C 08 E5 | 	byte	$df, $f9, $0f, $1f, $23, $2b, $3b, $49, $54, $59, $5b, $58, $48, $2c, $08, $e5
16e6a     C2 AB 9C 9A 
16e6e     A6 B9 D3 E7 
16e72     FA 09 0C 00 
16e76     F9 07 19 1E | 	byte	$c2, $ab, $9c, $9a, $a6, $b9, $d3, $e7, $fa, $09, $0c, $00, $f9, $07, $19, $1e
16e7a     25 45 69 78 
16e7e     69 54 41 20 
16e82     F2 C4 A1 94 
16e86     8F 93 A5 BB | 	byte	$25, $45, $69, $78, $69, $54, $41, $20, $f2, $c4, $a1, $94, $8f, $93, $a5, $bb
16e8a     D7 ED FC 07 
16e8e     07 07 0F 17 
16e92     22 3B 5B 79 
16e96     7F 79 64 48 | 	byte	$d7, $ed, $fc, $07, $07, $07, $0f, $17, $22, $3b, $5b, $79, $7f, $79, $64, $48
16e9a     14 DC A1 80 
16e9e     80 80 80 97 
16ea2     BB E5 06 1F 
16ea6     29 2A 2C 2C | 	byte	$14, $dc, $a1, $80, $80, $80, $80, $97, $bb, $e5, $06, $1f, $29, $2a, $2c, $2c
16eaa     28 25 2E 3C 
16eae     42 3F 35 29 
16eb2     14 F4 D2 B4 
16eb6     A1 97 97 A3 | 	byte	$28, $25, $2e, $3c, $42, $3f, $35, $29, $14, $f4, $d2, $b4, $a1, $97, $97, $a3
16eba     B7 CF E7 FD 
16ebe     13 1B 1D 27 
16ec2     3C 4B 51 58 
16ec6     5F 5C 48 24 | 	byte	$b7, $cf, $e7, $fd, $13, $1b, $1d, $27, $3c, $4b, $51, $58, $5f, $5c, $48, $24
16eca     04 E4 C0 A8 
16ece     97 98 A4 BA 
16ed2     D1 EA FB 09 
16ed6     0F 06 FC FF | 	byte	$04, $e4, $c0, $a8, $97, $98, $a4, $ba, $d1, $ea, $fb, $09, $0f, $06, $fc, $ff
16eda     0D 21 37 53 
16ede     6F 7B 74 60 
16ee2     3A 10 DC B4 
16ee6     94 88 88 97 | 	byte	$0d, $21, $37, $53, $6f, $7b, $74, $60, $3a, $10, $dc, $b4, $94, $88, $88, $97
16eea     B3 CD E7 F7 
16eee     03 08 01 FD 
16ef2     04 0F 1C 37 
16ef6     5F 7F 7F 7F | 	byte	$b3, $cd, $e7, $f7, $03, $08, $01, $fd, $04, $0f, $1c, $37, $5f, $7f, $7f, $7f
16efa     6C 4A 18 D4 
16efe     A0 80 80 80 
16f02     80 95 BF E7 
16f06     0F 29 33 33 | 	byte	$6c, $4a, $18, $d4, $a0, $80, $80, $80, $80, $95, $bf, $e7, $0f, $29, $33, $33
16f0a     2E 2B 2C 2F 
16f0e     33 39 3F 40 
16f12     34 20 04 E8 
16f16     C9 B0 9C 96 | 	byte	$2e, $2b, $2c, $2f, $33, $39, $3f, $40, $34, $20, $04, $e8, $c9, $b0, $9c, $96
16f1a     9C AD C3 D9 
16f1e     EE FF 13 15 
16f22     18 2A 3F 4A 
16f26     4F 59 63 5C | 	byte	$9c, $ad, $c3, $d9, $ee, $ff, $13, $15, $18, $2a, $3f, $4a, $4f, $59, $63, $5c
16f2a     40 20 01 E0 
16f2e     C0 A2 95 99 
16f32     A7 BB D4 EE 
16f36     FF 08 0D 0D | 	byte	$40, $20, $01, $e0, $c0, $a2, $95, $99, $a7, $bb, $d4, $ee, $ff, $08, $0d, $0d
16f3a     00 F5 FF 2B 
16f3e     4F 61 6C 7A 
16f42     7E 5C 2C F5 
16f46     C8 A8 8C 80 | 	byte	$00, $f5, $ff, $2b, $4f, $61, $6c, $7a, $7e, $5c, $2c, $f5, $c8, $a8, $8c, $80
16f4a     89 A3 BF DB 
16f4e     F2 FF 07 05 
16f52     FA F6 FF 0D 
16f56     1B 37 63 7F | 	byte	$89, $a3, $bf, $db, $f2, $ff, $07, $05, $fa, $f6, $ff, $0d, $1b, $37, $63, $7f
16f5a     7F 7F 68 48 
16f5e     0C D0 90 80 
16f62     80 80 80 97 
16f66     C5 F5 15 2F | 	byte	$7f, $7f, $68, $48, $0c, $d0, $90, $80, $80, $80, $80, $97, $c5, $f5, $15, $2f
16f6a     3D 39 2D 2B 
16f6e     32 35 33 33 
16f72     3A 3C 2E 12 
16f76     F9 E0 C5 AC | 	byte	$3d, $39, $2d, $2b, $32, $35, $33, $33, $3a, $3c, $2e, $12, $f9, $e0, $c5, $ac
16f7a     9E 9C A5 B7 
16f7e     CB DF F1 05 
16f82     0F 0F 19 2F 
16f86     45 4A 4F 5C | 	byte	$9e, $9c, $a5, $b7, $cb, $df, $f1, $05, $0f, $0f, $19, $2f, $45, $4a, $4f, $5c
16f8a     66 55 36 18 
16f8e     FA D8 B8 A0 
16f92     98 9F AE BF 
16f96     D9 EF FF 04 | 	byte	$66, $55, $36, $18, $fa, $d8, $b8, $a0, $98, $9f, $ae, $bf, $d9, $ef, $ff, $04
16f9a     0B 0C FE F7 
16f9e     0F 3D 5D 68 
16fa2     6F 7B 75 4C 
16fa6     18 E0 B8 9D | 	byte	$0b, $0c, $fe, $f7, $0f, $3d, $5d, $68, $6f, $7b, $75, $4c, $18, $e0, $b8, $9d
16faa     88 83 94 AF 
16fae     CD E7 F9 03 
16fb2     06 01 F8 F8 
16fb6     09 15 1F 3F | 	byte	$88, $83, $94, $af, $cd, $e7, $f9, $03, $06, $01, $f8, $f8, $09, $15, $1f, $3f
16fba     67 7F 7F 72 
16fbe     5B 38 04 C0 
16fc2     8C 80 80 80 
16fc6     81 A3 D3 FB | 	byte	$67, $7f, $7f, $72, $5b, $38, $04, $c0, $8c, $80, $80, $80, $81, $a3, $d3, $fb
16fca     1B 33 3B 38 
16fce     30 2F 31 31 
16fd2     2F 2F 31 2D 
16fd6     1D 09 F0 DC | 	byte	$1b, $33, $3b, $38, $30, $2f, $31, $31, $2f, $2f, $31, $2d, $1d, $09, $f0, $dc
16fda     C6 B3 AA A9 
16fde     B2 C1 CF DF 
16fe2     F3 FF 05 0B 
16fe6     23 3D 49 49 | 	byte	$c6, $b3, $aa, $a9, $b2, $c1, $cf, $df, $f3, $ff, $05, $0b, $23, $3d, $49, $49
16fea     52 5F 5E 44 
16fee     25 09 F0 D4 
16ff2     B5 A5 A5 AD 
16ff6     B9 C8 DB EA | 	byte	$52, $5f, $5e, $44, $25, $09, $f0, $d4, $b5, $a5, $a5, $ad, $b9, $c8, $db, $ea
16ffa     F9 02 01 FF 
16ffe     07 17 2A 43 
17002     5D 72 74 68 
17006     50 30 04 D2 | 	byte	$f9, $02, $01, $ff, $07, $17, $2a, $43, $5d, $72, $74, $68, $50, $30, $04, $d2
1700a     B0 98 91 95 
1700e     A3 BD D5 EA 
17012     F7 01 03 FF 
17016     FE 07 17 23 | 	byte	$b0, $98, $91, $95, $a3, $bd, $d5, $ea, $f7, $01, $03, $ff, $fe, $07, $17, $23
1701a     2B 3F 63 78 
1701e     70 54 40 20 
17022     F0 B8 91 80 
17026     80 83 99 B7 | 	byte	$2b, $3f, $63, $78, $70, $54, $40, $20, $f0, $b8, $91, $80, $80, $83, $99, $b7
1702a     DF FF 1E 2A 
1702e     33 39 38 2E 
17032     27 28 2B 28 
17036     20 19 12 05 | 	byte	$df, $ff, $1e, $2a, $33, $39, $38, $2e, $27, $28, $2b, $28, $20, $19, $12, $05
1703a     F1 DE CE C2 
1703e     BB B9 BD C5 
17042     CF DE ED F6 
17046     FF 13 2F 47 | 	byte	$f1, $de, $ce, $c2, $bb, $b9, $bd, $c5, $cf, $de, $ed, $f6, $ff, $13, $2f, $47
1704a     4C 4B 54 5A 
1704e     4C 2E 10 FC 
17052     E8 D0 BC B3 
17056     B5 BE C6 CF | 	byte	$4c, $4b, $54, $5a, $4c, $2e, $10, $fc, $e8, $d0, $bc, $b3, $b5, $be, $c6, $cf
1705a     D8 E5 F2 F4 
1705e     F5 05 27 35 
17062     35 3F 5F 71 
17066     61 44 2E 1A | 	byte	$d8, $e5, $f2, $f4, $f5, $05, $27, $35, $35, $3f, $5f, $71, $61, $44, $2e, $1a
1706a     FC D4 B2 A4 
1706e     A4 A7 AF BD 
17072     D1 E3 F4 FF 
17076     03 0A 13 21 | 	byte	$fc, $d4, $b2, $a4, $a4, $a7, $af, $bd, $d1, $e3, $f4, $ff, $03, $0a, $13, $21
1707a     2F 31 30 3D 
1707e     51 58 48 30 
17082     20 10 EA C4 
17086     A4 9B 9B A1 | 	byte	$2f, $31, $30, $3d, $51, $58, $48, $30, $20, $10, $ea, $c4, $a4, $9b, $9b, $a1
1708a     AE C5 E7 FF 
1708e     13 22 2F 38 
17092     34 26 1F 1E 
17096     1E 17 10 0D | 	byte	$ae, $c5, $e7, $ff, $13, $22, $2f, $38, $34, $26, $1f, $1e, $1e, $17, $10, $0d
1709a     0D 08 F9 EC 
1709e     DD D4 CA C3 
170a2     C1 C3 CB DB 
170a6     E6 F0 FF 1F | 	byte	$0d, $08, $f9, $ec, $dd, $d4, $ca, $c3, $c1, $c3, $cb, $db, $e6, $f0, $ff, $1f
170aa     3F 4B 4C 4D 
170ae     50 4C 39 1A 
170b2     04 F5 E6 D5 
170b6     C8 C4 C7 CD | 	byte	$3f, $4b, $4c, $4d, $50, $4c, $39, $1a, $04, $f5, $e6, $d5, $c8, $c4, $c7, $cd
170ba     CE CF D7 DE 
170be     E0 E8 FF 19 
170c2     2F 3B 3F 45 
170c6     51 55 48 31 | 	byte	$ce, $cf, $d7, $de, $e0, $e8, $ff, $19, $2f, $3b, $3f, $45, $51, $55, $48, $31
170ca     1D 0D FA E0 
170ce     C4 B5 B1 B1 
170d2     B1 B9 C6 D9 
170d6     EF FE 0C 1B | 	byte	$1d, $0d, $fa, $e0, $c4, $b5, $b1, $b1, $b1, $b9, $c6, $d9, $ef, $fe, $0c, $1b
170da     2B 37 3D 36 
170de     2D 2D 35 35 
170e2     28 17 0D 04 
170e6     F0 D5 C0 B8 | 	byte	$2b, $37, $3d, $36, $2d, $2d, $35, $35, $28, $17, $0d, $04, $f0, $d5, $c0, $b8
170ea     B8 B8 BE CD 
170ee     E3 F5 0A 1D 
170f2     27 2B 29 22 
170f6     19 11 0F 0F | 	byte	$b8, $b8, $be, $cd, $e3, $f5, $0a, $1d, $27, $2b, $29, $22, $19, $11, $0f, $0f
170fa     0D 0C 0D 0E 
170fe     08 FB ED DE 
17102     D2 C8 BF BD 
17106     C3 D3 DF ED | 	byte	$0d, $0c, $0d, $0e, $08, $fb, $ed, $de, $d2, $c8, $bf, $bd, $c3, $d3, $df, $ed
1710a     05 27 43 4E 
1710e     4D 4C 4A 41 
17112     2B 12 FD F2 
17116     E8 DB D2 D1 | 	byte	$05, $27, $43, $4e, $4d, $4c, $4a, $41, $2b, $12, $fd, $f2, $e8, $db, $d2, $d1
1711a     D4 D4 D1 D1 
1711e     D3 D2 D6 ED 
17122     0B 1F 2B 3C 
17126     4A 47 3D 3C | 	byte	$d4, $d4, $d1, $d1, $d3, $d2, $d6, $ed, $0b, $1f, $2b, $3c, $4a, $47, $3d, $3c
1712a     3C 30 18 08 
1712e     FF F0 D8 C2 
17132     B6 B3 B0 B2 
17136     BD CF E9 FF | 	byte	$3c, $30, $18, $08, $ff, $f0, $d8, $c2, $b6, $b3, $b0, $b2, $bd, $cf, $e9, $ff
1713a     17 2B 3C 45 
1713e     47 3B 26 1D 
17142     1F 1D 10 03 
17146     01 01 F8 E4 | 	byte	$17, $2b, $3c, $45, $47, $3b, $26, $1d, $1f, $1d, $10, $03, $01, $01, $f8, $e4
1714a     D4 CD CA C8 
1714e     C9 D1 DD ED 
17152     FF 13 1D 1F 
17156     21 1F 14 08 | 	byte	$d4, $cd, $ca, $c8, $c9, $d1, $dd, $ed, $ff, $13, $1d, $1f, $21, $1f, $14, $08
1715a     05 0B 0F 0F 
1715e     10 14 14 09 
17162     F8 E5 D6 C9 
17166     BE B9 BF CF | 	byte	$05, $0b, $0f, $0f, $10, $14, $14, $09, $f8, $e5, $d6, $c9, $be, $b9, $bf, $cf
1716a     DD EC 05 29 
1716e     44 50 4E 4A 
17172     45 3C 2A 10 
17176     FA F1 E9 E1 | 	byte	$dd, $ec, $05, $29, $44, $50, $4e, $4a, $45, $3c, $2a, $10, $fa, $f1, $e9, $e1
1717a     D9 D8 DA D8 
1717e     D6 D4 D1 CC 
17182     D5 EF 09 1A 
17186     25 39 49 44 | 	byte	$d9, $d8, $da, $d8, $d6, $d4, $d1, $cc, $d5, $ef, $09, $1a, $25, $39, $49, $44
1718a     30 2C 33 31 
1718e     20 0A 04 FD 
17192     EA CD BA B1 
17196     AE AE B5 C9 | 	byte	$30, $2c, $33, $31, $20, $0a, $04, $fd, $ea, $cd, $ba, $b1, $ae, $ae, $b5, $c9
1719a     E5 FF 1B 2F 
1719e     42 4D 4E 40 
171a2     26 16 15 12 
171a6     06 FA FB FF | 	byte	$e5, $ff, $1b, $2f, $42, $4d, $4e, $40, $26, $16, $15, $12, $06, $fa, $fb, $ff
171aa     FC ED E0 D9 
171ae     D7 D2 D1 D4 
171b2     DB E9 FD 0B 
171b6     13 14 17 19 | 	byte	$fc, $ed, $e0, $d9, $d7, $d2, $d1, $d4, $db, $e9, $fd, $0b, $13, $14, $17, $19
171ba     13 05 02 0B 
171be     13 17 16 1A 
171c2     1C 12 FC E8 
171c6     D6 C7 BD B5 | 	byte	$13, $05, $02, $0b, $13, $17, $16, $1a, $1c, $12, $fc, $e8, $d6, $c7, $bd, $b5
171ca     B8 C9 DB EC 
171ce     FF 1F 3D 51 
171d2     51 47 44 40 
171d6     2E 14 FC F1 | 	byte	$b8, $c9, $db, $ec, $ff, $1f, $3d, $51, $51, $47, $44, $40, $2e, $14, $fc, $f1
171da     EB E3 D9 D7 
171de     D9 DA D8 D7 
171e2     D3 CE D5 ED 
171e6     03 12 1D 2D | 	byte	$eb, $e3, $d9, $d7, $d9, $da, $d8, $d7, $d3, $ce, $d5, $ed, $03, $12, $1d, $2d
171ea     43 45 31 27 
171ee     2F 36 28 14 
171f2     0A 06 F9 DA 
171f6     C0 B0 AA A9 | 	byte	$43, $45, $31, $27, $2f, $36, $28, $14, $0a, $06, $f9, $da, $c0, $b0, $aa, $a9
171fa     AD BD D9 F7 
171fe     17 2F 3F 4E 
17202     53 48 2D 1A 
17206     18 16 08 F8 | 	byte	$ad, $bd, $d9, $f7, $17, $2f, $3f, $4e, $53, $48, $2d, $1a, $18, $16, $08, $f8
1720a     F7 FE FB EC 
1720e     E0 DC DA D7 
17212     D4 D7 DD E7 
17216     F7 04 0C 0E | 	byte	$f7, $fe, $fb, $ec, $e0, $dc, $da, $d7, $d4, $d7, $dd, $e7, $f7, $04, $0c, $0e
1721a     10 14 12 09 
1721e     04 0B 18 1E 
17222     1E 1E 1F 16 
17226     04 E9 D5 C4 | 	byte	$10, $14, $12, $09, $04, $0b, $18, $1e, $1e, $1e, $1f, $16, $04, $e9, $d5, $c4
1722a     B9 B3 B4 BF 
1722e     D7 EF FF 17 
17232     33 4D 54 4A 
17236     44 44 3B 20 | 	byte	$b9, $b3, $b4, $bf, $d7, $ef, $ff, $17, $33, $4d, $54, $4a, $44, $44, $3b, $20
1723a     04 F4 ED E2 
1723e     D7 D1 D4 D9 
17242     D9 DA DB D7 
17246     D7 E5 FB 0D | 	byte	$04, $f4, $ed, $e2, $d7, $d1, $d4, $d9, $d9, $da, $db, $d7, $d7, $e5, $fb, $0d
1724a     15 1F 31 40 
1724e     38 28 28 35 
17252     38 28 14 0D 
17256     04 EC CC B4 | 	byte	$15, $1f, $31, $40, $38, $28, $28, $35, $38, $28, $14, $0d, $04, $ec, $cc, $b4
1725a     A8 A4 A6 B1 
1725e     C9 E7 0B 26 
17262     37 47 52 4E 
17266     38 24 23 21 | 	byte	$a8, $a4, $a6, $b1, $c9, $e7, $0b, $26, $37, $47, $52, $4e, $38, $24, $23, $21
1726a     14 01 FB FD 
1726e     F8 EA DB D6 
17272     D5 D3 D3 D8 
17276     DF E6 F1 FD | 	byte	$14, $01, $fb, $fd, $f8, $ea, $db, $d6, $d5, $d3, $d3, $d8, $df, $e6, $f1, $fd
1727a     08 0B 0A 0D 
1727e     11 0F 0B 0D 
17282     1B 27 28 25 
17286     21 19 09 EE | 	byte	$08, $0b, $0a, $0d, $11, $0f, $0b, $0d, $1b, $27, $28, $25, $21, $19, $09, $ee
1728a     D2 C0 B4 AE 
1728e     B0 BB CE E7 
17292     FF 11 23 3F 
17296     51 50 47 44 | 	byte	$d2, $c0, $b4, $ae, $b0, $bb, $ce, $e7, $ff, $11, $23, $3f, $51, $50, $47, $44
1729a     43 34 16 00 
1729e     F0 E4 D5 CB 
172a2     C9 CF D4 D7 
172a6     DF E2 E0 E1 | 	byte	$43, $34, $16, $00, $f0, $e4, $d5, $cb, $c9, $cf, $d4, $d7, $df, $e2, $e0, $e1
172aa     F1 05 11 14 
172ae     1F 31 3A 30 
172b2     27 31 3F 3A 
172b6     24 17 0E FC | 	byte	$f1, $05, $11, $14, $1f, $31, $3a, $30, $27, $31, $3f, $3a, $24, $17, $0e, $fc
172ba     E0 BC A9 A1 
172be     A0 A6 B9 D3 
172c2     F7 15 2B 3A 
172c6     47 4C 41 32 | 	byte	$e0, $bc, $a9, $a1, $a0, $a6, $b9, $d3, $f7, $15, $2b, $3a, $47, $4c, $41, $32
172ca     31 32 29 16 
172ce     0A 04 FB E6 
172d2     D5 CC CA C9 
172d6     CA D2 DD E8 | 	byte	$31, $32, $29, $16, $0a, $04, $fb, $e6, $d5, $cc, $ca, $c9, $ca, $d2, $dd, $e8
172da     EE F7 02 09 
172de     09 09 0D 13 
172e2     14 15 1F 2C 
172e6     32 2E 25 1C | 	byte	$ee, $f7, $02, $09, $09, $09, $0d, $13, $14, $15, $1f, $2c, $32, $2e, $25, $1c
172ea     0A F2 D4 BD 
172ee     AE A9 A9 B5 
172f2     C6 DF FB 13 
172f6     1F 2F 3F 4D | 	byte	$0a, $f2, $d4, $bd, $ae, $a9, $a9, $b5, $c6, $df, $fb, $13, $1f, $2f, $3f, $4d
172fa     4D 49 44 3F 
172fe     2C 15 00 E9 
17302     D8 C9 C1 C1 
17306     C8 D1 D9 E7 | 	byte	$4d, $49, $44, $3f, $2c, $15, $00, $e9, $d8, $c9, $c1, $c1, $c8, $d1, $d9, $e7
1730a     EE EC ED F9 
1730e     09 12 11 19 
17312     2C 32 2C 2D 
17316     3D 45 3C 29 | 	byte	$ee, $ec, $ed, $f9, $09, $12, $11, $19, $2c, $32, $2c, $2d, $3d, $45, $3c, $29
1731a     1A 0C F2 D0 
1731e     B4 A4 9E 9E 
17322     A9 BF DD FD 
17326     17 29 3A 3F | 	byte	$1a, $0c, $f2, $d0, $b4, $a4, $9e, $9e, $a9, $bf, $dd, $fd, $17, $29, $3a, $3f
1732a     3C 3A 3F 42 
1732e     3B 2E 23 1B 
17332     08 F0 D4 C8 
17336     C0 BC BC C3 | 	byte	$3c, $3a, $3f, $42, $3b, $2e, $23, $1b, $08, $f0, $d4, $c8, $c0, $bc, $bc, $c3
1733a     D1 E3 ED F3 
1733e     F9 03 09 09 
17342     09 10 19 1F 
17346     26 31 3B 3B | 	byte	$d1, $e3, $ed, $f3, $f9, $03, $09, $09, $09, $10, $19, $1f, $26, $31, $3b, $3b
1734a     31 22 10 F4 
1734e     D5 BE A9 A1 
17352     A1 AB BF D7 
17356     F3 0D 23 2F | 	byte	$31, $22, $10, $f4, $d5, $be, $a9, $a1, $a1, $ab, $bf, $d7, $f3, $0d, $23, $2f
1735a     32 38 45 4F 
1735e     4C 40 36 2D 
17362     1A 00 E0 CD 
17366     C2 BB BB C1 | 	byte	$32, $38, $45, $4f, $4c, $40, $36, $2d, $1a, $00, $e0, $cd, $c2, $bb, $bb, $c1
1736a     D1 DF EF F8 
1736e     F8 F5 FD 0D 
17372     11 0F 16 25 
17376     2B 2D 37 45 | 	byte	$d1, $df, $ef, $f8, $f8, $f5, $fd, $0d, $11, $0f, $16, $25, $2b, $2d, $37, $45
1737a     49 3D 2C 1D 
1737e     05 E8 C2 AC 
17382     A0 9C 9F AF 
17386     C6 E5 FD 15 | 	byte	$49, $3d, $2c, $1d, $05, $e8, $c2, $ac, $a0, $9c, $9f, $af, $c6, $e5, $fd, $15
1738a     2A 31 2D 32 
1738e     43 51 4C 40 
17392     3C 38 24 00 
17396     E0 CA BD B0 | 	byte	$2a, $31, $2d, $32, $43, $51, $4c, $40, $3c, $38, $24, $00, $e0, $ca, $bd, $b0
1739a     AB B1 C1 D1 
1739e     E3 EE F5 FA 
173a2     03 0B 0D 11 
173a6     1A 26 2F 39 | 	byte	$ab, $b1, $c1, $d1, $e3, $ee, $f5, $fa, $03, $0b, $0d, $11, $1a, $26, $2f, $39
173aa     42 44 3B 2B 
173ae     18 FC DA C0 
173b2     A8 9D 9B A3 
173b6     B5 CF EB 05 | 	byte	$42, $44, $3b, $2b, $18, $fc, $da, $c0, $a8, $9d, $9b, $a3, $b5, $cf, $eb, $05
173ba     1A 2F 38 31 
173be     31 3F 4D 48 
173c2     3A 31 2C 1A 
173c6     FC DA C8 BC | 	byte	$1a, $2f, $38, $31, $31, $3f, $4d, $48, $3a, $31, $2c, $1a, $fc, $da, $c8, $bc
173ca     B7 B5 BF D1 
173ce     E2 F4 FF 03 
173d2     FF FF 0A 0F 
173d6     10 13 1A 24 | 	byte	$b7, $b5, $bf, $d1, $e2, $f4, $ff, $03, $ff, $ff, $0a, $0f, $10, $13, $1a, $24
173da     33 42 4B 46 
173de     3C 2E 1C FC 
173e2     D8 BD AC A4 
173e6     A0 A6 B9 CF | 	byte	$33, $42, $4b, $46, $3c, $2e, $1c, $fc, $d8, $bd, $ac, $a4, $a0, $a6, $b9, $cf
173ea     E9 FA 0F 1D 
173ee     1D 1F 35 4B 
173f2     55 51 4F 4F 
173f6     44 22 00 E0 | 	byte	$e9, $fa, $0f, $1d, $1d, $1f, $35, $4b, $55, $51, $4f, $4f, $44, $22, $00, $e0
173fa     C6 B4 A5 A1 
173fe     AB BC CC DD 
17402     EB F4 F9 03 
17406     0D 16 1D 28 | 	byte	$c6, $b4, $a5, $a1, $ab, $bc, $cc, $dd, $eb, $f4, $f9, $03, $0d, $16, $1d, $28
1740a     33 41 4C 4E 
1740e     46 38 20 08 
17412     E4 C4 A8 9A 
17416     95 9B A9 BF | 	byte	$33, $41, $4c, $4e, $46, $38, $20, $08, $e4, $c4, $a8, $9a, $95, $9b, $a9, $bf
1741a     DF FD 13 25 
1741e     34 38 32 2F 
17422     38 41 41 37 
17426     2F 28 18 00 | 	byte	$df, $fd, $13, $25, $34, $38, $32, $2f, $38, $41, $41, $37, $2f, $28, $18, $00
1742a     E0 C8 BB B5 
1742e     B5 BE D1 E3 
17432     F6 05 0B 07 
17436     03 07 0F 13 | 	byte	$e0, $c8, $bb, $b5, $b5, $be, $d1, $e3, $f6, $05, $0b, $07, $03, $07, $0f, $13
1743a     12 11 1F 37 
1743e     49 49 40 39 
17442     30 1A F8 D4 
17446     BE B2 A9 A7 | 	byte	$12, $11, $1f, $37, $49, $49, $40, $39, $30, $1a, $f8, $d4, $be, $b2, $a9, $a7
1744a     AF BF D3 E5 
1744e     F7 02 08 0F 
17452     24 3B 4A 51 
17456     5A 60 58 40 | 	byte	$af, $bf, $d3, $e5, $f7, $02, $08, $0f, $24, $3b, $4a, $51, $5a, $60, $58, $40
1745a     20 00 E2 C5 
1745e     AE A0 9F A7 
17462     B5 C4 D5 E5 
17466     F1 FA 05 11 | 	byte	$20, $00, $e2, $c5, $ae, $a0, $9f, $a7, $b5, $c4, $d5, $e5, $f1, $fa, $05, $11
1746a     21 2E 37 41 
1746e     4E 57 51 40 
17472     29 0E F1 CD 
17476     B0 9E 95 97 | 	byte	$21, $2e, $37, $41, $4e, $57, $51, $40, $29, $0e, $f1, $cd, $b0, $9e, $95, $97
1747a     A3 B5 D1 ED 
1747e     09 1F 2D 31 
17482     35 39 34 2D 
17486     2D 35 37 29 | 	byte	$a3, $b5, $d1, $ed, $09, $1f, $2d, $31, $35, $39, $34, $2d, $2d, $35, $37, $29
1748a     1A 0D FE E8 
1748e     CD BE B9 BD 
17492     C6 D3 E2 F5 
17496     05 0E 0C 07 | 	byte	$1a, $0d, $fe, $e8, $cd, $be, $b9, $bd, $c6, $d3, $e2, $f5, $05, $0e, $0c, $07
1749a     0B 15 19 10 
1749e     0B 1B 35 43 
174a2     3B 33 32 2C 
174a6     16 F1 D8 C9 | 	byte	$0b, $15, $19, $10, $0b, $1b, $35, $43, $3b, $33, $32, $2c, $16, $f1, $d8, $c9
174aa     BF B7 B3 BA 
174ae     C5 D2 E3 EC 
174b2     EF F9 17 31 
174b6     3D 43 53 67 | 	byte	$bf, $b7, $b3, $ba, $c5, $d2, $e3, $ec, $ef, $f9, $17, $31, $3d, $43, $53, $67
174ba     68 50 34 1C 
174be     04 E2 C2 AD 
174c2     A4 A4 A8 AF 
174c6     BD CD DF ED | 	byte	$68, $50, $34, $1c, $04, $e2, $c2, $ad, $a4, $a4, $a8, $af, $bd, $cd, $df, $ed
174ca     FB 0A 1F 33 
174ce     3F 45 4D 57 
174d2     58 45 2D 13 
174d6     FA DA BD A8 | 	byte	$fb, $0a, $1f, $33, $3f, $45, $4d, $57, $58, $45, $2d, $13, $fa, $da, $bd, $a8
174da     9B 9C A4 B1 
174de     C5 DF FB 11 
174e2     22 2B 2E 35 
174e6     3B 34 26 21 | 	byte	$9b, $9c, $a4, $b1, $c5, $df, $fb, $11, $22, $2b, $2e, $35, $3b, $34, $26, $21
174ea     2B 2E 20 0E 
174ee     03 FD EC D8 
174f2     C8 C3 C8 CF 
174f6     D7 E4 F3 05 | 	byte	$2b, $2e, $20, $0e, $03, $fd, $ec, $d8, $c8, $c3, $c8, $cf, $d7, $e4, $f3, $05
174fa     0B 0B 0C 16 
174fe     1F 1D 10 0D 
17502     1F 31 31 28 
17506     24 28 20 0A | 	byte	$0b, $0b, $0c, $16, $1f, $1d, $10, $0d, $1f, $31, $31, $28, $24, $28, $20, $0a
1750a     F3 E1 D9 CD 
1750e     C5 C1 C1 C7 
17512     D2 D9 DC E5 
17516     FF 23 37 3F | 	byte	$f3, $e1, $d9, $cd, $c5, $c1, $c1, $c7, $d2, $d9, $dc, $e5, $ff, $23, $37, $3f
1751a     49 5B 65 58 
1751e     40 28 14 FC 
17522     E0 C4 B3 AC 
17526     AB AC B1 BB | 	byte	$49, $5b, $65, $58, $40, $28, $14, $fc, $e0, $c4, $b3, $ac, $ab, $ac, $b1, $bb
1752a     CC DC EB FF 
1752e     15 2F 41 4B 
17532     4F 55 56 48 
17536     30 14 FC E4 | 	byte	$cc, $dc, $eb, $ff, $15, $2f, $41, $4b, $4f, $55, $56, $48, $30, $14, $fc, $e4
1753a     C8 B2 A5 A4 
1753e     AA B5 C7 D9 
17542     EF 03 15 21 
17546     29 31 37 39 | 	byte	$c8, $b2, $a5, $a4, $aa, $b5, $c7, $d9, $ef, $03, $15, $21, $29, $31, $37, $39
1754a     31 23 1A 1C 
1754e     1C 13 04 FA 
17552     F6 F0 E2 D4 
17556     D0 D4 DA DE | 	byte	$31, $23, $1a, $1c, $1c, $13, $04, $fa, $f6, $f0, $e2, $d4, $d0, $d4, $da, $de
1755a     E5 F3 FF 05 
1755e     0B 17 25 28 
17562     1D 11 14 1F 
17566     21 18 12 17 | 	byte	$e5, $f3, $ff, $05, $0b, $17, $25, $28, $1d, $11, $14, $1f, $21, $18, $12, $17
1756a     1C 15 05 F8 
1756e     EE E6 DC D0 
17572     C6 C4 C9 CD 
17576     CD D7 F3 17 | 	byte	$1c, $15, $05, $f8, $ee, $e6, $dc, $d0, $c6, $c4, $c9, $cd, $cd, $d7, $f3, $17
1757a     2D 3B 45 54 
1757e     59 50 40 2A 
17582     18 04 F0 DA 
17586     C9 BF B8 B5 | 	byte	$2d, $3b, $45, $54, $59, $50, $40, $2a, $18, $04, $f0, $da, $c9, $bf, $b8, $b5
1758a     B3 B5 BF CC 
1758e     DD EF 0D 27 
17592     3F 4B 51 54 
17596     53 46 30 12 | 	byte	$b3, $b5, $bf, $cc, $dd, $ef, $0d, $27, $3f, $4b, $51, $54, $53, $46, $30, $12
1759a     FC E4 D0 BD 
1759e     B0 AE B3 BD 
175a2     C9 D7 E7 FD 
175a6     0D 16 1F 2D | 	byte	$fc, $e4, $d0, $bd, $b0, $ae, $b3, $bd, $c9, $d7, $e7, $fd, $0d, $16, $1f, $2d
175aa     36 36 32 2A 
175ae     20 11 0B 0A 
175b2     04 FB F4 F4 
175b6     F3 EC E2 DF | 	byte	$36, $36, $32, $2a, $20, $11, $0b, $0a, $04, $fb, $f4, $f4, $f3, $ec, $e2, $df
175ba     E1 E1 E3 E9 
175be     F1 F8 07 1A 
175c2     29 2B 25 1C 
175c6     14 10 0E 09 | 	byte	$e1, $e1, $e3, $e9, $f1, $f8, $07, $1a, $29, $2b, $25, $1c, $14, $10, $0e, $09
175ca     03 05 0F 14 
175ce     0F 07 FF F9 
175d2     EE DD CF C5 
175d6     C5 C8 C6 CF | 	byte	$03, $05, $0f, $14, $0f, $07, $ff, $f9, $ee, $dd, $cf, $c5, $c5, $c8, $c6, $cf
175da     ED 13 2B 37 
175de     44 4F 4E 40 
175e2     30 21 14 02 
175e6     F5 EA E1 D6 | 	byte	$ed, $13, $2b, $37, $44, $4f, $4e, $40, $30, $21, $14, $02, $f5, $ea, $e1, $d6
175ea     CD C4 BF BC 
175ee     BD C1 CE E3 
175f2     FF 1B 33 47 
175f6     51 52 4B 3E | 	byte	$cd, $c4, $bf, $bc, $bd, $c1, $ce, $e3, $ff, $1b, $33, $47, $51, $52, $4b, $3e
175fa     2C 14 FA E6 
175fe     D5 C8 BD B9 
17602     BD C4 CE D8 
17606     E7 F5 05 0F | 	byte	$2c, $14, $fa, $e6, $d5, $c8, $bd, $b9, $bd, $c4, $ce, $d8, $e7, $f5, $05, $0f
1760a     19 29 35 37 
1760e     31 2C 25 12 
17612     FE F9 FC FA 
17616     F3 F3 F9 FE | 	byte	$19, $29, $35, $37, $31, $2c, $25, $12, $fe, $f9, $fc, $fa, $f3, $f3, $f9, $fe
1761a     F9 F0 EA E7 
1761e     E7 E5 E2 EB 
17622     03 1D 28 28 
17626     2B 28 16 00 | 	byte	$f9, $f0, $ea, $e7, $e7, $e5, $e2, $eb, $03, $1d, $28, $28, $2b, $28, $16, $00
1762a     F9 FB FB F9 
1762e     FF 11 1B 18 
17632     0E 04 F8 E6 
17636     D4 C4 C3 C5 | 	byte	$f9, $fb, $fb, $f9, $ff, $11, $1b, $18, $0e, $04, $f8, $e6, $d4, $c4, $c3, $c5
1763a     C8 D3 F3 17 
1763e     2F 38 41 48 
17642     40 2C 19 0E 
17646     08 FE F7 F5 | 	byte	$c8, $d3, $f3, $17, $2f, $38, $41, $48, $40, $2c, $19, $0e, $08, $fe, $f7, $f5
1764a     F6 F3 E8 DC 
1764e     D1 C8 BE BA 
17652     C3 D7 F5 0B 
17656     25 3D 4B 4A | 	byte	$f6, $f3, $e8, $dc, $d1, $c8, $be, $ba, $c3, $d7, $f5, $0b, $25, $3d, $4b, $4a
1765a     40 36 29 15 
1765e     FC E8 DD D5 
17662     CB C5 C5 CB 
17666     D1 D9 E2 EF | 	byte	$40, $36, $29, $15, $fc, $e8, $dd, $d5, $cb, $c5, $c5, $cb, $d1, $d9, $e2, $ef
1766a     FE 0A 15 25 
1766e     35 39 33 2C 
17672     23 10 F8 ED 
17676     F0 F6 F5 F5 | 	byte	$fe, $0a, $15, $25, $35, $39, $33, $2c, $23, $10, $f8, $ed, $f0, $f6, $f5, $f5
1767a     FF 0B 0A FF 
1767e     F2 EE E9 DC 
17682     DB EB 07 1B 
17686     23 27 2F 28 | 	byte	$ff, $0b, $0a, $ff, $f2, $ee, $e9, $dc, $db, $eb, $07, $1b, $23, $27, $2f, $28
1768a     10 F0 E8 EF 
1768e     F5 F4 FF 13 
17692     27 26 18 09 
17696     FA EA D3 C3 | 	byte	$10, $f0, $e8, $ef, $f5, $f4, $ff, $13, $27, $26, $18, $09, $fa, $ea, $d3, $c3
1769a     C2 C9 D1 DF 
1769e     FF 23 38 3B 
176a2     3B 3A 30 14 
176a6     FE F8 F8 F9 | 	byte	$c2, $c9, $d1, $df, $ff, $23, $38, $3b, $3b, $3a, $30, $14, $fe, $f8, $f8, $f9
176aa     FB FF 0B 0C 
176ae     03 F3 E4 D0 
176b2     C0 B9 BF D1 
176b6     E3 FD 17 31 | 	byte	$fb, $ff, $0b, $0c, $03, $f3, $e4, $d0, $c0, $b9, $bf, $d1, $e3, $fd, $17, $31
176ba     3E 3D 38 2E 
176be     26 18 02 F3 
176c2     E8 E1 DA D0 
176c6     CC CE D2 D6 | 	byte	$3e, $3d, $38, $2e, $26, $18, $02, $f3, $e8, $e1, $da, $d0, $cc, $ce, $d2, $d6
176ca     DF EB FD 09 
176ce     15 26 35 3A 
176d2     31 27 1C 0C 
176d6     F1 E4 E9 F3 | 	byte	$df, $eb, $fd, $09, $15, $26, $35, $3a, $31, $27, $1c, $0c, $f1, $e4, $e9, $f3
176da     F8 FB 08 14 
176de     14 06 FB F0 
176e2     E1 D9 E3 F6 
176e6     05 13 1F 2A | 	byte	$f8, $fb, $08, $14, $14, $06, $fb, $f0, $e1, $d9, $e3, $f6, $05, $13, $1f, $2a
176ea     27 16 00 EA 
176ee     DE E3 EF FB 
176f2     07 19 2C 2E 
176f6     20 0B F7 E4 | 	byte	$27, $16, $00, $ea, $de, $e3, $ef, $fb, $07, $19, $2c, $2e, $20, $0b, $f7, $e4
176fa     D2 C4 C6 D1 
176fe     DF EF 0B 2D 
17702     3D 38 2F 28 
17706     18 FD E7 E5 | 	byte	$d2, $c4, $c6, $d1, $df, $ef, $0b, $2d, $3d, $38, $2f, $28, $18, $fd, $e7, $e5
1770a     ED F9 FF 0F 
1770e     1E 22 1A 08 
17712     ED D6 C5 BD 
17716     BC C3 D3 EF | 	byte	$ed, $f9, $ff, $0f, $1e, $22, $1a, $08, $ed, $d6, $c5, $bd, $bc, $c3, $d3, $ef
1771a     07 1C 2A 33 
1771e     32 2C 24 1B 
17722     10 01 F4 EC 
17726     E4 DA D2 CE | 	byte	$07, $1c, $2a, $33, $32, $2c, $24, $1b, $10, $01, $f4, $ec, $e4, $da, $d2, $ce
1772a     D0 D5 DD EB 
1772e     FA 09 16 27 
17732     35 36 2C 22 
17736     16 06 EC E1 | 	byte	$d0, $d5, $dd, $eb, $fa, $09, $16, $27, $35, $36, $2c, $22, $16, $06, $ec, $e1
1773a     E9 F5 FD 02 
1773e     0F 19 18 0D 
17742     F9 E9 E2 E9 
17746     F0 F5 FF 0F | 	byte	$e9, $f5, $fd, $02, $0f, $19, $18, $0d, $f9, $e9, $e2, $e9, $f0, $f5, $ff, $0f
1774a     1F 1E 0E 02 
1774e     F9 E9 DA DD 
17752     F3 0B 17 20 
17756     2B 30 22 09 | 	byte	$1f, $1e, $0e, $02, $f9, $e9, $da, $dd, $f3, $0b, $17, $20, $2b, $30, $22, $09
1775a     F0 E1 D5 CC 
1775e     D1 DE EC FB 
17762     15 2F 39 2C 
17766     20 15 02 E9 | 	byte	$f0, $e1, $d5, $cc, $d1, $de, $ec, $fb, $15, $2f, $39, $2c, $20, $15, $02, $e9
1776a     D8 DD ED FD 
1776e     0D 1F 2F 34 
17772     29 11 F8 E2 
17776     D0 BD B3 B8 | 	byte	$d8, $dd, $ed, $fd, $0d, $1f, $2f, $34, $29, $11, $f8, $e2, $d0, $bd, $b3, $b8
1777a     CA DD F3 06 
1777e     19 2A 30 2C 
17782     28 25 20 11 
17786     00 F4 EA E0 | 	byte	$ca, $dd, $f3, $06, $19, $2a, $30, $2c, $28, $25, $20, $11, $00, $f4, $ea, $e0
1778a     D4 CE CF D6 
1778e     DF EB FA 09 
17792     15 25 2F 30 
17796     26 1A 11 FD | 	byte	$d4, $ce, $cf, $d6, $df, $eb, $fa, $09, $15, $25, $2f, $30, $26, $1a, $11, $fd
1779a     EA E4 EF FD 
1779e     03 09 13 1D 
177a2     18 02 F1 F0 
177a6     F6 F3 EF F3 | 	byte	$ea, $e4, $ef, $fd, $03, $09, $13, $1d, $18, $02, $f1, $f0, $f6, $f3, $ef, $f3
177aa     FF 0C 09 02 
177ae     FB F6 F2 EA 
177b2     E0 E4 FD 15 
177b6     21 23 26 29 | 	byte	$ff, $0c, $09, $02, $fb, $f6, $f2, $ea, $e0, $e4, $fd, $15, $21, $23, $26, $29
177ba     20 0A F1 E5 
177be     E0 DD E1 EC 
177c2     F6 FF 16 29 
177c6     2C 1C 0D 04 | 	byte	$20, $0a, $f1, $e5, $e0, $dd, $e1, $ec, $f6, $ff, $16, $29, $2c, $1c, $0d, $04
177ca     F4 E1 D8 DF 
177ce     F2 05 15 2A 
177d2     39 38 2C 18 
177d6     04 EC D0 B8 | 	byte	$f4, $e1, $d8, $df, $f2, $05, $15, $2a, $39, $38, $2c, $18, $04, $ec, $d0, $b8
177da     B0 B1 B9 C7 
177de     DD F9 0F 23 
177e2     2F 34 32 30 
177e6     29 1C 0A F8 | 	byte	$b0, $b1, $b9, $c7, $dd, $f9, $0f, $23, $2f, $34, $32, $30, $29, $1c, $0a, $f8
177ea     ED E1 D8 D1 
177ee     D2 D9 E3 EE 
177f2     FD 07 12 1D 
177f6     29 29 20 16 | 	byte	$ed, $e1, $d8, $d1, $d2, $d9, $e3, $ee, $fd, $07, $12, $1d, $29, $29, $20, $16
177fa     0C FC EF EF 
177fe     FB 03 05 0B 
17802     17 18 08 FB 
17806     FD 01 FB F1 | 	byte	$0c, $fc, $ef, $ef, $fb, $03, $05, $0b, $17, $18, $08, $fb, $fd, $01, $fb, $f1
1780a     F1 FA FD F7 
1780e     F1 F1 F2 EE 
17812     EC F0 F1 F3 
17816     FF 17 25 24 | 	byte	$f1, $fa, $fd, $f7, $f1, $f1, $f2, $ee, $ec, $f0, $f1, $f3, $ff, $17, $25, $24
1781a     20 20 1D 10 
1781e     FC EF EC EA 
17822     ED F3 F6 FC 
17826     0B 1C 1E 13 | 	byte	$20, $20, $1d, $10, $fc, $ef, $ec, $ea, $ed, $f3, $f6, $fc, $0b, $1c, $1e, $13
1782a     05 FF F4 E8 
1782e     E1 E8 F7 06 
17832     19 2B 34 34 
17836     2D 21 0A ED | 	byte	$05, $ff, $f4, $e8, $e1, $e8, $f7, $06, $19, $2b, $34, $34, $2d, $21, $0a, $ed
1783a     D0 BD B0 AA 
1783e     AB B9 D3 EE 
17842     07 1E 31 3D 
17846     3C 35 2E 22 | 	byte	$d0, $bd, $b0, $aa, $ab, $b9, $d3, $ee, $07, $1e, $31, $3d, $3c, $35, $2e, $22
1784a     10 FC EC E4 
1784e     DC D7 D6 DB 
17852     E5 EF FB 04 
17856     0D 18 22 22 | 	byte	$10, $fc, $ec, $e4, $dc, $d7, $d6, $db, $e5, $ef, $fb, $04, $0d, $18, $22, $22
1785a     1C 14 0A FD 
1785e     F8 FB 02 03 
17862     04 0D 12 09 
17866     FF FF 08 05 | 	byte	$1c, $14, $0a, $fd, $f8, $fb, $02, $03, $04, $0d, $12, $09, $ff, $ff, $08, $05
1786a     FB F6 FA F9 
1786e     F0 E7 E5 E8 
17872     E9 E8 EC F7 
17876     FF FF 03 13 | 	byte	$fb, $f6, $fa, $f9, $f0, $e7, $e5, $e8, $e9, $e8, $ec, $f7, $ff, $ff, $03, $13
1787a     23 26 1E 1B 
1787e     1B 15 08 F8 
17882     F2 F0 F2 F4 
17886     F1 F3 FF 13 | 	byte	$23, $26, $1e, $1b, $1b, $15, $08, $f8, $f2, $f0, $f2, $f4, $f1, $f3, $ff, $13
1788a     17 0E 05 FF 
1788e     F9 F0 E9 EB 
17892     F4 03 15 21 
17896     28 2D 2F 25 | 	byte	$17, $0e, $05, $ff, $f9, $f0, $e9, $eb, $f4, $03, $15, $21, $28, $2d, $2f, $25
1789a     10 F2 DA C4 
1789e     B4 A6 A5 B3 
178a2     CA E7 FF 19 
178a6     31 40 41 3A | 	byte	$10, $f2, $da, $c4, $b4, $a6, $a5, $b3, $ca, $e7, $ff, $19, $31, $40, $41, $3a
178aa     30 24 14 00 
178ae     ED E5 E0 DB 
178b2     DA DE E7 F1 
178b6     FB 01 09 13 | 	byte	$30, $24, $14, $00, $ed, $e5, $e0, $db, $da, $de, $e7, $f1, $fb, $01, $09, $13
178ba     1C 1D 1A 12 
178be     08 02 04 07 
178c2     05 01 05 0C 
178c6     08 FB F9 03 | 	byte	$1c, $1d, $1a, $12, $08, $02, $04, $07, $05, $01, $05, $0c, $08, $fb, $f9, $03
178ca     0A 05 FE FE 
178ce     FF F8 EA E1 
178d2     DE DE E0 E5 
178d6     ED F9 08 0D | 	byte	$0a, $05, $fe, $fe, $ff, $f8, $ea, $e1, $de, $de, $e0, $e5, $ed, $f9, $08, $0d
178da     0D 13 21 28 
178de     21 15 13 11 
178e2     09 FD F3 F0 
178e6     F4 F7 F2 F1 | 	byte	$0d, $13, $21, $28, $21, $15, $13, $11, $09, $fd, $f3, $f0, $f4, $f7, $f2, $f1
178ea     FE 11 18 11 
178ee     08 03 FF F8 
178f2     ED E8 EE FB 
178f6     0B 13 1B 25 | 	byte	$fe, $11, $18, $11, $08, $03, $ff, $f8, $ed, $e8, $ee, $fb, $0b, $13, $1b, $25
178fa     2D 28 14 FE 
178fe     E5 D0 BC AB 
17902     A7 AF C5 DD 
17906     FB 15 2D 3F | 	byte	$2d, $28, $14, $fe, $e5, $d0, $bc, $ab, $a7, $af, $c5, $dd, $fb, $15, $2d, $3f
1790a     45 3E 32 25 
1790e     18 02 F0 E2 
17912     DF DE DE E2 
17916     E9 F4 FF 04 | 	byte	$45, $3e, $32, $25, $18, $02, $f0, $e2, $df, $de, $de, $e2, $e9, $f4, $ff, $04
1791a     09 10 19 1D 
1791e     18 0C 05 09 
17922     0F 0C 04 FF 
17926     05 07 FB ED | 	byte	$09, $10, $19, $1d, $18, $0c, $05, $09, $0f, $0c, $04, $ff, $05, $07, $fb, $ed
1792a     F1 02 0A 06 
1792e     03 07 08 FE 
17932     EC DE D7 D6 
17936     D9 DF EC FB | 	byte	$f1, $02, $0a, $06, $03, $07, $08, $fe, $ec, $de, $d7, $d6, $d9, $df, $ec, $fb
1793a     0E 1B 1B 18 
1793e     1F 27 20 11 
17942     05 05 05 FC 
17946     F3 EF F7 FE | 	byte	$0e, $1b, $1b, $18, $1f, $27, $20, $11, $05, $05, $05, $fc, $f3, $ef, $f7, $fe
1794a     FB F8 FF 13 
1794e     1E 15 09 05 
17952     04 FA E9 E0 
17956     E5 F1 FB 03 | 	byte	$fb, $f8, $ff, $13, $1e, $15, $09, $05, $04, $fa, $e9, $e0, $e5, $f1, $fb, $03
1795a     0D 1C 29 2B 
1795e     20 0A F6 E1 
17962     C9 B5 AA AF 
17966     BF D5 EF 0D | 	byte	$0d, $1c, $29, $2b, $20, $0a, $f6, $e1, $c9, $b5, $aa, $af, $bf, $d5, $ef, $0d
1796a     27 3B 45 40 
1796e     34 25 18 05 
17972     F1 E2 DE DF 
17976     E2 E5 ED F9 | 	byte	$27, $3b, $45, $40, $34, $25, $18, $05, $f1, $e2, $de, $df, $e2, $e5, $ed, $f9
1797a     03 09 0A 0F 
1797e     17 1B 11 06 
17982     07 10 13 09 
17986     01 01 03 FE | 	byte	$03, $09, $0a, $0f, $17, $1b, $11, $06, $07, $10, $13, $09, $01, $01, $03, $fe
1798a     F1 E6 EB FB 
1798e     09 0C 0B 0F 
17992     11 08 F1 DE 
17996     D4 D2 D3 DA | 	byte	$f1, $e6, $eb, $fb, $09, $0c, $0b, $0f, $11, $08, $f1, $de, $d4, $d2, $d3, $da
1799a     E9 FC 0F 24 
1799e     28 21 1F 22 
179a2     1D 0C FC F7 
179a6     FB F9 F3 F0 | 	byte	$e9, $fc, $0f, $24, $28, $21, $1f, $22, $1d, $0c, $fc, $f7, $fb, $f9, $f3, $f0
179aa     F9 05 05 01 
179ae     09 1D 25 19 
179b2     0C 09 06 FA 
179b6     E2 D8 DB E2 | 	byte	$f9, $05, $05, $01, $09, $1d, $25, $19, $0c, $09, $06, $fa, $e2, $d8, $db, $e2
179ba     EB F5 03 15 
179be     24 2C 27 19 
179c2     05 F0 DA C4 
179c6     B3 B1 BB CD | 	byte	$eb, $f5, $03, $15, $24, $2c, $27, $19, $05, $f0, $da, $c4, $b3, $b1, $bb, $cd
179ca     E7 FF 1D 32 
179ce     3F 40 35 25 
179d2     18 06 F4 E4 
179d6     DD DF E5 E9 | 	byte	$e7, $ff, $1d, $32, $3f, $40, $35, $25, $18, $06, $f4, $e4, $dd, $df, $e5, $e9
179da     EF FB 07 0C 
179de     0D 0F 18 19 
179e2     0D 04 09 13 
179e6     10 04 FF FF | 	byte	$ef, $fb, $07, $0c, $0d, $0f, $18, $19, $0d, $04, $09, $13, $10, $04, $ff, $ff
179ea     FF F5 EC E7 
179ee     E7 F2 FF 0E 
179f2     13 13 14 0F 
179f6     00 E8 D8 D0 | 	byte	$ff, $f5, $ec, $e7, $e7, $f2, $ff, $0e, $13, $13, $14, $0f, $00, $e8, $d8, $d0
179fa     D1 D7 E4 F9 
179fe     0D 23 2E 29 
17a02     21 1E 1C 10 
17a06     F9 ED EE F3 | 	byte	$d1, $d7, $e4, $f9, $0d, $23, $2e, $29, $21, $1e, $1c, $10, $f9, $ed, $ee, $f3
17a0a     F1 EE F7 04 
17a0e     0C 0A 13 25 
17a12     2D 24 15 0F 
17a16     08 F8 DC CF | 	byte	$f1, $ee, $f7, $04, $0c, $0a, $13, $25, $2d, $24, $15, $0f, $08, $f8, $dc, $cf
17a1a     CF D4 DA E7 
17a1e     FC 0E 1D 29 
17a22     2E 26 15 FD 
17a26     E9 D4 C2 B9 | 	byte	$cf, $d4, $da, $e7, $fc, $0e, $1d, $29, $2e, $26, $15, $fd, $e9, $d4, $c2, $b9
17a2a     BB CB DE F7 
17a2e     0F 24 35 3A 
17a32     32 24 14 08 
17a36     F8 E9 E0 E0 | 	byte	$bb, $cb, $de, $f7, $0f, $24, $35, $3a, $32, $24, $14, $08, $f8, $e9, $e0, $e0
17a3a     E6 ED F3 FB 
17a3e     07 0F 0F 11 
17a42     19 19 0F 04 
17a46     09 10 0D 00 | 	byte	$e6, $ed, $f3, $fb, $07, $0f, $0f, $11, $19, $19, $0f, $04, $09, $10, $0d, $00
17a4a     FA FD FB F1 
17a4e     E9 EA EC ED 
17a52     F6 07 16 19 
17a56     15 12 0B FA | 	byte	$fa, $fd, $fb, $f1, $e9, $ea, $ec, $ed, $f6, $07, $16, $19, $15, $12, $0b, $fa
17a5a     E5 D4 D1 D7 
17a5e     DF EF FF 17 
17a62     2A 2F 25 1D 
17a66     1B 12 00 EC | 	byte	$e5, $d4, $d1, $d7, $df, $ef, $ff, $17, $2a, $2f, $25, $1d, $1b, $12, $00, $ec
17a6a     E7 EB ED E9 
17a6e     EF FE 09 0D 
17a72     19 2D 38 31 
17a76     22 1A 10 F8 | 	byte	$e7, $eb, $ed, $e9, $ef, $fe, $09, $0d, $19, $2d, $38, $31, $22, $1a, $10, $f8
17a7a     DA C8 C3 C6 
17a7e     CB D7 ED 06 
17a82     19 25 2C 2C 
17a86     21 0E F6 E4 | 	byte	$da, $c8, $c3, $c6, $cb, $d7, $ed, $06, $19, $25, $2c, $2c, $21, $0e, $f6, $e4
17a8a     D2 C6 C4 CB 
17a8e     DD EF 06 17 
17a92     27 2E 2C 20 
17a96     13 07 FD F0 | 	byte	$d2, $c6, $c4, $cb, $dd, $ef, $06, $17, $27, $2e, $2c, $20, $13, $07, $fd, $f0
17a9a     E6 E3 E8 EF 
17a9e     F4 FB 06 0D 
17aa2     0F 11 18 1C 
17aa6     13 07 07 0F | 	byte	$e6, $e3, $e8, $ef, $f4, $fb, $06, $0d, $0f, $11, $18, $1c, $13, $07, $07, $0f
17aaa     0C FE F5 F5 
17aae     F8 F1 E8 E7 
17ab2     F0 F4 F3 FA 
17ab6     0D 1A 1B 13 | 	byte	$0c, $fe, $f5, $f5, $f8, $f1, $e8, $e7, $f0, $f4, $f3, $fa, $0d, $1a, $1b, $13
17aba     0D 05 F8 E5 
17abe     D9 D8 DF EB 
17ac2     FA 0B 1D 29 
17ac6     28 20 1C 1A | 	byte	$0d, $05, $f8, $e5, $d9, $d8, $df, $eb, $fa, $0b, $1d, $29, $28, $20, $1c, $1a
17aca     0D F9 EA E8 
17ace     E8 E4 E5 F1 
17ad2     FC 06 16 2F 
17ad6     3F 3E 30 28 | 	byte	$0d, $f9, $ea, $e8, $e8, $e4, $e5, $f1, $fc, $06, $16, $2f, $3f, $3e, $30, $28
17ada     1C 04 E0 C5 
17ade     BC BB BF C8 
17ae2     DB F9 11 21 
17ae6     27 2A 28 19 | 	byte	$1c, $04, $e0, $c5, $bc, $bb, $bf, $c8, $db, $f9, $11, $21, $27, $2a, $28, $19
17aea     05 EE E0 D8 
17aee     D3 D4 DD EB 
17af2     FD 0E 18 1E 
17af6     21 1B 0F 05 | 	byte	$05, $ee, $e0, $d8, $d3, $d4, $dd, $eb, $fd, $0e, $18, $1e, $21, $1b, $0f, $05
17afa     FD F7 EF EA 
17afe     EC F1 F5 FA 
17b02     FF 07 0B 11 
17b06     17 1D 18 0C | 	byte	$fd, $f7, $ef, $ea, $ec, $f1, $f5, $fa, $ff, $07, $0b, $11, $17, $1d, $18, $0c
17b0a     07 0B 0B FE 
17b0e     F2 EF F2 F2 
17b12     EC E9 ED F8 
17b16     FC F9 FC 0B | 	byte	$07, $0b, $0b, $fe, $f2, $ef, $f2, $f2, $ec, $e9, $ed, $f8, $fc, $f9, $fc, $0b
17b1a     18 18 0F 08 
17b1e     04 FC ED E1 
17b22     DF E7 F3 FB 
17b26     09 19 22 1F | 	byte	$18, $18, $0f, $08, $04, $fc, $ed, $e1, $df, $e7, $f3, $fb, $09, $19, $22, $1f
17b2a     1C 1F 1C 0D 
17b2e     FA EE EA E1 
17b32     DB DE E7 F2 
17b36     09 27 3E 46 | 	byte	$1c, $1f, $1c, $0d, $fa, $ee, $ea, $e1, $db, $de, $e7, $f2, $09, $27, $3e, $46
17b3a     42 3B 30 18 
17b3e     F2 D1 BC B5 
17b42     B3 BB CE E7 
17b46     FF 17 24 26 | 	byte	$42, $3b, $30, $18, $f2, $d1, $bc, $b5, $b3, $bb, $ce, $e7, $ff, $17, $24, $26
17b4a     23 1C 10 00 
17b4e     ED E5 E2 E4 
17b52     E7 EE FB 06 
17b56     0E 11 11 10 | 	byte	$23, $1c, $10, $00, $ed, $e5, $e2, $e4, $e7, $ee, $fb, $06, $0e, $11, $11, $10
17b5a     08 FF FC FB 
17b5e     F8 F3 F3 F7 
17b62     F9 FA FD FF 
17b66     04 0C 13 19 | 	byte	$08, $ff, $fc, $fb, $f8, $f3, $f3, $f7, $f9, $fa, $fd, $ff, $04, $0c, $13, $19
17b6a     1B 15 0C 06 
17b6e     06 01 F6 EC 
17b72     EA EE F0 EF 
17b76     F0 F5 FF 03 | 	byte	$1b, $15, $0c, $06, $06, $01, $f6, $ec, $ea, $ee, $f0, $ef, $f0, $f5, $ff, $03
17b7a     FF FD 03 10 
17b7e     15 0D 06 04 
17b82     02 F8 EC E7 
17b86     EC F3 FA 05 | 	byte	$ff, $fd, $03, $10, $15, $0d, $06, $04, $02, $f8, $ec, $e7, $ec, $f3, $fa, $05
17b8a     11 16 18 1F 
17b8e     27 24 10 00 
17b92     F6 EB DC D2 
17b96     D0 D9 EF 13 | 	byte	$11, $16, $18, $1f, $27, $24, $10, $00, $f6, $eb, $dc, $d2, $d0, $d9, $ef, $13
17b9a     2F 41 49 4C 
17b9e     40 29 05 E5 
17ba2     C8 B8 B0 B4 
17ba6     C1 D9 F3 0B | 	byte	$2f, $41, $49, $4c, $40, $29, $05, $e5, $c8, $b8, $b0, $b4, $c1, $d9, $f3, $0b
17baa     1B 23 20 18 
17bae     10 06 FB EF 
17bb2     EC EF F5 F8 
17bb6     FC 02 08 08 | 	byte	$1b, $23, $20, $18, $10, $06, $fb, $ef, $ec, $ef, $f5, $f8, $fc, $02, $08, $08
17bba     06 03 FE F9 
17bbe     F8 FB FE FD 
17bc2     FC FF FF FF 
17bc6     FC FB FC 02 | 	byte	$06, $03, $fe, $f9, $f8, $fb, $fe, $fd, $fc, $ff, $ff, $ff, $fc, $fb, $fc, $02
17bca     0D 13 16 19 
17bce     15 0B 00 FC 
17bd2     F9 F0 E9 E8 
17bd6     EF F6 F8 F9 | 	byte	$0d, $13, $16, $19, $15, $0b, $00, $fc, $f9, $f0, $e9, $e8, $ef, $f6, $f8, $f9
17bda     FD 03 06 FF 
17bde     F9 FD 0A 10 
17be2     0D 07 07 07 
17be6     00 F1 EA EC | 	byte	$fd, $03, $06, $ff, $f9, $fd, $0a, $10, $0d, $07, $07, $07, $00, $f1, $ea, $ec
17bea     EE F3 FE 07 
17bee     0D 16 27 31 
17bf2     29 19 08 FA 
17bf6     EA D5 C6 C3 | 	byte	$ee, $f3, $fe, $07, $0d, $16, $27, $31, $29, $19, $08, $fa, $ea, $d5, $c6, $c3
17bfa     D7 F7 19 2F 
17bfe     3F 4E 4E 3A 
17c02     16 F8 DC C6 
17c06     B5 B3 BF D3 | 	byte	$d7, $f7, $19, $2f, $3f, $4e, $4e, $3a, $16, $f8, $dc, $c6, $b5, $b3, $bf, $d3
17c0a     E9 FF 0F 1C 
17c0e     1F 17 0E 06 
17c12     FF F8 F4 F5 
17c16     FB FF 02 03 | 	byte	$e9, $ff, $0f, $1c, $1f, $17, $0e, $06, $ff, $f8, $f4, $f5, $fb, $ff, $02, $03
17c1a     03 01 FC F9 
17c1e     F6 F2 F1 F7 
17c22     FF 06 07 07 
17c26     08 07 02 FA | 	byte	$03, $01, $fc, $f9, $f6, $f2, $f1, $f7, $ff, $06, $07, $07, $08, $07, $02, $fa
17c2a     F5 F9 03 0D 
17c2e     0F 11 16 14 
17c32     06 F4 EF F0 
17c36     EF E8 E9 F6 | 	byte	$f5, $f9, $03, $0d, $0f, $11, $16, $14, $06, $f4, $ef, $f0, $ef, $e8, $e9, $f6
17c3a     02 07 06 05 
17c3e     08 07 FC F4 
17c42     F9 05 0E 0C 
17c46     0B 0D 0B 01 | 	byte	$02, $07, $06, $05, $08, $07, $fc, $f4, $f9, $05, $0e, $0c, $0b, $0d, $0b, $01
17c4a     F2 E9 E5 E5 
17c4e     EB F6 FF 09 
17c52     1B 32 3B 31 
17c56     20 10 FE E9 | 	byte	$f2, $e9, $e5, $e5, $eb, $f6, $ff, $09, $1b, $32, $3b, $31, $20, $10, $fe, $e9
17c5a     CC BC C5 E3 
17c5e     FF 17 2B 43 
17c62     4F 40 20 02 
17c66     E9 D4 C0 B7 | 	byte	$cc, $bc, $c5, $e3, $ff, $17, $2b, $43, $4f, $40, $20, $02, $e9, $d4, $c0, $b7
17c6a     BD D2 EA FD 
17c6e     0B 17 1D 18 
17c72     0D 03 FE FB 
17c76     F8 F9 FD 03 | 	byte	$bd, $d2, $ea, $fd, $0b, $17, $1d, $18, $0d, $03, $fe, $fb, $f8, $f9, $fd, $03
17c7a     06 04 00 FD 
17c7e     F6 F0 EE EC 
17c82     EC F3 FF 0C 
17c86     11 11 12 11 | 	byte	$06, $04, $00, $fd, $f6, $f0, $ee, $ec, $ec, $f3, $ff, $0c, $11, $11, $12, $11
17c8a     0C 00 F4 F3 
17c8e     FB 03 07 0B 
17c92     0F 13 0C FC 
17c96     E9 E3 E8 EB | 	byte	$0c, $00, $f4, $f3, $fb, $03, $07, $0b, $0f, $13, $0c, $fc, $e9, $e3, $e8, $eb
17c9a     EC F1 FF 12 
17c9e     18 12 0D 0B 
17ca2     01 F4 F1 FB 
17ca6     05 0A 0B 0F | 	byte	$ec, $f1, $ff, $12, $18, $12, $0d, $0b, $01, $f4, $f1, $fb, $05, $0a, $0b, $0f
17caa     12 09 FA EA 
17cae     E3 DD DB E3 
17cb2     EF FB 0D 25 
17cb6     3B 3F 34 25 | 	byte	$12, $09, $fa, $ea, $e3, $dd, $db, $e3, $ef, $fb, $0d, $25, $3b, $3f, $34, $25
17cba     16 00 E1 C8 
17cbe     C3 DB F4 05 
17cc2     17 2E 3F 3B 
17cc6     22 06 EA D8 | 	byte	$16, $00, $e1, $c8, $c3, $db, $f4, $05, $17, $2e, $3f, $3b, $22, $06, $ea, $d8
17cca     C9 C1 C4 D3 
17cce     EB FF 11 1B 
17cd2     1E 1A 11 05 
17cd6     FE FA F6 F7 | 	byte	$c9, $c1, $c4, $d3, $eb, $ff, $11, $1b, $1e, $1a, $11, $05, $fe, $fa, $f6, $f7
17cda     FB FF 02 01 
17cde     FD F8 F1 E9 
17ce2     E6 E7 E9 EF 
17ce6     FB 0D 17 1B | 	byte	$fb, $ff, $02, $01, $fd, $f8, $f1, $e9, $e6, $e7, $e9, $ef, $fb, $0d, $17, $1b
17cea     1B 1A 16 0B 
17cee     FB F4 F7 FC 
17cf2     FD FF 08 0A 
17cf6     07 FE F1 E1 | 	byte	$1b, $1a, $16, $0b, $fb, $f4, $f7, $fc, $fd, $ff, $08, $0a, $07, $fe, $f1, $e1
17cfa     DA DF ED F5 
17cfe     FF 0E 1F 25 
17d02     21 18 08 FB 
17d06     F6 FA FE FF | 	byte	$da, $df, $ed, $f5, $ff, $0e, $1f, $25, $21, $18, $08, $fb, $f6, $fa, $fe, $ff
17d0a     05 0F 13 0B 
17d0e     FD EE E6 DE 
17d12     D4 D6 E1 EF 
17d16     FD 13 2D 3F | 	byte	$05, $0f, $13, $0b, $fd, $ee, $e6, $de, $d4, $d6, $e1, $ef, $fd, $13, $2d, $3f
17d1a     3E 32 28 1C 
17d1e     04 E1 D4 DF 
17d22     F1 FB 05 17 
17d26     28 28 18 00 | 	byte	$3e, $32, $28, $1c, $04, $e1, $d4, $df, $f1, $fb, $05, $17, $28, $28, $18, $00
17d2a     EC D8 C9 C5 
17d2e     CD DD EF 05 
17d32     1A 27 28 21 
17d36     16 0D 03 F9 | 	byte	$ec, $d8, $c9, $c5, $cd, $dd, $ef, $05, $1a, $27, $28, $21, $16, $0d, $03, $f9
17d3a     F2 F1 F6 F9 
17d3e     FA F9 F6 F3 
17d42     ED E6 E3 E5 
17d46     E9 ED F7 09 | 	byte	$f2, $f1, $f6, $f9, $fa, $f9, $f6, $f3, $ed, $e6, $e3, $e5, $e9, $ed, $f7, $09
17d4a     18 21 23 23 
17d4e     21 18 07 FC 
17d52     FA FA F8 F5 
17d56     F9 FF FD F5 | 	byte	$18, $21, $23, $23, $21, $18, $07, $fc, $fa, $fa, $f8, $f5, $f9, $ff, $fd, $f5
17d5a     EE E9 E2 D9 
17d5e     DE EF 05 13 
17d62     1B 27 30 2C 
17d66     18 05 03 05 | 	byte	$ee, $e9, $e2, $d9, $de, $ef, $05, $13, $1b, $27, $30, $2c, $18, $05, $03, $05
17d6a     00 F9 FC 05 
17d6e     08 00 F6 F0 
17d72     E9 E1 D9 D6 
17d76     DF E7 ED F9 | 	byte	$00, $f9, $fc, $05, $08, $00, $f6, $f0, $e9, $e1, $d9, $d6, $df, $e7, $ed, $f9
17d7a     13 2D 38 35 
17d7e     32 33 26 0A 
17d82     F8 F9 FF FE 
17d86     FB FF 09 08 | 	byte	$13, $2d, $38, $35, $32, $33, $26, $0a, $f8, $f9, $ff, $fe, $fb, $ff, $09, $08
17d8a     F9 E8 DD D5 
17d8e     CC C7 D1 E7 
17d92     FF 0F 21 2F 
17d96     33 2D 24 18 | 	byte	$f9, $e8, $dd, $d5, $cc, $c7, $d1, $e7, $ff, $0f, $21, $2f, $33, $2d, $24, $18
17d9a     0D FE F2 ED 
17d9e     EB EA E9 EA 
17da2     EB EA E8 E5 
17da6     E5 E7 EB EF | 	byte	$0d, $fe, $f2, $ed, $eb, $ea, $e9, $ea, $eb, $ea, $e8, $e5, $e5, $e7, $eb, $ef
17daa     F6 03 15 21 
17dae     25 29 2B 25 
17db2     19 0B 05 FF 
17db6     F6 EE EB ED | 	byte	$f6, $03, $15, $21, $25, $29, $2b, $25, $19, $0b, $05, $ff, $f6, $ee, $eb, $ed
17dba     EC E9 E5 E3 
17dbe     E5 E6 E5 EA 
17dc2     FB 0F 1F 27 
17dc6     2A 2A 28 25 | 	byte	$ec, $e9, $e5, $e3, $e5, $e6, $e5, $ea, $fb, $0f, $1f, $27, $2a, $2a, $28, $25
17dca     1E 11 04 FF 
17dce     FC F7 EF E9 
17dd2     EA EB EA E7 
17dd6     E6 E4 E6 E9 | 	byte	$1e, $11, $04, $ff, $fc, $f7, $ef, $e9, $ea, $eb, $ea, $e7, $e6, $e4, $e6, $e9
17dda     E6 E6 F2 0A 
17dde     23 2A 31 3D 
17de2     42 35 23 1E 
17de6     1B 0E FC F0 | 	byte	$e6, $e6, $f2, $0a, $23, $2a, $31, $3d, $42, $35, $23, $1e, $1b, $0e, $fc, $f0
17dea     EC E4 D7 CB 
17dee     C8 CA CD D3 
17df2     DD EF 03 1B 
17df6     2B 31 33 34 | 	byte	$ec, $e4, $d7, $cb, $c8, $ca, $cd, $d3, $dd, $ef, $03, $1b, $2b, $31, $33, $34
17dfa     33 28 18 04 
17dfe     F9 F0 E4 DB 
17e02     D8 DA DE E0 
17e06     E3 E7 E9 EC | 	byte	$33, $28, $18, $04, $f9, $f0, $e4, $db, $d8, $da, $de, $e0, $e3, $e7, $e9, $ec
17e0a     F0 F3 F5 FD 
17e0e     0B 1B 23 29 
17e12     2F 31 29 1C 
17e16     12 09 FB ED | 	byte	$f0, $f3, $f5, $fd, $0b, $1b, $23, $29, $2f, $31, $29, $1c, $12, $09, $fb, $ed
17e1a     E2 DE DB D9 
17e1e     D9 DF E5 EB 
17e22     F3 F9 FB FF 
17e26     15 24 24 23 | 	byte	$e2, $de, $db, $d9, $d9, $df, $e5, $eb, $f3, $f9, $fb, $ff, $15, $24, $24, $23
17e2a     2F 3B 36 24 
17e2e     11 09 FE EA 
17e32     D9 D5 D9 DF 
17e36     E4 EC F3 F4 | 	byte	$2f, $3b, $36, $24, $11, $09, $fe, $ea, $d9, $d5, $d9, $df, $e4, $ec, $f3, $f4
17e3a     F1 EE E8 DC 
17e3e     DB EB 09 1B 
17e42     2C 3F 52 54 
17e46     4A 40 35 1D | 	byte	$f1, $ee, $e8, $dc, $db, $eb, $09, $1b, $2c, $3f, $52, $54, $4a, $40, $35, $1d
17e4a     00 E8 D6 C9 
17e4e     BA B3 B7 C1 
17e52     CC D9 EC FB 
17e56     0B 1A 29 30 | 	byte	$00, $e8, $d6, $c9, $ba, $b3, $b7, $c1, $cc, $d9, $ec, $fb, $0b, $1a, $29, $30
17e5a     35 37 35 2E 
17e5e     20 11 00 F0 
17e62     E1 D6 D0 CF 
17e66     D3 D8 DE E5 | 	byte	$35, $37, $35, $2e, $20, $11, $00, $f0, $e1, $d6, $d0, $cf, $d3, $d8, $de, $e5
17e6a     EB EE F1 F5 
17e6e     F7 FA 05 15 
17e72     21 2B 32 37 
17e76     34 29 1E 10 | 	byte	$eb, $ee, $f1, $f5, $f7, $fa, $05, $15, $21, $2b, $32, $37, $34, $29, $1e, $10
17e7a     FE EC DD D5 
17e7e     CF CD CF D7 
17e82     E5 EE F7 FF 
17e86     07 08 08 0E | 	byte	$fe, $ec, $dd, $d5, $cf, $cd, $cf, $d7, $e5, $ee, $f7, $ff, $07, $08, $08, $0e
17e8a     1F 31 39 38 
17e8e     38 35 28 10 
17e92     F4 E0 D6 CF 
17e96     CD D4 E1 EF | 	byte	$1f, $31, $39, $38, $38, $35, $28, $10, $f4, $e0, $d6, $cf, $cd, $d4, $e1, $ef
17e9a     F9 FC F8 F0 
17e9e     E8 DE D4 DD 
17ea2     F7 13 2F 43 
17ea6     5A 62 5F 55 | 	byte	$f9, $fc, $f8, $f0, $e8, $de, $d4, $dd, $f7, $13, $2f, $43, $5a, $62, $5f, $55
17eaa     40 24 00 E2 
17eae     CC B9 AB A7 
17eb2     AF C1 D1 E1 
17eb6     F5 07 13 18 | 	byte	$40, $24, $00, $e2, $cc, $b9, $ab, $a7, $af, $c1, $d1, $e1, $f5, $07, $13, $18
17eba     1F 2C 35 34 
17ebe     2F 28 24 18 
17ec2     04 F0 E4 D9 
17ec6     D2 CE D0 D5 | 	byte	$1f, $2c, $35, $34, $2f, $28, $24, $18, $04, $f0, $e4, $d9, $d2, $ce, $d0, $d5
17eca     DC E2 E9 EC 
17ece     EF F3 F7 FA 
17ed2     03 13 23 2F 
17ed6     37 3A 38 31 | 	byte	$dc, $e2, $e9, $ec, $ef, $f3, $f7, $fa, $03, $13, $23, $2f, $37, $3a, $38, $31
17eda     25 15 00 EB 
17ede     DB D1 CB C8 
17ee2     CD D7 E6 F1 
17ee6     F9 FF 0A 0A | 	byte	$25, $15, $00, $eb, $db, $d1, $cb, $c8, $cd, $d7, $e6, $f1, $f9, $ff, $0a, $0a
17eea     04 09 1F 33 
17eee     38 35 37 36 
17ef2     26 0C F0 E0 
17ef6     D8 D0 CF D5 | 	byte	$04, $09, $1f, $33, $38, $35, $37, $36, $26, $0c, $f0, $e0, $d8, $d0, $cf, $d5
17efa     E3 EF F7 F9 
17efe     F5 EC E5 E0 
17f02     D8 DB F5 17 
17f06     33 4B 5B 62 | 	byte	$e3, $ef, $f7, $f9, $f5, $ec, $e5, $e0, $d8, $db, $f5, $17, $33, $4b, $5b, $62
17f0a     62 58 42 20 
17f0e     FC DD CA B8 
17f12     AA AA B5 C9 
17f16     D9 E9 FB 08 | 	byte	$62, $58, $42, $20, $fc, $dd, $ca, $b8, $aa, $aa, $b5, $c9, $d9, $e9, $fb, $08
17f1a     13 18 1D 23 
17f1e     28 29 26 22 
17f22     1C 12 07 F8 
17f26     EC E2 DC D9 | 	byte	$13, $18, $1d, $23, $28, $29, $26, $22, $1c, $12, $07, $f8, $ec, $e2, $dc, $d9
17f2a     D7 D8 DB DE 
17f2e     E1 E5 E7 ED 
17f32     F5 FB 03 13 
17f36     24 34 3B 3C | 	byte	$d7, $d8, $db, $de, $e1, $e5, $e7, $ed, $f5, $fb, $03, $13, $24, $34, $3b, $3c
17f3a     38 30 26 12 
17f3e     FE EB DC D4 
17f42     CC C9 CE D8 
17f46     E4 EF F9 FF | 	byte	$38, $30, $26, $12, $fe, $eb, $dc, $d4, $cc, $c9, $ce, $d8, $e4, $ef, $f9, $ff
17f4a     FF 07 11 18 
17f4e     1E 29 34 38 
17f52     30 24 18 0A 
17f56     F6 E5 DA D9 | 	byte	$ff, $07, $11, $18, $1e, $29, $34, $38, $30, $24, $18, $0a, $f6, $e5, $da, $d9
17f5a     DA DD E3 EA 
17f5e     EF EF ED E6 
17f62     E2 E4 E5 EB 
17f66     FD 1B 3A 51 | 	byte	$da, $dd, $e3, $ea, $ef, $ef, $ed, $e6, $e2, $e4, $e5, $eb, $fd, $1b, $3a, $51
17f6a     58 58 56 50 
17f6e     38 15 F4 DD 
17f72     CD BE B2 B1 
17f76     BF CF DF EF | 	byte	$58, $58, $56, $50, $38, $15, $f4, $dd, $cd, $be, $b2, $b1, $bf, $cf, $df, $ef
17f7a     FB 06 12 1B 
17f7e     1B 18 19 1D 
17f82     1C 15 0F 0C 
17f86     09 01 F6 EF | 	byte	$fb, $06, $12, $1b, $1b, $18, $19, $1d, $1c, $15, $0f, $0c, $09, $01, $f6, $ef
17f8a     EA E6 E1 DC 
17f8e     D9 D8 D9 DC 
17f92     E0 E7 F2 FD 
17f96     09 15 27 34 | 	byte	$ea, $e6, $e1, $dc, $d9, $d8, $d9, $dc, $e0, $e7, $f2, $fd, $09, $15, $27, $34
17f9a     3E 3D 35 2F 
17f9e     25 16 00 EC 
17fa2     E0 D7 D1 CE 
17fa6     D1 D7 E1 ED | 	byte	$3e, $3d, $35, $2f, $25, $16, $00, $ec, $e0, $d7, $d1, $ce, $d1, $d7, $e1, $ed
17faa     F6 F8 FE 0F 
17fae     1E 1D 19 21 
17fb2     32 31 21 14 
17fb6     10 0C FC EC | 	byte	$f6, $f8, $fe, $0f, $1e, $1d, $19, $21, $32, $31, $21, $14, $10, $0c, $fc, $ec
17fba     E3 E3 E4 E2 
17fbe     E1 E3 E4 E6 
17fc2     E6 E4 E3 EA 
17fc6     F4 FB 06 1D | 	byte	$e3, $e3, $e4, $e2, $e1, $e3, $e4, $e6, $e6, $e4, $e3, $ea, $f4, $fb, $06, $1d
17fca     39 4F 52 4A 
17fce     47 46 38 18 
17fd2     F5 E0 D5 C8 
17fd6     BB B8 C3 D3 | 	byte	$39, $4f, $52, $4a, $47, $46, $38, $18, $f5, $e0, $d5, $c8, $bb, $b8, $c3, $d3
17fda     E5 EF FA 07 
17fde     15 1B 16 10 
17fe2     0F 12 10 09 
17fe6     05 09 0B 08 | 	byte	$e5, $ef, $fa, $07, $15, $1b, $16, $10, $0f, $12, $10, $09, $05, $09, $0b, $08
17fea     02 FC F9 F2 
17fee     EA E0 D8 D3 
17ff2     D2 D4 D9 E1 
17ff6     EE FF 0B 18 | 	byte	$02, $fc, $f9, $f2, $ea, $e0, $d8, $d3, $d2, $d4, $d9, $e1, $ee, $ff, $0b, $18
17ffa     25 35 3F 3D 
17ffe     34 2C 26 19 
18002     06 EF E3 DC 
18006     D5 D0 CE D3 | 	byte	$25, $35, $3f, $3d, $34, $2c, $26, $19, $06, $ef, $e3, $dc, $d5, $d0, $ce, $d3
1800a     DF E9 EF F5 
1800e     03 19 21 1A 
18012     17 21 2D 28 
18016     16 0D 0E 0B | 	byte	$df, $e9, $ef, $f5, $03, $19, $21, $1a, $17, $21, $2d, $28, $16, $0d, $0e, $0b
1801a     FE F1 EB EB 
1801e     E9 E4 DF DE 
18022     DF E0 E1 E2 
18026     E5 ED FB 06 | 	byte	$fe, $f1, $eb, $eb, $e9, $e4, $df, $de, $df, $e0, $e1, $e2, $e5, $ed, $fb, $06
1802a     0E 1B 36 4C 
1802e     50 43 3E 42 
18032     3A 19 F8 E3 
18036     DA CC BE B8 | 	byte	$0e, $1b, $36, $4c, $50, $43, $3e, $42, $3a, $19, $f8, $e3, $da, $cc, $be, $b8
1803a     C2 D7 E5 F1 
1803e     FD 0B 19 1C 
18042     14 0B 09 09 
18046     05 FF FE 05 | 	byte	$c2, $d7, $e5, $f1, $fd, $0b, $19, $1c, $14, $0b, $09, $09, $05, $ff, $fe, $05
1804a     0B 0B 09 07 
1804e     03 FB F0 E4 
18052     D8 D2 CD CE 
18056     D3 DC EB FB | 	byte	$0b, $0b, $09, $07, $03, $fb, $f0, $e4, $d8, $d2, $cd, $ce, $d3, $dc, $eb, $fb
1805a     0D 19 25 33 
1805e     3F 40 37 2D 
18062     28 1E 08 F4 
18066     E5 DD D8 CF | 	byte	$0d, $19, $25, $33, $3f, $40, $37, $2d, $28, $1e, $08, $f4, $e5, $dd, $d8, $cf
1806a     CD D0 DD E7 
1806e     ED F3 04 19 
18072     21 1B 17 21 
18076     2B 24 14 0C | 	byte	$cd, $d0, $dd, $e7, $ed, $f3, $04, $19, $21, $1b, $17, $21, $2b, $24, $14, $0c
1807a     0D 0B FF F2 
1807e     ED ED EB E5 
18082     E1 DF DF DD 
18086     DD DF E3 EB | 	byte	$0d, $0b, $ff, $f2, $ed, $ed, $eb, $e5, $e1, $df, $df, $dd, $dd, $df, $e3, $eb
1808a     F7 07 11 19 
1808e     2D 47 53 48 
18092     3F 41 40 24 
18096     00 E5 D9 CD | 	byte	$f7, $07, $11, $19, $2d, $47, $53, $48, $3f, $41, $40, $24, $00, $e5, $d9, $cd
1809a     BD B5 BE CF 
1809e     E4 F1 FF 0F 
180a2     1D 1F 16 0C 
180a6     08 04 FE F9 | 	byte	$bd, $b5, $be, $cf, $e4, $f1, $ff, $0f, $1d, $1f, $16, $0c, $08, $04, $fe, $f9
180aa     F9 FF 07 0B 
180ae     0C 0B 09 01 
180b2     F7 E9 DD D3 
180b6     CC CA CD D7 | 	byte	$f9, $ff, $07, $0b, $0c, $0b, $09, $01, $f7, $e9, $dd, $d3, $cc, $ca, $cd, $d7
180ba     E3 F5 07 19 
180be     25 32 3F 44 
180c2     3C 31 2A 20 
180c6     10 F6 E6 DD | 	byte	$e3, $f5, $07, $19, $25, $32, $3f, $44, $3c, $31, $2a, $20, $10, $f6, $e6, $dd
180ca     D5 CE CB CE 
180ce     DA E6 ED F2 
180d2     FF 15 1F 1A 
180d6     19 27 2D 25 | 	byte	$d5, $ce, $cb, $ce, $da, $e6, $ed, $f2, $ff, $15, $1f, $1a, $19, $27, $2d, $25
180da     14 0D 0C 06 
180de     FA EF ED ED 
180e2     EC E8 E5 E5 
180e6     E1 DE DB DB | 	byte	$14, $0d, $0c, $06, $fa, $ef, $ed, $ed, $ec, $e8, $e5, $e5, $e1, $de, $db, $db
180ea     DE E4 EF 03 
180ee     13 1D 2F 47 
180f2     59 54 43 40 
180f6     3E 28 04 E0 | 	byte	$de, $e4, $ef, $03, $13, $1d, $2f, $47, $59, $54, $43, $40, $3e, $28, $04, $e0
180fa     D2 C9 BB B3 
180fe     BA CF E5 F7 
18102     03 13 1F 22 
18106     19 10 09 03 | 	byte	$d2, $c9, $bb, $b3, $ba, $cf, $e5, $f7, $03, $13, $1f, $22, $19, $10, $09, $03
1810a     FA F3 F2 F7 
1810e     FD 02 07 0A 
18112     0B 07 FF F5 
18116     E8 DB D1 CC | 	byte	$fa, $f3, $f2, $f7, $fd, $02, $07, $0a, $0b, $07, $ff, $f5, $e8, $db, $d1, $cc
1811a     CC D1 DC EB 
1811e     FF 13 23 2F 
18122     3D 47 43 36 
18126     2D 24 16 FE | 	byte	$cc, $d1, $dc, $eb, $ff, $13, $23, $2f, $3d, $47, $43, $36, $2d, $24, $16, $fe
1812a     E8 DC D5 CF 
1812e     CB CE D7 E7 
18132     EF F2 FD 0F 
18136     19 1B 1D 29 | 	byte	$e8, $dc, $d5, $cf, $cb, $ce, $d7, $e7, $ef, $f2, $fd, $0f, $19, $1b, $1d, $29
1813a     30 29 1D 12 
1813e     0C 02 F4 EB 
18142     E8 E9 EB EB 
18146     EC EB E8 E1 | 	byte	$30, $29, $1d, $12, $0c, $02, $f4, $eb, $e8, $e9, $eb, $eb, $ec, $eb, $e8, $e1
1814a     DB D6 D7 DC 
1814e     E5 F7 0F 1F 
18152     2F 45 5D 5E 
18156     51 4A 44 30 | 	byte	$db, $d6, $d7, $dc, $e5, $f7, $0f, $1f, $2f, $45, $5d, $5e, $51, $4a, $44, $30
1815a     08 E4 CE C0 
1815e     B2 AA B2 C9 
18162     DF F7 0A 19 
18166     23 26 20 16 | 	byte	$08, $e4, $ce, $c0, $b2, $aa, $b2, $c9, $df, $f7, $0a, $19, $23, $26, $20, $16
1816a     0C 01 F8 F2 
1816e     F1 F3 F9 FF 
18172     08 0D 0E 0B 
18176     04 F8 E9 DC | 	byte	$0c, $01, $f8, $f2, $f1, $f3, $f9, $ff, $08, $0d, $0e, $0b, $04, $f8, $e9, $dc
1817a     D0 C8 C5 C9 
1817e     D5 E5 F9 0F 
18182     23 31 3E 49 
18186     48 3F 35 28 | 	byte	$d0, $c8, $c5, $c9, $d5, $e5, $f9, $0f, $23, $31, $3e, $49, $48, $3f, $35, $28
1818a     18 00 EA DB 
1818e     D1 C8 C6 CB 
18192     D5 E2 ED F9 
18196     FF 04 0D 1B | 	byte	$18, $00, $ea, $db, $d1, $c8, $c6, $cb, $d5, $e2, $ed, $f9, $ff, $04, $0d, $1b
1819a     27 2D 2C 2B 
1819e     28 20 10 FD 
181a2     F0 EA E7 E5 
181a6     E7 EB F0 F0 | 	byte	$27, $2d, $2c, $2b, $28, $20, $10, $fd, $f0, $ea, $e7, $e5, $e7, $eb, $f0, $f0
181aa     EC E4 DB D5 
181ae     D2 D5 DD EB 
181b2     07 1D 2F 3F 
181b6     59 64 5E 55 | 	byte	$ec, $e4, $db, $d5, $d2, $d5, $dd, $eb, $07, $1d, $2f, $3f, $59, $64, $5e, $55
181ba     4B 34 11 E8 
181be     D0 BA AA A3 
181c2     AB BF D9 F5 
181c6     0B 1F 25 26 | 	byte	$4b, $34, $11, $e8, $d0, $ba, $aa, $a3, $ab, $bf, $d9, $f5, $0b, $1f, $25, $26
181ca     25 20 11 01 
181ce     F4 F1 F0 F0 
181d2     F2 FB 05 0D 
181d6     0F 0D 08 FE | 	byte	$25, $20, $11, $01, $f4, $f1, $f0, $f0, $f2, $fb, $05, $0d, $0f, $0d, $08, $fe
181da     F0 E0 D2 C7 
181de     C3 C6 CF DD 
181e2     F3 0A 23 31 
181e6     3F 48 4B 45 | 	byte	$f0, $e0, $d2, $c7, $c3, $c6, $cf, $dd, $f3, $0a, $23, $31, $3f, $48, $4b, $45
181ea     3A 2D 1C 08 
181ee     F0 DC D0 C8 
181f2     C4 C8 D3 DE 
181f6     E9 F9 03 00 | 	byte	$3a, $2d, $1c, $08, $f0, $dc, $d0, $c8, $c4, $c8, $d3, $de, $e9, $f9, $03, $00
181fa     03 15 2D 32 
181fe     2A 28 2C 26 
18202     12 F9 EF EC 
18206     E8 E5 E5 EC | 	byte	$03, $15, $2d, $32, $2a, $28, $2c, $26, $12, $f9, $ef, $ec, $e8, $e5, $e5, $ec
1820a     F2 F3 EE E6 
1820e     DE D4 D0 D1 
18212     D9 E7 FF 1B 
18216     2E 3F 53 61 | 	byte	$f2, $f3, $ee, $e6, $de, $d4, $d0, $d1, $d9, $e7, $ff, $1b, $2e, $3f, $53, $61
1821a     62 5A 4D 3A 
1821e     19 F8 D8 C0 
18222     AB A3 A9 BB 
18226     D1 EA 06 1D | 	byte	$62, $5a, $4d, $3a, $19, $f8, $d8, $c0, $ab, $a3, $a9, $bb, $d1, $ea, $06, $1d
1822a     26 28 27 23 
1822e     14 02 F4 EE 
18232     ED EC EF F9 
18236     06 10 14 13 | 	byte	$26, $28, $27, $23, $14, $02, $f4, $ee, $ed, $ec, $ef, $f9, $06, $10, $14, $13
1823a     0E 03 F5 E2 
1823e     D3 C7 C0 C1 
18242     C9 D9 EF 05 
18246     1E 2F 3E 45 | 	byte	$0e, $03, $f5, $e2, $d3, $c7, $c0, $c1, $c9, $d9, $ef, $05, $1e, $2f, $3e, $45
1824a     49 46 3E 31 
1824e     21 0C F9 E4 
18252     D5 C9 C4 C7 
18256     CD D7 E5 F2 | 	byte	$49, $46, $3e, $31, $21, $0c, $f9, $e4, $d5, $c9, $c4, $c7, $cd, $d7, $e5, $f2
1825a     FD 03 0B 16 
1825e     24 2B 2D 2A 
18262     27 1E 12 05 
18266     F8 F0 EB EA | 	byte	$fd, $03, $0b, $16, $24, $2b, $2d, $2a, $27, $1e, $12, $05, $f8, $f0, $eb, $ea
1826a     EB ED EF EF 
1826e     EB E4 DC D5 
18272     D1 D3 DC EA 
18276     FD 14 29 39 | 	byte	$eb, $ed, $ef, $ef, $eb, $e4, $dc, $d5, $d1, $d3, $dc, $ea, $fd, $14, $29, $39
1827a     45 50 58 59 
1827e     50 3D 24 09 
18282     EC CD B5 A8 
18286     A8 B3 C5 DF | 	byte	$45, $50, $58, $59, $50, $3d, $24, $09, $ec, $cd, $b5, $a8, $a8, $b3, $c5, $df
1828a     F9 0F 1F 2B 
1828e     2B 20 12 05 
18292     F8 EC E5 E9 
18296     F2 FE 09 13 | 	byte	$f9, $0f, $1f, $2b, $2b, $20, $12, $05, $f8, $ec, $e5, $e9, $f2, $fe, $09, $13
1829a     1B 1C 15 08 
1829e     F4 E2 D2 C4 
182a2     BC BD C5 D7 
182a6     EA FF 19 2B | 	byte	$1b, $1c, $15, $08, $f4, $e2, $d2, $c4, $bc, $bd, $c5, $d7, $ea, $ff, $19, $2b
182aa     3A 41 43 42 
182ae     40 35 26 12 
182b2     02 F2 E0 D0 
182b6     C5 C4 C7 CE | 	byte	$3a, $41, $43, $42, $40, $35, $26, $12, $02, $f2, $e0, $d0, $c5, $c4, $c7, $ce
182ba     DD E9 F3 FF 
182be     16 22 20 1D 
182c2     24 2C 26 14 
182c6     0B 0B 08 FD | 	byte	$dd, $e9, $f3, $ff, $16, $22, $20, $1d, $24, $2c, $26, $14, $0b, $0b, $08, $fd
182ca     F4 F3 F4 F4 
182ce     ED E8 E3 DE 
182d2     D9 D4 D4 D9 
182d6     E3 F2 FF 13 | 	byte	$f4, $f3, $f4, $f4, $ed, $e8, $e3, $de, $d9, $d4, $d4, $d9, $e3, $f2, $ff, $13
182da     23 31 36 39 
182de     43 4F 50 43 
182e2     2E 1D 06 EA 
182e6     C8 B4 AD B1 | 	byte	$23, $31, $36, $39, $43, $4f, $50, $43, $2e, $1d, $06, $ea, $c8, $b4, $ad, $b1
182ea     BD CD E7 FF 
182ee     15 25 2B 23 
182f2     11 03 F9 EE 
182f6     E4 E4 F1 FF | 	byte	$bd, $cd, $e7, $ff, $15, $25, $2b, $23, $11, $03, $f9, $ee, $e4, $e4, $f1, $ff
182fa     11 1B 23 25 
182fe     20 0E FA E1 
18302     D0 BE B6 B6 
18306     BF D2 E7 FE | 	byte	$11, $1b, $23, $25, $20, $0e, $fa, $e1, $d0, $be, $b6, $b6, $bf, $d2, $e7, $fe
1830a     15 29 38 3D 
1830e     3D 3D 3E 38 
18312     2B 19 0C FD 
18316     EC D8 CB C6 | 	byte	$15, $29, $38, $3d, $3d, $3d, $3e, $38, $2b, $19, $0c, $fd, $ec, $d8, $cb, $c6
1831a     C4 C8 D3 DD 
1831e     EB FB 13 25 
18322     27 1F 1C 21 
18326     21 15 08 06 | 	byte	$c4, $c8, $d3, $dd, $eb, $fb, $13, $25, $27, $1f, $1c, $21, $21, $15, $08, $06
1832a     0B 0B 04 FE 
1832e     FC F9 F2 E7 
18332     DC D6 D1 D1 
18336     D3 DB E7 F7 | 	byte	$0b, $0b, $04, $fe, $fc, $f9, $f2, $e7, $dc, $d6, $d1, $d1, $d3, $db, $e7, $f7
1833a     07 14 1F 2C 
1833e     2D 29 2E 3F 
18342     49 41 33 28 
18346     19 00 E0 C2 | 	byte	$07, $14, $1f, $2c, $2d, $29, $2e, $3f, $49, $41, $33, $28, $19, $00, $e0, $c2
1834a     B7 B4 B8 C5 
1834e     D7 F2 09 1D 
18352     27 22 15 04 
18356     F8 EE E5 E4 | 	byte	$b7, $b4, $b8, $c5, $d7, $f2, $09, $1d, $27, $22, $15, $04, $f8, $ee, $e5, $e4
1835a     ED FF 13 21 
1835e     2A 2D 28 16 
18362     00 E4 CE BE 
18366     B3 B1 BA CB | 	byte	$ed, $ff, $13, $21, $2a, $2d, $28, $16, $00, $e4, $ce, $be, $b3, $b1, $ba, $cb
1836a     E3 FA 11 24 
1836e     35 3C 3A 39 
18372     3B 39 2E 1D 
18376     11 05 F5 E1 | 	byte	$e3, $fa, $11, $24, $35, $3c, $3a, $39, $3b, $39, $2e, $1d, $11, $05, $f5, $e1
1837a     D0 C8 C4 C5 
1837e     CC D6 E2 F4 
18382     0F 1F 28 24 
18386     1D 1B 19 13 | 	byte	$d0, $c8, $c4, $c5, $cc, $d6, $e2, $f4, $0f, $1f, $28, $24, $1d, $1b, $19, $13
1838a     08 04 07 0D 
1838e     0D 08 03 FF 
18392     F8 EC DE D4 
18396     CE CE D1 D9 | 	byte	$08, $04, $07, $0d, $0d, $08, $03, $ff, $f8, $ec, $de, $d4, $ce, $ce, $d1, $d9
1839a     E6 F7 07 14 
1839e     1D 2A 2C 22 
183a2     21 34 45 42 
183a6     34 2B 26 14 | 	byte	$e6, $f7, $07, $14, $1d, $2a, $2c, $22, $21, $34, $45, $42, $34, $2b, $26, $14
183aa     F0 CC BD B8 
183ae     B8 BF CE E7 
183b2     FF 15 23 24 
183b6     19 0A FA EE | 	byte	$f0, $cc, $bd, $b8, $b8, $bf, $ce, $e7, $ff, $15, $23, $24, $19, $0a, $fa, $ee
183ba     E6 E4 EB FB 
183be     0F 21 2C 30 
183c2     2C 20 08 ED 
183c6     D4 C0 B2 AE | 	byte	$e6, $e4, $eb, $fb, $0f, $21, $2c, $30, $2c, $20, $08, $ed, $d4, $c0, $b2, $ae
183ca     B4 C5 DB F3 
183ce     0D 1F 31 3B 
183d2     3B 37 39 3B 
183d6     31 23 14 0A | 	byte	$b4, $c5, $db, $f3, $0d, $1f, $31, $3b, $3b, $37, $39, $3b, $31, $23, $14, $0a
183da     FE E8 D4 CA 
183de     C5 C4 C9 D2 
183e2     DD EF 05 1D 
183e6     27 27 20 1C | 	byte	$fe, $e8, $d4, $ca, $c5, $c4, $c9, $d2, $dd, $ef, $05, $1d, $27, $27, $20, $1c
183ea     1A 15 0D 05 
183ee     06 0C 0E 0A 
183f2     04 FF FA EE 
183f6     E2 D5 D0 CD | 	byte	$1a, $15, $0d, $05, $06, $0c, $0e, $0a, $04, $ff, $fa, $ee, $e2, $d5, $d0, $cd
183fa     CF D5 E1 EF 
183fe     FF 0F 19 26 
18402     2D 26 21 2F 
18406     44 48 39 2D | 	byte	$cf, $d5, $e1, $ef, $ff, $0f, $19, $26, $2d, $26, $21, $2f, $44, $48, $39, $2d
1840a     28 1A F8 D2 
1840e     BE B7 B6 B9 
18412     C7 DF F9 11 
18416     20 25 1F 0E | 	byte	$28, $1a, $f8, $d2, $be, $b7, $b6, $b9, $c7, $df, $f9, $11, $20, $25, $1f, $0e
1841a     00 F4 EA E6 
1841e     E9 F5 0A 1B 
18422     27 2D 2C 22 
18426     0D F5 DA C4 | 	byte	$00, $f4, $ea, $e6, $e9, $f5, $0a, $1b, $27, $2d, $2c, $22, $0d, $f5, $da, $c4
1842a     B7 B0 B4 BF 
1842e     D3 EB FF 19 
18432     2D 39 3C 39 
18436     3B 3D 36 28 | 	byte	$b7, $b0, $b4, $bf, $d3, $eb, $ff, $19, $2d, $39, $3c, $39, $3b, $3d, $36, $28
1843a     18 0C 00 EA 
1843e     D8 C9 C5 C3 
18442     C7 D1 DE EC 
18446     FF 13 25 28 | 	byte	$18, $0c, $00, $ea, $d8, $c9, $c5, $c3, $c7, $d1, $de, $ec, $ff, $13, $25, $28
1844a     20 1A 1E 20 
1844e     15 09 06 0C 
18452     0D 06 FF FB 
18456     F8 F1 E6 DC | 	byte	$20, $1a, $1e, $20, $15, $09, $06, $0c, $0d, $06, $ff, $fb, $f8, $f1, $e6, $dc
1845a     D6 D3 D2 D5 
1845e     DB E7 F5 05 
18462     0F 1F 2B 2C 
18466     28 33 49 52 | 	byte	$d6, $d3, $d2, $d5, $db, $e7, $f5, $05, $0f, $1f, $2b, $2c, $28, $33, $49, $52
1846a     44 34 29 1C 
1846e     F8 D4 B8 B0 
18472     AF B5 C3 DB 
18476     F7 0D 1F 29 | 	byte	$44, $34, $29, $1c, $f8, $d4, $b8, $b0, $af, $b5, $c3, $db, $f7, $0d, $1f, $29
1847a     26 18 04 FA 
1847e     F2 EA E8 F1 
18482     05 13 1D 24 
18486     25 20 10 FA | 	byte	$26, $18, $04, $fa, $f2, $ea, $e8, $f1, $05, $13, $1d, $24, $25, $20, $10, $fa
1848a     E2 CE C0 B7 
1848e     B5 BD CD E2 
18492     F9 0F 23 35 
18496     3D 3D 3E 41 | 	byte	$e2, $ce, $c0, $b7, $b5, $bd, $cd, $e2, $f9, $0f, $23, $35, $3d, $3d, $3e, $41
1849a     3D 30 1C 0D 
1849e     FF EC D7 C8 
184a2     C2 C3 C6 D1 
184a6     DF EF F9 07 | 	byte	$3d, $30, $1c, $0d, $ff, $ec, $d7, $c8, $c2, $c3, $c6, $d1, $df, $ef, $f9, $07
184aa     1C 26 20 1B 
184ae     23 29 21 14 
184b2     0D 0E 0A 00 
184b6     F5 F2 F2 EF | 	byte	$1c, $26, $20, $1b, $23, $29, $21, $14, $0d, $0e, $0a, $00, $f5, $f2, $f2, $ef
184ba     E8 E3 E0 DD 
184be     D9 D6 D7 DC 
184c2     E7 F5 FF 13 
184c6     26 32 35 3F | 	byte	$e8, $e3, $e0, $dd, $d9, $d6, $d7, $dc, $e7, $f5, $ff, $13, $26, $32, $35, $3f
184ca     52 5E 54 40 
184ce     2A 18 F8 D2 
184d2     B1 A4 A6 AF 
184d6     BF DB F9 0F | 	byte	$52, $5e, $54, $40, $2a, $18, $f8, $d2, $b1, $a4, $a6, $af, $bf, $db, $f9, $0f
184da     22 2B 2A 20 
184de     10 03 F8 F0 
184e2     EB F0 FD 09 
184e6     13 19 1D 1A | 	byte	$22, $2b, $2a, $20, $10, $03, $f8, $f0, $eb, $f0, $fd, $09, $13, $19, $1d, $1a
184ea     10 FE EC D9 
184ee     CB C0 BB BF 
184f2     CB DB F1 07 
184f6     1B 2F 3D 40 | 	byte	$10, $fe, $ec, $d9, $cb, $c0, $bb, $bf, $cb, $db, $f1, $07, $1b, $2f, $3d, $40
184fa     42 44 42 36 
184fe     24 10 00 EB 
18502     D8 C5 BF C2 
18506     C8 D2 DF F2 | 	byte	$42, $44, $42, $36, $24, $10, $00, $eb, $d8, $c5, $bf, $c2, $c8, $d2, $df, $f2
1850a     FE 07 0D 14 
1850e     1E 26 2A 28 
18512     26 22 1B 10 
18516     00 F5 F0 EB | 	byte	$fe, $07, $0d, $14, $1e, $26, $2a, $28, $26, $22, $1b, $10, $00, $f5, $f0, $eb
1851a     E9 E8 E9 EB 
1851e     EB E6 E0 DA 
18522     D6 D6 DB E5 
18526     F5 07 1F 31 | 	byte	$e9, $e8, $e9, $eb, $eb, $e6, $e0, $da, $d6, $d6, $db, $e5, $f5, $07, $1f, $31
1852a     3D 47 5B 66 
1852e     60 48 30 14 
18532     F4 D0 AD 9E 
18536     9F AB BD D7 | 	byte	$3d, $47, $5b, $66, $60, $48, $30, $14, $f4, $d0, $ad, $9e, $9f, $ab, $bd, $d7
1853a     F5 13 25 29 
1853e     27 22 1B 0B 
18542     FA F0 EF F3 
18546     F8 FE 08 13 | 	byte	$f5, $13, $25, $29, $27, $22, $1b, $0b, $fa, $f0, $ef, $f3, $f8, $fe, $08, $13
1854a     18 14 0D 02 
1854e     F4 E3 D4 C6 
18552     C0 BF C7 D6 
18556     E7 FD 15 29 | 	byte	$18, $14, $0d, $02, $f4, $e3, $d4, $c6, $c0, $bf, $c7, $d6, $e7, $fd, $15, $29
1855a     39 3F 45 47 
1855e     44 38 28 15 
18562     01 EC D8 C9 
18566     C1 C1 C8 D3 | 	byte	$39, $3f, $45, $47, $44, $38, $28, $15, $01, $ec, $d8, $c9, $c1, $c1, $c8, $d3
1856a     DF ED FF 08 
1856e     06 08 1B 2C 
18572     2F 27 25 29 
18576     25 10 FD F2 | 	byte	$df, $ed, $ff, $08, $06, $08, $1b, $2c, $2f, $27, $25, $29, $25, $10, $fd, $f2
1857a     EF EA E5 E6 
1857e     EA EF EE EB 
18582     E4 DD D6 D4 
18586     D7 DF EF 05 | 	byte	$ef, $ea, $e5, $e6, $ea, $ef, $ee, $eb, $e4, $dd, $d6, $d4, $d7, $df, $ef, $05
1858a     1B 2F 3E 4B 
1858e     59 61 5D 4D 
18592     34 18 F8 D4 
18596     B8 A6 A1 AB | 	byte	$1b, $2f, $3e, $4b, $59, $61, $5d, $4d, $34, $18, $f8, $d4, $b8, $a6, $a1, $ab
1859a     BD D5 F1 0C 
1859e     1F 28 28 24 
185a2     1C 0E FF F4 
185a6     EF F0 F3 FB | 	byte	$bd, $d5, $f1, $0c, $1f, $28, $28, $24, $1c, $0e, $ff, $f4, $ef, $f0, $f3, $fb
185aa     03 0F 14 15 
185ae     11 07 FA E9 
185b2     D9 CC C3 C1 
185b6     C7 D3 E3 F9 | 	byte	$03, $0f, $14, $15, $11, $07, $fa, $e9, $d9, $cc, $c3, $c1, $c7, $d3, $e3, $f9
185ba     11 25 33 3E 
185be     43 44 40 38 
185c2     2B 19 08 F2 
185c6     E1 D1 C8 C5 | 	byte	$11, $25, $33, $3e, $43, $44, $40, $38, $2b, $19, $08, $f2, $e1, $d1, $c8, $c5
185ca     C8 CF DC EB 
185ce     F5 FC 0A 16 
185d2     1D 1E 24 2B 
185d6     29 1D 14 0E | 	byte	$c8, $cf, $dc, $eb, $f5, $fc, $0a, $16, $1d, $1e, $24, $2b, $29, $1d, $14, $0e
185da     08 FC F2 ED 
185de     EF EF EE EB 
185e2     E9 E5 E0 DB 
185e6     D6 D7 DE E8 | 	byte	$08, $fc, $f2, $ed, $ef, $ef, $ee, $eb, $e9, $e5, $e0, $db, $d6, $d7, $de, $e8
185ea     F7 08 1C 28 
185ee     35 41 4B 4C 
185f2     4A 44 34 1C 
185f6     02 E8 D0 BD | 	byte	$f7, $08, $1c, $28, $35, $41, $4b, $4c, $4a, $44, $34, $1c, $02, $e8, $d0, $bd
185fa     B2 B2 BD D1 
185fe     E9 FB 0D 1F 
18602     28 22 15 08 
18606     00 F5 EB E8 | 	byte	$b2, $b2, $bd, $d1, $e9, $fb, $0d, $1f, $28, $22, $15, $08, $00, $f5, $eb, $e8
1860a     EF FD 09 12 
1860e     19 1D 1A 10 
18612     FC EC DA CB 
18616     C1 BF C5 D1 | 	byte	$ef, $fd, $09, $12, $19, $1d, $1a, $10, $fc, $ec, $da, $cb, $c1, $bf, $c5, $d1
1861a     E3 F9 0D 21 
1861e     2D 36 3B 3D 
18622     38 31 2A 1E 
18626     10 FE F0 E3 | 	byte	$e3, $f9, $0d, $21, $2d, $36, $3b, $3d, $38, $31, $2a, $1e, $10, $fe, $f0, $e3
1862a     D6 CD C9 CD 
1862e     D6 DD E6 FA 
18632     11 1F 21 1C 
18636     1B 1E 1C 10 | 	byte	$d6, $cd, $c9, $cd, $d6, $dd, $e6, $fa, $11, $1f, $21, $1c, $1b, $1e, $1c, $10
1863a     07 05 09 09 
1863e     06 01 FE FA 
18642     F4 E9 DD D6 
18646     D4 D3 D7 DF | 	byte	$07, $05, $09, $09, $06, $01, $fe, $fa, $f4, $e9, $dd, $d6, $d4, $d3, $d7, $df
1864a     EF FC 0A 18 
1864e     23 22 22 29 
18652     2F 2C 2A 2F 
18656     31 29 15 04 | 	byte	$ef, $fc, $0a, $18, $23, $22, $22, $29, $2f, $2c, $2a, $2f, $31, $29, $15, $04
1865a     F4 E4 D0 C4 
1865e     C5 CD D7 E9 
18662     FF 0F 16 16 
18666     11 04 F6 EA | 	byte	$f4, $e4, $d0, $c4, $c5, $cd, $d7, $e9, $ff, $0f, $16, $16, $11, $04, $f6, $ea
1866a     E7 E9 EF FD 
1866e     0F 1F 29 2B 
18672     24 18 04 F0 
18676     D8 C5 BD BD | 	byte	$e7, $e9, $ef, $fd, $0f, $1f, $29, $2b, $24, $18, $04, $f0, $d8, $c5, $bd, $bd
1867a     C3 D3 E5 F9 
1867e     0D 1E 27 2B 
18682     30 32 2E 28 
18686     24 21 19 0C | 	byte	$c3, $d3, $e5, $f9, $0d, $1e, $27, $2b, $30, $32, $2e, $28, $24, $21, $19, $0c
1868a     00 F4 E8 D9 
1868e     D0 CA C8 CF 
18692     E3 FC 0D 15 
18696     1D 25 1C 08 | 	byte	$00, $f4, $e8, $d9, $d0, $ca, $c8, $cf, $e3, $fc, $0d, $15, $1d, $25, $1c, $08
1869a     FA FC 03 04 
1869e     04 0C 1A 1F 
186a2     16 08 F8 EA 
186a6     DA CD C6 CB | 	byte	$fa, $fc, $03, $04, $04, $0c, $1a, $1f, $16, $08, $f8, $ea, $da, $cd, $c6, $cb
186aa     D9 EB FD 0F 
186ae     1C 26 29 1C 
186b2     0E 0B 0F 0A 
186b6     07 13 27 31 | 	byte	$d9, $eb, $fd, $0f, $1c, $26, $29, $1c, $0e, $0b, $0f, $0a, $07, $13, $27, $31
186ba     2A 20 18 0D 
186be     F8 E2 D1 CD 
186c2     D3 DD E9 F3 
186c6     FD 03 02 F9 | 	byte	$2a, $20, $18, $0d, $f8, $e2, $d1, $cd, $d3, $dd, $e9, $f3, $fd, $03, $02, $f9
186ca     EE E3 E1 E9 
186ce     F6 03 15 27 
186d2     37 3A 32 21 
186d6     0D F4 DB C6 | 	byte	$ee, $e3, $e1, $e9, $f6, $03, $15, $27, $37, $3a, $32, $21, $0d, $f4, $db, $c6
186da     BB BA C1 CF 
186de     DF F5 09 17 
186e2     1F 21 26 29 
186e6     26 20 1F 22 | 	byte	$bb, $ba, $c1, $cf, $df, $f5, $09, $17, $1f, $21, $26, $29, $26, $20, $1f, $22
186ea     22 18 0D 01 
186ee     F6 E9 D8 C8 
186f2     C8 D7 E7 F1 
186f6     FE 0C 19 19 | 	byte	$22, $18, $0d, $01, $f6, $e9, $d8, $c8, $c8, $d7, $e7, $f1, $fe, $0c, $19, $19
186fa     0E 04 F9 F1 
186fe     F2 FD 0A 15 
18702     1C 23 24 18 
18706     04 ED DA D0 | 	byte	$0e, $04, $f9, $f1, $f2, $fd, $0a, $15, $1c, $23, $24, $18, $04, $ed, $da, $d0
1870a     C9 CB D9 ED 
1870e     03 18 23 2A 
18712     29 19 04 FB 
18716     FB F7 F0 FB | 	byte	$c9, $cb, $d9, $ed, $03, $18, $23, $2a, $29, $19, $04, $fb, $fb, $f7, $f0, $fb
1871a     15 2E 33 2E 
1871e     2D 2B 18 FD 
18722     E4 DB DB D9 
18726     D8 DE E7 ED | 	byte	$15, $2e, $33, $2e, $2d, $2b, $18, $fd, $e4, $db, $db, $d9, $d8, $de, $e7, $ed
1872a     EC E8 E4 E3 
1872e     E3 E8 F5 07 
18732     1D 2D 3A 3F 
18736     3B 2D 14 FC | 	byte	$ec, $e8, $e4, $e3, $e3, $e8, $f5, $07, $1d, $2d, $3a, $3f, $3b, $2d, $14, $fc
1873a     E2 D0 C0 BA 
1873e     BF CB DB ED 
18742     FF 0F 19 1C 
18746     1F 24 24 1E | 	byte	$e2, $d0, $c0, $ba, $bf, $cb, $db, $ed, $ff, $0f, $19, $1c, $1f, $24, $24, $1e
1874a     1C 21 24 1F 
1874e     12 08 02 F3 
18752     E0 D0 D3 DF 
18756     E6 EB F5 03 | 	byte	$1c, $21, $24, $1f, $12, $08, $02, $f3, $e0, $d0, $d3, $df, $e6, $eb, $f5, $03
1875a     0C 09 02 FD 
1875e     FD F8 F1 F4 
18762     06 17 21 21 
18766     20 1D 11 FA | 	byte	$0c, $09, $02, $fd, $fd, $f8, $f1, $f4, $06, $17, $21, $21, $20, $1d, $11, $fa
1876a     E5 D6 D2 D4 
1876e     DD EB FF 13 
18772     21 27 26 19 
18776     02 F5 F5 F2 | 	byte	$e5, $d6, $d2, $d4, $dd, $eb, $ff, $13, $21, $27, $26, $19, $02, $f5, $f5, $f2
1877a     E8 EB 05 23 
1877e     30 2F 30 36 
18782     2E 16 FC EE 
18786     E8 E0 D5 D3 | 	byte	$e8, $eb, $05, $23, $30, $2f, $30, $36, $2e, $16, $fc, $ee, $e8, $e0, $d5, $d3
1878a     D6 D9 DA D9 
1878e     DA DD E3 EB 
18792     F6 07 1B 2E 
18796     3B 3F 3C 32 | 	byte	$d6, $d9, $da, $d9, $da, $dd, $e3, $eb, $f6, $07, $1b, $2e, $3b, $3f, $3c, $32
1879a     20 08 F0 D8 
1879e     C9 C1 BF C7 
187a2     D4 E3 F5 05 
187a6     10 15 1B 21 | 	byte	$20, $08, $f0, $d8, $c9, $c1, $bf, $c7, $d4, $e3, $f5, $05, $10, $15, $1b, $21
187aa     24 1E 1A 1E 
187ae     23 20 15 0B 
187b2     06 FA E8 DB 
187b6     DD E5 E7 E8 | 	byte	$24, $1e, $1a, $1e, $23, $20, $15, $0b, $06, $fa, $e8, $db, $dd, $e5, $e7, $e8
187ba     EF FA FF FD 
187be     FA F9 F8 F9 
187c2     F9 F9 FF 0D 
187c6     1C 22 1F 17 | 	byte	$ef, $fa, $ff, $fd, $fa, $f9, $f8, $f9, $f9, $f9, $ff, $0d, $1c, $22, $1f, $17
187ca     12 08 F6 E4 
187ce     D9 DB E3 ED 
187d2     FD 0D 19 21 
187d6     23 18 05 F8 | 	byte	$12, $08, $f6, $e4, $d9, $db, $e3, $ed, $fd, $0d, $19, $21, $23, $18, $05, $f8
187da     F6 F4 EA E3 
187de     F3 15 27 29 
187e2     2B 34 37 28 
187e6     0E FF F5 EB | 	byte	$f6, $f4, $ea, $e3, $f3, $15, $27, $29, $2b, $34, $37, $28, $0e, $ff, $f5, $eb
187ea     DC D1 CF CF 
187ee     CE CF D2 D7 
187f2     E1 EB F9 07 
187f6     19 2B 3A 3E | 	byte	$dc, $d1, $cf, $cf, $ce, $cf, $d2, $d7, $e1, $eb, $f9, $07, $19, $2b, $3a, $3e
187fa     3B 34 26 14 
187fe     F9 E4 D4 C9 
18802     C5 C7 D0 DE 
18806     ED FD 09 0F | 	byte	$3b, $34, $26, $14, $f9, $e4, $d4, $c9, $c5, $c7, $d0, $de, $ed, $fd, $09, $0f
1880a     17 1E 22 1F 
1880e     1A 1A 1F 1F 
18812     16 0C 07 00 
18816     F0 E4 E3 E9 | 	byte	$17, $1e, $22, $1f, $1a, $1a, $1f, $1f, $16, $0c, $07, $00, $f0, $e4, $e3, $e9
1881a     EB E9 ED F5 
1881e     FB F8 F5 F5 
18822     F7 F8 FB FD 
18826     FF 06 13 1E | 	byte	$eb, $e9, $ed, $f5, $fb, $f8, $f5, $f5, $f7, $f8, $fb, $fd, $ff, $06, $13, $1e
1882a     1F 18 10 0B 
1882e     00 F1 E2 DF 
18832     E5 ED F9 05 
18836     12 1C 20 18 | 	byte	$1f, $18, $10, $0b, $00, $f1, $e2, $df, $e5, $ed, $f9, $05, $12, $1c, $20, $18
1883a     0A FF FC F8 
1883e     F0 E5 E9 FF 
18842     17 1F 23 2B 
18846     34 2F 1E 0C | 	byte	$0a, $ff, $fc, $f8, $f0, $e5, $e9, $ff, $17, $1f, $23, $2b, $34, $2f, $1e, $0c
1884a     01 F6 E6 D8 
1884e     D1 CE CC CC 
18852     CF D7 DF EB 
18856     F9 05 12 22 | 	byte	$01, $f6, $e6, $d8, $d1, $ce, $cc, $cc, $cf, $d7, $df, $eb, $f9, $05, $12, $22
1885a     2F 37 35 2F 
1885e     26 16 04 F0 
18862     DE D4 CE CE 
18866     D4 DD EB F8 | 	byte	$2f, $37, $35, $2f, $26, $16, $04, $f0, $de, $d4, $ce, $ce, $d4, $dd, $eb, $f8
1886a     03 0B 11 19 
1886e     1D 1C 18 16 
18872     17 19 15 0C 
18876     07 03 FA EC | 	byte	$03, $0b, $11, $19, $1d, $1c, $18, $16, $17, $19, $15, $0c, $07, $03, $fa, $ec
1887a     E7 EB EF EF 
1887e     ED F3 F9 FA 
18882     F7 F5 F7 F8 
18886     FB FE FF 02 | 	byte	$e7, $eb, $ef, $ef, $ed, $f3, $f9, $fa, $f7, $f5, $f7, $f8, $fb, $fe, $ff, $02
1888a     09 17 1D 18 
1888e     10 0B 04 F8 
18892     E9 E2 E3 EC 
18896     F5 FF 0B 16 | 	byte	$09, $17, $1d, $18, $10, $0b, $04, $f8, $e9, $e2, $e3, $ec, $f5, $ff, $0b, $16
1889a     1E 19 0E 08 
1889e     03 FF F5 EA 
188a2     E8 F3 05 13 
188a6     19 21 2B 2F | 	byte	$1e, $19, $0e, $08, $03, $ff, $f5, $ea, $e8, $f3, $05, $13, $19, $21, $2b, $2f
188aa     25 15 08 FF 
188ae     F2 E2 D6 D1 
188b2     D1 D1 D4 D9 
188b6     E1 ED F8 03 | 	byte	$25, $15, $08, $ff, $f2, $e2, $d6, $d1, $d1, $d1, $d4, $d9, $e1, $ed, $f8, $03
188ba     0D 19 24 2D 
188be     2D 28 20 17 
188c2     08 F8 E8 DD 
188c6     D7 D6 D9 DF | 	byte	$0d, $19, $24, $2d, $2d, $28, $20, $17, $08, $f8, $e8, $dd, $d7, $d6, $d9, $df
188ca     EB F7 FF 07 
188ce     0E 15 19 19 
188d2     14 11 11 12 
188d6     11 0C 06 04 | 	byte	$eb, $f7, $ff, $07, $0e, $15, $19, $19, $14, $11, $11, $12, $11, $0c, $06, $04
188da     01 F6 EC E9 
188de     EF F3 F1 F0 
188e2     F7 FD FE FB 
188e6     F9 FA FD FF | 	byte	$01, $f6, $ec, $e9, $ef, $f3, $f1, $f0, $f7, $fd, $fe, $fb, $f9, $fa, $fd, $ff
188ea     FE FD 04 11 
188ee     19 16 11 0D 
188f2     08 FD EE E4 
188f6     E3 E7 F0 F9 | 	byte	$fe, $fd, $04, $11, $19, $16, $11, $0d, $08, $fd, $ee, $e4, $e3, $e7, $f0, $f9
188fa     04 11 1C 1C 
188fe     13 0F 0D 06 
18902     FC F0 EB EE 
18906     F8 05 10 17 | 	byte	$04, $11, $1c, $1c, $13, $0f, $0d, $06, $fc, $f0, $eb, $ee, $f8, $05, $10, $17
1890a     21 28 26 1A 
1890e     0C 00 F8 EA 
18912     DD D5 D5 D9 
18916     DB DF E6 F1 | 	byte	$21, $28, $26, $1a, $0c, $00, $f8, $ea, $dd, $d5, $d5, $d9, $db, $df, $e6, $f1
1891a     FB 01 09 10 
1891e     1B 21 22 1F 
18922     1B 13 08 FB 
18926     EE E4 DF DC | 	byte	$fb, $01, $09, $10, $1b, $21, $22, $1f, $1b, $13, $08, $fb, $ee, $e4, $df, $dc
1892a     DE E3 EB F7 
1892e     FF 05 0B 13 
18932     17 15 13 10 
18936     0D 0C 0B 0A | 	byte	$de, $e3, $eb, $f7, $ff, $05, $0b, $13, $17, $15, $13, $10, $0d, $0c, $0b, $0a
1893a     08 03 02 FE 
1893e     F5 EC EA EF 
18942     F3 F3 F4 FB 
18946     02 04 01 FE | 	byte	$08, $03, $02, $fe, $f5, $ec, $ea, $ef, $f3, $f3, $f4, $fb, $02, $04, $01, $fe
1894a     FF 00 FD FA 
1894e     FD 0A 12 13 
18952     11 0E 0B 00 
18956     F2 E8 E2 E3 | 	byte	$ff, $00, $fd, $fa, $fd, $0a, $12, $13, $11, $0e, $0b, $00, $f2, $e8, $e2, $e3
1895a     E9 F1 FD 09 
1895e     16 1A 16 14 
18962     15 10 02 F9 
18966     F3 F0 F1 FB | 	byte	$e9, $f1, $fd, $09, $16, $1a, $16, $14, $15, $10, $02, $f9, $f3, $f0, $f1, $fb
1896a     06 10 17 1D 
1896e     21 1C 10 00 
18972     F7 EE E5 DC 
18976     DA DD E5 EA | 	byte	$06, $10, $17, $1d, $21, $1c, $10, $00, $f7, $ee, $e5, $dc, $da, $dd, $e5, $ea
1897a     EF F6 FF 03 
1897e     06 0B 11 15 
18982     16 15 13 0F 
18986     06 FC F2 EB | 	byte	$ef, $f6, $ff, $03, $06, $0b, $11, $15, $16, $15, $13, $0f, $06, $fc, $f2, $eb
1898a     E5 E3 E3 E7 
1898e     EF F6 FE 03 
18992     0A 11 14 13 
18996     10 0F 0C 07 | 	byte	$e5, $e3, $e3, $e7, $ef, $f6, $fe, $03, $0a, $11, $14, $13, $10, $0f, $0c, $07
1899a     05 06 06 04 
1899e     00 FF FC F5 
189a2     EC EA EF F5 
189a6     F7 F8 FF 07 | 	byte	$05, $06, $06, $04, $00, $ff, $fc, $f5, $ec, $ea, $ef, $f5, $f7, $f8, $ff, $07
189aa     0B 07 03 03 
189ae     FF FB FD 05 
189b2     0C 0D 0E 0E 
189b6     0B 02 F5 EC | 	byte	$0b, $07, $03, $03, $ff, $fb, $fd, $05, $0c, $0d, $0e, $0e, $0b, $02, $f5, $ec
189ba     E5 E4 E6 ED 
189be     F7 FF 0F 13 
189c2     13 15 19 17 
189c6     0C 02 FE F8 | 	byte	$e5, $e4, $e6, $ed, $f7, $ff, $0f, $13, $13, $15, $19, $17, $0c, $02, $fe, $f8
189ca     F4 F6 FF 09 
189ce     0E 11 15 17 
189d2     10 02 F6 EE 
189d6     E9 E3 E1 E3 | 	byte	$f4, $f6, $ff, $09, $0e, $11, $15, $17, $10, $02, $f6, $ee, $e9, $e3, $e1, $e3
189da     EB F4 F9 FF 
189de     04 07 07 09 
189e2     0B 0C 0B 0B 
189e6     09 07 01 FB | 	byte	$eb, $f4, $f9, $ff, $04, $07, $07, $09, $0b, $0c, $0b, $0b, $09, $07, $01, $fb
189ea     F6 F0 EC EA 
189ee     EA EC F2 F8 
189f2     FD FF 07 0E 
189f6     13 12 10 0F | 	byte	$f6, $f0, $ec, $ea, $ea, $ec, $f2, $f8, $fd, $ff, $07, $0e, $13, $12, $10, $0f
189fa     0C 08 03 03 
189fe     03 02 FF FE 
18a02     FD FA F5 ED 
18a06     EB EF F6 FB | 	byte	$0c, $08, $03, $03, $03, $02, $ff, $fe, $fd, $fa, $f5, $ed, $eb, $ef, $f6, $fb
18a0a     FE 05 0B 0F 
18a0e     0D 08 01 FE 
18a12     FF 04 05 05 
18a16     07 0A 09 00 | 	byte	$fe, $05, $0b, $0f, $0d, $08, $01, $fe, $ff, $04, $05, $05, $07, $0a, $09, $00
18a1a     F8 F0 EC E9 
18a1e     E8 EB F1 FA 
18a22     05 0A 0B 0F 
18a26     17 1A 14 0B | 	byte	$f8, $f0, $ec, $e9, $e8, $eb, $f1, $fa, $05, $0a, $0b, $0f, $17, $1a, $14, $0b
18a2a     09 06 FE F8 
18a2e     FA 02 07 07 
18a32     09 0B 0A 02 
18a36     F8 F0 E9 E9 | 	byte	$09, $06, $fe, $f8, $fa, $02, $07, $07, $09, $0b, $0a, $02, $f8, $f0, $e9, $e9
18a3a     E9 EC F1 F9 
18a3e     FF 09 0B 0A 
18a42     09 0A 09 05 
18a46     01 FF FF FE | 	byte	$e9, $ec, $f1, $f9, $ff, $09, $0b, $0a, $09, $0a, $09, $05, $01, $ff, $ff, $fe
18a4a     FB F8 F6 F5 
18a4e     F3 F1 F1 F3 
18a52     F5 F9 FD FF 
18a56     03 0A 0F 10 | 	byte	$fb, $f8, $f6, $f5, $f3, $f1, $f1, $f3, $f5, $f9, $fd, $ff, $03, $0a, $0f, $10
18a5a     0E 0F 0E 09 
18a5e     04 FF FF FF 
18a62     FD FC 00 00 
18a66     00 00 F1 EE | 	byte	$0e, $0f, $0e, $09, $04, $ff, $ff, $ff, $fd, $fc, $00, $00, $00, $00, $f1, $ee
18a6a     F1 F9 FF 03 
18a6e     07 0D 11 0F 
18a72     05 03 05 07 
18a76     03 00 01 04 | 	byte	$f1, $f9, $ff, $03, $07, $0d, $11, $0f, $05, $03, $05, $07, $03, $00, $01, $04
18a7a     03 FD F8 F4 
18a7e     F2 F0 ED EF 
18a82     F2 F7 FE 01 
18a86     03 07 0F 17 | 	byte	$03, $fd, $f8, $f4, $f2, $f0, $ed, $ef, $f2, $f7, $fe, $01, $03, $07, $0f, $17
18a8a     15 11 11 11 
18a8e     0A FF FB FF 
18a92     02 00 FE FF 
18a96     02 FF F8 F1 | 	byte	$15, $11, $11, $11, $0a, $ff, $fb, $ff, $02, $00, $fe, $ff, $02, $ff, $f8, $f1
18a9a     EE EC ED F0 
18a9e     F6 FC 04 0B 
18aa2     0F 0F 0E 0C 
18aa6     0A 02 FD F9 | 	byte	$ee, $ec, $ed, $f0, $f6, $fc, $04, $0b, $0f, $0f, $0e, $0c, $0a, $02, $fd, $f9
18aaa     F8 F7 F4 F5 
18aae     F6 F7 F8 F8 
18ab2     F9 F9 FA FC 
18ab6     FD FD FF 05 | 	byte	$f8, $f7, $f4, $f5, $f6, $f7, $f8, $f8, $f9, $f9, $fa, $fc, $fd, $fd, $ff, $05
18aba     0A 0C 0D 0E 
18abe     0E 0B 04 01 
18ac2     FF FF FC FA 
18ac6     FA FB FA F8 | 	byte	$0a, $0c, $0d, $0e, $0e, $0b, $04, $01, $ff, $ff, $fc, $fa, $fa, $fb, $fa, $f8
18aca     F7 F4 F3 F8 
18ace     FD 03 06 0B 
18ad2     0E 0D 0B 09 
18ad6     0A 08 03 FF | 	byte	$f7, $f4, $f3, $f8, $fd, $03, $06, $0b, $0e, $0d, $0b, $09, $0a, $08, $03, $ff
18ada     FF FF FB F8 
18ade     F6 F6 F5 F3 
18ae2     F3 F5 F6 F8 
18ae6     FB FC FC FF | 	byte	$ff, $ff, $fb, $f8, $f6, $f6, $f5, $f3, $f3, $f5, $f6, $f8, $fb, $fc, $fc, $ff
18aea     09 11 14 15 
18aee     16 18 12 08 
18af2     FF FE FF FC 
18af6     F8 F8 FC FC | 	byte	$09, $11, $14, $15, $16, $18, $12, $08, $ff, $fe, $ff, $fc, $f8, $f8, $fc, $fc
18afa     F8 F4 F1 F1 
18afe     F1 F4 F9 FF 
18b02     05 0B 0F 11 
18b06     11 0D 08 02 | 	byte	$f8, $f4, $f1, $f1, $f1, $f4, $f9, $ff, $05, $0b, $0f, $11, $11, $0d, $08, $02
18b0a     FB F5 F1 EF 
18b0e     EF F1 F4 F8 
18b12     FA FD FF FF 
18b16     FE FF FE FD | 	byte	$fb, $f5, $f1, $ef, $ef, $f1, $f4, $f8, $fa, $fd, $ff, $ff, $fe, $ff, $fe, $fd
18b1a     FE 01 06 09 
18b1e     0B 0C 0D 0C 
18b22     06 01 FE FD 
18b26     FB F9 F9 FA | 	byte	$fe, $01, $06, $09, $0b, $0c, $0d, $0c, $06, $01, $fe, $fd, $fb, $f9, $f9, $fa
18b2a     00 00 00 00 
18b2e     EC F4 FE 08 
18b32     11 14 12 0A 
18b36     00 F4 EB E5 | 	byte	$00, $00, $00, $00, $ec, $f4, $fe, $08, $11, $14, $12, $0a, $00, $f4, $eb, $e5
18b3a     E8 EF FC 09 
18b3e     14 19 18 0E 
18b42     02 F3 E7 E1 
18b46     E3 EC FA 09 | 	byte	$e8, $ef, $fc, $09, $14, $19, $18, $0e, $02, $f3, $e7, $e1, $e3, $ec, $fa, $09
18b4a     18 1F 1D 15 
18b4e     04 F3 E4 DB 
18b52     DC E7 F6 09 
18b56     1C 25 25 1B | 	byte	$18, $1f, $1d, $15, $04, $f3, $e4, $db, $dc, $e7, $f6, $09, $1c, $25, $25, $1b
18b5a     08 F3 E0 D5 
18b5e     D4 DF F4 09 
18b62     20 2C 2D 23 
18b66     0D F3 DD CC | 	byte	$08, $f3, $e0, $d5, $d4, $df, $f4, $09, $20, $2c, $2d, $23, $0d, $f3, $dd, $cc
18b6a     CA D7 EC 08 
18b6e     23 34 38 2B 
18b72     15 F6 D8 C2 
18b76     BE C9 E7 08 | 	byte	$ca, $d7, $ec, $08, $23, $34, $38, $2b, $15, $f6, $d8, $c2, $be, $c9, $e7, $08
18b7a     28 3F 44 38 
18b7e     1C F8 D5 BA 
18b82     B1 BD D9 FF 
18b86     29 4A 53 46 | 	byte	$28, $3f, $44, $38, $1c, $f8, $d5, $ba, $b1, $bd, $d9, $ff, $29, $4a, $53, $46
18b8a     25 00 CD AD 
18b8e     A1 AD CF FF 
18b92     2F 55 63 59 
18b96     37 05 CD A2 | 	byte	$25, $00, $cd, $ad, $a1, $ad, $cf, $ff, $2f, $55, $63, $59, $37, $05, $cd, $a2
18b9a     8E 98 C4 FA 
18b9e     38 65 79 6C 
18ba2     47 0A CD 97 
18ba6     81 8E B3 EA | 	byte	$8e, $98, $c4, $fa, $38, $65, $79, $6c, $47, $0a, $cd, $97, $81, $8e, $b3, $ea
18baa     29 65 79 71 
18bae     4B 15 D0 9F 
18bb2     84 8C B3 EA 
18bb6     29 5D 75 70 | 	byte	$29, $65, $79, $71, $4b, $15, $d0, $9f, $84, $8c, $b3, $ea, $29, $5d, $75, $70
18bba     4E 15 D7 A2 
18bbe     8A 8C B3 EA 
18bc2     1F 55 74 6E 
18bc6     51 15 E0 AA | 	byte	$4e, $15, $d7, $a2, $8a, $8c, $b3, $ea, $1f, $55, $74, $6e, $51, $15, $e0, $aa
18bca     8B 8E A9 DF 
18bce     1F 53 70 6E 
18bd2     51 20 E0 AD 
18bd6     8C 8E A9 DF | 	byte	$8b, $8e, $a9, $df, $1f, $53, $70, $6e, $51, $20, $e0, $ad, $8c, $8e, $a9, $df
18bda     14 4F 6A 6E 
18bde     56 20 EB AF 
18be2     92 8F A9 DF 
18be6     14 47 69 6D | 	byte	$14, $4f, $6a, $6e, $56, $20, $eb, $af, $92, $8f, $a9, $df, $14, $47, $69, $6d
18bea     56 25 EB B5 
18bee     94 8F A9 D4 
18bf2     09 44 63 6C 
18bf6     56 25 F0 BA | 	byte	$56, $25, $eb, $b5, $94, $8f, $a9, $d4, $09, $44, $63, $6c, $56, $25, $f0, $ba
18bfa     97 90 A9 D4 
18bfe     0E 3F 5F 69 
18c02     56 2B F6 C0 
18c06     9D 93 A6 CF | 	byte	$97, $90, $a9, $d4, $0e, $3f, $5f, $69, $56, $2b, $f6, $c0, $9d, $93, $a6, $cf
18c0a     FF 3A 5A 66 
18c0e     56 30 00 CA 
18c12     A1 94 A3 C9 
18c16     FF 34 55 65 | 	byte	$ff, $3a, $5a, $66, $56, $30, $00, $ca, $a1, $94, $a3, $c9, $ff, $34, $55, $65
18c1a     59 30 00 D0 
18c1e     A6 97 A3 C4 
18c22     FA 29 55 62 
18c26     59 38 05 D5 | 	byte	$59, $30, $00, $d0, $a6, $97, $a3, $c4, $fa, $29, $55, $62, $59, $38, $05, $d5
18c2a     AA 9A A1 C4 
18c2e     EF 27 4D 61 
18c32     5B 3B 0A DB 
18c36     AF 9D A3 BE | 	byte	$aa, $9a, $a1, $c4, $ef, $27, $4d, $61, $5b, $3b, $0a, $db, $af, $9d, $a3, $be
18c3a     EA 1F 4A 5E 
18c3e     5B 40 15 E0 
18c42     B8 9F A2 BE 
18c46     E8 1C 44 5A | 	byte	$ea, $1f, $4a, $5e, $5b, $40, $15, $e0, $b8, $9f, $a2, $be, $e8, $1c, $44, $5a
18c4a     5A 43 15 EB 
18c4e     BA A5 A2 BC 
18c52     E4 14 3E 57 
18c56     59 46 1B EB | 	byte	$5a, $43, $15, $eb, $ba, $a5, $a2, $bc, $e4, $14, $3e, $57, $59, $46, $1b, $eb
18c5a     C2 A6 A3 B6 
18c5e     DF 09 3A 53 
18c62     57 46 1D F2 
18c66     C5 AA A5 B3 | 	byte	$c2, $a6, $a3, $b6, $df, $09, $3a, $53, $57, $46, $1d, $f2, $c5, $aa, $a5, $b3
18c6a     DC 04 33 4E 
18c6e     56 48 25 00 
18c72     D0 AE A5 B3 
18c76     D1 FE 29 4A | 	byte	$dc, $04, $33, $4e, $56, $48, $25, $00, $d0, $ae, $a5, $b3, $d1, $fe, $29, $4a
18c7a     55 4B 2B 00 
18c7e     D5 B2 A6 B1 
18c82     CF FA 24 44 
18c86     52 4B 30 05 | 	byte	$55, $4b, $2b, $00, $d5, $b2, $a6, $b1, $cf, $fa, $24, $44, $52, $4b, $30, $05
18c8a     DB BA AA AE 
18c8e     C9 EF 1F 3F 
18c92     51 4B 31 0A 
18c96     E1 C0 AB AE | 	byte	$db, $ba, $aa, $ae, $c9, $ef, $1f, $3f, $51, $4b, $31, $0a, $e1, $c0, $ab, $ae
18c9a     C6 EA 14 3C 
18c9e     4E 4E 36 15 
18ca2     EB C5 AE AE 
18ca6     C4 EA 11 34 | 	byte	$c6, $ea, $14, $3c, $4e, $4e, $36, $15, $eb, $c5, $ae, $ae, $c4, $ea, $11, $34
18caa     4D 4E 3B 18 
18cae     F3 CA B2 AE 
18cb2     C1 E1 0C 2F 
18cb6     48 4E 40 1D | 	byte	$4d, $4e, $3b, $18, $f3, $ca, $b2, $ae, $c1, $e1, $0c, $2f, $48, $4e, $40, $1d
18cba     F8 D0 B6 AF 
18cbe     BD DC 06 29 
18cc2     43 4D 3E 20 
18cc6     00 D5 BC B1 | 	byte	$f8, $d0, $b6, $af, $bd, $dc, $06, $29, $43, $4d, $3e, $20, $00, $d5, $bc, $b1
18cca     BC D4 FE 24 
18cce     3F 4A 40 25 
18cd2     02 DB C0 B3 
18cd6     BA D1 F7 19 | 	byte	$bc, $d4, $fe, $24, $3f, $4a, $40, $25, $02, $db, $c0, $b3, $ba, $d1, $f7, $19
18cda     3A 47 43 2B 
18cde     0A E5 C6 B5 
18ce2     B9 CC EF 11 
18ce6     34 44 43 30 | 	byte	$3a, $47, $43, $2b, $0a, $e5, $c6, $b5, $b9, $cc, $ef, $11, $34, $44, $43, $30
18cea     10 EE CA BA 
18cee     B9 C9 EA 0C 
18cf2     29 3F 43 33 
18cf6     16 F3 D5 BD | 	byte	$10, $ee, $ca, $ba, $b9, $c9, $ea, $0c, $29, $3f, $43, $33, $16, $f3, $d5, $bd
18cfa     B9 C6 E4 FF 
18cfe     27 3C 42 36 
18d02     1D FB DB C1 
18d06     BA C5 DC FC | 	byte	$b9, $c6, $e4, $ff, $27, $3c, $42, $36, $1d, $fb, $db, $c1, $ba, $c5, $dc, $fc
18d0a     1F 37 40 38 
18d0e     21 00 E0 C5 
18d12     BC C2 D9 F7 
18d16     19 31 3E 38 | 	byte	$1f, $37, $40, $38, $21, $00, $e0, $c5, $bc, $c2, $d9, $f7, $19, $31, $3e, $38
18d1a     25 05 E8 CC 
18d1e     C0 C2 D4 EF 
18d22     11 29 3B 3A 
18d26     2B 0D EC D5 | 	byte	$25, $05, $e8, $cc, $c0, $c2, $d4, $ef, $11, $29, $3b, $3a, $2b, $0d, $ec, $d5
18d2a     C2 C1 D0 EC 
18d2e     09 28 37 3A 
18d32     2D 15 F3 D8 
18d36     C5 C2 D0 E7 | 	byte	$c2, $c1, $d0, $ec, $09, $28, $37, $3a, $2d, $15, $f3, $d8, $c5, $c2, $d0, $e7
18d3a     FF 21 34 38 
18d3e     30 18 00 E0 
18d42     CC C4 CC E3 
18d46     FE 1B 2F 37 | 	byte	$ff, $21, $34, $38, $30, $18, $00, $e0, $cc, $c4, $cc, $e3, $fe, $1b, $2f, $37
18d4a     30 20 01 E7 
18d4e     D0 C5 CC DC 
18d52     F4 14 29 34 
18d56     31 21 0A EC | 	byte	$30, $20, $01, $e7, $d0, $c5, $cc, $dc, $f4, $14, $29, $34, $31, $21, $0a, $ec
18d5a     D5 C8 C9 D9 
18d5e     F0 0C 24 31 
18d62     31 24 0E F6 
18d66     DB CC C9 D4 | 	byte	$d5, $c8, $c9, $d9, $f0, $0c, $24, $31, $31, $24, $0e, $f6, $db, $cc, $c9, $d4
18d6a     EA 04 1F 2D 
18d6e     31 28 12 F8 
18d72     E1 D0 CA D3 
18d76     E4 FF 16 29 | 	byte	$ea, $04, $1f, $2d, $31, $28, $12, $f8, $e1, $d0, $ca, $d3, $e4, $ff, $16, $29
18d7a     2F 2B 18 00 
18d7e     E5 D5 CC D1 
18d82     E1 FA 11 24 
18d86     2D 2B 1B 05 | 	byte	$2f, $2b, $18, $00, $e5, $d5, $cc, $d1, $e1, $fa, $11, $24, $2d, $2b, $1b, $05
18d8a     EE D8 CF D0 
18d8e     DC F2 0C 20 
18d92     29 2B 20 08 
18d96     F2 DD D1 D1 | 	byte	$ee, $d8, $cf, $d0, $dc, $f2, $0c, $20, $29, $2b, $20, $08, $f2, $dd, $d1, $d1
18d9a     DB EF 04 19 
18d9e     27 29 20 10 
18da2     F8 E3 D5 D1 
18da6     D9 EA FF 14 | 	byte	$db, $ef, $04, $19, $27, $29, $20, $10, $f8, $e3, $d5, $d1, $d9, $ea, $ff, $14
18daa     23 28 23 12 
18dae     00 E8 DB D4 
18db2     D8 E4 FA 0D 
18db6     1F 27 24 18 | 	byte	$23, $28, $23, $12, $00, $e8, $db, $d4, $d8, $e4, $fa, $0d, $1f, $27, $24, $18
18dba     04 F2 DF D7 
18dbe     D7 E1 F4 08 
18dc2     1B 24 24 1B 
18dc6     0A F6 E5 D9 | 	byte	$04, $f2, $df, $d7, $d7, $e1, $f4, $08, $1b, $24, $24, $1b, $0a, $f6, $e5, $d9
18dca     D7 DF EF 04 
18dce     14 21 24 1C 
18dd2     0E FB EB DD 
18dd6     D8 DD EC FC | 	byte	$d7, $df, $ef, $04, $14, $21, $24, $1c, $0e, $fb, $eb, $dd, $d8, $dd, $ec, $fc
18dda     0E 1C 23 1D 
18dde     11 01 EF E0 
18de2     DB DC E8 F7 
18de6     09 18 20 1F | 	byte	$0e, $1c, $23, $1d, $11, $01, $ef, $e0, $db, $dc, $e8, $f7, $09, $18, $20, $1f
18dea     15 05 F3 E5 
18dee     DC DC E5 F4 
18df2     04 14 1C 1F 
18df6     16 09 FA EB | 	byte	$15, $05, $f3, $e5, $dc, $dc, $e5, $f4, $04, $14, $1c, $1f, $16, $09, $fa, $eb
18dfa     DF DD E3 EF 
18dfe     FF 0E 19 1D 
18e02     18 0C FE EE 
18e06     E3 DD E1 EC | 	byte	$df, $dd, $e3, $ef, $ff, $0e, $19, $1d, $18, $0c, $fe, $ee, $e3, $dd, $e1, $ec
18e0a     FA 09 15 1B 
18e0e     18 10 02 F3 
18e12     E7 E0 E1 EA 
18e16     F7 05 11 19 | 	byte	$fa, $09, $15, $1b, $18, $10, $02, $f3, $e7, $e0, $e1, $ea, $f7, $05, $11, $19
18e1a     19 11 06 F7 
18e1e     EB E3 E1 E8 
18e22     F3 01 0E 16 
18e26     18 14 09 FE | 	byte	$19, $11, $06, $f7, $eb, $e3, $e1, $e8, $f3, $01, $0e, $16, $18, $14, $09, $fe
18e2a     F0 E7 E3 E7 
18e2e     F0 FE 09 12 
18e32     18 15 0C 00 
18e36     F3 EA E4 E7 | 	byte	$f0, $e7, $e3, $e7, $f0, $fe, $09, $12, $18, $15, $0c, $00, $f3, $ea, $e4, $e7
18e3a     EE FA 05 10 
18e3e     15 14 0D 02 
18e42     F8 EC E7 E7 
18e46     EC F7 01 0C | 	byte	$ee, $fa, $05, $10, $15, $14, $0d, $02, $f8, $ec, $e7, $e7, $ec, $f7, $01, $0c
18e4a     12 14 10 06 
18e4e     FB F0 EA E7 
18e52     EB F4 FF 09 
18e56     10 12 10 08 | 	byte	$12, $14, $10, $06, $fb, $f0, $ea, $e7, $eb, $f4, $ff, $09, $10, $12, $10, $08
18e5a     FF F3 EC E8 
18e5e     EA F2 FB 04 
18e62     0D 11 10 0A 
18e66     00 F6 EE EA | 	byte	$ff, $f3, $ec, $e8, $ea, $f2, $fb, $04, $0d, $11, $10, $0a, $00, $f6, $ee, $ea
18e6a     EA EF F8 01 
18e6e     09 0E 0E 0A 
18e72     01 FA F2 EC 
18e76     EB EF F6 FF | 	byte	$ea, $ef, $f8, $01, $09, $0e, $0e, $0a, $01, $fa, $f2, $ec, $eb, $ef, $f6, $ff
18e7a     06 0C 0E 0C 
18e7e     05 FC F4 EE 
18e82     EC EE F3 FB 
18e86     02 09 0C 0C | 	byte	$06, $0c, $0e, $0c, $05, $fc, $f4, $ee, $ec, $ee, $f3, $fb, $02, $09, $0c, $0c
18e8a     05 FF F7 F0 
18e8e     EE EE F2 FA 
18e92     FF 06 0A 0C 
18e96     08 01 FB F3 | 	byte	$05, $ff, $f7, $f0, $ee, $ee, $f2, $fa, $ff, $06, $0a, $0c, $08, $01, $fb, $f3
18e9a     EF EE F2 F7 
18e9e     FF 04 09 0A 
18ea2     08 04 FC F6 
18ea6     F2 EF F2 F6 | 	byte	$ef, $ee, $f2, $f7, $ff, $04, $09, $0a, $08, $04, $fc, $f6, $f2, $ef, $f2, $f6
18eaa     FC 02 08 09 
18eae     09 04 FF F8 
18eb2     F3 F0 F2 F4 
18eb6     FA FF 05 08 | 	byte	$fc, $02, $08, $09, $09, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fa, $ff, $05, $08
18eba     08 05 00 FB 
18ebe     F6 F2 F2 F4 
18ec2     F8 FF 02 06 
18ec6     08 05 01 FC | 	byte	$08, $05, $00, $fb, $f6, $f2, $f2, $f4, $f8, $ff, $02, $06, $08, $05, $01, $fc
18eca     F7 F4 F3 F4 
18ece     F7 FE 01 05 
18ed2     06 05 01 FF 
18ed6     FA F6 F4 F4 | 	byte	$f7, $f4, $f3, $f4, $f7, $fe, $01, $05, $06, $05, $01, $ff, $fa, $f6, $f4, $f4
18eda     F7 FB FF 02 
18ede     04 05 02 FF 
18ee2     FB F7 F6 F4 
18ee6     F7 FA FE 00 | 	byte	$f7, $fb, $ff, $02, $04, $05, $02, $ff, $fb, $f7, $f6, $f4, $f7, $fa, $fe, $00
18eea     02 02 01 00 
18eee     FC F8 F7 F6 
18ef2     F7 F8 FC FF 
18ef6     00 01 01 00 | 	byte	$02, $02, $01, $00, $fc, $f8, $f7, $f6, $f7, $f8, $fc, $ff, $00, $01, $01, $00
18efa     FC FA F8 F7 
18efe     F7 F8 FB FE 
18f02     FF 00 00 FF 
18f06     FE FB FA F8 | 	byte	$fc, $fa, $f8, $f7, $f7, $f8, $fb, $fe, $ff, $00, $00, $ff, $fe, $fb, $fa, $f8
18f0a     F7 F8 FA FC 
18f0e     FE FF FF FF 
18f12     FE FC FA F8 
18f16     F8 F8 FA FB | 	byte	$f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fa, $f8, $f8, $f8, $fa, $fb
18f1a     FC FE FF FE 
18f1e     FE FC FB FA 
18f22     FA FA FA FB 
18f26     FC FE FE FE | 	byte	$fc, $fe, $ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe
18f2a     FE FC FC FB 
18f2e     FB FB FB FB 
18f32     FC FC FC FC 
18f36     FC FC FC FC | 	byte	$fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18f3a     FC FB FC FC 
18f3e     FC FC FC FC 
18f42     FC FC FC FC 
18f46     FC FC FC FC | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18f4a     FC FC FB FB 
18f4e     FB FB FB FC 
18f52     FC FE FE FE 
18f56     FC FC FB FA | 	byte	$fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe, $fe, $fc, $fc, $fb, $fa
18f5a     FA FA FA FB 
18f5e     FC FE FF FF 
18f62     FE FC FB FA 
18f66     F8 F8 FA FB | 	byte	$fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $fa, $fb
18f6a     FC FE FF FF 
18f6e     FF FE FB FA 
18f72     F8 F7 F7 FA 
18f76     FB FE FF FF | 	byte	$fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f7, $f7, $fa, $fb, $fe, $ff, $ff
18f7a     FF FE FC FA 
18f7e     F7 F6 F6 F7 
18f82     FA FC FF FF 
18f86     00 FF FE FB | 	byte	$ff, $fe, $fc, $fa, $f7, $f6, $f6, $f7, $fa, $fc, $ff, $ff, $00, $ff, $fe, $fb
18f8a     F7 F6 F4 F6 
18f8e     F8 FB FE 00 
18f92     01 00 FF FC 
18f96     F8 F6 F4 F4 | 	byte	$f7, $f6, $f4, $f6, $f8, $fb, $fe, $00, $01, $00, $ff, $fc, $f8, $f6, $f4, $f4
18f9a     F7 FA FE 00 
18f9e     02 02 01 FE 
18fa2     FB F7 F4 F3 
18fa6     F4 F8 FC 00 | 	byte	$f7, $fa, $fe, $00, $02, $02, $01, $fe, $fb, $f7, $f4, $f3, $f4, $f8, $fc, $00
18faa     02 04 02 00 
18fae     FC F8 F4 F3 
18fb2     F4 F7 FB FF 
18fb6     02 05 05 02 | 	byte	$02, $04, $02, $00, $fc, $f8, $f4, $f3, $f4, $f7, $fb, $ff, $02, $05, $05, $02
18fba     FF FB F6 F3 
18fbe     F3 F4 FA FE 
18fc2     02 05 06 05 
18fc6     01 FC F8 F4 | 	byte	$ff, $fb, $f6, $f3, $f3, $f4, $fa, $fe, $02, $05, $06, $05, $01, $fc, $f8, $f4
18fca     F2 F3 F7 FC 
18fce     FF 05 08 06 
18fd2     04 00 FA F6 
18fd6     F2 F2 F4 FA | 	byte	$f2, $f3, $f7, $fc, $ff, $05, $08, $06, $04, $00, $fa, $f6, $f2, $f2, $f4, $fa
18fda     FF 04 08 08 
18fde     06 02 FC F7 
18fe2     F3 F0 F2 F7 
18fe6     FC 02 06 09 | 	byte	$ff, $04, $08, $08, $06, $02, $fc, $f7, $f3, $f0, $f2, $f7, $fc, $02, $06, $09
18fea     08 05 00 FA 
18fee     F3 F0 F0 F3 
18ff2     FA FF 05 09 
18ff6     09 08 01 FB | 	byte	$08, $05, $00, $fa, $f3, $f0, $f0, $f3, $fa, $ff, $05, $09, $09, $08, $01, $fb
18ffa     F6 F0 EF F0 
18ffe     F6 FC 02 08 
19002     0A 09 05 00 
19006     F8 F2 EE EF | 	byte	$f6, $f0, $ef, $f0, $f6, $fc, $02, $08, $0a, $09, $05, $00, $f8, $f2, $ee, $ef
1900a     F2 FA FF 06 
1900e     0A 0C 08 02 
19012     FB F4 EF EE 
19016     EF F4 FC 04 | 	byte	$f2, $fa, $ff, $06, $0a, $0c, $08, $02, $fb, $f4, $ef, $ee, $ef, $f4, $fc, $04
1901a     0A 0C 0A 06 
1901e     00 F8 F0 EE 
19022     EE F2 FA FF 
19026     08 0C 0D 0A | 	byte	$0a, $0c, $0a, $06, $00, $f8, $f0, $ee, $ee, $f2, $fa, $ff, $08, $0c, $0d, $0a
1902a     02 FB F4 EF 
1902e     EC EF F4 FE 
19032     04 0C 0E 0D 
19036     08 00 F8 F0 | 	byte	$02, $fb, $f4, $ef, $ec, $ef, $f4, $fe, $04, $0c, $0e, $0d, $08, $00, $f8, $f0
1903a     EC EC F2 FA 
1903e     01 09 0D 0E 
19042     0A 04 FC F3 
19046     EE EC EF F4 | 	byte	$ec, $ec, $f2, $fa, $01, $09, $0d, $0e, $0a, $04, $fc, $f3, $ee, $ec, $ef, $f4
1904a     FE 05 0C 0E 
1904e     0D 08 00 F7 
19052     F0 EC EC F2 
19056     FA 02 09 0E | 	byte	$fe, $05, $0c, $0e, $0d, $08, $00, $f7, $f0, $ec, $ec, $f2, $fa, $02, $09, $0e
1905a     10 0C 05 FC 
1905e     F3 EE EB EE 
19062     F4 FE 06 0D 
19066     10 0E 08 00 | 	byte	$10, $0c, $05, $fc, $f3, $ee, $eb, $ee, $f4, $fe, $06, $0d, $10, $0e, $08, $00
1906a     F7 EF EB EB 
1906e     F0 FA 01 09 
19072     0E 10 0C 05 
19076     FB F3 EB EA | 	byte	$f7, $ef, $eb, $eb, $f0, $fa, $01, $09, $0e, $10, $0c, $05, $fb, $f3, $eb, $ea
1907a     EE F4 FE 06 
1907e     0D 10 0E 08 
19082     00 F6 EE EA 
19086     EA EF F8 01 | 	byte	$ee, $f4, $fe, $06, $0d, $10, $0e, $08, $00, $f6, $ee, $ea, $ea, $ef, $f8, $01
1908a     09 10 10 0C 
1908e     04 FB F0 EA 
19092     E8 EC F4 FE 
19096     06 0E 11 10 | 	byte	$09, $10, $10, $0c, $04, $fb, $f0, $ea, $e8, $ec, $f4, $fe, $06, $0e, $11, $10
1909a     08 FF F6 EC 
1909e     E8 EA EF FA 
190a2     02 0C 11 11 
190a6     0D 04 F8 EF | 	byte	$08, $ff, $f6, $ec, $e8, $ea, $ef, $fa, $02, $0c, $11, $11, $0d, $04, $f8, $ef
190aa     EA E7 EC F4 
190ae     FF 09 10 12 
190b2     10 09 00 F3 
190b6     EB E7 E8 F0 | 	byte	$ea, $e7, $ec, $f4, $ff, $09, $10, $12, $10, $09, $00, $f3, $eb, $e7, $e8, $f0
190ba     FA 04 0E 12 
190be     12 0E 04 FA 
190c2     EE E8 E7 EB 
190c6     F4 FF 0A 11 | 	byte	$fa, $04, $0e, $12, $12, $0e, $04, $fa, $ee, $e8, $e7, $eb, $f4, $ff, $0a, $11
190ca     14 11 0A FE 
190ce     F3 EA E5 E8 
190d2     EF FB 05 0E 
190d6     14 14 0D 02 | 	byte	$14, $11, $0a, $fe, $f3, $ea, $e5, $e8, $ef, $fb, $05, $0e, $14, $14, $0d, $02
190da     F8 EE E7 E7 
190de     EB F4 FF 0C 
190e2     12 14 11 08 
190e6     FE F0 E8 E5 | 	byte	$f8, $ee, $e7, $e7, $eb, $f4, $ff, $0c, $12, $14, $11, $08, $fe, $f0, $e8, $e5
190ea     E8 EF FC 06 
190ee     11 15 12 0C 
190f2     00 F6 EB E5 
190f6     E5 EA F6 FF | 	byte	$e8, $ef, $fc, $06, $11, $15, $12, $0c, $00, $f6, $eb, $e5, $e5, $ea, $f6, $ff
190fa     0D 14 15 10 
190fe     05 FB EE E5 
19102     E3 E7 F2 FC 
19106     09 12 16 14 | 	byte	$0d, $14, $15, $10, $05, $fb, $ee, $e5, $e3, $e7, $f2, $fc, $09, $12, $16, $14
1910a     0C 00 F3 E8 
1910e     E3 E4 EB F7 
19112     04 10 15 16 
19116     10 05 F8 EC | 	byte	$0c, $00, $f3, $e8, $e3, $e4, $eb, $f7, $04, $10, $15, $16, $10, $05, $f8, $ec
1911a     E4 E1 E7 F2 
1911e     FF 0C 14 18 
19122     14 0A FE F0 
19126     E7 E1 E4 EC | 	byte	$e4, $e1, $e7, $f2, $ff, $0c, $14, $18, $14, $0a, $fe, $f0, $e7, $e1, $e4, $ec
1912a     FB 06 11 18 
1912e     18 10 04 F6 
19132     EB E1 E1 E7 
19136     F4 02 0E 18 | 	byte	$fb, $06, $11, $18, $18, $10, $04, $f6, $eb, $e1, $e1, $e7, $f4, $02, $0e, $18
1913a     19 15 0A FC 
1913e     EE E4 E0 E4 
19142     EF FC 09 16 
19146     1B 18 10 01 | 	byte	$19, $15, $0a, $fc, $ee, $e4, $e0, $e4, $ef, $fc, $09, $16, $1b, $18, $10, $01
1914a     F3 E7 E0 E1 
1914e     EA F7 06 12 
19152     19 1B 15 06 
19156     F8 EB E1 E0 | 	byte	$f3, $e7, $e0, $e1, $ea, $f7, $06, $12, $19, $1b, $15, $06, $f8, $eb, $e1, $e0
1915a     E5 F2 FF 0E 
1915e     19 1C 18 0C 
19162     00 EF E3 DF 
19166     E1 EC FA 09 | 	byte	$e5, $f2, $ff, $0e, $19, $1c, $18, $0c, $00, $ef, $e3, $df, $e1, $ec, $fa, $09
1916a     15 1C 1B 11 
1916e     04 F3 E7 DF 
19172     DF E7 F4 02 
19176     12 1B 1C 16 | 	byte	$15, $1c, $1b, $11, $04, $f3, $e7, $df, $df, $e7, $f4, $02, $12, $1b, $1c, $16
1917a     08 FB EB E0 
1917e     DD E3 EE FF 
19182     0E 19 1D 1B 
19186     10 00 F0 E3 | 	byte	$08, $fb, $eb, $e0, $dd, $e3, $ee, $ff, $0e, $19, $1d, $1b, $10, $00, $f0, $e3
1918a     DC DF E7 F7 
1918e     08 15 1D 1C 
19192     14 05 F6 E5 
19196     DD DC E3 F2 | 	byte	$dc, $df, $e7, $f7, $08, $15, $1d, $1c, $14, $05, $f6, $e5, $dd, $dc, $e3, $f2
1919a     FF 11 1C 1F 
1919e     19 0C FB EB 
191a2     E0 DB DF EA 
191a6     FB 0C 19 1F | 	byte	$ff, $11, $1c, $1f, $19, $0c, $fb, $eb, $e0, $db, $df, $ea, $fb, $0c, $19, $1f
191aa     1D 10 01 F0 
191ae     E1 DB DC E7 
191b2     F7 06 16 1F 
191b6     20 16 08 F6 | 	byte	$1d, $10, $01, $f0, $e1, $db, $dc, $e7, $f7, $06, $16, $1f, $20, $16, $08, $f6
191ba     E7 DC DB E1 
191be     F2 FF 12 1D 
191c2     21 1B 0D FB 
191c6     EB DF D9 DF | 	byte	$e7, $dc, $db, $e1, $f2, $ff, $12, $1d, $21, $1b, $0d, $fb, $eb, $df, $d9, $df
191ca     EA FC 0E 1B 
191ce     21 1F 15 01 
191d2     F0 E1 D9 DB 
191d6     E5 F4 09 18 | 	byte	$ea, $fc, $0e, $1b, $21, $1f, $15, $01, $f0, $e1, $d9, $db, $e5, $f4, $09, $18
191da     20 20 18 08 
191de     F7 E5 DB D9 
191e2     E1 EF FF 14 
191e6     1F 23 1C 0D | 	byte	$20, $20, $18, $08, $f7, $e5, $db, $d9, $e1, $ef, $ff, $14, $1f, $23, $1c, $0d
191ea     FE EB DD D8 
191ee     DC EA FB 0E 
191f2     1C 23 20 12 
191f6     02 EF E0 D8 | 	byte	$fe, $eb, $dd, $d8, $dc, $ea, $fb, $0e, $1c, $23, $20, $12, $02, $ef, $e0, $d8
191fa     D9 E3 F4 08 
191fe     16 21 21 18 
19202     08 F6 E5 DB 
19206     D8 DF EF FF | 	byte	$d9, $e3, $f4, $08, $16, $21, $21, $18, $08, $f6, $e5, $db, $d8, $df, $ef, $ff
1920a     12 1F 21 1D 
1920e     0D FC E8 DC 
19212     D8 DC EA FB 
19216     0C 1C 23 20 | 	byte	$12, $1f, $21, $1d, $0d, $fc, $e8, $dc, $d8, $dc, $ea, $fb, $0c, $1c, $23, $20
1921a     12 01 F0 DF 
1921e     D8 D9 E4 F7 
19222     09 19 21 21 
19226     16 08 F6 E3 | 	byte	$12, $01, $f0, $df, $d8, $d9, $e4, $f7, $09, $19, $21, $21, $16, $08, $f6, $e3
1922a     D9 D8 E0 F2 
1922e     02 14 20 23 
19232     1C 0C FA E8 
19236     DB D7 DD EA | 	byte	$d9, $d8, $e0, $f2, $02, $14, $20, $23, $1c, $0c, $fa, $e8, $db, $d7, $dd, $ea
1923a     FC 10 1F 24 
1923e     20 12 00 EE 
19242     DD D7 D9 E7 
19246     F7 0C 1B 24 | 	byte	$fc, $10, $1f, $24, $20, $12, $00, $ee, $dd, $d7, $d9, $e7, $f7, $0c, $1b, $24
1924a     23 18 05 F3 
1924e     E3 D8 D9 E1 
19252     F2 06 16 23 
19256     24 1C 0C F8 | 	byte	$23, $18, $05, $f3, $e3, $d8, $d9, $e1, $f2, $06, $16, $23, $24, $1c, $0c, $f8
1925a     E7 D9 D7 DD 
1925e     EE FF 11 20 
19262     24 1F 12 00 
19266     EB DC D7 DB | 	byte	$e7, $d9, $d7, $dd, $ee, $ff, $11, $20, $24, $1f, $12, $00, $eb, $dc, $d7, $db
1926a     E7 FC 0C 1D 
1926e     24 21 15 05 
19272     F0 E0 D7 D8 
19276     E3 F3 08 18 | 	byte	$e7, $fc, $0c, $1d, $24, $21, $15, $05, $f0, $e0, $d7, $d8, $e3, $f3, $08, $18
1927a     23 23 19 0A 
1927e     F7 E3 D8 D7 
19282     DD EF FF 14 
19286     21 24 1D 0D | 	byte	$23, $23, $19, $0a, $f7, $e3, $d8, $d7, $dd, $ef, $ff, $14, $21, $24, $1d, $0d
1928a     FB E8 DB D5 
1928e     D9 EA FC 0E 
19292     1F 24 20 15 
19296     00 EE DD D5 | 	byte	$fb, $e8, $db, $d5, $d9, $ea, $fc, $0e, $1f, $24, $20, $15, $00, $ee, $dd, $d5
1929a     D7 E3 F4 09 
1929e     19 24 23 18 
192a2     08 F6 E0 D7 
192a6     D5 DF F0 04 | 	byte	$d7, $e3, $f4, $09, $19, $24, $23, $18, $08, $f6, $e0, $d7, $d5, $df, $f0, $04
192aa     16 21 24 1D 
192ae     0D FB E7 D9 
192b2     D5 DB EC FF 
192b6     12 1F 25 20 | 	byte	$16, $21, $24, $1d, $0d, $fb, $e7, $d9, $d5, $db, $ec, $ff, $12, $1f, $25, $20
192ba     12 00 EB DB 
192be     D5 D8 E7 FA 
192c2     0E 1C 25 23 
192c6     18 04 F0 E0 | 	byte	$12, $00, $eb, $db, $d5, $d8, $e7, $fa, $0e, $1c, $25, $23, $18, $04, $f0, $e0
192ca     D5 D7 E0 F4 
192ce     06 19 24 25 
192d2     1C 0A F7 E5 
192d6     D7 D5 DD EC | 	byte	$d5, $d7, $e0, $f4, $06, $19, $24, $25, $1c, $0a, $f7, $e5, $d7, $d5, $dd, $ec
192da     FF 14 21 25 
192de     1F 0E FC E7 
192e2     D9 D4 D9 EA 
192e6     FC 0E 1F 25 | 	byte	$ff, $14, $21, $25, $1f, $0e, $fc, $e7, $d9, $d4, $d9, $ea, $fc, $0e, $1f, $25
192ea     21 15 00 EE 
192ee     DB D5 D8 E4 
192f2     F4 0C 1B 25 
192f6     24 18 06 F2 | 	byte	$21, $15, $00, $ee, $db, $d5, $d8, $e4, $f4, $0c, $1b, $25, $24, $18, $06, $f2
192fa     DF D5 D5 DF 
192fe     F3 06 18 24 
19302     24 1C 0A F6 
19306     E4 D7 D4 DC | 	byte	$df, $d5, $d5, $df, $f3, $06, $18, $24, $24, $1c, $0a, $f6, $e4, $d7, $d4, $dc
1930a     EC FF 14 21 
1930e     25 1F 10 FB 
19312     E8 D8 D4 D9 
19316     E7 FC 0E 1F | 	byte	$ec, $ff, $14, $21, $25, $1f, $10, $fb, $e8, $d8, $d4, $d9, $e7, $fc, $0e, $1f
1931a     25 21 12 01 
1931e     EB DC D4 D7 
19322     E3 F7 09 1C 
19326     25 24 18 05 | 	byte	$25, $21, $12, $01, $eb, $dc, $d4, $d7, $e3, $f7, $09, $1c, $25, $24, $18, $05
1932a     F0 E0 D5 D4 
1932e     DF EF 06 18 
19332     24 25 1C 0C 
19336     F6 E4 D7 D4 | 	byte	$f0, $e0, $d5, $d4, $df, $ef, $06, $18, $24, $25, $1c, $0c, $f6, $e4, $d7, $d4
1933a     DB EC FF 14 
1933e     23 27 1F 10 
19342     00 E8 D9 D4 
19346     D9 EA FC 11 | 	byte	$db, $ec, $ff, $14, $23, $27, $1f, $10, $00, $e8, $d9, $d4, $d9, $ea, $fc, $11
1934a     1F 27 23 15 
1934e     00 EB DB D4 
19352     D7 E4 F7 0D 
19356     1D 25 24 16 | 	byte	$1f, $27, $23, $15, $00, $eb, $db, $d4, $d7, $e4, $f7, $0d, $1d, $25, $24, $16
1935a     05 EF DD D4 
1935e     D5 E1 F4 08 
19362     1B 24 25 1B 
19366     08 F6 E1 D5 | 	byte	$05, $ef, $dd, $d4, $d5, $e1, $f4, $08, $1b, $24, $25, $1b, $08, $f6, $e1, $d5
1936a     D4 DD EF 06 
1936e     18 24 25 1D 
19372     0C F8 E5 D7 
19376     D4 DB EC FF | 	byte	$d4, $dd, $ef, $06, $18, $24, $25, $1d, $0c, $f8, $e5, $d7, $d4, $db, $ec, $ff
1937a     14 21 25 20 
1937e     11 FB E8 D8 
19382     D3 D9 E7 FB 
19386     11 1F 25 21 | 	byte	$14, $21, $25, $20, $11, $fb, $e8, $d8, $d3, $d9, $e7, $fb, $11, $1f, $25, $21
1938a     15 01 EE DC 
1938e     D4 D7 E4 F7 
19392     0C 1C 25 23 
19396     18 05 F0 DD | 	byte	$15, $01, $ee, $dc, $d4, $d7, $e4, $f7, $0c, $1c, $25, $23, $18, $05, $f0, $dd
1939a     D5 D4 DF F2 
1939e     06 19 24 24 
193a2     1B 08 F3 E0 
193a6     D5 D4 DF EF | 	byte	$d5, $d4, $df, $f2, $06, $19, $24, $24, $1b, $08, $f3, $e0, $d5, $d4, $df, $ef
193aa     04 16 23 25 
193ae     1D 0D F8 E5 
193b2     D7 D4 DC EC 
193b6     FF 14 21 25 | 	byte	$04, $16, $23, $25, $1d, $0d, $f8, $e5, $d7, $d4, $dc, $ec, $ff, $14, $21, $25
193ba     20 10 FC E7 
193be     D9 D4 DB EA 
193c2     FC 11 21 27 
193c6     21 12 00 EB | 	byte	$20, $10, $fc, $e7, $d9, $d4, $db, $ea, $fc, $11, $21, $27, $21, $12, $00, $eb
193ca     DB D4 D8 E7 
193ce     FA 0E 1F 25 
193d2     23 15 01 EE 
193d6     DC D5 D7 E3 | 	byte	$db, $d4, $d8, $e7, $fa, $0e, $1f, $25, $23, $15, $01, $ee, $dc, $d5, $d7, $e3
193da     F7 09 1C 25 
193de     23 18 05 F0 
193e2     DD D5 D7 E1 
193e6     F4 06 19 24 | 	byte	$f7, $09, $1c, $25, $23, $18, $05, $f0, $dd, $d5, $d7, $e1, $f4, $06, $19, $24
193ea     25 19 08 F6 
193ee     E0 D7 D4 DD 
193f2     F0 04 18 23 
193f6     25 1D 0A F7 | 	byte	$25, $19, $08, $f6, $e0, $d7, $d4, $dd, $f0, $04, $18, $23, $25, $1d, $0a, $f7
193fa     E3 D7 D4 DC 
193fe     EF FF 14 21 
19402     25 1F 10 FB 
19406     E7 D8 D4 D9 | 	byte	$e3, $d7, $d4, $dc, $ef, $ff, $14, $21, $25, $1f, $10, $fb, $e7, $d8, $d4, $d9
1940a     E8 FF 10 1F 
1940e     25 20 11 FC 
19412     EB D9 D4 D9 
19416     E7 FC 0E 1D | 	byte	$e8, $ff, $10, $1f, $25, $20, $11, $fc, $eb, $d9, $d4, $d9, $e7, $fc, $0e, $1d
1941a     24 20 12 00 
1941e     EB DB D4 D8 
19422     E4 FA 0C 1D 
19426     24 21 15 02 | 	byte	$24, $20, $12, $00, $eb, $db, $d4, $d8, $e4, $fa, $0c, $1d, $24, $21, $15, $02
1942a     EC DD D4 D7 
1942e     E4 F7 09 1C 
19432     24 23 15 04 
19436     EE E0 D5 D7 | 	byte	$ec, $dd, $d4, $d7, $e4, $f7, $09, $1c, $24, $23, $15, $04, $ee, $e0, $d5, $d7
1943a     E1 F4 09 19 
1943e     24 23 18 06 
19442     F3 E0 D7 D7 
19446     E0 F3 06 19 | 	byte	$e1, $f4, $09, $19, $24, $23, $18, $06, $f3, $e0, $d7, $d7, $e0, $f3, $06, $19
1944a     23 24 1B 0A 
1944e     F6 E1 D7 D7 
19452     DF EF 04 16 
19456     23 25 1B 0A | 	byte	$23, $24, $1b, $0a, $f6, $e1, $d7, $d7, $df, $ef, $04, $16, $23, $25, $1b, $0a
1945a     F8 E5 D8 D7 
1945e     DD EF FF 14 
19462     21 24 1D 0D 
19466     FB E5 D9 D5 | 	byte	$f8, $e5, $d8, $d7, $dd, $ef, $ff, $14, $21, $24, $1d, $0d, $fb, $e5, $d9, $d5
1946a     DC EA FF 11 
1946e     20 24 1D 10 
19472     FB E8 DB D5 
19476     DB EA FF 10 | 	byte	$dc, $ea, $ff, $11, $20, $24, $1d, $10, $fb, $e8, $db, $d5, $db, $ea, $ff, $10
1947a     1F 24 1D 10 
1947e     00 EB DB D5 
19482     D9 E8 FA 0E 
19486     1D 23 20 10 | 	byte	$1f, $24, $1d, $10, $00, $eb, $db, $d5, $d9, $e8, $fa, $0e, $1d, $23, $20, $10
1948a     00 EC DD D5 
1948e     D9 E7 FA 0C 
19492     1C 23 20 12 
19496     00 EC DD D5 | 	byte	$00, $ec, $dd, $d5, $d9, $e7, $fa, $0c, $1c, $23, $20, $12, $00, $ec, $dd, $d5
1949a     D8 E4 F7 09 
1949e     1C 23 20 12 
194a2     00 EE DD D5 
194a6     D8 E4 F7 09 | 	byte	$d8, $e4, $f7, $09, $1c, $23, $20, $12, $00, $ee, $dd, $d5, $d8, $e4, $f7, $09
194aa     19 23 21 15 
194ae     05 F0 E0 D7 
194b2     D8 E4 F4 09 
194b6     19 23 21 16 | 	byte	$19, $23, $21, $15, $05, $f0, $e0, $d7, $d8, $e4, $f4, $09, $19, $23, $21, $16
194ba     04 F2 E1 D7 
194be     D8 E3 F4 09 
194c2     18 23 23 18 
194c6     06 F6 E3 D8 | 	byte	$04, $f2, $e1, $d7, $d8, $e3, $f4, $09, $18, $23, $23, $18, $06, $f6, $e3, $d8
194ca     D8 E1 F4 06 
194ce     18 21 23 19 
194d2     0A F6 E4 D9 
194d6     D8 E1 F3 04 | 	byte	$d8, $e1, $f4, $06, $18, $21, $23, $19, $0a, $f6, $e4, $d9, $d8, $e1, $f3, $04
194da     16 21 23 1B 
194de     0A F7 E5 D9 
194e2     D8 E0 EF FF 
194e6     14 20 23 1C | 	byte	$16, $21, $23, $1b, $0a, $f7, $e5, $d9, $d8, $e0, $ef, $ff, $14, $20, $23, $1c
194ea     0A FB E7 DB 
194ee     D8 DF EF FF 
194f2     11 1F 23 1C 
194f6     0E FB EB DB | 	byte	$0a, $fb, $e7, $db, $d8, $df, $ef, $ff, $11, $1f, $23, $1c, $0e, $fb, $eb, $db
194fa     D7 DD EA FF 
194fe     0E 1C 23 1D 
19502     10 00 EB DC 
19506     D7 DC EA FC | 	byte	$d7, $dd, $ea, $ff, $0e, $1c, $23, $1d, $10, $00, $eb, $dc, $d7, $dc, $ea, $fc
1950a     0C 1C 21 1D 
1950e     11 00 EE DD 
19512     D7 DB E8 FA 
19516     0D 1B 21 1F | 	byte	$0c, $1c, $21, $1d, $11, $00, $ee, $dd, $d7, $db, $e8, $fa, $0d, $1b, $21, $1f
1951a     11 01 F0 E0 
1951e     D8 D9 E4 F8 
19522     09 19 21 1F 
19526     15 04 F0 E1 | 	byte	$11, $01, $f0, $e0, $d8, $d9, $e4, $f8, $09, $19, $21, $1f, $15, $04, $f0, $e1
1952a     D8 D9 E4 F4 
1952e     09 18 20 20 
19532     16 05 F3 E1 
19536     D9 D9 E3 F4 | 	byte	$d8, $d9, $e4, $f4, $09, $18, $20, $20, $16, $05, $f3, $e1, $d9, $d9, $e3, $f4
1953a     06 14 20 21 
1953e     16 08 F6 E5 
19542     DB D9 E3 F2 
19546     04 14 1F 21 | 	byte	$06, $14, $20, $21, $16, $08, $f6, $e5, $db, $d9, $e3, $f2, $04, $14, $1f, $21
1954a     19 0A F8 E8 
1954e     DC D9 E0 EF 
19552     FF 11 1F 21 
19556     1B 0D FB EB | 	byte	$19, $0a, $f8, $e8, $dc, $d9, $e0, $ef, $ff, $11, $1f, $21, $1b, $0d, $fb, $eb
1955a     DD D9 DF EE 
1955e     FE 10 1C 21 
19562     1C 10 00 EC 
19566     E0 D9 DD EA | 	byte	$dd, $d9, $df, $ee, $fe, $10, $1c, $21, $1c, $10, $00, $ec, $e0, $d9, $dd, $ea
1956a     FC 0C 1B 20 
1956e     1D 11 00 EE 
19572     E0 D9 DC E8 
19576     FA 09 18 20 | 	byte	$fc, $0c, $1b, $20, $1d, $11, $00, $ee, $e0, $d9, $dc, $e8, $fa, $09, $18, $20
1957a     1D 12 04 F0 
1957e     E3 DB DB E5 
19582     F4 06 15 1F 
19586     1F 15 05 F3 | 	byte	$1d, $12, $04, $f0, $e3, $db, $db, $e5, $f4, $06, $15, $1f, $1f, $15, $05, $f3
1958a     E4 DB DB E3 
1958e     F2 04 14 1D 
19592     1F 16 08 F8 
19596     E5 DB D9 E1 | 	byte	$e4, $db, $db, $e3, $f2, $04, $14, $1d, $1f, $16, $08, $f8, $e5, $db, $d9, $e1
1959a     EF FF 11 1C 
1959e     1F 18 0A F8 
195a2     E8 DD D9 E0 
195a6     EE FF 0E 1B | 	byte	$ef, $ff, $11, $1c, $1f, $18, $0a, $f8, $e8, $dd, $d9, $e0, $ee, $ff, $0e, $1b
195aa     1F 1B 0D FC 
195ae     EC E0 DB DF 
195b2     EA FC 0C 19 
195b6     1F 1B 10 00 | 	byte	$1f, $1b, $0d, $fc, $ec, $e0, $db, $df, $ea, $fc, $0c, $19, $1f, $1b, $10, $00
195ba     EF E1 DB DD 
195be     E8 FA 09 16 
195c2     1F 1D 12 02 
195c6     F2 E4 DC DC | 	byte	$ef, $e1, $db, $dd, $e8, $fa, $09, $16, $1f, $1d, $12, $02, $f2, $e4, $dc, $dc
195ca     E7 F4 06 14 
195ce     1F 1D 15 05 
195d2     F7 E5 DD DC 
195d6     E4 F2 04 12 | 	byte	$e7, $f4, $06, $14, $1f, $1d, $15, $05, $f7, $e5, $dd, $dc, $e4, $f2, $04, $12
195da     1C 1F 16 09 
195de     FA E8 DF DC 
195e2     E1 EF FF 10 
195e6     1B 1D 19 0C | 	byte	$1c, $1f, $16, $09, $fa, $e8, $df, $dc, $e1, $ef, $ff, $10, $1b, $1d, $19, $0c
195ea     FC EB E0 DC 
195ee     E0 EC FC 0C 
195f2     19 1D 1B 0D 
195f6     00 EE E3 DC | 	byte	$fc, $eb, $e0, $dc, $e0, $ec, $fc, $0c, $19, $1d, $1b, $0d, $00, $ee, $e3, $dc
195fa     DF EA FA 08 
195fe     16 1D 1B 11 
19602     01 F3 E4 DC 
19606     DD E7 F7 05 | 	byte	$df, $ea, $fa, $08, $16, $1d, $1b, $11, $01, $f3, $e4, $dc, $dd, $e7, $f7, $05
1960a     14 1C 1C 12 
1960e     05 F6 E7 DD 
19612     DD E4 F3 FF 
19616     11 1B 1C 15 | 	byte	$14, $1c, $1c, $12, $05, $f6, $e7, $dd, $dd, $e4, $f3, $ff, $11, $1b, $1c, $15
1961a     08 F8 EB DF 
1961e     DC E3 EE FF 
19622     0D 19 1C 18 
19626     0C FE EC E1 | 	byte	$08, $f8, $eb, $df, $dc, $e3, $ee, $ff, $0d, $19, $1c, $18, $0c, $fe, $ec, $e1
1962a     DC E0 EA FB 
1962e     09 16 1C 19 
19632     0D 00 F0 E4 
19636     DD DF EA F7 | 	byte	$dc, $e0, $ea, $fb, $09, $16, $1c, $19, $0d, $00, $f0, $e4, $dd, $df, $ea, $f7
1963a     06 14 1B 1B 
1963e     12 05 F4 E5 
19642     DF DF E7 F4 
19646     04 12 1B 1C | 	byte	$06, $14, $1b, $1b, $12, $05, $f4, $e5, $df, $df, $e7, $f4, $04, $12, $1b, $1c
1964a     15 08 F8 EB 
1964e     E0 DF E4 F2 
19652     FF 0D 19 1C 
19656     16 0A FB EE | 	byte	$15, $08, $f8, $eb, $e0, $df, $e4, $f2, $ff, $0d, $19, $1c, $16, $0a, $fb, $ee
1965a     E1 DF E3 EE 
1965e     FE 0A 16 1B 
19662     18 0D 00 F0 
19666     E3 DF E0 EA | 	byte	$e1, $df, $e3, $ee, $fe, $0a, $16, $1b, $18, $0d, $00, $f0, $e3, $df, $e0, $ea
1966a     F8 08 14 1B 
1966e     19 11 02 F3 
19672     E7 E0 E0 EA 
19676     F4 02 11 19 | 	byte	$f8, $08, $14, $1b, $19, $11, $02, $f3, $e7, $e0, $e0, $ea, $f4, $02, $11, $19
1967a     19 12 05 F8 
1967e     EA E1 DF E4 
19682     F2 FF 0E 16 
19686     1B 15 0A FB | 	byte	$19, $12, $05, $f8, $ea, $e1, $df, $e4, $f2, $ff, $0e, $16, $1b, $15, $0a, $fb
1968a     EE E3 DF E4 
1968e     EE FC 09 14 
19692     19 16 0D 00 
19696     F2 E5 E0 E0 | 	byte	$ee, $e3, $df, $e4, $ee, $fc, $09, $14, $19, $16, $0d, $00, $f2, $e5, $e0, $e0
1969a     EA F7 04 11 
1969e     18 18 10 02 
196a2     F6 E8 E0 E0 
196a6     E7 F4 01 0E | 	byte	$ea, $f7, $04, $11, $18, $18, $10, $02, $f6, $e8, $e0, $e0, $e7, $f4, $01, $0e
196aa     16 18 12 08 
196ae     FA EC E3 E0 
196b2     E5 F0 FF 0C 
196b6     15 18 15 0A | 	byte	$16, $18, $12, $08, $fa, $ec, $e3, $e0, $e5, $f0, $ff, $0c, $15, $18, $15, $0a
196ba     FC F0 E5 E0 
196be     E3 EC FB 06 
196c2     14 18 16 0D 
196c6     01 F3 E7 E1 | 	byte	$fc, $f0, $e5, $e0, $e3, $ec, $fb, $06, $14, $18, $16, $0d, $01, $f3, $e7, $e1
196ca     E3 EA F8 04 
196ce     11 18 18 11 
196d2     05 F7 EB E3 
196d6     E1 E8 F4 FF | 	byte	$e3, $ea, $f8, $04, $11, $18, $18, $11, $05, $f7, $eb, $e3, $e1, $e8, $f4, $ff
196da     0D 16 18 12 
196de     09 FB EE E4 
196e2     E1 E5 EF FE 
196e6     09 14 18 15 | 	byte	$0d, $16, $18, $12, $09, $fb, $ee, $e4, $e1, $e5, $ef, $fe, $09, $14, $18, $15
196ea     0C FE F2 E7 
196ee     E1 E4 EC F8 
196f2     06 11 16 15 
196f6     0E 01 F6 EA | 	byte	$0c, $fe, $f2, $e7, $e1, $e4, $ec, $f8, $06, $11, $16, $15, $0e, $01, $f6, $ea
196fa     E3 E3 EA F4 
196fe     02 0E 15 16 
19702     11 06 F8 EC 
19706     E4 E3 E7 F2 | 	byte	$e3, $e3, $ea, $f4, $02, $0e, $15, $16, $11, $06, $f8, $ec, $e4, $e3, $e7, $f2
1970a     FE 0A 14 16 
1970e     12 09 FE F0 
19712     E5 E3 E5 EE 
19716     FB 06 11 15 | 	byte	$fe, $0a, $14, $16, $12, $09, $fe, $f0, $e5, $e3, $e5, $ee, $fb, $06, $11, $15
1971a     15 0C 00 F3 
1971e     E8 E3 E4 EA 
19722     F6 04 0E 14 
19726     15 10 02 F8 | 	byte	$15, $0c, $00, $f3, $e8, $e3, $e4, $ea, $f6, $04, $0e, $14, $15, $10, $02, $f8
1972a     EB E4 E3 E8 
1972e     F4 FF 0A 14 
19732     15 10 06 FB 
19736     EF E5 E3 E7 | 	byte	$eb, $e4, $e3, $e8, $f4, $ff, $0a, $14, $15, $10, $06, $fb, $ef, $e5, $e3, $e7
1973a     F0 FB 08 11 
1973e     15 12 0A 00 
19742     F2 E8 E4 E5 
19746     EC F8 04 0E | 	byte	$f0, $fb, $08, $11, $15, $12, $0a, $00, $f2, $e8, $e4, $e5, $ec, $f8, $04, $0e
1974a     14 14 0D 02 
1974e     F6 EC E5 E4 
19752     EA F4 FF 0C 
19756     12 15 10 05 | 	byte	$14, $14, $0d, $02, $f6, $ec, $e5, $e4, $ea, $f4, $ff, $0c, $12, $15, $10, $05
1975a     FB EF E7 E4 
1975e     E8 F2 FE 08 
19762     11 15 11 0A 
19766     00 F3 EA E4 | 	byte	$fb, $ef, $e7, $e4, $e8, $f2, $fe, $08, $11, $15, $11, $0a, $00, $f3, $ea, $e4
1976a     E7 EF FA 05 
1976e     0E 14 12 0C 
19772     02 F6 EC E5 
19776     E5 EA F6 FF | 	byte	$e7, $ef, $fa, $05, $0e, $14, $12, $0c, $02, $f6, $ec, $e5, $e5, $ea, $f6, $ff
1977a     0C 12 14 10 
1977e     05 FB EF E7 
19782     E5 E8 F2 FC 
19786     08 10 14 10 | 	byte	$0c, $12, $14, $10, $05, $fb, $ef, $e7, $e5, $e8, $f2, $fc, $08, $10, $14, $10
1978a     08 FE F3 EA 
1978e     E5 E7 EF FA 
19792     05 0D 12 11 
19796     0A 01 F6 EC | 	byte	$08, $fe, $f3, $ea, $e5, $e7, $ef, $fa, $05, $0d, $12, $11, $0a, $01, $f6, $ec
1979a     E5 E5 EC F4 
1979e     FF 09 11 12 
197a2     0D 04 FA EF 
197a6     E7 E5 EA F2 | 	byte	$e5, $e5, $ec, $f4, $ff, $09, $11, $12, $0d, $04, $fa, $ef, $e7, $e5, $ea, $f2
197aa     FC 06 0E 12 
197ae     10 08 FE F2 
197b2     EA E5 E8 EF 
197b6     FA 04 0D 11 | 	byte	$fc, $06, $0e, $12, $10, $08, $fe, $f2, $ea, $e5, $e8, $ef, $fa, $04, $0d, $11
197ba     11 0C 01 F6 
197be     EC E7 E7 EC 
197c2     F6 FF 09 10 
197c6     12 0D 05 FB | 	byte	$11, $0c, $01, $f6, $ec, $e7, $e7, $ec, $f6, $ff, $09, $10, $12, $0d, $05, $fb
197ca     F0 EA E7 EA 
197ce     F2 FC 06 0E 
197d2     12 10 08 00 
197d6     F4 EC E7 EA | 	byte	$f0, $ea, $e7, $ea, $f2, $fc, $06, $0e, $12, $10, $08, $00, $f4, $ec, $e7, $ea
197da     EF FA 04 0C 
197de     11 11 0C 02 
197e2     F8 EF E8 E8 
197e6     EC F6 FF 09 | 	byte	$ef, $fa, $04, $0c, $11, $11, $0c, $02, $f8, $ef, $e8, $e8, $ec, $f6, $ff, $09
197ea     10 11 0D 05 
197ee     FB F2 EB E8 
197f2     EA F2 FC 06 
197f6     0D 11 10 08 | 	byte	$10, $11, $0d, $05, $fb, $f2, $eb, $e8, $ea, $f2, $fc, $06, $0d, $11, $10, $08
197fa     00 F6 EC E8 
197fe     EA EF F8 01 
19802     0A 10 10 0A 
19806     01 F8 EF EA | 	byte	$00, $f6, $ec, $e8, $ea, $ef, $f8, $01, $0a, $10, $10, $0a, $01, $f8, $ef, $ea
1980a     E8 EC F4 FF 
1980e     06 0E 10 0D 
19812     05 FC F3 EB 
19816     E8 EA F0 FA | 	byte	$e8, $ec, $f4, $ff, $06, $0e, $10, $0d, $05, $fc, $f3, $eb, $e8, $ea, $f0, $fa
1981a     02 0C 0E 0E 
1981e     09 00 F7 EE 
19822     EA EA EE F7 
19826     FF 08 0E 0E | 	byte	$02, $0c, $0e, $0e, $09, $00, $f7, $ee, $ea, $ea, $ee, $f7, $ff, $08, $0e, $0e
1982a     0A 04 FB F2 
1982e     EB E8 EC F3 
19832     FB 05 0C 0E 
19836     0D 08 FF F6 | 	byte	$0a, $04, $fb, $f2, $eb, $e8, $ec, $f3, $fb, $05, $0c, $0e, $0d, $08, $ff, $f6
1983a     EE EA EA EF 
1983e     F8 01 09 0E 
19842     0E 0A 02 FA 
19846     F2 EB EA EE | 	byte	$ee, $ea, $ea, $ef, $f8, $01, $09, $0e, $0e, $0a, $02, $fa, $f2, $eb, $ea, $ee
1984a     F4 FE 06 0D 
1984e     0E 0D 05 FE 
19852     F6 EE EB EC 
19856     F2 FA 02 0A | 	byte	$f4, $fe, $06, $0d, $0e, $0d, $05, $fe, $f6, $ee, $eb, $ec, $f2, $fa, $02, $0a
1985a     0E 0D 09 00 
1985e     F8 F0 EB EB 
19862     EF F7 FF 08 
19866     0D 0E 0A 04 | 	byte	$0e, $0d, $09, $00, $f8, $f0, $eb, $eb, $ef, $f7, $ff, $08, $0d, $0e, $0a, $04
1986a     FC F4 EE EB 
1986e     EE F3 FC 04 
19872     0A 0D 0D 06 
19876     00 F6 EF EB | 	byte	$fc, $f4, $ee, $eb, $ee, $f3, $fc, $04, $0a, $0d, $0d, $06, $00, $f6, $ef, $eb
1987a     EC F0 F8 FF 
1987e     08 0C 0D 0A 
19882     02 FB F3 EE 
19886     EB EE F4 FC | 	byte	$ec, $f0, $f8, $ff, $08, $0c, $0d, $0a, $02, $fb, $f3, $ee, $eb, $ee, $f4, $fc
1988a     04 0A 0D 0C 
1988e     05 FE F6 EF 
19892     EC EC F2 F8 
19896     01 08 0C 0C | 	byte	$04, $0a, $0d, $0c, $05, $fe, $f6, $ef, $ec, $ec, $f2, $f8, $01, $08, $0c, $0c
1989a     08 01 FB F2 
1989e     EC EB EF F4 
198a2     FE 04 09 0C 
198a6     0A 04 FE F6 | 	byte	$08, $01, $fb, $f2, $ec, $eb, $ef, $f4, $fe, $04, $09, $0c, $0a, $04, $fe, $f6
198aa     EF EC EC F2 
198ae     FA FF 08 0C 
198b2     0A 06 00 F8 
198b6     F2 EE EC EF | 	byte	$ef, $ec, $ec, $f2, $fa, $ff, $08, $0c, $0a, $06, $00, $f8, $f2, $ee, $ec, $ef
198ba     F6 FE 04 0A 
198be     0C 09 04 FE 
198c2     F6 EF EC EE 
198c6     F4 FB 01 08 | 	byte	$f6, $fe, $04, $0a, $0c, $09, $04, $fe, $f6, $ef, $ec, $ee, $f4, $fb, $01, $08
198ca     0C 0A 06 00 
198ce     FA F2 EE EE 
198d2     F0 F7 FF 05 
198d6     0A 0C 09 04 | 	byte	$0c, $0a, $06, $00, $fa, $f2, $ee, $ee, $f0, $f7, $ff, $05, $0a, $0c, $09, $04
198da     FC F6 F0 EE 
198de     EF F4 FC 02 
198e2     08 0A 0A 06 
198e6     00 F8 F3 EE | 	byte	$fc, $f6, $f0, $ee, $ef, $f4, $fc, $02, $08, $0a, $0a, $06, $00, $f8, $f3, $ee
198ea     EE F2 F8 FF 
198ee     05 09 0A 08 
198f2     02 FC F4 F0 
198f6     EE EF F4 FC | 	byte	$ee, $f2, $f8, $ff, $05, $09, $0a, $08, $02, $fc, $f4, $f0, $ee, $ef, $f4, $fc
198fa     02 08 0A 0A 
198fe     05 00 F8 F3 
19902     EF EF F2 F8 
19906     FF 04 09 0A | 	byte	$02, $08, $0a, $0a, $05, $00, $f8, $f3, $ef, $ef, $f2, $f8, $ff, $04, $09, $0a
1990a     08 02 FC F6 
1990e     F0 EE EF F4 
19912     FB 01 06 09 
19916     09 05 FF F8 | 	byte	$08, $02, $fc, $f6, $f0, $ee, $ef, $f4, $fb, $01, $06, $09, $09, $05, $ff, $f8
1991a     F2 EF EF F2 
1991e     F8 FF 04 08 
19922     09 06 02 FB 
19926     F6 F0 EF F0 | 	byte	$f2, $ef, $ef, $f2, $f8, $ff, $04, $08, $09, $06, $02, $fb, $f6, $f0, $ef, $f0
1992a     F4 FB 01 06 
1992e     09 08 05 FF 
19932     F8 F3 EF EF 
19936     F3 F8 FF 04 | 	byte	$f4, $fb, $01, $06, $09, $08, $05, $ff, $f8, $f3, $ef, $ef, $f3, $f8, $ff, $04
1993a     08 09 06 01 
1993e     FB F6 F0 EF 
19942     F0 F4 FB 01 
19946     06 09 08 04 | 	byte	$08, $09, $06, $01, $fb, $f6, $f0, $ef, $f0, $f4, $fb, $01, $06, $09, $08, $04
1994a     00 F8 F3 F0 
1994e     F0 F3 F8 FF 
19952     04 08 09 06 
19956     01 FC F6 F2 | 	byte	$00, $f8, $f3, $f0, $f0, $f3, $f8, $ff, $04, $08, $09, $06, $01, $fc, $f6, $f2
1995a     F0 F2 F6 FC 
1995e     01 06 09 08 
19962     04 FF F8 F4 
19966     F0 F0 F4 FA | 	byte	$f0, $f2, $f6, $fc, $01, $06, $09, $08, $04, $ff, $f8, $f4, $f0, $f0, $f4, $fa
1996a     FF 04 08 08 
1996e     06 01 FC F6 
19972     F2 F0 F2 F7 
19976     FC 02 06 08 | 	byte	$ff, $04, $08, $08, $06, $01, $fc, $f6, $f2, $f0, $f2, $f7, $fc, $02, $06, $08
1997a     08 04 FF F8 
1997e     F3 F0 F2 F4 
19982     FA FF 04 06 
19986     08 05 00 FB | 	byte	$08, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fa, $ff, $04, $06, $08, $05, $00, $fb
1998a     F6 F2 F0 F2 
1998e     F7 FC 01 05 
19992     06 06 02 FE 
19996     F8 F3 F2 F2 | 	byte	$f6, $f2, $f0, $f2, $f7, $fc, $01, $05, $06, $06, $02, $fe, $f8, $f3, $f2, $f2
1999a     F4 FA FF 04 
1999e     06 06 04 00 
199a2     FB F6 F2 F0 
199a6     F3 F7 FC 01 | 	byte	$f4, $fa, $ff, $04, $06, $06, $04, $00, $fb, $f6, $f2, $f0, $f3, $f7, $fc, $01
199aa     05 06 05 01 
199ae     FC F8 F3 F2 
199b2     F2 F6 FA FF 
199b6     04 06 06 04 | 	byte	$05, $06, $05, $01, $fc, $f8, $f3, $f2, $f2, $f6, $fa, $ff, $04, $06, $06, $04
199ba     00 FB F6 F2 
199be     F2 F3 F8 FE 
199c2     01 05 06 05 
199c6     01 FC F7 F3 | 	byte	$00, $fb, $f6, $f2, $f2, $f3, $f8, $fe, $01, $05, $06, $05, $01, $fc, $f7, $f3
199ca     F2 F3 F7 FB 
199ce     FF 04 06 05 
199d2     02 FF FA F6 
199d6     F3 F3 F6 FA | 	byte	$f2, $f3, $f7, $fb, $ff, $04, $06, $05, $02, $ff, $fa, $f6, $f3, $f3, $f6, $fa
199da     FF 02 05 05 
199de     04 00 FB F7 
199e2     F3 F3 F4 F7 
199e6     FC 00 04 06 | 	byte	$ff, $02, $05, $05, $04, $00, $fb, $f7, $f3, $f3, $f4, $f7, $fc, $00, $04, $06
199ea     05 01 FE F8 
199ee     F6 F3 F3 F6 
199f2     FA FF 02 05 
199f6     05 02 00 FB | 	byte	$05, $01, $fe, $f8, $f6, $f3, $f3, $f6, $fa, $ff, $02, $05, $05, $02, $00, $fb
199fa     F7 F3 F3 F4 
199fe     F8 FE 01 04 
19a02     05 04 01 FE 
19a06     F8 F4 F3 F4 | 	byte	$f7, $f3, $f3, $f4, $f8, $fe, $01, $04, $05, $04, $01, $fe, $f8, $f4, $f3, $f4
19a0a     F7 FB FF 02 
19a0e     04 04 01 FF 
19a12     FA F6 F3 F3 
19a16     F4 F8 FE 01 | 	byte	$f7, $fb, $ff, $02, $04, $04, $01, $ff, $fa, $f6, $f3, $f3, $f4, $f8, $fe, $01
19a1a     04 04 02 00 
19a1e     FB F7 F4 F3 
19a22     F4 F7 FB FF 
19a26     02 04 04 00 | 	byte	$04, $04, $02, $00, $fb, $f7, $f4, $f3, $f4, $f7, $fb, $ff, $02, $04, $04, $00
19a2a     FE F8 F6 F3 
19a2e     F4 F6 FA FF 
19a32     01 04 04 01 
19a36     FF FB F7 F4 | 	byte	$fe, $f8, $f6, $f3, $f4, $f6, $fa, $ff, $01, $04, $04, $01, $ff, $fb, $f7, $f4
19a3a     F3 F4 F8 FC 
19a3e     FF 02 04 02 
19a42     00 FC F8 F6 
19a46     F3 F4 F7 FB | 	byte	$f3, $f4, $f8, $fc, $ff, $02, $04, $02, $00, $fc, $f8, $f6, $f3, $f4, $f7, $fb
19a4a     FF 02 04 04 
19a4e     01 FE FA F7 
19a52     F4 F4 F7 FA 
19a56     FE 01 04 04 | 	byte	$ff, $02, $04, $04, $01, $fe, $fa, $f7, $f4, $f4, $f7, $fa, $fe, $01, $04, $04
19a5a     01 FF FC F8 
19a5e     F6 F4 F6 F8 
19a62     FC FF 02 04 
19a66     02 00 FC FA | 	byte	$01, $ff, $fc, $f8, $f6, $f4, $f6, $f8, $fc, $ff, $02, $04, $02, $00, $fc, $fa
19a6a     F7 F4 F6 F8 
19a6e     FB FF 01 02 
19a72     02 01 FF FB 
19a76     F7 F6 F4 F7 | 	byte	$f7, $f4, $f6, $f8, $fb, $ff, $01, $02, $02, $01, $ff, $fb, $f7, $f6, $f4, $f7
19a7a     FA FE FF 02 
19a7e     02 01 FF FC 
19a82     F8 F6 F6 F6 
19a86     F8 FC FF 01 | 	byte	$fa, $fe, $ff, $02, $02, $01, $ff, $fc, $f8, $f6, $f6, $f6, $f8, $fc, $ff, $01
19a8a     02 01 00 FE 
19a8e     FA F7 F4 F6 
19a92     F7 FA FE 00 
19a96     01 01 00 FE | 	byte	$02, $01, $00, $fe, $fa, $f7, $f4, $f6, $f7, $fa, $fe, $00, $01, $01, $00, $fe
19a9a     FB F7 F6 F4 
19a9e     F7 FA FC FF 
19aa2     01 01 00 FF 
19aa6     FB F8 F6 F6 | 	byte	$fb, $f7, $f6, $f4, $f7, $fa, $fc, $ff, $01, $01, $00, $ff, $fb, $f8, $f6, $f6
19aaa     F6 F8 FB FE 
19aae     00 01 01 FF 
19ab2     FC FA F7 F6 
19ab6     F6 F7 FA FC | 	byte	$f6, $f8, $fb, $fe, $00, $01, $01, $ff, $fc, $fa, $f7, $f6, $f6, $f7, $fa, $fc
19aba     FF 01 01 00 
19abe     FE FB F7 F6 
19ac2     F6 F7 FA FC 
19ac6     FF 01 01 00 | 	byte	$ff, $01, $01, $00, $fe, $fb, $f7, $f6, $f6, $f7, $fa, $fc, $ff, $01, $01, $00
19aca     FF FC F8 F7 
19ace     F6 F7 F8 FC 
19ad2     FF 00 01 01 
19ad6     FF FE FA F8 | 	byte	$ff, $fc, $f8, $f7, $f6, $f7, $f8, $fc, $ff, $00, $01, $01, $ff, $fe, $fa, $f8
19ada     F7 F7 F8 FB 
19ade     FE FF 01 01 
19ae2     00 FE FB F8 
19ae6     F7 F7 F8 FA | 	byte	$f7, $f7, $f8, $fb, $fe, $ff, $01, $01, $00, $fe, $fb, $f8, $f7, $f7, $f8, $fa
19aea     FC FF 01 01 
19aee     00 FF FC FA 
19af2     F7 F7 F7 FA 
19af6     FB FF 00 01 | 	byte	$fc, $ff, $01, $01, $00, $ff, $fc, $fa, $f7, $f7, $f7, $fa, $fb, $ff, $00, $01
19afa     00 FF FC FA 
19afe     F8 F7 F7 F8 
19b02     FB FE FF 00 
19b06     00 FF FE FB | 	byte	$00, $ff, $fc, $fa, $f8, $f7, $f7, $f8, $fb, $fe, $ff, $00, $00, $ff, $fe, $fb
19b0a     F8 F7 F7 F8 
19b0e     FA FC FF FF 
19b12     00 FF FE FB 
19b16     F8 F7 F7 F7 | 	byte	$f8, $f7, $f7, $f8, $fa, $fc, $ff, $ff, $00, $ff, $fe, $fb, $f8, $f7, $f7, $f7
19b1a     FA FB FE FF 
19b1e     FF FF FE FB 
19b22     FA F7 F7 F7 
19b26     F8 FB FC FF | 	byte	$fa, $fb, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f7, $f7, $f7, $f8, $fb, $fc, $ff
19b2a     FF FF FF FC 
19b2e     FA F8 F7 F7 
19b32     F8 FA FC FE 
19b36     FF FF FF FC | 	byte	$ff, $ff, $ff, $fc, $fa, $f8, $f7, $f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fc
19b3a     FB F8 F7 F7 
19b3e     F8 FA FC FE 
19b42     FF FF FF FE 
19b46     FB FA F7 F7 | 	byte	$fb, $f8, $f7, $f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f7, $f7
19b4a     F8 FA FB FE 
19b4e     FF FF FF FF 
19b52     FC FB F8 F7 
19b56     F8 FA FB FC | 	byte	$f8, $fa, $fb, $fe, $ff, $ff, $ff, $ff, $fc, $fb, $f8, $f7, $f8, $fa, $fb, $fc
19b5a     FF FF FF FF 
19b5e     FC FB FA F8 
19b62     F8 F8 FA FC 
19b66     FE FF FF FF | 	byte	$ff, $ff, $ff, $ff, $fc, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff
19b6a     FE FB FA F8 
19b6e     F8 F8 FA FC 
19b72     FE FF FF FF 
19b76     FE FC FA FA | 	byte	$fe, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fa, $fa
19b7a     F8 F8 FA FB 
19b7e     FC FE FF FF 
19b82     FE FC FB FA 
19b86     F8 F8 F8 FB | 	byte	$f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $f8, $fb
19b8a     FC FE FF FF 
19b8e     FE FC FB FA 
19b92     F8 F8 F8 FA 
19b96     FB FC FE FF | 	byte	$fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $f8, $fa, $fb, $fc, $fe, $ff
19b9a     FE FC FB FA 
19b9e     F8 F8 F8 FA 
19ba2     FB FC FE FE 
19ba6     FE FE FC FB | 	byte	$fe, $fc, $fb, $fa, $f8, $f8, $f8, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fb
19baa     FA F8 F8 FA 
19bae     FB FC FE FE 
19bb2     FE FE FC FB 
19bb6     FA F8 F8 FA | 	byte	$fa, $f8, $f8, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fb, $fa, $f8, $f8, $fa
19bba     FA FB FC FE 
19bbe     FE FE FC FB 
19bc2     FA FA FA FA 
19bc6     FB FB FC FE | 	byte	$fa, $fb, $fc, $fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fb, $fc, $fe
19bca     FE FE FE FC 
19bce     FB FA FA FA 
19bd2     FA FB FC FE 
19bd6     FE FE FE FC | 	byte	$fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc
19bda     FB FA FA FA 
19bde     FB FB FC FE 
19be2     FE FE FE FC 
19be6     FC FB FA FA | 	byte	$fb, $fa, $fa, $fa, $fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fa, $fa
19bea     FB FB FC FE 
19bee     FE FE FE FC 
19bf2     FC FB FB FA 
19bf6     FA FB FC FC | 	byte	$fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fc, $fc
19bfa     FE FE FE FC 
19bfe     FC FB FB FA 
19c02     FA FB FB FC 
19c06     FC FE FE FE | 	byte	$fe, $fe, $fe, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fb, $fc, $fc, $fe, $fe, $fe
19c0a     FC FB FB FB 
19c0e     FA FB FB FC 
19c12     FC FC FE FC 
19c16     FC FB FB FB | 	byte	$fc, $fb, $fb, $fb, $fa, $fb, $fb, $fc, $fc, $fc, $fe, $fc, $fc, $fb, $fb, $fb
19c1a     FA FA FB FC 
19c1e     FC FC FC FC 
19c22     FC FB FB FB 
19c26     FA FB FB FB | 	byte	$fa, $fa, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fb, $fb, $fb
19c2a     FC FC FC FC 
19c2e     FC          | 	byte	$fc[5]
19c2f     FB FB FB FB 
19c33     FB FB FB FB | 	byte	$fb[8]
19c37     FC FC FC FC 
19c3b     FC          | 	byte	$fc[5]
19c3c     FB FB FB FB 
19c40     FB FB       | 	byte	$fb[6]
19c42     FC FC FC FC 
19c46     FC FC FC    | 	byte	$fc[7]
19c49     FB FB FB FB 
19c4d     FC FC FC FC 
19c51     FE FC FC FC 
19c55     FC FB FB FB | 	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb
19c59     FC FC FC FC 
      ...             
19ca9     FC FC FC FC 
19cad     FC FC       | 	byte	$fc[86]
19caf     FB FB FB FB 
19cb3     FB FB FB    | 	byte	$fb[7]
19cb6     FC FB FC FC 
19cba     FC FC FB FB 
19cbe     FB FB FB FC 
19cc2     FC FC FC FC | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc
19cc6     FC FC FC FC 
19cca     FB FB FC FC 
19cce     FC FC FC FC 
19cd2     FC FC FC FC | 	byte	$fc, $fc, $fc, $fc, $fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
19cd6     FC FB FC FC 
19cda     FC FC FE FC 
19cde     FC FC FC FC 
19ce2     FC FC FC FC | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
19ce6     FC FC FE FE 
19cea     FE FC FC FC 
19cee     FC FC FC FC 
19cf2     FC FC FE FE | 	byte	$fc, $fc, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $fe
19cf6     FC FC FC FC 
19cfa     FB FB FB FC 
19cfe     FC FC FE FE 
19d02     FE FC FC FC | 	byte	$fc, $fc, $fc, $fc, $fb, $fb, $fb, $fc, $fc, $fc, $fe, $fe, $fe, $fc, $fc, $fc
19d06     FB FB FB FB 
19d0a     FC FC FC FE 
19d0e     FE FC FC FB 
19d12     FB FB FB FB | 	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fc, $fe, $fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb
19d16     FC FC FC FC 
19d1a     FC FC FC    | 	byte	$fc[7]
19d1d     FB FB FB FB 
19d21     FB FB       | 	byte	$fb[6]
19d23     FC FC FC FC 
19d27     FC FC       | 	byte	$fc[6]
19d29     FB FB FB FB 
19d2d     FB FB       | 	byte	$fb[6]
19d2f     FC FC FC FC 
19d33     FC FC       | 	byte	$fc[6]
19d35     FB FB FB FB 
19d39     FB FB       | 	byte	$fb[6]
19d3b     FC FC FE FE 
19d3f     FC FC FC FB 
19d43     FB FB FB FB 
19d47     FC FC FE FE | 	byte	$fc, $fc, $fe, $fe, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe
19d4b     FE FC FC FB 
19d4f     FB FB FB FB 
19d53     FC FE FE FE 
19d57     FE FC FC FB | 	byte	$fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb
19d5b     FB FB FB FB 
19d5f     FC FE FE FE 
19d63     FE FC FC FB 
19d67     FB FB FB FB | 	byte	$fb, $fb, $fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb
19d6b     FC FE FE FE 
19d6f     FE FC FC FB 
19d73     FB FB FB FB 
19d77     FC FC FE FE | 	byte	$fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe
19d7b     FE FE FC FB 
19d7f     FB FB FB FB 
19d83     FC FC FE FE 
19d87     FE FE FC FB | 	byte	$fe, $fe, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe, $fe, $fe, $fc, $fb
19d8b     FB FB FB FB 
19d8f     FC FC FE FE 
19d93     FE FE FC FB 
19d97     FB FA FA FB | 	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe, $fe, $fe, $fc, $fb, $fb, $fa, $fa, $fb
19d9b     FC FC FE FE 
19d9f     FE FE FC FB 
19da3     FA FA FA FB 
19da7     FB FC FE FE | 	byte	$fc, $fc, $fe, $fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fe, $fe
19dab     FE FE FC FB 
19daf     FA FA FA FA 
19db3     FB FC FE FE 
19db7     FE FC FC FB | 	byte	$fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fc, $fc, $fb
19dbb     FA FA FA FA 
19dbf     FB FC FE FE 
19dc3     FE FE FC FC 
19dc7     FB FA FA FA | 	byte	$fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fa, $fa, $fa
19dcb     FB FC FE FF 
19dcf     FF FE FE FC 
19dd3     FB FA FA FA 
19dd7     FB FC FE FF | 	byte	$fb, $fc, $fe, $ff, $ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff
19ddb     FF FE FE FC 
19ddf     FB FA FA FA 
19de3     FB FC FE FF 
19de7     FF FF FE FC | 	byte	$ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc
19deb     FB FA FA FB 
19def     FB FC FE FF 
19df3     FF FF FE FC 
19df7     FB FA FA FA | 	byte	$fb, $fa, $fa, $fb, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa
19dfb     FB FC FE FE 
19dff     FF FF FE FC 
19e03     FB FA FA FA 
19e07     FB FC FE FF | 	byte	$fb, $fc, $fe, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff
19e0b     FF FF FE FC 
19e0f     FB FA FA FA 
19e13     FA FC FE FE 
19e17     FF FF FE FC | 	byte	$ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fc, $fe, $fe, $ff, $ff, $fe, $fc
19e1b     FB FA FA FA 
19e1f     FA FB FC FE 
19e23     FF FF FE FC 
19e27     FB FA FA FA | 	byte	$fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa
19e2b     FA FB FC FE 
19e2f     FF FF FE FC 
19e33     FB FA F8 F8 
19e37     FA FB FC FE | 	byte	$fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $fa, $fb, $fc, $fe
19e3b     FF FF FE FE 
19e3f     FB FB FA FA 
19e43     FA FB FC FE 
19e47     FF FF FF FE | 	byte	$ff, $ff, $fe, $fe, $fb, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe
19e4b     FC FB FA F8 
19e4f     FA FB FC FE 
19e53     FF FF FF FE 
19e57     FC FB FA FA | 	byte	$fc, $fb, $fa, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $fa
19e5b     FA FB FC FE 
19e5f     FF FF FF FF 
19e63     FC FB FA FA 
19e67     FA FA FC FE | 	byte	$fa, $fb, $fc, $fe, $ff, $ff, $ff, $ff, $fc, $fb, $fa, $fa, $fa, $fa, $fc, $fe
19e6b     FF FF FF FF 
19e6f     FE FB FA FA 
19e73     FA FA FB FE 
19e77     FF FF FF FF | 	byte	$ff, $ff, $ff, $ff, $fe, $fb, $fa, $fa, $fa, $fa, $fb, $fe, $ff, $ff, $ff, $ff
19e7b     FE FB FA FA 
19e7f     FA FA FB FC 
19e83     FF FF FF FF 
19e87     FE FC FB FA | 	byte	$fe, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $ff, $ff, $ff, $ff, $fe, $fc, $fb, $fa
19e8b     F8 FA FB FC 
19e8f     FE FF FF FF 
19e93     FE FC FB FA 
19e97     F8 FA FB FC | 	byte	$f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $fa, $fb, $fc
19e9b     FE FF FF FF 
19e9f     FE FC FB FA 
19ea3     F8 F8 FA FC 
19ea7     FE FF FF FF | 	byte	$fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff
19eab     FE FC FB FA 
19eaf     F8 F8 FA FB 
19eb3     FC FE FF FF 
19eb7     FF FE FB FA | 	byte	$fe, $fc, $fb, $fa, $f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa
19ebb     F8 F8 FA FB 
19ebf     FC FE FF FF 
19ec3     FF FE FB FA 
19ec7     F8 F8 FA FB | 	byte	$f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fb
19ecb     FC FE FF FF 
19ecf     FF FE FC FB 
19ed3     F8 F8 FA FA 
19ed7     FC FF FF FF | 	byte	$fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $f8, $f8, $fa, $fa, $fc, $ff, $ff, $ff
19edb     FF FF FC FB 
19edf     FA F8 FA FA 
19ee3     FC FE FF FF 
19ee7     00 FF FE FB | 	byte	$ff, $ff, $fc, $fb, $fa, $f8, $fa, $fa, $fc, $fe, $ff, $ff, $00, $ff, $fe, $fb
19eeb     FA F8 FA FA 
19eef     FC FE FF 00 
19ef3     00 FF FE FC 
19ef7     FA FA F8 FA | 	byte	$fa, $f8, $fa, $fa, $fc, $fe, $ff, $00, $00, $ff, $fe, $fc, $fa, $fa, $f8, $fa
19efb     FB FE FF FF 
19eff     00 FF FE FC 
19f03     FB FA F8 FA 
19f07     FB FC FF FF | 	byte	$fb, $fe, $ff, $ff, $00, $ff, $fe, $fc, $fb, $fa, $f8, $fa, $fb, $fc, $ff, $ff
19f0b     00 FF FF FC 
19f0f     FB FA F8 FA 
19f13     FA FC FE FF 
19f17     00 FF FF FE | 	byte	$00, $ff, $ff, $fc, $fb, $fa, $f8, $fa, $fa, $fc, $fe, $ff, $00, $ff, $ff, $fe
19f1b     FB FA F8 F8 
19f1f     FA FB FE FF 
19f23     FF FF FF FE 
19f27     FB FA F8 F8 | 	byte	$fb, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8
19f2b     FA FB FC FF 
19f2f     FF FF FF FE 
19f33     FB FA F8 F8 
19f37     F8 FA FC FF | 	byte	$fa, $fb, $fc, $ff, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $ff
19f3b     FF 00 FF FE 
19f3f     FC FA F8 F8 
19f43     F8 FA FC FE 
19f47     FF FF FF FF | 	byte	$ff, $00, $ff, $fe, $fc, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $ff
19f4b     FC FB F8 F8 
19f4f     F8 FA FC FE 
19f53     FF 00 00 FF 
19f57     FE FB FA F8 | 	byte	$fc, $fb, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $00, $00, $ff, $fe, $fb, $fa, $f8
19f5b     F8 FA FB FE 
19f5f     FF 00 00 FF 
19f63     FF FC FB F8 
19f67     F8 FA FB FE | 	byte	$f8, $fa, $fb, $fe, $ff, $00, $00, $ff, $ff, $fc, $fb, $f8, $f8, $fa, $fb, $fe
19f6b     FF 00 00 00 
19f6f     FF FC FB FA 
19f73     F8 FA FB FC 
19f77     FF 00 00 00 | 	byte	$ff, $00, $00, $00, $ff, $fc, $fb, $fa, $f8, $fa, $fb, $fc, $ff, $00, $00, $00
19f7b     FF FE FB FA 
19f7f     F8 FA FA FC 
19f83     FF FF 00 00 
19f87     FF FE FC FA | 	byte	$ff, $fe, $fb, $fa, $f8, $fa, $fa, $fc, $ff, $ff, $00, $00, $ff, $fe, $fc, $fa
19f8b     F8 F8 FA FB 
19f8f     FE FF 00 00 
19f93     00 FF FC FA 
19f97     F8 F8 FA FB | 	byte	$f8, $f8, $fa, $fb, $fe, $ff, $00, $00, $00, $ff, $fc, $fa, $f8, $f8, $fa, $fb
19f9b     FC FF FF 00 
19f9f     00 FF FC FB 
19fa3     FA F8 F8 FA 
19fa7     FC FF FF 00 | 	byte	$fc, $ff, $ff, $00, $00, $ff, $fc, $fb, $fa, $f8, $f8, $fa, $fc, $ff, $ff, $00
19fab     00 FF FE FB 
19faf     FA F8 F8 FA 
19fb3     FB FE FF 00 
19fb7     00 FF FE FB | 	byte	$00, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $00, $00, $ff, $fe, $fb
19fbb     FA F8 F8 F8 
19fbf     FB FC FF FF 
19fc3     00 FF FF FC 
19fc7     FB F8 F8 F8 | 	byte	$fa, $f8, $f8, $f8, $fb, $fc, $ff, $ff, $00, $ff, $ff, $fc, $fb, $f8, $f8, $f8
19fcb     FA FC FE FF 
19fcf     00 00 FF FE 
19fd3     FB FA F8 F8 
19fd7     FA FC FE FF | 	byte	$fa, $fc, $fe, $ff, $00, $00, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fc, $fe, $ff
19fdb     00 00 FF FE 
19fdf     FC FA F8 F8 
19fe3     FA FB FE FF 
19fe7     00 01 00 FF | 	byte	$00, $00, $ff, $fe, $fc, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $00, $01, $00, $ff
19feb     FC FB F8 F8 
19fef     FA FB FE FF 
19ff3     00 01 00 FF 
19ff7     FE FB FA F8 | 	byte	$fc, $fb, $f8, $f8, $fa, $fb, $fe, $ff, $00, $01, $00, $ff, $fe, $fb, $fa, $f8
19ffb     FA FA FC FF 
19fff     00 01 00 00 
1a003     FE FC FA F8 
1a007     F8 FA FC FE | 	byte	$fa, $fa, $fc, $ff, $00, $01, $00, $00, $fe, $fc, $fa, $f8, $f8, $fa, $fc, $fe
1a00b     FF 01 01 00 
1a00f     FF FC FA F8 
1a013     F8 FA FB FE 
1a017     FF 00 01 00 | 	byte	$ff, $01, $01, $00, $ff, $fc, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $00, $01, $00
1a01b     FF FC FB F8 
1a01f     F8 F8 FA FC 
1a023     FF 00 01 01 
1a027     FF FE FB F8 | 	byte	$ff, $fc, $fb, $f8, $f8, $f8, $fa, $fc, $ff, $00, $01, $01, $ff, $fe, $fb, $f8
1a02b     F8 F8 FA FC 
1a02f     FE FF 01 01 
1a033     00 FF FC FA 
1a037     F8 F8 F8 FB | 	byte	$f8, $f8, $fa, $fc, $fe, $ff, $01, $01, $00, $ff, $fc, $fa, $f8, $f8, $f8, $fb
1a03b     FE FF 00 01 
1a03f     00 FF FC FB 
1a043     F8 F8 F8 FA 
1a047     FC FF 00 01 | 	byte	$fe, $ff, $00, $01, $00, $ff, $fc, $fb, $f8, $f8, $f8, $fa, $fc, $ff, $00, $01
1a04b     01 FF FE FB 
1a04f     FA F8 F8 FA 
1a053     FC FF FF 01 
1a057     01 00 FF FC | 	byte	$01, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fc, $ff, $ff, $01, $01, $00, $ff, $fc
1a05b     FA F8 F8 FA 
1a05f     FB FE FF 01 
1a063     02 01 00 FC 
1a067     FB F8 F8 F8 | 	byte	$fa, $f8, $f8, $fa, $fb, $fe, $ff, $01, $02, $01, $00, $fc, $fb, $f8, $f8, $f8
1a06b     FB FE FF 01 
1a06f     02 01 00 FE 
1a073     FB FA F8 F8 
1a077     FA FC FF 01 | 	byte	$fb, $fe, $ff, $01, $02, $01, $00, $fe, $fb, $fa, $f8, $f8, $fa, $fc, $ff, $01
1a07b     02 02 01 FF 
1a07f     FC FA F8 F8 
1a083     FA FB FE 00 
1a087     01 02 01 00 | 	byte	$02, $02, $01, $ff, $fc, $fa, $f8, $f8, $fa, $fb, $fe, $00, $01, $02, $01, $00
1a08b     FE FB F8 F8 
1a08f     F8 FB FC FF 
1a093     01 02 02 00 
1a097     FF FB FA F7 | 	byte	$fe, $fb, $f8, $f8, $f8, $fb, $fc, $ff, $01, $02, $02, $00, $ff, $fb, $fa, $f7
1a09b     F8 FA FC FF 
1a09f     01 02 02 01 
1a0a3     FF FC FA F8 
1a0a7     F7 F8 FB FE | 	byte	$f8, $fa, $fc, $ff, $01, $02, $02, $01, $ff, $fc, $fa, $f8, $f7, $f8, $fb, $fe
1a0ab     FF 01 02 01 
1a0af     00 FE FA F8 
1a0b3     F7 F8 FA FC 
1a0b7     FF 01 02 02 | 	byte	$ff, $01, $02, $01, $00, $fe, $fa, $f8, $f7, $f8, $fa, $fc, $ff, $01, $02, $02
1a0bb     00 FE FB F8 
1a0bf     F7 F7 F8 FB 
1a0c3     FF 00 01 02 
1a0c7     01 FF FC FA | 	byte	$00, $fe, $fb, $f8, $f7, $f7, $f8, $fb, $ff, $00, $01, $02, $01, $ff, $fc, $fa
1a0cb     F8 F7 F8 FA 
1a0cf     FE FF 01 02 
1a0d3     01 00 FE FB 
1a0d7     F8 F7 F8 FA | 	byte	$f8, $f7, $f8, $fa, $fe, $ff, $01, $02, $01, $00, $fe, $fb, $f8, $f7, $f8, $fa
1a0db     FC FF 01 02 
1a0df     02 01 FF FC 
1a0e3     FA F7 F7 FA 
1a0e7     FC FF 01 02 | 	byte	$fc, $ff, $01, $02, $02, $01, $ff, $fc, $fa, $f7, $f7, $fa, $fc, $ff, $01, $02
1a0eb     02 02 00 FE 
1a0ef     FA F8 F7 F8 
1a0f3     FB FE 00 02 
1a0f7     04 02 01 FF | 	byte	$02, $02, $00, $fe, $fa, $f8, $f7, $f8, $fb, $fe, $00, $02, $04, $02, $01, $ff
1a0fb     FB F8 F7 F7 
1a0ff     FA FC FF 01 
1a103     04 04 02 00 
1a107     FC FA F8 F7 | 	byte	$fb, $f8, $f7, $f7, $fa, $fc, $ff, $01, $04, $04, $02, $00, $fc, $fa, $f8, $f7
1a10b     F8 FB FF 00 
1a10f     02 04 02 00 
1a113     FE FB F8 F7 
1a117     F7 FA FC FF | 	byte	$f8, $fb, $ff, $00, $02, $04, $02, $00, $fe, $fb, $f8, $f7, $f7, $fa, $fc, $ff
1a11b     01 04 02 01 
1a11f     FF FB F8 F7 
1a123     F7 F8 FB FE 
1a127     01 02 04 02 | 	byte	$01, $04, $02, $01, $ff, $fb, $f8, $f7, $f7, $f8, $fb, $fe, $01, $02, $04, $02
1a12b     00 FE FA F7 
1a12f     F7 F7 FA FE 
1a133     FF 02 04 02 
1a137     01 FF FB F8 | 	byte	$00, $fe, $fa, $f7, $f7, $f7, $fa, $fe, $ff, $02, $04, $02, $01, $ff, $fb, $f8
1a13b     F6 F7 F8 FB 
1a13f     FF 01 02 04 
1a143     01 FF FC FA 
1a147     F7 F7 F7 FA | 	byte	$f6, $f7, $f8, $fb, $ff, $01, $02, $04, $01, $ff, $fc, $fa, $f7, $f7, $f7, $fa
1a14b     FE FF 02 04 
1a14f     02 01 FE FA 
1a153     F8 F7 F7 F8 
1a157     FC FF 01 04 | 	byte	$fe, $ff, $02, $04, $02, $01, $fe, $fa, $f8, $f7, $f7, $f8, $fc, $ff, $01, $04
1a15b     04 02 00 FC 
1a15f     FA F7 F7 F8 
1a163     FB FF 01 04 
1a167     04 04 01 FE | 	byte	$04, $02, $00, $fc, $fa, $f7, $f7, $f8, $fb, $ff, $01, $04, $04, $04, $01, $fe
1a16b     FB F8 F7 F7 
1a16f     FA FC FF 02 
1a173     04 04 02 00 
1a177     FC F8 F7 F7 | 	byte	$fb, $f8, $f7, $f7, $fa, $fc, $ff, $02, $04, $04, $02, $00, $fc, $f8, $f7, $f7
1a17b     F8 FB FF 01 
1a17f     04 04 04 01 
1a183     FE FB F7 F7 
1a187     F7 FA FE 00 | 	byte	$f8, $fb, $ff, $01, $04, $04, $04, $01, $fe, $fb, $f7, $f7, $f7, $fa, $fe, $00
1a18b     02 05 04 02 
1a18f     FF FB F8 F7 
1a193     F7 F8 FB FF 
1a197     01 04 05 02 | 	byte	$02, $05, $04, $02, $ff, $fb, $f8, $f7, $f7, $f8, $fb, $ff, $01, $04, $05, $02
1a19b     00 FC FA F7 
1a19f     F6 F7 FA FC 
1a1a3     00 02 04 04 
1a1a7     01 FF FB F7 | 	byte	$00, $fc, $fa, $f7, $f6, $f7, $fa, $fc, $00, $02, $04, $04, $01, $ff, $fb, $f7
1a1ab     F6 F6 F8 FB 
1a1af     FF 01 04 04 
1a1b3     02 00 FC F8 
1a1b7     F6 F6 F6 FA | 	byte	$f6, $f6, $f8, $fb, $ff, $01, $04, $04, $02, $00, $fc, $f8, $f6, $f6, $f6, $fa
1a1bb     FC FF 02 04 
1a1bf     04 01 FE FA 
1a1c3     F7 F6 F6 F7 
1a1c7     FB FF 01 04 | 	byte	$fc, $ff, $02, $04, $04, $01, $fe, $fa, $f7, $f6, $f6, $f7, $fb, $ff, $01, $04
1a1cb     04 02 00 FC 
1a1cf     F8 F6 F6 F7 
1a1d3     FA FE 01 04 
1a1d7     05 04 01 FF | 	byte	$04, $02, $00, $fc, $f8, $f6, $f6, $f7, $fa, $fe, $01, $04, $05, $04, $01, $ff
1a1db     FB F7 F6 F6 
1a1df     F8 FB FF 02 
1a1e3     04 05 02 00 
1a1e7     FC F8 F6 F6 | 	byte	$fb, $f7, $f6, $f6, $f8, $fb, $ff, $02, $04, $05, $02, $00, $fc, $f8, $f6, $f6
1a1eb     F7 FA FE 01 
1a1ef     04 05 05 02 
1a1f3     FF FB F7 F6 
1a1f7     F6 F8 FC FF | 	byte	$f7, $fa, $fe, $01, $04, $05, $05, $02, $ff, $fb, $f7, $f6, $f6, $f8, $fc, $ff
1a1fb     02 05 05 04 
1a1ff     00 FC F8 F6 
1a203     F6 F7 FA FE 
1a207     01 04 05 04 | 	byte	$02, $05, $05, $04, $00, $fc, $f8, $f6, $f6, $f7, $fa, $fe, $01, $04, $05, $04
1a20b     02 FF FB F7 
1a20f     F6 F6 F8 FB 
1a213     FF 02 05 05 
1a217     04 00 FC F8 | 	byte	$02, $ff, $fb, $f7, $f6, $f6, $f8, $fb, $ff, $02, $05, $05, $04, $00, $fc, $f8
1a21b     F6 F4 F6 FA 
1a21f     FE 01 04 05 
1a223     04 02 FF FB 
1a227     F7 F4 F4 F7 | 	byte	$f6, $f4, $f6, $fa, $fe, $01, $04, $05, $04, $02, $ff, $fb, $f7, $f4, $f4, $f7
1a22b     FB FF 02 05 
1a22f     05 02 00 FC 
1a233     F8 F4 F4 F6 
1a237     FA FE 01 04 | 	byte	$fb, $ff, $02, $05, $05, $02, $00, $fc, $f8, $f4, $f4, $f6, $fa, $fe, $01, $04
1a23b     05 04 01 FE 
1a23f     FA F6 F4 F4 
1a243     F7 FB FF 02 
1a247     05 05 02 FF | 	byte	$05, $04, $01, $fe, $fa, $f6, $f4, $f4, $f7, $fb, $ff, $02, $05, $05, $02, $ff
1a24b     FB F7 F4 F4 
1a24f     F6 FA FE 01 
1a253     04 05 04 01 
1a257     FE FA F6 F4 | 	byte	$fb, $f7, $f4, $f4, $f6, $fa, $fe, $01, $04, $05, $04, $01, $fe, $fa, $f6, $f4
1a25b     F4 F8 FB FF 
1a25f     04 05 05 04 
1a263     00 FB F7 F6 
1a267     F4 F6 FA FF | 	byte	$f4, $f8, $fb, $ff, $04, $05, $05, $04, $00, $fb, $f7, $f6, $f4, $f6, $fa, $ff
1a26b     01 05 06 05 
1a26f     01 FE FA F6 
1a273     F4 F6 F8 FC 
1a277     00 04 06 06 | 	byte	$01, $05, $06, $05, $01, $fe, $fa, $f6, $f4, $f6, $f8, $fc, $00, $04, $06, $06
1a27b     04 00 FC F7 
1a27f     F6 F4 F7 FA 
1a283     FF 02 05 06 
1a287     05 02 FE FA | 	byte	$04, $00, $fc, $f7, $f6, $f4, $f7, $fa, $ff, $02, $05, $06, $05, $02, $fe, $fa
1a28b     F6 F4 F6 F8 
1a28f     FE 01 04 06 
1a293     06 02 00 FB 
1a297     F7 F4 F4 F7 | 	byte	$f6, $f4, $f6, $f8, $fe, $01, $04, $06, $06, $02, $00, $fb, $f7, $f4, $f4, $f7
1a29b     FB FF 02 05 
1a29f     06 04 00 FC 
1a2a3     F8 F6 F4 F4 
1a2a7     F8 FE 01 05 | 	byte	$fb, $ff, $02, $05, $06, $04, $00, $fc, $f8, $f6, $f4, $f4, $f8, $fe, $01, $05
1a2ab     06 05 02 FF 
1a2af     FA F6 F4 F4 
1a2b3     F7 FB FF 04 
1a2b7     05 06 04 00 | 	byte	$06, $05, $02, $ff, $fa, $f6, $f4, $f4, $f7, $fb, $ff, $04, $05, $06, $04, $00
1a2bb     FB F7 F4 F3 
1a2bf     F4 F8 FE 01 
1a2c3     05 06 05 01 
1a2c7     FE F8 F6 F3 | 	byte	$fb, $f7, $f4, $f3, $f4, $f8, $fe, $01, $05, $06, $05, $01, $fe, $f8, $f6, $f3
1a2cb     F4 F7 FB FF 
1a2cf     04 06 05 04 
1a2d3     00 FB F7 F3 
1a2d7     F3 F6 FA FF | 	byte	$f4, $f7, $fb, $ff, $04, $06, $05, $04, $00, $fb, $f7, $f3, $f3, $f6, $fa, $ff
1a2db     02 05 06 05 
1a2df     02 FE F8 F6 
1a2e3     F3 F4 F8 FC 
1a2e7     01 05 06 06 | 	byte	$02, $05, $06, $05, $02, $fe, $f8, $f6, $f3, $f4, $f8, $fc, $01, $05, $06, $06
1a2eb     02 FF FB F6 
1a2ef     F4 F4 F6 FB 
1a2f3     FF 04 06 06 
1a2f7     05 01 FC F8 | 	byte	$02, $ff, $fb, $f6, $f4, $f4, $f6, $fb, $ff, $04, $06, $06, $05, $01, $fc, $f8
1a2fb     F4 F3 F6 FA 
1a2ff     FE 02 06 08 
1a303     06 02 FE FA 
1a307     F6 F3 F4 F7 | 	byte	$f4, $f3, $f6, $fa, $fe, $02, $06, $08, $06, $02, $fe, $fa, $f6, $f3, $f4, $f7
1a30b     FC 01 05 08 
1a30f     06 05 00 FB 
1a313     F6 F4 F3 F6 
1a317     FA FF 04 06 | 	byte	$fc, $01, $05, $08, $06, $05, $00, $fb, $f6, $f4, $f3, $f6, $fa, $ff, $04, $06
1a31b     08 05 01 FE 
1a31f     F8 F4 F3 F4 
1a323     F8 FC 01 05 
1a327     06 06 02 FF | 	byte	$08, $05, $01, $fe, $f8, $f4, $f3, $f4, $f8, $fc, $01, $05, $06, $06, $02, $ff
1a32b     FA F6 F3 F3 
1a32f     F6 FB FF 04 
1a333     06 06 04 00 
1a337     FB F6 F3 F3 | 	byte	$fa, $f6, $f3, $f3, $f6, $fb, $ff, $04, $06, $06, $04, $00, $fb, $f6, $f3, $f3
1a33b     F4 F8 FE 02 
1a33f     06 06 05 01 
1a343     FE F8 F4 F3 
1a347     F3 F7 FC 01 | 	byte	$f4, $f8, $fe, $02, $06, $06, $05, $01, $fe, $f8, $f4, $f3, $f3, $f7, $fc, $01
1a34b     05 08 06 04 
1a34f     00 FA F6 F3 
1a353     F3 F6 FA FF 
1a357     04 06 08 05 | 	byte	$05, $08, $06, $04, $00, $fa, $f6, $f3, $f3, $f6, $fa, $ff, $04, $06, $08, $05
1a35b     01 FC F7 F3 
1a35f     F3 F4 F8 FF 
1a363     02 06 08 06 
1a367     02 FF F8 F4 | 	byte	$01, $fc, $f7, $f3, $f3, $f4, $f8, $ff, $02, $06, $08, $06, $02, $ff, $f8, $f4
1a36b     F3 F3 F7 FC 
1a36f     01 05 08 08 
1a373     05 00 FB F6 
1a377     F3 F3 F6 FA | 	byte	$f3, $f3, $f7, $fc, $01, $05, $08, $08, $05, $00, $fb, $f6, $f3, $f3, $f6, $fa
1a37b     FF 04 08 08 
1a37f     05 01 FC F7 
1a383     F4 F3 F4 F8 
1a387     FE 02 06 08 | 	byte	$ff, $04, $08, $08, $05, $01, $fc, $f7, $f4, $f3, $f4, $f8, $fe, $02, $06, $08
1a38b     06 04 FF F8 
1a38f     F4 F3 F3 F7 
1a393     FC 01 06 08 
1a397     08 05 00 FB | 	byte	$06, $04, $ff, $f8, $f4, $f3, $f3, $f7, $fc, $01, $06, $08, $08, $05, $00, $fb
1a39b     F6 F3 F3 F6 
1a39f     FA FF 04 08 
1a3a3     08 06 01 FC 
1a3a7     F7 F3 F2 F4 | 	byte	$f6, $f3, $f3, $f6, $fa, $ff, $04, $08, $08, $06, $01, $fc, $f7, $f3, $f2, $f4
1a3ab     F8 FE 02 06 
1a3af     08 06 02 FE 
1a3b3     F8 F4 F2 F3 
1a3b7     F6 FB 01 05 | 	byte	$f8, $fe, $02, $06, $08, $06, $02, $fe, $f8, $f4, $f2, $f3, $f6, $fb, $01, $05
1a3bb     08 08 04 00 
1a3bf     FA F6 F2 F2 
1a3c3     F4 FA FF 04 
1a3c7     06 08 05 01 | 	byte	$08, $08, $04, $00, $fa, $f6, $f2, $f2, $f4, $fa, $ff, $04, $06, $08, $05, $01
1a3cb     FC F7 F3 F2 
1a3cf     F3 F8 FE 02 
1a3d3     06 08 06 02 
1a3d7     FE F8 F3 F2 | 	byte	$fc, $f7, $f3, $f2, $f3, $f8, $fe, $02, $06, $08, $06, $02, $fe, $f8, $f3, $f2
1a3db     F3 F7 FC 01 
1a3df     05 08 08 05 
1a3e3     00 FA F6 F2 
1a3e7     F2 F4 FA FF | 	byte	$f3, $f7, $fc, $01, $05, $08, $08, $05, $00, $fa, $f6, $f2, $f2, $f4, $fa, $ff
1a3eb     05 08 08 05 
1a3ef     01 FC F6 F3 
1a3f3     F2 F4 FA FF 
1a3f7     04 08 09 08 | 	byte	$05, $08, $08, $05, $01, $fc, $f6, $f3, $f2, $f4, $fa, $ff, $04, $08, $09, $08
1a3fb     02 FE F8 F3 
1a3ff     F2 F3 F7 FE 
1a403     02 06 09 08 
1a407     05 FF FA F4 | 	byte	$02, $fe, $f8, $f3, $f2, $f3, $f7, $fe, $02, $06, $09, $08, $05, $ff, $fa, $f4
1a40b     F2 F3 F6 FB 
1a40f     00 05 09 09 
1a413     05 01 FB F6 
1a417     F2 F2 F4 FA | 	byte	$f2, $f3, $f6, $fb, $00, $05, $09, $09, $05, $01, $fb, $f6, $f2, $f2, $f4, $fa
1a41b     FF 04 08 09 
1a41f     06 02 FE F7 
1a423     F3 F2 F3 F7 
1a427     FE 02 06 09 | 	byte	$ff, $04, $08, $09, $06, $02, $fe, $f7, $f3, $f2, $f3, $f7, $fe, $02, $06, $09
1a42b     08 04 FF F8 
1a42f     F3 F2 F2 F6 
1a433     FB 01 05 08 
1a437     08 05 00 FA | 	byte	$08, $04, $ff, $f8, $f3, $f2, $f2, $f6, $fb, $01, $05, $08, $08, $05, $00, $fa
1a43b     F4 F2 F2 F4 
1a43f     FA FF 04 08 
1a443     09 05 01 FB 
1a447     F6 F2 F0 F3 | 	byte	$f4, $f2, $f2, $f4, $fa, $ff, $04, $08, $09, $05, $01, $fb, $f6, $f2, $f0, $f3
1a44b     F8 FE 04 08 
1a44f     09 08 02 FE 
1a453     F7 F3 F0 F2 
1a457     F6 FC 01 06 | 	byte	$f8, $fe, $04, $08, $09, $08, $02, $fe, $f7, $f3, $f0, $f2, $f6, $fc, $01, $06
1a45b     09 08 05 FF 
1a45f     FA F4 F2 F2 
1a463     F4 FA FF 05 
1a467     09 09 06 01 | 	byte	$09, $08, $05, $ff, $fa, $f4, $f2, $f2, $f4, $fa, $ff, $05, $09, $09, $06, $01
1a46b     FB F6 F2 F2 
1a46f     F3 FA FF 04 
1a473     08 09 08 02 
1a477     FE F7 F3 F2 | 	byte	$fb, $f6, $f2, $f2, $f3, $fa, $ff, $04, $08, $09, $08, $02, $fe, $f7, $f3, $f2
1a47b     F3 F7 FE 04 
1a47f     08 09 08 05 
1a483     FF F8 F3 F2 
1a487     F2 F6 FB 01 | 	byte	$f3, $f7, $fe, $04, $08, $09, $08, $05, $ff, $f8, $f3, $f2, $f2, $f6, $fb, $01
1a48b     06 09 09 05 
1a48f     00 FB F6 F2 
1a493     F2 F4 FA FF 
1a497     05 09 09 06 | 	byte	$06, $09, $09, $05, $00, $fb, $f6, $f2, $f2, $f4, $fa, $ff, $05, $09, $09, $06
1a49b     01 FB F6 F2 
1a49f     F0 F3 F8 FE 
1a4a3     04 08 09 08 
1a4a7     02 FE F7 F3 | 	byte	$01, $fb, $f6, $f2, $f0, $f3, $f8, $fe, $04, $08, $09, $08, $02, $fe, $f7, $f3
1a4ab     F0 F2 F6 FC 
1a4af     02 06 09 08 
1a4b3     04 FF F8 F3 
1a4b7     F0 F2 F4 FB | 	byte	$f0, $f2, $f6, $fc, $02, $06, $09, $08, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fb
1a4bb     00 05 09 09 
1a4bf     05 00 FA F4 
1a4c3     F0 F0 F3 F8 
1a4c7     FF 04 09 09 | 	byte	$00, $05, $09, $09, $05, $00, $fa, $f4, $f0, $f0, $f3, $f8, $ff, $04, $09, $09
1a4cb     06 01 FB F6 
1a4cf     F2 F0 F2 F7 
1a4d3     FE 02 08 09 
1a4d7     08 02 FE F7 | 	byte	$06, $01, $fb, $f6, $f2, $f0, $f2, $f7, $fe, $02, $08, $09, $08, $02, $fe, $f7
1a4db     F2 F0 F2 F6 
1a4df     FC 02 06 09 
1a4e3     09 05 FF F8 
1a4e7     F3 F0 F2 F4 | 	byte	$f2, $f0, $f2, $f6, $fc, $02, $06, $09, $09, $05, $ff, $f8, $f3, $f0, $f2, $f4
1a4eb     FB 01 06 09 
1a4ef     09 06 01 FA 
1a4f3     F4 F0 F0 F4 
1a4f7     FA FF 05 09 | 	byte	$fb, $01, $06, $09, $09, $06, $01, $fa, $f4, $f0, $f0, $f4, $fa, $ff, $05, $09
1a4fb     0A 06 02 FC 
1a4ff     F6 F2 F0 F3 
1a503     F8 FF 04 09 
1a507     0A 08 02 FE | 	byte	$0a, $06, $02, $fc, $f6, $f2, $f0, $f3, $f8, $ff, $04, $09, $0a, $08, $02, $fe
1a50b     F7 F2 F0 F2 
1a50f     F7 FE 04 08 
1a513     0A 09 04 FF 
1a517     F7 F3 F0 F2 | 	byte	$f7, $f2, $f0, $f2, $f7, $fe, $04, $08, $0a, $09, $04, $ff, $f7, $f3, $f0, $f2
1a51b     F6 FC 01 06 
1a51f     09 09 05 00 
1a523     FA F3 F0 F0 
1a527     F4 FA 01 06 | 	byte	$f6, $fc, $01, $06, $09, $09, $05, $00, $fa, $f3, $f0, $f0, $f4, $fa, $01, $06
1a52b     09 09 06 00 
1a52f     FB F4 F0 F0 
1a533     F3 F8 FF 05 
1a537     09 09 06 01 | 	byte	$09, $09, $06, $00, $fb, $f4, $f0, $f0, $f3, $f8, $ff, $05, $09, $09, $06, $01
1a53b     FB F6 F0 F0 
1a53f     F2 F7 FE 04 
1a543     08 09 08 02 
1a547     FC F6 F2 EF | 	byte	$fb, $f6, $f0, $f0, $f2, $f7, $fe, $04, $08, $09, $08, $02, $fc, $f6, $f2, $ef
1a54b     F2 F6 FC 02 
1a54f     08 09 08 04 
1a553     FE F8 F2 F0 
1a557     F0 F4 FB 01 | 	byte	$f2, $f6, $fc, $02, $08, $09, $08, $04, $fe, $f8, $f2, $f0, $f0, $f4, $fb, $01
1a55b     06 0A 09 05 
1a55f     00 FA F3 F0 
1a563     F0 F4 FA 01 
1a567     06 09 09 06 | 	byte	$06, $0a, $09, $05, $00, $fa, $f3, $f0, $f0, $f4, $fa, $01, $06, $09, $09, $06
1a56b     00 FA F4 F0 
1a56f     F0 F4 FA FF 
1a573     05 09 0A 08 
1a577     01 FB F6 F2 | 	byte	$00, $fa, $f4, $f0, $f0, $f4, $fa, $ff, $05, $09, $0a, $08, $01, $fb, $f6, $f2
1a57b     F0 F3 F8 FF 
1a57f     04 09 0A 08 
1a583     02 FC F6 F2 
1a587     F0 F2 F7 FE | 	byte	$f0, $f3, $f8, $ff, $04, $09, $0a, $08, $02, $fc, $f6, $f2, $f0, $f2, $f7, $fe
1a58b     04 09 0A 08 
1a58f     04 FE F7 F2 
1a593     F0 F2 F6 FC 
1a597     02 08 0A 09 | 	byte	$04, $09, $0a, $08, $04, $fe, $f7, $f2, $f0, $f2, $f6, $fc, $02, $08, $0a, $09
1a59b     05 FF F8 F3 
1a59f     F0 F2 F6 FB 
1a5a3     02 06 0A 09 
1a5a7     05 FF F8 F3 | 	byte	$05, $ff, $f8, $f3, $f0, $f2, $f6, $fb, $02, $06, $0a, $09, $05, $ff, $f8, $f3
1a5ab     F0 F0 F4 FA 
1a5af     FF 06 09 09 
1a5b3     05 00 FA F3 
1a5b7     F0 F0 F3 FA | 	byte	$f0, $f0, $f4, $fa, $ff, $06, $09, $09, $05, $00, $fa, $f3, $f0, $f0, $f3, $fa
1a5bb     FF 05 09 09 
1a5bf     06 01 FB F4 
1a5c3     F0 EF F3 F8 
1a5c7     FF 04 09 09 | 	byte	$ff, $05, $09, $09, $06, $01, $fb, $f4, $f0, $ef, $f3, $f8, $ff, $04, $09, $09
1a5cb     06 01 FB F4 
1a5cf     F0 EF F2 F7 
1a5d3     FF 04 08 09 
1a5d7     06 02 FC F6 | 	byte	$06, $01, $fb, $f4, $f0, $ef, $f2, $f7, $ff, $04, $08, $09, $06, $02, $fc, $f6
1a5db     F0 EF F2 F7 
1a5df     FE 04 08 0A 
1a5e3     08 02 FE F6 
1a5e7     F2 F0 F2 F6 | 	byte	$f0, $ef, $f2, $f7, $fe, $04, $08, $0a, $08, $02, $fe, $f6, $f2, $f0, $f2, $f6
1a5eb     FC 02 08 0A 
1a5ef     08 04 FF F7 
1a5f3     F2 F0 F2 F6 
1a5f7     FC 02 08 0A | 	byte	$fc, $02, $08, $0a, $08, $04, $ff, $f7, $f2, $f0, $f2, $f6, $fc, $02, $08, $0a
1a5fb     09 04 FF F8 
1a5ff     F3 F0 F2 F4 
1a603     FC 01 08 0A 
1a607     09 05 00 F8 | 	byte	$09, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fc, $01, $08, $0a, $09, $05, $00, $f8
1a60b     F3 F0 F0 F4 
1a60f     FA 01 06 0A 
1a613     09 05 00 FA 
1a617     F3 F0 F0 F3 | 	byte	$f3, $f0, $f0, $f4, $fa, $01, $06, $0a, $09, $05, $00, $fa, $f3, $f0, $f0, $f3
1a61b     FA FF 06 09 
1a61f     0A 06 00 FB 
1a623     F4 F0 F0 F3 
1a627     FA FF 05 09 | 	byte	$fa, $ff, $06, $09, $0a, $06, $00, $fb, $f4, $f0, $f0, $f3, $fa, $ff, $05, $09
1a62b     09 06 01 FB 
1a62f     F4 F0 EF F3 
1a633     F8 FF 04 09 
1a637     09 06 01 FB | 	byte	$09, $06, $01, $fb, $f4, $f0, $ef, $f3, $f8, $ff, $04, $09, $09, $06, $01, $fb
1a63b     F4 F0 EF F2 
1a63f     F8 FE 04 08 
1a643     09 06 01 FB 
1a647     F6 F0 EF F2 | 	byte	$f4, $f0, $ef, $f2, $f8, $fe, $04, $08, $09, $06, $01, $fb, $f6, $f0, $ef, $f2
1a64b     F7 FE 04 08 
1a64f     09 08 02 FC 
1a653     F6 F2 EF F2 
1a657     F7 FE 04 08 | 	byte	$f7, $fe, $04, $08, $09, $08, $02, $fc, $f6, $f2, $ef, $f2, $f7, $fe, $04, $08
1a65b     09 08 02 FE 
1a65f     F6 F2 EF F2 
1a663     F7 FC 02 08 
1a667     0A 08 04 FE | 	byte	$09, $08, $02, $fe, $f6, $f2, $ef, $f2, $f7, $fc, $02, $08, $0a, $08, $04, $fe
1a66b     F7 F2 F0 F2 
1a66f     F6 FC 02 08 
1a673     0A 09 05 FF 
1a677     F7 F3 F0 F2 | 	byte	$f7, $f2, $f0, $f2, $f6, $fc, $02, $08, $0a, $09, $05, $ff, $f7, $f3, $f0, $f2
1a67b     F6 FC 02 08 
1a67f     09 09 05 FF 
1a683     F8 F3 F0 F2 
1a687     F4 FC 01 06 | 	byte	$f6, $fc, $02, $08, $09, $09, $05, $ff, $f8, $f3, $f0, $f2, $f4, $fc, $01, $06
1a68b     09 09 05 00 
1a68f     F8 F3 F0 F2 
1a693     F4 FB 01 06 
1a697     09 09 05 00 | 	byte	$09, $09, $05, $00, $f8, $f3, $f0, $f2, $f4, $fb, $01, $06, $09, $09, $05, $00
1a69b     FA F3 F0 F0 
1a69f     F4 FA 00 06 
1a6a3     09 09 06 00 
1a6a7     FB F4 F0 F0 | 	byte	$fa, $f3, $f0, $f0, $f4, $fa, $00, $06, $09, $09, $06, $00, $fb, $f4, $f0, $f0
1a6ab     F3 FA FF 05 
1a6af     09 09 06 01 
1a6b3     FB F6 F0 F0 
1a6b7     F3 F8 FF 04 | 	byte	$f3, $fa, $ff, $05, $09, $09, $06, $01, $fb, $f6, $f0, $f0, $f3, $f8, $ff, $04
1a6bb     08 09 06 01 
1a6bf     FB F6 F0 F0 
1a6c3     F2 F8 FF 04 
1a6c7     08 09 06 01 | 	byte	$08, $09, $06, $01, $fb, $f6, $f0, $f0, $f2, $f8, $ff, $04, $08, $09, $06, $01
1a6cb     FC F6 F2 F0 
1a6cf     F2 F7 FE 02 
1a6d3     06 09 06 02 
1a6d7     FE F6 F2 F0 | 	byte	$fc, $f6, $f2, $f0, $f2, $f7, $fe, $02, $06, $09, $06, $02, $fe, $f6, $f2, $f0
1a6db     F2 F7 FC 02 
1a6df     06 09 08 04 
1a6e3     FE F7 F3 F0 
1a6e7     F2 F6 FC 01 | 	byte	$f2, $f7, $fc, $02, $06, $09, $08, $04, $fe, $f7, $f3, $f0, $f2, $f6, $fc, $01
1a6eb     06 09 08 04 
1a6ef     FF F8 F3 F0 
1a6f3     F2 F6 FB 01 
1a6f7     06 09 08 05 | 	byte	$06, $09, $08, $04, $ff, $f8, $f3, $f0, $f2, $f6, $fb, $01, $06, $09, $08, $05
1a6fb     FF FA F3 F2 
1a6ff     F2 F4 FB 00 
1a703     06 09 09 05 
1a707     00 FB F6 F2 | 	byte	$ff, $fa, $f3, $f2, $f2, $f4, $fb, $00, $06, $09, $09, $05, $00, $fb, $f6, $f2
1a70b     F2 F4 FA FF 
1a70f     05 09 09 05 
1a713     01 FB F6 F2 
1a717     F2 F3 FA FF | 	byte	$f2, $f4, $fa, $ff, $05, $09, $09, $05, $01, $fb, $f6, $f2, $f2, $f3, $fa, $ff
1a71b     04 08 09 06 
1a71f     01 FC F6 F2 
1a723     F0 F3 F8 FE 
1a727     04 08 09 06 | 	byte	$04, $08, $09, $06, $01, $fc, $f6, $f2, $f0, $f3, $f8, $fe, $04, $08, $09, $06
1a72b     02 FE F7 F3 
1a72f     F0 F2 F7 FC 
1a733     02 06 09 06 
1a737     02 FE F8 F3 | 	byte	$02, $fe, $f7, $f3, $f0, $f2, $f7, $fc, $02, $06, $09, $06, $02, $fe, $f8, $f3
1a73b     F0 F2 F6 FC 
1a73f     01 06 08 08 
1a743     04 FE F8 F3 
1a747     F0 F2 F4 FB | 	byte	$f0, $f2, $f6, $fc, $01, $06, $08, $08, $04, $fe, $f8, $f3, $f0, $f2, $f4, $fb
1a74b     FF 05 08 08 
1a74f     04 FF F8 F4 
1a753     F0 F0 F4 FA 
1a757     FF 04 08 08 | 	byte	$ff, $05, $08, $08, $04, $ff, $f8, $f4, $f0, $f0, $f4, $fa, $ff, $04, $08, $08
1a75b     05 00 FA F4 
1a75f     F2 F0 F4 FA 
1a763     FF 04 08 08 
1a767     05 01 FB F6 | 	byte	$05, $00, $fa, $f4, $f2, $f0, $f4, $fa, $ff, $04, $08, $08, $05, $01, $fb, $f6
1a76b     F2 F2 F3 F8 
1a76f     FE 02 06 08 
1a773     06 02 FC F7 
1a777     F3 F2 F3 F7 | 	byte	$f2, $f2, $f3, $f8, $fe, $02, $06, $08, $06, $02, $fc, $f7, $f3, $f2, $f3, $f7
1a77b     FE 02 06 08 
1a77f     06 02 FF F8 
1a783     F4 F2 F3 F7 
1a787     FC 01 05 08 | 	byte	$fe, $02, $06, $08, $06, $02, $ff, $f8, $f4, $f2, $f3, $f7, $fc, $01, $05, $08
1a78b     08 04 FF FA 
1a78f     F4 F2 F3 F6 
1a793     FB FF 05 08 
1a797     08 04 00 FB | 	byte	$08, $04, $ff, $fa, $f4, $f2, $f3, $f6, $fb, $ff, $05, $08, $08, $04, $00, $fb
1a79b     F6 F2 F2 F4 
1a79f     FA FF 04 06 
1a7a3     06 05 00 FB 
1a7a7     F6 F3 F2 F4 | 	byte	$f6, $f2, $f2, $f4, $fa, $ff, $04, $06, $06, $05, $00, $fb, $f6, $f3, $f2, $f4
1a7ab     F8 FE 02 06 
1a7af     08 05 01 FC 
1a7b3     F7 F3 F2 F3 
1a7b7     F7 FC 01 05 | 	byte	$f8, $fe, $02, $06, $08, $05, $01, $fc, $f7, $f3, $f2, $f3, $f7, $fc, $01, $05
1a7bb     06 05 02 FE 
1a7bf     F8 F3 F2 F3 
1a7c3     F7 FC FF 04 
1a7c7     06 06 02 FF | 	byte	$06, $05, $02, $fe, $f8, $f3, $f2, $f3, $f7, $fc, $ff, $04, $06, $06, $02, $ff
1a7cb     FA F4 F2 F3 
1a7cf     F6 FA FF 04 
1a7d3     06 05 02 FF 
1a7d7     FA F6 F3 F2 | 	byte	$fa, $f4, $f2, $f3, $f6, $fa, $ff, $04, $06, $05, $02, $ff, $fa, $f6, $f3, $f2
1a7db     F4 F8 FE 02 
1a7df     05 06 04 00 
1a7e3     FB F7 F3 F3 
1a7e7     F4 F8 FE 01 | 	byte	$f4, $f8, $fe, $02, $05, $06, $04, $00, $fb, $f7, $f3, $f3, $f4, $f8, $fe, $01
1a7eb     05 06 05 01 
1a7ef     FE F8 F4 F3 
1a7f3     F4 F7 FC 01 
1a7f7     04 06 05 02 | 	byte	$05, $06, $05, $01, $fe, $f8, $f4, $f3, $f4, $f7, $fc, $01, $04, $06, $05, $02
1a7fb     FF FA F6 F3 
1a7ff     F4 F7 FB FF 
1a803     04 06 05 04 
1a807     00 FB F6 F4 | 	byte	$ff, $fa, $f6, $f3, $f4, $f7, $fb, $ff, $04, $06, $05, $04, $00, $fb, $f6, $f4
1a80b     F4 F7 FA FF 
1a80f     02 05 05 04 
1a813     00 FC F7 F4 
1a817     F3 F6 FA FE | 	byte	$f4, $f7, $fa, $ff, $02, $05, $05, $04, $00, $fc, $f7, $f4, $f3, $f6, $fa, $fe
1a81b     01 04 05 04 
1a81f     00 FC F8 F6 
1a823     F3 F4 F8 FC 
1a827     01 04 05 04 | 	byte	$01, $04, $05, $04, $00, $fc, $f8, $f6, $f3, $f4, $f8, $fc, $01, $04, $05, $04
1a82b     01 FE FA F6 
1a82f     F4 F4 F7 FB 
1a833     FF 02 05 04 
1a837     01 FF FA F6 | 	byte	$01, $fe, $fa, $f6, $f4, $f4, $f7, $fb, $ff, $02, $05, $04, $01, $ff, $fa, $f6
1a83b     F4 F4 F6 FA 
1a83f     FF 01 04 04 
1a843     02 FF FB F7 
1a847     F4 F3 F6 F8 | 	byte	$f4, $f4, $f6, $fa, $ff, $01, $04, $04, $02, $ff, $fb, $f7, $f4, $f3, $f6, $f8
1a84b     FC FF 02 04 
1a84f     02 00 FC F8 
1a853     F6 F4 F4 F8 
1a857     FB FF 01 04 | 	byte	$fc, $ff, $02, $04, $02, $00, $fc, $f8, $f6, $f4, $f4, $f8, $fb, $ff, $01, $04
1a85b     02 00 FE FA 
1a85f     F6 F4 F4 F7 
1a863     FA FF 01 02 
1a867     02 01 FF FB | 	byte	$02, $00, $fe, $fa, $f6, $f4, $f4, $f7, $fa, $ff, $01, $02, $02, $01, $ff, $fb
1a86b     F7 F6 F4 F7 
1a86f     FA FE 00 02 
1a873     04 02 FF FC 
1a877     F8 F6 F6 F7 | 	byte	$f7, $f6, $f4, $f7, $fa, $fe, $00, $02, $04, $02, $ff, $fc, $f8, $f6, $f6, $f7
1a87b     FA FC FF 02 
1a87f     02 02 00 FE 
1a883     FA F7 F6 F7 
1a887     F8 FC FF 01 | 	byte	$fa, $fc, $ff, $02, $02, $02, $00, $fe, $fa, $f7, $f6, $f7, $f8, $fc, $ff, $01
1a88b     02 02 00 FE 
1a88f     FB F8 F7 F7 
1a893     F8 FB FE 00 
1a897     02 02 01 FF | 	byte	$02, $02, $00, $fe, $fb, $f8, $f7, $f7, $f8, $fb, $fe, $00, $02, $02, $01, $ff
1a89b     FB F8 F7 F7 
1a89f     F8 FA FE FF 
1a8a3     01 01 01 FF 
1a8a7     FC FA F8 F7 | 	byte	$fb, $f8, $f7, $f7, $f8, $fa, $fe, $ff, $01, $01, $01, $ff, $fc, $fa, $f8, $f7
1a8ab     F7 FA FC FF 
1a8af     00 01 01 FF 
1a8b3     FC FB F8 F7 
1a8b7     F7 F8 FB FE | 	byte	$f7, $fa, $fc, $ff, $00, $01, $01, $ff, $fc, $fb, $f8, $f7, $f7, $f8, $fb, $fe
1a8bb     FF 01 00 FF 
1a8bf     FE FB F8 F7 
1a8c3     F7 F8 FA FC 
1a8c7     FF FF 00 FF | 	byte	$ff, $01, $00, $ff, $fe, $fb, $f8, $f7, $f7, $f8, $fa, $fc, $ff, $ff, $00, $ff
1a8cb     FE FB FA F7 
1a8cf     F7 F8 FA FC 
1a8d3     FE FF FF FF 
1a8d7     FE FC FA F8 | 	byte	$fe, $fb, $fa, $f7, $f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fa, $f8
1a8db     F7 F7 F8 FB 
1a8df     FE FF FF FF 
1a8e3     FF FC FA F8 
1a8e7     F7 F7 F8 FA | 	byte	$f7, $f7, $f8, $fb, $fe, $ff, $ff, $ff, $ff, $fc, $fa, $f8, $f7, $f7, $f8, $fa
1a8eb     FC FF FF FF 
1a8ef     FF FE FB FA 
1a8f3     F8 F8 F8 FA 
1a8f7     FC FE FF FF | 	byte	$fc, $ff, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff
1a8fb     FF FE FC FA 
1a8ff     F8 F8 F8 FA 
1a903     FC FE FF FF 
1a907     FF FE FC FB | 	byte	$ff, $fe, $fc, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb
1a90b     FA F8 F8 FA 
1a90f     FB FC FE FF 
1a913     FF FF FC FB 
1a917     FA FA F8 FA | 	byte	$fa, $f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fc, $fb, $fa, $fa, $f8, $fa
1a91b     FB FC FE FF 
1a91f     FF FF FE FC 
1a923     FB FA F8 FA 
1a927     FA FB FC FE | 	byte	$fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $fa, $fa, $fb, $fc, $fe
1a92b     FF FE FE FC 
1a92f     FB FA FA FA 
1a933     FA FB FC FE 
1a937     FE FE FE FC | 	byte	$ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc
1a93b     FB FA FA FA 
1a93f     FA FB FB FC 
1a943     FE FE FE FC 
1a947     FB FA FA FA | 	byte	$fb, $fa, $fa, $fa, $fa, $fb, $fb, $fc, $fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa
1a94b     FA FA FB FC 
1a94f     FE FE FE FC 
1a953     FB FB FA FA 
1a957     FA FA FB FC | 	byte	$fa, $fa, $fb, $fc, $fe, $fe, $fe, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fb, $fc
1a95b     FC FE FE FE 
1a95f     FC FB FB FA 
1a963     FA FA FB FC 
1a967     FC FC FE FE | 	byte	$fc, $fe, $fe, $fe, $fc, $fb, $fb, $fa, $fa, $fa, $fb, $fc, $fc, $fc, $fe, $fe
1a96b     FC FC FB FB 
1a96f     FB FB FB FC 
1a973     FC 00 00 00 
1a977     00 09 F5 E5 | 	byte	$fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $00, $00, $00, $00, $09, $f5, $e5
1a97b     D3 BF A8 A6 
1a97f     B0 C5 EA FF 
1a983     10 14 23 29 
1a987     30 33 40 43 | 	byte	$d3, $bf, $a8, $a6, $b0, $c5, $ea, $ff, $10, $14, $23, $29, $30, $33, $40, $43
1a98b     49 6A 73 68 
1a98f     51 33 09 FA 
1a993     EC DF D7 CA 
1a997     C2 BF BA B3 | 	byte	$49, $6a, $73, $68, $51, $33, $09, $fa, $ec, $df, $d7, $ca, $c2, $bf, $ba, $b3
1a99b     AB 98 88 88 
1a99f     9B BA E4 03 
1a9a3     10 20 29 33 
1a9a7     3D 41 45 4D | 	byte	$ab, $98, $88, $88, $9b, $ba, $e4, $03, $10, $20, $29, $33, $3d, $41, $45, $4d
1a9ab     51 5D 7F 76 
1a9af     6A 53 29 03 
1a9b3     F4 E8 D8 D3 
1a9b7     C7 C7 BF BD | 	byte	$51, $5d, $7f, $76, $6a, $53, $29, $03, $f4, $e8, $d8, $d3, $c7, $c7, $bf, $bd
1a9bb     B2 AB 93 88 
1a9bf     95 AB CD FC 
1a9c3     11 1E 28 36 
1a9c7     3E 45 49 50 | 	byte	$b2, $ab, $93, $88, $95, $ab, $cd, $fc, $11, $1e, $28, $36, $3e, $45, $49, $50
1a9cb     53 56 75 7D 
1a9cf     78 63 4B 1B 
1a9d3     FF EF E2 D2 
1a9d7     D0 C7 BD BD | 	byte	$53, $56, $75, $7d, $78, $63, $4b, $1b, $ff, $ef, $e2, $d2, $d0, $c7, $bd, $bd
1a9db     B3 AF 9B 8A 
1a9df     90 9E B8 DD 
1a9e3     01 13 1C 2D 
1a9e7     38 3B 45 46 | 	byte	$b3, $af, $9b, $8a, $90, $9e, $b8, $dd, $01, $13, $1c, $2d, $38, $3b, $45, $46
1a9eb     4B 53 62 75 
1a9ef     73 68 51 38 
1a9f3     0C F2 EA DA 
1a9f7     CF C5 C2 BF | 	byte	$4b, $53, $62, $75, $73, $68, $51, $38, $0c, $f2, $ea, $da, $cf, $c5, $c2, $bf
1a9fb     B5 B0 A6 93 
1a9ff     8B 98 AA C2 
1aa03     E7 09 14 24 
1aa07     2E 36 3B 43 | 	byte	$b5, $b0, $a6, $93, $8b, $98, $aa, $c2, $e7, $09, $14, $24, $2e, $36, $3b, $43
1aa0b     46 4D 55 6A 
1aa0f     72 66 58 43 
1aa13     2D FF ED DC 
1aa17     D3 C8 C3 BF | 	byte	$46, $4d, $55, $6a, $72, $66, $58, $43, $2d, $ff, $ed, $dc, $d3, $c8, $c3, $bf
1aa1b     B7 B3 AA 9A 
1aa1f     8D 96 A0 B2 
1aa23     D0 F0 0C 19 
1aa27     26 30 3B 40 | 	byte	$b7, $b3, $aa, $9a, $8d, $96, $a0, $b2, $d0, $f0, $0c, $19, $26, $30, $3b, $40
1aa2b     43 49 50 5E 
1aa2f     6D 6B 5D 51 
1aa33     39 20 F8 EA 
1aa37     DD D2 CA C2 | 	byte	$43, $49, $50, $5e, $6d, $6b, $5d, $51, $39, $20, $f8, $ea, $dd, $d2, $ca, $c2
1aa3b     BD B8 AF AA 
1aa3f     90 98 9D AD 
1aa43     C3 DC 01 13 
1aa47     1C 29 35 3B | 	byte	$bd, $b8, $af, $aa, $90, $98, $9d, $ad, $c3, $dc, $01, $13, $1c, $29, $35, $3b
1aa4b     40 45 4B 51 
1aa4f     6B 6B 62 5A 
1aa53     45 35 14 F7 
1aa57     E7 DD D2 CB | 	byte	$40, $45, $4b, $51, $6b, $6b, $62, $5a, $45, $35, $14, $f7, $e7, $dd, $d2, $cb
1aa5b     BF C0 B7 AF 
1aa5f     98 9A 9D A3 
1aa63     B7 CB E5 04 
1aa67     16 24 30 38 | 	byte	$bf, $c0, $b7, $af, $98, $9a, $9d, $a3, $b7, $cb, $e5, $04, $16, $24, $30, $38
1aa6b     40 46 4B 51 
1aa6f     66 6B 65 5E 
1aa73     51 3D 2B 09 
1aa77     F0 E2 D5 D0 | 	byte	$40, $46, $4b, $51, $66, $6b, $65, $5e, $51, $3d, $2b, $09, $f0, $e2, $d5, $d0
1aa7b     C5 C0 B8 B3 
1aa7f     A0 9B 9D A3 
1aa83     B0 BF D5 ED 
1aa87     0C 20 28 35 | 	byte	$c5, $c0, $b8, $b3, $a0, $9b, $9d, $a3, $b0, $bf, $d5, $ed, $0c, $20, $28, $35
1aa8b     38 43 49 50 
1aa8f     5A 6B 66 62 
1aa93     53 49 35 21 
1aa97     00 E8 E0 D5 | 	byte	$38, $43, $49, $50, $5a, $6b, $66, $62, $53, $49, $35, $21, $00, $e8, $e0, $d5
1aa9b     CA C2 BF BA 
1aa9f     A8 A0 A0 A5 
1aaa3     AB BB C7 DD 
1aaa7     F7 13 23 2D | 	byte	$ca, $c2, $bf, $ba, $a8, $a0, $a0, $a5, $ab, $bb, $c7, $dd, $f7, $13, $23, $2d
1aaab     36 40 46 46 
1aaaf     55 65 63 63 
1aab3     5A 4B 43 2D 
1aab7     18 00 E5 DC | 	byte	$36, $40, $46, $46, $55, $65, $63, $63, $5a, $4b, $43, $2d, $18, $00, $e5, $dc
1aabb     CF CA C3 BB 
1aabf     B7 A3 A0 A3 
1aac3     AB B2 C5 CF 
1aac7     E7 F8 14 24 | 	byte	$cf, $ca, $c3, $bb, $b7, $a3, $a0, $a3, $ab, $b2, $c5, $cf, $e7, $f8, $14, $24
1aacb     2E 38 3E 46 
1aacf     4D 5B 63 5D 
1aad3     5B 51 45 38 
1aad7     29 13 FC E4 | 	byte	$2e, $38, $3e, $46, $4d, $5b, $63, $5d, $5b, $51, $45, $38, $29, $13, $fc, $e4
1aadb     DC CF C8 C0 
1aadf     B7 AA A5 A3 
1aae3     AA B2 BB CB 
1aae7     DD EA 00 16 | 	byte	$dc, $cf, $c8, $c0, $b7, $aa, $a5, $a3, $aa, $b2, $bb, $cb, $dd, $ea, $00, $16
1aaeb     26 30 36 3E 
1aaef     45 50 5B 5D 
1aaf3     58 51 46 3D 
1aaf7     2B 1C 08 FC | 	byte	$26, $30, $36, $3e, $45, $50, $5b, $5d, $58, $51, $46, $3d, $2b, $1c, $08, $fc
1aafb     E4 DA D0 CA 
1aaff     C2 B5 AB AA 
1ab03     AA B0 B7 C5 
1ab07     CF E5 F2 01 | 	byte	$e4, $da, $d0, $ca, $c2, $b5, $ab, $aa, $aa, $b0, $b7, $c5, $cf, $e5, $f2, $01
1ab0b     14 23 30 31 
1ab0f     3E 49 4D 56 
1ab13     56 51 4D 3D 
1ab17     36 24 18 08 | 	byte	$14, $23, $30, $31, $3e, $49, $4d, $56, $56, $51, $4d, $3d, $36, $24, $18, $08
1ab1b     F7 EA D8 CF 
1ab1f     CA BD B3 B0 
1ab23     AF AF B3 C0 
1ab27     CD D7 E5 F8 | 	byte	$f7, $ea, $d8, $cf, $ca, $bd, $b3, $b0, $af, $af, $b3, $c0, $cd, $d7, $e5, $f8
1ab2b     09 1E 2B 46 
1ab2f     63 39 3D 38 
1ab33     2B 14 08 04 
1ab37     03 0B 16 11 | 	byte	$09, $1e, $2b, $46, $63, $39, $3d, $38, $2b, $14, $08, $04, $03, $0b, $16, $11
1ab3b     10 03 00 FA 
1ab3f     F4 EF EF EA 
1ab43     F4 03 0B 03 
1ab47     FF EA E5 E7 | 	byte	$10, $03, $00, $fa, $f4, $ef, $ef, $ea, $f4, $03, $0b, $03, $ff, $ea, $e5, $e7
1ab4b     EA EF F4 F7 
1ab4f     FC 03 03 04 
1ab53     01 F5 EC F2 
1ab57     F5 FF 16 16 | 	byte	$ea, $ef, $f4, $f7, $fc, $03, $03, $04, $01, $f5, $ec, $f2, $f5, $ff, $16, $16
1ab5b     14 11 0E 09 
1ab5f     03 01 FC FA 
1ab63     FD 01 16 10 
1ab67     10 04 F2 EA | 	byte	$14, $11, $0e, $09, $03, $01, $fc, $fa, $fd, $01, $16, $10, $10, $04, $f2, $ea
1ab6b     EA F0 F0 F4 
1ab6f     F7 FF 01 04 
1ab73     08 01 F5 F0 
1ab77     F7 FD 0E 1B | 	byte	$ea, $f0, $f0, $f4, $f7, $ff, $01, $04, $08, $01, $f5, $f0, $f7, $fd, $0e, $1b
1ab7b     1C 1B 1B 16 
1ab7f     13 0B 0B 01 
1ab83     06 04 18 16 
1ab87     18 10 06 F2 | 	byte	$1c, $1b, $1b, $16, $13, $0b, $0b, $01, $06, $04, $18, $16, $18, $10, $06, $f2
1ab8b     E8 ED E8 EA 
1ab8f     F4 F4 FC FD 
1ab93     FD FD F5 E7 
1ab97     EF EC FA 08 | 	byte	$e8, $ed, $e8, $ea, $f4, $f4, $fc, $fd, $fd, $fd, $f5, $e7, $ef, $ec, $fa, $08
1ab9b     18 19 18 1C 
1ab9f     10 13 0E 0B 
1aba3     08 09 10 1B 
1aba7     1C 14 0E 08 | 	byte	$18, $19, $18, $1c, $10, $13, $0e, $0b, $08, $09, $10, $1b, $1c, $14, $0e, $08
1abab     EF EC ED E8 
1abaf     ED EC F2 F7 
1abb3     F7 F8 F0 E8 
1abb7     E0 E8 F0 F7 | 	byte	$ef, $ec, $ed, $e8, $ed, $ec, $f2, $f7, $f7, $f8, $f0, $e8, $e0, $e8, $f0, $f7
1abbb     09 1B 1B 19 
1abbf     19 19 10 11 
1abc3     0B 0C 0B 1B 
1abc7     1B 1E 11 0B | 	byte	$09, $1b, $1b, $19, $19, $19, $10, $11, $0b, $0c, $0b, $1b, $1b, $1e, $11, $0b
1abcb     00 EC E5 E5 
1abcf     E7 EC EA F4 
1abd3     F4 F4 F7 EF 
1abd7     E2 E7 EC F0 | 	byte	$00, $ec, $e5, $e5, $e7, $ec, $ea, $f4, $f4, $f4, $f7, $ef, $e2, $e7, $ec, $f0
1abdb     00 0E 1C 20 
1abdf     1E 1B 1B 16 
1abe3     11 0E 10 14 
1abe7     1B 21 18 11 | 	byte	$00, $0e, $1c, $20, $1e, $1b, $1b, $16, $11, $0e, $10, $14, $1b, $21, $18, $11
1abeb     0C FD EC E7 
1abef     EA E8 EA F2 
1abf3     EF F5 F4 F4 
1abf7     E5 E4 E7 EC | 	byte	$0c, $fd, $ec, $e7, $ea, $e8, $ea, $f2, $ef, $f5, $f4, $f4, $e5, $e4, $e7, $ec
1abfb     F4 FD 10 1B 
1abff     18 1C 18 14 
1ac03     14 0C 0E 0C 
1ac07     1C 1E 1E 16 | 	byte	$f4, $fd, $10, $1b, $18, $1c, $18, $14, $14, $0c, $0e, $0c, $1c, $1e, $1e, $16
1ac0b     13 08 FF EC 
1ac0f     EC E7 E7 EF 
1ac13     EF F0 F0 F7 
1ac17     E8 E4 E7 E8 | 	byte	$13, $08, $ff, $ec, $ec, $e7, $e7, $ef, $ef, $f0, $f0, $f7, $e8, $e4, $e7, $e8
1ac1b     ED F8 01 0B 
1ac1f     19 1C 18 16 
1ac23     14 14 10 10 
1ac27     14 20 20 1C | 	byte	$ed, $f8, $01, $0b, $19, $1c, $18, $16, $14, $14, $10, $10, $14, $20, $20, $1c
1ac2b     16 11 09 FC 
1ac2f     F2 EA E8 ED 
1ac33     ED EF F2 F0 
1ac37     EF E4 E4 E2 | 	byte	$16, $11, $09, $fc, $f2, $ea, $e8, $ed, $ed, $ef, $f2, $f0, $ef, $e4, $e4, $e2
1ac3b     E7 EF F4 00 
1ac3f     0E 18 1C 18 
1ac43     16 1B 11 14 
1ac47     16 21 24 20 | 	byte	$e7, $ef, $f4, $00, $0e, $18, $1c, $18, $16, $1b, $11, $14, $16, $21, $24, $20
1ac4b     23 19 10 09 
1ac4f     FC F0 E2 E7 
1ac53     E5 E5 E4 E8 
1ac57     E8 DF DC DF | 	byte	$23, $19, $10, $09, $fc, $f0, $e2, $e7, $e5, $e5, $e4, $e8, $e8, $df, $dc, $df
1ac5b     DF E4 EA F2 
1ac5f     FF 09 1E 1B 
1ac63     1C 1B 1C 1B 
1ac67     19 1C 28 24 | 	byte	$df, $e4, $ea, $f2, $ff, $09, $1e, $1b, $1c, $1b, $1c, $1b, $19, $1c, $28, $24
1ac6b     20 1C 14 0E 
1ac6f     08 00 EF E7 
1ac73     E8 E5 EA E5 
1ac77     EA E5 E0 DD | 	byte	$20, $1c, $14, $0e, $08, $00, $ef, $e7, $e8, $e5, $ea, $e5, $ea, $e5, $e0, $dd
1ac7b     E0 DD E7 EC 
1ac7f     F2 00 06 11 
1ac83     19 16 16 19 
1ac87     16 19 1E 23 | 	byte	$e0, $dd, $e7, $ec, $f2, $00, $06, $11, $19, $16, $16, $19, $16, $19, $1e, $23
1ac8b     23 23 21 1B 
1ac8f     16 09 03 FD 
1ac93     ED EA EA E8 
1ac97     E4 E7 DD D7 | 	byte	$23, $23, $21, $1b, $16, $09, $03, $fd, $ed, $ea, $ea, $e8, $e4, $e7, $dd, $d7
1ac9b     D8 DC DC E7 
1ac9f     EC F7 01 09 
1aca3     11 1E 20 1B 
1aca7     1E 23 23 29 | 	byte	$d8, $dc, $dc, $e7, $ec, $f7, $01, $09, $11, $1e, $20, $1b, $1e, $23, $23, $29
1acab     2B 28 23 23 
1acaf     16 13 08 FD 
1acb3     F7 ED E8 E8 
1acb7     E4 E5 DD DC | 	byte	$2b, $28, $23, $23, $16, $13, $08, $fd, $f7, $ed, $e8, $e8, $e4, $e5, $dd, $dc
1acbb     DD DF DD E2 
1acbf     EA F4 FA FD 
1acc3     06 11 14 1E 
1acc7     1E 20 26 2B | 	byte	$dd, $df, $dd, $e2, $ea, $f4, $fa, $fd, $06, $11, $14, $1e, $1e, $20, $26, $2b
1accb     2D 2E 2B 29 
1accf     23 1C 14 09 
1acd3     04 FF F4 ED 
1acd7     E8 E4 DD DC | 	byte	$2d, $2e, $2b, $29, $23, $1c, $14, $09, $04, $ff, $f4, $ed, $e8, $e4, $dd, $dc
1acdb     DA D7 D8 DA 
1acdf     DC E4 EC F2 
1ace3     FC 03 0E 1C 
1ace7     1C 2B 28 2D | 	byte	$da, $d7, $d8, $da, $dc, $e4, $ec, $f2, $fc, $03, $0e, $1c, $1c, $2b, $28, $2d
1aceb     2E 2B 29 29 
1acef     21 19 16 11 
1acf3     04 FF F0 EC 
1acf7     E0 E0 D8 D8 | 	byte	$2e, $2b, $29, $29, $21, $19, $16, $11, $04, $ff, $f0, $ec, $e0, $e0, $d8, $d8
1acfb     DC D5 D8 DC 
1acff     DD E0 E8 ED 
1ad03     F7 03 0C 14 
1ad07     23 24 28 2B | 	byte	$dc, $d5, $d8, $dc, $dd, $e0, $e8, $ed, $f7, $03, $0c, $14, $23, $24, $28, $2b
1ad0b     29 26 28 21 
1ad0f     1C 20 16 11 
1ad13     0E 00 F8 F0 
1ad17     E4 E0 DD D8 | 	byte	$29, $26, $28, $21, $1c, $20, $16, $11, $0e, $00, $f8, $f0, $e4, $e0, $dd, $d8
1ad1b     DC DC E2 DD 
1ad1f     E2 EA E7 F0 
1ad23     F7 FF 06 14 
1ad27     1B 1C 23 24 | 	byte	$dc, $dc, $e2, $dd, $e2, $ea, $e7, $f0, $f7, $ff, $06, $14, $1b, $1c, $23, $24
1ad2b     26 20 23 23 
1ad2f     1C 16 11 0E 
1ad33     06 FF FD F4 
1ad37     E5 E7 DF DA | 	byte	$26, $20, $23, $23, $1c, $16, $11, $0e, $06, $ff, $fd, $f4, $e5, $e7, $df, $da
1ad3b     E5 DD DF DD 
1ad3f     E5 E4 EA F4 
1ad43     F4 FC 03 08 
1ad47     14 16 1B 21 | 	byte	$e5, $dd, $df, $dd, $e5, $e4, $ea, $f4, $f4, $fc, $03, $08, $14, $16, $1b, $21
1ad4b     23 20 1E 21 
1ad4f     20 1B 19 16 
1ad53     0C 0B 01 FC 
1ad57     F8 F2 EA E7 | 	byte	$23, $20, $1e, $21, $20, $1b, $19, $16, $0c, $0b, $01, $fc, $f8, $f2, $ea, $e7
1ad5b     E7 DC E5 E2 
1ad5f     DD E4 E2 E2 
1ad63     ED F5 F8 04 
1ad67     0B 14 1B 24 | 	byte	$e7, $dc, $e5, $e2, $dd, $e4, $e2, $e2, $ed, $f5, $f8, $04, $0b, $14, $1b, $24
1ad6b     23 26 23 1E 
1ad6f     1E 1C 13 16 
1ad73     11 06 01 00 
1ad77     F5 F2 F0 E5 | 	byte	$23, $26, $23, $1e, $1e, $1c, $13, $16, $11, $06, $01, $00, $f5, $f2, $f0, $e5
1ad7b     E2 E7 E5 E5 
1ad7f     E2 E7 E5 ED 
1ad83     F2 F8 00 06 
1ad87     0B 16 1C 1C | 	byte	$e2, $e7, $e5, $e5, $e2, $e7, $e5, $ed, $f2, $f8, $00, $06, $0b, $16, $1c, $1c
1ad8b     1C 23 23 20 
1ad8f     24 1C 1C 1B 
1ad93     18 0E 09 03 
1ad97     FC F7 EA EA | 	byte	$1c, $23, $23, $20, $24, $1c, $1c, $1b, $18, $0e, $09, $03, $fc, $f7, $ea, $ea
1ad9b     E2 DD DD DD 
1ad9f     DD DD E0 E5 
1ada3     E8 F2 FC 01 
1ada7     09 11 1B 1C | 	byte	$e2, $dd, $dd, $dd, $dd, $dd, $e0, $e5, $e8, $f2, $fc, $01, $09, $11, $1b, $1c
1adab     26 24 2B 2B 
1adaf     2D 2D 2E 28 
1adb3     1B 18 09 00 
1adb7     F7 EF E8 E8 | 	byte	$26, $24, $2b, $2b, $2d, $2d, $2e, $28, $1b, $18, $09, $00, $f7, $ef, $e8, $e8
1adbb     DC E0 DD D7 
1adbf     DA D5 DA E0 
1adc3     E4 EF F5 03 
1adc7     0C 13 1B 1E | 	byte	$dc, $e0, $dd, $d7, $da, $d5, $da, $e0, $e4, $ef, $f5, $03, $0c, $13, $1b, $1e
1adcb     1C 26 28 24 
1adcf     29 29 26 24 
1add3     1C 16 08 FF 
1add7     F4 EA E5 E0 | 	byte	$1c, $26, $28, $24, $29, $29, $26, $24, $1c, $16, $08, $ff, $f4, $ea, $e5, $e0
1addb     E4 DD E2 DC 
1addf     E4 DD E0 E8 
1ade3     EA F0 FC 04 
1ade7     10 16 1B 1C | 	byte	$e4, $dd, $e2, $dc, $e4, $dd, $e0, $e8, $ea, $f0, $fc, $04, $10, $16, $1b, $1c
1adeb     1B 1C 20 1E 
1adef     1E 1C 1E 1E 
1adf3     16 18 0E FD 
1adf7     F8 EF EC EC | 	byte	$1b, $1c, $20, $1e, $1e, $1c, $1e, $1e, $16, $18, $0e, $fd, $f8, $ef, $ec, $ec
1adfb     EA EA EC ED 
1adff     E8 E8 E8 E7 
1ae03     E8 EC F0 FF 
1ae07     06 0E 13 18 | 	byte	$ea, $ea, $ec, $ed, $e8, $e8, $e8, $e7, $e8, $ec, $f0, $ff, $06, $0e, $13, $18
1ae0b     1B 18 1C 1E 
1ae0f     1B 23 1C 1E 
1ae13     1C 18 11 0B 
1ae17     FA F4 EF E5 | 	byte	$1b, $18, $1c, $1e, $1b, $23, $1c, $1e, $1c, $18, $11, $0b, $fa, $f4, $ef, $e5
1ae1b     E7 EA EC E7 
1ae1f     E7 E8 E0 E5 
1ae23     E5 ED E8 FC 
1ae27     04 11 13 1C | 	byte	$e7, $ea, $ec, $e7, $e7, $e8, $e0, $e5, $e5, $ed, $e8, $fc, $04, $11, $13, $1c
1ae2b     1E 1B 18 1C 
1ae2f     1E 1C 1E 23 
1ae33     1B 1C 18 11 
1ae37     01 FA ED E8 | 	byte	$1e, $1b, $18, $1c, $1e, $1c, $1e, $23, $1b, $1c, $18, $11, $01, $fa, $ed, $e8
1ae3b     E7 E5 EA EA 
1ae3f     E4 E2 E4 E2 
1ae43     E2 E5 E0 EA 
1ae47     F7 01 0C 16 | 	byte	$e7, $e5, $ea, $ea, $e4, $e2, $e4, $e2, $e2, $e5, $e0, $ea, $f7, $01, $0c, $16
1ae4b     1C 1E 1E 1B 
1ae4f     21 26 23 23 
1ae53     23 21 19 16 
1ae57     10 00 FC E8 | 	byte	$1c, $1e, $1e, $1b, $21, $26, $23, $23, $23, $21, $19, $16, $10, $00, $fc, $e8
1ae5b     E4 E5 E0 E7 
1ae5f     DC DA DF E2 
1ae63     E2 E7 E7 ED 
1ae67     F0 FD 08 11 | 	byte	$e4, $e5, $e0, $e7, $dc, $da, $df, $e2, $e2, $e7, $e7, $ed, $f0, $fd, $08, $11
1ae6b     1B 20 1E 1E 
1ae6f     24 21 21 21 
1ae73     1E 16 18 11 
1ae77     10 04 FA F2 | 	byte	$1b, $20, $1e, $1e, $24, $21, $21, $21, $1e, $16, $18, $11, $10, $04, $fa, $f2
1ae7b     E8 E4 DF E2 
1ae7f     E0 E2 E7 E4 
1ae83     E8 E8 ED EA 
1ae87     F0 F7 04 10 | 	byte	$e8, $e4, $df, $e2, $e0, $e2, $e7, $e4, $e8, $e8, $ed, $ea, $f0, $f7, $04, $10
1ae8b     1B 21 23 24 
1ae8f     23 23 1E 18 
1ae93     14 19 16 13 
1ae97     13 0B 01 F5 | 	byte	$1b, $21, $23, $24, $23, $23, $1e, $18, $14, $19, $16, $13, $13, $0b, $01, $f5
1ae9b     EF E4 E2 DF 
1ae9f     DD E2 E0 E5 
1aea3     E5 E5 E4 E4 
1aea7     E2 F5 FD 04 | 	byte	$ef, $e4, $e2, $df, $dd, $e2, $e0, $e5, $e5, $e5, $e4, $e4, $e2, $f5, $fd, $04
1aeab     10 19 1E 26 
1aeaf     29 20 24 20 
1aeb3     1E 1C 23 20 
1aeb7     1B 14 04 F8 | 	byte	$10, $19, $1e, $26, $29, $20, $24, $20, $1e, $1c, $23, $20, $1b, $14, $04, $f8
1aebb     F4 EC E2 DF 
1aebf     DF DF DC E2 
1aec3     DD E2 DD DD 
1aec7     DF E7 F0 00 | 	byte	$f4, $ec, $e2, $df, $df, $df, $dc, $e2, $dd, $e2, $dd, $dd, $df, $e7, $f0, $00
1aecb     0E 14 1B 20 
1aecf     28 26 28 26 
1aed3     28 21 24 29 
1aed7     23 20 16 06 | 	byte	$0e, $14, $1b, $20, $28, $26, $28, $26, $28, $21, $24, $29, $23, $20, $16, $06
1aedb     F7 EF EA DD 
1aedf     DA D7 D8 DC 
1aee3     DD E0 E5 DF 
1aee7     E0 EA F2 FC | 	byte	$f7, $ef, $ea, $dd, $da, $d7, $d8, $dc, $dd, $e0, $e5, $df, $e0, $ea, $f2, $fc
1aeeb     0B 13 19 23 
1aeef     2B 29 2B 23 
1aef3     1E 1C 1C 19 
1aef7     1C 16 13 03 | 	byte	$0b, $13, $19, $23, $2b, $29, $2b, $23, $1e, $1c, $1c, $19, $1c, $16, $13, $03
1aefb     F7 ED E7 DF 
1aeff     D7 D0 D7 DF 
1af03     E2 EA EF EF 
1af07     F2 F7 FA FD | 	byte	$f7, $ed, $e7, $df, $d7, $d0, $d7, $df, $e2, $ea, $ef, $ef, $f2, $f7, $fa, $fd
1af0b     06 0C 11 14 
1af0f     1C 20 1E 19 
1af13     1C 18 16 14 
1af17     16 14 19 0E | 	byte	$06, $0c, $11, $14, $1c, $20, $1e, $19, $1c, $18, $16, $14, $16, $14, $19, $0e
1af1b     06 FC FA EF 
1af1f     EA E4 DD E4 
1af23     EA EA E7 EC 
1af27     E5 DF E8 F0 | 	byte	$06, $fc, $fa, $ef, $ea, $e4, $dd, $e4, $ea, $ea, $e7, $ec, $e5, $df, $e8, $f0
1af2b     F8 09 0E 16 
1af2f     23 26 2D 28 
1af33     24 1C 1C 1B 
1af37     19 1B 19 10 | 	byte	$f8, $09, $0e, $16, $23, $26, $2d, $28, $24, $1c, $1c, $1b, $19, $1b, $19, $10
1af3b     04 FD EF E5 
1af3f     DF D8 D7 DD 
1af43     E4 E4 E8 ED 
1af47     EC EC EC F4 | 	byte	$04, $fd, $ef, $e5, $df, $d8, $d7, $dd, $e4, $e4, $e8, $ed, $ec, $ec, $ec, $f4
1af4b     FF 09 13 1C 
1af4f     29 2D 35 2D 
1af53     28 1C 1E 11 
1af57     13 10 11 0B | 	byte	$ff, $09, $13, $1c, $29, $2d, $35, $2d, $28, $1c, $1e, $11, $13, $10, $11, $0b
1af5b     01 FC F0 E4 
1af5f     DF DC D7 DC 
1af63     E4 E7 E8 EF 
1af67     ED ED F2 F7 | 	byte	$01, $fc, $f0, $e4, $df, $dc, $d7, $dc, $e4, $e7, $e8, $ef, $ed, $ed, $f2, $f7
1af6b     FF 08 13 1E 
1af6f     28 2D 2D 26 
1af73     1C 20 1B 14 
1af77     16 10 14 11 | 	byte	$ff, $08, $13, $1e, $28, $2d, $2d, $26, $1c, $20, $1b, $14, $16, $10, $14, $11
1af7b     0C FF F7 E7 
1af7f     DF DA D5 D5 
1af83     DF E0 DF E4 
1af87     E5 E5 E7 F2 | 	byte	$0c, $ff, $f7, $e7, $df, $da, $d5, $d5, $df, $e0, $df, $e4, $e5, $e5, $e7, $f2
1af8b     F5 01 0B 1C 
1af8f     24 2B 30 33 
1af93     2B 21 24 24 
1af97     1E 1B 1C 14 | 	byte	$f5, $01, $0b, $1c, $24, $2b, $30, $33, $2b, $21, $24, $24, $1e, $1b, $1c, $14
1af9b     09 01 F7 EA 
1af9f     DF DA D5 D3 
1afa3     D7 DA DD DF 
1afa7     DF E5 E8 F0 | 	byte	$09, $01, $f7, $ea, $df, $da, $d5, $d3, $d7, $da, $dd, $df, $df, $e5, $e8, $f0
1afab     FC 04 09 13 
1afaf     1C 2B 2E 2D 
1afb3     2B 24 21 23 
1afb7     21 23 21 1C | 	byte	$fc, $04, $09, $13, $1c, $2b, $2e, $2d, $2b, $24, $21, $23, $21, $23, $21, $1c
1afbb     16 0B 00 FD 
1afbf     EF E7 DA D0 
1afc3     D5 DD DC DF 
1afc7     DC E0 DF E2 | 	byte	$16, $0b, $00, $fd, $ef, $e7, $da, $d0, $d5, $dd, $dc, $df, $dc, $e0, $df, $e2
1afcb     EF F8 00 06 
1afcf     0C 19 20 26 
1afd3     2B 28 20 20 
1afd7     23 24 21 23 | 	byte	$ef, $f8, $00, $06, $0c, $19, $20, $26, $2b, $28, $20, $20, $23, $24, $21, $23
1afdb     19 0E 08 01 
1afdf     F8 F4 E8 E2 
1afe3     E4 E5 E8 EC 
1afe7     EA EC E5 E7 | 	byte	$19, $0e, $08, $01, $f8, $f4, $e8, $e2, $e4, $e5, $e8, $ec, $ea, $ec, $e5, $e7
1afeb     EA F4 FC 03 
1afef     0B 0C 11 16 
1aff3     1B 1B 1C 1B 
1aff7     16 19 24 2E | 	byte	$ea, $f4, $fc, $03, $0b, $0c, $11, $16, $1b, $1b, $1c, $1b, $16, $19, $24, $2e
1affb     24 1C 13 09 
1afff     08 00 F5 EC 
1b003     E2 DF E4 E7 
1b007     E8 E4 DF DC | 	byte	$24, $1c, $13, $09, $08, $00, $f5, $ec, $e2, $df, $e4, $e7, $e8, $e4, $df, $dc
1b00b     DD E8 EA F5 
1b00f     FC 03 0B 14 
1b013     19 24 24 23 
1b017     21 23 2E 30 | 	byte	$dd, $e8, $ea, $f5, $fc, $03, $0b, $14, $19, $24, $24, $23, $21, $23, $2e, $30
1b01b     30 29 1B 14 
1b01f     0E 01 F5 E4 
1b023     E4 DC DC DF 
1b027     E0 E7 DA D8 | 	byte	$30, $29, $1b, $14, $0e, $01, $f5, $e4, $e4, $dc, $dc, $df, $e0, $e7, $da, $d8
1b02b     D3 D8 DD E5 
1b02f     ED FC 03 11 
1b033     18 20 26 26 
1b037     23 20 28 30 | 	byte	$d3, $d8, $dd, $e5, $ed, $fc, $03, $11, $18, $20, $26, $26, $23, $20, $28, $30
1b03b     35 35 29 26 
1b03f     19 0C 03 F8 
1b043     EA DA D2 D5 
1b047     D0 CF D3 D3 | 	byte	$35, $35, $29, $26, $19, $0c, $03, $f8, $ea, $da, $d2, $d5, $d0, $cf, $d3, $d3
1b04b     D3 D7 E4 EC 
1b04f     EF 00 08 14 
1b053     1C 23 29 2D 
1b057     2D 30 2E 2B | 	byte	$d3, $d7, $e4, $ec, $ef, $00, $08, $14, $1c, $23, $29, $2d, $2d, $30, $2e, $2b
1b05b     29 28 21 18 
1b05f     11 0B FD F5 
1b063     E7 DD D7 D2 
1b067     CD CF CB D3 | 	byte	$29, $28, $21, $18, $11, $0b, $fd, $f5, $e7, $dd, $d7, $d2, $cd, $cf, $cb, $d3
1b06b     DA DC E0 EA 
1b06f     EF F5 FF 04 
1b073     14 1E 23 2B 
1b077     35 38 33 33 | 	byte	$da, $dc, $e0, $ea, $ef, $f5, $ff, $04, $14, $1e, $23, $2b, $35, $38, $33, $33
1b07b     2D 23 21 1C 
1b07f     16 11 03 FC 
1b083     ED E2 DA D3 
1b087     CD C5 C8 D2 | 	byte	$2d, $23, $21, $1c, $16, $11, $03, $fc, $ed, $e2, $da, $d3, $cd, $c5, $c8, $d2
1b08b     D5 DD EA F0 
1b08f     F0 FA 01 0E 
1b093     16 19 20 21 
1b097     28 2E 31 31 | 	byte	$d5, $dd, $ea, $f0, $f0, $fa, $01, $0e, $16, $19, $20, $21, $28, $2e, $31, $31
1b09b     2E 26 20 1C 
1b09f     19 13 09 FC 
1b0a3     F2 E8 E0 DD 
1b0a7     D8 D0 CA D0 | 	byte	$2e, $26, $20, $1c, $19, $13, $09, $fc, $f2, $e8, $e0, $dd, $d8, $d0, $ca, $d0
1b0ab     D2 DC EA F2 
1b0af     F2 F5 00 0B 
1b0b3     11 16 1E 23 
1b0b7     24 29 30 30 | 	byte	$d2, $dc, $ea, $f2, $f2, $f5, $00, $0b, $11, $16, $1e, $23, $24, $29, $30, $30
1b0bb     2B 28 20 19 
1b0bf     16 10 09 FF 
1b0c3     F8 F0 EA E4 
1b0c7     E4 E0 DA D3 | 	byte	$2b, $28, $20, $19, $16, $10, $09, $ff, $f8, $f0, $ea, $e4, $e4, $e0, $da, $d3
1b0cb     D0 D7 DA E8 
1b0cf     EA E8 F4 FD 
1b0d3     09 11 14 19 
1b0d7     1C 23 28 38 | 	byte	$d0, $d7, $da, $e8, $ea, $e8, $f4, $fd, $09, $11, $14, $19, $1c, $23, $28, $38
1b0db     38 30 28 23 
1b0df     14 19 10 01 
1b0e3     FA F0 F0 E8 
1b0e7     E7 E4 DF D8 | 	byte	$38, $30, $28, $23, $14, $19, $10, $01, $fa, $f0, $f0, $e8, $e7, $e4, $df, $d8
1b0eb     D2 CF D5 E0 
1b0ef     E7 EC EF F8 
1b0f3     FD 09 0C 14 
1b0f7     19 1E 20 28 | 	byte	$d2, $cf, $d5, $e0, $e7, $ec, $ef, $f8, $fd, $09, $0c, $14, $19, $1e, $20, $28
1b0fb     2E 2D 30 26 
1b0ff     1C 16 0E 04 
1b103     FF F8 F5 EA 
1b107     E5 E4 DD DC | 	byte	$2e, $2d, $30, $26, $1c, $16, $0e, $04, $ff, $f8, $f5, $ea, $e5, $e4, $dd, $dc
1b10b     D8 D8 D5 DF 
1b10f     E8 F0 F8 00 
1b113     04 01 08 0C 
1b117     13 16 20 21 | 	byte	$d8, $d8, $d5, $df, $e8, $f0, $f8, $00, $04, $01, $08, $0c, $13, $16, $20, $21
1b11b     28 26 2E 28 
1b11f     21 18 0C 08 
1b123     00 FF FF F8 
1b127     F4 F4 F0 E5 | 	byte	$28, $26, $2e, $28, $21, $18, $0c, $08, $00, $ff, $ff, $f8, $f4, $f4, $f0, $e5
1b12b     E0 DC D8 D7 
1b12f     DC E5 F0 F2 
1b133     F7 FC FD 01 
1b137     08 08 09 14 | 	byte	$e0, $dc, $d8, $d7, $dc, $e5, $f0, $f2, $f7, $fc, $fd, $01, $08, $08, $09, $14
1b13b     1C 20 2B 30 
1b13f     2E 23 1B 16 
1b143     0C 0B 04 03 
1b147     FF 00 FC F0 | 	byte	$1c, $20, $2b, $30, $2e, $23, $1b, $16, $0c, $0b, $04, $03, $ff, $00, $fc, $f0
1b14b     E5 E0 DA D7 
1b14f     D5 DA E0 E7 
1b153     EA F5 F8 F8 
1b157     F8 00 06 10 | 	byte	$e5, $e0, $da, $d7, $d5, $da, $e0, $e7, $ea, $f5, $f8, $f8, $f8, $00, $06, $10
1b15b     20 28 28 2B 
1b15f     31 31 24 20 
1b163     13 0B 0C 08 
1b167     06 06 FF F8 | 	byte	$20, $28, $28, $2b, $31, $31, $24, $20, $13, $0b, $0c, $08, $06, $06, $ff, $f8
1b16b     EA E4 D8 D2 
1b16f     D2 D2 DA DA 
1b173     E7 EA F2 FA 
1b177     F8 FA 01 08 | 	byte	$ea, $e4, $d8, $d2, $d2, $d2, $da, $da, $e7, $ea, $f2, $fa, $f8, $fa, $01, $08
1b17b     16 21 21 28 
1b17f     29 29 26 20 
1b183     14 0B 08 09 
1b187     09 06 09 06 | 	byte	$16, $21, $21, $28, $29, $29, $26, $20, $14, $0b, $08, $09, $09, $06, $09, $06
1b18b     F8 ED DF D5 
1b18f     D2 CD CF D3 
1b193     DD EA F4 FA 
1b197     FF 03 06 00 | 	byte	$f8, $ed, $df, $d5, $d2, $cd, $cf, $d3, $dd, $ea, $f4, $fa, $ff, $03, $06, $00
1b19b     00 00 00 00 
1b19f     00 00 00 00 
1b1a3     00 00 00 00 
1b1a7     00 00 00    | 	byte	$00[15]
1b1aa     E4 B1 EA 80 
1b1ae     F5 0A 0B 02 
1b1b2     15 9B 80 40 
1b1b6     D6 30 57 00 | 	byte	$e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57, $00
1b1ba     F2 58 E1 33 
1b1be     0F 9B 7C 41 
1b1c2     90 94 3A AA 
1b1c6     9D 0A AA E7 | 	byte	$f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa, $e7
1b1ca     82 D2 E5 B0 
1b1ce     C0 DD C6 F1 
1b1d2     E9 08 06 E3 
1b1d6     F2 78 6C AE | 	byte	$82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c, $ae
1b1da     17 7E 48 62 
1b1de     44 F7 19 80 
1b1e2     2C 64 3A 34 
1b1e6     67 0D 1D 4A | 	byte	$17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d, $4a
1b1ea     D3 08 2C 1B 
1b1ee     EE 3C FC B1 
1b1f2     F3 DF F0 DD 
1b1f6     BD DC CF D5 | 	byte	$d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf, $d5
1b1fa     CC D6 C3 A7 
1b1fe     EC EB 99 A5 
1b202     E2 E3 B9 9A 
1b206     D3 10 E6 94 | 	byte	$cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6, $94
1b20a     E3 25 B7 BA 
1b20e     31 B5 D9 21 
1b212     DF 08 09 50 
1b216     1B EA 5A 28 | 	byte	$e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a, $28
1b21a     14 53 51 21 
1b21e     49 1A 27 65 
1b222     55 3F 63 26 
1b226     1C 38 43 3F | 	byte	$14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43, $3f
1b22a     38 2C 1A 27 
1b22e     20 22 36 47 
1b232     22 23 F9 0E 
1b236     09 0B 48 CD | 	byte	$38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48, $cd
1b23a     FD 25 EA 0B 
1b23e     F8 06 21 DA 
1b242     28 F5 B4 E3 
1b246     0A F5 E0 F4 | 	byte	$fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0, $f4
1b24a     F6 F0 AC D8 
1b24e     EA E4 CF D5 
1b252     DF B9 D3 C9 
1b256     C5 C0 C4 BC | 	byte	$f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4, $bc
1b25a     99 B8 A7 A3 
1b25e     B4 B5 BF B4 
1b262     99 C5 B3 C4 
1b266     CE CB DF D2 | 	byte	$99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df, $d2
1b26a     DA 01 E2 DC 
1b26e     E0 07 01 E3 
1b272     F0 27 15 FA 
1b276     08 13 31 F9 | 	byte	$da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31, $f9
1b27a     31 4A 17 2D 
1b27e     2D 54 38 4A 
1b282     64 3B 4E 63 
1b286     62 51 77 49 | 	byte	$31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77, $49
1b28a     57 79 60 5B 
1b28e     6E 5E 71 76 
1b292     42 68 7D 62 
1b296     38 53 3B 4C | 	byte	$57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b, $4c
1b29a     4A ED FA 63 
1b29e     2F FF 15 DF 
1b2a2     05 08 DC EA 
1b2a6     E4 F3 01 C1 | 	byte	$4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01, $c1
1b2aa     A1 EE C2 D6 
1b2ae     CE CE E3 D9 
1b2b2     BD F2 C1 D4 
1b2b6     D0 DD B5 BF | 	byte	$a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5, $bf
1b2ba     BF D7 AA C6 
1b2be     C3 B8 B2 BC 
1b2c2     B5 B2 A9 A2 
1b2c6     C3 BF AC A0 | 	byte	$bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac, $a0
1b2ca     C2 BF D4 CD 
1b2ce     89 C6 D9 A8 
1b2d2     C2 E8 DF AD 
1b2d6     CF EF E6 CB | 	byte	$c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6, $cb
1b2da     FE D7 ED 02 
1b2de     E1 12 FF FE 
1b2e2     29 02 2A 26 
1b2e6     2B 42 34 44 | 	byte	$fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34, $44
1b2ea     46 56 43 6B 
1b2ee     71 55 6F 5F 
1b2f2     6A 6E 3F 5E 
1b2f6     5E 59 66 6E | 	byte	$46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66, $6e
1b2fa     64 59 38 21 
1b2fe     39 51 63 49 
1b302     56 55 1E 3D 
1b306     3D 28 F6 13 | 	byte	$64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6, $13
1b30a     12 22 31 05 
1b30e     FC 2B ED 1A 
1b312     DF 22 07 F3 
1b316     DC F3 ED FC | 	byte	$12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed, $fc
1b31a     0A FC C1 F9 
1b31e     09 CA C8 B9 
1b322     B9 DD E9 BF 
1b326     96 D9 E0 C2 | 	byte	$0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0, $c2
1b32a     C2 AA CC A8 
1b32e     A6 C8 B8 8A 
1b332     AE AD 98 AC 
1b336     89 D1 A5 AA | 	byte	$c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5, $aa
1b33a     B7 D0 D5 AA 
1b33e     A7 B3 0B D2 
1b342     D0 D8 02 DB 
1b346     F3 DF 03 D2 | 	byte	$b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03, $d2
1b34a     0F 14 EC 1B 
1b34e     1A EB 22 3D 
1b352     1B 04 40 32 
1b356     59 40 38 3C | 	byte	$0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38, $3c
1b35a     31 4E 41 61 
1b35e     65 5F 4F 45 
1b362     50 5F 6C 6D 
1b366     80 4F 40 6C | 	byte	$31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40, $6c
1b36a     57 51 62 50 
1b36e     3D 45 32 47 
1b372     1D 4C 2E F3 
1b376     1F 1F 3E 1B | 	byte	$57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e, $1b
1b37a     EA 17 FD EA 
1b37e     EF 11 E4 CE 
1b382     FC C9 DF B8 
1b386     BA BD D2 D7 | 	byte	$ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2, $d7
1b38a     B3 C3 8B BD 
1b38e     C6 98 D2 97 
1b392     8F E5 8F 9A 
1b396     B9 A1 95 E7 | 	byte	$b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95, $e7
1b39a     AF 91 B3 CC 
1b39e     CB A0 CE DA 
1b3a2     C2 B7 D2 F5 
1b3a6     D5 E8 E8 E0 | 	byte	$af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8, $e0
1b3aa     F3 10 CD FD 
1b3ae     16 D2 1C 22 
1b3b2     03 1B 08 43 
1b3b6     17 1C 2C 34 | 	byte	$f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c, $34
1b3ba     2A 37 26 4D 
1b3be     30 2E 2D 3D 
1b3c2     53 30 6E 2C 
1b3c6     4A 5B 3A 74 | 	byte	$2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a, $74
1b3ca     4E 45 65 3C 
1b3ce     48 45 5A 80 
1b3d2     2D 2B 37 45 
1b3d6     55 4B 53 1D | 	byte	$4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53, $1d
1b3da     33 3F 45 2F 
1b3de     03 2B 35 05 
1b3e2     2A 15 F3 F5 
1b3e6     E8 06 C5 DB | 	byte	$33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5, $db
1b3ea     03 A5 D0 FE 
1b3ee     9E A9 BE AF 
1b3f2     E0 C6 81 BF 
1b3f6     E5 AF B2 BE | 	byte	$03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2, $be
1b3fa     B4 C8 AA 90 
1b3fe     C6 B6 DA BE 
1b402     99 16 AD AA 
1b406     0E AC BB D9 | 	byte	$b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb, $d9
1b40a     CE 0C 9C 03 
1b40e     FD AA 1C 02 
1b412     DC F5 D1 10 
1b416     FF 09 F6 0A | 	byte	$ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6, $0a
1b41a     18 EB 49 1D 
1b41e     2C 13 E3 23 
1b422     5A DC 14 4B 
1b426     F7 43 12 10 | 	byte	$18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12, $10
1b42a     47 27 25 2A 
1b42e     26 3F 1E 44 
1b432     29 19 53 35 
1b436     22 4B 26 15 | 	byte	$47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26, $15
1b43a     67 1B 41 3A 
1b43e     21 5B 40 2B 
1b442     34 2A 2B 50 
1b446     15 13 36 43 | 	byte	$67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36, $43
1b44a     18 2D 16 EA 
1b44e     47 02 FF 14 
1b452     0B 0F E5 0A 
1b456     16 C2 E7 1C | 	byte	$18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7, $1c
1b45a     C7 F4 E7 F0 
1b45e     DD E5 E7 DF 
1b462     8D E6 F3 AB 
1b466     EF DE DA D2 | 	byte	$c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da, $d2
1b46a     B0 ED D2 AA 
1b46e     E7 EC A6 D8 
1b472     C3 B1 F9 9E 
1b476     C4 C2 A3 CE | 	byte	$b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3, $ce
1b47a     C6 C6 B5 91 
1b47e     FC C8 C1 FA 
1b482     BD AB F1 D5 
1b486     D6 EE CA F6 | 	byte	$c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca, $f6
1b48a     EC BD 31 FB 
1b48e     C1 FD F4 1A 
1b492     2F F8 19 1D 
1b496     27 07 24 3B | 	byte	$ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24, $3b
1b49a     31 0E 49 51 
1b49e     26 66 0B 45 
1b4a2     5A 3B 4C 4C 
1b4a6     43 68 1E 74 | 	byte	$31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e, $74
1b4aa     35 25 70 49 
1b4ae     2D 38 33 5D 
1b4b2     25 33 31 32 
1b4b6     2A 44 45 2B | 	byte	$35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45, $2b
1b4ba     3D 21 0F 19 
1b4be     2F 24 30 0A 
1b4c2     E6 47 01 E5 
1b4c6     06 31 FD D3 | 	byte	$3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd, $d3
1b4ca     15 DF 12 D0 
1b4ce     09 F8 CD FC 
1b4d2     EF CB E6 D3 
1b4d6     E9 B8 E2 E5 | 	byte	$15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2, $e5
1b4da     C5 E7 BD D7 
1b4de     F2 BA 90 D9 
1b4e2     E2 B6 BD BD 
1b4e6     C3 DF A9 C1 | 	byte	$c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9, $c1
1b4ea     B6 C1 F6 9F 
1b4ee     8E C6 CF CB 
1b4f2     D5 CA B5 E1 
1b4f6     B8 E2 DB D6 | 	byte	$b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db, $d6
1b4fa     DD EC E5 FC 
1b4fe     F0 00 15 EC 
1b502     23 18 F3 0E 
1b506     30 0A 42 47 | 	byte	$dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42, $47
1b50a     1B 19 31 30 
1b50e     4D 2E 3D 40 
1b512     1C 50 45 2F 
1b516     55 2A 32 4B | 	byte	$1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32, $4b
1b51a     24 42 31 30 
1b51e     27 40 3F 3F 
1b522     62 38 1C 45 
1b526     2F 43 04 40 | 	byte	$24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04, $40
1b52a     44 06 3E 15 
1b52e     45 36 02 29 
1b532     1D 1E 1D EF 
1b536     00 14 08 EF | 	byte	$44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08, $ef
1b53a     12 F4 EC F7 
1b53e     EC E3 E6 E8 
1b542     EA FA D1 CD 
1b546     B3 0B F9 AA | 	byte	$12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9, $aa
1b54a     A8 CC D6 D1 
1b54e     D2 A2 B2 BE 
1b552     E1 C8 9C B8 
1b556     BC CC A5 8E | 	byte	$a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5, $8e
1b55a     D7 DE C7 CB 
1b55e     BD EA DF CF 
1b562     F8 C2 BE F2 
1b566     EB FE C9 DC | 	byte	$d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9, $dc
1b56a     0E D2 13 F5 
1b56e     CE 28 1F E8 
1b572     1D 04 F0 1A 
1b576     1D 24 FE 04 | 	byte	$0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe, $04
1b57a     12 2C 0D 16 
1b57e     12 32 32 12 
1b582     23 25 17 3C 
1b586     29 2A 47 48 | 	byte	$12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47, $48
1b58a     07 46 41 32 
1b58e     22 3B 0D 2A 
1b592     50 44 14 0E 
1b596     60 57 2A 17 | 	byte	$07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a, $17
1b59a     2F 17 38 2C 
1b59e     23 22 44 1E 
1b5a2     F0 0D 4A 15 
1b5a6     20 EE 2A 02 | 	byte	$2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a, $02
1b5aa     18 41 E1 E5 
1b5ae     2E F6 DC 04 
1b5b2     F6 EF DE E8 
1b5b6     E2 FA C5 DF | 	byte	$18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5, $df
1b5ba     F5 C8 C6 FE 
1b5be     AD D4 E9 99 
1b5c2     0C EE BE F0 
1b5c6     A6 F5 BC DC | 	byte	$f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc, $dc
1b5ca     B9 D4 FA C9 
1b5ce     DA D2 A8 D0 
1b5d2     F0 E6 D6 E0 
1b5d6     DD CA C6 F9 | 	byte	$b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6, $f9
1b5da     C5 D3 E8 00 
1b5de     D9 DB CF EC 
1b5e2     03 F1 F5 E0 
1b5e6     27 01 07 38 | 	byte	$c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07, $38
1b5ea     08 D5 39 14 
1b5ee     12 2A 17 11 
1b5f2     2E 15 0B 0C 
1b5f6     21 40 18 11 | 	byte	$08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18, $11
1b5fa     20 16 2A 59 
1b5fe     1C 01 47 3B 
1b602     46 38 0F 5F 
1b606     0F 32 3C 16 | 	byte	$20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c, $16
1b60a     32 2E 31 1F 
1b60e     48 18 1D 31 
1b612     06 44 1F 0D 
1b616     3E E7 05 3D | 	byte	$32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05, $3d
1b61a     08 1E F9 1A 
1b61e     FC 04 EE 18 
1b622     F4 FA 05 0A 
1b626     EB 02 E7 1D | 	byte	$08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7, $1d
1b62a     D0 E9 F4 E5 
1b62e     DB FA CA E0 
1b632     E3 BC 05 D4 
1b636     C8 BF 05 D8 | 	byte	$d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05, $d8
1b63a     C6 E9 BF E6 
1b63e     C9 D9 EA BB 
1b642     C8 EF D1 F9 
1b646     DA D3 E9 BB | 	byte	$c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9, $bb
1b64a     D9 FB CE DF 
1b64e     ED E9 DC FE 
1b652     F7 FE EF E4 
1b656     0B D5 F0 FB | 	byte	$d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0, $fb
1b65a     1A 1D E3 0F 
1b65e     1F F6 1D FA 
1b662     04 0A 19 27 
1b666     03 0B 35 1F | 	byte	$1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35, $1f
1b66a     05 20 29 23 
1b66e     08 2A 34 21 
1b672     0B 3B 4D 4F 
1b676     00 49 30 2F | 	byte	$05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30, $2f
1b67a     36 03 04 2F 
1b67e     20 33 02 0C 
1b682     49 1A 2C F2 
1b686     05 08 03 28 | 	byte	$36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03, $28
1b68a     14 FE EB 00 
1b68e     1D EF 13 1B 
1b692     DD FA 00 D7 
1b696     FC 09 09 DE | 	byte	$14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09, $de
1b69a     E3 05 F9 F1 
1b69e     CB DE 09 FC 
1b6a2     DA FA D1 E7 
1b6a6     0C C0 1C EA | 	byte	$e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c, $ea
1b6aa     9E FF E5 ED 
1b6ae     FD D3 EF EE 
1b6b2     FA 04 F0 E5 
1b6b6     E8 EE FA E6 | 	byte	$9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa, $e6
1b6ba     EB D3 EC 1C 
1b6be     F5 DC F8 E9 
1b6c2     E5 14 EB F1 
1b6c6     E8 ED 13 19 | 	byte	$eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13, $19
1b6ca     03 C4 04 06 
1b6ce     F2 0F 07 E2 
1b6d2     0F 1C 02 EB 
1b6d6     FE 09 1D 08 | 	byte	$03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d, $08
1b6da     1A 2C 0C 00 
1b6de     1C 26 07 06 
1b6e2     11 16 12 3C 
1b6e6     DE FE 1E 08 | 	byte	$1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e, $08
1b6ea     15 1D 12 FB 
1b6ee     3C E9 0D 12 
1b6f2     1A 0D 02 15 
1b6f6     23 1D E9 01 | 	byte	$15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9, $01
1b6fa     FC 1A 1F 14 
1b6fe     F9 F1 02 26 
1b702     21 E3 02 13 
1b706     E3 12 FD 11 | 	byte	$fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd, $11
1b70a     E6 02 F1 12 
1b70e     F5 0B 0A E7 
1b712     EB 11 F1 E4 
1b716     0A 0F 15 0A | 	byte	$e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15, $0a
1b71a     F0 06 FB FB 
1b71e     EE 09 F1 E9 
1b722     F6 12 F5 05 
1b726     FB F1 E7 41 | 	byte	$f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7, $41
1b72a     E8 E5 08 D7 
1b72e     0E 00 0B E1 
1b732     E6 08 00 EE 
1b736     EF DA FC EE | 	byte	$e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc, $ee
1b73a     EB 15 F2 04 
1b73e     F8 DC 24 03 
1b742     F3 F7 E7 F4 
1b746     04 F8 01 ED | 	byte	$eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01, $ed
1b74a     FB 10 F5 ED 
1b74e     04 0A ED DF 
1b752     05 01 13 E1 
1b756     FF 09 ED 1A | 	byte	$fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed, $1a
1b75a     15 FE F6 E1 
1b75e     10 24 1B E7 
1b762     0F 0F 1B 25 
1b766     EE EF 27 14 | 	byte	$15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27, $14
1b76a     FD 12 F6 19 
1b76e     1C 10 10 EB 
1b772     FE 34 0C FB 
1b776     0E 06 38 FD | 	byte	$fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38, $fd
1b77a     FD 22 D8 0C 
1b77e     1C 07 0A 19 
1b782     E6 1A 0B 09 
1b786     1C E6 01 1C | 	byte	$fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01, $1c
1b78a     F0 04 18 1C 
1b78e     EE E4 07 05 
1b792     FC 04 06 E0 
1b796     E7 11 01 F7 | 	byte	$f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01, $f7
1b79a     0D DB 0A F9 
1b79e     EC FB 15 08 
1b7a2     DE 02 10 CD 
1b7a6     03 1E EB EA | 	byte	$0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb, $ea
1b7aa     E4 E4 06 FC 
1b7ae     FD EC D4 0F 
1b7b2     09 F2 03 02 
1b7b6     D5 13 F1 E3 | 	byte	$e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1, $e3
1b7ba     02 15 E5 0F 
1b7be     08 EF F8 DD 
1b7c2     F7 02 09 02 
1b7c6     FD 02 00 EE | 	byte	$02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00, $ee
1b7ca     0D FF 1E F3 
1b7ce     EC 03 0B F0 
1b7d2     0A 0A F5 FB 
1b7d6     0F 05 ED 0D | 	byte	$0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed, $0d
1b7da     1B 11 FB 0A 
1b7de     02 19 2E 1F 
1b7e2     F2 24 FE F8 
1b7e6     0B 25 12 0D | 	byte	$1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12, $0d
1b7ea     00 1A EB E9 
1b7ee     2B 20 0B E8 
1b7f2     FA 21 22 F7 
1b7f6     EA 19 11 03 | 	byte	$00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11, $03
1b7fa     F7 FE 12 0E 
1b7fe     FD 15 04 06 
1b802     FD 01 17 F0 
1b806     19 0D F7 01 | 	byte	$f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7, $01
1b80a     F7 09 0C F1 
1b80e     19 0D E2 F7 
1b812     03 E5 04 F2 
1b816     FF FE E8 01 | 	byte	$f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8, $01
1b81a     02 E2 0E FF 
1b81e     FD DC F1 16 
1b822     D4 F2 EF FA 
1b826     01 01 0B FB | 	byte	$02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b, $fb
1b82a     D4 F0 1C 20 
1b82e     E3 D7 10 F5 
1b832     01 0A D5 01 
1b836     08 E9 F7 EE | 	byte	$d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7, $ee
1b83a     09 EF 16 FD 
1b83e     F5 0E 06 14 
1b842     E2 0E 14 1A 
1b846     0C F8 F6 10 | 	byte	$09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6, $10
1b84a     20 03 F0 EF 
1b84e     17 F7 33 0F 
1b852     D4 0E 0C 00 
1b856     05 FD 0C 00 | 	byte	$20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c, $00
1b85a     16 03 F6 0F 
1b85e     EA 0E 12 0F 
1b862     01 F6 F8 0E 
1b866     09 04 E1 FB | 	byte	$16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1, $fb
1b86a     0D 02 03 06 
1b86e     18 02 09 04 
1b872     EE 18 0B EB 
1b876     1D 05 E6 F8 | 	byte	$0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6, $f8
1b87a     0E 07 25 08 
1b87e     D9 11 0C EE 
1b882     26 11 F0 FE 
1b886     01 1D FC 14 | 	byte	$0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc, $14
1b88a     06 0C 10 F1 
1b88e     09 EA EC 22 
1b892     03 F2 05 EE 
1b896     16 15 00 FB | 	byte	$06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00, $fb
1b89a     0E D8 FD 05 
1b89e     0D FD FB E9 
1b8a2     EA 09 E8 F8 
1b8a6     F9 EF DF 16 | 	byte	$0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df, $16
1b8aa     FA 01 E5 FD 
1b8ae     F3 03 FE ED 
1b8b2     E8 F2 EA 07 
1b8b6     07 F9 F4 EF | 	byte	$fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4, $ef
1b8ba     EE FB 0B EC 
1b8be     EC F7 FA 0A 
1b8c2     F0 10 F5 ED 
1b8c6     10 0A 04 F3 | 	byte	$ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04, $f3
1b8ca     15 F6 F4 0D 
1b8ce     FC 0C 1F 0F 
1b8d2     FD 01 F7 23 
1b8d6     FC 04 2F 09 | 	byte	$15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f, $09
1b8da     F9 12 0B 0F 
1b8de     2E F8 12 10 
1b8e2     00 26 10 E6 
1b8e6     1E FD 12 15 | 	byte	$f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12, $15
1b8ea     FB 01 20 0E 
1b8ee     EF 1A F4 FC 
1b8f2     13 10 F8 11 
1b8f6     15 10 FA FA | 	byte	$fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa, $fa
1b8fa     FF 08 08 09 
1b8fe     F0 EA 02 15 
1b902     E1 F3 0D E8 
1b906     03 06 EF E0 | 	byte	$ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef, $e0
1b90a     F8 01 06 EB 
1b90e     FD 0D FB EE 
1b912     01 EE ED 05 
1b916     05 01 E8 DE | 	byte	$f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8, $de
1b91a     18 FD F4 F4 
1b91e     E4 FA F1 FA 
1b922     FA FE 04 E6 
1b926     E9 03 D3 0D | 	byte	$18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3, $0d
1b92a     FA FD EB FA 
1b92e     04 02 FD EE 
1b932     EF 2D EE 0C 
1b936     03 F3 FB FB | 	byte	$fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb, $fb
1b93a     02 04 09 18 
1b93e     F7 17 1D FC 
1b942     FD 12 21 15 
1b946     01 0D 07 13 | 	byte	$02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07, $13
1b94a     FA F4 1F 1B 
1b94e     1B F6 F4 18 
1b952     0B 16 FC E3 
1b956     10 1D 1E 01 | 	byte	$fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e, $01
1b95a     E6 10 11 E7 
1b95e     EF 22 0A F8 
1b962     09 F9 E7 15 
1b966     FD 01 F2 F0 | 	byte	$e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2, $f0
1b96a     13 F6 F0 FD 
1b96e     11 F1 F8 0C 
1b972     F8 06 0A FD 
1b976     F4 0C 05 EC | 	byte	$13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05, $ec
1b97a     FC FC FF 0C 
1b97e     F2 02 11 EC 
1b982     DD 20 0A 0F 
1b986     E6 FD FF 0D | 	byte	$fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff, $0d
1b98a     03 EB 17 FB 
1b98e     FC F3 F4 EF 
1b992     07 0B FD F5 
1b996     00 DE 06 F8 | 	byte	$03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06, $f8
1b99a     E8 E9 05 0F 
1b99e     FC F2 DB 0C 
1b9a2     09 E7 F6 08 
1b9a6     04 EF F8 0A | 	byte	$e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8, $0a
1b9aa     F3 10 1D 00 
1b9ae     03 E5 01 1C 
1b9b2     07 07 12 FA 
1b9b6     0D 18 F2 15 | 	byte	$f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2, $15
1b9ba     1B 04 F2 0D 
1b9be     10 FB 09 FC 
1b9c2     0C 13 FA 07 
1b9c6     33 EF FD 20 | 	byte	$1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd, $20
1b9ca     0C FE 0C FB 
1b9ce     15 0C 0E 08 
1b9d2     F9 F0 11 18 
1b9d6     F6 DB 19 03 | 	byte	$0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19, $03
1b9da     05 02 E0 05 
1b9de     05 F5 04 04 
1b9e2     05 04 06 E9 
1b9e6     EF 1A 0A 06 | 	byte	$05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a, $06
1b9ea     FE 00 07 0B 
1b9ee     FB E6 FD FC 
1b9f2     10 FA FC E0 
1b9f6     F0 0A EA F1 | 	byte	$fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea, $f1
1b9fa     E8 E5 F7 FC 
1b9fe     EA FD F8 DB 
1ba02     06 F7 E6 FA 
1ba06     04 FD E9 E9 | 	byte	$e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9, $e9
1ba0a     06 07 0A E8 
1ba0e     12 16 01 00 
1ba12     F3 FF 2F 0A 
1ba16     F8 0D 20 10 | 	byte	$06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20, $10
1ba1a     08 ED 13 1B 
1ba1e     0E 0D F3 03 
1ba22     16 FC 0E 08 
1ba26     06 08 FD 09 | 	byte	$08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd, $09
1ba2a     0D 20 FC EF 
1ba2e     18 0D F7 0F 
1ba32     EE FE 05 0B 
1ba36     EE ED 1A 1D | 	byte	$0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a, $1d
1ba3a     F6 08 F1 F5 
1ba3e     04 FF 1E EA 
1ba42     F0 10 FE 06 
1ba46     19 FF FE 00 | 	byte	$f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe, $00
1ba4a     FD 02 0B FA 
1ba4e     01 0C 00 F3 
1ba52     02 08 0B F5 
1ba56     0C FC F8 E2 | 	byte	$fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8, $e2
1ba5a     0B FD FA F5 
1ba5e     EB FC F7 E0 
1ba62     F6 FF 15 F6 
1ba66     EE F5 E6 E4 | 	byte	$0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6, $e4
1ba6a     FF FF 06 E9 
1ba6e     F2 F2 FC 03 
1ba72     FE 06 FF EE 
1ba76     13 05 F4 0F | 	byte	$ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4, $0f
1ba7a     1D 23 00 08 
1ba7e     15 01 00 23 
1ba82     0E 03 13 02 
1ba86     1B 08 12 0F | 	byte	$1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12, $0f
1ba8a     02 09 FD 11 
1ba8e     03 08 01 05 
1ba92     03 16 08 0B 
1ba96     FE 05 04 0B | 	byte	$02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04, $0b
1ba9a     E3 FB 1D 03 
1ba9e     05 01 09 09 
1baa2     01 FD FF ED 
1baa6     EC 08 0A F5 | 	byte	$e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a, $f5
1baaa     E5 F7 16 01 
1baae     F9 E2 FA E1 
1bab2     06 01 F9 02 
1bab6     F1 E0 FB 0C | 	byte	$e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb, $0c
1baba     06 E9 DD F6 
1babe     14 01 08 EC 
1bac2     FD 0A 03 01 
1bac6     EB F7 00 10 | 	byte	$06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00, $10
1baca     E7 00 08 06 
1bace     11 FA EF 13 
1bad2     EF F4 05 0E 
1bad6     FE F6 F7 20 | 	byte	$e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7, $20
1bada     FB 04 02 FE 
1bade     01 F4 0F 2C 
1bae2     09 02 09 01 
1bae6     0F 13 08 F6 | 	byte	$fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08, $f6
1baea     0F 14 0D FA 
1baee     08 15 F5 31 
1baf2     11 E5 0A 11 
1baf6     02 19 11 FD | 	byte	$0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11, $fd
1bafa     FB 0D 0C FA 
1bafe     03 05 00 00 
1bb02     01 03 05 08 
1bb06     09 01 D9 12 | 	byte	$fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9, $12
1bb0a     04 E2 04 07 
1bb0e     F8 E6 FC ED 
1bb12     01 0B F3 FC 
1bb16     ED FF 05 EC | 	byte	$04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05, $ec
1bb1a     F4 0C FF F8 
1bb1e     F3 F7 F7 08 
1bb22     F4 F9 03 F4 
1bb26     F4 F5 F2 FD | 	byte	$f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2, $fd
1bb2a     0A F7 FE F7 
1bb2e     ED 08 10 EF 
1bb32     FD F3 01 03 
1bb36     F2 F8 F1 08 | 	byte	$0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1, $08
1bb3a     FE 08 FA F2 
1bb3e     FA 10 05 F2 
1bb42     03 03 18 07 
1bb46     E9 17 18 04 | 	byte	$fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18, $04
1bb4a     0B 10 0C FC 
1bb4e     16 FE 09 1C 
1bb52     0B 10 09 14 
1bb56     1C 11 14 0B | 	byte	$0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14, $0b
1bb5a     06 05 0F 0F 
1bb5e     18 19 17 F4 
1bb62     0E 07 12 18 
1bb66     06 EF 0B 12 | 	byte	$06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b, $12
1bb6a     FA FB F5 02 
1bb6e     02 06 FD F3 
1bb72     E9 F3 F6 EF 
1bb76     FC FB E8 EA | 	byte	$fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8, $ea
1bb7a     EF F3 F8 FC 
1bb7e     F2 F2 EB DD 
1bb82     E8 10 F9 F1 
1bb86     04 FA E2 F5 | 	byte	$ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2, $f5
1bb8a     FC F2 05 00 
1bb8e     E8 F5 03 FB 
1bb92     E7 FD 01 FC 
1bb96     F1 03 03 F3 | 	byte	$fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03, $f3
1bb9a     F0 FC F8 01 
1bb9e     FB 0C EA 08 
1bba2     15 09 FC FA 
1bba6     0A 00 F7 19 | 	byte	$f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7, $19
1bbaa     08 09 F9 0C 
1bbae     0F 0A 08 1A 
1bbb2     FA 1F 10 03 
1bbb6     FC 0D 27 18 | 	byte	$08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27, $18
1bbba     07 10 06 1A 
1bbbe     18 16 F7 21 
1bbc2     13 0D 1F F7 
1bbc6     1A 0B 09 FE | 	byte	$07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09, $fe
1bbca     17 11 1E F1 
1bbce     F2 0E 1D FD 
1bbd2     00 F4 F5 14 
1bbd6     00 F5 F3 FC | 	byte	$17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3, $fc
1bbda     FE ED F9 F1 
1bbde     F9 F2 01 F7 
1bbe2     F3 FB E6 F4 
1bbe6     F0 FE EB EB | 	byte	$fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb, $eb
1bbea     F3 E7 F6 EE 
1bbee     F3 E6 E4 08 
1bbf2     F3 DF EC FB 
1bbf6     00 F1 F8 F5 | 	byte	$f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8, $f5
1bbfa     F3 F4 FE 09 
1bbfe     F5 F9 FF 02 
1bc02     0A FC FE F9 
1bc06     0D 06 F9 07 | 	byte	$f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9, $07
1bc0a     17 11 05 FF 
1bc0e     EE 05 0E 0E 
1bc12     0E 17 F5 03 
1bc16     10 05 08 12 | 	byte	$17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08, $12
1bc1a     12 FE 0A 22 
1bc1e     1B FE 16 17 
1bc22     16 FF 0B 23 
1bc26     14 0A 0D 10 | 	byte	$12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d, $10
1bc2a     03 11 14 02 
1bc2e     FC 13 12 17 
1bc32     F5 04 0D 02 
1bc36     04 0F F0 FB | 	byte	$03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0, $fb
1bc3a     0E 08 F2 F8 
1bc3e     F9 0E F6 F6 
1bc42     01 F9 F5 EB 
1bc46     F8 02 F7 FA | 	byte	$0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7, $fa
1bc4a     F0 05 F6 05 
1bc4e     E7 E0 0A F2 
1bc52     02 FE EC F3 
1bc56     09 F7 EC F5 | 	byte	$f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec, $f5
1bc5a     F5 EF 03 F7 
1bc5e     F9 08 FB EA 
1bc62     05 F1 FD FC 
1bc66     0B F5 F4 F1 | 	byte	$f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4, $f1
1bc6a     F1 08 11 FE 
1bc6e     E6 FE F1 0C 
1bc72     12 03 F4 FD 
1bc76     06 12 12 F3 | 	byte	$f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12, $f3
1bc7a     0C 02 12 F4 
1bc7e     0F 02 08 09 
1bc82     10 11 02 FC 
1bc86     10 17 F7 05 | 	byte	$0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7, $05
1bc8a     0D 1A 08 00 
1bc8e     0F 07 F8 0F 
1bc92     12 0A 1C 08 
1bc96     FB 0C 15 12 | 	byte	$0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15, $12
1bc9a     F9 0F 1A 0E 
1bc9e     FD 13 13 04 
1bca2     02 04 02 F6 
1bca6     11 03 03 0A | 	byte	$f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03, $0a
1bcaa     E8 01 FC FB 
1bcae     EF 0A 06 EE 
1bcb2     F2 FA E6 F6 
1bcb6     F9 04 F2 DF | 	byte	$e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2, $df
1bcba     F8 FC F0 EB 
1bcbe     E4 FD FC F4 
1bcc2     F6 F0 FB F3 
1bcc6     FA 00 EA 08 | 	byte	$f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea, $08
1bcca     F3 E0 01 FC 
1bcce     E1 17 03 E4 
1bcd2     FF FD FF 02 
1bcd6     ED 09 FF F5 | 	byte	$f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff, $f5
1bcda     F7 0B 03 08 
1bcde     09 05 00 F6 
1bce2     1B F4 06 1F 
1bce6     01 F8 FD 0D | 	byte	$f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd, $0d
1bcea     11 09 08 06 
1bcee     0C 02 0E 03 
1bcf2     FB 1D 0A 11 
1bcf6     08 F8 16 20 | 	byte	$11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16, $20
1bcfa     F9 07 12 FD 
1bcfe     0D 15 08 FD 
1bd02     0F 03 17 00 
1bd06     FE 08 1F 00 | 	byte	$f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f, $00
1bd0a     04 11 F8 01 
1bd0e     01 F7 14 03 
1bd12     00 01 F7 05 
1bd16     FD F1 FE 19 | 	byte	$04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe, $19
1bd1a     02 EB F4 F5 
1bd1e     01 08 EF FE 
1bd22     00 F9 EB FD 
1bd26     F5 FC F2 F8 | 	byte	$02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2, $f8
1bd2a     FD F3 F1 06 
1bd2e     F1 FC F6 FB 
1bd32     F9 02 F6 F3 
1bd36     01 FA 02 FB | 	byte	$fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02, $fb
1bd3a     FD F6 FC 0B 
1bd3e     F5 F6 FE F8 
1bd42     04 FE FE FC 
1bd46     12 02 F2 06 | 	byte	$fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2, $06
1bd4a     0B FF 04 FB 
1bd4e     0F FC 0F 10 
1bd52     F9 11 0B FD 
1bd56     F6 09 1C 0B | 	byte	$0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c, $0b
1bd5a     00 04 06 18 
1bd5e     0C F8 F5 14 
1bd62     0C 02 10 FE 
1bd66     03 06 03 08 | 	byte	$00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03, $08
1bd6a     06 FE 01 0F 
1bd6e     03 FB 01 07 
1bd72     09 07 0A 0B 
1bd76     F4 FC 07 01 | 	byte	$06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07, $01
1bd7a     FD 0B FD FF 
1bd7e     F9 09 F4 EF 
1bd82     0A 02 F6 FD 
1bd86     F5 F4 FF 10 | 	byte	$fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff, $10
1bd8a     03 ED 02 F8 
1bd8e     F4 F9 0A FD 
1bd92     F8 FE FF F9 
1bd96     FD 02 EC 06 | 	byte	$03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec, $06
1bd9a     F7 FB FE 04 
1bd9e     FD 01 FD FC 
1bda2     F3 01 FB FF 
1bda6     FB FF 0A F9 | 	byte	$f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a, $f9
1bdaa     FD FE 04 0B 
1bdae     F9 F5 08 0E 
1bdb2     FE FF 0E 00 
1bdb6     06 05 0B 0A | 	byte	$fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b, $0a
1bdba     FD 09 10 F1 
1bdbe     06 08 FC 0A 
1bdc2     FD FF 06 01 
1bdc6     FB 08 F6 F9 | 	byte	$fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6, $f9
1bdca     07 10 FA FA 
1bdce     F4 0D 09 01 
1bdd2     00 F8 F9 0B 
1bdd6     FC F1 0B 0F | 	byte	$07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b, $0f
1bdda     05 FA 0B F5 
1bdde     01 08 09 FF 
1bde2     F1 03 04 07 
1bde6     06 FF 04 FA | 	byte	$05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04, $fa
1bdea     FC FC 14 00 
1bdee     F4 FB 03 FA 
1bdf2     0E 02 F5 06 
1bdf6     FD 00 FA 03 | 	byte	$fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa, $03
1bdfa     00 0F 04 F7 
1bdfe     FF 02 0E FC 
1be02     F7 10 09 EB 
1be06     06 11 FD FE | 	byte	$00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd, $fe
1be0a     F1 FB 0A FE 
1be0e     FF FA FD 08 
1be12     07 04 ED F9 
1be16     02 08 0A FE | 	byte	$f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a, $fe
1be1a     00 FD 03 08 
1be1e     FE 06 00 07 
1be22     01 FA 03 0D 
1be26     FA FF 02 03 | 	byte	$00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02, $03
1be2a     08 11 F6 09 
1be2e     FF F9 06 07 
1be32     F5 0C FC 0B 
1be36     F7 F4 00 08 | 	byte	$08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00, $08
1be3a     F6 02 FB 05 
1be3e     F7 FC 03 07 
1be42     0C F1 FA 15 
1be46     F2 00 FD F5 | 	byte	$f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd, $f5
1be4a     18 03 ED 07 
1be4e     F2 0B 0A 09 
1be52     FB 0F FE 02 
1be56     0E F9 F7 0D | 	byte	$18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7, $0d
1be5a     0A F7 FE 0A 
1be5e     02 F8 03 0C 
1be62     F3 07 05 FA 
1be66     F2 06 FE 03 | 	byte	$0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe, $03
1be6a     0A EC 03 03 
1be6e     FC 06 F6 F9 
1be72     0E 05 F4 FC 
1be76     FB 06 0F F8 | 	byte	$0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f, $f8
1be7a     FB FF FB FF 
1be7e     19 FB F5 FE 
1be82     FD 0A 07 0A 
1be86     F8 04 04 10 | 	byte	$fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04, $10
1be8a     06 FC 0E FB 
1be8e     F6 0C 14 F6 
1be92     FA 12 08 08 
1be96     FE 08 04 01 | 	byte	$06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04, $01
1be9a     00 10 0B 05 
1be9e     02 F6 0B 0B 
1bea2     FE 04 01 F5 
1bea6     FA 0C FF F1 | 	byte	$00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff, $f1
1beaa     0A 08 F8 02 
1beae     FD FC 04 F7 
1beb2     FF FA F3 12 
1beb6     F7 EF FD 0D | 	byte	$0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd, $0d
1beba     FA F5 05 FA 
1bebe     EE 10 F3 F4 
1bec2     05 FC 00 04 
1bec6     F9 09 FB F0 | 	byte	$fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb, $f0
1beca     FB 0D 01 FA 
1bece     F6 FF 0A 06 
1bed2     EA 02 FF F7 
1bed6     05 FE 07 01 | 	byte	$fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07, $01
1beda     FB FA 0F 0D 
1bede     F0 FE 09 0A 
1bee2     FD FE 01 0B 
1bee6     00 01 10 04 | 	byte	$fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10, $04
1beea     FE 01 09 FE 
1beee     03 03 0A 05 
1bef2     FF 10 07 F7 
1bef6     02 0F 0E ED | 	byte	$fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e, $ed
1befa     05 0B FF FF 
1befe     0A 08 FB 06 
1bf02     09 F2 05 10 
1bf06     FE FB 02 07 | 	byte	$05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02, $07
1bf0a     06 08 F8 F4 
1bf0e     07 FD FF 08 
1bf12     FA 02 0D FD 
1bf16     E8 00 04 04 | 	byte	$06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04, $04
1bf1a     05 F3 F4 0D 
1bf1e     09 09 EC F9 
1bf22     0E F7 FF FB 
1bf26     FE 0E 04 F2 | 	byte	$05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04, $f2
1bf2a     08 FB F5 FE 
1bf2e     F4 FD 05 05 
1bf32     F0 08 F3 FE 
1bf36     FF F2 FB 00 | 	byte	$08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb, $00
1bf3a     FD F9 04 FD 
1bf3e     FC FC 04 FC 
1bf42     F8 07 F1 FC 
1bf46     FD 04 01 FE | 	byte	$fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01, $fe
1bf4a     F9 03 FE 16 
1bf4e     06 FA E8 14 
1bf52     13 FB FD 10 
1bf56     03 FE 0C 04 | 	byte	$f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c, $04
1bf5a     F7 01 0C 01 
1bf5e     F7 0B 0A 0A 
1bf62     00 03 00 03 
1bf66     0D 07 02 FE | 	byte	$f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02, $fe
1bf6a     13 08 03 04 
1bf6e     01 0C 0A F8 
1bf72     03 13 FD 01 
1bf76     07 F5 14 15 | 	byte	$13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14, $15
1bf7a     F7 F7 0C FF 
1bf7e     FF FF FA 08 
1bf82     00 01 0B FE 
1bf86     F6 FD FD 05 | 	byte	$f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd, $05
1bf8a     00 FB F6 02 
1bf8e     FA 03 09 02 
1bf92     F0 F9 F6 06 
1bf96     FE FB 04 F5 | 	byte	$00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04, $f5
1bf9a     F6 02 F9 06 
1bf9e     FA EF 01 05 
1bfa2     F9 FD 00 FD 
1bfa6     06 00 F8 00 | 	byte	$f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8, $00
1bfaa     FF 03 05 F7 
1bfae     FB 06 F7 00 
1bfb2     00 08 FB F9 
1bfb6     FF 04 03 0A | 	byte	$ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03, $0a
1bfba     F6 F6 07 01 
1bfbe     F9 05 F8 08 
1bfc2     01 08 05 01 
1bfc6     FB 0C 00 F5 | 	byte	$f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00, $f5
1bfca     00 0A FD 01 
1bfce     15 FE 00 FC 
1bfd2     10 0A FD FB 
1bfd6     07 FF F9 0B | 	byte	$00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9, $0b
1bfda     03 01 0D FB 
1bfde     F7 13 07 02 
1bfe2     03 F1 0B 0E 
1bfe6     07 FA 02 F4 | 	byte	$03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02, $f4
1bfea     11 0C FA F9 
1bfee     0E 01 05 FF 
1bff2     FE FD 07 02 
1bff6     01 03 FE FE | 	byte	$11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe, $fe
1bffa     09 F6 0C 01 
1bffe     F9 F3 0A 05 
1c002     FA F8 FF 11 
1c006     05 F2 F5 07 | 	byte	$09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5, $07
1c00a     08 08 FB FB 
1c00e     07 FB 04 03 
1c012     F7 00 F9 FE 
1c016     0B 02 F8 09 | 	byte	$08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8, $09
1c01a     FC 05 F8 F9 
1c01e     0A FE 08 0F 
1c022     FA F6 FF 09 
1c026     0D FD F9 08 | 	byte	$fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9, $08
1c02a     FF 04 04 FA 
1c02e     01 0E F8 01 
1c032     03 01 FD FF 
1c036     01 01 FB 06 | 	byte	$ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb, $06
1c03a     FF F3 0F 13 
1c03e     F4 F8 00 05 
1c042     0E 03 F8 07 
1c046     FF F7 04 FC | 	byte	$ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04, $fc
1c04a     F8 11 0A FA 
1c04e     FA FC FE FF 
1c052     FD 11 FE F1 
1c056     07 03 FD 00 | 	byte	$f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd, $00
1c05a     F4 0B 06 F4 
1c05e     FA 0D 03 F2 
1c062     03 07 FA 00 
1c066     08 05 FF FC | 	byte	$f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff, $fc
1c06a     0D FE F1 06 
1c06e     0F FD F8 05 
1c072     07 07 F9 F9 
1c076     0A FF FE 0E | 	byte	$0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe, $0e
1c07a     01 FA 02 05 
1c07e     FF 01 00 09 
1c082     05 02 0C 0C 
1c086     0C F9 01 00 | 	byte	$01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01, $00
1c08a     FE 0E 08 F2 
1c08e     03 0A 08 01 
1c092     FE FA 04 FA 
1c096     06 FF FE 04 | 	byte	$fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe, $04
1c09a     01 00 FC FA 
1c09e     03 09 F2 FE 
1c0a2     FF 06 F9 02 
1c0a6     FD 01 0B F0 | 	byte	$01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b, $f0
1c0aa     F9 08 05 04 
1c0ae     0B F7 00 00 
1c0b2     01 01 07 F4 
1c0b6     FC 07 05 00 | 	byte	$f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05, $00
1c0ba     ED 0E 09 F0 
1c0be     05 02 FD 09 
1c0c2     FB F9 F6 11 
1c0c6     F8 05 02 01 | 	byte	$ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02, $01
1c0ca     ED 02 0B F6 
1c0ce     F7 06 F9 FA 
1c0d2     07 F4 F5 0B 
1c0d6     F0 F9 01 04 | 	byte	$ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01, $04
1c0da     FA FA F8 01 
1c0de     FF 01 08 FA 
1c0e2     FD 01 05 06 
1c0e6     FC 05 FF 02 | 	byte	$fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff, $02
1c0ea     15 FF F5 15 
1c0ee     01 F8 0F 04 
1c0f2     08 04 0B 02 
1c0f6     00 12 14 05 | 	byte	$15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14, $05
1c0fa     FA 0C 02 0B 
1c0fe     0F 05 FE 09 
1c102     08 FE 06 0E 
1c106     08 F5 09 07 | 	byte	$fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09, $07
1c10a     0A 0B 03 FB 
1c10e     04 F5 0A 10 
1c112     05 F6 06 FD 
1c116     06 00 01 08 | 	byte	$0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01, $08
1c11a     FA FF 03 FD 
1c11e     FE F6 FA F7 
1c122     04 0A F5 01 
1c126     FC FF F1 07 | 	byte	$fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1, $07
1c12a     03 F6 EF FE 
1c12e     FC FF 01 F8 
1c132     F4 F4 FB FF 
1c136     F1 FD 00 FB | 	byte	$03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00, $fb
1c13a     F3 F5 F8 F9 
1c13e     01 03 E9 FE 
1c142     FF FB FE F9 
1c146     00 00       | 	byte	$f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00
1c148                 | 	alignl
1c148                 | _hng030rm_spin2_dat_
1c148     00 00 00 00 
1c14c     00 00 00 00 
1c150     00 00 00 00 
1c154     00 00 00 00 
1c158     00 00 00    | vga_font       file "vgafont.def"
1c15b     7E 81 A5 81 
1c15f     81 BD 99 81 
1c163     81 7E 00 00 
1c167     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1c16b     7E FF DB FF 
1c16f     FF C3 E7 FF 
1c173     FF 7E 00 00 
1c177     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1c17b     00 36 7F 7F 
1c17f     7F 7F 3E 1C 
1c183     08 00 00 00 
1c187     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1c18b     00 08 1C 3E 
1c18f     7F 3E 1C 08 
1c193     00 00 00 00 
1c197     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1c19b     18 3C 3C E7 
1c19f     E7 E7 18 18 
1c1a3     3C 00 00 00 
1c1a7     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1c1ab     18 3C 7E FF 
1c1af     FF 7E 18 18 
1c1b3     3C 00 00 00 
1c1b7     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1c1bb     00 00 00 18 
1c1bf     3C 3C 18 00 
1c1c3     00 00 00 00 
1c1c7     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1c1cb     FF FF FF E7 
1c1cf     C3 C3 E7 FF 
1c1d3     FF FF FF FF 
1c1d7     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1c1db     00 00 3C 66 
1c1df     42 42 66 3C 
1c1e3     00 00 00 00 
1c1e7     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1c1eb     FF FF C3 99 
1c1ef     BD BD 99 C3 
1c1f3     FF FF FF FF 
1c1f7     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1c1fb     78 70 58 4C 
1c1ff     1E 33 33 33 
1c203     33 1E 00 00 
1c207     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1c20b     3C 66 66 66 
1c20f     66 3C 18 7E 
1c213     18 18 00 00 
1c217     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1c21b     FC CC FC 0C 
1c21f     0C 0C 0C 0E 
1c223     0F 07 00 00 
1c227     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1c22b     FE C6 FE C6 
1c22f     C6 C6 C6 E6 
1c233     E7 67 03 00 
1c237     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1c23b     18 18 DB 3C 
1c23f     E7 3C DB 18 
1c243     18 00 00 00 
1c247     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1c24b     03 07 0F 1F 
1c24f     7F 1F 0F 07 
1c253     03 01 00 00 
1c257     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1c25b     60 70 78 7C 
1c25f     7F 7C 78 70 
1c263     60 40 00 00 
1c267     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1c26b     18 3C 7E 18 
1c26f     18 18 7E 3C 
1c273     18 00 00 00 
1c277     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1c27b     66 66 66 66 
1c27f     66 66 66    | 	byte	$66[7]
1c282     00 66 66 00 
1c286     00 00 00 00 
1c28a     00 FE DB DB 
1c28e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1c292     D8 D8 D8 00 
1c296     00 00 00 3E 
1c29a     63 06 1C 36 
1c29e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1c2a2     30 63 3E 00 
1c2a6     00 00 00 00 
1c2aa     00 00 00 00 
1c2ae     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1c2b2     7F 7F 7F 00 
1c2b6     00 00 00 00 
1c2ba     00 18 3C 7E 
1c2be     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1c2c2     3C 18 7E 00 
1c2c6     00 00 00 00 
1c2ca     00 18 3C 7E 
1c2ce     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1c2d2     18 18 18 00 
1c2d6     00 00 00 00 
1c2da     00 18 18 18 
1c2de     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1c2e2     7E 3C 18 00 
1c2e6     00 00 00 00 
1c2ea     00 00 00 18 
1c2ee     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1c2f2     00 00 00 00 
1c2f6     00 00 00 00 
1c2fa     00 00 00    | 	byte	$00[11]
1c2fd     0C 06 7F 06 
1c301     0C 00 00 00 
1c305     00 00 00 00 
1c309     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c30d     00 03 03 03 
1c311     7F 00 00 00 
1c315     00 00 00 00 
1c319     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c31d     14 36 7F 36 
1c321     14 00 00 00 
1c325     00 00 00 00 
1c329     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1c32d     1C 1C 3E 3E 
1c331     7F 7F 00 00 
1c335     00 00 00 00 
1c339     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1c33d     7F 3E 3E 1C 
1c341     1C 08 00 00 
1c345     00 00 00 00 
1c349     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c34d     00 00 00 00 
1c351     00 00 00 00 
1c355     00 00 00 00 
1c359     00 00       | 	byte	$00[14]
1c35b     18 3C 3C 3C 
1c35f     18 18 18 00 
1c363     18 18 00 00 
1c367     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1c36b     66 24 00 00 
1c36f     00 00 00 00 
1c373     00 00 00 00 
1c377     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c37b     00 36 36 7F 
1c37f     36 36 36 7F 
1c383     36 36 00 00 
1c387     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1c38b     3E 63 43 03 
1c38f     3E 60 60 61 
1c393     63 3E 18 18 
1c397     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1c39b     00 00 43 63 
1c39f     30 18 0C 06 
1c3a3     63 61 00 00 
1c3a7     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1c3ab     1C 36 36 1C 
1c3af     6E 3B 33 33 
1c3b3     33 6E 00 00 
1c3b7     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1c3bb     0C 0C 0C 06 
1c3bf     00 00 00 00 
1c3c3     00 00 00 00 
1c3c7     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c3cb     30 18 0C 0C 
1c3cf     0C 0C 0C 0C 
1c3d3     18 30 00 00 
1c3d7     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1c3db     0C 18 30 30 
1c3df     30 30 30 30 
1c3e3     18 0C 00 00 
1c3e7     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1c3eb     00 00 00 66 
1c3ef     3C FF 3C 66 
1c3f3     00 00 00 00 
1c3f7     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1c3fb     00 00 00 18 
1c3ff     18 7E 18 18 
1c403     00 00 00 00 
1c407     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1c40b     00 00 00 00 
1c40f     00 00 00 00 | 	byte	$00[8]
1c413     18 18 18 0C 
1c417     00 00 00 00 
1c41b     00 00 00 00 
1c41f     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1c423     00 00 00 00 
1c427     00 00 00 00 
1c42b     00 00 00 00 
1c42f     00 00 00 00 | 	byte	$00[16]
1c433     18 18 00 00 
1c437     00 00 00 00 
1c43b     00 00 40 60 
1c43f     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1c443     03 01 00 00 
1c447     00 00 00 00 
1c44b     1C 36 63 63 
1c44f     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1c453     36 1C 00 00 
1c457     00 00 00 00 
1c45b     18 1C 1E 18 
1c45f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1c463     18 7E 00 00 
1c467     00 00 00 00 
1c46b     3E 63 60 30 
1c46f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1c473     63 7F 00 00 
1c477     00 00 00 00 
1c47b     3E 63 60 60 
1c47f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1c483     63 3E 00 00 
1c487     00 00 00 00 
1c48b     30 38 3C 36 
1c48f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1c493     30 78 00 00 
1c497     00 00 00 00 
1c49b     7F 03 03 03 
1c49f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1c4a3     63 3E 00 00 
1c4a7     00 00 00 00 
1c4ab     1C 06 03 03 
1c4af     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1c4b3     63 3E 00 00 
1c4b7     00 00 00 00 
1c4bb     7F 63 60 60 
1c4bf     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1c4c3     0C 0C 00 00 
1c4c7     00 00 00 00 
1c4cb     3E 63 63 63 
1c4cf     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1c4d3     63 3E 00 00 
1c4d7     00 00 00 00 
1c4db     3E 63 63 63 
1c4df     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1c4e3     30 1E 00 00 
1c4e7     00 00 00 00 
1c4eb     00 00 00 18 
1c4ef     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1c4f3     18 18 00 00 
1c4f7     00 00 00 00 
1c4fb     00 00 00 18 
1c4ff     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1c503     18 18 0C 00 
1c507     00 00 00 00 
1c50b     00 60 30 18 
1c50f     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1c513     30 60 00 00 
1c517     00 00 00 00 
1c51b     00 00 00 7E 
1c51f     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1c523     00 00 00 00 
1c527     00 00 00 00 
1c52b     00          | 	byte	$00[9]
1c52c     06 0C 18 30 
1c530     60 30 18 0C 
1c534     06 00 00 00 
1c538     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1c53c     63 63 30 18 
1c540     18 18 00 18 
1c544     18 00 00 00 
1c548     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1c54c     3E 63 63 7B 
1c550     7B 7B 3B 03 
1c554     3E 00 00 00 
1c558     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1c55c     1C 36 63 63 
1c560     7F 63 63 63 
1c564     63 00 00 00 
1c568     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1c56c     66 66 66 3E 
1c570     66 66 66 66 
1c574     3F 00 00 00 
1c578     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1c57c     66 43 03 03 
1c580     03 03 43 66 
1c584     3C 00 00 00 
1c588     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1c58c     36 66 66 66 
1c590     66 66 66 36 
1c594     1F 00 00 00 
1c598     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1c59c     66 46 16 1E 
1c5a0     16 06 46 66 
1c5a4     7F 00 00 00 
1c5a8     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1c5ac     66 46 16 1E 
1c5b0     16 06 06 06 
1c5b4     0F 00 00 00 
1c5b8     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1c5bc     66 43 03 03 
1c5c0     7B 63 63 66 
1c5c4     5C 00 00 00 
1c5c8     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1c5cc     63 63 63 7F 
1c5d0     63 63 63 63 
1c5d4     63 00 00 00 
1c5d8     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1c5dc     18 18 18 18 
1c5e0     18 18 18 18 | 	byte	$18[8]
1c5e4     3C 00 00 00 
1c5e8     00 00 00 78 
1c5ec     30 30 30 30 
1c5f0     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1c5f4     1E 00 00 00 
1c5f8     00 00 00 67 
1c5fc     66 66 36 1E 
1c600     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1c604     67 00 00 00 
1c608     00 00 00 0F 
1c60c     06 06 06 06 
1c610     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1c614     7F 00 00 00 
1c618     00 00 00 63 
1c61c     77 7F 7F 6B 
1c620     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1c624     63 00 00 00 
1c628     00 00 00 63 
1c62c     67 6F 7F 7B 
1c630     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1c634     63 00 00 00 
1c638     00 00 00 3E 
1c63c     63 63 63 63 
1c640     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1c644     3E 00 00 00 
1c648     00 00 00 3F 
1c64c     66 66 66 3E 
1c650     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1c654     0F 00 00 00 
1c658     00 00 00 3E 
1c65c     63 63 63 63 
1c660     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1c664     3E 30 70 00 
1c668     00 00 00 3F 
1c66c     66 66 66 3E 
1c670     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1c674     67 00 00 00 
1c678     00 00 00 3E 
1c67c     63 63 06 1C 
1c680     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1c684     3E 00 00 00 
1c688     00 00 00 7E 
1c68c     7E 5A 18 18 
1c690     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1c694     3C 00 00 00 
1c698     00 00 00 63 
1c69c     63 63 63 63 
1c6a0     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1c6a4     3E 00 00 00 
1c6a8     00 00 00 63 
1c6ac     63 63 63 63 
1c6b0     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1c6b4     08 00 00 00 
1c6b8     00 00 00 63 
1c6bc     63 63 63 6B 
1c6c0     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1c6c4     36 00 00 00 
1c6c8     00 00 00 63 
1c6cc     63 36 3E 1C 
1c6d0     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1c6d4     63 00 00 00 
1c6d8     00 00 00 66 
1c6dc     66 66 66 3C 
1c6e0     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1c6e4     3C 00 00 00 
1c6e8     00 00 00 7F 
1c6ec     63 61 30 18 
1c6f0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1c6f4     7F 00 00 00 
1c6f8     00 00 00 3C 
1c6fc     0C 0C 0C 0C 
1c700     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1c704     3C 00 00 00 
1c708     00 00 00 00 
1c70c     01 03 07 0E 
1c710     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1c714     40 00 00 00 
1c718     00 00 00 3C 
1c71c     30 30 30 30 
1c720     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1c724     3C 00 00 00 
1c728     1C 36 00 00 
1c72c     00 00 00 00 
1c730     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c734     00 00 00 00 
1c738     00 00 00 00 
1c73c     00 00 00 00 
1c740     00 00 00 00 
1c744     00          | 	byte	$00[17]
1c745     FF 00 00 0C 
1c749     18 00 00 00 
1c74d     00 00 00 00 
1c751     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c755     00 00 00 00 
1c759     00 00 00 00 
1c75d     00          | 	byte	$00[9]
1c75e     1E 30 3E 33 
1c762     33 33 6E 00 
1c766     00 00 00 00 
1c76a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1c76e     1E 36 66 66 
1c772     66 66 3E 00 
1c776     00 00 00 00 
1c77a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c77e     3E 63 03 03 
1c782     03 63 3E 00 
1c786     00 00 00 00 
1c78a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1c78e     3C 36 33 33 
1c792     33 33 6E 00 
1c796     00 00 00 00 
1c79a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c79e     3E 63 7F 03 
1c7a2     03 63 3E 00 
1c7a6     00 00 00 00 
1c7aa     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1c7ae     0C 1E 0C 0C 
1c7b2     0C 0C 1E 00 
1c7b6     00 00 00 00 
1c7ba     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c7be     6E 33 33 33 
1c7c2     33 33 3E 30 
1c7c6     33 1E 00 00 
1c7ca     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1c7ce     36 6E 66 66 
1c7d2     66 66 67 00 
1c7d6     00 00 00 00 
1c7da     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1c7de     1C 18 18 18 
1c7e2     18 18 3C 00 
1c7e6     00 00 00 00 
1c7ea     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1c7ee     70 60 60 60 
1c7f2     60 60 60 66 
1c7f6     66 3C 00 00 
1c7fa     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1c7fe     66 36 1E 1E 
1c802     36 66 67 00 
1c806     00 00 00 00 
1c80a     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1c80e     18 18 18 18 
1c812     18 18       | 	byte	$18[6]
1c814     3C 00 00 00 
1c818     00 00 00 00 
1c81c     00 00 37 7F 
1c820     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1c824     63 00 00 00 
1c828     00 00 00 00 
1c82c     00 00 3B 66 
1c830     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1c834     66 00 00 00 
1c838     00 00 00 00 
1c83c     00 00 3E 63 
1c840     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1c844     3E 00 00 00 
1c848     00 00 00 00 
1c84c     00 00 3B 66 
1c850     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1c854     3E 06 06 0F 
1c858     00 00 00 00 
1c85c     00 00 6E 33 
1c860     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1c864     3E 30 30 78 
1c868     00 00 00 00 
1c86c     00 00 3B 6E 
1c870     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1c874     0F 00 00 00 
1c878     00 00 00 00 
1c87c     00 00 3E 63 
1c880     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1c884     3E 00 00 00 
1c888     00 00 00 08 
1c88c     0C 0C 3F 0C 
1c890     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1c894     38 00 00 00 
1c898     00 00 00 00 
1c89c     00 00 33 33 
1c8a0     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1c8a4     6E 00 00 00 
1c8a8     00 00 00 00 
1c8ac     00 00 63 63 
1c8b0     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1c8b4     1C 00 00 00 
1c8b8     00 00 00 00 
1c8bc     00 00 63 63 
1c8c0     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1c8c4     36 00 00 00 
1c8c8     00 00 00 00 
1c8cc     00 00 63 36 
1c8d0     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1c8d4     63 00 00 00 
1c8d8     00 00 00 00 
1c8dc     00 00 63 63 
1c8e0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1c8e4     7E 60 30 1F 
1c8e8     00 00 00 00 
1c8ec     00 00 7F 33 
1c8f0     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1c8f4     7F 00 00 00 
1c8f8     00 00 00 70 
1c8fc     18 18 18 0E 
1c900     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1c904     70 00 00 00 
1c908     00 00 00 18 
1c90c     18 18 18 18 
1c910     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1c914     18 00 00 00 
1c918     00 00 00 0E 
1c91c     18 18 18 70 
1c920     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1c924     0E 00 00 00 
1c928     6E 3B 00 00 
1c92c     00 00 00 00 
1c930     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c934     00 00 00 00 
1c938     00 00 00 00 
1c93c     00 00       | 	byte	$00[10]
1c93e     08 1C 36 63 
1c942     63 63 7F 00 
1c946     00 00 00 00 
1c94a     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1c94e     03 03 03 03 
1c952     43 66 3C 18 
1c956     30 1E 00 00 
1c95a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1c95e     33 33 33 33 
1c962     33 33       | 	byte	$33[6]
1c964     6E 00 00 00 
1c968     00 00 60 30 
1c96c     18 00 3E 63 
1c970     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1c974     3E 00 00 00 
1c978     00 00 08 1C 
1c97c     36 00 1E 30 
1c980     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1c984     6E 00 00 00 
1c988     00 00 00 00 
1c98c     33 00 1E 30 
1c990     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1c994     6E 00 00 00 
1c998     00 00 1C 36 
1c99c     1C 00 33 33 
1c9a0     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1c9a4     6E 00 00 00 
1c9a8     00 00 60 30 
1c9ac     18 00 3E 63 
1c9b0     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1c9b4     3E 00 00 00 
1c9b8     00 00 00 00 
1c9bc     00 00 3E 63 
1c9c0     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1c9c4     3E 18 30 1E 
1c9c8     00 00 00 1C 
1c9cc     58 78 38 18 
1c9d0     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1c9d4     3C 00 00 00 
1c9d8     00 00 00 00 
1c9dc     63 00 3E 63 
1c9e0     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1c9e4     3E 00 00 00 
1c9e8     66 33 00 3E 
1c9ec     63 63 63 63 
1c9f0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1c9f4     3E 00 00 00 
1c9f8     00 00 CC 66 
1c9fc     33 00 3E 63 
1ca00     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1ca04     3E 00 00 00 
1ca08     00 00 18 3C 
1ca0c     66 00 1C 18 
1ca10     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1ca14     3C 00 00 00 
1ca18     30 18 00 7F 
1ca1c     63 61 30 18 
1ca20     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1ca24     7F 00 00 00 
1ca28     00 63 00 08 
1ca2c     1C 36 63 63 
1ca30     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1ca34     63 00 00 00 
1ca38     30 18 00 3C 
1ca3c     66 43 03 03 
1ca40     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1ca44     3C 00 00 00 
1ca48     30 18 00 7F 
1ca4c     66 46 16 1E 
1ca50     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1ca54     7F 00 00 00 
1ca58     0C 06 00 0F 
1ca5c     06 06 06 06 
1ca60     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1ca64     7F 00 00 00 
1ca68     30 18 00 1C 
1ca6c     18 18 18 18 
1ca70     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1ca74     3C 00 00 00 
1ca78     00 00 08 1C 
1ca7c     36 00 3E 63 
1ca80     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1ca84     3E 00 00 00 
1ca88     00 00 00 00 
1ca8c     63 00 3E 63 
1ca90     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1ca94     3E 00 00 00 
1ca98     00 00 00 6F 
1ca9c     46 26 06 06 
1caa0     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1caa4     7F 00 00 00 
1caa8     00 00 00 6E 
1caac     4C 2C 0C 0C 
1cab0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1cab4     1E 00 00 00 
1cab8     30 18 00 3E 
1cabc     63 63 06 1C 
1cac0     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1cac4     3E 00 00 00 
1cac8     00 00 60 30 
1cacc     18 00 3E 63 
1cad0     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1cad4     3E 00 00 00 
1cad8     00 63 00 3E 
1cadc     63 63 63 63 
1cae0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1cae4     3E 00 00 00 
1cae8     00 63 00 63 
1caec     63 63 63 63 
1caf0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1caf4     3E 00 00 00 
1caf8     6C 38 00 7E 
1cafc     7E 5A 18 18 
1cb00     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1cb04     3C 00 00 00 
1cb08     00 00 60 48 
1cb0c     2C 0C 3F 0C 
1cb10     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1cb14     38 00 00 00 
1cb18     00 00 00 0F 
1cb1c     26 36 1E 0E 
1cb20     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1cb24     7F 00 00 00 
1cb28     00 00 00 00 
1cb2c     00 63 36 1C 
1cb30     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1cb34     00 00 00 00 
1cb38     00 00       | 	byte	$00[6]
1cb3a     36 1C 08 00 
1cb3e     3E 63 03 03 
1cb42     03 63 3E 00 
1cb46     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1cb4a     30 18 0C 00 
1cb4e     1E 30 3E 33 
1cb52     33 33 6E 00 
1cb56     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1cb5a     60 30 18 00 
1cb5e     1C 18 18 18 
1cb62     18 18 3C 00 
1cb66     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1cb6a     60 30 18 00 
1cb6e     3E 63 63 63 
1cb72     63 63 3E 00 
1cb76     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1cb7a     30 18 0C 00 
1cb7e     33 33 33 33 
1cb82     33 33 6E 00 
1cb86     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1cb8a     00 08 1C 36 
1cb8e     63 63 7F 63 
1cb92     63 63 63 18 
1cb96     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1cb9a     00 00 00 00 
1cb9e     1E 30 3E 33 
1cba2     33 33 6E 18 
1cba6     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1cbaa     00 7F 63 61 
1cbae     30 18 0C 06 
1cbb2     43 63 7F 00 
1cbb6     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1cbba     36 1C 08 00 
1cbbe     7F 33 18 0C 
1cbc2     06 63 7F 00 
1cbc6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1cbca     00 7F 66 46 
1cbce     16 1E 16 06 
1cbd2     46 66 7F 18 
1cbd6     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1cbda     00 00 00 00 
1cbde     3E 63 7F 03 
1cbe2     03 63 3E 18 
1cbe6     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1cbea     00 3C 66 03 
1cbee     1F 03 0F 03 
1cbf2     03 66 3C 00 
1cbf6     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1cbfa     60 30 18 00 
1cbfe     7F 33 18 0C 
1cc02     06 63 7F 00 
1cc06     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1cc0a     00 3C 66 43 
1cc0e     03 03 03 03 
1cc12     43 66 3C 00 
1cc16     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1cc1a     00 00 00 00 
1cc1e     3E 63 06 1C 
1cc22     30 63 3E 18 
1cc26     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1cc2a     00 00 00 00 
1cc2e     00 00       | 	byte	$00[6]
1cc30     6C 36 1B 36 
1cc34     6C 00 00 00 
1cc38     00 00 00 00 
1cc3c     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cc40     1B 36 6C 36 
1cc44     1B 00 00 00 
1cc48     88 22 88 22 
1cc4c     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1cc50     88 22 88 22 
1cc54     88 22 88 22 
1cc58     AA 55 AA 55 
1cc5c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1cc60     AA 55 AA 55 
1cc64     AA 55 AA 55 
1cc68     BB EE BB EE 
1cc6c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1cc70     BB EE BB EE 
1cc74     BB EE BB EE 
1cc78     18 18 18 18 
1cc7c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1cc80     18 18 18 18 
1cc84     18 18 18 18 
1cc88     18 18 18 18 
1cc8c     18 18 18    | 	byte	$18[15]
1cc8f     1F 18 18 18 
1cc93     18 18 18 18 
1cc97     18 30 18 00 
1cc9b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1cc9f     63 7F 63 63 
1cca3     63 63 00 00 
1cca7     00 1C 36 00 
1ccab     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1ccaf     63 7F 63 63 
1ccb3     63 63 00 00 
1ccb7     00 36 1C 00 
1ccbb     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1ccbf     1E 16 06 46 
1ccc3     66 7F 00 00 
1ccc7     00 00 00 00 
1cccb     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1cccf     1C 30 60 63 
1ccd3     63 3E 18 30 
1ccd7     1E 6C 6C 6C 
1ccdb     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1ccdf     6F 6C 6C 6C 
1cce3     6C 6C 6C 6C 
1cce7     6C 6C 6C 6C 
1cceb     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1ccef     6C 6C 6C 6C 
1ccf3     6C 6C 6C 6C 
1ccf7     6C          | 	byte	$6c[9]
1ccf8     00 00 00 00 
1ccfc     00          | 	byte	$00[5]
1ccfd     7F 60 6F 6C 
1cd01     6C 6C 6C 6C 
1cd05     6C 6C 6C 6C 
1cd09     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1cd0d     6F 60 7F 00 
1cd11     00 00 00 00 
1cd15     00 00 00 18 
1cd19     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1cd1d     61 30 18 0C 
1cd21     06 43 63 7F 
1cd25     00 00 00 00 
1cd29     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1cd2d     00 7F 33 18 
1cd31     0C 06 63 7F 
1cd35     00 00 00 00 
1cd39     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1cd3d     00 00 1F 18 
1cd41     18 18 18 18 
1cd45     18 18 18 18 
1cd49     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1cd4d     18 18 F8 00 
1cd51     00 00 00 00 
1cd55     00 00 00 18 
1cd59     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1cd5d     18 18 FF 00 
1cd61     00 00 00 00 
1cd65     00 00 00 00 
1cd69     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cd6d     00 00 FF 18 
1cd71     18 18 18 18 
1cd75     18 18 18 18 
1cd79     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1cd7d     18 18 F8 18 
1cd81     18 18 18 18 
1cd85     18 18 18 00 
1cd89     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1cd8d     00 00 FF 00 
1cd91     00 00 00 00 
1cd95     00 00 00 18 
1cd99     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1cd9d     18 18 FF 18 
1cda1     18 18 18 18 
1cda5     18 18 18 63 
1cda9     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1cdad     36 63 63 7F 
1cdb1     63 63 63 63 
1cdb5     00 00 00 00 
1cdb9     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1cdbd     00 1E 30 3E 
1cdc1     33 33 33 6E 
1cdc5     00 00 00 6C 
1cdc9     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1cdcd     EC 0C FC 00 
1cdd1     00 00 00 00 
1cdd5     00 00 00 00 
1cdd9     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cddd     FC 0C EC 6C 
1cde1     6C 6C 6C 6C 
1cde5     6C 6C 6C 6C 
1cde9     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1cded     EF 00 FF 00 
1cdf1     00 00 00 00 
1cdf5     00 00 00 00 
1cdf9     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cdfd     FF 00 EF 6C 
1ce01     6C 6C 6C 6C 
1ce05     6C 6C 6C 6C 
1ce09     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1ce0d     EC 0C EC 6C 
1ce11     6C 6C 6C 6C 
1ce15     6C 6C 6C 00 
1ce19     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1ce1d     FF 00 FF 00 
1ce21     00 00 00 00 
1ce25     00 00 00 6C 
1ce29     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1ce2d     EF 00 EF 6C 
1ce31     6C 6C 6C 6C 
1ce35     6C 6C 6C 00 
1ce39     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1ce3d     63 3E 63 63 
1ce41     63 63 3E 63 
1ce45     00 00 00 00 
1ce49     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1ce4d     30 3C 36 33 
1ce51     33 33 33 6E 
1ce55     00 00 00 00 
1ce59     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1ce5d     66 66 6F 66 
1ce61     66 66 36 1F 
1ce65     00 00 00 36 
1ce69     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1ce6d     66 66 66 66 
1ce71     66 66       | 	byte	$66[6]
1ce73     36 1F 00 00 
1ce77     00 00 63 00 
1ce7b     7F 66 46 16 
1ce7f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1ce83     66 7F 00 00 
1ce87     00 6C 38 00 
1ce8b     38 30 30 3C 
1ce8f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1ce93     33 6E 00 00 
1ce97     00 36 1C 00 
1ce9b     63 67 6F 7F 
1ce9f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1cea3     63 63 00 00 
1cea7     00 30 18 00 
1ceab     3C 18 18 18 
1ceaf     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1ceb3     18 3C 00 00 
1ceb7     00 3C 66 00 
1cebb     3C 18 18 18 
1cebf     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1cec3     18 3C 00 00 
1cec7     00 00 00 36 
1cecb     1C 08 00 3E 
1cecf     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1ced3     63 3E 00 00 
1ced7     00 18 18 18 
1cedb     18 18 18 18 
1cedf     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1cee3     00 00 00 00 
1cee7     00 00 00 00 
1ceeb     00 00 00 00 | 	byte	$00[12]
1ceef     F8 18 18 18 
1cef3     18 18 18 18 
1cef7     18 FF FF FF 
1cefb     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1ceff     FF FF FF FF 
1cf03     FF FF FF FF 
1cf07     FF          | 	byte	$ff[9]
1cf08     00 00 00 00 
1cf0c     00 00 00    | 	byte	$00[7]
1cf0f     FF FF FF FF 
1cf13     FF FF FF FF 
1cf17     FF          | 	byte	$ff[9]
1cf18     00 00 00 7E 
1cf1c     7E 5A 18 18 
1cf20     18 18 18 18 
1cf24     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1cf28     1C 36 1C 63 
1cf2c     63 63 63 63 
1cf30     63 63 63 63 
1cf34     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1cf38     FF FF FF FF 
1cf3c     FF FF FF    | 	byte	$ff[7]
1cf3f     00 00 00 00 
1cf43     00 00 00 00 
1cf47     00          | 	byte	$00[9]
1cf48     30 18 00 3E 
1cf4c     63 63 63 63 
1cf50     63 63 63 63 
1cf54     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1cf58     00 00 00 1E 
1cf5c     33 33 33 1B 
1cf60     33 63 63 63 
1cf64     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1cf68     1C 36 00 3E 
1cf6c     63 63 63 63 
1cf70     63 63 63 63 
1cf74     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1cf78     30 18 00 63 
1cf7c     67 6F 7F 7B 
1cf80     73 63 63 63 
1cf84     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1cf88     00 00 60 30 
1cf8c     18 00 3B 66 
1cf90     66 66 66 66 
1cf94     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1cf98     00 00 36 1C 
1cf9c     08 00 3B 66 
1cfa0     66 66 66 66 
1cfa4     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1cfa8     36 1C 00 3E 
1cfac     63 63 06 1C 
1cfb0     30 60 63 63 
1cfb4     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1cfb8     00 00 36 1C 
1cfbc     08 00 3E 63 
1cfc0     06 1C 30 63 
1cfc4     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1cfc8     30 18 00 3F 
1cfcc     66 66 66 3E 
1cfd0     36 66 66 66 
1cfd4     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1cfd8     30 18 00 63 
1cfdc     63 63 63 63 
1cfe0     63 63 63 63 
1cfe4     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1cfe8     00 00 60 30 
1cfec     18 00 3B 6E 
1cff0     66 06 06 06 
1cff4     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1cff8     66 33 00 63 
1cffc     63 63 63 63 
1d000     63 63 63 63 
1d004     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1d008     00 00 60 30 
1d00c     18 00 63 63 
1d010     63 63 63 63 
1d014     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1d018     30 18 00 66 
1d01c     66 66 66 3C 
1d020     18 18 18 18 
1d024     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1d028     00 00 00 08 
1d02c     0C 0C 3F 0C 
1d030     0C 0C 0C 6C 
1d034     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1d038     30 18 00 00 
1d03c     00 00 00 00 
1d040     00 00 00 00 
1d044     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d048     00 00 00 00 
1d04c     00 00 00 00 | 	byte	$00[8]
1d050     7F 00 00 00 
1d054     00 00 00 00 
1d058     66 33 00 00 
1d05c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1d060     00 00 00 00 
1d064     00 00 00 00 
1d068     00 00 00 00 
1d06c     00 00 00 00 
1d070     00 00 00 00 
1d074     00          | 	byte	$00[21]
1d075     0C 06 3C 36 
1d079     1C 00 00 00 
1d07d     00 00 00 00 
1d081     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d085     00 00 00 63 
1d089     3E 00 00 00 
1d08d     00 00 00 00 
1d091     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d095     00 00 00 00 
1d099     3E 63 06 1C 
1d09d     36 63 63 36 
1d0a1     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1d0a5     00 00 00 00 
1d0a9     00 00 00 00 | 	byte	$00[8]
1d0ad     18 00 7E 00 
1d0b1     18 00 00 00 
1d0b5     00 00 00 00 
1d0b9     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d0bd     00 00 00 00 
1d0c1     00 00 00 00 | 	byte	$00[8]
1d0c5     18 30 1E 00 
1d0c9     00 00 1C 36 
1d0cd     36 1C 00 00 
1d0d1     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1d0d5     00 00 00 00 
1d0d9     63 00 00 00 
1d0dd     00 00 00 00 
1d0e1     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d0e5     00 00 00 18 
1d0e9     18 00 00 00 
1d0ed     00 00 00 00 
1d0f1     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d0f5     00 00 00 00 
1d0f9     00          | 	byte	$00[5]
1d0fa     CC 66 33 00 
1d0fe     33 33 33 33 
1d102     33 33 6E 00 
1d106     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1d10a     00 3F 66 66 
1d10e     66 3E 36 66 
1d112     66 66 6F 00 
1d116     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1d11a     36 1C 08 00 
1d11e     3B 6E 66 06 
1d122     06 06 0F 00 
1d126     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1d12a     00 00 00 7E 
1d12e     7E 7E 7E 7E 
1d132     7E 7E 00 00 
1d136     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1d13a     00 00 00 00 
1d13e     00 00 00 00 
1d142     00 00 00 00 
1d146     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d148     00 00 00 00 
      ...             
1d178     00 00 00 00 
1d17c     00 00 00    | st_font        file "st4font.def"
1d17f     FF FF 00 00 
1d183     00 00 00 00 
1d187     00 18 18 18 
1d18b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d18f     18 18 18 18 
1d193     18 18 18 18 
1d197     18          | 	byte	$18[9]
1d198     00 00 00 00 
1d19c     00 00 00    | 	byte	$00[7]
1d19f     FF FF 18 18 
1d1a3     18 18 18 18 
1d1a7     18 18 18 18 
1d1ab     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d1af     FF FF 00 00 
1d1b3     00 00 00 00 
1d1b7     00 18 18 18 
1d1bb     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d1bf     1F 1F 18 18 
1d1c3     18 18 18 18 
1d1c7     18 18 18 18 
1d1cb     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d1cf     F8 F8 18 18 
1d1d3     18 18 18 18 
1d1d7     18 00 00 00 
1d1db     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d1df     1F 1F 18 18 
1d1e3     18 18 18 18 
1d1e7     18 00 00 00 
1d1eb     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d1ef     F8 F8 18 18 
1d1f3     18 18 18 18 
1d1f7     18 18 18 18 
1d1fb     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d1ff     1F 1F 00 00 
1d203     00 00 00 00 
1d207     00 18 18 18 
1d20b     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d20f     F8 F8 00 00 
1d213     00 00 00 00 
1d217     00 18 18 18 
1d21b     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d21f     FF FF 18 18 
1d223     18 18 18 18 
1d227     18 00 00 18 
1d22b     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1d22f     66 7E 7E 66 
1d233     66 66 66 30 
1d237     18 00 00 7E 
1d23b     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1d23f     3E 06 06 06 
1d243     06 7E 7E 18 
1d247     0C 30 18 3C 
1d24b     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1d24f     06 06 06 66 
1d253     66 7E 3C 00 
1d257     00 30 18 66 
1d25b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1d25f     7E 7E 76 76 
1d263     66 66 66 00 
1d267     00 30 18 7C 
1d26b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1d26f     1C 38 70 60 
1d273     60 7E 3E 00 
1d277     00 30 18 7E 
1d27b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1d27f     18 0C 0C 06 
1d283     06 7E 7E 00 
1d287     00 18 18 00 
1d28b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1d28f     18 18 0C 0C 
1d293     06 7E 7E 00 
1d297     00 30 18 3C 
1d29b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1d29f     66 66 66 66 
1d2a3     66          | 	byte	$66[5]
1d2a4     7E 3C 00 00 
1d2a8     00 00 06 06 
1d2ac     06 06 16 1E 
1d2b0     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1d2b4     7E 7E 00 00 
1d2b8     00 00 00 00 
1d2bc     00 3C 7C 60 
1d2c0     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1d2c4     7E 7C 30 18 
1d2c8     00 00 00 00 
1d2cc     00 3C 7E 66 
1d2d0     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1d2d4     7E 7C 18 0C 
1d2d8     00 00 30 18 
1d2dc     00 3C 3E 06 
1d2e0     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1d2e4     7E 7C 00 00 
1d2e8     00 00 30 18 
1d2ec     00 3E 7E 66 
1d2f0     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1d2f4     66 66 00 00 
1d2f8     00 00 30 18 
1d2fc     00 7C 7E 06 
1d300     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1d304     7E 3E 00 00 
1d308     00 00 30 18 
1d30c     00 7E 7E 30 
1d310     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1d314     7E 7E 00 00 
1d318     00 00 18 18 
1d31c     00 7E 7E 30 
1d320     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1d324     7E 7E 00 00 
1d328     00 00 30 18 
1d32c     00 3C 7E 66 
1d330     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1d334     7E 3C 00 00 
1d338     00 00 1C 1C 
1d33c     18 18 38 3C 
1d340     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1d344     3C 3C 00 00 
1d348     00 00 00 00 
1d34c     00 00 00 00 
1d350     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d354     00 00 00 00 
1d358     00 00       | 	byte	$00[6]
1d35a     18 18 18 18 
1d35e     18 18 18 18 | 	byte	$18[8]
1d362     00 00 18 18 
1d366     00 00 00 00 
1d36a     66 66 66 66 
1d36e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1d372     00 00 00 00 
1d376     00 00 00 00 
1d37a     00          | 	byte	$00[9]
1d37b     66 66 FF FF 
1d37f     66 66 FF FF 
1d383     66 66 00 00 
1d387     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1d38b     7C 7E 06 06 
1d38f     3E 7C 60 60 
1d393     7E 3E 18 18 
1d397     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1d39b     66 30 30 18 
1d39f     18 0C 0C 66 
1d3a3     66 00 00 00 
1d3a7     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1d3ab     66 66 3C 1C 
1d3af     1C FC FE 66 
1d3b3     66 FE FC 00 
1d3b7     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1d3bb     18 18 18 18 
1d3bf     00 00 00 00 
1d3c3     00 00 00 00 
1d3c7     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1d3cb     18 1C 0C 0C 
1d3cf     0C 0C 0C 0C 
1d3d3     1C 18 30 00 
1d3d7     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1d3db     18 38 30 30 
1d3df     30 30 30 30 
1d3e3     38 18 0C 00 
1d3e7     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1d3eb     66 66 3C 3C 
1d3ef     FF FF 3C 3C 
1d3f3     66 66 00 00 
1d3f7     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1d3fb     00 18 18 18 
1d3ff     7E 7E 18 18 
1d403     18 00 00 00 
1d407     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d40b     00 00 00 00 
1d40f     00 00       | 	byte	$00[6]
1d411     18 18 18 18 
1d415     18          | 	byte	$18[5]
1d416     0C 04 00 00 
1d41a     00 00 00 00 
1d41e     7E 7E 00 00 
1d422     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1d426     00 00 00 00 
1d42a     00 00 00 00 
1d42e     00 00 00 00 
1d432     00          | 	byte	$00[13]
1d433     18 18 18 00 
1d437     00 00 00 60 
1d43b     60 60 30 30 
1d43f     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1d443     06 06 06 00 
1d447     00 00 00 3C 
1d44b     7E 66 66 66 
1d44f     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1d453     66 7E 3C 00 
1d457     00 00 00 18 
1d45b     18 1C 1C 18 
1d45f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1d463     18 7E 7E 00 
1d467     00 00 00 3C 
1d46b     7E 66 66 30 
1d46f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1d473     0C 7E 7E 00 
1d477     00 00 00 7E 
1d47b     7E 30 30 18 
1d47f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1d483     66 7E 3C 00 
1d487     00 00 00 30 
1d48b     30 38 38 3C 
1d48f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1d493     7E 30 30 00 
1d497     00 00 00 7E 
1d49b     7E 06 06 3E 
1d49f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1d4a3     66 7E 3C 00 
1d4a7     00 00 00 38 
1d4ab     3C 0E 06 06 
1d4af     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1d4b3     66 7E 3C 00 
1d4b7     00 00 00 7E 
1d4bb     7E 60 60 30 
1d4bf     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1d4c3     0C 0C 0C 00 
1d4c7     00 00 00 3C 
1d4cb     7E 66 66 3C 
1d4cf     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1d4d3     66 7E 3C 00 
1d4d7     00 00 00 3C 
1d4db     7E 66 66 7E 
1d4df     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1d4e3     70 3C 1C 00 
1d4e7     00 00 00 00 
1d4eb     00 00 18 18 
1d4ef     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1d4f3     18 18 18 00 
1d4f7     00 00 00 00 
1d4fb     00 00 18 18 
1d4ff     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1d503     18 18 18 0C 
1d507     04 00 00 00 
1d50b     70 38 1C 0E 
1d50f     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1d513     70 00 00 00 
1d517     00 00 00 00 
1d51b     00 00 7E 7E 
1d51f     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1d523     00 00 00 00 
1d527     00 00 00 00 | 	byte	$00[8]
1d52b     0E 1C 38 70 
1d52f     E0 70 38 1C 
1d533     0E 00 00 00 
1d537     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1d53b     7E 66 66 30 
1d53f     30 18 18 18 
1d543     00 18 18 00 
1d547     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1d54b     7E 66 66 66 
1d54f     66 36 06 66 
1d553     66 7E 3C 00 
1d557     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1d55b     3C 7E 66 66 
1d55f     66 7E 7E 66 
1d563     66 66 66 00 
1d567     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1d56b     7E 66 66 7E 
1d56f     3E 66 66 66 
1d573     66 7E 3E 00 
1d577     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1d57b     7E 66 66 06 
1d57f     06 06 06 66 
1d583     66 7E 3C 00 
1d587     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1d58b     7E 66 66 66 
1d58f     66 66 66 66 
1d593     66 7E 3E 00 
1d597     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1d59b     7E 06 06 3E 
1d59f     3E 06 06 06 
1d5a3     06 7E 7E 00 
1d5a7     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1d5ab     7E 06 06 3E 
1d5af     3E 06 06 06 
1d5b3     06 06 06 00 
1d5b7     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1d5bb     7E 06 06 76 
1d5bf     76 66 66 66 
1d5c3     66 7E 3C 00 
1d5c7     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1d5cb     66 66 66 7E 
1d5cf     7E 66 66 66 
1d5d3     66 66 66 00 
1d5d7     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1d5db     7E 18 18 18 
1d5df     18 18 18 18 
1d5e3     18 7E 7E 00 
1d5e7     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1d5eb     60 60 60 60 
1d5ef     60 60 60    | 	byte	$60[7]
1d5f2     66 66 7E 3C 
1d5f6     00 00 00 00 
1d5fa     66 66 36 36 
1d5fe     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1d602     66 66 C6 C6 
1d606     00 00 00 00 
1d60a     06 06 06 06 
1d60e     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1d612     06 06 7E 7E 
1d616     00 00 00 00 
1d61a     C6 C6 EE EE 
1d61e     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1d622     C6 C6 C6 C6 
1d626     00 00 00 00 
1d62a     66 66 66 6E 
1d62e     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1d632     76 66 66 66 
1d636     00 00 00 00 
1d63a     3C 7E 66 66 
1d63e     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1d642     66 66 7E 3C 
1d646     00 00 00 00 
1d64a     3E 7E 66 66 
1d64e     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1d652     06 06 06 06 
1d656     00 00 00 00 
1d65a     3C 7E 66 66 
1d65e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1d662     66 56 3E 6C 
1d666     00 00 00 00 
1d66a     3E 7E 66 66 
1d66e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1d672     66 66 C6 C6 
1d676     00 00 00 00 
1d67a     7C 7E 06 06 
1d67e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1d682     60 60 7E 3E 
1d686     00 00 00 00 
1d68a     7E 7E 18 18 
1d68e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1d692     18 18 18 18 
1d696     00 00 00 00 
1d69a     66 66 66 66 
1d69e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1d6a2     66 66 7E 3C 
1d6a6     00 00 00 00 
1d6aa     66 66 66 66 
1d6ae     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1d6b2     3C 3C 18 18 
1d6b6     00 00 00 00 
1d6ba     C6 C6 C6 C6 
1d6be     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1d6c2     FE EE C6 82 
1d6c6     00 00 00 00 
1d6ca     66 66 66 3C 
1d6ce     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1d6d2     3C 66 66 66 
1d6d6     00 00 00 00 
1d6da     66 66 66 66 
1d6de     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1d6e2     18 18 18 18 
1d6e6     00 00 00 00 
1d6ea     7E 7E 30 30 
1d6ee     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1d6f2     06 06 7E 7E 
1d6f6     00 00 00 00 
1d6fa     3C 3C 0C 0C 
1d6fe     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1d702     0C 0C 3C 3C 
1d706     00 00 00 00 
1d70a     06 06 0C 0C 
1d70e     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1d712     60 60 C0 C0 
1d716     00 00 00 00 
1d71a     3C 3C 30 30 
1d71e     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1d722     30 30 3C 3C 
1d726     00 00 00 00 
1d72a     18 18 3C 3C 
1d72e     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1d732     00 00 00 00 
1d736     00 00 00 00 
1d73a     00 00 00 00 
1d73e     00 00 00 00 
1d742     00 00       | 	byte	$00[18]
1d744     FE FE 00 00 
1d748     00 00 0C 0C 
1d74c     18 18 00 00 
1d750     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1d754     00 00 00 00 
1d758     00 00 00 00 
1d75c     00          | 	byte	$00[9]
1d75d     3C 7C 60 7C 
1d761     7E 66 66 7E 
1d765     7C 00 00 00 
1d769     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1d76d     3E 7E 66 66 
1d771     66 66 66 7E 
1d775     3E 00 00 00 
1d779     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1d77d     3C 3E 06 06 
1d781     06 06 06 7E 
1d785     7C 00 00 00 
1d789     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1d78d     7C 7E 66 66 
1d791     66 66 66 7E 
1d795     7C 00 00 00 
1d799     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1d79d     3C 7E 66 66 
1d7a1     7E 06 06 7E 
1d7a5     7C 00 00 00 
1d7a9     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1d7ad     18 7E 7E 18 
1d7b1     18 18 18 18 
1d7b5     18 00 00 00 
1d7b9     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d7bd     7C 7E 66 66 
1d7c1     66 66 7E 7C 
1d7c5     60 7E 3E 00 
1d7c9     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1d7cd     3E 7E 66 66 
1d7d1     66 66 66 66 
1d7d5     66 00 00 00 
1d7d9     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1d7dd     1C 1C 18 18 
1d7e1     18 18 18 3C 
1d7e5     3C 00 00 00 
1d7e9     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1d7ed     30 30 30 30 
1d7f1     30 30 30 30 
1d7f5     30          | 	byte	$30[9]
1d7f6     3E 1E 00 00 
1d7fa     06 06 06 36 
1d7fe     36 1E 1E 1E 
1d802     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1d806     00 00 00 00 
1d80a     1C 1C 18 18 
1d80e     18 18 18 18 
1d812     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1d816     00 00 00 00 
1d81a     00 00 00    | 	byte	$00[7]
1d81d     6C FE FE D6 
1d821     D6 C6 C6 C6 
1d825     C6 00 00 00 
1d829     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1d82d     3E 7E 66 66 
1d831     66 66 66 66 
1d835     66 00 00 00 
1d839     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1d83d     3C 7E 66 66 
1d841     66 66 66 7E 
1d845     3C 00 00 00 
1d849     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1d84d     3E 7E 66 66 
1d851     66 66 66 7E 
1d855     3E 06 06 00 
1d859     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1d85d     7C 7E 66 66 
1d861     66 66 66 7E 
1d865     7C 60 60 00 
1d869     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1d86d     3E 7E 66 06 
1d871     06 06 06 06 
1d875     06 00 00 00 
1d879     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1d87d     7C 7E 06 0E 
1d881     3C 70 60 7E 
1d885     3E 00 00 00 
1d889     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1d88d     7E 7E 18 18 
1d891     18 18 18 78 
1d895     70 00 00 00 
1d899     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1d89d     66 66 66 66 
1d8a1     66 66 66    | 	byte	$66[7]
1d8a4     7E 7C 00 00 
1d8a8     00 00 00 00 
1d8ac     00 66 66 66 
1d8b0     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1d8b4     18 18 00 00 
1d8b8     00 00 00 00 
1d8bc     00 C6 C6 D6 
1d8c0     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1d8c4     C6 82 00 00 
1d8c8     00 00 00 00 
1d8cc     00 66 66 3C 
1d8d0     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1d8d4     66 66 00 00 
1d8d8     00 00 00 00 
1d8dc     00 66 66 66 
1d8e0     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1d8e4     7C 60 7E 3E 
1d8e8     00 00 00 00 
1d8ec     00 7E 7E 30 
1d8f0     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1d8f4     7E 7E 00 00 
1d8f8     00 00 30 18 
1d8fc     18 18 18 0C 
1d900     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1d904     18 30 00 00 
1d908     00 00 18 18 
1d90c     18 18 18 18 
1d910     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d914     18 18 00 00 
1d918     00 00 0C 18 
1d91c     18 18 18 30 
1d920     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1d924     18 0C 00 00 
1d928     00 00 6C 7E 
1d92c     36 00 00 00 
1d930     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1d934     00 00 00 00 
1d938     00 00 00 00 
1d93c     00          | 	byte	$00[9]
1d93d     18 18 18 18 
1d941     18 18 00 00 
1d945     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1d948     00 00 00 00 
1d94c     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1d950     00 00 00 00 
1d954     00 80 80 80 
1d958     00 00 00 FF 
1d95c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1d960     00 00 00 00 
1d964     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1d965     80 00 00 00 
1d969     00 80 00 00 
1d96d     80 80 00 00 
1d971     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1d975     80 00 80 00 
1d979     00 40 80 00 
1d97d     AA AA AA 00 
1d981     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1d985     FF 00 00 00 
1d989     00 FF 00 00 
1d98d     FF FF 00 00 
1d991     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1d995     FF 00 FF 00 
1d999     00 FF FF 00 
1d99d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1d9a0     00 00 00 00 
1d9a4     00          | ataripalette   file "ataripalettep2.def"
1d9a5     11 11 11 00 
1d9a9     22 22 22 00 
1d9ad     33 33 33 00 
1d9b1     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1d9b5     55 55 55 00 
1d9b9     66 66 66 00 
1d9bd     77 77 77 00 
1d9c1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1d9c5     99 99 99 00 
1d9c9     AA AA AA 00 
1d9cd     BB BB BB 00 
1d9d1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1d9d5     DD DD DD 00 
1d9d9     EE EE EE 00 
1d9dd     FF FF FF 00 
1d9e1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1d9e5     00 14 40 00 
1d9e9     00 1E 60 00 
1d9ed     00 28 80 00 
1d9f1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1d9f5     00 3C BF 00 
1d9f9     00 46 DF 00 
1d9fd     00 50 FF 00 
1da01     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1da05     39 77 FF 00 
1da09     55 8A FF 00 
1da0d     71 9E FF 00 
1da11     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1da15     AA C5 FF 00 
1da19     C6 D8 FF 00 
1da1d     E3 EC FF 00 
1da21     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1da25     00 00 40 00 
1da29     00 00 60 00 
1da2d     00 00 80 00 
1da31     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1da35     00 00 BF 00 
1da39     00 00 DF 00 
1da3d     00 00 FF 00 
1da41     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1da45     39 39 FF 00 
1da49     55 55 FF 00 
1da4d     71 71 FF 00 
1da51     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1da55     AA AA FF 00 
1da59     C6 C6 FF 00 
1da5d     E3 E3 FF 00 
1da61     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1da65     20 00 40 00 
1da69     30 00 60 00 
1da6d     40 00 80 00 
1da71     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1da75     60 00 BF 00 
1da79     70 00 DF 00 
1da7d     80 00 FF 00 
1da81     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1da85     9C 39 FF 00 
1da89     AA 55 FF 00 
1da8d     B8 71 FF 00 
1da91     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1da95     D5 AA FF 00 
1da99     E3 C6 FF 00 
1da9d     F1 E3 FF 00 
1daa1     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1daa5     40 00 40 00 
1daa9     60 00 60 00 
1daad     80 00 80 00 
1dab1     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1dab5     BF 00 BF 00 
1dab9     DF 00 DF 00 
1dabd     FF 00 FF 00 
1dac1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1dac5     FF 39 FF 00 
1dac9     FF 55 FF 00 
1dacd     FF 71 FF 00 
1dad1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1dad5     FF AA FF 00 
1dad9     FF C6 FF 00 
1dadd     FF E3 FF 00 
1dae1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1dae5     40 00 20 00 
1dae9     60 00 30 00 
1daed     80 00 40 00 
1daf1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1daf5     BF 00 60 00 
1daf9     DF 00 70 00 
1dafd     FF 00 80 00 
1db01     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1db05     FF 39 9C 00 
1db09     FF 55 AA 00 
1db0d     FF 71 B8 00 
1db11     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1db15     FF AA D5 00 
1db19     FF C6 E3 00 
1db1d     FF E3 F1 00 
1db21     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1db25     40 00 00 00 
1db29     60 00 00 00 
1db2d     80 00 00 00 
1db31     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1db35     BF 00 00 00 
1db39     DF 00 00 00 
1db3d     FF 00 00 00 
1db41     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1db45     FF 39 39 00 
1db49     FF 55 55 00 
1db4d     FF 71 71 00 
1db51     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1db55     FF AA AA 00 
1db59     FF C6 C6 00 
1db5d     FF E3 E3 00 
1db61     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1db65     40 10 00 00 
1db69     60 18 00 00 
1db6d     80 20 00 00 
1db71     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1db75     BF 30 00 00 
1db79     DF 38 00 00 
1db7d     FF 40 00 00 
1db81     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1db85     FF 6A 39 00 
1db89     FF 80 55 00 
1db8d     FF 95 71 00 
1db91     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1db95     FF BF AA 00 
1db99     FF D5 C6 00 
1db9d     FF EA E3 00 
1dba1     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1dba5     40 20 00 00 
1dba9     60 30 00 00 
1dbad     80 40 00 00 
1dbb1     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1dbb5     BF 60 00 00 
1dbb9     DF 70 00 00 
1dbbd     FF 80 00 00 
1dbc1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1dbc5     FF 9C 39 00 
1dbc9     FF AA 55 00 
1dbcd     FF B8 71 00 
1dbd1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1dbd5     FF D5 AA 00 
1dbd9     FF E3 C6 00 
1dbdd     FF F1 E3 00 
1dbe1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1dbe5     40 30 00 00 
1dbe9     60 48 00 00 
1dbed     80 60 00 00 
1dbf1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1dbf5     BF 90 00 00 
1dbf9     DF A8 00 00 
1dbfd     FF C0 00 00 
1dc01     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1dc05     FF CE 39 00 
1dc09     FF D5 55 00 
1dc0d     FF DC 71 00 
1dc11     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1dc15     FF EA AA 00 
1dc19     FF F1 C6 00 
1dc1d     FF F8 E3 00 
1dc21     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1dc25     30 40 00 00 
1dc29     48 60 00 00 
1dc2d     60 80 00 00 
1dc31     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1dc35     90 BF 00 00 
1dc39     A8 DF 00 00 
1dc3d     C0 FF 00 00 
1dc41     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1dc45     CE FF 39 00 
1dc49     D5 FF 55 00 
1dc4d     DC FF 71 00 
1dc51     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1dc55     EA FF AA 00 
1dc59     F1 FF C6 00 
1dc5d     F8 FF E3 00 
1dc61     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1dc65     00 40 00 00 
1dc69     00 60 00 00 
1dc6d     00 80 00 00 
1dc71     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1dc75     00 BF 00 00 
1dc79     00 DF 00 00 
1dc7d     00 FF 00 00 
1dc81     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1dc85     39 FF 39 00 
1dc89     55 FF 55 00 
1dc8d     71 FF 71 00 
1dc91     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1dc95     AA FF AA 00 
1dc99     C6 FF C6 00 
1dc9d     E3 FF E3 00 
1dca1     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1dca5     00 40 14 00 
1dca9     00 60 1E 00 
1dcad     00 80 28 00 
1dcb1     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1dcb5     00 BF 3C 00 
1dcb9     00 DF 46 00 
1dcbd     00 FF 50 00 
1dcc1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1dcc5     39 FF 77 00 
1dcc9     55 FF 8A 00 
1dccd     71 FF 9E 00 
1dcd1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1dcd5     AA FF C5 00 
1dcd9     C6 FF D8 00 
1dcdd     E3 FF EC 00 
1dce1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1dce5     00 40 28 00 
1dce9     00 60 3C 00 
1dced     00 80 50 00 
1dcf1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1dcf5     00 BF 78 00 
1dcf9     00 DF 8C 00 
1dcfd     00 FF A0 00 
1dd01     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1dd05     39 FF B5 00 
1dd09     55 FF C0 00 
1dd0d     71 FF CA 00 
1dd11     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1dd15     AA FF DF 00 
1dd19     C6 FF EA 00 
1dd1d     E3 FF F4 00 
1dd21     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1dd25     00 40 40 00 
1dd29     00 60 60 00 
1dd2d     00 80 80 00 
1dd31     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1dd35     00 BF BF 00 
1dd39     00 DF DF 00 
1dd3d     00 FF FF 00 
1dd41     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1dd45     39 FF FF 00 
1dd49     55 FF FF 00 
1dd4d     71 FF FF 00 
1dd51     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1dd55     AA FF FF 00 
1dd59     C6 FF FF 00 
1dd5d     E3 FF FF 00 
1dd61     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1dd65     00 28 40 00 
1dd69     00 3C 60 00 
1dd6d     00 50 80 00 
1dd71     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1dd75     00 78 BF 00 
1dd79     00 8C DF 00 
1dd7d     00 A0 FF 00 
1dd81     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1dd85     39 B5 FF 00 
1dd89     55 C0 FF 00 
1dd8d     71 CA FF 00 
1dd91     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1dd95     AA DF FF 00 
1dd99     C6 EA FF 00 
1dd9d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1dda0                 | '**********************************************************************************
1dda0                 | '
1dda0                 | '        Timings and colors definitions
1dda0                 | '
1dda0                 | '**********************************************************************************
1dda0                 | 
1dda0                 |    'streamer sets for text mode, to add to timings[0..5]
1dda0                 | ' todo for the retromachine: 768x576
1dda0                 | 
1dda0                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1dda0     10 00 00 00 
1dda4     50 00 00 00 
1dda8     14 00 00 00 
1ddac     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ddb0     70 00 00 00 
1ddb4     08 00 00 00 
1ddb8     30 00 00 00 
1ddbc     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1ddc0     10 00 00 00 
1ddc4     10 00 00 00 
1ddc8     00 00 00 00 
1ddcc     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1ddd0     E0 01 00 00 
1ddd4     F6 32 24 15 
1ddd8     FB 6C C3 01 
1dddc     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1dde0                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1dde0                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1dde0     30 00 00 00 
1dde4     50 00 00 00 
1dde8     34 00 00 00 
1ddec     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1ddf0     20 00 00 00 
1ddf4     08 00 00 00 
1ddf8     16 00 00 00 
1ddfc     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1de00     24 00 00 00 
1de04     18 00 00 00 
1de08     40 00 00 00 
1de0c     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1de10     F0 01 00 00 
1de14     F6 32 24 15 
1de18     FB 6C C3 01 
1de1c     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1de20                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1de20     10 00 00 00 
1de24     40 00 00 00 
1de28     10 00 00 00 
1de2c     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1de30     08 00 00 00 
1de34     08 00 00 00 
1de38     08 00 00 00 
1de3c     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1de40     40 00 00 00 
1de44     20 00 00 00 
1de48     80 00 00 00 
1de4c     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1de50     E0 01 00 00 
1de54     70 AE E9 10 
1de58     FB 8B FF 01 
1de5c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1de60     10 00 00 00 
1de64     42 00 00 00 
1de68     14 00 00 00 
1de6c     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1de70     00 00 00 00 
1de74     08 00 00 00 
1de78     00 00 00 00 
1de7c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1de80     10 00 00 00 
1de84     10 00 00 00 
1de88     C0 00 00 00 
1de8c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1de90     40 02 00 00 
1de94     F6 32 24 15 
1de98     FB 6C C3 01 
1de9c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1dea0     50 00 00 00 
1dea4     A0 00 00 00 
1dea8     54 00 00 00 
1deac     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1deb0     08 00 00 00 
1deb4     08 00 00 00 
1deb8     08 00 00 00 
1debc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1dec0     0C 00 00 00 
1dec4     08 00 00 00 
1dec8     00 01 00 00 
1decc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1ded0     E0 01 00 00 
1ded4     10 06 56 15 
1ded8     FB 64 C3 01 
1dedc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1dee0     50 00 00 00 
1dee4     32 00 00 00 
1dee8     50 00 00 00 
1deec     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1def0     08 00 00 00 
1def4     08 00 00 00 
1def8     08 00 00 00 
1defc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1df00     0C 00 00 00 
1df04     08 00 00 00 
1df08     40 01 00 00 
1df0c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1df10     E0 01 00 00 
1df14     F2 CD 33 13 
1df18     FB 53 92 01 
1df1c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1df20     18 00 00 00 
1df24     30 00 00 00 
1df28     18 00 00 00 
1df2c     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1df30     08 00 00 00 
1df34     08 00 00 00 
1df38     08 00 00 00 
1df3c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1df40     0C 00 00 00 
1df44     08 00 00 00 
1df48     80 01 00 00 
1df4c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1df50     E0 01 00 00 
1df54     F4 8F 11 11 
1df58     FB 3A 55 01 
1df5c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1df60     20 00 00 00 
1df64     40 00 00 00 
1df68     22 00 00 00 
1df6c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1df70     00 00 00 00 
1df74     08 00 00 00 
1df78     00 00 00 00 
1df7c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1df80     0C 00 00 00 
1df84     08 00 00 00 
1df88     C0 01 00 00 
1df8c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1df90     F0 01 00 00 
1df94     F2 CD 33 13 
1df98     FB 53 92 01 
1df9c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1dfa0                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1dfa0     00 75 C7 97 
1dfa4     27 47 F6 0A 
1dfa8     05 79 CB 9B 
1dfac     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1dfb0                 | 
1dfb0     28 12 64 FD | hdmi            setq    #9
1dfb4     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1dfb8                 |            '     setq2   #255
1dfb8                 |             '    rdlong  $100, paletteptr 
1dfb8     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1dfbc     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1dfc0     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1dfc4     78 F9 02 F1 |                 add     ii,hbase
1dfc8     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1dfcc     7B 0B 80 FF 
1dfd0     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1dfd4                 | 
1dfd4     66 66 86 FF 
1dfd8     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1dfdc                 | 
1dfdc                 | 
1dfdc                 | ''--------  frame rendering main loop  ---------------------------------------------------
1dfdc                 | 
1dfdc                 | p101
1dfdc     28 14 64 FD |                 setq    #10
1dfe0     00 DF 06 FB |                 rdlong  framebuf,  ptra
1dfe4     28 1E 64 FD |                 setq    #15
1dfe8     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1dfec     71 99 02 FB |                 rdlong  border,borderptr
1dff0                 | 
1dff0     01 C4 06 F1 |                 add     frames,#1
1dff4     76 F5 02 F6 |                 mov     dlptr2,dlptr
1dff8                 | 
1dff8     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1dffc     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1e000     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1e004     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1e008                 |  '' up porch
1e008                 | 
1e008     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1e00c     49 FF 02 F6 |                 mov     hsync1,sync_001
1e010     37 A8 46 FB |                 callpa  i_upporch ,#blank
1e014     72 01 68 FC |                 wrlong  #0,vblankptr
1e018                 |                 
1e018     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1e01c     29 FE 65 3D |          if_nc  setq2   #255
1e020     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1e024                 | 
1e024                 | '' cursor blinking
1e024                 | 
1e024     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1e028     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1e02c                 | 
1e02c                 | '' main screen
1e02c                 | 
1e02c     00 BE 06 F6 |                 mov linenum,#0
1e030     00 18 07 F6 |                 mov rcnt,#0
1e034     00 1C 07 F6 |                 mov rcnt2a,#0
1e038                 | 
1e038                 | 
1e038     00 18 0F F2 | p301            cmp rcnt,#0 wz
1e03c     18 00 90 AD |         if_z    jmp #p306
1e040     01 18 87 F1 |                 sub rcnt,#1
1e044     90 F7 02 F6 |                 mov dl,rdl
1e048     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1e04c     8F F7 02 A1 |    if_z        add dl,roffset  
1e050     7B 21 03 F6 |                 mov rdl,dl
1e054     04 00 90 FD |                 jmp #p307          
1e058                 |           
1e058                 |                 
1e058     7A F7 02 FB | p306            rdlong  dl,dlptr2
1e05c     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1e060     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1e064     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1e068                 | 
1e068                 | '' Special entry:
1e068                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1e068                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1e068                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1e068                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1e068                 | '' todo: set horizontal scroll (if needed)
1e068                 | 
1e068     02 FA 66 F0 |                 shl framebuf2,#2
1e06c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1e070     04 22 0F F2 |                 cmp dlc,#%100 wz
1e074                 |   
1e074                 |                 
1e074     04 F4 06 F1 |                 add dlptr2,#4
1e078     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1e07c     7A 21 03 FB |                  rdlong rdl,dlptr2
1e080     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1e084     04 18 47 F0 |                  shr rcnt,#4
1e088                 |              
1e088     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1e08c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1e090                 |                 
1e090     04 1E 47 F0 |                  shr roffset,#4
1e094     0C 1E 67 F0 |                  shl roffset,#12
1e098                 |   
1e098     9C FF 9F FD |                  jmp #p301
1e09c                 |                  
1e09c                 |                  
1e09c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1e09c     0C FA 46 F0 |                 shr     framebuf2,#12
1e0a0     02 FA 66 F0 |                 shl     framebuf2,#2
1e0a4                 | 
1e0a4     7B 03 E3 F8 |                 getbyte t1,dl,#0
1e0a8     00 02 0F F2 |                 cmp     t1,#0 wz
1e0ac     34 00 90 AD |     if_z        jmp     #borderline
1e0b0                 | 
1e0b0     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1e0b4     50 00 90 CD |           if_c   jmp     #textline
1e0b8     50 02 90 3D |           if_nc  jmp     #graphline
1e0bc                 | '
1e0bc     01 BE 06 F1 | p302            add     linenum,#1
1e0c0     04 F4 06 F1 |                 add     dlptr2,#4
1e0c4     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1e0c8     6C FF 9F 5D |          if_nz  jmp     #p301
1e0cc                 | 
1e0cc     72 03 68 FC | p112            wrlong  #1,vblankptr
1e0d0     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1e0d4                 | 
1e0d4     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1e0d8     4B FF 02 F6 |                 mov     hsync1,sync_223
1e0dc     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1e0e0     F8 FE 9F FD |                 jmp     #p101
1e0e4                 | 
1e0e4                 | '' ---------------  END of frame rendering loop -------------------------------------------
1e0e4                 | 
1e0e4                 | 
1e0e4     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1e0e8     4C A1 C2 FC |                 xcont   m_vi,border
1e0ec     CC FF 9F FD |                 jmp     #p302
1e0f0                 | 
1e0f0                 | 
1e0f0     08 00 B0 FD | blank           call    #hsync                          'blank lines
1e0f4     7E A1 C2 FC |                 xcont   m_vi,hsync0
1e0f8     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1e0fc                 | 
1e0fc     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1e100     7F 9D B2 FC |                 xzero   m_sn,hsync1
1e104     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1e108                 | 
1e108                 | 
1e108                 | 
1e108                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1e108                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1e108                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1e108                 | 
1e108                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1e108                 | 
1e108     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1e10c                 | 
1e10c     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1e110     7B 17 5B F8 |                 getnib  zoom, dl,#3
1e114     03 16 07 F5 |                 and             zoom, #3
1e118                 | 
1e118                 | 
1e118                 | 
1e118     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1e11c     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1e120     3F BC 06 F5 |                 and     linestart,#63
1e124     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1e128     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1e12c                 | 
1e12c     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1e130                 | 
1e130                 |                        ' if fontline =0, get a border color
1e130                 | 
1e130     51 03 33 F9 | p102            getword t1,m_border,#0
1e134     00 02 0F F2 |                 cmp     t1, #0 wz
1e138     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1e13c                 | 
1e13c     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1e140     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1e144     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1e148     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1e14c     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1e150     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1e154     52 BB 02 F6 |                 mov m_lut2, m_lut1
1e158     6A BB 02 F1 |                 add m_lut2, lutt1
1e15c     58 0F 03 F6 |                 mov cpl2,i_cpl
1e160                 | 
1e160     02 16 0F F2 |                cmp zoom,#2 wz
1e164     E4 00 90 AD |           if_z jmp #p420
1e168     01 16 0F F2 |                cmp zoom,#1 wz
1e16c     64 00 90 AD |           if_z jmp #p410
1e170     00 16 0F F2 |                 cmp zoom,#0 wz
1e174     04 00 90 AD |           if_z jmp #p400
1e178     50 01 90 FD |                jmp #p430
1e17c                 | 
1e17c                 |                    '
1e17c                 |  ''---------------------------------------------------------------------------------------------------------
1e17c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1e180     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e184     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e188     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1e18c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1e190     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1e194     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1e198     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1e19c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1e1a0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1e1a4                 | 
1e1a4     81 BB C2 FC |                         xcont m_lut2,t1
1e1a8                 | 
1e1a8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e1ac     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e1b0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e1b4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e1b8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e1bc     01 C0 86 F1 |                         sub     lutaddr,#1
1e1c0                 | 
1e1c0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1e1c4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1e1c8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1e1cc                 | 
1e1cc     EB 0F 6F FB |                         djnz   cpl2,#p400
1e1d0     28 01 90 FD |  p401                   jmp    #p103
1e1d4                 | 
1e1d4                 | ''------------------------------------------------------------------------------------------------------------
1e1d4                 | 
1e1d4     01 0E 47 F0 |  p410                   shr cpl2,#1
1e1d8                 | 
1e1d8                 | ''---------------------------------------------------------------------------------------------------------
1e1d8     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1e1dc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e1e0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e1e4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1e1e8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1e1ec     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1e1f0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1e1f4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1e1f8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1e1fc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1e200                 | 
1e200                 | 
1e200     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1e204     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1e208     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1e20c     03 02 07 FA |                         mul t1,#3
1e210     81 BB C2 FC |                         xcont m_lut2,t1
1e214     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e218     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e21c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e220     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e224     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e228     01 C0 86 F1 |                         sub     lutaddr,#1
1e22c     63 06 63 FD |                         mergew t3
1e230     03 06 07 FA |                         mul t3,#3
1e234     83 BB C2 FC |                         xcont m_lut2,t3
1e238                 | 
1e238     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1e23c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1e240                 | 
1e240     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1e244                 | 
1e244     E4 0F 6F FB |                         djnz   cpl2,#p412
1e248     B0 00 90 FD |  p411                   jmp    #p103
1e24c                 | 
1e24c                 | ''------------------------------------------------------------------------------------------------------------
1e24c                 | 
1e24c     02 0E 47 F0 |  p420                   shr cpl2,#2
1e250                 | 
1e250                 | ''---------------------------------------------------------------------------------------
1e250     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1e254     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e258     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e25c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1e260     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1e264     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1e268     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1e26c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1e270     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1e274     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1e278                 | 
1e278     61 02 63 FD |                         mergeb t1
1e27c     81 07 3B F9 |                         getword t3,t1,#1
1e280     0F 02 07 FA |                         mul t1,#15
1e284     81 BB C2 FC |                         xcont m_lut2,t1
1e288                 | 
1e288     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e28c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e290     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e294     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e298     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e29c     01 C0 86 F1 |                         sub     lutaddr,#1
1e2a0                 | 
1e2a0     81 09 EB F8 |                         getbyte t4,t1,#1        '
1e2a4     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1e2a8                 | 
1e2a8     0F 06 07 FA |                         mul t3,#15
1e2ac     83 BB C2 FC |                         xcont m_lut2,t3
1e2b0                 | 
1e2b0     83 0B EB F8 |                         getbyte t5,t3,#1
1e2b4     85 BB C2 FC |                         xcont m_lut2, t5
1e2b8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1e2bc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1e2c0                 | 
1e2c0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1e2c4                 | 
1e2c4     E2 0F 6F FB |                         djnz   cpl2,#p422
1e2c8     30 00 90 FD |  p421                   jmp    #p103
1e2cc                 | 
1e2cc                 | '--------------------------------------------------------------------------------------------------------------
1e2cc                 | 
1e2cc     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1e2d0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e2d4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e2d8                 | 
1e2d8     00 BA C6 FC |                         xcont m_lut2,#0
1e2dc                 | 
1e2dc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e2e0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e2e4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e2e8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e2ec     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e2f0     01 C0 86 F1 |                         sub     lutaddr,#1
1e2f4                 | 
1e2f4     F5 0F 6F FB |                         djnz   cpl2,#p430
1e2f8     00 00 90 FD |  p431                   jmp    #p103
1e2fc                 | 
1e2fc                 | ''------------------------------------------------------------------------------------------------------------
1e2fc                 | 
1e2fc                 | 
1e2fc                 | 
1e2fc     51 25 33 F9 | p103            getword  mb2,m_border,#0
1e300     00 24 0F F2 |                 cmp      mb2, #0 wz
1e304     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1e308                 | 
1e308     B0 FD 9F FD |                 jmp #p302
1e30c                 | 
1e30c                 | '' -------------------------------------- END of text line ---------------------------------
1e30c                 | 
1e30c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1e30c                 | 
1e30c     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1e310                 | 
1e310                 | 
1e310     51 25 33 F9 | p202            getword mb2,m_border,#0
1e314     00 24 0F F2 |                 cmp     mb2, #0 wz
1e318     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1e31c                 | 
1e31c                 | '----------------------------------------- display pixels
1e31c                 | 
1e31c     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1e320     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1e324                 | 
1e324     7B 17 5B F8 |                 getnib  zoom, dl,#3
1e328     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1e32c                 | 
1e32c     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1e330     0C BC 06 F5 |                 and     colordepth,#12
1e334                 | 
1e334     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1e338     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1e33c     64 00 90 AD |           if_z  jmp     #p240
1e340                 | 
1e340     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1e344     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1e348     98 00 90 AD |           if_z  jmp     #p250
1e34c                 | 
1e34c     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1e350     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1e354     FC 00 90 AD |           if_z  jmp     #p260
1e358                 | 
1e358     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1e35c                 | 
1e35c                 | '' --- 8 bit color modes
1e35c                 | 
1e35c     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1e360     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1e364                 | 
1e364     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1e368     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1e36c                 |        
1e36c                 |  '  
1e36c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1e370     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1e374                 |     
1e374                 |  
1e374     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1e378     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1e37c                 |         
1e37c                 | 
1e37c                 |         
1e37c     7D 11 03 FB | p235               rdlong  char,framebuf2
1e380     32 0C 63 FD |                    skipf skippattern
1e384     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1e388     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1e38c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1e390     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1e394     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1e398     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1e39c     F7 0F 6F FB |                    djnz    cpl2,#p235
1e3a0                 | 
1e3a0     20 01 90 FD |                jmp    #p203
1e3a4                 |                   
1e3a4                 | 
1e3a4                 | 
1e3a4                 | '' --- 1 bit color modes
1e3a4                 | 
1e3a4     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1e3a8     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1e3ac                 | 
1e3ac     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1e3b0     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1e3b4     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1e3b8                 | 
1e3b8                 | 
1e3b8     7D 11 E3 FA | p241               rdword  char,framebuf2
1e3bc     44 10 FF F9 |                    movbyts char,#%01000100
1e3c0     63 10 63 FD |                    mergew  char
1e3c4     32 0C 63 FD |                    skipf skippattern
1e3c8     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1e3cc     63 10 63 FD |                    mergew  char                    ' 1 0
1e3d0     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1e3d4     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1e3d8     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1e3dc     F6 0F 6F FB |                    djnz   cpl2,#p241
1e3e0                 | 
1e3e0                 | 
1e3e0     E0 00 90 FD |                jmp    #p203
1e3e4                 | 
1e3e4                 | '' --- 2 bit color modes
1e3e4                 | 
1e3e4     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1e3e8     C8 00 90 AD |        if_z   jmp #p251
1e3ec                 | 
1e3ec     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1e3f0     30 00 90 AD |        if_z   jmp #p252
1e3f4                 | 
1e3f4                 | 
1e3f4     7D 11 C3 FA | p254               rdbyte char,framebuf2
1e3f8     04 0A 07 F6 |                    mov  t5,#4
1e3fc     02 10 67 F0 | p255               shl  char,#2
1e400     88 03 53 F8 |                    getnib  t1,char,#2
1e404     03 02 07 F5 |                    and     t1,#3
1e408     55 02 07 FA |                    mul     t1,#$55
1e40c     81 05 03 F9 |                    rolbyte  t2,t1,#0
1e410     FA 0B 6F FB |                    djnz    t5,#p255
1e414     82 BB C2 FC |                    xcont   m_lut2,t2
1e418     01 FA 06 F1 |                    add     framebuf2,#1
1e41c     F5 0F 6F FB |                    djnz    cpl2,#p254
1e420     A0 00 90 FD |                    jmp     #p203
1e424                 | 
1e424     7D 11 E3 FA | p252               rdword char,framebuf2
1e428     08 0A 07 F6 |                    mov  t5,#8
1e42c     02 10 67 F0 | p253               shl  char,#2
1e430     88 03 63 F8 |                    getnib  t1,char,#4
1e434     03 02 07 F5 |                    and     t1,#3
1e438     05 02 07 FA |                    mul     t1,#5
1e43c     81 05 83 F8 |                    rolnib  t2,t1,#0
1e440     FA 0B 6F FB |                    djnz    t5,#p253
1e444     82 BB C2 FC |                    xcont   m_lut2,t2
1e448     02 FA 06 F1 |                    add     framebuf2,#2
1e44c     F5 0F 6F FB |                    djnz    cpl2,#p252
1e450     70 00 90 FD |                    jmp     #p203
1e454                 | 
1e454                 | '' ------ 4 bit color modes
1e454                 | 
1e454     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1e458     58 00 90 AD |        if_z   jmp #p251
1e45c                 | 
1e45c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1e460     2C 00 90 AD |        if_z   jmp #p262
1e464                 | 
1e464                 | 
1e464     7D 11 C3 FA | p263               rdbyte char,framebuf2
1e468     02 0A DC FC |                            rep #5,#2
1e46c     88 05 8B F8 |                              rolnib t2,char,#1
1e470     88 05 8B F8 |                                  rolnib t2,char,#1
1e474     88 05 8B F8 |                              rolnib t2,char,#1
1e478     88 05 8B F8 |                                  rolnib t2,char,#1
1e47c     04 10 67 F0 |                              shl char,#4
1e480     82 BB C2 FC |                    xcont   m_lut2,t2
1e484     01 FA 06 F1 |                    add     framebuf2,#1
1e488     F6 0F 6F FB |                    djnz    cpl2,#p263
1e48c     34 00 90 FD |                    jmp     #p203
1e490                 | 
1e490     7D 11 E3 FA | p262               rdword  char,framebuf2
1e494     04 06 DC FC |                            rep #3,#4
1e498     88 05 9B F8 |                              rolnib t2,char,#3
1e49c     88 05 9B F8 |                                  rolnib t2,char,#3
1e4a0     04 10 67 F0 |                              shl char,#4
1e4a4     82 BB C2 FC |                    xcont   m_lut2,t2
1e4a8     02 FA 06 F1 |                    add     framebuf2,#2
1e4ac     F8 0F 6F FB |                    djnz    cpl2,#p262
1e4b0     10 00 90 FD |                    jmp     #p203
1e4b4                 | 
1e4b4                 | ''---------- all color modes without zoom
1e4b4                 | 
1e4b4     87 07 D8 FC | p251               rep  #3,cpl2
1e4b8     7D 11 03 FB |                    rdlong  char,framebuf2
1e4bc     04 FA 06 F1 |                    add     framebuf2,#4
1e4c0     88 BB C2 FC |                    xcont   m_lut2,char
1e4c4                 |           
1e4c4                 |  ''-----------------------------------------------------------------------------------------
1e4c4                 | p203           ' getword  mb2,m_border,#0
1e4c4     00 24 0F F2 |                 cmp      mb2, #0 wz
1e4c8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1e4cc                 | 
1e4cc     EC FB 9F FD |                 jmp #p302
1e4d0                 | 
1e4d0                 | '' -------------------------------------- END of graph  line ---------------------------------
1e4d0                 | 
1e4d0                 | '' consts and vars
1e4d0                 | 
1e4d0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1e4d4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1e4d8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1e4dc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1e4e0                 | 
1e4e0     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1e4e4                 | 
1e4e4                 | '------ these longs will be set by setmode function
1e4e4                 | 
1e4e4     00 00 00 00 | m_bs            long    0        'blanks before sync
1e4e8     00 00 00 00 | m_sn            long    0        'sync
1e4ec     00 00 00 00 | m_bv            long    0        'blanks before visible
1e4f0     00 00 00 00 | m_vi            long    0        'visible pixels #
1e4f4     00 00 00 00 | m_border        long    0        'left/right borders
1e4f8     00 00 00 00 | m_lut1          long    0        'characters
1e4fc     00 00 00 00 | i_vborder       long    0        'up/down borders
1e500     00 00 00 00 | i_upporch       long    0        'up porch lines
1e504     00 00 00 00 | i_vsync         long    0        'vsync lines
1e508     00 00 00 00 | i_downporch     long    0        'down porch lines
1e50c     00 00 00 00 | i_modenum       long    0        'mode #
1e510     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1e514     00 00 00 00 | i_lines         long    0        'scanlines #
1e518     00 00 00 00 | i_clock         long    0
1e51c     00 00 00 00 | i_hubset        long    0
1e520     00 00 00 00 | i_totalvis      long    0
1e524                 | 
1e524                 | '-------------------------------------
1e524                 | 
1e524     00 00 00 00 | m_lut2          long    0
1e528                 | 
1e528                 | colordepth
1e528     00 00 00 00 | linestart       long    0
1e52c     00 00 00 00 | linenum         long    0
1e530     00 01 00 00 | lutaddr         long    256
1e534                 | 
1e534     0E 00 00 00 | cursorsh        long    14
1e538     00 00 00 00 | frames          long    0
1e53c     00 00 00 00 | cursorx         long    0
1e540     00 00 00 00 | cursory         long    0
1e544     00 00 00 00 | cursorpos       long    0
1e548     00 00 00 00 | cursorpos2      long    0
1e54c     00 00 00 00 | fontstart       long    0
1e550     00 00 00 00 | border2         long 0
1e554     00 00 81 70 | lutiv           long $70810000
1e558     00 00 88 00 | lutt1           long $00880000
1e55c     00 00 80 00 | lutg1           long $00800000
1e560     00 00 80 10 | lutg2           long $10800000
1e564     00 00 80 20 | lutg4           long $20800000
1e568     00 00 80 30 | lutg8           long $30800000
1e56c     00 00 00 00 | framebuf        long 0
1e570     00 00 00 00 | fontbuf         long 0
1e574     00 00 00 00 | borderptr       long 0
1e578     00 00 00 00 | vblankptr       long 0
1e57c     00 00 00 00 | cursorptr       long 0
1e580     00 00 00 00 | modeptr         long 0
1e584     00 00 00 00 | paletteptr      long 0
1e588     00 00 00 00 | dlptr           long 0
1e58c                 | fontnumptr      res     1
1e58c                 | fontnumptr      res     1
1e58c                 | hbase           res     1
1e58c                 | hbase           res     1
1e58c                 | borderptr2      res     1
1e58c                 | borderptr2      res     1
1e58c                 | dlptr2 res 1
1e58c                 | dlptr2 res 1
1e58c                 | dl              res 1
1e58c                 | dl              res 1
1e58c                 | ii              res     1
1e58c                 | ii              res     1
1e58c                 | framebuf2       res     1
1e58c                 | framebuf2       res     1
1e58c                 | hsync0          res     1
1e58c                 | hsync0          res     1
1e58c                 | hsync1          res     1
1e58c                 | hsync1          res     1
1e58c                 | fontline        res     1
1e58c                 | fontline        res     1
1e58c                 | t1              res     1
1e58c                 | t1              res     1
1e58c                 | t2              res     1
1e58c                 | t2              res     1
1e58c                 | t3 res 1
1e58c                 | t3 res 1
1e58c                 | t4 res 1
1e58c                 | t4 res 1
1e58c                 | t5 res 1
1e58c                 | t5 res 1
1e58c                 | skippattern res 1
1e58c                 | skippattern res 1
1e58c                 | cpl2 res 1
1e58c                 | cpl2 res 1
1e58c                 | char            res     1
1e58c                 | char            res     1
1e58c                 | backcolor       res     1
1e58c                 | backcolor       res     1
1e58c                 | charcolor       res     1
1e58c                 | charcolor       res     1
1e58c                 | zoom res 1
1e58c                 | zoom res 1
1e58c     00 00 00 00 | rcnt long 0 'dl repeat count
1e590     00 00 00 00 | rcnt2 long 0
1e594     00 00 00 00 | rcnt2a long 0
1e598     00 00 00 00 | roffset long 0
1e59c     00 00 00 00 | rdl long 0  'dl repeat line
1e5a0     00 00 00 00 | dlc long 0 'dl command
1e5a4     00 00 00 00 | mb2 long 0
1e5a8     00 00 00 00 | aend             long 0
1e5ac                 |                 fit     496                     '
1e5ac                 | _trackerplayer_spin2_dat_
1e5ac                 | 
1e5ac     00 00 00 00 | null             long  0
1e5b0     46 52 45 51 
1e5b4     46 52 45 51 
1e5b8     46 52 45 51 
1e5bc     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1e5c0     46 52 45 51 
1e5c4     46 52 45 51 
1e5c8     46 52 45 51 
1e5cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e5d0     46 52 45 51 
1e5d4     46 52 45 51 
1e5d8     46 52 45 51 
1e5dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e5e0     46 52 45 51 
1e5e4     46 52 45 51 
1e5e8     46 52 45 51 
1e5ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e5f0     46 52 45 51 
1e5f4     46 52 45 51 
1e5f8     46 52 45 51 
1e5fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e600     46 52 45 51 
1e604     46 52 45 51 
1e608     46 52 45 51 
1e60c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e610     46 52 45 51 
1e614     46 52 45 51 
1e618     46 52 45 51 
1e61c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e620     46 52 45 51 
1e624     46 52 45 51 
1e628     46 52 45 51 
1e62c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e630     46 52 45 51 
1e634     46 52 45 51 
1e638     46 52 45 51 
1e63c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e640     46 52 45 51 
1e644     46 52 45 51 
1e648     46 52 45 51 
1e64c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e650     46 52 45 51 
1e654     46 52 45 51 
1e658     46 52 45 51 
1e65c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e660     46 52 45 51 
1e664     46 52 45 51 
1e668     46 52 45 51 
1e66c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e670     46 52 45 51 
1e674     46 52 45 51 
1e678     46 52 45 51 
1e67c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e680     46 52 45 51 
1e684     46 52 45 51 
1e688     46 52 45 51 
1e68c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e690     46 52 45 51 
1e694     46 52 45 51 
1e698     46 52 45 51 
1e69c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e6a0     46 52 45 51 
1e6a4     46 52 45 51 
1e6a8     46 52 45 51 
1e6ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e6b0     46 52 45 51 
1e6b4     46 52 45 51 
1e6b8     46 52 45 51 
1e6bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e6c0     46 52 45 51 
1e6c4     46 52 45 51 
1e6c8     46 52 45 51 
1e6cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e6d0     46 52 45 51 
1e6d4     46 52 45 51 
1e6d8     46 52 45 51 
1e6dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e6e0     46 52 45 51 
1e6e4     46 52 45 51 
1e6e8     46 52 45 51 
1e6ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e6f0     46 52 45 51 
1e6f4     46 52 45 51 
1e6f8     46 52 45 51 
1e6fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e700     46 52 45 51 
1e704     46 52 45 51 
1e708     46 52 45 51 
1e70c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e710     46 52 45 51 
1e714     46 52 45 51 
1e718     46 52 45 51 
1e71c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e720     46 52 45 51 
1e724     46 52 45 51 
1e728     46 52 45 51 
1e72c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e730     46 52 45 51 
1e734     46 52 45 51 
1e738     46 52 45 51 
1e73c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e740     46 52 45 51 
1e744     46 52 45 51 
1e748     46 52 45 51 
1e74c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e750     46 52 45 51 
1e754     46 52 45 51 
1e758     46 52 45 51 
1e75c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e760     46 52 45 51 
1e764     46 52 45 51 
1e768     46 52 45 51 
1e76c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e770     46 52 45 51 
1e774     46 52 45 51 
1e778     46 52 45 51 
1e77c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e780     46 52 45 51 
1e784     46 52 45 51 
1e788     46 52 45 51 
1e78c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e790     46 52 45 51 
1e794     46 52 45 51 
1e798     46 52 45 51 
1e79c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e7a0     46 52 45 51 
1e7a4     46 52 45 51 
1e7a8     46 52 45 51 
1e7ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e7b0     46 52 45 51 
1e7b4     46 52 45 51 
1e7b8     46 52 45 51 
1e7bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e7c0     46 52 45 51 
1e7c4     46 52 45 51 
1e7c8     46 52 45 51 
1e7cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e7d0     46 52 45 51 
1e7d4     46 52 45 51 
1e7d8     46 52 45 51 
1e7dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e7e0     46 52 45 51 
1e7e4     46 52 45 51 
1e7e8     46 52 45 51 
1e7ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e7f0     46 52 45 51 
1e7f4     46 52 45 51 
1e7f8     46 52 45 51 
1e7fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e800     46 52 45 51 
1e804     46 52 45 51 
1e808     46 52 45 51 
1e80c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e810     46 52 45 51 
1e814     46 52 45 51 
1e818     46 52 45 51 
1e81c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e820     46 52 45 51 
1e824     46 52 45 51 
1e828     46 52 45 51 
1e82c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e830     46 52 45 51 
1e834     46 52 45 51 
1e838     46 52 45 51 
1e83c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e840     46 52 45 51 
1e844     46 52 45 51 
1e848     46 52 45 51 
1e84c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e850     46 52 45 51 
1e854     46 52 45 51 
1e858     46 52 45 51 
1e85c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e860     46 52 45 51 
1e864     46 52 45 51 
1e868     46 52 45 51 
1e86c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e870     46 52 45 51 
1e874     46 52 45 51 
1e878     46 52 45 51 
1e87c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e880     46 52 45 51 
1e884     46 52 45 51 
1e888     46 52 45 51 
1e88c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e890     46 52 45 51 
1e894     46 52 45 51 
1e898     46 52 45 51 
1e89c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e8a0     46 52 45 51 
1e8a4     46 52 45 51 
1e8a8     46 52 45 51 
1e8ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e8b0     46 52 45 51 
1e8b4     46 52 45 51 
1e8b8     46 52 45 51 
1e8bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e8c0     46 52 45 51 
1e8c4     46 52 45 51 
1e8c8     46 52 45 51 
1e8cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e8d0     46 52 45 51 
1e8d4     46 52 45 51 
1e8d8     46 52 45 51 
1e8dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e8e0     46 52 45 51 
1e8e4     46 52 45 51 
1e8e8     46 52 45 51 
1e8ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e8f0     46 52 45 51 
1e8f4     46 52 45 51 
1e8f8     46 52 45 51 
1e8fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e900     46 52 45 51 
1e904     46 52 45 51 
1e908     46 52 45 51 
1e90c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e910     46 52 45 51 
1e914     46 52 45 51 
1e918     46 52 45 51 
1e91c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e920     46 52 45 51 
1e924     46 52 45 51 
1e928     46 52 45 51 
1e92c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e930     46 52 45 51 
1e934     46 52 45 51 
1e938     46 52 45 51 
1e93c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e940     46 52 45 51 
1e944     46 52 45 51 
1e948     46 52 45 51 
1e94c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e950     46 52 45 51 
1e954     46 52 45 51 
1e958     46 52 45 51 
1e95c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e960     46 52 45 51 
1e964     46 52 45 51 
1e968     46 52 45 51 
1e96c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e970     46 52 45 51 
1e974     46 52 45 51 
1e978     46 52 45 51 
1e97c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e980     46 52 45 51 
1e984     46 52 45 51 
1e988     46 52 45 51 
1e98c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e990     46 52 45 51 
1e994     46 52 45 51 
1e998     46 52 45 51 
1e99c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e9a0     46 52 45 51 
1e9a4     46 52 45 51 
1e9a8     46 52 45 51 
1e9ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e9b0     46 52 45 51 
1e9b4     46 52 45 51 
1e9b8     46 52 45 51 
1e9bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e9c0     46 52 45 51 
1e9c4     46 52 45 51 
1e9c8     46 52 45 51 
1e9cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e9d0     46 52 45 51 
1e9d4     46 52 45 51 
1e9d8     46 52 45 51 
1e9dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e9e0     46 52 45 51 
1e9e4     46 52 45 51 
1e9e8     46 52 45 51 
1e9ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1e9f0     46 52 45 51 
1e9f4     46 52 45 51 
1e9f8     46 52 45 51 
1e9fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea00     46 52 45 51 
1ea04     46 52 45 51 
1ea08     46 52 45 51 
1ea0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea10     46 52 45 51 
1ea14     46 52 45 51 
1ea18     46 52 45 51 
1ea1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea20     46 52 45 51 
1ea24     46 52 45 51 
1ea28     46 52 45 51 
1ea2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea30     46 52 45 51 
1ea34     46 52 45 51 
1ea38     46 52 45 51 
1ea3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea40     46 52 45 51 
1ea44     46 52 45 51 
1ea48     46 52 45 51 
1ea4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea50     46 52 45 51 
1ea54     46 52 45 51 
1ea58     46 52 45 51 
1ea5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea60     46 52 45 51 
1ea64     46 52 45 51 
1ea68     46 52 45 51 
1ea6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea70     46 52 45 51 
1ea74     46 52 45 51 
1ea78     46 52 45 51 
1ea7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea80     46 52 45 51 
1ea84     46 52 45 51 
1ea88     46 52 45 51 
1ea8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ea90     46 52 45 51 
1ea94     46 52 45 51 
1ea98     46 52 45 51 
1ea9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eaa0     46 52 45 51 
1eaa4     46 52 45 51 
1eaa8     46 52 45 51 
1eaac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eab0     46 52 45 51 
1eab4     46 52 45 51 
1eab8     46 52 45 51 
1eabc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eac0     46 52 45 51 
1eac4     46 52 45 51 
1eac8     46 52 45 51 
1eacc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ead0     46 52 45 51 
1ead4     46 52 45 51 
1ead8     46 52 45 51 
1eadc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eae0     46 52 45 51 
1eae4     46 52 45 51 
1eae8     46 52 45 51 
1eaec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eaf0     46 52 45 51 
1eaf4     46 52 45 51 
1eaf8     46 52 45 51 
1eafc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb00     46 52 45 51 
1eb04     46 52 45 51 
1eb08     46 52 45 51 
1eb0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb10     46 52 45 51 
1eb14     46 52 45 51 
1eb18     46 52 45 51 
1eb1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb20     46 52 45 51 
1eb24     46 52 45 51 
1eb28     46 52 45 51 
1eb2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb30     46 52 45 51 
1eb34     46 52 45 51 
1eb38     46 52 45 51 
1eb3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb40     46 52 45 51 
1eb44     46 52 45 51 
1eb48     46 52 45 51 
1eb4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb50     46 52 45 51 
1eb54     46 52 45 51 
1eb58     46 52 45 51 
1eb5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb60     46 52 45 51 
1eb64     46 52 45 51 
1eb68     46 52 45 51 
1eb6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb70     46 52 45 51 
1eb74     46 52 45 51 
1eb78     46 52 45 51 
1eb7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb80     46 52 45 51 
1eb84     46 52 45 51 
1eb88     46 52 45 51 
1eb8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eb90     46 52 45 51 
1eb94     46 52 45 51 
1eb98     46 52 45 51 
1eb9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eba0     46 52 45 51 
1eba4     46 52 45 51 
1eba8     46 52 45 51 
1ebac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ebb0     46 52 45 51 
1ebb4     46 52 45 51 
1ebb8     46 52 45 51 
1ebbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ebc0     46 52 45 51 
1ebc4     46 52 45 51 
1ebc8     46 52 45 51 
1ebcc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ebd0     46 52 45 51 
1ebd4     46 52 45 51 
1ebd8     46 52 45 51 
1ebdc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ebe0     46 52 45 51 
1ebe4     46 52 45 51 
1ebe8     46 52 45 51 
1ebec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ebf0     46 52 45 51 
1ebf4     46 52 45 51 
1ebf8     46 52 45 51 
1ebfc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec00     46 52 45 51 
1ec04     46 52 45 51 
1ec08     46 52 45 51 
1ec0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec10     46 52 45 51 
1ec14     46 52 45 51 
1ec18     46 52 45 51 
1ec1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec20     46 52 45 51 
1ec24     46 52 45 51 
1ec28     46 52 45 51 
1ec2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec30     46 52 45 51 
1ec34     46 52 45 51 
1ec38     46 52 45 51 
1ec3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec40     46 52 45 51 
1ec44     46 52 45 51 
1ec48     46 52 45 51 
1ec4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec50     46 52 45 51 
1ec54     46 52 45 51 
1ec58     46 52 45 51 
1ec5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec60     46 52 45 51 
1ec64     46 52 45 51 
1ec68     46 52 45 51 
1ec6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec70     46 52 45 51 
1ec74     46 52 45 51 
1ec78     46 52 45 51 
1ec7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec80     46 52 45 51 
1ec84     46 52 45 51 
1ec88     46 52 45 51 
1ec8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec90     46 52 45 51 
1ec94     46 52 45 51 
1ec98     46 52 45 51 
1ec9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eca0     46 52 45 51 
1eca4     46 52 45 51 
1eca8     46 52 45 51 
1ecac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecb0     46 52 45 51 
1ecb4     46 52 45 51 
1ecb8     46 52 45 51 
1ecbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecc0     46 52 45 51 
1ecc4     46 52 45 51 
1ecc8     46 52 45 51 
1eccc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecd0     46 52 45 51 
1ecd4     46 52 45 51 
1ecd8     46 52 45 51 
1ecdc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ece0     46 52 45 51 
1ece4     46 52 45 51 
1ece8     46 52 45 51 
1ecec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecf0     46 52 45 51 
1ecf4     46 52 45 51 
1ecf8     46 52 45 51 
1ecfc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed00     46 52 45 51 
1ed04     46 52 45 51 
1ed08     46 52 45 51 
1ed0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed10     46 52 45 51 
1ed14     46 52 45 51 
1ed18     46 52 45 51 
1ed1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed20     46 52 45 51 
1ed24     46 52 45 51 
1ed28     46 52 45 51 
1ed2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed30     46 52 45 51 
1ed34     46 52 45 51 
1ed38     46 52 45 51 
1ed3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed40     46 52 45 51 
1ed44     46 52 45 51 
1ed48     46 52 45 51 
1ed4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed50     46 52 45 51 
1ed54     46 52 45 51 
1ed58     46 52 45 51 
1ed5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed60     46 52 45 51 
1ed64     46 52 45 51 
1ed68     46 52 45 51 
1ed6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed70     46 52 45 51 
1ed74     46 52 45 51 
1ed78     46 52 45 51 
1ed7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed80     46 52 45 51 
1ed84     46 52 45 51 
1ed88     46 52 45 51 
1ed8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed90     46 52 45 51 
1ed94     46 52 45 51 
1ed98     46 52 45 51 
1ed9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eda0     46 52 45 51 
1eda4     46 52 45 51 
1eda8     46 52 45 51 
1edac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edb0     46 52 45 51 
1edb4     46 52 45 51 
1edb8     46 52 45 51 
1edbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edc0     46 52 45 51 
1edc4     46 52 45 51 
1edc8     46 52 45 51 
1edcc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edd0     46 52 45 51 
1edd4     46 52 45 51 
1edd8     46 52 45 51 
1eddc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ede0     46 52 45 51 
1ede4     46 52 45 51 
1ede8     46 52 45 51 
1edec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edf0     46 52 45 51 
1edf4     46 52 45 51 
1edf8     46 52 45 51 
1edfc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee00     46 52 45 51 
1ee04     46 52 45 51 
1ee08     46 52 45 51 
1ee0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee10     46 52 45 51 
1ee14     46 52 45 51 
1ee18     46 52 45 51 
1ee1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee20     46 52 45 51 
1ee24     46 52 45 51 
1ee28     46 52 45 51 
1ee2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee30     46 52 45 51 
1ee34     46 52 45 51 
1ee38     46 52 45 51 
1ee3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee40     46 52 45 51 
1ee44     46 52 45 51 
1ee48     46 52 45 51 
1ee4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee50     46 52 45 51 
1ee54     46 52 45 51 
1ee58     46 52 45 51 
1ee5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee60     46 52 45 51 
1ee64     46 52 45 51 
1ee68     46 52 45 51 
1ee6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee70     46 52 45 51 
1ee74     46 52 45 51 
1ee78     46 52 45 51 
1ee7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee80     46 52 45 51 
1ee84     46 52 45 51 
1ee88     46 52 45 51 
1ee8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee90     46 52 45 51 
1ee94     46 52 45 51 
1ee98     46 52 45 51 
1ee9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eea0     46 52 45 51 
1eea4     46 52 45 51 
1eea8     46 52 45 51 
1eeac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eeb0     46 52 45 51 
1eeb4     46 52 45 51 
1eeb8     46 52 45 51 
1eebc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eec0     46 52 45 51 
1eec4     46 52 45 51 
1eec8     46 52 45 51 
1eecc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eed0     46 52 45 51 
1eed4     46 52 45 51 
1eed8     46 52 45 51 
1eedc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eee0     46 52 45 51 
1eee4     46 52 45 51 
1eee8     46 52 45 51 
1eeec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eef0     46 52 45 51 
1eef4     46 52 45 51 
1eef8     46 52 45 51 
1eefc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef00     46 52 45 51 
1ef04     46 52 45 51 
1ef08     46 52 45 51 
1ef0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef10     46 52 45 51 
1ef14     46 52 45 51 
1ef18     46 52 45 51 
1ef1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef20     46 52 45 51 
1ef24     46 52 45 51 
1ef28     46 52 45 51 
1ef2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef30     46 52 45 51 
1ef34     46 52 45 51 
1ef38     46 52 45 51 
1ef3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef40     46 52 45 51 
1ef44     46 52 45 51 
1ef48     46 52 45 51 
1ef4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef50     46 52 45 51 
1ef54     46 52 45 51 
1ef58     46 52 45 51 
1ef5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef60     46 52 45 51 
1ef64     46 52 45 51 
1ef68     46 52 45 51 
1ef6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef70     46 52 45 51 
1ef74     46 52 45 51 
1ef78     46 52 45 51 
1ef7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef80     46 52 45 51 
1ef84     46 52 45 51 
1ef88     46 52 45 51 
1ef8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef90     46 52 45 51 
1ef94     46 52 45 51 
1ef98     46 52 45 51 
1ef9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efa0     46 52 45 51 
1efa4     46 52 45 51 
1efa8     46 52 45 51 
1efac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efb0     46 52 45 51 
1efb4     46 52 45 51 
1efb8     46 52 45 51 
1efbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efc0     46 52 45 51 
1efc4     46 52 45 51 
1efc8     46 52 45 51 
1efcc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efd0     46 52 45 51 
1efd4     46 52 45 51 
1efd8     46 52 45 51 
1efdc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efe0     46 52 45 51 
1efe4     46 52 45 51 
1efe8     46 52 45 51 
1efec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eff0     46 52 45 51 
1eff4     46 52 45 51 
1eff8     46 52 45 51 
1effc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f000     46 52 45 51 
1f004     46 52 45 51 
1f008     46 52 45 51 
1f00c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f010     46 52 45 51 
1f014     46 52 45 51 
1f018     46 52 45 51 
1f01c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f020     46 52 45 51 
1f024     46 52 45 51 
1f028     46 52 45 51 
1f02c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f030     46 52 45 51 
1f034     46 52 45 51 
1f038     46 52 45 51 
1f03c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f040     46 52 45 51 
1f044     46 52 45 51 
1f048     46 52 45 51 
1f04c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f050     46 52 45 51 
1f054     46 52 45 51 
1f058     46 52 45 51 
1f05c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f060     46 52 45 51 
1f064     46 52 45 51 
1f068     46 52 45 51 
1f06c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f070     46 52 45 51 
1f074     46 52 45 51 
1f078     46 52 45 51 
1f07c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f080     46 52 45 51 
1f084     46 52 45 51 
1f088     46 52 45 51 
1f08c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f090     46 52 45 51 
1f094     46 52 45 51 
1f098     46 52 45 51 
1f09c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0a0     46 52 45 51 
1f0a4     46 52 45 51 
1f0a8     46 52 45 51 
1f0ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0b0     46 52 45 51 
1f0b4     46 52 45 51 
1f0b8     46 52 45 51 
1f0bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0c0     46 52 45 51 
1f0c4     46 52 45 51 
1f0c8     46 52 45 51 
1f0cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0d0     46 52 45 51 
1f0d4     46 52 45 51 
1f0d8     46 52 45 51 
1f0dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0e0     46 52 45 51 
1f0e4     46 52 45 51 
1f0e8     46 52 45 51 
1f0ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0f0     46 52 45 51 
1f0f4     46 52 45 51 
1f0f8     46 52 45 51 
1f0fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f100     46 52 45 51 
1f104     46 52 45 51 
1f108     46 52 45 51 
1f10c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f110     46 52 45 51 
1f114     46 52 45 51 
1f118     46 52 45 51 
1f11c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f120     46 52 45 51 
1f124     46 52 45 51 
1f128     46 52 45 51 
1f12c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f130     46 52 45 51 
1f134     46 52 45 51 
1f138     46 52 45 51 
1f13c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f140     46 52 45 51 
1f144     46 52 45 51 
1f148     46 52 45 51 
1f14c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f150                 | 
1f150     00 00 00 00 
1f154     18 00 00 00 
1f158     31 00 00 00 
1f15c     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1f160     61 00 00 00 
1f164     78 00 00 00 
1f168     8D 00 00 00 
1f16c     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1f170     B4 00 00 00 
1f174     C5 00 00 00 
1f178     D4 00 00 00 
1f17c     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1f180     EB 00 00 00 
1f184     F4 00 00 00 
1f188     FA 00 00 00 
1f18c     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1f190     FF 00 00 00 
1f194     FD 00 00 00 
1f198     FA 00 00 00 
1f19c     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1f1a0     EB 00 00 00 
1f1a4     E0 00 00 00 
1f1a8     D4 00 00 00 
1f1ac     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1f1b0     B4 00 00 00 
1f1b4     A1 00 00 00 
1f1b8     8D 00 00 00 
1f1bc     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1f1c0     61 00 00 00 
1f1c4     4A 00 00 00 
1f1c8     31 00 00 00 
1f1cc     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1f1d0     00 00 00 00 
1f1d4     E8 FF FF FF 
1f1d8     CF FF FF FF 
1f1dc     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1f1e0     9F FF FF FF 
1f1e4     88 FF FF FF 
1f1e8     73 FF FF FF 
1f1ec     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1f1f0     4C FF FF FF 
1f1f4     3B FF FF FF 
1f1f8     2C FF FF FF 
1f1fc     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1f200     15 FF FF FF 
1f204     0C FF FF FF 
1f208     06 FF FF FF 
1f20c     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1f210     01 FF FF FF 
1f214     03 FF FF FF 
1f218     06 FF FF FF 
1f21c     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1f220     15 FF FF FF 
1f224     20 FF FF FF 
1f228     2C FF FF FF 
1f22c     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1f230     4C FF FF FF 
1f234     5F FF FF FF 
1f238     73 FF FF FF 
1f23c     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1f240     9F FF FF FF 
1f244     B6 FF FF FF 
1f248     CF FF FF FF 
1f24c     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1f250                 | 
1f250     58 03 28 03 
1f254     FA 02 D0 02 
1f258     A6 02 80 02 
1f25c     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1f260     1A 02 FC 01 
1f264     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1f268     AC 01 94 01 
1f26c     7D 01 68 01 
1f270     53 01 40 01 
1f274     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1f278     0D 01 FE 00 
1f27c     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1f280     D6 00 CA 00 
1f284     BE 00 B4 00 
1f288     AA 00 A0 00 
1f28c     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1f290     87 00 7F 00 
1f294     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1f298     6B 00 22 03 
1f29c     F5 02 CB 02 
1f2a0     A2 02 7D 02 
1f2a4     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1f2a8     17 02 F9 01 
1f2ac     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1f2b0     A9 01 91 01 
1f2b4     7B 01 65 01 
1f2b8     51 01 3E 01 
1f2bc     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1f2c0     0C 01 FD 00 
1f2c4     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1f2c8     D5 00 C9 00 
1f2cc     BD 00 B3 00 
1f2d0     A9 00 9F 00 
1f2d4     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1f2d8     86 00 7E 00 
1f2dc     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1f2e0     4C 03 1C 03 
1f2e4     F0 02 C5 02 
1f2e8     9E 02 78 02 
1f2ec     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1f2f0     14 02 F6 01 
1f2f4     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1f2f8     A6 01 8E 01 
1f2fc     78 01 63 01 
1f300     4F 01 3C 01 
1f304     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1f308     0A 01 FB 00 
1f30c     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1f310     D3 00 C7 00 
1f314     BC 00 B1 00 
1f318     A7 00 9E 00 
1f31c     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1f320     85 00 7D 00 
1f324     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1f328     46 03 17 03 
1f32c     EA 02 C0 02 
1f330     99 02 74 02 
1f334     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1f338     10 02 F2 01 
1f33c     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1f340     A3 01 8B 01 
1f344     75 01 60 01 
1f348     4C 01 3A 01 
1f34c     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1f350     08 01 F9 00 
1f354     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1f358     D1 00 C6 00 
1f35c     BB 00 B0 00 
1f360     A6 00 9D 00 
1f364     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1f368     84 00 7D 00 
1f36c     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1f370     40 03 11 03 
1f374     E5 02 BB 02 
1f378     94 02 6F 02 
1f37c     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1f380     0C 02 EF 01 
1f384     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1f388     A0 01 88 01 
1f38c     72 01 5E 01 
1f390     4A 01 38 01 
1f394     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1f398     06 01 F7 00 
1f39c     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1f3a0     D0 00 C4 00 
1f3a4     B9 00 AF 00 
1f3a8     A5 00 9C 00 
1f3ac     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1f3b0     83 00 7C 00 
1f3b4     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1f3b8     3A 03 0B 03 
1f3bc     E0 02 B6 02 
1f3c0     8F 02 6B 02 
1f3c4     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1f3c8     08 02 EB 01 
1f3cc     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1f3d0     9D 01 86 01 
1f3d4     70 01 5B 01 
1f3d8     48 01 35 01 
1f3dc     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1f3e0     04 01 F5 00 
1f3e4     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1f3e8     CE 00 C3 00 
1f3ec     B8 00 AE 00 
1f3f0     A4 00 9B 00 
1f3f4     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1f3f8     82 00 7B 00 
1f3fc     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1f400     34 03 06 03 
1f404     DA 02 B1 02 
1f408     8B 02 66 02 
1f40c     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1f410     04 02 E7 01 
1f414     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1f418     9A 01 83 01 
1f41c     6D 01 59 01 
1f420     45 01 33 01 
1f424     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1f428     02 01 F4 00 
1f42c     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1f430     CD 00 C1 00 
1f434     B7 00 AC 00 
1f438     A3 00 9A 00 
1f43c     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1f440     81 00 7A 00 
1f444     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1f448     2E 03 00 03 
1f44c     D5 02 AC 02 
1f450     86 02 62 02 
1f454     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1f458     01 02 E4 01 
1f45c     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1f460     97 01 80 01 
1f464     6B 01 56 01 
1f468     43 01 31 01 
1f46c     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1f470     00 01 F2 00 
1f474     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1f478     CC 00 C0 00 
1f47c     B5 00 AB 00 
1f480     A1 00 98 00 
1f484     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1f488     80 00 79 00 
1f48c     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1f490     8B 03 58 03 
1f494     28 03 FA 02 
1f498     D0 02 A6 02 
1f49c     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1f4a0     3A 02 1A 02 
1f4a4     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1f4a8     C5 01 AC 01 
1f4ac     94 01 7D 01 
1f4b0     68 01 53 01 
1f4b4     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1f4b8     1D 01 0D 01 
1f4bc     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1f4c0     E2 00 D6 00 
1f4c4     CA 00 BE 00 
1f4c8     B4 00 AA 00 
1f4cc     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1f4d0     8F 00 87 00 
1f4d4     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1f4d8     84 03 52 03 
1f4dc     22 03 F5 02 
1f4e0     CB 02 A3 02 
1f4e4     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1f4e8     37 02 17 02 
1f4ec     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1f4f0     C2 01 A9 01 
1f4f4     91 01 7B 01 
1f4f8     65 01 51 01 
1f4fc     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1f500     1C 01 0C 01 
1f504     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1f508     E1 00 D4 00 
1f50c     C8 00 BD 00 
1f510     B3 00 A9 00 
1f514     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1f518     8E 00 86 00 
1f51c     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1f520     7E 03 4C 03 
1f524     1C 03 F0 02 
1f528     C5 02 9E 02 
1f52c     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1f530     33 02 14 02 
1f534     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1f538     BF 01 A6 01 
1f53c     8E 01 78 01 
1f540     63 01 4F 01 
1f544     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1f548     1A 01 0A 01 
1f54c     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1f550     DF 00 D3 00 
1f554     C7 00 BC 00 
1f558     B1 00 A7 00 
1f55c     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1f560     8D 00 85 00 
1f564     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1f568     77 03 46 03 
1f56c     17 03 EA 02 
1f570     C0 02 99 02 
1f574     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1f578     2F 02 10 02 
1f57c     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1f580     BC 01 A3 01 
1f584     8B 01 75 01 
1f588     60 01 4C 01 
1f58c     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1f590     18 01 08 01 
1f594     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1f598     DE 00 D1 00 
1f59c     C6 00 BB 00 
1f5a0     B0 00 A6 00 
1f5a4     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1f5a8     8C 00 84 00 
1f5ac     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1f5b0     71 03 40 03 
1f5b4     11 03 E5 02 
1f5b8     BB 02 94 02 
1f5bc     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1f5c0     2B 02 0C 02 
1f5c4     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1f5c8     B9 01 A0 01 
1f5cc     88 01 72 01 
1f5d0     5E 01 4A 01 
1f5d4     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1f5d8     16 01 06 01 
1f5dc     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1f5e0     DC 00 D0 00 
1f5e4     C4 00 B9 00 
1f5e8     AF 00 A5 00 
1f5ec     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1f5f0     8B 00 83 00 
1f5f4     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1f5f8     6B 03 3A 03 
1f5fc     0B 03 E0 02 
1f600     B6 02 8F 02 
1f604     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1f608     27 02 08 02 
1f60c     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1f610     B5 01 9D 01 
1f614     86 01 70 01 
1f618     5B 01 48 01 
1f61c     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1f620     14 01 04 01 
1f624     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1f628     DB 00 CE 00 
1f62c     C3 00 B8 00 
1f630     AE 00 A4 00 
1f634     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1f638     8A 00 82 00 
1f63c     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1f640     64 03 34 03 
1f644     06 03 DA 02 
1f648     B1 02 8B 02 
1f64c     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1f650     23 02 04 02 
1f654     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1f658     B2 01 9A 01 
1f65c     83 01 6D 01 
1f660     59 01 45 01 
1f664     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1f668     12 01 02 01 
1f66c     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1f670     D9 00 CD 00 
1f674     C1 00 B7 00 
1f678     AC 00 A3 00 
1f67c     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1f680     89 00 81 00 
1f684     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1f688     5E 03 2E 03 
1f68c     00 03 D5 02 
1f690     AC 02 86 02 
1f694     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1f698     1F 02 01 02 
1f69c     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1f6a0     AF 01 97 01 
1f6a4     80 01 6B 01 
1f6a8     56 01 43 01 
1f6ac     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1f6b0     10 01 00 01 
1f6b4     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1f6b8     D8 00 CB 00 
1f6bc     C0 00 B5 00 
1f6c0     AB 00 A1 00 
1f6c4     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1f6c8     88 00 80 00 
1f6cc     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1f6d0                 | 	alignl
1f6d0                 | _audio016_spin2_dat_
1f6d0                 | 
1f6d0                 | audio       org     0
1f6d0     00 F2 07 F6 | 			mov ptrb,#0
1f6d4     28 8E 64 FD | 			setq #71
1f6d8     00 A9 06 FB |             rdlong  sstart1,ptra
1f6dc     0E 76 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1f6e0     0E C8 1C FC |             wxpin   #100,#left
1f6e4     0F 76 07 FC |             wrpin   dac,#right
1f6e8     0F C8 1C FC |             wxpin   #100,#right
1f6ec     41 9C 64 FD |             dirh    #left addpins 1
1f6f0     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1f6f4     2D E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1f6f8     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1f6fc                 |             
1f6fc                 | '---------------------------------------------------------------------------------        
1f6fc                 | '----------------- The main loop -------------------------------------------------
1f6fc                 | '---------------------------------------------------------------------------------
1f6fc                 | 
1f6fc     37 39 13 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1f700     24 00 90 CD |       if_c  jmp     #loop1
1f704                 |       
1f704     36 3B 83 F1 |             sub     time1,a20000000
1f708     36 3D 83 F1 |             sub     time2,a20000000
1f70c     36 3F 83 F1 |             sub     time3,a20000000
1f710     36 41 83 F1 |             sub     time4,a20000000
1f714     36 43 83 F1 |             sub     time5,a20000000
1f718     36 45 83 F1 |             sub     time6,a20000000
1f71c     36 47 83 F1 |             sub     time7,a20000000
1f720     36 49 83 F1 |             sub     time8,a20000000
1f724     36 39 83 F1 |             sub     time0,a20000000
1f728                 |     
1f728     5C 87 02 F5 | loop1       and     p1,acmd1            ' cmd=0 resets the phase accumulator
1f72c     65 89 02 F5 |             and     p2,acmd2
1f730     6E 8B 02 F5 |             and     p3,acmd3
1f734     77 8D 02 F5 |             and     p4,acmd4
1f738     80 8F 02 F5 |             and     p5,acmd5
1f73c     89 91 02 F5 |             and     p6,acmd6
1f740     92 93 02 F5 |             and     p7,acmd7
1f744     9B 95 02 F5 |             and     p8,acmd8
1f748                 |        
1f748     2F 4C 07 F6 |             mov     cn,#p201           ' Find the channel to compute
1f74c     9D 4F 03 F6 |             mov     ct,time1           ' with the lowest next sample time
1f750     9E 4F 3B F3 |             fle     ct,time2 wcz   
1f754     48 4C 07 C6 |     if_c    mov     cn,#p202 
1f758     9F 4F 3B F3 |             fle     ct,time3 wcz
1f75c     63 4C 07 C6 |     if_c    mov     cn,#p203     
1f760     A0 4F 3B F3 |             fle     ct,time4 wcz
1f764     7E 4C 07 C6 |     if_c    mov     cn,#p204
1f768     A1 4F 3B F3 |             fle     ct,time5 wcz
1f76c     99 4C 07 C6 |     if_c    mov     cn,#p205 
1f770     A2 4F 3B F3 |             fle     ct,time6 wcz
1f774     B4 4C 07 C6 |     if_c    mov     cn,#p206
1f778     A3 4F 3B F3 |             fle     ct,time7 wcz
1f77c     CF 4C 07 C6 |     if_c    mov     cn,#p207
1f780     A4 4F 3B F3 |             fle     ct,time8 wcz
1f784     EA 4C 07 C6 |     if_c    mov     cn,#p208 
1f788                 |  
1f788     2C 4C 63 FD |             jmp     cn
1f78c                 |    
1f78c                 | '----------------------------------------------------------------------------------
1f78c                 | '------------- Compute channel samples --------------------------------------------
1f78c                 | '----------------------------------------------------------------------------------
1f78c                 | 	
1f78c                 | ' ------------  Channel 1
1f78c                 |  
1f78c     28 10 64 FD | p201        setq    #8              ' Read channel regs from the hub
1f790     00 A9 06 FB |             rdlong  sstart1,ptra
1f794                 | 
1f794     9D 51 03 F6 |             mov     dt0,time1      ' compute the delta to add to the global time
1f798     9C 51 83 F1 |             sub     dt0,time0
1f79c     5A 3B 03 F1 |             add     time1,freq1    ' compute the next channel time	
1f7a0                 | 	        
1f7a0     5B 87 02 F1 |             add     p1,askip1      ' update the phase accumulator
1f7a4     57 87 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
1f7a8     57 87 82 31 |     if_ge   sub     p1,lend1	        
1f7ac     56 87 02 31 |     if_ge   add     p1,lstart1       
1f7b0     43 97 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
1f7b4     54 97 02 F1 |             add     qq,sstart1
1f7b8                 |             
1f7b8     00 AA 0E F2 |             cmp     type1,#0 wz    ' check the sample type
1f7bc     4B 99 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
1f7c0     08 98 66 50 |     if_nz   shl     spl,#8
1f7c4     4B 99 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
1f7c8                 | 
1f7c8     58 99 32 FA |             scas    spl,vol1       ' apply the volume
1f7cc     00 98 02 F6 |             mov     spl,0-0
1f7d0                 | 
1f7d0     59 99 32 FA |             scas    spl,apan1      ' apply the pan
1f7d4     00 56 03 F6 |             mov     ls1,0-0
1f7d8     20 00 00 FF 
1f7dc     00 96 06 F6 |             mov     qq,##16384
1f7e0     59 97 82 F1 |             sub     qq,apan1
1f7e4     4B 99 32 FA |             scas    spl,qq
1f7e8     00 58 03 F6 |             mov     rs1,0-0
1f7ec                 |             
1f7ec     F4 02 90 FD |             jmp     #p101              
1f7f0                 | 	    	
1f7f0                 | ' ------------  Channel 2
1f7f0                 |  
1f7f0     24 F0 07 F1 | p202        add     ptra,#36
1f7f4     28 10 64 FD |             setq    #8              
1f7f8     00 BB 06 FB |             rdlong  sstart2,ptra
1f7fc     24 F0 87 F1 |             sub     ptra, #36
1f800                 | 
1f800     9E 51 03 F6 |             mov     dt0,time2
1f804     9C 51 83 F1 |             sub     dt0,time0
1f808     63 3D 03 F1 |             add     time2,freq2  	
1f80c                 | 	        
1f80c     64 89 02 F1 |             add     p2,askip2
1f810     60 89 1A F2 |             cmp     p2,lend2 wcz
1f814     60 89 82 31 |     if_ge   sub     p2,lend2	        
1f818     5F 89 02 31 |     if_ge   add     p2,lstart2       
1f81c     44 97 02 F6 |             mov     qq,p2
1f820     5D 97 02 F1 |             add     qq,sstart2
1f824                 | 
1f824     00 BC 0E F2 |             cmp     type2,#0 wz
1f828     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1f82c     08 98 66 50 |     if_nz   shl     spl,#8
1f830     4B 99 E2 AA |     if_z    rdword  spl,qq
1f834                 | 
1f834     61 99 32 FA |             scas    spl,vol2
1f838     00 98 02 F6 |             mov     spl,0-0
1f83c                 |             
1f83c     62 99 32 FA |             scas    spl,apan2
1f840     00 5A 03 F6 |             mov     ls2,0-0
1f844     20 00 00 FF 
1f848     00 96 06 F6 |             mov     qq,##16384
1f84c     62 97 82 F1 |             sub     qq,apan2
1f850     4B 99 32 FA |             scas    spl,qq
1f854     00 5C 03 F6 |             mov     rs2,0-0
1f858                 |             
1f858     88 02 90 FD |             jmp     #p101
1f85c                 | 
1f85c                 | ' ------------  Channel 3
1f85c                 |  
1f85c     48 F0 07 F1 | p203        add     ptra,#36*2
1f860     28 10 64 FD |             setq    #8               
1f864     00 CD 06 FB |             rdlong  sstart3,ptra
1f868     48 F0 87 F1 |             sub     ptra, #36*2
1f86c                 | 
1f86c     9F 51 03 F6 |             mov     dt0,time3
1f870     9C 51 83 F1 |             sub     dt0,time0
1f874     6C 3F 03 F1 |             add     time3,freq3  	
1f878                 | 	        
1f878     6D 8B 02 F1 |             add     p3,askip3
1f87c     69 8B 1A F2 |             cmp     p3,lend3 wcz
1f880     69 8B 82 31 |     if_ge   sub     p3,lend3	        
1f884     68 8B 02 31 |     if_ge   add     p3,lstart3       
1f888     45 97 02 F6 |             mov     qq,p3
1f88c     66 97 02 F1 |             add     qq,sstart3
1f890                 |             
1f890     00 CE 0E F2 |             cmp     type3,#0 wz
1f894     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1f898     08 98 66 50 |     if_nz   shl     spl,#8
1f89c     4B 99 E2 AA |     if_z    rdword  spl,qq
1f8a0                 | 
1f8a0     6A 99 32 FA |             scas    spl,vol3
1f8a4     00 98 02 F6 |             mov     spl,0-0
1f8a8                 |     	
1f8a8     6B 99 32 FA |             scas    spl,apan3
1f8ac     00 5E 03 F6 |             mov     ls3,0-0
1f8b0                 |             
1f8b0     20 00 00 FF 
1f8b4     00 96 06 F6 |             mov     qq,##16384
1f8b8     6B 97 82 F1 |             sub     qq,apan3
1f8bc     4B 99 32 FA |             scas    spl,qq
1f8c0     00 60 03 F6 |             mov     rs3,0-0
1f8c4                 | 
1f8c4     1C 02 90 FD |             jmp     #p101
1f8c8                 |             
1f8c8                 | ' ------------  Channel 4
1f8c8                 |  
1f8c8     6C F0 07 F1 | p204        add     ptra,#36*3
1f8cc     28 10 64 FD |             setq    #8               
1f8d0     00 DF 06 FB |             rdlong  sstart4,ptra
1f8d4     6C F0 87 F1 |             sub     ptra, #36*3
1f8d8                 | 
1f8d8     A0 51 03 F6 |             mov     dt0,time4
1f8dc     9C 51 83 F1 |             sub     dt0,time0
1f8e0     75 41 03 F1 |             add     time4,freq4  	
1f8e4                 | 	        
1f8e4     76 8D 02 F1 |             add     p4,askip4
1f8e8     72 8D 1A F2 |             cmp     p4,lend4 wcz
1f8ec     72 8D 82 31 |     if_ge   sub     p4,lend4	        
1f8f0     71 8D 02 31 |     if_ge   add     p4,lstart4       
1f8f4     46 97 02 F6 |             mov     qq,p4
1f8f8     6F 97 02 F1 |             add     qq,sstart4
1f8fc                 |             
1f8fc     00 E0 0E F2 |             cmp     type4,#0 wz
1f900     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1f904     08 98 66 50 |     if_nz   shl     spl,#8
1f908     4B 99 E2 AA |     if_z    rdword  spl,qq
1f90c                 | 
1f90c     73 99 32 FA |             scas    spl,vol4
1f910     00 98 02 F6 |             mov     spl,0-0
1f914                 |     	
1f914     74 99 32 FA |             scas    spl,apan4
1f918     00 64 03 F6 |             mov     ls4,0-0
1f91c                 |             
1f91c     20 00 00 FF 
1f920     00 96 06 F6 |             mov     qq,##16384
1f924     74 97 82 F1 |             sub     qq,apan4
1f928     4B 99 32 FA |             scas    spl,qq
1f92c     00 62 03 F6 |             mov     rs4,0-0
1f930                 | 
1f930     B0 01 90 FD |             jmp     #p101
1f934                 |             
1f934                 | ' ------------  Channel 5
1f934                 |  
1f934     90 F0 07 F1 | p205        add     ptra,#36*4
1f938     28 10 64 FD |             setq    #8               
1f93c     00 F1 06 FB |             rdlong  sstart5,ptra
1f940     90 F0 87 F1 |             sub     ptra, #36*4
1f944                 | 
1f944     A1 51 03 F6 |             mov     dt0,time5
1f948     9C 51 83 F1 |             sub     dt0,time0
1f94c     7E 43 03 F1 |             add     time5,freq5  	
1f950                 | 
1f950                 | 	        
1f950     7F 8F 02 F1 |             add     p5,askip5
1f954     7B 8F 1A F2 |             cmp     p5,lend5 wcz
1f958     7B 8F 82 31 |     if_ge   sub     p5,lend5	        
1f95c     7A 8F 02 31 |     if_ge   add     p5,lstart5       
1f960     47 97 02 F6 |             mov     qq,p5
1f964     78 97 02 F1 |             add     qq,sstart5
1f968                 |             
1f968     00 F2 0E F2 |             cmp     type5,#0 wz
1f96c     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1f970     08 98 66 50 |     if_nz   shl     spl,#8
1f974     4B 99 E2 AA |     if_z    rdword  spl,qq
1f978                 | 
1f978     7C 99 32 FA |             scas    spl,vol5
1f97c     00 98 02 F6 |             mov     spl,0-0
1f980                 |     	
1f980     7D 99 32 FA |             scas    spl,apan5
1f984     00 68 03 F6 |             mov     ls5,0-0
1f988                 |             
1f988     20 00 00 FF 
1f98c     00 96 06 F6 |             mov     qq,##16384
1f990     7D 97 82 F1 |             sub     qq,apan5
1f994     4B 99 32 FA |             scas    spl,qq
1f998     00 66 03 F6 |             mov     rs5,0-0
1f99c                 | 
1f99c     44 01 90 FD |             jmp     #p101
1f9a0                 |   
1f9a0                 | ' ------------  Channel 6
1f9a0                 |  
1f9a0     B4 F0 07 F1 | p206        add     ptra,#36*5
1f9a4     28 10 64 FD |             setq    #8              
1f9a8     00 03 07 FB |             rdlong  sstart6,ptra
1f9ac     B4 F0 87 F1 |             sub     ptra, #36*5
1f9b0                 | 
1f9b0     A2 51 03 F6 |             mov       dt0,time6
1f9b4     9C 51 83 F1 |             sub     dt0,time0
1f9b8     87 45 03 F1 |             add     time6,freq6  	
1f9bc                 | 	        
1f9bc     88 91 02 F1 |             add     p6,askip6
1f9c0     84 91 1A F2 |             cmp     p6,lend6 wcz
1f9c4     84 91 82 31 |     if_ge   sub     p6,lend6	        
1f9c8     83 91 02 31 |     if_ge   add     p6,lstart6       
1f9cc     48 97 02 F6 |             mov     qq,p6
1f9d0     81 97 02 F1 |             add     qq,sstart6
1f9d4                 |             
1f9d4     00 04 0F F2 |             cmp     type6,#0 wz
1f9d8     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1f9dc     08 98 66 50 |     if_nz   shl     spl,#8
1f9e0     4B 99 E2 AA |     if_z    rdword  spl,qq
1f9e4                 |           
1f9e4     85 99 32 FA |             scas    spl,vol6
1f9e8     00 98 02 F6 |             mov     spl,0-0
1f9ec                 |     	
1f9ec     86 99 32 FA |             scas    spl,apan6
1f9f0     00 6C 03 F6 |             mov     ls6,0-0
1f9f4                 |             
1f9f4     20 00 00 FF 
1f9f8     00 96 06 F6 |             mov     qq,##16384
1f9fc     86 97 82 F1 |             sub     qq,apan6
1fa00     4B 99 32 FA |             scas    spl,qq
1fa04     00 6A 03 F6 |             mov     rs6,0-0
1fa08                 | 
1fa08     D8 00 90 FD |             jmp     #p101
1fa0c                 |             
1fa0c                 | ' ------------  Channel 7
1fa0c                 |  
1fa0c     D8 F0 07 F1 | p207        add     ptra,#36*6
1fa10     28 10 64 FD |             setq    #8              ' 
1fa14     00 15 07 FB |             rdlong  sstart7,ptra
1fa18     D8 F0 87 F1 |             sub     ptra, #36*6
1fa1c                 | 
1fa1c     A3 51 03 F6 |             mov     dt0,time7
1fa20     9C 51 83 F1 |             sub     dt0,time0
1fa24     90 47 03 F1 |             add     time7,freq7  	
1fa28                 | 	        
1fa28     91 93 02 F1 |             add     p7,askip7
1fa2c     8D 93 1A F2 |             cmp     p7,lend7 wcz
1fa30     8D 93 82 31 |     if_ge   sub     p7,lend7	        
1fa34     8C 93 02 31 |     if_ge   add     p7,lstart7       
1fa38     49 97 02 F6 |             mov     qq,p7
1fa3c     8A 97 02 F1 |             add     qq,sstart7
1fa40                 |             
1fa40     00 16 0F F2 |             cmp     type7,#0 wz
1fa44     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1fa48     08 98 66 50 |     if_nz   shl     spl,#8
1fa4c     4B 99 E2 AA |     if_z    rdword  spl,qq
1fa50                 | 
1fa50     8E 99 32 FA |             scas    spl,vol7
1fa54     00 98 02 F6 |             mov     spl,0-0
1fa58                 |     	
1fa58     8F 99 32 FA |             scas    spl,apan7
1fa5c     00 70 03 F6 |             mov     ls7,0-0
1fa60                 |             
1fa60     20 00 00 FF 
1fa64     00 96 06 F6 |             mov     qq,##16384
1fa68     8F 97 82 F1 |             sub     qq,apan7
1fa6c     4B 99 32 FA |             scas    spl,qq
1fa70     00 6E 03 F6 |             mov     rs7,0-0
1fa74                 | 
1fa74     6C 00 90 FD |             jmp     #p101     
1fa78                 |                    
1fa78                 | ' ------------  Channel 8
1fa78                 |  
1fa78     FC F0 07 F1 | p208        add     ptra,#36*7
1fa7c     28 10 64 FD |             setq    #8              
1fa80     00 27 07 FB |             rdlong  sstart8,ptra
1fa84     FC F0 87 F1 |             sub     ptra, #36*7
1fa88                 |  
1fa88     A4 51 03 F6 |             mov     dt0,time8
1fa8c     9C 51 83 F1 |             sub     dt0,time0
1fa90     99 49 03 F1 |             add     time8,freq8  	
1fa94                 | 	        
1fa94     9A 95 02 F1 |             add     p8,askip8
1fa98     96 95 1A F2 |             cmp     p8,lend8 wcz
1fa9c     96 95 82 31 |     if_ge   sub     p8,lend8	        
1faa0     95 95 02 31 |     if_ge   add     p8,lstart8       
1faa4     4A 97 02 F6 |             mov     qq,p8
1faa8     93 97 02 F1 |             add     qq,sstart8
1faac                 |             
1faac     00 28 0F F2 |             cmp     type8,#0 wz
1fab0     4B 99 C2 5A |     if_nz   rdbyte  spl,qq
1fab4     08 98 66 50 |     if_nz   shl     spl,#8
1fab8     4B 99 E2 AA |     if_z    rdword  spl,qq
1fabc                 | 
1fabc     97 99 32 FA |             scas    spl,vol8
1fac0     00 98 02 F6 |             mov     spl,0-0
1fac4                 |     	
1fac4     98 99 32 FA |             scas    spl,apan8
1fac8     00 74 03 F6 |             mov     ls8,0-0
1facc                 |             
1facc     20 00 00 FF 
1fad0     00 96 06 F6 |             mov     qq,##16384
1fad4     98 97 82 F1 |             sub     qq,apan8
1fad8     4B 99 32 FA |             scas    spl,qq
1fadc     00 72 03 F6 |             mov     rs8,0-0
1fae0                 | 
1fae0     00 00 90 FD |             jmp     #p101            
1fae4                 |             
1fae4                 | '------------------------ Channels end here --------------------       
1fae4                 | 
1fae4                 | ' Now add all channels and put the sample to the buffer    
1fae4                 | 
1fae4                 | 
1fae4     9C 4B 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1fae8     02 9A 86 A1 |     if_z    sub     front,#2         ' 
1faec     FF 9B 06 A5 |     if_z    and     front,#511     
1faf0                 |   
1faf0     00 54 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1faf4     00 52 07 F6 |             mov     ls,#0
1faf8     AC 55 03 F1 |             add     rs,rs1
1fafc     AE 55 03 F1 |             add     rs,rs2
1fb00     B0 55 03 F1 |             add     rs,rs3
1fb04     B1 55 03 F1 |             add     rs,rs4
1fb08     B3 55 03 F1 |             add     rs,rs5
1fb0c     B5 55 03 F1 |             add     rs,rs6
1fb10     B7 55 03 F1 |             add     rs,rs7
1fb14     B9 55 03 F1 |             add     rs,rs8
1fb18                 |             
1fb18     AB 53 03 F1 |             add     ls,ls1
1fb1c     AD 53 03 F1 |             add     ls,ls2
1fb20     AF 53 03 F1 |             add     ls,ls3
1fb24     B2 53 03 F1 |             add     ls,ls4
1fb28     B4 53 03 F1 |             add     ls,ls5
1fb2c     B6 53 03 F1 |             add     ls,ls6
1fb30     B8 53 03 F1 |             add     ls,ls7
1fb34     BA 53 03 F1 |             add     ls,ls8
1fb38                 |  		
1fb38     0F 52 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1fb3c     0F 54 E7 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1fb40                 | 		    
1fb40     A9 55 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1fb44     AA 71 02 F6 |             mov newsample, rs
1fb48                 | 
1fb48     9C 4B 03 F6 |             mov     oldt0,time0      ' update global time
1fb4c     A8 39 03 F1 |             add     time0,dt0     
1fb50                 |             
1fb50                 |                                      ' now push dt0 samples to the buffer
1fb50     00 50 0F F2 |             cmp      dt0,#0 wz
1fb54     D0 FB 9F AD |     if_z    jmp      #loop1
1fb58     A8 75 02 F6 |             mov      t1,dt0
1fb5c                 |   
1fb5c     F9 77 02 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1fb60     01 76 86 F1 |             sub     t2,#1
1fb64     FF 77 06 F5 |             and     t2,#511
1fb68     4D 77 1A F2 |             cmp     t2,front wcz
1fb6c     EC FF 9F AD |     if_e    jmp     #p301    
1fb70                 |     
1fb70     4D 71 32 FC |             wrlut   newsample, front
1fb74     01 9A 06 F1 |             add     front,#1
1fb78     FF 9B 06 F5 |             and     front,#511
1fb7c     F7 75 6E FB |             djnz    t1,#p301
1fb80     78 FB 9F FD |             jmp     #loop            'loop
1fb84                 | 
1fb84                 | '-------------------------------------------------------------------------
1fb84                 | '------------------ This is the end of the main loop ---------------------
1fb84                 | '-------------------------------------------------------------------------
1fb84                 | 
1fb84                 | '--------------------------------------------------------------------------
1fb84                 | '------ Interrupt service -------------------------------------------------
1fb84                 | '------ Output the sample, get the next one if exists ---------------------
1fb84                 | '--------------------------------------------------------------------------
1fb84                 | 
1fb84     0E 9E 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1fb88     0F A0 26 FC |             wypin   rsample,#right       '4
1fb8c                 |            
1fb8c     4D F3 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1fb90     F5 FF 3B AB |     if_e    reti1                        '8/10
1fb94                 | 
1fb94     E1 A3 A6 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1fb98     51 A1 3A F9 |           	getword rsample,lsnext,#1    '13
1fb9c     51 9F 32 F9 |           	getword lsample,lsnext,#0    '15
1fba0     F5 FF 3B FB |             reti1                        '17/19 
1fba4                 |           
1fba4                 | '---------------------------------------------------------------------------
1fba4                 | '-------- End of interrupt -------------------------------------------------
1fba4                 | '---------------------------------------------------------------------------    
1fba4                 | 
1fba4                 | 
1fba4                 | '---------------------------------------------------------------------------
1fba4                 | '------- Variables ---------------------------------------------------------
1fba4                 | '---------------------------------------------------------------------------
1fba4                 | 
1fba4                 | ' constants
1fba4                 | 
1fba4     FF FF FF 1F | a1fffffff long $1fffffff
1fba8     00 00 00 20 | a20000000 long $20000000
1fbac     00 00 00 21 | a21000000 long $21000000
1fbb0     00 00 00 00 | newsample long 0
1fbb4     FF FF 00 00 | affff long $ffff
1fbb8     00 00 00 00 | t1 long 0
1fbbc     00 00 00 00 | t2 long 0
1fbc0     00 00 00 00 | nl long 0
1fbc4     00 00 00 00 | nr long 0
1fbc8     00 00 00 00 | nrsample long 0
1fbcc     00 00 00 00 | nlsample long 0
1fbd0     1F 00 00 00 | fl long 31
1fbd4     1F 00 00 00 | fr long 31
1fbd8     00 00 00 00 | d long 0
1fbdc                 | ' phase accumulators
1fbdc                 | 
1fbdc     00 00 00 00 | p1          long 0
1fbe0     00 00 00 00 | p2          long 0
1fbe4     00 00 00 00 | p3          long 0
1fbe8     00 00 00 00 | p4          long 0
1fbec     00 00 00 00 | p5          long 0
1fbf0     00 00 00 00 | p6          long 0
1fbf4     00 00 00 00 | p7          long 0
1fbf8     00 00 00 00 | p8          long 0
1fbfc                 | 
1fbfc                 | ' temporary variables 
1fbfc                 | 
1fbfc     00 00 00 00 | qq          long 0
1fc00     00 00 00 00 | spl         long 0
1fc04                 | 
1fc04                 | ' circular buffer in LUT
1fc04                 | 
1fc04     00 00 00 00 | front       long 0
1fc08                 | 'tail        long 0
1fc08                 | 
1fc08                 | ' Interrupt ISR variables
1fc08                 | 
1fc08     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
1fc0c     00 00 00 00 | lsample     long 0
1fc10     00 00 00 00 | rsample     long 0
1fc14     00 00 00 00 | lsnext      long 0
1fc18     00 00 00 00 | rsnext      long 0 
1fc1c     00 00 00 00 | irqtime     long 0
1fc20                 | 
1fc20                 | ' Channel 1 registers. TODO - optimize the memory usage
1fc20                 | 
1fc20     00 00 00 00 | sstart1     long 0       ' Sample start pointer
1fc24     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
1fc28     00 00 00 00 | lstart1     long 0       ' Loop start
1fc2c     02 00 00 00 | lend1       long 2       ' Loop end
1fc30     00 00 00 00 | vol1        long 0       ' volume, 0..16384
1fc34     00 00 00 00 | apan1       long 0       ' pan, 0..16384
1fc38     65 00 00 00 | freq1       long 101     ' frequency divider
1fc3c     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
1fc40     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
1fc44                 | 
1fc44                 | ' Channel 2 registers
1fc44                 | 
1fc44     00 00 00 00 | sstart2     long 0
1fc48     00 00 00 00 | type2       long 0
1fc4c     00 00 00 00 | lstart2     long 0
1fc50     02 00 00 00 | lend2       long 2        		
1fc54     00 00 00 00 | vol2        long 0
1fc58     00 00 00 00 | apan2       long 0
1fc5c     67 00 00 00 | freq2       long 103
1fc60     02 00 00 00 | askip2      long 2
1fc64     00 00 00 00 | acmd2       long 0
1fc68                 | 
1fc68                 | ' Channel 3 registers
1fc68                 | 
1fc68     00 00 00 00 | sstart3     long 0
1fc6c     00 00 00 00 | type3       long 0
1fc70     00 00 00 00 | lstart3     long 0
1fc74     02 00 00 00 | lend3       long 2       		'
1fc78     00 00 00 00 | vol3        long 0
1fc7c     00 00 00 00 | apan3       long 0
1fc80     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
1fc84     02 00 00 00 | askip3      long 2
1fc88     00 00 00 00 | acmd3       long 0
1fc8c                 | 
1fc8c                 | ' Channel 4 registers
1fc8c                 | 
1fc8c     00 00 00 00 | sstart4     long 0
1fc90     00 00 00 00 | type4       long 0
1fc94     00 00 00 00 | lstart4     long 0
1fc98     02 00 00 00 | lend4       long 2       		'
1fc9c     00 00 00 00 | vol4        long 0
1fca0     00 00 00 00 | apan4       long 0
1fca4     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
1fca8     02 00 00 00 | askip4      long 2
1fcac     00 00 00 00 | acmd4       long 0
1fcb0                 | 
1fcb0                 | ' Channel 5 registers
1fcb0                 | 
1fcb0     00 00 00 00 | sstart5     long 0
1fcb4     00 00 00 00 | type5       long 0
1fcb8     00 00 00 00 | lstart5     long 0
1fcbc     02 00 00 00 | lend5       long 2       		'
1fcc0     00 00 00 00 | vol5        long 0
1fcc4     00 00 00 00 | apan5       long 0
1fcc8     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
1fccc     02 00 00 00 | askip5      long 2
1fcd0     00 00 00 00 | acmd5       long 0
1fcd4                 | 
1fcd4                 | ' Channel 6 registers
1fcd4                 | 
1fcd4     00 00 00 00 | sstart6     long 0
1fcd8     00 00 00 00 | type6       long 0
1fcdc     00 00 00 00 | lstart6     long 0
1fce0     02 00 00 00 | lend6       long 2       		'
1fce4     00 00 00 00 | vol6        long 0
1fce8     00 00 00 00 | apan6       long 0
1fcec     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
1fcf0     02 00 00 00 | askip6      long 2
1fcf4     00 00 00 00 | acmd6       long 0
1fcf8                 | 
1fcf8                 | ' Channel 7 registers
1fcf8                 | 
1fcf8     00 00 00 00 | sstart7     long 0
1fcfc     00 00 00 00 | type7       long 0
1fd00     00 00 00 00 | lstart7     long 0
1fd04     02 00 00 00 | lend7       long 2       		'
1fd08     00 00 00 00 | vol7        long 0
1fd0c     00 00 00 00 | apan7       long 0
1fd10     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
1fd14     02 00 00 00 | askip7      long 2
1fd18     00 00 00 00 | acmd7       long 0
1fd1c                 | 
1fd1c                 | ' Channel 8 registers
1fd1c                 | 
1fd1c     00 00 00 00 | sstart8     long 0
1fd20     00 00 00 00 | type8       long 0
1fd24     00 00 00 00 | lstart8     long 0
1fd28     02 00 00 00 | lend8       long 2       		'
1fd2c     00 00 00 00 | vol8        long 0
1fd30     00 00 00 00 | apan8       long 0
1fd34     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
1fd38     02 00 00 00 | askip8      long 2
1fd3c     00 00 00 00 | acmd8       long 0
1fd40                 | 
1fd40                 | ' Time variables
1fd40                 | 
1fd40     00 00 00 00 | time0       long 0    ' Global sample computing time
1fd44     01 00 00 00 | time1       long 1    ' Local channels time
1fd48     02 00 00 00 | time2       long 2
1fd4c     03 00 00 00 | time3       long 3
1fd50     04 00 00 00 | time4       long 4
1fd54     05 00 00 00 | time5       long 5
1fd58     06 00 00 00 | time6       long 6
1fd5c     07 00 00 00 | time7       long 7
1fd60     08 00 00 00 | time8       long 8
1fd64                 | 
1fd64     00 00 00 00 | oldt0       long 0    'Temporary time variables
1fd68     00 00 00 00 | cn          long 0
1fd6c     00 00 00 00 | ct          long 0
1fd70     00 00 00 00 | dt0         long 0
1fd74                 | 
1fd74                 | ' Samples
1fd74                 | 
1fd74     00 00 00 00 | ls          long 0    ' Global sample variable
1fd78     00 00 00 00 | rs          long 0
1fd7c                 | 
1fd7c     00 00 00 00 | ls1         long 0    ' Channel samples
1fd80     00 00 00 00 | rs1         long 0
1fd84     00 00 00 00 | ls2         long 0
1fd88     00 00 00 00 | rs2         long 0
1fd8c     00 00 00 00 | ls3         long 0
1fd90     00 00 00 00 | rs3         long 0
1fd94     00 00 00 00 | rs4         long 0
1fd98     00 00 00 00 | ls4         long 0
1fd9c     00 00 00 00 | rs5         long 0
1fda0     00 00 00 00 | ls5         long 0
1fda4     00 00 00 00 | rs6         long 0
1fda8     00 00 00 00 | ls6         long 0
1fdac     00 00 00 00 | rs7         long 0
1fdb0     00 00 00 00 | ls7         long 0
1fdb4     00 00 00 00 | rs8         long 0
1fdb8     00 00 00 00 | ls8         long 0
1fdbc                 | 
1fdbc     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1fdc0                 | 
1fdc0     00 00 00 00 
1fdc4     00 00 00 00 | null  			long 	0,0           ' for channel reset
1fdc8     73 32 00 04 
1fdcc     00 00 10 00 
1fdd0     00 00 00 00 
1fdd4     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1fdd8     00 00 C9 00 
1fddc     92 01 5B 02 
1fde0     24 03 ED 03 
1fde4     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1fde8     48 06 11 07 
1fdec     D9 07 A2 08 
1fdf0     6A 09 33 0A 
1fdf4     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1fdf8     8C 0C 54 0D 
1fdfc     1C 0E E3 0E 
1fe00     AB 0F 72 10 
1fe04     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1fe08     C8 12 8F 13 
1fe0c     55 14 1C 15 
1fe10     E2 15 A8 16 
1fe14     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1fe18     F9 18 BE 19 
1fe1c     82 1A 47 1B 
1fe20     0B 1C CF 1C 
1fe24     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1fe28     1A 1F DD 1F 
1fe2c     9F 20 61 21 
1fe30     23 22 E5 22 
1fe34     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1fe38     28 25 E8 25 
1fe3c     A8 26 67 27 
1fe40     26 28 E5 28 
1fe44     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1fe48     1F 2B DC 2B 
1fe4c     99 2C 55 2D 
1fe50     11 2E CC 2E 
1fe54     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1fe58     FB 30 B5 31 
1fe5c     6E 32 26 33 
1fe60     DF 33 96 34 
1fe64     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1fe68     BA 36 6F 37 
1fe6c     24 38 D9 38 
1fe70     8C 39 40 3A 
1fe74     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1fe78     56 3C 07 3D 
1fe7c     B8 3D 68 3E 
1fe80     17 3F C5 3F 
1fe84     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1fe88     CE 41 7A 42 
1fe8c     25 43 D0 43 
1fe90     7A 44 24 45 
1fe94     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1fe98     1C 47 C3 47 
1fe9c     69 48 0F 49 
1fea0     B4 49 58 4A 
1fea4     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1fea8     3F 4C E0 4C 
1feac     81 4D 20 4E 
1feb0     BF 4E 5D 4F 
1feb4     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1feb8     33 51 CE 51 
1febc     68 52 02 53 
1fec0     9B 53 32 54 
1fec4     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1fec8     F5 55 8A 56 
1fecc     1D 57 B0 57 
1fed0     42 58 D3 58 
1fed4     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1fed8     82 5A 0F 5B 
1fedc     9C 5B 28 5C 
1fee0     B3 5C 3E 5D 
1fee4     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1fee8     D7 5E 5D 5F 
1feec     E3 5F 68 60 
1fef0     EB 60 6E 61 
1fef4     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1fef8     F1 62 70 63 
1fefc     EE 63 6C 64 
1ff00     E8 64 63 65 
1ff04     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1ff08     CF 66 46 67 
1ff0c     BC 67 32 68 
1ff10     A6 68 19 69 
1ff14     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1ff18     6D 6A DC 6A 
1ff1c     4A 6B B7 6B 
1ff20     23 6C 8E 6C 
1ff24     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1ff28     C9 6D 30 6E 
1ff2c     96 6E FB 6E 
1ff30     5E 6F C1 6F 
1ff34     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1ff38     E2 70 40 71 
1ff3c     9D 71 F9 71 
1ff40     54 72 AE 72 
1ff44     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1ff48     B5 73 0A 74 
1ff4c     5F 74 B2 74 
1ff50     04 75 55 75 
1ff54     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1ff58     41 76 8D 76 
1ff5c     D8 76 22 77 
1ff60     6B 77 B3 77 
1ff64     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1ff68     84 78 C7 78 
1ff6c     09 79 4A 79 
1ff70     89 79 C8 79 
1ff74     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1ff78     7C 7A B6 7A 
1ff7c     EE 7A 26 7B 
1ff80     5C 7B 91 7B 
1ff84     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1ff88     29 7C 59 7C 
1ff8c     88 7C B6 7C 
1ff90     E3 7C 0E 7D 
1ff94     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1ff98     89 7D B0 7D 
1ff9c     D5 7D FA 7D 
1ffa0     1D 7E 3E 7E 
1ffa4     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1ffa8     9C 7E B9 7E 
1ffac     D5 7E EF 7E 
1ffb0     09 7F 21 7F 
1ffb4     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1ffb8     61 7F 74 7F 
1ffbc     86 7F 97 7F 
1ffc0     A6 7F B4 7F 
1ffc4     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1ffc8     D8 7F E1 7F 
1ffcc     E9 7F F0 7F 
1ffd0     F5 7F F9 7F 
1ffd4     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1ffd8     FF 7F FE 7F 
1ffdc     FD 7F F9 7F 
1ffe0     F5 7F F0 7F 
1ffe4     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1ffe8     D8 7F CD 7F 
1ffec     C1 7F B4 7F 
1fff0     A6 7F 97 7F 
1fff4     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1fff8     61 7F 4D 7F 
1fffc     37 7F 21 7F 
20000     09 7F EF 7E 
20004     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
20008     9C 7E 7E 7E 
2000c     5F 7E 3E 7E 
20010     1D 7E FA 7D 
20014     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
20018     89 7D 62 7D 
2001c     39 7D 0E 7D 
20020     E3 7C B6 7C 
20024     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
20028     29 7C F8 7B 
2002c     C5 7B 91 7B 
20030     5C 7B 26 7B 
20034     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
20038     7C 7A 41 7A 
2003c     05 7A C8 79 
20040     89 79 4A 79 
20044     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
20048     84 78 3F 78 
2004c     FA 77 B3 77 
20050     6B 77 22 77 
20054     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
20058     41 76 F3 75 
2005c     A5 75 55 75 
20060     04 75 B2 74 
20064     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
20068     B5 73 5E 73 
2006c     07 73 AE 72 
20070     54 72 F9 71 
20074     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
20078     E2 70 83 70 
2007c     22 70 C1 6F 
20080     5E 6F FB 6E 
20084     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
20088     C9 6D 61 6D 
2008c     F8 6C 8E 6C 
20090     23 6C B7 6B 
20094     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
20098     6D 6A FD 69 
2009c     8B 69 19 69 
200a0     A6 68 32 68 
200a4     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
200a8     CF 66 56 66 
200ac     DD 65 63 65 
200b0     E8 64 6C 64 
200b4     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
200b8     F1 62 71 62 
200bc     F0 61 6E 61 
200c0     EB 60 68 60 
200c4     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
200c8     D7 5E 4F 5E 
200cc     C7 5D 3E 5D 
200d0     B3 5C 28 5C 
200d4     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
200d8     82 5A F3 59 
200dc     64 59 D3 58 
200e0     42 58 B0 57 
200e4     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
200e8     F5 55 60 55 
200ec     C9 54 32 54 
200f0     9B 53 02 53 
200f4     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
200f8     33 51 97 50 
200fc     FB 4F 5D 4F 
20100     BF 4E 20 4E 
20104     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
20108     3F 4C 9D 4B 
2010c     FB 4A 58 4A 
20110     B4 49 0F 49 
20114     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
20118     1C 47 75 46 
2011c     CD 45 24 45 
20120     7A 44 D0 43 
20124     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
20128     CE 41 21 41 
2012c     73 40 C5 3F 
20130     17 3F 68 3E 
20134     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
20138     56 3C A5 3B 
2013c     F2 3A 40 3A 
20140     8C 39 D9 38 
20144     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
20148     BA 36 04 36 
2014c     4D 35 96 34 
20150     DF 33 26 33 
20154     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
20158     FB 30 41 30 
2015c     87 2F CC 2E 
20160     11 2E 55 2D 
20164     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
20168     1F 2B 61 2A 
2016c     A3 29 E5 28 
20170     26 28 67 27 
20174     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
20178     28 25 67 24 
2017c     A6 23 E5 22 
20180     23 22 61 21 
20184     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
20188     1A 1F 57 1E 
2018c     93 1D CF 1C 
20190     0B 1C 47 1B 
20194     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
20198     F9 18 33 18 
2019c     6E 17 A8 16 
201a0     E2 15 1C 15 
201a4     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
201a8     C8 12 01 12 
201ac     3A 11 72 10 
201b0     AB 0F E3 0E 
201b4     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
201b8     8C 0C C4 0B 
201bc     FB 0A 33 0A 
201c0     6A 09 A2 08 
201c4     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
201c8     48 06 7F 05 
201cc     B6 04 ED 03 
201d0     24 03 5B 02 
201d4     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
201d8     00 00 37 FF 
201dc     6E FE A5 FD 
201e0     DC FC 13 FC 
201e4     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
201e8     B8 F9 EF F8 
201ec     27 F8 5E F7 
201f0     96 F6 CD F5 
201f4     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
201f8     74 F3 AC F2 
201fc     E4 F1 1D F1 
20200     55 F0 8E EF 
20204     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
20208     38 ED 71 EC 
2020c     AB EB E4 EA 
20210     1E EA 58 E9 
20214     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
20218     07 E7 42 E6 
2021c     7E E5 B9 E4 
20220     F5 E3 31 E3 
20224     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
20228     E6 E0 23 E0 
2022c     61 DF 9F DE 
20230     DD DD 1B DD 
20234     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
20238     D8 DA 18 DA 
2023c     58 D9 99 D8 
20240     DA D7 1B D7 
20244     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
20248     E1 D4 24 D4 
2024c     67 D3 AB D2 
20250     EF D1 34 D1 
20254     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
20258     05 CF 4B CE 
2025c     92 CD DA CC 
20260     21 CC 6A CB 
20264     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
20268     46 C9 91 C8 
2026c     DC C7 27 C7 
20270     74 C6 C0 C5 
20274     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
20278     AA C3 F9 C2 
2027c     48 C2 98 C1 
20280     E9 C0 3B C0 
20284     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
20288     32 BE 86 BD 
2028c     DB BC 30 BC 
20290     86 BB DC BA 
20294     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
20298     E4 B8 3D B8 
2029c     97 B7 F1 B6 
202a0     4C B6 A8 B5 
202a4     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
202a8     C1 B3 20 B3 
202ac     7F B2 E0 B1 
202b0     41 B1 A3 B0 
202b4     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
202b8     CD AE 32 AE 
202bc     98 AD FE AC 
202c0     65 AC CE AB 
202c4     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
202c8     0B AA 76 A9 
202cc     E3 A8 50 A8 
202d0     BE A7 2D A7 
202d4     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
202d8     7E A5 F1 A4 
202dc     64 A4 D8 A3 
202e0     4D A3 C2 A2 
202e4     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
202e8     29 A1 A3 A0 
202ec     1D A0 98 9F 
202f0     15 9F 92 9E 
202f4     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
202f8     0F 9D 90 9C 
202fc     12 9C 94 9B 
20300     18 9B 9D 9A 
20304     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
20308     31 99 BA 98 
2030c     44 98 CE 97 
20310     5A 97 E7 96 
20314     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
20318     93 95 24 95 
2031c     B6 94 49 94 
20320     DD 93 72 93 
20324     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
20328     37 92 D0 91 
2032c     6A 91 05 91 
20330     A2 90 3F 90 
20334     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
20338     1E 8F C0 8E 
2033c     63 8E 07 8E 
20340     AC 8D 52 8D 
20344     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
20348     4B 8C F6 8B 
2034c     A1 8B 4E 8B 
20350     FC 8A AB 8A 
20354     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
20358     BF 89 73 89 
2035c     28 89 DE 88 
20360     95 88 4D 88 
20364     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
20368     7C 87 39 87 
2036c     F7 86 B6 86 
20370     77 86 38 86 
20374     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
20378     84 85 4A 85 
2037c     12 85 DA 84 
20380     A4 84 6F 84 
20384     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
20388     D7 83 A7 83 
2038c     78 83 4A 83 
20390     1D 83 F2 82 
20394     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
20398     77 82 50 82 
2039c     2B 82 06 82 
203a0     E3 81 C2 81 
203a4     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
203a8     64 81 47 81 
203ac     2B 81 11 81 
203b0     F7 80 DF 80 
203b4     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
203b8     9F 80 8C 80 
203bc     7A 80 69 80 
203c0     5A 80 4C 80 
203c4     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
203c8     28 80 1F 80 
203cc     17 80 10 80 
203d0     0B 80 07 80 
203d4     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
203d8     01 80 02 80 
203dc     03 80 07 80 
203e0     0B 80 10 80 
203e4     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
203e8     28 80 33 80 
203ec     3F 80 4C 80 
203f0     5A 80 69 80 
203f4     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
203f8     9F 80 B3 80 
203fc     C9 80 DF 80 
20400     F7 80 11 81 
20404     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
20408     64 81 82 81 
2040c     A1 81 C2 81 
20410     E3 81 06 82 
20414     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
20418     77 82 9E 82 
2041c     C7 82 F2 82 
20420     1D 83 4A 83 
20424     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
20428     D7 83 08 84 
2042c     3B 84 6F 84 
20430     A4 84 DA 84 
20434     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
20438     84 85 BF 85 
2043c     FB 85 38 86 
20440     77 86 B6 86 
20444     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
20448     7C 87 C1 87 
2044c     06 88 4D 88 
20450     95 88 DE 88 
20454     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
20458     BF 89 0D 8A 
2045c     5B 8A AB 8A 
20460     FC 8A 4E 8B 
20464     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
20468     4B 8C A2 8C 
2046c     F9 8C 52 8D 
20470     AC 8D 07 8E 
20474     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
20478     1E 8F 7D 8F 
2047c     DE 8F 3F 90 
20480     A2 90 05 91 
20484     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
20488     37 92 9F 92 
2048c     08 93 72 93 
20490     DD 93 49 94 
20494     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
20498     93 95 03 96 
2049c     75 96 E7 96 
204a0     5A 97 CE 97 
204a4     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
204a8     31 99 AA 99 
204ac     23 9A 9D 9A 
204b0     18 9B 94 9B 
204b4     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
204b8     0F 9D 8F 9D 
204bc     10 9E 92 9E 
204c0     15 9F 98 9F 
204c4     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
204c8     29 A1 B1 A1 
204cc     39 A2 C2 A2 
204d0     4D A3 D8 A3 
204d4     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
204d8     7E A5 0D A6 
204dc     9C A6 2D A7 
204e0     BE A7 50 A8 
204e4     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
204e8     0B AA A0 AA 
204ec     37 AB CE AB 
204f0     65 AC FE AC 
204f4     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
204f8     CD AE 69 AF 
204fc     05 B0 A3 B0 
20500     41 B1 E0 B1 
20504     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
20508     C1 B3 63 B4 
2050c     05 B5 A8 B5 
20510     4C B6 F1 B6 
20514     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
20518     E4 B8 8B B9 
2051c     33 BA DC BA 
20520     86 BB 30 BC 
20524     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
20528     32 BE DF BE 
2052c     8D BF 3B C0 
20530     E9 C0 98 C1 
20534     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
20538     AA C3 5B C4 
2053c     0E C5 C0 C5 
20540     74 C6 27 C7 
20544     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
20548     46 C9 FC C9 
2054c     B3 CA 6A CB 
20550     21 CC DA CC 
20554     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
20558     05 CF BF CF 
2055c     79 D0 34 D1 
20560     EF D1 AB D2 
20564     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
20568     E1 D4 9F D5 
2056c     5D D6 1B D7 
20570     DA D7 99 D8 
20574     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
20578     D8 DA 99 DB 
2057c     5A DC 1B DD 
20580     DD DD 9F DE 
20584     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
20588     E6 E0 A9 E1 
2058c     6D E2 31 E3 
20590     F5 E3 B9 E4 
20594     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
20598     07 E7 CD E7 
2059c     92 E8 58 E9 
205a0     1E EA E4 EA 
205a4     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
205a8     38 ED FF ED 
205ac     C6 EE 8E EF 
205b0     55 F0 1D F1 
205b4     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
205b8     74 F3 3C F4 
205bc     05 F5 CD F5 
205c0     96 F6 5E F7 
205c4     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
205c8     B8 F9 81 FA 
205cc     4A FB 13 FC 
205d0     DC FC A5 FD 
205d4     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
205d8                 | 	alignl
205d8                 | __system__dat_
205d8     00 00 00 00 
205dc     00 00 00 00 | 	byte	$00[8]
205e0     03 00 00 00 
205e4     00 00 00 00 
205e8     00 00 00 00 
205ec     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
205f0     00 00 00 00 
205f4     00 00 00 00 
205f8     00 00 00 00 | 	byte	$00[12]
205fc     05 00 00 00 
20600     00 00 00 00 
20604     00 00 00 00 
20608     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2060c     D4 07 02 00 | 	long	@@@__system__dat_ + 508
20610     DC 07 02 00 | 	long	@@@__system__dat_ + 516
20614     00 00 00 00 | 	byte	$00, $00, $00, $00
20618     E4 07 02 00 | 	long	@@@__system__dat_ + 524
2061c     EC 07 02 00 | 	long	@@@__system__dat_ + 532
20620     00 00 00 00 
20624     00 00 00 00 | 	byte	$00[8]
20628     01 00 00 00 
2062c     06 00 00 00 
20630     00 00 00 00 
20634     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
20638     00 00 00 00 | 	byte	$00, $00, $00, $00
2063c     F4 07 02 00 | 	long	@@@__system__dat_ + 540
20640     FC 07 02 00 | 	long	@@@__system__dat_ + 548
20644     00 00 00 00 | 	byte	$00, $00, $00, $00
20648     04 08 02 00 | 	long	@@@__system__dat_ + 556
2064c     0C 08 02 00 | 	long	@@@__system__dat_ + 564
20650     00 00 00 00 
20654     00 00 00 00 | 	byte	$00[8]
20658     01 00 00 00 
2065c     06 00 00 00 
20660     00 00 00 00 
20664     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
20668     00 00 00 00 | 	byte	$00, $00, $00, $00
2066c     14 08 02 00 | 	long	@@@__system__dat_ + 572
20670     1C 08 02 00 | 	long	@@@__system__dat_ + 580
20674     00 00 00 00 | 	byte	$00, $00, $00, $00
20678     24 08 02 00 | 	long	@@@__system__dat_ + 588
2067c     2C 08 02 00 | 	long	@@@__system__dat_ + 596
20680     00 00 00 00 
      ...             
207d0     00 00 00 00 
207d4     00 00 00 00 | 	byte	$00[344]
207d8     D8 5F 00 00 | 	long	@@@__system___tx
207dc     00 00 00 00 | 	byte	$00, $00, $00, $00
207e0     20 60 00 00 | 	long	@@@__system___rx
207e4     00 00 00 00 | 	byte	$00, $00, $00, $00
207e8     08 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
207ec     00 00 00 00 | 	byte	$00, $00, $00, $00
207f0     80 7A 00 00 | 	long	@@@__system____dummy_flush_0175
207f4     00 00 00 00 | 	byte	$00, $00, $00, $00
207f8     D8 5F 00 00 | 	long	@@@__system___tx
207fc     00 00 00 00 | 	byte	$00, $00, $00, $00
20800     20 60 00 00 | 	long	@@@__system___rx
20804     00 00 00 00 | 	byte	$00, $00, $00, $00
20808     08 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
2080c     00 00 00 00 | 	byte	$00, $00, $00, $00
20810     80 7A 00 00 | 	long	@@@__system____dummy_flush_0175
20814     00 00 00 00 | 	byte	$00, $00, $00, $00
20818     D8 5F 00 00 | 	long	@@@__system___tx
2081c     00 00 00 00 | 	byte	$00, $00, $00, $00
20820     20 60 00 00 | 	long	@@@__system___rx
20824     00 00 00 00 | 	byte	$00, $00, $00, $00
20828     08 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
2082c     00 00 00 00 | 	byte	$00, $00, $00, $00
20830     80 7A 00 00 | 	long	@@@__system____dummy_flush_0175
20834     00 00 00 00 | 	byte	$00, $00, $00, $00
20838                 | __heap_base
20838     00 00 00 00 
      ...             
21838     00 00 00 00 
2183c     00 00 00 00 | 	long	0[1026]
21840                 | objmem
21840     00 00 00 00 | 	long	0[1]
21844 118             | 	org	COG_BSS_START
21844 118             | _var01
21844 118             | 	res	1
21844 119             | _var02
21844 119             | 	res	1
21844 11a             | _var03
21844 11a             | 	res	1
21844 11b             | _var04
21844 11b             | 	res	1
21844 11c             | _var05
21844 11c             | 	res	1
21844 11d             | _var06
21844 11d             | 	res	1
21844 11e             | _var07
21844 11e             | 	res	1
21844 11f             | _var08
21844 11f             | 	res	1
21844 120             | _var09
21844 120             | 	res	1
21844 121             | _var10
21844 121             | 	res	1
21844 122             | _var11
21844 122             | 	res	1
21844 123             | _var12
21844 123             | 	res	1
21844 124             | _var13
21844 124             | 	res	1
21844 125             | _var14
21844 125             | 	res	1
21844 126             | _var15
21844 126             | 	res	1
21844 127             | _var16
21844 127             | 	res	1
21844 128             | _var17
21844 128             | 	res	1
21844 129             | _var18
21844 129             | 	res	1
21844 12a             | _var19
21844 12a             | 	res	1
21844 12b             | _var20
21844 12b             | 	res	1
21844 12c             | _var21
21844 12c             | 	res	1
21844 12d             | _var22
21844 12d             | 	res	1
21844 12e             | arg01
21844 12e             | 	res	1
21844 12f             | arg02
21844 12f             | 	res	1
21844 130             | arg03
21844 130             | 	res	1
21844 131             | arg04
21844 131             | 	res	1
21844 132             | arg05
21844 132             | 	res	1
21844 133             | arg06
21844 133             | 	res	1
21844 134             | arg07
21844 134             | 	res	1
21844 135             | local01
21844 135             | 	res	1
21844 136             | local02
21844 136             | 	res	1
21844 137             | local03
21844 137             | 	res	1
21844 138             | local04
21844 138             | 	res	1
21844 139             | local05
21844 139             | 	res	1
21844 13a             | local06
21844 13a             | 	res	1
21844 13b             | local07
21844 13b             | 	res	1
21844 13c             | local08
21844 13c             | 	res	1
21844 13d             | local09
21844 13d             | 	res	1
21844 13e             | local10
21844 13e             | 	res	1
21844 13f             | local11
21844 13f             | 	res	1
21844 140             | local12
21844 140             | 	res	1
21844 141             | local13
21844 141             | 	res	1
21844 142             | local14
21844 142             | 	res	1
21844 143             | local15
21844 143             | 	res	1
21844 144             | local16
21844 144             | 	res	1
21844 145             | local17
21844 145             | 	res	1
21844 146             | local18
21844 146             | 	res	1
21844 147             | local19
21844 147             | 	res	1
21844 148             | local20
21844 148             | 	res	1
21844 149             | local21
21844 149             | 	res	1
21844 14a             | local22
21844 14a             | 	res	1
21844 14b             | local23
21844 14b             | 	res	1
21844 14c             | local24
21844 14c             | 	res	1
21844 14d             | local25
21844 14d             | 	res	1
21844 14e             | local26
21844 14e             | 	res	1
21844 14f             | local27
21844 14f             | 	res	1
21844 150             | local28
21844 150             | 	res	1
21844 151             | local29
21844 151             | 	res	1
21844 152             | local30
21844 152             | 	res	1
21844 153             | local31
21844 153             | 	res	1
21844 154             | local32
21844 154             | 	res	1
21844 155             | local33
21844 155             | 	res	1
21844 156             | local34
21844 156             | 	res	1
21844 157             | local35
21844 157             | 	res	1
21844 158             | local36
21844 158             | 	res	1
21844 159             | local37
21844 159             | 	res	1
21844 15a             | local38
21844 15a             | 	res	1
21844 15b             | local39
21844 15b             | 	res	1
21844 15c             | local40
21844 15c             | 	res	1
21844 15d             | local41
21844 15d             | 	res	1
21844 15e             | local42
21844 15e             | 	res	1
21844 15f             | local43
21844 15f             | 	res	1
21844 160             | local44
21844 160             | 	res	1
21844 161             | local45
21844 161             | 	res	1
21844 162             | local46
21844 162             | 	res	1
21844 163             | local47
21844 163             | 	res	1
21844 164             | local48
21844 164             | 	res	1
21844 165             | local49
21844 165             | 	res	1
21844 166             | local50
21844 166             | 	res	1
21844 167             | local51
21844 167             | 	res	1
21844 168             | local52
21844 168             | 	res	1
21844 169             | local53
21844 169             | 	res	1
21844 16a             | local54
21844 16a             | 	res	1
21844 16b             | local55
21844 16b             | 	res	1
21844 16c             | local56
21844 16c             | 	res	1
21844 16d             | local57
21844 16d             | 	res	1
21844 16e             | local58
21844 16e             | 	res	1
21844 16f             | local59
21844 16f             | 	res	1
21844 170             | local60
21844 170             | 	res	1
21844 171             | local61
21844 171             | 	res	1
21844 172             | local62
21844 172             | 	res	1
21844 173             | local63
21844 173             | 	res	1
21844 174             | local64
21844 174             | 	res	1
21844 175             | local65
21844 175             | 	res	1
21844 176             | local66
21844 176             | 	res	1
21844 177             | local67
21844 177             | 	res	1
21844 178             | local68
21844 178             | 	res	1
21844 179             | local69
21844 179             | 	res	1
21844 17a             | local70
21844 17a             | 	res	1
21844 17b             | local71
21844 17b             | 	res	1
21844 17c             | local72
21844 17c             | 	res	1
21844 17d             | local73
21844 17d             | 	res	1
21844 17e             | local74
21844 17e             | 	res	1
21844 17f             | local75
21844 17f             | 	res	1
21844 180             | local76
21844 180             | 	res	1
21844 181             | local77
21844 181             | 	res	1
21844 182             | local78
21844 182             | 	res	1
21844 183             | local79
21844 183             | 	res	1
21844 184             | local80
21844 184             | 	res	1
21844 185             | muldiva_
21844 185             | 	res	1
21844 186             | muldivb_
21844 186             | 	res	1
21844 187             | 	fit	480
21844 187             | 
