00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/testrpi.p2asm"
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' '_clkfreq        = 354_689_500   '200x Atari 8-bit PAL,  50x Amiga PAL
00000                 | ' '_clkfreq       = 357_954_500   '200x Atari 8-bit NTSC, 50x Amiga NTSC
00000                 | ' _clkfreq		= 320_000_000    'will be set via video driver
00000                 | 	_clkfreq = 320000000
00000                 | ' rxpin           = 32
00000                 | 	rxpin = 32
00000                 | ' txpin           = 33
00000                 | 	txpin = 33
00000                 | ' baudrate        = 1920000
00000                 | 	baudrate = 1920000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 CC 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DE F0 03 F6 | 	mov	ptra, objptr
00410 003 01 00 00 FF 
00414 004 20 F1 07 F1 | 	add	ptra, ##800
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 07 80 80 FF 
00428 009 00 F0 67 FD | 	hubset	##16781304
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 07 80 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##16781307
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 68 89 89 FF 
00448 011 14 00 6C FC | 	wrlong	##320000000, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 A4 07 A0 FD | 	call	#_start
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 F0 61 FD | 	cogid	arg01
00614 084 03 F0 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 BD 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 CD 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 F1 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 F3 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 F5 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 F7 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D CC 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 F4 55 F0 |         shr	arg03, #1 wc
00688 0a1 F8 F2 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 F0 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 F2 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 F4 55 F0 |         shr	arg03, #1 wc
00698 0a5 F8 F2 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 F0 05 C1 |  if_c   add	arg01, #2
006a0 0a7 F9 F2 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 F8 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 F4 0D F2 |         cmp	arg03, #0 wz
006ac 0aa FA 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 F2 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 F9 65 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 F9 05 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 4D 99 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 9A 62 FD |        getqx   muldivb_
00740 0cf 19 98 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 BA 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 BA 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 BA D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 BA D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | __heap_ptr
0076c 0da 54 5D 00 00 | 	long	@__heap_base
00770 0db             | entryptr__
00770 0db 04 04 00 00 | 	long	@entry
00774 0dc             | itmp1_
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | itmp2_
00778 0dd 00 00 00 00 | 	long	0
0077c 0de             | objptr
0077c 0de 5C 6D 00 00 | 	long	@objmem
00780 0df             | ptr___system__dat__
00780 0df 3C 5D 00 00 | 	long	@__system__dat_
00784 0e0             | ptr__hng030rm_dat__
00784 0e0 D8 38 00 00 | 	long	@_hng030rm_dat_
00788 0e1             | ptr__hng030rm_putpixel1_
00788 0e1 38 18 00 00 | 	long	@_hng030rm_putpixel1
0078c 0e2             | ptr__hng030rm_putpixel2_
0078c 0e2 20 19 00 00 | 	long	@_hng030rm_putpixel2
00790 0e3             | ptr__hng030rm_putpixel4_
00790 0e3 F8 19 00 00 | 	long	@_hng030rm_putpixel4
00794 0e4             | ptr__hng030rm_putpixel8_
00794 0e4 D0 1A 00 00 | 	long	@_hng030rm_putpixel8
00798 0e5             | ptr__serialcog_
00798 0e5 A4 15 00 00 | 	long	@_serialcog
0079c 0e6             | result1
0079c 0e6 00 00 00 00 | 	long	0
007a0 0e7             | result2
007a0 0e7 00 00 00 00 | 	long	0
007a4 0e8             | COG_BSS_START
007a4 0e8             | 	fit	480
007a4                 | 	orgh
007a4                 | hubentry
007a4                 | 
007a4                 | ' 
007a4                 | ' pub start(mode)   |iii,caps
007a4                 | _start
007a4     24 5A 05 F6 | 	mov	COUNT_, #36
007a8     B0 00 A0 FD | 	call	#pushregs_
007ac                 | ' 
007ac                 | ' mode :=64+6
007ac     46 F8 05 F6 | 	mov	local01, #70
007b0                 | ' caps:=0
007b0     00 FA 05 F6 | 	mov	local02, #0
007b4                 | ' pinl(31)
007b4     58 3E 64 FD | 	drvl	#31
007b8                 | ' waitms(100)
007b8     64 F0 05 F6 | 	mov	arg01, #100
007bc     74 26 B0 FD | 	call	#__system___waitms
007c0                 | ' iii:=0
007c0                 | ' vgacog:=v.start(mode,hdmi_base)
007c0     46 FC 05 F6 | 	mov	local03, #70
007c4     01 00 00 FF 
007c8     60 BC 05 F1 | 	add	objptr, ##608
007cc     DE FE 01 F6 | 	mov	local04, objptr
007d0                 | ' 
007d0                 | ' ' initialize pointers and variables
007d0                 | ' 
007d0                 | ' border_ptr:=@bordercolor
007d0     24 BC 85 F1 | 	sub	objptr, #36
007d4     DE FE 61 FC | 	wrlong	local04, objptr
007d8     08 00 00 FF 
007dc     00 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##4096
007e0                 | ' font_ptr:=@st_font
007e0     04 BC 85 F1 | 	sub	objptr, #4
007e4     DE C0 61 FC | 	wrlong	ptr__hng030rm_dat__, objptr
007e8                 | ' hdmibase:=base
007e8     20 BC 05 F1 | 	add	objptr, #32
007ec     DE 00 68 FC | 	wrlong	#0, objptr
007f0     24 BC 85 F1 | 	sub	objptr, #36
007f4     E1 F2 01 F6 | 	mov	arg02, ptr__hng030rm_putpixel1_
007f8                 | ' p1:=@putpixel1
007f8     DE F0 01 F6 | 	mov	arg01, objptr
007fc     08 00 00 FF 
00800     00 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##4096
00804     4C 25 B0 FD | 	call	#__system___make_methodptr
00808     E6 00 02 F6 | 	mov	local05, result1
0080c     DC BC 05 F1 | 	add	objptr, #220
00810     DE 00 62 FC | 	wrlong	local05, objptr
00814     DC BC 85 F1 | 	sub	objptr, #220
00818     E2 F2 01 F6 | 	mov	arg02, ptr__hng030rm_putpixel2_
0081c                 | ' p2:=@putpixel2
0081c     DE F0 01 F6 | 	mov	arg01, objptr
00820     30 25 B0 FD | 	call	#__system___make_methodptr
00824     E6 00 02 F6 | 	mov	local05, result1
00828     E0 BC 05 F1 | 	add	objptr, #224
0082c     DE 00 62 FC | 	wrlong	local05, objptr
00830     E0 BC 85 F1 | 	sub	objptr, #224
00834     E3 F2 01 F6 | 	mov	arg02, ptr__hng030rm_putpixel4_
00838                 | ' p4:=@putpixel4
00838     DE F0 01 F6 | 	mov	arg01, objptr
0083c     14 25 B0 FD | 	call	#__system___make_methodptr
00840     E6 00 02 F6 | 	mov	local05, result1
00844     E4 BC 05 F1 | 	add	objptr, #228
00848     DE 00 62 FC | 	wrlong	local05, objptr
0084c     E4 BC 85 F1 | 	sub	objptr, #228
00850     E4 F2 01 F6 | 	mov	arg02, ptr__hng030rm_putpixel8_
00854                 | ' p8:=@putpixel8
00854     DE F0 01 F6 | 	mov	arg01, objptr
00858     F8 24 B0 FD | 	call	#__system___make_methodptr
0085c     E6 00 02 F6 | 	mov	local05, result1
00860     E8 BC 05 F1 | 	add	objptr, #232
00864     DE 00 62 FC | 	wrlong	local05, objptr
00868     E8 BC 85 F1 | 	sub	objptr, #232
0086c                 | ' 
0086c                 | ' 
0086c                 | ' ' the mode has to be set here to enable computing the buffer length
0086c                 | ' 
0086c                 | ' setmode(mode)
0086c     46 F0 05 F6 | 	mov	arg01, #70
00870     E8 18 B0 FD | 	call	#_hng030rm_setmode
00874     40 BC 05 F1 | 	add	objptr, #64
00878     DE 02 02 F6 | 	mov	local06, objptr
0087c                 | ' 
0087c                 | ' vblank_ptr:=@vblank
0087c     34 BC 85 F1 | 	sub	objptr, #52
00880     DE 02 62 FC | 	wrlong	local06, objptr
00884     28 BC 05 F1 | 	add	objptr, #40
00888     DE 04 02 F6 | 	mov	local07, objptr
0088c                 | ' cursor_ptr:=@cursor_x
0088c     24 BC 85 F1 | 	sub	objptr, #36
00890     DE 04 62 FC | 	wrlong	local07, objptr
00894     88 BC 05 F1 | 	add	objptr, #136
00898     DE 06 02 F6 | 	mov	local08, objptr
0089c                 | ' 
0089c                 | ' fontnum_ptr:=@fontnum
0089c     78 BC 85 F1 | 	sub	objptr, #120
008a0     DE 06 62 FC | 	wrlong	local08, objptr
008a4                 | ' 
008a4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
008a4     78 BC 05 F1 | 	add	objptr, #120
008a8     DE 00 68 FC | 	wrlong	#0, objptr
008ac     1C BC 05 F1 | 	add	objptr, #28
008b0     DE F0 01 F6 | 	mov	arg01, objptr
008b4     B4 BC 85 F1 | 	sub	objptr, #180
008b8     0F 00 00 FF 
008bc     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7768
008c0     E0 F2 01 F6 | 	mov	arg02, ptr__hng030rm_dat__
008c4     0F 00 00 FF 
008c8     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7768
008cc                 | ' bytemove(@colors,@vgacolors,16)
008cc     10 F4 05 F6 | 	mov	arg03, #16
008d0     58 23 B0 FD | 	call	#__system____builtin_memmove
008d4                 | ' 
008d4                 | ' ' initialize a cursor
008d4                 | ' 
008d4                 | ' cursor_x:=0
008d4     34 BC 05 F1 | 	add	objptr, #52
008d8     DE 00 48 FC | 	wrbyte	#0, objptr
008dc                 | ' cursor_y:=0
008dc     01 BC 05 F1 | 	add	objptr, #1
008e0     DE 00 48 FC | 	wrbyte	#0, objptr
008e4                 | ' cursor_sh:=14
008e4     01 BC 05 F1 | 	add	objptr, #1
008e8     DE 1C 48 FC | 	wrbyte	#14, objptr
008ec     36 BC 85 F1 | 	sub	objptr, #54
008f0                 | ' 
008f0                 | ' 
008f0                 | ' ' start the cog
008f0                 | ' 
008f0                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
008f0     0F 00 00 FF 
008f4     68 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7784
008f8     E0 F2 01 F6 | 	mov	arg02, ptr__hng030rm_dat__
008fc     0F 00 00 FF 
00900     68 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7784
00904     DE F4 01 F6 | 	mov	arg03, objptr
00908     10 F0 05 F6 | 	mov	arg01, #16
0090c     28 F4 61 FD | 	setq	arg03
00910     F9 F0 F1 FC | 	coginit	arg01, arg02 wc
00914     01 F0 65 C6 |  if_b	neg	arg01, #1
00918     F8 CC 01 F6 | 	mov	result1, arg01
0091c     E6 08 02 F6 | 	mov	local09, result1
00920     28 BC 05 F1 | 	add	objptr, #40
00924     DE 08 62 FC | 	wrlong	local09, objptr
00928     28 BC 85 F1 | 	sub	objptr, #40
0092c                 | ' waitms(20)
0092c     14 F0 05 F6 | 	mov	arg01, #20
00930     00 25 B0 FD | 	call	#__system___waitms
00934                 | ' 
00934                 | ' ' clear the screen and set the colors to green on black
00934                 | ' 
00934                 | ' cls(c_green,c_black)
00934     C7 F0 05 F6 | 	mov	arg01, #199
00938     00 F2 05 F6 | 	mov	arg02, #0
0093c     38 12 B0 FD | 	call	#_hng030rm_cls
00940                 | ' setbordercolor(0,0,128)
00940     00 F0 05 F6 | 	mov	arg01, #0
00944     00 F2 05 F6 | 	mov	arg02, #0
00948     80 F4 05 F6 | 	mov	arg03, #128
0094c     04 12 B0 FD | 	call	#_hng030rm_setbordercolor
00950                 | ' setwritecolors(c_green,c_black)
00950                 | ' 
00950                 | ' 
00950                 | ' write_color:=ff
00950     38 BC 05 F1 | 	add	objptr, #56
00954     DE 8E 69 FC | 	wrlong	#199, objptr
00958                 | ' write_background:=bb
00958     04 BC 05 F1 | 	add	objptr, #4
0095c     DE 00 68 FC | 	wrlong	#0, objptr
00960                 | ' 
00960                 | ' return cog
00960     14 BC 85 F1 | 	sub	objptr, #20
00964     DE CC 01 FB | 	rdlong	result1, objptr
00968     01 00 00 FF 
0096c     5C BC 85 F1 | 	sub	objptr, ##604
00970     DE CC 61 FC | 	wrlong	result1, objptr
00974                 | ' 'v.setmode(mode+64)
00974                 | ' v.setfontfamily(0)
00974                 | ' 
00974                 | ' font_family:=afontnum
00974     01 00 00 FF 
00978     FC BC 05 F1 | 	add	objptr, ##764
0097c     DE 00 68 FC | 	wrlong	#0, objptr
00980     C8 BC 85 F1 | 	sub	objptr, #200
00984                 | ' v.cls(154,147)
00984     9A F0 05 F6 | 	mov	arg01, #154
00988     93 F2 05 F6 | 	mov	arg02, #147
0098c     E8 11 B0 FD | 	call	#_hng030rm_cls
00990                 | ' v.setbordercolor(0,0,0)
00990     00 F0 05 F6 | 	mov	arg01, #0
00994     00 F2 05 F6 | 	mov	arg02, #0
00998     00 F4 05 F6 | 	mov	arg03, #0
0099c     B4 11 B0 FD | 	call	#_hng030rm_setbordercolor
009a0     01 00 00 FF 
009a4     34 BC 85 F1 | 	sub	objptr, ##564
009a8                 | ' serial_start(rxpin, txpin, baudrate)
009a8     20 F0 05 F6 | 	mov	arg01, #32
009ac     21 F2 05 F6 | 	mov	arg02, #33
009b0     A6 0E 00 FF 
009b4     00 F4 05 F6 | 	mov	arg03, ##1920000
009b8     28 0D B0 FD | 	call	#_serial_start
009bc                 | ' midi_start(29,30)
009bc     1D F0 05 F6 | 	mov	arg01, #29
009c0     1E F2 05 F6 | 	mov	arg02, #30
009c4     A4 0D B0 FD | 	call	#_midi_start
009c8                 | ' pinwrite(14,0)
009c8     00 F2 05 F6 | 	mov	arg02, #0
009cc     01 F2 D5 F7 | 	test	arg02, #1 wc
009d0     5A 1C 64 FD | 	drvc	#14
009d4                 | ' pinwrite(15,0)
009d4     01 F2 D5 F7 | 	test	arg02, #1 wc
009d8     5A 1E 64 FD | 	drvc	#15
009dc                 | ' 
009dc                 | ' cogspin(16,serialcog(),@serialstack)
009dc     DE 0A 02 F6 | 	mov	local10, objptr
009e0     20 BD 05 F1 | 	add	objptr, #288
009e4     DE 0C 02 F6 | 	mov	local11, objptr
009e8     06 0B 62 FC | 	wrlong	local10, local11
009ec     04 0C 06 F1 | 	add	local11, #4
009f0     06 CB 61 FC | 	wrlong	ptr__serialcog_, local11
009f4     DB 0E 02 F6 | 	mov	local12, entryptr__
009f8     DE 10 02 F6 | 	mov	local13, objptr
009fc     08 13 02 F6 | 	mov	local14, local13
00a00     10 F0 05 F6 | 	mov	arg01, #16
00a04     09 F5 01 F6 | 	mov	arg03, local14
00a08     28 F4 61 FD | 	setq	arg03
00a0c     07 F1 F1 FC | 	coginit	arg01, local12 wc
00a10     01 F0 65 C6 |  if_b	neg	arg01, #1
00a14     F8 CC 01 F6 | 	mov	result1, arg01
00a18     E6 14 02 F6 | 	mov	local15, result1
00a1c                 | ' v.setcursorshape(0)
00a1c                 | ' 
00a1c                 | ' ''---------- Define a cursor shape (0-full..15-line)
00a1c                 | ' 
00a1c                 | ' cursor_sh:=shape
00a1c     4A BD 05 F1 | 	add	objptr, #330
00a20     DE 00 48 FC | 	wrbyte	#0, objptr
00a24                 | ' v.setwritecolors(154,147)
00a24     93 F2 05 F6 | 	mov	arg02, #147
00a28                 | ' 
00a28                 | ' 
00a28                 | ' write_color:=ff
00a28     02 BC 05 F1 | 	add	objptr, #2
00a2c     DE 34 69 FC | 	wrlong	#154, objptr
00a30                 | ' write_background:=bb
00a30     04 BC 05 F1 | 	add	objptr, #4
00a34     DE 26 69 FC | 	wrlong	#147, objptr
00a38     3C BC 85 F1 | 	sub	objptr, #60
00a3c                 | ' v.writeln(string(" "))
00a3c     1B 00 00 FF 
00a40     AA F1 05 F6 | 	mov	arg01, ##@LR__0228
00a44     D0 14 B0 FD | 	call	#_hng030rm_writeln
00a48                 | ' v.writeln(string("  P2 Retromachine v. 0.00"))
00a48     1B 00 00 FF 
00a4c     AC F1 05 F6 | 	mov	arg01, ##@LR__0229
00a50     C4 14 B0 FD | 	call	#_hng030rm_writeln
00a54                 | ' v.writeln(string(" "))
00a54     1B 00 00 FF 
00a58     C6 F1 05 F6 | 	mov	arg01, ##@LR__0230
00a5c     B8 14 B0 FD | 	call	#_hng030rm_writeln
00a60                 | ' v.writeln(string("  Ready"))
00a60     1B 00 00 FF 
00a64     C8 F1 05 F6 | 	mov	arg01, ##@LR__0231
00a68     AC 14 B0 FD | 	call	#_hng030rm_writeln
00a6c                 | ' v.writeln(string(" "))
00a6c     1B 00 00 FF 
00a70     D0 F1 05 F6 | 	mov	arg01, ##@LR__0232
00a74     A0 14 B0 FD | 	call	#_hng030rm_writeln
00a78                 | ' v.write(string("  "))
00a78     1B 00 00 FF 
00a7c     D2 F1 05 F6 | 	mov	arg01, ##@LR__0233
00a80     E0 12 B0 FD | 	call	#_hng030rm_write
00a84     01 00 00 FF 
00a88     34 BC 85 F1 | 	sub	objptr, ##564
00a8c                 | ' 
00a8c                 | ' iii:=fileopen(string("C:\kernel.img"))
00a8c     1B 00 00 FF 
00a90     D5 F1 05 F6 | 	mov	arg01, ##@LR__0234
00a94                 | ' 
00a94                 | ' q:=strsize(filename)
00a94     F8 16 02 F6 | 	mov	local16, arg01
00a98     00 18 06 F6 | 	mov	local17, #0
00a9c     70 F5 9F FE | 	loc	pa,	#(@LR__0002-@LR__0001)
00aa0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00aa4                 | LR__0001
00aa4     F8 1A CA FA | 	rdbyte	local18, arg01 wz
00aa8     01 18 06 51 |  if_ne	add	local17, #1
00aac     01 F0 05 51 |  if_ne	add	arg01, #1
00ab0     F0 FF 9F 5D |  if_ne	jmp	#LR__0001
00ab4                 | LR__0002
00ab4     0C CD 01 F6 | 	mov	result1, local17
00ab8     E6 1C 02 F6 | 	mov	local19, result1
00abc                 | ' tx($40)
00abc     40 F0 05 F6 | 	mov	arg01, #64
00ac0     34 0D B0 FD | 	call	#_tx
00ac4                 | ' repeat i from 0 to q-1
00ac4     00 1E 06 F6 | 	mov	local20, #0
00ac8     0E 21 02 F6 | 	mov	local21, local19
00acc     01 20 86 F1 | 	sub	local21, #1
00ad0     00 20 5E F2 | 	cmps	local21, #0 wcz
00ad4     01 22 06 16 |  if_a	mov	local22, #1
00ad8     01 22 66 E6 |  if_be	neg	local22, #1
00adc     11 21 02 F1 | 	add	local21, local22
00ae0                 | LR__0003
00ae0     0B 25 02 F6 | 	mov	local23, local16
00ae4     0F 25 02 F1 | 	add	local23, local20
00ae8                 | '   tx(byte[filename+i])
00ae8     12 F1 C1 FA | 	rdbyte	arg01, local23
00aec     08 0D B0 FD | 	call	#_tx
00af0     11 1F 02 F1 | 	add	local20, local22
00af4     10 1F 0A F2 | 	cmp	local20, local21 wz
00af8     E4 FF 9F 5D |  if_ne	jmp	#LR__0003
00afc                 | ' tx(255)
00afc     FF F0 05 F6 | 	mov	arg01, #255
00b00     F4 0C B0 FD | 	call	#_tx
00b04                 | ' return q
00b04     0E CD 01 F6 | 	mov	result1, local19
00b08     E6 26 02 F6 | 	mov	local24, result1
00b0c     13 29 02 F6 | 	mov	local25, local24
00b10                 | ' 
00b10                 | ' repeat
00b10                 | LR__0004
00b10                 | '  
00b10                 | '   repeat 
00b10                 | LR__0005
00b10                 | '     rr:=serialread()
00b10     6C 0B B0 FD | 	call	#_serialread
00b14     E6 0A 02 F6 | 	mov	local10, result1
00b18     01 00 00 FF 
00b1c     20 BC 05 F1 | 	add	objptr, ##544
00b20     DE 0A 62 FC | 	wrlong	local10, objptr
00b24                 | '     mrr:=mrxcheck()
00b24                 | ' 
00b24                 | ' '' Check for serial input
00b24                 | ' '' -- returns -1 if nothing available
00b24                 | ' 
00b24                 | '   rxbyte := -1
00b24     01 2A 66 F6 | 	neg	local26, #1
00b28                 | '   check := pinr(mrxp)
00b28     01 00 00 FF 
00b2c     10 BC 85 F1 | 	sub	objptr, ##528
00b30     DE F0 01 FB | 	rdlong	arg01, objptr
00b34     10 BC 85 F1 | 	sub	objptr, #16
00b38     D8 22 B0 FD | 	call	#__system___pinread
00b3c     E6 2C 0A F6 | 	mov	local27, result1 wz
00b40                 | '   if (check)
00b40     18 00 90 AD |  if_e	jmp	#LR__0006
00b44                 | '     rxbyte := rdpin(mrxp) >> 24
00b44     10 BC 05 F1 | 	add	objptr, #16
00b48     DE F0 01 FB | 	rdlong	arg01, objptr
00b4c     10 BC 85 F1 | 	sub	objptr, #16
00b50     00 2A 06 F6 | 	mov	local26, #0
00b54     F8 2A 8A FA | 	rdpin	local26, arg01
00b58     18 2A 46 F0 | 	shr	local26, #24
00b5c                 | LR__0006
00b5c     15 CD 01 F6 | 	mov	result1, local26
00b60     01 00 00 FF 
00b64     24 BC 05 F1 | 	add	objptr, ##548
00b68     DE CC 61 FC | 	wrlong	result1, objptr
00b6c     04 BC 85 F1 | 	sub	objptr, #4
00b70     DE 0C 02 FB | 	rdlong	local11, objptr
00b74     01 00 00 FF 
00b78     20 BC 85 F1 | 	sub	objptr, ##544
00b7c     00 0C 5E F2 | 	cmps	local11, #0 wcz
00b80     20 00 90 3D |  if_ae	jmp	#LR__0007
00b84     01 00 00 FF 
00b88     24 BC 05 F1 | 	add	objptr, ##548
00b8c     DE 0E 02 FB | 	rdlong	local12, objptr
00b90     01 00 00 FF 
00b94     24 BC 85 F1 | 	sub	objptr, ##548
00b98     07 27 02 F6 | 	mov	local24, local12
00b9c     00 26 5E F2 | 	cmps	local24, #0 wcz
00ba0     6C FF 9F CD |  if_b	jmp	#LR__0005
00ba4                 | LR__0007
00ba4                 | '  '   debug(udec(mrr))
00ba4                 | '   until rr>=0 || mrr>=0  
00ba4                 | '     
00ba4                 | ' '  rr:=serialblockingread()
00ba4                 | ' 
00ba4                 | ' {{
00ba4                 | ' }}   
00ba4                 | '   if mrr>=0
00ba4     01 00 00 FF 
00ba8     24 BC 05 F1 | 	add	objptr, ##548
00bac     DE 0A 02 FB | 	rdlong	local10, objptr
00bb0     01 00 00 FF 
00bb4     24 BC 85 F1 | 	sub	objptr, ##548
00bb8     00 0A 5E F2 | 	cmps	local10, #0 wcz
00bbc     D4 00 90 CD |  if_b	jmp	#LR__0013
00bc0                 | '     v.write(string(" Midi: "))
00bc0     1B 00 00 FF 
00bc4     E3 F1 05 F6 | 	mov	arg01, ##@LR__0235
00bc8     01 00 00 FF 
00bcc     34 BC 05 F1 | 	add	objptr, ##564
00bd0     90 11 B0 FD | 	call	#_hng030rm_write
00bd4                 | '     v.writeln(v.inttohex(mrr,2))
00bd4     10 BC 85 F1 | 	sub	objptr, #16
00bd8     DE F0 01 FB | 	rdlong	arg01, objptr
00bdc     02 26 06 F6 | 	mov	local24, #2
00be0     02 F2 05 F6 | 	mov	arg02, #2
00be4                 | ' 
00be4                 | ' j:=i
00be4                 | ' pos:=d-1
00be4     01 2E 06 F6 | 	mov	local28, #1
00be8                 | ' k:=0
00be8     54 BC 05 F1 | 	add	objptr, #84
00bec     DE F2 01 F1 | 	add	arg02, objptr
00bf0                 | ' n_string[d]:=0
00bf0     F9 00 48 FC | 	wrbyte	#0, arg02
00bf4                 | ' repeat k from 0 to d-1
00bf4     00 30 06 F6 | 	mov	local29, #0
00bf8     44 BC 85 F1 | 	sub	objptr, #68
00bfc     01 1A 06 F6 | 	mov	local18, #1
00c00     02 32 06 F6 | 	mov	local30, #2
00c04     18 F4 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00c08     93 00 A0 FD | 	call	#FCACHE_LOAD_
00c0c                 | LR__0008
00c0c     18 35 02 F6 | 	mov	local31, local29
00c10     44 BC 05 F1 | 	add	objptr, #68
00c14     DE 34 02 F1 | 	add	local31, objptr
00c18                 | '   n_string[k]:=48
00c18     1A 61 48 FC | 	wrbyte	#48, local31
00c1c     01 30 06 F1 | 	add	local29, #1
00c20     02 30 0E F2 | 	cmp	local29, #2 wz
00c24     44 BC 85 F1 | 	sub	objptr, #68
00c28     E0 FF 9F 5D |  if_ne	jmp	#LR__0008
00c2c                 | LR__0009
00c2c                 | ' if (j<>0)
00c2c     00 F0 0D F2 | 	cmp	arg01, #0 wz
00c30     40 00 90 AD |  if_e	jmp	#LR__0012
00c34                 | ' 
00c34                 | '   repeat while (pos>-1)
00c34                 | LR__0010
00c34     FF FF 7F FF 
00c38     FF 2F 5E F2 | 	cmps	local28, ##-1 wcz
00c3c     34 00 90 ED |  if_be	jmp	#LR__0011
00c40     F8 36 02 F6 | 	mov	local32, arg01
00c44     0F 36 06 F5 | 	and	local32, #15
00c48                 | '     q:=j+//16
00c48                 | '     if (q>9)
00c48     09 36 5E F2 | 	cmps	local32, #9 wcz
00c4c                 | '       q:=q+7
00c4c     07 36 06 11 |  if_a	add	local32, #7
00c50                 | '     q:=48+q
00c50     30 36 06 F1 | 	add	local32, #48
00c54     17 39 02 F6 | 	mov	local33, local28
00c58     44 BC 05 F1 | 	add	objptr, #68
00c5c     DE 38 02 F1 | 	add	local33, objptr
00c60                 | '     n_string[pos]:=q
00c60     1C 37 42 FC | 	wrbyte	local32, local33
00c64                 | '     j:=j+/16
00c64     04 F0 45 F0 | 	shr	arg01, #4
00c68                 | '     pos-=1
00c68     01 2E 86 F1 | 	sub	local28, #1
00c6c     44 BC 85 F1 | 	sub	objptr, #68
00c70     C0 FF 9F FD | 	jmp	#LR__0010
00c74                 | LR__0011
00c74                 | LR__0012
00c74     44 BC 05 F1 | 	add	objptr, #68
00c78     DE CC 01 F6 | 	mov	result1, objptr
00c7c     44 BC 85 F1 | 	sub	objptr, #68
00c80                 | ' 
00c80                 | ' q:=@n_string
00c80                 | ' return q
00c80     E6 0E 02 F6 | 	mov	local12, result1
00c84     07 F1 01 F6 | 	mov	arg01, local12
00c88     8C 12 B0 FD | 	call	#_hng030rm_writeln
00c8c     01 00 00 FF 
00c90     34 BC 85 F1 | 	sub	objptr, ##564
00c94                 | LR__0013
00c94                 | '     
00c94                 | '  
00c94                 | '   if rr==$31    'mousex
00c94     01 00 00 FF 
00c98     20 BC 05 F1 | 	add	objptr, ##544
00c9c     DE 0A 02 FB | 	rdlong	local10, objptr
00ca0     01 00 00 FF 
00ca4     20 BC 85 F1 | 	sub	objptr, ##544
00ca8     31 0A 0E F2 | 	cmp	local10, #49 wz
00cac     04 01 90 5D |  if_ne	jmp	#LR__0018
00cb0                 | '     mousex:=serialblockingread()
00cb0                 | ' 
00cb0                 | ' repeat
00cb0                 | LR__0014
00cb0                 | '   r:=serialread()
00cb0     CC 09 B0 FD | 	call	#_serialread
00cb4     E6 3A 02 F6 | 	mov	local34, result1
00cb8     FF FF 7F FF 
00cbc     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00cc0     EC FF 9F AD |  if_e	jmp	#LR__0014
00cc4                 | ' until r<>-1
00cc4                 | ' return r
00cc4     1D CD 01 F6 | 	mov	result1, local34
00cc8     E6 0A 02 F6 | 	mov	local10, result1
00ccc     01 00 00 FF 
00cd0     2C BC 05 F1 | 	add	objptr, ##556
00cd4     DE 0A 52 FC | 	wrword	local10, objptr
00cd8     01 00 00 FF 
00cdc     2C BC 85 F1 | 	sub	objptr, ##556
00ce0                 | '     mousex+=serialblockingread()<<8
00ce0                 | ' 
00ce0                 | ' repeat
00ce0                 | LR__0015
00ce0                 | '   r:=serialread()
00ce0     9C 09 B0 FD | 	call	#_serialread
00ce4     E6 3A 02 F6 | 	mov	local34, result1
00ce8     FF FF 7F FF 
00cec     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00cf0     EC FF 9F AD |  if_e	jmp	#LR__0015
00cf4                 | ' until r<>-1
00cf4                 | ' return r
00cf4     1D CD 01 F6 | 	mov	result1, local34
00cf8     E6 3C 02 F6 | 	mov	local35, result1
00cfc     08 3C 66 F0 | 	shl	local35, #8
00d00     01 00 00 FF 
00d04     2C BC 05 F1 | 	add	objptr, ##556
00d08     DE 0E E2 FA | 	rdword	local12, objptr
00d0c     07 27 02 F6 | 	mov	local24, local12
00d10     1E 27 02 F1 | 	add	local24, local35
00d14     DE 26 52 FC | 	wrword	local24, objptr
00d18     01 00 00 FF 
00d1c     2C BC 85 F1 | 	sub	objptr, ##556
00d20                 | '     rr:=serialblockingread()
00d20                 | ' 
00d20                 | ' repeat
00d20                 | LR__0016
00d20                 | '   r:=serialread()
00d20     5C 09 B0 FD | 	call	#_serialread
00d24     E6 3A 02 F6 | 	mov	local34, result1
00d28     FF FF 7F FF 
00d2c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00d30     EC FF 9F AD |  if_e	jmp	#LR__0016
00d34                 | ' until r<>-1
00d34                 | ' return r
00d34     1D CD 01 F6 | 	mov	result1, local34
00d38     01 00 00 FF 
00d3c     20 BC 05 F1 | 	add	objptr, ##544
00d40     DE CC 61 FC | 	wrlong	result1, objptr
00d44                 | '     if rr==255
00d44     E6 0A 02 F6 | 	mov	local10, result1
00d48     01 00 00 FF 
00d4c     20 BC 85 F1 | 	sub	objptr, ##544
00d50     FF 0A 0E F2 | 	cmp	local10, #255 wz
00d54     5C 00 90 5D |  if_ne	jmp	#LR__0017
00d58                 | '      v.write(string("  Mouse moved, x= "))
00d58     1B 00 00 FF 
00d5c     EB F1 05 F6 | 	mov	arg01, ##@LR__0236
00d60     01 00 00 FF 
00d64     34 BC 05 F1 | 	add	objptr, ##564
00d68     F8 0F B0 FD | 	call	#_hng030rm_write
00d6c                 | '      v.write(v.inttostr(mousex))
00d6c     08 BC 85 F1 | 	sub	objptr, #8
00d70     DE F0 E1 FA | 	rdword	arg01, objptr
00d74     08 BC 05 F1 | 	add	objptr, #8
00d78     D0 12 B0 FD | 	call	#_hng030rm_inttostr
00d7c     E6 F0 01 F6 | 	mov	arg01, result1
00d80     E0 0F B0 FD | 	call	#_hng030rm_write
00d84                 | '      v.write(string(", y= "))
00d84     1B 00 00 FF 
00d88     FE F1 05 F6 | 	mov	arg01, ##@LR__0237
00d8c     D4 0F B0 FD | 	call	#_hng030rm_write
00d90                 | '      v.writeln(v.inttostr(mousey))
00d90     06 BC 85 F1 | 	sub	objptr, #6
00d94     DE F0 E1 FA | 	rdword	arg01, objptr
00d98     06 BC 05 F1 | 	add	objptr, #6
00d9c     AC 12 B0 FD | 	call	#_hng030rm_inttostr
00da0     E6 26 02 F6 | 	mov	local24, result1
00da4     13 F1 01 F6 | 	mov	arg01, local24
00da8     6C 11 B0 FD | 	call	#_hng030rm_writeln
00dac     01 00 00 FF 
00db0     34 BC 85 F1 | 	sub	objptr, ##564
00db4                 | LR__0017
00db4                 | LR__0018
00db4                 | ' 
00db4                 | '   if rr==$32    'mousey
00db4     01 00 00 FF 
00db8     20 BC 05 F1 | 	add	objptr, ##544
00dbc     DE 0A 02 FB | 	rdlong	local10, objptr
00dc0     01 00 00 FF 
00dc4     20 BC 85 F1 | 	sub	objptr, ##544
00dc8     32 0A 0E F2 | 	cmp	local10, #50 wz
00dcc     04 01 90 5D |  if_ne	jmp	#LR__0023
00dd0                 | '     mousey:=serialblockingread()
00dd0                 | ' 
00dd0                 | ' repeat
00dd0                 | LR__0019
00dd0                 | '   r:=serialread()
00dd0     AC 08 B0 FD | 	call	#_serialread
00dd4     E6 3A 02 F6 | 	mov	local34, result1
00dd8     FF FF 7F FF 
00ddc     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00de0     EC FF 9F AD |  if_e	jmp	#LR__0019
00de4                 | ' until r<>-1
00de4                 | ' return r
00de4     1D CD 01 F6 | 	mov	result1, local34
00de8     E6 0A 02 F6 | 	mov	local10, result1
00dec     01 00 00 FF 
00df0     2E BC 05 F1 | 	add	objptr, ##558
00df4     DE 0A 52 FC | 	wrword	local10, objptr
00df8     01 00 00 FF 
00dfc     2E BC 85 F1 | 	sub	objptr, ##558
00e00                 | '     mousey+=serialblockingread()<<8
00e00                 | ' 
00e00                 | ' repeat
00e00                 | LR__0020
00e00                 | '   r:=serialread()
00e00     7C 08 B0 FD | 	call	#_serialread
00e04     E6 3A 02 F6 | 	mov	local34, result1
00e08     FF FF 7F FF 
00e0c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00e10     EC FF 9F AD |  if_e	jmp	#LR__0020
00e14                 | ' until r<>-1
00e14                 | ' return r
00e14     1D CD 01 F6 | 	mov	result1, local34
00e18     E6 3E 02 F6 | 	mov	local36, result1
00e1c     08 3E 66 F0 | 	shl	local36, #8
00e20     01 00 00 FF 
00e24     2E BC 05 F1 | 	add	objptr, ##558
00e28     DE 0E E2 FA | 	rdword	local12, objptr
00e2c     07 27 02 F6 | 	mov	local24, local12
00e30     1F 27 02 F1 | 	add	local24, local36
00e34     DE 26 52 FC | 	wrword	local24, objptr
00e38     01 00 00 FF 
00e3c     2E BC 85 F1 | 	sub	objptr, ##558
00e40                 | '     rr:=serialblockingread()
00e40                 | ' 
00e40                 | ' repeat
00e40                 | LR__0021
00e40                 | '   r:=serialread()
00e40     3C 08 B0 FD | 	call	#_serialread
00e44     E6 3A 02 F6 | 	mov	local34, result1
00e48     FF FF 7F FF 
00e4c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00e50     EC FF 9F AD |  if_e	jmp	#LR__0021
00e54                 | ' until r<>-1
00e54                 | ' return r
00e54     1D CD 01 F6 | 	mov	result1, local34
00e58     01 00 00 FF 
00e5c     20 BC 05 F1 | 	add	objptr, ##544
00e60     DE CC 61 FC | 	wrlong	result1, objptr
00e64                 | '     if rr==255
00e64     E6 0A 02 F6 | 	mov	local10, result1
00e68     01 00 00 FF 
00e6c     20 BC 85 F1 | 	sub	objptr, ##544
00e70     FF 0A 0E F2 | 	cmp	local10, #255 wz
00e74     5C 00 90 5D |  if_ne	jmp	#LR__0022
00e78                 | '      v.write(string("  Mouse moved, x= "))
00e78     1C 00 00 FF 
00e7c     04 F0 05 F6 | 	mov	arg01, ##@LR__0238
00e80     01 00 00 FF 
00e84     34 BC 05 F1 | 	add	objptr, ##564
00e88     D8 0E B0 FD | 	call	#_hng030rm_write
00e8c                 | '      v.write(v.inttostr(mousex))
00e8c     08 BC 85 F1 | 	sub	objptr, #8
00e90     DE F0 E1 FA | 	rdword	arg01, objptr
00e94     08 BC 05 F1 | 	add	objptr, #8
00e98     B0 11 B0 FD | 	call	#_hng030rm_inttostr
00e9c     E6 F0 01 F6 | 	mov	arg01, result1
00ea0     C0 0E B0 FD | 	call	#_hng030rm_write
00ea4                 | '      v.write(string(", y= "))
00ea4     1C 00 00 FF 
00ea8     17 F0 05 F6 | 	mov	arg01, ##@LR__0239
00eac     B4 0E B0 FD | 	call	#_hng030rm_write
00eb0                 | '      v.writeln(v.inttostr(mousey))
00eb0     06 BC 85 F1 | 	sub	objptr, #6
00eb4     DE F0 E1 FA | 	rdword	arg01, objptr
00eb8     06 BC 05 F1 | 	add	objptr, #6
00ebc     8C 11 B0 FD | 	call	#_hng030rm_inttostr
00ec0     E6 26 02 F6 | 	mov	local24, result1
00ec4     13 F1 01 F6 | 	mov	arg01, local24
00ec8     4C 10 B0 FD | 	call	#_hng030rm_writeln
00ecc     01 00 00 FF 
00ed0     34 BC 85 F1 | 	sub	objptr, ##564
00ed4                 | LR__0022
00ed4                 | LR__0023
00ed4                 | ' 
00ed4                 | '   if rr==$33   'mousewheel
00ed4     01 00 00 FF 
00ed8     20 BC 05 F1 | 	add	objptr, ##544
00edc     DE 0A 02 FB | 	rdlong	local10, objptr
00ee0     01 00 00 FF 
00ee4     20 BC 85 F1 | 	sub	objptr, ##544
00ee8     33 0A 0E F2 | 	cmp	local10, #51 wz
00eec     D0 00 90 5D |  if_ne	jmp	#LR__0028
00ef0                 | '     mousewheel:=serialblockingread()
00ef0                 | ' 
00ef0                 | ' repeat
00ef0                 | LR__0024
00ef0                 | '   r:=serialread()
00ef0     8C 07 B0 FD | 	call	#_serialread
00ef4     E6 3A 02 F6 | 	mov	local34, result1
00ef8     FF FF 7F FF 
00efc     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00f00     EC FF 9F AD |  if_e	jmp	#LR__0024
00f04                 | ' until r<>-1
00f04                 | ' return r
00f04     1D CD 01 F6 | 	mov	result1, local34
00f08     E6 0A 02 F6 | 	mov	local10, result1
00f0c     01 00 00 FF 
00f10     2A BC 05 F1 | 	add	objptr, ##554
00f14     DE 0A 42 FC | 	wrbyte	local10, objptr
00f18     01 00 00 FF 
00f1c     2A BC 85 F1 | 	sub	objptr, ##554
00f20                 | '     dummy:=serialblockingread()
00f20                 | ' 
00f20                 | ' repeat
00f20                 | LR__0025
00f20                 | '   r:=serialread()
00f20     5C 07 B0 FD | 	call	#_serialread
00f24     E6 3A 02 F6 | 	mov	local34, result1
00f28     FF FF 7F FF 
00f2c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00f30     EC FF 9F AD |  if_e	jmp	#LR__0025
00f34                 | ' until r<>-1
00f34                 | ' return r
00f34     1D CD 01 F6 | 	mov	result1, local34
00f38     E6 0A 02 F6 | 	mov	local10, result1
00f3c     01 00 00 FF 
00f40     30 BC 05 F1 | 	add	objptr, ##560
00f44     DE 0A 42 FC | 	wrbyte	local10, objptr
00f48     01 00 00 FF 
00f4c     30 BC 85 F1 | 	sub	objptr, ##560
00f50                 | '     rr:=serialblockingread()
00f50                 | ' 
00f50                 | ' repeat
00f50                 | LR__0026
00f50                 | '   r:=serialread()
00f50     2C 07 B0 FD | 	call	#_serialread
00f54     E6 3A 02 F6 | 	mov	local34, result1
00f58     FF FF 7F FF 
00f5c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00f60     EC FF 9F AD |  if_e	jmp	#LR__0026
00f64                 | ' until r<>-1
00f64                 | ' return r
00f64     1D CD 01 F6 | 	mov	result1, local34
00f68     01 00 00 FF 
00f6c     20 BC 05 F1 | 	add	objptr, ##544
00f70     DE CC 61 FC | 	wrlong	result1, objptr
00f74                 | '     if rr==255
00f74     E6 0A 02 F6 | 	mov	local10, result1
00f78     01 00 00 FF 
00f7c     20 BC 85 F1 | 	sub	objptr, ##544
00f80     FF 0A 0E F2 | 	cmp	local10, #255 wz
00f84     38 00 90 5D |  if_ne	jmp	#LR__0027
00f88                 | '      v.write(string("  Mouse wheel: "))
00f88     1C 00 00 FF 
00f8c     1D F0 05 F6 | 	mov	arg01, ##@LR__0240
00f90     01 00 00 FF 
00f94     34 BC 05 F1 | 	add	objptr, ##564
00f98     C8 0D B0 FD | 	call	#_hng030rm_write
00f9c                 | '      v.writeln(v.inttostr(mousewheel))
00f9c     0A BC 85 F1 | 	sub	objptr, #10
00fa0     DE F0 C1 FA | 	rdbyte	arg01, objptr
00fa4     0A BC 05 F1 | 	add	objptr, #10
00fa8     A0 10 B0 FD | 	call	#_hng030rm_inttostr
00fac     E6 26 02 F6 | 	mov	local24, result1
00fb0     13 F1 01 F6 | 	mov	arg01, local24
00fb4     60 0F B0 FD | 	call	#_hng030rm_writeln
00fb8     01 00 00 FF 
00fbc     34 BC 85 F1 | 	sub	objptr, ##564
00fc0                 | LR__0027
00fc0                 | LR__0028
00fc0                 | ' 
00fc0                 | '   if rr==$34   'mousekey
00fc0     01 00 00 FF 
00fc4     20 BC 05 F1 | 	add	objptr, ##544
00fc8     DE 0A 02 FB | 	rdlong	local10, objptr
00fcc     01 00 00 FF 
00fd0     20 BC 85 F1 | 	sub	objptr, ##544
00fd4     34 0A 0E F2 | 	cmp	local10, #52 wz
00fd8     D0 00 90 5D |  if_ne	jmp	#LR__0033
00fdc                 | '     mousekey:=serialblockingread()
00fdc                 | ' 
00fdc                 | ' repeat
00fdc                 | LR__0029
00fdc                 | '   r:=serialread()
00fdc     A0 06 B0 FD | 	call	#_serialread
00fe0     E6 3A 02 F6 | 	mov	local34, result1
00fe4     FF FF 7F FF 
00fe8     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
00fec     EC FF 9F AD |  if_e	jmp	#LR__0029
00ff0                 | ' until r<>-1
00ff0                 | ' return r
00ff0     1D CD 01 F6 | 	mov	result1, local34
00ff4     E6 0A 02 F6 | 	mov	local10, result1
00ff8     01 00 00 FF 
00ffc     2B BC 05 F1 | 	add	objptr, ##555
01000     DE 0A 42 FC | 	wrbyte	local10, objptr
01004     01 00 00 FF 
01008     2B BC 85 F1 | 	sub	objptr, ##555
0100c                 | '     dummy:=serialblockingread()
0100c                 | ' 
0100c                 | ' repeat
0100c                 | LR__0030
0100c                 | '   r:=serialread()
0100c     70 06 B0 FD | 	call	#_serialread
01010     E6 3A 02 F6 | 	mov	local34, result1
01014     FF FF 7F FF 
01018     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
0101c     EC FF 9F AD |  if_e	jmp	#LR__0030
01020                 | ' until r<>-1
01020                 | ' return r
01020     1D CD 01 F6 | 	mov	result1, local34
01024     E6 0A 02 F6 | 	mov	local10, result1
01028     01 00 00 FF 
0102c     30 BC 05 F1 | 	add	objptr, ##560
01030     DE 0A 42 FC | 	wrbyte	local10, objptr
01034     01 00 00 FF 
01038     30 BC 85 F1 | 	sub	objptr, ##560
0103c                 | '     rr:=serialblockingread()
0103c                 | ' 
0103c                 | ' repeat
0103c                 | LR__0031
0103c                 | '   r:=serialread()
0103c     40 06 B0 FD | 	call	#_serialread
01040     E6 3A 02 F6 | 	mov	local34, result1
01044     FF FF 7F FF 
01048     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
0104c     EC FF 9F AD |  if_e	jmp	#LR__0031
01050                 | ' until r<>-1
01050                 | ' return r
01050     1D CD 01 F6 | 	mov	result1, local34
01054     01 00 00 FF 
01058     20 BC 05 F1 | 	add	objptr, ##544
0105c     DE CC 61 FC | 	wrlong	result1, objptr
01060                 | '     if rr==255
01060     E6 0A 02 F6 | 	mov	local10, result1
01064     01 00 00 FF 
01068     20 BC 85 F1 | 	sub	objptr, ##544
0106c     FF 0A 0E F2 | 	cmp	local10, #255 wz
01070     38 00 90 5D |  if_ne	jmp	#LR__0032
01074                 | '      v.write(string("  Mouse key pressed: "))
01074     1C 00 00 FF 
01078     2D F0 05 F6 | 	mov	arg01, ##@LR__0241
0107c     01 00 00 FF 
01080     34 BC 05 F1 | 	add	objptr, ##564
01084     DC 0C B0 FD | 	call	#_hng030rm_write
01088                 | '      v.writeln(v.inttostr(mousekey))
01088     09 BC 85 F1 | 	sub	objptr, #9
0108c     DE F0 C1 FA | 	rdbyte	arg01, objptr
01090     09 BC 05 F1 | 	add	objptr, #9
01094     B4 0F B0 FD | 	call	#_hng030rm_inttostr
01098     E6 26 02 F6 | 	mov	local24, result1
0109c     13 F1 01 F6 | 	mov	arg01, local24
010a0     74 0E B0 FD | 	call	#_hng030rm_writeln
010a4     01 00 00 FF 
010a8     34 BC 85 F1 | 	sub	objptr, ##564
010ac                 | LR__0032
010ac                 | LR__0033
010ac                 | ' 
010ac                 | '   if rr==$35   'mouseclick
010ac     01 00 00 FF 
010b0     20 BC 05 F1 | 	add	objptr, ##544
010b4     DE 0A 02 FB | 	rdlong	local10, objptr
010b8     01 00 00 FF 
010bc     20 BC 85 F1 | 	sub	objptr, ##544
010c0     35 0A 0E F2 | 	cmp	local10, #53 wz
010c4     B4 00 90 5D |  if_ne	jmp	#LR__0038
010c8                 | '     dummy:=serialblockingread()
010c8                 | ' 
010c8                 | ' repeat
010c8                 | LR__0034
010c8                 | '   r:=serialread()
010c8     B4 05 B0 FD | 	call	#_serialread
010cc     E6 3A 02 F6 | 	mov	local34, result1
010d0     FF FF 7F FF 
010d4     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
010d8     EC FF 9F AD |  if_e	jmp	#LR__0034
010dc                 | ' until r<>-1
010dc                 | ' return r
010dc     1D CD 01 F6 | 	mov	result1, local34
010e0     E6 0A 02 F6 | 	mov	local10, result1
010e4     01 00 00 FF 
010e8     30 BC 05 F1 | 	add	objptr, ##560
010ec     DE 0A 42 FC | 	wrbyte	local10, objptr
010f0     01 00 00 FF 
010f4     30 BC 85 F1 | 	sub	objptr, ##560
010f8                 | '     dummy:=serialblockingread()
010f8                 | ' 
010f8                 | ' repeat
010f8                 | LR__0035
010f8                 | '   r:=serialread()
010f8     84 05 B0 FD | 	call	#_serialread
010fc     E6 3A 02 F6 | 	mov	local34, result1
01100     FF FF 7F FF 
01104     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
01108     EC FF 9F AD |  if_e	jmp	#LR__0035
0110c                 | ' until r<>-1
0110c                 | ' return r
0110c     1D CD 01 F6 | 	mov	result1, local34
01110     E6 0A 02 F6 | 	mov	local10, result1
01114     01 00 00 FF 
01118     30 BC 05 F1 | 	add	objptr, ##560
0111c     DE 0A 42 FC | 	wrbyte	local10, objptr
01120     01 00 00 FF 
01124     30 BC 85 F1 | 	sub	objptr, ##560
01128                 | '     rr:=serialblockingread()
01128                 | ' 
01128                 | ' repeat
01128                 | LR__0036
01128                 | '   r:=serialread()
01128     54 05 B0 FD | 	call	#_serialread
0112c     E6 3A 02 F6 | 	mov	local34, result1
01130     FF FF 7F FF 
01134     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
01138     EC FF 9F AD |  if_e	jmp	#LR__0036
0113c                 | ' until r<>-1
0113c                 | ' return r
0113c     1D CD 01 F6 | 	mov	result1, local34
01140     01 00 00 FF 
01144     20 BC 05 F1 | 	add	objptr, ##544
01148     DE CC 61 FC | 	wrlong	result1, objptr
0114c                 | '     if rr==255
0114c     E6 0A 02 F6 | 	mov	local10, result1
01150     01 00 00 FF 
01154     20 BC 85 F1 | 	sub	objptr, ##544
01158     FF 0A 0E F2 | 	cmp	local10, #255 wz
0115c     1C 00 90 5D |  if_ne	jmp	#LR__0037
01160                 | '      v.writeln(string("  Mouse clicked"))
01160     1C 00 00 FF 
01164     43 F0 05 F6 | 	mov	arg01, ##@LR__0242
01168     01 00 00 FF 
0116c     34 BC 05 F1 | 	add	objptr, ##564
01170     A4 0D B0 FD | 	call	#_hng030rm_writeln
01174     01 00 00 FF 
01178     34 BC 85 F1 | 	sub	objptr, ##564
0117c                 | LR__0037
0117c                 | LR__0038
0117c                 | ' 
0117c                 | '   if rr==$36   'mouseclick
0117c     01 00 00 FF 
01180     20 BC 05 F1 | 	add	objptr, ##544
01184     DE 0A 02 FB | 	rdlong	local10, objptr
01188     01 00 00 FF 
0118c     20 BC 85 F1 | 	sub	objptr, ##544
01190     36 0A 0E F2 | 	cmp	local10, #54 wz
01194     B4 00 90 5D |  if_ne	jmp	#LR__0043
01198                 | '     dummy:=serialblockingread()
01198                 | ' 
01198                 | ' repeat
01198                 | LR__0039
01198                 | '   r:=serialread()
01198     E4 04 B0 FD | 	call	#_serialread
0119c     E6 3A 02 F6 | 	mov	local34, result1
011a0     FF FF 7F FF 
011a4     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
011a8     EC FF 9F AD |  if_e	jmp	#LR__0039
011ac                 | ' until r<>-1
011ac                 | ' return r
011ac     1D CD 01 F6 | 	mov	result1, local34
011b0     E6 0A 02 F6 | 	mov	local10, result1
011b4     01 00 00 FF 
011b8     30 BC 05 F1 | 	add	objptr, ##560
011bc     DE 0A 42 FC | 	wrbyte	local10, objptr
011c0     01 00 00 FF 
011c4     30 BC 85 F1 | 	sub	objptr, ##560
011c8                 | '     dummy:=serialblockingread()
011c8                 | ' 
011c8                 | ' repeat
011c8                 | LR__0040
011c8                 | '   r:=serialread()
011c8     B4 04 B0 FD | 	call	#_serialread
011cc     E6 3A 02 F6 | 	mov	local34, result1
011d0     FF FF 7F FF 
011d4     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
011d8     EC FF 9F AD |  if_e	jmp	#LR__0040
011dc                 | ' until r<>-1
011dc                 | ' return r
011dc     1D CD 01 F6 | 	mov	result1, local34
011e0     E6 0A 02 F6 | 	mov	local10, result1
011e4     01 00 00 FF 
011e8     30 BC 05 F1 | 	add	objptr, ##560
011ec     DE 0A 42 FC | 	wrbyte	local10, objptr
011f0     01 00 00 FF 
011f4     30 BC 85 F1 | 	sub	objptr, ##560
011f8                 | '     rr:=serialblockingread()
011f8                 | ' 
011f8                 | ' repeat
011f8                 | LR__0041
011f8                 | '   r:=serialread()
011f8     84 04 B0 FD | 	call	#_serialread
011fc     E6 3A 02 F6 | 	mov	local34, result1
01200     FF FF 7F FF 
01204     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
01208     EC FF 9F AD |  if_e	jmp	#LR__0041
0120c                 | ' until r<>-1
0120c                 | ' return r
0120c     1D CD 01 F6 | 	mov	result1, local34
01210     01 00 00 FF 
01214     20 BC 05 F1 | 	add	objptr, ##544
01218     DE CC 61 FC | 	wrlong	result1, objptr
0121c                 | '     if rr==255
0121c     E6 0A 02 F6 | 	mov	local10, result1
01220     01 00 00 FF 
01224     20 BC 85 F1 | 	sub	objptr, ##544
01228     FF 0A 0E F2 | 	cmp	local10, #255 wz
0122c     1C 00 90 5D |  if_ne	jmp	#LR__0042
01230                 | '      v.writeln(string("  Mouse double clicked"))
01230     1C 00 00 FF 
01234     53 F0 05 F6 | 	mov	arg01, ##@LR__0243
01238     01 00 00 FF 
0123c     34 BC 05 F1 | 	add	objptr, ##564
01240     D4 0C B0 FD | 	call	#_hng030rm_writeln
01244     01 00 00 FF 
01248     34 BC 85 F1 | 	sub	objptr, ##564
0124c                 | LR__0042
0124c                 | LR__0043
0124c                 | ' 
0124c                 | '   if rr==$37   'key released
0124c     01 00 00 FF 
01250     20 BC 05 F1 | 	add	objptr, ##544
01254     DE 0A 02 FB | 	rdlong	local10, objptr
01258     01 00 00 FF 
0125c     20 BC 85 F1 | 	sub	objptr, ##544
01260     37 0A 0E F2 | 	cmp	local10, #55 wz
01264     DC 00 90 5D |  if_ne	jmp	#LR__0048
01268                 | '     scancode:=serialblockingread()
01268                 | ' 
01268                 | ' repeat
01268                 | LR__0044
01268                 | '   r:=serialread()
01268     14 04 B0 FD | 	call	#_serialread
0126c     E6 3A 02 F6 | 	mov	local34, result1
01270     FF FF 7F FF 
01274     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
01278     EC FF 9F AD |  if_e	jmp	#LR__0044
0127c                 | ' until r<>-1
0127c                 | ' return r
0127c     1D CD 01 F6 | 	mov	result1, local34
01280     E6 0A 02 F6 | 	mov	local10, result1
01284     01 00 00 FF 
01288     29 BC 05 F1 | 	add	objptr, ##553
0128c     DE 0A 42 FC | 	wrbyte	local10, objptr
01290     01 00 00 FF 
01294     29 BC 85 F1 | 	sub	objptr, ##553
01298                 | '     dummy:=serialblockingread()
01298                 | ' 
01298                 | ' repeat
01298                 | LR__0045
01298                 | '   r:=serialread()
01298     E4 03 B0 FD | 	call	#_serialread
0129c     E6 3A 02 F6 | 	mov	local34, result1
012a0     FF FF 7F FF 
012a4     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
012a8     EC FF 9F AD |  if_e	jmp	#LR__0045
012ac                 | ' until r<>-1
012ac                 | ' return r
012ac     1D CD 01 F6 | 	mov	result1, local34
012b0     E6 0A 02 F6 | 	mov	local10, result1
012b4     01 00 00 FF 
012b8     30 BC 05 F1 | 	add	objptr, ##560
012bc     DE 0A 42 FC | 	wrbyte	local10, objptr
012c0     01 00 00 FF 
012c4     30 BC 85 F1 | 	sub	objptr, ##560
012c8                 | '     rr:=serialblockingread()
012c8                 | ' 
012c8                 | ' repeat
012c8                 | LR__0046
012c8                 | '   r:=serialread()
012c8     B4 03 B0 FD | 	call	#_serialread
012cc     E6 3A 02 F6 | 	mov	local34, result1
012d0     FF FF 7F FF 
012d4     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
012d8     EC FF 9F AD |  if_e	jmp	#LR__0046
012dc                 | ' until r<>-1
012dc                 | ' return r
012dc     1D CD 01 F6 | 	mov	result1, local34
012e0     01 00 00 FF 
012e4     20 BC 05 F1 | 	add	objptr, ##544
012e8     DE CC 61 FC | 	wrlong	result1, objptr
012ec                 | '     if rr==255
012ec     E6 0A 02 F6 | 	mov	local10, result1
012f0     01 00 00 FF 
012f4     20 BC 85 F1 | 	sub	objptr, ##544
012f8     FF 0A 0E F2 | 	cmp	local10, #255 wz
012fc     44 00 90 5D |  if_ne	jmp	#LR__0047
01300                 | '      v.write(string("  Key scancode "))
01300     1C 00 00 FF 
01304     6A F0 05 F6 | 	mov	arg01, ##@LR__0244
01308     01 00 00 FF 
0130c     34 BC 05 F1 | 	add	objptr, ##564
01310     50 0A B0 FD | 	call	#_hng030rm_write
01314                 | '      v.write(v.inttostr(scancode))
01314     0B BC 85 F1 | 	sub	objptr, #11
01318     DE F0 C1 FA | 	rdbyte	arg01, objptr
0131c     0B BC 05 F1 | 	add	objptr, #11
01320     28 0D B0 FD | 	call	#_hng030rm_inttostr
01324     E6 26 02 F6 | 	mov	local24, result1
01328     13 F1 01 F6 | 	mov	arg01, local24
0132c     34 0A B0 FD | 	call	#_hng030rm_write
01330                 | '      v.writeln(string(" released"))
01330     1C 00 00 FF 
01334     7A F0 05 F6 | 	mov	arg01, ##@LR__0245
01338     DC 0B B0 FD | 	call	#_hng030rm_writeln
0133c     01 00 00 FF 
01340     34 BC 85 F1 | 	sub	objptr, ##564
01344                 | LR__0047
01344                 | LR__0048
01344                 | ' 
01344                 | '   if rr==$38   'key pressed
01344     01 00 00 FF 
01348     20 BC 05 F1 | 	add	objptr, ##544
0134c     DE 0A 02 FB | 	rdlong	local10, objptr
01350     01 00 00 FF 
01354     20 BC 85 F1 | 	sub	objptr, ##544
01358     38 0A 0E F2 | 	cmp	local10, #56 wz
0135c     00 01 90 5D |  if_ne	jmp	#LR__0053
01360                 | '     scancode:=serialblockingread()
01360                 | ' 
01360                 | ' repeat
01360                 | LR__0049
01360                 | '   r:=serialread()
01360     1C 03 B0 FD | 	call	#_serialread
01364     E6 3A 02 F6 | 	mov	local34, result1
01368     FF FF 7F FF 
0136c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
01370     EC FF 9F AD |  if_e	jmp	#LR__0049
01374                 | ' until r<>-1
01374                 | ' return r
01374     1D CD 01 F6 | 	mov	result1, local34
01378     E6 0A 02 F6 | 	mov	local10, result1
0137c     01 00 00 FF 
01380     29 BC 05 F1 | 	add	objptr, ##553
01384     DE 0A 42 FC | 	wrbyte	local10, objptr
01388     01 00 00 FF 
0138c     29 BC 85 F1 | 	sub	objptr, ##553
01390                 | '     charcode:=serialblockingread()
01390                 | ' 
01390                 | ' repeat
01390                 | LR__0050
01390                 | '   r:=serialread()
01390     EC 02 B0 FD | 	call	#_serialread
01394     E6 3A 02 F6 | 	mov	local34, result1
01398     FF FF 7F FF 
0139c     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
013a0     EC FF 9F AD |  if_e	jmp	#LR__0050
013a4                 | ' until r<>-1
013a4                 | ' return r
013a4     1D CD 01 F6 | 	mov	result1, local34
013a8     E6 0A 02 F6 | 	mov	local10, result1
013ac     01 00 00 FF 
013b0     28 BC 05 F1 | 	add	objptr, ##552
013b4     DE 0A 42 FC | 	wrbyte	local10, objptr
013b8     01 00 00 FF 
013bc     28 BC 85 F1 | 	sub	objptr, ##552
013c0                 | '     rr:=serialblockingread()
013c0                 | ' 
013c0                 | ' repeat
013c0                 | LR__0051
013c0                 | '   r:=serialread()
013c0     BC 02 B0 FD | 	call	#_serialread
013c4     E6 3A 02 F6 | 	mov	local34, result1
013c8     FF FF 7F FF 
013cc     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
013d0     EC FF 9F AD |  if_e	jmp	#LR__0051
013d4                 | ' until r<>-1
013d4                 | ' return r
013d4     1D CD 01 F6 | 	mov	result1, local34
013d8     01 00 00 FF 
013dc     20 BC 05 F1 | 	add	objptr, ##544
013e0     DE CC 61 FC | 	wrlong	result1, objptr
013e4                 | '     if rr==255
013e4     E6 0A 02 F6 | 	mov	local10, result1
013e8     01 00 00 FF 
013ec     20 BC 85 F1 | 	sub	objptr, ##544
013f0     FF 0A 0E F2 | 	cmp	local10, #255 wz
013f4     68 00 90 5D |  if_ne	jmp	#LR__0052
013f8                 | '      v.write(string("  Key scancode "))
013f8     1C 00 00 FF 
013fc     84 F0 05 F6 | 	mov	arg01, ##@LR__0246
01400     01 00 00 FF 
01404     34 BC 05 F1 | 	add	objptr, ##564
01408     58 09 B0 FD | 	call	#_hng030rm_write
0140c                 | '      v.write(v.inttostr(scancode))
0140c     0B BC 85 F1 | 	sub	objptr, #11
01410     DE F0 C1 FA | 	rdbyte	arg01, objptr
01414     0B BC 05 F1 | 	add	objptr, #11
01418     30 0C B0 FD | 	call	#_hng030rm_inttostr
0141c     E6 F0 01 F6 | 	mov	arg01, result1
01420     40 09 B0 FD | 	call	#_hng030rm_write
01424                 | '      v.write(string(", charcode "))
01424     1C 00 00 FF 
01428     94 F0 05 F6 | 	mov	arg01, ##@LR__0247
0142c     34 09 B0 FD | 	call	#_hng030rm_write
01430                 | '      v.write(v.inttostr(charcode))
01430     0C BC 85 F1 | 	sub	objptr, #12
01434     DE F0 C1 FA | 	rdbyte	arg01, objptr
01438     0C BC 05 F1 | 	add	objptr, #12
0143c     0C 0C B0 FD | 	call	#_hng030rm_inttostr
01440     E6 26 02 F6 | 	mov	local24, result1
01444     13 F1 01 F6 | 	mov	arg01, local24
01448     18 09 B0 FD | 	call	#_hng030rm_write
0144c                 | '      v.writeln(string(" pressed"))
0144c     1C 00 00 FF 
01450     A0 F0 05 F6 | 	mov	arg01, ##@LR__0248
01454     C0 0A B0 FD | 	call	#_hng030rm_writeln
01458     01 00 00 FF 
0145c     34 BC 85 F1 | 	sub	objptr, ##564
01460                 | LR__0052
01460                 | LR__0053
01460                 | ' 
01460                 | '   if rr==$39   'modifier pressed
01460     01 00 00 FF 
01464     20 BC 05 F1 | 	add	objptr, ##544
01468     DE 0A 02 FB | 	rdlong	local10, objptr
0146c     01 00 00 FF 
01470     20 BC 85 F1 | 	sub	objptr, ##544
01474     39 0A 0E F2 | 	cmp	local10, #57 wz
01478     94 F6 9F 5D |  if_ne	jmp	#LR__0004
0147c                 | '     scancode:=serialblockingread()
0147c                 | ' 
0147c                 | ' repeat
0147c                 | LR__0054
0147c                 | '   r:=serialread()
0147c     00 02 B0 FD | 	call	#_serialread
01480     E6 3A 02 F6 | 	mov	local34, result1
01484     FF FF 7F FF 
01488     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
0148c     EC FF 9F AD |  if_e	jmp	#LR__0054
01490                 | ' until r<>-1
01490                 | ' return r
01490     1D CD 01 F6 | 	mov	result1, local34
01494     E6 0A 02 F6 | 	mov	local10, result1
01498     01 00 00 FF 
0149c     29 BC 05 F1 | 	add	objptr, ##553
014a0     DE 0A 42 FC | 	wrbyte	local10, objptr
014a4     01 00 00 FF 
014a8     29 BC 85 F1 | 	sub	objptr, ##553
014ac                 | '     dummy:=serialblockingread()
014ac                 | ' 
014ac                 | ' repeat
014ac                 | LR__0055
014ac                 | '   r:=serialread()
014ac     D0 01 B0 FD | 	call	#_serialread
014b0     E6 3A 02 F6 | 	mov	local34, result1
014b4     FF FF 7F FF 
014b8     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
014bc     EC FF 9F AD |  if_e	jmp	#LR__0055
014c0                 | ' until r<>-1
014c0                 | ' return r
014c0     1D CD 01 F6 | 	mov	result1, local34
014c4     E6 0A 02 F6 | 	mov	local10, result1
014c8     01 00 00 FF 
014cc     30 BC 05 F1 | 	add	objptr, ##560
014d0     DE 0A 42 FC | 	wrbyte	local10, objptr
014d4     01 00 00 FF 
014d8     30 BC 85 F1 | 	sub	objptr, ##560
014dc                 | '     rr:=serialblockingread()
014dc                 | ' 
014dc                 | ' repeat
014dc                 | LR__0056
014dc                 | '   r:=serialread()
014dc     A0 01 B0 FD | 	call	#_serialread
014e0     E6 3A 02 F6 | 	mov	local34, result1
014e4     FF FF 7F FF 
014e8     FF 3B 0E F2 | 	cmp	local34, ##-1 wz
014ec     EC FF 9F AD |  if_e	jmp	#LR__0056
014f0                 | ' until r<>-1
014f0                 | ' return r
014f0     1D CD 01 F6 | 	mov	result1, local34
014f4     01 00 00 FF 
014f8     20 BC 05 F1 | 	add	objptr, ##544
014fc     DE CC 61 FC | 	wrlong	result1, objptr
01500                 | '     if rr==255
01500     E6 0A 02 F6 | 	mov	local10, result1
01504     01 00 00 FF 
01508     20 BC 85 F1 | 	sub	objptr, ##544
0150c     FF 0A 0E F2 | 	cmp	local10, #255 wz
01510     FC F5 9F 5D |  if_ne	jmp	#LR__0004
01514                 | '       if scancode>0
01514     01 00 00 FF 
01518     29 BC 05 F1 | 	add	objptr, ##553
0151c     DE 0A C2 FA | 	rdbyte	local10, objptr
01520     01 00 00 FF 
01524     29 BC 85 F1 | 	sub	objptr, ##553
01528     00 0A 5E F2 | 	cmps	local10, #0 wcz
0152c     48 00 90 ED |  if_be	jmp	#LR__0057
01530                 | '         v.write(string("  Key modifier "))
01530     1C 00 00 FF 
01534     A9 F0 05 F6 | 	mov	arg01, ##@LR__0249
01538     01 00 00 FF 
0153c     34 BC 05 F1 | 	add	objptr, ##564
01540     20 08 B0 FD | 	call	#_hng030rm_write
01544                 | '         v.write(v.inttostr(scancode))
01544     0B BC 85 F1 | 	sub	objptr, #11
01548     DE F0 C1 FA | 	rdbyte	arg01, objptr
0154c     0B BC 05 F1 | 	add	objptr, #11
01550     F8 0A B0 FD | 	call	#_hng030rm_inttostr
01554     E6 26 02 F6 | 	mov	local24, result1
01558     13 F1 01 F6 | 	mov	arg01, local24
0155c     04 08 B0 FD | 	call	#_hng030rm_write
01560                 | '         v.writeln(string(" pressed"))
01560     1C 00 00 FF 
01564     B9 F0 05 F6 | 	mov	arg01, ##@LR__0250
01568     AC 09 B0 FD | 	call	#_hng030rm_writeln
0156c     01 00 00 FF 
01570     34 BC 85 F1 | 	sub	objptr, ##564
01574                 | '       else
01574     98 F5 9F FD | 	jmp	#LR__0004
01578                 | LR__0057
01578                 | '         v.writeln(string("  Modifiers released"))
01578     1C 00 00 FF 
0157c     C2 F0 05 F6 | 	mov	arg01, ##@LR__0251
01580     01 00 00 FF 
01584     34 BC 05 F1 | 	add	objptr, ##564
01588     8C 09 B0 FD | 	call	#_hng030rm_writeln
0158c     01 00 00 FF 
01590     34 BC 85 F1 | 	sub	objptr, ##564
01594     78 F5 9F FD | 	jmp	#LR__0004
01598     AF F0 03 F6 | 	mov	ptra, fp
0159c     BF 00 A0 FD | 	call	#popregs_
015a0                 | _start_ret
015a0     2D 00 64 FD | 	ret
015a4                 | 
015a4                 | ' 
015a4                 | ' 
015a4                 | ' pub serialcog()|q
015a4                 | _serialcog
015a4     08 5A 05 F6 | 	mov	COUNT_, #8
015a8     B0 00 A0 FD | 	call	#pushregs_
015ac                 | ' 
015ac                 | ' serialfront:=0
015ac     00 F8 05 F6 | 	mov	local01, #0
015b0     1C BD 05 F1 | 	add	objptr, #284
015b4     DE 00 68 FC | 	wrlong	#0, objptr
015b8                 | ' serialtail:=0
015b8     04 BC 85 F1 | 	sub	objptr, #4
015bc     DE 00 68 FC | 	wrlong	#0, objptr
015c0     18 BD 85 F1 | 	sub	objptr, #280
015c4                 | ' 
015c4                 | ' repeat
015c4                 | LR__0058
015c4                 | '   if serialfront<>((serialtail-1) //32)
015c4     18 BD 05 F1 | 	add	objptr, #280
015c8     DE F8 01 FB | 	rdlong	local01, objptr
015cc     01 F8 85 F1 | 	sub	local01, #1
015d0     FC FA 51 F6 | 	abs	local02, local01 wc
015d4     1F FA 05 F5 | 	and	local02, #31
015d8     FD FA 61 C6 |  if_b	neg	local02, local02
015dc     04 BC 05 F1 | 	add	objptr, #4
015e0     DE FC 01 FB | 	rdlong	local03, objptr
015e4     1C BD 85 F1 | 	sub	objptr, #284
015e8     FD FC 09 F2 | 	cmp	local03, local02 wz
015ec     D4 FF 9F AD |  if_e	jmp	#LR__0058
015f0                 | '     q:=rxcheck()
015f0                 | ' 
015f0                 | ' '' Check for serial input
015f0                 | ' '' -- returns -1 if nothing available
015f0                 | ' 
015f0                 | '   rxbyte := -1
015f0     01 FE 65 F6 | 	neg	local04, #1
015f4                 | '   check := pinr(rxp)
015f4     08 BC 05 F1 | 	add	objptr, #8
015f8     DE F0 01 FB | 	rdlong	arg01, objptr
015fc     08 BC 85 F1 | 	sub	objptr, #8
01600     10 18 B0 FD | 	call	#__system___pinread
01604     E6 00 0A F6 | 	mov	local05, result1 wz
01608                 | '   if (check)
01608     18 00 90 AD |  if_e	jmp	#LR__0059
0160c                 | '     rxbyte := rdpin(rxp) >> 24
0160c     08 BC 05 F1 | 	add	objptr, #8
01610     DE F0 01 FB | 	rdlong	arg01, objptr
01614     08 BC 85 F1 | 	sub	objptr, #8
01618     00 FE 05 F6 | 	mov	local04, #0
0161c     F8 FE 89 FA | 	rdpin	local04, arg01
01620     18 FE 45 F0 | 	shr	local04, #24
01624                 | LR__0059
01624     FF CC 01 F6 | 	mov	result1, local04
01628     E6 02 02 F6 | 	mov	local06, result1
0162c                 | '     if q>=0
0162c     00 02 5E F2 | 	cmps	local06, #0 wcz
01630     90 FF 9F CD |  if_b	jmp	#LR__0058
01634     1C BD 05 F1 | 	add	objptr, #284
01638     DE 04 02 FB | 	rdlong	local07, objptr
0163c     02 04 66 F0 | 	shl	local07, #2
01640     04 BD 85 F1 | 	sub	objptr, #260
01644     DE 04 02 F1 | 	add	local07, objptr
01648                 | '      serialbuf[serialfront]:=q
01648     02 03 62 FC | 	wrlong	local06, local07
0164c                 | '      serialfront+=1
0164c     04 BD 05 F1 | 	add	objptr, #260
01650     DE 06 02 FB | 	rdlong	local08, objptr
01654     01 06 06 F1 | 	add	local08, #1
01658     DE 06 62 FC | 	wrlong	local08, objptr
0165c                 | '      serialfront:=serialfront // 32
0165c     03 F9 51 F6 | 	abs	local01, local08 wc
01660     1F F8 05 F5 | 	and	local01, #31
01664     FC F8 61 C6 |  if_b	neg	local01, local01
01668     DE F8 61 FC | 	wrlong	local01, objptr
0166c     1C BD 85 F1 | 	sub	objptr, #284
01670     50 FF 9F FD | 	jmp	#LR__0058
01674     AF F0 03 F6 | 	mov	ptra, fp
01678     BF 00 A0 FD | 	call	#popregs_
0167c                 | _serialcog_ret
0167c     2D 00 64 FD | 	ret
01680                 | 
01680                 | ' 
01680                 | ' pub serialread():r
01680                 | _serialread
01680                 | ' 
01680                 | ' if serialfront<>serialtail
01680     1C BD 05 F1 | 	add	objptr, #284
01684     DE D0 01 FB | 	rdlong	_var01, objptr
01688     04 BC 85 F1 | 	sub	objptr, #4
0168c     DE D2 01 FB | 	rdlong	_var02, objptr
01690     18 BD 85 F1 | 	sub	objptr, #280
01694     E9 D0 09 F2 | 	cmp	_var01, _var02 wz
01698     3C 00 90 AD |  if_e	jmp	#LR__0060
0169c     18 BD 05 F1 | 	add	objptr, #280
016a0     DE D4 01 FB | 	rdlong	_var03, objptr
016a4     02 D4 65 F0 | 	shl	_var03, #2
016a8     00 BD 85 F1 | 	sub	objptr, #256
016ac     DE D4 01 F1 | 	add	_var03, objptr
016b0                 | '   r:=serialbuf[serialtail]
016b0     EA D6 01 FB | 	rdlong	_var04, _var03
016b4     00 BD 05 F1 | 	add	objptr, #256
016b8     DE D8 01 FB | 	rdlong	_var05, objptr
016bc     01 D8 05 F1 | 	add	_var05, #1
016c0     EC D0 51 F6 | 	abs	_var01, _var05 wc
016c4     1F D0 05 F5 | 	and	_var01, #31
016c8     E8 D0 61 C6 |  if_b	neg	_var01, _var01
016cc                 | '   serialtail:=(serialtail+1)//32
016cc     DE D0 61 FC | 	wrlong	_var01, objptr
016d0     18 BD 85 F1 | 	sub	objptr, #280
016d4                 | ' else
016d4     04 00 90 FD | 	jmp	#LR__0061
016d8                 | LR__0060
016d8                 | '   r:=-1
016d8     01 D6 65 F6 | 	neg	_var04, #1
016dc                 | LR__0061
016dc                 | ' return r
016dc     EB CC 01 F6 | 	mov	result1, _var04
016e0                 | _serialread_ret
016e0     2D 00 64 FD | 	ret
016e4                 | 
016e4                 | ' 
016e4                 | ' 
016e4                 | ' 
016e4                 | ' ''---------------------- Serial functions from jm_serial.spin2
016e4                 | ' 
016e4                 | ' pub serial_start(rxpin2, txpin2, baud) | bitmode
016e4                 | _serial_start
016e4     05 5A 05 F6 | 	mov	COUNT_, #5
016e8     B0 00 A0 FD | 	call	#pushregs_
016ec     F8 F8 01 F6 | 	mov	local01, arg01
016f0     F9 FA 01 F6 | 	mov	local02, arg02
016f4                 | ' 
016f4                 | ' '' Start simple serial coms on rxpin and txpin at baud
016f4                 | ' 
016f4                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
016f4                 | ' 
016f4                 | '   rxp:=rxpin2
016f4     08 BC 05 F1 | 	add	objptr, #8
016f8     DE F8 61 FC | 	wrlong	local01, objptr
016fc                 | '   txp:=txpin2
016fc     04 BC 05 F1 | 	add	objptr, #4
01700     DE FA 61 FC | 	wrlong	local02, objptr
01704     0C BC 85 F1 | 	sub	objptr, #12
01708                 | ' 
01708                 | '   bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
01708     14 F0 05 FB | 	rdlong	arg01, #20
0170c     10 F2 C5 F9 | 	decod	arg02, #16
01710     F9 F0 01 FD | 	qmul	arg01, arg02
01714     19 FC 61 FD | 	getqy	local03
01718     18 FE 61 FD | 	getqx	local04
0171c     28 FC 61 FD | 	setq	local03
01720     FA FE 11 FD | 	qdiv	local04, arg03
01724     18 CC 61 FD | 	getqx	result1
01728     E6 00 02 F6 | 	mov	local05, result1
0172c     FE FF 7F FF 
01730     00 00 06 F5 | 	and	local05, ##-1024
01734                 | '   bitmode |= 7                                                  ' set bits (8)
01734     07 00 46 F5 | 	or	local05, #7
01738                 | ' 
01738                 | '   org
01738     E4 E8 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
0173c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01740                 | LR__0062
01740 000             | 	org	0
01740 000 50 F8 61 FD | 	fltl	local01
01744 001 FC 7C 08 FC | 	wrpin	#62, local01
01748 002 FC 00 12 FC | 	wxpin	local05, local01
0174c 003 58 F8 61 FD | 	drvl	local01
01750 004 50 FA 61 FD | 	fltl	local02
01754 005 FD F8 08 FC | 	wrpin	#124, local02
01758 006 FD 00 12 FC | 	wxpin	local05, local02
0175c 007 58 FA 61 FD | 	drvl	local02
01760 008             | LR__0063
01760                 | 	orgh
01760     AF F0 03 F6 | 	mov	ptra, fp
01764     BF 00 A0 FD | 	call	#popregs_
01768                 | _serial_start_ret
01768     2D 00 64 FD | 	ret
0176c                 | 
0176c                 | ' 
0176c                 | ' pub midi_start(mrxpin2, mtxpin2) | bitmode
0176c                 | _midi_start
0176c     05 5A 05 F6 | 	mov	COUNT_, #5
01770     B0 00 A0 FD | 	call	#pushregs_
01774     F8 F8 01 F6 | 	mov	local01, arg01
01778     F9 FA 01 F6 | 	mov	local02, arg02
0177c                 | ' 
0177c                 | ' '' Start simple serial coms on rxpin and txpin at baud
0177c                 | ' 
0177c                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
0177c                 | ' 
0177c                 | '   mrxp:=mrxpin2
0177c     10 BC 05 F1 | 	add	objptr, #16
01780     DE F8 61 FC | 	wrlong	local01, objptr
01784                 | '   mtxp:=mtxpin2
01784     04 BC 05 F1 | 	add	objptr, #4
01788     DE FA 61 FC | 	wrlong	local02, objptr
0178c     14 BC 85 F1 | 	sub	objptr, #20
01790                 | ' 
01790                 | '   bitmode := muldiv64(clkfreq, $1_0000, 31250) & $FFFFFC00       ' set bit timing
01790     14 F0 05 FB | 	rdlong	arg01, #20
01794     10 F2 C5 F9 | 	decod	arg02, #16
01798     F9 F0 01 FD | 	qmul	arg01, arg02
0179c     19 FC 61 FD | 	getqy	local03
017a0     18 FE 61 FD | 	getqx	local04
017a4     28 FC 61 FD | 	setq	local03
017a8     3D 00 00 FF 
017ac     12 FE 15 FD | 	qdiv	local04, ##31250
017b0     18 CC 61 FD | 	getqx	result1
017b4     E6 00 02 F6 | 	mov	local05, result1
017b8     FE FF 7F FF 
017bc     00 00 06 F5 | 	and	local05, ##-1024
017c0                 | '   bitmode |= 7                                                  ' set bits (8)
017c0     07 00 46 F5 | 	or	local05, #7
017c4                 | ' 
017c4                 | '   org
017c4     58 E8 9F FE | 	loc	pa,	#(@LR__0065-@LR__0064)
017c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
017cc                 | LR__0064
017cc 000             | 	org	0
017cc 000 50 F8 61 FD | 	fltl	local01
017d0 001 FC 7C 08 FC | 	wrpin	#62, local01
017d4 002 FC 00 12 FC | 	wxpin	local05, local01
017d8 003 58 F8 61 FD | 	drvl	local01
017dc 004 50 FA 61 FD | 	fltl	local02
017e0 005 FD F8 08 FC | 	wrpin	#124, local02
017e4 006 FD 00 12 FC | 	wxpin	local05, local02
017e8 007 58 FA 61 FD | 	drvl	local02
017ec 008             | LR__0065
017ec                 | 	orgh
017ec     AF F0 03 F6 | 	mov	ptra, fp
017f0     BF 00 A0 FD | 	call	#popregs_
017f4                 | _midi_start_ret
017f4     2D 00 64 FD | 	ret
017f8                 | 
017f8                 | '   until (rxbyte >= 0)
017f8                 | ' 
017f8                 | ' 
017f8                 | ' pub tx(b)
017f8                 | _tx
017f8     01 5A 05 F6 | 	mov	COUNT_, #1
017fc     B0 00 A0 FD | 	call	#pushregs_
01800                 | ' 
01800                 | ' '' Emit byte
01800                 | ' 
01800                 | '   wypin(txp, b)
01800     0C BC 05 F1 | 	add	objptr, #12
01804     DE F8 01 FB | 	rdlong	local01, objptr
01808     0C BC 85 F1 | 	sub	objptr, #12
0180c     F8 F2 01 F6 | 	mov	arg02, arg01
01810     FC F2 21 FC | 	wypin	arg02, local01
01814                 | '   txflush()
01814                 | ' 
01814                 | ' '' Wait until last byte has finished
01814                 | ' 
01814                 | '   repeat
01814                 | LR__0066
01814                 | '     check := pinr(txp)
01814     0C BC 05 F1 | 	add	objptr, #12
01818     DE F0 01 FB | 	rdlong	arg01, objptr
0181c     0C BC 85 F1 | 	sub	objptr, #12
01820     F0 15 B0 FD | 	call	#__system___pinread
01824     00 CC 0D F2 | 	cmp	result1, #0 wz
01828     E8 FF 9F AD |  if_e	jmp	#LR__0066
0182c     AF F0 03 F6 | 	mov	ptra, fp
01830     BF 00 A0 FD | 	call	#popregs_
01834                 | _tx_ret
01834     2D 00 64 FD | 	ret
01838                 | 
01838                 | ' 
01838                 | ' 
01838                 | ' ''---------- putpixel - put a pixel on the screen
01838                 | ' 
01838                 | ' pub putpixel1(x,y,c) |byte b
01838                 | _hng030rm_putpixel1
01838                 | ' 
01838                 | ' 
01838                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01838     00 D0 05 F6 | 	mov	_var01, #0
0183c     00 F0 5D F2 | 	cmps	arg01, #0 wcz
01840     01 D0 65 36 |  if_ae	neg	_var01, #1
01844     00 D2 05 F6 | 	mov	_var02, #0
01848     90 BC 05 F1 | 	add	objptr, #144
0184c     DE D4 01 FB | 	rdlong	_var03, objptr
01850     05 D4 65 F0 | 	shl	_var03, #5
01854     EA F0 59 F2 | 	cmps	arg01, _var03 wcz
01858     01 D2 65 C6 |  if_b	neg	_var02, #1
0185c     E9 D0 01 F5 | 	and	_var01, _var02
01860     00 D6 05 F6 | 	mov	_var04, #0
01864     00 F2 5D F2 | 	cmps	arg02, #0 wcz
01868     01 D6 65 36 |  if_ae	neg	_var04, #1
0186c     EB D0 01 F5 | 	and	_var01, _var04
01870     00 D8 05 F6 | 	mov	_var05, #0
01874     04 BC 05 F1 | 	add	objptr, #4
01878     DE DA 01 FB | 	rdlong	_var06, objptr
0187c     94 BC 85 F1 | 	sub	objptr, #148
01880     ED F2 59 F2 | 	cmps	arg02, _var06 wcz
01884     01 D8 65 C6 |  if_b	neg	_var05, #1
01888     EC D0 C9 F7 | 	test	_var01, _var05 wz
0188c     8C 00 90 AD |  if_e	jmp	#LR__0069
01890     90 BC 05 F1 | 	add	objptr, #144
01894     DE DC 01 FB | 	rdlong	_var07, objptr
01898     90 BC 85 F1 | 	sub	objptr, #144
0189c     02 DC 65 F0 | 	shl	_var07, #2
018a0     F9 DC 01 FD | 	qmul	_var07, arg02
018a4     18 DE 61 FD | 	getqx	_var08
018a8     DE E0 01 FB | 	rdlong	_var09, objptr
018ac     EF E0 01 F1 | 	add	_var09, _var08
018b0     F8 E2 01 F6 | 	mov	_var10, arg01
018b4     03 E2 45 F0 | 	shr	_var10, #3
018b8     F1 E0 01 F1 | 	add	_var09, _var10
018bc                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
018bc     F0 E4 C1 FA | 	rdbyte	_var11, _var09
018c0                 | '     if (c==0)
018c0     00 F4 0D F2 | 	cmp	arg03, #0 wz
018c4     18 00 90 5D |  if_ne	jmp	#LR__0067
018c8     F8 D0 51 F6 | 	abs	_var01, arg01 wc
018cc     07 D0 05 F5 | 	and	_var01, #7
018d0     E8 D0 61 C6 |  if_b	neg	_var01, _var01
018d4     E8 E6 C1 F9 | 	decod	_var12, _var01
018d8                 | '       b:=b & !(1<<(x//8))
018d8     F3 E4 21 F5 | 	andn	_var11, _var12
018dc                 | '     else
018dc     14 00 90 FD | 	jmp	#LR__0068
018e0                 | LR__0067
018e0     F8 D0 51 F6 | 	abs	_var01, arg01 wc
018e4     07 D0 05 F5 | 	and	_var01, #7
018e8     E8 D0 61 C6 |  if_b	neg	_var01, _var01
018ec     E8 E8 C1 F9 | 	decod	_var13, _var01
018f0                 | '       b:=b |(1<<(x//8))
018f0     F4 E4 41 F5 | 	or	_var11, _var13
018f4                 | LR__0068
018f4     90 BC 05 F1 | 	add	objptr, #144
018f8     DE EA 01 FB | 	rdlong	_var14, objptr
018fc     90 BC 85 F1 | 	sub	objptr, #144
01900     02 EA 65 F0 | 	shl	_var14, #2
01904     F9 EA 01 FD | 	qmul	_var14, arg02
01908     18 EC 61 FD | 	getqx	_var15
0190c     DE EE 01 FB | 	rdlong	_var16, objptr
01910     F6 EE 01 F1 | 	add	_var16, _var15
01914     F1 EE 01 F1 | 	add	_var16, _var10
01918                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01918     F7 E4 41 FC | 	wrbyte	_var11, _var16
0191c                 | LR__0069
0191c                 | _hng030rm_putpixel1_ret
0191c     2D 00 64 FD | 	ret
01920                 | 
01920                 | ' 
01920                 | ' 
01920                 | ' pub putpixel2(x,y,c) |byte b
01920                 | _hng030rm_putpixel2
01920                 | ' 
01920                 | ' 
01920                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01920     00 D0 05 F6 | 	mov	_var01, #0
01924     00 F0 5D F2 | 	cmps	arg01, #0 wcz
01928     01 D0 65 36 |  if_ae	neg	_var01, #1
0192c     00 D2 05 F6 | 	mov	_var02, #0
01930     90 BC 05 F1 | 	add	objptr, #144
01934     DE D4 01 FB | 	rdlong	_var03, objptr
01938     04 D4 65 F0 | 	shl	_var03, #4
0193c     EA F0 59 F2 | 	cmps	arg01, _var03 wcz
01940     01 D2 65 C6 |  if_b	neg	_var02, #1
01944     E9 D0 01 F5 | 	and	_var01, _var02
01948     00 D6 05 F6 | 	mov	_var04, #0
0194c     00 F2 5D F2 | 	cmps	arg02, #0 wcz
01950     01 D6 65 36 |  if_ae	neg	_var04, #1
01954     EB D0 01 F5 | 	and	_var01, _var04
01958     00 D8 05 F6 | 	mov	_var05, #0
0195c     04 BC 05 F1 | 	add	objptr, #4
01960     DE DA 01 FB | 	rdlong	_var06, objptr
01964     94 BC 85 F1 | 	sub	objptr, #148
01968     ED F2 59 F2 | 	cmps	arg02, _var06 wcz
0196c     01 D8 65 C6 |  if_b	neg	_var05, #1
01970     EC D0 C9 F7 | 	test	_var01, _var05 wz
01974     7C 00 90 AD |  if_e	jmp	#LR__0070
01978     90 BC 05 F1 | 	add	objptr, #144
0197c     DE DC 01 FB | 	rdlong	_var07, objptr
01980     90 BC 85 F1 | 	sub	objptr, #144
01984     02 DC 65 F0 | 	shl	_var07, #2
01988     F9 DC 01 FD | 	qmul	_var07, arg02
0198c     18 DE 61 FD | 	getqx	_var08
01990     DE E0 01 FB | 	rdlong	_var09, objptr
01994     EF E0 01 F1 | 	add	_var09, _var08
01998     F8 E2 01 F6 | 	mov	_var10, arg01
0199c     02 E2 45 F0 | 	shr	_var10, #2
019a0     F1 E0 01 F1 | 	add	_var09, _var10
019a4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
019a4     F0 E4 C1 FA | 	rdbyte	_var11, _var09
019a8     F8 D0 51 F6 | 	abs	_var01, arg01 wc
019ac     03 D0 05 F5 | 	and	_var01, #3
019b0     E8 D0 61 C6 |  if_b	neg	_var01, _var01
019b4     01 D0 65 F0 | 	shl	_var01, #1
019b8     03 E6 05 F6 | 	mov	_var12, #3
019bc     E8 E6 61 F0 | 	shl	_var12, _var01
019c0                 | '     b:=b & !(%11<<((x//4)<<1))
019c0     F3 E4 21 F5 | 	andn	_var11, _var12
019c4     E8 F4 61 F0 | 	shl	arg03, _var01
019c8                 | '     b:=b |(c<<((x//4)<<1))
019c8     FA E4 41 F5 | 	or	_var11, arg03
019cc     90 BC 05 F1 | 	add	objptr, #144
019d0     DE E8 01 FB | 	rdlong	_var13, objptr
019d4     90 BC 85 F1 | 	sub	objptr, #144
019d8     02 E8 65 F0 | 	shl	_var13, #2
019dc     F9 E8 01 FD | 	qmul	_var13, arg02
019e0     18 EA 61 FD | 	getqx	_var14
019e4     DE EC 01 FB | 	rdlong	_var15, objptr
019e8     F5 EC 01 F1 | 	add	_var15, _var14
019ec     F1 EC 01 F1 | 	add	_var15, _var10
019f0                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
019f0     F6 E4 41 FC | 	wrbyte	_var11, _var15
019f4                 | LR__0070
019f4                 | _hng030rm_putpixel2_ret
019f4     2D 00 64 FD | 	ret
019f8                 | 
019f8                 | ' 
019f8                 | ' 
019f8                 | ' pub putpixel4(x,y,c) |byte b
019f8                 | _hng030rm_putpixel4
019f8                 | ' 
019f8                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
019f8     00 D0 05 F6 | 	mov	_var01, #0
019fc     00 F0 5D F2 | 	cmps	arg01, #0 wcz
01a00     01 D0 65 36 |  if_ae	neg	_var01, #1
01a04     00 D2 05 F6 | 	mov	_var02, #0
01a08     90 BC 05 F1 | 	add	objptr, #144
01a0c     DE D4 01 FB | 	rdlong	_var03, objptr
01a10     04 D4 65 F0 | 	shl	_var03, #4
01a14     EA F0 59 F2 | 	cmps	arg01, _var03 wcz
01a18     01 D2 65 C6 |  if_b	neg	_var02, #1
01a1c     E9 D0 01 F5 | 	and	_var01, _var02
01a20     00 D6 05 F6 | 	mov	_var04, #0
01a24     00 F2 5D F2 | 	cmps	arg02, #0 wcz
01a28     01 D6 65 36 |  if_ae	neg	_var04, #1
01a2c     EB D0 01 F5 | 	and	_var01, _var04
01a30     00 D8 05 F6 | 	mov	_var05, #0
01a34     04 BC 05 F1 | 	add	objptr, #4
01a38     DE DA 01 FB | 	rdlong	_var06, objptr
01a3c     94 BC 85 F1 | 	sub	objptr, #148
01a40     ED F2 59 F2 | 	cmps	arg02, _var06 wcz
01a44     01 D8 65 C6 |  if_b	neg	_var05, #1
01a48     EC D0 C9 F7 | 	test	_var01, _var05 wz
01a4c     7C 00 90 AD |  if_e	jmp	#LR__0071
01a50     90 BC 05 F1 | 	add	objptr, #144
01a54     DE DC 01 FB | 	rdlong	_var07, objptr
01a58     90 BC 85 F1 | 	sub	objptr, #144
01a5c     02 DC 65 F0 | 	shl	_var07, #2
01a60     F9 DC 01 FD | 	qmul	_var07, arg02
01a64     18 DE 61 FD | 	getqx	_var08
01a68     DE E0 01 FB | 	rdlong	_var09, objptr
01a6c     EF E0 01 F1 | 	add	_var09, _var08
01a70     F8 E2 01 F6 | 	mov	_var10, arg01
01a74     01 E2 45 F0 | 	shr	_var10, #1
01a78     F1 E0 01 F1 | 	add	_var09, _var10
01a7c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01a7c     F0 E4 C1 FA | 	rdbyte	_var11, _var09
01a80     F8 D0 51 F6 | 	abs	_var01, arg01 wc
01a84     01 D0 05 F5 | 	and	_var01, #1
01a88     E8 D0 61 C6 |  if_b	neg	_var01, _var01
01a8c     02 D0 65 F0 | 	shl	_var01, #2
01a90     0F E6 05 F6 | 	mov	_var12, #15
01a94     E8 E6 61 F0 | 	shl	_var12, _var01
01a98                 | '     b:=b & !(%1111<<((x//2)<<2))
01a98     F3 E4 21 F5 | 	andn	_var11, _var12
01a9c     E8 F4 61 F0 | 	shl	arg03, _var01
01aa0                 | '     b:=b |(c<<((x//2)<<2))
01aa0     FA E4 41 F5 | 	or	_var11, arg03
01aa4     90 BC 05 F1 | 	add	objptr, #144
01aa8     DE E8 01 FB | 	rdlong	_var13, objptr
01aac     90 BC 85 F1 | 	sub	objptr, #144
01ab0     02 E8 65 F0 | 	shl	_var13, #2
01ab4     F9 E8 01 FD | 	qmul	_var13, arg02
01ab8     18 EA 61 FD | 	getqx	_var14
01abc     DE EC 01 FB | 	rdlong	_var15, objptr
01ac0     F5 EC 01 F1 | 	add	_var15, _var14
01ac4     F1 EC 01 F1 | 	add	_var15, _var10
01ac8                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01ac8     F6 E4 41 FC | 	wrbyte	_var11, _var15
01acc                 | LR__0071
01acc                 | _hng030rm_putpixel4_ret
01acc     2D 00 64 FD | 	ret
01ad0                 | 
01ad0                 | ' 
01ad0                 | ' 
01ad0                 | ' pub putpixel8(x,y,c)
01ad0                 | _hng030rm_putpixel8
01ad0                 | ' 
01ad0                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01ad0     00 D0 05 F6 | 	mov	_var01, #0
01ad4     00 F0 5D F2 | 	cmps	arg01, #0 wcz
01ad8     01 D0 65 36 |  if_ae	neg	_var01, #1
01adc     00 D2 05 F6 | 	mov	_var02, #0
01ae0     90 BC 05 F1 | 	add	objptr, #144
01ae4     DE D4 01 FB | 	rdlong	_var03, objptr
01ae8     02 D4 65 F0 | 	shl	_var03, #2
01aec     EA F0 59 F2 | 	cmps	arg01, _var03 wcz
01af0     01 D2 65 C6 |  if_b	neg	_var02, #1
01af4     E9 D0 01 F5 | 	and	_var01, _var02
01af8     00 D6 05 F6 | 	mov	_var04, #0
01afc     00 F2 5D F2 | 	cmps	arg02, #0 wcz
01b00     01 D6 65 36 |  if_ae	neg	_var04, #1
01b04     EB D0 01 F5 | 	and	_var01, _var04
01b08     00 D8 05 F6 | 	mov	_var05, #0
01b0c     04 BC 05 F1 | 	add	objptr, #4
01b10     DE DA 01 FB | 	rdlong	_var06, objptr
01b14     94 BC 85 F1 | 	sub	objptr, #148
01b18     ED F2 59 F2 | 	cmps	arg02, _var06 wcz
01b1c     01 D8 65 C6 |  if_b	neg	_var05, #1
01b20     EC D0 C9 F7 | 	test	_var01, _var05 wz
01b24     28 00 90 AD |  if_e	jmp	#LR__0072
01b28     90 BC 05 F1 | 	add	objptr, #144
01b2c     DE DC 01 FB | 	rdlong	_var07, objptr
01b30     90 BC 85 F1 | 	sub	objptr, #144
01b34     02 DC 65 F0 | 	shl	_var07, #2
01b38     F9 DC 01 FD | 	qmul	_var07, arg02
01b3c     18 DE 61 FD | 	getqx	_var08
01b40     DE E0 01 FB | 	rdlong	_var09, objptr
01b44     EF E0 01 F1 | 	add	_var09, _var08
01b48     F8 E0 01 F1 | 	add	_var09, arg01
01b4c                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01b4c     F0 F4 41 FC | 	wrbyte	arg03, _var09
01b50                 | LR__0072
01b50                 | _hng030rm_putpixel8_ret
01b50     2D 00 64 FD | 	ret
01b54                 | 
01b54                 | ' 
01b54                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
01b54                 | ' 
01b54                 | ' pub setbordercolor(r,g,b) | color
01b54                 | _hng030rm_setbordercolor
01b54     18 F0 65 F0 | 	shl	arg01, #24
01b58     10 F2 65 F0 | 	shl	arg02, #16
01b5c     F9 F0 01 F1 | 	add	arg01, arg02
01b60     08 F4 65 F0 | 	shl	arg03, #8
01b64     FA F0 01 F1 | 	add	arg01, arg03
01b68                 | ' 
01b68                 | ' color:=r<<24+g<<16+b<<8
01b68                 | ' bordercolor:=color
01b68     2C BC 05 F1 | 	add	objptr, #44
01b6c     DE F0 61 FC | 	wrlong	arg01, objptr
01b70     2C BC 85 F1 | 	sub	objptr, #44
01b74                 | _hng030rm_setbordercolor_ret
01b74     2D 00 64 FD | 	ret
01b78                 | 
01b78                 | ' 
01b78                 | ' 
01b78                 | ' '*************************************************************************
01b78                 | ' '                                                                        *
01b78                 | ' '  Text functions                                                        *
01b78                 | ' '                                                                        *
01b78                 | ' '*************************************************************************
01b78                 | ' 
01b78                 | ' ''---------- Clear the screen, set its foreground/background color
01b78                 | ' 
01b78                 | ' pub cls(fc,bc)   :c
01b78                 | _hng030rm_cls
01b78     07 5A 05 F6 | 	mov	COUNT_, #7
01b7c     B0 00 A0 FD | 	call	#pushregs_
01b80     F8 F8 01 F6 | 	mov	local01, arg01
01b84     F9 FA 01 F6 | 	mov	local02, arg02
01b88                 | ' 
01b88                 | ' if (graphmode<512)
01b88     C4 BC 05 F1 | 	add	objptr, #196
01b8c     DE FC 01 FB | 	rdlong	local03, objptr
01b90     C4 BC 85 F1 | 	sub	objptr, #196
01b94     01 00 00 FF 
01b98     00 FC 5D F2 | 	cmps	local03, ##512 wcz
01b9c     34 00 90 3D |  if_ae	jmp	#LR__0073
01ba0     FC FE 01 F6 | 	mov	local04, local01
01ba4     18 FE 65 F0 | 	shl	local04, #24
01ba8     FD 00 02 F6 | 	mov	local05, local02
01bac     10 00 66 F0 | 	shl	local05, #16
01bb0     00 FF 01 F1 | 	add	local04, local05
01bb4     20 FE 05 F1 | 	add	local04, #32
01bb8                 | '   c:=fc<<24+bc<<16+$20
01bb8                 | '   longfill(buf_ptr,c,buflen)
01bb8     DE F0 01 FB | 	rdlong	arg01, objptr
01bbc     30 BC 05 F1 | 	add	objptr, #48
01bc0     DE F4 01 FB | 	rdlong	arg03, objptr
01bc4     30 BC 85 F1 | 	sub	objptr, #48
01bc8     FF F2 01 F6 | 	mov	arg02, local04
01bcc     A8 00 A0 FD | 	call	#\builtin_longfill_
01bd0                 | ' else
01bd0     AC 00 90 FD | 	jmp	#LR__0079
01bd4                 | LR__0073
01bd4                 | '   if (graphmode & 48) ==48
01bd4     C4 BC 05 F1 | 	add	objptr, #196
01bd8     DE FC 01 FB | 	rdlong	local03, objptr
01bdc     C4 BC 85 F1 | 	sub	objptr, #196
01be0     30 FC 05 F5 | 	and	local03, #48
01be4     30 FC 0D F2 | 	cmp	local03, #48 wz
01be8                 | '     c:=bc
01be8     FD FE 01 A6 |  if_e	mov	local04, local02
01bec     74 00 90 AD |  if_e	jmp	#LR__0078
01bf0                 | '   elseif (graphmode & 48) ==32
01bf0     C4 BC 05 F1 | 	add	objptr, #196
01bf4     DE FC 01 FB | 	rdlong	local03, objptr
01bf8     C4 BC 85 F1 | 	sub	objptr, #196
01bfc     30 FC 05 F5 | 	and	local03, #48
01c00     20 FC 0D F2 | 	cmp	local03, #32 wz
01c04     10 00 90 5D |  if_ne	jmp	#LR__0074
01c08     FD FE 01 F6 | 	mov	local04, local02
01c0c     04 FE 65 F0 | 	shl	local04, #4
01c10     FD FE 01 F1 | 	add	local04, local02
01c14                 | '     c:=bc<<4+bc
01c14     4C 00 90 FD | 	jmp	#LR__0077
01c18                 | LR__0074
01c18                 | '   elseif (graphmode & 48) ==16
01c18     C4 BC 05 F1 | 	add	objptr, #196
01c1c     DE FC 01 FB | 	rdlong	local03, objptr
01c20     C4 BC 85 F1 | 	sub	objptr, #196
01c24     30 FC 05 F5 | 	and	local03, #48
01c28     10 FC 0D F2 | 	cmp	local03, #16 wz
01c2c     28 00 90 5D |  if_ne	jmp	#LR__0075
01c30     FD FE 01 F6 | 	mov	local04, local02
01c34     06 FE 65 F0 | 	shl	local04, #6
01c38     FD 02 02 F6 | 	mov	local06, local02
01c3c     04 02 66 F0 | 	shl	local06, #4
01c40     01 FF 01 F1 | 	add	local04, local06
01c44     FD 04 02 F6 | 	mov	local07, local02
01c48     02 04 66 F0 | 	shl	local07, #2
01c4c     02 FF 01 F1 | 	add	local04, local07
01c50     FD FE 01 F1 | 	add	local04, local02
01c54                 | '     c:=bc<<6+bc<<4+bc<<2+bc
01c54                 | '   else
01c54     0C 00 90 FD | 	jmp	#LR__0076
01c58                 | LR__0075
01c58                 | '     if bc==1
01c58     01 FA 0D F2 | 	cmp	local02, #1 wz
01c5c                 | '       c:=255
01c5c     FF FE 05 A6 |  if_e	mov	local04, #255
01c60                 | '     else
01c60                 | '       c:=0
01c60     00 FE 05 56 |  if_ne	mov	local04, #0
01c64                 | LR__0076
01c64                 | LR__0077
01c64                 | LR__0078
01c64     30 BC 05 F1 | 	add	objptr, #48
01c68     DE F4 01 FB | 	rdlong	arg03, objptr
01c6c     30 BC 85 F1 | 	sub	objptr, #48
01c70     02 F4 65 F0 | 	shl	arg03, #2
01c74                 | '   bytefill(buf_ptr,c,buflen*4)
01c74     DE F0 01 FB | 	rdlong	arg01, objptr
01c78     FF F2 01 F6 | 	mov	arg02, local04
01c7c     A0 00 A0 FD | 	call	#\builtin_bytefill_
01c80                 | LR__0079
01c80                 | ' setwritecolors(fc,bc)
01c80                 | ' 
01c80                 | ' 
01c80                 | ' write_color:=ff
01c80     38 BC 05 F1 | 	add	objptr, #56
01c84     DE F8 61 FC | 	wrlong	local01, objptr
01c88                 | ' write_background:=bb
01c88     04 BC 05 F1 | 	add	objptr, #4
01c8c     DE FA 61 FC | 	wrlong	local02, objptr
01c90                 | ' cursor_x:=0
01c90     08 BC 85 F1 | 	sub	objptr, #8
01c94     DE 00 48 FC | 	wrbyte	#0, objptr
01c98                 | ' cursor_y:=0
01c98     01 BC 05 F1 | 	add	objptr, #1
01c9c     DE 00 48 FC | 	wrbyte	#0, objptr
01ca0     35 BC 85 F1 | 	sub	objptr, #53
01ca4     FF CC 01 F6 | 	mov	result1, local04
01ca8     AF F0 03 F6 | 	mov	ptra, fp
01cac     BF 00 A0 FD | 	call	#popregs_
01cb0                 | _hng030rm_cls_ret
01cb0     2D 00 64 FD | 	ret
01cb4                 | 
01cb4                 | ' 
01cb4                 | ' ''--------- Output a string at position x,y without changing colors
01cb4                 | ' 
01cb4                 | ' pub outtextxy(x,y,text) | iii
01cb4                 | _hng030rm_outtextxy
01cb4     0B 5A 05 F6 | 	mov	COUNT_, #11
01cb8     B0 00 A0 FD | 	call	#pushregs_
01cbc     F8 F8 01 F6 | 	mov	local01, arg01
01cc0                 | ' 
01cc0                 | ' repeat iii from 0 to strsize(text)-1
01cc0     00 FA 05 F6 | 	mov	local02, #0
01cc4     FA F0 01 F6 | 	mov	arg01, arg03
01cc8     00 FC 05 F6 | 	mov	local03, #0
01ccc     40 E3 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
01cd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
01cd4                 | LR__0080
01cd4     F8 FE C9 FA | 	rdbyte	local04, arg01 wz
01cd8     01 FC 05 51 |  if_ne	add	local03, #1
01cdc     01 F0 05 51 |  if_ne	add	arg01, #1
01ce0     F0 FF 9F 5D |  if_ne	jmp	#LR__0080
01ce4                 | LR__0081
01ce4     FE CC 01 F6 | 	mov	result1, local03
01ce8     E6 00 02 F6 | 	mov	local05, result1
01cec     01 00 86 F1 | 	sub	local05, #1
01cf0     00 00 5E F2 | 	cmps	local05, #0 wcz
01cf4     01 02 06 16 |  if_a	mov	local06, #1
01cf8     01 02 66 E6 |  if_be	neg	local06, #1
01cfc     01 01 02 F1 | 	add	local05, local06
01d00     4C E3 9F FE | 	loc	pa,	#(@LR__0083-@LR__0082)
01d04     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d08                 | LR__0082
01d08     90 BC 05 F1 | 	add	objptr, #144
01d0c     DE 04 02 FB | 	rdlong	local07, objptr
01d10     90 BC 85 F1 | 	sub	objptr, #144
01d14     F9 04 02 FD | 	qmul	local07, arg02
01d18     18 06 62 FD | 	getqx	local08
01d1c     FC 06 02 F1 | 	add	local08, local01
01d20     FD 06 02 F1 | 	add	local08, local02
01d24     02 06 66 F0 | 	shl	local08, #2
01d28     DE 08 02 FB | 	rdlong	local09, objptr
01d2c     03 09 02 F1 | 	add	local09, local08
01d30     04 0B 02 FB | 	rdlong	local10, local09
01d34     FF 0A 26 F5 | 	andn	local10, #255
01d38     FA 0C 02 F6 | 	mov	local11, arg03
01d3c     FD 0C 02 F1 | 	add	local11, local02
01d40     06 05 C2 FA | 	rdbyte	local07, local11
01d44     02 0B 42 F5 | 	or	local10, local07
01d48                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
01d48     04 0B 62 FC | 	wrlong	local10, local09
01d4c     01 FB 01 F1 | 	add	local02, local06
01d50     00 FB 09 F2 | 	cmp	local02, local05 wz
01d54     B0 FF 9F 5D |  if_ne	jmp	#LR__0082
01d58                 | LR__0083
01d58     AF F0 03 F6 | 	mov	ptra, fp
01d5c     BF 00 A0 FD | 	call	#popregs_
01d60                 | _hng030rm_outtextxy_ret
01d60     2D 00 64 FD | 	ret
01d64                 | 
01d64                 | ' 
01d64                 | ' ''--------- Output a string at the cursor position, move the cursor
01d64                 | ' 
01d64                 | ' pub write(text) | iii,c,ncx,ncy
01d64                 | _hng030rm_write
01d64     11 5A 05 F6 | 	mov	COUNT_, #17
01d68     B0 00 A0 FD | 	call	#pushregs_
01d6c     F8 F8 01 F6 | 	mov	local01, arg01
01d70     38 BC 05 F1 | 	add	objptr, #56
01d74     DE FA 01 FB | 	rdlong	local02, objptr
01d78     18 FA 65 F0 | 	shl	local02, #24
01d7c     04 BC 05 F1 | 	add	objptr, #4
01d80     DE FC 01 FB | 	rdlong	local03, objptr
01d84     10 FC 65 F0 | 	shl	local03, #16
01d88     FE FA 01 F1 | 	add	local02, local03
01d8c                 | ' 
01d8c                 | ' c:=write_color<<24+write_background<<16
01d8c                 | ' 'debug(uhex_long(write_color))
01d8c                 | ' ncy:=cursor_y
01d8c     07 BC 85 F1 | 	sub	objptr, #7
01d90     DE FE C1 FA | 	rdbyte	local04, objptr
01d94                 | ' ncx:=cursor_x+strsize(text)
01d94     01 BC 85 F1 | 	sub	objptr, #1
01d98     DE 00 C2 FA | 	rdbyte	local05, objptr
01d9c     34 BC 85 F1 | 	sub	objptr, #52
01da0     FC F0 01 F6 | 	mov	arg01, local01
01da4     00 02 06 F6 | 	mov	local06, #0
01da8     64 E2 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
01dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
01db0                 | LR__0084
01db0     F8 04 CA FA | 	rdbyte	local07, arg01 wz
01db4     01 02 06 51 |  if_ne	add	local06, #1
01db8     01 F0 05 51 |  if_ne	add	arg01, #1
01dbc     F0 FF 9F 5D |  if_ne	jmp	#LR__0084
01dc0                 | LR__0085
01dc0     01 CD 01 F6 | 	mov	result1, local06
01dc4     01 01 02 F1 | 	add	local05, local06
01dc8     00 07 02 F6 | 	mov	local08, local05
01dcc     60 E2 9F FE | 	loc	pa,	#(@LR__0087-@LR__0086)
01dd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
01dd4                 | ' repeat while ncx>cpl-1
01dd4                 | LR__0086
01dd4     90 BC 05 F1 | 	add	objptr, #144
01dd8     DE 00 02 FB | 	rdlong	local05, objptr
01ddc     90 BC 85 F1 | 	sub	objptr, #144
01de0     01 00 86 F1 | 	sub	local05, #1
01de4     00 07 5A F2 | 	cmps	local08, local05 wcz
01de8     18 00 90 ED |  if_be	jmp	#LR__0088
01dec                 | '   ncx-=cpl
01dec     90 BC 05 F1 | 	add	objptr, #144
01df0     DE 08 02 FB | 	rdlong	local09, objptr
01df4     90 BC 85 F1 | 	sub	objptr, #144
01df8     04 07 82 F1 | 	sub	local08, local09
01dfc                 | '   ncy+=1
01dfc     01 FE 05 F1 | 	add	local04, #1
01e00     D0 FF 9F FD | 	jmp	#LR__0086
01e04                 | LR__0087
01e04                 | LR__0088
01e04                 | ' repeat while ncy>lines-1
01e04                 | LR__0089
01e04     94 BC 05 F1 | 	add	objptr, #148
01e08     DE 00 02 FB | 	rdlong	local05, objptr
01e0c     94 BC 85 F1 | 	sub	objptr, #148
01e10     01 00 86 F1 | 	sub	local05, #1
01e14     00 FF 59 F2 | 	cmps	local04, local05 wcz
01e18     20 00 90 ED |  if_be	jmp	#LR__0090
01e1c                 | '   ncy-=1
01e1c     01 FE 85 F1 | 	sub	local04, #1
01e20                 | '   scrollup()
01e20     60 01 B0 FD | 	call	#_hng030rm_scrollup
01e24                 | '   cursor_y-=1
01e24     35 BC 05 F1 | 	add	objptr, #53
01e28     DE 00 C2 FA | 	rdbyte	local05, objptr
01e2c     01 00 86 F1 | 	sub	local05, #1
01e30     DE 00 42 FC | 	wrbyte	local05, objptr
01e34     35 BC 85 F1 | 	sub	objptr, #53
01e38     C8 FF 9F FD | 	jmp	#LR__0089
01e3c                 | LR__0090
01e3c                 | ' 
01e3c                 | ' repeat iii from 0 to strsize(text)-1
01e3c     00 0A 06 F6 | 	mov	local10, #0
01e40     FC F0 01 F6 | 	mov	arg01, local01
01e44     00 02 06 F6 | 	mov	local06, #0
01e48     C4 E1 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
01e4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e50                 | LR__0091
01e50     F8 04 CA FA | 	rdbyte	local07, arg01 wz
01e54     01 02 06 51 |  if_ne	add	local06, #1
01e58     01 F0 05 51 |  if_ne	add	arg01, #1
01e5c     F0 FF 9F 5D |  if_ne	jmp	#LR__0091
01e60                 | LR__0092
01e60     01 CD 01 F6 | 	mov	result1, local06
01e64     E6 0C 02 F6 | 	mov	local11, result1
01e68     01 0C 86 F1 | 	sub	local11, #1
01e6c     00 0C 5E F2 | 	cmps	local11, #0 wcz
01e70     01 0E 06 16 |  if_a	mov	local12, #1
01e74     01 0E 66 E6 |  if_be	neg	local12, #1
01e78     07 0D 02 F1 | 	add	local11, local12
01e7c     D8 E1 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
01e80     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e84                 | LR__0093
01e84     90 BC 05 F1 | 	add	objptr, #144
01e88     DE 10 02 FB | 	rdlong	local13, objptr
01e8c     5B BC 85 F1 | 	sub	objptr, #91
01e90     DE 12 C2 FA | 	rdbyte	local14, objptr
01e94     09 11 02 FD | 	qmul	local13, local14
01e98     18 14 62 FD | 	getqx	local15
01e9c     01 BC 85 F1 | 	sub	objptr, #1
01ea0     DE 10 C2 FA | 	rdbyte	local13, objptr
01ea4     34 BC 85 F1 | 	sub	objptr, #52
01ea8     08 15 02 F1 | 	add	local15, local13
01eac     05 15 02 F1 | 	add	local15, local10
01eb0     02 14 66 F0 | 	shl	local15, #2
01eb4     DE 16 02 FB | 	rdlong	local16, objptr
01eb8     0A 17 02 F1 | 	add	local16, local15
01ebc     0B 19 02 FB | 	rdlong	local17, local16
01ec0     7F 00 00 FF 
01ec4     FF 19 06 F5 | 	and	local17, ##65535
01ec8     FD 18 42 F5 | 	or	local17, local02
01ecc                 | ' 
01ecc                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
01ecc     0B 19 62 FC | 	wrlong	local17, local16
01ed0     07 0B 02 F1 | 	add	local10, local12
01ed4     06 0B 0A F2 | 	cmp	local10, local11 wz
01ed8     A8 FF 9F 5D |  if_ne	jmp	#LR__0093
01edc                 | LR__0094
01edc                 | ' 
01edc                 | ' outtextxy(cursor_x,cursor_y,text)
01edc     34 BC 05 F1 | 	add	objptr, #52
01ee0     DE F0 C1 FA | 	rdbyte	arg01, objptr
01ee4     01 BC 05 F1 | 	add	objptr, #1
01ee8     DE F2 C1 FA | 	rdbyte	arg02, objptr
01eec     35 BC 85 F1 | 	sub	objptr, #53
01ef0     FC F4 01 F6 | 	mov	arg03, local01
01ef4     BC FD BF FD | 	call	#_hng030rm_outtextxy
01ef8                 | ' 
01ef8                 | ' cursor_x:=ncx
01ef8     34 BC 05 F1 | 	add	objptr, #52
01efc     DE 06 42 FC | 	wrbyte	local08, objptr
01f00                 | ' cursor_y:=ncy
01f00     01 BC 05 F1 | 	add	objptr, #1
01f04     DE FE 41 FC | 	wrbyte	local04, objptr
01f08     35 BC 85 F1 | 	sub	objptr, #53
01f0c     AF F0 03 F6 | 	mov	ptra, fp
01f10     BF 00 A0 FD | 	call	#popregs_
01f14                 | _hng030rm_write_ret
01f14     2D 00 64 FD | 	ret
01f18                 | 
01f18                 | ' 
01f18                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
01f18                 | ' 
01f18                 | ' pub writeln(text)
01f18                 | _hng030rm_writeln
01f18     03 5A 05 F6 | 	mov	COUNT_, #3
01f1c     B0 00 A0 FD | 	call	#pushregs_
01f20                 | ' 
01f20                 | ' write(text)
01f20     40 FE BF FD | 	call	#_hng030rm_write
01f24                 | ' cursor_x:=0
01f24     34 BC 05 F1 | 	add	objptr, #52
01f28     DE 00 48 FC | 	wrbyte	#0, objptr
01f2c                 | ' cursor_y+=1
01f2c     01 BC 05 F1 | 	add	objptr, #1
01f30     DE F8 C1 FA | 	rdbyte	local01, objptr
01f34     01 F8 05 F1 | 	add	local01, #1
01f38     DE F8 41 FC | 	wrbyte	local01, objptr
01f3c                 | ' if (cursor_y>lines-1)
01f3c     5F BC 05 F1 | 	add	objptr, #95
01f40     DE F8 01 FB | 	rdlong	local01, objptr
01f44     01 F8 85 F1 | 	sub	local01, #1
01f48     5F BC 85 F1 | 	sub	objptr, #95
01f4c     DE FA C1 FA | 	rdbyte	local02, objptr
01f50     35 BC 85 F1 | 	sub	objptr, #53
01f54     FC FA 59 F2 | 	cmps	local02, local01 wcz
01f58     1C 00 90 ED |  if_be	jmp	#LR__0095
01f5c                 | '   scrollup()
01f5c     24 00 B0 FD | 	call	#_hng030rm_scrollup
01f60     94 BC 05 F1 | 	add	objptr, #148
01f64     DE FC 01 FB | 	rdlong	local03, objptr
01f68     01 FC 85 F1 | 	sub	local03, #1
01f6c                 | '   cursor_y:=lines-1
01f6c     5F BC 85 F1 | 	sub	objptr, #95
01f70     DE FC 41 FC | 	wrbyte	local03, objptr
01f74     35 BC 85 F1 | 	sub	objptr, #53
01f78                 | LR__0095
01f78     AF F0 03 F6 | 	mov	ptra, fp
01f7c     BF 00 A0 FD | 	call	#popregs_
01f80                 | _hng030rm_writeln_ret
01f80     2D 00 64 FD | 	ret
01f84                 | 
01f84                 | ' 
01f84                 | ' ''-----------  Scroll the screen one line up
01f84                 | ' 
01f84                 | ' pub scrollup() | i
01f84                 | _hng030rm_scrollup
01f84     0A 5A 05 F6 | 	mov	COUNT_, #10
01f88     B0 00 A0 FD | 	call	#pushregs_
01f8c     90 BC 05 F1 | 	add	objptr, #144
01f90     DE F8 01 FB | 	rdlong	local01, objptr
01f94     90 BC 85 F1 | 	sub	objptr, #144
01f98     02 F8 65 F0 | 	shl	local01, #2
01f9c     DE F2 01 FB | 	rdlong	arg02, objptr
01fa0     FC F2 01 F1 | 	add	arg02, local01
01fa4     30 BC 05 F1 | 	add	objptr, #48
01fa8     DE F4 01 FB | 	rdlong	arg03, objptr
01fac     60 BC 05 F1 | 	add	objptr, #96
01fb0     DE FA 01 FB | 	rdlong	local02, objptr
01fb4     90 BC 85 F1 | 	sub	objptr, #144
01fb8     FD F4 81 F1 | 	sub	arg03, local02
01fbc                 | ' 
01fbc                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
01fbc     DE F0 01 FB | 	rdlong	arg01, objptr
01fc0     F8 0C B0 FD | 	call	#__system__longmove
01fc4                 | ' repeat i from buflen-cpl to buflen-1
01fc4     30 BC 05 F1 | 	add	objptr, #48
01fc8     DE FC 01 FB | 	rdlong	local03, objptr
01fcc     60 BC 05 F1 | 	add	objptr, #96
01fd0     DE FA 01 FB | 	rdlong	local02, objptr
01fd4     FD FC 81 F1 | 	sub	local03, local02
01fd8     60 BC 85 F1 | 	sub	objptr, #96
01fdc     DE FE 01 FB | 	rdlong	local04, objptr
01fe0     01 FE 85 F1 | 	sub	local04, #1
01fe4     DE 00 02 FB | 	rdlong	local05, objptr
01fe8     60 BC 05 F1 | 	add	objptr, #96
01fec     DE 02 02 FB | 	rdlong	local06, objptr
01ff0     90 BC 85 F1 | 	sub	objptr, #144
01ff4     01 01 82 F1 | 	sub	local05, local06
01ff8     00 FF 59 F2 | 	cmps	local04, local05 wcz
01ffc     01 04 06 16 |  if_a	mov	local07, #1
02000     01 04 66 E6 |  if_be	neg	local07, #1
02004     02 FF 01 F1 | 	add	local04, local07
02008     24 E0 9F FE | 	loc	pa,	#(@LR__0097-@LR__0096)
0200c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02010                 | LR__0096
02010     FE 06 02 F6 | 	mov	local08, local03
02014     02 06 66 F0 | 	shl	local08, #2
02018     DE 08 02 FB | 	rdlong	local09, objptr
0201c     03 09 02 F1 | 	add	local09, local08
02020     04 0B 02 FB | 	rdlong	local10, local09
02024     80 FF 7F FF 
02028     00 0A 06 F5 | 	and	local10, ##-65536
0202c     20 0A 46 F5 | 	or	local10, #32
02030                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02030     04 0B 62 FC | 	wrlong	local10, local09
02034     02 FD 01 F1 | 	add	local03, local07
02038     FF FC 09 F2 | 	cmp	local03, local04 wz
0203c     D0 FF 9F 5D |  if_ne	jmp	#LR__0096
02040                 | LR__0097
02040     AF F0 03 F6 | 	mov	ptra, fp
02044     BF 00 A0 FD | 	call	#popregs_
02048                 | _hng030rm_scrollup_ret
02048     2D 00 64 FD | 	ret
0204c                 | 
0204c                 | ' 
0204c                 | ' 
0204c                 | ' '*************************************************************************
0204c                 | ' '                                                                        *
0204c                 | ' '  Conversions                                                           *
0204c                 | ' '                                                                        *
0204c                 | ' '*************************************************************************
0204c                 | ' 
0204c                 | ' ''---------- Convert a integer to dec string, return a pointer
0204c                 | ' 
0204c                 | ' pub inttostr(i):result |q,pos,k,j
0204c                 | _hng030rm_inttostr
0204c     07 5A 05 F6 | 	mov	COUNT_, #7
02050     B0 00 A0 FD | 	call	#pushregs_
02054     F8 F8 01 F6 | 	mov	local01, arg01
02058                 | ' 
02058                 | ' j:=i
02058     FC FA 09 F6 | 	mov	local02, local01 wz
0205c                 | ' pos:=10
0205c     0A FC 05 F6 | 	mov	local03, #10
02060                 | ' k:=0
02060     00 FE 05 F6 | 	mov	local04, #0
02064                 | ' 
02064                 | ' if (j==0)
02064     18 00 90 5D |  if_ne	jmp	#LR__0098
02068                 | '   n_string[0]:=48
02068     44 BC 05 F1 | 	add	objptr, #68
0206c     DE 60 48 FC | 	wrbyte	#48, objptr
02070                 | '   n_string[1]:=0
02070     01 BC 05 F1 | 	add	objptr, #1
02074     DE 00 48 FC | 	wrbyte	#0, objptr
02078     45 BC 85 F1 | 	sub	objptr, #69
0207c                 | ' 
0207c                 | ' else
0207c     C4 00 90 FD | 	jmp	#LR__0105
02080                 | LR__0098
02080                 | '   if (j<0)
02080     00 FA 5D F2 | 	cmps	local02, #0 wcz
02084                 | '     j:=0-j
02084     FD FA 61 C6 |  if_b	neg	local02, local02
02088                 | '     k:=45
02088     2D FE 05 C6 |  if_b	mov	local04, #45
0208c                 | ' 
0208c                 | '   n_string[11]:=0
0208c     4F BC 05 F1 | 	add	objptr, #79
02090     DE 00 48 FC | 	wrbyte	#0, objptr
02094     4F BC 85 F1 | 	sub	objptr, #79
02098     A4 DF 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
0209c     93 00 A0 FD | 	call	#FCACHE_LOAD_
020a0                 | '   repeat while (pos>-1)
020a0                 | LR__0099
020a0     FF FF 7F FF 
020a4     FF FD 5D F2 | 	cmps	local03, ##-1 wcz
020a8     34 00 90 ED |  if_be	jmp	#LR__0101
020ac     FD 98 02 F6 | 	mov	muldiva_, local02
020b0     0A 9A 06 F6 | 	mov	muldivb_, #10
020b4     D0 00 A0 FD | 	call	#divide_
020b8     4C 01 02 F6 | 	mov	local05, muldiva_
020bc                 | '     q:=j//10
020bc                 | '     q:=48+q
020bc     30 00 06 F1 | 	add	local05, #48
020c0     FE 02 02 F6 | 	mov	local06, local03
020c4     44 BC 05 F1 | 	add	objptr, #68
020c8     DE 02 02 F1 | 	add	local06, objptr
020cc                 | '     n_string[pos]:=q
020cc     01 01 42 FC | 	wrbyte	local05, local06
020d0                 | '     j:=j/10
020d0     4D FB 01 F6 | 	mov	local02, muldivb_
020d4                 | '     pos-=1
020d4     01 FC 85 F1 | 	sub	local03, #1
020d8     44 BC 85 F1 | 	sub	objptr, #68
020dc     C0 FF 9F FD | 	jmp	#LR__0099
020e0                 | LR__0100
020e0                 | LR__0101
020e0                 | '   repeat while n_string[0]==48
020e0                 | LR__0102
020e0     44 BC 05 F1 | 	add	objptr, #68
020e4     DE 04 C2 FA | 	rdbyte	local07, objptr
020e8     44 BC 85 F1 | 	sub	objptr, #68
020ec     30 04 0E F2 | 	cmp	local07, #48 wz
020f0     20 00 90 5D |  if_ne	jmp	#LR__0103
020f4     44 BC 05 F1 | 	add	objptr, #68
020f8     DE F0 01 F6 | 	mov	arg01, objptr
020fc     44 BC 85 F1 | 	sub	objptr, #68
02100     F8 F2 01 F6 | 	mov	arg02, arg01
02104     01 F2 05 F1 | 	add	arg02, #1
02108                 | '     bytemove(@n_string,@n_string+1,12)
02108     0C F4 05 F6 | 	mov	arg03, #12
0210c     1C 0B B0 FD | 	call	#__system____builtin_memmove
02110     CC FF 9F FD | 	jmp	#LR__0102
02114                 | LR__0103
02114                 | ' 
02114                 | '   if k==45
02114     2D FE 0D F2 | 	cmp	local04, #45 wz
02118     28 00 90 5D |  if_ne	jmp	#LR__0104
0211c     44 BC 05 F1 | 	add	objptr, #68
02120     DE F2 01 F6 | 	mov	arg02, objptr
02124     44 BC 85 F1 | 	sub	objptr, #68
02128     F9 F0 01 F6 | 	mov	arg01, arg02
0212c     01 F0 05 F1 | 	add	arg01, #1
02130                 | '      bytemove(@n_string+1,@n_string,12)
02130     0C F4 05 F6 | 	mov	arg03, #12
02134     F4 0A B0 FD | 	call	#__system____builtin_memmove
02138                 | '      n_string[0]:=k
02138     44 BC 05 F1 | 	add	objptr, #68
0213c     DE FE 41 FC | 	wrbyte	local04, objptr
02140     44 BC 85 F1 | 	sub	objptr, #68
02144                 | LR__0104
02144                 | LR__0105
02144     44 BC 05 F1 | 	add	objptr, #68
02148     DE CC 01 F6 | 	mov	result1, objptr
0214c     44 BC 85 F1 | 	sub	objptr, #68
02150                 | ' 
02150                 | ' q:=@n_string
02150                 | ' return q
02150     AF F0 03 F6 | 	mov	ptra, fp
02154     BF 00 A0 FD | 	call	#popregs_
02158                 | _hng030rm_inttostr_ret
02158     2D 00 64 FD | 	ret
0215c                 | 
0215c                 | ' 
0215c                 | ' 
0215c                 | ' 
0215c                 | ' '*************************************************************************
0215c                 | ' '                                                                        *
0215c                 | ' '  Mode setting and driver start                                                          *
0215c                 | ' '                                                                        *
0215c                 | ' '*************************************************************************
0215c                 | ' 
0215c                 | ' ''---------  Set the graphics mode
0215c                 | ' 
0215c                 | ' 
0215c                 | ' 
0215c                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
0215c                 | _hng030rm_setmode
0215c     50 5A 05 F6 | 	mov	COUNT_, #80
02160     B0 00 A0 FD | 	call	#pushregs_
02164     F8 F8 01 F6 | 	mov	local01, arg01
02168                 | ' 
02168                 | ' '' mode:tn_bb_cc_vv_hh
02168                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02168                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02168                 | ' 
02168                 | ' if mode==(512+192+48)
02168     01 00 00 FF 
0216c     F0 F8 0D F2 | 	cmp	local01, ##752 wz
02170                 | '   return 'no RAM
02170     1C 0A 90 AD |  if_e	jmp	#LR__0146
02174                 | ' 
02174                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02174     FC FA 01 F6 | 	mov	local02, local01
02178     06 FA 45 F0 | 	shr	local02, #6
0217c     07 FA 05 F5 | 	and	local02, #7
02180     08 FA 25 F3 | 	fle	local02, #8
02184     FD FC 01 F6 | 	mov	local03, local02
02188     30 FC 61 FD | 	jmprel	local03
0218c                 | LR__0106
0218c     20 00 90 FD | 	jmp	#LR__0107
02190     58 00 90 FD | 	jmp	#LR__0108
02194     90 00 90 FD | 	jmp	#LR__0109
02198     C8 00 90 FD | 	jmp	#LR__0110
0219c     00 01 90 FD | 	jmp	#LR__0111
021a0     38 01 90 FD | 	jmp	#LR__0112
021a4     70 01 90 FD | 	jmp	#LR__0113
021a8     A8 01 90 FD | 	jmp	#LR__0114
021ac     E4 01 90 FD | 	jmp	#LR__0115
021b0                 | LR__0107
021b0                 | ' 
021b0                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
021b0     50 BC 05 F1 | 	add	objptr, #80
021b4     DE F0 01 F6 | 	mov	arg01, objptr
021b8     50 BC 85 F1 | 	sub	objptr, #80
021bc     0E 00 00 FF 
021c0     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7256
021c4     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
021c8     FF 00 02 F6 | 	mov	local05, local04
021cc     10 02 06 F6 | 	mov	local06, #16
021d0     00 F3 01 F6 | 	mov	arg02, local05
021d4     10 F4 05 F6 | 	mov	arg03, #16
021d8     0E 00 00 FF 
021dc     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7256
021e0     D8 0A B0 FD | 	call	#__system__longmove
021e4     E6 04 02 F6 | 	mov	local07, result1
021e8     A8 01 90 FD | 	jmp	#LR__0115
021ec                 | LR__0108
021ec                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
021ec     50 BC 05 F1 | 	add	objptr, #80
021f0     DE F0 01 F6 | 	mov	arg01, objptr
021f4     50 BC 85 F1 | 	sub	objptr, #80
021f8     0E 00 00 FF 
021fc     98 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7320
02200     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
02204     FF 00 02 F6 | 	mov	local05, local04
02208     10 02 06 F6 | 	mov	local06, #16
0220c     00 F3 01 F6 | 	mov	arg02, local05
02210     10 F4 05 F6 | 	mov	arg03, #16
02214     0E 00 00 FF 
02218     98 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7320
0221c     9C 0A B0 FD | 	call	#__system__longmove
02220     E6 04 02 F6 | 	mov	local07, result1
02224     6C 01 90 FD | 	jmp	#LR__0115
02228                 | LR__0109
02228                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02228     50 BC 05 F1 | 	add	objptr, #80
0222c     DE F0 01 F6 | 	mov	arg01, objptr
02230     50 BC 85 F1 | 	sub	objptr, #80
02234     0E 00 00 FF 
02238     D8 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7384
0223c     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
02240     FF 00 02 F6 | 	mov	local05, local04
02244     10 02 06 F6 | 	mov	local06, #16
02248     00 F3 01 F6 | 	mov	arg02, local05
0224c     10 F4 05 F6 | 	mov	arg03, #16
02250     0E 00 00 FF 
02254     D8 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7384
02258     60 0A B0 FD | 	call	#__system__longmove
0225c     E6 04 02 F6 | 	mov	local07, result1
02260     30 01 90 FD | 	jmp	#LR__0115
02264                 | LR__0110
02264                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02264     50 BC 05 F1 | 	add	objptr, #80
02268     DE F0 01 F6 | 	mov	arg01, objptr
0226c     50 BC 85 F1 | 	sub	objptr, #80
02270     0E 00 00 FF 
02274     18 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7448
02278     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
0227c     FF 00 02 F6 | 	mov	local05, local04
02280     10 02 06 F6 | 	mov	local06, #16
02284     00 F3 01 F6 | 	mov	arg02, local05
02288     10 F4 05 F6 | 	mov	arg03, #16
0228c     0E 00 00 FF 
02290     18 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7448
02294     24 0A B0 FD | 	call	#__system__longmove
02298     E6 04 02 F6 | 	mov	local07, result1
0229c     F4 00 90 FD | 	jmp	#LR__0115
022a0                 | LR__0111
022a0                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
022a0     50 BC 05 F1 | 	add	objptr, #80
022a4     DE F0 01 F6 | 	mov	arg01, objptr
022a8     50 BC 85 F1 | 	sub	objptr, #80
022ac     0E 00 00 FF 
022b0     58 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7512
022b4     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
022b8     FF 00 02 F6 | 	mov	local05, local04
022bc     10 02 06 F6 | 	mov	local06, #16
022c0     00 F3 01 F6 | 	mov	arg02, local05
022c4     10 F4 05 F6 | 	mov	arg03, #16
022c8     0E 00 00 FF 
022cc     58 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7512
022d0     E8 09 B0 FD | 	call	#__system__longmove
022d4     E6 04 02 F6 | 	mov	local07, result1
022d8     B8 00 90 FD | 	jmp	#LR__0115
022dc                 | LR__0112
022dc                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
022dc     50 BC 05 F1 | 	add	objptr, #80
022e0     DE F0 01 F6 | 	mov	arg01, objptr
022e4     50 BC 85 F1 | 	sub	objptr, #80
022e8     0E 00 00 FF 
022ec     98 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7576
022f0     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
022f4     FF 00 02 F6 | 	mov	local05, local04
022f8     10 02 06 F6 | 	mov	local06, #16
022fc     00 F3 01 F6 | 	mov	arg02, local05
02300     10 F4 05 F6 | 	mov	arg03, #16
02304     0E 00 00 FF 
02308     98 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7576
0230c     AC 09 B0 FD | 	call	#__system__longmove
02310     E6 04 02 F6 | 	mov	local07, result1
02314     7C 00 90 FD | 	jmp	#LR__0115
02318                 | LR__0113
02318                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02318     50 BC 05 F1 | 	add	objptr, #80
0231c     DE F0 01 F6 | 	mov	arg01, objptr
02320     50 BC 85 F1 | 	sub	objptr, #80
02324     0E 00 00 FF 
02328     D8 C1 05 F1 | 	add	ptr__hng030rm_dat__, ##7640
0232c     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
02330     FF 00 02 F6 | 	mov	local05, local04
02334     10 02 06 F6 | 	mov	local06, #16
02338     00 F3 01 F6 | 	mov	arg02, local05
0233c     10 F4 05 F6 | 	mov	arg03, #16
02340     0E 00 00 FF 
02344     D8 C1 85 F1 | 	sub	ptr__hng030rm_dat__, ##7640
02348     70 09 B0 FD | 	call	#__system__longmove
0234c     E6 04 02 F6 | 	mov	local07, result1
02350     40 00 90 FD | 	jmp	#LR__0115
02354                 | LR__0114
02354                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02354     50 BC 05 F1 | 	add	objptr, #80
02358     DE 06 02 F6 | 	mov	local08, objptr
0235c     03 09 02 F6 | 	mov	local09, local08
02360     0F 00 00 FF 
02364     18 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##7704
02368     E0 FE 01 F6 | 	mov	local04, ptr__hng030rm_dat__
0236c     FF 00 02 F6 | 	mov	local05, local04
02370     10 02 06 F6 | 	mov	local06, #16
02374     04 F1 01 F6 | 	mov	arg01, local09
02378     00 F3 01 F6 | 	mov	arg02, local05
0237c     10 F4 05 F6 | 	mov	arg03, #16
02380     50 BC 85 F1 | 	sub	objptr, #80
02384     0F 00 00 FF 
02388     18 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##7704
0238c     2C 09 B0 FD | 	call	#__system__longmove
02390     E6 04 02 F6 | 	mov	local07, result1
02394                 | LR__0115
02394                 | ' 
02394                 | ' ' 4-bit graphics: do nothing with timings :)
02394                 | ' if mode<512
02394     01 00 00 FF 
02398     00 F8 5D F2 | 	cmps	local01, ##512 wcz
0239c     20 00 90 3D |  if_ae	jmp	#LR__0116
023a0     0C 00 00 FF 
023a4     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6232
023a8     E0 0A 02 F6 | 	mov	local10, ptr__hng030rm_dat__
023ac                 | '   palette_ptr:=@ataripalette
023ac     18 BC 05 F1 | 	add	objptr, #24
023b0     DE 0A 62 FC | 	wrlong	local10, objptr
023b4     18 BC 85 F1 | 	sub	objptr, #24
023b8     0C 00 00 FF 
023bc     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6232
023c0                 | LR__0116
023c0                 | ' 
023c0                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
023c0     FC FA 01 F6 | 	mov	local02, local01
023c4     01 00 00 FF 
023c8     30 FA 05 F5 | 	and	local02, ##560
023cc     01 00 00 FF 
023d0     30 FA 0D F2 | 	cmp	local02, ##560 wz
023d4     48 00 90 5D |  if_ne	jmp	#LR__0117
023d8                 | '   timings[5]:=4
023d8     64 BC 05 F1 | 	add	objptr, #100
023dc     DE 08 68 FC | 	wrlong	#4, objptr
023e0     18 BC 05 F1 | 	add	objptr, #24
023e4     DE 0C 02 FB | 	rdlong	local11, objptr
023e8     01 0C 66 F0 | 	shl	local11, #1
023ec                 | '   timings[11]:=timings[11]<<1
023ec     DE 0C 62 FC | 	wrlong	local11, objptr
023f0                 | '   putpixel:=p8
023f0     6C BC 05 F1 | 	add	objptr, #108
023f4     DE FA 01 FB | 	rdlong	local02, objptr
023f8     10 BC 85 F1 | 	sub	objptr, #16
023fc     DE FA 61 FC | 	wrlong	local02, objptr
02400     0C 00 00 FF 
02404     58 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6232
02408     E0 0E 02 F6 | 	mov	local12, ptr__hng030rm_dat__
0240c                 | '   palette_ptr:=@ataripalette
0240c     C0 BC 85 F1 | 	sub	objptr, #192
02410     DE 0E 62 FC | 	wrlong	local12, objptr
02414     18 BC 85 F1 | 	sub	objptr, #24
02418     0C 00 00 FF 
0241c     58 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6232
02420                 | LR__0117
02420                 | ' 
02420                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02420     FC FA 01 F6 | 	mov	local02, local01
02424     01 00 00 FF 
02428     30 FA 05 F5 | 	and	local02, ##560
0242c     01 00 00 FF 
02430     10 FA 0D F2 | 	cmp	local02, ##528 wz
02434     48 00 90 5D |  if_ne	jmp	#LR__0118
02438                 | '   timings[5]:=16
02438     64 BC 05 F1 | 	add	objptr, #100
0243c     DE 20 68 FC | 	wrlong	#16, objptr
02440     18 BC 05 F1 | 	add	objptr, #24
02444     DE 10 02 FB | 	rdlong	local13, objptr
02448     01 10 46 F0 | 	shr	local13, #1
0244c                 | '   timings[11]:=timings[11]>>1
0244c     DE 10 62 FC | 	wrlong	local13, objptr
02450                 | '   putpixel:=p2
02450     64 BC 05 F1 | 	add	objptr, #100
02454     DE FA 01 FB | 	rdlong	local02, objptr
02458     08 BC 85 F1 | 	sub	objptr, #8
0245c     DE FA 61 FC | 	wrlong	local02, objptr
02460     0C 00 00 FF 
02464     08 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6152
02468     E0 12 02 F6 | 	mov	local14, ptr__hng030rm_dat__
0246c                 | '   palette_ptr:=@fourcolors
0246c     C0 BC 85 F1 | 	sub	objptr, #192
02470     DE 12 62 FC | 	wrlong	local14, objptr
02474     18 BC 85 F1 | 	sub	objptr, #24
02478     0C 00 00 FF 
0247c     08 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6152
02480                 | LR__0118
02480                 | ' 
02480                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02480     FC FA 01 F6 | 	mov	local02, local01
02484     01 00 00 FF 
02488     30 FA 05 F5 | 	and	local02, ##560
0248c     01 00 00 FF 
02490     00 FA 0D F2 | 	cmp	local02, ##512 wz
02494     48 00 90 5D |  if_ne	jmp	#LR__0119
02498                 | '   timings[5]:=32
02498     64 BC 05 F1 | 	add	objptr, #100
0249c     DE 40 68 FC | 	wrlong	#32, objptr
024a0     18 BC 05 F1 | 	add	objptr, #24
024a4     DE 14 02 FB | 	rdlong	local15, objptr
024a8     02 14 46 F0 | 	shr	local15, #2
024ac                 | '   timings[11]:=timings[11]>>2
024ac     DE 14 62 FC | 	wrlong	local15, objptr
024b0                 | '   putpixel:=p1
024b0     60 BC 05 F1 | 	add	objptr, #96
024b4     DE FA 01 FB | 	rdlong	local02, objptr
024b8     04 BC 85 F1 | 	sub	objptr, #4
024bc     DE FA 61 FC | 	wrlong	local02, objptr
024c0     0C 00 00 FF 
024c4     00 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6144
024c8     E0 16 02 F6 | 	mov	local16, ptr__hng030rm_dat__
024cc                 | '   palette_ptr:=@twocolors
024cc     C0 BC 85 F1 | 	sub	objptr, #192
024d0     DE 16 62 FC | 	wrlong	local16, objptr
024d4     18 BC 85 F1 | 	sub	objptr, #24
024d8     0C 00 00 FF 
024dc     00 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6144
024e0                 | LR__0119
024e0                 | ' 
024e0                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
024e0     FC FA 01 F6 | 	mov	local02, local01
024e4     01 00 00 FF 
024e8     30 FA 05 F5 | 	and	local02, ##560
024ec     01 00 00 FF 
024f0     20 FA 0D F2 | 	cmp	local02, ##544 wz
024f4     30 00 90 5D |  if_ne	jmp	#LR__0120
024f8                 | '   putpixel:=p4
024f8     E4 BC 05 F1 | 	add	objptr, #228
024fc     DE FA 01 FB | 	rdlong	local02, objptr
02500     0C BC 85 F1 | 	sub	objptr, #12
02504     DE FA 61 FC | 	wrlong	local02, objptr
02508     0C 00 00 FF 
0250c     18 C0 05 F1 | 	add	ptr__hng030rm_dat__, ##6168
02510     E0 18 02 F6 | 	mov	local17, ptr__hng030rm_dat__
02514                 | '   palette_ptr:=@vga16
02514     C0 BC 85 F1 | 	sub	objptr, #192
02518     DE 18 62 FC | 	wrlong	local17, objptr
0251c     18 BC 85 F1 | 	sub	objptr, #24
02520     0C 00 00 FF 
02524     18 C0 85 F1 | 	sub	ptr__hng030rm_dat__, ##6168
02528                 | LR__0120
02528                 | ' 
02528                 | ' repeat i from 0 to 4
02528     00 1A 06 F6 | 	mov	local18, #0
0252c     14 DB 9F FE | 	loc	pa,	#(@LR__0122-@LR__0121)
02530     93 00 A0 FD | 	call	#FCACHE_LOAD_
02534                 | LR__0121
02534     0D 1D 02 F6 | 	mov	local19, local18
02538     02 1C 66 F0 | 	shl	local19, #2
0253c     50 BC 05 F1 | 	add	objptr, #80
02540     DE 1C 02 F1 | 	add	local19, objptr
02544     2C BC 85 F1 | 	sub	objptr, #44
02548     DE 1E 02 FB | 	rdlong	local20, objptr
0254c     24 BC 85 F1 | 	sub	objptr, #36
02550     11 1E 66 F0 | 	shl	local20, #17
02554     0E 21 02 FB | 	rdlong	local21, local19
02558     0F 21 02 F1 | 	add	local21, local20
0255c     10 23 02 F6 | 	mov	local22, local21
02560     80 40 38 FF 
02564     00 22 06 F1 | 	add	local22, ##1887502336
02568                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02568     0E 23 62 FC | 	wrlong	local22, local19
0256c     01 1A 06 F1 | 	add	local18, #1
02570     05 1A 5E F2 | 	cmps	local18, #5 wcz
02574     BC FF 9F CD |  if_b	jmp	#LR__0121
02578                 | LR__0122
02578     24 BC 05 F1 | 	add	objptr, #36
0257c     DE 24 02 FB | 	rdlong	local23, objptr
02580     11 24 66 F0 | 	shl	local23, #17
02584     40 BC 05 F1 | 	add	objptr, #64
02588     DE 26 02 FB | 	rdlong	local24, objptr
0258c     12 27 02 F1 | 	add	local24, local23
02590                 | ' timings[5]:=timings[5]+hdmibase<<17
02590     DE 26 62 FC | 	wrlong	local24, objptr
02594                 | ' clkfreq:=timings[13]
02594     20 BC 05 F1 | 	add	objptr, #32
02598     DE FA 01 FB | 	rdlong	local02, objptr
0259c     14 FA 65 FC | 	wrlong	local02, #20
025a0                 | ' hubset(timings[14])
025a0     04 BC 05 F1 | 	add	objptr, #4
025a4     DE F0 01 FB | 	rdlong	arg01, objptr
025a8     88 BC 85 F1 | 	sub	objptr, #136
025ac     00 F0 61 FD | 	hubset	arg01
025b0                 | ' waitms(1)
025b0     01 F0 05 F6 | 	mov	arg01, #1
025b4     7C 08 B0 FD | 	call	#__system___waitms
025b8     FC 28 02 F6 | 	mov	local25, local01
025bc     03 28 06 F5 | 	and	local25, #3
025c0     14 2B C2 F9 | 	decod	local26, local25
025c4                 | ' 
025c4                 | ' 
025c4                 | ' xzoom:=1<<(mode & 3)
025c4     CC BC 05 F1 | 	add	objptr, #204
025c8     DE 2A 62 FC | 	wrlong	local26, objptr
025cc                 | ' 
025cc                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
025cc     15 07 02 F6 | 	mov	local08, local26
025d0     CC BC 85 F1 | 	sub	objptr, #204
025d4     08 06 0E F2 | 	cmp	local08, #8 wz
025d8     24 00 90 5D |  if_ne	jmp	#LR__0123
025dc     FC 08 02 F6 | 	mov	local09, local01
025e0     04 08 46 F0 | 	shr	local09, #4
025e4     03 08 06 F5 | 	and	local09, #3
025e8     03 08 0E F2 | 	cmp	local09, #3 wz
025ec     10 00 90 AD |  if_e	jmp	#LR__0123
025f0                 | '   xzoom:=4
025f0     04 FA 05 F6 | 	mov	local02, #4
025f4     CC BC 05 F1 | 	add	objptr, #204
025f8     DE 08 68 FC | 	wrlong	#4, objptr
025fc     CC BC 85 F1 | 	sub	objptr, #204
02600                 | LR__0123
02600     FC 2C 02 F6 | 	mov	local27, local01
02604     02 2C 46 F0 | 	shr	local27, #2
02608     03 2C 06 F5 | 	and	local27, #3
0260c     16 2F C2 F9 | 	decod	local28, local27
02610                 | ' 
02610                 | ' yzoom:=1<<((mode>>2) & 3)
02610     D0 BC 05 F1 | 	add	objptr, #208
02614     DE 2E 62 FC | 	wrlong	local28, objptr
02618     04 BC 85 F1 | 	sub	objptr, #4
0261c     DE 06 02 FB | 	rdlong	local08, objptr
02620     04 BC 05 F1 | 	add	objptr, #4
02624     DE FE 01 FB | 	rdlong	local04, objptr
02628     FF 06 02 FD | 	qmul	local08, local04
0262c     18 30 62 FD | 	getqx	local29
02630                 | ' azoom:=xzoom*yzoom
02630     04 BC 05 F1 | 	add	objptr, #4
02634     DE 30 62 FC | 	wrlong	local29, objptr
02638                 | ' 
02638                 | ' cpl:=timings[11]
02638     58 BC 85 F1 | 	sub	objptr, #88
0263c     DE FA 01 FB | 	rdlong	local02, objptr
02640     14 BC 05 F1 | 	add	objptr, #20
02644     DE FA 61 FC | 	wrlong	local02, objptr
02648     90 BC 85 F1 | 	sub	objptr, #144
0264c                 | ' if (mode<512)
0264c     01 00 00 FF 
02650     00 F8 5D F2 | 	cmps	local01, ##512 wcz
02654     60 00 90 3D |  if_ae	jmp	#LR__0124
02658     80 BC 05 F1 | 	add	objptr, #128
0265c     DE 98 02 FB | 	rdlong	muldiva_, objptr
02660     04 98 46 F0 | 	shr	muldiva_, #4
02664     50 BC 05 F1 | 	add	objptr, #80
02668     DE 9A 02 FB | 	rdlong	muldivb_, objptr
0266c     D0 BC 85 F1 | 	sub	objptr, #208
02670     CC 00 A0 FD | 	call	#unsdivide_
02674                 | '   lines:=(timings[12]>>4)+/yzoom
02674     94 BC 05 F1 | 	add	objptr, #148
02678     DE 9A 62 FC | 	wrlong	muldivb_, objptr
0267c                 | '   if ((timings[12]>>4)+//yzoom) <>0
0267c     14 BC 85 F1 | 	sub	objptr, #20
02680     DE 98 02 FB | 	rdlong	muldiva_, objptr
02684     04 98 46 F0 | 	shr	muldiva_, #4
02688     50 BC 05 F1 | 	add	objptr, #80
0268c     DE 9A 02 FB | 	rdlong	muldivb_, objptr
02690     D0 BC 85 F1 | 	sub	objptr, #208
02694     CC 00 A0 FD | 	call	#unsdivide_
02698     00 98 0E F2 | 	cmp	muldiva_, #0 wz
0269c     AC 00 90 AD |  if_e	jmp	#LR__0127
026a0                 | '     lines +=1
026a0     94 BC 05 F1 | 	add	objptr, #148
026a4     DE FA 01 FB | 	rdlong	local02, objptr
026a8     01 FA 05 F1 | 	add	local02, #1
026ac     DE FA 61 FC | 	wrlong	local02, objptr
026b0     94 BC 85 F1 | 	sub	objptr, #148
026b4                 | ' 
026b4                 | ' else
026b4     94 00 90 FD | 	jmp	#LR__0127
026b8                 | LR__0124
026b8     80 BC 05 F1 | 	add	objptr, #128
026bc     DE 98 02 FB | 	rdlong	muldiva_, objptr
026c0     50 BC 05 F1 | 	add	objptr, #80
026c4     DE 9A 02 FB | 	rdlong	muldivb_, objptr
026c8     D0 BC 85 F1 | 	sub	objptr, #208
026cc     D0 00 A0 FD | 	call	#divide_
026d0                 | '   lines:=timings[12]/yzoom
026d0     94 BC 05 F1 | 	add	objptr, #148
026d4     DE 9A 62 FC | 	wrlong	muldivb_, objptr
026d8                 | '   if cpl//xzoom==0
026d8     04 BC 85 F1 | 	sub	objptr, #4
026dc     DE 98 02 FB | 	rdlong	muldiva_, objptr
026e0     3C BC 05 F1 | 	add	objptr, #60
026e4     DE 9A 02 FB | 	rdlong	muldivb_, objptr
026e8     CC BC 85 F1 | 	sub	objptr, #204
026ec     D0 00 A0 FD | 	call	#divide_
026f0     00 98 0E F2 | 	cmp	muldiva_, #0 wz
026f4     28 00 90 5D |  if_ne	jmp	#LR__0125
026f8                 | '     cpl:=cpl/xzoom
026f8     90 BC 05 F1 | 	add	objptr, #144
026fc     DE 98 02 FB | 	rdlong	muldiva_, objptr
02700     3C BC 05 F1 | 	add	objptr, #60
02704     DE 9A 02 FB | 	rdlong	muldivb_, objptr
02708     CC BC 85 F1 | 	sub	objptr, #204
0270c     D0 00 A0 FD | 	call	#divide_
02710     90 BC 05 F1 | 	add	objptr, #144
02714     DE 9A 62 FC | 	wrlong	muldivb_, objptr
02718     90 BC 85 F1 | 	sub	objptr, #144
0271c                 | '   else
0271c     2C 00 90 FD | 	jmp	#LR__0126
02720                 | LR__0125
02720     90 BC 05 F1 | 	add	objptr, #144
02724     DE 98 02 FB | 	rdlong	muldiva_, objptr
02728     3C BC 05 F1 | 	add	objptr, #60
0272c     DE 9A 02 FB | 	rdlong	muldivb_, objptr
02730     CC BC 85 F1 | 	sub	objptr, #204
02734     D0 00 A0 FD | 	call	#divide_
02738     4D 33 02 F6 | 	mov	local30, muldivb_
0273c     01 32 06 F1 | 	add	local30, #1
02740                 | '     cpl:=cpl/xzoom+1
02740     90 BC 05 F1 | 	add	objptr, #144
02744     DE 32 62 FC | 	wrlong	local30, objptr
02748     90 BC 85 F1 | 	sub	objptr, #144
0274c                 | LR__0126
0274c                 | LR__0127
0274c     90 BC 05 F1 | 	add	objptr, #144
02750     DE 06 02 FB | 	rdlong	local08, objptr
02754     04 BC 05 F1 | 	add	objptr, #4
02758     DE FE 01 FB | 	rdlong	local04, objptr
0275c     FF 06 02 FD | 	qmul	local08, local04
02760     18 34 62 FD | 	getqx	local31
02764                 | ' 
02764                 | ' buflen:=(cpl*lines)
02764     64 BC 85 F1 | 	sub	objptr, #100
02768     DE 34 62 FC | 	wrlong	local31, objptr
0276c     30 BC 85 F1 | 	sub	objptr, #48
02770     02 34 66 F0 | 	shl	local31, #2
02774     13 36 C6 F9 | 	decod	local32, #19
02778     1A 37 82 F1 | 	sub	local32, local31
0277c                 | ' buf_ptr:=$80000-4*buflen
0277c     DE 36 62 FC | 	wrlong	local32, objptr
02780     50 BC 05 F1 | 	add	objptr, #80
02784     DE 38 02 F6 | 	mov	local33, objptr
02788                 | ' mode_ptr:=@timings
02788     3C BC 85 F1 | 	sub	objptr, #60
0278c     DE 38 62 FC | 	wrlong	local33, objptr
02790                 | ' graphmode:=mode
02790     B0 BC 05 F1 | 	add	objptr, #176
02794     DE F8 61 FC | 	wrlong	local01, objptr
02798     C4 BC 85 F1 | 	sub	objptr, #196
0279c                 | ' makedl(mode)
0279c     FC F0 01 F6 | 	mov	arg01, local01
027a0                 | ' 
027a0                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
027a0                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
027a0                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
027a0                 | ' 
027a0                 | ' '   0 - display a up/down border line
027a0                 | ' 
027a0                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
027a0                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
027a0                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
027a0                 | ' '    nnnn - font line to display, 0..15
027a0                 | ' '    llllll - character line, determines the cursor Y position
027a0                 | ' 
027a0                 | ' 
027a0                 | ' if (mode &256==0)
027a0     00 F1 CD F7 | 	test	arg01, #256 wz
027a4     1C 00 90 5D |  if_ne	jmp	#LR__0128
027a8     DE 3A 02 FB | 	rdlong	local34, objptr
027ac     04 00 00 FF 
027b0     00 3B 86 F1 | 	sub	local34, ##2304
027b4                 | '   dl_ptr:=buf_ptr-4*576
027b4     1C BC 05 F1 | 	add	objptr, #28
027b8     DE 3A 62 FC | 	wrlong	local34, objptr
027bc     1C BC 85 F1 | 	sub	objptr, #28
027c0                 | ' else
027c0     18 00 90 FD | 	jmp	#LR__0129
027c4                 | LR__0128
027c4     DE 3C 02 FB | 	rdlong	local35, objptr
027c8     03 00 00 FF 
027cc     C0 3D 86 F1 | 	sub	local35, ##1984
027d0                 | '   dl_ptr:=buf_ptr-4*496
027d0     1C BC 05 F1 | 	add	objptr, #28
027d4     DE 3C 62 FC | 	wrlong	local35, objptr
027d8     1C BC 85 F1 | 	sub	objptr, #28
027dc                 | LR__0129
027dc     F8 3E 02 F6 | 	mov	local36, arg01
027e0     02 3E 46 F0 | 	shr	local36, #2
027e4     03 3E 06 F5 | 	and	local36, #3
027e8                 | '  ' dl_ptr:=buf_ptr-4*540
027e8                 | ' 
027e8                 | ' vzoom:=((mode>>2) & 3)
027e8                 | ' 
027e8                 | ' 
027e8                 | ' if mode<512 '' text modes
027e8     01 00 00 FF 
027ec     00 F0 5D F2 | 	cmps	arg01, ##512 wcz
027f0     E4 01 90 3D |  if_ae	jmp	#LR__0137
027f4                 | ' 
027f4                 | '   if timings[6]>0 'borders
027f4     68 BC 05 F1 | 	add	objptr, #104
027f8     DE 40 02 FB | 	rdlong	local37, objptr
027fc     68 BC 85 F1 | 	sub	objptr, #104
02800     00 40 5E F2 | 	cmps	local37, #0 wcz
02804     D4 00 90 ED |  if_be	jmp	#LR__0134
02808                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02808     00 42 06 F6 | 	mov	local38, #0
0280c     68 BC 05 F1 | 	add	objptr, #104
02810     DE 44 02 FB | 	rdlong	local39, objptr
02814     68 BC 85 F1 | 	sub	objptr, #104
02818     01 44 86 F1 | 	sub	local39, #1
0281c     00 44 5E F2 | 	cmps	local39, #0 wcz
02820     01 46 06 16 |  if_a	mov	local40, #1
02824     01 46 66 E6 |  if_be	neg	local40, #1
02828     23 49 02 F6 | 	mov	local41, local40
0282c     23 45 02 F1 | 	add	local39, local40
02830     F4 D7 9F FE | 	loc	pa,	#(@LR__0131-@LR__0130)
02834     93 00 A0 FD | 	call	#FCACHE_LOAD_
02838                 | LR__0130
02838     21 4B 02 F6 | 	mov	local42, local38
0283c     02 4A 66 F0 | 	shl	local42, #2
02840     1C BC 05 F1 | 	add	objptr, #28
02844     DE 4C 02 FB | 	rdlong	local43, objptr
02848     1C BC 85 F1 | 	sub	objptr, #28
0284c     25 4D 02 F1 | 	add	local43, local42
02850                 | '       long[dl_ptr+4*i]:=$0
02850     26 01 68 FC | 	wrlong	#0, local43
02854     24 43 02 F1 | 	add	local38, local41
02858     22 43 0A F2 | 	cmp	local38, local39 wz
0285c     D8 FF 9F 5D |  if_ne	jmp	#LR__0130
02860                 | LR__0131
02860                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02860     68 BC 05 F1 | 	add	objptr, #104
02864     DE 42 02 FB | 	rdlong	local38, objptr
02868     18 BC 05 F1 | 	add	objptr, #24
0286c     DE 46 02 FB | 	rdlong	local40, objptr
02870     23 43 02 F1 | 	add	local38, local40
02874     0C BC 05 F1 | 	add	objptr, #12
02878     DE 4E 02 FB | 	rdlong	local44, objptr
0287c     01 4E 86 F1 | 	sub	local44, #1
02880     24 BC 85 F1 | 	sub	objptr, #36
02884     DE 50 02 FB | 	rdlong	local45, objptr
02888     18 BC 05 F1 | 	add	objptr, #24
0288c     DE 52 02 FB | 	rdlong	local46, objptr
02890     80 BC 85 F1 | 	sub	objptr, #128
02894     29 51 02 F1 | 	add	local45, local46
02898     28 4F 5A F2 | 	cmps	local44, local45 wcz
0289c     01 54 06 16 |  if_a	mov	local47, #1
028a0     01 54 66 E6 |  if_be	neg	local47, #1
028a4     2A 57 02 F6 | 	mov	local48, local47
028a8     2A 4F 02 F1 | 	add	local44, local47
028ac     78 D7 9F FE | 	loc	pa,	#(@LR__0133-@LR__0132)
028b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
028b4                 | LR__0132
028b4     21 59 02 F6 | 	mov	local49, local38
028b8     02 58 66 F0 | 	shl	local49, #2
028bc     1C BC 05 F1 | 	add	objptr, #28
028c0     DE 5A 02 FB | 	rdlong	local50, objptr
028c4     1C BC 85 F1 | 	sub	objptr, #28
028c8     2C 5B 02 F1 | 	add	local50, local49
028cc                 | '       long[dl_ptr+4*i]:=$0
028cc     2D 01 68 FC | 	wrlong	#0, local50
028d0     2B 43 02 F1 | 	add	local38, local48
028d4     27 43 0A F2 | 	cmp	local38, local44 wz
028d8     D8 FF 9F 5D |  if_ne	jmp	#LR__0132
028dc                 | LR__0133
028dc                 | LR__0134
028dc     10 5C 06 F6 | 	mov	local51, #16
028e0     1F 5D 62 F0 | 	shl	local51, local36
028e4                 | '   lpc:=16<<vzoom
028e4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
028e4     68 BC 05 F1 | 	add	objptr, #104
028e8     DE 42 02 FB | 	rdlong	local38, objptr
028ec     21 5F 02 F6 | 	mov	local52, local38
028f0     18 BC 05 F1 | 	add	objptr, #24
028f4     DE 60 02 FB | 	rdlong	local53, objptr
028f8     30 5F 02 F1 | 	add	local52, local53
028fc     01 5E 86 F1 | 	sub	local52, #1
02900     18 BC 85 F1 | 	sub	objptr, #24
02904     DE 54 02 FB | 	rdlong	local47, objptr
02908     68 BC 85 F1 | 	sub	objptr, #104
0290c     2A 5F 5A F2 | 	cmps	local52, local47 wcz
02910     01 62 06 16 |  if_a	mov	local54, #1
02914     01 62 66 E6 |  if_be	neg	local54, #1
02918     31 65 02 F6 | 	mov	local55, local54
0291c     31 5F 02 F1 | 	add	local52, local54
02920     8C D7 9F FE | 	loc	pa,	#(@LR__0136-@LR__0135)
02924     93 00 A0 FD | 	call	#FCACHE_LOAD_
02928                 | LR__0135
02928     21 99 02 F6 | 	mov	muldiva_, local38
0292c     68 BC 05 F1 | 	add	objptr, #104
02930     DE 66 02 FB | 	rdlong	local56, objptr
02934     68 BC 85 F1 | 	sub	objptr, #104
02938     33 99 82 F1 | 	sub	muldiva_, local56
0293c     2E 9B 02 F6 | 	mov	muldivb_, local51
02940     CC 00 A0 FD | 	call	#unsdivide_
02944     1F 99 42 F0 | 	shr	muldiva_, local36
02948                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02948     4C 69 02 F6 | 	mov	local57, muldiva_
0294c     21 99 02 F6 | 	mov	muldiva_, local38
02950     68 BC 05 F1 | 	add	objptr, #104
02954     DE 66 02 FB | 	rdlong	local56, objptr
02958     68 BC 85 F1 | 	sub	objptr, #104
0295c     33 99 82 F1 | 	sub	muldiva_, local56
02960     2E 9B 02 F6 | 	mov	muldivb_, local51
02964     CC 00 A0 FD | 	call	#unsdivide_
02968     4D 6B 02 F6 | 	mov	local58, muldivb_
0296c                 | '     charline:=(i-timings[6])+/lpc
0296c     90 BC 05 F1 | 	add	objptr, #144
02970     DE 66 02 FB | 	rdlong	local56, objptr
02974     90 BC 85 F1 | 	sub	objptr, #144
02978     35 67 02 FD | 	qmul	local56, local58
0297c     18 6C 62 FD | 	getqx	local59
02980     02 6C 66 F0 | 	shl	local59, #2
02984     DE 6E 02 FB | 	rdlong	local60, objptr
02988     36 6F 02 F1 | 	add	local60, local59
0298c     F8 70 02 F6 | 	mov	local61, arg01
02990     03 70 06 F5 | 	and	local61, #3
02994     38 6F 02 F1 | 	add	local60, local61
02998                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02998     0C 6E 66 F0 | 	shl	local60, #12
0299c     08 68 66 F0 | 	shl	local57, #8
029a0     34 6F 02 F1 | 	add	local60, local57
029a4     02 6A 66 F0 | 	shl	local58, #2
029a8     35 6F 02 F1 | 	add	local60, local58
029ac     01 6E 06 F1 | 	add	local60, #1
029b0     21 73 02 F6 | 	mov	local62, local38
029b4     02 72 66 F0 | 	shl	local62, #2
029b8     1C BC 05 F1 | 	add	objptr, #28
029bc     DE 74 02 FB | 	rdlong	local63, objptr
029c0     1C BC 85 F1 | 	sub	objptr, #28
029c4     39 75 02 F1 | 	add	local63, local62
029c8                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
029c8     3A 6F 62 FC | 	wrlong	local60, local63
029cc     32 43 02 F1 | 	add	local38, local55
029d0     2F 43 0A F2 | 	cmp	local38, local52 wz
029d4     50 FF 9F 5D |  if_ne	jmp	#LR__0135
029d8                 | LR__0136
029d8                 | LR__0137
029d8                 | ' 
029d8                 | ' 
029d8                 | ' 
029d8                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
029d8     01 00 00 FF 
029dc     00 F0 5D F2 | 	cmps	arg01, ##512 wcz
029e0     AC 01 90 CD |  if_b	jmp	#LR__0145
029e4                 | ' 
029e4                 | '   if timings[6]>0 'borders
029e4     68 BC 05 F1 | 	add	objptr, #104
029e8     DE 40 02 FB | 	rdlong	local37, objptr
029ec     68 BC 85 F1 | 	sub	objptr, #104
029f0     00 40 5E F2 | 	cmps	local37, #0 wcz
029f4     D4 00 90 ED |  if_be	jmp	#LR__0142
029f8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
029f8     00 42 06 F6 | 	mov	local38, #0
029fc     68 BC 05 F1 | 	add	objptr, #104
02a00     DE 76 02 FB | 	rdlong	local64, objptr
02a04     68 BC 85 F1 | 	sub	objptr, #104
02a08     01 76 86 F1 | 	sub	local64, #1
02a0c     00 76 5E F2 | 	cmps	local64, #0 wcz
02a10     01 46 06 16 |  if_a	mov	local40, #1
02a14     01 46 66 E6 |  if_be	neg	local40, #1
02a18     23 79 02 F6 | 	mov	local65, local40
02a1c     23 77 02 F1 | 	add	local64, local40
02a20     04 D6 9F FE | 	loc	pa,	#(@LR__0139-@LR__0138)
02a24     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a28                 | LR__0138
02a28     21 7B 02 F6 | 	mov	local66, local38
02a2c     02 7A 66 F0 | 	shl	local66, #2
02a30     1C BC 05 F1 | 	add	objptr, #28
02a34     DE 7C 02 FB | 	rdlong	local67, objptr
02a38     1C BC 85 F1 | 	sub	objptr, #28
02a3c     3D 7D 02 F1 | 	add	local67, local66
02a40                 | '       long[dl_ptr+4*i]:=$0
02a40     3E 01 68 FC | 	wrlong	#0, local67
02a44     3C 43 02 F1 | 	add	local38, local65
02a48     3B 43 0A F2 | 	cmp	local38, local64 wz
02a4c     D8 FF 9F 5D |  if_ne	jmp	#LR__0138
02a50                 | LR__0139
02a50                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02a50     68 BC 05 F1 | 	add	objptr, #104
02a54     DE 42 02 FB | 	rdlong	local38, objptr
02a58     18 BC 05 F1 | 	add	objptr, #24
02a5c     DE 46 02 FB | 	rdlong	local40, objptr
02a60     23 43 02 F1 | 	add	local38, local40
02a64     0C BC 05 F1 | 	add	objptr, #12
02a68     DE 7E 02 FB | 	rdlong	local68, objptr
02a6c     01 7E 86 F1 | 	sub	local68, #1
02a70     24 BC 85 F1 | 	sub	objptr, #36
02a74     DE 50 02 FB | 	rdlong	local45, objptr
02a78     18 BC 05 F1 | 	add	objptr, #24
02a7c     DE 52 02 FB | 	rdlong	local46, objptr
02a80     80 BC 85 F1 | 	sub	objptr, #128
02a84     29 51 02 F1 | 	add	local45, local46
02a88     28 7F 5A F2 | 	cmps	local68, local45 wcz
02a8c     01 54 06 16 |  if_a	mov	local47, #1
02a90     01 54 66 E6 |  if_be	neg	local47, #1
02a94     2A 81 02 F6 | 	mov	local69, local47
02a98     2A 7F 02 F1 | 	add	local68, local47
02a9c     88 D5 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
02aa0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02aa4                 | LR__0140
02aa4     21 83 02 F6 | 	mov	local70, local38
02aa8     02 82 66 F0 | 	shl	local70, #2
02aac     1C BC 05 F1 | 	add	objptr, #28
02ab0     DE 84 02 FB | 	rdlong	local71, objptr
02ab4     1C BC 85 F1 | 	sub	objptr, #28
02ab8     41 85 02 F1 | 	add	local71, local70
02abc                 | '       long[dl_ptr+4*i]:=$0
02abc     42 01 68 FC | 	wrlong	#0, local71
02ac0     40 43 02 F1 | 	add	local38, local69
02ac4     3F 43 0A F2 | 	cmp	local38, local68 wz
02ac8     D8 FF 9F 5D |  if_ne	jmp	#LR__0140
02acc                 | LR__0141
02acc                 | LR__0142
02acc                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02acc     68 BC 05 F1 | 	add	objptr, #104
02ad0     DE 42 02 FB | 	rdlong	local38, objptr
02ad4     21 87 02 F6 | 	mov	local72, local38
02ad8     18 BC 05 F1 | 	add	objptr, #24
02adc     DE 60 02 FB | 	rdlong	local53, objptr
02ae0     30 87 02 F1 | 	add	local72, local53
02ae4     01 86 86 F1 | 	sub	local72, #1
02ae8     18 BC 85 F1 | 	sub	objptr, #24
02aec     DE 54 02 FB | 	rdlong	local47, objptr
02af0     68 BC 85 F1 | 	sub	objptr, #104
02af4     2A 87 5A F2 | 	cmps	local72, local47 wcz
02af8     01 62 06 16 |  if_a	mov	local54, #1
02afc     01 62 66 E6 |  if_be	neg	local54, #1
02b00     31 89 02 F6 | 	mov	local73, local54
02b04     31 87 02 F1 | 	add	local72, local54
02b08     74 D5 9F FE | 	loc	pa,	#(@LR__0144-@LR__0143)
02b0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b10                 | LR__0143
02b10     21 8B 02 F6 | 	mov	local74, local38
02b14     68 BC 05 F1 | 	add	objptr, #104
02b18     DE 66 02 FB | 	rdlong	local56, objptr
02b1c     33 8B 82 F1 | 	sub	local74, local56
02b20     1F 8B 42 F0 | 	shr	local74, local36
02b24     28 BC 05 F1 | 	add	objptr, #40
02b28     DE 66 02 FB | 	rdlong	local56, objptr
02b2c     90 BC 85 F1 | 	sub	objptr, #144
02b30     45 67 02 FD | 	qmul	local56, local74
02b34     18 8C 62 FD | 	getqx	local75
02b38     02 8C 66 F0 | 	shl	local75, #2
02b3c     DE 8E 02 FB | 	rdlong	local76, objptr
02b40     46 8F 02 F1 | 	add	local76, local75
02b44     F8 90 02 F6 | 	mov	local77, arg01
02b48     03 90 06 F5 | 	and	local77, #3
02b4c     48 8F 02 F1 | 	add	local76, local77
02b50                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02b50     0C 8E 66 F0 | 	shl	local76, #12
02b54     02 8E 06 F1 | 	add	local76, #2
02b58     F8 92 02 F6 | 	mov	local78, arg01
02b5c     30 92 06 F5 | 	and	local78, #48
02b60     02 92 46 F0 | 	shr	local78, #2
02b64     49 8F 02 F1 | 	add	local76, local78
02b68     21 95 02 F6 | 	mov	local79, local38
02b6c     02 94 66 F0 | 	shl	local79, #2
02b70     1C BC 05 F1 | 	add	objptr, #28
02b74     DE 96 02 FB | 	rdlong	local80, objptr
02b78     1C BC 85 F1 | 	sub	objptr, #28
02b7c     4A 97 02 F1 | 	add	local80, local79
02b80                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
02b80     4B 8F 62 FC | 	wrlong	local76, local80
02b84     44 43 02 F1 | 	add	local38, local73
02b88     43 43 0A F2 | 	cmp	local38, local72 wz
02b8c     80 FF 9F 5D |  if_ne	jmp	#LR__0143
02b90                 | LR__0144
02b90                 | LR__0145
02b90                 | LR__0146
02b90     AF F0 03 F6 | 	mov	ptra, fp
02b94     BF 00 A0 FD | 	call	#popregs_
02b98                 | _hng030rm_setmode_ret
02b98     2D 00 64 FD | 	ret
02b9c                 | hubexit
02b9c     81 00 80 FD | 	jmp	#cogexit
02ba0                 | 
02ba0                 | __system___setbaud
02ba0     14 98 06 FB | 	rdlong	muldiva_, #20
02ba4     F8 9A 02 F6 | 	mov	muldivb_, arg01
02ba8     D0 00 A0 FD | 	call	#divide_
02bac     40 7C 64 FD | 	dirl	#62
02bb0     40 7E 64 FD | 	dirl	#63
02bb4     DF 9A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02bb8     10 9A 66 F0 | 	shl	muldivb_, #16
02bbc     07 F2 05 F6 | 	mov	arg02, #7
02bc0     4D F3 01 F1 | 	add	arg02, muldivb_
02bc4     3E F8 0C FC | 	wrpin	#124, #62
02bc8     3E F2 15 FC | 	wxpin	arg02, #62
02bcc     3F 7C 0C FC | 	wrpin	#62, #63
02bd0     14 F2 05 F1 | 	add	arg02, #20
02bd4     3F F2 15 FC | 	wxpin	arg02, #63
02bd8     41 7C 64 FD | 	dirh	#62
02bdc     41 7E 64 FD | 	dirh	#63
02be0                 | __system___setbaud_ret
02be0     2D 00 64 FD | 	ret
02be4                 | 
02be4                 | __system___txraw
02be4     02 5A 05 F6 | 	mov	COUNT_, #2
02be8     B0 00 A0 FD | 	call	#pushregs_
02bec     F8 F8 01 F6 | 	mov	local01, arg01
02bf0     DF FA 09 FB | 	rdlong	local02, ptr___system__dat__ wz
02bf4     0C 00 90 5D |  if_ne	jmp	#LR__0147
02bf8     C2 01 00 FF 
02bfc     00 F0 05 F6 | 	mov	arg01, ##230400
02c00     9C FF BF FD | 	call	#__system___setbaud
02c04                 | LR__0147
02c04     3E F8 25 FC | 	wypin	local01, #62
02c08     1F 02 64 FD | 	waitx	#1
02c0c     F8 D3 9F FE | 	loc	pa,	#(@LR__0149-@LR__0148)
02c10     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c14                 | LR__0148
02c14     40 7C 74 FD | 	testp	#62 wc
02c18     F8 FF 9F 3D |  if_nc	jmp	#LR__0148
02c1c                 | LR__0149
02c1c     01 CC 05 F6 | 	mov	result1, #1
02c20     AF F0 03 F6 | 	mov	ptra, fp
02c24     BF 00 A0 FD | 	call	#popregs_
02c28                 | __system___txraw_ret
02c28     2D 00 64 FD | 	ret
02c2c                 | 
02c2c                 | __system____builtin_memmove
02c2c     F8 D0 01 F6 | 	mov	_var01, arg01
02c30     F9 F0 59 F2 | 	cmps	arg01, arg02 wcz
02c34     50 00 90 3D |  if_ae	jmp	#LR__0157
02c38     E4 D3 9F FE | 	loc	pa,	#(@LR__0151-@LR__0150)
02c3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c40                 | LR__0150
02c40     03 F4 5D F2 | 	cmps	arg03, #3 wcz
02c44     18 00 90 ED |  if_be	jmp	#LR__0152
02c48     F9 D2 01 FB | 	rdlong	_var02, arg02
02c4c     F8 D2 61 FC | 	wrlong	_var02, arg01
02c50     04 F0 05 F1 | 	add	arg01, #4
02c54     04 F2 05 F1 | 	add	arg02, #4
02c58     04 F4 85 F1 | 	sub	arg03, #4
02c5c     E0 FF 9F FD | 	jmp	#LR__0150
02c60                 | LR__0151
02c60                 | LR__0152
02c60     FA D4 09 F6 | 	mov	_var03, arg03 wz
02c64     4C 00 90 AD |  if_e	jmp	#LR__0163
02c68     A8 D3 9F FE | 	loc	pa,	#(@LR__0155-@LR__0153)
02c6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c70                 | LR__0153
02c70     EA 08 D8 FC | 	rep	@LR__0156, _var03
02c74                 | LR__0154
02c74     F9 D2 C1 FA | 	rdbyte	_var02, arg02
02c78     F8 D2 41 FC | 	wrbyte	_var02, arg01
02c7c     01 F0 05 F1 | 	add	arg01, #1
02c80     01 F2 05 F1 | 	add	arg02, #1
02c84                 | LR__0155
02c84                 | LR__0156
02c84     2C 00 90 FD | 	jmp	#LR__0163
02c88                 | LR__0157
02c88     FA F0 01 F1 | 	add	arg01, arg03
02c8c     FA F2 01 F1 | 	add	arg02, arg03
02c90     FA D6 09 F6 | 	mov	_var04, arg03 wz
02c94     1C 00 90 AD |  if_e	jmp	#LR__0162
02c98     78 D3 9F FE | 	loc	pa,	#(@LR__0160-@LR__0158)
02c9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ca0                 | LR__0158
02ca0     EB 08 D8 FC | 	rep	@LR__0161, _var04
02ca4                 | LR__0159
02ca4     01 F0 85 F1 | 	sub	arg01, #1
02ca8     01 F2 85 F1 | 	sub	arg02, #1
02cac     F9 D2 C1 FA | 	rdbyte	_var02, arg02
02cb0     F8 D2 41 FC | 	wrbyte	_var02, arg01
02cb4                 | LR__0160
02cb4                 | LR__0161
02cb4                 | LR__0162
02cb4                 | LR__0163
02cb4     E8 CC 01 F6 | 	mov	result1, _var01
02cb8                 | __system____builtin_memmove_ret
02cb8     2D 00 64 FD | 	ret
02cbc                 | 
02cbc                 | __system__longmove
02cbc     F8 D0 01 F6 | 	mov	_var01, arg01
02cc0     F9 F0 59 F2 | 	cmps	arg01, arg02 wcz
02cc4     28 00 90 3D |  if_ae	jmp	#LR__0168
02cc8     FA D2 09 F6 | 	mov	_var02, arg03 wz
02ccc     54 00 90 AD |  if_e	jmp	#LR__0174
02cd0     40 D3 9F FE | 	loc	pa,	#(@LR__0166-@LR__0164)
02cd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cd8                 | LR__0164
02cd8     E9 08 D8 FC | 	rep	@LR__0167, _var02
02cdc                 | LR__0165
02cdc     F9 D4 01 FB | 	rdlong	_var03, arg02
02ce0     F8 D4 61 FC | 	wrlong	_var03, arg01
02ce4     04 F0 05 F1 | 	add	arg01, #4
02ce8     04 F2 05 F1 | 	add	arg02, #4
02cec                 | LR__0166
02cec                 | LR__0167
02cec     34 00 90 FD | 	jmp	#LR__0174
02cf0                 | LR__0168
02cf0     FA D6 01 F6 | 	mov	_var04, arg03
02cf4     02 D6 65 F0 | 	shl	_var04, #2
02cf8     EB F0 01 F1 | 	add	arg01, _var04
02cfc     EB F2 01 F1 | 	add	arg02, _var04
02d00     FA D8 09 F6 | 	mov	_var05, arg03 wz
02d04     1C 00 90 AD |  if_e	jmp	#LR__0173
02d08     08 D3 9F FE | 	loc	pa,	#(@LR__0171-@LR__0169)
02d0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d10                 | LR__0169
02d10     EC 08 D8 FC | 	rep	@LR__0172, _var05
02d14                 | LR__0170
02d14     04 F0 85 F1 | 	sub	arg01, #4
02d18     04 F2 85 F1 | 	sub	arg02, #4
02d1c     F9 D4 01 FB | 	rdlong	_var03, arg02
02d20     F8 D4 61 FC | 	wrlong	_var03, arg01
02d24                 | LR__0171
02d24                 | LR__0172
02d24                 | LR__0173
02d24                 | LR__0174
02d24     E8 CC 01 F6 | 	mov	result1, _var01
02d28                 | __system__longmove_ret
02d28     2D 00 64 FD | 	ret
02d2c                 | 
02d2c                 | __system____topofstack
02d2c     00 5A 05 F6 | 	mov	COUNT_, #0
02d30     B0 00 A0 FD | 	call	#pushregs_
02d34     0C F0 07 F1 | 	add	ptra, #12
02d38     04 5E 05 F1 | 	add	fp, #4
02d3c     AF F0 61 FC | 	wrlong	arg01, fp
02d40     AF CC 01 F6 | 	mov	result1, fp
02d44     04 5E 85 F1 | 	sub	fp, #4
02d48     AF F0 03 F6 | 	mov	ptra, fp
02d4c     BF 00 A0 FD | 	call	#popregs_
02d50                 | __system____topofstack_ret
02d50     2D 00 64 FD | 	ret
02d54                 | 
02d54                 | __system___make_methodptr
02d54     04 5A 05 F6 | 	mov	COUNT_, #4
02d58     B0 00 A0 FD | 	call	#pushregs_
02d5c     F8 F8 01 F6 | 	mov	local01, arg01
02d60     F9 FA 01 F6 | 	mov	local02, arg02
02d64     08 F0 05 F6 | 	mov	arg01, #8
02d68     38 04 B0 FD | 	call	#__system___gc_alloc_managed
02d6c     E6 FC 09 F6 | 	mov	local03, result1 wz
02d70     10 00 90 AD |  if_e	jmp	#LR__0175
02d74     FE F8 61 FC | 	wrlong	local01, local03
02d78     FE FE 01 F6 | 	mov	local04, local03
02d7c     04 FE 05 F1 | 	add	local04, #4
02d80     FF FA 61 FC | 	wrlong	local02, local04
02d84                 | LR__0175
02d84     FE CC 01 F6 | 	mov	result1, local03
02d88     AF F0 03 F6 | 	mov	ptra, fp
02d8c     BF 00 A0 FD | 	call	#popregs_
02d90                 | __system___make_methodptr_ret
02d90     2D 00 64 FD | 	ret
02d94                 | 
02d94                 | __system___lockmem
02d94     02 5A 05 F6 | 	mov	COUNT_, #2
02d98     B0 00 A0 FD | 	call	#pushregs_
02d9c     01 CC 61 FD | 	cogid	result1
02da0     E6 F8 01 F6 | 	mov	local01, result1
02da4     00 F9 05 F1 | 	add	local01, #256
02da8                 | LR__0176
02da8     F8 FA 09 FB | 	rdlong	local02, arg01 wz
02dac     F8 F8 61 AC |  if_e	wrlong	local01, arg01
02db0     F8 FA 01 AB |  if_e	rdlong	local02, arg01
02db4     F8 FA 01 AB |  if_e	rdlong	local02, arg01
02db8     FC FA 09 F2 | 	cmp	local02, local01 wz
02dbc     E8 FF 9F 5D |  if_ne	jmp	#LR__0176
02dc0     AF F0 03 F6 | 	mov	ptra, fp
02dc4     BF 00 A0 FD | 	call	#popregs_
02dc8                 | __system___lockmem_ret
02dc8     2D 00 64 FD | 	ret
02dcc                 | 
02dcc                 | __system___tx
02dcc     02 5A 05 F6 | 	mov	COUNT_, #2
02dd0     B0 00 A0 FD | 	call	#pushregs_
02dd4     F8 F8 01 F6 | 	mov	local01, arg01
02dd8     0A F8 0D F2 | 	cmp	local01, #10 wz
02ddc     20 00 90 5D |  if_ne	jmp	#LR__0177
02de0     08 BE 05 F1 | 	add	ptr___system__dat__, #8
02de4     DF FA 01 FB | 	rdlong	local02, ptr___system__dat__
02de8     08 BE 85 F1 | 	sub	ptr___system__dat__, #8
02dec     02 FA CD F7 | 	test	local02, #2 wz
02df0     0C 00 90 AD |  if_e	jmp	#LR__0177
02df4     0D FA 05 F6 | 	mov	local02, #13
02df8     0D F0 05 F6 | 	mov	arg01, #13
02dfc     E4 FD BF FD | 	call	#__system___txraw
02e00                 | LR__0177
02e00     FC F0 01 F6 | 	mov	arg01, local01
02e04     DC FD BF FD | 	call	#__system___txraw
02e08     AF F0 03 F6 | 	mov	ptra, fp
02e0c     BF 00 A0 FD | 	call	#popregs_
02e10                 | __system___tx_ret
02e10     2D 00 64 FD | 	ret
02e14                 | 
02e14                 | __system___pinread
02e14     20 F0 CD F7 | 	test	arg01, #32 wz
02e18     FF D1 01 56 |  if_ne	mov	_var01, inb
02e1c     FE D1 01 A6 |  if_e	mov	_var01, ina
02e20     E8 CC 01 F6 | 	mov	result1, _var01
02e24     F8 CC 41 F0 | 	shr	result1, arg01
02e28     06 F0 45 F0 | 	shr	arg01, #6
02e2c     F8 CC 41 F7 | 	zerox	result1, arg01
02e30                 | __system___pinread_ret
02e30     2D 00 64 FD | 	ret
02e34                 | 
02e34                 | __system___waitms
02e34     03 5A 05 F6 | 	mov	COUNT_, #3
02e38     B0 00 A0 FD | 	call	#pushregs_
02e3c     F8 F8 01 F6 | 	mov	local01, arg01
02e40     14 FA 05 FB | 	rdlong	local02, #20
02e44     D0 D1 9F FE | 	loc	pa,	#(@LR__0179-@LR__0178)
02e48     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e4c                 | LR__0178
02e4c     01 00 00 FF 
02e50     E8 F9 5D F2 | 	cmps	local01, ##1000 wcz
02e54     1F FA 61 1D |  if_a	waitx	local02
02e58     01 00 00 1F 
02e5c     E8 F9 85 11 |  if_a	sub	local01, ##1000
02e60     E8 FF 9F 1D |  if_a	jmp	#LR__0178
02e64                 | LR__0179
02e64     0C BE 05 F1 | 	add	ptr___system__dat__, #12
02e68     DF FC 09 FB | 	rdlong	local03, ptr___system__dat__ wz
02e6c     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
02e70     20 00 90 5D |  if_ne	jmp	#LR__0180
02e74     FD 98 02 F6 | 	mov	muldiva_, local02
02e78     01 00 00 FF 
02e7c     E8 9B 06 F6 | 	mov	muldivb_, ##1000
02e80     CC 00 A0 FD | 	call	#unsdivide_
02e84     4D FD 01 F6 | 	mov	local03, muldivb_
02e88     0C BE 05 F1 | 	add	ptr___system__dat__, #12
02e8c     DF 9A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02e90     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
02e94                 | LR__0180
02e94     00 F8 5D F2 | 	cmps	local01, #0 wcz
02e98     FE F8 01 1D |  if_a	qmul	local01, local03
02e9c     18 F0 61 1D |  if_a	getqx	arg01
02ea0     1F F0 61 1D |  if_a	waitx	arg01
02ea4     AF F0 03 F6 | 	mov	ptra, fp
02ea8     BF 00 A0 FD | 	call	#popregs_
02eac                 | __system___waitms_ret
02eac     2D 00 64 FD | 	ret
02eb0                 | 
02eb0                 | __system___gc_ptrs
02eb0     0A 5A 05 F6 | 	mov	COUNT_, #10
02eb4     B0 00 A0 FD | 	call	#pushregs_
02eb8     DA F8 01 F6 | 	mov	local01, __heap_ptr
02ebc     FC FA 01 F6 | 	mov	local02, local01
02ec0     07 00 00 FF 
02ec4     F8 FB 05 F1 | 	add	local02, ##4088
02ec8     FC FC 09 FB | 	rdlong	local03, local01 wz
02ecc     74 00 90 5D |  if_ne	jmp	#LR__0181
02ed0     FD FE 01 F6 | 	mov	local04, local02
02ed4     FC FE 81 F1 | 	sub	local04, local01
02ed8     FC 02 58 FC | 	wrword	#1, local01
02edc     FC 00 02 F6 | 	mov	local05, local01
02ee0     02 00 06 F1 | 	add	local05, #2
02ee4     36 00 80 FF 
02ee8     00 21 59 FC | 	wrword	##27792, local05
02eec     FC 02 02 F6 | 	mov	local06, local01
02ef0     04 02 06 F1 | 	add	local06, #4
02ef4     01 01 58 FC | 	wrword	#0, local06
02ef8     FC 04 02 F6 | 	mov	local07, local01
02efc     06 04 06 F1 | 	add	local07, #6
02f00     02 03 58 FC | 	wrword	#1, local07
02f04     10 F8 05 F1 | 	add	local01, #16
02f08     FF FC 51 F6 | 	abs	local03, local04 wc
02f0c     04 FC 45 F0 | 	shr	local03, #4
02f10     FE FC 61 C6 |  if_b	neg	local03, local03
02f14     FC FC 51 FC | 	wrword	local03, local01
02f18     FC 06 02 F6 | 	mov	local08, local01
02f1c     02 06 06 F1 | 	add	local08, #2
02f20     36 00 80 FF 
02f24     03 1F 59 FC | 	wrword	##27791, local08
02f28     FC 08 02 F6 | 	mov	local09, local01
02f2c     04 08 06 F1 | 	add	local09, #4
02f30     04 01 58 FC | 	wrword	#0, local09
02f34     FC 0A 02 F6 | 	mov	local10, local01
02f38     06 0A 06 F1 | 	add	local10, #6
02f3c     05 01 58 FC | 	wrword	#0, local10
02f40     10 F8 85 F1 | 	sub	local01, #16
02f44                 | LR__0181
02f44     FD CE 01 F6 | 	mov	result2, local02
02f48     FC CC 01 F6 | 	mov	result1, local01
02f4c     AF F0 03 F6 | 	mov	ptra, fp
02f50     BF 00 A0 FD | 	call	#popregs_
02f54                 | __system___gc_ptrs_ret
02f54     2D 00 64 FD | 	ret
02f58                 | 
02f58                 | __system___gc_nextBlockPtr
02f58     02 5A 05 F6 | 	mov	COUNT_, #2
02f5c     B0 00 A0 FD | 	call	#pushregs_
02f60     F8 F8 01 F6 | 	mov	local01, arg01
02f64     FC FA E9 FA | 	rdword	local02, local01 wz
02f68     10 00 90 5D |  if_ne	jmp	#LR__0182
02f6c     1B 00 00 FF 
02f70     58 F1 05 F6 | 	mov	arg01, ##@LR__0225
02f74     F8 01 B0 FD | 	call	#__system___gc_errmsg
02f78     0C 00 90 FD | 	jmp	#LR__0183
02f7c                 | LR__0182
02f7c     04 FA 65 F0 | 	shl	local02, #4
02f80     FC CC 01 F6 | 	mov	result1, local01
02f84     FD CC 01 F1 | 	add	result1, local02
02f88                 | LR__0183
02f88     AF F0 03 F6 | 	mov	ptra, fp
02f8c     BF 00 A0 FD | 	call	#popregs_
02f90                 | __system___gc_nextBlockPtr_ret
02f90     2D 00 64 FD | 	ret
02f94                 | 
02f94                 | __system___gc_tryalloc
02f94     1B 5A 05 F6 | 	mov	COUNT_, #27
02f98     B0 00 A0 FD | 	call	#pushregs_
02f9c     F8 F8 01 F6 | 	mov	local01, arg01
02fa0     F9 FA 01 F6 | 	mov	local02, arg02
02fa4     08 FF BF FD | 	call	#__system___gc_ptrs
02fa8     E6 FC 01 F6 | 	mov	local03, result1
02fac     E7 FE 01 F6 | 	mov	local04, result2
02fb0     FE 00 02 F6 | 	mov	local05, local03
02fb4     00 02 06 F6 | 	mov	local06, #0
02fb8     9C D0 9F FE | 	loc	pa,	#(@LR__0185-@LR__0184)
02fbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fc0                 | LR__0184
02fc0     00 05 02 F6 | 	mov	local07, local05
02fc4     06 00 06 F1 | 	add	local05, #6
02fc8     00 07 02 F6 | 	mov	local08, local05
02fcc     FE 08 02 F6 | 	mov	local09, local03
02fd0     03 0B E2 FA | 	rdword	local10, local08
02fd4     04 F1 01 F6 | 	mov	arg01, local09
02fd8     05 F3 09 F6 | 	mov	arg02, local10 wz
02fdc     00 CC 05 A6 |  if_e	mov	result1, #0
02fe0     04 F2 65 50 |  if_ne	shl	arg02, #4
02fe4     F9 F0 01 51 |  if_ne	add	arg01, arg02
02fe8     F8 CC 01 56 |  if_ne	mov	result1, arg01
02fec     E6 0C 02 F6 | 	mov	local11, result1
02ff0     06 01 0A F6 | 	mov	local05, local11 wz
02ff4     00 09 02 56 |  if_ne	mov	local09, local05
02ff8     04 0F 02 56 |  if_ne	mov	local12, local09
02ffc     07 03 E2 5A |  if_ne	rdword	local06, local12
03000     00 00 0E F2 | 	cmp	local05, #0 wz
03004     10 00 90 AD |  if_e	jmp	#LR__0186
03008     FF 00 5A F2 | 	cmps	local05, local04 wcz
0300c     08 00 90 3D |  if_ae	jmp	#LR__0186
03010     01 F9 59 F2 | 	cmps	local01, local06 wcz
03014     A8 FF 9F 1D |  if_a	jmp	#LR__0184
03018                 | LR__0185
03018                 | LR__0186
03018     00 00 0E F2 | 	cmp	local05, #0 wz
0301c     00 CD 01 A6 |  if_e	mov	result1, local05
03020     40 01 90 AD |  if_e	jmp	#LR__0189
03024     00 11 02 F6 | 	mov	local13, local05
03028     06 10 06 F1 | 	add	local13, #6
0302c     08 13 E2 FA | 	rdword	local14, local13
03030     01 F9 59 F2 | 	cmps	local01, local06 wcz
03034     CC 00 90 3D |  if_ae	jmp	#LR__0188
03038     00 15 02 F6 | 	mov	local15, local05
0303c     0A F9 51 FC | 	wrword	local01, local15
03040     FC 16 02 F6 | 	mov	local16, local01
03044     04 16 66 F0 | 	shl	local16, #4
03048     00 19 02 F6 | 	mov	local17, local05
0304c     0B 19 02 F1 | 	add	local17, local16
03050     01 1B 02 F6 | 	mov	local18, local06
03054     FC 1A 82 F1 | 	sub	local18, local01
03058     0C 1D 02 F6 | 	mov	local19, local17
0305c     0E 1B 52 FC | 	wrword	local18, local19
03060     0C 1F 02 F6 | 	mov	local20, local17
03064     02 1E 06 F1 | 	add	local20, #2
03068     36 00 80 FF 
0306c     0F 1F 59 FC | 	wrword	##27791, local20
03070     0C 21 02 F6 | 	mov	local21, local17
03074     04 20 06 F1 | 	add	local21, #4
03078     00 F3 09 F6 | 	mov	arg02, local05 wz
0307c     00 CC 05 A6 |  if_e	mov	result1, #0
03080     FE F2 81 51 |  if_ne	sub	arg02, local03
03084     04 F2 45 50 |  if_ne	shr	arg02, #4
03088     F9 CC 01 56 |  if_ne	mov	result1, arg02
0308c     10 CD 51 FC | 	wrword	result1, local21
03090     0C 23 02 F6 | 	mov	local22, local17
03094     08 09 E2 FA | 	rdword	local09, local13
03098     06 22 06 F1 | 	add	local22, #6
0309c     11 09 52 FC | 	wrword	local09, local22
030a0     0C 25 02 F6 | 	mov	local23, local17
030a4     12 F3 09 F6 | 	mov	arg02, local23 wz
030a8     00 CC 05 A6 |  if_e	mov	result1, #0
030ac     FE F2 81 51 |  if_ne	sub	arg02, local03
030b0     04 F2 45 50 |  if_ne	shr	arg02, #4
030b4     F9 CC 01 56 |  if_ne	mov	result1, arg02
030b8     E6 12 02 F6 | 	mov	local14, result1
030bc     0C F1 01 F6 | 	mov	arg01, local17
030c0     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
030c4     E6 26 0A F6 | 	mov	local24, result1 wz
030c8     38 00 90 AD |  if_e	jmp	#LR__0187
030cc     FF 26 5A F2 | 	cmps	local24, local04 wcz
030d0     30 00 90 3D |  if_ae	jmp	#LR__0187
030d4     13 29 02 F6 | 	mov	local25, local24
030d8     04 28 06 F1 | 	add	local25, #4
030dc     FE 08 02 F6 | 	mov	local09, local03
030e0     12 0B 02 F6 | 	mov	local10, local23
030e4     04 F1 01 F6 | 	mov	arg01, local09
030e8     05 F3 09 F6 | 	mov	arg02, local10 wz
030ec     00 CC 05 A6 |  if_e	mov	result1, #0
030f0     F8 F2 81 51 |  if_ne	sub	arg02, arg01
030f4     04 F2 45 50 |  if_ne	shr	arg02, #4
030f8     F9 CC 01 56 |  if_ne	mov	result1, arg02
030fc     E6 0C 02 F6 | 	mov	local11, result1
03100     14 0D 52 FC | 	wrword	local11, local25
03104                 | LR__0187
03104                 | LR__0188
03104     06 04 06 F1 | 	add	local07, #6
03108     02 13 52 FC | 	wrword	local14, local07
0310c     36 00 00 FF 
03110     80 08 06 F6 | 	mov	local09, ##27776
03114     FD 08 42 F5 | 	or	local09, local02
03118     00 2B 02 F6 | 	mov	local26, local05
0311c     02 2A 06 F1 | 	add	local26, #2
03120     01 CC 61 FD | 	cogid	result1
03124     E6 08 42 F5 | 	or	local09, result1
03128     15 09 52 FC | 	wrword	local09, local26
0312c     FE 2C 02 F6 | 	mov	local27, local03
03130     08 2C 06 F1 | 	add	local27, #8
03134     16 09 E2 FA | 	rdword	local09, local27
03138     08 09 52 FC | 	wrword	local09, local13
0313c     00 F3 09 F6 | 	mov	arg02, local05 wz
03140     00 CC 05 A6 |  if_e	mov	result1, #0
03144     FE F2 81 51 |  if_ne	sub	arg02, local03
03148     04 F2 45 50 |  if_ne	shr	arg02, #4
0314c     F9 CC 01 56 |  if_ne	mov	result1, arg02
03150     16 CD 51 FC | 	wrword	result1, local27
03154     08 00 06 F1 | 	add	local05, #8
03158     00 CD 01 F6 | 	mov	result1, local05
0315c     00 C0 31 FF 
03160     00 CC 45 F5 | 	or	result1, ##1669332992
03164                 | LR__0189
03164     AF F0 03 F6 | 	mov	ptra, fp
03168     BF 00 A0 FD | 	call	#popregs_
0316c                 | __system___gc_tryalloc_ret
0316c     2D 00 64 FD | 	ret
03170                 | 
03170                 | __system___gc_errmsg
03170     02 5A 05 F6 | 	mov	COUNT_, #2
03174     B0 00 A0 FD | 	call	#pushregs_
03178     F8 F8 01 F6 | 	mov	local01, arg01
0317c                 | LR__0190
0317c     FC FA C9 FA | 	rdbyte	local02, local01 wz
03180     01 F8 05 F1 | 	add	local01, #1
03184     0C 00 90 AD |  if_e	jmp	#LR__0191
03188     FD F0 01 F6 | 	mov	arg01, local02
0318c     3C FC BF FD | 	call	#__system___tx
03190     E8 FF 9F FD | 	jmp	#LR__0190
03194                 | LR__0191
03194     00 CC 05 F6 | 	mov	result1, #0
03198     AF F0 03 F6 | 	mov	ptra, fp
0319c     BF 00 A0 FD | 	call	#popregs_
031a0                 | __system___gc_errmsg_ret
031a0     2D 00 64 FD | 	ret
031a4                 | 
031a4                 | __system___gc_alloc_managed
031a4     02 5A 05 F6 | 	mov	COUNT_, #2
031a8     B0 00 A0 FD | 	call	#pushregs_
031ac     F8 F8 01 F6 | 	mov	local01, arg01
031b0     00 F2 05 F6 | 	mov	arg02, #0
031b4     30 00 B0 FD | 	call	#__system___gc_doalloc
031b8     E6 FA 09 F6 | 	mov	local02, result1 wz
031bc     18 00 90 5D |  if_ne	jmp	#LR__0192
031c0     00 F8 5D F2 | 	cmps	local01, #0 wcz
031c4     10 00 90 ED |  if_be	jmp	#LR__0192
031c8     1B 00 00 FF 
031cc     74 F1 05 F6 | 	mov	arg01, ##@LR__0226
031d0     9C FF BF FD | 	call	#__system___gc_errmsg
031d4     04 00 90 FD | 	jmp	#LR__0193
031d8                 | LR__0192
031d8     FD CC 01 F6 | 	mov	result1, local02
031dc                 | LR__0193
031dc     AF F0 03 F6 | 	mov	ptra, fp
031e0     BF 00 A0 FD | 	call	#popregs_
031e4                 | __system___gc_alloc_managed_ret
031e4     2D 00 64 FD | 	ret
031e8                 | 
031e8                 | __system___gc_doalloc
031e8     07 5A 05 F6 | 	mov	COUNT_, #7
031ec     B0 00 A0 FD | 	call	#pushregs_
031f0     F8 F8 09 F6 | 	mov	local01, arg01 wz
031f4     F9 FA 01 F6 | 	mov	local02, arg02
031f8     00 CC 05 A6 |  if_e	mov	result1, #0
031fc     8C 00 90 AD |  if_e	jmp	#LR__0201
03200     17 F8 05 F1 | 	add	local01, #23
03204     0F F8 25 F5 | 	andn	local01, #15
03208     04 F8 45 F0 | 	shr	local01, #4
0320c     14 BE 05 F1 | 	add	ptr___system__dat__, #20
03210     DF FC 01 F6 | 	mov	local03, ptr___system__dat__
03214     FE F0 01 F6 | 	mov	arg01, local03
03218     14 BE 85 F1 | 	sub	ptr___system__dat__, #20
0321c     74 FB BF FD | 	call	#__system___lockmem
03220     FC F0 01 F6 | 	mov	arg01, local01
03224     FD F2 01 F6 | 	mov	arg02, local02
03228     68 FD BF FD | 	call	#__system___gc_tryalloc
0322c     E6 FE 09 F6 | 	mov	local04, result1 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0194
03234     10 03 B0 FD | 	call	#__system___gc_docollect
03238     FC F0 01 F6 | 	mov	arg01, local01
0323c     FD F2 01 F6 | 	mov	arg02, local02
03240     50 FD BF FD | 	call	#__system___gc_tryalloc
03244     E6 FE 01 F6 | 	mov	local04, result1
03248                 | LR__0194
03248     FE 00 68 FC | 	wrlong	#0, local03
0324c     00 FE 0D F2 | 	cmp	local04, #0 wz
03250     34 00 90 AD |  if_e	jmp	#LR__0200
03254     04 F8 65 F0 | 	shl	local01, #4
03258     08 F8 85 F1 | 	sub	local01, #8
0325c     FC 00 52 F6 | 	abs	local05, local01 wc
03260     02 00 46 F0 | 	shr	local05, #2
03264     00 01 62 C6 |  if_b	neg	local05, local05
03268     00 03 0A F6 | 	mov	local06, local05 wz
0326c     FF 04 02 F6 | 	mov	local07, local04
03270     14 00 90 AD |  if_e	jmp	#LR__0199
03274     94 CD 9F FE | 	loc	pa,	#(@LR__0197-@LR__0195)
03278     93 00 A0 FD | 	call	#FCACHE_LOAD_
0327c                 | LR__0195
0327c     01 05 D8 FC | 	rep	@LR__0198, local06
03280                 | LR__0196
03280     02 01 68 FC | 	wrlong	#0, local07
03284     04 04 06 F1 | 	add	local07, #4
03288                 | LR__0197
03288                 | LR__0198
03288                 | LR__0199
03288                 | LR__0200
03288     FF CC 01 F6 | 	mov	result1, local04
0328c                 | LR__0201
0328c     AF F0 03 F6 | 	mov	ptra, fp
03290     BF 00 A0 FD | 	call	#popregs_
03294                 | __system___gc_doalloc_ret
03294     2D 00 64 FD | 	ret
03298                 | 
03298                 | __system___gc_isvalidptr
03298     FA D0 01 F6 | 	mov	_var01, arg03
0329c     E8 D2 01 F6 | 	mov	_var02, _var01
032a0     00 F8 7F FF 
032a4     00 D2 05 F5 | 	and	_var02, ##-1048576
032a8     00 C0 31 FF 
032ac     00 D2 0D F2 | 	cmp	_var02, ##1669332992 wz
032b0     00 CC 05 56 |  if_ne	mov	result1, #0
032b4     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
032b8     08 D0 85 F1 | 	sub	_var01, #8
032bc     E8 D4 01 F6 | 	mov	_var03, _var01
032c0     00 F8 7F FF 
032c4     00 D4 25 F5 | 	andn	_var03, ##-1048576
032c8     F8 D4 59 F2 | 	cmps	_var03, arg01 wcz
032cc     08 00 90 CD |  if_b	jmp	#LR__0202
032d0     F9 D4 59 F2 | 	cmps	_var03, arg02 wcz
032d4     08 00 90 CD |  if_b	jmp	#LR__0203
032d8                 | LR__0202
032d8     00 CC 05 F6 | 	mov	result1, #0
032dc     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
032e0                 | LR__0203
032e0     EA D2 01 F6 | 	mov	_var02, _var03
032e4     F8 D2 61 F5 | 	xor	_var02, arg01
032e8     0F D2 0D F5 | 	and	_var02, #15 wz
032ec     00 CC 05 56 |  if_ne	mov	result1, #0
032f0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
032f4     EA D6 01 F6 | 	mov	_var04, _var03
032f8     02 D6 05 F1 | 	add	_var04, #2
032fc     EB D2 E1 FA | 	rdword	_var02, _var04
03300     7F 00 00 FF 
03304     C0 D3 05 F5 | 	and	_var02, ##65472
03308     36 00 00 FF 
0330c     80 D2 0D F2 | 	cmp	_var02, ##27776 wz
03310     00 CC 05 56 |  if_ne	mov	result1, #0
03314     EA CC 01 A6 |  if_e	mov	result1, _var03
03318                 | __system___gc_isvalidptr_ret
03318     2D 00 64 FD | 	ret
0331c                 | 
0331c                 | __system___gc_dofree
0331c     1A 5A 05 F6 | 	mov	COUNT_, #26
03320     B0 00 A0 FD | 	call	#pushregs_
03324     F8 F8 01 F6 | 	mov	local01, arg01
03328     84 FB BF FD | 	call	#__system___gc_ptrs
0332c     E7 FA 01 F6 | 	mov	local02, result2
03330     E6 FC 01 F6 | 	mov	local03, result1
03334     FC FE 01 F6 | 	mov	local04, local01
03338     02 FE 05 F1 | 	add	local04, #2
0333c     36 00 80 FF 
03340     FF 1E 59 FC | 	wrword	##27791, local04
03344     FC 00 02 F6 | 	mov	local05, local01
03348     FC F0 01 F6 | 	mov	arg01, local01
0334c     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
03350     E6 02 02 F6 | 	mov	local06, result1
03354     F8 CC 9F FE | 	loc	pa,	#(@LR__0205-@LR__0204)
03358     93 00 A0 FD | 	call	#FCACHE_LOAD_
0335c                 | LR__0204
0335c     04 00 06 F1 | 	add	local05, #4
03360     00 05 02 F6 | 	mov	local07, local05
03364     02 F3 E9 FA | 	rdword	arg02, local07 wz
03368     FE F0 01 F6 | 	mov	arg01, local03
0336c     00 CC 05 A6 |  if_e	mov	result1, #0
03370     04 F2 65 50 |  if_ne	shl	arg02, #4
03374     F9 F0 01 51 |  if_ne	add	arg01, arg02
03378     F8 CC 01 56 |  if_ne	mov	result1, arg01
0337c     E6 00 0A F6 | 	mov	local05, result1 wz
03380     28 00 90 AD |  if_e	jmp	#LR__0206
03384     00 F1 01 F6 | 	mov	arg01, local05
03388     00 06 06 F6 | 	mov	local08, #0
0338c     02 F0 05 F1 | 	add	arg01, #2
03390     F8 08 E2 FA | 	rdword	local09, arg01
03394     36 00 00 FF 
03398     8F 08 0E F2 | 	cmp	local09, ##27791 wz
0339c     01 06 66 A6 |  if_e	neg	local08, #1
033a0     03 CD 01 F6 | 	mov	result1, local08
033a4     E6 0A 0A F6 | 	mov	local10, result1 wz
033a8     B0 FF 9F AD |  if_e	jmp	#LR__0204
033ac                 | LR__0205
033ac                 | LR__0206
033ac     00 00 0E F2 | 	cmp	local05, #0 wz
033b0     FE 00 02 A6 |  if_e	mov	local05, local03
033b4     00 0D 02 F6 | 	mov	local11, local05
033b8     06 0C 06 F1 | 	add	local11, #6
033bc     FC 0E 02 F6 | 	mov	local12, local01
033c0     06 11 E2 FA | 	rdword	local13, local11
033c4     06 0E 06 F1 | 	add	local12, #6
033c8     07 11 52 FC | 	wrword	local13, local12
033cc     FC F2 09 F6 | 	mov	arg02, local01 wz
033d0     00 CC 05 A6 |  if_e	mov	result1, #0
033d4     FE F2 81 51 |  if_ne	sub	arg02, local03
033d8     04 F2 45 50 |  if_ne	shr	arg02, #4
033dc     F9 CC 01 56 |  if_ne	mov	result1, arg02
033e0     E6 12 02 F6 | 	mov	local14, result1
033e4     06 13 52 FC | 	wrword	local14, local11
033e8     FE 00 0A F2 | 	cmp	local05, local03 wz
033ec     74 00 90 AD |  if_e	jmp	#LR__0209
033f0     00 F1 01 F6 | 	mov	arg01, local05
033f4     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
033f8     FC CC 09 F2 | 	cmp	result1, local01 wz
033fc     64 00 90 5D |  if_ne	jmp	#LR__0208
03400     00 15 02 F6 | 	mov	local15, local05
03404     0A 17 E2 FA | 	rdword	local16, local15
03408     FC 18 02 F6 | 	mov	local17, local01
0340c     0C 0B E2 FA | 	rdword	local10, local17
03410     05 17 02 F1 | 	add	local16, local10
03414     0A 17 52 FC | 	wrword	local16, local15
03418     FF 00 58 FC | 	wrword	#0, local04
0341c     FC F0 01 F6 | 	mov	arg01, local01
03420     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
03424     E6 02 02 F6 | 	mov	local06, result1
03428     FD 02 5A F2 | 	cmps	local06, local02 wcz
0342c     24 00 90 3D |  if_ae	jmp	#LR__0207
03430     01 1B 02 F6 | 	mov	local18, local06
03434     04 1A 06 F1 | 	add	local18, #4
03438     00 F3 09 F6 | 	mov	arg02, local05 wz
0343c     00 CC 05 A6 |  if_e	mov	result1, #0
03440     FE F2 81 51 |  if_ne	sub	arg02, local03
03444     04 F2 45 50 |  if_ne	shr	arg02, #4
03448     F9 CC 01 56 |  if_ne	mov	result1, arg02
0344c     E6 12 02 F6 | 	mov	local14, result1
03450     0D 13 52 FC | 	wrword	local14, local18
03454                 | LR__0207
03454     07 11 E2 FA | 	rdword	local13, local12
03458     06 11 52 FC | 	wrword	local13, local11
0345c     07 01 58 FC | 	wrword	#0, local12
03460     00 F9 01 F6 | 	mov	local01, local05
03464                 | LR__0208
03464                 | LR__0209
03464     FC F0 01 F6 | 	mov	arg01, local01
03468     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
0346c     E6 1C 0A F6 | 	mov	local19, result1 wz
03470     C4 00 90 AD |  if_e	jmp	#LR__0211
03474     FD 1C 5A F2 | 	cmps	local19, local02 wcz
03478     BC 00 90 3D |  if_ae	jmp	#LR__0211
0347c     0E F1 01 F6 | 	mov	arg01, local19
03480     00 06 06 F6 | 	mov	local08, #0
03484     02 F0 05 F1 | 	add	arg01, #2
03488     F8 08 E2 FA | 	rdword	local09, arg01
0348c     36 00 00 FF 
03490     8F 08 0E F2 | 	cmp	local09, ##27791 wz
03494     01 06 66 A6 |  if_e	neg	local08, #1
03498     03 CD 09 F6 | 	mov	result1, local08 wz
0349c     98 00 90 AD |  if_e	jmp	#LR__0211
034a0     FC 00 02 F6 | 	mov	local05, local01
034a4     0E F9 01 F6 | 	mov	local01, local19
034a8     00 1F 02 F6 | 	mov	local20, local05
034ac     0F 21 E2 FA | 	rdword	local21, local20
034b0     FC 22 02 F6 | 	mov	local22, local01
034b4     11 0B E2 FA | 	rdword	local10, local22
034b8     05 21 02 F1 | 	add	local21, local10
034bc     0F 21 52 FC | 	wrword	local21, local20
034c0     FC 24 02 F6 | 	mov	local23, local01
034c4     06 24 06 F1 | 	add	local23, #6
034c8     00 27 02 F6 | 	mov	local24, local05
034cc     12 11 E2 FA | 	rdword	local13, local23
034d0     06 26 06 F1 | 	add	local24, #6
034d4     13 11 52 FC | 	wrword	local13, local24
034d8     FC 28 02 F6 | 	mov	local25, local01
034dc     02 28 06 F1 | 	add	local25, #2
034e0     14 55 59 FC | 	wrword	#170, local25
034e4     12 01 58 FC | 	wrword	#0, local23
034e8     FC 10 02 F6 | 	mov	local13, local01
034ec     08 F1 01 F6 | 	mov	arg01, local13
034f0     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
034f4     E6 0A 02 F6 | 	mov	local10, result1
034f8     05 03 0A F6 | 	mov	local06, local10 wz
034fc     38 00 90 AD |  if_e	jmp	#LR__0210
03500     FD 02 5A F2 | 	cmps	local06, local02 wcz
03504     30 00 90 3D |  if_ae	jmp	#LR__0210
03508     01 2B 02 F6 | 	mov	local26, local06
0350c     04 2A 06 F1 | 	add	local26, #4
03510     FE 10 02 F6 | 	mov	local13, local03
03514     00 0B 02 F6 | 	mov	local10, local05
03518     08 F1 01 F6 | 	mov	arg01, local13
0351c     05 F3 09 F6 | 	mov	arg02, local10 wz
03520     00 CC 05 A6 |  if_e	mov	result1, #0
03524     F8 F2 81 51 |  if_ne	sub	arg02, arg01
03528     04 F2 45 50 |  if_ne	shr	arg02, #4
0352c     F9 CC 01 56 |  if_ne	mov	result1, arg02
03530     E6 12 02 F6 | 	mov	local14, result1
03534     15 13 52 FC | 	wrword	local14, local26
03538                 | LR__0210
03538                 | LR__0211
03538     01 CD 01 F6 | 	mov	result1, local06
0353c     AF F0 03 F6 | 	mov	ptra, fp
03540     BF 00 A0 FD | 	call	#popregs_
03544                 | __system___gc_dofree_ret
03544     2D 00 64 FD | 	ret
03548                 | 
03548                 | __system___gc_docollect
03548     0C 5A 05 F6 | 	mov	COUNT_, #12
0354c     B0 00 A0 FD | 	call	#pushregs_
03550     5C F9 BF FD | 	call	#__system___gc_ptrs
03554     E7 F8 01 F6 | 	mov	local01, result2
03558     E6 FA 01 F6 | 	mov	local02, result1
0355c     FD F0 01 F6 | 	mov	arg01, local02
03560     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03564     E6 FC 09 F6 | 	mov	local03, result1 wz
03568     01 CC 61 FD | 	cogid	result1
0356c     E6 FE 01 F6 | 	mov	local04, result1
03570     2C 00 90 AD |  if_e	jmp	#LR__0213
03574                 | LR__0212
03574     FC FC 59 F2 | 	cmps	local03, local01 wcz
03578     24 00 90 3D |  if_ae	jmp	#LR__0213
0357c     FE 00 02 F6 | 	mov	local05, local03
03580     02 00 06 F1 | 	add	local05, #2
03584     00 03 E2 FA | 	rdword	local06, local05
03588     20 02 26 F5 | 	andn	local06, #32
0358c     00 03 52 FC | 	wrword	local06, local05
03590     FE F0 01 F6 | 	mov	arg01, local03
03594     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03598     E6 FC 09 F6 | 	mov	local03, result1 wz
0359c     D4 FF 9F 5D |  if_ne	jmp	#LR__0212
035a0                 | LR__0213
035a0     00 04 06 F6 | 	mov	local07, #0
035a4     00 F0 05 F6 | 	mov	arg01, #0
035a8     80 F7 BF FD | 	call	#__system____topofstack
035ac     E6 06 02 F6 | 	mov	local08, result1
035b0     02 F1 01 F6 | 	mov	arg01, local07
035b4     03 F3 01 F6 | 	mov	arg02, local08
035b8     A0 00 B0 FD | 	call	#__system___gc_markhub
035bc     2C 01 B0 FD | 	call	#__system___gc_markcog
035c0     FD F0 01 F6 | 	mov	arg01, local02
035c4     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
035c8     E6 08 0A F6 | 	mov	local09, result1 wz
035cc     10 00 90 5D |  if_ne	jmp	#LR__0214
035d0     1B 00 00 FF 
035d4     91 F1 05 F6 | 	mov	arg01, ##@LR__0227
035d8     94 FB BF FD | 	call	#__system___gc_errmsg
035dc     70 00 90 FD | 	jmp	#LR__0220
035e0                 | LR__0214
035e0                 | LR__0215
035e0     04 FD 01 F6 | 	mov	local03, local09
035e4     FE F0 01 F6 | 	mov	arg01, local03
035e8     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
035ec     E6 08 02 F6 | 	mov	local09, result1
035f0     FE 0A 02 F6 | 	mov	local10, local03
035f4     02 0A 06 F1 | 	add	local10, #2
035f8     05 0D E2 FA | 	rdword	local11, local10
035fc     20 0C CE F7 | 	test	local11, #32 wz
03600     3C 00 90 5D |  if_ne	jmp	#LR__0218
03604     06 0F 02 F6 | 	mov	local12, local11
03608     10 0E 0E F5 | 	and	local12, #16 wz
0360c     30 00 90 5D |  if_ne	jmp	#LR__0218
03610     06 05 02 F6 | 	mov	local07, local11
03614     0F 04 06 F5 | 	and	local07, #15
03618     02 0D 02 F6 | 	mov	local11, local07
0361c     FF 0C 0A F2 | 	cmp	local11, local04 wz
03620     08 00 90 AD |  if_e	jmp	#LR__0216
03624     0E 0C 0E F2 | 	cmp	local11, #14 wz
03628     14 00 90 5D |  if_ne	jmp	#LR__0217
0362c                 | LR__0216
0362c     FE 04 02 F6 | 	mov	local07, local03
03630     02 F1 01 F6 | 	mov	arg01, local07
03634     E4 FC BF FD | 	call	#__system___gc_dofree
03638     E6 0E 02 F6 | 	mov	local12, result1
0363c     07 09 02 F6 | 	mov	local09, local12
03640                 | LR__0217
03640                 | LR__0218
03640     00 08 0E F2 | 	cmp	local09, #0 wz
03644     08 00 90 AD |  if_e	jmp	#LR__0219
03648     FC 08 5A F2 | 	cmps	local09, local01 wcz
0364c     90 FF 9F CD |  if_b	jmp	#LR__0215
03650                 | LR__0219
03650                 | LR__0220
03650     AF F0 03 F6 | 	mov	ptra, fp
03654     BF 00 A0 FD | 	call	#popregs_
03658                 | __system___gc_docollect_ret
03658     2D 00 64 FD | 	ret
0365c                 | 
0365c                 | __system___gc_markhub
0365c     0A 5A 05 F6 | 	mov	COUNT_, #10
03660     B0 00 A0 FD | 	call	#pushregs_
03664     F8 F8 01 F6 | 	mov	local01, arg01
03668     F9 FA 01 F6 | 	mov	local02, arg02
0366c     40 F8 BF FD | 	call	#__system___gc_ptrs
03670     E6 FC 01 F6 | 	mov	local03, result1
03674     E7 FE 01 F6 | 	mov	local04, result2
03678                 | LR__0221
03678     FD F8 59 F2 | 	cmps	local01, local02 wcz
0367c     60 00 90 3D |  if_ae	jmp	#LR__0222
03680     FC F4 01 FB | 	rdlong	arg03, local01
03684     04 F8 05 F1 | 	add	local01, #4
03688     FE F0 01 F6 | 	mov	arg01, local03
0368c     FF F2 01 F6 | 	mov	arg02, local04
03690     04 FC BF FD | 	call	#__system___gc_isvalidptr
03694     E6 00 0A F6 | 	mov	local05, result1 wz
03698     DC FF 9F AD |  if_e	jmp	#LR__0221
0369c     00 F1 01 F6 | 	mov	arg01, local05
036a0     00 02 06 F6 | 	mov	local06, #0
036a4     02 F0 05 F1 | 	add	arg01, #2
036a8     F8 04 E2 FA | 	rdword	local07, arg01
036ac     36 00 00 FF 
036b0     8F 04 0E F2 | 	cmp	local07, ##27791 wz
036b4     01 02 66 A6 |  if_e	neg	local06, #1
036b8     01 CD 01 F6 | 	mov	result1, local06
036bc     E6 06 0A F6 | 	mov	local08, result1 wz
036c0     B4 FF 9F 5D |  if_ne	jmp	#LR__0221
036c4     00 09 02 F6 | 	mov	local09, local05
036c8     02 08 06 F1 | 	add	local09, #2
036cc     04 0B E2 FA | 	rdword	local10, local09
036d0     0F 0A 26 F5 | 	andn	local10, #15
036d4     2E 0A 46 F5 | 	or	local10, #46
036d8     04 0B 52 FC | 	wrword	local10, local09
036dc     98 FF 9F FD | 	jmp	#LR__0221
036e0                 | LR__0222
036e0     AF F0 03 F6 | 	mov	ptra, fp
036e4     BF 00 A0 FD | 	call	#popregs_
036e8                 | __system___gc_markhub_ret
036e8     2D 00 64 FD | 	ret
036ec                 | 
036ec                 | __system___gc_markcog
036ec     06 5A 05 F6 | 	mov	COUNT_, #6
036f0     B0 00 A0 FD | 	call	#pushregs_
036f4     B8 F7 BF FD | 	call	#__system___gc_ptrs
036f8     E6 F8 01 F6 | 	mov	local01, result1
036fc     E7 FA 01 F6 | 	mov	local02, result2
03700     00 FC 05 F6 | 	mov	local03, #0
03704                 | LR__0223
03704     F0 FF 05 F6 | 	mov	local04, #496
03708     FE FE 81 F1 | 	sub	local04, local03
0370c     F0 FF 05 F1 | 	add	local04, #496
03710                 | 	'.live	local04
03710     00 FE 95 F9 | 	alts	local04, #0
03714     FF 00 02 F6 | 	mov	local05, local04
03718     FD F2 01 F6 | 	mov	arg02, local02
0371c     FC F0 01 F6 | 	mov	arg01, local01
03720     00 F5 01 F6 | 	mov	arg03, local05
03724     70 FB BF FD | 	call	#__system___gc_isvalidptr
03728     E6 00 0A F6 | 	mov	local05, result1 wz
0372c     10 00 90 AD |  if_e	jmp	#LR__0224
03730     02 00 06 F1 | 	add	local05, #2
03734     00 03 E2 FA | 	rdword	local06, local05
03738     20 02 46 F5 | 	or	local06, #32
0373c     00 03 52 FC | 	wrword	local06, local05
03740                 | LR__0224
03740     01 FC 05 F1 | 	add	local03, #1
03744     F0 FD 5D F2 | 	cmps	local03, #496 wcz
03748     B8 FF 9F CD |  if_b	jmp	#LR__0223
0374c     AF F0 03 F6 | 	mov	ptra, fp
03750     BF 00 A0 FD | 	call	#popregs_
03754                 | __system___gc_markcog_ret
03754     2D 00 64 FD | 	ret
03758                 | 
03758                 | LR__0225
03758     20 21 21 21 
0375c     20 63 6F 72 
03760     72 75 70 74 
03764     65 64 20 68 
03768     65 61 70 3F 
0376c     3F 3F 20 21 
03770     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03773     00          | 	byte	0
03774                 | LR__0226
03774     20 21 21 21 
03778     20 6F 75 74 
0377c     20 6F 66 20 
03780     68 65 61 70 
03784     20 6D 65 6D 
03788     6F 72 79 20 
0378c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03790     00          | 	byte	0
03791                 | LR__0227
03791     20 21 21 21 
03795     20 63 6F 72 
03799     72 75 70 74 
0379d     65 64 20 68 
037a1     65 61 70 20 
037a5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
037a9     00          | 	byte	0
037aa                 | LR__0228
037aa     20          | 	byte	" "
037ab     00          | 	byte	0
037ac                 | LR__0229
037ac     20 20 50 32 
037b0     20 52 65 74 
037b4     72 6F 6D 61 
037b8     63 68 69 6E 
037bc     65 20 76 2E 
037c0     20 30 2E 30 
037c4     30          | 	byte	"  P2 Retromachine v. 0.00"
037c5     00          | 	byte	0
037c6                 | LR__0230
037c6     20          | 	byte	" "
037c7     00          | 	byte	0
037c8                 | LR__0231
037c8     20 20 52 65 
037cc     61 64 79    | 	byte	"  Ready"
037cf     00          | 	byte	0
037d0                 | LR__0232
037d0     20          | 	byte	" "
037d1     00          | 	byte	0
037d2                 | LR__0233
037d2     20 20       | 	byte	"  "
037d4     00          | 	byte	0
037d5                 | LR__0234
037d5     43 3A 5C 6B 
037d9     65 72 6E 65 
037dd     6C 2E 69 6D 
037e1     67          | 	byte	"C:\kernel.img"
037e2     00          | 	byte	0
037e3                 | LR__0235
037e3     20 4D 69 64 
037e7     69 3A 20    | 	byte	" Midi: "
037ea     00          | 	byte	0
037eb                 | LR__0236
037eb     20 20 4D 6F 
037ef     75 73 65 20 
037f3     6D 6F 76 65 
037f7     64 2C 20 78 
037fb     3D 20       | 	byte	"  Mouse moved, x= "
037fd     00          | 	byte	0
037fe                 | LR__0237
037fe     2C 20 79 3D 
03802     20          | 	byte	", y= "
03803     00          | 	byte	0
03804                 | LR__0238
03804     20 20 4D 6F 
03808     75 73 65 20 
0380c     6D 6F 76 65 
03810     64 2C 20 78 
03814     3D 20       | 	byte	"  Mouse moved, x= "
03816     00          | 	byte	0
03817                 | LR__0239
03817     2C 20 79 3D 
0381b     20          | 	byte	", y= "
0381c     00          | 	byte	0
0381d                 | LR__0240
0381d     20 20 4D 6F 
03821     75 73 65 20 
03825     77 68 65 65 
03829     6C 3A 20    | 	byte	"  Mouse wheel: "
0382c     00          | 	byte	0
0382d                 | LR__0241
0382d     20 20 4D 6F 
03831     75 73 65 20 
03835     6B 65 79 20 
03839     70 72 65 73 
0383d     73 65 64 3A 
03841     20          | 	byte	"  Mouse key pressed: "
03842     00          | 	byte	0
03843                 | LR__0242
03843     20 20 4D 6F 
03847     75 73 65 20 
0384b     63 6C 69 63 
0384f     6B 65 64    | 	byte	"  Mouse clicked"
03852     00          | 	byte	0
03853                 | LR__0243
03853     20 20 4D 6F 
03857     75 73 65 20 
0385b     64 6F 75 62 
0385f     6C 65 20 63 
03863     6C 69 63 6B 
03867     65 64       | 	byte	"  Mouse double clicked"
03869     00          | 	byte	0
0386a                 | LR__0244
0386a     20 20 4B 65 
0386e     79 20 73 63 
03872     61 6E 63 6F 
03876     64 65 20    | 	byte	"  Key scancode "
03879     00          | 	byte	0
0387a                 | LR__0245
0387a     20 72 65 6C 
0387e     65 61 73 65 
03882     64          | 	byte	" released"
03883     00          | 	byte	0
03884                 | LR__0246
03884     20 20 4B 65 
03888     79 20 73 63 
0388c     61 6E 63 6F 
03890     64 65 20    | 	byte	"  Key scancode "
03893     00          | 	byte	0
03894                 | LR__0247
03894     2C 20 63 68 
03898     61 72 63 6F 
0389c     64 65 20    | 	byte	", charcode "
0389f     00          | 	byte	0
038a0                 | LR__0248
038a0     20 70 72 65 
038a4     73 73 65 64 | 	byte	" pressed"
038a8     00          | 	byte	0
038a9                 | LR__0249
038a9     20 20 4B 65 
038ad     79 20 6D 6F 
038b1     64 69 66 69 
038b5     65 72 20    | 	byte	"  Key modifier "
038b8     00          | 	byte	0
038b9                 | LR__0250
038b9     20 70 72 65 
038bd     73 73 65 64 | 	byte	" pressed"
038c1     00          | 	byte	0
038c2                 | LR__0251
038c2     20 20 4D 6F 
038c6     64 69 66 69 
038ca     65 72 73 20 
038ce     72 65 6C 65 
038d2     61 73 65 64 | 	byte	"  Modifiers released"
038d6     00          | 	byte	0
038d7     00          | 	alignl
038d8                 | _hng030rm_dat_
038d8     00 00 00 00 
038dc     00 00 00 00 
038e0     00 00 00 00 
038e4     00 00 00 00 
038e8     00 00 00    | vga_font       file "vgafont.def"
038eb     7E 81 A5 81 
038ef     81 BD 99 81 
038f3     81 7E 00 00 
038f7     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
038fb     7E FF DB FF 
038ff     FF C3 E7 FF 
03903     FF 7E 00 00 
03907     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0390b     00 36 7F 7F 
0390f     7F 7F 3E 1C 
03913     08 00 00 00 
03917     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0391b     00 08 1C 3E 
0391f     7F 3E 1C 08 
03923     00 00 00 00 
03927     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0392b     18 3C 3C E7 
0392f     E7 E7 18 18 
03933     3C 00 00 00 
03937     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0393b     18 3C 7E FF 
0393f     FF 7E 18 18 
03943     3C 00 00 00 
03947     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0394b     00 00 00 18 
0394f     3C 3C 18 00 
03953     00 00 00 00 
03957     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
0395b     FF FF FF E7 
0395f     C3 C3 E7 FF 
03963     FF FF FF FF 
03967     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0396b     00 00 3C 66 
0396f     42 42 66 3C 
03973     00 00 00 00 
03977     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
0397b     FF FF C3 99 
0397f     BD BD 99 C3 
03983     FF FF FF FF 
03987     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0398b     78 70 58 4C 
0398f     1E 33 33 33 
03993     33 1E 00 00 
03997     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
0399b     3C 66 66 66 
0399f     66 3C 18 7E 
039a3     18 18 00 00 
039a7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
039ab     FC CC FC 0C 
039af     0C 0C 0C 0E 
039b3     0F 07 00 00 
039b7     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
039bb     FE C6 FE C6 
039bf     C6 C6 C6 E6 
039c3     E7 67 03 00 
039c7     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
039cb     18 18 DB 3C 
039cf     E7 3C DB 18 
039d3     18 00 00 00 
039d7     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
039db     03 07 0F 1F 
039df     7F 1F 0F 07 
039e3     03 01 00 00 
039e7     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
039eb     60 70 78 7C 
039ef     7F 7C 78 70 
039f3     60 40 00 00 
039f7     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
039fb     18 3C 7E 18 
039ff     18 18 7E 3C 
03a03     18 00 00 00 
03a07     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03a0b     66 66 66 66 
03a0f     66 66 66    | 	byte	$66[7]
03a12     00 66 66 00 
03a16     00 00 00 00 
03a1a     00 FE DB DB 
03a1e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03a22     D8 D8 D8 00 
03a26     00 00 00 3E 
03a2a     63 06 1C 36 
03a2e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03a32     30 63 3E 00 
03a36     00 00 00 00 
03a3a     00 00 00 00 
03a3e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03a42     7F 7F 7F 00 
03a46     00 00 00 00 
03a4a     00 18 3C 7E 
03a4e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03a52     3C 18 7E 00 
03a56     00 00 00 00 
03a5a     00 18 3C 7E 
03a5e     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03a62     18 18 18 00 
03a66     00 00 00 00 
03a6a     00 18 18 18 
03a6e     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03a72     7E 3C 18 00 
03a76     00 00 00 00 
03a7a     00 00 00 18 
03a7e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03a82     00 00 00 00 
03a86     00 00 00 00 
03a8a     00 00 00    | 	byte	$00[11]
03a8d     0C 06 7F 06 
03a91     0C 00 00 00 
03a95     00 00 00 00 
03a99     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03a9d     00 03 03 03 
03aa1     7F 00 00 00 
03aa5     00 00 00 00 
03aa9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03aad     14 36 7F 36 
03ab1     14 00 00 00 
03ab5     00 00 00 00 
03ab9     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03abd     1C 1C 3E 3E 
03ac1     7F 7F 00 00 
03ac5     00 00 00 00 
03ac9     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03acd     7F 3E 3E 1C 
03ad1     1C 08 00 00 
03ad5     00 00 00 00 
03ad9     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03add     00 00 00 00 
03ae1     00 00 00 00 
03ae5     00 00 00 00 
03ae9     00 00       | 	byte	$00[14]
03aeb     18 3C 3C 3C 
03aef     18 18 18 00 
03af3     18 18 00 00 
03af7     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03afb     66 24 00 00 
03aff     00 00 00 00 
03b03     00 00 00 00 
03b07     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b0b     00 36 36 7F 
03b0f     36 36 36 7F 
03b13     36 36 00 00 
03b17     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03b1b     3E 63 43 03 
03b1f     3E 60 60 61 
03b23     63 3E 18 18 
03b27     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03b2b     00 00 43 63 
03b2f     30 18 0C 06 
03b33     63 61 00 00 
03b37     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
03b3b     1C 36 36 1C 
03b3f     6E 3B 33 33 
03b43     33 6E 00 00 
03b47     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
03b4b     0C 0C 0C 06 
03b4f     00 00 00 00 
03b53     00 00 00 00 
03b57     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b5b     30 18 0C 0C 
03b5f     0C 0C 0C 0C 
03b63     18 30 00 00 
03b67     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
03b6b     0C 18 30 30 
03b6f     30 30 30 30 
03b73     18 0C 00 00 
03b77     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
03b7b     00 00 00 66 
03b7f     3C FF 3C 66 
03b83     00 00 00 00 
03b87     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
03b8b     00 00 00 18 
03b8f     18 7E 18 18 
03b93     00 00 00 00 
03b97     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
03b9b     00 00 00 00 
03b9f     00 00 00 00 | 	byte	$00[8]
03ba3     18 18 18 0C 
03ba7     00 00 00 00 
03bab     00 00 00 00 
03baf     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03bb3     00 00 00 00 
03bb7     00 00 00 00 
03bbb     00 00 00 00 
03bbf     00 00 00 00 | 	byte	$00[16]
03bc3     18 18 00 00 
03bc7     00 00 00 00 
03bcb     00 00 40 60 
03bcf     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03bd3     03 01 00 00 
03bd7     00 00 00 00 
03bdb     1C 36 63 63 
03bdf     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03be3     36 1C 00 00 
03be7     00 00 00 00 
03beb     18 1C 1E 18 
03bef     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03bf3     18 7E 00 00 
03bf7     00 00 00 00 
03bfb     3E 63 60 30 
03bff     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03c03     63 7F 00 00 
03c07     00 00 00 00 
03c0b     3E 63 60 60 
03c0f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03c13     63 3E 00 00 
03c17     00 00 00 00 
03c1b     30 38 3C 36 
03c1f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03c23     30 78 00 00 
03c27     00 00 00 00 
03c2b     7F 03 03 03 
03c2f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03c33     63 3E 00 00 
03c37     00 00 00 00 
03c3b     1C 06 03 03 
03c3f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03c43     63 3E 00 00 
03c47     00 00 00 00 
03c4b     7F 63 60 60 
03c4f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03c53     0C 0C 00 00 
03c57     00 00 00 00 
03c5b     3E 63 63 63 
03c5f     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03c63     63 3E 00 00 
03c67     00 00 00 00 
03c6b     3E 63 63 63 
03c6f     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03c73     30 1E 00 00 
03c77     00 00 00 00 
03c7b     00 00 00 18 
03c7f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03c83     18 18 00 00 
03c87     00 00 00 00 
03c8b     00 00 00 18 
03c8f     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03c93     18 18 0C 00 
03c97     00 00 00 00 
03c9b     00 60 30 18 
03c9f     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03ca3     30 60 00 00 
03ca7     00 00 00 00 
03cab     00 00 00 7E 
03caf     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03cb3     00 00 00 00 
03cb7     00 00 00 00 
03cbb     00          | 	byte	$00[9]
03cbc     06 0C 18 30 
03cc0     60 30 18 0C 
03cc4     06 00 00 00 
03cc8     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03ccc     63 63 30 18 
03cd0     18 18 00 18 
03cd4     18 00 00 00 
03cd8     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03cdc     3E 63 63 7B 
03ce0     7B 7B 3B 03 
03ce4     3E 00 00 00 
03ce8     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03cec     1C 36 63 63 
03cf0     7F 63 63 63 
03cf4     63 00 00 00 
03cf8     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03cfc     66 66 66 3E 
03d00     66 66 66 66 
03d04     3F 00 00 00 
03d08     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03d0c     66 43 03 03 
03d10     03 03 43 66 
03d14     3C 00 00 00 
03d18     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03d1c     36 66 66 66 
03d20     66 66 66 36 
03d24     1F 00 00 00 
03d28     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03d2c     66 46 16 1E 
03d30     16 06 46 66 
03d34     7F 00 00 00 
03d38     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03d3c     66 46 16 1E 
03d40     16 06 06 06 
03d44     0F 00 00 00 
03d48     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03d4c     66 43 03 03 
03d50     7B 63 63 66 
03d54     5C 00 00 00 
03d58     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03d5c     63 63 63 7F 
03d60     63 63 63 63 
03d64     63 00 00 00 
03d68     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03d6c     18 18 18 18 
03d70     18 18 18 18 | 	byte	$18[8]
03d74     3C 00 00 00 
03d78     00 00 00 78 
03d7c     30 30 30 30 
03d80     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03d84     1E 00 00 00 
03d88     00 00 00 67 
03d8c     66 66 36 1E 
03d90     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03d94     67 00 00 00 
03d98     00 00 00 0F 
03d9c     06 06 06 06 
03da0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03da4     7F 00 00 00 
03da8     00 00 00 63 
03dac     77 7F 7F 6B 
03db0     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
03db4     63 00 00 00 
03db8     00 00 00 63 
03dbc     67 6F 7F 7B 
03dc0     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
03dc4     63 00 00 00 
03dc8     00 00 00 3E 
03dcc     63 63 63 63 
03dd0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03dd4     3E 00 00 00 
03dd8     00 00 00 3F 
03ddc     66 66 66 3E 
03de0     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
03de4     0F 00 00 00 
03de8     00 00 00 3E 
03dec     63 63 63 63 
03df0     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
03df4     3E 30 70 00 
03df8     00 00 00 3F 
03dfc     66 66 66 3E 
03e00     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
03e04     67 00 00 00 
03e08     00 00 00 3E 
03e0c     63 63 06 1C 
03e10     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03e14     3E 00 00 00 
03e18     00 00 00 7E 
03e1c     7E 5A 18 18 
03e20     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03e24     3C 00 00 00 
03e28     00 00 00 63 
03e2c     63 63 63 63 
03e30     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03e34     3E 00 00 00 
03e38     00 00 00 63 
03e3c     63 63 63 63 
03e40     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
03e44     08 00 00 00 
03e48     00 00 00 63 
03e4c     63 63 63 6B 
03e50     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
03e54     36 00 00 00 
03e58     00 00 00 63 
03e5c     63 36 3E 1C 
03e60     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
03e64     63 00 00 00 
03e68     00 00 00 66 
03e6c     66 66 66 3C 
03e70     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
03e74     3C 00 00 00 
03e78     00 00 00 7F 
03e7c     63 61 30 18 
03e80     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03e84     7F 00 00 00 
03e88     00 00 00 3C 
03e8c     0C 0C 0C 0C 
03e90     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
03e94     3C 00 00 00 
03e98     00 00 00 00 
03e9c     01 03 07 0E 
03ea0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
03ea4     40 00 00 00 
03ea8     00 00 00 3C 
03eac     30 30 30 30 
03eb0     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
03eb4     3C 00 00 00 
03eb8     1C 36 00 00 
03ebc     00 00 00 00 
03ec0     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03ec4     00 00 00 00 
03ec8     00 00 00 00 
03ecc     00 00 00 00 
03ed0     00 00 00 00 
03ed4     00          | 	byte	$00[17]
03ed5     FF 00 00 0C 
03ed9     18 00 00 00 
03edd     00 00 00 00 
03ee1     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03ee5     00 00 00 00 
03ee9     00 00 00 00 
03eed     00          | 	byte	$00[9]
03eee     1E 30 3E 33 
03ef2     33 33 6E 00 
03ef6     00 00 00 00 
03efa     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03efe     1E 36 66 66 
03f02     66 66 3E 00 
03f06     00 00 00 00 
03f0a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f0e     3E 63 03 03 
03f12     03 63 3E 00 
03f16     00 00 00 00 
03f1a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03f1e     3C 36 33 33 
03f22     33 33 6E 00 
03f26     00 00 00 00 
03f2a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f2e     3E 63 7F 03 
03f32     03 63 3E 00 
03f36     00 00 00 00 
03f3a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
03f3e     0C 1E 0C 0C 
03f42     0C 0C 1E 00 
03f46     00 00 00 00 
03f4a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f4e     6E 33 33 33 
03f52     33 33 3E 30 
03f56     33 1E 00 00 
03f5a     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
03f5e     36 6E 66 66 
03f62     66 66 67 00 
03f66     00 00 00 00 
03f6a     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
03f6e     1C 18 18 18 
03f72     18 18 3C 00 
03f76     00 00 00 00 
03f7a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
03f7e     70 60 60 60 
03f82     60 60 60 66 
03f86     66 3C 00 00 
03f8a     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
03f8e     66 36 1E 1E 
03f92     36 66 67 00 
03f96     00 00 00 00 
03f9a     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
03f9e     18 18 18 18 
03fa2     18 18       | 	byte	$18[6]
03fa4     3C 00 00 00 
03fa8     00 00 00 00 
03fac     00 00 37 7F 
03fb0     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
03fb4     63 00 00 00 
03fb8     00 00 00 00 
03fbc     00 00 3B 66 
03fc0     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03fc4     66 00 00 00 
03fc8     00 00 00 00 
03fcc     00 00 3E 63 
03fd0     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
03fd4     3E 00 00 00 
03fd8     00 00 00 00 
03fdc     00 00 3B 66 
03fe0     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03fe4     3E 06 06 0F 
03fe8     00 00 00 00 
03fec     00 00 6E 33 
03ff0     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
03ff4     3E 30 30 78 
03ff8     00 00 00 00 
03ffc     00 00 3B 6E 
04000     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
04004     0F 00 00 00 
04008     00 00 00 00 
0400c     00 00 3E 63 
04010     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
04014     3E 00 00 00 
04018     00 00 00 08 
0401c     0C 0C 3F 0C 
04020     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04024     38 00 00 00 
04028     00 00 00 00 
0402c     00 00 33 33 
04030     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
04034     6E 00 00 00 
04038     00 00 00 00 
0403c     00 00 63 63 
04040     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
04044     1C 00 00 00 
04048     00 00 00 00 
0404c     00 00 63 63 
04050     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
04054     36 00 00 00 
04058     00 00 00 00 
0405c     00 00 63 36 
04060     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
04064     63 00 00 00 
04068     00 00 00 00 
0406c     00 00 63 63 
04070     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
04074     7E 60 30 1F 
04078     00 00 00 00 
0407c     00 00 7F 33 
04080     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
04084     7F 00 00 00 
04088     00 00 00 70 
0408c     18 18 18 0E 
04090     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
04094     70 00 00 00 
04098     00 00 00 18 
0409c     18 18 18 18 
040a0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
040a4     18 00 00 00 
040a8     00 00 00 0E 
040ac     18 18 18 70 
040b0     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
040b4     0E 00 00 00 
040b8     6E 3B 00 00 
040bc     00 00 00 00 
040c0     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
040c4     00 00 00 00 
040c8     00 00 00 00 
040cc     00 00       | 	byte	$00[10]
040ce     08 1C 36 63 
040d2     63 63 7F 00 
040d6     00 00 00 00 
040da     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
040de     03 03 03 03 
040e2     43 66 3C 18 
040e6     30 1E 00 00 
040ea     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
040ee     33 33 33 33 
040f2     33 33       | 	byte	$33[6]
040f4     6E 00 00 00 
040f8     00 00 60 30 
040fc     18 00 3E 63 
04100     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
04104     3E 00 00 00 
04108     00 00 08 1C 
0410c     36 00 1E 30 
04110     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
04114     6E 00 00 00 
04118     00 00 00 00 
0411c     33 00 1E 30 
04120     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
04124     6E 00 00 00 
04128     00 00 1C 36 
0412c     1C 00 33 33 
04130     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
04134     6E 00 00 00 
04138     00 00 60 30 
0413c     18 00 3E 63 
04140     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
04144     3E 00 00 00 
04148     00 00 00 00 
0414c     00 00 3E 63 
04150     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
04154     3E 18 30 1E 
04158     00 00 00 1C 
0415c     58 78 38 18 
04160     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
04164     3C 00 00 00 
04168     00 00 00 00 
0416c     63 00 3E 63 
04170     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
04174     3E 00 00 00 
04178     66 33 00 3E 
0417c     63 63 63 63 
04180     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04184     3E 00 00 00 
04188     00 00 CC 66 
0418c     33 00 3E 63 
04190     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
04194     3E 00 00 00 
04198     00 00 18 3C 
0419c     66 00 1C 18 
041a0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
041a4     3C 00 00 00 
041a8     30 18 00 7F 
041ac     63 61 30 18 
041b0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
041b4     7F 00 00 00 
041b8     00 63 00 08 
041bc     1C 36 63 63 
041c0     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
041c4     63 00 00 00 
041c8     30 18 00 3C 
041cc     66 43 03 03 
041d0     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
041d4     3C 00 00 00 
041d8     30 18 00 7F 
041dc     66 46 16 1E 
041e0     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
041e4     7F 00 00 00 
041e8     0C 06 00 0F 
041ec     06 06 06 06 
041f0     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
041f4     7F 00 00 00 
041f8     30 18 00 1C 
041fc     18 18 18 18 
04200     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
04204     3C 00 00 00 
04208     00 00 08 1C 
0420c     36 00 3E 63 
04210     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
04214     3E 00 00 00 
04218     00 00 00 00 
0421c     63 00 3E 63 
04220     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
04224     3E 00 00 00 
04228     00 00 00 6F 
0422c     46 26 06 06 
04230     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
04234     7F 00 00 00 
04238     00 00 00 6E 
0423c     4C 2C 0C 0C 
04240     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04244     1E 00 00 00 
04248     30 18 00 3E 
0424c     63 63 06 1C 
04250     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04254     3E 00 00 00 
04258     00 00 60 30 
0425c     18 00 3E 63 
04260     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
04264     3E 00 00 00 
04268     00 63 00 3E 
0426c     63 63 63 63 
04270     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04274     3E 00 00 00 
04278     00 63 00 63 
0427c     63 63 63 63 
04280     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04284     3E 00 00 00 
04288     6C 38 00 7E 
0428c     7E 5A 18 18 
04290     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04294     3C 00 00 00 
04298     00 00 60 48 
0429c     2C 0C 3F 0C 
042a0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
042a4     38 00 00 00 
042a8     00 00 00 0F 
042ac     26 36 1E 0E 
042b0     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
042b4     7F 00 00 00 
042b8     00 00 00 00 
042bc     00 63 36 1C 
042c0     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
042c4     00 00 00 00 
042c8     00 00       | 	byte	$00[6]
042ca     36 1C 08 00 
042ce     3E 63 03 03 
042d2     03 63 3E 00 
042d6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
042da     30 18 0C 00 
042de     1E 30 3E 33 
042e2     33 33 6E 00 
042e6     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
042ea     60 30 18 00 
042ee     1C 18 18 18 
042f2     18 18 3C 00 
042f6     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
042fa     60 30 18 00 
042fe     3E 63 63 63 
04302     63 63 3E 00 
04306     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0430a     30 18 0C 00 
0430e     33 33 33 33 
04312     33 33 6E 00 
04316     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0431a     00 08 1C 36 
0431e     63 63 7F 63 
04322     63 63 63 18 
04326     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0432a     00 00 00 00 
0432e     1E 30 3E 33 
04332     33 33 6E 18 
04336     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0433a     00 7F 63 61 
0433e     30 18 0C 06 
04342     43 63 7F 00 
04346     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0434a     36 1C 08 00 
0434e     7F 33 18 0C 
04352     06 63 7F 00 
04356     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
0435a     00 7F 66 46 
0435e     16 1E 16 06 
04362     46 66 7F 18 
04366     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0436a     00 00 00 00 
0436e     3E 63 7F 03 
04372     03 63 3E 18 
04376     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0437a     00 3C 66 03 
0437e     1F 03 0F 03 
04382     03 66 3C 00 
04386     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0438a     60 30 18 00 
0438e     7F 33 18 0C 
04392     06 63 7F 00 
04396     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0439a     00 3C 66 43 
0439e     03 03 03 03 
043a2     43 66 3C 00 
043a6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
043aa     00 00 00 00 
043ae     3E 63 06 1C 
043b2     30 63 3E 18 
043b6     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
043ba     00 00 00 00 
043be     00 00       | 	byte	$00[6]
043c0     6C 36 1B 36 
043c4     6C 00 00 00 
043c8     00 00 00 00 
043cc     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043d0     1B 36 6C 36 
043d4     1B 00 00 00 
043d8     88 22 88 22 
043dc     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
043e0     88 22 88 22 
043e4     88 22 88 22 
043e8     AA 55 AA 55 
043ec     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
043f0     AA 55 AA 55 
043f4     AA 55 AA 55 
043f8     BB EE BB EE 
043fc     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
04400     BB EE BB EE 
04404     BB EE BB EE 
04408     18 18 18 18 
0440c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
04410     18 18 18 18 
04414     18 18 18 18 
04418     18 18 18 18 
0441c     18 18 18    | 	byte	$18[15]
0441f     1F 18 18 18 
04423     18 18 18 18 
04427     18 30 18 00 
0442b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0442f     63 7F 63 63 
04433     63 63 00 00 
04437     00 1C 36 00 
0443b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
0443f     63 7F 63 63 
04443     63 63 00 00 
04447     00 36 1C 00 
0444b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0444f     1E 16 06 46 
04453     66 7F 00 00 
04457     00 00 00 00 
0445b     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
0445f     1C 30 60 63 
04463     63 3E 18 30 
04467     1E 6C 6C 6C 
0446b     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
0446f     6F 6C 6C 6C 
04473     6C 6C 6C 6C 
04477     6C 6C 6C 6C 
0447b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0447f     6C 6C 6C 6C 
04483     6C 6C 6C 6C 
04487     6C          | 	byte	$6c[9]
04488     00 00 00 00 
0448c     00          | 	byte	$00[5]
0448d     7F 60 6F 6C 
04491     6C 6C 6C 6C 
04495     6C 6C 6C 6C 
04499     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0449d     6F 60 7F 00 
044a1     00 00 00 00 
044a5     00 00 00 18 
044a9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
044ad     61 30 18 0C 
044b1     06 43 63 7F 
044b5     00 00 00 00 
044b9     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
044bd     00 7F 33 18 
044c1     0C 06 63 7F 
044c5     00 00 00 00 
044c9     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
044cd     00 00 1F 18 
044d1     18 18 18 18 
044d5     18 18 18 18 
044d9     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
044dd     18 18 F8 00 
044e1     00 00 00 00 
044e5     00 00 00 18 
044e9     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
044ed     18 18 FF 00 
044f1     00 00 00 00 
044f5     00 00 00 00 
044f9     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
044fd     00 00 FF 18 
04501     18 18 18 18 
04505     18 18 18 18 
04509     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0450d     18 18 F8 18 
04511     18 18 18 18 
04515     18 18 18 00 
04519     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0451d     00 00 FF 00 
04521     00 00 00 00 
04525     00 00 00 18 
04529     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0452d     18 18 FF 18 
04531     18 18 18 18 
04535     18 18 18 63 
04539     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
0453d     36 63 63 7F 
04541     63 63 63 63 
04545     00 00 00 00 
04549     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0454d     00 1E 30 3E 
04551     33 33 33 6E 
04555     00 00 00 6C 
04559     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0455d     EC 0C FC 00 
04561     00 00 00 00 
04565     00 00 00 00 
04569     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0456d     FC 0C EC 6C 
04571     6C 6C 6C 6C 
04575     6C 6C 6C 6C 
04579     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0457d     EF 00 FF 00 
04581     00 00 00 00 
04585     00 00 00 00 
04589     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0458d     FF 00 EF 6C 
04591     6C 6C 6C 6C 
04595     6C 6C 6C 6C 
04599     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0459d     EC 0C EC 6C 
045a1     6C 6C 6C 6C 
045a5     6C 6C 6C 00 
045a9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
045ad     FF 00 FF 00 
045b1     00 00 00 00 
045b5     00 00 00 6C 
045b9     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
045bd     EF 00 EF 6C 
045c1     6C 6C 6C 6C 
045c5     6C 6C 6C 00 
045c9     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
045cd     63 3E 63 63 
045d1     63 63 3E 63 
045d5     00 00 00 00 
045d9     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
045dd     30 3C 36 33 
045e1     33 33 33 6E 
045e5     00 00 00 00 
045e9     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
045ed     66 66 6F 66 
045f1     66 66 36 1F 
045f5     00 00 00 36 
045f9     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
045fd     66 66 66 66 
04601     66 66       | 	byte	$66[6]
04603     36 1F 00 00 
04607     00 00 63 00 
0460b     7F 66 46 16 
0460f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
04613     66 7F 00 00 
04617     00 6C 38 00 
0461b     38 30 30 3C 
0461f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
04623     33 6E 00 00 
04627     00 36 1C 00 
0462b     63 67 6F 7F 
0462f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
04633     63 63 00 00 
04637     00 30 18 00 
0463b     3C 18 18 18 
0463f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04643     18 3C 00 00 
04647     00 3C 66 00 
0464b     3C 18 18 18 
0464f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04653     18 3C 00 00 
04657     00 00 00 36 
0465b     1C 08 00 3E 
0465f     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
04663     63 3E 00 00 
04667     00 18 18 18 
0466b     18 18 18 18 
0466f     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
04673     00 00 00 00 
04677     00 00 00 00 
0467b     00 00 00 00 | 	byte	$00[12]
0467f     F8 18 18 18 
04683     18 18 18 18 
04687     18 FF FF FF 
0468b     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0468f     FF FF FF FF 
04693     FF FF FF FF 
04697     FF          | 	byte	$ff[9]
04698     00 00 00 00 
0469c     00 00 00    | 	byte	$00[7]
0469f     FF FF FF FF 
046a3     FF FF FF FF 
046a7     FF          | 	byte	$ff[9]
046a8     00 00 00 7E 
046ac     7E 5A 18 18 
046b0     18 18 18 18 
046b4     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
046b8     1C 36 1C 63 
046bc     63 63 63 63 
046c0     63 63 63 63 
046c4     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
046c8     FF FF FF FF 
046cc     FF FF FF    | 	byte	$ff[7]
046cf     00 00 00 00 
046d3     00 00 00 00 
046d7     00          | 	byte	$00[9]
046d8     30 18 00 3E 
046dc     63 63 63 63 
046e0     63 63 63 63 
046e4     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
046e8     00 00 00 1E 
046ec     33 33 33 1B 
046f0     33 63 63 63 
046f4     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
046f8     1C 36 00 3E 
046fc     63 63 63 63 
04700     63 63 63 63 
04704     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04708     30 18 00 63 
0470c     67 6F 7F 7B 
04710     73 63 63 63 
04714     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
04718     00 00 60 30 
0471c     18 00 3B 66 
04720     66 66 66 66 
04724     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04728     00 00 36 1C 
0472c     08 00 3B 66 
04730     66 66 66 66 
04734     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04738     36 1C 00 3E 
0473c     63 63 06 1C 
04740     30 60 63 63 
04744     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
04748     00 00 36 1C 
0474c     08 00 3E 63 
04750     06 1C 30 63 
04754     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
04758     30 18 00 3F 
0475c     66 66 66 3E 
04760     36 66 66 66 
04764     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
04768     30 18 00 63 
0476c     63 63 63 63 
04770     63 63 63 63 
04774     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04778     00 00 60 30 
0477c     18 00 3B 6E 
04780     66 06 06 06 
04784     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
04788     66 33 00 63 
0478c     63 63 63 63 
04790     63 63 63 63 
04794     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04798     00 00 60 30 
0479c     18 00 63 63 
047a0     63 63 63 63 
047a4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
047a8     30 18 00 66 
047ac     66 66 66 3C 
047b0     18 18 18 18 
047b4     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
047b8     00 00 00 08 
047bc     0C 0C 3F 0C 
047c0     0C 0C 0C 6C 
047c4     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
047c8     30 18 00 00 
047cc     00 00 00 00 
047d0     00 00 00 00 
047d4     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047d8     00 00 00 00 
047dc     00 00 00 00 | 	byte	$00[8]
047e0     7F 00 00 00 
047e4     00 00 00 00 
047e8     66 33 00 00 
047ec     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
047f0     00 00 00 00 
047f4     00 00 00 00 
047f8     00 00 00 00 
047fc     00 00 00 00 
04800     00 00 00 00 
04804     00          | 	byte	$00[21]
04805     0C 06 3C 36 
04809     1C 00 00 00 
0480d     00 00 00 00 
04811     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04815     00 00 00 63 
04819     3E 00 00 00 
0481d     00 00 00 00 
04821     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04825     00 00 00 00 
04829     3E 63 06 1C 
0482d     36 63 63 36 
04831     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04835     00 00 00 00 
04839     00 00 00 00 | 	byte	$00[8]
0483d     18 00 7E 00 
04841     18 00 00 00 
04845     00 00 00 00 
04849     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0484d     00 00 00 00 
04851     00 00 00 00 | 	byte	$00[8]
04855     18 30 1E 00 
04859     00 00 1C 36 
0485d     36 1C 00 00 
04861     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04865     00 00 00 00 
04869     63 00 00 00 
0486d     00 00 00 00 
04871     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04875     00 00 00 18 
04879     18 00 00 00 
0487d     00 00 00 00 
04881     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04885     00 00 00 00 
04889     00          | 	byte	$00[5]
0488a     CC 66 33 00 
0488e     33 33 33 33 
04892     33 33 6E 00 
04896     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
0489a     00 3F 66 66 
0489e     66 3E 36 66 
048a2     66 66 6F 00 
048a6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
048aa     36 1C 08 00 
048ae     3B 6E 66 06 
048b2     06 06 0F 00 
048b6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
048ba     00 00 00 7E 
048be     7E 7E 7E 7E 
048c2     7E 7E 00 00 
048c6     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
048ca     00 00 00 00 
048ce     00 00 00 00 
048d2     00 00 00 00 
048d6     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
048d8     00 00 00 00 
      ...             
04908     00 00 00 00 
0490c     00 00 00    | st_font        file "st4font.def"
0490f     FF FF 00 00 
04913     00 00 00 00 
04917     00 18 18 18 
0491b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0491f     18 18 18 18 
04923     18 18 18 18 
04927     18          | 	byte	$18[9]
04928     00 00 00 00 
0492c     00 00 00    | 	byte	$00[7]
0492f     FF FF 18 18 
04933     18 18 18 18 
04937     18 18 18 18 
0493b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0493f     FF FF 00 00 
04943     00 00 00 00 
04947     00 18 18 18 
0494b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0494f     1F 1F 18 18 
04953     18 18 18 18 
04957     18 18 18 18 
0495b     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0495f     F8 F8 18 18 
04963     18 18 18 18 
04967     18 00 00 00 
0496b     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0496f     1F 1F 18 18 
04973     18 18 18 18 
04977     18 00 00 00 
0497b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0497f     F8 F8 18 18 
04983     18 18 18 18 
04987     18 18 18 18 
0498b     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0498f     1F 1F 00 00 
04993     00 00 00 00 
04997     00 18 18 18 
0499b     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0499f     F8 F8 00 00 
049a3     00 00 00 00 
049a7     00 18 18 18 
049ab     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
049af     FF FF 18 18 
049b3     18 18 18 18 
049b7     18 00 00 18 
049bb     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
049bf     66 7E 7E 66 
049c3     66 66 66 30 
049c7     18 00 00 7E 
049cb     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
049cf     3E 06 06 06 
049d3     06 7E 7E 18 
049d7     0C 30 18 3C 
049db     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
049df     06 06 06 66 
049e3     66 7E 3C 00 
049e7     00 30 18 66 
049eb     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
049ef     7E 7E 76 76 
049f3     66 66 66 00 
049f7     00 30 18 7C 
049fb     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
049ff     1C 38 70 60 
04a03     60 7E 3E 00 
04a07     00 30 18 7E 
04a0b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
04a0f     18 0C 0C 06 
04a13     06 7E 7E 00 
04a17     00 18 18 00 
04a1b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
04a1f     18 18 0C 0C 
04a23     06 7E 7E 00 
04a27     00 30 18 3C 
04a2b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
04a2f     66 66 66 66 
04a33     66          | 	byte	$66[5]
04a34     7E 3C 00 00 
04a38     00 00 06 06 
04a3c     06 06 16 1E 
04a40     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04a44     7E 7E 00 00 
04a48     00 00 00 00 
04a4c     00 3C 7C 60 
04a50     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
04a54     7E 7C 30 18 
04a58     00 00 00 00 
04a5c     00 3C 7E 66 
04a60     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
04a64     7E 7C 18 0C 
04a68     00 00 30 18 
04a6c     00 3C 3E 06 
04a70     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
04a74     7E 7C 00 00 
04a78     00 00 30 18 
04a7c     00 3E 7E 66 
04a80     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
04a84     66 66 00 00 
04a88     00 00 30 18 
04a8c     00 7C 7E 06 
04a90     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04a94     7E 3E 00 00 
04a98     00 00 30 18 
04a9c     00 7E 7E 30 
04aa0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04aa4     7E 7E 00 00 
04aa8     00 00 18 18 
04aac     00 7E 7E 30 
04ab0     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04ab4     7E 7E 00 00 
04ab8     00 00 30 18 
04abc     00 3C 7E 66 
04ac0     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04ac4     7E 3C 00 00 
04ac8     00 00 1C 1C 
04acc     18 18 38 3C 
04ad0     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04ad4     3C 3C 00 00 
04ad8     00 00 00 00 
04adc     00 00 00 00 
04ae0     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ae4     00 00 00 00 
04ae8     00 00       | 	byte	$00[6]
04aea     18 18 18 18 
04aee     18 18 18 18 | 	byte	$18[8]
04af2     00 00 18 18 
04af6     00 00 00 00 
04afa     66 66 66 66 
04afe     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04b02     00 00 00 00 
04b06     00 00 00 00 
04b0a     00          | 	byte	$00[9]
04b0b     66 66 FF FF 
04b0f     66 66 FF FF 
04b13     66 66 00 00 
04b17     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
04b1b     7C 7E 06 06 
04b1f     3E 7C 60 60 
04b23     7E 3E 18 18 
04b27     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
04b2b     66 30 30 18 
04b2f     18 0C 0C 66 
04b33     66 00 00 00 
04b37     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
04b3b     66 66 3C 1C 
04b3f     1C FC FE 66 
04b43     66 FE FC 00 
04b47     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
04b4b     18 18 18 18 
04b4f     00 00 00 00 
04b53     00 00 00 00 
04b57     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
04b5b     18 1C 0C 0C 
04b5f     0C 0C 0C 0C 
04b63     1C 18 30 00 
04b67     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
04b6b     18 38 30 30 
04b6f     30 30 30 30 
04b73     38 18 0C 00 
04b77     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
04b7b     66 66 3C 3C 
04b7f     FF FF 3C 3C 
04b83     66 66 00 00 
04b87     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
04b8b     00 18 18 18 
04b8f     7E 7E 18 18 
04b93     18 00 00 00 
04b97     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04b9b     00 00 00 00 
04b9f     00 00       | 	byte	$00[6]
04ba1     18 18 18 18 
04ba5     18          | 	byte	$18[5]
04ba6     0C 04 00 00 
04baa     00 00 00 00 
04bae     7E 7E 00 00 
04bb2     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04bb6     00 00 00 00 
04bba     00 00 00 00 
04bbe     00 00 00 00 
04bc2     00          | 	byte	$00[13]
04bc3     18 18 18 00 
04bc7     00 00 00 60 
04bcb     60 60 30 30 
04bcf     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04bd3     06 06 06 00 
04bd7     00 00 00 3C 
04bdb     7E 66 66 66 
04bdf     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04be3     66 7E 3C 00 
04be7     00 00 00 18 
04beb     18 1C 1C 18 
04bef     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04bf3     18 7E 7E 00 
04bf7     00 00 00 3C 
04bfb     7E 66 66 30 
04bff     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04c03     0C 7E 7E 00 
04c07     00 00 00 7E 
04c0b     7E 30 30 18 
04c0f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04c13     66 7E 3C 00 
04c17     00 00 00 30 
04c1b     30 38 38 3C 
04c1f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04c23     7E 30 30 00 
04c27     00 00 00 7E 
04c2b     7E 06 06 3E 
04c2f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04c33     66 7E 3C 00 
04c37     00 00 00 38 
04c3b     3C 0E 06 06 
04c3f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04c43     66 7E 3C 00 
04c47     00 00 00 7E 
04c4b     7E 60 60 30 
04c4f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04c53     0C 0C 0C 00 
04c57     00 00 00 3C 
04c5b     7E 66 66 3C 
04c5f     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04c63     66 7E 3C 00 
04c67     00 00 00 3C 
04c6b     7E 66 66 7E 
04c6f     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04c73     70 3C 1C 00 
04c77     00 00 00 00 
04c7b     00 00 18 18 
04c7f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04c83     18 18 18 00 
04c87     00 00 00 00 
04c8b     00 00 18 18 
04c8f     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04c93     18 18 18 0C 
04c97     04 00 00 00 
04c9b     70 38 1C 0E 
04c9f     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04ca3     70 00 00 00 
04ca7     00 00 00 00 
04cab     00 00 7E 7E 
04caf     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04cb3     00 00 00 00 
04cb7     00 00 00 00 | 	byte	$00[8]
04cbb     0E 1C 38 70 
04cbf     E0 70 38 1C 
04cc3     0E 00 00 00 
04cc7     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04ccb     7E 66 66 30 
04ccf     30 18 18 18 
04cd3     00 18 18 00 
04cd7     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04cdb     7E 66 66 66 
04cdf     66 36 06 66 
04ce3     66 7E 3C 00 
04ce7     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04ceb     3C 7E 66 66 
04cef     66 7E 7E 66 
04cf3     66 66 66 00 
04cf7     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04cfb     7E 66 66 7E 
04cff     3E 66 66 66 
04d03     66 7E 3E 00 
04d07     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04d0b     7E 66 66 06 
04d0f     06 06 06 66 
04d13     66 7E 3C 00 
04d17     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04d1b     7E 66 66 66 
04d1f     66 66 66 66 
04d23     66 7E 3E 00 
04d27     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04d2b     7E 06 06 3E 
04d2f     3E 06 06 06 
04d33     06 7E 7E 00 
04d37     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04d3b     7E 06 06 3E 
04d3f     3E 06 06 06 
04d43     06 06 06 00 
04d47     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04d4b     7E 06 06 76 
04d4f     76 66 66 66 
04d53     66 7E 3C 00 
04d57     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04d5b     66 66 66 7E 
04d5f     7E 66 66 66 
04d63     66 66 66 00 
04d67     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04d6b     7E 18 18 18 
04d6f     18 18 18 18 
04d73     18 7E 7E 00 
04d77     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04d7b     60 60 60 60 
04d7f     60 60 60    | 	byte	$60[7]
04d82     66 66 7E 3C 
04d86     00 00 00 00 
04d8a     66 66 36 36 
04d8e     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04d92     66 66 C6 C6 
04d96     00 00 00 00 
04d9a     06 06 06 06 
04d9e     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
04da2     06 06 7E 7E 
04da6     00 00 00 00 
04daa     C6 C6 EE EE 
04dae     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
04db2     C6 C6 C6 C6 
04db6     00 00 00 00 
04dba     66 66 66 6E 
04dbe     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
04dc2     76 66 66 66 
04dc6     00 00 00 00 
04dca     3C 7E 66 66 
04dce     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04dd2     66 66 7E 3C 
04dd6     00 00 00 00 
04dda     3E 7E 66 66 
04dde     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
04de2     06 06 06 06 
04de6     00 00 00 00 
04dea     3C 7E 66 66 
04dee     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04df2     66 56 3E 6C 
04df6     00 00 00 00 
04dfa     3E 7E 66 66 
04dfe     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
04e02     66 66 C6 C6 
04e06     00 00 00 00 
04e0a     7C 7E 06 06 
04e0e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
04e12     60 60 7E 3E 
04e16     00 00 00 00 
04e1a     7E 7E 18 18 
04e1e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
04e22     18 18 18 18 
04e26     00 00 00 00 
04e2a     66 66 66 66 
04e2e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04e32     66 66 7E 3C 
04e36     00 00 00 00 
04e3a     66 66 66 66 
04e3e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04e42     3C 3C 18 18 
04e46     00 00 00 00 
04e4a     C6 C6 C6 C6 
04e4e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
04e52     FE EE C6 82 
04e56     00 00 00 00 
04e5a     66 66 66 3C 
04e5e     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
04e62     3C 66 66 66 
04e66     00 00 00 00 
04e6a     66 66 66 66 
04e6e     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
04e72     18 18 18 18 
04e76     00 00 00 00 
04e7a     7E 7E 30 30 
04e7e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
04e82     06 06 7E 7E 
04e86     00 00 00 00 
04e8a     3C 3C 0C 0C 
04e8e     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
04e92     0C 0C 3C 3C 
04e96     00 00 00 00 
04e9a     06 06 0C 0C 
04e9e     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
04ea2     60 60 C0 C0 
04ea6     00 00 00 00 
04eaa     3C 3C 30 30 
04eae     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
04eb2     30 30 3C 3C 
04eb6     00 00 00 00 
04eba     18 18 3C 3C 
04ebe     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
04ec2     00 00 00 00 
04ec6     00 00 00 00 
04eca     00 00 00 00 
04ece     00 00 00 00 
04ed2     00 00       | 	byte	$00[18]
04ed4     FE FE 00 00 
04ed8     00 00 0C 0C 
04edc     18 18 00 00 
04ee0     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
04ee4     00 00 00 00 
04ee8     00 00 00 00 
04eec     00          | 	byte	$00[9]
04eed     3C 7C 60 7C 
04ef1     7E 66 66 7E 
04ef5     7C 00 00 00 
04ef9     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
04efd     3E 7E 66 66 
04f01     66 66 66 7E 
04f05     3E 00 00 00 
04f09     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
04f0d     3C 3E 06 06 
04f11     06 06 06 7E 
04f15     7C 00 00 00 
04f19     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
04f1d     7C 7E 66 66 
04f21     66 66 66 7E 
04f25     7C 00 00 00 
04f29     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
04f2d     3C 7E 66 66 
04f31     7E 06 06 7E 
04f35     7C 00 00 00 
04f39     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
04f3d     18 7E 7E 18 
04f41     18 18 18 18 
04f45     18 00 00 00 
04f49     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04f4d     7C 7E 66 66 
04f51     66 66 7E 7C 
04f55     60 7E 3E 00 
04f59     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
04f5d     3E 7E 66 66 
04f61     66 66 66 66 
04f65     66 00 00 00 
04f69     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
04f6d     1C 1C 18 18 
04f71     18 18 18 3C 
04f75     3C 00 00 00 
04f79     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
04f7d     30 30 30 30 
04f81     30 30 30 30 
04f85     30          | 	byte	$30[9]
04f86     3E 1E 00 00 
04f8a     06 06 06 36 
04f8e     36 1E 1E 1E 
04f92     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
04f96     00 00 00 00 
04f9a     1C 1C 18 18 
04f9e     18 18 18 18 
04fa2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
04fa6     00 00 00 00 
04faa     00 00 00    | 	byte	$00[7]
04fad     6C FE FE D6 
04fb1     D6 C6 C6 C6 
04fb5     C6 00 00 00 
04fb9     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
04fbd     3E 7E 66 66 
04fc1     66 66 66 66 
04fc5     66 00 00 00 
04fc9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
04fcd     3C 7E 66 66 
04fd1     66 66 66 7E 
04fd5     3C 00 00 00 
04fd9     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
04fdd     3E 7E 66 66 
04fe1     66 66 66 7E 
04fe5     3E 06 06 00 
04fe9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
04fed     7C 7E 66 66 
04ff1     66 66 66 7E 
04ff5     7C 60 60 00 
04ff9     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
04ffd     3E 7E 66 06 
05001     06 06 06 06 
05005     06 00 00 00 
05009     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
0500d     7C 7E 06 0E 
05011     3C 70 60 7E 
05015     3E 00 00 00 
05019     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
0501d     7E 7E 18 18 
05021     18 18 18 78 
05025     70 00 00 00 
05029     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
0502d     66 66 66 66 
05031     66 66 66    | 	byte	$66[7]
05034     7E 7C 00 00 
05038     00 00 00 00 
0503c     00 66 66 66 
05040     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
05044     18 18 00 00 
05048     00 00 00 00 
0504c     00 C6 C6 D6 
05050     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
05054     C6 82 00 00 
05058     00 00 00 00 
0505c     00 66 66 3C 
05060     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
05064     66 66 00 00 
05068     00 00 00 00 
0506c     00 66 66 66 
05070     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
05074     7C 60 7E 3E 
05078     00 00 00 00 
0507c     00 7E 7E 30 
05080     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
05084     7E 7E 00 00 
05088     00 00 30 18 
0508c     18 18 18 0C 
05090     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
05094     18 30 00 00 
05098     00 00 18 18 
0509c     18 18 18 18 
050a0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
050a4     18 18 00 00 
050a8     00 00 0C 18 
050ac     18 18 18 30 
050b0     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
050b4     18 0C 00 00 
050b8     00 00 6C 7E 
050bc     36 00 00 00 
050c0     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
050c4     00 00 00 00 
050c8     00 00 00 00 
050cc     00          | 	byte	$00[9]
050cd     18 18 18 18 
050d1     18 18 00 00 
050d5     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
050d8     00 00 00 00 
050dc     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
050e0     00 00 00 00 
050e4     00 80 80 80 
050e8     00 00 00 FF 
050ec     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
050f0     00 00 00 00 
050f4     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
050f5     80 00 00 00 
050f9     00 80 00 00 
050fd     80 80 00 00 
05101     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
05105     80 00 80 00 
05109     00 40 80 00 
0510d     AA AA AA 00 
05111     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
05115     FF 00 00 00 
05119     00 FF 00 00 
0511d     FF FF 00 00 
05121     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
05125     FF 00 FF 00 
05129     00 FF FF 00 
0512d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
05130     00 00 00 00 
05134     00          | ataripalette   file "ataripalettep2.def"
05135     11 11 11 00 
05139     22 22 22 00 
0513d     33 33 33 00 
05141     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
05145     55 55 55 00 
05149     66 66 66 00 
0514d     77 77 77 00 
05151     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
05155     99 99 99 00 
05159     AA AA AA 00 
0515d     BB BB BB 00 
05161     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
05165     DD DD DD 00 
05169     EE EE EE 00 
0516d     FF FF FF 00 
05171     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
05175     00 14 40 00 
05179     00 1E 60 00 
0517d     00 28 80 00 
05181     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
05185     00 3C BF 00 
05189     00 46 DF 00 
0518d     00 50 FF 00 
05191     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
05195     39 77 FF 00 
05199     55 8A FF 00 
0519d     71 9E FF 00 
051a1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
051a5     AA C5 FF 00 
051a9     C6 D8 FF 00 
051ad     E3 EC FF 00 
051b1     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
051b5     00 00 40 00 
051b9     00 00 60 00 
051bd     00 00 80 00 
051c1     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
051c5     00 00 BF 00 
051c9     00 00 DF 00 
051cd     00 00 FF 00 
051d1     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
051d5     39 39 FF 00 
051d9     55 55 FF 00 
051dd     71 71 FF 00 
051e1     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
051e5     AA AA FF 00 
051e9     C6 C6 FF 00 
051ed     E3 E3 FF 00 
051f1     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
051f5     20 00 40 00 
051f9     30 00 60 00 
051fd     40 00 80 00 
05201     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
05205     60 00 BF 00 
05209     70 00 DF 00 
0520d     80 00 FF 00 
05211     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
05215     9C 39 FF 00 
05219     AA 55 FF 00 
0521d     B8 71 FF 00 
05221     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
05225     D5 AA FF 00 
05229     E3 C6 FF 00 
0522d     F1 E3 FF 00 
05231     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
05235     40 00 40 00 
05239     60 00 60 00 
0523d     80 00 80 00 
05241     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05245     BF 00 BF 00 
05249     DF 00 DF 00 
0524d     FF 00 FF 00 
05251     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
05255     FF 39 FF 00 
05259     FF 55 FF 00 
0525d     FF 71 FF 00 
05261     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
05265     FF AA FF 00 
05269     FF C6 FF 00 
0526d     FF E3 FF 00 
05271     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
05275     40 00 20 00 
05279     60 00 30 00 
0527d     80 00 40 00 
05281     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
05285     BF 00 60 00 
05289     DF 00 70 00 
0528d     FF 00 80 00 
05291     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05295     FF 39 9C 00 
05299     FF 55 AA 00 
0529d     FF 71 B8 00 
052a1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
052a5     FF AA D5 00 
052a9     FF C6 E3 00 
052ad     FF E3 F1 00 
052b1     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
052b5     40 00 00 00 
052b9     60 00 00 00 
052bd     80 00 00 00 
052c1     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
052c5     BF 00 00 00 
052c9     DF 00 00 00 
052cd     FF 00 00 00 
052d1     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
052d5     FF 39 39 00 
052d9     FF 55 55 00 
052dd     FF 71 71 00 
052e1     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
052e5     FF AA AA 00 
052e9     FF C6 C6 00 
052ed     FF E3 E3 00 
052f1     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
052f5     40 10 00 00 
052f9     60 18 00 00 
052fd     80 20 00 00 
05301     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
05305     BF 30 00 00 
05309     DF 38 00 00 
0530d     FF 40 00 00 
05311     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
05315     FF 6A 39 00 
05319     FF 80 55 00 
0531d     FF 95 71 00 
05321     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05325     FF BF AA 00 
05329     FF D5 C6 00 
0532d     FF EA E3 00 
05331     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
05335     40 20 00 00 
05339     60 30 00 00 
0533d     80 40 00 00 
05341     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05345     BF 60 00 00 
05349     DF 70 00 00 
0534d     FF 80 00 00 
05351     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
05355     FF 9C 39 00 
05359     FF AA 55 00 
0535d     FF B8 71 00 
05361     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
05365     FF D5 AA 00 
05369     FF E3 C6 00 
0536d     FF F1 E3 00 
05371     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
05375     40 30 00 00 
05379     60 48 00 00 
0537d     80 60 00 00 
05381     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
05385     BF 90 00 00 
05389     DF A8 00 00 
0538d     FF C0 00 00 
05391     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05395     FF CE 39 00 
05399     FF D5 55 00 
0539d     FF DC 71 00 
053a1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
053a5     FF EA AA 00 
053a9     FF F1 C6 00 
053ad     FF F8 E3 00 
053b1     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
053b5     30 40 00 00 
053b9     48 60 00 00 
053bd     60 80 00 00 
053c1     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
053c5     90 BF 00 00 
053c9     A8 DF 00 00 
053cd     C0 FF 00 00 
053d1     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
053d5     CE FF 39 00 
053d9     D5 FF 55 00 
053dd     DC FF 71 00 
053e1     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
053e5     EA FF AA 00 
053e9     F1 FF C6 00 
053ed     F8 FF E3 00 
053f1     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
053f5     00 40 00 00 
053f9     00 60 00 00 
053fd     00 80 00 00 
05401     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
05405     00 BF 00 00 
05409     00 DF 00 00 
0540d     00 FF 00 00 
05411     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
05415     39 FF 39 00 
05419     55 FF 55 00 
0541d     71 FF 71 00 
05421     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05425     AA FF AA 00 
05429     C6 FF C6 00 
0542d     E3 FF E3 00 
05431     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
05435     00 40 14 00 
05439     00 60 1E 00 
0543d     00 80 28 00 
05441     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
05445     00 BF 3C 00 
05449     00 DF 46 00 
0544d     00 FF 50 00 
05451     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
05455     39 FF 77 00 
05459     55 FF 8A 00 
0545d     71 FF 9E 00 
05461     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
05465     AA FF C5 00 
05469     C6 FF D8 00 
0546d     E3 FF EC 00 
05471     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
05475     00 40 28 00 
05479     00 60 3C 00 
0547d     00 80 50 00 
05481     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
05485     00 BF 78 00 
05489     00 DF 8C 00 
0548d     00 FF A0 00 
05491     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
05495     39 FF B5 00 
05499     55 FF C0 00 
0549d     71 FF CA 00 
054a1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
054a5     AA FF DF 00 
054a9     C6 FF EA 00 
054ad     E3 FF F4 00 
054b1     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
054b5     00 40 40 00 
054b9     00 60 60 00 
054bd     00 80 80 00 
054c1     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
054c5     00 BF BF 00 
054c9     00 DF DF 00 
054cd     00 FF FF 00 
054d1     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
054d5     39 FF FF 00 
054d9     55 FF FF 00 
054dd     71 FF FF 00 
054e1     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
054e5     AA FF FF 00 
054e9     C6 FF FF 00 
054ed     E3 FF FF 00 
054f1     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
054f5     00 28 40 00 
054f9     00 3C 60 00 
054fd     00 50 80 00 
05501     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
05505     00 78 BF 00 
05509     00 8C DF 00 
0550d     00 A0 FF 00 
05511     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
05515     39 B5 FF 00 
05519     55 C0 FF 00 
0551d     71 CA FF 00 
05521     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05525     AA DF FF 00 
05529     C6 EA FF 00 
0552d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
05530                 | '**********************************************************************************
05530                 | '
05530                 | '        Timings and colors definitions
05530                 | '
05530                 | '**********************************************************************************
05530                 | 
05530                 |    'streamer sets for text mode, to add to timings[0..5]
05530                 | 
05530                 | 
05530                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
05530     10 00 00 00 
05534     50 00 00 00 
05538     14 00 00 00 
0553c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05540     70 00 00 00 
05544     08 00 00 00 
05548     30 00 00 00 
0554c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
05550     10 00 00 00 
05554     10 00 00 00 
05558     00 00 00 00 
0555c     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
05560     E0 01 00 00 
05564     F6 32 24 15 
05568     FB 6C C3 01 
0556c     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05570                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
05570     12 00 00 00 
05574     30 00 00 00 
05578     10 00 00 00 
0557c     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
05580     18 00 00 00 
05584     08 00 00 00 
05588     18 00 00 00 
0558c     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
05590     20 00 00 00 
05594     18 00 00 00 
05598     40 00 00 00 
0559c     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
055a0     F0 01 00 00 
055a4     00 D0 12 13 
055a8     FB 0F 00 01 
055ac     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
055b0     10 00 00 00 
055b4     40 00 00 00 
055b8     10 00 00 00 
055bc     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
055c0     08 00 00 00 
055c4     08 00 00 00 
055c8     08 00 00 00 
055cc     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
055d0     40 00 00 00 
055d4     20 00 00 00 
055d8     80 00 00 00 
055dc     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
055e0     E0 01 00 00 
055e4     70 AE E9 10 
055e8     FB 8B FF 01 
055ec     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
055f0     10 00 00 00 
055f4     50 00 00 00 
055f8     14 00 00 00 
055fc     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05600     00 00 00 00 
05604     08 00 00 00 
05608     00 00 00 00 
0560c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
05610     10 00 00 00 
05614     10 00 00 00 
05618     C0 00 00 00 
0561c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
05620     40 02 00 00 
05624     F6 32 24 15 
05628     FB 6C C3 01 
0562c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05630     50 00 00 00 
05634     A0 00 00 00 
05638     54 00 00 00 
0563c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
05640     08 00 00 00 
05644     08 00 00 00 
05648     08 00 00 00 
0564c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05650     0C 00 00 00 
05654     08 00 00 00 
05658     00 01 00 00 
0565c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
05660     E0 01 00 00 
05664     10 06 56 15 
05668     FB 64 C3 01 
0566c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
05670     50 00 00 00 
05674     32 00 00 00 
05678     50 00 00 00 
0567c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05680     08 00 00 00 
05684     08 00 00 00 
05688     08 00 00 00 
0568c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05690     0C 00 00 00 
05694     08 00 00 00 
05698     40 01 00 00 
0569c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
056a0     E0 01 00 00 
056a4     F2 CD 33 13 
056a8     FB 53 92 01 
056ac     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
056b0     18 00 00 00 
056b4     30 00 00 00 
056b8     18 00 00 00 
056bc     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
056c0     08 00 00 00 
056c4     08 00 00 00 
056c8     08 00 00 00 
056cc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
056d0     0C 00 00 00 
056d4     08 00 00 00 
056d8     80 01 00 00 
056dc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
056e0     E0 01 00 00 
056e4     F4 8F 11 11 
056e8     FB 3A 55 01 
056ec     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
056f0     20 00 00 00 
056f4     40 00 00 00 
056f8     22 00 00 00 
056fc     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05700     00 00 00 00 
05704     08 00 00 00 
05708     00 00 00 00 
0570c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
05710     0C 00 00 00 
05714     08 00 00 00 
05718     C0 01 00 00 
0571c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
05720     F0 01 00 00 
05724     F2 CD 33 13 
05728     FB 53 92 01 
0572c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05730                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
05730     00 75 C7 97 
05734     27 47 F6 0A 
05738     05 79 CB 9B 
0573c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
05740                 | 
05740     28 12 64 FD | hdmi            setq    #9
05744     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
05748                 |            '     setq2   #255
05748                 |             '    rdlong  $100, paletteptr 
05748     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0574c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
05750     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
05754     78 F9 02 F1 |                 add     ii,hbase
05758     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
0575c     7B 0B 80 FF 
05760     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
05764                 | 
05764     66 66 86 FF 
05768     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
0576c                 | 
0576c                 | 
0576c                 | ''--------  frame rendering main loop  ---------------------------------------------------
0576c                 | 
0576c                 | p101
0576c     28 14 64 FD |                 setq    #10
05770     00 DF 06 FB |                 rdlong  framebuf,  ptra
05774     28 1E 64 FD |                 setq    #15
05778     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
0577c     71 99 02 FB |                 rdlong  border,borderptr
05780                 | 
05780     01 C4 06 F1 |                 add     frames,#1
05784     76 F5 02 F6 |                 mov     dlptr2,dlptr
05788                 | 
05788     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
0578c     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
05790     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
05794     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
05798                 |  '' up porch
05798                 | 
05798     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
0579c     49 FF 02 F6 |                 mov     hsync1,sync_001
057a0     37 A8 46 FB |                 callpa  i_upporch ,#blank
057a4     72 01 68 FC |                 wrlong  #0,vblankptr
057a8                 |                 
057a8     1F EA 16 F4 |                 testb   paletteptr,#31 wc
057ac     29 FE 65 3D |          if_nc  setq2   #255
057b0     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
057b4                 | 
057b4                 | '' cursor blinking
057b4                 | 
057b4     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
057b8     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
057bc                 | 
057bc                 | '' main screen
057bc                 | 
057bc     00 BE 06 F6 |                 mov linenum,#0
057c0     00 18 07 F6 |                 mov rcnt,#0
057c4     00 1C 07 F6 |                 mov rcnt2a,#0
057c8                 | 
057c8                 | 
057c8     00 18 0F F2 | p301            cmp rcnt,#0 wz
057cc     18 00 90 AD |         if_z    jmp #p306
057d0     01 18 87 F1 |                 sub rcnt,#1
057d4     90 F7 02 F6 |                 mov dl,rdl
057d8     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
057dc     8F F7 02 A1 |    if_z        add dl,roffset  
057e0     7B 21 03 F6 |                 mov rdl,dl
057e4     04 00 90 FD |                 jmp #p307          
057e8                 |           
057e8                 |                 
057e8     7A F7 02 FB | p306            rdlong  dl,dlptr2
057ec     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
057f0     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
057f4     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
057f8                 | 
057f8                 | '' Special entry:
057f8                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
057f8                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
057f8                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
057f8                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
057f8                 | '' todo: set horizontal scroll (if needed)
057f8                 | 
057f8     02 FA 66 F0 |                 shl framebuf2,#2
057fc     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
05800     04 22 0F F2 |                 cmp dlc,#%100 wz
05804                 |   
05804                 |                 
05804     04 F4 06 F1 |                 add dlptr2,#4
05808     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
0580c     7A 21 03 FB |                  rdlong rdl,dlptr2
05810     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
05814     04 18 47 F0 |                  shr rcnt,#4
05818                 |              
05818     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
0581c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
05820                 |                 
05820     04 1E 47 F0 |                  shr roffset,#4
05824     0C 1E 67 F0 |                  shl roffset,#12
05828                 |   
05828     9C FF 9F FD |                  jmp #p301
0582c                 |                  
0582c                 |                  
0582c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
0582c     0C FA 46 F0 |                 shr     framebuf2,#12
05830     02 FA 66 F0 |                 shl     framebuf2,#2
05834                 | 
05834     7B 03 E3 F8 |                 getbyte t1,dl,#0
05838     00 02 0F F2 |                 cmp     t1,#0 wz
0583c     34 00 90 AD |     if_z        jmp     #borderline
05840                 | 
05840     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
05844     50 00 90 CD |           if_c   jmp     #textline
05848     50 02 90 3D |           if_nc  jmp     #graphline
0584c                 | '
0584c     01 BE 06 F1 | p302            add     linenum,#1
05850     04 F4 06 F1 |                 add     dlptr2,#4
05854     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
05858     6C FF 9F 5D |          if_nz  jmp     #p301
0585c                 | 
0585c     72 03 68 FC | p112            wrlong  #1,vblankptr
05860     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
05864                 | 
05864     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
05868     4B FF 02 F6 |                 mov     hsync1,sync_223
0586c     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
05870     F8 FE 9F FD |                 jmp     #p101
05874                 | 
05874                 | '' ---------------  END of frame rendering loop -------------------------------------------
05874                 | 
05874                 | 
05874     14 00 B0 FD | borderline      call    #hsync                      ' make a border
05878     4C A1 C2 FC |                 xcont   m_vi,border
0587c     CC FF 9F FD |                 jmp     #p302
05880                 | 
05880                 | 
05880     08 00 B0 FD | blank           call    #hsync                          'blank lines
05884     7E A1 C2 FC |                 xcont   m_vi,hsync0
05888     FD ED 6F 0B |         _ret_   djnz    pa,#blank
0588c                 | 
0588c     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
05890     7F 9D B2 FC |                 xzero   m_sn,hsync1
05894     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
05898                 | 
05898                 | 
05898                 | 
05898                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
05898                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
05898                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
05898                 | 
05898                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
05898                 | 
05898     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
0589c                 | 
0589c     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
058a0     7B 17 5B F8 |                 getnib  zoom, dl,#3
058a4     03 16 07 F5 |                 and             zoom, #3
058a8                 | 
058a8                 | 
058a8                 | 
058a8     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
058ac     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
058b0     3F BC 06 F5 |                 and     linestart,#63
058b4     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
058b8     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
058bc                 | 
058bc     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
058c0                 | 
058c0                 |                        ' if fontline =0, get a border color
058c0                 | 
058c0     51 03 33 F9 | p102            getword t1,m_border,#0
058c4     00 02 0F F2 |                 cmp     t1, #0 wz
058c8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
058cc                 | 
058cc     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
058d0     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
058d4     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
058d8     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
058dc     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
058e0     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
058e4     52 BB 02 F6 |                 mov m_lut2, m_lut1
058e8     6A BB 02 F1 |                 add m_lut2, lutt1
058ec     58 0F 03 F6 |                 mov cpl2,i_cpl
058f0                 | 
058f0     02 16 0F F2 |                cmp zoom,#2 wz
058f4     E4 00 90 AD |           if_z jmp #p420
058f8     01 16 0F F2 |                cmp zoom,#1 wz
058fc     64 00 90 AD |           if_z jmp #p410
05900     00 16 0F F2 |                 cmp zoom,#0 wz
05904     04 00 90 AD |           if_z jmp #p400
05908     50 01 90 FD |                jmp #p430
0590c                 | 
0590c                 |                    '
0590c                 |  ''---------------------------------------------------------------------------------------------------------
0590c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
05910     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05914     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05918     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0591c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05920     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05924     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05928     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0592c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05930     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05934                 | 
05934     81 BB C2 FC |                         xcont m_lut2,t1
05938                 | 
05938     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0593c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05940     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05944     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05948     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0594c     01 C0 86 F1 |                         sub     lutaddr,#1
05950                 | 
05950     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05954     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05958     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
0595c                 | 
0595c     EB 0F 6F FB |                         djnz   cpl2,#p400
05960     28 01 90 FD |  p401                   jmp    #p103
05964                 | 
05964                 | ''------------------------------------------------------------------------------------------------------------
05964                 | 
05964     01 0E 47 F0 |  p410                   shr cpl2,#1
05968                 | 
05968                 | ''---------------------------------------------------------------------------------------------------------
05968     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
0596c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05970     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05974     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05978     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0597c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05980     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05984     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05988     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
0598c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05990                 | 
05990                 | 
05990     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
05994     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
05998     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
0599c     03 02 07 FA |                         mul t1,#3
059a0     81 BB C2 FC |                         xcont m_lut2,t1
059a4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
059a8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
059ac     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
059b0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
059b4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
059b8     01 C0 86 F1 |                         sub     lutaddr,#1
059bc     63 06 63 FD |                         mergew t3
059c0     03 06 07 FA |                         mul t3,#3
059c4     83 BB C2 FC |                         xcont m_lut2,t3
059c8                 | 
059c8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
059cc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
059d0                 | 
059d0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
059d4                 | 
059d4     E4 0F 6F FB |                         djnz   cpl2,#p412
059d8     B0 00 90 FD |  p411                   jmp    #p103
059dc                 | 
059dc                 | ''------------------------------------------------------------------------------------------------------------
059dc                 | 
059dc     02 0E 47 F0 |  p420                   shr cpl2,#2
059e0                 | 
059e0                 | ''---------------------------------------------------------------------------------------
059e0     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
059e4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
059e8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
059ec     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
059f0     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
059f4     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
059f8     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
059fc     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05a00     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05a04     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05a08                 | 
05a08     61 02 63 FD |                         mergeb t1
05a0c     81 07 3B F9 |                         getword t3,t1,#1
05a10     0F 02 07 FA |                         mul t1,#15
05a14     81 BB C2 FC |                         xcont m_lut2,t1
05a18                 | 
05a18     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05a1c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05a20     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05a24     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05a28     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05a2c     01 C0 86 F1 |                         sub     lutaddr,#1
05a30                 | 
05a30     81 09 EB F8 |                         getbyte t4,t1,#1        '
05a34     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
05a38                 | 
05a38     0F 06 07 FA |                         mul t3,#15
05a3c     83 BB C2 FC |                         xcont m_lut2,t3
05a40                 | 
05a40     83 0B EB F8 |                         getbyte t5,t3,#1
05a44     85 BB C2 FC |                         xcont m_lut2, t5
05a48     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05a4c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05a50                 | 
05a50     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05a54                 | 
05a54     E2 0F 6F FB |                         djnz   cpl2,#p422
05a58     30 00 90 FD |  p421                   jmp    #p103
05a5c                 | 
05a5c                 | '--------------------------------------------------------------------------------------------------------------
05a5c                 | 
05a5c     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
05a60     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05a64     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05a68                 | 
05a68     00 BA C6 FC |                         xcont m_lut2,#0
05a6c                 | 
05a6c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05a70     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05a74     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05a78     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05a7c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05a80     01 C0 86 F1 |                         sub     lutaddr,#1
05a84                 | 
05a84     F5 0F 6F FB |                         djnz   cpl2,#p430
05a88     00 00 90 FD |  p431                   jmp    #p103
05a8c                 | 
05a8c                 | ''------------------------------------------------------------------------------------------------------------
05a8c                 | 
05a8c                 | 
05a8c                 | 
05a8c     51 25 33 F9 | p103            getword  mb2,m_border,#0
05a90     00 24 0F F2 |                 cmp      mb2, #0 wz
05a94     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05a98                 | 
05a98     B0 FD 9F FD |                 jmp #p302
05a9c                 | 
05a9c                 | '' -------------------------------------- END of text line ---------------------------------
05a9c                 | 
05a9c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
05a9c                 | 
05a9c     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
05aa0                 | 
05aa0                 | 
05aa0     51 25 33 F9 | p202            getword mb2,m_border,#0
05aa4     00 24 0F F2 |                 cmp     mb2, #0 wz
05aa8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05aac                 | 
05aac                 | '----------------------------------------- display pixels
05aac                 | 
05aac     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
05ab0     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05ab4                 | 
05ab4     7B 17 5B F8 |                 getnib  zoom, dl,#3
05ab8     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
05abc                 | 
05abc     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
05ac0     0C BC 06 F5 |                 and     colordepth,#12
05ac4                 | 
05ac4     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
05ac8     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
05acc     64 00 90 AD |           if_z  jmp     #p240
05ad0                 | 
05ad0     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05ad4     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
05ad8     98 00 90 AD |           if_z  jmp     #p250
05adc                 | 
05adc     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
05ae0     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
05ae4     FC 00 90 AD |           if_z  jmp     #p260
05ae8                 | 
05ae8     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
05aec                 | 
05aec                 | '' --- 8 bit color modes
05aec                 | 
05aec     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
05af0     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05af4                 | 
05af4     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
05af8     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
05afc                 |        
05afc                 |  '  
05afc     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
05b00     25 0C 07 A6 |                 if_z mov skippattern,#%100101
05b04                 |     
05b04                 |  
05b04     05 0C 07 56 |                 if_nz mov skippattern,#%000101
05b08     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
05b0c                 |         
05b0c                 | 
05b0c                 |         
05b0c     7D 11 03 FB | p235               rdlong  char,framebuf2
05b10     32 0C 63 FD |                    skipf skippattern
05b14     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
05b18     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
05b1c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
05b20     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
05b24     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
05b28     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
05b2c     F7 0F 6F FB |                    djnz    cpl2,#p235
05b30                 | 
05b30     20 01 90 FD |                jmp    #p203
05b34                 |                   
05b34                 | 
05b34                 | 
05b34                 | '' --- 1 bit color modes
05b34                 | 
05b34     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
05b38     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05b3c                 | 
05b3c     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
05b40     13 0C 07 A6 |        if_z   mov skippattern,#%10011
05b44     08 0C 07 56 |        if_nz  mov skippattern,#%01000
05b48                 | 
05b48                 | 
05b48     7D 11 E3 FA | p241               rdword  char,framebuf2
05b4c     44 10 FF F9 |                    movbyts char,#%01000100
05b50     63 10 63 FD |                    mergew  char
05b54     32 0C 63 FD |                    skipf skippattern
05b58     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
05b5c     63 10 63 FD |                    mergew  char                    ' 1 0
05b60     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
05b64     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
05b68     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
05b6c     F6 0F 6F FB |                    djnz   cpl2,#p241
05b70                 | 
05b70                 | 
05b70     E0 00 90 FD |                jmp    #p203
05b74                 | 
05b74                 | '' --- 2 bit color modes
05b74                 | 
05b74     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
05b78     C8 00 90 AD |        if_z   jmp #p251
05b7c                 | 
05b7c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05b80     30 00 90 AD |        if_z   jmp #p252
05b84                 | 
05b84                 | 
05b84     7D 11 C3 FA | p254               rdbyte char,framebuf2
05b88     04 0A 07 F6 |                    mov  t5,#4
05b8c     02 10 67 F0 | p255               shl  char,#2
05b90     88 03 53 F8 |                    getnib  t1,char,#2
05b94     03 02 07 F5 |                    and     t1,#3
05b98     55 02 07 FA |                    mul     t1,#$55
05b9c     81 05 03 F9 |                    rolbyte  t2,t1,#0
05ba0     FA 0B 6F FB |                    djnz    t5,#p255
05ba4     82 BB C2 FC |                    xcont   m_lut2,t2
05ba8     01 FA 06 F1 |                    add     framebuf2,#1
05bac     F5 0F 6F FB |                    djnz    cpl2,#p254
05bb0     A0 00 90 FD |                    jmp     #p203
05bb4                 | 
05bb4     7D 11 E3 FA | p252               rdword char,framebuf2
05bb8     08 0A 07 F6 |                    mov  t5,#8
05bbc     02 10 67 F0 | p253               shl  char,#2
05bc0     88 03 63 F8 |                    getnib  t1,char,#4
05bc4     03 02 07 F5 |                    and     t1,#3
05bc8     05 02 07 FA |                    mul     t1,#5
05bcc     81 05 83 F8 |                    rolnib  t2,t1,#0
05bd0     FA 0B 6F FB |                    djnz    t5,#p253
05bd4     82 BB C2 FC |                    xcont   m_lut2,t2
05bd8     02 FA 06 F1 |                    add     framebuf2,#2
05bdc     F5 0F 6F FB |                    djnz    cpl2,#p252
05be0     70 00 90 FD |                    jmp     #p203
05be4                 | 
05be4                 | '' ------ 4 bit color modes
05be4                 | 
05be4     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
05be8     58 00 90 AD |        if_z   jmp #p251
05bec                 | 
05bec     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05bf0     2C 00 90 AD |        if_z   jmp #p262
05bf4                 | 
05bf4                 | 
05bf4     7D 11 C3 FA | p263               rdbyte char,framebuf2
05bf8     02 0A DC FC |                            rep #5,#2
05bfc     88 05 8B F8 |                              rolnib t2,char,#1
05c00     88 05 8B F8 |                                  rolnib t2,char,#1
05c04     88 05 8B F8 |                              rolnib t2,char,#1
05c08     88 05 8B F8 |                                  rolnib t2,char,#1
05c0c     04 10 67 F0 |                              shl char,#4
05c10     82 BB C2 FC |                    xcont   m_lut2,t2
05c14     01 FA 06 F1 |                    add     framebuf2,#1
05c18     F6 0F 6F FB |                    djnz    cpl2,#p263
05c1c     34 00 90 FD |                    jmp     #p203
05c20                 | 
05c20     7D 11 E3 FA | p262               rdword  char,framebuf2
05c24     04 06 DC FC |                            rep #3,#4
05c28     88 05 9B F8 |                              rolnib t2,char,#3
05c2c     88 05 9B F8 |                                  rolnib t2,char,#3
05c30     04 10 67 F0 |                              shl char,#4
05c34     82 BB C2 FC |                    xcont   m_lut2,t2
05c38     02 FA 06 F1 |                    add     framebuf2,#2
05c3c     F8 0F 6F FB |                    djnz    cpl2,#p262
05c40     10 00 90 FD |                    jmp     #p203
05c44                 | 
05c44                 | ''---------- all color modes without zoom
05c44                 | 
05c44     87 07 D8 FC | p251               rep  #3,cpl2
05c48     7D 11 03 FB |                    rdlong  char,framebuf2
05c4c     04 FA 06 F1 |                    add     framebuf2,#4
05c50     88 BB C2 FC |                    xcont   m_lut2,char
05c54                 |           
05c54                 |  ''-----------------------------------------------------------------------------------------
05c54                 | p203           ' getword  mb2,m_border,#0
05c54     00 24 0F F2 |                 cmp      mb2, #0 wz
05c58     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05c5c                 | 
05c5c     EC FB 9F FD |                 jmp #p302
05c60                 | 
05c60                 | '' -------------------------------------- END of graph  line ---------------------------------
05c60                 | 
05c60                 | '' consts and vars
05c60                 | 
05c60     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
05c64     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
05c68     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
05c6c     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
05c70                 | 
05c70     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
05c74                 | 
05c74                 | '------ these longs will be set by setmode function
05c74                 | 
05c74     00 00 00 00 | m_bs            long    0        'blanks before sync
05c78     00 00 00 00 | m_sn            long    0        'sync
05c7c     00 00 00 00 | m_bv            long    0        'blanks before visible
05c80     00 00 00 00 | m_vi            long    0        'visible pixels #
05c84     00 00 00 00 | m_border        long    0        'left/right borders
05c88     00 00 00 00 | m_lut1          long    0        'characters
05c8c     00 00 00 00 | i_vborder       long    0        'up/down borders
05c90     00 00 00 00 | i_upporch       long    0        'up porch lines
05c94     00 00 00 00 | i_vsync         long    0        'vsync lines
05c98     00 00 00 00 | i_downporch     long    0        'down porch lines
05c9c     00 00 00 00 | i_modenum       long    0        'mode #
05ca0     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05ca4     00 00 00 00 | i_lines         long    0        'scanlines #
05ca8     00 00 00 00 | i_clock         long    0
05cac     00 00 00 00 | i_hubset        long    0
05cb0     00 00 00 00 | i_totalvis      long    0
05cb4                 | 
05cb4                 | '-------------------------------------
05cb4                 | 
05cb4     00 00 00 00 | m_lut2          long    0
05cb8                 | 
05cb8                 | colordepth
05cb8     00 00 00 00 | linestart       long    0
05cbc     00 00 00 00 | linenum         long    0
05cc0     00 01 00 00 | lutaddr         long    256
05cc4                 | 
05cc4     0E 00 00 00 | cursorsh        long    14
05cc8     00 00 00 00 | frames          long    0
05ccc     00 00 00 00 | cursorx         long    0
05cd0     00 00 00 00 | cursory         long    0
05cd4     00 00 00 00 | cursorpos       long    0
05cd8     00 00 00 00 | cursorpos2      long    0
05cdc     00 00 00 00 | fontstart       long    0
05ce0     00 00 00 00 | border2         long 0
05ce4     00 00 81 70 | lutiv           long $70810000
05ce8     00 00 88 00 | lutt1           long $00880000
05cec     00 00 80 00 | lutg1           long $00800000
05cf0     00 00 80 10 | lutg2           long $10800000
05cf4     00 00 80 20 | lutg4           long $20800000
05cf8     00 00 80 30 | lutg8           long $30800000
05cfc     00 00 00 00 | framebuf        long 0
05d00     00 00 00 00 | fontbuf         long 0
05d04     00 00 00 00 | borderptr       long 0
05d08     00 00 00 00 | vblankptr       long 0
05d0c     00 00 00 00 | cursorptr       long 0
05d10     00 00 00 00 | modeptr         long 0
05d14     00 00 00 00 | paletteptr      long 0
05d18     00 00 00 00 | dlptr           long 0
05d1c                 | fontnumptr      res     1
05d1c                 | fontnumptr      res     1
05d1c                 | hbase           res     1
05d1c                 | hbase           res     1
05d1c                 | borderptr2      res     1
05d1c                 | borderptr2      res     1
05d1c                 | dlptr2 res 1
05d1c                 | dlptr2 res 1
05d1c                 | dl              res 1
05d1c                 | dl              res 1
05d1c                 | ii              res     1
05d1c                 | ii              res     1
05d1c                 | framebuf2       res     1
05d1c                 | framebuf2       res     1
05d1c                 | hsync0          res     1
05d1c                 | hsync0          res     1
05d1c                 | hsync1          res     1
05d1c                 | hsync1          res     1
05d1c                 | fontline        res     1
05d1c                 | fontline        res     1
05d1c                 | t1              res     1
05d1c                 | t1              res     1
05d1c                 | t2              res     1
05d1c                 | t2              res     1
05d1c                 | t3 res 1
05d1c                 | t3 res 1
05d1c                 | t4 res 1
05d1c                 | t4 res 1
05d1c                 | t5 res 1
05d1c                 | t5 res 1
05d1c                 | skippattern res 1
05d1c                 | skippattern res 1
05d1c                 | cpl2 res 1
05d1c                 | cpl2 res 1
05d1c                 | char            res     1
05d1c                 | char            res     1
05d1c                 | backcolor       res     1
05d1c                 | backcolor       res     1
05d1c                 | charcolor       res     1
05d1c                 | charcolor       res     1
05d1c                 | zoom res 1
05d1c                 | zoom res 1
05d1c     00 00 00 00 | rcnt long 0 'dl repeat count
05d20     00 00 00 00 | rcnt2 long 0
05d24     00 00 00 00 | rcnt2a long 0
05d28     00 00 00 00 | roffset long 0
05d2c     00 00 00 00 | rdl long 0  'dl repeat line
05d30     00 00 00 00 | dlc long 0 'dl command
05d34     00 00 00 00 | mb2 long 0
05d38     00 00 00 00 | aend             long 0
05d3c                 |                 fit     496                     '
05d3c                 | __system__dat_
05d3c     00 00 00 00 
05d40     00 00 00 00 | 	byte	$00[8]
05d44     03 00 00 00 
05d48     00 00 00 00 
05d4c     00 00 00 00 
05d50     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d54                 | __heap_base
05d54     00 00 00 00 
      ...             
06d54     00 00 00 00 
06d58     00 00 00 00 | 	long	0[1026]
06d5c                 | objmem
06d5c     00 00 00 00 | 	long	0[1]
06d60 0e8             | 	org	COG_BSS_START
06d60 0e8             | _var01
06d60 0e8             | 	res	1
06d60 0e9             | _var02
06d60 0e9             | 	res	1
06d60 0ea             | _var03
06d60 0ea             | 	res	1
06d60 0eb             | _var04
06d60 0eb             | 	res	1
06d60 0ec             | _var05
06d60 0ec             | 	res	1
06d60 0ed             | _var06
06d60 0ed             | 	res	1
06d60 0ee             | _var07
06d60 0ee             | 	res	1
06d60 0ef             | _var08
06d60 0ef             | 	res	1
06d60 0f0             | _var09
06d60 0f0             | 	res	1
06d60 0f1             | _var10
06d60 0f1             | 	res	1
06d60 0f2             | _var11
06d60 0f2             | 	res	1
06d60 0f3             | _var12
06d60 0f3             | 	res	1
06d60 0f4             | _var13
06d60 0f4             | 	res	1
06d60 0f5             | _var14
06d60 0f5             | 	res	1
06d60 0f6             | _var15
06d60 0f6             | 	res	1
06d60 0f7             | _var16
06d60 0f7             | 	res	1
06d60 0f8             | arg01
06d60 0f8             | 	res	1
06d60 0f9             | arg02
06d60 0f9             | 	res	1
06d60 0fa             | arg03
06d60 0fa             | 	res	1
06d60 0fb             | arg04
06d60 0fb             | 	res	1
06d60 0fc             | local01
06d60 0fc             | 	res	1
06d60 0fd             | local02
06d60 0fd             | 	res	1
06d60 0fe             | local03
06d60 0fe             | 	res	1
06d60 0ff             | local04
06d60 0ff             | 	res	1
06d60 100             | local05
06d60 100             | 	res	1
06d60 101             | local06
06d60 101             | 	res	1
06d60 102             | local07
06d60 102             | 	res	1
06d60 103             | local08
06d60 103             | 	res	1
06d60 104             | local09
06d60 104             | 	res	1
06d60 105             | local10
06d60 105             | 	res	1
06d60 106             | local11
06d60 106             | 	res	1
06d60 107             | local12
06d60 107             | 	res	1
06d60 108             | local13
06d60 108             | 	res	1
06d60 109             | local14
06d60 109             | 	res	1
06d60 10a             | local15
06d60 10a             | 	res	1
06d60 10b             | local16
06d60 10b             | 	res	1
06d60 10c             | local17
06d60 10c             | 	res	1
06d60 10d             | local18
06d60 10d             | 	res	1
06d60 10e             | local19
06d60 10e             | 	res	1
06d60 10f             | local20
06d60 10f             | 	res	1
06d60 110             | local21
06d60 110             | 	res	1
06d60 111             | local22
06d60 111             | 	res	1
06d60 112             | local23
06d60 112             | 	res	1
06d60 113             | local24
06d60 113             | 	res	1
06d60 114             | local25
06d60 114             | 	res	1
06d60 115             | local26
06d60 115             | 	res	1
06d60 116             | local27
06d60 116             | 	res	1
06d60 117             | local28
06d60 117             | 	res	1
06d60 118             | local29
06d60 118             | 	res	1
06d60 119             | local30
06d60 119             | 	res	1
06d60 11a             | local31
06d60 11a             | 	res	1
06d60 11b             | local32
06d60 11b             | 	res	1
06d60 11c             | local33
06d60 11c             | 	res	1
06d60 11d             | local34
06d60 11d             | 	res	1
06d60 11e             | local35
06d60 11e             | 	res	1
06d60 11f             | local36
06d60 11f             | 	res	1
06d60 120             | local37
06d60 120             | 	res	1
06d60 121             | local38
06d60 121             | 	res	1
06d60 122             | local39
06d60 122             | 	res	1
06d60 123             | local40
06d60 123             | 	res	1
06d60 124             | local41
06d60 124             | 	res	1
06d60 125             | local42
06d60 125             | 	res	1
06d60 126             | local43
06d60 126             | 	res	1
06d60 127             | local44
06d60 127             | 	res	1
06d60 128             | local45
06d60 128             | 	res	1
06d60 129             | local46
06d60 129             | 	res	1
06d60 12a             | local47
06d60 12a             | 	res	1
06d60 12b             | local48
06d60 12b             | 	res	1
06d60 12c             | local49
06d60 12c             | 	res	1
06d60 12d             | local50
06d60 12d             | 	res	1
06d60 12e             | local51
06d60 12e             | 	res	1
06d60 12f             | local52
06d60 12f             | 	res	1
06d60 130             | local53
06d60 130             | 	res	1
06d60 131             | local54
06d60 131             | 	res	1
06d60 132             | local55
06d60 132             | 	res	1
06d60 133             | local56
06d60 133             | 	res	1
06d60 134             | local57
06d60 134             | 	res	1
06d60 135             | local58
06d60 135             | 	res	1
06d60 136             | local59
06d60 136             | 	res	1
06d60 137             | local60
06d60 137             | 	res	1
06d60 138             | local61
06d60 138             | 	res	1
06d60 139             | local62
06d60 139             | 	res	1
06d60 13a             | local63
06d60 13a             | 	res	1
06d60 13b             | local64
06d60 13b             | 	res	1
06d60 13c             | local65
06d60 13c             | 	res	1
06d60 13d             | local66
06d60 13d             | 	res	1
06d60 13e             | local67
06d60 13e             | 	res	1
06d60 13f             | local68
06d60 13f             | 	res	1
06d60 140             | local69
06d60 140             | 	res	1
06d60 141             | local70
06d60 141             | 	res	1
06d60 142             | local71
06d60 142             | 	res	1
06d60 143             | local72
06d60 143             | 	res	1
06d60 144             | local73
06d60 144             | 	res	1
06d60 145             | local74
06d60 145             | 	res	1
06d60 146             | local75
06d60 146             | 	res	1
06d60 147             | local76
06d60 147             | 	res	1
06d60 148             | local77
06d60 148             | 	res	1
06d60 149             | local78
06d60 149             | 	res	1
06d60 14a             | local79
06d60 14a             | 	res	1
06d60 14b             | local80
06d60 14b             | 	res	1
06d60 14c             | muldiva_
06d60 14c             | 	res	1
06d60 14d             | muldivb_
06d60 14d             | 	res	1
06d60 14e             | 	fit	480
06d60 14e             | 
