{
################################################################################################################################
#                   Parallax Propeller 2 protracker replay routine - v1.0    (C) 2020 Johannes Ahlebrand                       #
################################################################################################################################
#                             							   v.1.01P                                                             #
#               This version stripped and modified for Paula type audio synthesizer - 20220102 pik33@o2.pl                     # 
################################################################################################################################
#                                    TERMS OF USE: Parallax Object Exchange License                                            #
################################################################################################################################
#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation    #
#files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,    #
#modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software#
#is furnished to do so, subject to the following conditions:                                                                   #
#                                                                                                                              #
#The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.#
#                                                                                                                              #
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE          #
#WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR         #
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,   #
#ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                         #
################################################################################################################################
}


PUB initModule(hubPtr, startPattern) | i, tmpPtr, samLength, d1, d2, d3, d4, d5

  ' Set some data pointers
  magicFour      := hubPtr + 1080
  nameStr        := hubPtr
  samplesInfoLut := hubPtr + 20

  ' Is this a 31 sample module?
  if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
    songLength          := byte[hubPtr + 950]
    unknown1            := byte[hubPtr + 951]
    songPositionsLut    :=      hubPtr + 952
    patternsData        :=      hubPtr + 1084
    numberOfInstruments := 31
    numberOfPatterns    := 0    ' Find out how many patterns that are available
    repeat i from 952 to 1079
      if byte[hubPtr][i] > numberOfPatterns
        numberOfPatterns := byte[hubPtr][i]
    numberOfPatterns++
    sampleDataPtr       := patternsData + (numberOfPatterns << 10)

  ' This must be an oldschool 15 sample soundtracker module
  else
    songLength          := byte[hubPtr + 470]
    unknown1            := byte[hubPtr + 471]
    songPositionsLut    :=      hubPtr + 472
    patternsData        :=      hubPtr + 600
    numberOfInstruments := 15
    numberOfPatterns    := 0    ' Find out how many patterns that are available
    repeat i from 472 to 599
      if byte[hubPtr][i] > numberOfPatterns
        numberOfPatterns := byte[hubPtr][i]
    numberOfPatterns++
    sampleDataPtr       := patternsData + (numberOfPatterns << 10)

  ' Iterate through all samples and fill in the sample pointer LUT
  tmpPtr := sampleDataPtr
  repeat i from 1 to numberOfInstruments
    samplesPtrLut[i-1] := tmpPtr
    getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
    tmpPtr += samLength

  ' Below this point, all play routine variables are resest to their default values
  tickCounter                 := 0
  patternRow                  := 0
  songPosition                := startPattern
  currentSongSpeed            := 6
  patternDelay                := 0
  ticksPerMinute              := 50 * 60
  cyclesToWait                := systemClock / 50
  sampleNumber_memory         := 0
  lpFilter                    := 0
  cmdD_memoryX                := 0
  cmdD_memoryY                := 0
  cmdD_updatePosition         := false
  cmdB_memoryZ                := 0
  cmdB_updatePosition         := false
  cmdE6_updatePositionCommon  := false

  repeat i from 0 to LAST_CHANNEL

    currRepeatPoint[i]        := 0
    currSampleLength[i]       := 4
    currSamplePtr[i]          := @null
    currSampleNr[i]           := 0
    currRepeatLength[i]       := 1
    currPeriod[i]             := 400
    lastSetPeriod[i]          := 400
    lastSetSamplePtr[i]       := 0
    lastSetSampleNr[i]        := 0
    lastSetSampleLength[i]    := 0
    lastSetRepeatLength[i]    := 0
    lastSetRepeatPoint[i]     := 0
    currVolume[i]             := 0
    currPanning[i]            := 0
    cmd3_memoryZ[i]           := 0
    cmd4_memoryY[i]           := 0
    cmd4_memoryX[i]           := 0
    cmd7_memoryY[i]           := 0
    cmd7_memoryX[i]           := 0
    cmd9_memoryZ[i]           := 0
    cmdE6_memory[i]           := 0
    cmdE6_counter[i]          := 0
    cmdE6_updatePosition[i]   := false
    sampleNumber_memory[i]    := 0
    vibratoPos[i]             := 0
    portamentoPeriodMemory[i] := 0
    portaGlissando[i]         := 0
    vibratoType[i]            := 0
    tremoloType[i]            := 0
    tremoloPos[i]             := 0
    deltaVolume[i]            := 0
    deltaPeriod[i]            := 0
    resetTremolo[i]           := 0
    resetVibrato[i]           := 0


' Set the main volume of the tracker player
'
    ' @mVolume - The volume to set. Should be a value from 0 to 256
'
PUB setVolume(mVolume)

  mainVolume := mVolume


PUB setPattern(patternPosition)

  cmdB_memoryZ := patternPosition
  cmdB_updatePosition := true


' This routine needs to be ticked X number of times per second
' in order to advance the tracker play routine
'
PUB tick() | channel, sampleNumber, period, effect, i

  if currentSongSpeed == 0
    return

  ' Iterate over the channels and process everything
  repeat channel from 0 to LAST_CHANNEL

    getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
    processChannel(channel, sampleNumber, period, effect)

  ' Incrementation the main counter that drives the whole play routine
  if ++tickCounter >= (currentSongSpeed + patternDelay)
    tickCounter := 0

  ' If the tick is zero, increment the other counters and do some song positioning handling
  if tickCounter == 0

    ' Handle the "pattern repeat" command, "E6"
    if cmdE6_updatePositionCommon
      repeat i from 0 to LAST_CHANNEL
        if cmdE6_updatePosition[i]
          patternRow := cmdE6_memory[i]
        cmdE6_updatePosition[i] := false

    ' Handle the "skip to next pattern with offset command", "D"
    elseif cmdD_updatePosition
      if ++songPosition >= songLength
        songPosition := 0

      patternRow := (cmdD_memoryX * 10) + cmdD_memoryY

    ' If no "jump to row commands" are active, do a normal pattern incrementation
    else
      if ++patternRow >= PATTERN_LENGTH
        patternRow := 0

        if ++songPosition >= songLength
          songPosition := 0

    ' Handle "jump to song position" command, "B"
    if cmdB_updatePosition

      songPosition := cmdB_memoryZ

      ifnot cmdD_updatePosition
        patternRow := 0

    ' We need to be sure that all positioning commands are reset for the next tick
    cmdE6_updatePositionCommon := false
    cmdB_updatePosition := false
    cmdD_updatePosition := false
    patternDelay := 0



PUB getChannelParameters(channelNumber, samplePtr, sampleLength, loopSize, freq, vol, pan, filter) | tempVolume

  channelNumber &= 3

  if currRepeatLength[channelNumber] < 1
    currRepeatLength[channelNumber] := 1

  tempVolume := (currVolume[channelNumber] + deltaVolume[channelNumber])
  tempVolume <#= MAXIMUM_VOLUME
  tempVolume #>= MINIMUM_VOLUME

  long[freq]         := amigaPeriodToFreq(currPeriod[channelNumber] + deltaPeriod[channelNumber])
  long[vol]          := ((tempVolume << 7) * mainVolume) >> 8

  'long[pan]          := instrPanningLut[lastSetSampleNr[channelNumber]]
  long[pan]          := currPanning[channelNumber]

  long[samplePtr]    := currSamplePtr[channelNumber]
  long[loopSize]     := currRepeatLength[channelNumber]
  long[sampleLength] := currSampleLength[channelNumber]
  long[filter]       := lpFilter

  currSamplePtr[channelNumber]    := 0
  currSampleLength[channelNumber] := 0
  currRepeatLength[channelNumber] := 0
  currRepeatPoint[channelNumber]  := 0


' Calculate and return the number of P2 cycles to wait between ticks
'
PUB getCyclesToWait() : r

  return cyclesToWait


CON

  MAXIMUM_PERIOD          = 856
  MINIMUM_PERIOD          = 113
  VALUES_IN_PERIOD_TABLE  = MAXIMUM_PERIOD - MINIMUM_PERIOD + 1
  MAXIMUM_VOLUME          = 64
  MINIMUM_VOLUME          = 0
  BYTES_IN_PERIOD_TABLE   = 72
  LAST_POS_IN_PERIOD_TBL  = 35
  VIBRATO_WAVEFORM_LENGTH = 64
  VIBRATO_WAVEFORM_MASK   = VIBRATO_WAVEFORM_LENGTH - 1
  PATTERN_LENGTH          = 64
  NR_CHANNELS             = 4
  LAST_CHANNEL            = NR_CHANNELS - 1
  NR_SAMPLES              = 32
  LAST_SAMPLE_NUMBER      = NR_SAMPLES - 1


' Below this point are all private methods, data and variables
'
VAR

  long systemClock
  word mainVolume
  long nameStr
  long samplesInfoLut
  long sampleDataPtr
  long samplesPtrLut[NR_SAMPLES]
  long patternsData
  long songPositionsLut
  byte songLength
  byte numberOfPatterns
  byte unknown1
  long magicFour
  byte tickCounter
  byte patternRow
  byte songPosition
  byte currentSongSpeed
  byte patternDelay
  byte numberOfInstruments
  long currSamplePtr[NR_CHANNELS]
  byte currSampleNr[NR_CHANNELS]
  word currSampleLength[NR_CHANNELS]
  long currRepeatLength[NR_CHANNELS]
  byte currFineTune[NR_CHANNELS]
  word currRepeatPoint[NR_CHANNELS]
  long currPeriod[NR_CHANNELS]
  long deltaPeriod[NR_CHANNELS]
  long currVolume[NR_CHANNELS]
  long deltaVolume[NR_CHANNELS]
  word currPanning[NR_CHANNELS]
  long lastSetPeriod[NR_CHANNELS]
  long lastSetSamplePtr[NR_CHANNELS]
  long lastSetSampleNr[NR_CHANNELS]
  long lastSetSampleLength[NR_CHANNELS]
  long lastSetRepeatLength[NR_CHANNELS]
  long lastSetRepeatPoint[NR_CHANNELS]
  byte vibratoPos[NR_CHANNELS]
  byte tremoloPos[NR_CHANNELS]
  byte resetTremolo[NR_CHANNELS]
  byte resetVibrato[NR_CHANNELS]
  long portamentoPeriodMemory[NR_CHANNELS]
  long ticksPerMinute
  long cyclesToWait
  long fineTune
  long sampleOffset
  byte x
  byte y
  byte z
  byte cmd
  byte lpFilter
  byte portaGlissando[NR_CHANNELS]
  byte vibratoType[NR_CHANNELS]
  byte tremoloType[NR_CHANNELS]
  byte cmd3_memoryZ[NR_CHANNELS]
  byte cmd4_memoryY[NR_CHANNELS]
  byte cmd4_memoryX[NR_CHANNELS]
  byte cmd7_memoryY[NR_CHANNELS]
  byte cmd7_memoryX[NR_CHANNELS]
  byte cmd9_memoryZ[NR_CHANNELS]
  byte sampleNumber_memory[NR_CHANNELS]
  byte cmdD_memoryX
  byte cmdD_memoryY
  byte cmdD_updatePosition
  byte cmdB_memoryZ
  byte cmdB_updatePosition
  byte cmdE6_memory[NR_CHANNELS]
  byte cmdE6_counter[NR_CHANNELS]
  byte cmdE6_updatePosition[NR_CHANNELS]
  byte cmdE6_updatePositionCommon
  byte trigger[NR_CHANNELS]

PRI noteToFreq(noteNumber) : r | index

  index := word[@periodTable][noteNumber]
  'return long[@frequencyLut][index]
  return long[@frequencyLut][index - MINIMUM_PERIOD]


PRI amigaPeriodToFreq(period) : r

  'return long[@frequencyLut][period]
  return long[@frequencyLut][period - MINIMUM_PERIOD]


PRI noteToAmigaPeriod(noteNumber) : r

  return word[@periodTable][noteNumber]


PRI amigaPeriodToNote(period, fTune) : r | i

  repeat i from 0 to LAST_POS_IN_PERIOD_TBL
    if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
      quit

  return i


PRI retunePeriod(period, fTune) | noteNumber

  if period > 0 and fTune < 16
    noteNumber := amigaPeriodToNote(word[period], 0)
    word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]


pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr

  if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
    long[samplePtr] := 0
    return

  sampleNumber--
  sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
  long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
  long[fTune]        :=   byte[sampleInfoPtr + 24]
  long[volume]       :=   byte[sampleInfoPtr + 25]
  long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
  long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
  long[samplePtr]    := samplesPtrLut[sampleNumber]

  if long[repeatLength] == 2 && long[repeatPoint] == 0
    long[repeatLength] := 1


PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr

  ' Get the note data for a specific channel/song position/pattern row
  patternNumber := byte[songPositionsLut][position & 127]
  patternPtr    := patternsData + (patternNumber << 10)
  dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
  data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]

  ' Extract the different sub parts from the data
  long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
  long[period]       :=  (data >> 16) & $FFF
  long[effect]       :=   data & $FFF


PRI triggerNote(channel)

  currSampleNr[channel]     := lastSetSampleNr[channel]
  currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
  currPeriod[channel]       := lastSetPeriod[channel]
  currSampleLength[channel] := lastSetSampleLength[channel]
  currRepeatLength[channel] := lastSetRepeatLength[channel]
  currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
  trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started

PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr

  channel := channel & 3
  cmd     := (effect >> 8) & $F
  x       := (effect >> 4) & $F
  y       := (effect     ) & $F
  z       := (effect     ) & $FF

  ' Handle everything that executes on "tick zero"
  if tickCounter == 0

    ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
    deltaPeriod[channel] := 0
    deltaVolume[channel] := 0

    ' If the sample number is zero, the memory from "last set non zero sample number" is used
    if sampleNumber > 0
      sampleNumber_memory[channel] := sampleNumber

    ' Get data for the sample in use by the current channel (uses the memorized sample number)
    getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)

    ' Only set volume according to the default sample configuration if the sample number is non zero,
    ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
    if sampleNumber > 0
      currVolume[channel] := volume

    ' Handle all commands that executes on "zero tick"
    sampleOffset := 0
    handleZeroTickCommands(channel)

    ' Prepare sample data for triggering (now or later)
    if period > 0

      retunePeriod(@period, fineTune)
      currFineTune[channel]        := fineTune
      lastSetPeriod[channel]       := period
      lastSetRepeatLength[channel] := repeatLength
      lastSetRepeatPoint[channel]  := repeatPoint
      lastSetSamplePtr[channel]    := samplePtr + sampleOffset
      lastSetSampleNr[channel]     := sampleNumber

      ' This calculates the correct sample length in all situations
      if repeatLength > 2
        sampleLength := repeatPoint + repeatLength

      if sampleLength - sampleOffset < 1
        lastSetSampleLength[channel] := 1
      else
        lastSetSampleLength[channel] := sampleLength - sampleOffset

      ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
      if sampleOffset > sampleLength
        lastSetSamplePtr[channel] := samplePtr + repeatPoint
        lastSetSampleLength[channel] := repeatLength

      ' Trigger note/sample playback directly if no delay or portamento is active
      ifnot cmd == $3 || cmd == $5
        ifnot cmd == $E && x == $D
          triggerNote(channel)

      ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
      if resetTremolo[channel] > 0
        tremoloPos[channel] := 0

      if resetVibrato[channel] > 0
        vibratoPos[channel] := 0

  else
    ' Handle commands that executes on all "non zero ticks"
    handleNonZeroTickCommands(channel)

  ' Handle commands that executes on every tick
  handleEveryTickCommands(channel)

  ' Handle boundaries that should be kept
  currPeriod[channel] <#= MAXIMUM_PERIOD
  currPeriod[channel] #>= MINIMUM_PERIOD
  currVolume[channel] <#= MAXIMUM_VOLUME
  currVolume[channel] #>= MINIMUM_VOLUME


' Handle all commands that executes on tick zero
'
PRI handleZeroTickCommands(channel)

  CASE_FAST cmd

    $9:                          ' Set sample offset
      if z > 0
        cmd9_memoryZ[channel] := z

      sampleOffset := cmd9_memoryZ[channel] << 8

    $B:                          ' Jump position
      cmdB_memoryZ := z
      cmdB_updatePosition := true

    $C:                          ' Set volume
      currVolume[channel] := z

    $D:                          ' Pattern break
      cmdD_memoryX := x
      cmdD_memoryY := y
      cmdD_updatePosition := true

    $E:                          ' Handle "E commands" that execute on tick zero

      CASE_FAST x

        $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off

        $1: currPeriod[channel] -= y             ' Fine frequency slide up

        $2: currPeriod[channel] += y             ' Fine frequency slide down

        $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off

        $4:                                      ' Set vibrato waveform type
          vibratoType[channel]  := y & 3
          resetVibrato[channel] := y & 4

        $5: fineTune := y                        ' Set finetune

        $6:                                      ' Pattern looping
          if y == 0
            cmdE6_memory[channel] := patternRow
          else
            if ++cmdE6_counter[channel] <= y
              cmdE6_updatePosition[channel] := true
              cmdE6_updatePositionCommon    := true
            else
              cmdE6_counter[channel] := 0

        $7:                                      ' Set tremolo waveform type
          tremoloType[channel] := y & 3
          resetTremolo[channel] := y & 4

        $A: currVolume[channel] += y             ' Fine volume slide up

        $B: currVolume[channel] -= y             ' Fine volume slide down

        $E: patternDelay := y * currentSongSpeed ' Pattern delay

    $F:                          ' Set speed
      if z < 32
        currentSongSpeed := z
      else
        ticksPerMinute := z * 24
        cyclesToWait   := (systemClock / ticksPerMinute) * 60


' Handle all commands that executes on "non zero ticks"
'
PRI handleNonZeroTickCommands(channel)

  CASE_FAST cmd

    $1: currPeriod[channel] -= z        ' Frequency slide up

       ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
      if currPeriod[channel] < 0
        currPeriod[channel] := MAXIMUM_PERIOD

    $2: currPeriod[channel] += z        ' Frequency slide down

    $3:                                 ' Slide to note (portamento)
      if z > 0
        cmd3_memoryZ[channel] := z

      doPortamento(channel, lastSetPeriod[channel])

    $5:                                 ' Volume slide + portamento
      doVolumeSlide(channel)
      doPortamento(channel, lastSetPeriod[channel])

    $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)

    $7:                                 ' Tremolo
      if x > 0
        cmd7_memoryX[channel] := x
      if y > 0
        cmd7_memoryY[channel] := y

      doTremolo(channel)

    $A: doVolumeSlide(channel)          ' Volume slide

    $E:                                 ' Retrig every Y ticks
      if (x == $9) && ((tickcounter // y) == 0)
        triggerNote(channel)


' Handle all commands that executes on every tick
'
PRI handleEveryTickCommands(channel) | tempNote, arpCounter

  CASE_FAST cmd

    $0:                                 ' Arpeggio
      arpCounter := tickCounter // 3
      if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
        if arpCounter == 1 and x > 0
          deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
        if arpCounter == 2 and y > 0
          deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
        if arpCounter == 0 and (x + y) > 0
          deltaPeriod[channel] := 0

    $4:                                 ' Vibrato
      if x > 0
        cmd4_memoryX[channel] := x
      if y > 0
        cmd4_memoryY[channel] := y

      doVibrato(channel)

    $6: doVibrato(channel)              ' Volume slide + Vibrato

    $E:
      if x == $C                        ' Cut note after Y ticks
        if tickcounter == y
          currVolume[channel] := 0

      elseif x == $D                    ' Delay note Y ticks
        if tickcounter == y
          triggerNote(channel)
        ' Do a "bugged trigger" if y >= currentSongSpeed
        elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
          currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback


PRI doTremolo(channel) | depth, sineWave, speed

  sineWave := long[@vibratoWaveform][tremoloPos[channel]]
  depth    := cmd7_memoryY[channel]
  speed    := cmd7_memoryX[channel]

  CASE_FAST vibratoType[channel]

    0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
    1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
    2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave

  tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK


PRI doVibrato(channel) | depth, sineWave, speed

  sineWave := long[@vibratoWaveform][vibratoPos[channel]]
  depth    := cmd4_memoryY[channel]
  speed    := cmd4_memoryX[channel]

  CASE_FAST vibratoType[channel]

    0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
    1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
    2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave

  vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK


PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod

  if period == currPeriod[channel]
    return

  if period > 0
    portamentoPeriodMemory[channel] := period
  else
    period := portamentoPeriodMemory[channel]

  if period > currPeriod[channel]
    currPeriod[channel] += cmd3_memoryZ[channel]
    currPeriod[channel] <#= period

  elseif period < currPeriod[channel]
    currPeriod[channel] -= cmd3_memoryZ[channel]
    currPeriod[channel] #>= period

  ' Handle glissando if activated
  if portaGlissando[channel] > 0

    tempPeriod := currPeriod[channel]

    repeat i from 0 to LAST_POS_IN_PERIOD_TBL

      periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
      if tempPeriod >= periodStep
        i += 1000

    deltaPeriod[channel] := periodStep - tempPeriod


PRI doVolumeSlide(channel)

  if x > 0
    currVolume[channel] += x
  if y > 0
    currVolume[channel] -= y



' Tables and data
'
DAT orgh

null             long  0
frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]

vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
                 long  180,  197,  212,  224,  235,  244,  250,  253
                 long  255,  253,  250,  244,  235,  224,  212,  197
                 long  180,  161,  141,  120,  97,   74,   49,   24
                 long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
                 long -180, -197, -212, -224, -235, -244, -250, -253
                 long -255, -253, -250, -244, -235, -224, -212, -197
                 long -180, -161, -141, -120, -97,  -74,  -49,  -24

periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
                 word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
                 word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
                 word  850 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
                 word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
                 word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
                 word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
                 word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
                 word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
                 word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
                 word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
                 word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
                 word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
                 word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
                 word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
                 word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
                 word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
                 word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
                 word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
                 word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
                 word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
                 word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
                 word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
                 word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
                 word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
                 word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
                 word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
                 word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
                 word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
                 word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
                 word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
                 word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
                 word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
                 word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
                 word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
                 word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
                 word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
                 word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
                 word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
                 word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
                 word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
                 word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
                 word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
                 word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
                 word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
                 word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
                 word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
                 word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
