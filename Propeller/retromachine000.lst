00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2C 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 06 F1 03 F6 | 	mov	ptra, objptr
00410 003 F4 F0 07 F1 | 	add	ptra, #244
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 07 80 80 FF 
00424 008 00 F0 67 FD | 	hubset	##16781304
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 07 80 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##16781307
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 68 89 89 FF 
00444 010 14 00 6C FC | 	wrlong	##320000000, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 68 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 52 62 FD | 	cogid	arg01
00614 084 03 52 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0D 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2D 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 53 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 55 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 57 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 59 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2C 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 56 56 F0 |         shr	arg03, #1 wc
00688 0a1 29 55 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 52 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 54 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 56 56 F0 |         shr	arg03, #1 wc
00698 0a5 29 55 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 52 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2A 55 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 29 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 56 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 2B 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 54 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 5D 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 5D 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 7F FD 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 FE 62 FD |        getqx   muldivb_
00740 0cf 19 FC 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 7E FD 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0A 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 7F FF 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0A 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0A D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 7E FD 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0A D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 7F FF 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2C 06 F6 |     mov result1, #0
00778 0dd 00 2E 06 F6 |     mov result2, #0
0077c 0de 29 07 02 F6 |     mov abortchain, arg01
00780 0df 29 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 52 06 F1 |     add arg01, #4
00788 0e1 29 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 52 06 F1 |     add arg01, #4
00790 0e3 29 0D 62 FC |     wrlong objptr, arg01
00794 0e4 04 52 06 F1 |     add arg01, #4
00798 0e5 29 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2A 53 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 29 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 52 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 52 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2A 2D 02 F6 |     mov result1, arg02
007d4 0f4 01 2E 06 F6 |     mov result2, #1
007d8 0f5 29 55 02 FB |     rdlong arg02, arg01
007dc 0f6 04 52 06 F1 |     add arg01, #4
007e0 0f7 29 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 52 06 F1 |     add arg01, #4
007e8 0f9 29 0D 02 FB |     rdlong objptr, arg01
007ec 0fa 04 52 06 F1 |     add arg01, #4
007f0 0fb 29 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 52 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 56 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 00 F1 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | itmp1_
00814 104 00 00 00 00 | 	long	0
00818 105             | itmp2_
00818 105 00 00 00 00 | 	long	0
0081c 106             | objptr
0081c 106 08 01 01 00 | 	long	@objmem
00820 107             | ptr___struct___bas_wrap_sender_tx_
00820 107 80 C3 00 00 | 	long	@__struct___bas_wrap_sender_tx
00824 108             | ptr___struct__s_vfs_file_t_getchar_
00824 108 2C C3 00 00 | 	long	@__struct__s_vfs_file_t_getchar
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 C8 C2 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system____default_flush_
0082c 10a AC 44 00 00 | 	long	@__system____default_flush
00830 10b             | ptr___system____default_getc_
00830 10b F4 42 00 00 | 	long	@__system____default_getc
00834 10c             | ptr___system____default_putc_
00834 10c 7C 43 00 00 | 	long	@__system____default_putc
00838 10d             | ptr___system____default_putc_terminal_
00838 10d 10 44 00 00 | 	long	@__system____default_putc_terminal
0083c 10e             | ptr___system__dat__
0083c 10e CC E8 00 00 | 	long	@__system__dat_
00840 10f             | ptr__ff_cc_dat__
00840 10f 80 EF 00 00 | 	long	@_ff_cc_dat_
00844 110             | ptr__hng030rm_spin2_dat__
00844 110 68 C4 00 00 | 	long	@_hng030rm_spin2_dat_
00848 111             | ptr__hng030rm_spin2_putchar_
00848 111 7C 14 00 00 | 	long	@_hng030rm_spin2_putchar
0084c 112             | ptr__hng030rm_spin2_putpixel1_
0084c 112 00 10 00 00 | 	long	@_hng030rm_spin2_putpixel1
00850 113             | ptr__hng030rm_spin2_putpixel2_
00850 113 E8 10 00 00 | 	long	@_hng030rm_spin2_putpixel2
00854 114             | ptr__hng030rm_spin2_putpixel4_
00854 114 C0 11 00 00 | 	long	@_hng030rm_spin2_putpixel4
00858 115             | ptr__hng030rm_spin2_putpixel8_
00858 115 98 12 00 00 | 	long	@_hng030rm_spin2_putpixel8
0085c 116             | result1
0085c 116 00 00 00 00 | 	long	0
00860 117             | result2
00860 117 00 00 00 00 | 	long	0
00864 118             | result3
00864 118 00 00 00 00 | 	long	0
00868 119             | COG_BSS_START
00868 119             | 	fit	480
00868                 | 	orgh
00868                 | hubentry
00868                 | 
00868                 | _program
00868     15 5A 05 F6 | 	mov	COUNT_, #21
0086c     B0 00 A0 FD | 	call	#pushregs_
00870     EC 0C 06 F1 | 	add	objptr, #236
00874     06 01 68 FC | 	wrlong	#0, objptr
00878     C0 0C 86 F1 | 	sub	objptr, #192
0087c     06 5D 02 F6 | 	mov	local01, objptr
00880                 | ' 
00880                 | ' ' initialize pointers and variables
00880                 | ' 
00880                 | ' border_ptr:=@bordercolor
00880     24 0C 86 F1 | 	sub	objptr, #36
00884     06 5D 62 FC | 	wrlong	local01, objptr
00888     08 00 00 FF 
0088c     00 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
00890                 | ' font_ptr:=@st_font
00890     04 0C 86 F1 | 	sub	objptr, #4
00894     06 21 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
00898                 | ' hdmibase:=base
00898     20 0C 06 F1 | 	add	objptr, #32
0089c     06 01 68 FC | 	wrlong	#0, objptr
008a0     24 0C 86 F1 | 	sub	objptr, #36
008a4     12 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
008a8                 | ' p1:=@putpixel1
008a8     06 53 02 F6 | 	mov	arg01, objptr
008ac     08 00 00 FF 
008b0     00 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
008b4     28 1B B0 FD | 	call	#__system___make_methodptr
008b8     16 5F 02 F6 | 	mov	local02, result1
008bc     DC 0C 06 F1 | 	add	objptr, #220
008c0     06 5F 62 FC | 	wrlong	local02, objptr
008c4     DC 0C 86 F1 | 	sub	objptr, #220
008c8     13 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008cc                 | ' p2:=@putpixel2
008cc     06 53 02 F6 | 	mov	arg01, objptr
008d0     0C 1B B0 FD | 	call	#__system___make_methodptr
008d4     16 5F 02 F6 | 	mov	local02, result1
008d8     E0 0C 06 F1 | 	add	objptr, #224
008dc     06 5F 62 FC | 	wrlong	local02, objptr
008e0     E0 0C 86 F1 | 	sub	objptr, #224
008e4     14 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008e8                 | ' p4:=@putpixel4
008e8     06 53 02 F6 | 	mov	arg01, objptr
008ec     F0 1A B0 FD | 	call	#__system___make_methodptr
008f0     16 5F 02 F6 | 	mov	local02, result1
008f4     E4 0C 06 F1 | 	add	objptr, #228
008f8     06 5F 62 FC | 	wrlong	local02, objptr
008fc     E4 0C 86 F1 | 	sub	objptr, #228
00900     15 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00904                 | ' p8:=@putpixel8
00904     06 53 02 F6 | 	mov	arg01, objptr
00908     D4 1A B0 FD | 	call	#__system___make_methodptr
0090c     16 5F 02 F6 | 	mov	local02, result1
00910     E8 0C 06 F1 | 	add	objptr, #232
00914     06 5F 62 FC | 	wrlong	local02, objptr
00918     E8 0C 86 F1 | 	sub	objptr, #232
0091c                 | ' 
0091c                 | ' 
0091c                 | ' ' the mode has to be set here to enable computing the buffer length
0091c                 | ' 
0091c                 | ' setmode(mode)
0091c     01 00 00 FF 
00920     30 52 06 F6 | 	mov	arg01, ##560
00924     AC 0D B0 FD | 	call	#_hng030rm_spin2_setmode
00928     40 0C 06 F1 | 	add	objptr, #64
0092c     06 61 02 F6 | 	mov	local03, objptr
00930                 | ' 
00930                 | ' vblank_ptr:=@vblank
00930     34 0C 86 F1 | 	sub	objptr, #52
00934     06 61 62 FC | 	wrlong	local03, objptr
00938     28 0C 06 F1 | 	add	objptr, #40
0093c     06 63 02 F6 | 	mov	local04, objptr
00940                 | ' cursor_ptr:=@cursor_x
00940     24 0C 86 F1 | 	sub	objptr, #36
00944     06 63 62 FC | 	wrlong	local04, objptr
00948     88 0C 06 F1 | 	add	objptr, #136
0094c     06 65 02 F6 | 	mov	local05, objptr
00950                 | ' 
00950                 | ' fontnum_ptr:=@fontnum
00950     78 0C 86 F1 | 	sub	objptr, #120
00954     06 65 62 FC | 	wrlong	local05, objptr
00958                 | ' 
00958                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00958     78 0C 06 F1 | 	add	objptr, #120
0095c     06 01 68 FC | 	wrlong	#0, objptr
00960     1C 0C 06 F1 | 	add	objptr, #28
00964     06 53 02 F6 | 	mov	arg01, objptr
00968     B4 0C 86 F1 | 	sub	objptr, #180
0096c     0F 00 00 FF 
00970     58 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
00974     10 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00978     0F 00 00 FF 
0097c     58 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00980                 | ' bytemove(@colors,@vgacolors,16)
00980     10 56 06 F6 | 	mov	arg03, #16
00984     08 19 B0 FD | 	call	#__system____builtin_memmove
00988                 | ' 
00988                 | ' ' initialize a cursor
00988                 | ' 
00988                 | ' cursor_x:=0
00988     34 0C 06 F1 | 	add	objptr, #52
0098c     06 01 48 FC | 	wrbyte	#0, objptr
00990                 | ' cursor_y:=0
00990     01 0C 06 F1 | 	add	objptr, #1
00994     06 01 48 FC | 	wrbyte	#0, objptr
00998                 | ' cursor_sh:=14
00998     01 0C 06 F1 | 	add	objptr, #1
0099c     06 1D 48 FC | 	wrbyte	#14, objptr
009a0     36 0C 86 F1 | 	sub	objptr, #54
009a4                 | ' 
009a4                 | ' 
009a4                 | ' ' start the cog
009a4                 | ' 
009a4                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
009a4     0F 00 00 FF 
009a8     68 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
009ac     10 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009b0     0F 00 00 FF 
009b4     68 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
009b8     06 57 02 F6 | 	mov	arg03, objptr
009bc     10 52 06 F6 | 	mov	arg01, #16
009c0     28 56 62 FD | 	setq	arg03
009c4     2A 53 F2 FC | 	coginit	arg01, arg02 wc
009c8     01 52 66 C6 |  if_b	neg	arg01, #1
009cc     29 2D 02 F6 | 	mov	result1, arg01
009d0     16 67 02 F6 | 	mov	local06, result1
009d4     28 0C 06 F1 | 	add	objptr, #40
009d8     06 67 62 FC | 	wrlong	local06, objptr
009dc     28 0C 86 F1 | 	sub	objptr, #40
009e0                 | ' waitms(20)
009e0     14 52 06 F6 | 	mov	arg01, #20
009e4     E8 1C B0 FD | 	call	#__system___waitms
009e8                 | ' 
009e8                 | ' ' clear the screen and set the colors to green on black
009e8                 | ' 
009e8                 | ' cls(c_green,c_black)
009e8     C7 52 06 F6 | 	mov	arg01, #199
009ec     00 54 06 F6 | 	mov	arg02, #0
009f0     4C 09 B0 FD | 	call	#_hng030rm_spin2_cls
009f4                 | ' setbordercolor(0,0,128)
009f4     00 52 06 F6 | 	mov	arg01, #0
009f8     00 54 06 F6 | 	mov	arg02, #0
009fc     80 56 06 F6 | 	mov	arg03, #128
00a00     18 09 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a04                 | ' setwritecolors(c_green,c_black)
00a04     00 54 06 F6 | 	mov	arg02, #0
00a08                 | ' 
00a08                 | ' 
00a08                 | ' write_color:=ff
00a08     38 0C 06 F1 | 	add	objptr, #56
00a0c     06 8F 69 FC | 	wrlong	#199, objptr
00a10                 | ' write_background:=bb
00a10     04 0C 06 F1 | 	add	objptr, #4
00a14     06 01 68 FC | 	wrlong	#0, objptr
00a18                 | ' 
00a18                 | ' return cog
00a18     14 0C 86 F1 | 	sub	objptr, #20
00a1c     06 2D 02 FB | 	rdlong	result1, objptr
00a20     28 0C 86 F1 | 	sub	objptr, #40
00a24     00 52 06 F6 | 	mov	arg01, #0
00a28     00 56 06 F6 | 	mov	arg03, #0
00a2c     EC 08 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a30                 | ' v030.start(mode,pin)
00a30                 | ' v030.setbordercolor(0,0,0)
00a30                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a30     06 53 02 F6 | 	mov	arg01, objptr
00a34     11 55 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a38     A4 19 B0 FD | 	call	#__system___make_methodptr
00a3c     00 30 06 F6 | 	mov	result3, #0
00a40     00 2E 06 F6 | 	mov	result2, #0
00a44     16 55 02 F6 | 	mov	arg02, result1
00a48     00 56 06 F6 | 	mov	arg03, #0
00a4c     00 58 06 F6 | 	mov	arg04, #0
00a50     00 52 06 F6 | 	mov	arg01, #0
00a54     AC 20 B0 FD | 	call	#__system___basic_open
00a58     00 2C 06 F6 | 	mov	result1, #0
00a5c     9A 52 06 F6 | 	mov	arg01, #154
00a60     93 54 06 F6 | 	mov	arg02, #147
00a64     D8 08 B0 FD | 	call	#_hng030rm_spin2_cls
00a68     00 2C 06 F6 | 	mov	result1, #0
00a6c                 | ' startvideo 512+48
00a6c                 | ' cls
00a6c                 | ' print "Basic test"
00a6c     00 52 06 F6 | 	mov	arg01, #0
00a70     74 43 B0 FD | 	call	#__system___getiolock_0125
00a74     16 53 02 F6 | 	mov	arg01, result1
00a78     A4 19 B0 FD | 	call	#__system___lockmem
00a7c     00 2C 06 F6 | 	mov	result1, #0
00a80     62 00 00 FF 
00a84     33 54 06 F6 | 	mov	arg02, ##@LR__0835
00a88     00 52 06 F6 | 	mov	arg01, #0
00a8c     00 56 06 F6 | 	mov	arg03, #0
00a90     00 22 B0 FD | 	call	#__system___basic_print_string
00a94     00 52 06 F6 | 	mov	arg01, #0
00a98     0A 54 06 F6 | 	mov	arg02, #10
00a9c     00 56 06 F6 | 	mov	arg03, #0
00aa0     A4 21 B0 FD | 	call	#__system___basic_print_char
00aa4     01 2C 06 F6 | 	mov	result1, #1
00aa8     00 52 06 F6 | 	mov	arg01, #0
00aac     38 43 B0 FD | 	call	#__system___getiolock_0125
00ab0     16 01 68 FC | 	wrlong	#0, result1
00ab4     00 2C 06 F6 | 	mov	result1, #0
00ab8                 | ' print
00ab8     00 52 06 F6 | 	mov	arg01, #0
00abc     28 43 B0 FD | 	call	#__system___getiolock_0125
00ac0     16 53 02 F6 | 	mov	arg01, result1
00ac4     58 19 B0 FD | 	call	#__system___lockmem
00ac8     00 2C 06 F6 | 	mov	result1, #0
00acc     00 52 06 F6 | 	mov	arg01, #0
00ad0     0A 54 06 F6 | 	mov	arg02, #10
00ad4     00 56 06 F6 | 	mov	arg03, #0
00ad8     6C 21 B0 FD | 	call	#__system___basic_print_char
00adc     01 2C 06 F6 | 	mov	result1, #1
00ae0     00 52 06 F6 | 	mov	arg01, #0
00ae4     00 43 B0 FD | 	call	#__system___getiolock_0125
00ae8     16 01 68 FC | 	wrlong	#0, result1
00aec     00 2C 06 F6 | 	mov	result1, #0
00af0                 | ' 
00af0                 | ' print"kwas2"
00af0     00 52 06 F6 | 	mov	arg01, #0
00af4     F0 42 B0 FD | 	call	#__system___getiolock_0125
00af8     16 53 02 F6 | 	mov	arg01, result1
00afc     20 19 B0 FD | 	call	#__system___lockmem
00b00     00 2C 06 F6 | 	mov	result1, #0
00b04     62 00 00 FF 
00b08     3E 54 06 F6 | 	mov	arg02, ##@LR__0836
00b0c     00 52 06 F6 | 	mov	arg01, #0
00b10     00 56 06 F6 | 	mov	arg03, #0
00b14     7C 21 B0 FD | 	call	#__system___basic_print_string
00b18     00 52 06 F6 | 	mov	arg01, #0
00b1c     0A 54 06 F6 | 	mov	arg02, #10
00b20     00 56 06 F6 | 	mov	arg03, #0
00b24     20 21 B0 FD | 	call	#__system___basic_print_char
00b28     01 2C 06 F6 | 	mov	result1, #1
00b2c     00 52 06 F6 | 	mov	arg01, #0
00b30     B4 42 B0 FD | 	call	#__system___getiolock_0125
00b34     16 01 68 FC | 	wrlong	#0, result1
00b38     00 2C 06 F6 | 	mov	result1, #0
00b3c                 | ' print hex$(1234)
00b3c     00 52 06 F6 | 	mov	arg01, #0
00b40     A4 42 B0 FD | 	call	#__system___getiolock_0125
00b44     16 53 02 F6 | 	mov	arg01, result1
00b48     D4 18 B0 FD | 	call	#__system___lockmem
00b4c     00 2C 06 F6 | 	mov	result1, #0
00b50     00 68 06 F6 | 	mov	local07, #0
00b54     00 54 06 F6 | 	mov	arg02, #0
00b58     10 56 06 F6 | 	mov	arg03, #16
00b5c     02 00 00 FF 
00b60     D2 6A 06 F6 | 	mov	local08, ##1234
00b64     00 6C 0E F6 | 	mov	local09, #0 wz
00b68     01 6C 06 F6 | 	mov	local09, #1
00b6c     10 6E 06 F6 | 	mov	local10, #16
00b70     01 70 06 F6 | 	mov	local11, #1
00b74     BC F4 9F FE | 	loc	pa,	#(@LR__0002-@LR__0001)
00b78     93 00 A0 FD | 	call	#FCACHE_LOAD_
00b7c                 | LR__0001
00b7c     00 72 06 F6 | 	mov	local12, #0
00b80     35 6F 1A F2 | 	cmp	local10, local08 wcz
00b84     01 72 66 E6 |  if_be	neg	local12, #1
00b88     00 74 06 F6 | 	mov	local13, #0
00b8c     37 71 1A F2 | 	cmp	local11, local10 wcz
00b90     01 74 66 C6 |  if_b	neg	local13, #1
00b94     3A 73 CA F7 | 	test	local12, local13 wz
00b98     14 00 90 AD |  if_e	jmp	#LR__0003
00b9c     37 71 02 F6 | 	mov	local11, local10
00ba0     10 6E 06 FD | 	qmul	local10, #16
00ba4     18 6E 62 FD | 	getqx	local10
00ba8     01 6C 06 F1 | 	add	local09, #1
00bac     CC FF 9F FD | 	jmp	#LR__0001
00bb0                 | LR__0002
00bb0                 | LR__0003
00bb0     20 6C 3E F3 | 	fle	local09, #32 wcz
00bb4     36 53 02 F6 | 	mov	arg01, local09
00bb8     02 52 06 F1 | 	add	arg01, #2
00bbc     E8 2A B0 FD | 	call	#__system___gc_alloc_managed
00bc0     16 77 02 F6 | 	mov	local14, result1
00bc4     36 79 02 F6 | 	mov	local15, local09
00bc8     3B 79 02 F1 | 	add	local15, local14
00bcc     3C 01 48 FC | 	wrbyte	#0, local15
00bd0     68 F4 9F FE | 	loc	pa,	#(@LR__0005-@LR__0004)
00bd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
00bd8                 | LR__0004
00bd8     00 6C 1E F2 | 	cmp	local09, #0 wcz
00bdc     34 00 90 ED |  if_be	jmp	#LR__0006
00be0     01 6C 86 F1 | 	sub	local09, #1
00be4     35 FD 02 F6 | 	mov	muldiva_, local08
00be8     10 FE 06 F6 | 	mov	muldivb_, #16
00bec     CC 00 A0 FD | 	call	#unsdivide_
00bf0     7E 7B 02 F6 | 	mov	local16, muldiva_
00bf4     7F 6B 02 F6 | 	mov	local08, muldivb_
00bf8     0A 7A 1E F2 | 	cmp	local16, #10 wcz
00bfc     30 7A 06 C1 |  if_b	add	local16, #48
00c00     37 7A 06 31 |  if_ae	add	local16, #55
00c04     36 7D 02 F6 | 	mov	local17, local09
00c08     3B 7D 02 F1 | 	add	local17, local14
00c0c     3E 7B 42 FC | 	wrbyte	local16, local17
00c10     C4 FF 9F FD | 	jmp	#LR__0004
00c14                 | LR__0005
00c14                 | LR__0006
00c14     3B 2D 02 F6 | 	mov	result1, local14
00c18     16 55 02 F6 | 	mov	arg02, result1
00c1c     34 53 02 F6 | 	mov	arg01, local07
00c20     00 56 06 F6 | 	mov	arg03, #0
00c24     6C 20 B0 FD | 	call	#__system___basic_print_string
00c28     00 52 06 F6 | 	mov	arg01, #0
00c2c     0A 54 06 F6 | 	mov	arg02, #10
00c30     00 56 06 F6 | 	mov	arg03, #0
00c34     10 20 B0 FD | 	call	#__system___basic_print_char
00c38     01 2C 06 F6 | 	mov	result1, #1
00c3c     00 52 06 F6 | 	mov	arg01, #0
00c40     A4 41 B0 FD | 	call	#__system___getiolock_0125
00c44     16 01 68 FC | 	wrlong	#0, result1
00c48     00 2C 06 F6 | 	mov	result1, #0
00c4c     62 00 00 FF 
00c50     44 7E 06 F6 | 	mov	local18, ##@LR__0837
00c54     02 00 00 FF 
00c58     80 1C 06 F1 | 	add	ptr___system__dat__, ##1152
00c5c     3A 5A 06 F6 | 	mov	arg05, #58
00c60     00 52 06 F6 | 	mov	arg01, #0
00c64     3D 54 06 F6 | 	mov	arg02, #61
00c68     3C 56 06 F6 | 	mov	arg03, #60
00c6c     3B 58 06 F6 | 	mov	arg04, #59
00c70     06 81 02 F6 | 	mov	local19, objptr
00c74     0E 0D 02 F6 | 	mov	objptr, ptr___system__dat__
00c78     02 00 00 FF 
00c7c     80 1C 86 F1 | 	sub	ptr___system__dat__, ##1152
00c80     A0 4F B0 FD | 	call	#_ff_cc_disk_setpins
00c84     40 0D 02 F6 | 	mov	objptr, local19
00c88     16 83 0A F6 | 	mov	local20, result1 wz
00c8c     34 00 90 5D |  if_ne	jmp	#LR__0007
00c90     02 00 00 FF 
00c94     80 1C 06 F1 | 	add	ptr___system__dat__, ##1152
00c98     0E 53 02 F6 | 	mov	arg01, ptr___system__dat__
00c9c     62 00 00 FF 
00ca0     0C 54 06 F6 | 	mov	arg02, ##@LR__0830
00ca4     00 56 06 F6 | 	mov	arg03, #0
00ca8     06 85 02 F6 | 	mov	local21, objptr
00cac     0E 0D 02 F6 | 	mov	objptr, ptr___system__dat__
00cb0     02 00 00 FF 
00cb4     80 1C 86 F1 | 	sub	ptr___system__dat__, ##1152
00cb8     F8 74 B0 FD | 	call	#_ff_cc_f_mount
00cbc     42 0D 02 F6 | 	mov	objptr, local21
00cc0     16 83 02 F6 | 	mov	local20, result1
00cc4                 | LR__0007
00cc4     00 82 0E F2 | 	cmp	local20, #0 wz
00cc8     20 00 90 AD |  if_e	jmp	#LR__0008
00ccc     41 53 6A F6 | 	neg	arg01, local20 wz
00cd0     01 00 00 FF 
00cd4     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
00cd8     0E 53 62 FC | 	wrlong	arg01, ptr___system__dat__
00cdc     01 00 00 FF 
00ce0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
00ce4     00 2C 06 F6 | 	mov	result1, #0
00ce8     0C 00 90 FD | 	jmp	#LR__0009
00cec                 | LR__0008
00cec     B4 1E 06 F1 | 	add	ptr__ff_cc_dat__, #180
00cf0     0F 2D 02 F6 | 	mov	result1, ptr__ff_cc_dat__
00cf4     B4 1E 86 F1 | 	sub	ptr__ff_cc_dat__, #180
00cf8                 | ' get_vfs()
00cf8                 | ' {
00cf8                 | '     return &fat_vfs;
00cf8                 | LR__0009
00cf8     16 55 02 F6 | 	mov	arg02, result1
00cfc     3F 53 02 F6 | 	mov	arg01, local18
00d00     9C 1A B0 FD | 	call	#__system___mount
00d04                 | ' 
00d04                 | ' mount "/sd", _vfs_open_sdcard()
00d04                 | ' open "/sd/testbas.txt" for input as #3
00d04     62 00 00 FF 
00d08     48 54 06 F6 | 	mov	arg02, ##@LR__0838
00d0c     03 52 06 F6 | 	mov	arg01, #3
00d10     00 56 06 F6 | 	mov	arg03, #0
00d14     A0 1E B0 FD | 	call	#__system___basic_open_string
00d18                 | ' input #3,s
00d18     03 52 06 F6 | 	mov	arg01, #3
00d1c     FC 17 B0 FD | 	call	#__system___basic_read_line
00d20     16 53 02 F6 | 	mov	arg01, result1
00d24     6C 19 B0 FD | 	call	#__system___basic_get_integer
00d28     16 69 02 F6 | 	mov	local07, result1
00d2c     F0 0C 06 F1 | 	add	objptr, #240
00d30     06 69 62 FC | 	wrlong	local07, objptr
00d34     F0 0C 86 F1 | 	sub	objptr, #240
00d38                 | ' print s
00d38     00 52 06 F6 | 	mov	arg01, #0
00d3c     A8 40 B0 FD | 	call	#__system___getiolock_0125
00d40     16 53 02 F6 | 	mov	arg01, result1
00d44     D8 16 B0 FD | 	call	#__system___lockmem
00d48     00 2C 06 F6 | 	mov	result1, #0
00d4c     F0 0C 06 F1 | 	add	objptr, #240
00d50     06 55 02 FB | 	rdlong	arg02, objptr
00d54     F0 0C 86 F1 | 	sub	objptr, #240
00d58     00 52 06 F6 | 	mov	arg01, #0
00d5c     00 56 06 F6 | 	mov	arg03, #0
00d60     0A 58 06 F6 | 	mov	arg04, #10
00d64     74 1F B0 FD | 	call	#__system___basic_print_integer
00d68     00 52 06 F6 | 	mov	arg01, #0
00d6c     0A 54 06 F6 | 	mov	arg02, #10
00d70     00 56 06 F6 | 	mov	arg03, #0
00d74     D0 1E B0 FD | 	call	#__system___basic_print_char
00d78     01 2C 06 F6 | 	mov	result1, #1
00d7c     00 52 06 F6 | 	mov	arg01, #0
00d80     64 40 B0 FD | 	call	#__system___getiolock_0125
00d84     16 01 68 FC | 	wrlong	#0, result1
00d88     00 2C 06 F6 | 	mov	result1, #0
00d8c                 | ' input #3,s
00d8c     03 52 06 F6 | 	mov	arg01, #3
00d90     88 17 B0 FD | 	call	#__system___basic_read_line
00d94     16 53 02 F6 | 	mov	arg01, result1
00d98     F8 18 B0 FD | 	call	#__system___basic_get_integer
00d9c     16 69 02 F6 | 	mov	local07, result1
00da0     F0 0C 06 F1 | 	add	objptr, #240
00da4     06 69 62 FC | 	wrlong	local07, objptr
00da8     F0 0C 86 F1 | 	sub	objptr, #240
00dac                 | ' print s
00dac     00 52 06 F6 | 	mov	arg01, #0
00db0     34 40 B0 FD | 	call	#__system___getiolock_0125
00db4     16 53 02 F6 | 	mov	arg01, result1
00db8     64 16 B0 FD | 	call	#__system___lockmem
00dbc     00 2C 06 F6 | 	mov	result1, #0
00dc0     F0 0C 06 F1 | 	add	objptr, #240
00dc4     06 55 02 FB | 	rdlong	arg02, objptr
00dc8     F0 0C 86 F1 | 	sub	objptr, #240
00dcc     00 52 06 F6 | 	mov	arg01, #0
00dd0     00 56 06 F6 | 	mov	arg03, #0
00dd4     0A 58 06 F6 | 	mov	arg04, #10
00dd8     00 1F B0 FD | 	call	#__system___basic_print_integer
00ddc     00 52 06 F6 | 	mov	arg01, #0
00de0     0A 54 06 F6 | 	mov	arg02, #10
00de4     00 56 06 F6 | 	mov	arg03, #0
00de8     5C 1E B0 FD | 	call	#__system___basic_print_char
00dec     01 2C 06 F6 | 	mov	result1, #1
00df0     00 52 06 F6 | 	mov	arg01, #0
00df4     F0 3F B0 FD | 	call	#__system___getiolock_0125
00df8     16 01 68 FC | 	wrlong	#0, result1
00dfc     00 2C 06 F6 | 	mov	result1, #0
00e00                 | ' input #3,s
00e00     03 52 06 F6 | 	mov	arg01, #3
00e04     14 17 B0 FD | 	call	#__system___basic_read_line
00e08     16 53 02 F6 | 	mov	arg01, result1
00e0c     84 18 B0 FD | 	call	#__system___basic_get_integer
00e10     16 69 02 F6 | 	mov	local07, result1
00e14     F0 0C 06 F1 | 	add	objptr, #240
00e18     06 69 62 FC | 	wrlong	local07, objptr
00e1c     F0 0C 86 F1 | 	sub	objptr, #240
00e20                 | ' print s
00e20     00 52 06 F6 | 	mov	arg01, #0
00e24     C0 3F B0 FD | 	call	#__system___getiolock_0125
00e28     16 53 02 F6 | 	mov	arg01, result1
00e2c     F0 15 B0 FD | 	call	#__system___lockmem
00e30     00 2C 06 F6 | 	mov	result1, #0
00e34     F0 0C 06 F1 | 	add	objptr, #240
00e38     06 55 02 FB | 	rdlong	arg02, objptr
00e3c     F0 0C 86 F1 | 	sub	objptr, #240
00e40     00 52 06 F6 | 	mov	arg01, #0
00e44     00 56 06 F6 | 	mov	arg03, #0
00e48     0A 58 06 F6 | 	mov	arg04, #10
00e4c     8C 1E B0 FD | 	call	#__system___basic_print_integer
00e50     00 52 06 F6 | 	mov	arg01, #0
00e54     0A 54 06 F6 | 	mov	arg02, #10
00e58     00 56 06 F6 | 	mov	arg03, #0
00e5c     E8 1D B0 FD | 	call	#__system___basic_print_char
00e60     01 2C 06 F6 | 	mov	result1, #1
00e64     00 52 06 F6 | 	mov	arg01, #0
00e68     7C 3F B0 FD | 	call	#__system___getiolock_0125
00e6c     16 01 68 FC | 	wrlong	#0, result1
00e70     00 2C 06 F6 | 	mov	result1, #0
00e74                 | ' close #3
00e74     03 52 06 F6 | 	mov	arg01, #3
00e78     5C 39 B0 FD | 	call	#__system__close
00e7c                 | ' open "/sd/testbas.txt" for input as #3
00e7c     62 00 00 FF 
00e80     58 54 06 F6 | 	mov	arg02, ##@LR__0839
00e84     03 52 06 F6 | 	mov	arg01, #3
00e88     00 56 06 F6 | 	mov	arg03, #0
00e8c     28 1D B0 FD | 	call	#__system___basic_open_string
00e90                 | ' input #3,s
00e90     03 52 06 F6 | 	mov	arg01, #3
00e94     84 16 B0 FD | 	call	#__system___basic_read_line
00e98     16 53 02 F6 | 	mov	arg01, result1
00e9c     F4 17 B0 FD | 	call	#__system___basic_get_integer
00ea0     16 69 02 F6 | 	mov	local07, result1
00ea4     F0 0C 06 F1 | 	add	objptr, #240
00ea8     06 69 62 FC | 	wrlong	local07, objptr
00eac     F0 0C 86 F1 | 	sub	objptr, #240
00eb0                 | ' print s
00eb0     00 52 06 F6 | 	mov	arg01, #0
00eb4     30 3F B0 FD | 	call	#__system___getiolock_0125
00eb8     16 53 02 F6 | 	mov	arg01, result1
00ebc     60 15 B0 FD | 	call	#__system___lockmem
00ec0     00 2C 06 F6 | 	mov	result1, #0
00ec4     F0 0C 06 F1 | 	add	objptr, #240
00ec8     06 55 02 FB | 	rdlong	arg02, objptr
00ecc     F0 0C 86 F1 | 	sub	objptr, #240
00ed0     00 52 06 F6 | 	mov	arg01, #0
00ed4     00 56 06 F6 | 	mov	arg03, #0
00ed8     0A 58 06 F6 | 	mov	arg04, #10
00edc     FC 1D B0 FD | 	call	#__system___basic_print_integer
00ee0     00 52 06 F6 | 	mov	arg01, #0
00ee4     0A 54 06 F6 | 	mov	arg02, #10
00ee8     00 56 06 F6 | 	mov	arg03, #0
00eec     58 1D B0 FD | 	call	#__system___basic_print_char
00ef0     01 2C 06 F6 | 	mov	result1, #1
00ef4     00 52 06 F6 | 	mov	arg01, #0
00ef8     EC 3E B0 FD | 	call	#__system___getiolock_0125
00efc     16 01 68 FC | 	wrlong	#0, result1
00f00     00 2C 06 F6 | 	mov	result1, #0
00f04                 | ' input #3,s
00f04     03 52 06 F6 | 	mov	arg01, #3
00f08     10 16 B0 FD | 	call	#__system___basic_read_line
00f0c     16 53 02 F6 | 	mov	arg01, result1
00f10     80 17 B0 FD | 	call	#__system___basic_get_integer
00f14     16 69 02 F6 | 	mov	local07, result1
00f18     F0 0C 06 F1 | 	add	objptr, #240
00f1c     06 69 62 FC | 	wrlong	local07, objptr
00f20     F0 0C 86 F1 | 	sub	objptr, #240
00f24                 | ' print s
00f24     00 52 06 F6 | 	mov	arg01, #0
00f28     BC 3E B0 FD | 	call	#__system___getiolock_0125
00f2c     16 53 02 F6 | 	mov	arg01, result1
00f30     EC 14 B0 FD | 	call	#__system___lockmem
00f34     00 2C 06 F6 | 	mov	result1, #0
00f38     F0 0C 06 F1 | 	add	objptr, #240
00f3c     06 55 02 FB | 	rdlong	arg02, objptr
00f40     F0 0C 86 F1 | 	sub	objptr, #240
00f44     00 52 06 F6 | 	mov	arg01, #0
00f48     00 56 06 F6 | 	mov	arg03, #0
00f4c     0A 58 06 F6 | 	mov	arg04, #10
00f50     88 1D B0 FD | 	call	#__system___basic_print_integer
00f54     00 52 06 F6 | 	mov	arg01, #0
00f58     0A 54 06 F6 | 	mov	arg02, #10
00f5c     00 56 06 F6 | 	mov	arg03, #0
00f60     E4 1C B0 FD | 	call	#__system___basic_print_char
00f64     01 2C 06 F6 | 	mov	result1, #1
00f68     00 52 06 F6 | 	mov	arg01, #0
00f6c     78 3E B0 FD | 	call	#__system___getiolock_0125
00f70     16 01 68 FC | 	wrlong	#0, result1
00f74     00 2C 06 F6 | 	mov	result1, #0
00f78                 | ' input #3,s
00f78     03 52 06 F6 | 	mov	arg01, #3
00f7c     9C 15 B0 FD | 	call	#__system___basic_read_line
00f80     16 53 02 F6 | 	mov	arg01, result1
00f84     0C 17 B0 FD | 	call	#__system___basic_get_integer
00f88     16 69 02 F6 | 	mov	local07, result1
00f8c     F0 0C 06 F1 | 	add	objptr, #240
00f90     06 69 62 FC | 	wrlong	local07, objptr
00f94     F0 0C 86 F1 | 	sub	objptr, #240
00f98                 | ' print s
00f98     00 52 06 F6 | 	mov	arg01, #0
00f9c     48 3E B0 FD | 	call	#__system___getiolock_0125
00fa0     16 53 02 F6 | 	mov	arg01, result1
00fa4     78 14 B0 FD | 	call	#__system___lockmem
00fa8     00 2C 06 F6 | 	mov	result1, #0
00fac     F0 0C 06 F1 | 	add	objptr, #240
00fb0     06 55 02 FB | 	rdlong	arg02, objptr
00fb4     F0 0C 86 F1 | 	sub	objptr, #240
00fb8     00 52 06 F6 | 	mov	arg01, #0
00fbc     00 56 06 F6 | 	mov	arg03, #0
00fc0     0A 58 06 F6 | 	mov	arg04, #10
00fc4     14 1D B0 FD | 	call	#__system___basic_print_integer
00fc8     00 52 06 F6 | 	mov	arg01, #0
00fcc     0A 54 06 F6 | 	mov	arg02, #10
00fd0     00 56 06 F6 | 	mov	arg03, #0
00fd4     70 1C B0 FD | 	call	#__system___basic_print_char
00fd8     01 2C 06 F6 | 	mov	result1, #1
00fdc     00 52 06 F6 | 	mov	arg01, #0
00fe0     04 3E B0 FD | 	call	#__system___getiolock_0125
00fe4     16 01 68 FC | 	wrlong	#0, result1
00fe8     00 2C 06 F6 | 	mov	result1, #0
00fec                 | ' close #3
00fec     03 52 06 F6 | 	mov	arg01, #3
00ff0     E4 37 B0 FD | 	call	#__system__close
00ff4     AF F0 03 F6 | 	mov	ptra, fp
00ff8     BF 00 A0 FD | 	call	#popregs_
00ffc                 | _program_ret
00ffc     2D 00 64 FD | 	ret
01000                 | 
01000                 | ' 
01000                 | ' 
01000                 | ' ''---------- putpixel - put a pixel on the screen
01000                 | ' 
01000                 | ' pub putpixel1(x,y,c) |byte b
01000                 | _hng030rm_spin2_putpixel1
01000                 | ' 
01000                 | ' 
01000                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01000     00 32 06 F6 | 	mov	_var01, #0
01004     00 52 5E F2 | 	cmps	arg01, #0 wcz
01008     01 32 66 36 |  if_ae	neg	_var01, #1
0100c     00 34 06 F6 | 	mov	_var02, #0
01010     90 0C 06 F1 | 	add	objptr, #144
01014     06 37 02 FB | 	rdlong	_var03, objptr
01018     05 36 66 F0 | 	shl	_var03, #5
0101c     1B 53 5A F2 | 	cmps	arg01, _var03 wcz
01020     01 34 66 C6 |  if_b	neg	_var02, #1
01024     1A 33 02 F5 | 	and	_var01, _var02
01028     00 38 06 F6 | 	mov	_var04, #0
0102c     00 54 5E F2 | 	cmps	arg02, #0 wcz
01030     01 38 66 36 |  if_ae	neg	_var04, #1
01034     1C 33 02 F5 | 	and	_var01, _var04
01038     00 3A 06 F6 | 	mov	_var05, #0
0103c     04 0C 06 F1 | 	add	objptr, #4
01040     06 3D 02 FB | 	rdlong	_var06, objptr
01044     94 0C 86 F1 | 	sub	objptr, #148
01048     1E 55 5A F2 | 	cmps	arg02, _var06 wcz
0104c     01 3A 66 C6 |  if_b	neg	_var05, #1
01050     1D 33 CA F7 | 	test	_var01, _var05 wz
01054     8C 00 90 AD |  if_e	jmp	#LR__0012
01058     90 0C 06 F1 | 	add	objptr, #144
0105c     06 3F 02 FB | 	rdlong	_var07, objptr
01060     90 0C 86 F1 | 	sub	objptr, #144
01064     02 3E 66 F0 | 	shl	_var07, #2
01068     2A 3F 02 FD | 	qmul	_var07, arg02
0106c     18 40 62 FD | 	getqx	_var08
01070     06 43 02 FB | 	rdlong	_var09, objptr
01074     20 43 02 F1 | 	add	_var09, _var08
01078     29 45 02 F6 | 	mov	_var10, arg01
0107c     03 44 46 F0 | 	shr	_var10, #3
01080     22 43 02 F1 | 	add	_var09, _var10
01084                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01084     21 47 C2 FA | 	rdbyte	_var11, _var09
01088                 | '     if (c==0)
01088     00 56 0E F2 | 	cmp	arg03, #0 wz
0108c     18 00 90 5D |  if_ne	jmp	#LR__0010
01090     29 33 52 F6 | 	abs	_var01, arg01 wc
01094     07 32 06 F5 | 	and	_var01, #7
01098     19 33 62 C6 |  if_b	neg	_var01, _var01
0109c     19 49 C2 F9 | 	decod	_var12, _var01
010a0                 | '       b:=b & !(1<<(x//8))
010a0     24 47 22 F5 | 	andn	_var11, _var12
010a4                 | '     else
010a4     14 00 90 FD | 	jmp	#LR__0011
010a8                 | LR__0010
010a8     29 33 52 F6 | 	abs	_var01, arg01 wc
010ac     07 32 06 F5 | 	and	_var01, #7
010b0     19 33 62 C6 |  if_b	neg	_var01, _var01
010b4     19 4B C2 F9 | 	decod	_var13, _var01
010b8                 | '       b:=b |(1<<(x//8))
010b8     25 47 42 F5 | 	or	_var11, _var13
010bc                 | LR__0011
010bc     90 0C 06 F1 | 	add	objptr, #144
010c0     06 4D 02 FB | 	rdlong	_var14, objptr
010c4     90 0C 86 F1 | 	sub	objptr, #144
010c8     02 4C 66 F0 | 	shl	_var14, #2
010cc     2A 4D 02 FD | 	qmul	_var14, arg02
010d0     18 4E 62 FD | 	getqx	_var15
010d4     06 51 02 FB | 	rdlong	_var16, objptr
010d8     27 51 02 F1 | 	add	_var16, _var15
010dc     22 51 02 F1 | 	add	_var16, _var10
010e0                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
010e0     28 47 42 FC | 	wrbyte	_var11, _var16
010e4                 | LR__0012
010e4                 | _hng030rm_spin2_putpixel1_ret
010e4     2D 00 64 FD | 	ret
010e8                 | 
010e8                 | ' 
010e8                 | ' 
010e8                 | ' pub putpixel2(x,y,c) |byte b
010e8                 | _hng030rm_spin2_putpixel2
010e8                 | ' 
010e8                 | ' 
010e8                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
010e8     00 32 06 F6 | 	mov	_var01, #0
010ec     00 52 5E F2 | 	cmps	arg01, #0 wcz
010f0     01 32 66 36 |  if_ae	neg	_var01, #1
010f4     00 34 06 F6 | 	mov	_var02, #0
010f8     90 0C 06 F1 | 	add	objptr, #144
010fc     06 37 02 FB | 	rdlong	_var03, objptr
01100     04 36 66 F0 | 	shl	_var03, #4
01104     1B 53 5A F2 | 	cmps	arg01, _var03 wcz
01108     01 34 66 C6 |  if_b	neg	_var02, #1
0110c     1A 33 02 F5 | 	and	_var01, _var02
01110     00 38 06 F6 | 	mov	_var04, #0
01114     00 54 5E F2 | 	cmps	arg02, #0 wcz
01118     01 38 66 36 |  if_ae	neg	_var04, #1
0111c     1C 33 02 F5 | 	and	_var01, _var04
01120     00 3A 06 F6 | 	mov	_var05, #0
01124     04 0C 06 F1 | 	add	objptr, #4
01128     06 3D 02 FB | 	rdlong	_var06, objptr
0112c     94 0C 86 F1 | 	sub	objptr, #148
01130     1E 55 5A F2 | 	cmps	arg02, _var06 wcz
01134     01 3A 66 C6 |  if_b	neg	_var05, #1
01138     1D 33 CA F7 | 	test	_var01, _var05 wz
0113c     7C 00 90 AD |  if_e	jmp	#LR__0013
01140     90 0C 06 F1 | 	add	objptr, #144
01144     06 3F 02 FB | 	rdlong	_var07, objptr
01148     90 0C 86 F1 | 	sub	objptr, #144
0114c     02 3E 66 F0 | 	shl	_var07, #2
01150     2A 3F 02 FD | 	qmul	_var07, arg02
01154     18 40 62 FD | 	getqx	_var08
01158     06 43 02 FB | 	rdlong	_var09, objptr
0115c     20 43 02 F1 | 	add	_var09, _var08
01160     29 45 02 F6 | 	mov	_var10, arg01
01164     02 44 46 F0 | 	shr	_var10, #2
01168     22 43 02 F1 | 	add	_var09, _var10
0116c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
0116c     21 47 C2 FA | 	rdbyte	_var11, _var09
01170     29 33 52 F6 | 	abs	_var01, arg01 wc
01174     03 32 06 F5 | 	and	_var01, #3
01178     19 33 62 C6 |  if_b	neg	_var01, _var01
0117c     01 32 66 F0 | 	shl	_var01, #1
01180     03 48 06 F6 | 	mov	_var12, #3
01184     19 49 62 F0 | 	shl	_var12, _var01
01188                 | '     b:=b & !(%11<<((x//4)<<1))
01188     24 47 22 F5 | 	andn	_var11, _var12
0118c     19 57 62 F0 | 	shl	arg03, _var01
01190                 | '     b:=b |(c<<((x//4)<<1))
01190     2B 47 42 F5 | 	or	_var11, arg03
01194     90 0C 06 F1 | 	add	objptr, #144
01198     06 4B 02 FB | 	rdlong	_var13, objptr
0119c     90 0C 86 F1 | 	sub	objptr, #144
011a0     02 4A 66 F0 | 	shl	_var13, #2
011a4     2A 4B 02 FD | 	qmul	_var13, arg02
011a8     18 4C 62 FD | 	getqx	_var14
011ac     06 4F 02 FB | 	rdlong	_var15, objptr
011b0     26 4F 02 F1 | 	add	_var15, _var14
011b4     22 4F 02 F1 | 	add	_var15, _var10
011b8                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
011b8     27 47 42 FC | 	wrbyte	_var11, _var15
011bc                 | LR__0013
011bc                 | _hng030rm_spin2_putpixel2_ret
011bc     2D 00 64 FD | 	ret
011c0                 | 
011c0                 | ' 
011c0                 | ' 
011c0                 | ' pub putpixel4(x,y,c) |byte b
011c0                 | _hng030rm_spin2_putpixel4
011c0                 | ' 
011c0                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
011c0     00 32 06 F6 | 	mov	_var01, #0
011c4     00 52 5E F2 | 	cmps	arg01, #0 wcz
011c8     01 32 66 36 |  if_ae	neg	_var01, #1
011cc     00 34 06 F6 | 	mov	_var02, #0
011d0     90 0C 06 F1 | 	add	objptr, #144
011d4     06 37 02 FB | 	rdlong	_var03, objptr
011d8     04 36 66 F0 | 	shl	_var03, #4
011dc     1B 53 5A F2 | 	cmps	arg01, _var03 wcz
011e0     01 34 66 C6 |  if_b	neg	_var02, #1
011e4     1A 33 02 F5 | 	and	_var01, _var02
011e8     00 38 06 F6 | 	mov	_var04, #0
011ec     00 54 5E F2 | 	cmps	arg02, #0 wcz
011f0     01 38 66 36 |  if_ae	neg	_var04, #1
011f4     1C 33 02 F5 | 	and	_var01, _var04
011f8     00 3A 06 F6 | 	mov	_var05, #0
011fc     04 0C 06 F1 | 	add	objptr, #4
01200     06 3D 02 FB | 	rdlong	_var06, objptr
01204     94 0C 86 F1 | 	sub	objptr, #148
01208     1E 55 5A F2 | 	cmps	arg02, _var06 wcz
0120c     01 3A 66 C6 |  if_b	neg	_var05, #1
01210     1D 33 CA F7 | 	test	_var01, _var05 wz
01214     7C 00 90 AD |  if_e	jmp	#LR__0014
01218     90 0C 06 F1 | 	add	objptr, #144
0121c     06 3F 02 FB | 	rdlong	_var07, objptr
01220     90 0C 86 F1 | 	sub	objptr, #144
01224     02 3E 66 F0 | 	shl	_var07, #2
01228     2A 3F 02 FD | 	qmul	_var07, arg02
0122c     18 40 62 FD | 	getqx	_var08
01230     06 43 02 FB | 	rdlong	_var09, objptr
01234     20 43 02 F1 | 	add	_var09, _var08
01238     29 45 02 F6 | 	mov	_var10, arg01
0123c     01 44 46 F0 | 	shr	_var10, #1
01240     22 43 02 F1 | 	add	_var09, _var10
01244                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01244     21 47 C2 FA | 	rdbyte	_var11, _var09
01248     29 33 52 F6 | 	abs	_var01, arg01 wc
0124c     01 32 06 F5 | 	and	_var01, #1
01250     19 33 62 C6 |  if_b	neg	_var01, _var01
01254     02 32 66 F0 | 	shl	_var01, #2
01258     0F 48 06 F6 | 	mov	_var12, #15
0125c     19 49 62 F0 | 	shl	_var12, _var01
01260                 | '     b:=b & !(%1111<<((x//2)<<2))
01260     24 47 22 F5 | 	andn	_var11, _var12
01264     19 57 62 F0 | 	shl	arg03, _var01
01268                 | '     b:=b |(c<<((x//2)<<2))
01268     2B 47 42 F5 | 	or	_var11, arg03
0126c     90 0C 06 F1 | 	add	objptr, #144
01270     06 4B 02 FB | 	rdlong	_var13, objptr
01274     90 0C 86 F1 | 	sub	objptr, #144
01278     02 4A 66 F0 | 	shl	_var13, #2
0127c     2A 4B 02 FD | 	qmul	_var13, arg02
01280     18 4C 62 FD | 	getqx	_var14
01284     06 4F 02 FB | 	rdlong	_var15, objptr
01288     26 4F 02 F1 | 	add	_var15, _var14
0128c     22 4F 02 F1 | 	add	_var15, _var10
01290                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01290     27 47 42 FC | 	wrbyte	_var11, _var15
01294                 | LR__0014
01294                 | _hng030rm_spin2_putpixel4_ret
01294     2D 00 64 FD | 	ret
01298                 | 
01298                 | ' 
01298                 | ' 
01298                 | ' pub putpixel8(x,y,c)
01298                 | _hng030rm_spin2_putpixel8
01298                 | ' 
01298                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01298     00 32 06 F6 | 	mov	_var01, #0
0129c     00 52 5E F2 | 	cmps	arg01, #0 wcz
012a0     01 32 66 36 |  if_ae	neg	_var01, #1
012a4     00 34 06 F6 | 	mov	_var02, #0
012a8     90 0C 06 F1 | 	add	objptr, #144
012ac     06 37 02 FB | 	rdlong	_var03, objptr
012b0     02 36 66 F0 | 	shl	_var03, #2
012b4     1B 53 5A F2 | 	cmps	arg01, _var03 wcz
012b8     01 34 66 C6 |  if_b	neg	_var02, #1
012bc     1A 33 02 F5 | 	and	_var01, _var02
012c0     00 38 06 F6 | 	mov	_var04, #0
012c4     00 54 5E F2 | 	cmps	arg02, #0 wcz
012c8     01 38 66 36 |  if_ae	neg	_var04, #1
012cc     1C 33 02 F5 | 	and	_var01, _var04
012d0     00 3A 06 F6 | 	mov	_var05, #0
012d4     04 0C 06 F1 | 	add	objptr, #4
012d8     06 3D 02 FB | 	rdlong	_var06, objptr
012dc     94 0C 86 F1 | 	sub	objptr, #148
012e0     1E 55 5A F2 | 	cmps	arg02, _var06 wcz
012e4     01 3A 66 C6 |  if_b	neg	_var05, #1
012e8     1D 33 CA F7 | 	test	_var01, _var05 wz
012ec     28 00 90 AD |  if_e	jmp	#LR__0015
012f0     90 0C 06 F1 | 	add	objptr, #144
012f4     06 3F 02 FB | 	rdlong	_var07, objptr
012f8     90 0C 86 F1 | 	sub	objptr, #144
012fc     02 3E 66 F0 | 	shl	_var07, #2
01300     2A 3F 02 FD | 	qmul	_var07, arg02
01304     18 40 62 FD | 	getqx	_var08
01308     06 43 02 FB | 	rdlong	_var09, objptr
0130c     20 43 02 F1 | 	add	_var09, _var08
01310     29 43 02 F1 | 	add	_var09, arg01
01314                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01314     21 57 42 FC | 	wrbyte	arg03, _var09
01318                 | LR__0015
01318                 | _hng030rm_spin2_putpixel8_ret
01318     2D 00 64 FD | 	ret
0131c                 | 
0131c                 | ' 
0131c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
0131c                 | ' 
0131c                 | ' pub setbordercolor(r,g,b) | color
0131c                 | _hng030rm_spin2_setbordercolor
0131c     18 52 66 F0 | 	shl	arg01, #24
01320     10 54 66 F0 | 	shl	arg02, #16
01324     2A 53 02 F1 | 	add	arg01, arg02
01328     08 56 66 F0 | 	shl	arg03, #8
0132c     2B 53 02 F1 | 	add	arg01, arg03
01330                 | ' 
01330                 | ' color:=r<<24+g<<16+b<<8
01330                 | ' bordercolor:=color
01330     2C 0C 06 F1 | 	add	objptr, #44
01334     06 53 62 FC | 	wrlong	arg01, objptr
01338     2C 0C 86 F1 | 	sub	objptr, #44
0133c                 | _hng030rm_spin2_setbordercolor_ret
0133c     2D 00 64 FD | 	ret
01340                 | 
01340                 | ' 
01340                 | ' 
01340                 | ' '*************************************************************************
01340                 | ' '                                                                        *
01340                 | ' '  Text functions                                                        *
01340                 | ' '                                                                        *
01340                 | ' '*************************************************************************
01340                 | ' 
01340                 | ' ''---------- Clear the screen, set its foreground/background color
01340                 | ' 
01340                 | ' pub cls(fc,bc)   :c
01340                 | _hng030rm_spin2_cls
01340     07 5A 05 F6 | 	mov	COUNT_, #7
01344     B0 00 A0 FD | 	call	#pushregs_
01348     29 5D 02 F6 | 	mov	local01, arg01
0134c     2A 5F 02 F6 | 	mov	local02, arg02
01350                 | ' 
01350                 | ' if (graphmode<512)
01350     C4 0C 06 F1 | 	add	objptr, #196
01354     06 61 02 FB | 	rdlong	local03, objptr
01358     C4 0C 86 F1 | 	sub	objptr, #196
0135c     01 00 00 FF 
01360     00 60 5E F2 | 	cmps	local03, ##512 wcz
01364     34 00 90 3D |  if_ae	jmp	#LR__0016
01368     2E 63 02 F6 | 	mov	local04, local01
0136c     18 62 66 F0 | 	shl	local04, #24
01370     2F 65 02 F6 | 	mov	local05, local02
01374     10 64 66 F0 | 	shl	local05, #16
01378     32 63 02 F1 | 	add	local04, local05
0137c     20 62 06 F1 | 	add	local04, #32
01380                 | '   c:=fc<<24+bc<<16+$20
01380                 | '   longfill(buf_ptr,c,buflen)
01380     06 53 02 FB | 	rdlong	arg01, objptr
01384     30 0C 06 F1 | 	add	objptr, #48
01388     06 57 02 FB | 	rdlong	arg03, objptr
0138c     30 0C 86 F1 | 	sub	objptr, #48
01390     31 55 02 F6 | 	mov	arg02, local04
01394     A8 00 A0 FD | 	call	#\builtin_longfill_
01398                 | ' else
01398     AC 00 90 FD | 	jmp	#LR__0022
0139c                 | LR__0016
0139c                 | '   if (graphmode & 48) ==48
0139c     C4 0C 06 F1 | 	add	objptr, #196
013a0     06 61 02 FB | 	rdlong	local03, objptr
013a4     C4 0C 86 F1 | 	sub	objptr, #196
013a8     30 60 06 F5 | 	and	local03, #48
013ac     30 60 0E F2 | 	cmp	local03, #48 wz
013b0                 | '     c:=bc
013b0     2F 63 02 A6 |  if_e	mov	local04, local02
013b4     74 00 90 AD |  if_e	jmp	#LR__0021
013b8                 | '   elseif (graphmode & 48) ==32
013b8     C4 0C 06 F1 | 	add	objptr, #196
013bc     06 61 02 FB | 	rdlong	local03, objptr
013c0     C4 0C 86 F1 | 	sub	objptr, #196
013c4     30 60 06 F5 | 	and	local03, #48
013c8     20 60 0E F2 | 	cmp	local03, #32 wz
013cc     10 00 90 5D |  if_ne	jmp	#LR__0017
013d0     2F 63 02 F6 | 	mov	local04, local02
013d4     04 62 66 F0 | 	shl	local04, #4
013d8     2F 63 02 F1 | 	add	local04, local02
013dc                 | '     c:=bc<<4+bc
013dc     4C 00 90 FD | 	jmp	#LR__0020
013e0                 | LR__0017
013e0                 | '   elseif (graphmode & 48) ==16
013e0     C4 0C 06 F1 | 	add	objptr, #196
013e4     06 61 02 FB | 	rdlong	local03, objptr
013e8     C4 0C 86 F1 | 	sub	objptr, #196
013ec     30 60 06 F5 | 	and	local03, #48
013f0     10 60 0E F2 | 	cmp	local03, #16 wz
013f4     28 00 90 5D |  if_ne	jmp	#LR__0018
013f8     2F 63 02 F6 | 	mov	local04, local02
013fc     06 62 66 F0 | 	shl	local04, #6
01400     2F 67 02 F6 | 	mov	local06, local02
01404     04 66 66 F0 | 	shl	local06, #4
01408     33 63 02 F1 | 	add	local04, local06
0140c     2F 69 02 F6 | 	mov	local07, local02
01410     02 68 66 F0 | 	shl	local07, #2
01414     34 63 02 F1 | 	add	local04, local07
01418     2F 63 02 F1 | 	add	local04, local02
0141c                 | '     c:=bc<<6+bc<<4+bc<<2+bc
0141c                 | '   else
0141c     0C 00 90 FD | 	jmp	#LR__0019
01420                 | LR__0018
01420                 | '     if bc==1
01420     01 5E 0E F2 | 	cmp	local02, #1 wz
01424                 | '       c:=255
01424     FF 62 06 A6 |  if_e	mov	local04, #255
01428                 | '     else
01428                 | '       c:=0
01428     00 62 06 56 |  if_ne	mov	local04, #0
0142c                 | LR__0019
0142c                 | LR__0020
0142c                 | LR__0021
0142c     30 0C 06 F1 | 	add	objptr, #48
01430     06 57 02 FB | 	rdlong	arg03, objptr
01434     30 0C 86 F1 | 	sub	objptr, #48
01438     02 56 66 F0 | 	shl	arg03, #2
0143c                 | '   bytefill(buf_ptr,c,buflen*4)
0143c     06 53 02 FB | 	rdlong	arg01, objptr
01440     31 55 02 F6 | 	mov	arg02, local04
01444     A0 00 A0 FD | 	call	#\builtin_bytefill_
01448                 | LR__0022
01448                 | ' setwritecolors(fc,bc)
01448                 | ' 
01448                 | ' 
01448                 | ' write_color:=ff
01448     38 0C 06 F1 | 	add	objptr, #56
0144c     06 5D 62 FC | 	wrlong	local01, objptr
01450                 | ' write_background:=bb
01450     04 0C 06 F1 | 	add	objptr, #4
01454     06 5F 62 FC | 	wrlong	local02, objptr
01458                 | ' cursor_x:=0
01458     08 0C 86 F1 | 	sub	objptr, #8
0145c     06 01 48 FC | 	wrbyte	#0, objptr
01460                 | ' cursor_y:=0
01460     01 0C 06 F1 | 	add	objptr, #1
01464     06 01 48 FC | 	wrbyte	#0, objptr
01468     35 0C 86 F1 | 	sub	objptr, #53
0146c     31 2D 02 F6 | 	mov	result1, local04
01470     AF F0 03 F6 | 	mov	ptra, fp
01474     BF 00 A0 FD | 	call	#popregs_
01478                 | _hng030rm_spin2_cls_ret
01478     2D 00 64 FD | 	ret
0147c                 | 
0147c                 | ' 
0147c                 | ' ''---------- Output a char at the cursor position, move the cursor
0147c                 | ' 
0147c                 | ' pub putchar(achar) | c,x,y
0147c                 | _hng030rm_spin2_putchar
0147c     12 5A 05 F6 | 	mov	COUNT_, #18
01480     B0 00 A0 FD | 	call	#pushregs_
01484     29 5D 02 F6 | 	mov	local01, arg01
01488                 | ' 
01488                 | ' if achar==10
01488     0A 5C 0E F2 | 	cmp	local01, #10 wz
0148c     58 00 90 5D |  if_ne	jmp	#LR__0023
01490                 | '   crlf()
01490                 | ' 
01490                 | ' cursor_x:=0
01490     34 0C 06 F1 | 	add	objptr, #52
01494     06 01 48 FC | 	wrbyte	#0, objptr
01498                 | ' cursor_y+=1
01498     01 0C 06 F1 | 	add	objptr, #1
0149c     06 5F C2 FA | 	rdbyte	local02, objptr
014a0     01 5E 06 F1 | 	add	local02, #1
014a4     06 5F 42 FC | 	wrbyte	local02, objptr
014a8                 | ' if cursor_y>lines-1
014a8     5F 0C 06 F1 | 	add	objptr, #95
014ac     06 5F 02 FB | 	rdlong	local02, objptr
014b0     01 5E 86 F1 | 	sub	local02, #1
014b4     5F 0C 86 F1 | 	sub	objptr, #95
014b8     06 61 C2 FA | 	rdbyte	local03, objptr
014bc     35 0C 86 F1 | 	sub	objptr, #53
014c0     2F 61 5A F2 | 	cmps	local03, local02 wcz
014c4     38 01 90 ED |  if_be	jmp	#LR__0026
014c8                 | '   scrollup()
014c8     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
014cc     94 0C 06 F1 | 	add	objptr, #148
014d0     06 63 02 FB | 	rdlong	local04, objptr
014d4     01 62 86 F1 | 	sub	local04, #1
014d8                 | '   cursor_y:=lines-1
014d8     5F 0C 86 F1 | 	sub	objptr, #95
014dc     06 63 42 FC | 	wrbyte	local04, objptr
014e0     35 0C 86 F1 | 	sub	objptr, #53
014e4                 | ' else  
014e4     18 01 90 FD | 	jmp	#LR__0026
014e8                 | LR__0023
014e8                 | '   x:=cursor_x
014e8     34 0C 06 F1 | 	add	objptr, #52
014ec     06 65 C2 FA | 	rdbyte	local05, objptr
014f0                 | '   y:=cursor_y
014f0     01 0C 06 F1 | 	add	objptr, #1
014f4     06 67 C2 FA | 	rdbyte	local06, objptr
014f8     03 0C 06 F1 | 	add	objptr, #3
014fc     06 69 02 FB | 	rdlong	local07, objptr
01500     18 68 66 F0 | 	shl	local07, #24
01504     04 0C 06 F1 | 	add	objptr, #4
01508     06 6B 02 FB | 	rdlong	local08, objptr
0150c     10 6A 66 F0 | 	shl	local08, #16
01510     35 69 02 F1 | 	add	local07, local08
01514                 | '   c:=write_color<<24+write_background<<16
01514     54 0C 06 F1 | 	add	objptr, #84
01518     06 6D 02 FB | 	rdlong	local09, objptr
0151c     90 0C 86 F1 | 	sub	objptr, #144
01520     33 6D 02 FD | 	qmul	local09, local06
01524     18 6E 62 FD | 	getqx	local10
01528     32 6F 02 F1 | 	add	local10, local05
0152c     02 6E 66 F0 | 	shl	local10, #2
01530     06 71 02 FB | 	rdlong	local11, objptr
01534     37 71 02 F1 | 	add	local11, local10
01538     38 73 02 FB | 	rdlong	local12, local11
0153c     7F 00 00 FF 
01540     FF 73 06 F5 | 	and	local12, ##65535
01544     34 73 42 F5 | 	or	local12, local07
01548                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
01548     38 73 62 FC | 	wrlong	local12, local11
0154c     90 0C 06 F1 | 	add	objptr, #144
01550     06 6D 02 FB | 	rdlong	local09, objptr
01554     90 0C 86 F1 | 	sub	objptr, #144
01558     33 6D 02 FD | 	qmul	local09, local06
0155c     18 74 62 FD | 	getqx	local13
01560     32 75 02 F1 | 	add	local13, local05
01564     02 74 66 F0 | 	shl	local13, #2
01568     06 77 02 FB | 	rdlong	local14, objptr
0156c     3A 77 02 F1 | 	add	local14, local13
01570     3B 79 02 FB | 	rdlong	local15, local14
01574     FF 78 26 F5 | 	andn	local15, #255
01578     FF 5C 06 F5 | 	and	local01, #255
0157c     2E 79 42 F5 | 	or	local15, local01
01580                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
01580     3B 79 62 FC | 	wrlong	local15, local14
01584                 | '   cursor_x+=1
01584     34 0C 06 F1 | 	add	objptr, #52
01588     06 7B C2 FA | 	rdbyte	local16, objptr
0158c     01 7A 06 F1 | 	add	local16, #1
01590     06 7B 42 FC | 	wrbyte	local16, objptr
01594                 | '   if cursor_x==cpl
01594     06 7B C2 FA | 	rdbyte	local16, objptr
01598     5C 0C 06 F1 | 	add	objptr, #92
0159c     06 7D 02 FB | 	rdlong	local17, objptr
015a0     90 0C 86 F1 | 	sub	objptr, #144
015a4     3E 7B 0A F2 | 	cmp	local16, local17 wz
015a8     54 00 90 5D |  if_ne	jmp	#LR__0025
015ac                 | '     cursor_x:=0
015ac     34 0C 06 F1 | 	add	objptr, #52
015b0     06 01 48 FC | 	wrbyte	#0, objptr
015b4                 | '     cursor_y+=1
015b4     01 0C 06 F1 | 	add	objptr, #1
015b8     06 7B C2 FA | 	rdbyte	local16, objptr
015bc     01 7A 06 F1 | 	add	local16, #1
015c0     06 7B 42 FC | 	wrbyte	local16, objptr
015c4                 | '     if cursor_y>lines-1
015c4     5F 0C 06 F1 | 	add	objptr, #95
015c8     06 7B 02 FB | 	rdlong	local16, objptr
015cc     01 7A 86 F1 | 	sub	local16, #1
015d0     5F 0C 86 F1 | 	sub	objptr, #95
015d4     06 7D C2 FA | 	rdbyte	local17, objptr
015d8     35 0C 86 F1 | 	sub	objptr, #53
015dc     3D 7D 5A F2 | 	cmps	local17, local16 wcz
015e0     1C 00 90 ED |  if_be	jmp	#LR__0024
015e4                 | '       scrollup()
015e4     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
015e8     94 0C 06 F1 | 	add	objptr, #148
015ec     06 7F 02 FB | 	rdlong	local18, objptr
015f0     01 7E 86 F1 | 	sub	local18, #1
015f4                 | '       cursor_y:=lines-1
015f4     5F 0C 86 F1 | 	sub	objptr, #95
015f8     06 7F 42 FC | 	wrbyte	local18, objptr
015fc     35 0C 86 F1 | 	sub	objptr, #53
01600                 | LR__0024
01600                 | LR__0025
01600                 | LR__0026
01600     AF F0 03 F6 | 	mov	ptra, fp
01604     BF 00 A0 FD | 	call	#popregs_
01608                 | _hng030rm_spin2_putchar_ret
01608     2D 00 64 FD | 	ret
0160c                 | 
0160c                 | ' 
0160c                 | ' ''-----------  Scroll the screen one line up
0160c                 | ' 
0160c                 | ' pub scrollup() | i
0160c                 | _hng030rm_spin2_scrollup
0160c     0A 5A 05 F6 | 	mov	COUNT_, #10
01610     B0 00 A0 FD | 	call	#pushregs_
01614     90 0C 06 F1 | 	add	objptr, #144
01618     06 5D 02 FB | 	rdlong	local01, objptr
0161c     90 0C 86 F1 | 	sub	objptr, #144
01620     02 5C 66 F0 | 	shl	local01, #2
01624     06 55 02 FB | 	rdlong	arg02, objptr
01628     2E 55 02 F1 | 	add	arg02, local01
0162c     30 0C 06 F1 | 	add	objptr, #48
01630     06 57 02 FB | 	rdlong	arg03, objptr
01634     60 0C 06 F1 | 	add	objptr, #96
01638     06 5F 02 FB | 	rdlong	local02, objptr
0163c     90 0C 86 F1 | 	sub	objptr, #144
01640     2F 57 82 F1 | 	sub	arg03, local02
01644                 | ' 
01644                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
01644     06 53 02 FB | 	rdlong	arg01, objptr
01648     D4 0C B0 FD | 	call	#__system__longmove
0164c                 | ' repeat i from buflen-cpl to buflen-1
0164c     30 0C 06 F1 | 	add	objptr, #48
01650     06 61 02 FB | 	rdlong	local03, objptr
01654     60 0C 06 F1 | 	add	objptr, #96
01658     06 5F 02 FB | 	rdlong	local02, objptr
0165c     2F 61 82 F1 | 	sub	local03, local02
01660     60 0C 86 F1 | 	sub	objptr, #96
01664     06 63 02 FB | 	rdlong	local04, objptr
01668     01 62 86 F1 | 	sub	local04, #1
0166c     06 65 02 FB | 	rdlong	local05, objptr
01670     60 0C 06 F1 | 	add	objptr, #96
01674     06 67 02 FB | 	rdlong	local06, objptr
01678     90 0C 86 F1 | 	sub	objptr, #144
0167c     33 65 82 F1 | 	sub	local05, local06
01680     32 63 5A F2 | 	cmps	local04, local05 wcz
01684     01 68 06 16 |  if_a	mov	local07, #1
01688     01 68 66 E6 |  if_be	neg	local07, #1
0168c     34 63 02 F1 | 	add	local04, local07
01690     9C E9 9F FE | 	loc	pa,	#(@LR__0028-@LR__0027)
01694     93 00 A0 FD | 	call	#FCACHE_LOAD_
01698                 | LR__0027
01698     30 6B 02 F6 | 	mov	local08, local03
0169c     02 6A 66 F0 | 	shl	local08, #2
016a0     06 6D 02 FB | 	rdlong	local09, objptr
016a4     35 6D 02 F1 | 	add	local09, local08
016a8     36 6F 02 FB | 	rdlong	local10, local09
016ac     80 FF 7F FF 
016b0     00 6E 06 F5 | 	and	local10, ##-65536
016b4     20 6E 46 F5 | 	or	local10, #32
016b8                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
016b8     36 6F 62 FC | 	wrlong	local10, local09
016bc     34 61 02 F1 | 	add	local03, local07
016c0     31 61 0A F2 | 	cmp	local03, local04 wz
016c4     D0 FF 9F 5D |  if_ne	jmp	#LR__0027
016c8                 | LR__0028
016c8     AF F0 03 F6 | 	mov	ptra, fp
016cc     BF 00 A0 FD | 	call	#popregs_
016d0                 | _hng030rm_spin2_scrollup_ret
016d0     2D 00 64 FD | 	ret
016d4                 | 
016d4                 | ' 
016d4                 | ' 
016d4                 | ' 
016d4                 | ' '*************************************************************************
016d4                 | ' '                                                                        *
016d4                 | ' '  Mode setting and driver start                                                          *
016d4                 | ' '                                                                        *
016d4                 | ' '*************************************************************************
016d4                 | ' 
016d4                 | ' ''---------  Set the graphics mode
016d4                 | ' 
016d4                 | ' 
016d4                 | ' 
016d4                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
016d4                 | _hng030rm_spin2_setmode
016d4     50 5A 05 F6 | 	mov	COUNT_, #80
016d8     B0 00 A0 FD | 	call	#pushregs_
016dc     29 5D 02 F6 | 	mov	local01, arg01
016e0                 | ' 
016e0                 | ' '' mode:tn_bb_cc_vv_hh
016e0                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
016e0                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
016e0                 | ' 
016e0                 | ' if mode==(512+192+48)
016e0     01 00 00 FF 
016e4     F0 5C 0E F2 | 	cmp	local01, ##752 wz
016e8                 | '   return 'no RAM
016e8     1C 0A 90 AD |  if_e	jmp	#LR__0069
016ec                 | ' 
016ec                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
016ec     2E 5F 02 F6 | 	mov	local02, local01
016f0     06 5E 46 F0 | 	shr	local02, #6
016f4     07 5E 06 F5 | 	and	local02, #7
016f8     08 5E 26 F3 | 	fle	local02, #8
016fc     2F 61 02 F6 | 	mov	local03, local02
01700     30 60 62 FD | 	jmprel	local03
01704                 | LR__0029
01704     20 00 90 FD | 	jmp	#LR__0030
01708     58 00 90 FD | 	jmp	#LR__0031
0170c     90 00 90 FD | 	jmp	#LR__0032
01710     C8 00 90 FD | 	jmp	#LR__0033
01714     00 01 90 FD | 	jmp	#LR__0034
01718     38 01 90 FD | 	jmp	#LR__0035
0171c     70 01 90 FD | 	jmp	#LR__0036
01720     A8 01 90 FD | 	jmp	#LR__0037
01724     E4 01 90 FD | 	jmp	#LR__0038
01728                 | LR__0030
01728                 | ' 
01728                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
01728     50 0C 06 F1 | 	add	objptr, #80
0172c     06 53 02 F6 | 	mov	arg01, objptr
01730     50 0C 86 F1 | 	sub	objptr, #80
01734     0E 00 00 FF 
01738     58 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
0173c     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01740     31 65 02 F6 | 	mov	local05, local04
01744     10 66 06 F6 | 	mov	local06, #16
01748     32 55 02 F6 | 	mov	arg02, local05
0174c     10 56 06 F6 | 	mov	arg03, #16
01750     0E 00 00 FF 
01754     58 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
01758     C4 0B B0 FD | 	call	#__system__longmove
0175c     16 69 02 F6 | 	mov	local07, result1
01760     A8 01 90 FD | 	jmp	#LR__0038
01764                 | LR__0031
01764                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01764     50 0C 06 F1 | 	add	objptr, #80
01768     06 53 02 F6 | 	mov	arg01, objptr
0176c     50 0C 86 F1 | 	sub	objptr, #80
01770     0E 00 00 FF 
01774     98 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
01778     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
0177c     31 65 02 F6 | 	mov	local05, local04
01780     10 66 06 F6 | 	mov	local06, #16
01784     32 55 02 F6 | 	mov	arg02, local05
01788     10 56 06 F6 | 	mov	arg03, #16
0178c     0E 00 00 FF 
01790     98 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
01794     88 0B B0 FD | 	call	#__system__longmove
01798     16 69 02 F6 | 	mov	local07, result1
0179c     6C 01 90 FD | 	jmp	#LR__0038
017a0                 | LR__0032
017a0                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
017a0     50 0C 06 F1 | 	add	objptr, #80
017a4     06 53 02 F6 | 	mov	arg01, objptr
017a8     50 0C 86 F1 | 	sub	objptr, #80
017ac     0E 00 00 FF 
017b0     D8 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
017b4     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
017b8     31 65 02 F6 | 	mov	local05, local04
017bc     10 66 06 F6 | 	mov	local06, #16
017c0     32 55 02 F6 | 	mov	arg02, local05
017c4     10 56 06 F6 | 	mov	arg03, #16
017c8     0E 00 00 FF 
017cc     D8 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
017d0     4C 0B B0 FD | 	call	#__system__longmove
017d4     16 69 02 F6 | 	mov	local07, result1
017d8     30 01 90 FD | 	jmp	#LR__0038
017dc                 | LR__0033
017dc                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
017dc     50 0C 06 F1 | 	add	objptr, #80
017e0     06 53 02 F6 | 	mov	arg01, objptr
017e4     50 0C 86 F1 | 	sub	objptr, #80
017e8     0E 00 00 FF 
017ec     18 21 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
017f0     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
017f4     31 65 02 F6 | 	mov	local05, local04
017f8     10 66 06 F6 | 	mov	local06, #16
017fc     32 55 02 F6 | 	mov	arg02, local05
01800     10 56 06 F6 | 	mov	arg03, #16
01804     0E 00 00 FF 
01808     18 21 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
0180c     10 0B B0 FD | 	call	#__system__longmove
01810     16 69 02 F6 | 	mov	local07, result1
01814     F4 00 90 FD | 	jmp	#LR__0038
01818                 | LR__0034
01818                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
01818     50 0C 06 F1 | 	add	objptr, #80
0181c     06 53 02 F6 | 	mov	arg01, objptr
01820     50 0C 86 F1 | 	sub	objptr, #80
01824     0E 00 00 FF 
01828     58 21 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
0182c     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01830     31 65 02 F6 | 	mov	local05, local04
01834     10 66 06 F6 | 	mov	local06, #16
01838     32 55 02 F6 | 	mov	arg02, local05
0183c     10 56 06 F6 | 	mov	arg03, #16
01840     0E 00 00 FF 
01844     58 21 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
01848     D4 0A B0 FD | 	call	#__system__longmove
0184c     16 69 02 F6 | 	mov	local07, result1
01850     B8 00 90 FD | 	jmp	#LR__0038
01854                 | LR__0035
01854                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
01854     50 0C 06 F1 | 	add	objptr, #80
01858     06 53 02 F6 | 	mov	arg01, objptr
0185c     50 0C 86 F1 | 	sub	objptr, #80
01860     0E 00 00 FF 
01864     98 21 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
01868     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
0186c     31 65 02 F6 | 	mov	local05, local04
01870     10 66 06 F6 | 	mov	local06, #16
01874     32 55 02 F6 | 	mov	arg02, local05
01878     10 56 06 F6 | 	mov	arg03, #16
0187c     0E 00 00 FF 
01880     98 21 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
01884     98 0A B0 FD | 	call	#__system__longmove
01888     16 69 02 F6 | 	mov	local07, result1
0188c     7C 00 90 FD | 	jmp	#LR__0038
01890                 | LR__0036
01890                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
01890     50 0C 06 F1 | 	add	objptr, #80
01894     06 53 02 F6 | 	mov	arg01, objptr
01898     50 0C 86 F1 | 	sub	objptr, #80
0189c     0E 00 00 FF 
018a0     D8 21 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
018a4     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
018a8     31 65 02 F6 | 	mov	local05, local04
018ac     10 66 06 F6 | 	mov	local06, #16
018b0     32 55 02 F6 | 	mov	arg02, local05
018b4     10 56 06 F6 | 	mov	arg03, #16
018b8     0E 00 00 FF 
018bc     D8 21 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
018c0     5C 0A B0 FD | 	call	#__system__longmove
018c4     16 69 02 F6 | 	mov	local07, result1
018c8     40 00 90 FD | 	jmp	#LR__0038
018cc                 | LR__0037
018cc                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
018cc     50 0C 06 F1 | 	add	objptr, #80
018d0     06 6B 02 F6 | 	mov	local08, objptr
018d4     35 6D 02 F6 | 	mov	local09, local08
018d8     0F 00 00 FF 
018dc     18 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
018e0     10 63 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
018e4     31 65 02 F6 | 	mov	local05, local04
018e8     10 66 06 F6 | 	mov	local06, #16
018ec     36 53 02 F6 | 	mov	arg01, local09
018f0     32 55 02 F6 | 	mov	arg02, local05
018f4     10 56 06 F6 | 	mov	arg03, #16
018f8     50 0C 86 F1 | 	sub	objptr, #80
018fc     0F 00 00 FF 
01900     18 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
01904     18 0A B0 FD | 	call	#__system__longmove
01908     16 69 02 F6 | 	mov	local07, result1
0190c                 | LR__0038
0190c                 | ' 
0190c                 | ' ' 4-bit graphics: do nothing with timings :)
0190c                 | ' if mode<512
0190c     01 00 00 FF 
01910     00 5C 5E F2 | 	cmps	local01, ##512 wcz
01914     20 00 90 3D |  if_ae	jmp	#LR__0039
01918     0C 00 00 FF 
0191c     58 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01920     10 6F 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
01924                 | '   palette_ptr:=@ataripalette
01924     18 0C 06 F1 | 	add	objptr, #24
01928     06 6F 62 FC | 	wrlong	local10, objptr
0192c     18 0C 86 F1 | 	sub	objptr, #24
01930     0C 00 00 FF 
01934     58 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01938                 | LR__0039
01938                 | ' 
01938                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
01938     2E 5F 02 F6 | 	mov	local02, local01
0193c     01 00 00 FF 
01940     30 5E 06 F5 | 	and	local02, ##560
01944     01 00 00 FF 
01948     30 5E 0E F2 | 	cmp	local02, ##560 wz
0194c     48 00 90 5D |  if_ne	jmp	#LR__0040
01950                 | '   timings[5]:=4
01950     64 0C 06 F1 | 	add	objptr, #100
01954     06 09 68 FC | 	wrlong	#4, objptr
01958     18 0C 06 F1 | 	add	objptr, #24
0195c     06 71 02 FB | 	rdlong	local11, objptr
01960     01 70 66 F0 | 	shl	local11, #1
01964                 | '   timings[11]:=timings[11]<<1
01964     06 71 62 FC | 	wrlong	local11, objptr
01968                 | '   putpixel:=p8
01968     6C 0C 06 F1 | 	add	objptr, #108
0196c     06 5F 02 FB | 	rdlong	local02, objptr
01970     10 0C 86 F1 | 	sub	objptr, #16
01974     06 5F 62 FC | 	wrlong	local02, objptr
01978     0C 00 00 FF 
0197c     58 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01980     10 73 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
01984                 | '   palette_ptr:=@ataripalette
01984     C0 0C 86 F1 | 	sub	objptr, #192
01988     06 73 62 FC | 	wrlong	local12, objptr
0198c     18 0C 86 F1 | 	sub	objptr, #24
01990     0C 00 00 FF 
01994     58 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01998                 | LR__0040
01998                 | ' 
01998                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
01998     2E 5F 02 F6 | 	mov	local02, local01
0199c     01 00 00 FF 
019a0     30 5E 06 F5 | 	and	local02, ##560
019a4     01 00 00 FF 
019a8     10 5E 0E F2 | 	cmp	local02, ##528 wz
019ac     48 00 90 5D |  if_ne	jmp	#LR__0041
019b0                 | '   timings[5]:=16
019b0     64 0C 06 F1 | 	add	objptr, #100
019b4     06 21 68 FC | 	wrlong	#16, objptr
019b8     18 0C 06 F1 | 	add	objptr, #24
019bc     06 75 02 FB | 	rdlong	local13, objptr
019c0     01 74 46 F0 | 	shr	local13, #1
019c4                 | '   timings[11]:=timings[11]>>1
019c4     06 75 62 FC | 	wrlong	local13, objptr
019c8                 | '   putpixel:=p2
019c8     64 0C 06 F1 | 	add	objptr, #100
019cc     06 5F 02 FB | 	rdlong	local02, objptr
019d0     08 0C 86 F1 | 	sub	objptr, #8
019d4     06 5F 62 FC | 	wrlong	local02, objptr
019d8     0C 00 00 FF 
019dc     08 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
019e0     10 77 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
019e4                 | '   palette_ptr:=@fourcolors
019e4     C0 0C 86 F1 | 	sub	objptr, #192
019e8     06 77 62 FC | 	wrlong	local14, objptr
019ec     18 0C 86 F1 | 	sub	objptr, #24
019f0     0C 00 00 FF 
019f4     08 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
019f8                 | LR__0041
019f8                 | ' 
019f8                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
019f8     2E 5F 02 F6 | 	mov	local02, local01
019fc     01 00 00 FF 
01a00     30 5E 06 F5 | 	and	local02, ##560
01a04     01 00 00 FF 
01a08     00 5E 0E F2 | 	cmp	local02, ##512 wz
01a0c     48 00 90 5D |  if_ne	jmp	#LR__0042
01a10                 | '   timings[5]:=32
01a10     64 0C 06 F1 | 	add	objptr, #100
01a14     06 41 68 FC | 	wrlong	#32, objptr
01a18     18 0C 06 F1 | 	add	objptr, #24
01a1c     06 79 02 FB | 	rdlong	local15, objptr
01a20     02 78 46 F0 | 	shr	local15, #2
01a24                 | '   timings[11]:=timings[11]>>2
01a24     06 79 62 FC | 	wrlong	local15, objptr
01a28                 | '   putpixel:=p1
01a28     60 0C 06 F1 | 	add	objptr, #96
01a2c     06 5F 02 FB | 	rdlong	local02, objptr
01a30     04 0C 86 F1 | 	sub	objptr, #4
01a34     06 5F 62 FC | 	wrlong	local02, objptr
01a38     0C 00 00 FF 
01a3c     00 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
01a40     10 7B 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
01a44                 | '   palette_ptr:=@twocolors
01a44     C0 0C 86 F1 | 	sub	objptr, #192
01a48     06 7B 62 FC | 	wrlong	local16, objptr
01a4c     18 0C 86 F1 | 	sub	objptr, #24
01a50     0C 00 00 FF 
01a54     00 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
01a58                 | LR__0042
01a58                 | ' 
01a58                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
01a58     2E 5F 02 F6 | 	mov	local02, local01
01a5c     01 00 00 FF 
01a60     30 5E 06 F5 | 	and	local02, ##560
01a64     01 00 00 FF 
01a68     20 5E 0E F2 | 	cmp	local02, ##544 wz
01a6c     30 00 90 5D |  if_ne	jmp	#LR__0043
01a70                 | '   putpixel:=p4
01a70     E4 0C 06 F1 | 	add	objptr, #228
01a74     06 5F 02 FB | 	rdlong	local02, objptr
01a78     0C 0C 86 F1 | 	sub	objptr, #12
01a7c     06 5F 62 FC | 	wrlong	local02, objptr
01a80     0C 00 00 FF 
01a84     18 20 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
01a88     10 7D 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
01a8c                 | '   palette_ptr:=@vga16
01a8c     C0 0C 86 F1 | 	sub	objptr, #192
01a90     06 7D 62 FC | 	wrlong	local17, objptr
01a94     18 0C 86 F1 | 	sub	objptr, #24
01a98     0C 00 00 FF 
01a9c     18 20 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
01aa0                 | LR__0043
01aa0                 | ' 
01aa0                 | ' repeat i from 0 to 4
01aa0     00 7E 06 F6 | 	mov	local18, #0
01aa4     9C E5 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
01aa8     93 00 A0 FD | 	call	#FCACHE_LOAD_
01aac                 | LR__0044
01aac     3F 81 02 F6 | 	mov	local19, local18
01ab0     02 80 66 F0 | 	shl	local19, #2
01ab4     50 0C 06 F1 | 	add	objptr, #80
01ab8     06 81 02 F1 | 	add	local19, objptr
01abc     2C 0C 86 F1 | 	sub	objptr, #44
01ac0     06 83 02 FB | 	rdlong	local20, objptr
01ac4     24 0C 86 F1 | 	sub	objptr, #36
01ac8     11 82 66 F0 | 	shl	local20, #17
01acc     40 85 02 FB | 	rdlong	local21, local19
01ad0     41 85 02 F1 | 	add	local21, local20
01ad4     42 87 02 F6 | 	mov	local22, local21
01ad8     80 40 38 FF 
01adc     00 86 06 F1 | 	add	local22, ##1887502336
01ae0                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
01ae0     40 87 62 FC | 	wrlong	local22, local19
01ae4     01 7E 06 F1 | 	add	local18, #1
01ae8     05 7E 5E F2 | 	cmps	local18, #5 wcz
01aec     BC FF 9F CD |  if_b	jmp	#LR__0044
01af0                 | LR__0045
01af0     24 0C 06 F1 | 	add	objptr, #36
01af4     06 89 02 FB | 	rdlong	local23, objptr
01af8     11 88 66 F0 | 	shl	local23, #17
01afc     40 0C 06 F1 | 	add	objptr, #64
01b00     06 8B 02 FB | 	rdlong	local24, objptr
01b04     44 8B 02 F1 | 	add	local24, local23
01b08                 | ' timings[5]:=timings[5]+hdmibase<<17
01b08     06 8B 62 FC | 	wrlong	local24, objptr
01b0c                 | ' clkfreq:=timings[13]
01b0c     20 0C 06 F1 | 	add	objptr, #32
01b10     06 5F 02 FB | 	rdlong	local02, objptr
01b14     14 5E 66 FC | 	wrlong	local02, #20
01b18                 | ' hubset(timings[14])
01b18     04 0C 06 F1 | 	add	objptr, #4
01b1c     06 53 02 FB | 	rdlong	arg01, objptr
01b20     88 0C 86 F1 | 	sub	objptr, #136
01b24     00 52 62 FD | 	hubset	arg01
01b28                 | ' waitms(1)
01b28     01 52 06 F6 | 	mov	arg01, #1
01b2c     A0 0B B0 FD | 	call	#__system___waitms
01b30     2E 8D 02 F6 | 	mov	local25, local01
01b34     03 8C 06 F5 | 	and	local25, #3
01b38     46 8F C2 F9 | 	decod	local26, local25
01b3c                 | ' 
01b3c                 | ' 
01b3c                 | ' xzoom:=1<<(mode & 3)
01b3c     CC 0C 06 F1 | 	add	objptr, #204
01b40     06 8F 62 FC | 	wrlong	local26, objptr
01b44                 | ' 
01b44                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
01b44     47 6B 02 F6 | 	mov	local08, local26
01b48     CC 0C 86 F1 | 	sub	objptr, #204
01b4c     08 6A 0E F2 | 	cmp	local08, #8 wz
01b50     24 00 90 5D |  if_ne	jmp	#LR__0046
01b54     2E 6D 02 F6 | 	mov	local09, local01
01b58     04 6C 46 F0 | 	shr	local09, #4
01b5c     03 6C 06 F5 | 	and	local09, #3
01b60     03 6C 0E F2 | 	cmp	local09, #3 wz
01b64     10 00 90 AD |  if_e	jmp	#LR__0046
01b68                 | '   xzoom:=4
01b68     04 5E 06 F6 | 	mov	local02, #4
01b6c     CC 0C 06 F1 | 	add	objptr, #204
01b70     06 09 68 FC | 	wrlong	#4, objptr
01b74     CC 0C 86 F1 | 	sub	objptr, #204
01b78                 | LR__0046
01b78     2E 91 02 F6 | 	mov	local27, local01
01b7c     02 90 46 F0 | 	shr	local27, #2
01b80     03 90 06 F5 | 	and	local27, #3
01b84     48 93 C2 F9 | 	decod	local28, local27
01b88                 | ' 
01b88                 | ' yzoom:=1<<((mode>>2) & 3)
01b88     D0 0C 06 F1 | 	add	objptr, #208
01b8c     06 93 62 FC | 	wrlong	local28, objptr
01b90     04 0C 86 F1 | 	sub	objptr, #4
01b94     06 6B 02 FB | 	rdlong	local08, objptr
01b98     04 0C 06 F1 | 	add	objptr, #4
01b9c     06 63 02 FB | 	rdlong	local04, objptr
01ba0     31 6B 02 FD | 	qmul	local08, local04
01ba4     18 94 62 FD | 	getqx	local29
01ba8                 | ' azoom:=xzoom*yzoom
01ba8     04 0C 06 F1 | 	add	objptr, #4
01bac     06 95 62 FC | 	wrlong	local29, objptr
01bb0                 | ' 
01bb0                 | ' cpl:=timings[11]
01bb0     58 0C 86 F1 | 	sub	objptr, #88
01bb4     06 5F 02 FB | 	rdlong	local02, objptr
01bb8     14 0C 06 F1 | 	add	objptr, #20
01bbc     06 5F 62 FC | 	wrlong	local02, objptr
01bc0     90 0C 86 F1 | 	sub	objptr, #144
01bc4                 | ' if (mode<512)
01bc4     01 00 00 FF 
01bc8     00 5C 5E F2 | 	cmps	local01, ##512 wcz
01bcc     60 00 90 3D |  if_ae	jmp	#LR__0047
01bd0     80 0C 06 F1 | 	add	objptr, #128
01bd4     06 FD 02 FB | 	rdlong	muldiva_, objptr
01bd8     04 FC 46 F0 | 	shr	muldiva_, #4
01bdc     50 0C 06 F1 | 	add	objptr, #80
01be0     06 FF 02 FB | 	rdlong	muldivb_, objptr
01be4     D0 0C 86 F1 | 	sub	objptr, #208
01be8     CC 00 A0 FD | 	call	#unsdivide_
01bec                 | '   lines:=(timings[12]>>4)+/yzoom
01bec     94 0C 06 F1 | 	add	objptr, #148
01bf0     06 FF 62 FC | 	wrlong	muldivb_, objptr
01bf4                 | '   if ((timings[12]>>4)+//yzoom) <>0
01bf4     14 0C 86 F1 | 	sub	objptr, #20
01bf8     06 FD 02 FB | 	rdlong	muldiva_, objptr
01bfc     04 FC 46 F0 | 	shr	muldiva_, #4
01c00     50 0C 06 F1 | 	add	objptr, #80
01c04     06 FF 02 FB | 	rdlong	muldivb_, objptr
01c08     D0 0C 86 F1 | 	sub	objptr, #208
01c0c     CC 00 A0 FD | 	call	#unsdivide_
01c10     00 FC 0E F2 | 	cmp	muldiva_, #0 wz
01c14     AC 00 90 AD |  if_e	jmp	#LR__0050
01c18                 | '     lines +=1
01c18     94 0C 06 F1 | 	add	objptr, #148
01c1c     06 5F 02 FB | 	rdlong	local02, objptr
01c20     01 5E 06 F1 | 	add	local02, #1
01c24     06 5F 62 FC | 	wrlong	local02, objptr
01c28     94 0C 86 F1 | 	sub	objptr, #148
01c2c                 | ' 
01c2c                 | ' else
01c2c     94 00 90 FD | 	jmp	#LR__0050
01c30                 | LR__0047
01c30     80 0C 06 F1 | 	add	objptr, #128
01c34     06 FD 02 FB | 	rdlong	muldiva_, objptr
01c38     50 0C 06 F1 | 	add	objptr, #80
01c3c     06 FF 02 FB | 	rdlong	muldivb_, objptr
01c40     D0 0C 86 F1 | 	sub	objptr, #208
01c44     D0 00 A0 FD | 	call	#divide_
01c48                 | '   lines:=timings[12]/yzoom
01c48     94 0C 06 F1 | 	add	objptr, #148
01c4c     06 FF 62 FC | 	wrlong	muldivb_, objptr
01c50                 | '   if cpl//xzoom==0
01c50     04 0C 86 F1 | 	sub	objptr, #4
01c54     06 FD 02 FB | 	rdlong	muldiva_, objptr
01c58     3C 0C 06 F1 | 	add	objptr, #60
01c5c     06 FF 02 FB | 	rdlong	muldivb_, objptr
01c60     CC 0C 86 F1 | 	sub	objptr, #204
01c64     D0 00 A0 FD | 	call	#divide_
01c68     00 FC 0E F2 | 	cmp	muldiva_, #0 wz
01c6c     28 00 90 5D |  if_ne	jmp	#LR__0048
01c70                 | '     cpl:=cpl/xzoom
01c70     90 0C 06 F1 | 	add	objptr, #144
01c74     06 FD 02 FB | 	rdlong	muldiva_, objptr
01c78     3C 0C 06 F1 | 	add	objptr, #60
01c7c     06 FF 02 FB | 	rdlong	muldivb_, objptr
01c80     CC 0C 86 F1 | 	sub	objptr, #204
01c84     D0 00 A0 FD | 	call	#divide_
01c88     90 0C 06 F1 | 	add	objptr, #144
01c8c     06 FF 62 FC | 	wrlong	muldivb_, objptr
01c90     90 0C 86 F1 | 	sub	objptr, #144
01c94                 | '   else
01c94     2C 00 90 FD | 	jmp	#LR__0049
01c98                 | LR__0048
01c98     90 0C 06 F1 | 	add	objptr, #144
01c9c     06 FD 02 FB | 	rdlong	muldiva_, objptr
01ca0     3C 0C 06 F1 | 	add	objptr, #60
01ca4     06 FF 02 FB | 	rdlong	muldivb_, objptr
01ca8     CC 0C 86 F1 | 	sub	objptr, #204
01cac     D0 00 A0 FD | 	call	#divide_
01cb0     7F 97 02 F6 | 	mov	local30, muldivb_
01cb4     01 96 06 F1 | 	add	local30, #1
01cb8                 | '     cpl:=cpl/xzoom+1
01cb8     90 0C 06 F1 | 	add	objptr, #144
01cbc     06 97 62 FC | 	wrlong	local30, objptr
01cc0     90 0C 86 F1 | 	sub	objptr, #144
01cc4                 | LR__0049
01cc4                 | LR__0050
01cc4     90 0C 06 F1 | 	add	objptr, #144
01cc8     06 6B 02 FB | 	rdlong	local08, objptr
01ccc     04 0C 06 F1 | 	add	objptr, #4
01cd0     06 63 02 FB | 	rdlong	local04, objptr
01cd4     31 6B 02 FD | 	qmul	local08, local04
01cd8     18 98 62 FD | 	getqx	local31
01cdc                 | ' 
01cdc                 | ' buflen:=(cpl*lines)
01cdc     64 0C 86 F1 | 	sub	objptr, #100
01ce0     06 99 62 FC | 	wrlong	local31, objptr
01ce4     30 0C 86 F1 | 	sub	objptr, #48
01ce8     02 98 66 F0 | 	shl	local31, #2
01cec     13 9A C6 F9 | 	decod	local32, #19
01cf0     4C 9B 82 F1 | 	sub	local32, local31
01cf4                 | ' buf_ptr:=$80000-4*buflen
01cf4     06 9B 62 FC | 	wrlong	local32, objptr
01cf8     50 0C 06 F1 | 	add	objptr, #80
01cfc     06 9D 02 F6 | 	mov	local33, objptr
01d00                 | ' mode_ptr:=@timings
01d00     3C 0C 86 F1 | 	sub	objptr, #60
01d04     06 9D 62 FC | 	wrlong	local33, objptr
01d08                 | ' graphmode:=mode
01d08     B0 0C 06 F1 | 	add	objptr, #176
01d0c     06 5D 62 FC | 	wrlong	local01, objptr
01d10     C4 0C 86 F1 | 	sub	objptr, #196
01d14                 | ' makedl(mode)
01d14     2E 53 02 F6 | 	mov	arg01, local01
01d18                 | ' 
01d18                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
01d18                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
01d18                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
01d18                 | ' 
01d18                 | ' '   0 - display a up/down border line
01d18                 | ' 
01d18                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
01d18                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
01d18                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
01d18                 | ' '    nnnn - font line to display, 0..15
01d18                 | ' '    llllll - character line, determines the cursor Y position
01d18                 | ' 
01d18                 | ' 
01d18                 | ' if (mode &256==0)
01d18     00 53 CE F7 | 	test	arg01, #256 wz
01d1c     1C 00 90 5D |  if_ne	jmp	#LR__0051
01d20     06 9F 02 FB | 	rdlong	local34, objptr
01d24     04 00 00 FF 
01d28     00 9F 86 F1 | 	sub	local34, ##2304
01d2c                 | '   dl_ptr:=buf_ptr-4*576
01d2c     1C 0C 06 F1 | 	add	objptr, #28
01d30     06 9F 62 FC | 	wrlong	local34, objptr
01d34     1C 0C 86 F1 | 	sub	objptr, #28
01d38                 | ' else
01d38     18 00 90 FD | 	jmp	#LR__0052
01d3c                 | LR__0051
01d3c     06 A1 02 FB | 	rdlong	local35, objptr
01d40     03 00 00 FF 
01d44     C0 A1 86 F1 | 	sub	local35, ##1984
01d48                 | '   dl_ptr:=buf_ptr-4*496
01d48     1C 0C 06 F1 | 	add	objptr, #28
01d4c     06 A1 62 FC | 	wrlong	local35, objptr
01d50     1C 0C 86 F1 | 	sub	objptr, #28
01d54                 | LR__0052
01d54     29 A3 02 F6 | 	mov	local36, arg01
01d58     02 A2 46 F0 | 	shr	local36, #2
01d5c     03 A2 06 F5 | 	and	local36, #3
01d60                 | '  ' dl_ptr:=buf_ptr-4*540
01d60                 | ' 
01d60                 | ' vzoom:=((mode>>2) & 3)
01d60                 | ' 
01d60                 | ' 
01d60                 | ' if mode<512 '' text modes
01d60     01 00 00 FF 
01d64     00 52 5E F2 | 	cmps	arg01, ##512 wcz
01d68     E4 01 90 3D |  if_ae	jmp	#LR__0060
01d6c                 | ' 
01d6c                 | '   if timings[6]>0 'borders
01d6c     68 0C 06 F1 | 	add	objptr, #104
01d70     06 A5 02 FB | 	rdlong	local37, objptr
01d74     68 0C 86 F1 | 	sub	objptr, #104
01d78     00 A4 5E F2 | 	cmps	local37, #0 wcz
01d7c     D4 00 90 ED |  if_be	jmp	#LR__0057
01d80                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01d80     00 A6 06 F6 | 	mov	local38, #0
01d84     68 0C 06 F1 | 	add	objptr, #104
01d88     06 A9 02 FB | 	rdlong	local39, objptr
01d8c     68 0C 86 F1 | 	sub	objptr, #104
01d90     01 A8 86 F1 | 	sub	local39, #1
01d94     00 A8 5E F2 | 	cmps	local39, #0 wcz
01d98     01 AA 06 16 |  if_a	mov	local40, #1
01d9c     01 AA 66 E6 |  if_be	neg	local40, #1
01da0     55 AD 02 F6 | 	mov	local41, local40
01da4     55 A9 02 F1 | 	add	local39, local40
01da8     7C E2 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
01dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
01db0                 | LR__0053
01db0     53 AF 02 F6 | 	mov	local42, local38
01db4     02 AE 66 F0 | 	shl	local42, #2
01db8     1C 0C 06 F1 | 	add	objptr, #28
01dbc     06 B1 02 FB | 	rdlong	local43, objptr
01dc0     1C 0C 86 F1 | 	sub	objptr, #28
01dc4     57 B1 02 F1 | 	add	local43, local42
01dc8                 | '       long[dl_ptr+4*i]:=$0
01dc8     58 01 68 FC | 	wrlong	#0, local43
01dcc     56 A7 02 F1 | 	add	local38, local41
01dd0     54 A7 0A F2 | 	cmp	local38, local39 wz
01dd4     D8 FF 9F 5D |  if_ne	jmp	#LR__0053
01dd8                 | LR__0054
01dd8                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01dd8     68 0C 06 F1 | 	add	objptr, #104
01ddc     06 A7 02 FB | 	rdlong	local38, objptr
01de0     18 0C 06 F1 | 	add	objptr, #24
01de4     06 AB 02 FB | 	rdlong	local40, objptr
01de8     55 A7 02 F1 | 	add	local38, local40
01dec     0C 0C 06 F1 | 	add	objptr, #12
01df0     06 B3 02 FB | 	rdlong	local44, objptr
01df4     01 B2 86 F1 | 	sub	local44, #1
01df8     24 0C 86 F1 | 	sub	objptr, #36
01dfc     06 B5 02 FB | 	rdlong	local45, objptr
01e00     18 0C 06 F1 | 	add	objptr, #24
01e04     06 B7 02 FB | 	rdlong	local46, objptr
01e08     80 0C 86 F1 | 	sub	objptr, #128
01e0c     5B B5 02 F1 | 	add	local45, local46
01e10     5A B3 5A F2 | 	cmps	local44, local45 wcz
01e14     01 B8 06 16 |  if_a	mov	local47, #1
01e18     01 B8 66 E6 |  if_be	neg	local47, #1
01e1c     5C BB 02 F6 | 	mov	local48, local47
01e20     5C B3 02 F1 | 	add	local44, local47
01e24     00 E2 9F FE | 	loc	pa,	#(@LR__0056-@LR__0055)
01e28     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e2c                 | LR__0055
01e2c     53 BD 02 F6 | 	mov	local49, local38
01e30     02 BC 66 F0 | 	shl	local49, #2
01e34     1C 0C 06 F1 | 	add	objptr, #28
01e38     06 BF 02 FB | 	rdlong	local50, objptr
01e3c     1C 0C 86 F1 | 	sub	objptr, #28
01e40     5E BF 02 F1 | 	add	local50, local49
01e44                 | '       long[dl_ptr+4*i]:=$0
01e44     5F 01 68 FC | 	wrlong	#0, local50
01e48     5D A7 02 F1 | 	add	local38, local48
01e4c     59 A7 0A F2 | 	cmp	local38, local44 wz
01e50     D8 FF 9F 5D |  if_ne	jmp	#LR__0055
01e54                 | LR__0056
01e54                 | LR__0057
01e54     10 C0 06 F6 | 	mov	local51, #16
01e58     51 C1 62 F0 | 	shl	local51, local36
01e5c                 | '   lpc:=16<<vzoom
01e5c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01e5c     68 0C 06 F1 | 	add	objptr, #104
01e60     06 A7 02 FB | 	rdlong	local38, objptr
01e64     53 C3 02 F6 | 	mov	local52, local38
01e68     18 0C 06 F1 | 	add	objptr, #24
01e6c     06 C5 02 FB | 	rdlong	local53, objptr
01e70     62 C3 02 F1 | 	add	local52, local53
01e74     01 C2 86 F1 | 	sub	local52, #1
01e78     18 0C 86 F1 | 	sub	objptr, #24
01e7c     06 B9 02 FB | 	rdlong	local47, objptr
01e80     68 0C 86 F1 | 	sub	objptr, #104
01e84     5C C3 5A F2 | 	cmps	local52, local47 wcz
01e88     01 C6 06 16 |  if_a	mov	local54, #1
01e8c     01 C6 66 E6 |  if_be	neg	local54, #1
01e90     63 C9 02 F6 | 	mov	local55, local54
01e94     63 C3 02 F1 | 	add	local52, local54
01e98     14 E2 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
01e9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01ea0                 | LR__0058
01ea0     53 FD 02 F6 | 	mov	muldiva_, local38
01ea4     68 0C 06 F1 | 	add	objptr, #104
01ea8     06 CB 02 FB | 	rdlong	local56, objptr
01eac     68 0C 86 F1 | 	sub	objptr, #104
01eb0     65 FD 82 F1 | 	sub	muldiva_, local56
01eb4     60 FF 02 F6 | 	mov	muldivb_, local51
01eb8     CC 00 A0 FD | 	call	#unsdivide_
01ebc     51 FD 42 F0 | 	shr	muldiva_, local36
01ec0                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
01ec0     7E CD 02 F6 | 	mov	local57, muldiva_
01ec4     53 FD 02 F6 | 	mov	muldiva_, local38
01ec8     68 0C 06 F1 | 	add	objptr, #104
01ecc     06 CB 02 FB | 	rdlong	local56, objptr
01ed0     68 0C 86 F1 | 	sub	objptr, #104
01ed4     65 FD 82 F1 | 	sub	muldiva_, local56
01ed8     60 FF 02 F6 | 	mov	muldivb_, local51
01edc     CC 00 A0 FD | 	call	#unsdivide_
01ee0     7F CF 02 F6 | 	mov	local58, muldivb_
01ee4                 | '     charline:=(i-timings[6])+/lpc
01ee4     90 0C 06 F1 | 	add	objptr, #144
01ee8     06 CB 02 FB | 	rdlong	local56, objptr
01eec     90 0C 86 F1 | 	sub	objptr, #144
01ef0     67 CB 02 FD | 	qmul	local56, local58
01ef4     18 D0 62 FD | 	getqx	local59
01ef8     02 D0 66 F0 | 	shl	local59, #2
01efc     06 D3 02 FB | 	rdlong	local60, objptr
01f00     68 D3 02 F1 | 	add	local60, local59
01f04     29 D5 02 F6 | 	mov	local61, arg01
01f08     03 D4 06 F5 | 	and	local61, #3
01f0c     6A D3 02 F1 | 	add	local60, local61
01f10                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
01f10     0C D2 66 F0 | 	shl	local60, #12
01f14     08 CC 66 F0 | 	shl	local57, #8
01f18     66 D3 02 F1 | 	add	local60, local57
01f1c     02 CE 66 F0 | 	shl	local58, #2
01f20     67 D3 02 F1 | 	add	local60, local58
01f24     01 D2 06 F1 | 	add	local60, #1
01f28     53 D7 02 F6 | 	mov	local62, local38
01f2c     02 D6 66 F0 | 	shl	local62, #2
01f30     1C 0C 06 F1 | 	add	objptr, #28
01f34     06 D9 02 FB | 	rdlong	local63, objptr
01f38     1C 0C 86 F1 | 	sub	objptr, #28
01f3c     6B D9 02 F1 | 	add	local63, local62
01f40                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
01f40     6C D3 62 FC | 	wrlong	local60, local63
01f44     64 A7 02 F1 | 	add	local38, local55
01f48     61 A7 0A F2 | 	cmp	local38, local52 wz
01f4c     50 FF 9F 5D |  if_ne	jmp	#LR__0058
01f50                 | LR__0059
01f50                 | LR__0060
01f50                 | ' 
01f50                 | ' 
01f50                 | ' 
01f50                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
01f50     01 00 00 FF 
01f54     00 52 5E F2 | 	cmps	arg01, ##512 wcz
01f58     AC 01 90 CD |  if_b	jmp	#LR__0068
01f5c                 | ' 
01f5c                 | '   if timings[6]>0 'borders
01f5c     68 0C 06 F1 | 	add	objptr, #104
01f60     06 A5 02 FB | 	rdlong	local37, objptr
01f64     68 0C 86 F1 | 	sub	objptr, #104
01f68     00 A4 5E F2 | 	cmps	local37, #0 wcz
01f6c     D4 00 90 ED |  if_be	jmp	#LR__0065
01f70                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01f70     00 A6 06 F6 | 	mov	local38, #0
01f74     68 0C 06 F1 | 	add	objptr, #104
01f78     06 DB 02 FB | 	rdlong	local64, objptr
01f7c     68 0C 86 F1 | 	sub	objptr, #104
01f80     01 DA 86 F1 | 	sub	local64, #1
01f84     00 DA 5E F2 | 	cmps	local64, #0 wcz
01f88     01 AA 06 16 |  if_a	mov	local40, #1
01f8c     01 AA 66 E6 |  if_be	neg	local40, #1
01f90     55 DD 02 F6 | 	mov	local65, local40
01f94     55 DB 02 F1 | 	add	local64, local40
01f98     8C E0 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
01f9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01fa0                 | LR__0061
01fa0     53 DF 02 F6 | 	mov	local66, local38
01fa4     02 DE 66 F0 | 	shl	local66, #2
01fa8     1C 0C 06 F1 | 	add	objptr, #28
01fac     06 E1 02 FB | 	rdlong	local67, objptr
01fb0     1C 0C 86 F1 | 	sub	objptr, #28
01fb4     6F E1 02 F1 | 	add	local67, local66
01fb8                 | '       long[dl_ptr+4*i]:=$0
01fb8     70 01 68 FC | 	wrlong	#0, local67
01fbc     6E A7 02 F1 | 	add	local38, local65
01fc0     6D A7 0A F2 | 	cmp	local38, local64 wz
01fc4     D8 FF 9F 5D |  if_ne	jmp	#LR__0061
01fc8                 | LR__0062
01fc8                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01fc8     68 0C 06 F1 | 	add	objptr, #104
01fcc     06 A7 02 FB | 	rdlong	local38, objptr
01fd0     18 0C 06 F1 | 	add	objptr, #24
01fd4     06 AB 02 FB | 	rdlong	local40, objptr
01fd8     55 A7 02 F1 | 	add	local38, local40
01fdc     0C 0C 06 F1 | 	add	objptr, #12
01fe0     06 E3 02 FB | 	rdlong	local68, objptr
01fe4     01 E2 86 F1 | 	sub	local68, #1
01fe8     24 0C 86 F1 | 	sub	objptr, #36
01fec     06 B5 02 FB | 	rdlong	local45, objptr
01ff0     18 0C 06 F1 | 	add	objptr, #24
01ff4     06 B7 02 FB | 	rdlong	local46, objptr
01ff8     80 0C 86 F1 | 	sub	objptr, #128
01ffc     5B B5 02 F1 | 	add	local45, local46
02000     5A E3 5A F2 | 	cmps	local68, local45 wcz
02004     01 B8 06 16 |  if_a	mov	local47, #1
02008     01 B8 66 E6 |  if_be	neg	local47, #1
0200c     5C E5 02 F6 | 	mov	local69, local47
02010     5C E3 02 F1 | 	add	local68, local47
02014     10 E0 9F FE | 	loc	pa,	#(@LR__0064-@LR__0063)
02018     93 00 A0 FD | 	call	#FCACHE_LOAD_
0201c                 | LR__0063
0201c     53 E7 02 F6 | 	mov	local70, local38
02020     02 E6 66 F0 | 	shl	local70, #2
02024     1C 0C 06 F1 | 	add	objptr, #28
02028     06 E9 02 FB | 	rdlong	local71, objptr
0202c     1C 0C 86 F1 | 	sub	objptr, #28
02030     73 E9 02 F1 | 	add	local71, local70
02034                 | '       long[dl_ptr+4*i]:=$0
02034     74 01 68 FC | 	wrlong	#0, local71
02038     72 A7 02 F1 | 	add	local38, local69
0203c     71 A7 0A F2 | 	cmp	local38, local68 wz
02040     D8 FF 9F 5D |  if_ne	jmp	#LR__0063
02044                 | LR__0064
02044                 | LR__0065
02044                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02044     68 0C 06 F1 | 	add	objptr, #104
02048     06 A7 02 FB | 	rdlong	local38, objptr
0204c     53 EB 02 F6 | 	mov	local72, local38
02050     18 0C 06 F1 | 	add	objptr, #24
02054     06 C5 02 FB | 	rdlong	local53, objptr
02058     62 EB 02 F1 | 	add	local72, local53
0205c     01 EA 86 F1 | 	sub	local72, #1
02060     18 0C 86 F1 | 	sub	objptr, #24
02064     06 B9 02 FB | 	rdlong	local47, objptr
02068     68 0C 86 F1 | 	sub	objptr, #104
0206c     5C EB 5A F2 | 	cmps	local72, local47 wcz
02070     01 C6 06 16 |  if_a	mov	local54, #1
02074     01 C6 66 E6 |  if_be	neg	local54, #1
02078     63 ED 02 F6 | 	mov	local73, local54
0207c     63 EB 02 F1 | 	add	local72, local54
02080     FC DF 9F FE | 	loc	pa,	#(@LR__0067-@LR__0066)
02084     93 00 A0 FD | 	call	#FCACHE_LOAD_
02088                 | LR__0066
02088     53 EF 02 F6 | 	mov	local74, local38
0208c     68 0C 06 F1 | 	add	objptr, #104
02090     06 CB 02 FB | 	rdlong	local56, objptr
02094     65 EF 82 F1 | 	sub	local74, local56
02098     51 EF 42 F0 | 	shr	local74, local36
0209c     28 0C 06 F1 | 	add	objptr, #40
020a0     06 CB 02 FB | 	rdlong	local56, objptr
020a4     90 0C 86 F1 | 	sub	objptr, #144
020a8     77 CB 02 FD | 	qmul	local56, local74
020ac     18 F0 62 FD | 	getqx	local75
020b0     02 F0 66 F0 | 	shl	local75, #2
020b4     06 F3 02 FB | 	rdlong	local76, objptr
020b8     78 F3 02 F1 | 	add	local76, local75
020bc     29 F5 02 F6 | 	mov	local77, arg01
020c0     03 F4 06 F5 | 	and	local77, #3
020c4     7A F3 02 F1 | 	add	local76, local77
020c8                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
020c8     0C F2 66 F0 | 	shl	local76, #12
020cc     02 F2 06 F1 | 	add	local76, #2
020d0     29 F7 02 F6 | 	mov	local78, arg01
020d4     30 F6 06 F5 | 	and	local78, #48
020d8     02 F6 46 F0 | 	shr	local78, #2
020dc     7B F3 02 F1 | 	add	local76, local78
020e0     53 F9 02 F6 | 	mov	local79, local38
020e4     02 F8 66 F0 | 	shl	local79, #2
020e8     1C 0C 06 F1 | 	add	objptr, #28
020ec     06 FB 02 FB | 	rdlong	local80, objptr
020f0     1C 0C 86 F1 | 	sub	objptr, #28
020f4     7C FB 02 F1 | 	add	local80, local79
020f8                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
020f8     7D F3 62 FC | 	wrlong	local76, local80
020fc     76 A7 02 F1 | 	add	local38, local73
02100     75 A7 0A F2 | 	cmp	local38, local72 wz
02104     80 FF 9F 5D |  if_ne	jmp	#LR__0066
02108                 | LR__0067
02108                 | LR__0068
02108                 | LR__0069
02108     AF F0 03 F6 | 	mov	ptra, fp
0210c     BF 00 A0 FD | 	call	#popregs_
02110                 | _hng030rm_spin2_setmode_ret
02110     2D 00 64 FD | 	ret
02114                 | hubexit
02114     81 00 80 FD | 	jmp	#cogexit
02118                 | 
02118                 | __system___setbaud
02118     14 FC 06 FB | 	rdlong	muldiva_, #20
0211c     29 FF 02 F6 | 	mov	muldivb_, arg01
02120     D0 00 A0 FD | 	call	#divide_
02124     40 7C 64 FD | 	dirl	#62
02128     40 7E 64 FD | 	dirl	#63
0212c     0E FF 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02130     10 FE 66 F0 | 	shl	muldivb_, #16
02134     07 54 06 F6 | 	mov	arg02, #7
02138     7F 55 02 F1 | 	add	arg02, muldivb_
0213c     3E F8 0C FC | 	wrpin	#124, #62
02140     3E 54 16 FC | 	wxpin	arg02, #62
02144     3F 7C 0C FC | 	wrpin	#62, #63
02148     14 54 06 F1 | 	add	arg02, #20
0214c     3F 54 16 FC | 	wxpin	arg02, #63
02150     41 7C 64 FD | 	dirh	#62
02154     41 7E 64 FD | 	dirh	#63
02158                 | __system___setbaud_ret
02158     2D 00 64 FD | 	ret
0215c                 | 
0215c                 | __system___txraw
0215c     02 5A 05 F6 | 	mov	COUNT_, #2
02160     B0 00 A0 FD | 	call	#pushregs_
02164     29 5D 02 F6 | 	mov	local01, arg01
02168     0E 5F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0216c     0C 00 90 5D |  if_ne	jmp	#LR__0070
02170     C2 01 00 FF 
02174     00 52 06 F6 | 	mov	arg01, ##230400
02178     9C FF BF FD | 	call	#__system___setbaud
0217c                 | LR__0070
0217c     3E 5C 26 FC | 	wypin	local01, #62
02180     1F 02 64 FD | 	waitx	#1
02184     80 DE 9F FE | 	loc	pa,	#(@LR__0072-@LR__0071)
02188     93 00 A0 FD | 	call	#FCACHE_LOAD_
0218c                 | LR__0071
0218c     40 7C 74 FD | 	testp	#62 wc
02190     F8 FF 9F 3D |  if_nc	jmp	#LR__0071
02194                 | LR__0072
02194     01 2C 06 F6 | 	mov	result1, #1
02198     AF F0 03 F6 | 	mov	ptra, fp
0219c     BF 00 A0 FD | 	call	#popregs_
021a0                 | __system___txraw_ret
021a0     2D 00 64 FD | 	ret
021a4                 | 
021a4                 | __system___rxraw
021a4     0D 5A 05 F6 | 	mov	COUNT_, #13
021a8     B0 00 A0 FD | 	call	#pushregs_
021ac     29 5D 02 F6 | 	mov	local01, arg01
021b0     0E 5F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
021b4     0C 00 90 5D |  if_ne	jmp	#LR__0073
021b8     C2 01 00 FF 
021bc     00 52 06 F6 | 	mov	arg01, ##230400
021c0     54 FF BF FD | 	call	#__system___setbaud
021c4                 | LR__0073
021c4     00 5C 0E F2 | 	cmp	local01, #0 wz
021c8     18 00 90 AD |  if_e	jmp	#LR__0074
021cc     14 60 06 FB | 	rdlong	local03, #20
021d0     0A 60 46 F0 | 	shr	local03, #10
021d4     30 5D 02 FD | 	qmul	local01, local03
021d8     18 62 62 FD | 	getqx	local04
021dc     1A 64 62 FD | 	getct	local05
021e0     31 65 02 F1 | 	add	local05, local04
021e4                 | LR__0074
021e4     01 66 66 F6 | 	neg	local06, #1
021e8     00 68 06 F6 | 	mov	local07, #0
021ec     04 1C 06 F1 | 	add	ptr___system__dat__, #4
021f0     0E 6B 02 FB | 	rdlong	local08, ptr___system__dat__
021f4     04 1C 86 F1 | 	sub	ptr___system__dat__, #4
021f8                 | LR__0075
021f8     08 6A 16 F4 | 	testb	local08, #8 wc
021fc     09 6A 76 F4 | 	testbn	local08, #9 andc
02200     0A 6A 46 F0 | 	shr	local08, #10
02204     01 68 06 C6 |  if_b	mov	local07, #1
02208     10 00 90 CD |  if_b	jmp	#LR__0076
0220c     40 7E 6C FD | 	testp	#63 wz
02210     01 68 06 A6 |  if_e	mov	local07, #1
02214     3F 6A 8E AA |  if_e	rdpin	local08, #63
02218     04 6A 46 A0 |  if_e	shr	local08, #4
0221c                 | LR__0076
0221c     00 5E 06 F6 | 	mov	local02, #0
02220     00 68 0E F2 | 	cmp	local07, #0 wz
02224     01 5E 66 56 |  if_ne	neg	local02, #1
02228     00 6C 06 F6 | 	mov	local09, #0
0222c     00 6E 06 F6 | 	mov	local10, #0
02230     00 5C 0E F2 | 	cmp	local01, #0 wz
02234     01 6E 66 56 |  if_ne	neg	local10, #1
02238     00 70 06 F6 | 	mov	local11, #0
0223c     00 72 06 F6 | 	mov	local12, #0
02240     1A 74 62 FD | 	getct	local13
02244     32 75 82 F1 | 	sub	local13, local05
02248     00 74 5E F2 | 	cmps	local13, #0 wcz
0224c     01 72 66 C6 |  if_b	neg	local12, #1
02250     00 72 0E F2 | 	cmp	local12, #0 wz
02254     01 70 66 56 |  if_ne	neg	local11, #1
02258     38 6F CA F7 | 	test	local10, local11 wz
0225c     01 6C 66 56 |  if_ne	neg	local09, #1
02260     36 5F 4A F5 | 	or	local02, local09 wz
02264     90 FF 9F AD |  if_e	jmp	#LR__0075
02268     00 68 0E F2 | 	cmp	local07, #0 wz
0226c     35 67 02 56 |  if_ne	mov	local06, local08
02270     FF 66 06 55 |  if_ne	and	local06, #255
02274     04 1C 06 F1 | 	add	ptr___system__dat__, #4
02278     0E 6B 62 FC | 	wrlong	local08, ptr___system__dat__
0227c     04 1C 86 F1 | 	sub	ptr___system__dat__, #4
02280     33 2D 02 F6 | 	mov	result1, local06
02284     AF F0 03 F6 | 	mov	ptra, fp
02288     BF 00 A0 FD | 	call	#popregs_
0228c                 | __system___rxraw_ret
0228c     2D 00 64 FD | 	ret
02290                 | 
02290                 | __system____builtin_memmove
02290     29 33 02 F6 | 	mov	_var01, arg01
02294     2A 53 5A F2 | 	cmps	arg01, arg02 wcz
02298     50 00 90 3D |  if_ae	jmp	#LR__0084
0229c     80 DD 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
022a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
022a4                 | LR__0077
022a4     03 56 5E F2 | 	cmps	arg03, #3 wcz
022a8     18 00 90 ED |  if_be	jmp	#LR__0079
022ac     2A 35 02 FB | 	rdlong	_var02, arg02
022b0     29 35 62 FC | 	wrlong	_var02, arg01
022b4     04 52 06 F1 | 	add	arg01, #4
022b8     04 54 06 F1 | 	add	arg02, #4
022bc     04 56 86 F1 | 	sub	arg03, #4
022c0     E0 FF 9F FD | 	jmp	#LR__0077
022c4                 | LR__0078
022c4                 | LR__0079
022c4     2B 37 0A F6 | 	mov	_var03, arg03 wz
022c8     4C 00 90 AD |  if_e	jmp	#LR__0090
022cc     44 DD 9F FE | 	loc	pa,	#(@LR__0082-@LR__0080)
022d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
022d4                 | LR__0080
022d4     1B 09 D8 FC | 	rep	@LR__0083, _var03
022d8                 | LR__0081
022d8     2A 35 C2 FA | 	rdbyte	_var02, arg02
022dc     29 35 42 FC | 	wrbyte	_var02, arg01
022e0     01 52 06 F1 | 	add	arg01, #1
022e4     01 54 06 F1 | 	add	arg02, #1
022e8                 | LR__0082
022e8                 | LR__0083
022e8     2C 00 90 FD | 	jmp	#LR__0090
022ec                 | LR__0084
022ec     2B 53 02 F1 | 	add	arg01, arg03
022f0     2B 55 02 F1 | 	add	arg02, arg03
022f4     2B 39 0A F6 | 	mov	_var04, arg03 wz
022f8     1C 00 90 AD |  if_e	jmp	#LR__0089
022fc     14 DD 9F FE | 	loc	pa,	#(@LR__0087-@LR__0085)
02300     93 00 A0 FD | 	call	#FCACHE_LOAD_
02304                 | LR__0085
02304     1C 09 D8 FC | 	rep	@LR__0088, _var04
02308                 | LR__0086
02308     01 52 86 F1 | 	sub	arg01, #1
0230c     01 54 86 F1 | 	sub	arg02, #1
02310     2A 35 C2 FA | 	rdbyte	_var02, arg02
02314     29 35 42 FC | 	wrbyte	_var02, arg01
02318                 | LR__0087
02318                 | LR__0088
02318                 | LR__0089
02318                 | LR__0090
02318     19 2D 02 F6 | 	mov	result1, _var01
0231c                 | __system____builtin_memmove_ret
0231c     2D 00 64 FD | 	ret
02320                 | 
02320                 | __system__longmove
02320     29 33 02 F6 | 	mov	_var01, arg01
02324     2A 53 5A F2 | 	cmps	arg01, arg02 wcz
02328     28 00 90 3D |  if_ae	jmp	#LR__0095
0232c     2B 35 0A F6 | 	mov	_var02, arg03 wz
02330     54 00 90 AD |  if_e	jmp	#LR__0101
02334     DC DC 9F FE | 	loc	pa,	#(@LR__0093-@LR__0091)
02338     93 00 A0 FD | 	call	#FCACHE_LOAD_
0233c                 | LR__0091
0233c     1A 09 D8 FC | 	rep	@LR__0094, _var02
02340                 | LR__0092
02340     2A 37 02 FB | 	rdlong	_var03, arg02
02344     29 37 62 FC | 	wrlong	_var03, arg01
02348     04 52 06 F1 | 	add	arg01, #4
0234c     04 54 06 F1 | 	add	arg02, #4
02350                 | LR__0093
02350                 | LR__0094
02350     34 00 90 FD | 	jmp	#LR__0101
02354                 | LR__0095
02354     2B 39 02 F6 | 	mov	_var04, arg03
02358     02 38 66 F0 | 	shl	_var04, #2
0235c     1C 53 02 F1 | 	add	arg01, _var04
02360     1C 55 02 F1 | 	add	arg02, _var04
02364     2B 3B 0A F6 | 	mov	_var05, arg03 wz
02368     1C 00 90 AD |  if_e	jmp	#LR__0100
0236c     A4 DC 9F FE | 	loc	pa,	#(@LR__0098-@LR__0096)
02370     93 00 A0 FD | 	call	#FCACHE_LOAD_
02374                 | LR__0096
02374     1D 09 D8 FC | 	rep	@LR__0099, _var05
02378                 | LR__0097
02378     04 52 86 F1 | 	sub	arg01, #4
0237c     04 54 86 F1 | 	sub	arg02, #4
02380     2A 37 02 FB | 	rdlong	_var03, arg02
02384     29 37 62 FC | 	wrlong	_var03, arg01
02388                 | LR__0098
02388                 | LR__0099
02388                 | LR__0100
02388                 | LR__0101
02388     19 2D 02 F6 | 	mov	result1, _var01
0238c                 | __system__longmove_ret
0238c     2D 00 64 FD | 	ret
02390                 | 
02390                 | __system____builtin_strcpy
02390     29 33 02 F6 | 	mov	_var01, arg01
02394     7C DC 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
02398     93 00 A0 FD | 	call	#FCACHE_LOAD_
0239c                 | LR__0102
0239c     2A 35 CA FA | 	rdbyte	_var02, arg02 wz
023a0     29 35 42 FC | 	wrbyte	_var02, arg01
023a4     01 54 06 F1 | 	add	arg02, #1
023a8     01 52 06 F1 | 	add	arg01, #1
023ac     EC FF 9F 5D |  if_ne	jmp	#LR__0102
023b0                 | LR__0103
023b0     19 2D 02 F6 | 	mov	result1, _var01
023b4                 | __system____builtin_strcpy_ret
023b4     2D 00 64 FD | 	ret
023b8                 | 
023b8                 | __system____topofstack
023b8     00 5A 05 F6 | 	mov	COUNT_, #0
023bc     B0 00 A0 FD | 	call	#pushregs_
023c0     0C F0 07 F1 | 	add	ptra, #12
023c4     04 5E 05 F1 | 	add	fp, #4
023c8     AF 52 62 FC | 	wrlong	arg01, fp
023cc     AF 2C 02 F6 | 	mov	result1, fp
023d0     04 5E 85 F1 | 	sub	fp, #4
023d4     AF F0 03 F6 | 	mov	ptra, fp
023d8     BF 00 A0 FD | 	call	#popregs_
023dc                 | __system____topofstack_ret
023dc     2D 00 64 FD | 	ret
023e0                 | 
023e0                 | __system___make_methodptr
023e0     04 5A 05 F6 | 	mov	COUNT_, #4
023e4     B0 00 A0 FD | 	call	#pushregs_
023e8     29 5D 02 F6 | 	mov	local01, arg01
023ec     2A 5F 02 F6 | 	mov	local02, arg02
023f0     08 52 06 F6 | 	mov	arg01, #8
023f4     B0 12 B0 FD | 	call	#__system___gc_alloc_managed
023f8     16 61 0A F6 | 	mov	local03, result1 wz
023fc     10 00 90 AD |  if_e	jmp	#LR__0104
02400     30 5D 62 FC | 	wrlong	local01, local03
02404     30 63 02 F6 | 	mov	local04, local03
02408     04 62 06 F1 | 	add	local04, #4
0240c     31 5F 62 FC | 	wrlong	local02, local04
02410                 | LR__0104
02410     30 2D 02 F6 | 	mov	result1, local03
02414     AF F0 03 F6 | 	mov	ptra, fp
02418     BF 00 A0 FD | 	call	#popregs_
0241c                 | __system___make_methodptr_ret
0241c     2D 00 64 FD | 	ret
02420                 | 
02420                 | __system___lockmem
02420     02 5A 05 F6 | 	mov	COUNT_, #2
02424     B0 00 A0 FD | 	call	#pushregs_
02428     01 2C 62 FD | 	cogid	result1
0242c     16 5D 02 F6 | 	mov	local01, result1
02430     00 5D 06 F1 | 	add	local01, #256
02434                 | LR__0105
02434     29 5F 0A FB | 	rdlong	local02, arg01 wz
02438     29 5D 62 AC |  if_e	wrlong	local01, arg01
0243c     29 5F 02 AB |  if_e	rdlong	local02, arg01
02440     29 5F 02 AB |  if_e	rdlong	local02, arg01
02444     2E 5F 0A F2 | 	cmp	local02, local01 wz
02448     E8 FF 9F 5D |  if_ne	jmp	#LR__0105
0244c     AF F0 03 F6 | 	mov	ptra, fp
02450     BF 00 A0 FD | 	call	#popregs_
02454                 | __system___lockmem_ret
02454     2D 00 64 FD | 	ret
02458                 | 
02458                 | __system___tx
02458     02 5A 05 F6 | 	mov	COUNT_, #2
0245c     B0 00 A0 FD | 	call	#pushregs_
02460     29 5D 02 F6 | 	mov	local01, arg01
02464     0A 5C 0E F2 | 	cmp	local01, #10 wz
02468     20 00 90 5D |  if_ne	jmp	#LR__0106
0246c     08 1C 06 F1 | 	add	ptr___system__dat__, #8
02470     0E 5F 02 FB | 	rdlong	local02, ptr___system__dat__
02474     08 1C 86 F1 | 	sub	ptr___system__dat__, #8
02478     02 5E CE F7 | 	test	local02, #2 wz
0247c     0C 00 90 AD |  if_e	jmp	#LR__0106
02480     0D 5E 06 F6 | 	mov	local02, #13
02484     0D 52 06 F6 | 	mov	arg01, #13
02488     D0 FC BF FD | 	call	#__system___txraw
0248c                 | LR__0106
0248c     2E 53 02 F6 | 	mov	arg01, local01
02490     C8 FC BF FD | 	call	#__system___txraw
02494     AF F0 03 F6 | 	mov	ptra, fp
02498     BF 00 A0 FD | 	call	#popregs_
0249c                 | __system___tx_ret
0249c     2D 00 64 FD | 	ret
024a0                 | 
024a0                 | __system___rx
024a0     02 5A 05 F6 | 	mov	COUNT_, #2
024a4     B0 00 A0 FD | 	call	#pushregs_
024a8                 | LR__0107
024a8     00 52 06 F6 | 	mov	arg01, #0
024ac     F4 FC BF FD | 	call	#__system___rxraw
024b0     16 5D 02 F6 | 	mov	local01, result1
024b4     FF FF 7F FF 
024b8     FF 5D 0E F2 | 	cmp	local01, ##-1 wz
024bc     E8 FF 9F AD |  if_e	jmp	#LR__0107
024c0     0D 5C 0E F2 | 	cmp	local01, #13 wz
024c4     14 00 90 5D |  if_ne	jmp	#LR__0108
024c8     08 1C 06 F1 | 	add	ptr___system__dat__, #8
024cc     0E 5F 02 FB | 	rdlong	local02, ptr___system__dat__
024d0     08 1C 86 F1 | 	sub	ptr___system__dat__, #8
024d4     02 5E CE F7 | 	test	local02, #2 wz
024d8     0A 5C 06 56 |  if_ne	mov	local01, #10
024dc                 | LR__0108
024dc     08 1C 06 F1 | 	add	ptr___system__dat__, #8
024e0     0E 5F 02 FB | 	rdlong	local02, ptr___system__dat__
024e4     08 1C 86 F1 | 	sub	ptr___system__dat__, #8
024e8     01 5E CE F7 | 	test	local02, #1 wz
024ec     1C 00 90 AD |  if_e	jmp	#LR__0111
024f0     7F 5C 0E F2 | 	cmp	local01, #127 wz
024f4     0C 00 90 5D |  if_ne	jmp	#LR__0109
024f8     08 52 06 F6 | 	mov	arg01, #8
024fc     58 FF BF FD | 	call	#__system___tx
02500     08 00 90 FD | 	jmp	#LR__0110
02504                 | LR__0109
02504     2E 53 02 F6 | 	mov	arg01, local01
02508     4C FF BF FD | 	call	#__system___tx
0250c                 | LR__0110
0250c                 | LR__0111
0250c     2E 2D 02 F6 | 	mov	result1, local01
02510     AF F0 03 F6 | 	mov	ptra, fp
02514     BF 00 A0 FD | 	call	#popregs_
02518                 | __system___rx_ret
02518     2D 00 64 FD | 	ret
0251c                 | 
0251c                 | __system___basic_read_line
0251c     0B 5A 05 F6 | 	mov	COUNT_, #11
02520     B0 00 A0 FD | 	call	#pushregs_
02524     29 5D 02 F6 | 	mov	local01, arg01
02528     00 5E 06 F6 | 	mov	local02, #0
0252c     18 60 06 F6 | 	mov	local03, #24
02530     18 62 06 F6 | 	mov	local04, #24
02534     18 52 06 F6 | 	mov	arg01, #24
02538     6C 11 B0 FD | 	call	#__system___gc_alloc_managed
0253c     16 65 02 F6 | 	mov	local05, result1
02540     32 67 0A F6 | 	mov	local06, local05 wz
02544     33 2D 02 A6 |  if_e	mov	result1, local06
02548     BC 00 90 AD |  if_e	jmp	#LR__0117
0254c                 | LR__0112
0254c     2E 53 02 F6 | 	mov	arg01, local01
02550     CC 07 B0 FD | 	call	#__system___basic_get_char
02554     16 69 02 F6 | 	mov	local07, result1
02558     00 68 5E F2 | 	cmps	local07, #0 wcz
0255c     98 00 90 ED |  if_be	jmp	#LR__0116
02560     0D 68 0E F2 | 	cmp	local07, #13 wz
02564     14 00 90 5D |  if_ne	jmp	#LR__0113
02568     2E 53 02 F6 | 	mov	arg01, local01
0256c     0A 54 06 F6 | 	mov	arg02, #10
02570     00 56 06 F6 | 	mov	arg03, #0
02574     D0 06 B0 FD | 	call	#__system___basic_print_char
02578     7C 00 90 FD | 	jmp	#LR__0116
0257c                 | LR__0113
0257c     0A 68 0E F2 | 	cmp	local07, #10 wz
02580     74 00 90 AD |  if_e	jmp	#LR__0116
02584     08 68 0E F2 | 	cmp	local07, #8 wz
02588     08 00 90 AD |  if_e	jmp	#LR__0114
0258c     7F 68 0E F2 | 	cmp	local07, #127 wz
02590     0C 00 90 5D |  if_ne	jmp	#LR__0115
02594                 | LR__0114
02594     00 5E 5E F2 | 	cmps	local02, #0 wcz
02598     01 5E 86 11 |  if_a	sub	local02, #1
0259c     AC FF 9F FD | 	jmp	#LR__0112
025a0                 | LR__0115
025a0     33 6B 02 F6 | 	mov	local08, local06
025a4     2F 6B 02 F1 | 	add	local08, local02
025a8     35 69 42 FC | 	wrbyte	local07, local08
025ac     01 5E 06 F1 | 	add	local02, #1
025b0     30 5F 0A F2 | 	cmp	local02, local03 wz
025b4     94 FF 9F 5D |  if_ne	jmp	#LR__0112
025b8     30 6D 02 F6 | 	mov	local09, local03
025bc     20 6C 06 F1 | 	add	local09, #32
025c0     36 53 02 F6 | 	mov	arg01, local09
025c4     E0 10 B0 FD | 	call	#__system___gc_alloc_managed
025c8     16 6F 0A F6 | 	mov	local10, result1 wz
025cc     37 2D 02 A6 |  if_e	mov	result1, local10
025d0     34 00 90 AD |  if_e	jmp	#LR__0117
025d4     37 53 02 F6 | 	mov	arg01, local10
025d8     33 55 02 F6 | 	mov	arg02, local06
025dc     30 57 02 F6 | 	mov	arg03, local03
025e0     AC FC BF FD | 	call	#__system____builtin_memmove
025e4     36 61 02 F6 | 	mov	local03, local09
025e8     33 53 02 F6 | 	mov	arg01, local06
025ec     30 12 B0 FD | 	call	#__system___gc_free
025f0     37 67 02 F6 | 	mov	local06, local10
025f4     54 FF 9F FD | 	jmp	#LR__0112
025f8                 | LR__0116
025f8     33 71 02 F6 | 	mov	local11, local06
025fc     2F 71 02 F1 | 	add	local11, local02
02600     38 01 48 FC | 	wrbyte	#0, local11
02604     33 2D 02 F6 | 	mov	result1, local06
02608                 | LR__0117
02608     AF F0 03 F6 | 	mov	ptra, fp
0260c     BF 00 A0 FD | 	call	#popregs_
02610                 | __system___basic_read_line_ret
02610     2D 00 64 FD | 	ret
02614                 | 
02614                 | __system___basic_find_terminator
02614     29 33 0A F6 | 	mov	_var01, arg01 wz
02618     19 2D 02 A6 |  if_e	mov	result1, _var01
0261c     70 00 90 AD |  if_e	jmp	#__system___basic_find_terminator_ret
02620     00 34 06 F6 | 	mov	_var02, #0
02624                 | LR__0118
02624     19 37 C2 FA | 	rdbyte	_var03, _var01
02628     2C 36 0E F2 | 	cmp	_var03, #44 wz
0262c     0C 00 90 5D |  if_ne	jmp	#LR__0119
02630     00 34 0E F2 | 	cmp	_var02, #0 wz
02634     19 2D 02 A6 |  if_e	mov	result1, _var01
02638     54 00 90 AD |  if_e	jmp	#__system___basic_find_terminator_ret
0263c                 | LR__0119
0263c     00 36 0E F2 | 	cmp	_var03, #0 wz
02640     10 00 90 AD |  if_e	jmp	#LR__0120
02644     2C 36 0E F2 | 	cmp	_var03, #44 wz
02648     08 00 90 AD |  if_e	jmp	#LR__0120
0264c     0A 36 0E F2 | 	cmp	_var03, #10 wz
02650     08 00 90 5D |  if_ne	jmp	#LR__0121
02654                 | LR__0120
02654     19 2D 02 F6 | 	mov	result1, _var01
02658     34 00 90 FD | 	jmp	#__system___basic_find_terminator_ret
0265c                 | LR__0121
0265c     19 39 C2 FA | 	rdbyte	_var04, _var01
02660     22 38 0E F2 | 	cmp	_var04, #34 wz
02664     14 00 90 5D |  if_ne	jmp	#LR__0122
02668     01 38 06 F6 | 	mov	_var04, #1
0266c     1A 39 82 F1 | 	sub	_var04, _var02
02670     1C 35 0A F6 | 	mov	_var02, _var04 wz
02674     19 2D 02 A6 |  if_e	mov	result1, _var01
02678     14 00 90 AD |  if_e	jmp	#__system___basic_find_terminator_ret
0267c                 | LR__0122
0267c     19 39 02 F6 | 	mov	_var04, _var01
02680     19 3B 02 F6 | 	mov	_var05, _var01
02684     01 3A 06 F1 | 	add	_var05, #1
02688     1D 33 02 F6 | 	mov	_var01, _var05
0268c     94 FF 9F FD | 	jmp	#LR__0118
02690                 | __system___basic_find_terminator_ret
02690     2D 00 64 FD | 	ret
02694                 | 
02694                 | __system___basic_get_integer
02694     03 5A 05 F6 | 	mov	COUNT_, #3
02698     B0 00 A0 FD | 	call	#pushregs_
0269c     29 5D 02 F6 | 	mov	local01, arg01
026a0     00 54 06 F6 | 	mov	arg02, #0
026a4     38 0B B0 FD | 	call	#__system____builtin_atoi
026a8     16 5F 02 F6 | 	mov	local02, result1
026ac     2E 53 02 F6 | 	mov	arg01, local01
026b0     60 FF BF FD | 	call	#__system___basic_find_terminator
026b4     16 2F 02 F6 | 	mov	result2, result1
026b8     17 61 CA FA | 	rdbyte	local03, result2 wz
026bc     01 2E 06 51 |  if_ne	add	result2, #1
026c0     2F 2D 02 F6 | 	mov	result1, local02
026c4     AF F0 03 F6 | 	mov	ptra, fp
026c8     BF 00 A0 FD | 	call	#popregs_
026cc                 | __system___basic_get_integer_ret
026cc     2D 00 64 FD | 	ret
026d0                 | 
026d0                 | __system___waitms
026d0     03 5A 05 F6 | 	mov	COUNT_, #3
026d4     B0 00 A0 FD | 	call	#pushregs_
026d8     29 5D 02 F6 | 	mov	local01, arg01
026dc     14 5E 06 FB | 	rdlong	local02, #20
026e0     34 D9 9F FE | 	loc	pa,	#(@LR__0124-@LR__0123)
026e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
026e8                 | LR__0123
026e8     01 00 00 FF 
026ec     E8 5D 5E F2 | 	cmps	local01, ##1000 wcz
026f0     1F 5E 62 1D |  if_a	waitx	local02
026f4     01 00 00 1F 
026f8     E8 5D 86 11 |  if_a	sub	local01, ##1000
026fc     E8 FF 9F 1D |  if_a	jmp	#LR__0123
02700                 | LR__0124
02700     0C 1C 06 F1 | 	add	ptr___system__dat__, #12
02704     0E 61 0A FB | 	rdlong	local03, ptr___system__dat__ wz
02708     0C 1C 86 F1 | 	sub	ptr___system__dat__, #12
0270c     20 00 90 5D |  if_ne	jmp	#LR__0125
02710     2F FD 02 F6 | 	mov	muldiva_, local02
02714     01 00 00 FF 
02718     E8 FF 06 F6 | 	mov	muldivb_, ##1000
0271c     CC 00 A0 FD | 	call	#unsdivide_
02720     7F 61 02 F6 | 	mov	local03, muldivb_
02724     0C 1C 06 F1 | 	add	ptr___system__dat__, #12
02728     0E FF 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0272c     0C 1C 86 F1 | 	sub	ptr___system__dat__, #12
02730                 | LR__0125
02730     00 5C 5E F2 | 	cmps	local01, #0 wcz
02734     30 5D 02 1D |  if_a	qmul	local01, local03
02738     18 52 62 1D |  if_a	getqx	arg01
0273c     1F 52 62 1D |  if_a	waitx	arg01
02740     AF F0 03 F6 | 	mov	ptra, fp
02744     BF 00 A0 FD | 	call	#popregs_
02748                 | __system___waitms_ret
02748     2D 00 64 FD | 	ret
0274c                 | 
0274c                 | __system___waitus
0274c     02 5A 05 F6 | 	mov	COUNT_, #2
02750     B0 00 A0 FD | 	call	#pushregs_
02754     29 5D 02 F6 | 	mov	local01, arg01
02758     10 1C 06 F1 | 	add	ptr___system__dat__, #16
0275c     0E 5F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02760     10 1C 86 F1 | 	sub	ptr___system__dat__, #16
02764     20 00 90 5D |  if_ne	jmp	#LR__0126
02768     14 FC 06 FB | 	rdlong	muldiva_, #20
0276c     A1 07 00 FF 
02770     40 FE 06 F6 | 	mov	muldivb_, ##1000000
02774     CC 00 A0 FD | 	call	#unsdivide_
02778     7F 5F 02 F6 | 	mov	local02, muldivb_
0277c     10 1C 06 F1 | 	add	ptr___system__dat__, #16
02780     0E FF 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02784     10 1C 86 F1 | 	sub	ptr___system__dat__, #16
02788                 | LR__0126
02788     2F 5D 02 FD | 	qmul	local01, local02
0278c     18 52 62 FD | 	getqx	arg01
02790     1F 52 62 FD | 	waitx	arg01
02794     AF F0 03 F6 | 	mov	ptra, fp
02798     BF 00 A0 FD | 	call	#popregs_
0279c                 | __system___waitus_ret
0279c     2D 00 64 FD | 	ret
027a0                 | 
027a0                 | __system___mount
027a0     0D 5A 05 F6 | 	mov	COUNT_, #13
027a4     B0 00 A0 FD | 	call	#pushregs_
027a8     29 5D 02 F6 | 	mov	local01, arg01
027ac     2A 5F 02 F6 | 	mov	local02, arg02
027b0     01 60 66 F6 | 	neg	local03, #1
027b4     2E 63 C2 FA | 	rdbyte	local04, local01
027b8     2F 62 0E F2 | 	cmp	local04, #47 wz
027bc     1C 00 90 AD |  if_e	jmp	#LR__0127
027c0     01 00 00 FF 
027c4     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
027c8     0E 15 68 FC | 	wrlong	#10, ptr___system__dat__
027cc     01 00 00 FF 
027d0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
027d4     01 2C 66 F6 | 	neg	result1, #1
027d8     30 01 90 FD | 	jmp	#LR__0138
027dc                 | LR__0127
027dc     18 1C 06 F1 | 	add	ptr___system__dat__, #24
027e0     0E 65 02 F6 | 	mov	local05, ptr___system__dat__
027e4     00 66 06 F6 | 	mov	local06, #0
027e8     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
027ec                 | LR__0128
027ec     33 63 02 F6 | 	mov	local04, local06
027f0     02 62 66 F0 | 	shl	local04, #2
027f4     18 1C 06 F1 | 	add	ptr___system__dat__, #24
027f8     0E 63 02 F1 | 	add	local04, ptr___system__dat__
027fc     31 69 0A FB | 	rdlong	local07, local04 wz
02800     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
02804     0C 00 90 5D |  if_ne	jmp	#LR__0129
02808     00 60 5E F2 | 	cmps	local03, #0 wcz
0280c     33 61 02 C6 |  if_b	mov	local03, local06
02810     6C 00 90 CD |  if_b	jmp	#LR__0133
02814                 | LR__0129
02814     32 53 02 FB | 	rdlong	arg01, local05
02818     00 6A 06 F6 | 	mov	local08, #0
0281c     F0 D7 9F FE | 	loc	pa,	#(@LR__0131-@LR__0130)
02820     93 00 A0 FD | 	call	#FCACHE_LOAD_
02824                 | LR__0130
02824     29 6D CA FA | 	rdbyte	local09, arg01 wz
02828     01 6A 06 51 |  if_ne	add	local08, #1
0282c     01 52 06 51 |  if_ne	add	arg01, #1
02830     F0 FF 9F 5D |  if_ne	jmp	#LR__0130
02834                 | LR__0131
02834     35 2D 02 F6 | 	mov	result1, local08
02838     16 6F 02 F6 | 	mov	local10, result1
0283c     37 71 02 F6 | 	mov	local11, local10
02840     2E 71 02 F1 | 	add	local11, local01
02844     38 63 C2 FA | 	rdbyte	local04, local11
02848     2F 62 0E F2 | 	cmp	local04, #47 wz
0284c     30 00 90 5D |  if_ne	jmp	#LR__0132
02850     2E 53 02 F6 | 	mov	arg01, local01
02854     33 73 02 F6 | 	mov	local12, local06
02858     02 72 66 F0 | 	shl	local12, #2
0285c     18 1C 06 F1 | 	add	ptr___system__dat__, #24
02860     0E 73 02 F1 | 	add	local12, ptr___system__dat__
02864     39 55 02 FB | 	rdlong	arg02, local12
02868     37 57 02 F6 | 	mov	arg03, local10
0286c     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
02870     98 22 B0 FD | 	call	#__system__strncmp
02874     00 2C 0E F2 | 	cmp	result1, #0 wz
02878     33 61 02 A6 |  if_e	mov	local03, local06
0287c     10 00 90 AD |  if_e	jmp	#LR__0134
02880                 | LR__0132
02880                 | LR__0133
02880     01 66 06 F1 | 	add	local06, #1
02884     04 64 06 F1 | 	add	local05, #4
02888     04 66 5E F2 | 	cmps	local06, #4 wcz
0288c     5C FF 9F CD |  if_b	jmp	#LR__0128
02890                 | LR__0134
02890     FF FF 7F FF 
02894     FF 61 0E F2 | 	cmp	local03, ##-1 wz
02898     1C 00 90 5D |  if_ne	jmp	#LR__0135
0289c     01 00 00 FF 
028a0     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
028a4     0E 17 68 FC | 	wrlong	#11, ptr___system__dat__
028a8     01 00 00 FF 
028ac     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
028b0     01 2C 66 F6 | 	neg	result1, #1
028b4     54 00 90 FD | 	jmp	#LR__0138
028b8                 | LR__0135
028b8     30 67 02 F6 | 	mov	local06, local03
028bc     33 75 02 F6 | 	mov	local13, local06
028c0     02 74 66 F0 | 	shl	local13, #2
028c4     28 1C 06 F1 | 	add	ptr___system__dat__, #40
028c8     0E 75 02 F1 | 	add	local13, ptr___system__dat__
028cc     3A 5F 62 FC | 	wrlong	local02, local13
028d0     00 5E 0E F2 | 	cmp	local02, #0 wz
028d4     28 1C 86 F1 | 	sub	ptr___system__dat__, #40
028d8     18 00 90 5D |  if_ne	jmp	#LR__0136
028dc     02 66 66 F0 | 	shl	local06, #2
028e0     18 1C 06 F1 | 	add	ptr___system__dat__, #24
028e4     0E 67 02 F1 | 	add	local06, ptr___system__dat__
028e8     33 01 68 FC | 	wrlong	#0, local06
028ec     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
028f0     14 00 90 FD | 	jmp	#LR__0137
028f4                 | LR__0136
028f4     02 66 66 F0 | 	shl	local06, #2
028f8     18 1C 06 F1 | 	add	ptr___system__dat__, #24
028fc     0E 67 02 F1 | 	add	local06, ptr___system__dat__
02900     33 5D 62 FC | 	wrlong	local01, local06
02904     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
02908                 | LR__0137
02908     00 2C 06 F6 | 	mov	result1, #0
0290c                 | LR__0138
0290c     AF F0 03 F6 | 	mov	ptra, fp
02910     BF 00 A0 FD | 	call	#popregs_
02914                 | __system___mount_ret
02914     2D 00 64 FD | 	ret
02918                 | 
02918                 | __system____getvfsforfile
02918     15 5A 05 F6 | 	mov	COUNT_, #21
0291c     B0 00 A0 FD | 	call	#pushregs_
02920     29 5D 02 F6 | 	mov	local01, arg01
02924     2A 5F 02 F6 | 	mov	local02, arg02
02928     2B 61 02 F6 | 	mov	local03, arg03
0292c     2F 63 C2 FA | 	rdbyte	local04, local02
02930     2F 62 0E F2 | 	cmp	local04, #47 wz
02934     14 00 90 5D |  if_ne	jmp	#LR__0139
02938     2E 53 02 F6 | 	mov	arg01, local01
0293c     2F 55 02 F6 | 	mov	arg02, local02
02940     00 57 06 F6 | 	mov	arg03, #256
02944     F4 20 B0 FD | 	call	#__system__strncpy
02948     40 00 90 FD | 	jmp	#LR__0140
0294c                 | LR__0139
0294c     38 1C 06 F1 | 	add	ptr___system__dat__, #56
02950     0E 65 02 F6 | 	mov	local05, ptr___system__dat__
02954     2E 53 02 F6 | 	mov	arg01, local01
02958     32 55 02 F6 | 	mov	arg02, local05
0295c     00 57 06 F6 | 	mov	arg03, #256
02960     38 1C 86 F1 | 	sub	ptr___system__dat__, #56
02964     D4 20 B0 FD | 	call	#__system__strncpy
02968     61 00 00 FF 
0296c     B8 55 06 F6 | 	mov	arg02, ##@LR__0826
02970     2E 53 02 F6 | 	mov	arg01, local01
02974     00 57 06 F6 | 	mov	arg03, #256
02978     0C 21 B0 FD | 	call	#__system__strncat
0297c     2E 53 02 F6 | 	mov	arg01, local01
02980     2F 55 02 F6 | 	mov	arg02, local02
02984     00 57 06 F6 | 	mov	arg03, #256
02988     FC 20 B0 FD | 	call	#__system__strncat
0298c                 | LR__0140
0298c     18 1C 06 F1 | 	add	ptr___system__dat__, #24
02990     0E 67 02 F6 | 	mov	local06, ptr___system__dat__
02994     00 68 06 F6 | 	mov	local07, #0
02998     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
0299c                 | LR__0141
0299c     34 63 02 F6 | 	mov	local04, local07
029a0     02 62 66 F0 | 	shl	local04, #2
029a4     18 1C 06 F1 | 	add	ptr___system__dat__, #24
029a8     0E 63 02 F1 | 	add	local04, ptr___system__dat__
029ac     31 6B 0A FB | 	rdlong	local08, local04 wz
029b0     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
029b4     1C 01 90 AD |  if_e	jmp	#LR__0151
029b8     33 53 02 FB | 	rdlong	arg01, local06
029bc     00 6C 06 F6 | 	mov	local09, #0
029c0     4C D6 9F FE | 	loc	pa,	#(@LR__0143-@LR__0142)
029c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
029c8                 | LR__0142
029c8     29 6F CA FA | 	rdbyte	local10, arg01 wz
029cc     01 6C 06 51 |  if_ne	add	local09, #1
029d0     01 52 06 51 |  if_ne	add	arg01, #1
029d4     F0 FF 9F 5D |  if_ne	jmp	#LR__0142
029d8                 | LR__0143
029d8     36 2D 02 F6 | 	mov	result1, local09
029dc     16 71 02 F6 | 	mov	local11, result1
029e0     38 73 02 F6 | 	mov	local12, local11
029e4     2E 73 02 F1 | 	add	local12, local01
029e8     39 63 C2 FA | 	rdbyte	local04, local12
029ec     2F 62 0E F2 | 	cmp	local04, #47 wz
029f0     10 00 90 AD |  if_e	jmp	#LR__0144
029f4     38 75 02 F6 | 	mov	local13, local11
029f8     2E 75 02 F1 | 	add	local13, local01
029fc     3A 77 CA FA | 	rdbyte	local14, local13 wz
02a00     D0 00 90 5D |  if_ne	jmp	#LR__0150
02a04                 | LR__0144
02a04     2E 53 02 F6 | 	mov	arg01, local01
02a08     34 79 02 F6 | 	mov	local15, local07
02a0c     02 78 66 F0 | 	shl	local15, #2
02a10     18 1C 06 F1 | 	add	ptr___system__dat__, #24
02a14     0E 79 02 F1 | 	add	local15, ptr___system__dat__
02a18     3C 55 02 FB | 	rdlong	arg02, local15
02a1c     38 57 02 F6 | 	mov	arg03, local11
02a20     18 1C 86 F1 | 	sub	ptr___system__dat__, #24
02a24     E4 20 B0 FD | 	call	#__system__strncmp
02a28     16 7B 0A F6 | 	mov	local16, result1 wz
02a2c     A4 00 90 5D |  if_ne	jmp	#LR__0150
02a30     34 63 02 F6 | 	mov	local04, local07
02a34     02 62 66 F0 | 	shl	local04, #2
02a38     28 1C 06 F1 | 	add	ptr___system__dat__, #40
02a3c     0E 63 02 F1 | 	add	local04, ptr___system__dat__
02a40     31 7D 02 FB | 	rdlong	local17, local04
02a44     28 1C 86 F1 | 	sub	ptr___system__dat__, #40
02a48     00 D6 9F FE | 	loc	pa,	#(@LR__0147-@LR__0145)
02a4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a50                 | LR__0145
02a50     38 6B 02 F6 | 	mov	local08, local11
02a54     01 6A 06 F1 | 	add	local08, #1
02a58     2E 6B 02 F1 | 	add	local08, local01
02a5c     35 63 C2 FA | 	rdbyte	local04, local08
02a60     2E 62 0E F2 | 	cmp	local04, #46 wz
02a64     34 00 90 5D |  if_ne	jmp	#LR__0148
02a68     38 7F 02 F6 | 	mov	local18, local11
02a6c     02 7E 06 F1 | 	add	local18, #2
02a70     2E 7F 02 F1 | 	add	local18, local01
02a74     3F 75 C2 FA | 	rdbyte	local13, local18
02a78     2F 74 0E F2 | 	cmp	local13, #47 wz
02a7c     14 00 90 AD |  if_e	jmp	#LR__0146
02a80     38 81 02 F6 | 	mov	local19, local11
02a84     02 80 06 F1 | 	add	local19, #2
02a88     2E 81 02 F1 | 	add	local19, local01
02a8c     40 83 CA FA | 	rdbyte	local20, local19 wz
02a90     08 00 90 5D |  if_ne	jmp	#LR__0148
02a94                 | LR__0146
02a94     01 70 06 F1 | 	add	local11, #1
02a98     B4 FF 9F FD | 	jmp	#LR__0145
02a9c                 | LR__0147
02a9c                 | LR__0148
02a9c     00 60 0E F2 | 	cmp	local03, #0 wz
02aa0     10 00 90 AD |  if_e	jmp	#LR__0149
02aa4     30 53 02 F6 | 	mov	arg01, local03
02aa8     2E 55 02 F6 | 	mov	arg02, local01
02aac     00 57 06 F6 | 	mov	arg03, #256
02ab0     88 1F B0 FD | 	call	#__system__strncpy
02ab4                 | LR__0149
02ab4     38 85 02 F6 | 	mov	local21, local11
02ab8     2E 55 02 F6 | 	mov	arg02, local01
02abc     42 55 02 F1 | 	add	arg02, local21
02ac0     01 54 06 F1 | 	add	arg02, #1
02ac4     2E 53 02 F6 | 	mov	arg01, local01
02ac8     C4 F8 BF FD | 	call	#__system____builtin_strcpy
02acc     3E 2D 02 F6 | 	mov	result1, local17
02ad0     24 00 90 FD | 	jmp	#LR__0152
02ad4                 | LR__0150
02ad4                 | LR__0151
02ad4     01 68 06 F1 | 	add	local07, #1
02ad8     04 66 06 F1 | 	add	local06, #4
02adc     04 68 5E F2 | 	cmps	local07, #4 wcz
02ae0     B8 FE 9F CD |  if_b	jmp	#LR__0141
02ae4     03 00 00 FF 
02ae8     B0 1C 06 F1 | 	add	ptr___system__dat__, ##1712
02aec     0E 2D 02 FB | 	rdlong	result1, ptr___system__dat__
02af0     03 00 00 FF 
02af4     B0 1C 86 F1 | 	sub	ptr___system__dat__, ##1712
02af8                 | LR__0152
02af8     AF F0 03 F6 | 	mov	ptra, fp
02afc     BF 00 A0 FD | 	call	#popregs_
02b00                 | __system____getvfsforfile_ret
02b00     2D 00 64 FD | 	ret
02b04                 | 
02b04                 | __system___basic_open
02b04     05 5A 05 F6 | 	mov	COUNT_, #5
02b08     B0 00 A0 FD | 	call	#pushregs_
02b0c     2A 5D 02 F6 | 	mov	local01, arg02
02b10     2B 5F 02 F6 | 	mov	local02, arg03
02b14     2C 61 02 F6 | 	mov	local03, arg04
02b18     EC 1E B0 FD | 	call	#__system____getftab
02b1c     16 63 0A F6 | 	mov	local04, result1 wz
02b20     18 00 90 5D |  if_ne	jmp	#LR__0153
02b24     03 53 02 F6 | 	mov	arg01, abortchain
02b28     0C 54 06 F6 | 	mov	arg02, #12
02b2c     01 56 06 F6 | 	mov	arg03, #1
02b30     F0 00 A0 FD | 	call	#__longjmp
02b34     01 2C 66 F6 | 	neg	result1, #1
02b38     70 00 90 FD | 	jmp	#LR__0157
02b3c                 | LR__0153
02b3c     00 5C 0E F2 | 	cmp	local01, #0 wz
02b40     48 00 90 AD |  if_e	jmp	#LR__0155
02b44     04 52 06 F6 | 	mov	arg01, #4
02b48     5C 0B B0 FD | 	call	#__system___gc_alloc_managed
02b4c     16 65 0A F6 | 	mov	local05, result1 wz
02b50     18 00 90 5D |  if_ne	jmp	#LR__0154
02b54     03 53 02 F6 | 	mov	arg01, abortchain
02b58     07 54 06 F6 | 	mov	arg02, #7
02b5c     01 56 06 F6 | 	mov	arg03, #1
02b60     F0 00 A0 FD | 	call	#__longjmp
02b64     01 2C 66 F6 | 	neg	result1, #1
02b68     40 00 90 FD | 	jmp	#LR__0157
02b6c                 | LR__0154
02b6c     32 5D 62 FC | 	wrlong	local01, local05
02b70     07 55 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
02b74     32 53 02 F6 | 	mov	arg01, local05
02b78     64 F8 BF FD | 	call	#__system___make_methodptr
02b7c     18 62 06 F1 | 	add	local04, #24
02b80     31 2D 62 FC | 	wrlong	result1, local04
02b84     18 62 86 F1 | 	sub	local04, #24
02b88     0C 00 90 FD | 	jmp	#LR__0156
02b8c                 | LR__0155
02b8c     18 62 06 F1 | 	add	local04, #24
02b90     31 5D 62 FC | 	wrlong	local01, local04
02b94     18 62 86 F1 | 	sub	local04, #24
02b98                 | LR__0156
02b98     1C 62 06 F1 | 	add	local04, #28
02b9c     31 5F 62 FC | 	wrlong	local02, local04
02ba0     04 62 06 F1 | 	add	local04, #4
02ba4     31 61 62 FC | 	wrlong	local03, local04
02ba8     00 2C 06 F6 | 	mov	result1, #0
02bac                 | LR__0157
02bac     AF F0 03 F6 | 	mov	ptra, fp
02bb0     BF 00 A0 FD | 	call	#popregs_
02bb4                 | __system___basic_open_ret
02bb4     2D 00 64 FD | 	ret
02bb8                 | 
02bb8                 | __system___basic_open_string
02bb8     04 5A 05 F6 | 	mov	COUNT_, #4
02bbc     B0 00 A0 FD | 	call	#pushregs_
02bc0     2A 5D 02 F6 | 	mov	local01, arg02
02bc4     2B 5F 02 F6 | 	mov	local02, arg03
02bc8     3C 1E B0 FD | 	call	#__system____getftab
02bcc     16 61 0A F6 | 	mov	local03, result1 wz
02bd0     18 00 90 5D |  if_ne	jmp	#LR__0158
02bd4     03 53 02 F6 | 	mov	arg01, abortchain
02bd8     0C 54 06 F6 | 	mov	arg02, #12
02bdc     01 56 06 F6 | 	mov	arg03, #1
02be0     F0 00 A0 FD | 	call	#__longjmp
02be4     01 2C 66 F6 | 	neg	result1, #1
02be8     50 00 90 FD | 	jmp	#LR__0160
02bec                 | LR__0158
02bec     2E 55 02 F6 | 	mov	arg02, local01
02bf0     2F 57 02 F6 | 	mov	arg03, local02
02bf4     30 53 02 F6 | 	mov	arg01, local03
02bf8     B6 59 06 F6 | 	mov	arg04, #438
02bfc     B0 10 B0 FD | 	call	#__system___openraw
02c00     16 63 02 F6 | 	mov	local04, result1
02c04     00 62 5E F2 | 	cmps	local04, #0 wcz
02c08     2C 00 90 3D |  if_ae	jmp	#LR__0159
02c0c     01 00 00 FF 
02c10     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
02c14     0E 2D 02 FB | 	rdlong	result1, ptr___system__dat__
02c18     01 00 00 FF 
02c1c     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
02c20     16 55 02 F6 | 	mov	arg02, result1
02c24     03 53 02 F6 | 	mov	arg01, abortchain
02c28     01 56 06 F6 | 	mov	arg03, #1
02c2c     F0 00 A0 FD | 	call	#__longjmp
02c30     01 2C 66 F6 | 	neg	result1, #1
02c34     04 00 90 FD | 	jmp	#LR__0160
02c38                 | LR__0159
02c38     31 2D 02 F6 | 	mov	result1, local04
02c3c                 | LR__0160
02c3c     AF F0 03 F6 | 	mov	ptra, fp
02c40     BF 00 A0 FD | 	call	#popregs_
02c44                 | __system___basic_open_string_ret
02c44     2D 00 64 FD | 	ret
02c48                 | 
02c48                 | __system___basic_print_char
02c48     05 5A 05 F6 | 	mov	COUNT_, #5
02c4c     B0 00 A0 FD | 	call	#pushregs_
02c50     2A 5D 02 F6 | 	mov	local01, arg02
02c54     00 21 B0 FD | 	call	#__system___gettxfunc
02c58     16 5F 0A F6 | 	mov	local02, result1 wz
02c5c     00 2C 06 A6 |  if_e	mov	result1, #0
02c60     24 00 90 AD |  if_e	jmp	#LR__0161
02c64     2F 61 02 FB | 	rdlong	local03, local02
02c68     04 5E 06 F1 | 	add	local02, #4
02c6c     2F 63 02 FB | 	rdlong	local04, local02
02c70     2E 53 02 F6 | 	mov	arg01, local01
02c74     06 65 02 F6 | 	mov	local05, objptr
02c78     30 0D 02 F6 | 	mov	objptr, local03
02c7c     2D 62 62 FD | 	call	local04
02c80     32 0D 02 F6 | 	mov	objptr, local05
02c84     01 2C 06 F6 | 	mov	result1, #1
02c88                 | LR__0161
02c88     AF F0 03 F6 | 	mov	ptra, fp
02c8c     BF 00 A0 FD | 	call	#popregs_
02c90                 | __system___basic_print_char_ret
02c90     2D 00 64 FD | 	ret
02c94                 | 
02c94                 | __system___basic_print_string
02c94     03 5A 05 F6 | 	mov	COUNT_, #3
02c98     B0 00 A0 FD | 	call	#pushregs_
02c9c     2A 5D 02 F6 | 	mov	local01, arg02
02ca0     2B 5F 02 F6 | 	mov	local02, arg03
02ca4     B0 20 B0 FD | 	call	#__system___gettxfunc
02ca8     16 61 0A F6 | 	mov	local03, result1 wz
02cac     00 2C 06 A6 |  if_e	mov	result1, #0
02cb0     1C 00 90 AD |  if_e	jmp	#LR__0162
02cb4     00 5C 0E F2 | 	cmp	local01, #0 wz
02cb8     00 2C 06 A6 |  if_e	mov	result1, #0
02cbc     10 00 90 AD |  if_e	jmp	#LR__0162
02cc0     30 53 02 F6 | 	mov	arg01, local03
02cc4     2F 55 02 F6 | 	mov	arg02, local02
02cc8     2E 57 02 F6 | 	mov	arg03, local01
02ccc     F0 00 B0 FD | 	call	#__system___fmtstr
02cd0                 | LR__0162
02cd0     AF F0 03 F6 | 	mov	ptra, fp
02cd4     BF 00 A0 FD | 	call	#popregs_
02cd8                 | __system___basic_print_string_ret
02cd8     2D 00 64 FD | 	ret
02cdc                 | 
02cdc                 | __system___basic_print_integer
02cdc     04 5A 05 F6 | 	mov	COUNT_, #4
02ce0     B0 00 A0 FD | 	call	#pushregs_
02ce4     2A 5D 02 F6 | 	mov	local01, arg02
02ce8     2B 5F 02 F6 | 	mov	local02, arg03
02cec     2C 61 02 F6 | 	mov	local03, arg04
02cf0     64 20 B0 FD | 	call	#__system___gettxfunc
02cf4     16 63 0A F6 | 	mov	local04, result1 wz
02cf8     00 2C 06 A6 |  if_e	mov	result1, #0
02cfc     14 00 90 AD |  if_e	jmp	#LR__0163
02d00     31 53 02 F6 | 	mov	arg01, local04
02d04     2F 55 02 F6 | 	mov	arg02, local02
02d08     2E 57 02 F6 | 	mov	arg03, local01
02d0c     30 59 02 F6 | 	mov	arg04, local03
02d10     A0 01 B0 FD | 	call	#__system___fmtnum
02d14                 | LR__0163
02d14     AF F0 03 F6 | 	mov	ptra, fp
02d18     BF 00 A0 FD | 	call	#popregs_
02d1c                 | __system___basic_print_integer_ret
02d1c     2D 00 64 FD | 	ret
02d20                 | 
02d20                 | __system___basic_get_char
02d20     04 5A 05 F6 | 	mov	COUNT_, #4
02d24     B0 00 A0 FD | 	call	#pushregs_
02d28     74 20 B0 FD | 	call	#__system___getrxfunc
02d2c     16 5D 0A F6 | 	mov	local01, result1 wz
02d30     01 2C 66 A6 |  if_e	neg	result1, #1
02d34     1C 00 90 AD |  if_e	jmp	#LR__0164
02d38     2E 5F 02 FB | 	rdlong	local02, local01
02d3c     04 5C 06 F1 | 	add	local01, #4
02d40     2E 61 02 FB | 	rdlong	local03, local01
02d44     06 63 02 F6 | 	mov	local04, objptr
02d48     2F 0D 02 F6 | 	mov	objptr, local02
02d4c     2D 60 62 FD | 	call	local03
02d50     31 0D 02 F6 | 	mov	objptr, local04
02d54                 | LR__0164
02d54     AF F0 03 F6 | 	mov	ptra, fp
02d58     BF 00 A0 FD | 	call	#popregs_
02d5c                 | __system___basic_get_char_ret
02d5c     2D 00 64 FD | 	ret
02d60                 | 
02d60                 | __system___fmtchar
02d60     00 5A 05 F6 | 	mov	COUNT_, #0
02d64     B0 00 A0 FD | 	call	#pushregs_
02d68     18 F0 07 F1 | 	add	ptra, #24
02d6c     04 5E 05 F1 | 	add	fp, #4
02d70     AF 52 62 FC | 	wrlong	arg01, fp
02d74     04 5E 05 F1 | 	add	fp, #4
02d78     AF 54 62 FC | 	wrlong	arg02, fp
02d7c     04 5E 05 F1 | 	add	fp, #4
02d80     AF 56 62 FC | 	wrlong	arg03, fp
02d84     04 5E 05 F1 | 	add	fp, #4
02d88     AF 56 42 FC | 	wrbyte	arg03, fp
02d8c     01 5E 05 F1 | 	add	fp, #1
02d90     AF 00 48 FC | 	wrbyte	#0, fp
02d94     01 5E 85 F1 | 	sub	fp, #1
02d98     AF 56 02 F6 | 	mov	arg03, fp
02d9c     0C 5E 85 F1 | 	sub	fp, #12
02da0     AF 52 02 FB | 	rdlong	arg01, fp
02da4     04 5E 05 F1 | 	add	fp, #4
02da8     AF 54 02 FB | 	rdlong	arg02, fp
02dac     08 5E 85 F1 | 	sub	fp, #8
02db0     0C 00 B0 FD | 	call	#__system___fmtstr
02db4     AF F0 03 F6 | 	mov	ptra, fp
02db8     BF 00 A0 FD | 	call	#popregs_
02dbc                 | __system___fmtchar_ret
02dbc     2D 00 64 FD | 	ret
02dc0                 | 
02dc0                 | __system___fmtstr
02dc0     0E 5A 05 F6 | 	mov	COUNT_, #14
02dc4     B0 00 A0 FD | 	call	#pushregs_
02dc8     29 5D 02 F6 | 	mov	local01, arg01
02dcc     2A 5F 02 F6 | 	mov	local02, arg02
02dd0     2B 61 02 F6 | 	mov	local03, arg03
02dd4     2F 63 02 F6 | 	mov	local04, local02
02dd8     FF 62 06 F5 | 	and	local04, #255
02ddc     30 53 02 F6 | 	mov	arg01, local03
02de0     00 64 06 F6 | 	mov	local05, #0
02de4     28 D2 9F FE | 	loc	pa,	#(@LR__0166-@LR__0165)
02de8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dec                 | LR__0165
02dec     29 67 CA FA | 	rdbyte	local06, arg01 wz
02df0     01 64 06 51 |  if_ne	add	local05, #1
02df4     01 52 06 51 |  if_ne	add	arg01, #1
02df8     F0 FF 9F 5D |  if_ne	jmp	#LR__0165
02dfc                 | LR__0166
02dfc     32 2D 02 F6 | 	mov	result1, local05
02e00     16 69 02 F6 | 	mov	local07, result1
02e04     00 62 0E F2 | 	cmp	local04, #0 wz
02e08     04 00 90 AD |  if_e	jmp	#LR__0167
02e0c     31 69 7A F3 | 	fles	local07, local04 wcz
02e10                 | LR__0167
02e10     2E 53 02 F6 | 	mov	arg01, local01
02e14     2F 55 02 F6 | 	mov	arg02, local02
02e18     34 57 02 F6 | 	mov	arg03, local07
02e1c     02 58 06 F6 | 	mov	arg04, #2
02e20     E8 1D B0 FD | 	call	#__system___fmtpad
02e24     16 6B 02 F6 | 	mov	local08, result1
02e28     00 6A 5E F2 | 	cmps	local08, #0 wcz
02e2c     35 2D 02 C6 |  if_b	mov	result1, local08
02e30     74 00 90 CD |  if_b	jmp	#LR__0170
02e34     00 68 5E F2 | 	cmps	local07, #0 wcz
02e38     44 00 90 ED |  if_be	jmp	#LR__0169
02e3c     34 6D 02 F6 | 	mov	local09, local07
02e40                 | LR__0168
02e40     2E 6F 02 F6 | 	mov	local10, local01
02e44     37 71 02 FB | 	rdlong	local11, local10
02e48     04 6E 06 F1 | 	add	local10, #4
02e4c     37 73 02 FB | 	rdlong	local12, local10
02e50     30 53 C2 FA | 	rdbyte	arg01, local03
02e54     06 75 02 F6 | 	mov	local13, objptr
02e58     38 0D 02 F6 | 	mov	objptr, local11
02e5c     01 60 06 F1 | 	add	local03, #1
02e60     2D 72 62 FD | 	call	local12
02e64     3A 0D 02 F6 | 	mov	objptr, local13
02e68     16 77 02 F6 | 	mov	local14, result1
02e6c     00 76 5E F2 | 	cmps	local14, #0 wcz
02e70     3B 2D 02 C6 |  if_b	mov	result1, local14
02e74     30 00 90 CD |  if_b	jmp	#LR__0170
02e78     3B 6B 02 F1 | 	add	local08, local14
02e7c     F0 6D 6E FB | 	djnz	local09, #LR__0168
02e80                 | LR__0169
02e80     2E 53 02 F6 | 	mov	arg01, local01
02e84     2F 55 02 F6 | 	mov	arg02, local02
02e88     34 57 02 F6 | 	mov	arg03, local07
02e8c     01 58 06 F6 | 	mov	arg04, #1
02e90     78 1D B0 FD | 	call	#__system___fmtpad
02e94     16 77 02 F6 | 	mov	local14, result1
02e98     00 76 5E F2 | 	cmps	local14, #0 wcz
02e9c     3B 2D 02 C6 |  if_b	mov	result1, local14
02ea0     3B 6B 02 31 |  if_ae	add	local08, local14
02ea4     35 2D 02 36 |  if_ae	mov	result1, local08
02ea8                 | LR__0170
02ea8     AF F0 03 F6 | 	mov	ptra, fp
02eac     BF 00 A0 FD | 	call	#popregs_
02eb0                 | __system___fmtstr_ret
02eb0     2D 00 64 FD | 	ret
02eb4                 | 
02eb4                 | __system___fmtnum
02eb4     07 5A 05 F6 | 	mov	COUNT_, #7
02eb8     B0 00 A0 FD | 	call	#pushregs_
02ebc     78 F0 07 F1 | 	add	ptra, #120
02ec0     04 5E 05 F1 | 	add	fp, #4
02ec4     AF 52 62 FC | 	wrlong	arg01, fp
02ec8     04 5E 05 F1 | 	add	fp, #4
02ecc     AF 54 62 FC | 	wrlong	arg02, fp
02ed0     04 5E 05 F1 | 	add	fp, #4
02ed4     AF 56 62 FC | 	wrlong	arg03, fp
02ed8     04 5E 05 F1 | 	add	fp, #4
02edc     AF 58 62 FC | 	wrlong	arg04, fp
02ee0     04 5E 05 F1 | 	add	fp, #4
02ee4     AF 5C 02 F6 | 	mov	local01, fp
02ee8     44 5E 05 F1 | 	add	fp, #68
02eec     AF 5C 62 FC | 	wrlong	local01, fp
02ef0     04 5E 05 F1 | 	add	fp, #4
02ef4     AF 00 68 FC | 	wrlong	#0, fp
02ef8     54 5E 85 F1 | 	sub	fp, #84
02efc     AF 5C 02 FB | 	rdlong	local01, fp
02f00     10 5C 46 F0 | 	shr	local01, #16
02f04     3F 5C 06 F5 | 	and	local01, #63
02f08     58 5E 05 F1 | 	add	fp, #88
02f0c     AF 5C 62 FC | 	wrlong	local01, fp
02f10     58 5E 85 F1 | 	sub	fp, #88
02f14     AF 5C 02 FB | 	rdlong	local01, fp
02f18     FF 5C 06 F5 | 	and	local01, #255
02f1c     5C 5E 05 F1 | 	add	fp, #92
02f20     AF 5C 62 FC | 	wrlong	local01, fp
02f24     5C 5E 85 F1 | 	sub	fp, #92
02f28     AF 5C 02 FB | 	rdlong	local01, fp
02f2c     1A 5C 46 F0 | 	shr	local01, #26
02f30     03 5C 06 F5 | 	and	local01, #3
02f34     60 5E 05 F1 | 	add	fp, #96
02f38     AF 5C 62 FC | 	wrlong	local01, fp
02f3c     08 5E 85 F1 | 	sub	fp, #8
02f40     AF 5C 02 FB | 	rdlong	local01, fp
02f44     60 5E 85 F1 | 	sub	fp, #96
02f48     00 5C 5E F2 | 	cmps	local01, #0 wcz
02f4c     14 00 90 ED |  if_be	jmp	#LR__0171
02f50     60 5E 05 F1 | 	add	fp, #96
02f54     AF 5C 02 FB | 	rdlong	local01, fp
02f58     01 5C 86 F1 | 	sub	local01, #1
02f5c     AF 5C 62 FC | 	wrlong	local01, fp
02f60     60 5E 85 F1 | 	sub	fp, #96
02f64                 | LR__0171
02f64     64 5E 05 F1 | 	add	fp, #100
02f68     AF 5E 02 FB | 	rdlong	local02, fp
02f6c     64 5E 85 F1 | 	sub	fp, #100
02f70     40 5E 5E F2 | 	cmps	local02, #64 wcz
02f74     14 00 90 1D |  if_a	jmp	#LR__0172
02f78     64 5E 05 F1 | 	add	fp, #100
02f7c     AF 60 02 FB | 	rdlong	local03, fp
02f80     64 5E 85 F1 | 	sub	fp, #100
02f84     30 63 0A F6 | 	mov	local04, local03 wz
02f88     0C 00 90 5D |  if_ne	jmp	#LR__0173
02f8c                 | LR__0172
02f8c     64 5E 05 F1 | 	add	fp, #100
02f90     AF 80 68 FC | 	wrlong	#64, fp
02f94     64 5E 85 F1 | 	sub	fp, #100
02f98                 | LR__0173
02f98     68 5E 05 F1 | 	add	fp, #104
02f9c     AF 5C 02 FB | 	rdlong	local01, fp
02fa0     68 5E 85 F1 | 	sub	fp, #104
02fa4     03 5C 0E F2 | 	cmp	local01, #3 wz
02fa8     10 00 90 5D |  if_ne	jmp	#LR__0174
02fac     68 5E 05 F1 | 	add	fp, #104
02fb0     AF 00 68 FC | 	wrlong	#0, fp
02fb4     68 5E 85 F1 | 	sub	fp, #104
02fb8     30 00 90 FD | 	jmp	#LR__0176
02fbc                 | LR__0174
02fbc     0C 5E 05 F1 | 	add	fp, #12
02fc0     AF 5C 02 FB | 	rdlong	local01, fp
02fc4     0C 5E 85 F1 | 	sub	fp, #12
02fc8     00 5C 5E F2 | 	cmps	local01, #0 wcz
02fcc     1C 00 90 3D |  if_ae	jmp	#LR__0175
02fd0     68 5E 05 F1 | 	add	fp, #104
02fd4     AF 08 68 FC | 	wrlong	#4, fp
02fd8     5C 5E 85 F1 | 	sub	fp, #92
02fdc     AF 5C 02 FB | 	rdlong	local01, fp
02fe0     2E 5D 62 F6 | 	neg	local01, local01
02fe4     AF 5C 62 FC | 	wrlong	local01, fp
02fe8     0C 5E 85 F1 | 	sub	fp, #12
02fec                 | LR__0175
02fec                 | LR__0176
02fec     68 5E 05 F1 | 	add	fp, #104
02ff0     AF 5C 0A FB | 	rdlong	local01, fp wz
02ff4     68 5E 85 F1 | 	sub	fp, #104
02ff8     EC 00 90 AD |  if_e	jmp	#LR__0183
02ffc     5C 5E 05 F1 | 	add	fp, #92
03000     AF 62 02 FB | 	rdlong	local04, fp
03004     01 62 06 F1 | 	add	local04, #1
03008     AF 62 62 FC | 	wrlong	local04, fp
0300c     04 5E 05 F1 | 	add	fp, #4
03010     AF 5C 02 FB | 	rdlong	local01, fp
03014     04 5E 05 F1 | 	add	fp, #4
03018     AF 62 02 FB | 	rdlong	local04, fp
0301c     64 5E 85 F1 | 	sub	fp, #100
03020     31 5D 0A F2 | 	cmp	local01, local04 wz
03024     3C 00 90 5D |  if_ne	jmp	#LR__0178
03028     60 5E 05 F1 | 	add	fp, #96
0302c     AF 62 02 FB | 	rdlong	local04, fp
03030     01 62 86 F1 | 	sub	local04, #1
03034     AF 62 62 FC | 	wrlong	local04, fp
03038     AF 5C 0A FB | 	rdlong	local01, fp wz
0303c     60 5E 85 F1 | 	sub	fp, #96
03040     20 00 90 5D |  if_ne	jmp	#LR__0177
03044     04 5E 05 F1 | 	add	fp, #4
03048     AF 52 02 FB | 	rdlong	arg01, fp
0304c     04 5E 05 F1 | 	add	fp, #4
03050     AF 54 02 FB | 	rdlong	arg02, fp
03054     08 5E 85 F1 | 	sub	fp, #8
03058     23 56 06 F6 | 	mov	arg03, #35
0305c     00 FD BF FD | 	call	#__system___fmtchar
03060     70 01 90 FD | 	jmp	#LR__0188
03064                 | LR__0177
03064                 | LR__0178
03064     68 5E 05 F1 | 	add	fp, #104
03068     AF 5C 02 FB | 	rdlong	local01, fp
0306c     68 5E 85 F1 | 	sub	fp, #104
03070     02 5C 0E F2 | 	cmp	local01, #2 wz
03074     20 00 90 5D |  if_ne	jmp	#LR__0179
03078     58 5E 05 F1 | 	add	fp, #88
0307c     AF 5C 02 FB | 	rdlong	local01, fp
03080     2E 63 02 F6 | 	mov	local04, local01
03084     01 62 06 F1 | 	add	local04, #1
03088     AF 62 62 FC | 	wrlong	local04, fp
0308c     58 5E 85 F1 | 	sub	fp, #88
03090     2E 41 48 FC | 	wrbyte	#32, local01
03094     50 00 90 FD | 	jmp	#LR__0182
03098                 | LR__0179
03098     68 5E 05 F1 | 	add	fp, #104
0309c     AF 5C 02 FB | 	rdlong	local01, fp
030a0     68 5E 85 F1 | 	sub	fp, #104
030a4     04 5C 0E F2 | 	cmp	local01, #4 wz
030a8     20 00 90 5D |  if_ne	jmp	#LR__0180
030ac     58 5E 05 F1 | 	add	fp, #88
030b0     AF 5C 02 FB | 	rdlong	local01, fp
030b4     2E 63 02 F6 | 	mov	local04, local01
030b8     01 62 06 F1 | 	add	local04, #1
030bc     AF 62 62 FC | 	wrlong	local04, fp
030c0     58 5E 85 F1 | 	sub	fp, #88
030c4     2E 5B 48 FC | 	wrbyte	#45, local01
030c8     1C 00 90 FD | 	jmp	#LR__0181
030cc                 | LR__0180
030cc     58 5E 05 F1 | 	add	fp, #88
030d0     AF 5C 02 FB | 	rdlong	local01, fp
030d4     2E 63 02 F6 | 	mov	local04, local01
030d8     01 62 06 F1 | 	add	local04, #1
030dc     AF 62 62 FC | 	wrlong	local04, fp
030e0     58 5E 85 F1 | 	sub	fp, #88
030e4     2E 57 48 FC | 	wrbyte	#43, local01
030e8                 | LR__0181
030e8                 | LR__0182
030e8                 | LR__0183
030e8     58 5E 05 F1 | 	add	fp, #88
030ec     AF 52 02 FB | 	rdlong	arg01, fp
030f0     4C 5E 85 F1 | 	sub	fp, #76
030f4     AF 54 02 FB | 	rdlong	arg02, fp
030f8     04 5E 05 F1 | 	add	fp, #4
030fc     AF 56 02 FB | 	rdlong	arg03, fp
03100     50 5E 05 F1 | 	add	fp, #80
03104     AF 58 02 FB | 	rdlong	arg04, fp
03108     00 64 06 F6 | 	mov	local05, #0
0310c     58 5E 85 F1 | 	sub	fp, #88
03110     AF 66 02 FB | 	rdlong	local06, fp
03114     08 5E 85 F1 | 	sub	fp, #8
03118     1D 66 2E F4 | 	testbn	local06, #29 wz
0311c     01 64 06 56 |  if_ne	mov	local05, #1
03120     32 5B 02 F6 | 	mov	arg05, local05
03124     A4 1B B0 FD | 	call	#__system___uitoa
03128     16 69 02 F6 | 	mov	local07, result1
0312c     5C 5E 05 F1 | 	add	fp, #92
03130     AF 5C 02 FB | 	rdlong	local01, fp
03134     34 5D 02 F1 | 	add	local01, local07
03138     AF 5C 62 FC | 	wrlong	local01, fp
0313c     08 5E 05 F1 | 	add	fp, #8
03140     AF 62 02 FB | 	rdlong	local04, fp
03144     64 5E 85 F1 | 	sub	fp, #100
03148     31 5D 5A F2 | 	cmps	local01, local04 wcz
0314c     64 00 90 ED |  if_be	jmp	#LR__0187
03150     EC CE 9F FE | 	loc	pa,	#(@LR__0185-@LR__0184)
03154     93 00 A0 FD | 	call	#FCACHE_LOAD_
03158                 | LR__0184
03158     64 5E 05 F1 | 	add	fp, #100
0315c     AF 5C 02 FB | 	rdlong	local01, fp
03160     2E 63 02 F6 | 	mov	local04, local01
03164     01 62 86 F1 | 	sub	local04, #1
03168     AF 62 62 FC | 	wrlong	local04, fp
0316c     64 5E 85 F1 | 	sub	fp, #100
03170     00 5C 5E F2 | 	cmps	local01, #0 wcz
03174     20 00 90 ED |  if_be	jmp	#LR__0186
03178     58 5E 05 F1 | 	add	fp, #88
0317c     AF 5C 02 FB | 	rdlong	local01, fp
03180     2E 63 02 F6 | 	mov	local04, local01
03184     01 62 06 F1 | 	add	local04, #1
03188     AF 62 62 FC | 	wrlong	local04, fp
0318c     58 5E 85 F1 | 	sub	fp, #88
03190     2E 47 48 FC | 	wrbyte	#35, local01
03194     C0 FF 9F FD | 	jmp	#LR__0184
03198                 | LR__0185
03198                 | LR__0186
03198     58 5E 05 F1 | 	add	fp, #88
0319c     AF 5C 02 FB | 	rdlong	local01, fp
031a0     2E 63 02 F6 | 	mov	local04, local01
031a4     01 62 06 F1 | 	add	local04, #1
031a8     AF 62 62 FC | 	wrlong	local04, fp
031ac     58 5E 85 F1 | 	sub	fp, #88
031b0     2E 01 48 FC | 	wrbyte	#0, local01
031b4                 | LR__0187
031b4     14 5E 05 F1 | 	add	fp, #20
031b8     AF 56 02 F6 | 	mov	arg03, fp
031bc     10 5E 85 F1 | 	sub	fp, #16
031c0     AF 52 02 FB | 	rdlong	arg01, fp
031c4     04 5E 05 F1 | 	add	fp, #4
031c8     AF 54 02 FB | 	rdlong	arg02, fp
031cc     08 5E 85 F1 | 	sub	fp, #8
031d0     EC FB BF FD | 	call	#__system___fmtstr
031d4                 | LR__0188
031d4     AF F0 03 F6 | 	mov	ptra, fp
031d8     BF 00 A0 FD | 	call	#popregs_
031dc                 | __system___fmtnum_ret
031dc     2D 00 64 FD | 	ret
031e0                 | 
031e0                 | __system____builtin_atoi
031e0     0F 5A 05 F6 | 	mov	COUNT_, #15
031e4     B0 00 A0 FD | 	call	#pushregs_
031e8                 | __system____builtin_atoi_enter
031e8     29 5D 02 F6 | 	mov	local01, arg01
031ec     2A 5F 02 F6 | 	mov	local02, arg02
031f0     00 60 06 F6 | 	mov	local03, #0
031f4     00 62 06 F6 | 	mov	local04, #0
031f8     14 CE 9F FE | 	loc	pa,	#(@LR__0190-@LR__0189)
031fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03200                 | LR__0189
03200     2E 65 C2 FA | 	rdbyte	local05, local01
03204     20 64 0E F2 | 	cmp	local05, #32 wz
03208     01 5C 06 A1 |  if_e	add	local01, #1
0320c     F0 FF 9F AD |  if_e	jmp	#LR__0189
03210                 | LR__0190
03210     2E 67 C2 FA | 	rdbyte	local06, local01
03214                 | LR__0191
03214     2D 66 0E F2 | 	cmp	local06, #45 wz
03218     08 00 90 AD |  if_e	jmp	#LR__0192
0321c     2B 66 0E F2 | 	cmp	local06, #43 wz
03220     20 00 90 5D |  if_ne	jmp	#LR__0193
03224                 | LR__0192
03224     2E 65 02 F6 | 	mov	local05, local01
03228     2D 66 0E F2 | 	cmp	local06, #45 wz
0322c     01 5C 06 F1 | 	add	local01, #1
03230     01 64 06 A6 |  if_e	mov	local05, #1
03234     31 65 82 A1 |  if_e	sub	local05, local04
03238     32 63 02 A6 |  if_e	mov	local04, local05
0323c     2E 67 C2 FA | 	rdbyte	local06, local01
03240     D0 FF 9F FD | 	jmp	#LR__0191
03244                 | LR__0193
03244     88 CE 9F FE | 	loc	pa,	#(@LR__0203-@LR__0194)
03248     93 00 A0 FD | 	call	#FCACHE_LOAD_
0324c                 | LR__0194
0324c                 | LR__0195
0324c     2E 65 02 F6 | 	mov	local05, local01
03250     2E 69 02 F6 | 	mov	local07, local01
03254     01 68 06 F1 | 	add	local07, #1
03258     34 5D 02 F6 | 	mov	local01, local07
0325c     32 67 C2 FA | 	rdbyte	local06, local05
03260     5F 66 0E F2 | 	cmp	local06, #95 wz
03264     E4 FF 9F AD |  if_e	jmp	#LR__0195
03268     30 66 0E F2 | 	cmp	local06, #48 wz
0326c     08 00 90 AD |  if_e	jmp	#LR__0196
03270     26 66 0E F2 | 	cmp	local06, #38 wz
03274     08 00 90 5D |  if_ne	jmp	#LR__0197
03278                 | LR__0196
03278     00 6A 06 F6 | 	mov	local08, #0
0327c     84 00 90 FD | 	jmp	#LR__0202
03280                 | LR__0197
03280     31 66 5E F2 | 	cmps	local06, #49 wcz
03284     20 00 90 CD |  if_b	jmp	#LR__0198
03288     39 66 5E F2 | 	cmps	local06, #57 wcz
0328c     18 00 90 1D |  if_a	jmp	#LR__0198
03290     33 6D 02 F6 | 	mov	local09, local06
03294     30 6C 86 F1 | 	sub	local09, #48
03298     36 6B 02 F6 | 	mov	local08, local09
0329c     00 5E 0E F2 | 	cmp	local02, #0 wz
032a0     0A 5E 06 A6 |  if_e	mov	local02, #10
032a4     5C 00 90 FD | 	jmp	#LR__0201
032a8                 | LR__0198
032a8     0A 5E 5E F2 | 	cmps	local02, #10 wcz
032ac     28 00 90 ED |  if_be	jmp	#LR__0199
032b0     61 66 5E F2 | 	cmps	local06, #97 wcz
032b4     20 00 90 CD |  if_b	jmp	#LR__0199
032b8     66 66 5E F2 | 	cmps	local06, #102 wcz
032bc     18 00 90 1D |  if_a	jmp	#LR__0199
032c0     61 66 86 F1 | 	sub	local06, #97
032c4     33 6F 02 F6 | 	mov	local10, local06
032c8     0A 70 06 F6 | 	mov	local11, #10
032cc     37 71 02 F1 | 	add	local11, local10
032d0     38 6B 02 F6 | 	mov	local08, local11
032d4     2C 00 90 FD | 	jmp	#LR__0200
032d8                 | LR__0199
032d8     0A 5E 5E F2 | 	cmps	local02, #10 wcz
032dc     3C 00 90 ED |  if_be	jmp	#LR__0204
032e0     41 66 5E F2 | 	cmps	local06, #65 wcz
032e4     34 00 90 CD |  if_b	jmp	#LR__0204
032e8     46 66 5E F2 | 	cmps	local06, #70 wcz
032ec     2C 00 90 1D |  if_a	jmp	#LR__0204
032f0     41 66 86 F1 | 	sub	local06, #65
032f4     33 73 02 F6 | 	mov	local12, local06
032f8     0A 74 06 F6 | 	mov	local13, #10
032fc     39 75 02 F1 | 	add	local13, local12
03300     3A 6B 02 F6 | 	mov	local08, local13
03304                 | LR__0200
03304                 | LR__0201
03304                 | LR__0202
03304     30 5F 02 FD | 	qmul	local02, local03
03308     18 76 62 FD | 	getqx	local14
0330c     3B 79 02 F6 | 	mov	local15, local14
03310     35 79 02 F1 | 	add	local15, local08
03314     3C 61 02 F6 | 	mov	local03, local15
03318     30 FF 9F FD | 	jmp	#LR__0194
0331c                 | LR__0203
0331c                 | LR__0204
0331c     00 5E 0E F2 | 	cmp	local02, #0 wz
03320     78 00 90 5D |  if_ne	jmp	#LR__0213
03324     78 66 0E F2 | 	cmp	local06, #120 wz
03328     18 00 90 AD |  if_e	jmp	#LR__0205
0332c     68 66 0E F2 | 	cmp	local06, #104 wz
03330     10 00 90 AD |  if_e	jmp	#LR__0205
03334     58 66 0E F2 | 	cmp	local06, #88 wz
03338     08 00 90 AD |  if_e	jmp	#LR__0205
0333c     48 66 0E F2 | 	cmp	local06, #72 wz
03340     14 00 90 5D |  if_ne	jmp	#LR__0206
03344                 | LR__0205
03344     2E 53 02 F6 | 	mov	arg01, local01
03348     10 54 06 F6 | 	mov	arg02, #16
0334c     90 FE BF FD | 	call	#__system____builtin_atoi
03350     16 61 02 F6 | 	mov	local03, result1
03354     44 00 90 FD | 	jmp	#LR__0212
03358                 | LR__0206
03358     62 66 0E F2 | 	cmp	local06, #98 wz
0335c     08 00 90 AD |  if_e	jmp	#LR__0207
03360     42 66 0E F2 | 	cmp	local06, #66 wz
03364     14 00 90 5D |  if_ne	jmp	#LR__0208
03368                 | LR__0207
03368     2E 53 02 F6 | 	mov	arg01, local01
0336c     02 54 06 F6 | 	mov	arg02, #2
03370     6C FE BF FD | 	call	#__system____builtin_atoi
03374     16 61 02 F6 | 	mov	local03, result1
03378     20 00 90 FD | 	jmp	#LR__0211
0337c                 | LR__0208
0337c     6F 66 0E F2 | 	cmp	local06, #111 wz
03380     08 00 90 AD |  if_e	jmp	#LR__0209
03384     4F 66 0E F2 | 	cmp	local06, #79 wz
03388     10 00 90 5D |  if_ne	jmp	#LR__0210
0338c                 | LR__0209
0338c     2E 53 02 F6 | 	mov	arg01, local01
03390     08 54 06 F6 | 	mov	arg02, #8
03394     48 FE BF FD | 	call	#__system____builtin_atoi
03398     16 61 02 F6 | 	mov	local03, result1
0339c                 | LR__0210
0339c                 | LR__0211
0339c                 | LR__0212
0339c                 | LR__0213
0339c     00 62 0E F2 | 	cmp	local04, #0 wz
033a0     30 61 62 56 |  if_ne	neg	local03, local03
033a4     30 2D 02 F6 | 	mov	result1, local03
033a8     AF F0 03 F6 | 	mov	ptra, fp
033ac     BF 00 A0 FD | 	call	#popregs_
033b0                 | __system____builtin_atoi_ret
033b0     2D 00 64 FD | 	ret
033b4                 | 
033b4                 | __system___gc_ptrs
033b4     0A 5A 05 F6 | 	mov	COUNT_, #10
033b8     B0 00 A0 FD | 	call	#pushregs_
033bc     02 5D 02 F6 | 	mov	local01, __heap_ptr
033c0     2E 5F 02 F6 | 	mov	local02, local01
033c4     07 00 00 FF 
033c8     F8 5F 06 F1 | 	add	local02, ##4088
033cc     2E 61 0A FB | 	rdlong	local03, local01 wz
033d0     74 00 90 5D |  if_ne	jmp	#LR__0214
033d4     2F 63 02 F6 | 	mov	local04, local02
033d8     2E 63 82 F1 | 	sub	local04, local01
033dc     2E 03 58 FC | 	wrword	#1, local01
033e0     2E 65 02 F6 | 	mov	local05, local01
033e4     02 64 06 F1 | 	add	local05, #2
033e8     36 00 80 FF 
033ec     32 21 59 FC | 	wrword	##27792, local05
033f0     2E 67 02 F6 | 	mov	local06, local01
033f4     04 66 06 F1 | 	add	local06, #4
033f8     33 01 58 FC | 	wrword	#0, local06
033fc     2E 69 02 F6 | 	mov	local07, local01
03400     06 68 06 F1 | 	add	local07, #6
03404     34 03 58 FC | 	wrword	#1, local07
03408     10 5C 06 F1 | 	add	local01, #16
0340c     31 61 52 F6 | 	abs	local03, local04 wc
03410     04 60 46 F0 | 	shr	local03, #4
03414     30 61 62 C6 |  if_b	neg	local03, local03
03418     2E 61 52 FC | 	wrword	local03, local01
0341c     2E 6B 02 F6 | 	mov	local08, local01
03420     02 6A 06 F1 | 	add	local08, #2
03424     36 00 80 FF 
03428     35 1F 59 FC | 	wrword	##27791, local08
0342c     2E 6D 02 F6 | 	mov	local09, local01
03430     04 6C 06 F1 | 	add	local09, #4
03434     36 01 58 FC | 	wrword	#0, local09
03438     2E 6F 02 F6 | 	mov	local10, local01
0343c     06 6E 06 F1 | 	add	local10, #6
03440     37 01 58 FC | 	wrword	#0, local10
03444     10 5C 86 F1 | 	sub	local01, #16
03448                 | LR__0214
03448     2F 2F 02 F6 | 	mov	result2, local02
0344c     2E 2D 02 F6 | 	mov	result1, local01
03450     AF F0 03 F6 | 	mov	ptra, fp
03454     BF 00 A0 FD | 	call	#popregs_
03458                 | __system___gc_ptrs_ret
03458     2D 00 64 FD | 	ret
0345c                 | 
0345c                 | __system___gc_nextBlockPtr
0345c     02 5A 05 F6 | 	mov	COUNT_, #2
03460     B0 00 A0 FD | 	call	#pushregs_
03464     29 5D 02 F6 | 	mov	local01, arg01
03468     2E 5F EA FA | 	rdword	local02, local01 wz
0346c     10 00 90 5D |  if_ne	jmp	#LR__0215
03470     61 00 00 FF 
03474     BA 53 06 F6 | 	mov	arg01, ##@LR__0827
03478     F8 01 B0 FD | 	call	#__system___gc_errmsg
0347c     0C 00 90 FD | 	jmp	#LR__0216
03480                 | LR__0215
03480     04 5E 66 F0 | 	shl	local02, #4
03484     2E 2D 02 F6 | 	mov	result1, local01
03488     2F 2D 02 F1 | 	add	result1, local02
0348c                 | LR__0216
0348c     AF F0 03 F6 | 	mov	ptra, fp
03490     BF 00 A0 FD | 	call	#popregs_
03494                 | __system___gc_nextBlockPtr_ret
03494     2D 00 64 FD | 	ret
03498                 | 
03498                 | __system___gc_tryalloc
03498     1B 5A 05 F6 | 	mov	COUNT_, #27
0349c     B0 00 A0 FD | 	call	#pushregs_
034a0     29 5D 02 F6 | 	mov	local01, arg01
034a4     2A 5F 02 F6 | 	mov	local02, arg02
034a8     08 FF BF FD | 	call	#__system___gc_ptrs
034ac     16 61 02 F6 | 	mov	local03, result1
034b0     17 63 02 F6 | 	mov	local04, result2
034b4     30 65 02 F6 | 	mov	local05, local03
034b8     00 66 06 F6 | 	mov	local06, #0
034bc     98 CB 9F FE | 	loc	pa,	#(@LR__0218-@LR__0217)
034c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
034c4                 | LR__0217
034c4     32 69 02 F6 | 	mov	local07, local05
034c8     06 64 06 F1 | 	add	local05, #6
034cc     32 6B 02 F6 | 	mov	local08, local05
034d0     30 6D 02 F6 | 	mov	local09, local03
034d4     35 6F E2 FA | 	rdword	local10, local08
034d8     36 53 02 F6 | 	mov	arg01, local09
034dc     37 55 0A F6 | 	mov	arg02, local10 wz
034e0     00 2C 06 A6 |  if_e	mov	result1, #0
034e4     04 54 66 50 |  if_ne	shl	arg02, #4
034e8     2A 53 02 51 |  if_ne	add	arg01, arg02
034ec     29 2D 02 56 |  if_ne	mov	result1, arg01
034f0     16 71 02 F6 | 	mov	local11, result1
034f4     38 65 0A F6 | 	mov	local05, local11 wz
034f8     32 6D 02 56 |  if_ne	mov	local09, local05
034fc     36 73 02 56 |  if_ne	mov	local12, local09
03500     39 67 E2 5A |  if_ne	rdword	local06, local12
03504     00 64 0E F2 | 	cmp	local05, #0 wz
03508     10 00 90 AD |  if_e	jmp	#LR__0219
0350c     31 65 5A F2 | 	cmps	local05, local04 wcz
03510     08 00 90 3D |  if_ae	jmp	#LR__0219
03514     33 5D 5A F2 | 	cmps	local01, local06 wcz
03518     A8 FF 9F 1D |  if_a	jmp	#LR__0217
0351c                 | LR__0218
0351c                 | LR__0219
0351c     00 64 0E F2 | 	cmp	local05, #0 wz
03520     32 2D 02 A6 |  if_e	mov	result1, local05
03524     40 01 90 AD |  if_e	jmp	#LR__0222
03528     32 75 02 F6 | 	mov	local13, local05
0352c     06 74 06 F1 | 	add	local13, #6
03530     3A 77 E2 FA | 	rdword	local14, local13
03534     33 5D 5A F2 | 	cmps	local01, local06 wcz
03538     CC 00 90 3D |  if_ae	jmp	#LR__0221
0353c     32 79 02 F6 | 	mov	local15, local05
03540     3C 5D 52 FC | 	wrword	local01, local15
03544     2E 7B 02 F6 | 	mov	local16, local01
03548     04 7A 66 F0 | 	shl	local16, #4
0354c     32 7D 02 F6 | 	mov	local17, local05
03550     3D 7D 02 F1 | 	add	local17, local16
03554     33 7F 02 F6 | 	mov	local18, local06
03558     2E 7F 82 F1 | 	sub	local18, local01
0355c     3E 81 02 F6 | 	mov	local19, local17
03560     40 7F 52 FC | 	wrword	local18, local19
03564     3E 83 02 F6 | 	mov	local20, local17
03568     02 82 06 F1 | 	add	local20, #2
0356c     36 00 80 FF 
03570     41 1F 59 FC | 	wrword	##27791, local20
03574     3E 85 02 F6 | 	mov	local21, local17
03578     04 84 06 F1 | 	add	local21, #4
0357c     32 55 0A F6 | 	mov	arg02, local05 wz
03580     00 2C 06 A6 |  if_e	mov	result1, #0
03584     30 55 82 51 |  if_ne	sub	arg02, local03
03588     04 54 46 50 |  if_ne	shr	arg02, #4
0358c     2A 2D 02 56 |  if_ne	mov	result1, arg02
03590     42 2D 52 FC | 	wrword	result1, local21
03594     3E 87 02 F6 | 	mov	local22, local17
03598     3A 6D E2 FA | 	rdword	local09, local13
0359c     06 86 06 F1 | 	add	local22, #6
035a0     43 6D 52 FC | 	wrword	local09, local22
035a4     3E 89 02 F6 | 	mov	local23, local17
035a8     44 55 0A F6 | 	mov	arg02, local23 wz
035ac     00 2C 06 A6 |  if_e	mov	result1, #0
035b0     30 55 82 51 |  if_ne	sub	arg02, local03
035b4     04 54 46 50 |  if_ne	shr	arg02, #4
035b8     2A 2D 02 56 |  if_ne	mov	result1, arg02
035bc     16 77 02 F6 | 	mov	local14, result1
035c0     3E 53 02 F6 | 	mov	arg01, local17
035c4     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
035c8     16 8B 0A F6 | 	mov	local24, result1 wz
035cc     38 00 90 AD |  if_e	jmp	#LR__0220
035d0     31 8B 5A F2 | 	cmps	local24, local04 wcz
035d4     30 00 90 3D |  if_ae	jmp	#LR__0220
035d8     45 8D 02 F6 | 	mov	local25, local24
035dc     04 8C 06 F1 | 	add	local25, #4
035e0     30 6D 02 F6 | 	mov	local09, local03
035e4     44 6F 02 F6 | 	mov	local10, local23
035e8     36 53 02 F6 | 	mov	arg01, local09
035ec     37 55 0A F6 | 	mov	arg02, local10 wz
035f0     00 2C 06 A6 |  if_e	mov	result1, #0
035f4     29 55 82 51 |  if_ne	sub	arg02, arg01
035f8     04 54 46 50 |  if_ne	shr	arg02, #4
035fc     2A 2D 02 56 |  if_ne	mov	result1, arg02
03600     16 71 02 F6 | 	mov	local11, result1
03604     46 71 52 FC | 	wrword	local11, local25
03608                 | LR__0220
03608                 | LR__0221
03608     06 68 06 F1 | 	add	local07, #6
0360c     34 77 52 FC | 	wrword	local14, local07
03610     36 00 00 FF 
03614     80 6C 06 F6 | 	mov	local09, ##27776
03618     2F 6D 42 F5 | 	or	local09, local02
0361c     32 8F 02 F6 | 	mov	local26, local05
03620     02 8E 06 F1 | 	add	local26, #2
03624     01 2C 62 FD | 	cogid	result1
03628     16 6D 42 F5 | 	or	local09, result1
0362c     47 6D 52 FC | 	wrword	local09, local26
03630     30 91 02 F6 | 	mov	local27, local03
03634     08 90 06 F1 | 	add	local27, #8
03638     48 6D E2 FA | 	rdword	local09, local27
0363c     3A 6D 52 FC | 	wrword	local09, local13
03640     32 55 0A F6 | 	mov	arg02, local05 wz
03644     00 2C 06 A6 |  if_e	mov	result1, #0
03648     30 55 82 51 |  if_ne	sub	arg02, local03
0364c     04 54 46 50 |  if_ne	shr	arg02, #4
03650     2A 2D 02 56 |  if_ne	mov	result1, arg02
03654     48 2D 52 FC | 	wrword	result1, local27
03658     08 64 06 F1 | 	add	local05, #8
0365c     32 2D 02 F6 | 	mov	result1, local05
03660     00 C0 31 FF 
03664     00 2C 46 F5 | 	or	result1, ##1669332992
03668                 | LR__0222
03668     AF F0 03 F6 | 	mov	ptra, fp
0366c     BF 00 A0 FD | 	call	#popregs_
03670                 | __system___gc_tryalloc_ret
03670     2D 00 64 FD | 	ret
03674                 | 
03674                 | __system___gc_errmsg
03674     02 5A 05 F6 | 	mov	COUNT_, #2
03678     B0 00 A0 FD | 	call	#pushregs_
0367c     29 5D 02 F6 | 	mov	local01, arg01
03680                 | LR__0223
03680     2E 5F CA FA | 	rdbyte	local02, local01 wz
03684     01 5C 06 F1 | 	add	local01, #1
03688     0C 00 90 AD |  if_e	jmp	#LR__0224
0368c     2F 53 02 F6 | 	mov	arg01, local02
03690     C4 ED BF FD | 	call	#__system___tx
03694     E8 FF 9F FD | 	jmp	#LR__0223
03698                 | LR__0224
03698     00 2C 06 F6 | 	mov	result1, #0
0369c     AF F0 03 F6 | 	mov	ptra, fp
036a0     BF 00 A0 FD | 	call	#popregs_
036a4                 | __system___gc_errmsg_ret
036a4     2D 00 64 FD | 	ret
036a8                 | 
036a8                 | __system___gc_alloc_managed
036a8     02 5A 05 F6 | 	mov	COUNT_, #2
036ac     B0 00 A0 FD | 	call	#pushregs_
036b0     29 5D 02 F6 | 	mov	local01, arg01
036b4     00 54 06 F6 | 	mov	arg02, #0
036b8     30 00 B0 FD | 	call	#__system___gc_doalloc
036bc     16 5F 0A F6 | 	mov	local02, result1 wz
036c0     18 00 90 5D |  if_ne	jmp	#LR__0225
036c4     00 5C 5E F2 | 	cmps	local01, #0 wcz
036c8     10 00 90 ED |  if_be	jmp	#LR__0225
036cc     61 00 00 FF 
036d0     D6 53 06 F6 | 	mov	arg01, ##@LR__0828
036d4     9C FF BF FD | 	call	#__system___gc_errmsg
036d8     04 00 90 FD | 	jmp	#LR__0226
036dc                 | LR__0225
036dc     2F 2D 02 F6 | 	mov	result1, local02
036e0                 | LR__0226
036e0     AF F0 03 F6 | 	mov	ptra, fp
036e4     BF 00 A0 FD | 	call	#popregs_
036e8                 | __system___gc_alloc_managed_ret
036e8     2D 00 64 FD | 	ret
036ec                 | 
036ec                 | __system___gc_doalloc
036ec     07 5A 05 F6 | 	mov	COUNT_, #7
036f0     B0 00 A0 FD | 	call	#pushregs_
036f4     29 5D 0A F6 | 	mov	local01, arg01 wz
036f8     2A 5F 02 F6 | 	mov	local02, arg02
036fc     00 2C 06 A6 |  if_e	mov	result1, #0
03700     8C 00 90 AD |  if_e	jmp	#LR__0234
03704     17 5C 06 F1 | 	add	local01, #23
03708     0F 5C 26 F5 | 	andn	local01, #15
0370c     04 5C 46 F0 | 	shr	local01, #4
03710     14 1C 06 F1 | 	add	ptr___system__dat__, #20
03714     0E 61 02 F6 | 	mov	local03, ptr___system__dat__
03718     30 53 02 F6 | 	mov	arg01, local03
0371c     14 1C 86 F1 | 	sub	ptr___system__dat__, #20
03720     FC EC BF FD | 	call	#__system___lockmem
03724     2E 53 02 F6 | 	mov	arg01, local01
03728     2F 55 02 F6 | 	mov	arg02, local02
0372c     68 FD BF FD | 	call	#__system___gc_tryalloc
03730     16 63 0A F6 | 	mov	local04, result1 wz
03734     14 00 90 5D |  if_ne	jmp	#LR__0227
03738     64 03 B0 FD | 	call	#__system___gc_docollect
0373c     2E 53 02 F6 | 	mov	arg01, local01
03740     2F 55 02 F6 | 	mov	arg02, local02
03744     50 FD BF FD | 	call	#__system___gc_tryalloc
03748     16 63 02 F6 | 	mov	local04, result1
0374c                 | LR__0227
0374c     30 01 68 FC | 	wrlong	#0, local03
03750     00 62 0E F2 | 	cmp	local04, #0 wz
03754     34 00 90 AD |  if_e	jmp	#LR__0233
03758     04 5C 66 F0 | 	shl	local01, #4
0375c     08 5C 86 F1 | 	sub	local01, #8
03760     2E 65 52 F6 | 	abs	local05, local01 wc
03764     02 64 46 F0 | 	shr	local05, #2
03768     32 65 62 C6 |  if_b	neg	local05, local05
0376c     32 67 0A F6 | 	mov	local06, local05 wz
03770     31 69 02 F6 | 	mov	local07, local04
03774     14 00 90 AD |  if_e	jmp	#LR__0232
03778     90 C8 9F FE | 	loc	pa,	#(@LR__0230-@LR__0228)
0377c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03780                 | LR__0228
03780     33 05 D8 FC | 	rep	@LR__0231, local06
03784                 | LR__0229
03784     34 01 68 FC | 	wrlong	#0, local07
03788     04 68 06 F1 | 	add	local07, #4
0378c                 | LR__0230
0378c                 | LR__0231
0378c                 | LR__0232
0378c                 | LR__0233
0378c     31 2D 02 F6 | 	mov	result1, local04
03790                 | LR__0234
03790     AF F0 03 F6 | 	mov	ptra, fp
03794     BF 00 A0 FD | 	call	#popregs_
03798                 | __system___gc_doalloc_ret
03798     2D 00 64 FD | 	ret
0379c                 | 
0379c                 | __system___gc_isvalidptr
0379c     2B 33 02 F6 | 	mov	_var01, arg03
037a0     19 35 02 F6 | 	mov	_var02, _var01
037a4     00 F8 7F FF 
037a8     00 34 06 F5 | 	and	_var02, ##-1048576
037ac     00 C0 31 FF 
037b0     00 34 0E F2 | 	cmp	_var02, ##1669332992 wz
037b4     00 2C 06 56 |  if_ne	mov	result1, #0
037b8     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
037bc     08 32 86 F1 | 	sub	_var01, #8
037c0     19 37 02 F6 | 	mov	_var03, _var01
037c4     00 F8 7F FF 
037c8     00 36 26 F5 | 	andn	_var03, ##-1048576
037cc     29 37 5A F2 | 	cmps	_var03, arg01 wcz
037d0     08 00 90 CD |  if_b	jmp	#LR__0235
037d4     2A 37 5A F2 | 	cmps	_var03, arg02 wcz
037d8     08 00 90 CD |  if_b	jmp	#LR__0236
037dc                 | LR__0235
037dc     00 2C 06 F6 | 	mov	result1, #0
037e0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
037e4                 | LR__0236
037e4     1B 35 02 F6 | 	mov	_var02, _var03
037e8     29 35 62 F5 | 	xor	_var02, arg01
037ec     0F 34 0E F5 | 	and	_var02, #15 wz
037f0     00 2C 06 56 |  if_ne	mov	result1, #0
037f4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
037f8     1B 39 02 F6 | 	mov	_var04, _var03
037fc     02 38 06 F1 | 	add	_var04, #2
03800     1C 35 E2 FA | 	rdword	_var02, _var04
03804     7F 00 00 FF 
03808     C0 35 06 F5 | 	and	_var02, ##65472
0380c     36 00 00 FF 
03810     80 34 0E F2 | 	cmp	_var02, ##27776 wz
03814     00 2C 06 56 |  if_ne	mov	result1, #0
03818     1B 2D 02 A6 |  if_e	mov	result1, _var03
0381c                 | __system___gc_isvalidptr_ret
0381c     2D 00 64 FD | 	ret
03820                 | 
03820                 | __system___gc_free
03820     02 5A 05 F6 | 	mov	COUNT_, #2
03824     B0 00 A0 FD | 	call	#pushregs_
03828     29 5D 02 F6 | 	mov	local01, arg01
0382c     84 FB BF FD | 	call	#__system___gc_ptrs
03830     16 53 02 F6 | 	mov	arg01, result1
03834     17 55 02 F6 | 	mov	arg02, result2
03838     2E 57 02 F6 | 	mov	arg03, local01
0383c     5C FF BF FD | 	call	#__system___gc_isvalidptr
03840     16 5D 0A F6 | 	mov	local01, result1 wz
03844     20 00 90 AD |  if_e	jmp	#LR__0237
03848     14 1C 06 F1 | 	add	ptr___system__dat__, #20
0384c     0E 5F 02 F6 | 	mov	local02, ptr___system__dat__
03850     2F 53 02 F6 | 	mov	arg01, local02
03854     14 1C 86 F1 | 	sub	ptr___system__dat__, #20
03858     C4 EB BF FD | 	call	#__system___lockmem
0385c     2E 53 02 F6 | 	mov	arg01, local01
03860     10 00 B0 FD | 	call	#__system___gc_dofree
03864     2F 01 68 FC | 	wrlong	#0, local02
03868                 | LR__0237
03868     AF F0 03 F6 | 	mov	ptra, fp
0386c     BF 00 A0 FD | 	call	#popregs_
03870                 | __system___gc_free_ret
03870     2D 00 64 FD | 	ret
03874                 | 
03874                 | __system___gc_dofree
03874     1A 5A 05 F6 | 	mov	COUNT_, #26
03878     B0 00 A0 FD | 	call	#pushregs_
0387c     29 5D 02 F6 | 	mov	local01, arg01
03880     30 FB BF FD | 	call	#__system___gc_ptrs
03884     17 5F 02 F6 | 	mov	local02, result2
03888     16 61 02 F6 | 	mov	local03, result1
0388c     2E 63 02 F6 | 	mov	local04, local01
03890     02 62 06 F1 | 	add	local04, #2
03894     36 00 80 FF 
03898     31 1F 59 FC | 	wrword	##27791, local04
0389c     2E 65 02 F6 | 	mov	local05, local01
038a0     2E 53 02 F6 | 	mov	arg01, local01
038a4     B4 FB BF FD | 	call	#__system___gc_nextBlockPtr
038a8     16 67 02 F6 | 	mov	local06, result1
038ac     A0 C7 9F FE | 	loc	pa,	#(@LR__0239-@LR__0238)
038b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
038b4                 | LR__0238
038b4     04 64 06 F1 | 	add	local05, #4
038b8     32 69 02 F6 | 	mov	local07, local05
038bc     34 55 EA FA | 	rdword	arg02, local07 wz
038c0     30 53 02 F6 | 	mov	arg01, local03
038c4     00 2C 06 A6 |  if_e	mov	result1, #0
038c8     04 54 66 50 |  if_ne	shl	arg02, #4
038cc     2A 53 02 51 |  if_ne	add	arg01, arg02
038d0     29 2D 02 56 |  if_ne	mov	result1, arg01
038d4     16 65 0A F6 | 	mov	local05, result1 wz
038d8     28 00 90 AD |  if_e	jmp	#LR__0240
038dc     32 53 02 F6 | 	mov	arg01, local05
038e0     00 6A 06 F6 | 	mov	local08, #0
038e4     02 52 06 F1 | 	add	arg01, #2
038e8     29 6D E2 FA | 	rdword	local09, arg01
038ec     36 00 00 FF 
038f0     8F 6C 0E F2 | 	cmp	local09, ##27791 wz
038f4     01 6A 66 A6 |  if_e	neg	local08, #1
038f8     35 2D 02 F6 | 	mov	result1, local08
038fc     16 6F 0A F6 | 	mov	local10, result1 wz
03900     B0 FF 9F AD |  if_e	jmp	#LR__0238
03904                 | LR__0239
03904                 | LR__0240
03904     00 64 0E F2 | 	cmp	local05, #0 wz
03908     30 65 02 A6 |  if_e	mov	local05, local03
0390c     32 71 02 F6 | 	mov	local11, local05
03910     06 70 06 F1 | 	add	local11, #6
03914     2E 73 02 F6 | 	mov	local12, local01
03918     38 75 E2 FA | 	rdword	local13, local11
0391c     06 72 06 F1 | 	add	local12, #6
03920     39 75 52 FC | 	wrword	local13, local12
03924     2E 55 0A F6 | 	mov	arg02, local01 wz
03928     00 2C 06 A6 |  if_e	mov	result1, #0
0392c     30 55 82 51 |  if_ne	sub	arg02, local03
03930     04 54 46 50 |  if_ne	shr	arg02, #4
03934     2A 2D 02 56 |  if_ne	mov	result1, arg02
03938     16 77 02 F6 | 	mov	local14, result1
0393c     38 77 52 FC | 	wrword	local14, local11
03940     30 65 0A F2 | 	cmp	local05, local03 wz
03944     74 00 90 AD |  if_e	jmp	#LR__0243
03948     32 53 02 F6 | 	mov	arg01, local05
0394c     0C FB BF FD | 	call	#__system___gc_nextBlockPtr
03950     2E 2D 0A F2 | 	cmp	result1, local01 wz
03954     64 00 90 5D |  if_ne	jmp	#LR__0242
03958     32 79 02 F6 | 	mov	local15, local05
0395c     3C 7B E2 FA | 	rdword	local16, local15
03960     2E 7D 02 F6 | 	mov	local17, local01
03964     3E 6F E2 FA | 	rdword	local10, local17
03968     37 7B 02 F1 | 	add	local16, local10
0396c     3C 7B 52 FC | 	wrword	local16, local15
03970     31 01 58 FC | 	wrword	#0, local04
03974     2E 53 02 F6 | 	mov	arg01, local01
03978     E0 FA BF FD | 	call	#__system___gc_nextBlockPtr
0397c     16 67 02 F6 | 	mov	local06, result1
03980     2F 67 5A F2 | 	cmps	local06, local02 wcz
03984     24 00 90 3D |  if_ae	jmp	#LR__0241
03988     33 7F 02 F6 | 	mov	local18, local06
0398c     04 7E 06 F1 | 	add	local18, #4
03990     32 55 0A F6 | 	mov	arg02, local05 wz
03994     00 2C 06 A6 |  if_e	mov	result1, #0
03998     30 55 82 51 |  if_ne	sub	arg02, local03
0399c     04 54 46 50 |  if_ne	shr	arg02, #4
039a0     2A 2D 02 56 |  if_ne	mov	result1, arg02
039a4     16 77 02 F6 | 	mov	local14, result1
039a8     3F 77 52 FC | 	wrword	local14, local18
039ac                 | LR__0241
039ac     39 75 E2 FA | 	rdword	local13, local12
039b0     38 75 52 FC | 	wrword	local13, local11
039b4     39 01 58 FC | 	wrword	#0, local12
039b8     32 5D 02 F6 | 	mov	local01, local05
039bc                 | LR__0242
039bc                 | LR__0243
039bc     2E 53 02 F6 | 	mov	arg01, local01
039c0     98 FA BF FD | 	call	#__system___gc_nextBlockPtr
039c4     16 81 0A F6 | 	mov	local19, result1 wz
039c8     C4 00 90 AD |  if_e	jmp	#LR__0245
039cc     2F 81 5A F2 | 	cmps	local19, local02 wcz
039d0     BC 00 90 3D |  if_ae	jmp	#LR__0245
039d4     40 53 02 F6 | 	mov	arg01, local19
039d8     00 6A 06 F6 | 	mov	local08, #0
039dc     02 52 06 F1 | 	add	arg01, #2
039e0     29 6D E2 FA | 	rdword	local09, arg01
039e4     36 00 00 FF 
039e8     8F 6C 0E F2 | 	cmp	local09, ##27791 wz
039ec     01 6A 66 A6 |  if_e	neg	local08, #1
039f0     35 2D 0A F6 | 	mov	result1, local08 wz
039f4     98 00 90 AD |  if_e	jmp	#LR__0245
039f8     2E 65 02 F6 | 	mov	local05, local01
039fc     40 5D 02 F6 | 	mov	local01, local19
03a00     32 83 02 F6 | 	mov	local20, local05
03a04     41 85 E2 FA | 	rdword	local21, local20
03a08     2E 87 02 F6 | 	mov	local22, local01
03a0c     43 6F E2 FA | 	rdword	local10, local22
03a10     37 85 02 F1 | 	add	local21, local10
03a14     41 85 52 FC | 	wrword	local21, local20
03a18     2E 89 02 F6 | 	mov	local23, local01
03a1c     06 88 06 F1 | 	add	local23, #6
03a20     32 8B 02 F6 | 	mov	local24, local05
03a24     44 75 E2 FA | 	rdword	local13, local23
03a28     06 8A 06 F1 | 	add	local24, #6
03a2c     45 75 52 FC | 	wrword	local13, local24
03a30     2E 8D 02 F6 | 	mov	local25, local01
03a34     02 8C 06 F1 | 	add	local25, #2
03a38     46 55 59 FC | 	wrword	#170, local25
03a3c     44 01 58 FC | 	wrword	#0, local23
03a40     2E 75 02 F6 | 	mov	local13, local01
03a44     3A 53 02 F6 | 	mov	arg01, local13
03a48     10 FA BF FD | 	call	#__system___gc_nextBlockPtr
03a4c     16 6F 02 F6 | 	mov	local10, result1
03a50     37 67 0A F6 | 	mov	local06, local10 wz
03a54     38 00 90 AD |  if_e	jmp	#LR__0244
03a58     2F 67 5A F2 | 	cmps	local06, local02 wcz
03a5c     30 00 90 3D |  if_ae	jmp	#LR__0244
03a60     33 8F 02 F6 | 	mov	local26, local06
03a64     04 8E 06 F1 | 	add	local26, #4
03a68     30 75 02 F6 | 	mov	local13, local03
03a6c     32 6F 02 F6 | 	mov	local10, local05
03a70     3A 53 02 F6 | 	mov	arg01, local13
03a74     37 55 0A F6 | 	mov	arg02, local10 wz
03a78     00 2C 06 A6 |  if_e	mov	result1, #0
03a7c     29 55 82 51 |  if_ne	sub	arg02, arg01
03a80     04 54 46 50 |  if_ne	shr	arg02, #4
03a84     2A 2D 02 56 |  if_ne	mov	result1, arg02
03a88     16 77 02 F6 | 	mov	local14, result1
03a8c     47 77 52 FC | 	wrword	local14, local26
03a90                 | LR__0244
03a90                 | LR__0245
03a90     33 2D 02 F6 | 	mov	result1, local06
03a94     AF F0 03 F6 | 	mov	ptra, fp
03a98     BF 00 A0 FD | 	call	#popregs_
03a9c                 | __system___gc_dofree_ret
03a9c     2D 00 64 FD | 	ret
03aa0                 | 
03aa0                 | __system___gc_docollect
03aa0     0C 5A 05 F6 | 	mov	COUNT_, #12
03aa4     B0 00 A0 FD | 	call	#pushregs_
03aa8     08 F9 BF FD | 	call	#__system___gc_ptrs
03aac     17 5D 02 F6 | 	mov	local01, result2
03ab0     16 5F 02 F6 | 	mov	local02, result1
03ab4     2F 53 02 F6 | 	mov	arg01, local02
03ab8     A0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03abc     16 61 0A F6 | 	mov	local03, result1 wz
03ac0     01 2C 62 FD | 	cogid	result1
03ac4     16 63 02 F6 | 	mov	local04, result1
03ac8     2C 00 90 AD |  if_e	jmp	#LR__0247
03acc                 | LR__0246
03acc     2E 61 5A F2 | 	cmps	local03, local01 wcz
03ad0     24 00 90 3D |  if_ae	jmp	#LR__0247
03ad4     30 65 02 F6 | 	mov	local05, local03
03ad8     02 64 06 F1 | 	add	local05, #2
03adc     32 67 E2 FA | 	rdword	local06, local05
03ae0     20 66 26 F5 | 	andn	local06, #32
03ae4     32 67 52 FC | 	wrword	local06, local05
03ae8     30 53 02 F6 | 	mov	arg01, local03
03aec     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
03af0     16 61 0A F6 | 	mov	local03, result1 wz
03af4     D4 FF 9F 5D |  if_ne	jmp	#LR__0246
03af8                 | LR__0247
03af8     00 68 06 F6 | 	mov	local07, #0
03afc     00 52 06 F6 | 	mov	arg01, #0
03b00     B4 E8 BF FD | 	call	#__system____topofstack
03b04     16 6B 02 F6 | 	mov	local08, result1
03b08     34 53 02 F6 | 	mov	arg01, local07
03b0c     35 55 02 F6 | 	mov	arg02, local08
03b10     A0 00 B0 FD | 	call	#__system___gc_markhub
03b14     2C 01 B0 FD | 	call	#__system___gc_markcog
03b18     2F 53 02 F6 | 	mov	arg01, local02
03b1c     3C F9 BF FD | 	call	#__system___gc_nextBlockPtr
03b20     16 6D 0A F6 | 	mov	local09, result1 wz
03b24     10 00 90 5D |  if_ne	jmp	#LR__0248
03b28     61 00 00 FF 
03b2c     F3 53 06 F6 | 	mov	arg01, ##@LR__0829
03b30     40 FB BF FD | 	call	#__system___gc_errmsg
03b34     70 00 90 FD | 	jmp	#LR__0254
03b38                 | LR__0248
03b38                 | LR__0249
03b38     36 61 02 F6 | 	mov	local03, local09
03b3c     30 53 02 F6 | 	mov	arg01, local03
03b40     18 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03b44     16 6D 02 F6 | 	mov	local09, result1
03b48     30 6F 02 F6 | 	mov	local10, local03
03b4c     02 6E 06 F1 | 	add	local10, #2
03b50     37 71 E2 FA | 	rdword	local11, local10
03b54     20 70 CE F7 | 	test	local11, #32 wz
03b58     3C 00 90 5D |  if_ne	jmp	#LR__0252
03b5c     38 73 02 F6 | 	mov	local12, local11
03b60     10 72 0E F5 | 	and	local12, #16 wz
03b64     30 00 90 5D |  if_ne	jmp	#LR__0252
03b68     38 69 02 F6 | 	mov	local07, local11
03b6c     0F 68 06 F5 | 	and	local07, #15
03b70     34 71 02 F6 | 	mov	local11, local07
03b74     31 71 0A F2 | 	cmp	local11, local04 wz
03b78     08 00 90 AD |  if_e	jmp	#LR__0250
03b7c     0E 70 0E F2 | 	cmp	local11, #14 wz
03b80     14 00 90 5D |  if_ne	jmp	#LR__0251
03b84                 | LR__0250
03b84     30 69 02 F6 | 	mov	local07, local03
03b88     34 53 02 F6 | 	mov	arg01, local07
03b8c     E4 FC BF FD | 	call	#__system___gc_dofree
03b90     16 73 02 F6 | 	mov	local12, result1
03b94     39 6D 02 F6 | 	mov	local09, local12
03b98                 | LR__0251
03b98                 | LR__0252
03b98     00 6C 0E F2 | 	cmp	local09, #0 wz
03b9c     08 00 90 AD |  if_e	jmp	#LR__0253
03ba0     2E 6D 5A F2 | 	cmps	local09, local01 wcz
03ba4     90 FF 9F CD |  if_b	jmp	#LR__0249
03ba8                 | LR__0253
03ba8                 | LR__0254
03ba8     AF F0 03 F6 | 	mov	ptra, fp
03bac     BF 00 A0 FD | 	call	#popregs_
03bb0                 | __system___gc_docollect_ret
03bb0     2D 00 64 FD | 	ret
03bb4                 | 
03bb4                 | __system___gc_markhub
03bb4     0A 5A 05 F6 | 	mov	COUNT_, #10
03bb8     B0 00 A0 FD | 	call	#pushregs_
03bbc     29 5D 02 F6 | 	mov	local01, arg01
03bc0     2A 5F 02 F6 | 	mov	local02, arg02
03bc4     EC F7 BF FD | 	call	#__system___gc_ptrs
03bc8     16 61 02 F6 | 	mov	local03, result1
03bcc     17 63 02 F6 | 	mov	local04, result2
03bd0                 | LR__0255
03bd0     2F 5D 5A F2 | 	cmps	local01, local02 wcz
03bd4     60 00 90 3D |  if_ae	jmp	#LR__0256
03bd8     2E 57 02 FB | 	rdlong	arg03, local01
03bdc     04 5C 06 F1 | 	add	local01, #4
03be0     30 53 02 F6 | 	mov	arg01, local03
03be4     31 55 02 F6 | 	mov	arg02, local04
03be8     B0 FB BF FD | 	call	#__system___gc_isvalidptr
03bec     16 65 0A F6 | 	mov	local05, result1 wz
03bf0     DC FF 9F AD |  if_e	jmp	#LR__0255
03bf4     32 53 02 F6 | 	mov	arg01, local05
03bf8     00 66 06 F6 | 	mov	local06, #0
03bfc     02 52 06 F1 | 	add	arg01, #2
03c00     29 69 E2 FA | 	rdword	local07, arg01
03c04     36 00 00 FF 
03c08     8F 68 0E F2 | 	cmp	local07, ##27791 wz
03c0c     01 66 66 A6 |  if_e	neg	local06, #1
03c10     33 2D 02 F6 | 	mov	result1, local06
03c14     16 6B 0A F6 | 	mov	local08, result1 wz
03c18     B4 FF 9F 5D |  if_ne	jmp	#LR__0255
03c1c     32 6D 02 F6 | 	mov	local09, local05
03c20     02 6C 06 F1 | 	add	local09, #2
03c24     36 6F E2 FA | 	rdword	local10, local09
03c28     0F 6E 26 F5 | 	andn	local10, #15
03c2c     2E 6E 46 F5 | 	or	local10, #46
03c30     36 6F 52 FC | 	wrword	local10, local09
03c34     98 FF 9F FD | 	jmp	#LR__0255
03c38                 | LR__0256
03c38     AF F0 03 F6 | 	mov	ptra, fp
03c3c     BF 00 A0 FD | 	call	#popregs_
03c40                 | __system___gc_markhub_ret
03c40     2D 00 64 FD | 	ret
03c44                 | 
03c44                 | __system___gc_markcog
03c44     06 5A 05 F6 | 	mov	COUNT_, #6
03c48     B0 00 A0 FD | 	call	#pushregs_
03c4c     64 F7 BF FD | 	call	#__system___gc_ptrs
03c50     16 5D 02 F6 | 	mov	local01, result1
03c54     17 5F 02 F6 | 	mov	local02, result2
03c58     00 60 06 F6 | 	mov	local03, #0
03c5c                 | LR__0257
03c5c     F0 63 06 F6 | 	mov	local04, #496
03c60     30 63 82 F1 | 	sub	local04, local03
03c64     F0 63 06 F1 | 	add	local04, #496
03c68                 | 	'.live	local04
03c68     00 62 96 F9 | 	alts	local04, #0
03c6c     31 65 02 F6 | 	mov	local05, local04
03c70     2F 55 02 F6 | 	mov	arg02, local02
03c74     2E 53 02 F6 | 	mov	arg01, local01
03c78     32 57 02 F6 | 	mov	arg03, local05
03c7c     1C FB BF FD | 	call	#__system___gc_isvalidptr
03c80     16 65 0A F6 | 	mov	local05, result1 wz
03c84     10 00 90 AD |  if_e	jmp	#LR__0258
03c88     02 64 06 F1 | 	add	local05, #2
03c8c     32 67 E2 FA | 	rdword	local06, local05
03c90     20 66 46 F5 | 	or	local06, #32
03c94     32 67 52 FC | 	wrword	local06, local05
03c98                 | LR__0258
03c98     01 60 06 F1 | 	add	local03, #1
03c9c     F0 61 5E F2 | 	cmps	local03, #496 wcz
03ca0     B8 FF 9F CD |  if_b	jmp	#LR__0257
03ca4     AF F0 03 F6 | 	mov	ptra, fp
03ca8     BF 00 A0 FD | 	call	#popregs_
03cac                 | __system___gc_markcog_ret
03cac     2D 00 64 FD | 	ret
03cb0                 | 
03cb0                 | __system___openraw
03cb0     10 5A 05 F6 | 	mov	COUNT_, #16
03cb4     B0 00 A0 FD | 	call	#pushregs_
03cb8     54 F0 07 F1 | 	add	ptra, #84
03cbc     04 5E 05 F1 | 	add	fp, #4
03cc0     AF 52 62 FC | 	wrlong	arg01, fp
03cc4     04 5E 05 F1 | 	add	fp, #4
03cc8     AF 54 62 FC | 	wrlong	arg02, fp
03ccc     04 5E 05 F1 | 	add	fp, #4
03cd0     AF 56 62 FC | 	wrlong	arg03, fp
03cd4     04 5E 05 F1 | 	add	fp, #4
03cd8     AF 58 62 FC | 	wrlong	arg04, fp
03cdc     0C 5E 05 F1 | 	add	fp, #12
03ce0     AF 08 68 FC | 	wrlong	#4, fp
03ce4     18 5E 85 F1 | 	sub	fp, #24
03ce8     AF 5C 02 FB | 	rdlong	local01, fp
03cec     1C 5E 05 F1 | 	add	fp, #28
03cf0     AF 5C 62 FC | 	wrlong	local01, fp
03cf4     38 1D 06 F1 | 	add	ptr___system__dat__, #312
03cf8     0E 2D 02 F6 | 	mov	result1, ptr___system__dat__
03cfc     38 1D 86 F1 | 	sub	ptr___system__dat__, #312
03d00     04 5E 05 F1 | 	add	fp, #4
03d04     AF 2C 62 FC | 	wrlong	result1, fp
03d08     16 53 02 F6 | 	mov	arg01, result1
03d0c     1C 5E 85 F1 | 	sub	fp, #28
03d10     AF 54 02 FB | 	rdlong	arg02, fp
03d14     08 5E 85 F1 | 	sub	fp, #8
03d18     00 56 06 F6 | 	mov	arg03, #0
03d1c     F8 EB BF FD | 	call	#__system____getvfsforfile
03d20     16 5F 02 F6 | 	mov	local02, result1
03d24     18 5E 05 F1 | 	add	fp, #24
03d28     AF 5E 62 FC | 	wrlong	local02, fp
03d2c     18 5E 85 F1 | 	sub	fp, #24
03d30     2F 5D 0A F6 | 	mov	local01, local02 wz
03d34     14 00 90 AD |  if_e	jmp	#LR__0259
03d38     18 5E 05 F1 | 	add	fp, #24
03d3c     AF 60 02 FB | 	rdlong	local03, fp
03d40     18 5E 85 F1 | 	sub	fp, #24
03d44     30 63 0A FB | 	rdlong	local04, local03 wz
03d48     1C 00 90 5D |  if_ne	jmp	#LR__0260
03d4c                 | LR__0259
03d4c     01 00 00 FF 
03d50     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
03d54     0E 21 68 FC | 	wrlong	#16, ptr___system__dat__
03d58     01 00 00 FF 
03d5c     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
03d60     01 2C 66 F6 | 	neg	result1, #1
03d64     A8 04 90 FD | 	jmp	#LR__0278
03d68                 | LR__0260
03d68     20 5E 05 F1 | 	add	fp, #32
03d6c     AF 52 02 FB | 	rdlong	arg01, fp
03d70     20 5E 85 F1 | 	sub	fp, #32
03d74     00 54 06 F6 | 	mov	arg02, #0
03d78     30 56 06 F6 | 	mov	arg03, #48
03d7c     29 65 02 F6 | 	mov	local05, arg01
03d80     A0 00 A0 FD | 	call	#\builtin_bytefill_
03d84     32 2D 02 F6 | 	mov	result1, local05
03d88     18 5E 05 F1 | 	add	fp, #24
03d8c     AF 62 02 FB | 	rdlong	local04, fp
03d90     31 5D 02 FB | 	rdlong	local01, local04
03d94     2E 5F 02 FB | 	rdlong	local02, local01
03d98     04 5C 06 F1 | 	add	local01, #4
03d9c     2E 67 02 FB | 	rdlong	local06, local01
03da0     33 69 02 F6 | 	mov	local07, local06
03da4     08 5E 05 F1 | 	add	fp, #8
03da8     AF 6A 02 FB | 	rdlong	local08, fp
03dac     35 6D 02 F6 | 	mov	local09, local08
03db0     04 5E 05 F1 | 	add	fp, #4
03db4     AF 6E 02 FB | 	rdlong	local10, fp
03db8     37 71 02 F6 | 	mov	local11, local10
03dbc     18 5E 85 F1 | 	sub	fp, #24
03dc0     AF 72 02 FB | 	rdlong	local12, fp
03dc4     0C 5E 85 F1 | 	sub	fp, #12
03dc8     39 75 02 F6 | 	mov	local13, local12
03dcc     36 53 02 F6 | 	mov	arg01, local09
03dd0     38 55 02 F6 | 	mov	arg02, local11
03dd4     3A 57 02 F6 | 	mov	arg03, local13
03dd8     06 77 02 F6 | 	mov	local14, objptr
03ddc     2F 0D 02 F6 | 	mov	objptr, local02
03de0     2D 68 62 FD | 	call	local07
03de4     3B 0D 02 F6 | 	mov	objptr, local14
03de8     16 79 02 F6 | 	mov	local15, result1
03dec     14 5E 05 F1 | 	add	fp, #20
03df0     AF 78 62 FC | 	wrlong	local15, fp
03df4     AF 5C 0A FB | 	rdlong	local01, fp wz
03df8     14 5E 85 F1 | 	sub	fp, #20
03dfc     98 00 90 AD |  if_e	jmp	#LR__0261
03e00     0C 5E 05 F1 | 	add	fp, #12
03e04     AF 68 02 FB | 	rdlong	local07, fp
03e08     0C 5E 85 F1 | 	sub	fp, #12
03e0c     04 68 CE F7 | 	test	local07, #4 wz
03e10     84 00 90 AD |  if_e	jmp	#LR__0261
03e14     18 5E 05 F1 | 	add	fp, #24
03e18     AF 62 02 FB | 	rdlong	local04, fp
03e1c     31 61 02 F6 | 	mov	local03, local04
03e20     04 60 06 F1 | 	add	local03, #4
03e24     30 67 02 FB | 	rdlong	local06, local03
03e28     04 60 86 F1 | 	sub	local03, #4
03e2c     33 5D 02 F6 | 	mov	local01, local06
03e30     2E 5F 02 FB | 	rdlong	local02, local01
03e34     04 5C 06 F1 | 	add	local01, #4
03e38     2E 6D 02 FB | 	rdlong	local09, local01
03e3c     04 5C 86 F1 | 	sub	local01, #4
03e40     36 69 02 F6 | 	mov	local07, local09
03e44     08 5E 05 F1 | 	add	fp, #8
03e48     AF 70 02 FB | 	rdlong	local11, fp
03e4c     38 6B 02 F6 | 	mov	local08, local11
03e50     04 5E 05 F1 | 	add	fp, #4
03e54     AF 74 02 FB | 	rdlong	local13, fp
03e58     3A 6F 02 F6 | 	mov	local10, local13
03e5c     14 5E 85 F1 | 	sub	fp, #20
03e60     AF 76 02 FB | 	rdlong	local14, fp
03e64     10 5E 85 F1 | 	sub	fp, #16
03e68     3B 73 02 F6 | 	mov	local12, local14
03e6c     35 53 02 F6 | 	mov	arg01, local08
03e70     37 55 02 F6 | 	mov	arg02, local10
03e74     39 57 02 F6 | 	mov	arg03, local12
03e78     06 79 02 F6 | 	mov	local15, objptr
03e7c     2F 0D 02 F6 | 	mov	objptr, local02
03e80     2D 68 62 FD | 	call	local07
03e84     3C 0D 02 F6 | 	mov	objptr, local15
03e88     16 7B 02 F6 | 	mov	local16, result1
03e8c     14 5E 05 F1 | 	add	fp, #20
03e90     AF 7A 62 FC | 	wrlong	local16, fp
03e94     14 5E 85 F1 | 	sub	fp, #20
03e98                 | LR__0261
03e98     14 5E 05 F1 | 	add	fp, #20
03e9c     AF 5C 0A FB | 	rdlong	local01, fp wz
03ea0     14 5E 85 F1 | 	sub	fp, #20
03ea4     44 03 90 5D |  if_ne	jmp	#LR__0277
03ea8     0C 5E 05 F1 | 	add	fp, #12
03eac     AF 5C 02 FB | 	rdlong	local01, fp
03eb0     03 5C 06 F5 | 	and	local01, #3
03eb4     1C 5E 05 F1 | 	add	fp, #28
03eb8     AF 5C 62 FC | 	wrlong	local01, fp
03ebc     AF 5C 0A FB | 	rdlong	local01, fp wz
03ec0     28 5E 85 F1 | 	sub	fp, #40
03ec4     14 00 90 AD |  if_e	jmp	#LR__0262
03ec8     1C 5E 05 F1 | 	add	fp, #28
03ecc     AF 5C 02 FB | 	rdlong	local01, fp
03ed0     02 5C 46 F5 | 	or	local01, #2
03ed4     AF 5C 62 FC | 	wrlong	local01, fp
03ed8     1C 5E 85 F1 | 	sub	fp, #28
03edc                 | LR__0262
03edc     28 5E 05 F1 | 	add	fp, #40
03ee0     AF 5C 02 FB | 	rdlong	local01, fp
03ee4     28 5E 85 F1 | 	sub	fp, #40
03ee8     01 5C 0E F2 | 	cmp	local01, #1 wz
03eec     14 00 90 AD |  if_e	jmp	#LR__0263
03ef0     1C 5E 05 F1 | 	add	fp, #28
03ef4     AF 5C 02 FB | 	rdlong	local01, fp
03ef8     01 5C 46 F5 | 	or	local01, #1
03efc     AF 5C 62 FC | 	wrlong	local01, fp
03f00     1C 5E 85 F1 | 	sub	fp, #28
03f04                 | LR__0263
03f04     0C 5E 05 F1 | 	add	fp, #12
03f08     AF 5C 02 FB | 	rdlong	local01, fp
03f0c     0C 5E 85 F1 | 	sub	fp, #12
03f10     20 5C CE F7 | 	test	local01, #32 wz
03f14     14 00 90 AD |  if_e	jmp	#LR__0264
03f18     1C 5E 05 F1 | 	add	fp, #28
03f1c     AF 5C 02 FB | 	rdlong	local01, fp
03f20     C0 5C 46 F5 | 	or	local01, #192
03f24     AF 5C 62 FC | 	wrlong	local01, fp
03f28     1C 5E 85 F1 | 	sub	fp, #28
03f2c                 | LR__0264
03f2c     20 5E 05 F1 | 	add	fp, #32
03f30     AF 5C 02 FB | 	rdlong	local01, fp
03f34     04 5E 85 F1 | 	sub	fp, #4
03f38     AF 68 02 FB | 	rdlong	local07, fp
03f3c     08 5C 06 F1 | 	add	local01, #8
03f40     2E 69 62 FC | 	wrlong	local07, local01
03f44     04 5E 05 F1 | 	add	fp, #4
03f48     AF 5C 02 FB | 	rdlong	local01, fp
03f4c     20 5E 85 F1 | 	sub	fp, #32
03f50     10 5C 06 F1 | 	add	local01, #16
03f54     2E 69 0A FB | 	rdlong	local07, local01 wz
03f58     24 00 90 5D |  if_ne	jmp	#LR__0265
03f5c     20 5E 05 F1 | 	add	fp, #32
03f60     AF 5C 02 FB | 	rdlong	local01, fp
03f64     08 5E 85 F1 | 	sub	fp, #8
03f68     AF 68 02 FB | 	rdlong	local07, fp
03f6c     18 5E 85 F1 | 	sub	fp, #24
03f70     0C 68 06 F1 | 	add	local07, #12
03f74     34 63 02 FB | 	rdlong	local04, local07
03f78     10 5C 06 F1 | 	add	local01, #16
03f7c     2E 63 62 FC | 	wrlong	local04, local01
03f80                 | LR__0265
03f80     20 5E 05 F1 | 	add	fp, #32
03f84     AF 5C 02 FB | 	rdlong	local01, fp
03f88     20 5E 85 F1 | 	sub	fp, #32
03f8c     14 5C 06 F1 | 	add	local01, #20
03f90     2E 69 0A FB | 	rdlong	local07, local01 wz
03f94     24 00 90 5D |  if_ne	jmp	#LR__0266
03f98     20 5E 05 F1 | 	add	fp, #32
03f9c     AF 5C 02 FB | 	rdlong	local01, fp
03fa0     08 5E 85 F1 | 	sub	fp, #8
03fa4     AF 68 02 FB | 	rdlong	local07, fp
03fa8     18 5E 85 F1 | 	sub	fp, #24
03fac     10 68 06 F1 | 	add	local07, #16
03fb0     34 63 02 FB | 	rdlong	local04, local07
03fb4     14 5C 06 F1 | 	add	local01, #20
03fb8     2E 63 62 FC | 	wrlong	local04, local01
03fbc                 | LR__0266
03fbc     20 5E 05 F1 | 	add	fp, #32
03fc0     AF 5C 02 FB | 	rdlong	local01, fp
03fc4     20 5E 85 F1 | 	sub	fp, #32
03fc8     20 5C 06 F1 | 	add	local01, #32
03fcc     2E 69 0A FB | 	rdlong	local07, local01 wz
03fd0     24 00 90 5D |  if_ne	jmp	#LR__0267
03fd4     20 5E 05 F1 | 	add	fp, #32
03fd8     AF 5C 02 FB | 	rdlong	local01, fp
03fdc     08 5E 85 F1 | 	sub	fp, #8
03fe0     AF 68 02 FB | 	rdlong	local07, fp
03fe4     18 5E 85 F1 | 	sub	fp, #24
03fe8     08 68 06 F1 | 	add	local07, #8
03fec     34 63 02 FB | 	rdlong	local04, local07
03ff0     20 5C 06 F1 | 	add	local01, #32
03ff4     2E 63 62 FC | 	wrlong	local04, local01
03ff8                 | LR__0267
03ff8     20 5E 05 F1 | 	add	fp, #32
03ffc     AF 5C 02 FB | 	rdlong	local01, fp
04000     20 5E 85 F1 | 	sub	fp, #32
04004     24 5C 06 F1 | 	add	local01, #36
04008     2E 69 0A FB | 	rdlong	local07, local01 wz
0400c     24 00 90 5D |  if_ne	jmp	#LR__0268
04010     20 5E 05 F1 | 	add	fp, #32
04014     AF 5C 02 FB | 	rdlong	local01, fp
04018     08 5E 85 F1 | 	sub	fp, #8
0401c     AF 68 02 FB | 	rdlong	local07, fp
04020     18 5E 85 F1 | 	sub	fp, #24
04024     18 68 06 F1 | 	add	local07, #24
04028     34 63 02 FB | 	rdlong	local04, local07
0402c     24 5C 06 F1 | 	add	local01, #36
04030     2E 63 62 FC | 	wrlong	local04, local01
04034                 | LR__0268
04034     20 5E 05 F1 | 	add	fp, #32
04038     AF 5C 02 FB | 	rdlong	local01, fp
0403c     20 5E 85 F1 | 	sub	fp, #32
04040     2C 5C 06 F1 | 	add	local01, #44
04044     2E 69 0A FB | 	rdlong	local07, local01 wz
04048     24 00 90 5D |  if_ne	jmp	#LR__0269
0404c     20 5E 05 F1 | 	add	fp, #32
04050     AF 5C 02 FB | 	rdlong	local01, fp
04054     08 5E 85 F1 | 	sub	fp, #8
04058     AF 68 02 FB | 	rdlong	local07, fp
0405c     18 5E 85 F1 | 	sub	fp, #24
04060     14 68 06 F1 | 	add	local07, #20
04064     34 63 02 FB | 	rdlong	local04, local07
04068     2C 5C 06 F1 | 	add	local01, #44
0406c     2E 63 62 FC | 	wrlong	local04, local01
04070                 | LR__0269
04070     20 5E 05 F1 | 	add	fp, #32
04074     AF 5C 02 FB | 	rdlong	local01, fp
04078     20 5E 85 F1 | 	sub	fp, #32
0407c     18 5C 06 F1 | 	add	local01, #24
04080     2E 69 0A FB | 	rdlong	local07, local01 wz
04084     B4 00 90 5D |  if_ne	jmp	#LR__0272
04088     30 5E 05 F1 | 	add	fp, #48
0408c     AF 56 02 F6 | 	mov	arg03, fp
04090     10 5E 85 F1 | 	sub	fp, #16
04094     AF 60 02 FB | 	rdlong	local03, fp
04098     24 60 06 F1 | 	add	local03, #36
0409c     30 5D 02 FB | 	rdlong	local01, local03
040a0     2E 5F 02 FB | 	rdlong	local02, local01
040a4     04 5C 06 F1 | 	add	local01, #4
040a8     2E 69 02 FB | 	rdlong	local07, local01
040ac     AF 52 02 FB | 	rdlong	arg01, fp
040b0     20 5E 85 F1 | 	sub	fp, #32
040b4     00 55 06 F6 | 	mov	arg02, #256
040b8     06 73 02 F6 | 	mov	local12, objptr
040bc     2F 0D 02 F6 | 	mov	objptr, local02
040c0     2D 68 62 FD | 	call	local07
040c4     39 0D 02 F6 | 	mov	objptr, local12
040c8     16 77 02 F6 | 	mov	local14, result1
040cc     2C 5E 05 F1 | 	add	fp, #44
040d0     AF 76 62 FC | 	wrlong	local14, fp
040d4     AF 5C 0A FB | 	rdlong	local01, fp wz
040d8     2C 5E 85 F1 | 	sub	fp, #44
040dc     3C 00 90 5D |  if_ne	jmp	#LR__0270
040e0     30 5E 05 F1 | 	add	fp, #48
040e4     AF 68 02 FB | 	rdlong	local07, fp
040e8     30 5E 85 F1 | 	sub	fp, #48
040ec     02 68 CE F7 | 	test	local07, #2 wz
040f0     28 00 90 AD |  if_e	jmp	#LR__0270
040f4     0D 55 02 F6 | 	mov	arg02, ptr___system____default_putc_terminal_
040f8     20 5E 05 F1 | 	add	fp, #32
040fc     AF 5C 02 FB | 	rdlong	local01, fp
04100     20 5E 85 F1 | 	sub	fp, #32
04104     06 53 02 F6 | 	mov	arg01, objptr
04108     D4 E2 BF FD | 	call	#__system___make_methodptr
0410c     16 63 02 F6 | 	mov	local04, result1
04110     18 5C 06 F1 | 	add	local01, #24
04114     2E 63 62 FC | 	wrlong	local04, local01
04118     20 00 90 FD | 	jmp	#LR__0271
0411c                 | LR__0270
0411c     0C 55 02 F6 | 	mov	arg02, ptr___system____default_putc_
04120     20 5E 05 F1 | 	add	fp, #32
04124     AF 5C 02 FB | 	rdlong	local01, fp
04128     20 5E 85 F1 | 	sub	fp, #32
0412c     06 53 02 F6 | 	mov	arg01, objptr
04130     AC E2 BF FD | 	call	#__system___make_methodptr
04134     18 5C 06 F1 | 	add	local01, #24
04138     2E 2D 62 FC | 	wrlong	result1, local01
0413c                 | LR__0271
0413c                 | LR__0272
0413c     20 5E 05 F1 | 	add	fp, #32
04140     AF 5C 02 FB | 	rdlong	local01, fp
04144     20 5E 85 F1 | 	sub	fp, #32
04148     1C 5C 06 F1 | 	add	local01, #28
0414c     2E 69 0A FB | 	rdlong	local07, local01 wz
04150     20 00 90 5D |  if_ne	jmp	#LR__0273
04154     0B 55 02 F6 | 	mov	arg02, ptr___system____default_getc_
04158     20 5E 05 F1 | 	add	fp, #32
0415c     AF 5C 02 FB | 	rdlong	local01, fp
04160     20 5E 85 F1 | 	sub	fp, #32
04164     06 53 02 F6 | 	mov	arg01, objptr
04168     74 E2 BF FD | 	call	#__system___make_methodptr
0416c     1C 5C 06 F1 | 	add	local01, #28
04170     2E 2D 62 FC | 	wrlong	result1, local01
04174                 | LR__0273
04174     20 5E 05 F1 | 	add	fp, #32
04178     AF 5C 02 FB | 	rdlong	local01, fp
0417c     20 5E 85 F1 | 	sub	fp, #32
04180     28 5C 06 F1 | 	add	local01, #40
04184     2E 69 0A FB | 	rdlong	local07, local01 wz
04188     60 00 90 5D |  if_ne	jmp	#LR__0276
0418c     18 5E 05 F1 | 	add	fp, #24
04190     AF 5C 02 FB | 	rdlong	local01, fp
04194     18 5E 85 F1 | 	sub	fp, #24
04198     1C 5C 06 F1 | 	add	local01, #28
0419c     2E 69 0A FB | 	rdlong	local07, local01 wz
041a0     28 00 90 AD |  if_e	jmp	#LR__0274
041a4     20 5E 05 F1 | 	add	fp, #32
041a8     AF 5C 02 FB | 	rdlong	local01, fp
041ac     08 5E 85 F1 | 	sub	fp, #8
041b0     AF 68 02 FB | 	rdlong	local07, fp
041b4     18 5E 85 F1 | 	sub	fp, #24
041b8     1C 68 06 F1 | 	add	local07, #28
041bc     34 63 02 FB | 	rdlong	local04, local07
041c0     28 5C 06 F1 | 	add	local01, #40
041c4     2E 63 62 FC | 	wrlong	local04, local01
041c8     20 00 90 FD | 	jmp	#LR__0275
041cc                 | LR__0274
041cc     0A 55 02 F6 | 	mov	arg02, ptr___system____default_flush_
041d0     20 5E 05 F1 | 	add	fp, #32
041d4     AF 5C 02 FB | 	rdlong	local01, fp
041d8     20 5E 85 F1 | 	sub	fp, #32
041dc     06 53 02 F6 | 	mov	arg01, objptr
041e0     FC E1 BF FD | 	call	#__system___make_methodptr
041e4     28 5C 06 F1 | 	add	local01, #40
041e8     2E 2D 62 FC | 	wrlong	result1, local01
041ec                 | LR__0275
041ec                 | LR__0276
041ec                 | LR__0277
041ec     14 5E 05 F1 | 	add	fp, #20
041f0     AF 5C 0A FB | 	rdlong	local01, fp wz
041f4     01 00 00 AF 
041f8     3C 1C 06 A1 |  if_e	add	ptr___system__dat__, ##572
041fc     0E 01 68 AC |  if_e	wrlong	#0, ptr___system__dat__
04200     01 00 00 AF 
04204     3C 1C 86 A1 |  if_e	sub	ptr___system__dat__, ##572
04208     AF 2C 02 FB | 	rdlong	result1, fp
0420c     14 5E 85 F1 | 	sub	fp, #20
04210                 | LR__0278
04210     AF F0 03 F6 | 	mov	ptra, fp
04214     BF 00 A0 FD | 	call	#popregs_
04218                 | __system___openraw_ret
04218     2D 00 64 FD | 	ret
0421c                 | 
0421c                 | __system___closeraw
0421c     06 5A 05 F6 | 	mov	COUNT_, #6
04220     B0 00 A0 FD | 	call	#pushregs_
04224     29 5D 02 F6 | 	mov	local01, arg01
04228     00 5E 06 F6 | 	mov	local02, #0
0422c     08 5C 06 F1 | 	add	local01, #8
04230     2E 61 0A FB | 	rdlong	local03, local01 wz
04234     08 5C 86 F1 | 	sub	local01, #8
04238     1C 00 90 5D |  if_ne	jmp	#LR__0279
0423c     01 00 00 FF 
04240     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04244     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04248     01 00 00 FF 
0424c     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04250     01 2C 66 F6 | 	neg	result1, #1
04254     90 00 90 FD | 	jmp	#LR__0282
04258                 | LR__0279
04258     28 5C 06 F1 | 	add	local01, #40
0425c     2E 61 0A FB | 	rdlong	local03, local01 wz
04260     28 5C 86 F1 | 	sub	local01, #40
04264     2C 00 90 AD |  if_e	jmp	#LR__0280
04268     28 5C 06 F1 | 	add	local01, #40
0426c     2E 61 02 FB | 	rdlong	local03, local01
04270     28 5C 86 F1 | 	sub	local01, #40
04274     30 63 02 FB | 	rdlong	local04, local03
04278     04 60 06 F1 | 	add	local03, #4
0427c     30 65 02 FB | 	rdlong	local05, local03
04280     2E 53 02 F6 | 	mov	arg01, local01
04284     06 67 02 F6 | 	mov	local06, objptr
04288     31 0D 02 F6 | 	mov	objptr, local04
0428c     2D 64 62 FD | 	call	local05
04290     33 0D 02 F6 | 	mov	objptr, local06
04294                 | LR__0280
04294     20 5C 06 F1 | 	add	local01, #32
04298     2E 61 0A FB | 	rdlong	local03, local01 wz
0429c     20 5C 86 F1 | 	sub	local01, #32
042a0     30 00 90 AD |  if_e	jmp	#LR__0281
042a4     20 5C 06 F1 | 	add	local01, #32
042a8     2E 61 02 FB | 	rdlong	local03, local01
042ac     20 5C 86 F1 | 	sub	local01, #32
042b0     30 63 02 FB | 	rdlong	local04, local03
042b4     04 60 06 F1 | 	add	local03, #4
042b8     30 65 02 FB | 	rdlong	local05, local03
042bc     2E 53 02 F6 | 	mov	arg01, local01
042c0     06 67 02 F6 | 	mov	local06, objptr
042c4     31 0D 02 F6 | 	mov	objptr, local04
042c8     2D 64 62 FD | 	call	local05
042cc     33 0D 02 F6 | 	mov	objptr, local06
042d0     16 5F 02 F6 | 	mov	local02, result1
042d4                 | LR__0281
042d4     2E 53 02 F6 | 	mov	arg01, local01
042d8     00 54 06 F6 | 	mov	arg02, #0
042dc     30 56 06 F6 | 	mov	arg03, #48
042e0     A0 00 A0 FD | 	call	#\builtin_bytefill_
042e4     2F 2D 02 F6 | 	mov	result1, local02
042e8                 | LR__0282
042e8     AF F0 03 F6 | 	mov	ptra, fp
042ec     BF 00 A0 FD | 	call	#popregs_
042f0                 | __system___closeraw_ret
042f0     2D 00 64 FD | 	ret
042f4                 | 
042f4                 | __system____default_getc
042f4     05 5A 05 F6 | 	mov	COUNT_, #5
042f8     B0 00 A0 FD | 	call	#pushregs_
042fc     29 5D 02 F6 | 	mov	local01, arg01
04300     2E 5F 02 FB | 	rdlong	local02, local01
04304     08 5E 06 F1 | 	add	local02, #8
04308     2F 61 02 FB | 	rdlong	local03, local02
0430c     08 5E 86 F1 | 	sub	local02, #8
04310     02 60 CE F7 | 	test	local03, #2 wz
04314     08 00 90 AD |  if_e	jmp	#LR__0283
04318     2E 53 02 F6 | 	mov	arg01, local01
0431c     8C 01 B0 FD | 	call	#__system____default_flush
04320                 | LR__0283
04320     08 5E 06 F1 | 	add	local02, #8
04324     2F 61 02 FB | 	rdlong	local03, local02
04328     01 60 46 F5 | 	or	local03, #1
0432c     2F 61 62 FC | 	wrlong	local03, local02
04330     08 5E 86 F1 | 	sub	local02, #8
04334     2F 63 0A FB | 	rdlong	local04, local02 wz
04338     0C 00 90 5D |  if_ne	jmp	#LR__0284
0433c     2E 53 02 F6 | 	mov	arg01, local01
04340     58 10 B0 FD | 	call	#__system____default_filbuf
04344     16 63 02 F6 | 	mov	local04, result1
04348                 | LR__0284
04348     00 62 5E F2 | 	cmps	local04, #0 wcz
0434c     01 2C 66 E6 |  if_be	neg	result1, #1
04350     1C 00 90 ED |  if_be	jmp	#LR__0285
04354     01 62 86 F1 | 	sub	local04, #1
04358     2F 63 62 FC | 	wrlong	local04, local02
0435c     04 5E 06 F1 | 	add	local02, #4
04360     2F 65 02 FB | 	rdlong	local05, local02
04364     32 2D C2 FA | 	rdbyte	result1, local05
04368     01 64 06 F1 | 	add	local05, #1
0436c     2F 65 62 FC | 	wrlong	local05, local02
04370                 | LR__0285
04370     AF F0 03 F6 | 	mov	ptra, fp
04374     BF 00 A0 FD | 	call	#popregs_
04378                 | __system____default_getc_ret
04378     2D 00 64 FD | 	ret
0437c                 | 
0437c                 | __system____default_putc
0437c     06 5A 05 F6 | 	mov	COUNT_, #6
04380     B0 00 A0 FD | 	call	#pushregs_
04384     29 5D 02 F6 | 	mov	local01, arg01
04388     2A 5F 02 F6 | 	mov	local02, arg02
0438c     2F 61 02 FB | 	rdlong	local03, local02
04390     08 60 06 F1 | 	add	local03, #8
04394     30 63 02 FB | 	rdlong	local04, local03
04398     08 60 86 F1 | 	sub	local03, #8
0439c     01 62 CE F7 | 	test	local04, #1 wz
043a0     08 00 90 AD |  if_e	jmp	#LR__0286
043a4     2F 53 02 F6 | 	mov	arg01, local02
043a8     00 01 B0 FD | 	call	#__system____default_flush
043ac                 | LR__0286
043ac     08 60 06 F1 | 	add	local03, #8
043b0     30 63 02 FB | 	rdlong	local04, local03
043b4     02 62 46 F5 | 	or	local04, #2
043b8     30 63 62 FC | 	wrlong	local04, local03
043bc     08 60 86 F1 | 	sub	local03, #8
043c0     30 65 02 FB | 	rdlong	local05, local03
043c4     32 67 02 F6 | 	mov	local06, local05
043c8     0C 60 06 F1 | 	add	local03, #12
043cc     30 67 02 F1 | 	add	local06, local03
043d0     33 5D 42 FC | 	wrbyte	local01, local06
043d4     FF 5C 06 F5 | 	and	local01, #255
043d8     01 64 06 F1 | 	add	local05, #1
043dc     0C 60 86 F1 | 	sub	local03, #12
043e0     30 65 62 FC | 	wrlong	local05, local03
043e4     02 00 00 FF 
043e8     00 64 0E F2 | 	cmp	local05, ##1024 wz
043ec     10 00 90 5D |  if_ne	jmp	#LR__0287
043f0     2F 53 02 F6 | 	mov	arg01, local02
043f4     B4 00 B0 FD | 	call	#__system____default_flush
043f8     00 2C 0E F2 | 	cmp	result1, #0 wz
043fc     01 5C 66 56 |  if_ne	neg	local01, #1
04400                 | LR__0287
04400     2E 2D 02 F6 | 	mov	result1, local01
04404     AF F0 03 F6 | 	mov	ptra, fp
04408     BF 00 A0 FD | 	call	#popregs_
0440c                 | __system____default_putc_ret
0440c     2D 00 64 FD | 	ret
04410                 | 
04410                 | __system____default_putc_terminal
04410     06 5A 05 F6 | 	mov	COUNT_, #6
04414     B0 00 A0 FD | 	call	#pushregs_
04418     29 5D 02 F6 | 	mov	local01, arg01
0441c     2A 5F 02 F6 | 	mov	local02, arg02
04420     2F 61 02 FB | 	rdlong	local03, local02
04424     08 60 06 F1 | 	add	local03, #8
04428     30 63 02 FB | 	rdlong	local04, local03
0442c     08 60 86 F1 | 	sub	local03, #8
04430     01 62 CE F7 | 	test	local04, #1 wz
04434     08 00 90 AD |  if_e	jmp	#LR__0288
04438     2F 53 02 F6 | 	mov	arg01, local02
0443c     6C 00 B0 FD | 	call	#__system____default_flush
04440                 | LR__0288
04440     08 60 06 F1 | 	add	local03, #8
04444     30 63 02 FB | 	rdlong	local04, local03
04448     02 62 46 F5 | 	or	local04, #2
0444c     30 63 62 FC | 	wrlong	local04, local03
04450     08 60 86 F1 | 	sub	local03, #8
04454     30 65 02 FB | 	rdlong	local05, local03
04458     32 67 02 F6 | 	mov	local06, local05
0445c     0C 60 06 F1 | 	add	local03, #12
04460     30 67 02 F1 | 	add	local06, local03
04464     33 5D 42 FC | 	wrbyte	local01, local06
04468     FF 5C 06 F5 | 	and	local01, #255
0446c     0C 60 86 F1 | 	sub	local03, #12
04470     01 64 06 F1 | 	add	local05, #1
04474     30 65 62 FC | 	wrlong	local05, local03
04478     0A 5C 0E F2 | 	cmp	local01, #10 wz
0447c     0C 00 90 AD |  if_e	jmp	#LR__0289
04480     02 00 00 FF 
04484     00 64 0E F2 | 	cmp	local05, ##1024 wz
04488     10 00 90 5D |  if_ne	jmp	#LR__0290
0448c                 | LR__0289
0448c     2F 53 02 F6 | 	mov	arg01, local02
04490     18 00 B0 FD | 	call	#__system____default_flush
04494     00 2C 0E F2 | 	cmp	result1, #0 wz
04498     01 5C 66 56 |  if_ne	neg	local01, #1
0449c                 | LR__0290
0449c     2E 2D 02 F6 | 	mov	result1, local01
044a0     AF F0 03 F6 | 	mov	ptra, fp
044a4     BF 00 A0 FD | 	call	#popregs_
044a8                 | __system____default_putc_terminal_ret
044a8     2D 00 64 FD | 	ret
044ac                 | 
044ac                 | __system____default_flush
044ac     0F 5A 05 F6 | 	mov	COUNT_, #15
044b0     B0 00 A0 FD | 	call	#pushregs_
044b4     29 5D 02 F6 | 	mov	local01, arg01
044b8     2E 5F 02 FB | 	rdlong	local02, local01
044bc     2F 61 02 FB | 	rdlong	local03, local02
044c0     08 5E 06 F1 | 	add	local02, #8
044c4     2F 63 02 FB | 	rdlong	local04, local02
044c8     08 5E 86 F1 | 	sub	local02, #8
044cc     02 62 CE F7 | 	test	local04, #2 wz
044d0     B8 00 90 AD |  if_e	jmp	#LR__0293
044d4     00 60 5E F2 | 	cmps	local03, #0 wcz
044d8     30 01 90 ED |  if_be	jmp	#LR__0295
044dc     08 5C 06 F1 | 	add	local01, #8
044e0     2E 63 02 FB | 	rdlong	local04, local01
044e4     08 5C 86 F1 | 	sub	local01, #8
044e8     40 62 CE F7 | 	test	local04, #64 wz
044ec     5C 00 90 AD |  if_e	jmp	#LR__0292
044f0     08 5C 06 F1 | 	add	local01, #8
044f4     2E 63 02 FB | 	rdlong	local04, local01
044f8     08 5C 86 F1 | 	sub	local01, #8
044fc     80 62 CE F7 | 	test	local04, #128 wz
04500     48 00 90 AD |  if_e	jmp	#LR__0291
04504     2C 5C 06 F1 | 	add	local01, #44
04508     2E 63 02 FB | 	rdlong	local04, local01
0450c     2C 5C 86 F1 | 	sub	local01, #44
04510     31 65 02 FB | 	rdlong	local05, local04
04514     04 62 06 F1 | 	add	local04, #4
04518     31 67 02 FB | 	rdlong	local06, local04
0451c     2E 53 02 F6 | 	mov	arg01, local01
04520     00 54 06 F6 | 	mov	arg02, #0
04524     02 56 06 F6 | 	mov	arg03, #2
04528     06 69 02 F6 | 	mov	local07, objptr
0452c     32 0D 02 F6 | 	mov	objptr, local05
04530     2D 66 62 FD | 	call	local06
04534     34 0D 02 F6 | 	mov	objptr, local07
04538     08 5C 06 F1 | 	add	local01, #8
0453c     2E 63 02 FB | 	rdlong	local04, local01
04540     80 62 26 F5 | 	andn	local04, #128
04544     2E 63 62 FC | 	wrlong	local04, local01
04548     08 5C 86 F1 | 	sub	local01, #8
0454c                 | LR__0291
0454c                 | LR__0292
0454c     0C 5E 06 F1 | 	add	local02, #12
04550     2F 55 02 F6 | 	mov	arg02, local02
04554     0C 5E 86 F1 | 	sub	local02, #12
04558     14 5C 06 F1 | 	add	local01, #20
0455c     2E 63 02 FB | 	rdlong	local04, local01
04560     14 5C 86 F1 | 	sub	local01, #20
04564     31 65 02 FB | 	rdlong	local05, local04
04568     04 62 06 F1 | 	add	local04, #4
0456c     31 67 02 FB | 	rdlong	local06, local04
04570     2E 53 02 F6 | 	mov	arg01, local01
04574     30 57 02 F6 | 	mov	arg03, local03
04578     06 69 02 F6 | 	mov	local07, objptr
0457c     32 0D 02 F6 | 	mov	objptr, local05
04580     2D 66 62 FD | 	call	local06
04584     34 0D 02 F6 | 	mov	objptr, local07
04588     80 00 90 FD | 	jmp	#LR__0295
0458c                 | LR__0293
0458c     08 5E 06 F1 | 	add	local02, #8
04590     2F 63 02 FB | 	rdlong	local04, local02
04594     08 5E 86 F1 | 	sub	local02, #8
04598     01 62 CE F7 | 	test	local04, #1 wz
0459c     6C 00 90 AD |  if_e	jmp	#LR__0294
045a0     00 60 0E F2 | 	cmp	local03, #0 wz
045a4     64 00 90 AD |  if_e	jmp	#LR__0294
045a8     2C 5C 06 F1 | 	add	local01, #44
045ac     2E 6B 02 FB | 	rdlong	local08, local01
045b0     2C 5C 86 F1 | 	sub	local01, #44
045b4     35 63 02 F6 | 	mov	local04, local08
045b8     31 65 02 FB | 	rdlong	local05, local04
045bc     04 62 06 F1 | 	add	local04, #4
045c0     31 6D 02 FB | 	rdlong	local09, local04
045c4     04 62 86 F1 | 	sub	local04, #4
045c8     36 67 02 F6 | 	mov	local06, local09
045cc     2E 6F 02 F6 | 	mov	local10, local01
045d0     30 71 02 F6 | 	mov	local11, local03
045d4     38 71 62 F6 | 	neg	local11, local11
045d8     38 73 02 F6 | 	mov	local12, local11
045dc     01 68 06 F6 | 	mov	local07, #1
045e0     37 53 02 F6 | 	mov	arg01, local10
045e4     39 55 02 F6 | 	mov	arg02, local12
045e8     01 56 06 F6 | 	mov	arg03, #1
045ec     06 75 02 F6 | 	mov	local13, objptr
045f0     32 0D 02 F6 | 	mov	objptr, local05
045f4     2D 66 62 FD | 	call	local06
045f8     3A 0D 02 F6 | 	mov	objptr, local13
045fc     16 77 02 F6 | 	mov	local14, result1
04600     3B 79 02 F6 | 	mov	local15, local14
04604     00 78 5E F2 | 	cmps	local15, #0 wcz
04608     30 79 02 36 |  if_ae	mov	local15, local03
0460c                 | LR__0294
0460c                 | LR__0295
0460c     2F 01 68 FC | 	wrlong	#0, local02
04610     04 5E 06 F1 | 	add	local02, #4
04614     2F 01 68 FC | 	wrlong	#0, local02
04618     04 5E 06 F1 | 	add	local02, #4
0461c     2F 01 68 FC | 	wrlong	#0, local02
04620     00 2C 06 F6 | 	mov	result1, #0
04624     AF F0 03 F6 | 	mov	ptra, fp
04628     BF 00 A0 FD | 	call	#popregs_
0462c                 | __system____default_flush_ret
0462c     2D 00 64 FD | 	ret
04630                 | 
04630                 | __system__open
04630     08 5A 05 F6 | 	mov	COUNT_, #8
04634     B0 00 A0 FD | 	call	#pushregs_
04638     29 5D 02 F6 | 	mov	local01, arg01
0463c     2A 5F 02 F6 | 	mov	local02, arg02
04640     2B 61 02 F6 | 	mov	local03, arg03
04644     01 00 00 FF 
04648     40 1C 06 F1 | 	add	ptr___system__dat__, ##576
0464c     0E 63 02 F6 | 	mov	local04, ptr___system__dat__
04650     00 64 06 F6 | 	mov	local05, #0
04654     01 00 00 FF 
04658     40 1C 86 F1 | 	sub	ptr___system__dat__, ##576
0465c     CC B9 9F FE | 	loc	pa,	#(@LR__0297-@LR__0296)
04660     93 00 A0 FD | 	call	#FCACHE_LOAD_
04664                 | LR__0296
04664     32 67 02 F6 | 	mov	local06, local05
04668     01 66 66 F0 | 	shl	local06, #1
0466c     32 67 02 F1 | 	add	local06, local05
04670     04 66 66 F0 | 	shl	local06, #4
04674     31 67 02 F1 | 	add	local06, local04
04678     08 66 06 F1 | 	add	local06, #8
0467c     33 69 0A FB | 	rdlong	local07, local06 wz
04680     0C 00 90 AD |  if_e	jmp	#LR__0298
04684     01 64 06 F1 | 	add	local05, #1
04688     0A 64 5E F2 | 	cmps	local05, #10 wcz
0468c     D4 FF 9F CD |  if_b	jmp	#LR__0296
04690                 | LR__0297
04690                 | LR__0298
04690     0A 64 0E F2 | 	cmp	local05, #10 wz
04694     1C 00 90 5D |  if_ne	jmp	#LR__0299
04698     01 00 00 FF 
0469c     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
046a0     0E 17 68 FC | 	wrlong	#11, ptr___system__dat__
046a4     01 00 00 FF 
046a8     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
046ac     01 2C 66 F6 | 	neg	result1, #1
046b0     30 00 90 FD | 	jmp	#LR__0300
046b4                 | LR__0299
046b4     32 53 02 F6 | 	mov	arg01, local05
046b8     01 52 66 F0 | 	shl	arg01, #1
046bc     32 53 02 F1 | 	add	arg01, local05
046c0     04 52 66 F0 | 	shl	arg01, #4
046c4     31 53 02 F1 | 	add	arg01, local04
046c8     2E 55 02 F6 | 	mov	arg02, local01
046cc     2F 57 02 F6 | 	mov	arg03, local02
046d0     30 59 02 F6 | 	mov	arg04, local03
046d4     D8 F5 BF FD | 	call	#__system___openraw
046d8     16 6B 0A F6 | 	mov	local08, result1 wz
046dc     32 6B 02 A6 |  if_e	mov	local08, local05
046e0     35 2D 02 F6 | 	mov	result1, local08
046e4                 | LR__0300
046e4     AF F0 03 F6 | 	mov	ptra, fp
046e8     BF 00 A0 FD | 	call	#popregs_
046ec                 | __system__open_ret
046ec     2D 00 64 FD | 	ret
046f0                 | 
046f0                 | __system__write
046f0     03 5A 05 F6 | 	mov	COUNT_, #3
046f4     B0 00 A0 FD | 	call	#pushregs_
046f8     29 5D 02 F6 | 	mov	local01, arg01
046fc     2A 5F 02 F6 | 	mov	local02, arg02
04700     2B 61 02 F6 | 	mov	local03, arg03
04704     0A 5C 1E F2 | 	cmp	local01, #10 wcz
04708     1C 00 90 CD |  if_b	jmp	#LR__0301
0470c     01 00 00 FF 
04710     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04714     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04718     01 00 00 FF 
0471c     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04720     01 2C 66 F6 | 	neg	result1, #1
04724     30 00 90 FD | 	jmp	#LR__0302
04728                 | LR__0301
04728     2E 53 02 F6 | 	mov	arg01, local01
0472c     01 52 66 F0 | 	shl	arg01, #1
04730     2E 53 02 F1 | 	add	arg01, local01
04734     04 52 66 F0 | 	shl	arg01, #4
04738     01 00 00 FF 
0473c     40 1C 06 F1 | 	add	ptr___system__dat__, ##576
04740     0E 53 02 F1 | 	add	arg01, ptr___system__dat__
04744     2F 55 02 F6 | 	mov	arg02, local02
04748     30 57 02 F6 | 	mov	arg03, local03
0474c     01 00 00 FF 
04750     40 1C 86 F1 | 	sub	ptr___system__dat__, ##576
04754     64 07 B0 FD | 	call	#__system___vfswrite
04758                 | LR__0302
04758     AF F0 03 F6 | 	mov	ptra, fp
0475c     BF 00 A0 FD | 	call	#popregs_
04760                 | __system__write_ret
04760     2D 00 64 FD | 	ret
04764                 | 
04764                 | __system__read
04764     03 5A 05 F6 | 	mov	COUNT_, #3
04768     B0 00 A0 FD | 	call	#pushregs_
0476c     29 5D 02 F6 | 	mov	local01, arg01
04770     2A 5F 02 F6 | 	mov	local02, arg02
04774     2B 61 02 F6 | 	mov	local03, arg03
04778     0A 5C 1E F2 | 	cmp	local01, #10 wcz
0477c     1C 00 90 CD |  if_b	jmp	#LR__0303
04780     01 00 00 FF 
04784     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04788     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0478c     01 00 00 FF 
04790     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04794     01 2C 66 F6 | 	neg	result1, #1
04798     30 00 90 FD | 	jmp	#LR__0304
0479c                 | LR__0303
0479c     2E 53 02 F6 | 	mov	arg01, local01
047a0     01 52 66 F0 | 	shl	arg01, #1
047a4     2E 53 02 F1 | 	add	arg01, local01
047a8     04 52 66 F0 | 	shl	arg01, #4
047ac     01 00 00 FF 
047b0     40 1C 06 F1 | 	add	ptr___system__dat__, ##576
047b4     0E 53 02 F1 | 	add	arg01, ptr___system__dat__
047b8     2F 55 02 F6 | 	mov	arg02, local02
047bc     30 57 02 F6 | 	mov	arg03, local03
047c0     01 00 00 FF 
047c4     40 1C 86 F1 | 	sub	ptr___system__dat__, ##576
047c8     B4 08 B0 FD | 	call	#__system___vfsread
047cc                 | LR__0304
047cc     AF F0 03 F6 | 	mov	ptra, fp
047d0     BF 00 A0 FD | 	call	#popregs_
047d4                 | __system__read_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | __system__close
047d8     01 5A 05 F6 | 	mov	COUNT_, #1
047dc     B0 00 A0 FD | 	call	#pushregs_
047e0     29 5D 02 F6 | 	mov	local01, arg01
047e4     0A 5C 1E F2 | 	cmp	local01, #10 wcz
047e8     1C 00 90 CD |  if_b	jmp	#LR__0305
047ec     01 00 00 FF 
047f0     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
047f4     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
047f8     01 00 00 FF 
047fc     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04800     01 2C 66 F6 | 	neg	result1, #1
04804     28 00 90 FD | 	jmp	#LR__0306
04808                 | LR__0305
04808     2E 53 02 F6 | 	mov	arg01, local01
0480c     01 52 66 F0 | 	shl	arg01, #1
04810     2E 53 02 F1 | 	add	arg01, local01
04814     04 52 66 F0 | 	shl	arg01, #4
04818     01 00 00 FF 
0481c     40 1C 06 F1 | 	add	ptr___system__dat__, ##576
04820     0E 53 02 F1 | 	add	arg01, ptr___system__dat__
04824     01 00 00 FF 
04828     40 1C 86 F1 | 	sub	ptr___system__dat__, ##576
0482c     EC F9 BF FD | 	call	#__system___closeraw
04830                 | LR__0306
04830     AF F0 03 F6 | 	mov	ptra, fp
04834     BF 00 A0 FD | 	call	#popregs_
04838                 | __system__close_ret
04838     2D 00 64 FD | 	ret
0483c                 | 
0483c                 | __system__lseek
0483c     09 5A 05 F6 | 	mov	COUNT_, #9
04840     B0 00 A0 FD | 	call	#pushregs_
04844     29 5D 02 F6 | 	mov	local01, arg01
04848     2A 5F 02 F6 | 	mov	local02, arg02
0484c     2B 61 02 F6 | 	mov	local03, arg03
04850     0A 5C 1E F2 | 	cmp	local01, #10 wcz
04854     1C 00 90 CD |  if_b	jmp	#LR__0307
04858     01 00 00 FF 
0485c     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04860     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04864     01 00 00 FF 
04868     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0486c     01 2C 66 F6 | 	neg	result1, #1
04870     E0 00 90 FD | 	jmp	#LR__0311
04874                 | LR__0307
04874     2E 63 02 F6 | 	mov	local04, local01
04878     01 62 66 F0 | 	shl	local04, #1
0487c     2E 63 02 F1 | 	add	local04, local01
04880     04 62 66 F0 | 	shl	local04, #4
04884     01 00 00 FF 
04888     40 1C 06 F1 | 	add	ptr___system__dat__, ##576
0488c     0E 63 02 F1 | 	add	local04, ptr___system__dat__
04890     2C 62 06 F1 | 	add	local04, #44
04894     31 65 0A FB | 	rdlong	local05, local04 wz
04898     2C 62 86 F1 | 	sub	local04, #44
0489c     01 00 00 FF 
048a0     40 1C 86 F1 | 	sub	ptr___system__dat__, ##576
048a4     1C 00 90 5D |  if_ne	jmp	#LR__0308
048a8     01 00 00 FF 
048ac     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
048b0     0E 21 68 FC | 	wrlong	#16, ptr___system__dat__
048b4     01 00 00 FF 
048b8     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
048bc     01 2C 66 F6 | 	neg	result1, #1
048c0     90 00 90 FD | 	jmp	#LR__0311
048c4                 | LR__0308
048c4     08 62 06 F1 | 	add	local04, #8
048c8     31 65 02 FB | 	rdlong	local05, local04
048cc     08 62 86 F1 | 	sub	local04, #8
048d0     40 64 CE F7 | 	test	local05, #64 wz
048d4     14 00 90 AD |  if_e	jmp	#LR__0309
048d8     08 62 06 F1 | 	add	local04, #8
048dc     31 65 02 FB | 	rdlong	local05, local04
048e0     80 64 46 F5 | 	or	local05, #128
048e4     31 65 62 FC | 	wrlong	local05, local04
048e8     08 62 86 F1 | 	sub	local04, #8
048ec                 | LR__0309
048ec     2C 62 06 F1 | 	add	local04, #44
048f0     31 65 02 FB | 	rdlong	local05, local04
048f4     2C 62 86 F1 | 	sub	local04, #44
048f8     32 67 02 FB | 	rdlong	local06, local05
048fc     04 64 06 F1 | 	add	local05, #4
04900     32 69 02 FB | 	rdlong	local07, local05
04904     31 53 02 F6 | 	mov	arg01, local04
04908     2F 55 02 F6 | 	mov	arg02, local02
0490c     30 57 02 F6 | 	mov	arg03, local03
04910     06 6B 02 F6 | 	mov	local08, objptr
04914     33 0D 02 F6 | 	mov	objptr, local06
04918     2D 68 62 FD | 	call	local07
0491c     35 0D 02 F6 | 	mov	objptr, local08
04920     16 6D 02 F6 | 	mov	local09, result1
04924     00 6C 5E F2 | 	cmps	local09, #0 wcz
04928     24 00 90 3D |  if_ae	jmp	#LR__0310
0492c     36 53 6A F6 | 	neg	arg01, local09 wz
04930     01 00 00 FF 
04934     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04938     0E 53 62 FC | 	wrlong	arg01, ptr___system__dat__
0493c     01 00 00 FF 
04940     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04944     01 2C 66 56 |  if_ne	neg	result1, #1
04948     00 2C 06 A6 |  if_e	mov	result1, #0
0494c     04 00 90 FD | 	jmp	#LR__0311
04950                 | LR__0310
04950     36 2D 02 F6 | 	mov	result1, local09
04954                 | LR__0311
04954     AF F0 03 F6 | 	mov	ptra, fp
04958     BF 00 A0 FD | 	call	#popregs_
0495c                 | __system__lseek_ret
0495c     2D 00 64 FD | 	ret
04960                 | 
04960                 | __system__ioctl
04960     08 5A 05 F6 | 	mov	COUNT_, #8
04964     B0 00 A0 FD | 	call	#pushregs_
04968     2A 5D 02 F6 | 	mov	local01, arg02
0496c     2B 5F 02 F6 | 	mov	local02, arg03
04970     94 00 B0 FD | 	call	#__system____getftab
04974     16 61 0A F6 | 	mov	local03, result1 wz
04978     1C 00 90 5D |  if_ne	jmp	#LR__0312
0497c     01 00 00 FF 
04980     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04984     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04988     01 00 00 FF 
0498c     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04990     01 2C 66 F6 | 	neg	result1, #1
04994     64 00 90 FD | 	jmp	#LR__0314
04998                 | LR__0312
04998     24 60 06 F1 | 	add	local03, #36
0499c     30 63 02 FB | 	rdlong	local04, local03
049a0     24 60 86 F1 | 	sub	local03, #36
049a4     31 65 02 FB | 	rdlong	local05, local04
049a8     04 62 06 F1 | 	add	local04, #4
049ac     31 67 02 FB | 	rdlong	local06, local04
049b0     30 53 02 F6 | 	mov	arg01, local03
049b4     2E 55 02 F6 | 	mov	arg02, local01
049b8     2F 57 02 F6 | 	mov	arg03, local02
049bc     06 69 02 F6 | 	mov	local07, objptr
049c0     32 0D 02 F6 | 	mov	objptr, local05
049c4     2D 66 62 FD | 	call	local06
049c8     34 0D 02 F6 | 	mov	objptr, local07
049cc     16 6B 0A F6 | 	mov	local08, result1 wz
049d0     24 00 90 AD |  if_e	jmp	#LR__0313
049d4     01 00 00 FF 
049d8     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
049dc     0E 6B 62 FC | 	wrlong	local08, ptr___system__dat__
049e0     01 00 00 FF 
049e4     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
049e8     00 6A 0E F2 | 	cmp	local08, #0 wz
049ec     01 2C 66 56 |  if_ne	neg	result1, #1
049f0     00 2C 06 A6 |  if_e	mov	result1, #0
049f4     04 00 90 FD | 	jmp	#LR__0314
049f8                 | LR__0313
049f8     00 2C 06 F6 | 	mov	result1, #0
049fc                 | LR__0314
049fc     AF F0 03 F6 | 	mov	ptra, fp
04a00     BF 00 A0 FD | 	call	#popregs_
04a04                 | __system__ioctl_ret
04a04     2D 00 64 FD | 	ret
04a08                 | 
04a08                 | __system____getftab
04a08     0A 52 1E F2 | 	cmp	arg01, #10 wcz
04a0c     00 2C 06 36 |  if_ae	mov	result1, #0
04a10     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
04a14     29 2D 02 F6 | 	mov	result1, arg01
04a18     01 2C 66 F0 | 	shl	result1, #1
04a1c     29 2D 02 F1 | 	add	result1, arg01
04a20     04 2C 66 F0 | 	shl	result1, #4
04a24     01 00 00 FF 
04a28     40 1C 06 F1 | 	add	ptr___system__dat__, ##576
04a2c     0E 2D 02 F1 | 	add	result1, ptr___system__dat__
04a30     01 00 00 FF 
04a34     40 1C 86 F1 | 	sub	ptr___system__dat__, ##576
04a38                 | __system____getftab_ret
04a38     2D 00 64 FD | 	ret
04a3c                 | 
04a3c                 | __system__strncpy
04a3c     29 33 02 F6 | 	mov	_var01, arg01
04a40                 | LR__0315
04a40     01 56 86 F1 | 	sub	arg03, #1
04a44     00 56 5E F2 | 	cmps	arg03, #0 wcz
04a48     18 00 90 CD |  if_b	jmp	#LR__0316
04a4c     2A 35 C2 FA | 	rdbyte	_var02, arg02
04a50     19 35 42 FC | 	wrbyte	_var02, _var01
04a54     01 54 06 F1 | 	add	arg02, #1
04a58     19 37 CA FA | 	rdbyte	_var03, _var01 wz
04a5c     01 32 06 F1 | 	add	_var01, #1
04a60     DC FF 9F 5D |  if_ne	jmp	#LR__0315
04a64                 | LR__0316
04a64     AC B5 9F FE | 	loc	pa,	#(@LR__0318-@LR__0317)
04a68     93 00 A0 FD | 	call	#FCACHE_LOAD_
04a6c                 | LR__0317
04a6c     01 56 86 F1 | 	sub	arg03, #1
04a70     00 56 5E F2 | 	cmps	arg03, #0 wcz
04a74     19 01 48 3C |  if_ae	wrbyte	#0, _var01
04a78     01 32 06 31 |  if_ae	add	_var01, #1
04a7c     EC FF 9F 3D |  if_ae	jmp	#LR__0317
04a80                 | LR__0318
04a80     29 2D 02 F6 | 	mov	result1, arg01
04a84                 | __system__strncpy_ret
04a84     2D 00 64 FD | 	ret
04a88                 | 
04a88                 | __system__strncat
04a88     29 33 02 F6 | 	mov	_var01, arg01
04a8c     2A 35 02 F6 | 	mov	_var02, arg02
04a90     2B 37 02 F6 | 	mov	_var03, arg03
04a94     1A 39 0A F6 | 	mov	_var04, _var02 wz
04a98     68 00 90 AD |  if_e	jmp	#LR__0323
04a9c     00 36 1E F2 | 	cmp	_var03, #0 wcz
04aa0     60 00 90 ED |  if_be	jmp	#LR__0323
04aa4     19 3B 02 F6 | 	mov	_var05, _var01
04aa8     A0 B5 9F FE | 	loc	pa,	#(@LR__0321-@LR__0319)
04aac     93 00 A0 FD | 	call	#FCACHE_LOAD_
04ab0                 | LR__0319
04ab0     1D 3D CA FA | 	rdbyte	_var06, _var05 wz
04ab4     01 3A 06 51 |  if_ne	add	_var05, #1
04ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0319
04abc     1B 3F 02 F6 | 	mov	_var07, _var03
04ac0                 | LR__0320
04ac0     1C 41 02 F6 | 	mov	_var08, _var04
04ac4     1C 43 02 F6 | 	mov	_var09, _var04
04ac8     01 42 06 F1 | 	add	_var09, #1
04acc     21 39 02 F6 | 	mov	_var04, _var09
04ad0     20 45 C2 FA | 	rdbyte	_var10, _var08
04ad4     22 3D 02 F6 | 	mov	_var06, _var10
04ad8     07 3C 4E F7 | 	zerox	_var06, #7 wz
04adc     1C 00 90 AD |  if_e	jmp	#LR__0322
04ae0     1F 47 02 F6 | 	mov	_var11, _var07
04ae4     01 46 86 F1 | 	sub	_var11, #1
04ae8     23 3F 02 F6 | 	mov	_var07, _var11
04aec     00 3E 5E F2 | 	cmps	_var07, #0 wcz
04af0     1D 45 42 3C |  if_ae	wrbyte	_var10, _var05
04af4     01 3A 06 31 |  if_ae	add	_var05, #1
04af8     C4 FF 9F 3D |  if_ae	jmp	#LR__0320
04afc                 | LR__0321
04afc                 | LR__0322
04afc     00 3C 06 F6 | 	mov	_var06, #0
04b00     1D 01 48 FC | 	wrbyte	#0, _var05
04b04                 | LR__0323
04b04     19 2D 02 F6 | 	mov	result1, _var01
04b08                 | __system__strncat_ret
04b08     2D 00 64 FD | 	ret
04b0c                 | 
04b0c                 | __system__strncmp
04b0c     29 33 0A F6 | 	mov	_var01, arg01 wz
04b10     2A 35 02 F6 | 	mov	_var02, arg02
04b14     2B 37 02 F6 | 	mov	_var03, arg03
04b18     14 00 90 5D |  if_ne	jmp	#LR__0324
04b1c     00 34 0E F2 | 	cmp	_var02, #0 wz
04b20     01 38 66 56 |  if_ne	neg	_var04, #1
04b24     00 38 06 A6 |  if_e	mov	_var04, #0
04b28     1C 2D 02 F6 | 	mov	result1, _var04
04b2c     8C 00 90 FD | 	jmp	#__system__strncmp_ret
04b30                 | LR__0324
04b30     00 34 0E F2 | 	cmp	_var02, #0 wz
04b34     01 2C 06 A6 |  if_e	mov	result1, #1
04b38     80 00 90 AD |  if_e	jmp	#__system__strncmp_ret
04b3c     1B 3B 02 F6 | 	mov	_var05, _var03
04b40     FC B4 9F FE | 	loc	pa,	#(@LR__0326-@LR__0325)
04b44     93 00 A0 FD | 	call	#FCACHE_LOAD_
04b48                 | LR__0325
04b48     19 3D C2 FA | 	rdbyte	_var06, _var01
04b4c     1A 3F 02 F6 | 	mov	_var07, _var02
04b50     1A 41 02 F6 | 	mov	_var08, _var02
04b54     01 40 06 F1 | 	add	_var08, #1
04b58     20 35 02 F6 | 	mov	_var02, _var08
04b5c     1F 43 C2 FA | 	rdbyte	_var09, _var07
04b60     1D 39 02 F6 | 	mov	_var04, _var05
04b64     01 38 86 F1 | 	sub	_var04, #1
04b68     1C 3B 02 F6 | 	mov	_var05, _var04
04b6c     00 3A 5E F2 | 	cmps	_var05, #0 wcz
04b70     01 32 06 F1 | 	add	_var01, #1
04b74     10 00 90 CD |  if_b	jmp	#LR__0327
04b78     00 3C 0E F2 | 	cmp	_var06, #0 wz
04b7c     08 00 90 AD |  if_e	jmp	#LR__0327
04b80     21 3D 0A F2 | 	cmp	_var06, _var09 wz
04b84     C0 FF 9F AD |  if_e	jmp	#LR__0325
04b88                 | LR__0326
04b88                 | LR__0327
04b88     00 3A 5E F2 | 	cmps	_var05, #0 wcz
04b8c     00 2C 06 C6 |  if_b	mov	result1, #0
04b90     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
04b94     21 3D 0A F2 | 	cmp	_var06, _var09 wz
04b98     00 2C 06 A6 |  if_e	mov	result1, #0
04b9c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
04ba0     00 3C 0E F2 | 	cmp	_var06, #0 wz
04ba4     01 2C 66 A6 |  if_e	neg	result1, #1
04ba8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
04bac     00 42 0E F2 | 	cmp	_var09, #0 wz
04bb0     01 2C 06 A6 |  if_e	mov	result1, #1
04bb4     1E 2D 02 56 |  if_ne	mov	result1, _var06
04bb8     21 2D 82 51 |  if_ne	sub	result1, _var09
04bbc                 | __system__strncmp_ret
04bbc     2D 00 64 FD | 	ret
04bc0                 | 
04bc0                 | __system___strrev
04bc0     29 33 CA FA | 	rdbyte	_var01, arg01 wz
04bc4     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
04bc8     29 35 02 F6 | 	mov	_var02, arg01
04bcc     3C B4 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
04bd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
04bd4                 | LR__0328
04bd4     1A 33 CA FA | 	rdbyte	_var01, _var02 wz
04bd8     01 34 06 51 |  if_ne	add	_var02, #1
04bdc     F4 FF 9F 5D |  if_ne	jmp	#LR__0328
04be0                 | LR__0329
04be0     01 34 86 F1 | 	sub	_var02, #1
04be4                 | LR__0330
04be4     29 35 5A F2 | 	cmps	_var02, arg01 wcz
04be8     1C 00 90 ED |  if_be	jmp	#LR__0331
04bec     29 37 C2 FA | 	rdbyte	_var03, arg01
04bf0     1A 39 C2 FA | 	rdbyte	_var04, _var02
04bf4     29 39 42 FC | 	wrbyte	_var04, arg01
04bf8     1A 37 42 FC | 	wrbyte	_var03, _var02
04bfc     01 52 06 F1 | 	add	arg01, #1
04c00     01 34 86 F1 | 	sub	_var02, #1
04c04     DC FF 9F FD | 	jmp	#LR__0330
04c08                 | LR__0331
04c08                 | __system___strrev_ret
04c08     2D 00 64 FD | 	ret
04c0c                 | 
04c0c                 | __system___fmtpad
04c0c     0C 5A 05 F6 | 	mov	COUNT_, #12
04c10     B0 00 A0 FD | 	call	#pushregs_
04c14     29 5D 02 F6 | 	mov	local01, arg01
04c18     2A 5F 02 F6 | 	mov	local02, arg02
04c1c     2C 61 02 F6 | 	mov	local03, arg04
04c20     2F 63 EA F8 | 	getbyte	local04, local02, #1
04c24     16 5E 46 F0 | 	shr	local02, #22
04c28     03 5E 0E F5 | 	and	local02, #3 wz
04c2c     00 64 06 F6 | 	mov	local05, #0
04c30     01 5E 06 A6 |  if_e	mov	local02, #1
04c34     30 5F CA F7 | 	test	local02, local03 wz
04c38     00 2C 06 A6 |  if_e	mov	result1, #0
04c3c     80 00 90 AD |  if_e	jmp	#LR__0335
04c40     2B 63 82 F1 | 	sub	local04, arg03
04c44     31 67 02 F6 | 	mov	local06, local04
04c48     00 66 5E F2 | 	cmps	local06, #0 wcz
04c4c     00 2C 06 E6 |  if_be	mov	result1, #0
04c50     6C 00 90 ED |  if_be	jmp	#LR__0335
04c54     03 5E 0E F2 | 	cmp	local02, #3 wz
04c58     18 00 90 5D |  if_ne	jmp	#LR__0332
04c5c     01 60 0E F2 | 	cmp	local03, #1 wz
04c60     6E 68 62 FD | 	wrz	local07
04c64     34 67 02 F1 | 	add	local06, local07
04c68     33 67 52 F6 | 	abs	local06, local06 wc
04c6c     01 66 46 F0 | 	shr	local06, #1
04c70     33 67 62 C6 |  if_b	neg	local06, local06
04c74                 | LR__0332
04c74     00 66 5E F2 | 	cmps	local06, #0 wcz
04c78     40 00 90 ED |  if_be	jmp	#LR__0334
04c7c     33 6B 02 F6 | 	mov	local08, local06
04c80                 | LR__0333
04c80     2E 6D 02 F6 | 	mov	local09, local01
04c84     36 69 02 FB | 	rdlong	local07, local09
04c88     04 6C 06 F1 | 	add	local09, #4
04c8c     36 6F 02 FB | 	rdlong	local10, local09
04c90     20 52 06 F6 | 	mov	arg01, #32
04c94     06 71 02 F6 | 	mov	local11, objptr
04c98     34 0D 02 F6 | 	mov	objptr, local07
04c9c     2D 6E 62 FD | 	call	local10
04ca0     38 0D 02 F6 | 	mov	objptr, local11
04ca4     16 73 02 F6 | 	mov	local12, result1
04ca8     00 72 5E F2 | 	cmps	local12, #0 wcz
04cac     39 2D 02 C6 |  if_b	mov	result1, local12
04cb0     0C 00 90 CD |  if_b	jmp	#LR__0335
04cb4     39 65 02 F1 | 	add	local05, local12
04cb8     F1 6B 6E FB | 	djnz	local08, #LR__0333
04cbc                 | LR__0334
04cbc     32 2D 02 F6 | 	mov	result1, local05
04cc0                 | LR__0335
04cc0     AF F0 03 F6 | 	mov	ptra, fp
04cc4     BF 00 A0 FD | 	call	#popregs_
04cc8                 | __system___fmtpad_ret
04cc8     2D 00 64 FD | 	ret
04ccc                 | 
04ccc                 | __system___uitoa
04ccc     09 5A 05 F6 | 	mov	COUNT_, #9
04cd0     B0 00 A0 FD | 	call	#pushregs_
04cd4     29 5D 02 F6 | 	mov	local01, arg01
04cd8     2A 5F 02 F6 | 	mov	local02, arg02
04cdc     2B 61 02 F6 | 	mov	local03, arg03
04ce0     2C 63 02 F6 | 	mov	local04, arg04
04ce4     2D 65 0A F6 | 	mov	local05, arg05 wz
04ce8     2E 67 02 F6 | 	mov	local06, local01
04cec     00 68 06 F6 | 	mov	local07, #0
04cf0     37 6A 06 56 |  if_ne	mov	local08, #55
04cf4     57 6A 06 A6 |  if_e	mov	local08, #87
04cf8                 | LR__0336
04cf8     2F FD 02 F6 | 	mov	muldiva_, local02
04cfc     30 FF 02 F6 | 	mov	muldivb_, local03
04d00     CC 00 A0 FD | 	call	#unsdivide_
04d04     7E 6D 02 F6 | 	mov	local09, muldiva_
04d08     0A 6C 1E F2 | 	cmp	local09, #10 wcz
04d0c     30 6C 06 C1 |  if_b	add	local09, #48
04d10     35 6D 02 31 |  if_ae	add	local09, local08
04d14     33 6D 42 FC | 	wrbyte	local09, local06
04d18     2F FD 02 F6 | 	mov	muldiva_, local02
04d1c     30 FF 02 F6 | 	mov	muldivb_, local03
04d20     01 66 06 F1 | 	add	local06, #1
04d24     CC 00 A0 FD | 	call	#unsdivide_
04d28     7F 5F 0A F6 | 	mov	local02, muldivb_ wz
04d2c     01 68 06 F1 | 	add	local07, #1
04d30     C4 FF 9F 5D |  if_ne	jmp	#LR__0336
04d34     31 69 1A F2 | 	cmp	local07, local04 wcz
04d38     BC FF 9F CD |  if_b	jmp	#LR__0336
04d3c     33 01 48 FC | 	wrbyte	#0, local06
04d40     2E 53 02 F6 | 	mov	arg01, local01
04d44     78 FE BF FD | 	call	#__system___strrev
04d48     34 2D 02 F6 | 	mov	result1, local07
04d4c     AF F0 03 F6 | 	mov	ptra, fp
04d50     BF 00 A0 FD | 	call	#popregs_
04d54                 | __system___uitoa_ret
04d54     2D 00 64 FD | 	ret
04d58                 | 
04d58                 | __system___gettxfunc
04d58     03 5A 05 F6 | 	mov	COUNT_, #3
04d5c     B0 00 A0 FD | 	call	#pushregs_
04d60     A4 FC BF FD | 	call	#__system____getftab
04d64     16 5D 0A F6 | 	mov	local01, result1 wz
04d68     14 00 90 AD |  if_e	jmp	#LR__0337
04d6c     08 5C 06 F1 | 	add	local01, #8
04d70     2E 5F 02 FB | 	rdlong	local02, local01
04d74     08 5C 86 F1 | 	sub	local01, #8
04d78     2F 61 0A F6 | 	mov	local03, local02 wz
04d7c     08 00 90 5D |  if_ne	jmp	#LR__0338
04d80                 | LR__0337
04d80     00 2C 06 F6 | 	mov	result1, #0
04d84     0C 00 90 FD | 	jmp	#LR__0339
04d88                 | LR__0338
04d88     2E 53 02 F6 | 	mov	arg01, local01
04d8c     09 55 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
04d90     4C D6 BF FD | 	call	#__system___make_methodptr
04d94                 | LR__0339
04d94     AF F0 03 F6 | 	mov	ptra, fp
04d98     BF 00 A0 FD | 	call	#popregs_
04d9c                 | __system___gettxfunc_ret
04d9c     2D 00 64 FD | 	ret
04da0                 | 
04da0                 | __system___getrxfunc
04da0     03 5A 05 F6 | 	mov	COUNT_, #3
04da4     B0 00 A0 FD | 	call	#pushregs_
04da8     5C FC BF FD | 	call	#__system____getftab
04dac     16 5D 0A F6 | 	mov	local01, result1 wz
04db0     14 00 90 AD |  if_e	jmp	#LR__0340
04db4     08 5C 06 F1 | 	add	local01, #8
04db8     2E 5F 02 FB | 	rdlong	local02, local01
04dbc     08 5C 86 F1 | 	sub	local01, #8
04dc0     2F 61 0A F6 | 	mov	local03, local02 wz
04dc4     08 00 90 5D |  if_ne	jmp	#LR__0341
04dc8                 | LR__0340
04dc8     00 2C 06 F6 | 	mov	result1, #0
04dcc     0C 00 90 FD | 	jmp	#LR__0342
04dd0                 | LR__0341
04dd0     2E 53 02 F6 | 	mov	arg01, local01
04dd4     08 55 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_getchar_
04dd8     04 D6 BF FD | 	call	#__system___make_methodptr
04ddc                 | LR__0342
04ddc     AF F0 03 F6 | 	mov	ptra, fp
04de0     BF 00 A0 FD | 	call	#popregs_
04de4                 | __system___getrxfunc_ret
04de4     2D 00 64 FD | 	ret
04de8                 | 
04de8                 | __system___getiolock_0125
04de8     03 5A 05 F6 | 	mov	COUNT_, #3
04dec     B0 00 A0 FD | 	call	#pushregs_
04df0     14 FC BF FD | 	call	#__system____getftab
04df4     16 5D 0A F6 | 	mov	local01, result1 wz
04df8     14 00 90 AD |  if_e	jmp	#LR__0343
04dfc     08 5C 06 F1 | 	add	local01, #8
04e00     2E 5F 02 FB | 	rdlong	local02, local01
04e04     08 5C 86 F1 | 	sub	local01, #8
04e08     2F 61 0A F6 | 	mov	local03, local02 wz
04e0c     18 00 90 5D |  if_ne	jmp	#LR__0344
04e10                 | LR__0343
04e10     01 00 00 FF 
04e14     38 1C 06 F1 | 	add	ptr___system__dat__, ##568
04e18     0E 2D 02 F6 | 	mov	result1, ptr___system__dat__
04e1c     01 00 00 FF 
04e20     38 1C 86 F1 | 	sub	ptr___system__dat__, ##568
04e24     08 00 90 FD | 	jmp	#LR__0345
04e28                 | LR__0344
04e28     0C 5C 06 F1 | 	add	local01, #12
04e2c     2E 2D 02 F6 | 	mov	result1, local01
04e30                 | LR__0345
04e30     AF F0 03 F6 | 	mov	ptra, fp
04e34     BF 00 A0 FD | 	call	#popregs_
04e38                 | __system___getiolock_0125_ret
04e38     2D 00 64 FD | 	ret
04e3c                 | 
04e3c                 | __system___rxtxioctl_0150
04e3c     02 5A 05 F6 | 	mov	COUNT_, #2
04e40     B0 00 A0 FD | 	call	#pushregs_
04e44     2A 5D 02 F6 | 	mov	local01, arg02
04e48     2B 5F 02 F6 | 	mov	local02, arg03
04e4c     00 5D 0E F2 | 	cmp	local01, #256 wz
04e50     0C 00 90 AD |  if_e	jmp	#LR__0346
04e54     01 5D 0E F2 | 	cmp	local01, #257 wz
04e58     1C 00 90 AD |  if_e	jmp	#LR__0347
04e5c     30 00 90 FD | 	jmp	#LR__0348
04e60                 | LR__0346
04e60     08 1C 06 F1 | 	add	ptr___system__dat__, #8
04e64     0E 2D 02 FB | 	rdlong	result1, ptr___system__dat__
04e68     08 1C 86 F1 | 	sub	ptr___system__dat__, #8
04e6c     2F 2D 62 FC | 	wrlong	result1, local02
04e70     00 2C 06 F6 | 	mov	result1, #0
04e74     30 00 90 FD | 	jmp	#LR__0349
04e78                 | LR__0347
04e78     2F 53 02 FB | 	rdlong	arg01, local02
04e7c     08 1C 06 F1 | 	add	ptr___system__dat__, #8
04e80     0E 53 62 FC | 	wrlong	arg01, ptr___system__dat__
04e84     08 1C 86 F1 | 	sub	ptr___system__dat__, #8
04e88     00 2C 06 F6 | 	mov	result1, #0
04e8c     18 00 90 FD | 	jmp	#LR__0349
04e90                 | LR__0348
04e90     01 00 00 FF 
04e94     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04e98     0E 15 68 FC | 	wrlong	#10, ptr___system__dat__
04e9c     01 00 00 FF 
04ea0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04ea4     01 2C 66 F6 | 	neg	result1, #1
04ea8                 | LR__0349
04ea8     AF F0 03 F6 | 	mov	ptra, fp
04eac     BF 00 A0 FD | 	call	#popregs_
04eb0                 | __system___rxtxioctl_0150_ret
04eb0     2D 00 64 FD | 	ret
04eb4                 | 
04eb4                 | __system____dummy_flush_0151
04eb4     00 2C 06 F6 | 	mov	result1, #0
04eb8                 | __system____dummy_flush_0151_ret
04eb8     2D 00 64 FD | 	ret
04ebc                 | 
04ebc                 | __system___vfswrite
04ebc     0B 5A 05 F6 | 	mov	COUNT_, #11
04ec0     B0 00 A0 FD | 	call	#pushregs_
04ec4     29 5D 02 F6 | 	mov	local01, arg01
04ec8     2A 5F 02 F6 | 	mov	local02, arg02
04ecc     2B 61 02 F6 | 	mov	local03, arg03
04ed0     2F 63 02 F6 | 	mov	local04, local02
04ed4     08 5C 06 F1 | 	add	local01, #8
04ed8     2E 65 02 FB | 	rdlong	local05, local01
04edc     08 5C 86 F1 | 	sub	local01, #8
04ee0     02 64 CE F7 | 	test	local05, #2 wz
04ee4     1C 00 90 5D |  if_ne	jmp	#LR__0350
04ee8     01 00 00 FF 
04eec     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04ef0     0E 0D 68 FC | 	wrlong	#6, ptr___system__dat__
04ef4     01 00 00 FF 
04ef8     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04efc     01 2C 66 F6 | 	neg	result1, #1
04f00     70 01 90 FD | 	jmp	#LR__0358
04f04                 | LR__0350
04f04     08 5C 06 F1 | 	add	local01, #8
04f08     2E 65 02 FB | 	rdlong	local05, local01
04f0c     08 5C 86 F1 | 	sub	local01, #8
04f10     40 64 CE F7 | 	test	local05, #64 wz
04f14     5C 00 90 AD |  if_e	jmp	#LR__0352
04f18     08 5C 06 F1 | 	add	local01, #8
04f1c     2E 65 02 FB | 	rdlong	local05, local01
04f20     08 5C 86 F1 | 	sub	local01, #8
04f24     80 64 CE F7 | 	test	local05, #128 wz
04f28     48 00 90 AD |  if_e	jmp	#LR__0351
04f2c     2C 5C 06 F1 | 	add	local01, #44
04f30     2E 65 02 FB | 	rdlong	local05, local01
04f34     2C 5C 86 F1 | 	sub	local01, #44
04f38     32 67 02 FB | 	rdlong	local06, local05
04f3c     04 64 06 F1 | 	add	local05, #4
04f40     32 69 02 FB | 	rdlong	local07, local05
04f44     2E 53 02 F6 | 	mov	arg01, local01
04f48     00 54 06 F6 | 	mov	arg02, #0
04f4c     02 56 06 F6 | 	mov	arg03, #2
04f50     06 6B 02 F6 | 	mov	local08, objptr
04f54     33 0D 02 F6 | 	mov	objptr, local06
04f58     2D 68 62 FD | 	call	local07
04f5c     35 0D 02 F6 | 	mov	objptr, local08
04f60     08 5C 06 F1 | 	add	local01, #8
04f64     2E 65 02 FB | 	rdlong	local05, local01
04f68     80 64 26 F5 | 	andn	local05, #128
04f6c     2E 65 62 FC | 	wrlong	local05, local01
04f70     08 5C 86 F1 | 	sub	local01, #8
04f74                 | LR__0351
04f74                 | LR__0352
04f74     14 5C 06 F1 | 	add	local01, #20
04f78     2E 65 0A FB | 	rdlong	local05, local01 wz
04f7c     14 5C 86 F1 | 	sub	local01, #20
04f80     7C 00 90 AD |  if_e	jmp	#LR__0354
04f84     14 5C 06 F1 | 	add	local01, #20
04f88     2E 65 02 FB | 	rdlong	local05, local01
04f8c     14 5C 86 F1 | 	sub	local01, #20
04f90     32 67 02 FB | 	rdlong	local06, local05
04f94     04 64 06 F1 | 	add	local05, #4
04f98     32 69 02 FB | 	rdlong	local07, local05
04f9c     2F 55 02 F6 | 	mov	arg02, local02
04fa0     30 57 02 F6 | 	mov	arg03, local03
04fa4     2E 53 02 F6 | 	mov	arg01, local01
04fa8     06 6B 02 F6 | 	mov	local08, objptr
04fac     33 0D 02 F6 | 	mov	objptr, local06
04fb0     2D 68 62 FD | 	call	local07
04fb4     35 0D 02 F6 | 	mov	objptr, local08
04fb8     16 6D 02 F6 | 	mov	local09, result1
04fbc     00 6C 5E F2 | 	cmps	local09, #0 wcz
04fc0     34 00 90 3D |  if_ae	jmp	#LR__0353
04fc4     08 5C 06 F1 | 	add	local01, #8
04fc8     2E 65 02 FB | 	rdlong	local05, local01
04fcc     20 64 46 F5 | 	or	local05, #32
04fd0     2E 65 62 FC | 	wrlong	local05, local01
04fd4     01 00 00 FF 
04fd8     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
04fdc     0E 6D 62 FC | 	wrlong	local09, ptr___system__dat__
04fe0     01 00 00 FF 
04fe4     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
04fe8     00 6C 0E F2 | 	cmp	local09, #0 wz
04fec     01 2C 66 56 |  if_ne	neg	result1, #1
04ff0     00 2C 06 A6 |  if_e	mov	result1, #0
04ff4     7C 00 90 FD | 	jmp	#LR__0358
04ff8                 | LR__0353
04ff8     36 2D 02 F6 | 	mov	result1, local09
04ffc     74 00 90 FD | 	jmp	#LR__0358
05000                 | LR__0354
05000     18 5C 06 F1 | 	add	local01, #24
05004     2E 6F 0A FB | 	rdlong	local10, local01 wz
05008     18 5C 86 F1 | 	sub	local01, #24
0500c     1C 00 90 5D |  if_ne	jmp	#LR__0355
05010     01 00 00 FF 
05014     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
05018     0E 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0501c     01 00 00 FF 
05020     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
05024     01 2C 66 F6 | 	neg	result1, #1
05028     48 00 90 FD | 	jmp	#LR__0358
0502c                 | LR__0355
0502c     00 6C 06 F6 | 	mov	local09, #0
05030                 | LR__0356
05030     00 60 1E F2 | 	cmp	local03, #0 wcz
05034     38 00 90 ED |  if_be	jmp	#LR__0357
05038     37 65 02 F6 | 	mov	local05, local10
0503c     32 67 02 FB | 	rdlong	local06, local05
05040     04 64 06 F1 | 	add	local05, #4
05044     32 69 02 FB | 	rdlong	local07, local05
05048     31 53 C2 FA | 	rdbyte	arg01, local04
0504c     2E 55 02 F6 | 	mov	arg02, local01
05050     06 71 02 F6 | 	mov	local11, objptr
05054     33 0D 02 F6 | 	mov	objptr, local06
05058     01 62 06 F1 | 	add	local04, #1
0505c     2D 68 62 FD | 	call	local07
05060     38 0D 02 F6 | 	mov	objptr, local11
05064     16 6D 02 F1 | 	add	local09, result1
05068     01 60 86 F1 | 	sub	local03, #1
0506c     C0 FF 9F FD | 	jmp	#LR__0356
05070                 | LR__0357
05070     36 2D 02 F6 | 	mov	result1, local09
05074                 | LR__0358
05074     AF F0 03 F6 | 	mov	ptra, fp
05078     BF 00 A0 FD | 	call	#popregs_
0507c                 | __system___vfswrite_ret
0507c     2D 00 64 FD | 	ret
05080                 | 
05080                 | __system___vfsread
05080     0F 5A 05 F6 | 	mov	COUNT_, #15
05084     B0 00 A0 FD | 	call	#pushregs_
05088     2C F0 07 F1 | 	add	ptra, #44
0508c     04 5E 05 F1 | 	add	fp, #4
05090     AF 52 62 FC | 	wrlong	arg01, fp
05094     04 5E 05 F1 | 	add	fp, #4
05098     AF 54 62 FC | 	wrlong	arg02, fp
0509c     04 5E 05 F1 | 	add	fp, #4
050a0     AF 56 62 FC | 	wrlong	arg03, fp
050a4     04 5E 85 F1 | 	sub	fp, #4
050a8     AF 5C 02 FB | 	rdlong	local01, fp
050ac     14 5E 05 F1 | 	add	fp, #20
050b0     AF 5C 62 FC | 	wrlong	local01, fp
050b4     04 5E 05 F1 | 	add	fp, #4
050b8     AF 00 68 FC | 	wrlong	#0, fp
050bc     1C 5E 85 F1 | 	sub	fp, #28
050c0     AF 5E 02 FB | 	rdlong	local02, fp
050c4     04 5E 85 F1 | 	sub	fp, #4
050c8     08 5E 06 F1 | 	add	local02, #8
050cc     2F 5D 02 FB | 	rdlong	local01, local02
050d0     01 5C CE F7 | 	test	local01, #1 wz
050d4     1C 00 90 5D |  if_ne	jmp	#LR__0359
050d8     01 00 00 FF 
050dc     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
050e0     0E 0D 68 FC | 	wrlong	#6, ptr___system__dat__
050e4     01 00 00 FF 
050e8     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
050ec     01 2C 66 F6 | 	neg	result1, #1
050f0     9C 02 90 FD | 	jmp	#LR__0367
050f4                 | LR__0359
050f4     04 5E 05 F1 | 	add	fp, #4
050f8     AF 5C 02 FB | 	rdlong	local01, fp
050fc     04 5E 85 F1 | 	sub	fp, #4
05100     10 5C 06 F1 | 	add	local01, #16
05104     2E 61 0A FB | 	rdlong	local03, local01 wz
05108     B4 00 90 AD |  if_e	jmp	#LR__0361
0510c     04 5E 05 F1 | 	add	fp, #4
05110     AF 62 02 FB | 	rdlong	local04, fp
05114     10 62 06 F1 | 	add	local04, #16
05118     31 5D 02 FB | 	rdlong	local01, local04
0511c     2E 5F 02 FB | 	rdlong	local02, local01
05120     04 5C 06 F1 | 	add	local01, #4
05124     2E 61 02 FB | 	rdlong	local03, local01
05128     AF 52 02 FB | 	rdlong	arg01, fp
0512c     04 5E 05 F1 | 	add	fp, #4
05130     AF 54 02 FB | 	rdlong	arg02, fp
05134     04 5E 05 F1 | 	add	fp, #4
05138     AF 56 02 FB | 	rdlong	arg03, fp
0513c     0C 5E 85 F1 | 	sub	fp, #12
05140     06 65 02 F6 | 	mov	local05, objptr
05144     2F 0D 02 F6 | 	mov	objptr, local02
05148     2D 60 62 FD | 	call	local03
0514c     32 0D 02 F6 | 	mov	objptr, local05
05150     10 5E 05 F1 | 	add	fp, #16
05154     AF 2C 62 FC | 	wrlong	result1, fp
05158     10 5E 85 F1 | 	sub	fp, #16
0515c     00 2C 5E F2 | 	cmps	result1, #0 wcz
05160     4C 00 90 3D |  if_ae	jmp	#LR__0360
05164     04 5E 05 F1 | 	add	fp, #4
05168     AF 5C 02 FB | 	rdlong	local01, fp
0516c     2E 63 02 F6 | 	mov	local04, local01
05170     08 62 06 F1 | 	add	local04, #8
05174     31 61 02 FB | 	rdlong	local03, local04
05178     20 60 46 F5 | 	or	local03, #32
0517c     08 5C 06 F1 | 	add	local01, #8
05180     2E 61 62 FC | 	wrlong	local03, local01
05184     0C 5E 05 F1 | 	add	fp, #12
05188     AF 52 0A FB | 	rdlong	arg01, fp wz
0518c     10 5E 85 F1 | 	sub	fp, #16
05190     01 00 00 FF 
05194     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
05198     0E 53 62 FC | 	wrlong	arg01, ptr___system__dat__
0519c     01 00 00 FF 
051a0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
051a4     01 2C 66 56 |  if_ne	neg	result1, #1
051a8     00 2C 06 A6 |  if_e	mov	result1, #0
051ac     E0 01 90 FD | 	jmp	#LR__0367
051b0                 | LR__0360
051b0     10 5E 05 F1 | 	add	fp, #16
051b4     AF 2C 02 FB | 	rdlong	result1, fp
051b8     10 5E 85 F1 | 	sub	fp, #16
051bc     D0 01 90 FD | 	jmp	#LR__0367
051c0                 | LR__0361
051c0     04 5E 05 F1 | 	add	fp, #4
051c4     AF 5C 02 FB | 	rdlong	local01, fp
051c8     1C 5C 06 F1 | 	add	local01, #28
051cc     2E 61 02 FB | 	rdlong	local03, local01
051d0     14 5E 05 F1 | 	add	fp, #20
051d4     AF 60 62 FC | 	wrlong	local03, fp
051d8     AF 5C 0A FB | 	rdlong	local01, fp wz
051dc     18 5E 85 F1 | 	sub	fp, #24
051e0     1C 00 90 5D |  if_ne	jmp	#LR__0362
051e4     01 00 00 FF 
051e8     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
051ec     0E 0D 68 FC | 	wrlong	#6, ptr___system__dat__
051f0     01 00 00 FF 
051f4     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
051f8     01 2C 66 F6 | 	neg	result1, #1
051fc     90 01 90 FD | 	jmp	#LR__0367
05200                 | LR__0362
05200     04 5E 05 F1 | 	add	fp, #4
05204     AF 5C 02 FB | 	rdlong	local01, fp
05208     04 5E 85 F1 | 	sub	fp, #4
0520c     24 5C 06 F1 | 	add	local01, #36
05210     2E 61 0A FB | 	rdlong	local03, local01 wz
05214     A0 00 90 AD |  if_e	jmp	#LR__0364
05218     24 5E 05 F1 | 	add	fp, #36
0521c     AF 66 02 F6 | 	mov	local06, fp
05220     20 5E 85 F1 | 	sub	fp, #32
05224     AF 68 02 FB | 	rdlong	local07, fp
05228     34 63 02 F6 | 	mov	local04, local07
0522c     24 62 06 F1 | 	add	local04, #36
05230     31 6B 02 FB | 	rdlong	local08, local04
05234     35 5D 02 F6 | 	mov	local01, local08
05238     2E 5F 02 FB | 	rdlong	local02, local01
0523c     04 5C 06 F1 | 	add	local01, #4
05240     2E 6D 02 FB | 	rdlong	local09, local01
05244     36 61 02 F6 | 	mov	local03, local09
05248     34 6F 02 F6 | 	mov	local10, local07
0524c     04 5E 85 F1 | 	sub	fp, #4
05250     37 71 02 F6 | 	mov	local11, local10
05254     00 73 06 F6 | 	mov	local12, #256
05258     33 75 02 F6 | 	mov	local13, local06
0525c     38 53 02 F6 | 	mov	arg01, local11
05260     00 55 06 F6 | 	mov	arg02, #256
05264     3A 57 02 F6 | 	mov	arg03, local13
05268     06 77 02 F6 | 	mov	local14, objptr
0526c     2F 0D 02 F6 | 	mov	objptr, local02
05270     2D 60 62 FD | 	call	local03
05274     3B 0D 02 F6 | 	mov	objptr, local14
05278     16 79 02 F6 | 	mov	local15, result1
0527c     10 5E 05 F1 | 	add	fp, #16
05280     AF 78 62 FC | 	wrlong	local15, fp
05284     AF 5E 0A FB | 	rdlong	local02, fp wz
05288     10 5E 85 F1 | 	sub	fp, #16
0528c     28 00 90 5D |  if_ne	jmp	#LR__0363
05290     24 5E 05 F1 | 	add	fp, #36
05294     AF 62 02 FB | 	rdlong	local04, fp
05298     24 5E 85 F1 | 	sub	fp, #36
0529c     31 61 02 F6 | 	mov	local03, local04
052a0     02 60 0E F5 | 	and	local03, #2 wz
052a4     10 00 90 AD |  if_e	jmp	#LR__0363
052a8     01 5C 06 F6 | 	mov	local01, #1
052ac     20 5E 05 F1 | 	add	fp, #32
052b0     AF 02 68 FC | 	wrlong	#1, fp
052b4     20 5E 85 F1 | 	sub	fp, #32
052b8                 | LR__0363
052b8                 | LR__0364
052b8     10 5E 05 F1 | 	add	fp, #16
052bc     AF 00 68 FC | 	wrlong	#0, fp
052c0     10 5E 85 F1 | 	sub	fp, #16
052c4                 | LR__0365
052c4     0C 5E 05 F1 | 	add	fp, #12
052c8     AF 5C 02 FB | 	rdlong	local01, fp
052cc     0C 5E 85 F1 | 	sub	fp, #12
052d0     00 5C 1E F2 | 	cmp	local01, #0 wcz
052d4     AC 00 90 ED |  if_be	jmp	#LR__0366
052d8     18 5E 05 F1 | 	add	fp, #24
052dc     AF 5C 02 FB | 	rdlong	local01, fp
052e0     2E 5F 02 FB | 	rdlong	local02, local01
052e4     04 5C 06 F1 | 	add	local01, #4
052e8     2E 61 02 FB | 	rdlong	local03, local01
052ec     14 5E 85 F1 | 	sub	fp, #20
052f0     AF 52 02 FB | 	rdlong	arg01, fp
052f4     04 5E 85 F1 | 	sub	fp, #4
052f8     06 71 02 F6 | 	mov	local11, objptr
052fc     2F 0D 02 F6 | 	mov	objptr, local02
05300     2D 60 62 FD | 	call	local03
05304     38 0D 02 F6 | 	mov	objptr, local11
05308     16 6F 02 F6 | 	mov	local10, result1
0530c     14 5E 05 F1 | 	add	fp, #20
05310     AF 6E 62 FC | 	wrlong	local10, fp
05314     14 5E 85 F1 | 	sub	fp, #20
05318     00 6E 5E F2 | 	cmps	local10, #0 wcz
0531c     64 00 90 CD |  if_b	jmp	#LR__0366
05320     1C 5E 05 F1 | 	add	fp, #28
05324     AF 5C 02 FB | 	rdlong	local01, fp
05328     2E 61 02 F6 | 	mov	local03, local01
0532c     01 60 06 F1 | 	add	local03, #1
05330     AF 60 62 FC | 	wrlong	local03, fp
05334     08 5E 85 F1 | 	sub	fp, #8
05338     AF 68 02 FB | 	rdlong	local07, fp
0533c     2E 69 42 FC | 	wrbyte	local07, local01
05340     04 5E 85 F1 | 	sub	fp, #4
05344     AF 5C 02 FB | 	rdlong	local01, fp
05348     01 5C 06 F1 | 	add	local01, #1
0534c     AF 5C 62 FC | 	wrlong	local01, fp
05350     04 5E 85 F1 | 	sub	fp, #4
05354     AF 5C 02 FB | 	rdlong	local01, fp
05358     01 5C 86 F1 | 	sub	local01, #1
0535c     AF 5C 62 FC | 	wrlong	local01, fp
05360     14 5E 05 F1 | 	add	fp, #20
05364     AF 5C 0A FB | 	rdlong	local01, fp wz
05368     20 5E 85 F1 | 	sub	fp, #32
0536c     54 FF 9F AD |  if_e	jmp	#LR__0365
05370     14 5E 05 F1 | 	add	fp, #20
05374     AF 60 02 FB | 	rdlong	local03, fp
05378     14 5E 85 F1 | 	sub	fp, #20
0537c     0A 60 0E F2 | 	cmp	local03, #10 wz
05380     40 FF 9F 5D |  if_ne	jmp	#LR__0365
05384                 | LR__0366
05384     10 5E 05 F1 | 	add	fp, #16
05388     AF 2C 02 FB | 	rdlong	result1, fp
0538c     10 5E 85 F1 | 	sub	fp, #16
05390                 | LR__0367
05390     AF F0 03 F6 | 	mov	ptra, fp
05394     BF 00 A0 FD | 	call	#popregs_
05398                 | __system___vfsread_ret
05398     2D 00 64 FD | 	ret
0539c                 | 
0539c                 | __system____default_filbuf
0539c     07 5A 05 F6 | 	mov	COUNT_, #7
053a0     B0 00 A0 FD | 	call	#pushregs_
053a4     29 5D 02 FB | 	rdlong	local01, arg01
053a8     0C 5C 06 F1 | 	add	local01, #12
053ac     2E 55 02 F6 | 	mov	arg02, local01
053b0     0C 5C 86 F1 | 	sub	local01, #12
053b4     10 52 06 F1 | 	add	arg01, #16
053b8     29 5F 02 FB | 	rdlong	local02, arg01
053bc     10 52 86 F1 | 	sub	arg01, #16
053c0     2F 61 02 FB | 	rdlong	local03, local02
053c4     04 5E 06 F1 | 	add	local02, #4
053c8     2F 63 02 FB | 	rdlong	local04, local02
053cc     0A 56 C6 F9 | 	decod	arg03, #10
053d0     06 65 02 F6 | 	mov	local05, objptr
053d4     30 0D 02 F6 | 	mov	objptr, local03
053d8     2D 62 62 FD | 	call	local04
053dc     32 0D 02 F6 | 	mov	objptr, local05
053e0     16 67 02 F6 | 	mov	local06, result1
053e4     00 66 5E F2 | 	cmps	local06, #0 wcz
053e8     01 2C 66 C6 |  if_b	neg	result1, #1
053ec     28 00 90 CD |  if_b	jmp	#LR__0368
053f0     2E 67 62 FC | 	wrlong	local06, local01
053f4     0C 5C 06 F1 | 	add	local01, #12
053f8     2E 69 02 F6 | 	mov	local07, local01
053fc     08 5C 86 F1 | 	sub	local01, #8
05400     2E 69 62 FC | 	wrlong	local07, local01
05404     04 5C 06 F1 | 	add	local01, #4
05408     2E 5F 02 FB | 	rdlong	local02, local01
0540c     01 5E 46 F5 | 	or	local02, #1
05410     2E 5F 62 FC | 	wrlong	local02, local01
05414     33 2D 02 F6 | 	mov	result1, local06
05418                 | LR__0368
05418     AF F0 03 F6 | 	mov	ptra, fp
0541c     BF 00 A0 FD | 	call	#popregs_
05420                 | __system____default_filbuf_ret
05420     2D 00 64 FD | 	ret
05424                 | 
05424                 | _ff_cc_disk_initialize
05424     0B 5A 05 F6 | 	mov	COUNT_, #11
05428     B0 00 A0 FD | 	call	#pushregs_
0542c     40 F0 07 F1 | 	add	ptra, #64
05430     04 5E 05 F1 | 	add	fp, #4
05434     AF 52 42 FC | 	wrbyte	arg01, fp
05438     70 1F 06 F1 | 	add	ptr__ff_cc_dat__, #368
0543c     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
05440     1C 5E 05 F1 | 	add	fp, #28
05444     AF 5C 62 FC | 	wrlong	local01, fp
05448     04 1E 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0544c     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
05450     04 5E 05 F1 | 	add	fp, #4
05454     AF 5C 62 FC | 	wrlong	local01, fp
05458     08 1E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0545c     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
05460     04 5E 05 F1 | 	add	fp, #4
05464     AF 5C 62 FC | 	wrlong	local01, fp
05468     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
0546c     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
05470     78 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
05474     04 5E 05 F1 | 	add	fp, #4
05478     AF 5C 62 FC | 	wrlong	local01, fp
0547c     28 5E 85 F1 | 	sub	fp, #40
05480     AF 5C CA FA | 	rdbyte	local01, fp wz
05484     04 5E 85 F1 | 	sub	fp, #4
05488                 | ' #line 420 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
05488                 | '             return RES_NOTRDY;
05488     03 2C 06 56 |  if_ne	mov	result1, #3
0548c     2C 03 90 5D |  if_ne	jmp	#LR__0382
05490     13 00 00 FF 
05494     10 53 06 F6 | 	mov	arg01, ##10000
05498     B0 D2 BF FD | 	call	#__system___waitus
0549c     20 5E 05 F1 | 	add	fp, #32
054a0     AF 52 02 FB | 	rdlong	arg01, fp
054a4     41 52 62 FD | 	dirh	arg01
054a8     59 52 62 FD | 	drvh	arg01
054ac     1F 20 64 FD | 	waitx	#16
054b0     04 5E 05 F1 | 	add	fp, #4
054b4     AF 52 02 FB | 	rdlong	arg01, fp
054b8     41 52 62 FD | 	dirh	arg01
054bc     58 52 62 FD | 	drvl	arg01
054c0     1F 20 64 FD | 	waitx	#16
054c4     04 5E 05 F1 | 	add	fp, #4
054c8     AF 52 02 FB | 	rdlong	arg01, fp
054cc     41 52 62 FD | 	dirh	arg01
054d0     04 5E 05 F1 | 	add	fp, #4
054d4     AF 52 02 FB | 	rdlong	arg01, fp
054d8     50 52 62 FD | 	fltl	arg01
054dc                 | '         }
054dc                 | ' 
054dc                 | ' 	dly_us(10000);
054dc                 | ' 	_dirh(PIN_SS) ;  (_pinh(PIN_SS), (_waitx(16)) ) ;
054dc                 | ' 	_dirh(PIN_CLK) ;  (_pinl(PIN_CLK), (_waitx(16)) ) ;
054dc                 | ' 	_dirh(PIN_DI) ;
054dc                 | ' 	_fltl(PIN_DO) ;
054dc                 | ' 
054dc                 | ' 	for (n = 100; n; n--) rcvr_mmc(buf, 1);
054dc     24 5E 85 F1 | 	sub	fp, #36
054e0     AF C8 48 FC | 	wrbyte	#100, fp
054e4     08 5E 85 F1 | 	sub	fp, #8
054e8                 | LR__0369
054e8     08 5E 05 F1 | 	add	fp, #8
054ec     AF 5E CA FA | 	rdbyte	local02, fp wz
054f0     08 5E 85 F1 | 	sub	fp, #8
054f4     38 00 90 AD |  if_e	jmp	#LR__0370
054f8     14 5E 05 F1 | 	add	fp, #20
054fc     AF 60 02 F6 | 	mov	local03, fp
05500     30 53 02 F6 | 	mov	arg01, local03
05504     01 54 06 F6 | 	mov	arg02, #1
05508     14 5E 85 F1 | 	sub	fp, #20
0550c     C0 65 B0 FD | 	call	#_ff_cc_rcvr_mmc_0625
05510     08 5E 05 F1 | 	add	fp, #8
05514     AF 62 C2 FA | 	rdbyte	local04, fp
05518     AF 64 C2 FA | 	rdbyte	local05, fp
0551c     32 67 02 F6 | 	mov	local06, local05
05520     01 66 86 F1 | 	sub	local06, #1
05524     AF 66 42 FC | 	wrbyte	local06, fp
05528     08 5E 85 F1 | 	sub	fp, #8
0552c     B8 FF 9F FD | 	jmp	#LR__0369
05530                 | LR__0370
05530     0C 5E 05 F1 | 	add	fp, #12
05534     AF 00 48 FC | 	wrbyte	#0, fp
05538     0C 5E 85 F1 | 	sub	fp, #12
0553c     00 52 06 F6 | 	mov	arg01, #0
05540     00 54 06 F6 | 	mov	arg02, #0
05544     54 6A B0 FD | 	call	#_ff_cc_send_cmd_0646
05548     16 5D 02 F6 | 	mov	local01, result1
0554c     07 5C 46 F7 | 	zerox	local01, #7
05550     01 5C 0E F2 | 	cmp	local01, #1 wz
05554     1C 02 90 5D |  if_ne	jmp	#LR__0381
05558     08 52 06 F6 | 	mov	arg01, #8
0555c     AA 55 06 F6 | 	mov	arg02, #426
05560     38 6A B0 FD | 	call	#_ff_cc_send_cmd_0646
05564     16 5D 02 F6 | 	mov	local01, result1
05568     07 5C 46 F7 | 	zerox	local01, #7
0556c     01 5C 0E F2 | 	cmp	local01, #1 wz
05570     00 01 90 5D |  if_ne	jmp	#LR__0373
05574     14 5E 05 F1 | 	add	fp, #20
05578     AF 68 02 F6 | 	mov	local07, fp
0557c     34 53 02 F6 | 	mov	arg01, local07
05580     04 54 06 F6 | 	mov	arg02, #4
05584     14 5E 85 F1 | 	sub	fp, #20
05588     44 65 B0 FD | 	call	#_ff_cc_rcvr_mmc_0625
0558c     16 5E 05 F1 | 	add	fp, #22
05590     AF 5C C2 FA | 	rdbyte	local01, fp
05594     16 5E 85 F1 | 	sub	fp, #22
05598     07 5C 46 F7 | 	zerox	local01, #7
0559c     01 5C 0E F2 | 	cmp	local01, #1 wz
055a0     D0 01 90 5D |  if_ne	jmp	#LR__0380
055a4     17 5E 05 F1 | 	add	fp, #23
055a8     AF 6A C2 FA | 	rdbyte	local08, fp
055ac     17 5E 85 F1 | 	sub	fp, #23
055b0     07 6A 46 F7 | 	zerox	local08, #7
055b4     AA 6A 0E F2 | 	cmp	local08, #170 wz
055b8     B8 01 90 5D |  if_ne	jmp	#LR__0380
055bc                 | ' 				for (tmr = 1000; tmr; tmr--) {
055bc     18 5E 05 F1 | 	add	fp, #24
055c0     01 00 80 FF 
055c4     AF D0 6B FC | 	wrlong	##1000, fp
055c8     18 5E 85 F1 | 	sub	fp, #24
055cc                 | LR__0371
055cc     18 5E 05 F1 | 	add	fp, #24
055d0     AF 6A 0A FB | 	rdlong	local08, fp wz
055d4     18 5E 85 F1 | 	sub	fp, #24
055d8     3C 00 90 AD |  if_e	jmp	#LR__0372
055dc     A9 52 06 F6 | 	mov	arg01, #169
055e0     1E 54 C6 F9 | 	decod	arg02, #30
055e4     B4 69 B0 FD | 	call	#_ff_cc_send_cmd_0646
055e8     16 6D 02 F6 | 	mov	local09, result1
055ec     07 6C 4E F7 | 	zerox	local09, #7 wz
055f0     24 00 90 AD |  if_e	jmp	#LR__0372
055f4     01 00 00 FF 
055f8     E8 53 06 F6 | 	mov	arg01, ##1000
055fc     4C D1 BF FD | 	call	#__system___waitus
05600     18 5E 05 F1 | 	add	fp, #24
05604     AF 66 02 FB | 	rdlong	local06, fp
05608     01 66 86 F1 | 	sub	local06, #1
0560c     AF 66 62 FC | 	wrlong	local06, fp
05610     18 5E 85 F1 | 	sub	fp, #24
05614     B4 FF 9F FD | 	jmp	#LR__0371
05618                 | LR__0372
05618     18 5E 05 F1 | 	add	fp, #24
0561c     AF 5E 02 FB | 	rdlong	local02, fp
05620     18 5E 85 F1 | 	sub	fp, #24
05624     2F 5D 0A F6 | 	mov	local01, local02 wz
05628     48 01 90 AD |  if_e	jmp	#LR__0380
0562c     3A 52 06 F6 | 	mov	arg01, #58
05630     00 54 06 F6 | 	mov	arg02, #0
05634     64 69 B0 FD | 	call	#_ff_cc_send_cmd_0646
05638     16 6B 02 F6 | 	mov	local08, result1
0563c     07 6A 4E F7 | 	zerox	local08, #7 wz
05640     30 01 90 5D |  if_ne	jmp	#LR__0380
05644     34 53 02 F6 | 	mov	arg01, local07
05648     04 54 06 F6 | 	mov	arg02, #4
0564c     80 64 B0 FD | 	call	#_ff_cc_rcvr_mmc_0625
05650     14 5E 05 F1 | 	add	fp, #20
05654     AF 6E C2 FA | 	rdbyte	local10, fp
05658     40 6E CE F7 | 	test	local10, #64 wz
0565c     0C 5C 06 56 |  if_ne	mov	local01, #12
05660     04 5C 06 A6 |  if_e	mov	local01, #4
05664     08 5E 85 F1 | 	sub	fp, #8
05668     AF 5C 42 FC | 	wrbyte	local01, fp
0566c     0C 5E 85 F1 | 	sub	fp, #12
05670     00 01 90 FD | 	jmp	#LR__0380
05674                 | LR__0373
05674     A9 52 06 F6 | 	mov	arg01, #169
05678     00 54 06 F6 | 	mov	arg02, #0
0567c     1C 69 B0 FD | 	call	#_ff_cc_send_cmd_0646
05680     16 5D 02 F6 | 	mov	local01, result1
05684     07 5C 46 F7 | 	zerox	local01, #7
05688     01 5C 1E F2 | 	cmp	local01, #1 wcz
0568c     18 00 90 1D |  if_a	jmp	#LR__0374
05690     0C 5E 05 F1 | 	add	fp, #12
05694     AF 04 48 FC | 	wrbyte	#2, fp
05698     04 5E 05 F1 | 	add	fp, #4
0569c     AF 52 49 FC | 	wrbyte	#169, fp
056a0     10 5E 85 F1 | 	sub	fp, #16
056a4     14 00 90 FD | 	jmp	#LR__0375
056a8                 | LR__0374
056a8     0C 5E 05 F1 | 	add	fp, #12
056ac     AF 02 48 FC | 	wrbyte	#1, fp
056b0     04 5E 05 F1 | 	add	fp, #4
056b4     AF 02 48 FC | 	wrbyte	#1, fp
056b8     10 5E 85 F1 | 	sub	fp, #16
056bc                 | LR__0375
056bc                 | ' 				ty =  0x01 ; cmd =  (1) ;
056bc                 | ' 			}
056bc                 | ' 			for (tmr = 1000; tmr; tmr--) {
056bc     18 5E 05 F1 | 	add	fp, #24
056c0     01 00 80 FF 
056c4     AF D0 6B FC | 	wrlong	##1000, fp
056c8     18 5E 85 F1 | 	sub	fp, #24
056cc                 | LR__0376
056cc     18 5E 05 F1 | 	add	fp, #24
056d0     AF 5E 0A FB | 	rdlong	local02, fp wz
056d4     18 5E 85 F1 | 	sub	fp, #24
056d8     54 00 90 AD |  if_e	jmp	#LR__0377
056dc     10 5E 05 F1 | 	add	fp, #16
056e0     AF 52 C2 FA | 	rdbyte	arg01, fp
056e4     10 5E 85 F1 | 	sub	fp, #16
056e8     00 64 06 F6 | 	mov	local05, #0
056ec     00 54 06 F6 | 	mov	arg02, #0
056f0     A8 68 B0 FD | 	call	#_ff_cc_send_cmd_0646
056f4     16 71 02 F6 | 	mov	local11, result1
056f8     38 6D 02 F6 | 	mov	local09, local11
056fc     07 6C 4E F7 | 	zerox	local09, #7 wz
05700     2C 00 90 AD |  if_e	jmp	#LR__0377
05704     01 00 00 FF 
05708     E8 53 06 F6 | 	mov	arg01, ##1000
0570c     3C D0 BF FD | 	call	#__system___waitus
05710     18 5E 05 F1 | 	add	fp, #24
05714     AF 62 02 FB | 	rdlong	local04, fp
05718     31 65 02 F6 | 	mov	local05, local04
0571c     32 67 02 F6 | 	mov	local06, local05
05720     01 66 86 F1 | 	sub	local06, #1
05724     AF 66 62 FC | 	wrlong	local06, fp
05728     18 5E 85 F1 | 	sub	fp, #24
0572c     9C FF 9F FD | 	jmp	#LR__0376
05730                 | LR__0377
05730     18 5E 05 F1 | 	add	fp, #24
05734     AF 5E 02 FB | 	rdlong	local02, fp
05738     18 5E 85 F1 | 	sub	fp, #24
0573c     2F 5D 0A F6 | 	mov	local01, local02 wz
05740     24 00 90 AD |  if_e	jmp	#LR__0378
05744     10 6C 06 F6 | 	mov	local09, #16
05748     09 62 C6 F9 | 	decod	local04, #9
0574c     10 52 06 F6 | 	mov	arg01, #16
05750     09 54 C6 F9 | 	decod	arg02, #9
05754     44 68 B0 FD | 	call	#_ff_cc_send_cmd_0646
05758     16 67 02 F6 | 	mov	local06, result1
0575c     33 6B 02 F6 | 	mov	local08, local06
05760     07 6A 4E F7 | 	zerox	local08, #7 wz
05764     0C 00 90 AD |  if_e	jmp	#LR__0379
05768                 | LR__0378
05768     0C 5E 05 F1 | 	add	fp, #12
0576c     AF 00 48 FC | 	wrbyte	#0, fp
05770     0C 5E 85 F1 | 	sub	fp, #12
05774                 | LR__0379
05774                 | LR__0380
05774                 | LR__0381
05774     0C 5E 05 F1 | 	add	fp, #12
05778     AF 5C C2 FA | 	rdbyte	local01, fp
0577c     7D 1F 06 F1 | 	add	ptr__ff_cc_dat__, #381
05780     0F 5D 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
05784     AF 5E CA FA | 	rdbyte	local02, fp wz
05788     00 5C 06 56 |  if_ne	mov	local01, #0
0578c     01 5C 06 A6 |  if_e	mov	local01, #1
05790     10 5E 05 F1 | 	add	fp, #16
05794     AF 5C 42 FC | 	wrbyte	local01, fp
05798     AF 5C C2 FA | 	rdbyte	local01, fp
0579c     1C 5E 85 F1 | 	sub	fp, #28
057a0     01 1E 86 F1 | 	sub	ptr__ff_cc_dat__, #1
057a4     0F 5D 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
057a8     7C 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #380
057ac     68 65 B0 FD | 	call	#_ff_cc_deselect_0634
057b0                 | ' 
057b0                 | '                             ty = 0;
057b0                 | '                         }
057b0                 | ' 		}
057b0                 | ' 	}
057b0                 | ' #line 467 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
057b0                 | ' 	CardType = ty;
057b0                 | ' 	s = ty ? 0 :  0x01 ;
057b0                 | ' 	Stat = s;
057b0                 | ' 
057b0                 | ' 	deselect();
057b0                 | ' 
057b0                 | ' 	return s;
057b0     1C 5E 05 F1 | 	add	fp, #28
057b4     AF 2C C2 FA | 	rdbyte	result1, fp
057b8     1C 5E 85 F1 | 	sub	fp, #28
057bc                 | LR__0382
057bc     AF F0 03 F6 | 	mov	ptra, fp
057c0     BF 00 A0 FD | 	call	#popregs_
057c4                 | _ff_cc_disk_initialize_ret
057c4     2D 00 64 FD | 	ret
057c8                 | 
057c8                 | _ff_cc_disk_read
057c8     06 5A 05 F6 | 	mov	COUNT_, #6
057cc     B0 00 A0 FD | 	call	#pushregs_
057d0     2A 5D 02 F6 | 	mov	local01, arg02
057d4     2C 5F 02 F6 | 	mov	local02, arg04
057d8     2B 61 02 F6 | 	mov	local03, arg03
057dc     00 52 0E F2 | 	cmp	arg01, #0 wz
057e0     01 2C 06 56 |  if_ne	mov	result1, #1
057e4                 | ' 
057e4                 | ' 	return Stat;
057e4     7C 1F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
057e8     0F 2D C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
057ec     7C 1F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
057f0     16 63 02 F6 | 	mov	local04, result1
057f4     07 62 46 F7 | 	zerox	local04, #7
057f8     01 62 CE F7 | 	test	local04, #1 wz
057fc     03 2C 06 56 |  if_ne	mov	result1, #3
05800     94 00 90 5D |  if_ne	jmp	#LR__0386
05804     7D 1F 06 F1 | 	add	ptr__ff_cc_dat__, #381
05808     0F 63 C2 FA | 	rdbyte	local04, ptr__ff_cc_dat__
0580c     7D 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #381
05810     07 62 46 F7 | 	zerox	local04, #7
05814     08 62 0E F5 | 	and	local04, #8 wz
05818     09 60 66 A0 |  if_e	shl	local03, #9
0581c     00 64 06 F6 | 	mov	local05, #0
05820     01 5E 1E F2 | 	cmp	local02, #1 wcz
05824     01 64 06 16 |  if_a	mov	local05, #1
05828     00 64 0E F2 | 	cmp	local05, #0 wz
0582c     12 62 06 56 |  if_ne	mov	local04, #18
05830     11 62 06 A6 |  if_e	mov	local04, #17
05834     31 67 02 F6 | 	mov	local06, local04
05838     33 53 02 F6 | 	mov	arg01, local06
0583c     30 55 02 F6 | 	mov	arg02, local03
05840     58 67 B0 FD | 	call	#_ff_cc_send_cmd_0646
05844     16 63 02 F6 | 	mov	local04, result1
05848     07 62 4E F7 | 	zerox	local04, #7 wz
0584c     34 00 90 5D |  if_ne	jmp	#LR__0385
05850                 | ' 		do {
05850                 | LR__0383
05850     2E 53 02 F6 | 	mov	arg01, local01
05854     09 54 C6 F9 | 	decod	arg02, #9
05858     98 65 B0 FD | 	call	#_ff_cc_rcvr_datablock_0640
0585c     00 2C 0E F2 | 	cmp	result1, #0 wz
05860     01 00 00 5F 
05864     00 5C 06 51 |  if_ne	add	local01, ##512
05868     F9 5F 6E 5B |  if_ne	djnz	local02, #LR__0383
0586c     07 66 46 F7 | 	zerox	local06, #7
05870     12 66 0E F2 | 	cmp	local06, #18 wz
05874     0C 00 90 5D |  if_ne	jmp	#LR__0384
05878     0C 52 06 F6 | 	mov	arg01, #12
0587c     00 54 06 F6 | 	mov	arg02, #0
05880     18 67 B0 FD | 	call	#_ff_cc_send_cmd_0646
05884                 | LR__0384
05884                 | LR__0385
05884     90 64 B0 FD | 	call	#_ff_cc_deselect_0634
05888                 | ' 	}
05888                 | ' 	deselect();
05888                 | ' 
05888                 | ' 	return count ? RES_ERROR : RES_OK;
05888     00 5E 0E F2 | 	cmp	local02, #0 wz
0588c     01 62 06 56 |  if_ne	mov	local04, #1
05890     00 62 06 A6 |  if_e	mov	local04, #0
05894     31 2D 02 F6 | 	mov	result1, local04
05898                 | LR__0386
05898     AF F0 03 F6 | 	mov	ptra, fp
0589c     BF 00 A0 FD | 	call	#popregs_
058a0                 | _ff_cc_disk_read_ret
058a0     2D 00 64 FD | 	ret
058a4                 | 
058a4                 | _ff_cc_disk_write
058a4     07 5A 05 F6 | 	mov	COUNT_, #7
058a8     B0 00 A0 FD | 	call	#pushregs_
058ac     29 5D 0A F6 | 	mov	local01, arg01 wz
058b0     2A 5F 02 F6 | 	mov	local02, arg02
058b4     2B 61 02 F6 | 	mov	local03, arg03
058b8     2C 63 02 F6 | 	mov	local04, arg04
058bc     30 65 02 F6 | 	mov	local05, local03
058c0     01 2C 06 56 |  if_ne	mov	result1, #1
058c4                 | ' 
058c4                 | ' 	return Stat;
058c4     7C 1F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
058c8     0F 2D C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
058cc     7C 1F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
058d0     16 67 02 F6 | 	mov	local06, result1
058d4     07 66 46 F7 | 	zerox	local06, #7
058d8     01 66 CE F7 | 	test	local06, #1 wz
058dc     03 2C 06 56 |  if_ne	mov	result1, #3
058e0     D0 00 90 5D |  if_ne	jmp	#LR__0392
058e4     7D 1F 06 F1 | 	add	ptr__ff_cc_dat__, #381
058e8     0F 67 C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
058ec     7D 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #381
058f0     07 66 46 F7 | 	zerox	local06, #7
058f4     08 66 CE F7 | 	test	local06, #8 wz
058f8     09 64 66 A0 |  if_e	shl	local05, #9
058fc     01 62 0E F2 | 	cmp	local04, #1 wz
05900     30 00 90 5D |  if_ne	jmp	#LR__0387
05904     32 55 02 F6 | 	mov	arg02, local05
05908     18 52 06 F6 | 	mov	arg01, #24
0590c     8C 66 B0 FD | 	call	#_ff_cc_send_cmd_0646
05910     16 67 02 F6 | 	mov	local06, result1
05914     07 66 4E F7 | 	zerox	local06, #7 wz
05918     84 00 90 5D |  if_ne	jmp	#LR__0391
0591c     2F 53 02 F6 | 	mov	arg01, local02
05920     FE 54 06 F6 | 	mov	arg02, #254
05924     AC 65 B0 FD | 	call	#_ff_cc_xmit_datablock_0642
05928     16 69 0A F6 | 	mov	local07, result1 wz
0592c     00 62 06 56 |  if_ne	mov	local04, #0
05930     6C 00 90 FD | 	jmp	#LR__0391
05934                 | LR__0387
05934     7D 1F 06 F1 | 	add	ptr__ff_cc_dat__, #381
05938     0F 67 C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
0593c     7D 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #381
05940     07 66 46 F7 | 	zerox	local06, #7
05944     06 66 CE F7 | 	test	local06, #6 wz
05948     0C 00 90 AD |  if_e	jmp	#LR__0388
0594c     97 52 06 F6 | 	mov	arg01, #151
05950     31 55 02 F6 | 	mov	arg02, local04
05954     44 66 B0 FD | 	call	#_ff_cc_send_cmd_0646
05958                 | LR__0388
05958     32 55 02 F6 | 	mov	arg02, local05
0595c     19 52 06 F6 | 	mov	arg01, #25
05960     38 66 B0 FD | 	call	#_ff_cc_send_cmd_0646
05964     16 67 02 F6 | 	mov	local06, result1
05968     07 66 4E F7 | 	zerox	local06, #7 wz
0596c     30 00 90 5D |  if_ne	jmp	#LR__0390
05970                 | ' 			do {
05970                 | LR__0389
05970     2F 53 02 F6 | 	mov	arg01, local02
05974     FC 54 06 F6 | 	mov	arg02, #252
05978     58 65 B0 FD | 	call	#_ff_cc_xmit_datablock_0642
0597c     00 2C 0E F2 | 	cmp	result1, #0 wz
05980     01 00 00 5F 
05984     00 5E 06 51 |  if_ne	add	local02, ##512
05988     F9 63 6E 5B |  if_ne	djnz	local04, #LR__0389
0598c     00 52 06 F6 | 	mov	arg01, #0
05990     FD 54 06 F6 | 	mov	arg02, #253
05994     3C 65 B0 FD | 	call	#_ff_cc_xmit_datablock_0642
05998     00 2C 0E F2 | 	cmp	result1, #0 wz
0599c     01 62 06 A6 |  if_e	mov	local04, #1
059a0                 | LR__0390
059a0                 | LR__0391
059a0     74 63 B0 FD | 	call	#_ff_cc_deselect_0634
059a4                 | ' 				count = 1;
059a4                 | ' 		}
059a4                 | ' 	}
059a4                 | ' 	deselect();
059a4                 | ' 
059a4                 | ' 	return count ? RES_ERROR : RES_OK;
059a4     00 62 0E F2 | 	cmp	local04, #0 wz
059a8     01 66 06 56 |  if_ne	mov	local06, #1
059ac     00 66 06 A6 |  if_e	mov	local06, #0
059b0     33 2D 02 F6 | 	mov	result1, local06
059b4                 | LR__0392
059b4     AF F0 03 F6 | 	mov	ptra, fp
059b8     BF 00 A0 FD | 	call	#popregs_
059bc                 | _ff_cc_disk_write_ret
059bc     2D 00 64 FD | 	ret
059c0                 | 
059c0                 | _ff_cc_disk_ioctl
059c0     07 5A 05 F6 | 	mov	COUNT_, #7
059c4     B0 00 A0 FD | 	call	#pushregs_
059c8     30 F0 07 F1 | 	add	ptra, #48
059cc     04 5E 05 F1 | 	add	fp, #4
059d0     AF 52 42 FC | 	wrbyte	arg01, fp
059d4     04 5E 05 F1 | 	add	fp, #4
059d8     AF 54 42 FC | 	wrbyte	arg02, fp
059dc     04 5E 05 F1 | 	add	fp, #4
059e0     AF 56 62 FC | 	wrlong	arg03, fp
059e4     08 5E 85 F1 | 	sub	fp, #8
059e8     AF 5C C2 FA | 	rdbyte	local01, fp
059ec     04 5E 85 F1 | 	sub	fp, #4
059f0     2E 5F 02 F6 | 	mov	local02, local01
059f4     2F 53 0A F6 | 	mov	arg01, local02 wz
059f8     01 2C 06 56 |  if_ne	mov	result1, #1
059fc                 | ' 
059fc                 | ' 	return Stat;
059fc     7C 1F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
05a00     0F 2D C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
05a04     7C 1F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
05a08     16 61 02 F6 | 	mov	local03, result1
05a0c     30 63 02 F6 | 	mov	local04, local03
05a10     07 62 46 F7 | 	zerox	local04, #7
05a14     01 62 CE F7 | 	test	local04, #1 wz
05a18     03 2C 06 56 |  if_ne	mov	result1, #3
05a1c     F8 01 90 5D |  if_ne	jmp	#LR__0401
05a20     10 5E 05 F1 | 	add	fp, #16
05a24     AF 02 68 FC | 	wrlong	#1, fp
05a28                 | ' 
05a28                 | ' 	res = RES_ERROR;
05a28                 | ' 	switch (ctrl) {
05a28     08 5E 85 F1 | 	sub	fp, #8
05a2c     AF 62 C2 FA | 	rdbyte	local04, fp
05a30     08 5E 85 F1 | 	sub	fp, #8
05a34     31 65 02 F6 | 	mov	local05, local04
05a38     07 64 46 F7 | 	zerox	local05, #7
05a3c     04 64 26 F3 | 	fle	local05, #4
05a40     30 64 62 FD | 	jmprel	local05
05a44                 | LR__0393
05a44     10 00 90 FD | 	jmp	#LR__0394
05a48     24 00 90 FD | 	jmp	#LR__0395
05a4c     A8 01 90 FD | 	jmp	#LR__0399
05a50     88 01 90 FD | 	jmp	#LR__0398
05a54     A0 01 90 FD | 	jmp	#LR__0399
05a58                 | LR__0394
05a58     38 63 B0 FD | 	call	#_ff_cc_select_0637
05a5c     00 2C 0E F2 | 	cmp	result1, #0 wz
05a60     10 5E 05 51 |  if_ne	add	fp, #16
05a64     AF 00 68 5C |  if_ne	wrlong	#0, fp
05a68     10 5E 85 51 |  if_ne	sub	fp, #16
05a6c                 | ' 			break;
05a6c     98 01 90 FD | 	jmp	#LR__0400
05a70                 | LR__0395
05a70     09 52 06 F6 | 	mov	arg01, #9
05a74     00 54 06 F6 | 	mov	arg02, #0
05a78     20 65 B0 FD | 	call	#_ff_cc_send_cmd_0646
05a7c     16 5F 02 F6 | 	mov	local02, result1
05a80     07 5E 4E F7 | 	zerox	local02, #7 wz
05a84     80 01 90 5D |  if_ne	jmp	#LR__0400
05a88     18 5E 05 F1 | 	add	fp, #24
05a8c     AF 52 02 F6 | 	mov	arg01, fp
05a90     18 5E 85 F1 | 	sub	fp, #24
05a94     10 54 06 F6 | 	mov	arg02, #16
05a98     58 63 B0 FD | 	call	#_ff_cc_rcvr_datablock_0640
05a9c     16 67 0A F6 | 	mov	local06, result1 wz
05aa0     64 01 90 AD |  if_e	jmp	#LR__0400
05aa4     18 5E 05 F1 | 	add	fp, #24
05aa8     AF 5E C2 FA | 	rdbyte	local02, fp
05aac     18 5E 85 F1 | 	sub	fp, #24
05ab0     07 5E 46 F7 | 	zerox	local02, #7
05ab4     06 5E 46 F0 | 	shr	local02, #6
05ab8     01 5E 0E F2 | 	cmp	local02, #1 wz
05abc     5C 00 90 5D |  if_ne	jmp	#LR__0396
05ac0     21 5E 05 F1 | 	add	fp, #33
05ac4     AF 5E C2 FA | 	rdbyte	local02, fp
05ac8     01 5E 85 F1 | 	sub	fp, #1
05acc     AF 60 C2 FA | 	rdbyte	local03, fp
05ad0     0F 60 46 F7 | 	zerox	local03, #15
05ad4     08 60 66 F0 | 	shl	local03, #8
05ad8     30 5F 02 F1 | 	add	local02, local03
05adc     01 5E 85 F1 | 	sub	fp, #1
05ae0     AF 68 C2 FA | 	rdbyte	local07, fp
05ae4     3F 68 06 F5 | 	and	local07, #63
05ae8     10 68 66 F0 | 	shl	local07, #16
05aec     34 5F 02 F1 | 	add	local02, local07
05af0     01 5E 06 F1 | 	add	local02, #1
05af4     09 5E 05 F1 | 	add	fp, #9
05af8     AF 5E 62 FC | 	wrlong	local02, fp
05afc     1C 5E 85 F1 | 	sub	fp, #28
05b00     AF 5C 02 FB | 	rdlong	local01, fp
05b04     1C 5E 05 F1 | 	add	fp, #28
05b08     AF 60 02 FB | 	rdlong	local03, fp
05b0c     28 5E 85 F1 | 	sub	fp, #40
05b10     0A 60 66 F0 | 	shl	local03, #10
05b14     2E 61 62 FC | 	wrlong	local03, local01
05b18     B0 00 90 FD | 	jmp	#LR__0397
05b1c                 | LR__0396
05b1c     1D 5E 05 F1 | 	add	fp, #29
05b20     AF 5E C2 FA | 	rdbyte	local02, fp
05b24     0F 5E 06 F5 | 	and	local02, #15
05b28     05 5E 05 F1 | 	add	fp, #5
05b2c     AF 60 C2 FA | 	rdbyte	local03, fp
05b30     80 60 06 F5 | 	and	local03, #128
05b34     07 60 C6 F0 | 	sar	local03, #7
05b38     30 5F 02 F1 | 	add	local02, local03
05b3c     01 5E 85 F1 | 	sub	fp, #1
05b40     AF 68 C2 FA | 	rdbyte	local07, fp
05b44     03 68 06 F5 | 	and	local07, #3
05b48     01 68 66 F0 | 	shl	local07, #1
05b4c     34 5F 02 F1 | 	add	local02, local07
05b50     02 5E 06 F1 | 	add	local02, #2
05b54     0D 5E 85 F1 | 	sub	fp, #13
05b58     AF 5E 42 FC | 	wrbyte	local02, fp
05b5c     0C 5E 05 F1 | 	add	fp, #12
05b60     AF 5E C2 FA | 	rdbyte	local02, fp
05b64     06 5E 46 F0 | 	shr	local02, #6
05b68     01 5E 85 F1 | 	sub	fp, #1
05b6c     AF 60 C2 FA | 	rdbyte	local03, fp
05b70     0F 60 46 F7 | 	zerox	local03, #15
05b74     02 60 66 F0 | 	shl	local03, #2
05b78     30 5F 02 F1 | 	add	local02, local03
05b7c     01 5E 85 F1 | 	sub	fp, #1
05b80     AF 68 C2 FA | 	rdbyte	local07, fp
05b84     03 68 06 F5 | 	and	local07, #3
05b88     0F 68 46 F7 | 	zerox	local07, #15
05b8c     0A 68 66 F0 | 	shl	local07, #10
05b90     34 5F 02 F1 | 	add	local02, local07
05b94     01 5E 06 F1 | 	add	local02, #1
05b98     0A 5E 05 F1 | 	add	fp, #10
05b9c     AF 5E 62 FC | 	wrlong	local02, fp
05ba0     1C 5E 85 F1 | 	sub	fp, #28
05ba4     AF 5C 02 FB | 	rdlong	local01, fp
05ba8     1C 5E 05 F1 | 	add	fp, #28
05bac     AF 60 02 FB | 	rdlong	local03, fp
05bb0     14 5E 85 F1 | 	sub	fp, #20
05bb4     AF 68 C2 FA | 	rdbyte	local07, fp
05bb8     14 5E 85 F1 | 	sub	fp, #20
05bbc     07 68 46 F7 | 	zerox	local07, #7
05bc0     09 68 86 F1 | 	sub	local07, #9
05bc4     34 61 62 F0 | 	shl	local03, local07
05bc8     2E 61 62 FC | 	wrlong	local03, local01
05bcc                 | LR__0397
05bcc     10 5E 05 F1 | 	add	fp, #16
05bd0     AF 00 68 FC | 	wrlong	#0, fp
05bd4     10 5E 85 F1 | 	sub	fp, #16
05bd8                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
05bd8                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
05bd8                 | ' 					*(LBA_t*)buff = cs << (n - 9);
05bd8                 | ' 				}
05bd8                 | ' 				res = RES_OK;
05bd8                 | ' 			}
05bd8                 | ' 			break;
05bd8     2C 00 90 FD | 	jmp	#LR__0400
05bdc                 | LR__0398
05bdc     0C 5E 05 F1 | 	add	fp, #12
05be0     AF 5E 02 FB | 	rdlong	local02, fp
05be4     2F 01 69 FC | 	wrlong	#128, local02
05be8     04 5E 05 F1 | 	add	fp, #4
05bec     AF 00 68 FC | 	wrlong	#0, fp
05bf0     10 5E 85 F1 | 	sub	fp, #16
05bf4                 | ' 			*(DWORD*)buff = 128;
05bf4                 | ' 			res = RES_OK;
05bf4                 | ' 			break;
05bf4     10 00 90 FD | 	jmp	#LR__0400
05bf8                 | LR__0399
05bf8     04 5E 06 F6 | 	mov	local02, #4
05bfc     10 5E 05 F1 | 	add	fp, #16
05c00     AF 08 68 FC | 	wrlong	#4, fp
05c04     10 5E 85 F1 | 	sub	fp, #16
05c08                 | LR__0400
05c08     0C 61 B0 FD | 	call	#_ff_cc_deselect_0634
05c0c                 | ' 			res = RES_PARERR;
05c0c                 | ' 	}
05c0c                 | ' 
05c0c                 | ' 	deselect();
05c0c                 | ' 
05c0c                 | ' 	return res;
05c0c     10 5E 05 F1 | 	add	fp, #16
05c10     AF 2C 02 FB | 	rdlong	result1, fp
05c14     10 5E 85 F1 | 	sub	fp, #16
05c18                 | LR__0401
05c18     AF F0 03 F6 | 	mov	ptra, fp
05c1c     BF 00 A0 FD | 	call	#popregs_
05c20                 | _ff_cc_disk_ioctl_ret
05c20     2D 00 64 FD | 	ret
05c24                 | 
05c24                 | _ff_cc_disk_setpins
05c24     00 52 0E F2 | 	cmp	arg01, #0 wz
05c28     01 2C 66 56 |  if_ne	neg	result1, #1
05c2c     28 00 90 5D |  if_ne	jmp	#_ff_cc_disk_setpins_ret
05c30     6C 1F 06 F1 | 	add	ptr__ff_cc_dat__, #364
05c34     0F 55 62 FC | 	wrlong	arg02, ptr__ff_cc_dat__
05c38     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
05c3c     0F 57 62 FC | 	wrlong	arg03, ptr__ff_cc_dat__
05c40     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
05c44     0F 59 62 FC | 	wrlong	arg04, ptr__ff_cc_dat__
05c48     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
05c4c     0F 5B 62 FC | 	wrlong	arg05, ptr__ff_cc_dat__
05c50     78 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
05c54     00 2C 06 F6 | 	mov	result1, #0
05c58                 | _ff_cc_disk_setpins_ret
05c58     2D 00 64 FD | 	ret
05c5c                 | 
05c5c                 | _ff_cc_ld_word_0210
05c5c     01 52 06 F1 | 	add	arg01, #1
05c60     29 2D C2 FA | 	rdbyte	result1, arg01
05c64     01 52 86 F1 | 	sub	arg01, #1
05c68     07 2C 46 F7 | 	zerox	result1, #7
05c6c     0F 2C 46 F7 | 	zerox	result1, #15
05c70     08 2C 66 F0 | 	shl	result1, #8
05c74     29 33 C2 FA | 	rdbyte	_var01, arg01
05c78     19 2D 42 F5 | 	or	result1, _var01
05c7c                 | ' {
05c7c                 | ' 	WORD rv;
05c7c                 | ' 
05c7c                 | ' 	rv = ptr[1];
05c7c                 | ' 	rv = rv << 8 | ptr[0];
05c7c                 | ' 	return rv;
05c7c                 | _ff_cc_ld_word_0210_ret
05c7c     2D 00 64 FD | 	ret
05c80                 | 
05c80                 | _ff_cc_ld_dword_0212
05c80     03 52 06 F1 | 	add	arg01, #3
05c84     29 2D C2 FA | 	rdbyte	result1, arg01
05c88     08 2C 66 F0 | 	shl	result1, #8
05c8c     01 52 86 F1 | 	sub	arg01, #1
05c90     29 33 C2 FA | 	rdbyte	_var01, arg01
05c94     19 2D 42 F5 | 	or	result1, _var01
05c98     08 2C 66 F0 | 	shl	result1, #8
05c9c     01 52 86 F1 | 	sub	arg01, #1
05ca0     29 35 C2 FA | 	rdbyte	_var02, arg01
05ca4     01 52 86 F1 | 	sub	arg01, #1
05ca8     07 34 46 F7 | 	zerox	_var02, #7
05cac     1A 2D 42 F5 | 	or	result1, _var02
05cb0     08 2C 66 F0 | 	shl	result1, #8
05cb4     29 37 C2 FA | 	rdbyte	_var03, arg01
05cb8     1B 2D 42 F5 | 	or	result1, _var03
05cbc                 | ' {
05cbc                 | ' 	DWORD rv;
05cbc                 | ' 
05cbc                 | ' 	rv = ptr[3];
05cbc                 | ' 	rv = rv << 8 | ptr[2];
05cbc                 | ' 	rv = rv << 8 | ptr[1];
05cbc                 | ' 	rv = rv << 8 | ptr[0];
05cbc                 | ' 	return rv;
05cbc                 | _ff_cc_ld_dword_0212_ret
05cbc     2D 00 64 FD | 	ret
05cc0                 | 
05cc0                 | _ff_cc_st_word_0213
05cc0     2A 33 02 F6 | 	mov	_var01, arg02
05cc4     0F 32 46 F7 | 	zerox	_var01, #15
05cc8     29 33 42 FC | 	wrbyte	_var01, arg01
05ccc     0F 54 46 F7 | 	zerox	arg02, #15
05cd0     08 54 46 F0 | 	shr	arg02, #8
05cd4     01 52 06 F1 | 	add	arg01, #1
05cd8     0F 54 46 F7 | 	zerox	arg02, #15
05cdc     29 55 42 FC | 	wrbyte	arg02, arg01
05ce0                 | _ff_cc_st_word_0213_ret
05ce0     2D 00 64 FD | 	ret
05ce4                 | 
05ce4                 | _ff_cc_st_dword_0214
05ce4     29 55 42 FC | 	wrbyte	arg02, arg01
05ce8     08 54 46 F0 | 	shr	arg02, #8
05cec     01 52 06 F1 | 	add	arg01, #1
05cf0     29 55 42 FC | 	wrbyte	arg02, arg01
05cf4     08 54 46 F0 | 	shr	arg02, #8
05cf8     01 52 06 F1 | 	add	arg01, #1
05cfc     29 55 42 FC | 	wrbyte	arg02, arg01
05d00     08 54 46 F0 | 	shr	arg02, #8
05d04     01 52 06 F1 | 	add	arg01, #1
05d08     29 55 42 FC | 	wrbyte	arg02, arg01
05d0c                 | _ff_cc_st_dword_0214_ret
05d0c     2D 00 64 FD | 	ret
05d10                 | 
05d10                 | _ff_cc_mem_cpy_0217
05d10     00 56 0E F2 | 	cmp	arg03, #0 wz
05d14     24 00 90 AD |  if_e	jmp	#LR__0406
05d18                 | ' 		do {
05d18     00 A3 9F FE | 	loc	pa,	#(@LR__0404-@LR__0402)
05d1c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d20                 | LR__0402
05d20     2B 0D D8 FC | 	rep	@LR__0405, arg03
05d24                 | LR__0403
05d24     2A 33 02 F6 | 	mov	_var01, arg02
05d28     01 32 06 F1 | 	add	_var01, #1
05d2c     2A 35 C2 FA | 	rdbyte	_var02, arg02
05d30     19 55 02 F6 | 	mov	arg02, _var01
05d34     29 35 42 FC | 	wrbyte	_var02, arg01
05d38     01 52 06 F1 | 	add	arg01, #1
05d3c                 | LR__0404
05d3c                 | LR__0405
05d3c                 | LR__0406
05d3c                 | _ff_cc_mem_cpy_0217_ret
05d3c     2D 00 64 FD | 	ret
05d40                 | 
05d40                 | _ff_cc_mem_cmp_0223
05d40     E4 A2 9F FE | 	loc	pa,	#(@LR__0408-@LR__0407)
05d44     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d48                 | ' 
05d48                 | ' 	do {
05d48                 | LR__0407
05d48     29 33 C2 FA | 	rdbyte	_var01, arg01
05d4c     2A 35 C2 FA | 	rdbyte	_var02, arg02
05d50     1A 33 82 F1 | 	sub	_var01, _var02
05d54     01 56 86 F1 | 	sub	arg03, #1
05d58     2B 57 0A F6 | 	mov	arg03, arg03 wz
05d5c     01 52 06 F1 | 	add	arg01, #1
05d60     01 54 06 F1 | 	add	arg02, #1
05d64     08 00 90 AD |  if_e	jmp	#LR__0409
05d68     00 32 0E F2 | 	cmp	_var01, #0 wz
05d6c     D8 FF 9F AD |  if_e	jmp	#LR__0407
05d70                 | LR__0408
05d70                 | LR__0409
05d70                 | ' 
05d70                 | ' 	return r;
05d70     19 2D 02 F6 | 	mov	result1, _var01
05d74                 | _ff_cc_mem_cmp_0223_ret
05d74     2D 00 64 FD | 	ret
05d78                 | 
05d78                 | _ff_cc_chk_chr_0224
05d78     9C A2 9F FE | 	loc	pa,	#(@LR__0411-@LR__0410)
05d7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d80                 | ' {
05d80                 | ' 	while (*str && *str != chr) str++;
05d80                 | LR__0410
05d80     29 33 CA FA | 	rdbyte	_var01, arg01 wz
05d84     10 00 90 AD |  if_e	jmp	#LR__0412
05d88     29 35 C2 FA | 	rdbyte	_var02, arg01
05d8c     2A 35 0A F2 | 	cmp	_var02, arg02 wz
05d90     01 52 06 51 |  if_ne	add	arg01, #1
05d94     E8 FF 9F 5D |  if_ne	jmp	#LR__0410
05d98                 | LR__0411
05d98                 | LR__0412
05d98     29 2D C2 FA | 	rdbyte	result1, arg01
05d9c                 | ' 	return *str;
05d9c                 | _ff_cc_chk_chr_0224_ret
05d9c     2D 00 64 FD | 	ret
05da0                 | 
05da0                 | _ff_cc_sync_window_0228
05da0     06 5A 05 F6 | 	mov	COUNT_, #6
05da4     B0 00 A0 FD | 	call	#pushregs_
05da8     29 5D 02 F6 | 	mov	local01, arg01
05dac     00 5E 06 F6 | 	mov	local02, #0
05db0     03 5C 06 F1 | 	add	local01, #3
05db4     2E 61 CA FA | 	rdbyte	local03, local01 wz
05db8     03 5C 86 F1 | 	sub	local01, #3
05dbc     A8 00 90 AD |  if_e	jmp	#LR__0415
05dc0     01 5C 06 F1 | 	add	local01, #1
05dc4     2E 53 C2 FA | 	rdbyte	arg01, local01
05dc8     2F 5C 06 F1 | 	add	local01, #47
05dcc     2E 55 02 F6 | 	mov	arg02, local01
05dd0     04 5C 86 F1 | 	sub	local01, #4
05dd4     2E 57 02 FB | 	rdlong	arg03, local01
05dd8     2C 5C 86 F1 | 	sub	local01, #44
05ddc     01 58 06 F6 | 	mov	arg04, #1
05de0     C0 FA BF FD | 	call	#_ff_cc_disk_write
05de4     00 2C 0E F2 | 	cmp	result1, #0 wz
05de8     78 00 90 5D |  if_ne	jmp	#LR__0413
05dec     03 5C 06 F1 | 	add	local01, #3
05df0     2E 01 48 FC | 	wrbyte	#0, local01
05df4     29 5C 06 F1 | 	add	local01, #41
05df8     2E 61 02 FB | 	rdlong	local03, local01
05dfc     0C 5C 86 F1 | 	sub	local01, #12
05e00     2E 63 02 FB | 	rdlong	local04, local01
05e04     31 61 82 F1 | 	sub	local03, local04
05e08     08 5C 86 F1 | 	sub	local01, #8
05e0c     2E 65 02 FB | 	rdlong	local05, local01
05e10     18 5C 86 F1 | 	sub	local01, #24
05e14     32 61 1A F2 | 	cmp	local03, local05 wcz
05e18     4C 00 90 3D |  if_ae	jmp	#LR__0414
05e1c     02 5C 06 F1 | 	add	local01, #2
05e20     2E 61 C2 FA | 	rdbyte	local03, local01
05e24     02 5C 86 F1 | 	sub	local01, #2
05e28     07 60 46 F7 | 	zerox	local03, #7
05e2c     02 60 0E F2 | 	cmp	local03, #2 wz
05e30     34 00 90 5D |  if_ne	jmp	#LR__0414
05e34     30 5C 06 F1 | 	add	local01, #48
05e38     2E 55 02 F6 | 	mov	arg02, local01
05e3c     2F 5C 86 F1 | 	sub	local01, #47
05e40     2E 53 C2 FA | 	rdbyte	arg01, local01
05e44     2B 5C 06 F1 | 	add	local01, #43
05e48     2E 57 02 FB | 	rdlong	arg03, local01
05e4c     14 5C 86 F1 | 	sub	local01, #20
05e50     2E 67 02 FB | 	rdlong	local06, local01
05e54     33 57 02 F1 | 	add	arg03, local06
05e58     01 58 06 F6 | 	mov	arg04, #1
05e5c     44 FA BF FD | 	call	#_ff_cc_disk_write
05e60     04 00 90 FD | 	jmp	#LR__0414
05e64                 | LR__0413
05e64     01 5E 06 F6 | 	mov	local02, #1
05e68                 | LR__0414
05e68                 | LR__0415
05e68                 | ' 			res = FR_DISK_ERR;
05e68                 | ' 		}
05e68                 | ' 	}
05e68                 | ' 	return res;
05e68     2F 2D 02 F6 | 	mov	result1, local02
05e6c     AF F0 03 F6 | 	mov	ptra, fp
05e70     BF 00 A0 FD | 	call	#popregs_
05e74                 | _ff_cc_sync_window_0228_ret
05e74     2D 00 64 FD | 	ret
05e78                 | 
05e78                 | _ff_cc_move_window_0230
05e78     04 5A 05 F6 | 	mov	COUNT_, #4
05e7c     B0 00 A0 FD | 	call	#pushregs_
05e80     29 5D 02 F6 | 	mov	local01, arg01
05e84     2A 5F 02 F6 | 	mov	local02, arg02
05e88     00 60 06 F6 | 	mov	local03, #0
05e8c     2C 5C 06 F1 | 	add	local01, #44
05e90     2E 63 02 FB | 	rdlong	local04, local01
05e94     2C 5C 86 F1 | 	sub	local01, #44
05e98     31 5F 0A F2 | 	cmp	local02, local04 wz
05e9c     44 00 90 AD |  if_e	jmp	#LR__0417
05ea0     2E 53 02 F6 | 	mov	arg01, local01
05ea4     F8 FE BF FD | 	call	#_ff_cc_sync_window_0228
05ea8     16 61 0A F6 | 	mov	local03, result1 wz
05eac     34 00 90 5D |  if_ne	jmp	#LR__0416
05eb0     01 5C 06 F1 | 	add	local01, #1
05eb4     2E 53 C2 FA | 	rdbyte	arg01, local01
05eb8     2F 5C 06 F1 | 	add	local01, #47
05ebc     2E 55 02 F6 | 	mov	arg02, local01
05ec0     30 5C 86 F1 | 	sub	local01, #48
05ec4     2F 57 02 F6 | 	mov	arg03, local02
05ec8     01 58 06 F6 | 	mov	arg04, #1
05ecc     F8 F8 BF FD | 	call	#_ff_cc_disk_read
05ed0     00 2C 0E F2 | 	cmp	result1, #0 wz
05ed4     01 5E 66 56 |  if_ne	neg	local02, #1
05ed8     01 60 06 56 |  if_ne	mov	local03, #1
05edc     2C 5C 06 F1 | 	add	local01, #44
05ee0     2E 5F 62 FC | 	wrlong	local02, local01
05ee4                 | LR__0416
05ee4                 | LR__0417
05ee4                 | ' 				sect = (LBA_t)0 - 1;
05ee4                 | ' 				res = FR_DISK_ERR;
05ee4                 | ' 			}
05ee4                 | ' 			fs->winsect = sect;
05ee4                 | ' 		}
05ee4                 | ' 	}
05ee4                 | ' 	return res;
05ee4     30 2D 02 F6 | 	mov	result1, local03
05ee8     AF F0 03 F6 | 	mov	ptra, fp
05eec     BF 00 A0 FD | 	call	#popregs_
05ef0                 | _ff_cc_move_window_0230_ret
05ef0     2D 00 64 FD | 	ret
05ef4                 | 
05ef4                 | _ff_cc_sync_fs_0232
05ef4     10 5A 05 F6 | 	mov	COUNT_, #16
05ef8     B0 00 A0 FD | 	call	#pushregs_
05efc     29 5D 02 F6 | 	mov	local01, arg01
05f00     9C FE BF FD | 	call	#_ff_cc_sync_window_0228
05f04     16 5F 0A F6 | 	mov	local02, result1 wz
05f08     4C 01 90 5D |  if_ne	jmp	#LR__0423
05f0c     2E 61 C2 FA | 	rdbyte	local03, local01
05f10     03 60 0E F2 | 	cmp	local03, #3 wz
05f14     24 01 90 5D |  if_ne	jmp	#LR__0422
05f18     04 5C 06 F1 | 	add	local01, #4
05f1c     2E 63 C2 FA | 	rdbyte	local04, local01
05f20     04 5C 86 F1 | 	sub	local01, #4
05f24     07 62 46 F7 | 	zerox	local04, #7
05f28     01 62 0E F2 | 	cmp	local04, #1 wz
05f2c     0C 01 90 5D |  if_ne	jmp	#LR__0422
05f30     30 5C 06 F1 | 	add	local01, #48
05f34     2E 65 02 F6 | 	mov	local05, local01
05f38     32 53 02 F6 | 	mov	arg01, local05
05f3c     00 54 06 F6 | 	mov	arg02, #0
05f40     09 56 C6 F9 | 	decod	arg03, #9
05f44     30 5C 86 F1 | 	sub	local01, #48
05f48                 | ' {
05f48                 | ' 	BYTE *d = (BYTE*)dst;
05f48                 | ' 
05f48                 | ' 	do {
05f48     C0 A0 9F FE | 	loc	pa,	#(@LR__0420-@LR__0418)
05f4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f50                 | LR__0418
05f50     2B 05 D8 FC | 	rep	@LR__0421, arg03
05f54                 | LR__0419
05f54     29 55 42 FC | 	wrbyte	arg02, arg01
05f58     01 52 06 F1 | 	add	arg01, #1
05f5c                 | LR__0420
05f5c                 | LR__0421
05f5c     32 67 02 F6 | 	mov	local06, local05
05f60     FE 67 06 F1 | 	add	local06, #510
05f64     33 53 02 F6 | 	mov	arg01, local06
05f68     55 00 00 FF 
05f6c     55 54 06 F6 | 	mov	arg02, ##43605
05f70     4C FD BF FD | 	call	#_ff_cc_st_word_0213
05f74     32 69 02 F6 | 	mov	local07, local05
05f78     34 53 02 F6 | 	mov	arg01, local07
05f7c     A9 B0 20 FF 
05f80     52 54 06 F6 | 	mov	arg02, ##1096897106
05f84     5C FD BF FD | 	call	#_ff_cc_st_dword_0214
05f88     32 6B 02 F6 | 	mov	local08, local05
05f8c     E4 6B 06 F1 | 	add	local08, #484
05f90     35 53 02 F6 | 	mov	arg01, local08
05f94     B9 A0 30 FF 
05f98     72 54 06 F6 | 	mov	arg02, ##1631679090
05f9c     44 FD BF FD | 	call	#_ff_cc_st_dword_0214
05fa0     32 6D 02 F6 | 	mov	local09, local05
05fa4     E8 6D 06 F1 | 	add	local09, #488
05fa8     10 5C 06 F1 | 	add	local01, #16
05fac     2E 55 02 FB | 	rdlong	arg02, local01
05fb0     10 5C 86 F1 | 	sub	local01, #16
05fb4     36 53 02 F6 | 	mov	arg01, local09
05fb8     28 FD BF FD | 	call	#_ff_cc_st_dword_0214
05fbc     32 6F 02 F6 | 	mov	local10, local05
05fc0     EC 6F 06 F1 | 	add	local10, #492
05fc4     0C 5C 06 F1 | 	add	local01, #12
05fc8     2E 55 02 FB | 	rdlong	arg02, local01
05fcc     0C 5C 86 F1 | 	sub	local01, #12
05fd0     37 53 02 F6 | 	mov	arg01, local10
05fd4     0C FD BF FD | 	call	#_ff_cc_st_dword_0214
05fd8     1C 5C 06 F1 | 	add	local01, #28
05fdc     2E 61 02 FB | 	rdlong	local03, local01
05fe0     01 60 06 F1 | 	add	local03, #1
05fe4     10 5C 06 F1 | 	add	local01, #16
05fe8     2E 61 62 FC | 	wrlong	local03, local01
05fec     04 5C 06 F1 | 	add	local01, #4
05ff0     2E 71 02 F6 | 	mov	local11, local01
05ff4     2F 5C 86 F1 | 	sub	local01, #47
05ff8     2E 63 C2 FA | 	rdbyte	local04, local01
05ffc     38 73 02 F6 | 	mov	local12, local11
06000     2B 5C 06 F1 | 	add	local01, #43
06004     2E 75 02 FB | 	rdlong	local13, local01
06008     2C 5C 86 F1 | 	sub	local01, #44
0600c     3A 77 02 F6 | 	mov	local14, local13
06010     01 78 06 F6 | 	mov	local15, #1
06014     31 53 02 F6 | 	mov	arg01, local04
06018     39 55 02 F6 | 	mov	arg02, local12
0601c     3B 57 02 F6 | 	mov	arg03, local14
06020     01 58 06 F6 | 	mov	arg04, #1
06024     7C F8 BF FD | 	call	#_ff_cc_disk_write
06028     16 7B 02 F6 | 	mov	local16, result1
0602c     00 60 06 F6 | 	mov	local03, #0
06030     04 5C 06 F1 | 	add	local01, #4
06034     2E 01 48 FC | 	wrbyte	#0, local01
06038     04 5C 86 F1 | 	sub	local01, #4
0603c                 | LR__0422
0603c     01 5C 06 F1 | 	add	local01, #1
06040     2E 53 C2 FA | 	rdbyte	arg01, local01
06044     00 54 06 F6 | 	mov	arg02, #0
06048     00 56 06 F6 | 	mov	arg03, #0
0604c     70 F9 BF FD | 	call	#_ff_cc_disk_ioctl
06050     00 2C 0E F2 | 	cmp	result1, #0 wz
06054     01 5E 06 56 |  if_ne	mov	local02, #1
06058                 | LR__0423
06058                 | ' 	}
06058                 | ' 
06058                 | ' 	return res;
06058     2F 2D 02 F6 | 	mov	result1, local02
0605c     AF F0 03 F6 | 	mov	ptra, fp
06060     BF 00 A0 FD | 	call	#popregs_
06064                 | _ff_cc_sync_fs_0232_ret
06064     2D 00 64 FD | 	ret
06068                 | 
06068                 | _ff_cc_clst2sect_0233
06068     02 54 86 F1 | 	sub	arg02, #2
0606c     14 52 06 F1 | 	add	arg01, #20
06070     29 33 02 FB | 	rdlong	_var01, arg01
06074     14 52 86 F1 | 	sub	arg01, #20
06078     02 32 86 F1 | 	sub	_var01, #2
0607c     19 55 1A F2 | 	cmp	arg02, _var01 wcz
06080     00 2C 06 36 |  if_ae	mov	result1, #0
06084     1C 00 90 3D |  if_ae	jmp	#_ff_cc_clst2sect_0233_ret
06088                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
06088     0A 52 06 F1 | 	add	arg01, #10
0608c     29 35 E2 FA | 	rdword	_var02, arg01
06090     2A 35 02 FD | 	qmul	_var02, arg02
06094     18 36 62 FD | 	getqx	_var03
06098     1E 52 06 F1 | 	add	arg01, #30
0609c     29 2D 02 FB | 	rdlong	result1, arg01
060a0     1B 2D 02 F1 | 	add	result1, _var03
060a4                 | _ff_cc_clst2sect_0233_ret
060a4     2D 00 64 FD | 	ret
060a8                 | 
060a8                 | _ff_cc_get_fat_0238
060a8     0C 5A 05 F6 | 	mov	COUNT_, #12
060ac     B0 00 A0 FD | 	call	#pushregs_
060b0     29 5D 02 F6 | 	mov	local01, arg01
060b4     2A 5F 02 F6 | 	mov	local02, arg02
060b8     2E 61 02 FB | 	rdlong	local03, local01
060bc     02 5E 1E F2 | 	cmp	local02, #2 wcz
060c0     18 00 90 CD |  if_b	jmp	#LR__0424
060c4     14 60 06 F1 | 	add	local03, #20
060c8     30 63 02 FB | 	rdlong	local04, local03
060cc     14 60 86 F1 | 	sub	local03, #20
060d0     31 65 02 F6 | 	mov	local05, local04
060d4     32 5F 1A F2 | 	cmp	local02, local05 wcz
060d8     08 00 90 CD |  if_b	jmp	#LR__0425
060dc                 | LR__0424
060dc     01 66 06 F6 | 	mov	local06, #1
060e0     7C 01 90 FD | 	jmp	#LR__0432
060e4                 | LR__0425
060e4     01 66 66 F6 | 	neg	local06, #1
060e8                 | ' 		val = 0xFFFFFFFF;
060e8                 | ' 
060e8                 | ' 		switch (fs->fs_type) {
060e8     30 69 C2 FA | 	rdbyte	local07, local03
060ec     01 68 86 F1 | 	sub	local07, #1
060f0     03 68 26 F3 | 	fle	local07, #3
060f4     30 68 62 FD | 	jmprel	local07
060f8                 | LR__0426
060f8     0C 00 90 FD | 	jmp	#LR__0427
060fc     BC 00 90 FD | 	jmp	#LR__0428
06100     04 01 90 FD | 	jmp	#LR__0429
06104     54 01 90 FD | 	jmp	#LR__0430
06108                 | LR__0427
06108     2F 6B 02 F6 | 	mov	local08, local02
0610c     2F 63 02 F6 | 	mov	local04, local02
06110     01 62 46 F0 | 	shr	local04, #1
06114     31 6B 02 F1 | 	add	local08, local04
06118     30 53 02 F6 | 	mov	arg01, local03
0611c     35 6D 02 F6 | 	mov	local09, local08
06120     09 6C 46 F0 | 	shr	local09, #9
06124     20 60 06 F1 | 	add	local03, #32
06128     30 55 02 FB | 	rdlong	arg02, local03
0612c     20 60 86 F1 | 	sub	local03, #32
06130     36 55 02 F1 | 	add	arg02, local09
06134     40 FD BF FD | 	call	#_ff_cc_move_window_0230
06138     00 2C 0E F2 | 	cmp	result1, #0 wz
0613c     20 01 90 5D |  if_ne	jmp	#LR__0431
06140     35 6F 02 F6 | 	mov	local10, local08
06144     FF 6F 06 F5 | 	and	local10, #511
06148     30 60 06 F1 | 	add	local03, #48
0614c     30 6F 02 F1 | 	add	local10, local03
06150     37 71 C2 FA | 	rdbyte	local11, local10
06154     30 60 86 F1 | 	sub	local03, #48
06158     30 53 02 F6 | 	mov	arg01, local03
0615c     01 6A 06 F1 | 	add	local08, #1
06160     35 6D 02 F6 | 	mov	local09, local08
06164     09 6C 46 F0 | 	shr	local09, #9
06168     20 60 06 F1 | 	add	local03, #32
0616c     30 55 02 FB | 	rdlong	arg02, local03
06170     20 60 86 F1 | 	sub	local03, #32
06174     36 55 02 F1 | 	add	arg02, local09
06178     FC FC BF FD | 	call	#_ff_cc_move_window_0230
0617c     00 2C 0E F2 | 	cmp	result1, #0 wz
06180     DC 00 90 5D |  if_ne	jmp	#LR__0431
06184     FF 6B 06 F5 | 	and	local08, #511
06188     30 60 06 F1 | 	add	local03, #48
0618c     30 6B 02 F1 | 	add	local08, local03
06190     35 63 C2 FA | 	rdbyte	local04, local08
06194     08 62 66 F0 | 	shl	local04, #8
06198     31 71 42 F5 | 	or	local11, local04
0619c     01 5E CE F7 | 	test	local02, #1 wz
061a0     04 70 46 50 |  if_ne	shr	local11, #4
061a4     38 65 02 56 |  if_ne	mov	local05, local11
061a8     07 00 00 AF 
061ac     FF 71 06 A5 |  if_e	and	local11, ##4095
061b0     38 65 02 A6 |  if_e	mov	local05, local11
061b4     32 67 02 F6 | 	mov	local06, local05
061b8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
061b8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
061b8                 | ' 			break;
061b8     A4 00 90 FD | 	jmp	#LR__0431
061bc                 | LR__0428
061bc     30 53 02 F6 | 	mov	arg01, local03
061c0     2F 6D 02 F6 | 	mov	local09, local02
061c4     08 6C 46 F0 | 	shr	local09, #8
061c8     20 60 06 F1 | 	add	local03, #32
061cc     30 55 02 FB | 	rdlong	arg02, local03
061d0     20 60 86 F1 | 	sub	local03, #32
061d4     36 55 02 F1 | 	add	arg02, local09
061d8     9C FC BF FD | 	call	#_ff_cc_move_window_0230
061dc     00 2C 0E F2 | 	cmp	result1, #0 wz
061e0     7C 00 90 5D |  if_ne	jmp	#LR__0431
061e4     30 60 06 F1 | 	add	local03, #48
061e8     01 5E 66 F0 | 	shl	local02, #1
061ec     FF 5F 06 F5 | 	and	local02, #511
061f0     2F 61 02 F1 | 	add	local03, local02
061f4     30 53 02 F6 | 	mov	arg01, local03
061f8     60 FA BF FD | 	call	#_ff_cc_ld_word_0210
061fc     0F 2C 46 F7 | 	zerox	result1, #15
06200     16 67 02 F6 | 	mov	local06, result1
06204                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
06204                 | ' 			break;
06204     58 00 90 FD | 	jmp	#LR__0431
06208                 | LR__0429
06208     30 53 02 F6 | 	mov	arg01, local03
0620c     2F 6D 02 F6 | 	mov	local09, local02
06210     07 6C 46 F0 | 	shr	local09, #7
06214     20 60 06 F1 | 	add	local03, #32
06218     30 55 02 FB | 	rdlong	arg02, local03
0621c     20 60 86 F1 | 	sub	local03, #32
06220     36 55 02 F1 | 	add	arg02, local09
06224     50 FC BF FD | 	call	#_ff_cc_move_window_0230
06228     00 2C 0E F2 | 	cmp	result1, #0 wz
0622c     30 00 90 5D |  if_ne	jmp	#LR__0431
06230     30 60 06 F1 | 	add	local03, #48
06234     30 53 02 F6 | 	mov	arg01, local03
06238     2F 73 02 F6 | 	mov	local12, local02
0623c     02 72 66 F0 | 	shl	local12, #2
06240     FF 73 06 F5 | 	and	local12, #511
06244     39 53 02 F1 | 	add	arg01, local12
06248     34 FA BF FD | 	call	#_ff_cc_ld_dword_0212
0624c     16 67 02 F6 | 	mov	local06, result1
06250     FF FF 07 FF 
06254     FF 67 06 F5 | 	and	local06, ##268435455
06258                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
06258                 | ' 			break;
06258     04 00 90 FD | 	jmp	#LR__0431
0625c                 | LR__0430
0625c     01 66 06 F6 | 	mov	local06, #1
06260                 | LR__0431
06260                 | LR__0432
06260                 | ' 			val = 1;
06260                 | ' 		}
06260                 | ' 	}
06260                 | ' 
06260                 | ' 	return val;
06260     33 2D 02 F6 | 	mov	result1, local06
06264     AF F0 03 F6 | 	mov	ptra, fp
06268     BF 00 A0 FD | 	call	#popregs_
0626c                 | _ff_cc_get_fat_0238_ret
0626c     2D 00 64 FD | 	ret
06270                 | 
06270                 | _ff_cc_put_fat_0242
06270     10 5A 05 F6 | 	mov	COUNT_, #16
06274     B0 00 A0 FD | 	call	#pushregs_
06278     29 5D 02 F6 | 	mov	local01, arg01
0627c     2A 5F 02 F6 | 	mov	local02, arg02
06280     2B 61 02 F6 | 	mov	local03, arg03
06284     02 62 06 F6 | 	mov	local04, #2
06288     02 5E 1E F2 | 	cmp	local02, #2 wcz
0628c     D0 02 90 CD |  if_b	jmp	#LR__0442
06290     14 5C 06 F1 | 	add	local01, #20
06294     2E 65 02 FB | 	rdlong	local05, local01
06298     14 5C 86 F1 | 	sub	local01, #20
0629c     32 67 02 F6 | 	mov	local06, local05
062a0     33 5F 1A F2 | 	cmp	local02, local06 wcz
062a4     B8 02 90 3D |  if_ae	jmp	#LR__0442
062a8                 | ' 		switch (fs->fs_type) {
062a8     2E 69 C2 FA | 	rdbyte	local07, local01
062ac     01 68 86 F1 | 	sub	local07, #1
062b0     03 68 26 F3 | 	fle	local07, #3
062b4     30 68 62 FD | 	jmprel	local07
062b8                 | LR__0433
062b8     0C 00 90 FD | 	jmp	#LR__0434
062bc     54 01 90 FD | 	jmp	#LR__0439
062c0     D8 01 90 FD | 	jmp	#LR__0440
062c4     98 02 90 FD | 	jmp	#LR__0441
062c8                 | LR__0434
062c8     2F 6B 02 F6 | 	mov	local08, local02
062cc     2F 65 02 F6 | 	mov	local05, local02
062d0     01 64 46 F0 | 	shr	local05, #1
062d4     32 6B 02 F1 | 	add	local08, local05
062d8     2E 67 02 F6 | 	mov	local06, local01
062dc     35 6D 02 F6 | 	mov	local09, local08
062e0     09 6C 46 F0 | 	shr	local09, #9
062e4     20 5C 06 F1 | 	add	local01, #32
062e8     2E 6F 02 FB | 	rdlong	local10, local01
062ec     20 5C 86 F1 | 	sub	local01, #32
062f0     37 65 02 F6 | 	mov	local05, local10
062f4     36 65 02 F1 | 	add	local05, local09
062f8     32 71 02 F6 | 	mov	local11, local05
062fc     33 53 02 F6 | 	mov	arg01, local06
06300     38 55 02 F6 | 	mov	arg02, local11
06304     70 FB BF FD | 	call	#_ff_cc_move_window_0230
06308     16 73 02 F6 | 	mov	local12, result1
0630c     39 63 0A F6 | 	mov	local04, local12 wz
06310     4C 02 90 5D |  if_ne	jmp	#LR__0441
06314     30 5C 06 F1 | 	add	local01, #48
06318     2E 75 02 F6 | 	mov	local13, local01
0631c     35 73 02 F6 | 	mov	local12, local08
06320     FF 73 06 F5 | 	and	local12, #511
06324     39 75 02 F1 | 	add	local13, local12
06328     01 5E CE F7 | 	test	local02, #1 wz
0632c     30 5C 86 F1 | 	sub	local01, #48
06330     01 6A 06 F1 | 	add	local08, #1
06334     1C 00 90 AD |  if_e	jmp	#LR__0435
06338     3A 67 C2 FA | 	rdbyte	local06, local13
0633c     0F 66 06 F5 | 	and	local06, #15
06340     30 6F 02 F6 | 	mov	local10, local03
06344     07 6E 46 F7 | 	zerox	local10, #7
06348     04 6E 66 F0 | 	shl	local10, #4
0634c     37 67 42 F5 | 	or	local06, local10
06350     04 00 90 FD | 	jmp	#LR__0436
06354                 | LR__0435
06354     30 67 02 F6 | 	mov	local06, local03
06358                 | LR__0436
06358     3A 67 42 FC | 	wrbyte	local06, local13
0635c     03 5C 06 F1 | 	add	local01, #3
06360     2E 03 48 FC | 	wrbyte	#1, local01
06364     03 5C 86 F1 | 	sub	local01, #3
06368     2E 67 02 F6 | 	mov	local06, local01
0636c     35 6D 02 F6 | 	mov	local09, local08
06370     09 6C 46 F0 | 	shr	local09, #9
06374     20 5C 06 F1 | 	add	local01, #32
06378     2E 6F 02 FB | 	rdlong	local10, local01
0637c     20 5C 86 F1 | 	sub	local01, #32
06380     37 65 02 F6 | 	mov	local05, local10
06384     36 65 02 F1 | 	add	local05, local09
06388     32 71 02 F6 | 	mov	local11, local05
0638c     33 53 02 F6 | 	mov	arg01, local06
06390     38 55 02 F6 | 	mov	arg02, local11
06394     E0 FA BF FD | 	call	#_ff_cc_move_window_0230
06398     16 73 02 F6 | 	mov	local12, result1
0639c     39 63 0A F6 | 	mov	local04, local12 wz
063a0     BC 01 90 5D |  if_ne	jmp	#LR__0441
063a4     30 5C 06 F1 | 	add	local01, #48
063a8     2E 75 02 F6 | 	mov	local13, local01
063ac     35 6D 02 F6 | 	mov	local09, local08
063b0     FF 6D 06 F5 | 	and	local09, #511
063b4     36 6F 02 F6 | 	mov	local10, local09
063b8     36 75 02 F1 | 	add	local13, local09
063bc     2F 65 02 F6 | 	mov	local05, local02
063c0     01 64 0E F5 | 	and	local05, #1 wz
063c4     30 5C 86 F1 | 	sub	local01, #48
063c8     10 00 90 AD |  if_e	jmp	#LR__0437
063cc     30 6D 02 F6 | 	mov	local09, local03
063d0     04 6C 46 F0 | 	shr	local09, #4
063d4     36 67 02 F6 | 	mov	local06, local09
063d8     20 00 90 FD | 	jmp	#LR__0438
063dc                 | LR__0437
063dc     3A 6F C2 FA | 	rdbyte	local10, local13
063e0     F0 6E 06 F5 | 	and	local10, #240
063e4     30 71 02 F6 | 	mov	local11, local03
063e8     08 70 46 F0 | 	shr	local11, #8
063ec     07 70 46 F7 | 	zerox	local11, #7
063f0     0F 70 06 F5 | 	and	local11, #15
063f4     38 6F 42 F5 | 	or	local10, local11
063f8     37 67 02 F6 | 	mov	local06, local10
063fc                 | LR__0438
063fc     3A 67 42 FC | 	wrbyte	local06, local13
06400     01 66 06 F6 | 	mov	local06, #1
06404     03 5C 06 F1 | 	add	local01, #3
06408     2E 03 48 FC | 	wrbyte	#1, local01
0640c     03 5C 86 F1 | 	sub	local01, #3
06410                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
06410                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
06410                 | ' 			fs->wflag = 1;
06410                 | ' 			break;
06410     4C 01 90 FD | 	jmp	#LR__0441
06414                 | LR__0439
06414     2E 67 02 F6 | 	mov	local06, local01
06418     2F 6D 02 F6 | 	mov	local09, local02
0641c     08 6C 46 F0 | 	shr	local09, #8
06420     20 5C 06 F1 | 	add	local01, #32
06424     2E 6F 02 FB | 	rdlong	local10, local01
06428     20 5C 86 F1 | 	sub	local01, #32
0642c     37 65 02 F6 | 	mov	local05, local10
06430     36 65 02 F1 | 	add	local05, local09
06434     32 71 02 F6 | 	mov	local11, local05
06438     33 53 02 F6 | 	mov	arg01, local06
0643c     38 55 02 F6 | 	mov	arg02, local11
06440     34 FA BF FD | 	call	#_ff_cc_move_window_0230
06444     16 73 02 F6 | 	mov	local12, result1
06448     39 63 0A F6 | 	mov	local04, local12 wz
0644c     10 01 90 5D |  if_ne	jmp	#LR__0441
06450     30 5C 06 F1 | 	add	local01, #48
06454     2E 65 02 F6 | 	mov	local05, local01
06458     2F 6D 02 F6 | 	mov	local09, local02
0645c     01 6C 66 F0 | 	shl	local09, #1
06460     36 6F 02 F6 | 	mov	local10, local09
06464     FF 6F 06 F5 | 	and	local10, #511
06468     37 71 02 F6 | 	mov	local11, local10
0646c     32 73 02 F6 | 	mov	local12, local05
06470     38 73 02 F1 | 	add	local12, local11
06474     30 77 02 F6 | 	mov	local14, local03
06478     39 53 02 F6 | 	mov	arg01, local12
0647c     3B 55 02 F6 | 	mov	arg02, local14
06480     30 5C 86 F1 | 	sub	local01, #48
06484     38 F8 BF FD | 	call	#_ff_cc_st_word_0213
06488     01 66 06 F6 | 	mov	local06, #1
0648c     03 5C 06 F1 | 	add	local01, #3
06490     2E 03 48 FC | 	wrbyte	#1, local01
06494     03 5C 86 F1 | 	sub	local01, #3
06498                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
06498                 | ' 			fs->wflag = 1;
06498                 | ' 			break;
06498     C4 00 90 FD | 	jmp	#LR__0441
0649c                 | LR__0440
0649c     2E 67 02 F6 | 	mov	local06, local01
064a0     2F 6D 02 F6 | 	mov	local09, local02
064a4     07 6C 46 F0 | 	shr	local09, #7
064a8     20 5C 06 F1 | 	add	local01, #32
064ac     2E 6F 02 FB | 	rdlong	local10, local01
064b0     20 5C 86 F1 | 	sub	local01, #32
064b4     37 65 02 F6 | 	mov	local05, local10
064b8     36 65 02 F1 | 	add	local05, local09
064bc     32 71 02 F6 | 	mov	local11, local05
064c0     33 53 02 F6 | 	mov	arg01, local06
064c4     38 55 02 F6 | 	mov	arg02, local11
064c8     AC F9 BF FD | 	call	#_ff_cc_move_window_0230
064cc     16 73 02 F6 | 	mov	local12, result1
064d0     39 63 0A F6 | 	mov	local04, local12 wz
064d4     88 00 90 5D |  if_ne	jmp	#LR__0441
064d8     FF FF 07 FF 
064dc     FF 61 06 F5 | 	and	local03, ##268435455
064e0     30 5C 06 F1 | 	add	local01, #48
064e4     2E 79 02 F6 | 	mov	local15, local01
064e8     2F 77 02 F6 | 	mov	local14, local02
064ec     02 76 66 F0 | 	shl	local14, #2
064f0     FF 77 06 F5 | 	and	local14, #511
064f4     3B 79 02 F1 | 	add	local15, local14
064f8     3C 53 02 F6 | 	mov	arg01, local15
064fc     30 5C 86 F1 | 	sub	local01, #48
06500     7C F7 BF FD | 	call	#_ff_cc_ld_dword_0212
06504     16 7B 02 F6 | 	mov	local16, result1
06508     3D 65 02 F6 | 	mov	local05, local16
0650c     00 00 78 FF 
06510     00 64 06 F5 | 	and	local05, ##-268435456
06514     32 61 42 F5 | 	or	local03, local05
06518     30 5C 06 F1 | 	add	local01, #48
0651c     2E 65 02 F6 | 	mov	local05, local01
06520     2F 6D 02 F6 | 	mov	local09, local02
06524     02 6C 66 F0 | 	shl	local09, #2
06528     36 6F 02 F6 | 	mov	local10, local09
0652c     FF 6F 06 F5 | 	and	local10, #511
06530     37 71 02 F6 | 	mov	local11, local10
06534     32 73 02 F6 | 	mov	local12, local05
06538     38 73 02 F1 | 	add	local12, local11
0653c     30 77 02 F6 | 	mov	local14, local03
06540     39 53 02 F6 | 	mov	arg01, local12
06544     3B 55 02 F6 | 	mov	arg02, local14
06548     30 5C 86 F1 | 	sub	local01, #48
0654c     94 F7 BF FD | 	call	#_ff_cc_st_dword_0214
06550     01 66 06 F6 | 	mov	local06, #1
06554     03 5C 06 F1 | 	add	local01, #3
06558     2E 03 48 FC | 	wrbyte	#1, local01
0655c     03 5C 86 F1 | 	sub	local01, #3
06560                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
06560                 | ' 			}
06560                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
06560                 | ' 			fs->wflag = 1;
06560                 | ' 			break;
06560                 | LR__0441
06560                 | LR__0442
06560                 | ' 		}
06560                 | ' 	}
06560                 | ' 	return res;
06560     31 2D 02 F6 | 	mov	result1, local04
06564     AF F0 03 F6 | 	mov	ptra, fp
06568     BF 00 A0 FD | 	call	#popregs_
0656c                 | _ff_cc_put_fat_0242_ret
0656c     2D 00 64 FD | 	ret
06570                 | 
06570                 | _ff_cc_remove_chain_0246
06570     09 5A 05 F6 | 	mov	COUNT_, #9
06574     B0 00 A0 FD | 	call	#pushregs_
06578     29 5D 02 F6 | 	mov	local01, arg01
0657c     2A 5F 02 F6 | 	mov	local02, arg02
06580     2B 61 02 F6 | 	mov	local03, arg03
06584     2E 63 02 FB | 	rdlong	local04, local01
06588     02 5E 1E F2 | 	cmp	local02, #2 wcz
0658c     14 00 90 CD |  if_b	jmp	#LR__0443
06590     14 62 06 F1 | 	add	local04, #20
06594     31 65 02 FB | 	rdlong	local05, local04
06598     14 62 86 F1 | 	sub	local04, #20
0659c     32 5F 1A F2 | 	cmp	local02, local05 wcz
065a0     08 00 90 CD |  if_b	jmp	#LR__0444
065a4                 | LR__0443
065a4     02 2C 06 F6 | 	mov	result1, #2
065a8     D0 00 90 FD | 	jmp	#LR__0449
065ac                 | LR__0444
065ac     00 60 0E F2 | 	cmp	local03, #0 wz
065b0     1C 00 90 AD |  if_e	jmp	#LR__0445
065b4     31 53 02 F6 | 	mov	arg01, local04
065b8     30 55 02 F6 | 	mov	arg02, local03
065bc     01 56 66 F6 | 	neg	arg03, #1
065c0     AC FC BF FD | 	call	#_ff_cc_put_fat_0242
065c4     16 67 0A F6 | 	mov	local06, result1 wz
065c8     33 2D 02 56 |  if_ne	mov	result1, local06
065cc     AC 00 90 5D |  if_ne	jmp	#LR__0449
065d0                 | LR__0445
065d0                 | ' 	}
065d0                 | ' 
065d0                 | ' 
065d0                 | ' 	do {
065d0                 | LR__0446
065d0     2F 55 02 F6 | 	mov	arg02, local02
065d4     2E 53 02 F6 | 	mov	arg01, local01
065d8     CC FA BF FD | 	call	#_ff_cc_get_fat_0238
065dc     16 69 0A F6 | 	mov	local07, result1 wz
065e0     94 00 90 AD |  if_e	jmp	#LR__0448
065e4     01 68 0E F2 | 	cmp	local07, #1 wz
065e8     02 2C 06 A6 |  if_e	mov	result1, #2
065ec     8C 00 90 AD |  if_e	jmp	#LR__0449
065f0     FF FF 7F FF 
065f4     FF 69 0E F2 | 	cmp	local07, ##-1 wz
065f8     01 2C 06 A6 |  if_e	mov	result1, #1
065fc     7C 00 90 AD |  if_e	jmp	#LR__0449
06600     31 53 02 F6 | 	mov	arg01, local04
06604     2F 55 02 F6 | 	mov	arg02, local02
06608     00 56 06 F6 | 	mov	arg03, #0
0660c     60 FC BF FD | 	call	#_ff_cc_put_fat_0242
06610     16 67 0A F6 | 	mov	local06, result1 wz
06614     33 2D 02 56 |  if_ne	mov	result1, local06
06618     60 00 90 5D |  if_ne	jmp	#LR__0449
0661c     14 62 06 F1 | 	add	local04, #20
06620     31 65 02 FB | 	rdlong	local05, local04
06624     02 64 86 F1 | 	sub	local05, #2
06628     04 62 86 F1 | 	sub	local04, #4
0662c     31 6B 02 FB | 	rdlong	local08, local04
06630     10 62 86 F1 | 	sub	local04, #16
06634     32 6B 1A F2 | 	cmp	local08, local05 wcz
06638     24 00 90 3D |  if_ae	jmp	#LR__0447
0663c     10 62 06 F1 | 	add	local04, #16
06640     31 6D 02 FB | 	rdlong	local09, local04
06644     01 6C 06 F1 | 	add	local09, #1
06648     31 6D 62 FC | 	wrlong	local09, local04
0664c     0C 62 86 F1 | 	sub	local04, #12
06650     31 65 C2 FA | 	rdbyte	local05, local04
06654     01 64 46 F5 | 	or	local05, #1
06658     31 65 42 FC | 	wrbyte	local05, local04
0665c     04 62 86 F1 | 	sub	local04, #4
06660                 | LR__0447
06660     34 5F 02 F6 | 	mov	local02, local07
06664     14 62 06 F1 | 	add	local04, #20
06668     31 65 02 FB | 	rdlong	local05, local04
0666c     14 62 86 F1 | 	sub	local04, #20
06670     32 5F 1A F2 | 	cmp	local02, local05 wcz
06674     58 FF 9F CD |  if_b	jmp	#LR__0446
06678                 | LR__0448
06678                 | ' #line 1531 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
06678                 | ' 	return FR_OK;
06678     00 2C 06 F6 | 	mov	result1, #0
0667c                 | LR__0449
0667c     AF F0 03 F6 | 	mov	ptra, fp
06680     BF 00 A0 FD | 	call	#popregs_
06684                 | _ff_cc_remove_chain_0246_ret
06684     2D 00 64 FD | 	ret
06688                 | 
06688                 | _ff_cc_create_chain_0252
06688     0C 5A 05 F6 | 	mov	COUNT_, #12
0668c     B0 00 A0 FD | 	call	#pushregs_
06690     29 5D 02 F6 | 	mov	local01, arg01
06694     2A 5F 0A F6 | 	mov	local02, arg02 wz
06698     2E 61 02 FB | 	rdlong	local03, local01
0669c     2C 00 90 5D |  if_ne	jmp	#LR__0451
066a0     0C 60 06 F1 | 	add	local03, #12
066a4     30 63 0A FB | 	rdlong	local04, local03 wz
066a8     0C 60 86 F1 | 	sub	local03, #12
066ac     14 00 90 AD |  if_e	jmp	#LR__0450
066b0     14 60 06 F1 | 	add	local03, #20
066b4     30 65 02 FB | 	rdlong	local05, local03
066b8     14 60 86 F1 | 	sub	local03, #20
066bc     32 63 1A F2 | 	cmp	local04, local05 wcz
066c0     50 00 90 CD |  if_b	jmp	#LR__0452
066c4                 | LR__0450
066c4     01 62 06 F6 | 	mov	local04, #1
066c8     48 00 90 FD | 	jmp	#LR__0452
066cc                 | LR__0451
066cc     2E 53 02 F6 | 	mov	arg01, local01
066d0     2F 55 02 F6 | 	mov	arg02, local02
066d4     D0 F9 BF FD | 	call	#_ff_cc_get_fat_0238
066d8     16 67 02 F6 | 	mov	local06, result1
066dc     02 66 1E F2 | 	cmp	local06, #2 wcz
066e0     01 2C 06 C6 |  if_b	mov	result1, #1
066e4     F8 01 90 CD |  if_b	jmp	#LR__0468
066e8     FF FF 7F FF 
066ec     FF 67 0E F2 | 	cmp	local06, ##-1 wz
066f0     33 2D 02 A6 |  if_e	mov	result1, local06
066f4     E8 01 90 AD |  if_e	jmp	#LR__0468
066f8     14 60 06 F1 | 	add	local03, #20
066fc     30 65 02 FB | 	rdlong	local05, local03
06700     14 60 86 F1 | 	sub	local03, #20
06704     32 67 1A F2 | 	cmp	local06, local05 wcz
06708     33 2D 02 C6 |  if_b	mov	result1, local06
0670c     D0 01 90 CD |  if_b	jmp	#LR__0468
06710     2F 63 02 F6 | 	mov	local04, local02
06714                 | LR__0452
06714     10 60 06 F1 | 	add	local03, #16
06718     30 65 0A FB | 	rdlong	local05, local03 wz
0671c     10 60 86 F1 | 	sub	local03, #16
06720     00 2C 06 A6 |  if_e	mov	result1, #0
06724     B8 01 90 AD |  if_e	jmp	#LR__0468
06728     00 68 06 F6 | 	mov	local07, #0
0672c     2F 63 0A F2 | 	cmp	local04, local02 wz
06730     84 00 90 5D |  if_ne	jmp	#LR__0457
06734     31 6B 02 F6 | 	mov	local08, local04
06738     01 6A 06 F1 | 	add	local08, #1
0673c     35 69 02 F6 | 	mov	local07, local08
06740     14 60 06 F1 | 	add	local03, #20
06744     30 65 02 FB | 	rdlong	local05, local03
06748     14 60 86 F1 | 	sub	local03, #20
0674c     32 69 1A F2 | 	cmp	local07, local05 wcz
06750     02 68 06 36 |  if_ae	mov	local07, #2
06754     2E 65 02 F6 | 	mov	local05, local01
06758     34 55 02 F6 | 	mov	arg02, local07
0675c     32 53 02 F6 | 	mov	arg01, local05
06760     44 F9 BF FD | 	call	#_ff_cc_get_fat_0238
06764     16 67 02 F6 | 	mov	local06, result1
06768     01 66 0E F2 | 	cmp	local06, #1 wz
0676c     0C 00 90 AD |  if_e	jmp	#LR__0453
06770     FF FF 7F FF 
06774     FF 67 0E F2 | 	cmp	local06, ##-1 wz
06778     08 00 90 5D |  if_ne	jmp	#LR__0454
0677c                 | LR__0453
0677c     33 2D 02 F6 | 	mov	result1, local06
06780     5C 01 90 FD | 	jmp	#LR__0468
06784                 | LR__0454
06784     00 66 0E F2 | 	cmp	local06, #0 wz
06788     2C 00 90 AD |  if_e	jmp	#LR__0456
0678c     0C 60 06 F1 | 	add	local03, #12
06790     30 67 02 FB | 	rdlong	local06, local03
06794     0C 60 86 F1 | 	sub	local03, #12
06798     02 66 1E F2 | 	cmp	local06, #2 wcz
0679c     14 00 90 CD |  if_b	jmp	#LR__0455
067a0     14 60 06 F1 | 	add	local03, #20
067a4     30 65 02 FB | 	rdlong	local05, local03
067a8     14 60 86 F1 | 	sub	local03, #20
067ac     32 67 1A F2 | 	cmp	local06, local05 wcz
067b0     33 63 02 C6 |  if_b	mov	local04, local06
067b4                 | LR__0455
067b4     00 68 06 F6 | 	mov	local07, #0
067b8                 | LR__0456
067b8                 | LR__0457
067b8     00 68 0E F2 | 	cmp	local07, #0 wz
067bc     70 00 90 5D |  if_ne	jmp	#LR__0463
067c0     31 69 02 F6 | 	mov	local07, local04
067c4                 | ' 			ncl = scl;
067c4                 | ' 			for (;;) {
067c4                 | LR__0458
067c4     01 68 06 F1 | 	add	local07, #1
067c8     14 60 06 F1 | 	add	local03, #20
067cc     30 65 02 FB | 	rdlong	local05, local03
067d0     14 60 86 F1 | 	sub	local03, #20
067d4     32 69 1A F2 | 	cmp	local07, local05 wcz
067d8     10 00 90 CD |  if_b	jmp	#LR__0459
067dc     02 68 06 F6 | 	mov	local07, #2
067e0     31 69 1A F2 | 	cmp	local07, local04 wcz
067e4     00 2C 06 16 |  if_a	mov	result1, #0
067e8     F4 00 90 1D |  if_a	jmp	#LR__0468
067ec                 | LR__0459
067ec     2E 65 02 F6 | 	mov	local05, local01
067f0     34 55 02 F6 | 	mov	arg02, local07
067f4     32 53 02 F6 | 	mov	arg01, local05
067f8     AC F8 BF FD | 	call	#_ff_cc_get_fat_0238
067fc     16 67 0A F6 | 	mov	local06, result1 wz
06800     2C 00 90 AD |  if_e	jmp	#LR__0462
06804     01 66 0E F2 | 	cmp	local06, #1 wz
06808     0C 00 90 AD |  if_e	jmp	#LR__0460
0680c     FF FF 7F FF 
06810     FF 67 0E F2 | 	cmp	local06, ##-1 wz
06814     08 00 90 5D |  if_ne	jmp	#LR__0461
06818                 | LR__0460
06818     33 2D 02 F6 | 	mov	result1, local06
0681c     C0 00 90 FD | 	jmp	#LR__0468
06820                 | LR__0461
06820     31 69 0A F2 | 	cmp	local07, local04 wz
06824     00 2C 06 A6 |  if_e	mov	result1, #0
06828     B4 00 90 AD |  if_e	jmp	#LR__0468
0682c     94 FF 9F FD | 	jmp	#LR__0458
06830                 | LR__0462
06830                 | LR__0463
06830     30 53 02 F6 | 	mov	arg01, local03
06834     34 55 02 F6 | 	mov	arg02, local07
06838     01 56 66 F6 | 	neg	arg03, #1
0683c     30 FA BF FD | 	call	#_ff_cc_put_fat_0242
06840     16 6D 0A F6 | 	mov	local09, result1 wz
06844     2C 00 90 5D |  if_ne	jmp	#LR__0464
06848     00 5E 0E F2 | 	cmp	local02, #0 wz
0684c     24 00 90 AD |  if_e	jmp	#LR__0464
06850     30 65 02 F6 | 	mov	local05, local03
06854     2F 6F 02 F6 | 	mov	local10, local02
06858     34 71 02 F6 | 	mov	local11, local07
0685c     32 53 02 F6 | 	mov	arg01, local05
06860     37 55 02 F6 | 	mov	arg02, local10
06864     38 57 02 F6 | 	mov	arg03, local11
06868     04 FA BF FD | 	call	#_ff_cc_put_fat_0242
0686c     16 73 02 F6 | 	mov	local12, result1
06870     39 6D 02 F6 | 	mov	local09, local12
06874                 | LR__0464
06874     00 6C 0E F2 | 	cmp	local09, #0 wz
06878     50 00 90 5D |  if_ne	jmp	#LR__0466
0687c     0C 60 06 F1 | 	add	local03, #12
06880     30 69 62 FC | 	wrlong	local07, local03
06884     08 60 06 F1 | 	add	local03, #8
06888     30 65 02 FB | 	rdlong	local05, local03
0688c     02 64 86 F1 | 	sub	local05, #2
06890     04 60 86 F1 | 	sub	local03, #4
06894     30 71 02 FB | 	rdlong	local11, local03
06898     10 60 86 F1 | 	sub	local03, #16
0689c     32 71 1A F2 | 	cmp	local11, local05 wcz
068a0     14 00 90 1D |  if_a	jmp	#LR__0465
068a4     10 60 06 F1 | 	add	local03, #16
068a8     30 71 02 FB | 	rdlong	local11, local03
068ac     01 70 86 F1 | 	sub	local11, #1
068b0     30 71 62 FC | 	wrlong	local11, local03
068b4     10 60 86 F1 | 	sub	local03, #16
068b8                 | LR__0465
068b8     04 60 06 F1 | 	add	local03, #4
068bc     30 65 C2 FA | 	rdbyte	local05, local03
068c0     01 64 46 F5 | 	or	local05, #1
068c4     30 65 42 FC | 	wrbyte	local05, local03
068c8     10 00 90 FD | 	jmp	#LR__0467
068cc                 | LR__0466
068cc     01 6C 0E F2 | 	cmp	local09, #1 wz
068d0     01 64 66 A6 |  if_e	neg	local05, #1
068d4     01 64 06 56 |  if_ne	mov	local05, #1
068d8     32 69 02 F6 | 	mov	local07, local05
068dc                 | LR__0467
068dc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
068dc                 | ' 	}
068dc                 | ' 
068dc                 | ' 	return ncl;
068dc     34 2D 02 F6 | 	mov	result1, local07
068e0                 | LR__0468
068e0     AF F0 03 F6 | 	mov	ptra, fp
068e4     BF 00 A0 FD | 	call	#popregs_
068e8                 | _ff_cc_create_chain_0252_ret
068e8     2D 00 64 FD | 	ret
068ec                 | 
068ec                 | _ff_cc_dir_clear_0257
068ec     08 5A 05 F6 | 	mov	COUNT_, #8
068f0     B0 00 A0 FD | 	call	#pushregs_
068f4     29 5D 02 F6 | 	mov	local01, arg01
068f8     2A 5F 02 F6 | 	mov	local02, arg02
068fc     2E 53 02 F6 | 	mov	arg01, local01
06900     9C F4 BF FD | 	call	#_ff_cc_sync_window_0228
06904     00 2C 0E F2 | 	cmp	result1, #0 wz
06908     01 2C 06 56 |  if_ne	mov	result1, #1
0690c     A8 00 90 5D |  if_ne	jmp	#LR__0475
06910     2E 53 02 F6 | 	mov	arg01, local01
06914     2F 55 02 F6 | 	mov	arg02, local02
06918     4C F7 BF FD | 	call	#_ff_cc_clst2sect_0233
0691c     16 61 02 F6 | 	mov	local03, result1
06920     2C 5C 06 F1 | 	add	local01, #44
06924     2E 61 62 FC | 	wrlong	local03, local01
06928     04 5C 06 F1 | 	add	local01, #4
0692c     2E 63 02 F6 | 	mov	local04, local01
06930     31 53 02 F6 | 	mov	arg01, local04
06934     00 54 06 F6 | 	mov	arg02, #0
06938     09 56 C6 F9 | 	decod	arg03, #9
0693c     30 5C 86 F1 | 	sub	local01, #48
06940                 | ' {
06940                 | ' 	BYTE *d = (BYTE*)dst;
06940                 | ' 
06940                 | ' 	do {
06940     C8 96 9F FE | 	loc	pa,	#(@LR__0471-@LR__0469)
06944     93 00 A0 FD | 	call	#FCACHE_LOAD_
06948                 | LR__0469
06948     2B 05 D8 FC | 	rep	@LR__0472, arg03
0694c                 | LR__0470
0694c     29 55 42 FC | 	wrbyte	arg02, arg01
06950     01 52 06 F1 | 	add	arg01, #1
06954                 | LR__0471
06954                 | LR__0472
06954     31 65 02 F6 | 	mov	local05, local04
06958                 | ' #line 1698 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
06958                 | ' 	{
06958                 | ' 		ibuf = fs->win; szb = 1;
06958                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
06958     00 66 06 F6 | 	mov	local06, #0
0695c                 | LR__0473
0695c     0A 5C 06 F1 | 	add	local01, #10
06960     2E 69 E2 FA | 	rdword	local07, local01
06964     0A 5C 86 F1 | 	sub	local01, #10
06968     0F 68 46 F7 | 	zerox	local07, #15
0696c     34 67 1A F2 | 	cmp	local06, local07 wcz
06970     2C 00 90 3D |  if_ae	jmp	#LR__0474
06974     01 5C 06 F1 | 	add	local01, #1
06978     2E 53 C2 FA | 	rdbyte	arg01, local01
0697c     01 5C 86 F1 | 	sub	local01, #1
06980     32 55 02 F6 | 	mov	arg02, local05
06984     30 57 02 F6 | 	mov	arg03, local03
06988     33 57 02 F1 | 	add	arg03, local06
0698c     01 58 06 F6 | 	mov	arg04, #1
06990     10 EF BF FD | 	call	#_ff_cc_disk_write
06994     00 2C 0E F2 | 	cmp	result1, #0 wz
06998     01 66 06 A1 |  if_e	add	local06, #1
0699c     BC FF 9F AD |  if_e	jmp	#LR__0473
069a0                 | LR__0474
069a0                 | ' 	}
069a0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
069a0     0A 5C 06 F1 | 	add	local01, #10
069a4     2E 6B E2 FA | 	rdword	local08, local01
069a8     35 67 0A F2 | 	cmp	local06, local08 wz
069ac     00 68 06 A6 |  if_e	mov	local07, #0
069b0     01 68 06 56 |  if_ne	mov	local07, #1
069b4     34 2D 02 F6 | 	mov	result1, local07
069b8                 | LR__0475
069b8     AF F0 03 F6 | 	mov	ptra, fp
069bc     BF 00 A0 FD | 	call	#popregs_
069c0                 | _ff_cc_dir_clear_0257_ret
069c0     2D 00 64 FD | 	ret
069c4                 | 
069c4                 | _ff_cc_dir_sdi_0261
069c4     08 5A 05 F6 | 	mov	COUNT_, #8
069c8     B0 00 A0 FD | 	call	#pushregs_
069cc     29 5D 02 F6 | 	mov	local01, arg01
069d0     2A 5F 02 F6 | 	mov	local02, arg02
069d4     2E 61 02 FB | 	rdlong	local03, local01
069d8     00 10 00 FF 
069dc     00 5E 1E F2 | 	cmp	local02, ##2097152 wcz
069e0     08 00 90 3D |  if_ae	jmp	#LR__0476
069e4     1F 5E CE F7 | 	test	local02, #31 wz
069e8     08 00 90 AD |  if_e	jmp	#LR__0477
069ec                 | LR__0476
069ec                 | ' 		return FR_INT_ERR;
069ec     02 2C 06 F6 | 	mov	result1, #2
069f0     50 01 90 FD | 	jmp	#LR__0485
069f4                 | LR__0477
069f4     10 5C 06 F1 | 	add	local01, #16
069f8     2E 5F 62 FC | 	wrlong	local02, local01
069fc     08 5C 86 F1 | 	sub	local01, #8
06a00     2E 63 0A FB | 	rdlong	local04, local01 wz
06a04     08 5C 86 F1 | 	sub	local01, #8
06a08     1C 00 90 5D |  if_ne	jmp	#LR__0478
06a0c     30 65 C2 FA | 	rdbyte	local05, local03
06a10     03 64 1E F2 | 	cmp	local05, #3 wcz
06a14     10 00 90 CD |  if_b	jmp	#LR__0478
06a18     24 60 06 F1 | 	add	local03, #36
06a1c     30 65 02 FB | 	rdlong	local05, local03
06a20     24 60 86 F1 | 	sub	local03, #36
06a24     32 63 02 F6 | 	mov	local04, local05
06a28                 | LR__0478
06a28     00 62 0E F2 | 	cmp	local04, #0 wz
06a2c     40 00 90 5D |  if_ne	jmp	#LR__0479
06a30     2F 65 02 F6 | 	mov	local05, local02
06a34     05 64 46 F0 | 	shr	local05, #5
06a38     08 60 06 F1 | 	add	local03, #8
06a3c     30 67 E2 FA | 	rdword	local06, local03
06a40     08 60 86 F1 | 	sub	local03, #8
06a44     0F 66 46 F7 | 	zerox	local06, #15
06a48     33 65 1A F2 | 	cmp	local05, local06 wcz
06a4c     02 2C 06 36 |  if_ae	mov	result1, #2
06a50     F0 00 90 3D |  if_ae	jmp	#LR__0485
06a54     24 60 06 F1 | 	add	local03, #36
06a58     30 65 02 FB | 	rdlong	local05, local03
06a5c     24 60 86 F1 | 	sub	local03, #36
06a60     18 5C 06 F1 | 	add	local01, #24
06a64     2E 65 62 FC | 	wrlong	local05, local01
06a68     18 5C 86 F1 | 	sub	local01, #24
06a6c     80 00 90 FD | 	jmp	#LR__0484
06a70                 | LR__0479
06a70     0A 60 06 F1 | 	add	local03, #10
06a74     30 69 E2 FA | 	rdword	local07, local03
06a78     0A 60 86 F1 | 	sub	local03, #10
06a7c     0F 68 46 F7 | 	zerox	local07, #15
06a80     09 68 66 F0 | 	shl	local07, #9
06a84                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
06a84                 | ' 		while (ofs >= csz) {
06a84                 | LR__0480
06a84     34 5F 1A F2 | 	cmp	local02, local07 wcz
06a88     4C 00 90 CD |  if_b	jmp	#LR__0483
06a8c     2E 53 02 F6 | 	mov	arg01, local01
06a90     31 55 02 F6 | 	mov	arg02, local04
06a94     10 F6 BF FD | 	call	#_ff_cc_get_fat_0238
06a98     16 63 02 F6 | 	mov	local04, result1
06a9c     FF FF 7F FF 
06aa0     FF 63 0E F2 | 	cmp	local04, ##-1 wz
06aa4     01 2C 06 A6 |  if_e	mov	result1, #1
06aa8     98 00 90 AD |  if_e	jmp	#LR__0485
06aac     02 62 1E F2 | 	cmp	local04, #2 wcz
06ab0     14 00 90 CD |  if_b	jmp	#LR__0481
06ab4     14 60 06 F1 | 	add	local03, #20
06ab8     30 65 02 FB | 	rdlong	local05, local03
06abc     14 60 86 F1 | 	sub	local03, #20
06ac0     32 63 1A F2 | 	cmp	local04, local05 wcz
06ac4     08 00 90 CD |  if_b	jmp	#LR__0482
06ac8                 | LR__0481
06ac8     02 2C 06 F6 | 	mov	result1, #2
06acc     74 00 90 FD | 	jmp	#LR__0485
06ad0                 | LR__0482
06ad0     34 5F 82 F1 | 	sub	local02, local07
06ad4     AC FF 9F FD | 	jmp	#LR__0480
06ad8                 | LR__0483
06ad8     30 53 02 F6 | 	mov	arg01, local03
06adc     31 55 02 F6 | 	mov	arg02, local04
06ae0     84 F5 BF FD | 	call	#_ff_cc_clst2sect_0233
06ae4     18 5C 06 F1 | 	add	local01, #24
06ae8     2E 2D 62 FC | 	wrlong	result1, local01
06aec     18 5C 86 F1 | 	sub	local01, #24
06af0                 | LR__0484
06af0     14 5C 06 F1 | 	add	local01, #20
06af4     2E 63 62 FC | 	wrlong	local04, local01
06af8     04 5C 06 F1 | 	add	local01, #4
06afc     2E 65 0A FB | 	rdlong	local05, local01 wz
06b00     18 5C 86 F1 | 	sub	local01, #24
06b04     02 2C 06 A6 |  if_e	mov	result1, #2
06b08     38 00 90 AD |  if_e	jmp	#LR__0485
06b0c     2F 67 02 F6 | 	mov	local06, local02
06b10     09 66 46 F0 | 	shr	local06, #9
06b14     18 5C 06 F1 | 	add	local01, #24
06b18     2E 65 02 FB | 	rdlong	local05, local01
06b1c     33 65 02 F1 | 	add	local05, local06
06b20     2E 65 62 FC | 	wrlong	local05, local01
06b24     30 60 06 F1 | 	add	local03, #48
06b28     30 65 02 F6 | 	mov	local05, local03
06b2c     2F 6B 02 F6 | 	mov	local08, local02
06b30     FF 6B 06 F5 | 	and	local08, #511
06b34     35 65 02 F1 | 	add	local05, local08
06b38     04 5C 06 F1 | 	add	local01, #4
06b3c     2E 65 62 FC | 	wrlong	local05, local01
06b40                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
06b40                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
06b40                 | ' 
06b40                 | ' 	return FR_OK;
06b40     00 2C 06 F6 | 	mov	result1, #0
06b44                 | LR__0485
06b44     AF F0 03 F6 | 	mov	ptra, fp
06b48     BF 00 A0 FD | 	call	#popregs_
06b4c                 | _ff_cc_dir_sdi_0261_ret
06b4c     2D 00 64 FD | 	ret
06b50                 | 
06b50                 | _ff_cc_dir_next_0265
06b50     08 5A 05 F6 | 	mov	COUNT_, #8
06b54     B0 00 A0 FD | 	call	#pushregs_
06b58     29 5D 02 F6 | 	mov	local01, arg01
06b5c     2A 5F 02 F6 | 	mov	local02, arg02
06b60     2E 61 02 FB | 	rdlong	local03, local01
06b64     10 5C 06 F1 | 	add	local01, #16
06b68     2E 63 02 FB | 	rdlong	local04, local01
06b6c     10 5C 86 F1 | 	sub	local01, #16
06b70     20 62 06 F1 | 	add	local04, #32
06b74     00 10 00 FF 
06b78     00 62 1E F2 | 	cmp	local04, ##2097152 wcz
06b7c     18 5C 06 31 |  if_ae	add	local01, #24
06b80     2E 01 68 3C |  if_ae	wrlong	#0, local01
06b84     18 5C 86 31 |  if_ae	sub	local01, #24
06b88     18 5C 06 F1 | 	add	local01, #24
06b8c     2E 65 0A FB | 	rdlong	local05, local01 wz
06b90     18 5C 86 F1 | 	sub	local01, #24
06b94     04 2C 06 A6 |  if_e	mov	result1, #4
06b98     7C 01 90 AD |  if_e	jmp	#LR__0492
06b9c     FF 63 CE F7 | 	test	local04, #511 wz
06ba0     4C 01 90 5D |  if_ne	jmp	#LR__0491
06ba4     18 5C 06 F1 | 	add	local01, #24
06ba8     2E 67 02 FB | 	rdlong	local06, local01
06bac     01 66 06 F1 | 	add	local06, #1
06bb0     2E 67 62 FC | 	wrlong	local06, local01
06bb4     04 5C 86 F1 | 	sub	local01, #4
06bb8     2E 65 0A FB | 	rdlong	local05, local01 wz
06bbc     14 5C 86 F1 | 	sub	local01, #20
06bc0     30 00 90 5D |  if_ne	jmp	#LR__0486
06bc4     31 65 02 F6 | 	mov	local05, local04
06bc8     05 64 46 F0 | 	shr	local05, #5
06bcc     08 60 06 F1 | 	add	local03, #8
06bd0     30 69 E2 FA | 	rdword	local07, local03
06bd4     08 60 86 F1 | 	sub	local03, #8
06bd8     0F 68 46 F7 | 	zerox	local07, #15
06bdc     34 65 1A F2 | 	cmp	local05, local07 wcz
06be0     0C 01 90 CD |  if_b	jmp	#LR__0490
06be4     18 5C 06 F1 | 	add	local01, #24
06be8     2E 01 68 FC | 	wrlong	#0, local01
06bec                 | ' 				dp->sect = 0; return FR_NO_FILE;
06bec     04 2C 06 F6 | 	mov	result1, #4
06bf0     24 01 90 FD | 	jmp	#LR__0492
06bf4                 | LR__0486
06bf4     31 65 02 F6 | 	mov	local05, local04
06bf8     09 64 46 F0 | 	shr	local05, #9
06bfc     0A 60 06 F1 | 	add	local03, #10
06c00     30 69 E2 FA | 	rdword	local07, local03
06c04     0A 60 86 F1 | 	sub	local03, #10
06c08     0F 68 46 F7 | 	zerox	local07, #15
06c0c     01 68 86 F1 | 	sub	local07, #1
06c10     34 65 CA F7 | 	test	local05, local07 wz
06c14     D8 00 90 5D |  if_ne	jmp	#LR__0489
06c18     2E 53 02 F6 | 	mov	arg01, local01
06c1c     14 5C 06 F1 | 	add	local01, #20
06c20     2E 55 02 FB | 	rdlong	arg02, local01
06c24     14 5C 86 F1 | 	sub	local01, #20
06c28     7C F4 BF FD | 	call	#_ff_cc_get_fat_0238
06c2c     16 6B 02 F6 | 	mov	local08, result1
06c30     01 6A 1E F2 | 	cmp	local08, #1 wcz
06c34     02 2C 06 E6 |  if_be	mov	result1, #2
06c38     DC 00 90 ED |  if_be	jmp	#LR__0492
06c3c     FF FF 7F FF 
06c40     FF 6B 0E F2 | 	cmp	local08, ##-1 wz
06c44     01 2C 06 A6 |  if_e	mov	result1, #1
06c48     CC 00 90 AD |  if_e	jmp	#LR__0492
06c4c     14 60 06 F1 | 	add	local03, #20
06c50     30 65 02 FB | 	rdlong	local05, local03
06c54     14 60 86 F1 | 	sub	local03, #20
06c58     32 6B 1A F2 | 	cmp	local08, local05 wcz
06c5c     6C 00 90 CD |  if_b	jmp	#LR__0488
06c60     00 5E 0E F2 | 	cmp	local02, #0 wz
06c64     10 00 90 5D |  if_ne	jmp	#LR__0487
06c68     18 5C 06 F1 | 	add	local01, #24
06c6c     2E 01 68 FC | 	wrlong	#0, local01
06c70                 | ' 						dp->sect = 0; return FR_NO_FILE;
06c70     04 2C 06 F6 | 	mov	result1, #4
06c74     A0 00 90 FD | 	jmp	#LR__0492
06c78                 | LR__0487
06c78     2E 53 02 F6 | 	mov	arg01, local01
06c7c     14 5C 06 F1 | 	add	local01, #20
06c80     2E 55 02 FB | 	rdlong	arg02, local01
06c84     14 5C 86 F1 | 	sub	local01, #20
06c88     FC F9 BF FD | 	call	#_ff_cc_create_chain_0252
06c8c     16 6B 0A F6 | 	mov	local08, result1 wz
06c90     07 2C 06 A6 |  if_e	mov	result1, #7
06c94     80 00 90 AD |  if_e	jmp	#LR__0492
06c98     01 6A 0E F2 | 	cmp	local08, #1 wz
06c9c     02 2C 06 A6 |  if_e	mov	result1, #2
06ca0     74 00 90 AD |  if_e	jmp	#LR__0492
06ca4     FF FF 7F FF 
06ca8     FF 6B 0E F2 | 	cmp	local08, ##-1 wz
06cac     01 2C 06 A6 |  if_e	mov	result1, #1
06cb0     64 00 90 AD |  if_e	jmp	#LR__0492
06cb4     30 53 02 F6 | 	mov	arg01, local03
06cb8     35 55 02 F6 | 	mov	arg02, local08
06cbc     2C FC BF FD | 	call	#_ff_cc_dir_clear_0257
06cc0     00 2C 0E F2 | 	cmp	result1, #0 wz
06cc4     01 2C 06 56 |  if_ne	mov	result1, #1
06cc8     4C 00 90 5D |  if_ne	jmp	#LR__0492
06ccc                 | LR__0488
06ccc     14 5C 06 F1 | 	add	local01, #20
06cd0     2E 6B 62 FC | 	wrlong	local08, local01
06cd4     14 5C 86 F1 | 	sub	local01, #20
06cd8     30 53 02 F6 | 	mov	arg01, local03
06cdc     35 55 02 F6 | 	mov	arg02, local08
06ce0     84 F3 BF FD | 	call	#_ff_cc_clst2sect_0233
06ce4     18 5C 06 F1 | 	add	local01, #24
06ce8     2E 2D 62 FC | 	wrlong	result1, local01
06cec     18 5C 86 F1 | 	sub	local01, #24
06cf0                 | LR__0489
06cf0                 | LR__0490
06cf0                 | LR__0491
06cf0     10 5C 06 F1 | 	add	local01, #16
06cf4     2E 63 62 FC | 	wrlong	local04, local01
06cf8     30 60 06 F1 | 	add	local03, #48
06cfc     30 65 02 F6 | 	mov	local05, local03
06d00     31 67 02 F6 | 	mov	local06, local04
06d04     FF 67 06 F5 | 	and	local06, #511
06d08     33 65 02 F1 | 	add	local05, local06
06d0c     0C 5C 06 F1 | 	add	local01, #12
06d10     2E 65 62 FC | 	wrlong	local05, local01
06d14                 | ' #line 1802 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
06d14                 | ' 				}
06d14                 | ' 				dp->clust = clst;
06d14                 | ' 				dp->sect = clst2sect(fs, clst);
06d14                 | ' 			}
06d14                 | ' 		}
06d14                 | ' 	}
06d14                 | ' 	dp->dptr = ofs;
06d14                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
06d14                 | ' 
06d14                 | ' 	return FR_OK;
06d14     00 2C 06 F6 | 	mov	result1, #0
06d18                 | LR__0492
06d18     AF F0 03 F6 | 	mov	ptra, fp
06d1c     BF 00 A0 FD | 	call	#popregs_
06d20                 | _ff_cc_dir_next_0265_ret
06d20     2D 00 64 FD | 	ret
06d24                 | 
06d24                 | _ff_cc_dir_alloc_0269
06d24     0B 5A 05 F6 | 	mov	COUNT_, #11
06d28     B0 00 A0 FD | 	call	#pushregs_
06d2c     29 5D 02 F6 | 	mov	local01, arg01
06d30     2A 5F 02 F6 | 	mov	local02, arg02
06d34     2E 61 02 FB | 	rdlong	local03, local01
06d38     2E 53 02 F6 | 	mov	arg01, local01
06d3c     00 54 06 F6 | 	mov	arg02, #0
06d40     80 FC BF FD | 	call	#_ff_cc_dir_sdi_0261
06d44     16 63 0A F6 | 	mov	local04, result1 wz
06d48     88 00 90 5D |  if_ne	jmp	#LR__0498
06d4c     00 64 06 F6 | 	mov	local05, #0
06d50                 | ' 		n = 0;
06d50                 | ' 		do {
06d50                 | LR__0493
06d50     30 53 02 F6 | 	mov	arg01, local03
06d54     18 5C 06 F1 | 	add	local01, #24
06d58     2E 55 02 FB | 	rdlong	arg02, local01
06d5c     18 5C 86 F1 | 	sub	local01, #24
06d60     14 F1 BF FD | 	call	#_ff_cc_move_window_0230
06d64     16 67 02 F6 | 	mov	local06, result1
06d68     33 63 0A F6 | 	mov	local04, local06 wz
06d6c     64 00 90 5D |  if_ne	jmp	#LR__0497
06d70     1C 5C 06 F1 | 	add	local01, #28
06d74     2E 69 02 FB | 	rdlong	local07, local01
06d78     1C 5C 86 F1 | 	sub	local01, #28
06d7c     34 6B C2 FA | 	rdbyte	local08, local07
06d80     E5 6A 0E F2 | 	cmp	local08, #229 wz
06d84     18 00 90 AD |  if_e	jmp	#LR__0494
06d88     1C 5C 06 F1 | 	add	local01, #28
06d8c     2E 6D 02 FB | 	rdlong	local09, local01
06d90     1C 5C 86 F1 | 	sub	local01, #28
06d94     36 6F 02 F6 | 	mov	local10, local09
06d98     37 67 CA FA | 	rdbyte	local06, local10 wz
06d9c     10 00 90 5D |  if_ne	jmp	#LR__0495
06da0                 | LR__0494
06da0     01 64 06 F1 | 	add	local05, #1
06da4     2F 65 0A F2 | 	cmp	local05, local02 wz
06da8     28 00 90 AD |  if_e	jmp	#LR__0497
06dac     04 00 90 FD | 	jmp	#LR__0496
06db0                 | LR__0495
06db0     00 64 06 F6 | 	mov	local05, #0
06db4                 | LR__0496
06db4     2E 6B 02 F6 | 	mov	local08, local01
06db8     01 68 06 F6 | 	mov	local07, #1
06dbc     35 53 02 F6 | 	mov	arg01, local08
06dc0     01 54 06 F6 | 	mov	arg02, #1
06dc4     88 FD BF FD | 	call	#_ff_cc_dir_next_0265
06dc8     16 71 02 F6 | 	mov	local11, result1
06dcc     38 63 0A F6 | 	mov	local04, local11 wz
06dd0     7C FF 9F AD |  if_e	jmp	#LR__0493
06dd4                 | LR__0497
06dd4                 | LR__0498
06dd4     04 62 0E F2 | 	cmp	local04, #4 wz
06dd8     07 62 06 A6 |  if_e	mov	local04, #7
06ddc                 | ' 	return res;
06ddc     31 2D 02 F6 | 	mov	result1, local04
06de0     AF F0 03 F6 | 	mov	ptra, fp
06de4     BF 00 A0 FD | 	call	#popregs_
06de8                 | _ff_cc_dir_alloc_0269_ret
06de8     2D 00 64 FD | 	ret
06dec                 | 
06dec                 | _ff_cc_ld_clust_0271
06dec     04 5A 05 F6 | 	mov	COUNT_, #4
06df0     B0 00 A0 FD | 	call	#pushregs_
06df4     29 5D 02 F6 | 	mov	local01, arg01
06df8     2A 5F 02 F6 | 	mov	local02, arg02
06dfc     2F 53 02 F6 | 	mov	arg01, local02
06e00     1A 52 06 F1 | 	add	arg01, #26
06e04     54 EE BF FD | 	call	#_ff_cc_ld_word_0210
06e08     16 61 02 F6 | 	mov	local03, result1
06e0c     0F 60 46 F7 | 	zerox	local03, #15
06e10     2E 63 C2 FA | 	rdbyte	local04, local01
06e14     03 62 0E F2 | 	cmp	local04, #3 wz
06e18     18 00 90 5D |  if_ne	jmp	#LR__0499
06e1c     14 5E 06 F1 | 	add	local02, #20
06e20     2F 53 02 F6 | 	mov	arg01, local02
06e24     34 EE BF FD | 	call	#_ff_cc_ld_word_0210
06e28     0F 2C 46 F7 | 	zerox	result1, #15
06e2c     10 2C 66 F0 | 	shl	result1, #16
06e30     16 61 42 F5 | 	or	local03, result1
06e34                 | LR__0499
06e34                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
06e34                 | ' 	}
06e34                 | ' 
06e34                 | ' 	return cl;
06e34     30 2D 02 F6 | 	mov	result1, local03
06e38     AF F0 03 F6 | 	mov	ptra, fp
06e3c     BF 00 A0 FD | 	call	#popregs_
06e40                 | _ff_cc_ld_clust_0271_ret
06e40     2D 00 64 FD | 	ret
06e44                 | 
06e44                 | _ff_cc_st_clust_0272
06e44     04 5A 05 F6 | 	mov	COUNT_, #4
06e48     B0 00 A0 FD | 	call	#pushregs_
06e4c     29 5D 02 F6 | 	mov	local01, arg01
06e50     2A 5F 02 F6 | 	mov	local02, arg02
06e54     2B 61 02 F6 | 	mov	local03, arg03
06e58     2F 53 02 F6 | 	mov	arg01, local02
06e5c     1A 52 06 F1 | 	add	arg01, #26
06e60     30 55 02 F6 | 	mov	arg02, local03
06e64     58 EE BF FD | 	call	#_ff_cc_st_word_0213
06e68     2E 63 C2 FA | 	rdbyte	local04, local01
06e6c     03 62 0E F2 | 	cmp	local04, #3 wz
06e70     14 00 90 5D |  if_ne	jmp	#LR__0500
06e74     14 5E 06 F1 | 	add	local02, #20
06e78     10 60 46 F0 | 	shr	local03, #16
06e7c     2F 53 02 F6 | 	mov	arg01, local02
06e80     30 55 02 F6 | 	mov	arg02, local03
06e84     38 EE BF FD | 	call	#_ff_cc_st_word_0213
06e88                 | LR__0500
06e88     AF F0 03 F6 | 	mov	ptra, fp
06e8c     BF 00 A0 FD | 	call	#popregs_
06e90                 | _ff_cc_st_clust_0272_ret
06e90     2D 00 64 FD | 	ret
06e94                 | 
06e94                 | _ff_cc_dir_read_0277
06e94     0B 5A 05 F6 | 	mov	COUNT_, #11
06e98     B0 00 A0 FD | 	call	#pushregs_
06e9c     29 5D 02 F6 | 	mov	local01, arg01
06ea0     2A 5F 02 F6 | 	mov	local02, arg02
06ea4     04 60 06 F6 | 	mov	local03, #4
06ea8     2E 63 02 FB | 	rdlong	local04, local01
06eac                 | ' )
06eac                 | ' {
06eac                 | ' 	FRESULT res = FR_NO_FILE;
06eac                 | ' 	FATFS *fs = dp->obj.fs;
06eac                 | ' 	BYTE attr, b;
06eac                 | ' #line 2376 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
06eac                 | ' 	while (dp->sect) {
06eac                 | LR__0501
06eac     18 5C 06 F1 | 	add	local01, #24
06eb0     2E 65 0A FB | 	rdlong	local05, local01 wz
06eb4     18 5C 86 F1 | 	sub	local01, #24
06eb8     C0 00 90 AD |  if_e	jmp	#LR__0503
06ebc     31 53 02 F6 | 	mov	arg01, local04
06ec0     18 5C 06 F1 | 	add	local01, #24
06ec4     2E 55 02 FB | 	rdlong	arg02, local01
06ec8     18 5C 86 F1 | 	sub	local01, #24
06ecc     A8 EF BF FD | 	call	#_ff_cc_move_window_0230
06ed0     16 61 0A F6 | 	mov	local03, result1 wz
06ed4     A4 00 90 5D |  if_ne	jmp	#LR__0503
06ed8     1C 5C 06 F1 | 	add	local01, #28
06edc     2E 65 02 FB | 	rdlong	local05, local01
06ee0     1C 5C 86 F1 | 	sub	local01, #28
06ee4     32 67 C2 FA | 	rdbyte	local06, local05
06ee8     33 65 02 F6 | 	mov	local05, local06
06eec     07 64 4E F7 | 	zerox	local05, #7 wz
06ef0     04 60 06 A6 |  if_e	mov	local03, #4
06ef4                 | ' 			res = FR_NO_FILE; break;
06ef4     84 00 90 AD |  if_e	jmp	#LR__0503
06ef8     1C 5C 06 F1 | 	add	local01, #28
06efc     2E 69 02 FB | 	rdlong	local07, local01
06f00     0B 68 06 F1 | 	add	local07, #11
06f04     34 6B C2 FA | 	rdbyte	local08, local07
06f08     3F 6A 06 F5 | 	and	local08, #63
06f0c     16 5C 86 F1 | 	sub	local01, #22
06f10     2E 6B 42 FC | 	wrbyte	local08, local01
06f14     06 5C 86 F1 | 	sub	local01, #6
06f18     33 65 02 F6 | 	mov	local05, local06
06f1c     07 64 46 F7 | 	zerox	local05, #7
06f20     E5 64 0E F2 | 	cmp	local05, #229 wz
06f24     40 00 90 AD |  if_e	jmp	#LR__0502
06f28     33 69 02 F6 | 	mov	local07, local06
06f2c     07 68 46 F7 | 	zerox	local07, #7
06f30     2E 68 0E F2 | 	cmp	local07, #46 wz
06f34     30 00 90 AD |  if_e	jmp	#LR__0502
06f38     35 6D 02 F6 | 	mov	local09, local08
06f3c     07 6C 46 F7 | 	zerox	local09, #7
06f40     0F 6C 0E F2 | 	cmp	local09, #15 wz
06f44     20 00 90 AD |  if_e	jmp	#LR__0502
06f48     00 6E 06 F6 | 	mov	local10, #0
06f4c     35 71 02 F6 | 	mov	local11, local08
06f50     07 70 46 F7 | 	zerox	local11, #7
06f54     20 70 26 F5 | 	andn	local11, #32
06f58     08 70 0E F2 | 	cmp	local11, #8 wz
06f5c     01 6E 06 A6 |  if_e	mov	local10, #1
06f60     2F 6F 0A F2 | 	cmp	local10, local02 wz
06f64                 | ' 				break;
06f64     14 00 90 AD |  if_e	jmp	#LR__0503
06f68                 | LR__0502
06f68     2E 53 02 F6 | 	mov	arg01, local01
06f6c     00 54 06 F6 | 	mov	arg02, #0
06f70     DC FB BF FD | 	call	#_ff_cc_dir_next_0265
06f74     16 61 0A F6 | 	mov	local03, result1 wz
06f78     30 FF 9F AD |  if_e	jmp	#LR__0501
06f7c                 | LR__0503
06f7c     00 60 0E F2 | 	cmp	local03, #0 wz
06f80     18 5C 06 51 |  if_ne	add	local01, #24
06f84     2E 01 68 5C |  if_ne	wrlong	#0, local01
06f88                 | ' 	return res;
06f88     30 2D 02 F6 | 	mov	result1, local03
06f8c     AF F0 03 F6 | 	mov	ptra, fp
06f90     BF 00 A0 FD | 	call	#popregs_
06f94                 | _ff_cc_dir_read_0277_ret
06f94     2D 00 64 FD | 	ret
06f98                 | 
06f98                 | _ff_cc_dir_find_0281
06f98     0E 5A 05 F6 | 	mov	COUNT_, #14
06f9c     B0 00 A0 FD | 	call	#pushregs_
06fa0     29 5D 02 F6 | 	mov	local01, arg01
06fa4     2E 5F 02 FB | 	rdlong	local02, local01
06fa8     2E 53 02 F6 | 	mov	arg01, local01
06fac     00 54 06 F6 | 	mov	arg02, #0
06fb0     10 FA BF FD | 	call	#_ff_cc_dir_sdi_0261
06fb4     00 2C 0E F2 | 	cmp	result1, #0 wz
06fb8     D8 00 90 5D |  if_ne	jmp	#LR__0507
06fbc                 | ' #line 2479 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
06fbc                 | ' 	do {
06fbc                 | LR__0504
06fbc     2F 53 02 F6 | 	mov	arg01, local02
06fc0     18 5C 06 F1 | 	add	local01, #24
06fc4     2E 55 02 FB | 	rdlong	arg02, local01
06fc8     18 5C 86 F1 | 	sub	local01, #24
06fcc     A8 EE BF FD | 	call	#_ff_cc_move_window_0230
06fd0     16 61 0A F6 | 	mov	local03, result1 wz
06fd4     B8 00 90 5D |  if_ne	jmp	#LR__0506
06fd8     1C 5C 06 F1 | 	add	local01, #28
06fdc     2E 63 02 FB | 	rdlong	local04, local01
06fe0     1C 5C 86 F1 | 	sub	local01, #28
06fe4     31 65 C2 FA | 	rdbyte	local05, local04
06fe8     32 63 02 F6 | 	mov	local04, local05
06fec     07 62 4E F7 | 	zerox	local04, #7 wz
06ff0     04 60 06 A6 |  if_e	mov	local03, #4
06ff4     98 00 90 AD |  if_e	jmp	#LR__0506
06ff8     1C 5C 06 F1 | 	add	local01, #28
06ffc     2E 67 02 FB | 	rdlong	local06, local01
07000     0B 66 06 F1 | 	add	local06, #11
07004     33 63 C2 FA | 	rdbyte	local04, local06
07008     3F 62 06 F5 | 	and	local04, #63
0700c     16 5C 86 F1 | 	sub	local01, #22
07010     2E 63 42 FC | 	wrbyte	local04, local01
07014     16 5C 06 F1 | 	add	local01, #22
07018     2E 67 02 FB | 	rdlong	local06, local01
0701c     1C 5C 86 F1 | 	sub	local01, #28
07020     0B 66 06 F1 | 	add	local06, #11
07024     33 69 C2 FA | 	rdbyte	local07, local06
07028     34 63 02 F6 | 	mov	local04, local07
0702c     07 62 46 F7 | 	zerox	local04, #7
07030     08 62 CE F7 | 	test	local04, #8 wz
07034     38 00 90 5D |  if_ne	jmp	#LR__0505
07038     1C 5C 06 F1 | 	add	local01, #28
0703c     2E 6B 02 FB | 	rdlong	local08, local01
07040     35 6D 02 F6 | 	mov	local09, local08
07044     04 5C 06 F1 | 	add	local01, #4
07048     2E 6F 02 F6 | 	mov	local10, local01
0704c     37 71 02 F6 | 	mov	local11, local10
07050     0B 72 06 F6 | 	mov	local12, #11
07054     36 53 02 F6 | 	mov	arg01, local09
07058     38 55 02 F6 | 	mov	arg02, local11
0705c     0B 56 06 F6 | 	mov	arg03, #11
07060     20 5C 86 F1 | 	sub	local01, #32
07064     D8 EC BF FD | 	call	#_ff_cc_mem_cmp_0223
07068     16 75 0A F6 | 	mov	local13, result1 wz
0706c     20 00 90 AD |  if_e	jmp	#LR__0506
07070                 | LR__0505
07070     2E 63 02 F6 | 	mov	local04, local01
07074     00 66 06 F6 | 	mov	local06, #0
07078     31 53 02 F6 | 	mov	arg01, local04
0707c     00 54 06 F6 | 	mov	arg02, #0
07080     CC FA BF FD | 	call	#_ff_cc_dir_next_0265
07084     16 77 02 F6 | 	mov	local14, result1
07088     3B 61 0A F6 | 	mov	local03, local14 wz
0708c     2C FF 9F AD |  if_e	jmp	#LR__0504
07090                 | LR__0506
07090                 | ' 
07090                 | ' 	return res;
07090     30 2D 02 F6 | 	mov	result1, local03
07094                 | LR__0507
07094     AF F0 03 F6 | 	mov	ptra, fp
07098     BF 00 A0 FD | 	call	#popregs_
0709c                 | _ff_cc_dir_find_0281_ret
0709c     2D 00 64 FD | 	ret
070a0                 | 
070a0                 | _ff_cc_dir_register_0284
070a0     03 5A 05 F6 | 	mov	COUNT_, #3
070a4     B0 00 A0 FD | 	call	#pushregs_
070a8     29 5D 02 F6 | 	mov	local01, arg01
070ac     2E 5F 02 FB | 	rdlong	local02, local01
070b0     2E 53 02 F6 | 	mov	arg01, local01
070b4     01 54 06 F6 | 	mov	arg02, #1
070b8     68 FC BF FD | 	call	#_ff_cc_dir_alloc_0269
070bc     16 61 0A F6 | 	mov	local03, result1 wz
070c0     60 00 90 5D |  if_ne	jmp	#LR__0513
070c4     18 5C 06 F1 | 	add	local01, #24
070c8     2E 55 02 FB | 	rdlong	arg02, local01
070cc     18 5C 86 F1 | 	sub	local01, #24
070d0     2F 53 02 F6 | 	mov	arg01, local02
070d4     A0 ED BF FD | 	call	#_ff_cc_move_window_0230
070d8     16 61 0A F6 | 	mov	local03, result1 wz
070dc     44 00 90 5D |  if_ne	jmp	#LR__0512
070e0     1C 5C 06 F1 | 	add	local01, #28
070e4     2E 53 02 FB | 	rdlong	arg01, local01
070e8     1C 5C 86 F1 | 	sub	local01, #28
070ec     00 54 06 F6 | 	mov	arg02, #0
070f0                 | ' {
070f0                 | ' 	BYTE *d = (BYTE*)dst;
070f0                 | ' 
070f0                 | ' 	do {
070f0     18 8F 9F FE | 	loc	pa,	#(@LR__0510-@LR__0508)
070f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
070f8                 | LR__0508
070f8     20 04 DC FC | 	rep	@LR__0511, #32
070fc                 | LR__0509
070fc     29 55 42 FC | 	wrbyte	arg02, arg01
07100     01 52 06 F1 | 	add	arg01, #1
07104                 | LR__0510
07104                 | LR__0511
07104     20 5C 06 F1 | 	add	local01, #32
07108     2E 55 02 F6 | 	mov	arg02, local01
0710c     04 5C 86 F1 | 	sub	local01, #4
07110     2E 53 02 FB | 	rdlong	arg01, local01
07114     0B 56 06 F6 | 	mov	arg03, #11
07118     F4 EB BF FD | 	call	#_ff_cc_mem_cpy_0217
0711c     03 5E 06 F1 | 	add	local02, #3
07120     2F 03 48 FC | 	wrbyte	#1, local02
07124                 | LR__0512
07124                 | LR__0513
07124                 | ' 			mem_set(dp->dir, 0,  32 );
07124                 | ' 			mem_cpy(dp->dir +  0 , dp->fn, 11);
07124                 | ' #line 2613 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
07124                 | ' 			fs->wflag = 1;
07124                 | ' 		}
07124                 | ' 	}
07124                 | ' 
07124                 | ' 	return res;
07124     30 2D 02 F6 | 	mov	result1, local03
07128     AF F0 03 F6 | 	mov	ptra, fp
0712c     BF 00 A0 FD | 	call	#popregs_
07130                 | _ff_cc_dir_register_0284_ret
07130     2D 00 64 FD | 	ret
07134                 | 
07134                 | _ff_cc_dir_remove_0287
07134     04 5A 05 F6 | 	mov	COUNT_, #4
07138     B0 00 A0 FD | 	call	#pushregs_
0713c     29 5D 02 F6 | 	mov	local01, arg01
07140     2E 5F 02 FB | 	rdlong	local02, local01
07144     18 5C 06 F1 | 	add	local01, #24
07148     2E 55 02 FB | 	rdlong	arg02, local01
0714c     18 5C 86 F1 | 	sub	local01, #24
07150     2F 53 02 F6 | 	mov	arg01, local02
07154     20 ED BF FD | 	call	#_ff_cc_move_window_0230
07158     16 61 0A F6 | 	mov	local03, result1 wz
0715c     14 00 90 5D |  if_ne	jmp	#LR__0514
07160     1C 5C 06 F1 | 	add	local01, #28
07164     2E 63 02 FB | 	rdlong	local04, local01
07168     31 CB 49 FC | 	wrbyte	#229, local04
0716c     03 5E 06 F1 | 	add	local02, #3
07170     2F 03 48 FC | 	wrbyte	#1, local02
07174                 | LR__0514
07174                 | ' 		dp->dir[ 0 ] =  0xE5 ;
07174                 | ' 		fs->wflag = 1;
07174                 | ' 	}
07174                 | ' 
07174                 | ' 
07174                 | ' 	return res;
07174     30 2D 02 F6 | 	mov	result1, local03
07178     AF F0 03 F6 | 	mov	ptra, fp
0717c     BF 00 A0 FD | 	call	#popregs_
07180                 | _ff_cc_dir_remove_0287_ret
07180     2D 00 64 FD | 	ret
07184                 | 
07184                 | _ff_cc_get_fileinfo_0291
07184     0B 5A 05 F6 | 	mov	COUNT_, #11
07188     B0 00 A0 FD | 	call	#pushregs_
0718c     29 5D 02 F6 | 	mov	local01, arg01
07190     2A 5F 02 F6 | 	mov	local02, arg02
07194     0C 5E 06 F1 | 	add	local02, #12
07198     2F 01 48 FC | 	wrbyte	#0, local02
0719c     0C 5E 86 F1 | 	sub	local02, #12
071a0     18 5C 06 F1 | 	add	local01, #24
071a4     2E 61 02 FB | 	rdlong	local03, local01
071a8     18 5C 86 F1 | 	sub	local01, #24
071ac     30 63 0A F6 | 	mov	local04, local03 wz
071b0     00 01 90 AD |  if_e	jmp	#LR__0518
071b4     00 64 06 F6 | 	mov	local05, #0
071b8     00 66 06 F6 | 	mov	local06, #0
071bc                 | ' #line 2755 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
071bc                 | ' 	si = di = 0;
071bc                 | ' 	while (si < 11) {
071bc                 | LR__0515
071bc     0B 66 1E F2 | 	cmp	local06, #11 wcz
071c0     78 00 90 3D |  if_ae	jmp	#LR__0517
071c4     1C 5C 06 F1 | 	add	local01, #28
071c8     2E 69 02 FB | 	rdlong	local07, local01
071cc     1C 5C 86 F1 | 	sub	local01, #28
071d0     33 6B 02 F6 | 	mov	local08, local06
071d4     34 6B 02 F1 | 	add	local08, local07
071d8     35 6D C2 FA | 	rdbyte	local09, local08
071dc     36 63 02 F6 | 	mov	local04, local09
071e0     07 62 46 F7 | 	zerox	local04, #7
071e4     20 62 0E F2 | 	cmp	local04, #32 wz
071e8     01 66 06 F1 | 	add	local06, #1
071ec     CC FF 9F AD |  if_e	jmp	#LR__0515
071f0     36 63 02 F6 | 	mov	local04, local09
071f4     07 62 46 F7 | 	zerox	local04, #7
071f8     05 62 0E F2 | 	cmp	local04, #5 wz
071fc     E5 6C 06 A6 |  if_e	mov	local09, #229
07200     09 66 0E F2 | 	cmp	local06, #9 wz
07204     18 00 90 5D |  if_ne	jmp	#LR__0516
07208     32 6F 02 F6 | 	mov	local10, local05
0720c     0C 5E 06 F1 | 	add	local02, #12
07210     2F 6F 02 F1 | 	add	local10, local02
07214     37 5D 48 FC | 	wrbyte	#46, local10
07218     01 64 06 F1 | 	add	local05, #1
0721c     0C 5E 86 F1 | 	sub	local02, #12
07220                 | LR__0516
07220     32 6F 02 F6 | 	mov	local10, local05
07224     0C 5E 06 F1 | 	add	local02, #12
07228     2F 6F 02 F1 | 	add	local10, local02
0722c     37 6D 42 FC | 	wrbyte	local09, local10
07230     01 64 06 F1 | 	add	local05, #1
07234     0C 5E 86 F1 | 	sub	local02, #12
07238     80 FF 9F FD | 	jmp	#LR__0515
0723c                 | LR__0517
0723c     0C 5E 06 F1 | 	add	local02, #12
07240     2F 65 02 F1 | 	add	local05, local02
07244     32 01 48 FC | 	wrbyte	#0, local05
07248     1C 5C 06 F1 | 	add	local01, #28
0724c     2E 63 02 FB | 	rdlong	local04, local01
07250     0B 62 06 F1 | 	add	local04, #11
07254     31 6F C2 FA | 	rdbyte	local10, local04
07258     04 5E 86 F1 | 	sub	local02, #4
0725c     2F 6F 42 FC | 	wrbyte	local10, local02
07260     08 5E 86 F1 | 	sub	local02, #8
07264     2E 53 02 FB | 	rdlong	arg01, local01
07268     1C 5C 86 F1 | 	sub	local01, #28
0726c     1C 52 06 F1 | 	add	arg01, #28
07270     0C EA BF FD | 	call	#_ff_cc_ld_dword_0212
07274     2F 2D 62 FC | 	wrlong	result1, local02
07278     1C 5C 06 F1 | 	add	local01, #28
0727c     2E 53 02 FB | 	rdlong	arg01, local01
07280     1C 5C 86 F1 | 	sub	local01, #28
07284     16 52 06 F1 | 	add	arg01, #22
07288     D0 E9 BF FD | 	call	#_ff_cc_ld_word_0210
0728c     16 71 02 F6 | 	mov	local11, result1
07290     06 5E 06 F1 | 	add	local02, #6
07294     2F 71 52 FC | 	wrword	local11, local02
07298     06 5E 86 F1 | 	sub	local02, #6
0729c     1C 5C 06 F1 | 	add	local01, #28
072a0     2E 53 02 FB | 	rdlong	arg01, local01
072a4     18 52 06 F1 | 	add	arg01, #24
072a8     B0 E9 BF FD | 	call	#_ff_cc_ld_word_0210
072ac     04 5E 06 F1 | 	add	local02, #4
072b0     2F 2D 52 FC | 	wrword	result1, local02
072b4                 | LR__0518
072b4     AF F0 03 F6 | 	mov	ptra, fp
072b8     BF 00 A0 FD | 	call	#popregs_
072bc                 | _ff_cc_get_fileinfo_0291_ret
072bc     2D 00 64 FD | 	ret
072c0                 | 
072c0                 | _ff_cc_create_name_0299
072c0     18 5A 05 F6 | 	mov	COUNT_, #24
072c4     B0 00 A0 FD | 	call	#pushregs_
072c8     29 5D 02 F6 | 	mov	local01, arg01
072cc     2A 5F 02 F6 | 	mov	local02, arg02
072d0     2F 61 02 FB | 	rdlong	local03, local02
072d4     20 5C 06 F1 | 	add	local01, #32
072d8     2E 63 02 F6 | 	mov	local04, local01
072dc     31 65 02 F6 | 	mov	local05, local04
072e0     32 53 02 F6 | 	mov	arg01, local05
072e4     20 54 06 F6 | 	mov	arg02, #32
072e8     0B 56 06 F6 | 	mov	arg03, #11
072ec     20 5C 86 F1 | 	sub	local01, #32
072f0                 | ' {
072f0                 | ' 	BYTE *d = (BYTE*)dst;
072f0                 | ' 
072f0                 | ' 	do {
072f0     18 8D 9F FE | 	loc	pa,	#(@LR__0521-@LR__0519)
072f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
072f8                 | LR__0519
072f8     0B 04 DC FC | 	rep	@LR__0522, #11
072fc                 | LR__0520
072fc     29 55 42 FC | 	wrbyte	arg02, arg01
07300     01 52 06 F1 | 	add	arg01, #1
07304                 | LR__0521
07304                 | LR__0522
07304     00 66 06 F6 | 	mov	local06, #0
07308     00 68 06 F6 | 	mov	local07, #0
0730c     08 6A 06 F6 | 	mov	local08, #8
07310                 | ' 
07310                 | ' 
07310                 | ' 	p = *path; sfn = dp->fn;
07310                 | ' 	mem_set(sfn, ' ', 11);
07310                 | ' 	si = i = 0; ni = 8;
07310                 | ' #line 3011 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
07310                 | ' 	for (;;) {
07310                 | LR__0523
07310     34 6D 02 F6 | 	mov	local09, local07
07314     30 6D 02 F1 | 	add	local09, local03
07318     36 6F C2 FA | 	rdbyte	local10, local09
0731c     37 71 02 F6 | 	mov	local11, local10
07320     07 70 46 F7 | 	zerox	local11, #7
07324     20 70 1E F2 | 	cmp	local11, #32 wcz
07328     01 68 06 F1 | 	add	local07, #1
0732c     B4 01 90 ED |  if_be	jmp	#LR__0537
07330     37 71 02 F6 | 	mov	local11, local10
07334     07 70 46 F7 | 	zerox	local11, #7
07338     2F 70 0E F2 | 	cmp	local11, #47 wz
0733c     10 00 90 AD |  if_e	jmp	#LR__0524
07340     37 73 02 F6 | 	mov	local12, local10
07344     07 72 46 F7 | 	zerox	local12, #7
07348     5C 72 0E F2 | 	cmp	local12, #92 wz
0734c     30 00 90 5D |  if_ne	jmp	#LR__0527
07350                 | LR__0524
07350                 | ' 			while (p[si] == '/' || p[si] == '\\') si++;
07350                 | LR__0525
07350     34 73 02 F6 | 	mov	local12, local07
07354     30 73 02 F1 | 	add	local12, local03
07358     39 71 C2 FA | 	rdbyte	local11, local12
0735c     2F 70 0E F2 | 	cmp	local11, #47 wz
07360     14 00 90 AD |  if_e	jmp	#LR__0526
07364     34 75 02 F6 | 	mov	local13, local07
07368     30 75 02 F1 | 	add	local13, local03
0736c     3A 77 C2 FA | 	rdbyte	local14, local13
07370     5C 76 0E F2 | 	cmp	local14, #92 wz
07374     6C 01 90 5D |  if_ne	jmp	#LR__0537
07378                 | LR__0526
07378     01 68 06 F1 | 	add	local07, #1
0737c     D0 FF 9F FD | 	jmp	#LR__0525
07380                 | ' 			break;
07380                 | LR__0527
07380     37 71 02 F6 | 	mov	local11, local10
07384     07 70 46 F7 | 	zerox	local11, #7
07388     2E 70 0E F2 | 	cmp	local11, #46 wz
0738c     08 00 90 AD |  if_e	jmp	#LR__0528
07390     35 67 1A F2 | 	cmp	local06, local08 wcz
07394     28 00 90 CD |  if_b	jmp	#LR__0531
07398                 | LR__0528
07398     0B 6A 0E F2 | 	cmp	local08, #11 wz
0739c     0C 00 90 AD |  if_e	jmp	#LR__0529
073a0     07 6E 46 F7 | 	zerox	local10, #7
073a4     2E 6E 0E F2 | 	cmp	local10, #46 wz
073a8     08 00 90 AD |  if_e	jmp	#LR__0530
073ac                 | LR__0529
073ac     06 2C 06 F6 | 	mov	result1, #6
073b0     84 01 90 FD | 	jmp	#LR__0538
073b4                 | LR__0530
073b4     08 66 06 F6 | 	mov	local06, #8
073b8     0B 6A 06 F6 | 	mov	local08, #11
073bc                 | ' 			i = 8; ni = 11;
073bc                 | ' 			continue;
073bc     50 FF 9F FD | 	jmp	#LR__0523
073c0                 | LR__0531
073c0     37 71 02 F6 | 	mov	local11, local10
073c4     07 70 46 F7 | 	zerox	local11, #7
073c8     80 70 1E F2 | 	cmp	local11, #128 wcz
073cc     24 00 90 CD |  if_b	jmp	#LR__0532
073d0     37 79 02 F6 | 	mov	local15, local10
073d4     07 78 46 F7 | 	zerox	local15, #7
073d8     3C 7B 02 F6 | 	mov	local16, local15
073dc     7F 7A 06 F5 | 	and	local16, #127
073e0     3D 7D 02 F6 | 	mov	local17, local16
073e4     06 1E 06 F1 | 	add	ptr__ff_cc_dat__, #6
073e8     0F 7D 02 F1 | 	add	local17, ptr__ff_cc_dat__
073ec     3E 6F C2 FA | 	rdbyte	local10, local17
073f0     06 1E 86 F1 | 	sub	ptr__ff_cc_dat__, #6
073f4                 | LR__0532
073f4     37 53 02 F6 | 	mov	arg01, local10
073f8     07 52 4E F7 | 	zerox	arg01, #7 wz
073fc     00 2C 06 56 |  if_ne	mov	result1, #0
07400                 | ' 
07400                 | ' 	return 0;
07400     00 2C 06 A6 |  if_e	mov	result1, #0
07404     00 2C 0E F2 | 	cmp	result1, #0 wz
07408     68 00 90 AD |  if_e	jmp	#LR__0535
0740c     34 6D 02 F6 | 	mov	local09, local07
07410     30 77 02 F6 | 	mov	local14, local03
07414     30 6D 02 F1 | 	add	local09, local03
07418     36 7F C2 FA | 	rdbyte	local18, local09
0741c     3F 53 02 F6 | 	mov	arg01, local18
07420     01 68 06 F1 | 	add	local07, #1
07424     07 52 4E F7 | 	zerox	arg01, #7 wz
07428     00 2C 06 56 |  if_ne	mov	result1, #0
0742c                 | ' 
0742c                 | ' 	return 0;
0742c     00 2C 06 A6 |  if_e	mov	result1, #0
07430     16 73 0A F6 | 	mov	local12, result1 wz
07434     10 00 90 AD |  if_e	jmp	#LR__0533
07438     35 6D 02 F6 | 	mov	local09, local08
0743c     01 6C 86 F1 | 	sub	local09, #1
07440     36 67 1A F2 | 	cmp	local06, local09 wcz
07444     08 00 90 CD |  if_b	jmp	#LR__0534
07448                 | LR__0533
07448     06 2C 06 F6 | 	mov	result1, #6
0744c     E8 00 90 FD | 	jmp	#LR__0538
07450                 | LR__0534
07450     33 6D 02 F6 | 	mov	local09, local06
07454     32 6D 02 F1 | 	add	local09, local05
07458     36 6F 42 FC | 	wrbyte	local10, local09
0745c     01 66 06 F1 | 	add	local06, #1
07460     33 6D 02 F6 | 	mov	local09, local06
07464     32 6D 02 F1 | 	add	local09, local05
07468     36 7F 42 FC | 	wrbyte	local18, local09
0746c     01 66 06 F1 | 	add	local06, #1
07470     9C FE 9F FD | 	jmp	#LR__0523
07474                 | LR__0535
07474     62 00 00 FF 
07478     0E 52 06 F6 | 	mov	arg01, ##@LR__0831
0747c     37 6D 02 F6 | 	mov	local09, local10
07480     07 6C 46 F7 | 	zerox	local09, #7
07484     36 77 02 F6 | 	mov	local14, local09
07488     3B 55 02 F6 | 	mov	arg02, local14
0748c     E8 E8 BF FD | 	call	#_ff_cc_chk_chr_0224
07490     16 75 0A F6 | 	mov	local13, result1 wz
07494     06 2C 06 56 |  if_ne	mov	result1, #6
07498     9C 00 90 5D |  if_ne	jmp	#LR__0538
0749c     37 71 02 F6 | 	mov	local11, local10
074a0     07 70 46 F7 | 	zerox	local11, #7
074a4     61 70 1E F2 | 	cmp	local11, #97 wcz
074a8     24 00 90 CD |  if_b	jmp	#LR__0536
074ac     37 73 02 F6 | 	mov	local12, local10
074b0     07 72 46 F7 | 	zerox	local12, #7
074b4     7A 72 1E F2 | 	cmp	local12, #122 wcz
074b8     14 00 90 1D |  if_a	jmp	#LR__0536
074bc     37 81 02 F6 | 	mov	local19, local10
074c0     07 80 46 F7 | 	zerox	local19, #7
074c4     40 83 02 F6 | 	mov	local20, local19
074c8     20 82 86 F1 | 	sub	local20, #32
074cc     41 6F 02 F6 | 	mov	local10, local20
074d0                 | LR__0536
074d0     33 6D 02 F6 | 	mov	local09, local06
074d4     32 6D 02 F1 | 	add	local09, local05
074d8     36 6F 42 FC | 	wrbyte	local10, local09
074dc     01 66 06 F1 | 	add	local06, #1
074e0     2C FE 9F FD | 	jmp	#LR__0523
074e4                 | LR__0537
074e4     34 85 02 F6 | 	mov	local21, local07
074e8     30 87 02 F6 | 	mov	local22, local03
074ec     42 87 02 F1 | 	add	local22, local21
074f0     2F 87 62 FC | 	wrlong	local22, local02
074f4     00 66 0E F2 | 	cmp	local06, #0 wz
074f8     06 2C 06 A6 |  if_e	mov	result1, #6
074fc     38 00 90 AD |  if_e	jmp	#LR__0538
07500     32 71 C2 FA | 	rdbyte	local11, local05
07504     E5 70 0E F2 | 	cmp	local11, #229 wz
07508     32 0B 48 AC |  if_e	wrbyte	#5, local05
0750c     37 89 02 F6 | 	mov	local23, local10
07510     07 88 46 F7 | 	zerox	local23, #7
07514     00 8A 06 F6 | 	mov	local24, #0
07518     20 88 1E F2 | 	cmp	local23, #32 wcz
0751c     01 8A 06 E6 |  if_be	mov	local24, #1
07520     00 8A 0E F2 | 	cmp	local24, #0 wz
07524     04 70 06 56 |  if_ne	mov	local11, #4
07528     00 70 06 A6 |  if_e	mov	local11, #0
0752c     0B 64 06 F1 | 	add	local05, #11
07530     32 71 42 FC | 	wrbyte	local11, local05
07534                 | ' 	sfn[ 11 ] = (c <= ' ') ?  0x04  : 0;
07534                 | ' 
07534                 | ' 	return FR_OK;
07534     00 2C 06 F6 | 	mov	result1, #0
07538                 | LR__0538
07538     AF F0 03 F6 | 	mov	ptra, fp
0753c     BF 00 A0 FD | 	call	#popregs_
07540                 | _ff_cc_create_name_0299_ret
07540     2D 00 64 FD | 	ret
07544                 | 
07544                 | _ff_cc_follow_path_0303
07544     07 5A 05 F6 | 	mov	COUNT_, #7
07548     B0 00 A0 FD | 	call	#pushregs_
0754c     20 F0 07 F1 | 	add	ptra, #32
07550     04 5E 05 F1 | 	add	fp, #4
07554     AF 52 62 FC | 	wrlong	arg01, fp
07558     04 5E 05 F1 | 	add	fp, #4
0755c     AF 54 62 FC | 	wrlong	arg02, fp
07560     04 5E 85 F1 | 	sub	fp, #4
07564     AF 5C 02 FB | 	rdlong	local01, fp
07568     2E 5F 02 FB | 	rdlong	local02, local01
0756c     10 5E 05 F1 | 	add	fp, #16
07570     AF 5E 62 FC | 	wrlong	local02, fp
07574     14 5E 85 F1 | 	sub	fp, #20
07578     CC 8A 9F FE | 	loc	pa,	#(@LR__0541-@LR__0539)
0757c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07580                 | ' )
07580                 | ' {
07580                 | ' 	FRESULT res;
07580                 | ' 	BYTE ns;
07580                 | ' 	FATFS *fs = dp->obj.fs;
07580                 | ' #line 3075 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
07580                 | ' 	{
07580                 | ' 		while (*path == '/' || *path == '\\') path++;
07580                 | LR__0539
07580     08 5E 05 F1 | 	add	fp, #8
07584     AF 60 02 FB | 	rdlong	local03, fp
07588     08 5E 85 F1 | 	sub	fp, #8
0758c     30 5D C2 FA | 	rdbyte	local01, local03
07590     2F 5C 0E F2 | 	cmp	local01, #47 wz
07594     18 00 90 AD |  if_e	jmp	#LR__0540
07598     08 5E 05 F1 | 	add	fp, #8
0759c     AF 62 02 FB | 	rdlong	local04, fp
075a0     08 5E 85 F1 | 	sub	fp, #8
075a4     31 65 C2 FA | 	rdbyte	local05, local04
075a8     5C 64 0E F2 | 	cmp	local05, #92 wz
075ac     18 00 90 5D |  if_ne	jmp	#LR__0542
075b0                 | LR__0540
075b0     08 5E 05 F1 | 	add	fp, #8
075b4     AF 5E 02 FB | 	rdlong	local02, fp
075b8     01 5E 06 F1 | 	add	local02, #1
075bc     AF 5E 62 FC | 	wrlong	local02, fp
075c0     08 5E 85 F1 | 	sub	fp, #8
075c4     B8 FF 9F FD | 	jmp	#LR__0539
075c8                 | LR__0541
075c8                 | LR__0542
075c8     04 5E 05 F1 | 	add	fp, #4
075cc     AF 5C 02 FB | 	rdlong	local01, fp
075d0     08 5C 06 F1 | 	add	local01, #8
075d4     2E 01 68 FC | 	wrlong	#0, local01
075d8     04 5E 05 F1 | 	add	fp, #4
075dc     AF 60 02 FB | 	rdlong	local03, fp
075e0     08 5E 85 F1 | 	sub	fp, #8
075e4     30 5D C2 FA | 	rdbyte	local01, local03
075e8     20 5C 1E F2 | 	cmp	local01, #32 wcz
075ec     30 00 90 3D |  if_ae	jmp	#LR__0543
075f0     04 5E 05 F1 | 	add	fp, #4
075f4     AF 5C 02 FB | 	rdlong	local01, fp
075f8     2B 5C 06 F1 | 	add	local01, #43
075fc     2E 01 49 FC | 	wrbyte	#128, local01
07600     AF 52 02 FB | 	rdlong	arg01, fp
07604     04 5E 85 F1 | 	sub	fp, #4
07608     00 54 06 F6 | 	mov	arg02, #0
0760c     B4 F3 BF FD | 	call	#_ff_cc_dir_sdi_0261
07610     0C 5E 05 F1 | 	add	fp, #12
07614     AF 2C 62 FC | 	wrlong	result1, fp
07618     0C 5E 85 F1 | 	sub	fp, #12
0761c     34 01 90 FD | 	jmp	#LR__0548
07620                 | LR__0543
07620                 | ' 		for (;;) {
07620                 | LR__0544
07620     08 5E 05 F1 | 	add	fp, #8
07624     AF 54 02 F6 | 	mov	arg02, fp
07628     04 5E 85 F1 | 	sub	fp, #4
0762c     AF 52 02 FB | 	rdlong	arg01, fp
07630     04 5E 85 F1 | 	sub	fp, #4
07634     88 FC BF FD | 	call	#_ff_cc_create_name_0299
07638     16 65 02 F6 | 	mov	local05, result1
0763c     0C 5E 05 F1 | 	add	fp, #12
07640     AF 64 62 FC | 	wrlong	local05, fp
07644     AF 5C 0A FB | 	rdlong	local01, fp wz
07648     0C 5E 85 F1 | 	sub	fp, #12
0764c     04 01 90 5D |  if_ne	jmp	#LR__0547
07650     04 5E 05 F1 | 	add	fp, #4
07654     AF 52 02 FB | 	rdlong	arg01, fp
07658     04 5E 85 F1 | 	sub	fp, #4
0765c     38 F9 BF FD | 	call	#_ff_cc_dir_find_0281
07660     0C 5E 05 F1 | 	add	fp, #12
07664     AF 2C 62 FC | 	wrlong	result1, fp
07668     08 5E 85 F1 | 	sub	fp, #8
0766c     AF 5C 02 FB | 	rdlong	local01, fp
07670     2B 5C 06 F1 | 	add	local01, #43
07674     2E 5F C2 FA | 	rdbyte	local02, local01
07678     0C 5E 05 F1 | 	add	fp, #12
0767c     AF 5E 42 FC | 	wrbyte	local02, fp
07680     04 5E 85 F1 | 	sub	fp, #4
07684     AF 5C 0A FB | 	rdlong	local01, fp wz
07688     0C 5E 85 F1 | 	sub	fp, #12
0768c     38 00 90 AD |  if_e	jmp	#LR__0545
07690     0C 5E 05 F1 | 	add	fp, #12
07694     AF 5C 02 FB | 	rdlong	local01, fp
07698     0C 5E 85 F1 | 	sub	fp, #12
0769c     04 5C 0E F2 | 	cmp	local01, #4 wz
076a0     B0 00 90 5D |  if_ne	jmp	#LR__0547
076a4     10 5E 05 F1 | 	add	fp, #16
076a8     AF 5C C2 FA | 	rdbyte	local01, fp
076ac     10 5E 85 F1 | 	sub	fp, #16
076b0     07 5C 46 F7 | 	zerox	local01, #7
076b4     04 5C CE F7 | 	test	local01, #4 wz
076b8     0C 5E 05 A1 |  if_e	add	fp, #12
076bc     AF 0A 68 AC |  if_e	wrlong	#5, fp
076c0     0C 5E 85 A1 |  if_e	sub	fp, #12
076c4                 | ' 					}
076c4                 | ' 				}
076c4                 | ' 				break;
076c4     8C 00 90 FD | 	jmp	#LR__0547
076c8                 | LR__0545
076c8     10 5E 05 F1 | 	add	fp, #16
076cc     AF 5C C2 FA | 	rdbyte	local01, fp
076d0     10 5E 85 F1 | 	sub	fp, #16
076d4     07 5C 46 F7 | 	zerox	local01, #7
076d8     04 5C CE F7 | 	test	local01, #4 wz
076dc     74 00 90 5D |  if_ne	jmp	#LR__0547
076e0     04 5E 05 F1 | 	add	fp, #4
076e4     AF 60 02 FB | 	rdlong	local03, fp
076e8     04 5E 85 F1 | 	sub	fp, #4
076ec     06 60 06 F1 | 	add	local03, #6
076f0     30 5D C2 FA | 	rdbyte	local01, local03
076f4     10 5C CE F7 | 	test	local01, #16 wz
076f8     10 00 90 5D |  if_ne	jmp	#LR__0546
076fc     0C 5E 05 F1 | 	add	fp, #12
07700     AF 0A 68 FC | 	wrlong	#5, fp
07704     0C 5E 85 F1 | 	sub	fp, #12
07708                 | ' 				res = FR_NO_PATH; break;
07708     48 00 90 FD | 	jmp	#LR__0547
0770c                 | LR__0546
0770c     14 5E 05 F1 | 	add	fp, #20
07710     AF 54 02 FB | 	rdlong	arg02, fp
07714     30 54 06 F1 | 	add	arg02, #48
07718     10 5E 85 F1 | 	sub	fp, #16
0771c     AF 5C 02 FB | 	rdlong	local01, fp
07720     10 5E 05 F1 | 	add	fp, #16
07724     AF 52 02 FB | 	rdlong	arg01, fp
07728     10 5E 85 F1 | 	sub	fp, #16
0772c     AF 66 02 FB | 	rdlong	local06, fp
07730     04 5E 85 F1 | 	sub	fp, #4
07734     10 66 06 F1 | 	add	local06, #16
07738     33 69 02 FB | 	rdlong	local07, local06
0773c     FF 69 06 F5 | 	and	local07, #511
07740     34 55 02 F1 | 	add	arg02, local07
07744     A4 F6 BF FD | 	call	#_ff_cc_ld_clust_0271
07748     08 5C 06 F1 | 	add	local01, #8
0774c     2E 2D 62 FC | 	wrlong	result1, local01
07750     CC FE 9F FD | 	jmp	#LR__0544
07754                 | LR__0547
07754                 | LR__0548
07754                 | ' 			}
07754                 | ' #line 3131 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
07754                 | ' 			{
07754                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
07754                 | ' 			}
07754                 | ' 		}
07754                 | ' 	}
07754                 | ' 
07754                 | ' 	return res;
07754     0C 5E 05 F1 | 	add	fp, #12
07758     AF 2C 02 FB | 	rdlong	result1, fp
0775c     0C 5E 85 F1 | 	sub	fp, #12
07760     AF F0 03 F6 | 	mov	ptra, fp
07764     BF 00 A0 FD | 	call	#popregs_
07768                 | _ff_cc_follow_path_0303_ret
07768     2D 00 64 FD | 	ret
0776c                 | 
0776c                 | _ff_cc_get_ldnumber_0309
0776c     29 33 02 F6 | 	mov	_var01, arg01
07770     01 34 66 F6 | 	neg	_var02, #1
07774     19 37 0A FB | 	rdlong	_var03, _var01 wz
07778     1B 39 02 F6 | 	mov	_var04, _var03
0777c     01 2C 66 A6 |  if_e	neg	result1, #1
07780     8C 00 90 AD |  if_e	jmp	#_ff_cc_get_ldnumber_0309_ret
07784     A0 88 9F FE | 	loc	pa,	#(@LR__0550-@LR__0549)
07788     93 00 A0 FD | 	call	#FCACHE_LOAD_
0778c                 | ' 	do tc = *tt++; while ((UINT)tc >= ( 0  ? ' ' : '!') && tc != ':');
0778c                 | LR__0549
0778c     1C 3B C2 FA | 	rdbyte	_var05, _var04
07790     1D 3D 02 F6 | 	mov	_var06, _var05
07794     07 3C 46 F7 | 	zerox	_var06, #7
07798     21 3C 1E F2 | 	cmp	_var06, #33 wcz
0779c     01 38 06 F1 | 	add	_var04, #1
077a0     10 00 90 CD |  if_b	jmp	#LR__0551
077a4     1D 3F 02 F6 | 	mov	_var07, _var05
077a8     07 3E 46 F7 | 	zerox	_var07, #7
077ac     3A 3E 0E F2 | 	cmp	_var07, #58 wz
077b0     D8 FF 9F 5D |  if_ne	jmp	#LR__0549
077b4                 | LR__0550
077b4                 | LR__0551
077b4     1D 3D 02 F6 | 	mov	_var06, _var05
077b8     07 3C 46 F7 | 	zerox	_var06, #7
077bc     3A 3C 0E F2 | 	cmp	_var06, #58 wz
077c0     48 00 90 5D |  if_ne	jmp	#LR__0553
077c4     01 40 06 F6 | 	mov	_var08, #1
077c8     1B 3D C2 FA | 	rdbyte	_var06, _var03
077cc     30 3C 1E F2 | 	cmp	_var06, #48 wcz
077d0     24 00 90 CD |  if_b	jmp	#LR__0552
077d4     1B 3F C2 FA | 	rdbyte	_var07, _var03
077d8     39 3E 1E F2 | 	cmp	_var07, #57 wcz
077dc     18 00 90 1D |  if_a	jmp	#LR__0552
077e0     1B 43 02 F6 | 	mov	_var09, _var03
077e4     02 42 06 F1 | 	add	_var09, #2
077e8     1C 43 0A F2 | 	cmp	_var09, _var04 wz
077ec     1B 3D C2 AA |  if_e	rdbyte	_var06, _var03
077f0     30 3C 86 A1 |  if_e	sub	_var06, #48
077f4     1E 41 02 A6 |  if_e	mov	_var08, _var06
077f8                 | LR__0552
077f8     01 40 5E F2 | 	cmps	_var08, #1 wcz
077fc     20 35 02 C6 |  if_b	mov	_var02, _var08
07800     19 39 62 CC |  if_b	wrlong	_var04, _var01
07804                 | ' 			vol = i;
07804                 | ' 			*path = tt;
07804                 | ' 		}
07804                 | ' 		return vol;
07804     1A 2D 02 F6 | 	mov	result1, _var02
07808     04 00 90 FD | 	jmp	#_ff_cc_get_ldnumber_0309_ret
0780c                 | LR__0553
0780c                 | ' 	}
0780c                 | ' #line 3209 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0780c                 | ' 	vol = 0;
0780c                 | ' 
0780c                 | ' 	return vol;
0780c     00 2C 06 F6 | 	mov	result1, #0
07810                 | _ff_cc_get_ldnumber_0309_ret
07810     2D 00 64 FD | 	ret
07814                 | 
07814                 | _ff_cc_check_fs_0310
07814     08 5A 05 F6 | 	mov	COUNT_, #8
07818     B0 00 A0 FD | 	call	#pushregs_
0781c     29 5D 02 F6 | 	mov	local01, arg01
07820     2A 5F 02 F6 | 	mov	local02, arg02
07824     03 5C 06 F1 | 	add	local01, #3
07828     2E 01 48 FC | 	wrbyte	#0, local01
0782c     29 5C 06 F1 | 	add	local01, #41
07830     FF FF FF FF 
07834     2E FF 6B FC | 	wrlong	##-1, local01
07838     2C 5C 86 F1 | 	sub	local01, #44
0783c     2E 53 02 F6 | 	mov	arg01, local01
07840     2F 55 02 F6 | 	mov	arg02, local02
07844     30 E6 BF FD | 	call	#_ff_cc_move_window_0230
07848     00 2C 0E F2 | 	cmp	result1, #0 wz
0784c     04 2C 06 56 |  if_ne	mov	result1, #4
07850     D8 00 90 5D |  if_ne	jmp	#LR__0556
07854     30 5C 06 F1 | 	add	local01, #48
07858     2E 53 02 F6 | 	mov	arg01, local01
0785c     FE 53 06 F1 | 	add	arg01, #510
07860     30 5C 86 F1 | 	sub	local01, #48
07864     F4 E3 BF FD | 	call	#_ff_cc_ld_word_0210
07868     16 61 02 F6 | 	mov	local03, result1
0786c     0F 60 46 F7 | 	zerox	local03, #15
07870     55 00 00 FF 
07874     55 60 0E F2 | 	cmp	local03, ##43605 wz
07878     03 2C 06 56 |  if_ne	mov	result1, #3
0787c     AC 00 90 5D |  if_ne	jmp	#LR__0556
07880     30 5C 06 F1 | 	add	local01, #48
07884     2E 63 C2 FA | 	rdbyte	local04, local01
07888     30 5C 86 F1 | 	sub	local01, #48
0788c     31 61 02 F6 | 	mov	local03, local04
07890     07 60 46 F7 | 	zerox	local03, #7
07894     E9 60 0E F2 | 	cmp	local03, #233 wz
07898     38 00 90 AD |  if_e	jmp	#LR__0554
0789c     30 5C 06 F1 | 	add	local01, #48
078a0     2E 65 C2 FA | 	rdbyte	local05, local01
078a4     30 5C 86 F1 | 	sub	local01, #48
078a8     32 67 02 F6 | 	mov	local06, local05
078ac     07 66 46 F7 | 	zerox	local06, #7
078b0     EB 66 0E F2 | 	cmp	local06, #235 wz
078b4     1C 00 90 AD |  if_e	jmp	#LR__0554
078b8     30 5C 06 F1 | 	add	local01, #48
078bc     2E 69 C2 FA | 	rdbyte	local07, local01
078c0     30 5C 86 F1 | 	sub	local01, #48
078c4     34 6B 02 F6 | 	mov	local08, local07
078c8     07 6A 46 F7 | 	zerox	local08, #7
078cc     E8 6A 0E F2 | 	cmp	local08, #232 wz
078d0     54 00 90 5D |  if_ne	jmp	#LR__0555
078d4                 | LR__0554
078d4     30 5C 06 F1 | 	add	local01, #48
078d8     2E 53 02 F6 | 	mov	arg01, local01
078dc     30 5C 86 F1 | 	sub	local01, #48
078e0     36 52 06 F1 | 	add	arg01, #54
078e4     62 00 00 FF 
078e8     29 54 06 F6 | 	mov	arg02, ##@LR__0833
078ec     03 56 06 F6 | 	mov	arg03, #3
078f0     4C E4 BF FD | 	call	#_ff_cc_mem_cmp_0223
078f4     00 2C 0E F2 | 	cmp	result1, #0 wz
078f8     00 2C 06 A6 |  if_e	mov	result1, #0
078fc     2C 00 90 AD |  if_e	jmp	#LR__0556
07900     30 5C 06 F1 | 	add	local01, #48
07904     2E 53 02 F6 | 	mov	arg01, local01
07908     52 52 06 F1 | 	add	arg01, #82
0790c     62 00 00 FF 
07910     2D 54 06 F6 | 	mov	arg02, ##@LR__0834
07914     05 56 06 F6 | 	mov	arg03, #5
07918     24 E4 BF FD | 	call	#_ff_cc_mem_cmp_0223
0791c     00 2C 0E F2 | 	cmp	result1, #0 wz
07920     00 2C 06 A6 |  if_e	mov	result1, #0
07924     04 00 90 AD |  if_e	jmp	#LR__0556
07928                 | LR__0555
07928                 | ' 	}
07928                 | ' 	return 2;
07928     02 2C 06 F6 | 	mov	result1, #2
0792c                 | LR__0556
0792c     AF F0 03 F6 | 	mov	ptra, fp
07930     BF 00 A0 FD | 	call	#popregs_
07934                 | _ff_cc_check_fs_0310_ret
07934     2D 00 64 FD | 	ret
07938                 | 
07938                 | _ff_cc_find_volume_0314
07938     13 5A 05 F6 | 	mov	COUNT_, #19
0793c     B0 00 A0 FD | 	call	#pushregs_
07940     3C F0 07 F1 | 	add	ptra, #60
07944     29 5D 02 F6 | 	mov	local01, arg01
07948     2A 5F 02 F6 | 	mov	local02, arg02
0794c     2E 53 02 F6 | 	mov	arg01, local01
07950     00 54 06 F6 | 	mov	arg02, #0
07954     BC FE BF FD | 	call	#_ff_cc_check_fs_0310
07958     16 61 02 F6 | 	mov	local03, result1
0795c     02 60 0E F2 | 	cmp	local03, #2 wz
07960     18 00 90 AD |  if_e	jmp	#LR__0558
07964     03 60 1E F2 | 	cmp	local03, #3 wcz
07968     08 00 90 3D |  if_ae	jmp	#LR__0557
0796c     00 5E 0E F2 | 	cmp	local02, #0 wz
07970     08 00 90 5D |  if_ne	jmp	#LR__0558
07974                 | LR__0557
07974     30 2D 02 F6 | 	mov	result1, local03
07978     00 01 90 FD | 	jmp	#LR__0564
0797c                 | LR__0558
0797c     00 62 06 F6 | 	mov	local04, #0
07980     00 64 06 F6 | 	mov	local05, #0
07984     00 66 06 F6 | 	mov	local06, #0
07988                 | LR__0559
07988     30 5C 06 F1 | 	add	local01, #48
0798c     2E 69 02 F6 | 	mov	local07, local01
07990     34 6B 02 F6 | 	mov	local08, local07
07994     BE 6B 06 F1 | 	add	local08, #446
07998     35 6D 02 F6 | 	mov	local09, local08
0799c     32 6D 02 F1 | 	add	local09, local05
079a0     36 6F 02 F6 | 	mov	local10, local09
079a4     08 6E 06 F1 | 	add	local10, #8
079a8     33 71 02 F6 | 	mov	local11, local06
079ac     02 70 66 F0 | 	shl	local11, #2
079b0     14 5E 05 F1 | 	add	fp, #20
079b4     AF 70 02 F1 | 	add	local11, fp
079b8     37 53 02 F6 | 	mov	arg01, local10
079bc     30 5C 86 F1 | 	sub	local01, #48
079c0     14 5E 85 F1 | 	sub	fp, #20
079c4     B8 E2 BF FD | 	call	#_ff_cc_ld_dword_0212
079c8     38 2D 62 FC | 	wrlong	result1, local11
079cc     01 66 06 F1 | 	add	local06, #1
079d0     10 62 06 F1 | 	add	local04, #16
079d4     10 64 06 F1 | 	add	local05, #16
079d8     04 66 1E F2 | 	cmp	local06, #4 wcz
079dc     A8 FF 9F CD |  if_b	jmp	#LR__0559
079e0     00 5E 0E F2 | 	cmp	local02, #0 wz
079e4     2F 71 02 56 |  if_ne	mov	local11, local02
079e8     01 70 86 51 |  if_ne	sub	local11, #1
079ec     00 70 06 A6 |  if_e	mov	local11, #0
079f0     38 67 02 F6 | 	mov	local06, local11
079f4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
079f4                 | ' 	}
079f4                 | ' 	i = part ? part - 1 : 0;
079f4                 | ' 	do {
079f4                 | LR__0560
079f4     33 73 02 F6 | 	mov	local12, local06
079f8     02 72 66 F0 | 	shl	local12, #2
079fc     14 5E 05 F1 | 	add	fp, #20
07a00     AF 74 02 F6 | 	mov	local13, fp
07a04     AF 72 02 F1 | 	add	local12, fp
07a08     39 77 0A FB | 	rdlong	local14, local12 wz
07a0c     14 5E 85 F1 | 	sub	fp, #20
07a10     38 00 90 AD |  if_e	jmp	#LR__0561
07a14     2E 79 02 F6 | 	mov	local15, local01
07a18     33 7B 02 F6 | 	mov	local16, local06
07a1c     02 7A 66 F0 | 	shl	local16, #2
07a20     14 5E 05 F1 | 	add	fp, #20
07a24     AF 7C 02 F6 | 	mov	local17, fp
07a28     AF 7A 02 F1 | 	add	local16, fp
07a2c     3D 7F 02 FB | 	rdlong	local18, local16
07a30     3C 53 02 F6 | 	mov	arg01, local15
07a34     3F 55 02 F6 | 	mov	arg02, local18
07a38     14 5E 85 F1 | 	sub	fp, #20
07a3c     D4 FD BF FD | 	call	#_ff_cc_check_fs_0310
07a40     16 81 02 F6 | 	mov	local19, result1
07a44     40 71 02 F6 | 	mov	local11, local19
07a48     04 00 90 FD | 	jmp	#LR__0562
07a4c                 | LR__0561
07a4c     03 70 06 F6 | 	mov	local11, #3
07a50                 | LR__0562
07a50     38 61 02 F6 | 	mov	local03, local11
07a54     00 5E 0E F2 | 	cmp	local02, #0 wz
07a58     1C 00 90 5D |  if_ne	jmp	#LR__0563
07a5c     02 60 1E F2 | 	cmp	local03, #2 wcz
07a60     14 00 90 CD |  if_b	jmp	#LR__0563
07a64     33 71 02 F6 | 	mov	local11, local06
07a68     01 70 06 F1 | 	add	local11, #1
07a6c     38 67 02 F6 | 	mov	local06, local11
07a70     04 66 1E F2 | 	cmp	local06, #4 wcz
07a74     7C FF 9F CD |  if_b	jmp	#LR__0560
07a78                 | LR__0563
07a78                 | ' 	return fmt;
07a78     30 2D 02 F6 | 	mov	result1, local03
07a7c                 | LR__0564
07a7c     AF F0 03 F6 | 	mov	ptra, fp
07a80     BF 00 A0 FD | 	call	#popregs_
07a84                 | _ff_cc_find_volume_0314_ret
07a84     2D 00 64 FD | 	ret
07a88                 | 
07a88                 | _ff_cc_mount_volume_0326
07a88     34 5A 05 F6 | 	mov	COUNT_, #52
07a8c     B0 00 A0 FD | 	call	#pushregs_
07a90     29 5D 02 F6 | 	mov	local01, arg01
07a94     2A 5F 02 F6 | 	mov	local02, arg02
07a98     2B 61 02 F6 | 	mov	local03, arg03
07a9c     2F 01 68 FC | 	wrlong	#0, local02
07aa0     2E 53 02 F6 | 	mov	arg01, local01
07aa4     C4 FC BF FD | 	call	#_ff_cc_get_ldnumber_0309
07aa8     16 63 02 F6 | 	mov	local04, result1
07aac     00 62 5E F2 | 	cmps	local04, #0 wcz
07ab0     0B 2C 06 C6 |  if_b	mov	result1, #11
07ab4     38 06 90 CD |  if_b	jmp	#LR__0580
07ab8     31 65 02 F6 | 	mov	local05, local04
07abc     02 64 66 F0 | 	shl	local05, #2
07ac0     0F 65 02 F1 | 	add	local05, ptr__ff_cc_dat__
07ac4     32 67 0A FB | 	rdlong	local06, local05 wz
07ac8     0C 2C 06 A6 |  if_e	mov	result1, #12
07acc     20 06 90 AD |  if_e	jmp	#LR__0580
07ad0     2F 67 62 FC | 	wrlong	local06, local02
07ad4     30 69 02 F6 | 	mov	local07, local03
07ad8     07 68 46 F7 | 	zerox	local07, #7
07adc     34 6B 02 F6 | 	mov	local08, local07
07ae0     FE 6A 06 F5 | 	and	local08, #254
07ae4     35 61 02 F6 | 	mov	local03, local08
07ae8     33 6D CA FA | 	rdbyte	local09, local06 wz
07aec     4C 00 90 AD |  if_e	jmp	#LR__0567
07af0     01 66 06 F1 | 	add	local06, #1
07af4     33 53 CA FA | 	rdbyte	arg01, local06 wz
07af8     01 66 86 F1 | 	sub	local06, #1
07afc     01 2C 06 56 |  if_ne	mov	result1, #1
07b00                 | ' 
07b00                 | ' 	return Stat;
07b00     7C 1F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
07b04     0F 2D C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
07b08     7C 1F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
07b0c     16 6D 02 F6 | 	mov	local09, result1
07b10     07 6C 46 F7 | 	zerox	local09, #7
07b14     01 6C CE F7 | 	test	local09, #1 wz
07b18     20 00 90 5D |  if_ne	jmp	#LR__0566
07b1c     00 60 0E F2 | 	cmp	local03, #0 wz
07b20     10 00 90 AD |  if_e	jmp	#LR__0565
07b24     07 2C 46 F7 | 	zerox	result1, #7
07b28     04 2C 0E F5 | 	and	result1, #4 wz
07b2c                 | ' 				return FR_WRITE_PROTECTED;
07b2c     0A 2C 06 56 |  if_ne	mov	result1, #10
07b30     BC 05 90 5D |  if_ne	jmp	#LR__0580
07b34                 | LR__0565
07b34                 | ' 			}
07b34                 | ' 			return FR_OK;
07b34     00 2C 06 F6 | 	mov	result1, #0
07b38     B4 05 90 FD | 	jmp	#LR__0580
07b3c                 | LR__0566
07b3c                 | LR__0567
07b3c     33 01 48 FC | 	wrbyte	#0, local06
07b40     01 66 06 F1 | 	add	local06, #1
07b44     33 63 42 FC | 	wrbyte	local04, local06
07b48     33 53 C2 FA | 	rdbyte	arg01, local06
07b4c     01 66 86 F1 | 	sub	local06, #1
07b50     D0 D8 BF FD | 	call	#_ff_cc_disk_initialize
07b54     16 6F 02 F6 | 	mov	local10, result1
07b58     37 6D 02 F6 | 	mov	local09, local10
07b5c     07 6C 46 F7 | 	zerox	local09, #7
07b60     01 6C CE F7 | 	test	local09, #1 wz
07b64                 | ' 		return FR_NOT_READY;
07b64     03 2C 06 56 |  if_ne	mov	result1, #3
07b68     84 05 90 5D |  if_ne	jmp	#LR__0580
07b6c     00 60 0E F2 | 	cmp	local03, #0 wz
07b70     14 00 90 AD |  if_e	jmp	#LR__0568
07b74     37 6D 02 F6 | 	mov	local09, local10
07b78     07 6C 46 F7 | 	zerox	local09, #7
07b7c     04 6C CE F7 | 	test	local09, #4 wz
07b80                 | ' 		return FR_WRITE_PROTECTED;
07b80     0A 2C 06 56 |  if_ne	mov	result1, #10
07b84     68 05 90 5D |  if_ne	jmp	#LR__0580
07b88                 | LR__0568
07b88     33 53 02 F6 | 	mov	arg01, local06
07b8c     00 54 06 F6 | 	mov	arg02, #0
07b90     A4 FD BF FD | 	call	#_ff_cc_find_volume_0314
07b94     16 71 02 F6 | 	mov	local11, result1
07b98     04 70 0E F2 | 	cmp	local11, #4 wz
07b9c     01 2C 06 A6 |  if_e	mov	result1, #1
07ba0     4C 05 90 AD |  if_e	jmp	#LR__0580
07ba4     02 70 1E F2 | 	cmp	local11, #2 wcz
07ba8     0D 2C 06 36 |  if_ae	mov	result1, #13
07bac     40 05 90 3D |  if_ae	jmp	#LR__0580
07bb0     2C 66 06 F1 | 	add	local06, #44
07bb4     33 73 02 FB | 	rdlong	local12, local06
07bb8     04 66 06 F1 | 	add	local06, #4
07bbc     33 53 02 F6 | 	mov	arg01, local06
07bc0     30 66 86 F1 | 	sub	local06, #48
07bc4     0B 52 06 F1 | 	add	arg01, #11
07bc8     90 E0 BF FD | 	call	#_ff_cc_ld_word_0210
07bcc     16 6D 02 F6 | 	mov	local09, result1
07bd0     0F 6C 46 F7 | 	zerox	local09, #15
07bd4     01 00 00 FF 
07bd8     00 6C 0E F2 | 	cmp	local09, ##512 wz
07bdc     0D 2C 06 56 |  if_ne	mov	result1, #13
07be0     0C 05 90 5D |  if_ne	jmp	#LR__0580
07be4     30 66 06 F1 | 	add	local06, #48
07be8     33 75 02 F6 | 	mov	local13, local06
07bec     3A 77 02 F6 | 	mov	local14, local13
07bf0     16 76 06 F1 | 	add	local14, #22
07bf4     3B 53 02 F6 | 	mov	arg01, local14
07bf8     30 66 86 F1 | 	sub	local06, #48
07bfc     5C E0 BF FD | 	call	#_ff_cc_ld_word_0210
07c00     16 79 02 F6 | 	mov	local15, result1
07c04     0F 78 4E F7 | 	zerox	local15, #15 wz
07c08     14 00 90 5D |  if_ne	jmp	#LR__0569
07c0c     3A 7B 02 F6 | 	mov	local16, local13
07c10     24 7A 06 F1 | 	add	local16, #36
07c14     3D 53 02 F6 | 	mov	arg01, local16
07c18     64 E0 BF FD | 	call	#_ff_cc_ld_dword_0212
07c1c     16 79 02 F6 | 	mov	local15, result1
07c20                 | LR__0569
07c20     18 66 06 F1 | 	add	local06, #24
07c24     33 79 62 FC | 	wrlong	local15, local06
07c28     28 66 06 F1 | 	add	local06, #40
07c2c     33 6D C2 FA | 	rdbyte	local09, local06
07c30     3E 66 86 F1 | 	sub	local06, #62
07c34     33 6D 42 FC | 	wrbyte	local09, local06
07c38     33 6D C2 FA | 	rdbyte	local09, local06
07c3c     02 66 86 F1 | 	sub	local06, #2
07c40     07 6C 46 F7 | 	zerox	local09, #7
07c44     01 6C 0E F2 | 	cmp	local09, #1 wz
07c48     1C 00 90 AD |  if_e	jmp	#LR__0570
07c4c     02 66 06 F1 | 	add	local06, #2
07c50     33 7D C2 FA | 	rdbyte	local17, local06
07c54     02 66 86 F1 | 	sub	local06, #2
07c58     07 7C 46 F7 | 	zerox	local17, #7
07c5c     02 7C 0E F2 | 	cmp	local17, #2 wz
07c60     0D 2C 06 56 |  if_ne	mov	result1, #13
07c64     88 04 90 5D |  if_ne	jmp	#LR__0580
07c68                 | LR__0570
07c68     02 66 06 F1 | 	add	local06, #2
07c6c     33 6D C2 FA | 	rdbyte	local09, local06
07c70     36 79 02 FD | 	qmul	local15, local09
07c74     18 78 62 FD | 	getqx	local15
07c78     3B 66 06 F1 | 	add	local06, #59
07c7c     33 6D C2 FA | 	rdbyte	local09, local06
07c80     33 66 86 F1 | 	sub	local06, #51
07c84     33 6D 52 FC | 	wrword	local09, local06
07c88     33 6D E2 FA | 	rdword	local09, local06
07c8c     0A 66 86 F1 | 	sub	local06, #10
07c90     0F 6C 4E F7 | 	zerox	local09, #15 wz
07c94     20 00 90 AD |  if_e	jmp	#LR__0571
07c98     0A 66 06 F1 | 	add	local06, #10
07c9c     33 7D E2 FA | 	rdword	local17, local06
07ca0     33 7F E2 FA | 	rdword	local18, local06
07ca4     0A 66 86 F1 | 	sub	local06, #10
07ca8     0F 7E 46 F7 | 	zerox	local18, #15
07cac     01 7E 86 F1 | 	sub	local18, #1
07cb0     3F 7D CA F7 | 	test	local17, local18 wz
07cb4     08 00 90 AD |  if_e	jmp	#LR__0572
07cb8                 | LR__0571
07cb8     0D 2C 06 F6 | 	mov	result1, #13
07cbc     30 04 90 FD | 	jmp	#LR__0580
07cc0                 | LR__0572
07cc0     30 66 06 F1 | 	add	local06, #48
07cc4     33 81 02 F6 | 	mov	local19, local06
07cc8     40 83 02 F6 | 	mov	local20, local19
07ccc     11 82 06 F1 | 	add	local20, #17
07cd0     41 53 02 F6 | 	mov	arg01, local20
07cd4     30 66 86 F1 | 	sub	local06, #48
07cd8     80 DF BF FD | 	call	#_ff_cc_ld_word_0210
07cdc     08 66 06 F1 | 	add	local06, #8
07ce0     33 2D 52 FC | 	wrword	result1, local06
07ce4     33 6D E2 FA | 	rdword	local09, local06
07ce8     08 66 86 F1 | 	sub	local06, #8
07cec     0F 6C 46 F7 | 	zerox	local09, #15
07cf0     36 7D 52 F6 | 	abs	local17, local09 wc
07cf4     0F 7C 06 F5 | 	and	local17, #15
07cf8     3E 7D 62 C6 |  if_b	neg	local17, local17
07cfc     00 7C 0E F2 | 	cmp	local17, #0 wz
07d00     0D 2C 06 56 |  if_ne	mov	result1, #13
07d04     E8 03 90 5D |  if_ne	jmp	#LR__0580
07d08     30 66 06 F1 | 	add	local06, #48
07d0c     33 85 02 F6 | 	mov	local21, local06
07d10     42 87 02 F6 | 	mov	local22, local21
07d14     13 86 06 F1 | 	add	local22, #19
07d18     43 53 02 F6 | 	mov	arg01, local22
07d1c     30 66 86 F1 | 	sub	local06, #48
07d20     38 DF BF FD | 	call	#_ff_cc_ld_word_0210
07d24     16 89 02 F6 | 	mov	local23, result1
07d28     0F 88 4E F7 | 	zerox	local23, #15 wz
07d2c     14 00 90 5D |  if_ne	jmp	#LR__0573
07d30     42 8B 02 F6 | 	mov	local24, local21
07d34     20 8A 06 F1 | 	add	local24, #32
07d38     45 53 02 F6 | 	mov	arg01, local24
07d3c     40 DF BF FD | 	call	#_ff_cc_ld_dword_0212
07d40     16 89 02 F6 | 	mov	local23, result1
07d44                 | LR__0573
07d44     42 8D 02 F6 | 	mov	local25, local21
07d48     0E 8C 06 F1 | 	add	local25, #14
07d4c     46 53 02 F6 | 	mov	arg01, local25
07d50     08 DF BF FD | 	call	#_ff_cc_ld_word_0210
07d54     16 8F 02 F6 | 	mov	local26, result1
07d58     47 6D 02 F6 | 	mov	local09, local26
07d5c     0F 6C 4E F7 | 	zerox	local09, #15 wz
07d60     0D 2C 06 A6 |  if_e	mov	result1, #13
07d64     88 03 90 AD |  if_e	jmp	#LR__0580
07d68     47 91 02 F6 | 	mov	local27, local26
07d6c     0F 90 46 F7 | 	zerox	local27, #15
07d70     48 93 02 F6 | 	mov	local28, local27
07d74     3C 93 02 F1 | 	add	local28, local15
07d78     49 95 02 F6 | 	mov	local29, local28
07d7c     08 66 06 F1 | 	add	local06, #8
07d80     33 97 E2 FA | 	rdword	local30, local06
07d84     08 66 86 F1 | 	sub	local06, #8
07d88     0F 96 46 F7 | 	zerox	local30, #15
07d8c     4B 99 52 F6 | 	abs	local31, local30 wc
07d90     04 98 46 F0 | 	shr	local31, #4
07d94     4C 99 62 C6 |  if_b	neg	local31, local31
07d98     4C 95 02 F1 | 	add	local29, local31
07d9c     4A 89 1A F2 | 	cmp	local23, local29 wcz
07da0     0D 2C 06 C6 |  if_b	mov	result1, #13
07da4     48 03 90 CD |  if_b	jmp	#LR__0580
07da8     44 9B 02 F6 | 	mov	local32, local23
07dac     4A 9B 82 F1 | 	sub	local32, local29
07db0     0A 66 06 F1 | 	add	local06, #10
07db4     33 FF E2 FA | 	rdword	muldivb_, local06
07db8     0A 66 86 F1 | 	sub	local06, #10
07dbc     0F FE 46 F7 | 	zerox	muldivb_, #15
07dc0     4D FD 02 F6 | 	mov	muldiva_, local32
07dc4     CC 00 A0 FD | 	call	#unsdivide_
07dc8     7F 9D 0A F6 | 	mov	local33, muldivb_ wz
07dcc     0D 2C 06 A6 |  if_e	mov	result1, #13
07dd0     1C 03 90 AD |  if_e	jmp	#LR__0580
07dd4     00 70 06 F6 | 	mov	local11, #0
07dd8     FF FF 07 FF 
07ddc     F5 9D 1E F2 | 	cmp	local33, ##268435445 wcz
07de0     03 70 06 E6 |  if_be	mov	local11, #3
07de4     7F 00 00 FF 
07de8     F5 9D 1E F2 | 	cmp	local33, ##65525 wcz
07dec     02 70 06 E6 |  if_be	mov	local11, #2
07df0     07 00 00 FF 
07df4     F5 9D 1E F2 | 	cmp	local33, ##4085 wcz
07df8     01 70 06 E6 |  if_be	mov	local11, #1
07dfc     00 70 0E F2 | 	cmp	local11, #0 wz
07e00     0D 2C 06 A6 |  if_e	mov	result1, #13
07e04     E8 02 90 AD |  if_e	jmp	#LR__0580
07e08     4E 9F 02 F6 | 	mov	local34, local33
07e0c     02 9E 06 F1 | 	add	local34, #2
07e10     14 66 06 F1 | 	add	local06, #20
07e14     33 9F 62 FC | 	wrlong	local34, local06
07e18     08 66 06 F1 | 	add	local06, #8
07e1c     33 73 62 FC | 	wrlong	local12, local06
07e20     47 A1 02 F6 | 	mov	local35, local26
07e24     0F A0 46 F7 | 	zerox	local35, #15
07e28     39 A3 02 F6 | 	mov	local36, local12
07e2c     50 A3 02 F1 | 	add	local36, local35
07e30     04 66 06 F1 | 	add	local06, #4
07e34     33 A3 62 FC | 	wrlong	local36, local06
07e38     39 A5 02 F6 | 	mov	local37, local12
07e3c     4A A5 02 F1 | 	add	local37, local29
07e40     08 66 06 F1 | 	add	local06, #8
07e44     33 A5 62 FC | 	wrlong	local37, local06
07e48     28 66 86 F1 | 	sub	local06, #40
07e4c     03 70 0E F2 | 	cmp	local11, #3 wz
07e50     74 00 90 5D |  if_ne	jmp	#LR__0574
07e54     30 66 06 F1 | 	add	local06, #48
07e58     33 53 02 F6 | 	mov	arg01, local06
07e5c     30 66 86 F1 | 	sub	local06, #48
07e60     2A 52 06 F1 | 	add	arg01, #42
07e64     F4 DD BF FD | 	call	#_ff_cc_ld_word_0210
07e68     16 6D 02 F6 | 	mov	local09, result1
07e6c     0F 6C 4E F7 | 	zerox	local09, #15 wz
07e70     0D 2C 06 56 |  if_ne	mov	result1, #13
07e74     78 02 90 5D |  if_ne	jmp	#LR__0580
07e78     08 66 06 F1 | 	add	local06, #8
07e7c     33 6D E2 FA | 	rdword	local09, local06
07e80     08 66 86 F1 | 	sub	local06, #8
07e84     0F 6C 4E F7 | 	zerox	local09, #15 wz
07e88     0D 2C 06 56 |  if_ne	mov	result1, #13
07e8c     60 02 90 5D |  if_ne	jmp	#LR__0580
07e90     30 66 06 F1 | 	add	local06, #48
07e94     33 A7 02 F6 | 	mov	local38, local06
07e98     53 A9 02 F6 | 	mov	local39, local38
07e9c     2C A8 06 F1 | 	add	local39, #44
07ea0     54 53 02 F6 | 	mov	arg01, local39
07ea4     30 66 86 F1 | 	sub	local06, #48
07ea8     D4 DD BF FD | 	call	#_ff_cc_ld_dword_0212
07eac     24 66 06 F1 | 	add	local06, #36
07eb0     33 2D 62 FC | 	wrlong	result1, local06
07eb4     10 66 86 F1 | 	sub	local06, #16
07eb8     33 AB 02 FB | 	rdlong	local40, local06
07ebc     14 66 86 F1 | 	sub	local06, #20
07ec0     02 AA 66 F0 | 	shl	local40, #2
07ec4     74 00 90 FD | 	jmp	#LR__0577
07ec8                 | LR__0574
07ec8     08 66 06 F1 | 	add	local06, #8
07ecc     33 6D E2 FA | 	rdword	local09, local06
07ed0     08 66 86 F1 | 	sub	local06, #8
07ed4     0F 6C 4E F7 | 	zerox	local09, #15 wz
07ed8     0D 2C 06 A6 |  if_e	mov	result1, #13
07edc     10 02 90 AD |  if_e	jmp	#LR__0580
07ee0     20 66 06 F1 | 	add	local06, #32
07ee4     33 6D 02 FB | 	rdlong	local09, local06
07ee8     3C 6D 02 F1 | 	add	local09, local15
07eec     04 66 06 F1 | 	add	local06, #4
07ef0     33 6D 62 FC | 	wrlong	local09, local06
07ef4     24 66 86 F1 | 	sub	local06, #36
07ef8     02 70 0E F2 | 	cmp	local11, #2 wz
07efc     14 00 90 5D |  if_ne	jmp	#LR__0575
07f00     14 66 06 F1 | 	add	local06, #20
07f04     33 6D 02 FB | 	rdlong	local09, local06
07f08     14 66 86 F1 | 	sub	local06, #20
07f0c     01 6C 66 F0 | 	shl	local09, #1
07f10     24 00 90 FD | 	jmp	#LR__0576
07f14                 | LR__0575
07f14     14 66 06 F1 | 	add	local06, #20
07f18     33 AD 02 FB | 	rdlong	local41, local06
07f1c     56 6D 02 F6 | 	mov	local09, local41
07f20     01 6C 66 F0 | 	shl	local09, #1
07f24     56 6D 02 F1 | 	add	local09, local41
07f28     01 6C 46 F0 | 	shr	local09, #1
07f2c     14 66 86 F1 | 	sub	local06, #20
07f30     01 AC CE F7 | 	test	local41, #1 wz
07f34     01 6C 06 51 |  if_ne	add	local09, #1
07f38                 | LR__0576
07f38     36 AB 02 F6 | 	mov	local40, local09
07f3c                 | LR__0577
07f3c     55 97 02 F6 | 	mov	local30, local40
07f40     FF 97 06 F1 | 	add	local30, #511
07f44     09 96 46 F0 | 	shr	local30, #9
07f48     18 66 06 F1 | 	add	local06, #24
07f4c     33 7D 02 FB | 	rdlong	local17, local06
07f50     18 66 86 F1 | 	sub	local06, #24
07f54     4B 7D 1A F2 | 	cmp	local17, local30 wcz
07f58     0D 2C 06 C6 |  if_b	mov	result1, #13
07f5c     90 01 90 CD |  if_b	jmp	#LR__0580
07f60     10 66 06 F1 | 	add	local06, #16
07f64     FF FF FF FF 
07f68     33 FF 6B FC | 	wrlong	##-1, local06
07f6c     04 66 86 F1 | 	sub	local06, #4
07f70     FF FF FF FF 
07f74     33 FF 6B FC | 	wrlong	##-1, local06
07f78     08 66 86 F1 | 	sub	local06, #8
07f7c     33 01 49 FC | 	wrbyte	#128, local06
07f80     04 66 86 F1 | 	sub	local06, #4
07f84     03 70 0E F2 | 	cmp	local11, #3 wz
07f88     3C 01 90 5D |  if_ne	jmp	#LR__0579
07f8c     30 66 06 F1 | 	add	local06, #48
07f90     33 53 02 F6 | 	mov	arg01, local06
07f94     30 66 86 F1 | 	sub	local06, #48
07f98     30 52 06 F1 | 	add	arg01, #48
07f9c     BC DC BF FD | 	call	#_ff_cc_ld_word_0210
07fa0     16 6D 02 F6 | 	mov	local09, result1
07fa4     0F 6C 46 F7 | 	zerox	local09, #15
07fa8     01 6C 0E F2 | 	cmp	local09, #1 wz
07fac     18 01 90 5D |  if_ne	jmp	#LR__0579
07fb0     33 AF 02 F6 | 	mov	local42, local06
07fb4     39 B1 02 F6 | 	mov	local43, local12
07fb8     01 B0 06 F1 | 	add	local43, #1
07fbc     58 B3 02 F6 | 	mov	local44, local43
07fc0     57 53 02 F6 | 	mov	arg01, local42
07fc4     59 55 02 F6 | 	mov	arg02, local44
07fc8     AC DE BF FD | 	call	#_ff_cc_move_window_0230
07fcc     16 B5 0A F6 | 	mov	local45, result1 wz
07fd0     F4 00 90 5D |  if_ne	jmp	#LR__0579
07fd4     04 66 06 F1 | 	add	local06, #4
07fd8     33 01 48 FC | 	wrbyte	#0, local06
07fdc     2C 66 06 F1 | 	add	local06, #44
07fe0     33 7D 02 F6 | 	mov	local17, local06
07fe4     3E 97 02 F6 | 	mov	local30, local17
07fe8     FE 97 06 F1 | 	add	local30, #510
07fec     4B 99 02 F6 | 	mov	local31, local30
07ff0     4C 53 02 F6 | 	mov	arg01, local31
07ff4     30 66 86 F1 | 	sub	local06, #48
07ff8     60 DC BF FD | 	call	#_ff_cc_ld_word_0210
07ffc     16 7F 02 F6 | 	mov	local18, result1
08000     3F 6D 02 F6 | 	mov	local09, local18
08004     0F 6C 46 F7 | 	zerox	local09, #15
08008     55 00 00 FF 
0800c     55 6C 0E F2 | 	cmp	local09, ##43605 wz
08010     B4 00 90 5D |  if_ne	jmp	#LR__0578
08014     30 66 06 F1 | 	add	local06, #48
08018     33 B1 02 F6 | 	mov	local43, local06
0801c     58 AF 02 F6 | 	mov	local42, local43
08020     57 B3 02 F6 | 	mov	local44, local42
08024     59 53 02 F6 | 	mov	arg01, local44
08028     30 66 86 F1 | 	sub	local06, #48
0802c     50 DC BF FD | 	call	#_ff_cc_ld_dword_0212
08030     16 B5 02 F6 | 	mov	local45, result1
08034     A9 B0 20 FF 
08038     52 B4 0E F2 | 	cmp	local45, ##1096897106 wz
0803c     88 00 90 5D |  if_ne	jmp	#LR__0578
08040     30 66 06 F1 | 	add	local06, #48
08044     33 B7 02 F6 | 	mov	local46, local06
08048     5B AD 02 F6 | 	mov	local41, local46
0804c     E4 AD 06 F1 | 	add	local41, #484
08050     56 B9 02 F6 | 	mov	local47, local41
08054     5C 53 02 F6 | 	mov	arg01, local47
08058     30 66 86 F1 | 	sub	local06, #48
0805c     20 DC BF FD | 	call	#_ff_cc_ld_dword_0212
08060     16 BB 02 F6 | 	mov	local48, result1
08064     B9 A0 30 FF 
08068     72 BA 0E F2 | 	cmp	local48, ##1631679090 wz
0806c     58 00 90 5D |  if_ne	jmp	#LR__0578
08070     30 66 06 F1 | 	add	local06, #48
08074     33 BD 02 F6 | 	mov	local49, local06
08078     5E BF 02 F6 | 	mov	local50, local49
0807c     E8 BF 06 F1 | 	add	local50, #488
08080     5F 53 02 F6 | 	mov	arg01, local50
08084     30 66 86 F1 | 	sub	local06, #48
08088     F4 DB BF FD | 	call	#_ff_cc_ld_dword_0212
0808c     16 97 02 F6 | 	mov	local30, result1
08090     10 66 06 F1 | 	add	local06, #16
08094     33 97 62 FC | 	wrlong	local30, local06
08098     20 66 06 F1 | 	add	local06, #32
0809c     33 C1 02 F6 | 	mov	local51, local06
080a0     60 C3 02 F6 | 	mov	local52, local51
080a4     EC C3 06 F1 | 	add	local52, #492
080a8     61 6D 02 F6 | 	mov	local09, local52
080ac     36 53 02 F6 | 	mov	arg01, local09
080b0     30 66 86 F1 | 	sub	local06, #48
080b4     C8 DB BF FD | 	call	#_ff_cc_ld_dword_0212
080b8     16 97 02 F6 | 	mov	local30, result1
080bc     0C 66 06 F1 | 	add	local06, #12
080c0     33 97 62 FC | 	wrlong	local30, local06
080c4     0C 66 86 F1 | 	sub	local06, #12
080c8                 | LR__0578
080c8                 | LR__0579
080c8     33 71 42 FC | 	wrbyte	local11, local06
080cc     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
080d0     0F 6D E2 FA | 	rdword	local09, ptr__ff_cc_dat__
080d4     01 6C 06 F1 | 	add	local09, #1
080d8     0F 6D 52 FC | 	wrword	local09, ptr__ff_cc_dat__
080dc     0F 7D E2 FA | 	rdword	local17, ptr__ff_cc_dat__
080e0     04 1E 86 F1 | 	sub	ptr__ff_cc_dat__, #4
080e4     06 66 06 F1 | 	add	local06, #6
080e8     33 7D 52 FC | 	wrword	local17, local06
080ec                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
080ec                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
080ec                 | ' 			{
080ec                 | ' 
080ec                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
080ec                 | ' 
080ec                 | ' 
080ec                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
080ec                 | ' 
080ec                 | ' 			}
080ec                 | ' 		}
080ec                 | ' 
080ec                 | ' 
080ec                 | ' 	}
080ec                 | ' 
080ec                 | ' 	fs->fs_type = (BYTE)fmt;
080ec                 | ' 	fs->id = ++Fsid;
080ec                 | ' #line 3589 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
080ec                 | ' 	return FR_OK;
080ec     00 2C 06 F6 | 	mov	result1, #0
080f0                 | LR__0580
080f0     AF F0 03 F6 | 	mov	ptra, fp
080f4     BF 00 A0 FD | 	call	#popregs_
080f8                 | _ff_cc_mount_volume_0326_ret
080f8     2D 00 64 FD | 	ret
080fc                 | 
080fc                 | _ff_cc_validate_0328
080fc     0B 5A 05 F6 | 	mov	COUNT_, #11
08100     B0 00 A0 FD | 	call	#pushregs_
08104     29 5D 0A F6 | 	mov	local01, arg01 wz
08108     2A 5F 02 F6 | 	mov	local02, arg02
0810c     09 60 06 F6 | 	mov	local03, #9
08110     80 00 90 AD |  if_e	jmp	#LR__0581
08114     2E 63 0A FB | 	rdlong	local04, local01 wz
08118     78 00 90 AD |  if_e	jmp	#LR__0581
0811c     2E 65 02 FB | 	rdlong	local05, local01
08120     32 67 CA FA | 	rdbyte	local06, local05 wz
08124     6C 00 90 AD |  if_e	jmp	#LR__0581
08128     04 5C 06 F1 | 	add	local01, #4
0812c     2E 69 E2 FA | 	rdword	local07, local01
08130     04 5C 86 F1 | 	sub	local01, #4
08134     0F 68 46 F7 | 	zerox	local07, #15
08138     2E 6B 02 FB | 	rdlong	local08, local01
0813c     06 6A 06 F1 | 	add	local08, #6
08140     35 6D E2 FA | 	rdword	local09, local08
08144     06 6A 86 F1 | 	sub	local08, #6
08148     36 6F 02 F6 | 	mov	local10, local09
0814c     0F 6E 46 F7 | 	zerox	local10, #15
08150     37 69 0A F2 | 	cmp	local07, local10 wz
08154     3C 00 90 5D |  if_ne	jmp	#LR__0581
08158     2E 65 02 FB | 	rdlong	local05, local01
0815c     01 64 06 F1 | 	add	local05, #1
08160     32 69 C2 FA | 	rdbyte	local07, local05
08164     01 64 86 F1 | 	sub	local05, #1
08168     34 67 02 F6 | 	mov	local06, local07
0816c     33 53 0A F6 | 	mov	arg01, local06 wz
08170     01 2C 06 56 |  if_ne	mov	result1, #1
08174                 | ' 
08174                 | ' 	return Stat;
08174     7C 1F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08178     0F 2D C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0817c     7C 1F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
08180     16 71 02 F6 | 	mov	local11, result1
08184     38 63 02 F6 | 	mov	local04, local11
08188     07 62 46 F7 | 	zerox	local04, #7
0818c     01 62 0E F5 | 	and	local04, #1 wz
08190     00 60 06 A6 |  if_e	mov	local03, #0
08194                 | LR__0581
08194     00 60 0E F2 | 	cmp	local03, #0 wz
08198     2E 63 02 AB |  if_e	rdlong	local04, local01
0819c     00 62 06 56 |  if_ne	mov	local04, #0
081a0     2F 63 62 FC | 	wrlong	local04, local02
081a4                 | ' 			res = FR_OK;
081a4                 | ' 		}
081a4                 | ' 
081a4                 | ' 	}
081a4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
081a4                 | ' 	return res;
081a4     30 2D 02 F6 | 	mov	result1, local03
081a8     AF F0 03 F6 | 	mov	ptra, fp
081ac     BF 00 A0 FD | 	call	#popregs_
081b0                 | _ff_cc_validate_0328_ret
081b0     2D 00 64 FD | 	ret
081b4                 | 
081b4                 | _ff_cc_f_mount
081b4     03 5A 05 F6 | 	mov	COUNT_, #3
081b8     B0 00 A0 FD | 	call	#pushregs_
081bc     34 F0 07 F1 | 	add	ptra, #52
081c0     04 5E 05 F1 | 	add	fp, #4
081c4     AF 52 62 FC | 	wrlong	arg01, fp
081c8     04 5E 05 F1 | 	add	fp, #4
081cc     AF 54 62 FC | 	wrlong	arg02, fp
081d0     04 5E 05 F1 | 	add	fp, #4
081d4     AF 56 42 FC | 	wrbyte	arg03, fp
081d8     04 5E 85 F1 | 	sub	fp, #4
081dc     AF 5C 02 FB | 	rdlong	local01, fp
081e0     14 5E 05 F1 | 	add	fp, #20
081e4     AF 5C 62 FC | 	wrlong	local01, fp
081e8     AF 52 02 F6 | 	mov	arg01, fp
081ec     1C 5E 85 F1 | 	sub	fp, #28
081f0     78 F5 BF FD | 	call	#_ff_cc_get_ldnumber_0309
081f4     14 5E 05 F1 | 	add	fp, #20
081f8     AF 2C 62 FC | 	wrlong	result1, fp
081fc     16 5D 02 F6 | 	mov	local01, result1
08200     14 5E 85 F1 | 	sub	fp, #20
08204     00 5C 5E F2 | 	cmps	local01, #0 wcz
08208     0B 2C 06 C6 |  if_b	mov	result1, #11
0820c     B4 00 90 CD |  if_b	jmp	#LR__0584
08210     14 5E 05 F1 | 	add	fp, #20
08214     AF 5E 02 FB | 	rdlong	local02, fp
08218     02 5E 66 F0 | 	shl	local02, #2
0821c     0F 5F 02 F1 | 	add	local02, ptr__ff_cc_dat__
08220     2F 5D 02 FB | 	rdlong	local01, local02
08224     04 5E 85 F1 | 	sub	fp, #4
08228     AF 5C 62 FC | 	wrlong	local01, fp
0822c     AF 5C 0A FB | 	rdlong	local01, fp wz
08230     10 5E 85 F1 | 	sub	fp, #16
08234     10 00 90 AD |  if_e	jmp	#LR__0582
08238     10 5E 05 F1 | 	add	fp, #16
0823c     AF 5C 02 FB | 	rdlong	local01, fp
08240     10 5E 85 F1 | 	sub	fp, #16
08244     2E 01 48 FC | 	wrbyte	#0, local01
08248                 | LR__0582
08248     04 5E 05 F1 | 	add	fp, #4
0824c     AF 5C 0A FB | 	rdlong	local01, fp wz
08250     04 5E 85 F1 | 	sub	fp, #4
08254     10 00 90 AD |  if_e	jmp	#LR__0583
08258     04 5E 05 F1 | 	add	fp, #4
0825c     AF 5C 02 FB | 	rdlong	local01, fp
08260     04 5E 85 F1 | 	sub	fp, #4
08264     2E 01 48 FC | 	wrbyte	#0, local01
08268                 | LR__0583
08268     14 5E 05 F1 | 	add	fp, #20
0826c     AF 60 02 FB | 	rdlong	local03, fp
08270     02 60 66 F0 | 	shl	local03, #2
08274     0F 61 02 F1 | 	add	local03, ptr__ff_cc_dat__
08278     10 5E 85 F1 | 	sub	fp, #16
0827c     AF 5C 02 FB | 	rdlong	local01, fp
08280     30 5D 62 FC | 	wrlong	local01, local03
08284     08 5E 05 F1 | 	add	fp, #8
08288     AF 5C C2 FA | 	rdbyte	local01, fp
0828c     0C 5E 85 F1 | 	sub	fp, #12
08290     07 5C 4E F7 | 	zerox	local01, #7 wz
08294     00 2C 06 A6 |  if_e	mov	result1, #0
08298     28 00 90 AD |  if_e	jmp	#LR__0584
0829c     08 5E 05 F1 | 	add	fp, #8
082a0     AF 52 02 F6 | 	mov	arg01, fp
082a4     04 5E 85 F1 | 	sub	fp, #4
082a8     AF 54 02 F6 | 	mov	arg02, fp
082ac     04 5E 85 F1 | 	sub	fp, #4
082b0     00 56 06 F6 | 	mov	arg03, #0
082b4     D0 F7 BF FD | 	call	#_ff_cc_mount_volume_0326
082b8     18 5E 05 F1 | 	add	fp, #24
082bc     AF 2C 62 FC | 	wrlong	result1, fp
082c0                 | ' 
082c0                 | ' 	res = mount_volume(&path, &fs, 0);
082c0                 | ' 	return res ;
082c0     18 5E 85 F1 | 	sub	fp, #24
082c4                 | LR__0584
082c4     AF F0 03 F6 | 	mov	ptra, fp
082c8     BF 00 A0 FD | 	call	#popregs_
082cc                 | _ff_cc_f_mount_ret
082cc     2D 00 64 FD | 	ret
082d0                 | 
082d0                 | _ff_cc_f_open
082d0     18 5A 05 F6 | 	mov	COUNT_, #24
082d4     B0 00 A0 FD | 	call	#pushregs_
082d8     84 F0 07 F1 | 	add	ptra, #132
082dc     04 5E 05 F1 | 	add	fp, #4
082e0     AF 52 62 FC | 	wrlong	arg01, fp
082e4     04 5E 05 F1 | 	add	fp, #4
082e8     AF 54 62 FC | 	wrlong	arg02, fp
082ec     04 5E 05 F1 | 	add	fp, #4
082f0     AF 56 42 FC | 	wrbyte	arg03, fp
082f4     08 5E 85 F1 | 	sub	fp, #8
082f8     AF 5C 0A FB | 	rdlong	local01, fp wz
082fc     04 5E 85 F1 | 	sub	fp, #4
08300     09 2C 06 A6 |  if_e	mov	result1, #9
08304     00 07 90 AD |  if_e	jmp	#LR__0608
08308     0C 5E 05 F1 | 	add	fp, #12
0830c     AF 5E C2 FA | 	rdbyte	local02, fp
08310     2F 5D 02 F6 | 	mov	local01, local02
08314     3F 5C 06 F5 | 	and	local01, #63
08318     AF 5C 42 FC | 	wrbyte	local01, fp
0831c     04 5E 85 F1 | 	sub	fp, #4
08320     AF 60 02 F6 | 	mov	local03, fp
08324     38 5E 05 F1 | 	add	fp, #56
08328     AF 62 02 F6 | 	mov	local04, fp
0832c     34 5E 85 F1 | 	sub	fp, #52
08330     AF 56 C2 FA | 	rdbyte	arg03, fp
08334     0C 5E 85 F1 | 	sub	fp, #12
08338     30 53 02 F6 | 	mov	arg01, local03
0833c     31 55 02 F6 | 	mov	arg02, local04
08340     44 F7 BF FD | 	call	#_ff_cc_mount_volume_0326
08344     16 65 02 F6 | 	mov	local05, result1
08348     10 5E 05 F1 | 	add	fp, #16
0834c     AF 64 62 FC | 	wrlong	local05, fp
08350     AF 5C 0A FB | 	rdlong	local01, fp wz
08354     10 5E 85 F1 | 	sub	fp, #16
08358     80 06 90 5D |  if_ne	jmp	#LR__0606
0835c     40 5E 05 F1 | 	add	fp, #64
08360     AF 5C 02 FB | 	rdlong	local01, fp
08364     2C 5E 85 F1 | 	sub	fp, #44
08368     AF 5C 62 FC | 	wrlong	local01, fp
0836c     AF 66 02 F6 | 	mov	local06, fp
08370     0C 5E 85 F1 | 	sub	fp, #12
08374     AF 68 02 FB | 	rdlong	local07, fp
08378     08 5E 85 F1 | 	sub	fp, #8
0837c     33 53 02 F6 | 	mov	arg01, local06
08380     34 55 02 F6 | 	mov	arg02, local07
08384     BC F1 BF FD | 	call	#_ff_cc_follow_path_0303
08388     16 6B 02 F6 | 	mov	local08, result1
0838c     10 5E 05 F1 | 	add	fp, #16
08390     AF 6A 62 FC | 	wrlong	local08, fp
08394     AF 5C 0A FB | 	rdlong	local01, fp wz
08398     10 5E 85 F1 | 	sub	fp, #16
0839c     20 00 90 5D |  if_ne	jmp	#LR__0585
083a0     3F 5E 05 F1 | 	add	fp, #63
083a4     AF 5C C2 FA | 	rdbyte	local01, fp
083a8     3F 5E 85 F1 | 	sub	fp, #63
083ac     07 5C 46 F7 | 	zerox	local01, #7
083b0     80 5C CE F7 | 	test	local01, #128 wz
083b4     10 5E 05 51 |  if_ne	add	fp, #16
083b8     AF 0C 68 5C |  if_ne	wrlong	#6, fp
083bc     10 5E 85 51 |  if_ne	sub	fp, #16
083c0                 | LR__0585
083c0     0C 5E 05 F1 | 	add	fp, #12
083c4     AF 5C C2 FA | 	rdbyte	local01, fp
083c8     0C 5E 85 F1 | 	sub	fp, #12
083cc     07 5C 46 F7 | 	zerox	local01, #7
083d0     1C 5C CE F7 | 	test	local01, #28 wz
083d4     04 02 90 AD |  if_e	jmp	#LR__0591
083d8     10 5E 05 F1 | 	add	fp, #16
083dc     AF 5C 0A FB | 	rdlong	local01, fp wz
083e0     10 5E 85 F1 | 	sub	fp, #16
083e4     44 00 90 AD |  if_e	jmp	#LR__0587
083e8     10 5E 05 F1 | 	add	fp, #16
083ec     AF 5C 02 FB | 	rdlong	local01, fp
083f0     10 5E 85 F1 | 	sub	fp, #16
083f4     04 5C 0E F2 | 	cmp	local01, #4 wz
083f8     14 00 90 5D |  if_ne	jmp	#LR__0586
083fc     33 53 02 F6 | 	mov	arg01, local06
08400     9C EC BF FD | 	call	#_ff_cc_dir_register_0284
08404     10 5E 05 F1 | 	add	fp, #16
08408     AF 2C 62 FC | 	wrlong	result1, fp
0840c     10 5E 85 F1 | 	sub	fp, #16
08410                 | LR__0586
08410     0C 5E 05 F1 | 	add	fp, #12
08414     AF 6C C2 FA | 	rdbyte	local09, fp
08418     36 6F 02 F6 | 	mov	local10, local09
0841c     08 6E 46 F5 | 	or	local10, #8
08420     AF 6E 42 FC | 	wrbyte	local10, fp
08424     0C 5E 85 F1 | 	sub	fp, #12
08428     48 00 90 FD | 	jmp	#LR__0590
0842c                 | LR__0587
0842c     1A 5E 05 F1 | 	add	fp, #26
08430     AF 5C C2 FA | 	rdbyte	local01, fp
08434     1A 5E 85 F1 | 	sub	fp, #26
08438     07 5C 46 F7 | 	zerox	local01, #7
0843c     11 5C CE F7 | 	test	local01, #17 wz
08440     10 00 90 AD |  if_e	jmp	#LR__0588
08444     10 5E 05 F1 | 	add	fp, #16
08448     AF 0E 68 FC | 	wrlong	#7, fp
0844c     10 5E 85 F1 | 	sub	fp, #16
08450     20 00 90 FD | 	jmp	#LR__0589
08454                 | LR__0588
08454     0C 5E 05 F1 | 	add	fp, #12
08458     AF 5C C2 FA | 	rdbyte	local01, fp
0845c     0C 5E 85 F1 | 	sub	fp, #12
08460     07 5C 46 F7 | 	zerox	local01, #7
08464     04 5C CE F7 | 	test	local01, #4 wz
08468     10 5E 05 51 |  if_ne	add	fp, #16
0846c     AF 10 68 5C |  if_ne	wrlong	#8, fp
08470     10 5E 85 51 |  if_ne	sub	fp, #16
08474                 | LR__0589
08474                 | LR__0590
08474     10 5E 05 F1 | 	add	fp, #16
08478     AF 5C 0A FB | 	rdlong	local01, fp wz
0847c     10 5E 85 F1 | 	sub	fp, #16
08480     D8 01 90 5D |  if_ne	jmp	#LR__0596
08484     0C 5E 05 F1 | 	add	fp, #12
08488     AF 68 C2 FA | 	rdbyte	local07, fp
0848c     0C 5E 85 F1 | 	sub	fp, #12
08490     07 68 46 F7 | 	zerox	local07, #7
08494     08 68 CE F7 | 	test	local07, #8 wz
08498     C0 01 90 AD |  if_e	jmp	#LR__0596
0849c     40 5E 05 F1 | 	add	fp, #64
084a0     AF 52 02 FB | 	rdlong	arg01, fp
084a4     10 5E 85 F1 | 	sub	fp, #16
084a8     AF 54 02 FB | 	rdlong	arg02, fp
084ac     30 5E 85 F1 | 	sub	fp, #48
084b0     38 E9 BF FD | 	call	#_ff_cc_ld_clust_0271
084b4     16 65 02 F6 | 	mov	local05, result1
084b8     44 5E 05 F1 | 	add	fp, #68
084bc     AF 64 62 FC | 	wrlong	local05, fp
084c0     14 5E 85 F1 | 	sub	fp, #20
084c4     AF 52 02 FB | 	rdlong	arg01, fp
084c8     30 5E 85 F1 | 	sub	fp, #48
084cc     0E 52 06 F1 | 	add	arg01, #14
084d0     80 10 27 FF 
084d4     00 54 06 F6 | 	mov	arg02, ##1310785536
084d8     08 D8 BF FD | 	call	#_ff_cc_st_dword_0214
084dc     30 5E 05 F1 | 	add	fp, #48
084e0     AF 5C 02 FB | 	rdlong	local01, fp
084e4     0B 5C 06 F1 | 	add	local01, #11
084e8     2E 41 48 FC | 	wrbyte	#32, local01
084ec     10 5E 05 F1 | 	add	fp, #16
084f0     AF 52 02 FB | 	rdlong	arg01, fp
084f4     10 5E 85 F1 | 	sub	fp, #16
084f8     AF 54 02 FB | 	rdlong	arg02, fp
084fc     30 5E 85 F1 | 	sub	fp, #48
08500     00 56 06 F6 | 	mov	arg03, #0
08504     3C E9 BF FD | 	call	#_ff_cc_st_clust_0272
08508     30 5E 05 F1 | 	add	fp, #48
0850c     AF 52 02 FB | 	rdlong	arg01, fp
08510     30 5E 85 F1 | 	sub	fp, #48
08514     1C 52 06 F1 | 	add	arg01, #28
08518     00 54 06 F6 | 	mov	arg02, #0
0851c     C4 D7 BF FD | 	call	#_ff_cc_st_dword_0214
08520     40 5E 05 F1 | 	add	fp, #64
08524     AF 5C 02 FB | 	rdlong	local01, fp
08528     03 5C 06 F1 | 	add	local01, #3
0852c     2E 03 48 FC | 	wrbyte	#1, local01
08530     04 5E 05 F1 | 	add	fp, #4
08534     AF 70 02 FB | 	rdlong	local11, fp
08538     44 5E 85 F1 | 	sub	fp, #68
0853c     38 5D 0A F6 | 	mov	local01, local11 wz
08540     18 01 90 AD |  if_e	jmp	#LR__0596
08544     40 5E 05 F1 | 	add	fp, #64
08548     AF 5C 02 FB | 	rdlong	local01, fp
0854c     2C 5C 06 F1 | 	add	local01, #44
08550     2E 69 02 FB | 	rdlong	local07, local01
08554     10 5E 05 F1 | 	add	fp, #16
08558     AF 68 62 FC | 	wrlong	local07, fp
0855c     3C 5E 85 F1 | 	sub	fp, #60
08560     AF 72 02 F6 | 	mov	local12, fp
08564     30 5E 05 F1 | 	add	fp, #48
08568     AF 54 02 FB | 	rdlong	arg02, fp
0856c     44 5E 85 F1 | 	sub	fp, #68
08570     39 53 02 F6 | 	mov	arg01, local12
08574     00 56 06 F6 | 	mov	arg03, #0
08578     F4 DF BF FD | 	call	#_ff_cc_remove_chain_0246
0857c     16 71 02 F6 | 	mov	local11, result1
08580     10 5E 05 F1 | 	add	fp, #16
08584     AF 70 62 FC | 	wrlong	local11, fp
08588     10 5E 85 F1 | 	sub	fp, #16
0858c     38 5D 0A F6 | 	mov	local01, local11 wz
08590     C8 00 90 5D |  if_ne	jmp	#LR__0596
08594     40 5E 05 F1 | 	add	fp, #64
08598     AF 52 02 FB | 	rdlong	arg01, fp
0859c     10 5E 05 F1 | 	add	fp, #16
085a0     AF 54 02 FB | 	rdlong	arg02, fp
085a4     50 5E 85 F1 | 	sub	fp, #80
085a8     CC D8 BF FD | 	call	#_ff_cc_move_window_0230
085ac     16 65 02 F6 | 	mov	local05, result1
085b0     10 5E 05 F1 | 	add	fp, #16
085b4     AF 64 62 FC | 	wrlong	local05, fp
085b8     34 5E 05 F1 | 	add	fp, #52
085bc     AF 74 02 FB | 	rdlong	local13, fp
085c0     01 74 86 F1 | 	sub	local13, #1
085c4     04 5E 85 F1 | 	sub	fp, #4
085c8     AF 5C 02 FB | 	rdlong	local01, fp
085cc     40 5E 85 F1 | 	sub	fp, #64
085d0     0C 5C 06 F1 | 	add	local01, #12
085d4     2E 75 62 FC | 	wrlong	local13, local01
085d8     80 00 90 FD | 	jmp	#LR__0596
085dc                 | LR__0591
085dc     10 5E 05 F1 | 	add	fp, #16
085e0     AF 5C 0A FB | 	rdlong	local01, fp wz
085e4     10 5E 85 F1 | 	sub	fp, #16
085e8     70 00 90 5D |  if_ne	jmp	#LR__0595
085ec     1A 5E 05 F1 | 	add	fp, #26
085f0     AF 5C C2 FA | 	rdbyte	local01, fp
085f4     1A 5E 85 F1 | 	sub	fp, #26
085f8     07 5C 46 F7 | 	zerox	local01, #7
085fc     10 5C CE F7 | 	test	local01, #16 wz
08600     10 00 90 AD |  if_e	jmp	#LR__0592
08604     10 5E 05 F1 | 	add	fp, #16
08608     AF 08 68 FC | 	wrlong	#4, fp
0860c     10 5E 85 F1 | 	sub	fp, #16
08610     48 00 90 FD | 	jmp	#LR__0594
08614                 | LR__0592
08614     0C 5E 05 F1 | 	add	fp, #12
08618     AF 70 C2 FA | 	rdbyte	local11, fp
0861c     0C 5E 85 F1 | 	sub	fp, #12
08620     38 5D 02 F6 | 	mov	local01, local11
08624     07 5C 46 F7 | 	zerox	local01, #7
08628     02 5C CE F7 | 	test	local01, #2 wz
0862c     2C 00 90 AD |  if_e	jmp	#LR__0593
08630     1A 5E 05 F1 | 	add	fp, #26
08634     AF 6A C2 FA | 	rdbyte	local08, fp
08638     1A 5E 85 F1 | 	sub	fp, #26
0863c     35 69 02 F6 | 	mov	local07, local08
08640     07 68 46 F7 | 	zerox	local07, #7
08644     01 68 0E F5 | 	and	local07, #1 wz
08648     10 00 90 AD |  if_e	jmp	#LR__0593
0864c     07 5C 06 F6 | 	mov	local01, #7
08650     10 5E 05 F1 | 	add	fp, #16
08654     AF 0E 68 FC | 	wrlong	#7, fp
08658     10 5E 85 F1 | 	sub	fp, #16
0865c                 | LR__0593
0865c                 | LR__0594
0865c                 | LR__0595
0865c                 | LR__0596
0865c     10 5E 05 F1 | 	add	fp, #16
08660     AF 5C 0A FB | 	rdlong	local01, fp wz
08664     10 5E 85 F1 | 	sub	fp, #16
08668     6C 00 90 5D |  if_ne	jmp	#LR__0598
0866c     0C 5E 05 F1 | 	add	fp, #12
08670     AF 5C C2 FA | 	rdbyte	local01, fp
08674     0C 5E 85 F1 | 	sub	fp, #12
08678     07 5C 46 F7 | 	zerox	local01, #7
0867c     08 5C CE F7 | 	test	local01, #8 wz
08680     18 00 90 AD |  if_e	jmp	#LR__0597
08684     0C 5E 05 F1 | 	add	fp, #12
08688     AF 76 C2 FA | 	rdbyte	local14, fp
0868c     3B 79 02 F6 | 	mov	local15, local14
08690     40 78 46 F5 | 	or	local15, #64
08694     AF 78 42 FC | 	wrbyte	local15, fp
08698     0C 5E 85 F1 | 	sub	fp, #12
0869c                 | LR__0597
0869c     04 5E 05 F1 | 	add	fp, #4
086a0     AF 5C 02 FB | 	rdlong	local01, fp
086a4     3C 5E 05 F1 | 	add	fp, #60
086a8     AF 68 02 FB | 	rdlong	local07, fp
086ac     2C 68 06 F1 | 	add	local07, #44
086b0     34 65 02 FB | 	rdlong	local05, local07
086b4     20 5C 06 F1 | 	add	local01, #32
086b8     2E 65 62 FC | 	wrlong	local05, local01
086bc     3C 5E 85 F1 | 	sub	fp, #60
086c0     AF 5C 02 FB | 	rdlong	local01, fp
086c4     2C 5E 05 F1 | 	add	fp, #44
086c8     AF 68 02 FB | 	rdlong	local07, fp
086cc     30 5E 85 F1 | 	sub	fp, #48
086d0     24 5C 06 F1 | 	add	local01, #36
086d4     2E 69 62 FC | 	wrlong	local07, local01
086d8                 | LR__0598
086d8     10 5E 05 F1 | 	add	fp, #16
086dc     AF 5C 0A FB | 	rdlong	local01, fp wz
086e0     10 5E 85 F1 | 	sub	fp, #16
086e4     F4 02 90 5D |  if_ne	jmp	#LR__0605
086e8     04 5E 05 F1 | 	add	fp, #4
086ec     AF 5C 02 FB | 	rdlong	local01, fp
086f0     3C 5E 05 F1 | 	add	fp, #60
086f4     AF 52 02 FB | 	rdlong	arg01, fp
086f8     10 5E 85 F1 | 	sub	fp, #16
086fc     AF 54 02 FB | 	rdlong	arg02, fp
08700     30 5E 85 F1 | 	sub	fp, #48
08704     E4 E6 BF FD | 	call	#_ff_cc_ld_clust_0271
08708     16 7B 02 F6 | 	mov	local16, result1
0870c     08 5C 06 F1 | 	add	local01, #8
08710     2E 7B 62 FC | 	wrlong	local16, local01
08714     04 5E 05 F1 | 	add	fp, #4
08718     AF 5C 02 FB | 	rdlong	local01, fp
0871c     2C 5E 05 F1 | 	add	fp, #44
08720     AF 52 02 FB | 	rdlong	arg01, fp
08724     30 5E 85 F1 | 	sub	fp, #48
08728     1C 52 06 F1 | 	add	arg01, #28
0872c     50 D5 BF FD | 	call	#_ff_cc_ld_dword_0212
08730     0C 5C 06 F1 | 	add	local01, #12
08734     2E 2D 62 FC | 	wrlong	result1, local01
08738     04 5E 05 F1 | 	add	fp, #4
0873c     AF 5C 02 FB | 	rdlong	local01, fp
08740     3C 5E 05 F1 | 	add	fp, #60
08744     AF 68 02 FB | 	rdlong	local07, fp
08748     2E 69 62 FC | 	wrlong	local07, local01
0874c     3C 5E 85 F1 | 	sub	fp, #60
08750     AF 5C 02 FB | 	rdlong	local01, fp
08754     3C 5E 05 F1 | 	add	fp, #60
08758     AF 68 02 FB | 	rdlong	local07, fp
0875c     06 68 06 F1 | 	add	local07, #6
08760     34 65 E2 FA | 	rdword	local05, local07
08764     04 5C 06 F1 | 	add	local01, #4
08768     2E 65 52 FC | 	wrword	local05, local01
0876c     3C 5E 85 F1 | 	sub	fp, #60
08770     AF 5C 02 FB | 	rdlong	local01, fp
08774     08 5E 05 F1 | 	add	fp, #8
08778     AF 68 C2 FA | 	rdbyte	local07, fp
0877c     10 5C 06 F1 | 	add	local01, #16
08780     2E 69 42 FC | 	wrbyte	local07, local01
08784     08 5E 85 F1 | 	sub	fp, #8
08788     AF 5C 02 FB | 	rdlong	local01, fp
0878c     11 5C 06 F1 | 	add	local01, #17
08790     2E 01 48 FC | 	wrbyte	#0, local01
08794     AF 5C 02 FB | 	rdlong	local01, fp
08798     1C 5C 06 F1 | 	add	local01, #28
0879c     2E 01 68 FC | 	wrlong	#0, local01
087a0     AF 5C 02 FB | 	rdlong	local01, fp
087a4     14 5C 06 F1 | 	add	local01, #20
087a8     2E 01 68 FC | 	wrlong	#0, local01
087ac     08 5E 05 F1 | 	add	fp, #8
087b0     AF 5C C2 FA | 	rdbyte	local01, fp
087b4     0C 5E 85 F1 | 	sub	fp, #12
087b8     07 5C 46 F7 | 	zerox	local01, #7
087bc     20 5C CE F7 | 	test	local01, #32 wz
087c0     18 02 90 AD |  if_e	jmp	#LR__0604
087c4     04 5E 05 F1 | 	add	fp, #4
087c8     AF 68 02 FB | 	rdlong	local07, fp
087cc     04 5E 85 F1 | 	sub	fp, #4
087d0     0C 68 06 F1 | 	add	local07, #12
087d4     34 7D 02 FB | 	rdlong	local17, local07
087d8     00 7C 1E F2 | 	cmp	local17, #0 wcz
087dc     FC 01 90 ED |  if_be	jmp	#LR__0604
087e0     04 5E 05 F1 | 	add	fp, #4
087e4     AF 5C 02 FB | 	rdlong	local01, fp
087e8     2E 69 02 F6 | 	mov	local07, local01
087ec     0C 68 06 F1 | 	add	local07, #12
087f0     34 65 02 FB | 	rdlong	local05, local07
087f4     14 5C 06 F1 | 	add	local01, #20
087f8     2E 65 62 FC | 	wrlong	local05, local01
087fc     3C 5E 05 F1 | 	add	fp, #60
08800     AF 70 02 FB | 	rdlong	local11, fp
08804     0A 70 06 F1 | 	add	local11, #10
08808     38 65 E2 FA | 	rdword	local05, local11
0880c     09 64 66 F0 | 	shl	local05, #9
08810     08 5E 05 F1 | 	add	fp, #8
08814     AF 64 62 FC | 	wrlong	local05, fp
08818     44 5E 85 F1 | 	sub	fp, #68
0881c     AF 5C 02 FB | 	rdlong	local01, fp
08820     08 5C 06 F1 | 	add	local01, #8
08824     2E 69 02 FB | 	rdlong	local07, local01
08828     48 5E 05 F1 | 	add	fp, #72
0882c     AF 68 62 FC | 	wrlong	local07, fp
08830                 | ' 				fp->fptr = fp->obj.objsize;
08830                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
08830                 | ' 				clst = fp->obj.sclust;
08830                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
08830     48 5E 85 F1 | 	sub	fp, #72
08834     AF 5C 02 FB | 	rdlong	local01, fp
08838     0C 5C 06 F1 | 	add	local01, #12
0883c     2E 69 02 FB | 	rdlong	local07, local01
08840     50 5E 05 F1 | 	add	fp, #80
08844     AF 68 62 FC | 	wrlong	local07, fp
08848     54 5E 85 F1 | 	sub	fp, #84
0884c                 | LR__0599
0884c     10 5E 05 F1 | 	add	fp, #16
08850     AF 64 02 FB | 	rdlong	local05, fp
08854     10 5E 85 F1 | 	sub	fp, #16
08858     32 6B 0A F6 | 	mov	local08, local05 wz
0885c     A8 00 90 5D |  if_ne	jmp	#LR__0600
08860     54 5E 05 F1 | 	add	fp, #84
08864     AF 7A 02 FB | 	rdlong	local16, fp
08868     3D 7D 02 F6 | 	mov	local17, local16
0886c     0C 5E 85 F1 | 	sub	fp, #12
08870     AF 7E 02 FB | 	rdlong	local18, fp
08874     48 5E 85 F1 | 	sub	fp, #72
08878     3F 81 02 F6 | 	mov	local19, local18
0887c     40 7D 1A F2 | 	cmp	local17, local19 wcz
08880     84 00 90 ED |  if_be	jmp	#LR__0600
08884     04 5E 05 F1 | 	add	fp, #4
08888     AF 82 02 FB | 	rdlong	local20, fp
0888c     48 5E 05 F1 | 	add	fp, #72
08890     AF 54 02 FB | 	rdlong	arg02, fp
08894     4C 5E 85 F1 | 	sub	fp, #76
08898     41 53 02 F6 | 	mov	arg01, local20
0889c     08 D8 BF FD | 	call	#_ff_cc_get_fat_0238
088a0     4C 5E 05 F1 | 	add	fp, #76
088a4     AF 2C 62 FC | 	wrlong	result1, fp
088a8     4C 5E 85 F1 | 	sub	fp, #76
088ac     01 2C 1E F2 | 	cmp	result1, #1 wcz
088b0     10 5E 05 E1 |  if_be	add	fp, #16
088b4     AF 04 68 EC |  if_be	wrlong	#2, fp
088b8     10 5E 85 E1 |  if_be	sub	fp, #16
088bc     4C 5E 05 F1 | 	add	fp, #76
088c0     AF 84 02 FB | 	rdlong	local21, fp
088c4     4C 5E 85 F1 | 	sub	fp, #76
088c8     FF FF 7F FF 
088cc     FF 85 0E F2 | 	cmp	local21, ##-1 wz
088d0     10 5E 05 A1 |  if_e	add	fp, #16
088d4     AF 02 68 AC |  if_e	wrlong	#1, fp
088d8     10 5E 85 A1 |  if_e	sub	fp, #16
088dc     54 5E 05 F1 | 	add	fp, #84
088e0     AF 86 02 FB | 	rdlong	local22, fp
088e4     43 85 02 F6 | 	mov	local21, local22
088e8     0C 5E 85 F1 | 	sub	fp, #12
088ec     AF 88 02 FB | 	rdlong	local23, fp
088f0     44 8B 02 F6 | 	mov	local24, local23
088f4     45 85 82 F1 | 	sub	local21, local24
088f8     0C 5E 05 F1 | 	add	fp, #12
088fc     AF 84 62 FC | 	wrlong	local21, fp
08900     54 5E 85 F1 | 	sub	fp, #84
08904     44 FF 9F FD | 	jmp	#LR__0599
08908                 | LR__0600
08908     04 5E 05 F1 | 	add	fp, #4
0890c     AF 5C 02 FB | 	rdlong	local01, fp
08910     48 5E 05 F1 | 	add	fp, #72
08914     AF 68 02 FB | 	rdlong	local07, fp
08918     18 5C 06 F1 | 	add	local01, #24
0891c     2E 69 62 FC | 	wrlong	local07, local01
08920     3C 5E 85 F1 | 	sub	fp, #60
08924     AF 70 02 FB | 	rdlong	local11, fp
08928     10 5E 85 F1 | 	sub	fp, #16
0892c     38 5D 0A F6 | 	mov	local01, local11 wz
08930     A8 00 90 5D |  if_ne	jmp	#LR__0603
08934     54 5E 05 F1 | 	add	fp, #84
08938     AF 64 02 FB | 	rdlong	local05, fp
0893c     54 5E 85 F1 | 	sub	fp, #84
08940     32 6B 02 F6 | 	mov	local08, local05
08944     35 69 02 F6 | 	mov	local07, local08
08948     FF 69 0E F5 | 	and	local07, #511 wz
0894c     8C 00 90 AD |  if_e	jmp	#LR__0603
08950     40 5E 05 F1 | 	add	fp, #64
08954     AF 52 02 FB | 	rdlong	arg01, fp
08958     0C 5E 05 F1 | 	add	fp, #12
0895c     AF 6A 02 FB | 	rdlong	local08, fp
08960     4C 5E 85 F1 | 	sub	fp, #76
08964     35 69 02 F6 | 	mov	local07, local08
08968     34 55 02 F6 | 	mov	arg02, local07
0896c     F8 D6 BF FD | 	call	#_ff_cc_clst2sect_0233
08970     16 65 02 F6 | 	mov	local05, result1
08974     50 5E 05 F1 | 	add	fp, #80
08978     AF 64 62 FC | 	wrlong	local05, fp
0897c     AF 70 0A FB | 	rdlong	local11, fp wz
08980     50 5E 85 F1 | 	sub	fp, #80
08984     14 00 90 5D |  if_ne	jmp	#LR__0601
08988     02 5C 06 F6 | 	mov	local01, #2
0898c     10 5E 05 F1 | 	add	fp, #16
08990     AF 04 68 FC | 	wrlong	#2, fp
08994     10 5E 85 F1 | 	sub	fp, #16
08998     40 00 90 FD | 	jmp	#LR__0602
0899c                 | LR__0601
0899c     04 5E 05 F1 | 	add	fp, #4
089a0     AF 70 02 FB | 	rdlong	local11, fp
089a4     38 5D 02 F6 | 	mov	local01, local11
089a8     4C 5E 05 F1 | 	add	fp, #76
089ac     AF 6A 02 FB | 	rdlong	local08, fp
089b0     35 69 02 F6 | 	mov	local07, local08
089b4     04 5E 05 F1 | 	add	fp, #4
089b8     AF 7A 02 FB | 	rdlong	local16, fp
089bc     54 5E 85 F1 | 	sub	fp, #84
089c0     3D 7D 02 F6 | 	mov	local17, local16
089c4     3E 65 02 F6 | 	mov	local05, local17
089c8     09 64 46 F0 | 	shr	local05, #9
089cc     32 69 02 F1 | 	add	local07, local05
089d0     1C 5C 06 F1 | 	add	local01, #28
089d4     2E 69 62 FC | 	wrlong	local07, local01
089d8     1C 5C 86 F1 | 	sub	local01, #28
089dc                 | LR__0602
089dc                 | LR__0603
089dc                 | LR__0604
089dc                 | LR__0605
089dc                 | LR__0606
089dc     10 5E 05 F1 | 	add	fp, #16
089e0     AF 5C 0A FB | 	rdlong	local01, fp wz
089e4     10 5E 85 F1 | 	sub	fp, #16
089e8     10 00 90 AD |  if_e	jmp	#LR__0607
089ec     04 5E 05 F1 | 	add	fp, #4
089f0     AF 5C 02 FB | 	rdlong	local01, fp
089f4     04 5E 85 F1 | 	sub	fp, #4
089f8     2E 01 68 FC | 	wrlong	#0, local01
089fc                 | LR__0607
089fc                 | ' 
089fc                 | ' 	return res ;
089fc     10 5E 05 F1 | 	add	fp, #16
08a00     AF 2C 02 FB | 	rdlong	result1, fp
08a04     10 5E 85 F1 | 	sub	fp, #16
08a08                 | LR__0608
08a08     AF F0 03 F6 | 	mov	ptra, fp
08a0c     BF 00 A0 FD | 	call	#popregs_
08a10                 | _ff_cc_f_open_ret
08a10     2D 00 64 FD | 	ret
08a14                 | 
08a14                 | _ff_cc_f_read
08a14     1E 5A 05 F6 | 	mov	COUNT_, #30
08a18     B0 00 A0 FD | 	call	#pushregs_
08a1c     50 F0 07 F1 | 	add	ptra, #80
08a20     04 5E 05 F1 | 	add	fp, #4
08a24     AF 52 62 FC | 	wrlong	arg01, fp
08a28     04 5E 05 F1 | 	add	fp, #4
08a2c     AF 54 62 FC | 	wrlong	arg02, fp
08a30     04 5E 05 F1 | 	add	fp, #4
08a34     AF 56 62 FC | 	wrlong	arg03, fp
08a38     04 5E 05 F1 | 	add	fp, #4
08a3c     AF 58 62 FC | 	wrlong	arg04, fp
08a40     18 5E 05 F1 | 	add	fp, #24
08a44     AF 00 68 FC | 	wrlong	#0, fp
08a48     20 5E 85 F1 | 	sub	fp, #32
08a4c     AF 5C 02 FB | 	rdlong	local01, fp
08a50     2C 5E 05 F1 | 	add	fp, #44
08a54     AF 5C 62 FC | 	wrlong	local01, fp
08a58     24 5E 85 F1 | 	sub	fp, #36
08a5c     AF 5C 02 FB | 	rdlong	local01, fp
08a60     2E 01 68 FC | 	wrlong	#0, local01
08a64     0C 5E 85 F1 | 	sub	fp, #12
08a68     AF 5E 02 FB | 	rdlong	local02, fp
08a6c     14 5E 05 F1 | 	add	fp, #20
08a70     AF 60 02 F6 | 	mov	local03, fp
08a74     2F 53 02 F6 | 	mov	arg01, local02
08a78     30 55 02 F6 | 	mov	arg02, local03
08a7c     18 5E 85 F1 | 	sub	fp, #24
08a80     78 F6 BF FD | 	call	#_ff_cc_validate_0328
08a84     14 5E 05 F1 | 	add	fp, #20
08a88     AF 2C 62 FC | 	wrlong	result1, fp
08a8c     16 63 02 F6 | 	mov	local04, result1
08a90     14 5E 85 F1 | 	sub	fp, #20
08a94     31 5D 0A F6 | 	mov	local01, local04 wz
08a98     2C 00 90 5D |  if_ne	jmp	#LR__0609
08a9c     04 5E 05 F1 | 	add	fp, #4
08aa0     AF 64 02 FB | 	rdlong	local05, fp
08aa4     11 64 06 F1 | 	add	local05, #17
08aa8     32 67 C2 FA | 	rdbyte	local06, local05
08aac     33 69 02 F6 | 	mov	local07, local06
08ab0     07 68 46 F7 | 	zerox	local07, #7
08ab4     10 5E 05 F1 | 	add	fp, #16
08ab8     AF 68 62 FC | 	wrlong	local07, fp
08abc     14 5E 85 F1 | 	sub	fp, #20
08ac0     34 6B 0A F6 | 	mov	local08, local07 wz
08ac4     10 00 90 AD |  if_e	jmp	#LR__0610
08ac8                 | LR__0609
08ac8     14 5E 05 F1 | 	add	fp, #20
08acc     AF 2C 02 FB | 	rdlong	result1, fp
08ad0     14 5E 85 F1 | 	sub	fp, #20
08ad4     80 05 90 FD | 	jmp	#LR__0628
08ad8                 | LR__0610
08ad8     04 5E 05 F1 | 	add	fp, #4
08adc     AF 62 02 FB | 	rdlong	local04, fp
08ae0     04 5E 85 F1 | 	sub	fp, #4
08ae4     10 62 06 F1 | 	add	local04, #16
08ae8     31 5D C2 FA | 	rdbyte	local01, local04
08aec     01 5C CE F7 | 	test	local01, #1 wz
08af0     07 2C 06 A6 |  if_e	mov	result1, #7
08af4     60 05 90 AD |  if_e	jmp	#LR__0628
08af8     04 5E 05 F1 | 	add	fp, #4
08afc     AF 62 02 FB | 	rdlong	local04, fp
08b00     31 65 02 F6 | 	mov	local05, local04
08b04     0C 62 06 F1 | 	add	local04, #12
08b08     31 5D 02 FB | 	rdlong	local01, local04
08b0c     14 64 06 F1 | 	add	local05, #20
08b10     32 6B 02 FB | 	rdlong	local08, local05
08b14     35 5D 82 F1 | 	sub	local01, local08
08b18     20 5E 05 F1 | 	add	fp, #32
08b1c     AF 5C 62 FC | 	wrlong	local01, fp
08b20     18 5E 85 F1 | 	sub	fp, #24
08b24     AF 5C 02 FB | 	rdlong	local01, fp
08b28     18 5E 05 F1 | 	add	fp, #24
08b2c     AF 6C 02 FB | 	rdlong	local09, fp
08b30     24 5E 85 F1 | 	sub	fp, #36
08b34     36 5D 1A F2 | 	cmp	local01, local09 wcz
08b38     14 00 90 ED |  if_be	jmp	#LR__0611
08b3c     24 5E 05 F1 | 	add	fp, #36
08b40     AF 5C 02 FB | 	rdlong	local01, fp
08b44     18 5E 85 F1 | 	sub	fp, #24
08b48     AF 5C 62 FC | 	wrlong	local01, fp
08b4c     0C 5E 85 F1 | 	sub	fp, #12
08b50                 | LR__0611
08b50                 | ' 
08b50                 | ' 	for ( ; btr;
08b50                 | LR__0612
08b50     0C 5E 05 F1 | 	add	fp, #12
08b54     AF 62 02 FB | 	rdlong	local04, fp
08b58     0C 5E 85 F1 | 	sub	fp, #12
08b5c     31 5D 0A F6 | 	mov	local01, local04 wz
08b60     F0 04 90 AD |  if_e	jmp	#LR__0627
08b64     04 5E 05 F1 | 	add	fp, #4
08b68     AF 6C 02 FB | 	rdlong	local09, fp
08b6c     04 5E 85 F1 | 	sub	fp, #4
08b70     14 6C 06 F1 | 	add	local09, #20
08b74     36 6F 02 FB | 	rdlong	local10, local09
08b78     FF 6F CE F7 | 	test	local10, #511 wz
08b7c     5C 03 90 5D |  if_ne	jmp	#LR__0623
08b80     04 5E 05 F1 | 	add	fp, #4
08b84     AF 64 02 FB | 	rdlong	local05, fp
08b88     14 64 06 F1 | 	add	local05, #20
08b8c     32 6D 02 FB | 	rdlong	local09, local05
08b90     09 6C 46 F0 | 	shr	local09, #9
08b94     14 5E 05 F1 | 	add	fp, #20
08b98     AF 70 02 FB | 	rdlong	local11, fp
08b9c     38 73 02 F6 | 	mov	local12, local11
08ba0     0A 72 06 F1 | 	add	local12, #10
08ba4     39 75 E2 FA | 	rdword	local13, local12
08ba8     3A 69 02 F6 | 	mov	local07, local13
08bac     0F 68 46 F7 | 	zerox	local07, #15
08bb0     01 68 86 F1 | 	sub	local07, #1
08bb4     34 6D 02 F5 | 	and	local09, local07
08bb8     18 5E 05 F1 | 	add	fp, #24
08bbc     AF 6C 62 FC | 	wrlong	local09, fp
08bc0     AF 6C 0A FB | 	rdlong	local09, fp wz
08bc4     30 5E 85 F1 | 	sub	fp, #48
08bc8     E4 00 90 5D |  if_ne	jmp	#LR__0617
08bcc     04 5E 05 F1 | 	add	fp, #4
08bd0     AF 6C 02 FB | 	rdlong	local09, fp
08bd4     04 5E 85 F1 | 	sub	fp, #4
08bd8     14 6C 06 F1 | 	add	local09, #20
08bdc     36 6F 0A FB | 	rdlong	local10, local09 wz
08be0     20 00 90 5D |  if_ne	jmp	#LR__0613
08be4     04 5E 05 F1 | 	add	fp, #4
08be8     AF 6C 02 FB | 	rdlong	local09, fp
08bec     08 6C 06 F1 | 	add	local09, #8
08bf0     36 6F 02 FB | 	rdlong	local10, local09
08bf4     18 5E 05 F1 | 	add	fp, #24
08bf8     AF 6E 62 FC | 	wrlong	local10, fp
08bfc     1C 5E 85 F1 | 	sub	fp, #28
08c00     2C 00 90 FD | 	jmp	#LR__0614
08c04                 | LR__0613
08c04     04 5E 05 F1 | 	add	fp, #4
08c08     AF 76 02 FB | 	rdlong	local14, fp
08c0c     3B 65 02 F6 | 	mov	local05, local14
08c10     04 5E 85 F1 | 	sub	fp, #4
08c14     18 64 06 F1 | 	add	local05, #24
08c18     32 55 02 FB | 	rdlong	arg02, local05
08c1c     3B 53 02 F6 | 	mov	arg01, local14
08c20     84 D4 BF FD | 	call	#_ff_cc_get_fat_0238
08c24     1C 5E 05 F1 | 	add	fp, #28
08c28     AF 2C 62 FC | 	wrlong	result1, fp
08c2c     1C 5E 85 F1 | 	sub	fp, #28
08c30                 | LR__0614
08c30     1C 5E 05 F1 | 	add	fp, #28
08c34     AF 6C 02 FB | 	rdlong	local09, fp
08c38     1C 5E 85 F1 | 	sub	fp, #28
08c3c     02 6C 1E F2 | 	cmp	local09, #2 wcz
08c40     1C 00 90 3D |  if_ae	jmp	#LR__0615
08c44     04 5E 05 F1 | 	add	fp, #4
08c48     AF 6C 02 FB | 	rdlong	local09, fp
08c4c     04 5E 85 F1 | 	sub	fp, #4
08c50     11 6C 06 F1 | 	add	local09, #17
08c54     36 05 48 FC | 	wrbyte	#2, local09
08c58     02 2C 06 F6 | 	mov	result1, #2
08c5c     F8 03 90 FD | 	jmp	#LR__0628
08c60                 | LR__0615
08c60     1C 5E 05 F1 | 	add	fp, #28
08c64     AF 6C 02 FB | 	rdlong	local09, fp
08c68     1C 5E 85 F1 | 	sub	fp, #28
08c6c     FF FF 7F FF 
08c70     FF 6D 0E F2 | 	cmp	local09, ##-1 wz
08c74     1C 00 90 5D |  if_ne	jmp	#LR__0616
08c78     04 5E 05 F1 | 	add	fp, #4
08c7c     AF 6C 02 FB | 	rdlong	local09, fp
08c80     04 5E 85 F1 | 	sub	fp, #4
08c84     11 6C 06 F1 | 	add	local09, #17
08c88     36 03 48 FC | 	wrbyte	#1, local09
08c8c     01 2C 06 F6 | 	mov	result1, #1
08c90     C4 03 90 FD | 	jmp	#LR__0628
08c94                 | LR__0616
08c94     04 5E 05 F1 | 	add	fp, #4
08c98     AF 6C 02 FB | 	rdlong	local09, fp
08c9c     18 5E 05 F1 | 	add	fp, #24
08ca0     AF 6E 02 FB | 	rdlong	local10, fp
08ca4     1C 5E 85 F1 | 	sub	fp, #28
08ca8     18 6C 06 F1 | 	add	local09, #24
08cac     36 6F 62 FC | 	wrlong	local10, local09
08cb0                 | LR__0617
08cb0     18 5E 05 F1 | 	add	fp, #24
08cb4     AF 52 02 FB | 	rdlong	arg01, fp
08cb8     14 5E 85 F1 | 	sub	fp, #20
08cbc     AF 6E 02 FB | 	rdlong	local10, fp
08cc0     04 5E 85 F1 | 	sub	fp, #4
08cc4     18 6E 06 F1 | 	add	local10, #24
08cc8     37 55 02 FB | 	rdlong	arg02, local10
08ccc     98 D3 BF FD | 	call	#_ff_cc_clst2sect_0233
08cd0     20 5E 05 F1 | 	add	fp, #32
08cd4     AF 2C 62 FC | 	wrlong	result1, fp
08cd8     AF 6C 0A FB | 	rdlong	local09, fp wz
08cdc     20 5E 85 F1 | 	sub	fp, #32
08ce0     1C 00 90 5D |  if_ne	jmp	#LR__0618
08ce4     04 5E 05 F1 | 	add	fp, #4
08ce8     AF 6C 02 FB | 	rdlong	local09, fp
08cec     04 5E 85 F1 | 	sub	fp, #4
08cf0     11 6C 06 F1 | 	add	local09, #17
08cf4     36 05 48 FC | 	wrbyte	#2, local09
08cf8     02 2C 06 F6 | 	mov	result1, #2
08cfc     58 03 90 FD | 	jmp	#LR__0628
08d00                 | LR__0618
08d00     20 5E 05 F1 | 	add	fp, #32
08d04     AF 6C 02 FB | 	rdlong	local09, fp
08d08     10 5E 05 F1 | 	add	fp, #16
08d0c     AF 6E 02 FB | 	rdlong	local10, fp
08d10     37 6D 02 F1 | 	add	local09, local10
08d14     10 5E 85 F1 | 	sub	fp, #16
08d18     AF 6C 62 FC | 	wrlong	local09, fp
08d1c     14 5E 85 F1 | 	sub	fp, #20
08d20     AF 6C 02 FB | 	rdlong	local09, fp
08d24     09 6C 46 F0 | 	shr	local09, #9
08d28     20 5E 05 F1 | 	add	fp, #32
08d2c     AF 6C 62 FC | 	wrlong	local09, fp
08d30     2C 5E 85 F1 | 	sub	fp, #44
08d34     00 6C 1E F2 | 	cmp	local09, #0 wcz
08d38     84 01 90 ED |  if_be	jmp	#LR__0622
08d3c     30 5E 05 F1 | 	add	fp, #48
08d40     AF 6C 02 FB | 	rdlong	local09, fp
08d44     04 5E 85 F1 | 	sub	fp, #4
08d48     AF 6E 02 FB | 	rdlong	local10, fp
08d4c     37 6D 02 F1 | 	add	local09, local10
08d50     14 5E 85 F1 | 	sub	fp, #20
08d54     AF 68 02 FB | 	rdlong	local07, fp
08d58     18 5E 85 F1 | 	sub	fp, #24
08d5c     0A 68 06 F1 | 	add	local07, #10
08d60     34 6B E2 FA | 	rdword	local08, local07
08d64     35 6D 1A F2 | 	cmp	local09, local08 wcz
08d68     28 00 90 ED |  if_be	jmp	#LR__0619
08d6c     18 5E 05 F1 | 	add	fp, #24
08d70     AF 64 02 FB | 	rdlong	local05, fp
08d74     0A 64 06 F1 | 	add	local05, #10
08d78     32 6D E2 FA | 	rdword	local09, local05
08d7c     18 5E 05 F1 | 	add	fp, #24
08d80     AF 6A 02 FB | 	rdlong	local08, fp
08d84     35 6D 82 F1 | 	sub	local09, local08
08d88     04 5E 85 F1 | 	sub	fp, #4
08d8c     AF 6C 62 FC | 	wrlong	local09, fp
08d90     2C 5E 85 F1 | 	sub	fp, #44
08d94                 | LR__0619
08d94     18 5E 05 F1 | 	add	fp, #24
08d98     AF 6C 02 FB | 	rdlong	local09, fp
08d9c     01 6C 06 F1 | 	add	local09, #1
08da0     36 53 C2 FA | 	rdbyte	arg01, local09
08da4     1C 5E 05 F1 | 	add	fp, #28
08da8     AF 54 02 FB | 	rdlong	arg02, fp
08dac     14 5E 85 F1 | 	sub	fp, #20
08db0     AF 56 02 FB | 	rdlong	arg03, fp
08db4     0C 5E 05 F1 | 	add	fp, #12
08db8     AF 58 02 FB | 	rdlong	arg04, fp
08dbc     2C 5E 85 F1 | 	sub	fp, #44
08dc0     04 CA BF FD | 	call	#_ff_cc_disk_read
08dc4     00 2C 0E F2 | 	cmp	result1, #0 wz
08dc8     1C 00 90 AD |  if_e	jmp	#LR__0620
08dcc     04 5E 05 F1 | 	add	fp, #4
08dd0     AF 6C 02 FB | 	rdlong	local09, fp
08dd4     04 5E 85 F1 | 	sub	fp, #4
08dd8     11 6C 06 F1 | 	add	local09, #17
08ddc     36 03 48 FC | 	wrbyte	#1, local09
08de0     01 2C 06 F6 | 	mov	result1, #1
08de4     70 02 90 FD | 	jmp	#LR__0628
08de8                 | LR__0620
08de8     18 5E 05 F1 | 	add	fp, #24
08dec     AF 6C 02 FB | 	rdlong	local09, fp
08df0     18 5E 85 F1 | 	sub	fp, #24
08df4     03 6C 06 F1 | 	add	local09, #3
08df8     36 6F CA FA | 	rdbyte	local10, local09 wz
08dfc     A4 00 90 AD |  if_e	jmp	#LR__0621
08e00     18 5E 05 F1 | 	add	fp, #24
08e04     AF 68 02 FB | 	rdlong	local07, fp
08e08     2C 68 06 F1 | 	add	local07, #44
08e0c     34 6B 02 FB | 	rdlong	local08, local07
08e10     08 5E 05 F1 | 	add	fp, #8
08e14     AF 74 02 FB | 	rdlong	local13, fp
08e18     3A 6B 82 F1 | 	sub	local08, local13
08e1c     0C 5E 05 F1 | 	add	fp, #12
08e20     AF 78 02 FB | 	rdlong	local15, fp
08e24     2C 5E 85 F1 | 	sub	fp, #44
08e28     3C 6B 1A F2 | 	cmp	local08, local15 wcz
08e2c     74 00 90 3D |  if_ae	jmp	#LR__0621
08e30     18 5E 05 F1 | 	add	fp, #24
08e34     AF 7A 02 FB | 	rdlong	local16, fp
08e38     30 7A 06 F1 | 	add	local16, #48
08e3c     1C 5E 05 F1 | 	add	fp, #28
08e40     AF 64 02 FB | 	rdlong	local05, fp
08e44     32 6D 02 F6 | 	mov	local09, local05
08e48     1C 5E 85 F1 | 	sub	fp, #28
08e4c     AF 6A 02 FB | 	rdlong	local08, fp
08e50     35 67 02 F6 | 	mov	local06, local08
08e54     2C 66 06 F1 | 	add	local06, #44
08e58     33 69 02 FB | 	rdlong	local07, local06
08e5c     2C 66 86 F1 | 	sub	local06, #44
08e60     34 6F 02 F6 | 	mov	local10, local07
08e64     08 5E 05 F1 | 	add	fp, #8
08e68     AF 70 02 FB | 	rdlong	local11, fp
08e6c     20 5E 85 F1 | 	sub	fp, #32
08e70     38 73 02 F6 | 	mov	local12, local11
08e74     39 6F 82 F1 | 	sub	local10, local12
08e78     37 75 02 F6 | 	mov	local13, local10
08e7c     09 74 66 F0 | 	shl	local13, #9
08e80     3A 7D 02 F6 | 	mov	local17, local13
08e84     3A 6D 02 F1 | 	add	local09, local13
08e88     36 79 02 F6 | 	mov	local15, local09
08e8c     3D 7F 02 F6 | 	mov	local18, local16
08e90     09 80 C6 F9 | 	decod	local19, #9
08e94     3C 53 02 F6 | 	mov	arg01, local15
08e98     3F 55 02 F6 | 	mov	arg02, local18
08e9c     09 56 C6 F9 | 	decod	arg03, #9
08ea0     6C CE BF FD | 	call	#_ff_cc_mem_cpy_0217
08ea4                 | LR__0621
08ea4     2C 5E 05 F1 | 	add	fp, #44
08ea8     AF 6C 02 FB | 	rdlong	local09, fp
08eac     09 6C 66 F0 | 	shl	local09, #9
08eb0     04 5E 85 F1 | 	sub	fp, #4
08eb4     AF 6C 62 FC | 	wrlong	local09, fp
08eb8     28 5E 85 F1 | 	sub	fp, #40
08ebc                 | ' 					mem_cpy(rbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ), fs->win,  ((UINT) 512 ) );
08ebc                 | ' 				}
08ebc                 | ' #line 3949 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08ebc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
08ebc                 | ' 				continue;
08ebc     EC 00 90 FD | 	jmp	#LR__0626
08ec0                 | LR__0622
08ec0     04 5E 05 F1 | 	add	fp, #4
08ec4     AF 6C 02 FB | 	rdlong	local09, fp
08ec8     1C 5E 05 F1 | 	add	fp, #28
08ecc     AF 6E 02 FB | 	rdlong	local10, fp
08ed0     20 5E 85 F1 | 	sub	fp, #32
08ed4     1C 6C 06 F1 | 	add	local09, #28
08ed8     36 6F 62 FC | 	wrlong	local10, local09
08edc                 | LR__0623
08edc     04 5E 05 F1 | 	add	fp, #4
08ee0     AF 64 02 FB | 	rdlong	local05, fp
08ee4     14 64 06 F1 | 	add	local05, #20
08ee8     32 67 02 FB | 	rdlong	local06, local05
08eec     FF 67 06 F5 | 	and	local06, #511
08ef0     09 6C C6 F9 | 	decod	local09, #9
08ef4     33 6D 82 F1 | 	sub	local09, local06
08ef8     24 5E 05 F1 | 	add	fp, #36
08efc     AF 6C 62 FC | 	wrlong	local09, fp
08f00     1C 5E 85 F1 | 	sub	fp, #28
08f04     AF 6E 02 FB | 	rdlong	local10, fp
08f08     0C 5E 85 F1 | 	sub	fp, #12
08f0c     37 6D 1A F2 | 	cmp	local09, local10 wcz
08f10     14 00 90 ED |  if_be	jmp	#LR__0624
08f14     0C 5E 05 F1 | 	add	fp, #12
08f18     AF 6C 02 FB | 	rdlong	local09, fp
08f1c     1C 5E 05 F1 | 	add	fp, #28
08f20     AF 6C 62 FC | 	wrlong	local09, fp
08f24     28 5E 85 F1 | 	sub	fp, #40
08f28                 | LR__0624
08f28     18 5E 05 F1 | 	add	fp, #24
08f2c     AF 52 02 FB | 	rdlong	arg01, fp
08f30     14 5E 85 F1 | 	sub	fp, #20
08f34     AF 6E 02 FB | 	rdlong	local10, fp
08f38     04 5E 85 F1 | 	sub	fp, #4
08f3c     1C 6E 06 F1 | 	add	local10, #28
08f40     37 55 02 FB | 	rdlong	arg02, local10
08f44     30 CF BF FD | 	call	#_ff_cc_move_window_0230
08f48     00 2C 0E F2 | 	cmp	result1, #0 wz
08f4c     1C 00 90 AD |  if_e	jmp	#LR__0625
08f50     04 5E 05 F1 | 	add	fp, #4
08f54     AF 6C 02 FB | 	rdlong	local09, fp
08f58     04 5E 85 F1 | 	sub	fp, #4
08f5c     11 6C 06 F1 | 	add	local09, #17
08f60     36 03 48 FC | 	wrbyte	#1, local09
08f64     01 2C 06 F6 | 	mov	result1, #1
08f68     EC 00 90 FD | 	jmp	#LR__0628
08f6c                 | LR__0625
08f6c     18 5E 05 F1 | 	add	fp, #24
08f70     AF 82 02 FB | 	rdlong	local20, fp
08f74     30 82 06 F1 | 	add	local20, #48
08f78     1C 5E 05 F1 | 	add	fp, #28
08f7c     AF 52 02 FB | 	rdlong	arg01, fp
08f80     41 55 02 F6 | 	mov	arg02, local20
08f84     30 5E 85 F1 | 	sub	fp, #48
08f88     AF 66 02 FB | 	rdlong	local06, fp
08f8c     14 66 06 F1 | 	add	local06, #20
08f90     33 75 02 FB | 	rdlong	local13, local06
08f94     FF 75 06 F5 | 	and	local13, #511
08f98     3A 55 02 F1 | 	add	arg02, local13
08f9c     24 5E 05 F1 | 	add	fp, #36
08fa0     AF 56 02 FB | 	rdlong	arg03, fp
08fa4     28 5E 85 F1 | 	sub	fp, #40
08fa8     64 CD BF FD | 	call	#_ff_cc_mem_cpy_0217
08fac                 | LR__0626
08fac     0C 5E 05 F1 | 	add	fp, #12
08fb0     AF 6C 02 FB | 	rdlong	local09, fp
08fb4     1C 5E 05 F1 | 	add	fp, #28
08fb8     AF 66 02 FB | 	rdlong	local06, fp
08fbc     33 6D 82 F1 | 	sub	local09, local06
08fc0     1C 5E 85 F1 | 	sub	fp, #28
08fc4     AF 6C 62 FC | 	wrlong	local09, fp
08fc8     04 5E 05 F1 | 	add	fp, #4
08fcc     AF 6A 02 FB | 	rdlong	local08, fp
08fd0     35 73 02 FB | 	rdlong	local12, local08
08fd4     18 5E 05 F1 | 	add	fp, #24
08fd8     AF 78 02 FB | 	rdlong	local15, fp
08fdc     3C 7D 02 F6 | 	mov	local17, local15
08fe0     3C 73 02 F1 | 	add	local12, local15
08fe4     35 73 62 FC | 	wrlong	local12, local08
08fe8     0C 5E 05 F1 | 	add	fp, #12
08fec     AF 80 02 FB | 	rdlong	local19, fp
08ff0     40 7F 02 F6 | 	mov	local18, local19
08ff4     0C 5E 85 F1 | 	sub	fp, #12
08ff8     AF 84 02 FB | 	rdlong	local21, fp
08ffc     42 87 02 F6 | 	mov	local22, local21
09000     42 7F 02 F1 | 	add	local18, local21
09004     0C 5E 05 F1 | 	add	fp, #12
09008     AF 7E 62 FC | 	wrlong	local18, fp
0900c     30 5E 85 F1 | 	sub	fp, #48
09010     AF 88 02 FB | 	rdlong	local23, fp
09014     44 8B 02 F6 | 	mov	local24, local23
09018     44 8D 02 F6 | 	mov	local25, local23
0901c     46 8F 02 F6 | 	mov	local26, local25
09020     14 8E 06 F1 | 	add	local26, #20
09024     47 91 02 FB | 	rdlong	local27, local26
09028     14 8E 86 F1 | 	sub	local26, #20
0902c     48 93 02 F6 | 	mov	local28, local27
09030     24 5E 05 F1 | 	add	fp, #36
09034     AF 94 02 FB | 	rdlong	local29, fp
09038     28 5E 85 F1 | 	sub	fp, #40
0903c     4A 97 02 F6 | 	mov	local30, local29
09040     4A 93 02 F1 | 	add	local28, local29
09044     14 8A 06 F1 | 	add	local24, #20
09048     45 93 62 FC | 	wrlong	local28, local24
0904c     14 8A 86 F1 | 	sub	local24, #20
09050     FC FA 9F FD | 	jmp	#LR__0612
09054                 | LR__0627
09054                 | ' 		mem_cpy(rbuff, fs->win + fp->fptr %  ((UINT) 512 ) , rcnt);
09054                 | ' #line 3973 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09054                 | ' 	}
09054                 | ' 
09054                 | ' 	return FR_OK ;
09054     00 2C 06 F6 | 	mov	result1, #0
09058                 | LR__0628
09058     AF F0 03 F6 | 	mov	ptra, fp
0905c     BF 00 A0 FD | 	call	#popregs_
09060                 | _ff_cc_f_read_ret
09060     2D 00 64 FD | 	ret
09064                 | 
09064                 | _ff_cc_f_write
09064     30 5A 05 F6 | 	mov	COUNT_, #48
09068     B0 00 A0 FD | 	call	#pushregs_
0906c     50 F0 07 F1 | 	add	ptra, #80
09070     04 5E 05 F1 | 	add	fp, #4
09074     AF 52 62 FC | 	wrlong	arg01, fp
09078     04 5E 05 F1 | 	add	fp, #4
0907c     AF 54 62 FC | 	wrlong	arg02, fp
09080     04 5E 05 F1 | 	add	fp, #4
09084     AF 56 62 FC | 	wrlong	arg03, fp
09088     04 5E 05 F1 | 	add	fp, #4
0908c     AF 58 62 FC | 	wrlong	arg04, fp
09090     14 5E 05 F1 | 	add	fp, #20
09094     AF 00 68 FC | 	wrlong	#0, fp
09098     1C 5E 85 F1 | 	sub	fp, #28
0909c     AF 5C 02 FB | 	rdlong	local01, fp
090a0     28 5E 05 F1 | 	add	fp, #40
090a4     AF 5C 62 FC | 	wrlong	local01, fp
090a8     20 5E 85 F1 | 	sub	fp, #32
090ac     AF 5C 02 FB | 	rdlong	local01, fp
090b0     2E 01 68 FC | 	wrlong	#0, local01
090b4     0C 5E 85 F1 | 	sub	fp, #12
090b8     AF 5E 02 FB | 	rdlong	local02, fp
090bc     14 5E 05 F1 | 	add	fp, #20
090c0     AF 60 02 F6 | 	mov	local03, fp
090c4     2F 53 02 F6 | 	mov	arg01, local02
090c8     30 55 02 F6 | 	mov	arg02, local03
090cc     18 5E 85 F1 | 	sub	fp, #24
090d0     28 F0 BF FD | 	call	#_ff_cc_validate_0328
090d4     14 5E 05 F1 | 	add	fp, #20
090d8     AF 2C 62 FC | 	wrlong	result1, fp
090dc     16 63 02 F6 | 	mov	local04, result1
090e0     14 5E 85 F1 | 	sub	fp, #20
090e4     31 5D 0A F6 | 	mov	local01, local04 wz
090e8     24 00 90 5D |  if_ne	jmp	#LR__0629
090ec     04 5E 05 F1 | 	add	fp, #4
090f0     AF 64 02 FB | 	rdlong	local05, fp
090f4     11 64 06 F1 | 	add	local05, #17
090f8     32 67 C2 FA | 	rdbyte	local06, local05
090fc     10 5E 05 F1 | 	add	fp, #16
09100     AF 66 62 FC | 	wrlong	local06, fp
09104     14 5E 85 F1 | 	sub	fp, #20
09108     33 69 0A F6 | 	mov	local07, local06 wz
0910c     10 00 90 AD |  if_e	jmp	#LR__0630
09110                 | LR__0629
09110     14 5E 05 F1 | 	add	fp, #20
09114     AF 2C 02 FB | 	rdlong	result1, fp
09118     14 5E 85 F1 | 	sub	fp, #20
0911c     7C 07 90 FD | 	jmp	#LR__0654
09120                 | LR__0630
09120     04 5E 05 F1 | 	add	fp, #4
09124     AF 62 02 FB | 	rdlong	local04, fp
09128     04 5E 85 F1 | 	sub	fp, #4
0912c     10 62 06 F1 | 	add	local04, #16
09130     31 5D C2 FA | 	rdbyte	local01, local04
09134     02 5C CE F7 | 	test	local01, #2 wz
09138     07 2C 06 A6 |  if_e	mov	result1, #7
0913c     5C 07 90 AD |  if_e	jmp	#LR__0654
09140     04 5E 05 F1 | 	add	fp, #4
09144     AF 6A 02 FB | 	rdlong	local08, fp
09148     35 6D 02 F6 | 	mov	local09, local08
0914c     14 6C 06 F1 | 	add	local09, #20
09150     36 69 02 FB | 	rdlong	local07, local09
09154     34 65 02 F6 | 	mov	local05, local07
09158     08 5E 05 F1 | 	add	fp, #8
0915c     AF 6E 02 FB | 	rdlong	local10, fp
09160     37 67 02 F6 | 	mov	local06, local10
09164     37 65 02 F1 | 	add	local05, local10
09168     08 5E 85 F1 | 	sub	fp, #8
0916c     AF 70 02 FB | 	rdlong	local11, fp
09170     04 5E 85 F1 | 	sub	fp, #4
09174     38 73 02 F6 | 	mov	local12, local11
09178     14 72 06 F1 | 	add	local12, #20
0917c     39 75 02 FB | 	rdlong	local13, local12
09180     14 72 86 F1 | 	sub	local12, #20
09184     3A 77 02 F6 | 	mov	local14, local13
09188     3B 65 1A F2 | 	cmp	local05, local14 wcz
0918c     24 00 90 3D |  if_ae	jmp	#LR__0631
09190     04 5E 05 F1 | 	add	fp, #4
09194     AF 62 02 FB | 	rdlong	local04, fp
09198     01 5C 66 F6 | 	neg	local01, #1
0919c     14 62 06 F1 | 	add	local04, #20
091a0     31 65 02 FB | 	rdlong	local05, local04
091a4     32 5D 82 F1 | 	sub	local01, local05
091a8     08 5E 05 F1 | 	add	fp, #8
091ac     AF 5C 62 FC | 	wrlong	local01, fp
091b0     0C 5E 85 F1 | 	sub	fp, #12
091b4                 | LR__0631
091b4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
091b4                 | ' 	}
091b4                 | ' 
091b4                 | ' 	for ( ; btw;
091b4                 | LR__0632
091b4     0C 5E 05 F1 | 	add	fp, #12
091b8     AF 62 02 FB | 	rdlong	local04, fp
091bc     0C 5E 85 F1 | 	sub	fp, #12
091c0     31 5D 0A F6 | 	mov	local01, local04 wz
091c4     AC 06 90 AD |  if_e	jmp	#LR__0653
091c8     04 5E 05 F1 | 	add	fp, #4
091cc     AF 78 02 FB | 	rdlong	local15, fp
091d0     04 5E 85 F1 | 	sub	fp, #4
091d4     14 78 06 F1 | 	add	local15, #20
091d8     3C 6D 02 FB | 	rdlong	local09, local15
091dc     FF 6D CE F7 | 	test	local09, #511 wz
091e0     6C 04 90 5D |  if_ne	jmp	#LR__0647
091e4     04 5E 05 F1 | 	add	fp, #4
091e8     AF 64 02 FB | 	rdlong	local05, fp
091ec     14 64 06 F1 | 	add	local05, #20
091f0     32 79 02 FB | 	rdlong	local15, local05
091f4     09 78 46 F0 | 	shr	local15, #9
091f8     14 5E 05 F1 | 	add	fp, #20
091fc     AF 6E 02 FB | 	rdlong	local10, fp
09200     0A 6E 06 F1 | 	add	local10, #10
09204     37 71 E2 FA | 	rdword	local11, local10
09208     38 67 02 F6 | 	mov	local06, local11
0920c     0F 66 46 F7 | 	zerox	local06, #15
09210     01 66 86 F1 | 	sub	local06, #1
09214     33 79 02 F5 | 	and	local15, local06
09218     14 5E 05 F1 | 	add	fp, #20
0921c     AF 78 62 FC | 	wrlong	local15, fp
09220     AF 78 0A FB | 	rdlong	local15, fp wz
09224     2C 5E 85 F1 | 	sub	fp, #44
09228     50 01 90 5D |  if_ne	jmp	#LR__0638
0922c     04 5E 05 F1 | 	add	fp, #4
09230     AF 78 02 FB | 	rdlong	local15, fp
09234     04 5E 85 F1 | 	sub	fp, #4
09238     14 78 06 F1 | 	add	local15, #20
0923c     3C 6D 0A FB | 	rdlong	local09, local15 wz
09240     4C 00 90 5D |  if_ne	jmp	#LR__0633
09244     04 5E 05 F1 | 	add	fp, #4
09248     AF 78 02 FB | 	rdlong	local15, fp
0924c     08 78 06 F1 | 	add	local15, #8
09250     3C 6D 02 FB | 	rdlong	local09, local15
09254     18 5E 05 F1 | 	add	fp, #24
09258     AF 6C 62 FC | 	wrlong	local09, fp
0925c     AF 78 0A FB | 	rdlong	local15, fp wz
09260     1C 5E 85 F1 | 	sub	fp, #28
09264     54 00 90 5D |  if_ne	jmp	#LR__0634
09268     04 5E 05 F1 | 	add	fp, #4
0926c     AF 7A 02 FB | 	rdlong	local16, fp
09270     04 5E 85 F1 | 	sub	fp, #4
09274     3D 53 02 F6 | 	mov	arg01, local16
09278     00 54 06 F6 | 	mov	arg02, #0
0927c     08 D4 BF FD | 	call	#_ff_cc_create_chain_0252
09280     1C 5E 05 F1 | 	add	fp, #28
09284     AF 2C 62 FC | 	wrlong	result1, fp
09288     1C 5E 85 F1 | 	sub	fp, #28
0928c     2C 00 90 FD | 	jmp	#LR__0634
09290                 | LR__0633
09290     04 5E 05 F1 | 	add	fp, #4
09294     AF 7C 02 FB | 	rdlong	local17, fp
09298     3E 65 02 F6 | 	mov	local05, local17
0929c     04 5E 85 F1 | 	sub	fp, #4
092a0     18 64 06 F1 | 	add	local05, #24
092a4     32 55 02 FB | 	rdlong	arg02, local05
092a8     3E 53 02 F6 | 	mov	arg01, local17
092ac     D8 D3 BF FD | 	call	#_ff_cc_create_chain_0252
092b0     1C 5E 05 F1 | 	add	fp, #28
092b4     AF 2C 62 FC | 	wrlong	result1, fp
092b8     1C 5E 85 F1 | 	sub	fp, #28
092bc                 | LR__0634
092bc     1C 5E 05 F1 | 	add	fp, #28
092c0     AF 78 0A FB | 	rdlong	local15, fp wz
092c4     1C 5E 85 F1 | 	sub	fp, #28
092c8     A8 05 90 AD |  if_e	jmp	#LR__0653
092cc     1C 5E 05 F1 | 	add	fp, #28
092d0     AF 78 02 FB | 	rdlong	local15, fp
092d4     1C 5E 85 F1 | 	sub	fp, #28
092d8     01 78 0E F2 | 	cmp	local15, #1 wz
092dc     1C 00 90 5D |  if_ne	jmp	#LR__0635
092e0     04 5E 05 F1 | 	add	fp, #4
092e4     AF 78 02 FB | 	rdlong	local15, fp
092e8     04 5E 85 F1 | 	sub	fp, #4
092ec     11 78 06 F1 | 	add	local15, #17
092f0     3C 05 48 FC | 	wrbyte	#2, local15
092f4     02 2C 06 F6 | 	mov	result1, #2
092f8     A0 05 90 FD | 	jmp	#LR__0654
092fc                 | LR__0635
092fc     1C 5E 05 F1 | 	add	fp, #28
09300     AF 78 02 FB | 	rdlong	local15, fp
09304     1C 5E 85 F1 | 	sub	fp, #28
09308     FF FF 7F FF 
0930c     FF 79 0E F2 | 	cmp	local15, ##-1 wz
09310     1C 00 90 5D |  if_ne	jmp	#LR__0636
09314     04 5E 05 F1 | 	add	fp, #4
09318     AF 78 02 FB | 	rdlong	local15, fp
0931c     04 5E 85 F1 | 	sub	fp, #4
09320     11 78 06 F1 | 	add	local15, #17
09324     3C 03 48 FC | 	wrbyte	#1, local15
09328     01 2C 06 F6 | 	mov	result1, #1
0932c     6C 05 90 FD | 	jmp	#LR__0654
09330                 | LR__0636
09330     04 5E 05 F1 | 	add	fp, #4
09334     AF 78 02 FB | 	rdlong	local15, fp
09338     18 5E 05 F1 | 	add	fp, #24
0933c     AF 6C 02 FB | 	rdlong	local09, fp
09340     18 78 06 F1 | 	add	local15, #24
09344     3C 6D 62 FC | 	wrlong	local09, local15
09348     18 5E 85 F1 | 	sub	fp, #24
0934c     AF 78 02 FB | 	rdlong	local15, fp
09350     04 5E 85 F1 | 	sub	fp, #4
09354     08 78 06 F1 | 	add	local15, #8
09358     3C 6D 0A FB | 	rdlong	local09, local15 wz
0935c     1C 00 90 5D |  if_ne	jmp	#LR__0637
09360     04 5E 05 F1 | 	add	fp, #4
09364     AF 78 02 FB | 	rdlong	local15, fp
09368     18 5E 05 F1 | 	add	fp, #24
0936c     AF 6C 02 FB | 	rdlong	local09, fp
09370     1C 5E 85 F1 | 	sub	fp, #28
09374     08 78 06 F1 | 	add	local15, #8
09378     3C 6D 62 FC | 	wrlong	local09, local15
0937c                 | LR__0637
0937c                 | LR__0638
0937c     18 5E 05 F1 | 	add	fp, #24
09380     AF 78 02 FB | 	rdlong	local15, fp
09384     14 5E 85 F1 | 	sub	fp, #20
09388     AF 6C 02 FB | 	rdlong	local09, fp
0938c     04 5E 85 F1 | 	sub	fp, #4
09390     2C 78 06 F1 | 	add	local15, #44
09394     3C 69 02 FB | 	rdlong	local07, local15
09398     1C 6C 06 F1 | 	add	local09, #28
0939c     36 6F 02 FB | 	rdlong	local10, local09
093a0     37 69 0A F2 | 	cmp	local07, local10 wz
093a4     34 00 90 5D |  if_ne	jmp	#LR__0639
093a8     18 5E 05 F1 | 	add	fp, #24
093ac     AF 52 02 FB | 	rdlong	arg01, fp
093b0     18 5E 85 F1 | 	sub	fp, #24
093b4     E8 C9 BF FD | 	call	#_ff_cc_sync_window_0228
093b8     00 2C 0E F2 | 	cmp	result1, #0 wz
093bc     1C 00 90 AD |  if_e	jmp	#LR__0639
093c0     04 5E 05 F1 | 	add	fp, #4
093c4     AF 78 02 FB | 	rdlong	local15, fp
093c8     04 5E 85 F1 | 	sub	fp, #4
093cc     11 78 06 F1 | 	add	local15, #17
093d0     3C 03 48 FC | 	wrbyte	#1, local15
093d4     01 2C 06 F6 | 	mov	result1, #1
093d8     C0 04 90 FD | 	jmp	#LR__0654
093dc                 | LR__0639
093dc     18 5E 05 F1 | 	add	fp, #24
093e0     AF 52 02 FB | 	rdlong	arg01, fp
093e4     14 5E 85 F1 | 	sub	fp, #20
093e8     AF 6C 02 FB | 	rdlong	local09, fp
093ec     04 5E 85 F1 | 	sub	fp, #4
093f0     18 6C 06 F1 | 	add	local09, #24
093f4     36 55 02 FB | 	rdlong	arg02, local09
093f8     6C CC BF FD | 	call	#_ff_cc_clst2sect_0233
093fc     20 5E 05 F1 | 	add	fp, #32
09400     AF 2C 62 FC | 	wrlong	result1, fp
09404     AF 78 0A FB | 	rdlong	local15, fp wz
09408     20 5E 85 F1 | 	sub	fp, #32
0940c     1C 00 90 5D |  if_ne	jmp	#LR__0640
09410     04 5E 05 F1 | 	add	fp, #4
09414     AF 78 02 FB | 	rdlong	local15, fp
09418     04 5E 85 F1 | 	sub	fp, #4
0941c     11 78 06 F1 | 	add	local15, #17
09420     3C 05 48 FC | 	wrbyte	#2, local15
09424     02 2C 06 F6 | 	mov	result1, #2
09428     70 04 90 FD | 	jmp	#LR__0654
0942c                 | LR__0640
0942c     20 5E 05 F1 | 	add	fp, #32
09430     AF 78 02 FB | 	rdlong	local15, fp
09434     0C 5E 05 F1 | 	add	fp, #12
09438     AF 6C 02 FB | 	rdlong	local09, fp
0943c     36 79 02 F1 | 	add	local15, local09
09440     0C 5E 85 F1 | 	sub	fp, #12
09444     AF 78 62 FC | 	wrlong	local15, fp
09448     14 5E 85 F1 | 	sub	fp, #20
0944c     AF 78 02 FB | 	rdlong	local15, fp
09450     09 78 46 F0 | 	shr	local15, #9
09454     1C 5E 05 F1 | 	add	fp, #28
09458     AF 78 62 FC | 	wrlong	local15, fp
0945c     28 5E 85 F1 | 	sub	fp, #40
09460     00 78 1E F2 | 	cmp	local15, #0 wcz
09464     54 01 90 ED |  if_be	jmp	#LR__0644
09468     2C 5E 05 F1 | 	add	fp, #44
0946c     AF 78 02 FB | 	rdlong	local15, fp
09470     04 5E 85 F1 | 	sub	fp, #4
09474     AF 6C 02 FB | 	rdlong	local09, fp
09478     36 79 02 F1 | 	add	local15, local09
0947c     10 5E 85 F1 | 	sub	fp, #16
09480     AF 66 02 FB | 	rdlong	local06, fp
09484     18 5E 85 F1 | 	sub	fp, #24
09488     0A 66 06 F1 | 	add	local06, #10
0948c     33 69 E2 FA | 	rdword	local07, local06
09490     34 79 1A F2 | 	cmp	local15, local07 wcz
09494     28 00 90 ED |  if_be	jmp	#LR__0641
09498     18 5E 05 F1 | 	add	fp, #24
0949c     AF 64 02 FB | 	rdlong	local05, fp
094a0     0A 64 06 F1 | 	add	local05, #10
094a4     32 79 E2 FA | 	rdword	local15, local05
094a8     14 5E 05 F1 | 	add	fp, #20
094ac     AF 68 02 FB | 	rdlong	local07, fp
094b0     34 79 82 F1 | 	sub	local15, local07
094b4     04 5E 85 F1 | 	sub	fp, #4
094b8     AF 78 62 FC | 	wrlong	local15, fp
094bc     28 5E 85 F1 | 	sub	fp, #40
094c0                 | LR__0641
094c0     18 5E 05 F1 | 	add	fp, #24
094c4     AF 78 02 FB | 	rdlong	local15, fp
094c8     01 78 06 F1 | 	add	local15, #1
094cc     3C 53 C2 FA | 	rdbyte	arg01, local15
094d0     18 5E 05 F1 | 	add	fp, #24
094d4     AF 54 02 FB | 	rdlong	arg02, fp
094d8     10 5E 85 F1 | 	sub	fp, #16
094dc     AF 56 02 FB | 	rdlong	arg03, fp
094e0     08 5E 05 F1 | 	add	fp, #8
094e4     AF 58 02 FB | 	rdlong	arg04, fp
094e8     28 5E 85 F1 | 	sub	fp, #40
094ec     B4 C3 BF FD | 	call	#_ff_cc_disk_write
094f0     00 2C 0E F2 | 	cmp	result1, #0 wz
094f4     1C 00 90 AD |  if_e	jmp	#LR__0642
094f8     04 5E 05 F1 | 	add	fp, #4
094fc     AF 78 02 FB | 	rdlong	local15, fp
09500     04 5E 85 F1 | 	sub	fp, #4
09504     11 78 06 F1 | 	add	local15, #17
09508     3C 03 48 FC | 	wrbyte	#1, local15
0950c     01 2C 06 F6 | 	mov	result1, #1
09510     88 03 90 FD | 	jmp	#LR__0654
09514                 | LR__0642
09514     18 5E 05 F1 | 	add	fp, #24
09518     AF 64 02 FB | 	rdlong	local05, fp
0951c     2C 64 06 F1 | 	add	local05, #44
09520     32 79 02 FB | 	rdlong	local15, local05
09524     08 5E 05 F1 | 	add	fp, #8
09528     AF 68 02 FB | 	rdlong	local07, fp
0952c     34 79 82 F1 | 	sub	local15, local07
09530     08 5E 05 F1 | 	add	fp, #8
09534     AF 6E 02 FB | 	rdlong	local10, fp
09538     28 5E 85 F1 | 	sub	fp, #40
0953c     37 79 1A F2 | 	cmp	local15, local10 wcz
09540     5C 00 90 3D |  if_ae	jmp	#LR__0643
09544     18 5E 05 F1 | 	add	fp, #24
09548     AF 7E 02 FB | 	rdlong	local18, fp
0954c     30 7E 06 F1 | 	add	local18, #48
09550     18 5E 05 F1 | 	add	fp, #24
09554     AF 54 02 FB | 	rdlong	arg02, fp
09558     18 5E 85 F1 | 	sub	fp, #24
0955c     AF 68 02 FB | 	rdlong	local07, fp
09560     2C 68 06 F1 | 	add	local07, #44
09564     34 75 02 FB | 	rdlong	local13, local07
09568     08 5E 05 F1 | 	add	fp, #8
0956c     AF 72 02 FB | 	rdlong	local12, fp
09570     20 5E 85 F1 | 	sub	fp, #32
09574     39 75 82 F1 | 	sub	local13, local12
09578     09 74 66 F0 | 	shl	local13, #9
0957c     3A 55 02 F1 | 	add	arg02, local13
09580     3F 53 02 F6 | 	mov	arg01, local18
09584     09 56 C6 F9 | 	decod	arg03, #9
09588     84 C7 BF FD | 	call	#_ff_cc_mem_cpy_0217
0958c     18 5E 05 F1 | 	add	fp, #24
09590     AF 78 02 FB | 	rdlong	local15, fp
09594     18 5E 85 F1 | 	sub	fp, #24
09598     03 78 06 F1 | 	add	local15, #3
0959c     3C 01 48 FC | 	wrbyte	#0, local15
095a0                 | LR__0643
095a0     28 5E 05 F1 | 	add	fp, #40
095a4     AF 78 02 FB | 	rdlong	local15, fp
095a8     09 78 66 F0 | 	shl	local15, #9
095ac     04 5E 85 F1 | 	sub	fp, #4
095b0     AF 78 62 FC | 	wrlong	local15, fp
095b4     24 5E 85 F1 | 	sub	fp, #36
095b8                 | ' 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ),  ((UINT) 512 ) );
095b8                 | ' 					fs->wflag = 0;
095b8                 | ' 				}
095b8                 | ' #line 4067 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
095b8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
095b8                 | ' 				continue;
095b8     78 01 90 FD | 	jmp	#LR__0650
095bc                 | LR__0644
095bc     04 5E 05 F1 | 	add	fp, #4
095c0     AF 78 02 FB | 	rdlong	local15, fp
095c4     3C 6D 02 F6 | 	mov	local09, local15
095c8     04 5E 85 F1 | 	sub	fp, #4
095cc     14 78 06 F1 | 	add	local15, #20
095d0     3C 69 02 FB | 	rdlong	local07, local15
095d4     0C 6C 06 F1 | 	add	local09, #12
095d8     36 6F 02 FB | 	rdlong	local10, local09
095dc     37 69 1A F2 | 	cmp	local07, local10 wcz
095e0     50 00 90 CD |  if_b	jmp	#LR__0646
095e4     18 5E 05 F1 | 	add	fp, #24
095e8     AF 52 02 FB | 	rdlong	arg01, fp
095ec     18 5E 85 F1 | 	sub	fp, #24
095f0     AC C7 BF FD | 	call	#_ff_cc_sync_window_0228
095f4     00 2C 0E F2 | 	cmp	result1, #0 wz
095f8     1C 00 90 AD |  if_e	jmp	#LR__0645
095fc     04 5E 05 F1 | 	add	fp, #4
09600     AF 78 02 FB | 	rdlong	local15, fp
09604     04 5E 85 F1 | 	sub	fp, #4
09608     11 78 06 F1 | 	add	local15, #17
0960c     3C 03 48 FC | 	wrbyte	#1, local15
09610     01 2C 06 F6 | 	mov	result1, #1
09614     84 02 90 FD | 	jmp	#LR__0654
09618                 | LR__0645
09618     18 5E 05 F1 | 	add	fp, #24
0961c     AF 78 02 FB | 	rdlong	local15, fp
09620     08 5E 05 F1 | 	add	fp, #8
09624     AF 6C 02 FB | 	rdlong	local09, fp
09628     20 5E 85 F1 | 	sub	fp, #32
0962c     2C 78 06 F1 | 	add	local15, #44
09630     3C 6D 62 FC | 	wrlong	local09, local15
09634                 | LR__0646
09634     04 5E 05 F1 | 	add	fp, #4
09638     AF 78 02 FB | 	rdlong	local15, fp
0963c     1C 5E 05 F1 | 	add	fp, #28
09640     AF 6C 02 FB | 	rdlong	local09, fp
09644     20 5E 85 F1 | 	sub	fp, #32
09648     1C 78 06 F1 | 	add	local15, #28
0964c     3C 6D 62 FC | 	wrlong	local09, local15
09650                 | LR__0647
09650     04 5E 05 F1 | 	add	fp, #4
09654     AF 64 02 FB | 	rdlong	local05, fp
09658     14 64 06 F1 | 	add	local05, #20
0965c     32 6B 02 FB | 	rdlong	local08, local05
09660     FF 6B 06 F5 | 	and	local08, #511
09664     09 78 C6 F9 | 	decod	local15, #9
09668     35 79 82 F1 | 	sub	local15, local08
0966c     20 5E 05 F1 | 	add	fp, #32
09670     AF 78 62 FC | 	wrlong	local15, fp
09674     18 5E 85 F1 | 	sub	fp, #24
09678     AF 6C 02 FB | 	rdlong	local09, fp
0967c     0C 5E 85 F1 | 	sub	fp, #12
09680     36 79 1A F2 | 	cmp	local15, local09 wcz
09684     14 00 90 ED |  if_be	jmp	#LR__0648
09688     0C 5E 05 F1 | 	add	fp, #12
0968c     AF 78 02 FB | 	rdlong	local15, fp
09690     18 5E 05 F1 | 	add	fp, #24
09694     AF 78 62 FC | 	wrlong	local15, fp
09698     24 5E 85 F1 | 	sub	fp, #36
0969c                 | LR__0648
0969c     18 5E 05 F1 | 	add	fp, #24
096a0     AF 52 02 FB | 	rdlong	arg01, fp
096a4     14 5E 85 F1 | 	sub	fp, #20
096a8     AF 6C 02 FB | 	rdlong	local09, fp
096ac     04 5E 85 F1 | 	sub	fp, #4
096b0     1C 6C 06 F1 | 	add	local09, #28
096b4     36 55 02 FB | 	rdlong	arg02, local09
096b8     BC C7 BF FD | 	call	#_ff_cc_move_window_0230
096bc     00 2C 0E F2 | 	cmp	result1, #0 wz
096c0     1C 00 90 AD |  if_e	jmp	#LR__0649
096c4     04 5E 05 F1 | 	add	fp, #4
096c8     AF 78 02 FB | 	rdlong	local15, fp
096cc     04 5E 85 F1 | 	sub	fp, #4
096d0     11 78 06 F1 | 	add	local15, #17
096d4     3C 03 48 FC | 	wrbyte	#1, local15
096d8     01 2C 06 F6 | 	mov	result1, #1
096dc     BC 01 90 FD | 	jmp	#LR__0654
096e0                 | LR__0649
096e0     18 5E 05 F1 | 	add	fp, #24
096e4     AF 80 02 FB | 	rdlong	local19, fp
096e8     30 80 06 F1 | 	add	local19, #48
096ec     40 53 02 F6 | 	mov	arg01, local19
096f0     14 5E 85 F1 | 	sub	fp, #20
096f4     AF 64 02 FB | 	rdlong	local05, fp
096f8     14 64 06 F1 | 	add	local05, #20
096fc     32 6F 02 FB | 	rdlong	local10, local05
09700     FF 6F 06 F5 | 	and	local10, #511
09704     37 53 02 F1 | 	add	arg01, local10
09708     2C 5E 05 F1 | 	add	fp, #44
0970c     AF 54 02 FB | 	rdlong	arg02, fp
09710     0C 5E 85 F1 | 	sub	fp, #12
09714     AF 56 02 FB | 	rdlong	arg03, fp
09718     24 5E 85 F1 | 	sub	fp, #36
0971c     F0 C5 BF FD | 	call	#_ff_cc_mem_cpy_0217
09720     18 5E 05 F1 | 	add	fp, #24
09724     AF 78 02 FB | 	rdlong	local15, fp
09728     18 5E 85 F1 | 	sub	fp, #24
0972c     03 78 06 F1 | 	add	local15, #3
09730     3C 03 48 FC | 	wrbyte	#1, local15
09734                 | LR__0650
09734     0C 5E 05 F1 | 	add	fp, #12
09738     AF 78 02 FB | 	rdlong	local15, fp
0973c     18 5E 05 F1 | 	add	fp, #24
09740     AF 6A 02 FB | 	rdlong	local08, fp
09744     35 79 82 F1 | 	sub	local15, local08
09748     18 5E 85 F1 | 	sub	fp, #24
0974c     AF 78 62 FC | 	wrlong	local15, fp
09750     04 5E 05 F1 | 	add	fp, #4
09754     AF 68 02 FB | 	rdlong	local07, fp
09758     34 73 02 F6 | 	mov	local12, local07
0975c     39 6F 02 FB | 	rdlong	local10, local12
09760     14 5E 05 F1 | 	add	fp, #20
09764     AF 74 02 FB | 	rdlong	local13, fp
09768     3A 77 02 F6 | 	mov	local14, local13
0976c     3A 6F 02 F1 | 	add	local10, local13
09770     34 6F 62 FC | 	wrlong	local10, local07
09774     0C 5E 05 F1 | 	add	fp, #12
09778     AF 82 02 FB | 	rdlong	local20, fp
0977c     41 85 02 F6 | 	mov	local21, local20
09780     0C 5E 85 F1 | 	sub	fp, #12
09784     AF 86 02 FB | 	rdlong	local22, fp
09788     43 89 02 F6 | 	mov	local23, local22
0978c     43 85 02 F1 | 	add	local21, local22
09790     0C 5E 05 F1 | 	add	fp, #12
09794     AF 84 62 FC | 	wrlong	local21, fp
09798     2C 5E 85 F1 | 	sub	fp, #44
0979c     AF 8A 02 FB | 	rdlong	local24, fp
097a0     45 8D 02 F6 | 	mov	local25, local24
097a4     45 8F 02 F6 | 	mov	local26, local24
097a8     47 91 02 F6 | 	mov	local27, local26
097ac     14 90 06 F1 | 	add	local27, #20
097b0     48 93 02 FB | 	rdlong	local28, local27
097b4     14 90 86 F1 | 	sub	local27, #20
097b8     49 95 02 F6 | 	mov	local29, local28
097bc     20 5E 05 F1 | 	add	fp, #32
097c0     AF 96 02 FB | 	rdlong	local30, fp
097c4     4B 99 02 F6 | 	mov	local31, local30
097c8     4B 95 02 F1 | 	add	local29, local30
097cc     14 8C 06 F1 | 	add	local25, #20
097d0     46 95 62 FC | 	wrlong	local29, local25
097d4     14 8C 86 F1 | 	sub	local25, #20
097d8     20 5E 85 F1 | 	sub	fp, #32
097dc     AF 9A 02 FB | 	rdlong	local32, fp
097e0     4D 9D 02 F6 | 	mov	local33, local32
097e4     4D 9F 02 F6 | 	mov	local34, local32
097e8     4F A1 02 F6 | 	mov	local35, local34
097ec     4D A3 02 F6 | 	mov	local36, local32
097f0     04 5E 85 F1 | 	sub	fp, #4
097f4     51 A5 02 F6 | 	mov	local37, local36
097f8     14 A0 06 F1 | 	add	local35, #20
097fc     50 A7 02 FB | 	rdlong	local38, local35
09800     14 A0 86 F1 | 	sub	local35, #20
09804     53 A9 02 F6 | 	mov	local39, local38
09808     0C A4 06 F1 | 	add	local37, #12
0980c     52 AB 02 FB | 	rdlong	local40, local37
09810     0C A4 86 F1 | 	sub	local37, #12
09814     55 AD 02 F6 | 	mov	local41, local40
09818     56 A9 1A F2 | 	cmp	local39, local41 wcz
0981c     24 00 90 ED |  if_be	jmp	#LR__0651
09820     04 5E 05 F1 | 	add	fp, #4
09824     AF AE 02 FB | 	rdlong	local42, fp
09828     04 5E 85 F1 | 	sub	fp, #4
0982c     57 B1 02 F6 | 	mov	local43, local42
09830     14 B0 06 F1 | 	add	local43, #20
09834     58 B3 02 FB | 	rdlong	local44, local43
09838     14 B0 86 F1 | 	sub	local43, #20
0983c     59 B5 02 F6 | 	mov	local45, local44
09840     20 00 90 FD | 	jmp	#LR__0652
09844                 | LR__0651
09844     04 5E 05 F1 | 	add	fp, #4
09848     AF B6 02 FB | 	rdlong	local46, fp
0984c     04 5E 85 F1 | 	sub	fp, #4
09850     5B B9 02 F6 | 	mov	local47, local46
09854     0C B8 06 F1 | 	add	local47, #12
09858     5C BB 02 FB | 	rdlong	local48, local47
0985c     0C B8 86 F1 | 	sub	local47, #12
09860     5D B5 02 F6 | 	mov	local45, local48
09864                 | LR__0652
09864     0C 9C 06 F1 | 	add	local33, #12
09868     4E B5 62 FC | 	wrlong	local45, local33
0986c     0C 9C 86 F1 | 	sub	local33, #12
09870     40 F9 9F FD | 	jmp	#LR__0632
09874                 | LR__0653
09874     04 5E 05 F1 | 	add	fp, #4
09878     AF 5C 02 FB | 	rdlong	local01, fp
0987c     2E 65 02 F6 | 	mov	local05, local01
09880     04 5E 85 F1 | 	sub	fp, #4
09884     10 64 06 F1 | 	add	local05, #16
09888     32 79 C2 FA | 	rdbyte	local15, local05
0988c     40 78 46 F5 | 	or	local15, #64
09890     10 5C 06 F1 | 	add	local01, #16
09894     2E 79 42 FC | 	wrbyte	local15, local01
09898                 | ' 		mem_cpy(fs->win + fp->fptr %  ((UINT) 512 ) , wbuff, wcnt);
09898                 | ' 		fs->wflag = 1;
09898                 | ' #line 4094 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09898                 | ' 	}
09898                 | ' 
09898                 | ' 	fp->flag |=  0x40 ;
09898                 | ' 
09898                 | ' 	return FR_OK ;
09898     00 2C 06 F6 | 	mov	result1, #0
0989c                 | LR__0654
0989c     AF F0 03 F6 | 	mov	ptra, fp
098a0     BF 00 A0 FD | 	call	#popregs_
098a4                 | _ff_cc_f_write_ret
098a4     2D 00 64 FD | 	ret
098a8                 | 
098a8                 | _ff_cc_f_sync
098a8     06 5A 05 F6 | 	mov	COUNT_, #6
098ac     B0 00 A0 FD | 	call	#pushregs_
098b0     34 F0 07 F1 | 	add	ptra, #52
098b4     04 5E 05 F1 | 	add	fp, #4
098b8     AF 52 62 FC | 	wrlong	arg01, fp
098bc     08 5E 05 F1 | 	add	fp, #8
098c0     AF 54 02 F6 | 	mov	arg02, fp
098c4     0C 5E 85 F1 | 	sub	fp, #12
098c8     30 E8 BF FD | 	call	#_ff_cc_validate_0328
098cc     08 5E 05 F1 | 	add	fp, #8
098d0     AF 2C 62 FC | 	wrlong	result1, fp
098d4     AF 5C 0A FB | 	rdlong	local01, fp wz
098d8     08 5E 85 F1 | 	sub	fp, #8
098dc     58 01 90 5D |  if_ne	jmp	#LR__0657
098e0     04 5E 05 F1 | 	add	fp, #4
098e4     AF 5E 02 FB | 	rdlong	local02, fp
098e8     04 5E 85 F1 | 	sub	fp, #4
098ec     10 5E 06 F1 | 	add	local02, #16
098f0     2F 5D C2 FA | 	rdbyte	local01, local02
098f4     40 5C CE F7 | 	test	local01, #64 wz
098f8     3C 01 90 AD |  if_e	jmp	#LR__0656
098fc     10 5E 05 F1 | 	add	fp, #16
09900     80 10 A7 FF 
09904     AF 00 68 FC | 	wrlong	##1310785536, fp
09908     04 5E 85 F1 | 	sub	fp, #4
0990c     AF 52 02 FB | 	rdlong	arg01, fp
09910     08 5E 85 F1 | 	sub	fp, #8
09914     AF 60 02 FB | 	rdlong	local03, fp
09918     04 5E 85 F1 | 	sub	fp, #4
0991c     20 60 06 F1 | 	add	local03, #32
09920     30 55 02 FB | 	rdlong	arg02, local03
09924     50 C5 BF FD | 	call	#_ff_cc_move_window_0230
09928     08 5E 05 F1 | 	add	fp, #8
0992c     AF 2C 62 FC | 	wrlong	result1, fp
09930     AF 5C 0A FB | 	rdlong	local01, fp wz
09934     08 5E 85 F1 | 	sub	fp, #8
09938     FC 00 90 5D |  if_ne	jmp	#LR__0655
0993c     04 5E 05 F1 | 	add	fp, #4
09940     AF 5C 02 FB | 	rdlong	local01, fp
09944     24 5C 06 F1 | 	add	local01, #36
09948     2E 5D 02 FB | 	rdlong	local01, local01
0994c     10 5E 05 F1 | 	add	fp, #16
09950     AF 5C 62 FC | 	wrlong	local01, fp
09954     0B 5C 06 F1 | 	add	local01, #11
09958     2E 63 C2 FA | 	rdbyte	local04, local01
0995c     20 62 46 F5 | 	or	local04, #32
09960     AF 5C 02 FB | 	rdlong	local01, fp
09964     0B 5C 06 F1 | 	add	local01, #11
09968     2E 63 42 FC | 	wrbyte	local04, local01
0996c     10 5E 85 F1 | 	sub	fp, #16
09970     AF 5C 02 FB | 	rdlong	local01, fp
09974     2E 53 02 FB | 	rdlong	arg01, local01
09978     10 5E 05 F1 | 	add	fp, #16
0997c     AF 54 02 FB | 	rdlong	arg02, fp
09980     10 5E 85 F1 | 	sub	fp, #16
09984     AF 64 02 FB | 	rdlong	local05, fp
09988     04 5E 85 F1 | 	sub	fp, #4
0998c     08 64 06 F1 | 	add	local05, #8
09990     32 57 02 FB | 	rdlong	arg03, local05
09994     AC D4 BF FD | 	call	#_ff_cc_st_clust_0272
09998     14 5E 05 F1 | 	add	fp, #20
0999c     AF 52 02 FB | 	rdlong	arg01, fp
099a0     1C 52 06 F1 | 	add	arg01, #28
099a4     10 5E 85 F1 | 	sub	fp, #16
099a8     AF 5E 02 FB | 	rdlong	local02, fp
099ac     04 5E 85 F1 | 	sub	fp, #4
099b0     0C 5E 06 F1 | 	add	local02, #12
099b4     2F 55 02 FB | 	rdlong	arg02, local02
099b8     28 C3 BF FD | 	call	#_ff_cc_st_dword_0214
099bc     14 5E 05 F1 | 	add	fp, #20
099c0     AF 52 02 FB | 	rdlong	arg01, fp
099c4     16 52 06 F1 | 	add	arg01, #22
099c8     04 5E 85 F1 | 	sub	fp, #4
099cc     AF 54 02 FB | 	rdlong	arg02, fp
099d0     10 5E 85 F1 | 	sub	fp, #16
099d4     0C C3 BF FD | 	call	#_ff_cc_st_dword_0214
099d8     14 5E 05 F1 | 	add	fp, #20
099dc     AF 52 02 FB | 	rdlong	arg01, fp
099e0     14 5E 85 F1 | 	sub	fp, #20
099e4     12 52 06 F1 | 	add	arg01, #18
099e8     00 54 06 F6 | 	mov	arg02, #0
099ec     D0 C2 BF FD | 	call	#_ff_cc_st_word_0213
099f0     0C 5E 05 F1 | 	add	fp, #12
099f4     AF 5C 02 FB | 	rdlong	local01, fp
099f8     03 5C 06 F1 | 	add	local01, #3
099fc     2E 03 48 FC | 	wrbyte	#1, local01
09a00     AF 52 02 FB | 	rdlong	arg01, fp
09a04     0C 5E 85 F1 | 	sub	fp, #12
09a08     E8 C4 BF FD | 	call	#_ff_cc_sync_fs_0232
09a0c     08 5E 05 F1 | 	add	fp, #8
09a10     AF 2C 62 FC | 	wrlong	result1, fp
09a14     04 5E 85 F1 | 	sub	fp, #4
09a18     AF 5C 02 FB | 	rdlong	local01, fp
09a1c     2E 67 02 F6 | 	mov	local06, local01
09a20     04 5E 85 F1 | 	sub	fp, #4
09a24     10 66 06 F1 | 	add	local06, #16
09a28     33 61 C2 FA | 	rdbyte	local03, local06
09a2c     BF 60 06 F5 | 	and	local03, #191
09a30     10 5C 06 F1 | 	add	local01, #16
09a34     2E 61 42 FC | 	wrbyte	local03, local01
09a38                 | LR__0655
09a38                 | LR__0656
09a38                 | LR__0657
09a38                 | ' 					dir = fp->dir_ptr;
09a38                 | ' 					dir[ 11 ] |=  0x20 ;
09a38                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
09a38                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
09a38                 | ' 					st_dword(dir +  22 , tm);
09a38                 | ' 					st_word(dir +  18 , 0);
09a38                 | ' 					fs->wflag = 1;
09a38                 | ' 					res = sync_fs(fs);
09a38                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
09a38                 | ' 				}
09a38                 | ' 			}
09a38                 | ' 		}
09a38                 | ' 	}
09a38                 | ' 
09a38                 | ' 	return res ;
09a38     08 5E 05 F1 | 	add	fp, #8
09a3c     AF 2C 02 FB | 	rdlong	result1, fp
09a40     08 5E 85 F1 | 	sub	fp, #8
09a44     AF F0 03 F6 | 	mov	ptra, fp
09a48     BF 00 A0 FD | 	call	#popregs_
09a4c                 | _ff_cc_f_sync_ret
09a4c     2D 00 64 FD | 	ret
09a50                 | 
09a50                 | _ff_cc_f_close
09a50     01 5A 05 F6 | 	mov	COUNT_, #1
09a54     B0 00 A0 FD | 	call	#pushregs_
09a58     18 F0 07 F1 | 	add	ptra, #24
09a5c     04 5E 05 F1 | 	add	fp, #4
09a60     AF 52 62 FC | 	wrlong	arg01, fp
09a64     04 5E 85 F1 | 	sub	fp, #4
09a68     3C FE BF FD | 	call	#_ff_cc_f_sync
09a6c     08 5E 05 F1 | 	add	fp, #8
09a70     AF 2C 62 FC | 	wrlong	result1, fp
09a74     AF 5C 0A FB | 	rdlong	local01, fp wz
09a78     08 5E 85 F1 | 	sub	fp, #8
09a7c     3C 00 90 5D |  if_ne	jmp	#LR__0659
09a80     04 5E 05 F1 | 	add	fp, #4
09a84     AF 52 02 FB | 	rdlong	arg01, fp
09a88     08 5E 05 F1 | 	add	fp, #8
09a8c     AF 54 02 F6 | 	mov	arg02, fp
09a90     0C 5E 85 F1 | 	sub	fp, #12
09a94     64 E6 BF FD | 	call	#_ff_cc_validate_0328
09a98     08 5E 05 F1 | 	add	fp, #8
09a9c     AF 2C 62 FC | 	wrlong	result1, fp
09aa0     AF 5C 0A FB | 	rdlong	local01, fp wz
09aa4     08 5E 85 F1 | 	sub	fp, #8
09aa8     10 00 90 5D |  if_ne	jmp	#LR__0658
09aac     04 5E 05 F1 | 	add	fp, #4
09ab0     AF 5C 02 FB | 	rdlong	local01, fp
09ab4     04 5E 85 F1 | 	sub	fp, #4
09ab8     2E 01 68 FC | 	wrlong	#0, local01
09abc                 | LR__0658
09abc                 | LR__0659
09abc                 | ' 
09abc                 | ' 
09abc                 | ' 
09abc                 | ' 
09abc                 | ' 			fp->obj.fs = 0;
09abc                 | ' #line 4212 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09abc                 | ' 		}
09abc                 | ' 	}
09abc                 | ' 	return res;
09abc     08 5E 05 F1 | 	add	fp, #8
09ac0     AF 2C 02 FB | 	rdlong	result1, fp
09ac4     08 5E 85 F1 | 	sub	fp, #8
09ac8     AF F0 03 F6 | 	mov	ptra, fp
09acc     BF 00 A0 FD | 	call	#popregs_
09ad0                 | _ff_cc_f_close_ret
09ad0     2D 00 64 FD | 	ret
09ad4                 | 
09ad4                 | _ff_cc_f_lseek
09ad4     11 5A 05 F6 | 	mov	COUNT_, #17
09ad8     B0 00 A0 FD | 	call	#pushregs_
09adc     40 F0 07 F1 | 	add	ptra, #64
09ae0     04 5E 05 F1 | 	add	fp, #4
09ae4     AF 52 62 FC | 	wrlong	arg01, fp
09ae8     04 5E 05 F1 | 	add	fp, #4
09aec     AF 54 62 FC | 	wrlong	arg02, fp
09af0     04 5E 85 F1 | 	sub	fp, #4
09af4     AF 5C 02 FB | 	rdlong	local01, fp
09af8     0C 5E 05 F1 | 	add	fp, #12
09afc     AF 5E 02 F6 | 	mov	local02, fp
09b00     2E 53 02 F6 | 	mov	arg01, local01
09b04     2F 55 02 F6 | 	mov	arg02, local02
09b08     10 5E 85 F1 | 	sub	fp, #16
09b0c     EC E5 BF FD | 	call	#_ff_cc_validate_0328
09b10     0C 5E 05 F1 | 	add	fp, #12
09b14     AF 2C 62 FC | 	wrlong	result1, fp
09b18     AF 60 0A FB | 	rdlong	local03, fp wz
09b1c     0C 5E 85 F1 | 	sub	fp, #12
09b20     1C 00 90 5D |  if_ne	jmp	#LR__0660
09b24     04 5E 05 F1 | 	add	fp, #4
09b28     AF 62 02 FB | 	rdlong	local04, fp
09b2c     11 62 06 F1 | 	add	local04, #17
09b30     31 61 C2 FA | 	rdbyte	local03, local04
09b34     08 5E 05 F1 | 	add	fp, #8
09b38     AF 60 62 FC | 	wrlong	local03, fp
09b3c     0C 5E 85 F1 | 	sub	fp, #12
09b40                 | LR__0660
09b40     0C 5E 05 F1 | 	add	fp, #12
09b44     AF 60 0A FB | 	rdlong	local03, fp wz
09b48     0C 5E 85 F1 | 	sub	fp, #12
09b4c     10 00 90 AD |  if_e	jmp	#LR__0661
09b50     0C 5E 05 F1 | 	add	fp, #12
09b54     AF 2C 02 FB | 	rdlong	result1, fp
09b58     0C 5E 85 F1 | 	sub	fp, #12
09b5c     B0 05 90 FD | 	jmp	#LR__0681
09b60                 | LR__0661
09b60     04 5E 05 F1 | 	add	fp, #4
09b64     AF 60 02 FB | 	rdlong	local03, fp
09b68     04 5E 05 F1 | 	add	fp, #4
09b6c     AF 64 02 FB | 	rdlong	local05, fp
09b70     08 5E 85 F1 | 	sub	fp, #8
09b74     0C 60 06 F1 | 	add	local03, #12
09b78     30 67 02 FB | 	rdlong	local06, local03
09b7c     33 69 02 F6 | 	mov	local07, local06
09b80     34 65 1A F2 | 	cmp	local05, local07 wcz
09b84     50 00 90 ED |  if_be	jmp	#LR__0662
09b88     04 5E 05 F1 | 	add	fp, #4
09b8c     AF 6A 02 FB | 	rdlong	local08, fp
09b90     04 5E 85 F1 | 	sub	fp, #4
09b94     35 6D 02 F6 | 	mov	local09, local08
09b98     10 6C 06 F1 | 	add	local09, #16
09b9c     36 6F C2 FA | 	rdbyte	local10, local09
09ba0     10 6C 86 F1 | 	sub	local09, #16
09ba4     37 71 02 F6 | 	mov	local11, local10
09ba8     07 70 46 F7 | 	zerox	local11, #7
09bac     02 70 0E F5 | 	and	local11, #2 wz
09bb0     24 00 90 5D |  if_ne	jmp	#LR__0662
09bb4     04 5E 05 F1 | 	add	fp, #4
09bb8     AF 62 02 FB | 	rdlong	local04, fp
09bbc     31 61 02 F6 | 	mov	local03, local04
09bc0     0C 60 06 F1 | 	add	local03, #12
09bc4     30 73 02 FB | 	rdlong	local12, local03
09bc8     0C 60 86 F1 | 	sub	local03, #12
09bcc     04 5E 05 F1 | 	add	fp, #4
09bd0     AF 72 62 FC | 	wrlong	local12, fp
09bd4     08 5E 85 F1 | 	sub	fp, #8
09bd8                 | LR__0662
09bd8     04 5E 05 F1 | 	add	fp, #4
09bdc     AF 60 02 FB | 	rdlong	local03, fp
09be0     14 60 06 F1 | 	add	local03, #20
09be4     30 73 02 FB | 	rdlong	local12, local03
09be8     1C 5E 05 F1 | 	add	fp, #28
09bec     AF 72 62 FC | 	wrlong	local12, fp
09bf0     1C 5E 85 F1 | 	sub	fp, #28
09bf4     AF 60 02 FB | 	rdlong	local03, fp
09bf8     18 5E 05 F1 | 	add	fp, #24
09bfc     AF 00 68 FC | 	wrlong	#0, fp
09c00     14 60 06 F1 | 	add	local03, #20
09c04     30 01 68 FC | 	wrlong	#0, local03
09c08     14 5E 85 F1 | 	sub	fp, #20
09c0c     AF 60 02 FB | 	rdlong	local03, fp
09c10     08 5E 85 F1 | 	sub	fp, #8
09c14     00 60 1E F2 | 	cmp	local03, #0 wcz
09c18     0C 04 90 ED |  if_be	jmp	#LR__0678
09c1c     10 5E 05 F1 | 	add	fp, #16
09c20     AF 62 02 FB | 	rdlong	local04, fp
09c24     0A 62 06 F1 | 	add	local04, #10
09c28     31 69 E2 FA | 	rdword	local07, local04
09c2c     09 68 66 F0 | 	shl	local07, #9
09c30     08 5E 05 F1 | 	add	fp, #8
09c34     AF 68 62 FC | 	wrlong	local07, fp
09c38     08 5E 05 F1 | 	add	fp, #8
09c3c     AF 60 02 FB | 	rdlong	local03, fp
09c40     20 5E 85 F1 | 	sub	fp, #32
09c44     00 60 1E F2 | 	cmp	local03, #0 wcz
09c48     C0 00 90 ED |  if_be	jmp	#LR__0663
09c4c     08 5E 05 F1 | 	add	fp, #8
09c50     AF FC 02 FB | 	rdlong	muldiva_, fp
09c54     01 FC 86 F1 | 	sub	muldiva_, #1
09c58     10 5E 05 F1 | 	add	fp, #16
09c5c     AF FE 02 FB | 	rdlong	muldivb_, fp
09c60     18 5E 85 F1 | 	sub	fp, #24
09c64     CC 00 A0 FD | 	call	#unsdivide_
09c68     7F 69 02 F6 | 	mov	local07, muldivb_
09c6c     20 5E 05 F1 | 	add	fp, #32
09c70     AF FC 02 FB | 	rdlong	muldiva_, fp
09c74     01 FC 86 F1 | 	sub	muldiva_, #1
09c78     08 5E 85 F1 | 	sub	fp, #8
09c7c     AF 6E 02 FB | 	rdlong	local10, fp
09c80     18 5E 85 F1 | 	sub	fp, #24
09c84     37 FF 02 F6 | 	mov	muldivb_, local10
09c88     CC 00 A0 FD | 	call	#unsdivide_
09c8c     7F 6B 02 F6 | 	mov	local08, muldivb_
09c90     35 69 1A F2 | 	cmp	local07, local08 wcz
09c94     74 00 90 CD |  if_b	jmp	#LR__0663
09c98     20 5E 05 F1 | 	add	fp, #32
09c9c     AF 74 02 FB | 	rdlong	local13, fp
09ca0     01 74 86 F1 | 	sub	local13, #1
09ca4     1C 5E 85 F1 | 	sub	fp, #28
09ca8     AF 60 02 FB | 	rdlong	local03, fp
09cac     3A 73 02 F6 | 	mov	local12, local13
09cb0     14 5E 05 F1 | 	add	fp, #20
09cb4     AF 64 02 FB | 	rdlong	local05, fp
09cb8     01 64 86 F1 | 	sub	local05, #1
09cbc     32 73 22 F5 | 	andn	local12, local05
09cc0     14 60 06 F1 | 	add	local03, #20
09cc4     30 73 62 FC | 	wrlong	local12, local03
09cc8     10 5E 85 F1 | 	sub	fp, #16
09ccc     AF 60 02 FB | 	rdlong	local03, fp
09cd0     04 5E 85 F1 | 	sub	fp, #4
09cd4     AF 72 02 FB | 	rdlong	local12, fp
09cd8     14 72 06 F1 | 	add	local12, #20
09cdc     39 69 02 FB | 	rdlong	local07, local12
09ce0     34 61 82 F1 | 	sub	local03, local07
09ce4     04 5E 05 F1 | 	add	fp, #4
09ce8     AF 60 62 FC | 	wrlong	local03, fp
09cec     04 5E 85 F1 | 	sub	fp, #4
09cf0     AF 60 02 FB | 	rdlong	local03, fp
09cf4     18 60 06 F1 | 	add	local03, #24
09cf8     30 73 02 FB | 	rdlong	local12, local03
09cfc     10 5E 05 F1 | 	add	fp, #16
09d00     AF 72 62 FC | 	wrlong	local12, fp
09d04     14 5E 85 F1 | 	sub	fp, #20
09d08     D8 00 90 FD | 	jmp	#LR__0667
09d0c                 | LR__0663
09d0c     04 5E 05 F1 | 	add	fp, #4
09d10     AF 60 02 FB | 	rdlong	local03, fp
09d14     08 60 06 F1 | 	add	local03, #8
09d18     30 73 02 FB | 	rdlong	local12, local03
09d1c     10 5E 05 F1 | 	add	fp, #16
09d20     AF 72 62 FC | 	wrlong	local12, fp
09d24     AF 60 0A FB | 	rdlong	local03, fp wz
09d28     14 5E 85 F1 | 	sub	fp, #20
09d2c     98 00 90 5D |  if_ne	jmp	#LR__0666
09d30     04 5E 05 F1 | 	add	fp, #4
09d34     AF 76 02 FB | 	rdlong	local14, fp
09d38     04 5E 85 F1 | 	sub	fp, #4
09d3c     3B 53 02 F6 | 	mov	arg01, local14
09d40     00 54 06 F6 | 	mov	arg02, #0
09d44     40 C9 BF FD | 	call	#_ff_cc_create_chain_0252
09d48     14 5E 05 F1 | 	add	fp, #20
09d4c     AF 2C 62 FC | 	wrlong	result1, fp
09d50     14 5E 85 F1 | 	sub	fp, #20
09d54     01 2C 0E F2 | 	cmp	result1, #1 wz
09d58     1C 00 90 5D |  if_ne	jmp	#LR__0664
09d5c     04 5E 05 F1 | 	add	fp, #4
09d60     AF 60 02 FB | 	rdlong	local03, fp
09d64     04 5E 85 F1 | 	sub	fp, #4
09d68     11 60 06 F1 | 	add	local03, #17
09d6c     30 05 48 FC | 	wrbyte	#2, local03
09d70     02 2C 06 F6 | 	mov	result1, #2
09d74     98 03 90 FD | 	jmp	#LR__0681
09d78                 | LR__0664
09d78     14 5E 05 F1 | 	add	fp, #20
09d7c     AF 60 02 FB | 	rdlong	local03, fp
09d80     14 5E 85 F1 | 	sub	fp, #20
09d84     FF FF 7F FF 
09d88     FF 61 0E F2 | 	cmp	local03, ##-1 wz
09d8c     1C 00 90 5D |  if_ne	jmp	#LR__0665
09d90     04 5E 05 F1 | 	add	fp, #4
09d94     AF 60 02 FB | 	rdlong	local03, fp
09d98     04 5E 85 F1 | 	sub	fp, #4
09d9c     11 60 06 F1 | 	add	local03, #17
09da0     30 03 48 FC | 	wrbyte	#1, local03
09da4     01 2C 06 F6 | 	mov	result1, #1
09da8     64 03 90 FD | 	jmp	#LR__0681
09dac                 | LR__0665
09dac     04 5E 05 F1 | 	add	fp, #4
09db0     AF 60 02 FB | 	rdlong	local03, fp
09db4     10 5E 05 F1 | 	add	fp, #16
09db8     AF 72 02 FB | 	rdlong	local12, fp
09dbc     14 5E 85 F1 | 	sub	fp, #20
09dc0     08 60 06 F1 | 	add	local03, #8
09dc4     30 73 62 FC | 	wrlong	local12, local03
09dc8                 | LR__0666
09dc8     04 5E 05 F1 | 	add	fp, #4
09dcc     AF 60 02 FB | 	rdlong	local03, fp
09dd0     10 5E 05 F1 | 	add	fp, #16
09dd4     AF 72 02 FB | 	rdlong	local12, fp
09dd8     14 5E 85 F1 | 	sub	fp, #20
09ddc     18 60 06 F1 | 	add	local03, #24
09de0     30 73 62 FC | 	wrlong	local12, local03
09de4                 | LR__0667
09de4     14 5E 05 F1 | 	add	fp, #20
09de8     AF 60 0A FB | 	rdlong	local03, fp wz
09dec     14 5E 85 F1 | 	sub	fp, #20
09df0     34 02 90 AD |  if_e	jmp	#LR__0677
09df4                 | ' 				while (ofs > bcs) {
09df4                 | LR__0668
09df4     08 5E 05 F1 | 	add	fp, #8
09df8     AF 60 02 FB | 	rdlong	local03, fp
09dfc     10 5E 05 F1 | 	add	fp, #16
09e00     AF 72 02 FB | 	rdlong	local12, fp
09e04     18 5E 85 F1 | 	sub	fp, #24
09e08     39 61 1A F2 | 	cmp	local03, local12 wcz
09e0c     74 01 90 ED |  if_be	jmp	#LR__0674
09e10     08 5E 05 F1 | 	add	fp, #8
09e14     AF 60 02 FB | 	rdlong	local03, fp
09e18     10 5E 05 F1 | 	add	fp, #16
09e1c     AF 72 02 FB | 	rdlong	local12, fp
09e20     39 61 82 F1 | 	sub	local03, local12
09e24     10 5E 85 F1 | 	sub	fp, #16
09e28     AF 60 62 FC | 	wrlong	local03, fp
09e2c     04 5E 85 F1 | 	sub	fp, #4
09e30     AF 60 02 FB | 	rdlong	local03, fp
09e34     30 65 02 F6 | 	mov	local05, local03
09e38     14 64 06 F1 | 	add	local05, #20
09e3c     32 67 02 FB | 	rdlong	local06, local05
09e40     33 73 02 F6 | 	mov	local12, local06
09e44     14 5E 05 F1 | 	add	fp, #20
09e48     AF 6C 02 FB | 	rdlong	local09, fp
09e4c     36 73 02 F1 | 	add	local12, local09
09e50     14 60 06 F1 | 	add	local03, #20
09e54     30 73 62 FC | 	wrlong	local12, local03
09e58     14 5E 85 F1 | 	sub	fp, #20
09e5c     AF 62 02 FB | 	rdlong	local04, fp
09e60     04 5E 85 F1 | 	sub	fp, #4
09e64     10 62 06 F1 | 	add	local04, #16
09e68     31 61 C2 FA | 	rdbyte	local03, local04
09e6c     02 60 CE F7 | 	test	local03, #2 wz
09e70     40 00 90 AD |  if_e	jmp	#LR__0669
09e74     04 5E 05 F1 | 	add	fp, #4
09e78     AF 78 02 FB | 	rdlong	local15, fp
09e7c     10 5E 05 F1 | 	add	fp, #16
09e80     AF 54 02 FB | 	rdlong	arg02, fp
09e84     14 5E 85 F1 | 	sub	fp, #20
09e88     3C 53 02 F6 | 	mov	arg01, local15
09e8c     F8 C7 BF FD | 	call	#_ff_cc_create_chain_0252
09e90     14 5E 05 F1 | 	add	fp, #20
09e94     AF 2C 62 FC | 	wrlong	result1, fp
09e98     AF 60 0A FB | 	rdlong	local03, fp wz
09e9c     14 5E 85 F1 | 	sub	fp, #20
09ea0     38 00 90 5D |  if_ne	jmp	#LR__0670
09ea4     08 5E 05 F1 | 	add	fp, #8
09ea8     AF 00 68 FC | 	wrlong	#0, fp
09eac     08 5E 85 F1 | 	sub	fp, #8
09eb0                 | ' 							ofs = 0; break;
09eb0     D0 00 90 FD | 	jmp	#LR__0674
09eb4                 | LR__0669
09eb4     04 5E 05 F1 | 	add	fp, #4
09eb8     AF 7A 02 FB | 	rdlong	local16, fp
09ebc     10 5E 05 F1 | 	add	fp, #16
09ec0     AF 54 02 FB | 	rdlong	arg02, fp
09ec4     14 5E 85 F1 | 	sub	fp, #20
09ec8     3D 53 02 F6 | 	mov	arg01, local16
09ecc     D8 C1 BF FD | 	call	#_ff_cc_get_fat_0238
09ed0     14 5E 05 F1 | 	add	fp, #20
09ed4     AF 2C 62 FC | 	wrlong	result1, fp
09ed8     14 5E 85 F1 | 	sub	fp, #20
09edc                 | LR__0670
09edc     14 5E 05 F1 | 	add	fp, #20
09ee0     AF 60 02 FB | 	rdlong	local03, fp
09ee4     14 5E 85 F1 | 	sub	fp, #20
09ee8     FF FF 7F FF 
09eec     FF 61 0E F2 | 	cmp	local03, ##-1 wz
09ef0     1C 00 90 5D |  if_ne	jmp	#LR__0671
09ef4     04 5E 05 F1 | 	add	fp, #4
09ef8     AF 60 02 FB | 	rdlong	local03, fp
09efc     04 5E 85 F1 | 	sub	fp, #4
09f00     11 60 06 F1 | 	add	local03, #17
09f04     30 03 48 FC | 	wrbyte	#1, local03
09f08     01 2C 06 F6 | 	mov	result1, #1
09f0c     00 02 90 FD | 	jmp	#LR__0681
09f10                 | LR__0671
09f10     14 5E 05 F1 | 	add	fp, #20
09f14     AF 60 02 FB | 	rdlong	local03, fp
09f18     14 5E 85 F1 | 	sub	fp, #20
09f1c     01 60 1E F2 | 	cmp	local03, #1 wcz
09f20     24 00 90 ED |  if_be	jmp	#LR__0672
09f24     10 5E 05 F1 | 	add	fp, #16
09f28     AF 72 02 FB | 	rdlong	local12, fp
09f2c     04 5E 05 F1 | 	add	fp, #4
09f30     AF 68 02 FB | 	rdlong	local07, fp
09f34     14 5E 85 F1 | 	sub	fp, #20
09f38     14 72 06 F1 | 	add	local12, #20
09f3c     39 71 02 FB | 	rdlong	local11, local12
09f40     38 69 1A F2 | 	cmp	local07, local11 wcz
09f44     1C 00 90 CD |  if_b	jmp	#LR__0673
09f48                 | LR__0672
09f48     04 5E 05 F1 | 	add	fp, #4
09f4c     AF 60 02 FB | 	rdlong	local03, fp
09f50     04 5E 85 F1 | 	sub	fp, #4
09f54     11 60 06 F1 | 	add	local03, #17
09f58     30 05 48 FC | 	wrbyte	#2, local03
09f5c     02 2C 06 F6 | 	mov	result1, #2
09f60     AC 01 90 FD | 	jmp	#LR__0681
09f64                 | LR__0673
09f64     04 5E 05 F1 | 	add	fp, #4
09f68     AF 60 02 FB | 	rdlong	local03, fp
09f6c     10 5E 05 F1 | 	add	fp, #16
09f70     AF 72 02 FB | 	rdlong	local12, fp
09f74     14 5E 85 F1 | 	sub	fp, #20
09f78     18 60 06 F1 | 	add	local03, #24
09f7c     30 73 62 FC | 	wrlong	local12, local03
09f80     70 FE 9F FD | 	jmp	#LR__0668
09f84                 | LR__0674
09f84     04 5E 05 F1 | 	add	fp, #4
09f88     AF 60 02 FB | 	rdlong	local03, fp
09f8c     30 65 02 F6 | 	mov	local05, local03
09f90     14 64 06 F1 | 	add	local05, #20
09f94     32 73 02 FB | 	rdlong	local12, local05
09f98     04 5E 05 F1 | 	add	fp, #4
09f9c     AF 70 02 FB | 	rdlong	local11, fp
09fa0     38 73 02 F1 | 	add	local12, local11
09fa4     14 60 06 F1 | 	add	local03, #20
09fa8     30 73 62 FC | 	wrlong	local12, local03
09fac     AF 60 02 FB | 	rdlong	local03, fp
09fb0     08 5E 85 F1 | 	sub	fp, #8
09fb4     FF 61 CE F7 | 	test	local03, #511 wz
09fb8     6C 00 90 AD |  if_e	jmp	#LR__0676
09fbc     10 5E 05 F1 | 	add	fp, #16
09fc0     AF 52 02 FB | 	rdlong	arg01, fp
09fc4     04 5E 05 F1 | 	add	fp, #4
09fc8     AF 54 02 FB | 	rdlong	arg02, fp
09fcc     14 5E 85 F1 | 	sub	fp, #20
09fd0     94 C0 BF FD | 	call	#_ff_cc_clst2sect_0233
09fd4     1C 5E 05 F1 | 	add	fp, #28
09fd8     AF 2C 62 FC | 	wrlong	result1, fp
09fdc     AF 60 0A FB | 	rdlong	local03, fp wz
09fe0     1C 5E 85 F1 | 	sub	fp, #28
09fe4     1C 00 90 5D |  if_ne	jmp	#LR__0675
09fe8     04 5E 05 F1 | 	add	fp, #4
09fec     AF 60 02 FB | 	rdlong	local03, fp
09ff0     04 5E 85 F1 | 	sub	fp, #4
09ff4     11 60 06 F1 | 	add	local03, #17
09ff8     30 05 48 FC | 	wrbyte	#2, local03
09ffc     02 2C 06 F6 | 	mov	result1, #2
0a000     0C 01 90 FD | 	jmp	#LR__0681
0a004                 | LR__0675
0a004     1C 5E 05 F1 | 	add	fp, #28
0a008     AF 60 02 FB | 	rdlong	local03, fp
0a00c     14 5E 85 F1 | 	sub	fp, #20
0a010     AF 72 02 FB | 	rdlong	local12, fp
0a014     09 72 46 F0 | 	shr	local12, #9
0a018     39 61 02 F1 | 	add	local03, local12
0a01c     14 5E 05 F1 | 	add	fp, #20
0a020     AF 60 62 FC | 	wrlong	local03, fp
0a024     1C 5E 85 F1 | 	sub	fp, #28
0a028                 | LR__0676
0a028                 | LR__0677
0a028                 | LR__0678
0a028     04 5E 05 F1 | 	add	fp, #4
0a02c     AF 60 02 FB | 	rdlong	local03, fp
0a030     30 73 02 F6 | 	mov	local12, local03
0a034     04 5E 85 F1 | 	sub	fp, #4
0a038     14 60 06 F1 | 	add	local03, #20
0a03c     30 69 02 FB | 	rdlong	local07, local03
0a040     0C 72 06 F1 | 	add	local12, #12
0a044     39 71 02 FB | 	rdlong	local11, local12
0a048     38 69 1A F2 | 	cmp	local07, local11 wcz
0a04c     3C 00 90 ED |  if_be	jmp	#LR__0679
0a050     04 5E 05 F1 | 	add	fp, #4
0a054     AF 60 02 FB | 	rdlong	local03, fp
0a058     30 73 02 F6 | 	mov	local12, local03
0a05c     14 72 06 F1 | 	add	local12, #20
0a060     39 69 02 FB | 	rdlong	local07, local12
0a064     0C 60 06 F1 | 	add	local03, #12
0a068     30 69 62 FC | 	wrlong	local07, local03
0a06c     AF 60 02 FB | 	rdlong	local03, fp
0a070     30 65 02 F6 | 	mov	local05, local03
0a074     04 5E 85 F1 | 	sub	fp, #4
0a078     10 64 06 F1 | 	add	local05, #16
0a07c     32 73 C2 FA | 	rdbyte	local12, local05
0a080     40 72 46 F5 | 	or	local12, #64
0a084     10 60 06 F1 | 	add	local03, #16
0a088     30 73 42 FC | 	wrbyte	local12, local03
0a08c                 | LR__0679
0a08c     04 5E 05 F1 | 	add	fp, #4
0a090     AF 60 02 FB | 	rdlong	local03, fp
0a094     04 5E 85 F1 | 	sub	fp, #4
0a098     14 60 06 F1 | 	add	local03, #20
0a09c     30 69 02 FB | 	rdlong	local07, local03
0a0a0     34 65 02 F6 | 	mov	local05, local07
0a0a4     FF 65 CE F7 | 	test	local05, #511 wz
0a0a8     58 00 90 AD |  if_e	jmp	#LR__0680
0a0ac     04 5E 05 F1 | 	add	fp, #4
0a0b0     AF 70 02 FB | 	rdlong	local11, fp
0a0b4     38 67 02 F6 | 	mov	local06, local11
0a0b8     18 5E 05 F1 | 	add	fp, #24
0a0bc     AF 6A 02 FB | 	rdlong	local08, fp
0a0c0     1C 5E 85 F1 | 	sub	fp, #28
0a0c4     35 6D 02 F6 | 	mov	local09, local08
0a0c8     1C 66 06 F1 | 	add	local06, #28
0a0cc     33 7D 02 FB | 	rdlong	local17, local06
0a0d0     1C 66 86 F1 | 	sub	local06, #28
0a0d4     3E 6F 02 F6 | 	mov	local10, local17
0a0d8     37 6D 0A F2 | 	cmp	local09, local10 wz
0a0dc     24 00 90 AD |  if_e	jmp	#LR__0680
0a0e0     04 5E 05 F1 | 	add	fp, #4
0a0e4     AF 62 02 FB | 	rdlong	local04, fp
0a0e8     31 61 02 F6 | 	mov	local03, local04
0a0ec     18 5E 05 F1 | 	add	fp, #24
0a0f0     AF 72 02 FB | 	rdlong	local12, fp
0a0f4     1C 5E 85 F1 | 	sub	fp, #28
0a0f8     1C 60 06 F1 | 	add	local03, #28
0a0fc     30 73 62 FC | 	wrlong	local12, local03
0a100     1C 60 86 F1 | 	sub	local03, #28
0a104                 | LR__0680
0a104                 | ' #line 4553 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a104                 | ' 			fp->sect = nsect;
0a104                 | ' 		}
0a104                 | ' 	}
0a104                 | ' 
0a104                 | ' 	return res ;
0a104     0C 5E 05 F1 | 	add	fp, #12
0a108     AF 2C 02 FB | 	rdlong	result1, fp
0a10c     0C 5E 85 F1 | 	sub	fp, #12
0a110                 | LR__0681
0a110     AF F0 03 F6 | 	mov	ptra, fp
0a114     BF 00 A0 FD | 	call	#popregs_
0a118                 | _ff_cc_f_lseek_ret
0a118     2D 00 64 FD | 	ret
0a11c                 | 
0a11c                 | _ff_cc_f_opendir
0a11c     04 5A 05 F6 | 	mov	COUNT_, #4
0a120     B0 00 A0 FD | 	call	#pushregs_
0a124     1C F0 07 F1 | 	add	ptra, #28
0a128     04 5E 05 F1 | 	add	fp, #4
0a12c     AF 52 62 FC | 	wrlong	arg01, fp
0a130     04 5E 05 F1 | 	add	fp, #4
0a134     AF 54 62 FC | 	wrlong	arg02, fp
0a138     04 5E 85 F1 | 	sub	fp, #4
0a13c     AF 5C 0A FB | 	rdlong	local01, fp wz
0a140     04 5E 85 F1 | 	sub	fp, #4
0a144     09 2C 06 A6 |  if_e	mov	result1, #9
0a148     80 01 90 AD |  if_e	jmp	#LR__0689
0a14c     08 5E 05 F1 | 	add	fp, #8
0a150     AF 52 02 F6 | 	mov	arg01, fp
0a154     08 5E 05 F1 | 	add	fp, #8
0a158     AF 54 02 F6 | 	mov	arg02, fp
0a15c     10 5E 85 F1 | 	sub	fp, #16
0a160     00 56 06 F6 | 	mov	arg03, #0
0a164     20 D9 BF FD | 	call	#_ff_cc_mount_volume_0326
0a168     0C 5E 05 F1 | 	add	fp, #12
0a16c     AF 2C 62 FC | 	wrlong	result1, fp
0a170     AF 5C 0A FB | 	rdlong	local01, fp wz
0a174     0C 5E 85 F1 | 	sub	fp, #12
0a178     24 01 90 5D |  if_ne	jmp	#LR__0687
0a17c     04 5E 05 F1 | 	add	fp, #4
0a180     AF 5C 02 FB | 	rdlong	local01, fp
0a184     0C 5E 05 F1 | 	add	fp, #12
0a188     AF 5E 02 FB | 	rdlong	local02, fp
0a18c     2E 5F 62 FC | 	wrlong	local02, local01
0a190     0C 5E 85 F1 | 	sub	fp, #12
0a194     AF 52 02 FB | 	rdlong	arg01, fp
0a198     04 5E 05 F1 | 	add	fp, #4
0a19c     AF 54 02 FB | 	rdlong	arg02, fp
0a1a0     08 5E 85 F1 | 	sub	fp, #8
0a1a4     9C D3 BF FD | 	call	#_ff_cc_follow_path_0303
0a1a8     0C 5E 05 F1 | 	add	fp, #12
0a1ac     AF 2C 62 FC | 	wrlong	result1, fp
0a1b0     AF 5C 0A FB | 	rdlong	local01, fp wz
0a1b4     0C 5E 85 F1 | 	sub	fp, #12
0a1b8     C8 00 90 5D |  if_ne	jmp	#LR__0686
0a1bc     04 5E 05 F1 | 	add	fp, #4
0a1c0     AF 60 02 FB | 	rdlong	local03, fp
0a1c4     04 5E 85 F1 | 	sub	fp, #4
0a1c8     2B 60 06 F1 | 	add	local03, #43
0a1cc     30 5D C2 FA | 	rdbyte	local01, local03
0a1d0     80 5C CE F7 | 	test	local01, #128 wz
0a1d4     5C 00 90 5D |  if_ne	jmp	#LR__0684
0a1d8     04 5E 05 F1 | 	add	fp, #4
0a1dc     AF 60 02 FB | 	rdlong	local03, fp
0a1e0     04 5E 85 F1 | 	sub	fp, #4
0a1e4     06 60 06 F1 | 	add	local03, #6
0a1e8     30 5D C2 FA | 	rdbyte	local01, local03
0a1ec     10 5C CE F7 | 	test	local01, #16 wz
0a1f0     34 00 90 AD |  if_e	jmp	#LR__0682
0a1f4     04 5E 05 F1 | 	add	fp, #4
0a1f8     AF 5C 02 FB | 	rdlong	local01, fp
0a1fc     0C 5E 05 F1 | 	add	fp, #12
0a200     AF 52 02 FB | 	rdlong	arg01, fp
0a204     0C 5E 85 F1 | 	sub	fp, #12
0a208     AF 62 02 FB | 	rdlong	local04, fp
0a20c     04 5E 85 F1 | 	sub	fp, #4
0a210     1C 62 06 F1 | 	add	local04, #28
0a214     31 55 02 FB | 	rdlong	arg02, local04
0a218     D0 CB BF FD | 	call	#_ff_cc_ld_clust_0271
0a21c     08 5C 06 F1 | 	add	local01, #8
0a220     2E 2D 62 FC | 	wrlong	result1, local01
0a224     0C 00 90 FD | 	jmp	#LR__0683
0a228                 | LR__0682
0a228     0C 5E 05 F1 | 	add	fp, #12
0a22c     AF 0A 68 FC | 	wrlong	#5, fp
0a230     0C 5E 85 F1 | 	sub	fp, #12
0a234                 | LR__0683
0a234                 | LR__0684
0a234     0C 5E 05 F1 | 	add	fp, #12
0a238     AF 5C 0A FB | 	rdlong	local01, fp wz
0a23c     0C 5E 85 F1 | 	sub	fp, #12
0a240     40 00 90 5D |  if_ne	jmp	#LR__0685
0a244     04 5E 05 F1 | 	add	fp, #4
0a248     AF 5C 02 FB | 	rdlong	local01, fp
0a24c     0C 5E 05 F1 | 	add	fp, #12
0a250     AF 5E 02 FB | 	rdlong	local02, fp
0a254     06 5E 06 F1 | 	add	local02, #6
0a258     2F 63 E2 FA | 	rdword	local04, local02
0a25c     04 5C 06 F1 | 	add	local01, #4
0a260     2E 63 52 FC | 	wrword	local04, local01
0a264     0C 5E 85 F1 | 	sub	fp, #12
0a268     AF 52 02 FB | 	rdlong	arg01, fp
0a26c     04 5E 85 F1 | 	sub	fp, #4
0a270     00 54 06 F6 | 	mov	arg02, #0
0a274     4C C7 BF FD | 	call	#_ff_cc_dir_sdi_0261
0a278     0C 5E 05 F1 | 	add	fp, #12
0a27c     AF 2C 62 FC | 	wrlong	result1, fp
0a280     0C 5E 85 F1 | 	sub	fp, #12
0a284                 | LR__0685
0a284                 | LR__0686
0a284     0C 5E 05 F1 | 	add	fp, #12
0a288     AF 5C 02 FB | 	rdlong	local01, fp
0a28c     0C 5E 85 F1 | 	sub	fp, #12
0a290     04 5C 0E F2 | 	cmp	local01, #4 wz
0a294     0C 5E 05 A1 |  if_e	add	fp, #12
0a298     AF 0A 68 AC |  if_e	wrlong	#5, fp
0a29c     0C 5E 85 A1 |  if_e	sub	fp, #12
0a2a0                 | LR__0687
0a2a0     0C 5E 05 F1 | 	add	fp, #12
0a2a4     AF 5C 0A FB | 	rdlong	local01, fp wz
0a2a8     0C 5E 85 F1 | 	sub	fp, #12
0a2ac     10 00 90 AD |  if_e	jmp	#LR__0688
0a2b0     04 5E 05 F1 | 	add	fp, #4
0a2b4     AF 5C 02 FB | 	rdlong	local01, fp
0a2b8     04 5E 85 F1 | 	sub	fp, #4
0a2bc     2E 01 68 FC | 	wrlong	#0, local01
0a2c0                 | LR__0688
0a2c0                 | ' 
0a2c0                 | ' 	return res ;
0a2c0     0C 5E 05 F1 | 	add	fp, #12
0a2c4     AF 2C 02 FB | 	rdlong	result1, fp
0a2c8     0C 5E 85 F1 | 	sub	fp, #12
0a2cc                 | LR__0689
0a2cc     AF F0 03 F6 | 	mov	ptra, fp
0a2d0     BF 00 A0 FD | 	call	#popregs_
0a2d4                 | _ff_cc_f_opendir_ret
0a2d4     2D 00 64 FD | 	ret
0a2d8                 | 
0a2d8                 | _ff_cc_f_closedir
0a2d8     01 5A 05 F6 | 	mov	COUNT_, #1
0a2dc     B0 00 A0 FD | 	call	#pushregs_
0a2e0     18 F0 07 F1 | 	add	ptra, #24
0a2e4     04 5E 05 F1 | 	add	fp, #4
0a2e8     AF 52 62 FC | 	wrlong	arg01, fp
0a2ec     08 5E 05 F1 | 	add	fp, #8
0a2f0     AF 54 02 F6 | 	mov	arg02, fp
0a2f4     0C 5E 85 F1 | 	sub	fp, #12
0a2f8     00 DE BF FD | 	call	#_ff_cc_validate_0328
0a2fc     08 5E 05 F1 | 	add	fp, #8
0a300     AF 2C 62 FC | 	wrlong	result1, fp
0a304     AF 5C 0A FB | 	rdlong	local01, fp wz
0a308     08 5E 85 F1 | 	sub	fp, #8
0a30c     10 00 90 5D |  if_ne	jmp	#LR__0690
0a310     04 5E 05 F1 | 	add	fp, #4
0a314     AF 5C 02 FB | 	rdlong	local01, fp
0a318     04 5E 85 F1 | 	sub	fp, #4
0a31c     2E 01 68 FC | 	wrlong	#0, local01
0a320                 | LR__0690
0a320                 | ' 
0a320                 | ' 
0a320                 | ' 
0a320                 | ' 
0a320                 | ' 		dp->obj.fs = 0;
0a320                 | ' #line 4652 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a320                 | ' 	}
0a320                 | ' 	return res;
0a320     08 5E 05 F1 | 	add	fp, #8
0a324     AF 2C 02 FB | 	rdlong	result1, fp
0a328     08 5E 85 F1 | 	sub	fp, #8
0a32c     AF F0 03 F6 | 	mov	ptra, fp
0a330     BF 00 A0 FD | 	call	#popregs_
0a334                 | _ff_cc_f_closedir_ret
0a334     2D 00 64 FD | 	ret
0a338                 | 
0a338                 | _ff_cc_f_readdir
0a338     01 5A 05 F6 | 	mov	COUNT_, #1
0a33c     B0 00 A0 FD | 	call	#pushregs_
0a340     1C F0 07 F1 | 	add	ptra, #28
0a344     04 5E 05 F1 | 	add	fp, #4
0a348     AF 52 62 FC | 	wrlong	arg01, fp
0a34c     04 5E 05 F1 | 	add	fp, #4
0a350     AF 54 62 FC | 	wrlong	arg02, fp
0a354     04 5E 85 F1 | 	sub	fp, #4
0a358     AF 52 02 FB | 	rdlong	arg01, fp
0a35c     0C 5E 05 F1 | 	add	fp, #12
0a360     AF 54 02 F6 | 	mov	arg02, fp
0a364     10 5E 85 F1 | 	sub	fp, #16
0a368     90 DD BF FD | 	call	#_ff_cc_validate_0328
0a36c     0C 5E 05 F1 | 	add	fp, #12
0a370     AF 2C 62 FC | 	wrlong	result1, fp
0a374     AF 5C 0A FB | 	rdlong	local01, fp wz
0a378     0C 5E 85 F1 | 	sub	fp, #12
0a37c     BC 00 90 5D |  if_ne	jmp	#LR__0694
0a380     08 5E 05 F1 | 	add	fp, #8
0a384     AF 5C 0A FB | 	rdlong	local01, fp wz
0a388     08 5E 85 F1 | 	sub	fp, #8
0a38c     24 00 90 5D |  if_ne	jmp	#LR__0691
0a390     04 5E 05 F1 | 	add	fp, #4
0a394     AF 52 02 FB | 	rdlong	arg01, fp
0a398     04 5E 85 F1 | 	sub	fp, #4
0a39c     00 54 06 F6 | 	mov	arg02, #0
0a3a0     20 C6 BF FD | 	call	#_ff_cc_dir_sdi_0261
0a3a4     0C 5E 05 F1 | 	add	fp, #12
0a3a8     AF 2C 62 FC | 	wrlong	result1, fp
0a3ac     0C 5E 85 F1 | 	sub	fp, #12
0a3b0     88 00 90 FD | 	jmp	#LR__0693
0a3b4                 | LR__0691
0a3b4     04 5E 05 F1 | 	add	fp, #4
0a3b8     AF 52 02 FB | 	rdlong	arg01, fp
0a3bc     04 5E 85 F1 | 	sub	fp, #4
0a3c0     00 54 06 F6 | 	mov	arg02, #0
0a3c4     CC CA BF FD | 	call	#_ff_cc_dir_read_0277
0a3c8     0C 5E 05 F1 | 	add	fp, #12
0a3cc     AF 2C 62 FC | 	wrlong	result1, fp
0a3d0     0C 5E 85 F1 | 	sub	fp, #12
0a3d4     04 2C 0E F2 | 	cmp	result1, #4 wz
0a3d8     0C 5E 05 A1 |  if_e	add	fp, #12
0a3dc     AF 00 68 AC |  if_e	wrlong	#0, fp
0a3e0     0C 5E 85 A1 |  if_e	sub	fp, #12
0a3e4     0C 5E 05 F1 | 	add	fp, #12
0a3e8     AF 5C 0A FB | 	rdlong	local01, fp wz
0a3ec     0C 5E 85 F1 | 	sub	fp, #12
0a3f0     48 00 90 5D |  if_ne	jmp	#LR__0692
0a3f4     04 5E 05 F1 | 	add	fp, #4
0a3f8     AF 52 02 FB | 	rdlong	arg01, fp
0a3fc     04 5E 05 F1 | 	add	fp, #4
0a400     AF 54 02 FB | 	rdlong	arg02, fp
0a404     08 5E 85 F1 | 	sub	fp, #8
0a408     78 CD BF FD | 	call	#_ff_cc_get_fileinfo_0291
0a40c     04 5E 05 F1 | 	add	fp, #4
0a410     AF 52 02 FB | 	rdlong	arg01, fp
0a414     04 5E 85 F1 | 	sub	fp, #4
0a418     00 54 06 F6 | 	mov	arg02, #0
0a41c     30 C7 BF FD | 	call	#_ff_cc_dir_next_0265
0a420     0C 5E 05 F1 | 	add	fp, #12
0a424     AF 2C 62 FC | 	wrlong	result1, fp
0a428     0C 5E 85 F1 | 	sub	fp, #12
0a42c     04 2C 0E F2 | 	cmp	result1, #4 wz
0a430     0C 5E 05 A1 |  if_e	add	fp, #12
0a434     AF 00 68 AC |  if_e	wrlong	#0, fp
0a438     0C 5E 85 A1 |  if_e	sub	fp, #12
0a43c                 | LR__0692
0a43c                 | LR__0693
0a43c                 | LR__0694
0a43c                 | ' 			}
0a43c                 | ' 			;
0a43c                 | ' 		}
0a43c                 | ' 	}
0a43c                 | ' 	return res ;
0a43c     0C 5E 05 F1 | 	add	fp, #12
0a440     AF 2C 02 FB | 	rdlong	result1, fp
0a444     0C 5E 85 F1 | 	sub	fp, #12
0a448     AF F0 03 F6 | 	mov	ptra, fp
0a44c     BF 00 A0 FD | 	call	#popregs_
0a450                 | _ff_cc_f_readdir_ret
0a450     2D 00 64 FD | 	ret
0a454                 | 
0a454                 | _ff_cc_f_stat
0a454     03 5A 05 F6 | 	mov	COUNT_, #3
0a458     B0 00 A0 FD | 	call	#pushregs_
0a45c     48 F0 07 F1 | 	add	ptra, #72
0a460     04 5E 05 F1 | 	add	fp, #4
0a464     AF 52 62 FC | 	wrlong	arg01, fp
0a468     04 5E 05 F1 | 	add	fp, #4
0a46c     AF 54 62 FC | 	wrlong	arg02, fp
0a470     04 5E 85 F1 | 	sub	fp, #4
0a474     AF 52 02 F6 | 	mov	arg01, fp
0a478     0C 5E 05 F1 | 	add	fp, #12
0a47c     AF 54 02 F6 | 	mov	arg02, fp
0a480     10 5E 85 F1 | 	sub	fp, #16
0a484     00 56 06 F6 | 	mov	arg03, #0
0a488     FC D5 BF FD | 	call	#_ff_cc_mount_volume_0326
0a48c     16 5D 02 F6 | 	mov	local01, result1
0a490     0C 5E 05 F1 | 	add	fp, #12
0a494     AF 5C 62 FC | 	wrlong	local01, fp
0a498     AF 5E 0A FB | 	rdlong	local02, fp wz
0a49c     0C 5E 85 F1 | 	sub	fp, #12
0a4a0     80 00 90 5D |  if_ne	jmp	#LR__0699
0a4a4     10 5E 05 F1 | 	add	fp, #16
0a4a8     AF 60 02 F6 | 	mov	local03, fp
0a4ac     0C 5E 85 F1 | 	sub	fp, #12
0a4b0     AF 54 02 FB | 	rdlong	arg02, fp
0a4b4     04 5E 85 F1 | 	sub	fp, #4
0a4b8     30 53 02 F6 | 	mov	arg01, local03
0a4bc     84 D0 BF FD | 	call	#_ff_cc_follow_path_0303
0a4c0     16 5D 02 F6 | 	mov	local01, result1
0a4c4     0C 5E 05 F1 | 	add	fp, #12
0a4c8     AF 5C 62 FC | 	wrlong	local01, fp
0a4cc     AF 5E 0A FB | 	rdlong	local02, fp wz
0a4d0     0C 5E 85 F1 | 	sub	fp, #12
0a4d4     4C 00 90 5D |  if_ne	jmp	#LR__0698
0a4d8     3B 5E 05 F1 | 	add	fp, #59
0a4dc     AF 5E C2 FA | 	rdbyte	local02, fp
0a4e0     3B 5E 85 F1 | 	sub	fp, #59
0a4e4     07 5E 46 F7 | 	zerox	local02, #7
0a4e8     80 5E CE F7 | 	test	local02, #128 wz
0a4ec     10 00 90 AD |  if_e	jmp	#LR__0695
0a4f0     0C 5E 05 F1 | 	add	fp, #12
0a4f4     AF 0C 68 FC | 	wrlong	#6, fp
0a4f8     0C 5E 85 F1 | 	sub	fp, #12
0a4fc     24 00 90 FD | 	jmp	#LR__0697
0a500                 | LR__0695
0a500     08 5E 05 F1 | 	add	fp, #8
0a504     AF 5E 0A FB | 	rdlong	local02, fp wz
0a508     08 5E 85 F1 | 	sub	fp, #8
0a50c     14 00 90 AD |  if_e	jmp	#LR__0696
0a510     08 5E 05 F1 | 	add	fp, #8
0a514     AF 54 02 FB | 	rdlong	arg02, fp
0a518     08 5E 85 F1 | 	sub	fp, #8
0a51c     30 53 02 F6 | 	mov	arg01, local03
0a520     60 CC BF FD | 	call	#_ff_cc_get_fileinfo_0291
0a524                 | LR__0696
0a524                 | LR__0697
0a524                 | LR__0698
0a524                 | LR__0699
0a524                 | ' 			}
0a524                 | ' 		}
0a524                 | ' 		;
0a524                 | ' 	}
0a524                 | ' 
0a524                 | ' 	return res ;
0a524     0C 5E 05 F1 | 	add	fp, #12
0a528     AF 2C 02 FB | 	rdlong	result1, fp
0a52c     0C 5E 85 F1 | 	sub	fp, #12
0a530     AF F0 03 F6 | 	mov	ptra, fp
0a534     BF 00 A0 FD | 	call	#popregs_
0a538                 | _ff_cc_f_stat_ret
0a538     2D 00 64 FD | 	ret
0a53c                 | 
0a53c                 | _ff_cc_f_unlink
0a53c     0B 5A 05 F6 | 	mov	COUNT_, #11
0a540     B0 00 A0 FD | 	call	#pushregs_
0a544     84 F0 07 F1 | 	add	ptra, #132
0a548     04 5E 05 F1 | 	add	fp, #4
0a54c     AF 52 62 FC | 	wrlong	arg01, fp
0a550     60 5E 05 F1 | 	add	fp, #96
0a554     AF 00 68 FC | 	wrlong	#0, fp
0a558     60 5E 85 F1 | 	sub	fp, #96
0a55c     AF 5C 02 F6 | 	mov	local01, fp
0a560     64 5E 05 F1 | 	add	fp, #100
0a564     AF 5E 02 F6 | 	mov	local02, fp
0a568     2E 53 02 F6 | 	mov	arg01, local01
0a56c     2F 55 02 F6 | 	mov	arg02, local02
0a570     02 56 06 F6 | 	mov	arg03, #2
0a574     68 5E 85 F1 | 	sub	fp, #104
0a578     0C D5 BF FD | 	call	#_ff_cc_mount_volume_0326
0a57c     16 61 02 F6 | 	mov	local03, result1
0a580     08 5E 05 F1 | 	add	fp, #8
0a584     AF 60 62 FC | 	wrlong	local03, fp
0a588     AF 62 0A FB | 	rdlong	local04, fp wz
0a58c     08 5E 85 F1 | 	sub	fp, #8
0a590     1C 02 90 5D |  if_ne	jmp	#LR__0709
0a594     68 5E 05 F1 | 	add	fp, #104
0a598     AF 62 02 FB | 	rdlong	local04, fp
0a59c     5C 5E 85 F1 | 	sub	fp, #92
0a5a0     AF 62 62 FC | 	wrlong	local04, fp
0a5a4     AF 64 02 F6 | 	mov	local05, fp
0a5a8     08 5E 85 F1 | 	sub	fp, #8
0a5ac     AF 54 02 FB | 	rdlong	arg02, fp
0a5b0     04 5E 85 F1 | 	sub	fp, #4
0a5b4     32 53 02 F6 | 	mov	arg01, local05
0a5b8     88 CF BF FD | 	call	#_ff_cc_follow_path_0303
0a5bc     16 61 02 F6 | 	mov	local03, result1
0a5c0     08 5E 05 F1 | 	add	fp, #8
0a5c4     AF 60 62 FC | 	wrlong	local03, fp
0a5c8     AF 62 0A FB | 	rdlong	local04, fp wz
0a5cc     08 5E 85 F1 | 	sub	fp, #8
0a5d0     DC 01 90 5D |  if_ne	jmp	#LR__0708
0a5d4     37 5E 05 F1 | 	add	fp, #55
0a5d8     AF 62 C2 FA | 	rdbyte	local04, fp
0a5dc     37 5E 85 F1 | 	sub	fp, #55
0a5e0     07 62 46 F7 | 	zerox	local04, #7
0a5e4     80 62 CE F7 | 	test	local04, #128 wz
0a5e8     10 00 90 AD |  if_e	jmp	#LR__0700
0a5ec     08 5E 05 F1 | 	add	fp, #8
0a5f0     AF 0C 68 FC | 	wrlong	#6, fp
0a5f4     08 5E 85 F1 | 	sub	fp, #8
0a5f8     20 00 90 FD | 	jmp	#LR__0701
0a5fc                 | LR__0700
0a5fc     12 5E 05 F1 | 	add	fp, #18
0a600     AF 62 C2 FA | 	rdbyte	local04, fp
0a604     12 5E 85 F1 | 	sub	fp, #18
0a608     07 62 46 F7 | 	zerox	local04, #7
0a60c     01 62 CE F7 | 	test	local04, #1 wz
0a610     08 5E 05 51 |  if_ne	add	fp, #8
0a614     AF 0E 68 5C |  if_ne	wrlong	#7, fp
0a618     08 5E 85 51 |  if_ne	sub	fp, #8
0a61c                 | LR__0701
0a61c     08 5E 05 F1 | 	add	fp, #8
0a620     AF 62 0A FB | 	rdlong	local04, fp wz
0a624     08 5E 85 F1 | 	sub	fp, #8
0a628     D0 00 90 5D |  if_ne	jmp	#LR__0704
0a62c     68 5E 05 F1 | 	add	fp, #104
0a630     AF 52 02 FB | 	rdlong	arg01, fp
0a634     40 5E 85 F1 | 	sub	fp, #64
0a638     AF 54 02 FB | 	rdlong	arg02, fp
0a63c     28 5E 85 F1 | 	sub	fp, #40
0a640     A8 C7 BF FD | 	call	#_ff_cc_ld_clust_0271
0a644     16 67 02 F6 | 	mov	local06, result1
0a648     64 5E 05 F1 | 	add	fp, #100
0a64c     AF 66 62 FC | 	wrlong	local06, fp
0a650     52 5E 85 F1 | 	sub	fp, #82
0a654     AF 62 C2 FA | 	rdbyte	local04, fp
0a658     12 5E 85 F1 | 	sub	fp, #18
0a65c     07 62 46 F7 | 	zerox	local04, #7
0a660     10 62 CE F7 | 	test	local04, #16 wz
0a664     94 00 90 AD |  if_e	jmp	#LR__0703
0a668     68 5E 05 F1 | 	add	fp, #104
0a66c     AF 62 02 FB | 	rdlong	local04, fp
0a670     30 5E 85 F1 | 	sub	fp, #48
0a674     AF 62 62 FC | 	wrlong	local04, fp
0a678     2C 5E 05 F1 | 	add	fp, #44
0a67c     AF 62 02 FB | 	rdlong	local04, fp
0a680     24 5E 85 F1 | 	sub	fp, #36
0a684     AF 62 62 FC | 	wrlong	local04, fp
0a688     08 5E 85 F1 | 	sub	fp, #8
0a68c     AF 68 02 F6 | 	mov	local07, fp
0a690     34 53 02 F6 | 	mov	arg01, local07
0a694     00 54 06 F6 | 	mov	arg02, #0
0a698     38 5E 85 F1 | 	sub	fp, #56
0a69c     24 C3 BF FD | 	call	#_ff_cc_dir_sdi_0261
0a6a0     16 6B 02 F6 | 	mov	local08, result1
0a6a4     08 5E 05 F1 | 	add	fp, #8
0a6a8     AF 6A 62 FC | 	wrlong	local08, fp
0a6ac     AF 62 0A FB | 	rdlong	local04, fp wz
0a6b0     08 5E 85 F1 | 	sub	fp, #8
0a6b4     44 00 90 5D |  if_ne	jmp	#LR__0702
0a6b8     34 53 02 F6 | 	mov	arg01, local07
0a6bc     00 54 06 F6 | 	mov	arg02, #0
0a6c0     D0 C7 BF FD | 	call	#_ff_cc_dir_read_0277
0a6c4     08 5E 05 F1 | 	add	fp, #8
0a6c8     AF 2C 62 FC | 	wrlong	result1, fp
0a6cc     AF 62 0A FB | 	rdlong	local04, fp wz
0a6d0     08 5E 85 F1 | 	sub	fp, #8
0a6d4     08 5E 05 A1 |  if_e	add	fp, #8
0a6d8     AF 0E 68 AC |  if_e	wrlong	#7, fp
0a6dc     08 5E 85 A1 |  if_e	sub	fp, #8
0a6e0     08 5E 05 F1 | 	add	fp, #8
0a6e4     AF 62 02 FB | 	rdlong	local04, fp
0a6e8     08 5E 85 F1 | 	sub	fp, #8
0a6ec     04 62 0E F2 | 	cmp	local04, #4 wz
0a6f0     08 5E 05 A1 |  if_e	add	fp, #8
0a6f4     AF 00 68 AC |  if_e	wrlong	#0, fp
0a6f8     08 5E 85 A1 |  if_e	sub	fp, #8
0a6fc                 | LR__0702
0a6fc                 | LR__0703
0a6fc                 | LR__0704
0a6fc     08 5E 05 F1 | 	add	fp, #8
0a700     AF 62 0A FB | 	rdlong	local04, fp wz
0a704     08 5E 85 F1 | 	sub	fp, #8
0a708     A4 00 90 5D |  if_ne	jmp	#LR__0707
0a70c     0C 5E 05 F1 | 	add	fp, #12
0a710     AF 6C 02 F6 | 	mov	local09, fp
0a714     36 53 02 F6 | 	mov	arg01, local09
0a718     0C 5E 85 F1 | 	sub	fp, #12
0a71c     14 CA BF FD | 	call	#_ff_cc_dir_remove_0287
0a720     08 5E 05 F1 | 	add	fp, #8
0a724     AF 2C 62 FC | 	wrlong	result1, fp
0a728     AF 62 0A FB | 	rdlong	local04, fp wz
0a72c     08 5E 85 F1 | 	sub	fp, #8
0a730     50 00 90 5D |  if_ne	jmp	#LR__0705
0a734     64 5E 05 F1 | 	add	fp, #100
0a738     AF 6A 0A FB | 	rdlong	local08, fp wz
0a73c     64 5E 85 F1 | 	sub	fp, #100
0a740     40 00 90 AD |  if_e	jmp	#LR__0705
0a744     0C 5E 05 F1 | 	add	fp, #12
0a748     AF 6E 02 F6 | 	mov	local10, fp
0a74c     37 63 02 F6 | 	mov	local04, local10
0a750     58 5E 05 F1 | 	add	fp, #88
0a754     AF 6A 02 FB | 	rdlong	local08, fp
0a758     64 5E 85 F1 | 	sub	fp, #100
0a75c     35 71 02 F6 | 	mov	local11, local08
0a760     00 60 06 F6 | 	mov	local03, #0
0a764     31 53 02 F6 | 	mov	arg01, local04
0a768     38 55 02 F6 | 	mov	arg02, local11
0a76c     00 56 06 F6 | 	mov	arg03, #0
0a770     FC BD BF FD | 	call	#_ff_cc_remove_chain_0246
0a774     16 67 02 F6 | 	mov	local06, result1
0a778     08 5E 05 F1 | 	add	fp, #8
0a77c     AF 66 62 FC | 	wrlong	local06, fp
0a780     08 5E 85 F1 | 	sub	fp, #8
0a784                 | LR__0705
0a784     08 5E 05 F1 | 	add	fp, #8
0a788     AF 62 0A FB | 	rdlong	local04, fp wz
0a78c     08 5E 85 F1 | 	sub	fp, #8
0a790     1C 00 90 5D |  if_ne	jmp	#LR__0706
0a794     68 5E 05 F1 | 	add	fp, #104
0a798     AF 52 02 FB | 	rdlong	arg01, fp
0a79c     68 5E 85 F1 | 	sub	fp, #104
0a7a0     50 B7 BF FD | 	call	#_ff_cc_sync_fs_0232
0a7a4     08 5E 05 F1 | 	add	fp, #8
0a7a8     AF 2C 62 FC | 	wrlong	result1, fp
0a7ac     08 5E 85 F1 | 	sub	fp, #8
0a7b0                 | LR__0706
0a7b0                 | LR__0707
0a7b0                 | LR__0708
0a7b0                 | LR__0709
0a7b0                 | ' 			}
0a7b0                 | ' 		}
0a7b0                 | ' 		;
0a7b0                 | ' 	}
0a7b0                 | ' 
0a7b0                 | ' 	return res ;
0a7b0     08 5E 05 F1 | 	add	fp, #8
0a7b4     AF 2C 02 FB | 	rdlong	result1, fp
0a7b8     08 5E 85 F1 | 	sub	fp, #8
0a7bc     AF F0 03 F6 | 	mov	ptra, fp
0a7c0     BF 00 A0 FD | 	call	#popregs_
0a7c4                 | _ff_cc_f_unlink_ret
0a7c4     2D 00 64 FD | 	ret
0a7c8                 | 
0a7c8                 | _ff_cc_f_mkdir
0a7c8     0A 5A 05 F6 | 	mov	COUNT_, #10
0a7cc     B0 00 A0 FD | 	call	#pushregs_
0a7d0     8C F0 07 F1 | 	add	ptra, #140
0a7d4     04 5E 05 F1 | 	add	fp, #4
0a7d8     AF 52 62 FC | 	wrlong	arg01, fp
0a7dc     AF 5C 02 F6 | 	mov	local01, fp
0a7e0     44 5E 05 F1 | 	add	fp, #68
0a7e4     AF 5E 02 F6 | 	mov	local02, fp
0a7e8     2E 53 02 F6 | 	mov	arg01, local01
0a7ec     2F 55 02 F6 | 	mov	arg02, local02
0a7f0     02 56 06 F6 | 	mov	arg03, #2
0a7f4     48 5E 85 F1 | 	sub	fp, #72
0a7f8     8C D2 BF FD | 	call	#_ff_cc_mount_volume_0326
0a7fc     16 61 02 F6 | 	mov	local03, result1
0a800     08 5E 05 F1 | 	add	fp, #8
0a804     AF 60 62 FC | 	wrlong	local03, fp
0a808     AF 62 0A FB | 	rdlong	local04, fp wz
0a80c     08 5E 85 F1 | 	sub	fp, #8
0a810     00 03 90 5D |  if_ne	jmp	#LR__0719
0a814     48 5E 05 F1 | 	add	fp, #72
0a818     AF 62 02 FB | 	rdlong	local04, fp
0a81c     3C 5E 85 F1 | 	sub	fp, #60
0a820     AF 62 62 FC | 	wrlong	local04, fp
0a824     AF 64 02 F6 | 	mov	local05, fp
0a828     08 5E 85 F1 | 	sub	fp, #8
0a82c     AF 54 02 FB | 	rdlong	arg02, fp
0a830     04 5E 85 F1 | 	sub	fp, #4
0a834     32 53 02 F6 | 	mov	arg01, local05
0a838     08 CD BF FD | 	call	#_ff_cc_follow_path_0303
0a83c     16 61 02 F6 | 	mov	local03, result1
0a840     08 5E 05 F1 | 	add	fp, #8
0a844     AF 60 62 FC | 	wrlong	local03, fp
0a848     30 67 02 F6 | 	mov	local06, local03
0a84c     08 5E 85 F1 | 	sub	fp, #8
0a850     33 63 0A F6 | 	mov	local04, local06 wz
0a854     08 5E 05 A1 |  if_e	add	fp, #8
0a858     AF 10 68 AC |  if_e	wrlong	#8, fp
0a85c     08 5E 85 A1 |  if_e	sub	fp, #8
0a860     08 5E 05 F1 | 	add	fp, #8
0a864     AF 62 02 FB | 	rdlong	local04, fp
0a868     08 5E 85 F1 | 	sub	fp, #8
0a86c     04 62 0E F2 | 	cmp	local04, #4 wz
0a870     A0 02 90 5D |  if_ne	jmp	#LR__0718
0a874     48 5E 05 F1 | 	add	fp, #72
0a878     AF 62 02 FB | 	rdlong	local04, fp
0a87c     10 5E 85 F1 | 	sub	fp, #16
0a880     AF 62 62 FC | 	wrlong	local04, fp
0a884     AF 68 02 F6 | 	mov	local07, fp
0a888     34 53 02 F6 | 	mov	arg01, local07
0a88c     00 54 06 F6 | 	mov	arg02, #0
0a890     38 5E 85 F1 | 	sub	fp, #56
0a894     F0 BD BF FD | 	call	#_ff_cc_create_chain_0252
0a898     16 6B 02 F6 | 	mov	local08, result1
0a89c     4C 5E 05 F1 | 	add	fp, #76
0a8a0     AF 6A 62 FC | 	wrlong	local08, fp
0a8a4     44 5E 85 F1 | 	sub	fp, #68
0a8a8     AF 00 68 FC | 	wrlong	#0, fp
0a8ac     44 5E 05 F1 | 	add	fp, #68
0a8b0     AF 62 0A FB | 	rdlong	local04, fp wz
0a8b4     4C 5E 85 F1 | 	sub	fp, #76
0a8b8     08 5E 05 A1 |  if_e	add	fp, #8
0a8bc     AF 0E 68 AC |  if_e	wrlong	#7, fp
0a8c0     08 5E 85 A1 |  if_e	sub	fp, #8
0a8c4     4C 5E 05 F1 | 	add	fp, #76
0a8c8     AF 62 02 FB | 	rdlong	local04, fp
0a8cc     4C 5E 85 F1 | 	sub	fp, #76
0a8d0     01 62 0E F2 | 	cmp	local04, #1 wz
0a8d4     08 5E 05 A1 |  if_e	add	fp, #8
0a8d8     AF 04 68 AC |  if_e	wrlong	#2, fp
0a8dc     08 5E 85 A1 |  if_e	sub	fp, #8
0a8e0     4C 5E 05 F1 | 	add	fp, #76
0a8e4     AF 62 02 FB | 	rdlong	local04, fp
0a8e8     4C 5E 85 F1 | 	sub	fp, #76
0a8ec     FF FF 7F FF 
0a8f0     FF 63 0E F2 | 	cmp	local04, ##-1 wz
0a8f4     08 5E 05 A1 |  if_e	add	fp, #8
0a8f8     AF 02 68 AC |  if_e	wrlong	#1, fp
0a8fc     08 5E 85 A1 |  if_e	sub	fp, #8
0a900     54 5E 05 F1 | 	add	fp, #84
0a904     80 10 A7 FF 
0a908     AF 00 68 FC | 	wrlong	##1310785536, fp
0a90c     4C 5E 85 F1 | 	sub	fp, #76
0a910     AF 62 0A FB | 	rdlong	local04, fp wz
0a914     08 5E 85 F1 | 	sub	fp, #8
0a918     40 01 90 5D |  if_ne	jmp	#LR__0715
0a91c     48 5E 05 F1 | 	add	fp, #72
0a920     AF 52 02 FB | 	rdlong	arg01, fp
0a924     04 5E 05 F1 | 	add	fp, #4
0a928     AF 60 02 FB | 	rdlong	local03, fp
0a92c     4C 5E 85 F1 | 	sub	fp, #76
0a930     30 6B 02 F6 | 	mov	local08, local03
0a934     35 55 02 F6 | 	mov	arg02, local08
0a938     B0 BF BF FD | 	call	#_ff_cc_dir_clear_0257
0a93c     16 6D 02 F6 | 	mov	local09, result1
0a940     08 5E 05 F1 | 	add	fp, #8
0a944     AF 6C 62 FC | 	wrlong	local09, fp
0a948     36 67 02 F6 | 	mov	local06, local09
0a94c     08 5E 85 F1 | 	sub	fp, #8
0a950     33 63 0A F6 | 	mov	local04, local06 wz
0a954     04 01 90 5D |  if_ne	jmp	#LR__0714
0a958     48 5E 05 F1 | 	add	fp, #72
0a95c     AF 52 02 FB | 	rdlong	arg01, fp
0a960     48 5E 85 F1 | 	sub	fp, #72
0a964     30 52 06 F1 | 	add	arg01, #48
0a968     20 54 06 F6 | 	mov	arg02, #32
0a96c     0B 56 06 F6 | 	mov	arg03, #11
0a970                 | ' {
0a970                 | ' 	BYTE *d = (BYTE*)dst;
0a970                 | ' 
0a970                 | ' 	do {
0a970     98 56 9F FE | 	loc	pa,	#(@LR__0712-@LR__0710)
0a974     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a978                 | LR__0710
0a978     0B 04 DC FC | 	rep	@LR__0713, #11
0a97c                 | LR__0711
0a97c     29 55 42 FC | 	wrbyte	arg02, arg01
0a980     01 52 06 F1 | 	add	arg01, #1
0a984                 | LR__0712
0a984                 | LR__0713
0a984     48 5E 05 F1 | 	add	fp, #72
0a988     AF 62 02 FB | 	rdlong	local04, fp
0a98c     30 62 06 F1 | 	add	local04, #48
0a990     31 5D 48 FC | 	wrbyte	#46, local04
0a994     AF 62 02 FB | 	rdlong	local04, fp
0a998     3B 62 06 F1 | 	add	local04, #59
0a99c     31 21 48 FC | 	wrbyte	#16, local04
0a9a0     AF 6E 02 FB | 	rdlong	local10, fp
0a9a4     30 6E 06 F1 | 	add	local10, #48
0a9a8     37 53 02 F6 | 	mov	arg01, local10
0a9ac     16 52 06 F1 | 	add	arg01, #22
0a9b0     0C 5E 05 F1 | 	add	fp, #12
0a9b4     AF 54 02 FB | 	rdlong	arg02, fp
0a9b8     54 5E 85 F1 | 	sub	fp, #84
0a9bc     24 B3 BF FD | 	call	#_ff_cc_st_dword_0214
0a9c0     48 5E 05 F1 | 	add	fp, #72
0a9c4     AF 52 02 FB | 	rdlong	arg01, fp
0a9c8     04 5E 05 F1 | 	add	fp, #4
0a9cc     AF 56 02 FB | 	rdlong	arg03, fp
0a9d0     4C 5E 85 F1 | 	sub	fp, #76
0a9d4     37 55 02 F6 | 	mov	arg02, local10
0a9d8     68 C4 BF FD | 	call	#_ff_cc_st_clust_0272
0a9dc     37 53 02 F6 | 	mov	arg01, local10
0a9e0     20 52 06 F1 | 	add	arg01, #32
0a9e4     37 55 02 F6 | 	mov	arg02, local10
0a9e8     20 56 06 F6 | 	mov	arg03, #32
0a9ec     20 B3 BF FD | 	call	#_ff_cc_mem_cpy_0217
0a9f0     48 5E 05 F1 | 	add	fp, #72
0a9f4     AF 62 02 FB | 	rdlong	local04, fp
0a9f8     51 62 06 F1 | 	add	local04, #81
0a9fc     31 5D 48 FC | 	wrbyte	#46, local04
0aa00     34 5E 85 F1 | 	sub	fp, #52
0aa04     AF 62 02 FB | 	rdlong	local04, fp
0aa08     3C 5E 05 F1 | 	add	fp, #60
0aa0c     AF 62 62 FC | 	wrlong	local04, fp
0aa10     08 5E 85 F1 | 	sub	fp, #8
0aa14     AF 54 02 FB | 	rdlong	arg02, fp
0aa18     50 54 06 F1 | 	add	arg02, #80
0aa1c     AF 52 02 FB | 	rdlong	arg01, fp
0aa20     08 5E 05 F1 | 	add	fp, #8
0aa24     AF 56 02 FB | 	rdlong	arg03, fp
0aa28     50 5E 85 F1 | 	sub	fp, #80
0aa2c     14 C4 BF FD | 	call	#_ff_cc_st_clust_0272
0aa30     48 5E 05 F1 | 	add	fp, #72
0aa34     AF 62 02 FB | 	rdlong	local04, fp
0aa38     03 62 06 F1 | 	add	local04, #3
0aa3c     31 03 48 FC | 	wrbyte	#1, local04
0aa40     3C 5E 85 F1 | 	sub	fp, #60
0aa44     AF 52 02 F6 | 	mov	arg01, fp
0aa48     0C 5E 85 F1 | 	sub	fp, #12
0aa4c     50 C6 BF FD | 	call	#_ff_cc_dir_register_0284
0aa50     08 5E 05 F1 | 	add	fp, #8
0aa54     AF 2C 62 FC | 	wrlong	result1, fp
0aa58     08 5E 85 F1 | 	sub	fp, #8
0aa5c                 | LR__0714
0aa5c                 | LR__0715
0aa5c     08 5E 05 F1 | 	add	fp, #8
0aa60     AF 62 0A FB | 	rdlong	local04, fp wz
0aa64     08 5E 85 F1 | 	sub	fp, #8
0aa68     8C 00 90 5D |  if_ne	jmp	#LR__0716
0aa6c     28 5E 05 F1 | 	add	fp, #40
0aa70     AF 52 02 FB | 	rdlong	arg01, fp
0aa74     16 52 06 F1 | 	add	arg01, #22
0aa78     2C 5E 05 F1 | 	add	fp, #44
0aa7c     AF 54 02 FB | 	rdlong	arg02, fp
0aa80     54 5E 85 F1 | 	sub	fp, #84
0aa84     5C B2 BF FD | 	call	#_ff_cc_st_dword_0214
0aa88     48 5E 05 F1 | 	add	fp, #72
0aa8c     AF 52 02 FB | 	rdlong	arg01, fp
0aa90     20 5E 85 F1 | 	sub	fp, #32
0aa94     AF 54 02 FB | 	rdlong	arg02, fp
0aa98     24 5E 05 F1 | 	add	fp, #36
0aa9c     AF 56 02 FB | 	rdlong	arg03, fp
0aaa0     4C 5E 85 F1 | 	sub	fp, #76
0aaa4     9C C3 BF FD | 	call	#_ff_cc_st_clust_0272
0aaa8     28 5E 05 F1 | 	add	fp, #40
0aaac     AF 62 02 FB | 	rdlong	local04, fp
0aab0     0B 62 06 F1 | 	add	local04, #11
0aab4     31 21 48 FC | 	wrbyte	#16, local04
0aab8     20 5E 05 F1 | 	add	fp, #32
0aabc     AF 62 02 FB | 	rdlong	local04, fp
0aac0     03 62 06 F1 | 	add	local04, #3
0aac4     31 03 48 FC | 	wrbyte	#1, local04
0aac8     40 5E 85 F1 | 	sub	fp, #64
0aacc     AF 62 0A FB | 	rdlong	local04, fp wz
0aad0     08 5E 85 F1 | 	sub	fp, #8
0aad4     3C 00 90 5D |  if_ne	jmp	#LR__0717
0aad8     48 5E 05 F1 | 	add	fp, #72
0aadc     AF 52 02 FB | 	rdlong	arg01, fp
0aae0     48 5E 85 F1 | 	sub	fp, #72
0aae4     0C B4 BF FD | 	call	#_ff_cc_sync_fs_0232
0aae8     08 5E 05 F1 | 	add	fp, #8
0aaec     AF 2C 62 FC | 	wrlong	result1, fp
0aaf0     08 5E 85 F1 | 	sub	fp, #8
0aaf4     1C 00 90 FD | 	jmp	#LR__0717
0aaf8                 | LR__0716
0aaf8     38 5E 05 F1 | 	add	fp, #56
0aafc     AF 52 02 F6 | 	mov	arg01, fp
0ab00     14 5E 05 F1 | 	add	fp, #20
0ab04     AF 54 02 FB | 	rdlong	arg02, fp
0ab08     4C 5E 85 F1 | 	sub	fp, #76
0ab0c     00 56 06 F6 | 	mov	arg03, #0
0ab10     5C BA BF FD | 	call	#_ff_cc_remove_chain_0246
0ab14                 | LR__0717
0ab14                 | LR__0718
0ab14                 | LR__0719
0ab14                 | ' 				remove_chain(&sobj, dcl, 0);
0ab14                 | ' 			}
0ab14                 | ' 		}
0ab14                 | ' 		;
0ab14                 | ' 	}
0ab14                 | ' 
0ab14                 | ' 	return res ;
0ab14     08 5E 05 F1 | 	add	fp, #8
0ab18     AF 2C 02 FB | 	rdlong	result1, fp
0ab1c     08 5E 85 F1 | 	sub	fp, #8
0ab20     AF F0 03 F6 | 	mov	ptra, fp
0ab24     BF 00 A0 FD | 	call	#popregs_
0ab28                 | _ff_cc_f_mkdir_ret
0ab28     2D 00 64 FD | 	ret
0ab2c                 | 
0ab2c                 | _ff_cc_f_rename
0ab2c     15 5A 05 F6 | 	mov	COUNT_, #21
0ab30     B0 00 A0 FD | 	call	#pushregs_
0ab34     C8 F0 07 F1 | 	add	ptra, #200
0ab38     04 5E 05 F1 | 	add	fp, #4
0ab3c     AF 52 62 FC | 	wrlong	arg01, fp
0ab40     04 5E 05 F1 | 	add	fp, #4
0ab44     AF 54 62 FC | 	wrlong	arg02, fp
0ab48     AF 5C 02 F6 | 	mov	local01, fp
0ab4c     2E 53 02 F6 | 	mov	arg01, local01
0ab50     08 5E 85 F1 | 	sub	fp, #8
0ab54     14 CC BF FD | 	call	#_ff_cc_get_ldnumber_0309
0ab58     04 5E 05 F1 | 	add	fp, #4
0ab5c     AF 5E 02 F6 | 	mov	local02, fp
0ab60     64 5E 05 F1 | 	add	fp, #100
0ab64     AF 60 02 F6 | 	mov	local03, fp
0ab68     2F 53 02 F6 | 	mov	arg01, local02
0ab6c     30 55 02 F6 | 	mov	arg02, local03
0ab70     02 56 06 F6 | 	mov	arg03, #2
0ab74     68 5E 85 F1 | 	sub	fp, #104
0ab78     0C CF BF FD | 	call	#_ff_cc_mount_volume_0326
0ab7c     16 63 02 F6 | 	mov	local04, result1
0ab80     0C 5E 05 F1 | 	add	fp, #12
0ab84     AF 62 62 FC | 	wrlong	local04, fp
0ab88     AF 64 0A FB | 	rdlong	local05, fp wz
0ab8c     0C 5E 85 F1 | 	sub	fp, #12
0ab90     B8 03 90 5D |  if_ne	jmp	#LR__0734
0ab94     68 5E 05 F1 | 	add	fp, #104
0ab98     AF 64 02 FB | 	rdlong	local05, fp
0ab9c     58 5E 85 F1 | 	sub	fp, #88
0aba0     AF 64 62 FC | 	wrlong	local05, fp
0aba4     AF 66 02 F6 | 	mov	local06, fp
0aba8     0C 5E 85 F1 | 	sub	fp, #12
0abac     AF 54 02 FB | 	rdlong	arg02, fp
0abb0     04 5E 85 F1 | 	sub	fp, #4
0abb4     33 53 02 F6 | 	mov	arg01, local06
0abb8     88 C9 BF FD | 	call	#_ff_cc_follow_path_0303
0abbc     0C 5E 05 F1 | 	add	fp, #12
0abc0     AF 2C 62 FC | 	wrlong	result1, fp
0abc4     AF 68 0A FB | 	rdlong	local07, fp wz
0abc8     0C 5E 85 F1 | 	sub	fp, #12
0abcc     2C 00 90 5D |  if_ne	jmp	#LR__0720
0abd0     3B 5E 05 F1 | 	add	fp, #59
0abd4     AF 62 C2 FA | 	rdbyte	local04, fp
0abd8     3B 5E 85 F1 | 	sub	fp, #59
0abdc     31 6B 02 F6 | 	mov	local08, local04
0abe0     07 6A 46 F7 | 	zerox	local08, #7
0abe4     A0 6A 0E F5 | 	and	local08, #160 wz
0abe8     10 00 90 AD |  if_e	jmp	#LR__0720
0abec     06 64 06 F6 | 	mov	local05, #6
0abf0     0C 5E 05 F1 | 	add	fp, #12
0abf4     AF 0C 68 FC | 	wrlong	#6, fp
0abf8     0C 5E 85 F1 | 	sub	fp, #12
0abfc                 | LR__0720
0abfc     0C 5E 05 F1 | 	add	fp, #12
0ac00     AF 64 0A FB | 	rdlong	local05, fp wz
0ac04     0C 5E 85 F1 | 	sub	fp, #12
0ac08     40 03 90 5D |  if_ne	jmp	#LR__0733
0ac0c     6C 5E 05 F1 | 	add	fp, #108
0ac10     AF 6C 02 F6 | 	mov	local09, fp
0ac14     40 5E 85 F1 | 	sub	fp, #64
0ac18     AF 54 02 FB | 	rdlong	arg02, fp
0ac1c     2C 5E 85 F1 | 	sub	fp, #44
0ac20     36 53 02 F6 | 	mov	arg01, local09
0ac24     20 56 06 F6 | 	mov	arg03, #32
0ac28     E4 B0 BF FD | 	call	#_ff_cc_mem_cpy_0217
0ac2c     3C 5E 05 F1 | 	add	fp, #60
0ac30     AF 6E 02 F6 | 	mov	local10, fp
0ac34     37 53 02 F6 | 	mov	arg01, local10
0ac38     33 55 02 F6 | 	mov	arg02, local06
0ac3c     2C 56 06 F6 | 	mov	arg03, #44
0ac40     3C 5E 85 F1 | 	sub	fp, #60
0ac44     C8 B0 BF FD | 	call	#_ff_cc_mem_cpy_0217
0ac48     08 5E 05 F1 | 	add	fp, #8
0ac4c     AF 54 02 FB | 	rdlong	arg02, fp
0ac50     08 5E 85 F1 | 	sub	fp, #8
0ac54     37 53 02 F6 | 	mov	arg01, local10
0ac58     E8 C8 BF FD | 	call	#_ff_cc_follow_path_0303
0ac5c     0C 5E 05 F1 | 	add	fp, #12
0ac60     AF 2C 62 FC | 	wrlong	result1, fp
0ac64     AF 64 0A FB | 	rdlong	local05, fp wz
0ac68     0C 5E 85 F1 | 	sub	fp, #12
0ac6c     4C 00 90 5D |  if_ne	jmp	#LR__0723
0ac70     44 5E 05 F1 | 	add	fp, #68
0ac74     AF 68 02 FB | 	rdlong	local07, fp
0ac78     2C 5E 85 F1 | 	sub	fp, #44
0ac7c     AF 62 02 FB | 	rdlong	local04, fp
0ac80     18 5E 85 F1 | 	sub	fp, #24
0ac84     31 69 0A F2 | 	cmp	local07, local04 wz
0ac88     20 00 90 5D |  if_ne	jmp	#LR__0721
0ac8c     4C 5E 05 F1 | 	add	fp, #76
0ac90     AF 70 02 FB | 	rdlong	local11, fp
0ac94     2C 5E 85 F1 | 	sub	fp, #44
0ac98     AF 72 02 FB | 	rdlong	local12, fp
0ac9c     20 5E 85 F1 | 	sub	fp, #32
0aca0     39 71 0A F2 | 	cmp	local11, local12 wz
0aca4     04 64 06 A6 |  if_e	mov	local05, #4
0aca8     04 00 90 AD |  if_e	jmp	#LR__0722
0acac                 | LR__0721
0acac     08 64 06 F6 | 	mov	local05, #8
0acb0                 | LR__0722
0acb0     0C 5E 05 F1 | 	add	fp, #12
0acb4     AF 64 62 FC | 	wrlong	local05, fp
0acb8     0C 5E 85 F1 | 	sub	fp, #12
0acbc                 | LR__0723
0acbc     0C 5E 05 F1 | 	add	fp, #12
0acc0     AF 64 02 FB | 	rdlong	local05, fp
0acc4     0C 5E 85 F1 | 	sub	fp, #12
0acc8     04 64 0E F2 | 	cmp	local05, #4 wz
0accc     2C 02 90 5D |  if_ne	jmp	#LR__0730
0acd0     37 53 02 F6 | 	mov	arg01, local10
0acd4     C8 C3 BF FD | 	call	#_ff_cc_dir_register_0284
0acd8     0C 5E 05 F1 | 	add	fp, #12
0acdc     AF 2C 62 FC | 	wrlong	result1, fp
0ace0     AF 64 0A FB | 	rdlong	local05, fp wz
0ace4     0C 5E 85 F1 | 	sub	fp, #12
0ace8     10 02 90 5D |  if_ne	jmp	#LR__0729
0acec     58 5E 05 F1 | 	add	fp, #88
0acf0     AF 74 02 FB | 	rdlong	local13, fp
0acf4     34 5E 05 F1 | 	add	fp, #52
0acf8     AF 74 62 FC | 	wrlong	local13, fp
0acfc     8C 5E 85 F1 | 	sub	fp, #140
0ad00     0D 74 06 F1 | 	add	local13, #13
0ad04     36 77 02 F6 | 	mov	local14, local09
0ad08     0D 76 06 F1 | 	add	local14, #13
0ad0c     3A 53 02 F6 | 	mov	arg01, local13
0ad10     3B 55 02 F6 | 	mov	arg02, local14
0ad14     13 56 06 F6 | 	mov	arg03, #19
0ad18     F4 AF BF FD | 	call	#_ff_cc_mem_cpy_0217
0ad1c     8C 5E 05 F1 | 	add	fp, #140
0ad20     AF 64 02 FB | 	rdlong	local05, fp
0ad24     15 5E 85 F1 | 	sub	fp, #21
0ad28     AF 6A C2 FA | 	rdbyte	local08, fp
0ad2c     0B 64 06 F1 | 	add	local05, #11
0ad30     32 6B 42 FC | 	wrbyte	local08, local05
0ad34     15 5E 05 F1 | 	add	fp, #21
0ad38     AF 68 02 FB | 	rdlong	local07, fp
0ad3c     8C 5E 85 F1 | 	sub	fp, #140
0ad40     0B 68 06 F1 | 	add	local07, #11
0ad44     34 65 C2 FA | 	rdbyte	local05, local07
0ad48     10 64 CE F7 | 	test	local05, #16 wz
0ad4c     28 00 90 5D |  if_ne	jmp	#LR__0724
0ad50     8C 5E 05 F1 | 	add	fp, #140
0ad54     AF 64 02 FB | 	rdlong	local05, fp
0ad58     0B 64 06 F1 | 	add	local05, #11
0ad5c     32 79 C2 FA | 	rdbyte	local15, local05
0ad60     3C 7B 02 F6 | 	mov	local16, local15
0ad64     20 7A 46 F5 | 	or	local16, #32
0ad68     AF 64 02 FB | 	rdlong	local05, fp
0ad6c     8C 5E 85 F1 | 	sub	fp, #140
0ad70     0B 64 06 F1 | 	add	local05, #11
0ad74     32 7B 42 FC | 	wrbyte	local16, local05
0ad78                 | LR__0724
0ad78     68 5E 05 F1 | 	add	fp, #104
0ad7c     AF 64 02 FB | 	rdlong	local05, fp
0ad80     03 64 06 F1 | 	add	local05, #3
0ad84     32 03 48 FC | 	wrbyte	#1, local05
0ad88     24 5E 05 F1 | 	add	fp, #36
0ad8c     AF 68 02 FB | 	rdlong	local07, fp
0ad90     8C 5E 85 F1 | 	sub	fp, #140
0ad94     0B 68 06 F1 | 	add	local07, #11
0ad98     34 65 C2 FA | 	rdbyte	local05, local07
0ad9c     10 64 CE F7 | 	test	local05, #16 wz
0ada0     58 01 90 AD |  if_e	jmp	#LR__0728
0ada4     18 5E 05 F1 | 	add	fp, #24
0ada8     AF 7C 02 FB | 	rdlong	local17, fp
0adac     2C 5E 05 F1 | 	add	fp, #44
0adb0     AF 7E 02 FB | 	rdlong	local18, fp
0adb4     44 5E 85 F1 | 	sub	fp, #68
0adb8     3F 7D 0A F2 | 	cmp	local17, local18 wz
0adbc     3C 01 90 AD |  if_e	jmp	#LR__0728
0adc0     68 5E 05 F1 | 	add	fp, #104
0adc4     AF 64 02 FB | 	rdlong	local05, fp
0adc8     32 63 02 F6 | 	mov	local04, local05
0adcc     31 6B 02 F6 | 	mov	local08, local04
0add0     24 5E 05 F1 | 	add	fp, #36
0add4     AF 70 02 FB | 	rdlong	local11, fp
0add8     8C 5E 85 F1 | 	sub	fp, #140
0addc     38 7D 02 F6 | 	mov	local17, local11
0ade0     35 53 02 F6 | 	mov	arg01, local08
0ade4     3E 55 02 F6 | 	mov	arg02, local17
0ade8     00 C0 BF FD | 	call	#_ff_cc_ld_clust_0271
0adec     16 7F 02 F6 | 	mov	local18, result1
0adf0     32 53 02 F6 | 	mov	arg01, local05
0adf4     3F 55 02 F6 | 	mov	arg02, local18
0adf8     6C B2 BF FD | 	call	#_ff_cc_clst2sect_0233
0adfc     16 81 02 F6 | 	mov	local19, result1
0ae00     90 5E 05 F1 | 	add	fp, #144
0ae04     AF 80 62 FC | 	wrlong	local19, fp
0ae08     AF 68 0A FB | 	rdlong	local07, fp wz
0ae0c     90 5E 85 F1 | 	sub	fp, #144
0ae10     14 00 90 5D |  if_ne	jmp	#LR__0725
0ae14     02 64 06 F6 | 	mov	local05, #2
0ae18     0C 5E 05 F1 | 	add	fp, #12
0ae1c     AF 04 68 FC | 	wrlong	#2, fp
0ae20     0C 5E 85 F1 | 	sub	fp, #12
0ae24     D4 00 90 FD | 	jmp	#LR__0727
0ae28                 | LR__0725
0ae28     68 5E 05 F1 | 	add	fp, #104
0ae2c     AF 52 02 FB | 	rdlong	arg01, fp
0ae30     28 5E 05 F1 | 	add	fp, #40
0ae34     AF 62 02 FB | 	rdlong	local04, fp
0ae38     90 5E 85 F1 | 	sub	fp, #144
0ae3c     31 55 02 F6 | 	mov	arg02, local04
0ae40     34 B0 BF FD | 	call	#_ff_cc_move_window_0230
0ae44     16 7D 02 F6 | 	mov	local17, result1
0ae48     0C 5E 05 F1 | 	add	fp, #12
0ae4c     AF 7C 62 FC | 	wrlong	local17, fp
0ae50     5C 5E 05 F1 | 	add	fp, #92
0ae54     AF 6A 02 FB | 	rdlong	local08, fp
0ae58     30 6A 06 F1 | 	add	local08, #48
0ae5c     35 83 02 F6 | 	mov	local20, local08
0ae60     41 85 02 F6 | 	mov	local21, local20
0ae64     20 84 06 F1 | 	add	local21, #32
0ae68     24 5E 05 F1 | 	add	fp, #36
0ae6c     AF 84 62 FC | 	wrlong	local21, fp
0ae70     80 5E 85 F1 | 	sub	fp, #128
0ae74     AF 68 02 FB | 	rdlong	local07, fp
0ae78     0C 5E 85 F1 | 	sub	fp, #12
0ae7c     34 65 0A F6 | 	mov	local05, local07 wz
0ae80     78 00 90 5D |  if_ne	jmp	#LR__0726
0ae84     8C 5E 05 F1 | 	add	fp, #140
0ae88     AF 7C 02 FB | 	rdlong	local17, fp
0ae8c     8C 5E 85 F1 | 	sub	fp, #140
0ae90     3E 63 02 F6 | 	mov	local04, local17
0ae94     01 62 06 F1 | 	add	local04, #1
0ae98     31 71 C2 FA | 	rdbyte	local11, local04
0ae9c     01 62 86 F1 | 	sub	local04, #1
0aea0     38 6B 02 F6 | 	mov	local08, local11
0aea4     07 6A 46 F7 | 	zerox	local08, #7
0aea8     2E 6A 0E F2 | 	cmp	local08, #46 wz
0aeac     4C 00 90 5D |  if_ne	jmp	#LR__0726
0aeb0     68 5E 05 F1 | 	add	fp, #104
0aeb4     AF 52 02 FB | 	rdlong	arg01, fp
0aeb8     24 5E 05 F1 | 	add	fp, #36
0aebc     AF 62 02 FB | 	rdlong	local04, fp
0aec0     48 5E 85 F1 | 	sub	fp, #72
0aec4     AF 70 02 FB | 	rdlong	local11, fp
0aec8     44 5E 85 F1 | 	sub	fp, #68
0aecc     38 7D 02 F6 | 	mov	local17, local11
0aed0     31 55 02 F6 | 	mov	arg02, local04
0aed4     3E 57 02 F6 | 	mov	arg03, local17
0aed8     68 BF BF FD | 	call	#_ff_cc_st_clust_0272
0aedc     68 5E 05 F1 | 	add	fp, #104
0aee0     AF 68 02 FB | 	rdlong	local07, fp
0aee4     68 5E 85 F1 | 	sub	fp, #104
0aee8     34 65 02 F6 | 	mov	local05, local07
0aeec     01 6A 06 F6 | 	mov	local08, #1
0aef0     03 64 06 F1 | 	add	local05, #3
0aef4     32 03 48 FC | 	wrbyte	#1, local05
0aef8     03 64 86 F1 | 	sub	local05, #3
0aefc                 | LR__0726
0aefc                 | LR__0727
0aefc                 | LR__0728
0aefc                 | LR__0729
0aefc                 | LR__0730
0aefc     0C 5E 05 F1 | 	add	fp, #12
0af00     AF 64 0A FB | 	rdlong	local05, fp wz
0af04     0C 5E 85 F1 | 	sub	fp, #12
0af08     40 00 90 5D |  if_ne	jmp	#LR__0732
0af0c     10 5E 05 F1 | 	add	fp, #16
0af10     AF 52 02 F6 | 	mov	arg01, fp
0af14     10 5E 85 F1 | 	sub	fp, #16
0af18     18 C2 BF FD | 	call	#_ff_cc_dir_remove_0287
0af1c     0C 5E 05 F1 | 	add	fp, #12
0af20     AF 2C 62 FC | 	wrlong	result1, fp
0af24     AF 64 0A FB | 	rdlong	local05, fp wz
0af28     0C 5E 85 F1 | 	sub	fp, #12
0af2c     1C 00 90 5D |  if_ne	jmp	#LR__0731
0af30     68 5E 05 F1 | 	add	fp, #104
0af34     AF 52 02 FB | 	rdlong	arg01, fp
0af38     68 5E 85 F1 | 	sub	fp, #104
0af3c     B4 AF BF FD | 	call	#_ff_cc_sync_fs_0232
0af40     0C 5E 05 F1 | 	add	fp, #12
0af44     AF 2C 62 FC | 	wrlong	result1, fp
0af48     0C 5E 85 F1 | 	sub	fp, #12
0af4c                 | LR__0731
0af4c                 | LR__0732
0af4c                 | LR__0733
0af4c                 | LR__0734
0af4c                 | ' 					res = sync_fs(fs);
0af4c                 | ' 				}
0af4c                 | ' 			}
0af4c                 | ' 
0af4c                 | ' 		}
0af4c                 | ' 		;
0af4c                 | ' 	}
0af4c                 | ' 
0af4c                 | ' 	return res ;
0af4c     0C 5E 05 F1 | 	add	fp, #12
0af50     AF 2C 02 FB | 	rdlong	result1, fp
0af54     0C 5E 85 F1 | 	sub	fp, #12
0af58     AF F0 03 F6 | 	mov	ptra, fp
0af5c     BF 00 A0 FD | 	call	#popregs_
0af60                 | _ff_cc_f_rename_ret
0af60     2D 00 64 FD | 	ret
0af64                 | 
0af64                 | _ff_cc_stat
0af64     09 5A 05 F6 | 	mov	COUNT_, #9
0af68     B0 00 A0 FD | 	call	#pushregs_
0af6c     29 5D 02 F6 | 	mov	local01, arg01
0af70     2A 5F 02 F6 | 	mov	local02, arg02
0af74     38 1D 06 F1 | 	add	ptr___system__dat__, #312
0af78     0E 2D 02 F6 | 	mov	result1, ptr___system__dat__
0af7c     38 1D 86 F1 | 	sub	ptr___system__dat__, #312
0af80     16 61 02 F6 | 	mov	local03, result1
0af84     30 53 02 F6 | 	mov	arg01, local03
0af88     2E 55 02 F6 | 	mov	arg02, local01
0af8c     00 56 06 F6 | 	mov	arg03, #0
0af90     84 79 BF FD | 	call	#__system____getvfsforfile
0af94     16 63 0A F6 | 	mov	local04, result1 wz
0af98     14 00 90 AD |  if_e	jmp	#LR__0735
0af9c     2C 62 06 F1 | 	add	local04, #44
0afa0     31 65 02 FB | 	rdlong	local05, local04
0afa4     2C 62 86 F1 | 	sub	local04, #44
0afa8     32 67 0A F6 | 	mov	local06, local05 wz
0afac     1C 00 90 5D |  if_ne	jmp	#LR__0736
0afb0                 | LR__0735
0afb0                 | ' #line 19 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0afb0                 | '         return _seterror( 16 );
0afb0     01 00 00 FF 
0afb4     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0afb8     0E 21 68 FC | 	wrlong	#16, ptr___system__dat__
0afbc     01 00 00 FF 
0afc0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0afc4     01 2C 66 F6 | 	neg	result1, #1
0afc8     44 00 90 FD | 	jmp	#LR__0737
0afcc                 | LR__0736
0afcc     2F 53 02 F6 | 	mov	arg01, local02
0afd0     00 54 06 F6 | 	mov	arg02, #0
0afd4     30 56 06 F6 | 	mov	arg03, #48
0afd8     29 69 02 F6 | 	mov	local07, arg01
0afdc     A0 00 A0 FD | 	call	#\builtin_bytefill_
0afe0     34 2D 02 F6 | 	mov	result1, local07
0afe4     2C 62 06 F1 | 	add	local04, #44
0afe8     31 67 02 FB | 	rdlong	local06, local04
0afec     33 65 02 FB | 	rdlong	local05, local06
0aff0     04 66 06 F1 | 	add	local06, #4
0aff4     33 6B 02 FB | 	rdlong	local08, local06
0aff8     30 53 02 F6 | 	mov	arg01, local03
0affc     2F 55 02 F6 | 	mov	arg02, local02
0b000     06 6D 02 F6 | 	mov	local09, objptr
0b004     32 0D 02 F6 | 	mov	objptr, local05
0b008     2D 6A 62 FD | 	call	local08
0b00c     36 0D 02 F6 | 	mov	objptr, local09
0b010                 | ' #line 29 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0b010                 | '     r = v->stat(name, buf);
0b010                 | ' #line 33 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0b010                 | '     return r;
0b010                 | LR__0737
0b010     AF F0 03 F6 | 	mov	ptra, fp
0b014     BF 00 A0 FD | 	call	#popregs_
0b018                 | _ff_cc_stat_ret
0b018     2D 00 64 FD | 	ret
0b01c                 | 
0b01c                 | _ff_cc__set_dos_error_0455
0b01c     03 5A 05 F6 | 	mov	COUNT_, #3
0b020     B0 00 A0 FD | 	call	#pushregs_
0b024     29 5D 02 F6 | 	mov	local01, arg01
0b028                 | ' #line 6871 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b028                 | '     switch (derr) {
0b028     2E 5F 02 F6 | 	mov	local02, local01
0b02c     14 5E 26 F3 | 	fle	local02, #20
0b030     30 5E 62 FD | 	jmprel	local02
0b034                 | LR__0738
0b034     50 00 90 FD | 	jmp	#LR__0739
0b038     84 00 90 FD | 	jmp	#LR__0753
0b03c     80 00 90 FD | 	jmp	#LR__0754
0b040     7C 00 90 FD | 	jmp	#LR__0755
0b044     48 00 90 FD | 	jmp	#LR__0740
0b048     44 00 90 FD | 	jmp	#LR__0741
0b04c     40 00 90 FD | 	jmp	#LR__0742
0b050     44 00 90 FD | 	jmp	#LR__0743
0b054     48 00 90 FD | 	jmp	#LR__0745
0b058     54 00 90 FD | 	jmp	#LR__0748
0b05c     38 00 90 FD | 	jmp	#LR__0744
0b060     4C 00 90 FD | 	jmp	#LR__0749
0b064     48 00 90 FD | 	jmp	#LR__0750
0b068     44 00 90 FD | 	jmp	#LR__0751
0b06c     50 00 90 FD | 	jmp	#LR__0756
0b070     4C 00 90 FD | 	jmp	#LR__0756
0b074     48 00 90 FD | 	jmp	#LR__0756
0b078     2C 00 90 FD | 	jmp	#LR__0746
0b07c     38 00 90 FD | 	jmp	#LR__0752
0b080     2C 00 90 FD | 	jmp	#LR__0747
0b084     38 00 90 FD | 	jmp	#LR__0756
0b088                 | LR__0739
0b088     00 60 06 F6 | 	mov	local03, #0
0b08c                 | '         r = 0;
0b08c                 | '         break;
0b08c     34 00 90 FD | 	jmp	#LR__0757
0b090                 | LR__0740
0b090                 | LR__0741
0b090                 | LR__0742
0b090     04 60 06 F6 | 	mov	local03, #4
0b094                 | '         r =  4 ;
0b094                 | '         break;
0b094     2C 00 90 FD | 	jmp	#LR__0757
0b098                 | LR__0743
0b098                 | LR__0744
0b098     06 60 06 F6 | 	mov	local03, #6
0b09c                 | '         r =  6 ;
0b09c                 | '         break;
0b09c     24 00 90 FD | 	jmp	#LR__0757
0b0a0                 | LR__0745
0b0a0     09 60 06 F6 | 	mov	local03, #9
0b0a4                 | '         r =  9 ;
0b0a4                 | '         break;
0b0a4     1C 00 90 FD | 	jmp	#LR__0757
0b0a8                 | LR__0746
0b0a8     07 60 06 F6 | 	mov	local03, #7
0b0ac                 | '         r =  7 ;
0b0ac                 | '         break;
0b0ac     14 00 90 FD | 	jmp	#LR__0757
0b0b0                 | LR__0747
0b0b0                 | LR__0748
0b0b0                 | LR__0749
0b0b0                 | LR__0750
0b0b0                 | LR__0751
0b0b0     0A 60 06 F6 | 	mov	local03, #10
0b0b4                 | '         r =  10 ;
0b0b4                 | '         break;
0b0b4     0C 00 90 FD | 	jmp	#LR__0757
0b0b8                 | LR__0752
0b0b8     0B 60 06 F6 | 	mov	local03, #11
0b0bc                 | '         r =  11 ;
0b0bc                 | '         break;
0b0bc     04 00 90 FD | 	jmp	#LR__0757
0b0c0                 | LR__0753
0b0c0                 | LR__0754
0b0c0                 | LR__0755
0b0c0                 | LR__0756
0b0c0     0C 60 06 F6 | 	mov	local03, #12
0b0c4                 | '         r =  12 ;
0b0c4                 | '         break;
0b0c4                 | LR__0757
0b0c4                 | '     }
0b0c4                 | '     return _seterror(r);
0b0c4     01 00 00 FF 
0b0c8     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b0cc     0E 61 62 FC | 	wrlong	local03, ptr___system__dat__
0b0d0     01 00 00 FF 
0b0d4     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b0d8     00 60 0E F2 | 	cmp	local03, #0 wz
0b0dc     01 2C 66 56 |  if_ne	neg	result1, #1
0b0e0     00 2C 06 A6 |  if_e	mov	result1, #0
0b0e4     AF F0 03 F6 | 	mov	ptra, fp
0b0e8     BF 00 A0 FD | 	call	#popregs_
0b0ec                 | _ff_cc__set_dos_error_0455_ret
0b0ec     2D 00 64 FD | 	ret
0b0f0                 | 
0b0f0                 | _ff_cc_v_creat_0459
0b0f0     04 5A 05 F6 | 	mov	COUNT_, #4
0b0f4     B0 00 A0 FD | 	call	#pushregs_
0b0f8     29 5D 02 F6 | 	mov	local01, arg01
0b0fc     2A 5F 02 F6 | 	mov	local02, arg02
0b100     02 00 00 FF 
0b104     34 52 06 F6 | 	mov	arg01, ##1076
0b108                 | '     return _gc_alloc(size);
0b108     10 54 06 F6 | 	mov	arg02, #16
0b10c     DC 85 BF FD | 	call	#__system___gc_doalloc
0b110     16 61 0A F6 | 	mov	local03, result1 wz
0b114     1C 00 90 5D |  if_ne	jmp	#LR__0758
0b118                 | '       return _seterror( 7 );
0b118     01 00 00 FF 
0b11c     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b120     0E 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0b124     01 00 00 FF 
0b128     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b12c     01 2C 66 F6 | 	neg	result1, #1
0b130     58 00 90 FD | 	jmp	#LR__0760
0b134                 | LR__0758
0b134     30 53 02 F6 | 	mov	arg01, local03
0b138     00 54 06 F6 | 	mov	arg02, #0
0b13c     02 00 00 FF 
0b140     34 56 06 F6 | 	mov	arg03, ##1076
0b144     70 10 B0 FD | 	call	#_ff_cc_memset
0b148     02 00 00 FF 
0b14c     0C 60 06 F1 | 	add	local03, ##1036
0b150     30 53 02 F6 | 	mov	arg01, local03
0b154     02 00 00 FF 
0b158     0C 60 86 F1 | 	sub	local03, ##1036
0b15c     2F 55 02 F6 | 	mov	arg02, local02
0b160     07 56 06 F6 | 	mov	arg03, #7
0b164     68 D1 BF FD | 	call	#_ff_cc_f_open
0b168     16 63 0A F6 | 	mov	local04, result1 wz
0b16c     14 00 90 AD |  if_e	jmp	#LR__0759
0b170     30 53 02 F6 | 	mov	arg01, local03
0b174                 | '     return _gc_free(ptr);
0b174     A8 86 BF FD | 	call	#__system___gc_free
0b178                 | '     free(f);
0b178                 | '     return _set_dos_error(r);
0b178     31 53 02 F6 | 	mov	arg01, local04
0b17c     9C FE BF FD | 	call	#_ff_cc__set_dos_error_0455
0b180     08 00 90 FD | 	jmp	#LR__0760
0b184                 | LR__0759
0b184     2E 61 62 FC | 	wrlong	local03, local01
0b188                 | '   }
0b188                 | '   fil->vfsdata = f;
0b188                 | '   return 0;
0b188     00 2C 06 F6 | 	mov	result1, #0
0b18c                 | LR__0760
0b18c     AF F0 03 F6 | 	mov	ptra, fp
0b190     BF 00 A0 FD | 	call	#popregs_
0b194                 | _ff_cc_v_creat_0459_ret
0b194     2D 00 64 FD | 	ret
0b198                 | 
0b198                 | _ff_cc_v_close_0462
0b198     02 5A 05 F6 | 	mov	COUNT_, #2
0b19c     B0 00 A0 FD | 	call	#pushregs_
0b1a0     29 5D 02 FB | 	rdlong	local01, arg01
0b1a4     02 00 00 FF 
0b1a8     0C 5C 06 F1 | 	add	local01, ##1036
0b1ac     2E 53 02 F6 | 	mov	arg01, local01
0b1b0     02 00 00 FF 
0b1b4     0C 5C 86 F1 | 	sub	local01, ##1036
0b1b8     94 E8 BF FD | 	call	#_ff_cc_f_close
0b1bc     16 5F 02 F6 | 	mov	local02, result1
0b1c0     2E 53 02 F6 | 	mov	arg01, local01
0b1c4                 | '     return _gc_free(ptr);
0b1c4     58 86 BF FD | 	call	#__system___gc_free
0b1c8                 | '     FAT_FIL *f = fil->vfsdata;
0b1c8                 | '     r=f_close(&f->fil);
0b1c8                 | '     free(f);
0b1c8                 | '     return _set_dos_error(r);
0b1c8     2F 53 02 F6 | 	mov	arg01, local02
0b1cc     4C FE BF FD | 	call	#_ff_cc__set_dos_error_0455
0b1d0     AF F0 03 F6 | 	mov	ptra, fp
0b1d4     BF 00 A0 FD | 	call	#popregs_
0b1d8                 | _ff_cc_v_close_0462_ret
0b1d8     2D 00 64 FD | 	ret
0b1dc                 | 
0b1dc                 | _ff_cc_v_opendir_0465
0b1dc     04 5A 05 F6 | 	mov	COUNT_, #4
0b1e0     B0 00 A0 FD | 	call	#pushregs_
0b1e4     29 5D 02 F6 | 	mov	local01, arg01
0b1e8     2A 5F 02 F6 | 	mov	local02, arg02
0b1ec     2C 52 06 F6 | 	mov	arg01, #44
0b1f0                 | '     return _gc_alloc(size);
0b1f0     10 54 06 F6 | 	mov	arg02, #16
0b1f4     F4 84 BF FD | 	call	#__system___gc_doalloc
0b1f8     16 61 0A F6 | 	mov	local03, result1 wz
0b1fc     1C 00 90 5D |  if_ne	jmp	#LR__0761
0b200                 | ' #line 6955 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b200                 | '       return _seterror( 7 );
0b200     01 00 00 FF 
0b204     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b208     0E 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0b20c     01 00 00 FF 
0b210     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b214     01 2C 66 F6 | 	neg	result1, #1
0b218     34 00 90 FD | 	jmp	#LR__0763
0b21c                 | LR__0761
0b21c     30 53 02 F6 | 	mov	arg01, local03
0b220     2F 55 02 F6 | 	mov	arg02, local02
0b224     F4 EE BF FD | 	call	#_ff_cc_f_opendir
0b228     16 63 0A F6 | 	mov	local04, result1 wz
0b22c     14 00 90 AD |  if_e	jmp	#LR__0762
0b230     30 53 02 F6 | 	mov	arg01, local03
0b234                 | '     return _gc_free(ptr);
0b234     E8 85 BF FD | 	call	#__system___gc_free
0b238                 | '         free(f);
0b238                 | '         return _set_dos_error(r);
0b238     31 53 02 F6 | 	mov	arg01, local04
0b23c     DC FD BF FD | 	call	#_ff_cc__set_dos_error_0455
0b240     0C 00 90 FD | 	jmp	#LR__0763
0b244                 | LR__0762
0b244     04 5C 06 F1 | 	add	local01, #4
0b248     2E 61 62 FC | 	wrlong	local03, local01
0b24c                 | '     }
0b24c                 | '     dir->vfsdata = f;
0b24c                 | '     return 0;
0b24c     00 2C 06 F6 | 	mov	result1, #0
0b250                 | LR__0763
0b250     AF F0 03 F6 | 	mov	ptra, fp
0b254     BF 00 A0 FD | 	call	#popregs_
0b258                 | _ff_cc_v_opendir_0465_ret
0b258     2D 00 64 FD | 	ret
0b25c                 | 
0b25c                 | _ff_cc_v_closedir_0468
0b25c     02 5A 05 F6 | 	mov	COUNT_, #2
0b260     B0 00 A0 FD | 	call	#pushregs_
0b264     04 52 06 F1 | 	add	arg01, #4
0b268     29 5D 02 FB | 	rdlong	local01, arg01
0b26c     2E 53 02 F6 | 	mov	arg01, local01
0b270     64 F0 BF FD | 	call	#_ff_cc_f_closedir
0b274     16 5F 02 F6 | 	mov	local02, result1
0b278     2E 53 02 F6 | 	mov	arg01, local01
0b27c                 | '     return _gc_free(ptr);
0b27c     A0 85 BF FD | 	call	#__system___gc_free
0b280     00 5E 0E F2 | 	cmp	local02, #0 wz
0b284     08 00 90 AD |  if_e	jmp	#LR__0764
0b288     2F 53 02 F6 | 	mov	arg01, local02
0b28c     8C FD BF FD | 	call	#_ff_cc__set_dos_error_0455
0b290                 | LR__0764
0b290                 | '     return r;
0b290     2F 2D 02 F6 | 	mov	result1, local02
0b294     AF F0 03 F6 | 	mov	ptra, fp
0b298     BF 00 A0 FD | 	call	#popregs_
0b29c                 | _ff_cc_v_closedir_0468_ret
0b29c     2D 00 64 FD | 	ret
0b2a0                 | 
0b2a0                 | _ff_cc_v_readdir_0471
0b2a0     02 5A 05 F6 | 	mov	COUNT_, #2
0b2a4     B0 00 A0 FD | 	call	#pushregs_
0b2a8     38 F0 07 F1 | 	add	ptra, #56
0b2ac     04 5E 05 F1 | 	add	fp, #4
0b2b0     AF 52 62 FC | 	wrlong	arg01, fp
0b2b4     04 5E 05 F1 | 	add	fp, #4
0b2b8     AF 54 62 FC | 	wrlong	arg02, fp
0b2bc     04 5E 05 F1 | 	add	fp, #4
0b2c0     AF 54 02 F6 | 	mov	arg02, fp
0b2c4     08 5E 85 F1 | 	sub	fp, #8
0b2c8     AF 5C 02 FB | 	rdlong	local01, fp
0b2cc     04 5E 85 F1 | 	sub	fp, #4
0b2d0     04 5C 06 F1 | 	add	local01, #4
0b2d4     2E 53 02 FB | 	rdlong	arg01, local01
0b2d8     5C F0 BF FD | 	call	#_ff_cc_f_readdir
0b2dc     16 5F 02 F6 | 	mov	local02, result1
0b2e0     28 5E 05 F1 | 	add	fp, #40
0b2e4     AF 5E 62 FC | 	wrlong	local02, fp
0b2e8     AF 5C 0A FB | 	rdlong	local01, fp wz
0b2ec     28 5E 85 F1 | 	sub	fp, #40
0b2f0     14 00 90 AD |  if_e	jmp	#LR__0765
0b2f4                 | '         return _set_dos_error(r);
0b2f4     28 5E 05 F1 | 	add	fp, #40
0b2f8     AF 52 02 FB | 	rdlong	arg01, fp
0b2fc     28 5E 85 F1 | 	sub	fp, #40
0b300     18 FD BF FD | 	call	#_ff_cc__set_dos_error_0455
0b304     34 00 90 FD | 	jmp	#LR__0766
0b308                 | LR__0765
0b308     18 5E 05 F1 | 	add	fp, #24
0b30c     AF 5C C2 FA | 	rdbyte	local01, fp
0b310     18 5E 85 F1 | 	sub	fp, #24
0b314     07 5C 4E F7 | 	zerox	local01, #7 wz
0b318                 | '         return -1;
0b318     01 2C 66 A6 |  if_e	neg	result1, #1
0b31c     1C 00 90 AD |  if_e	jmp	#LR__0766
0b320     08 5E 05 F1 | 	add	fp, #8
0b324     AF 52 02 FB | 	rdlong	arg01, fp
0b328     10 5E 05 F1 | 	add	fp, #16
0b32c     AF 54 02 F6 | 	mov	arg02, fp
0b330     18 5E 85 F1 | 	sub	fp, #24
0b334     4C 0E B0 FD | 	call	#_ff_cc_strcpy
0b338                 | '     }
0b338                 | ' 
0b338                 | ' 
0b338                 | ' 
0b338                 | ' 
0b338                 | '     strcpy(ent->d_name, finfo.fname);
0b338                 | ' 
0b338                 | '     return 0;
0b338     00 2C 06 F6 | 	mov	result1, #0
0b33c                 | LR__0766
0b33c     AF F0 03 F6 | 	mov	ptra, fp
0b340     BF 00 A0 FD | 	call	#popregs_
0b344                 | _ff_cc_v_readdir_0471_ret
0b344     2D 00 64 FD | 	ret
0b348                 | 
0b348                 | _ff_cc_v_stat_0483
0b348     0C 5A 05 F6 | 	mov	COUNT_, #12
0b34c     B0 00 A0 FD | 	call	#pushregs_
0b350     3C F0 07 F1 | 	add	ptra, #60
0b354     04 5E 05 F1 | 	add	fp, #4
0b358     AF 52 62 FC | 	wrlong	arg01, fp
0b35c     04 5E 05 F1 | 	add	fp, #4
0b360     AF 54 62 FC | 	wrlong	arg02, fp
0b364     2A 53 02 F6 | 	mov	arg01, arg02
0b368     08 5E 85 F1 | 	sub	fp, #8
0b36c     00 54 06 F6 | 	mov	arg02, #0
0b370     30 56 06 F6 | 	mov	arg03, #48
0b374     40 0E B0 FD | 	call	#_ff_cc_memset
0b378     04 5E 05 F1 | 	add	fp, #4
0b37c     AF 5C 02 FB | 	rdlong	local01, fp
0b380     04 5E 85 F1 | 	sub	fp, #4
0b384     2E 5F CA FA | 	rdbyte	local02, local01 wz
0b388     30 00 90 AD |  if_e	jmp	#LR__0767
0b38c     04 5E 05 F1 | 	add	fp, #4
0b390     AF 60 02 FB | 	rdlong	local03, fp
0b394     04 5E 85 F1 | 	sub	fp, #4
0b398     30 63 C2 FA | 	rdbyte	local04, local03
0b39c     2E 62 0E F2 | 	cmp	local04, #46 wz
0b3a0     30 00 90 5D |  if_ne	jmp	#LR__0768
0b3a4     04 5E 05 F1 | 	add	fp, #4
0b3a8     AF 64 02 FB | 	rdlong	local05, fp
0b3ac     04 5E 85 F1 | 	sub	fp, #4
0b3b0     01 64 06 F1 | 	add	local05, #1
0b3b4     32 67 CA FA | 	rdbyte	local06, local05 wz
0b3b8     18 00 90 5D |  if_ne	jmp	#LR__0768
0b3bc                 | LR__0767
0b3bc     18 5E 05 F1 | 	add	fp, #24
0b3c0     AF 20 48 FC | 	wrbyte	#16, fp
0b3c4     0C 5E 85 F1 | 	sub	fp, #12
0b3c8     AF 00 68 FC | 	wrlong	#0, fp
0b3cc     0C 5E 85 F1 | 	sub	fp, #12
0b3d0     24 00 90 FD | 	jmp	#LR__0769
0b3d4                 | LR__0768
0b3d4     10 5E 05 F1 | 	add	fp, #16
0b3d8     AF 54 02 F6 | 	mov	arg02, fp
0b3dc     0C 5E 85 F1 | 	sub	fp, #12
0b3e0     AF 52 02 FB | 	rdlong	arg01, fp
0b3e4     04 5E 85 F1 | 	sub	fp, #4
0b3e8     68 F0 BF FD | 	call	#_ff_cc_f_stat
0b3ec     0C 5E 05 F1 | 	add	fp, #12
0b3f0     AF 2C 62 FC | 	wrlong	result1, fp
0b3f4     0C 5E 85 F1 | 	sub	fp, #12
0b3f8                 | LR__0769
0b3f8     0C 5E 05 F1 | 	add	fp, #12
0b3fc     AF 5E 0A FB | 	rdlong	local02, fp wz
0b400     0C 5E 85 F1 | 	sub	fp, #12
0b404     14 00 90 AD |  if_e	jmp	#LR__0770
0b408                 | '         return _set_dos_error(r);
0b408     0C 5E 05 F1 | 	add	fp, #12
0b40c     AF 52 02 FB | 	rdlong	arg01, fp
0b410     0C 5E 85 F1 | 	sub	fp, #12
0b414     04 FC BF FD | 	call	#_ff_cc__set_dos_error_0455
0b418     54 01 90 FD | 	jmp	#LR__0773
0b41c                 | LR__0770
0b41c     2C 5E 05 F1 | 	add	fp, #44
0b420     AF 48 6A FC | 	wrlong	#292, fp
0b424     14 5E 85 F1 | 	sub	fp, #20
0b428     AF 5E C2 FA | 	rdbyte	local02, fp
0b42c     18 5E 85 F1 | 	sub	fp, #24
0b430     07 5E 46 F7 | 	zerox	local02, #7
0b434     01 5E CE F7 | 	test	local02, #1 wz
0b438     14 00 90 AD |  if_e	jmp	#LR__0771
0b43c     2C 5E 05 F1 | 	add	fp, #44
0b440     AF 5E 02 FB | 	rdlong	local02, fp
0b444     92 5E 46 F5 | 	or	local02, #146
0b448     AF 5E 62 FC | 	wrlong	local02, fp
0b44c     2C 5E 85 F1 | 	sub	fp, #44
0b450                 | LR__0771
0b450     18 5E 05 F1 | 	add	fp, #24
0b454     AF 5E C2 FA | 	rdbyte	local02, fp
0b458     18 5E 85 F1 | 	sub	fp, #24
0b45c     07 5E 46 F7 | 	zerox	local02, #7
0b460     10 5E CE F7 | 	test	local02, #16 wz
0b464     18 00 90 AD |  if_e	jmp	#LR__0772
0b468     2C 5E 05 F1 | 	add	fp, #44
0b46c     AF 5E 02 FB | 	rdlong	local02, fp
0b470     08 00 00 FF 
0b474     49 5E 46 F5 | 	or	local02, ##4169
0b478     AF 5E 62 FC | 	wrlong	local02, fp
0b47c     2C 5E 85 F1 | 	sub	fp, #44
0b480                 | LR__0772
0b480     08 5E 05 F1 | 	add	fp, #8
0b484     AF 5E 02 FB | 	rdlong	local02, fp
0b488     24 5E 05 F1 | 	add	fp, #36
0b48c     AF 68 02 FB | 	rdlong	local07, fp
0b490     08 5E 06 F1 | 	add	local02, #8
0b494     2F 69 62 FC | 	wrlong	local07, local02
0b498     24 5E 85 F1 | 	sub	fp, #36
0b49c     AF 5E 02 FB | 	rdlong	local02, fp
0b4a0     0C 5E 06 F1 | 	add	local02, #12
0b4a4     2F 03 68 FC | 	wrlong	#1, local02
0b4a8     AF 5E 02 FB | 	rdlong	local02, fp
0b4ac     08 5E 05 F1 | 	add	fp, #8
0b4b0     AF 68 02 FB | 	rdlong	local07, fp
0b4b4     18 5E 06 F1 | 	add	local02, #24
0b4b8     2F 69 62 FC | 	wrlong	local07, local02
0b4bc     08 5E 85 F1 | 	sub	fp, #8
0b4c0     AF 5E 02 FB | 	rdlong	local02, fp
0b4c4     1C 5E 06 F1 | 	add	local02, #28
0b4c8     01 00 80 FF 
0b4cc     2F 01 68 FC | 	wrlong	##512, local02
0b4d0     AF 5E 02 FB | 	rdlong	local02, fp
0b4d4     2F 69 02 F6 | 	mov	local07, local02
0b4d8     18 68 06 F1 | 	add	local07, #24
0b4dc     34 6B 02 FB | 	rdlong	local08, local07
0b4e0     35 61 52 F6 | 	abs	local03, local08 wc
0b4e4     09 60 46 F0 | 	shr	local03, #9
0b4e8     30 61 62 C6 |  if_b	neg	local03, local03
0b4ec     20 5E 06 F1 | 	add	local02, #32
0b4f0     2F 61 62 FC | 	wrlong	local03, local02
0b4f4     AF 5E 02 FB | 	rdlong	local02, fp
0b4f8     2F 69 02 F6 | 	mov	local07, local02
0b4fc     2F 61 02 F6 | 	mov	local03, local02
0b500     0E 5E 05 F1 | 	add	fp, #14
0b504     AF 2C E2 FA | 	rdword	result1, fp
0b508     16 6D 02 F6 | 	mov	local09, result1
0b50c     0B 6C 46 F0 | 	shr	local09, #11
0b510     1F 6C 06 F5 | 	and	local09, #31
0b514     16 6F 02 F6 | 	mov	local10, result1
0b518     05 6E 46 F0 | 	shr	local10, #5
0b51c     3F 6E 06 F5 | 	and	local10, #63
0b520     1F 2C 06 F5 | 	and	result1, #31
0b524     01 2C 66 F0 | 	shl	result1, #1
0b528     37 71 02 F6 | 	mov	local11, local10
0b52c     04 70 66 F0 | 	shl	local11, #4
0b530     37 71 82 F1 | 	sub	local11, local10
0b534     02 70 66 F0 | 	shl	local11, #2
0b538     38 2D 02 F1 | 	add	result1, local11
0b53c     07 00 00 FF 
0b540     10 6C 06 FD | 	qmul	local09, ##3600
0b544     18 72 62 FD | 	getqx	local12
0b548     39 2D 02 F1 | 	add	result1, local12
0b54c                 | ' 
0b54c                 | '     t = second + minute*60 + hour * 3600;
0b54c                 | '     return t;
0b54c     2C 60 06 F1 | 	add	local03, #44
0b550     30 2D 62 FC | 	wrlong	result1, local03
0b554     28 68 06 F1 | 	add	local07, #40
0b558     34 2D 62 FC | 	wrlong	result1, local07
0b55c     24 5E 06 F1 | 	add	local02, #36
0b560     2F 2D 62 FC | 	wrlong	result1, local02
0b564                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0b564                 | '     }
0b564                 | '     buf->st_mode = mode;
0b564                 | '     buf->st_nlink = 1;
0b564                 | '     buf->st_size = finfo.fsize;
0b564                 | '     buf->st_blksize = 512;
0b564                 | '     buf->st_blocks = buf->st_size / 512;
0b564                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0b564                 | ' #line 7053 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b564                 | '     return r;
0b564     0A 5E 85 F1 | 	sub	fp, #10
0b568     AF 2C 02 FB | 	rdlong	result1, fp
0b56c     0C 5E 85 F1 | 	sub	fp, #12
0b570                 | LR__0773
0b570     AF F0 03 F6 | 	mov	ptra, fp
0b574     BF 00 A0 FD | 	call	#popregs_
0b578                 | _ff_cc_v_stat_0483_ret
0b578     2D 00 64 FD | 	ret
0b57c                 | 
0b57c                 | _ff_cc_v_read_0487
0b57c     04 5A 05 F6 | 	mov	COUNT_, #4
0b580     B0 00 A0 FD | 	call	#pushregs_
0b584     24 F0 07 F1 | 	add	ptra, #36
0b588     04 5E 05 F1 | 	add	fp, #4
0b58c     AF 52 62 FC | 	wrlong	arg01, fp
0b590     04 5E 05 F1 | 	add	fp, #4
0b594     AF 54 62 FC | 	wrlong	arg02, fp
0b598     04 5E 05 F1 | 	add	fp, #4
0b59c     AF 56 62 FC | 	wrlong	arg03, fp
0b5a0     08 5E 85 F1 | 	sub	fp, #8
0b5a4     AF 5C 02 FB | 	rdlong	local01, fp
0b5a8     2E 5F 02 FB | 	rdlong	local02, local01
0b5ac     0C 5E 05 F1 | 	add	fp, #12
0b5b0     AF 5E 62 FC | 	wrlong	local02, fp
0b5b4     AF 5C 0A FB | 	rdlong	local01, fp wz
0b5b8     10 5E 85 F1 | 	sub	fp, #16
0b5bc     1C 00 90 5D |  if_ne	jmp	#LR__0774
0b5c0                 | '         return _seterror( 5 );
0b5c0     01 00 00 FF 
0b5c4     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b5c8     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0b5cc     01 00 00 FF 
0b5d0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b5d4     01 2C 66 F6 | 	neg	result1, #1
0b5d8     BC 00 90 FD | 	jmp	#LR__0777
0b5dc                 | LR__0774
0b5dc     10 5E 05 F1 | 	add	fp, #16
0b5e0     AF 52 02 FB | 	rdlong	arg01, fp
0b5e4     02 00 00 FF 
0b5e8     0C 52 06 F1 | 	add	arg01, ##1036
0b5ec     08 5E 05 F1 | 	add	fp, #8
0b5f0     AF 58 02 F6 | 	mov	arg04, fp
0b5f4     10 5E 85 F1 | 	sub	fp, #16
0b5f8     AF 54 02 FB | 	rdlong	arg02, fp
0b5fc     04 5E 05 F1 | 	add	fp, #4
0b600     AF 56 02 FB | 	rdlong	arg03, fp
0b604     0C 5E 85 F1 | 	sub	fp, #12
0b608     08 D4 BF FD | 	call	#_ff_cc_f_read
0b60c     16 61 02 F6 | 	mov	local03, result1
0b610     14 5E 05 F1 | 	add	fp, #20
0b614     AF 60 62 FC | 	wrlong	local03, fp
0b618     AF 5C 0A FB | 	rdlong	local01, fp wz
0b61c     14 5E 85 F1 | 	sub	fp, #20
0b620     34 00 90 AD |  if_e	jmp	#LR__0775
0b624     04 5E 05 F1 | 	add	fp, #4
0b628     AF 5C 02 FB | 	rdlong	local01, fp
0b62c     2E 63 02 F6 | 	mov	local04, local01
0b630     08 62 06 F1 | 	add	local04, #8
0b634     31 5F 02 FB | 	rdlong	local02, local04
0b638     20 5E 46 F5 | 	or	local02, #32
0b63c     08 5C 06 F1 | 	add	local01, #8
0b640     2E 5F 62 FC | 	wrlong	local02, local01
0b644                 | '         fil->state |=  (0x20) ;
0b644                 | '         return _set_dos_error(r);
0b644     10 5E 05 F1 | 	add	fp, #16
0b648     AF 52 02 FB | 	rdlong	arg01, fp
0b64c     14 5E 85 F1 | 	sub	fp, #20
0b650     C8 F9 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b654     40 00 90 FD | 	jmp	#LR__0777
0b658                 | LR__0775
0b658     18 5E 05 F1 | 	add	fp, #24
0b65c     AF 5C 0A FB | 	rdlong	local01, fp wz
0b660     18 5E 85 F1 | 	sub	fp, #24
0b664     24 00 90 5D |  if_ne	jmp	#LR__0776
0b668     04 5E 05 F1 | 	add	fp, #4
0b66c     AF 5C 02 FB | 	rdlong	local01, fp
0b670     2E 63 02 F6 | 	mov	local04, local01
0b674     04 5E 85 F1 | 	sub	fp, #4
0b678     08 62 06 F1 | 	add	local04, #8
0b67c     31 5F 02 FB | 	rdlong	local02, local04
0b680     10 5E 46 F5 | 	or	local02, #16
0b684     08 5C 06 F1 | 	add	local01, #8
0b688     2E 5F 62 FC | 	wrlong	local02, local01
0b68c                 | LR__0776
0b68c                 | '         fil->state |=  (0x10) ;
0b68c                 | '     }
0b68c                 | '     return x;
0b68c     18 5E 05 F1 | 	add	fp, #24
0b690     AF 2C 02 FB | 	rdlong	result1, fp
0b694     18 5E 85 F1 | 	sub	fp, #24
0b698                 | LR__0777
0b698     AF F0 03 F6 | 	mov	ptra, fp
0b69c     BF 00 A0 FD | 	call	#popregs_
0b6a0                 | _ff_cc_v_read_0487_ret
0b6a0     2D 00 64 FD | 	ret
0b6a4                 | 
0b6a4                 | _ff_cc_v_write_0491
0b6a4     04 5A 05 F6 | 	mov	COUNT_, #4
0b6a8     B0 00 A0 FD | 	call	#pushregs_
0b6ac     24 F0 07 F1 | 	add	ptra, #36
0b6b0     04 5E 05 F1 | 	add	fp, #4
0b6b4     AF 52 62 FC | 	wrlong	arg01, fp
0b6b8     04 5E 05 F1 | 	add	fp, #4
0b6bc     AF 54 62 FC | 	wrlong	arg02, fp
0b6c0     04 5E 05 F1 | 	add	fp, #4
0b6c4     AF 56 62 FC | 	wrlong	arg03, fp
0b6c8     08 5E 85 F1 | 	sub	fp, #8
0b6cc     AF 5C 02 FB | 	rdlong	local01, fp
0b6d0     2E 5F 02 FB | 	rdlong	local02, local01
0b6d4     0C 5E 05 F1 | 	add	fp, #12
0b6d8     AF 5E 62 FC | 	wrlong	local02, fp
0b6dc     AF 5C 0A FB | 	rdlong	local01, fp wz
0b6e0     10 5E 85 F1 | 	sub	fp, #16
0b6e4     1C 00 90 5D |  if_ne	jmp	#LR__0778
0b6e8                 | '         return _seterror( 5 );
0b6e8     01 00 00 FF 
0b6ec     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b6f0     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0b6f4     01 00 00 FF 
0b6f8     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b6fc     01 2C 66 F6 | 	neg	result1, #1
0b700     88 00 90 FD | 	jmp	#LR__0780
0b704                 | LR__0778
0b704     10 5E 05 F1 | 	add	fp, #16
0b708     AF 52 02 FB | 	rdlong	arg01, fp
0b70c     02 00 00 FF 
0b710     0C 52 06 F1 | 	add	arg01, ##1036
0b714     08 5E 05 F1 | 	add	fp, #8
0b718     AF 58 02 F6 | 	mov	arg04, fp
0b71c     10 5E 85 F1 | 	sub	fp, #16
0b720     AF 54 02 FB | 	rdlong	arg02, fp
0b724     04 5E 05 F1 | 	add	fp, #4
0b728     AF 56 02 FB | 	rdlong	arg03, fp
0b72c     0C 5E 85 F1 | 	sub	fp, #12
0b730     30 D9 BF FD | 	call	#_ff_cc_f_write
0b734     16 61 02 F6 | 	mov	local03, result1
0b738     14 5E 05 F1 | 	add	fp, #20
0b73c     AF 60 62 FC | 	wrlong	local03, fp
0b740     AF 5C 0A FB | 	rdlong	local01, fp wz
0b744     14 5E 85 F1 | 	sub	fp, #20
0b748     34 00 90 AD |  if_e	jmp	#LR__0779
0b74c     04 5E 05 F1 | 	add	fp, #4
0b750     AF 5C 02 FB | 	rdlong	local01, fp
0b754     2E 63 02 F6 | 	mov	local04, local01
0b758     08 62 06 F1 | 	add	local04, #8
0b75c     31 5F 02 FB | 	rdlong	local02, local04
0b760     20 5E 46 F5 | 	or	local02, #32
0b764     08 5C 06 F1 | 	add	local01, #8
0b768     2E 5F 62 FC | 	wrlong	local02, local01
0b76c                 | '         fil->state |=  (0x20) ;
0b76c                 | '         return _set_dos_error(r);
0b76c     10 5E 05 F1 | 	add	fp, #16
0b770     AF 52 02 FB | 	rdlong	arg01, fp
0b774     14 5E 85 F1 | 	sub	fp, #20
0b778     A0 F8 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b77c     0C 00 90 FD | 	jmp	#LR__0780
0b780                 | LR__0779
0b780                 | '     }
0b780                 | '     return x;
0b780     18 5E 05 F1 | 	add	fp, #24
0b784     AF 2C 02 FB | 	rdlong	result1, fp
0b788     18 5E 85 F1 | 	sub	fp, #24
0b78c                 | LR__0780
0b78c     AF F0 03 F6 | 	mov	ptra, fp
0b790     BF 00 A0 FD | 	call	#popregs_
0b794                 | _ff_cc_v_write_0491_ret
0b794     2D 00 64 FD | 	ret
0b798                 | 
0b798                 | _ff_cc_v_lseek_0495
0b798     05 5A 05 F6 | 	mov	COUNT_, #5
0b79c     B0 00 A0 FD | 	call	#pushregs_
0b7a0     2A 5D 02 F6 | 	mov	local01, arg02
0b7a4     2B 5F 02 F6 | 	mov	local02, arg03
0b7a8     29 61 02 FB | 	rdlong	local03, arg01
0b7ac     02 00 00 FF 
0b7b0     0C 60 0E F1 | 	add	local03, ##1036 wz
0b7b4     1C 00 90 5D |  if_ne	jmp	#LR__0781
0b7b8                 | '         return _seterror( 5 );
0b7b8     01 00 00 FF 
0b7bc     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b7c0     0E 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0b7c4     01 00 00 FF 
0b7c8     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b7cc     01 2C 66 F6 | 	neg	result1, #1
0b7d0     58 00 90 FD | 	jmp	#LR__0786
0b7d4                 | LR__0781
0b7d4     00 5E 0E F2 | 	cmp	local02, #0 wz
0b7d8     2C 00 90 AD |  if_e	jmp	#LR__0784
0b7dc     01 5E 0E F2 | 	cmp	local02, #1 wz
0b7e0     14 00 90 5D |  if_ne	jmp	#LR__0782
0b7e4     14 60 06 F1 | 	add	local03, #20
0b7e8     30 63 02 FB | 	rdlong	local04, local03
0b7ec     14 60 86 F1 | 	sub	local03, #20
0b7f0     31 5D 02 F1 | 	add	local01, local04
0b7f4     10 00 90 FD | 	jmp	#LR__0783
0b7f8                 | LR__0782
0b7f8     0C 60 06 F1 | 	add	local03, #12
0b7fc     30 63 02 FB | 	rdlong	local04, local03
0b800     0C 60 86 F1 | 	sub	local03, #12
0b804     31 5D 02 F1 | 	add	local01, local04
0b808                 | LR__0783
0b808                 | LR__0784
0b808     30 53 02 F6 | 	mov	arg01, local03
0b80c     2E 55 02 F6 | 	mov	arg02, local01
0b810     C0 E2 BF FD | 	call	#_ff_cc_f_lseek
0b814     16 65 0A F6 | 	mov	local05, result1 wz
0b818     0C 00 90 AD |  if_e	jmp	#LR__0785
0b81c                 | '         return _set_dos_error(result);
0b81c     32 53 02 F6 | 	mov	arg01, local05
0b820     F8 F7 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b824     04 00 90 FD | 	jmp	#LR__0786
0b828                 | LR__0785
0b828                 | '     }
0b828                 | '     return offset;
0b828     2E 2D 02 F6 | 	mov	result1, local01
0b82c                 | LR__0786
0b82c     AF F0 03 F6 | 	mov	ptra, fp
0b830     BF 00 A0 FD | 	call	#popregs_
0b834                 | _ff_cc_v_lseek_0495_ret
0b834     2D 00 64 FD | 	ret
0b838                 | 
0b838                 | _ff_cc_v_ioctl
0b838                 | ' {
0b838                 | '     return _seterror( 10 );
0b838     01 00 00 FF 
0b83c     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b840     0E 15 68 FC | 	wrlong	#10, ptr___system__dat__
0b844     01 00 00 FF 
0b848     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b84c     01 2C 66 F6 | 	neg	result1, #1
0b850                 | _ff_cc_v_ioctl_ret
0b850     2D 00 64 FD | 	ret
0b854                 | 
0b854                 | _ff_cc_v_mkdir
0b854     70 EF BF FD | 	call	#_ff_cc_f_mkdir
0b858     16 53 02 F6 | 	mov	arg01, result1
0b85c                 | ' 
0b85c                 | '     r = f_mkdir(name);
0b85c                 | '     return _set_dos_error(r);
0b85c     BC F7 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b860                 | _ff_cc_v_mkdir_ret
0b860     2D 00 64 FD | 	ret
0b864                 | 
0b864                 | _ff_cc_v_remove
0b864     D4 EC BF FD | 	call	#_ff_cc_f_unlink
0b868     16 53 02 F6 | 	mov	arg01, result1
0b86c                 | ' 
0b86c                 | '     r = f_unlink(name);
0b86c                 | '     return _set_dos_error(r);
0b86c     AC F7 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b870                 | _ff_cc_v_remove_ret
0b870     2D 00 64 FD | 	ret
0b874                 | 
0b874                 | _ff_cc_v_rmdir_0499
0b874     C4 EC BF FD | 	call	#_ff_cc_f_unlink
0b878     16 53 02 F6 | 	mov	arg01, result1
0b87c                 | ' 
0b87c                 | '     r = f_unlink(name);
0b87c                 | '     return _set_dos_error(r);
0b87c     9C F7 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b880                 | _ff_cc_v_rmdir_0499_ret
0b880     2D 00 64 FD | 	ret
0b884                 | 
0b884                 | _ff_cc_v_rename_0501
0b884     A4 F2 BF FD | 	call	#_ff_cc_f_rename
0b888     16 53 02 F6 | 	mov	arg01, result1
0b88c                 | '     return _set_dos_error(r);
0b88c     8C F7 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b890                 | _ff_cc_v_rename_0501_ret
0b890     2D 00 64 FD | 	ret
0b894                 | 
0b894                 | _ff_cc_v_open_0505
0b894     0B 5A 05 F6 | 	mov	COUNT_, #11
0b898     B0 00 A0 FD | 	call	#pushregs_
0b89c     29 5D 02 F6 | 	mov	local01, arg01
0b8a0     2A 5F 02 F6 | 	mov	local02, arg02
0b8a4     2B 61 02 F6 | 	mov	local03, arg03
0b8a8     02 00 00 FF 
0b8ac     34 52 06 F6 | 	mov	arg01, ##1076
0b8b0                 | '     return _gc_alloc(size);
0b8b0     10 54 06 F6 | 	mov	arg02, #16
0b8b4     34 7E BF FD | 	call	#__system___gc_doalloc
0b8b8     16 63 0A F6 | 	mov	local04, result1 wz
0b8bc     1C 00 90 5D |  if_ne	jmp	#LR__0787
0b8c0                 | '       return _seterror( 7 );
0b8c0     01 00 00 FF 
0b8c4     3C 1C 06 F1 | 	add	ptr___system__dat__, ##572
0b8c8     0E 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0b8cc     01 00 00 FF 
0b8d0     3C 1C 86 F1 | 	sub	ptr___system__dat__, ##572
0b8d4     01 2C 66 F6 | 	neg	result1, #1
0b8d8     AC 00 90 FD | 	jmp	#LR__0794
0b8dc                 | LR__0787
0b8dc     31 65 02 F6 | 	mov	local05, local04
0b8e0     00 66 06 F6 | 	mov	local06, #0
0b8e4     02 00 00 FF 
0b8e8     34 68 06 F6 | 	mov	local07, ##1076
0b8ec     32 53 02 F6 | 	mov	arg01, local05
0b8f0     00 54 06 F6 | 	mov	arg02, #0
0b8f4     02 00 00 FF 
0b8f8     34 56 06 F6 | 	mov	arg03, ##1076
0b8fc     B8 08 B0 FD | 	call	#_ff_cc_memset
0b900                 | '   switch (flags & 3) {
0b900     30 6B 02 F6 | 	mov	local08, local03
0b904     03 6A 06 F5 | 	and	local08, #3
0b908     35 6D 0A F6 | 	mov	local09, local08 wz
0b90c     0C 00 90 AD |  if_e	jmp	#LR__0788
0b910     01 6C 0E F2 | 	cmp	local09, #1 wz
0b914     0C 00 90 AD |  if_e	jmp	#LR__0789
0b918     10 00 90 FD | 	jmp	#LR__0790
0b91c                 | LR__0788
0b91c     01 6E 06 F6 | 	mov	local10, #1
0b920                 | '       fs_flags =  0x01 ;
0b920                 | '       break;
0b920     0C 00 90 FD | 	jmp	#LR__0791
0b924                 | LR__0789
0b924     02 6E 06 F6 | 	mov	local10, #2
0b928                 | '       fs_flags =  0x02 ;
0b928                 | '       break;
0b928     04 00 90 FD | 	jmp	#LR__0791
0b92c                 | LR__0790
0b92c     03 6E 06 F6 | 	mov	local10, #3
0b930                 | '       fs_flags =  0x01  |  0x02 ;
0b930                 | '       break;
0b930                 | LR__0791
0b930     08 60 CE F7 | 	test	local03, #8 wz
0b934     18 6E 46 55 |  if_ne	or	local10, #24
0b938     08 00 90 5D |  if_ne	jmp	#LR__0792
0b93c     20 60 CE F7 | 	test	local03, #32 wz
0b940     30 6E 46 55 |  if_ne	or	local10, #48
0b944                 | LR__0792
0b944     02 00 00 FF 
0b948     0C 62 06 F1 | 	add	local04, ##1036
0b94c     31 53 02 F6 | 	mov	arg01, local04
0b950     02 00 00 FF 
0b954     0C 62 86 F1 | 	sub	local04, ##1036
0b958     37 57 02 F6 | 	mov	arg03, local10
0b95c     2F 55 02 F6 | 	mov	arg02, local02
0b960     6C C9 BF FD | 	call	#_ff_cc_f_open
0b964     16 71 0A F6 | 	mov	local11, result1 wz
0b968     14 00 90 AD |  if_e	jmp	#LR__0793
0b96c     31 53 02 F6 | 	mov	arg01, local04
0b970                 | '     return _gc_free(ptr);
0b970     AC 7E BF FD | 	call	#__system___gc_free
0b974                 | '     free(f);
0b974                 | '     return _set_dos_error(r);
0b974     38 53 02 F6 | 	mov	arg01, local11
0b978     A0 F6 BF FD | 	call	#_ff_cc__set_dos_error_0455
0b97c     08 00 90 FD | 	jmp	#LR__0794
0b980                 | LR__0793
0b980     2E 63 62 FC | 	wrlong	local04, local01
0b984                 | '   }
0b984                 | '   fil->vfsdata = f;
0b984                 | '   return 0;
0b984     00 2C 06 F6 | 	mov	result1, #0
0b988                 | LR__0794
0b988     AF F0 03 F6 | 	mov	ptra, fp
0b98c     BF 00 A0 FD | 	call	#popregs_
0b990                 | _ff_cc_v_open_0505_ret
0b990     2D 00 64 FD | 	ret
0b994                 | 
0b994                 | _ff_cc_xmit_mmc_0619
0b994     04 5A 05 F6 | 	mov	COUNT_, #4
0b998     B0 00 A0 FD | 	call	#pushregs_
0b99c     6C 1F 06 F1 | 	add	ptr__ff_cc_dat__, #364
0b9a0     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0b9a4     08 1E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0b9a8     0F 5F 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0b9ac     74 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #372
0b9b0     58 47 9F FE | 	loc	pa,	#(@LR__0796-@LR__0795)
0b9b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
0b9b8                 | ' 
0b9b8                 | ' 	do {
0b9b8                 | LR__0795
0b9b8     29 61 C2 FA | 	rdbyte	local03, arg01
0b9bc     30 63 02 F6 | 	mov	local04, local03
0b9c0     07 62 46 F7 | 	zerox	local04, #7
0b9c4     80 62 CE F7 | 	test	local04, #128 wz
0b9c8     01 52 06 F1 | 	add	arg01, #1
0b9cc     5D 5E 62 FD | 	drvnz	local02
0b9d0     59 5C 62 FD | 	drvh	local01
0b9d4     1F 20 64 FD | 	waitx	#16
0b9d8     58 5C 62 FD | 	drvl	local01
0b9dc     1F 20 64 FD | 	waitx	#16
0b9e0     30 63 02 F6 | 	mov	local04, local03
0b9e4     07 62 46 F7 | 	zerox	local04, #7
0b9e8     40 62 CE F7 | 	test	local04, #64 wz
0b9ec     5D 5E 62 FD | 	drvnz	local02
0b9f0     59 5C 62 FD | 	drvh	local01
0b9f4     1F 20 64 FD | 	waitx	#16
0b9f8     58 5C 62 FD | 	drvl	local01
0b9fc     1F 20 64 FD | 	waitx	#16
0ba00     30 63 02 F6 | 	mov	local04, local03
0ba04     07 62 46 F7 | 	zerox	local04, #7
0ba08     20 62 CE F7 | 	test	local04, #32 wz
0ba0c     5D 5E 62 FD | 	drvnz	local02
0ba10     59 5C 62 FD | 	drvh	local01
0ba14     1F 20 64 FD | 	waitx	#16
0ba18     58 5C 62 FD | 	drvl	local01
0ba1c     1F 20 64 FD | 	waitx	#16
0ba20     30 63 02 F6 | 	mov	local04, local03
0ba24     07 62 46 F7 | 	zerox	local04, #7
0ba28     10 62 CE F7 | 	test	local04, #16 wz
0ba2c     5D 5E 62 FD | 	drvnz	local02
0ba30     59 5C 62 FD | 	drvh	local01
0ba34     1F 20 64 FD | 	waitx	#16
0ba38     58 5C 62 FD | 	drvl	local01
0ba3c     1F 20 64 FD | 	waitx	#16
0ba40     30 63 02 F6 | 	mov	local04, local03
0ba44     07 62 46 F7 | 	zerox	local04, #7
0ba48     08 62 CE F7 | 	test	local04, #8 wz
0ba4c     5D 5E 62 FD | 	drvnz	local02
0ba50     59 5C 62 FD | 	drvh	local01
0ba54     1F 20 64 FD | 	waitx	#16
0ba58     58 5C 62 FD | 	drvl	local01
0ba5c     1F 20 64 FD | 	waitx	#16
0ba60     30 63 02 F6 | 	mov	local04, local03
0ba64     07 62 46 F7 | 	zerox	local04, #7
0ba68     04 62 CE F7 | 	test	local04, #4 wz
0ba6c     5D 5E 62 FD | 	drvnz	local02
0ba70     59 5C 62 FD | 	drvh	local01
0ba74     1F 20 64 FD | 	waitx	#16
0ba78     58 5C 62 FD | 	drvl	local01
0ba7c     1F 20 64 FD | 	waitx	#16
0ba80     30 63 02 F6 | 	mov	local04, local03
0ba84     07 62 46 F7 | 	zerox	local04, #7
0ba88     02 62 CE F7 | 	test	local04, #2 wz
0ba8c     5D 5E 62 FD | 	drvnz	local02
0ba90     59 5C 62 FD | 	drvh	local01
0ba94     1F 20 64 FD | 	waitx	#16
0ba98     58 5C 62 FD | 	drvl	local01
0ba9c     1F 20 64 FD | 	waitx	#16
0baa0     07 60 46 F7 | 	zerox	local03, #7
0baa4     01 60 CE F7 | 	test	local03, #1 wz
0baa8     5D 5E 62 FD | 	drvnz	local02
0baac     59 5C 62 FD | 	drvh	local01
0bab0     1F 20 64 FD | 	waitx	#16
0bab4     58 5C 62 FD | 	drvl	local01
0bab8     1F 20 64 FD | 	waitx	#16
0babc     01 54 8E F1 | 	sub	arg02, #1 wz
0bac0     F4 FE 9F 5D |  if_ne	jmp	#LR__0795
0bac4                 | LR__0796
0bac4     AF F0 03 F6 | 	mov	ptra, fp
0bac8     BF 00 A0 FD | 	call	#popregs_
0bacc                 | _ff_cc_xmit_mmc_0619_ret
0bacc     2D 00 64 FD | 	ret
0bad0                 | 
0bad0                 | _ff_cc_rcvr_mmc_0625
0bad0     04 5A 05 F6 | 	mov	COUNT_, #4
0bad4     B0 00 A0 FD | 	call	#pushregs_
0bad8     29 5D 02 F6 | 	mov	local01, arg01
0badc     6C 1F 06 F1 | 	add	ptr__ff_cc_dat__, #364
0bae0     0F 5F 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0bae4     08 1E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0bae8     0F 53 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0baec     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
0baf0     0F 61 02 FB | 	rdlong	local03, ptr__ff_cc_dat__
0baf4     78 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0baf8     59 52 62 FD | 	drvh	arg01
0bafc     6C 46 9F FE | 	loc	pa,	#(@LR__0798-@LR__0797)
0bb00     93 00 A0 FD | 	call	#FCACHE_LOAD_
0bb04                 | ' 
0bb04                 | ' 	(_pinh(PIN_DI)) ;
0bb04                 | ' 
0bb04                 | ' 	do {
0bb04                 | LR__0797
0bb04     00 62 06 F6 | 	mov	local04, #0
0bb08     1F 10 64 FD | 	waitx	#8
0bb0c     40 60 72 FD | 	testp	local03 wc
0bb10     6C 2C 62 FD | 	wrc	result1
0bb14     01 2C CE F7 | 	test	result1, #1 wz
0bb18     01 62 06 56 |  if_ne	mov	local04, #1
0bb1c     59 5E 62 FD | 	drvh	local02
0bb20     1F 20 64 FD | 	waitx	#16
0bb24     58 5E 62 FD | 	drvl	local02
0bb28     1F 20 64 FD | 	waitx	#16
0bb2c     07 62 46 F7 | 	zerox	local04, #7
0bb30     01 62 66 F0 | 	shl	local04, #1
0bb34     1F 10 64 FD | 	waitx	#8
0bb38     40 60 72 FD | 	testp	local03 wc
0bb3c     6C 2C 62 FD | 	wrc	result1
0bb40     01 2C CE F7 | 	test	result1, #1 wz
0bb44     01 62 06 51 |  if_ne	add	local04, #1
0bb48     59 5E 62 FD | 	drvh	local02
0bb4c     1F 20 64 FD | 	waitx	#16
0bb50     58 5E 62 FD | 	drvl	local02
0bb54     1F 20 64 FD | 	waitx	#16
0bb58     07 62 46 F7 | 	zerox	local04, #7
0bb5c     01 62 66 F0 | 	shl	local04, #1
0bb60     1F 10 64 FD | 	waitx	#8
0bb64     40 60 72 FD | 	testp	local03 wc
0bb68     6C 2C 62 FD | 	wrc	result1
0bb6c     01 2C CE F7 | 	test	result1, #1 wz
0bb70     01 62 06 51 |  if_ne	add	local04, #1
0bb74     59 5E 62 FD | 	drvh	local02
0bb78     1F 20 64 FD | 	waitx	#16
0bb7c     58 5E 62 FD | 	drvl	local02
0bb80     1F 20 64 FD | 	waitx	#16
0bb84     07 62 46 F7 | 	zerox	local04, #7
0bb88     01 62 66 F0 | 	shl	local04, #1
0bb8c     1F 10 64 FD | 	waitx	#8
0bb90     40 60 72 FD | 	testp	local03 wc
0bb94     6C 2C 62 FD | 	wrc	result1
0bb98     01 2C CE F7 | 	test	result1, #1 wz
0bb9c     01 62 06 51 |  if_ne	add	local04, #1
0bba0     59 5E 62 FD | 	drvh	local02
0bba4     1F 20 64 FD | 	waitx	#16
0bba8     58 5E 62 FD | 	drvl	local02
0bbac     1F 20 64 FD | 	waitx	#16
0bbb0     07 62 46 F7 | 	zerox	local04, #7
0bbb4     01 62 66 F0 | 	shl	local04, #1
0bbb8     1F 10 64 FD | 	waitx	#8
0bbbc     40 60 72 FD | 	testp	local03 wc
0bbc0     6C 2C 62 FD | 	wrc	result1
0bbc4     01 2C CE F7 | 	test	result1, #1 wz
0bbc8     01 62 06 51 |  if_ne	add	local04, #1
0bbcc     59 5E 62 FD | 	drvh	local02
0bbd0     1F 20 64 FD | 	waitx	#16
0bbd4     58 5E 62 FD | 	drvl	local02
0bbd8     1F 20 64 FD | 	waitx	#16
0bbdc     07 62 46 F7 | 	zerox	local04, #7
0bbe0     01 62 66 F0 | 	shl	local04, #1
0bbe4     1F 10 64 FD | 	waitx	#8
0bbe8     40 60 72 FD | 	testp	local03 wc
0bbec     6C 2C 62 FD | 	wrc	result1
0bbf0     01 2C CE F7 | 	test	result1, #1 wz
0bbf4     01 62 06 51 |  if_ne	add	local04, #1
0bbf8     59 5E 62 FD | 	drvh	local02
0bbfc     1F 20 64 FD | 	waitx	#16
0bc00     58 5E 62 FD | 	drvl	local02
0bc04     1F 20 64 FD | 	waitx	#16
0bc08     07 62 46 F7 | 	zerox	local04, #7
0bc0c     01 62 66 F0 | 	shl	local04, #1
0bc10     1F 10 64 FD | 	waitx	#8
0bc14     40 60 72 FD | 	testp	local03 wc
0bc18     6C 2C 62 FD | 	wrc	result1
0bc1c     01 2C CE F7 | 	test	result1, #1 wz
0bc20     01 62 06 51 |  if_ne	add	local04, #1
0bc24     59 5E 62 FD | 	drvh	local02
0bc28     1F 20 64 FD | 	waitx	#16
0bc2c     58 5E 62 FD | 	drvl	local02
0bc30     1F 20 64 FD | 	waitx	#16
0bc34     07 62 46 F7 | 	zerox	local04, #7
0bc38     01 62 66 F0 | 	shl	local04, #1
0bc3c     1F 10 64 FD | 	waitx	#8
0bc40     40 60 72 FD | 	testp	local03 wc
0bc44     6C 2C 62 FD | 	wrc	result1
0bc48     01 2C CE F7 | 	test	result1, #1 wz
0bc4c     01 62 06 51 |  if_ne	add	local04, #1
0bc50     59 5E 62 FD | 	drvh	local02
0bc54     1F 20 64 FD | 	waitx	#16
0bc58     58 5E 62 FD | 	drvl	local02
0bc5c     1F 20 64 FD | 	waitx	#16
0bc60     2E 63 42 FC | 	wrbyte	local04, local01
0bc64     01 54 8E F1 | 	sub	arg02, #1 wz
0bc68     01 5C 06 F1 | 	add	local01, #1
0bc6c     94 FE 9F 5D |  if_ne	jmp	#LR__0797
0bc70                 | LR__0798
0bc70     AF F0 03 F6 | 	mov	ptra, fp
0bc74     BF 00 A0 FD | 	call	#popregs_
0bc78                 | _ff_cc_rcvr_mmc_0625_ret
0bc78     2D 00 64 FD | 	ret
0bc7c                 | 
0bc7c                 | _ff_cc_wait_ready_0628
0bc7c     04 5A 05 F6 | 	mov	COUNT_, #4
0bc80     B0 00 A0 FD | 	call	#pushregs_
0bc84     10 F0 07 F1 | 	add	ptra, #16
0bc88                 | ' {
0bc88                 | ' 	BYTE d;
0bc88                 | ' 	UINT tmr;
0bc88                 | ' 
0bc88                 | ' 
0bc88                 | ' 	for (tmr = 5000; tmr; tmr--) {
0bc88     08 5E 05 F1 | 	add	fp, #8
0bc8c     09 00 80 FF 
0bc90     AF 10 6B FC | 	wrlong	##5000, fp
0bc94     08 5E 85 F1 | 	sub	fp, #8
0bc98                 | LR__0799
0bc98     08 5E 05 F1 | 	add	fp, #8
0bc9c     AF 5C 0A FB | 	rdlong	local01, fp wz
0bca0     08 5E 85 F1 | 	sub	fp, #8
0bca4     4C 00 90 AD |  if_e	jmp	#LR__0800
0bca8     04 5E 05 F1 | 	add	fp, #4
0bcac     AF 52 02 F6 | 	mov	arg01, fp
0bcb0     04 5E 85 F1 | 	sub	fp, #4
0bcb4     01 54 06 F6 | 	mov	arg02, #1
0bcb8     14 FE BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0bcbc     04 5E 05 F1 | 	add	fp, #4
0bcc0     AF 5E C2 FA | 	rdbyte	local02, fp
0bcc4     04 5E 85 F1 | 	sub	fp, #4
0bcc8     07 5E 46 F7 | 	zerox	local02, #7
0bccc     FF 5E 0E F2 | 	cmp	local02, #255 wz
0bcd0     20 00 90 AD |  if_e	jmp	#LR__0800
0bcd4     64 52 06 F6 | 	mov	arg01, #100
0bcd8     70 6A BF FD | 	call	#__system___waitus
0bcdc     08 5E 05 F1 | 	add	fp, #8
0bce0     AF 60 02 FB | 	rdlong	local03, fp
0bce4     01 60 86 F1 | 	sub	local03, #1
0bce8     AF 60 62 FC | 	wrlong	local03, fp
0bcec     08 5E 85 F1 | 	sub	fp, #8
0bcf0     A4 FF 9F FD | 	jmp	#LR__0799
0bcf4                 | LR__0800
0bcf4                 | ' 		dly_us(100);
0bcf4                 | ' 	}
0bcf4                 | ' 
0bcf4                 | ' 	return tmr ? 1 : 0;
0bcf4     08 5E 05 F1 | 	add	fp, #8
0bcf8     AF 5C 0A FB | 	rdlong	local01, fp wz
0bcfc     08 5E 85 F1 | 	sub	fp, #8
0bd00     01 62 06 56 |  if_ne	mov	local04, #1
0bd04     00 62 06 A6 |  if_e	mov	local04, #0
0bd08     31 2D 02 F6 | 	mov	result1, local04
0bd0c     AF F0 03 F6 | 	mov	ptra, fp
0bd10     BF 00 A0 FD | 	call	#popregs_
0bd14                 | _ff_cc_wait_ready_0628_ret
0bd14     2D 00 64 FD | 	ret
0bd18                 | 
0bd18                 | _ff_cc_deselect_0634
0bd18     01 5A 05 F6 | 	mov	COUNT_, #1
0bd1c     B0 00 A0 FD | 	call	#pushregs_
0bd20     18 F0 07 F1 | 	add	ptra, #24
0bd24     70 1F 06 F1 | 	add	ptr__ff_cc_dat__, #368
0bd28     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0bd2c     04 5E 05 F1 | 	add	fp, #4
0bd30     AF 5C 62 FC | 	wrlong	local01, fp
0bd34     04 1E 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0bd38     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0bd3c     04 5E 05 F1 | 	add	fp, #4
0bd40     AF 5C 62 FC | 	wrlong	local01, fp
0bd44     08 1E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0bd48     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0bd4c     04 5E 05 F1 | 	add	fp, #4
0bd50     AF 5C 62 FC | 	wrlong	local01, fp
0bd54     04 1E 06 F1 | 	add	ptr__ff_cc_dat__, #4
0bd58     0F 5D 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0bd5c     78 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0bd60     04 5E 05 F1 | 	add	fp, #4
0bd64     AF 5C 62 FC | 	wrlong	local01, fp
0bd68     0C 5E 85 F1 | 	sub	fp, #12
0bd6c     AF 52 02 FB | 	rdlong	arg01, fp
0bd70     04 5E 85 F1 | 	sub	fp, #4
0bd74     59 52 62 FD | 	drvh	arg01
0bd78     1F 20 64 FD | 	waitx	#16
0bd7c     AF 52 02 F6 | 	mov	arg01, fp
0bd80     01 54 06 F6 | 	mov	arg02, #1
0bd84     48 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0bd88     AF F0 03 F6 | 	mov	ptra, fp
0bd8c     BF 00 A0 FD | 	call	#popregs_
0bd90                 | _ff_cc_deselect_0634_ret
0bd90     2D 00 64 FD | 	ret
0bd94                 | 
0bd94                 | _ff_cc_select_0637
0bd94     00 5A 05 F6 | 	mov	COUNT_, #0
0bd98     B0 00 A0 FD | 	call	#pushregs_
0bd9c     10 F0 07 F1 | 	add	ptra, #16
0bda0     70 1F 06 F1 | 	add	ptr__ff_cc_dat__, #368
0bda4     0F 53 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0bda8     70 1F 86 F1 | 	sub	ptr__ff_cc_dat__, #368
0bdac     08 5E 05 F1 | 	add	fp, #8
0bdb0     AF 52 62 FC | 	wrlong	arg01, fp
0bdb4     58 52 62 FD | 	drvl	arg01
0bdb8     1F 20 64 FD | 	waitx	#16
0bdbc     04 5E 85 F1 | 	sub	fp, #4
0bdc0     AF 52 02 F6 | 	mov	arg01, fp
0bdc4     04 5E 85 F1 | 	sub	fp, #4
0bdc8     01 54 06 F6 | 	mov	arg02, #1
0bdcc     00 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0bdd0     A8 FE BF FD | 	call	#_ff_cc_wait_ready_0628
0bdd4     00 2C 0E F2 | 	cmp	result1, #0 wz
0bdd8     01 2C 06 56 |  if_ne	mov	result1, #1
0bddc     08 00 90 5D |  if_ne	jmp	#LR__0801
0bde0     34 FF BF FD | 	call	#_ff_cc_deselect_0634
0bde4                 | ' 
0bde4                 | ' 	deselect();
0bde4                 | ' 	return 0;
0bde4     00 2C 06 F6 | 	mov	result1, #0
0bde8                 | LR__0801
0bde8     AF F0 03 F6 | 	mov	ptra, fp
0bdec     BF 00 A0 FD | 	call	#popregs_
0bdf0                 | _ff_cc_select_0637_ret
0bdf0     2D 00 64 FD | 	ret
0bdf4                 | 
0bdf4                 | _ff_cc_rcvr_datablock_0640
0bdf4     04 5A 05 F6 | 	mov	COUNT_, #4
0bdf8     B0 00 A0 FD | 	call	#pushregs_
0bdfc     1C F0 07 F1 | 	add	ptra, #28
0be00     04 5E 05 F1 | 	add	fp, #4
0be04     AF 52 62 FC | 	wrlong	arg01, fp
0be08     04 5E 05 F1 | 	add	fp, #4
0be0c     AF 54 62 FC | 	wrlong	arg02, fp
0be10                 | ' 	BYTE *buff,
0be10                 | ' 	UINT btr
0be10                 | ' )
0be10                 | ' {
0be10                 | ' 	BYTE d[2];
0be10                 | ' 	UINT tmr;
0be10                 | ' 
0be10                 | ' 
0be10                 | ' 	for (tmr = 1000; tmr; tmr--) {
0be10     08 5E 05 F1 | 	add	fp, #8
0be14     01 00 80 FF 
0be18     AF D0 6B FC | 	wrlong	##1000, fp
0be1c     10 5E 85 F1 | 	sub	fp, #16
0be20                 | LR__0802
0be20     10 5E 05 F1 | 	add	fp, #16
0be24     AF 5C 0A FB | 	rdlong	local01, fp wz
0be28     10 5E 85 F1 | 	sub	fp, #16
0be2c     4C 00 90 AD |  if_e	jmp	#LR__0803
0be30     0C 5E 05 F1 | 	add	fp, #12
0be34     AF 52 02 F6 | 	mov	arg01, fp
0be38     0C 5E 85 F1 | 	sub	fp, #12
0be3c     01 54 06 F6 | 	mov	arg02, #1
0be40     8C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0be44     0C 5E 05 F1 | 	add	fp, #12
0be48     AF 5E C2 FA | 	rdbyte	local02, fp
0be4c     0C 5E 85 F1 | 	sub	fp, #12
0be50     07 5E 46 F7 | 	zerox	local02, #7
0be54     FF 5E 0E F2 | 	cmp	local02, #255 wz
0be58     20 00 90 5D |  if_ne	jmp	#LR__0803
0be5c     64 52 06 F6 | 	mov	arg01, #100
0be60     E8 68 BF FD | 	call	#__system___waitus
0be64     10 5E 05 F1 | 	add	fp, #16
0be68     AF 60 02 FB | 	rdlong	local03, fp
0be6c     01 60 86 F1 | 	sub	local03, #1
0be70     AF 60 62 FC | 	wrlong	local03, fp
0be74     10 5E 85 F1 | 	sub	fp, #16
0be78     A4 FF 9F FD | 	jmp	#LR__0802
0be7c                 | LR__0803
0be7c     0C 5E 05 F1 | 	add	fp, #12
0be80     AF 62 C2 FA | 	rdbyte	local04, fp
0be84     0C 5E 85 F1 | 	sub	fp, #12
0be88     07 62 46 F7 | 	zerox	local04, #7
0be8c     FE 62 0E F2 | 	cmp	local04, #254 wz
0be90     00 2C 06 56 |  if_ne	mov	result1, #0
0be94     30 00 90 5D |  if_ne	jmp	#LR__0804
0be98     04 5E 05 F1 | 	add	fp, #4
0be9c     AF 52 02 FB | 	rdlong	arg01, fp
0bea0     04 5E 05 F1 | 	add	fp, #4
0bea4     AF 54 02 FB | 	rdlong	arg02, fp
0bea8     08 5E 85 F1 | 	sub	fp, #8
0beac     20 FC BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0beb0     0C 5E 05 F1 | 	add	fp, #12
0beb4     AF 52 02 F6 | 	mov	arg01, fp
0beb8     0C 5E 85 F1 | 	sub	fp, #12
0bebc     02 54 06 F6 | 	mov	arg02, #2
0bec0     0C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0bec4                 | ' 
0bec4                 | ' 	rcvr_mmc(buff, btr);
0bec4                 | ' 	rcvr_mmc(d, 2);
0bec4                 | ' 
0bec4                 | ' 	return 1;
0bec4     01 2C 06 F6 | 	mov	result1, #1
0bec8                 | LR__0804
0bec8     AF F0 03 F6 | 	mov	ptra, fp
0becc     BF 00 A0 FD | 	call	#popregs_
0bed0                 | _ff_cc_rcvr_datablock_0640_ret
0bed0     2D 00 64 FD | 	ret
0bed4                 | 
0bed4                 | _ff_cc_xmit_datablock_0642
0bed4     02 5A 05 F6 | 	mov	COUNT_, #2
0bed8     B0 00 A0 FD | 	call	#pushregs_
0bedc     14 F0 07 F1 | 	add	ptra, #20
0bee0     04 5E 05 F1 | 	add	fp, #4
0bee4     AF 52 62 FC | 	wrlong	arg01, fp
0bee8     04 5E 05 F1 | 	add	fp, #4
0beec     AF 54 42 FC | 	wrbyte	arg02, fp
0bef0     08 5E 85 F1 | 	sub	fp, #8
0bef4     84 FD BF FD | 	call	#_ff_cc_wait_ready_0628
0bef8     00 2C 0E F2 | 	cmp	result1, #0 wz
0befc     00 2C 06 A6 |  if_e	mov	result1, #0
0bf00     8C 00 90 AD |  if_e	jmp	#LR__0806
0bf04     08 5E 05 F1 | 	add	fp, #8
0bf08     AF 5C C2 FA | 	rdbyte	local01, fp
0bf0c     04 5E 05 F1 | 	add	fp, #4
0bf10     AF 5C 42 FC | 	wrbyte	local01, fp
0bf14     AF 5E 02 F6 | 	mov	local02, fp
0bf18     2F 53 02 F6 | 	mov	arg01, local02
0bf1c     01 54 06 F6 | 	mov	arg02, #1
0bf20     0C 5E 85 F1 | 	sub	fp, #12
0bf24     6C FA BF FD | 	call	#_ff_cc_xmit_mmc_0619
0bf28     08 5E 05 F1 | 	add	fp, #8
0bf2c     AF 5C C2 FA | 	rdbyte	local01, fp
0bf30     08 5E 85 F1 | 	sub	fp, #8
0bf34     07 5C 46 F7 | 	zerox	local01, #7
0bf38     FD 5C 0E F2 | 	cmp	local01, #253 wz
0bf3c     4C 00 90 AD |  if_e	jmp	#LR__0805
0bf40     04 5E 05 F1 | 	add	fp, #4
0bf44     AF 52 02 FB | 	rdlong	arg01, fp
0bf48     04 5E 85 F1 | 	sub	fp, #4
0bf4c     09 54 C6 F9 | 	decod	arg02, #9
0bf50     40 FA BF FD | 	call	#_ff_cc_xmit_mmc_0619
0bf54     2F 53 02 F6 | 	mov	arg01, local02
0bf58     02 54 06 F6 | 	mov	arg02, #2
0bf5c     70 FB BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0bf60     2F 53 02 F6 | 	mov	arg01, local02
0bf64     01 54 06 F6 | 	mov	arg02, #1
0bf68     64 FB BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0bf6c     0C 5E 05 F1 | 	add	fp, #12
0bf70     AF 5C C2 FA | 	rdbyte	local01, fp
0bf74     0C 5E 85 F1 | 	sub	fp, #12
0bf78     07 5C 46 F7 | 	zerox	local01, #7
0bf7c     1F 5C 06 F5 | 	and	local01, #31
0bf80     05 5C 0E F2 | 	cmp	local01, #5 wz
0bf84                 | ' 			return 0;
0bf84     00 2C 06 56 |  if_ne	mov	result1, #0
0bf88     04 00 90 5D |  if_ne	jmp	#LR__0806
0bf8c                 | LR__0805
0bf8c                 | ' 	}
0bf8c                 | ' 
0bf8c                 | ' 	return 1;
0bf8c     01 2C 06 F6 | 	mov	result1, #1
0bf90                 | LR__0806
0bf90     AF F0 03 F6 | 	mov	ptra, fp
0bf94     BF 00 A0 FD | 	call	#popregs_
0bf98                 | _ff_cc_xmit_datablock_0642_ret
0bf98     2D 00 64 FD | 	ret
0bf9c                 | 
0bf9c                 | _ff_cc_send_cmd_0646
0bf9c     07 5A 05 F6 | 	mov	COUNT_, #7
0bfa0     B0 00 A0 FD | 	call	#pushregs_
0bfa4     38 F0 07 F1 | 	add	ptra, #56
0bfa8                 | _ff_cc_send_cmd_0646_enter
0bfa8     04 5E 05 F1 | 	add	fp, #4
0bfac     AF 52 42 FC | 	wrbyte	arg01, fp
0bfb0     04 5E 05 F1 | 	add	fp, #4
0bfb4     AF 54 62 FC | 	wrlong	arg02, fp
0bfb8     04 5E 85 F1 | 	sub	fp, #4
0bfbc     AF 5C C2 FA | 	rdbyte	local01, fp
0bfc0     04 5E 85 F1 | 	sub	fp, #4
0bfc4     07 5C 46 F7 | 	zerox	local01, #7
0bfc8     80 5C CE F7 | 	test	local01, #128 wz
0bfcc     4C 00 90 AD |  if_e	jmp	#LR__0808
0bfd0     04 5E 05 F1 | 	add	fp, #4
0bfd4     AF 5E C2 FA | 	rdbyte	local02, fp
0bfd8     7F 5E 06 F5 | 	and	local02, #127
0bfdc     AF 5E 42 FC | 	wrbyte	local02, fp
0bfe0     04 5E 85 F1 | 	sub	fp, #4
0bfe4     37 52 06 F6 | 	mov	arg01, #55
0bfe8     00 54 06 F6 | 	mov	arg02, #0
0bfec     AC FF BF FD | 	call	#_ff_cc_send_cmd_0646
0bff0     0C 5E 05 F1 | 	add	fp, #12
0bff4     AF 2C 42 FC | 	wrbyte	result1, fp
0bff8     AF 5C C2 FA | 	rdbyte	local01, fp
0bffc     0C 5E 85 F1 | 	sub	fp, #12
0c000     07 5C 46 F7 | 	zerox	local01, #7
0c004     01 5C 1E F2 | 	cmp	local01, #1 wcz
0c008     10 00 90 ED |  if_be	jmp	#LR__0807
0c00c     0C 5E 05 F1 | 	add	fp, #12
0c010     AF 2C C2 FA | 	rdbyte	result1, fp
0c014     0C 5E 85 F1 | 	sub	fp, #12
0c018     5C 01 90 FD | 	jmp	#LR__0813
0c01c                 | LR__0807
0c01c                 | LR__0808
0c01c     04 5E 05 F1 | 	add	fp, #4
0c020     AF 5C C2 FA | 	rdbyte	local01, fp
0c024     04 5E 85 F1 | 	sub	fp, #4
0c028     07 5C 46 F7 | 	zerox	local01, #7
0c02c     0C 5C 0E F2 | 	cmp	local01, #12 wz
0c030     14 00 90 AD |  if_e	jmp	#LR__0809
0c034     E0 FC BF FD | 	call	#_ff_cc_deselect_0634
0c038     58 FD BF FD | 	call	#_ff_cc_select_0637
0c03c     00 2C 0E F2 | 	cmp	result1, #0 wz
0c040     FF 2C 06 A6 |  if_e	mov	result1, #255
0c044     30 01 90 AD |  if_e	jmp	#LR__0813
0c048                 | LR__0809
0c048     04 5E 05 F1 | 	add	fp, #4
0c04c     AF 60 CA FA | 	rdbyte	local03, fp wz
0c050     40 62 06 F6 | 	mov	local04, #64
0c054     30 63 42 F5 | 	or	local04, local03
0c058     10 5E 05 F1 | 	add	fp, #16
0c05c     AF 62 42 FC | 	wrbyte	local04, fp
0c060     0C 5E 85 F1 | 	sub	fp, #12
0c064     AF 5C 02 FB | 	rdlong	local01, fp
0c068     18 5C 46 F0 | 	shr	local01, #24
0c06c     0D 5E 05 F1 | 	add	fp, #13
0c070     AF 5C 42 FC | 	wrbyte	local01, fp
0c074     0D 5E 85 F1 | 	sub	fp, #13
0c078     AF 5C 02 FB | 	rdlong	local01, fp
0c07c     10 5C 46 F0 | 	shr	local01, #16
0c080     0E 5E 05 F1 | 	add	fp, #14
0c084     AF 5C 42 FC | 	wrbyte	local01, fp
0c088     0E 5E 85 F1 | 	sub	fp, #14
0c08c     AF 5C 02 FB | 	rdlong	local01, fp
0c090     08 5C 46 F0 | 	shr	local01, #8
0c094     0F 5E 05 F1 | 	add	fp, #15
0c098     AF 5C 42 FC | 	wrbyte	local01, fp
0c09c     0F 5E 85 F1 | 	sub	fp, #15
0c0a0     AF 5C 02 FB | 	rdlong	local01, fp
0c0a4     10 5E 05 F1 | 	add	fp, #16
0c0a8     AF 5C 42 FC | 	wrbyte	local01, fp
0c0ac     0C 5E 85 F1 | 	sub	fp, #12
0c0b0     AF 02 48 FC | 	wrbyte	#1, fp
0c0b4     0C 5E 85 F1 | 	sub	fp, #12
0c0b8     0C 5E 05 A1 |  if_e	add	fp, #12
0c0bc     AF 2A 49 AC |  if_e	wrbyte	#149, fp
0c0c0     0C 5E 85 A1 |  if_e	sub	fp, #12
0c0c4     08 60 0E F2 | 	cmp	local03, #8 wz
0c0c8     0C 5E 05 A1 |  if_e	add	fp, #12
0c0cc     AF 0E 49 AC |  if_e	wrbyte	#135, fp
0c0d0     0C 5E 85 A1 |  if_e	sub	fp, #12
0c0d4     0C 5E 05 F1 | 	add	fp, #12
0c0d8     AF 5C C2 FA | 	rdbyte	local01, fp
0c0dc     0D 5E 05 F1 | 	add	fp, #13
0c0e0     AF 5C 42 FC | 	wrbyte	local01, fp
0c0e4     05 5E 85 F1 | 	sub	fp, #5
0c0e8     AF 52 02 F6 | 	mov	arg01, fp
0c0ec     06 54 06 F6 | 	mov	arg02, #6
0c0f0     14 5E 85 F1 | 	sub	fp, #20
0c0f4     9C F8 BF FD | 	call	#_ff_cc_xmit_mmc_0619
0c0f8     0C 60 0E F2 | 	cmp	local03, #12 wz
0c0fc     14 00 90 5D |  if_ne	jmp	#LR__0810
0c100     10 5E 05 F1 | 	add	fp, #16
0c104     AF 52 02 F6 | 	mov	arg01, fp
0c108     01 54 06 F6 | 	mov	arg02, #1
0c10c     10 5E 85 F1 | 	sub	fp, #16
0c110     BC F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0c114                 | LR__0810
0c114     0C 5E 05 F1 | 	add	fp, #12
0c118     AF 14 48 FC | 	wrbyte	#10, fp
0c11c     0C 5E 85 F1 | 	sub	fp, #12
0c120                 | ' 	n = 10;
0c120                 | ' 	do
0c120                 | LR__0811
0c120     10 5E 05 F1 | 	add	fp, #16
0c124     AF 52 02 F6 | 	mov	arg01, fp
0c128     01 54 06 F6 | 	mov	arg02, #1
0c12c     10 5E 85 F1 | 	sub	fp, #16
0c130     9C F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0625
0c134     10 5E 05 F1 | 	add	fp, #16
0c138     AF 5C C2 FA | 	rdbyte	local01, fp
0c13c     10 5E 85 F1 | 	sub	fp, #16
0c140     07 5C 46 F7 | 	zerox	local01, #7
0c144     80 5C CE F7 | 	test	local01, #128 wz
0c148     20 00 90 AD |  if_e	jmp	#LR__0812
0c14c     0C 5E 05 F1 | 	add	fp, #12
0c150     AF 64 C2 FA | 	rdbyte	local05, fp
0c154     01 64 86 F1 | 	sub	local05, #1
0c158     AF 64 42 FC | 	wrbyte	local05, fp
0c15c     AF 66 C2 FA | 	rdbyte	local06, fp
0c160     0C 5E 85 F1 | 	sub	fp, #12
0c164     33 69 0A F6 | 	mov	local07, local06 wz
0c168     B4 FF 9F 5D |  if_ne	jmp	#LR__0811
0c16c                 | LR__0812
0c16c                 | ' 
0c16c                 | ' 	return d;
0c16c     10 5E 05 F1 | 	add	fp, #16
0c170     AF 2C C2 FA | 	rdbyte	result1, fp
0c174     10 5E 85 F1 | 	sub	fp, #16
0c178                 | LR__0813
0c178     AF F0 03 F6 | 	mov	ptra, fp
0c17c     BF 00 A0 FD | 	call	#popregs_
0c180                 | _ff_cc_send_cmd_0646_ret
0c180     2D 00 64 FD | 	ret
0c184                 | 
0c184                 | _ff_cc_strcpy
0c184     29 33 02 F6 | 	mov	_var01, arg01
0c188     00 54 0E F2 | 	cmp	arg02, #0 wz
0c18c     29 2D 02 A6 |  if_e	mov	result1, arg01
0c190     20 00 90 AD |  if_e	jmp	#_ff_cc_strcpy_ret
0c194     7C 3E 9F FE | 	loc	pa,	#(@LR__0815-@LR__0814)
0c198     93 00 A0 FD | 	call	#FCACHE_LOAD_
0c19c                 | '         do {
0c19c                 | LR__0814
0c19c     2A 35 CA FA | 	rdbyte	_var02, arg02 wz
0c1a0     19 35 42 FC | 	wrbyte	_var02, _var01
0c1a4     01 54 06 F1 | 	add	arg02, #1
0c1a8     01 32 06 F1 | 	add	_var01, #1
0c1ac     EC FF 9F 5D |  if_ne	jmp	#LR__0814
0c1b0                 | LR__0815
0c1b0                 | ' 	return(dst);
0c1b0     29 2D 02 F6 | 	mov	result1, arg01
0c1b4                 | _ff_cc_strcpy_ret
0c1b4     2D 00 64 FD | 	ret
0c1b8                 | 
0c1b8                 | _ff_cc_memset
0c1b8     29 33 02 F6 | 	mov	_var01, arg01
0c1bc     2A 35 02 F6 | 	mov	_var02, arg02
0c1c0     2B 37 02 F6 | 	mov	_var03, arg03
0c1c4     19 39 02 F6 | 	mov	_var04, _var01
0c1c8     03 3A 06 F6 | 	mov	_var05, #3
0c1cc     19 3B CA F7 | 	test	_var05, _var01 wz
0c1d0     84 00 90 5D |  if_ne	jmp	#LR__0819
0c1d4     04 36 1E F2 | 	cmp	_var03, #4 wcz
0c1d8     7C 00 90 ED |  if_be	jmp	#LR__0819
0c1dc     19 3D 02 F6 | 	mov	_var06, _var01
0c1e0     1A 3B 02 F6 | 	mov	_var05, _var02
0c1e4     FF 3A 06 F5 | 	and	_var05, #255
0c1e8     1D 35 02 F6 | 	mov	_var02, _var05
0c1ec     1A 3F 02 F6 | 	mov	_var07, _var02
0c1f0     18 3E 66 F0 | 	shl	_var07, #24
0c1f4     1A 41 02 F6 | 	mov	_var08, _var02
0c1f8     10 40 66 F0 | 	shl	_var08, #16
0c1fc     1F 43 02 F6 | 	mov	_var09, _var07
0c200     20 43 42 F5 | 	or	_var09, _var08
0c204     1A 45 02 F6 | 	mov	_var10, _var02
0c208     08 44 66 F0 | 	shl	_var10, #8
0c20c     21 47 02 F6 | 	mov	_var11, _var09
0c210     22 47 42 F5 | 	or	_var11, _var10
0c214     23 49 02 F6 | 	mov	_var12, _var11
0c218     1A 49 42 F5 | 	or	_var12, _var02
0c21c     24 4B 02 F6 | 	mov	_var13, _var12
0c220     08 3E 9F FE | 	loc	pa,	#(@LR__0817-@LR__0816)
0c224     93 00 A0 FD | 	call	#FCACHE_LOAD_
0c228                 | '     {
0c228                 | '       uint32_t lc;
0c228                 | '       uint32_t *dstl = dest_p;
0c228                 | '       c &= 0xff;
0c228                 | '       lc = (c<<24)|(c<<16)|(c<<8)|c;
0c228                 | '       while (n >= sizeof(uint32_t))
0c228                 | LR__0816
0c228     04 36 1E F2 | 	cmp	_var03, #4 wcz
0c22c     24 00 90 CD |  if_b	jmp	#LR__0818
0c230     1E 3B 02 F6 | 	mov	_var05, _var06
0c234     1E 4D 02 F6 | 	mov	_var14, _var06
0c238     04 4C 06 F1 | 	add	_var14, #4
0c23c     26 3D 02 F6 | 	mov	_var06, _var14
0c240     1D 4B 62 FC | 	wrlong	_var13, _var05
0c244     1B 3B 02 F6 | 	mov	_var05, _var03
0c248     04 3A 86 F1 | 	sub	_var05, #4
0c24c     1D 37 02 F6 | 	mov	_var03, _var05
0c250     D4 FF 9F FD | 	jmp	#LR__0816
0c254                 | LR__0817
0c254                 | LR__0818
0c254     1E 33 02 F6 | 	mov	_var01, _var06
0c258                 | LR__0819
0c258     BC 3D 9F FE | 	loc	pa,	#(@LR__0821-@LR__0820)
0c25c     93 00 A0 FD | 	call	#FCACHE_LOAD_
0c260                 | ' 	}
0c260                 | '       dest_p = dstl;
0c260                 | '     }
0c260                 | ' 
0c260                 | '   dst = dest_p;
0c260                 | '   while (n > 0) {
0c260                 | LR__0820
0c260     00 36 1E F2 | 	cmp	_var03, #0 wcz
0c264     10 00 90 ED |  if_be	jmp	#LR__0822
0c268     19 35 42 FC | 	wrbyte	_var02, _var01
0c26c     01 36 86 F1 | 	sub	_var03, #1
0c270     01 32 06 F1 | 	add	_var01, #1
0c274     E8 FF 9F FD | 	jmp	#LR__0820
0c278                 | LR__0821
0c278                 | LR__0822
0c278                 | '     *dst++ = c;
0c278                 | '     --n;
0c278                 | '   }
0c278                 | ' 
0c278                 | '   return orig_dest;
0c278     1C 2D 02 F6 | 	mov	result1, _var04
0c27c                 | _ff_cc_memset_ret
0c27c     2D 00 64 FD | 	ret
0c280                 | 
0c280                 | ' 	
0c280                 | ' 	FUNCTION pfunc(c as integer) as integer
0c280                 | ___strs_cl_pfunc
0c280                 | ' 		if (i < 16) then
0c280     04 0C 06 F1 | 	add	objptr, #4
0c284     06 33 02 FB | 	rdlong	_var01, objptr
0c288     04 0C 86 F1 | 	sub	objptr, #4
0c28c     10 32 5E F2 | 	cmps	_var01, #16 wcz
0c290     2C 00 90 3D |  if_ae	jmp	#LR__0823
0c294     06 35 02 FB | 	rdlong	_var02, objptr
0c298     04 0C 06 F1 | 	add	objptr, #4
0c29c     06 37 02 FB | 	rdlong	_var03, objptr
0c2a0     1A 37 02 F1 | 	add	_var03, _var02
0c2a4     1B 53 42 FC | 	wrbyte	arg01, _var03
0c2a8     06 33 02 FB | 	rdlong	_var01, objptr
0c2ac     01 32 06 F1 | 	add	_var01, #1
0c2b0     06 33 62 FC | 	wrlong	_var01, objptr
0c2b4     04 0C 86 F1 | 	sub	objptr, #4
0c2b8                 | ' 			p(i) = c
0c2b8                 | ' 			i = i+1
0c2b8                 | ' 			return 1
0c2b8     01 2C 06 F6 | 	mov	result1, #1
0c2bc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
0c2c0                 | LR__0823
0c2c0                 | ' 			return -1
0c2c0     01 2C 66 F6 | 	neg	result1, #1
0c2c4                 | ___strs_cl_pfunc_ret
0c2c4     2D 00 64 FD | 	ret
0c2c8                 | 
0c2c8                 | __struct__s_vfs_file_t_putchar
0c2c8     04 5A 05 F6 | 	mov	COUNT_, #4
0c2cc     B0 00 A0 FD | 	call	#pushregs_
0c2d0     18 0C 06 F1 | 	add	objptr, #24
0c2d4     06 5D 0A FB | 	rdlong	local01, objptr wz
0c2d8     18 0C 86 F1 | 	sub	objptr, #24
0c2dc     00 2C 06 A6 |  if_e	mov	result1, #0
0c2e0     3C 00 90 AD |  if_e	jmp	#LR__0824
0c2e4     18 0C 06 F1 | 	add	objptr, #24
0c2e8     06 5D 02 FB | 	rdlong	local01, objptr
0c2ec     18 0C 86 F1 | 	sub	objptr, #24
0c2f0     2E 5F 02 FB | 	rdlong	local02, local01
0c2f4     04 5C 06 F1 | 	add	local01, #4
0c2f8     2E 61 02 FB | 	rdlong	local03, local01
0c2fc     06 55 02 F6 | 	mov	arg02, objptr
0c300     06 63 02 F6 | 	mov	local04, objptr
0c304     2F 0D 02 F6 | 	mov	objptr, local02
0c308     2D 60 62 FD | 	call	local03
0c30c     31 0D 02 F6 | 	mov	objptr, local04
0c310     00 2C 5E F2 | 	cmps	result1, #0 wcz
0c314     00 5C 06 C6 |  if_b	mov	local01, #0
0c318     01 5C 06 36 |  if_ae	mov	local01, #1
0c31c     2E 2D 02 F6 | 	mov	result1, local01
0c320                 | LR__0824
0c320     AF F0 03 F6 | 	mov	ptra, fp
0c324     BF 00 A0 FD | 	call	#popregs_
0c328                 | __struct__s_vfs_file_t_putchar_ret
0c328     2D 00 64 FD | 	ret
0c32c                 | 
0c32c                 | __struct__s_vfs_file_t_getchar
0c32c     04 5A 05 F6 | 	mov	COUNT_, #4
0c330     B0 00 A0 FD | 	call	#pushregs_
0c334     1C 0C 06 F1 | 	add	objptr, #28
0c338     06 5D 0A FB | 	rdlong	local01, objptr wz
0c33c     1C 0C 86 F1 | 	sub	objptr, #28
0c340     01 2C 66 A6 |  if_e	neg	result1, #1
0c344     2C 00 90 AD |  if_e	jmp	#LR__0825
0c348                 | '         return getcf(__this);
0c348     1C 0C 06 F1 | 	add	objptr, #28
0c34c     06 5D 02 FB | 	rdlong	local01, objptr
0c350     1C 0C 86 F1 | 	sub	objptr, #28
0c354     2E 5F 02 FB | 	rdlong	local02, local01
0c358     04 5C 06 F1 | 	add	local01, #4
0c35c     2E 61 02 FB | 	rdlong	local03, local01
0c360     06 53 02 F6 | 	mov	arg01, objptr
0c364     06 63 02 F6 | 	mov	local04, objptr
0c368     2F 0D 02 F6 | 	mov	objptr, local02
0c36c     2D 60 62 FD | 	call	local03
0c370     31 0D 02 F6 | 	mov	objptr, local04
0c374                 | LR__0825
0c374     AF F0 03 F6 | 	mov	ptra, fp
0c378     BF 00 A0 FD | 	call	#popregs_
0c37c                 | __struct__s_vfs_file_t_getchar_ret
0c37c     2D 00 64 FD | 	ret
0c380                 | 
0c380                 | __struct___bas_wrap_sender_tx
0c380     04 5A 05 F6 | 	mov	COUNT_, #4
0c384     B0 00 A0 FD | 	call	#pushregs_
0c388     06 5D 02 FB | 	rdlong	local01, objptr
0c38c     2E 5F 02 FB | 	rdlong	local02, local01
0c390     04 5C 06 F1 | 	add	local01, #4
0c394     2E 61 02 FB | 	rdlong	local03, local01
0c398     06 63 02 F6 | 	mov	local04, objptr
0c39c     2F 0D 02 F6 | 	mov	objptr, local02
0c3a0     2D 60 62 FD | 	call	local03
0c3a4     31 0D 02 F6 | 	mov	objptr, local04
0c3a8     01 2C 06 F6 | 	mov	result1, #1
0c3ac     AF F0 03 F6 | 	mov	ptra, fp
0c3b0     BF 00 A0 FD | 	call	#popregs_
0c3b4                 | __struct___bas_wrap_sender_tx_ret
0c3b4     2D 00 64 FD | 	ret
0c3b8                 | 
0c3b8                 | LR__0826
0c3b8     2F          | 	byte	"/"
0c3b9     00          | 	byte	0
0c3ba                 | LR__0827
0c3ba     20 21 21 21 
0c3be     20 63 6F 72 
0c3c2     72 75 70 74 
0c3c6     65 64 20 68 
0c3ca     65 61 70 3F 
0c3ce     3F 3F 20 21 
0c3d2     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0c3d5     00          | 	byte	0
0c3d6                 | LR__0828
0c3d6     20 21 21 21 
0c3da     20 6F 75 74 
0c3de     20 6F 66 20 
0c3e2     68 65 61 70 
0c3e6     20 6D 65 6D 
0c3ea     6F 72 79 20 
0c3ee     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0c3f2     00          | 	byte	0
0c3f3                 | LR__0829
0c3f3     20 21 21 21 
0c3f7     20 63 6F 72 
0c3fb     72 75 70 74 
0c3ff     65 64 20 68 
0c403     65 61 70 20 
0c407     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0c40b     00          | 	byte	0
0c40c                 | LR__0830
0c40c     00          | 	byte	0
0c40d     00          | 	byte	0
0c40e                 | LR__0831
0c40e     22 2A 2B 2C 
0c412     3A 3B 3C 3D 
0c416     3E 3F 5B 5D 
0c41a     7C 7F       | 	byte	34,"*+,:;<=>?[]|",127
0c41c     00          | 	byte	0
0c41d                 | LR__0832
0c41d     EB 76 90 45 
0c421     58 46 41 54 
0c425     20 20 20    | 	byte	-21,"v",-112,"EXFAT   "
0c428     00          | 	byte	0
0c429                 | LR__0833
0c429     46 41 54    | 	byte	"FAT"
0c42c     00          | 	byte	0
0c42d                 | LR__0834
0c42d     46 41 54 33 
0c431     32          | 	byte	"FAT32"
0c432     00          | 	byte	0
0c433                 | LR__0835
0c433     42 61 73 69 
0c437     63 20 74 65 
0c43b     73 74       | 	byte	"Basic test"
0c43d     00          | 	byte	0
0c43e                 | LR__0836
0c43e     6B 77 61 73 
0c442     32          | 	byte	"kwas2"
0c443     00          | 	byte	0
0c444                 | LR__0837
0c444     2F 73 64    | 	byte	"/sd"
0c447     00          | 	byte	0
0c448                 | LR__0838
0c448     2F 73 64 2F 
0c44c     74 65 73 74 
0c450     62 61 73 2E 
0c454     74 78 74    | 	byte	"/sd/testbas.txt"
0c457     00          | 	byte	0
0c458                 | LR__0839
0c458     2F 73 64 2F 
0c45c     74 65 73 74 
0c460     62 61 73 2E 
0c464     74 78 74    | 	byte	"/sd/testbas.txt"
0c467     00          | 	byte	0
0c468                 | 	alignl
0c468                 | _hng030rm_spin2_dat_
0c468     00 00 00 00 
0c46c     00 00 00 00 
0c470     00 00 00 00 
0c474     00 00 00 00 
0c478     00 00 00    | vga_font       file "vgafont.def"
0c47b     7E 81 A5 81 
0c47f     81 BD 99 81 
0c483     81 7E 00 00 
0c487     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0c48b     7E FF DB FF 
0c48f     FF C3 E7 FF 
0c493     FF 7E 00 00 
0c497     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0c49b     00 36 7F 7F 
0c49f     7F 7F 3E 1C 
0c4a3     08 00 00 00 
0c4a7     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0c4ab     00 08 1C 3E 
0c4af     7F 3E 1C 08 
0c4b3     00 00 00 00 
0c4b7     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0c4bb     18 3C 3C E7 
0c4bf     E7 E7 18 18 
0c4c3     3C 00 00 00 
0c4c7     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0c4cb     18 3C 7E FF 
0c4cf     FF 7E 18 18 
0c4d3     3C 00 00 00 
0c4d7     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0c4db     00 00 00 18 
0c4df     3C 3C 18 00 
0c4e3     00 00 00 00 
0c4e7     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
0c4eb     FF FF FF E7 
0c4ef     C3 C3 E7 FF 
0c4f3     FF FF FF FF 
0c4f7     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0c4fb     00 00 3C 66 
0c4ff     42 42 66 3C 
0c503     00 00 00 00 
0c507     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
0c50b     FF FF C3 99 
0c50f     BD BD 99 C3 
0c513     FF FF FF FF 
0c517     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0c51b     78 70 58 4C 
0c51f     1E 33 33 33 
0c523     33 1E 00 00 
0c527     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
0c52b     3C 66 66 66 
0c52f     66 3C 18 7E 
0c533     18 18 00 00 
0c537     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
0c53b     FC CC FC 0C 
0c53f     0C 0C 0C 0E 
0c543     0F 07 00 00 
0c547     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
0c54b     FE C6 FE C6 
0c54f     C6 C6 C6 E6 
0c553     E7 67 03 00 
0c557     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
0c55b     18 18 DB 3C 
0c55f     E7 3C DB 18 
0c563     18 00 00 00 
0c567     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
0c56b     03 07 0F 1F 
0c56f     7F 1F 0F 07 
0c573     03 01 00 00 
0c577     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
0c57b     60 70 78 7C 
0c57f     7F 7C 78 70 
0c583     60 40 00 00 
0c587     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0c58b     18 3C 7E 18 
0c58f     18 18 7E 3C 
0c593     18 00 00 00 
0c597     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0c59b     66 66 66 66 
0c59f     66 66 66    | 	byte	$66[7]
0c5a2     00 66 66 00 
0c5a6     00 00 00 00 
0c5aa     00 FE DB DB 
0c5ae     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
0c5b2     D8 D8 D8 00 
0c5b6     00 00 00 3E 
0c5ba     63 06 1C 36 
0c5be     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
0c5c2     30 63 3E 00 
0c5c6     00 00 00 00 
0c5ca     00 00 00 00 
0c5ce     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0c5d2     7F 7F 7F 00 
0c5d6     00 00 00 00 
0c5da     00 18 3C 7E 
0c5de     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
0c5e2     3C 18 7E 00 
0c5e6     00 00 00 00 
0c5ea     00 18 3C 7E 
0c5ee     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
0c5f2     18 18 18 00 
0c5f6     00 00 00 00 
0c5fa     00 18 18 18 
0c5fe     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0c602     7E 3C 18 00 
0c606     00 00 00 00 
0c60a     00 00 00 18 
0c60e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
0c612     00 00 00 00 
0c616     00 00 00 00 
0c61a     00 00 00    | 	byte	$00[11]
0c61d     0C 06 7F 06 
0c621     0C 00 00 00 
0c625     00 00 00 00 
0c629     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c62d     00 03 03 03 
0c631     7F 00 00 00 
0c635     00 00 00 00 
0c639     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c63d     14 36 7F 36 
0c641     14 00 00 00 
0c645     00 00 00 00 
0c649     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
0c64d     1C 1C 3E 3E 
0c651     7F 7F 00 00 
0c655     00 00 00 00 
0c659     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0c65d     7F 3E 3E 1C 
0c661     1C 08 00 00 
0c665     00 00 00 00 
0c669     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c66d     00 00 00 00 
0c671     00 00 00 00 
0c675     00 00 00 00 
0c679     00 00       | 	byte	$00[14]
0c67b     18 3C 3C 3C 
0c67f     18 18 18 00 
0c683     18 18 00 00 
0c687     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
0c68b     66 24 00 00 
0c68f     00 00 00 00 
0c693     00 00 00 00 
0c697     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c69b     00 36 36 7F 
0c69f     36 36 36 7F 
0c6a3     36 36 00 00 
0c6a7     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
0c6ab     3E 63 43 03 
0c6af     3E 60 60 61 
0c6b3     63 3E 18 18 
0c6b7     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
0c6bb     00 00 43 63 
0c6bf     30 18 0C 06 
0c6c3     63 61 00 00 
0c6c7     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
0c6cb     1C 36 36 1C 
0c6cf     6E 3B 33 33 
0c6d3     33 6E 00 00 
0c6d7     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
0c6db     0C 0C 0C 06 
0c6df     00 00 00 00 
0c6e3     00 00 00 00 
0c6e7     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6eb     30 18 0C 0C 
0c6ef     0C 0C 0C 0C 
0c6f3     18 30 00 00 
0c6f7     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
0c6fb     0C 18 30 30 
0c6ff     30 30 30 30 
0c703     18 0C 00 00 
0c707     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
0c70b     00 00 00 66 
0c70f     3C FF 3C 66 
0c713     00 00 00 00 
0c717     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
0c71b     00 00 00 18 
0c71f     18 7E 18 18 
0c723     00 00 00 00 
0c727     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0c72b     00 00 00 00 
0c72f     00 00 00 00 | 	byte	$00[8]
0c733     18 18 18 0C 
0c737     00 00 00 00 
0c73b     00 00 00 00 
0c73f     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
0c743     00 00 00 00 
0c747     00 00 00 00 
0c74b     00 00 00 00 
0c74f     00 00 00 00 | 	byte	$00[16]
0c753     18 18 00 00 
0c757     00 00 00 00 
0c75b     00 00 40 60 
0c75f     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
0c763     03 01 00 00 
0c767     00 00 00 00 
0c76b     1C 36 63 63 
0c76f     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
0c773     36 1C 00 00 
0c777     00 00 00 00 
0c77b     18 1C 1E 18 
0c77f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
0c783     18 7E 00 00 
0c787     00 00 00 00 
0c78b     3E 63 60 30 
0c78f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
0c793     63 7F 00 00 
0c797     00 00 00 00 
0c79b     3E 63 60 60 
0c79f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
0c7a3     63 3E 00 00 
0c7a7     00 00 00 00 
0c7ab     30 38 3C 36 
0c7af     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
0c7b3     30 78 00 00 
0c7b7     00 00 00 00 
0c7bb     7F 03 03 03 
0c7bf     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
0c7c3     63 3E 00 00 
0c7c7     00 00 00 00 
0c7cb     1C 06 03 03 
0c7cf     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
0c7d3     63 3E 00 00 
0c7d7     00 00 00 00 
0c7db     7F 63 60 60 
0c7df     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
0c7e3     0C 0C 00 00 
0c7e7     00 00 00 00 
0c7eb     3E 63 63 63 
0c7ef     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
0c7f3     63 3E 00 00 
0c7f7     00 00 00 00 
0c7fb     3E 63 63 63 
0c7ff     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
0c803     30 1E 00 00 
0c807     00 00 00 00 
0c80b     00 00 00 18 
0c80f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0c813     18 18 00 00 
0c817     00 00 00 00 
0c81b     00 00 00 18 
0c81f     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0c823     18 18 0C 00 
0c827     00 00 00 00 
0c82b     00 60 30 18 
0c82f     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
0c833     30 60 00 00 
0c837     00 00 00 00 
0c83b     00 00 00 7E 
0c83f     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
0c843     00 00 00 00 
0c847     00 00 00 00 
0c84b     00          | 	byte	$00[9]
0c84c     06 0C 18 30 
0c850     60 30 18 0C 
0c854     06 00 00 00 
0c858     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
0c85c     63 63 30 18 
0c860     18 18 00 18 
0c864     18 00 00 00 
0c868     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
0c86c     3E 63 63 7B 
0c870     7B 7B 3B 03 
0c874     3E 00 00 00 
0c878     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
0c87c     1C 36 63 63 
0c880     7F 63 63 63 
0c884     63 00 00 00 
0c888     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
0c88c     66 66 66 3E 
0c890     66 66 66 66 
0c894     3F 00 00 00 
0c898     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
0c89c     66 43 03 03 
0c8a0     03 03 43 66 
0c8a4     3C 00 00 00 
0c8a8     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
0c8ac     36 66 66 66 
0c8b0     66 66 66 36 
0c8b4     1F 00 00 00 
0c8b8     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
0c8bc     66 46 16 1E 
0c8c0     16 06 46 66 
0c8c4     7F 00 00 00 
0c8c8     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
0c8cc     66 46 16 1E 
0c8d0     16 06 06 06 
0c8d4     0F 00 00 00 
0c8d8     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
0c8dc     66 43 03 03 
0c8e0     7B 63 63 66 
0c8e4     5C 00 00 00 
0c8e8     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
0c8ec     63 63 63 7F 
0c8f0     63 63 63 63 
0c8f4     63 00 00 00 
0c8f8     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
0c8fc     18 18 18 18 
0c900     18 18 18 18 | 	byte	$18[8]
0c904     3C 00 00 00 
0c908     00 00 00 78 
0c90c     30 30 30 30 
0c910     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
0c914     1E 00 00 00 
0c918     00 00 00 67 
0c91c     66 66 36 1E 
0c920     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
0c924     67 00 00 00 
0c928     00 00 00 0F 
0c92c     06 06 06 06 
0c930     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0c934     7F 00 00 00 
0c938     00 00 00 63 
0c93c     77 7F 7F 6B 
0c940     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
0c944     63 00 00 00 
0c948     00 00 00 63 
0c94c     67 6F 7F 7B 
0c950     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
0c954     63 00 00 00 
0c958     00 00 00 3E 
0c95c     63 63 63 63 
0c960     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0c964     3E 00 00 00 
0c968     00 00 00 3F 
0c96c     66 66 66 3E 
0c970     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
0c974     0F 00 00 00 
0c978     00 00 00 3E 
0c97c     63 63 63 63 
0c980     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
0c984     3E 30 70 00 
0c988     00 00 00 3F 
0c98c     66 66 66 3E 
0c990     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
0c994     67 00 00 00 
0c998     00 00 00 3E 
0c99c     63 63 06 1C 
0c9a0     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0c9a4     3E 00 00 00 
0c9a8     00 00 00 7E 
0c9ac     7E 5A 18 18 
0c9b0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0c9b4     3C 00 00 00 
0c9b8     00 00 00 63 
0c9bc     63 63 63 63 
0c9c0     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0c9c4     3E 00 00 00 
0c9c8     00 00 00 63 
0c9cc     63 63 63 63 
0c9d0     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
0c9d4     08 00 00 00 
0c9d8     00 00 00 63 
0c9dc     63 63 63 6B 
0c9e0     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
0c9e4     36 00 00 00 
0c9e8     00 00 00 63 
0c9ec     63 36 3E 1C 
0c9f0     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
0c9f4     63 00 00 00 
0c9f8     00 00 00 66 
0c9fc     66 66 66 3C 
0ca00     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
0ca04     3C 00 00 00 
0ca08     00 00 00 7F 
0ca0c     63 61 30 18 
0ca10     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0ca14     7F 00 00 00 
0ca18     00 00 00 3C 
0ca1c     0C 0C 0C 0C 
0ca20     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
0ca24     3C 00 00 00 
0ca28     00 00 00 00 
0ca2c     01 03 07 0E 
0ca30     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
0ca34     40 00 00 00 
0ca38     00 00 00 3C 
0ca3c     30 30 30 30 
0ca40     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
0ca44     3C 00 00 00 
0ca48     1C 36 00 00 
0ca4c     00 00 00 00 
0ca50     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca54     00 00 00 00 
0ca58     00 00 00 00 
0ca5c     00 00 00 00 
0ca60     00 00 00 00 
0ca64     00          | 	byte	$00[17]
0ca65     FF 00 00 0C 
0ca69     18 00 00 00 
0ca6d     00 00 00 00 
0ca71     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca75     00 00 00 00 
0ca79     00 00 00 00 
0ca7d     00          | 	byte	$00[9]
0ca7e     1E 30 3E 33 
0ca82     33 33 6E 00 
0ca86     00 00 00 00 
0ca8a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0ca8e     1E 36 66 66 
0ca92     66 66 3E 00 
0ca96     00 00 00 00 
0ca9a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca9e     3E 63 03 03 
0caa2     03 63 3E 00 
0caa6     00 00 00 00 
0caaa     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
0caae     3C 36 33 33 
0cab2     33 33 6E 00 
0cab6     00 00 00 00 
0caba     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cabe     3E 63 7F 03 
0cac2     03 63 3E 00 
0cac6     00 00 00 00 
0caca     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
0cace     0C 1E 0C 0C 
0cad2     0C 0C 1E 00 
0cad6     00 00 00 00 
0cada     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cade     6E 33 33 33 
0cae2     33 33 3E 30 
0cae6     33 1E 00 00 
0caea     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
0caee     36 6E 66 66 
0caf2     66 66 67 00 
0caf6     00 00 00 00 
0cafa     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
0cafe     1C 18 18 18 
0cb02     18 18 3C 00 
0cb06     00 00 00 00 
0cb0a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
0cb0e     70 60 60 60 
0cb12     60 60 60 66 
0cb16     66 3C 00 00 
0cb1a     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
0cb1e     66 36 1E 1E 
0cb22     36 66 67 00 
0cb26     00 00 00 00 
0cb2a     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
0cb2e     18 18 18 18 
0cb32     18 18       | 	byte	$18[6]
0cb34     3C 00 00 00 
0cb38     00 00 00 00 
0cb3c     00 00 37 7F 
0cb40     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
0cb44     63 00 00 00 
0cb48     00 00 00 00 
0cb4c     00 00 3B 66 
0cb50     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0cb54     66 00 00 00 
0cb58     00 00 00 00 
0cb5c     00 00 3E 63 
0cb60     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
0cb64     3E 00 00 00 
0cb68     00 00 00 00 
0cb6c     00 00 3B 66 
0cb70     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0cb74     3E 06 06 0F 
0cb78     00 00 00 00 
0cb7c     00 00 6E 33 
0cb80     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
0cb84     3E 30 30 78 
0cb88     00 00 00 00 
0cb8c     00 00 3B 6E 
0cb90     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
0cb94     0F 00 00 00 
0cb98     00 00 00 00 
0cb9c     00 00 3E 63 
0cba0     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
0cba4     3E 00 00 00 
0cba8     00 00 00 08 
0cbac     0C 0C 3F 0C 
0cbb0     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0cbb4     38 00 00 00 
0cbb8     00 00 00 00 
0cbbc     00 00 33 33 
0cbc0     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
0cbc4     6E 00 00 00 
0cbc8     00 00 00 00 
0cbcc     00 00 63 63 
0cbd0     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
0cbd4     1C 00 00 00 
0cbd8     00 00 00 00 
0cbdc     00 00 63 63 
0cbe0     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
0cbe4     36 00 00 00 
0cbe8     00 00 00 00 
0cbec     00 00 63 36 
0cbf0     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
0cbf4     63 00 00 00 
0cbf8     00 00 00 00 
0cbfc     00 00 63 63 
0cc00     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
0cc04     7E 60 30 1F 
0cc08     00 00 00 00 
0cc0c     00 00 7F 33 
0cc10     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
0cc14     7F 00 00 00 
0cc18     00 00 00 70 
0cc1c     18 18 18 0E 
0cc20     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
0cc24     70 00 00 00 
0cc28     00 00 00 18 
0cc2c     18 18 18 18 
0cc30     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
0cc34     18 00 00 00 
0cc38     00 00 00 0E 
0cc3c     18 18 18 70 
0cc40     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
0cc44     0E 00 00 00 
0cc48     6E 3B 00 00 
0cc4c     00 00 00 00 
0cc50     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc54     00 00 00 00 
0cc58     00 00 00 00 
0cc5c     00 00       | 	byte	$00[10]
0cc5e     08 1C 36 63 
0cc62     63 63 7F 00 
0cc66     00 00 00 00 
0cc6a     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
0cc6e     03 03 03 03 
0cc72     43 66 3C 18 
0cc76     30 1E 00 00 
0cc7a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
0cc7e     33 33 33 33 
0cc82     33 33       | 	byte	$33[6]
0cc84     6E 00 00 00 
0cc88     00 00 60 30 
0cc8c     18 00 3E 63 
0cc90     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
0cc94     3E 00 00 00 
0cc98     00 00 08 1C 
0cc9c     36 00 1E 30 
0cca0     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
0cca4     6E 00 00 00 
0cca8     00 00 00 00 
0ccac     33 00 1E 30 
0ccb0     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
0ccb4     6E 00 00 00 
0ccb8     00 00 1C 36 
0ccbc     1C 00 33 33 
0ccc0     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
0ccc4     6E 00 00 00 
0ccc8     00 00 60 30 
0cccc     18 00 3E 63 
0ccd0     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
0ccd4     3E 00 00 00 
0ccd8     00 00 00 00 
0ccdc     00 00 3E 63 
0cce0     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
0cce4     3E 18 30 1E 
0cce8     00 00 00 1C 
0ccec     58 78 38 18 
0ccf0     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
0ccf4     3C 00 00 00 
0ccf8     00 00 00 00 
0ccfc     63 00 3E 63 
0cd00     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
0cd04     3E 00 00 00 
0cd08     66 33 00 3E 
0cd0c     63 63 63 63 
0cd10     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0cd14     3E 00 00 00 
0cd18     00 00 CC 66 
0cd1c     33 00 3E 63 
0cd20     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
0cd24     3E 00 00 00 
0cd28     00 00 18 3C 
0cd2c     66 00 1C 18 
0cd30     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
0cd34     3C 00 00 00 
0cd38     30 18 00 7F 
0cd3c     63 61 30 18 
0cd40     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0cd44     7F 00 00 00 
0cd48     00 63 00 08 
0cd4c     1C 36 63 63 
0cd50     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
0cd54     63 00 00 00 
0cd58     30 18 00 3C 
0cd5c     66 43 03 03 
0cd60     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
0cd64     3C 00 00 00 
0cd68     30 18 00 7F 
0cd6c     66 46 16 1E 
0cd70     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
0cd74     7F 00 00 00 
0cd78     0C 06 00 0F 
0cd7c     06 06 06 06 
0cd80     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0cd84     7F 00 00 00 
0cd88     30 18 00 1C 
0cd8c     18 18 18 18 
0cd90     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
0cd94     3C 00 00 00 
0cd98     00 00 08 1C 
0cd9c     36 00 3E 63 
0cda0     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
0cda4     3E 00 00 00 
0cda8     00 00 00 00 
0cdac     63 00 3E 63 
0cdb0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
0cdb4     3E 00 00 00 
0cdb8     00 00 00 6F 
0cdbc     46 26 06 06 
0cdc0     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
0cdc4     7F 00 00 00 
0cdc8     00 00 00 6E 
0cdcc     4C 2C 0C 0C 
0cdd0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
0cdd4     1E 00 00 00 
0cdd8     30 18 00 3E 
0cddc     63 63 06 1C 
0cde0     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0cde4     3E 00 00 00 
0cde8     00 00 60 30 
0cdec     18 00 3E 63 
0cdf0     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
0cdf4     3E 00 00 00 
0cdf8     00 63 00 3E 
0cdfc     63 63 63 63 
0ce00     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0ce04     3E 00 00 00 
0ce08     00 63 00 63 
0ce0c     63 63 63 63 
0ce10     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0ce14     3E 00 00 00 
0ce18     6C 38 00 7E 
0ce1c     7E 5A 18 18 
0ce20     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0ce24     3C 00 00 00 
0ce28     00 00 60 48 
0ce2c     2C 0C 3F 0C 
0ce30     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0ce34     38 00 00 00 
0ce38     00 00 00 0F 
0ce3c     26 36 1E 0E 
0ce40     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
0ce44     7F 00 00 00 
0ce48     00 00 00 00 
0ce4c     00 63 36 1C 
0ce50     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
0ce54     00 00 00 00 
0ce58     00 00       | 	byte	$00[6]
0ce5a     36 1C 08 00 
0ce5e     3E 63 03 03 
0ce62     03 63 3E 00 
0ce66     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0ce6a     30 18 0C 00 
0ce6e     1E 30 3E 33 
0ce72     33 33 6E 00 
0ce76     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0ce7a     60 30 18 00 
0ce7e     1C 18 18 18 
0ce82     18 18 3C 00 
0ce86     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0ce8a     60 30 18 00 
0ce8e     3E 63 63 63 
0ce92     63 63 3E 00 
0ce96     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0ce9a     30 18 0C 00 
0ce9e     33 33 33 33 
0cea2     33 33 6E 00 
0cea6     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0ceaa     00 08 1C 36 
0ceae     63 63 7F 63 
0ceb2     63 63 63 18 
0ceb6     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0ceba     00 00 00 00 
0cebe     1E 30 3E 33 
0cec2     33 33 6E 18 
0cec6     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0ceca     00 7F 63 61 
0cece     30 18 0C 06 
0ced2     43 63 7F 00 
0ced6     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0ceda     36 1C 08 00 
0cede     7F 33 18 0C 
0cee2     06 63 7F 00 
0cee6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
0ceea     00 7F 66 46 
0ceee     16 1E 16 06 
0cef2     46 66 7F 18 
0cef6     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0cefa     00 00 00 00 
0cefe     3E 63 7F 03 
0cf02     03 63 3E 18 
0cf06     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0cf0a     00 3C 66 03 
0cf0e     1F 03 0F 03 
0cf12     03 66 3C 00 
0cf16     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0cf1a     60 30 18 00 
0cf1e     7F 33 18 0C 
0cf22     06 63 7F 00 
0cf26     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0cf2a     00 3C 66 43 
0cf2e     03 03 03 03 
0cf32     43 66 3C 00 
0cf36     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0cf3a     00 00 00 00 
0cf3e     3E 63 06 1C 
0cf42     30 63 3E 18 
0cf46     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0cf4a     00 00 00 00 
0cf4e     00 00       | 	byte	$00[6]
0cf50     6C 36 1B 36 
0cf54     6C 00 00 00 
0cf58     00 00 00 00 
0cf5c     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf60     1B 36 6C 36 
0cf64     1B 00 00 00 
0cf68     88 22 88 22 
0cf6c     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
0cf70     88 22 88 22 
0cf74     88 22 88 22 
0cf78     AA 55 AA 55 
0cf7c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
0cf80     AA 55 AA 55 
0cf84     AA 55 AA 55 
0cf88     BB EE BB EE 
0cf8c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
0cf90     BB EE BB EE 
0cf94     BB EE BB EE 
0cf98     18 18 18 18 
0cf9c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
0cfa0     18 18 18 18 
0cfa4     18 18 18 18 
0cfa8     18 18 18 18 
0cfac     18 18 18    | 	byte	$18[15]
0cfaf     1F 18 18 18 
0cfb3     18 18 18 18 
0cfb7     18 30 18 00 
0cfbb     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0cfbf     63 7F 63 63 
0cfc3     63 63 00 00 
0cfc7     00 1C 36 00 
0cfcb     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
0cfcf     63 7F 63 63 
0cfd3     63 63 00 00 
0cfd7     00 36 1C 00 
0cfdb     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0cfdf     1E 16 06 46 
0cfe3     66 7F 00 00 
0cfe7     00 00 00 00 
0cfeb     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
0cfef     1C 30 60 63 
0cff3     63 3E 18 30 
0cff7     1E 6C 6C 6C 
0cffb     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
0cfff     6F 6C 6C 6C 
0d003     6C 6C 6C 6C 
0d007     6C 6C 6C 6C 
0d00b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0d00f     6C 6C 6C 6C 
0d013     6C 6C 6C 6C 
0d017     6C          | 	byte	$6c[9]
0d018     00 00 00 00 
0d01c     00          | 	byte	$00[5]
0d01d     7F 60 6F 6C 
0d021     6C 6C 6C 6C 
0d025     6C 6C 6C 6C 
0d029     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0d02d     6F 60 7F 00 
0d031     00 00 00 00 
0d035     00 00 00 18 
0d039     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
0d03d     61 30 18 0C 
0d041     06 43 63 7F 
0d045     00 00 00 00 
0d049     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
0d04d     00 7F 33 18 
0d051     0C 06 63 7F 
0d055     00 00 00 00 
0d059     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
0d05d     00 00 1F 18 
0d061     18 18 18 18 
0d065     18 18 18 18 
0d069     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0d06d     18 18 F8 00 
0d071     00 00 00 00 
0d075     00 00 00 18 
0d079     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0d07d     18 18 FF 00 
0d081     00 00 00 00 
0d085     00 00 00 00 
0d089     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d08d     00 00 FF 18 
0d091     18 18 18 18 
0d095     18 18 18 18 
0d099     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0d09d     18 18 F8 18 
0d0a1     18 18 18 18 
0d0a5     18 18 18 00 
0d0a9     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0d0ad     00 00 FF 00 
0d0b1     00 00 00 00 
0d0b5     00 00 00 18 
0d0b9     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0d0bd     18 18 FF 18 
0d0c1     18 18 18 18 
0d0c5     18 18 18 63 
0d0c9     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
0d0cd     36 63 63 7F 
0d0d1     63 63 63 63 
0d0d5     00 00 00 00 
0d0d9     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0d0dd     00 1E 30 3E 
0d0e1     33 33 33 6E 
0d0e5     00 00 00 6C 
0d0e9     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0d0ed     EC 0C FC 00 
0d0f1     00 00 00 00 
0d0f5     00 00 00 00 
0d0f9     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0fd     FC 0C EC 6C 
0d101     6C 6C 6C 6C 
0d105     6C 6C 6C 6C 
0d109     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0d10d     EF 00 FF 00 
0d111     00 00 00 00 
0d115     00 00 00 00 
0d119     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d11d     FF 00 EF 6C 
0d121     6C 6C 6C 6C 
0d125     6C 6C 6C 6C 
0d129     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0d12d     EC 0C EC 6C 
0d131     6C 6C 6C 6C 
0d135     6C 6C 6C 00 
0d139     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0d13d     FF 00 FF 00 
0d141     00 00 00 00 
0d145     00 00 00 6C 
0d149     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0d14d     EF 00 EF 6C 
0d151     6C 6C 6C 6C 
0d155     6C 6C 6C 00 
0d159     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0d15d     63 3E 63 63 
0d161     63 63 3E 63 
0d165     00 00 00 00 
0d169     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
0d16d     30 3C 36 33 
0d171     33 33 33 6E 
0d175     00 00 00 00 
0d179     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
0d17d     66 66 6F 66 
0d181     66 66 36 1F 
0d185     00 00 00 36 
0d189     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
0d18d     66 66 66 66 
0d191     66 66       | 	byte	$66[6]
0d193     36 1F 00 00 
0d197     00 00 63 00 
0d19b     7F 66 46 16 
0d19f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0d1a3     66 7F 00 00 
0d1a7     00 6C 38 00 
0d1ab     38 30 30 3C 
0d1af     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
0d1b3     33 6E 00 00 
0d1b7     00 36 1C 00 
0d1bb     63 67 6F 7F 
0d1bf     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
0d1c3     63 63 00 00 
0d1c7     00 30 18 00 
0d1cb     3C 18 18 18 
0d1cf     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
0d1d3     18 3C 00 00 
0d1d7     00 3C 66 00 
0d1db     3C 18 18 18 
0d1df     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
0d1e3     18 3C 00 00 
0d1e7     00 00 00 36 
0d1eb     1C 08 00 3E 
0d1ef     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
0d1f3     63 3E 00 00 
0d1f7     00 18 18 18 
0d1fb     18 18 18 18 
0d1ff     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
0d203     00 00 00 00 
0d207     00 00 00 00 
0d20b     00 00 00 00 | 	byte	$00[12]
0d20f     F8 18 18 18 
0d213     18 18 18 18 
0d217     18 FF FF FF 
0d21b     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0d21f     FF FF FF FF 
0d223     FF FF FF FF 
0d227     FF          | 	byte	$ff[9]
0d228     00 00 00 00 
0d22c     00 00 00    | 	byte	$00[7]
0d22f     FF FF FF FF 
0d233     FF FF FF FF 
0d237     FF          | 	byte	$ff[9]
0d238     00 00 00 7E 
0d23c     7E 5A 18 18 
0d240     18 18 18 18 
0d244     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0d248     1C 36 1C 63 
0d24c     63 63 63 63 
0d250     63 63 63 63 
0d254     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0d258     FF FF FF FF 
0d25c     FF FF FF    | 	byte	$ff[7]
0d25f     00 00 00 00 
0d263     00 00 00 00 
0d267     00          | 	byte	$00[9]
0d268     30 18 00 3E 
0d26c     63 63 63 63 
0d270     63 63 63 63 
0d274     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0d278     00 00 00 1E 
0d27c     33 33 33 1B 
0d280     33 63 63 63 
0d284     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
0d288     1C 36 00 3E 
0d28c     63 63 63 63 
0d290     63 63 63 63 
0d294     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0d298     30 18 00 63 
0d29c     67 6F 7F 7B 
0d2a0     73 63 63 63 
0d2a4     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
0d2a8     00 00 60 30 
0d2ac     18 00 3B 66 
0d2b0     66 66 66 66 
0d2b4     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0d2b8     00 00 36 1C 
0d2bc     08 00 3B 66 
0d2c0     66 66 66 66 
0d2c4     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0d2c8     36 1C 00 3E 
0d2cc     63 63 06 1C 
0d2d0     30 60 63 63 
0d2d4     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
0d2d8     00 00 36 1C 
0d2dc     08 00 3E 63 
0d2e0     06 1C 30 63 
0d2e4     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
0d2e8     30 18 00 3F 
0d2ec     66 66 66 3E 
0d2f0     36 66 66 66 
0d2f4     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
0d2f8     30 18 00 63 
0d2fc     63 63 63 63 
0d300     63 63 63 63 
0d304     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0d308     00 00 60 30 
0d30c     18 00 3B 6E 
0d310     66 06 06 06 
0d314     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
0d318     66 33 00 63 
0d31c     63 63 63 63 
0d320     63 63 63 63 
0d324     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0d328     00 00 60 30 
0d32c     18 00 63 63 
0d330     63 63 63 63 
0d334     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
0d338     30 18 00 66 
0d33c     66 66 66 3C 
0d340     18 18 18 18 
0d344     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
0d348     00 00 00 08 
0d34c     0C 0C 3F 0C 
0d350     0C 0C 0C 6C 
0d354     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
0d358     30 18 00 00 
0d35c     00 00 00 00 
0d360     00 00 00 00 
0d364     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d368     00 00 00 00 
0d36c     00 00 00 00 | 	byte	$00[8]
0d370     7F 00 00 00 
0d374     00 00 00 00 
0d378     66 33 00 00 
0d37c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
0d380     00 00 00 00 
0d384     00 00 00 00 
0d388     00 00 00 00 
0d38c     00 00 00 00 
0d390     00 00 00 00 
0d394     00          | 	byte	$00[21]
0d395     0C 06 3C 36 
0d399     1C 00 00 00 
0d39d     00 00 00 00 
0d3a1     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3a5     00 00 00 63 
0d3a9     3E 00 00 00 
0d3ad     00 00 00 00 
0d3b1     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3b5     00 00 00 00 
0d3b9     3E 63 06 1C 
0d3bd     36 63 63 36 
0d3c1     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
0d3c5     00 00 00 00 
0d3c9     00 00 00 00 | 	byte	$00[8]
0d3cd     18 00 7E 00 
0d3d1     18 00 00 00 
0d3d5     00 00 00 00 
0d3d9     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3dd     00 00 00 00 
0d3e1     00 00 00 00 | 	byte	$00[8]
0d3e5     18 30 1E 00 
0d3e9     00 00 1C 36 
0d3ed     36 1C 00 00 
0d3f1     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
0d3f5     00 00 00 00 
0d3f9     63 00 00 00 
0d3fd     00 00 00 00 
0d401     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d405     00 00 00 18 
0d409     18 00 00 00 
0d40d     00 00 00 00 
0d411     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d415     00 00 00 00 
0d419     00          | 	byte	$00[5]
0d41a     CC 66 33 00 
0d41e     33 33 33 33 
0d422     33 33 6E 00 
0d426     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
0d42a     00 3F 66 66 
0d42e     66 3E 36 66 
0d432     66 66 6F 00 
0d436     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
0d43a     36 1C 08 00 
0d43e     3B 6E 66 06 
0d442     06 06 0F 00 
0d446     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0d44a     00 00 00 7E 
0d44e     7E 7E 7E 7E 
0d452     7E 7E 00 00 
0d456     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0d45a     00 00 00 00 
0d45e     00 00 00 00 
0d462     00 00 00 00 
0d466     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d468     00 00 00 00 
      ...             
0d498     00 00 00 00 
0d49c     00 00 00    | st_font        file "st4font.def"
0d49f     FF FF 00 00 
0d4a3     00 00 00 00 
0d4a7     00 18 18 18 
0d4ab     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0d4af     18 18 18 18 
0d4b3     18 18 18 18 
0d4b7     18          | 	byte	$18[9]
0d4b8     00 00 00 00 
0d4bc     00 00 00    | 	byte	$00[7]
0d4bf     FF FF 18 18 
0d4c3     18 18 18 18 
0d4c7     18 18 18 18 
0d4cb     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0d4cf     FF FF 00 00 
0d4d3     00 00 00 00 
0d4d7     00 18 18 18 
0d4db     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0d4df     1F 1F 18 18 
0d4e3     18 18 18 18 
0d4e7     18 18 18 18 
0d4eb     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0d4ef     F8 F8 18 18 
0d4f3     18 18 18 18 
0d4f7     18 00 00 00 
0d4fb     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0d4ff     1F 1F 18 18 
0d503     18 18 18 18 
0d507     18 00 00 00 
0d50b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0d50f     F8 F8 18 18 
0d513     18 18 18 18 
0d517     18 18 18 18 
0d51b     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0d51f     1F 1F 00 00 
0d523     00 00 00 00 
0d527     00 18 18 18 
0d52b     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0d52f     F8 F8 00 00 
0d533     00 00 00 00 
0d537     00 18 18 18 
0d53b     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0d53f     FF FF 18 18 
0d543     18 18 18 18 
0d547     18 00 00 18 
0d54b     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
0d54f     66 7E 7E 66 
0d553     66 66 66 30 
0d557     18 00 00 7E 
0d55b     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
0d55f     3E 06 06 06 
0d563     06 7E 7E 18 
0d567     0C 30 18 3C 
0d56b     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
0d56f     06 06 06 66 
0d573     66 7E 3C 00 
0d577     00 30 18 66 
0d57b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
0d57f     7E 7E 76 76 
0d583     66 66 66 00 
0d587     00 30 18 7C 
0d58b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
0d58f     1C 38 70 60 
0d593     60 7E 3E 00 
0d597     00 30 18 7E 
0d59b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
0d59f     18 0C 0C 06 
0d5a3     06 7E 7E 00 
0d5a7     00 18 18 00 
0d5ab     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
0d5af     18 18 0C 0C 
0d5b3     06 7E 7E 00 
0d5b7     00 30 18 3C 
0d5bb     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
0d5bf     66 66 66 66 
0d5c3     66          | 	byte	$66[5]
0d5c4     7E 3C 00 00 
0d5c8     00 00 06 06 
0d5cc     06 06 16 1E 
0d5d0     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
0d5d4     7E 7E 00 00 
0d5d8     00 00 00 00 
0d5dc     00 3C 7C 60 
0d5e0     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
0d5e4     7E 7C 30 18 
0d5e8     00 00 00 00 
0d5ec     00 3C 7E 66 
0d5f0     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
0d5f4     7E 7C 18 0C 
0d5f8     00 00 30 18 
0d5fc     00 3C 3E 06 
0d600     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
0d604     7E 7C 00 00 
0d608     00 00 30 18 
0d60c     00 3E 7E 66 
0d610     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
0d614     66 66 00 00 
0d618     00 00 30 18 
0d61c     00 7C 7E 06 
0d620     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
0d624     7E 3E 00 00 
0d628     00 00 30 18 
0d62c     00 7E 7E 30 
0d630     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0d634     7E 7E 00 00 
0d638     00 00 18 18 
0d63c     00 7E 7E 30 
0d640     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0d644     7E 7E 00 00 
0d648     00 00 30 18 
0d64c     00 3C 7E 66 
0d650     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
0d654     7E 3C 00 00 
0d658     00 00 1C 1C 
0d65c     18 18 38 3C 
0d660     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
0d664     3C 3C 00 00 
0d668     00 00 00 00 
0d66c     00 00 00 00 
0d670     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d674     00 00 00 00 
0d678     00 00       | 	byte	$00[6]
0d67a     18 18 18 18 
0d67e     18 18 18 18 | 	byte	$18[8]
0d682     00 00 18 18 
0d686     00 00 00 00 
0d68a     66 66 66 66 
0d68e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
0d692     00 00 00 00 
0d696     00 00 00 00 
0d69a     00          | 	byte	$00[9]
0d69b     66 66 FF FF 
0d69f     66 66 FF FF 
0d6a3     66 66 00 00 
0d6a7     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
0d6ab     7C 7E 06 06 
0d6af     3E 7C 60 60 
0d6b3     7E 3E 18 18 
0d6b7     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
0d6bb     66 30 30 18 
0d6bf     18 0C 0C 66 
0d6c3     66 00 00 00 
0d6c7     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
0d6cb     66 66 3C 1C 
0d6cf     1C FC FE 66 
0d6d3     66 FE FC 00 
0d6d7     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
0d6db     18 18 18 18 
0d6df     00 00 00 00 
0d6e3     00 00 00 00 
0d6e7     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
0d6eb     18 1C 0C 0C 
0d6ef     0C 0C 0C 0C 
0d6f3     1C 18 30 00 
0d6f7     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
0d6fb     18 38 30 30 
0d6ff     30 30 30 30 
0d703     38 18 0C 00 
0d707     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
0d70b     66 66 3C 3C 
0d70f     FF FF 3C 3C 
0d713     66 66 00 00 
0d717     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
0d71b     00 18 18 18 
0d71f     7E 7E 18 18 
0d723     18 00 00 00 
0d727     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0d72b     00 00 00 00 
0d72f     00 00       | 	byte	$00[6]
0d731     18 18 18 18 
0d735     18          | 	byte	$18[5]
0d736     0C 04 00 00 
0d73a     00 00 00 00 
0d73e     7E 7E 00 00 
0d742     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
0d746     00 00 00 00 
0d74a     00 00 00 00 
0d74e     00 00 00 00 
0d752     00          | 	byte	$00[13]
0d753     18 18 18 00 
0d757     00 00 00 60 
0d75b     60 60 30 30 
0d75f     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
0d763     06 06 06 00 
0d767     00 00 00 3C 
0d76b     7E 66 66 66 
0d76f     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
0d773     66 7E 3C 00 
0d777     00 00 00 18 
0d77b     18 1C 1C 18 
0d77f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
0d783     18 7E 7E 00 
0d787     00 00 00 3C 
0d78b     7E 66 66 30 
0d78f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
0d793     0C 7E 7E 00 
0d797     00 00 00 7E 
0d79b     7E 30 30 18 
0d79f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
0d7a3     66 7E 3C 00 
0d7a7     00 00 00 30 
0d7ab     30 38 38 3C 
0d7af     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
0d7b3     7E 30 30 00 
0d7b7     00 00 00 7E 
0d7bb     7E 06 06 3E 
0d7bf     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
0d7c3     66 7E 3C 00 
0d7c7     00 00 00 38 
0d7cb     3C 0E 06 06 
0d7cf     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
0d7d3     66 7E 3C 00 
0d7d7     00 00 00 7E 
0d7db     7E 60 60 30 
0d7df     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
0d7e3     0C 0C 0C 00 
0d7e7     00 00 00 3C 
0d7eb     7E 66 66 3C 
0d7ef     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
0d7f3     66 7E 3C 00 
0d7f7     00 00 00 3C 
0d7fb     7E 66 66 7E 
0d7ff     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
0d803     70 3C 1C 00 
0d807     00 00 00 00 
0d80b     00 00 18 18 
0d80f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
0d813     18 18 18 00 
0d817     00 00 00 00 
0d81b     00 00 18 18 
0d81f     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
0d823     18 18 18 0C 
0d827     04 00 00 00 
0d82b     70 38 1C 0E 
0d82f     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
0d833     70 00 00 00 
0d837     00 00 00 00 
0d83b     00 00 7E 7E 
0d83f     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
0d843     00 00 00 00 
0d847     00 00 00 00 | 	byte	$00[8]
0d84b     0E 1C 38 70 
0d84f     E0 70 38 1C 
0d853     0E 00 00 00 
0d857     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
0d85b     7E 66 66 30 
0d85f     30 18 18 18 
0d863     00 18 18 00 
0d867     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
0d86b     7E 66 66 66 
0d86f     66 36 06 66 
0d873     66 7E 3C 00 
0d877     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
0d87b     3C 7E 66 66 
0d87f     66 7E 7E 66 
0d883     66 66 66 00 
0d887     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
0d88b     7E 66 66 7E 
0d88f     3E 66 66 66 
0d893     66 7E 3E 00 
0d897     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
0d89b     7E 66 66 06 
0d89f     06 06 06 66 
0d8a3     66 7E 3C 00 
0d8a7     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
0d8ab     7E 66 66 66 
0d8af     66 66 66 66 
0d8b3     66 7E 3E 00 
0d8b7     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
0d8bb     7E 06 06 3E 
0d8bf     3E 06 06 06 
0d8c3     06 7E 7E 00 
0d8c7     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
0d8cb     7E 06 06 3E 
0d8cf     3E 06 06 06 
0d8d3     06 06 06 00 
0d8d7     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
0d8db     7E 06 06 76 
0d8df     76 66 66 66 
0d8e3     66 7E 3C 00 
0d8e7     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
0d8eb     66 66 66 7E 
0d8ef     7E 66 66 66 
0d8f3     66 66 66 00 
0d8f7     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
0d8fb     7E 18 18 18 
0d8ff     18 18 18 18 
0d903     18 7E 7E 00 
0d907     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0d90b     60 60 60 60 
0d90f     60 60 60    | 	byte	$60[7]
0d912     66 66 7E 3C 
0d916     00 00 00 00 
0d91a     66 66 36 36 
0d91e     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
0d922     66 66 C6 C6 
0d926     00 00 00 00 
0d92a     06 06 06 06 
0d92e     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0d932     06 06 7E 7E 
0d936     00 00 00 00 
0d93a     C6 C6 EE EE 
0d93e     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0d942     C6 C6 C6 C6 
0d946     00 00 00 00 
0d94a     66 66 66 6E 
0d94e     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0d952     76 66 66 66 
0d956     00 00 00 00 
0d95a     3C 7E 66 66 
0d95e     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0d962     66 66 7E 3C 
0d966     00 00 00 00 
0d96a     3E 7E 66 66 
0d96e     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0d972     06 06 06 06 
0d976     00 00 00 00 
0d97a     3C 7E 66 66 
0d97e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0d982     66 56 3E 6C 
0d986     00 00 00 00 
0d98a     3E 7E 66 66 
0d98e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0d992     66 66 C6 C6 
0d996     00 00 00 00 
0d99a     7C 7E 06 06 
0d99e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0d9a2     60 60 7E 3E 
0d9a6     00 00 00 00 
0d9aa     7E 7E 18 18 
0d9ae     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
0d9b2     18 18 18 18 
0d9b6     00 00 00 00 
0d9ba     66 66 66 66 
0d9be     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0d9c2     66 66 7E 3C 
0d9c6     00 00 00 00 
0d9ca     66 66 66 66 
0d9ce     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0d9d2     3C 3C 18 18 
0d9d6     00 00 00 00 
0d9da     C6 C6 C6 C6 
0d9de     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
0d9e2     FE EE C6 82 
0d9e6     00 00 00 00 
0d9ea     66 66 66 3C 
0d9ee     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
0d9f2     3C 66 66 66 
0d9f6     00 00 00 00 
0d9fa     66 66 66 66 
0d9fe     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
0da02     18 18 18 18 
0da06     00 00 00 00 
0da0a     7E 7E 30 30 
0da0e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
0da12     06 06 7E 7E 
0da16     00 00 00 00 
0da1a     3C 3C 0C 0C 
0da1e     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
0da22     0C 0C 3C 3C 
0da26     00 00 00 00 
0da2a     06 06 0C 0C 
0da2e     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0da32     60 60 C0 C0 
0da36     00 00 00 00 
0da3a     3C 3C 30 30 
0da3e     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0da42     30 30 3C 3C 
0da46     00 00 00 00 
0da4a     18 18 3C 3C 
0da4e     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0da52     00 00 00 00 
0da56     00 00 00 00 
0da5a     00 00 00 00 
0da5e     00 00 00 00 
0da62     00 00       | 	byte	$00[18]
0da64     FE FE 00 00 
0da68     00 00 0C 0C 
0da6c     18 18 00 00 
0da70     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
0da74     00 00 00 00 
0da78     00 00 00 00 
0da7c     00          | 	byte	$00[9]
0da7d     3C 7C 60 7C 
0da81     7E 66 66 7E 
0da85     7C 00 00 00 
0da89     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
0da8d     3E 7E 66 66 
0da91     66 66 66 7E 
0da95     3E 00 00 00 
0da99     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
0da9d     3C 3E 06 06 
0daa1     06 06 06 7E 
0daa5     7C 00 00 00 
0daa9     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
0daad     7C 7E 66 66 
0dab1     66 66 66 7E 
0dab5     7C 00 00 00 
0dab9     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
0dabd     3C 7E 66 66 
0dac1     7E 06 06 7E 
0dac5     7C 00 00 00 
0dac9     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
0dacd     18 7E 7E 18 
0dad1     18 18 18 18 
0dad5     18 00 00 00 
0dad9     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0dadd     7C 7E 66 66 
0dae1     66 66 7E 7C 
0dae5     60 7E 3E 00 
0dae9     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
0daed     3E 7E 66 66 
0daf1     66 66 66 66 
0daf5     66 00 00 00 
0daf9     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
0dafd     1C 1C 18 18 
0db01     18 18 18 3C 
0db05     3C 00 00 00 
0db09     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
0db0d     30 30 30 30 
0db11     30 30 30 30 
0db15     30          | 	byte	$30[9]
0db16     3E 1E 00 00 
0db1a     06 06 06 36 
0db1e     36 1E 1E 1E 
0db22     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
0db26     00 00 00 00 
0db2a     1C 1C 18 18 
0db2e     18 18 18 18 
0db32     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0db36     00 00 00 00 
0db3a     00 00 00    | 	byte	$00[7]
0db3d     6C FE FE D6 
0db41     D6 C6 C6 C6 
0db45     C6 00 00 00 
0db49     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
0db4d     3E 7E 66 66 
0db51     66 66 66 66 
0db55     66 00 00 00 
0db59     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
0db5d     3C 7E 66 66 
0db61     66 66 66 7E 
0db65     3C 00 00 00 
0db69     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
0db6d     3E 7E 66 66 
0db71     66 66 66 7E 
0db75     3E 06 06 00 
0db79     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
0db7d     7C 7E 66 66 
0db81     66 66 66 7E 
0db85     7C 60 60 00 
0db89     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
0db8d     3E 7E 66 06 
0db91     06 06 06 06 
0db95     06 00 00 00 
0db99     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
0db9d     7C 7E 06 0E 
0dba1     3C 70 60 7E 
0dba5     3E 00 00 00 
0dba9     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
0dbad     7E 7E 18 18 
0dbb1     18 18 18 78 
0dbb5     70 00 00 00 
0dbb9     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
0dbbd     66 66 66 66 
0dbc1     66 66 66    | 	byte	$66[7]
0dbc4     7E 7C 00 00 
0dbc8     00 00 00 00 
0dbcc     00 66 66 66 
0dbd0     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
0dbd4     18 18 00 00 
0dbd8     00 00 00 00 
0dbdc     00 C6 C6 D6 
0dbe0     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
0dbe4     C6 82 00 00 
0dbe8     00 00 00 00 
0dbec     00 66 66 3C 
0dbf0     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
0dbf4     66 66 00 00 
0dbf8     00 00 00 00 
0dbfc     00 66 66 66 
0dc00     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
0dc04     7C 60 7E 3E 
0dc08     00 00 00 00 
0dc0c     00 7E 7E 30 
0dc10     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0dc14     7E 7E 00 00 
0dc18     00 00 30 18 
0dc1c     18 18 18 0C 
0dc20     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
0dc24     18 30 00 00 
0dc28     00 00 18 18 
0dc2c     18 18 18 18 
0dc30     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0dc34     18 18 00 00 
0dc38     00 00 0C 18 
0dc3c     18 18 18 30 
0dc40     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
0dc44     18 0C 00 00 
0dc48     00 00 6C 7E 
0dc4c     36 00 00 00 
0dc50     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
0dc54     00 00 00 00 
0dc58     00 00 00 00 
0dc5c     00          | 	byte	$00[9]
0dc5d     18 18 18 18 
0dc61     18 18 00 00 
0dc65     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0dc68     00 00 00 00 
0dc6c     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
0dc70     00 00 00 00 
0dc74     00 80 80 80 
0dc78     00 00 00 FF 
0dc7c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
0dc80     00 00 00 00 
0dc84     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
0dc85     80 00 00 00 
0dc89     00 80 00 00 
0dc8d     80 80 00 00 
0dc91     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
0dc95     80 00 80 00 
0dc99     00 40 80 00 
0dc9d     AA AA AA 00 
0dca1     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
0dca5     FF 00 00 00 
0dca9     00 FF 00 00 
0dcad     FF FF 00 00 
0dcb1     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
0dcb5     FF 00 FF 00 
0dcb9     00 FF FF 00 
0dcbd     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
0dcc0     00 00 00 00 
0dcc4     00          | ataripalette   file "ataripalettep2.def"
0dcc5     11 11 11 00 
0dcc9     22 22 22 00 
0dccd     33 33 33 00 
0dcd1     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
0dcd5     55 55 55 00 
0dcd9     66 66 66 00 
0dcdd     77 77 77 00 
0dce1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
0dce5     99 99 99 00 
0dce9     AA AA AA 00 
0dced     BB BB BB 00 
0dcf1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
0dcf5     DD DD DD 00 
0dcf9     EE EE EE 00 
0dcfd     FF FF FF 00 
0dd01     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
0dd05     00 14 40 00 
0dd09     00 1E 60 00 
0dd0d     00 28 80 00 
0dd11     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
0dd15     00 3C BF 00 
0dd19     00 46 DF 00 
0dd1d     00 50 FF 00 
0dd21     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
0dd25     39 77 FF 00 
0dd29     55 8A FF 00 
0dd2d     71 9E FF 00 
0dd31     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
0dd35     AA C5 FF 00 
0dd39     C6 D8 FF 00 
0dd3d     E3 EC FF 00 
0dd41     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
0dd45     00 00 40 00 
0dd49     00 00 60 00 
0dd4d     00 00 80 00 
0dd51     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
0dd55     00 00 BF 00 
0dd59     00 00 DF 00 
0dd5d     00 00 FF 00 
0dd61     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
0dd65     39 39 FF 00 
0dd69     55 55 FF 00 
0dd6d     71 71 FF 00 
0dd71     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
0dd75     AA AA FF 00 
0dd79     C6 C6 FF 00 
0dd7d     E3 E3 FF 00 
0dd81     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
0dd85     20 00 40 00 
0dd89     30 00 60 00 
0dd8d     40 00 80 00 
0dd91     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
0dd95     60 00 BF 00 
0dd99     70 00 DF 00 
0dd9d     80 00 FF 00 
0dda1     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
0dda5     9C 39 FF 00 
0dda9     AA 55 FF 00 
0ddad     B8 71 FF 00 
0ddb1     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
0ddb5     D5 AA FF 00 
0ddb9     E3 C6 FF 00 
0ddbd     F1 E3 FF 00 
0ddc1     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
0ddc5     40 00 40 00 
0ddc9     60 00 60 00 
0ddcd     80 00 80 00 
0ddd1     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
0ddd5     BF 00 BF 00 
0ddd9     DF 00 DF 00 
0dddd     FF 00 FF 00 
0dde1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
0dde5     FF 39 FF 00 
0dde9     FF 55 FF 00 
0dded     FF 71 FF 00 
0ddf1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
0ddf5     FF AA FF 00 
0ddf9     FF C6 FF 00 
0ddfd     FF E3 FF 00 
0de01     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
0de05     40 00 20 00 
0de09     60 00 30 00 
0de0d     80 00 40 00 
0de11     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
0de15     BF 00 60 00 
0de19     DF 00 70 00 
0de1d     FF 00 80 00 
0de21     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
0de25     FF 39 9C 00 
0de29     FF 55 AA 00 
0de2d     FF 71 B8 00 
0de31     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
0de35     FF AA D5 00 
0de39     FF C6 E3 00 
0de3d     FF E3 F1 00 
0de41     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
0de45     40 00 00 00 
0de49     60 00 00 00 
0de4d     80 00 00 00 
0de51     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
0de55     BF 00 00 00 
0de59     DF 00 00 00 
0de5d     FF 00 00 00 
0de61     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
0de65     FF 39 39 00 
0de69     FF 55 55 00 
0de6d     FF 71 71 00 
0de71     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
0de75     FF AA AA 00 
0de79     FF C6 C6 00 
0de7d     FF E3 E3 00 
0de81     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
0de85     40 10 00 00 
0de89     60 18 00 00 
0de8d     80 20 00 00 
0de91     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
0de95     BF 30 00 00 
0de99     DF 38 00 00 
0de9d     FF 40 00 00 
0dea1     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
0dea5     FF 6A 39 00 
0dea9     FF 80 55 00 
0dead     FF 95 71 00 
0deb1     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
0deb5     FF BF AA 00 
0deb9     FF D5 C6 00 
0debd     FF EA E3 00 
0dec1     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
0dec5     40 20 00 00 
0dec9     60 30 00 00 
0decd     80 40 00 00 
0ded1     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
0ded5     BF 60 00 00 
0ded9     DF 70 00 00 
0dedd     FF 80 00 00 
0dee1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
0dee5     FF 9C 39 00 
0dee9     FF AA 55 00 
0deed     FF B8 71 00 
0def1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
0def5     FF D5 AA 00 
0def9     FF E3 C6 00 
0defd     FF F1 E3 00 
0df01     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
0df05     40 30 00 00 
0df09     60 48 00 00 
0df0d     80 60 00 00 
0df11     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
0df15     BF 90 00 00 
0df19     DF A8 00 00 
0df1d     FF C0 00 00 
0df21     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
0df25     FF CE 39 00 
0df29     FF D5 55 00 
0df2d     FF DC 71 00 
0df31     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
0df35     FF EA AA 00 
0df39     FF F1 C6 00 
0df3d     FF F8 E3 00 
0df41     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
0df45     30 40 00 00 
0df49     48 60 00 00 
0df4d     60 80 00 00 
0df51     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
0df55     90 BF 00 00 
0df59     A8 DF 00 00 
0df5d     C0 FF 00 00 
0df61     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
0df65     CE FF 39 00 
0df69     D5 FF 55 00 
0df6d     DC FF 71 00 
0df71     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
0df75     EA FF AA 00 
0df79     F1 FF C6 00 
0df7d     F8 FF E3 00 
0df81     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
0df85     00 40 00 00 
0df89     00 60 00 00 
0df8d     00 80 00 00 
0df91     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
0df95     00 BF 00 00 
0df99     00 DF 00 00 
0df9d     00 FF 00 00 
0dfa1     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
0dfa5     39 FF 39 00 
0dfa9     55 FF 55 00 
0dfad     71 FF 71 00 
0dfb1     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
0dfb5     AA FF AA 00 
0dfb9     C6 FF C6 00 
0dfbd     E3 FF E3 00 
0dfc1     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
0dfc5     00 40 14 00 
0dfc9     00 60 1E 00 
0dfcd     00 80 28 00 
0dfd1     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
0dfd5     00 BF 3C 00 
0dfd9     00 DF 46 00 
0dfdd     00 FF 50 00 
0dfe1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
0dfe5     39 FF 77 00 
0dfe9     55 FF 8A 00 
0dfed     71 FF 9E 00 
0dff1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
0dff5     AA FF C5 00 
0dff9     C6 FF D8 00 
0dffd     E3 FF EC 00 
0e001     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
0e005     00 40 28 00 
0e009     00 60 3C 00 
0e00d     00 80 50 00 
0e011     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
0e015     00 BF 78 00 
0e019     00 DF 8C 00 
0e01d     00 FF A0 00 
0e021     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
0e025     39 FF B5 00 
0e029     55 FF C0 00 
0e02d     71 FF CA 00 
0e031     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
0e035     AA FF DF 00 
0e039     C6 FF EA 00 
0e03d     E3 FF F4 00 
0e041     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
0e045     00 40 40 00 
0e049     00 60 60 00 
0e04d     00 80 80 00 
0e051     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
0e055     00 BF BF 00 
0e059     00 DF DF 00 
0e05d     00 FF FF 00 
0e061     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
0e065     39 FF FF 00 
0e069     55 FF FF 00 
0e06d     71 FF FF 00 
0e071     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
0e075     AA FF FF 00 
0e079     C6 FF FF 00 
0e07d     E3 FF FF 00 
0e081     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
0e085     00 28 40 00 
0e089     00 3C 60 00 
0e08d     00 50 80 00 
0e091     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
0e095     00 78 BF 00 
0e099     00 8C DF 00 
0e09d     00 A0 FF 00 
0e0a1     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
0e0a5     39 B5 FF 00 
0e0a9     55 C0 FF 00 
0e0ad     71 CA FF 00 
0e0b1     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
0e0b5     AA DF FF 00 
0e0b9     C6 EA FF 00 
0e0bd     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
0e0c0                 | '**********************************************************************************
0e0c0                 | '
0e0c0                 | '        Timings and colors definitions
0e0c0                 | '
0e0c0                 | '**********************************************************************************
0e0c0                 | 
0e0c0                 |    'streamer sets for text mode, to add to timings[0..5]
0e0c0                 | 
0e0c0                 | 
0e0c0                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
0e0c0     10 00 00 00 
0e0c4     50 00 00 00 
0e0c8     14 00 00 00 
0e0cc     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0e0d0     70 00 00 00 
0e0d4     08 00 00 00 
0e0d8     30 00 00 00 
0e0dc     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
0e0e0     10 00 00 00 
0e0e4     10 00 00 00 
0e0e8     00 00 00 00 
0e0ec     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
0e0f0     E0 01 00 00 
0e0f4     F6 32 24 15 
0e0f8     FB 6C C3 01 
0e0fc     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
0e100                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
0e100     12 00 00 00 
0e104     30 00 00 00 
0e108     10 00 00 00 
0e10c     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
0e110     18 00 00 00 
0e114     08 00 00 00 
0e118     18 00 00 00 
0e11c     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
0e120     20 00 00 00 
0e124     18 00 00 00 
0e128     40 00 00 00 
0e12c     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
0e130     F0 01 00 00 
0e134     00 D0 12 13 
0e138     FB 0F 00 01 
0e13c     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
0e140     10 00 00 00 
0e144     40 00 00 00 
0e148     10 00 00 00 
0e14c     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
0e150     08 00 00 00 
0e154     08 00 00 00 
0e158     08 00 00 00 
0e15c     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
0e160     40 00 00 00 
0e164     20 00 00 00 
0e168     80 00 00 00 
0e16c     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
0e170     E0 01 00 00 
0e174     70 AE E9 10 
0e178     FB 8B FF 01 
0e17c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
0e180     10 00 00 00 
0e184     50 00 00 00 
0e188     14 00 00 00 
0e18c     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0e190     00 00 00 00 
0e194     08 00 00 00 
0e198     00 00 00 00 
0e19c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
0e1a0     10 00 00 00 
0e1a4     10 00 00 00 
0e1a8     C0 00 00 00 
0e1ac     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
0e1b0     40 02 00 00 
0e1b4     F6 32 24 15 
0e1b8     FB 6C C3 01 
0e1bc     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
0e1c0     50 00 00 00 
0e1c4     A0 00 00 00 
0e1c8     54 00 00 00 
0e1cc     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
0e1d0     08 00 00 00 
0e1d4     08 00 00 00 
0e1d8     08 00 00 00 
0e1dc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0e1e0     0C 00 00 00 
0e1e4     08 00 00 00 
0e1e8     00 01 00 00 
0e1ec     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
0e1f0     E0 01 00 00 
0e1f4     10 06 56 15 
0e1f8     FB 64 C3 01 
0e1fc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
0e200     50 00 00 00 
0e204     32 00 00 00 
0e208     50 00 00 00 
0e20c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0e210     08 00 00 00 
0e214     08 00 00 00 
0e218     08 00 00 00 
0e21c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0e220     0C 00 00 00 
0e224     08 00 00 00 
0e228     40 01 00 00 
0e22c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
0e230     E0 01 00 00 
0e234     F2 CD 33 13 
0e238     FB 53 92 01 
0e23c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0e240     18 00 00 00 
0e244     30 00 00 00 
0e248     18 00 00 00 
0e24c     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
0e250     08 00 00 00 
0e254     08 00 00 00 
0e258     08 00 00 00 
0e25c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0e260     0C 00 00 00 
0e264     08 00 00 00 
0e268     80 01 00 00 
0e26c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
0e270     E0 01 00 00 
0e274     F4 8F 11 11 
0e278     FB 3A 55 01 
0e27c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
0e280     20 00 00 00 
0e284     40 00 00 00 
0e288     22 00 00 00 
0e28c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0e290     00 00 00 00 
0e294     08 00 00 00 
0e298     00 00 00 00 
0e29c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
0e2a0     0C 00 00 00 
0e2a4     08 00 00 00 
0e2a8     C0 01 00 00 
0e2ac     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
0e2b0     F0 01 00 00 
0e2b4     F2 CD 33 13 
0e2b8     FB 53 92 01 
0e2bc     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0e2c0                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
0e2c0     00 75 C7 97 
0e2c4     27 47 F6 0A 
0e2c8     05 79 CB 9B 
0e2cc     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
0e2d0                 | 
0e2d0     28 12 64 FD | hdmi            setq    #9
0e2d4     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
0e2d8                 |            '     setq2   #255
0e2d8                 |             '    rdlong  $100, paletteptr 
0e2d8     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0e2dc     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
0e2e0     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
0e2e4     78 F9 02 F1 |                 add     ii,hbase
0e2e8     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
0e2ec     7B 0B 80 FF 
0e2f0     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
0e2f4                 | 
0e2f4     66 66 86 FF 
0e2f8     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
0e2fc                 | 
0e2fc                 | 
0e2fc                 | ''--------  frame rendering main loop  ---------------------------------------------------
0e2fc                 | 
0e2fc                 | p101
0e2fc     28 14 64 FD |                 setq    #10
0e300     00 DF 06 FB |                 rdlong  framebuf,  ptra
0e304     28 1E 64 FD |                 setq    #15
0e308     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
0e30c     71 99 02 FB |                 rdlong  border,borderptr
0e310                 | 
0e310     01 C4 06 F1 |                 add     frames,#1
0e314     76 F5 02 F6 |                 mov     dlptr2,dlptr
0e318                 | 
0e318     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
0e31c     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
0e320     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
0e324     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
0e328                 |  '' up porch
0e328                 | 
0e328     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
0e32c     49 FF 02 F6 |                 mov     hsync1,sync_001
0e330     37 A8 46 FB |                 callpa  i_upporch ,#blank
0e334     72 01 68 FC |                 wrlong  #0,vblankptr
0e338                 |                 
0e338     1F EA 16 F4 |                 testb   paletteptr,#31 wc
0e33c     29 FE 65 3D |          if_nc  setq2   #255
0e340     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
0e344                 | 
0e344                 | '' cursor blinking
0e344                 | 
0e344     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
0e348     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
0e34c                 | 
0e34c                 | '' main screen
0e34c                 | 
0e34c     00 BE 06 F6 |                 mov linenum,#0
0e350     00 18 07 F6 |                 mov rcnt,#0
0e354     00 1C 07 F6 |                 mov rcnt2a,#0
0e358                 | 
0e358                 | 
0e358     00 18 0F F2 | p301            cmp rcnt,#0 wz
0e35c     18 00 90 AD |         if_z    jmp #p306
0e360     01 18 87 F1 |                 sub rcnt,#1
0e364     90 F7 02 F6 |                 mov dl,rdl
0e368     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
0e36c     8F F7 02 A1 |    if_z        add dl,roffset  
0e370     7B 21 03 F6 |                 mov rdl,dl
0e374     04 00 90 FD |                 jmp #p307          
0e378                 |           
0e378                 |                 
0e378     7A F7 02 FB | p306            rdlong  dl,dlptr2
0e37c     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
0e380     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
0e384     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
0e388                 | 
0e388                 | '' Special entry:
0e388                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
0e388                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
0e388                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
0e388                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
0e388                 | '' todo: set horizontal scroll (if needed)
0e388                 | 
0e388     02 FA 66 F0 |                 shl framebuf2,#2
0e38c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
0e390     04 22 0F F2 |                 cmp dlc,#%100 wz
0e394                 |   
0e394                 |                 
0e394     04 F4 06 F1 |                 add dlptr2,#4
0e398     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
0e39c     7A 21 03 FB |                  rdlong rdl,dlptr2
0e3a0     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
0e3a4     04 18 47 F0 |                  shr rcnt,#4
0e3a8                 |              
0e3a8     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
0e3ac     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
0e3b0                 |                 
0e3b0     04 1E 47 F0 |                  shr roffset,#4
0e3b4     0C 1E 67 F0 |                  shl roffset,#12
0e3b8                 |   
0e3b8     9C FF 9F FD |                  jmp #p301
0e3bc                 |                  
0e3bc                 |                  
0e3bc                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
0e3bc     0C FA 46 F0 |                 shr     framebuf2,#12
0e3c0     02 FA 66 F0 |                 shl     framebuf2,#2
0e3c4                 | 
0e3c4     7B 03 E3 F8 |                 getbyte t1,dl,#0
0e3c8     00 02 0F F2 |                 cmp     t1,#0 wz
0e3cc     34 00 90 AD |     if_z        jmp     #borderline
0e3d0                 | 
0e3d0     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
0e3d4     50 00 90 CD |           if_c   jmp     #textline
0e3d8     50 02 90 3D |           if_nc  jmp     #graphline
0e3dc                 | '
0e3dc     01 BE 06 F1 | p302            add     linenum,#1
0e3e0     04 F4 06 F1 |                 add     dlptr2,#4
0e3e4     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
0e3e8     6C FF 9F 5D |          if_nz  jmp     #p301
0e3ec                 | 
0e3ec     72 03 68 FC | p112            wrlong  #1,vblankptr
0e3f0     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
0e3f4                 | 
0e3f4     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
0e3f8     4B FF 02 F6 |                 mov     hsync1,sync_223
0e3fc     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
0e400     F8 FE 9F FD |                 jmp     #p101
0e404                 | 
0e404                 | '' ---------------  END of frame rendering loop -------------------------------------------
0e404                 | 
0e404                 | 
0e404     14 00 B0 FD | borderline      call    #hsync                      ' make a border
0e408     4C A1 C2 FC |                 xcont   m_vi,border
0e40c     CC FF 9F FD |                 jmp     #p302
0e410                 | 
0e410                 | 
0e410     08 00 B0 FD | blank           call    #hsync                          'blank lines
0e414     7E A1 C2 FC |                 xcont   m_vi,hsync0
0e418     FD ED 6F 0B |         _ret_   djnz    pa,#blank
0e41c                 | 
0e41c     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
0e420     7F 9D B2 FC |                 xzero   m_sn,hsync1
0e424     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
0e428                 | 
0e428                 | 
0e428                 | 
0e428                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0e428                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0e428                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0e428                 | 
0e428                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
0e428                 | 
0e428     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
0e42c                 | 
0e42c     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
0e430     7B 17 5B F8 |                 getnib  zoom, dl,#3
0e434     03 16 07 F5 |                 and             zoom, #3
0e438                 | 
0e438                 | 
0e438                 | 
0e438     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
0e43c     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
0e440     3F BC 06 F5 |                 and     linestart,#63
0e444     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
0e448     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
0e44c                 | 
0e44c     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
0e450                 | 
0e450                 |                        ' if fontline =0, get a border color
0e450                 | 
0e450     51 03 33 F9 | p102            getword t1,m_border,#0
0e454     00 02 0F F2 |                 cmp     t1, #0 wz
0e458     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
0e45c                 | 
0e45c     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
0e460     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
0e464     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
0e468     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
0e46c     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
0e470     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
0e474     52 BB 02 F6 |                 mov m_lut2, m_lut1
0e478     6A BB 02 F1 |                 add m_lut2, lutt1
0e47c     58 0F 03 F6 |                 mov cpl2,i_cpl
0e480                 | 
0e480     02 16 0F F2 |                cmp zoom,#2 wz
0e484     E4 00 90 AD |           if_z jmp #p420
0e488     01 16 0F F2 |                cmp zoom,#1 wz
0e48c     64 00 90 AD |           if_z jmp #p410
0e490     00 16 0F F2 |                 cmp zoom,#0 wz
0e494     04 00 90 AD |           if_z jmp #p400
0e498     50 01 90 FD |                jmp #p430
0e49c                 | 
0e49c                 |                    '
0e49c                 |  ''---------------------------------------------------------------------------------------------------------
0e49c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
0e4a0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
0e4a4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0e4a8     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0e4ac     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0e4b0     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
0e4b4     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0e4b8     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0e4bc     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
0e4c0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
0e4c4                 | 
0e4c4     81 BB C2 FC |                         xcont m_lut2,t1
0e4c8                 | 
0e4c8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0e4cc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
0e4d0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
0e4d4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0e4d8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0e4dc     01 C0 86 F1 |                         sub     lutaddr,#1
0e4e0                 | 
0e4e0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0e4e4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
0e4e8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
0e4ec                 | 
0e4ec     EB 0F 6F FB |                         djnz   cpl2,#p400
0e4f0     28 01 90 FD |  p401                   jmp    #p103
0e4f4                 | 
0e4f4                 | ''------------------------------------------------------------------------------------------------------------
0e4f4                 | 
0e4f4     01 0E 47 F0 |  p410                   shr cpl2,#1
0e4f8                 | 
0e4f8                 | ''---------------------------------------------------------------------------------------------------------
0e4f8     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
0e4fc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
0e500     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0e504     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0e508     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0e50c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
0e510     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0e514     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0e518     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
0e51c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
0e520                 | 
0e520                 | 
0e520     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
0e524     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
0e528     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
0e52c     03 02 07 FA |                         mul t1,#3
0e530     81 BB C2 FC |                         xcont m_lut2,t1
0e534     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0e538     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
0e53c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
0e540     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0e544     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0e548     01 C0 86 F1 |                         sub     lutaddr,#1
0e54c     63 06 63 FD |                         mergew t3
0e550     03 06 07 FA |                         mul t3,#3
0e554     83 BB C2 FC |                         xcont m_lut2,t3
0e558                 | 
0e558     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0e55c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
0e560                 | 
0e560     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
0e564                 | 
0e564     E4 0F 6F FB |                         djnz   cpl2,#p412
0e568     B0 00 90 FD |  p411                   jmp    #p103
0e56c                 | 
0e56c                 | ''------------------------------------------------------------------------------------------------------------
0e56c                 | 
0e56c     02 0E 47 F0 |  p420                   shr cpl2,#2
0e570                 | 
0e570                 | ''---------------------------------------------------------------------------------------
0e570     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
0e574     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
0e578     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0e57c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0e580     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0e584     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
0e588     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0e58c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0e590     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
0e594     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
0e598                 | 
0e598     61 02 63 FD |                         mergeb t1
0e59c     81 07 3B F9 |                         getword t3,t1,#1
0e5a0     0F 02 07 FA |                         mul t1,#15
0e5a4     81 BB C2 FC |                         xcont m_lut2,t1
0e5a8                 | 
0e5a8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0e5ac     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
0e5b0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
0e5b4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0e5b8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0e5bc     01 C0 86 F1 |                         sub     lutaddr,#1
0e5c0                 | 
0e5c0     81 09 EB F8 |                         getbyte t4,t1,#1        '
0e5c4     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
0e5c8                 | 
0e5c8     0F 06 07 FA |                         mul t3,#15
0e5cc     83 BB C2 FC |                         xcont m_lut2,t3
0e5d0                 | 
0e5d0     83 0B EB F8 |                         getbyte t5,t3,#1
0e5d4     85 BB C2 FC |                         xcont m_lut2, t5
0e5d8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0e5dc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
0e5e0                 | 
0e5e0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
0e5e4                 | 
0e5e4     E2 0F 6F FB |                         djnz   cpl2,#p422
0e5e8     30 00 90 FD |  p421                   jmp    #p103
0e5ec                 | 
0e5ec                 | '--------------------------------------------------------------------------------------------------------------
0e5ec                 | 
0e5ec     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
0e5f0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
0e5f4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0e5f8                 | 
0e5f8     00 BA C6 FC |                         xcont m_lut2,#0
0e5fc                 | 
0e5fc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0e600     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
0e604     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
0e608     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0e60c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0e610     01 C0 86 F1 |                         sub     lutaddr,#1
0e614                 | 
0e614     F5 0F 6F FB |                         djnz   cpl2,#p430
0e618     00 00 90 FD |  p431                   jmp    #p103
0e61c                 | 
0e61c                 | ''------------------------------------------------------------------------------------------------------------
0e61c                 | 
0e61c                 | 
0e61c                 | 
0e61c     51 25 33 F9 | p103            getword  mb2,m_border,#0
0e620     00 24 0F F2 |                 cmp      mb2, #0 wz
0e624     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
0e628                 | 
0e628     B0 FD 9F FD |                 jmp #p302
0e62c                 | 
0e62c                 | '' -------------------------------------- END of text line ---------------------------------
0e62c                 | 
0e62c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
0e62c                 | 
0e62c     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
0e630                 | 
0e630                 | 
0e630     51 25 33 F9 | p202            getword mb2,m_border,#0
0e634     00 24 0F F2 |                 cmp     mb2, #0 wz
0e638     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
0e63c                 | 
0e63c                 | '----------------------------------------- display pixels
0e63c                 | 
0e63c     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
0e640     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
0e644                 | 
0e644     7B 17 5B F8 |                 getnib  zoom, dl,#3
0e648     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
0e64c                 | 
0e64c     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
0e650     0C BC 06 F5 |                 and     colordepth,#12
0e654                 | 
0e654     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
0e658     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
0e65c     64 00 90 AD |           if_z  jmp     #p240
0e660                 | 
0e660     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
0e664     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
0e668     98 00 90 AD |           if_z  jmp     #p250
0e66c                 | 
0e66c     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
0e670     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
0e674     FC 00 90 AD |           if_z  jmp     #p260
0e678                 | 
0e678     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
0e67c                 | 
0e67c                 | '' --- 8 bit color modes
0e67c                 | 
0e67c     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
0e680     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
0e684                 | 
0e684     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
0e688     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
0e68c                 |        
0e68c                 |  '  
0e68c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
0e690     25 0C 07 A6 |                 if_z mov skippattern,#%100101
0e694                 |     
0e694                 |  
0e694     05 0C 07 56 |                 if_nz mov skippattern,#%000101
0e698     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
0e69c                 |         
0e69c                 | 
0e69c                 |         
0e69c     7D 11 03 FB | p235               rdlong  char,framebuf2
0e6a0     32 0C 63 FD |                    skipf skippattern
0e6a4     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
0e6a8     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
0e6ac     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
0e6b0     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
0e6b4     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
0e6b8     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
0e6bc     F7 0F 6F FB |                    djnz    cpl2,#p235
0e6c0                 | 
0e6c0     20 01 90 FD |                jmp    #p203
0e6c4                 |                   
0e6c4                 | 
0e6c4                 | 
0e6c4                 | '' --- 1 bit color modes
0e6c4                 | 
0e6c4     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
0e6c8     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
0e6cc                 | 
0e6cc     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
0e6d0     13 0C 07 A6 |        if_z   mov skippattern,#%10011
0e6d4     08 0C 07 56 |        if_nz  mov skippattern,#%01000
0e6d8                 | 
0e6d8                 | 
0e6d8     7D 11 E3 FA | p241               rdword  char,framebuf2
0e6dc     44 10 FF F9 |                    movbyts char,#%01000100
0e6e0     63 10 63 FD |                    mergew  char
0e6e4     32 0C 63 FD |                    skipf skippattern
0e6e8     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
0e6ec     63 10 63 FD |                    mergew  char                    ' 1 0
0e6f0     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
0e6f4     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
0e6f8     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
0e6fc     F6 0F 6F FB |                    djnz   cpl2,#p241
0e700                 | 
0e700                 | 
0e700     E0 00 90 FD |                jmp    #p203
0e704                 | 
0e704                 | '' --- 2 bit color modes
0e704                 | 
0e704     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
0e708     C8 00 90 AD |        if_z   jmp #p251
0e70c                 | 
0e70c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
0e710     30 00 90 AD |        if_z   jmp #p252
0e714                 | 
0e714                 | 
0e714     7D 11 C3 FA | p254               rdbyte char,framebuf2
0e718     04 0A 07 F6 |                    mov  t5,#4
0e71c     02 10 67 F0 | p255               shl  char,#2
0e720     88 03 53 F8 |                    getnib  t1,char,#2
0e724     03 02 07 F5 |                    and     t1,#3
0e728     55 02 07 FA |                    mul     t1,#$55
0e72c     81 05 03 F9 |                    rolbyte  t2,t1,#0
0e730     FA 0B 6F FB |                    djnz    t5,#p255
0e734     82 BB C2 FC |                    xcont   m_lut2,t2
0e738     01 FA 06 F1 |                    add     framebuf2,#1
0e73c     F5 0F 6F FB |                    djnz    cpl2,#p254
0e740     A0 00 90 FD |                    jmp     #p203
0e744                 | 
0e744     7D 11 E3 FA | p252               rdword char,framebuf2
0e748     08 0A 07 F6 |                    mov  t5,#8
0e74c     02 10 67 F0 | p253               shl  char,#2
0e750     88 03 63 F8 |                    getnib  t1,char,#4
0e754     03 02 07 F5 |                    and     t1,#3
0e758     05 02 07 FA |                    mul     t1,#5
0e75c     81 05 83 F8 |                    rolnib  t2,t1,#0
0e760     FA 0B 6F FB |                    djnz    t5,#p253
0e764     82 BB C2 FC |                    xcont   m_lut2,t2
0e768     02 FA 06 F1 |                    add     framebuf2,#2
0e76c     F5 0F 6F FB |                    djnz    cpl2,#p252
0e770     70 00 90 FD |                    jmp     #p203
0e774                 | 
0e774                 | '' ------ 4 bit color modes
0e774                 | 
0e774     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
0e778     58 00 90 AD |        if_z   jmp #p251
0e77c                 | 
0e77c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
0e780     2C 00 90 AD |        if_z   jmp #p262
0e784                 | 
0e784                 | 
0e784     7D 11 C3 FA | p263               rdbyte char,framebuf2
0e788     02 0A DC FC |                            rep #5,#2
0e78c     88 05 8B F8 |                              rolnib t2,char,#1
0e790     88 05 8B F8 |                                  rolnib t2,char,#1
0e794     88 05 8B F8 |                              rolnib t2,char,#1
0e798     88 05 8B F8 |                                  rolnib t2,char,#1
0e79c     04 10 67 F0 |                              shl char,#4
0e7a0     82 BB C2 FC |                    xcont   m_lut2,t2
0e7a4     01 FA 06 F1 |                    add     framebuf2,#1
0e7a8     F6 0F 6F FB |                    djnz    cpl2,#p263
0e7ac     34 00 90 FD |                    jmp     #p203
0e7b0                 | 
0e7b0     7D 11 E3 FA | p262               rdword  char,framebuf2
0e7b4     04 06 DC FC |                            rep #3,#4
0e7b8     88 05 9B F8 |                              rolnib t2,char,#3
0e7bc     88 05 9B F8 |                                  rolnib t2,char,#3
0e7c0     04 10 67 F0 |                              shl char,#4
0e7c4     82 BB C2 FC |                    xcont   m_lut2,t2
0e7c8     02 FA 06 F1 |                    add     framebuf2,#2
0e7cc     F8 0F 6F FB |                    djnz    cpl2,#p262
0e7d0     10 00 90 FD |                    jmp     #p203
0e7d4                 | 
0e7d4                 | ''---------- all color modes without zoom
0e7d4                 | 
0e7d4     87 07 D8 FC | p251               rep  #3,cpl2
0e7d8     7D 11 03 FB |                    rdlong  char,framebuf2
0e7dc     04 FA 06 F1 |                    add     framebuf2,#4
0e7e0     88 BB C2 FC |                    xcont   m_lut2,char
0e7e4                 |           
0e7e4                 |  ''-----------------------------------------------------------------------------------------
0e7e4                 | p203           ' getword  mb2,m_border,#0
0e7e4     00 24 0F F2 |                 cmp      mb2, #0 wz
0e7e8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
0e7ec                 | 
0e7ec     EC FB 9F FD |                 jmp #p302
0e7f0                 | 
0e7f0                 | '' -------------------------------------- END of graph  line ---------------------------------
0e7f0                 | 
0e7f0                 | '' consts and vars
0e7f0                 | 
0e7f0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
0e7f4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
0e7f8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
0e7fc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
0e800                 | 
0e800     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
0e804                 | 
0e804                 | '------ these longs will be set by setmode function
0e804                 | 
0e804     00 00 00 00 | m_bs            long    0        'blanks before sync
0e808     00 00 00 00 | m_sn            long    0        'sync
0e80c     00 00 00 00 | m_bv            long    0        'blanks before visible
0e810     00 00 00 00 | m_vi            long    0        'visible pixels #
0e814     00 00 00 00 | m_border        long    0        'left/right borders
0e818     00 00 00 00 | m_lut1          long    0        'characters
0e81c     00 00 00 00 | i_vborder       long    0        'up/down borders
0e820     00 00 00 00 | i_upporch       long    0        'up porch lines
0e824     00 00 00 00 | i_vsync         long    0        'vsync lines
0e828     00 00 00 00 | i_downporch     long    0        'down porch lines
0e82c     00 00 00 00 | i_modenum       long    0        'mode #
0e830     00 00 00 00 | i_cpl           long    0        'chars/longs per line
0e834     00 00 00 00 | i_lines         long    0        'scanlines #
0e838     00 00 00 00 | i_clock         long    0
0e83c     00 00 00 00 | i_hubset        long    0
0e840     00 00 00 00 | i_totalvis      long    0
0e844                 | 
0e844                 | '-------------------------------------
0e844                 | 
0e844     00 00 00 00 | m_lut2          long    0
0e848                 | 
0e848                 | colordepth
0e848     00 00 00 00 | linestart       long    0
0e84c     00 00 00 00 | linenum         long    0
0e850     00 01 00 00 | lutaddr         long    256
0e854                 | 
0e854     0E 00 00 00 | cursorsh        long    14
0e858     00 00 00 00 | frames          long    0
0e85c     00 00 00 00 | cursorx         long    0
0e860     00 00 00 00 | cursory         long    0
0e864     00 00 00 00 | cursorpos       long    0
0e868     00 00 00 00 | cursorpos2      long    0
0e86c     00 00 00 00 | fontstart       long    0
0e870     00 00 00 00 | border2         long 0
0e874     00 00 81 70 | lutiv           long $70810000
0e878     00 00 88 00 | lutt1           long $00880000
0e87c     00 00 80 00 | lutg1           long $00800000
0e880     00 00 80 10 | lutg2           long $10800000
0e884     00 00 80 20 | lutg4           long $20800000
0e888     00 00 80 30 | lutg8           long $30800000
0e88c     00 00 00 00 | framebuf        long 0
0e890     00 00 00 00 | fontbuf         long 0
0e894     00 00 00 00 | borderptr       long 0
0e898     00 00 00 00 | vblankptr       long 0
0e89c     00 00 00 00 | cursorptr       long 0
0e8a0     00 00 00 00 | modeptr         long 0
0e8a4     00 00 00 00 | paletteptr      long 0
0e8a8     00 00 00 00 | dlptr           long 0
0e8ac                 | fontnumptr      res     1
0e8ac                 | fontnumptr      res     1
0e8ac                 | hbase           res     1
0e8ac                 | hbase           res     1
0e8ac                 | borderptr2      res     1
0e8ac                 | borderptr2      res     1
0e8ac                 | dlptr2 res 1
0e8ac                 | dlptr2 res 1
0e8ac                 | dl              res 1
0e8ac                 | dl              res 1
0e8ac                 | ii              res     1
0e8ac                 | ii              res     1
0e8ac                 | framebuf2       res     1
0e8ac                 | framebuf2       res     1
0e8ac                 | hsync0          res     1
0e8ac                 | hsync0          res     1
0e8ac                 | hsync1          res     1
0e8ac                 | hsync1          res     1
0e8ac                 | fontline        res     1
0e8ac                 | fontline        res     1
0e8ac                 | t1              res     1
0e8ac                 | t1              res     1
0e8ac                 | t2              res     1
0e8ac                 | t2              res     1
0e8ac                 | t3 res 1
0e8ac                 | t3 res 1
0e8ac                 | t4 res 1
0e8ac                 | t4 res 1
0e8ac                 | t5 res 1
0e8ac                 | t5 res 1
0e8ac                 | skippattern res 1
0e8ac                 | skippattern res 1
0e8ac                 | cpl2 res 1
0e8ac                 | cpl2 res 1
0e8ac                 | char            res     1
0e8ac                 | char            res     1
0e8ac                 | backcolor       res     1
0e8ac                 | backcolor       res     1
0e8ac                 | charcolor       res     1
0e8ac                 | charcolor       res     1
0e8ac                 | zoom res 1
0e8ac                 | zoom res 1
0e8ac     00 00 00 00 | rcnt long 0 'dl repeat count
0e8b0     00 00 00 00 | rcnt2 long 0
0e8b4     00 00 00 00 | rcnt2a long 0
0e8b8     00 00 00 00 | roffset long 0
0e8bc     00 00 00 00 | rdl long 0  'dl repeat line
0e8c0     00 00 00 00 | dlc long 0 'dl command
0e8c4     00 00 00 00 | mb2 long 0
0e8c8     00 00 00 00 | aend             long 0
0e8cc                 |                 fit     496                     '
0e8cc                 | __system__dat_
0e8cc     00 00 00 00 
0e8d0     00 00 00 00 | 	byte	$00[8]
0e8d4     03 00 00 00 
0e8d8     00 00 00 00 
0e8dc     00 00 00 00 
0e8e0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e8e4     00 00 00 00 
      ...             
0eb0c     00 00 00 00 
0eb10     00 00 00 00 | 	byte	$00[560]
0eb14     05 00 00 00 
0eb18     00 00 00 00 
0eb1c     00 00 00 00 
0eb20     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0eb24     EC EC 00 00 | 	long	@@@__system__dat_ + 1056
0eb28     F4 EC 00 00 | 	long	@@@__system__dat_ + 1064
0eb2c     00 00 00 00 | 	byte	$00, $00, $00, $00
0eb30     FC EC 00 00 | 	long	@@@__system__dat_ + 1072
0eb34     04 ED 00 00 | 	long	@@@__system__dat_ + 1080
0eb38     00 00 00 00 
0eb3c     00 00 00 00 | 	byte	$00[8]
0eb40     01 00 00 00 
0eb44     06 00 00 00 
0eb48     00 00 00 00 
0eb4c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0eb50     00 00 00 00 | 	byte	$00, $00, $00, $00
0eb54     0C ED 00 00 | 	long	@@@__system__dat_ + 1088
0eb58     14 ED 00 00 | 	long	@@@__system__dat_ + 1096
0eb5c     00 00 00 00 | 	byte	$00, $00, $00, $00
0eb60     1C ED 00 00 | 	long	@@@__system__dat_ + 1104
0eb64     24 ED 00 00 | 	long	@@@__system__dat_ + 1112
0eb68     00 00 00 00 
0eb6c     00 00 00 00 | 	byte	$00[8]
0eb70     01 00 00 00 
0eb74     06 00 00 00 
0eb78     00 00 00 00 
0eb7c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0eb80     00 00 00 00 | 	byte	$00, $00, $00, $00
0eb84     2C ED 00 00 | 	long	@@@__system__dat_ + 1120
0eb88     34 ED 00 00 | 	long	@@@__system__dat_ + 1128
0eb8c     00 00 00 00 | 	byte	$00, $00, $00, $00
0eb90     3C ED 00 00 | 	long	@@@__system__dat_ + 1136
0eb94     44 ED 00 00 | 	long	@@@__system__dat_ + 1144
0eb98     00 00 00 00 
      ...             
0ece8     00 00 00 00 
0ecec     00 00 00 00 | 	byte	$00[344]
0ecf0     58 24 00 00 | 	long	@@@__system___tx
0ecf4     00 00 00 00 | 	byte	$00, $00, $00, $00
0ecf8     A0 24 00 00 | 	long	@@@__system___rx
0ecfc     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed00     3C 4E 00 00 | 	long	@@@__system___rxtxioctl_0150
0ed04     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed08     B4 4E 00 00 | 	long	@@@__system____dummy_flush_0151
0ed0c     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed10     58 24 00 00 | 	long	@@@__system___tx
0ed14     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed18     A0 24 00 00 | 	long	@@@__system___rx
0ed1c     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed20     3C 4E 00 00 | 	long	@@@__system___rxtxioctl_0150
0ed24     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed28     B4 4E 00 00 | 	long	@@@__system____dummy_flush_0151
0ed2c     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed30     58 24 00 00 | 	long	@@@__system___tx
0ed34     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed38     A0 24 00 00 | 	long	@@@__system___rx
0ed3c     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed40     3C 4E 00 00 | 	long	@@@__system___rxtxioctl_0150
0ed44     00 00 00 00 | 	byte	$00, $00, $00, $00
0ed48     B4 4E 00 00 | 	long	@@@__system____dummy_flush_0151
0ed4c     00 00 00 00 
      ...             
0ef78     00 00 00 00 
0ef7c     00 00 00 00 | 	byte	$00[564]
0ef80                 | 	alignl
0ef80                 | _ff_cc_dat_
0ef80     00 00 00 00 
0ef84     00 00       | 	byte	$00[6]
0ef86     43 55 45 41 
0ef8a     41 41 41 43 
0ef8e     45 45 45 49 
0ef92     49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
0ef96     45 92 92 4F 
0ef9a     4F 4F 55 55 
0ef9e     59 4F 55 4F 
0efa2     9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
0efa6     41 49 4F 55 
0efaa     A5 A5 A6 A7 
0efae     A8 A9 AA AB 
0efb2     AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
0efb6     B0 B1 B2 B3 
0efba     B4 41 41 41 
0efbe     B8 B9 BA BB 
0efc2     BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
0efc6     C0 C1 C2 C3 
0efca     C4 C5 41 41 
0efce     C8 C9 CA CB 
0efd2     CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
0efd6     D1 D1 45 45 
0efda     45 49 49 49 
0efde     49 D9 DA DB 
0efe2     DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
0efe6     4F E1 4F 4F 
0efea     4F 4F E6 E8 
0efee     E8 55 55 55 
0eff2     59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
0eff6     F0 F1 F2 F3 
0effa     F4 F5 F6 F7 
0effe     F8 F9 FA FB 
0f002     FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
0f006     01 00 04 00 
0f00a     10 00 40 00 
0f00e     00 01 00 02 
0f012     00 00 01 00 | 	byte	$01, $00, $04, $00, $10, $00, $40, $00, $00, $01, $00, $02, $00, $00, $01, $00
0f016     02 00 04 00 
0f01a     08 00 10 00 
0f01e     20 00 00 00 
0f022     00 00 07 00 | 	byte	$02, $00, $04, $00, $08, $00, $10, $00, $20, $00, $00, $00, $00, $00, $07, $00
0f026     00 00 00 00 
0f02a     00 00 00 00 
0f02e     00 00 00 00 
0f032     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f034     74 F0 00 00 | 	long	@@@_ff_cc_dat_ + 244
0f038     7C F0 00 00 | 	long	@@@_ff_cc_dat_ + 252
0f03c     84 F0 00 00 | 	long	@@@_ff_cc_dat_ + 260
0f040     8C F0 00 00 | 	long	@@@_ff_cc_dat_ + 268
0f044     94 F0 00 00 | 	long	@@@_ff_cc_dat_ + 276
0f048     9C F0 00 00 | 	long	@@@_ff_cc_dat_ + 284
0f04c     A4 F0 00 00 | 	long	@@@_ff_cc_dat_ + 292
0f050     00 00 00 00 | 	byte	$00, $00, $00, $00
0f054     AC F0 00 00 | 	long	@@@_ff_cc_dat_ + 300
0f058     B4 F0 00 00 | 	long	@@@_ff_cc_dat_ + 308
0f05c     BC F0 00 00 | 	long	@@@_ff_cc_dat_ + 316
0f060     C4 F0 00 00 | 	long	@@@_ff_cc_dat_ + 324
0f064     CC F0 00 00 | 	long	@@@_ff_cc_dat_ + 332
0f068     D4 F0 00 00 | 	long	@@@_ff_cc_dat_ + 340
0f06c     DC F0 00 00 | 	long	@@@_ff_cc_dat_ + 348
0f070     E4 F0 00 00 | 	long	@@@_ff_cc_dat_ + 356
0f074     00 00 00 00 | 	byte	$00, $00, $00, $00
0f078     94 B8 00 00 | 	long	@@@_ff_cc_v_open_0505
0f07c     00 00 00 00 | 	byte	$00, $00, $00, $00
0f080     F0 B0 00 00 | 	long	@@@_ff_cc_v_creat_0459
0f084     00 00 00 00 | 	byte	$00, $00, $00, $00
0f088     98 B1 00 00 | 	long	@@@_ff_cc_v_close_0462
0f08c     00 00 00 00 | 	byte	$00, $00, $00, $00
0f090     7C B5 00 00 | 	long	@@@_ff_cc_v_read_0487
0f094     00 00 00 00 | 	byte	$00, $00, $00, $00
0f098     A4 B6 00 00 | 	long	@@@_ff_cc_v_write_0491
0f09c     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0a0     98 B7 00 00 | 	long	@@@_ff_cc_v_lseek_0495
0f0a4     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0a8     38 B8 00 00 | 	long	@@@_ff_cc_v_ioctl
0f0ac     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0b0     DC B1 00 00 | 	long	@@@_ff_cc_v_opendir_0465
0f0b4     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0b8     5C B2 00 00 | 	long	@@@_ff_cc_v_closedir_0468
0f0bc     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0c0     A0 B2 00 00 | 	long	@@@_ff_cc_v_readdir_0471
0f0c4     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0c8     48 B3 00 00 | 	long	@@@_ff_cc_v_stat_0483
0f0cc     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0d0     54 B8 00 00 | 	long	@@@_ff_cc_v_mkdir
0f0d4     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0d8     74 B8 00 00 | 	long	@@@_ff_cc_v_rmdir_0499
0f0dc     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0e0     64 B8 00 00 | 	long	@@@_ff_cc_v_remove
0f0e4     00 00 00 00 | 	byte	$00, $00, $00, $00
0f0e8     84 B8 00 00 | 	long	@@@_ff_cc_v_rename_0501
0f0ec     00 00 00 00 
0f0f0     00 00 00 00 
0f0f4     00 00 00 00 
0f0f8     00 00 00 00 | 	byte	$00[16]
0f0fc     01 00 00 00 | 	byte	$01, $00, $00, $00
0f100                 | __heap_base
0f100     00 00 00 00 
      ...             
10100     00 00 00 00 
10104     00 00 00 00 | 	long	0[1026]
10108                 | objmem
10108     00 00 00 00 | 	long	0[1]
1010c 119             | 	org	COG_BSS_START
1010c 119             | _var01
1010c 119             | 	res	1
1010c 11a             | _var02
1010c 11a             | 	res	1
1010c 11b             | _var03
1010c 11b             | 	res	1
1010c 11c             | _var04
1010c 11c             | 	res	1
1010c 11d             | _var05
1010c 11d             | 	res	1
1010c 11e             | _var06
1010c 11e             | 	res	1
1010c 11f             | _var07
1010c 11f             | 	res	1
1010c 120             | _var08
1010c 120             | 	res	1
1010c 121             | _var09
1010c 121             | 	res	1
1010c 122             | _var10
1010c 122             | 	res	1
1010c 123             | _var11
1010c 123             | 	res	1
1010c 124             | _var12
1010c 124             | 	res	1
1010c 125             | _var13
1010c 125             | 	res	1
1010c 126             | _var14
1010c 126             | 	res	1
1010c 127             | _var15
1010c 127             | 	res	1
1010c 128             | _var16
1010c 128             | 	res	1
1010c 129             | arg01
1010c 129             | 	res	1
1010c 12a             | arg02
1010c 12a             | 	res	1
1010c 12b             | arg03
1010c 12b             | 	res	1
1010c 12c             | arg04
1010c 12c             | 	res	1
1010c 12d             | arg05
1010c 12d             | 	res	1
1010c 12e             | local01
1010c 12e             | 	res	1
1010c 12f             | local02
1010c 12f             | 	res	1
1010c 130             | local03
1010c 130             | 	res	1
1010c 131             | local04
1010c 131             | 	res	1
1010c 132             | local05
1010c 132             | 	res	1
1010c 133             | local06
1010c 133             | 	res	1
1010c 134             | local07
1010c 134             | 	res	1
1010c 135             | local08
1010c 135             | 	res	1
1010c 136             | local09
1010c 136             | 	res	1
1010c 137             | local10
1010c 137             | 	res	1
1010c 138             | local11
1010c 138             | 	res	1
1010c 139             | local12
1010c 139             | 	res	1
1010c 13a             | local13
1010c 13a             | 	res	1
1010c 13b             | local14
1010c 13b             | 	res	1
1010c 13c             | local15
1010c 13c             | 	res	1
1010c 13d             | local16
1010c 13d             | 	res	1
1010c 13e             | local17
1010c 13e             | 	res	1
1010c 13f             | local18
1010c 13f             | 	res	1
1010c 140             | local19
1010c 140             | 	res	1
1010c 141             | local20
1010c 141             | 	res	1
1010c 142             | local21
1010c 142             | 	res	1
1010c 143             | local22
1010c 143             | 	res	1
1010c 144             | local23
1010c 144             | 	res	1
1010c 145             | local24
1010c 145             | 	res	1
1010c 146             | local25
1010c 146             | 	res	1
1010c 147             | local26
1010c 147             | 	res	1
1010c 148             | local27
1010c 148             | 	res	1
1010c 149             | local28
1010c 149             | 	res	1
1010c 14a             | local29
1010c 14a             | 	res	1
1010c 14b             | local30
1010c 14b             | 	res	1
1010c 14c             | local31
1010c 14c             | 	res	1
1010c 14d             | local32
1010c 14d             | 	res	1
1010c 14e             | local33
1010c 14e             | 	res	1
1010c 14f             | local34
1010c 14f             | 	res	1
1010c 150             | local35
1010c 150             | 	res	1
1010c 151             | local36
1010c 151             | 	res	1
1010c 152             | local37
1010c 152             | 	res	1
1010c 153             | local38
1010c 153             | 	res	1
1010c 154             | local39
1010c 154             | 	res	1
1010c 155             | local40
1010c 155             | 	res	1
1010c 156             | local41
1010c 156             | 	res	1
1010c 157             | local42
1010c 157             | 	res	1
1010c 158             | local43
1010c 158             | 	res	1
1010c 159             | local44
1010c 159             | 	res	1
1010c 15a             | local45
1010c 15a             | 	res	1
1010c 15b             | local46
1010c 15b             | 	res	1
1010c 15c             | local47
1010c 15c             | 	res	1
1010c 15d             | local48
1010c 15d             | 	res	1
1010c 15e             | local49
1010c 15e             | 	res	1
1010c 15f             | local50
1010c 15f             | 	res	1
1010c 160             | local51
1010c 160             | 	res	1
1010c 161             | local52
1010c 161             | 	res	1
1010c 162             | local53
1010c 162             | 	res	1
1010c 163             | local54
1010c 163             | 	res	1
1010c 164             | local55
1010c 164             | 	res	1
1010c 165             | local56
1010c 165             | 	res	1
1010c 166             | local57
1010c 166             | 	res	1
1010c 167             | local58
1010c 167             | 	res	1
1010c 168             | local59
1010c 168             | 	res	1
1010c 169             | local60
1010c 169             | 	res	1
1010c 16a             | local61
1010c 16a             | 	res	1
1010c 16b             | local62
1010c 16b             | 	res	1
1010c 16c             | local63
1010c 16c             | 	res	1
1010c 16d             | local64
1010c 16d             | 	res	1
1010c 16e             | local65
1010c 16e             | 	res	1
1010c 16f             | local66
1010c 16f             | 	res	1
1010c 170             | local67
1010c 170             | 	res	1
1010c 171             | local68
1010c 171             | 	res	1
1010c 172             | local69
1010c 172             | 	res	1
1010c 173             | local70
1010c 173             | 	res	1
1010c 174             | local71
1010c 174             | 	res	1
1010c 175             | local72
1010c 175             | 	res	1
1010c 176             | local73
1010c 176             | 	res	1
1010c 177             | local74
1010c 177             | 	res	1
1010c 178             | local75
1010c 178             | 	res	1
1010c 179             | local76
1010c 179             | 	res	1
1010c 17a             | local77
1010c 17a             | 	res	1
1010c 17b             | local78
1010c 17b             | 	res	1
1010c 17c             | local79
1010c 17c             | 	res	1
1010c 17d             | local80
1010c 17d             | 	res	1
1010c 17e             | muldiva_
1010c 17e             | 	res	1
1010c 17f             | muldivb_
1010c 17f             | 	res	1
1010c 180             | 	fit	480
1010c 180             | 
