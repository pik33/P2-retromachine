00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/shell.p2asm"
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 16 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0A F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 D8 31 A0 FD | 	call	#_main
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 3E 62 FD | 	cogid	arg01
00614 084 03 3E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FD 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 17 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 3F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 41 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 43 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 45 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 16 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | 
00650 093             | ___run
00650 093 1F 23 02 F6 | 	mov	___run_src, arg01
00654 094 00 1E 06 F6 | 	mov	___run_dst_0111, #0
00658 095 03 40 06 F1 | 	add	arg02, #3
0065c 096 02 40 C6 F0 | 	sar	arg02, #2
00660 097 20 21 02 F6 | 	mov	___run_size, arg02
00664 098             | '     size = origSize;
00664 098             | '     do {
00664 098 10 0D D8 FC | 	rep	@LR__0002, ___run_size
00668 099             | LR__0001
00668 099 11 25 02 F6 | 	mov	__run_tmp004_, ___run_src
0066c 09a 04 24 06 F1 | 	add	__run_tmp004_, #4
00670 09b 11 27 02 FB | 	rdlong	__run_tmp005_, ___run_src
00674 09c 12 23 02 F6 | 	mov	___run_src, __run_tmp004_
00678 09d 0F 27 62 FC | 	wrlong	__run_tmp005_, ___run_dst_0111
0067c 09e 04 1E 06 F1 | 	add	___run_dst_0111, #4
00680 09f             | LR__0002
00680 09f F0 00 00 FF 
00684 0a0 00 20 06 F6 | 	mov	___run_size, ##122880
00688 0a1 20 21 82 F1 | 	sub	___run_size, arg02
0068c 0a2 00 20 5E F2 | 	cmps	___run_size, #0 wcz
00690 0a3 0C 00 90 ED |  if_be	jmp	#LR__0005
00694 0a4             | '         do {
00694 0a4 10 05 D8 FC | 	rep	@LR__0004, ___run_size
00698 0a5             | LR__0003
00698 0a5 0F 01 68 FC | 	wrlong	#0, ___run_dst_0111
0069c 0a6 04 1E 06 F1 | 	add	___run_dst_0111, #4
006a0 0a7             | LR__0004
006a0 0a7             | LR__0005
006a0 0a7 18 1C 06 FB | 	rdlong	___run_clkmode_0112, #24
006a4 0a8 07 1C 46 F7 | 	zerox	___run_clkmode_0112, #7
006a8 0a9 03 1C 2E F5 | 	andn	___run_clkmode_0112, #3 wz
006ac 0aa 00 1C 62 5D |  if_ne	hubset	___run_clkmode_0112
006b0 0ab 86 01 80 5F 
006b4 0ac 1F 80 66 5D |  if_ne	waitx	##200000
006b8 0ad 01 16 62 FD | 	cogid	result1
006bc 0ae 0B 3F 02 F6 | 	mov	arg01, result1
006c0 0af 28 42 62 FD | 	setq	arg03
006c4 0b0 00 3E F6 FC | 	coginit	arg01, #0 wc
006c8 0b1 01 3E 66 C6 |  if_b	neg	arg01, #1
006cc 0b2 1F 17 02 F6 | 	mov	result1, arg01
006d0 0b3             | ___run_ret
006d0 0b3 2D 00 64 FD | 	ret
006d4 0b4             | FCACHE_LOAD_
006d4 0b4 2B 80 61 FD |     pop	fcache_tmpb_
006d8 0b5 F6 81 01 F1 |     add	fcache_tmpb_, pa
006dc 0b6 2A 80 61 FD |     push	fcache_tmpb_
006e0 0b7 F6 81 81 F1 |     sub	fcache_tmpb_, pa
006e4 0b8 02 EC 47 F0 |     shr	pa, #2
006e8 0b9 00 EC 8F F9 |     altd	pa
006ec 0ba BF 00 00 F6 |     mov	 0-0, ret_instr_
006f0 0bb 01 EC 87 F1 |     sub	pa, #1
006f4 0bc 28 EC 63 FD |     setq	pa
006f8 0bd C0 00 00 FB |     rdlong	$0, fcache_tmpb_
006fc 0be 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00700 0bf             | ret_instr_
00700 0bf 2D 00 64 FD |     ret
00704 0c0             | fcache_tmpb_
00704 0c0 00 00 00 00 |     long 0
00708 0c1             | builtin_bytefill_
00708 0c1 01 42 56 F0 |         shr	arg03, #1 wc
0070c 0c2 1F 41 42 CC |  if_c   wrbyte	arg02, arg01
00710 0c3 01 3E 06 C1 |  if_c   add	arg01, #1
00714 0c4 00 40 FE F9 |         movbyts	arg02, #0
00718 0c5             | builtin_wordfill_
00718 0c5 01 42 56 F0 |         shr	arg03, #1 wc
0071c 0c6 1F 41 52 CC |  if_c   wrword	arg02, arg01
00720 0c7 02 3E 06 C1 |  if_c   add	arg01, #2
00724 0c8 20 41 2A F9 |         setword	arg02, arg02, #1
00728 0c9             | builtin_longfill_
00728 0c9 1F 01 88 FC |         wrfast	#0,arg01
0072c 0ca 00 42 0E F2 |         cmp	arg03, #0 wz
00730 0cb 21 03 D8 5C |  if_nz  rep	#1, arg03
00734 0cc 17 40 62 5D |  if_nz  wflong	arg02
00738 0cd 2D 00 64 FD |         ret
0073c 0ce             | COUNT_
0073c 0ce 00 00 00 00 |     long 0
00740 0cf             | RETADDR_
00740 0cf 00 00 00 00 |     long 0
00744 0d0             | fp
00744 0d0 00 00 00 00 |     long 0
00748 0d1             | pushregs_
00748 0d1 2B EC 63 FD |     pop  pa
0074c 0d2 2B 9E 61 FD |     pop  RETADDR_
00750 0d3 04 9C 95 FB |     tjz  COUNT_, #pushregs_done_
00754 0d4 01 9C 85 F1 |     sub  COUNT_, #1
00758 0d5 28 9C 61 FD |     setq COUNT_
0075c 0d6 00 49 66 FC |     wrlong local01, ptra
00760 0d7 01 9C 05 F1 |     add  COUNT_, #1
00764 0d8             | pushregs_done_
00764 0d8 02 9C 65 F0 |     shl  COUNT_, #2
00768 0d9 CE F0 03 F1 |     add  ptra, COUNT_
0076c 0da 02 9C 45 F0 |     shr  COUNT_, #2
00770 0db 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
00774 0dc 00 9D 65 FC |     wrlong COUNT_, ptra
00778 0dd 0C F0 07 F1 |     add    ptra, #12
0077c 0de F8 A1 01 F6 |     mov    fp, ptra
00780 0df 2C EC 63 FD |     jmp  pa
00784 0e0             |  popregs_
00784 0e0 2B EC 63 FD |     pop    pa
00788 0e1 0C F0 87 F1 |     sub    ptra, #12
0078c 0e2 28 04 64 FD |     setq   #2
00790 0e3 00 9D 05 FB |     rdlong COUNT_, ptra
00794 0e4 06 9C 95 FB |     tjz    COUNT_, #popregs__ret
00798 0e5 02 9C 65 F0 |     shl    COUNT_, #2
0079c 0e6 CE F0 83 F1 |     sub    ptra, COUNT_
007a0 0e7 02 9C 45 F0 |     shr    COUNT_, #2
007a4 0e8 01 9C 85 F1 |     sub    COUNT_, #1
007a8 0e9 28 9C 61 FD |     setq   COUNT_
007ac 0ea 00 49 06 FB |     rdlong local01, ptra
007b0 0eb             | popregs__ret
007b0 0eb 2A 9E 61 FD |     push   RETADDR_
007b4 0ec 2C EC 63 FD |     jmp    pa
007b8 0ed             | 
007b8 0ed             | unsdivide_
007b8 0ed 28 00 64 FD |        setq    #0
007bc 0ee 4F 9D 12 FD |        qdiv    muldiva_, muldivb_
007c0 0ef 18 9E 62 FD |        getqx   muldivb_
007c4 0f0 19 9C 62 0D |  _ret_ getqy   muldiva_
007c8 0f1             | 
007c8 0f1             | divide_
007c8 0f1 4E 9D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007cc 0f2 03 FA 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
007d0 0f3 4F 9F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007d4 0f4 02 FA 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
007d8 0f5 2D 00 64 AD |  if_z  ret
007dc 0f6 D8 FF BF FD |        call    #unsdivide_
007e0 0f7 01 FA D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
007e4 0f8 4E 9D 82 F6 |        negc    muldiva_,muldiva_ 
007e8 0f9 02 FA D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
007ec 0fa 4F 9F 82 06 |  _ret_ negc    muldivb_,muldivb_
007f0 0fb             | 
007f0 0fb             | __heap_ptr
007f0 0fb D4 2D 01 00 | 	long	@__heap_base
007f4 0fc             | itmp1_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | itmp2_
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | objptr
007fc 0fe DC 3D 01 00 | 	long	@objmem
00800 0ff             | ptr____default_flush_
00800 0ff 58 25 00 00 | 	long	@___default_flush
00804 100             | ptr____default_getc_
00804 100 A0 23 00 00 | 	long	@___default_getc
00808 101             | ptr____default_putc_
00808 101 28 24 00 00 | 	long	@___default_putc
0080c 102             | ptr____default_putc_terminal_
0080c 102 BC 24 00 00 | 	long	@___default_putc_terminal
00810 103             | ptr___struct___anon_580868bc00000005_sputc_
00810 103 C8 D9 00 00 | 	long	@__struct___anon_580868bc00000005_sputc
00814 104             | ptr___struct__s_vfs_file_t_putchar_
00814 104 58 0E 01 00 | 	long	@__struct__s_vfs_file_t_putchar
00818 105             | ptr___system__dat__
00818 105 50 29 01 00 | 	long	@__system__dat_
0081c 106             | ptr__dat__
0081c 106 08 13 01 00 | 	long	@_dat_
00820 107             | ptr__ff_cc_dat__
00820 107 D0 27 01 00 | 	long	@_ff_cc_dat_
00824 108             | ptr__fs9p_internal_cc_dat__
00824 108 5C 1E 01 00 | 	long	@_fs9p_internal_cc_dat_
00828 109             | ptr__plain_sendrecv_0341_
00828 109 F0 4C 00 00 | 	long	@_plain_sendrecv_0341
0082c 10a             | ptr_stackspace_
0082c 10a DC 3D 01 00 | 	long	@stackspace
00830 10b             | result1
00830 10b 00 00 00 00 | 	long	0
00834 10c             | result2
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result3
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | COG_BSS_START
0083c 10e             | 	fit	480
0083c                 | 	orgh
0083c                 | hubentry
0083c                 | 
0083c                 | _open
0083c     08 9C 05 F6 | 	mov	COUNT_, #8
00840     D1 00 A0 FD | 	call	#pushregs_
00844     1F 49 02 F6 | 	mov	local01, arg01
00848     20 4B 02 F6 | 	mov	local02, arg02
0084c     21 4D 02 F6 | 	mov	local03, arg03
00850     02 00 00 FF 
00854     84 0C 06 F1 | 	add	ptr__dat__, ##1156
00858     06 4F 02 F6 | 	mov	local04, ptr__dat__
0085c                 | ' 
0085c                 | '     for (fd = 0; fd <  10 ; fd++) {
0085c     00 50 06 F6 | 	mov	local05, #0
00860     02 00 00 FF 
00864     84 0C 86 F1 | 	sub	ptr__dat__, ##1156
00868     C0 F7 9F FE | 	loc	pa,	#(@LR__0007-@LR__0006)
0086c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
00870                 | LR__0006
00870     0A 50 5E F2 | 	cmps	local05, #10 wcz
00874     24 00 90 3D |  if_ae	jmp	#LR__0008
00878     28 53 02 F6 | 	mov	local06, local05
0087c     01 52 66 F0 | 	shl	local06, #1
00880     28 53 02 F1 | 	add	local06, local05
00884     04 52 66 F0 | 	shl	local06, #4
00888     27 53 02 F1 | 	add	local06, local04
0088c     08 52 06 F1 | 	add	local06, #8
00890     29 55 0A FB | 	rdlong	local07, local06 wz
00894     01 50 06 51 |  if_ne	add	local05, #1
00898     D4 FF 9F 5D |  if_ne	jmp	#LR__0006
0089c                 | LR__0007
0089c                 | LR__0008
0089c     0A 50 0E F2 | 	cmp	local05, #10 wz
008a0     1C 00 90 5D |  if_ne	jmp	#LR__0009
008a4                 | '         return _seterror( 11 );
008a4     01 00 00 FF 
008a8     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
008ac     05 17 68 FC | 	wrlong	#11, ptr___system__dat__
008b0     01 00 00 FF 
008b4     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
008b8     01 16 66 F6 | 	neg	result1, #1
008bc     30 00 90 FD | 	jmp	#LR__0010
008c0                 | LR__0009
008c0     28 3F 02 F6 | 	mov	arg01, local05
008c4     01 3E 66 F0 | 	shl	arg01, #1
008c8     28 3F 02 F1 | 	add	arg01, local05
008cc     04 3E 66 F0 | 	shl	arg01, #4
008d0     27 3F 02 F1 | 	add	arg01, local04
008d4     24 41 02 F6 | 	mov	arg02, local01
008d8     25 43 02 F6 | 	mov	arg03, local02
008dc     26 45 02 F6 | 	mov	arg04, local03
008e0     24 13 B0 FD | 	call	#__openraw
008e4     0B 57 0A F6 | 	mov	local08, result1 wz
008e8     28 57 02 A6 |  if_e	mov	local08, local05
008ec                 | '         r = fd;
008ec                 | '     }
008ec                 | '     return r;
008ec     2B 17 02 F6 | 	mov	result1, local08
008f0                 | LR__0010
008f0     D0 F0 03 F6 | 	mov	ptra, fp
008f4     E0 00 A0 FD | 	call	#popregs_
008f8                 | _open_ret
008f8     2D 00 64 FD | 	ret
008fc                 | 
008fc                 | _write
008fc     03 9C 05 F6 | 	mov	COUNT_, #3
00900     D1 00 A0 FD | 	call	#pushregs_
00904     1F 49 02 F6 | 	mov	local01, arg01
00908     20 4B 02 F6 | 	mov	local02, arg02
0090c     21 4D 02 F6 | 	mov	local03, arg03
00910     0A 48 1E F2 | 	cmp	local01, #10 wcz
00914     1C 00 90 CD |  if_b	jmp	#LR__0011
00918                 | '         return _seterror( 5 );
00918     01 00 00 FF 
0091c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00920     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
00924     01 00 00 FF 
00928     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0092c     01 16 66 F6 | 	neg	result1, #1
00930     30 00 90 FD | 	jmp	#LR__0012
00934                 | LR__0011
00934     24 3F 02 F6 | 	mov	arg01, local01
00938     01 3E 66 F0 | 	shl	arg01, #1
0093c     24 3F 02 F1 | 	add	arg01, local01
00940     04 3E 66 F0 | 	shl	arg01, #4
00944     02 00 00 FF 
00948     84 0C 06 F1 | 	add	ptr__dat__, ##1156
0094c     06 3F 02 F1 | 	add	arg01, ptr__dat__
00950                 | '     }
00950                 | '     f = &__filetab[fd];
00950                 | '     return _vfswrite(f, vbuf, count);
00950     25 41 02 F6 | 	mov	arg02, local02
00954     26 43 02 F6 | 	mov	arg03, local03
00958     02 00 00 FF 
0095c     84 0C 86 F1 | 	sub	ptr__dat__, ##1156
00960     7C 35 B0 FD | 	call	#__vfswrite
00964                 | LR__0012
00964     D0 F0 03 F6 | 	mov	ptra, fp
00968     E0 00 A0 FD | 	call	#popregs_
0096c                 | _write_ret
0096c     2D 00 64 FD | 	ret
00970                 | 
00970                 | _read
00970     03 9C 05 F6 | 	mov	COUNT_, #3
00974     D1 00 A0 FD | 	call	#pushregs_
00978     1F 49 02 F6 | 	mov	local01, arg01
0097c     20 4B 02 F6 | 	mov	local02, arg02
00980     21 4D 02 F6 | 	mov	local03, arg03
00984     0A 48 1E F2 | 	cmp	local01, #10 wcz
00988     1C 00 90 CD |  if_b	jmp	#LR__0013
0098c                 | '         return _seterror( 5 );
0098c     01 00 00 FF 
00990     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00994     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
00998     01 00 00 FF 
0099c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
009a0     01 16 66 F6 | 	neg	result1, #1
009a4     30 00 90 FD | 	jmp	#LR__0014
009a8                 | LR__0013
009a8     24 3F 02 F6 | 	mov	arg01, local01
009ac     01 3E 66 F0 | 	shl	arg01, #1
009b0     24 3F 02 F1 | 	add	arg01, local01
009b4     04 3E 66 F0 | 	shl	arg01, #4
009b8     02 00 00 FF 
009bc     84 0C 06 F1 | 	add	ptr__dat__, ##1156
009c0     06 3F 02 F1 | 	add	arg01, ptr__dat__
009c4                 | '     }
009c4                 | '     f = &__filetab[fd];
009c4                 | '     return _vfsread(f, vbuf, count);
009c4     25 41 02 F6 | 	mov	arg02, local02
009c8     26 43 02 F6 | 	mov	arg03, local03
009cc     02 00 00 FF 
009d0     84 0C 86 F1 | 	sub	ptr__dat__, ##1156
009d4     CC 36 B0 FD | 	call	#__vfsread
009d8                 | LR__0014
009d8     D0 F0 03 F6 | 	mov	ptra, fp
009dc     E0 00 A0 FD | 	call	#popregs_
009e0                 | _read_ret
009e0     2D 00 64 FD | 	ret
009e4                 | 
009e4                 | _close
009e4     01 9C 05 F6 | 	mov	COUNT_, #1
009e8     D1 00 A0 FD | 	call	#pushregs_
009ec     1F 49 02 F6 | 	mov	local01, arg01
009f0     0A 48 1E F2 | 	cmp	local01, #10 wcz
009f4     1C 00 90 CD |  if_b	jmp	#LR__0015
009f8                 | '         return _seterror( 5 );
009f8     01 00 00 FF 
009fc     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00a00     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
00a04     01 00 00 FF 
00a08     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00a0c     01 16 66 F6 | 	neg	result1, #1
00a10     28 00 90 FD | 	jmp	#LR__0016
00a14                 | LR__0015
00a14     24 3F 02 F6 | 	mov	arg01, local01
00a18     01 3E 66 F0 | 	shl	arg01, #1
00a1c     24 3F 02 F1 | 	add	arg01, local01
00a20     04 3E 66 F0 | 	shl	arg01, #4
00a24     02 00 00 FF 
00a28     84 0C 06 F1 | 	add	ptr__dat__, ##1156
00a2c     06 3F 02 F1 | 	add	arg01, ptr__dat__
00a30                 | '     }
00a30                 | '     f = &__filetab[fd];
00a30                 | '     return _closeraw(f);
00a30     02 00 00 FF 
00a34     84 0C 86 F1 | 	sub	ptr__dat__, ##1156
00a38     40 17 B0 FD | 	call	#__closeraw
00a3c                 | LR__0016
00a3c     D0 F0 03 F6 | 	mov	ptra, fp
00a40     E0 00 A0 FD | 	call	#popregs_
00a44                 | _close_ret
00a44     2D 00 64 FD | 	ret
00a48                 | 
00a48                 | _lseek
00a48     09 9C 05 F6 | 	mov	COUNT_, #9
00a4c     D1 00 A0 FD | 	call	#pushregs_
00a50     1F 49 02 F6 | 	mov	local01, arg01
00a54     20 4B 02 F6 | 	mov	local02, arg02
00a58     21 4D 02 F6 | 	mov	local03, arg03
00a5c     0A 48 1E F2 | 	cmp	local01, #10 wcz
00a60     1C 00 90 CD |  if_b	jmp	#LR__0017
00a64                 | '         return _seterror( 5 );
00a64     01 00 00 FF 
00a68     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00a6c     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
00a70     01 00 00 FF 
00a74     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00a78     01 16 66 F6 | 	neg	result1, #1
00a7c     E0 00 90 FD | 	jmp	#LR__0021
00a80                 | LR__0017
00a80     24 4F 02 F6 | 	mov	local04, local01
00a84     01 4E 66 F0 | 	shl	local04, #1
00a88     24 4F 02 F1 | 	add	local04, local01
00a8c     04 4E 66 F0 | 	shl	local04, #4
00a90     02 00 00 FF 
00a94     84 0C 06 F1 | 	add	ptr__dat__, ##1156
00a98     06 4F 02 F1 | 	add	local04, ptr__dat__
00a9c     2C 4E 06 F1 | 	add	local04, #44
00aa0     27 51 0A FB | 	rdlong	local05, local04 wz
00aa4     2C 4E 86 F1 | 	sub	local04, #44
00aa8     02 00 00 FF 
00aac     84 0C 86 F1 | 	sub	ptr__dat__, ##1156
00ab0     1C 00 90 5D |  if_ne	jmp	#LR__0018
00ab4                 | '         return _seterror( 16 );
00ab4     01 00 00 FF 
00ab8     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00abc     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
00ac0     01 00 00 FF 
00ac4     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00ac8     01 16 66 F6 | 	neg	result1, #1
00acc     90 00 90 FD | 	jmp	#LR__0021
00ad0                 | LR__0018
00ad0     08 4E 06 F1 | 	add	local04, #8
00ad4     27 51 02 FB | 	rdlong	local05, local04
00ad8     08 4E 86 F1 | 	sub	local04, #8
00adc     40 50 CE F7 | 	test	local05, #64 wz
00ae0     14 00 90 AD |  if_e	jmp	#LR__0019
00ae4     08 4E 06 F1 | 	add	local04, #8
00ae8     27 51 02 FB | 	rdlong	local05, local04
00aec     80 50 46 F5 | 	or	local05, #128
00af0     27 51 62 FC | 	wrlong	local05, local04
00af4     08 4E 86 F1 | 	sub	local04, #8
00af8                 | LR__0019
00af8     2C 4E 06 F1 | 	add	local04, #44
00afc     27 51 02 FB | 	rdlong	local05, local04
00b00     2C 4E 86 F1 | 	sub	local04, #44
00b04     28 53 02 FB | 	rdlong	local06, local05
00b08     04 50 06 F1 | 	add	local05, #4
00b0c     28 55 02 FB | 	rdlong	local07, local05
00b10     27 3F 02 F6 | 	mov	arg01, local04
00b14     25 41 02 F6 | 	mov	arg02, local02
00b18     26 43 02 F6 | 	mov	arg03, local03
00b1c     FE 56 02 F6 | 	mov	local08, objptr
00b20     29 FD 01 F6 | 	mov	objptr, local06
00b24     2D 54 62 FD | 	call	local07
00b28     2B FD 01 F6 | 	mov	objptr, local08
00b2c     0B 59 02 F6 | 	mov	local09, result1
00b30     00 58 5E F2 | 	cmps	local09, #0 wcz
00b34     24 00 90 3D |  if_ae	jmp	#LR__0020
00b38                 | '         return _seterror(-r);
00b38     2C 3F 6A F6 | 	neg	arg01, local09 wz
00b3c     01 00 00 FF 
00b40     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00b44     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
00b48     01 00 00 FF 
00b4c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00b50     01 16 66 56 |  if_ne	neg	result1, #1
00b54     00 16 06 A6 |  if_e	mov	result1, #0
00b58     04 00 90 FD | 	jmp	#LR__0021
00b5c                 | LR__0020
00b5c                 | '     }
00b5c                 | '     return r;
00b5c     2C 17 02 F6 | 	mov	result1, local09
00b60                 | LR__0021
00b60     D0 F0 03 F6 | 	mov	ptra, fp
00b64     E0 00 A0 FD | 	call	#popregs_
00b68                 | _lseek_ret
00b68     2D 00 64 FD | 	ret
00b6c                 | 
00b6c                 | _ioctl
00b6c     08 9C 05 F6 | 	mov	COUNT_, #8
00b70     D1 00 A0 FD | 	call	#pushregs_
00b74     20 49 02 F6 | 	mov	local01, arg02
00b78     21 4B 02 F6 | 	mov	local02, arg03
00b7c     F8 05 B0 FD | 	call	#___getftab
00b80     0B 4D 0A F6 | 	mov	local03, result1 wz
00b84     1C 00 90 5D |  if_ne	jmp	#LR__0022
00b88                 | '         return _seterror( 5 );
00b88     01 00 00 FF 
00b8c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00b90     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
00b94     01 00 00 FF 
00b98     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00b9c     01 16 66 F6 | 	neg	result1, #1
00ba0     64 00 90 FD | 	jmp	#LR__0024
00ba4                 | LR__0022
00ba4     24 4C 06 F1 | 	add	local03, #36
00ba8     26 4F 02 FB | 	rdlong	local04, local03
00bac     24 4C 86 F1 | 	sub	local03, #36
00bb0     27 51 02 FB | 	rdlong	local05, local04
00bb4     04 4E 06 F1 | 	add	local04, #4
00bb8     27 53 02 FB | 	rdlong	local06, local04
00bbc     26 3F 02 F6 | 	mov	arg01, local03
00bc0     24 41 02 F6 | 	mov	arg02, local01
00bc4     25 43 02 F6 | 	mov	arg03, local02
00bc8     FE 54 02 F6 | 	mov	local07, objptr
00bcc     28 FD 01 F6 | 	mov	objptr, local05
00bd0     2D 52 62 FD | 	call	local06
00bd4     2A FD 01 F6 | 	mov	objptr, local07
00bd8     0B 57 0A F6 | 	mov	local08, result1 wz
00bdc     24 00 90 AD |  if_e	jmp	#LR__0023
00be0                 | '         return _seterror(r);
00be0     01 00 00 FF 
00be4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00be8     05 57 62 FC | 	wrlong	local08, ptr___system__dat__
00bec     01 00 00 FF 
00bf0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00bf4     00 56 0E F2 | 	cmp	local08, #0 wz
00bf8     01 16 66 56 |  if_ne	neg	result1, #1
00bfc     00 16 06 A6 |  if_e	mov	result1, #0
00c00     04 00 90 FD | 	jmp	#LR__0024
00c04                 | LR__0023
00c04                 | '     }
00c04                 | '     return 0;
00c04     00 16 06 F6 | 	mov	result1, #0
00c08                 | LR__0024
00c08     D0 F0 03 F6 | 	mov	ptra, fp
00c0c     E0 00 A0 FD | 	call	#popregs_
00c10                 | _ioctl_ret
00c10     2D 00 64 FD | 	ret
00c14                 | 
00c14                 | _isatty
00c14     00 9C 05 F6 | 	mov	COUNT_, #0
00c18     D1 00 A0 FD | 	call	#pushregs_
00c1c     0C F0 07 F1 | 	add	ptra, #12
00c20     04 A0 05 F1 | 	add	fp, #4
00c24     D0 3E 62 FC | 	wrlong	arg01, fp
00c28     04 A0 05 F1 | 	add	fp, #4
00c2c     D0 42 02 F6 | 	mov	arg03, fp
00c30     08 A0 85 F1 | 	sub	fp, #8
00c34     00 41 06 F6 | 	mov	arg02, #256
00c38     30 FF BF FD | 	call	#_ioctl
00c3c     00 16 0E F2 | 	cmp	result1, #0 wz
00c40                 | '         return 1;
00c40     01 16 06 A6 |  if_e	mov	result1, #1
00c44                 | '     }
00c44                 | '     return 0;
00c44     00 16 06 56 |  if_ne	mov	result1, #0
00c48     D0 F0 03 F6 | 	mov	ptra, fp
00c4c     E0 00 A0 FD | 	call	#popregs_
00c50                 | _isatty_ret
00c50     2D 00 64 FD | 	ret
00c54                 | 
00c54                 | _getcwd
00c54     06 9C 05 F6 | 	mov	COUNT_, #6
00c58     D1 00 A0 FD | 	call	#pushregs_
00c5c     1F 49 02 F6 | 	mov	local01, arg01
00c60     20 4B 02 F6 | 	mov	local02, arg02
00c64     01 00 00 FF 
00c68     84 0C 06 F1 | 	add	ptr__dat__, ##644
00c6c     06 3F 02 F6 | 	mov	arg01, ptr__dat__
00c70     01 00 00 FF 
00c74     84 0C 86 F1 | 	sub	ptr__dat__, ##644
00c78     00 4C 06 F6 | 	mov	local03, #0
00c7c     90 F3 9F FE | 	loc	pa,	#(@LR__0026-@LR__0025)
00c80     B4 00 A0 FD | 	call	#FCACHE_LOAD_
00c84                 | LR__0025
00c84     1F 4F CA FA | 	rdbyte	local04, arg01 wz
00c88     01 4C 06 51 |  if_ne	add	local03, #1
00c8c     01 3E 06 51 |  if_ne	add	arg01, #1
00c90     F0 FF 9F 5D |  if_ne	jmp	#LR__0025
00c94                 | LR__0026
00c94     26 17 02 F6 | 	mov	result1, local03
00c98     02 50 06 F6 | 	mov	local05, #2
00c9c     0B 51 02 F1 | 	add	local05, result1
00ca0     25 51 1A F2 | 	cmp	local05, local02 wcz
00ca4     1C 00 90 ED |  if_be	jmp	#LR__0027
00ca8     01 00 00 FF 
00cac     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00cb0     05 05 68 FC | 	wrlong	#2, ptr___system__dat__
00cb4     01 00 00 FF 
00cb8     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00cbc                 | '         _seterror( 2 );
00cbc                 | '         return  (0) ;
00cbc     00 16 06 F6 | 	mov	result1, #0
00cc0     54 00 90 FD | 	jmp	#LR__0030
00cc4                 | LR__0027
00cc4     01 00 00 FF 
00cc8     84 0C 06 F1 | 	add	ptr__dat__, ##644
00ccc     06 53 C2 FA | 	rdbyte	local06, ptr__dat__
00cd0     01 00 00 FF 
00cd4     84 0C 86 F1 | 	sub	ptr__dat__, ##644
00cd8     07 52 46 F7 | 	zerox	local06, #7
00cdc     2F 52 0E F2 | 	cmp	local06, #47 wz
00ce0     20 00 90 5D |  if_ne	jmp	#LR__0028
00ce4     01 00 00 FF 
00ce8     84 0C 06 F1 | 	add	ptr__dat__, ##644
00cec     06 41 02 F6 | 	mov	arg02, ptr__dat__
00cf0     01 00 00 FF 
00cf4     84 0C 86 F1 | 	sub	ptr__dat__, ##644
00cf8     24 3F 02 F6 | 	mov	arg01, local01
00cfc     08 CF B0 FD | 	call	#__system____builtin_strcpy
00d00     10 00 90 FD | 	jmp	#LR__0029
00d04                 | LR__0028
00d04     87 00 00 FF 
00d08     A4 41 06 F6 | 	mov	arg02, ##@LR__1182
00d0c     24 3F 02 F6 | 	mov	arg01, local01
00d10     F4 CE B0 FD | 	call	#__system____builtin_strcpy
00d14                 | LR__0029
00d14                 | '         __builtin_strcpy(buf, "/") ;
00d14                 | '     }
00d14                 | '     return buf;
00d14     24 17 02 F6 | 	mov	result1, local01
00d18                 | LR__0030
00d18     D0 F0 03 F6 | 	mov	ptra, fp
00d1c     E0 00 A0 FD | 	call	#popregs_
00d20                 | _getcwd_ret
00d20     2D 00 64 FD | 	ret
00d24                 | 
00d24                 | _chdir
00d24     02 9C 05 F6 | 	mov	COUNT_, #2
00d28     D1 00 A0 FD | 	call	#pushregs_
00d2c     40 F0 07 F1 | 	add	ptra, #64
00d30     04 A0 05 F1 | 	add	fp, #4
00d34     D0 3E 62 FC | 	wrlong	arg01, fp
00d38     04 A0 05 F1 | 	add	fp, #4
00d3c     D0 40 02 F6 | 	mov	arg02, fp
00d40     08 A0 85 F1 | 	sub	fp, #8
00d44     00 0E B0 FD | 	call	#_stat
00d48     3C A0 05 F1 | 	add	fp, #60
00d4c     D0 16 62 FC | 	wrlong	result1, fp
00d50     D0 48 0A FB | 	rdlong	local01, fp wz
00d54     3C A0 85 F1 | 	sub	fp, #60
00d58     10 00 90 AD |  if_e	jmp	#LR__0031
00d5c                 | ' #line 139 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
00d5c                 | '         return r;
00d5c     3C A0 05 F1 | 	add	fp, #60
00d60     D0 16 02 FB | 	rdlong	result1, fp
00d64     3C A0 85 F1 | 	sub	fp, #60
00d68     E4 00 90 FD | 	jmp	#LR__0035
00d6c                 | LR__0031
00d6c     10 A0 05 F1 | 	add	fp, #16
00d70     D0 48 02 FB | 	rdlong	local01, fp
00d74     10 A0 85 F1 | 	sub	fp, #16
00d78     78 00 00 FF 
00d7c     00 48 06 F5 | 	and	local01, ##61440
00d80     08 00 00 FF 
00d84     00 48 0E F2 | 	cmp	local01, ##4096 wz
00d88     1C 00 90 AD |  if_e	jmp	#LR__0032
00d8c                 | ' #line 145 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
00d8c                 | '         return _seterror( 13 );
00d8c     01 00 00 FF 
00d90     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00d94     05 1B 68 FC | 	wrlong	#13, ptr___system__dat__
00d98     01 00 00 FF 
00d9c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00da0     01 16 66 F6 | 	neg	result1, #1
00da4     A8 00 90 FD | 	jmp	#LR__0035
00da8                 | LR__0032
00da8     04 A0 05 F1 | 	add	fp, #4
00dac     D0 4A 02 FB | 	rdlong	local02, fp
00db0     04 A0 85 F1 | 	sub	fp, #4
00db4     25 49 C2 FA | 	rdbyte	local01, local02
00db8     2F 48 0E F2 | 	cmp	local01, #47 wz
00dbc     2C 00 90 5D |  if_ne	jmp	#LR__0033
00dc0     01 00 00 FF 
00dc4     84 0C 06 F1 | 	add	ptr__dat__, ##644
00dc8     06 3F 02 F6 | 	mov	arg01, ptr__dat__
00dcc     01 00 00 FF 
00dd0     84 0C 86 F1 | 	sub	ptr__dat__, ##644
00dd4     04 A0 05 F1 | 	add	fp, #4
00dd8     D0 40 02 FB | 	rdlong	arg02, fp
00ddc     04 A0 85 F1 | 	sub	fp, #4
00de0     00 43 06 F6 | 	mov	arg03, #256
00de4     0C 09 B0 FD | 	call	#_strncpy
00de8     60 00 90 FD | 	jmp	#LR__0034
00dec                 | LR__0033
00dec                 | '     return tmpname;
00dec     01 00 00 FF 
00df0     84 0D 06 F1 | 	add	ptr__dat__, ##900
00df4     06 17 02 F6 | 	mov	result1, ptr__dat__
00df8     38 A0 05 F1 | 	add	fp, #56
00dfc     D0 16 62 FC | 	wrlong	result1, fp
00e00     0B 3F 02 F6 | 	mov	arg01, result1
00e04     38 A0 85 F1 | 	sub	fp, #56
00e08     00 0D 86 F1 | 	sub	ptr__dat__, #256
00e0c     06 41 02 F6 | 	mov	arg02, ptr__dat__
00e10     01 00 00 FF 
00e14     84 0C 86 F1 | 	sub	ptr__dat__, ##644
00e18     00 43 06 F6 | 	mov	arg03, #256
00e1c     D4 08 B0 FD | 	call	#_strncpy
00e20     38 A0 05 F1 | 	add	fp, #56
00e24     D0 3E 02 FB | 	rdlong	arg01, fp
00e28     34 A0 85 F1 | 	sub	fp, #52
00e2c     D0 40 02 FB | 	rdlong	arg02, fp
00e30     04 A0 85 F1 | 	sub	fp, #4
00e34     01 00 00 FF 
00e38     84 0C 06 F1 | 	add	ptr__dat__, ##644
00e3c     06 43 02 F6 | 	mov	arg03, ptr__dat__
00e40     01 00 00 FF 
00e44     84 0C 86 F1 | 	sub	ptr__dat__, ##644
00e48     50 2C B0 FD | 	call	#___getvfsforfile
00e4c                 | LR__0034
00e4c                 | '         tmp = __getfilebuffer();
00e4c                 | '         strncpy(tmp, curdir,  (256) );
00e4c                 | '         __getvfsforfile(tmp, path, curdir);
00e4c                 | '     }
00e4c                 | '     return 0;
00e4c     00 16 06 F6 | 	mov	result1, #0
00e50                 | LR__0035
00e50     D0 F0 03 F6 | 	mov	ptra, fp
00e54     E0 00 A0 FD | 	call	#popregs_
00e58                 | _chdir_ret
00e58     2D 00 64 FD | 	ret
00e5c                 | 
00e5c                 | _rmdir
00e5c     07 9C 05 F6 | 	mov	COUNT_, #7
00e60     D1 00 A0 FD | 	call	#pushregs_
00e64     1F 41 02 F6 | 	mov	arg02, arg01
00e68                 | '     return tmpname;
00e68     01 00 00 FF 
00e6c     84 0D 06 F1 | 	add	ptr__dat__, ##900
00e70     06 17 02 F6 | 	mov	result1, ptr__dat__
00e74     01 00 00 FF 
00e78     84 0D 86 F1 | 	sub	ptr__dat__, ##900
00e7c     0B 49 02 F6 | 	mov	local01, result1
00e80     24 3F 02 F6 | 	mov	arg01, local01
00e84     00 42 06 F6 | 	mov	arg03, #0
00e88     10 2C B0 FD | 	call	#___getvfsforfile
00e8c     0B 4B 0A F6 | 	mov	local02, result1 wz
00e90     14 00 90 AD |  if_e	jmp	#LR__0036
00e94     34 4A 06 F1 | 	add	local02, #52
00e98     25 4D 02 FB | 	rdlong	local03, local02
00e9c     34 4A 86 F1 | 	sub	local02, #52
00ea0     26 4F 0A F6 | 	mov	local04, local03 wz
00ea4     1C 00 90 5D |  if_ne	jmp	#LR__0037
00ea8                 | LR__0036
00ea8                 | ' #line 424 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/posixio.c"
00ea8                 | '         return _seterror( 16 );
00ea8     01 00 00 FF 
00eac     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00eb0     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
00eb4     01 00 00 FF 
00eb8     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00ebc     01 16 66 F6 | 	neg	result1, #1
00ec0     58 00 90 FD | 	jmp	#LR__0039
00ec4                 | LR__0037
00ec4     34 4A 06 F1 | 	add	local02, #52
00ec8     25 4F 02 FB | 	rdlong	local04, local02
00ecc     27 4D 02 FB | 	rdlong	local03, local04
00ed0     04 4E 06 F1 | 	add	local04, #4
00ed4     27 51 02 FB | 	rdlong	local05, local04
00ed8     24 3F 02 F6 | 	mov	arg01, local01
00edc     FE 52 02 F6 | 	mov	local06, objptr
00ee0     26 FD 01 F6 | 	mov	objptr, local03
00ee4     2D 50 62 FD | 	call	local05
00ee8     29 FD 01 F6 | 	mov	objptr, local06
00eec     0B 55 0A F6 | 	mov	local07, result1 wz
00ef0     24 00 90 AD |  if_e	jmp	#LR__0038
00ef4                 | '         return _seterror(-r);
00ef4     2A 3F 6A F6 | 	neg	arg01, local07 wz
00ef8     01 00 00 FF 
00efc     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00f00     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
00f04     01 00 00 FF 
00f08     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00f0c     01 16 66 56 |  if_ne	neg	result1, #1
00f10     00 16 06 A6 |  if_e	mov	result1, #0
00f14     04 00 90 FD | 	jmp	#LR__0039
00f18                 | LR__0038
00f18                 | '     }
00f18                 | '     return r;
00f18     2A 17 02 F6 | 	mov	result1, local07
00f1c                 | LR__0039
00f1c     D0 F0 03 F6 | 	mov	ptra, fp
00f20     E0 00 A0 FD | 	call	#popregs_
00f24                 | _rmdir_ret
00f24     2D 00 64 FD | 	ret
00f28                 | 
00f28                 | _mkdir
00f28     08 9C 05 F6 | 	mov	COUNT_, #8
00f2c     D1 00 A0 FD | 	call	#pushregs_
00f30     20 49 02 F6 | 	mov	local01, arg02
00f34                 | '     return tmpname;
00f34     01 00 00 FF 
00f38     84 0D 06 F1 | 	add	ptr__dat__, ##900
00f3c     06 17 02 F6 | 	mov	result1, ptr__dat__
00f40     01 00 00 FF 
00f44     84 0D 86 F1 | 	sub	ptr__dat__, ##900
00f48     0B 4B 02 F6 | 	mov	local02, result1
00f4c     1F 41 02 F6 | 	mov	arg02, arg01
00f50     25 3F 02 F6 | 	mov	arg01, local02
00f54     00 42 06 F6 | 	mov	arg03, #0
00f58     40 2B B0 FD | 	call	#___getvfsforfile
00f5c     0B 4D 0A F6 | 	mov	local03, result1 wz
00f60     08 00 90 AD |  if_e	jmp	#LR__0040
00f64     26 4F 0A FB | 	rdlong	local04, local03 wz
00f68     1C 00 90 5D |  if_ne	jmp	#LR__0041
00f6c                 | LR__0040
00f6c                 | ' #line 444 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/posixio.c"
00f6c                 | '         return _seterror( 16 );
00f6c     01 00 00 FF 
00f70     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00f74     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
00f78     01 00 00 FF 
00f7c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00f80     01 16 66 F6 | 	neg	result1, #1
00f84     5C 00 90 FD | 	jmp	#LR__0043
00f88                 | LR__0041
00f88     30 4C 06 F1 | 	add	local03, #48
00f8c     26 4F 02 FB | 	rdlong	local04, local03
00f90     27 51 02 FB | 	rdlong	local05, local04
00f94     04 4E 06 F1 | 	add	local04, #4
00f98     27 53 02 FB | 	rdlong	local06, local04
00f9c     25 3F 02 F6 | 	mov	arg01, local02
00fa0     24 41 02 F6 | 	mov	arg02, local01
00fa4     FE 54 02 F6 | 	mov	local07, objptr
00fa8     28 FD 01 F6 | 	mov	objptr, local05
00fac     2D 52 62 FD | 	call	local06
00fb0     2A FD 01 F6 | 	mov	objptr, local07
00fb4     0B 57 0A F6 | 	mov	local08, result1 wz
00fb8     24 00 90 AD |  if_e	jmp	#LR__0042
00fbc                 | '         return _seterror(-r);
00fbc     2B 3F 6A F6 | 	neg	arg01, local08 wz
00fc0     01 00 00 FF 
00fc4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
00fc8     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
00fcc     01 00 00 FF 
00fd0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
00fd4     01 16 66 56 |  if_ne	neg	result1, #1
00fd8     00 16 06 A6 |  if_e	mov	result1, #0
00fdc     04 00 90 FD | 	jmp	#LR__0043
00fe0                 | LR__0042
00fe0                 | '     }
00fe0                 | '     return r;
00fe0     2B 17 02 F6 | 	mov	result1, local08
00fe4                 | LR__0043
00fe4     D0 F0 03 F6 | 	mov	ptra, fp
00fe8     E0 00 A0 FD | 	call	#popregs_
00fec                 | _mkdir_ret
00fec     2D 00 64 FD | 	ret
00ff0                 | 
00ff0                 | _unlink
00ff0     07 9C 05 F6 | 	mov	COUNT_, #7
00ff4     D1 00 A0 FD | 	call	#pushregs_
00ff8                 | '     return tmpname;
00ff8     01 00 00 FF 
00ffc     84 0D 06 F1 | 	add	ptr__dat__, ##900
01000     06 17 02 F6 | 	mov	result1, ptr__dat__
01004     01 00 00 FF 
01008     84 0D 86 F1 | 	sub	ptr__dat__, ##900
0100c     0B 49 02 F6 | 	mov	local01, result1
01010     1F 41 02 F6 | 	mov	arg02, arg01
01014     24 3F 02 F6 | 	mov	arg01, local01
01018     00 42 06 F6 | 	mov	arg03, #0
0101c     7C 2A B0 FD | 	call	#___getvfsforfile
01020     0B 4B 0A F6 | 	mov	local02, result1 wz
01024     08 00 90 AD |  if_e	jmp	#LR__0044
01028     25 4D 0A FB | 	rdlong	local03, local02 wz
0102c     1C 00 90 5D |  if_ne	jmp	#LR__0045
01030                 | LR__0044
01030                 | ' #line 404 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/posixio.c"
01030                 | '         return _seterror( 16 );
01030     01 00 00 FF 
01034     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01038     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
0103c     01 00 00 FF 
01040     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01044     01 16 66 F6 | 	neg	result1, #1
01048     58 00 90 FD | 	jmp	#LR__0047
0104c                 | LR__0045
0104c     38 4A 06 F1 | 	add	local02, #56
01050     25 4D 02 FB | 	rdlong	local03, local02
01054     26 4F 02 FB | 	rdlong	local04, local03
01058     04 4C 06 F1 | 	add	local03, #4
0105c     26 51 02 FB | 	rdlong	local05, local03
01060     24 3F 02 F6 | 	mov	arg01, local01
01064     FE 52 02 F6 | 	mov	local06, objptr
01068     27 FD 01 F6 | 	mov	objptr, local04
0106c     2D 50 62 FD | 	call	local05
01070     29 FD 01 F6 | 	mov	objptr, local06
01074     0B 55 0A F6 | 	mov	local07, result1 wz
01078     24 00 90 AD |  if_e	jmp	#LR__0046
0107c                 | '         return _seterror(-r);
0107c     2A 3F 6A F6 | 	neg	arg01, local07 wz
01080     01 00 00 FF 
01084     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01088     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
0108c     01 00 00 FF 
01090     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01094     01 16 66 56 |  if_ne	neg	result1, #1
01098     00 16 06 A6 |  if_e	mov	result1, #0
0109c     04 00 90 FD | 	jmp	#LR__0047
010a0                 | LR__0046
010a0                 | '     }
010a0                 | '     return r;
010a0     2A 17 02 F6 | 	mov	result1, local07
010a4                 | LR__0047
010a4     D0 F0 03 F6 | 	mov	ptra, fp
010a8     E0 00 A0 FD | 	call	#popregs_
010ac                 | _unlink_ret
010ac     2D 00 64 FD | 	ret
010b0                 | 
010b0                 | __execve
010b0     08 9C 05 F6 | 	mov	COUNT_, #8
010b4     D1 00 A0 FD | 	call	#pushregs_
010b8     1F 49 02 F6 | 	mov	local01, arg01
010bc     20 4B 02 F6 | 	mov	local02, arg02
010c0     21 4D 02 F6 | 	mov	local03, arg03
010c4     00 3E 06 F6 | 	mov	arg01, #0
010c8     AC 00 B0 FD | 	call	#___getftab
010cc     0B 4F 02 F6 | 	mov	local04, result1
010d0                 | '     vfs_file_t *f;
010d0                 | ' 
010d0                 | ' 
010d0                 | ' 
010d0                 | ' 
010d0                 | ' 
010d0                 | '     for (fd = 0; fd <  10 ; fd++) {
010d0     00 50 06 F6 | 	mov	local05, #0
010d4     54 EF 9F FE | 	loc	pa,	#(@LR__0049-@LR__0048)
010d8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
010dc                 | LR__0048
010dc     0A 50 5E F2 | 	cmps	local05, #10 wcz
010e0     24 00 90 3D |  if_ae	jmp	#LR__0050
010e4     28 53 02 F6 | 	mov	local06, local05
010e8     01 52 66 F0 | 	shl	local06, #1
010ec     28 53 02 F1 | 	add	local06, local05
010f0     04 52 66 F0 | 	shl	local06, #4
010f4     27 53 02 F1 | 	add	local06, local04
010f8     08 52 06 F1 | 	add	local06, #8
010fc     29 55 0A FB | 	rdlong	local07, local06 wz
01100     01 50 06 51 |  if_ne	add	local05, #1
01104     D4 FF 9F 5D |  if_ne	jmp	#LR__0048
01108                 | LR__0049
01108                 | LR__0050
01108     0A 50 0E F2 | 	cmp	local05, #10 wz
0110c     1C 00 90 5D |  if_ne	jmp	#LR__0051
01110                 | '         return _seterror( 11 );
01110     01 00 00 FF 
01114     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01118     05 17 68 FC | 	wrlong	#11, ptr___system__dat__
0111c     01 00 00 FF 
01120     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01124     01 16 66 F6 | 	neg	result1, #1
01128     40 00 90 FD | 	jmp	#LR__0052
0112c                 | LR__0051
0112c     28 57 02 F6 | 	mov	local08, local05
01130     01 56 66 F0 | 	shl	local08, #1
01134     28 57 02 F1 | 	add	local08, local05
01138     04 56 66 F0 | 	shl	local08, #4
0113c     27 57 02 F1 | 	add	local08, local04
01140     2B 3F 02 F6 | 	mov	arg01, local08
01144     24 41 02 F6 | 	mov	arg02, local01
01148     00 42 06 F6 | 	mov	arg03, #0
0114c     A4 45 06 F6 | 	mov	arg04, #420
01150     B4 0A B0 FD | 	call	#__openraw
01154     00 16 0E F2 | 	cmp	result1, #0 wz
01158                 | '         return r;
01158     10 00 90 5D |  if_ne	jmp	#LR__0052
0115c                 | '     }
0115c                 | '     return _vfsexecve(f, argv, envp);
0115c     2B 3F 02 F6 | 	mov	arg01, local08
01160     25 41 02 F6 | 	mov	arg02, local02
01164     26 43 02 F6 | 	mov	arg03, local03
01168     54 32 B0 FD | 	call	#__vfsexecve
0116c                 | LR__0052
0116c     D0 F0 03 F6 | 	mov	ptra, fp
01170     E0 00 A0 FD | 	call	#popregs_
01174                 | __execve_ret
01174     2D 00 64 FD | 	ret
01178                 | 
01178                 | ___getftab
01178     0A 3E 1E F2 | 	cmp	arg01, #10 wcz
0117c                 | '         return 0;
0117c     00 16 06 36 |  if_ae	mov	result1, #0
01180     24 00 90 3D |  if_ae	jmp	#___getftab_ret
01184                 | '     }
01184                 | '     return &__filetab[i];
01184     1F 17 02 F6 | 	mov	result1, arg01
01188     01 16 66 F0 | 	shl	result1, #1
0118c     1F 17 02 F1 | 	add	result1, arg01
01190     04 16 66 F0 | 	shl	result1, #4
01194     02 00 00 FF 
01198     84 0C 06 F1 | 	add	ptr__dat__, ##1156
0119c     06 17 02 F1 | 	add	result1, ptr__dat__
011a0     02 00 00 FF 
011a4     84 0C 86 F1 | 	sub	ptr__dat__, ##1156
011a8                 | ___getftab_ret
011a8     2D 00 64 FD | 	ret
011ac                 | 
011ac                 | _fputc
011ac     04 9C 05 F6 | 	mov	COUNT_, #4
011b0     D1 00 A0 FD | 	call	#pushregs_
011b4                 | '     return  (((f)->putcf)( (c), (f) )) ;
011b4     18 40 06 F1 | 	add	arg02, #24
011b8     20 49 02 FB | 	rdlong	local01, arg02
011bc     18 40 86 F1 | 	sub	arg02, #24
011c0     24 4B 02 FB | 	rdlong	local02, local01
011c4     04 48 06 F1 | 	add	local01, #4
011c8     24 4D 02 FB | 	rdlong	local03, local01
011cc     FE 4E 02 F6 | 	mov	local04, objptr
011d0     25 FD 01 F6 | 	mov	objptr, local02
011d4     2D 4C 62 FD | 	call	local03
011d8     27 FD 01 F6 | 	mov	objptr, local04
011dc     D0 F0 03 F6 | 	mov	ptra, fp
011e0     E0 00 A0 FD | 	call	#popregs_
011e4                 | _fputc_ret
011e4     2D 00 64 FD | 	ret
011e8                 | 
011e8                 | _fgetc
011e8     04 9C 05 F6 | 	mov	COUNT_, #4
011ec     D1 00 A0 FD | 	call	#pushregs_
011f0                 | '     return  (((f)->getcf)( (f) )) ;
011f0     1C 3E 06 F1 | 	add	arg01, #28
011f4     1F 49 02 FB | 	rdlong	local01, arg01
011f8     1C 3E 86 F1 | 	sub	arg01, #28
011fc     24 4B 02 FB | 	rdlong	local02, local01
01200     04 48 06 F1 | 	add	local01, #4
01204     24 4D 02 FB | 	rdlong	local03, local01
01208     FE 4E 02 F6 | 	mov	local04, objptr
0120c     25 FD 01 F6 | 	mov	objptr, local02
01210     2D 4C 62 FD | 	call	local03
01214     27 FD 01 F6 | 	mov	objptr, local04
01218     D0 F0 03 F6 | 	mov	ptra, fp
0121c     E0 00 A0 FD | 	call	#popregs_
01220                 | _fgetc_ret
01220     2D 00 64 FD | 	ret
01224                 | 
01224                 | _snprintf
01224     0A 9C 05 F6 | 	mov	COUNT_, #10
01228     D1 00 A0 FD | 	call	#pushregs_
0122c     24 F0 07 F1 | 	add	ptra, #36
01230     04 A0 05 F1 | 	add	fp, #4
01234     D0 3E 62 FC | 	wrlong	arg01, fp
01238     04 A0 05 F1 | 	add	fp, #4
0123c     D0 40 62 FC | 	wrlong	arg02, fp
01240     04 A0 05 F1 | 	add	fp, #4
01244     D0 42 62 FC | 	wrlong	arg03, fp
01248     04 A0 05 F1 | 	add	fp, #4
0124c     D0 44 62 FC | 	wrlong	arg04, fp
01250     0C A0 85 F1 | 	sub	fp, #12
01254     D0 48 02 FB | 	rdlong	local01, fp
01258     14 A0 05 F1 | 	add	fp, #20
0125c     D0 48 62 FC | 	wrlong	local01, fp
01260     14 A0 85 F1 | 	sub	fp, #20
01264     D0 48 02 FB | 	rdlong	local01, fp
01268     04 A0 05 F1 | 	add	fp, #4
0126c     D0 4A 02 FB | 	rdlong	local02, fp
01270     25 49 02 F1 | 	add	local01, local02
01274     14 A0 05 F1 | 	add	fp, #20
01278     D0 48 62 FC | 	wrlong	local01, fp
0127c     0C A0 85 F1 | 	sub	fp, #12
01280     D0 48 02 FB | 	rdlong	local01, fp
01284     D0 48 62 FC | 	wrlong	local01, fp
01288     08 A0 05 F1 | 	add	fp, #8
0128c     D0 3E 02 F6 | 	mov	arg01, fp
01290     18 A0 85 F1 | 	sub	fp, #24
01294     03 41 02 F6 | 	mov	arg02, ptr___struct___anon_580868bc00000005_sputc_
01298     BC C9 B0 FD | 	call	#__system___make_methodptr
0129c     0B 3F 02 F6 | 	mov	arg01, result1
012a0     0C A0 05 F1 | 	add	fp, #12
012a4     D0 4C 02 FB | 	rdlong	local03, fp
012a8     04 A0 05 F1 | 	add	fp, #4
012ac     D0 4E 02 F6 | 	mov	local04, fp
012b0     27 51 02 F6 | 	mov	local05, local04
012b4     26 41 02 F6 | 	mov	arg02, local03
012b8     28 43 02 F6 | 	mov	arg03, local05
012bc     10 A0 85 F1 | 	sub	fp, #16
012c0     D0 31 B0 FD | 	call	#__dofmt
012c4     0B 53 02 F6 | 	mov	local06, result1
012c8     14 A0 05 F1 | 	add	fp, #20
012cc     D0 52 62 FC | 	wrlong	local06, fp
012d0     0C A0 85 F1 | 	sub	fp, #12
012d4     D0 48 02 FB | 	rdlong	local01, fp
012d8     08 A0 85 F1 | 	sub	fp, #8
012dc     00 48 1E F2 | 	cmp	local01, #0 wcz
012e0     40 00 90 ED |  if_be	jmp	#LR__0053
012e4     18 A0 05 F1 | 	add	fp, #24
012e8     D0 4A 02 FB | 	rdlong	local02, fp
012ec     04 A0 05 F1 | 	add	fp, #4
012f0     D0 54 02 FB | 	rdlong	local07, fp
012f4     1C A0 85 F1 | 	sub	fp, #28
012f8     2A 57 02 F6 | 	mov	local08, local07
012fc     2B 4B 0A F2 | 	cmp	local02, local08 wz
01300     20 00 90 5D |  if_ne	jmp	#LR__0053
01304     18 A0 05 F1 | 	add	fp, #24
01308     D0 58 02 FB | 	rdlong	local09, fp
0130c     2C 49 02 F6 | 	mov	local01, local09
01310     2C 5B 02 F6 | 	mov	local10, local09
01314     2D 4B 02 F6 | 	mov	local02, local10
01318     01 4A 86 F1 | 	sub	local02, #1
0131c     D0 4A 62 FC | 	wrlong	local02, fp
01320     18 A0 85 F1 | 	sub	fp, #24
01324                 | LR__0053
01324     18 A0 05 F1 | 	add	fp, #24
01328     00 3E 06 F6 | 	mov	arg01, #0
0132c     FE 4A 02 F6 | 	mov	local02, objptr
01330     D0 FC 01 F6 | 	mov	objptr, fp
01334     18 A0 85 F1 | 	sub	fp, #24
01338     8C C6 B0 FD | 	call	#__struct___anon_580868bc00000005_sputc
0133c     25 FD 01 F6 | 	mov	objptr, local02
01340                 | '         S.ptr--;
01340                 | '     }
01340                 | '     S.sputc(0);
01340                 | '     return r+1;
01340     14 A0 05 F1 | 	add	fp, #20
01344     D0 16 02 FB | 	rdlong	result1, fp
01348     14 A0 85 F1 | 	sub	fp, #20
0134c     01 16 06 F1 | 	add	result1, #1
01350     D0 F0 03 F6 | 	mov	ptra, fp
01354     E0 00 A0 FD | 	call	#popregs_
01358                 | _snprintf_ret
01358     2D 00 64 FD | 	ret
0135c                 | 
0135c                 | _fputs
0135c     04 9C 05 F6 | 	mov	COUNT_, #4
01360     D1 00 A0 FD | 	call	#pushregs_
01364     1F 49 02 F6 | 	mov	local01, arg01
01368     20 4B 02 F6 | 	mov	local02, arg02
0136c     00 4C 06 F6 | 	mov	local03, #0
01370                 | '     while ( (c = *s++) != 0 ) {
01370                 | LR__0054
01370     24 4F CA FA | 	rdbyte	local04, local01 wz
01374     01 48 06 F1 | 	add	local01, #1
01378     1C 00 90 AD |  if_e	jmp	#LR__0055
0137c     27 3F 02 F6 | 	mov	arg01, local04
01380     25 41 02 F6 | 	mov	arg02, local02
01384     24 FE BF FD | 	call	#_fputc
01388     00 16 5E F2 | 	cmps	result1, #0 wcz
0138c     0C 00 90 CD |  if_b	jmp	#LR__0056
01390     01 4C 06 F1 | 	add	local03, #1
01394     D8 FF 9F FD | 	jmp	#LR__0054
01398                 | LR__0055
01398                 | '         q++;
01398                 | '     }
01398                 | '     return q;
01398     26 17 02 F6 | 	mov	result1, local03
0139c                 | LR__0056
0139c     D0 F0 03 F6 | 	mov	ptra, fp
013a0     E0 00 A0 FD | 	call	#popregs_
013a4                 | _fputs_ret
013a4     2D 00 64 FD | 	ret
013a8                 | 
013a8                 | _fgets
013a8     09 9C 05 F6 | 	mov	COUNT_, #9
013ac     D1 00 A0 FD | 	call	#pushregs_
013b0     1F 49 02 F6 | 	mov	local01, arg01
013b4     20 4B 02 F6 | 	mov	local02, arg02
013b8     21 4D 02 F6 | 	mov	local03, arg03
013bc     00 4E 06 F6 | 	mov	local04, #0
013c0     26 3F 02 F6 | 	mov	arg01, local03
013c4     F8 02 B0 FD | 	call	#_fileno
013c8     0B 51 02 F6 | 	mov	local05, result1
013cc     28 3F 02 F6 | 	mov	arg01, local05
013d0     40 F8 BF FD | 	call	#_isatty
013d4     0B 53 02 F6 | 	mov	local06, result1
013d8     29 55 02 F6 | 	mov	local07, local06
013dc     25 57 02 F6 | 	mov	local08, local02
013e0     01 56 86 F1 | 	sub	local08, #1
013e4     2B 4B 02 F6 | 	mov	local02, local08
013e8                 | ' 
013e8                 | '   --size;
013e8                 | '   while (count < size) {
013e8                 | LR__0057
013e8     25 4F 5A F2 | 	cmps	local04, local02 wcz
013ec     5C 00 90 3D |  if_ae	jmp	#LR__0062
013f0     26 3F 02 F6 | 	mov	arg01, local03
013f4     F0 FD BF FD | 	call	#_fgetc
013f8     0B 59 02 F6 | 	mov	local09, result1
013fc     00 58 5E F2 | 	cmps	local09, #0 wcz
01400     48 00 90 CD |  if_b	jmp	#LR__0062
01404     00 54 0E F2 | 	cmp	local07, #0 wz
01408     28 00 90 AD |  if_e	jmp	#LR__0061
0140c     0D 58 0E F2 | 	cmp	local09, #13 wz
01410     0A 58 06 A6 |  if_e	mov	local09, #10
01414     1C 00 90 AD |  if_e	jmp	#LR__0060
01418     08 58 0E F2 | 	cmp	local09, #8 wz
0141c     08 00 90 AD |  if_e	jmp	#LR__0058
01420     7F 58 0E F2 | 	cmp	local09, #127 wz
01424     0C 00 90 5D |  if_ne	jmp	#LR__0059
01428                 | LR__0058
01428     00 4E 5E F2 | 	cmps	local04, #0 wcz
0142c     01 4E 86 11 |  if_a	sub	local04, #1
01430                 | '                 --count;
01430                 | '             }
01430                 | '             continue;
01430     B4 FF 9F FD | 	jmp	#LR__0057
01434                 | LR__0059
01434                 | LR__0060
01434                 | LR__0061
01434     27 53 02 F6 | 	mov	local06, local04
01438     24 53 02 F1 | 	add	local06, local01
0143c     29 59 42 FC | 	wrbyte	local09, local06
01440     0A 58 0E F2 | 	cmp	local09, #10 wz
01444     01 4E 06 F1 | 	add	local04, #1
01448     9C FF 9F 5D |  if_ne	jmp	#LR__0057
0144c                 | LR__0062
0144c     27 57 02 F6 | 	mov	local08, local04
01450     24 57 02 F1 | 	add	local08, local01
01454     2B 01 48 FC | 	wrbyte	#0, local08
01458                 | '   }
01458                 | '   buf[count] = 0;
01458                 | '   return (count > 0) ? buf :  (0) ;
01458     00 4E 5E F2 | 	cmps	local04, #0 wcz
0145c     24 57 02 16 |  if_a	mov	local08, local01
01460     00 56 06 E6 |  if_be	mov	local08, #0
01464     2B 17 02 F6 | 	mov	result1, local08
01468     D0 F0 03 F6 | 	mov	ptra, fp
0146c     E0 00 A0 FD | 	call	#popregs_
01470                 | _fgets_ret
01470     2D 00 64 FD | 	ret
01474                 | 
01474                 | _fopen
01474     10 9C 05 F6 | 	mov	COUNT_, #16
01478     D1 00 A0 FD | 	call	#pushregs_
0147c     1F 49 02 F6 | 	mov	local01, arg01
01480     20 4B 02 F6 | 	mov	local02, arg02
01484     00 4C 06 F6 | 	mov	local03, #0
01488     00 4E 06 F6 | 	mov	local04, #0
0148c     00 50 06 F6 | 	mov	local05, #0
01490     00 52 06 F6 | 	mov	local06, #0
01494     00 54 06 F6 | 	mov	local07, #0
01498     00 56 06 F6 | 	mov	local08, #0
0149c                 | '     vfs_file_t *ftab;
0149c                 | ' 
0149c                 | '     while ((c = *mode++) != 0) {
0149c                 | LR__0063
0149c     25 59 02 F6 | 	mov	local09, local02
014a0     25 5B 02 F6 | 	mov	local10, local02
014a4     01 5A 06 F1 | 	add	local10, #1
014a8     2D 4B 02 F6 | 	mov	local02, local10
014ac     2C 5D C2 FA | 	rdbyte	local11, local09
014b0     2E 5F 0A F6 | 	mov	local12, local11 wz
014b4     B0 00 90 AD |  if_e	jmp	#LR__0070
014b8                 | '         switch (c) {
014b8     2F 61 02 F6 | 	mov	local13, local12
014bc     72 60 0E F2 | 	cmp	local13, #114 wz
014c0     24 00 90 AD |  if_e	jmp	#LR__0064
014c4     77 60 0E F2 | 	cmp	local13, #119 wz
014c8     24 00 90 AD |  if_e	jmp	#LR__0065
014cc     61 60 0E F2 | 	cmp	local13, #97 wz
014d0     2C 00 90 AD |  if_e	jmp	#LR__0066
014d4     62 60 0E F2 | 	cmp	local13, #98 wz
014d8     34 00 90 AD |  if_e	jmp	#LR__0067
014dc     2B 60 0E F2 | 	cmp	local13, #43 wz
014e0     34 00 90 AD |  if_e	jmp	#LR__0068
014e4     64 00 90 FD | 	jmp	#LR__0069
014e8                 | LR__0064
014e8     01 4C 06 F6 | 	mov	local03, #1
014ec                 | '             want_read = 1;
014ec                 | '             break;
014ec     AC FF 9F FD | 	jmp	#LR__0063
014f0                 | LR__0065
014f0     01 54 06 F6 | 	mov	local07, #1
014f4     01 56 06 F6 | 	mov	local08, #1
014f8     01 4E 06 F6 | 	mov	local04, #1
014fc                 | '             want_create = 1;
014fc                 | '             want_trunc = 1;
014fc                 | '             want_write = 1;
014fc                 | '             break;
014fc     9C FF 9F FD | 	jmp	#LR__0063
01500                 | LR__0066
01500     01 4E 06 F6 | 	mov	local04, #1
01504     01 54 06 F6 | 	mov	local07, #1
01508     01 50 06 F6 | 	mov	local05, #1
0150c                 | '             want_write = 1;
0150c                 | '             want_create = 1;
0150c                 | '             want_append = 1;
0150c                 | '             break;
0150c     8C FF 9F FD | 	jmp	#LR__0063
01510                 | LR__0067
01510     01 52 06 F6 | 	mov	local06, #1
01514                 | '             want_binary = 1;
01514                 | '             break;
01514     84 FF 9F FD | 	jmp	#LR__0063
01518                 | LR__0068
01518     00 4C 0E F2 | 	cmp	local03, #0 wz
0151c     01 4E 06 56 |  if_ne	mov	local04, #1
01520     78 FF 9F 5D |  if_ne	jmp	#LR__0063
01524     00 4E 0E F2 | 	cmp	local04, #0 wz
01528     01 4C 06 56 |  if_ne	mov	local03, #1
0152c                 | '                 want_read = 1;
0152c                 | '                 break;
0152c     6C FF 9F 5D |  if_ne	jmp	#LR__0063
01530     01 00 00 FF 
01534     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01538     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
0153c     01 00 00 FF 
01540     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01544                 | '                 _seterror( 10 );
01544                 | '                 return 0;
01544     00 16 06 F6 | 	mov	result1, #0
01548     CC 00 90 FD | 	jmp	#LR__0075
0154c                 | '             }
0154c                 | '             break;
0154c                 | LR__0069
0154c     01 00 00 FF 
01550     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01554     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
01558     01 00 00 FF 
0155c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01560                 | '             _seterror( 10 );
01560                 | '             return 0;
01560     00 16 06 F6 | 	mov	result1, #0
01564     B0 00 90 FD | 	jmp	#LR__0075
01568                 | LR__0070
01568     00 4C 0E F2 | 	cmp	local03, #0 wz
0156c     14 00 90 AD |  if_e	jmp	#LR__0071
01570     00 4E 0E F2 | 	cmp	local04, #0 wz
01574     02 62 06 56 |  if_ne	mov	local14, #2
01578     30 00 90 5D |  if_ne	jmp	#LR__0073
0157c     00 62 06 F6 | 	mov	local14, #0
01580     28 00 90 FD | 	jmp	#LR__0073
01584                 | LR__0071
01584     00 4E 0E F2 | 	cmp	local04, #0 wz
01588     01 62 06 56 |  if_ne	mov	local14, #1
0158c     1C 00 90 5D |  if_ne	jmp	#LR__0072
01590     01 00 00 FF 
01594     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01598     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
0159c     01 00 00 FF 
015a0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
015a4                 | '         _seterror( 10 );
015a4                 | '         return 0;
015a4     00 16 06 F6 | 	mov	result1, #0
015a8     6C 00 90 FD | 	jmp	#LR__0075
015ac                 | LR__0072
015ac                 | LR__0073
015ac     00 50 0E F2 | 	cmp	local05, #0 wz
015b0     20 62 46 55 |  if_ne	or	local14, #32
015b4     00 54 0E F2 | 	cmp	local07, #0 wz
015b8     04 62 46 55 |  if_ne	or	local14, #4
015bc     00 56 0E F2 | 	cmp	local08, #0 wz
015c0     08 62 46 55 |  if_ne	or	local14, #8
015c4     24 3F 02 F6 | 	mov	arg01, local01
015c8     31 41 02 F6 | 	mov	arg02, local14
015cc     B6 43 06 F6 | 	mov	arg03, #438
015d0     68 F2 BF FD | 	call	#_open
015d4     0B 65 02 F6 | 	mov	local15, result1
015d8     00 64 5E F2 | 	cmps	local15, #0 wcz
015dc                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/stdio/fopen.c"
015dc                 | '         return 0;
015dc     00 16 06 C6 |  if_b	mov	result1, #0
015e0     34 00 90 CD |  if_b	jmp	#LR__0075
015e4     32 3F 02 F6 | 	mov	arg01, local15
015e8     8C FB BF FD | 	call	#___getftab
015ec     0B 67 02 F6 | 	mov	local16, result1
015f0     32 3F 02 F6 | 	mov	arg01, local15
015f4     1C F6 BF FD | 	call	#_isatty
015f8     00 16 0E F2 | 	cmp	result1, #0 wz
015fc     14 00 90 AD |  if_e	jmp	#LR__0074
01600     08 66 06 F1 | 	add	local16, #8
01604     33 5D 02 FB | 	rdlong	local11, local16
01608     00 5D 46 F5 | 	or	local11, #256
0160c     33 5D 62 FC | 	wrlong	local11, local16
01610     08 66 86 F1 | 	sub	local16, #8
01614                 | LR__0074
01614                 | '         ftab->state |=  (0x100) ;
01614                 | '     }
01614                 | '     return ftab;
01614     33 17 02 F6 | 	mov	result1, local16
01618                 | LR__0075
01618     D0 F0 03 F6 | 	mov	ptra, fp
0161c     E0 00 A0 FD | 	call	#popregs_
01620                 | _fopen_ret
01620     2D 00 64 FD | 	ret
01624                 | 
01624                 | _perror
01624     03 9C 05 F6 | 	mov	COUNT_, #3
01628     D1 00 A0 FD | 	call	#pushregs_
0162c     1F 49 02 F6 | 	mov	local01, arg01
01630     01 00 00 FF 
01634     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01638     05 17 02 FB | 	rdlong	result1, ptr___system__dat__
0163c     01 00 00 FF 
01640     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01644     0B 4B 02 F6 | 	mov	local02, result1
01648     02 3E 06 F6 | 	mov	arg01, #2
0164c     28 FB BF FD | 	call	#___getftab
01650     0B 41 02 F6 | 	mov	arg02, result1
01654     24 3F 02 F6 | 	mov	arg01, local01
01658     00 FD BF FD | 	call	#_fputs
0165c     87 00 00 FF 
01660     A6 4D 06 F6 | 	mov	local03, ##@LR__1183
01664     02 3E 06 F6 | 	mov	arg01, #2
01668     0C FB BF FD | 	call	#___getftab
0166c     0B 41 02 F6 | 	mov	arg02, result1
01670     26 3F 02 F6 | 	mov	arg01, local03
01674     E4 FC BF FD | 	call	#_fputs
01678     25 3F 02 F6 | 	mov	arg01, local02
0167c                 | ' {
0167c                 | '     return _strerror(errnum);
0167c     3C 38 B0 FD | 	call	#__strerror
01680     0B 4D 02 F6 | 	mov	local03, result1
01684     02 3E 06 F6 | 	mov	arg01, #2
01688     EC FA BF FD | 	call	#___getftab
0168c     0B 41 02 F6 | 	mov	arg02, result1
01690     26 3F 02 F6 | 	mov	arg01, local03
01694     C4 FC BF FD | 	call	#_fputs
01698     87 00 00 FF 
0169c     A9 4D 06 F6 | 	mov	local03, ##@LR__1184
016a0     02 3E 06 F6 | 	mov	arg01, #2
016a4     D0 FA BF FD | 	call	#___getftab
016a8     0B 41 02 F6 | 	mov	arg02, result1
016ac     26 3F 02 F6 | 	mov	arg01, local03
016b0     A8 FC BF FD | 	call	#_fputs
016b4     D0 F0 03 F6 | 	mov	ptra, fp
016b8     E0 00 A0 FD | 	call	#popregs_
016bc                 | _perror_ret
016bc     2D 00 64 FD | 	ret
016c0                 | 
016c0                 | _fileno
016c0     01 9C 05 F6 | 	mov	COUNT_, #1
016c4     D1 00 A0 FD | 	call	#pushregs_
016c8                 | ' {
016c8                 | '     return (f -  __getftab(0) );
016c8     1F 49 02 F6 | 	mov	local01, arg01
016cc     00 3E 06 F6 | 	mov	arg01, #0
016d0     A4 FA BF FD | 	call	#___getftab
016d4     0B 49 82 F1 | 	sub	local01, result1
016d8     24 9D 02 F6 | 	mov	muldiva_, local01
016dc     30 9E 06 F6 | 	mov	muldivb_, #48
016e0     ED 00 A0 FD | 	call	#unsdivide_
016e4     4F 17 02 F6 | 	mov	result1, muldivb_
016e8     D0 F0 03 F6 | 	mov	ptra, fp
016ec     E0 00 A0 FD | 	call	#popregs_
016f0                 | _fileno_ret
016f0     2D 00 64 FD | 	ret
016f4                 | 
016f4                 | _strncpy
016f4     1F 29 02 F6 | 	mov	_var01, arg01
016f8     28 E9 9F FE | 	loc	pa,	#(@LR__0077-@LR__0076)
016fc     B4 00 A0 FD | 	call	#FCACHE_LOAD_
01700                 | ' 
01700                 | ' 	dscan = dst;
01700                 | ' 	sscan = src;
01700                 | ' 	count = n;
01700                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
01700                 | LR__0076
01700     01 42 86 F1 | 	sub	arg03, #1
01704     00 42 5E F2 | 	cmps	arg03, #0 wcz
01708     18 00 90 CD |  if_b	jmp	#LR__0078
0170c     20 2B C2 FA | 	rdbyte	_var02, arg02
01710     14 2B 42 FC | 	wrbyte	_var02, _var01
01714     01 40 06 F1 | 	add	arg02, #1
01718     14 2D CA FA | 	rdbyte	_var03, _var01 wz
0171c                 | ' 		continue;
0171c     01 28 06 F1 | 	add	_var01, #1
01720     DC FF 9F 5D |  if_ne	jmp	#LR__0076
01724                 | LR__0077
01724                 | LR__0078
01724     EC E8 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
01728     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0172c                 | ' 	while (--count >= 0)
0172c                 | LR__0079
0172c     01 42 86 F1 | 	sub	arg03, #1
01730     00 42 5E F2 | 	cmps	arg03, #0 wcz
01734     14 01 48 3C |  if_ae	wrbyte	#0, _var01
01738     01 28 06 31 |  if_ae	add	_var01, #1
0173c     EC FF 9F 3D |  if_ae	jmp	#LR__0079
01740                 | LR__0080
01740                 | ' 		*dscan++ = '\0';
01740                 | ' 	return(dst);
01740     1F 17 02 F6 | 	mov	result1, arg01
01744                 | _strncpy_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | _strncat
01748     1F 29 02 F6 | 	mov	_var01, arg01
0174c     20 2B 02 F6 | 	mov	_var02, arg02
01750     21 2D 02 F6 | 	mov	_var03, arg03
01754     15 2F 0A F6 | 	mov	_var04, _var02 wz
01758     68 00 90 AD |  if_e	jmp	#LR__0085
0175c     00 2C 1E F2 | 	cmp	_var03, #0 wcz
01760     60 00 90 ED |  if_be	jmp	#LR__0085
01764                 | ' 	{
01764                 | ' 	    for (dscan = dst; *dscan != '\0'; dscan++)
01764     14 31 02 F6 | 	mov	_var05, _var01
01768     E0 E8 9F FE | 	loc	pa,	#(@LR__0083-@LR__0081)
0176c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
01770                 | LR__0081
01770     18 33 CA FA | 	rdbyte	_var06, _var05 wz
01774                 | ' 		continue;
01774     01 30 06 51 |  if_ne	add	_var05, #1
01778     F4 FF 9F 5D |  if_ne	jmp	#LR__0081
0177c     16 35 02 F6 | 	mov	_var07, _var03
01780                 | ' 	    count = n;
01780                 | ' 	    while ((c = *sscan++) != '\0' && --count >= 0)
01780                 | LR__0082
01780     17 37 02 F6 | 	mov	_var08, _var04
01784     17 39 02 F6 | 	mov	_var09, _var04
01788     01 38 06 F1 | 	add	_var09, #1
0178c     1C 2F 02 F6 | 	mov	_var04, _var09
01790     1B 3B C2 FA | 	rdbyte	_var10, _var08
01794     1D 33 02 F6 | 	mov	_var06, _var10
01798     07 32 4E F7 | 	zerox	_var06, #7 wz
0179c     1C 00 90 AD |  if_e	jmp	#LR__0084
017a0     1A 3D 02 F6 | 	mov	_var11, _var07
017a4     01 3C 86 F1 | 	sub	_var11, #1
017a8     1E 35 02 F6 | 	mov	_var07, _var11
017ac     00 34 5E F2 | 	cmps	_var07, #0 wcz
017b0     18 3B 42 3C |  if_ae	wrbyte	_var10, _var05
017b4     01 30 06 31 |  if_ae	add	_var05, #1
017b8     C4 FF 9F 3D |  if_ae	jmp	#LR__0082
017bc                 | LR__0083
017bc                 | LR__0084
017bc     00 32 06 F6 | 	mov	_var06, #0
017c0     18 01 48 FC | 	wrbyte	#0, _var05
017c4                 | LR__0085
017c4                 | ' 		*dscan++ = c;
017c4                 | ' 	    *dscan = '\0';
017c4                 | ' 	}
017c4                 | ' 	return(dst);
017c4     14 17 02 F6 | 	mov	result1, _var01
017c8                 | _strncat_ret
017c8     2D 00 64 FD | 	ret
017cc                 | 
017cc                 | _strcmp
017cc     1F 29 0A F6 | 	mov	_var01, arg01 wz
017d0     14 00 90 5D |  if_ne	jmp	#LR__0086
017d4                 | '             return scan2 ? -1 : 0;
017d4     00 40 0E F2 | 	cmp	arg02, #0 wz
017d8     01 2A 66 56 |  if_ne	neg	_var02, #1
017dc     00 2A 06 A6 |  if_e	mov	_var02, #0
017e0     15 17 02 F6 | 	mov	result1, _var02
017e4     68 00 90 FD | 	jmp	#_strcmp_ret
017e8                 | LR__0086
017e8     00 40 0E F2 | 	cmp	arg02, #0 wz
017ec     01 16 06 A6 |  if_e	mov	result1, #1
017f0     5C 00 90 AD |  if_e	jmp	#_strcmp_ret
017f4     34 E8 9F FE | 	loc	pa,	#(@LR__0088-@LR__0087)
017f8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
017fc                 | ' 
017fc                 | ' 	do {
017fc                 | LR__0087
017fc     14 2D CA FA | 	rdbyte	_var03, _var01 wz
01800     20 2F 02 F6 | 	mov	_var04, arg02
01804     20 31 02 F6 | 	mov	_var05, arg02
01808     01 30 06 F1 | 	add	_var05, #1
0180c     18 41 02 F6 | 	mov	arg02, _var05
01810     17 2B C2 FA | 	rdbyte	_var02, _var04
01814     15 33 02 F6 | 	mov	_var06, _var02
01818     01 28 06 F1 | 	add	_var01, #1
0181c     08 00 90 AD |  if_e	jmp	#LR__0089
01820     19 2D 0A F2 | 	cmp	_var03, _var06 wz
01824     D4 FF 9F AD |  if_e	jmp	#LR__0087
01828                 | LR__0088
01828                 | LR__0089
01828     19 2D 0A F2 | 	cmp	_var03, _var06 wz
0182c                 | ' 		return(0);
0182c     00 16 06 A6 |  if_e	mov	result1, #0
01830     1C 00 90 AD |  if_e	jmp	#_strcmp_ret
01834     00 2C 0E F2 | 	cmp	_var03, #0 wz
01838                 | ' 		return(-1);
01838     01 16 66 A6 |  if_e	neg	result1, #1
0183c     10 00 90 AD |  if_e	jmp	#_strcmp_ret
01840     00 32 0E F2 | 	cmp	_var06, #0 wz
01844                 | ' 		return(1);
01844     01 16 06 A6 |  if_e	mov	result1, #1
01848                 | ' 		return(c1 - c2);
01848     16 17 02 56 |  if_ne	mov	result1, _var03
0184c     19 17 82 51 |  if_ne	sub	result1, _var06
01850                 | _strcmp_ret
01850     2D 00 64 FD | 	ret
01854                 | 
01854                 | _strncmp
01854     1F 29 0A F6 | 	mov	_var01, arg01 wz
01858     20 2B 02 F6 | 	mov	_var02, arg02
0185c     21 2D 02 F6 | 	mov	_var03, arg03
01860     14 00 90 5D |  if_ne	jmp	#LR__0090
01864                 | ' 		return scan2 ? -1 : 0;
01864     00 2A 0E F2 | 	cmp	_var02, #0 wz
01868     01 2E 66 56 |  if_ne	neg	_var04, #1
0186c     00 2E 06 A6 |  if_e	mov	_var04, #0
01870     17 17 02 F6 | 	mov	result1, _var04
01874     8C 00 90 FD | 	jmp	#_strncmp_ret
01878                 | LR__0090
01878     00 2A 0E F2 | 	cmp	_var02, #0 wz
0187c     01 16 06 A6 |  if_e	mov	result1, #1
01880     80 00 90 AD |  if_e	jmp	#_strncmp_ret
01884     16 31 02 F6 | 	mov	_var05, _var03
01888     B4 E7 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
0188c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
01890                 | ' 	count = n;
01890                 | ' 	do {
01890                 | LR__0091
01890     14 33 C2 FA | 	rdbyte	_var06, _var01
01894     15 35 02 F6 | 	mov	_var07, _var02
01898     15 37 02 F6 | 	mov	_var08, _var02
0189c     01 36 06 F1 | 	add	_var08, #1
018a0     1B 2B 02 F6 | 	mov	_var02, _var08
018a4     1A 39 C2 FA | 	rdbyte	_var09, _var07
018a8     18 2F 02 F6 | 	mov	_var04, _var05
018ac     01 2E 86 F1 | 	sub	_var04, #1
018b0     17 31 02 F6 | 	mov	_var05, _var04
018b4     00 30 5E F2 | 	cmps	_var05, #0 wcz
018b8     01 28 06 F1 | 	add	_var01, #1
018bc     10 00 90 CD |  if_b	jmp	#LR__0093
018c0     00 32 0E F2 | 	cmp	_var06, #0 wz
018c4     08 00 90 AD |  if_e	jmp	#LR__0093
018c8     1C 33 0A F2 | 	cmp	_var06, _var09 wz
018cc     C0 FF 9F AD |  if_e	jmp	#LR__0091
018d0                 | LR__0092
018d0                 | LR__0093
018d0     00 30 5E F2 | 	cmps	_var05, #0 wcz
018d4                 | ' 		return(0);
018d4     00 16 06 C6 |  if_b	mov	result1, #0
018d8     28 00 90 CD |  if_b	jmp	#_strncmp_ret
018dc     1C 33 0A F2 | 	cmp	_var06, _var09 wz
018e0                 | ' 		return(0);
018e0     00 16 06 A6 |  if_e	mov	result1, #0
018e4     1C 00 90 AD |  if_e	jmp	#_strncmp_ret
018e8     00 32 0E F2 | 	cmp	_var06, #0 wz
018ec                 | ' 		return(-1);
018ec     01 16 66 A6 |  if_e	neg	result1, #1
018f0     10 00 90 AD |  if_e	jmp	#_strncmp_ret
018f4     00 38 0E F2 | 	cmp	_var09, #0 wz
018f8                 | ' 		return(1);
018f8     01 16 06 A6 |  if_e	mov	result1, #1
018fc                 | ' 		return(c1 - c2);
018fc     19 17 02 56 |  if_ne	mov	result1, _var06
01900     1C 17 82 51 |  if_ne	sub	result1, _var09
01904                 | _strncmp_ret
01904     2D 00 64 FD | 	ret
01908                 | 
01908                 | _strrchr
01908     00 28 06 F6 | 	mov	_var01, #0
0190c     0C E7 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
01910     B4 00 A0 FD | 	call	#FCACHE_LOAD_
01914                 | ' 
01914                 | ' 	place =  (0) ;
01914                 | ' 	while ((c = *s++) != 0)
01914                 | LR__0094
01914     1F 2B CA FA | 	rdbyte	_var02, arg01 wz
01918     01 3E 06 F1 | 	add	arg01, #1
0191c     10 00 90 AD |  if_e	jmp	#LR__0096
01920     20 2B 0A F2 | 	cmp	_var02, arg02 wz
01924     1F 29 02 A6 |  if_e	mov	_var01, arg01
01928     01 28 86 A1 |  if_e	sub	_var01, #1
0192c     E4 FF 9F FD | 	jmp	#LR__0094
01930                 | LR__0095
01930                 | LR__0096
01930     00 40 0E F2 | 	cmp	arg02, #0 wz
01934     01 3E 86 A1 |  if_e	sub	arg01, #1
01938     1F 29 02 A6 |  if_e	mov	_var01, arg01
0193c                 | ' 		place = (--s);
0193c                 | ' 	return (char *)place;
0193c     14 17 02 F6 | 	mov	result1, _var01
01940                 | _strrchr_ret
01940     2D 00 64 FD | 	ret
01944                 | 
01944                 | _opendir
01944     08 9C 05 F6 | 	mov	COUNT_, #8
01948     D1 00 A0 FD | 	call	#pushregs_
0194c     1F 41 02 F6 | 	mov	arg02, arg01
01950                 | '     return tmpname;
01950     01 00 00 FF 
01954     84 0D 06 F1 | 	add	ptr__dat__, ##900
01958     06 17 02 F6 | 	mov	result1, ptr__dat__
0195c     01 00 00 FF 
01960     84 0D 86 F1 | 	sub	ptr__dat__, ##900
01964     0B 49 02 F6 | 	mov	local01, result1
01968     24 3F 02 F6 | 	mov	arg01, local01
0196c     00 42 06 F6 | 	mov	arg03, #0
01970     28 21 B0 FD | 	call	#___getvfsforfile
01974     0B 4B 0A F6 | 	mov	local02, result1 wz
01978     14 00 90 AD |  if_e	jmp	#LR__0097
0197c     20 4A 06 F1 | 	add	local02, #32
01980     25 4D 02 FB | 	rdlong	local03, local02
01984     20 4A 86 F1 | 	sub	local02, #32
01988     26 4F 0A F6 | 	mov	local04, local03 wz
0198c     1C 00 90 5D |  if_ne	jmp	#LR__0098
01990                 | LR__0097
01990     01 00 00 FF 
01994     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01998     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
0199c     01 00 00 FF 
019a0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
019a4                 | '         _seterror( 16 );
019a4                 | '         return 0;
019a4     00 16 06 F6 | 	mov	result1, #0
019a8     A0 00 90 FD | 	jmp	#LR__0101
019ac                 | LR__0098
019ac     50 3E 06 F6 | 	mov	arg01, #80
019b0                 | '     return _gc_alloc(size);
019b0     10 40 06 F6 | 	mov	arg02, #16
019b4     90 E6 B0 FD | 	call	#__system___gc_doalloc
019b8     0B 51 0A F6 | 	mov	local05, result1 wz
019bc     1C 00 90 5D |  if_ne	jmp	#LR__0099
019c0     01 00 00 FF 
019c4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
019c8     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
019cc     01 00 00 FF 
019d0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
019d4                 | '         _seterror( 7 );
019d4                 | '         return 0;
019d4     00 16 06 F6 | 	mov	result1, #0
019d8     70 00 90 FD | 	jmp	#LR__0101
019dc                 | LR__0099
019dc     20 4A 06 F1 | 	add	local02, #32
019e0     25 4F 02 FB | 	rdlong	local04, local02
019e4     20 4A 86 F1 | 	sub	local02, #32
019e8     27 4D 02 FB | 	rdlong	local03, local04
019ec     04 4E 06 F1 | 	add	local04, #4
019f0     27 53 02 FB | 	rdlong	local06, local04
019f4     28 3F 02 F6 | 	mov	arg01, local05
019f8     24 41 02 F6 | 	mov	arg02, local01
019fc     FE 54 02 F6 | 	mov	local07, objptr
01a00     26 FD 01 F6 | 	mov	objptr, local03
01a04     2D 52 62 FD | 	call	local06
01a08     2A FD 01 F6 | 	mov	objptr, local07
01a0c     0B 57 0A F6 | 	mov	local08, result1 wz
01a10     30 00 90 AD |  if_e	jmp	#LR__0100
01a14     01 00 00 FF 
01a18     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01a1c     05 57 62 FC | 	wrlong	local08, ptr___system__dat__
01a20     01 00 00 FF 
01a24     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01a28     00 56 0E F2 | 	cmp	local08, #0 wz
01a2c     01 16 66 56 |  if_ne	neg	result1, #1
01a30     00 16 06 A6 |  if_e	mov	result1, #0
01a34     28 3F 02 F6 | 	mov	arg01, local05
01a38                 | '     return _gc_free(ptr);
01a38     44 E7 B0 FD | 	call	#__system___gc_free
01a3c                 | '         _seterror(r);
01a3c                 | '         free(dir);
01a3c                 | '         return 0;
01a3c     00 16 06 F6 | 	mov	result1, #0
01a40     08 00 90 FD | 	jmp	#LR__0101
01a44                 | LR__0100
01a44     28 4B 62 FC | 	wrlong	local02, local05
01a48                 | '     }
01a48                 | '     dir->vfs = v;
01a48                 | '     return dir;
01a48     28 17 02 F6 | 	mov	result1, local05
01a4c                 | LR__0101
01a4c     D0 F0 03 F6 | 	mov	ptra, fp
01a50     E0 00 A0 FD | 	call	#popregs_
01a54                 | _opendir_ret
01a54     2D 00 64 FD | 	ret
01a58                 | 
01a58                 | _closedir
01a58     07 9C 05 F6 | 	mov	COUNT_, #7
01a5c     D1 00 A0 FD | 	call	#pushregs_
01a60     1F 49 02 F6 | 	mov	local01, arg01
01a64     24 4B 02 FB | 	rdlong	local02, local01
01a68     24 4A 06 F1 | 	add	local02, #36
01a6c     25 4D 02 FB | 	rdlong	local03, local02
01a70     26 4F 02 FB | 	rdlong	local04, local03
01a74     04 4C 06 F1 | 	add	local03, #4
01a78     26 51 02 FB | 	rdlong	local05, local03
01a7c     24 3F 02 F6 | 	mov	arg01, local01
01a80     FE 52 02 F6 | 	mov	local06, objptr
01a84     27 FD 01 F6 | 	mov	objptr, local04
01a88     2D 50 62 FD | 	call	local05
01a8c     29 FD 01 F6 | 	mov	objptr, local06
01a90     0B 55 02 F6 | 	mov	local07, result1
01a94     24 3F 02 F6 | 	mov	arg01, local01
01a98                 | '     return _gc_free(ptr);
01a98     E4 E6 B0 FD | 	call	#__system___gc_free
01a9c                 | '     r = v->closedir(dir);
01a9c                 | '     free(dir);
01a9c                 | '     return _seterror(r);
01a9c     01 00 00 FF 
01aa0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01aa4     05 55 62 FC | 	wrlong	local07, ptr___system__dat__
01aa8     01 00 00 FF 
01aac     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01ab0     00 54 0E F2 | 	cmp	local07, #0 wz
01ab4     01 16 66 56 |  if_ne	neg	result1, #1
01ab8     00 16 06 A6 |  if_e	mov	result1, #0
01abc     D0 F0 03 F6 | 	mov	ptra, fp
01ac0     E0 00 A0 FD | 	call	#popregs_
01ac4                 | _closedir_ret
01ac4     2D 00 64 FD | 	ret
01ac8                 | 
01ac8                 | _readdir
01ac8     07 9C 05 F6 | 	mov	COUNT_, #7
01acc     D1 00 A0 FD | 	call	#pushregs_
01ad0     1F 49 0A FB | 	rdlong	local01, arg01 wz
01ad4     08 3E 06 F1 | 	add	arg01, #8
01ad8     1F 4B 02 F6 | 	mov	local02, arg01
01adc                 | '         return 0;
01adc     08 3E 86 F1 | 	sub	arg01, #8
01ae0     00 16 06 A6 |  if_e	mov	result1, #0
01ae4     54 00 90 AD |  if_e	jmp	#LR__0103
01ae8     28 48 06 F1 | 	add	local01, #40
01aec     24 4D 02 FB | 	rdlong	local03, local01
01af0     26 4F 02 FB | 	rdlong	local04, local03
01af4     04 4C 06 F1 | 	add	local03, #4
01af8     26 51 02 FB | 	rdlong	local05, local03
01afc     25 41 02 F6 | 	mov	arg02, local02
01b00     FE 52 02 F6 | 	mov	local06, objptr
01b04     27 FD 01 F6 | 	mov	objptr, local04
01b08     2D 50 62 FD | 	call	local05
01b0c     29 FD 01 F6 | 	mov	objptr, local06
01b10     0B 55 0A F6 | 	mov	local07, result1 wz
01b14     20 00 90 AD |  if_e	jmp	#LR__0102
01b18     00 54 5E F2 | 	cmps	local07, #0 wcz
01b1c     01 00 00 1F 
01b20     40 0A 06 11 |  if_a	add	ptr___system__dat__, ##576
01b24     05 55 62 1C |  if_a	wrlong	local07, ptr___system__dat__
01b28     01 00 00 1F 
01b2c     40 0A 86 11 |  if_a	sub	ptr___system__dat__, ##576
01b30                 | '             _seterror(r);
01b30                 | '         }
01b30                 | '         return 0;
01b30     00 16 06 F6 | 	mov	result1, #0
01b34     04 00 90 FD | 	jmp	#LR__0103
01b38                 | LR__0102
01b38                 | '     }
01b38                 | '     return D;
01b38     25 17 02 F6 | 	mov	result1, local02
01b3c                 | LR__0103
01b3c     D0 F0 03 F6 | 	mov	ptra, fp
01b40     E0 00 A0 FD | 	call	#popregs_
01b44                 | _readdir_ret
01b44     2D 00 64 FD | 	ret
01b48                 | 
01b48                 | _stat
01b48     09 9C 05 F6 | 	mov	COUNT_, #9
01b4c     D1 00 A0 FD | 	call	#pushregs_
01b50     1F 49 02 F6 | 	mov	local01, arg01
01b54     20 4B 02 F6 | 	mov	local02, arg02
01b58                 | '     return tmpname;
01b58     01 00 00 FF 
01b5c     84 0D 06 F1 | 	add	ptr__dat__, ##900
01b60     06 17 02 F6 | 	mov	result1, ptr__dat__
01b64     01 00 00 FF 
01b68     84 0D 86 F1 | 	sub	ptr__dat__, ##900
01b6c     0B 4D 02 F6 | 	mov	local03, result1
01b70     26 3F 02 F6 | 	mov	arg01, local03
01b74     24 41 02 F6 | 	mov	arg02, local01
01b78     00 42 06 F6 | 	mov	arg03, #0
01b7c     1C 1F B0 FD | 	call	#___getvfsforfile
01b80     0B 4F 0A F6 | 	mov	local04, result1 wz
01b84     14 00 90 AD |  if_e	jmp	#LR__0104
01b88     2C 4E 06 F1 | 	add	local04, #44
01b8c     27 51 02 FB | 	rdlong	local05, local04
01b90     2C 4E 86 F1 | 	sub	local04, #44
01b94     28 53 0A F6 | 	mov	local06, local05 wz
01b98     1C 00 90 5D |  if_ne	jmp	#LR__0105
01b9c                 | LR__0104
01b9c                 | ' #line 19 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
01b9c                 | '         return _seterror( 16 );
01b9c     01 00 00 FF 
01ba0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01ba4     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
01ba8     01 00 00 FF 
01bac     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01bb0     01 16 66 F6 | 	neg	result1, #1
01bb4     44 00 90 FD | 	jmp	#LR__0106
01bb8                 | LR__0105
01bb8     25 3F 02 F6 | 	mov	arg01, local02
01bbc     00 40 06 F6 | 	mov	arg02, #0
01bc0     30 42 06 F6 | 	mov	arg03, #48
01bc4     1F 55 02 F6 | 	mov	local07, arg01
01bc8     C1 00 A0 FD | 	call	#\builtin_bytefill_
01bcc     2A 17 02 F6 | 	mov	result1, local07
01bd0     2C 4E 06 F1 | 	add	local04, #44
01bd4     27 53 02 FB | 	rdlong	local06, local04
01bd8     29 51 02 FB | 	rdlong	local05, local06
01bdc     04 52 06 F1 | 	add	local06, #4
01be0     29 57 02 FB | 	rdlong	local08, local06
01be4     26 3F 02 F6 | 	mov	arg01, local03
01be8     25 41 02 F6 | 	mov	arg02, local02
01bec     FE 58 02 F6 | 	mov	local09, objptr
01bf0     28 FD 01 F6 | 	mov	objptr, local05
01bf4     2D 56 62 FD | 	call	local08
01bf8     2C FD 01 F6 | 	mov	objptr, local09
01bfc                 | ' #line 29 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
01bfc                 | '     r = v->stat(name, buf);
01bfc                 | ' #line 33 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
01bfc                 | '     return r;
01bfc                 | LR__0106
01bfc     D0 F0 03 F6 | 	mov	ptra, fp
01c00     E0 00 A0 FD | 	call	#popregs_
01c04                 | _stat_ret
01c04     2D 00 64 FD | 	ret
01c08                 | 
01c08                 | __openraw
01c08     10 9C 05 F6 | 	mov	COUNT_, #16
01c0c     D1 00 A0 FD | 	call	#pushregs_
01c10     34 F0 07 F1 | 	add	ptra, #52
01c14     04 A0 05 F1 | 	add	fp, #4
01c18     D0 3E 62 FC | 	wrlong	arg01, fp
01c1c     04 A0 05 F1 | 	add	fp, #4
01c20     D0 40 62 FC | 	wrlong	arg02, fp
01c24     04 A0 05 F1 | 	add	fp, #4
01c28     D0 42 62 FC | 	wrlong	arg03, fp
01c2c     04 A0 05 F1 | 	add	fp, #4
01c30     D0 44 62 FC | 	wrlong	arg04, fp
01c34     0C A0 05 F1 | 	add	fp, #12
01c38     D0 08 68 FC | 	wrlong	#4, fp
01c3c     18 A0 85 F1 | 	sub	fp, #24
01c40     D0 48 02 FB | 	rdlong	local01, fp
01c44     1C A0 05 F1 | 	add	fp, #28
01c48     D0 48 62 FC | 	wrlong	local01, fp
01c4c                 | '     return tmpname;
01c4c     01 00 00 FF 
01c50     84 0D 06 F1 | 	add	ptr__dat__, ##900
01c54     06 17 02 F6 | 	mov	result1, ptr__dat__
01c58     01 00 00 FF 
01c5c     84 0D 86 F1 | 	sub	ptr__dat__, ##900
01c60     04 A0 05 F1 | 	add	fp, #4
01c64     D0 16 62 FC | 	wrlong	result1, fp
01c68     0B 3F 02 F6 | 	mov	arg01, result1
01c6c     1C A0 85 F1 | 	sub	fp, #28
01c70     D0 40 02 FB | 	rdlong	arg02, fp
01c74     08 A0 85 F1 | 	sub	fp, #8
01c78     00 42 06 F6 | 	mov	arg03, #0
01c7c     1C 1E B0 FD | 	call	#___getvfsforfile
01c80     0B 4B 02 F6 | 	mov	local02, result1
01c84     18 A0 05 F1 | 	add	fp, #24
01c88     D0 4A 62 FC | 	wrlong	local02, fp
01c8c     18 A0 85 F1 | 	sub	fp, #24
01c90     25 49 0A F6 | 	mov	local01, local02 wz
01c94     14 00 90 AD |  if_e	jmp	#LR__0107
01c98     18 A0 05 F1 | 	add	fp, #24
01c9c     D0 4C 02 FB | 	rdlong	local03, fp
01ca0     18 A0 85 F1 | 	sub	fp, #24
01ca4     26 4F 0A FB | 	rdlong	local04, local03 wz
01ca8     1C 00 90 5D |  if_ne	jmp	#LR__0108
01cac                 | LR__0107
01cac                 | ' #line 112 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/posixio.c"
01cac                 | '         return _seterror( 16 );
01cac     01 00 00 FF 
01cb0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
01cb4     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
01cb8     01 00 00 FF 
01cbc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
01cc0     01 16 66 F6 | 	neg	result1, #1
01cc4     A8 04 90 FD | 	jmp	#LR__0126
01cc8                 | LR__0108
01cc8     20 A0 05 F1 | 	add	fp, #32
01ccc     D0 3E 02 FB | 	rdlong	arg01, fp
01cd0     20 A0 85 F1 | 	sub	fp, #32
01cd4     00 40 06 F6 | 	mov	arg02, #0
01cd8     30 42 06 F6 | 	mov	arg03, #48
01cdc     1F 51 02 F6 | 	mov	local05, arg01
01ce0     C1 00 A0 FD | 	call	#\builtin_bytefill_
01ce4     28 17 02 F6 | 	mov	result1, local05
01ce8     18 A0 05 F1 | 	add	fp, #24
01cec     D0 4E 02 FB | 	rdlong	local04, fp
01cf0     27 49 02 FB | 	rdlong	local01, local04
01cf4     24 4B 02 FB | 	rdlong	local02, local01
01cf8     04 48 06 F1 | 	add	local01, #4
01cfc     24 53 02 FB | 	rdlong	local06, local01
01d00     29 55 02 F6 | 	mov	local07, local06
01d04     08 A0 05 F1 | 	add	fp, #8
01d08     D0 56 02 FB | 	rdlong	local08, fp
01d0c     2B 59 02 F6 | 	mov	local09, local08
01d10     04 A0 05 F1 | 	add	fp, #4
01d14     D0 5A 02 FB | 	rdlong	local10, fp
01d18     2D 5D 02 F6 | 	mov	local11, local10
01d1c     18 A0 85 F1 | 	sub	fp, #24
01d20     D0 5E 02 FB | 	rdlong	local12, fp
01d24     0C A0 85 F1 | 	sub	fp, #12
01d28     2F 61 02 F6 | 	mov	local13, local12
01d2c     2C 3F 02 F6 | 	mov	arg01, local09
01d30     2E 41 02 F6 | 	mov	arg02, local11
01d34     30 43 02 F6 | 	mov	arg03, local13
01d38     FE 62 02 F6 | 	mov	local14, objptr
01d3c     25 FD 01 F6 | 	mov	objptr, local02
01d40     2D 54 62 FD | 	call	local07
01d44     31 FD 01 F6 | 	mov	objptr, local14
01d48     0B 65 02 F6 | 	mov	local15, result1
01d4c     14 A0 05 F1 | 	add	fp, #20
01d50     D0 64 62 FC | 	wrlong	local15, fp
01d54     D0 48 0A FB | 	rdlong	local01, fp wz
01d58     14 A0 85 F1 | 	sub	fp, #20
01d5c     98 00 90 AD |  if_e	jmp	#LR__0109
01d60     0C A0 05 F1 | 	add	fp, #12
01d64     D0 54 02 FB | 	rdlong	local07, fp
01d68     0C A0 85 F1 | 	sub	fp, #12
01d6c     04 54 CE F7 | 	test	local07, #4 wz
01d70     84 00 90 AD |  if_e	jmp	#LR__0109
01d74     18 A0 05 F1 | 	add	fp, #24
01d78     D0 4E 02 FB | 	rdlong	local04, fp
01d7c     27 4D 02 F6 | 	mov	local03, local04
01d80     04 4C 06 F1 | 	add	local03, #4
01d84     26 53 02 FB | 	rdlong	local06, local03
01d88     04 4C 86 F1 | 	sub	local03, #4
01d8c     29 49 02 F6 | 	mov	local01, local06
01d90     24 4B 02 FB | 	rdlong	local02, local01
01d94     04 48 06 F1 | 	add	local01, #4
01d98     24 59 02 FB | 	rdlong	local09, local01
01d9c     04 48 86 F1 | 	sub	local01, #4
01da0     2C 55 02 F6 | 	mov	local07, local09
01da4     08 A0 05 F1 | 	add	fp, #8
01da8     D0 5C 02 FB | 	rdlong	local11, fp
01dac     2E 57 02 F6 | 	mov	local08, local11
01db0     04 A0 05 F1 | 	add	fp, #4
01db4     D0 60 02 FB | 	rdlong	local13, fp
01db8     30 5B 02 F6 | 	mov	local10, local13
01dbc     14 A0 85 F1 | 	sub	fp, #20
01dc0     D0 62 02 FB | 	rdlong	local14, fp
01dc4     10 A0 85 F1 | 	sub	fp, #16
01dc8     31 5F 02 F6 | 	mov	local12, local14
01dcc     2B 3F 02 F6 | 	mov	arg01, local08
01dd0     2D 41 02 F6 | 	mov	arg02, local10
01dd4     2F 43 02 F6 | 	mov	arg03, local12
01dd8     FE 64 02 F6 | 	mov	local15, objptr
01ddc     25 FD 01 F6 | 	mov	objptr, local02
01de0     2D 54 62 FD | 	call	local07
01de4     32 FD 01 F6 | 	mov	objptr, local15
01de8     0B 67 02 F6 | 	mov	local16, result1
01dec     14 A0 05 F1 | 	add	fp, #20
01df0     D0 66 62 FC | 	wrlong	local16, fp
01df4     14 A0 85 F1 | 	sub	fp, #20
01df8                 | LR__0109
01df8     14 A0 05 F1 | 	add	fp, #20
01dfc     D0 48 0A FB | 	rdlong	local01, fp wz
01e00     14 A0 85 F1 | 	sub	fp, #20
01e04     44 03 90 5D |  if_ne	jmp	#LR__0125
01e08     0C A0 05 F1 | 	add	fp, #12
01e0c     D0 48 02 FB | 	rdlong	local01, fp
01e10     03 48 06 F5 | 	and	local01, #3
01e14     1C A0 05 F1 | 	add	fp, #28
01e18     D0 48 62 FC | 	wrlong	local01, fp
01e1c     D0 48 0A FB | 	rdlong	local01, fp wz
01e20     28 A0 85 F1 | 	sub	fp, #40
01e24     14 00 90 AD |  if_e	jmp	#LR__0110
01e28     1C A0 05 F1 | 	add	fp, #28
01e2c     D0 48 02 FB | 	rdlong	local01, fp
01e30     02 48 46 F5 | 	or	local01, #2
01e34     D0 48 62 FC | 	wrlong	local01, fp
01e38     1C A0 85 F1 | 	sub	fp, #28
01e3c                 | LR__0110
01e3c     28 A0 05 F1 | 	add	fp, #40
01e40     D0 48 02 FB | 	rdlong	local01, fp
01e44     28 A0 85 F1 | 	sub	fp, #40
01e48     01 48 0E F2 | 	cmp	local01, #1 wz
01e4c     14 00 90 AD |  if_e	jmp	#LR__0111
01e50     1C A0 05 F1 | 	add	fp, #28
01e54     D0 48 02 FB | 	rdlong	local01, fp
01e58     01 48 46 F5 | 	or	local01, #1
01e5c     D0 48 62 FC | 	wrlong	local01, fp
01e60     1C A0 85 F1 | 	sub	fp, #28
01e64                 | LR__0111
01e64     0C A0 05 F1 | 	add	fp, #12
01e68     D0 48 02 FB | 	rdlong	local01, fp
01e6c     0C A0 85 F1 | 	sub	fp, #12
01e70     20 48 CE F7 | 	test	local01, #32 wz
01e74     14 00 90 AD |  if_e	jmp	#LR__0112
01e78     1C A0 05 F1 | 	add	fp, #28
01e7c     D0 48 02 FB | 	rdlong	local01, fp
01e80     C0 48 46 F5 | 	or	local01, #192
01e84     D0 48 62 FC | 	wrlong	local01, fp
01e88     1C A0 85 F1 | 	sub	fp, #28
01e8c                 | LR__0112
01e8c     20 A0 05 F1 | 	add	fp, #32
01e90     D0 48 02 FB | 	rdlong	local01, fp
01e94     04 A0 85 F1 | 	sub	fp, #4
01e98     D0 54 02 FB | 	rdlong	local07, fp
01e9c     08 48 06 F1 | 	add	local01, #8
01ea0     24 55 62 FC | 	wrlong	local07, local01
01ea4     04 A0 05 F1 | 	add	fp, #4
01ea8     D0 48 02 FB | 	rdlong	local01, fp
01eac     20 A0 85 F1 | 	sub	fp, #32
01eb0     10 48 06 F1 | 	add	local01, #16
01eb4     24 55 0A FB | 	rdlong	local07, local01 wz
01eb8     24 00 90 5D |  if_ne	jmp	#LR__0113
01ebc     20 A0 05 F1 | 	add	fp, #32
01ec0     D0 48 02 FB | 	rdlong	local01, fp
01ec4     08 A0 85 F1 | 	sub	fp, #8
01ec8     D0 54 02 FB | 	rdlong	local07, fp
01ecc     18 A0 85 F1 | 	sub	fp, #24
01ed0     0C 54 06 F1 | 	add	local07, #12
01ed4     2A 4F 02 FB | 	rdlong	local04, local07
01ed8     10 48 06 F1 | 	add	local01, #16
01edc     24 4F 62 FC | 	wrlong	local04, local01
01ee0                 | LR__0113
01ee0     20 A0 05 F1 | 	add	fp, #32
01ee4     D0 48 02 FB | 	rdlong	local01, fp
01ee8     20 A0 85 F1 | 	sub	fp, #32
01eec     14 48 06 F1 | 	add	local01, #20
01ef0     24 55 0A FB | 	rdlong	local07, local01 wz
01ef4     24 00 90 5D |  if_ne	jmp	#LR__0114
01ef8     20 A0 05 F1 | 	add	fp, #32
01efc     D0 48 02 FB | 	rdlong	local01, fp
01f00     08 A0 85 F1 | 	sub	fp, #8
01f04     D0 54 02 FB | 	rdlong	local07, fp
01f08     18 A0 85 F1 | 	sub	fp, #24
01f0c     10 54 06 F1 | 	add	local07, #16
01f10     2A 4F 02 FB | 	rdlong	local04, local07
01f14     14 48 06 F1 | 	add	local01, #20
01f18     24 4F 62 FC | 	wrlong	local04, local01
01f1c                 | LR__0114
01f1c     20 A0 05 F1 | 	add	fp, #32
01f20     D0 48 02 FB | 	rdlong	local01, fp
01f24     20 A0 85 F1 | 	sub	fp, #32
01f28     20 48 06 F1 | 	add	local01, #32
01f2c     24 55 0A FB | 	rdlong	local07, local01 wz
01f30     24 00 90 5D |  if_ne	jmp	#LR__0115
01f34     20 A0 05 F1 | 	add	fp, #32
01f38     D0 48 02 FB | 	rdlong	local01, fp
01f3c     08 A0 85 F1 | 	sub	fp, #8
01f40     D0 54 02 FB | 	rdlong	local07, fp
01f44     18 A0 85 F1 | 	sub	fp, #24
01f48     08 54 06 F1 | 	add	local07, #8
01f4c     2A 4F 02 FB | 	rdlong	local04, local07
01f50     20 48 06 F1 | 	add	local01, #32
01f54     24 4F 62 FC | 	wrlong	local04, local01
01f58                 | LR__0115
01f58     20 A0 05 F1 | 	add	fp, #32
01f5c     D0 48 02 FB | 	rdlong	local01, fp
01f60     20 A0 85 F1 | 	sub	fp, #32
01f64     24 48 06 F1 | 	add	local01, #36
01f68     24 55 0A FB | 	rdlong	local07, local01 wz
01f6c     24 00 90 5D |  if_ne	jmp	#LR__0116
01f70     20 A0 05 F1 | 	add	fp, #32
01f74     D0 48 02 FB | 	rdlong	local01, fp
01f78     08 A0 85 F1 | 	sub	fp, #8
01f7c     D0 54 02 FB | 	rdlong	local07, fp
01f80     18 A0 85 F1 | 	sub	fp, #24
01f84     18 54 06 F1 | 	add	local07, #24
01f88     2A 4F 02 FB | 	rdlong	local04, local07
01f8c     24 48 06 F1 | 	add	local01, #36
01f90     24 4F 62 FC | 	wrlong	local04, local01
01f94                 | LR__0116
01f94     20 A0 05 F1 | 	add	fp, #32
01f98     D0 48 02 FB | 	rdlong	local01, fp
01f9c     20 A0 85 F1 | 	sub	fp, #32
01fa0     2C 48 06 F1 | 	add	local01, #44
01fa4     24 55 0A FB | 	rdlong	local07, local01 wz
01fa8     24 00 90 5D |  if_ne	jmp	#LR__0117
01fac     20 A0 05 F1 | 	add	fp, #32
01fb0     D0 48 02 FB | 	rdlong	local01, fp
01fb4     08 A0 85 F1 | 	sub	fp, #8
01fb8     D0 54 02 FB | 	rdlong	local07, fp
01fbc     18 A0 85 F1 | 	sub	fp, #24
01fc0     14 54 06 F1 | 	add	local07, #20
01fc4     2A 4F 02 FB | 	rdlong	local04, local07
01fc8     2C 48 06 F1 | 	add	local01, #44
01fcc     24 4F 62 FC | 	wrlong	local04, local01
01fd0                 | LR__0117
01fd0     20 A0 05 F1 | 	add	fp, #32
01fd4     D0 48 02 FB | 	rdlong	local01, fp
01fd8     20 A0 85 F1 | 	sub	fp, #32
01fdc     18 48 06 F1 | 	add	local01, #24
01fe0     24 55 0A FB | 	rdlong	local07, local01 wz
01fe4     B4 00 90 5D |  if_ne	jmp	#LR__0120
01fe8     20 A0 05 F1 | 	add	fp, #32
01fec     D0 4C 02 FB | 	rdlong	local03, fp
01ff0     24 4C 06 F1 | 	add	local03, #36
01ff4     26 49 02 FB | 	rdlong	local01, local03
01ff8     24 4B 02 FB | 	rdlong	local02, local01
01ffc     04 48 06 F1 | 	add	local01, #4
02000     24 55 02 FB | 	rdlong	local07, local01
02004     D0 3E 02 FB | 	rdlong	arg01, fp
02008     10 A0 05 F1 | 	add	fp, #16
0200c     D0 42 02 F6 | 	mov	arg03, fp
02010     30 A0 85 F1 | 	sub	fp, #48
02014     00 41 06 F6 | 	mov	arg02, #256
02018     FE 62 02 F6 | 	mov	local14, objptr
0201c     25 FD 01 F6 | 	mov	objptr, local02
02020     2D 54 62 FD | 	call	local07
02024     31 FD 01 F6 | 	mov	objptr, local14
02028     0B 65 02 F6 | 	mov	local15, result1
0202c     2C A0 05 F1 | 	add	fp, #44
02030     D0 64 62 FC | 	wrlong	local15, fp
02034     D0 48 0A FB | 	rdlong	local01, fp wz
02038     2C A0 85 F1 | 	sub	fp, #44
0203c     3C 00 90 5D |  if_ne	jmp	#LR__0118
02040     30 A0 05 F1 | 	add	fp, #48
02044     D0 54 02 FB | 	rdlong	local07, fp
02048     30 A0 85 F1 | 	sub	fp, #48
0204c     02 54 CE F7 | 	test	local07, #2 wz
02050     28 00 90 AD |  if_e	jmp	#LR__0118
02054     20 A0 05 F1 | 	add	fp, #32
02058     D0 48 02 FB | 	rdlong	local01, fp
0205c     20 A0 85 F1 | 	sub	fp, #32
02060     FE 3E 02 F6 | 	mov	arg01, objptr
02064     02 41 02 F6 | 	mov	arg02, ptr____default_putc_terminal_
02068     EC BB B0 FD | 	call	#__system___make_methodptr
0206c     0B 4F 02 F6 | 	mov	local04, result1
02070     18 48 06 F1 | 	add	local01, #24
02074     24 4F 62 FC | 	wrlong	local04, local01
02078     20 00 90 FD | 	jmp	#LR__0119
0207c                 | LR__0118
0207c     20 A0 05 F1 | 	add	fp, #32
02080     D0 48 02 FB | 	rdlong	local01, fp
02084     20 A0 85 F1 | 	sub	fp, #32
02088     FE 3E 02 F6 | 	mov	arg01, objptr
0208c     01 41 02 F6 | 	mov	arg02, ptr____default_putc_
02090     C4 BB B0 FD | 	call	#__system___make_methodptr
02094     18 48 06 F1 | 	add	local01, #24
02098     24 17 62 FC | 	wrlong	result1, local01
0209c                 | LR__0119
0209c                 | LR__0120
0209c     20 A0 05 F1 | 	add	fp, #32
020a0     D0 48 02 FB | 	rdlong	local01, fp
020a4     20 A0 85 F1 | 	sub	fp, #32
020a8     1C 48 06 F1 | 	add	local01, #28
020ac     24 55 0A FB | 	rdlong	local07, local01 wz
020b0     20 00 90 5D |  if_ne	jmp	#LR__0121
020b4     20 A0 05 F1 | 	add	fp, #32
020b8     D0 48 02 FB | 	rdlong	local01, fp
020bc     20 A0 85 F1 | 	sub	fp, #32
020c0     FE 3E 02 F6 | 	mov	arg01, objptr
020c4     00 41 02 F6 | 	mov	arg02, ptr____default_getc_
020c8     8C BB B0 FD | 	call	#__system___make_methodptr
020cc     1C 48 06 F1 | 	add	local01, #28
020d0     24 17 62 FC | 	wrlong	result1, local01
020d4                 | LR__0121
020d4     20 A0 05 F1 | 	add	fp, #32
020d8     D0 48 02 FB | 	rdlong	local01, fp
020dc     20 A0 85 F1 | 	sub	fp, #32
020e0     28 48 06 F1 | 	add	local01, #40
020e4     24 55 0A FB | 	rdlong	local07, local01 wz
020e8     60 00 90 5D |  if_ne	jmp	#LR__0124
020ec     18 A0 05 F1 | 	add	fp, #24
020f0     D0 48 02 FB | 	rdlong	local01, fp
020f4     18 A0 85 F1 | 	sub	fp, #24
020f8     1C 48 06 F1 | 	add	local01, #28
020fc     24 55 0A FB | 	rdlong	local07, local01 wz
02100     28 00 90 AD |  if_e	jmp	#LR__0122
02104     20 A0 05 F1 | 	add	fp, #32
02108     D0 48 02 FB | 	rdlong	local01, fp
0210c     08 A0 85 F1 | 	sub	fp, #8
02110     D0 54 02 FB | 	rdlong	local07, fp
02114     18 A0 85 F1 | 	sub	fp, #24
02118     1C 54 06 F1 | 	add	local07, #28
0211c     2A 4F 02 FB | 	rdlong	local04, local07
02120     28 48 06 F1 | 	add	local01, #40
02124     24 4F 62 FC | 	wrlong	local04, local01
02128     20 00 90 FD | 	jmp	#LR__0123
0212c                 | LR__0122
0212c     20 A0 05 F1 | 	add	fp, #32
02130     D0 48 02 FB | 	rdlong	local01, fp
02134     20 A0 85 F1 | 	sub	fp, #32
02138     FE 3E 02 F6 | 	mov	arg01, objptr
0213c     FF 40 02 F6 | 	mov	arg02, ptr____default_flush_
02140     14 BB B0 FD | 	call	#__system___make_methodptr
02144     28 48 06 F1 | 	add	local01, #40
02148     24 17 62 FC | 	wrlong	result1, local01
0214c                 | LR__0123
0214c                 | LR__0124
0214c                 | LR__0125
0214c     14 A0 05 F1 | 	add	fp, #20
02150     D0 48 0A FB | 	rdlong	local01, fp wz
02154     01 00 00 AF 
02158     40 0A 06 A1 |  if_e	add	ptr___system__dat__, ##576
0215c     05 01 68 AC |  if_e	wrlong	#0, ptr___system__dat__
02160     01 00 00 AF 
02164     40 0A 86 A1 |  if_e	sub	ptr___system__dat__, ##576
02168                 | '     return r;
02168     D0 16 02 FB | 	rdlong	result1, fp
0216c     14 A0 85 F1 | 	sub	fp, #20
02170                 | LR__0126
02170     D0 F0 03 F6 | 	mov	ptra, fp
02174     E0 00 A0 FD | 	call	#popregs_
02178                 | __openraw_ret
02178     2D 00 64 FD | 	ret
0217c                 | 
0217c                 | __closeraw
0217c     06 9C 05 F6 | 	mov	COUNT_, #6
02180     D1 00 A0 FD | 	call	#pushregs_
02184     1F 49 02 F6 | 	mov	local01, arg01
02188     00 4A 06 F6 | 	mov	local02, #0
0218c     08 48 06 F1 | 	add	local01, #8
02190     24 4D 0A FB | 	rdlong	local03, local01 wz
02194     08 48 86 F1 | 	sub	local01, #8
02198     1C 00 90 5D |  if_ne	jmp	#LR__0127
0219c                 | '         return _seterror( 5 );
0219c     01 00 00 FF 
021a0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
021a4     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
021a8     01 00 00 FF 
021ac     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
021b0     01 16 66 F6 | 	neg	result1, #1
021b4     90 00 90 FD | 	jmp	#LR__0130
021b8                 | LR__0127
021b8     28 48 06 F1 | 	add	local01, #40
021bc     24 4D 0A FB | 	rdlong	local03, local01 wz
021c0     28 48 86 F1 | 	sub	local01, #40
021c4     2C 00 90 AD |  if_e	jmp	#LR__0128
021c8     28 48 06 F1 | 	add	local01, #40
021cc     24 4D 02 FB | 	rdlong	local03, local01
021d0     28 48 86 F1 | 	sub	local01, #40
021d4     26 4F 02 FB | 	rdlong	local04, local03
021d8     04 4C 06 F1 | 	add	local03, #4
021dc     26 51 02 FB | 	rdlong	local05, local03
021e0     24 3F 02 F6 | 	mov	arg01, local01
021e4     FE 52 02 F6 | 	mov	local06, objptr
021e8     27 FD 01 F6 | 	mov	objptr, local04
021ec     2D 50 62 FD | 	call	local05
021f0     29 FD 01 F6 | 	mov	objptr, local06
021f4                 | LR__0128
021f4     20 48 06 F1 | 	add	local01, #32
021f8     24 4D 0A FB | 	rdlong	local03, local01 wz
021fc     20 48 86 F1 | 	sub	local01, #32
02200     30 00 90 AD |  if_e	jmp	#LR__0129
02204     20 48 06 F1 | 	add	local01, #32
02208     24 4D 02 FB | 	rdlong	local03, local01
0220c     20 48 86 F1 | 	sub	local01, #32
02210     26 4F 02 FB | 	rdlong	local04, local03
02214     04 4C 06 F1 | 	add	local03, #4
02218     26 51 02 FB | 	rdlong	local05, local03
0221c     24 3F 02 F6 | 	mov	arg01, local01
02220     FE 52 02 F6 | 	mov	local06, objptr
02224     27 FD 01 F6 | 	mov	objptr, local04
02228     2D 50 62 FD | 	call	local05
0222c     29 FD 01 F6 | 	mov	objptr, local06
02230     0B 4B 02 F6 | 	mov	local02, result1
02234                 | LR__0129
02234     24 3F 02 F6 | 	mov	arg01, local01
02238     00 40 06 F6 | 	mov	arg02, #0
0223c     30 42 06 F6 | 	mov	arg03, #48
02240     C1 00 A0 FD | 	call	#\builtin_bytefill_
02244                 | '     return r;
02244     25 17 02 F6 | 	mov	result1, local02
02248                 | LR__0130
02248     D0 F0 03 F6 | 	mov	ptra, fp
0224c     E0 00 A0 FD | 	call	#popregs_
02250                 | __closeraw_ret
02250     2D 00 64 FD | 	ret
02254                 | 
02254                 | __vfs_open_host
02254     03 9C 05 F6 | 	mov	COUNT_, #3
02258     D1 00 A0 FD | 	call	#pushregs_
0225c     03 00 00 FF 
02260     48 0D 06 F1 | 	add	ptr__dat__, ##1864
02264     06 49 02 F6 | 	mov	local01, ptr__dat__
02268     FE 3E 02 F6 | 	mov	arg01, objptr
0226c     09 41 02 F6 | 	mov	arg02, ptr__plain_sendrecv_0341_
02270     03 00 00 FF 
02274     48 0D 86 F1 | 	sub	ptr__dat__, ##1864
02278     DC B9 B0 FD | 	call	#__system___make_methodptr
0227c     0B 3F 02 F6 | 	mov	arg01, result1
02280     FE 4A 02 F6 | 	mov	local02, objptr
02284     24 FD 01 F6 | 	mov	objptr, local01
02288     34 2F B0 FD | 	call	#_fs9p_internal_cc_fs_init
0228c     25 FD 01 F6 | 	mov	objptr, local02
02290     0B 4D 0A F6 | 	mov	local03, result1 wz
02294     20 00 90 AD |  if_e	jmp	#LR__0131
02298     26 3F 6A F6 | 	neg	arg01, local03 wz
0229c     01 00 00 FF 
022a0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
022a4     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
022a8     01 00 00 FF 
022ac     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
022b0                 | ' #line 92 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_vfs.c"
022b0                 | '        _seterror(-r);
022b0                 | '        return 0;
022b0     00 16 06 F6 | 	mov	result1, #0
022b4     14 00 90 FD | 	jmp	#LR__0132
022b8                 | LR__0131
022b8     04 00 00 FF 
022bc     BC 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2236
022c0     08 17 02 F6 | 	mov	result1, ptr__fs9p_internal_cc_dat__
022c4     04 00 00 FF 
022c8     BC 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2236
022cc                 | ' #line 850 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
022cc                 | '   return v;
022cc                 | '     }
022cc                 | '     v = FS.get_vfs();
022cc                 | ' #line 100 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_vfs.c"
022cc                 | '     return v;
022cc                 | LR__0132
022cc     D0 F0 03 F6 | 	mov	ptra, fp
022d0     E0 00 A0 FD | 	call	#popregs_
022d4                 | __vfs_open_host_ret
022d4     2D 00 64 FD | 	ret
022d8                 | 
022d8                 | __vfs_open_sdcardx
022d8     06 9C 05 F6 | 	mov	COUNT_, #6
022dc     D1 00 A0 FD | 	call	#pushregs_
022e0     03 00 00 FF 
022e4     48 0D 06 F1 | 	add	ptr__dat__, ##1864
022e8     1F 49 02 F6 | 	mov	local01, arg01
022ec     20 4B 02 F6 | 	mov	local02, arg02
022f0     21 4D 02 F6 | 	mov	local03, arg03
022f4     22 47 02 F6 | 	mov	arg05, arg04
022f8     00 3E 06 F6 | 	mov	arg01, #0
022fc     24 41 02 F6 | 	mov	arg02, local01
02300     25 43 02 F6 | 	mov	arg03, local02
02304     26 45 02 F6 | 	mov	arg04, local03
02308     FE 4E 02 F6 | 	mov	local04, objptr
0230c     06 FD 01 F6 | 	mov	objptr, ptr__dat__
02310     03 00 00 FF 
02314     48 0D 86 F1 | 	sub	ptr__dat__, ##1864
02318     AC 50 B0 FD | 	call	#_ff_cc_disk_setpins
0231c     27 FD 01 F6 | 	mov	objptr, local04
02320     0B 51 0A F6 | 	mov	local05, result1 wz
02324     38 00 90 5D |  if_ne	jmp	#LR__0133
02328     03 00 00 FF 
0232c     48 0D 06 F1 | 	add	ptr__dat__, ##1864
02330     06 53 02 F6 | 	mov	local06, ptr__dat__
02334     06 3F 02 F6 | 	mov	arg01, ptr__dat__
02338     03 00 00 FF 
0233c     48 0D 86 F1 | 	sub	ptr__dat__, ##1864
02340     87 00 00 FF 
02344     AB 41 06 F6 | 	mov	arg02, ##@LR__1185
02348     00 42 06 F6 | 	mov	arg03, #0
0234c     FE 4E 02 F6 | 	mov	local04, objptr
02350     29 FD 01 F6 | 	mov	objptr, local06
02354     A4 75 B0 FD | 	call	#_ff_cc_f_mount
02358     27 FD 01 F6 | 	mov	objptr, local04
0235c     0B 51 02 F6 | 	mov	local05, result1
02360                 | LR__0133
02360     00 50 0E F2 | 	cmp	local05, #0 wz
02364     20 00 90 AD |  if_e	jmp	#LR__0134
02368     28 3F 6A F6 | 	neg	arg01, local05 wz
0236c     01 00 00 FF 
02370     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
02374     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
02378     01 00 00 FF 
0237c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
02380                 | ' 	buf = (BYTE*)work;
02380                 | ' 	buf = (BYTE*)work;
02380                 | ' 	buf = (BYTE*)work;
02380     00 16 06 F6 | 	mov	result1, #0
02384     0C 00 90 FD | 	jmp	#LR__0135
02388                 | LR__0134
02388                 | ' get_vfs()
02388                 | ' {
02388                 | '     return &fat_vfs;
02388     B4 0E 06 F1 | 	add	ptr__ff_cc_dat__, #180
0238c     07 17 02 F6 | 	mov	result1, ptr__ff_cc_dat__
02390     B4 0E 86 F1 | 	sub	ptr__ff_cc_dat__, #180
02394                 | ' 	buf = (BYTE*)work;
02394                 | ' 	buf = (BYTE*)work;
02394                 | ' 	buf = (BYTE*)work;
02394                 | ' 	buf = (BYTE*)work;
02394                 | LR__0135
02394     D0 F0 03 F6 | 	mov	ptra, fp
02398     E0 00 A0 FD | 	call	#popregs_
0239c                 | __vfs_open_sdcardx_ret
0239c     2D 00 64 FD | 	ret
023a0                 | 
023a0                 | ___default_getc
023a0     05 9C 05 F6 | 	mov	COUNT_, #5
023a4     D1 00 A0 FD | 	call	#pushregs_
023a8     1F 49 02 F6 | 	mov	local01, arg01
023ac     24 4B 02 FB | 	rdlong	local02, local01
023b0     08 4A 06 F1 | 	add	local02, #8
023b4     25 4D 02 FB | 	rdlong	local03, local02
023b8     08 4A 86 F1 | 	sub	local02, #8
023bc     02 4C CE F7 | 	test	local03, #2 wz
023c0     08 00 90 AD |  if_e	jmp	#LR__0136
023c4     24 3F 02 F6 | 	mov	arg01, local01
023c8     8C 01 B0 FD | 	call	#___default_flush
023cc                 | LR__0136
023cc     08 4A 06 F1 | 	add	local02, #8
023d0     25 4D 02 FB | 	rdlong	local03, local02
023d4     01 4C 46 F5 | 	or	local03, #1
023d8     25 4D 62 FC | 	wrlong	local03, local02
023dc     08 4A 86 F1 | 	sub	local02, #8
023e0     25 4F 0A FB | 	rdlong	local04, local02 wz
023e4     0C 00 90 5D |  if_ne	jmp	#LR__0137
023e8     24 3F 02 F6 | 	mov	arg01, local01
023ec     44 2A B0 FD | 	call	#___default_filbuf
023f0     0B 4F 02 F6 | 	mov	local04, result1
023f4                 | LR__0137
023f4     00 4E 5E F2 | 	cmps	local04, #0 wcz
023f8                 | '         return -1;
023f8     01 16 66 E6 |  if_be	neg	result1, #1
023fc     1C 00 90 ED |  if_be	jmp	#LR__0138
02400     01 4E 86 F1 | 	sub	local04, #1
02404     25 4F 62 FC | 	wrlong	local04, local02
02408     04 4A 06 F1 | 	add	local02, #4
0240c     25 51 02 FB | 	rdlong	local05, local02
02410     28 17 C2 FA | 	rdbyte	result1, local05
02414     01 50 06 F1 | 	add	local05, #1
02418     25 51 62 FC | 	wrlong	local05, local02
0241c                 | '     }
0241c                 | '     b->cnt = i-1;
0241c                 | '     ptr = b->ptr;
0241c                 | '     i = *ptr++;
0241c                 | '     b->ptr = ptr;
0241c                 | '     return i;
0241c                 | LR__0138
0241c     D0 F0 03 F6 | 	mov	ptra, fp
02420     E0 00 A0 FD | 	call	#popregs_
02424                 | ___default_getc_ret
02424     2D 00 64 FD | 	ret
02428                 | 
02428                 | ___default_putc
02428     06 9C 05 F6 | 	mov	COUNT_, #6
0242c     D1 00 A0 FD | 	call	#pushregs_
02430     1F 49 02 F6 | 	mov	local01, arg01
02434     20 4B 02 F6 | 	mov	local02, arg02
02438     25 4D 02 FB | 	rdlong	local03, local02
0243c     08 4C 06 F1 | 	add	local03, #8
02440     26 4F 02 FB | 	rdlong	local04, local03
02444     08 4C 86 F1 | 	sub	local03, #8
02448     01 4E CE F7 | 	test	local04, #1 wz
0244c     08 00 90 AD |  if_e	jmp	#LR__0139
02450     25 3F 02 F6 | 	mov	arg01, local02
02454     00 01 B0 FD | 	call	#___default_flush
02458                 | LR__0139
02458     08 4C 06 F1 | 	add	local03, #8
0245c     26 4F 02 FB | 	rdlong	local04, local03
02460     02 4E 46 F5 | 	or	local04, #2
02464     26 4F 62 FC | 	wrlong	local04, local03
02468     08 4C 86 F1 | 	sub	local03, #8
0246c     26 51 02 FB | 	rdlong	local05, local03
02470     28 53 02 F6 | 	mov	local06, local05
02474     0C 4C 06 F1 | 	add	local03, #12
02478     26 53 02 F1 | 	add	local06, local03
0247c     29 49 42 FC | 	wrbyte	local01, local06
02480     FF 48 06 F5 | 	and	local01, #255
02484     01 50 06 F1 | 	add	local05, #1
02488     0C 4C 86 F1 | 	sub	local03, #12
0248c     26 51 62 FC | 	wrlong	local05, local03
02490     02 00 00 FF 
02494     00 50 0E F2 | 	cmp	local05, ##1024 wz
02498     10 00 90 5D |  if_ne	jmp	#LR__0140
0249c     25 3F 02 F6 | 	mov	arg01, local02
024a0     B4 00 B0 FD | 	call	#___default_flush
024a4     00 16 0E F2 | 	cmp	result1, #0 wz
024a8     01 48 66 56 |  if_ne	neg	local01, #1
024ac                 | LR__0140
024ac                 | '             c = -1;
024ac                 | '         }
024ac                 | '     }
024ac                 | '     return c;
024ac     24 17 02 F6 | 	mov	result1, local01
024b0     D0 F0 03 F6 | 	mov	ptra, fp
024b4     E0 00 A0 FD | 	call	#popregs_
024b8                 | ___default_putc_ret
024b8     2D 00 64 FD | 	ret
024bc                 | 
024bc                 | ___default_putc_terminal
024bc     06 9C 05 F6 | 	mov	COUNT_, #6
024c0     D1 00 A0 FD | 	call	#pushregs_
024c4     1F 49 02 F6 | 	mov	local01, arg01
024c8     20 4B 02 F6 | 	mov	local02, arg02
024cc     25 4D 02 FB | 	rdlong	local03, local02
024d0     08 4C 06 F1 | 	add	local03, #8
024d4     26 4F 02 FB | 	rdlong	local04, local03
024d8     08 4C 86 F1 | 	sub	local03, #8
024dc     01 4E CE F7 | 	test	local04, #1 wz
024e0     08 00 90 AD |  if_e	jmp	#LR__0141
024e4     25 3F 02 F6 | 	mov	arg01, local02
024e8     6C 00 B0 FD | 	call	#___default_flush
024ec                 | LR__0141
024ec     08 4C 06 F1 | 	add	local03, #8
024f0     26 4F 02 FB | 	rdlong	local04, local03
024f4     02 4E 46 F5 | 	or	local04, #2
024f8     26 4F 62 FC | 	wrlong	local04, local03
024fc     08 4C 86 F1 | 	sub	local03, #8
02500     26 51 02 FB | 	rdlong	local05, local03
02504     28 53 02 F6 | 	mov	local06, local05
02508     0C 4C 06 F1 | 	add	local03, #12
0250c     26 53 02 F1 | 	add	local06, local03
02510     29 49 42 FC | 	wrbyte	local01, local06
02514     FF 48 06 F5 | 	and	local01, #255
02518     0C 4C 86 F1 | 	sub	local03, #12
0251c     01 50 06 F1 | 	add	local05, #1
02520     26 51 62 FC | 	wrlong	local05, local03
02524     0A 48 0E F2 | 	cmp	local01, #10 wz
02528     0C 00 90 AD |  if_e	jmp	#LR__0142
0252c     02 00 00 FF 
02530     00 50 0E F2 | 	cmp	local05, ##1024 wz
02534     10 00 90 5D |  if_ne	jmp	#LR__0143
02538                 | LR__0142
02538     25 3F 02 F6 | 	mov	arg01, local02
0253c     18 00 B0 FD | 	call	#___default_flush
02540     00 16 0E F2 | 	cmp	result1, #0 wz
02544     01 48 66 56 |  if_ne	neg	local01, #1
02548                 | LR__0143
02548                 | '             c = -1;
02548                 | '         }
02548                 | '     }
02548                 | '     return c;
02548     24 17 02 F6 | 	mov	result1, local01
0254c     D0 F0 03 F6 | 	mov	ptra, fp
02550     E0 00 A0 FD | 	call	#popregs_
02554                 | ___default_putc_terminal_ret
02554     2D 00 64 FD | 	ret
02558                 | 
02558                 | ___default_flush
02558     0F 9C 05 F6 | 	mov	COUNT_, #15
0255c     D1 00 A0 FD | 	call	#pushregs_
02560     1F 49 02 F6 | 	mov	local01, arg01
02564     24 4B 02 FB | 	rdlong	local02, local01
02568     25 4D 02 FB | 	rdlong	local03, local02
0256c     08 4A 06 F1 | 	add	local02, #8
02570     25 4F 02 FB | 	rdlong	local04, local02
02574     08 4A 86 F1 | 	sub	local02, #8
02578     02 4E CE F7 | 	test	local04, #2 wz
0257c     B8 00 90 AD |  if_e	jmp	#LR__0146
02580     00 4C 5E F2 | 	cmps	local03, #0 wcz
02584     30 01 90 ED |  if_be	jmp	#LR__0148
02588     08 48 06 F1 | 	add	local01, #8
0258c     24 4F 02 FB | 	rdlong	local04, local01
02590     08 48 86 F1 | 	sub	local01, #8
02594     40 4E CE F7 | 	test	local04, #64 wz
02598     5C 00 90 AD |  if_e	jmp	#LR__0145
0259c     08 48 06 F1 | 	add	local01, #8
025a0     24 4F 02 FB | 	rdlong	local04, local01
025a4     08 48 86 F1 | 	sub	local01, #8
025a8     80 4E CE F7 | 	test	local04, #128 wz
025ac     48 00 90 AD |  if_e	jmp	#LR__0144
025b0     2C 48 06 F1 | 	add	local01, #44
025b4     24 4F 02 FB | 	rdlong	local04, local01
025b8     2C 48 86 F1 | 	sub	local01, #44
025bc     27 51 02 FB | 	rdlong	local05, local04
025c0     04 4E 06 F1 | 	add	local04, #4
025c4     27 53 02 FB | 	rdlong	local06, local04
025c8     24 3F 02 F6 | 	mov	arg01, local01
025cc     00 40 06 F6 | 	mov	arg02, #0
025d0     02 42 06 F6 | 	mov	arg03, #2
025d4     FE 54 02 F6 | 	mov	local07, objptr
025d8     28 FD 01 F6 | 	mov	objptr, local05
025dc     2D 52 62 FD | 	call	local06
025e0     2A FD 01 F6 | 	mov	objptr, local07
025e4     08 48 06 F1 | 	add	local01, #8
025e8     24 4F 02 FB | 	rdlong	local04, local01
025ec     80 4E 26 F5 | 	andn	local04, #128
025f0     24 4F 62 FC | 	wrlong	local04, local01
025f4     08 48 86 F1 | 	sub	local01, #8
025f8                 | LR__0144
025f8                 | LR__0145
025f8     14 48 06 F1 | 	add	local01, #20
025fc     24 4F 02 FB | 	rdlong	local04, local01
02600     14 48 86 F1 | 	sub	local01, #20
02604     27 51 02 FB | 	rdlong	local05, local04
02608     04 4E 06 F1 | 	add	local04, #4
0260c     27 53 02 FB | 	rdlong	local06, local04
02610     0C 4A 06 F1 | 	add	local02, #12
02614     25 41 02 F6 | 	mov	arg02, local02
02618     0C 4A 86 F1 | 	sub	local02, #12
0261c     24 3F 02 F6 | 	mov	arg01, local01
02620     26 43 02 F6 | 	mov	arg03, local03
02624     FE 56 02 F6 | 	mov	local08, objptr
02628     28 FD 01 F6 | 	mov	objptr, local05
0262c     2D 52 62 FD | 	call	local06
02630     2B FD 01 F6 | 	mov	objptr, local08
02634     80 00 90 FD | 	jmp	#LR__0148
02638                 | LR__0146
02638     08 4A 06 F1 | 	add	local02, #8
0263c     25 4F 02 FB | 	rdlong	local04, local02
02640     08 4A 86 F1 | 	sub	local02, #8
02644     01 4E CE F7 | 	test	local04, #1 wz
02648     6C 00 90 AD |  if_e	jmp	#LR__0147
0264c     00 4C 0E F2 | 	cmp	local03, #0 wz
02650     64 00 90 AD |  if_e	jmp	#LR__0147
02654     2C 48 06 F1 | 	add	local01, #44
02658     24 59 02 FB | 	rdlong	local09, local01
0265c     2C 48 86 F1 | 	sub	local01, #44
02660     2C 4F 02 F6 | 	mov	local04, local09
02664     27 51 02 FB | 	rdlong	local05, local04
02668     04 4E 06 F1 | 	add	local04, #4
0266c     27 5B 02 FB | 	rdlong	local10, local04
02670     04 4E 86 F1 | 	sub	local04, #4
02674     2D 53 02 F6 | 	mov	local06, local10
02678     24 5D 02 F6 | 	mov	local11, local01
0267c     26 5F 02 F6 | 	mov	local12, local03
02680     2F 5F 62 F6 | 	neg	local12, local12
02684     2F 61 02 F6 | 	mov	local13, local12
02688     01 54 06 F6 | 	mov	local07, #1
0268c     2E 3F 02 F6 | 	mov	arg01, local11
02690     30 41 02 F6 | 	mov	arg02, local13
02694     01 42 06 F6 | 	mov	arg03, #1
02698     FE 56 02 F6 | 	mov	local08, objptr
0269c     28 FD 01 F6 | 	mov	objptr, local05
026a0     2D 52 62 FD | 	call	local06
026a4     2B FD 01 F6 | 	mov	objptr, local08
026a8     0B 63 02 F6 | 	mov	local14, result1
026ac     31 65 02 F6 | 	mov	local15, local14
026b0     00 64 5E F2 | 	cmps	local15, #0 wcz
026b4     26 65 02 36 |  if_ae	mov	local15, local03
026b8                 | LR__0147
026b8                 | LR__0148
026b8     25 01 68 FC | 	wrlong	#0, local02
026bc     04 4A 06 F1 | 	add	local02, #4
026c0     25 01 68 FC | 	wrlong	#0, local02
026c4     04 4A 06 F1 | 	add	local02, #4
026c8     25 01 68 FC | 	wrlong	#0, local02
026cc                 | '     }
026cc                 | '     b->cnt = 0;
026cc                 | '     b->ptr = 0;
026cc                 | '     b->flags = 0;
026cc                 | '     return 0;
026cc     00 16 06 F6 | 	mov	result1, #0
026d0     D0 F0 03 F6 | 	mov	ptra, fp
026d4     E0 00 A0 FD | 	call	#popregs_
026d8                 | ___default_flush_ret
026d8     2D 00 64 FD | 	ret
026dc                 | 
026dc                 | _is_directory
026dc     01 9C 05 F6 | 	mov	COUNT_, #1
026e0     D1 00 A0 FD | 	call	#pushregs_
026e4     3C F0 07 F1 | 	add	ptra, #60
026e8     04 A0 05 F1 | 	add	fp, #4
026ec     D0 3E 62 FC | 	wrlong	arg01, fp
026f0     08 A0 05 F1 | 	add	fp, #8
026f4     D0 40 02 F6 | 	mov	arg02, fp
026f8     0C A0 85 F1 | 	sub	fp, #12
026fc     48 F4 BF FD | 	call	#_stat
02700     08 A0 05 F1 | 	add	fp, #8
02704     D0 16 62 FC | 	wrlong	result1, fp
02708     D0 48 0A FB | 	rdlong	local01, fp wz
0270c     08 A0 85 F1 | 	sub	fp, #8
02710     00 16 06 56 |  if_ne	mov	result1, #0
02714     24 00 90 5D |  if_ne	jmp	#LR__0149
02718     14 A0 05 F1 | 	add	fp, #20
0271c     D0 48 02 FB | 	rdlong	local01, fp
02720     14 A0 85 F1 | 	sub	fp, #20
02724     78 00 00 FF 
02728     00 48 06 F5 | 	and	local01, ##61440
0272c     08 00 00 FF 
02730     00 48 0E F2 | 	cmp	local01, ##4096 wz
02734                 | '         return 1;
02734     01 16 06 A6 |  if_e	mov	result1, #1
02738                 | '     }
02738                 | '     return 0;
02738     00 16 06 56 |  if_ne	mov	result1, #0
0273c                 | LR__0149
0273c     D0 F0 03 F6 | 	mov	ptra, fp
02740     E0 00 A0 FD | 	call	#popregs_
02744                 | _is_directory_ret
02744     2D 00 64 FD | 	ret
02748                 | 
02748                 | _do_dir
02748     04 9C 05 F6 | 	mov	COUNT_, #4
0274c     D1 00 A0 FD | 	call	#pushregs_
02750     40 F0 07 F1 | 	add	ptra, #64
02754     D0 3E 62 FC | 	wrlong	arg01, fp
02758     1F 49 0A F6 | 	mov	local01, arg01 wz
0275c     0C 00 90 AD |  if_e	jmp	#LR__0150
02760     D0 4A 02 FB | 	rdlong	local02, fp
02764     25 4D CA FA | 	rdbyte	local03, local02 wz
02768     78 00 90 5D |  if_ne	jmp	#LR__0151
0276c                 | LR__0150
0276c     01 00 00 FF 
02770     00 0C 06 F1 | 	add	ptr__dat__, ##512
02774     06 3F 02 F6 | 	mov	arg01, ptr__dat__
02778     01 00 00 FF 
0277c     00 0C 86 F1 | 	sub	ptr__dat__, ##512
02780     64 40 06 F6 | 	mov	arg02, #100
02784     CC E4 BF FD | 	call	#_getcwd
02788     01 00 00 FF 
0278c     00 0C 06 F1 | 	add	ptr__dat__, ##512
02790     06 49 02 F6 | 	mov	local01, ptr__dat__
02794     D0 48 62 FC | 	wrlong	local01, fp
02798     00 3E 06 F6 | 	mov	arg01, #0
0279c     01 00 00 FF 
027a0     00 0C 86 F1 | 	sub	ptr__dat__, ##512
027a4     AC E4 B0 FD | 	call	#__system___getiolock_0837
027a8     0B 3F 02 F6 | 	mov	arg01, result1
027ac     E8 B4 B0 FD | 	call	#__system___lockmem
027b0     00 16 06 F6 | 	mov	result1, #0
027b4     01 00 00 FF 
027b8     00 0C 06 F1 | 	add	ptr__dat__, ##512
027bc     06 41 02 F6 | 	mov	arg02, ptr__dat__
027c0     01 00 00 FF 
027c4     00 0C 86 F1 | 	sub	ptr__dat__, ##512
027c8     00 3E 06 F6 | 	mov	arg01, #0
027cc     00 42 06 F6 | 	mov	arg03, #0
027d0     4C B8 B0 FD | 	call	#__system___basic_print_string
027d4     00 3E 06 F6 | 	mov	arg01, #0
027d8     78 E4 B0 FD | 	call	#__system___getiolock_0837
027dc     0B 01 68 FC | 	wrlong	#0, result1
027e0     00 16 06 F6 | 	mov	result1, #0
027e4                 | LR__0151
027e4     D0 3E 02 FB | 	rdlong	arg01, fp
027e8     F0 FE BF FD | 	call	#_is_directory
027ec     00 16 0E F2 | 	cmp	result1, #0 wz
027f0     74 00 90 5D |  if_ne	jmp	#LR__0152
027f4     00 3E 06 F6 | 	mov	arg01, #0
027f8     58 E4 B0 FD | 	call	#__system___getiolock_0837
027fc     0B 3F 02 F6 | 	mov	arg01, result1
02800     94 B4 B0 FD | 	call	#__system___lockmem
02804     00 16 06 F6 | 	mov	result1, #0
02808     87 00 00 FF 
0280c     AD 41 06 F6 | 	mov	arg02, ##@LR__1186
02810     00 3E 06 F6 | 	mov	arg01, #0
02814     00 42 06 F6 | 	mov	arg03, #0
02818     04 B8 B0 FD | 	call	#__system___basic_print_string
0281c     D0 40 02 FB | 	rdlong	arg02, fp
02820     00 3E 06 F6 | 	mov	arg01, #0
02824     00 42 06 F6 | 	mov	arg03, #0
02828     F4 B7 B0 FD | 	call	#__system___basic_print_string
0282c     87 00 00 FF 
02830     B5 41 06 F6 | 	mov	arg02, ##@LR__1187
02834     00 3E 06 F6 | 	mov	arg01, #0
02838     00 42 06 F6 | 	mov	arg03, #0
0283c     E0 B7 B0 FD | 	call	#__system___basic_print_string
02840     00 3E 06 F6 | 	mov	arg01, #0
02844     0A 40 06 F6 | 	mov	arg02, #10
02848     00 42 06 F6 | 	mov	arg03, #0
0284c     84 B7 B0 FD | 	call	#__system___basic_print_char
02850     01 16 06 F6 | 	mov	result1, #1
02854     00 3E 06 F6 | 	mov	arg01, #0
02858     F8 E3 B0 FD | 	call	#__system___getiolock_0837
0285c     0B 01 68 FC | 	wrlong	#0, result1
02860     00 16 06 F6 | 	mov	result1, #0
02864                 | '         return;
02864     A0 02 90 FD | 	jmp	#LR__0158
02868                 | LR__0152
02868     D0 3E 02 FB | 	rdlong	arg01, fp
0286c     D4 F0 BF FD | 	call	#_opendir
02870     04 A0 05 F1 | 	add	fp, #4
02874     D0 16 62 FC | 	wrlong	result1, fp
02878     D0 4A 0A FB | 	rdlong	local02, fp wz
0287c     04 A0 85 F1 | 	sub	fp, #4
02880     60 00 90 5D |  if_ne	jmp	#LR__0153
02884     00 3E 06 F6 | 	mov	arg01, #0
02888     C8 E3 B0 FD | 	call	#__system___getiolock_0837
0288c     0B 3F 02 F6 | 	mov	arg01, result1
02890     04 B4 B0 FD | 	call	#__system___lockmem
02894     00 16 06 F6 | 	mov	result1, #0
02898     87 00 00 FF 
0289c     C9 41 06 F6 | 	mov	arg02, ##@LR__1188
028a0     00 3E 06 F6 | 	mov	arg01, #0
028a4     00 42 06 F6 | 	mov	arg03, #0
028a8     74 B7 B0 FD | 	call	#__system___basic_print_string
028ac     D0 40 02 FB | 	rdlong	arg02, fp
028b0     00 3E 06 F6 | 	mov	arg01, #0
028b4     00 42 06 F6 | 	mov	arg03, #0
028b8     64 B7 B0 FD | 	call	#__system___basic_print_string
028bc     00 3E 06 F6 | 	mov	arg01, #0
028c0     0A 40 06 F6 | 	mov	arg02, #10
028c4     00 42 06 F6 | 	mov	arg03, #0
028c8     08 B7 B0 FD | 	call	#__system___basic_print_char
028cc     01 16 06 F6 | 	mov	result1, #1
028d0     00 3E 06 F6 | 	mov	arg01, #0
028d4     7C E3 B0 FD | 	call	#__system___getiolock_0837
028d8     0B 01 68 FC | 	wrlong	#0, result1
028dc     00 16 06 F6 | 	mov	result1, #0
028e0                 | '         return;
028e0     24 02 90 FD | 	jmp	#LR__0158
028e4                 | LR__0153
028e4     00 0D 06 F1 | 	add	ptr__dat__, #256
028e8     06 3F 02 F6 | 	mov	arg01, ptr__dat__
028ec     00 0D 86 F1 | 	sub	ptr__dat__, #256
028f0     00 41 06 F6 | 	mov	arg02, #256
028f4     5C E3 BF FD | 	call	#_getcwd
028f8     D0 3E 02 FB | 	rdlong	arg01, fp
028fc     24 E4 BF FD | 	call	#_chdir
02900                 | '     chdir(filename);
02900                 | '     for(;;) {
02900                 | LR__0154
02900     04 A0 05 F1 | 	add	fp, #4
02904     D0 3E 02 FB | 	rdlong	arg01, fp
02908     04 A0 85 F1 | 	sub	fp, #4
0290c     B8 F1 BF FD | 	call	#_readdir
02910     0B 4B 02 F6 | 	mov	local02, result1
02914     08 A0 05 F1 | 	add	fp, #8
02918     D0 4A 62 FC | 	wrlong	local02, fp
0291c     D0 48 0A FB | 	rdlong	local01, fp wz
02920     08 A0 85 F1 | 	sub	fp, #8
02924     C0 01 90 AD |  if_e	jmp	#LR__0157
02928     08 A0 05 F1 | 	add	fp, #8
0292c     D0 3E 02 FB | 	rdlong	arg01, fp
02930     04 A0 05 F1 | 	add	fp, #4
02934     D0 40 02 F6 | 	mov	arg02, fp
02938     0C A0 85 F1 | 	sub	fp, #12
0293c     08 F2 BF FD | 	call	#_stat
02940     0B 4F 02 F6 | 	mov	local04, result1
02944     3C A0 05 F1 | 	add	fp, #60
02948     D0 4E 62 FC | 	wrlong	local04, fp
0294c     D0 48 0A FB | 	rdlong	local01, fp wz
02950     3C A0 85 F1 | 	sub	fp, #60
02954     68 00 90 AD |  if_e	jmp	#LR__0155
02958     00 3E 06 F6 | 	mov	arg01, #0
0295c     F4 E2 B0 FD | 	call	#__system___getiolock_0837
02960     0B 3F 02 F6 | 	mov	arg01, result1
02964     30 B3 B0 FD | 	call	#__system___lockmem
02968     00 16 06 F6 | 	mov	result1, #0
0296c     87 00 00 FF 
02970     EA 41 06 F6 | 	mov	arg02, ##@LR__1189
02974     00 3E 06 F6 | 	mov	arg01, #0
02978     00 42 06 F6 | 	mov	arg03, #0
0297c     A0 B6 B0 FD | 	call	#__system___basic_print_string
02980     08 A0 05 F1 | 	add	fp, #8
02984     D0 40 02 FB | 	rdlong	arg02, fp
02988     08 A0 85 F1 | 	sub	fp, #8
0298c     00 3E 06 F6 | 	mov	arg01, #0
02990     00 42 06 F6 | 	mov	arg03, #0
02994     88 B6 B0 FD | 	call	#__system___basic_print_string
02998     00 3E 06 F6 | 	mov	arg01, #0
0299c     0A 40 06 F6 | 	mov	arg02, #10
029a0     00 42 06 F6 | 	mov	arg03, #0
029a4     2C B6 B0 FD | 	call	#__system___basic_print_char
029a8     01 16 06 F6 | 	mov	result1, #1
029ac     00 3E 06 F6 | 	mov	arg01, #0
029b0     A0 E2 B0 FD | 	call	#__system___getiolock_0837
029b4     0B 01 68 FC | 	wrlong	#0, result1
029b8     00 16 06 F6 | 	mov	result1, #0
029bc     40 FF 9F FD | 	jmp	#LR__0154
029c0                 | LR__0155
029c0     14 A0 05 F1 | 	add	fp, #20
029c4     D0 48 02 FB | 	rdlong	local01, fp
029c8     14 A0 85 F1 | 	sub	fp, #20
029cc     78 00 00 FF 
029d0     00 48 06 F5 | 	and	local01, ##61440
029d4     08 00 00 FF 
029d8     00 48 0E F2 | 	cmp	local01, ##4096 wz
029dc     80 00 90 5D |  if_ne	jmp	#LR__0156
029e0     00 3E 06 F6 | 	mov	arg01, #0
029e4     6C E2 B0 FD | 	call	#__system___getiolock_0837
029e8     0B 3F 02 F6 | 	mov	arg01, result1
029ec     A8 B2 B0 FD | 	call	#__system___lockmem
029f0     00 16 06 F6 | 	mov	result1, #0
029f4     88 00 00 FF 
029f8     00 40 06 F6 | 	mov	arg02, ##@LR__1190
029fc     00 3E 06 F6 | 	mov	arg01, #0
02a00     04 40 00 FF 
02a04     00 42 06 F6 | 	mov	arg03, ##8390656
02a08     14 B6 B0 FD | 	call	#__system___basic_print_string
02a0c     88 00 00 FF 
02a10     06 40 06 F6 | 	mov	arg02, ##@LR__1191
02a14     00 3E 06 F6 | 	mov	arg01, #0
02a18     00 42 06 F6 | 	mov	arg03, #0
02a1c     00 B6 B0 FD | 	call	#__system___basic_print_string
02a20     08 A0 05 F1 | 	add	fp, #8
02a24     D0 40 02 FB | 	rdlong	arg02, fp
02a28     08 A0 85 F1 | 	sub	fp, #8
02a2c     00 3E 06 F6 | 	mov	arg01, #0
02a30     00 42 06 F6 | 	mov	arg03, #0
02a34     E8 B5 B0 FD | 	call	#__system___basic_print_string
02a38     00 3E 06 F6 | 	mov	arg01, #0
02a3c     0A 40 06 F6 | 	mov	arg02, #10
02a40     00 42 06 F6 | 	mov	arg03, #0
02a44     8C B5 B0 FD | 	call	#__system___basic_print_char
02a48     01 16 06 F6 | 	mov	result1, #1
02a4c     00 3E 06 F6 | 	mov	arg01, #0
02a50     00 E2 B0 FD | 	call	#__system___getiolock_0837
02a54     0B 01 68 FC | 	wrlong	#0, result1
02a58     00 16 06 F6 | 	mov	result1, #0
02a5c     A0 FE 9F FD | 	jmp	#LR__0154
02a60                 | LR__0156
02a60     00 3E 06 F6 | 	mov	arg01, #0
02a64     EC E1 B0 FD | 	call	#__system___getiolock_0837
02a68     0B 3F 02 F6 | 	mov	arg01, result1
02a6c     28 B2 B0 FD | 	call	#__system___lockmem
02a70     00 16 06 F6 | 	mov	result1, #0
02a74     24 A0 05 F1 | 	add	fp, #36
02a78     D0 40 02 FB | 	rdlong	arg02, fp
02a7c     24 A0 85 F1 | 	sub	fp, #36
02a80     00 3E 06 F6 | 	mov	arg01, #0
02a84     04 40 00 FF 
02a88     00 42 06 F6 | 	mov	arg03, ##8390656
02a8c     0A 44 06 F6 | 	mov	arg04, #10
02a90     D4 B5 B0 FD | 	call	#__system___basic_print_unsigned
02a94     88 00 00 FF 
02a98     08 40 06 F6 | 	mov	arg02, ##@LR__1192
02a9c     00 3E 06 F6 | 	mov	arg01, #0
02aa0     00 42 06 F6 | 	mov	arg03, #0
02aa4     78 B5 B0 FD | 	call	#__system___basic_print_string
02aa8     08 A0 05 F1 | 	add	fp, #8
02aac     D0 40 02 FB | 	rdlong	arg02, fp
02ab0     08 A0 85 F1 | 	sub	fp, #8
02ab4     00 3E 06 F6 | 	mov	arg01, #0
02ab8     00 42 06 F6 | 	mov	arg03, #0
02abc     60 B5 B0 FD | 	call	#__system___basic_print_string
02ac0     00 3E 06 F6 | 	mov	arg01, #0
02ac4     0A 40 06 F6 | 	mov	arg02, #10
02ac8     00 42 06 F6 | 	mov	arg03, #0
02acc     04 B5 B0 FD | 	call	#__system___basic_print_char
02ad0     01 16 06 F6 | 	mov	result1, #1
02ad4     00 3E 06 F6 | 	mov	arg01, #0
02ad8     78 E1 B0 FD | 	call	#__system___getiolock_0837
02adc     0B 01 68 FC | 	wrlong	#0, result1
02ae0     00 16 06 F6 | 	mov	result1, #0
02ae4     18 FE 9F FD | 	jmp	#LR__0154
02ae8                 | LR__0157
02ae8     04 A0 05 F1 | 	add	fp, #4
02aec     D0 3E 02 FB | 	rdlong	arg01, fp
02af0     04 A0 85 F1 | 	sub	fp, #4
02af4     60 EF BF FD | 	call	#_closedir
02af8     00 0D 06 F1 | 	add	ptr__dat__, #256
02afc     06 3F 02 F6 | 	mov	arg01, ptr__dat__
02b00     00 0D 86 F1 | 	sub	ptr__dat__, #256
02b04     1C E2 BF FD | 	call	#_chdir
02b08                 | LR__0158
02b08     D0 F0 03 F6 | 	mov	ptra, fp
02b0c     E0 00 A0 FD | 	call	#popregs_
02b10                 | _do_dir_ret
02b10     2D 00 64 FD | 	ret
02b14                 | 
02b14                 | _do_copy
02b14     0E 9C 05 F6 | 	mov	COUNT_, #14
02b18     D1 00 A0 FD | 	call	#pushregs_
02b1c     1F 49 02 F6 | 	mov	local01, arg01
02b20     20 4B 02 F6 | 	mov	local02, arg02
02b24     24 3F 02 F6 | 	mov	arg01, local01
02b28     B0 FB BF FD | 	call	#_is_directory
02b2c     00 16 0E F2 | 	cmp	result1, #0 wz
02b30     50 00 90 AD |  if_e	jmp	#LR__0159
02b34     00 3E 06 F6 | 	mov	arg01, #0
02b38     18 E1 B0 FD | 	call	#__system___getiolock_0837
02b3c     0B 3F 02 F6 | 	mov	arg01, result1
02b40     54 B1 B0 FD | 	call	#__system___lockmem
02b44     00 16 06 F6 | 	mov	result1, #0
02b48     88 00 00 FF 
02b4c     0A 40 06 F6 | 	mov	arg02, ##@LR__1193
02b50     00 3E 06 F6 | 	mov	arg01, #0
02b54     00 42 06 F6 | 	mov	arg03, #0
02b58     C4 B4 B0 FD | 	call	#__system___basic_print_string
02b5c     00 3E 06 F6 | 	mov	arg01, #0
02b60     0A 40 06 F6 | 	mov	arg02, #10
02b64     00 42 06 F6 | 	mov	arg03, #0
02b68     68 B4 B0 FD | 	call	#__system___basic_print_char
02b6c     01 16 06 F6 | 	mov	result1, #1
02b70     00 3E 06 F6 | 	mov	arg01, #0
02b74     DC E0 B0 FD | 	call	#__system___getiolock_0837
02b78     0B 01 68 FC | 	wrlong	#0, result1
02b7c     00 16 06 F6 | 	mov	result1, #0
02b80                 | '         return;
02b80     1C 01 90 FD | 	jmp	#LR__0167
02b84                 | LR__0159
02b84     00 4A 0E F2 | 	cmp	local02, #0 wz
02b88     74 00 90 AD |  if_e	jmp	#LR__0160
02b8c     25 3F 02 F6 | 	mov	arg01, local02
02b90     48 FB BF FD | 	call	#_is_directory
02b94     00 16 0E F2 | 	cmp	result1, #0 wz
02b98     64 00 90 AD |  if_e	jmp	#LR__0160
02b9c     24 3F 02 F6 | 	mov	arg01, local01
02ba0     88 00 00 FF 
02ba4     2C 40 06 F6 | 	mov	arg02, ##@LR__1194
02ba8     5C ED BF FD | 	call	#_strrchr
02bac     0B 4D 0A F6 | 	mov	local03, result1 wz
02bb0     01 4C 06 51 |  if_ne	add	local03, #1
02bb4     24 4D 02 A6 |  if_e	mov	local03, local01
02bb8     06 4F 02 F6 | 	mov	local04, ptr__dat__
02bbc     00 51 06 F6 | 	mov	local05, #256
02bc0     88 00 00 FF 
02bc4     2E 52 06 F6 | 	mov	local06, ##@LR__1195
02bc8     29 55 02 F6 | 	mov	local07, local06
02bcc     25 57 02 F6 | 	mov	local08, local02
02bd0     26 59 02 F6 | 	mov	local09, local03
02bd4     27 3F 02 F6 | 	mov	arg01, local04
02bd8     00 41 06 F6 | 	mov	arg02, #256
02bdc     2A 43 02 F6 | 	mov	arg03, local07
02be0     F8 45 02 F6 | 	mov	arg04, ptra
02be4     61 57 66 FC | 	wrlong	local08, ptra++
02be8     61 59 66 FC | 	wrlong	local09, ptra++
02bec     34 E6 BF FD | 	call	#_snprintf
02bf0     0B 5B 02 F6 | 	mov	local10, result1
02bf4     08 F0 87 F1 | 	sub	ptra, #8
02bf8     06 5D 02 F6 | 	mov	local11, ptr__dat__
02bfc     2E 4B 02 F6 | 	mov	local02, local11
02c00                 | LR__0160
02c00     88 00 00 FF 
02c04     34 40 06 F6 | 	mov	arg02, ##@LR__1196
02c08     24 3F 02 F6 | 	mov	arg01, local01
02c0c     64 E8 BF FD | 	call	#_fopen
02c10     0B 5F 0A F6 | 	mov	local12, result1 wz
02c14     0C 00 90 5D |  if_ne	jmp	#LR__0161
02c18     24 3F 02 F6 | 	mov	arg01, local01
02c1c     04 EA BF FD | 	call	#_perror
02c20                 | '         perror(src);
02c20                 | '         return;
02c20     7C 00 90 FD | 	jmp	#LR__0167
02c24                 | LR__0161
02c24     00 4A 0E F2 | 	cmp	local02, #0 wz
02c28     2C 00 90 AD |  if_e	jmp	#LR__0162
02c2c     88 00 00 FF 
02c30     37 40 06 F6 | 	mov	arg02, ##@LR__1197
02c34     25 3F 02 F6 | 	mov	arg01, local02
02c38     38 E8 BF FD | 	call	#_fopen
02c3c     0B 61 0A F6 | 	mov	local13, result1 wz
02c40     20 00 90 5D |  if_ne	jmp	#LR__0163
02c44     25 3F 02 F6 | 	mov	arg01, local02
02c48     D8 E9 BF FD | 	call	#_perror
02c4c     2F 3F 02 F6 | 	mov	arg01, local12
02c50                 | ' {
02c50                 | '     return _closeraw(f);
02c50     28 F5 BF FD | 	call	#__closeraw
02c54                 | '             perror(dest);
02c54                 | '             fclose(inf);
02c54                 | '             return;
02c54     48 00 90 FD | 	jmp	#LR__0167
02c58                 | LR__0162
02c58     01 3E 06 F6 | 	mov	arg01, #1
02c5c     18 E5 BF FD | 	call	#___getftab
02c60     0B 61 02 F6 | 	mov	local13, result1
02c64                 | LR__0163
02c64                 | '         outf =  __getftab(1) ;
02c64                 | '     }
02c64                 | '     for(;;) {
02c64                 | LR__0164
02c64     2F 3F 02 F6 | 	mov	arg01, local12
02c68     7C E5 BF FD | 	call	#_fgetc
02c6c     0B 63 02 F6 | 	mov	local14, result1
02c70     00 62 5E F2 | 	cmps	local14, #0 wcz
02c74     10 00 90 CD |  if_b	jmp	#LR__0165
02c78     31 3F 02 F6 | 	mov	arg01, local14
02c7c     30 41 02 F6 | 	mov	arg02, local13
02c80     28 E5 BF FD | 	call	#_fputc
02c84     DC FF 9F FD | 	jmp	#LR__0164
02c88                 | LR__0165
02c88     2F 3F 02 F6 | 	mov	arg01, local12
02c8c                 | ' {
02c8c                 | '     return _closeraw(f);
02c8c     EC F4 BF FD | 	call	#__closeraw
02c90     00 4A 0E F2 | 	cmp	local02, #0 wz
02c94     08 00 90 AD |  if_e	jmp	#LR__0166
02c98     30 3F 02 F6 | 	mov	arg01, local13
02c9c                 | ' {
02c9c                 | '     return _closeraw(f);
02c9c     DC F4 BF FD | 	call	#__closeraw
02ca0                 | LR__0166
02ca0                 | LR__0167
02ca0     D0 F0 03 F6 | 	mov	ptra, fp
02ca4     E0 00 A0 FD | 	call	#popregs_
02ca8                 | _do_copy_ret
02ca8     2D 00 64 FD | 	ret
02cac                 | 
02cac                 | _do_help
02cac     00 3E 06 F6 | 	mov	arg01, #0
02cb0     A0 DF B0 FD | 	call	#__system___getiolock_0837
02cb4     0B 3F 02 F6 | 	mov	arg01, result1
02cb8     DC AF B0 FD | 	call	#__system___lockmem
02cbc     00 16 06 F6 | 	mov	result1, #0
02cc0     88 00 00 FF 
02cc4     3A 40 06 F6 | 	mov	arg02, ##@LR__1198
02cc8     00 3E 06 F6 | 	mov	arg01, #0
02ccc     00 42 06 F6 | 	mov	arg03, #0
02cd0     4C B3 B0 FD | 	call	#__system___basic_print_string
02cd4     00 3E 06 F6 | 	mov	arg01, #0
02cd8     0A 40 06 F6 | 	mov	arg02, #10
02cdc     00 42 06 F6 | 	mov	arg03, #0
02ce0     F0 B2 B0 FD | 	call	#__system___basic_print_char
02ce4     01 16 06 F6 | 	mov	result1, #1
02ce8     00 3E 06 F6 | 	mov	arg01, #0
02cec     64 DF B0 FD | 	call	#__system___getiolock_0837
02cf0     0B 01 68 FC | 	wrlong	#0, result1
02cf4     00 16 06 F6 | 	mov	result1, #0
02cf8     00 3E 06 F6 | 	mov	arg01, #0
02cfc     54 DF B0 FD | 	call	#__system___getiolock_0837
02d00     0B 3F 02 F6 | 	mov	arg01, result1
02d04     90 AF B0 FD | 	call	#__system___lockmem
02d08     00 16 06 F6 | 	mov	result1, #0
02d0c     88 00 00 FF 
02d10     67 40 06 F6 | 	mov	arg02, ##@LR__1199
02d14     00 3E 06 F6 | 	mov	arg01, #0
02d18     00 42 06 F6 | 	mov	arg03, #0
02d1c     00 B3 B0 FD | 	call	#__system___basic_print_string
02d20     00 3E 06 F6 | 	mov	arg01, #0
02d24     0A 40 06 F6 | 	mov	arg02, #10
02d28     00 42 06 F6 | 	mov	arg03, #0
02d2c     A4 B2 B0 FD | 	call	#__system___basic_print_char
02d30     01 16 06 F6 | 	mov	result1, #1
02d34     00 3E 06 F6 | 	mov	arg01, #0
02d38     18 DF B0 FD | 	call	#__system___getiolock_0837
02d3c     0B 01 68 FC | 	wrlong	#0, result1
02d40     00 16 06 F6 | 	mov	result1, #0
02d44     00 3E 06 F6 | 	mov	arg01, #0
02d48     08 DF B0 FD | 	call	#__system___getiolock_0837
02d4c     0B 3F 02 F6 | 	mov	arg01, result1
02d50     44 AF B0 FD | 	call	#__system___lockmem
02d54     00 16 06 F6 | 	mov	result1, #0
02d58     88 00 00 FF 
02d5c     90 40 06 F6 | 	mov	arg02, ##@LR__1200
02d60     00 3E 06 F6 | 	mov	arg01, #0
02d64     00 42 06 F6 | 	mov	arg03, #0
02d68     B4 B2 B0 FD | 	call	#__system___basic_print_string
02d6c     00 3E 06 F6 | 	mov	arg01, #0
02d70     0A 40 06 F6 | 	mov	arg02, #10
02d74     00 42 06 F6 | 	mov	arg03, #0
02d78     58 B2 B0 FD | 	call	#__system___basic_print_char
02d7c     01 16 06 F6 | 	mov	result1, #1
02d80     00 3E 06 F6 | 	mov	arg01, #0
02d84     CC DE B0 FD | 	call	#__system___getiolock_0837
02d88     0B 01 68 FC | 	wrlong	#0, result1
02d8c     00 16 06 F6 | 	mov	result1, #0
02d90     00 3E 06 F6 | 	mov	arg01, #0
02d94     BC DE B0 FD | 	call	#__system___getiolock_0837
02d98     0B 3F 02 F6 | 	mov	arg01, result1
02d9c     F8 AE B0 FD | 	call	#__system___lockmem
02da0     00 16 06 F6 | 	mov	result1, #0
02da4     88 00 00 FF 
02da8     B2 40 06 F6 | 	mov	arg02, ##@LR__1201
02dac     00 3E 06 F6 | 	mov	arg01, #0
02db0     00 42 06 F6 | 	mov	arg03, #0
02db4     68 B2 B0 FD | 	call	#__system___basic_print_string
02db8     00 3E 06 F6 | 	mov	arg01, #0
02dbc     0A 40 06 F6 | 	mov	arg02, #10
02dc0     00 42 06 F6 | 	mov	arg03, #0
02dc4     0C B2 B0 FD | 	call	#__system___basic_print_char
02dc8     01 16 06 F6 | 	mov	result1, #1
02dcc     00 3E 06 F6 | 	mov	arg01, #0
02dd0     80 DE B0 FD | 	call	#__system___getiolock_0837
02dd4     0B 01 68 FC | 	wrlong	#0, result1
02dd8     00 16 06 F6 | 	mov	result1, #0
02ddc     00 3E 06 F6 | 	mov	arg01, #0
02de0     70 DE B0 FD | 	call	#__system___getiolock_0837
02de4     0B 3F 02 F6 | 	mov	arg01, result1
02de8     AC AE B0 FD | 	call	#__system___lockmem
02dec     00 16 06 F6 | 	mov	result1, #0
02df0     88 00 00 FF 
02df4     DC 40 06 F6 | 	mov	arg02, ##@LR__1202
02df8     00 3E 06 F6 | 	mov	arg01, #0
02dfc     00 42 06 F6 | 	mov	arg03, #0
02e00     1C B2 B0 FD | 	call	#__system___basic_print_string
02e04     00 3E 06 F6 | 	mov	arg01, #0
02e08     0A 40 06 F6 | 	mov	arg02, #10
02e0c     00 42 06 F6 | 	mov	arg03, #0
02e10     C0 B1 B0 FD | 	call	#__system___basic_print_char
02e14     01 16 06 F6 | 	mov	result1, #1
02e18     00 3E 06 F6 | 	mov	arg01, #0
02e1c     34 DE B0 FD | 	call	#__system___getiolock_0837
02e20     0B 01 68 FC | 	wrlong	#0, result1
02e24     00 16 06 F6 | 	mov	result1, #0
02e28     00 3E 06 F6 | 	mov	arg01, #0
02e2c     24 DE B0 FD | 	call	#__system___getiolock_0837
02e30     0B 3F 02 F6 | 	mov	arg01, result1
02e34     60 AE B0 FD | 	call	#__system___lockmem
02e38     00 16 06 F6 | 	mov	result1, #0
02e3c     88 00 00 FF 
02e40     13 41 06 F6 | 	mov	arg02, ##@LR__1203
02e44     00 3E 06 F6 | 	mov	arg01, #0
02e48     00 42 06 F6 | 	mov	arg03, #0
02e4c     D0 B1 B0 FD | 	call	#__system___basic_print_string
02e50     00 3E 06 F6 | 	mov	arg01, #0
02e54     0A 40 06 F6 | 	mov	arg02, #10
02e58     00 42 06 F6 | 	mov	arg03, #0
02e5c     74 B1 B0 FD | 	call	#__system___basic_print_char
02e60     01 16 06 F6 | 	mov	result1, #1
02e64     00 3E 06 F6 | 	mov	arg01, #0
02e68     E8 DD B0 FD | 	call	#__system___getiolock_0837
02e6c     0B 01 68 FC | 	wrlong	#0, result1
02e70     00 16 06 F6 | 	mov	result1, #0
02e74     00 3E 06 F6 | 	mov	arg01, #0
02e78     D8 DD B0 FD | 	call	#__system___getiolock_0837
02e7c     0B 3F 02 F6 | 	mov	arg01, result1
02e80     14 AE B0 FD | 	call	#__system___lockmem
02e84     00 16 06 F6 | 	mov	result1, #0
02e88     88 00 00 FF 
02e8c     44 41 06 F6 | 	mov	arg02, ##@LR__1204
02e90     00 3E 06 F6 | 	mov	arg01, #0
02e94     00 42 06 F6 | 	mov	arg03, #0
02e98     84 B1 B0 FD | 	call	#__system___basic_print_string
02e9c     00 3E 06 F6 | 	mov	arg01, #0
02ea0     0A 40 06 F6 | 	mov	arg02, #10
02ea4     00 42 06 F6 | 	mov	arg03, #0
02ea8     28 B1 B0 FD | 	call	#__system___basic_print_char
02eac     01 16 06 F6 | 	mov	result1, #1
02eb0     00 3E 06 F6 | 	mov	arg01, #0
02eb4     9C DD B0 FD | 	call	#__system___getiolock_0837
02eb8     0B 01 68 FC | 	wrlong	#0, result1
02ebc     00 16 06 F6 | 	mov	result1, #0
02ec0     00 3E 06 F6 | 	mov	arg01, #0
02ec4     8C DD B0 FD | 	call	#__system___getiolock_0837
02ec8     0B 3F 02 F6 | 	mov	arg01, result1
02ecc     C8 AD B0 FD | 	call	#__system___lockmem
02ed0     00 16 06 F6 | 	mov	result1, #0
02ed4     88 00 00 FF 
02ed8     76 41 06 F6 | 	mov	arg02, ##@LR__1205
02edc     00 3E 06 F6 | 	mov	arg01, #0
02ee0     00 42 06 F6 | 	mov	arg03, #0
02ee4     38 B1 B0 FD | 	call	#__system___basic_print_string
02ee8     00 3E 06 F6 | 	mov	arg01, #0
02eec     0A 40 06 F6 | 	mov	arg02, #10
02ef0     00 42 06 F6 | 	mov	arg03, #0
02ef4     DC B0 B0 FD | 	call	#__system___basic_print_char
02ef8     01 16 06 F6 | 	mov	result1, #1
02efc     00 3E 06 F6 | 	mov	arg01, #0
02f00     50 DD B0 FD | 	call	#__system___getiolock_0837
02f04     0B 01 68 FC | 	wrlong	#0, result1
02f08     00 16 06 F6 | 	mov	result1, #0
02f0c     00 3E 06 F6 | 	mov	arg01, #0
02f10     40 DD B0 FD | 	call	#__system___getiolock_0837
02f14     0B 3F 02 F6 | 	mov	arg01, result1
02f18     7C AD B0 FD | 	call	#__system___lockmem
02f1c     00 16 06 F6 | 	mov	result1, #0
02f20     88 00 00 FF 
02f24     96 41 06 F6 | 	mov	arg02, ##@LR__1206
02f28     00 3E 06 F6 | 	mov	arg01, #0
02f2c     00 42 06 F6 | 	mov	arg03, #0
02f30     EC B0 B0 FD | 	call	#__system___basic_print_string
02f34     00 3E 06 F6 | 	mov	arg01, #0
02f38     0A 40 06 F6 | 	mov	arg02, #10
02f3c     00 42 06 F6 | 	mov	arg03, #0
02f40     90 B0 B0 FD | 	call	#__system___basic_print_char
02f44     01 16 06 F6 | 	mov	result1, #1
02f48     00 3E 06 F6 | 	mov	arg01, #0
02f4c     04 DD B0 FD | 	call	#__system___getiolock_0837
02f50     0B 01 68 FC | 	wrlong	#0, result1
02f54     00 16 06 F6 | 	mov	result1, #0
02f58     00 3E 06 F6 | 	mov	arg01, #0
02f5c     F4 DC B0 FD | 	call	#__system___getiolock_0837
02f60     0B 3F 02 F6 | 	mov	arg01, result1
02f64     30 AD B0 FD | 	call	#__system___lockmem
02f68     00 16 06 F6 | 	mov	result1, #0
02f6c     88 00 00 FF 
02f70     BE 41 06 F6 | 	mov	arg02, ##@LR__1207
02f74     00 3E 06 F6 | 	mov	arg01, #0
02f78     00 42 06 F6 | 	mov	arg03, #0
02f7c     A0 B0 B0 FD | 	call	#__system___basic_print_string
02f80     00 3E 06 F6 | 	mov	arg01, #0
02f84     0A 40 06 F6 | 	mov	arg02, #10
02f88     00 42 06 F6 | 	mov	arg03, #0
02f8c     44 B0 B0 FD | 	call	#__system___basic_print_char
02f90     01 16 06 F6 | 	mov	result1, #1
02f94     00 3E 06 F6 | 	mov	arg01, #0
02f98     B8 DC B0 FD | 	call	#__system___getiolock_0837
02f9c     0B 01 68 FC | 	wrlong	#0, result1
02fa0     00 16 06 F6 | 	mov	result1, #0
02fa4     00 3E 06 F6 | 	mov	arg01, #0
02fa8     A8 DC B0 FD | 	call	#__system___getiolock_0837
02fac     0B 3F 02 F6 | 	mov	arg01, result1
02fb0     E4 AC B0 FD | 	call	#__system___lockmem
02fb4     00 16 06 F6 | 	mov	result1, #0
02fb8     88 00 00 FF 
02fbc     E2 41 06 F6 | 	mov	arg02, ##@LR__1208
02fc0     00 3E 06 F6 | 	mov	arg01, #0
02fc4     00 42 06 F6 | 	mov	arg03, #0
02fc8     54 B0 B0 FD | 	call	#__system___basic_print_string
02fcc     00 3E 06 F6 | 	mov	arg01, #0
02fd0     0A 40 06 F6 | 	mov	arg02, #10
02fd4     00 42 06 F6 | 	mov	arg03, #0
02fd8     F8 AF B0 FD | 	call	#__system___basic_print_char
02fdc     01 16 06 F6 | 	mov	result1, #1
02fe0     00 3E 06 F6 | 	mov	arg01, #0
02fe4     6C DC B0 FD | 	call	#__system___getiolock_0837
02fe8     0B 01 68 FC | 	wrlong	#0, result1
02fec     00 16 06 F6 | 	mov	result1, #0
02ff0                 | _do_help_ret
02ff0     2D 00 64 FD | 	ret
02ff4                 | 
02ff4                 | _parse_cmd
02ff4     08 9C 05 F6 | 	mov	COUNT_, #8
02ff8     D1 00 A0 FD | 	call	#pushregs_
02ffc     1F 49 02 F6 | 	mov	local01, arg01
03000     20 4B 02 F6 | 	mov	local02, arg02
03004     21 4D 02 F6 | 	mov	local03, arg03
03008     26 01 68 FC | 	wrlong	#0, local03
0300c     25 01 68 FC | 	wrlong	#0, local02
03010     20 D0 9F FE | 	loc	pa,	#(@LR__0169-@LR__0168)
03014     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03018                 | '     *arg1 = *arg2 = 0;
03018                 | '     while (isspace(*buf)) buf++;
03018                 | LR__0168
03018     24 4F C2 FA | 	rdbyte	local04, local01
0301c     27 3F 02 F6 | 	mov	arg01, local04
03020                 | ' {
03020                 | '   return  (__ctype_get(c) & 0x10 ) ;
03020     80 3E 3E F3 | 	fle	arg01, #128 wcz
03024                 | '     return __ctype[c];
03024     03 00 00 FF 
03028     C4 0C 06 F1 | 	add	ptr__dat__, ##1732
0302c     06 3F 02 F1 | 	add	arg01, ptr__dat__
03030     1F 17 C2 FA | 	rdbyte	result1, arg01
03034     03 00 00 FF 
03038     C4 0C 86 F1 | 	sub	ptr__dat__, ##1732
0303c     10 16 06 F5 | 	and	result1, #16
03040     0B 51 0A F6 | 	mov	local05, result1 wz
03044     01 48 06 51 |  if_ne	add	local01, #1
03048     CC FF 9F 5D |  if_ne	jmp	#LR__0168
0304c                 | LR__0169
0304c     24 53 CA FA | 	rdbyte	local06, local01 wz
03050                 | '         return 0;
03050     00 16 06 A6 |  if_e	mov	result1, #0
03054     74 01 90 AD |  if_e	jmp	#LR__0187
03058     24 55 02 F6 | 	mov	local07, local01
0305c     EC CF 9F FE | 	loc	pa,	#(@LR__0171-@LR__0170)
03060     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03064                 | '     }
03064                 | '     cmd = buf;
03064                 | '     while (*buf && !isspace(*buf)) {
03064                 | LR__0170
03064     24 53 CA FA | 	rdbyte	local06, local01 wz
03068     44 00 90 AD |  if_e	jmp	#LR__0172
0306c     24 4F C2 FA | 	rdbyte	local04, local01
03070     27 51 02 F6 | 	mov	local05, local04
03074     28 3F 02 F6 | 	mov	arg01, local05
03078                 | ' {
03078                 | '   return  (__ctype_get(c) & 0x10 ) ;
03078     80 3E 3E F3 | 	fle	arg01, #128 wcz
0307c                 | '     return __ctype[c];
0307c     03 00 00 FF 
03080     C4 0C 06 F1 | 	add	ptr__dat__, ##1732
03084     06 3F 02 F1 | 	add	arg01, ptr__dat__
03088     1F 17 C2 FA | 	rdbyte	result1, arg01
0308c     03 00 00 FF 
03090     C4 0C 86 F1 | 	sub	ptr__dat__, ##1732
03094     10 16 06 F5 | 	and	result1, #16
03098     0B 57 0A F6 | 	mov	local08, result1 wz
0309c     10 00 90 5D |  if_ne	jmp	#LR__0172
030a0     24 4F 02 F6 | 	mov	local04, local01
030a4     01 4E 06 F1 | 	add	local04, #1
030a8     27 49 02 F6 | 	mov	local01, local04
030ac     B4 FF 9F FD | 	jmp	#LR__0170
030b0                 | LR__0171
030b0                 | LR__0172
030b0     24 53 CA FA | 	rdbyte	local06, local01 wz
030b4     24 53 02 56 |  if_ne	mov	local06, local01
030b8     01 48 06 51 |  if_ne	add	local01, #1
030bc     29 01 48 5C |  if_ne	wrbyte	#0, local06
030c0     78 CF 9F FE | 	loc	pa,	#(@LR__0174-@LR__0173)
030c4     B4 00 A0 FD | 	call	#FCACHE_LOAD_
030c8                 | '         *buf++ = 0;
030c8                 | '     }
030c8                 | '     while (*buf && isspace(*buf)) {
030c8                 | LR__0173
030c8     24 53 CA FA | 	rdbyte	local06, local01 wz
030cc     34 00 90 AD |  if_e	jmp	#LR__0175
030d0     24 51 C2 FA | 	rdbyte	local05, local01
030d4     28 3F 02 F6 | 	mov	arg01, local05
030d8                 | ' {
030d8                 | '   return  (__ctype_get(c) & 0x10 ) ;
030d8     80 3E 3E F3 | 	fle	arg01, #128 wcz
030dc                 | '     return __ctype[c];
030dc     03 00 00 FF 
030e0     C4 0C 06 F1 | 	add	ptr__dat__, ##1732
030e4     06 3F 02 F1 | 	add	arg01, ptr__dat__
030e8     1F 17 C2 FA | 	rdbyte	result1, arg01
030ec     03 00 00 FF 
030f0     C4 0C 86 F1 | 	sub	ptr__dat__, ##1732
030f4     10 16 06 F5 | 	and	result1, #16
030f8     0B 57 0A F6 | 	mov	local08, result1 wz
030fc     01 48 06 51 |  if_ne	add	local01, #1
03100     C4 FF 9F 5D |  if_ne	jmp	#LR__0173
03104                 | LR__0174
03104                 | LR__0175
03104     24 53 CA FA | 	rdbyte	local06, local01 wz
03108     50 00 90 AD |  if_e	jmp	#LR__0179
0310c     25 49 62 FC | 	wrlong	local01, local02
03110     20 CF 9F FE | 	loc	pa,	#(@LR__0177-@LR__0176)
03114     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03118                 | '         *arg1 = buf;
03118                 | '         while (*buf && !isspace(*buf)) {
03118                 | LR__0176
03118     24 53 CA FA | 	rdbyte	local06, local01 wz
0311c     2C 00 90 AD |  if_e	jmp	#LR__0178
03120     24 3F C2 FA | 	rdbyte	arg01, local01
03124                 | ' {
03124                 | '   return  (__ctype_get(c) & 0x10 ) ;
03124     80 3E 3E F3 | 	fle	arg01, #128 wcz
03128                 | '     return __ctype[c];
03128     03 00 00 FF 
0312c     C4 0C 06 F1 | 	add	ptr__dat__, ##1732
03130     06 3F 02 F1 | 	add	arg01, ptr__dat__
03134     1F 17 C2 FA | 	rdbyte	result1, arg01
03138     03 00 00 FF 
0313c     C4 0C 86 F1 | 	sub	ptr__dat__, ##1732
03140     10 16 CE F7 | 	test	result1, #16 wz
03144     01 48 06 A1 |  if_e	add	local01, #1
03148     CC FF 9F AD |  if_e	jmp	#LR__0176
0314c                 | LR__0177
0314c                 | LR__0178
0314c     24 53 CA FA | 	rdbyte	local06, local01 wz
03150     24 53 02 56 |  if_ne	mov	local06, local01
03154     01 48 06 51 |  if_ne	add	local01, #1
03158     29 01 48 5C |  if_ne	wrbyte	#0, local06
0315c                 | LR__0179
0315c     D4 CE 9F FE | 	loc	pa,	#(@LR__0181-@LR__0180)
03160     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03164                 | '             *buf++ = 0;
03164                 | '         }
03164                 | '     }
03164                 | '     while (*buf && isspace(*buf)) {
03164                 | LR__0180
03164     24 53 CA FA | 	rdbyte	local06, local01 wz
03168     2C 00 90 AD |  if_e	jmp	#LR__0182
0316c     24 3F C2 FA | 	rdbyte	arg01, local01
03170                 | ' {
03170                 | '   return  (__ctype_get(c) & 0x10 ) ;
03170     80 3E 3E F3 | 	fle	arg01, #128 wcz
03174                 | '     return __ctype[c];
03174     03 00 00 FF 
03178     C4 0C 06 F1 | 	add	ptr__dat__, ##1732
0317c     06 3F 02 F1 | 	add	arg01, ptr__dat__
03180     1F 17 C2 FA | 	rdbyte	result1, arg01
03184     03 00 00 FF 
03188     C4 0C 86 F1 | 	sub	ptr__dat__, ##1732
0318c     10 16 CE F7 | 	test	result1, #16 wz
03190     01 48 06 51 |  if_ne	add	local01, #1
03194     CC FF 9F 5D |  if_ne	jmp	#LR__0180
03198                 | LR__0181
03198                 | LR__0182
03198     24 53 CA FA | 	rdbyte	local06, local01 wz
0319c     28 00 90 AD |  if_e	jmp	#LR__0186
031a0     26 49 62 FC | 	wrlong	local01, local03
031a4     70 CE 9F FE | 	loc	pa,	#(@LR__0184-@LR__0183)
031a8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
031ac                 | '         *arg2 = buf;
031ac                 | '         while (*buf && *buf != '\n') {
031ac                 | LR__0183
031ac     24 53 CA FA | 	rdbyte	local06, local01 wz
031b0     10 00 90 AD |  if_e	jmp	#LR__0185
031b4     24 4F C2 FA | 	rdbyte	local04, local01
031b8     0A 4E 0E F2 | 	cmp	local04, #10 wz
031bc     01 48 06 51 |  if_ne	add	local01, #1
031c0     E8 FF 9F 5D |  if_ne	jmp	#LR__0183
031c4                 | LR__0184
031c4                 | LR__0185
031c4     24 01 48 FC | 	wrbyte	#0, local01
031c8                 | LR__0186
031c8                 | '             buf++;
031c8                 | '         }
031c8                 | '         *buf = 0;
031c8                 | '     }
031c8                 | '     return cmd;
031c8     2A 17 02 F6 | 	mov	result1, local07
031cc                 | LR__0187
031cc     D0 F0 03 F6 | 	mov	ptra, fp
031d0     E0 00 A0 FD | 	call	#popregs_
031d4                 | _parse_cmd_ret
031d4     2D 00 64 FD | 	ret
031d8                 | 
031d8                 | _main
031d8     11 9C 05 F6 | 	mov	COUNT_, #17
031dc     D1 00 A0 FD | 	call	#pushregs_
031e0     01 00 00 FF 
031e4     10 F0 07 F1 | 	add	ptra, ##528
031e8     89 00 00 FF 
031ec     08 48 06 F6 | 	mov	local01, ##@LR__1209
031f0                 | ' 	buf = (BYTE*)work;
031f0                 | ' 	buf = (BYTE*)work;
031f0                 | ' 	buf = (BYTE*)work;
031f0     3D 3E 06 F6 | 	mov	arg01, #61
031f4     3C 40 06 F6 | 	mov	arg02, #60
031f8     3B 42 06 F6 | 	mov	arg03, #59
031fc     3A 44 06 F6 | 	mov	arg04, #58
03200     D4 F0 BF FD | 	call	#__vfs_open_sdcardx
03204     0B 41 02 F6 | 	mov	arg02, result1
03208     24 3F 02 F6 | 	mov	arg01, local01
0320c     A0 0A B0 FD | 	call	#__mount
03210     0B 4B 02 F6 | 	mov	local02, result1
03214     01 00 00 FF 
03218     0C A0 05 F1 | 	add	fp, ##524
0321c     D0 4A 62 FC | 	wrlong	local02, fp
03220     D0 4C 0A FB | 	rdlong	local03, fp wz
03224     01 00 00 FF 
03228     0C A0 85 F1 | 	sub	fp, ##524
0322c     54 00 90 5D |  if_ne	jmp	#LR__0188
03230     00 3E 06 F6 | 	mov	arg01, #0
03234     1C DA B0 FD | 	call	#__system___getiolock_0837
03238     0B 3F 02 F6 | 	mov	arg01, result1
0323c     58 AA B0 FD | 	call	#__system___lockmem
03240     00 16 06 F6 | 	mov	result1, #0
03244     89 00 00 FF 
03248     0C 40 06 F6 | 	mov	arg02, ##@LR__1210
0324c     00 3E 06 F6 | 	mov	arg01, #0
03250     00 42 06 F6 | 	mov	arg03, #0
03254     C8 AD B0 FD | 	call	#__system___basic_print_string
03258     00 3E 06 F6 | 	mov	arg01, #0
0325c     0A 40 06 F6 | 	mov	arg02, #10
03260     00 42 06 F6 | 	mov	arg03, #0
03264     6C AD B0 FD | 	call	#__system___basic_print_char
03268     01 16 06 F6 | 	mov	result1, #1
0326c     00 4E 06 F6 | 	mov	local04, #0
03270     00 3E 06 F6 | 	mov	arg01, #0
03274     DC D9 B0 FD | 	call	#__system___getiolock_0837
03278     0B 01 68 FC | 	wrlong	#0, result1
0327c     00 16 06 F6 | 	mov	result1, #0
03280     00 50 06 F6 | 	mov	local05, #0
03284                 | LR__0188
03284     89 00 00 FF 
03288     23 48 06 F6 | 	mov	local01, ##@LR__1211
0328c     C4 EF BF FD | 	call	#__vfs_open_host
03290     0B 41 02 F6 | 	mov	arg02, result1
03294     24 3F 02 F6 | 	mov	arg01, local01
03298     14 0A B0 FD | 	call	#__mount
0329c     0B 4B 02 F6 | 	mov	local02, result1
032a0     01 00 00 FF 
032a4     0C A0 05 F1 | 	add	fp, ##524
032a8     D0 4A 62 FC | 	wrlong	local02, fp
032ac     D0 4C 0A FB | 	rdlong	local03, fp wz
032b0     01 00 00 FF 
032b4     0C A0 85 F1 | 	sub	fp, ##524
032b8     64 00 90 5D |  if_ne	jmp	#LR__0189
032bc     00 3E 06 F6 | 	mov	arg01, #0
032c0     90 D9 B0 FD | 	call	#__system___getiolock_0837
032c4     0B 3F 02 F6 | 	mov	arg01, result1
032c8     CC A9 B0 FD | 	call	#__system___lockmem
032cc     00 16 06 F6 | 	mov	result1, #0
032d0     89 00 00 FF 
032d4     29 40 06 F6 | 	mov	arg02, ##@LR__1212
032d8     00 3E 06 F6 | 	mov	arg01, #0
032dc     00 42 06 F6 | 	mov	arg03, #0
032e0     3C AD B0 FD | 	call	#__system___basic_print_string
032e4     00 3E 06 F6 | 	mov	arg01, #0
032e8     0A 40 06 F6 | 	mov	arg02, #10
032ec     00 42 06 F6 | 	mov	arg03, #0
032f0     E0 AC B0 FD | 	call	#__system___basic_print_char
032f4     01 16 06 F6 | 	mov	result1, #1
032f8     00 4E 06 F6 | 	mov	local04, #0
032fc     00 3E 06 F6 | 	mov	arg01, #0
03300     50 D9 B0 FD | 	call	#__system___getiolock_0837
03304     0B 01 68 FC | 	wrlong	#0, result1
03308     00 16 06 F6 | 	mov	result1, #0
0330c     00 50 06 F6 | 	mov	local05, #0
03310     89 00 00 FF 
03314     4B 3E 06 F6 | 	mov	arg01, ##@LR__1213
03318     08 DA BF FD | 	call	#_chdir
0331c     0C 00 90 FD | 	jmp	#LR__0190
03320                 | LR__0189
03320     89 00 00 FF 
03324     51 3E 06 F6 | 	mov	arg01, ##@LR__1214
03328     F8 D9 BF FD | 	call	#_chdir
0332c                 | LR__0190
0332c                 | '         chdir("/sd");
0332c                 | '     }
0332c                 | ' 
0332c                 | '     for(;;) {
0332c                 | LR__0191
0332c     00 3E 06 F6 | 	mov	arg01, #0
03330     20 D9 B0 FD | 	call	#__system___getiolock_0837
03334     0B 3F 02 F6 | 	mov	arg01, result1
03338     5C A9 B0 FD | 	call	#__system___lockmem
0333c     00 16 06 F6 | 	mov	result1, #0
03340     89 00 00 FF 
03344     55 40 06 F6 | 	mov	arg02, ##@LR__1215
03348     00 3E 06 F6 | 	mov	arg01, #0
0334c     00 42 06 F6 | 	mov	arg03, #0
03350     CC AC B0 FD | 	call	#__system___basic_print_string
03354     00 3E 06 F6 | 	mov	arg01, #0
03358     F8 D8 B0 FD | 	call	#__system___getiolock_0837
0335c     0B 01 68 FC | 	wrlong	#0, result1
03360     00 16 06 F6 | 	mov	result1, #0
03364     D0 48 02 F6 | 	mov	local01, fp
03368     09 52 C6 F9 | 	decod	local06, #9
0336c     00 3E 06 F6 | 	mov	arg01, #0
03370     04 DE BF FD | 	call	#___getftab
03374     0B 43 02 F6 | 	mov	arg03, result1
03378     24 3F 02 F6 | 	mov	arg01, local01
0337c     29 41 02 F6 | 	mov	arg02, local06
03380     24 E0 BF FD | 	call	#_fgets
03384     0B 55 02 F6 | 	mov	local07, result1
03388     01 00 00 FF 
0338c     00 A0 05 F1 | 	add	fp, ##512
03390     D0 54 62 FC | 	wrlong	local07, fp
03394     D0 4C 0A FB | 	rdlong	local03, fp wz
03398     01 00 00 FF 
0339c     00 A0 85 F1 | 	sub	fp, ##512
033a0     EC 06 90 AD |  if_e	jmp	#LR__0212
033a4     01 00 00 FF 
033a8     00 A0 05 F1 | 	add	fp, ##512
033ac     D0 3E 02 FB | 	rdlong	arg01, fp
033b0     04 A0 05 F1 | 	add	fp, #4
033b4     D0 40 02 F6 | 	mov	arg02, fp
033b8     04 A0 05 F1 | 	add	fp, #4
033bc     D0 42 02 F6 | 	mov	arg03, fp
033c0     01 00 00 FF 
033c4     08 A0 85 F1 | 	sub	fp, ##520
033c8     28 FC BF FD | 	call	#_parse_cmd
033cc     0B 57 02 F6 | 	mov	local08, result1
033d0     01 00 00 FF 
033d4     00 A0 05 F1 | 	add	fp, ##512
033d8     D0 56 62 FC | 	wrlong	local08, fp
033dc     D0 4C 0A FB | 	rdlong	local03, fp wz
033e0     01 00 00 FF 
033e4     00 A0 85 F1 | 	sub	fp, ##512
033e8                 | '             continue;
033e8     40 FF 9F AD |  if_e	jmp	#LR__0191
033ec     01 00 00 FF 
033f0     00 A0 05 F1 | 	add	fp, ##512
033f4     D0 3E 02 FB | 	rdlong	arg01, fp
033f8     01 00 00 FF 
033fc     00 A0 85 F1 | 	sub	fp, ##512
03400     89 00 00 FF 
03404     5B 52 06 F6 | 	mov	local06, ##@LR__1216
03408     29 41 02 F6 | 	mov	arg02, local06
0340c     BC E3 BF FD | 	call	#_strcmp
03410     0B 59 0A F6 | 	mov	local09, result1 wz
03414     30 00 90 AD |  if_e	jmp	#LR__0192
03418     01 00 00 FF 
0341c     00 A0 05 F1 | 	add	fp, ##512
03420     D0 3E 02 FB | 	rdlong	arg01, fp
03424     01 00 00 FF 
03428     00 A0 85 F1 | 	sub	fp, ##512
0342c     89 00 00 FF 
03430     5D 5A 06 F6 | 	mov	local10, ##@LR__1217
03434     2D 5D 02 F6 | 	mov	local11, local10
03438     2E 41 02 F6 | 	mov	arg02, local11
0343c     8C E3 BF FD | 	call	#_strcmp
03440     0B 5F 0A F6 | 	mov	local12, result1 wz
03444     08 00 90 5D |  if_ne	jmp	#LR__0193
03448                 | LR__0192
03448     60 F8 BF FD | 	call	#_do_help
0344c     DC FE 9F FD | 	jmp	#LR__0191
03450                 | LR__0193
03450     01 00 00 FF 
03454     00 A0 05 F1 | 	add	fp, ##512
03458     D0 3E 02 FB | 	rdlong	arg01, fp
0345c     01 00 00 FF 
03460     00 A0 85 F1 | 	sub	fp, ##512
03464     89 00 00 FF 
03468     62 40 06 F6 | 	mov	arg02, ##@LR__1218
0346c     5C E3 BF FD | 	call	#_strcmp
03470     00 16 0E F2 | 	cmp	result1, #0 wz
03474     74 01 90 5D |  if_ne	jmp	#LR__0197
03478     01 00 00 FF 
0347c     04 A0 05 F1 | 	add	fp, ##516
03480     D0 48 02 FB | 	rdlong	local01, fp
03484     01 00 00 FF 
03488     04 A0 85 F1 | 	sub	fp, ##516
0348c     24 4D 0A F6 | 	mov	local03, local01 wz
03490     20 00 90 AD |  if_e	jmp	#LR__0194
03494     01 00 00 FF 
03498     04 A0 05 F1 | 	add	fp, ##516
0349c     D0 4A 02 FB | 	rdlong	local02, fp
034a0     01 00 00 FF 
034a4     04 A0 85 F1 | 	sub	fp, ##516
034a8     25 53 02 F6 | 	mov	local06, local02
034ac     29 59 CA FA | 	rdbyte	local09, local06 wz
034b0     70 00 90 5D |  if_ne	jmp	#LR__0195
034b4                 | LR__0194
034b4     00 0D 06 F1 | 	add	ptr__dat__, #256
034b8     06 3F 02 F6 | 	mov	arg01, ptr__dat__
034bc     00 0D 86 F1 | 	sub	ptr__dat__, #256
034c0     00 41 06 F6 | 	mov	arg02, #256
034c4     8C D7 BF FD | 	call	#_getcwd
034c8     00 3E 06 F6 | 	mov	arg01, #0
034cc     84 D7 B0 FD | 	call	#__system___getiolock_0837
034d0     0B 3F 02 F6 | 	mov	arg01, result1
034d4     C0 A7 B0 FD | 	call	#__system___lockmem
034d8     00 16 06 F6 | 	mov	result1, #0
034dc     00 0D 06 F1 | 	add	ptr__dat__, #256
034e0     06 41 02 F6 | 	mov	arg02, ptr__dat__
034e4     00 0D 86 F1 | 	sub	ptr__dat__, #256
034e8     00 3E 06 F6 | 	mov	arg01, #0
034ec     00 42 06 F6 | 	mov	arg03, #0
034f0     2C AB B0 FD | 	call	#__system___basic_print_string
034f4     00 3E 06 F6 | 	mov	arg01, #0
034f8     0A 40 06 F6 | 	mov	arg02, #10
034fc     00 42 06 F6 | 	mov	arg03, #0
03500     D0 AA B0 FD | 	call	#__system___basic_print_char
03504     01 16 06 F6 | 	mov	result1, #1
03508     00 4E 06 F6 | 	mov	local04, #0
0350c     00 3E 06 F6 | 	mov	arg01, #0
03510     40 D7 B0 FD | 	call	#__system___getiolock_0837
03514     0B 01 68 FC | 	wrlong	#0, result1
03518     00 16 06 F6 | 	mov	result1, #0
0351c     00 50 06 F6 | 	mov	local05, #0
03520     08 FE 9F FD | 	jmp	#LR__0191
03524                 | LR__0195
03524     01 00 00 FF 
03528     04 A0 05 F1 | 	add	fp, ##516
0352c     D0 3E 02 FB | 	rdlong	arg01, fp
03530     01 00 00 FF 
03534     04 A0 85 F1 | 	sub	fp, ##516
03538     A0 F1 BF FD | 	call	#_is_directory
0353c     00 16 0E F2 | 	cmp	result1, #0 wz
03540     8C 00 90 5D |  if_ne	jmp	#LR__0196
03544     00 3E 06 F6 | 	mov	arg01, #0
03548     08 D7 B0 FD | 	call	#__system___getiolock_0837
0354c     0B 3F 02 F6 | 	mov	arg01, result1
03550     44 A7 B0 FD | 	call	#__system___lockmem
03554     00 16 06 F6 | 	mov	result1, #0
03558     01 00 00 FF 
0355c     04 A0 05 F1 | 	add	fp, ##516
03560     D0 40 02 FB | 	rdlong	arg02, fp
03564     01 00 00 FF 
03568     04 A0 85 F1 | 	sub	fp, ##516
0356c     00 3E 06 F6 | 	mov	arg01, #0
03570     00 42 06 F6 | 	mov	arg03, #0
03574     A8 AA B0 FD | 	call	#__system___basic_print_string
03578     89 00 00 FF 
0357c     65 4E 06 F6 | 	mov	local04, ##@LR__1219
03580     00 50 06 F6 | 	mov	local05, #0
03584     00 3E 06 F6 | 	mov	arg01, #0
03588     27 41 02 F6 | 	mov	arg02, local04
0358c     00 42 06 F6 | 	mov	arg03, #0
03590     8C AA B0 FD | 	call	#__system___basic_print_string
03594     0B 61 02 F6 | 	mov	local13, result1
03598     00 62 06 F6 | 	mov	local14, #0
0359c     00 3E 06 F6 | 	mov	arg01, #0
035a0     0A 40 06 F6 | 	mov	arg02, #10
035a4     00 42 06 F6 | 	mov	arg03, #0
035a8     28 AA B0 FD | 	call	#__system___basic_print_char
035ac     01 16 06 F6 | 	mov	result1, #1
035b0     01 64 06 F6 | 	mov	local15, #1
035b4     00 66 06 F6 | 	mov	local16, #0
035b8     00 3E 06 F6 | 	mov	arg01, #0
035bc     94 D6 B0 FD | 	call	#__system___getiolock_0837
035c0     0B 01 68 FC | 	wrlong	#0, result1
035c4     00 16 06 F6 | 	mov	result1, #0
035c8     00 68 06 F6 | 	mov	local17, #0
035cc     5C FD 9F FD | 	jmp	#LR__0191
035d0                 | LR__0196
035d0     01 00 00 FF 
035d4     04 A0 05 F1 | 	add	fp, ##516
035d8     D0 3E 02 FB | 	rdlong	arg01, fp
035dc     01 00 00 FF 
035e0     04 A0 85 F1 | 	sub	fp, ##516
035e4     3C D7 BF FD | 	call	#_chdir
035e8     40 FD 9F FD | 	jmp	#LR__0191
035ec                 | LR__0197
035ec     01 00 00 FF 
035f0     00 A0 05 F1 | 	add	fp, ##512
035f4     D0 3E 02 FB | 	rdlong	arg01, fp
035f8     01 00 00 FF 
035fc     00 A0 85 F1 | 	sub	fp, ##512
03600     89 00 00 FF 
03604     79 52 06 F6 | 	mov	local06, ##@LR__1220
03608     29 4B 02 F6 | 	mov	local02, local06
0360c     25 41 02 F6 | 	mov	arg02, local02
03610     B8 E1 BF FD | 	call	#_strcmp
03614     0B 59 0A F6 | 	mov	local09, result1 wz
03618     2C 00 90 AD |  if_e	jmp	#LR__0198
0361c     01 00 00 FF 
03620     00 A0 05 F1 | 	add	fp, ##512
03624     D0 3E 02 FB | 	rdlong	arg01, fp
03628     01 00 00 FF 
0362c     00 A0 85 F1 | 	sub	fp, ##512
03630     89 00 00 FF 
03634     7E 5A 06 F6 | 	mov	local10, ##@LR__1221
03638     2D 41 02 F6 | 	mov	arg02, local10
0363c     8C E1 BF FD | 	call	#_strcmp
03640     0B 5F 0A F6 | 	mov	local12, result1 wz
03644     24 00 90 5D |  if_ne	jmp	#LR__0199
03648                 | LR__0198
03648     01 00 00 FF 
0364c     04 A0 05 F1 | 	add	fp, ##516
03650     D0 3E 02 FB | 	rdlong	arg01, fp
03654     04 A0 05 F1 | 	add	fp, #4
03658     D0 40 02 FB | 	rdlong	arg02, fp
0365c     01 00 00 FF 
03660     08 A0 85 F1 | 	sub	fp, ##520
03664     AC F4 BF FD | 	call	#_do_copy
03668     C0 FC 9F FD | 	jmp	#LR__0191
0366c                 | LR__0199
0366c     01 00 00 FF 
03670     00 A0 05 F1 | 	add	fp, ##512
03674     D0 3E 02 FB | 	rdlong	arg01, fp
03678     01 00 00 FF 
0367c     00 A0 85 F1 | 	sub	fp, ##512
03680     89 00 00 FF 
03684     81 4A 06 F6 | 	mov	local02, ##@LR__1222
03688     25 41 02 F6 | 	mov	arg02, local02
0368c     3C E1 BF FD | 	call	#_strcmp
03690     0B 59 0A F6 | 	mov	local09, result1 wz
03694     30 00 90 AD |  if_e	jmp	#LR__0200
03698     01 00 00 FF 
0369c     00 A0 05 F1 | 	add	fp, ##512
036a0     D0 3E 02 FB | 	rdlong	arg01, fp
036a4     01 00 00 FF 
036a8     00 A0 85 F1 | 	sub	fp, ##512
036ac     89 00 00 FF 
036b0     85 5A 06 F6 | 	mov	local10, ##@LR__1223
036b4     2D 5D 02 F6 | 	mov	local11, local10
036b8     2E 41 02 F6 | 	mov	arg02, local11
036bc     0C E1 BF FD | 	call	#_strcmp
036c0     0B 5F 0A F6 | 	mov	local12, result1 wz
036c4     54 00 90 5D |  if_ne	jmp	#LR__0201
036c8                 | LR__0200
036c8     01 00 00 FF 
036cc     04 A0 05 F1 | 	add	fp, ##516
036d0     D0 3E 02 FB | 	rdlong	arg01, fp
036d4     01 00 00 FF 
036d8     04 A0 85 F1 | 	sub	fp, ##516
036dc     10 D9 BF FD | 	call	#_unlink
036e0     0B 53 02 F6 | 	mov	local06, result1
036e4     01 00 00 FF 
036e8     0C A0 05 F1 | 	add	fp, ##524
036ec     D0 52 62 FC | 	wrlong	local06, fp
036f0     D0 4C 0A FB | 	rdlong	local03, fp wz
036f4     01 00 00 FF 
036f8     0C A0 85 F1 | 	sub	fp, ##524
036fc     2C FC 9F AD |  if_e	jmp	#LR__0191
03700     01 00 00 FF 
03704     04 A0 05 F1 | 	add	fp, ##516
03708     D0 3E 02 FB | 	rdlong	arg01, fp
0370c     01 00 00 FF 
03710     04 A0 85 F1 | 	sub	fp, ##516
03714     0C DF BF FD | 	call	#_perror
03718     10 FC 9F FD | 	jmp	#LR__0191
0371c                 | LR__0201
0371c     01 00 00 FF 
03720     00 A0 05 F1 | 	add	fp, ##512
03724     D0 3E 02 FB | 	rdlong	arg01, fp
03728     01 00 00 FF 
0372c     00 A0 85 F1 | 	sub	fp, ##512
03730     89 00 00 FF 
03734     88 52 06 F6 | 	mov	local06, ##@LR__1224
03738     29 4B 02 F6 | 	mov	local02, local06
0373c     25 41 02 F6 | 	mov	arg02, local02
03740     88 E0 BF FD | 	call	#_strcmp
03744     0B 59 0A F6 | 	mov	local09, result1 wz
03748     2C 00 90 AD |  if_e	jmp	#LR__0202
0374c     01 00 00 FF 
03750     00 A0 05 F1 | 	add	fp, ##512
03754     D0 3E 02 FB | 	rdlong	arg01, fp
03758     01 00 00 FF 
0375c     00 A0 85 F1 | 	sub	fp, ##512
03760     89 00 00 FF 
03764     8C 5A 06 F6 | 	mov	local10, ##@LR__1225
03768     2D 41 02 F6 | 	mov	arg02, local10
0376c     5C E0 BF FD | 	call	#_strcmp
03770     0B 5F 0A F6 | 	mov	local12, result1 wz
03774     1C 00 90 5D |  if_ne	jmp	#LR__0203
03778                 | LR__0202
03778     01 00 00 FF 
0377c     04 A0 05 F1 | 	add	fp, ##516
03780     D0 3E 02 FB | 	rdlong	arg01, fp
03784     01 00 00 FF 
03788     04 A0 85 F1 | 	sub	fp, ##516
0378c     B8 EF BF FD | 	call	#_do_dir
03790     98 FB 9F FD | 	jmp	#LR__0191
03794                 | LR__0203
03794     01 00 00 FF 
03798     00 A0 05 F1 | 	add	fp, ##512
0379c     D0 3E 02 FB | 	rdlong	arg01, fp
037a0     01 00 00 FF 
037a4     00 A0 85 F1 | 	sub	fp, ##512
037a8     89 00 00 FF 
037ac     8F 52 06 F6 | 	mov	local06, ##@LR__1226
037b0     29 4B 02 F6 | 	mov	local02, local06
037b4     25 41 02 F6 | 	mov	arg02, local02
037b8     10 E0 BF FD | 	call	#_strcmp
037bc     0B 59 0A F6 | 	mov	local09, result1 wz
037c0     2C 00 90 AD |  if_e	jmp	#LR__0204
037c4     01 00 00 FF 
037c8     00 A0 05 F1 | 	add	fp, ##512
037cc     D0 3E 02 FB | 	rdlong	arg01, fp
037d0     01 00 00 FF 
037d4     00 A0 85 F1 | 	sub	fp, ##512
037d8     89 00 00 FF 
037dc     94 5A 06 F6 | 	mov	local10, ##@LR__1227
037e0     2D 41 02 F6 | 	mov	arg02, local10
037e4     E4 DF BF FD | 	call	#_strcmp
037e8     0B 5F 0A F6 | 	mov	local12, result1 wz
037ec     3C 00 90 5D |  if_ne	jmp	#LR__0205
037f0                 | LR__0204
037f0     01 00 00 FF 
037f4     04 A0 05 F1 | 	add	fp, ##516
037f8     D0 3E 02 FB | 	rdlong	arg01, fp
037fc     01 00 00 FF 
03800     04 A0 85 F1 | 	sub	fp, ##516
03804     00 40 06 F6 | 	mov	arg02, #0
03808     00 42 06 F6 | 	mov	arg03, #0
0380c     A0 D8 BF FD | 	call	#__execve
03810     01 00 00 FF 
03814     04 A0 05 F1 | 	add	fp, ##516
03818     D0 3E 02 FB | 	rdlong	arg01, fp
0381c     01 00 00 FF 
03820     04 A0 85 F1 | 	sub	fp, ##516
03824     FC DD BF FD | 	call	#_perror
03828     00 FB 9F FD | 	jmp	#LR__0191
0382c                 | LR__0205
0382c     01 00 00 FF 
03830     00 A0 05 F1 | 	add	fp, ##512
03834     D0 3E 02 FB | 	rdlong	arg01, fp
03838     01 00 00 FF 
0383c     00 A0 85 F1 | 	sub	fp, ##512
03840     89 00 00 FF 
03844     9A 52 06 F6 | 	mov	local06, ##@LR__1228
03848     29 41 02 F6 | 	mov	arg02, local06
0384c     7C DF BF FD | 	call	#_strcmp
03850     0B 59 0A F6 | 	mov	local09, result1 wz
03854     2C 00 90 AD |  if_e	jmp	#LR__0206
03858     01 00 00 FF 
0385c     00 A0 05 F1 | 	add	fp, ##512
03860     D0 3E 02 FB | 	rdlong	arg01, fp
03864     01 00 00 FF 
03868     00 A0 85 F1 | 	sub	fp, ##512
0386c     89 00 00 FF 
03870     A0 5A 06 F6 | 	mov	local10, ##@LR__1229
03874     2D 41 02 F6 | 	mov	arg02, local10
03878     50 DF BF FD | 	call	#_strcmp
0387c     0B 5F 0A F6 | 	mov	local12, result1 wz
03880     58 00 90 5D |  if_ne	jmp	#LR__0207
03884                 | LR__0206
03884     01 00 00 FF 
03888     04 A0 05 F1 | 	add	fp, ##516
0388c     D0 3E 02 FB | 	rdlong	arg01, fp
03890     01 00 00 FF 
03894     04 A0 85 F1 | 	sub	fp, ##516
03898     ED 41 06 F6 | 	mov	arg02, #493
0389c     88 D6 BF FD | 	call	#_mkdir
038a0     0B 4B 02 F6 | 	mov	local02, result1
038a4     01 00 00 FF 
038a8     0C A0 05 F1 | 	add	fp, ##524
038ac     D0 4A 62 FC | 	wrlong	local02, fp
038b0     D0 4C 0A FB | 	rdlong	local03, fp wz
038b4     01 00 00 FF 
038b8     0C A0 85 F1 | 	sub	fp, ##524
038bc     6C FA 9F AD |  if_e	jmp	#LR__0191
038c0     01 00 00 FF 
038c4     04 A0 05 F1 | 	add	fp, ##516
038c8     D0 3E 02 FB | 	rdlong	arg01, fp
038cc     01 00 00 FF 
038d0     04 A0 85 F1 | 	sub	fp, ##516
038d4     4C DD BF FD | 	call	#_perror
038d8     50 FA 9F FD | 	jmp	#LR__0191
038dc                 | LR__0207
038dc     01 00 00 FF 
038e0     00 A0 05 F1 | 	add	fp, ##512
038e4     D0 3E 02 FB | 	rdlong	arg01, fp
038e8     01 00 00 FF 
038ec     00 A0 85 F1 | 	sub	fp, ##512
038f0     89 00 00 FF 
038f4     A3 4A 06 F6 | 	mov	local02, ##@LR__1230
038f8     25 41 02 F6 | 	mov	arg02, local02
038fc     CC DE BF FD | 	call	#_strcmp
03900     0B 59 0A F6 | 	mov	local09, result1 wz
03904     2C 00 90 AD |  if_e	jmp	#LR__0208
03908     01 00 00 FF 
0390c     00 A0 05 F1 | 	add	fp, ##512
03910     D0 3E 02 FB | 	rdlong	arg01, fp
03914     01 00 00 FF 
03918     00 A0 85 F1 | 	sub	fp, ##512
0391c     89 00 00 FF 
03920     A9 5A 06 F6 | 	mov	local10, ##@LR__1231
03924     2D 41 02 F6 | 	mov	arg02, local10
03928     A0 DE BF FD | 	call	#_strcmp
0392c     0B 5F 0A F6 | 	mov	local12, result1 wz
03930     54 00 90 5D |  if_ne	jmp	#LR__0209
03934                 | LR__0208
03934     01 00 00 FF 
03938     04 A0 05 F1 | 	add	fp, ##516
0393c     D0 3E 02 FB | 	rdlong	arg01, fp
03940     01 00 00 FF 
03944     04 A0 85 F1 | 	sub	fp, ##516
03948     10 D5 BF FD | 	call	#_rmdir
0394c     0B 53 02 F6 | 	mov	local06, result1
03950     01 00 00 FF 
03954     0C A0 05 F1 | 	add	fp, ##524
03958     D0 52 62 FC | 	wrlong	local06, fp
0395c     D0 4C 0A FB | 	rdlong	local03, fp wz
03960     01 00 00 FF 
03964     0C A0 85 F1 | 	sub	fp, ##524
03968     C0 F9 9F AD |  if_e	jmp	#LR__0191
0396c     01 00 00 FF 
03970     04 A0 05 F1 | 	add	fp, ##516
03974     D0 3E 02 FB | 	rdlong	arg01, fp
03978     01 00 00 FF 
0397c     04 A0 85 F1 | 	sub	fp, ##516
03980     A0 DC BF FD | 	call	#_perror
03984     A4 F9 9F FD | 	jmp	#LR__0191
03988                 | LR__0209
03988     01 00 00 FF 
0398c     00 A0 05 F1 | 	add	fp, ##512
03990     D0 3E 02 FB | 	rdlong	arg01, fp
03994     01 00 00 FF 
03998     00 A0 85 F1 | 	sub	fp, ##512
0399c     89 00 00 FF 
039a0     AC 52 06 F6 | 	mov	local06, ##@LR__1232
039a4     29 4B 02 F6 | 	mov	local02, local06
039a8     25 41 02 F6 | 	mov	arg02, local02
039ac     1C DE BF FD | 	call	#_strcmp
039b0     0B 59 0A F6 | 	mov	local09, result1 wz
039b4     28 00 90 AD |  if_e	jmp	#LR__0210
039b8     01 00 00 FF 
039bc     00 A0 05 F1 | 	add	fp, ##512
039c0     D0 3E 02 FB | 	rdlong	arg01, fp
039c4     01 00 00 FF 
039c8     00 A0 85 F1 | 	sub	fp, ##512
039cc     89 00 00 FF 
039d0     B1 40 06 F6 | 	mov	arg02, ##@LR__1233
039d4     F4 DD BF FD | 	call	#_strcmp
039d8     0B 5F 0A F6 | 	mov	local12, result1 wz
039dc     20 00 90 5D |  if_ne	jmp	#LR__0211
039e0                 | LR__0210
039e0     01 00 00 FF 
039e4     04 A0 05 F1 | 	add	fp, ##516
039e8     D0 3E 02 FB | 	rdlong	arg01, fp
039ec     01 00 00 FF 
039f0     04 A0 85 F1 | 	sub	fp, ##516
039f4     00 40 06 F6 | 	mov	arg02, #0
039f8     18 F1 BF FD | 	call	#_do_copy
039fc     2C F9 9F FD | 	jmp	#LR__0191
03a00                 | LR__0211
03a00     00 3E 06 F6 | 	mov	arg01, #0
03a04     4C D2 B0 FD | 	call	#__system___getiolock_0837
03a08     0B 3F 02 F6 | 	mov	arg01, result1
03a0c     88 A2 B0 FD | 	call	#__system___lockmem
03a10     00 16 06 F6 | 	mov	result1, #0
03a14     89 00 00 FF 
03a18     B5 40 06 F6 | 	mov	arg02, ##@LR__1234
03a1c     00 3E 06 F6 | 	mov	arg01, #0
03a20     00 42 06 F6 | 	mov	arg03, #0
03a24     F8 A5 B0 FD | 	call	#__system___basic_print_string
03a28     01 00 00 FF 
03a2c     00 A0 05 F1 | 	add	fp, ##512
03a30     D0 4E 02 FB | 	rdlong	local04, fp
03a34     01 00 00 FF 
03a38     00 A0 85 F1 | 	sub	fp, ##512
03a3c     00 50 06 F6 | 	mov	local05, #0
03a40     00 3E 06 F6 | 	mov	arg01, #0
03a44     27 41 02 F6 | 	mov	arg02, local04
03a48     00 42 06 F6 | 	mov	arg03, #0
03a4c     D0 A5 B0 FD | 	call	#__system___basic_print_string
03a50     0B 61 02 F6 | 	mov	local13, result1
03a54     00 62 06 F6 | 	mov	local14, #0
03a58     00 3E 06 F6 | 	mov	arg01, #0
03a5c     0A 40 06 F6 | 	mov	arg02, #10
03a60     00 42 06 F6 | 	mov	arg03, #0
03a64     6C A5 B0 FD | 	call	#__system___basic_print_char
03a68     01 16 06 F6 | 	mov	result1, #1
03a6c     01 64 06 F6 | 	mov	local15, #1
03a70     00 66 06 F6 | 	mov	local16, #0
03a74     00 3E 06 F6 | 	mov	arg01, #0
03a78     D8 D1 B0 FD | 	call	#__system___getiolock_0837
03a7c     0B 01 68 FC | 	wrlong	#0, result1
03a80     00 16 06 F6 | 	mov	result1, #0
03a84     00 68 06 F6 | 	mov	local17, #0
03a88     20 F2 BF FD | 	call	#_do_help
03a8c     9C F8 9F FD | 	jmp	#LR__0191
03a90                 | LR__0212
03a90     D0 F0 03 F6 | 	mov	ptra, fp
03a94     E0 00 A0 FD | 	call	#popregs_
03a98                 | _main_ret
03a98     2D 00 64 FD | 	ret
03a9c                 | 
03a9c                 | ___getvfsforfile
03a9c     12 9C 05 F6 | 	mov	COUNT_, #18
03aa0     D1 00 A0 FD | 	call	#pushregs_
03aa4     1F 49 02 F6 | 	mov	local01, arg01
03aa8     20 4B 02 F6 | 	mov	local02, arg02
03aac     21 4D 02 F6 | 	mov	local03, arg03
03ab0     25 4F C2 FA | 	rdbyte	local04, local02
03ab4     2F 4E 0E F2 | 	cmp	local04, #47 wz
03ab8     14 00 90 5D |  if_ne	jmp	#LR__0213
03abc     24 3F 02 F6 | 	mov	arg01, local01
03ac0     25 41 02 F6 | 	mov	arg02, local02
03ac4     00 43 06 F6 | 	mov	arg03, #256
03ac8     28 DC BF FD | 	call	#_strncpy
03acc     44 00 90 FD | 	jmp	#LR__0214
03ad0                 | LR__0213
03ad0     01 00 00 FF 
03ad4     84 0C 06 F1 | 	add	ptr__dat__, ##644
03ad8     06 41 02 F6 | 	mov	arg02, ptr__dat__
03adc     01 00 00 FF 
03ae0     84 0C 86 F1 | 	sub	ptr__dat__, ##644
03ae4     24 3F 02 F6 | 	mov	arg01, local01
03ae8     00 43 06 F6 | 	mov	arg03, #256
03aec     04 DC BF FD | 	call	#_strncpy
03af0     89 00 00 FF 
03af4     C7 40 06 F6 | 	mov	arg02, ##@LR__1235
03af8     24 3F 02 F6 | 	mov	arg01, local01
03afc     00 43 06 F6 | 	mov	arg03, #256
03b00     44 DC BF FD | 	call	#_strncat
03b04     24 3F 02 F6 | 	mov	arg01, local01
03b08     25 41 02 F6 | 	mov	arg02, local02
03b0c     00 43 06 F6 | 	mov	arg03, #256
03b10     34 DC BF FD | 	call	#_strncat
03b14                 | LR__0214
03b14                 | '         strncpy(name, curdir,  (256) );
03b14                 | '         strncat(name, "/",  (256) );
03b14                 | '         strncat(name, orig_name,  (256) );
03b14                 | '     }
03b14                 | '     for (i = 0; i <  4 ; i++) {
03b14     00 50 06 F6 | 	mov	local05, #0
03b18                 | LR__0215
03b18     04 50 5E F2 | 	cmps	local05, #4 wcz
03b1c     70 01 90 3D |  if_ae	jmp	#LR__0226
03b20     28 4F 02 F6 | 	mov	local04, local05
03b24     02 4E 66 F0 | 	shl	local04, #2
03b28     01 00 00 FF 
03b2c     64 0C 06 F1 | 	add	ptr__dat__, ##612
03b30     06 4F 02 F1 | 	add	local04, ptr__dat__
03b34     27 53 0A FB | 	rdlong	local06, local04 wz
03b38     01 00 00 FF 
03b3c     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03b40     44 01 90 AD |  if_e	jmp	#LR__0225
03b44     28 4F 02 F6 | 	mov	local04, local05
03b48     02 4E 66 F0 | 	shl	local04, #2
03b4c     01 00 00 FF 
03b50     64 0C 06 F1 | 	add	ptr__dat__, ##612
03b54     06 4F 02 F1 | 	add	local04, ptr__dat__
03b58     27 3F 02 FB | 	rdlong	arg01, local04
03b5c     01 00 00 FF 
03b60     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03b64     00 54 06 F6 | 	mov	local07, #0
03b68     A4 C4 9F FE | 	loc	pa,	#(@LR__0217-@LR__0216)
03b6c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03b70                 | LR__0216
03b70     1F 57 CA FA | 	rdbyte	local08, arg01 wz
03b74     01 54 06 51 |  if_ne	add	local07, #1
03b78     01 3E 06 51 |  if_ne	add	arg01, #1
03b7c     F0 FF 9F 5D |  if_ne	jmp	#LR__0216
03b80                 | LR__0217
03b80     2A 17 02 F6 | 	mov	result1, local07
03b84     0B 59 02 F6 | 	mov	local09, result1
03b88     2C 5B 02 F6 | 	mov	local10, local09
03b8c     24 5B 02 F1 | 	add	local10, local01
03b90     2D 4F C2 FA | 	rdbyte	local04, local10
03b94     2F 4E 0E F2 | 	cmp	local04, #47 wz
03b98     10 00 90 AD |  if_e	jmp	#LR__0218
03b9c     2C 5D 02 F6 | 	mov	local11, local09
03ba0     24 5D 02 F1 | 	add	local11, local01
03ba4     2E 5F CA FA | 	rdbyte	local12, local11 wz
03ba8     DC 00 90 5D |  if_ne	jmp	#LR__0224
03bac                 | LR__0218
03bac     24 3F 02 F6 | 	mov	arg01, local01
03bb0     28 61 02 F6 | 	mov	local13, local05
03bb4     02 60 66 F0 | 	shl	local13, #2
03bb8     01 00 00 FF 
03bbc     64 0C 06 F1 | 	add	ptr__dat__, ##612
03bc0     06 61 02 F1 | 	add	local13, ptr__dat__
03bc4     30 41 02 FB | 	rdlong	arg02, local13
03bc8     2C 43 02 F6 | 	mov	arg03, local09
03bcc     01 00 00 FF 
03bd0     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03bd4     7C DC BF FD | 	call	#_strncmp
03bd8     0B 63 0A F6 | 	mov	local14, result1 wz
03bdc     A8 00 90 5D |  if_ne	jmp	#LR__0224
03be0     28 4F 02 F6 | 	mov	local04, local05
03be4     02 4E 66 F0 | 	shl	local04, #2
03be8     01 00 00 FF 
03bec     74 0C 06 F1 | 	add	ptr__dat__, ##628
03bf0     06 4F 02 F1 | 	add	local04, ptr__dat__
03bf4     27 65 02 FB | 	rdlong	local15, local04
03bf8                 | ' 
03bf8                 | '             while (name[len+1] == '.' && (name[len+2] == '/' || name[len+2] == 0)) {
03bf8     01 00 00 FF 
03bfc     74 0C 86 F1 | 	sub	ptr__dat__, ##628
03c00     48 C4 9F FE | 	loc	pa,	#(@LR__0221-@LR__0219)
03c04     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03c08                 | LR__0219
03c08     2C 53 02 F6 | 	mov	local06, local09
03c0c     01 52 06 F1 | 	add	local06, #1
03c10     24 53 02 F1 | 	add	local06, local01
03c14     29 4F C2 FA | 	rdbyte	local04, local06
03c18     2E 4E 0E F2 | 	cmp	local04, #46 wz
03c1c     34 00 90 5D |  if_ne	jmp	#LR__0222
03c20     2C 67 02 F6 | 	mov	local16, local09
03c24     02 66 06 F1 | 	add	local16, #2
03c28     24 67 02 F1 | 	add	local16, local01
03c2c     33 5D C2 FA | 	rdbyte	local11, local16
03c30     2F 5C 0E F2 | 	cmp	local11, #47 wz
03c34     14 00 90 AD |  if_e	jmp	#LR__0220
03c38     2C 69 02 F6 | 	mov	local17, local09
03c3c     02 68 06 F1 | 	add	local17, #2
03c40     24 69 02 F1 | 	add	local17, local01
03c44     34 6B CA FA | 	rdbyte	local18, local17 wz
03c48     08 00 90 5D |  if_ne	jmp	#LR__0222
03c4c                 | LR__0220
03c4c     01 58 06 F1 | 	add	local09, #1
03c50     B4 FF 9F FD | 	jmp	#LR__0219
03c54                 | LR__0221
03c54                 | LR__0222
03c54     00 4C 0E F2 | 	cmp	local03, #0 wz
03c58     10 00 90 AD |  if_e	jmp	#LR__0223
03c5c     26 3F 02 F6 | 	mov	arg01, local03
03c60     24 41 02 F6 | 	mov	arg02, local01
03c64     00 43 06 F6 | 	mov	arg03, #256
03c68     88 DA BF FD | 	call	#_strncpy
03c6c                 | LR__0223
03c6c     24 3F 02 F6 | 	mov	arg01, local01
03c70     24 41 02 F6 | 	mov	arg02, local01
03c74     2C 41 02 F1 | 	add	arg02, local09
03c78     01 40 06 F1 | 	add	arg02, #1
03c7c     88 9F B0 FD | 	call	#__system____builtin_strcpy
03c80                 | '                 strncpy(full_path, name,  (256) );
03c80                 | '             }
03c80                 | '             __builtin_strcpy(name, name+len+1) ;
03c80                 | ' #line 53 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
03c80                 | '             return v;
03c80     32 17 02 F6 | 	mov	result1, local15
03c84     1C 00 90 FD | 	jmp	#LR__0227
03c88                 | LR__0224
03c88                 | LR__0225
03c88     01 50 06 F1 | 	add	local05, #1
03c8c     88 FE 9F FD | 	jmp	#LR__0215
03c90                 | LR__0226
03c90     01 00 00 FF 
03c94     3C 0A 06 F1 | 	add	ptr___system__dat__, ##572
03c98     05 17 02 FB | 	rdlong	result1, ptr___system__dat__
03c9c     01 00 00 FF 
03ca0     3C 0A 86 F1 | 	sub	ptr___system__dat__, ##572
03ca4                 | '         }
03ca4                 | '     }
03ca4                 | '     v = _getrootvfs();
03ca4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
03ca4                 | '     return v;
03ca4                 | LR__0227
03ca4     D0 F0 03 F6 | 	mov	ptra, fp
03ca8     E0 00 A0 FD | 	call	#popregs_
03cac                 | ___getvfsforfile_ret
03cac     2D 00 64 FD | 	ret
03cb0                 | 
03cb0                 | __mount
03cb0     0B 9C 05 F6 | 	mov	COUNT_, #11
03cb4     D1 00 A0 FD | 	call	#pushregs_
03cb8     1F 49 02 F6 | 	mov	local01, arg01
03cbc     20 4B 02 F6 | 	mov	local02, arg02
03cc0     01 4C 66 F6 | 	neg	local03, #1
03cc4     24 4F C2 FA | 	rdbyte	local04, local01
03cc8     2F 4E 0E F2 | 	cmp	local04, #47 wz
03ccc     1C 00 90 AD |  if_e	jmp	#LR__0228
03cd0                 | ' #line 75 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
03cd0                 | '         return _seterror( 10 );
03cd0     01 00 00 FF 
03cd4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
03cd8     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
03cdc     01 00 00 FF 
03ce0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
03ce4     01 16 66 F6 | 	neg	result1, #1
03ce8     68 01 90 FD | 	jmp	#LR__0239
03cec                 | LR__0228
03cec                 | '     }
03cec                 | '     for (i = 0; i <  4 ; i++) {
03cec     00 50 06 F6 | 	mov	local05, #0
03cf0                 | LR__0229
03cf0     04 50 5E F2 | 	cmps	local05, #4 wcz
03cf4     C8 00 90 3D |  if_ae	jmp	#LR__0235
03cf8     28 4F 02 F6 | 	mov	local04, local05
03cfc     02 4E 66 F0 | 	shl	local04, #2
03d00     01 00 00 FF 
03d04     64 0C 06 F1 | 	add	ptr__dat__, ##612
03d08     06 4F 02 F1 | 	add	local04, ptr__dat__
03d0c     27 53 0A FB | 	rdlong	local06, local04 wz
03d10     01 00 00 FF 
03d14     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03d18     0C 00 90 5D |  if_ne	jmp	#LR__0230
03d1c     00 4C 5E F2 | 	cmps	local03, #0 wcz
03d20     28 4D 02 C6 |  if_b	mov	local03, local05
03d24                 | '                 firstfree = i;
03d24                 | '                 continue;
03d24     90 00 90 CD |  if_b	jmp	#LR__0234
03d28                 | LR__0230
03d28     28 4F 02 F6 | 	mov	local04, local05
03d2c     02 4E 66 F0 | 	shl	local04, #2
03d30     01 00 00 FF 
03d34     64 0C 06 F1 | 	add	ptr__dat__, ##612
03d38     06 4F 02 F1 | 	add	local04, ptr__dat__
03d3c     27 3F 02 FB | 	rdlong	arg01, local04
03d40     01 00 00 FF 
03d44     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03d48     00 54 06 F6 | 	mov	local07, #0
03d4c     C0 C2 9F FE | 	loc	pa,	#(@LR__0232-@LR__0231)
03d50     B4 00 A0 FD | 	call	#FCACHE_LOAD_
03d54                 | LR__0231
03d54     1F 57 CA FA | 	rdbyte	local08, arg01 wz
03d58     01 54 06 51 |  if_ne	add	local07, #1
03d5c     01 3E 06 51 |  if_ne	add	arg01, #1
03d60     F0 FF 9F 5D |  if_ne	jmp	#LR__0231
03d64                 | LR__0232
03d64     2A 17 02 F6 | 	mov	result1, local07
03d68     0B 59 02 F6 | 	mov	local09, result1
03d6c     2C 5B 02 F6 | 	mov	local10, local09
03d70     24 5B 02 F1 | 	add	local10, local01
03d74     2D 4F C2 FA | 	rdbyte	local04, local10
03d78     2F 4E 0E F2 | 	cmp	local04, #47 wz
03d7c     38 00 90 5D |  if_ne	jmp	#LR__0233
03d80     24 3F 02 F6 | 	mov	arg01, local01
03d84     28 5D 02 F6 | 	mov	local11, local05
03d88     02 5C 66 F0 | 	shl	local11, #2
03d8c     01 00 00 FF 
03d90     64 0C 06 F1 | 	add	ptr__dat__, ##612
03d94     06 5D 02 F1 | 	add	local11, ptr__dat__
03d98     2E 41 02 FB | 	rdlong	arg02, local11
03d9c     2C 43 02 F6 | 	mov	arg03, local09
03da0     01 00 00 FF 
03da4     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03da8     A8 DA BF FD | 	call	#_strncmp
03dac     00 16 0E F2 | 	cmp	result1, #0 wz
03db0     28 4D 02 A6 |  if_e	mov	local03, local05
03db4                 | '             firstfree = i;
03db4                 | '             break;
03db4     08 00 90 AD |  if_e	jmp	#LR__0235
03db8                 | LR__0233
03db8                 | LR__0234
03db8     01 50 06 F1 | 	add	local05, #1
03dbc     30 FF 9F FD | 	jmp	#LR__0229
03dc0                 | LR__0235
03dc0     FF FF 7F FF 
03dc4     FF 4D 0E F2 | 	cmp	local03, ##-1 wz
03dc8     1C 00 90 5D |  if_ne	jmp	#LR__0236
03dcc                 | ' #line 94 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
03dcc                 | '         return _seterror( 11 );
03dcc     01 00 00 FF 
03dd0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
03dd4     05 17 68 FC | 	wrlong	#11, ptr___system__dat__
03dd8     01 00 00 FF 
03ddc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
03de0     01 16 66 F6 | 	neg	result1, #1
03de4     6C 00 90 FD | 	jmp	#LR__0239
03de8                 | LR__0236
03de8     26 51 02 F6 | 	mov	local05, local03
03dec     28 4F 02 F6 | 	mov	local04, local05
03df0     02 4E 66 F0 | 	shl	local04, #2
03df4     01 00 00 FF 
03df8     74 0C 06 F1 | 	add	ptr__dat__, ##628
03dfc     06 4F 02 F1 | 	add	local04, ptr__dat__
03e00     27 4B 62 FC | 	wrlong	local02, local04
03e04     00 4A 0E F2 | 	cmp	local02, #0 wz
03e08     01 00 00 FF 
03e0c     74 0C 86 F1 | 	sub	ptr__dat__, ##628
03e10     20 00 90 5D |  if_ne	jmp	#LR__0237
03e14     02 50 66 F0 | 	shl	local05, #2
03e18     01 00 00 FF 
03e1c     64 0C 06 F1 | 	add	ptr__dat__, ##612
03e20     06 51 02 F1 | 	add	local05, ptr__dat__
03e24     28 01 68 FC | 	wrlong	#0, local05
03e28     01 00 00 FF 
03e2c     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03e30     1C 00 90 FD | 	jmp	#LR__0238
03e34                 | LR__0237
03e34     02 50 66 F0 | 	shl	local05, #2
03e38     01 00 00 FF 
03e3c     64 0C 06 F1 | 	add	ptr__dat__, ##612
03e40     06 51 02 F1 | 	add	local05, ptr__dat__
03e44     28 49 62 FC | 	wrlong	local01, local05
03e48     01 00 00 FF 
03e4c     64 0C 86 F1 | 	sub	ptr__dat__, ##612
03e50                 | LR__0238
03e50                 | '         mounttab[i] = name;
03e50                 | ' #line 108 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/mount.c"
03e50                 | '     }
03e50                 | '     return 0;
03e50     00 16 06 F6 | 	mov	result1, #0
03e54                 | LR__0239
03e54     D0 F0 03 F6 | 	mov	ptra, fp
03e58     E0 00 A0 FD | 	call	#popregs_
03e5c                 | __mount_ret
03e5c     2D 00 64 FD | 	ret
03e60                 | 
03e60                 | __rxtxioctl_0055
03e60     02 9C 05 F6 | 	mov	COUNT_, #2
03e64     D1 00 A0 FD | 	call	#pushregs_
03e68     20 49 02 F6 | 	mov	local01, arg02
03e6c     21 4B 02 F6 | 	mov	local02, arg03
03e70                 | '     switch (req) {
03e70     00 49 0E F2 | 	cmp	local01, #256 wz
03e74     0C 00 90 AD |  if_e	jmp	#LR__0240
03e78     01 49 0E F2 | 	cmp	local01, #257 wz
03e7c     1C 00 90 AD |  if_e	jmp	#LR__0241
03e80     30 00 90 FD | 	jmp	#LR__0242
03e84                 | LR__0240
03e84     08 0A 06 F1 | 	add	ptr___system__dat__, #8
03e88     05 17 02 FB | 	rdlong	result1, ptr___system__dat__
03e8c     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
03e90     25 17 62 FC | 	wrlong	result1, local02
03e94                 | '         *argl = _getrxtxflags();
03e94                 | '         return 0;
03e94     00 16 06 F6 | 	mov	result1, #0
03e98     30 00 90 FD | 	jmp	#LR__0243
03e9c                 | LR__0241
03e9c     25 3F 02 FB | 	rdlong	arg01, local02
03ea0     08 0A 06 F1 | 	add	ptr___system__dat__, #8
03ea4     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
03ea8     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
03eac                 | '         _setrxtxflags(*argl);
03eac                 | '         return 0;
03eac     00 16 06 F6 | 	mov	result1, #0
03eb0     18 00 90 FD | 	jmp	#LR__0243
03eb4                 | LR__0242
03eb4                 | '         return _seterror( 10 );
03eb4     01 00 00 FF 
03eb8     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
03ebc     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
03ec0     01 00 00 FF 
03ec4     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
03ec8     01 16 66 F6 | 	neg	result1, #1
03ecc                 | LR__0243
03ecc     D0 F0 03 F6 | 	mov	ptra, fp
03ed0     E0 00 A0 FD | 	call	#popregs_
03ed4                 | __rxtxioctl_0055_ret
03ed4     2D 00 64 FD | 	ret
03ed8                 | 
03ed8                 | ___dummy_flush_0056
03ed8                 | ' {
03ed8                 | '     return 0;
03ed8     00 16 06 F6 | 	mov	result1, #0
03edc                 | ___dummy_flush_0056_ret
03edc     2D 00 64 FD | 	ret
03ee0                 | 
03ee0                 | __vfswrite
03ee0     0B 9C 05 F6 | 	mov	COUNT_, #11
03ee4     D1 00 A0 FD | 	call	#pushregs_
03ee8     1F 49 02 F6 | 	mov	local01, arg01
03eec     20 4B 02 F6 | 	mov	local02, arg02
03ef0     21 4D 02 F6 | 	mov	local03, arg03
03ef4     25 4F 02 F6 | 	mov	local04, local02
03ef8     08 48 06 F1 | 	add	local01, #8
03efc     24 51 02 FB | 	rdlong	local05, local01
03f00     08 48 86 F1 | 	sub	local01, #8
03f04     02 50 CE F7 | 	test	local05, #2 wz
03f08     1C 00 90 5D |  if_ne	jmp	#LR__0244
03f0c                 | '         return _seterror( 6 );
03f0c     01 00 00 FF 
03f10     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
03f14     05 0D 68 FC | 	wrlong	#6, ptr___system__dat__
03f18     01 00 00 FF 
03f1c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
03f20     01 16 66 F6 | 	neg	result1, #1
03f24     70 01 90 FD | 	jmp	#LR__0252
03f28                 | LR__0244
03f28     08 48 06 F1 | 	add	local01, #8
03f2c     24 51 02 FB | 	rdlong	local05, local01
03f30     08 48 86 F1 | 	sub	local01, #8
03f34     40 50 CE F7 | 	test	local05, #64 wz
03f38     5C 00 90 AD |  if_e	jmp	#LR__0246
03f3c     08 48 06 F1 | 	add	local01, #8
03f40     24 51 02 FB | 	rdlong	local05, local01
03f44     08 48 86 F1 | 	sub	local01, #8
03f48     80 50 CE F7 | 	test	local05, #128 wz
03f4c     48 00 90 AD |  if_e	jmp	#LR__0245
03f50     2C 48 06 F1 | 	add	local01, #44
03f54     24 51 02 FB | 	rdlong	local05, local01
03f58     2C 48 86 F1 | 	sub	local01, #44
03f5c     28 53 02 FB | 	rdlong	local06, local05
03f60     04 50 06 F1 | 	add	local05, #4
03f64     28 55 02 FB | 	rdlong	local07, local05
03f68     24 3F 02 F6 | 	mov	arg01, local01
03f6c     00 40 06 F6 | 	mov	arg02, #0
03f70     02 42 06 F6 | 	mov	arg03, #2
03f74     FE 56 02 F6 | 	mov	local08, objptr
03f78     29 FD 01 F6 | 	mov	objptr, local06
03f7c     2D 54 62 FD | 	call	local07
03f80     2B FD 01 F6 | 	mov	objptr, local08
03f84     08 48 06 F1 | 	add	local01, #8
03f88     24 51 02 FB | 	rdlong	local05, local01
03f8c     80 50 26 F5 | 	andn	local05, #128
03f90     24 51 62 FC | 	wrlong	local05, local01
03f94     08 48 86 F1 | 	sub	local01, #8
03f98                 | LR__0245
03f98                 | LR__0246
03f98     14 48 06 F1 | 	add	local01, #20
03f9c     24 51 0A FB | 	rdlong	local05, local01 wz
03fa0     14 48 86 F1 | 	sub	local01, #20
03fa4     7C 00 90 AD |  if_e	jmp	#LR__0248
03fa8     14 48 06 F1 | 	add	local01, #20
03fac     24 51 02 FB | 	rdlong	local05, local01
03fb0     14 48 86 F1 | 	sub	local01, #20
03fb4     28 53 02 FB | 	rdlong	local06, local05
03fb8     04 50 06 F1 | 	add	local05, #4
03fbc     28 55 02 FB | 	rdlong	local07, local05
03fc0     25 41 02 F6 | 	mov	arg02, local02
03fc4     26 43 02 F6 | 	mov	arg03, local03
03fc8     24 3F 02 F6 | 	mov	arg01, local01
03fcc     FE 56 02 F6 | 	mov	local08, objptr
03fd0     29 FD 01 F6 | 	mov	objptr, local06
03fd4     2D 54 62 FD | 	call	local07
03fd8     2B FD 01 F6 | 	mov	objptr, local08
03fdc     0B 59 02 F6 | 	mov	local09, result1
03fe0     00 58 5E F2 | 	cmps	local09, #0 wcz
03fe4     34 00 90 3D |  if_ae	jmp	#LR__0247
03fe8     08 48 06 F1 | 	add	local01, #8
03fec     24 51 02 FB | 	rdlong	local05, local01
03ff0     20 50 46 F5 | 	or	local05, #32
03ff4     24 51 62 FC | 	wrlong	local05, local01
03ff8                 | '             f->state |=  (0x20) ;
03ff8                 | '             return _seterror(r);
03ff8     01 00 00 FF 
03ffc     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
04000     05 59 62 FC | 	wrlong	local09, ptr___system__dat__
04004     01 00 00 FF 
04008     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0400c     00 58 0E F2 | 	cmp	local09, #0 wz
04010     01 16 66 56 |  if_ne	neg	result1, #1
04014     00 16 06 A6 |  if_e	mov	result1, #0
04018     7C 00 90 FD | 	jmp	#LR__0252
0401c                 | LR__0247
0401c                 | '         }
0401c                 | '         return r;
0401c     2C 17 02 F6 | 	mov	result1, local09
04020     74 00 90 FD | 	jmp	#LR__0252
04024                 | LR__0248
04024     18 48 06 F1 | 	add	local01, #24
04028     24 5B 0A FB | 	rdlong	local10, local01 wz
0402c     18 48 86 F1 | 	sub	local01, #24
04030     1C 00 90 5D |  if_ne	jmp	#LR__0249
04034                 | '         return _seterror( 6 );
04034     01 00 00 FF 
04038     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0403c     05 0D 68 FC | 	wrlong	#6, ptr___system__dat__
04040     01 00 00 FF 
04044     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
04048     01 16 66 F6 | 	neg	result1, #1
0404c     48 00 90 FD | 	jmp	#LR__0252
04050                 | LR__0249
04050     00 58 06 F6 | 	mov	local09, #0
04054                 | '     }
04054                 | '     r = 0;
04054                 | '     while (count > 0) {
04054                 | LR__0250
04054     00 4C 1E F2 | 	cmp	local03, #0 wcz
04058     38 00 90 ED |  if_be	jmp	#LR__0251
0405c     2D 51 02 F6 | 	mov	local05, local10
04060     28 53 02 FB | 	rdlong	local06, local05
04064     04 50 06 F1 | 	add	local05, #4
04068     28 55 02 FB | 	rdlong	local07, local05
0406c     27 3F C2 FA | 	rdbyte	arg01, local04
04070     24 41 02 F6 | 	mov	arg02, local01
04074     FE 5C 02 F6 | 	mov	local11, objptr
04078     29 FD 01 F6 | 	mov	objptr, local06
0407c     01 4E 06 F1 | 	add	local04, #1
04080     2D 54 62 FD | 	call	local07
04084     2E FD 01 F6 | 	mov	objptr, local11
04088     0B 59 02 F1 | 	add	local09, result1
0408c     01 4C 86 F1 | 	sub	local03, #1
04090     C0 FF 9F FD | 	jmp	#LR__0250
04094                 | LR__0251
04094                 | '         r += (*tx)(*buf++, f);
04094                 | '         --count;
04094                 | '     }
04094                 | '     return r;
04094     2C 17 02 F6 | 	mov	result1, local09
04098                 | LR__0252
04098     D0 F0 03 F6 | 	mov	ptra, fp
0409c     E0 00 A0 FD | 	call	#popregs_
040a0                 | __vfswrite_ret
040a0     2D 00 64 FD | 	ret
040a4                 | 
040a4                 | __vfsread
040a4     0E 9C 05 F6 | 	mov	COUNT_, #14
040a8     D1 00 A0 FD | 	call	#pushregs_
040ac     28 F0 07 F1 | 	add	ptra, #40
040b0     04 A0 05 F1 | 	add	fp, #4
040b4     D0 3E 62 FC | 	wrlong	arg01, fp
040b8     04 A0 05 F1 | 	add	fp, #4
040bc     D0 40 62 FC | 	wrlong	arg02, fp
040c0     04 A0 05 F1 | 	add	fp, #4
040c4     D0 42 62 FC | 	wrlong	arg03, fp
040c8     04 A0 85 F1 | 	sub	fp, #4
040cc     D0 48 02 FB | 	rdlong	local01, fp
040d0     14 A0 05 F1 | 	add	fp, #20
040d4     D0 48 62 FC | 	wrlong	local01, fp
040d8     04 A0 05 F1 | 	add	fp, #4
040dc     D0 00 68 FC | 	wrlong	#0, fp
040e0     1C A0 85 F1 | 	sub	fp, #28
040e4     D0 4A 02 FB | 	rdlong	local02, fp
040e8     04 A0 85 F1 | 	sub	fp, #4
040ec     08 4A 06 F1 | 	add	local02, #8
040f0     25 49 02 FB | 	rdlong	local01, local02
040f4     01 48 CE F7 | 	test	local01, #1 wz
040f8     1C 00 90 5D |  if_ne	jmp	#LR__0253
040fc                 | ' #line 306 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/posixio.c"
040fc                 | '         return _seterror( 6 );
040fc     01 00 00 FF 
04100     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
04104     05 0D 68 FC | 	wrlong	#6, ptr___system__dat__
04108     01 00 00 FF 
0410c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
04110     01 16 66 F6 | 	neg	result1, #1
04114     9C 02 90 FD | 	jmp	#LR__0261
04118                 | LR__0253
04118     04 A0 05 F1 | 	add	fp, #4
0411c     D0 48 02 FB | 	rdlong	local01, fp
04120     04 A0 85 F1 | 	sub	fp, #4
04124     10 48 06 F1 | 	add	local01, #16
04128     24 4D 0A FB | 	rdlong	local03, local01 wz
0412c     B4 00 90 AD |  if_e	jmp	#LR__0255
04130     04 A0 05 F1 | 	add	fp, #4
04134     D0 4E 02 FB | 	rdlong	local04, fp
04138     10 4E 06 F1 | 	add	local04, #16
0413c     27 49 02 FB | 	rdlong	local01, local04
04140     24 4B 02 FB | 	rdlong	local02, local01
04144     04 48 06 F1 | 	add	local01, #4
04148     24 4D 02 FB | 	rdlong	local03, local01
0414c     D0 3E 02 FB | 	rdlong	arg01, fp
04150     04 A0 05 F1 | 	add	fp, #4
04154     D0 40 02 FB | 	rdlong	arg02, fp
04158     04 A0 05 F1 | 	add	fp, #4
0415c     D0 42 02 FB | 	rdlong	arg03, fp
04160     0C A0 85 F1 | 	sub	fp, #12
04164     FE 50 02 F6 | 	mov	local05, objptr
04168     25 FD 01 F6 | 	mov	objptr, local02
0416c     2D 4C 62 FD | 	call	local03
04170     28 FD 01 F6 | 	mov	objptr, local05
04174     10 A0 05 F1 | 	add	fp, #16
04178     D0 16 62 FC | 	wrlong	result1, fp
0417c     10 A0 85 F1 | 	sub	fp, #16
04180     00 16 5E F2 | 	cmps	result1, #0 wcz
04184     4C 00 90 3D |  if_ae	jmp	#LR__0254
04188     04 A0 05 F1 | 	add	fp, #4
0418c     D0 48 02 FB | 	rdlong	local01, fp
04190     24 4F 02 F6 | 	mov	local04, local01
04194     08 4E 06 F1 | 	add	local04, #8
04198     27 4D 02 FB | 	rdlong	local03, local04
0419c     20 4C 46 F5 | 	or	local03, #32
041a0     08 48 06 F1 | 	add	local01, #8
041a4     24 4D 62 FC | 	wrlong	local03, local01
041a8                 | '             f->state |=  (0x20) ;
041a8                 | '             return _seterror(r);
041a8     0C A0 05 F1 | 	add	fp, #12
041ac     D0 3E 0A FB | 	rdlong	arg01, fp wz
041b0     10 A0 85 F1 | 	sub	fp, #16
041b4     01 00 00 FF 
041b8     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
041bc     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
041c0     01 00 00 FF 
041c4     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
041c8     01 16 66 56 |  if_ne	neg	result1, #1
041cc     00 16 06 A6 |  if_e	mov	result1, #0
041d0     E0 01 90 FD | 	jmp	#LR__0261
041d4                 | LR__0254
041d4                 | '         }
041d4                 | '         return r;
041d4     10 A0 05 F1 | 	add	fp, #16
041d8     D0 16 02 FB | 	rdlong	result1, fp
041dc     10 A0 85 F1 | 	sub	fp, #16
041e0     D0 01 90 FD | 	jmp	#LR__0261
041e4                 | LR__0255
041e4     04 A0 05 F1 | 	add	fp, #4
041e8     D0 48 02 FB | 	rdlong	local01, fp
041ec     1C 48 06 F1 | 	add	local01, #28
041f0     24 4D 02 FB | 	rdlong	local03, local01
041f4     14 A0 05 F1 | 	add	fp, #20
041f8     D0 4C 62 FC | 	wrlong	local03, fp
041fc     D0 48 0A FB | 	rdlong	local01, fp wz
04200     18 A0 85 F1 | 	sub	fp, #24
04204     1C 00 90 5D |  if_ne	jmp	#LR__0256
04208                 | '         return _seterror( 6 );
04208     01 00 00 FF 
0420c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
04210     05 0D 68 FC | 	wrlong	#6, ptr___system__dat__
04214     01 00 00 FF 
04218     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0421c     01 16 66 F6 | 	neg	result1, #1
04220     90 01 90 FD | 	jmp	#LR__0261
04224                 | LR__0256
04224     04 A0 05 F1 | 	add	fp, #4
04228     D0 48 02 FB | 	rdlong	local01, fp
0422c     04 A0 85 F1 | 	sub	fp, #4
04230     24 48 06 F1 | 	add	local01, #36
04234     24 4D 0A FB | 	rdlong	local03, local01 wz
04238     A0 00 90 AD |  if_e	jmp	#LR__0258
0423c     04 A0 05 F1 | 	add	fp, #4
04240     D0 52 02 FB | 	rdlong	local06, fp
04244     29 4F 02 F6 | 	mov	local04, local06
04248     24 4E 06 F1 | 	add	local04, #36
0424c     27 55 02 FB | 	rdlong	local07, local04
04250     2A 49 02 F6 | 	mov	local01, local07
04254     24 4B 02 FB | 	rdlong	local02, local01
04258     04 48 06 F1 | 	add	local01, #4
0425c     24 57 02 FB | 	rdlong	local08, local01
04260     2B 4D 02 F6 | 	mov	local03, local08
04264     29 59 02 F6 | 	mov	local09, local06
04268     2C 5B 02 F6 | 	mov	local10, local09
0426c     00 5D 06 F6 | 	mov	local11, #256
04270     20 A0 05 F1 | 	add	fp, #32
04274     D0 5E 02 F6 | 	mov	local12, fp
04278     2F 61 02 F6 | 	mov	local13, local12
0427c     2D 3F 02 F6 | 	mov	arg01, local10
04280     00 41 06 F6 | 	mov	arg02, #256
04284     30 43 02 F6 | 	mov	arg03, local13
04288     FE 62 02 F6 | 	mov	local14, objptr
0428c     25 FD 01 F6 | 	mov	objptr, local02
04290     24 A0 85 F1 | 	sub	fp, #36
04294     2D 4C 62 FD | 	call	local03
04298     31 FD 01 F6 | 	mov	objptr, local14
0429c     0B 51 02 F6 | 	mov	local05, result1
042a0     10 A0 05 F1 | 	add	fp, #16
042a4     D0 50 62 FC | 	wrlong	local05, fp
042a8     D0 4A 0A FB | 	rdlong	local02, fp wz
042ac     10 A0 85 F1 | 	sub	fp, #16
042b0     28 00 90 5D |  if_ne	jmp	#LR__0257
042b4     24 A0 05 F1 | 	add	fp, #36
042b8     D0 4E 02 FB | 	rdlong	local04, fp
042bc     24 A0 85 F1 | 	sub	fp, #36
042c0     27 4D 02 F6 | 	mov	local03, local04
042c4     02 4C 0E F5 | 	and	local03, #2 wz
042c8     10 00 90 AD |  if_e	jmp	#LR__0257
042cc     01 48 06 F6 | 	mov	local01, #1
042d0     20 A0 05 F1 | 	add	fp, #32
042d4     D0 02 68 FC | 	wrlong	#1, fp
042d8     20 A0 85 F1 | 	sub	fp, #32
042dc                 | LR__0257
042dc                 | LR__0258
042dc     10 A0 05 F1 | 	add	fp, #16
042e0     D0 00 68 FC | 	wrlong	#0, fp
042e4     10 A0 85 F1 | 	sub	fp, #16
042e8                 | '             break_on_nl = 1;
042e8                 | '         }
042e8                 | '     }
042e8                 | '     r = 0;
042e8                 | '     while (count > 0) {
042e8                 | LR__0259
042e8     0C A0 05 F1 | 	add	fp, #12
042ec     D0 48 02 FB | 	rdlong	local01, fp
042f0     0C A0 85 F1 | 	sub	fp, #12
042f4     00 48 1E F2 | 	cmp	local01, #0 wcz
042f8     AC 00 90 ED |  if_be	jmp	#LR__0260
042fc     18 A0 05 F1 | 	add	fp, #24
04300     D0 48 02 FB | 	rdlong	local01, fp
04304     24 4B 02 FB | 	rdlong	local02, local01
04308     04 48 06 F1 | 	add	local01, #4
0430c     24 4D 02 FB | 	rdlong	local03, local01
04310     14 A0 85 F1 | 	sub	fp, #20
04314     D0 3E 02 FB | 	rdlong	arg01, fp
04318     04 A0 85 F1 | 	sub	fp, #4
0431c     FE 5A 02 F6 | 	mov	local10, objptr
04320     25 FD 01 F6 | 	mov	objptr, local02
04324     2D 4C 62 FD | 	call	local03
04328     2D FD 01 F6 | 	mov	objptr, local10
0432c     0B 59 02 F6 | 	mov	local09, result1
04330     14 A0 05 F1 | 	add	fp, #20
04334     D0 58 62 FC | 	wrlong	local09, fp
04338     14 A0 85 F1 | 	sub	fp, #20
0433c     00 58 5E F2 | 	cmps	local09, #0 wcz
04340     64 00 90 CD |  if_b	jmp	#LR__0260
04344     1C A0 05 F1 | 	add	fp, #28
04348     D0 48 02 FB | 	rdlong	local01, fp
0434c     24 4D 02 F6 | 	mov	local03, local01
04350     01 4C 06 F1 | 	add	local03, #1
04354     D0 4C 62 FC | 	wrlong	local03, fp
04358     08 A0 85 F1 | 	sub	fp, #8
0435c     D0 52 02 FB | 	rdlong	local06, fp
04360     24 53 42 FC | 	wrbyte	local06, local01
04364     04 A0 85 F1 | 	sub	fp, #4
04368     D0 48 02 FB | 	rdlong	local01, fp
0436c     01 48 06 F1 | 	add	local01, #1
04370     D0 48 62 FC | 	wrlong	local01, fp
04374     04 A0 85 F1 | 	sub	fp, #4
04378     D0 48 02 FB | 	rdlong	local01, fp
0437c     01 48 86 F1 | 	sub	local01, #1
04380     D0 48 62 FC | 	wrlong	local01, fp
04384     14 A0 05 F1 | 	add	fp, #20
04388     D0 48 0A FB | 	rdlong	local01, fp wz
0438c     20 A0 85 F1 | 	sub	fp, #32
04390     54 FF 9F AD |  if_e	jmp	#LR__0259
04394     14 A0 05 F1 | 	add	fp, #20
04398     D0 4C 02 FB | 	rdlong	local03, fp
0439c     14 A0 85 F1 | 	sub	fp, #20
043a0     0A 4C 0E F2 | 	cmp	local03, #10 wz
043a4                 | '             break;
043a4     40 FF 9F 5D |  if_ne	jmp	#LR__0259
043a8                 | LR__0260
043a8                 | '         }
043a8                 | '     }
043a8                 | '     return r;
043a8     10 A0 05 F1 | 	add	fp, #16
043ac     D0 16 02 FB | 	rdlong	result1, fp
043b0     10 A0 85 F1 | 	sub	fp, #16
043b4                 | LR__0261
043b4     D0 F0 03 F6 | 	mov	ptra, fp
043b8     E0 00 A0 FD | 	call	#popregs_
043bc                 | __vfsread_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | __vfsexecve
043c0     05 9C 05 F6 | 	mov	COUNT_, #5
043c4     D1 00 A0 FD | 	call	#pushregs_
043c8     1F 49 02 F6 | 	mov	local01, arg01
043cc     00 3E 06 F6 | 	mov	arg01, #0
043d0     5C 98 B0 FD | 	call	#__system____topofstack
043d4     0B 4B 02 F6 | 	mov	local02, result1
043d8     02 00 00 FF 
043dc     00 4A 06 F1 | 	add	local02, ##1024
043e0     E0 3F 00 FF 
043e4     00 4C 06 F6 | 	mov	local03, ##8372224
043e8     25 4D 82 F1 | 	sub	local03, local02
043ec     25 4F 02 F6 | 	mov	local04, local02
043f0                 | ' #line 106 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/exec.c"
043f0                 | '     sizeleft = topmem - buf;
043f0                 | '     ptr = buf;
043f0                 | ' 
043f0                 | '     while (sizeleft > 0) {
043f0                 | LR__0262
043f0     00 4C 5E F2 | 	cmps	local03, #0 wcz
043f4     30 00 90 ED |  if_be	jmp	#LR__0263
043f8     24 3F 02 F6 | 	mov	arg01, local01
043fc     27 41 02 F6 | 	mov	arg02, local04
04400     26 43 02 F6 | 	mov	arg03, local03
04404     9C FC BF FD | 	call	#__vfsread
04408     0B 51 0A F6 | 	mov	local05, result1 wz
0440c     18 00 90 AD |  if_e	jmp	#LR__0263
04410     00 50 5E F2 | 	cmps	local05, #0 wcz
04414                 | '             return r;
04414     28 17 02 C6 |  if_b	mov	result1, local05
04418     6C 00 90 CD |  if_b	jmp	#LR__0266
0441c     28 4F 02 F1 | 	add	local04, local05
04420     28 4D 82 F1 | 	sub	local03, local05
04424     C8 FF 9F FD | 	jmp	#LR__0262
04428                 | LR__0263
04428     00 4C 0E F2 | 	cmp	local03, #0 wz
0442c     1C 00 90 5D |  if_ne	jmp	#LR__0264
04430                 | ' 
04430                 | '         return _seterror( 7 );
04430     01 00 00 FF 
04434     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
04438     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0443c     01 00 00 FF 
04440     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
04444     01 16 66 F6 | 	neg	result1, #1
04448     3C 00 90 FD | 	jmp	#LR__0266
0444c                 | LR__0264
0444c     25 4F 82 F1 | 	sub	local04, local02
04450     27 4D 0A F6 | 	mov	local03, local04 wz
04454     1C 00 90 5D |  if_ne	jmp	#LR__0265
04458                 | ' 
04458                 | '         return _seterror( 6 );
04458     01 00 00 FF 
0445c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
04460     05 0D 68 FC | 	wrlong	#6, ptr___system__dat__
04464     01 00 00 FF 
04468     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0446c     01 16 66 F6 | 	neg	result1, #1
04470     14 00 90 FD | 	jmp	#LR__0266
04474                 | LR__0265
04474     25 3F 02 F6 | 	mov	arg01, local02
04478     26 41 02 F6 | 	mov	arg02, local03
0447c     00 42 06 F6 | 	mov	arg03, #0
04480     93 00 A0 FD | 	call	#___run
04484                 | ' 
04484                 | '     return 0;
04484     00 16 06 F6 | 	mov	result1, #0
04488                 | LR__0266
04488     D0 F0 03 F6 | 	mov	ptra, fp
0448c     E0 00 A0 FD | 	call	#popregs_
04490                 | __vfsexecve_ret
04490     2D 00 64 FD | 	ret
04494                 | 
04494                 | __dofmt
04494     0B 9C 05 F6 | 	mov	COUNT_, #11
04498     D1 00 A0 FD | 	call	#pushregs_
0449c     3C F0 07 F1 | 	add	ptra, #60
044a0     04 A0 05 F1 | 	add	fp, #4
044a4     D0 3E 62 FC | 	wrlong	arg01, fp
044a8     04 A0 05 F1 | 	add	fp, #4
044ac     D0 40 62 FC | 	wrlong	arg02, fp
044b0     04 A0 05 F1 | 	add	fp, #4
044b4     D0 42 62 FC | 	wrlong	arg03, fp
044b8     00 48 06 F6 | 	mov	local01, #0
044bc     10 A0 05 F1 | 	add	fp, #16
044c0     D0 00 68 FC | 	wrlong	#0, fp
044c4     08 A0 05 F1 | 	add	fp, #8
044c8     D0 00 68 FC | 	wrlong	#0, fp
044cc     04 A0 05 F1 | 	add	fp, #4
044d0     D0 00 68 FC | 	wrlong	#0, fp
044d4     08 A0 05 F1 | 	add	fp, #8
044d8     D0 00 68 FC | 	wrlong	#0, fp
044dc     30 A0 85 F1 | 	sub	fp, #48
044e0                 | ' #line 150 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libsys/dofmt.c"
044e0                 | '     for(;;) {
044e0                 | LR__0267
044e0     08 A0 05 F1 | 	add	fp, #8
044e4     D0 4A 02 FB | 	rdlong	local02, fp
044e8     25 4D 02 F6 | 	mov	local03, local02
044ec     01 4C 06 F1 | 	add	local03, #1
044f0     D0 4C 62 FC | 	wrlong	local03, fp
044f4     25 49 C2 FA | 	rdbyte	local01, local02
044f8     08 A0 05 F1 | 	add	fp, #8
044fc     D0 48 62 FC | 	wrlong	local01, fp
04500     D0 48 0A FB | 	rdlong	local01, fp wz
04504     10 A0 85 F1 | 	sub	fp, #16
04508     34 07 90 AD |  if_e	jmp	#LR__0293
0450c     10 A0 05 F1 | 	add	fp, #16
04510     D0 48 02 FB | 	rdlong	local01, fp
04514     10 A0 85 F1 | 	sub	fp, #16
04518     25 48 0E F2 | 	cmp	local01, #37 wz
0451c     6C 00 90 AD |  if_e	jmp	#LR__0269
04520     04 A0 05 F1 | 	add	fp, #4
04524     D0 48 02 FB | 	rdlong	local01, fp
04528     24 4B 02 FB | 	rdlong	local02, local01
0452c     04 48 06 F1 | 	add	local01, #4
04530     24 4F 02 FB | 	rdlong	local04, local01
04534     0C A0 05 F1 | 	add	fp, #12
04538     D0 3E 02 FB | 	rdlong	arg01, fp
0453c     10 A0 85 F1 | 	sub	fp, #16
04540     FE 50 02 F6 | 	mov	local05, objptr
04544     25 FD 01 F6 | 	mov	objptr, local02
04548     2D 4E 62 FD | 	call	local04
0454c     28 FD 01 F6 | 	mov	objptr, local05
04550     14 A0 05 F1 | 	add	fp, #20
04554     D0 16 62 FC | 	wrlong	result1, fp
04558     14 A0 85 F1 | 	sub	fp, #20
0455c     00 16 5E F2 | 	cmps	result1, #0 wcz
04560     10 00 90 3D |  if_ae	jmp	#LR__0268
04564     14 A0 05 F1 | 	add	fp, #20
04568     D0 16 02 FB | 	rdlong	result1, fp
0456c     14 A0 85 F1 | 	sub	fp, #20
04570     D8 06 90 FD | 	jmp	#LR__0294
04574                 | LR__0268
04574     1C A0 05 F1 | 	add	fp, #28
04578     D0 4E 02 FB | 	rdlong	local04, fp
0457c     01 4E 06 F1 | 	add	local04, #1
04580     D0 4E 62 FC | 	wrlong	local04, fp
04584     1C A0 85 F1 | 	sub	fp, #28
04588                 | '             bytes_written++;
04588                 | '             continue;
04588     54 FF 9F FD | 	jmp	#LR__0267
0458c                 | LR__0269
0458c     08 A0 05 F1 | 	add	fp, #8
04590     D0 3E 02 FB | 	rdlong	arg01, fp
04594     18 A0 05 F1 | 	add	fp, #24
04598     D0 40 02 F6 | 	mov	arg02, fp
0459c     20 A0 85 F1 | 	sub	fp, #32
045a0     C4 09 B0 FD | 	call	#_parseflags_0910
045a4     0B 53 02 F6 | 	mov	local06, result1
045a8     08 A0 05 F1 | 	add	fp, #8
045ac     D0 52 62 FC | 	wrlong	local06, fp
045b0     18 A0 05 F1 | 	add	fp, #24
045b4     D0 48 02 FB | 	rdlong	local01, fp
045b8     18 48 46 F0 | 	shr	local01, #24
045bc     03 48 06 F5 | 	and	local01, #3
045c0     10 A0 05 F1 | 	add	fp, #16
045c4     D0 48 62 FC | 	wrlong	local01, fp
045c8     28 A0 85 F1 | 	sub	fp, #40
045cc     D0 3E 02 F6 | 	mov	arg01, fp
045d0     04 A0 05 F1 | 	add	fp, #4
045d4     D0 40 02 FB | 	rdlong	arg02, fp
045d8     0C A0 85 F1 | 	sub	fp, #12
045dc     10 09 B0 FD | 	call	#_parseint_0903
045e0     0B 53 02 F6 | 	mov	local06, result1
045e4     24 A0 05 F1 | 	add	fp, #36
045e8     D0 52 62 FC | 	wrlong	local06, fp
045ec     1C A0 85 F1 | 	sub	fp, #28
045f0     D0 4A 02 FB | 	rdlong	local02, fp
045f4     25 49 C2 FA | 	rdbyte	local01, local02
045f8     08 A0 05 F1 | 	add	fp, #8
045fc     D0 48 62 FC | 	wrlong	local01, fp
04600     D0 48 0A FB | 	rdlong	local01, fp wz
04604     10 A0 85 F1 | 	sub	fp, #16
04608     34 06 90 AD |  if_e	jmp	#LR__0293
0460c     10 A0 05 F1 | 	add	fp, #16
04610     D0 48 02 FB | 	rdlong	local01, fp
04614     10 A0 85 F1 | 	sub	fp, #16
04618     2E 48 0E F2 | 	cmp	local01, #46 wz
0461c     54 00 90 5D |  if_ne	jmp	#LR__0270
04620     08 A0 05 F1 | 	add	fp, #8
04624     D0 4E 02 FB | 	rdlong	local04, fp
04628     01 4E 06 F1 | 	add	local04, #1
0462c     D0 4E 62 FC | 	wrlong	local04, fp
04630     D0 3E 02 F6 | 	mov	arg01, fp
04634     04 A0 05 F1 | 	add	fp, #4
04638     D0 40 02 FB | 	rdlong	arg02, fp
0463c     0C A0 85 F1 | 	sub	fp, #12
04640     AC 08 B0 FD | 	call	#_parseint_0903
04644     0B 49 02 F6 | 	mov	local01, result1
04648     01 48 06 F1 | 	add	local01, #1
0464c     28 A0 05 F1 | 	add	fp, #40
04650     D0 48 62 FC | 	wrlong	local01, fp
04654     20 A0 85 F1 | 	sub	fp, #32
04658     D0 4A 02 FB | 	rdlong	local02, fp
0465c     25 49 C2 FA | 	rdbyte	local01, local02
04660     08 A0 05 F1 | 	add	fp, #8
04664     D0 48 62 FC | 	wrlong	local01, fp
04668     D0 48 0A FB | 	rdlong	local01, fp wz
0466c     10 A0 85 F1 | 	sub	fp, #16
04670     CC 05 90 AD |  if_e	jmp	#LR__0293
04674                 | LR__0270
04674     08 A0 05 F1 | 	add	fp, #8
04678     D0 3E 02 FB | 	rdlong	arg01, fp
0467c     24 A0 05 F1 | 	add	fp, #36
04680     D0 40 02 F6 | 	mov	arg02, fp
04684     2C A0 85 F1 | 	sub	fp, #44
04688     8C 09 B0 FD | 	call	#_parsesize_0914
0468c     08 A0 05 F1 | 	add	fp, #8
04690     D0 16 62 FC | 	wrlong	result1, fp
04694     0B 4B 02 F6 | 	mov	local02, result1
04698     0B 4D 02 F6 | 	mov	local03, result1
0469c     01 4C 06 F1 | 	add	local03, #1
046a0     D0 4C 62 FC | 	wrlong	local03, fp
046a4     25 49 C2 FA | 	rdbyte	local01, local02
046a8     08 A0 05 F1 | 	add	fp, #8
046ac     D0 48 62 FC | 	wrlong	local01, fp
046b0     D0 48 0A FB | 	rdlong	local01, fp wz
046b4     10 A0 85 F1 | 	sub	fp, #16
046b8     84 05 90 AD |  if_e	jmp	#LR__0293
046bc     10 A0 05 F1 | 	add	fp, #16
046c0     D0 48 02 FB | 	rdlong	local01, fp
046c4     10 A0 85 F1 | 	sub	fp, #16
046c8     25 48 0E F2 | 	cmp	local01, #37 wz
046cc     30 00 90 5D |  if_ne	jmp	#LR__0271
046d0     04 A0 05 F1 | 	add	fp, #4
046d4     D0 3E 02 FB | 	rdlong	arg01, fp
046d8     1C A0 05 F1 | 	add	fp, #28
046dc     D0 40 02 FB | 	rdlong	arg02, fp
046e0     20 A0 85 F1 | 	sub	fp, #32
046e4     25 42 06 F6 | 	mov	arg03, #37
046e8     C4 99 B0 FD | 	call	#__system___fmtchar
046ec     0B 55 02 F6 | 	mov	local07, result1
046f0     14 A0 05 F1 | 	add	fp, #20
046f4     D0 54 62 FC | 	wrlong	local07, fp
046f8     14 A0 85 F1 | 	sub	fp, #20
046fc                 | '             q = _fmtchar(fn, flags, '%');
046fc                 | '             continue;
046fc     E0 FD 9F FD | 	jmp	#LR__0267
04700                 | LR__0271
04700     14 A0 05 F1 | 	add	fp, #20
04704     D0 00 68 FC | 	wrlong	#0, fp
04708     08 A0 85 F1 | 	sub	fp, #8
0470c     D0 4A 02 FB | 	rdlong	local02, fp
04710     25 4D 02 FB | 	rdlong	local03, local02
04714     26 49 02 FB | 	rdlong	local01, local03
04718     25 55 02 F6 | 	mov	local07, local02
0471c     2A 53 02 F6 | 	mov	local06, local07
04720     25 57 02 F6 | 	mov	local08, local02
04724     2B 51 02 F6 | 	mov	local05, local08
04728     28 59 02 FB | 	rdlong	local09, local05
0472c     04 58 06 F1 | 	add	local09, #4
04730     29 59 62 FC | 	wrlong	local09, local06
04734     28 A0 05 F1 | 	add	fp, #40
04738     D0 48 62 FC | 	wrlong	local01, fp
0473c     24 A0 85 F1 | 	sub	fp, #36
04740     D0 48 02 FB | 	rdlong	local01, fp
04744     10 A0 85 F1 | 	sub	fp, #16
04748     41 48 5E F2 | 	cmps	local01, #65 wcz
0474c     48 00 90 CD |  if_b	jmp	#LR__0272
04750     10 A0 05 F1 | 	add	fp, #16
04754     D0 4C 02 FB | 	rdlong	local03, fp
04758     10 A0 85 F1 | 	sub	fp, #16
0475c     26 4F 02 F6 | 	mov	local04, local03
04760     5A 4E 5E F2 | 	cmps	local04, #90 wcz
04764     30 00 90 1D |  if_a	jmp	#LR__0272
04768     20 A0 05 F1 | 	add	fp, #32
0476c     D0 48 02 FB | 	rdlong	local01, fp
04770     1D 48 26 F4 | 	bith	local01, #29
04774     D0 48 62 FC | 	wrlong	local01, fp
04778     10 A0 85 F1 | 	sub	fp, #16
0477c     D0 4A 02 FB | 	rdlong	local02, fp
04780     41 4A 86 F1 | 	sub	local02, #65
04784     D0 4A 62 FC | 	wrlong	local02, fp
04788     25 49 02 F6 | 	mov	local01, local02
0478c     61 48 06 F1 | 	add	local01, #97
04790     D0 48 62 FC | 	wrlong	local01, fp
04794     10 A0 85 F1 | 	sub	fp, #16
04798                 | LR__0272
04798     28 A0 05 F1 | 	add	fp, #40
0479c     D0 48 02 FB | 	rdlong	local01, fp
047a0     28 A0 85 F1 | 	sub	fp, #40
047a4     00 48 5E F2 | 	cmps	local01, #0 wcz
047a8     28 A0 05 C1 |  if_b	add	fp, #40
047ac     D0 00 68 CC |  if_b	wrlong	#0, fp
047b0     28 A0 85 C1 |  if_b	sub	fp, #40
047b4     28 A0 05 F1 | 	add	fp, #40
047b8     D0 48 02 FB | 	rdlong	local01, fp
047bc     28 A0 85 F1 | 	sub	fp, #40
047c0     3F 48 5E F2 | 	cmps	local01, #63 wcz
047c4     28 A0 05 11 |  if_a	add	fp, #40
047c8     D0 7E 68 1C |  if_a	wrlong	#63, fp
047cc     28 A0 85 11 |  if_a	sub	fp, #40
047d0     24 A0 05 F1 | 	add	fp, #36
047d4     D0 48 02 FB | 	rdlong	local01, fp
047d8     24 A0 85 F1 | 	sub	fp, #36
047dc     00 48 5E F2 | 	cmps	local01, #0 wcz
047e0     34 00 90 3D |  if_ae	jmp	#LR__0273
047e4     24 A0 05 F1 | 	add	fp, #36
047e8     D0 48 02 FB | 	rdlong	local01, fp
047ec     24 49 62 F6 | 	neg	local01, local01
047f0     D0 48 62 FC | 	wrlong	local01, fp
047f4     04 A0 85 F1 | 	sub	fp, #4
047f8     D0 48 02 FB | 	rdlong	local01, fp
047fc     36 48 06 F4 | 	bitl	local01, #54
04800     D0 48 62 FC | 	wrlong	local01, fp
04804     16 48 26 F4 | 	bith	local01, #22
04808     D0 48 62 FC | 	wrlong	local01, fp
0480c     10 A0 05 F1 | 	add	fp, #16
04810     D0 02 68 FC | 	wrlong	#1, fp
04814     30 A0 85 F1 | 	sub	fp, #48
04818                 | LR__0273
04818     20 A0 05 F1 | 	add	fp, #32
0481c     D0 48 02 FB | 	rdlong	local01, fp
04820     04 A0 05 F1 | 	add	fp, #4
04824     D0 4E 02 FB | 	rdlong	local04, fp
04828     08 4E 66 F0 | 	shl	local04, #8
0482c     27 49 42 F5 | 	or	local01, local04
04830     04 A0 85 F1 | 	sub	fp, #4
04834     D0 48 62 FC | 	wrlong	local01, fp
04838     08 A0 05 F1 | 	add	fp, #8
0483c     D0 4E 02 FB | 	rdlong	local04, fp
04840     10 4E 66 F0 | 	shl	local04, #16
04844     27 49 42 F5 | 	or	local01, local04
04848     08 A0 85 F1 | 	sub	fp, #8
0484c     D0 48 62 FC | 	wrlong	local01, fp
04850                 | '             width = -width;
04850                 | '             flags &= ~( 0x3 << (22) );
04850                 | '             flags |= ( 1 << (22) );
04850                 | '             padchar =  1 ;
04850                 | '         }
04850                 | '         flags = flags | (width <<  (8) );
04850                 | '         flags = flags | (prec <<  (16) );
04850                 | '         switch (c) {
04850     10 A0 85 F1 | 	sub	fp, #16
04854     D0 5A 02 FB | 	rdlong	local10, fp
04858     10 A0 85 F1 | 	sub	fp, #16
0485c     63 5A 0E F2 | 	cmp	local10, #99 wz
04860     54 00 90 AD |  if_e	jmp	#LR__0274
04864     73 5A 0E F2 | 	cmp	local10, #115 wz
04868     84 00 90 AD |  if_e	jmp	#LR__0275
0486c     64 5A 0E F2 | 	cmp	local10, #100 wz
04870     E8 00 90 AD |  if_e	jmp	#LR__0277
04874     69 5A 0E F2 | 	cmp	local10, #105 wz
04878     E0 00 90 AD |  if_e	jmp	#LR__0278
0487c     75 5A 0E F2 | 	cmp	local10, #117 wz
04880     D8 00 90 AD |  if_e	jmp	#LR__0279
04884     6F 5A 0E F2 | 	cmp	local10, #111 wz
04888     8C 01 90 AD |  if_e	jmp	#LR__0282
0488c     78 5A 0E F2 | 	cmp	local10, #120 wz
04890     28 02 90 AD |  if_e	jmp	#LR__0284
04894     61 5A 0E F2 | 	cmp	local10, #97 wz
04898     C0 02 90 AD |  if_e	jmp	#LR__0286
0489c     65 5A 0E F2 | 	cmp	local10, #101 wz
048a0     B8 02 90 AD |  if_e	jmp	#LR__0287
048a4     66 5A 0E F2 | 	cmp	local10, #102 wz
048a8     B0 02 90 AD |  if_e	jmp	#LR__0288
048ac     67 5A 0E F2 | 	cmp	local10, #103 wz
048b0     A8 02 90 AD |  if_e	jmp	#LR__0289
048b4     F8 02 90 FD | 	jmp	#LR__0290
048b8                 | LR__0274
048b8     04 A0 05 F1 | 	add	fp, #4
048bc     D0 3E 02 FB | 	rdlong	arg01, fp
048c0     1C A0 05 F1 | 	add	fp, #28
048c4     D0 40 02 FB | 	rdlong	arg02, fp
048c8     14 A0 05 F1 | 	add	fp, #20
048cc     D0 54 02 FB | 	rdlong	local07, fp
048d0     34 A0 85 F1 | 	sub	fp, #52
048d4     2A 43 02 F6 | 	mov	arg03, local07
048d8     D4 97 B0 FD | 	call	#__system___fmtchar
048dc     0B 59 02 F6 | 	mov	local09, result1
048e0     14 A0 05 F1 | 	add	fp, #20
048e4     D0 58 62 FC | 	wrlong	local09, fp
048e8     14 A0 85 F1 | 	sub	fp, #20
048ec                 | '             q = _fmtchar(fn, flags, val);
048ec                 | '             break;
048ec     08 03 90 FD | 	jmp	#LR__0291
048f0                 | LR__0275
048f0     28 A0 05 F1 | 	add	fp, #40
048f4     D0 48 0A FB | 	rdlong	local01, fp wz
048f8     28 A0 85 F1 | 	sub	fp, #40
048fc     24 00 90 AD |  if_e	jmp	#LR__0276
04900     20 A0 05 F1 | 	add	fp, #32
04904     D0 48 02 FB | 	rdlong	local01, fp
04908     08 A0 05 F1 | 	add	fp, #8
0490c     D0 4E 02 FB | 	rdlong	local04, fp
04910     01 4E 86 F1 | 	sub	local04, #1
04914     27 49 42 F5 | 	or	local01, local04
04918     08 A0 85 F1 | 	sub	fp, #8
0491c     D0 48 62 FC | 	wrlong	local01, fp
04920     20 A0 85 F1 | 	sub	fp, #32
04924                 | LR__0276
04924     04 A0 05 F1 | 	add	fp, #4
04928     D0 3E 02 FB | 	rdlong	arg01, fp
0492c     1C A0 05 F1 | 	add	fp, #28
04930     D0 40 02 FB | 	rdlong	arg02, fp
04934     14 A0 05 F1 | 	add	fp, #20
04938     D0 54 02 FB | 	rdlong	local07, fp
0493c     34 A0 85 F1 | 	sub	fp, #52
04940     2A 43 02 F6 | 	mov	arg03, local07
04944     C8 97 B0 FD | 	call	#__system___fmtstr
04948     0B 59 02 F6 | 	mov	local09, result1
0494c     14 A0 05 F1 | 	add	fp, #20
04950     D0 58 62 FC | 	wrlong	local09, fp
04954     14 A0 85 F1 | 	sub	fp, #20
04958                 | '             break;
04958     9C 02 90 FD | 	jmp	#LR__0291
0495c                 | LR__0277
0495c                 | LR__0278
0495c                 | LR__0279
0495c     10 A0 05 F1 | 	add	fp, #16
04960     D0 48 02 FB | 	rdlong	local01, fp
04964     10 A0 85 F1 | 	sub	fp, #16
04968     75 48 0E F2 | 	cmp	local01, #117 wz
0496c     14 00 90 5D |  if_ne	jmp	#LR__0280
04970     20 A0 05 F1 | 	add	fp, #32
04974     D0 48 02 FB | 	rdlong	local01, fp
04978     3A 48 26 F4 | 	bith	local01, #58
0497c     D0 48 62 FC | 	wrlong	local01, fp
04980     20 A0 85 F1 | 	sub	fp, #32
04984                 | LR__0280
04984     28 A0 05 F1 | 	add	fp, #40
04988     D0 48 0A FB | 	rdlong	local01, fp wz
0498c     28 A0 85 F1 | 	sub	fp, #40
04990     44 00 90 5D |  if_ne	jmp	#LR__0281
04994     30 A0 05 F1 | 	add	fp, #48
04998     D0 4E 02 FB | 	rdlong	local04, fp
0499c     30 A0 85 F1 | 	sub	fp, #48
049a0     02 4E 0E F2 | 	cmp	local04, #2 wz
049a4     30 00 90 5D |  if_ne	jmp	#LR__0281
049a8     20 A0 05 F1 | 	add	fp, #32
049ac     D0 4A 02 FB | 	rdlong	local02, fp
049b0     25 49 02 F6 | 	mov	local01, local02
049b4     04 A0 05 F1 | 	add	fp, #4
049b8     D0 4C 02 FB | 	rdlong	local03, fp
049bc     26 4F 02 F6 | 	mov	local04, local03
049c0     01 4E 06 F1 | 	add	local04, #1
049c4     10 4E 66 F0 | 	shl	local04, #16
049c8     27 49 42 F5 | 	or	local01, local04
049cc     04 A0 85 F1 | 	sub	fp, #4
049d0     D0 48 62 FC | 	wrlong	local01, fp
049d4     20 A0 85 F1 | 	sub	fp, #32
049d8                 | LR__0281
049d8     04 A0 05 F1 | 	add	fp, #4
049dc     D0 3E 02 FB | 	rdlong	arg01, fp
049e0     1C A0 05 F1 | 	add	fp, #28
049e4     D0 40 02 FB | 	rdlong	arg02, fp
049e8     14 A0 05 F1 | 	add	fp, #20
049ec     D0 54 02 FB | 	rdlong	local07, fp
049f0     34 A0 85 F1 | 	sub	fp, #52
049f4     2A 43 02 F6 | 	mov	arg03, local07
049f8     0A 58 06 F6 | 	mov	local09, #10
049fc     0A 44 06 F6 | 	mov	arg04, #10
04a00     04 98 B0 FD | 	call	#__system___fmtnum
04a04     0B 51 02 F6 | 	mov	local05, result1
04a08     14 A0 05 F1 | 	add	fp, #20
04a0c     D0 50 62 FC | 	wrlong	local05, fp
04a10     14 A0 85 F1 | 	sub	fp, #20
04a14                 | '                 flags |= ((width+1)<< (16) );
04a14                 | '             }
04a14                 | '             q = _fmtnum(fn, flags, val, 10);
04a14                 | '             break;
04a14     E0 01 90 FD | 	jmp	#LR__0291
04a18                 | LR__0282
04a18     20 A0 05 F1 | 	add	fp, #32
04a1c     D0 48 02 FB | 	rdlong	local01, fp
04a20     3A 48 26 F4 | 	bith	local01, #58
04a24     D0 48 62 FC | 	wrlong	local01, fp
04a28     08 A0 05 F1 | 	add	fp, #8
04a2c     D0 48 0A FB | 	rdlong	local01, fp wz
04a30     28 A0 85 F1 | 	sub	fp, #40
04a34     44 00 90 5D |  if_ne	jmp	#LR__0283
04a38     30 A0 05 F1 | 	add	fp, #48
04a3c     D0 4E 02 FB | 	rdlong	local04, fp
04a40     30 A0 85 F1 | 	sub	fp, #48
04a44     02 4E 0E F2 | 	cmp	local04, #2 wz
04a48     30 00 90 5D |  if_ne	jmp	#LR__0283
04a4c     20 A0 05 F1 | 	add	fp, #32
04a50     D0 4A 02 FB | 	rdlong	local02, fp
04a54     25 49 02 F6 | 	mov	local01, local02
04a58     04 A0 05 F1 | 	add	fp, #4
04a5c     D0 4C 02 FB | 	rdlong	local03, fp
04a60     26 4F 02 F6 | 	mov	local04, local03
04a64     01 4E 06 F1 | 	add	local04, #1
04a68     10 4E 66 F0 | 	shl	local04, #16
04a6c     27 49 42 F5 | 	or	local01, local04
04a70     04 A0 85 F1 | 	sub	fp, #4
04a74     D0 48 62 FC | 	wrlong	local01, fp
04a78     20 A0 85 F1 | 	sub	fp, #32
04a7c                 | LR__0283
04a7c     04 A0 05 F1 | 	add	fp, #4
04a80     D0 3E 02 FB | 	rdlong	arg01, fp
04a84     1C A0 05 F1 | 	add	fp, #28
04a88     D0 40 02 FB | 	rdlong	arg02, fp
04a8c     14 A0 05 F1 | 	add	fp, #20
04a90     D0 54 02 FB | 	rdlong	local07, fp
04a94     34 A0 85 F1 | 	sub	fp, #52
04a98     2A 43 02 F6 | 	mov	arg03, local07
04a9c     08 58 06 F6 | 	mov	local09, #8
04aa0     08 44 06 F6 | 	mov	arg04, #8
04aa4     60 97 B0 FD | 	call	#__system___fmtnum
04aa8     0B 51 02 F6 | 	mov	local05, result1
04aac     14 A0 05 F1 | 	add	fp, #20
04ab0     D0 50 62 FC | 	wrlong	local05, fp
04ab4     14 A0 85 F1 | 	sub	fp, #20
04ab8                 | '                 flags |= ((width+1)<< (16) );
04ab8                 | '             }
04ab8                 | '             q = _fmtnum(fn, flags, val, 8);
04ab8                 | '             break;
04ab8     3C 01 90 FD | 	jmp	#LR__0291
04abc                 | LR__0284
04abc     28 A0 05 F1 | 	add	fp, #40
04ac0     D0 48 0A FB | 	rdlong	local01, fp wz
04ac4     28 A0 85 F1 | 	sub	fp, #40
04ac8     44 00 90 5D |  if_ne	jmp	#LR__0285
04acc     30 A0 05 F1 | 	add	fp, #48
04ad0     D0 4E 02 FB | 	rdlong	local04, fp
04ad4     30 A0 85 F1 | 	sub	fp, #48
04ad8     02 4E 0E F2 | 	cmp	local04, #2 wz
04adc     30 00 90 5D |  if_ne	jmp	#LR__0285
04ae0     20 A0 05 F1 | 	add	fp, #32
04ae4     D0 4A 02 FB | 	rdlong	local02, fp
04ae8     25 49 02 F6 | 	mov	local01, local02
04aec     04 A0 05 F1 | 	add	fp, #4
04af0     D0 4C 02 FB | 	rdlong	local03, fp
04af4     26 4F 02 F6 | 	mov	local04, local03
04af8     01 4E 06 F1 | 	add	local04, #1
04afc     10 4E 66 F0 | 	shl	local04, #16
04b00     27 49 42 F5 | 	or	local01, local04
04b04     04 A0 85 F1 | 	sub	fp, #4
04b08     D0 48 62 FC | 	wrlong	local01, fp
04b0c     20 A0 85 F1 | 	sub	fp, #32
04b10                 | LR__0285
04b10     20 A0 05 F1 | 	add	fp, #32
04b14     D0 48 02 FB | 	rdlong	local01, fp
04b18     3A 48 26 F4 | 	bith	local01, #58
04b1c     D0 48 62 FC | 	wrlong	local01, fp
04b20     1C A0 85 F1 | 	sub	fp, #28
04b24     D0 3E 02 FB | 	rdlong	arg01, fp
04b28     1C A0 05 F1 | 	add	fp, #28
04b2c     D0 40 02 FB | 	rdlong	arg02, fp
04b30     14 A0 05 F1 | 	add	fp, #20
04b34     D0 54 02 FB | 	rdlong	local07, fp
04b38     34 A0 85 F1 | 	sub	fp, #52
04b3c     10 58 06 F6 | 	mov	local09, #16
04b40     2A 43 02 F6 | 	mov	arg03, local07
04b44     10 44 06 F6 | 	mov	arg04, #16
04b48     BC 96 B0 FD | 	call	#__system___fmtnum
04b4c     14 A0 05 F1 | 	add	fp, #20
04b50     D0 16 62 FC | 	wrlong	result1, fp
04b54     14 A0 85 F1 | 	sub	fp, #20
04b58                 | '                 flags |= ((width+1)<< (16) );
04b58                 | '             }
04b58                 | '             flags |=  3  <<  (26) ;
04b58                 | '             q = _fmtnum(fn, flags, val, 16);
04b58                 | '             break;
04b58     9C 00 90 FD | 	jmp	#LR__0291
04b5c                 | LR__0286
04b5c                 | LR__0287
04b5c                 | LR__0288
04b5c                 | LR__0289
04b5c     04 A0 05 F1 | 	add	fp, #4
04b60     D0 3E 02 FB | 	rdlong	arg01, fp
04b64     1C A0 05 F1 | 	add	fp, #28
04b68     D0 4E 02 FB | 	rdlong	local04, fp
04b6c     14 A0 05 F1 | 	add	fp, #20
04b70     D0 54 02 FB | 	rdlong	local07, fp
04b74                 | '     v.i = x;
04b74                 | '     return v.f;
04b74     2A 17 02 F6 | 	mov	result1, local07
04b78     0B 59 02 F6 | 	mov	local09, result1
04b7c     24 A0 85 F1 | 	sub	fp, #36
04b80     D0 56 02 FB | 	rdlong	local08, fp
04b84     10 A0 85 F1 | 	sub	fp, #16
04b88     2B 51 02 F6 | 	mov	local05, local08
04b8c     27 41 02 F6 | 	mov	arg02, local04
04b90     2C 43 02 F6 | 	mov	arg03, local09
04b94     28 45 02 F6 | 	mov	arg04, local05
04b98     98 99 B0 FD | 	call	#__system___fmtfloat
04b9c     0B 5D 02 F6 | 	mov	local11, result1
04ba0     14 A0 05 F1 | 	add	fp, #20
04ba4     D0 5C 62 FC | 	wrlong	local11, fp
04ba8     14 A0 85 F1 | 	sub	fp, #20
04bac                 | '             q = _fmtfloat(fn, flags, _asfloat(val), c);
04bac                 | '             break;
04bac     48 00 90 FD | 	jmp	#LR__0291
04bb0                 | LR__0290
04bb0     04 A0 05 F1 | 	add	fp, #4
04bb4     D0 4A 02 FB | 	rdlong	local02, fp
04bb8     25 49 02 F6 | 	mov	local01, local02
04bbc     1C A0 05 F1 | 	add	fp, #28
04bc0     D0 4C 02 FB | 	rdlong	local03, fp
04bc4     20 A0 85 F1 | 	sub	fp, #32
04bc8     26 4F 02 F6 | 	mov	local04, local03
04bcc     89 00 00 FF 
04bd0     C9 52 06 F6 | 	mov	local06, ##@LR__1236
04bd4     29 55 02 F6 | 	mov	local07, local06
04bd8     24 3F 02 F6 | 	mov	arg01, local01
04bdc     27 41 02 F6 | 	mov	arg02, local04
04be0     2A 43 02 F6 | 	mov	arg03, local07
04be4     28 95 B0 FD | 	call	#__system___fmtstr
04be8     0B 59 02 F6 | 	mov	local09, result1
04bec     14 A0 05 F1 | 	add	fp, #20
04bf0     D0 58 62 FC | 	wrlong	local09, fp
04bf4     14 A0 85 F1 | 	sub	fp, #20
04bf8                 | '             q = _fmtstr(fn, flags, "???");
04bf8                 | '             break;
04bf8                 | LR__0291
04bf8     14 A0 05 F1 | 	add	fp, #20
04bfc     D0 48 02 FB | 	rdlong	local01, fp
04c00     14 A0 85 F1 | 	sub	fp, #20
04c04     00 48 5E F2 | 	cmps	local01, #0 wcz
04c08     10 00 90 3D |  if_ae	jmp	#LR__0292
04c0c                 | '             return q;
04c0c     14 A0 05 F1 | 	add	fp, #20
04c10     D0 16 02 FB | 	rdlong	result1, fp
04c14     14 A0 85 F1 | 	sub	fp, #20
04c18     30 00 90 FD | 	jmp	#LR__0294
04c1c                 | LR__0292
04c1c     1C A0 05 F1 | 	add	fp, #28
04c20     D0 48 02 FB | 	rdlong	local01, fp
04c24     08 A0 85 F1 | 	sub	fp, #8
04c28     D0 4C 02 FB | 	rdlong	local03, fp
04c2c     26 49 02 F1 | 	add	local01, local03
04c30     08 A0 05 F1 | 	add	fp, #8
04c34     D0 48 62 FC | 	wrlong	local01, fp
04c38     1C A0 85 F1 | 	sub	fp, #28
04c3c     A0 F8 9F FD | 	jmp	#LR__0267
04c40                 | LR__0293
04c40                 | '         }
04c40                 | '         bytes_written += q;
04c40                 | '     }
04c40                 | '     return bytes_written;
04c40     1C A0 05 F1 | 	add	fp, #28
04c44     D0 16 02 FB | 	rdlong	result1, fp
04c48     1C A0 85 F1 | 	sub	fp, #28
04c4c                 | LR__0294
04c4c     D0 F0 03 F6 | 	mov	ptra, fp
04c50     E0 00 A0 FD | 	call	#popregs_
04c54                 | __dofmt_ret
04c54     2D 00 64 FD | 	ret
04c58                 | 
04c58                 | _zdoGet4_0335
04c58     03 9C 05 F6 | 	mov	COUNT_, #3
04c5c     D1 00 A0 FD | 	call	#pushregs_
04c60                 | '     do {
04c60                 | LR__0295
04c60     00 3E 06 F6 | 	mov	arg01, #0
04c64     24 8E B0 FD | 	call	#__system___rxraw
04c68     0B 49 02 F6 | 	mov	local01, result1
04c6c     00 48 5E F2 | 	cmps	local01, #0 wcz
04c70     EC FF 9F CD |  if_b	jmp	#LR__0295
04c74                 | '     return c;
04c74     24 17 02 F6 | 	mov	result1, local01
04c78     0B 4B 02 F6 | 	mov	local02, result1
04c7c                 | '     do {
04c7c                 | LR__0296
04c7c     00 3E 06 F6 | 	mov	arg01, #0
04c80     08 8E B0 FD | 	call	#__system___rxraw
04c84     0B 49 02 F6 | 	mov	local01, result1
04c88     00 48 5E F2 | 	cmps	local01, #0 wcz
04c8c     EC FF 9F CD |  if_b	jmp	#LR__0296
04c90                 | '     return c;
04c90     24 17 02 F6 | 	mov	result1, local01
04c94     0B 4D 02 F6 | 	mov	local03, result1
04c98     08 4C 66 F0 | 	shl	local03, #8
04c9c     26 4B 42 F5 | 	or	local02, local03
04ca0                 | '     do {
04ca0                 | LR__0297
04ca0     00 3E 06 F6 | 	mov	arg01, #0
04ca4     E4 8D B0 FD | 	call	#__system___rxraw
04ca8     0B 49 02 F6 | 	mov	local01, result1
04cac     00 48 5E F2 | 	cmps	local01, #0 wcz
04cb0     EC FF 9F CD |  if_b	jmp	#LR__0297
04cb4                 | '     return c;
04cb4     24 17 02 F6 | 	mov	result1, local01
04cb8     0B 4D 02 F6 | 	mov	local03, result1
04cbc     10 4C 66 F0 | 	shl	local03, #16
04cc0     26 4B 42 F5 | 	or	local02, local03
04cc4                 | '     do {
04cc4                 | LR__0298
04cc4     00 3E 06 F6 | 	mov	arg01, #0
04cc8     C0 8D B0 FD | 	call	#__system___rxraw
04ccc     0B 49 02 F6 | 	mov	local01, result1
04cd0     00 48 5E F2 | 	cmps	local01, #0 wcz
04cd4     EC FF 9F CD |  if_b	jmp	#LR__0298
04cd8                 | '     return c;
04cd8     24 17 02 F6 | 	mov	result1, local01
04cdc     18 16 66 F0 | 	shl	result1, #24
04ce0                 | '     r = zdoGet1();
04ce0                 | '     r = r | (zdoGet1() << 8);
04ce0                 | '     r = r | (zdoGet1() << 16);
04ce0                 | '     r = r | (zdoGet1() << 24);
04ce0                 | '     return r;
04ce0     25 17 42 F5 | 	or	result1, local02
04ce4     D0 F0 03 F6 | 	mov	ptra, fp
04ce8     E0 00 A0 FD | 	call	#popregs_
04cec                 | _zdoGet4_0335_ret
04cec     2D 00 64 FD | 	ret
04cf0                 | 
04cf0                 | _plain_sendrecv_0341
04cf0     0A 9C 05 F6 | 	mov	COUNT_, #10
04cf4     D1 00 A0 FD | 	call	#pushregs_
04cf8     1F 49 02 F6 | 	mov	local01, arg01
04cfc     21 4B 02 F6 | 	mov	local02, arg03
04d00     20 4D 02 F6 | 	mov	local03, arg02
04d04     24 4D 82 F1 | 	sub	local03, local01
04d08     24 4F 02 F6 | 	mov	local04, local01
04d0c     00 50 06 F6 | 	mov	local05, #0
04d10     08 0A 06 F1 | 	add	ptr___system__dat__, #8
04d14     05 17 02 FB | 	rdlong	result1, ptr___system__dat__
04d18     0B 53 02 F6 | 	mov	local06, result1
04d1c     05 01 68 FC | 	wrlong	#0, ptr___system__dat__
04d20     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
04d24     26 55 02 F6 | 	mov	local07, local03
04d28     FF 54 06 F5 | 	and	local07, #255
04d2c     24 55 42 FC | 	wrbyte	local07, local01
04d30     26 55 EA F8 | 	getbyte	local07, local03, #1
04d34     01 48 06 F1 | 	add	local01, #1
04d38     24 55 42 FC | 	wrbyte	local07, local01
04d3c     26 55 F2 F8 | 	getbyte	local07, local03, #2
04d40     01 48 06 F1 | 	add	local01, #1
04d44     24 55 42 FC | 	wrbyte	local07, local01
04d48     26 55 FA F8 | 	getbyte	local07, local03, #3
04d4c     01 48 06 F1 | 	add	local01, #1
04d50     24 55 42 FC | 	wrbyte	local07, local01
04d54     03 48 86 F1 | 	sub	local01, #3
04d58     04 4C 5E F2 | 	cmps	local03, #4 wcz
04d5c                 | '         return -1;
04d5c     01 16 66 E6 |  if_be	neg	result1, #1
04d60     C4 00 90 ED |  if_be	jmp	#LR__0304
04d64     FF 3E 06 F6 | 	mov	arg01, #255
04d68     D8 8C B0 FD | 	call	#__system___txraw
04d6c     01 3E 06 F6 | 	mov	arg01, #1
04d70     D0 8C B0 FD | 	call	#__system___txraw
04d74                 | '     }
04d74                 | ' 
04d74                 | '     _txraw(0xff);
04d74                 | '     _txraw(0x01);
04d74                 | '     while (len>0) {
04d74                 | LR__0299
04d74     00 4C 5E F2 | 	cmps	local03, #0 wcz
04d78     14 00 90 ED |  if_be	jmp	#LR__0300
04d7c     27 3F C2 FA | 	rdbyte	arg01, local04
04d80     01 4E 06 F1 | 	add	local04, #1
04d84     BC 8C B0 FD | 	call	#__system___txraw
04d88     01 4C 86 F1 | 	sub	local03, #1
04d8c     E4 FF 9F FD | 	jmp	#LR__0299
04d90                 | LR__0300
04d90     C4 FE BF FD | 	call	#_zdoGet4_0335
04d94     0B 4D 02 F6 | 	mov	local03, result1
04d98     26 55 02 F6 | 	mov	local07, local03
04d9c     FF 54 06 F5 | 	and	local07, #255
04da0     24 55 42 FC | 	wrbyte	local07, local01
04da4     26 55 EA F8 | 	getbyte	local07, local03, #1
04da8     01 48 06 F1 | 	add	local01, #1
04dac     24 55 42 FC | 	wrbyte	local07, local01
04db0     26 55 F2 F8 | 	getbyte	local07, local03, #2
04db4     01 48 06 F1 | 	add	local01, #1
04db8     24 55 42 FC | 	wrbyte	local07, local01
04dbc     26 55 FA F8 | 	getbyte	local07, local03, #3
04dc0     01 48 06 F1 | 	add	local01, #1
04dc4     24 55 42 FC | 	wrbyte	local07, local01
04dc8     01 48 06 F1 | 	add	local01, #1
04dcc     24 4F 02 F6 | 	mov	local04, local01
04dd0     26 57 02 F6 | 	mov	local08, local03
04dd4     04 56 86 F1 | 	sub	local08, #4
04dd8                 | '         _txraw(*buf++);
04dd8                 | '         --len;
04dd8                 | '     }
04dd8                 | '     len = zdoGet4();
04dd8                 | '     startbuf[0] = len & 0xff;
04dd8                 | '     startbuf[1] = (len>>8) & 0xff;
04dd8                 | '     startbuf[2] = (len>>16) & 0xff;
04dd8                 | '     startbuf[3] = (len>>24) & 0xff;
04dd8                 | '     buf = startbuf+4;
04dd8                 | '     left = len - 4;
04dd8                 | '     while (left > 0 && i < maxlen) {
04dd8                 | LR__0301
04dd8     00 56 5E F2 | 	cmps	local08, #0 wcz
04ddc     38 00 90 ED |  if_be	jmp	#LR__0303
04de0     25 51 5A F2 | 	cmps	local05, local02 wcz
04de4     30 00 90 3D |  if_ae	jmp	#LR__0303
04de8     28 59 02 F6 | 	mov	local09, local05
04dec     27 59 02 F1 | 	add	local09, local04
04df0     01 50 06 F1 | 	add	local05, #1
04df4                 | '     do {
04df4                 | LR__0302
04df4     00 3E 06 F6 | 	mov	arg01, #0
04df8     90 8C B0 FD | 	call	#__system___rxraw
04dfc     0B 5B 02 F6 | 	mov	local10, result1
04e00     00 5A 5E F2 | 	cmps	local10, #0 wcz
04e04     EC FF 9F CD |  if_b	jmp	#LR__0302
04e08                 | '     return c;
04e08     2D 17 02 F6 | 	mov	result1, local10
04e0c     2C 17 42 FC | 	wrbyte	result1, local09
04e10     01 56 86 F1 | 	sub	local08, #1
04e14     C0 FF 9F FD | 	jmp	#LR__0301
04e18                 | LR__0303
04e18     08 0A 06 F1 | 	add	ptr___system__dat__, #8
04e1c     05 53 62 FC | 	wrlong	local06, ptr___system__dat__
04e20     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
04e24                 | '         buf[i++] = zdoGet1();
04e24                 | '         --left;
04e24                 | '     }
04e24                 | '     _setrxtxflags(flags);
04e24                 | '     return len;
04e24     26 17 02 F6 | 	mov	result1, local03
04e28                 | LR__0304
04e28     D0 F0 03 F6 | 	mov	ptra, fp
04e2c     E0 00 A0 FD | 	call	#popregs_
04e30                 | _plain_sendrecv_0341_ret
04e30     2D 00 64 FD | 	ret
04e34                 | 
04e34                 | ___default_filbuf
04e34     06 9C 05 F6 | 	mov	COUNT_, #6
04e38     D1 00 A0 FD | 	call	#pushregs_
04e3c     1F 49 02 FB | 	rdlong	local01, arg01
04e40     10 3E 06 F1 | 	add	arg01, #16
04e44     1F 4B 02 FB | 	rdlong	local02, arg01
04e48     10 3E 86 F1 | 	sub	arg01, #16
04e4c     25 4D 02 FB | 	rdlong	local03, local02
04e50     04 4A 06 F1 | 	add	local02, #4
04e54     25 4F 02 FB | 	rdlong	local04, local02
04e58     0C 48 06 F1 | 	add	local01, #12
04e5c     24 41 02 F6 | 	mov	arg02, local01
04e60     0C 48 86 F1 | 	sub	local01, #12
04e64     0A 42 C6 F9 | 	decod	arg03, #10
04e68     FE 50 02 F6 | 	mov	local05, objptr
04e6c     26 FD 01 F6 | 	mov	objptr, local03
04e70     2D 4E 62 FD | 	call	local04
04e74     28 FD 01 F6 | 	mov	objptr, local05
04e78     0B 53 02 F6 | 	mov	local06, result1
04e7c     00 52 5E F2 | 	cmps	local06, #0 wcz
04e80                 | '         return -1;
04e80     01 16 66 C6 |  if_b	neg	result1, #1
04e84     28 00 90 CD |  if_b	jmp	#LR__0305
04e88     24 53 62 FC | 	wrlong	local06, local01
04e8c     0C 48 06 F1 | 	add	local01, #12
04e90     24 4B 02 F6 | 	mov	local02, local01
04e94     08 48 86 F1 | 	sub	local01, #8
04e98     24 4B 62 FC | 	wrlong	local02, local01
04e9c     04 48 06 F1 | 	add	local01, #4
04ea0     24 4B 02 FB | 	rdlong	local02, local01
04ea4     01 4A 46 F5 | 	or	local02, #1
04ea8     24 4B 62 FC | 	wrlong	local02, local01
04eac                 | '     }
04eac                 | '     b->cnt = r;
04eac                 | '     b->ptr = &b->buf[0];
04eac                 | '     b->flags |=  (0x01) ;
04eac                 | '     return r;
04eac     29 17 02 F6 | 	mov	result1, local06
04eb0                 | LR__0305
04eb0     D0 F0 03 F6 | 	mov	ptra, fp
04eb4     E0 00 A0 FD | 	call	#popregs_
04eb8                 | ___default_filbuf_ret
04eb8     2D 00 64 FD | 	ret
04ebc                 | 
04ebc                 | __strerror
04ebc     00 3E 5E F2 | 	cmps	arg01, #0 wcz
04ec0     08 00 90 CD |  if_b	jmp	#LR__0306
04ec4     15 3E 5E F2 | 	cmps	arg01, #21 wcz
04ec8     04 00 90 CD |  if_b	jmp	#LR__0307
04ecc                 | LR__0306
04ecc     14 3E 06 F6 | 	mov	arg01, #20
04ed0                 | LR__0307
04ed0                 | '     return _sys_errlist[errnum];
04ed0     02 3E 66 F0 | 	shl	arg01, #2
04ed4     04 00 00 FF 
04ed8     78 0D 06 F1 | 	add	ptr__dat__, ##2424
04edc     06 3F 02 F1 | 	add	arg01, ptr__dat__
04ee0     1F 17 02 FB | 	rdlong	result1, arg01
04ee4     04 00 00 FF 
04ee8     78 0D 86 F1 | 	sub	ptr__dat__, ##2424
04eec                 | __strerror_ret
04eec     2D 00 64 FD | 	ret
04ef0                 | 
04ef0                 | _parseint_0903
04ef0     1F 29 02 F6 | 	mov	_var01, arg01
04ef4     20 2B 02 F6 | 	mov	_var02, arg02
04ef8     14 2D 02 FB | 	rdlong	_var03, _var01
04efc     00 2E 06 F6 | 	mov	_var04, #0
04f00     16 31 C2 FA | 	rdbyte	_var05, _var03
04f04     2A 30 0E F2 | 	cmp	_var05, #42 wz
04f08     18 00 90 5D |  if_ne	jmp	#LR__0308
04f0c     15 33 02 FB | 	rdlong	_var06, _var02
04f10     19 2F 02 FB | 	rdlong	_var04, _var06
04f14     04 32 06 F1 | 	add	_var06, #4
04f18     15 33 62 FC | 	wrlong	_var06, _var02
04f1c     01 2C 06 F1 | 	add	_var03, #1
04f20     38 00 90 FD | 	jmp	#LR__0311
04f24                 | LR__0308
04f24                 | '         while ( (c>='0') && (c<='9') ) {
04f24                 | LR__0309
04f24     30 30 5E F2 | 	cmps	_var05, #48 wcz
04f28     30 00 90 CD |  if_b	jmp	#LR__0310
04f2c     39 30 5E F2 | 	cmps	_var05, #57 wcz
04f30     28 00 90 1D |  if_a	jmp	#LR__0310
04f34     17 35 02 F6 | 	mov	_var07, _var04
04f38     02 34 66 F0 | 	shl	_var07, #2
04f3c     17 35 02 F1 | 	add	_var07, _var04
04f40     01 34 66 F0 | 	shl	_var07, #1
04f44     30 30 86 F1 | 	sub	_var05, #48
04f48     18 35 02 F1 | 	add	_var07, _var05
04f4c     1A 2F 02 F6 | 	mov	_var04, _var07
04f50     01 2C 06 F1 | 	add	_var03, #1
04f54     16 31 C2 FA | 	rdbyte	_var05, _var03
04f58     C8 FF 9F FD | 	jmp	#LR__0309
04f5c                 | LR__0310
04f5c                 | LR__0311
04f5c     14 2D 62 FC | 	wrlong	_var03, _var01
04f60                 | '             r = 10*r + (c-'0');
04f60                 | '             c = *++fmt;
04f60                 | '         }
04f60                 | '     }
04f60                 | '     *fmt_p = fmt;
04f60                 | '     return r;
04f60     17 17 02 F6 | 	mov	result1, _var04
04f64                 | _parseint_0903_ret
04f64     2D 00 64 FD | 	ret
04f68                 | 
04f68                 | _parseflags_0910
04f68     1F 29 02 F6 | 	mov	_var01, arg01
04f6c     20 2B 02 F6 | 	mov	_var02, arg02
04f70     00 2C 06 F6 | 	mov	_var03, #0
04f74     01 2E 06 F6 | 	mov	_var04, #1
04f78     00 30 06 F6 | 	mov	_var05, #0
04f7c     02 32 06 F6 | 	mov	_var06, #2
04f80     00 34 06 F6 | 	mov	_var07, #0
04f84                 | ' 
04f84                 | '     while (!done) {
04f84                 | LR__0312
04f84     00 34 0E F2 | 	cmp	_var07, #0 wz
04f88     64 00 90 5D |  if_ne	jmp	#LR__0319
04f8c     14 37 C2 FA | 	rdbyte	_var08, _var01
04f90                 | '         c = *fmt++;
04f90                 | '         switch (c) {
04f90     2D 36 0E F2 | 	cmp	_var08, #45 wz
04f94     01 28 06 F1 | 	add	_var01, #1
04f98     24 00 90 AD |  if_e	jmp	#LR__0313
04f9c     23 36 0E F2 | 	cmp	_var08, #35 wz
04fa0     24 00 90 AD |  if_e	jmp	#LR__0314
04fa4     2B 36 0E F2 | 	cmp	_var08, #43 wz
04fa8     24 00 90 AD |  if_e	jmp	#LR__0315
04fac     30 36 0E F2 | 	cmp	_var08, #48 wz
04fb0     24 00 90 AD |  if_e	jmp	#LR__0316
04fb4     20 36 0E F2 | 	cmp	_var08, #32 wz
04fb8     24 00 90 AD |  if_e	jmp	#LR__0317
04fbc     28 00 90 FD | 	jmp	#LR__0318
04fc0                 | LR__0313
04fc0     01 32 06 F6 | 	mov	_var06, #1
04fc4                 | '             justify =  1 ;
04fc4                 | '             break;
04fc4     BC FF 9F FD | 	jmp	#LR__0312
04fc8                 | LR__0314
04fc8     1C 2C 46 F5 | 	or	_var03, #28
04fcc                 | '             flags |=  (28) ;
04fcc                 | '             break;
04fcc     B4 FF 9F FD | 	jmp	#LR__0312
04fd0                 | LR__0315
04fd0     01 30 06 F6 | 	mov	_var05, #1
04fd4                 | '             signchar =  1 ;
04fd4                 | '             break;
04fd4     AC FF 9F FD | 	jmp	#LR__0312
04fd8                 | LR__0316
04fd8     02 2E 06 F6 | 	mov	_var04, #2
04fdc                 | '             padchar =  2 ;
04fdc                 | '             break;
04fdc     A4 FF 9F FD | 	jmp	#LR__0312
04fe0                 | LR__0317
04fe0     01 2E 06 F6 | 	mov	_var04, #1
04fe4                 | '             padchar =  1 ;
04fe4                 | '             break;
04fe4     9C FF 9F FD | 	jmp	#LR__0312
04fe8                 | LR__0318
04fe8     01 34 06 F6 | 	mov	_var07, #1
04fec                 | '             done = 1;
04fec                 | '             break;
04fec     94 FF 9F FD | 	jmp	#LR__0312
04ff0                 | LR__0319
04ff0     18 2E 66 F0 | 	shl	_var04, #24
04ff4     17 2D 42 F5 | 	or	_var03, _var04
04ff8     1A 30 66 F0 | 	shl	_var05, #26
04ffc     18 2D 42 F5 | 	or	_var03, _var05
05000     16 32 66 F0 | 	shl	_var06, #22
05004     19 2D 42 F5 | 	or	_var03, _var06
05008     15 2D 62 FC | 	wrlong	_var03, _var02
0500c                 | '         }
0500c                 | '     }
0500c                 | '     flags |= (padchar <<  (24) );
0500c                 | '     flags |= (signchar <<  (26) );
0500c                 | '     flags |= (justify <<  (22) );
0500c                 | '     *flag_p = flags;
0500c                 | '     return fmt-1;
0500c     01 28 86 F1 | 	sub	_var01, #1
05010     14 17 02 F6 | 	mov	result1, _var01
05014                 | _parseflags_0910_ret
05014     2D 00 64 FD | 	ret
05018                 | 
05018                 | _parsesize_0914
05018     20 29 02 F6 | 	mov	_var01, arg02
0501c     04 2A 06 F6 | 	mov	_var02, #4
05020     00 2C 06 F6 | 	mov	_var03, #0
05024     1F 2F 02 F6 | 	mov	_var04, arg01
05028     1F 31 02 F6 | 	mov	_var05, arg01
0502c     01 30 06 F1 | 	add	_var05, #1
05030     18 33 02 F6 | 	mov	_var06, _var05
05034     17 35 C2 FA | 	rdbyte	_var07, _var04
05038                 | '     c = *fmt++;
05038                 | ' 
05038                 | '     switch (c) {
05038     1A 37 02 F6 | 	mov	_var08, _var07
0503c     6C 36 0E F2 | 	cmp	_var08, #108 wz
05040     2C 00 90 AD |  if_e	jmp	#LR__0320
05044     68 36 0E F2 | 	cmp	_var08, #104 wz
05048     3C 00 90 AD |  if_e	jmp	#LR__0321
0504c     6A 36 0E F2 | 	cmp	_var08, #106 wz
05050     4C 00 90 AD |  if_e	jmp	#LR__0322
05054     7A 36 0E F2 | 	cmp	_var08, #122 wz
05058     4C 00 90 AD |  if_e	jmp	#LR__0323
0505c     74 36 0E F2 | 	cmp	_var08, #116 wz
05060     44 00 90 AD |  if_e	jmp	#LR__0324
05064     4C 36 0E F2 | 	cmp	_var08, #76 wz
05068     44 00 90 AD |  if_e	jmp	#LR__0325
0506c     48 00 90 FD | 	jmp	#LR__0326
05070                 | LR__0320
05070     04 2A 06 F6 | 	mov	_var02, #4
05074     19 39 C2 FA | 	rdbyte	_var09, _var06
05078     6C 38 0E F2 | 	cmp	_var09, #108 wz
0507c     08 2A 06 A6 |  if_e	mov	_var02, #8
05080     01 32 06 A1 |  if_e	add	_var06, #1
05084                 | '             fmt++;
05084                 | '         }
05084                 | '         break;
05084     3C 00 90 FD | 	jmp	#LR__0327
05088                 | LR__0321
05088     02 2A 06 F6 | 	mov	_var02, #2
0508c     19 39 C2 FA | 	rdbyte	_var09, _var06
05090     68 38 0E F2 | 	cmp	_var09, #104 wz
05094     01 2A 06 A6 |  if_e	mov	_var02, #1
05098     01 32 06 A1 |  if_e	add	_var06, #1
0509c                 | '             fmt++;
0509c                 | '         }
0509c                 | '         break;
0509c     24 00 90 FD | 	jmp	#LR__0327
050a0                 | LR__0322
050a0     08 2A 06 F6 | 	mov	_var02, #8
050a4                 | '         break;
050a4     1C 00 90 FD | 	jmp	#LR__0327
050a8                 | LR__0323
050a8                 | LR__0324
050a8     04 2A 06 F6 | 	mov	_var02, #4
050ac                 | '         break;
050ac     14 00 90 FD | 	jmp	#LR__0327
050b0                 | LR__0325
050b0     08 2A 06 F6 | 	mov	_var02, #8
050b4                 | '         longflag = 1;
050b4                 | '         break;
050b4     0C 00 90 FD | 	jmp	#LR__0327
050b8                 | LR__0326
050b8     19 39 02 F6 | 	mov	_var09, _var06
050bc     01 38 86 F1 | 	sub	_var09, #1
050c0     1C 33 02 F6 | 	mov	_var06, _var09
050c4                 | ' 
050c4                 | '         --fmt;
050c4                 | '         break;
050c4                 | LR__0327
050c4     14 2B 62 FC | 	wrlong	_var02, _var01
050c8                 | '     }
050c8                 | '     *size_p = size;
050c8                 | '     return fmt;
050c8     19 17 02 F6 | 	mov	result1, _var06
050cc                 | _parsesize_0914_ret
050cc     2D 00 64 FD | 	ret
050d0                 | 
050d0                 | _fs9p_internal_cc_strncmp
050d0     1F 29 0A F6 | 	mov	_var01, arg01 wz
050d4     20 2B 02 F6 | 	mov	_var02, arg02
050d8     21 2D 02 F6 | 	mov	_var03, arg03
050dc     14 00 90 5D |  if_ne	jmp	#LR__0328
050e0                 | ' 		return scan2 ? -1 : 0;
050e0     00 2A 0E F2 | 	cmp	_var02, #0 wz
050e4     01 2E 66 56 |  if_ne	neg	_var04, #1
050e8     00 2E 06 A6 |  if_e	mov	_var04, #0
050ec     17 17 02 F6 | 	mov	result1, _var04
050f0     8C 00 90 FD | 	jmp	#_fs9p_internal_cc_strncmp_ret
050f4                 | LR__0328
050f4     00 2A 0E F2 | 	cmp	_var02, #0 wz
050f8     01 16 06 A6 |  if_e	mov	result1, #1
050fc     80 00 90 AD |  if_e	jmp	#_fs9p_internal_cc_strncmp_ret
05100     16 31 02 F6 | 	mov	_var05, _var03
05104     38 AF 9F FE | 	loc	pa,	#(@LR__0330-@LR__0329)
05108     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0510c                 | ' 	count = n;
0510c                 | ' 	do {
0510c                 | LR__0329
0510c     14 33 C2 FA | 	rdbyte	_var06, _var01
05110     15 35 02 F6 | 	mov	_var07, _var02
05114     15 37 02 F6 | 	mov	_var08, _var02
05118     01 36 06 F1 | 	add	_var08, #1
0511c     1B 2B 02 F6 | 	mov	_var02, _var08
05120     1A 39 C2 FA | 	rdbyte	_var09, _var07
05124     18 2F 02 F6 | 	mov	_var04, _var05
05128     01 2E 86 F1 | 	sub	_var04, #1
0512c     17 31 02 F6 | 	mov	_var05, _var04
05130     00 30 5E F2 | 	cmps	_var05, #0 wcz
05134     01 28 06 F1 | 	add	_var01, #1
05138     10 00 90 CD |  if_b	jmp	#LR__0331
0513c     00 32 0E F2 | 	cmp	_var06, #0 wz
05140     08 00 90 AD |  if_e	jmp	#LR__0331
05144     1C 33 0A F2 | 	cmp	_var06, _var09 wz
05148     C0 FF 9F AD |  if_e	jmp	#LR__0329
0514c                 | LR__0330
0514c                 | LR__0331
0514c     00 30 5E F2 | 	cmps	_var05, #0 wcz
05150                 | ' 		return(0);
05150     00 16 06 C6 |  if_b	mov	result1, #0
05154     28 00 90 CD |  if_b	jmp	#_fs9p_internal_cc_strncmp_ret
05158     1C 33 0A F2 | 	cmp	_var06, _var09 wz
0515c                 | ' 		return(0);
0515c     00 16 06 A6 |  if_e	mov	result1, #0
05160     1C 00 90 AD |  if_e	jmp	#_fs9p_internal_cc_strncmp_ret
05164     00 32 0E F2 | 	cmp	_var06, #0 wz
05168                 | ' 		return(-1);
05168     01 16 66 A6 |  if_e	neg	result1, #1
0516c     10 00 90 AD |  if_e	jmp	#_fs9p_internal_cc_strncmp_ret
05170     00 38 0E F2 | 	cmp	_var09, #0 wz
05174                 | ' 		return(1);
05174     01 16 06 A6 |  if_e	mov	result1, #1
05178                 | ' 		return(c1 - c2);
05178     19 17 02 56 |  if_ne	mov	result1, _var06
0517c     1C 17 82 51 |  if_ne	sub	result1, _var09
05180                 | _fs9p_internal_cc_strncmp_ret
05180     2D 00 64 FD | 	ret
05184                 | 
05184                 | _fs9p_internal_cc_strrchr
05184     00 28 06 F6 | 	mov	_var01, #0
05188     90 AE 9F FE | 	loc	pa,	#(@LR__0333-@LR__0332)
0518c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
05190                 | ' 
05190                 | ' 	place =  (0) ;
05190                 | ' 	while ((c = *s++) != 0)
05190                 | LR__0332
05190     1F 2B CA FA | 	rdbyte	_var02, arg01 wz
05194     01 3E 06 F1 | 	add	arg01, #1
05198     10 00 90 AD |  if_e	jmp	#LR__0334
0519c     20 2B 0A F2 | 	cmp	_var02, arg02 wz
051a0     1F 29 02 A6 |  if_e	mov	_var01, arg01
051a4     01 28 86 A1 |  if_e	sub	_var01, #1
051a8     E4 FF 9F FD | 	jmp	#LR__0332
051ac                 | LR__0333
051ac                 | LR__0334
051ac     00 40 0E F2 | 	cmp	arg02, #0 wz
051b0     01 3E 86 A1 |  if_e	sub	arg01, #1
051b4     1F 29 02 A6 |  if_e	mov	_var01, arg01
051b8                 | ' 		place = (--s);
051b8                 | ' 	return (char *)place;
051b8     14 17 02 F6 | 	mov	result1, _var01
051bc                 | _fs9p_internal_cc_strrchr_ret
051bc     2D 00 64 FD | 	ret
051c0                 | 
051c0                 | _fs9p_internal_cc_fs_init
051c0     0A 9C 05 F6 | 	mov	COUNT_, #10
051c4     D1 00 A0 FD | 	call	#pushregs_
051c8     1F 49 02 F6 | 	mov	local01, arg01
051cc     04 00 00 FF 
051d0     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
051d4     08 49 62 FC | 	wrlong	local01, ptr__fs9p_internal_cc_dat__
051d8     04 00 00 FF 
051dc     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
051e0     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
051e4     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
051e8     00 40 06 F6 | 	mov	arg02, #0
051ec     3C 02 B0 FD | 	call	#_fs9p_internal_cc_doPut4_0192
051f0     64 40 06 F6 | 	mov	arg02, #100
051f4     0B C9 48 FC | 	wrbyte	#100, result1
051f8                 | '     *ptr++ = x;
051f8                 | '     return ptr;
051f8     01 16 06 F1 | 	add	result1, #1
051fc     0B 3F 02 F6 | 	mov	arg01, result1
05200     0F 40 CE F9 | 	bmask	arg02, #15
05204     EC 01 B0 FD | 	call	#_fs9p_internal_cc_doPut2_0191
05208     0B 3F 02 F6 | 	mov	arg01, result1
0520c     02 00 00 FF 
05210     18 40 06 F6 | 	mov	arg02, ##1048
05214     14 02 B0 FD | 	call	#_fs9p_internal_cc_doPut4_0192
05218     0B 3F 02 F6 | 	mov	arg01, result1
0521c     89 00 00 FF 
05220     CD 40 06 F6 | 	mov	arg02, ##@LR__1237
05224     54 02 B0 FD | 	call	#_fs9p_internal_cc_doPutStr_0195
05228     0B 41 02 F6 | 	mov	arg02, result1
0522c     24 4B 02 FB | 	rdlong	local02, local01
05230     04 48 06 F1 | 	add	local01, #4
05234     24 4D 02 FB | 	rdlong	local03, local01
05238     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
0523c     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05240     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05244     02 00 00 FF 
05248     18 42 06 F6 | 	mov	arg03, ##1048
0524c     FE 4E 02 F6 | 	mov	local04, objptr
05250     25 FD 01 F6 | 	mov	objptr, local02
05254     2D 4C 62 FD | 	call	local03
05258     27 FD 01 F6 | 	mov	objptr, local04
0525c     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05260     08 51 02 F6 | 	mov	local05, ptr__fs9p_internal_cc_dat__
05264     04 50 06 F1 | 	add	local05, #4
05268     28 53 C2 FA | 	rdbyte	local06, local05
0526c     65 52 0E F2 | 	cmp	local06, #101 wz
05270                 | '         return - 12 ;
05270     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05274     0C 16 66 56 |  if_ne	neg	result1, #12
05278     6C 01 90 5D |  if_ne	jmp	#LR__0339
0527c     28 3F 02 F6 | 	mov	arg01, local05
05280     01 3E 06 F1 | 	add	arg01, #1
05284     1F 17 C2 FA | 	rdbyte	result1, arg01
05288     01 3E 06 F1 | 	add	arg01, #1
0528c     1F 55 C2 FA | 	rdbyte	local07, arg01
05290     08 54 66 F0 | 	shl	local07, #8
05294     2A 17 42 F5 | 	or	result1, local07
05298                 | '     r = b[0];
05298                 | '     r |= (b[1]<<8);
05298                 | '     return r;
05298     28 3F 02 F6 | 	mov	arg01, local05
0529c     03 3E 06 F1 | 	add	arg01, #3
052a0     64 02 B0 FD | 	call	#_fs9p_internal_cc_FETCH4_0199
052a4     0B 57 02 F6 | 	mov	local08, result1
052a8     28 3F 02 F6 | 	mov	arg01, local05
052ac     07 3E 06 F1 | 	add	arg01, #7
052b0     1F 17 C2 FA | 	rdbyte	result1, arg01
052b4     01 3E 06 F1 | 	add	arg01, #1
052b8     1F 55 C2 FA | 	rdbyte	local07, arg01
052bc     08 54 66 F0 | 	shl	local07, #8
052c0     2A 17 42 F5 | 	or	result1, local07
052c4                 | '     r = b[0];
052c4                 | '     r |= (b[1]<<8);
052c4                 | '     return r;
052c4     06 16 0E F2 | 	cmp	result1, #6 wz
052c8     20 00 90 5D |  if_ne	jmp	#LR__0335
052cc     09 50 06 F1 | 	add	local05, #9
052d0     89 00 00 FF 
052d4     D4 40 06 F6 | 	mov	arg02, ##@LR__1238
052d8     28 3F 02 F6 | 	mov	arg01, local05
052dc     06 42 06 F6 | 	mov	arg03, #6
052e0     EC FD BF FD | 	call	#_fs9p_internal_cc_strncmp
052e4     0B 59 0A F6 | 	mov	local09, result1 wz
052e8     08 00 90 AD |  if_e	jmp	#LR__0336
052ec                 | LR__0335
052ec                 | ' #line 116 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
052ec                 | '         return - 12 ;
052ec     0C 16 66 F6 | 	neg	result1, #12
052f0     F4 00 90 FD | 	jmp	#LR__0339
052f4                 | LR__0336
052f4     40 56 1E F2 | 	cmp	local08, #64 wcz
052f8     0C 00 90 CD |  if_b	jmp	#LR__0337
052fc     02 00 00 FF 
05300     18 56 1E F2 | 	cmp	local08, ##1048 wcz
05304     08 00 90 ED |  if_be	jmp	#LR__0338
05308                 | LR__0337
05308                 | ' #line 122 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05308                 | '         return -1;
05308     01 16 66 F6 | 	neg	result1, #1
0530c     D8 00 90 FD | 	jmp	#LR__0339
05310                 | LR__0338
05310     08 57 62 FC | 	wrlong	local08, ptr__fs9p_internal_cc_dat__
05314     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05318     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
0531c     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05320     00 40 06 F6 | 	mov	arg02, #0
05324     04 01 B0 FD | 	call	#_fs9p_internal_cc_doPut4_0192
05328     68 40 06 F6 | 	mov	arg02, #104
0532c     0B D1 48 FC | 	wrbyte	#104, result1
05330                 | '     *ptr++ = x;
05330                 | '     return ptr;
05330     01 16 06 F1 | 	add	result1, #1
05334     0B 3F 02 F6 | 	mov	arg01, result1
05338     0F 40 CE F9 | 	bmask	arg02, #15
0533c     B4 00 B0 FD | 	call	#_fs9p_internal_cc_doPut2_0191
05340     0B 3F 02 F6 | 	mov	arg01, result1
05344     02 00 00 FF 
05348     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
0534c     08 41 02 F6 | 	mov	arg02, ptr__fs9p_internal_cc_dat__
05350     02 00 00 FF 
05354     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
05358     D0 00 B0 FD | 	call	#_fs9p_internal_cc_doPut4_0192
0535c     0B 3F 02 F6 | 	mov	arg01, result1
05360     01 40 66 F6 | 	neg	arg02, #1
05364     C4 00 B0 FD | 	call	#_fs9p_internal_cc_doPut4_0192
05368     0B 3F 02 F6 | 	mov	arg01, result1
0536c     89 00 00 FF 
05370     DB 40 06 F6 | 	mov	arg02, ##@LR__1239
05374     04 01 B0 FD | 	call	#_fs9p_internal_cc_doPutStr_0195
05378     0B 3F 02 F6 | 	mov	arg01, result1
0537c     89 00 00 FF 
05380     E0 40 06 F6 | 	mov	arg02, ##@LR__1240
05384     F4 00 B0 FD | 	call	#_fs9p_internal_cc_doPutStr_0195
05388     0B 41 02 F6 | 	mov	arg02, result1
0538c     04 00 00 FF 
05390     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
05394     08 53 02 FB | 	rdlong	local06, ptr__fs9p_internal_cc_dat__
05398     29 4B 02 FB | 	rdlong	local02, local06
0539c     04 52 06 F1 | 	add	local06, #4
053a0     29 4D 02 FB | 	rdlong	local03, local06
053a4     04 00 00 FF 
053a8     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
053ac     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
053b0     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
053b4     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
053b8     FE 5A 02 F6 | 	mov	local10, objptr
053bc     25 FD 01 F6 | 	mov	objptr, local02
053c0     2D 4C 62 FD | 	call	local03
053c4     2D FD 01 F6 | 	mov	objptr, local10
053c8     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
053cc     08 51 02 F6 | 	mov	local05, ptr__fs9p_internal_cc_dat__
053d0     04 50 06 F1 | 	add	local05, #4
053d4     28 53 C2 FA | 	rdbyte	local06, local05
053d8     69 52 0E F2 | 	cmp	local06, #105 wz
053dc                 | ' #line 142 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
053dc                 | '         return - 10 ;
053dc     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
053e0     0A 16 66 56 |  if_ne	neg	result1, #10
053e4                 | '     }
053e4                 | ' #line 147 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
053e4                 | '     return 0;
053e4     00 16 06 A6 |  if_e	mov	result1, #0
053e8                 | LR__0339
053e8     D0 F0 03 F6 | 	mov	ptra, fp
053ec     E0 00 A0 FD | 	call	#popregs_
053f0                 | _fs9p_internal_cc_fs_init_ret
053f0     2D 00 64 FD | 	ret
053f4                 | 
053f4                 | _fs9p_internal_cc_doPut2_0191
053f4     01 9C 05 F6 | 	mov	COUNT_, #1
053f8     D1 00 A0 FD | 	call	#pushregs_
053fc     20 49 02 F6 | 	mov	local01, arg02
05400     FF 40 06 F5 | 	and	arg02, #255
05404     1F 41 42 FC | 	wrbyte	arg02, arg01
05408                 | '     *ptr++ = x;
05408                 | '     return ptr;
05408     01 3E 06 F1 | 	add	arg01, #1
0540c     08 48 46 F0 | 	shr	local01, #8
05410     FF 48 06 F5 | 	and	local01, #255
05414     1F 49 42 FC | 	wrbyte	local01, arg01
05418                 | '     *ptr++ = x;
05418                 | '     return ptr;
05418     01 3E 06 F1 | 	add	arg01, #1
0541c     1F 17 02 F6 | 	mov	result1, arg01
05420                 | '     ptr = doPut1(ptr, x & 0xff);
05420                 | '     ptr = doPut1(ptr, (x>>8) & 0xff);
05420                 | '     return ptr;
05420     D0 F0 03 F6 | 	mov	ptra, fp
05424     E0 00 A0 FD | 	call	#popregs_
05428                 | _fs9p_internal_cc_doPut2_0191_ret
05428     2D 00 64 FD | 	ret
0542c                 | 
0542c                 | _fs9p_internal_cc_doPut4_0192
0542c     01 9C 05 F6 | 	mov	COUNT_, #1
05430     D1 00 A0 FD | 	call	#pushregs_
05434     20 49 02 F6 | 	mov	local01, arg02
05438     FF 40 06 F5 | 	and	arg02, #255
0543c     1F 41 42 FC | 	wrbyte	arg02, arg01
05440                 | '     *ptr++ = x;
05440                 | '     return ptr;
05440     01 3E 06 F1 | 	add	arg01, #1
05444     24 41 EA F8 | 	getbyte	arg02, local01, #1
05448     1F 41 42 FC | 	wrbyte	arg02, arg01
0544c                 | '     *ptr++ = x;
0544c                 | '     return ptr;
0544c     01 3E 06 F1 | 	add	arg01, #1
05450     24 41 F2 F8 | 	getbyte	arg02, local01, #2
05454     1F 41 42 FC | 	wrbyte	arg02, arg01
05458                 | '     *ptr++ = x;
05458                 | '     return ptr;
05458     01 3E 06 F1 | 	add	arg01, #1
0545c     18 48 46 F0 | 	shr	local01, #24
05460     FF 48 06 F5 | 	and	local01, #255
05464     1F 49 42 FC | 	wrbyte	local01, arg01
05468                 | '     *ptr++ = x;
05468                 | '     return ptr;
05468     01 3E 06 F1 | 	add	arg01, #1
0546c     1F 17 02 F6 | 	mov	result1, arg01
05470                 | '     ptr = doPut1(ptr, x & 0xff);
05470                 | '     ptr = doPut1(ptr, (x>>8) & 0xff);
05470                 | '     ptr = doPut1(ptr, (x>>16) & 0xff);
05470                 | '     ptr = doPut1(ptr, (x>>24) & 0xff);
05470                 | '     return ptr;
05470     D0 F0 03 F6 | 	mov	ptra, fp
05474     E0 00 A0 FD | 	call	#popregs_
05478                 | _fs9p_internal_cc_doPut4_0192_ret
05478     2D 00 64 FD | 	ret
0547c                 | 
0547c                 | _fs9p_internal_cc_doPutStr_0195
0547c     08 9C 05 F6 | 	mov	COUNT_, #8
05480     D1 00 A0 FD | 	call	#pushregs_
05484     1F 49 02 F6 | 	mov	local01, arg01
05488     20 4B 02 F6 | 	mov	local02, arg02
0548c     25 3F 02 F6 | 	mov	arg01, local02
05490     00 4C 06 F6 | 	mov	local03, #0
05494     78 AB 9F FE | 	loc	pa,	#(@LR__0341-@LR__0340)
05498     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0549c                 | LR__0340
0549c     1F 4F CA FA | 	rdbyte	local04, arg01 wz
054a0     01 4C 06 51 |  if_ne	add	local03, #1
054a4     01 3E 06 51 |  if_ne	add	arg01, #1
054a8     F0 FF 9F 5D |  if_ne	jmp	#LR__0340
054ac                 | LR__0341
054ac     26 17 02 F6 | 	mov	result1, local03
054b0     0B 51 02 F6 | 	mov	local05, result1
054b4     24 3F 02 F6 | 	mov	arg01, local01
054b8     28 41 02 F6 | 	mov	arg02, local05
054bc     34 FF BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
054c0     0B 49 02 F6 | 	mov	local01, result1
054c4                 | '     ptr = doPut2(ptr, L);
054c4                 | '     for (i = 0; i < L; i++) {
054c4     00 52 06 F6 | 	mov	local06, #0
054c8     5C AB 9F FE | 	loc	pa,	#(@LR__0343-@LR__0342)
054cc     B4 00 A0 FD | 	call	#FCACHE_LOAD_
054d0                 | LR__0342
054d0     28 53 1A F2 | 	cmp	local06, local05 wcz
054d4     20 00 90 3D |  if_ae	jmp	#LR__0344
054d8     25 55 02 F6 | 	mov	local07, local02
054dc     01 54 06 F1 | 	add	local07, #1
054e0     25 57 C2 FA | 	rdbyte	local08, local02
054e4     2A 4B 02 F6 | 	mov	local02, local07
054e8     24 57 42 FC | 	wrbyte	local08, local01
054ec     01 52 06 F1 | 	add	local06, #1
054f0     01 48 06 F1 | 	add	local01, #1
054f4     D8 FF 9F FD | 	jmp	#LR__0342
054f8                 | LR__0343
054f8                 | LR__0344
054f8                 | '         *ptr++ = *s++;
054f8                 | '     }
054f8                 | '     return ptr;
054f8     24 17 02 F6 | 	mov	result1, local01
054fc     D0 F0 03 F6 | 	mov	ptra, fp
05500     E0 00 A0 FD | 	call	#popregs_
05504                 | _fs9p_internal_cc_doPutStr_0195_ret
05504     2D 00 64 FD | 	ret
05508                 | 
05508                 | _fs9p_internal_cc_FETCH4_0199
05508     1F 17 C2 FA | 	rdbyte	result1, arg01
0550c     01 3E 06 F1 | 	add	arg01, #1
05510     1F 29 C2 FA | 	rdbyte	_var01, arg01
05514     08 28 66 F0 | 	shl	_var01, #8
05518     14 17 42 F5 | 	or	result1, _var01
0551c     01 3E 06 F1 | 	add	arg01, #1
05520     1F 29 C2 FA | 	rdbyte	_var01, arg01
05524     10 28 66 F0 | 	shl	_var01, #16
05528     14 17 42 F5 | 	or	result1, _var01
0552c     01 3E 06 F1 | 	add	arg01, #1
05530     1F 29 C2 FA | 	rdbyte	_var01, arg01
05534     18 28 66 F0 | 	shl	_var01, #24
05538     14 17 42 F5 | 	or	result1, _var01
0553c                 | '     r = b[0];
0553c                 | '     r |= (b[1]<<8);
0553c                 | '     r |= (b[2]<<16);
0553c                 | '     r |= (b[3]<<24);
0553c                 | '     return r;
0553c                 | _fs9p_internal_cc_FETCH4_0199_ret
0553c     2D 00 64 FD | 	ret
05540                 | 
05540                 | _fs9p_internal_cc_do_fs_walk_0215
05540     15 9C 05 F6 | 	mov	COUNT_, #21
05544     D1 00 A0 FD | 	call	#pushregs_
05548     1F 49 02 F6 | 	mov	local01, arg01
0554c     20 4B 02 F6 | 	mov	local02, arg02
05550     21 4D 02 F6 | 	mov	local03, arg03
05554     22 4F 02 F6 | 	mov	local04, arg04
05558     24 51 02 F6 | 	mov	local05, local01
0555c     00 52 06 F6 | 	mov	local06, #0
05560                 | ' 
05560                 | '     do {
05560                 | LR__0345
05560     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05564     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05568     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
0556c     00 40 06 F6 | 	mov	arg02, #0
05570     B8 FE BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05574     6E 40 06 F6 | 	mov	arg02, #110
05578     0B DD 48 FC | 	wrbyte	#110, result1
0557c                 | '     *ptr++ = x;
0557c                 | '     return ptr;
0557c     01 16 06 F1 | 	add	result1, #1
05580     0B 3F 02 F6 | 	mov	arg01, result1
05584     0F 40 CE F9 | 	bmask	arg02, #15
05588     68 FE BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
0558c     0B 3F 02 F6 | 	mov	arg01, result1
05590     28 41 02 F6 | 	mov	arg02, local05
05594     94 FE BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05598     0B 3F 02 F6 | 	mov	arg01, result1
0559c     25 51 02 F6 | 	mov	local05, local02
055a0     28 41 02 F6 | 	mov	arg02, local05
055a4     84 FE BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
055a8     0B 55 02 F6 | 	mov	local07, result1
055ac     60 AA 9F FE | 	loc	pa,	#(@LR__0347-@LR__0346)
055b0     B4 00 A0 FD | 	call	#FCACHE_LOAD_
055b4                 | '         ptr = doPut4(txbuf, 0);
055b4                 | '         ptr = doPut1(ptr, t_walk);
055b4                 | '         ptr = doPut2(ptr,  0xffffU );
055b4                 | '         ptr = doPut4(ptr, curdir);
055b4                 | '         curdir = (uint32_t)newfile;
055b4                 | '         ptr = doPut4(ptr, curdir);
055b4                 | '         while (*path == '/') path++;
055b4                 | LR__0346
055b4     26 57 C2 FA | 	rdbyte	local08, local03
055b8     2F 56 0E F2 | 	cmp	local08, #47 wz
055bc     01 4C 06 A1 |  if_e	add	local03, #1
055c0     F0 FF 9F AD |  if_e	jmp	#LR__0346
055c4                 | LR__0347
055c4     2A 59 02 F6 | 	mov	local09, local07
055c8     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
055cc     08 5B 02 F6 | 	mov	local10, ptr__fs9p_internal_cc_dat__
055d0     2D 59 82 F1 | 	sub	local09, local10
055d4     26 57 CA FA | 	rdbyte	local08, local03 wz
055d8     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
055dc     C4 00 90 AD |  if_e	jmp	#LR__0352
055e0     2A 3F 02 F6 | 	mov	arg01, local07
055e4     01 40 06 F6 | 	mov	arg02, #1
055e8     08 FE BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
055ec     0B 3F 02 F6 | 	mov	arg01, result1
055f0     1F 5D 02 F6 | 	mov	local11, arg01
055f4     00 40 06 F6 | 	mov	arg02, #0
055f8     F8 FD BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
055fc     0B 55 02 F6 | 	mov	local07, result1
05600     3C AA 9F FE | 	loc	pa,	#(@LR__0349-@LR__0348)
05604     B4 00 A0 FD | 	call	#FCACHE_LOAD_
05608                 | '             ptr = doPut2(ptr, 1);
05608                 | '             sizeptr = ptr;
05608                 | '             ptr = doPut2(ptr, 0);
05608                 | '             while (*path && *path != '/' && len < maxlen) {
05608                 | LR__0348
05608     26 57 CA FA | 	rdbyte	local08, local03 wz
0560c     38 00 90 AD |  if_e	jmp	#LR__0350
05610     26 5B C2 FA | 	rdbyte	local10, local03
05614     2F 5A 0E F2 | 	cmp	local10, #47 wz
05618     2C 00 90 AD |  if_e	jmp	#LR__0350
0561c     08 5F 02 FB | 	rdlong	local12, ptr__fs9p_internal_cc_dat__
05620     2F 59 5A F2 | 	cmps	local09, local12 wcz
05624     20 00 90 3D |  if_ae	jmp	#LR__0350
05628     26 61 02 F6 | 	mov	local13, local03
0562c     01 60 06 F1 | 	add	local13, #1
05630     26 63 C2 FA | 	rdbyte	local14, local03
05634     30 4D 02 F6 | 	mov	local03, local13
05638     2A 63 42 FC | 	wrbyte	local14, local07
0563c     01 58 06 F1 | 	add	local09, #1
05640     01 54 06 F1 | 	add	local07, #1
05644     C0 FF 9F FD | 	jmp	#LR__0348
05648                 | LR__0349
05648                 | LR__0350
05648     00 4E 0E F2 | 	cmp	local04, #0 wz
0564c     38 00 90 AD |  if_e	jmp	#LR__0351
05650     26 57 CA FA | 	rdbyte	local08, local03 wz
05654     30 00 90 5D |  if_ne	jmp	#LR__0351
05658     00 52 0E F2 | 	cmp	local06, #0 wz
0565c                 | ' 		return 0;
0565c     00 16 06 56 |  if_ne	mov	result1, #0
05660     E4 00 90 5D |  if_ne	jmp	#LR__0355
05664     2E 3F 02 F6 | 	mov	arg01, local11
05668     01 40 06 F6 | 	mov	arg02, #1
0566c     84 FD BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05670     2E 17 02 F6 | 	mov	result1, local11
05674     02 16 06 F1 | 	add	result1, #2
05678     0B 5D 48 FC | 	wrbyte	#46, result1
0567c                 | '     *ptr++ = x;
0567c                 | '     return ptr;
0567c     01 16 06 F1 | 	add	result1, #1
05680     0B 55 02 F6 | 	mov	local07, result1
05684     2C 00 90 FD | 	jmp	#LR__0353
05688                 | LR__0351
05688     2A 41 02 F6 | 	mov	arg02, local07
0568c     2E 5F 02 F6 | 	mov	local12, local11
05690     02 5E 06 F1 | 	add	local12, #2
05694     2F 41 82 F1 | 	sub	arg02, local12
05698     2E 3F 02 F6 | 	mov	arg01, local11
0569c     54 FD BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
056a0     10 00 90 FD | 	jmp	#LR__0353
056a4                 | LR__0352
056a4     2A 3F 02 F6 | 	mov	arg01, local07
056a8     00 40 06 F6 | 	mov	arg02, #0
056ac     44 FD BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
056b0     0B 55 02 F6 | 	mov	local07, result1
056b4                 | LR__0353
056b4     04 00 00 FF 
056b8     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
056bc     08 61 02 FB | 	rdlong	local13, ptr__fs9p_internal_cc_dat__
056c0     30 57 02 F6 | 	mov	local08, local13
056c4     2B 5B 02 FB | 	rdlong	local10, local08
056c8     04 56 06 F1 | 	add	local08, #4
056cc     2B 63 02 FB | 	rdlong	local14, local08
056d0     31 5F 02 F6 | 	mov	local12, local14
056d4     04 00 00 FF 
056d8     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
056dc     08 65 02 F6 | 	mov	local15, ptr__fs9p_internal_cc_dat__
056e0     32 67 02 F6 | 	mov	local16, local15
056e4     2A 69 02 F6 | 	mov	local17, local07
056e8     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
056ec     08 6B 02 FB | 	rdlong	local18, ptr__fs9p_internal_cc_dat__
056f0     33 3F 02 F6 | 	mov	arg01, local16
056f4     34 41 02 F6 | 	mov	arg02, local17
056f8     35 43 02 F6 | 	mov	arg03, local18
056fc     FE 6C 02 F6 | 	mov	local19, objptr
05700     2D FD 01 F6 | 	mov	objptr, local10
05704     2D 5E 62 FD | 	call	local12
05708     36 FD 01 F6 | 	mov	objptr, local19
0570c     0B 6F 02 F6 | 	mov	local20, result1
05710     37 71 02 F6 | 	mov	local21, local20
05714     08 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #8
05718     08 57 C2 FA | 	rdbyte	local08, ptr__fs9p_internal_cc_dat__
0571c     08 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #8
05720     07 56 46 F7 | 	zerox	local08, #7
05724     6F 56 0E F2 | 	cmp	local08, #111 wz
05728     0C 00 90 AD |  if_e	jmp	#LR__0354
0572c     00 52 0E F2 | 	cmp	local06, #0 wz
05730                 | '             return - 4 ;
05730     04 16 66 56 |  if_ne	neg	result1, #4
05734     10 00 90 5D |  if_ne	jmp	#LR__0355
05738                 | LR__0354
05738     01 52 06 F6 | 	mov	local06, #1
0573c     26 57 CA FA | 	rdbyte	local08, local03 wz
05740     1C FE 9F 5D |  if_ne	jmp	#LR__0345
05744                 | '     return 0;
05744     00 16 06 F6 | 	mov	result1, #0
05748                 | LR__0355
05748     D0 F0 03 F6 | 	mov	ptra, fp
0574c     E0 00 A0 FD | 	call	#popregs_
05750                 | _fs9p_internal_cc_do_fs_walk_0215_ret
05750     2D 00 64 FD | 	ret
05754                 | 
05754                 | _fs9p_internal_cc_fs_open_relative
05754     06 9C 05 F6 | 	mov	COUNT_, #6
05758     D1 00 A0 FD | 	call	#pushregs_
0575c     20 49 02 F6 | 	mov	local01, arg02
05760     22 4B 02 F6 | 	mov	local02, arg04
05764     24 41 02 F6 | 	mov	arg02, local01
05768                 | ' {
05768                 | '     return do_fs_walk(dir, newfile, path, 0);
05768     00 44 06 F6 | 	mov	arg04, #0
0576c     D0 FD BF FD | 	call	#_fs9p_internal_cc_do_fs_walk_0215
05770     00 16 0E F2 | 	cmp	result1, #0 wz
05774                 | ' #line 225 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05774                 | '       return r;
05774     B8 00 90 5D |  if_ne	jmp	#LR__0356
05778     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
0577c     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05780     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05784     00 40 06 F6 | 	mov	arg02, #0
05788     A0 FC BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
0578c     70 40 06 F6 | 	mov	arg02, #112
05790     0B E1 48 FC | 	wrbyte	#112, result1
05794                 | '     *ptr++ = x;
05794                 | '     return ptr;
05794     01 16 06 F1 | 	add	result1, #1
05798     0B 3F 02 F6 | 	mov	arg01, result1
0579c     0F 40 CE F9 | 	bmask	arg02, #15
057a0     50 FC BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
057a4     0B 3F 02 F6 | 	mov	arg01, result1
057a8     24 41 02 F6 | 	mov	arg02, local01
057ac     7C FC BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
057b0     07 4A 46 F7 | 	zerox	local02, #7
057b4     0B 4B 42 FC | 	wrbyte	local02, result1
057b8                 | '     *ptr++ = x;
057b8                 | '     return ptr;
057b8     01 16 06 F1 | 	add	result1, #1
057bc     0B 41 02 F6 | 	mov	arg02, result1
057c0     04 00 00 FF 
057c4     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
057c8     08 4D 02 FB | 	rdlong	local03, ptr__fs9p_internal_cc_dat__
057cc     26 4F 02 FB | 	rdlong	local04, local03
057d0     04 4C 06 F1 | 	add	local03, #4
057d4     26 51 02 FB | 	rdlong	local05, local03
057d8     04 00 00 FF 
057dc     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
057e0     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
057e4     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
057e8     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
057ec     FE 52 02 F6 | 	mov	local06, objptr
057f0     27 FD 01 F6 | 	mov	objptr, local04
057f4     2D 50 62 FD | 	call	local05
057f8     29 FD 01 F6 | 	mov	objptr, local06
057fc     08 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #8
05800     08 4D C2 FA | 	rdbyte	local03, ptr__fs9p_internal_cc_dat__
05804     08 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #8
05808     07 4C 46 F7 | 	zerox	local03, #7
0580c     71 4C 0E F2 | 	cmp	local03, #113 wz
05810                 | '         return - 6 ;
05810     06 16 66 56 |  if_ne	neg	result1, #6
05814     18 00 90 5D |  if_ne	jmp	#LR__0356
05818     02 00 00 FF 
0581c     10 48 06 F1 | 	add	local01, ##1040
05820     24 01 68 FC | 	wrlong	#0, local01
05824     04 48 86 F1 | 	sub	local01, #4
05828     24 01 68 FC | 	wrlong	#0, local01
0582c                 | '     }
0582c                 | '     f->offlo = f->offhi = 0;
0582c                 | '     return 0;
0582c     00 16 06 F6 | 	mov	result1, #0
05830                 | LR__0356
05830     D0 F0 03 F6 | 	mov	ptra, fp
05834     E0 00 A0 FD | 	call	#popregs_
05838                 | _fs9p_internal_cc_fs_open_relative_ret
05838     2D 00 64 FD | 	ret
0583c                 | 
0583c                 | _fs9p_internal_cc_fs_open
0583c     02 9C 05 F6 | 	mov	COUNT_, #2
05840     D1 00 A0 FD | 	call	#pushregs_
05844                 | ' {
05844                 | '     return fs_open_relative(&rootdir, f, path, fs_mode);
05844     02 00 00 FF 
05848     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
0584c     1F 49 02 F6 | 	mov	local01, arg01
05850     20 4B 02 F6 | 	mov	local02, arg02
05854     21 45 02 F6 | 	mov	arg04, arg03
05858     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
0585c     24 41 02 F6 | 	mov	arg02, local01
05860     25 43 02 F6 | 	mov	arg03, local02
05864     02 00 00 FF 
05868     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
0586c     E4 FE BF FD | 	call	#_fs9p_internal_cc_fs_open_relative
05870     D0 F0 03 F6 | 	mov	ptra, fp
05874     E0 00 A0 FD | 	call	#popregs_
05878                 | _fs9p_internal_cc_fs_open_ret
05878     2D 00 64 FD | 	ret
0587c                 | 
0587c                 | _fs9p_internal_cc_fs_create
0587c     09 9C 05 F6 | 	mov	COUNT_, #9
05880     D1 00 A0 FD | 	call	#pushregs_
05884     1F 49 02 F6 | 	mov	local01, arg01
05888     20 4B 02 F6 | 	mov	local02, arg02
0588c     21 4D 02 F6 | 	mov	local03, arg03
05890     02 00 00 FF 
05894     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
05898     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
0589c     02 00 00 FF 
058a0     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
058a4     24 41 02 F6 | 	mov	arg02, local01
058a8     25 43 02 F6 | 	mov	arg03, local02
058ac     01 44 06 F6 | 	mov	arg04, #1
058b0     8C FC BF FD | 	call	#_fs9p_internal_cc_do_fs_walk_0215
058b4     00 16 5E F2 | 	cmps	result1, #0 wcz
058b8                 | ' #line 260 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
058b8                 | '         return - 13 ;
058b8     0D 16 66 C6 |  if_b	neg	result1, #13
058bc     FC 00 90 CD |  if_b	jmp	#LR__0358
058c0     25 3F 02 F6 | 	mov	arg01, local02
058c4     2F 40 06 F6 | 	mov	arg02, #47
058c8     B8 F8 BF FD | 	call	#_fs9p_internal_cc_strrchr
058cc     0B 4F 0A F6 | 	mov	local04, result1 wz
058d0     25 4F 02 A6 |  if_e	mov	local04, local02
058d4     01 4E 06 51 |  if_ne	add	local04, #1
058d8     1F 4C 2E F4 | 	testbn	local03, #31 wz
058dc     1F 50 C6 59 |  if_ne	decod	local05, #31
058e0     11 50 06 A6 |  if_e	mov	local05, #17
058e4     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
058e8     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
058ec     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
058f0     00 40 06 F6 | 	mov	arg02, #0
058f4     34 FB BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
058f8     72 40 06 F6 | 	mov	arg02, #114
058fc     0B E5 48 FC | 	wrbyte	#114, result1
05900                 | '     *ptr++ = x;
05900                 | '     return ptr;
05900     01 16 06 F1 | 	add	result1, #1
05904     0B 3F 02 F6 | 	mov	arg01, result1
05908     0F 40 CE F9 | 	bmask	arg02, #15
0590c     E4 FA BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05910     0B 3F 02 F6 | 	mov	arg01, result1
05914     24 41 02 F6 | 	mov	arg02, local01
05918     10 FB BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
0591c     0B 3F 02 F6 | 	mov	arg01, result1
05920     27 41 02 F6 | 	mov	arg02, local04
05924     54 FB BF FD | 	call	#_fs9p_internal_cc_doPutStr_0195
05928     0B 3F 02 F6 | 	mov	arg01, result1
0592c     26 41 02 F6 | 	mov	arg02, local03
05930     F8 FA BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05934     0B 51 42 FC | 	wrbyte	local05, result1
05938                 | '     *ptr++ = x;
05938                 | '     return ptr;
05938     01 16 06 F1 | 	add	result1, #1
0593c     0B 41 02 F6 | 	mov	arg02, result1
05940     04 00 00 FF 
05944     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
05948     08 53 02 FB | 	rdlong	local06, ptr__fs9p_internal_cc_dat__
0594c     29 55 02 FB | 	rdlong	local07, local06
05950     04 52 06 F1 | 	add	local06, #4
05954     29 57 02 FB | 	rdlong	local08, local06
05958     04 00 00 FF 
0595c     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
05960     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05964     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05968     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
0596c     FE 58 02 F6 | 	mov	local09, objptr
05970     2A FD 01 F6 | 	mov	objptr, local07
05974     2D 56 62 FD | 	call	local08
05978     2C FD 01 F6 | 	mov	objptr, local09
0597c     00 16 5E F2 | 	cmps	result1, #0 wcz
05980     1C 00 90 CD |  if_b	jmp	#LR__0357
05984     08 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #8
05988     08 53 C2 FA | 	rdbyte	local06, ptr__fs9p_internal_cc_dat__
0598c     08 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #8
05990     07 52 46 F7 | 	zerox	local06, #7
05994     73 52 0E F2 | 	cmp	local06, #115 wz
05998                 | '       return 0;
05998     00 16 06 A6 |  if_e	mov	result1, #0
0599c     1C 00 90 AD |  if_e	jmp	#LR__0358
059a0                 | LR__0357
059a0     24 3F 02 F6 | 	mov	arg01, local01
059a4     24 41 02 F6 | 	mov	arg02, local01
059a8     27 43 02 F6 | 	mov	arg03, local04
059ac     11 44 06 F6 | 	mov	arg04, #17
059b0     A0 FD BF FD | 	call	#_fs9p_internal_cc_fs_open_relative
059b4     00 16 5E F2 | 	cmps	result1, #0 wcz
059b8                 | '         return r;
059b8                 | '     }
059b8                 | '     return 0;
059b8     00 16 06 36 |  if_ae	mov	result1, #0
059bc                 | LR__0358
059bc     D0 F0 03 F6 | 	mov	ptra, fp
059c0     E0 00 A0 FD | 	call	#popregs_
059c4                 | _fs9p_internal_cc_fs_create_ret
059c4     2D 00 64 FD | 	ret
059c8                 | 
059c8                 | _fs9p_internal_cc_fs_close
059c8     05 9C 05 F6 | 	mov	COUNT_, #5
059cc     D1 00 A0 FD | 	call	#pushregs_
059d0     1F 49 02 F6 | 	mov	local01, arg01
059d4     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
059d8     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
059dc     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
059e0     00 40 06 F6 | 	mov	arg02, #0
059e4     44 FA BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
059e8     78 40 06 F6 | 	mov	arg02, #120
059ec     0B F1 48 FC | 	wrbyte	#120, result1
059f0                 | '     *ptr++ = x;
059f0                 | '     return ptr;
059f0     01 16 06 F1 | 	add	result1, #1
059f4     0B 3F 02 F6 | 	mov	arg01, result1
059f8     0F 40 CE F9 | 	bmask	arg02, #15
059fc     F4 F9 BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05a00     0B 3F 02 F6 | 	mov	arg01, result1
05a04     24 41 02 F6 | 	mov	arg02, local01
05a08     20 FA BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05a0c     0B 41 02 F6 | 	mov	arg02, result1
05a10     04 00 00 FF 
05a14     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
05a18     08 4B 02 FB | 	rdlong	local02, ptr__fs9p_internal_cc_dat__
05a1c     25 4D 02 FB | 	rdlong	local03, local02
05a20     04 4A 06 F1 | 	add	local02, #4
05a24     25 4F 02 FB | 	rdlong	local04, local02
05a28     04 00 00 FF 
05a2c     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
05a30     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05a34     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05a38     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
05a3c     FE 50 02 F6 | 	mov	local05, objptr
05a40     26 FD 01 F6 | 	mov	objptr, local03
05a44     2D 4E 62 FD | 	call	local04
05a48     28 FD 01 F6 | 	mov	objptr, local05
05a4c     00 16 5E F2 | 	cmps	result1, #0 wcz
05a50     18 00 90 CD |  if_b	jmp	#LR__0359
05a54     08 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #8
05a58     08 4B C2 FA | 	rdbyte	local02, ptr__fs9p_internal_cc_dat__
05a5c     08 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #8
05a60     07 4A 46 F7 | 	zerox	local02, #7
05a64     79 4A 0E F2 | 	cmp	local02, #121 wz
05a68     08 00 90 AD |  if_e	jmp	#LR__0360
05a6c                 | LR__0359
05a6c                 | '         return - 10 ;
05a6c     0A 16 66 F6 | 	neg	result1, #10
05a70     04 00 90 FD | 	jmp	#LR__0361
05a74                 | LR__0360
05a74                 | '     }
05a74                 | '     return 0;
05a74     00 16 06 F6 | 	mov	result1, #0
05a78                 | LR__0361
05a78     D0 F0 03 F6 | 	mov	ptra, fp
05a7c     E0 00 A0 FD | 	call	#popregs_
05a80                 | _fs9p_internal_cc_fs_close_ret
05a80     2D 00 64 FD | 	ret
05a84                 | 
05a84                 | _fs9p_internal_cc_fs_fdelete
05a84     05 9C 05 F6 | 	mov	COUNT_, #5
05a88     D1 00 A0 FD | 	call	#pushregs_
05a8c     1F 49 02 F6 | 	mov	local01, arg01
05a90     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05a94     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05a98     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05a9c     00 40 06 F6 | 	mov	arg02, #0
05aa0     88 F9 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05aa4     7A 40 06 F6 | 	mov	arg02, #122
05aa8     0B F5 48 FC | 	wrbyte	#122, result1
05aac                 | '     *ptr++ = x;
05aac                 | '     return ptr;
05aac     01 16 06 F1 | 	add	result1, #1
05ab0     0B 3F 02 F6 | 	mov	arg01, result1
05ab4     0F 40 CE F9 | 	bmask	arg02, #15
05ab8     38 F9 BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05abc     0B 3F 02 F6 | 	mov	arg01, result1
05ac0     24 41 02 F6 | 	mov	arg02, local01
05ac4     64 F9 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05ac8     0B 41 02 F6 | 	mov	arg02, result1
05acc     04 00 00 FF 
05ad0     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
05ad4     08 4B 02 FB | 	rdlong	local02, ptr__fs9p_internal_cc_dat__
05ad8     25 4D 02 FB | 	rdlong	local03, local02
05adc     04 4A 06 F1 | 	add	local02, #4
05ae0     25 4F 02 FB | 	rdlong	local04, local02
05ae4     04 00 00 FF 
05ae8     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
05aec     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05af0     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05af4     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
05af8     FE 50 02 F6 | 	mov	local05, objptr
05afc     26 FD 01 F6 | 	mov	objptr, local03
05b00     2D 4E 62 FD | 	call	local04
05b04     28 FD 01 F6 | 	mov	objptr, local05
05b08     00 16 5E F2 | 	cmps	result1, #0 wcz
05b0c     18 00 90 CD |  if_b	jmp	#LR__0362
05b10     08 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #8
05b14     08 4B C2 FA | 	rdbyte	local02, ptr__fs9p_internal_cc_dat__
05b18     08 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #8
05b1c     07 4A 46 F7 | 	zerox	local02, #7
05b20     7B 4A 0E F2 | 	cmp	local02, #123 wz
05b24     08 00 90 AD |  if_e	jmp	#LR__0363
05b28                 | LR__0362
05b28                 | '         return - 10 ;
05b28     0A 16 66 F6 | 	neg	result1, #10
05b2c     04 00 90 FD | 	jmp	#LR__0364
05b30                 | LR__0363
05b30                 | '     }
05b30                 | '     return 0;
05b30     00 16 06 F6 | 	mov	result1, #0
05b34                 | LR__0364
05b34     D0 F0 03 F6 | 	mov	ptra, fp
05b38     E0 00 A0 FD | 	call	#popregs_
05b3c                 | _fs9p_internal_cc_fs_fdelete_ret
05b3c     2D 00 64 FD | 	ret
05b40                 | 
05b40                 | _fs9p_internal_cc_fs_delete
05b40     01 9C 05 F6 | 	mov	COUNT_, #1
05b44     D1 00 A0 FD | 	call	#pushregs_
05b48     02 00 00 FF 
05b4c     24 F0 07 F1 | 	add	ptra, ##1060
05b50     04 A0 05 F1 | 	add	fp, #4
05b54     D0 3E 62 FC | 	wrlong	arg01, fp
05b58     04 A0 05 F1 | 	add	fp, #4
05b5c     D0 40 62 FC | 	wrlong	arg02, fp
05b60     04 A0 85 F1 | 	sub	fp, #4
05b64     D0 3E 02 FB | 	rdlong	arg01, fp
05b68     08 A0 05 F1 | 	add	fp, #8
05b6c     D0 40 02 F6 | 	mov	arg02, fp
05b70     04 A0 85 F1 | 	sub	fp, #4
05b74     D0 42 02 FB | 	rdlong	arg03, fp
05b78     08 A0 85 F1 | 	sub	fp, #8
05b7c     00 44 06 F6 | 	mov	arg04, #0
05b80     D0 FB BF FD | 	call	#_fs9p_internal_cc_fs_open_relative
05b84     02 00 00 FF 
05b88     20 A0 05 F1 | 	add	fp, ##1056
05b8c     D0 16 62 FC | 	wrlong	result1, fp
05b90     D0 48 0A FB | 	rdlong	local01, fp wz
05b94     02 00 00 FF 
05b98     20 A0 85 F1 | 	sub	fp, ##1056
05b9c     18 00 90 AD |  if_e	jmp	#LR__0365
05ba0     02 00 00 FF 
05ba4     20 A0 05 F1 | 	add	fp, ##1056
05ba8     D0 16 02 FB | 	rdlong	result1, fp
05bac     02 00 00 FF 
05bb0     20 A0 85 F1 | 	sub	fp, ##1056
05bb4     24 00 90 FD | 	jmp	#LR__0366
05bb8                 | LR__0365
05bb8     0C A0 05 F1 | 	add	fp, #12
05bbc     D0 3E 02 F6 | 	mov	arg01, fp
05bc0     0C A0 85 F1 | 	sub	fp, #12
05bc4     BC FE BF FD | 	call	#_fs9p_internal_cc_fs_fdelete
05bc8     02 00 00 FF 
05bcc     20 A0 05 F1 | 	add	fp, ##1056
05bd0     D0 16 62 FC | 	wrlong	result1, fp
05bd4                 | '     r = fs_fdelete(&f);
05bd4                 | '     return r;
05bd4     02 00 00 FF 
05bd8     20 A0 85 F1 | 	sub	fp, ##1056
05bdc                 | LR__0366
05bdc     D0 F0 03 F6 | 	mov	ptra, fp
05be0     E0 00 A0 FD | 	call	#popregs_
05be4                 | _fs9p_internal_cc_fs_delete_ret
05be4     2D 00 64 FD | 	ret
05be8                 | 
05be8                 | _fs9p_internal_cc_fs_read
05be8     0E 9C 05 F6 | 	mov	COUNT_, #14
05bec     D1 00 A0 FD | 	call	#pushregs_
05bf0     1F 49 02 F6 | 	mov	local01, arg01
05bf4     20 4B 02 F6 | 	mov	local02, arg02
05bf8     21 4D 02 F6 | 	mov	local03, arg03
05bfc     00 4E 06 F6 | 	mov	local04, #0
05c00                 | '     uint32_t oldlo;
05c00                 | '     while (count > 0) {
05c00                 | LR__0367
05c00     00 4C 5E F2 | 	cmps	local03, #0 wcz
05c04     B0 01 90 ED |  if_be	jmp	#LR__0370
05c08     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05c0c     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05c10     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05c14     00 40 06 F6 | 	mov	arg02, #0
05c18     10 F8 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05c1c     74 40 06 F6 | 	mov	arg02, #116
05c20     0B E9 48 FC | 	wrbyte	#116, result1
05c24                 | '     *ptr++ = x;
05c24                 | '     return ptr;
05c24     01 16 06 F1 | 	add	result1, #1
05c28     0B 3F 02 F6 | 	mov	arg01, result1
05c2c     0F 40 CE F9 | 	bmask	arg02, #15
05c30     C0 F7 BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05c34     0B 3F 02 F6 | 	mov	arg01, result1
05c38     24 41 02 F6 | 	mov	arg02, local01
05c3c     EC F7 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05c40     0B 3F 02 F6 | 	mov	arg01, result1
05c44     02 00 00 FF 
05c48     0C 48 06 F1 | 	add	local01, ##1036
05c4c     24 41 02 FB | 	rdlong	arg02, local01
05c50     02 00 00 FF 
05c54     0C 48 86 F1 | 	sub	local01, ##1036
05c58     D0 F7 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05c5c     0B 3F 02 F6 | 	mov	arg01, result1
05c60     02 00 00 FF 
05c64     10 48 06 F1 | 	add	local01, ##1040
05c68     24 41 02 FB | 	rdlong	arg02, local01
05c6c     02 00 00 FF 
05c70     10 48 86 F1 | 	sub	local01, ##1040
05c74     B4 F7 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05c78     0B 3F 02 F6 | 	mov	arg01, result1
05c7c     08 51 02 FB | 	rdlong	local05, ptr__fs9p_internal_cc_dat__
05c80     1F 53 02 F6 | 	mov	local06, arg01
05c84     04 52 06 F1 | 	add	local06, #4
05c88     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05c8c     08 53 82 F1 | 	sub	local06, ptr__fs9p_internal_cc_dat__
05c90     29 51 82 F1 | 	sub	local05, local06
05c94     01 50 86 F1 | 	sub	local05, #1
05c98     28 4D 5A F2 | 	cmps	local03, local05 wcz
05c9c     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05ca0     26 55 02 C6 |  if_b	mov	local07, local03
05ca4     28 55 02 36 |  if_ae	mov	local07, local05
05ca8     2A 41 02 F6 | 	mov	arg02, local07
05cac     7C F7 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05cb0     0B 41 02 F6 | 	mov	arg02, result1
05cb4     04 00 00 FF 
05cb8     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
05cbc     08 57 02 FB | 	rdlong	local08, ptr__fs9p_internal_cc_dat__
05cc0     2B 59 02 FB | 	rdlong	local09, local08
05cc4     04 56 06 F1 | 	add	local08, #4
05cc8     2B 5B 02 FB | 	rdlong	local10, local08
05ccc     04 00 00 FF 
05cd0     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
05cd4     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05cd8     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05cdc     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
05ce0     FE 5C 02 F6 | 	mov	local11, objptr
05ce4     2C FD 01 F6 | 	mov	objptr, local09
05ce8     2D 5A 62 FD | 	call	local10
05cec     2E FD 01 F6 | 	mov	objptr, local11
05cf0     00 16 5E F2 | 	cmps	result1, #0 wcz
05cf4                 | ' #line 366 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05cf4                 | ' 	    return - 12 ;
05cf4     0C 16 66 C6 |  if_b	neg	result1, #12
05cf8     C0 00 90 CD |  if_b	jmp	#LR__0371
05cfc     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05d00     08 5F 02 F6 | 	mov	local12, ptr__fs9p_internal_cc_dat__
05d04     04 5E 06 F1 | 	add	local12, #4
05d08     2F 57 C2 FA | 	rdbyte	local08, local12
05d0c     75 56 0E F2 | 	cmp	local08, #117 wz
05d10                 | ' #line 373 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05d10                 | '             return - 12 ;
05d10     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05d14     01 5E 06 F1 | 	add	local12, #1
05d18     0C 16 66 56 |  if_ne	neg	result1, #12
05d1c     9C 00 90 5D |  if_ne	jmp	#LR__0371
05d20     02 5E 06 F1 | 	add	local12, #2
05d24     2F 3F 02 F6 | 	mov	arg01, local12
05d28     DC F7 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
05d2c     0B 61 02 F6 | 	mov	local13, result1
05d30     04 5E 06 F1 | 	add	local12, #4
05d34     00 60 5E F2 | 	cmps	local13, #0 wcz
05d38     08 00 90 CD |  if_b	jmp	#LR__0368
05d3c     2A 61 5A F2 | 	cmps	local13, local07 wcz
05d40     08 00 90 ED |  if_be	jmp	#LR__0369
05d44                 | LR__0368
05d44                 | ' #line 381 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05d44                 | '             return - 12 ;
05d44     0C 16 66 F6 | 	neg	result1, #12
05d48     70 00 90 FD | 	jmp	#LR__0371
05d4c                 | LR__0369
05d4c     00 60 0E F2 | 	cmp	local13, #0 wz
05d50                 | ' #line 388 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05d50                 | ' 	  break;
05d50     64 00 90 AD |  if_e	jmp	#LR__0370
05d54     25 3F 02 F6 | 	mov	arg01, local02
05d58     2F 41 02 F6 | 	mov	arg02, local12
05d5c     30 43 02 F6 | 	mov	arg03, local13
05d60     14 7E B0 FD | 	call	#__system____builtin_memmove
05d64     30 4B 02 F1 | 	add	local02, local13
05d68     30 4F 02 F1 | 	add	local04, local13
05d6c     30 4D 82 F1 | 	sub	local03, local13
05d70     02 00 00 FF 
05d74     0C 48 06 F1 | 	add	local01, ##1036
05d78     24 63 02 FB | 	rdlong	local14, local01
05d7c     31 57 02 F6 | 	mov	local08, local14
05d80     30 57 02 F1 | 	add	local08, local13
05d84     24 57 62 FC | 	wrlong	local08, local01
05d88     02 00 00 FF 
05d8c     0C 48 86 F1 | 	sub	local01, ##1036
05d90     31 57 1A F2 | 	cmp	local08, local14 wcz
05d94     68 FE 9F 3D |  if_ae	jmp	#LR__0367
05d98     02 00 00 FF 
05d9c     10 48 06 F1 | 	add	local01, ##1040
05da0     24 5B 02 FB | 	rdlong	local10, local01
05da4     01 5A 06 F1 | 	add	local10, #1
05da8     24 5B 62 FC | 	wrlong	local10, local01
05dac     02 00 00 FF 
05db0     10 48 86 F1 | 	sub	local01, ##1040
05db4     48 FE 9F FD | 	jmp	#LR__0367
05db8                 | LR__0370
05db8                 | '             f->offhi++;
05db8                 | '         }
05db8                 | '     }
05db8                 | ' #line 406 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05db8                 | '     return totalread;
05db8     27 17 02 F6 | 	mov	result1, local04
05dbc                 | LR__0371
05dbc     D0 F0 03 F6 | 	mov	ptra, fp
05dc0     E0 00 A0 FD | 	call	#popregs_
05dc4                 | _fs9p_internal_cc_fs_read_ret
05dc4     2D 00 64 FD | 	ret
05dc8                 | 
05dc8                 | _fs9p_internal_cc_fs_write
05dc8     0E 9C 05 F6 | 	mov	COUNT_, #14
05dcc     D1 00 A0 FD | 	call	#pushregs_
05dd0     1F 49 02 F6 | 	mov	local01, arg01
05dd4     20 4B 02 F6 | 	mov	local02, arg02
05dd8     21 4D 02 F6 | 	mov	local03, arg03
05ddc     00 4E 06 F6 | 	mov	local04, #0
05de0                 | '     uint32_t oldlo;
05de0                 | '     while (count > 0) {
05de0                 | LR__0372
05de0     00 4C 5E F2 | 	cmps	local03, #0 wcz
05de4     B8 01 90 ED |  if_be	jmp	#LR__0375
05de8     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05dec     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05df0     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05df4     00 40 06 F6 | 	mov	arg02, #0
05df8     30 F6 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05dfc     76 40 06 F6 | 	mov	arg02, #118
05e00     0B ED 48 FC | 	wrbyte	#118, result1
05e04                 | '     *ptr++ = x;
05e04                 | '     return ptr;
05e04     01 16 06 F1 | 	add	result1, #1
05e08     0B 3F 02 F6 | 	mov	arg01, result1
05e0c     0F 40 CE F9 | 	bmask	arg02, #15
05e10     E0 F5 BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05e14     0B 3F 02 F6 | 	mov	arg01, result1
05e18     24 41 02 F6 | 	mov	arg02, local01
05e1c     0C F6 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05e20     0B 3F 02 F6 | 	mov	arg01, result1
05e24     02 00 00 FF 
05e28     0C 48 06 F1 | 	add	local01, ##1036
05e2c     24 41 02 FB | 	rdlong	arg02, local01
05e30     02 00 00 FF 
05e34     0C 48 86 F1 | 	sub	local01, ##1036
05e38     F0 F5 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05e3c     0B 3F 02 F6 | 	mov	arg01, result1
05e40     02 00 00 FF 
05e44     10 48 06 F1 | 	add	local01, ##1040
05e48     24 41 02 FB | 	rdlong	arg02, local01
05e4c     02 00 00 FF 
05e50     10 48 86 F1 | 	sub	local01, ##1040
05e54     D4 F5 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05e58     0B 3F 02 F6 | 	mov	arg01, result1
05e5c     08 51 02 FB | 	rdlong	local05, ptr__fs9p_internal_cc_dat__
05e60     1F 53 02 F6 | 	mov	local06, arg01
05e64     04 52 06 F1 | 	add	local06, #4
05e68     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05e6c     08 53 82 F1 | 	sub	local06, ptr__fs9p_internal_cc_dat__
05e70     29 51 82 F1 | 	sub	local05, local06
05e74     01 50 86 F1 | 	sub	local05, #1
05e78     28 4D 5A F2 | 	cmps	local03, local05 wcz
05e7c     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05e80     26 55 02 C6 |  if_b	mov	local07, local03
05e84     28 55 02 36 |  if_ae	mov	local07, local05
05e88     2A 41 02 F6 | 	mov	arg02, local07
05e8c     9C F5 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05e90     0B 57 02 F6 | 	mov	local08, result1
05e94     2B 3F 02 F6 | 	mov	arg01, local08
05e98     25 41 02 F6 | 	mov	arg02, local02
05e9c     2A 43 02 F6 | 	mov	arg03, local07
05ea0     D4 7C B0 FD | 	call	#__system____builtin_memmove
05ea4     04 00 00 FF 
05ea8     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
05eac     08 59 02 FB | 	rdlong	local09, ptr__fs9p_internal_cc_dat__
05eb0     2C 5B 02 FB | 	rdlong	local10, local09
05eb4     04 58 06 F1 | 	add	local09, #4
05eb8     2C 5D 02 FB | 	rdlong	local11, local09
05ebc     04 00 00 FF 
05ec0     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
05ec4     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05ec8     2A 57 02 F1 | 	add	local08, local07
05ecc     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05ed0     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
05ed4     2B 41 02 F6 | 	mov	arg02, local08
05ed8     FE 5E 02 F6 | 	mov	local12, objptr
05edc     2D FD 01 F6 | 	mov	objptr, local10
05ee0     2D 5C 62 FD | 	call	local11
05ee4     2F FD 01 F6 | 	mov	objptr, local12
05ee8     0B 61 02 F6 | 	mov	local13, result1
05eec     00 60 5E F2 | 	cmps	local13, #0 wcz
05ef0     30 17 02 C6 |  if_b	mov	result1, local13
05ef4     AC 00 90 CD |  if_b	jmp	#LR__0376
05ef8     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05efc     08 57 02 F6 | 	mov	local08, ptr__fs9p_internal_cc_dat__
05f00     04 56 06 F1 | 	add	local08, #4
05f04     2B 59 C2 FA | 	rdbyte	local09, local08
05f08     77 58 0E F2 | 	cmp	local09, #119 wz
05f0c                 | '             return - 12 ;
05f0c     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05f10     01 56 06 F1 | 	add	local08, #1
05f14     0C 16 66 56 |  if_ne	neg	result1, #12
05f18     88 00 90 5D |  if_ne	jmp	#LR__0376
05f1c     02 56 06 F1 | 	add	local08, #2
05f20     2B 3F 02 F6 | 	mov	arg01, local08
05f24     E0 F5 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
05f28     0B 61 02 F6 | 	mov	local13, result1
05f2c     00 60 5E F2 | 	cmps	local13, #0 wcz
05f30     08 00 90 CD |  if_b	jmp	#LR__0373
05f34     2A 61 5A F2 | 	cmps	local13, local07 wcz
05f38     08 00 90 ED |  if_be	jmp	#LR__0374
05f3c                 | LR__0373
05f3c                 | '             return - 12 ;
05f3c     0C 16 66 F6 | 	neg	result1, #12
05f40     60 00 90 FD | 	jmp	#LR__0376
05f44                 | LR__0374
05f44     00 60 0E F2 | 	cmp	local13, #0 wz
05f48                 | ' 
05f48                 | '             break;
05f48     54 00 90 AD |  if_e	jmp	#LR__0375
05f4c     30 4B 02 F1 | 	add	local02, local13
05f50     30 4F 02 F1 | 	add	local04, local13
05f54     30 4D 82 F1 | 	sub	local03, local13
05f58     02 00 00 FF 
05f5c     0C 48 06 F1 | 	add	local01, ##1036
05f60     24 63 02 FB | 	rdlong	local14, local01
05f64     31 59 02 F6 | 	mov	local09, local14
05f68     30 59 02 F1 | 	add	local09, local13
05f6c     24 59 62 FC | 	wrlong	local09, local01
05f70     02 00 00 FF 
05f74     0C 48 86 F1 | 	sub	local01, ##1036
05f78     31 59 1A F2 | 	cmp	local09, local14 wcz
05f7c     60 FE 9F 3D |  if_ae	jmp	#LR__0372
05f80     02 00 00 FF 
05f84     10 48 06 F1 | 	add	local01, ##1040
05f88     24 5D 02 FB | 	rdlong	local11, local01
05f8c     01 5C 06 F1 | 	add	local11, #1
05f90     24 5D 62 FC | 	wrlong	local11, local01
05f94     02 00 00 FF 
05f98     10 48 86 F1 | 	sub	local01, ##1040
05f9c     40 FE 9F FD | 	jmp	#LR__0372
05fa0                 | LR__0375
05fa0                 | ' #line 460 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
05fa0                 | '             f->offhi++;
05fa0                 | '         }
05fa0                 | '     }
05fa0                 | '     return totalread;
05fa0     27 17 02 F6 | 	mov	result1, local04
05fa4                 | LR__0376
05fa4     D0 F0 03 F6 | 	mov	ptra, fp
05fa8     E0 00 A0 FD | 	call	#popregs_
05fac                 | _fs9p_internal_cc_fs_write_ret
05fac     2D 00 64 FD | 	ret
05fb0                 | 
05fb0                 | _fs9p_internal_cc_fs_fstat
05fb0     0E 9C 05 F6 | 	mov	COUNT_, #14
05fb4     D1 00 A0 FD | 	call	#pushregs_
05fb8     1F 49 02 F6 | 	mov	local01, arg01
05fbc     20 4B 02 F6 | 	mov	local02, arg02
05fc0     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
05fc4     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
05fc8     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
05fcc     00 40 06 F6 | 	mov	arg02, #0
05fd0     58 F4 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05fd4     7C 40 06 F6 | 	mov	arg02, #124
05fd8     0B F9 48 FC | 	wrbyte	#124, result1
05fdc                 | '     *ptr++ = x;
05fdc                 | '     return ptr;
05fdc     01 16 06 F1 | 	add	result1, #1
05fe0     0B 3F 02 F6 | 	mov	arg01, result1
05fe4     0F 40 CE F9 | 	bmask	arg02, #15
05fe8     08 F4 BF FD | 	call	#_fs9p_internal_cc_doPut2_0191
05fec     0B 3F 02 F6 | 	mov	arg01, result1
05ff0     24 41 02 F6 | 	mov	arg02, local01
05ff4     34 F4 BF FD | 	call	#_fs9p_internal_cc_doPut4_0192
05ff8     0B 41 02 F6 | 	mov	arg02, result1
05ffc     04 00 00 FF 
06000     30 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2096
06004     08 4D 02 FB | 	rdlong	local03, ptr__fs9p_internal_cc_dat__
06008     26 4F 02 FB | 	rdlong	local04, local03
0600c     04 4C 06 F1 | 	add	local03, #4
06010     26 51 02 FB | 	rdlong	local05, local03
06014     04 00 00 FF 
06018     2C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2092
0601c     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
06020     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
06024     08 43 02 FB | 	rdlong	arg03, ptr__fs9p_internal_cc_dat__
06028     FE 52 02 F6 | 	mov	local06, objptr
0602c     27 FD 01 F6 | 	mov	objptr, local04
06030     2D 50 62 FD | 	call	local05
06034     29 FD 01 F6 | 	mov	objptr, local06
06038     00 16 5E F2 | 	cmps	result1, #0 wcz
0603c     18 00 90 CD |  if_b	jmp	#LR__0377
06040     08 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #8
06044     08 4D C2 FA | 	rdbyte	local03, ptr__fs9p_internal_cc_dat__
06048     08 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #8
0604c     07 4C 46 F7 | 	zerox	local03, #7
06050     7D 4C 0E F2 | 	cmp	local03, #125 wz
06054     08 00 90 AD |  if_e	jmp	#LR__0378
06058                 | LR__0377
06058                 | '         return - 10 ;
06058     0A 16 66 F6 | 	neg	result1, #10
0605c     E0 00 90 FD | 	jmp	#LR__0379
06060                 | LR__0378
06060     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
06064     08 55 02 F6 | 	mov	local07, ptr__fs9p_internal_cc_dat__
06068     11 54 06 F1 | 	add	local07, #17
0606c     2A 57 C2 FA | 	rdbyte	local08, local07
06070     05 54 06 F1 | 	add	local07, #5
06074     2A 3F 02 F6 | 	mov	arg01, local07
06078     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
0607c     88 F4 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
06080     0B 59 02 F6 | 	mov	local09, result1
06084     08 54 06 F1 | 	add	local07, #8
06088     2A 3F 02 F6 | 	mov	arg01, local07
0608c     78 F4 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
06090     0B 5B 02 F6 | 	mov	local10, result1
06094     04 54 06 F1 | 	add	local07, #4
06098     2A 3F 02 F6 | 	mov	arg01, local07
0609c     68 F4 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
060a0     0B 5D 02 F6 | 	mov	local11, result1
060a4     04 54 06 F1 | 	add	local07, #4
060a8     2A 3F 02 F6 | 	mov	arg01, local07
060ac     58 F4 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
060b0     0B 5F 02 F6 | 	mov	local12, result1
060b4     04 54 06 F1 | 	add	local07, #4
060b8     2A 3F 02 F6 | 	mov	arg01, local07
060bc     48 F4 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
060c0     0B 61 02 F6 | 	mov	local13, result1
060c4     04 54 06 F1 | 	add	local07, #4
060c8     2A 3F 02 F6 | 	mov	arg01, local07
060cc     38 F4 BF FD | 	call	#_fs9p_internal_cc_FETCH4_0199
060d0     04 54 06 F1 | 	add	local07, #4
060d4     2A 17 C2 FA | 	rdbyte	result1, local07
060d8     01 54 06 F1 | 	add	local07, #1
060dc     2A 63 C2 FA | 	rdbyte	local14, local07
060e0     08 62 66 F0 | 	shl	local14, #8
060e4     31 17 42 F5 | 	or	result1, local14
060e8                 | '     r = b[0];
060e8                 | '     r |= (b[1]<<8);
060e8                 | '     return r;
060e8     25 3F 02 F6 | 	mov	arg01, local02
060ec     00 40 06 F6 | 	mov	arg02, #0
060f0     30 42 06 F6 | 	mov	arg03, #48
060f4     C1 00 A0 FD | 	call	#\builtin_bytefill_
060f8     0C 4A 06 F1 | 	add	local02, #12
060fc     25 03 68 FC | 	wrlong	#1, local02
06100     0C 4A 06 F1 | 	add	local02, #12
06104     25 61 62 FC | 	wrlong	local13, local02
06108     0C 4A 06 F1 | 	add	local02, #12
0610c     25 5D 62 FC | 	wrlong	local11, local02
06110     04 4A 06 F1 | 	add	local02, #4
06114     25 5F 62 FC | 	wrlong	local12, local02
06118     24 4A 86 F1 | 	sub	local02, #36
0611c     25 59 62 FC | 	wrlong	local09, local02
06120     07 00 00 FF 
06124     FF 5B 06 F5 | 	and	local10, ##4095
06128     0F 56 46 F7 | 	zerox	local08, #15
0612c     80 56 CE F7 | 	test	local08, #128 wz
06130     0C 5A 26 54 |  if_ne	bith	local10, #12
06134     04 4A 06 F1 | 	add	local02, #4
06138     25 5B 62 FC | 	wrlong	local10, local02
0613c                 | '       mode |=  0010000 ;
0613c                 | '     }
0613c                 | '     buf->st_mode = mode;
0613c                 | ' 
0613c                 | '     return 0;
0613c     00 16 06 F6 | 	mov	result1, #0
06140                 | LR__0379
06140     D0 F0 03 F6 | 	mov	ptra, fp
06144     E0 00 A0 FD | 	call	#popregs_
06148                 | _fs9p_internal_cc_fs_fstat_ret
06148     2D 00 64 FD | 	ret
0614c                 | 
0614c                 | _fs9p_internal_cc_fs_stat
0614c     02 9C 05 F6 | 	mov	COUNT_, #2
06150     D1 00 A0 FD | 	call	#pushregs_
06154     02 00 00 FF 
06158     28 F0 07 F1 | 	add	ptra, ##1064
0615c     04 A0 05 F1 | 	add	fp, #4
06160     D0 3E 62 FC | 	wrlong	arg01, fp
06164     04 A0 05 F1 | 	add	fp, #4
06168     D0 40 62 FC | 	wrlong	arg02, fp
0616c     04 A0 05 F1 | 	add	fp, #4
06170     D0 42 62 FC | 	wrlong	arg03, fp
06174     08 A0 85 F1 | 	sub	fp, #8
06178     D0 3E 02 FB | 	rdlong	arg01, fp
0617c     0C A0 05 F1 | 	add	fp, #12
06180     D0 40 02 F6 | 	mov	arg02, fp
06184     08 A0 85 F1 | 	sub	fp, #8
06188     D0 42 02 FB | 	rdlong	arg03, fp
0618c     08 A0 85 F1 | 	sub	fp, #8
06190     00 44 06 F6 | 	mov	arg04, #0
06194     BC F5 BF FD | 	call	#_fs9p_internal_cc_fs_open_relative
06198     02 00 00 FF 
0619c     24 A0 05 F1 | 	add	fp, ##1060
061a0     D0 16 62 FC | 	wrlong	result1, fp
061a4     D0 48 0A FB | 	rdlong	local01, fp wz
061a8     02 00 00 FF 
061ac     24 A0 85 F1 | 	sub	fp, ##1060
061b0     18 00 90 AD |  if_e	jmp	#LR__0380
061b4     02 00 00 FF 
061b8     24 A0 05 F1 | 	add	fp, ##1060
061bc     D0 16 02 FB | 	rdlong	result1, fp
061c0     02 00 00 FF 
061c4     24 A0 85 F1 | 	sub	fp, ##1060
061c8     50 00 90 FD | 	jmp	#LR__0381
061cc                 | LR__0380
061cc     10 A0 05 F1 | 	add	fp, #16
061d0     D0 3E 02 F6 | 	mov	arg01, fp
061d4     04 A0 85 F1 | 	sub	fp, #4
061d8     D0 40 02 FB | 	rdlong	arg02, fp
061dc     0C A0 85 F1 | 	sub	fp, #12
061e0     CC FD BF FD | 	call	#_fs9p_internal_cc_fs_fstat
061e4     0B 4B 02 F6 | 	mov	local02, result1
061e8     02 00 00 FF 
061ec     24 A0 05 F1 | 	add	fp, ##1060
061f0     D0 4A 62 FC | 	wrlong	local02, fp
061f4     02 00 00 FF 
061f8     14 A0 85 F1 | 	sub	fp, ##1044
061fc     D0 3E 02 F6 | 	mov	arg01, fp
06200     10 A0 85 F1 | 	sub	fp, #16
06204     C0 F7 BF FD | 	call	#_fs9p_internal_cc_fs_close
06208                 | '     r = fs_fstat(&f, buf);
06208                 | '     fs_close(&f);
06208                 | '     return r;
06208     02 00 00 FF 
0620c     24 A0 05 F1 | 	add	fp, ##1060
06210     D0 16 02 FB | 	rdlong	result1, fp
06214     02 00 00 FF 
06218     24 A0 85 F1 | 	sub	fp, ##1060
0621c                 | LR__0381
0621c     D0 F0 03 F6 | 	mov	ptra, fp
06220     E0 00 A0 FD | 	call	#popregs_
06224                 | _fs9p_internal_cc_fs_stat_ret
06224     2D 00 64 FD | 	ret
06228                 | 
06228                 | _fs9p_internal_cc_v_creat_0256
06228     06 9C 05 F6 | 	mov	COUNT_, #6
0622c     D1 00 A0 FD | 	call	#pushregs_
06230     1F 49 02 F6 | 	mov	local01, arg01
06234     20 4B 02 F6 | 	mov	local02, arg02
06238     21 4D 02 F6 | 	mov	local03, arg03
0623c     02 00 00 FF 
06240     14 3E 06 F6 | 	mov	arg01, ##1044
06244                 | '     return _gc_alloc(size);
06244     10 40 06 F6 | 	mov	arg02, #16
06248     FC 9D B0 FD | 	call	#__system___gc_doalloc
0624c     0B 4F 0A F6 | 	mov	local04, result1 wz
06250     1C 00 90 5D |  if_ne	jmp	#LR__0382
06254                 | '       return _seterror( 7 );
06254     01 00 00 FF 
06258     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0625c     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
06260     01 00 00 FF 
06264     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06268     01 16 66 F6 | 	neg	result1, #1
0626c     68 00 90 FD | 	jmp	#LR__0384
06270                 | LR__0382
06270     27 3F 02 F6 | 	mov	arg01, local04
06274     00 40 06 F6 | 	mov	arg02, #0
06278     02 00 00 FF 
0627c     14 42 06 F6 | 	mov	arg03, ##1044
06280     1F 51 02 F6 | 	mov	local05, arg01
06284     C1 00 A0 FD | 	call	#\builtin_bytefill_
06288     28 17 02 F6 | 	mov	result1, local05
0628c     27 3F 02 F6 | 	mov	arg01, local04
06290     25 41 02 F6 | 	mov	arg02, local02
06294     26 43 02 F6 | 	mov	arg03, local03
06298     E0 F5 BF FD | 	call	#_fs9p_internal_cc_fs_create
0629c     0B 53 0A F6 | 	mov	local06, result1 wz
062a0     2C 00 90 AD |  if_e	jmp	#LR__0383
062a4     27 3F 02 F6 | 	mov	arg01, local04
062a8                 | '     return _gc_free(ptr);
062a8     D4 9E B0 FD | 	call	#__system___gc_free
062ac                 | '     free(f);
062ac                 | '     return _seterror(-r);
062ac     29 3F 6A F6 | 	neg	arg01, local06 wz
062b0     01 00 00 FF 
062b4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
062b8     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
062bc     01 00 00 FF 
062c0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
062c4     01 16 66 56 |  if_ne	neg	result1, #1
062c8     00 16 06 A6 |  if_e	mov	result1, #0
062cc     08 00 90 FD | 	jmp	#LR__0384
062d0                 | LR__0383
062d0     24 4F 62 FC | 	wrlong	local04, local01
062d4                 | '   }
062d4                 | '   fil->vfsdata = f;
062d4                 | '   return 0;
062d4     00 16 06 F6 | 	mov	result1, #0
062d8                 | LR__0384
062d8     D0 F0 03 F6 | 	mov	ptra, fp
062dc     E0 00 A0 FD | 	call	#popregs_
062e0                 | _fs9p_internal_cc_v_creat_0256_ret
062e0     2D 00 64 FD | 	ret
062e4                 | 
062e4                 | _fs9p_internal_cc_v_close_0258
062e4     02 9C 05 F6 | 	mov	COUNT_, #2
062e8     D1 00 A0 FD | 	call	#pushregs_
062ec     1F 49 02 F6 | 	mov	local01, arg01
062f0     24 3F 02 FB | 	rdlong	arg01, local01
062f4     D0 F6 BF FD | 	call	#_fs9p_internal_cc_fs_close
062f8     0B 4B 02 F6 | 	mov	local02, result1
062fc     24 3F 02 FB | 	rdlong	arg01, local01
06300                 | '     return _gc_free(ptr);
06300     7C 9E B0 FD | 	call	#__system___gc_free
06304                 | '   free(fil->vfsdata);
06304                 | '   return _seterror(-r);
06304     25 3F 6A F6 | 	neg	arg01, local02 wz
06308     01 00 00 FF 
0630c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06310     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
06314     01 00 00 FF 
06318     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0631c     01 16 66 56 |  if_ne	neg	result1, #1
06320     00 16 06 A6 |  if_e	mov	result1, #0
06324     D0 F0 03 F6 | 	mov	ptra, fp
06328     E0 00 A0 FD | 	call	#popregs_
0632c                 | _fs9p_internal_cc_v_close_0258_ret
0632c     2D 00 64 FD | 	ret
06330                 | 
06330                 | _fs9p_internal_cc_v_opendir_0261
06330     04 9C 05 F6 | 	mov	COUNT_, #4
06334     D1 00 A0 FD | 	call	#pushregs_
06338     1F 49 02 F6 | 	mov	local01, arg01
0633c     20 4B 02 F6 | 	mov	local02, arg02
06340     02 00 00 FF 
06344     14 3E 06 F6 | 	mov	arg01, ##1044
06348                 | '     return _gc_alloc(size);
06348     10 40 06 F6 | 	mov	arg02, #16
0634c     F8 9C B0 FD | 	call	#__system___gc_doalloc
06350     0B 4D 0A F6 | 	mov	local03, result1 wz
06354     1C 00 90 5D |  if_ne	jmp	#LR__0385
06358                 | ' #line 572 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
06358                 | '       return _seterror( 7 );
06358     01 00 00 FF 
0635c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06360     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
06364     01 00 00 FF 
06368     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0636c     01 16 66 F6 | 	neg	result1, #1
06370     64 00 90 FD | 	jmp	#LR__0387
06374                 | LR__0385
06374     02 00 00 FF 
06378     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
0637c     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
06380     02 00 00 FF 
06384     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
06388     25 43 02 F6 | 	mov	arg03, local02
0638c     26 41 02 F6 | 	mov	arg02, local03
06390     00 44 06 F6 | 	mov	arg04, #0
06394     BC F3 BF FD | 	call	#_fs9p_internal_cc_fs_open_relative
06398     0B 4F 0A F6 | 	mov	local04, result1 wz
0639c     2C 00 90 AD |  if_e	jmp	#LR__0386
063a0     26 3F 02 F6 | 	mov	arg01, local03
063a4                 | '     return _gc_free(ptr);
063a4     D8 9D B0 FD | 	call	#__system___gc_free
063a8                 | '         free(f);
063a8                 | '         return _seterror(-r);
063a8     27 3F 6A F6 | 	neg	arg01, local04 wz
063ac     01 00 00 FF 
063b0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
063b4     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
063b8     01 00 00 FF 
063bc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
063c0     01 16 66 56 |  if_ne	neg	result1, #1
063c4     00 16 06 A6 |  if_e	mov	result1, #0
063c8     0C 00 90 FD | 	jmp	#LR__0387
063cc                 | LR__0386
063cc     04 48 06 F1 | 	add	local01, #4
063d0     24 4D 62 FC | 	wrlong	local03, local01
063d4                 | '     }
063d4                 | '     dir->vfsdata = f;
063d4                 | '     return 0;
063d4     00 16 06 F6 | 	mov	result1, #0
063d8                 | LR__0387
063d8     D0 F0 03 F6 | 	mov	ptra, fp
063dc     E0 00 A0 FD | 	call	#popregs_
063e0                 | _fs9p_internal_cc_v_opendir_0261_ret
063e0     2D 00 64 FD | 	ret
063e4                 | 
063e4                 | _fs9p_internal_cc_v_closedir_0264
063e4     02 9C 05 F6 | 	mov	COUNT_, #2
063e8     D1 00 A0 FD | 	call	#pushregs_
063ec     04 3E 06 F1 | 	add	arg01, #4
063f0     1F 49 02 FB | 	rdlong	local01, arg01
063f4     24 3F 02 F6 | 	mov	arg01, local01
063f8     CC F5 BF FD | 	call	#_fs9p_internal_cc_fs_close
063fc     0B 4B 02 F6 | 	mov	local02, result1
06400     24 3F 02 F6 | 	mov	arg01, local01
06404                 | '     return _gc_free(ptr);
06404     78 9D B0 FD | 	call	#__system___gc_free
06408                 | '     fs9_file *f = dir->vfsdata;
06408                 | '     r = fs_close(f);
06408                 | '     free(f);
06408                 | '     return r;
06408     25 17 02 F6 | 	mov	result1, local02
0640c     D0 F0 03 F6 | 	mov	ptra, fp
06410     E0 00 A0 FD | 	call	#popregs_
06414                 | _fs9p_internal_cc_v_closedir_0264_ret
06414     2D 00 64 FD | 	ret
06418                 | 
06418                 | _fs9p_internal_cc_v_readdir_0272
06418     09 9C 05 F6 | 	mov	COUNT_, #9
0641c     D1 00 A0 FD | 	call	#pushregs_
06420     1F 49 02 F6 | 	mov	local01, arg01
06424     20 4B 02 F6 | 	mov	local02, arg02
06428                 | LR__0388
06428     04 00 00 FF 
0642c     B4 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2228
06430     08 4D C2 FA | 	rdbyte	local03, ptr__fs9p_internal_cc_dat__
06434     04 00 00 FF 
06438     B4 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2228
0643c     07 4C 46 F7 | 	zerox	local03, #7
06440     00 4C 1E F2 | 	cmp	local03, #0 wcz
06444     2C 01 90 ED |  if_be	jmp	#LR__0390
06448     04 00 00 FF 
0644c     B8 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2232
06450     08 4F 0A FB | 	rdlong	local04, ptr__fs9p_internal_cc_dat__ wz
06454     04 00 00 FF 
06458     B8 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2232
0645c     14 01 90 AD |  if_e	jmp	#LR__0390
06460     04 00 00 FF 
06464     B8 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2232
06468     08 51 02 FB | 	rdlong	local05, ptr__fs9p_internal_cc_dat__
0646c     28 53 C2 FA | 	rdbyte	local06, local05
06470     01 50 06 F1 | 	add	local05, #1
06474     28 55 C2 FA | 	rdbyte	local07, local05
06478     08 54 66 F0 | 	shl	local07, #8
0647c     2A 53 02 F1 | 	add	local06, local07
06480     0F 52 46 F7 | 	zerox	local06, #15
06484     02 52 06 F1 | 	add	local06, #2
06488     04 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #4
0648c     08 4D C2 FA | 	rdbyte	local03, ptr__fs9p_internal_cc_dat__
06490     29 4F 02 F6 | 	mov	local04, local06
06494     0F 4E 46 F7 | 	zerox	local04, #15
06498     27 4D 82 F1 | 	sub	local03, local04
0649c     08 4D 42 FC | 	wrbyte	local03, ptr__fs9p_internal_cc_dat__
064a0     04 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #4
064a4     08 57 02 FB | 	rdlong	local08, ptr__fs9p_internal_cc_dat__
064a8     0F 52 46 F7 | 	zerox	local06, #15
064ac     29 57 02 F1 | 	add	local08, local06
064b0     08 51 02 FB | 	rdlong	local05, ptr__fs9p_internal_cc_dat__
064b4     08 50 06 F1 | 	add	local05, #8
064b8     08 51 62 FC | 	wrlong	local05, ptr__fs9p_internal_cc_dat__
064bc     11 50 06 F1 | 	add	local05, #17
064c0     08 51 62 FC | 	wrlong	local05, ptr__fs9p_internal_cc_dat__
064c4     08 50 06 F1 | 	add	local05, #8
064c8     08 51 62 FC | 	wrlong	local05, ptr__fs9p_internal_cc_dat__
064cc     08 50 06 F1 | 	add	local05, #8
064d0     08 51 62 FC | 	wrlong	local05, ptr__fs9p_internal_cc_dat__
064d4     28 53 C2 FA | 	rdbyte	local06, local05
064d8     01 50 06 F1 | 	add	local05, #1
064dc     28 55 C2 FA | 	rdbyte	local07, local05
064e0     08 54 66 F0 | 	shl	local07, #8
064e4     2A 53 02 F1 | 	add	local06, local07
064e8     08 4D 02 FB | 	rdlong	local03, ptr__fs9p_internal_cc_dat__
064ec     02 4C 06 F1 | 	add	local03, #2
064f0     08 4D 62 FC | 	wrlong	local03, ptr__fs9p_internal_cc_dat__
064f4     04 00 00 FF 
064f8     B8 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2232
064fc     29 4D 02 F6 | 	mov	local03, local06
06500     0F 4C 46 F7 | 	zerox	local03, #15
06504     40 4C 1E F2 | 	cmp	local03, #64 wcz
06508     1C 00 90 CD |  if_b	jmp	#LR__0389
0650c                 | ' 	  return _seterror( 18 );
0650c     01 00 00 FF 
06510     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06514     05 25 68 FC | 	wrlong	#18, ptr___system__dat__
06518     01 00 00 FF 
0651c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06520     01 16 66 F6 | 	neg	result1, #1
06524     B4 00 90 FD | 	jmp	#LR__0391
06528                 | LR__0389
06528     04 00 00 FF 
0652c     B8 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2232
06530     08 41 02 FB | 	rdlong	arg02, ptr__fs9p_internal_cc_dat__
06534     04 00 00 FF 
06538     B8 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2232
0653c     29 43 02 F6 | 	mov	arg03, local06
06540     0F 42 46 F7 | 	zerox	arg03, #15
06544     25 3F 02 F6 | 	mov	arg01, local02
06548     2C 76 B0 FD | 	call	#__system____builtin_memmove
0654c     29 4D 02 F6 | 	mov	local03, local06
06550     25 4D 02 F1 | 	add	local03, local02
06554     26 01 48 FC | 	wrbyte	#0, local03
06558     04 00 00 FF 
0655c     B8 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2232
06560     08 57 62 FC | 	wrlong	local08, ptr__fs9p_internal_cc_dat__
06564     04 00 00 FF 
06568     B8 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2232
0656c                 | ' 	}
0656c                 | ' 	__builtin_memcpy(ent->d_name, bufptr, siz) ;
0656c                 | ' 	ent->d_name[siz] = 0;
0656c                 | ' 	bufptr = nextbufptr;
0656c                 | ' #line 634 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
0656c                 | ' 	return 0;
0656c     00 16 06 F6 | 	mov	result1, #0
06570     68 00 90 FD | 	jmp	#LR__0391
06574                 | LR__0390
06574     04 48 06 F1 | 	add	local01, #4
06578     24 3F 02 FB | 	rdlong	arg01, local01
0657c     04 48 86 F1 | 	sub	local01, #4
06580     04 00 00 FF 
06584     34 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2100
06588     08 41 02 F6 | 	mov	arg02, ptr__fs9p_internal_cc_dat__
0658c     04 00 00 FF 
06590     34 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2100
06594     80 42 06 F6 | 	mov	arg03, #128
06598     4C F6 BF FD | 	call	#_fs9p_internal_cc_fs_read
0659c     0B 59 0A F6 | 	mov	local09, result1 wz
065a0     01 16 66 A6 |  if_e	neg	result1, #1
065a4     34 00 90 AD |  if_e	jmp	#LR__0391
065a8     00 58 5E F2 | 	cmps	local09, #0 wcz
065ac     2C 17 62 C6 |  if_b	neg	result1, local09
065b0     28 00 90 CD |  if_b	jmp	#LR__0391
065b4     04 00 00 FF 
065b8     B4 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##2228
065bc     08 59 42 FC | 	wrbyte	local09, ptr__fs9p_internal_cc_dat__
065c0     80 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, #128
065c4     08 4D 02 F6 | 	mov	local03, ptr__fs9p_internal_cc_dat__
065c8     84 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, #132
065cc     08 4D 62 FC | 	wrlong	local03, ptr__fs9p_internal_cc_dat__
065d0     04 00 00 FF 
065d4     B8 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##2232
065d8                 | ' 
065d8                 | '     bufdata = r;
065d8                 | '     bufptr = buf;
065d8                 | '     goto again;
065d8     4C FE 9F FD | 	jmp	#LR__0388
065dc                 | LR__0391
065dc     D0 F0 03 F6 | 	mov	ptra, fp
065e0     E0 00 A0 FD | 	call	#popregs_
065e4                 | _fs9p_internal_cc_v_readdir_0272_ret
065e4     2D 00 64 FD | 	ret
065e8                 | 
065e8                 | _fs9p_internal_cc_v_stat_0274
065e8     01 9C 05 F6 | 	mov	COUNT_, #1
065ec     D1 00 A0 FD | 	call	#pushregs_
065f0     02 00 00 FF 
065f4     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
065f8     1F 49 02 F6 | 	mov	local01, arg01
065fc     20 43 02 F6 | 	mov	arg03, arg02
06600     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
06604     24 41 02 F6 | 	mov	arg02, local01
06608     02 00 00 FF 
0660c     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
06610     38 FB BF FD | 	call	#_fs9p_internal_cc_fs_stat
06614                 | ' #line 654 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
06614                 | '     r = fs_stat(&rootdir, name, buf);
06614                 | '     return r;
06614     D0 F0 03 F6 | 	mov	ptra, fp
06618     E0 00 A0 FD | 	call	#popregs_
0661c                 | _fs9p_internal_cc_v_stat_0274_ret
0661c     2D 00 64 FD | 	ret
06620                 | 
06620                 | _fs9p_internal_cc_v_read_0277
06620     06 9C 05 F6 | 	mov	COUNT_, #6
06624     D1 00 A0 FD | 	call	#pushregs_
06628     1F 49 02 F6 | 	mov	local01, arg01
0662c     20 4B 02 F6 | 	mov	local02, arg02
06630     21 4D 02 F6 | 	mov	local03, arg03
06634     24 4F 0A FB | 	rdlong	local04, local01 wz
06638     1C 00 90 5D |  if_ne	jmp	#LR__0392
0663c                 | '         return _seterror( 5 );
0663c     01 00 00 FF 
06640     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06644     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
06648     01 00 00 FF 
0664c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06650     01 16 66 F6 | 	neg	result1, #1
06654     6C 00 90 FD | 	jmp	#LR__0395
06658                 | LR__0392
06658     27 3F 02 F6 | 	mov	arg01, local04
0665c     25 41 02 F6 | 	mov	arg02, local02
06660     26 43 02 F6 | 	mov	arg03, local03
06664     80 F5 BF FD | 	call	#_fs9p_internal_cc_fs_read
06668     0B 51 02 F6 | 	mov	local05, result1
0666c     00 50 5E F2 | 	cmps	local05, #0 wcz
06670     34 00 90 3D |  if_ae	jmp	#LR__0393
06674     08 48 06 F1 | 	add	local01, #8
06678     24 53 02 FB | 	rdlong	local06, local01
0667c     20 52 46 F5 | 	or	local06, #32
06680     24 53 62 FC | 	wrlong	local06, local01
06684                 | '         fil->state |=  (0x20) ;
06684                 | '         return _seterror(-r);
06684     28 3F 6A F6 | 	neg	arg01, local05 wz
06688     01 00 00 FF 
0668c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06690     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
06694     01 00 00 FF 
06698     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0669c     01 16 66 56 |  if_ne	neg	result1, #1
066a0     00 16 06 A6 |  if_e	mov	result1, #0
066a4     1C 00 90 FD | 	jmp	#LR__0395
066a8                 | LR__0393
066a8     00 50 0E F2 | 	cmp	local05, #0 wz
066ac     10 00 90 5D |  if_ne	jmp	#LR__0394
066b0     08 48 06 F1 | 	add	local01, #8
066b4     24 53 02 FB | 	rdlong	local06, local01
066b8     10 52 46 F5 | 	or	local06, #16
066bc     24 53 62 FC | 	wrlong	local06, local01
066c0                 | LR__0394
066c0                 | '         fil->state |=  (0x10) ;
066c0                 | '     }
066c0                 | '     return r;
066c0     28 17 02 F6 | 	mov	result1, local05
066c4                 | LR__0395
066c4     D0 F0 03 F6 | 	mov	ptra, fp
066c8     E0 00 A0 FD | 	call	#popregs_
066cc                 | _fs9p_internal_cc_v_read_0277_ret
066cc     2D 00 64 FD | 	ret
066d0                 | 
066d0                 | _fs9p_internal_cc_v_write_0280
066d0     06 9C 05 F6 | 	mov	COUNT_, #6
066d4     D1 00 A0 FD | 	call	#pushregs_
066d8     1F 49 02 F6 | 	mov	local01, arg01
066dc     20 4B 02 F6 | 	mov	local02, arg02
066e0     21 4D 02 F6 | 	mov	local03, arg03
066e4     24 4F 0A FB | 	rdlong	local04, local01 wz
066e8     1C 00 90 5D |  if_ne	jmp	#LR__0396
066ec                 | '         return _seterror( 5 );
066ec     01 00 00 FF 
066f0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
066f4     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
066f8     01 00 00 FF 
066fc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06700     01 16 66 F6 | 	neg	result1, #1
06704     54 00 90 FD | 	jmp	#LR__0398
06708                 | LR__0396
06708     27 3F 02 F6 | 	mov	arg01, local04
0670c     25 41 02 F6 | 	mov	arg02, local02
06710     26 43 02 F6 | 	mov	arg03, local03
06714     B0 F6 BF FD | 	call	#_fs9p_internal_cc_fs_write
06718     0B 51 02 F6 | 	mov	local05, result1
0671c     00 50 5E F2 | 	cmps	local05, #0 wcz
06720     34 00 90 3D |  if_ae	jmp	#LR__0397
06724     08 48 06 F1 | 	add	local01, #8
06728     24 53 02 FB | 	rdlong	local06, local01
0672c     20 52 46 F5 | 	or	local06, #32
06730     24 53 62 FC | 	wrlong	local06, local01
06734                 | '         fil->state |=  (0x20) ;
06734                 | '         return _seterror(-r);
06734     28 3F 6A F6 | 	neg	arg01, local05 wz
06738     01 00 00 FF 
0673c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06740     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
06744     01 00 00 FF 
06748     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0674c     01 16 66 56 |  if_ne	neg	result1, #1
06750     00 16 06 A6 |  if_e	mov	result1, #0
06754     04 00 90 FD | 	jmp	#LR__0398
06758                 | LR__0397
06758                 | '     }
06758                 | '     return r;
06758     28 17 02 F6 | 	mov	result1, local05
0675c                 | LR__0398
0675c     D0 F0 03 F6 | 	mov	ptra, fp
06760     E0 00 A0 FD | 	call	#popregs_
06764                 | _fs9p_internal_cc_v_write_0280_ret
06764     2D 00 64 FD | 	ret
06768                 | 
06768                 | _fs9p_internal_cc_v_lseek_0285
06768     0A 9C 05 F6 | 	mov	COUNT_, #10
0676c     D1 00 A0 FD | 	call	#pushregs_
06770     4C F0 07 F1 | 	add	ptra, #76
06774     04 A0 05 F1 | 	add	fp, #4
06778     D0 3E 62 FC | 	wrlong	arg01, fp
0677c     04 A0 05 F1 | 	add	fp, #4
06780     D0 40 62 FC | 	wrlong	arg02, fp
06784     04 A0 05 F1 | 	add	fp, #4
06788     D0 42 62 FC | 	wrlong	arg03, fp
0678c     08 A0 85 F1 | 	sub	fp, #8
06790     D0 48 02 FB | 	rdlong	local01, fp
06794     24 4B 02 FB | 	rdlong	local02, local01
06798     0C A0 05 F1 | 	add	fp, #12
0679c     D0 4A 62 FC | 	wrlong	local02, fp
067a0     D0 48 0A FB | 	rdlong	local01, fp wz
067a4     10 A0 85 F1 | 	sub	fp, #16
067a8     1C 00 90 5D |  if_ne	jmp	#LR__0399
067ac                 | '         return _seterror( 5 );
067ac     01 00 00 FF 
067b0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
067b4     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
067b8     01 00 00 FF 
067bc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
067c0     01 16 66 F6 | 	neg	result1, #1
067c4     44 02 90 FD | 	jmp	#LR__0408
067c8                 | LR__0399
067c8     0C A0 05 F1 | 	add	fp, #12
067cc     D0 48 0A FB | 	rdlong	local01, fp wz
067d0     0C A0 85 F1 | 	sub	fp, #12
067d4     24 00 90 5D |  if_ne	jmp	#LR__0400
067d8     10 A0 05 F1 | 	add	fp, #16
067dc     D0 48 02 FB | 	rdlong	local01, fp
067e0     08 A0 85 F1 | 	sub	fp, #8
067e4     D0 4A 02 FB | 	rdlong	local02, fp
067e8     08 A0 85 F1 | 	sub	fp, #8
067ec     02 00 00 FF 
067f0     0C 48 06 F1 | 	add	local01, ##1036
067f4     24 4B 62 FC | 	wrlong	local02, local01
067f8     F8 01 90 FD | 	jmp	#LR__0407
067fc                 | LR__0400
067fc     0C A0 05 F1 | 	add	fp, #12
06800     D0 48 02 FB | 	rdlong	local01, fp
06804     0C A0 85 F1 | 	sub	fp, #12
06808     01 48 0E F2 | 	cmp	local01, #1 wz
0680c     5C 01 90 5D |  if_ne	jmp	#LR__0404
06810     10 A0 05 F1 | 	add	fp, #16
06814     D0 4C 02 FB | 	rdlong	local03, fp
06818     02 00 00 FF 
0681c     0C 4C 06 F1 | 	add	local03, ##1036
06820     26 49 02 FB | 	rdlong	local01, local03
06824     08 A0 85 F1 | 	sub	fp, #8
06828     D0 4E 02 FB | 	rdlong	local04, fp
0682c     27 49 02 F1 | 	add	local01, local04
06830     0C A0 05 F1 | 	add	fp, #12
06834     D0 48 62 FC | 	wrlong	local01, fp
06838     0C A0 85 F1 | 	sub	fp, #12
0683c     D0 48 02 FB | 	rdlong	local01, fp
06840     08 A0 85 F1 | 	sub	fp, #8
06844     00 48 5E F2 | 	cmps	local01, #0 wcz
06848     58 00 90 ED |  if_be	jmp	#LR__0401
0684c     10 A0 05 F1 | 	add	fp, #16
06850     D0 4A 02 FB | 	rdlong	local02, fp
06854     04 A0 05 F1 | 	add	fp, #4
06858     D0 4E 02 FB | 	rdlong	local04, fp
0685c     14 A0 85 F1 | 	sub	fp, #20
06860     02 00 00 FF 
06864     0C 4A 06 F1 | 	add	local02, ##1036
06868     25 51 02 FB | 	rdlong	local05, local02
0686c     28 4F 1A F2 | 	cmp	local04, local05 wcz
06870     30 00 90 3D |  if_ae	jmp	#LR__0401
06874     10 A0 05 F1 | 	add	fp, #16
06878     D0 4E 02 FB | 	rdlong	local04, fp
0687c     27 53 02 F6 | 	mov	local06, local04
06880     10 A0 85 F1 | 	sub	fp, #16
06884     02 00 00 FF 
06888     10 52 06 F1 | 	add	local06, ##1040
0688c     29 51 02 FB | 	rdlong	local05, local06
06890     01 50 06 F1 | 	add	local05, #1
06894     02 00 00 FF 
06898     10 4E 06 F1 | 	add	local04, ##1040
0689c     27 51 62 FC | 	wrlong	local05, local04
068a0     A4 00 90 FD | 	jmp	#LR__0403
068a4                 | LR__0401
068a4     08 A0 05 F1 | 	add	fp, #8
068a8     D0 48 02 FB | 	rdlong	local01, fp
068ac     08 A0 85 F1 | 	sub	fp, #8
068b0     00 48 5E F2 | 	cmps	local01, #0 wcz
068b4     90 00 90 3D |  if_ae	jmp	#LR__0402
068b8     10 A0 05 F1 | 	add	fp, #16
068bc     D0 4A 02 FB | 	rdlong	local02, fp
068c0     04 A0 05 F1 | 	add	fp, #4
068c4     D0 4E 02 FB | 	rdlong	local04, fp
068c8     14 A0 85 F1 | 	sub	fp, #20
068cc     02 00 00 FF 
068d0     0C 4A 06 F1 | 	add	local02, ##1036
068d4     25 51 02 FB | 	rdlong	local05, local02
068d8     28 4F 1A F2 | 	cmp	local04, local05 wcz
068dc     68 00 90 ED |  if_be	jmp	#LR__0402
068e0     10 A0 05 F1 | 	add	fp, #16
068e4     D0 4A 02 FB | 	rdlong	local02, fp
068e8     25 4D 02 F6 | 	mov	local03, local02
068ec     02 00 00 FF 
068f0     10 4C 06 F1 | 	add	local03, ##1040
068f4     26 55 02 FB | 	rdlong	local07, local03
068f8     02 00 00 FF 
068fc     10 4C 86 F1 | 	sub	local03, ##1040
06900     2A 49 02 F6 | 	mov	local01, local07
06904     25 57 02 F6 | 	mov	local08, local02
06908     2B 4F 02 F6 | 	mov	local04, local08
0690c     25 59 02 F6 | 	mov	local09, local02
06910     10 A0 85 F1 | 	sub	fp, #16
06914     2C 53 02 F6 | 	mov	local06, local09
06918     02 00 00 FF 
0691c     10 52 06 F1 | 	add	local06, ##1040
06920     29 5B 02 FB | 	rdlong	local10, local06
06924     02 00 00 FF 
06928     10 52 86 F1 | 	sub	local06, ##1040
0692c     2D 51 02 F6 | 	mov	local05, local10
06930     01 50 86 F1 | 	sub	local05, #1
06934     02 00 00 FF 
06938     10 4E 06 F1 | 	add	local04, ##1040
0693c     27 51 62 FC | 	wrlong	local05, local04
06940     02 00 00 FF 
06944     10 4E 86 F1 | 	sub	local04, ##1040
06948                 | LR__0402
06948                 | LR__0403
06948     10 A0 05 F1 | 	add	fp, #16
0694c     D0 48 02 FB | 	rdlong	local01, fp
06950     04 A0 05 F1 | 	add	fp, #4
06954     D0 4A 02 FB | 	rdlong	local02, fp
06958     14 A0 85 F1 | 	sub	fp, #20
0695c     02 00 00 FF 
06960     0C 48 06 F1 | 	add	local01, ##1036
06964     24 4B 62 FC | 	wrlong	local02, local01
06968     88 00 90 FD | 	jmp	#LR__0406
0696c                 | LR__0404
0696c     10 A0 05 F1 | 	add	fp, #16
06970     D0 3E 02 FB | 	rdlong	arg01, fp
06974     08 A0 05 F1 | 	add	fp, #8
06978     D0 40 02 F6 | 	mov	arg02, fp
0697c     18 A0 85 F1 | 	sub	fp, #24
06980     2C F6 BF FD | 	call	#_fs9p_internal_cc_fs_fstat
06984     48 A0 05 F1 | 	add	fp, #72
06988     D0 16 62 FC | 	wrlong	result1, fp
0698c     48 A0 85 F1 | 	sub	fp, #72
06990     00 16 5E F2 | 	cmps	result1, #0 wcz
06994     1C 00 90 3D |  if_ae	jmp	#LR__0405
06998                 | ' 	    return _seterror( 10 );
06998     01 00 00 FF 
0699c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
069a0     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
069a4     01 00 00 FF 
069a8     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
069ac     01 16 66 F6 | 	neg	result1, #1
069b0     58 00 90 FD | 	jmp	#LR__0408
069b4                 | LR__0405
069b4     10 A0 05 F1 | 	add	fp, #16
069b8     D0 48 02 FB | 	rdlong	local01, fp
069bc     20 A0 05 F1 | 	add	fp, #32
069c0     D0 4A 02 FB | 	rdlong	local02, fp
069c4     28 A0 85 F1 | 	sub	fp, #40
069c8     D0 4E 02 FB | 	rdlong	local04, fp
069cc     27 4B 82 F1 | 	sub	local02, local04
069d0     02 00 00 FF 
069d4     0C 48 06 F1 | 	add	local01, ##1036
069d8     24 4B 62 FC | 	wrlong	local02, local01
069dc     08 A0 05 F1 | 	add	fp, #8
069e0     D0 48 02 FB | 	rdlong	local01, fp
069e4     10 A0 85 F1 | 	sub	fp, #16
069e8     02 00 00 FF 
069ec     10 48 06 F1 | 	add	local01, ##1040
069f0     24 01 68 FC | 	wrlong	#0, local01
069f4                 | LR__0406
069f4                 | LR__0407
069f4                 | ' 	}
069f4                 | ' 	f->offlo = stbuf.st_size - offset;
069f4                 | ' 	f->offhi = 0;
069f4                 | '     }
069f4                 | ' #line 736 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
069f4                 | '     return f->offlo;
069f4     10 A0 05 F1 | 	add	fp, #16
069f8     D0 48 02 FB | 	rdlong	local01, fp
069fc     10 A0 85 F1 | 	sub	fp, #16
06a00     02 00 00 FF 
06a04     0C 48 06 F1 | 	add	local01, ##1036
06a08     24 17 02 FB | 	rdlong	result1, local01
06a0c                 | LR__0408
06a0c     D0 F0 03 F6 | 	mov	ptra, fp
06a10     E0 00 A0 FD | 	call	#popregs_
06a14                 | _fs9p_internal_cc_v_lseek_0285_ret
06a14     2D 00 64 FD | 	ret
06a18                 | 
06a18                 | _fs9p_internal_cc_v_ioctl_0286
06a18                 | ' {
06a18                 | '     return - 10 ;
06a18     0A 16 66 F6 | 	neg	result1, #10
06a1c                 | _fs9p_internal_cc_v_ioctl_0286_ret
06a1c     2D 00 64 FD | 	ret
06a20                 | 
06a20                 | _fs9p_internal_cc_v_mkdir_0289
06a20     05 9C 05 F6 | 	mov	COUNT_, #5
06a24     D1 00 A0 FD | 	call	#pushregs_
06a28     1F 49 02 F6 | 	mov	local01, arg01
06a2c     20 4B 02 F6 | 	mov	local02, arg02
06a30     02 00 00 FF 
06a34     14 3E 06 F6 | 	mov	arg01, ##1044
06a38                 | '     return _gc_alloc(size);
06a38     10 40 06 F6 | 	mov	arg02, #16
06a3c     08 96 B0 FD | 	call	#__system___gc_doalloc
06a40     0B 4D 0A F6 | 	mov	local03, result1 wz
06a44     1C 00 90 5D |  if_ne	jmp	#LR__0409
06a48                 | '         return _seterror( 7 );
06a48     01 00 00 FF 
06a4c     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06a50     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
06a54     01 00 00 FF 
06a58     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06a5c     01 16 66 F6 | 	neg	result1, #1
06a60     6C 00 90 FD | 	jmp	#LR__0411
06a64                 | LR__0409
06a64     26 3F 02 F6 | 	mov	arg01, local03
06a68     00 40 06 F6 | 	mov	arg02, #0
06a6c     02 00 00 FF 
06a70     14 42 06 F6 | 	mov	arg03, ##1044
06a74     1F 4F 02 F6 | 	mov	local04, arg01
06a78     C1 00 A0 FD | 	call	#\builtin_bytefill_
06a7c     27 17 02 F6 | 	mov	result1, local04
06a80     1F 4A 26 F4 | 	bith	local02, #31
06a84     25 43 02 F6 | 	mov	arg03, local02
06a88     26 3F 02 F6 | 	mov	arg01, local03
06a8c     24 41 02 F6 | 	mov	arg02, local01
06a90     E8 ED BF FD | 	call	#_fs9p_internal_cc_fs_create
06a94     0B 51 02 F6 | 	mov	local05, result1
06a98     26 3F 02 F6 | 	mov	arg01, local03
06a9c                 | '     return _gc_free(ptr);
06a9c     E0 96 B0 FD | 	call	#__system___gc_free
06aa0     00 50 0E F2 | 	cmp	local05, #0 wz
06aa4     24 00 90 AD |  if_e	jmp	#LR__0410
06aa8                 | '       return _seterror(-r);
06aa8     28 3F 6A F6 | 	neg	arg01, local05 wz
06aac     01 00 00 FF 
06ab0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06ab4     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
06ab8     01 00 00 FF 
06abc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06ac0     01 16 66 56 |  if_ne	neg	result1, #1
06ac4     00 16 06 A6 |  if_e	mov	result1, #0
06ac8     04 00 90 FD | 	jmp	#LR__0411
06acc                 | LR__0410
06acc                 | '     }
06acc                 | '     return 0;
06acc     00 16 06 F6 | 	mov	result1, #0
06ad0                 | LR__0411
06ad0     D0 F0 03 F6 | 	mov	ptra, fp
06ad4     E0 00 A0 FD | 	call	#popregs_
06ad8                 | _fs9p_internal_cc_v_mkdir_0289_ret
06ad8     2D 00 64 FD | 	ret
06adc                 | 
06adc                 | _fs9p_internal_cc_v_remove_0291
06adc     02 00 00 FF 
06ae0     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
06ae4     1F 41 02 F6 | 	mov	arg02, arg01
06ae8     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
06aec     02 00 00 FF 
06af0     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
06af4     48 F0 BF FD | 	call	#_fs9p_internal_cc_fs_delete
06af8                 | '     r = fs_delete(&rootdir, name);
06af8                 | '     return r;
06af8                 | _fs9p_internal_cc_v_remove_0291_ret
06af8     2D 00 64 FD | 	ret
06afc                 | 
06afc                 | _fs9p_internal_cc_v_rmdir_0292
06afc                 | ' {
06afc                 | '     return v_remove(name);
06afc     02 00 00 FF 
06b00     1C 10 06 F1 | 	add	ptr__fs9p_internal_cc_dat__, ##1052
06b04     1F 41 02 F6 | 	mov	arg02, arg01
06b08     08 3F 02 F6 | 	mov	arg01, ptr__fs9p_internal_cc_dat__
06b0c     02 00 00 FF 
06b10     1C 10 86 F1 | 	sub	ptr__fs9p_internal_cc_dat__, ##1052
06b14     28 F0 BF FD | 	call	#_fs9p_internal_cc_fs_delete
06b18                 | '     r = fs_delete(&rootdir, name);
06b18                 | '     return r;
06b18                 | _fs9p_internal_cc_v_rmdir_0292_ret
06b18     2D 00 64 FD | 	ret
06b1c                 | 
06b1c                 | _fs9p_internal_cc_v_rename_0293
06b1c                 | ' {
06b1c                 | ' 
06b1c                 | '     return - 16 ;
06b1c     10 16 66 F6 | 	neg	result1, #16
06b20                 | _fs9p_internal_cc_v_rename_0293_ret
06b20     2D 00 64 FD | 	ret
06b24                 | 
06b24                 | _fs9p_internal_cc_v_open_0297
06b24     06 9C 05 F6 | 	mov	COUNT_, #6
06b28     D1 00 A0 FD | 	call	#pushregs_
06b2c     1F 49 02 F6 | 	mov	local01, arg01
06b30     20 4B 02 F6 | 	mov	local02, arg02
06b34     21 4D 02 F6 | 	mov	local03, arg03
06b38     02 00 00 FF 
06b3c     14 3E 06 F6 | 	mov	arg01, ##1044
06b40                 | '     return _gc_alloc(size);
06b40     10 40 06 F6 | 	mov	arg02, #16
06b44     00 95 B0 FD | 	call	#__system___gc_doalloc
06b48     0B 4F 0A F6 | 	mov	local04, result1 wz
06b4c                 | '       return - 7 ;
06b4c     07 16 66 A6 |  if_e	neg	result1, #7
06b50     74 00 90 AD |  if_e	jmp	#LR__0413
06b54     27 3F 02 F6 | 	mov	arg01, local04
06b58     00 40 06 F6 | 	mov	arg02, #0
06b5c     02 00 00 FF 
06b60     14 42 06 F6 | 	mov	arg03, ##1044
06b64     1F 51 02 F6 | 	mov	local05, arg01
06b68     C1 00 A0 FD | 	call	#\builtin_bytefill_
06b6c     28 17 02 F6 | 	mov	result1, local05
06b70     26 43 02 F6 | 	mov	arg03, local03
06b74     03 42 06 F5 | 	and	arg03, #3
06b78     08 4C CE F7 | 	test	local03, #8 wz
06b7c     10 42 46 55 |  if_ne	or	arg03, #16
06b80     27 3F 02 F6 | 	mov	arg01, local04
06b84     25 41 02 F6 | 	mov	arg02, local02
06b88     B0 EC BF FD | 	call	#_fs9p_internal_cc_fs_open
06b8c     0B 53 0A F6 | 	mov	local06, result1 wz
06b90     2C 00 90 AD |  if_e	jmp	#LR__0412
06b94     27 3F 02 F6 | 	mov	arg01, local04
06b98                 | '     return _gc_free(ptr);
06b98     E4 95 B0 FD | 	call	#__system___gc_free
06b9c                 | '     free(f);
06b9c                 | ' #line 808 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
06b9c                 | '     return _seterror(-r);
06b9c     29 3F 6A F6 | 	neg	arg01, local06 wz
06ba0     01 00 00 FF 
06ba4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
06ba8     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
06bac     01 00 00 FF 
06bb0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
06bb4     01 16 66 56 |  if_ne	neg	result1, #1
06bb8     00 16 06 A6 |  if_e	mov	result1, #0
06bbc     08 00 90 FD | 	jmp	#LR__0413
06bc0                 | LR__0412
06bc0     24 4F 62 FC | 	wrlong	local04, local01
06bc4                 | '   }
06bc4                 | ' #line 815 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fs9p/fs9p_internal.cc"
06bc4                 | '   fil->vfsdata = f;
06bc4                 | '   return 0;
06bc4     00 16 06 F6 | 	mov	result1, #0
06bc8                 | LR__0413
06bc8     D0 F0 03 F6 | 	mov	ptra, fp
06bcc     E0 00 A0 FD | 	call	#popregs_
06bd0                 | _fs9p_internal_cc_v_open_0297_ret
06bd0     2D 00 64 FD | 	ret
06bd4                 | 
06bd4                 | _ff_cc_disk_initialize
06bd4     08 9C 05 F6 | 	mov	COUNT_, #8
06bd8     D1 00 A0 FD | 	call	#pushregs_
06bdc     30 F0 07 F1 | 	add	ptra, #48
06be0     04 A0 05 F1 | 	add	fp, #4
06be4     D0 3E 42 FC | 	wrbyte	arg01, fp
06be8     70 0F 06 F1 | 	add	ptr__ff_cc_dat__, #368
06bec     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
06bf0     1C A0 05 F1 | 	add	fp, #28
06bf4     D0 48 62 FC | 	wrlong	local01, fp
06bf8     04 0E 86 F1 | 	sub	ptr__ff_cc_dat__, #4
06bfc     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
06c00     04 A0 05 F1 | 	add	fp, #4
06c04     D0 48 62 FC | 	wrlong	local01, fp
06c08     08 0E 06 F1 | 	add	ptr__ff_cc_dat__, #8
06c0c     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
06c10     04 A0 05 F1 | 	add	fp, #4
06c14     D0 48 62 FC | 	wrlong	local01, fp
06c18     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
06c1c     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
06c20     78 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
06c24     04 A0 05 F1 | 	add	fp, #4
06c28     D0 48 62 FC | 	wrlong	local01, fp
06c2c     28 A0 85 F1 | 	sub	fp, #40
06c30     D0 48 CA FA | 	rdbyte	local01, fp wz
06c34     04 A0 85 F1 | 	sub	fp, #4
06c38                 | ' #line 420 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
06c38                 | '             return RES_NOTRDY;
06c38     03 16 06 56 |  if_ne	mov	result1, #3
06c3c     2C 03 90 5D |  if_ne	jmp	#LR__0427
06c40     13 00 00 FF 
06c44     10 3F 06 F6 | 	mov	arg01, ##10000
06c48     48 71 B0 FD | 	call	#__system___waitus
06c4c     20 A0 05 F1 | 	add	fp, #32
06c50     D0 3E 02 FB | 	rdlong	arg01, fp
06c54     41 3E 62 FD | 	dirh	arg01
06c58     59 3E 62 FD | 	drvh	arg01
06c5c     1F 20 64 FD | 	waitx	#16
06c60     04 A0 05 F1 | 	add	fp, #4
06c64     D0 3E 02 FB | 	rdlong	arg01, fp
06c68     41 3E 62 FD | 	dirh	arg01
06c6c     58 3E 62 FD | 	drvl	arg01
06c70     1F 20 64 FD | 	waitx	#16
06c74     04 A0 05 F1 | 	add	fp, #4
06c78     D0 3E 02 FB | 	rdlong	arg01, fp
06c7c     41 3E 62 FD | 	dirh	arg01
06c80     04 A0 05 F1 | 	add	fp, #4
06c84     D0 3E 02 FB | 	rdlong	arg01, fp
06c88     50 3E 62 FD | 	fltl	arg01
06c8c                 | '         }
06c8c                 | ' 
06c8c                 | ' 	dly_us(10000);
06c8c                 | ' 	_dirh(PIN_SS) ;  (_pinh(PIN_SS), (_waitx(16)) ) ;
06c8c                 | ' 	_dirh(PIN_CLK) ;  (_pinl(PIN_CLK), (_waitx(16)) ) ;
06c8c                 | ' 	_dirh(PIN_DI) ;
06c8c                 | ' 	_fltl(PIN_DO) ;
06c8c                 | ' 
06c8c                 | ' 	for (n = 100; n; n--) rcvr_mmc(buf, 1);
06c8c     24 A0 85 F1 | 	sub	fp, #36
06c90     D0 C8 48 FC | 	wrbyte	#100, fp
06c94     08 A0 85 F1 | 	sub	fp, #8
06c98                 | LR__0414
06c98     08 A0 05 F1 | 	add	fp, #8
06c9c     D0 4A CA FA | 	rdbyte	local02, fp wz
06ca0     08 A0 85 F1 | 	sub	fp, #8
06ca4     34 00 90 AD |  if_e	jmp	#LR__0415
06ca8     14 A0 05 F1 | 	add	fp, #20
06cac     D0 3E 02 F6 | 	mov	arg01, fp
06cb0     14 A0 85 F1 | 	sub	fp, #20
06cb4     01 40 06 F6 | 	mov	arg02, #1
06cb8     38 65 B0 FD | 	call	#_ff_cc_rcvr_mmc_1046
06cbc     08 A0 05 F1 | 	add	fp, #8
06cc0     D0 4C C2 FA | 	rdbyte	local03, fp
06cc4     D0 4E C2 FA | 	rdbyte	local04, fp
06cc8     27 51 02 F6 | 	mov	local05, local04
06ccc     01 50 86 F1 | 	sub	local05, #1
06cd0     D0 50 42 FC | 	wrbyte	local05, fp
06cd4     08 A0 85 F1 | 	sub	fp, #8
06cd8     BC FF 9F FD | 	jmp	#LR__0414
06cdc                 | LR__0415
06cdc     0C A0 05 F1 | 	add	fp, #12
06ce0     D0 00 48 FC | 	wrbyte	#0, fp
06ce4     0C A0 85 F1 | 	sub	fp, #12
06ce8     00 3E 06 F6 | 	mov	arg01, #0
06cec     00 40 06 F6 | 	mov	arg02, #0
06cf0     D8 69 B0 FD | 	call	#_ff_cc_send_cmd_1067
06cf4     0B 49 02 F6 | 	mov	local01, result1
06cf8     07 48 46 F7 | 	zerox	local01, #7
06cfc     01 48 0E F2 | 	cmp	local01, #1 wz
06d00     20 02 90 5D |  if_ne	jmp	#LR__0426
06d04     08 3E 06 F6 | 	mov	arg01, #8
06d08     AA 41 06 F6 | 	mov	arg02, #426
06d0c     BC 69 B0 FD | 	call	#_ff_cc_send_cmd_1067
06d10     0B 49 02 F6 | 	mov	local01, result1
06d14     07 48 46 F7 | 	zerox	local01, #7
06d18     01 48 0E F2 | 	cmp	local01, #1 wz
06d1c     04 01 90 5D |  if_ne	jmp	#LR__0418
06d20     14 A0 05 F1 | 	add	fp, #20
06d24     D0 3E 02 F6 | 	mov	arg01, fp
06d28     14 A0 85 F1 | 	sub	fp, #20
06d2c     04 40 06 F6 | 	mov	arg02, #4
06d30     C0 64 B0 FD | 	call	#_ff_cc_rcvr_mmc_1046
06d34     16 A0 05 F1 | 	add	fp, #22
06d38     D0 48 C2 FA | 	rdbyte	local01, fp
06d3c     16 A0 85 F1 | 	sub	fp, #22
06d40     07 48 46 F7 | 	zerox	local01, #7
06d44     01 48 0E F2 | 	cmp	local01, #1 wz
06d48     D8 01 90 5D |  if_ne	jmp	#LR__0425
06d4c     17 A0 05 F1 | 	add	fp, #23
06d50     D0 52 C2 FA | 	rdbyte	local06, fp
06d54     17 A0 85 F1 | 	sub	fp, #23
06d58     07 52 46 F7 | 	zerox	local06, #7
06d5c     AA 52 0E F2 | 	cmp	local06, #170 wz
06d60     C0 01 90 5D |  if_ne	jmp	#LR__0425
06d64                 | ' 				for (tmr = 1000; tmr; tmr--) {
06d64     18 A0 05 F1 | 	add	fp, #24
06d68     01 00 80 FF 
06d6c     D0 D0 6B FC | 	wrlong	##1000, fp
06d70     18 A0 85 F1 | 	sub	fp, #24
06d74                 | LR__0416
06d74     18 A0 05 F1 | 	add	fp, #24
06d78     D0 52 0A FB | 	rdlong	local06, fp wz
06d7c     18 A0 85 F1 | 	sub	fp, #24
06d80     3C 00 90 AD |  if_e	jmp	#LR__0417
06d84     A9 3E 06 F6 | 	mov	arg01, #169
06d88     1E 40 C6 F9 | 	decod	arg02, #30
06d8c     3C 69 B0 FD | 	call	#_ff_cc_send_cmd_1067
06d90     0B 55 02 F6 | 	mov	local07, result1
06d94     07 54 4E F7 | 	zerox	local07, #7 wz
06d98     24 00 90 AD |  if_e	jmp	#LR__0417
06d9c     01 00 00 FF 
06da0     E8 3F 06 F6 | 	mov	arg01, ##1000
06da4     EC 6F B0 FD | 	call	#__system___waitus
06da8     18 A0 05 F1 | 	add	fp, #24
06dac     D0 50 02 FB | 	rdlong	local05, fp
06db0     01 50 86 F1 | 	sub	local05, #1
06db4     D0 50 62 FC | 	wrlong	local05, fp
06db8     18 A0 85 F1 | 	sub	fp, #24
06dbc     B4 FF 9F FD | 	jmp	#LR__0416
06dc0                 | LR__0417
06dc0     18 A0 05 F1 | 	add	fp, #24
06dc4     D0 4A 02 FB | 	rdlong	local02, fp
06dc8     18 A0 85 F1 | 	sub	fp, #24
06dcc     25 49 0A F6 | 	mov	local01, local02 wz
06dd0     50 01 90 AD |  if_e	jmp	#LR__0425
06dd4     3A 3E 06 F6 | 	mov	arg01, #58
06dd8     00 40 06 F6 | 	mov	arg02, #0
06ddc     EC 68 B0 FD | 	call	#_ff_cc_send_cmd_1067
06de0     0B 53 02 F6 | 	mov	local06, result1
06de4     07 52 4E F7 | 	zerox	local06, #7 wz
06de8     38 01 90 5D |  if_ne	jmp	#LR__0425
06dec     14 A0 05 F1 | 	add	fp, #20
06df0     D0 3E 02 F6 | 	mov	arg01, fp
06df4     14 A0 85 F1 | 	sub	fp, #20
06df8     04 40 06 F6 | 	mov	arg02, #4
06dfc     F4 63 B0 FD | 	call	#_ff_cc_rcvr_mmc_1046
06e00     14 A0 05 F1 | 	add	fp, #20
06e04     D0 4A C2 FA | 	rdbyte	local02, fp
06e08     40 4A CE F7 | 	test	local02, #64 wz
06e0c     0C 48 06 56 |  if_ne	mov	local01, #12
06e10     04 48 06 A6 |  if_e	mov	local01, #4
06e14     08 A0 85 F1 | 	sub	fp, #8
06e18     D0 48 42 FC | 	wrbyte	local01, fp
06e1c     0C A0 85 F1 | 	sub	fp, #12
06e20     00 01 90 FD | 	jmp	#LR__0425
06e24                 | LR__0418
06e24     A9 3E 06 F6 | 	mov	arg01, #169
06e28     00 40 06 F6 | 	mov	arg02, #0
06e2c     9C 68 B0 FD | 	call	#_ff_cc_send_cmd_1067
06e30     0B 49 02 F6 | 	mov	local01, result1
06e34     07 48 46 F7 | 	zerox	local01, #7
06e38     01 48 1E F2 | 	cmp	local01, #1 wcz
06e3c     18 00 90 1D |  if_a	jmp	#LR__0419
06e40     0C A0 05 F1 | 	add	fp, #12
06e44     D0 04 48 FC | 	wrbyte	#2, fp
06e48     04 A0 05 F1 | 	add	fp, #4
06e4c     D0 52 49 FC | 	wrbyte	#169, fp
06e50     10 A0 85 F1 | 	sub	fp, #16
06e54     14 00 90 FD | 	jmp	#LR__0420
06e58                 | LR__0419
06e58     0C A0 05 F1 | 	add	fp, #12
06e5c     D0 02 48 FC | 	wrbyte	#1, fp
06e60     04 A0 05 F1 | 	add	fp, #4
06e64     D0 02 48 FC | 	wrbyte	#1, fp
06e68     10 A0 85 F1 | 	sub	fp, #16
06e6c                 | LR__0420
06e6c                 | ' 				ty =  0x01 ; cmd =  (1) ;
06e6c                 | ' 			}
06e6c                 | ' 			for (tmr = 1000; tmr; tmr--) {
06e6c     18 A0 05 F1 | 	add	fp, #24
06e70     01 00 80 FF 
06e74     D0 D0 6B FC | 	wrlong	##1000, fp
06e78     18 A0 85 F1 | 	sub	fp, #24
06e7c                 | LR__0421
06e7c     18 A0 05 F1 | 	add	fp, #24
06e80     D0 4A 0A FB | 	rdlong	local02, fp wz
06e84     18 A0 85 F1 | 	sub	fp, #24
06e88     54 00 90 AD |  if_e	jmp	#LR__0422
06e8c     10 A0 05 F1 | 	add	fp, #16
06e90     D0 3E C2 FA | 	rdbyte	arg01, fp
06e94     10 A0 85 F1 | 	sub	fp, #16
06e98     00 4E 06 F6 | 	mov	local04, #0
06e9c     00 40 06 F6 | 	mov	arg02, #0
06ea0     28 68 B0 FD | 	call	#_ff_cc_send_cmd_1067
06ea4     0B 57 02 F6 | 	mov	local08, result1
06ea8     2B 55 02 F6 | 	mov	local07, local08
06eac     07 54 4E F7 | 	zerox	local07, #7 wz
06eb0     2C 00 90 AD |  if_e	jmp	#LR__0422
06eb4     01 00 00 FF 
06eb8     E8 3F 06 F6 | 	mov	arg01, ##1000
06ebc     D4 6E B0 FD | 	call	#__system___waitus
06ec0     18 A0 05 F1 | 	add	fp, #24
06ec4     D0 4C 02 FB | 	rdlong	local03, fp
06ec8     26 4F 02 F6 | 	mov	local04, local03
06ecc     27 51 02 F6 | 	mov	local05, local04
06ed0     01 50 86 F1 | 	sub	local05, #1
06ed4     D0 50 62 FC | 	wrlong	local05, fp
06ed8     18 A0 85 F1 | 	sub	fp, #24
06edc     9C FF 9F FD | 	jmp	#LR__0421
06ee0                 | LR__0422
06ee0     18 A0 05 F1 | 	add	fp, #24
06ee4     D0 4A 02 FB | 	rdlong	local02, fp
06ee8     18 A0 85 F1 | 	sub	fp, #24
06eec     25 49 0A F6 | 	mov	local01, local02 wz
06ef0     24 00 90 AD |  if_e	jmp	#LR__0423
06ef4     10 54 06 F6 | 	mov	local07, #16
06ef8     09 4C C6 F9 | 	decod	local03, #9
06efc     10 3E 06 F6 | 	mov	arg01, #16
06f00     09 40 C6 F9 | 	decod	arg02, #9
06f04     C4 67 B0 FD | 	call	#_ff_cc_send_cmd_1067
06f08     0B 51 02 F6 | 	mov	local05, result1
06f0c     28 53 02 F6 | 	mov	local06, local05
06f10     07 52 4E F7 | 	zerox	local06, #7 wz
06f14     0C 00 90 AD |  if_e	jmp	#LR__0424
06f18                 | LR__0423
06f18     0C A0 05 F1 | 	add	fp, #12
06f1c     D0 00 48 FC | 	wrbyte	#0, fp
06f20     0C A0 85 F1 | 	sub	fp, #12
06f24                 | LR__0424
06f24                 | LR__0425
06f24                 | LR__0426
06f24     0C A0 05 F1 | 	add	fp, #12
06f28     D0 48 C2 FA | 	rdbyte	local01, fp
06f2c     7D 0F 06 F1 | 	add	ptr__ff_cc_dat__, #381
06f30     07 49 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
06f34     D0 4A CA FA | 	rdbyte	local02, fp wz
06f38     00 48 06 56 |  if_ne	mov	local01, #0
06f3c     01 48 06 A6 |  if_e	mov	local01, #1
06f40     10 A0 05 F1 | 	add	fp, #16
06f44     D0 48 42 FC | 	wrbyte	local01, fp
06f48     D0 48 C2 FA | 	rdbyte	local01, fp
06f4c     1C A0 85 F1 | 	sub	fp, #28
06f50     01 0E 86 F1 | 	sub	ptr__ff_cc_dat__, #1
06f54     07 49 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
06f58     7C 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #380
06f5c     DC 64 B0 FD | 	call	#_ff_cc_deselect_1055
06f60                 | ' 
06f60                 | '                             ty = 0;
06f60                 | '                         }
06f60                 | ' 		}
06f60                 | ' 	}
06f60                 | ' #line 467 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
06f60                 | ' 	CardType = ty;
06f60                 | ' 	s = ty ? 0 :  0x01 ;
06f60                 | ' 	Stat = s;
06f60                 | ' 
06f60                 | ' 	deselect();
06f60                 | ' 
06f60                 | ' 	return s;
06f60     1C A0 05 F1 | 	add	fp, #28
06f64     D0 16 C2 FA | 	rdbyte	result1, fp
06f68     1C A0 85 F1 | 	sub	fp, #28
06f6c                 | LR__0427
06f6c     D0 F0 03 F6 | 	mov	ptra, fp
06f70     E0 00 A0 FD | 	call	#popregs_
06f74                 | _ff_cc_disk_initialize_ret
06f74     2D 00 64 FD | 	ret
06f78                 | 
06f78                 | _ff_cc_disk_read
06f78     05 9C 05 F6 | 	mov	COUNT_, #5
06f7c     D1 00 A0 FD | 	call	#pushregs_
06f80     20 49 02 F6 | 	mov	local01, arg02
06f84     22 4B 02 F6 | 	mov	local02, arg04
06f88     21 4D 02 F6 | 	mov	local03, arg03
06f8c     00 3E 0E F2 | 	cmp	arg01, #0 wz
06f90     01 16 06 56 |  if_ne	mov	result1, #1
06f94                 | ' 
06f94                 | ' 	return Stat;
06f94     7C 0F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
06f98     07 17 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
06f9c     7C 0F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
06fa0     0B 4F 02 F6 | 	mov	local04, result1
06fa4     07 4E 46 F7 | 	zerox	local04, #7
06fa8     01 4E CE F7 | 	test	local04, #1 wz
06fac     03 16 06 56 |  if_ne	mov	result1, #3
06fb0     88 00 90 5D |  if_ne	jmp	#LR__0431
06fb4     7D 0F 06 F1 | 	add	ptr__ff_cc_dat__, #381
06fb8     07 4F C2 FA | 	rdbyte	local04, ptr__ff_cc_dat__
06fbc     7D 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #381
06fc0     07 4E 46 F7 | 	zerox	local04, #7
06fc4     08 4E 0E F5 | 	and	local04, #8 wz
06fc8     09 4C 66 A0 |  if_e	shl	local03, #9
06fcc     01 4A 1E F2 | 	cmp	local02, #1 wcz
06fd0     12 4E 06 16 |  if_a	mov	local04, #18
06fd4     11 4E 06 E6 |  if_be	mov	local04, #17
06fd8     27 51 02 F6 | 	mov	local05, local04
06fdc     28 3F 02 F6 | 	mov	arg01, local05
06fe0     26 41 02 F6 | 	mov	arg02, local03
06fe4     E4 66 B0 FD | 	call	#_ff_cc_send_cmd_1067
06fe8     0B 4F 02 F6 | 	mov	local04, result1
06fec     07 4E 4E F7 | 	zerox	local04, #7 wz
06ff0     34 00 90 5D |  if_ne	jmp	#LR__0430
06ff4                 | ' 		do {
06ff4                 | LR__0428
06ff4     24 3F 02 F6 | 	mov	arg01, local01
06ff8     09 40 C6 F9 | 	decod	arg02, #9
06ffc     18 65 B0 FD | 	call	#_ff_cc_rcvr_datablock_1061
07000     00 16 0E F2 | 	cmp	result1, #0 wz
07004     01 00 00 5F 
07008     00 48 06 51 |  if_ne	add	local01, ##512
0700c     F9 4B 6E 5B |  if_ne	djnz	local02, #LR__0428
07010     07 50 46 F7 | 	zerox	local05, #7
07014     12 50 0E F2 | 	cmp	local05, #18 wz
07018     0C 00 90 5D |  if_ne	jmp	#LR__0429
0701c     0C 3E 06 F6 | 	mov	arg01, #12
07020     00 40 06 F6 | 	mov	arg02, #0
07024     A4 66 B0 FD | 	call	#_ff_cc_send_cmd_1067
07028                 | LR__0429
07028                 | LR__0430
07028     10 64 B0 FD | 	call	#_ff_cc_deselect_1055
0702c                 | ' 	}
0702c                 | ' 	deselect();
0702c                 | ' 
0702c                 | ' 	return count ? RES_ERROR : RES_OK;
0702c     00 4A 0E F2 | 	cmp	local02, #0 wz
07030     01 4E 06 56 |  if_ne	mov	local04, #1
07034     00 4E 06 A6 |  if_e	mov	local04, #0
07038     27 17 02 F6 | 	mov	result1, local04
0703c                 | LR__0431
0703c     D0 F0 03 F6 | 	mov	ptra, fp
07040     E0 00 A0 FD | 	call	#popregs_
07044                 | _ff_cc_disk_read_ret
07044     2D 00 64 FD | 	ret
07048                 | 
07048                 | _ff_cc_disk_write
07048     07 9C 05 F6 | 	mov	COUNT_, #7
0704c     D1 00 A0 FD | 	call	#pushregs_
07050     1F 49 0A F6 | 	mov	local01, arg01 wz
07054     20 4B 02 F6 | 	mov	local02, arg02
07058     21 4D 02 F6 | 	mov	local03, arg03
0705c     22 4F 02 F6 | 	mov	local04, arg04
07060     26 51 02 F6 | 	mov	local05, local03
07064     01 16 06 56 |  if_ne	mov	result1, #1
07068                 | ' 
07068                 | ' 	return Stat;
07068     7C 0F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
0706c     07 17 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
07070     7C 0F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
07074     0B 53 02 F6 | 	mov	local06, result1
07078     07 52 46 F7 | 	zerox	local06, #7
0707c     01 52 CE F7 | 	test	local06, #1 wz
07080     03 16 06 56 |  if_ne	mov	result1, #3
07084     D0 00 90 5D |  if_ne	jmp	#LR__0437
07088     7D 0F 06 F1 | 	add	ptr__ff_cc_dat__, #381
0708c     07 53 C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
07090     7D 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #381
07094     07 52 46 F7 | 	zerox	local06, #7
07098     08 52 CE F7 | 	test	local06, #8 wz
0709c     09 50 66 A0 |  if_e	shl	local05, #9
070a0     01 4E 0E F2 | 	cmp	local04, #1 wz
070a4     30 00 90 5D |  if_ne	jmp	#LR__0432
070a8     28 41 02 F6 | 	mov	arg02, local05
070ac     18 3E 06 F6 | 	mov	arg01, #24
070b0     18 66 B0 FD | 	call	#_ff_cc_send_cmd_1067
070b4     0B 53 02 F6 | 	mov	local06, result1
070b8     07 52 4E F7 | 	zerox	local06, #7 wz
070bc     84 00 90 5D |  if_ne	jmp	#LR__0436
070c0     25 3F 02 F6 | 	mov	arg01, local02
070c4     FE 40 06 F6 | 	mov	arg02, #254
070c8     2C 65 B0 FD | 	call	#_ff_cc_xmit_datablock_1063
070cc     0B 55 0A F6 | 	mov	local07, result1 wz
070d0     00 4E 06 56 |  if_ne	mov	local04, #0
070d4     6C 00 90 FD | 	jmp	#LR__0436
070d8                 | LR__0432
070d8     7D 0F 06 F1 | 	add	ptr__ff_cc_dat__, #381
070dc     07 53 C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
070e0     7D 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #381
070e4     07 52 46 F7 | 	zerox	local06, #7
070e8     06 52 CE F7 | 	test	local06, #6 wz
070ec     0C 00 90 AD |  if_e	jmp	#LR__0433
070f0     97 3E 06 F6 | 	mov	arg01, #151
070f4     27 41 02 F6 | 	mov	arg02, local04
070f8     D0 65 B0 FD | 	call	#_ff_cc_send_cmd_1067
070fc                 | LR__0433
070fc     28 41 02 F6 | 	mov	arg02, local05
07100     19 3E 06 F6 | 	mov	arg01, #25
07104     C4 65 B0 FD | 	call	#_ff_cc_send_cmd_1067
07108     0B 53 02 F6 | 	mov	local06, result1
0710c     07 52 4E F7 | 	zerox	local06, #7 wz
07110     30 00 90 5D |  if_ne	jmp	#LR__0435
07114                 | ' 			do {
07114                 | LR__0434
07114     25 3F 02 F6 | 	mov	arg01, local02
07118     FC 40 06 F6 | 	mov	arg02, #252
0711c     D8 64 B0 FD | 	call	#_ff_cc_xmit_datablock_1063
07120     00 16 0E F2 | 	cmp	result1, #0 wz
07124     01 00 00 5F 
07128     00 4A 06 51 |  if_ne	add	local02, ##512
0712c     F9 4F 6E 5B |  if_ne	djnz	local04, #LR__0434
07130     00 3E 06 F6 | 	mov	arg01, #0
07134     FD 40 06 F6 | 	mov	arg02, #253
07138     BC 64 B0 FD | 	call	#_ff_cc_xmit_datablock_1063
0713c     00 16 0E F2 | 	cmp	result1, #0 wz
07140     01 4E 06 A6 |  if_e	mov	local04, #1
07144                 | LR__0435
07144                 | LR__0436
07144     F4 62 B0 FD | 	call	#_ff_cc_deselect_1055
07148                 | ' 				count = 1;
07148                 | ' 		}
07148                 | ' 	}
07148                 | ' 	deselect();
07148                 | ' 
07148                 | ' 	return count ? RES_ERROR : RES_OK;
07148     00 4E 0E F2 | 	cmp	local04, #0 wz
0714c     01 52 06 56 |  if_ne	mov	local06, #1
07150     00 52 06 A6 |  if_e	mov	local06, #0
07154     29 17 02 F6 | 	mov	result1, local06
07158                 | LR__0437
07158     D0 F0 03 F6 | 	mov	ptra, fp
0715c     E0 00 A0 FD | 	call	#popregs_
07160                 | _ff_cc_disk_write_ret
07160     2D 00 64 FD | 	ret
07164                 | 
07164                 | _ff_cc_disk_ioctl
07164     07 9C 05 F6 | 	mov	COUNT_, #7
07168     D1 00 A0 FD | 	call	#pushregs_
0716c     30 F0 07 F1 | 	add	ptra, #48
07170     04 A0 05 F1 | 	add	fp, #4
07174     D0 3E 42 FC | 	wrbyte	arg01, fp
07178     04 A0 05 F1 | 	add	fp, #4
0717c     D0 40 42 FC | 	wrbyte	arg02, fp
07180     04 A0 05 F1 | 	add	fp, #4
07184     D0 42 62 FC | 	wrlong	arg03, fp
07188     08 A0 85 F1 | 	sub	fp, #8
0718c     D0 48 C2 FA | 	rdbyte	local01, fp
07190     04 A0 85 F1 | 	sub	fp, #4
07194     24 4B 02 F6 | 	mov	local02, local01
07198     25 3F 0A F6 | 	mov	arg01, local02 wz
0719c     01 16 06 56 |  if_ne	mov	result1, #1
071a0                 | ' 
071a0                 | ' 	return Stat;
071a0     7C 0F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
071a4     07 17 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
071a8     7C 0F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
071ac     0B 4D 02 F6 | 	mov	local03, result1
071b0     26 4F 02 F6 | 	mov	local04, local03
071b4     07 4E 46 F7 | 	zerox	local04, #7
071b8     01 4E CE F7 | 	test	local04, #1 wz
071bc     03 16 06 56 |  if_ne	mov	result1, #3
071c0     F8 01 90 5D |  if_ne	jmp	#LR__0446
071c4     10 A0 05 F1 | 	add	fp, #16
071c8     D0 02 68 FC | 	wrlong	#1, fp
071cc                 | ' 
071cc                 | ' 	res = RES_ERROR;
071cc                 | ' 	switch (ctrl) {
071cc     08 A0 85 F1 | 	sub	fp, #8
071d0     D0 4E C2 FA | 	rdbyte	local04, fp
071d4     08 A0 85 F1 | 	sub	fp, #8
071d8     27 51 02 F6 | 	mov	local05, local04
071dc     07 50 46 F7 | 	zerox	local05, #7
071e0     04 50 26 F3 | 	fle	local05, #4
071e4     30 50 62 FD | 	jmprel	local05
071e8                 | LR__0438
071e8     10 00 90 FD | 	jmp	#LR__0439
071ec     24 00 90 FD | 	jmp	#LR__0440
071f0     A8 01 90 FD | 	jmp	#LR__0444
071f4     88 01 90 FD | 	jmp	#LR__0443
071f8     A0 01 90 FD | 	jmp	#LR__0444
071fc                 | LR__0439
071fc     B8 62 B0 FD | 	call	#_ff_cc_select_1058
07200     00 16 0E F2 | 	cmp	result1, #0 wz
07204     10 A0 05 51 |  if_ne	add	fp, #16
07208     D0 00 68 5C |  if_ne	wrlong	#0, fp
0720c     10 A0 85 51 |  if_ne	sub	fp, #16
07210                 | ' 			break;
07210     98 01 90 FD | 	jmp	#LR__0445
07214                 | LR__0440
07214     09 3E 06 F6 | 	mov	arg01, #9
07218     00 40 06 F6 | 	mov	arg02, #0
0721c     AC 64 B0 FD | 	call	#_ff_cc_send_cmd_1067
07220     0B 4B 02 F6 | 	mov	local02, result1
07224     07 4A 4E F7 | 	zerox	local02, #7 wz
07228     80 01 90 5D |  if_ne	jmp	#LR__0445
0722c     18 A0 05 F1 | 	add	fp, #24
07230     D0 3E 02 F6 | 	mov	arg01, fp
07234     18 A0 85 F1 | 	sub	fp, #24
07238     10 40 06 F6 | 	mov	arg02, #16
0723c     D8 62 B0 FD | 	call	#_ff_cc_rcvr_datablock_1061
07240     0B 53 0A F6 | 	mov	local06, result1 wz
07244     64 01 90 AD |  if_e	jmp	#LR__0445
07248     18 A0 05 F1 | 	add	fp, #24
0724c     D0 4A C2 FA | 	rdbyte	local02, fp
07250     18 A0 85 F1 | 	sub	fp, #24
07254     07 4A 46 F7 | 	zerox	local02, #7
07258     06 4A 46 F0 | 	shr	local02, #6
0725c     01 4A 0E F2 | 	cmp	local02, #1 wz
07260     5C 00 90 5D |  if_ne	jmp	#LR__0441
07264     21 A0 05 F1 | 	add	fp, #33
07268     D0 4A C2 FA | 	rdbyte	local02, fp
0726c     01 A0 85 F1 | 	sub	fp, #1
07270     D0 4C C2 FA | 	rdbyte	local03, fp
07274     0F 4C 46 F7 | 	zerox	local03, #15
07278     08 4C 66 F0 | 	shl	local03, #8
0727c     26 4B 02 F1 | 	add	local02, local03
07280     01 A0 85 F1 | 	sub	fp, #1
07284     D0 54 C2 FA | 	rdbyte	local07, fp
07288     3F 54 06 F5 | 	and	local07, #63
0728c     10 54 66 F0 | 	shl	local07, #16
07290     2A 4B 02 F1 | 	add	local02, local07
07294     01 4A 06 F1 | 	add	local02, #1
07298     09 A0 05 F1 | 	add	fp, #9
0729c     D0 4A 62 FC | 	wrlong	local02, fp
072a0     1C A0 85 F1 | 	sub	fp, #28
072a4     D0 48 02 FB | 	rdlong	local01, fp
072a8     1C A0 05 F1 | 	add	fp, #28
072ac     D0 4C 02 FB | 	rdlong	local03, fp
072b0     28 A0 85 F1 | 	sub	fp, #40
072b4     0A 4C 66 F0 | 	shl	local03, #10
072b8     24 4D 62 FC | 	wrlong	local03, local01
072bc     B0 00 90 FD | 	jmp	#LR__0442
072c0                 | LR__0441
072c0     1D A0 05 F1 | 	add	fp, #29
072c4     D0 4A C2 FA | 	rdbyte	local02, fp
072c8     0F 4A 06 F5 | 	and	local02, #15
072cc     05 A0 05 F1 | 	add	fp, #5
072d0     D0 4C C2 FA | 	rdbyte	local03, fp
072d4     80 4C 06 F5 | 	and	local03, #128
072d8     07 4C C6 F0 | 	sar	local03, #7
072dc     26 4B 02 F1 | 	add	local02, local03
072e0     01 A0 85 F1 | 	sub	fp, #1
072e4     D0 54 C2 FA | 	rdbyte	local07, fp
072e8     03 54 06 F5 | 	and	local07, #3
072ec     01 54 66 F0 | 	shl	local07, #1
072f0     2A 4B 02 F1 | 	add	local02, local07
072f4     02 4A 06 F1 | 	add	local02, #2
072f8     0D A0 85 F1 | 	sub	fp, #13
072fc     D0 4A 42 FC | 	wrbyte	local02, fp
07300     0C A0 05 F1 | 	add	fp, #12
07304     D0 4A C2 FA | 	rdbyte	local02, fp
07308     06 4A 46 F0 | 	shr	local02, #6
0730c     01 A0 85 F1 | 	sub	fp, #1
07310     D0 4C C2 FA | 	rdbyte	local03, fp
07314     0F 4C 46 F7 | 	zerox	local03, #15
07318     02 4C 66 F0 | 	shl	local03, #2
0731c     26 4B 02 F1 | 	add	local02, local03
07320     01 A0 85 F1 | 	sub	fp, #1
07324     D0 54 C2 FA | 	rdbyte	local07, fp
07328     03 54 06 F5 | 	and	local07, #3
0732c     0F 54 46 F7 | 	zerox	local07, #15
07330     0A 54 66 F0 | 	shl	local07, #10
07334     2A 4B 02 F1 | 	add	local02, local07
07338     01 4A 06 F1 | 	add	local02, #1
0733c     0A A0 05 F1 | 	add	fp, #10
07340     D0 4A 62 FC | 	wrlong	local02, fp
07344     1C A0 85 F1 | 	sub	fp, #28
07348     D0 48 02 FB | 	rdlong	local01, fp
0734c     1C A0 05 F1 | 	add	fp, #28
07350     D0 4C 02 FB | 	rdlong	local03, fp
07354     14 A0 85 F1 | 	sub	fp, #20
07358     D0 54 C2 FA | 	rdbyte	local07, fp
0735c     14 A0 85 F1 | 	sub	fp, #20
07360     07 54 46 F7 | 	zerox	local07, #7
07364     09 54 86 F1 | 	sub	local07, #9
07368     2A 4D 62 F0 | 	shl	local03, local07
0736c     24 4D 62 FC | 	wrlong	local03, local01
07370                 | LR__0442
07370     10 A0 05 F1 | 	add	fp, #16
07374     D0 00 68 FC | 	wrlong	#0, fp
07378     10 A0 85 F1 | 	sub	fp, #16
0737c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
0737c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
0737c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
0737c                 | ' 				}
0737c                 | ' 				res = RES_OK;
0737c                 | ' 			}
0737c                 | ' 			break;
0737c     2C 00 90 FD | 	jmp	#LR__0445
07380                 | LR__0443
07380     0C A0 05 F1 | 	add	fp, #12
07384     D0 4A 02 FB | 	rdlong	local02, fp
07388     25 01 69 FC | 	wrlong	#128, local02
0738c     04 A0 05 F1 | 	add	fp, #4
07390     D0 00 68 FC | 	wrlong	#0, fp
07394     10 A0 85 F1 | 	sub	fp, #16
07398                 | ' 			*(DWORD*)buff = 128;
07398                 | ' 			res = RES_OK;
07398                 | ' 			break;
07398     10 00 90 FD | 	jmp	#LR__0445
0739c                 | LR__0444
0739c     04 4A 06 F6 | 	mov	local02, #4
073a0     10 A0 05 F1 | 	add	fp, #16
073a4     D0 08 68 FC | 	wrlong	#4, fp
073a8     10 A0 85 F1 | 	sub	fp, #16
073ac                 | LR__0445
073ac     8C 60 B0 FD | 	call	#_ff_cc_deselect_1055
073b0                 | ' 			res = RES_PARERR;
073b0                 | ' 	}
073b0                 | ' 
073b0                 | ' 	deselect();
073b0                 | ' 
073b0                 | ' 	return res;
073b0     10 A0 05 F1 | 	add	fp, #16
073b4     D0 16 02 FB | 	rdlong	result1, fp
073b8     10 A0 85 F1 | 	sub	fp, #16
073bc                 | LR__0446
073bc     D0 F0 03 F6 | 	mov	ptra, fp
073c0     E0 00 A0 FD | 	call	#popregs_
073c4                 | _ff_cc_disk_ioctl_ret
073c4     2D 00 64 FD | 	ret
073c8                 | 
073c8                 | _ff_cc_disk_setpins
073c8     00 3E 0E F2 | 	cmp	arg01, #0 wz
073cc     01 16 66 56 |  if_ne	neg	result1, #1
073d0     28 00 90 5D |  if_ne	jmp	#_ff_cc_disk_setpins_ret
073d4     6C 0F 06 F1 | 	add	ptr__ff_cc_dat__, #364
073d8     07 41 62 FC | 	wrlong	arg02, ptr__ff_cc_dat__
073dc     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
073e0     07 43 62 FC | 	wrlong	arg03, ptr__ff_cc_dat__
073e4     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
073e8     07 45 62 FC | 	wrlong	arg04, ptr__ff_cc_dat__
073ec     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
073f0     07 47 62 FC | 	wrlong	arg05, ptr__ff_cc_dat__
073f4     78 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
073f8     00 16 06 F6 | 	mov	result1, #0
073fc                 | _ff_cc_disk_setpins_ret
073fc     2D 00 64 FD | 	ret
07400                 | 
07400                 | _ff_cc_ld_word_0349
07400     01 3E 06 F1 | 	add	arg01, #1
07404     1F 17 C2 FA | 	rdbyte	result1, arg01
07408     01 3E 86 F1 | 	sub	arg01, #1
0740c     07 16 46 F7 | 	zerox	result1, #7
07410     0F 16 46 F7 | 	zerox	result1, #15
07414     08 16 66 F0 | 	shl	result1, #8
07418     1F 29 C2 FA | 	rdbyte	_var01, arg01
0741c     14 17 42 F5 | 	or	result1, _var01
07420                 | ' {
07420                 | ' 	WORD rv;
07420                 | ' 
07420                 | ' 	rv = ptr[1];
07420                 | ' 	rv = rv << 8 | ptr[0];
07420                 | ' 	return rv;
07420                 | _ff_cc_ld_word_0349_ret
07420     2D 00 64 FD | 	ret
07424                 | 
07424                 | _ff_cc_ld_dword_0351
07424     03 3E 06 F1 | 	add	arg01, #3
07428     1F 17 C2 FA | 	rdbyte	result1, arg01
0742c     08 16 66 F0 | 	shl	result1, #8
07430     01 3E 86 F1 | 	sub	arg01, #1
07434     1F 29 C2 FA | 	rdbyte	_var01, arg01
07438     14 17 42 F5 | 	or	result1, _var01
0743c     08 16 66 F0 | 	shl	result1, #8
07440     01 3E 86 F1 | 	sub	arg01, #1
07444     1F 29 C2 FA | 	rdbyte	_var01, arg01
07448     01 3E 86 F1 | 	sub	arg01, #1
0744c     07 28 46 F7 | 	zerox	_var01, #7
07450     14 17 42 F5 | 	or	result1, _var01
07454     08 16 66 F0 | 	shl	result1, #8
07458     1F 29 C2 FA | 	rdbyte	_var01, arg01
0745c     14 17 42 F5 | 	or	result1, _var01
07460                 | ' {
07460                 | ' 	DWORD rv;
07460                 | ' 
07460                 | ' 	rv = ptr[3];
07460                 | ' 	rv = rv << 8 | ptr[2];
07460                 | ' 	rv = rv << 8 | ptr[1];
07460                 | ' 	rv = rv << 8 | ptr[0];
07460                 | ' 	return rv;
07460                 | _ff_cc_ld_dword_0351_ret
07460     2D 00 64 FD | 	ret
07464                 | 
07464                 | _ff_cc_st_word_0352
07464     20 29 02 F6 | 	mov	_var01, arg02
07468     0F 28 46 F7 | 	zerox	_var01, #15
0746c     1F 29 42 FC | 	wrbyte	_var01, arg01
07470     0F 40 46 F7 | 	zerox	arg02, #15
07474     08 40 46 F0 | 	shr	arg02, #8
07478     01 3E 06 F1 | 	add	arg01, #1
0747c     0F 40 46 F7 | 	zerox	arg02, #15
07480     1F 41 42 FC | 	wrbyte	arg02, arg01
07484                 | _ff_cc_st_word_0352_ret
07484     2D 00 64 FD | 	ret
07488                 | 
07488                 | _ff_cc_st_dword_0353
07488     1F 41 42 FC | 	wrbyte	arg02, arg01
0748c     08 40 46 F0 | 	shr	arg02, #8
07490     01 3E 06 F1 | 	add	arg01, #1
07494     1F 41 42 FC | 	wrbyte	arg02, arg01
07498     08 40 46 F0 | 	shr	arg02, #8
0749c     01 3E 06 F1 | 	add	arg01, #1
074a0     1F 41 42 FC | 	wrbyte	arg02, arg01
074a4     08 40 46 F0 | 	shr	arg02, #8
074a8     01 3E 06 F1 | 	add	arg01, #1
074ac     1F 41 42 FC | 	wrbyte	arg02, arg01
074b0                 | _ff_cc_st_dword_0353_ret
074b0     2D 00 64 FD | 	ret
074b4                 | 
074b4                 | _ff_cc_mem_cpy_0356
074b4     00 42 0E F2 | 	cmp	arg03, #0 wz
074b8     24 00 90 AD |  if_e	jmp	#LR__0451
074bc                 | ' 		do {
074bc     5C 8B 9F FE | 	loc	pa,	#(@LR__0449-@LR__0447)
074c0     B4 00 A0 FD | 	call	#FCACHE_LOAD_
074c4                 | LR__0447
074c4     21 0D D8 FC | 	rep	@LR__0450, arg03
074c8                 | LR__0448
074c8     20 29 02 F6 | 	mov	_var01, arg02
074cc     01 28 06 F1 | 	add	_var01, #1
074d0     20 2B C2 FA | 	rdbyte	_var02, arg02
074d4     14 41 02 F6 | 	mov	arg02, _var01
074d8     1F 2B 42 FC | 	wrbyte	_var02, arg01
074dc     01 3E 06 F1 | 	add	arg01, #1
074e0                 | LR__0449
074e0                 | LR__0450
074e0                 | LR__0451
074e0                 | _ff_cc_mem_cpy_0356_ret
074e0     2D 00 64 FD | 	ret
074e4                 | 
074e4                 | _ff_cc_mem_cmp_0362
074e4     40 8B 9F FE | 	loc	pa,	#(@LR__0453-@LR__0452)
074e8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
074ec                 | ' 
074ec                 | ' 	do {
074ec                 | LR__0452
074ec     1F 29 C2 FA | 	rdbyte	_var01, arg01
074f0     20 2B C2 FA | 	rdbyte	_var02, arg02
074f4     15 29 82 F1 | 	sub	_var01, _var02
074f8     01 42 86 F1 | 	sub	arg03, #1
074fc     21 43 0A F6 | 	mov	arg03, arg03 wz
07500     01 3E 06 F1 | 	add	arg01, #1
07504     01 40 06 F1 | 	add	arg02, #1
07508     08 00 90 AD |  if_e	jmp	#LR__0454
0750c     00 28 0E F2 | 	cmp	_var01, #0 wz
07510     D8 FF 9F AD |  if_e	jmp	#LR__0452
07514                 | LR__0453
07514                 | LR__0454
07514                 | ' 
07514                 | ' 	return r;
07514     14 17 02 F6 | 	mov	result1, _var01
07518                 | _ff_cc_mem_cmp_0362_ret
07518     2D 00 64 FD | 	ret
0751c                 | 
0751c                 | _ff_cc_chk_chr_0363
0751c     F8 8A 9F FE | 	loc	pa,	#(@LR__0456-@LR__0455)
07520     B4 00 A0 FD | 	call	#FCACHE_LOAD_
07524                 | ' {
07524                 | ' 	while (*str && *str != chr) str++;
07524                 | LR__0455
07524     1F 29 CA FA | 	rdbyte	_var01, arg01 wz
07528     10 00 90 AD |  if_e	jmp	#LR__0457
0752c     1F 2B C2 FA | 	rdbyte	_var02, arg01
07530     20 2B 0A F2 | 	cmp	_var02, arg02 wz
07534     01 3E 06 51 |  if_ne	add	arg01, #1
07538     E8 FF 9F 5D |  if_ne	jmp	#LR__0455
0753c                 | LR__0456
0753c                 | LR__0457
0753c                 | ' 	return *str;
0753c     1F 17 C2 FA | 	rdbyte	result1, arg01
07540                 | _ff_cc_chk_chr_0363_ret
07540     2D 00 64 FD | 	ret
07544                 | 
07544                 | _ff_cc_sync_window_0367
07544     06 9C 05 F6 | 	mov	COUNT_, #6
07548     D1 00 A0 FD | 	call	#pushregs_
0754c     1F 49 02 F6 | 	mov	local01, arg01
07550     00 4A 06 F6 | 	mov	local02, #0
07554     03 48 06 F1 | 	add	local01, #3
07558     24 4D CA FA | 	rdbyte	local03, local01 wz
0755c     03 48 86 F1 | 	sub	local01, #3
07560     A8 00 90 AD |  if_e	jmp	#LR__0460
07564     01 48 06 F1 | 	add	local01, #1
07568     24 3F C2 FA | 	rdbyte	arg01, local01
0756c     2F 48 06 F1 | 	add	local01, #47
07570     24 41 02 F6 | 	mov	arg02, local01
07574     04 48 86 F1 | 	sub	local01, #4
07578     24 43 02 FB | 	rdlong	arg03, local01
0757c     2C 48 86 F1 | 	sub	local01, #44
07580     01 44 06 F6 | 	mov	arg04, #1
07584     C0 FA BF FD | 	call	#_ff_cc_disk_write
07588     00 16 0E F2 | 	cmp	result1, #0 wz
0758c     78 00 90 5D |  if_ne	jmp	#LR__0458
07590     03 48 06 F1 | 	add	local01, #3
07594     24 01 48 FC | 	wrbyte	#0, local01
07598     29 48 06 F1 | 	add	local01, #41
0759c     24 4D 02 FB | 	rdlong	local03, local01
075a0     0C 48 86 F1 | 	sub	local01, #12
075a4     24 4F 02 FB | 	rdlong	local04, local01
075a8     27 4D 82 F1 | 	sub	local03, local04
075ac     08 48 86 F1 | 	sub	local01, #8
075b0     24 51 02 FB | 	rdlong	local05, local01
075b4     18 48 86 F1 | 	sub	local01, #24
075b8     28 4D 1A F2 | 	cmp	local03, local05 wcz
075bc     4C 00 90 3D |  if_ae	jmp	#LR__0459
075c0     02 48 06 F1 | 	add	local01, #2
075c4     24 4D C2 FA | 	rdbyte	local03, local01
075c8     02 48 86 F1 | 	sub	local01, #2
075cc     07 4C 46 F7 | 	zerox	local03, #7
075d0     02 4C 0E F2 | 	cmp	local03, #2 wz
075d4     34 00 90 5D |  if_ne	jmp	#LR__0459
075d8     01 48 06 F1 | 	add	local01, #1
075dc     24 3F C2 FA | 	rdbyte	arg01, local01
075e0     2F 48 06 F1 | 	add	local01, #47
075e4     24 41 02 F6 | 	mov	arg02, local01
075e8     04 48 86 F1 | 	sub	local01, #4
075ec     24 43 02 FB | 	rdlong	arg03, local01
075f0     14 48 86 F1 | 	sub	local01, #20
075f4     24 53 02 FB | 	rdlong	local06, local01
075f8     29 43 02 F1 | 	add	arg03, local06
075fc     01 44 06 F6 | 	mov	arg04, #1
07600     44 FA BF FD | 	call	#_ff_cc_disk_write
07604     04 00 90 FD | 	jmp	#LR__0459
07608                 | LR__0458
07608     01 4A 06 F6 | 	mov	local02, #1
0760c                 | LR__0459
0760c                 | LR__0460
0760c                 | ' 			res = FR_DISK_ERR;
0760c                 | ' 		}
0760c                 | ' 	}
0760c                 | ' 	return res;
0760c     25 17 02 F6 | 	mov	result1, local02
07610     D0 F0 03 F6 | 	mov	ptra, fp
07614     E0 00 A0 FD | 	call	#popregs_
07618                 | _ff_cc_sync_window_0367_ret
07618     2D 00 64 FD | 	ret
0761c                 | 
0761c                 | _ff_cc_move_window_0369
0761c     04 9C 05 F6 | 	mov	COUNT_, #4
07620     D1 00 A0 FD | 	call	#pushregs_
07624     1F 49 02 F6 | 	mov	local01, arg01
07628     20 4B 02 F6 | 	mov	local02, arg02
0762c     00 4C 06 F6 | 	mov	local03, #0
07630     2C 48 06 F1 | 	add	local01, #44
07634     24 4F 02 FB | 	rdlong	local04, local01
07638     2C 48 86 F1 | 	sub	local01, #44
0763c     27 4B 0A F2 | 	cmp	local02, local04 wz
07640     44 00 90 AD |  if_e	jmp	#LR__0462
07644     24 3F 02 F6 | 	mov	arg01, local01
07648     F8 FE BF FD | 	call	#_ff_cc_sync_window_0367
0764c     0B 4D 0A F6 | 	mov	local03, result1 wz
07650     34 00 90 5D |  if_ne	jmp	#LR__0461
07654     01 48 06 F1 | 	add	local01, #1
07658     24 3F C2 FA | 	rdbyte	arg01, local01
0765c     2F 48 06 F1 | 	add	local01, #47
07660     24 41 02 F6 | 	mov	arg02, local01
07664     30 48 86 F1 | 	sub	local01, #48
07668     25 43 02 F6 | 	mov	arg03, local02
0766c     01 44 06 F6 | 	mov	arg04, #1
07670     04 F9 BF FD | 	call	#_ff_cc_disk_read
07674     00 16 0E F2 | 	cmp	result1, #0 wz
07678     01 4A 66 56 |  if_ne	neg	local02, #1
0767c     01 4C 06 56 |  if_ne	mov	local03, #1
07680     2C 48 06 F1 | 	add	local01, #44
07684     24 4B 62 FC | 	wrlong	local02, local01
07688                 | LR__0461
07688                 | LR__0462
07688                 | ' 				sect = (LBA_t)0 - 1;
07688                 | ' 				res = FR_DISK_ERR;
07688                 | ' 			}
07688                 | ' 			fs->winsect = sect;
07688                 | ' 		}
07688                 | ' 	}
07688                 | ' 	return res;
07688     26 17 02 F6 | 	mov	result1, local03
0768c     D0 F0 03 F6 | 	mov	ptra, fp
07690     E0 00 A0 FD | 	call	#popregs_
07694                 | _ff_cc_move_window_0369_ret
07694     2D 00 64 FD | 	ret
07698                 | 
07698                 | _ff_cc_sync_fs_0371
07698     0A 9C 05 F6 | 	mov	COUNT_, #10
0769c     D1 00 A0 FD | 	call	#pushregs_
076a0     1F 49 02 F6 | 	mov	local01, arg01
076a4     9C FE BF FD | 	call	#_ff_cc_sync_window_0367
076a8     0B 4B 0A F6 | 	mov	local02, result1 wz
076ac     54 01 90 5D |  if_ne	jmp	#LR__0468
076b0     24 4D C2 FA | 	rdbyte	local03, local01
076b4     03 4C 0E F2 | 	cmp	local03, #3 wz
076b8     2C 01 90 5D |  if_ne	jmp	#LR__0467
076bc     04 48 06 F1 | 	add	local01, #4
076c0     24 4F C2 FA | 	rdbyte	local04, local01
076c4     04 48 86 F1 | 	sub	local01, #4
076c8     07 4E 46 F7 | 	zerox	local04, #7
076cc     01 4E 0E F2 | 	cmp	local04, #1 wz
076d0     14 01 90 5D |  if_ne	jmp	#LR__0467
076d4     30 48 06 F1 | 	add	local01, #48
076d8     24 3F 02 F6 | 	mov	arg01, local01
076dc     30 48 86 F1 | 	sub	local01, #48
076e0     00 40 06 F6 | 	mov	arg02, #0
076e4     09 42 C6 F9 | 	decod	arg03, #9
076e8                 | ' {
076e8                 | ' 	BYTE *d = (BYTE*)dst;
076e8                 | ' 
076e8                 | ' 	do {
076e8     20 89 9F FE | 	loc	pa,	#(@LR__0465-@LR__0463)
076ec     B4 00 A0 FD | 	call	#FCACHE_LOAD_
076f0                 | LR__0463
076f0     21 05 D8 FC | 	rep	@LR__0466, arg03
076f4                 | LR__0464
076f4     1F 41 42 FC | 	wrbyte	arg02, arg01
076f8     01 3E 06 F1 | 	add	arg01, #1
076fc                 | LR__0465
076fc                 | LR__0466
076fc     30 48 06 F1 | 	add	local01, #48
07700     24 3F 02 F6 | 	mov	arg01, local01
07704     30 48 86 F1 | 	sub	local01, #48
07708     FE 3F 06 F1 | 	add	arg01, #510
0770c     55 00 00 FF 
07710     55 40 06 F6 | 	mov	arg02, ##43605
07714     4C FD BF FD | 	call	#_ff_cc_st_word_0352
07718     30 48 06 F1 | 	add	local01, #48
0771c     24 3F 02 F6 | 	mov	arg01, local01
07720     30 48 86 F1 | 	sub	local01, #48
07724     A9 B0 20 FF 
07728     52 40 06 F6 | 	mov	arg02, ##1096897106
0772c     58 FD BF FD | 	call	#_ff_cc_st_dword_0353
07730     30 48 06 F1 | 	add	local01, #48
07734     24 3F 02 F6 | 	mov	arg01, local01
07738     30 48 86 F1 | 	sub	local01, #48
0773c     E4 3F 06 F1 | 	add	arg01, #484
07740     B9 A0 30 FF 
07744     72 40 06 F6 | 	mov	arg02, ##1631679090
07748     3C FD BF FD | 	call	#_ff_cc_st_dword_0353
0774c     30 48 06 F1 | 	add	local01, #48
07750     24 3F 02 F6 | 	mov	arg01, local01
07754     E8 3F 06 F1 | 	add	arg01, #488
07758     20 48 86 F1 | 	sub	local01, #32
0775c     24 41 02 FB | 	rdlong	arg02, local01
07760     10 48 86 F1 | 	sub	local01, #16
07764     20 FD BF FD | 	call	#_ff_cc_st_dword_0353
07768     30 48 06 F1 | 	add	local01, #48
0776c     24 3F 02 F6 | 	mov	arg01, local01
07770     EC 3F 06 F1 | 	add	arg01, #492
07774     24 48 86 F1 | 	sub	local01, #36
07778     24 41 02 FB | 	rdlong	arg02, local01
0777c     0C 48 86 F1 | 	sub	local01, #12
07780     04 FD BF FD | 	call	#_ff_cc_st_dword_0353
07784     1C 48 06 F1 | 	add	local01, #28
07788     24 4D 02 FB | 	rdlong	local03, local01
0778c     01 4C 06 F1 | 	add	local03, #1
07790     10 48 06 F1 | 	add	local01, #16
07794     24 4D 62 FC | 	wrlong	local03, local01
07798     2B 48 86 F1 | 	sub	local01, #43
0779c     24 4F C2 FA | 	rdbyte	local04, local01
077a0     2F 48 06 F1 | 	add	local01, #47
077a4     24 51 02 F6 | 	mov	local05, local01
077a8     28 53 02 F6 | 	mov	local06, local05
077ac     04 48 86 F1 | 	sub	local01, #4
077b0     24 55 02 FB | 	rdlong	local07, local01
077b4     2C 48 86 F1 | 	sub	local01, #44
077b8     2A 57 02 F6 | 	mov	local08, local07
077bc     01 58 06 F6 | 	mov	local09, #1
077c0     27 3F 02 F6 | 	mov	arg01, local04
077c4     29 41 02 F6 | 	mov	arg02, local06
077c8     2B 43 02 F6 | 	mov	arg03, local08
077cc     01 44 06 F6 | 	mov	arg04, #1
077d0     74 F8 BF FD | 	call	#_ff_cc_disk_write
077d4     0B 5B 02 F6 | 	mov	local10, result1
077d8     00 4C 06 F6 | 	mov	local03, #0
077dc     04 48 06 F1 | 	add	local01, #4
077e0     24 01 48 FC | 	wrbyte	#0, local01
077e4     04 48 86 F1 | 	sub	local01, #4
077e8                 | LR__0467
077e8     01 48 06 F1 | 	add	local01, #1
077ec     24 3F C2 FA | 	rdbyte	arg01, local01
077f0     00 40 06 F6 | 	mov	arg02, #0
077f4     00 42 06 F6 | 	mov	arg03, #0
077f8     68 F9 BF FD | 	call	#_ff_cc_disk_ioctl
077fc     00 16 0E F2 | 	cmp	result1, #0 wz
07800     01 4A 06 56 |  if_ne	mov	local02, #1
07804                 | LR__0468
07804                 | ' 	}
07804                 | ' 
07804                 | ' 	return res;
07804     25 17 02 F6 | 	mov	result1, local02
07808     D0 F0 03 F6 | 	mov	ptra, fp
0780c     E0 00 A0 FD | 	call	#popregs_
07810                 | _ff_cc_sync_fs_0371_ret
07810     2D 00 64 FD | 	ret
07814                 | 
07814                 | _ff_cc_clst2sect_0372
07814     02 40 86 F1 | 	sub	arg02, #2
07818     14 3E 06 F1 | 	add	arg01, #20
0781c     1F 29 02 FB | 	rdlong	_var01, arg01
07820     14 3E 86 F1 | 	sub	arg01, #20
07824     02 28 86 F1 | 	sub	_var01, #2
07828     14 41 1A F2 | 	cmp	arg02, _var01 wcz
0782c     00 16 06 36 |  if_ae	mov	result1, #0
07830     1C 00 90 3D |  if_ae	jmp	#_ff_cc_clst2sect_0372_ret
07834                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
07834     0A 3E 06 F1 | 	add	arg01, #10
07838     1F 2B E2 FA | 	rdword	_var02, arg01
0783c     20 2B 02 FD | 	qmul	_var02, arg02
07840     18 2C 62 FD | 	getqx	_var03
07844     1E 3E 06 F1 | 	add	arg01, #30
07848     1F 17 02 FB | 	rdlong	result1, arg01
0784c     16 17 02 F1 | 	add	result1, _var03
07850                 | _ff_cc_clst2sect_0372_ret
07850     2D 00 64 FD | 	ret
07854                 | 
07854                 | _ff_cc_get_fat_0377
07854     0C 9C 05 F6 | 	mov	COUNT_, #12
07858     D1 00 A0 FD | 	call	#pushregs_
0785c     1F 49 02 F6 | 	mov	local01, arg01
07860     20 4B 02 F6 | 	mov	local02, arg02
07864     24 4D 02 FB | 	rdlong	local03, local01
07868     02 4A 1E F2 | 	cmp	local02, #2 wcz
0786c     18 00 90 CD |  if_b	jmp	#LR__0469
07870     14 4C 06 F1 | 	add	local03, #20
07874     26 4F 02 FB | 	rdlong	local04, local03
07878     14 4C 86 F1 | 	sub	local03, #20
0787c     27 51 02 F6 | 	mov	local05, local04
07880     28 4B 1A F2 | 	cmp	local02, local05 wcz
07884     08 00 90 CD |  if_b	jmp	#LR__0470
07888                 | LR__0469
07888     01 52 06 F6 | 	mov	local06, #1
0788c     7C 01 90 FD | 	jmp	#LR__0477
07890                 | LR__0470
07890     01 52 66 F6 | 	neg	local06, #1
07894                 | ' 		val = 0xFFFFFFFF;
07894                 | ' 
07894                 | ' 		switch (fs->fs_type) {
07894     26 55 C2 FA | 	rdbyte	local07, local03
07898     01 54 86 F1 | 	sub	local07, #1
0789c     03 54 26 F3 | 	fle	local07, #3
078a0     30 54 62 FD | 	jmprel	local07
078a4                 | LR__0471
078a4     0C 00 90 FD | 	jmp	#LR__0472
078a8     BC 00 90 FD | 	jmp	#LR__0473
078ac     04 01 90 FD | 	jmp	#LR__0474
078b0     54 01 90 FD | 	jmp	#LR__0475
078b4                 | LR__0472
078b4     25 57 02 F6 | 	mov	local08, local02
078b8     25 4F 02 F6 | 	mov	local04, local02
078bc     01 4E 46 F0 | 	shr	local04, #1
078c0     27 57 02 F1 | 	add	local08, local04
078c4     26 3F 02 F6 | 	mov	arg01, local03
078c8     2B 59 02 F6 | 	mov	local09, local08
078cc     09 58 46 F0 | 	shr	local09, #9
078d0     20 4C 06 F1 | 	add	local03, #32
078d4     26 41 02 FB | 	rdlong	arg02, local03
078d8     20 4C 86 F1 | 	sub	local03, #32
078dc     2C 41 02 F1 | 	add	arg02, local09
078e0     38 FD BF FD | 	call	#_ff_cc_move_window_0369
078e4     00 16 0E F2 | 	cmp	result1, #0 wz
078e8     20 01 90 5D |  if_ne	jmp	#LR__0476
078ec     2B 5B 02 F6 | 	mov	local10, local08
078f0     FF 5B 06 F5 | 	and	local10, #511
078f4     30 4C 06 F1 | 	add	local03, #48
078f8     26 5B 02 F1 | 	add	local10, local03
078fc     2D 5D C2 FA | 	rdbyte	local11, local10
07900     30 4C 86 F1 | 	sub	local03, #48
07904     26 3F 02 F6 | 	mov	arg01, local03
07908     01 56 06 F1 | 	add	local08, #1
0790c     2B 59 02 F6 | 	mov	local09, local08
07910     09 58 46 F0 | 	shr	local09, #9
07914     20 4C 06 F1 | 	add	local03, #32
07918     26 41 02 FB | 	rdlong	arg02, local03
0791c     20 4C 86 F1 | 	sub	local03, #32
07920     2C 41 02 F1 | 	add	arg02, local09
07924     F4 FC BF FD | 	call	#_ff_cc_move_window_0369
07928     00 16 0E F2 | 	cmp	result1, #0 wz
0792c     DC 00 90 5D |  if_ne	jmp	#LR__0476
07930     FF 57 06 F5 | 	and	local08, #511
07934     30 4C 06 F1 | 	add	local03, #48
07938     26 57 02 F1 | 	add	local08, local03
0793c     2B 4F C2 FA | 	rdbyte	local04, local08
07940     08 4E 66 F0 | 	shl	local04, #8
07944     27 5D 42 F5 | 	or	local11, local04
07948     01 4A CE F7 | 	test	local02, #1 wz
0794c     04 5C 46 50 |  if_ne	shr	local11, #4
07950     2E 51 02 56 |  if_ne	mov	local05, local11
07954     07 00 00 AF 
07958     FF 5D 06 A5 |  if_e	and	local11, ##4095
0795c     2E 51 02 A6 |  if_e	mov	local05, local11
07960     28 53 02 F6 | 	mov	local06, local05
07964                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
07964                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
07964                 | ' 			break;
07964     A4 00 90 FD | 	jmp	#LR__0476
07968                 | LR__0473
07968     26 3F 02 F6 | 	mov	arg01, local03
0796c     25 59 02 F6 | 	mov	local09, local02
07970     08 58 46 F0 | 	shr	local09, #8
07974     20 4C 06 F1 | 	add	local03, #32
07978     26 41 02 FB | 	rdlong	arg02, local03
0797c     20 4C 86 F1 | 	sub	local03, #32
07980     2C 41 02 F1 | 	add	arg02, local09
07984     94 FC BF FD | 	call	#_ff_cc_move_window_0369
07988     00 16 0E F2 | 	cmp	result1, #0 wz
0798c     7C 00 90 5D |  if_ne	jmp	#LR__0476
07990     30 4C 06 F1 | 	add	local03, #48
07994     01 4A 66 F0 | 	shl	local02, #1
07998     FF 4B 06 F5 | 	and	local02, #511
0799c     25 4D 02 F1 | 	add	local03, local02
079a0     26 3F 02 F6 | 	mov	arg01, local03
079a4     58 FA BF FD | 	call	#_ff_cc_ld_word_0349
079a8     0F 16 46 F7 | 	zerox	result1, #15
079ac     0B 53 02 F6 | 	mov	local06, result1
079b0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
079b0                 | ' 			break;
079b0     58 00 90 FD | 	jmp	#LR__0476
079b4                 | LR__0474
079b4     26 3F 02 F6 | 	mov	arg01, local03
079b8     25 59 02 F6 | 	mov	local09, local02
079bc     07 58 46 F0 | 	shr	local09, #7
079c0     20 4C 06 F1 | 	add	local03, #32
079c4     26 41 02 FB | 	rdlong	arg02, local03
079c8     20 4C 86 F1 | 	sub	local03, #32
079cc     2C 41 02 F1 | 	add	arg02, local09
079d0     48 FC BF FD | 	call	#_ff_cc_move_window_0369
079d4     00 16 0E F2 | 	cmp	result1, #0 wz
079d8     30 00 90 5D |  if_ne	jmp	#LR__0476
079dc     30 4C 06 F1 | 	add	local03, #48
079e0     26 3F 02 F6 | 	mov	arg01, local03
079e4     25 5F 02 F6 | 	mov	local12, local02
079e8     02 5E 66 F0 | 	shl	local12, #2
079ec     FF 5F 06 F5 | 	and	local12, #511
079f0     2F 3F 02 F1 | 	add	arg01, local12
079f4     2C FA BF FD | 	call	#_ff_cc_ld_dword_0351
079f8     0B 53 02 F6 | 	mov	local06, result1
079fc     FF FF 07 FF 
07a00     FF 53 06 F5 | 	and	local06, ##268435455
07a04                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
07a04                 | ' 			break;
07a04     04 00 90 FD | 	jmp	#LR__0476
07a08                 | LR__0475
07a08     01 52 06 F6 | 	mov	local06, #1
07a0c                 | LR__0476
07a0c                 | LR__0477
07a0c                 | ' 			val = 1;
07a0c                 | ' 		}
07a0c                 | ' 	}
07a0c                 | ' 
07a0c                 | ' 	return val;
07a0c     29 17 02 F6 | 	mov	result1, local06
07a10     D0 F0 03 F6 | 	mov	ptra, fp
07a14     E0 00 A0 FD | 	call	#popregs_
07a18                 | _ff_cc_get_fat_0377_ret
07a18     2D 00 64 FD | 	ret
07a1c                 | 
07a1c                 | _ff_cc_put_fat_0381
07a1c     10 9C 05 F6 | 	mov	COUNT_, #16
07a20     D1 00 A0 FD | 	call	#pushregs_
07a24     1F 49 02 F6 | 	mov	local01, arg01
07a28     20 4B 02 F6 | 	mov	local02, arg02
07a2c     21 4D 02 F6 | 	mov	local03, arg03
07a30     02 4E 06 F6 | 	mov	local04, #2
07a34     02 4A 1E F2 | 	cmp	local02, #2 wcz
07a38     D0 02 90 CD |  if_b	jmp	#LR__0487
07a3c     14 48 06 F1 | 	add	local01, #20
07a40     24 51 02 FB | 	rdlong	local05, local01
07a44     14 48 86 F1 | 	sub	local01, #20
07a48     28 53 02 F6 | 	mov	local06, local05
07a4c     29 4B 1A F2 | 	cmp	local02, local06 wcz
07a50     B8 02 90 3D |  if_ae	jmp	#LR__0487
07a54                 | ' 		switch (fs->fs_type) {
07a54     24 55 C2 FA | 	rdbyte	local07, local01
07a58     01 54 86 F1 | 	sub	local07, #1
07a5c     03 54 26 F3 | 	fle	local07, #3
07a60     30 54 62 FD | 	jmprel	local07
07a64                 | LR__0478
07a64     0C 00 90 FD | 	jmp	#LR__0479
07a68     54 01 90 FD | 	jmp	#LR__0484
07a6c     D8 01 90 FD | 	jmp	#LR__0485
07a70     98 02 90 FD | 	jmp	#LR__0486
07a74                 | LR__0479
07a74     25 57 02 F6 | 	mov	local08, local02
07a78     25 51 02 F6 | 	mov	local05, local02
07a7c     01 50 46 F0 | 	shr	local05, #1
07a80     28 57 02 F1 | 	add	local08, local05
07a84     24 53 02 F6 | 	mov	local06, local01
07a88     2B 59 02 F6 | 	mov	local09, local08
07a8c     09 58 46 F0 | 	shr	local09, #9
07a90     20 48 06 F1 | 	add	local01, #32
07a94     24 5B 02 FB | 	rdlong	local10, local01
07a98     20 48 86 F1 | 	sub	local01, #32
07a9c     2D 51 02 F6 | 	mov	local05, local10
07aa0     2C 51 02 F1 | 	add	local05, local09
07aa4     28 5D 02 F6 | 	mov	local11, local05
07aa8     29 3F 02 F6 | 	mov	arg01, local06
07aac     2E 41 02 F6 | 	mov	arg02, local11
07ab0     68 FB BF FD | 	call	#_ff_cc_move_window_0369
07ab4     0B 5F 02 F6 | 	mov	local12, result1
07ab8     2F 4F 0A F6 | 	mov	local04, local12 wz
07abc     4C 02 90 5D |  if_ne	jmp	#LR__0486
07ac0     30 48 06 F1 | 	add	local01, #48
07ac4     24 61 02 F6 | 	mov	local13, local01
07ac8     2B 5F 02 F6 | 	mov	local12, local08
07acc     FF 5F 06 F5 | 	and	local12, #511
07ad0     2F 61 02 F1 | 	add	local13, local12
07ad4     01 4A CE F7 | 	test	local02, #1 wz
07ad8     30 48 86 F1 | 	sub	local01, #48
07adc     01 56 06 F1 | 	add	local08, #1
07ae0     1C 00 90 AD |  if_e	jmp	#LR__0480
07ae4     30 53 C2 FA | 	rdbyte	local06, local13
07ae8     0F 52 06 F5 | 	and	local06, #15
07aec     26 5B 02 F6 | 	mov	local10, local03
07af0     07 5A 46 F7 | 	zerox	local10, #7
07af4     04 5A 66 F0 | 	shl	local10, #4
07af8     2D 53 42 F5 | 	or	local06, local10
07afc     04 00 90 FD | 	jmp	#LR__0481
07b00                 | LR__0480
07b00     26 53 02 F6 | 	mov	local06, local03
07b04                 | LR__0481
07b04     30 53 42 FC | 	wrbyte	local06, local13
07b08     03 48 06 F1 | 	add	local01, #3
07b0c     24 03 48 FC | 	wrbyte	#1, local01
07b10     03 48 86 F1 | 	sub	local01, #3
07b14     24 53 02 F6 | 	mov	local06, local01
07b18     2B 59 02 F6 | 	mov	local09, local08
07b1c     09 58 46 F0 | 	shr	local09, #9
07b20     20 48 06 F1 | 	add	local01, #32
07b24     24 5B 02 FB | 	rdlong	local10, local01
07b28     20 48 86 F1 | 	sub	local01, #32
07b2c     2D 51 02 F6 | 	mov	local05, local10
07b30     2C 51 02 F1 | 	add	local05, local09
07b34     28 5D 02 F6 | 	mov	local11, local05
07b38     29 3F 02 F6 | 	mov	arg01, local06
07b3c     2E 41 02 F6 | 	mov	arg02, local11
07b40     D8 FA BF FD | 	call	#_ff_cc_move_window_0369
07b44     0B 5F 02 F6 | 	mov	local12, result1
07b48     2F 4F 0A F6 | 	mov	local04, local12 wz
07b4c     BC 01 90 5D |  if_ne	jmp	#LR__0486
07b50     30 48 06 F1 | 	add	local01, #48
07b54     24 61 02 F6 | 	mov	local13, local01
07b58     2B 59 02 F6 | 	mov	local09, local08
07b5c     FF 59 06 F5 | 	and	local09, #511
07b60     2C 5B 02 F6 | 	mov	local10, local09
07b64     2C 61 02 F1 | 	add	local13, local09
07b68     25 51 02 F6 | 	mov	local05, local02
07b6c     01 50 0E F5 | 	and	local05, #1 wz
07b70     30 48 86 F1 | 	sub	local01, #48
07b74     10 00 90 AD |  if_e	jmp	#LR__0482
07b78     26 59 02 F6 | 	mov	local09, local03
07b7c     04 58 46 F0 | 	shr	local09, #4
07b80     2C 53 02 F6 | 	mov	local06, local09
07b84     20 00 90 FD | 	jmp	#LR__0483
07b88                 | LR__0482
07b88     30 5B C2 FA | 	rdbyte	local10, local13
07b8c     F0 5A 06 F5 | 	and	local10, #240
07b90     26 5D 02 F6 | 	mov	local11, local03
07b94     08 5C 46 F0 | 	shr	local11, #8
07b98     07 5C 46 F7 | 	zerox	local11, #7
07b9c     0F 5C 06 F5 | 	and	local11, #15
07ba0     2E 5B 42 F5 | 	or	local10, local11
07ba4     2D 53 02 F6 | 	mov	local06, local10
07ba8                 | LR__0483
07ba8     30 53 42 FC | 	wrbyte	local06, local13
07bac     01 52 06 F6 | 	mov	local06, #1
07bb0     03 48 06 F1 | 	add	local01, #3
07bb4     24 03 48 FC | 	wrbyte	#1, local01
07bb8     03 48 86 F1 | 	sub	local01, #3
07bbc                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
07bbc                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
07bbc                 | ' 			fs->wflag = 1;
07bbc                 | ' 			break;
07bbc     4C 01 90 FD | 	jmp	#LR__0486
07bc0                 | LR__0484
07bc0     24 53 02 F6 | 	mov	local06, local01
07bc4     25 59 02 F6 | 	mov	local09, local02
07bc8     08 58 46 F0 | 	shr	local09, #8
07bcc     20 48 06 F1 | 	add	local01, #32
07bd0     24 5B 02 FB | 	rdlong	local10, local01
07bd4     20 48 86 F1 | 	sub	local01, #32
07bd8     2D 51 02 F6 | 	mov	local05, local10
07bdc     2C 51 02 F1 | 	add	local05, local09
07be0     28 5D 02 F6 | 	mov	local11, local05
07be4     29 3F 02 F6 | 	mov	arg01, local06
07be8     2E 41 02 F6 | 	mov	arg02, local11
07bec     2C FA BF FD | 	call	#_ff_cc_move_window_0369
07bf0     0B 5F 02 F6 | 	mov	local12, result1
07bf4     2F 4F 0A F6 | 	mov	local04, local12 wz
07bf8     10 01 90 5D |  if_ne	jmp	#LR__0486
07bfc     30 48 06 F1 | 	add	local01, #48
07c00     24 51 02 F6 | 	mov	local05, local01
07c04     25 59 02 F6 | 	mov	local09, local02
07c08     01 58 66 F0 | 	shl	local09, #1
07c0c     2C 5B 02 F6 | 	mov	local10, local09
07c10     FF 5B 06 F5 | 	and	local10, #511
07c14     2D 5D 02 F6 | 	mov	local11, local10
07c18     28 5F 02 F6 | 	mov	local12, local05
07c1c     2E 5F 02 F1 | 	add	local12, local11
07c20     26 63 02 F6 | 	mov	local14, local03
07c24     2F 3F 02 F6 | 	mov	arg01, local12
07c28     31 41 02 F6 | 	mov	arg02, local14
07c2c     30 48 86 F1 | 	sub	local01, #48
07c30     30 F8 BF FD | 	call	#_ff_cc_st_word_0352
07c34     01 52 06 F6 | 	mov	local06, #1
07c38     03 48 06 F1 | 	add	local01, #3
07c3c     24 03 48 FC | 	wrbyte	#1, local01
07c40     03 48 86 F1 | 	sub	local01, #3
07c44                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
07c44                 | ' 			fs->wflag = 1;
07c44                 | ' 			break;
07c44     C4 00 90 FD | 	jmp	#LR__0486
07c48                 | LR__0485
07c48     24 53 02 F6 | 	mov	local06, local01
07c4c     25 59 02 F6 | 	mov	local09, local02
07c50     07 58 46 F0 | 	shr	local09, #7
07c54     20 48 06 F1 | 	add	local01, #32
07c58     24 5B 02 FB | 	rdlong	local10, local01
07c5c     20 48 86 F1 | 	sub	local01, #32
07c60     2D 51 02 F6 | 	mov	local05, local10
07c64     2C 51 02 F1 | 	add	local05, local09
07c68     28 5D 02 F6 | 	mov	local11, local05
07c6c     29 3F 02 F6 | 	mov	arg01, local06
07c70     2E 41 02 F6 | 	mov	arg02, local11
07c74     A4 F9 BF FD | 	call	#_ff_cc_move_window_0369
07c78     0B 5F 02 F6 | 	mov	local12, result1
07c7c     2F 4F 0A F6 | 	mov	local04, local12 wz
07c80     88 00 90 5D |  if_ne	jmp	#LR__0486
07c84     FF FF 07 FF 
07c88     FF 4D 06 F5 | 	and	local03, ##268435455
07c8c     30 48 06 F1 | 	add	local01, #48
07c90     24 65 02 F6 | 	mov	local15, local01
07c94     25 63 02 F6 | 	mov	local14, local02
07c98     02 62 66 F0 | 	shl	local14, #2
07c9c     FF 63 06 F5 | 	and	local14, #511
07ca0     31 65 02 F1 | 	add	local15, local14
07ca4     32 3F 02 F6 | 	mov	arg01, local15
07ca8     30 48 86 F1 | 	sub	local01, #48
07cac     74 F7 BF FD | 	call	#_ff_cc_ld_dword_0351
07cb0     0B 67 02 F6 | 	mov	local16, result1
07cb4     33 51 02 F6 | 	mov	local05, local16
07cb8     00 00 78 FF 
07cbc     00 50 06 F5 | 	and	local05, ##-268435456
07cc0     28 4D 42 F5 | 	or	local03, local05
07cc4     30 48 06 F1 | 	add	local01, #48
07cc8     24 51 02 F6 | 	mov	local05, local01
07ccc     25 59 02 F6 | 	mov	local09, local02
07cd0     02 58 66 F0 | 	shl	local09, #2
07cd4     2C 5B 02 F6 | 	mov	local10, local09
07cd8     FF 5B 06 F5 | 	and	local10, #511
07cdc     2D 5D 02 F6 | 	mov	local11, local10
07ce0     28 5F 02 F6 | 	mov	local12, local05
07ce4     2E 5F 02 F1 | 	add	local12, local11
07ce8     26 63 02 F6 | 	mov	local14, local03
07cec     2F 3F 02 F6 | 	mov	arg01, local12
07cf0     31 41 02 F6 | 	mov	arg02, local14
07cf4     30 48 86 F1 | 	sub	local01, #48
07cf8     8C F7 BF FD | 	call	#_ff_cc_st_dword_0353
07cfc     01 52 06 F6 | 	mov	local06, #1
07d00     03 48 06 F1 | 	add	local01, #3
07d04     24 03 48 FC | 	wrbyte	#1, local01
07d08     03 48 86 F1 | 	sub	local01, #3
07d0c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
07d0c                 | ' 			}
07d0c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
07d0c                 | ' 			fs->wflag = 1;
07d0c                 | ' 			break;
07d0c                 | LR__0486
07d0c                 | LR__0487
07d0c                 | ' 		}
07d0c                 | ' 	}
07d0c                 | ' 	return res;
07d0c     27 17 02 F6 | 	mov	result1, local04
07d10     D0 F0 03 F6 | 	mov	ptra, fp
07d14     E0 00 A0 FD | 	call	#popregs_
07d18                 | _ff_cc_put_fat_0381_ret
07d18     2D 00 64 FD | 	ret
07d1c                 | 
07d1c                 | _ff_cc_remove_chain_0385
07d1c     09 9C 05 F6 | 	mov	COUNT_, #9
07d20     D1 00 A0 FD | 	call	#pushregs_
07d24     1F 49 02 F6 | 	mov	local01, arg01
07d28     20 4B 02 F6 | 	mov	local02, arg02
07d2c     21 4D 02 F6 | 	mov	local03, arg03
07d30     24 4F 02 FB | 	rdlong	local04, local01
07d34     02 4A 1E F2 | 	cmp	local02, #2 wcz
07d38     14 00 90 CD |  if_b	jmp	#LR__0488
07d3c     14 4E 06 F1 | 	add	local04, #20
07d40     27 51 02 FB | 	rdlong	local05, local04
07d44     14 4E 86 F1 | 	sub	local04, #20
07d48     28 4B 1A F2 | 	cmp	local02, local05 wcz
07d4c     08 00 90 CD |  if_b	jmp	#LR__0489
07d50                 | LR__0488
07d50     02 16 06 F6 | 	mov	result1, #2
07d54     D0 00 90 FD | 	jmp	#LR__0494
07d58                 | LR__0489
07d58     00 4C 0E F2 | 	cmp	local03, #0 wz
07d5c     1C 00 90 AD |  if_e	jmp	#LR__0490
07d60     27 3F 02 F6 | 	mov	arg01, local04
07d64     26 41 02 F6 | 	mov	arg02, local03
07d68     01 42 66 F6 | 	neg	arg03, #1
07d6c     AC FC BF FD | 	call	#_ff_cc_put_fat_0381
07d70     0B 53 0A F6 | 	mov	local06, result1 wz
07d74     29 17 02 56 |  if_ne	mov	result1, local06
07d78     AC 00 90 5D |  if_ne	jmp	#LR__0494
07d7c                 | LR__0490
07d7c                 | ' 	}
07d7c                 | ' 
07d7c                 | ' 
07d7c                 | ' 	do {
07d7c                 | LR__0491
07d7c     25 41 02 F6 | 	mov	arg02, local02
07d80     24 3F 02 F6 | 	mov	arg01, local01
07d84     CC FA BF FD | 	call	#_ff_cc_get_fat_0377
07d88     0B 55 0A F6 | 	mov	local07, result1 wz
07d8c     94 00 90 AD |  if_e	jmp	#LR__0493
07d90     01 54 0E F2 | 	cmp	local07, #1 wz
07d94     02 16 06 A6 |  if_e	mov	result1, #2
07d98     8C 00 90 AD |  if_e	jmp	#LR__0494
07d9c     FF FF 7F FF 
07da0     FF 55 0E F2 | 	cmp	local07, ##-1 wz
07da4     01 16 06 A6 |  if_e	mov	result1, #1
07da8     7C 00 90 AD |  if_e	jmp	#LR__0494
07dac     27 3F 02 F6 | 	mov	arg01, local04
07db0     25 41 02 F6 | 	mov	arg02, local02
07db4     00 42 06 F6 | 	mov	arg03, #0
07db8     60 FC BF FD | 	call	#_ff_cc_put_fat_0381
07dbc     0B 53 0A F6 | 	mov	local06, result1 wz
07dc0     29 17 02 56 |  if_ne	mov	result1, local06
07dc4     60 00 90 5D |  if_ne	jmp	#LR__0494
07dc8     14 4E 06 F1 | 	add	local04, #20
07dcc     27 51 02 FB | 	rdlong	local05, local04
07dd0     02 50 86 F1 | 	sub	local05, #2
07dd4     04 4E 86 F1 | 	sub	local04, #4
07dd8     27 57 02 FB | 	rdlong	local08, local04
07ddc     10 4E 86 F1 | 	sub	local04, #16
07de0     28 57 1A F2 | 	cmp	local08, local05 wcz
07de4     24 00 90 3D |  if_ae	jmp	#LR__0492
07de8     10 4E 06 F1 | 	add	local04, #16
07dec     27 59 02 FB | 	rdlong	local09, local04
07df0     01 58 06 F1 | 	add	local09, #1
07df4     27 59 62 FC | 	wrlong	local09, local04
07df8     0C 4E 86 F1 | 	sub	local04, #12
07dfc     27 51 C2 FA | 	rdbyte	local05, local04
07e00     01 50 46 F5 | 	or	local05, #1
07e04     27 51 42 FC | 	wrbyte	local05, local04
07e08     04 4E 86 F1 | 	sub	local04, #4
07e0c                 | LR__0492
07e0c     2A 4B 02 F6 | 	mov	local02, local07
07e10     14 4E 06 F1 | 	add	local04, #20
07e14     27 51 02 FB | 	rdlong	local05, local04
07e18     14 4E 86 F1 | 	sub	local04, #20
07e1c     28 4B 1A F2 | 	cmp	local02, local05 wcz
07e20     58 FF 9F CD |  if_b	jmp	#LR__0491
07e24                 | LR__0493
07e24                 | ' #line 1531 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
07e24                 | ' 	return FR_OK;
07e24     00 16 06 F6 | 	mov	result1, #0
07e28                 | LR__0494
07e28     D0 F0 03 F6 | 	mov	ptra, fp
07e2c     E0 00 A0 FD | 	call	#popregs_
07e30                 | _ff_cc_remove_chain_0385_ret
07e30     2D 00 64 FD | 	ret
07e34                 | 
07e34                 | _ff_cc_create_chain_0391
07e34     0B 9C 05 F6 | 	mov	COUNT_, #11
07e38     D1 00 A0 FD | 	call	#pushregs_
07e3c     1F 49 02 F6 | 	mov	local01, arg01
07e40     20 4B 0A F6 | 	mov	local02, arg02 wz
07e44     24 4D 02 FB | 	rdlong	local03, local01
07e48     2C 00 90 5D |  if_ne	jmp	#LR__0496
07e4c     0C 4C 06 F1 | 	add	local03, #12
07e50     26 4F 0A FB | 	rdlong	local04, local03 wz
07e54     0C 4C 86 F1 | 	sub	local03, #12
07e58     14 00 90 AD |  if_e	jmp	#LR__0495
07e5c     14 4C 06 F1 | 	add	local03, #20
07e60     26 51 02 FB | 	rdlong	local05, local03
07e64     14 4C 86 F1 | 	sub	local03, #20
07e68     28 4F 1A F2 | 	cmp	local04, local05 wcz
07e6c     50 00 90 CD |  if_b	jmp	#LR__0497
07e70                 | LR__0495
07e70     01 4E 06 F6 | 	mov	local04, #1
07e74     48 00 90 FD | 	jmp	#LR__0497
07e78                 | LR__0496
07e78     24 3F 02 F6 | 	mov	arg01, local01
07e7c     25 41 02 F6 | 	mov	arg02, local02
07e80     D0 F9 BF FD | 	call	#_ff_cc_get_fat_0377
07e84     0B 53 02 F6 | 	mov	local06, result1
07e88     02 52 1E F2 | 	cmp	local06, #2 wcz
07e8c     01 16 06 C6 |  if_b	mov	result1, #1
07e90     F4 01 90 CD |  if_b	jmp	#LR__0513
07e94     FF FF 7F FF 
07e98     FF 53 0E F2 | 	cmp	local06, ##-1 wz
07e9c     29 17 02 A6 |  if_e	mov	result1, local06
07ea0     E4 01 90 AD |  if_e	jmp	#LR__0513
07ea4     14 4C 06 F1 | 	add	local03, #20
07ea8     26 51 02 FB | 	rdlong	local05, local03
07eac     14 4C 86 F1 | 	sub	local03, #20
07eb0     28 53 1A F2 | 	cmp	local06, local05 wcz
07eb4     29 17 02 C6 |  if_b	mov	result1, local06
07eb8     CC 01 90 CD |  if_b	jmp	#LR__0513
07ebc     25 4F 02 F6 | 	mov	local04, local02
07ec0                 | LR__0497
07ec0     10 4C 06 F1 | 	add	local03, #16
07ec4     26 51 0A FB | 	rdlong	local05, local03 wz
07ec8     10 4C 86 F1 | 	sub	local03, #16
07ecc     00 16 06 A6 |  if_e	mov	result1, #0
07ed0     B4 01 90 AD |  if_e	jmp	#LR__0513
07ed4     00 54 06 F6 | 	mov	local07, #0
07ed8     25 4F 0A F2 | 	cmp	local04, local02 wz
07edc     80 00 90 5D |  if_ne	jmp	#LR__0502
07ee0     27 55 02 F6 | 	mov	local07, local04
07ee4     01 54 06 F1 | 	add	local07, #1
07ee8     14 4C 06 F1 | 	add	local03, #20
07eec     26 51 02 FB | 	rdlong	local05, local03
07ef0     14 4C 86 F1 | 	sub	local03, #20
07ef4     28 55 1A F2 | 	cmp	local07, local05 wcz
07ef8     02 54 06 36 |  if_ae	mov	local07, #2
07efc     24 51 02 F6 | 	mov	local05, local01
07f00     2A 41 02 F6 | 	mov	arg02, local07
07f04     28 3F 02 F6 | 	mov	arg01, local05
07f08     48 F9 BF FD | 	call	#_ff_cc_get_fat_0377
07f0c     0B 53 02 F6 | 	mov	local06, result1
07f10     01 52 0E F2 | 	cmp	local06, #1 wz
07f14     0C 00 90 AD |  if_e	jmp	#LR__0498
07f18     FF FF 7F FF 
07f1c     FF 53 0E F2 | 	cmp	local06, ##-1 wz
07f20     08 00 90 5D |  if_ne	jmp	#LR__0499
07f24                 | LR__0498
07f24     29 17 02 F6 | 	mov	result1, local06
07f28     5C 01 90 FD | 	jmp	#LR__0513
07f2c                 | LR__0499
07f2c     00 52 0E F2 | 	cmp	local06, #0 wz
07f30     2C 00 90 AD |  if_e	jmp	#LR__0501
07f34     0C 4C 06 F1 | 	add	local03, #12
07f38     26 53 02 FB | 	rdlong	local06, local03
07f3c     0C 4C 86 F1 | 	sub	local03, #12
07f40     02 52 1E F2 | 	cmp	local06, #2 wcz
07f44     14 00 90 CD |  if_b	jmp	#LR__0500
07f48     14 4C 06 F1 | 	add	local03, #20
07f4c     26 51 02 FB | 	rdlong	local05, local03
07f50     14 4C 86 F1 | 	sub	local03, #20
07f54     28 53 1A F2 | 	cmp	local06, local05 wcz
07f58     29 4F 02 C6 |  if_b	mov	local04, local06
07f5c                 | LR__0500
07f5c     00 54 06 F6 | 	mov	local07, #0
07f60                 | LR__0501
07f60                 | LR__0502
07f60     00 54 0E F2 | 	cmp	local07, #0 wz
07f64     70 00 90 5D |  if_ne	jmp	#LR__0508
07f68     27 55 02 F6 | 	mov	local07, local04
07f6c                 | ' 			ncl = scl;
07f6c                 | ' 			for (;;) {
07f6c                 | LR__0503
07f6c     01 54 06 F1 | 	add	local07, #1
07f70     14 4C 06 F1 | 	add	local03, #20
07f74     26 51 02 FB | 	rdlong	local05, local03
07f78     14 4C 86 F1 | 	sub	local03, #20
07f7c     28 55 1A F2 | 	cmp	local07, local05 wcz
07f80     10 00 90 CD |  if_b	jmp	#LR__0504
07f84     02 54 06 F6 | 	mov	local07, #2
07f88     27 55 1A F2 | 	cmp	local07, local04 wcz
07f8c     00 16 06 16 |  if_a	mov	result1, #0
07f90     F4 00 90 1D |  if_a	jmp	#LR__0513
07f94                 | LR__0504
07f94     24 51 02 F6 | 	mov	local05, local01
07f98     2A 41 02 F6 | 	mov	arg02, local07
07f9c     28 3F 02 F6 | 	mov	arg01, local05
07fa0     B0 F8 BF FD | 	call	#_ff_cc_get_fat_0377
07fa4     0B 53 0A F6 | 	mov	local06, result1 wz
07fa8     2C 00 90 AD |  if_e	jmp	#LR__0507
07fac     01 52 0E F2 | 	cmp	local06, #1 wz
07fb0     0C 00 90 AD |  if_e	jmp	#LR__0505
07fb4     FF FF 7F FF 
07fb8     FF 53 0E F2 | 	cmp	local06, ##-1 wz
07fbc     08 00 90 5D |  if_ne	jmp	#LR__0506
07fc0                 | LR__0505
07fc0     29 17 02 F6 | 	mov	result1, local06
07fc4     C0 00 90 FD | 	jmp	#LR__0513
07fc8                 | LR__0506
07fc8     27 55 0A F2 | 	cmp	local07, local04 wz
07fcc     00 16 06 A6 |  if_e	mov	result1, #0
07fd0     B4 00 90 AD |  if_e	jmp	#LR__0513
07fd4     94 FF 9F FD | 	jmp	#LR__0503
07fd8                 | LR__0507
07fd8                 | LR__0508
07fd8     26 3F 02 F6 | 	mov	arg01, local03
07fdc     2A 41 02 F6 | 	mov	arg02, local07
07fe0     01 42 66 F6 | 	neg	arg03, #1
07fe4     34 FA BF FD | 	call	#_ff_cc_put_fat_0381
07fe8     0B 57 0A F6 | 	mov	local08, result1 wz
07fec     2C 00 90 5D |  if_ne	jmp	#LR__0509
07ff0     00 4A 0E F2 | 	cmp	local02, #0 wz
07ff4     24 00 90 AD |  if_e	jmp	#LR__0509
07ff8     26 51 02 F6 | 	mov	local05, local03
07ffc     25 59 02 F6 | 	mov	local09, local02
08000     2A 5B 02 F6 | 	mov	local10, local07
08004     28 3F 02 F6 | 	mov	arg01, local05
08008     2C 41 02 F6 | 	mov	arg02, local09
0800c     2D 43 02 F6 | 	mov	arg03, local10
08010     08 FA BF FD | 	call	#_ff_cc_put_fat_0381
08014     0B 5D 02 F6 | 	mov	local11, result1
08018     2E 57 02 F6 | 	mov	local08, local11
0801c                 | LR__0509
0801c     00 56 0E F2 | 	cmp	local08, #0 wz
08020     50 00 90 5D |  if_ne	jmp	#LR__0511
08024     0C 4C 06 F1 | 	add	local03, #12
08028     26 55 62 FC | 	wrlong	local07, local03
0802c     08 4C 06 F1 | 	add	local03, #8
08030     26 51 02 FB | 	rdlong	local05, local03
08034     02 50 86 F1 | 	sub	local05, #2
08038     04 4C 86 F1 | 	sub	local03, #4
0803c     26 5B 02 FB | 	rdlong	local10, local03
08040     10 4C 86 F1 | 	sub	local03, #16
08044     28 5B 1A F2 | 	cmp	local10, local05 wcz
08048     14 00 90 1D |  if_a	jmp	#LR__0510
0804c     10 4C 06 F1 | 	add	local03, #16
08050     26 5B 02 FB | 	rdlong	local10, local03
08054     01 5A 86 F1 | 	sub	local10, #1
08058     26 5B 62 FC | 	wrlong	local10, local03
0805c     10 4C 86 F1 | 	sub	local03, #16
08060                 | LR__0510
08060     04 4C 06 F1 | 	add	local03, #4
08064     26 51 C2 FA | 	rdbyte	local05, local03
08068     01 50 46 F5 | 	or	local05, #1
0806c     26 51 42 FC | 	wrbyte	local05, local03
08070     10 00 90 FD | 	jmp	#LR__0512
08074                 | LR__0511
08074     01 56 0E F2 | 	cmp	local08, #1 wz
08078     01 50 66 A6 |  if_e	neg	local05, #1
0807c     01 50 06 56 |  if_ne	mov	local05, #1
08080     28 55 02 F6 | 	mov	local07, local05
08084                 | LR__0512
08084                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
08084                 | ' 	}
08084                 | ' 
08084                 | ' 	return ncl;
08084     2A 17 02 F6 | 	mov	result1, local07
08088                 | LR__0513
08088     D0 F0 03 F6 | 	mov	ptra, fp
0808c     E0 00 A0 FD | 	call	#popregs_
08090                 | _ff_cc_create_chain_0391_ret
08090     2D 00 64 FD | 	ret
08094                 | 
08094                 | _ff_cc_dir_clear_0396
08094     07 9C 05 F6 | 	mov	COUNT_, #7
08098     D1 00 A0 FD | 	call	#pushregs_
0809c     1F 49 02 F6 | 	mov	local01, arg01
080a0     20 4B 02 F6 | 	mov	local02, arg02
080a4     24 3F 02 F6 | 	mov	arg01, local01
080a8     98 F4 BF FD | 	call	#_ff_cc_sync_window_0367
080ac     00 16 0E F2 | 	cmp	result1, #0 wz
080b0     01 16 06 56 |  if_ne	mov	result1, #1
080b4     AC 00 90 5D |  if_ne	jmp	#LR__0520
080b8     24 3F 02 F6 | 	mov	arg01, local01
080bc     25 41 02 F6 | 	mov	arg02, local02
080c0     50 F7 BF FD | 	call	#_ff_cc_clst2sect_0372
080c4     0B 4D 02 F6 | 	mov	local03, result1
080c8     2C 48 06 F1 | 	add	local01, #44
080cc     24 4D 62 FC | 	wrlong	local03, local01
080d0     04 48 06 F1 | 	add	local01, #4
080d4     24 3F 02 F6 | 	mov	arg01, local01
080d8     30 48 86 F1 | 	sub	local01, #48
080dc     00 40 06 F6 | 	mov	arg02, #0
080e0     09 42 C6 F9 | 	decod	arg03, #9
080e4                 | ' {
080e4                 | ' 	BYTE *d = (BYTE*)dst;
080e4                 | ' 
080e4                 | ' 	do {
080e4     24 7F 9F FE | 	loc	pa,	#(@LR__0516-@LR__0514)
080e8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
080ec                 | LR__0514
080ec     21 05 D8 FC | 	rep	@LR__0517, arg03
080f0                 | LR__0515
080f0     1F 41 42 FC | 	wrbyte	arg02, arg01
080f4     01 3E 06 F1 | 	add	arg01, #1
080f8                 | LR__0516
080f8                 | LR__0517
080f8     30 48 06 F1 | 	add	local01, #48
080fc     24 4F 02 F6 | 	mov	local04, local01
08100                 | ' #line 1698 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08100                 | ' 	{
08100                 | ' 		ibuf = fs->win; szb = 1;
08100                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
08100     00 50 06 F6 | 	mov	local05, #0
08104     30 48 86 F1 | 	sub	local01, #48
08108                 | LR__0518
08108     0A 48 06 F1 | 	add	local01, #10
0810c     24 53 E2 FA | 	rdword	local06, local01
08110     0A 48 86 F1 | 	sub	local01, #10
08114     0F 52 46 F7 | 	zerox	local06, #15
08118     29 51 1A F2 | 	cmp	local05, local06 wcz
0811c     2C 00 90 3D |  if_ae	jmp	#LR__0519
08120     01 48 06 F1 | 	add	local01, #1
08124     24 3F C2 FA | 	rdbyte	arg01, local01
08128     01 48 86 F1 | 	sub	local01, #1
0812c     27 41 02 F6 | 	mov	arg02, local04
08130     26 43 02 F6 | 	mov	arg03, local03
08134     28 43 02 F1 | 	add	arg03, local05
08138     01 44 06 F6 | 	mov	arg04, #1
0813c     08 EF BF FD | 	call	#_ff_cc_disk_write
08140     00 16 0E F2 | 	cmp	result1, #0 wz
08144     01 50 06 A1 |  if_e	add	local05, #1
08148     BC FF 9F AD |  if_e	jmp	#LR__0518
0814c                 | LR__0519
0814c                 | ' 	}
0814c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
0814c     0A 48 06 F1 | 	add	local01, #10
08150     24 55 E2 FA | 	rdword	local07, local01
08154     2A 51 0A F2 | 	cmp	local05, local07 wz
08158     00 52 06 A6 |  if_e	mov	local06, #0
0815c     01 52 06 56 |  if_ne	mov	local06, #1
08160     29 17 02 F6 | 	mov	result1, local06
08164                 | LR__0520
08164     D0 F0 03 F6 | 	mov	ptra, fp
08168     E0 00 A0 FD | 	call	#popregs_
0816c                 | _ff_cc_dir_clear_0396_ret
0816c     2D 00 64 FD | 	ret
08170                 | 
08170                 | _ff_cc_dir_sdi_0400
08170     08 9C 05 F6 | 	mov	COUNT_, #8
08174     D1 00 A0 FD | 	call	#pushregs_
08178     1F 49 02 F6 | 	mov	local01, arg01
0817c     20 4B 02 F6 | 	mov	local02, arg02
08180     24 4D 02 FB | 	rdlong	local03, local01
08184     00 10 00 FF 
08188     00 4A 1E F2 | 	cmp	local02, ##2097152 wcz
0818c     08 00 90 3D |  if_ae	jmp	#LR__0521
08190     1F 4A CE F7 | 	test	local02, #31 wz
08194     08 00 90 AD |  if_e	jmp	#LR__0522
08198                 | LR__0521
08198                 | ' 		return FR_INT_ERR;
08198     02 16 06 F6 | 	mov	result1, #2
0819c     50 01 90 FD | 	jmp	#LR__0530
081a0                 | LR__0522
081a0     10 48 06 F1 | 	add	local01, #16
081a4     24 4B 62 FC | 	wrlong	local02, local01
081a8     08 48 86 F1 | 	sub	local01, #8
081ac     24 4F 0A FB | 	rdlong	local04, local01 wz
081b0     08 48 86 F1 | 	sub	local01, #8
081b4     1C 00 90 5D |  if_ne	jmp	#LR__0523
081b8     26 51 C2 FA | 	rdbyte	local05, local03
081bc     03 50 1E F2 | 	cmp	local05, #3 wcz
081c0     10 00 90 CD |  if_b	jmp	#LR__0523
081c4     24 4C 06 F1 | 	add	local03, #36
081c8     26 51 02 FB | 	rdlong	local05, local03
081cc     24 4C 86 F1 | 	sub	local03, #36
081d0     28 4F 02 F6 | 	mov	local04, local05
081d4                 | LR__0523
081d4     00 4E 0E F2 | 	cmp	local04, #0 wz
081d8     40 00 90 5D |  if_ne	jmp	#LR__0524
081dc     25 51 02 F6 | 	mov	local05, local02
081e0     05 50 46 F0 | 	shr	local05, #5
081e4     08 4C 06 F1 | 	add	local03, #8
081e8     26 53 E2 FA | 	rdword	local06, local03
081ec     08 4C 86 F1 | 	sub	local03, #8
081f0     0F 52 46 F7 | 	zerox	local06, #15
081f4     29 51 1A F2 | 	cmp	local05, local06 wcz
081f8     02 16 06 36 |  if_ae	mov	result1, #2
081fc     F0 00 90 3D |  if_ae	jmp	#LR__0530
08200     24 4C 06 F1 | 	add	local03, #36
08204     26 51 02 FB | 	rdlong	local05, local03
08208     24 4C 86 F1 | 	sub	local03, #36
0820c     18 48 06 F1 | 	add	local01, #24
08210     24 51 62 FC | 	wrlong	local05, local01
08214     18 48 86 F1 | 	sub	local01, #24
08218     80 00 90 FD | 	jmp	#LR__0529
0821c                 | LR__0524
0821c     0A 4C 06 F1 | 	add	local03, #10
08220     26 55 E2 FA | 	rdword	local07, local03
08224     0A 4C 86 F1 | 	sub	local03, #10
08228     0F 54 46 F7 | 	zerox	local07, #15
0822c     09 54 66 F0 | 	shl	local07, #9
08230                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
08230                 | ' 		while (ofs >= csz) {
08230                 | LR__0525
08230     2A 4B 1A F2 | 	cmp	local02, local07 wcz
08234     4C 00 90 CD |  if_b	jmp	#LR__0528
08238     24 3F 02 F6 | 	mov	arg01, local01
0823c     27 41 02 F6 | 	mov	arg02, local04
08240     10 F6 BF FD | 	call	#_ff_cc_get_fat_0377
08244     0B 4F 02 F6 | 	mov	local04, result1
08248     FF FF 7F FF 
0824c     FF 4F 0E F2 | 	cmp	local04, ##-1 wz
08250     01 16 06 A6 |  if_e	mov	result1, #1
08254     98 00 90 AD |  if_e	jmp	#LR__0530
08258     02 4E 1E F2 | 	cmp	local04, #2 wcz
0825c     14 00 90 CD |  if_b	jmp	#LR__0526
08260     14 4C 06 F1 | 	add	local03, #20
08264     26 51 02 FB | 	rdlong	local05, local03
08268     14 4C 86 F1 | 	sub	local03, #20
0826c     28 4F 1A F2 | 	cmp	local04, local05 wcz
08270     08 00 90 CD |  if_b	jmp	#LR__0527
08274                 | LR__0526
08274     02 16 06 F6 | 	mov	result1, #2
08278     74 00 90 FD | 	jmp	#LR__0530
0827c                 | LR__0527
0827c     2A 4B 82 F1 | 	sub	local02, local07
08280     AC FF 9F FD | 	jmp	#LR__0525
08284                 | LR__0528
08284     26 3F 02 F6 | 	mov	arg01, local03
08288     27 41 02 F6 | 	mov	arg02, local04
0828c     84 F5 BF FD | 	call	#_ff_cc_clst2sect_0372
08290     18 48 06 F1 | 	add	local01, #24
08294     24 17 62 FC | 	wrlong	result1, local01
08298     18 48 86 F1 | 	sub	local01, #24
0829c                 | LR__0529
0829c     14 48 06 F1 | 	add	local01, #20
082a0     24 4F 62 FC | 	wrlong	local04, local01
082a4     04 48 06 F1 | 	add	local01, #4
082a8     24 51 0A FB | 	rdlong	local05, local01 wz
082ac     18 48 86 F1 | 	sub	local01, #24
082b0     02 16 06 A6 |  if_e	mov	result1, #2
082b4     38 00 90 AD |  if_e	jmp	#LR__0530
082b8     25 53 02 F6 | 	mov	local06, local02
082bc     09 52 46 F0 | 	shr	local06, #9
082c0     18 48 06 F1 | 	add	local01, #24
082c4     24 51 02 FB | 	rdlong	local05, local01
082c8     29 51 02 F1 | 	add	local05, local06
082cc     24 51 62 FC | 	wrlong	local05, local01
082d0     30 4C 06 F1 | 	add	local03, #48
082d4     26 51 02 F6 | 	mov	local05, local03
082d8     25 57 02 F6 | 	mov	local08, local02
082dc     FF 57 06 F5 | 	and	local08, #511
082e0     2B 51 02 F1 | 	add	local05, local08
082e4     04 48 06 F1 | 	add	local01, #4
082e8     24 51 62 FC | 	wrlong	local05, local01
082ec                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
082ec                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
082ec                 | ' 
082ec                 | ' 	return FR_OK;
082ec     00 16 06 F6 | 	mov	result1, #0
082f0                 | LR__0530
082f0     D0 F0 03 F6 | 	mov	ptra, fp
082f4     E0 00 A0 FD | 	call	#popregs_
082f8                 | _ff_cc_dir_sdi_0400_ret
082f8     2D 00 64 FD | 	ret
082fc                 | 
082fc                 | _ff_cc_dir_next_0404
082fc     09 9C 05 F6 | 	mov	COUNT_, #9
08300     D1 00 A0 FD | 	call	#pushregs_
08304     1F 49 02 F6 | 	mov	local01, arg01
08308     20 4B 02 F6 | 	mov	local02, arg02
0830c     24 4D 02 FB | 	rdlong	local03, local01
08310     10 48 06 F1 | 	add	local01, #16
08314     24 4F 02 FB | 	rdlong	local04, local01
08318     10 48 86 F1 | 	sub	local01, #16
0831c     20 4E 06 F1 | 	add	local04, #32
08320     00 10 00 FF 
08324     00 4E 1E F2 | 	cmp	local04, ##2097152 wcz
08328     18 48 06 31 |  if_ae	add	local01, #24
0832c     24 01 68 3C |  if_ae	wrlong	#0, local01
08330     18 48 86 31 |  if_ae	sub	local01, #24
08334     18 48 06 F1 | 	add	local01, #24
08338     24 51 0A FB | 	rdlong	local05, local01 wz
0833c     18 48 86 F1 | 	sub	local01, #24
08340     04 16 06 A6 |  if_e	mov	result1, #4
08344     7C 01 90 AD |  if_e	jmp	#LR__0537
08348     FF 4F CE F7 | 	test	local04, #511 wz
0834c     4C 01 90 5D |  if_ne	jmp	#LR__0536
08350     18 48 06 F1 | 	add	local01, #24
08354     24 53 02 FB | 	rdlong	local06, local01
08358     01 52 06 F1 | 	add	local06, #1
0835c     24 53 62 FC | 	wrlong	local06, local01
08360     04 48 86 F1 | 	sub	local01, #4
08364     24 51 0A FB | 	rdlong	local05, local01 wz
08368     14 48 86 F1 | 	sub	local01, #20
0836c     30 00 90 5D |  if_ne	jmp	#LR__0531
08370     27 51 02 F6 | 	mov	local05, local04
08374     05 50 46 F0 | 	shr	local05, #5
08378     08 4C 06 F1 | 	add	local03, #8
0837c     26 55 E2 FA | 	rdword	local07, local03
08380     08 4C 86 F1 | 	sub	local03, #8
08384     0F 54 46 F7 | 	zerox	local07, #15
08388     2A 51 1A F2 | 	cmp	local05, local07 wcz
0838c     0C 01 90 CD |  if_b	jmp	#LR__0535
08390     18 48 06 F1 | 	add	local01, #24
08394     24 01 68 FC | 	wrlong	#0, local01
08398                 | ' 				dp->sect = 0; return FR_NO_FILE;
08398     04 16 06 F6 | 	mov	result1, #4
0839c     24 01 90 FD | 	jmp	#LR__0537
083a0                 | LR__0531
083a0     27 51 02 F6 | 	mov	local05, local04
083a4     09 50 46 F0 | 	shr	local05, #9
083a8     0A 4C 06 F1 | 	add	local03, #10
083ac     26 55 E2 FA | 	rdword	local07, local03
083b0     0A 4C 86 F1 | 	sub	local03, #10
083b4     0F 54 46 F7 | 	zerox	local07, #15
083b8     01 54 86 F1 | 	sub	local07, #1
083bc     2A 51 CA F7 | 	test	local05, local07 wz
083c0     D8 00 90 5D |  if_ne	jmp	#LR__0534
083c4     24 3F 02 F6 | 	mov	arg01, local01
083c8     14 48 06 F1 | 	add	local01, #20
083cc     24 41 02 FB | 	rdlong	arg02, local01
083d0     14 48 86 F1 | 	sub	local01, #20
083d4     7C F4 BF FD | 	call	#_ff_cc_get_fat_0377
083d8     0B 57 02 F6 | 	mov	local08, result1
083dc     01 56 1E F2 | 	cmp	local08, #1 wcz
083e0     02 16 06 E6 |  if_be	mov	result1, #2
083e4     DC 00 90 ED |  if_be	jmp	#LR__0537
083e8     FF FF 7F FF 
083ec     FF 57 0E F2 | 	cmp	local08, ##-1 wz
083f0     01 16 06 A6 |  if_e	mov	result1, #1
083f4     CC 00 90 AD |  if_e	jmp	#LR__0537
083f8     14 4C 06 F1 | 	add	local03, #20
083fc     26 51 02 FB | 	rdlong	local05, local03
08400     14 4C 86 F1 | 	sub	local03, #20
08404     28 57 1A F2 | 	cmp	local08, local05 wcz
08408     6C 00 90 CD |  if_b	jmp	#LR__0533
0840c     00 4A 0E F2 | 	cmp	local02, #0 wz
08410     10 00 90 5D |  if_ne	jmp	#LR__0532
08414     18 48 06 F1 | 	add	local01, #24
08418     24 01 68 FC | 	wrlong	#0, local01
0841c                 | ' 						dp->sect = 0; return FR_NO_FILE;
0841c     04 16 06 F6 | 	mov	result1, #4
08420     A0 00 90 FD | 	jmp	#LR__0537
08424                 | LR__0532
08424     24 3F 02 F6 | 	mov	arg01, local01
08428     14 48 06 F1 | 	add	local01, #20
0842c     24 41 02 FB | 	rdlong	arg02, local01
08430     14 48 86 F1 | 	sub	local01, #20
08434     FC F9 BF FD | 	call	#_ff_cc_create_chain_0391
08438     0B 57 0A F6 | 	mov	local08, result1 wz
0843c     07 16 06 A6 |  if_e	mov	result1, #7
08440     80 00 90 AD |  if_e	jmp	#LR__0537
08444     01 56 0E F2 | 	cmp	local08, #1 wz
08448     02 16 06 A6 |  if_e	mov	result1, #2
0844c     74 00 90 AD |  if_e	jmp	#LR__0537
08450     FF FF 7F FF 
08454     FF 57 0E F2 | 	cmp	local08, ##-1 wz
08458     01 16 06 A6 |  if_e	mov	result1, #1
0845c     64 00 90 AD |  if_e	jmp	#LR__0537
08460     26 3F 02 F6 | 	mov	arg01, local03
08464     2B 41 02 F6 | 	mov	arg02, local08
08468     28 FC BF FD | 	call	#_ff_cc_dir_clear_0396
0846c     00 16 0E F2 | 	cmp	result1, #0 wz
08470     01 16 06 56 |  if_ne	mov	result1, #1
08474     4C 00 90 5D |  if_ne	jmp	#LR__0537
08478                 | LR__0533
08478     14 48 06 F1 | 	add	local01, #20
0847c     24 57 62 FC | 	wrlong	local08, local01
08480     14 48 86 F1 | 	sub	local01, #20
08484     26 3F 02 F6 | 	mov	arg01, local03
08488     2B 41 02 F6 | 	mov	arg02, local08
0848c     84 F3 BF FD | 	call	#_ff_cc_clst2sect_0372
08490     18 48 06 F1 | 	add	local01, #24
08494     24 17 62 FC | 	wrlong	result1, local01
08498     18 48 86 F1 | 	sub	local01, #24
0849c                 | LR__0534
0849c                 | LR__0535
0849c                 | LR__0536
0849c     10 48 06 F1 | 	add	local01, #16
084a0     24 4F 62 FC | 	wrlong	local04, local01
084a4     30 4C 06 F1 | 	add	local03, #48
084a8     26 51 02 F6 | 	mov	local05, local03
084ac     27 59 02 F6 | 	mov	local09, local04
084b0     FF 59 06 F5 | 	and	local09, #511
084b4     2C 51 02 F1 | 	add	local05, local09
084b8     0C 48 06 F1 | 	add	local01, #12
084bc     24 51 62 FC | 	wrlong	local05, local01
084c0                 | ' #line 1802 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
084c0                 | ' 				}
084c0                 | ' 				dp->clust = clst;
084c0                 | ' 				dp->sect = clst2sect(fs, clst);
084c0                 | ' 			}
084c0                 | ' 		}
084c0                 | ' 	}
084c0                 | ' 	dp->dptr = ofs;
084c0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
084c0                 | ' 
084c0                 | ' 	return FR_OK;
084c0     00 16 06 F6 | 	mov	result1, #0
084c4                 | LR__0537
084c4     D0 F0 03 F6 | 	mov	ptra, fp
084c8     E0 00 A0 FD | 	call	#popregs_
084cc                 | _ff_cc_dir_next_0404_ret
084cc     2D 00 64 FD | 	ret
084d0                 | 
084d0                 | _ff_cc_dir_alloc_0408
084d0     0B 9C 05 F6 | 	mov	COUNT_, #11
084d4     D1 00 A0 FD | 	call	#pushregs_
084d8     1F 49 02 F6 | 	mov	local01, arg01
084dc     20 4B 02 F6 | 	mov	local02, arg02
084e0     24 4D 02 FB | 	rdlong	local03, local01
084e4     24 3F 02 F6 | 	mov	arg01, local01
084e8     00 40 06 F6 | 	mov	arg02, #0
084ec     80 FC BF FD | 	call	#_ff_cc_dir_sdi_0400
084f0     0B 4F 0A F6 | 	mov	local04, result1 wz
084f4     88 00 90 5D |  if_ne	jmp	#LR__0543
084f8     00 50 06 F6 | 	mov	local05, #0
084fc                 | ' 		n = 0;
084fc                 | ' 		do {
084fc                 | LR__0538
084fc     26 3F 02 F6 | 	mov	arg01, local03
08500     18 48 06 F1 | 	add	local01, #24
08504     24 41 02 FB | 	rdlong	arg02, local01
08508     18 48 86 F1 | 	sub	local01, #24
0850c     0C F1 BF FD | 	call	#_ff_cc_move_window_0369
08510     0B 53 02 F6 | 	mov	local06, result1
08514     29 4F 0A F6 | 	mov	local04, local06 wz
08518     64 00 90 5D |  if_ne	jmp	#LR__0542
0851c     1C 48 06 F1 | 	add	local01, #28
08520     24 55 02 FB | 	rdlong	local07, local01
08524     1C 48 86 F1 | 	sub	local01, #28
08528     2A 57 C2 FA | 	rdbyte	local08, local07
0852c     E5 56 0E F2 | 	cmp	local08, #229 wz
08530     18 00 90 AD |  if_e	jmp	#LR__0539
08534     1C 48 06 F1 | 	add	local01, #28
08538     24 59 02 FB | 	rdlong	local09, local01
0853c     1C 48 86 F1 | 	sub	local01, #28
08540     2C 5B 02 F6 | 	mov	local10, local09
08544     2D 53 CA FA | 	rdbyte	local06, local10 wz
08548     10 00 90 5D |  if_ne	jmp	#LR__0540
0854c                 | LR__0539
0854c     01 50 06 F1 | 	add	local05, #1
08550     25 51 0A F2 | 	cmp	local05, local02 wz
08554     28 00 90 AD |  if_e	jmp	#LR__0542
08558     04 00 90 FD | 	jmp	#LR__0541
0855c                 | LR__0540
0855c     00 50 06 F6 | 	mov	local05, #0
08560                 | LR__0541
08560     24 57 02 F6 | 	mov	local08, local01
08564     01 54 06 F6 | 	mov	local07, #1
08568     2B 3F 02 F6 | 	mov	arg01, local08
0856c     01 40 06 F6 | 	mov	arg02, #1
08570     88 FD BF FD | 	call	#_ff_cc_dir_next_0404
08574     0B 5D 02 F6 | 	mov	local11, result1
08578     2E 4F 0A F6 | 	mov	local04, local11 wz
0857c     7C FF 9F AD |  if_e	jmp	#LR__0538
08580                 | LR__0542
08580                 | LR__0543
08580     04 4E 0E F2 | 	cmp	local04, #4 wz
08584     07 4E 06 A6 |  if_e	mov	local04, #7
08588                 | ' 	return res;
08588     27 17 02 F6 | 	mov	result1, local04
0858c     D0 F0 03 F6 | 	mov	ptra, fp
08590     E0 00 A0 FD | 	call	#popregs_
08594                 | _ff_cc_dir_alloc_0408_ret
08594     2D 00 64 FD | 	ret
08598                 | 
08598                 | _ff_cc_ld_clust_0410
08598     04 9C 05 F6 | 	mov	COUNT_, #4
0859c     D1 00 A0 FD | 	call	#pushregs_
085a0     1F 49 02 F6 | 	mov	local01, arg01
085a4     20 4B 02 F6 | 	mov	local02, arg02
085a8     25 3F 02 F6 | 	mov	arg01, local02
085ac     1A 3E 06 F1 | 	add	arg01, #26
085b0     4C EE BF FD | 	call	#_ff_cc_ld_word_0349
085b4     0B 4D 02 F6 | 	mov	local03, result1
085b8     0F 4C 46 F7 | 	zerox	local03, #15
085bc     24 4F C2 FA | 	rdbyte	local04, local01
085c0     03 4E 0E F2 | 	cmp	local04, #3 wz
085c4     18 00 90 5D |  if_ne	jmp	#LR__0544
085c8     14 4A 06 F1 | 	add	local02, #20
085cc     25 3F 02 F6 | 	mov	arg01, local02
085d0     2C EE BF FD | 	call	#_ff_cc_ld_word_0349
085d4     0F 16 46 F7 | 	zerox	result1, #15
085d8     10 16 66 F0 | 	shl	result1, #16
085dc     0B 4D 42 F5 | 	or	local03, result1
085e0                 | LR__0544
085e0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
085e0                 | ' 	}
085e0                 | ' 
085e0                 | ' 	return cl;
085e0     26 17 02 F6 | 	mov	result1, local03
085e4     D0 F0 03 F6 | 	mov	ptra, fp
085e8     E0 00 A0 FD | 	call	#popregs_
085ec                 | _ff_cc_ld_clust_0410_ret
085ec     2D 00 64 FD | 	ret
085f0                 | 
085f0                 | _ff_cc_st_clust_0411
085f0     04 9C 05 F6 | 	mov	COUNT_, #4
085f4     D1 00 A0 FD | 	call	#pushregs_
085f8     1F 49 02 F6 | 	mov	local01, arg01
085fc     20 4B 02 F6 | 	mov	local02, arg02
08600     21 4D 02 F6 | 	mov	local03, arg03
08604     25 3F 02 F6 | 	mov	arg01, local02
08608     1A 3E 06 F1 | 	add	arg01, #26
0860c     26 41 02 F6 | 	mov	arg02, local03
08610     50 EE BF FD | 	call	#_ff_cc_st_word_0352
08614     24 4F C2 FA | 	rdbyte	local04, local01
08618     03 4E 0E F2 | 	cmp	local04, #3 wz
0861c     14 00 90 5D |  if_ne	jmp	#LR__0545
08620     14 4A 06 F1 | 	add	local02, #20
08624     10 4C 46 F0 | 	shr	local03, #16
08628     25 3F 02 F6 | 	mov	arg01, local02
0862c     26 41 02 F6 | 	mov	arg02, local03
08630     30 EE BF FD | 	call	#_ff_cc_st_word_0352
08634                 | LR__0545
08634     D0 F0 03 F6 | 	mov	ptra, fp
08638     E0 00 A0 FD | 	call	#popregs_
0863c                 | _ff_cc_st_clust_0411_ret
0863c     2D 00 64 FD | 	ret
08640                 | 
08640                 | _ff_cc_dir_read_0416
08640     0B 9C 05 F6 | 	mov	COUNT_, #11
08644     D1 00 A0 FD | 	call	#pushregs_
08648     1F 49 02 F6 | 	mov	local01, arg01
0864c     20 4B 02 F6 | 	mov	local02, arg02
08650     04 4C 06 F6 | 	mov	local03, #4
08654     24 4F 02 FB | 	rdlong	local04, local01
08658                 | ' )
08658                 | ' {
08658                 | ' 	FRESULT res = FR_NO_FILE;
08658                 | ' 	FATFS *fs = dp->obj.fs;
08658                 | ' 	BYTE attr, b;
08658                 | ' #line 2376 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08658                 | ' 	while (dp->sect) {
08658                 | LR__0546
08658     18 48 06 F1 | 	add	local01, #24
0865c     24 51 0A FB | 	rdlong	local05, local01 wz
08660     18 48 86 F1 | 	sub	local01, #24
08664     C0 00 90 AD |  if_e	jmp	#LR__0548
08668     27 3F 02 F6 | 	mov	arg01, local04
0866c     18 48 06 F1 | 	add	local01, #24
08670     24 41 02 FB | 	rdlong	arg02, local01
08674     18 48 86 F1 | 	sub	local01, #24
08678     A0 EF BF FD | 	call	#_ff_cc_move_window_0369
0867c     0B 4D 0A F6 | 	mov	local03, result1 wz
08680     A4 00 90 5D |  if_ne	jmp	#LR__0548
08684     1C 48 06 F1 | 	add	local01, #28
08688     24 51 02 FB | 	rdlong	local05, local01
0868c     1C 48 86 F1 | 	sub	local01, #28
08690     28 53 C2 FA | 	rdbyte	local06, local05
08694     29 51 02 F6 | 	mov	local05, local06
08698     07 50 4E F7 | 	zerox	local05, #7 wz
0869c     04 4C 06 A6 |  if_e	mov	local03, #4
086a0                 | ' 			res = FR_NO_FILE; break;
086a0     84 00 90 AD |  if_e	jmp	#LR__0548
086a4     1C 48 06 F1 | 	add	local01, #28
086a8     24 55 02 FB | 	rdlong	local07, local01
086ac     0B 54 06 F1 | 	add	local07, #11
086b0     2A 57 C2 FA | 	rdbyte	local08, local07
086b4     3F 56 06 F5 | 	and	local08, #63
086b8     16 48 86 F1 | 	sub	local01, #22
086bc     24 57 42 FC | 	wrbyte	local08, local01
086c0     06 48 86 F1 | 	sub	local01, #6
086c4     29 51 02 F6 | 	mov	local05, local06
086c8     07 50 46 F7 | 	zerox	local05, #7
086cc     E5 50 0E F2 | 	cmp	local05, #229 wz
086d0     40 00 90 AD |  if_e	jmp	#LR__0547
086d4     29 55 02 F6 | 	mov	local07, local06
086d8     07 54 46 F7 | 	zerox	local07, #7
086dc     2E 54 0E F2 | 	cmp	local07, #46 wz
086e0     30 00 90 AD |  if_e	jmp	#LR__0547
086e4     2B 59 02 F6 | 	mov	local09, local08
086e8     07 58 46 F7 | 	zerox	local09, #7
086ec     0F 58 0E F2 | 	cmp	local09, #15 wz
086f0     20 00 90 AD |  if_e	jmp	#LR__0547
086f4     00 5A 06 F6 | 	mov	local10, #0
086f8     2B 5D 02 F6 | 	mov	local11, local08
086fc     07 5C 46 F7 | 	zerox	local11, #7
08700     20 5C 26 F5 | 	andn	local11, #32
08704     08 5C 0E F2 | 	cmp	local11, #8 wz
08708     01 5A 06 A6 |  if_e	mov	local10, #1
0870c     25 5B 0A F2 | 	cmp	local10, local02 wz
08710                 | ' 				break;
08710     14 00 90 AD |  if_e	jmp	#LR__0548
08714                 | LR__0547
08714     24 3F 02 F6 | 	mov	arg01, local01
08718     00 40 06 F6 | 	mov	arg02, #0
0871c     DC FB BF FD | 	call	#_ff_cc_dir_next_0404
08720     0B 4D 0A F6 | 	mov	local03, result1 wz
08724     30 FF 9F AD |  if_e	jmp	#LR__0546
08728                 | LR__0548
08728     00 4C 0E F2 | 	cmp	local03, #0 wz
0872c     18 48 06 51 |  if_ne	add	local01, #24
08730     24 01 68 5C |  if_ne	wrlong	#0, local01
08734                 | ' 	return res;
08734     26 17 02 F6 | 	mov	result1, local03
08738     D0 F0 03 F6 | 	mov	ptra, fp
0873c     E0 00 A0 FD | 	call	#popregs_
08740                 | _ff_cc_dir_read_0416_ret
08740     2D 00 64 FD | 	ret
08744                 | 
08744                 | _ff_cc_dir_find_0420
08744     0E 9C 05 F6 | 	mov	COUNT_, #14
08748     D1 00 A0 FD | 	call	#pushregs_
0874c     1F 49 02 F6 | 	mov	local01, arg01
08750     24 4B 02 FB | 	rdlong	local02, local01
08754     24 3F 02 F6 | 	mov	arg01, local01
08758     00 40 06 F6 | 	mov	arg02, #0
0875c     10 FA BF FD | 	call	#_ff_cc_dir_sdi_0400
08760     00 16 0E F2 | 	cmp	result1, #0 wz
08764     D8 00 90 5D |  if_ne	jmp	#LR__0552
08768                 | ' #line 2479 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08768                 | ' 	do {
08768                 | LR__0549
08768     25 3F 02 F6 | 	mov	arg01, local02
0876c     18 48 06 F1 | 	add	local01, #24
08770     24 41 02 FB | 	rdlong	arg02, local01
08774     18 48 86 F1 | 	sub	local01, #24
08778     A0 EE BF FD | 	call	#_ff_cc_move_window_0369
0877c     0B 4D 0A F6 | 	mov	local03, result1 wz
08780     B8 00 90 5D |  if_ne	jmp	#LR__0551
08784     1C 48 06 F1 | 	add	local01, #28
08788     24 4F 02 FB | 	rdlong	local04, local01
0878c     1C 48 86 F1 | 	sub	local01, #28
08790     27 51 C2 FA | 	rdbyte	local05, local04
08794     28 4F 02 F6 | 	mov	local04, local05
08798     07 4E 4E F7 | 	zerox	local04, #7 wz
0879c     04 4C 06 A6 |  if_e	mov	local03, #4
087a0     98 00 90 AD |  if_e	jmp	#LR__0551
087a4     1C 48 06 F1 | 	add	local01, #28
087a8     24 53 02 FB | 	rdlong	local06, local01
087ac     0B 52 06 F1 | 	add	local06, #11
087b0     29 4F C2 FA | 	rdbyte	local04, local06
087b4     3F 4E 06 F5 | 	and	local04, #63
087b8     16 48 86 F1 | 	sub	local01, #22
087bc     24 4F 42 FC | 	wrbyte	local04, local01
087c0     16 48 06 F1 | 	add	local01, #22
087c4     24 53 02 FB | 	rdlong	local06, local01
087c8     1C 48 86 F1 | 	sub	local01, #28
087cc     0B 52 06 F1 | 	add	local06, #11
087d0     29 55 C2 FA | 	rdbyte	local07, local06
087d4     2A 4F 02 F6 | 	mov	local04, local07
087d8     07 4E 46 F7 | 	zerox	local04, #7
087dc     08 4E CE F7 | 	test	local04, #8 wz
087e0     38 00 90 5D |  if_ne	jmp	#LR__0550
087e4     1C 48 06 F1 | 	add	local01, #28
087e8     24 57 02 FB | 	rdlong	local08, local01
087ec     2B 59 02 F6 | 	mov	local09, local08
087f0     04 48 06 F1 | 	add	local01, #4
087f4     24 5B 02 F6 | 	mov	local10, local01
087f8     2D 5D 02 F6 | 	mov	local11, local10
087fc     0B 5E 06 F6 | 	mov	local12, #11
08800     2C 3F 02 F6 | 	mov	arg01, local09
08804     2E 41 02 F6 | 	mov	arg02, local11
08808     0B 42 06 F6 | 	mov	arg03, #11
0880c     20 48 86 F1 | 	sub	local01, #32
08810     D0 EC BF FD | 	call	#_ff_cc_mem_cmp_0362
08814     0B 61 0A F6 | 	mov	local13, result1 wz
08818     20 00 90 AD |  if_e	jmp	#LR__0551
0881c                 | LR__0550
0881c     24 4F 02 F6 | 	mov	local04, local01
08820     00 52 06 F6 | 	mov	local06, #0
08824     27 3F 02 F6 | 	mov	arg01, local04
08828     00 40 06 F6 | 	mov	arg02, #0
0882c     CC FA BF FD | 	call	#_ff_cc_dir_next_0404
08830     0B 63 02 F6 | 	mov	local14, result1
08834     31 4D 0A F6 | 	mov	local03, local14 wz
08838     2C FF 9F AD |  if_e	jmp	#LR__0549
0883c                 | LR__0551
0883c                 | ' 
0883c                 | ' 	return res;
0883c     26 17 02 F6 | 	mov	result1, local03
08840                 | LR__0552
08840     D0 F0 03 F6 | 	mov	ptra, fp
08844     E0 00 A0 FD | 	call	#popregs_
08848                 | _ff_cc_dir_find_0420_ret
08848     2D 00 64 FD | 	ret
0884c                 | 
0884c                 | _ff_cc_dir_register_0423
0884c     03 9C 05 F6 | 	mov	COUNT_, #3
08850     D1 00 A0 FD | 	call	#pushregs_
08854     1F 49 02 F6 | 	mov	local01, arg01
08858     24 4B 02 FB | 	rdlong	local02, local01
0885c     24 3F 02 F6 | 	mov	arg01, local01
08860     01 40 06 F6 | 	mov	arg02, #1
08864     68 FC BF FD | 	call	#_ff_cc_dir_alloc_0408
08868     0B 4D 0A F6 | 	mov	local03, result1 wz
0886c     60 00 90 5D |  if_ne	jmp	#LR__0558
08870     18 48 06 F1 | 	add	local01, #24
08874     24 41 02 FB | 	rdlong	arg02, local01
08878     18 48 86 F1 | 	sub	local01, #24
0887c     25 3F 02 F6 | 	mov	arg01, local02
08880     98 ED BF FD | 	call	#_ff_cc_move_window_0369
08884     0B 4D 0A F6 | 	mov	local03, result1 wz
08888     44 00 90 5D |  if_ne	jmp	#LR__0557
0888c     1C 48 06 F1 | 	add	local01, #28
08890     24 3F 02 FB | 	rdlong	arg01, local01
08894     1C 48 86 F1 | 	sub	local01, #28
08898     00 40 06 F6 | 	mov	arg02, #0
0889c                 | ' {
0889c                 | ' 	BYTE *d = (BYTE*)dst;
0889c                 | ' 
0889c                 | ' 	do {
0889c     6C 77 9F FE | 	loc	pa,	#(@LR__0555-@LR__0553)
088a0     B4 00 A0 FD | 	call	#FCACHE_LOAD_
088a4                 | LR__0553
088a4     20 04 DC FC | 	rep	@LR__0556, #32
088a8                 | LR__0554
088a8     1F 41 42 FC | 	wrbyte	arg02, arg01
088ac     01 3E 06 F1 | 	add	arg01, #1
088b0                 | LR__0555
088b0                 | LR__0556
088b0     1C 48 06 F1 | 	add	local01, #28
088b4     24 3F 02 FB | 	rdlong	arg01, local01
088b8     04 48 06 F1 | 	add	local01, #4
088bc     24 41 02 F6 | 	mov	arg02, local01
088c0     0B 42 06 F6 | 	mov	arg03, #11
088c4     EC EB BF FD | 	call	#_ff_cc_mem_cpy_0356
088c8     03 4A 06 F1 | 	add	local02, #3
088cc     25 03 48 FC | 	wrbyte	#1, local02
088d0                 | LR__0557
088d0                 | LR__0558
088d0                 | ' 			mem_set(dp->dir, 0,  32 );
088d0                 | ' 			mem_cpy(dp->dir +  0 , dp->fn, 11);
088d0                 | ' #line 2613 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
088d0                 | ' 			fs->wflag = 1;
088d0                 | ' 		}
088d0                 | ' 	}
088d0                 | ' 
088d0                 | ' 	return res;
088d0     26 17 02 F6 | 	mov	result1, local03
088d4     D0 F0 03 F6 | 	mov	ptra, fp
088d8     E0 00 A0 FD | 	call	#popregs_
088dc                 | _ff_cc_dir_register_0423_ret
088dc     2D 00 64 FD | 	ret
088e0                 | 
088e0                 | _ff_cc_dir_remove_0426
088e0     04 9C 05 F6 | 	mov	COUNT_, #4
088e4     D1 00 A0 FD | 	call	#pushregs_
088e8     1F 49 02 F6 | 	mov	local01, arg01
088ec     24 4B 02 FB | 	rdlong	local02, local01
088f0     18 48 06 F1 | 	add	local01, #24
088f4     24 41 02 FB | 	rdlong	arg02, local01
088f8     18 48 86 F1 | 	sub	local01, #24
088fc     25 3F 02 F6 | 	mov	arg01, local02
08900     18 ED BF FD | 	call	#_ff_cc_move_window_0369
08904     0B 4D 0A F6 | 	mov	local03, result1 wz
08908     14 00 90 5D |  if_ne	jmp	#LR__0559
0890c     1C 48 06 F1 | 	add	local01, #28
08910     24 4F 02 FB | 	rdlong	local04, local01
08914     27 CB 49 FC | 	wrbyte	#229, local04
08918     03 4A 06 F1 | 	add	local02, #3
0891c     25 03 48 FC | 	wrbyte	#1, local02
08920                 | LR__0559
08920                 | ' 		dp->dir[ 0 ] =  0xE5 ;
08920                 | ' 		fs->wflag = 1;
08920                 | ' 	}
08920                 | ' 
08920                 | ' 
08920                 | ' 	return res;
08920     26 17 02 F6 | 	mov	result1, local03
08924     D0 F0 03 F6 | 	mov	ptra, fp
08928     E0 00 A0 FD | 	call	#popregs_
0892c                 | _ff_cc_dir_remove_0426_ret
0892c     2D 00 64 FD | 	ret
08930                 | 
08930                 | _ff_cc_get_fileinfo_0430
08930     0B 9C 05 F6 | 	mov	COUNT_, #11
08934     D1 00 A0 FD | 	call	#pushregs_
08938     1F 49 02 F6 | 	mov	local01, arg01
0893c     20 4B 02 F6 | 	mov	local02, arg02
08940     0C 4A 06 F1 | 	add	local02, #12
08944     25 01 48 FC | 	wrbyte	#0, local02
08948     0C 4A 86 F1 | 	sub	local02, #12
0894c     18 48 06 F1 | 	add	local01, #24
08950     24 4D 02 FB | 	rdlong	local03, local01
08954     18 48 86 F1 | 	sub	local01, #24
08958     26 4F 0A F6 | 	mov	local04, local03 wz
0895c     00 01 90 AD |  if_e	jmp	#LR__0563
08960     00 50 06 F6 | 	mov	local05, #0
08964     00 52 06 F6 | 	mov	local06, #0
08968                 | ' #line 2755 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08968                 | ' 	si = di = 0;
08968                 | ' 	while (si < 11) {
08968                 | LR__0560
08968     0B 52 1E F2 | 	cmp	local06, #11 wcz
0896c     78 00 90 3D |  if_ae	jmp	#LR__0562
08970     1C 48 06 F1 | 	add	local01, #28
08974     24 55 02 FB | 	rdlong	local07, local01
08978     1C 48 86 F1 | 	sub	local01, #28
0897c     29 57 02 F6 | 	mov	local08, local06
08980     2A 57 02 F1 | 	add	local08, local07
08984     2B 59 C2 FA | 	rdbyte	local09, local08
08988     2C 4F 02 F6 | 	mov	local04, local09
0898c     07 4E 46 F7 | 	zerox	local04, #7
08990     20 4E 0E F2 | 	cmp	local04, #32 wz
08994     01 52 06 F1 | 	add	local06, #1
08998     CC FF 9F AD |  if_e	jmp	#LR__0560
0899c     2C 4F 02 F6 | 	mov	local04, local09
089a0     07 4E 46 F7 | 	zerox	local04, #7
089a4     05 4E 0E F2 | 	cmp	local04, #5 wz
089a8     E5 58 06 A6 |  if_e	mov	local09, #229
089ac     09 52 0E F2 | 	cmp	local06, #9 wz
089b0     18 00 90 5D |  if_ne	jmp	#LR__0561
089b4     28 5B 02 F6 | 	mov	local10, local05
089b8     0C 4A 06 F1 | 	add	local02, #12
089bc     25 5B 02 F1 | 	add	local10, local02
089c0     2D 5D 48 FC | 	wrbyte	#46, local10
089c4     01 50 06 F1 | 	add	local05, #1
089c8     0C 4A 86 F1 | 	sub	local02, #12
089cc                 | LR__0561
089cc     28 5B 02 F6 | 	mov	local10, local05
089d0     0C 4A 06 F1 | 	add	local02, #12
089d4     25 5B 02 F1 | 	add	local10, local02
089d8     2D 59 42 FC | 	wrbyte	local09, local10
089dc     01 50 06 F1 | 	add	local05, #1
089e0     0C 4A 86 F1 | 	sub	local02, #12
089e4     80 FF 9F FD | 	jmp	#LR__0560
089e8                 | LR__0562
089e8     0C 4A 06 F1 | 	add	local02, #12
089ec     25 51 02 F1 | 	add	local05, local02
089f0     28 01 48 FC | 	wrbyte	#0, local05
089f4     1C 48 06 F1 | 	add	local01, #28
089f8     24 4F 02 FB | 	rdlong	local04, local01
089fc     0B 4E 06 F1 | 	add	local04, #11
08a00     27 5B C2 FA | 	rdbyte	local10, local04
08a04     04 4A 86 F1 | 	sub	local02, #4
08a08     25 5B 42 FC | 	wrbyte	local10, local02
08a0c     08 4A 86 F1 | 	sub	local02, #8
08a10     24 3F 02 FB | 	rdlong	arg01, local01
08a14     1C 48 86 F1 | 	sub	local01, #28
08a18     1C 3E 06 F1 | 	add	arg01, #28
08a1c     04 EA BF FD | 	call	#_ff_cc_ld_dword_0351
08a20     25 17 62 FC | 	wrlong	result1, local02
08a24     1C 48 06 F1 | 	add	local01, #28
08a28     24 3F 02 FB | 	rdlong	arg01, local01
08a2c     1C 48 86 F1 | 	sub	local01, #28
08a30     16 3E 06 F1 | 	add	arg01, #22
08a34     C8 E9 BF FD | 	call	#_ff_cc_ld_word_0349
08a38     0B 5D 02 F6 | 	mov	local11, result1
08a3c     06 4A 06 F1 | 	add	local02, #6
08a40     25 5D 52 FC | 	wrword	local11, local02
08a44     06 4A 86 F1 | 	sub	local02, #6
08a48     1C 48 06 F1 | 	add	local01, #28
08a4c     24 3F 02 FB | 	rdlong	arg01, local01
08a50     18 3E 06 F1 | 	add	arg01, #24
08a54     A8 E9 BF FD | 	call	#_ff_cc_ld_word_0349
08a58     04 4A 06 F1 | 	add	local02, #4
08a5c     25 17 52 FC | 	wrword	result1, local02
08a60                 | LR__0563
08a60     D0 F0 03 F6 | 	mov	ptra, fp
08a64     E0 00 A0 FD | 	call	#popregs_
08a68                 | _ff_cc_get_fileinfo_0430_ret
08a68     2D 00 64 FD | 	ret
08a6c                 | 
08a6c                 | _ff_cc_create_name_0438
08a6c     0E 9C 05 F6 | 	mov	COUNT_, #14
08a70     D1 00 A0 FD | 	call	#pushregs_
08a74     1F 49 02 F6 | 	mov	local01, arg01
08a78     20 4B 02 F6 | 	mov	local02, arg02
08a7c     25 4D 02 FB | 	rdlong	local03, local02
08a80     20 48 06 F1 | 	add	local01, #32
08a84     24 4F 02 F6 | 	mov	local04, local01
08a88     27 3F 02 F6 | 	mov	arg01, local04
08a8c     20 40 06 F6 | 	mov	arg02, #32
08a90     0B 42 06 F6 | 	mov	arg03, #11
08a94     20 48 86 F1 | 	sub	local01, #32
08a98                 | ' {
08a98                 | ' 	BYTE *d = (BYTE*)dst;
08a98                 | ' 
08a98                 | ' 	do {
08a98     70 75 9F FE | 	loc	pa,	#(@LR__0566-@LR__0564)
08a9c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
08aa0                 | LR__0564
08aa0     0B 04 DC FC | 	rep	@LR__0567, #11
08aa4                 | LR__0565
08aa4     1F 41 42 FC | 	wrbyte	arg02, arg01
08aa8     01 3E 06 F1 | 	add	arg01, #1
08aac                 | LR__0566
08aac                 | LR__0567
08aac     00 50 06 F6 | 	mov	local05, #0
08ab0     00 52 06 F6 | 	mov	local06, #0
08ab4     08 54 06 F6 | 	mov	local07, #8
08ab8                 | ' 
08ab8                 | ' 
08ab8                 | ' 	p = *path; sfn = dp->fn;
08ab8                 | ' 	mem_set(sfn, ' ', 11);
08ab8                 | ' 	si = i = 0; ni = 8;
08ab8                 | ' #line 3011 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08ab8                 | ' 	for (;;) {
08ab8                 | LR__0568
08ab8     29 57 02 F6 | 	mov	local08, local06
08abc     26 57 02 F1 | 	add	local08, local03
08ac0     2B 59 C2 FA | 	rdbyte	local09, local08
08ac4     2C 5B 02 F6 | 	mov	local10, local09
08ac8     07 5A 46 F7 | 	zerox	local10, #7
08acc     20 5A 1E F2 | 	cmp	local10, #32 wcz
08ad0     01 52 06 F1 | 	add	local06, #1
08ad4     A4 01 90 ED |  if_be	jmp	#LR__0582
08ad8     2C 5B 02 F6 | 	mov	local10, local09
08adc     07 5A 46 F7 | 	zerox	local10, #7
08ae0     2F 5A 0E F2 | 	cmp	local10, #47 wz
08ae4     10 00 90 AD |  if_e	jmp	#LR__0569
08ae8     2C 5D 02 F6 | 	mov	local11, local09
08aec     07 5C 46 F7 | 	zerox	local11, #7
08af0     5C 5C 0E F2 | 	cmp	local11, #92 wz
08af4     30 00 90 5D |  if_ne	jmp	#LR__0572
08af8                 | LR__0569
08af8                 | ' 			while (p[si] == '/' || p[si] == '\\') si++;
08af8                 | LR__0570
08af8     29 5D 02 F6 | 	mov	local11, local06
08afc     26 5D 02 F1 | 	add	local11, local03
08b00     2E 5B C2 FA | 	rdbyte	local10, local11
08b04     2F 5A 0E F2 | 	cmp	local10, #47 wz
08b08     14 00 90 AD |  if_e	jmp	#LR__0571
08b0c     29 5F 02 F6 | 	mov	local12, local06
08b10     26 5F 02 F1 | 	add	local12, local03
08b14     2F 61 C2 FA | 	rdbyte	local13, local12
08b18     5C 60 0E F2 | 	cmp	local13, #92 wz
08b1c     5C 01 90 5D |  if_ne	jmp	#LR__0582
08b20                 | LR__0571
08b20     01 52 06 F1 | 	add	local06, #1
08b24     D0 FF 9F FD | 	jmp	#LR__0570
08b28                 | ' 			break;
08b28                 | LR__0572
08b28     2C 5B 02 F6 | 	mov	local10, local09
08b2c     07 5A 46 F7 | 	zerox	local10, #7
08b30     2E 5A 0E F2 | 	cmp	local10, #46 wz
08b34     08 00 90 AD |  if_e	jmp	#LR__0573
08b38     2A 51 1A F2 | 	cmp	local05, local07 wcz
08b3c     28 00 90 CD |  if_b	jmp	#LR__0576
08b40                 | LR__0573
08b40     0B 54 0E F2 | 	cmp	local07, #11 wz
08b44     0C 00 90 AD |  if_e	jmp	#LR__0574
08b48     07 58 46 F7 | 	zerox	local09, #7
08b4c     2E 58 0E F2 | 	cmp	local09, #46 wz
08b50     08 00 90 AD |  if_e	jmp	#LR__0575
08b54                 | LR__0574
08b54     06 16 06 F6 | 	mov	result1, #6
08b58     60 01 90 FD | 	jmp	#LR__0583
08b5c                 | LR__0575
08b5c     08 50 06 F6 | 	mov	local05, #8
08b60     0B 54 06 F6 | 	mov	local07, #11
08b64                 | ' 			i = 8; ni = 11;
08b64                 | ' 			continue;
08b64     50 FF 9F FD | 	jmp	#LR__0568
08b68                 | LR__0576
08b68     2C 5B 02 F6 | 	mov	local10, local09
08b6c     07 5A 46 F7 | 	zerox	local10, #7
08b70     80 5A 1E F2 | 	cmp	local10, #128 wcz
08b74     18 00 90 CD |  if_b	jmp	#LR__0577
08b78     07 58 46 F7 | 	zerox	local09, #7
08b7c     7F 58 06 F5 | 	and	local09, #127
08b80     06 0E 06 F1 | 	add	ptr__ff_cc_dat__, #6
08b84     07 59 02 F1 | 	add	local09, ptr__ff_cc_dat__
08b88     2C 59 C2 FA | 	rdbyte	local09, local09
08b8c     06 0E 86 F1 | 	sub	ptr__ff_cc_dat__, #6
08b90                 | LR__0577
08b90     2C 3F 02 F6 | 	mov	arg01, local09
08b94     07 3E 4E F7 | 	zerox	arg01, #7 wz
08b98     00 16 06 56 |  if_ne	mov	result1, #0
08b9c                 | ' 
08b9c                 | ' 	return 0;
08b9c     00 16 06 A6 |  if_e	mov	result1, #0
08ba0     00 16 0E F2 | 	cmp	result1, #0 wz
08ba4     68 00 90 AD |  if_e	jmp	#LR__0580
08ba8     29 57 02 F6 | 	mov	local08, local06
08bac     26 61 02 F6 | 	mov	local13, local03
08bb0     26 57 02 F1 | 	add	local08, local03
08bb4     2B 63 C2 FA | 	rdbyte	local14, local08
08bb8     31 3F 02 F6 | 	mov	arg01, local14
08bbc     01 52 06 F1 | 	add	local06, #1
08bc0     07 3E 4E F7 | 	zerox	arg01, #7 wz
08bc4     00 16 06 56 |  if_ne	mov	result1, #0
08bc8                 | ' 
08bc8                 | ' 	return 0;
08bc8     00 16 06 A6 |  if_e	mov	result1, #0
08bcc     0B 5D 0A F6 | 	mov	local11, result1 wz
08bd0     10 00 90 AD |  if_e	jmp	#LR__0578
08bd4     2A 57 02 F6 | 	mov	local08, local07
08bd8     01 56 86 F1 | 	sub	local08, #1
08bdc     2B 51 1A F2 | 	cmp	local05, local08 wcz
08be0     08 00 90 CD |  if_b	jmp	#LR__0579
08be4                 | LR__0578
08be4     06 16 06 F6 | 	mov	result1, #6
08be8     D0 00 90 FD | 	jmp	#LR__0583
08bec                 | LR__0579
08bec     28 57 02 F6 | 	mov	local08, local05
08bf0     27 57 02 F1 | 	add	local08, local04
08bf4     2B 59 42 FC | 	wrbyte	local09, local08
08bf8     01 50 06 F1 | 	add	local05, #1
08bfc     28 57 02 F6 | 	mov	local08, local05
08c00     27 57 02 F1 | 	add	local08, local04
08c04     2B 63 42 FC | 	wrbyte	local14, local08
08c08     01 50 06 F1 | 	add	local05, #1
08c0c     A8 FE 9F FD | 	jmp	#LR__0568
08c10                 | LR__0580
08c10     89 00 00 FF 
08c14     E2 3E 06 F6 | 	mov	arg01, ##@LR__1241
08c18     2C 57 02 F6 | 	mov	local08, local09
08c1c     07 56 46 F7 | 	zerox	local08, #7
08c20     2B 61 02 F6 | 	mov	local13, local08
08c24     30 41 02 F6 | 	mov	arg02, local13
08c28     F0 E8 BF FD | 	call	#_ff_cc_chk_chr_0363
08c2c     0B 5F 0A F6 | 	mov	local12, result1 wz
08c30     06 16 06 56 |  if_ne	mov	result1, #6
08c34     84 00 90 5D |  if_ne	jmp	#LR__0583
08c38     2C 5B 02 F6 | 	mov	local10, local09
08c3c     07 5A 46 F7 | 	zerox	local10, #7
08c40     61 5A 1E F2 | 	cmp	local10, #97 wcz
08c44     20 00 90 CD |  if_b	jmp	#LR__0581
08c48     2C 5D 02 F6 | 	mov	local11, local09
08c4c     07 5C 46 F7 | 	zerox	local11, #7
08c50     7A 5C 1E F2 | 	cmp	local11, #122 wcz
08c54     10 00 90 1D |  if_a	jmp	#LR__0581
08c58     2C 5B 02 F6 | 	mov	local10, local09
08c5c     07 5A 46 F7 | 	zerox	local10, #7
08c60     20 5A 86 F1 | 	sub	local10, #32
08c64     2D 59 02 F6 | 	mov	local09, local10
08c68                 | LR__0581
08c68     28 57 02 F6 | 	mov	local08, local05
08c6c     27 57 02 F1 | 	add	local08, local04
08c70     2B 59 42 FC | 	wrbyte	local09, local08
08c74     01 50 06 F1 | 	add	local05, #1
08c78     3C FE 9F FD | 	jmp	#LR__0568
08c7c                 | LR__0582
08c7c     29 4D 02 F1 | 	add	local03, local06
08c80     25 4D 62 FC | 	wrlong	local03, local02
08c84     00 50 0E F2 | 	cmp	local05, #0 wz
08c88     06 16 06 A6 |  if_e	mov	result1, #6
08c8c     2C 00 90 AD |  if_e	jmp	#LR__0583
08c90     27 5B C2 FA | 	rdbyte	local10, local04
08c94     E5 5A 0E F2 | 	cmp	local10, #229 wz
08c98     27 0B 48 AC |  if_e	wrbyte	#5, local04
08c9c     2C 5D 02 F6 | 	mov	local11, local09
08ca0     07 5C 46 F7 | 	zerox	local11, #7
08ca4     20 5C 1E F2 | 	cmp	local11, #32 wcz
08ca8     04 5A 06 E6 |  if_be	mov	local10, #4
08cac     00 5A 06 16 |  if_a	mov	local10, #0
08cb0     0B 4E 06 F1 | 	add	local04, #11
08cb4     27 5B 42 FC | 	wrbyte	local10, local04
08cb8                 | ' 	sfn[ 11 ] = (c <= ' ') ?  0x04  : 0;
08cb8                 | ' 
08cb8                 | ' 	return FR_OK;
08cb8     00 16 06 F6 | 	mov	result1, #0
08cbc                 | LR__0583
08cbc     D0 F0 03 F6 | 	mov	ptra, fp
08cc0     E0 00 A0 FD | 	call	#popregs_
08cc4                 | _ff_cc_create_name_0438_ret
08cc4     2D 00 64 FD | 	ret
08cc8                 | 
08cc8                 | _ff_cc_follow_path_0442
08cc8     07 9C 05 F6 | 	mov	COUNT_, #7
08ccc     D1 00 A0 FD | 	call	#pushregs_
08cd0     18 F0 07 F1 | 	add	ptra, #24
08cd4     04 A0 05 F1 | 	add	fp, #4
08cd8     D0 3E 62 FC | 	wrlong	arg01, fp
08cdc     04 A0 05 F1 | 	add	fp, #4
08ce0     D0 40 62 FC | 	wrlong	arg02, fp
08ce4     04 A0 85 F1 | 	sub	fp, #4
08ce8     D0 48 02 FB | 	rdlong	local01, fp
08cec     24 4B 02 FB | 	rdlong	local02, local01
08cf0     10 A0 05 F1 | 	add	fp, #16
08cf4     D0 4A 62 FC | 	wrlong	local02, fp
08cf8     14 A0 85 F1 | 	sub	fp, #20
08cfc     48 73 9F FE | 	loc	pa,	#(@LR__0586-@LR__0584)
08d00     B4 00 A0 FD | 	call	#FCACHE_LOAD_
08d04                 | ' )
08d04                 | ' {
08d04                 | ' 	FRESULT res;
08d04                 | ' 	BYTE ns;
08d04                 | ' 	FATFS *fs = dp->obj.fs;
08d04                 | ' #line 3075 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08d04                 | ' 	{
08d04                 | ' 		while (*path == '/' || *path == '\\') path++;
08d04                 | LR__0584
08d04     08 A0 05 F1 | 	add	fp, #8
08d08     D0 4C 02 FB | 	rdlong	local03, fp
08d0c     08 A0 85 F1 | 	sub	fp, #8
08d10     26 49 C2 FA | 	rdbyte	local01, local03
08d14     2F 48 0E F2 | 	cmp	local01, #47 wz
08d18     18 00 90 AD |  if_e	jmp	#LR__0585
08d1c     08 A0 05 F1 | 	add	fp, #8
08d20     D0 4E 02 FB | 	rdlong	local04, fp
08d24     08 A0 85 F1 | 	sub	fp, #8
08d28     27 51 C2 FA | 	rdbyte	local05, local04
08d2c     5C 50 0E F2 | 	cmp	local05, #92 wz
08d30     18 00 90 5D |  if_ne	jmp	#LR__0587
08d34                 | LR__0585
08d34     08 A0 05 F1 | 	add	fp, #8
08d38     D0 4A 02 FB | 	rdlong	local02, fp
08d3c     01 4A 06 F1 | 	add	local02, #1
08d40     D0 4A 62 FC | 	wrlong	local02, fp
08d44     08 A0 85 F1 | 	sub	fp, #8
08d48     B8 FF 9F FD | 	jmp	#LR__0584
08d4c                 | LR__0586
08d4c                 | LR__0587
08d4c     04 A0 05 F1 | 	add	fp, #4
08d50     D0 48 02 FB | 	rdlong	local01, fp
08d54     08 48 06 F1 | 	add	local01, #8
08d58     24 01 68 FC | 	wrlong	#0, local01
08d5c     04 A0 05 F1 | 	add	fp, #4
08d60     D0 4C 02 FB | 	rdlong	local03, fp
08d64     08 A0 85 F1 | 	sub	fp, #8
08d68     26 49 C2 FA | 	rdbyte	local01, local03
08d6c     20 48 1E F2 | 	cmp	local01, #32 wcz
08d70     30 00 90 3D |  if_ae	jmp	#LR__0588
08d74     04 A0 05 F1 | 	add	fp, #4
08d78     D0 48 02 FB | 	rdlong	local01, fp
08d7c     2B 48 06 F1 | 	add	local01, #43
08d80     24 01 49 FC | 	wrbyte	#128, local01
08d84     D0 3E 02 FB | 	rdlong	arg01, fp
08d88     04 A0 85 F1 | 	sub	fp, #4
08d8c     00 40 06 F6 | 	mov	arg02, #0
08d90     DC F3 BF FD | 	call	#_ff_cc_dir_sdi_0400
08d94     0C A0 05 F1 | 	add	fp, #12
08d98     D0 16 62 FC | 	wrlong	result1, fp
08d9c     0C A0 85 F1 | 	sub	fp, #12
08da0     30 01 90 FD | 	jmp	#LR__0593
08da4                 | LR__0588
08da4                 | ' 		for (;;) {
08da4                 | LR__0589
08da4     04 A0 05 F1 | 	add	fp, #4
08da8     D0 3E 02 FB | 	rdlong	arg01, fp
08dac     04 A0 05 F1 | 	add	fp, #4
08db0     D0 40 02 F6 | 	mov	arg02, fp
08db4     08 A0 85 F1 | 	sub	fp, #8
08db8     B0 FC BF FD | 	call	#_ff_cc_create_name_0438
08dbc     0B 4F 02 F6 | 	mov	local04, result1
08dc0     0C A0 05 F1 | 	add	fp, #12
08dc4     D0 4E 62 FC | 	wrlong	local04, fp
08dc8     D0 48 0A FB | 	rdlong	local01, fp wz
08dcc     0C A0 85 F1 | 	sub	fp, #12
08dd0     00 01 90 5D |  if_ne	jmp	#LR__0592
08dd4     04 A0 05 F1 | 	add	fp, #4
08dd8     D0 3E 02 FB | 	rdlong	arg01, fp
08ddc     04 A0 85 F1 | 	sub	fp, #4
08de0     60 F9 BF FD | 	call	#_ff_cc_dir_find_0420
08de4     0C A0 05 F1 | 	add	fp, #12
08de8     D0 16 62 FC | 	wrlong	result1, fp
08dec     08 A0 85 F1 | 	sub	fp, #8
08df0     D0 48 02 FB | 	rdlong	local01, fp
08df4     2B 48 06 F1 | 	add	local01, #43
08df8     24 4B C2 FA | 	rdbyte	local02, local01
08dfc     0C A0 05 F1 | 	add	fp, #12
08e00     D0 4A 42 FC | 	wrbyte	local02, fp
08e04     04 A0 85 F1 | 	sub	fp, #4
08e08     D0 48 0A FB | 	rdlong	local01, fp wz
08e0c     0C A0 85 F1 | 	sub	fp, #12
08e10     38 00 90 AD |  if_e	jmp	#LR__0590
08e14     0C A0 05 F1 | 	add	fp, #12
08e18     D0 48 02 FB | 	rdlong	local01, fp
08e1c     0C A0 85 F1 | 	sub	fp, #12
08e20     04 48 0E F2 | 	cmp	local01, #4 wz
08e24     AC 00 90 5D |  if_ne	jmp	#LR__0592
08e28     10 A0 05 F1 | 	add	fp, #16
08e2c     D0 48 C2 FA | 	rdbyte	local01, fp
08e30     10 A0 85 F1 | 	sub	fp, #16
08e34     07 48 46 F7 | 	zerox	local01, #7
08e38     04 48 CE F7 | 	test	local01, #4 wz
08e3c     0C A0 05 A1 |  if_e	add	fp, #12
08e40     D0 0A 68 AC |  if_e	wrlong	#5, fp
08e44     0C A0 85 A1 |  if_e	sub	fp, #12
08e48                 | ' 					}
08e48                 | ' 				}
08e48                 | ' 				break;
08e48     88 00 90 FD | 	jmp	#LR__0592
08e4c                 | LR__0590
08e4c     10 A0 05 F1 | 	add	fp, #16
08e50     D0 48 C2 FA | 	rdbyte	local01, fp
08e54     10 A0 85 F1 | 	sub	fp, #16
08e58     07 48 46 F7 | 	zerox	local01, #7
08e5c     04 48 CE F7 | 	test	local01, #4 wz
08e60     70 00 90 5D |  if_ne	jmp	#LR__0592
08e64     04 A0 05 F1 | 	add	fp, #4
08e68     D0 4C 02 FB | 	rdlong	local03, fp
08e6c     04 A0 85 F1 | 	sub	fp, #4
08e70     06 4C 06 F1 | 	add	local03, #6
08e74     26 49 C2 FA | 	rdbyte	local01, local03
08e78     10 48 CE F7 | 	test	local01, #16 wz
08e7c     10 00 90 5D |  if_ne	jmp	#LR__0591
08e80     0C A0 05 F1 | 	add	fp, #12
08e84     D0 0A 68 FC | 	wrlong	#5, fp
08e88     0C A0 85 F1 | 	sub	fp, #12
08e8c                 | ' 				res = FR_NO_PATH; break;
08e8c     44 00 90 FD | 	jmp	#LR__0592
08e90                 | LR__0591
08e90     04 A0 05 F1 | 	add	fp, #4
08e94     D0 48 02 FB | 	rdlong	local01, fp
08e98     10 A0 05 F1 | 	add	fp, #16
08e9c     D0 3E 02 FB | 	rdlong	arg01, fp
08ea0     1F 41 02 F6 | 	mov	arg02, arg01
08ea4     30 40 06 F1 | 	add	arg02, #48
08ea8     10 A0 85 F1 | 	sub	fp, #16
08eac     D0 52 02 FB | 	rdlong	local06, fp
08eb0     04 A0 85 F1 | 	sub	fp, #4
08eb4     10 52 06 F1 | 	add	local06, #16
08eb8     29 55 02 FB | 	rdlong	local07, local06
08ebc     FF 55 06 F5 | 	and	local07, #511
08ec0     2A 41 02 F1 | 	add	arg02, local07
08ec4     D0 F6 BF FD | 	call	#_ff_cc_ld_clust_0410
08ec8     08 48 06 F1 | 	add	local01, #8
08ecc     24 17 62 FC | 	wrlong	result1, local01
08ed0     D0 FE 9F FD | 	jmp	#LR__0589
08ed4                 | LR__0592
08ed4                 | LR__0593
08ed4                 | ' 			}
08ed4                 | ' #line 3131 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08ed4                 | ' 			{
08ed4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
08ed4                 | ' 			}
08ed4                 | ' 		}
08ed4                 | ' 	}
08ed4                 | ' 
08ed4                 | ' 	return res;
08ed4     0C A0 05 F1 | 	add	fp, #12
08ed8     D0 16 02 FB | 	rdlong	result1, fp
08edc     0C A0 85 F1 | 	sub	fp, #12
08ee0     D0 F0 03 F6 | 	mov	ptra, fp
08ee4     E0 00 A0 FD | 	call	#popregs_
08ee8                 | _ff_cc_follow_path_0442_ret
08ee8     2D 00 64 FD | 	ret
08eec                 | 
08eec                 | _ff_cc_get_ldnumber_0448
08eec     1F 29 02 F6 | 	mov	_var01, arg01
08ef0     01 2A 66 F6 | 	neg	_var02, #1
08ef4     14 2D 0A FB | 	rdlong	_var03, _var01 wz
08ef8     16 2F 02 F6 | 	mov	_var04, _var03
08efc     01 16 66 A6 |  if_e	neg	result1, #1
08f00     8C 00 90 AD |  if_e	jmp	#_ff_cc_get_ldnumber_0448_ret
08f04     20 71 9F FE | 	loc	pa,	#(@LR__0595-@LR__0594)
08f08     B4 00 A0 FD | 	call	#FCACHE_LOAD_
08f0c                 | ' 	do tc = *tt++; while ((UINT)tc >= ( 0  ? ' ' : '!') && tc != ':');
08f0c                 | LR__0594
08f0c     17 31 C2 FA | 	rdbyte	_var05, _var04
08f10     18 33 02 F6 | 	mov	_var06, _var05
08f14     07 32 46 F7 | 	zerox	_var06, #7
08f18     21 32 1E F2 | 	cmp	_var06, #33 wcz
08f1c     01 2E 06 F1 | 	add	_var04, #1
08f20     10 00 90 CD |  if_b	jmp	#LR__0596
08f24     18 35 02 F6 | 	mov	_var07, _var05
08f28     07 34 46 F7 | 	zerox	_var07, #7
08f2c     3A 34 0E F2 | 	cmp	_var07, #58 wz
08f30     D8 FF 9F 5D |  if_ne	jmp	#LR__0594
08f34                 | LR__0595
08f34                 | LR__0596
08f34     18 33 02 F6 | 	mov	_var06, _var05
08f38     07 32 46 F7 | 	zerox	_var06, #7
08f3c     3A 32 0E F2 | 	cmp	_var06, #58 wz
08f40     48 00 90 5D |  if_ne	jmp	#LR__0598
08f44     01 36 06 F6 | 	mov	_var08, #1
08f48     16 33 C2 FA | 	rdbyte	_var06, _var03
08f4c     30 32 1E F2 | 	cmp	_var06, #48 wcz
08f50     24 00 90 CD |  if_b	jmp	#LR__0597
08f54     16 35 C2 FA | 	rdbyte	_var07, _var03
08f58     39 34 1E F2 | 	cmp	_var07, #57 wcz
08f5c     18 00 90 1D |  if_a	jmp	#LR__0597
08f60     16 39 02 F6 | 	mov	_var09, _var03
08f64     02 38 06 F1 | 	add	_var09, #2
08f68     17 39 0A F2 | 	cmp	_var09, _var04 wz
08f6c     16 33 C2 AA |  if_e	rdbyte	_var06, _var03
08f70     30 32 86 A1 |  if_e	sub	_var06, #48
08f74     19 37 02 A6 |  if_e	mov	_var08, _var06
08f78                 | LR__0597
08f78     01 36 5E F2 | 	cmps	_var08, #1 wcz
08f7c     1B 2B 02 C6 |  if_b	mov	_var02, _var08
08f80     14 2F 62 CC |  if_b	wrlong	_var04, _var01
08f84                 | ' 			vol = i;
08f84                 | ' 			*path = tt;
08f84                 | ' 		}
08f84                 | ' 		return vol;
08f84     15 17 02 F6 | 	mov	result1, _var02
08f88     04 00 90 FD | 	jmp	#_ff_cc_get_ldnumber_0448_ret
08f8c                 | LR__0598
08f8c                 | ' 	}
08f8c                 | ' #line 3209 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
08f8c                 | ' 	vol = 0;
08f8c                 | ' 
08f8c                 | ' 	return vol;
08f8c     00 16 06 F6 | 	mov	result1, #0
08f90                 | _ff_cc_get_ldnumber_0448_ret
08f90     2D 00 64 FD | 	ret
08f94                 | 
08f94                 | _ff_cc_check_fs_0449
08f94     08 9C 05 F6 | 	mov	COUNT_, #8
08f98     D1 00 A0 FD | 	call	#pushregs_
08f9c     1F 49 02 F6 | 	mov	local01, arg01
08fa0     20 4B 02 F6 | 	mov	local02, arg02
08fa4     03 48 06 F1 | 	add	local01, #3
08fa8     24 01 48 FC | 	wrbyte	#0, local01
08fac     29 48 06 F1 | 	add	local01, #41
08fb0     FF FF FF FF 
08fb4     24 FF 6B FC | 	wrlong	##-1, local01
08fb8     2C 48 86 F1 | 	sub	local01, #44
08fbc     24 3F 02 F6 | 	mov	arg01, local01
08fc0     25 41 02 F6 | 	mov	arg02, local02
08fc4     54 E6 BF FD | 	call	#_ff_cc_move_window_0369
08fc8     00 16 0E F2 | 	cmp	result1, #0 wz
08fcc     04 16 06 56 |  if_ne	mov	result1, #4
08fd0     D8 00 90 5D |  if_ne	jmp	#LR__0601
08fd4     30 48 06 F1 | 	add	local01, #48
08fd8     24 3F 02 F6 | 	mov	arg01, local01
08fdc     FE 3F 06 F1 | 	add	arg01, #510
08fe0     30 48 86 F1 | 	sub	local01, #48
08fe4     18 E4 BF FD | 	call	#_ff_cc_ld_word_0349
08fe8     0B 4D 02 F6 | 	mov	local03, result1
08fec     0F 4C 46 F7 | 	zerox	local03, #15
08ff0     55 00 00 FF 
08ff4     55 4C 0E F2 | 	cmp	local03, ##43605 wz
08ff8     03 16 06 56 |  if_ne	mov	result1, #3
08ffc     AC 00 90 5D |  if_ne	jmp	#LR__0601
09000     30 48 06 F1 | 	add	local01, #48
09004     24 4F C2 FA | 	rdbyte	local04, local01
09008     30 48 86 F1 | 	sub	local01, #48
0900c     27 4D 02 F6 | 	mov	local03, local04
09010     07 4C 46 F7 | 	zerox	local03, #7
09014     E9 4C 0E F2 | 	cmp	local03, #233 wz
09018     38 00 90 AD |  if_e	jmp	#LR__0599
0901c     30 48 06 F1 | 	add	local01, #48
09020     24 51 C2 FA | 	rdbyte	local05, local01
09024     30 48 86 F1 | 	sub	local01, #48
09028     28 53 02 F6 | 	mov	local06, local05
0902c     07 52 46 F7 | 	zerox	local06, #7
09030     EB 52 0E F2 | 	cmp	local06, #235 wz
09034     1C 00 90 AD |  if_e	jmp	#LR__0599
09038     30 48 06 F1 | 	add	local01, #48
0903c     24 55 C2 FA | 	rdbyte	local07, local01
09040     30 48 86 F1 | 	sub	local01, #48
09044     2A 57 02 F6 | 	mov	local08, local07
09048     07 56 46 F7 | 	zerox	local08, #7
0904c     E8 56 0E F2 | 	cmp	local08, #232 wz
09050     54 00 90 5D |  if_ne	jmp	#LR__0600
09054                 | LR__0599
09054     30 48 06 F1 | 	add	local01, #48
09058     24 3F 02 F6 | 	mov	arg01, local01
0905c     30 48 86 F1 | 	sub	local01, #48
09060     36 3E 06 F1 | 	add	arg01, #54
09064     89 00 00 FF 
09068     FD 40 06 F6 | 	mov	arg02, ##@LR__1243
0906c     03 42 06 F6 | 	mov	arg03, #3
09070     70 E4 BF FD | 	call	#_ff_cc_mem_cmp_0362
09074     00 16 0E F2 | 	cmp	result1, #0 wz
09078     00 16 06 A6 |  if_e	mov	result1, #0
0907c     2C 00 90 AD |  if_e	jmp	#LR__0601
09080     30 48 06 F1 | 	add	local01, #48
09084     24 3F 02 F6 | 	mov	arg01, local01
09088     52 3E 06 F1 | 	add	arg01, #82
0908c     89 00 00 FF 
09090     01 41 06 F6 | 	mov	arg02, ##@LR__1244
09094     05 42 06 F6 | 	mov	arg03, #5
09098     48 E4 BF FD | 	call	#_ff_cc_mem_cmp_0362
0909c     00 16 0E F2 | 	cmp	result1, #0 wz
090a0     00 16 06 A6 |  if_e	mov	result1, #0
090a4     04 00 90 AD |  if_e	jmp	#LR__0601
090a8                 | LR__0600
090a8                 | ' 	}
090a8                 | ' 	return 2;
090a8     02 16 06 F6 | 	mov	result1, #2
090ac                 | LR__0601
090ac     D0 F0 03 F6 | 	mov	ptra, fp
090b0     E0 00 A0 FD | 	call	#popregs_
090b4                 | _ff_cc_check_fs_0449_ret
090b4     2D 00 64 FD | 	ret
090b8                 | 
090b8                 | _ff_cc_find_volume_0453
090b8     0D 9C 05 F6 | 	mov	COUNT_, #13
090bc     D1 00 A0 FD | 	call	#pushregs_
090c0     24 F0 07 F1 | 	add	ptra, #36
090c4     1F 49 02 F6 | 	mov	local01, arg01
090c8     20 4B 02 F6 | 	mov	local02, arg02
090cc     24 4D 02 F6 | 	mov	local03, local01
090d0     26 3F 02 F6 | 	mov	arg01, local03
090d4     00 40 06 F6 | 	mov	arg02, #0
090d8     B8 FE BF FD | 	call	#_ff_cc_check_fs_0449
090dc     0B 4F 02 F6 | 	mov	local04, result1
090e0     02 4E 0E F2 | 	cmp	local04, #2 wz
090e4     18 00 90 AD |  if_e	jmp	#LR__0603
090e8     03 4E 1E F2 | 	cmp	local04, #3 wcz
090ec     08 00 90 3D |  if_ae	jmp	#LR__0602
090f0     00 4A 0E F2 | 	cmp	local02, #0 wz
090f4     08 00 90 5D |  if_ne	jmp	#LR__0603
090f8                 | LR__0602
090f8     27 17 02 F6 | 	mov	result1, local04
090fc     F8 00 90 FD | 	jmp	#LR__0610
09100                 | LR__0603
09100                 | ' 	for (i = 0; i < 4; i++) {
09100     00 50 06 F6 | 	mov	local05, #0
09104                 | LR__0604
09104     04 50 1E F2 | 	cmp	local05, #4 wcz
09108     50 00 90 3D |  if_ae	jmp	#LR__0605
0910c     28 4D 02 F6 | 	mov	local03, local05
09110     02 4C 66 F0 | 	shl	local03, #2
09114     14 A0 05 F1 | 	add	fp, #20
09118     D0 4C 02 F1 | 	add	local03, fp
0911c     30 48 06 F1 | 	add	local01, #48
09120     24 53 02 F6 | 	mov	local06, local01
09124     BE 53 06 F1 | 	add	local06, #446
09128     28 55 02 F6 | 	mov	local07, local05
0912c     04 54 66 F0 | 	shl	local07, #4
09130     2A 57 02 F6 | 	mov	local08, local07
09134     2A 53 02 F1 | 	add	local06, local07
09138     08 52 06 F1 | 	add	local06, #8
0913c     29 3F 02 F6 | 	mov	arg01, local06
09140     14 A0 85 F1 | 	sub	fp, #20
09144     30 48 86 F1 | 	sub	local01, #48
09148     D8 E2 BF FD | 	call	#_ff_cc_ld_dword_0351
0914c     0B 59 02 F6 | 	mov	local09, result1
09150     26 59 62 FC | 	wrlong	local09, local03
09154     01 50 06 F1 | 	add	local05, #1
09158     A8 FF 9F FD | 	jmp	#LR__0604
0915c                 | LR__0605
0915c     00 4A 0E F2 | 	cmp	local02, #0 wz
09160     25 4D 02 56 |  if_ne	mov	local03, local02
09164     01 4C 86 51 |  if_ne	sub	local03, #1
09168     00 4C 06 A6 |  if_e	mov	local03, #0
0916c     26 51 02 F6 | 	mov	local05, local03
09170                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
09170                 | ' 	}
09170                 | ' 	i = part ? part - 1 : 0;
09170                 | ' 	do {
09170                 | LR__0606
09170     28 5B 02 F6 | 	mov	local10, local05
09174     02 5A 66 F0 | 	shl	local10, #2
09178     14 A0 05 F1 | 	add	fp, #20
0917c     D0 5C 02 F6 | 	mov	local11, fp
09180     D0 5A 02 F1 | 	add	local10, fp
09184     2D 5F 0A FB | 	rdlong	local12, local10 wz
09188     14 A0 85 F1 | 	sub	fp, #20
0918c     38 00 90 AD |  if_e	jmp	#LR__0607
09190     24 55 02 F6 | 	mov	local07, local01
09194     28 57 02 F6 | 	mov	local08, local05
09198     02 56 66 F0 | 	shl	local08, #2
0919c     14 A0 05 F1 | 	add	fp, #20
091a0     D0 52 02 F6 | 	mov	local06, fp
091a4     D0 56 02 F1 | 	add	local08, fp
091a8     2B 59 02 FB | 	rdlong	local09, local08
091ac     2A 3F 02 F6 | 	mov	arg01, local07
091b0     2C 41 02 F6 | 	mov	arg02, local09
091b4     14 A0 85 F1 | 	sub	fp, #20
091b8     D8 FD BF FD | 	call	#_ff_cc_check_fs_0449
091bc     0B 61 02 F6 | 	mov	local13, result1
091c0     30 4D 02 F6 | 	mov	local03, local13
091c4     04 00 90 FD | 	jmp	#LR__0608
091c8                 | LR__0607
091c8     03 4C 06 F6 | 	mov	local03, #3
091cc                 | LR__0608
091cc     26 4F 02 F6 | 	mov	local04, local03
091d0     00 4A 0E F2 | 	cmp	local02, #0 wz
091d4     1C 00 90 5D |  if_ne	jmp	#LR__0609
091d8     02 4E 1E F2 | 	cmp	local04, #2 wcz
091dc     14 00 90 CD |  if_b	jmp	#LR__0609
091e0     28 4D 02 F6 | 	mov	local03, local05
091e4     01 4C 06 F1 | 	add	local03, #1
091e8     26 51 02 F6 | 	mov	local05, local03
091ec     04 50 1E F2 | 	cmp	local05, #4 wcz
091f0     7C FF 9F CD |  if_b	jmp	#LR__0606
091f4                 | LR__0609
091f4                 | ' 	return fmt;
091f4     27 17 02 F6 | 	mov	result1, local04
091f8                 | LR__0610
091f8     D0 F0 03 F6 | 	mov	ptra, fp
091fc     E0 00 A0 FD | 	call	#popregs_
09200                 | _ff_cc_find_volume_0453_ret
09200     2D 00 64 FD | 	ret
09204                 | 
09204                 | _ff_cc_mount_volume_0465
09204     1B 9C 05 F6 | 	mov	COUNT_, #27
09208     D1 00 A0 FD | 	call	#pushregs_
0920c     1F 49 02 F6 | 	mov	local01, arg01
09210     20 4B 02 F6 | 	mov	local02, arg02
09214     21 4D 02 F6 | 	mov	local03, arg03
09218     25 01 68 FC | 	wrlong	#0, local02
0921c     24 3F 02 F6 | 	mov	arg01, local01
09220     C8 FC BF FD | 	call	#_ff_cc_get_ldnumber_0448
09224     0B 4F 02 F6 | 	mov	local04, result1
09228     00 4E 5E F2 | 	cmps	local04, #0 wcz
0922c     0B 16 06 C6 |  if_b	mov	result1, #11
09230     04 06 90 CD |  if_b	jmp	#LR__0626
09234     27 51 02 F6 | 	mov	local05, local04
09238     02 50 66 F0 | 	shl	local05, #2
0923c     07 51 02 F1 | 	add	local05, ptr__ff_cc_dat__
09240     28 53 0A FB | 	rdlong	local06, local05 wz
09244     0C 16 06 A6 |  if_e	mov	result1, #12
09248     EC 05 90 AD |  if_e	jmp	#LR__0626
0924c     25 53 62 FC | 	wrlong	local06, local02
09250     07 4C 46 F7 | 	zerox	local03, #7
09254     FE 4C 06 F5 | 	and	local03, #254
09258     29 51 CA FA | 	rdbyte	local05, local06 wz
0925c     4C 00 90 AD |  if_e	jmp	#LR__0613
09260     01 52 06 F1 | 	add	local06, #1
09264     29 3F CA FA | 	rdbyte	arg01, local06 wz
09268     01 52 86 F1 | 	sub	local06, #1
0926c     01 16 06 56 |  if_ne	mov	result1, #1
09270                 | ' 
09270                 | ' 	return Stat;
09270     7C 0F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
09274     07 17 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
09278     7C 0F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0927c     0B 51 02 F6 | 	mov	local05, result1
09280     07 50 46 F7 | 	zerox	local05, #7
09284     01 50 CE F7 | 	test	local05, #1 wz
09288     20 00 90 5D |  if_ne	jmp	#LR__0612
0928c     00 4C 0E F2 | 	cmp	local03, #0 wz
09290     10 00 90 AD |  if_e	jmp	#LR__0611
09294     07 16 46 F7 | 	zerox	result1, #7
09298     04 16 0E F5 | 	and	result1, #4 wz
0929c                 | ' 				return FR_WRITE_PROTECTED;
0929c     0A 16 06 56 |  if_ne	mov	result1, #10
092a0     94 05 90 5D |  if_ne	jmp	#LR__0626
092a4                 | LR__0611
092a4                 | ' 			}
092a4                 | ' 			return FR_OK;
092a4     00 16 06 F6 | 	mov	result1, #0
092a8     8C 05 90 FD | 	jmp	#LR__0626
092ac                 | LR__0612
092ac                 | LR__0613
092ac     29 01 48 FC | 	wrbyte	#0, local06
092b0     01 52 06 F1 | 	add	local06, #1
092b4     29 4F 42 FC | 	wrbyte	local04, local06
092b8     29 3F C2 FA | 	rdbyte	arg01, local06
092bc     01 52 86 F1 | 	sub	local06, #1
092c0     10 D9 BF FD | 	call	#_ff_cc_disk_initialize
092c4     0B 55 02 F6 | 	mov	local07, result1
092c8     2A 51 02 F6 | 	mov	local05, local07
092cc     07 50 46 F7 | 	zerox	local05, #7
092d0     01 50 CE F7 | 	test	local05, #1 wz
092d4                 | ' 		return FR_NOT_READY;
092d4     03 16 06 56 |  if_ne	mov	result1, #3
092d8     5C 05 90 5D |  if_ne	jmp	#LR__0626
092dc     00 4C 0E F2 | 	cmp	local03, #0 wz
092e0     14 00 90 AD |  if_e	jmp	#LR__0614
092e4     2A 51 02 F6 | 	mov	local05, local07
092e8     07 50 46 F7 | 	zerox	local05, #7
092ec     04 50 CE F7 | 	test	local05, #4 wz
092f0                 | ' 		return FR_WRITE_PROTECTED;
092f0     0A 16 06 56 |  if_ne	mov	result1, #10
092f4     40 05 90 5D |  if_ne	jmp	#LR__0626
092f8                 | LR__0614
092f8     29 3F 02 F6 | 	mov	arg01, local06
092fc     00 40 06 F6 | 	mov	arg02, #0
09300     B4 FD BF FD | 	call	#_ff_cc_find_volume_0453
09304     0B 57 02 F6 | 	mov	local08, result1
09308     04 56 0E F2 | 	cmp	local08, #4 wz
0930c     01 16 06 A6 |  if_e	mov	result1, #1
09310     24 05 90 AD |  if_e	jmp	#LR__0626
09314     02 56 1E F2 | 	cmp	local08, #2 wcz
09318     0D 16 06 36 |  if_ae	mov	result1, #13
0931c     18 05 90 3D |  if_ae	jmp	#LR__0626
09320     2C 52 06 F1 | 	add	local06, #44
09324     29 59 02 FB | 	rdlong	local09, local06
09328     04 52 06 F1 | 	add	local06, #4
0932c     29 3F 02 F6 | 	mov	arg01, local06
09330     30 52 86 F1 | 	sub	local06, #48
09334     0B 3E 06 F1 | 	add	arg01, #11
09338     C4 E0 BF FD | 	call	#_ff_cc_ld_word_0349
0933c     0B 51 02 F6 | 	mov	local05, result1
09340     0F 50 46 F7 | 	zerox	local05, #15
09344     01 00 00 FF 
09348     00 50 0E F2 | 	cmp	local05, ##512 wz
0934c     0D 16 06 56 |  if_ne	mov	result1, #13
09350     E4 04 90 5D |  if_ne	jmp	#LR__0626
09354     30 52 06 F1 | 	add	local06, #48
09358     29 3F 02 F6 | 	mov	arg01, local06
0935c     30 52 86 F1 | 	sub	local06, #48
09360     16 3E 06 F1 | 	add	arg01, #22
09364     98 E0 BF FD | 	call	#_ff_cc_ld_word_0349
09368     0B 5B 02 F6 | 	mov	local10, result1
0936c     0F 5A 4E F7 | 	zerox	local10, #15 wz
09370     18 00 90 5D |  if_ne	jmp	#LR__0615
09374     30 52 06 F1 | 	add	local06, #48
09378     29 3F 02 F6 | 	mov	arg01, local06
0937c     30 52 86 F1 | 	sub	local06, #48
09380     24 3E 06 F1 | 	add	arg01, #36
09384     9C E0 BF FD | 	call	#_ff_cc_ld_dword_0351
09388     0B 5B 02 F6 | 	mov	local10, result1
0938c                 | LR__0615
0938c     18 52 06 F1 | 	add	local06, #24
09390     29 5B 62 FC | 	wrlong	local10, local06
09394     28 52 06 F1 | 	add	local06, #40
09398     29 51 C2 FA | 	rdbyte	local05, local06
0939c     3E 52 86 F1 | 	sub	local06, #62
093a0     29 51 42 FC | 	wrbyte	local05, local06
093a4     29 51 C2 FA | 	rdbyte	local05, local06
093a8     02 52 86 F1 | 	sub	local06, #2
093ac     07 50 46 F7 | 	zerox	local05, #7
093b0     01 50 0E F2 | 	cmp	local05, #1 wz
093b4     1C 00 90 AD |  if_e	jmp	#LR__0616
093b8     02 52 06 F1 | 	add	local06, #2
093bc     29 5D C2 FA | 	rdbyte	local11, local06
093c0     02 52 86 F1 | 	sub	local06, #2
093c4     07 5C 46 F7 | 	zerox	local11, #7
093c8     02 5C 0E F2 | 	cmp	local11, #2 wz
093cc     0D 16 06 56 |  if_ne	mov	result1, #13
093d0     64 04 90 5D |  if_ne	jmp	#LR__0626
093d4                 | LR__0616
093d4     02 52 06 F1 | 	add	local06, #2
093d8     29 51 C2 FA | 	rdbyte	local05, local06
093dc     28 5B 02 FD | 	qmul	local10, local05
093e0     18 5A 62 FD | 	getqx	local10
093e4     3B 52 06 F1 | 	add	local06, #59
093e8     29 51 C2 FA | 	rdbyte	local05, local06
093ec     33 52 86 F1 | 	sub	local06, #51
093f0     29 51 52 FC | 	wrword	local05, local06
093f4     29 51 E2 FA | 	rdword	local05, local06
093f8     0A 52 86 F1 | 	sub	local06, #10
093fc     0F 50 4E F7 | 	zerox	local05, #15 wz
09400     20 00 90 AD |  if_e	jmp	#LR__0617
09404     0A 52 06 F1 | 	add	local06, #10
09408     29 5D E2 FA | 	rdword	local11, local06
0940c     29 5F E2 FA | 	rdword	local12, local06
09410     0A 52 86 F1 | 	sub	local06, #10
09414     0F 5E 46 F7 | 	zerox	local12, #15
09418     01 5E 86 F1 | 	sub	local12, #1
0941c     2F 5D CA F7 | 	test	local11, local12 wz
09420     08 00 90 AD |  if_e	jmp	#LR__0618
09424                 | LR__0617
09424     0D 16 06 F6 | 	mov	result1, #13
09428     0C 04 90 FD | 	jmp	#LR__0626
0942c                 | LR__0618
0942c     30 52 06 F1 | 	add	local06, #48
09430     29 3F 02 F6 | 	mov	arg01, local06
09434     30 52 86 F1 | 	sub	local06, #48
09438     11 3E 06 F1 | 	add	arg01, #17
0943c     C0 DF BF FD | 	call	#_ff_cc_ld_word_0349
09440     08 52 06 F1 | 	add	local06, #8
09444     29 17 52 FC | 	wrword	result1, local06
09448     29 51 E2 FA | 	rdword	local05, local06
0944c     08 52 86 F1 | 	sub	local06, #8
09450     0F 50 46 F7 | 	zerox	local05, #15
09454     28 5D 52 F6 | 	abs	local11, local05 wc
09458     0F 5C 06 F5 | 	and	local11, #15
0945c     2E 5D 62 C6 |  if_b	neg	local11, local11
09460     00 5C 0E F2 | 	cmp	local11, #0 wz
09464     0D 16 06 56 |  if_ne	mov	result1, #13
09468     CC 03 90 5D |  if_ne	jmp	#LR__0626
0946c     30 52 06 F1 | 	add	local06, #48
09470     29 3F 02 F6 | 	mov	arg01, local06
09474     30 52 86 F1 | 	sub	local06, #48
09478     13 3E 06 F1 | 	add	arg01, #19
0947c     80 DF BF FD | 	call	#_ff_cc_ld_word_0349
09480     0B 61 02 F6 | 	mov	local13, result1
09484     0F 60 4E F7 | 	zerox	local13, #15 wz
09488     18 00 90 5D |  if_ne	jmp	#LR__0619
0948c     30 52 06 F1 | 	add	local06, #48
09490     29 3F 02 F6 | 	mov	arg01, local06
09494     30 52 86 F1 | 	sub	local06, #48
09498     20 3E 06 F1 | 	add	arg01, #32
0949c     84 DF BF FD | 	call	#_ff_cc_ld_dword_0351
094a0     0B 61 02 F6 | 	mov	local13, result1
094a4                 | LR__0619
094a4     30 52 06 F1 | 	add	local06, #48
094a8     29 3F 02 F6 | 	mov	arg01, local06
094ac     30 52 86 F1 | 	sub	local06, #48
094b0     0E 3E 06 F1 | 	add	arg01, #14
094b4     48 DF BF FD | 	call	#_ff_cc_ld_word_0349
094b8     0B 63 02 F6 | 	mov	local14, result1
094bc     31 51 02 F6 | 	mov	local05, local14
094c0     0F 50 4E F7 | 	zerox	local05, #15 wz
094c4     0D 16 06 A6 |  if_e	mov	result1, #13
094c8     6C 03 90 AD |  if_e	jmp	#LR__0626
094cc     31 65 02 F6 | 	mov	local15, local14
094d0     0F 64 46 F7 | 	zerox	local15, #15
094d4     2D 65 02 F1 | 	add	local15, local10
094d8     08 52 06 F1 | 	add	local06, #8
094dc     29 67 E2 FA | 	rdword	local16, local06
094e0     08 52 86 F1 | 	sub	local06, #8
094e4     0F 66 46 F7 | 	zerox	local16, #15
094e8     33 69 52 F6 | 	abs	local17, local16 wc
094ec     04 68 46 F0 | 	shr	local17, #4
094f0     34 69 62 C6 |  if_b	neg	local17, local17
094f4     34 65 02 F1 | 	add	local15, local17
094f8     32 61 1A F2 | 	cmp	local13, local15 wcz
094fc     0D 16 06 C6 |  if_b	mov	result1, #13
09500     34 03 90 CD |  if_b	jmp	#LR__0626
09504     30 9D 02 F6 | 	mov	muldiva_, local13
09508     32 9D 82 F1 | 	sub	muldiva_, local15
0950c     0A 52 06 F1 | 	add	local06, #10
09510     29 9F E2 FA | 	rdword	muldivb_, local06
09514     0A 52 86 F1 | 	sub	local06, #10
09518     0F 9E 46 F7 | 	zerox	muldivb_, #15
0951c     ED 00 A0 FD | 	call	#unsdivide_
09520     4F 6B 0A F6 | 	mov	local18, muldivb_ wz
09524     0D 16 06 A6 |  if_e	mov	result1, #13
09528     0C 03 90 AD |  if_e	jmp	#LR__0626
0952c     00 56 06 F6 | 	mov	local08, #0
09530     FF FF 07 FF 
09534     F5 6B 1E F2 | 	cmp	local18, ##268435445 wcz
09538     03 56 06 E6 |  if_be	mov	local08, #3
0953c     7F 00 00 FF 
09540     F5 6B 1E F2 | 	cmp	local18, ##65525 wcz
09544     02 56 06 E6 |  if_be	mov	local08, #2
09548     07 00 00 FF 
0954c     F5 6B 1E F2 | 	cmp	local18, ##4085 wcz
09550     01 56 06 E6 |  if_be	mov	local08, #1
09554     00 56 0E F2 | 	cmp	local08, #0 wz
09558     0D 16 06 A6 |  if_e	mov	result1, #13
0955c     D8 02 90 AD |  if_e	jmp	#LR__0626
09560     35 51 02 F6 | 	mov	local05, local18
09564     02 50 06 F1 | 	add	local05, #2
09568     14 52 06 F1 | 	add	local06, #20
0956c     29 51 62 FC | 	wrlong	local05, local06
09570     08 52 06 F1 | 	add	local06, #8
09574     29 59 62 FC | 	wrlong	local09, local06
09578     2C 51 02 F6 | 	mov	local05, local09
0957c     31 67 02 F6 | 	mov	local16, local14
09580     0F 66 46 F7 | 	zerox	local16, #15
09584     33 51 02 F1 | 	add	local05, local16
09588     04 52 06 F1 | 	add	local06, #4
0958c     29 51 62 FC | 	wrlong	local05, local06
09590     2C 51 02 F6 | 	mov	local05, local09
09594     32 51 02 F1 | 	add	local05, local15
09598     08 52 06 F1 | 	add	local06, #8
0959c     29 51 62 FC | 	wrlong	local05, local06
095a0     28 52 86 F1 | 	sub	local06, #40
095a4     03 56 0E F2 | 	cmp	local08, #3 wz
095a8     6C 00 90 5D |  if_ne	jmp	#LR__0620
095ac     30 52 06 F1 | 	add	local06, #48
095b0     29 3F 02 F6 | 	mov	arg01, local06
095b4     30 52 86 F1 | 	sub	local06, #48
095b8     2A 3E 06 F1 | 	add	arg01, #42
095bc     40 DE BF FD | 	call	#_ff_cc_ld_word_0349
095c0     0B 51 02 F6 | 	mov	local05, result1
095c4     0F 50 4E F7 | 	zerox	local05, #15 wz
095c8     0D 16 06 56 |  if_ne	mov	result1, #13
095cc     68 02 90 5D |  if_ne	jmp	#LR__0626
095d0     08 52 06 F1 | 	add	local06, #8
095d4     29 51 E2 FA | 	rdword	local05, local06
095d8     08 52 86 F1 | 	sub	local06, #8
095dc     0F 50 4E F7 | 	zerox	local05, #15 wz
095e0     0D 16 06 56 |  if_ne	mov	result1, #13
095e4     50 02 90 5D |  if_ne	jmp	#LR__0626
095e8     30 52 06 F1 | 	add	local06, #48
095ec     29 3F 02 F6 | 	mov	arg01, local06
095f0     30 52 86 F1 | 	sub	local06, #48
095f4     2C 3E 06 F1 | 	add	arg01, #44
095f8     28 DE BF FD | 	call	#_ff_cc_ld_dword_0351
095fc     24 52 06 F1 | 	add	local06, #36
09600     29 17 62 FC | 	wrlong	result1, local06
09604     10 52 86 F1 | 	sub	local06, #16
09608     29 6D 02 FB | 	rdlong	local19, local06
0960c     14 52 86 F1 | 	sub	local06, #20
09610     02 6C 66 F0 | 	shl	local19, #2
09614     74 00 90 FD | 	jmp	#LR__0623
09618                 | LR__0620
09618     08 52 06 F1 | 	add	local06, #8
0961c     29 51 E2 FA | 	rdword	local05, local06
09620     08 52 86 F1 | 	sub	local06, #8
09624     0F 50 4E F7 | 	zerox	local05, #15 wz
09628     0D 16 06 A6 |  if_e	mov	result1, #13
0962c     08 02 90 AD |  if_e	jmp	#LR__0626
09630     20 52 06 F1 | 	add	local06, #32
09634     29 51 02 FB | 	rdlong	local05, local06
09638     2D 51 02 F1 | 	add	local05, local10
0963c     04 52 06 F1 | 	add	local06, #4
09640     29 51 62 FC | 	wrlong	local05, local06
09644     24 52 86 F1 | 	sub	local06, #36
09648     02 56 0E F2 | 	cmp	local08, #2 wz
0964c     14 00 90 5D |  if_ne	jmp	#LR__0621
09650     14 52 06 F1 | 	add	local06, #20
09654     29 51 02 FB | 	rdlong	local05, local06
09658     14 52 86 F1 | 	sub	local06, #20
0965c     01 50 66 F0 | 	shl	local05, #1
09660     24 00 90 FD | 	jmp	#LR__0622
09664                 | LR__0621
09664     14 52 06 F1 | 	add	local06, #20
09668     29 6F 02 FB | 	rdlong	local20, local06
0966c     37 51 02 F6 | 	mov	local05, local20
09670     01 50 66 F0 | 	shl	local05, #1
09674     37 51 02 F1 | 	add	local05, local20
09678     01 50 46 F0 | 	shr	local05, #1
0967c     14 52 86 F1 | 	sub	local06, #20
09680     01 6E CE F7 | 	test	local20, #1 wz
09684     01 50 06 51 |  if_ne	add	local05, #1
09688                 | LR__0622
09688     28 6D 02 F6 | 	mov	local19, local05
0968c                 | LR__0623
0968c     36 67 02 F6 | 	mov	local16, local19
09690     FF 67 06 F1 | 	add	local16, #511
09694     09 66 46 F0 | 	shr	local16, #9
09698     18 52 06 F1 | 	add	local06, #24
0969c     29 5D 02 FB | 	rdlong	local11, local06
096a0     18 52 86 F1 | 	sub	local06, #24
096a4     33 5D 1A F2 | 	cmp	local11, local16 wcz
096a8     0D 16 06 C6 |  if_b	mov	result1, #13
096ac     88 01 90 CD |  if_b	jmp	#LR__0626
096b0     10 52 06 F1 | 	add	local06, #16
096b4     FF FF FF FF 
096b8     29 FF 6B FC | 	wrlong	##-1, local06
096bc     04 52 86 F1 | 	sub	local06, #4
096c0     FF FF FF FF 
096c4     29 FF 6B FC | 	wrlong	##-1, local06
096c8     08 52 86 F1 | 	sub	local06, #8
096cc     29 01 49 FC | 	wrbyte	#128, local06
096d0     04 52 86 F1 | 	sub	local06, #4
096d4     03 56 0E F2 | 	cmp	local08, #3 wz
096d8     34 01 90 5D |  if_ne	jmp	#LR__0625
096dc     30 52 06 F1 | 	add	local06, #48
096e0     29 3F 02 F6 | 	mov	arg01, local06
096e4     30 52 86 F1 | 	sub	local06, #48
096e8     30 3E 06 F1 | 	add	arg01, #48
096ec     10 DD BF FD | 	call	#_ff_cc_ld_word_0349
096f0     0B 51 02 F6 | 	mov	local05, result1
096f4     0F 50 46 F7 | 	zerox	local05, #15
096f8     01 50 0E F2 | 	cmp	local05, #1 wz
096fc     10 01 90 5D |  if_ne	jmp	#LR__0625
09700     29 71 02 F6 | 	mov	local21, local06
09704     2C 73 02 F6 | 	mov	local22, local09
09708     01 72 06 F1 | 	add	local22, #1
0970c     39 75 02 F6 | 	mov	local23, local22
09710     38 3F 02 F6 | 	mov	arg01, local21
09714     3A 41 02 F6 | 	mov	arg02, local23
09718     00 DF BF FD | 	call	#_ff_cc_move_window_0369
0971c     0B 77 0A F6 | 	mov	local24, result1 wz
09720     EC 00 90 5D |  if_ne	jmp	#LR__0625
09724     04 52 06 F1 | 	add	local06, #4
09728     29 01 48 FC | 	wrbyte	#0, local06
0972c     2C 52 06 F1 | 	add	local06, #44
09730     29 5D 02 F6 | 	mov	local11, local06
09734     2E 67 02 F6 | 	mov	local16, local11
09738     FE 67 06 F1 | 	add	local16, #510
0973c     33 69 02 F6 | 	mov	local17, local16
09740     34 3F 02 F6 | 	mov	arg01, local17
09744     30 52 86 F1 | 	sub	local06, #48
09748     B4 DC BF FD | 	call	#_ff_cc_ld_word_0349
0974c     0B 5F 02 F6 | 	mov	local12, result1
09750     2F 51 02 F6 | 	mov	local05, local12
09754     0F 50 46 F7 | 	zerox	local05, #15
09758     55 00 00 FF 
0975c     55 50 0E F2 | 	cmp	local05, ##43605 wz
09760     AC 00 90 5D |  if_ne	jmp	#LR__0624
09764     30 52 06 F1 | 	add	local06, #48
09768     29 73 02 F6 | 	mov	local22, local06
0976c     39 71 02 F6 | 	mov	local21, local22
09770     38 75 02 F6 | 	mov	local23, local21
09774     3A 3F 02 F6 | 	mov	arg01, local23
09778     30 52 86 F1 | 	sub	local06, #48
0977c     A4 DC BF FD | 	call	#_ff_cc_ld_dword_0351
09780     0B 77 02 F6 | 	mov	local24, result1
09784     A9 B0 20 FF 
09788     52 76 0E F2 | 	cmp	local24, ##1096897106 wz
0978c     80 00 90 5D |  if_ne	jmp	#LR__0624
09790     30 52 06 F1 | 	add	local06, #48
09794     29 79 02 F6 | 	mov	local25, local06
09798     3C 6F 02 F6 | 	mov	local20, local25
0979c     E4 6F 06 F1 | 	add	local20, #484
097a0     37 7B 02 F6 | 	mov	local26, local20
097a4     3D 3F 02 F6 | 	mov	arg01, local26
097a8     30 52 86 F1 | 	sub	local06, #48
097ac     74 DC BF FD | 	call	#_ff_cc_ld_dword_0351
097b0     0B 7D 02 F6 | 	mov	local27, result1
097b4     B9 A0 30 FF 
097b8     72 7C 0E F2 | 	cmp	local27, ##1631679090 wz
097bc     50 00 90 5D |  if_ne	jmp	#LR__0624
097c0     30 52 06 F1 | 	add	local06, #48
097c4     29 3F 02 F6 | 	mov	arg01, local06
097c8     30 52 86 F1 | 	sub	local06, #48
097cc     E8 3F 06 F1 | 	add	arg01, #488
097d0     50 DC BF FD | 	call	#_ff_cc_ld_dword_0351
097d4     0B 69 02 F6 | 	mov	local17, result1
097d8     10 52 06 F1 | 	add	local06, #16
097dc     29 69 62 FC | 	wrlong	local17, local06
097e0     20 52 06 F1 | 	add	local06, #32
097e4     29 67 02 F6 | 	mov	local16, local06
097e8     33 51 02 F6 | 	mov	local05, local16
097ec     EC 51 06 F1 | 	add	local05, #492
097f0     28 5D 02 F6 | 	mov	local11, local05
097f4     2E 3F 02 F6 | 	mov	arg01, local11
097f8     30 52 86 F1 | 	sub	local06, #48
097fc     24 DC BF FD | 	call	#_ff_cc_ld_dword_0351
09800     0B 69 02 F6 | 	mov	local17, result1
09804     0C 52 06 F1 | 	add	local06, #12
09808     29 69 62 FC | 	wrlong	local17, local06
0980c     0C 52 86 F1 | 	sub	local06, #12
09810                 | LR__0624
09810                 | LR__0625
09810     29 57 42 FC | 	wrbyte	local08, local06
09814     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
09818     07 51 E2 FA | 	rdword	local05, ptr__ff_cc_dat__
0981c     01 50 06 F1 | 	add	local05, #1
09820     07 51 52 FC | 	wrword	local05, ptr__ff_cc_dat__
09824     07 5D E2 FA | 	rdword	local11, ptr__ff_cc_dat__
09828     04 0E 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0982c     06 52 06 F1 | 	add	local06, #6
09830     29 5D 52 FC | 	wrword	local11, local06
09834                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
09834                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
09834                 | ' 			{
09834                 | ' 
09834                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
09834                 | ' 
09834                 | ' 
09834                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
09834                 | ' 
09834                 | ' 			}
09834                 | ' 		}
09834                 | ' 
09834                 | ' 
09834                 | ' 	}
09834                 | ' 
09834                 | ' 	fs->fs_type = (BYTE)fmt;
09834                 | ' 	fs->id = ++Fsid;
09834                 | ' #line 3589 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09834                 | ' 	return FR_OK;
09834     00 16 06 F6 | 	mov	result1, #0
09838                 | LR__0626
09838     D0 F0 03 F6 | 	mov	ptra, fp
0983c     E0 00 A0 FD | 	call	#popregs_
09840                 | _ff_cc_mount_volume_0465_ret
09840     2D 00 64 FD | 	ret
09844                 | 
09844                 | _ff_cc_validate_0467
09844     0B 9C 05 F6 | 	mov	COUNT_, #11
09848     D1 00 A0 FD | 	call	#pushregs_
0984c     1F 49 0A F6 | 	mov	local01, arg01 wz
09850     20 4B 02 F6 | 	mov	local02, arg02
09854     09 4C 06 F6 | 	mov	local03, #9
09858     80 00 90 AD |  if_e	jmp	#LR__0627
0985c     24 4F 0A FB | 	rdlong	local04, local01 wz
09860     78 00 90 AD |  if_e	jmp	#LR__0627
09864     24 51 02 FB | 	rdlong	local05, local01
09868     28 53 CA FA | 	rdbyte	local06, local05 wz
0986c     6C 00 90 AD |  if_e	jmp	#LR__0627
09870     04 48 06 F1 | 	add	local01, #4
09874     24 55 E2 FA | 	rdword	local07, local01
09878     04 48 86 F1 | 	sub	local01, #4
0987c     0F 54 46 F7 | 	zerox	local07, #15
09880     24 57 02 FB | 	rdlong	local08, local01
09884     06 56 06 F1 | 	add	local08, #6
09888     2B 59 E2 FA | 	rdword	local09, local08
0988c     06 56 86 F1 | 	sub	local08, #6
09890     2C 5B 02 F6 | 	mov	local10, local09
09894     0F 5A 46 F7 | 	zerox	local10, #15
09898     2D 55 0A F2 | 	cmp	local07, local10 wz
0989c     3C 00 90 5D |  if_ne	jmp	#LR__0627
098a0     24 51 02 FB | 	rdlong	local05, local01
098a4     01 50 06 F1 | 	add	local05, #1
098a8     28 55 C2 FA | 	rdbyte	local07, local05
098ac     01 50 86 F1 | 	sub	local05, #1
098b0     2A 53 02 F6 | 	mov	local06, local07
098b4     29 3F 0A F6 | 	mov	arg01, local06 wz
098b8     01 16 06 56 |  if_ne	mov	result1, #1
098bc                 | ' 
098bc                 | ' 	return Stat;
098bc     7C 0F 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
098c0     07 17 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
098c4     7C 0F 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
098c8     0B 5D 02 F6 | 	mov	local11, result1
098cc     2E 4F 02 F6 | 	mov	local04, local11
098d0     07 4E 46 F7 | 	zerox	local04, #7
098d4     01 4E 0E F5 | 	and	local04, #1 wz
098d8     00 4C 06 A6 |  if_e	mov	local03, #0
098dc                 | LR__0627
098dc     00 4C 0E F2 | 	cmp	local03, #0 wz
098e0     24 4F 02 AB |  if_e	rdlong	local04, local01
098e4     00 4E 06 56 |  if_ne	mov	local04, #0
098e8     25 4F 62 FC | 	wrlong	local04, local02
098ec                 | ' 			res = FR_OK;
098ec                 | ' 		}
098ec                 | ' 
098ec                 | ' 	}
098ec                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
098ec                 | ' 	return res;
098ec     26 17 02 F6 | 	mov	result1, local03
098f0     D0 F0 03 F6 | 	mov	ptra, fp
098f4     E0 00 A0 FD | 	call	#popregs_
098f8                 | _ff_cc_validate_0467_ret
098f8     2D 00 64 FD | 	ret
098fc                 | 
098fc                 | _ff_cc_f_mount
098fc     02 9C 05 F6 | 	mov	COUNT_, #2
09900     D1 00 A0 FD | 	call	#pushregs_
09904     20 F0 07 F1 | 	add	ptra, #32
09908     04 A0 05 F1 | 	add	fp, #4
0990c     D0 3E 62 FC | 	wrlong	arg01, fp
09910     04 A0 05 F1 | 	add	fp, #4
09914     D0 40 62 FC | 	wrlong	arg02, fp
09918     04 A0 05 F1 | 	add	fp, #4
0991c     D0 42 42 FC | 	wrbyte	arg03, fp
09920     04 A0 85 F1 | 	sub	fp, #4
09924     D0 48 02 FB | 	rdlong	local01, fp
09928     14 A0 05 F1 | 	add	fp, #20
0992c     D0 48 62 FC | 	wrlong	local01, fp
09930     D0 3E 02 F6 | 	mov	arg01, fp
09934     1C A0 85 F1 | 	sub	fp, #28
09938     B0 F5 BF FD | 	call	#_ff_cc_get_ldnumber_0448
0993c     14 A0 05 F1 | 	add	fp, #20
09940     D0 16 62 FC | 	wrlong	result1, fp
09944     0B 49 02 F6 | 	mov	local01, result1
09948     14 A0 85 F1 | 	sub	fp, #20
0994c     00 48 5E F2 | 	cmps	local01, #0 wcz
09950     0B 16 06 C6 |  if_b	mov	result1, #11
09954     B4 00 90 CD |  if_b	jmp	#LR__0630
09958     14 A0 05 F1 | 	add	fp, #20
0995c     D0 48 02 FB | 	rdlong	local01, fp
09960     02 48 66 F0 | 	shl	local01, #2
09964     07 49 02 F1 | 	add	local01, ptr__ff_cc_dat__
09968     24 4B 02 FB | 	rdlong	local02, local01
0996c     04 A0 85 F1 | 	sub	fp, #4
09970     D0 4A 62 FC | 	wrlong	local02, fp
09974     D0 48 0A FB | 	rdlong	local01, fp wz
09978     10 A0 85 F1 | 	sub	fp, #16
0997c     10 00 90 AD |  if_e	jmp	#LR__0628
09980     10 A0 05 F1 | 	add	fp, #16
09984     D0 48 02 FB | 	rdlong	local01, fp
09988     10 A0 85 F1 | 	sub	fp, #16
0998c     24 01 48 FC | 	wrbyte	#0, local01
09990                 | LR__0628
09990     04 A0 05 F1 | 	add	fp, #4
09994     D0 48 0A FB | 	rdlong	local01, fp wz
09998     04 A0 85 F1 | 	sub	fp, #4
0999c     10 00 90 AD |  if_e	jmp	#LR__0629
099a0     04 A0 05 F1 | 	add	fp, #4
099a4     D0 48 02 FB | 	rdlong	local01, fp
099a8     04 A0 85 F1 | 	sub	fp, #4
099ac     24 01 48 FC | 	wrbyte	#0, local01
099b0                 | LR__0629
099b0     14 A0 05 F1 | 	add	fp, #20
099b4     D0 48 02 FB | 	rdlong	local01, fp
099b8     02 48 66 F0 | 	shl	local01, #2
099bc     07 49 02 F1 | 	add	local01, ptr__ff_cc_dat__
099c0     10 A0 85 F1 | 	sub	fp, #16
099c4     D0 4A 02 FB | 	rdlong	local02, fp
099c8     24 4B 62 FC | 	wrlong	local02, local01
099cc     08 A0 05 F1 | 	add	fp, #8
099d0     D0 48 C2 FA | 	rdbyte	local01, fp
099d4     0C A0 85 F1 | 	sub	fp, #12
099d8     07 48 4E F7 | 	zerox	local01, #7 wz
099dc     00 16 06 A6 |  if_e	mov	result1, #0
099e0     28 00 90 AD |  if_e	jmp	#LR__0630
099e4     08 A0 05 F1 | 	add	fp, #8
099e8     D0 3E 02 F6 | 	mov	arg01, fp
099ec     04 A0 85 F1 | 	sub	fp, #4
099f0     D0 40 02 F6 | 	mov	arg02, fp
099f4     04 A0 85 F1 | 	sub	fp, #4
099f8     00 42 06 F6 | 	mov	arg03, #0
099fc     04 F8 BF FD | 	call	#_ff_cc_mount_volume_0465
09a00     18 A0 05 F1 | 	add	fp, #24
09a04     D0 16 62 FC | 	wrlong	result1, fp
09a08                 | ' 
09a08                 | ' 	res = mount_volume(&path, &fs, 0);
09a08                 | ' 	return res ;
09a08     18 A0 85 F1 | 	sub	fp, #24
09a0c                 | LR__0630
09a0c     D0 F0 03 F6 | 	mov	ptra, fp
09a10     E0 00 A0 FD | 	call	#popregs_
09a14                 | _ff_cc_f_mount_ret
09a14     2D 00 64 FD | 	ret
09a18                 | 
09a18                 | _ff_cc_f_open
09a18     10 9C 05 F6 | 	mov	COUNT_, #16
09a1c     D1 00 A0 FD | 	call	#pushregs_
09a20     58 F0 07 F1 | 	add	ptra, #88
09a24     04 A0 05 F1 | 	add	fp, #4
09a28     D0 3E 62 FC | 	wrlong	arg01, fp
09a2c     04 A0 05 F1 | 	add	fp, #4
09a30     D0 40 62 FC | 	wrlong	arg02, fp
09a34     04 A0 05 F1 | 	add	fp, #4
09a38     D0 42 42 FC | 	wrbyte	arg03, fp
09a3c     08 A0 85 F1 | 	sub	fp, #8
09a40     D0 48 0A FB | 	rdlong	local01, fp wz
09a44     04 A0 85 F1 | 	sub	fp, #4
09a48     09 16 06 A6 |  if_e	mov	result1, #9
09a4c     FC 06 90 AD |  if_e	jmp	#LR__0654
09a50     0C A0 05 F1 | 	add	fp, #12
09a54     D0 48 C2 FA | 	rdbyte	local01, fp
09a58     3F 48 06 F5 | 	and	local01, #63
09a5c     D0 48 42 FC | 	wrbyte	local01, fp
09a60     04 A0 85 F1 | 	sub	fp, #4
09a64     D0 3E 02 F6 | 	mov	arg01, fp
09a68     38 A0 05 F1 | 	add	fp, #56
09a6c     D0 40 02 F6 | 	mov	arg02, fp
09a70     34 A0 85 F1 | 	sub	fp, #52
09a74     D0 4A C2 FA | 	rdbyte	local02, fp
09a78     0C A0 85 F1 | 	sub	fp, #12
09a7c     25 43 02 F6 | 	mov	arg03, local02
09a80     80 F7 BF FD | 	call	#_ff_cc_mount_volume_0465
09a84     0B 4D 02 F6 | 	mov	local03, result1
09a88     10 A0 05 F1 | 	add	fp, #16
09a8c     D0 4C 62 FC | 	wrlong	local03, fp
09a90     D0 48 0A FB | 	rdlong	local01, fp wz
09a94     10 A0 85 F1 | 	sub	fp, #16
09a98     84 06 90 5D |  if_ne	jmp	#LR__0652
09a9c     40 A0 05 F1 | 	add	fp, #64
09aa0     D0 48 02 FB | 	rdlong	local01, fp
09aa4     2C A0 85 F1 | 	sub	fp, #44
09aa8     D0 48 62 FC | 	wrlong	local01, fp
09aac     D0 3E 02 F6 | 	mov	arg01, fp
09ab0     0C A0 85 F1 | 	sub	fp, #12
09ab4     D0 4E 02 FB | 	rdlong	local04, fp
09ab8     08 A0 85 F1 | 	sub	fp, #8
09abc     27 51 02 F6 | 	mov	local05, local04
09ac0     28 41 02 F6 | 	mov	arg02, local05
09ac4     00 F2 BF FD | 	call	#_ff_cc_follow_path_0442
09ac8     0B 53 02 F6 | 	mov	local06, result1
09acc     10 A0 05 F1 | 	add	fp, #16
09ad0     D0 52 62 FC | 	wrlong	local06, fp
09ad4     D0 48 0A FB | 	rdlong	local01, fp wz
09ad8     10 A0 85 F1 | 	sub	fp, #16
09adc     20 00 90 5D |  if_ne	jmp	#LR__0631
09ae0     3F A0 05 F1 | 	add	fp, #63
09ae4     D0 48 C2 FA | 	rdbyte	local01, fp
09ae8     3F A0 85 F1 | 	sub	fp, #63
09aec     07 48 46 F7 | 	zerox	local01, #7
09af0     80 48 CE F7 | 	test	local01, #128 wz
09af4     10 A0 05 51 |  if_ne	add	fp, #16
09af8     D0 0C 68 5C |  if_ne	wrlong	#6, fp
09afc     10 A0 85 51 |  if_ne	sub	fp, #16
09b00                 | LR__0631
09b00     0C A0 05 F1 | 	add	fp, #12
09b04     D0 48 C2 FA | 	rdbyte	local01, fp
09b08     0C A0 85 F1 | 	sub	fp, #12
09b0c     07 48 46 F7 | 	zerox	local01, #7
09b10     1C 48 CE F7 | 	test	local01, #28 wz
09b14     04 02 90 AD |  if_e	jmp	#LR__0637
09b18     10 A0 05 F1 | 	add	fp, #16
09b1c     D0 48 0A FB | 	rdlong	local01, fp wz
09b20     10 A0 85 F1 | 	sub	fp, #16
09b24     48 00 90 AD |  if_e	jmp	#LR__0633
09b28     10 A0 05 F1 | 	add	fp, #16
09b2c     D0 48 02 FB | 	rdlong	local01, fp
09b30     10 A0 85 F1 | 	sub	fp, #16
09b34     04 48 0E F2 | 	cmp	local01, #4 wz
09b38     1C 00 90 5D |  if_ne	jmp	#LR__0632
09b3c     14 A0 05 F1 | 	add	fp, #20
09b40     D0 3E 02 F6 | 	mov	arg01, fp
09b44     14 A0 85 F1 | 	sub	fp, #20
09b48     00 ED BF FD | 	call	#_ff_cc_dir_register_0423
09b4c     10 A0 05 F1 | 	add	fp, #16
09b50     D0 16 62 FC | 	wrlong	result1, fp
09b54     10 A0 85 F1 | 	sub	fp, #16
09b58                 | LR__0632
09b58     0C A0 05 F1 | 	add	fp, #12
09b5c     D0 48 C2 FA | 	rdbyte	local01, fp
09b60     08 48 46 F5 | 	or	local01, #8
09b64     D0 48 42 FC | 	wrbyte	local01, fp
09b68     0C A0 85 F1 | 	sub	fp, #12
09b6c     48 00 90 FD | 	jmp	#LR__0636
09b70                 | LR__0633
09b70     1A A0 05 F1 | 	add	fp, #26
09b74     D0 48 C2 FA | 	rdbyte	local01, fp
09b78     1A A0 85 F1 | 	sub	fp, #26
09b7c     07 48 46 F7 | 	zerox	local01, #7
09b80     11 48 CE F7 | 	test	local01, #17 wz
09b84     10 00 90 AD |  if_e	jmp	#LR__0634
09b88     10 A0 05 F1 | 	add	fp, #16
09b8c     D0 0E 68 FC | 	wrlong	#7, fp
09b90     10 A0 85 F1 | 	sub	fp, #16
09b94     20 00 90 FD | 	jmp	#LR__0635
09b98                 | LR__0634
09b98     0C A0 05 F1 | 	add	fp, #12
09b9c     D0 48 C2 FA | 	rdbyte	local01, fp
09ba0     0C A0 85 F1 | 	sub	fp, #12
09ba4     07 48 46 F7 | 	zerox	local01, #7
09ba8     04 48 CE F7 | 	test	local01, #4 wz
09bac     10 A0 05 51 |  if_ne	add	fp, #16
09bb0     D0 10 68 5C |  if_ne	wrlong	#8, fp
09bb4     10 A0 85 51 |  if_ne	sub	fp, #16
09bb8                 | LR__0635
09bb8                 | LR__0636
09bb8     10 A0 05 F1 | 	add	fp, #16
09bbc     D0 48 0A FB | 	rdlong	local01, fp wz
09bc0     10 A0 85 F1 | 	sub	fp, #16
09bc4     D4 01 90 5D |  if_ne	jmp	#LR__0642
09bc8     0C A0 05 F1 | 	add	fp, #12
09bcc     D0 50 C2 FA | 	rdbyte	local05, fp
09bd0     0C A0 85 F1 | 	sub	fp, #12
09bd4     07 50 46 F7 | 	zerox	local05, #7
09bd8     08 50 CE F7 | 	test	local05, #8 wz
09bdc     BC 01 90 AD |  if_e	jmp	#LR__0642
09be0     40 A0 05 F1 | 	add	fp, #64
09be4     D0 3E 02 FB | 	rdlong	arg01, fp
09be8     10 A0 85 F1 | 	sub	fp, #16
09bec     D0 40 02 FB | 	rdlong	arg02, fp
09bf0     30 A0 85 F1 | 	sub	fp, #48
09bf4     A0 E9 BF FD | 	call	#_ff_cc_ld_clust_0410
09bf8     0B 53 02 F6 | 	mov	local06, result1
09bfc     44 A0 05 F1 | 	add	fp, #68
09c00     D0 52 62 FC | 	wrlong	local06, fp
09c04     14 A0 85 F1 | 	sub	fp, #20
09c08     D0 3E 02 FB | 	rdlong	arg01, fp
09c0c     30 A0 85 F1 | 	sub	fp, #48
09c10     0E 3E 06 F1 | 	add	arg01, #14
09c14     80 10 27 FF 
09c18     00 40 06 F6 | 	mov	arg02, ##1310785536
09c1c     68 D8 BF FD | 	call	#_ff_cc_st_dword_0353
09c20     30 A0 05 F1 | 	add	fp, #48
09c24     D0 48 02 FB | 	rdlong	local01, fp
09c28     0B 48 06 F1 | 	add	local01, #11
09c2c     24 41 48 FC | 	wrbyte	#32, local01
09c30     10 A0 05 F1 | 	add	fp, #16
09c34     D0 3E 02 FB | 	rdlong	arg01, fp
09c38     10 A0 85 F1 | 	sub	fp, #16
09c3c     D0 40 02 FB | 	rdlong	arg02, fp
09c40     30 A0 85 F1 | 	sub	fp, #48
09c44     00 42 06 F6 | 	mov	arg03, #0
09c48     A4 E9 BF FD | 	call	#_ff_cc_st_clust_0411
09c4c     30 A0 05 F1 | 	add	fp, #48
09c50     D0 3E 02 FB | 	rdlong	arg01, fp
09c54     30 A0 85 F1 | 	sub	fp, #48
09c58     1C 3E 06 F1 | 	add	arg01, #28
09c5c     00 40 06 F6 | 	mov	arg02, #0
09c60     24 D8 BF FD | 	call	#_ff_cc_st_dword_0353
09c64     40 A0 05 F1 | 	add	fp, #64
09c68     D0 48 02 FB | 	rdlong	local01, fp
09c6c     03 48 06 F1 | 	add	local01, #3
09c70     24 03 48 FC | 	wrbyte	#1, local01
09c74     04 A0 05 F1 | 	add	fp, #4
09c78     D0 54 02 FB | 	rdlong	local07, fp
09c7c     44 A0 85 F1 | 	sub	fp, #68
09c80     2A 49 0A F6 | 	mov	local01, local07 wz
09c84     14 01 90 AD |  if_e	jmp	#LR__0642
09c88     40 A0 05 F1 | 	add	fp, #64
09c8c     D0 48 02 FB | 	rdlong	local01, fp
09c90     2C 48 06 F1 | 	add	local01, #44
09c94     24 51 02 FB | 	rdlong	local05, local01
09c98     10 A0 05 F1 | 	add	fp, #16
09c9c     D0 50 62 FC | 	wrlong	local05, fp
09ca0     3C A0 85 F1 | 	sub	fp, #60
09ca4     D0 3E 02 F6 | 	mov	arg01, fp
09ca8     30 A0 05 F1 | 	add	fp, #48
09cac     D0 40 02 FB | 	rdlong	arg02, fp
09cb0     44 A0 85 F1 | 	sub	fp, #68
09cb4     00 42 06 F6 | 	mov	arg03, #0
09cb8     60 E0 BF FD | 	call	#_ff_cc_remove_chain_0385
09cbc     0B 55 02 F6 | 	mov	local07, result1
09cc0     10 A0 05 F1 | 	add	fp, #16
09cc4     D0 54 62 FC | 	wrlong	local07, fp
09cc8     10 A0 85 F1 | 	sub	fp, #16
09ccc     2A 49 0A F6 | 	mov	local01, local07 wz
09cd0     C8 00 90 5D |  if_ne	jmp	#LR__0642
09cd4     40 A0 05 F1 | 	add	fp, #64
09cd8     D0 3E 02 FB | 	rdlong	arg01, fp
09cdc     10 A0 05 F1 | 	add	fp, #16
09ce0     D0 40 02 FB | 	rdlong	arg02, fp
09ce4     50 A0 85 F1 | 	sub	fp, #80
09ce8     30 D9 BF FD | 	call	#_ff_cc_move_window_0369
09cec     0B 53 02 F6 | 	mov	local06, result1
09cf0     10 A0 05 F1 | 	add	fp, #16
09cf4     D0 52 62 FC | 	wrlong	local06, fp
09cf8     30 A0 05 F1 | 	add	fp, #48
09cfc     D0 48 02 FB | 	rdlong	local01, fp
09d00     04 A0 05 F1 | 	add	fp, #4
09d04     D0 50 02 FB | 	rdlong	local05, fp
09d08     44 A0 85 F1 | 	sub	fp, #68
09d0c     01 50 86 F1 | 	sub	local05, #1
09d10     0C 48 06 F1 | 	add	local01, #12
09d14     24 51 62 FC | 	wrlong	local05, local01
09d18     80 00 90 FD | 	jmp	#LR__0642
09d1c                 | LR__0637
09d1c     10 A0 05 F1 | 	add	fp, #16
09d20     D0 48 0A FB | 	rdlong	local01, fp wz
09d24     10 A0 85 F1 | 	sub	fp, #16
09d28     70 00 90 5D |  if_ne	jmp	#LR__0641
09d2c     1A A0 05 F1 | 	add	fp, #26
09d30     D0 48 C2 FA | 	rdbyte	local01, fp
09d34     1A A0 85 F1 | 	sub	fp, #26
09d38     07 48 46 F7 | 	zerox	local01, #7
09d3c     10 48 CE F7 | 	test	local01, #16 wz
09d40     10 00 90 AD |  if_e	jmp	#LR__0638
09d44     10 A0 05 F1 | 	add	fp, #16
09d48     D0 08 68 FC | 	wrlong	#4, fp
09d4c     10 A0 85 F1 | 	sub	fp, #16
09d50     48 00 90 FD | 	jmp	#LR__0640
09d54                 | LR__0638
09d54     0C A0 05 F1 | 	add	fp, #12
09d58     D0 54 C2 FA | 	rdbyte	local07, fp
09d5c     0C A0 85 F1 | 	sub	fp, #12
09d60     2A 49 02 F6 | 	mov	local01, local07
09d64     07 48 46 F7 | 	zerox	local01, #7
09d68     02 48 CE F7 | 	test	local01, #2 wz
09d6c     2C 00 90 AD |  if_e	jmp	#LR__0639
09d70     1A A0 05 F1 | 	add	fp, #26
09d74     D0 4E C2 FA | 	rdbyte	local04, fp
09d78     1A A0 85 F1 | 	sub	fp, #26
09d7c     27 51 02 F6 | 	mov	local05, local04
09d80     07 50 46 F7 | 	zerox	local05, #7
09d84     01 50 0E F5 | 	and	local05, #1 wz
09d88     10 00 90 AD |  if_e	jmp	#LR__0639
09d8c     07 48 06 F6 | 	mov	local01, #7
09d90     10 A0 05 F1 | 	add	fp, #16
09d94     D0 0E 68 FC | 	wrlong	#7, fp
09d98     10 A0 85 F1 | 	sub	fp, #16
09d9c                 | LR__0639
09d9c                 | LR__0640
09d9c                 | LR__0641
09d9c                 | LR__0642
09d9c     10 A0 05 F1 | 	add	fp, #16
09da0     D0 48 0A FB | 	rdlong	local01, fp wz
09da4     10 A0 85 F1 | 	sub	fp, #16
09da8     68 00 90 5D |  if_ne	jmp	#LR__0644
09dac     0C A0 05 F1 | 	add	fp, #12
09db0     D0 48 C2 FA | 	rdbyte	local01, fp
09db4     0C A0 85 F1 | 	sub	fp, #12
09db8     07 48 46 F7 | 	zerox	local01, #7
09dbc     08 48 CE F7 | 	test	local01, #8 wz
09dc0     14 00 90 AD |  if_e	jmp	#LR__0643
09dc4     0C A0 05 F1 | 	add	fp, #12
09dc8     D0 48 C2 FA | 	rdbyte	local01, fp
09dcc     40 48 46 F5 | 	or	local01, #64
09dd0     D0 48 42 FC | 	wrbyte	local01, fp
09dd4     0C A0 85 F1 | 	sub	fp, #12
09dd8                 | LR__0643
09dd8     04 A0 05 F1 | 	add	fp, #4
09ddc     D0 48 02 FB | 	rdlong	local01, fp
09de0     3C A0 05 F1 | 	add	fp, #60
09de4     D0 50 02 FB | 	rdlong	local05, fp
09de8     2C 50 06 F1 | 	add	local05, #44
09dec     28 53 02 FB | 	rdlong	local06, local05
09df0     20 48 06 F1 | 	add	local01, #32
09df4     24 53 62 FC | 	wrlong	local06, local01
09df8     3C A0 85 F1 | 	sub	fp, #60
09dfc     D0 48 02 FB | 	rdlong	local01, fp
09e00     2C A0 05 F1 | 	add	fp, #44
09e04     D0 50 02 FB | 	rdlong	local05, fp
09e08     30 A0 85 F1 | 	sub	fp, #48
09e0c     24 48 06 F1 | 	add	local01, #36
09e10     24 51 62 FC | 	wrlong	local05, local01
09e14                 | LR__0644
09e14     10 A0 05 F1 | 	add	fp, #16
09e18     D0 48 0A FB | 	rdlong	local01, fp wz
09e1c     10 A0 85 F1 | 	sub	fp, #16
09e20     FC 02 90 5D |  if_ne	jmp	#LR__0651
09e24     04 A0 05 F1 | 	add	fp, #4
09e28     D0 48 02 FB | 	rdlong	local01, fp
09e2c     3C A0 05 F1 | 	add	fp, #60
09e30     D0 3E 02 FB | 	rdlong	arg01, fp
09e34     10 A0 85 F1 | 	sub	fp, #16
09e38     D0 40 02 FB | 	rdlong	arg02, fp
09e3c     30 A0 85 F1 | 	sub	fp, #48
09e40     54 E7 BF FD | 	call	#_ff_cc_ld_clust_0410
09e44     0B 4D 02 F6 | 	mov	local03, result1
09e48     08 48 06 F1 | 	add	local01, #8
09e4c     24 4D 62 FC | 	wrlong	local03, local01
09e50     04 A0 05 F1 | 	add	fp, #4
09e54     D0 48 02 FB | 	rdlong	local01, fp
09e58     2C A0 05 F1 | 	add	fp, #44
09e5c     D0 3E 02 FB | 	rdlong	arg01, fp
09e60     30 A0 85 F1 | 	sub	fp, #48
09e64     1C 3E 06 F1 | 	add	arg01, #28
09e68     B8 D5 BF FD | 	call	#_ff_cc_ld_dword_0351
09e6c     0C 48 06 F1 | 	add	local01, #12
09e70     24 17 62 FC | 	wrlong	result1, local01
09e74     04 A0 05 F1 | 	add	fp, #4
09e78     D0 48 02 FB | 	rdlong	local01, fp
09e7c     3C A0 05 F1 | 	add	fp, #60
09e80     D0 50 02 FB | 	rdlong	local05, fp
09e84     24 51 62 FC | 	wrlong	local05, local01
09e88     3C A0 85 F1 | 	sub	fp, #60
09e8c     D0 48 02 FB | 	rdlong	local01, fp
09e90     3C A0 05 F1 | 	add	fp, #60
09e94     D0 50 02 FB | 	rdlong	local05, fp
09e98     06 50 06 F1 | 	add	local05, #6
09e9c     28 53 E2 FA | 	rdword	local06, local05
09ea0     04 48 06 F1 | 	add	local01, #4
09ea4     24 53 52 FC | 	wrword	local06, local01
09ea8     3C A0 85 F1 | 	sub	fp, #60
09eac     D0 48 02 FB | 	rdlong	local01, fp
09eb0     08 A0 05 F1 | 	add	fp, #8
09eb4     D0 50 C2 FA | 	rdbyte	local05, fp
09eb8     10 48 06 F1 | 	add	local01, #16
09ebc     24 51 42 FC | 	wrbyte	local05, local01
09ec0     08 A0 85 F1 | 	sub	fp, #8
09ec4     D0 48 02 FB | 	rdlong	local01, fp
09ec8     11 48 06 F1 | 	add	local01, #17
09ecc     24 01 48 FC | 	wrbyte	#0, local01
09ed0     D0 48 02 FB | 	rdlong	local01, fp
09ed4     1C 48 06 F1 | 	add	local01, #28
09ed8     24 01 68 FC | 	wrlong	#0, local01
09edc     D0 48 02 FB | 	rdlong	local01, fp
09ee0     14 48 06 F1 | 	add	local01, #20
09ee4     24 01 68 FC | 	wrlong	#0, local01
09ee8     08 A0 05 F1 | 	add	fp, #8
09eec     D0 48 C2 FA | 	rdbyte	local01, fp
09ef0     0C A0 85 F1 | 	sub	fp, #12
09ef4     07 48 46 F7 | 	zerox	local01, #7
09ef8     20 48 CE F7 | 	test	local01, #32 wz
09efc     20 02 90 AD |  if_e	jmp	#LR__0650
09f00     04 A0 05 F1 | 	add	fp, #4
09f04     D0 50 02 FB | 	rdlong	local05, fp
09f08     04 A0 85 F1 | 	sub	fp, #4
09f0c     0C 50 06 F1 | 	add	local05, #12
09f10     28 4B 02 FB | 	rdlong	local02, local05
09f14     00 4A 1E F2 | 	cmp	local02, #0 wcz
09f18     04 02 90 ED |  if_be	jmp	#LR__0650
09f1c     04 A0 05 F1 | 	add	fp, #4
09f20     D0 48 02 FB | 	rdlong	local01, fp
09f24     24 51 02 F6 | 	mov	local05, local01
09f28     0C 50 06 F1 | 	add	local05, #12
09f2c     28 53 02 FB | 	rdlong	local06, local05
09f30     14 48 06 F1 | 	add	local01, #20
09f34     24 53 62 FC | 	wrlong	local06, local01
09f38     3C A0 05 F1 | 	add	fp, #60
09f3c     D0 54 02 FB | 	rdlong	local07, fp
09f40     0A 54 06 F1 | 	add	local07, #10
09f44     2A 53 E2 FA | 	rdword	local06, local07
09f48     09 52 66 F0 | 	shl	local06, #9
09f4c     08 A0 05 F1 | 	add	fp, #8
09f50     D0 52 62 FC | 	wrlong	local06, fp
09f54     44 A0 85 F1 | 	sub	fp, #68
09f58     D0 48 02 FB | 	rdlong	local01, fp
09f5c     08 48 06 F1 | 	add	local01, #8
09f60     24 51 02 FB | 	rdlong	local05, local01
09f64     48 A0 05 F1 | 	add	fp, #72
09f68     D0 50 62 FC | 	wrlong	local05, fp
09f6c                 | ' 				fp->fptr = fp->obj.objsize;
09f6c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
09f6c                 | ' 				clst = fp->obj.sclust;
09f6c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
09f6c     48 A0 85 F1 | 	sub	fp, #72
09f70     D0 48 02 FB | 	rdlong	local01, fp
09f74     0C 48 06 F1 | 	add	local01, #12
09f78     24 51 02 FB | 	rdlong	local05, local01
09f7c     50 A0 05 F1 | 	add	fp, #80
09f80     D0 50 62 FC | 	wrlong	local05, fp
09f84     54 A0 85 F1 | 	sub	fp, #84
09f88                 | LR__0645
09f88     10 A0 05 F1 | 	add	fp, #16
09f8c     D0 52 02 FB | 	rdlong	local06, fp
09f90     10 A0 85 F1 | 	sub	fp, #16
09f94     29 4F 0A F6 | 	mov	local04, local06 wz
09f98     B0 00 90 5D |  if_ne	jmp	#LR__0646
09f9c     54 A0 05 F1 | 	add	fp, #84
09fa0     D0 4C 02 FB | 	rdlong	local03, fp
09fa4     26 4B 02 F6 | 	mov	local02, local03
09fa8     0C A0 85 F1 | 	sub	fp, #12
09fac     D0 56 02 FB | 	rdlong	local08, fp
09fb0     48 A0 85 F1 | 	sub	fp, #72
09fb4     2B 59 02 F6 | 	mov	local09, local08
09fb8     2C 4B 1A F2 | 	cmp	local02, local09 wcz
09fbc     8C 00 90 ED |  if_be	jmp	#LR__0646
09fc0     04 A0 05 F1 | 	add	fp, #4
09fc4     D0 3E 02 FB | 	rdlong	arg01, fp
09fc8     48 A0 05 F1 | 	add	fp, #72
09fcc     D0 5A 02 FB | 	rdlong	local10, fp
09fd0     4C A0 85 F1 | 	sub	fp, #76
09fd4     2D 5D 02 F6 | 	mov	local11, local10
09fd8     2E 41 02 F6 | 	mov	arg02, local11
09fdc     74 D8 BF FD | 	call	#_ff_cc_get_fat_0377
09fe0     0B 5F 02 F6 | 	mov	local12, result1
09fe4     4C A0 05 F1 | 	add	fp, #76
09fe8     D0 5E 62 FC | 	wrlong	local12, fp
09fec     4C A0 85 F1 | 	sub	fp, #76
09ff0     01 5E 1E F2 | 	cmp	local12, #1 wcz
09ff4     10 A0 05 E1 |  if_be	add	fp, #16
09ff8     D0 04 68 EC |  if_be	wrlong	#2, fp
09ffc     10 A0 85 E1 |  if_be	sub	fp, #16
0a000     4C A0 05 F1 | 	add	fp, #76
0a004     D0 60 02 FB | 	rdlong	local13, fp
0a008     4C A0 85 F1 | 	sub	fp, #76
0a00c     FF FF 7F FF 
0a010     FF 61 0E F2 | 	cmp	local13, ##-1 wz
0a014     10 A0 05 A1 |  if_e	add	fp, #16
0a018     D0 02 68 AC |  if_e	wrlong	#1, fp
0a01c     10 A0 85 A1 |  if_e	sub	fp, #16
0a020     54 A0 05 F1 | 	add	fp, #84
0a024     D0 62 02 FB | 	rdlong	local14, fp
0a028     31 61 02 F6 | 	mov	local13, local14
0a02c     0C A0 85 F1 | 	sub	fp, #12
0a030     D0 64 02 FB | 	rdlong	local15, fp
0a034     32 67 02 F6 | 	mov	local16, local15
0a038     33 61 82 F1 | 	sub	local13, local16
0a03c     0C A0 05 F1 | 	add	fp, #12
0a040     D0 60 62 FC | 	wrlong	local13, fp
0a044     54 A0 85 F1 | 	sub	fp, #84
0a048     3C FF 9F FD | 	jmp	#LR__0645
0a04c                 | LR__0646
0a04c     04 A0 05 F1 | 	add	fp, #4
0a050     D0 48 02 FB | 	rdlong	local01, fp
0a054     48 A0 05 F1 | 	add	fp, #72
0a058     D0 50 02 FB | 	rdlong	local05, fp
0a05c     18 48 06 F1 | 	add	local01, #24
0a060     24 51 62 FC | 	wrlong	local05, local01
0a064     3C A0 85 F1 | 	sub	fp, #60
0a068     D0 54 02 FB | 	rdlong	local07, fp
0a06c     10 A0 85 F1 | 	sub	fp, #16
0a070     2A 49 0A F6 | 	mov	local01, local07 wz
0a074     A8 00 90 5D |  if_ne	jmp	#LR__0649
0a078     54 A0 05 F1 | 	add	fp, #84
0a07c     D0 52 02 FB | 	rdlong	local06, fp
0a080     54 A0 85 F1 | 	sub	fp, #84
0a084     29 4F 02 F6 | 	mov	local04, local06
0a088     27 51 02 F6 | 	mov	local05, local04
0a08c     FF 51 0E F5 | 	and	local05, #511 wz
0a090     8C 00 90 AD |  if_e	jmp	#LR__0649
0a094     40 A0 05 F1 | 	add	fp, #64
0a098     D0 3E 02 FB | 	rdlong	arg01, fp
0a09c     0C A0 05 F1 | 	add	fp, #12
0a0a0     D0 4E 02 FB | 	rdlong	local04, fp
0a0a4     4C A0 85 F1 | 	sub	fp, #76
0a0a8     27 51 02 F6 | 	mov	local05, local04
0a0ac     28 41 02 F6 | 	mov	arg02, local05
0a0b0     60 D7 BF FD | 	call	#_ff_cc_clst2sect_0372
0a0b4     0B 53 02 F6 | 	mov	local06, result1
0a0b8     50 A0 05 F1 | 	add	fp, #80
0a0bc     D0 52 62 FC | 	wrlong	local06, fp
0a0c0     D0 54 0A FB | 	rdlong	local07, fp wz
0a0c4     50 A0 85 F1 | 	sub	fp, #80
0a0c8     14 00 90 5D |  if_ne	jmp	#LR__0647
0a0cc     02 48 06 F6 | 	mov	local01, #2
0a0d0     10 A0 05 F1 | 	add	fp, #16
0a0d4     D0 04 68 FC | 	wrlong	#2, fp
0a0d8     10 A0 85 F1 | 	sub	fp, #16
0a0dc     40 00 90 FD | 	jmp	#LR__0648
0a0e0                 | LR__0647
0a0e0     04 A0 05 F1 | 	add	fp, #4
0a0e4     D0 54 02 FB | 	rdlong	local07, fp
0a0e8     2A 49 02 F6 | 	mov	local01, local07
0a0ec     4C A0 05 F1 | 	add	fp, #76
0a0f0     D0 4E 02 FB | 	rdlong	local04, fp
0a0f4     27 51 02 F6 | 	mov	local05, local04
0a0f8     04 A0 05 F1 | 	add	fp, #4
0a0fc     D0 4C 02 FB | 	rdlong	local03, fp
0a100     54 A0 85 F1 | 	sub	fp, #84
0a104     26 4B 02 F6 | 	mov	local02, local03
0a108     25 53 02 F6 | 	mov	local06, local02
0a10c     09 52 46 F0 | 	shr	local06, #9
0a110     29 51 02 F1 | 	add	local05, local06
0a114     1C 48 06 F1 | 	add	local01, #28
0a118     24 51 62 FC | 	wrlong	local05, local01
0a11c     1C 48 86 F1 | 	sub	local01, #28
0a120                 | LR__0648
0a120                 | LR__0649
0a120                 | LR__0650
0a120                 | LR__0651
0a120                 | LR__0652
0a120     10 A0 05 F1 | 	add	fp, #16
0a124     D0 48 0A FB | 	rdlong	local01, fp wz
0a128     10 A0 85 F1 | 	sub	fp, #16
0a12c     10 00 90 AD |  if_e	jmp	#LR__0653
0a130     04 A0 05 F1 | 	add	fp, #4
0a134     D0 48 02 FB | 	rdlong	local01, fp
0a138     04 A0 85 F1 | 	sub	fp, #4
0a13c     24 01 68 FC | 	wrlong	#0, local01
0a140                 | LR__0653
0a140                 | ' 
0a140                 | ' 	return res ;
0a140     10 A0 05 F1 | 	add	fp, #16
0a144     D0 16 02 FB | 	rdlong	result1, fp
0a148     10 A0 85 F1 | 	sub	fp, #16
0a14c                 | LR__0654
0a14c     D0 F0 03 F6 | 	mov	ptra, fp
0a150     E0 00 A0 FD | 	call	#popregs_
0a154                 | _ff_cc_f_open_ret
0a154     2D 00 64 FD | 	ret
0a158                 | 
0a158                 | _ff_cc_f_read
0a158     19 9C 05 F6 | 	mov	COUNT_, #25
0a15c     D1 00 A0 FD | 	call	#pushregs_
0a160     38 F0 07 F1 | 	add	ptra, #56
0a164     04 A0 05 F1 | 	add	fp, #4
0a168     D0 3E 62 FC | 	wrlong	arg01, fp
0a16c     04 A0 05 F1 | 	add	fp, #4
0a170     D0 40 62 FC | 	wrlong	arg02, fp
0a174     04 A0 05 F1 | 	add	fp, #4
0a178     D0 42 62 FC | 	wrlong	arg03, fp
0a17c     04 A0 05 F1 | 	add	fp, #4
0a180     D0 44 62 FC | 	wrlong	arg04, fp
0a184     18 A0 05 F1 | 	add	fp, #24
0a188     D0 00 68 FC | 	wrlong	#0, fp
0a18c     20 A0 85 F1 | 	sub	fp, #32
0a190     D0 48 02 FB | 	rdlong	local01, fp
0a194     2C A0 05 F1 | 	add	fp, #44
0a198     D0 48 62 FC | 	wrlong	local01, fp
0a19c     24 A0 85 F1 | 	sub	fp, #36
0a1a0     D0 48 02 FB | 	rdlong	local01, fp
0a1a4     24 01 68 FC | 	wrlong	#0, local01
0a1a8     0C A0 85 F1 | 	sub	fp, #12
0a1ac     D0 3E 02 FB | 	rdlong	arg01, fp
0a1b0     14 A0 05 F1 | 	add	fp, #20
0a1b4     D0 40 02 F6 | 	mov	arg02, fp
0a1b8     18 A0 85 F1 | 	sub	fp, #24
0a1bc     84 F6 BF FD | 	call	#_ff_cc_validate_0467
0a1c0     14 A0 05 F1 | 	add	fp, #20
0a1c4     D0 16 62 FC | 	wrlong	result1, fp
0a1c8     0B 4B 02 F6 | 	mov	local02, result1
0a1cc     14 A0 85 F1 | 	sub	fp, #20
0a1d0     25 49 0A F6 | 	mov	local01, local02 wz
0a1d4     2C 00 90 5D |  if_ne	jmp	#LR__0655
0a1d8     04 A0 05 F1 | 	add	fp, #4
0a1dc     D0 4C 02 FB | 	rdlong	local03, fp
0a1e0     11 4C 06 F1 | 	add	local03, #17
0a1e4     26 4F C2 FA | 	rdbyte	local04, local03
0a1e8     27 51 02 F6 | 	mov	local05, local04
0a1ec     07 50 46 F7 | 	zerox	local05, #7
0a1f0     10 A0 05 F1 | 	add	fp, #16
0a1f4     D0 50 62 FC | 	wrlong	local05, fp
0a1f8     14 A0 85 F1 | 	sub	fp, #20
0a1fc     28 53 0A F6 | 	mov	local06, local05 wz
0a200     10 00 90 AD |  if_e	jmp	#LR__0656
0a204                 | LR__0655
0a204     14 A0 05 F1 | 	add	fp, #20
0a208     D0 16 02 FB | 	rdlong	result1, fp
0a20c     14 A0 85 F1 | 	sub	fp, #20
0a210     84 05 90 FD | 	jmp	#LR__0674
0a214                 | LR__0656
0a214     04 A0 05 F1 | 	add	fp, #4
0a218     D0 4A 02 FB | 	rdlong	local02, fp
0a21c     04 A0 85 F1 | 	sub	fp, #4
0a220     10 4A 06 F1 | 	add	local02, #16
0a224     25 49 C2 FA | 	rdbyte	local01, local02
0a228     01 48 CE F7 | 	test	local01, #1 wz
0a22c     07 16 06 A6 |  if_e	mov	result1, #7
0a230     64 05 90 AD |  if_e	jmp	#LR__0674
0a234     04 A0 05 F1 | 	add	fp, #4
0a238     D0 4A 02 FB | 	rdlong	local02, fp
0a23c     25 4D 02 F6 | 	mov	local03, local02
0a240     0C 4A 06 F1 | 	add	local02, #12
0a244     25 49 02 FB | 	rdlong	local01, local02
0a248     14 4C 06 F1 | 	add	local03, #20
0a24c     26 53 02 FB | 	rdlong	local06, local03
0a250     29 49 82 F1 | 	sub	local01, local06
0a254     20 A0 05 F1 | 	add	fp, #32
0a258     D0 48 62 FC | 	wrlong	local01, fp
0a25c     18 A0 85 F1 | 	sub	fp, #24
0a260     D0 48 02 FB | 	rdlong	local01, fp
0a264     18 A0 05 F1 | 	add	fp, #24
0a268     D0 54 02 FB | 	rdlong	local07, fp
0a26c     24 A0 85 F1 | 	sub	fp, #36
0a270     2A 49 1A F2 | 	cmp	local01, local07 wcz
0a274     14 00 90 ED |  if_be	jmp	#LR__0657
0a278     24 A0 05 F1 | 	add	fp, #36
0a27c     D0 48 02 FB | 	rdlong	local01, fp
0a280     18 A0 85 F1 | 	sub	fp, #24
0a284     D0 48 62 FC | 	wrlong	local01, fp
0a288     0C A0 85 F1 | 	sub	fp, #12
0a28c                 | LR__0657
0a28c                 | ' 
0a28c                 | ' 	for ( ; btr;
0a28c                 | LR__0658
0a28c     0C A0 05 F1 | 	add	fp, #12
0a290     D0 4A 02 FB | 	rdlong	local02, fp
0a294     0C A0 85 F1 | 	sub	fp, #12
0a298     25 49 0A F6 | 	mov	local01, local02 wz
0a29c     F4 04 90 AD |  if_e	jmp	#LR__0673
0a2a0     04 A0 05 F1 | 	add	fp, #4
0a2a4     D0 54 02 FB | 	rdlong	local07, fp
0a2a8     04 A0 85 F1 | 	sub	fp, #4
0a2ac     14 54 06 F1 | 	add	local07, #20
0a2b0     2A 57 02 FB | 	rdlong	local08, local07
0a2b4     FF 57 CE F7 | 	test	local08, #511 wz
0a2b8     64 03 90 5D |  if_ne	jmp	#LR__0669
0a2bc     04 A0 05 F1 | 	add	fp, #4
0a2c0     D0 4C 02 FB | 	rdlong	local03, fp
0a2c4     14 4C 06 F1 | 	add	local03, #20
0a2c8     26 55 02 FB | 	rdlong	local07, local03
0a2cc     09 54 46 F0 | 	shr	local07, #9
0a2d0     14 A0 05 F1 | 	add	fp, #20
0a2d4     D0 58 02 FB | 	rdlong	local09, fp
0a2d8     2C 5B 02 F6 | 	mov	local10, local09
0a2dc     0A 5A 06 F1 | 	add	local10, #10
0a2e0     2D 5D E2 FA | 	rdword	local11, local10
0a2e4     2E 51 02 F6 | 	mov	local05, local11
0a2e8     0F 50 46 F7 | 	zerox	local05, #15
0a2ec     01 50 86 F1 | 	sub	local05, #1
0a2f0     28 55 02 F5 | 	and	local07, local05
0a2f4     18 A0 05 F1 | 	add	fp, #24
0a2f8     D0 54 62 FC | 	wrlong	local07, fp
0a2fc     D0 54 0A FB | 	rdlong	local07, fp wz
0a300     30 A0 85 F1 | 	sub	fp, #48
0a304     E0 00 90 5D |  if_ne	jmp	#LR__0663
0a308     04 A0 05 F1 | 	add	fp, #4
0a30c     D0 54 02 FB | 	rdlong	local07, fp
0a310     04 A0 85 F1 | 	sub	fp, #4
0a314     14 54 06 F1 | 	add	local07, #20
0a318     2A 57 0A FB | 	rdlong	local08, local07 wz
0a31c     20 00 90 5D |  if_ne	jmp	#LR__0659
0a320     04 A0 05 F1 | 	add	fp, #4
0a324     D0 54 02 FB | 	rdlong	local07, fp
0a328     08 54 06 F1 | 	add	local07, #8
0a32c     2A 57 02 FB | 	rdlong	local08, local07
0a330     18 A0 05 F1 | 	add	fp, #24
0a334     D0 56 62 FC | 	wrlong	local08, fp
0a338     1C A0 85 F1 | 	sub	fp, #28
0a33c     28 00 90 FD | 	jmp	#LR__0660
0a340                 | LR__0659
0a340     04 A0 05 F1 | 	add	fp, #4
0a344     D0 3E 02 FB | 	rdlong	arg01, fp
0a348     1F 53 02 F6 | 	mov	local06, arg01
0a34c     04 A0 85 F1 | 	sub	fp, #4
0a350     18 52 06 F1 | 	add	local06, #24
0a354     29 41 02 FB | 	rdlong	arg02, local06
0a358     F8 D4 BF FD | 	call	#_ff_cc_get_fat_0377
0a35c     1C A0 05 F1 | 	add	fp, #28
0a360     D0 16 62 FC | 	wrlong	result1, fp
0a364     1C A0 85 F1 | 	sub	fp, #28
0a368                 | LR__0660
0a368     1C A0 05 F1 | 	add	fp, #28
0a36c     D0 54 02 FB | 	rdlong	local07, fp
0a370     1C A0 85 F1 | 	sub	fp, #28
0a374     02 54 1E F2 | 	cmp	local07, #2 wcz
0a378     1C 00 90 3D |  if_ae	jmp	#LR__0661
0a37c     04 A0 05 F1 | 	add	fp, #4
0a380     D0 54 02 FB | 	rdlong	local07, fp
0a384     04 A0 85 F1 | 	sub	fp, #4
0a388     11 54 06 F1 | 	add	local07, #17
0a38c     2A 05 48 FC | 	wrbyte	#2, local07
0a390     02 16 06 F6 | 	mov	result1, #2
0a394     00 04 90 FD | 	jmp	#LR__0674
0a398                 | LR__0661
0a398     1C A0 05 F1 | 	add	fp, #28
0a39c     D0 54 02 FB | 	rdlong	local07, fp
0a3a0     1C A0 85 F1 | 	sub	fp, #28
0a3a4     FF FF 7F FF 
0a3a8     FF 55 0E F2 | 	cmp	local07, ##-1 wz
0a3ac     1C 00 90 5D |  if_ne	jmp	#LR__0662
0a3b0     04 A0 05 F1 | 	add	fp, #4
0a3b4     D0 54 02 FB | 	rdlong	local07, fp
0a3b8     04 A0 85 F1 | 	sub	fp, #4
0a3bc     11 54 06 F1 | 	add	local07, #17
0a3c0     2A 03 48 FC | 	wrbyte	#1, local07
0a3c4     01 16 06 F6 | 	mov	result1, #1
0a3c8     CC 03 90 FD | 	jmp	#LR__0674
0a3cc                 | LR__0662
0a3cc     04 A0 05 F1 | 	add	fp, #4
0a3d0     D0 54 02 FB | 	rdlong	local07, fp
0a3d4     18 A0 05 F1 | 	add	fp, #24
0a3d8     D0 56 02 FB | 	rdlong	local08, fp
0a3dc     1C A0 85 F1 | 	sub	fp, #28
0a3e0     18 54 06 F1 | 	add	local07, #24
0a3e4     2A 57 62 FC | 	wrlong	local08, local07
0a3e8                 | LR__0663
0a3e8     18 A0 05 F1 | 	add	fp, #24
0a3ec     D0 3E 02 FB | 	rdlong	arg01, fp
0a3f0     14 A0 85 F1 | 	sub	fp, #20
0a3f4     D0 56 02 FB | 	rdlong	local08, fp
0a3f8     04 A0 85 F1 | 	sub	fp, #4
0a3fc     18 56 06 F1 | 	add	local08, #24
0a400     2B 41 02 FB | 	rdlong	arg02, local08
0a404     0C D4 BF FD | 	call	#_ff_cc_clst2sect_0372
0a408     20 A0 05 F1 | 	add	fp, #32
0a40c     D0 16 62 FC | 	wrlong	result1, fp
0a410     D0 54 0A FB | 	rdlong	local07, fp wz
0a414     20 A0 85 F1 | 	sub	fp, #32
0a418     1C 00 90 5D |  if_ne	jmp	#LR__0664
0a41c     04 A0 05 F1 | 	add	fp, #4
0a420     D0 54 02 FB | 	rdlong	local07, fp
0a424     04 A0 85 F1 | 	sub	fp, #4
0a428     11 54 06 F1 | 	add	local07, #17
0a42c     2A 05 48 FC | 	wrbyte	#2, local07
0a430     02 16 06 F6 | 	mov	result1, #2
0a434     60 03 90 FD | 	jmp	#LR__0674
0a438                 | LR__0664
0a438     20 A0 05 F1 | 	add	fp, #32
0a43c     D0 54 02 FB | 	rdlong	local07, fp
0a440     10 A0 05 F1 | 	add	fp, #16
0a444     D0 56 02 FB | 	rdlong	local08, fp
0a448     2B 55 02 F1 | 	add	local07, local08
0a44c     10 A0 85 F1 | 	sub	fp, #16
0a450     D0 54 62 FC | 	wrlong	local07, fp
0a454     14 A0 85 F1 | 	sub	fp, #20
0a458     D0 54 02 FB | 	rdlong	local07, fp
0a45c     09 54 46 F0 | 	shr	local07, #9
0a460     20 A0 05 F1 | 	add	fp, #32
0a464     D0 54 62 FC | 	wrlong	local07, fp
0a468     2C A0 85 F1 | 	sub	fp, #44
0a46c     00 54 1E F2 | 	cmp	local07, #0 wcz
0a470     90 01 90 ED |  if_be	jmp	#LR__0668
0a474     30 A0 05 F1 | 	add	fp, #48
0a478     D0 54 02 FB | 	rdlong	local07, fp
0a47c     04 A0 85 F1 | 	sub	fp, #4
0a480     D0 56 02 FB | 	rdlong	local08, fp
0a484     2B 55 02 F1 | 	add	local07, local08
0a488     14 A0 85 F1 | 	sub	fp, #20
0a48c     D0 50 02 FB | 	rdlong	local05, fp
0a490     18 A0 85 F1 | 	sub	fp, #24
0a494     0A 50 06 F1 | 	add	local05, #10
0a498     28 53 E2 FA | 	rdword	local06, local05
0a49c     29 55 1A F2 | 	cmp	local07, local06 wcz
0a4a0     28 00 90 ED |  if_be	jmp	#LR__0665
0a4a4     18 A0 05 F1 | 	add	fp, #24
0a4a8     D0 4C 02 FB | 	rdlong	local03, fp
0a4ac     0A 4C 06 F1 | 	add	local03, #10
0a4b0     26 55 E2 FA | 	rdword	local07, local03
0a4b4     18 A0 05 F1 | 	add	fp, #24
0a4b8     D0 52 02 FB | 	rdlong	local06, fp
0a4bc     29 55 82 F1 | 	sub	local07, local06
0a4c0     04 A0 85 F1 | 	sub	fp, #4
0a4c4     D0 54 62 FC | 	wrlong	local07, fp
0a4c8     2C A0 85 F1 | 	sub	fp, #44
0a4cc                 | LR__0665
0a4cc     18 A0 05 F1 | 	add	fp, #24
0a4d0     D0 54 02 FB | 	rdlong	local07, fp
0a4d4     01 54 06 F1 | 	add	local07, #1
0a4d8     2A 3F C2 FA | 	rdbyte	arg01, local07
0a4dc     1C A0 05 F1 | 	add	fp, #28
0a4e0     D0 40 02 FB | 	rdlong	arg02, fp
0a4e4     14 A0 85 F1 | 	sub	fp, #20
0a4e8     D0 42 02 FB | 	rdlong	arg03, fp
0a4ec     0C A0 05 F1 | 	add	fp, #12
0a4f0     D0 44 02 FB | 	rdlong	arg04, fp
0a4f4     2C A0 85 F1 | 	sub	fp, #44
0a4f8     7C CA BF FD | 	call	#_ff_cc_disk_read
0a4fc     00 16 0E F2 | 	cmp	result1, #0 wz
0a500     1C 00 90 AD |  if_e	jmp	#LR__0666
0a504     04 A0 05 F1 | 	add	fp, #4
0a508     D0 54 02 FB | 	rdlong	local07, fp
0a50c     04 A0 85 F1 | 	sub	fp, #4
0a510     11 54 06 F1 | 	add	local07, #17
0a514     2A 03 48 FC | 	wrbyte	#1, local07
0a518     01 16 06 F6 | 	mov	result1, #1
0a51c     78 02 90 FD | 	jmp	#LR__0674
0a520                 | LR__0666
0a520     18 A0 05 F1 | 	add	fp, #24
0a524     D0 54 02 FB | 	rdlong	local07, fp
0a528     18 A0 85 F1 | 	sub	fp, #24
0a52c     03 54 06 F1 | 	add	local07, #3
0a530     2A 57 CA FA | 	rdbyte	local08, local07 wz
0a534     B0 00 90 AD |  if_e	jmp	#LR__0667
0a538     18 A0 05 F1 | 	add	fp, #24
0a53c     D0 50 02 FB | 	rdlong	local05, fp
0a540     2C 50 06 F1 | 	add	local05, #44
0a544     28 53 02 FB | 	rdlong	local06, local05
0a548     08 A0 05 F1 | 	add	fp, #8
0a54c     D0 5C 02 FB | 	rdlong	local11, fp
0a550     2E 53 82 F1 | 	sub	local06, local11
0a554     0C A0 05 F1 | 	add	fp, #12
0a558     D0 5E 02 FB | 	rdlong	local12, fp
0a55c     2C A0 85 F1 | 	sub	fp, #44
0a560     2F 53 1A F2 | 	cmp	local06, local12 wcz
0a564     80 00 90 3D |  if_ae	jmp	#LR__0667
0a568     34 A0 05 F1 | 	add	fp, #52
0a56c     D0 4C 02 FB | 	rdlong	local03, fp
0a570     26 55 02 F6 | 	mov	local07, local03
0a574     1C A0 85 F1 | 	sub	fp, #28
0a578     D0 52 02 FB | 	rdlong	local06, fp
0a57c     29 4F 02 F6 | 	mov	local04, local06
0a580     2C 4E 06 F1 | 	add	local04, #44
0a584     27 51 02 FB | 	rdlong	local05, local04
0a588     2C 4E 86 F1 | 	sub	local04, #44
0a58c     28 57 02 F6 | 	mov	local08, local05
0a590     08 A0 05 F1 | 	add	fp, #8
0a594     D0 58 02 FB | 	rdlong	local09, fp
0a598     2C 5B 02 F6 | 	mov	local10, local09
0a59c     2D 57 82 F1 | 	sub	local08, local10
0a5a0     2B 5D 02 F6 | 	mov	local11, local08
0a5a4     09 5C 66 F0 | 	shl	local11, #9
0a5a8     2E 61 02 F6 | 	mov	local13, local11
0a5ac     2E 55 02 F1 | 	add	local07, local11
0a5b0     2A 5F 02 F6 | 	mov	local12, local07
0a5b4     08 A0 85 F1 | 	sub	fp, #8
0a5b8     D0 62 02 FB | 	rdlong	local14, fp
0a5bc     18 A0 85 F1 | 	sub	fp, #24
0a5c0     31 65 02 F6 | 	mov	local15, local14
0a5c4     30 64 06 F1 | 	add	local15, #48
0a5c8     32 67 02 F6 | 	mov	local16, local15
0a5cc     33 69 02 F6 | 	mov	local17, local16
0a5d0     09 6A C6 F9 | 	decod	local18, #9
0a5d4     2F 3F 02 F6 | 	mov	arg01, local12
0a5d8     34 41 02 F6 | 	mov	arg02, local17
0a5dc     09 42 C6 F9 | 	decod	arg03, #9
0a5e0     30 64 86 F1 | 	sub	local15, #48
0a5e4     CC CE BF FD | 	call	#_ff_cc_mem_cpy_0356
0a5e8                 | LR__0667
0a5e8     2C A0 05 F1 | 	add	fp, #44
0a5ec     D0 54 02 FB | 	rdlong	local07, fp
0a5f0     09 54 66 F0 | 	shl	local07, #9
0a5f4     04 A0 85 F1 | 	sub	fp, #4
0a5f8     D0 54 62 FC | 	wrlong	local07, fp
0a5fc     28 A0 85 F1 | 	sub	fp, #40
0a600                 | ' 					mem_cpy(rbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ), fs->win,  ((UINT) 512 ) );
0a600                 | ' 				}
0a600                 | ' #line 3949 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a600                 | ' 				rcnt =  ((UINT) 512 )  * cc;
0a600                 | ' 				continue;
0a600     E8 00 90 FD | 	jmp	#LR__0672
0a604                 | LR__0668
0a604     04 A0 05 F1 | 	add	fp, #4
0a608     D0 54 02 FB | 	rdlong	local07, fp
0a60c     1C A0 05 F1 | 	add	fp, #28
0a610     D0 56 02 FB | 	rdlong	local08, fp
0a614     20 A0 85 F1 | 	sub	fp, #32
0a618     1C 54 06 F1 | 	add	local07, #28
0a61c     2A 57 62 FC | 	wrlong	local08, local07
0a620                 | LR__0669
0a620     04 A0 05 F1 | 	add	fp, #4
0a624     D0 4C 02 FB | 	rdlong	local03, fp
0a628     14 4C 06 F1 | 	add	local03, #20
0a62c     26 4F 02 FB | 	rdlong	local04, local03
0a630     FF 4F 06 F5 | 	and	local04, #511
0a634     09 54 C6 F9 | 	decod	local07, #9
0a638     27 55 82 F1 | 	sub	local07, local04
0a63c     24 A0 05 F1 | 	add	fp, #36
0a640     D0 54 62 FC | 	wrlong	local07, fp
0a644     1C A0 85 F1 | 	sub	fp, #28
0a648     D0 56 02 FB | 	rdlong	local08, fp
0a64c     0C A0 85 F1 | 	sub	fp, #12
0a650     2B 55 1A F2 | 	cmp	local07, local08 wcz
0a654     14 00 90 ED |  if_be	jmp	#LR__0670
0a658     0C A0 05 F1 | 	add	fp, #12
0a65c     D0 54 02 FB | 	rdlong	local07, fp
0a660     1C A0 05 F1 | 	add	fp, #28
0a664     D0 54 62 FC | 	wrlong	local07, fp
0a668     28 A0 85 F1 | 	sub	fp, #40
0a66c                 | LR__0670
0a66c     18 A0 05 F1 | 	add	fp, #24
0a670     D0 3E 02 FB | 	rdlong	arg01, fp
0a674     14 A0 85 F1 | 	sub	fp, #20
0a678     D0 56 02 FB | 	rdlong	local08, fp
0a67c     04 A0 85 F1 | 	sub	fp, #4
0a680     1C 56 06 F1 | 	add	local08, #28
0a684     2B 41 02 FB | 	rdlong	arg02, local08
0a688     90 CF BF FD | 	call	#_ff_cc_move_window_0369
0a68c     00 16 0E F2 | 	cmp	result1, #0 wz
0a690     1C 00 90 AD |  if_e	jmp	#LR__0671
0a694     04 A0 05 F1 | 	add	fp, #4
0a698     D0 54 02 FB | 	rdlong	local07, fp
0a69c     04 A0 85 F1 | 	sub	fp, #4
0a6a0     11 54 06 F1 | 	add	local07, #17
0a6a4     2A 03 48 FC | 	wrbyte	#1, local07
0a6a8     01 16 06 F6 | 	mov	result1, #1
0a6ac     E8 00 90 FD | 	jmp	#LR__0674
0a6b0                 | LR__0671
0a6b0     34 A0 05 F1 | 	add	fp, #52
0a6b4     D0 3E 02 FB | 	rdlong	arg01, fp
0a6b8     1C A0 85 F1 | 	sub	fp, #28
0a6bc     D0 40 02 FB | 	rdlong	arg02, fp
0a6c0     30 40 06 F1 | 	add	arg02, #48
0a6c4     14 A0 85 F1 | 	sub	fp, #20
0a6c8     D0 5A 02 FB | 	rdlong	local10, fp
0a6cc     14 5A 06 F1 | 	add	local10, #20
0a6d0     2D 65 02 FB | 	rdlong	local15, local10
0a6d4     FF 65 06 F5 | 	and	local15, #511
0a6d8     32 41 02 F1 | 	add	arg02, local15
0a6dc     24 A0 05 F1 | 	add	fp, #36
0a6e0     D0 42 02 FB | 	rdlong	arg03, fp
0a6e4     28 A0 85 F1 | 	sub	fp, #40
0a6e8     C8 CD BF FD | 	call	#_ff_cc_mem_cpy_0356
0a6ec                 | LR__0672
0a6ec     0C A0 05 F1 | 	add	fp, #12
0a6f0     D0 54 02 FB | 	rdlong	local07, fp
0a6f4     1C A0 05 F1 | 	add	fp, #28
0a6f8     D0 4E 02 FB | 	rdlong	local04, fp
0a6fc     27 55 82 F1 | 	sub	local07, local04
0a700     1C A0 85 F1 | 	sub	fp, #28
0a704     D0 54 62 FC | 	wrlong	local07, fp
0a708     04 A0 05 F1 | 	add	fp, #4
0a70c     D0 52 02 FB | 	rdlong	local06, fp
0a710     29 5B 02 FB | 	rdlong	local10, local06
0a714     18 A0 05 F1 | 	add	fp, #24
0a718     D0 5E 02 FB | 	rdlong	local12, fp
0a71c     2F 61 02 F6 | 	mov	local13, local12
0a720     2F 5B 02 F1 | 	add	local10, local12
0a724     29 5B 62 FC | 	wrlong	local10, local06
0a728     0C A0 05 F1 | 	add	fp, #12
0a72c     D0 62 02 FB | 	rdlong	local14, fp
0a730     31 65 02 F6 | 	mov	local15, local14
0a734     0C A0 85 F1 | 	sub	fp, #12
0a738     D0 68 02 FB | 	rdlong	local17, fp
0a73c     34 67 02 F6 | 	mov	local16, local17
0a740     34 65 02 F1 | 	add	local15, local17
0a744     0C A0 05 F1 | 	add	fp, #12
0a748     D0 64 62 FC | 	wrlong	local15, fp
0a74c     30 A0 85 F1 | 	sub	fp, #48
0a750     D0 6C 02 FB | 	rdlong	local19, fp
0a754     36 6B 02 F6 | 	mov	local18, local19
0a758     36 6F 02 F6 | 	mov	local20, local19
0a75c     37 71 02 F6 | 	mov	local21, local20
0a760     14 70 06 F1 | 	add	local21, #20
0a764     38 73 02 FB | 	rdlong	local22, local21
0a768     14 70 86 F1 | 	sub	local21, #20
0a76c     39 75 02 F6 | 	mov	local23, local22
0a770     24 A0 05 F1 | 	add	fp, #36
0a774     D0 76 02 FB | 	rdlong	local24, fp
0a778     28 A0 85 F1 | 	sub	fp, #40
0a77c     3B 79 02 F6 | 	mov	local25, local24
0a780     3B 75 02 F1 | 	add	local23, local24
0a784     14 6A 06 F1 | 	add	local18, #20
0a788     35 75 62 FC | 	wrlong	local23, local18
0a78c     14 6A 86 F1 | 	sub	local18, #20
0a790     F8 FA 9F FD | 	jmp	#LR__0658
0a794                 | LR__0673
0a794                 | ' 		mem_cpy(rbuff, fs->win + fp->fptr %  ((UINT) 512 ) , rcnt);
0a794                 | ' #line 3973 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a794                 | ' 	}
0a794                 | ' 
0a794                 | ' 	return FR_OK ;
0a794     00 16 06 F6 | 	mov	result1, #0
0a798                 | LR__0674
0a798     D0 F0 03 F6 | 	mov	ptra, fp
0a79c     E0 00 A0 FD | 	call	#popregs_
0a7a0                 | _ff_cc_f_read_ret
0a7a0     2D 00 64 FD | 	ret
0a7a4                 | 
0a7a4                 | _ff_cc_f_write
0a7a4     2A 9C 05 F6 | 	mov	COUNT_, #42
0a7a8     D1 00 A0 FD | 	call	#pushregs_
0a7ac     34 F0 07 F1 | 	add	ptra, #52
0a7b0     04 A0 05 F1 | 	add	fp, #4
0a7b4     D0 3E 62 FC | 	wrlong	arg01, fp
0a7b8     04 A0 05 F1 | 	add	fp, #4
0a7bc     D0 40 62 FC | 	wrlong	arg02, fp
0a7c0     04 A0 05 F1 | 	add	fp, #4
0a7c4     D0 42 62 FC | 	wrlong	arg03, fp
0a7c8     04 A0 05 F1 | 	add	fp, #4
0a7cc     D0 44 62 FC | 	wrlong	arg04, fp
0a7d0     14 A0 05 F1 | 	add	fp, #20
0a7d4     D0 00 68 FC | 	wrlong	#0, fp
0a7d8     1C A0 85 F1 | 	sub	fp, #28
0a7dc     D0 48 02 FB | 	rdlong	local01, fp
0a7e0     28 A0 05 F1 | 	add	fp, #40
0a7e4     D0 48 62 FC | 	wrlong	local01, fp
0a7e8     20 A0 85 F1 | 	sub	fp, #32
0a7ec     D0 48 02 FB | 	rdlong	local01, fp
0a7f0     24 01 68 FC | 	wrlong	#0, local01
0a7f4     0C A0 85 F1 | 	sub	fp, #12
0a7f8     D0 3E 02 FB | 	rdlong	arg01, fp
0a7fc     14 A0 05 F1 | 	add	fp, #20
0a800     D0 40 02 F6 | 	mov	arg02, fp
0a804     18 A0 85 F1 | 	sub	fp, #24
0a808     38 F0 BF FD | 	call	#_ff_cc_validate_0467
0a80c     14 A0 05 F1 | 	add	fp, #20
0a810     D0 16 62 FC | 	wrlong	result1, fp
0a814     0B 4B 02 F6 | 	mov	local02, result1
0a818     14 A0 85 F1 | 	sub	fp, #20
0a81c     25 49 0A F6 | 	mov	local01, local02 wz
0a820     24 00 90 5D |  if_ne	jmp	#LR__0675
0a824     04 A0 05 F1 | 	add	fp, #4
0a828     D0 4C 02 FB | 	rdlong	local03, fp
0a82c     11 4C 06 F1 | 	add	local03, #17
0a830     26 4F C2 FA | 	rdbyte	local04, local03
0a834     10 A0 05 F1 | 	add	fp, #16
0a838     D0 4E 62 FC | 	wrlong	local04, fp
0a83c     14 A0 85 F1 | 	sub	fp, #20
0a840     27 51 0A F6 | 	mov	local05, local04 wz
0a844     10 00 90 AD |  if_e	jmp	#LR__0676
0a848                 | LR__0675
0a848     14 A0 05 F1 | 	add	fp, #20
0a84c     D0 16 02 FB | 	rdlong	result1, fp
0a850     14 A0 85 F1 | 	sub	fp, #20
0a854     6C 07 90 FD | 	jmp	#LR__0700
0a858                 | LR__0676
0a858     04 A0 05 F1 | 	add	fp, #4
0a85c     D0 4A 02 FB | 	rdlong	local02, fp
0a860     04 A0 85 F1 | 	sub	fp, #4
0a864     10 4A 06 F1 | 	add	local02, #16
0a868     25 49 C2 FA | 	rdbyte	local01, local02
0a86c     02 48 CE F7 | 	test	local01, #2 wz
0a870     07 16 06 A6 |  if_e	mov	result1, #7
0a874     4C 07 90 AD |  if_e	jmp	#LR__0700
0a878     04 A0 05 F1 | 	add	fp, #4
0a87c     D0 52 02 FB | 	rdlong	local06, fp
0a880     29 55 02 F6 | 	mov	local07, local06
0a884     14 54 06 F1 | 	add	local07, #20
0a888     2A 4D 02 FB | 	rdlong	local03, local07
0a88c     08 A0 05 F1 | 	add	fp, #8
0a890     D0 56 02 FB | 	rdlong	local08, fp
0a894     2B 4F 02 F6 | 	mov	local04, local08
0a898     2B 4D 02 F1 | 	add	local03, local08
0a89c     08 A0 85 F1 | 	sub	fp, #8
0a8a0     D0 58 02 FB | 	rdlong	local09, fp
0a8a4     04 A0 85 F1 | 	sub	fp, #4
0a8a8     2C 5B 02 F6 | 	mov	local10, local09
0a8ac     14 5A 06 F1 | 	add	local10, #20
0a8b0     2D 5D 02 FB | 	rdlong	local11, local10
0a8b4     14 5A 86 F1 | 	sub	local10, #20
0a8b8     2E 5F 02 F6 | 	mov	local12, local11
0a8bc     2F 4D 1A F2 | 	cmp	local03, local12 wcz
0a8c0     24 00 90 3D |  if_ae	jmp	#LR__0677
0a8c4     04 A0 05 F1 | 	add	fp, #4
0a8c8     D0 4A 02 FB | 	rdlong	local02, fp
0a8cc     01 48 66 F6 | 	neg	local01, #1
0a8d0     14 4A 06 F1 | 	add	local02, #20
0a8d4     25 4D 02 FB | 	rdlong	local03, local02
0a8d8     26 49 82 F1 | 	sub	local01, local03
0a8dc     08 A0 05 F1 | 	add	fp, #8
0a8e0     D0 48 62 FC | 	wrlong	local01, fp
0a8e4     0C A0 85 F1 | 	sub	fp, #12
0a8e8                 | LR__0677
0a8e8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
0a8e8                 | ' 	}
0a8e8                 | ' 
0a8e8                 | ' 	for ( ; btw;
0a8e8                 | LR__0678
0a8e8     0C A0 05 F1 | 	add	fp, #12
0a8ec     D0 4A 02 FB | 	rdlong	local02, fp
0a8f0     0C A0 85 F1 | 	sub	fp, #12
0a8f4     25 49 0A F6 | 	mov	local01, local02 wz
0a8f8     A0 06 90 AD |  if_e	jmp	#LR__0699
0a8fc     04 A0 05 F1 | 	add	fp, #4
0a900     D0 60 02 FB | 	rdlong	local13, fp
0a904     04 A0 85 F1 | 	sub	fp, #4
0a908     14 60 06 F1 | 	add	local13, #20
0a90c     30 55 02 FB | 	rdlong	local07, local13
0a910     FF 55 CE F7 | 	test	local07, #511 wz
0a914     64 04 90 5D |  if_ne	jmp	#LR__0693
0a918     04 A0 05 F1 | 	add	fp, #4
0a91c     D0 4C 02 FB | 	rdlong	local03, fp
0a920     14 4C 06 F1 | 	add	local03, #20
0a924     26 61 02 FB | 	rdlong	local13, local03
0a928     09 60 46 F0 | 	shr	local13, #9
0a92c     14 A0 05 F1 | 	add	fp, #20
0a930     D0 56 02 FB | 	rdlong	local08, fp
0a934     0A 56 06 F1 | 	add	local08, #10
0a938     2B 59 E2 FA | 	rdword	local09, local08
0a93c     2C 4F 02 F6 | 	mov	local04, local09
0a940     0F 4E 46 F7 | 	zerox	local04, #15
0a944     01 4E 86 F1 | 	sub	local04, #1
0a948     27 61 02 F5 | 	and	local13, local04
0a94c     14 A0 05 F1 | 	add	fp, #20
0a950     D0 60 62 FC | 	wrlong	local13, fp
0a954     D0 60 0A FB | 	rdlong	local13, fp wz
0a958     2C A0 85 F1 | 	sub	fp, #44
0a95c     4C 01 90 5D |  if_ne	jmp	#LR__0684
0a960     04 A0 05 F1 | 	add	fp, #4
0a964     D0 60 02 FB | 	rdlong	local13, fp
0a968     04 A0 85 F1 | 	sub	fp, #4
0a96c     14 60 06 F1 | 	add	local13, #20
0a970     30 55 0A FB | 	rdlong	local07, local13 wz
0a974     48 00 90 5D |  if_ne	jmp	#LR__0679
0a978     04 A0 05 F1 | 	add	fp, #4
0a97c     D0 60 02 FB | 	rdlong	local13, fp
0a980     08 60 06 F1 | 	add	local13, #8
0a984     30 55 02 FB | 	rdlong	local07, local13
0a988     18 A0 05 F1 | 	add	fp, #24
0a98c     D0 54 62 FC | 	wrlong	local07, fp
0a990     D0 60 0A FB | 	rdlong	local13, fp wz
0a994     1C A0 85 F1 | 	sub	fp, #28
0a998     50 00 90 5D |  if_ne	jmp	#LR__0680
0a99c     04 A0 05 F1 | 	add	fp, #4
0a9a0     D0 3E 02 FB | 	rdlong	arg01, fp
0a9a4     04 A0 85 F1 | 	sub	fp, #4
0a9a8     00 40 06 F6 | 	mov	arg02, #0
0a9ac     84 D4 BF FD | 	call	#_ff_cc_create_chain_0391
0a9b0     1C A0 05 F1 | 	add	fp, #28
0a9b4     D0 16 62 FC | 	wrlong	result1, fp
0a9b8     1C A0 85 F1 | 	sub	fp, #28
0a9bc     2C 00 90 FD | 	jmp	#LR__0680
0a9c0                 | LR__0679
0a9c0     04 A0 05 F1 | 	add	fp, #4
0a9c4     D0 3E 02 FB | 	rdlong	arg01, fp
0a9c8     1F 51 02 F6 | 	mov	local05, arg01
0a9cc     04 A0 85 F1 | 	sub	fp, #4
0a9d0     18 50 06 F1 | 	add	local05, #24
0a9d4     28 41 02 FB | 	rdlong	arg02, local05
0a9d8     58 D4 BF FD | 	call	#_ff_cc_create_chain_0391
0a9dc     0B 59 02 F6 | 	mov	local09, result1
0a9e0     1C A0 05 F1 | 	add	fp, #28
0a9e4     D0 58 62 FC | 	wrlong	local09, fp
0a9e8     1C A0 85 F1 | 	sub	fp, #28
0a9ec                 | LR__0680
0a9ec     1C A0 05 F1 | 	add	fp, #28
0a9f0     D0 60 0A FB | 	rdlong	local13, fp wz
0a9f4     1C A0 85 F1 | 	sub	fp, #28
0a9f8     A0 05 90 AD |  if_e	jmp	#LR__0699
0a9fc     1C A0 05 F1 | 	add	fp, #28
0aa00     D0 60 02 FB | 	rdlong	local13, fp
0aa04     1C A0 85 F1 | 	sub	fp, #28
0aa08     01 60 0E F2 | 	cmp	local13, #1 wz
0aa0c     1C 00 90 5D |  if_ne	jmp	#LR__0681
0aa10     04 A0 05 F1 | 	add	fp, #4
0aa14     D0 60 02 FB | 	rdlong	local13, fp
0aa18     04 A0 85 F1 | 	sub	fp, #4
0aa1c     11 60 06 F1 | 	add	local13, #17
0aa20     30 05 48 FC | 	wrbyte	#2, local13
0aa24     02 16 06 F6 | 	mov	result1, #2
0aa28     98 05 90 FD | 	jmp	#LR__0700
0aa2c                 | LR__0681
0aa2c     1C A0 05 F1 | 	add	fp, #28
0aa30     D0 60 02 FB | 	rdlong	local13, fp
0aa34     1C A0 85 F1 | 	sub	fp, #28
0aa38     FF FF 7F FF 
0aa3c     FF 61 0E F2 | 	cmp	local13, ##-1 wz
0aa40     1C 00 90 5D |  if_ne	jmp	#LR__0682
0aa44     04 A0 05 F1 | 	add	fp, #4
0aa48     D0 60 02 FB | 	rdlong	local13, fp
0aa4c     04 A0 85 F1 | 	sub	fp, #4
0aa50     11 60 06 F1 | 	add	local13, #17
0aa54     30 03 48 FC | 	wrbyte	#1, local13
0aa58     01 16 06 F6 | 	mov	result1, #1
0aa5c     64 05 90 FD | 	jmp	#LR__0700
0aa60                 | LR__0682
0aa60     04 A0 05 F1 | 	add	fp, #4
0aa64     D0 60 02 FB | 	rdlong	local13, fp
0aa68     18 A0 05 F1 | 	add	fp, #24
0aa6c     D0 54 02 FB | 	rdlong	local07, fp
0aa70     18 60 06 F1 | 	add	local13, #24
0aa74     30 55 62 FC | 	wrlong	local07, local13
0aa78     18 A0 85 F1 | 	sub	fp, #24
0aa7c     D0 60 02 FB | 	rdlong	local13, fp
0aa80     04 A0 85 F1 | 	sub	fp, #4
0aa84     08 60 06 F1 | 	add	local13, #8
0aa88     30 55 0A FB | 	rdlong	local07, local13 wz
0aa8c     1C 00 90 5D |  if_ne	jmp	#LR__0683
0aa90     04 A0 05 F1 | 	add	fp, #4
0aa94     D0 60 02 FB | 	rdlong	local13, fp
0aa98     18 A0 05 F1 | 	add	fp, #24
0aa9c     D0 54 02 FB | 	rdlong	local07, fp
0aaa0     1C A0 85 F1 | 	sub	fp, #28
0aaa4     08 60 06 F1 | 	add	local13, #8
0aaa8     30 55 62 FC | 	wrlong	local07, local13
0aaac                 | LR__0683
0aaac                 | LR__0684
0aaac     18 A0 05 F1 | 	add	fp, #24
0aab0     D0 60 02 FB | 	rdlong	local13, fp
0aab4     14 A0 85 F1 | 	sub	fp, #20
0aab8     D0 54 02 FB | 	rdlong	local07, fp
0aabc     04 A0 85 F1 | 	sub	fp, #4
0aac0     2C 60 06 F1 | 	add	local13, #44
0aac4     30 51 02 FB | 	rdlong	local05, local13
0aac8     1C 54 06 F1 | 	add	local07, #28
0aacc     2A 57 02 FB | 	rdlong	local08, local07
0aad0     2B 51 0A F2 | 	cmp	local05, local08 wz
0aad4     34 00 90 5D |  if_ne	jmp	#LR__0685
0aad8     18 A0 05 F1 | 	add	fp, #24
0aadc     D0 3E 02 FB | 	rdlong	arg01, fp
0aae0     18 A0 85 F1 | 	sub	fp, #24
0aae4     5C CA BF FD | 	call	#_ff_cc_sync_window_0367
0aae8     00 16 0E F2 | 	cmp	result1, #0 wz
0aaec     1C 00 90 AD |  if_e	jmp	#LR__0685
0aaf0     04 A0 05 F1 | 	add	fp, #4
0aaf4     D0 60 02 FB | 	rdlong	local13, fp
0aaf8     04 A0 85 F1 | 	sub	fp, #4
0aafc     11 60 06 F1 | 	add	local13, #17
0ab00     30 03 48 FC | 	wrbyte	#1, local13
0ab04     01 16 06 F6 | 	mov	result1, #1
0ab08     B8 04 90 FD | 	jmp	#LR__0700
0ab0c                 | LR__0685
0ab0c     18 A0 05 F1 | 	add	fp, #24
0ab10     D0 3E 02 FB | 	rdlong	arg01, fp
0ab14     14 A0 85 F1 | 	sub	fp, #20
0ab18     D0 54 02 FB | 	rdlong	local07, fp
0ab1c     04 A0 85 F1 | 	sub	fp, #4
0ab20     18 54 06 F1 | 	add	local07, #24
0ab24     2A 41 02 FB | 	rdlong	arg02, local07
0ab28     E8 CC BF FD | 	call	#_ff_cc_clst2sect_0372
0ab2c     20 A0 05 F1 | 	add	fp, #32
0ab30     D0 16 62 FC | 	wrlong	result1, fp
0ab34     D0 60 0A FB | 	rdlong	local13, fp wz
0ab38     20 A0 85 F1 | 	sub	fp, #32
0ab3c     1C 00 90 5D |  if_ne	jmp	#LR__0686
0ab40     04 A0 05 F1 | 	add	fp, #4
0ab44     D0 60 02 FB | 	rdlong	local13, fp
0ab48     04 A0 85 F1 | 	sub	fp, #4
0ab4c     11 60 06 F1 | 	add	local13, #17
0ab50     30 05 48 FC | 	wrbyte	#2, local13
0ab54     02 16 06 F6 | 	mov	result1, #2
0ab58     68 04 90 FD | 	jmp	#LR__0700
0ab5c                 | LR__0686
0ab5c     20 A0 05 F1 | 	add	fp, #32
0ab60     D0 60 02 FB | 	rdlong	local13, fp
0ab64     0C A0 05 F1 | 	add	fp, #12
0ab68     D0 54 02 FB | 	rdlong	local07, fp
0ab6c     2A 61 02 F1 | 	add	local13, local07
0ab70     0C A0 85 F1 | 	sub	fp, #12
0ab74     D0 60 62 FC | 	wrlong	local13, fp
0ab78     14 A0 85 F1 | 	sub	fp, #20
0ab7c     D0 60 02 FB | 	rdlong	local13, fp
0ab80     09 60 46 F0 | 	shr	local13, #9
0ab84     1C A0 05 F1 | 	add	fp, #28
0ab88     D0 60 62 FC | 	wrlong	local13, fp
0ab8c     28 A0 85 F1 | 	sub	fp, #40
0ab90     00 60 1E F2 | 	cmp	local13, #0 wcz
0ab94     50 01 90 ED |  if_be	jmp	#LR__0690
0ab98     2C A0 05 F1 | 	add	fp, #44
0ab9c     D0 60 02 FB | 	rdlong	local13, fp
0aba0     04 A0 85 F1 | 	sub	fp, #4
0aba4     D0 54 02 FB | 	rdlong	local07, fp
0aba8     2A 61 02 F1 | 	add	local13, local07
0abac     10 A0 85 F1 | 	sub	fp, #16
0abb0     D0 4E 02 FB | 	rdlong	local04, fp
0abb4     18 A0 85 F1 | 	sub	fp, #24
0abb8     0A 4E 06 F1 | 	add	local04, #10
0abbc     27 51 E2 FA | 	rdword	local05, local04
0abc0     28 61 1A F2 | 	cmp	local13, local05 wcz
0abc4     28 00 90 ED |  if_be	jmp	#LR__0687
0abc8     18 A0 05 F1 | 	add	fp, #24
0abcc     D0 4C 02 FB | 	rdlong	local03, fp
0abd0     0A 4C 06 F1 | 	add	local03, #10
0abd4     26 61 E2 FA | 	rdword	local13, local03
0abd8     14 A0 05 F1 | 	add	fp, #20
0abdc     D0 50 02 FB | 	rdlong	local05, fp
0abe0     28 61 82 F1 | 	sub	local13, local05
0abe4     04 A0 85 F1 | 	sub	fp, #4
0abe8     D0 60 62 FC | 	wrlong	local13, fp
0abec     28 A0 85 F1 | 	sub	fp, #40
0abf0                 | LR__0687
0abf0     18 A0 05 F1 | 	add	fp, #24
0abf4     D0 60 02 FB | 	rdlong	local13, fp
0abf8     01 60 06 F1 | 	add	local13, #1
0abfc     30 3F C2 FA | 	rdbyte	arg01, local13
0ac00     18 A0 05 F1 | 	add	fp, #24
0ac04     D0 40 02 FB | 	rdlong	arg02, fp
0ac08     10 A0 85 F1 | 	sub	fp, #16
0ac0c     D0 42 02 FB | 	rdlong	arg03, fp
0ac10     08 A0 05 F1 | 	add	fp, #8
0ac14     D0 44 02 FB | 	rdlong	arg04, fp
0ac18     28 A0 85 F1 | 	sub	fp, #40
0ac1c     28 C4 BF FD | 	call	#_ff_cc_disk_write
0ac20     00 16 0E F2 | 	cmp	result1, #0 wz
0ac24     1C 00 90 AD |  if_e	jmp	#LR__0688
0ac28     04 A0 05 F1 | 	add	fp, #4
0ac2c     D0 60 02 FB | 	rdlong	local13, fp
0ac30     04 A0 85 F1 | 	sub	fp, #4
0ac34     11 60 06 F1 | 	add	local13, #17
0ac38     30 03 48 FC | 	wrbyte	#1, local13
0ac3c     01 16 06 F6 | 	mov	result1, #1
0ac40     80 03 90 FD | 	jmp	#LR__0700
0ac44                 | LR__0688
0ac44     18 A0 05 F1 | 	add	fp, #24
0ac48     D0 4C 02 FB | 	rdlong	local03, fp
0ac4c     2C 4C 06 F1 | 	add	local03, #44
0ac50     26 61 02 FB | 	rdlong	local13, local03
0ac54     08 A0 05 F1 | 	add	fp, #8
0ac58     D0 50 02 FB | 	rdlong	local05, fp
0ac5c     28 61 82 F1 | 	sub	local13, local05
0ac60     08 A0 05 F1 | 	add	fp, #8
0ac64     D0 56 02 FB | 	rdlong	local08, fp
0ac68     28 A0 85 F1 | 	sub	fp, #40
0ac6c     2B 61 1A F2 | 	cmp	local13, local08 wcz
0ac70     58 00 90 3D |  if_ae	jmp	#LR__0689
0ac74     18 A0 05 F1 | 	add	fp, #24
0ac78     D0 3E 02 FB | 	rdlong	arg01, fp
0ac7c     30 3E 06 F1 | 	add	arg01, #48
0ac80     18 A0 05 F1 | 	add	fp, #24
0ac84     D0 40 02 FB | 	rdlong	arg02, fp
0ac88     18 A0 85 F1 | 	sub	fp, #24
0ac8c     D0 5A 02 FB | 	rdlong	local10, fp
0ac90     2C 5A 06 F1 | 	add	local10, #44
0ac94     2D 63 02 FB | 	rdlong	local14, local10
0ac98     08 A0 05 F1 | 	add	fp, #8
0ac9c     D0 5C 02 FB | 	rdlong	local11, fp
0aca0     20 A0 85 F1 | 	sub	fp, #32
0aca4     2E 63 82 F1 | 	sub	local14, local11
0aca8     09 62 66 F0 | 	shl	local14, #9
0acac     31 41 02 F1 | 	add	arg02, local14
0acb0     09 42 C6 F9 | 	decod	arg03, #9
0acb4     FC C7 BF FD | 	call	#_ff_cc_mem_cpy_0356
0acb8     18 A0 05 F1 | 	add	fp, #24
0acbc     D0 60 02 FB | 	rdlong	local13, fp
0acc0     18 A0 85 F1 | 	sub	fp, #24
0acc4     03 60 06 F1 | 	add	local13, #3
0acc8     30 01 48 FC | 	wrbyte	#0, local13
0accc                 | LR__0689
0accc     28 A0 05 F1 | 	add	fp, #40
0acd0     D0 60 02 FB | 	rdlong	local13, fp
0acd4     09 60 66 F0 | 	shl	local13, #9
0acd8     04 A0 85 F1 | 	sub	fp, #4
0acdc     D0 60 62 FC | 	wrlong	local13, fp
0ace0     24 A0 85 F1 | 	sub	fp, #36
0ace4                 | ' 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ),  ((UINT) 512 ) );
0ace4                 | ' 					fs->wflag = 0;
0ace4                 | ' 				}
0ace4                 | ' #line 4067 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0ace4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
0ace4                 | ' 				continue;
0ace4     74 01 90 FD | 	jmp	#LR__0696
0ace8                 | LR__0690
0ace8     04 A0 05 F1 | 	add	fp, #4
0acec     D0 60 02 FB | 	rdlong	local13, fp
0acf0     30 55 02 F6 | 	mov	local07, local13
0acf4     04 A0 85 F1 | 	sub	fp, #4
0acf8     14 60 06 F1 | 	add	local13, #20
0acfc     30 51 02 FB | 	rdlong	local05, local13
0ad00     0C 54 06 F1 | 	add	local07, #12
0ad04     2A 57 02 FB | 	rdlong	local08, local07
0ad08     2B 51 1A F2 | 	cmp	local05, local08 wcz
0ad0c     50 00 90 CD |  if_b	jmp	#LR__0692
0ad10     18 A0 05 F1 | 	add	fp, #24
0ad14     D0 3E 02 FB | 	rdlong	arg01, fp
0ad18     18 A0 85 F1 | 	sub	fp, #24
0ad1c     24 C8 BF FD | 	call	#_ff_cc_sync_window_0367
0ad20     00 16 0E F2 | 	cmp	result1, #0 wz
0ad24     1C 00 90 AD |  if_e	jmp	#LR__0691
0ad28     04 A0 05 F1 | 	add	fp, #4
0ad2c     D0 60 02 FB | 	rdlong	local13, fp
0ad30     04 A0 85 F1 | 	sub	fp, #4
0ad34     11 60 06 F1 | 	add	local13, #17
0ad38     30 03 48 FC | 	wrbyte	#1, local13
0ad3c     01 16 06 F6 | 	mov	result1, #1
0ad40     80 02 90 FD | 	jmp	#LR__0700
0ad44                 | LR__0691
0ad44     18 A0 05 F1 | 	add	fp, #24
0ad48     D0 60 02 FB | 	rdlong	local13, fp
0ad4c     08 A0 05 F1 | 	add	fp, #8
0ad50     D0 54 02 FB | 	rdlong	local07, fp
0ad54     20 A0 85 F1 | 	sub	fp, #32
0ad58     2C 60 06 F1 | 	add	local13, #44
0ad5c     30 55 62 FC | 	wrlong	local07, local13
0ad60                 | LR__0692
0ad60     04 A0 05 F1 | 	add	fp, #4
0ad64     D0 60 02 FB | 	rdlong	local13, fp
0ad68     1C A0 05 F1 | 	add	fp, #28
0ad6c     D0 54 02 FB | 	rdlong	local07, fp
0ad70     20 A0 85 F1 | 	sub	fp, #32
0ad74     1C 60 06 F1 | 	add	local13, #28
0ad78     30 55 62 FC | 	wrlong	local07, local13
0ad7c                 | LR__0693
0ad7c     04 A0 05 F1 | 	add	fp, #4
0ad80     D0 4C 02 FB | 	rdlong	local03, fp
0ad84     14 4C 06 F1 | 	add	local03, #20
0ad88     26 53 02 FB | 	rdlong	local06, local03
0ad8c     FF 53 06 F5 | 	and	local06, #511
0ad90     09 60 C6 F9 | 	decod	local13, #9
0ad94     29 61 82 F1 | 	sub	local13, local06
0ad98     20 A0 05 F1 | 	add	fp, #32
0ad9c     D0 60 62 FC | 	wrlong	local13, fp
0ada0     18 A0 85 F1 | 	sub	fp, #24
0ada4     D0 54 02 FB | 	rdlong	local07, fp
0ada8     0C A0 85 F1 | 	sub	fp, #12
0adac     2A 61 1A F2 | 	cmp	local13, local07 wcz
0adb0     14 00 90 ED |  if_be	jmp	#LR__0694
0adb4     0C A0 05 F1 | 	add	fp, #12
0adb8     D0 60 02 FB | 	rdlong	local13, fp
0adbc     18 A0 05 F1 | 	add	fp, #24
0adc0     D0 60 62 FC | 	wrlong	local13, fp
0adc4     24 A0 85 F1 | 	sub	fp, #36
0adc8                 | LR__0694
0adc8     18 A0 05 F1 | 	add	fp, #24
0adcc     D0 3E 02 FB | 	rdlong	arg01, fp
0add0     14 A0 85 F1 | 	sub	fp, #20
0add4     D0 54 02 FB | 	rdlong	local07, fp
0add8     04 A0 85 F1 | 	sub	fp, #4
0addc     1C 54 06 F1 | 	add	local07, #28
0ade0     2A 41 02 FB | 	rdlong	arg02, local07
0ade4     34 C8 BF FD | 	call	#_ff_cc_move_window_0369
0ade8     00 16 0E F2 | 	cmp	result1, #0 wz
0adec     1C 00 90 AD |  if_e	jmp	#LR__0695
0adf0     04 A0 05 F1 | 	add	fp, #4
0adf4     D0 60 02 FB | 	rdlong	local13, fp
0adf8     04 A0 85 F1 | 	sub	fp, #4
0adfc     11 60 06 F1 | 	add	local13, #17
0ae00     30 03 48 FC | 	wrbyte	#1, local13
0ae04     01 16 06 F6 | 	mov	result1, #1
0ae08     B8 01 90 FD | 	jmp	#LR__0700
0ae0c                 | LR__0695
0ae0c     18 A0 05 F1 | 	add	fp, #24
0ae10     D0 3E 02 FB | 	rdlong	arg01, fp
0ae14     30 3E 06 F1 | 	add	arg01, #48
0ae18     14 A0 85 F1 | 	sub	fp, #20
0ae1c     D0 50 02 FB | 	rdlong	local05, fp
0ae20     14 50 06 F1 | 	add	local05, #20
0ae24     28 5F 02 FB | 	rdlong	local12, local05
0ae28     FF 5F 06 F5 | 	and	local12, #511
0ae2c     2F 3F 02 F1 | 	add	arg01, local12
0ae30     2C A0 05 F1 | 	add	fp, #44
0ae34     D0 40 02 FB | 	rdlong	arg02, fp
0ae38     0C A0 85 F1 | 	sub	fp, #12
0ae3c     D0 42 02 FB | 	rdlong	arg03, fp
0ae40     24 A0 85 F1 | 	sub	fp, #36
0ae44     6C C6 BF FD | 	call	#_ff_cc_mem_cpy_0356
0ae48     18 A0 05 F1 | 	add	fp, #24
0ae4c     D0 60 02 FB | 	rdlong	local13, fp
0ae50     18 A0 85 F1 | 	sub	fp, #24
0ae54     03 60 06 F1 | 	add	local13, #3
0ae58     30 03 48 FC | 	wrbyte	#1, local13
0ae5c                 | LR__0696
0ae5c     0C A0 05 F1 | 	add	fp, #12
0ae60     D0 60 02 FB | 	rdlong	local13, fp
0ae64     18 A0 05 F1 | 	add	fp, #24
0ae68     D0 52 02 FB | 	rdlong	local06, fp
0ae6c     29 61 82 F1 | 	sub	local13, local06
0ae70     18 A0 85 F1 | 	sub	fp, #24
0ae74     D0 60 62 FC | 	wrlong	local13, fp
0ae78     04 A0 05 F1 | 	add	fp, #4
0ae7c     D0 50 02 FB | 	rdlong	local05, fp
0ae80     28 5B 02 F6 | 	mov	local10, local05
0ae84     2D 57 02 FB | 	rdlong	local08, local10
0ae88     14 A0 05 F1 | 	add	fp, #20
0ae8c     D0 5C 02 FB | 	rdlong	local11, fp
0ae90     2E 5F 02 F6 | 	mov	local12, local11
0ae94     2E 57 02 F1 | 	add	local08, local11
0ae98     28 57 62 FC | 	wrlong	local08, local05
0ae9c     0C A0 05 F1 | 	add	fp, #12
0aea0     D0 64 02 FB | 	rdlong	local15, fp
0aea4     32 67 02 F6 | 	mov	local16, local15
0aea8     0C A0 85 F1 | 	sub	fp, #12
0aeac     D0 68 02 FB | 	rdlong	local17, fp
0aeb0     34 63 02 F6 | 	mov	local14, local17
0aeb4     34 67 02 F1 | 	add	local16, local17
0aeb8     0C A0 05 F1 | 	add	fp, #12
0aebc     D0 66 62 FC | 	wrlong	local16, fp
0aec0     2C A0 85 F1 | 	sub	fp, #44
0aec4     D0 6A 02 FB | 	rdlong	local18, fp
0aec8     35 6D 02 F6 | 	mov	local19, local18
0aecc     35 6F 02 F6 | 	mov	local20, local18
0aed0     37 71 02 F6 | 	mov	local21, local20
0aed4     14 70 06 F1 | 	add	local21, #20
0aed8     38 73 02 FB | 	rdlong	local22, local21
0aedc     14 70 86 F1 | 	sub	local21, #20
0aee0     39 75 02 F6 | 	mov	local23, local22
0aee4     20 A0 05 F1 | 	add	fp, #32
0aee8     D0 76 02 FB | 	rdlong	local24, fp
0aeec     3B 79 02 F6 | 	mov	local25, local24
0aef0     3B 75 02 F1 | 	add	local23, local24
0aef4     14 6C 06 F1 | 	add	local19, #20
0aef8     36 75 62 FC | 	wrlong	local23, local19
0aefc     14 6C 86 F1 | 	sub	local19, #20
0af00     20 A0 85 F1 | 	sub	fp, #32
0af04     D0 7A 02 FB | 	rdlong	local26, fp
0af08     3D 7D 02 F6 | 	mov	local27, local26
0af0c     3D 7F 02 F6 | 	mov	local28, local26
0af10     3F 81 02 F6 | 	mov	local29, local28
0af14     3D 83 02 F6 | 	mov	local30, local26
0af18     04 A0 85 F1 | 	sub	fp, #4
0af1c     41 85 02 F6 | 	mov	local31, local30
0af20     14 80 06 F1 | 	add	local29, #20
0af24     40 87 02 FB | 	rdlong	local32, local29
0af28     14 80 86 F1 | 	sub	local29, #20
0af2c     43 89 02 F6 | 	mov	local33, local32
0af30     0C 84 06 F1 | 	add	local31, #12
0af34     42 8B 02 FB | 	rdlong	local34, local31
0af38     0C 84 86 F1 | 	sub	local31, #12
0af3c     45 8D 02 F6 | 	mov	local35, local34
0af40     46 89 1A F2 | 	cmp	local33, local35 wcz
0af44     24 00 90 ED |  if_be	jmp	#LR__0697
0af48     04 A0 05 F1 | 	add	fp, #4
0af4c     D0 8E 02 FB | 	rdlong	local36, fp
0af50     04 A0 85 F1 | 	sub	fp, #4
0af54     47 91 02 F6 | 	mov	local37, local36
0af58     14 90 06 F1 | 	add	local37, #20
0af5c     48 93 02 FB | 	rdlong	local38, local37
0af60     14 90 86 F1 | 	sub	local37, #20
0af64     49 95 02 F6 | 	mov	local39, local38
0af68     20 00 90 FD | 	jmp	#LR__0698
0af6c                 | LR__0697
0af6c     04 A0 05 F1 | 	add	fp, #4
0af70     D0 96 02 FB | 	rdlong	local40, fp
0af74     04 A0 85 F1 | 	sub	fp, #4
0af78     4B 99 02 F6 | 	mov	local41, local40
0af7c     0C 98 06 F1 | 	add	local41, #12
0af80     4C 9B 02 FB | 	rdlong	local42, local41
0af84     0C 98 86 F1 | 	sub	local41, #12
0af88     4D 95 02 F6 | 	mov	local39, local42
0af8c                 | LR__0698
0af8c     0C 7C 06 F1 | 	add	local27, #12
0af90     3E 95 62 FC | 	wrlong	local39, local27
0af94     0C 7C 86 F1 | 	sub	local27, #12
0af98     4C F9 9F FD | 	jmp	#LR__0678
0af9c                 | LR__0699
0af9c     04 A0 05 F1 | 	add	fp, #4
0afa0     D0 48 02 FB | 	rdlong	local01, fp
0afa4     24 4D 02 F6 | 	mov	local03, local01
0afa8     04 A0 85 F1 | 	sub	fp, #4
0afac     10 4C 06 F1 | 	add	local03, #16
0afb0     26 61 C2 FA | 	rdbyte	local13, local03
0afb4     40 60 46 F5 | 	or	local13, #64
0afb8     10 48 06 F1 | 	add	local01, #16
0afbc     24 61 42 FC | 	wrbyte	local13, local01
0afc0                 | ' 		mem_cpy(fs->win + fp->fptr %  ((UINT) 512 ) , wbuff, wcnt);
0afc0                 | ' 		fs->wflag = 1;
0afc0                 | ' #line 4094 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0afc0                 | ' 	}
0afc0                 | ' 
0afc0                 | ' 	fp->flag |=  0x40 ;
0afc0                 | ' 
0afc0                 | ' 	return FR_OK ;
0afc0     00 16 06 F6 | 	mov	result1, #0
0afc4                 | LR__0700
0afc4     D0 F0 03 F6 | 	mov	ptra, fp
0afc8     E0 00 A0 FD | 	call	#popregs_
0afcc                 | _ff_cc_f_write_ret
0afcc     2D 00 64 FD | 	ret
0afd0                 | 
0afd0                 | _ff_cc_f_sync
0afd0     06 9C 05 F6 | 	mov	COUNT_, #6
0afd4     D1 00 A0 FD | 	call	#pushregs_
0afd8     18 F0 07 F1 | 	add	ptra, #24
0afdc     04 A0 05 F1 | 	add	fp, #4
0afe0     D0 3E 62 FC | 	wrlong	arg01, fp
0afe4     08 A0 05 F1 | 	add	fp, #8
0afe8     D0 40 02 F6 | 	mov	arg02, fp
0afec     0C A0 85 F1 | 	sub	fp, #12
0aff0     50 E8 BF FD | 	call	#_ff_cc_validate_0467
0aff4     0B 49 02 F6 | 	mov	local01, result1
0aff8     08 A0 05 F1 | 	add	fp, #8
0affc     D0 48 62 FC | 	wrlong	local01, fp
0b000     D0 4A 0A FB | 	rdlong	local02, fp wz
0b004     08 A0 85 F1 | 	sub	fp, #8
0b008     58 01 90 5D |  if_ne	jmp	#LR__0703
0b00c     04 A0 05 F1 | 	add	fp, #4
0b010     D0 4C 02 FB | 	rdlong	local03, fp
0b014     04 A0 85 F1 | 	sub	fp, #4
0b018     10 4C 06 F1 | 	add	local03, #16
0b01c     26 4B C2 FA | 	rdbyte	local02, local03
0b020     40 4A CE F7 | 	test	local02, #64 wz
0b024     3C 01 90 AD |  if_e	jmp	#LR__0702
0b028     10 A0 05 F1 | 	add	fp, #16
0b02c     80 10 A7 FF 
0b030     D0 00 68 FC | 	wrlong	##1310785536, fp
0b034     04 A0 85 F1 | 	sub	fp, #4
0b038     D0 3E 02 FB | 	rdlong	arg01, fp
0b03c     08 A0 85 F1 | 	sub	fp, #8
0b040     D0 4E 02 FB | 	rdlong	local04, fp
0b044     04 A0 85 F1 | 	sub	fp, #4
0b048     20 4E 06 F1 | 	add	local04, #32
0b04c     27 41 02 FB | 	rdlong	arg02, local04
0b050     C8 C5 BF FD | 	call	#_ff_cc_move_window_0369
0b054     08 A0 05 F1 | 	add	fp, #8
0b058     D0 16 62 FC | 	wrlong	result1, fp
0b05c     D0 4A 0A FB | 	rdlong	local02, fp wz
0b060     08 A0 85 F1 | 	sub	fp, #8
0b064     FC 00 90 5D |  if_ne	jmp	#LR__0701
0b068     04 A0 05 F1 | 	add	fp, #4
0b06c     D0 4A 02 FB | 	rdlong	local02, fp
0b070     24 4A 06 F1 | 	add	local02, #36
0b074     25 4B 02 FB | 	rdlong	local02, local02
0b078     10 A0 05 F1 | 	add	fp, #16
0b07c     D0 4A 62 FC | 	wrlong	local02, fp
0b080     25 51 02 F6 | 	mov	local05, local02
0b084     0B 50 06 F1 | 	add	local05, #11
0b088     28 4F C2 FA | 	rdbyte	local04, local05
0b08c     20 4E 46 F5 | 	or	local04, #32
0b090     0B 4A 06 F1 | 	add	local02, #11
0b094     25 4F 42 FC | 	wrbyte	local04, local02
0b098     10 A0 85 F1 | 	sub	fp, #16
0b09c     D0 4A 02 FB | 	rdlong	local02, fp
0b0a0     25 3F 02 FB | 	rdlong	arg01, local02
0b0a4     10 A0 05 F1 | 	add	fp, #16
0b0a8     D0 40 02 FB | 	rdlong	arg02, fp
0b0ac     10 A0 85 F1 | 	sub	fp, #16
0b0b0     D0 52 02 FB | 	rdlong	local06, fp
0b0b4     04 A0 85 F1 | 	sub	fp, #4
0b0b8     08 52 06 F1 | 	add	local06, #8
0b0bc     29 43 02 FB | 	rdlong	arg03, local06
0b0c0     2C D5 BF FD | 	call	#_ff_cc_st_clust_0411
0b0c4     14 A0 05 F1 | 	add	fp, #20
0b0c8     D0 3E 02 FB | 	rdlong	arg01, fp
0b0cc     1C 3E 06 F1 | 	add	arg01, #28
0b0d0     10 A0 85 F1 | 	sub	fp, #16
0b0d4     D0 50 02 FB | 	rdlong	local05, fp
0b0d8     04 A0 85 F1 | 	sub	fp, #4
0b0dc     0C 50 06 F1 | 	add	local05, #12
0b0e0     28 41 02 FB | 	rdlong	arg02, local05
0b0e4     A0 C3 BF FD | 	call	#_ff_cc_st_dword_0353
0b0e8     14 A0 05 F1 | 	add	fp, #20
0b0ec     D0 3E 02 FB | 	rdlong	arg01, fp
0b0f0     16 3E 06 F1 | 	add	arg01, #22
0b0f4     04 A0 85 F1 | 	sub	fp, #4
0b0f8     D0 40 02 FB | 	rdlong	arg02, fp
0b0fc     10 A0 85 F1 | 	sub	fp, #16
0b100     84 C3 BF FD | 	call	#_ff_cc_st_dword_0353
0b104     14 A0 05 F1 | 	add	fp, #20
0b108     D0 3E 02 FB | 	rdlong	arg01, fp
0b10c     14 A0 85 F1 | 	sub	fp, #20
0b110     12 3E 06 F1 | 	add	arg01, #18
0b114     00 40 06 F6 | 	mov	arg02, #0
0b118     48 C3 BF FD | 	call	#_ff_cc_st_word_0352
0b11c     0C A0 05 F1 | 	add	fp, #12
0b120     D0 4A 02 FB | 	rdlong	local02, fp
0b124     03 4A 06 F1 | 	add	local02, #3
0b128     25 03 48 FC | 	wrbyte	#1, local02
0b12c     D0 3E 02 FB | 	rdlong	arg01, fp
0b130     0C A0 85 F1 | 	sub	fp, #12
0b134     60 C5 BF FD | 	call	#_ff_cc_sync_fs_0371
0b138     08 A0 05 F1 | 	add	fp, #8
0b13c     D0 16 62 FC | 	wrlong	result1, fp
0b140     04 A0 85 F1 | 	sub	fp, #4
0b144     D0 4A 02 FB | 	rdlong	local02, fp
0b148     25 51 02 F6 | 	mov	local05, local02
0b14c     04 A0 85 F1 | 	sub	fp, #4
0b150     10 50 06 F1 | 	add	local05, #16
0b154     28 4F C2 FA | 	rdbyte	local04, local05
0b158     BF 4E 06 F5 | 	and	local04, #191
0b15c     10 4A 06 F1 | 	add	local02, #16
0b160     25 4F 42 FC | 	wrbyte	local04, local02
0b164                 | LR__0701
0b164                 | LR__0702
0b164                 | LR__0703
0b164                 | ' 					dir = fp->dir_ptr;
0b164                 | ' 					dir[ 11 ] |=  0x20 ;
0b164                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
0b164                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
0b164                 | ' 					st_dword(dir +  22 , tm);
0b164                 | ' 					st_word(dir +  18 , 0);
0b164                 | ' 					fs->wflag = 1;
0b164                 | ' 					res = sync_fs(fs);
0b164                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
0b164                 | ' 				}
0b164                 | ' 			}
0b164                 | ' 		}
0b164                 | ' 	}
0b164                 | ' 
0b164                 | ' 	return res ;
0b164     08 A0 05 F1 | 	add	fp, #8
0b168     D0 16 02 FB | 	rdlong	result1, fp
0b16c     08 A0 85 F1 | 	sub	fp, #8
0b170     D0 F0 03 F6 | 	mov	ptra, fp
0b174     E0 00 A0 FD | 	call	#popregs_
0b178                 | _ff_cc_f_sync_ret
0b178     2D 00 64 FD | 	ret
0b17c                 | 
0b17c                 | _ff_cc_f_close
0b17c     02 9C 05 F6 | 	mov	COUNT_, #2
0b180     D1 00 A0 FD | 	call	#pushregs_
0b184     10 F0 07 F1 | 	add	ptra, #16
0b188     04 A0 05 F1 | 	add	fp, #4
0b18c     D0 3E 62 FC | 	wrlong	arg01, fp
0b190     04 A0 85 F1 | 	sub	fp, #4
0b194     38 FE BF FD | 	call	#_ff_cc_f_sync
0b198     08 A0 05 F1 | 	add	fp, #8
0b19c     D0 16 62 FC | 	wrlong	result1, fp
0b1a0     D0 48 0A FB | 	rdlong	local01, fp wz
0b1a4     08 A0 85 F1 | 	sub	fp, #8
0b1a8     40 00 90 5D |  if_ne	jmp	#LR__0705
0b1ac     04 A0 05 F1 | 	add	fp, #4
0b1b0     D0 3E 02 FB | 	rdlong	arg01, fp
0b1b4     08 A0 05 F1 | 	add	fp, #8
0b1b8     D0 40 02 F6 | 	mov	arg02, fp
0b1bc     0C A0 85 F1 | 	sub	fp, #12
0b1c0     80 E6 BF FD | 	call	#_ff_cc_validate_0467
0b1c4     0B 4B 02 F6 | 	mov	local02, result1
0b1c8     08 A0 05 F1 | 	add	fp, #8
0b1cc     D0 4A 62 FC | 	wrlong	local02, fp
0b1d0     D0 48 0A FB | 	rdlong	local01, fp wz
0b1d4     08 A0 85 F1 | 	sub	fp, #8
0b1d8     10 00 90 5D |  if_ne	jmp	#LR__0704
0b1dc     04 A0 05 F1 | 	add	fp, #4
0b1e0     D0 48 02 FB | 	rdlong	local01, fp
0b1e4     04 A0 85 F1 | 	sub	fp, #4
0b1e8     24 01 68 FC | 	wrlong	#0, local01
0b1ec                 | LR__0704
0b1ec                 | LR__0705
0b1ec                 | ' 
0b1ec                 | ' 
0b1ec                 | ' 
0b1ec                 | ' 
0b1ec                 | ' 			fp->obj.fs = 0;
0b1ec                 | ' #line 4212 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b1ec                 | ' 		}
0b1ec                 | ' 	}
0b1ec                 | ' 	return res;
0b1ec     08 A0 05 F1 | 	add	fp, #8
0b1f0     D0 16 02 FB | 	rdlong	result1, fp
0b1f4     08 A0 85 F1 | 	sub	fp, #8
0b1f8     D0 F0 03 F6 | 	mov	ptra, fp
0b1fc     E0 00 A0 FD | 	call	#popregs_
0b200                 | _ff_cc_f_close_ret
0b200     2D 00 64 FD | 	ret
0b204                 | 
0b204                 | _ff_cc_f_lseek
0b204     0B 9C 05 F6 | 	mov	COUNT_, #11
0b208     D1 00 A0 FD | 	call	#pushregs_
0b20c     24 F0 07 F1 | 	add	ptra, #36
0b210     04 A0 05 F1 | 	add	fp, #4
0b214     D0 3E 62 FC | 	wrlong	arg01, fp
0b218     04 A0 05 F1 | 	add	fp, #4
0b21c     D0 40 62 FC | 	wrlong	arg02, fp
0b220     04 A0 85 F1 | 	sub	fp, #4
0b224     D0 3E 02 FB | 	rdlong	arg01, fp
0b228     0C A0 05 F1 | 	add	fp, #12
0b22c     D0 40 02 F6 | 	mov	arg02, fp
0b230     10 A0 85 F1 | 	sub	fp, #16
0b234     0C E6 BF FD | 	call	#_ff_cc_validate_0467
0b238     0B 49 02 F6 | 	mov	local01, result1
0b23c     0C A0 05 F1 | 	add	fp, #12
0b240     D0 48 62 FC | 	wrlong	local01, fp
0b244     D0 4A 0A FB | 	rdlong	local02, fp wz
0b248     0C A0 85 F1 | 	sub	fp, #12
0b24c     1C 00 90 5D |  if_ne	jmp	#LR__0706
0b250     04 A0 05 F1 | 	add	fp, #4
0b254     D0 4C 02 FB | 	rdlong	local03, fp
0b258     11 4C 06 F1 | 	add	local03, #17
0b25c     26 4B C2 FA | 	rdbyte	local02, local03
0b260     08 A0 05 F1 | 	add	fp, #8
0b264     D0 4A 62 FC | 	wrlong	local02, fp
0b268     0C A0 85 F1 | 	sub	fp, #12
0b26c                 | LR__0706
0b26c     0C A0 05 F1 | 	add	fp, #12
0b270     D0 4A 0A FB | 	rdlong	local02, fp wz
0b274     0C A0 85 F1 | 	sub	fp, #12
0b278     10 00 90 AD |  if_e	jmp	#LR__0707
0b27c     0C A0 05 F1 | 	add	fp, #12
0b280     D0 16 02 FB | 	rdlong	result1, fp
0b284     0C A0 85 F1 | 	sub	fp, #12
0b288     A0 05 90 FD | 	jmp	#LR__0727
0b28c                 | LR__0707
0b28c     04 A0 05 F1 | 	add	fp, #4
0b290     D0 4A 02 FB | 	rdlong	local02, fp
0b294     04 A0 05 F1 | 	add	fp, #4
0b298     D0 4E 02 FB | 	rdlong	local04, fp
0b29c     08 A0 85 F1 | 	sub	fp, #8
0b2a0     0C 4A 06 F1 | 	add	local02, #12
0b2a4     25 51 02 FB | 	rdlong	local05, local02
0b2a8     28 53 02 F6 | 	mov	local06, local05
0b2ac     29 4F 1A F2 | 	cmp	local04, local06 wcz
0b2b0     50 00 90 ED |  if_be	jmp	#LR__0708
0b2b4     04 A0 05 F1 | 	add	fp, #4
0b2b8     D0 54 02 FB | 	rdlong	local07, fp
0b2bc     04 A0 85 F1 | 	sub	fp, #4
0b2c0     2A 57 02 F6 | 	mov	local08, local07
0b2c4     10 56 06 F1 | 	add	local08, #16
0b2c8     2B 59 C2 FA | 	rdbyte	local09, local08
0b2cc     10 56 86 F1 | 	sub	local08, #16
0b2d0     2C 49 02 F6 | 	mov	local01, local09
0b2d4     07 48 46 F7 | 	zerox	local01, #7
0b2d8     02 48 0E F5 | 	and	local01, #2 wz
0b2dc     24 00 90 5D |  if_ne	jmp	#LR__0708
0b2e0     04 A0 05 F1 | 	add	fp, #4
0b2e4     D0 4C 02 FB | 	rdlong	local03, fp
0b2e8     26 4B 02 F6 | 	mov	local02, local03
0b2ec     0C 4A 06 F1 | 	add	local02, #12
0b2f0     25 5B 02 FB | 	rdlong	local10, local02
0b2f4     0C 4A 86 F1 | 	sub	local02, #12
0b2f8     04 A0 05 F1 | 	add	fp, #4
0b2fc     D0 5A 62 FC | 	wrlong	local10, fp
0b300     08 A0 85 F1 | 	sub	fp, #8
0b304                 | LR__0708
0b304     04 A0 05 F1 | 	add	fp, #4
0b308     D0 4A 02 FB | 	rdlong	local02, fp
0b30c     14 4A 06 F1 | 	add	local02, #20
0b310     25 5B 02 FB | 	rdlong	local10, local02
0b314     1C A0 05 F1 | 	add	fp, #28
0b318     D0 5A 62 FC | 	wrlong	local10, fp
0b31c     1C A0 85 F1 | 	sub	fp, #28
0b320     D0 4A 02 FB | 	rdlong	local02, fp
0b324     18 A0 05 F1 | 	add	fp, #24
0b328     D0 00 68 FC | 	wrlong	#0, fp
0b32c     14 4A 06 F1 | 	add	local02, #20
0b330     25 01 68 FC | 	wrlong	#0, local02
0b334     14 A0 85 F1 | 	sub	fp, #20
0b338     D0 4A 02 FB | 	rdlong	local02, fp
0b33c     08 A0 85 F1 | 	sub	fp, #8
0b340     00 4A 1E F2 | 	cmp	local02, #0 wcz
0b344     FC 03 90 ED |  if_be	jmp	#LR__0724
0b348     10 A0 05 F1 | 	add	fp, #16
0b34c     D0 4C 02 FB | 	rdlong	local03, fp
0b350     0A 4C 06 F1 | 	add	local03, #10
0b354     26 53 E2 FA | 	rdword	local06, local03
0b358     09 52 66 F0 | 	shl	local06, #9
0b35c     08 A0 05 F1 | 	add	fp, #8
0b360     D0 52 62 FC | 	wrlong	local06, fp
0b364     08 A0 05 F1 | 	add	fp, #8
0b368     D0 4A 02 FB | 	rdlong	local02, fp
0b36c     20 A0 85 F1 | 	sub	fp, #32
0b370     00 4A 1E F2 | 	cmp	local02, #0 wcz
0b374     BC 00 90 ED |  if_be	jmp	#LR__0709
0b378     08 A0 05 F1 | 	add	fp, #8
0b37c     D0 9C 02 FB | 	rdlong	muldiva_, fp
0b380     01 9C 86 F1 | 	sub	muldiva_, #1
0b384     10 A0 05 F1 | 	add	fp, #16
0b388     D0 9E 02 FB | 	rdlong	muldivb_, fp
0b38c     18 A0 85 F1 | 	sub	fp, #24
0b390     ED 00 A0 FD | 	call	#unsdivide_
0b394     4F 53 02 F6 | 	mov	local06, muldivb_
0b398     20 A0 05 F1 | 	add	fp, #32
0b39c     D0 9C 02 FB | 	rdlong	muldiva_, fp
0b3a0     01 9C 86 F1 | 	sub	muldiva_, #1
0b3a4     08 A0 85 F1 | 	sub	fp, #8
0b3a8     D0 58 02 FB | 	rdlong	local09, fp
0b3ac     18 A0 85 F1 | 	sub	fp, #24
0b3b0     2C 9F 02 F6 | 	mov	muldivb_, local09
0b3b4     ED 00 A0 FD | 	call	#unsdivide_
0b3b8     4F 55 02 F6 | 	mov	local07, muldivb_
0b3bc     2A 53 1A F2 | 	cmp	local06, local07 wcz
0b3c0     70 00 90 CD |  if_b	jmp	#LR__0709
0b3c4     04 A0 05 F1 | 	add	fp, #4
0b3c8     D0 4A 02 FB | 	rdlong	local02, fp
0b3cc     1C A0 05 F1 | 	add	fp, #28
0b3d0     D0 5A 02 FB | 	rdlong	local10, fp
0b3d4     01 5A 86 F1 | 	sub	local10, #1
0b3d8     08 A0 85 F1 | 	sub	fp, #8
0b3dc     D0 52 02 FB | 	rdlong	local06, fp
0b3e0     01 52 86 F1 | 	sub	local06, #1
0b3e4     29 5B 22 F5 | 	andn	local10, local06
0b3e8     14 4A 06 F1 | 	add	local02, #20
0b3ec     25 5B 62 FC | 	wrlong	local10, local02
0b3f0     10 A0 85 F1 | 	sub	fp, #16
0b3f4     D0 4A 02 FB | 	rdlong	local02, fp
0b3f8     04 A0 85 F1 | 	sub	fp, #4
0b3fc     D0 5A 02 FB | 	rdlong	local10, fp
0b400     14 5A 06 F1 | 	add	local10, #20
0b404     2D 53 02 FB | 	rdlong	local06, local10
0b408     29 4B 82 F1 | 	sub	local02, local06
0b40c     04 A0 05 F1 | 	add	fp, #4
0b410     D0 4A 62 FC | 	wrlong	local02, fp
0b414     04 A0 85 F1 | 	sub	fp, #4
0b418     D0 4A 02 FB | 	rdlong	local02, fp
0b41c     18 4A 06 F1 | 	add	local02, #24
0b420     25 5B 02 FB | 	rdlong	local10, local02
0b424     10 A0 05 F1 | 	add	fp, #16
0b428     D0 5A 62 FC | 	wrlong	local10, fp
0b42c     14 A0 85 F1 | 	sub	fp, #20
0b430     D4 00 90 FD | 	jmp	#LR__0713
0b434                 | LR__0709
0b434     04 A0 05 F1 | 	add	fp, #4
0b438     D0 4A 02 FB | 	rdlong	local02, fp
0b43c     08 4A 06 F1 | 	add	local02, #8
0b440     25 5B 02 FB | 	rdlong	local10, local02
0b444     10 A0 05 F1 | 	add	fp, #16
0b448     D0 5A 62 FC | 	wrlong	local10, fp
0b44c     D0 4A 0A FB | 	rdlong	local02, fp wz
0b450     14 A0 85 F1 | 	sub	fp, #20
0b454     94 00 90 5D |  if_ne	jmp	#LR__0712
0b458     04 A0 05 F1 | 	add	fp, #4
0b45c     D0 3E 02 FB | 	rdlong	arg01, fp
0b460     04 A0 85 F1 | 	sub	fp, #4
0b464     00 40 06 F6 | 	mov	arg02, #0
0b468     C8 C9 BF FD | 	call	#_ff_cc_create_chain_0391
0b46c     14 A0 05 F1 | 	add	fp, #20
0b470     D0 16 62 FC | 	wrlong	result1, fp
0b474     14 A0 85 F1 | 	sub	fp, #20
0b478     01 16 0E F2 | 	cmp	result1, #1 wz
0b47c     1C 00 90 5D |  if_ne	jmp	#LR__0710
0b480     04 A0 05 F1 | 	add	fp, #4
0b484     D0 4A 02 FB | 	rdlong	local02, fp
0b488     04 A0 85 F1 | 	sub	fp, #4
0b48c     11 4A 06 F1 | 	add	local02, #17
0b490     25 05 48 FC | 	wrbyte	#2, local02
0b494     02 16 06 F6 | 	mov	result1, #2
0b498     90 03 90 FD | 	jmp	#LR__0727
0b49c                 | LR__0710
0b49c     14 A0 05 F1 | 	add	fp, #20
0b4a0     D0 4A 02 FB | 	rdlong	local02, fp
0b4a4     14 A0 85 F1 | 	sub	fp, #20
0b4a8     FF FF 7F FF 
0b4ac     FF 4B 0E F2 | 	cmp	local02, ##-1 wz
0b4b0     1C 00 90 5D |  if_ne	jmp	#LR__0711
0b4b4     04 A0 05 F1 | 	add	fp, #4
0b4b8     D0 4A 02 FB | 	rdlong	local02, fp
0b4bc     04 A0 85 F1 | 	sub	fp, #4
0b4c0     11 4A 06 F1 | 	add	local02, #17
0b4c4     25 03 48 FC | 	wrbyte	#1, local02
0b4c8     01 16 06 F6 | 	mov	result1, #1
0b4cc     5C 03 90 FD | 	jmp	#LR__0727
0b4d0                 | LR__0711
0b4d0     04 A0 05 F1 | 	add	fp, #4
0b4d4     D0 4A 02 FB | 	rdlong	local02, fp
0b4d8     10 A0 05 F1 | 	add	fp, #16
0b4dc     D0 5A 02 FB | 	rdlong	local10, fp
0b4e0     14 A0 85 F1 | 	sub	fp, #20
0b4e4     08 4A 06 F1 | 	add	local02, #8
0b4e8     25 5B 62 FC | 	wrlong	local10, local02
0b4ec                 | LR__0712
0b4ec     04 A0 05 F1 | 	add	fp, #4
0b4f0     D0 4A 02 FB | 	rdlong	local02, fp
0b4f4     10 A0 05 F1 | 	add	fp, #16
0b4f8     D0 5A 02 FB | 	rdlong	local10, fp
0b4fc     14 A0 85 F1 | 	sub	fp, #20
0b500     18 4A 06 F1 | 	add	local02, #24
0b504     25 5B 62 FC | 	wrlong	local10, local02
0b508                 | LR__0713
0b508     14 A0 05 F1 | 	add	fp, #20
0b50c     D0 4A 0A FB | 	rdlong	local02, fp wz
0b510     14 A0 85 F1 | 	sub	fp, #20
0b514     2C 02 90 AD |  if_e	jmp	#LR__0723
0b518                 | ' 				while (ofs > bcs) {
0b518                 | LR__0714
0b518     08 A0 05 F1 | 	add	fp, #8
0b51c     D0 4A 02 FB | 	rdlong	local02, fp
0b520     10 A0 05 F1 | 	add	fp, #16
0b524     D0 5A 02 FB | 	rdlong	local10, fp
0b528     18 A0 85 F1 | 	sub	fp, #24
0b52c     2D 4B 1A F2 | 	cmp	local02, local10 wcz
0b530     6C 01 90 ED |  if_be	jmp	#LR__0720
0b534     08 A0 05 F1 | 	add	fp, #8
0b538     D0 4A 02 FB | 	rdlong	local02, fp
0b53c     10 A0 05 F1 | 	add	fp, #16
0b540     D0 5A 02 FB | 	rdlong	local10, fp
0b544     2D 4B 82 F1 | 	sub	local02, local10
0b548     10 A0 85 F1 | 	sub	fp, #16
0b54c     D0 4A 62 FC | 	wrlong	local02, fp
0b550     04 A0 85 F1 | 	sub	fp, #4
0b554     D0 4A 02 FB | 	rdlong	local02, fp
0b558     25 4F 02 F6 | 	mov	local04, local02
0b55c     14 4E 06 F1 | 	add	local04, #20
0b560     27 51 02 FB | 	rdlong	local05, local04
0b564     28 5B 02 F6 | 	mov	local10, local05
0b568     14 A0 05 F1 | 	add	fp, #20
0b56c     D0 56 02 FB | 	rdlong	local08, fp
0b570     2B 5B 02 F1 | 	add	local10, local08
0b574     14 4A 06 F1 | 	add	local02, #20
0b578     25 5B 62 FC | 	wrlong	local10, local02
0b57c     14 A0 85 F1 | 	sub	fp, #20
0b580     D0 4C 02 FB | 	rdlong	local03, fp
0b584     04 A0 85 F1 | 	sub	fp, #4
0b588     10 4C 06 F1 | 	add	local03, #16
0b58c     26 4B C2 FA | 	rdbyte	local02, local03
0b590     02 4A CE F7 | 	test	local02, #2 wz
0b594     3C 00 90 AD |  if_e	jmp	#LR__0715
0b598     04 A0 05 F1 | 	add	fp, #4
0b59c     D0 3E 02 FB | 	rdlong	arg01, fp
0b5a0     10 A0 05 F1 | 	add	fp, #16
0b5a4     D0 40 02 FB | 	rdlong	arg02, fp
0b5a8     14 A0 85 F1 | 	sub	fp, #20
0b5ac     84 C8 BF FD | 	call	#_ff_cc_create_chain_0391
0b5b0     14 A0 05 F1 | 	add	fp, #20
0b5b4     D0 16 62 FC | 	wrlong	result1, fp
0b5b8     D0 4A 0A FB | 	rdlong	local02, fp wz
0b5bc     14 A0 85 F1 | 	sub	fp, #20
0b5c0     34 00 90 5D |  if_ne	jmp	#LR__0716
0b5c4     08 A0 05 F1 | 	add	fp, #8
0b5c8     D0 00 68 FC | 	wrlong	#0, fp
0b5cc     08 A0 85 F1 | 	sub	fp, #8
0b5d0                 | ' 							ofs = 0; break;
0b5d0     CC 00 90 FD | 	jmp	#LR__0720
0b5d4                 | LR__0715
0b5d4     04 A0 05 F1 | 	add	fp, #4
0b5d8     D0 3E 02 FB | 	rdlong	arg01, fp
0b5dc     10 A0 05 F1 | 	add	fp, #16
0b5e0     D0 40 02 FB | 	rdlong	arg02, fp
0b5e4     14 A0 85 F1 | 	sub	fp, #20
0b5e8     68 C2 BF FD | 	call	#_ff_cc_get_fat_0377
0b5ec     14 A0 05 F1 | 	add	fp, #20
0b5f0     D0 16 62 FC | 	wrlong	result1, fp
0b5f4     14 A0 85 F1 | 	sub	fp, #20
0b5f8                 | LR__0716
0b5f8     14 A0 05 F1 | 	add	fp, #20
0b5fc     D0 4A 02 FB | 	rdlong	local02, fp
0b600     14 A0 85 F1 | 	sub	fp, #20
0b604     FF FF 7F FF 
0b608     FF 4B 0E F2 | 	cmp	local02, ##-1 wz
0b60c     1C 00 90 5D |  if_ne	jmp	#LR__0717
0b610     04 A0 05 F1 | 	add	fp, #4
0b614     D0 4A 02 FB | 	rdlong	local02, fp
0b618     04 A0 85 F1 | 	sub	fp, #4
0b61c     11 4A 06 F1 | 	add	local02, #17
0b620     25 03 48 FC | 	wrbyte	#1, local02
0b624     01 16 06 F6 | 	mov	result1, #1
0b628     00 02 90 FD | 	jmp	#LR__0727
0b62c                 | LR__0717
0b62c     14 A0 05 F1 | 	add	fp, #20
0b630     D0 4A 02 FB | 	rdlong	local02, fp
0b634     14 A0 85 F1 | 	sub	fp, #20
0b638     01 4A 1E F2 | 	cmp	local02, #1 wcz
0b63c     24 00 90 ED |  if_be	jmp	#LR__0718
0b640     10 A0 05 F1 | 	add	fp, #16
0b644     D0 5A 02 FB | 	rdlong	local10, fp
0b648     04 A0 05 F1 | 	add	fp, #4
0b64c     D0 52 02 FB | 	rdlong	local06, fp
0b650     14 A0 85 F1 | 	sub	fp, #20
0b654     14 5A 06 F1 | 	add	local10, #20
0b658     2D 49 02 FB | 	rdlong	local01, local10
0b65c     24 53 1A F2 | 	cmp	local06, local01 wcz
0b660     1C 00 90 CD |  if_b	jmp	#LR__0719
0b664                 | LR__0718
0b664     04 A0 05 F1 | 	add	fp, #4
0b668     D0 4A 02 FB | 	rdlong	local02, fp
0b66c     04 A0 85 F1 | 	sub	fp, #4
0b670     11 4A 06 F1 | 	add	local02, #17
0b674     25 05 48 FC | 	wrbyte	#2, local02
0b678     02 16 06 F6 | 	mov	result1, #2
0b67c     AC 01 90 FD | 	jmp	#LR__0727
0b680                 | LR__0719
0b680     04 A0 05 F1 | 	add	fp, #4
0b684     D0 4A 02 FB | 	rdlong	local02, fp
0b688     10 A0 05 F1 | 	add	fp, #16
0b68c     D0 5A 02 FB | 	rdlong	local10, fp
0b690     14 A0 85 F1 | 	sub	fp, #20
0b694     18 4A 06 F1 | 	add	local02, #24
0b698     25 5B 62 FC | 	wrlong	local10, local02
0b69c     78 FE 9F FD | 	jmp	#LR__0714
0b6a0                 | LR__0720
0b6a0     04 A0 05 F1 | 	add	fp, #4
0b6a4     D0 4A 02 FB | 	rdlong	local02, fp
0b6a8     25 4F 02 F6 | 	mov	local04, local02
0b6ac     14 4E 06 F1 | 	add	local04, #20
0b6b0     27 5B 02 FB | 	rdlong	local10, local04
0b6b4     04 A0 05 F1 | 	add	fp, #4
0b6b8     D0 48 02 FB | 	rdlong	local01, fp
0b6bc     24 5B 02 F1 | 	add	local10, local01
0b6c0     14 4A 06 F1 | 	add	local02, #20
0b6c4     25 5B 62 FC | 	wrlong	local10, local02
0b6c8     D0 4A 02 FB | 	rdlong	local02, fp
0b6cc     08 A0 85 F1 | 	sub	fp, #8
0b6d0     FF 4B CE F7 | 	test	local02, #511 wz
0b6d4     6C 00 90 AD |  if_e	jmp	#LR__0722
0b6d8     10 A0 05 F1 | 	add	fp, #16
0b6dc     D0 3E 02 FB | 	rdlong	arg01, fp
0b6e0     04 A0 05 F1 | 	add	fp, #4
0b6e4     D0 40 02 FB | 	rdlong	arg02, fp
0b6e8     14 A0 85 F1 | 	sub	fp, #20
0b6ec     24 C1 BF FD | 	call	#_ff_cc_clst2sect_0372
0b6f0     1C A0 05 F1 | 	add	fp, #28
0b6f4     D0 16 62 FC | 	wrlong	result1, fp
0b6f8     D0 4A 0A FB | 	rdlong	local02, fp wz
0b6fc     1C A0 85 F1 | 	sub	fp, #28
0b700     1C 00 90 5D |  if_ne	jmp	#LR__0721
0b704     04 A0 05 F1 | 	add	fp, #4
0b708     D0 4A 02 FB | 	rdlong	local02, fp
0b70c     04 A0 85 F1 | 	sub	fp, #4
0b710     11 4A 06 F1 | 	add	local02, #17
0b714     25 05 48 FC | 	wrbyte	#2, local02
0b718     02 16 06 F6 | 	mov	result1, #2
0b71c     0C 01 90 FD | 	jmp	#LR__0727
0b720                 | LR__0721
0b720     1C A0 05 F1 | 	add	fp, #28
0b724     D0 4A 02 FB | 	rdlong	local02, fp
0b728     14 A0 85 F1 | 	sub	fp, #20
0b72c     D0 5A 02 FB | 	rdlong	local10, fp
0b730     09 5A 46 F0 | 	shr	local10, #9
0b734     2D 4B 02 F1 | 	add	local02, local10
0b738     14 A0 05 F1 | 	add	fp, #20
0b73c     D0 4A 62 FC | 	wrlong	local02, fp
0b740     1C A0 85 F1 | 	sub	fp, #28
0b744                 | LR__0722
0b744                 | LR__0723
0b744                 | LR__0724
0b744     04 A0 05 F1 | 	add	fp, #4
0b748     D0 4A 02 FB | 	rdlong	local02, fp
0b74c     25 5B 02 F6 | 	mov	local10, local02
0b750     04 A0 85 F1 | 	sub	fp, #4
0b754     14 4A 06 F1 | 	add	local02, #20
0b758     25 53 02 FB | 	rdlong	local06, local02
0b75c     0C 5A 06 F1 | 	add	local10, #12
0b760     2D 49 02 FB | 	rdlong	local01, local10
0b764     24 53 1A F2 | 	cmp	local06, local01 wcz
0b768     3C 00 90 ED |  if_be	jmp	#LR__0725
0b76c     04 A0 05 F1 | 	add	fp, #4
0b770     D0 4A 02 FB | 	rdlong	local02, fp
0b774     25 5B 02 F6 | 	mov	local10, local02
0b778     14 5A 06 F1 | 	add	local10, #20
0b77c     2D 53 02 FB | 	rdlong	local06, local10
0b780     0C 4A 06 F1 | 	add	local02, #12
0b784     25 53 62 FC | 	wrlong	local06, local02
0b788     D0 4A 02 FB | 	rdlong	local02, fp
0b78c     25 4F 02 F6 | 	mov	local04, local02
0b790     04 A0 85 F1 | 	sub	fp, #4
0b794     10 4E 06 F1 | 	add	local04, #16
0b798     27 5B C2 FA | 	rdbyte	local10, local04
0b79c     40 5A 46 F5 | 	or	local10, #64
0b7a0     10 4A 06 F1 | 	add	local02, #16
0b7a4     25 5B 42 FC | 	wrbyte	local10, local02
0b7a8                 | LR__0725
0b7a8     04 A0 05 F1 | 	add	fp, #4
0b7ac     D0 4A 02 FB | 	rdlong	local02, fp
0b7b0     04 A0 85 F1 | 	sub	fp, #4
0b7b4     14 4A 06 F1 | 	add	local02, #20
0b7b8     25 53 02 FB | 	rdlong	local06, local02
0b7bc     29 4F 02 F6 | 	mov	local04, local06
0b7c0     FF 4F CE F7 | 	test	local04, #511 wz
0b7c4     58 00 90 AD |  if_e	jmp	#LR__0726
0b7c8     04 A0 05 F1 | 	add	fp, #4
0b7cc     D0 48 02 FB | 	rdlong	local01, fp
0b7d0     24 51 02 F6 | 	mov	local05, local01
0b7d4     18 A0 05 F1 | 	add	fp, #24
0b7d8     D0 54 02 FB | 	rdlong	local07, fp
0b7dc     1C A0 85 F1 | 	sub	fp, #28
0b7e0     2A 57 02 F6 | 	mov	local08, local07
0b7e4     1C 50 06 F1 | 	add	local05, #28
0b7e8     28 5D 02 FB | 	rdlong	local11, local05
0b7ec     1C 50 86 F1 | 	sub	local05, #28
0b7f0     2E 59 02 F6 | 	mov	local09, local11
0b7f4     2C 57 0A F2 | 	cmp	local08, local09 wz
0b7f8     24 00 90 AD |  if_e	jmp	#LR__0726
0b7fc     04 A0 05 F1 | 	add	fp, #4
0b800     D0 4C 02 FB | 	rdlong	local03, fp
0b804     26 4B 02 F6 | 	mov	local02, local03
0b808     18 A0 05 F1 | 	add	fp, #24
0b80c     D0 5A 02 FB | 	rdlong	local10, fp
0b810     1C A0 85 F1 | 	sub	fp, #28
0b814     1C 4A 06 F1 | 	add	local02, #28
0b818     25 5B 62 FC | 	wrlong	local10, local02
0b81c     1C 4A 86 F1 | 	sub	local02, #28
0b820                 | LR__0726
0b820                 | ' #line 4553 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b820                 | ' 			fp->sect = nsect;
0b820                 | ' 		}
0b820                 | ' 	}
0b820                 | ' 
0b820                 | ' 	return res ;
0b820     0C A0 05 F1 | 	add	fp, #12
0b824     D0 16 02 FB | 	rdlong	result1, fp
0b828     0C A0 85 F1 | 	sub	fp, #12
0b82c                 | LR__0727
0b82c     D0 F0 03 F6 | 	mov	ptra, fp
0b830     E0 00 A0 FD | 	call	#popregs_
0b834                 | _ff_cc_f_lseek_ret
0b834     2D 00 64 FD | 	ret
0b838                 | 
0b838                 | _ff_cc_f_opendir
0b838     05 9C 05 F6 | 	mov	COUNT_, #5
0b83c     D1 00 A0 FD | 	call	#pushregs_
0b840     14 F0 07 F1 | 	add	ptra, #20
0b844     04 A0 05 F1 | 	add	fp, #4
0b848     D0 3E 62 FC | 	wrlong	arg01, fp
0b84c     04 A0 05 F1 | 	add	fp, #4
0b850     D0 40 62 FC | 	wrlong	arg02, fp
0b854     04 A0 85 F1 | 	sub	fp, #4
0b858     D0 48 0A FB | 	rdlong	local01, fp wz
0b85c     04 A0 85 F1 | 	sub	fp, #4
0b860     09 16 06 A6 |  if_e	mov	result1, #9
0b864     84 01 90 AD |  if_e	jmp	#LR__0735
0b868     08 A0 05 F1 | 	add	fp, #8
0b86c     D0 3E 02 F6 | 	mov	arg01, fp
0b870     08 A0 05 F1 | 	add	fp, #8
0b874     D0 40 02 F6 | 	mov	arg02, fp
0b878     10 A0 85 F1 | 	sub	fp, #16
0b87c     00 42 06 F6 | 	mov	arg03, #0
0b880     80 D9 BF FD | 	call	#_ff_cc_mount_volume_0465
0b884     0B 4B 02 F6 | 	mov	local02, result1
0b888     0C A0 05 F1 | 	add	fp, #12
0b88c     D0 4A 62 FC | 	wrlong	local02, fp
0b890     D0 48 0A FB | 	rdlong	local01, fp wz
0b894     0C A0 85 F1 | 	sub	fp, #12
0b898     24 01 90 5D |  if_ne	jmp	#LR__0733
0b89c     04 A0 05 F1 | 	add	fp, #4
0b8a0     D0 48 02 FB | 	rdlong	local01, fp
0b8a4     0C A0 05 F1 | 	add	fp, #12
0b8a8     D0 4C 02 FB | 	rdlong	local03, fp
0b8ac     24 4D 62 FC | 	wrlong	local03, local01
0b8b0     0C A0 85 F1 | 	sub	fp, #12
0b8b4     D0 3E 02 FB | 	rdlong	arg01, fp
0b8b8     04 A0 05 F1 | 	add	fp, #4
0b8bc     D0 40 02 FB | 	rdlong	arg02, fp
0b8c0     08 A0 85 F1 | 	sub	fp, #8
0b8c4     00 D4 BF FD | 	call	#_ff_cc_follow_path_0442
0b8c8     0C A0 05 F1 | 	add	fp, #12
0b8cc     D0 16 62 FC | 	wrlong	result1, fp
0b8d0     D0 48 0A FB | 	rdlong	local01, fp wz
0b8d4     0C A0 85 F1 | 	sub	fp, #12
0b8d8     C8 00 90 5D |  if_ne	jmp	#LR__0732
0b8dc     04 A0 05 F1 | 	add	fp, #4
0b8e0     D0 4E 02 FB | 	rdlong	local04, fp
0b8e4     04 A0 85 F1 | 	sub	fp, #4
0b8e8     2B 4E 06 F1 | 	add	local04, #43
0b8ec     27 49 C2 FA | 	rdbyte	local01, local04
0b8f0     80 48 CE F7 | 	test	local01, #128 wz
0b8f4     5C 00 90 5D |  if_ne	jmp	#LR__0730
0b8f8     04 A0 05 F1 | 	add	fp, #4
0b8fc     D0 4E 02 FB | 	rdlong	local04, fp
0b900     04 A0 85 F1 | 	sub	fp, #4
0b904     06 4E 06 F1 | 	add	local04, #6
0b908     27 49 C2 FA | 	rdbyte	local01, local04
0b90c     10 48 CE F7 | 	test	local01, #16 wz
0b910     34 00 90 AD |  if_e	jmp	#LR__0728
0b914     04 A0 05 F1 | 	add	fp, #4
0b918     D0 48 02 FB | 	rdlong	local01, fp
0b91c     0C A0 05 F1 | 	add	fp, #12
0b920     D0 3E 02 FB | 	rdlong	arg01, fp
0b924     0C A0 85 F1 | 	sub	fp, #12
0b928     D0 50 02 FB | 	rdlong	local05, fp
0b92c     04 A0 85 F1 | 	sub	fp, #4
0b930     1C 50 06 F1 | 	add	local05, #28
0b934     28 41 02 FB | 	rdlong	arg02, local05
0b938     5C CC BF FD | 	call	#_ff_cc_ld_clust_0410
0b93c     08 48 06 F1 | 	add	local01, #8
0b940     24 17 62 FC | 	wrlong	result1, local01
0b944     0C 00 90 FD | 	jmp	#LR__0729
0b948                 | LR__0728
0b948     0C A0 05 F1 | 	add	fp, #12
0b94c     D0 0A 68 FC | 	wrlong	#5, fp
0b950     0C A0 85 F1 | 	sub	fp, #12
0b954                 | LR__0729
0b954                 | LR__0730
0b954     0C A0 05 F1 | 	add	fp, #12
0b958     D0 48 0A FB | 	rdlong	local01, fp wz
0b95c     0C A0 85 F1 | 	sub	fp, #12
0b960     40 00 90 5D |  if_ne	jmp	#LR__0731
0b964     04 A0 05 F1 | 	add	fp, #4
0b968     D0 48 02 FB | 	rdlong	local01, fp
0b96c     0C A0 05 F1 | 	add	fp, #12
0b970     D0 4C 02 FB | 	rdlong	local03, fp
0b974     06 4C 06 F1 | 	add	local03, #6
0b978     26 51 E2 FA | 	rdword	local05, local03
0b97c     04 48 06 F1 | 	add	local01, #4
0b980     24 51 52 FC | 	wrword	local05, local01
0b984     0C A0 85 F1 | 	sub	fp, #12
0b988     D0 3E 02 FB | 	rdlong	arg01, fp
0b98c     04 A0 85 F1 | 	sub	fp, #4
0b990     00 40 06 F6 | 	mov	arg02, #0
0b994     D8 C7 BF FD | 	call	#_ff_cc_dir_sdi_0400
0b998     0C A0 05 F1 | 	add	fp, #12
0b99c     D0 16 62 FC | 	wrlong	result1, fp
0b9a0     0C A0 85 F1 | 	sub	fp, #12
0b9a4                 | LR__0731
0b9a4                 | LR__0732
0b9a4     0C A0 05 F1 | 	add	fp, #12
0b9a8     D0 48 02 FB | 	rdlong	local01, fp
0b9ac     0C A0 85 F1 | 	sub	fp, #12
0b9b0     04 48 0E F2 | 	cmp	local01, #4 wz
0b9b4     0C A0 05 A1 |  if_e	add	fp, #12
0b9b8     D0 0A 68 AC |  if_e	wrlong	#5, fp
0b9bc     0C A0 85 A1 |  if_e	sub	fp, #12
0b9c0                 | LR__0733
0b9c0     0C A0 05 F1 | 	add	fp, #12
0b9c4     D0 48 0A FB | 	rdlong	local01, fp wz
0b9c8     0C A0 85 F1 | 	sub	fp, #12
0b9cc     10 00 90 AD |  if_e	jmp	#LR__0734
0b9d0     04 A0 05 F1 | 	add	fp, #4
0b9d4     D0 48 02 FB | 	rdlong	local01, fp
0b9d8     04 A0 85 F1 | 	sub	fp, #4
0b9dc     24 01 68 FC | 	wrlong	#0, local01
0b9e0                 | LR__0734
0b9e0                 | ' 
0b9e0                 | ' 	return res ;
0b9e0     0C A0 05 F1 | 	add	fp, #12
0b9e4     D0 16 02 FB | 	rdlong	result1, fp
0b9e8     0C A0 85 F1 | 	sub	fp, #12
0b9ec                 | LR__0735
0b9ec     D0 F0 03 F6 | 	mov	ptra, fp
0b9f0     E0 00 A0 FD | 	call	#popregs_
0b9f4                 | _ff_cc_f_opendir_ret
0b9f4     2D 00 64 FD | 	ret
0b9f8                 | 
0b9f8                 | _ff_cc_f_closedir
0b9f8     02 9C 05 F6 | 	mov	COUNT_, #2
0b9fc     D1 00 A0 FD | 	call	#pushregs_
0ba00     10 F0 07 F1 | 	add	ptra, #16
0ba04     04 A0 05 F1 | 	add	fp, #4
0ba08     D0 3E 62 FC | 	wrlong	arg01, fp
0ba0c     08 A0 05 F1 | 	add	fp, #8
0ba10     D0 40 02 F6 | 	mov	arg02, fp
0ba14     0C A0 85 F1 | 	sub	fp, #12
0ba18     28 DE BF FD | 	call	#_ff_cc_validate_0467
0ba1c     0B 49 02 F6 | 	mov	local01, result1
0ba20     08 A0 05 F1 | 	add	fp, #8
0ba24     D0 48 62 FC | 	wrlong	local01, fp
0ba28     D0 4A 0A FB | 	rdlong	local02, fp wz
0ba2c     08 A0 85 F1 | 	sub	fp, #8
0ba30     10 00 90 5D |  if_ne	jmp	#LR__0736
0ba34     04 A0 05 F1 | 	add	fp, #4
0ba38     D0 4A 02 FB | 	rdlong	local02, fp
0ba3c     04 A0 85 F1 | 	sub	fp, #4
0ba40     25 01 68 FC | 	wrlong	#0, local02
0ba44                 | LR__0736
0ba44                 | ' 
0ba44                 | ' 
0ba44                 | ' 
0ba44                 | ' 
0ba44                 | ' 		dp->obj.fs = 0;
0ba44                 | ' #line 4652 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0ba44                 | ' 	}
0ba44                 | ' 	return res;
0ba44     08 A0 05 F1 | 	add	fp, #8
0ba48     D0 16 02 FB | 	rdlong	result1, fp
0ba4c     08 A0 85 F1 | 	sub	fp, #8
0ba50     D0 F0 03 F6 | 	mov	ptra, fp
0ba54     E0 00 A0 FD | 	call	#popregs_
0ba58                 | _ff_cc_f_closedir_ret
0ba58     2D 00 64 FD | 	ret
0ba5c                 | 
0ba5c                 | _ff_cc_f_readdir
0ba5c     02 9C 05 F6 | 	mov	COUNT_, #2
0ba60     D1 00 A0 FD | 	call	#pushregs_
0ba64     14 F0 07 F1 | 	add	ptra, #20
0ba68     04 A0 05 F1 | 	add	fp, #4
0ba6c     D0 3E 62 FC | 	wrlong	arg01, fp
0ba70     04 A0 05 F1 | 	add	fp, #4
0ba74     D0 40 62 FC | 	wrlong	arg02, fp
0ba78     04 A0 85 F1 | 	sub	fp, #4
0ba7c     D0 3E 02 FB | 	rdlong	arg01, fp
0ba80     0C A0 05 F1 | 	add	fp, #12
0ba84     D0 40 02 F6 | 	mov	arg02, fp
0ba88     10 A0 85 F1 | 	sub	fp, #16
0ba8c     B4 DD BF FD | 	call	#_ff_cc_validate_0467
0ba90     0B 49 02 F6 | 	mov	local01, result1
0ba94     0C A0 05 F1 | 	add	fp, #12
0ba98     D0 48 62 FC | 	wrlong	local01, fp
0ba9c     D0 4A 0A FB | 	rdlong	local02, fp wz
0baa0     0C A0 85 F1 | 	sub	fp, #12
0baa4     BC 00 90 5D |  if_ne	jmp	#LR__0740
0baa8     08 A0 05 F1 | 	add	fp, #8
0baac     D0 4A 0A FB | 	rdlong	local02, fp wz
0bab0     08 A0 85 F1 | 	sub	fp, #8
0bab4     24 00 90 5D |  if_ne	jmp	#LR__0737
0bab8     04 A0 05 F1 | 	add	fp, #4
0babc     D0 3E 02 FB | 	rdlong	arg01, fp
0bac0     04 A0 85 F1 | 	sub	fp, #4
0bac4     00 40 06 F6 | 	mov	arg02, #0
0bac8     A4 C6 BF FD | 	call	#_ff_cc_dir_sdi_0400
0bacc     0C A0 05 F1 | 	add	fp, #12
0bad0     D0 16 62 FC | 	wrlong	result1, fp
0bad4     0C A0 85 F1 | 	sub	fp, #12
0bad8     88 00 90 FD | 	jmp	#LR__0739
0badc                 | LR__0737
0badc     04 A0 05 F1 | 	add	fp, #4
0bae0     D0 3E 02 FB | 	rdlong	arg01, fp
0bae4     04 A0 85 F1 | 	sub	fp, #4
0bae8     00 40 06 F6 | 	mov	arg02, #0
0baec     50 CB BF FD | 	call	#_ff_cc_dir_read_0416
0baf0     0C A0 05 F1 | 	add	fp, #12
0baf4     D0 16 62 FC | 	wrlong	result1, fp
0baf8     0C A0 85 F1 | 	sub	fp, #12
0bafc     04 16 0E F2 | 	cmp	result1, #4 wz
0bb00     0C A0 05 A1 |  if_e	add	fp, #12
0bb04     D0 00 68 AC |  if_e	wrlong	#0, fp
0bb08     0C A0 85 A1 |  if_e	sub	fp, #12
0bb0c     0C A0 05 F1 | 	add	fp, #12
0bb10     D0 4A 0A FB | 	rdlong	local02, fp wz
0bb14     0C A0 85 F1 | 	sub	fp, #12
0bb18     48 00 90 5D |  if_ne	jmp	#LR__0738
0bb1c     04 A0 05 F1 | 	add	fp, #4
0bb20     D0 3E 02 FB | 	rdlong	arg01, fp
0bb24     04 A0 05 F1 | 	add	fp, #4
0bb28     D0 40 02 FB | 	rdlong	arg02, fp
0bb2c     08 A0 85 F1 | 	sub	fp, #8
0bb30     FC CD BF FD | 	call	#_ff_cc_get_fileinfo_0430
0bb34     04 A0 05 F1 | 	add	fp, #4
0bb38     D0 3E 02 FB | 	rdlong	arg01, fp
0bb3c     04 A0 85 F1 | 	sub	fp, #4
0bb40     00 40 06 F6 | 	mov	arg02, #0
0bb44     B4 C7 BF FD | 	call	#_ff_cc_dir_next_0404
0bb48     0C A0 05 F1 | 	add	fp, #12
0bb4c     D0 16 62 FC | 	wrlong	result1, fp
0bb50     0C A0 85 F1 | 	sub	fp, #12
0bb54     04 16 0E F2 | 	cmp	result1, #4 wz
0bb58     0C A0 05 A1 |  if_e	add	fp, #12
0bb5c     D0 00 68 AC |  if_e	wrlong	#0, fp
0bb60     0C A0 85 A1 |  if_e	sub	fp, #12
0bb64                 | LR__0738
0bb64                 | LR__0739
0bb64                 | LR__0740
0bb64                 | ' 			}
0bb64                 | ' 			;
0bb64                 | ' 		}
0bb64                 | ' 	}
0bb64                 | ' 	return res ;
0bb64     0C A0 05 F1 | 	add	fp, #12
0bb68     D0 16 02 FB | 	rdlong	result1, fp
0bb6c     0C A0 85 F1 | 	sub	fp, #12
0bb70     D0 F0 03 F6 | 	mov	ptra, fp
0bb74     E0 00 A0 FD | 	call	#popregs_
0bb78                 | _ff_cc_f_readdir_ret
0bb78     2D 00 64 FD | 	ret
0bb7c                 | 
0bb7c                 | _ff_cc_f_stat
0bb7c     03 9C 05 F6 | 	mov	COUNT_, #3
0bb80     D1 00 A0 FD | 	call	#pushregs_
0bb84     3C F0 07 F1 | 	add	ptra, #60
0bb88     04 A0 05 F1 | 	add	fp, #4
0bb8c     D0 3E 62 FC | 	wrlong	arg01, fp
0bb90     04 A0 05 F1 | 	add	fp, #4
0bb94     D0 40 62 FC | 	wrlong	arg02, fp
0bb98     04 A0 85 F1 | 	sub	fp, #4
0bb9c     D0 3E 02 F6 | 	mov	arg01, fp
0bba0     0C A0 05 F1 | 	add	fp, #12
0bba4     D0 40 02 F6 | 	mov	arg02, fp
0bba8     10 A0 85 F1 | 	sub	fp, #16
0bbac     00 42 06 F6 | 	mov	arg03, #0
0bbb0     50 D6 BF FD | 	call	#_ff_cc_mount_volume_0465
0bbb4     0B 49 02 F6 | 	mov	local01, result1
0bbb8     0C A0 05 F1 | 	add	fp, #12
0bbbc     D0 48 62 FC | 	wrlong	local01, fp
0bbc0     D0 4A 0A FB | 	rdlong	local02, fp wz
0bbc4     0C A0 85 F1 | 	sub	fp, #12
0bbc8     80 00 90 5D |  if_ne	jmp	#LR__0745
0bbcc     10 A0 05 F1 | 	add	fp, #16
0bbd0     D0 3E 02 F6 | 	mov	arg01, fp
0bbd4     0C A0 85 F1 | 	sub	fp, #12
0bbd8     D0 40 02 FB | 	rdlong	arg02, fp
0bbdc     04 A0 85 F1 | 	sub	fp, #4
0bbe0     E4 D0 BF FD | 	call	#_ff_cc_follow_path_0442
0bbe4     0B 4D 02 F6 | 	mov	local03, result1
0bbe8     0C A0 05 F1 | 	add	fp, #12
0bbec     D0 4C 62 FC | 	wrlong	local03, fp
0bbf0     D0 4A 0A FB | 	rdlong	local02, fp wz
0bbf4     0C A0 85 F1 | 	sub	fp, #12
0bbf8     50 00 90 5D |  if_ne	jmp	#LR__0744
0bbfc     3B A0 05 F1 | 	add	fp, #59
0bc00     D0 4A C2 FA | 	rdbyte	local02, fp
0bc04     3B A0 85 F1 | 	sub	fp, #59
0bc08     07 4A 46 F7 | 	zerox	local02, #7
0bc0c     80 4A CE F7 | 	test	local02, #128 wz
0bc10     10 00 90 AD |  if_e	jmp	#LR__0741
0bc14     0C A0 05 F1 | 	add	fp, #12
0bc18     D0 0C 68 FC | 	wrlong	#6, fp
0bc1c     0C A0 85 F1 | 	sub	fp, #12
0bc20     28 00 90 FD | 	jmp	#LR__0743
0bc24                 | LR__0741
0bc24     08 A0 05 F1 | 	add	fp, #8
0bc28     D0 4A 0A FB | 	rdlong	local02, fp wz
0bc2c     08 A0 85 F1 | 	sub	fp, #8
0bc30     18 00 90 AD |  if_e	jmp	#LR__0742
0bc34     10 A0 05 F1 | 	add	fp, #16
0bc38     D0 3E 02 F6 | 	mov	arg01, fp
0bc3c     08 A0 85 F1 | 	sub	fp, #8
0bc40     D0 40 02 FB | 	rdlong	arg02, fp
0bc44     08 A0 85 F1 | 	sub	fp, #8
0bc48     E4 CC BF FD | 	call	#_ff_cc_get_fileinfo_0430
0bc4c                 | LR__0742
0bc4c                 | LR__0743
0bc4c                 | LR__0744
0bc4c                 | LR__0745
0bc4c                 | ' 			}
0bc4c                 | ' 		}
0bc4c                 | ' 		;
0bc4c                 | ' 	}
0bc4c                 | ' 
0bc4c                 | ' 	return res ;
0bc4c     0C A0 05 F1 | 	add	fp, #12
0bc50     D0 16 02 FB | 	rdlong	result1, fp
0bc54     0C A0 85 F1 | 	sub	fp, #12
0bc58     D0 F0 03 F6 | 	mov	ptra, fp
0bc5c     E0 00 A0 FD | 	call	#popregs_
0bc60                 | _ff_cc_f_stat_ret
0bc60     2D 00 64 FD | 	ret
0bc64                 | 
0bc64                 | _ff_cc_f_unlink
0bc64     06 9C 05 F6 | 	mov	COUNT_, #6
0bc68     D1 00 A0 FD | 	call	#pushregs_
0bc6c     6C F0 07 F1 | 	add	ptra, #108
0bc70     04 A0 05 F1 | 	add	fp, #4
0bc74     D0 3E 62 FC | 	wrlong	arg01, fp
0bc78     60 A0 05 F1 | 	add	fp, #96
0bc7c     D0 00 68 FC | 	wrlong	#0, fp
0bc80     60 A0 85 F1 | 	sub	fp, #96
0bc84     D0 3E 02 F6 | 	mov	arg01, fp
0bc88     64 A0 05 F1 | 	add	fp, #100
0bc8c     D0 40 02 F6 | 	mov	arg02, fp
0bc90     68 A0 85 F1 | 	sub	fp, #104
0bc94     02 42 06 F6 | 	mov	arg03, #2
0bc98     68 D5 BF FD | 	call	#_ff_cc_mount_volume_0465
0bc9c     0B 49 02 F6 | 	mov	local01, result1
0bca0     08 A0 05 F1 | 	add	fp, #8
0bca4     D0 48 62 FC | 	wrlong	local01, fp
0bca8     D0 4A 0A FB | 	rdlong	local02, fp wz
0bcac     08 A0 85 F1 | 	sub	fp, #8
0bcb0     18 02 90 5D |  if_ne	jmp	#LR__0755
0bcb4     68 A0 05 F1 | 	add	fp, #104
0bcb8     D0 4A 02 FB | 	rdlong	local02, fp
0bcbc     5C A0 85 F1 | 	sub	fp, #92
0bcc0     D0 4A 62 FC | 	wrlong	local02, fp
0bcc4     D0 3E 02 F6 | 	mov	arg01, fp
0bcc8     08 A0 85 F1 | 	sub	fp, #8
0bccc     D0 40 02 FB | 	rdlong	arg02, fp
0bcd0     04 A0 85 F1 | 	sub	fp, #4
0bcd4     F0 CF BF FD | 	call	#_ff_cc_follow_path_0442
0bcd8     0B 4D 02 F6 | 	mov	local03, result1
0bcdc     08 A0 05 F1 | 	add	fp, #8
0bce0     D0 4C 62 FC | 	wrlong	local03, fp
0bce4     D0 4A 0A FB | 	rdlong	local02, fp wz
0bce8     08 A0 85 F1 | 	sub	fp, #8
0bcec     DC 01 90 5D |  if_ne	jmp	#LR__0754
0bcf0     37 A0 05 F1 | 	add	fp, #55
0bcf4     D0 4A C2 FA | 	rdbyte	local02, fp
0bcf8     37 A0 85 F1 | 	sub	fp, #55
0bcfc     07 4A 46 F7 | 	zerox	local02, #7
0bd00     80 4A CE F7 | 	test	local02, #128 wz
0bd04     10 00 90 AD |  if_e	jmp	#LR__0746
0bd08     08 A0 05 F1 | 	add	fp, #8
0bd0c     D0 0C 68 FC | 	wrlong	#6, fp
0bd10     08 A0 85 F1 | 	sub	fp, #8
0bd14     20 00 90 FD | 	jmp	#LR__0747
0bd18                 | LR__0746
0bd18     12 A0 05 F1 | 	add	fp, #18
0bd1c     D0 4A C2 FA | 	rdbyte	local02, fp
0bd20     12 A0 85 F1 | 	sub	fp, #18
0bd24     07 4A 46 F7 | 	zerox	local02, #7
0bd28     01 4A CE F7 | 	test	local02, #1 wz
0bd2c     08 A0 05 51 |  if_ne	add	fp, #8
0bd30     D0 0E 68 5C |  if_ne	wrlong	#7, fp
0bd34     08 A0 85 51 |  if_ne	sub	fp, #8
0bd38                 | LR__0747
0bd38     08 A0 05 F1 | 	add	fp, #8
0bd3c     D0 4A 0A FB | 	rdlong	local02, fp wz
0bd40     08 A0 85 F1 | 	sub	fp, #8
0bd44     D4 00 90 5D |  if_ne	jmp	#LR__0750
0bd48     68 A0 05 F1 | 	add	fp, #104
0bd4c     D0 3E 02 FB | 	rdlong	arg01, fp
0bd50     40 A0 85 F1 | 	sub	fp, #64
0bd54     D0 40 02 FB | 	rdlong	arg02, fp
0bd58     28 A0 85 F1 | 	sub	fp, #40
0bd5c     38 C8 BF FD | 	call	#_ff_cc_ld_clust_0410
0bd60     0B 4D 02 F6 | 	mov	local03, result1
0bd64     64 A0 05 F1 | 	add	fp, #100
0bd68     D0 4C 62 FC | 	wrlong	local03, fp
0bd6c     52 A0 85 F1 | 	sub	fp, #82
0bd70     D0 4A C2 FA | 	rdbyte	local02, fp
0bd74     12 A0 85 F1 | 	sub	fp, #18
0bd78     07 4A 46 F7 | 	zerox	local02, #7
0bd7c     10 4A CE F7 | 	test	local02, #16 wz
0bd80     98 00 90 AD |  if_e	jmp	#LR__0749
0bd84     68 A0 05 F1 | 	add	fp, #104
0bd88     D0 4A 02 FB | 	rdlong	local02, fp
0bd8c     30 A0 85 F1 | 	sub	fp, #48
0bd90     D0 4A 62 FC | 	wrlong	local02, fp
0bd94     2C A0 05 F1 | 	add	fp, #44
0bd98     D0 4A 02 FB | 	rdlong	local02, fp
0bd9c     24 A0 85 F1 | 	sub	fp, #36
0bda0     D0 4A 62 FC | 	wrlong	local02, fp
0bda4     08 A0 85 F1 | 	sub	fp, #8
0bda8     D0 3E 02 F6 | 	mov	arg01, fp
0bdac     38 A0 85 F1 | 	sub	fp, #56
0bdb0     00 40 06 F6 | 	mov	arg02, #0
0bdb4     B8 C3 BF FD | 	call	#_ff_cc_dir_sdi_0400
0bdb8     0B 4F 02 F6 | 	mov	local04, result1
0bdbc     08 A0 05 F1 | 	add	fp, #8
0bdc0     D0 4E 62 FC | 	wrlong	local04, fp
0bdc4     D0 4A 0A FB | 	rdlong	local02, fp wz
0bdc8     08 A0 85 F1 | 	sub	fp, #8
0bdcc     4C 00 90 5D |  if_ne	jmp	#LR__0748
0bdd0     38 A0 05 F1 | 	add	fp, #56
0bdd4     D0 3E 02 F6 | 	mov	arg01, fp
0bdd8     38 A0 85 F1 | 	sub	fp, #56
0bddc     00 40 06 F6 | 	mov	arg02, #0
0bde0     5C C8 BF FD | 	call	#_ff_cc_dir_read_0416
0bde4     08 A0 05 F1 | 	add	fp, #8
0bde8     D0 16 62 FC | 	wrlong	result1, fp
0bdec     D0 4A 0A FB | 	rdlong	local02, fp wz
0bdf0     08 A0 85 F1 | 	sub	fp, #8
0bdf4     08 A0 05 A1 |  if_e	add	fp, #8
0bdf8     D0 0E 68 AC |  if_e	wrlong	#7, fp
0bdfc     08 A0 85 A1 |  if_e	sub	fp, #8
0be00     08 A0 05 F1 | 	add	fp, #8
0be04     D0 4A 02 FB | 	rdlong	local02, fp
0be08     08 A0 85 F1 | 	sub	fp, #8
0be0c     04 4A 0E F2 | 	cmp	local02, #4 wz
0be10     08 A0 05 A1 |  if_e	add	fp, #8
0be14     D0 00 68 AC |  if_e	wrlong	#0, fp
0be18     08 A0 85 A1 |  if_e	sub	fp, #8
0be1c                 | LR__0748
0be1c                 | LR__0749
0be1c                 | LR__0750
0be1c     08 A0 05 F1 | 	add	fp, #8
0be20     D0 4A 0A FB | 	rdlong	local02, fp wz
0be24     08 A0 85 F1 | 	sub	fp, #8
0be28     A0 00 90 5D |  if_ne	jmp	#LR__0753
0be2c     0C A0 05 F1 | 	add	fp, #12
0be30     D0 3E 02 F6 | 	mov	arg01, fp
0be34     0C A0 85 F1 | 	sub	fp, #12
0be38     A4 CA BF FD | 	call	#_ff_cc_dir_remove_0426
0be3c     08 A0 05 F1 | 	add	fp, #8
0be40     D0 16 62 FC | 	wrlong	result1, fp
0be44     D0 4A 0A FB | 	rdlong	local02, fp wz
0be48     08 A0 85 F1 | 	sub	fp, #8
0be4c     50 00 90 5D |  if_ne	jmp	#LR__0751
0be50     64 A0 05 F1 | 	add	fp, #100
0be54     D0 50 0A FB | 	rdlong	local05, fp wz
0be58     64 A0 85 F1 | 	sub	fp, #100
0be5c     40 00 90 AD |  if_e	jmp	#LR__0751
0be60     0C A0 05 F1 | 	add	fp, #12
0be64     D0 4A 02 F6 | 	mov	local02, fp
0be68     25 53 02 F6 | 	mov	local06, local02
0be6c     58 A0 05 F1 | 	add	fp, #88
0be70     D0 4E 02 FB | 	rdlong	local04, fp
0be74     64 A0 85 F1 | 	sub	fp, #100
0be78     27 51 02 F6 | 	mov	local05, local04
0be7c     00 4C 06 F6 | 	mov	local03, #0
0be80     29 3F 02 F6 | 	mov	arg01, local06
0be84     28 41 02 F6 | 	mov	arg02, local05
0be88     00 42 06 F6 | 	mov	arg03, #0
0be8c     8C BE BF FD | 	call	#_ff_cc_remove_chain_0385
0be90     0B 49 02 F6 | 	mov	local01, result1
0be94     08 A0 05 F1 | 	add	fp, #8
0be98     D0 48 62 FC | 	wrlong	local01, fp
0be9c     08 A0 85 F1 | 	sub	fp, #8
0bea0                 | LR__0751
0bea0     08 A0 05 F1 | 	add	fp, #8
0bea4     D0 4A 0A FB | 	rdlong	local02, fp wz
0bea8     08 A0 85 F1 | 	sub	fp, #8
0beac     1C 00 90 5D |  if_ne	jmp	#LR__0752
0beb0     68 A0 05 F1 | 	add	fp, #104
0beb4     D0 3E 02 FB | 	rdlong	arg01, fp
0beb8     68 A0 85 F1 | 	sub	fp, #104
0bebc     D8 B7 BF FD | 	call	#_ff_cc_sync_fs_0371
0bec0     08 A0 05 F1 | 	add	fp, #8
0bec4     D0 16 62 FC | 	wrlong	result1, fp
0bec8     08 A0 85 F1 | 	sub	fp, #8
0becc                 | LR__0752
0becc                 | LR__0753
0becc                 | LR__0754
0becc                 | LR__0755
0becc                 | ' 			}
0becc                 | ' 		}
0becc                 | ' 		;
0becc                 | ' 	}
0becc                 | ' 
0becc                 | ' 	return res ;
0becc     08 A0 05 F1 | 	add	fp, #8
0bed0     D0 16 02 FB | 	rdlong	result1, fp
0bed4     08 A0 85 F1 | 	sub	fp, #8
0bed8     D0 F0 03 F6 | 	mov	ptra, fp
0bedc     E0 00 A0 FD | 	call	#popregs_
0bee0                 | _ff_cc_f_unlink_ret
0bee0     2D 00 64 FD | 	ret
0bee4                 | 
0bee4                 | _ff_cc_f_mkdir
0bee4     06 9C 05 F6 | 	mov	COUNT_, #6
0bee8     D1 00 A0 FD | 	call	#pushregs_
0beec     58 F0 07 F1 | 	add	ptra, #88
0bef0     04 A0 05 F1 | 	add	fp, #4
0bef4     D0 3E 62 FC | 	wrlong	arg01, fp
0bef8     D0 3E 02 F6 | 	mov	arg01, fp
0befc     44 A0 05 F1 | 	add	fp, #68
0bf00     D0 40 02 F6 | 	mov	arg02, fp
0bf04     48 A0 85 F1 | 	sub	fp, #72
0bf08     02 42 06 F6 | 	mov	arg03, #2
0bf0c     F4 D2 BF FD | 	call	#_ff_cc_mount_volume_0465
0bf10     0B 49 02 F6 | 	mov	local01, result1
0bf14     08 A0 05 F1 | 	add	fp, #8
0bf18     D0 48 62 FC | 	wrlong	local01, fp
0bf1c     D0 4A 0A FB | 	rdlong	local02, fp wz
0bf20     08 A0 85 F1 | 	sub	fp, #8
0bf24     04 03 90 5D |  if_ne	jmp	#LR__0765
0bf28     48 A0 05 F1 | 	add	fp, #72
0bf2c     D0 4A 02 FB | 	rdlong	local02, fp
0bf30     3C A0 85 F1 | 	sub	fp, #60
0bf34     D0 4A 62 FC | 	wrlong	local02, fp
0bf38     D0 3E 02 F6 | 	mov	arg01, fp
0bf3c     08 A0 85 F1 | 	sub	fp, #8
0bf40     D0 4C 02 FB | 	rdlong	local03, fp
0bf44     04 A0 85 F1 | 	sub	fp, #4
0bf48     26 41 02 F6 | 	mov	arg02, local03
0bf4c     78 CD BF FD | 	call	#_ff_cc_follow_path_0442
0bf50     0B 4F 02 F6 | 	mov	local04, result1
0bf54     08 A0 05 F1 | 	add	fp, #8
0bf58     D0 4E 62 FC | 	wrlong	local04, fp
0bf5c     27 51 02 F6 | 	mov	local05, local04
0bf60     08 A0 85 F1 | 	sub	fp, #8
0bf64     28 4B 0A F6 | 	mov	local02, local05 wz
0bf68     08 A0 05 A1 |  if_e	add	fp, #8
0bf6c     D0 10 68 AC |  if_e	wrlong	#8, fp
0bf70     08 A0 85 A1 |  if_e	sub	fp, #8
0bf74     08 A0 05 F1 | 	add	fp, #8
0bf78     D0 4A 02 FB | 	rdlong	local02, fp
0bf7c     08 A0 85 F1 | 	sub	fp, #8
0bf80     04 4A 0E F2 | 	cmp	local02, #4 wz
0bf84     A4 02 90 5D |  if_ne	jmp	#LR__0764
0bf88     48 A0 05 F1 | 	add	fp, #72
0bf8c     D0 4A 02 FB | 	rdlong	local02, fp
0bf90     10 A0 85 F1 | 	sub	fp, #16
0bf94     D0 4A 62 FC | 	wrlong	local02, fp
0bf98     D0 3E 02 F6 | 	mov	arg01, fp
0bf9c     38 A0 85 F1 | 	sub	fp, #56
0bfa0     00 40 06 F6 | 	mov	arg02, #0
0bfa4     8C BE BF FD | 	call	#_ff_cc_create_chain_0391
0bfa8     0B 53 02 F6 | 	mov	local06, result1
0bfac     4C A0 05 F1 | 	add	fp, #76
0bfb0     D0 52 62 FC | 	wrlong	local06, fp
0bfb4     44 A0 85 F1 | 	sub	fp, #68
0bfb8     D0 00 68 FC | 	wrlong	#0, fp
0bfbc     44 A0 05 F1 | 	add	fp, #68
0bfc0     D0 4A 0A FB | 	rdlong	local02, fp wz
0bfc4     4C A0 85 F1 | 	sub	fp, #76
0bfc8     08 A0 05 A1 |  if_e	add	fp, #8
0bfcc     D0 0E 68 AC |  if_e	wrlong	#7, fp
0bfd0     08 A0 85 A1 |  if_e	sub	fp, #8
0bfd4     4C A0 05 F1 | 	add	fp, #76
0bfd8     D0 4A 02 FB | 	rdlong	local02, fp
0bfdc     4C A0 85 F1 | 	sub	fp, #76
0bfe0     01 4A 0E F2 | 	cmp	local02, #1 wz
0bfe4     08 A0 05 A1 |  if_e	add	fp, #8
0bfe8     D0 04 68 AC |  if_e	wrlong	#2, fp
0bfec     08 A0 85 A1 |  if_e	sub	fp, #8
0bff0     4C A0 05 F1 | 	add	fp, #76
0bff4     D0 4A 02 FB | 	rdlong	local02, fp
0bff8     4C A0 85 F1 | 	sub	fp, #76
0bffc     FF FF 7F FF 
0c000     FF 4B 0E F2 | 	cmp	local02, ##-1 wz
0c004     08 A0 05 A1 |  if_e	add	fp, #8
0c008     D0 02 68 AC |  if_e	wrlong	#1, fp
0c00c     08 A0 85 A1 |  if_e	sub	fp, #8
0c010     54 A0 05 F1 | 	add	fp, #84
0c014     80 10 A7 FF 
0c018     D0 00 68 FC | 	wrlong	##1310785536, fp
0c01c     4C A0 85 F1 | 	sub	fp, #76
0c020     D0 4A 0A FB | 	rdlong	local02, fp wz
0c024     08 A0 85 F1 | 	sub	fp, #8
0c028     48 01 90 5D |  if_ne	jmp	#LR__0761
0c02c     48 A0 05 F1 | 	add	fp, #72
0c030     D0 3E 02 FB | 	rdlong	arg01, fp
0c034     04 A0 05 F1 | 	add	fp, #4
0c038     D0 52 02 FB | 	rdlong	local06, fp
0c03c     4C A0 85 F1 | 	sub	fp, #76
0c040     29 4D 02 F6 | 	mov	local03, local06
0c044     26 41 02 F6 | 	mov	arg02, local03
0c048     48 C0 BF FD | 	call	#_ff_cc_dir_clear_0396
0c04c     0B 4F 02 F6 | 	mov	local04, result1
0c050     08 A0 05 F1 | 	add	fp, #8
0c054     D0 4E 62 FC | 	wrlong	local04, fp
0c058     27 51 02 F6 | 	mov	local05, local04
0c05c     08 A0 85 F1 | 	sub	fp, #8
0c060     28 4B 0A F6 | 	mov	local02, local05 wz
0c064     0C 01 90 5D |  if_ne	jmp	#LR__0760
0c068     48 A0 05 F1 | 	add	fp, #72
0c06c     D0 3E 02 FB | 	rdlong	arg01, fp
0c070     48 A0 85 F1 | 	sub	fp, #72
0c074     30 3E 06 F1 | 	add	arg01, #48
0c078     20 40 06 F6 | 	mov	arg02, #32
0c07c     0B 42 06 F6 | 	mov	arg03, #11
0c080                 | ' {
0c080                 | ' 	BYTE *d = (BYTE*)dst;
0c080                 | ' 
0c080                 | ' 	do {
0c080     88 3F 9F FE | 	loc	pa,	#(@LR__0758-@LR__0756)
0c084     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0c088                 | LR__0756
0c088     0B 04 DC FC | 	rep	@LR__0759, #11
0c08c                 | LR__0757
0c08c     1F 41 42 FC | 	wrbyte	arg02, arg01
0c090     01 3E 06 F1 | 	add	arg01, #1
0c094                 | LR__0758
0c094                 | LR__0759
0c094     48 A0 05 F1 | 	add	fp, #72
0c098     D0 4A 02 FB | 	rdlong	local02, fp
0c09c     30 4A 06 F1 | 	add	local02, #48
0c0a0     25 5D 48 FC | 	wrbyte	#46, local02
0c0a4     D0 4A 02 FB | 	rdlong	local02, fp
0c0a8     3B 4A 06 F1 | 	add	local02, #59
0c0ac     25 21 48 FC | 	wrbyte	#16, local02
0c0b0     D0 3E 02 FB | 	rdlong	arg01, fp
0c0b4     46 3E 06 F1 | 	add	arg01, #70
0c0b8     0C A0 05 F1 | 	add	fp, #12
0c0bc     D0 40 02 FB | 	rdlong	arg02, fp
0c0c0     54 A0 85 F1 | 	sub	fp, #84
0c0c4     C0 B3 BF FD | 	call	#_ff_cc_st_dword_0353
0c0c8     48 A0 05 F1 | 	add	fp, #72
0c0cc     D0 3E 02 FB | 	rdlong	arg01, fp
0c0d0     1F 41 02 F6 | 	mov	arg02, arg01
0c0d4     30 40 06 F1 | 	add	arg02, #48
0c0d8     04 A0 05 F1 | 	add	fp, #4
0c0dc     D0 42 02 FB | 	rdlong	arg03, fp
0c0e0     4C A0 85 F1 | 	sub	fp, #76
0c0e4     08 C5 BF FD | 	call	#_ff_cc_st_clust_0411
0c0e8     48 A0 05 F1 | 	add	fp, #72
0c0ec     D0 3E 02 FB | 	rdlong	arg01, fp
0c0f0     50 3E 06 F1 | 	add	arg01, #80
0c0f4     D0 40 02 FB | 	rdlong	arg02, fp
0c0f8     48 A0 85 F1 | 	sub	fp, #72
0c0fc     30 40 06 F1 | 	add	arg02, #48
0c100     20 42 06 F6 | 	mov	arg03, #32
0c104     AC B3 BF FD | 	call	#_ff_cc_mem_cpy_0356
0c108     48 A0 05 F1 | 	add	fp, #72
0c10c     D0 4A 02 FB | 	rdlong	local02, fp
0c110     51 4A 06 F1 | 	add	local02, #81
0c114     25 5D 48 FC | 	wrbyte	#46, local02
0c118     34 A0 85 F1 | 	sub	fp, #52
0c11c     D0 4A 02 FB | 	rdlong	local02, fp
0c120     3C A0 05 F1 | 	add	fp, #60
0c124     D0 4A 62 FC | 	wrlong	local02, fp
0c128     08 A0 85 F1 | 	sub	fp, #8
0c12c     D0 3E 02 FB | 	rdlong	arg01, fp
0c130     1F 41 02 F6 | 	mov	arg02, arg01
0c134     50 40 06 F1 | 	add	arg02, #80
0c138     08 A0 05 F1 | 	add	fp, #8
0c13c     D0 42 02 FB | 	rdlong	arg03, fp
0c140     50 A0 85 F1 | 	sub	fp, #80
0c144     A8 C4 BF FD | 	call	#_ff_cc_st_clust_0411
0c148     48 A0 05 F1 | 	add	fp, #72
0c14c     D0 4A 02 FB | 	rdlong	local02, fp
0c150     03 4A 06 F1 | 	add	local02, #3
0c154     25 03 48 FC | 	wrbyte	#1, local02
0c158     3C A0 85 F1 | 	sub	fp, #60
0c15c     D0 3E 02 F6 | 	mov	arg01, fp
0c160     0C A0 85 F1 | 	sub	fp, #12
0c164     E4 C6 BF FD | 	call	#_ff_cc_dir_register_0423
0c168     08 A0 05 F1 | 	add	fp, #8
0c16c     D0 16 62 FC | 	wrlong	result1, fp
0c170     08 A0 85 F1 | 	sub	fp, #8
0c174                 | LR__0760
0c174                 | LR__0761
0c174     08 A0 05 F1 | 	add	fp, #8
0c178     D0 4A 0A FB | 	rdlong	local02, fp wz
0c17c     08 A0 85 F1 | 	sub	fp, #8
0c180     8C 00 90 5D |  if_ne	jmp	#LR__0762
0c184     28 A0 05 F1 | 	add	fp, #40
0c188     D0 3E 02 FB | 	rdlong	arg01, fp
0c18c     16 3E 06 F1 | 	add	arg01, #22
0c190     2C A0 05 F1 | 	add	fp, #44
0c194     D0 40 02 FB | 	rdlong	arg02, fp
0c198     54 A0 85 F1 | 	sub	fp, #84
0c19c     E8 B2 BF FD | 	call	#_ff_cc_st_dword_0353
0c1a0     48 A0 05 F1 | 	add	fp, #72
0c1a4     D0 3E 02 FB | 	rdlong	arg01, fp
0c1a8     20 A0 85 F1 | 	sub	fp, #32
0c1ac     D0 40 02 FB | 	rdlong	arg02, fp
0c1b0     24 A0 05 F1 | 	add	fp, #36
0c1b4     D0 42 02 FB | 	rdlong	arg03, fp
0c1b8     4C A0 85 F1 | 	sub	fp, #76
0c1bc     30 C4 BF FD | 	call	#_ff_cc_st_clust_0411
0c1c0     28 A0 05 F1 | 	add	fp, #40
0c1c4     D0 4A 02 FB | 	rdlong	local02, fp
0c1c8     0B 4A 06 F1 | 	add	local02, #11
0c1cc     25 21 48 FC | 	wrbyte	#16, local02
0c1d0     20 A0 05 F1 | 	add	fp, #32
0c1d4     D0 4A 02 FB | 	rdlong	local02, fp
0c1d8     03 4A 06 F1 | 	add	local02, #3
0c1dc     25 03 48 FC | 	wrbyte	#1, local02
0c1e0     40 A0 85 F1 | 	sub	fp, #64
0c1e4     D0 4A 0A FB | 	rdlong	local02, fp wz
0c1e8     08 A0 85 F1 | 	sub	fp, #8
0c1ec     3C 00 90 5D |  if_ne	jmp	#LR__0763
0c1f0     48 A0 05 F1 | 	add	fp, #72
0c1f4     D0 3E 02 FB | 	rdlong	arg01, fp
0c1f8     48 A0 85 F1 | 	sub	fp, #72
0c1fc     98 B4 BF FD | 	call	#_ff_cc_sync_fs_0371
0c200     08 A0 05 F1 | 	add	fp, #8
0c204     D0 16 62 FC | 	wrlong	result1, fp
0c208     08 A0 85 F1 | 	sub	fp, #8
0c20c     1C 00 90 FD | 	jmp	#LR__0763
0c210                 | LR__0762
0c210     38 A0 05 F1 | 	add	fp, #56
0c214     D0 3E 02 F6 | 	mov	arg01, fp
0c218     14 A0 05 F1 | 	add	fp, #20
0c21c     D0 40 02 FB | 	rdlong	arg02, fp
0c220     4C A0 85 F1 | 	sub	fp, #76
0c224     00 42 06 F6 | 	mov	arg03, #0
0c228     F0 BA BF FD | 	call	#_ff_cc_remove_chain_0385
0c22c                 | LR__0763
0c22c                 | LR__0764
0c22c                 | LR__0765
0c22c                 | ' 				remove_chain(&sobj, dcl, 0);
0c22c                 | ' 			}
0c22c                 | ' 		}
0c22c                 | ' 		;
0c22c                 | ' 	}
0c22c                 | ' 
0c22c                 | ' 	return res ;
0c22c     08 A0 05 F1 | 	add	fp, #8
0c230     D0 16 02 FB | 	rdlong	result1, fp
0c234     08 A0 85 F1 | 	sub	fp, #8
0c238     D0 F0 03 F6 | 	mov	ptra, fp
0c23c     E0 00 A0 FD | 	call	#popregs_
0c240                 | _ff_cc_f_mkdir_ret
0c240     2D 00 64 FD | 	ret
0c244                 | 
0c244                 | _ff_cc_f_rename
0c244     09 9C 05 F6 | 	mov	COUNT_, #9
0c248     D1 00 A0 FD | 	call	#pushregs_
0c24c     94 F0 07 F1 | 	add	ptra, #148
0c250     04 A0 05 F1 | 	add	fp, #4
0c254     D0 3E 62 FC | 	wrlong	arg01, fp
0c258     04 A0 05 F1 | 	add	fp, #4
0c25c     D0 40 62 FC | 	wrlong	arg02, fp
0c260     D0 3E 02 F6 | 	mov	arg01, fp
0c264     08 A0 85 F1 | 	sub	fp, #8
0c268     80 CC BF FD | 	call	#_ff_cc_get_ldnumber_0448
0c26c     04 A0 05 F1 | 	add	fp, #4
0c270     D0 3E 02 F6 | 	mov	arg01, fp
0c274     64 A0 05 F1 | 	add	fp, #100
0c278     D0 40 02 F6 | 	mov	arg02, fp
0c27c     68 A0 85 F1 | 	sub	fp, #104
0c280     02 42 06 F6 | 	mov	arg03, #2
0c284     7C CF BF FD | 	call	#_ff_cc_mount_volume_0465
0c288     0B 49 02 F6 | 	mov	local01, result1
0c28c     0C A0 05 F1 | 	add	fp, #12
0c290     D0 48 62 FC | 	wrlong	local01, fp
0c294     D0 4A 0A FB | 	rdlong	local02, fp wz
0c298     0C A0 85 F1 | 	sub	fp, #12
0c29c     B8 03 90 5D |  if_ne	jmp	#LR__0780
0c2a0     68 A0 05 F1 | 	add	fp, #104
0c2a4     D0 4A 02 FB | 	rdlong	local02, fp
0c2a8     58 A0 85 F1 | 	sub	fp, #88
0c2ac     D0 4A 62 FC | 	wrlong	local02, fp
0c2b0     D0 3E 02 F6 | 	mov	arg01, fp
0c2b4     0C A0 85 F1 | 	sub	fp, #12
0c2b8     D0 40 02 FB | 	rdlong	arg02, fp
0c2bc     04 A0 85 F1 | 	sub	fp, #4
0c2c0     04 CA BF FD | 	call	#_ff_cc_follow_path_0442
0c2c4     0B 4D 02 F6 | 	mov	local03, result1
0c2c8     0C A0 05 F1 | 	add	fp, #12
0c2cc     D0 4C 62 FC | 	wrlong	local03, fp
0c2d0     D0 4E 0A FB | 	rdlong	local04, fp wz
0c2d4     0C A0 85 F1 | 	sub	fp, #12
0c2d8     2C 00 90 5D |  if_ne	jmp	#LR__0766
0c2dc     3B A0 05 F1 | 	add	fp, #59
0c2e0     D0 50 C2 FA | 	rdbyte	local05, fp
0c2e4     3B A0 85 F1 | 	sub	fp, #59
0c2e8     28 53 02 F6 | 	mov	local06, local05
0c2ec     07 52 46 F7 | 	zerox	local06, #7
0c2f0     A0 52 0E F5 | 	and	local06, #160 wz
0c2f4     10 00 90 AD |  if_e	jmp	#LR__0766
0c2f8     06 4A 06 F6 | 	mov	local02, #6
0c2fc     0C A0 05 F1 | 	add	fp, #12
0c300     D0 0C 68 FC | 	wrlong	#6, fp
0c304     0C A0 85 F1 | 	sub	fp, #12
0c308                 | LR__0766
0c308     0C A0 05 F1 | 	add	fp, #12
0c30c     D0 4A 0A FB | 	rdlong	local02, fp wz
0c310     0C A0 85 F1 | 	sub	fp, #12
0c314     40 03 90 5D |  if_ne	jmp	#LR__0779
0c318     6C A0 05 F1 | 	add	fp, #108
0c31c     D0 3E 02 F6 | 	mov	arg01, fp
0c320     40 A0 85 F1 | 	sub	fp, #64
0c324     D0 40 02 FB | 	rdlong	arg02, fp
0c328     2C A0 85 F1 | 	sub	fp, #44
0c32c     20 42 06 F6 | 	mov	arg03, #32
0c330     80 B1 BF FD | 	call	#_ff_cc_mem_cpy_0356
0c334     3C A0 05 F1 | 	add	fp, #60
0c338     D0 3E 02 F6 | 	mov	arg01, fp
0c33c     2C A0 85 F1 | 	sub	fp, #44
0c340     D0 40 02 F6 | 	mov	arg02, fp
0c344     10 A0 85 F1 | 	sub	fp, #16
0c348     2C 42 06 F6 | 	mov	arg03, #44
0c34c     64 B1 BF FD | 	call	#_ff_cc_mem_cpy_0356
0c350     3C A0 05 F1 | 	add	fp, #60
0c354     D0 3E 02 F6 | 	mov	arg01, fp
0c358     34 A0 85 F1 | 	sub	fp, #52
0c35c     D0 40 02 FB | 	rdlong	arg02, fp
0c360     08 A0 85 F1 | 	sub	fp, #8
0c364     60 C9 BF FD | 	call	#_ff_cc_follow_path_0442
0c368     0C A0 05 F1 | 	add	fp, #12
0c36c     D0 16 62 FC | 	wrlong	result1, fp
0c370     D0 4A 0A FB | 	rdlong	local02, fp wz
0c374     0C A0 85 F1 | 	sub	fp, #12
0c378     4C 00 90 5D |  if_ne	jmp	#LR__0769
0c37c     44 A0 05 F1 | 	add	fp, #68
0c380     D0 4E 02 FB | 	rdlong	local04, fp
0c384     2C A0 85 F1 | 	sub	fp, #44
0c388     D0 50 02 FB | 	rdlong	local05, fp
0c38c     18 A0 85 F1 | 	sub	fp, #24
0c390     28 4F 0A F2 | 	cmp	local04, local05 wz
0c394     20 00 90 5D |  if_ne	jmp	#LR__0767
0c398     4C A0 05 F1 | 	add	fp, #76
0c39c     D0 48 02 FB | 	rdlong	local01, fp
0c3a0     2C A0 85 F1 | 	sub	fp, #44
0c3a4     D0 54 02 FB | 	rdlong	local07, fp
0c3a8     20 A0 85 F1 | 	sub	fp, #32
0c3ac     2A 49 0A F2 | 	cmp	local01, local07 wz
0c3b0     04 4A 06 A6 |  if_e	mov	local02, #4
0c3b4     04 00 90 AD |  if_e	jmp	#LR__0768
0c3b8                 | LR__0767
0c3b8     08 4A 06 F6 | 	mov	local02, #8
0c3bc                 | LR__0768
0c3bc     0C A0 05 F1 | 	add	fp, #12
0c3c0     D0 4A 62 FC | 	wrlong	local02, fp
0c3c4     0C A0 85 F1 | 	sub	fp, #12
0c3c8                 | LR__0769
0c3c8     0C A0 05 F1 | 	add	fp, #12
0c3cc     D0 4A 02 FB | 	rdlong	local02, fp
0c3d0     0C A0 85 F1 | 	sub	fp, #12
0c3d4     04 4A 0E F2 | 	cmp	local02, #4 wz
0c3d8     28 02 90 5D |  if_ne	jmp	#LR__0776
0c3dc     3C A0 05 F1 | 	add	fp, #60
0c3e0     D0 3E 02 F6 | 	mov	arg01, fp
0c3e4     3C A0 85 F1 | 	sub	fp, #60
0c3e8     60 C4 BF FD | 	call	#_ff_cc_dir_register_0423
0c3ec     0C A0 05 F1 | 	add	fp, #12
0c3f0     D0 16 62 FC | 	wrlong	result1, fp
0c3f4     D0 4A 0A FB | 	rdlong	local02, fp wz
0c3f8     0C A0 85 F1 | 	sub	fp, #12
0c3fc     04 02 90 5D |  if_ne	jmp	#LR__0775
0c400     58 A0 05 F1 | 	add	fp, #88
0c404     D0 3E 02 FB | 	rdlong	arg01, fp
0c408     34 A0 05 F1 | 	add	fp, #52
0c40c     D0 3E 62 FC | 	wrlong	arg01, fp
0c410     0D 3E 06 F1 | 	add	arg01, #13
0c414     20 A0 85 F1 | 	sub	fp, #32
0c418     D0 40 02 F6 | 	mov	arg02, fp
0c41c     6C A0 85 F1 | 	sub	fp, #108
0c420     0D 40 06 F1 | 	add	arg02, #13
0c424     13 42 06 F6 | 	mov	arg03, #19
0c428     88 B0 BF FD | 	call	#_ff_cc_mem_cpy_0356
0c42c     8C A0 05 F1 | 	add	fp, #140
0c430     D0 4A 02 FB | 	rdlong	local02, fp
0c434     15 A0 85 F1 | 	sub	fp, #21
0c438     D0 52 C2 FA | 	rdbyte	local06, fp
0c43c     0B 4A 06 F1 | 	add	local02, #11
0c440     25 53 42 FC | 	wrbyte	local06, local02
0c444     15 A0 05 F1 | 	add	fp, #21
0c448     D0 4E 02 FB | 	rdlong	local04, fp
0c44c     8C A0 85 F1 | 	sub	fp, #140
0c450     0B 4E 06 F1 | 	add	local04, #11
0c454     27 4B C2 FA | 	rdbyte	local02, local04
0c458     10 4A CE F7 | 	test	local02, #16 wz
0c45c     24 00 90 5D |  if_ne	jmp	#LR__0770
0c460     8C A0 05 F1 | 	add	fp, #140
0c464     D0 4A 02 FB | 	rdlong	local02, fp
0c468     25 51 02 F6 | 	mov	local05, local02
0c46c     8C A0 85 F1 | 	sub	fp, #140
0c470     0B 50 06 F1 | 	add	local05, #11
0c474     28 53 C2 FA | 	rdbyte	local06, local05
0c478     20 52 46 F5 | 	or	local06, #32
0c47c     0B 4A 06 F1 | 	add	local02, #11
0c480     25 53 42 FC | 	wrbyte	local06, local02
0c484                 | LR__0770
0c484     68 A0 05 F1 | 	add	fp, #104
0c488     D0 4A 02 FB | 	rdlong	local02, fp
0c48c     03 4A 06 F1 | 	add	local02, #3
0c490     25 03 48 FC | 	wrbyte	#1, local02
0c494     24 A0 05 F1 | 	add	fp, #36
0c498     D0 4E 02 FB | 	rdlong	local04, fp
0c49c     8C A0 85 F1 | 	sub	fp, #140
0c4a0     0B 4E 06 F1 | 	add	local04, #11
0c4a4     27 4B C2 FA | 	rdbyte	local02, local04
0c4a8     10 4A CE F7 | 	test	local02, #16 wz
0c4ac     54 01 90 AD |  if_e	jmp	#LR__0774
0c4b0     18 A0 05 F1 | 	add	fp, #24
0c4b4     D0 4C 02 FB | 	rdlong	local03, fp
0c4b8     2C A0 05 F1 | 	add	fp, #44
0c4bc     D0 56 02 FB | 	rdlong	local08, fp
0c4c0     44 A0 85 F1 | 	sub	fp, #68
0c4c4     2B 4D 0A F2 | 	cmp	local03, local08 wz
0c4c8     38 01 90 AD |  if_e	jmp	#LR__0774
0c4cc     68 A0 05 F1 | 	add	fp, #104
0c4d0     D0 4A 02 FB | 	rdlong	local02, fp
0c4d4     25 51 02 F6 | 	mov	local05, local02
0c4d8     28 53 02 F6 | 	mov	local06, local05
0c4dc     24 A0 05 F1 | 	add	fp, #36
0c4e0     D0 48 02 FB | 	rdlong	local01, fp
0c4e4     8C A0 85 F1 | 	sub	fp, #140
0c4e8     24 4D 02 F6 | 	mov	local03, local01
0c4ec     29 3F 02 F6 | 	mov	arg01, local06
0c4f0     26 41 02 F6 | 	mov	arg02, local03
0c4f4     A0 C0 BF FD | 	call	#_ff_cc_ld_clust_0410
0c4f8     0B 57 02 F6 | 	mov	local08, result1
0c4fc     25 3F 02 F6 | 	mov	arg01, local02
0c500     2B 41 02 F6 | 	mov	arg02, local08
0c504     0C B3 BF FD | 	call	#_ff_cc_clst2sect_0372
0c508     0B 59 02 F6 | 	mov	local09, result1
0c50c     90 A0 05 F1 | 	add	fp, #144
0c510     D0 58 62 FC | 	wrlong	local09, fp
0c514     D0 4E 0A FB | 	rdlong	local04, fp wz
0c518     90 A0 85 F1 | 	sub	fp, #144
0c51c     14 00 90 5D |  if_ne	jmp	#LR__0771
0c520     02 4A 06 F6 | 	mov	local02, #2
0c524     0C A0 05 F1 | 	add	fp, #12
0c528     D0 04 68 FC | 	wrlong	#2, fp
0c52c     0C A0 85 F1 | 	sub	fp, #12
0c530     D0 00 90 FD | 	jmp	#LR__0773
0c534                 | LR__0771
0c534     68 A0 05 F1 | 	add	fp, #104
0c538     D0 3E 02 FB | 	rdlong	arg01, fp
0c53c     28 A0 05 F1 | 	add	fp, #40
0c540     D0 40 02 FB | 	rdlong	arg02, fp
0c544     90 A0 85 F1 | 	sub	fp, #144
0c548     D0 B0 BF FD | 	call	#_ff_cc_move_window_0369
0c54c     0B 4D 02 F6 | 	mov	local03, result1
0c550     0C A0 05 F1 | 	add	fp, #12
0c554     D0 4C 62 FC | 	wrlong	local03, fp
0c558     5C A0 05 F1 | 	add	fp, #92
0c55c     D0 52 02 FB | 	rdlong	local06, fp
0c560     29 51 02 F6 | 	mov	local05, local06
0c564     30 50 06 F1 | 	add	local05, #48
0c568     28 4B 02 F6 | 	mov	local02, local05
0c56c     20 4A 06 F1 | 	add	local02, #32
0c570     24 A0 05 F1 | 	add	fp, #36
0c574     D0 4A 62 FC | 	wrlong	local02, fp
0c578     80 A0 85 F1 | 	sub	fp, #128
0c57c     D0 4E 02 FB | 	rdlong	local04, fp
0c580     0C A0 85 F1 | 	sub	fp, #12
0c584     27 4B 0A F6 | 	mov	local02, local04 wz
0c588     78 00 90 5D |  if_ne	jmp	#LR__0772
0c58c     8C A0 05 F1 | 	add	fp, #140
0c590     D0 4C 02 FB | 	rdlong	local03, fp
0c594     8C A0 85 F1 | 	sub	fp, #140
0c598     26 51 02 F6 | 	mov	local05, local03
0c59c     01 50 06 F1 | 	add	local05, #1
0c5a0     28 49 C2 FA | 	rdbyte	local01, local05
0c5a4     01 50 86 F1 | 	sub	local05, #1
0c5a8     24 53 02 F6 | 	mov	local06, local01
0c5ac     07 52 46 F7 | 	zerox	local06, #7
0c5b0     2E 52 0E F2 | 	cmp	local06, #46 wz
0c5b4     4C 00 90 5D |  if_ne	jmp	#LR__0772
0c5b8     68 A0 05 F1 | 	add	fp, #104
0c5bc     D0 3E 02 FB | 	rdlong	arg01, fp
0c5c0     24 A0 05 F1 | 	add	fp, #36
0c5c4     D0 50 02 FB | 	rdlong	local05, fp
0c5c8     48 A0 85 F1 | 	sub	fp, #72
0c5cc     D0 48 02 FB | 	rdlong	local01, fp
0c5d0     44 A0 85 F1 | 	sub	fp, #68
0c5d4     24 4D 02 F6 | 	mov	local03, local01
0c5d8     28 41 02 F6 | 	mov	arg02, local05
0c5dc     26 43 02 F6 | 	mov	arg03, local03
0c5e0     0C C0 BF FD | 	call	#_ff_cc_st_clust_0411
0c5e4     68 A0 05 F1 | 	add	fp, #104
0c5e8     D0 4E 02 FB | 	rdlong	local04, fp
0c5ec     68 A0 85 F1 | 	sub	fp, #104
0c5f0     27 4B 02 F6 | 	mov	local02, local04
0c5f4     01 52 06 F6 | 	mov	local06, #1
0c5f8     03 4A 06 F1 | 	add	local02, #3
0c5fc     25 03 48 FC | 	wrbyte	#1, local02
0c600     03 4A 86 F1 | 	sub	local02, #3
0c604                 | LR__0772
0c604                 | LR__0773
0c604                 | LR__0774
0c604                 | LR__0775
0c604                 | LR__0776
0c604     0C A0 05 F1 | 	add	fp, #12
0c608     D0 4A 0A FB | 	rdlong	local02, fp wz
0c60c     0C A0 85 F1 | 	sub	fp, #12
0c610     44 00 90 5D |  if_ne	jmp	#LR__0778
0c614     10 A0 05 F1 | 	add	fp, #16
0c618     D0 3E 02 F6 | 	mov	arg01, fp
0c61c     10 A0 85 F1 | 	sub	fp, #16
0c620     BC C2 BF FD | 	call	#_ff_cc_dir_remove_0426
0c624     0B 53 02 F6 | 	mov	local06, result1
0c628     0C A0 05 F1 | 	add	fp, #12
0c62c     D0 52 62 FC | 	wrlong	local06, fp
0c630     D0 4A 0A FB | 	rdlong	local02, fp wz
0c634     0C A0 85 F1 | 	sub	fp, #12
0c638     1C 00 90 5D |  if_ne	jmp	#LR__0777
0c63c     68 A0 05 F1 | 	add	fp, #104
0c640     D0 3E 02 FB | 	rdlong	arg01, fp
0c644     68 A0 85 F1 | 	sub	fp, #104
0c648     4C B0 BF FD | 	call	#_ff_cc_sync_fs_0371
0c64c     0C A0 05 F1 | 	add	fp, #12
0c650     D0 16 62 FC | 	wrlong	result1, fp
0c654     0C A0 85 F1 | 	sub	fp, #12
0c658                 | LR__0777
0c658                 | LR__0778
0c658                 | LR__0779
0c658                 | LR__0780
0c658                 | ' 					res = sync_fs(fs);
0c658                 | ' 				}
0c658                 | ' 			}
0c658                 | ' 
0c658                 | ' 		}
0c658                 | ' 		;
0c658                 | ' 	}
0c658                 | ' 
0c658                 | ' 	return res ;
0c658     0C A0 05 F1 | 	add	fp, #12
0c65c     D0 16 02 FB | 	rdlong	result1, fp
0c660     0C A0 85 F1 | 	sub	fp, #12
0c664     D0 F0 03 F6 | 	mov	ptra, fp
0c668     E0 00 A0 FD | 	call	#popregs_
0c66c                 | _ff_cc_f_rename_ret
0c66c     2D 00 64 FD | 	ret
0c670                 | 
0c670                 | _ff_cc_stat
0c670     09 9C 05 F6 | 	mov	COUNT_, #9
0c674     D1 00 A0 FD | 	call	#pushregs_
0c678     1F 49 02 F6 | 	mov	local01, arg01
0c67c     20 4B 02 F6 | 	mov	local02, arg02
0c680     38 0B 06 F1 | 	add	ptr___system__dat__, #312
0c684     05 17 02 F6 | 	mov	result1, ptr___system__dat__
0c688     38 0B 86 F1 | 	sub	ptr___system__dat__, #312
0c68c     0B 4D 02 F6 | 	mov	local03, result1
0c690     26 3F 02 F6 | 	mov	arg01, local03
0c694     24 41 02 F6 | 	mov	arg02, local01
0c698     00 42 06 F6 | 	mov	arg03, #0
0c69c     48 17 B0 FD | 	call	#__system____getvfsforfile
0c6a0     0B 4F 0A F6 | 	mov	local04, result1 wz
0c6a4     14 00 90 AD |  if_e	jmp	#LR__0781
0c6a8     2C 4E 06 F1 | 	add	local04, #44
0c6ac     27 51 02 FB | 	rdlong	local05, local04
0c6b0     2C 4E 86 F1 | 	sub	local04, #44
0c6b4     28 53 0A F6 | 	mov	local06, local05 wz
0c6b8     1C 00 90 5D |  if_ne	jmp	#LR__0782
0c6bc                 | LR__0781
0c6bc                 | ' #line 19 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0c6bc                 | '         return _seterror( 16 );
0c6bc     01 00 00 FF 
0c6c0     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0c6c4     05 21 68 FC | 	wrlong	#16, ptr___system__dat__
0c6c8     01 00 00 FF 
0c6cc     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0c6d0     01 16 66 F6 | 	neg	result1, #1
0c6d4     44 00 90 FD | 	jmp	#LR__0783
0c6d8                 | LR__0782
0c6d8     25 3F 02 F6 | 	mov	arg01, local02
0c6dc     00 40 06 F6 | 	mov	arg02, #0
0c6e0     30 42 06 F6 | 	mov	arg03, #48
0c6e4     1F 55 02 F6 | 	mov	local07, arg01
0c6e8     C1 00 A0 FD | 	call	#\builtin_bytefill_
0c6ec     2A 17 02 F6 | 	mov	result1, local07
0c6f0     2C 4E 06 F1 | 	add	local04, #44
0c6f4     27 53 02 FB | 	rdlong	local06, local04
0c6f8     29 51 02 FB | 	rdlong	local05, local06
0c6fc     04 52 06 F1 | 	add	local06, #4
0c700     29 57 02 FB | 	rdlong	local08, local06
0c704     26 3F 02 F6 | 	mov	arg01, local03
0c708     25 41 02 F6 | 	mov	arg02, local02
0c70c     FE 58 02 F6 | 	mov	local09, objptr
0c710     28 FD 01 F6 | 	mov	objptr, local05
0c714     2D 56 62 FD | 	call	local08
0c718     2C FD 01 F6 | 	mov	objptr, local09
0c71c                 | ' #line 29 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0c71c                 | '     r = v->stat(name, buf);
0c71c                 | ' #line 33 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0c71c                 | '     return r;
0c71c                 | LR__0783
0c71c     D0 F0 03 F6 | 	mov	ptra, fp
0c720     E0 00 A0 FD | 	call	#popregs_
0c724                 | _ff_cc_stat_ret
0c724     2D 00 64 FD | 	ret
0c728                 | 
0c728                 | _ff_cc__set_dos_error_0595
0c728     03 9C 05 F6 | 	mov	COUNT_, #3
0c72c     D1 00 A0 FD | 	call	#pushregs_
0c730     1F 49 02 F6 | 	mov	local01, arg01
0c734                 | ' #line 6871 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c734                 | '     switch (derr) {
0c734     24 4B 02 F6 | 	mov	local02, local01
0c738     14 4A 26 F3 | 	fle	local02, #20
0c73c     30 4A 62 FD | 	jmprel	local02
0c740                 | LR__0784
0c740     50 00 90 FD | 	jmp	#LR__0785
0c744     84 00 90 FD | 	jmp	#LR__0799
0c748     80 00 90 FD | 	jmp	#LR__0800
0c74c     7C 00 90 FD | 	jmp	#LR__0801
0c750     48 00 90 FD | 	jmp	#LR__0786
0c754     44 00 90 FD | 	jmp	#LR__0787
0c758     40 00 90 FD | 	jmp	#LR__0788
0c75c     44 00 90 FD | 	jmp	#LR__0789
0c760     48 00 90 FD | 	jmp	#LR__0791
0c764     54 00 90 FD | 	jmp	#LR__0794
0c768     38 00 90 FD | 	jmp	#LR__0790
0c76c     4C 00 90 FD | 	jmp	#LR__0795
0c770     48 00 90 FD | 	jmp	#LR__0796
0c774     44 00 90 FD | 	jmp	#LR__0797
0c778     50 00 90 FD | 	jmp	#LR__0802
0c77c     4C 00 90 FD | 	jmp	#LR__0802
0c780     48 00 90 FD | 	jmp	#LR__0802
0c784     2C 00 90 FD | 	jmp	#LR__0792
0c788     38 00 90 FD | 	jmp	#LR__0798
0c78c     2C 00 90 FD | 	jmp	#LR__0793
0c790     38 00 90 FD | 	jmp	#LR__0802
0c794                 | LR__0785
0c794     00 4C 06 F6 | 	mov	local03, #0
0c798                 | '         r = 0;
0c798                 | '         break;
0c798     34 00 90 FD | 	jmp	#LR__0803
0c79c                 | LR__0786
0c79c                 | LR__0787
0c79c                 | LR__0788
0c79c     04 4C 06 F6 | 	mov	local03, #4
0c7a0                 | '         r =  4 ;
0c7a0                 | '         break;
0c7a0     2C 00 90 FD | 	jmp	#LR__0803
0c7a4                 | LR__0789
0c7a4                 | LR__0790
0c7a4     06 4C 06 F6 | 	mov	local03, #6
0c7a8                 | '         r =  6 ;
0c7a8                 | '         break;
0c7a8     24 00 90 FD | 	jmp	#LR__0803
0c7ac                 | LR__0791
0c7ac     09 4C 06 F6 | 	mov	local03, #9
0c7b0                 | '         r =  9 ;
0c7b0                 | '         break;
0c7b0     1C 00 90 FD | 	jmp	#LR__0803
0c7b4                 | LR__0792
0c7b4     07 4C 06 F6 | 	mov	local03, #7
0c7b8                 | '         r =  7 ;
0c7b8                 | '         break;
0c7b8     14 00 90 FD | 	jmp	#LR__0803
0c7bc                 | LR__0793
0c7bc                 | LR__0794
0c7bc                 | LR__0795
0c7bc                 | LR__0796
0c7bc                 | LR__0797
0c7bc     0A 4C 06 F6 | 	mov	local03, #10
0c7c0                 | '         r =  10 ;
0c7c0                 | '         break;
0c7c0     0C 00 90 FD | 	jmp	#LR__0803
0c7c4                 | LR__0798
0c7c4     0B 4C 06 F6 | 	mov	local03, #11
0c7c8                 | '         r =  11 ;
0c7c8                 | '         break;
0c7c8     04 00 90 FD | 	jmp	#LR__0803
0c7cc                 | LR__0799
0c7cc                 | LR__0800
0c7cc                 | LR__0801
0c7cc                 | LR__0802
0c7cc     0C 4C 06 F6 | 	mov	local03, #12
0c7d0                 | '         r =  12 ;
0c7d0                 | '         break;
0c7d0                 | LR__0803
0c7d0                 | '     }
0c7d0                 | '     return _seterror(r);
0c7d0     01 00 00 FF 
0c7d4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0c7d8     05 4D 62 FC | 	wrlong	local03, ptr___system__dat__
0c7dc     01 00 00 FF 
0c7e0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0c7e4     00 4C 0E F2 | 	cmp	local03, #0 wz
0c7e8     01 16 66 56 |  if_ne	neg	result1, #1
0c7ec     00 16 06 A6 |  if_e	mov	result1, #0
0c7f0     D0 F0 03 F6 | 	mov	ptra, fp
0c7f4     E0 00 A0 FD | 	call	#popregs_
0c7f8                 | _ff_cc__set_dos_error_0595_ret
0c7f8     2D 00 64 FD | 	ret
0c7fc                 | 
0c7fc                 | _ff_cc_v_creat_0599
0c7fc     04 9C 05 F6 | 	mov	COUNT_, #4
0c800     D1 00 A0 FD | 	call	#pushregs_
0c804     1F 49 02 F6 | 	mov	local01, arg01
0c808     20 4B 02 F6 | 	mov	local02, arg02
0c80c     02 00 00 FF 
0c810     34 3E 06 F6 | 	mov	arg01, ##1076
0c814                 | '     return _gc_alloc(size);
0c814     10 40 06 F6 | 	mov	arg02, #16
0c818     2C 38 B0 FD | 	call	#__system___gc_doalloc
0c81c     0B 4D 0A F6 | 	mov	local03, result1 wz
0c820     1C 00 90 5D |  if_ne	jmp	#LR__0804
0c824                 | '       return _seterror( 7 );
0c824     01 00 00 FF 
0c828     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0c82c     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0c830     01 00 00 FF 
0c834     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0c838     01 16 66 F6 | 	neg	result1, #1
0c83c     58 00 90 FD | 	jmp	#LR__0806
0c840                 | LR__0804
0c840     26 3F 02 F6 | 	mov	arg01, local03
0c844     00 40 06 F6 | 	mov	arg02, #0
0c848     02 00 00 FF 
0c84c     34 42 06 F6 | 	mov	arg03, ##1076
0c850     C0 10 B0 FD | 	call	#_ff_cc_memset
0c854     02 00 00 FF 
0c858     0C 4C 06 F1 | 	add	local03, ##1036
0c85c     26 3F 02 F6 | 	mov	arg01, local03
0c860     02 00 00 FF 
0c864     0C 4C 86 F1 | 	sub	local03, ##1036
0c868     25 41 02 F6 | 	mov	arg02, local02
0c86c     07 42 06 F6 | 	mov	arg03, #7
0c870     A4 D1 BF FD | 	call	#_ff_cc_f_open
0c874     0B 4F 0A F6 | 	mov	local04, result1 wz
0c878     14 00 90 AD |  if_e	jmp	#LR__0805
0c87c     26 3F 02 F6 | 	mov	arg01, local03
0c880                 | '     return _gc_free(ptr);
0c880     FC 38 B0 FD | 	call	#__system___gc_free
0c884                 | '     free(f);
0c884                 | '     return _set_dos_error(r);
0c884     27 3F 02 F6 | 	mov	arg01, local04
0c888     9C FE BF FD | 	call	#_ff_cc__set_dos_error_0595
0c88c     08 00 90 FD | 	jmp	#LR__0806
0c890                 | LR__0805
0c890     24 4D 62 FC | 	wrlong	local03, local01
0c894                 | '   }
0c894                 | '   fil->vfsdata = f;
0c894                 | '   return 0;
0c894     00 16 06 F6 | 	mov	result1, #0
0c898                 | LR__0806
0c898     D0 F0 03 F6 | 	mov	ptra, fp
0c89c     E0 00 A0 FD | 	call	#popregs_
0c8a0                 | _ff_cc_v_creat_0599_ret
0c8a0     2D 00 64 FD | 	ret
0c8a4                 | 
0c8a4                 | _ff_cc_v_close_0602
0c8a4     02 9C 05 F6 | 	mov	COUNT_, #2
0c8a8     D1 00 A0 FD | 	call	#pushregs_
0c8ac     1F 49 02 FB | 	rdlong	local01, arg01
0c8b0     02 00 00 FF 
0c8b4     0C 48 06 F1 | 	add	local01, ##1036
0c8b8     24 3F 02 F6 | 	mov	arg01, local01
0c8bc     02 00 00 FF 
0c8c0     0C 48 86 F1 | 	sub	local01, ##1036
0c8c4     B4 E8 BF FD | 	call	#_ff_cc_f_close
0c8c8     0B 4B 02 F6 | 	mov	local02, result1
0c8cc     24 3F 02 F6 | 	mov	arg01, local01
0c8d0                 | '     return _gc_free(ptr);
0c8d0     AC 38 B0 FD | 	call	#__system___gc_free
0c8d4                 | '     FAT_FIL *f = fil->vfsdata;
0c8d4                 | '     r=f_close(&f->fil);
0c8d4                 | '     free(f);
0c8d4                 | '     return _set_dos_error(r);
0c8d4     25 3F 02 F6 | 	mov	arg01, local02
0c8d8     4C FE BF FD | 	call	#_ff_cc__set_dos_error_0595
0c8dc     D0 F0 03 F6 | 	mov	ptra, fp
0c8e0     E0 00 A0 FD | 	call	#popregs_
0c8e4                 | _ff_cc_v_close_0602_ret
0c8e4     2D 00 64 FD | 	ret
0c8e8                 | 
0c8e8                 | _ff_cc_v_opendir_0605
0c8e8     04 9C 05 F6 | 	mov	COUNT_, #4
0c8ec     D1 00 A0 FD | 	call	#pushregs_
0c8f0     1F 49 02 F6 | 	mov	local01, arg01
0c8f4     20 4B 02 F6 | 	mov	local02, arg02
0c8f8     2C 3E 06 F6 | 	mov	arg01, #44
0c8fc                 | '     return _gc_alloc(size);
0c8fc     10 40 06 F6 | 	mov	arg02, #16
0c900     44 37 B0 FD | 	call	#__system___gc_doalloc
0c904     0B 4D 0A F6 | 	mov	local03, result1 wz
0c908     1C 00 90 5D |  if_ne	jmp	#LR__0807
0c90c                 | ' #line 6955 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c90c                 | '       return _seterror( 7 );
0c90c     01 00 00 FF 
0c910     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0c914     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0c918     01 00 00 FF 
0c91c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0c920     01 16 66 F6 | 	neg	result1, #1
0c924     34 00 90 FD | 	jmp	#LR__0809
0c928                 | LR__0807
0c928     26 3F 02 F6 | 	mov	arg01, local03
0c92c     25 41 02 F6 | 	mov	arg02, local02
0c930     04 EF BF FD | 	call	#_ff_cc_f_opendir
0c934     0B 4F 0A F6 | 	mov	local04, result1 wz
0c938     14 00 90 AD |  if_e	jmp	#LR__0808
0c93c     26 3F 02 F6 | 	mov	arg01, local03
0c940                 | '     return _gc_free(ptr);
0c940     3C 38 B0 FD | 	call	#__system___gc_free
0c944                 | '         free(f);
0c944                 | '         return _set_dos_error(r);
0c944     27 3F 02 F6 | 	mov	arg01, local04
0c948     DC FD BF FD | 	call	#_ff_cc__set_dos_error_0595
0c94c     0C 00 90 FD | 	jmp	#LR__0809
0c950                 | LR__0808
0c950     04 48 06 F1 | 	add	local01, #4
0c954     24 4D 62 FC | 	wrlong	local03, local01
0c958                 | '     }
0c958                 | '     dir->vfsdata = f;
0c958                 | '     return 0;
0c958     00 16 06 F6 | 	mov	result1, #0
0c95c                 | LR__0809
0c95c     D0 F0 03 F6 | 	mov	ptra, fp
0c960     E0 00 A0 FD | 	call	#popregs_
0c964                 | _ff_cc_v_opendir_0605_ret
0c964     2D 00 64 FD | 	ret
0c968                 | 
0c968                 | _ff_cc_v_closedir_0608
0c968     02 9C 05 F6 | 	mov	COUNT_, #2
0c96c     D1 00 A0 FD | 	call	#pushregs_
0c970     04 3E 06 F1 | 	add	arg01, #4
0c974     1F 49 02 FB | 	rdlong	local01, arg01
0c978     24 3F 02 F6 | 	mov	arg01, local01
0c97c     78 F0 BF FD | 	call	#_ff_cc_f_closedir
0c980     0B 4B 02 F6 | 	mov	local02, result1
0c984     24 3F 02 F6 | 	mov	arg01, local01
0c988                 | '     return _gc_free(ptr);
0c988     F4 37 B0 FD | 	call	#__system___gc_free
0c98c     00 4A 0E F2 | 	cmp	local02, #0 wz
0c990     08 00 90 AD |  if_e	jmp	#LR__0810
0c994     25 3F 02 F6 | 	mov	arg01, local02
0c998     8C FD BF FD | 	call	#_ff_cc__set_dos_error_0595
0c99c                 | LR__0810
0c99c                 | '     return r;
0c99c     25 17 02 F6 | 	mov	result1, local02
0c9a0     D0 F0 03 F6 | 	mov	ptra, fp
0c9a4     E0 00 A0 FD | 	call	#popregs_
0c9a8                 | _ff_cc_v_closedir_0608_ret
0c9a8     2D 00 64 FD | 	ret
0c9ac                 | 
0c9ac                 | _ff_cc_v_readdir_0611
0c9ac     02 9C 05 F6 | 	mov	COUNT_, #2
0c9b0     D1 00 A0 FD | 	call	#pushregs_
0c9b4     2C F0 07 F1 | 	add	ptra, #44
0c9b8     04 A0 05 F1 | 	add	fp, #4
0c9bc     D0 3E 62 FC | 	wrlong	arg01, fp
0c9c0     04 A0 05 F1 | 	add	fp, #4
0c9c4     D0 40 62 FC | 	wrlong	arg02, fp
0c9c8     04 A0 85 F1 | 	sub	fp, #4
0c9cc     D0 48 02 FB | 	rdlong	local01, fp
0c9d0     04 48 06 F1 | 	add	local01, #4
0c9d4     24 3F 02 FB | 	rdlong	arg01, local01
0c9d8     08 A0 05 F1 | 	add	fp, #8
0c9dc     D0 40 02 F6 | 	mov	arg02, fp
0c9e0     0C A0 85 F1 | 	sub	fp, #12
0c9e4     74 F0 BF FD | 	call	#_ff_cc_f_readdir
0c9e8     0B 4B 02 F6 | 	mov	local02, result1
0c9ec     28 A0 05 F1 | 	add	fp, #40
0c9f0     D0 4A 62 FC | 	wrlong	local02, fp
0c9f4     D0 48 0A FB | 	rdlong	local01, fp wz
0c9f8     28 A0 85 F1 | 	sub	fp, #40
0c9fc     14 00 90 AD |  if_e	jmp	#LR__0811
0ca00                 | '         return _set_dos_error(r);
0ca00     28 A0 05 F1 | 	add	fp, #40
0ca04     D0 3E 02 FB | 	rdlong	arg01, fp
0ca08     28 A0 85 F1 | 	sub	fp, #40
0ca0c     18 FD BF FD | 	call	#_ff_cc__set_dos_error_0595
0ca10     34 00 90 FD | 	jmp	#LR__0812
0ca14                 | LR__0811
0ca14     18 A0 05 F1 | 	add	fp, #24
0ca18     D0 48 C2 FA | 	rdbyte	local01, fp
0ca1c     18 A0 85 F1 | 	sub	fp, #24
0ca20     07 48 4E F7 | 	zerox	local01, #7 wz
0ca24                 | '         return -1;
0ca24     01 16 66 A6 |  if_e	neg	result1, #1
0ca28     1C 00 90 AD |  if_e	jmp	#LR__0812
0ca2c     08 A0 05 F1 | 	add	fp, #8
0ca30     D0 3E 02 FB | 	rdlong	arg01, fp
0ca34     10 A0 05 F1 | 	add	fp, #16
0ca38     D0 40 02 F6 | 	mov	arg02, fp
0ca3c     18 A0 85 F1 | 	sub	fp, #24
0ca40     9C 0E B0 FD | 	call	#_ff_cc_strcpy
0ca44                 | '     }
0ca44                 | ' 
0ca44                 | ' 
0ca44                 | ' 
0ca44                 | ' 
0ca44                 | '     strcpy(ent->d_name, finfo.fname);
0ca44                 | ' 
0ca44                 | '     return 0;
0ca44     00 16 06 F6 | 	mov	result1, #0
0ca48                 | LR__0812
0ca48     D0 F0 03 F6 | 	mov	ptra, fp
0ca4c     E0 00 A0 FD | 	call	#popregs_
0ca50                 | _ff_cc_v_readdir_0611_ret
0ca50     2D 00 64 FD | 	ret
0ca54                 | 
0ca54                 | _ff_cc_unixtime_0619
0ca54     20 29 02 F6 | 	mov	_var01, arg02
0ca58     0B 28 46 F0 | 	shr	_var01, #11
0ca5c     1F 28 06 F5 | 	and	_var01, #31
0ca60     20 2B 02 F6 | 	mov	_var02, arg02
0ca64     05 2A 46 F0 | 	shr	_var02, #5
0ca68     3F 2A 06 F5 | 	and	_var02, #63
0ca6c     1F 40 06 F5 | 	and	arg02, #31
0ca70     01 40 66 F0 | 	shl	arg02, #1
0ca74     15 2D 02 F6 | 	mov	_var03, _var02
0ca78     04 2C 66 F0 | 	shl	_var03, #4
0ca7c     15 2D 82 F1 | 	sub	_var03, _var02
0ca80     02 2C 66 F0 | 	shl	_var03, #2
0ca84     16 41 02 F1 | 	add	arg02, _var03
0ca88     07 00 00 FF 
0ca8c     10 28 06 FD | 	qmul	_var01, ##3600
0ca90     18 2E 62 FD | 	getqx	_var04
0ca94     17 41 02 F1 | 	add	arg02, _var04
0ca98                 | ' 
0ca98                 | '     t = second + minute*60 + hour * 3600;
0ca98                 | '     return t;
0ca98     20 17 02 F6 | 	mov	result1, arg02
0ca9c                 | _ff_cc_unixtime_0619_ret
0ca9c     2D 00 64 FD | 	ret
0caa0                 | 
0caa0                 | _ff_cc_v_stat_0623
0caa0     08 9C 05 F6 | 	mov	COUNT_, #8
0caa4     D1 00 A0 FD | 	call	#pushregs_
0caa8     30 F0 07 F1 | 	add	ptra, #48
0caac     04 A0 05 F1 | 	add	fp, #4
0cab0     D0 3E 62 FC | 	wrlong	arg01, fp
0cab4     04 A0 05 F1 | 	add	fp, #4
0cab8     D0 40 62 FC | 	wrlong	arg02, fp
0cabc     20 3F 02 F6 | 	mov	arg01, arg02
0cac0     08 A0 85 F1 | 	sub	fp, #8
0cac4     00 40 06 F6 | 	mov	arg02, #0
0cac8     30 42 06 F6 | 	mov	arg03, #48
0cacc     44 0E B0 FD | 	call	#_ff_cc_memset
0cad0     04 A0 05 F1 | 	add	fp, #4
0cad4     D0 48 02 FB | 	rdlong	local01, fp
0cad8     04 A0 85 F1 | 	sub	fp, #4
0cadc     24 4B CA FA | 	rdbyte	local02, local01 wz
0cae0     30 00 90 AD |  if_e	jmp	#LR__0813
0cae4     04 A0 05 F1 | 	add	fp, #4
0cae8     D0 4C 02 FB | 	rdlong	local03, fp
0caec     04 A0 85 F1 | 	sub	fp, #4
0caf0     26 4F C2 FA | 	rdbyte	local04, local03
0caf4     2E 4E 0E F2 | 	cmp	local04, #46 wz
0caf8     30 00 90 5D |  if_ne	jmp	#LR__0814
0cafc     04 A0 05 F1 | 	add	fp, #4
0cb00     D0 50 02 FB | 	rdlong	local05, fp
0cb04     04 A0 85 F1 | 	sub	fp, #4
0cb08     01 50 06 F1 | 	add	local05, #1
0cb0c     28 53 CA FA | 	rdbyte	local06, local05 wz
0cb10     18 00 90 5D |  if_ne	jmp	#LR__0814
0cb14                 | LR__0813
0cb14     18 A0 05 F1 | 	add	fp, #24
0cb18     D0 20 48 FC | 	wrbyte	#16, fp
0cb1c     0C A0 85 F1 | 	sub	fp, #12
0cb20     D0 00 68 FC | 	wrlong	#0, fp
0cb24     0C A0 85 F1 | 	sub	fp, #12
0cb28     24 00 90 FD | 	jmp	#LR__0815
0cb2c                 | LR__0814
0cb2c     04 A0 05 F1 | 	add	fp, #4
0cb30     D0 3E 02 FB | 	rdlong	arg01, fp
0cb34     0C A0 05 F1 | 	add	fp, #12
0cb38     D0 40 02 F6 | 	mov	arg02, fp
0cb3c     10 A0 85 F1 | 	sub	fp, #16
0cb40     38 F0 BF FD | 	call	#_ff_cc_f_stat
0cb44     0C A0 05 F1 | 	add	fp, #12
0cb48     D0 16 62 FC | 	wrlong	result1, fp
0cb4c     0C A0 85 F1 | 	sub	fp, #12
0cb50                 | LR__0815
0cb50     0C A0 05 F1 | 	add	fp, #12
0cb54     D0 4A 0A FB | 	rdlong	local02, fp wz
0cb58     0C A0 85 F1 | 	sub	fp, #12
0cb5c     14 00 90 AD |  if_e	jmp	#LR__0816
0cb60                 | '         return _set_dos_error(r);
0cb60     0C A0 05 F1 | 	add	fp, #12
0cb64     D0 3E 02 FB | 	rdlong	arg01, fp
0cb68     0C A0 85 F1 | 	sub	fp, #12
0cb6c     B8 FB BF FD | 	call	#_ff_cc__set_dos_error_0595
0cb70     24 01 90 FD | 	jmp	#LR__0819
0cb74                 | LR__0816
0cb74     2C A0 05 F1 | 	add	fp, #44
0cb78     D0 48 6A FC | 	wrlong	#292, fp
0cb7c     14 A0 85 F1 | 	sub	fp, #20
0cb80     D0 4A C2 FA | 	rdbyte	local02, fp
0cb84     18 A0 85 F1 | 	sub	fp, #24
0cb88     07 4A 46 F7 | 	zerox	local02, #7
0cb8c     01 4A CE F7 | 	test	local02, #1 wz
0cb90     14 00 90 AD |  if_e	jmp	#LR__0817
0cb94     2C A0 05 F1 | 	add	fp, #44
0cb98     D0 4A 02 FB | 	rdlong	local02, fp
0cb9c     92 4A 46 F5 | 	or	local02, #146
0cba0     D0 4A 62 FC | 	wrlong	local02, fp
0cba4     2C A0 85 F1 | 	sub	fp, #44
0cba8                 | LR__0817
0cba8     18 A0 05 F1 | 	add	fp, #24
0cbac     D0 4A C2 FA | 	rdbyte	local02, fp
0cbb0     18 A0 85 F1 | 	sub	fp, #24
0cbb4     07 4A 46 F7 | 	zerox	local02, #7
0cbb8     10 4A CE F7 | 	test	local02, #16 wz
0cbbc     18 00 90 AD |  if_e	jmp	#LR__0818
0cbc0     2C A0 05 F1 | 	add	fp, #44
0cbc4     D0 4A 02 FB | 	rdlong	local02, fp
0cbc8     08 00 00 FF 
0cbcc     49 4A 46 F5 | 	or	local02, ##4169
0cbd0     D0 4A 62 FC | 	wrlong	local02, fp
0cbd4     2C A0 85 F1 | 	sub	fp, #44
0cbd8                 | LR__0818
0cbd8     08 A0 05 F1 | 	add	fp, #8
0cbdc     D0 4A 02 FB | 	rdlong	local02, fp
0cbe0     24 A0 05 F1 | 	add	fp, #36
0cbe4     D0 54 02 FB | 	rdlong	local07, fp
0cbe8     08 4A 06 F1 | 	add	local02, #8
0cbec     25 55 62 FC | 	wrlong	local07, local02
0cbf0     24 A0 85 F1 | 	sub	fp, #36
0cbf4     D0 4A 02 FB | 	rdlong	local02, fp
0cbf8     0C 4A 06 F1 | 	add	local02, #12
0cbfc     25 03 68 FC | 	wrlong	#1, local02
0cc00     D0 4A 02 FB | 	rdlong	local02, fp
0cc04     08 A0 05 F1 | 	add	fp, #8
0cc08     D0 54 02 FB | 	rdlong	local07, fp
0cc0c     18 4A 06 F1 | 	add	local02, #24
0cc10     25 55 62 FC | 	wrlong	local07, local02
0cc14     08 A0 85 F1 | 	sub	fp, #8
0cc18     D0 4A 02 FB | 	rdlong	local02, fp
0cc1c     1C 4A 06 F1 | 	add	local02, #28
0cc20     01 00 80 FF 
0cc24     25 01 68 FC | 	wrlong	##512, local02
0cc28     D0 4A 02 FB | 	rdlong	local02, fp
0cc2c     25 55 02 F6 | 	mov	local07, local02
0cc30     18 54 06 F1 | 	add	local07, #24
0cc34     2A 57 02 FB | 	rdlong	local08, local07
0cc38     2B 4D 52 F6 | 	abs	local03, local08 wc
0cc3c     09 4C 46 F0 | 	shr	local03, #9
0cc40     26 4D 62 C6 |  if_b	neg	local03, local03
0cc44     20 4A 06 F1 | 	add	local02, #32
0cc48     25 4D 62 FC | 	wrlong	local03, local02
0cc4c     D0 4A 02 FB | 	rdlong	local02, fp
0cc50     25 55 02 F6 | 	mov	local07, local02
0cc54     25 4D 02 F6 | 	mov	local03, local02
0cc58     0C A0 05 F1 | 	add	fp, #12
0cc5c     D0 3E E2 FA | 	rdword	arg01, fp
0cc60     02 A0 05 F1 | 	add	fp, #2
0cc64     D0 40 E2 FA | 	rdword	arg02, fp
0cc68     16 A0 85 F1 | 	sub	fp, #22
0cc6c     0F 40 46 F7 | 	zerox	arg02, #15
0cc70     E0 FD BF FD | 	call	#_ff_cc_unixtime_0619
0cc74     2C 4C 06 F1 | 	add	local03, #44
0cc78     26 17 62 FC | 	wrlong	result1, local03
0cc7c     28 54 06 F1 | 	add	local07, #40
0cc80     2A 17 62 FC | 	wrlong	result1, local07
0cc84     24 4A 06 F1 | 	add	local02, #36
0cc88     25 17 62 FC | 	wrlong	result1, local02
0cc8c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0cc8c                 | '     }
0cc8c                 | '     buf->st_mode = mode;
0cc8c                 | '     buf->st_nlink = 1;
0cc8c                 | '     buf->st_size = finfo.fsize;
0cc8c                 | '     buf->st_blksize = 512;
0cc8c                 | '     buf->st_blocks = buf->st_size / 512;
0cc8c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0cc8c                 | ' #line 7053 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0cc8c                 | '     return r;
0cc8c     0C A0 05 F1 | 	add	fp, #12
0cc90     D0 16 02 FB | 	rdlong	result1, fp
0cc94     0C A0 85 F1 | 	sub	fp, #12
0cc98                 | LR__0819
0cc98     D0 F0 03 F6 | 	mov	ptra, fp
0cc9c     E0 00 A0 FD | 	call	#popregs_
0cca0                 | _ff_cc_v_stat_0623_ret
0cca0     2D 00 64 FD | 	ret
0cca4                 | 
0cca4                 | _ff_cc_v_read_0627
0cca4     04 9C 05 F6 | 	mov	COUNT_, #4
0cca8     D1 00 A0 FD | 	call	#pushregs_
0ccac     1C F0 07 F1 | 	add	ptra, #28
0ccb0     04 A0 05 F1 | 	add	fp, #4
0ccb4     D0 3E 62 FC | 	wrlong	arg01, fp
0ccb8     04 A0 05 F1 | 	add	fp, #4
0ccbc     D0 40 62 FC | 	wrlong	arg02, fp
0ccc0     04 A0 05 F1 | 	add	fp, #4
0ccc4     D0 42 62 FC | 	wrlong	arg03, fp
0ccc8     08 A0 85 F1 | 	sub	fp, #8
0cccc     D0 48 02 FB | 	rdlong	local01, fp
0ccd0     24 4B 02 FB | 	rdlong	local02, local01
0ccd4     0C A0 05 F1 | 	add	fp, #12
0ccd8     D0 4A 62 FC | 	wrlong	local02, fp
0ccdc     D0 48 0A FB | 	rdlong	local01, fp wz
0cce0     10 A0 85 F1 | 	sub	fp, #16
0cce4     1C 00 90 5D |  if_ne	jmp	#LR__0820
0cce8                 | '         return _seterror( 5 );
0cce8     01 00 00 FF 
0ccec     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0ccf0     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0ccf4     01 00 00 FF 
0ccf8     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0ccfc     01 16 66 F6 | 	neg	result1, #1
0cd00     BC 00 90 FD | 	jmp	#LR__0823
0cd04                 | LR__0820
0cd04     10 A0 05 F1 | 	add	fp, #16
0cd08     D0 3E 02 FB | 	rdlong	arg01, fp
0cd0c     02 00 00 FF 
0cd10     0C 3E 06 F1 | 	add	arg01, ##1036
0cd14     08 A0 85 F1 | 	sub	fp, #8
0cd18     D0 40 02 FB | 	rdlong	arg02, fp
0cd1c     04 A0 05 F1 | 	add	fp, #4
0cd20     D0 42 02 FB | 	rdlong	arg03, fp
0cd24     0C A0 05 F1 | 	add	fp, #12
0cd28     D0 44 02 F6 | 	mov	arg04, fp
0cd2c     18 A0 85 F1 | 	sub	fp, #24
0cd30     24 D4 BF FD | 	call	#_ff_cc_f_read
0cd34     0B 4D 02 F6 | 	mov	local03, result1
0cd38     14 A0 05 F1 | 	add	fp, #20
0cd3c     D0 4C 62 FC | 	wrlong	local03, fp
0cd40     D0 48 0A FB | 	rdlong	local01, fp wz
0cd44     14 A0 85 F1 | 	sub	fp, #20
0cd48     34 00 90 AD |  if_e	jmp	#LR__0821
0cd4c     04 A0 05 F1 | 	add	fp, #4
0cd50     D0 48 02 FB | 	rdlong	local01, fp
0cd54     24 4F 02 F6 | 	mov	local04, local01
0cd58     08 4E 06 F1 | 	add	local04, #8
0cd5c     27 4B 02 FB | 	rdlong	local02, local04
0cd60     20 4A 46 F5 | 	or	local02, #32
0cd64     08 48 06 F1 | 	add	local01, #8
0cd68     24 4B 62 FC | 	wrlong	local02, local01
0cd6c                 | '         fil->state |=  (0x20) ;
0cd6c                 | '         return _set_dos_error(r);
0cd6c     10 A0 05 F1 | 	add	fp, #16
0cd70     D0 3E 02 FB | 	rdlong	arg01, fp
0cd74     14 A0 85 F1 | 	sub	fp, #20
0cd78     AC F9 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cd7c     40 00 90 FD | 	jmp	#LR__0823
0cd80                 | LR__0821
0cd80     18 A0 05 F1 | 	add	fp, #24
0cd84     D0 48 0A FB | 	rdlong	local01, fp wz
0cd88     18 A0 85 F1 | 	sub	fp, #24
0cd8c     24 00 90 5D |  if_ne	jmp	#LR__0822
0cd90     04 A0 05 F1 | 	add	fp, #4
0cd94     D0 48 02 FB | 	rdlong	local01, fp
0cd98     24 4F 02 F6 | 	mov	local04, local01
0cd9c     04 A0 85 F1 | 	sub	fp, #4
0cda0     08 4E 06 F1 | 	add	local04, #8
0cda4     27 4B 02 FB | 	rdlong	local02, local04
0cda8     10 4A 46 F5 | 	or	local02, #16
0cdac     08 48 06 F1 | 	add	local01, #8
0cdb0     24 4B 62 FC | 	wrlong	local02, local01
0cdb4                 | LR__0822
0cdb4                 | '         fil->state |=  (0x10) ;
0cdb4                 | '     }
0cdb4                 | '     return x;
0cdb4     18 A0 05 F1 | 	add	fp, #24
0cdb8     D0 16 02 FB | 	rdlong	result1, fp
0cdbc     18 A0 85 F1 | 	sub	fp, #24
0cdc0                 | LR__0823
0cdc0     D0 F0 03 F6 | 	mov	ptra, fp
0cdc4     E0 00 A0 FD | 	call	#popregs_
0cdc8                 | _ff_cc_v_read_0627_ret
0cdc8     2D 00 64 FD | 	ret
0cdcc                 | 
0cdcc                 | _ff_cc_v_write_0631
0cdcc     04 9C 05 F6 | 	mov	COUNT_, #4
0cdd0     D1 00 A0 FD | 	call	#pushregs_
0cdd4     1C F0 07 F1 | 	add	ptra, #28
0cdd8     04 A0 05 F1 | 	add	fp, #4
0cddc     D0 3E 62 FC | 	wrlong	arg01, fp
0cde0     04 A0 05 F1 | 	add	fp, #4
0cde4     D0 40 62 FC | 	wrlong	arg02, fp
0cde8     04 A0 05 F1 | 	add	fp, #4
0cdec     D0 42 62 FC | 	wrlong	arg03, fp
0cdf0     08 A0 85 F1 | 	sub	fp, #8
0cdf4     D0 48 02 FB | 	rdlong	local01, fp
0cdf8     24 4B 02 FB | 	rdlong	local02, local01
0cdfc     0C A0 05 F1 | 	add	fp, #12
0ce00     D0 4A 62 FC | 	wrlong	local02, fp
0ce04     D0 48 0A FB | 	rdlong	local01, fp wz
0ce08     10 A0 85 F1 | 	sub	fp, #16
0ce0c     1C 00 90 5D |  if_ne	jmp	#LR__0824
0ce10                 | '         return _seterror( 5 );
0ce10     01 00 00 FF 
0ce14     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0ce18     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0ce1c     01 00 00 FF 
0ce20     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0ce24     01 16 66 F6 | 	neg	result1, #1
0ce28     88 00 90 FD | 	jmp	#LR__0826
0ce2c                 | LR__0824
0ce2c     10 A0 05 F1 | 	add	fp, #16
0ce30     D0 3E 02 FB | 	rdlong	arg01, fp
0ce34     02 00 00 FF 
0ce38     0C 3E 06 F1 | 	add	arg01, ##1036
0ce3c     08 A0 85 F1 | 	sub	fp, #8
0ce40     D0 40 02 FB | 	rdlong	arg02, fp
0ce44     04 A0 05 F1 | 	add	fp, #4
0ce48     D0 42 02 FB | 	rdlong	arg03, fp
0ce4c     0C A0 05 F1 | 	add	fp, #12
0ce50     D0 44 02 F6 | 	mov	arg04, fp
0ce54     18 A0 85 F1 | 	sub	fp, #24
0ce58     48 D9 BF FD | 	call	#_ff_cc_f_write
0ce5c     0B 4D 02 F6 | 	mov	local03, result1
0ce60     14 A0 05 F1 | 	add	fp, #20
0ce64     D0 4C 62 FC | 	wrlong	local03, fp
0ce68     D0 48 0A FB | 	rdlong	local01, fp wz
0ce6c     14 A0 85 F1 | 	sub	fp, #20
0ce70     34 00 90 AD |  if_e	jmp	#LR__0825
0ce74     04 A0 05 F1 | 	add	fp, #4
0ce78     D0 48 02 FB | 	rdlong	local01, fp
0ce7c     24 4F 02 F6 | 	mov	local04, local01
0ce80     08 4E 06 F1 | 	add	local04, #8
0ce84     27 4B 02 FB | 	rdlong	local02, local04
0ce88     20 4A 46 F5 | 	or	local02, #32
0ce8c     08 48 06 F1 | 	add	local01, #8
0ce90     24 4B 62 FC | 	wrlong	local02, local01
0ce94                 | '         fil->state |=  (0x20) ;
0ce94                 | '         return _set_dos_error(r);
0ce94     10 A0 05 F1 | 	add	fp, #16
0ce98     D0 3E 02 FB | 	rdlong	arg01, fp
0ce9c     14 A0 85 F1 | 	sub	fp, #20
0cea0     84 F8 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cea4     0C 00 90 FD | 	jmp	#LR__0826
0cea8                 | LR__0825
0cea8                 | '     }
0cea8                 | '     return x;
0cea8     18 A0 05 F1 | 	add	fp, #24
0ceac     D0 16 02 FB | 	rdlong	result1, fp
0ceb0     18 A0 85 F1 | 	sub	fp, #24
0ceb4                 | LR__0826
0ceb4     D0 F0 03 F6 | 	mov	ptra, fp
0ceb8     E0 00 A0 FD | 	call	#popregs_
0cebc                 | _ff_cc_v_write_0631_ret
0cebc     2D 00 64 FD | 	ret
0cec0                 | 
0cec0                 | _ff_cc_v_lseek_0635
0cec0     05 9C 05 F6 | 	mov	COUNT_, #5
0cec4     D1 00 A0 FD | 	call	#pushregs_
0cec8     20 49 02 F6 | 	mov	local01, arg02
0cecc     21 4B 02 F6 | 	mov	local02, arg03
0ced0     1F 4D 02 FB | 	rdlong	local03, arg01
0ced4     02 00 00 FF 
0ced8     0C 4C 0E F1 | 	add	local03, ##1036 wz
0cedc     1C 00 90 5D |  if_ne	jmp	#LR__0827
0cee0                 | '         return _seterror( 5 );
0cee0     01 00 00 FF 
0cee4     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0cee8     05 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0ceec     01 00 00 FF 
0cef0     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0cef4     01 16 66 F6 | 	neg	result1, #1
0cef8     58 00 90 FD | 	jmp	#LR__0832
0cefc                 | LR__0827
0cefc     00 4A 0E F2 | 	cmp	local02, #0 wz
0cf00     2C 00 90 AD |  if_e	jmp	#LR__0830
0cf04     01 4A 0E F2 | 	cmp	local02, #1 wz
0cf08     14 00 90 5D |  if_ne	jmp	#LR__0828
0cf0c     14 4C 06 F1 | 	add	local03, #20
0cf10     26 4F 02 FB | 	rdlong	local04, local03
0cf14     14 4C 86 F1 | 	sub	local03, #20
0cf18     27 49 02 F1 | 	add	local01, local04
0cf1c     10 00 90 FD | 	jmp	#LR__0829
0cf20                 | LR__0828
0cf20     0C 4C 06 F1 | 	add	local03, #12
0cf24     26 4F 02 FB | 	rdlong	local04, local03
0cf28     0C 4C 86 F1 | 	sub	local03, #12
0cf2c     27 49 02 F1 | 	add	local01, local04
0cf30                 | LR__0829
0cf30                 | LR__0830
0cf30     26 3F 02 F6 | 	mov	arg01, local03
0cf34     24 41 02 F6 | 	mov	arg02, local01
0cf38     C8 E2 BF FD | 	call	#_ff_cc_f_lseek
0cf3c     0B 51 0A F6 | 	mov	local05, result1 wz
0cf40     0C 00 90 AD |  if_e	jmp	#LR__0831
0cf44                 | '         return _set_dos_error(result);
0cf44     28 3F 02 F6 | 	mov	arg01, local05
0cf48     DC F7 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cf4c     04 00 90 FD | 	jmp	#LR__0832
0cf50                 | LR__0831
0cf50                 | '     }
0cf50                 | '     return offset;
0cf50     24 17 02 F6 | 	mov	result1, local01
0cf54                 | LR__0832
0cf54     D0 F0 03 F6 | 	mov	ptra, fp
0cf58     E0 00 A0 FD | 	call	#popregs_
0cf5c                 | _ff_cc_v_lseek_0635_ret
0cf5c     2D 00 64 FD | 	ret
0cf60                 | 
0cf60                 | _ff_cc_v_ioctl
0cf60                 | ' {
0cf60                 | '     return _seterror( 10 );
0cf60     01 00 00 FF 
0cf64     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0cf68     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
0cf6c     01 00 00 FF 
0cf70     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0cf74     01 16 66 F6 | 	neg	result1, #1
0cf78                 | _ff_cc_v_ioctl_ret
0cf78     2D 00 64 FD | 	ret
0cf7c                 | 
0cf7c                 | _ff_cc_v_mkdir
0cf7c     64 EF BF FD | 	call	#_ff_cc_f_mkdir
0cf80     0B 3F 02 F6 | 	mov	arg01, result1
0cf84                 | ' 
0cf84                 | '     r = f_mkdir(name);
0cf84                 | '     return _set_dos_error(r);
0cf84     A0 F7 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cf88                 | _ff_cc_v_mkdir_ret
0cf88     2D 00 64 FD | 	ret
0cf8c                 | 
0cf8c                 | _ff_cc_v_remove
0cf8c     D4 EC BF FD | 	call	#_ff_cc_f_unlink
0cf90     0B 3F 02 F6 | 	mov	arg01, result1
0cf94                 | ' 
0cf94                 | '     r = f_unlink(name);
0cf94                 | '     return _set_dos_error(r);
0cf94     90 F7 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cf98                 | _ff_cc_v_remove_ret
0cf98     2D 00 64 FD | 	ret
0cf9c                 | 
0cf9c                 | _ff_cc_v_rmdir_0639
0cf9c     C4 EC BF FD | 	call	#_ff_cc_f_unlink
0cfa0     0B 3F 02 F6 | 	mov	arg01, result1
0cfa4                 | ' 
0cfa4                 | '     r = f_unlink(name);
0cfa4                 | '     return _set_dos_error(r);
0cfa4     80 F7 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cfa8                 | _ff_cc_v_rmdir_0639_ret
0cfa8     2D 00 64 FD | 	ret
0cfac                 | 
0cfac                 | _ff_cc_v_rename_0641
0cfac     94 F2 BF FD | 	call	#_ff_cc_f_rename
0cfb0     0B 3F 02 F6 | 	mov	arg01, result1
0cfb4                 | '     return _set_dos_error(r);
0cfb4     70 F7 BF FD | 	call	#_ff_cc__set_dos_error_0595
0cfb8                 | _ff_cc_v_rename_0641_ret
0cfb8     2D 00 64 FD | 	ret
0cfbc                 | 
0cfbc                 | _ff_cc_v_open_0645
0cfbc     0A 9C 05 F6 | 	mov	COUNT_, #10
0cfc0     D1 00 A0 FD | 	call	#pushregs_
0cfc4     1F 49 02 F6 | 	mov	local01, arg01
0cfc8     20 4B 02 F6 | 	mov	local02, arg02
0cfcc     21 4D 02 F6 | 	mov	local03, arg03
0cfd0     02 00 00 FF 
0cfd4     34 3E 06 F6 | 	mov	arg01, ##1076
0cfd8                 | '     return _gc_alloc(size);
0cfd8     10 40 06 F6 | 	mov	arg02, #16
0cfdc     68 30 B0 FD | 	call	#__system___gc_doalloc
0cfe0     0B 4F 0A F6 | 	mov	local04, result1 wz
0cfe4     1C 00 90 5D |  if_ne	jmp	#LR__0833
0cfe8                 | '       return _seterror( 7 );
0cfe8     01 00 00 FF 
0cfec     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
0cff0     05 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0cff4     01 00 00 FF 
0cff8     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
0cffc     01 16 66 F6 | 	neg	result1, #1
0d000     A8 00 90 FD | 	jmp	#LR__0840
0d004                 | LR__0833
0d004     27 51 02 F6 | 	mov	local05, local04
0d008     00 52 06 F6 | 	mov	local06, #0
0d00c     02 00 00 FF 
0d010     34 54 06 F6 | 	mov	local07, ##1076
0d014     28 3F 02 F6 | 	mov	arg01, local05
0d018     00 40 06 F6 | 	mov	arg02, #0
0d01c     02 00 00 FF 
0d020     34 42 06 F6 | 	mov	arg03, ##1076
0d024     EC 08 B0 FD | 	call	#_ff_cc_memset
0d028                 | '   switch (flags & 3) {
0d028     26 57 02 F6 | 	mov	local08, local03
0d02c     03 56 0E F5 | 	and	local08, #3 wz
0d030     0C 00 90 AD |  if_e	jmp	#LR__0834
0d034     01 56 0E F2 | 	cmp	local08, #1 wz
0d038     0C 00 90 AD |  if_e	jmp	#LR__0835
0d03c     10 00 90 FD | 	jmp	#LR__0836
0d040                 | LR__0834
0d040     01 58 06 F6 | 	mov	local09, #1
0d044                 | '       fs_flags =  0x01 ;
0d044                 | '       break;
0d044     0C 00 90 FD | 	jmp	#LR__0837
0d048                 | LR__0835
0d048     02 58 06 F6 | 	mov	local09, #2
0d04c                 | '       fs_flags =  0x02 ;
0d04c                 | '       break;
0d04c     04 00 90 FD | 	jmp	#LR__0837
0d050                 | LR__0836
0d050     03 58 06 F6 | 	mov	local09, #3
0d054                 | '       fs_flags =  0x01  |  0x02 ;
0d054                 | '       break;
0d054                 | LR__0837
0d054     08 4C CE F7 | 	test	local03, #8 wz
0d058     18 58 46 55 |  if_ne	or	local09, #24
0d05c     08 00 90 5D |  if_ne	jmp	#LR__0838
0d060     20 4C CE F7 | 	test	local03, #32 wz
0d064     30 58 46 55 |  if_ne	or	local09, #48
0d068                 | LR__0838
0d068     02 00 00 FF 
0d06c     0C 4E 06 F1 | 	add	local04, ##1036
0d070     27 3F 02 F6 | 	mov	arg01, local04
0d074     02 00 00 FF 
0d078     0C 4E 86 F1 | 	sub	local04, ##1036
0d07c     25 41 02 F6 | 	mov	arg02, local02
0d080     2C 43 02 F6 | 	mov	arg03, local09
0d084     90 C9 BF FD | 	call	#_ff_cc_f_open
0d088     0B 5B 0A F6 | 	mov	local10, result1 wz
0d08c     14 00 90 AD |  if_e	jmp	#LR__0839
0d090     27 3F 02 F6 | 	mov	arg01, local04
0d094                 | '     return _gc_free(ptr);
0d094     E8 30 B0 FD | 	call	#__system___gc_free
0d098                 | '     free(f);
0d098                 | '     return _set_dos_error(r);
0d098     2D 3F 02 F6 | 	mov	arg01, local10
0d09c     88 F6 BF FD | 	call	#_ff_cc__set_dos_error_0595
0d0a0     08 00 90 FD | 	jmp	#LR__0840
0d0a4                 | LR__0839
0d0a4     24 4F 62 FC | 	wrlong	local04, local01
0d0a8                 | '   }
0d0a8                 | '   fil->vfsdata = f;
0d0a8                 | '   return 0;
0d0a8     00 16 06 F6 | 	mov	result1, #0
0d0ac                 | LR__0840
0d0ac     D0 F0 03 F6 | 	mov	ptra, fp
0d0b0     E0 00 A0 FD | 	call	#popregs_
0d0b4                 | _ff_cc_v_open_0645_ret
0d0b4     2D 00 64 FD | 	ret
0d0b8                 | 
0d0b8                 | _ff_cc_xmit_mmc_1040
0d0b8     04 9C 05 F6 | 	mov	COUNT_, #4
0d0bc     D1 00 A0 FD | 	call	#pushregs_
0d0c0     6C 0F 06 F1 | 	add	ptr__ff_cc_dat__, #364
0d0c4     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0d0c8     08 0E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0d0cc     07 4B 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0d0d0     74 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #372
0d0d4     34 30 9F FE | 	loc	pa,	#(@LR__0842-@LR__0841)
0d0d8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0d0dc                 | ' 
0d0dc                 | ' 	do {
0d0dc                 | LR__0841
0d0dc     1F 4D C2 FA | 	rdbyte	local03, arg01
0d0e0     26 4F 02 F6 | 	mov	local04, local03
0d0e4     07 4E 46 F7 | 	zerox	local04, #7
0d0e8     80 4E CE F7 | 	test	local04, #128 wz
0d0ec     01 3E 06 F1 | 	add	arg01, #1
0d0f0     5D 4A 62 FD | 	drvnz	local02
0d0f4     59 48 62 FD | 	drvh	local01
0d0f8     1F 20 64 FD | 	waitx	#16
0d0fc     58 48 62 FD | 	drvl	local01
0d100     1F 20 64 FD | 	waitx	#16
0d104     26 4F 02 F6 | 	mov	local04, local03
0d108     07 4E 46 F7 | 	zerox	local04, #7
0d10c     40 4E CE F7 | 	test	local04, #64 wz
0d110     5D 4A 62 FD | 	drvnz	local02
0d114     59 48 62 FD | 	drvh	local01
0d118     1F 20 64 FD | 	waitx	#16
0d11c     58 48 62 FD | 	drvl	local01
0d120     1F 20 64 FD | 	waitx	#16
0d124     26 4F 02 F6 | 	mov	local04, local03
0d128     07 4E 46 F7 | 	zerox	local04, #7
0d12c     20 4E CE F7 | 	test	local04, #32 wz
0d130     5D 4A 62 FD | 	drvnz	local02
0d134     59 48 62 FD | 	drvh	local01
0d138     1F 20 64 FD | 	waitx	#16
0d13c     58 48 62 FD | 	drvl	local01
0d140     1F 20 64 FD | 	waitx	#16
0d144     26 4F 02 F6 | 	mov	local04, local03
0d148     07 4E 46 F7 | 	zerox	local04, #7
0d14c     10 4E CE F7 | 	test	local04, #16 wz
0d150     5D 4A 62 FD | 	drvnz	local02
0d154     59 48 62 FD | 	drvh	local01
0d158     1F 20 64 FD | 	waitx	#16
0d15c     58 48 62 FD | 	drvl	local01
0d160     1F 20 64 FD | 	waitx	#16
0d164     26 4F 02 F6 | 	mov	local04, local03
0d168     07 4E 46 F7 | 	zerox	local04, #7
0d16c     08 4E CE F7 | 	test	local04, #8 wz
0d170     5D 4A 62 FD | 	drvnz	local02
0d174     59 48 62 FD | 	drvh	local01
0d178     1F 20 64 FD | 	waitx	#16
0d17c     58 48 62 FD | 	drvl	local01
0d180     1F 20 64 FD | 	waitx	#16
0d184     26 4F 02 F6 | 	mov	local04, local03
0d188     07 4E 46 F7 | 	zerox	local04, #7
0d18c     04 4E CE F7 | 	test	local04, #4 wz
0d190     5D 4A 62 FD | 	drvnz	local02
0d194     59 48 62 FD | 	drvh	local01
0d198     1F 20 64 FD | 	waitx	#16
0d19c     58 48 62 FD | 	drvl	local01
0d1a0     1F 20 64 FD | 	waitx	#16
0d1a4     26 4F 02 F6 | 	mov	local04, local03
0d1a8     07 4E 46 F7 | 	zerox	local04, #7
0d1ac     02 4E CE F7 | 	test	local04, #2 wz
0d1b0     5D 4A 62 FD | 	drvnz	local02
0d1b4     59 48 62 FD | 	drvh	local01
0d1b8     1F 20 64 FD | 	waitx	#16
0d1bc     58 48 62 FD | 	drvl	local01
0d1c0     1F 20 64 FD | 	waitx	#16
0d1c4     07 4C 46 F7 | 	zerox	local03, #7
0d1c8     01 4C CE F7 | 	test	local03, #1 wz
0d1cc     5D 4A 62 FD | 	drvnz	local02
0d1d0     59 48 62 FD | 	drvh	local01
0d1d4     1F 20 64 FD | 	waitx	#16
0d1d8     58 48 62 FD | 	drvl	local01
0d1dc     1F 20 64 FD | 	waitx	#16
0d1e0     01 40 8E F1 | 	sub	arg02, #1 wz
0d1e4     F4 FE 9F 5D |  if_ne	jmp	#LR__0841
0d1e8                 | LR__0842
0d1e8     D0 F0 03 F6 | 	mov	ptra, fp
0d1ec     E0 00 A0 FD | 	call	#popregs_
0d1f0                 | _ff_cc_xmit_mmc_1040_ret
0d1f0     2D 00 64 FD | 	ret
0d1f4                 | 
0d1f4                 | _ff_cc_rcvr_mmc_1046
0d1f4     04 9C 05 F6 | 	mov	COUNT_, #4
0d1f8     D1 00 A0 FD | 	call	#pushregs_
0d1fc     1F 49 02 F6 | 	mov	local01, arg01
0d200     6C 0F 06 F1 | 	add	ptr__ff_cc_dat__, #364
0d204     07 4B 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0d208     08 0E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0d20c     07 3F 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0d210     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
0d214     07 4D 02 FB | 	rdlong	local03, ptr__ff_cc_dat__
0d218     78 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0d21c     59 3E 62 FD | 	drvh	arg01
0d220     48 2F 9F FE | 	loc	pa,	#(@LR__0844-@LR__0843)
0d224     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0d228                 | ' 
0d228                 | ' 	(_pinh(PIN_DI)) ;
0d228                 | ' 
0d228                 | ' 	do {
0d228                 | LR__0843
0d228     00 4E 06 F6 | 	mov	local04, #0
0d22c     1F 10 64 FD | 	waitx	#8
0d230     40 4C 72 FD | 	testp	local03 wc
0d234     6C 16 62 FD | 	wrc	result1
0d238     01 16 CE F7 | 	test	result1, #1 wz
0d23c     01 4E 06 56 |  if_ne	mov	local04, #1
0d240     59 4A 62 FD | 	drvh	local02
0d244     1F 20 64 FD | 	waitx	#16
0d248     58 4A 62 FD | 	drvl	local02
0d24c     1F 20 64 FD | 	waitx	#16
0d250     07 4E 46 F7 | 	zerox	local04, #7
0d254     01 4E 66 F0 | 	shl	local04, #1
0d258     1F 10 64 FD | 	waitx	#8
0d25c     40 4C 72 FD | 	testp	local03 wc
0d260     6C 16 62 FD | 	wrc	result1
0d264     01 16 CE F7 | 	test	result1, #1 wz
0d268     01 4E 06 51 |  if_ne	add	local04, #1
0d26c     59 4A 62 FD | 	drvh	local02
0d270     1F 20 64 FD | 	waitx	#16
0d274     58 4A 62 FD | 	drvl	local02
0d278     1F 20 64 FD | 	waitx	#16
0d27c     07 4E 46 F7 | 	zerox	local04, #7
0d280     01 4E 66 F0 | 	shl	local04, #1
0d284     1F 10 64 FD | 	waitx	#8
0d288     40 4C 72 FD | 	testp	local03 wc
0d28c     6C 16 62 FD | 	wrc	result1
0d290     01 16 CE F7 | 	test	result1, #1 wz
0d294     01 4E 06 51 |  if_ne	add	local04, #1
0d298     59 4A 62 FD | 	drvh	local02
0d29c     1F 20 64 FD | 	waitx	#16
0d2a0     58 4A 62 FD | 	drvl	local02
0d2a4     1F 20 64 FD | 	waitx	#16
0d2a8     07 4E 46 F7 | 	zerox	local04, #7
0d2ac     01 4E 66 F0 | 	shl	local04, #1
0d2b0     1F 10 64 FD | 	waitx	#8
0d2b4     40 4C 72 FD | 	testp	local03 wc
0d2b8     6C 16 62 FD | 	wrc	result1
0d2bc     01 16 CE F7 | 	test	result1, #1 wz
0d2c0     01 4E 06 51 |  if_ne	add	local04, #1
0d2c4     59 4A 62 FD | 	drvh	local02
0d2c8     1F 20 64 FD | 	waitx	#16
0d2cc     58 4A 62 FD | 	drvl	local02
0d2d0     1F 20 64 FD | 	waitx	#16
0d2d4     07 4E 46 F7 | 	zerox	local04, #7
0d2d8     01 4E 66 F0 | 	shl	local04, #1
0d2dc     1F 10 64 FD | 	waitx	#8
0d2e0     40 4C 72 FD | 	testp	local03 wc
0d2e4     6C 16 62 FD | 	wrc	result1
0d2e8     01 16 CE F7 | 	test	result1, #1 wz
0d2ec     01 4E 06 51 |  if_ne	add	local04, #1
0d2f0     59 4A 62 FD | 	drvh	local02
0d2f4     1F 20 64 FD | 	waitx	#16
0d2f8     58 4A 62 FD | 	drvl	local02
0d2fc     1F 20 64 FD | 	waitx	#16
0d300     07 4E 46 F7 | 	zerox	local04, #7
0d304     01 4E 66 F0 | 	shl	local04, #1
0d308     1F 10 64 FD | 	waitx	#8
0d30c     40 4C 72 FD | 	testp	local03 wc
0d310     6C 16 62 FD | 	wrc	result1
0d314     01 16 CE F7 | 	test	result1, #1 wz
0d318     01 4E 06 51 |  if_ne	add	local04, #1
0d31c     59 4A 62 FD | 	drvh	local02
0d320     1F 20 64 FD | 	waitx	#16
0d324     58 4A 62 FD | 	drvl	local02
0d328     1F 20 64 FD | 	waitx	#16
0d32c     07 4E 46 F7 | 	zerox	local04, #7
0d330     01 4E 66 F0 | 	shl	local04, #1
0d334     1F 10 64 FD | 	waitx	#8
0d338     40 4C 72 FD | 	testp	local03 wc
0d33c     6C 16 62 FD | 	wrc	result1
0d340     01 16 CE F7 | 	test	result1, #1 wz
0d344     01 4E 06 51 |  if_ne	add	local04, #1
0d348     59 4A 62 FD | 	drvh	local02
0d34c     1F 20 64 FD | 	waitx	#16
0d350     58 4A 62 FD | 	drvl	local02
0d354     1F 20 64 FD | 	waitx	#16
0d358     07 4E 46 F7 | 	zerox	local04, #7
0d35c     01 4E 66 F0 | 	shl	local04, #1
0d360     1F 10 64 FD | 	waitx	#8
0d364     40 4C 72 FD | 	testp	local03 wc
0d368     6C 16 62 FD | 	wrc	result1
0d36c     01 16 CE F7 | 	test	result1, #1 wz
0d370     01 4E 06 51 |  if_ne	add	local04, #1
0d374     59 4A 62 FD | 	drvh	local02
0d378     1F 20 64 FD | 	waitx	#16
0d37c     58 4A 62 FD | 	drvl	local02
0d380     1F 20 64 FD | 	waitx	#16
0d384     24 4F 42 FC | 	wrbyte	local04, local01
0d388     01 40 8E F1 | 	sub	arg02, #1 wz
0d38c     01 48 06 F1 | 	add	local01, #1
0d390     94 FE 9F 5D |  if_ne	jmp	#LR__0843
0d394                 | LR__0844
0d394     D0 F0 03 F6 | 	mov	ptra, fp
0d398     E0 00 A0 FD | 	call	#popregs_
0d39c                 | _ff_cc_rcvr_mmc_1046_ret
0d39c     2D 00 64 FD | 	ret
0d3a0                 | 
0d3a0                 | _ff_cc_wait_ready_1049
0d3a0     04 9C 05 F6 | 	mov	COUNT_, #4
0d3a4     D1 00 A0 FD | 	call	#pushregs_
0d3a8     0C F0 07 F1 | 	add	ptra, #12
0d3ac                 | ' {
0d3ac                 | ' 	BYTE d;
0d3ac                 | ' 	UINT tmr;
0d3ac                 | ' 
0d3ac                 | ' 
0d3ac                 | ' 	for (tmr = 5000; tmr; tmr--) {
0d3ac     08 A0 05 F1 | 	add	fp, #8
0d3b0     09 00 80 FF 
0d3b4     D0 10 6B FC | 	wrlong	##5000, fp
0d3b8     08 A0 85 F1 | 	sub	fp, #8
0d3bc                 | LR__0845
0d3bc     08 A0 05 F1 | 	add	fp, #8
0d3c0     D0 48 0A FB | 	rdlong	local01, fp wz
0d3c4     08 A0 85 F1 | 	sub	fp, #8
0d3c8     4C 00 90 AD |  if_e	jmp	#LR__0846
0d3cc     04 A0 05 F1 | 	add	fp, #4
0d3d0     D0 3E 02 F6 | 	mov	arg01, fp
0d3d4     04 A0 85 F1 | 	sub	fp, #4
0d3d8     01 40 06 F6 | 	mov	arg02, #1
0d3dc     14 FE BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d3e0     04 A0 05 F1 | 	add	fp, #4
0d3e4     D0 4A C2 FA | 	rdbyte	local02, fp
0d3e8     04 A0 85 F1 | 	sub	fp, #4
0d3ec     07 4A 46 F7 | 	zerox	local02, #7
0d3f0     FF 4A 0E F2 | 	cmp	local02, #255 wz
0d3f4     20 00 90 AD |  if_e	jmp	#LR__0846
0d3f8     64 3E 06 F6 | 	mov	arg01, #100
0d3fc     94 09 B0 FD | 	call	#__system___waitus
0d400     08 A0 05 F1 | 	add	fp, #8
0d404     D0 4C 02 FB | 	rdlong	local03, fp
0d408     01 4C 86 F1 | 	sub	local03, #1
0d40c     D0 4C 62 FC | 	wrlong	local03, fp
0d410     08 A0 85 F1 | 	sub	fp, #8
0d414     A4 FF 9F FD | 	jmp	#LR__0845
0d418                 | LR__0846
0d418                 | ' 		dly_us(100);
0d418                 | ' 	}
0d418                 | ' 
0d418                 | ' 	return tmr ? 1 : 0;
0d418     08 A0 05 F1 | 	add	fp, #8
0d41c     D0 48 0A FB | 	rdlong	local01, fp wz
0d420     08 A0 85 F1 | 	sub	fp, #8
0d424     01 4E 06 56 |  if_ne	mov	local04, #1
0d428     00 4E 06 A6 |  if_e	mov	local04, #0
0d42c     27 17 02 F6 | 	mov	result1, local04
0d430     D0 F0 03 F6 | 	mov	ptra, fp
0d434     E0 00 A0 FD | 	call	#popregs_
0d438                 | _ff_cc_wait_ready_1049_ret
0d438     2D 00 64 FD | 	ret
0d43c                 | 
0d43c                 | _ff_cc_deselect_1055
0d43c     01 9C 05 F6 | 	mov	COUNT_, #1
0d440     D1 00 A0 FD | 	call	#pushregs_
0d444     14 F0 07 F1 | 	add	ptra, #20
0d448     70 0F 06 F1 | 	add	ptr__ff_cc_dat__, #368
0d44c     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0d450     04 A0 05 F1 | 	add	fp, #4
0d454     D0 48 62 FC | 	wrlong	local01, fp
0d458     04 0E 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0d45c     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0d460     04 A0 05 F1 | 	add	fp, #4
0d464     D0 48 62 FC | 	wrlong	local01, fp
0d468     08 0E 06 F1 | 	add	ptr__ff_cc_dat__, #8
0d46c     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0d470     04 A0 05 F1 | 	add	fp, #4
0d474     D0 48 62 FC | 	wrlong	local01, fp
0d478     04 0E 06 F1 | 	add	ptr__ff_cc_dat__, #4
0d47c     07 49 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0d480     78 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0d484     04 A0 05 F1 | 	add	fp, #4
0d488     D0 48 62 FC | 	wrlong	local01, fp
0d48c     0C A0 85 F1 | 	sub	fp, #12
0d490     D0 3E 02 FB | 	rdlong	arg01, fp
0d494     04 A0 85 F1 | 	sub	fp, #4
0d498     59 3E 62 FD | 	drvh	arg01
0d49c     1F 20 64 FD | 	waitx	#16
0d4a0     D0 3E 02 F6 | 	mov	arg01, fp
0d4a4     01 40 06 F6 | 	mov	arg02, #1
0d4a8     48 FD BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d4ac     D0 F0 03 F6 | 	mov	ptra, fp
0d4b0     E0 00 A0 FD | 	call	#popregs_
0d4b4                 | _ff_cc_deselect_1055_ret
0d4b4     2D 00 64 FD | 	ret
0d4b8                 | 
0d4b8                 | _ff_cc_select_1058
0d4b8     00 9C 05 F6 | 	mov	COUNT_, #0
0d4bc     D1 00 A0 FD | 	call	#pushregs_
0d4c0     0C F0 07 F1 | 	add	ptra, #12
0d4c4     70 0F 06 F1 | 	add	ptr__ff_cc_dat__, #368
0d4c8     07 3F 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0d4cc     70 0F 86 F1 | 	sub	ptr__ff_cc_dat__, #368
0d4d0     08 A0 05 F1 | 	add	fp, #8
0d4d4     D0 3E 62 FC | 	wrlong	arg01, fp
0d4d8     58 3E 62 FD | 	drvl	arg01
0d4dc     1F 20 64 FD | 	waitx	#16
0d4e0     04 A0 85 F1 | 	sub	fp, #4
0d4e4     D0 3E 02 F6 | 	mov	arg01, fp
0d4e8     04 A0 85 F1 | 	sub	fp, #4
0d4ec     01 40 06 F6 | 	mov	arg02, #1
0d4f0     00 FD BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d4f4     A8 FE BF FD | 	call	#_ff_cc_wait_ready_1049
0d4f8     00 16 0E F2 | 	cmp	result1, #0 wz
0d4fc     01 16 06 56 |  if_ne	mov	result1, #1
0d500     08 00 90 5D |  if_ne	jmp	#LR__0847
0d504     34 FF BF FD | 	call	#_ff_cc_deselect_1055
0d508                 | ' 
0d508                 | ' 	deselect();
0d508                 | ' 	return 0;
0d508     00 16 06 F6 | 	mov	result1, #0
0d50c                 | LR__0847
0d50c     D0 F0 03 F6 | 	mov	ptra, fp
0d510     E0 00 A0 FD | 	call	#popregs_
0d514                 | _ff_cc_select_1058_ret
0d514     2D 00 64 FD | 	ret
0d518                 | 
0d518                 | _ff_cc_rcvr_datablock_1061
0d518     04 9C 05 F6 | 	mov	COUNT_, #4
0d51c     D1 00 A0 FD | 	call	#pushregs_
0d520     14 F0 07 F1 | 	add	ptra, #20
0d524     04 A0 05 F1 | 	add	fp, #4
0d528     D0 3E 62 FC | 	wrlong	arg01, fp
0d52c     04 A0 05 F1 | 	add	fp, #4
0d530     D0 40 62 FC | 	wrlong	arg02, fp
0d534                 | ' 	BYTE *buff,
0d534                 | ' 	UINT btr
0d534                 | ' )
0d534                 | ' {
0d534                 | ' 	BYTE d[2];
0d534                 | ' 	UINT tmr;
0d534                 | ' 
0d534                 | ' 
0d534                 | ' 	for (tmr = 1000; tmr; tmr--) {
0d534     08 A0 05 F1 | 	add	fp, #8
0d538     01 00 80 FF 
0d53c     D0 D0 6B FC | 	wrlong	##1000, fp
0d540     10 A0 85 F1 | 	sub	fp, #16
0d544                 | LR__0848
0d544     10 A0 05 F1 | 	add	fp, #16
0d548     D0 48 0A FB | 	rdlong	local01, fp wz
0d54c     10 A0 85 F1 | 	sub	fp, #16
0d550     4C 00 90 AD |  if_e	jmp	#LR__0849
0d554     0C A0 05 F1 | 	add	fp, #12
0d558     D0 3E 02 F6 | 	mov	arg01, fp
0d55c     0C A0 85 F1 | 	sub	fp, #12
0d560     01 40 06 F6 | 	mov	arg02, #1
0d564     8C FC BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d568     0C A0 05 F1 | 	add	fp, #12
0d56c     D0 4A C2 FA | 	rdbyte	local02, fp
0d570     0C A0 85 F1 | 	sub	fp, #12
0d574     07 4A 46 F7 | 	zerox	local02, #7
0d578     FF 4A 0E F2 | 	cmp	local02, #255 wz
0d57c     20 00 90 5D |  if_ne	jmp	#LR__0849
0d580     64 3E 06 F6 | 	mov	arg01, #100
0d584     0C 08 B0 FD | 	call	#__system___waitus
0d588     10 A0 05 F1 | 	add	fp, #16
0d58c     D0 4C 02 FB | 	rdlong	local03, fp
0d590     01 4C 86 F1 | 	sub	local03, #1
0d594     D0 4C 62 FC | 	wrlong	local03, fp
0d598     10 A0 85 F1 | 	sub	fp, #16
0d59c     A4 FF 9F FD | 	jmp	#LR__0848
0d5a0                 | LR__0849
0d5a0     0C A0 05 F1 | 	add	fp, #12
0d5a4     D0 4E C2 FA | 	rdbyte	local04, fp
0d5a8     0C A0 85 F1 | 	sub	fp, #12
0d5ac     07 4E 46 F7 | 	zerox	local04, #7
0d5b0     FE 4E 0E F2 | 	cmp	local04, #254 wz
0d5b4     00 16 06 56 |  if_ne	mov	result1, #0
0d5b8     30 00 90 5D |  if_ne	jmp	#LR__0850
0d5bc     04 A0 05 F1 | 	add	fp, #4
0d5c0     D0 3E 02 FB | 	rdlong	arg01, fp
0d5c4     04 A0 05 F1 | 	add	fp, #4
0d5c8     D0 40 02 FB | 	rdlong	arg02, fp
0d5cc     08 A0 85 F1 | 	sub	fp, #8
0d5d0     20 FC BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d5d4     0C A0 05 F1 | 	add	fp, #12
0d5d8     D0 3E 02 F6 | 	mov	arg01, fp
0d5dc     0C A0 85 F1 | 	sub	fp, #12
0d5e0     02 40 06 F6 | 	mov	arg02, #2
0d5e4     0C FC BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d5e8                 | ' 
0d5e8                 | ' 	rcvr_mmc(buff, btr);
0d5e8                 | ' 	rcvr_mmc(d, 2);
0d5e8                 | ' 
0d5e8                 | ' 	return 1;
0d5e8     01 16 06 F6 | 	mov	result1, #1
0d5ec                 | LR__0850
0d5ec     D0 F0 03 F6 | 	mov	ptra, fp
0d5f0     E0 00 A0 FD | 	call	#popregs_
0d5f4                 | _ff_cc_rcvr_datablock_1061_ret
0d5f4     2D 00 64 FD | 	ret
0d5f8                 | 
0d5f8                 | _ff_cc_xmit_datablock_1063
0d5f8     01 9C 05 F6 | 	mov	COUNT_, #1
0d5fc     D1 00 A0 FD | 	call	#pushregs_
0d600     10 F0 07 F1 | 	add	ptra, #16
0d604     04 A0 05 F1 | 	add	fp, #4
0d608     D0 3E 62 FC | 	wrlong	arg01, fp
0d60c     04 A0 05 F1 | 	add	fp, #4
0d610     D0 40 42 FC | 	wrbyte	arg02, fp
0d614     08 A0 85 F1 | 	sub	fp, #8
0d618     84 FD BF FD | 	call	#_ff_cc_wait_ready_1049
0d61c     00 16 0E F2 | 	cmp	result1, #0 wz
0d620     00 16 06 A6 |  if_e	mov	result1, #0
0d624     98 00 90 AD |  if_e	jmp	#LR__0852
0d628     08 A0 05 F1 | 	add	fp, #8
0d62c     D0 48 C2 FA | 	rdbyte	local01, fp
0d630     04 A0 05 F1 | 	add	fp, #4
0d634     D0 48 42 FC | 	wrbyte	local01, fp
0d638     D0 3E 02 F6 | 	mov	arg01, fp
0d63c     0C A0 85 F1 | 	sub	fp, #12
0d640     01 40 06 F6 | 	mov	arg02, #1
0d644     70 FA BF FD | 	call	#_ff_cc_xmit_mmc_1040
0d648     08 A0 05 F1 | 	add	fp, #8
0d64c     D0 48 C2 FA | 	rdbyte	local01, fp
0d650     08 A0 85 F1 | 	sub	fp, #8
0d654     07 48 46 F7 | 	zerox	local01, #7
0d658     FD 48 0E F2 | 	cmp	local01, #253 wz
0d65c     5C 00 90 AD |  if_e	jmp	#LR__0851
0d660     04 A0 05 F1 | 	add	fp, #4
0d664     D0 3E 02 FB | 	rdlong	arg01, fp
0d668     04 A0 85 F1 | 	sub	fp, #4
0d66c     09 40 C6 F9 | 	decod	arg02, #9
0d670     44 FA BF FD | 	call	#_ff_cc_xmit_mmc_1040
0d674     0C A0 05 F1 | 	add	fp, #12
0d678     D0 3E 02 F6 | 	mov	arg01, fp
0d67c     0C A0 85 F1 | 	sub	fp, #12
0d680     02 40 06 F6 | 	mov	arg02, #2
0d684     6C FB BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d688     0C A0 05 F1 | 	add	fp, #12
0d68c     D0 3E 02 F6 | 	mov	arg01, fp
0d690     0C A0 85 F1 | 	sub	fp, #12
0d694     01 40 06 F6 | 	mov	arg02, #1
0d698     58 FB BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d69c     0C A0 05 F1 | 	add	fp, #12
0d6a0     D0 48 C2 FA | 	rdbyte	local01, fp
0d6a4     0C A0 85 F1 | 	sub	fp, #12
0d6a8     07 48 46 F7 | 	zerox	local01, #7
0d6ac     1F 48 06 F5 | 	and	local01, #31
0d6b0     05 48 0E F2 | 	cmp	local01, #5 wz
0d6b4                 | ' 			return 0;
0d6b4     00 16 06 56 |  if_ne	mov	result1, #0
0d6b8     04 00 90 5D |  if_ne	jmp	#LR__0852
0d6bc                 | LR__0851
0d6bc                 | ' 	}
0d6bc                 | ' 
0d6bc                 | ' 	return 1;
0d6bc     01 16 06 F6 | 	mov	result1, #1
0d6c0                 | LR__0852
0d6c0     D0 F0 03 F6 | 	mov	ptra, fp
0d6c4     E0 00 A0 FD | 	call	#popregs_
0d6c8                 | _ff_cc_xmit_datablock_1063_ret
0d6c8     2D 00 64 FD | 	ret
0d6cc                 | 
0d6cc                 | _ff_cc_send_cmd_1067
0d6cc     05 9C 05 F6 | 	mov	COUNT_, #5
0d6d0     D1 00 A0 FD | 	call	#pushregs_
0d6d4     1C F0 07 F1 | 	add	ptra, #28
0d6d8                 | _ff_cc_send_cmd_1067_enter
0d6d8     04 A0 05 F1 | 	add	fp, #4
0d6dc     D0 3E 42 FC | 	wrbyte	arg01, fp
0d6e0     04 A0 05 F1 | 	add	fp, #4
0d6e4     D0 40 62 FC | 	wrlong	arg02, fp
0d6e8     04 A0 85 F1 | 	sub	fp, #4
0d6ec     D0 48 C2 FA | 	rdbyte	local01, fp
0d6f0     04 A0 85 F1 | 	sub	fp, #4
0d6f4     07 48 46 F7 | 	zerox	local01, #7
0d6f8     80 48 CE F7 | 	test	local01, #128 wz
0d6fc     4C 00 90 AD |  if_e	jmp	#LR__0854
0d700     04 A0 05 F1 | 	add	fp, #4
0d704     D0 48 C2 FA | 	rdbyte	local01, fp
0d708     7F 48 06 F5 | 	and	local01, #127
0d70c     D0 48 42 FC | 	wrbyte	local01, fp
0d710     04 A0 85 F1 | 	sub	fp, #4
0d714     37 3E 06 F6 | 	mov	arg01, #55
0d718     00 40 06 F6 | 	mov	arg02, #0
0d71c     AC FF BF FD | 	call	#_ff_cc_send_cmd_1067
0d720     0C A0 05 F1 | 	add	fp, #12
0d724     D0 16 42 FC | 	wrbyte	result1, fp
0d728     D0 48 C2 FA | 	rdbyte	local01, fp
0d72c     0C A0 85 F1 | 	sub	fp, #12
0d730     07 48 46 F7 | 	zerox	local01, #7
0d734     01 48 1E F2 | 	cmp	local01, #1 wcz
0d738     10 00 90 ED |  if_be	jmp	#LR__0853
0d73c     0C A0 05 F1 | 	add	fp, #12
0d740     D0 16 C2 FA | 	rdbyte	result1, fp
0d744     0C A0 85 F1 | 	sub	fp, #12
0d748     88 01 90 FD | 	jmp	#LR__0859
0d74c                 | LR__0853
0d74c                 | LR__0854
0d74c     04 A0 05 F1 | 	add	fp, #4
0d750     D0 48 C2 FA | 	rdbyte	local01, fp
0d754     04 A0 85 F1 | 	sub	fp, #4
0d758     07 48 46 F7 | 	zerox	local01, #7
0d75c     0C 48 0E F2 | 	cmp	local01, #12 wz
0d760     14 00 90 AD |  if_e	jmp	#LR__0855
0d764     D4 FC BF FD | 	call	#_ff_cc_deselect_1055
0d768     4C FD BF FD | 	call	#_ff_cc_select_1058
0d76c     00 16 0E F2 | 	cmp	result1, #0 wz
0d770     FF 16 06 A6 |  if_e	mov	result1, #255
0d774     5C 01 90 AD |  if_e	jmp	#LR__0859
0d778                 | LR__0855
0d778     04 A0 05 F1 | 	add	fp, #4
0d77c     D0 4A C2 FA | 	rdbyte	local02, fp
0d780     40 48 06 F6 | 	mov	local01, #64
0d784     25 49 42 F5 | 	or	local01, local02
0d788     10 A0 05 F1 | 	add	fp, #16
0d78c     D0 48 42 FC | 	wrbyte	local01, fp
0d790     0C A0 85 F1 | 	sub	fp, #12
0d794     D0 48 02 FB | 	rdlong	local01, fp
0d798     18 48 46 F0 | 	shr	local01, #24
0d79c     0D A0 05 F1 | 	add	fp, #13
0d7a0     D0 48 42 FC | 	wrbyte	local01, fp
0d7a4     0D A0 85 F1 | 	sub	fp, #13
0d7a8     D0 48 02 FB | 	rdlong	local01, fp
0d7ac     10 48 46 F0 | 	shr	local01, #16
0d7b0     0E A0 05 F1 | 	add	fp, #14
0d7b4     D0 48 42 FC | 	wrbyte	local01, fp
0d7b8     0E A0 85 F1 | 	sub	fp, #14
0d7bc     D0 48 02 FB | 	rdlong	local01, fp
0d7c0     08 48 46 F0 | 	shr	local01, #8
0d7c4     0F A0 05 F1 | 	add	fp, #15
0d7c8     D0 48 42 FC | 	wrbyte	local01, fp
0d7cc     0F A0 85 F1 | 	sub	fp, #15
0d7d0     D0 48 02 FB | 	rdlong	local01, fp
0d7d4     10 A0 05 F1 | 	add	fp, #16
0d7d8     D0 48 42 FC | 	wrbyte	local01, fp
0d7dc     0C A0 85 F1 | 	sub	fp, #12
0d7e0     D0 02 48 FC | 	wrbyte	#1, fp
0d7e4     08 A0 85 F1 | 	sub	fp, #8
0d7e8     D0 48 C2 FA | 	rdbyte	local01, fp
0d7ec     04 A0 85 F1 | 	sub	fp, #4
0d7f0     07 48 4E F7 | 	zerox	local01, #7 wz
0d7f4     0C A0 05 A1 |  if_e	add	fp, #12
0d7f8     D0 2A 49 AC |  if_e	wrbyte	#149, fp
0d7fc     0C A0 85 A1 |  if_e	sub	fp, #12
0d800     04 A0 05 F1 | 	add	fp, #4
0d804     D0 48 C2 FA | 	rdbyte	local01, fp
0d808     04 A0 85 F1 | 	sub	fp, #4
0d80c     07 48 46 F7 | 	zerox	local01, #7
0d810     08 48 0E F2 | 	cmp	local01, #8 wz
0d814     0C A0 05 A1 |  if_e	add	fp, #12
0d818     D0 0E 49 AC |  if_e	wrbyte	#135, fp
0d81c     0C A0 85 A1 |  if_e	sub	fp, #12
0d820     0C A0 05 F1 | 	add	fp, #12
0d824     D0 48 C2 FA | 	rdbyte	local01, fp
0d828     0D A0 05 F1 | 	add	fp, #13
0d82c     D0 48 42 FC | 	wrbyte	local01, fp
0d830     05 A0 85 F1 | 	sub	fp, #5
0d834     D0 3E 02 F6 | 	mov	arg01, fp
0d838     14 A0 85 F1 | 	sub	fp, #20
0d83c     06 40 06 F6 | 	mov	arg02, #6
0d840     74 F8 BF FD | 	call	#_ff_cc_xmit_mmc_1040
0d844     04 A0 05 F1 | 	add	fp, #4
0d848     D0 48 C2 FA | 	rdbyte	local01, fp
0d84c     04 A0 85 F1 | 	sub	fp, #4
0d850     07 48 46 F7 | 	zerox	local01, #7
0d854     0C 48 0E F2 | 	cmp	local01, #12 wz
0d858     14 00 90 5D |  if_ne	jmp	#LR__0856
0d85c     10 A0 05 F1 | 	add	fp, #16
0d860     D0 3E 02 F6 | 	mov	arg01, fp
0d864     10 A0 85 F1 | 	sub	fp, #16
0d868     01 40 06 F6 | 	mov	arg02, #1
0d86c     84 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d870                 | LR__0856
0d870     0C A0 05 F1 | 	add	fp, #12
0d874     D0 14 48 FC | 	wrbyte	#10, fp
0d878     0C A0 85 F1 | 	sub	fp, #12
0d87c                 | ' 	n = 10;
0d87c                 | ' 	do
0d87c                 | LR__0857
0d87c     10 A0 05 F1 | 	add	fp, #16
0d880     D0 3E 02 F6 | 	mov	arg01, fp
0d884     10 A0 85 F1 | 	sub	fp, #16
0d888     01 40 06 F6 | 	mov	arg02, #1
0d88c     64 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_1046
0d890     10 A0 05 F1 | 	add	fp, #16
0d894     D0 48 C2 FA | 	rdbyte	local01, fp
0d898     10 A0 85 F1 | 	sub	fp, #16
0d89c     07 48 46 F7 | 	zerox	local01, #7
0d8a0     80 48 CE F7 | 	test	local01, #128 wz
0d8a4     20 00 90 AD |  if_e	jmp	#LR__0858
0d8a8     0C A0 05 F1 | 	add	fp, #12
0d8ac     D0 4C C2 FA | 	rdbyte	local03, fp
0d8b0     01 4C 86 F1 | 	sub	local03, #1
0d8b4     D0 4C 42 FC | 	wrbyte	local03, fp
0d8b8     D0 4E C2 FA | 	rdbyte	local04, fp
0d8bc     0C A0 85 F1 | 	sub	fp, #12
0d8c0     27 51 0A F6 | 	mov	local05, local04 wz
0d8c4     B4 FF 9F 5D |  if_ne	jmp	#LR__0857
0d8c8                 | LR__0858
0d8c8                 | ' 
0d8c8                 | ' 	return d;
0d8c8     10 A0 05 F1 | 	add	fp, #16
0d8cc     D0 16 C2 FA | 	rdbyte	result1, fp
0d8d0     10 A0 85 F1 | 	sub	fp, #16
0d8d4                 | LR__0859
0d8d4     D0 F0 03 F6 | 	mov	ptra, fp
0d8d8     E0 00 A0 FD | 	call	#popregs_
0d8dc                 | _ff_cc_send_cmd_1067_ret
0d8dc     2D 00 64 FD | 	ret
0d8e0                 | 
0d8e0                 | _ff_cc_strcpy
0d8e0     1F 29 02 F6 | 	mov	_var01, arg01
0d8e4     00 40 0E F2 | 	cmp	arg02, #0 wz
0d8e8     1F 17 02 A6 |  if_e	mov	result1, arg01
0d8ec     20 00 90 AD |  if_e	jmp	#_ff_cc_strcpy_ret
0d8f0     20 27 9F FE | 	loc	pa,	#(@LR__0861-@LR__0860)
0d8f4     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0d8f8                 | '         do {
0d8f8                 | LR__0860
0d8f8     20 2B CA FA | 	rdbyte	_var02, arg02 wz
0d8fc     14 2B 42 FC | 	wrbyte	_var02, _var01
0d900     01 40 06 F1 | 	add	arg02, #1
0d904     01 28 06 F1 | 	add	_var01, #1
0d908     EC FF 9F 5D |  if_ne	jmp	#LR__0860
0d90c                 | LR__0861
0d90c                 | ' 	return(dst);
0d90c     1F 17 02 F6 | 	mov	result1, arg01
0d910                 | _ff_cc_strcpy_ret
0d910     2D 00 64 FD | 	ret
0d914                 | 
0d914                 | _ff_cc_memset
0d914     1F 29 02 F6 | 	mov	_var01, arg01
0d918     20 2B 02 F6 | 	mov	_var02, arg02
0d91c     21 2D 02 F6 | 	mov	_var03, arg03
0d920     14 2F 02 F6 | 	mov	_var04, _var01
0d924     03 30 06 F6 | 	mov	_var05, #3
0d928     14 31 CA F7 | 	test	_var05, _var01 wz
0d92c     70 00 90 5D |  if_ne	jmp	#LR__0865
0d930     04 2C 1E F2 | 	cmp	_var03, #4 wcz
0d934     68 00 90 ED |  if_be	jmp	#LR__0865
0d938     14 33 02 F6 | 	mov	_var06, _var01
0d93c     FF 2A 06 F5 | 	and	_var02, #255
0d940     15 31 02 F6 | 	mov	_var05, _var02
0d944     18 30 66 F0 | 	shl	_var05, #24
0d948     15 35 02 F6 | 	mov	_var07, _var02
0d94c     10 34 66 F0 | 	shl	_var07, #16
0d950     1A 31 42 F5 | 	or	_var05, _var07
0d954     15 37 02 F6 | 	mov	_var08, _var02
0d958     08 36 66 F0 | 	shl	_var08, #8
0d95c     1B 31 42 F5 | 	or	_var05, _var08
0d960     15 31 42 F5 | 	or	_var05, _var02
0d964     18 39 02 F6 | 	mov	_var09, _var05
0d968     C0 26 9F FE | 	loc	pa,	#(@LR__0863-@LR__0862)
0d96c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0d970                 | '     {
0d970                 | '       uint32_t lc;
0d970                 | '       uint32_t *dstl = dest_p;
0d970                 | '       c &= 0xff;
0d970                 | '       lc = (c<<24)|(c<<16)|(c<<8)|c;
0d970                 | '       while (n >= sizeof(uint32_t))
0d970                 | LR__0862
0d970     04 2C 1E F2 | 	cmp	_var03, #4 wcz
0d974     24 00 90 CD |  if_b	jmp	#LR__0864
0d978     19 31 02 F6 | 	mov	_var05, _var06
0d97c     19 35 02 F6 | 	mov	_var07, _var06
0d980     04 34 06 F1 | 	add	_var07, #4
0d984     1A 33 02 F6 | 	mov	_var06, _var07
0d988     18 39 62 FC | 	wrlong	_var09, _var05
0d98c     16 31 02 F6 | 	mov	_var05, _var03
0d990     04 30 86 F1 | 	sub	_var05, #4
0d994     18 2D 02 F6 | 	mov	_var03, _var05
0d998     D4 FF 9F FD | 	jmp	#LR__0862
0d99c                 | LR__0863
0d99c                 | LR__0864
0d99c     19 29 02 F6 | 	mov	_var01, _var06
0d9a0                 | LR__0865
0d9a0     74 26 9F FE | 	loc	pa,	#(@LR__0867-@LR__0866)
0d9a4     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0d9a8                 | ' 	}
0d9a8                 | '       dest_p = dstl;
0d9a8                 | '     }
0d9a8                 | ' 
0d9a8                 | '   dst = dest_p;
0d9a8                 | '   while (n > 0) {
0d9a8                 | LR__0866
0d9a8     00 2C 1E F2 | 	cmp	_var03, #0 wcz
0d9ac     10 00 90 ED |  if_be	jmp	#LR__0868
0d9b0     14 2B 42 FC | 	wrbyte	_var02, _var01
0d9b4     01 2C 86 F1 | 	sub	_var03, #1
0d9b8     01 28 06 F1 | 	add	_var01, #1
0d9bc     E8 FF 9F FD | 	jmp	#LR__0866
0d9c0                 | LR__0867
0d9c0                 | LR__0868
0d9c0                 | '     *dst++ = c;
0d9c0                 | '     --n;
0d9c0                 | '   }
0d9c0                 | ' 
0d9c0                 | '   return orig_dest;
0d9c0     17 17 02 F6 | 	mov	result1, _var04
0d9c4                 | _ff_cc_memset_ret
0d9c4     2D 00 64 FD | 	ret
0d9c8                 | 
0d9c8                 | __struct___anon_580868bc00000005_sputc
0d9c8     FE 28 02 FB | 	rdlong	_var01, objptr
0d9cc     04 FC 05 F1 | 	add	objptr, #4
0d9d0     FE 2A 02 FB | 	rdlong	_var02, objptr
0d9d4     04 FC 85 F1 | 	sub	objptr, #4
0d9d8     15 29 5A F2 | 	cmps	_var01, _var02 wcz
0d9dc     14 00 90 3D |  if_ae	jmp	#LR__0869
0d9e0     FE 28 02 FB | 	rdlong	_var01, objptr
0d9e4     14 2B 02 F6 | 	mov	_var02, _var01
0d9e8     01 2A 06 F1 | 	add	_var02, #1
0d9ec     FE 2A 62 FC | 	wrlong	_var02, objptr
0d9f0     14 3F 42 FC | 	wrbyte	arg01, _var01
0d9f4                 | LR__0869
0d9f4                 | '             *ptr++ = c;
0d9f4                 | '         }
0d9f4                 | '         return 1;
0d9f4     01 16 06 F6 | 	mov	result1, #1
0d9f8                 | __struct___anon_580868bc00000005_sputc_ret
0d9f8     2D 00 64 FD | 	ret
0d9fc                 | hubexit
0d9fc     81 00 80 FD | 	jmp	#cogexit
0da00                 | 
0da00                 | __system___setbaud
0da00     14 9C 06 FB | 	rdlong	muldiva_, #20
0da04     1F 9F 02 F6 | 	mov	muldivb_, arg01
0da08     F1 00 A0 FD | 	call	#divide_
0da0c     40 7C 64 FD | 	dirl	#62
0da10     40 7E 64 FD | 	dirl	#63
0da14     05 9F 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0da18     10 9E 66 F0 | 	shl	muldivb_, #16
0da1c     07 40 06 F6 | 	mov	arg02, #7
0da20     4F 41 02 F1 | 	add	arg02, muldivb_
0da24     3E F8 0C FC | 	wrpin	#124, #62
0da28     3E 40 16 FC | 	wxpin	arg02, #62
0da2c     3F 7C 0C FC | 	wrpin	#62, #63
0da30     14 40 06 F1 | 	add	arg02, #20
0da34     3F 40 16 FC | 	wxpin	arg02, #63
0da38     41 7C 64 FD | 	dirh	#62
0da3c     41 7E 64 FD | 	dirh	#63
0da40                 | __system___setbaud_ret
0da40     2D 00 64 FD | 	ret
0da44                 | 
0da44                 | __system___txraw
0da44     02 9C 05 F6 | 	mov	COUNT_, #2
0da48     D1 00 A0 FD | 	call	#pushregs_
0da4c     1F 49 02 F6 | 	mov	local01, arg01
0da50     05 4B 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0da54     0C 00 90 5D |  if_ne	jmp	#LR__0870
0da58     C2 01 00 FF 
0da5c     00 3E 06 F6 | 	mov	arg01, ##230400
0da60     9C FF BF FD | 	call	#__system___setbaud
0da64                 | LR__0870
0da64     3E 48 26 FC | 	wypin	local01, #62
0da68     1F 02 64 FD | 	waitx	#1
0da6c     98 25 9F FE | 	loc	pa,	#(@LR__0872-@LR__0871)
0da70     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0da74                 | LR__0871
0da74     40 7C 74 FD | 	testp	#62 wc
0da78     F8 FF 9F 3D |  if_nc	jmp	#LR__0871
0da7c                 | LR__0872
0da7c     01 16 06 F6 | 	mov	result1, #1
0da80     D0 F0 03 F6 | 	mov	ptra, fp
0da84     E0 00 A0 FD | 	call	#popregs_
0da88                 | __system___txraw_ret
0da88     2D 00 64 FD | 	ret
0da8c                 | 
0da8c                 | __system___rxraw
0da8c     0B 9C 05 F6 | 	mov	COUNT_, #11
0da90     D1 00 A0 FD | 	call	#pushregs_
0da94     1F 49 02 F6 | 	mov	local01, arg01
0da98     05 4B 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0da9c     0C 00 90 5D |  if_ne	jmp	#LR__0873
0daa0     C2 01 00 FF 
0daa4     00 3E 06 F6 | 	mov	arg01, ##230400
0daa8     54 FF BF FD | 	call	#__system___setbaud
0daac                 | LR__0873
0daac     00 48 0E F2 | 	cmp	local01, #0 wz
0dab0     18 00 90 AD |  if_e	jmp	#LR__0874
0dab4     1A 4C 62 FD | 	getct	local03
0dab8     14 4E 06 FB | 	rdlong	local04, #20
0dabc     0A 4E 46 F0 | 	shr	local04, #10
0dac0     27 49 02 FD | 	qmul	local01, local04
0dac4     18 50 62 FD | 	getqx	local05
0dac8     28 4D 02 F1 | 	add	local03, local05
0dacc                 | LR__0874
0dacc     01 52 66 F6 | 	neg	local06, #1
0dad0     00 54 06 F6 | 	mov	local07, #0
0dad4     04 0A 06 F1 | 	add	ptr___system__dat__, #4
0dad8     05 57 02 FB | 	rdlong	local08, ptr___system__dat__
0dadc     04 0A 86 F1 | 	sub	ptr___system__dat__, #4
0dae0                 | LR__0875
0dae0     08 56 16 F4 | 	testb	local08, #8 wc
0dae4     09 56 76 F4 | 	testbn	local08, #9 andc
0dae8     0A 56 46 F0 | 	shr	local08, #10
0daec     01 54 06 C6 |  if_b	mov	local07, #1
0daf0     10 00 90 CD |  if_b	jmp	#LR__0876
0daf4     40 7E 6C FD | 	testp	#63 wz
0daf8     01 54 06 A6 |  if_e	mov	local07, #1
0dafc     3F 56 8E AA |  if_e	rdpin	local08, #63
0db00     04 56 46 A0 |  if_e	shr	local08, #4
0db04                 | LR__0876
0db04     00 4A 06 F6 | 	mov	local02, #0
0db08     00 54 0E F2 | 	cmp	local07, #0 wz
0db0c     01 4A 66 56 |  if_ne	neg	local02, #1
0db10     00 58 06 F6 | 	mov	local09, #0
0db14     00 4E 06 F6 | 	mov	local04, #0
0db18     00 48 0E F2 | 	cmp	local01, #0 wz
0db1c     01 4E 66 56 |  if_ne	neg	local04, #1
0db20     00 50 06 F6 | 	mov	local05, #0
0db24     00 5A 06 F6 | 	mov	local10, #0
0db28     1A 5C 62 FD | 	getct	local11
0db2c     26 5D 82 F1 | 	sub	local11, local03
0db30     00 5C 5E F2 | 	cmps	local11, #0 wcz
0db34     01 5A 66 C6 |  if_b	neg	local10, #1
0db38     00 5A 0E F2 | 	cmp	local10, #0 wz
0db3c     01 50 66 56 |  if_ne	neg	local05, #1
0db40     28 4F CA F7 | 	test	local04, local05 wz
0db44     01 58 66 56 |  if_ne	neg	local09, #1
0db48     2C 4B 4A F5 | 	or	local02, local09 wz
0db4c     90 FF 9F AD |  if_e	jmp	#LR__0875
0db50     00 54 0E F2 | 	cmp	local07, #0 wz
0db54     2B 53 02 56 |  if_ne	mov	local06, local08
0db58     FF 52 06 55 |  if_ne	and	local06, #255
0db5c     04 0A 06 F1 | 	add	ptr___system__dat__, #4
0db60     05 57 62 FC | 	wrlong	local08, ptr___system__dat__
0db64     04 0A 86 F1 | 	sub	ptr___system__dat__, #4
0db68     29 17 02 F6 | 	mov	result1, local06
0db6c     D0 F0 03 F6 | 	mov	ptra, fp
0db70     E0 00 A0 FD | 	call	#popregs_
0db74                 | __system___rxraw_ret
0db74     2D 00 64 FD | 	ret
0db78                 | 
0db78                 | __system____builtin_memmove
0db78     1F 29 02 F6 | 	mov	_var01, arg01
0db7c     20 3F 5A F2 | 	cmps	arg01, arg02 wcz
0db80     50 00 90 3D |  if_ae	jmp	#LR__0884
0db84     98 24 9F FE | 	loc	pa,	#(@LR__0878-@LR__0877)
0db88     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0db8c                 | LR__0877
0db8c     03 42 5E F2 | 	cmps	arg03, #3 wcz
0db90     18 00 90 ED |  if_be	jmp	#LR__0879
0db94     20 2B 02 FB | 	rdlong	_var02, arg02
0db98     1F 2B 62 FC | 	wrlong	_var02, arg01
0db9c     04 3E 06 F1 | 	add	arg01, #4
0dba0     04 40 06 F1 | 	add	arg02, #4
0dba4     04 42 86 F1 | 	sub	arg03, #4
0dba8     E0 FF 9F FD | 	jmp	#LR__0877
0dbac                 | LR__0878
0dbac                 | LR__0879
0dbac     21 2D 0A F6 | 	mov	_var03, arg03 wz
0dbb0     4C 00 90 AD |  if_e	jmp	#LR__0890
0dbb4     5C 24 9F FE | 	loc	pa,	#(@LR__0882-@LR__0880)
0dbb8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0dbbc                 | LR__0880
0dbbc     16 09 D8 FC | 	rep	@LR__0883, _var03
0dbc0                 | LR__0881
0dbc0     20 2B C2 FA | 	rdbyte	_var02, arg02
0dbc4     1F 2B 42 FC | 	wrbyte	_var02, arg01
0dbc8     01 3E 06 F1 | 	add	arg01, #1
0dbcc     01 40 06 F1 | 	add	arg02, #1
0dbd0                 | LR__0882
0dbd0                 | LR__0883
0dbd0     2C 00 90 FD | 	jmp	#LR__0890
0dbd4                 | LR__0884
0dbd4     21 3F 02 F1 | 	add	arg01, arg03
0dbd8     21 41 02 F1 | 	add	arg02, arg03
0dbdc     21 2F 0A F6 | 	mov	_var04, arg03 wz
0dbe0     1C 00 90 AD |  if_e	jmp	#LR__0889
0dbe4     2C 24 9F FE | 	loc	pa,	#(@LR__0887-@LR__0885)
0dbe8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0dbec                 | LR__0885
0dbec     17 09 D8 FC | 	rep	@LR__0888, _var04
0dbf0                 | LR__0886
0dbf0     01 3E 86 F1 | 	sub	arg01, #1
0dbf4     01 40 86 F1 | 	sub	arg02, #1
0dbf8     20 2B C2 FA | 	rdbyte	_var02, arg02
0dbfc     1F 2B 42 FC | 	wrbyte	_var02, arg01
0dc00                 | LR__0887
0dc00                 | LR__0888
0dc00                 | LR__0889
0dc00                 | LR__0890
0dc00     14 17 02 F6 | 	mov	result1, _var01
0dc04                 | __system____builtin_memmove_ret
0dc04     2D 00 64 FD | 	ret
0dc08                 | 
0dc08                 | __system____builtin_strcpy
0dc08     1F 29 02 F6 | 	mov	_var01, arg01
0dc0c     04 24 9F FE | 	loc	pa,	#(@LR__0892-@LR__0891)
0dc10     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0dc14                 | LR__0891
0dc14     20 2B CA FA | 	rdbyte	_var02, arg02 wz
0dc18     1F 2B 42 FC | 	wrbyte	_var02, arg01
0dc1c     01 40 06 F1 | 	add	arg02, #1
0dc20     01 3E 06 F1 | 	add	arg01, #1
0dc24     EC FF 9F 5D |  if_ne	jmp	#LR__0891
0dc28                 | LR__0892
0dc28     14 17 02 F6 | 	mov	result1, _var01
0dc2c                 | __system____builtin_strcpy_ret
0dc2c     2D 00 64 FD | 	ret
0dc30                 | 
0dc30                 | __system____topofstack
0dc30     00 9C 05 F6 | 	mov	COUNT_, #0
0dc34     D1 00 A0 FD | 	call	#pushregs_
0dc38     08 F0 07 F1 | 	add	ptra, #8
0dc3c     04 A0 05 F1 | 	add	fp, #4
0dc40     D0 3E 62 FC | 	wrlong	arg01, fp
0dc44     D0 16 02 F6 | 	mov	result1, fp
0dc48     04 A0 85 F1 | 	sub	fp, #4
0dc4c     D0 F0 03 F6 | 	mov	ptra, fp
0dc50     E0 00 A0 FD | 	call	#popregs_
0dc54                 | __system____topofstack_ret
0dc54     2D 00 64 FD | 	ret
0dc58                 | 
0dc58                 | __system___make_methodptr
0dc58     04 9C 05 F6 | 	mov	COUNT_, #4
0dc5c     D1 00 A0 FD | 	call	#pushregs_
0dc60     1F 49 02 F6 | 	mov	local01, arg01
0dc64     20 4B 02 F6 | 	mov	local02, arg02
0dc68     08 3E 06 F6 | 	mov	arg01, #8
0dc6c     94 23 B0 FD | 	call	#__system___gc_alloc_managed
0dc70     0B 4D 0A F6 | 	mov	local03, result1 wz
0dc74     10 00 90 AD |  if_e	jmp	#LR__0893
0dc78     26 49 62 FC | 	wrlong	local01, local03
0dc7c     26 4F 02 F6 | 	mov	local04, local03
0dc80     04 4E 06 F1 | 	add	local04, #4
0dc84     27 4B 62 FC | 	wrlong	local02, local04
0dc88                 | LR__0893
0dc88     26 17 02 F6 | 	mov	result1, local03
0dc8c     D0 F0 03 F6 | 	mov	ptra, fp
0dc90     E0 00 A0 FD | 	call	#popregs_
0dc94                 | __system___make_methodptr_ret
0dc94     2D 00 64 FD | 	ret
0dc98                 | 
0dc98                 | __system___lockmem
0dc98     02 9C 05 F6 | 	mov	COUNT_, #2
0dc9c     D1 00 A0 FD | 	call	#pushregs_
0dca0     01 16 62 FD | 	cogid	result1
0dca4     0B 49 02 F6 | 	mov	local01, result1
0dca8     00 49 06 F1 | 	add	local01, #256
0dcac                 | LR__0894
0dcac     1F 4B 0A FB | 	rdlong	local02, arg01 wz
0dcb0     1F 49 62 AC |  if_e	wrlong	local01, arg01
0dcb4     1F 4B 02 AB |  if_e	rdlong	local02, arg01
0dcb8     1F 4B 02 AB |  if_e	rdlong	local02, arg01
0dcbc     24 4B 0A F2 | 	cmp	local02, local01 wz
0dcc0     E8 FF 9F 5D |  if_ne	jmp	#LR__0894
0dcc4     D0 F0 03 F6 | 	mov	ptra, fp
0dcc8     E0 00 A0 FD | 	call	#popregs_
0dccc                 | __system___lockmem_ret
0dccc     2D 00 64 FD | 	ret
0dcd0                 | 
0dcd0                 | __system___tx
0dcd0     02 9C 05 F6 | 	mov	COUNT_, #2
0dcd4     D1 00 A0 FD | 	call	#pushregs_
0dcd8     1F 49 02 F6 | 	mov	local01, arg01
0dcdc     0A 48 0E F2 | 	cmp	local01, #10 wz
0dce0     20 00 90 5D |  if_ne	jmp	#LR__0895
0dce4     08 0A 06 F1 | 	add	ptr___system__dat__, #8
0dce8     05 4B 02 FB | 	rdlong	local02, ptr___system__dat__
0dcec     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
0dcf0     02 4A CE F7 | 	test	local02, #2 wz
0dcf4     0C 00 90 AD |  if_e	jmp	#LR__0895
0dcf8     0D 4A 06 F6 | 	mov	local02, #13
0dcfc     0D 3E 06 F6 | 	mov	arg01, #13
0dd00     40 FD BF FD | 	call	#__system___txraw
0dd04                 | LR__0895
0dd04     24 3F 02 F6 | 	mov	arg01, local01
0dd08     38 FD BF FD | 	call	#__system___txraw
0dd0c     D0 F0 03 F6 | 	mov	ptra, fp
0dd10     E0 00 A0 FD | 	call	#popregs_
0dd14                 | __system___tx_ret
0dd14     2D 00 64 FD | 	ret
0dd18                 | 
0dd18                 | __system___rx
0dd18     02 9C 05 F6 | 	mov	COUNT_, #2
0dd1c     D1 00 A0 FD | 	call	#pushregs_
0dd20                 | LR__0896
0dd20     00 3E 06 F6 | 	mov	arg01, #0
0dd24     64 FD BF FD | 	call	#__system___rxraw
0dd28     0B 49 02 F6 | 	mov	local01, result1
0dd2c     FF FF 7F FF 
0dd30     FF 49 0E F2 | 	cmp	local01, ##-1 wz
0dd34     E8 FF 9F AD |  if_e	jmp	#LR__0896
0dd38     0D 48 0E F2 | 	cmp	local01, #13 wz
0dd3c     14 00 90 5D |  if_ne	jmp	#LR__0897
0dd40     08 0A 06 F1 | 	add	ptr___system__dat__, #8
0dd44     05 4B 02 FB | 	rdlong	local02, ptr___system__dat__
0dd48     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
0dd4c     02 4A CE F7 | 	test	local02, #2 wz
0dd50     0A 48 06 56 |  if_ne	mov	local01, #10
0dd54                 | LR__0897
0dd54     08 0A 06 F1 | 	add	ptr___system__dat__, #8
0dd58     05 4B 02 FB | 	rdlong	local02, ptr___system__dat__
0dd5c     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
0dd60     01 4A CE F7 | 	test	local02, #1 wz
0dd64     1C 00 90 AD |  if_e	jmp	#LR__0900
0dd68     7F 48 0E F2 | 	cmp	local01, #127 wz
0dd6c     0C 00 90 5D |  if_ne	jmp	#LR__0898
0dd70     08 3E 06 F6 | 	mov	arg01, #8
0dd74     58 FF BF FD | 	call	#__system___tx
0dd78     08 00 90 FD | 	jmp	#LR__0899
0dd7c                 | LR__0898
0dd7c     24 3F 02 F6 | 	mov	arg01, local01
0dd80     4C FF BF FD | 	call	#__system___tx
0dd84                 | LR__0899
0dd84                 | LR__0900
0dd84     24 17 02 F6 | 	mov	result1, local01
0dd88     D0 F0 03 F6 | 	mov	ptra, fp
0dd8c     E0 00 A0 FD | 	call	#popregs_
0dd90                 | __system___rx_ret
0dd90     2D 00 64 FD | 	ret
0dd94                 | 
0dd94                 | __system___waitus
0dd94     02 9C 05 F6 | 	mov	COUNT_, #2
0dd98     D1 00 A0 FD | 	call	#pushregs_
0dd9c     1F 49 02 F6 | 	mov	local01, arg01
0dda0     10 0A 06 F1 | 	add	ptr___system__dat__, #16
0dda4     05 4B 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0dda8     10 0A 86 F1 | 	sub	ptr___system__dat__, #16
0ddac     20 00 90 5D |  if_ne	jmp	#LR__0901
0ddb0     14 9C 06 FB | 	rdlong	muldiva_, #20
0ddb4     A1 07 00 FF 
0ddb8     40 9E 06 F6 | 	mov	muldivb_, ##1000000
0ddbc     ED 00 A0 FD | 	call	#unsdivide_
0ddc0     4F 4B 02 F6 | 	mov	local02, muldivb_
0ddc4     10 0A 06 F1 | 	add	ptr___system__dat__, #16
0ddc8     05 9F 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0ddcc     10 0A 86 F1 | 	sub	ptr___system__dat__, #16
0ddd0                 | LR__0901
0ddd0     25 49 02 FD | 	qmul	local01, local02
0ddd4     18 3E 62 FD | 	getqx	arg01
0ddd8     1F 3E 62 FD | 	waitx	arg01
0dddc     D0 F0 03 F6 | 	mov	ptra, fp
0dde0     E0 00 A0 FD | 	call	#popregs_
0dde4                 | __system___waitus_ret
0dde4     2D 00 64 FD | 	ret
0dde8                 | 
0dde8                 | __system____getvfsforfile
0dde8     12 9C 05 F6 | 	mov	COUNT_, #18
0ddec     D1 00 A0 FD | 	call	#pushregs_
0ddf0     1F 49 02 F6 | 	mov	local01, arg01
0ddf4     20 4B 02 F6 | 	mov	local02, arg02
0ddf8     21 4D 02 F6 | 	mov	local03, arg03
0ddfc     25 4F C2 FA | 	rdbyte	local04, local02
0de00     2F 4E 0E F2 | 	cmp	local04, #47 wz
0de04     14 00 90 5D |  if_ne	jmp	#LR__0902
0de08     24 3F 02 F6 | 	mov	arg01, local01
0de0c     25 41 02 F6 | 	mov	arg02, local02
0de10     00 43 06 F6 | 	mov	arg03, #256
0de14     74 28 B0 FD | 	call	#__system__strncpy
0de18     3C 00 90 FD | 	jmp	#LR__0903
0de1c                 | LR__0902
0de1c     38 0A 06 F1 | 	add	ptr___system__dat__, #56
0de20     05 41 02 F6 | 	mov	arg02, ptr___system__dat__
0de24     38 0A 86 F1 | 	sub	ptr___system__dat__, #56
0de28     24 3F 02 F6 | 	mov	arg01, local01
0de2c     00 43 06 F6 | 	mov	arg03, #256
0de30     58 28 B0 FD | 	call	#__system__strncpy
0de34     87 00 00 FF 
0de38     48 41 06 F6 | 	mov	arg02, ##@LR__1176
0de3c     24 3F 02 F6 | 	mov	arg01, local01
0de40     00 43 06 F6 | 	mov	arg03, #256
0de44     90 28 B0 FD | 	call	#__system__strncat
0de48     24 3F 02 F6 | 	mov	arg01, local01
0de4c     25 41 02 F6 | 	mov	arg02, local02
0de50     00 43 06 F6 | 	mov	arg03, #256
0de54     80 28 B0 FD | 	call	#__system__strncat
0de58                 | LR__0903
0de58     00 50 06 F6 | 	mov	local05, #0
0de5c                 | LR__0904
0de5c     04 50 5E F2 | 	cmps	local05, #4 wcz
0de60     50 01 90 3D |  if_ae	jmp	#LR__0915
0de64     28 4F 02 F6 | 	mov	local04, local05
0de68     02 4E 66 F0 | 	shl	local04, #2
0de6c     18 0A 06 F1 | 	add	ptr___system__dat__, #24
0de70     05 4F 02 F1 | 	add	local04, ptr___system__dat__
0de74     27 53 0A FB | 	rdlong	local06, local04 wz
0de78     18 0A 86 F1 | 	sub	ptr___system__dat__, #24
0de7c     2C 01 90 AD |  if_e	jmp	#LR__0914
0de80     28 4F 02 F6 | 	mov	local04, local05
0de84     02 4E 66 F0 | 	shl	local04, #2
0de88     18 0A 06 F1 | 	add	ptr___system__dat__, #24
0de8c     05 4F 02 F1 | 	add	local04, ptr___system__dat__
0de90     27 3F 02 FB | 	rdlong	arg01, local04
0de94     18 0A 86 F1 | 	sub	ptr___system__dat__, #24
0de98     00 54 06 F6 | 	mov	local07, #0
0de9c     70 21 9F FE | 	loc	pa,	#(@LR__0906-@LR__0905)
0dea0     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0dea4                 | LR__0905
0dea4     1F 57 CA FA | 	rdbyte	local08, arg01 wz
0dea8     01 54 06 51 |  if_ne	add	local07, #1
0deac     01 3E 06 51 |  if_ne	add	arg01, #1
0deb0     F0 FF 9F 5D |  if_ne	jmp	#LR__0905
0deb4                 | LR__0906
0deb4     2A 17 02 F6 | 	mov	result1, local07
0deb8     0B 59 02 F6 | 	mov	local09, result1
0debc     2C 5B 02 F6 | 	mov	local10, local09
0dec0     24 5B 02 F1 | 	add	local10, local01
0dec4     2D 4F C2 FA | 	rdbyte	local04, local10
0dec8     2F 4E 0E F2 | 	cmp	local04, #47 wz
0decc     10 00 90 AD |  if_e	jmp	#LR__0907
0ded0     2C 5D 02 F6 | 	mov	local11, local09
0ded4     24 5D 02 F1 | 	add	local11, local01
0ded8     2E 5F CA FA | 	rdbyte	local12, local11 wz
0dedc     CC 00 90 5D |  if_ne	jmp	#LR__0913
0dee0                 | LR__0907
0dee0     24 3F 02 F6 | 	mov	arg01, local01
0dee4     28 61 02 F6 | 	mov	local13, local05
0dee8     02 60 66 F0 | 	shl	local13, #2
0deec     18 0A 06 F1 | 	add	ptr___system__dat__, #24
0def0     05 61 02 F1 | 	add	local13, ptr___system__dat__
0def4     30 41 02 FB | 	rdlong	arg02, local13
0def8     2C 43 02 F6 | 	mov	arg03, local09
0defc     18 0A 86 F1 | 	sub	ptr___system__dat__, #24
0df00     58 28 B0 FD | 	call	#__system__strncmp
0df04     0B 63 0A F6 | 	mov	local14, result1 wz
0df08     A0 00 90 5D |  if_ne	jmp	#LR__0913
0df0c     28 4F 02 F6 | 	mov	local04, local05
0df10     02 4E 66 F0 | 	shl	local04, #2
0df14     28 0A 06 F1 | 	add	ptr___system__dat__, #40
0df18     05 4F 02 F1 | 	add	local04, ptr___system__dat__
0df1c     27 65 02 FB | 	rdlong	local15, local04
0df20     28 0A 86 F1 | 	sub	ptr___system__dat__, #40
0df24     24 21 9F FE | 	loc	pa,	#(@LR__0910-@LR__0908)
0df28     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0df2c                 | LR__0908
0df2c     2C 53 02 F6 | 	mov	local06, local09
0df30     01 52 06 F1 | 	add	local06, #1
0df34     24 53 02 F1 | 	add	local06, local01
0df38     29 4F C2 FA | 	rdbyte	local04, local06
0df3c     2E 4E 0E F2 | 	cmp	local04, #46 wz
0df40     34 00 90 5D |  if_ne	jmp	#LR__0911
0df44     2C 67 02 F6 | 	mov	local16, local09
0df48     02 66 06 F1 | 	add	local16, #2
0df4c     24 67 02 F1 | 	add	local16, local01
0df50     33 5D C2 FA | 	rdbyte	local11, local16
0df54     2F 5C 0E F2 | 	cmp	local11, #47 wz
0df58     14 00 90 AD |  if_e	jmp	#LR__0909
0df5c     2C 69 02 F6 | 	mov	local17, local09
0df60     02 68 06 F1 | 	add	local17, #2
0df64     24 69 02 F1 | 	add	local17, local01
0df68     34 6B CA FA | 	rdbyte	local18, local17 wz
0df6c     08 00 90 5D |  if_ne	jmp	#LR__0911
0df70                 | LR__0909
0df70     01 58 06 F1 | 	add	local09, #1
0df74     B4 FF 9F FD | 	jmp	#LR__0908
0df78                 | LR__0910
0df78                 | LR__0911
0df78     00 4C 0E F2 | 	cmp	local03, #0 wz
0df7c     10 00 90 AD |  if_e	jmp	#LR__0912
0df80     26 3F 02 F6 | 	mov	arg01, local03
0df84     24 41 02 F6 | 	mov	arg02, local01
0df88     00 43 06 F6 | 	mov	arg03, #256
0df8c     FC 26 B0 FD | 	call	#__system__strncpy
0df90                 | LR__0912
0df90     24 3F 02 F6 | 	mov	arg01, local01
0df94     24 41 02 F6 | 	mov	arg02, local01
0df98     2C 41 02 F1 | 	add	arg02, local09
0df9c     01 40 06 F1 | 	add	arg02, #1
0dfa0     64 FC BF FD | 	call	#__system____builtin_strcpy
0dfa4     32 17 02 F6 | 	mov	result1, local15
0dfa8     1C 00 90 FD | 	jmp	#LR__0916
0dfac                 | LR__0913
0dfac                 | LR__0914
0dfac     01 50 06 F1 | 	add	local05, #1
0dfb0     A8 FE 9F FD | 	jmp	#LR__0904
0dfb4                 | LR__0915
0dfb4     01 00 00 FF 
0dfb8     3C 0A 06 F1 | 	add	ptr___system__dat__, ##572
0dfbc     05 17 02 FB | 	rdlong	result1, ptr___system__dat__
0dfc0     01 00 00 FF 
0dfc4     3C 0A 86 F1 | 	sub	ptr___system__dat__, ##572
0dfc8                 | LR__0916
0dfc8     D0 F0 03 F6 | 	mov	ptra, fp
0dfcc     E0 00 A0 FD | 	call	#popregs_
0dfd0                 | __system____getvfsforfile_ret
0dfd0     2D 00 64 FD | 	ret
0dfd4                 | 
0dfd4                 | __system___basic_print_char
0dfd4     05 9C 05 F6 | 	mov	COUNT_, #5
0dfd8     D1 00 A0 FD | 	call	#pushregs_
0dfdc     20 49 02 F6 | 	mov	local01, arg02
0dfe0     28 2C B0 FD | 	call	#__system___gettxfunc
0dfe4     0B 4B 0A F6 | 	mov	local02, result1 wz
0dfe8     00 16 06 A6 |  if_e	mov	result1, #0
0dfec     24 00 90 AD |  if_e	jmp	#LR__0917
0dff0     25 4D 02 FB | 	rdlong	local03, local02
0dff4     04 4A 06 F1 | 	add	local02, #4
0dff8     25 4F 02 FB | 	rdlong	local04, local02
0dffc     24 3F 02 F6 | 	mov	arg01, local01
0e000     FE 50 02 F6 | 	mov	local05, objptr
0e004     26 FD 01 F6 | 	mov	objptr, local03
0e008     2D 4E 62 FD | 	call	local04
0e00c     28 FD 01 F6 | 	mov	objptr, local05
0e010     01 16 06 F6 | 	mov	result1, #1
0e014                 | LR__0917
0e014     D0 F0 03 F6 | 	mov	ptra, fp
0e018     E0 00 A0 FD | 	call	#popregs_
0e01c                 | __system___basic_print_char_ret
0e01c     2D 00 64 FD | 	ret
0e020                 | 
0e020                 | __system___basic_print_string
0e020     03 9C 05 F6 | 	mov	COUNT_, #3
0e024     D1 00 A0 FD | 	call	#pushregs_
0e028     20 49 02 F6 | 	mov	local01, arg02
0e02c     21 4B 02 F6 | 	mov	local02, arg03
0e030     D8 2B B0 FD | 	call	#__system___gettxfunc
0e034     0B 4D 0A F6 | 	mov	local03, result1 wz
0e038     00 16 06 A6 |  if_e	mov	result1, #0
0e03c     1C 00 90 AD |  if_e	jmp	#LR__0918
0e040     00 48 0E F2 | 	cmp	local01, #0 wz
0e044     00 16 06 A6 |  if_e	mov	result1, #0
0e048     10 00 90 AD |  if_e	jmp	#LR__0918
0e04c     26 3F 02 F6 | 	mov	arg01, local03
0e050     25 41 02 F6 | 	mov	arg02, local02
0e054     24 43 02 F6 | 	mov	arg03, local01
0e058     B4 00 B0 FD | 	call	#__system___fmtstr
0e05c                 | LR__0918
0e05c     D0 F0 03 F6 | 	mov	ptra, fp
0e060     E0 00 A0 FD | 	call	#popregs_
0e064                 | __system___basic_print_string_ret
0e064     2D 00 64 FD | 	ret
0e068                 | 
0e068                 | __system___basic_print_unsigned
0e068     04 9C 05 F6 | 	mov	COUNT_, #4
0e06c     D1 00 A0 FD | 	call	#pushregs_
0e070     20 49 02 F6 | 	mov	local01, arg02
0e074     21 4B 02 F6 | 	mov	local02, arg03
0e078     22 4D 02 F6 | 	mov	local03, arg04
0e07c     8C 2B B0 FD | 	call	#__system___gettxfunc
0e080     0B 4F 0A F6 | 	mov	local04, result1 wz
0e084     00 16 06 A6 |  if_e	mov	result1, #0
0e088     18 00 90 AD |  if_e	jmp	#LR__0919
0e08c     3A 4A 26 F4 | 	bith	local02, #58
0e090     27 3F 02 F6 | 	mov	arg01, local04
0e094     25 41 02 F6 | 	mov	arg02, local02
0e098     24 43 02 F6 | 	mov	arg03, local01
0e09c     26 45 02 F6 | 	mov	arg04, local03
0e0a0     64 01 B0 FD | 	call	#__system___fmtnum
0e0a4                 | LR__0919
0e0a4     D0 F0 03 F6 | 	mov	ptra, fp
0e0a8     E0 00 A0 FD | 	call	#popregs_
0e0ac                 | __system___basic_print_unsigned_ret
0e0ac     2D 00 64 FD | 	ret
0e0b0                 | 
0e0b0                 | __system___fmtchar
0e0b0     00 9C 05 F6 | 	mov	COUNT_, #0
0e0b4     D1 00 A0 FD | 	call	#pushregs_
0e0b8     14 F0 07 F1 | 	add	ptra, #20
0e0bc     04 A0 05 F1 | 	add	fp, #4
0e0c0     D0 3E 62 FC | 	wrlong	arg01, fp
0e0c4     04 A0 05 F1 | 	add	fp, #4
0e0c8     D0 40 62 FC | 	wrlong	arg02, fp
0e0cc     04 A0 05 F1 | 	add	fp, #4
0e0d0     D0 42 62 FC | 	wrlong	arg03, fp
0e0d4     04 A0 05 F1 | 	add	fp, #4
0e0d8     D0 42 42 FC | 	wrbyte	arg03, fp
0e0dc     01 A0 05 F1 | 	add	fp, #1
0e0e0     D0 00 48 FC | 	wrbyte	#0, fp
0e0e4     0D A0 85 F1 | 	sub	fp, #13
0e0e8     D0 3E 02 FB | 	rdlong	arg01, fp
0e0ec     04 A0 05 F1 | 	add	fp, #4
0e0f0     D0 40 02 FB | 	rdlong	arg02, fp
0e0f4     08 A0 05 F1 | 	add	fp, #8
0e0f8     D0 42 02 F6 | 	mov	arg03, fp
0e0fc     10 A0 85 F1 | 	sub	fp, #16
0e100     0C 00 B0 FD | 	call	#__system___fmtstr
0e104     D0 F0 03 F6 | 	mov	ptra, fp
0e108     E0 00 A0 FD | 	call	#popregs_
0e10c                 | __system___fmtchar_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | __system___fmtstr
0e110     0E 9C 05 F6 | 	mov	COUNT_, #14
0e114     D1 00 A0 FD | 	call	#pushregs_
0e118     1F 49 02 F6 | 	mov	local01, arg01
0e11c     20 4B 02 F6 | 	mov	local02, arg02
0e120     21 4D 02 F6 | 	mov	local03, arg03
0e124     25 4F 02 F6 | 	mov	local04, local02
0e128     FF 4E 06 F5 | 	and	local04, #255
0e12c     26 3F 02 F6 | 	mov	arg01, local03
0e130     00 50 06 F6 | 	mov	local05, #0
0e134     D8 1E 9F FE | 	loc	pa,	#(@LR__0921-@LR__0920)
0e138     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0e13c                 | LR__0920
0e13c     1F 53 CA FA | 	rdbyte	local06, arg01 wz
0e140     01 50 06 51 |  if_ne	add	local05, #1
0e144     01 3E 06 51 |  if_ne	add	arg01, #1
0e148     F0 FF 9F 5D |  if_ne	jmp	#LR__0920
0e14c                 | LR__0921
0e14c     28 17 02 F6 | 	mov	result1, local05
0e150     0B 55 02 F6 | 	mov	local07, result1
0e154     00 4E 0E F2 | 	cmp	local04, #0 wz
0e158     04 00 90 AD |  if_e	jmp	#LR__0922
0e15c     27 55 7A F3 | 	fles	local07, local04 wcz
0e160                 | LR__0922
0e160     24 3F 02 F6 | 	mov	arg01, local01
0e164     25 41 02 F6 | 	mov	arg02, local02
0e168     2A 43 02 F6 | 	mov	arg03, local07
0e16c     02 44 06 F6 | 	mov	arg04, #2
0e170     E8 26 B0 FD | 	call	#__system___fmtpad
0e174     0B 57 02 F6 | 	mov	local08, result1
0e178     00 56 5E F2 | 	cmps	local08, #0 wcz
0e17c     2B 17 02 C6 |  if_b	mov	result1, local08
0e180     78 00 90 CD |  if_b	jmp	#LR__0925
0e184     00 58 06 F6 | 	mov	local09, #0
0e188                 | LR__0923
0e188     2A 59 5A F2 | 	cmps	local09, local07 wcz
0e18c     44 00 90 3D |  if_ae	jmp	#LR__0924
0e190     24 5B 02 F6 | 	mov	local10, local01
0e194     2D 5D 02 FB | 	rdlong	local11, local10
0e198     04 5A 06 F1 | 	add	local10, #4
0e19c     2D 5F 02 FB | 	rdlong	local12, local10
0e1a0     26 3F C2 FA | 	rdbyte	arg01, local03
0e1a4     FE 60 02 F6 | 	mov	local13, objptr
0e1a8     2E FD 01 F6 | 	mov	objptr, local11
0e1ac     01 4C 06 F1 | 	add	local03, #1
0e1b0     2D 5E 62 FD | 	call	local12
0e1b4     30 FD 01 F6 | 	mov	objptr, local13
0e1b8     0B 63 02 F6 | 	mov	local14, result1
0e1bc     00 62 5E F2 | 	cmps	local14, #0 wcz
0e1c0     31 17 02 C6 |  if_b	mov	result1, local14
0e1c4     34 00 90 CD |  if_b	jmp	#LR__0925
0e1c8     31 57 02 F1 | 	add	local08, local14
0e1cc     01 58 06 F1 | 	add	local09, #1
0e1d0     B4 FF 9F FD | 	jmp	#LR__0923
0e1d4                 | LR__0924
0e1d4     24 3F 02 F6 | 	mov	arg01, local01
0e1d8     25 41 02 F6 | 	mov	arg02, local02
0e1dc     2A 43 02 F6 | 	mov	arg03, local07
0e1e0     01 44 06 F6 | 	mov	arg04, #1
0e1e4     74 26 B0 FD | 	call	#__system___fmtpad
0e1e8     0B 63 02 F6 | 	mov	local14, result1
0e1ec     00 62 5E F2 | 	cmps	local14, #0 wcz
0e1f0     31 17 02 C6 |  if_b	mov	result1, local14
0e1f4     31 57 02 31 |  if_ae	add	local08, local14
0e1f8     2B 17 02 36 |  if_ae	mov	result1, local08
0e1fc                 | LR__0925
0e1fc     D0 F0 03 F6 | 	mov	ptra, fp
0e200     E0 00 A0 FD | 	call	#popregs_
0e204                 | __system___fmtstr_ret
0e204     2D 00 64 FD | 	ret
0e208                 | 
0e208                 | __system___fmtnum
0e208     07 9C 05 F6 | 	mov	COUNT_, #7
0e20c     D1 00 A0 FD | 	call	#pushregs_
0e210     70 F0 07 F1 | 	add	ptra, #112
0e214     04 A0 05 F1 | 	add	fp, #4
0e218     D0 3E 62 FC | 	wrlong	arg01, fp
0e21c     04 A0 05 F1 | 	add	fp, #4
0e220     D0 40 62 FC | 	wrlong	arg02, fp
0e224     04 A0 05 F1 | 	add	fp, #4
0e228     D0 42 62 FC | 	wrlong	arg03, fp
0e22c     04 A0 05 F1 | 	add	fp, #4
0e230     D0 44 62 FC | 	wrlong	arg04, fp
0e234     04 A0 05 F1 | 	add	fp, #4
0e238     D0 48 02 F6 | 	mov	local01, fp
0e23c     44 A0 05 F1 | 	add	fp, #68
0e240     D0 48 62 FC | 	wrlong	local01, fp
0e244     04 A0 05 F1 | 	add	fp, #4
0e248     D0 00 68 FC | 	wrlong	#0, fp
0e24c     54 A0 85 F1 | 	sub	fp, #84
0e250     D0 48 02 FB | 	rdlong	local01, fp
0e254     10 48 46 F0 | 	shr	local01, #16
0e258     3F 48 06 F5 | 	and	local01, #63
0e25c     58 A0 05 F1 | 	add	fp, #88
0e260     D0 48 62 FC | 	wrlong	local01, fp
0e264     58 A0 85 F1 | 	sub	fp, #88
0e268     D0 48 02 FB | 	rdlong	local01, fp
0e26c     FF 48 06 F5 | 	and	local01, #255
0e270     5C A0 05 F1 | 	add	fp, #92
0e274     D0 48 62 FC | 	wrlong	local01, fp
0e278     5C A0 85 F1 | 	sub	fp, #92
0e27c     D0 48 02 FB | 	rdlong	local01, fp
0e280     1A 48 46 F0 | 	shr	local01, #26
0e284     03 48 06 F5 | 	and	local01, #3
0e288     60 A0 05 F1 | 	add	fp, #96
0e28c     D0 48 62 FC | 	wrlong	local01, fp
0e290     08 A0 85 F1 | 	sub	fp, #8
0e294     D0 48 02 FB | 	rdlong	local01, fp
0e298     60 A0 85 F1 | 	sub	fp, #96
0e29c     00 48 5E F2 | 	cmps	local01, #0 wcz
0e2a0     14 00 90 ED |  if_be	jmp	#LR__0926
0e2a4     60 A0 05 F1 | 	add	fp, #96
0e2a8     D0 48 02 FB | 	rdlong	local01, fp
0e2ac     01 48 86 F1 | 	sub	local01, #1
0e2b0     D0 48 62 FC | 	wrlong	local01, fp
0e2b4     60 A0 85 F1 | 	sub	fp, #96
0e2b8                 | LR__0926
0e2b8     64 A0 05 F1 | 	add	fp, #100
0e2bc     D0 4A 02 FB | 	rdlong	local02, fp
0e2c0     64 A0 85 F1 | 	sub	fp, #100
0e2c4     40 4A 5E F2 | 	cmps	local02, #64 wcz
0e2c8     14 00 90 1D |  if_a	jmp	#LR__0927
0e2cc     64 A0 05 F1 | 	add	fp, #100
0e2d0     D0 4C 02 FB | 	rdlong	local03, fp
0e2d4     64 A0 85 F1 | 	sub	fp, #100
0e2d8     26 4F 0A F6 | 	mov	local04, local03 wz
0e2dc     0C 00 90 5D |  if_ne	jmp	#LR__0928
0e2e0                 | LR__0927
0e2e0     64 A0 05 F1 | 	add	fp, #100
0e2e4     D0 80 68 FC | 	wrlong	#64, fp
0e2e8     64 A0 85 F1 | 	sub	fp, #100
0e2ec                 | LR__0928
0e2ec     68 A0 05 F1 | 	add	fp, #104
0e2f0     D0 48 02 FB | 	rdlong	local01, fp
0e2f4     68 A0 85 F1 | 	sub	fp, #104
0e2f8     03 48 0E F2 | 	cmp	local01, #3 wz
0e2fc     10 00 90 5D |  if_ne	jmp	#LR__0929
0e300     68 A0 05 F1 | 	add	fp, #104
0e304     D0 00 68 FC | 	wrlong	#0, fp
0e308     68 A0 85 F1 | 	sub	fp, #104
0e30c     30 00 90 FD | 	jmp	#LR__0931
0e310                 | LR__0929
0e310     0C A0 05 F1 | 	add	fp, #12
0e314     D0 48 02 FB | 	rdlong	local01, fp
0e318     0C A0 85 F1 | 	sub	fp, #12
0e31c     00 48 5E F2 | 	cmps	local01, #0 wcz
0e320     1C 00 90 3D |  if_ae	jmp	#LR__0930
0e324     68 A0 05 F1 | 	add	fp, #104
0e328     D0 08 68 FC | 	wrlong	#4, fp
0e32c     5C A0 85 F1 | 	sub	fp, #92
0e330     D0 48 02 FB | 	rdlong	local01, fp
0e334     24 49 62 F6 | 	neg	local01, local01
0e338     D0 48 62 FC | 	wrlong	local01, fp
0e33c     0C A0 85 F1 | 	sub	fp, #12
0e340                 | LR__0930
0e340                 | LR__0931
0e340     68 A0 05 F1 | 	add	fp, #104
0e344     D0 48 0A FB | 	rdlong	local01, fp wz
0e348     68 A0 85 F1 | 	sub	fp, #104
0e34c     EC 00 90 AD |  if_e	jmp	#LR__0938
0e350     5C A0 05 F1 | 	add	fp, #92
0e354     D0 4E 02 FB | 	rdlong	local04, fp
0e358     01 4E 06 F1 | 	add	local04, #1
0e35c     D0 4E 62 FC | 	wrlong	local04, fp
0e360     04 A0 05 F1 | 	add	fp, #4
0e364     D0 48 02 FB | 	rdlong	local01, fp
0e368     04 A0 05 F1 | 	add	fp, #4
0e36c     D0 4E 02 FB | 	rdlong	local04, fp
0e370     64 A0 85 F1 | 	sub	fp, #100
0e374     27 49 0A F2 | 	cmp	local01, local04 wz
0e378     3C 00 90 5D |  if_ne	jmp	#LR__0933
0e37c     60 A0 05 F1 | 	add	fp, #96
0e380     D0 4E 02 FB | 	rdlong	local04, fp
0e384     01 4E 86 F1 | 	sub	local04, #1
0e388     D0 4E 62 FC | 	wrlong	local04, fp
0e38c     D0 48 0A FB | 	rdlong	local01, fp wz
0e390     60 A0 85 F1 | 	sub	fp, #96
0e394     20 00 90 5D |  if_ne	jmp	#LR__0932
0e398     04 A0 05 F1 | 	add	fp, #4
0e39c     D0 3E 02 FB | 	rdlong	arg01, fp
0e3a0     04 A0 05 F1 | 	add	fp, #4
0e3a4     D0 40 02 FB | 	rdlong	arg02, fp
0e3a8     08 A0 85 F1 | 	sub	fp, #8
0e3ac     23 42 06 F6 | 	mov	arg03, #35
0e3b0     FC FC BF FD | 	call	#__system___fmtchar
0e3b4     70 01 90 FD | 	jmp	#LR__0943
0e3b8                 | LR__0932
0e3b8                 | LR__0933
0e3b8     68 A0 05 F1 | 	add	fp, #104
0e3bc     D0 48 02 FB | 	rdlong	local01, fp
0e3c0     68 A0 85 F1 | 	sub	fp, #104
0e3c4     02 48 0E F2 | 	cmp	local01, #2 wz
0e3c8     20 00 90 5D |  if_ne	jmp	#LR__0934
0e3cc     58 A0 05 F1 | 	add	fp, #88
0e3d0     D0 48 02 FB | 	rdlong	local01, fp
0e3d4     24 4F 02 F6 | 	mov	local04, local01
0e3d8     01 4E 06 F1 | 	add	local04, #1
0e3dc     D0 4E 62 FC | 	wrlong	local04, fp
0e3e0     58 A0 85 F1 | 	sub	fp, #88
0e3e4     24 41 48 FC | 	wrbyte	#32, local01
0e3e8     50 00 90 FD | 	jmp	#LR__0937
0e3ec                 | LR__0934
0e3ec     68 A0 05 F1 | 	add	fp, #104
0e3f0     D0 48 02 FB | 	rdlong	local01, fp
0e3f4     68 A0 85 F1 | 	sub	fp, #104
0e3f8     04 48 0E F2 | 	cmp	local01, #4 wz
0e3fc     20 00 90 5D |  if_ne	jmp	#LR__0935
0e400     58 A0 05 F1 | 	add	fp, #88
0e404     D0 48 02 FB | 	rdlong	local01, fp
0e408     24 4F 02 F6 | 	mov	local04, local01
0e40c     01 4E 06 F1 | 	add	local04, #1
0e410     D0 4E 62 FC | 	wrlong	local04, fp
0e414     58 A0 85 F1 | 	sub	fp, #88
0e418     24 5B 48 FC | 	wrbyte	#45, local01
0e41c     1C 00 90 FD | 	jmp	#LR__0936
0e420                 | LR__0935
0e420     58 A0 05 F1 | 	add	fp, #88
0e424     D0 48 02 FB | 	rdlong	local01, fp
0e428     24 4F 02 F6 | 	mov	local04, local01
0e42c     01 4E 06 F1 | 	add	local04, #1
0e430     D0 4E 62 FC | 	wrlong	local04, fp
0e434     58 A0 85 F1 | 	sub	fp, #88
0e438     24 57 48 FC | 	wrbyte	#43, local01
0e43c                 | LR__0936
0e43c                 | LR__0937
0e43c                 | LR__0938
0e43c     58 A0 05 F1 | 	add	fp, #88
0e440     D0 3E 02 FB | 	rdlong	arg01, fp
0e444     4C A0 85 F1 | 	sub	fp, #76
0e448     D0 40 02 FB | 	rdlong	arg02, fp
0e44c     04 A0 05 F1 | 	add	fp, #4
0e450     D0 42 02 FB | 	rdlong	arg03, fp
0e454     50 A0 05 F1 | 	add	fp, #80
0e458     D0 44 02 FB | 	rdlong	arg04, fp
0e45c     00 50 06 F6 | 	mov	local05, #0
0e460     58 A0 85 F1 | 	sub	fp, #88
0e464     D0 52 02 FB | 	rdlong	local06, fp
0e468     08 A0 85 F1 | 	sub	fp, #8
0e46c     1D 52 2E F4 | 	testbn	local06, #29 wz
0e470     01 50 06 56 |  if_ne	mov	local05, #1
0e474     28 47 02 F6 | 	mov	arg05, local05
0e478     A4 24 B0 FD | 	call	#__system___uitoa
0e47c     0B 55 02 F6 | 	mov	local07, result1
0e480     5C A0 05 F1 | 	add	fp, #92
0e484     D0 48 02 FB | 	rdlong	local01, fp
0e488     2A 49 02 F1 | 	add	local01, local07
0e48c     D0 48 62 FC | 	wrlong	local01, fp
0e490     08 A0 05 F1 | 	add	fp, #8
0e494     D0 4E 02 FB | 	rdlong	local04, fp
0e498     64 A0 85 F1 | 	sub	fp, #100
0e49c     27 49 5A F2 | 	cmps	local01, local04 wcz
0e4a0     64 00 90 ED |  if_be	jmp	#LR__0942
0e4a4     98 1B 9F FE | 	loc	pa,	#(@LR__0940-@LR__0939)
0e4a8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0e4ac                 | LR__0939
0e4ac     64 A0 05 F1 | 	add	fp, #100
0e4b0     D0 48 02 FB | 	rdlong	local01, fp
0e4b4     24 4F 02 F6 | 	mov	local04, local01
0e4b8     01 4E 86 F1 | 	sub	local04, #1
0e4bc     D0 4E 62 FC | 	wrlong	local04, fp
0e4c0     64 A0 85 F1 | 	sub	fp, #100
0e4c4     00 48 5E F2 | 	cmps	local01, #0 wcz
0e4c8     20 00 90 ED |  if_be	jmp	#LR__0941
0e4cc     58 A0 05 F1 | 	add	fp, #88
0e4d0     D0 48 02 FB | 	rdlong	local01, fp
0e4d4     24 4F 02 F6 | 	mov	local04, local01
0e4d8     01 4E 06 F1 | 	add	local04, #1
0e4dc     D0 4E 62 FC | 	wrlong	local04, fp
0e4e0     58 A0 85 F1 | 	sub	fp, #88
0e4e4     24 47 48 FC | 	wrbyte	#35, local01
0e4e8     C0 FF 9F FD | 	jmp	#LR__0939
0e4ec                 | LR__0940
0e4ec                 | LR__0941
0e4ec     58 A0 05 F1 | 	add	fp, #88
0e4f0     D0 48 02 FB | 	rdlong	local01, fp
0e4f4     24 4F 02 F6 | 	mov	local04, local01
0e4f8     01 4E 06 F1 | 	add	local04, #1
0e4fc     D0 4E 62 FC | 	wrlong	local04, fp
0e500     58 A0 85 F1 | 	sub	fp, #88
0e504     24 01 48 FC | 	wrbyte	#0, local01
0e508                 | LR__0942
0e508     04 A0 05 F1 | 	add	fp, #4
0e50c     D0 3E 02 FB | 	rdlong	arg01, fp
0e510     04 A0 05 F1 | 	add	fp, #4
0e514     D0 40 02 FB | 	rdlong	arg02, fp
0e518     0C A0 05 F1 | 	add	fp, #12
0e51c     D0 42 02 F6 | 	mov	arg03, fp
0e520     14 A0 85 F1 | 	sub	fp, #20
0e524     E8 FB BF FD | 	call	#__system___fmtstr
0e528                 | LR__0943
0e528     D0 F0 03 F6 | 	mov	ptra, fp
0e52c     E0 00 A0 FD | 	call	#popregs_
0e530                 | __system___fmtnum_ret
0e530     2D 00 64 FD | 	ret
0e534                 | 
0e534                 | __system___fmtfloat
0e534     11 9C 05 F6 | 	mov	COUNT_, #17
0e538     D1 00 A0 FD | 	call	#pushregs_
0e53c     24 F1 07 F1 | 	add	ptra, #292
0e540     04 A0 05 F1 | 	add	fp, #4
0e544     D0 3E 62 FC | 	wrlong	arg01, fp
0e548     04 A0 05 F1 | 	add	fp, #4
0e54c     D0 40 62 FC | 	wrlong	arg02, fp
0e550     04 A0 05 F1 | 	add	fp, #4
0e554     D0 42 62 FC | 	wrlong	arg03, fp
0e558     04 A0 05 F1 | 	add	fp, #4
0e55c     D0 44 62 FC | 	wrlong	arg04, fp
0e560     0C A0 05 F1 | 	add	fp, #12
0e564     D0 14 68 FC | 	wrlong	#10, fp
0e568     08 A0 05 F1 | 	add	fp, #8
0e56c     D0 00 68 FC | 	wrlong	#0, fp
0e570     08 A0 05 F1 | 	add	fp, #8
0e574     D0 00 68 FC | 	wrlong	#0, fp
0e578     08 A0 05 F1 | 	add	fp, #8
0e57c     D0 00 68 FC | 	wrlong	#0, fp
0e580     04 A0 05 F1 | 	add	fp, #4
0e584     D0 04 68 FC | 	wrlong	#2, fp
0e588     04 A0 05 F1 | 	add	fp, #4
0e58c     D0 00 68 FC | 	wrlong	#0, fp
0e590     04 A0 05 F1 | 	add	fp, #4
0e594     D0 00 68 FC | 	wrlong	#0, fp
0e598     04 A0 05 F1 | 	add	fp, #4
0e59c     D0 00 68 FC | 	wrlong	#0, fp
0e5a0     04 A0 05 F1 | 	add	fp, #4
0e5a4     D0 00 68 FC | 	wrlong	#0, fp
0e5a8     18 A0 05 F1 | 	add	fp, #24
0e5ac     D0 00 68 FC | 	wrlong	#0, fp
0e5b0     68 A0 05 F1 | 	add	fp, #104
0e5b4     D0 48 02 F6 | 	mov	local01, fp
0e5b8     08 A0 85 F1 | 	sub	fp, #8
0e5bc     D0 48 62 FC | 	wrlong	local01, fp
0e5c0     04 A0 05 F1 | 	add	fp, #4
0e5c4     D0 48 62 FC | 	wrlong	local01, fp
0e5c8     BC A0 85 F1 | 	sub	fp, #188
0e5cc     D0 4A 02 FB | 	rdlong	local02, fp
0e5d0     10 4A 46 F0 | 	shr	local02, #16
0e5d4     3F 4A 06 F5 | 	and	local02, #63
0e5d8     B0 A0 05 F1 | 	add	fp, #176
0e5dc     D0 4A 62 FC | 	wrlong	local02, fp
0e5e0     B0 A0 85 F1 | 	sub	fp, #176
0e5e4     D0 4A 02 FB | 	rdlong	local02, fp
0e5e8     1C 4A 46 F0 | 	shr	local02, #28
0e5ec     01 4A 06 F5 | 	and	local02, #1
0e5f0     08 A1 05 F1 | 	add	fp, #264
0e5f4     D0 4A 62 FC | 	wrlong	local02, fp
0e5f8     58 A0 85 F1 | 	sub	fp, #88
0e5fc     D0 4A 0A FB | 	rdlong	local02, fp wz
0e600     B8 A0 85 F1 | 	sub	fp, #184
0e604     3C 00 90 5D |  if_ne	jmp	#LR__0945
0e608     10 A0 05 F1 | 	add	fp, #16
0e60c     D0 4A 02 FB | 	rdlong	local02, fp
0e610     10 A0 85 F1 | 	sub	fp, #16
0e614     61 4A 0E F2 | 	cmp	local02, #97 wz
0e618     18 00 90 5D |  if_ne	jmp	#LR__0944
0e61c     B8 A0 05 F1 | 	add	fp, #184
0e620     D0 1A 68 FC | 	wrlong	#13, fp
0e624     84 A0 85 F1 | 	sub	fp, #132
0e628     D0 02 68 FC | 	wrlong	#1, fp
0e62c     34 A0 85 F1 | 	sub	fp, #52
0e630     24 00 90 FD | 	jmp	#LR__0946
0e634                 | LR__0944
0e634     B8 A0 05 F1 | 	add	fp, #184
0e638     D0 0C 68 FC | 	wrlong	#6, fp
0e63c     B8 A0 85 F1 | 	sub	fp, #184
0e640     14 00 90 FD | 	jmp	#LR__0946
0e644                 | LR__0945
0e644     B8 A0 05 F1 | 	add	fp, #184
0e648     D0 4A 02 FB | 	rdlong	local02, fp
0e64c     01 4A 86 F1 | 	sub	local02, #1
0e650     D0 4A 62 FC | 	wrlong	local02, fp
0e654     B8 A0 85 F1 | 	sub	fp, #184
0e658                 | LR__0946
0e658     08 A0 05 F1 | 	add	fp, #8
0e65c     D0 4A 02 FB | 	rdlong	local02, fp
0e660     16 4A 46 F0 | 	shr	local02, #22
0e664     03 4A 06 F5 | 	and	local02, #3
0e668     04 A1 05 F1 | 	add	fp, #260
0e66c     D0 4A 62 FC | 	wrlong	local02, fp
0e670     04 A1 85 F1 | 	sub	fp, #260
0e674     D0 4A 02 FB | 	rdlong	local02, fp
0e678     1D 4A 46 F0 | 	shr	local02, #29
0e67c     01 4A 06 F5 | 	and	local02, #1
0e680     B4 A0 05 F1 | 	add	fp, #180
0e684     D0 4A 62 FC | 	wrlong	local02, fp
0e688     B4 A0 85 F1 | 	sub	fp, #180
0e68c     D0 4A 02 FB | 	rdlong	local02, fp
0e690     08 4A 46 F0 | 	shr	local02, #8
0e694     FF 4A 06 F5 | 	and	local02, #255
0e698     60 A0 05 F1 | 	add	fp, #96
0e69c     D0 4A 62 FC | 	wrlong	local02, fp
0e6a0     60 A0 85 F1 | 	sub	fp, #96
0e6a4     D0 4A 02 FB | 	rdlong	local02, fp
0e6a8     FF 4A 06 F5 | 	and	local02, #255
0e6ac     64 A0 05 F1 | 	add	fp, #100
0e6b0     D0 4A 62 FC | 	wrlong	local02, fp
0e6b4     00 4A 06 F6 | 	mov	local02, #0
0e6b8     5C A0 85 F1 | 	sub	fp, #92
0e6bc     D0 48 02 FB | 	rdlong	local01, fp
0e6c0     65 48 0E F2 | 	cmp	local01, #101 wz
0e6c4     01 4A 06 A6 |  if_e	mov	local02, #1
0e6c8     14 A0 05 F1 | 	add	fp, #20
0e6cc     D0 4A 62 FC | 	wrlong	local02, fp
0e6d0     98 A0 05 F1 | 	add	fp, #152
0e6d4     D0 48 0A FB | 	rdlong	local01, fp wz
0e6d8     45 4A 06 56 |  if_ne	mov	local02, #69
0e6dc     65 4A 06 A6 |  if_e	mov	local02, #101
0e6e0     8C A0 85 F1 | 	sub	fp, #140
0e6e4     D0 4A 62 FC | 	wrlong	local02, fp
0e6e8     20 A0 85 F1 | 	sub	fp, #32
0e6ec     D0 4A 02 FB | 	rdlong	local02, fp
0e6f0     10 A0 85 F1 | 	sub	fp, #16
0e6f4     61 4A 0E F2 | 	cmp	local02, #97 wz
0e6f8     4C 00 90 5D |  if_ne	jmp	#LR__0947
0e6fc     24 A0 05 F1 | 	add	fp, #36
0e700     D0 02 68 FC | 	wrlong	#1, fp
0e704     98 A0 05 F1 | 	add	fp, #152
0e708     D0 48 0A FB | 	rdlong	local01, fp wz
0e70c     50 4A 06 56 |  if_ne	mov	local02, #80
0e710     70 4A 06 A6 |  if_e	mov	local02, #112
0e714     8C A0 85 F1 | 	sub	fp, #140
0e718     D0 4A 62 FC | 	wrlong	local02, fp
0e71c     14 A0 85 F1 | 	sub	fp, #20
0e720     D0 04 68 FC | 	wrlong	#2, fp
0e724     1C A0 05 F1 | 	add	fp, #28
0e728     D0 02 68 FC | 	wrlong	#1, fp
0e72c     84 A0 05 F1 | 	add	fp, #132
0e730     D0 48 0A FB | 	rdlong	local01, fp wz
0e734     58 4A 06 56 |  if_ne	mov	local02, #88
0e738     78 4A 06 A6 |  if_e	mov	local02, #120
0e73c     7C A0 85 F1 | 	sub	fp, #124
0e740     D0 4A 62 FC | 	wrlong	local02, fp
0e744     40 A0 85 F1 | 	sub	fp, #64
0e748                 | LR__0947
0e748     10 A0 05 F1 | 	add	fp, #16
0e74c     D0 4A 02 FB | 	rdlong	local02, fp
0e750     10 A0 85 F1 | 	sub	fp, #16
0e754     23 4A 0E F2 | 	cmp	local02, #35 wz
0e758     3C 00 90 5D |  if_ne	jmp	#LR__0950
0e75c     48 A0 05 F1 | 	add	fp, #72
0e760     D0 02 68 FC | 	wrlong	#1, fp
0e764     C8 A0 05 F1 | 	add	fp, #200
0e768     D0 4A 0A FB | 	rdlong	local02, fp wz
0e76c     10 A1 85 F1 | 	sub	fp, #272
0e770     18 00 90 AD |  if_e	jmp	#LR__0948
0e774     10 A0 05 F1 | 	add	fp, #16
0e778     D0 CC 68 FC | 	wrlong	#102, fp
0e77c     00 A1 05 F1 | 	add	fp, #256
0e780     D0 00 68 FC | 	wrlong	#0, fp
0e784     10 A1 85 F1 | 	sub	fp, #272
0e788     0C 00 90 FD | 	jmp	#LR__0949
0e78c                 | LR__0948
0e78c     10 A1 05 F1 | 	add	fp, #272
0e790     D0 02 68 FC | 	wrlong	#1, fp
0e794     10 A1 85 F1 | 	sub	fp, #272
0e798                 | LR__0949
0e798                 | LR__0950
0e798     08 A0 05 F1 | 	add	fp, #8
0e79c     D0 4A 02 FB | 	rdlong	local02, fp
0e7a0     1A 4A 46 F0 | 	shr	local02, #26
0e7a4     03 4A 06 F5 | 	and	local02, #3
0e7a8     5C A0 05 F1 | 	add	fp, #92
0e7ac     D0 4A 62 FC | 	wrlong	local02, fp
0e7b0     58 A0 85 F1 | 	sub	fp, #88
0e7b4     D0 16 02 FB | 	rdlong	result1, fp
0e7b8     0C A0 85 F1 | 	sub	fp, #12
0e7bc     1F 16 4E F0 | 	shr	result1, #31 wz
0e7c0     20 00 90 AD |  if_e	jmp	#LR__0951
0e7c4     2C A0 05 F1 | 	add	fp, #44
0e7c8     D0 5A 68 FC | 	wrlong	#45, fp
0e7cc     20 A0 85 F1 | 	sub	fp, #32
0e7d0     D0 16 02 FB | 	rdlong	result1, fp
0e7d4     1F 16 E6 F4 | 	bitnot	result1, #31
0e7d8     D0 16 62 FC | 	wrlong	result1, fp
0e7dc     0C A0 85 F1 | 	sub	fp, #12
0e7e0     40 00 90 FD | 	jmp	#LR__0954
0e7e4                 | LR__0951
0e7e4     64 A0 05 F1 | 	add	fp, #100
0e7e8     D0 4A 02 FB | 	rdlong	local02, fp
0e7ec     64 A0 85 F1 | 	sub	fp, #100
0e7f0     01 4A 0E F2 | 	cmp	local02, #1 wz
0e7f4     10 00 90 5D |  if_ne	jmp	#LR__0952
0e7f8     2C A0 05 F1 | 	add	fp, #44
0e7fc     D0 56 68 FC | 	wrlong	#43, fp
0e800     2C A0 85 F1 | 	sub	fp, #44
0e804     1C 00 90 FD | 	jmp	#LR__0953
0e808                 | LR__0952
0e808     64 A0 05 F1 | 	add	fp, #100
0e80c     D0 4A 02 FB | 	rdlong	local02, fp
0e810     64 A0 85 F1 | 	sub	fp, #100
0e814     02 4A 0E F2 | 	cmp	local02, #2 wz
0e818     2C A0 05 A1 |  if_e	add	fp, #44
0e81c     D0 40 68 AC |  if_e	wrlong	#32, fp
0e820     2C A0 85 A1 |  if_e	sub	fp, #44
0e824                 | LR__0953
0e824                 | LR__0954
0e824     08 A0 05 F1 | 	add	fp, #8
0e828     D0 4A 02 FB | 	rdlong	local02, fp
0e82c     18 4A 46 F0 | 	shr	local02, #24
0e830     03 4A 06 F5 | 	and	local02, #3
0e834     3C A0 05 F1 | 	add	fp, #60
0e838     D0 4A 62 FC | 	wrlong	local02, fp
0e83c     00 4A 06 F6 | 	mov	local02, #0
0e840     18 A0 85 F1 | 	sub	fp, #24
0e844     D0 4C 02 FB | 	rdlong	local03, fp
0e848     2C A0 85 F1 | 	sub	fp, #44
0e84c     26 49 0A F6 | 	mov	local01, local03 wz
0e850     18 00 90 5D |  if_ne	jmp	#LR__0955
0e854     1C A0 05 F1 | 	add	fp, #28
0e858     D0 4E 02 FB | 	rdlong	local04, fp
0e85c     1C A0 85 F1 | 	sub	fp, #28
0e860     27 51 02 F6 | 	mov	local05, local04
0e864     0A 50 0E F2 | 	cmp	local05, #10 wz
0e868     04 00 90 AD |  if_e	jmp	#LR__0956
0e86c                 | LR__0955
0e86c     01 4A 66 F5 | 	xor	local02, #1
0e870                 | LR__0956
0e870     3C A0 05 F1 | 	add	fp, #60
0e874     D0 4A 62 FC | 	wrlong	local02, fp
0e878     D0 4A 0A FB | 	rdlong	local02, fp wz
0e87c     3C A0 85 F1 | 	sub	fp, #60
0e880     24 01 90 AD |  if_e	jmp	#LR__0959
0e884     44 A0 05 F1 | 	add	fp, #68
0e888     D0 4C 02 FB | 	rdlong	local03, fp
0e88c     44 A0 85 F1 | 	sub	fp, #68
0e890     02 4C 0E F2 | 	cmp	local03, #2 wz
0e894     10 01 90 5D |  if_ne	jmp	#LR__0959
0e898     0C A1 05 F1 | 	add	fp, #268
0e89c     D0 52 02 FB | 	rdlong	local06, fp
0e8a0     0C A1 85 F1 | 	sub	fp, #268
0e8a4     29 4F 02 F6 | 	mov	local04, local06
0e8a8     02 4E 0E F2 | 	cmp	local04, #2 wz
0e8ac     F8 00 90 AD |  if_e	jmp	#LR__0959
0e8b0     C0 A0 05 F1 | 	add	fp, #192
0e8b4     D0 3E 02 FB | 	rdlong	arg01, fp
0e8b8     94 A0 85 F1 | 	sub	fp, #148
0e8bc     D0 40 02 FB | 	rdlong	arg02, fp
0e8c0     14 A0 05 F1 | 	add	fp, #20
0e8c4     D0 52 02 FB | 	rdlong	local06, fp
0e8c8     40 A0 85 F1 | 	sub	fp, #64
0e8cc     29 4F 02 F6 | 	mov	local04, local06
0e8d0     27 43 02 F6 | 	mov	arg03, local04
0e8d4     00 23 B0 FD | 	call	#__system__emitsign_0796
0e8d8     0B 55 02 F6 | 	mov	local07, result1
0e8dc     14 A1 05 F1 | 	add	fp, #276
0e8e0     D0 54 62 FC | 	wrlong	local07, fp
0e8e4     2A 4B 02 F6 | 	mov	local02, local07
0e8e8     14 A1 85 F1 | 	sub	fp, #276
0e8ec     00 4A 5E F2 | 	cmps	local02, #0 wcz
0e8f0     10 00 90 3D |  if_ae	jmp	#LR__0957
0e8f4     14 A1 05 F1 | 	add	fp, #276
0e8f8     D0 16 02 FB | 	rdlong	result1, fp
0e8fc     14 A1 85 F1 | 	sub	fp, #276
0e900     40 0C 90 FD | 	jmp	#LR__1015
0e904                 | LR__0957
0e904     C0 A0 05 F1 | 	add	fp, #192
0e908     D0 4A 02 FB | 	rdlong	local02, fp
0e90c     54 A0 05 F1 | 	add	fp, #84
0e910     D0 50 02 FB | 	rdlong	local05, fp
0e914     28 4D 02 F6 | 	mov	local03, local05
0e918     28 4B 02 F1 | 	add	local02, local05
0e91c     54 A0 85 F1 | 	sub	fp, #84
0e920     D0 4A 62 FC | 	wrlong	local02, fp
0e924     58 A0 85 F1 | 	sub	fp, #88
0e928     D0 48 0A FB | 	rdlong	local01, fp wz
0e92c     68 A0 85 F1 | 	sub	fp, #104
0e930     64 00 90 AD |  if_e	jmp	#LR__0958
0e934     68 A0 05 F1 | 	add	fp, #104
0e938     D0 4A 02 FB | 	rdlong	local02, fp
0e93c     AC A0 05 F1 | 	add	fp, #172
0e940     D0 4C 02 FB | 	rdlong	local03, fp
0e944     26 4B 82 F1 | 	sub	local02, local03
0e948     AC A0 85 F1 | 	sub	fp, #172
0e94c     D0 4A 62 FC | 	wrlong	local02, fp
0e950     68 A0 85 F1 | 	sub	fp, #104
0e954     00 4A 5E F2 | 	cmps	local02, #0 wcz
0e958     68 A0 05 C1 |  if_b	add	fp, #104
0e95c     D0 00 68 CC |  if_b	wrlong	#0, fp
0e960     68 A0 85 C1 |  if_b	sub	fp, #104
0e964     08 A0 05 F1 | 	add	fp, #8
0e968     D0 48 02 FB | 	rdlong	local01, fp
0e96c     E8 48 06 F4 | 	bitl	local01, #232
0e970     D0 48 62 FC | 	wrlong	local01, fp
0e974     24 4B 02 F6 | 	mov	local02, local01
0e978     60 A0 05 F1 | 	add	fp, #96
0e97c     D0 50 02 FB | 	rdlong	local05, fp
0e980     28 4D 02 F6 | 	mov	local03, local05
0e984     08 4C 66 F0 | 	shl	local03, #8
0e988     26 4B 42 F5 | 	or	local02, local03
0e98c     60 A0 85 F1 | 	sub	fp, #96
0e990     D0 4A 62 FC | 	wrlong	local02, fp
0e994     08 A0 85 F1 | 	sub	fp, #8
0e998                 | LR__0958
0e998     00 4A 06 F6 | 	mov	local02, #0
0e99c     3C A0 05 F1 | 	add	fp, #60
0e9a0     D0 00 68 FC | 	wrlong	#0, fp
0e9a4     3C A0 85 F1 | 	sub	fp, #60
0e9a8                 | LR__0959
0e9a8     0C A0 05 F1 | 	add	fp, #12
0e9ac     D0 3E 02 FB | 	rdlong	arg01, fp
0e9b0     0C A0 85 F1 | 	sub	fp, #12
0e9b4     34 12 B0 FD | 	call	#__system____builtin_ilogb
0e9b8     FF FF 3F FF 
0e9bc     FF 17 0E F2 | 	cmp	result1, ##2147483647 wz
0e9c0     50 00 90 5D |  if_ne	jmp	#LR__0961
0e9c4     2C A0 05 F1 | 	add	fp, #44
0e9c8     D0 4A 0A FB | 	rdlong	local02, fp wz
0e9cc     2C A0 85 F1 | 	sub	fp, #44
0e9d0     24 00 90 AD |  if_e	jmp	#LR__0960
0e9d4     C0 A0 05 F1 | 	add	fp, #192
0e9d8     D0 4A 02 FB | 	rdlong	local02, fp
0e9dc     25 4D 02 F6 | 	mov	local03, local02
0e9e0     01 4C 06 F1 | 	add	local03, #1
0e9e4     D0 4C 62 FC | 	wrlong	local03, fp
0e9e8     94 A0 85 F1 | 	sub	fp, #148
0e9ec     D0 4E 02 FB | 	rdlong	local04, fp
0e9f0     2C A0 85 F1 | 	sub	fp, #44
0e9f4     25 4F 42 FC | 	wrbyte	local04, local02
0e9f8                 | LR__0960
0e9f8     C0 A0 05 F1 | 	add	fp, #192
0e9fc     D0 3E 02 FB | 	rdlong	arg01, fp
0ea00     C0 A0 85 F1 | 	sub	fp, #192
0ea04     87 00 00 FF 
0ea08     4A 41 06 F6 | 	mov	arg02, ##@LR__1177
0ea0c     F8 F1 BF FD | 	call	#__system____builtin_strcpy
0ea10     40 09 90 FD | 	jmp	#LR__1003
0ea14                 | LR__0961
0ea14     0C A0 05 F1 | 	add	fp, #12
0ea18     D0 3E 02 FB | 	rdlong	arg01, fp
0ea1c     0C A0 85 F1 | 	sub	fp, #12
0ea20     C8 11 B0 FD | 	call	#__system____builtin_ilogb
0ea24     00 00 40 FF 
0ea28     00 16 0E F2 | 	cmp	result1, ##-2147483648 wz
0ea2c     50 00 90 5D |  if_ne	jmp	#LR__0963
0ea30     2C A0 05 F1 | 	add	fp, #44
0ea34     D0 4A 0A FB | 	rdlong	local02, fp wz
0ea38     2C A0 85 F1 | 	sub	fp, #44
0ea3c     24 00 90 AD |  if_e	jmp	#LR__0962
0ea40     C0 A0 05 F1 | 	add	fp, #192
0ea44     D0 4A 02 FB | 	rdlong	local02, fp
0ea48     25 4D 02 F6 | 	mov	local03, local02
0ea4c     01 4C 06 F1 | 	add	local03, #1
0ea50     D0 4C 62 FC | 	wrlong	local03, fp
0ea54     94 A0 85 F1 | 	sub	fp, #148
0ea58     D0 4E 02 FB | 	rdlong	local04, fp
0ea5c     2C A0 85 F1 | 	sub	fp, #44
0ea60     25 4F 42 FC | 	wrbyte	local04, local02
0ea64                 | LR__0962
0ea64     C0 A0 05 F1 | 	add	fp, #192
0ea68     D0 3E 02 FB | 	rdlong	arg01, fp
0ea6c     C0 A0 85 F1 | 	sub	fp, #192
0ea70     87 00 00 FF 
0ea74     4E 41 06 F6 | 	mov	arg02, ##@LR__1178
0ea78     8C F1 BF FD | 	call	#__system____builtin_strcpy
0ea7c     D4 08 90 FD | 	jmp	#LR__1003
0ea80                 | LR__0963
0ea80     10 A0 05 F1 | 	add	fp, #16
0ea84     D0 48 02 FB | 	rdlong	local01, fp
0ea88     10 A0 85 F1 | 	sub	fp, #16
0ea8c     67 48 0E F2 | 	cmp	local01, #103 wz
0ea90     18 00 90 AD |  if_e	jmp	#LR__0964
0ea94     10 A0 05 F1 | 	add	fp, #16
0ea98     D0 50 02 FB | 	rdlong	local05, fp
0ea9c     10 A0 85 F1 | 	sub	fp, #16
0eaa0     28 4D 02 F6 | 	mov	local03, local05
0eaa4     23 4C 0E F2 | 	cmp	local03, #35 wz
0eaa8     AC 01 90 5D |  if_ne	jmp	#LR__0970
0eaac                 | LR__0964
0eaac     0C A0 05 F1 | 	add	fp, #12
0eab0     D0 3E 02 FB | 	rdlong	arg01, fp
0eab4     08 A0 05 F1 | 	add	fp, #8
0eab8     D0 40 02 F6 | 	mov	arg02, fp
0eabc     0C A0 05 F1 | 	add	fp, #12
0eac0     D0 4E 02 F6 | 	mov	local04, fp
0eac4     27 43 02 F6 | 	mov	arg03, local04
0eac8     98 A0 05 F1 | 	add	fp, #152
0eacc     D0 44 02 FB | 	rdlong	arg04, fp
0ead0     9C A0 85 F1 | 	sub	fp, #156
0ead4     D0 46 02 FB | 	rdlong	arg05, fp
0ead8     1C A0 85 F1 | 	sub	fp, #28
0eadc     CC 1E B0 FD | 	call	#__system__disassemble_0794
0eae0     10 A0 05 F1 | 	add	fp, #16
0eae4     D0 4A 02 FB | 	rdlong	local02, fp
0eae8     10 A0 85 F1 | 	sub	fp, #16
0eaec     23 4A 0E F2 | 	cmp	local02, #35 wz
0eaf0     A4 00 90 5D |  if_ne	jmp	#LR__0967
0eaf4     20 A0 05 F1 | 	add	fp, #32
0eaf8     D0 4A 02 FB | 	rdlong	local02, fp
0eafc     98 A0 05 F1 | 	add	fp, #152
0eb00     D0 4C 02 FB | 	rdlong	local03, fp
0eb04     B8 A0 85 F1 | 	sub	fp, #184
0eb08     26 4B 5A F2 | 	cmps	local02, local03 wcz
0eb0c     10 00 90 ED |  if_be	jmp	#LR__0965
0eb10     24 A0 05 F1 | 	add	fp, #36
0eb14     D0 02 68 FC | 	wrlong	#1, fp
0eb18     24 A0 85 F1 | 	sub	fp, #36
0eb1c     B8 01 90 FD | 	jmp	#LR__0973
0eb20                 | LR__0965
0eb20     20 A0 05 F1 | 	add	fp, #32
0eb24     D0 4A 02 FB | 	rdlong	local02, fp
0eb28     20 A0 85 F1 | 	sub	fp, #32
0eb2c     00 4A 5E F2 | 	cmps	local02, #0 wcz
0eb30     2C 00 90 3D |  if_ae	jmp	#LR__0966
0eb34     B8 A0 05 F1 | 	add	fp, #184
0eb38     D0 4A 02 FB | 	rdlong	local02, fp
0eb3c     25 4B 62 F6 | 	neg	local02, local02
0eb40     98 A0 85 F1 | 	sub	fp, #152
0eb44     D0 4C 02 FB | 	rdlong	local03, fp
0eb48     20 A0 85 F1 | 	sub	fp, #32
0eb4c     25 4D 5A F2 | 	cmps	local03, local02 wcz
0eb50     24 A0 05 E1 |  if_be	add	fp, #36
0eb54     D0 02 68 EC |  if_be	wrlong	#1, fp
0eb58     24 A0 85 E1 |  if_be	sub	fp, #36
0eb5c     78 01 90 FD | 	jmp	#LR__0973
0eb60                 | LR__0966
0eb60     20 A0 05 F1 | 	add	fp, #32
0eb64     D0 4A 02 FB | 	rdlong	local02, fp
0eb68     20 A0 85 F1 | 	sub	fp, #32
0eb6c     00 4A 5E F2 | 	cmps	local02, #0 wcz
0eb70     64 01 90 ED |  if_be	jmp	#LR__0973
0eb74     B8 A0 05 F1 | 	add	fp, #184
0eb78     D0 4A 02 FB | 	rdlong	local02, fp
0eb7c     98 A0 85 F1 | 	sub	fp, #152
0eb80     D0 4C 02 FB | 	rdlong	local03, fp
0eb84     26 4B 82 F1 | 	sub	local02, local03
0eb88     98 A0 05 F1 | 	add	fp, #152
0eb8c     D0 4A 62 FC | 	wrlong	local02, fp
0eb90     B8 A0 85 F1 | 	sub	fp, #184
0eb94     40 01 90 FD | 	jmp	#LR__0973
0eb98                 | LR__0967
0eb98     00 4A 06 F6 | 	mov	local02, #0
0eb9c     08 A0 05 F1 | 	add	fp, #8
0eba0     D0 48 02 FB | 	rdlong	local01, fp
0eba4     1C 48 46 F0 | 	shr	local01, #28
0eba8     01 48 CE F7 | 	test	local01, #1 wz
0ebac     01 4A 06 A6 |  if_e	mov	local02, #1
0ebb0     2C A0 05 F1 | 	add	fp, #44
0ebb4     D0 4A 62 FC | 	wrlong	local02, fp
0ebb8     14 A0 85 F1 | 	sub	fp, #20
0ebbc     D0 48 02 FB | 	rdlong	local01, fp
0ebc0     24 4B 02 F6 | 	mov	local02, local01
0ebc4     98 A0 05 F1 | 	add	fp, #152
0ebc8     D0 50 02 FB | 	rdlong	local05, fp
0ebcc     B8 A0 85 F1 | 	sub	fp, #184
0ebd0     28 4B 5A F2 | 	cmps	local02, local05 wcz
0ebd4     18 00 90 3D |  if_ae	jmp	#LR__0968
0ebd8     20 A0 05 F1 | 	add	fp, #32
0ebdc     D0 4E 02 FB | 	rdlong	local04, fp
0ebe0     20 A0 85 F1 | 	sub	fp, #32
0ebe4     FF FF 7F FF 
0ebe8     FC 4F 5E F2 | 	cmps	local04, ##-4 wcz
0ebec     10 00 90 3D |  if_ae	jmp	#LR__0969
0ebf0                 | LR__0968
0ebf0     24 A0 05 F1 | 	add	fp, #36
0ebf4     D0 02 68 FC | 	wrlong	#1, fp
0ebf8     24 A0 85 F1 | 	sub	fp, #36
0ebfc     D8 00 90 FD | 	jmp	#LR__0973
0ec00                 | LR__0969
0ec00     B8 A0 05 F1 | 	add	fp, #184
0ec04     D0 4A 02 FB | 	rdlong	local02, fp
0ec08     98 A0 85 F1 | 	sub	fp, #152
0ec0c     D0 4C 02 FB | 	rdlong	local03, fp
0ec10     26 4B 82 F1 | 	sub	local02, local03
0ec14     98 A0 05 F1 | 	add	fp, #152
0ec18     D0 4A 62 FC | 	wrlong	local02, fp
0ec1c     AC A0 85 F1 | 	sub	fp, #172
0ec20     D0 3E 02 FB | 	rdlong	arg01, fp
0ec24     08 A0 05 F1 | 	add	fp, #8
0ec28     D0 40 02 F6 | 	mov	arg02, fp
0ec2c     0C A0 05 F1 | 	add	fp, #12
0ec30     D0 42 02 F6 | 	mov	arg03, fp
0ec34     98 A0 05 F1 | 	add	fp, #152
0ec38     D0 54 02 FB | 	rdlong	local07, fp
0ec3c     2A 45 62 F6 | 	neg	arg04, local07
0ec40     9C A0 85 F1 | 	sub	fp, #156
0ec44     D0 56 02 FB | 	rdlong	local08, fp
0ec48     1C A0 85 F1 | 	sub	fp, #28
0ec4c     2B 47 02 F6 | 	mov	arg05, local08
0ec50     58 1D B0 FD | 	call	#__system__disassemble_0794
0ec54     80 00 90 FD | 	jmp	#LR__0973
0ec58                 | LR__0970
0ec58     24 A0 05 F1 | 	add	fp, #36
0ec5c     D0 4A 0A FB | 	rdlong	local02, fp wz
0ec60     24 A0 85 F1 | 	sub	fp, #36
0ec64     34 00 90 AD |  if_e	jmp	#LR__0971
0ec68     0C A0 05 F1 | 	add	fp, #12
0ec6c     D0 3E 02 FB | 	rdlong	arg01, fp
0ec70     08 A0 05 F1 | 	add	fp, #8
0ec74     D0 40 02 F6 | 	mov	arg02, fp
0ec78     0C A0 05 F1 | 	add	fp, #12
0ec7c     D0 42 02 F6 | 	mov	arg03, fp
0ec80     98 A0 05 F1 | 	add	fp, #152
0ec84     D0 44 02 FB | 	rdlong	arg04, fp
0ec88     9C A0 85 F1 | 	sub	fp, #156
0ec8c     D0 46 02 FB | 	rdlong	arg05, fp
0ec90     1C A0 85 F1 | 	sub	fp, #28
0ec94     14 1D B0 FD | 	call	#__system__disassemble_0794
0ec98     3C 00 90 FD | 	jmp	#LR__0972
0ec9c                 | LR__0971
0ec9c     0C A0 05 F1 | 	add	fp, #12
0eca0     D0 3E 02 FB | 	rdlong	arg01, fp
0eca4     08 A0 05 F1 | 	add	fp, #8
0eca8     D0 40 02 F6 | 	mov	arg02, fp
0ecac     0C A0 05 F1 | 	add	fp, #12
0ecb0     D0 42 02 F6 | 	mov	arg03, fp
0ecb4     98 A0 05 F1 | 	add	fp, #152
0ecb8     D0 54 02 FB | 	rdlong	local07, fp
0ecbc     01 54 06 F1 | 	add	local07, #1
0ecc0     2A 45 62 F6 | 	neg	arg04, local07
0ecc4     9C A0 85 F1 | 	sub	fp, #156
0ecc8     D0 56 02 FB | 	rdlong	local08, fp
0eccc     1C A0 85 F1 | 	sub	fp, #28
0ecd0     2B 47 02 F6 | 	mov	arg05, local08
0ecd4     D4 1C B0 FD | 	call	#__system__disassemble_0794
0ecd8                 | LR__0972
0ecd8                 | LR__0973
0ecd8     1C A0 05 F1 | 	add	fp, #28
0ecdc     D0 4A 02 FB | 	rdlong	local02, fp
0ece0     1C A0 85 F1 | 	sub	fp, #28
0ece4     02 4A 0E F2 | 	cmp	local02, #2 wz
0ece8     4C 00 90 5D |  if_ne	jmp	#LR__0976
0ecec     1C A0 05 F1 | 	add	fp, #28
0ecf0     D0 20 68 FC | 	wrlong	#16, fp
0ecf4     1C A0 85 F1 | 	sub	fp, #28
0ecf8                 | LR__0974
0ecf8     14 A0 05 F1 | 	add	fp, #20
0ecfc     D0 4A 0A FB | 	rdlong	local02, fp wz
0ed00     14 A0 85 F1 | 	sub	fp, #20
0ed04     30 00 90 AD |  if_e	jmp	#LR__0975
0ed08     14 A0 05 F1 | 	add	fp, #20
0ed0c     D0 4C 02 FB | 	rdlong	local03, fp
0ed10     14 A0 85 F1 | 	sub	fp, #20
0ed14     00 80 00 FF 
0ed18     00 4C 1E F2 | 	cmp	local03, ##16777216 wcz
0ed1c     18 00 90 3D |  if_ae	jmp	#LR__0975
0ed20     14 A0 05 F1 | 	add	fp, #20
0ed24     D0 4A 02 FB | 	rdlong	local02, fp
0ed28     01 4A 66 F0 | 	shl	local02, #1
0ed2c     D0 4A 62 FC | 	wrlong	local02, fp
0ed30     14 A0 85 F1 | 	sub	fp, #20
0ed34     C0 FF 9F FD | 	jmp	#LR__0974
0ed38                 | LR__0975
0ed38                 | LR__0976
0ed38     70 A0 05 F1 | 	add	fp, #112
0ed3c     D0 3E 02 F6 | 	mov	arg01, fp
0ed40     5C A0 85 F1 | 	sub	fp, #92
0ed44     D0 40 02 FB | 	rdlong	arg02, fp
0ed48     08 A0 05 F1 | 	add	fp, #8
0ed4c     D0 42 02 FB | 	rdlong	arg03, fp
0ed50     A0 A0 05 F1 | 	add	fp, #160
0ed54     D0 46 02 FB | 	rdlong	arg05, fp
0ed58     BC A0 85 F1 | 	sub	fp, #188
0ed5c     01 44 06 F6 | 	mov	arg04, #1
0ed60     BC 1B B0 FD | 	call	#__system___uitoa
0ed64     58 A0 05 F1 | 	add	fp, #88
0ed68     D0 16 62 FC | 	wrlong	result1, fp
0ed6c     38 A0 85 F1 | 	sub	fp, #56
0ed70     D0 4A 02 FB | 	rdlong	local02, fp
0ed74     20 A0 85 F1 | 	sub	fp, #32
0ed78     00 4A 5E F2 | 	cmps	local02, #0 wcz
0ed7c     64 00 90 3D |  if_ae	jmp	#LR__0977
0ed80     60 A0 05 F1 | 	add	fp, #96
0ed84     D0 5A 68 FC | 	wrlong	#45, fp
0ed88     50 A0 05 F1 | 	add	fp, #80
0ed8c     D0 3E 02 F6 | 	mov	arg01, fp
0ed90     90 A0 85 F1 | 	sub	fp, #144
0ed94     D0 4C 02 FB | 	rdlong	local03, fp
0ed98     26 4F 62 F6 | 	neg	local04, local03
0ed9c     0A 52 06 F6 | 	mov	local06, #10
0eda0     18 A0 05 F1 | 	add	fp, #24
0eda4     D0 58 02 FB | 	rdlong	local09, fp
0eda8     2C 55 02 F6 | 	mov	local07, local09
0edac     84 A0 05 F1 | 	add	fp, #132
0edb0     D0 5A 02 FB | 	rdlong	local10, fp
0edb4     BC A0 85 F1 | 	sub	fp, #188
0edb8     2D 5D 02 F6 | 	mov	local11, local10
0edbc     27 41 02 F6 | 	mov	arg02, local04
0edc0     0A 42 06 F6 | 	mov	arg03, #10
0edc4     2A 45 02 F6 | 	mov	arg04, local07
0edc8     2E 47 02 F6 | 	mov	arg05, local11
0edcc     50 1B B0 FD | 	call	#__system___uitoa
0edd0     0B 57 02 F6 | 	mov	local08, result1
0edd4     5C A0 05 F1 | 	add	fp, #92
0edd8     D0 56 62 FC | 	wrlong	local08, fp
0eddc     5C A0 85 F1 | 	sub	fp, #92
0ede0     54 00 90 FD | 	jmp	#LR__0978
0ede4                 | LR__0977
0ede4     60 A0 05 F1 | 	add	fp, #96
0ede8     D0 56 68 FC | 	wrlong	#43, fp
0edec     50 A0 05 F1 | 	add	fp, #80
0edf0     D0 3E 02 F6 | 	mov	arg01, fp
0edf4     90 A0 85 F1 | 	sub	fp, #144
0edf8     D0 40 02 FB | 	rdlong	arg02, fp
0edfc     18 A0 05 F1 | 	add	fp, #24
0ee00     D0 54 02 FB | 	rdlong	local07, fp
0ee04     2A 53 02 F6 | 	mov	local06, local07
0ee08     84 A0 05 F1 | 	add	fp, #132
0ee0c     D0 5C 02 FB | 	rdlong	local11, fp
0ee10     BC A0 85 F1 | 	sub	fp, #188
0ee14     2E 59 02 F6 | 	mov	local09, local11
0ee18     0A 42 06 F6 | 	mov	arg03, #10
0ee1c     29 45 02 F6 | 	mov	arg04, local06
0ee20     2C 47 02 F6 | 	mov	arg05, local09
0ee24     F8 1A B0 FD | 	call	#__system___uitoa
0ee28     0B 5B 02 F6 | 	mov	local10, result1
0ee2c     5C A0 05 F1 | 	add	fp, #92
0ee30     D0 5A 62 FC | 	wrlong	local10, fp
0ee34     5C A0 85 F1 | 	sub	fp, #92
0ee38                 | LR__0978
0ee38     24 A0 05 F1 | 	add	fp, #36
0ee3c     D0 4A 0A FB | 	rdlong	local02, fp wz
0ee40     24 A0 85 F1 | 	sub	fp, #36
0ee44     2C 00 90 AD |  if_e	jmp	#LR__0979
0ee48     50 A0 05 F1 | 	add	fp, #80
0ee4c     D0 00 68 FC | 	wrlong	#0, fp
0ee50     04 A0 85 F1 | 	sub	fp, #4
0ee54     D0 00 68 FC | 	wrlong	#0, fp
0ee58     6C A0 05 F1 | 	add	fp, #108
0ee5c     D0 4A 02 FB | 	rdlong	local02, fp
0ee60     01 4A 06 F1 | 	add	local02, #1
0ee64     64 A0 85 F1 | 	sub	fp, #100
0ee68     D0 4A 62 FC | 	wrlong	local02, fp
0ee6c     54 A0 85 F1 | 	sub	fp, #84
0ee70     88 00 90 FD | 	jmp	#LR__0982
0ee74                 | LR__0979
0ee74     20 A0 05 F1 | 	add	fp, #32
0ee78     D0 4A 02 FB | 	rdlong	local02, fp
0ee7c     20 A0 85 F1 | 	sub	fp, #32
0ee80     00 4A 5E F2 | 	cmps	local02, #0 wcz
0ee84     40 00 90 3D |  if_ae	jmp	#LR__0980
0ee88     20 A0 05 F1 | 	add	fp, #32
0ee8c     D0 48 02 FB | 	rdlong	local01, fp
0ee90     30 A0 05 F1 | 	add	fp, #48
0ee94     D0 48 62 FC | 	wrlong	local01, fp
0ee98     04 A0 85 F1 | 	sub	fp, #4
0ee9c     D0 48 62 FC | 	wrlong	local01, fp
0eea0     2C A0 85 F1 | 	sub	fp, #44
0eea4     D0 4A 02 FB | 	rdlong	local02, fp
0eea8     98 A0 05 F1 | 	add	fp, #152
0eeac     D0 4C 02 FB | 	rdlong	local03, fp
0eeb0     26 4B 02 F1 | 	add	local02, local03
0eeb4     01 4A 06 F1 | 	add	local02, #1
0eeb8     64 A0 85 F1 | 	sub	fp, #100
0eebc     D0 4A 62 FC | 	wrlong	local02, fp
0eec0     54 A0 85 F1 | 	sub	fp, #84
0eec4     34 00 90 FD | 	jmp	#LR__0981
0eec8                 | LR__0980
0eec8     4C A0 05 F1 | 	add	fp, #76
0eecc     D0 00 68 FC | 	wrlong	#0, fp
0eed0     2C A0 85 F1 | 	sub	fp, #44
0eed4     D0 4A 02 FB | 	rdlong	local02, fp
0eed8     30 A0 05 F1 | 	add	fp, #48
0eedc     D0 4A 62 FC | 	wrlong	local02, fp
0eee0     68 A0 05 F1 | 	add	fp, #104
0eee4     D0 4C 02 FB | 	rdlong	local03, fp
0eee8     26 4B 02 F1 | 	add	local02, local03
0eeec     01 4A 06 F1 | 	add	local02, #1
0eef0     64 A0 85 F1 | 	sub	fp, #100
0eef4     D0 4A 62 FC | 	wrlong	local02, fp
0eef8     54 A0 85 F1 | 	sub	fp, #84
0eefc                 | LR__0981
0eefc                 | LR__0982
0eefc     54 A0 05 F1 | 	add	fp, #84
0ef00     D0 4A 02 FB | 	rdlong	local02, fp
0ef04     08 A0 85 F1 | 	sub	fp, #8
0ef08     D0 4C 02 FB | 	rdlong	local03, fp
0ef0c     26 4B 82 F1 | 	sub	local02, local03
0ef10     01 4A 06 F1 | 	add	local02, #1
0ef14     24 A0 85 F1 | 	sub	fp, #36
0ef18     D0 4A 62 FC | 	wrlong	local02, fp
0ef1c     04 A0 05 F1 | 	add	fp, #4
0ef20     D0 4A 0A FB | 	rdlong	local02, fp wz
0ef24     2C A0 85 F1 | 	sub	fp, #44
0ef28     14 00 90 AD |  if_e	jmp	#LR__0983
0ef2c     28 A0 05 F1 | 	add	fp, #40
0ef30     D0 4C 02 FB | 	rdlong	local03, fp
0ef34     01 4C 06 F1 | 	add	local03, #1
0ef38     D0 4C 62 FC | 	wrlong	local03, fp
0ef3c     28 A0 85 F1 | 	sub	fp, #40
0ef40                 | LR__0983
0ef40     1C A0 05 F1 | 	add	fp, #28
0ef44     D0 4A 02 FB | 	rdlong	local02, fp
0ef48     1C A0 85 F1 | 	sub	fp, #28
0ef4c     10 4A 0E F2 | 	cmp	local02, #16 wz
0ef50     14 00 90 5D |  if_ne	jmp	#LR__0984
0ef54     28 A0 05 F1 | 	add	fp, #40
0ef58     D0 4A 02 FB | 	rdlong	local02, fp
0ef5c     02 4A 06 F1 | 	add	local02, #2
0ef60     D0 4A 62 FC | 	wrlong	local02, fp
0ef64     28 A0 85 F1 | 	sub	fp, #40
0ef68                 | LR__0984
0ef68     24 A0 05 F1 | 	add	fp, #36
0ef6c     D0 4A 0A FB | 	rdlong	local02, fp wz
0ef70     24 A0 85 F1 | 	sub	fp, #36
0ef74     28 00 90 AD |  if_e	jmp	#LR__0985
0ef78     28 A0 05 F1 | 	add	fp, #40
0ef7c     D0 4A 02 FB | 	rdlong	local02, fp
0ef80     02 4C 06 F6 | 	mov	local03, #2
0ef84     34 A0 05 F1 | 	add	fp, #52
0ef88     D0 50 02 FB | 	rdlong	local05, fp
0ef8c     28 4D 02 F1 | 	add	local03, local05
0ef90     26 4B 02 F1 | 	add	local02, local03
0ef94     34 A0 85 F1 | 	sub	fp, #52
0ef98     D0 4A 62 FC | 	wrlong	local02, fp
0ef9c     28 A0 85 F1 | 	sub	fp, #40
0efa0                 | LR__0985
0efa0     28 A0 05 F1 | 	add	fp, #40
0efa4     D0 4A 02 FB | 	rdlong	local02, fp
0efa8     28 A0 85 F1 | 	sub	fp, #40
0efac     40 4A 5E F2 | 	cmps	local02, #64 wcz
0efb0     01 16 66 16 |  if_a	neg	result1, #1
0efb4     8C 05 90 1D |  if_a	jmp	#LR__1015
0efb8     3C A0 05 F1 | 	add	fp, #60
0efbc     D0 4A 0A FB | 	rdlong	local02, fp wz
0efc0     3C A0 85 F1 | 	sub	fp, #60
0efc4     70 00 90 AD |  if_e	jmp	#LR__0987
0efc8     C0 A0 05 F1 | 	add	fp, #192
0efcc     D0 3E 02 FB | 	rdlong	arg01, fp
0efd0     94 A0 85 F1 | 	sub	fp, #148
0efd4     D0 40 02 FB | 	rdlong	arg02, fp
0efd8     14 A0 05 F1 | 	add	fp, #20
0efdc     D0 52 02 FB | 	rdlong	local06, fp
0efe0     40 A0 85 F1 | 	sub	fp, #64
0efe4     29 43 02 F6 | 	mov	arg03, local06
0efe8     EC 1B B0 FD | 	call	#__system__emitsign_0796
0efec     0B 55 02 F6 | 	mov	local07, result1
0eff0     18 A1 05 F1 | 	add	fp, #280
0eff4     D0 54 62 FC | 	wrlong	local07, fp
0eff8     2A 4B 02 F6 | 	mov	local02, local07
0effc     18 A1 85 F1 | 	sub	fp, #280
0f000     00 4A 5E F2 | 	cmps	local02, #0 wcz
0f004     10 00 90 3D |  if_ae	jmp	#LR__0986
0f008     18 A1 05 F1 | 	add	fp, #280
0f00c     D0 16 02 FB | 	rdlong	result1, fp
0f010     18 A1 85 F1 | 	sub	fp, #280
0f014     2C 05 90 FD | 	jmp	#LR__1015
0f018                 | LR__0986
0f018     C0 A0 05 F1 | 	add	fp, #192
0f01c     D0 4A 02 FB | 	rdlong	local02, fp
0f020     58 A0 05 F1 | 	add	fp, #88
0f024     D0 4C 02 FB | 	rdlong	local03, fp
0f028     26 4B 02 F1 | 	add	local02, local03
0f02c     58 A0 85 F1 | 	sub	fp, #88
0f030     D0 4A 62 FC | 	wrlong	local02, fp
0f034     C0 A0 85 F1 | 	sub	fp, #192
0f038                 | LR__0987
0f038     4C A0 05 F1 | 	add	fp, #76
0f03c     D0 4A 02 FB | 	rdlong	local02, fp
0f040     34 A0 85 F1 | 	sub	fp, #52
0f044     D0 4A 62 FC | 	wrlong	local02, fp
0f048     18 A0 85 F1 | 	sub	fp, #24
0f04c     04 11 9F FE | 	loc	pa,	#(@LR__0993-@LR__0988)
0f050     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f054                 | LR__0988
0f054     18 A0 05 F1 | 	add	fp, #24
0f058     D0 4C 02 FB | 	rdlong	local03, fp
0f05c     26 49 02 F6 | 	mov	local01, local03
0f060     3C A0 05 F1 | 	add	fp, #60
0f064     D0 4E 02 FB | 	rdlong	local04, fp
0f068     54 A0 85 F1 | 	sub	fp, #84
0f06c     27 51 02 F6 | 	mov	local05, local04
0f070     28 49 5A F2 | 	cmps	local01, local05 wcz
0f074     30 01 90 3D |  if_ae	jmp	#LR__0994
0f078     18 A0 05 F1 | 	add	fp, #24
0f07c     D0 52 02 FB | 	rdlong	local06, fp
0f080     18 A0 85 F1 | 	sub	fp, #24
0f084     00 52 5E F2 | 	cmps	local06, #0 wcz
0f088     58 00 90 CD |  if_b	jmp	#LR__0989
0f08c     18 A0 05 F1 | 	add	fp, #24
0f090     D0 58 02 FB | 	rdlong	local09, fp
0f094     40 A0 05 F1 | 	add	fp, #64
0f098     D0 56 02 FB | 	rdlong	local08, fp
0f09c     58 A0 85 F1 | 	sub	fp, #88
0f0a0     2B 59 5A F2 | 	cmps	local09, local08 wcz
0f0a4     3C 00 90 3D |  if_ae	jmp	#LR__0989
0f0a8     C0 A0 05 F1 | 	add	fp, #192
0f0ac     D0 52 02 FB | 	rdlong	local06, fp
0f0b0     29 59 02 F6 | 	mov	local09, local06
0f0b4     01 58 06 F1 | 	add	local09, #1
0f0b8     D0 58 62 FC | 	wrlong	local09, fp
0f0bc     A8 A0 85 F1 | 	sub	fp, #168
0f0c0     D0 56 02 FB | 	rdlong	local08, fp
0f0c4     2B 5B 02 F6 | 	mov	local10, local08
0f0c8     58 A0 05 F1 | 	add	fp, #88
0f0cc     D0 5E 02 F6 | 	mov	local12, fp
0f0d0     D0 5A 02 F1 | 	add	local10, fp
0f0d4     2D 61 C2 FA | 	rdbyte	local13, local10
0f0d8     29 61 42 FC | 	wrbyte	local13, local06
0f0dc     70 A0 85 F1 | 	sub	fp, #112
0f0e0     20 00 90 FD | 	jmp	#LR__0990
0f0e4                 | LR__0989
0f0e4     C0 A0 05 F1 | 	add	fp, #192
0f0e8     D0 52 02 FB | 	rdlong	local06, fp
0f0ec     29 59 02 F6 | 	mov	local09, local06
0f0f0     01 58 06 F1 | 	add	local09, #1
0f0f4     D0 58 62 FC | 	wrlong	local09, fp
0f0f8     C0 A0 85 F1 | 	sub	fp, #192
0f0fc     30 5A 06 F6 | 	mov	local10, #48
0f100     29 61 48 FC | 	wrbyte	#48, local06
0f104                 | LR__0990
0f104     18 A0 05 F1 | 	add	fp, #24
0f108     D0 52 02 FB | 	rdlong	local06, fp
0f10c     38 A0 05 F1 | 	add	fp, #56
0f110     D0 58 02 FB | 	rdlong	local09, fp
0f114     50 A0 85 F1 | 	sub	fp, #80
0f118     2C 53 0A F2 | 	cmp	local06, local09 wz
0f11c     64 00 90 5D |  if_ne	jmp	#LR__0992
0f120     10 A1 05 F1 | 	add	fp, #272
0f124     D0 56 02 FB | 	rdlong	local08, fp
0f128     10 A1 85 F1 | 	sub	fp, #272
0f12c     2B 5B 0A F6 | 	mov	local10, local08 wz
0f130     28 00 90 5D |  if_ne	jmp	#LR__0991
0f134     54 A0 05 F1 | 	add	fp, #84
0f138     D0 60 02 FB | 	rdlong	local13, fp
0f13c     30 5F 02 F6 | 	mov	local12, local13
0f140     01 5E 86 F1 | 	sub	local12, #1
0f144     3C A0 85 F1 | 	sub	fp, #60
0f148     D0 62 02 FB | 	rdlong	local14, fp
0f14c     18 A0 85 F1 | 	sub	fp, #24
0f150     31 65 02 F6 | 	mov	local15, local14
0f154     2F 65 5A F2 | 	cmps	local15, local12 wcz
0f158     28 00 90 3D |  if_ae	jmp	#LR__0992
0f15c                 | LR__0991
0f15c     C0 A0 05 F1 | 	add	fp, #192
0f160     D0 54 02 FB | 	rdlong	local07, fp
0f164     2A 53 02 F6 | 	mov	local06, local07
0f168     2A 5D 02 F6 | 	mov	local11, local07
0f16c     2E 59 02 F6 | 	mov	local09, local11
0f170     01 58 06 F1 | 	add	local09, #1
0f174     D0 58 62 FC | 	wrlong	local09, fp
0f178     C0 A0 85 F1 | 	sub	fp, #192
0f17c     2E 5A 06 F6 | 	mov	local10, #46
0f180     29 5D 48 FC | 	wrbyte	#46, local06
0f184                 | LR__0992
0f184     18 A0 05 F1 | 	add	fp, #24
0f188     D0 54 02 FB | 	rdlong	local07, fp
0f18c     2A 53 02 F6 | 	mov	local06, local07
0f190     2A 5D 02 F6 | 	mov	local11, local07
0f194     2E 59 02 F6 | 	mov	local09, local11
0f198     01 58 06 F1 | 	add	local09, #1
0f19c     D0 58 62 FC | 	wrlong	local09, fp
0f1a0     18 A0 85 F1 | 	sub	fp, #24
0f1a4     AC FE 9F FD | 	jmp	#LR__0988
0f1a8                 | LR__0993
0f1a8                 | LR__0994
0f1a8     34 A0 05 F1 | 	add	fp, #52
0f1ac     D0 4A 0A FB | 	rdlong	local02, fp wz
0f1b0     34 A0 85 F1 | 	sub	fp, #52
0f1b4     B0 00 90 AD |  if_e	jmp	#LR__0999
0f1b8     C0 A0 05 F1 | 	add	fp, #192
0f1bc     D0 4A 02 FB | 	rdlong	local02, fp
0f1c0     01 4A 86 F1 | 	sub	local02, #1
0f1c4     D0 4A 62 FC | 	wrlong	local02, fp
0f1c8     C0 A0 85 F1 | 	sub	fp, #192
0f1cc     80 0E 9F FE | 	loc	pa,	#(@LR__0996-@LR__0995)
0f1d0     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f1d4                 | LR__0995
0f1d4     C0 A0 05 F1 | 	add	fp, #192
0f1d8     D0 4A 02 FB | 	rdlong	local02, fp
0f1dc     04 A0 05 F1 | 	add	fp, #4
0f1e0     D0 4C 02 FB | 	rdlong	local03, fp
0f1e4     C4 A0 85 F1 | 	sub	fp, #196
0f1e8     26 4B 5A F2 | 	cmps	local02, local03 wcz
0f1ec     34 00 90 ED |  if_be	jmp	#LR__0997
0f1f0     C0 A0 05 F1 | 	add	fp, #192
0f1f4     D0 54 02 FB | 	rdlong	local07, fp
0f1f8     C0 A0 85 F1 | 	sub	fp, #192
0f1fc     2A 53 02 F6 | 	mov	local06, local07
0f200     29 4F C2 FA | 	rdbyte	local04, local06
0f204     30 4E 0E F2 | 	cmp	local04, #48 wz
0f208     18 00 90 5D |  if_ne	jmp	#LR__0997
0f20c     C0 A0 05 F1 | 	add	fp, #192
0f210     D0 4A 02 FB | 	rdlong	local02, fp
0f214     01 4A 86 F1 | 	sub	local02, #1
0f218     D0 4A 62 FC | 	wrlong	local02, fp
0f21c     C0 A0 85 F1 | 	sub	fp, #192
0f220     B0 FF 9F FD | 	jmp	#LR__0995
0f224                 | LR__0996
0f224                 | LR__0997
0f224     C0 A0 05 F1 | 	add	fp, #192
0f228     D0 48 02 FB | 	rdlong	local01, fp
0f22c     C0 A0 85 F1 | 	sub	fp, #192
0f230     24 4B C2 FA | 	rdbyte	local02, local01
0f234     2E 4A 0E F2 | 	cmp	local02, #46 wz
0f238     14 00 90 5D |  if_ne	jmp	#LR__0998
0f23c     C0 A0 05 F1 | 	add	fp, #192
0f240     D0 4A 02 FB | 	rdlong	local02, fp
0f244     01 4A 86 F1 | 	sub	local02, #1
0f248     D0 4A 62 FC | 	wrlong	local02, fp
0f24c     C0 A0 85 F1 | 	sub	fp, #192
0f250                 | LR__0998
0f250     C0 A0 05 F1 | 	add	fp, #192
0f254     D0 50 02 FB | 	rdlong	local05, fp
0f258     28 4D 02 F6 | 	mov	local03, local05
0f25c     01 4C 06 F1 | 	add	local03, #1
0f260     D0 4C 62 FC | 	wrlong	local03, fp
0f264     C0 A0 85 F1 | 	sub	fp, #192
0f268                 | LR__0999
0f268     24 A0 05 F1 | 	add	fp, #36
0f26c     D0 4A 0A FB | 	rdlong	local02, fp wz
0f270     24 A0 85 F1 | 	sub	fp, #36
0f274     C4 00 90 AD |  if_e	jmp	#LR__1002
0f278     C0 A0 05 F1 | 	add	fp, #192
0f27c     D0 4A 02 FB | 	rdlong	local02, fp
0f280     25 4D 02 F6 | 	mov	local03, local02
0f284     01 4C 06 F1 | 	add	local03, #1
0f288     D0 4C 62 FC | 	wrlong	local03, fp
0f28c     90 A0 85 F1 | 	sub	fp, #144
0f290     D0 4E 02 FB | 	rdlong	local04, fp
0f294     25 4F 42 FC | 	wrbyte	local04, local02
0f298     90 A0 05 F1 | 	add	fp, #144
0f29c     D0 4A 02 FB | 	rdlong	local02, fp
0f2a0     25 4D 02 F6 | 	mov	local03, local02
0f2a4     01 4C 06 F1 | 	add	local03, #1
0f2a8     D0 4C 62 FC | 	wrlong	local03, fp
0f2ac     60 A0 85 F1 | 	sub	fp, #96
0f2b0     D0 4E 02 FB | 	rdlong	local04, fp
0f2b4     25 4F 42 FC | 	wrbyte	local04, local02
0f2b8     48 A0 85 F1 | 	sub	fp, #72
0f2bc     D0 00 68 FC | 	wrlong	#0, fp
0f2c0     18 A0 85 F1 | 	sub	fp, #24
0f2c4                 | LR__1000
0f2c4     18 A0 05 F1 | 	add	fp, #24
0f2c8     D0 48 02 FB | 	rdlong	local01, fp
0f2cc     44 A0 05 F1 | 	add	fp, #68
0f2d0     D0 4E 02 FB | 	rdlong	local04, fp
0f2d4     5C A0 85 F1 | 	sub	fp, #92
0f2d8     27 51 02 F6 | 	mov	local05, local04
0f2dc     28 49 5A F2 | 	cmps	local01, local05 wcz
0f2e0     58 00 90 3D |  if_ae	jmp	#LR__1001
0f2e4     C0 A0 05 F1 | 	add	fp, #192
0f2e8     D0 52 02 FB | 	rdlong	local06, fp
0f2ec     29 59 02 F6 | 	mov	local09, local06
0f2f0     01 58 06 F1 | 	add	local09, #1
0f2f4     D0 58 62 FC | 	wrlong	local09, fp
0f2f8     A8 A0 85 F1 | 	sub	fp, #168
0f2fc     D0 56 02 FB | 	rdlong	local08, fp
0f300     2B 5B 02 F6 | 	mov	local10, local08
0f304     98 A0 05 F1 | 	add	fp, #152
0f308     D0 5E 02 F6 | 	mov	local12, fp
0f30c     D0 5A 02 F1 | 	add	local10, fp
0f310     2D 61 C2 FA | 	rdbyte	local13, local10
0f314     29 61 42 FC | 	wrbyte	local13, local06
0f318     98 A0 85 F1 | 	sub	fp, #152
0f31c     D0 54 02 FB | 	rdlong	local07, fp
0f320     2A 53 02 F6 | 	mov	local06, local07
0f324     2A 5D 02 F6 | 	mov	local11, local07
0f328     2E 59 02 F6 | 	mov	local09, local11
0f32c     01 58 06 F1 | 	add	local09, #1
0f330     D0 58 62 FC | 	wrlong	local09, fp
0f334     18 A0 85 F1 | 	sub	fp, #24
0f338     88 FF 9F FD | 	jmp	#LR__1000
0f33c                 | LR__1001
0f33c                 | LR__1002
0f33c     C0 A0 05 F1 | 	add	fp, #192
0f340     D0 48 02 FB | 	rdlong	local01, fp
0f344     C0 A0 85 F1 | 	sub	fp, #192
0f348     24 4B 02 F6 | 	mov	local02, local01
0f34c     00 4C 06 F6 | 	mov	local03, #0
0f350     25 01 48 FC | 	wrbyte	#0, local02
0f354                 | LR__1003
0f354     6C A0 05 F1 | 	add	fp, #108
0f358     D0 4A 0A FB | 	rdlong	local02, fp wz
0f35c     6C A0 85 F1 | 	sub	fp, #108
0f360     C0 01 90 AD |  if_e	jmp	#LR__1014
0f364     48 A0 05 F1 | 	add	fp, #72
0f368     D0 4C 0A FB | 	rdlong	local03, fp wz
0f36c     48 A0 85 F1 | 	sub	fp, #72
0f370     B0 01 90 AD |  if_e	jmp	#LR__1014
0f374     C4 A0 05 F1 | 	add	fp, #196
0f378     D0 52 02 FB | 	rdlong	local06, fp
0f37c     C4 A0 85 F1 | 	sub	fp, #196
0f380     29 3F 02 F6 | 	mov	arg01, local06
0f384     00 66 06 F6 | 	mov	local16, #0
0f388     84 0C 9F FE | 	loc	pa,	#(@LR__1005-@LR__1004)
0f38c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f390                 | LR__1004
0f390     1F 69 CA FA | 	rdbyte	local17, arg01 wz
0f394     01 66 06 51 |  if_ne	add	local16, #1
0f398     01 3E 06 51 |  if_ne	add	arg01, #1
0f39c     F0 FF 9F 5D |  if_ne	jmp	#LR__1004
0f3a0                 | LR__1005
0f3a0     33 17 02 F6 | 	mov	result1, local16
0f3a4     0B 55 02 F6 | 	mov	local07, result1
0f3a8     6C A0 05 F1 | 	add	fp, #108
0f3ac     D0 5C 02 FB | 	rdlong	local11, fp
0f3b0     6C A0 85 F1 | 	sub	fp, #108
0f3b4     2E 59 02 F6 | 	mov	local09, local11
0f3b8     2C 55 5A F2 | 	cmps	local07, local09 wcz
0f3bc     64 01 90 ED |  if_be	jmp	#LR__1014
0f3c0     C4 A0 05 F1 | 	add	fp, #196
0f3c4     D0 4A 02 FB | 	rdlong	local02, fp
0f3c8     5C A0 05 F1 | 	add	fp, #92
0f3cc     D0 4A 62 FC | 	wrlong	local02, fp
0f3d0     FC A0 85 F1 | 	sub	fp, #252
0f3d4     D0 4A 0A FB | 	rdlong	local02, fp wz
0f3d8     24 A0 85 F1 | 	sub	fp, #36
0f3dc     20 00 90 AD |  if_e	jmp	#LR__1006
0f3e0     B8 A0 05 F1 | 	add	fp, #184
0f3e4     D0 00 68 FC | 	wrlong	#0, fp
0f3e8     4C A0 85 F1 | 	sub	fp, #76
0f3ec     D0 4A 02 FB | 	rdlong	local02, fp
0f3f0     B0 A0 05 F1 | 	add	fp, #176
0f3f4     D0 4A 62 FC | 	wrlong	local02, fp
0f3f8     1C A1 85 F1 | 	sub	fp, #284
0f3fc     24 00 90 FD | 	jmp	#LR__1007
0f400                 | LR__1006
0f400     6C A0 05 F1 | 	add	fp, #108
0f404     D0 4A 02 FB | 	rdlong	local02, fp
0f408     01 4A 86 F1 | 	sub	local02, #1
0f40c     4C A0 05 F1 | 	add	fp, #76
0f410     D0 4C 02 FB | 	rdlong	local03, fp
0f414     26 4B 82 F1 | 	sub	local02, local03
0f418     64 A0 05 F1 | 	add	fp, #100
0f41c     D0 4A 62 FC | 	wrlong	local02, fp
0f420     1C A1 85 F1 | 	sub	fp, #284
0f424                 | LR__1007
0f424     18 0C 9F FE | 	loc	pa,	#(@LR__1009-@LR__1008)
0f428     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f42c                 | LR__1008
0f42c     1C A1 05 F1 | 	add	fp, #284
0f430     D0 4A 0A FB | 	rdlong	local02, fp wz
0f434     1C A1 85 F1 | 	sub	fp, #284
0f438     30 00 90 AD |  if_e	jmp	#LR__1010
0f43c     20 A1 05 F1 | 	add	fp, #288
0f440     D0 4A 02 FB | 	rdlong	local02, fp
0f444     25 4D 02 F6 | 	mov	local03, local02
0f448     01 4C 06 F1 | 	add	local03, #1
0f44c     D0 4C 62 FC | 	wrlong	local03, fp
0f450     25 55 48 FC | 	wrbyte	#42, local02
0f454     04 A0 85 F1 | 	sub	fp, #4
0f458     D0 4A 02 FB | 	rdlong	local02, fp
0f45c     01 4A 86 F1 | 	sub	local02, #1
0f460     D0 4A 62 FC | 	wrlong	local02, fp
0f464     1C A1 85 F1 | 	sub	fp, #284
0f468     C0 FF 9F FD | 	jmp	#LR__1008
0f46c                 | LR__1009
0f46c                 | LR__1010
0f46c     B8 A0 05 F1 | 	add	fp, #184
0f470     D0 4A 0A FB | 	rdlong	local02, fp wz
0f474     B8 A0 85 F1 | 	sub	fp, #184
0f478     80 00 90 AD |  if_e	jmp	#LR__1013
0f47c     20 A1 05 F1 | 	add	fp, #288
0f480     D0 4A 02 FB | 	rdlong	local02, fp
0f484     25 4D 02 F6 | 	mov	local03, local02
0f488     01 4C 06 F1 | 	add	local03, #1
0f48c     D0 4C 62 FC | 	wrlong	local03, fp
0f490     25 5D 48 FC | 	wrbyte	#46, local02
0f494     04 A0 85 F1 | 	sub	fp, #4
0f498     D0 00 68 FC | 	wrlong	#0, fp
0f49c     1C A1 85 F1 | 	sub	fp, #284
0f4a0                 | LR__1011
0f4a0     1C A1 05 F1 | 	add	fp, #284
0f4a4     D0 48 02 FB | 	rdlong	local01, fp
0f4a8     64 A0 85 F1 | 	sub	fp, #100
0f4ac     D0 50 02 FB | 	rdlong	local05, fp
0f4b0     B8 A0 85 F1 | 	sub	fp, #184
0f4b4     28 49 5A F2 | 	cmps	local01, local05 wcz
0f4b8     40 00 90 3D |  if_ae	jmp	#LR__1012
0f4bc     20 A1 05 F1 | 	add	fp, #288
0f4c0     D0 52 02 FB | 	rdlong	local06, fp
0f4c4     29 59 02 F6 | 	mov	local09, local06
0f4c8     01 58 06 F1 | 	add	local09, #1
0f4cc     D0 58 62 FC | 	wrlong	local09, fp
0f4d0     2A 5A 06 F6 | 	mov	local10, #42
0f4d4     29 55 48 FC | 	wrbyte	#42, local06
0f4d8     04 A0 85 F1 | 	sub	fp, #4
0f4dc     D0 54 02 FB | 	rdlong	local07, fp
0f4e0     2A 53 02 F6 | 	mov	local06, local07
0f4e4     2A 5D 02 F6 | 	mov	local11, local07
0f4e8     2E 59 02 F6 | 	mov	local09, local11
0f4ec     01 58 06 F1 | 	add	local09, #1
0f4f0     D0 58 62 FC | 	wrlong	local09, fp
0f4f4     1C A1 85 F1 | 	sub	fp, #284
0f4f8     A4 FF 9F FD | 	jmp	#LR__1011
0f4fc                 | LR__1012
0f4fc                 | LR__1013
0f4fc     20 A1 05 F1 | 	add	fp, #288
0f500     D0 48 02 FB | 	rdlong	local01, fp
0f504     24 4B 02 F6 | 	mov	local02, local01
0f508     24 51 02 F6 | 	mov	local05, local01
0f50c     28 4D 02 F6 | 	mov	local03, local05
0f510     01 4C 06 F1 | 	add	local03, #1
0f514     D0 4C 62 FC | 	wrlong	local03, fp
0f518     20 A1 85 F1 | 	sub	fp, #288
0f51c     00 4E 06 F6 | 	mov	local04, #0
0f520     25 01 48 FC | 	wrbyte	#0, local02
0f524                 | LR__1014
0f524     04 A0 05 F1 | 	add	fp, #4
0f528     D0 3E 02 FB | 	rdlong	arg01, fp
0f52c     04 A0 05 F1 | 	add	fp, #4
0f530     D0 40 02 FB | 	rdlong	arg02, fp
0f534     BC A0 05 F1 | 	add	fp, #188
0f538     D0 42 02 FB | 	rdlong	arg03, fp
0f53c     C4 A0 85 F1 | 	sub	fp, #196
0f540     CC EB BF FD | 	call	#__system___fmtstr
0f544                 | LR__1015
0f544     D0 F0 03 F6 | 	mov	ptra, fp
0f548     E0 00 A0 FD | 	call	#popregs_
0f54c                 | __system___fmtfloat_ret
0f54c     2D 00 64 FD | 	ret
0f550                 | 
0f550                 | __system___float_fromuns
0f550     02 9C 05 F6 | 	mov	COUNT_, #2
0f554     D1 00 A0 FD | 	call	#pushregs_
0f558     1F 49 0A F6 | 	mov	local01, arg01 wz
0f55c     24 17 02 A6 |  if_e	mov	result1, local01
0f560     2C 00 90 AD |  if_e	jmp	#LR__1016
0f564     24 41 02 F6 | 	mov	arg02, local01
0f568     20 41 92 F7 | 	encod	arg02, arg02 wc
0f56c     01 40 06 C1 |  if_b	add	arg02, #1
0f570     01 40 86 F1 | 	sub	arg02, #1
0f574     1F 4A 06 F6 | 	mov	local02, #31
0f578     20 4B 82 F1 | 	sub	local02, arg02
0f57c     25 49 62 F0 | 	shl	local01, local02
0f580     02 48 46 F0 | 	shr	local01, #2
0f584     00 3E 06 F6 | 	mov	arg01, #0
0f588     24 43 02 F6 | 	mov	arg03, local01
0f58c     B8 05 B0 FD | 	call	#__system___float_Pack
0f590                 | LR__1016
0f590     D0 F0 03 F6 | 	mov	ptra, fp
0f594     E0 00 A0 FD | 	call	#popregs_
0f598                 | __system___float_fromuns_ret
0f598     2D 00 64 FD | 	ret
0f59c                 | 
0f59c                 | __system___float_fromint
0f59c     02 9C 05 F6 | 	mov	COUNT_, #2
0f5a0     D1 00 A0 FD | 	call	#pushregs_
0f5a4     1F 49 02 F6 | 	mov	local01, arg01
0f5a8     00 48 5E F2 | 	cmps	local01, #0 wcz
0f5ac     24 49 62 C6 |  if_b	neg	local01, local01
0f5b0     01 4A 06 C6 |  if_b	mov	local02, #1
0f5b4     00 4A 06 36 |  if_ae	mov	local02, #0
0f5b8     24 3F 02 F6 | 	mov	arg01, local01
0f5bc     90 FF BF FD | 	call	#__system___float_fromuns
0f5c0     00 4A 0E F2 | 	cmp	local02, #0 wz
0f5c4     1F 16 E6 54 |  if_ne	bitnot	result1, #31
0f5c8     D0 F0 03 F6 | 	mov	ptra, fp
0f5cc     E0 00 A0 FD | 	call	#popregs_
0f5d0                 | __system___float_fromint_ret
0f5d0     2D 00 64 FD | 	ret
0f5d4                 | 
0f5d4                 | __system___float_mul
0f5d4     0D 9C 05 F6 | 	mov	COUNT_, #13
0f5d8     D1 00 A0 FD | 	call	#pushregs_
0f5dc     1F 49 02 F6 | 	mov	local01, arg01
0f5e0     20 4B 02 F6 | 	mov	local02, arg02
0f5e4     24 4D 02 F6 | 	mov	local03, local01
0f5e8     26 4F 02 F6 | 	mov	local04, local03
0f5ec     16 4E 46 F7 | 	zerox	local04, #22
0f5f0     26 51 02 F6 | 	mov	local05, local03
0f5f4     01 50 66 F0 | 	shl	local05, #1
0f5f8     18 50 46 F0 | 	shr	local05, #24
0f5fc     1F 4C 46 F0 | 	shr	local03, #31
0f600     25 3F 02 F6 | 	mov	arg01, local02
0f604     1F 17 02 F6 | 	mov	result1, arg01
0f608     0B 53 02 F6 | 	mov	local06, result1
0f60c     29 55 02 F6 | 	mov	local07, local06
0f610     2A 57 02 F6 | 	mov	local08, local07
0f614     16 56 46 F7 | 	zerox	local08, #22
0f618     2A 59 02 F6 | 	mov	local09, local07
0f61c     01 58 66 F0 | 	shl	local09, #1
0f620     18 58 46 F0 | 	shr	local09, #24
0f624     2C 5B 02 F6 | 	mov	local10, local09
0f628     1F 54 46 F0 | 	shr	local07, #31
0f62c     00 5C 06 F6 | 	mov	local11, #0
0f630     2A 4D 62 F5 | 	xor	local03, local07
0f634     FF 50 0E F2 | 	cmp	local05, #255 wz
0f638     90 00 90 AD |  if_e	jmp	#LR__1020
0f63c     FF 5A 0E F2 | 	cmp	local10, #255 wz
0f640     E0 00 90 AD |  if_e	jmp	#LR__1023
0f644     00 50 0E F2 | 	cmp	local05, #0 wz
0f648     18 01 90 AD |  if_e	jmp	#LR__1025
0f64c     17 4E 26 F4 | 	bith	local04, #23
0f650                 | LR__1017
0f650     00 5A 0E F2 | 	cmp	local10, #0 wz
0f654     54 01 90 AD |  if_e	jmp	#LR__1029
0f658     17 56 26 F4 | 	bith	local08, #23
0f65c                 | LR__1018
0f65c     2D 51 02 F1 | 	add	local05, local10
0f660     FE 50 86 F1 | 	sub	local05, #254
0f664     28 5F 02 F6 | 	mov	local12, local05
0f668     27 59 02 F6 | 	mov	local09, local04
0f66c     04 58 66 F0 | 	shl	local09, #4
0f670     2B 53 02 F6 | 	mov	local06, local08
0f674     05 52 66 F0 | 	shl	local06, #5
0f678     29 59 02 FD | 	qmul	local09, local06
0f67c     18 5C 62 FD | 	getqx	local11
0f680     04 4E 66 F0 | 	shl	local04, #4
0f684     05 56 66 F0 | 	shl	local08, #5
0f688     2B 4F 02 FD | 	qmul	local04, local08
0f68c     19 60 62 FD | 	getqy	local13
0f690     00 80 00 FF 
0f694     00 60 1E F2 | 	cmp	local13, ##16777216 wcz
0f698     18 00 90 CD |  if_b	jmp	#LR__1019
0f69c     01 5E 06 F1 | 	add	local12, #1
0f6a0     01 5C 46 F0 | 	shr	local11, #1
0f6a4     30 53 02 F6 | 	mov	local06, local13
0f6a8     1F 52 66 F0 | 	shl	local06, #31
0f6ac     29 5D 42 F5 | 	or	local11, local06
0f6b0     01 60 46 F0 | 	shr	local13, #1
0f6b4                 | LR__1019
0f6b4     30 3F 02 F6 | 	mov	arg01, local13
0f6b8     2E 41 02 F6 | 	mov	arg02, local11
0f6bc     2F 43 02 F6 | 	mov	arg03, local12
0f6c0     26 45 02 F6 | 	mov	arg04, local03
0f6c4     60 16 B0 FD | 	call	#__system__pack_1105
0f6c8     24 01 90 FD | 	jmp	#LR__1033
0f6cc                 | LR__1020
0f6cc     00 4E 0E F2 | 	cmp	local04, #0 wz
0f6d0     24 17 02 56 |  if_ne	mov	result1, local01
0f6d4     18 01 90 5D |  if_ne	jmp	#LR__1033
0f6d8     FF 5A 5E F2 | 	cmps	local10, #255 wcz
0f6dc     1C 00 90 3D |  if_ae	jmp	#LR__1021
0f6e0     00 5A 0E F2 | 	cmp	local10, #0 wz
0f6e4     20 00 90 5D |  if_ne	jmp	#LR__1022
0f6e8     00 56 0E F2 | 	cmp	local08, #0 wz
0f6ec     18 00 90 5D |  if_ne	jmp	#LR__1022
0f6f0     00 F8 3F FF 
0f6f4     00 16 06 F6 | 	mov	result1, ##2146435072
0f6f8     F4 00 90 FD | 	jmp	#LR__1033
0f6fc                 | LR__1021
0f6fc     00 56 0E F2 | 	cmp	local08, #0 wz
0f700     25 17 02 56 |  if_ne	mov	result1, local02
0f704     E8 00 90 5D |  if_ne	jmp	#LR__1033
0f708                 | LR__1022
0f708     02 4C 46 F5 | 	or	local03, #2
0f70c     00 3E 06 F6 | 	mov	arg01, #0
0f710     00 40 06 F6 | 	mov	arg02, #0
0f714     28 43 02 F6 | 	mov	arg03, local05
0f718     26 45 02 F6 | 	mov	arg04, local03
0f71c     08 16 B0 FD | 	call	#__system__pack_1105
0f720     CC 00 90 FD | 	jmp	#LR__1033
0f724                 | LR__1023
0f724     00 50 0E F2 | 	cmp	local05, #0 wz
0f728     10 00 90 5D |  if_ne	jmp	#LR__1024
0f72c     00 4E 0E F2 | 	cmp	local04, #0 wz
0f730     00 F8 3F AF 
0f734     00 16 06 A6 |  if_e	mov	result1, ##2146435072
0f738     B4 00 90 AD |  if_e	jmp	#LR__1033
0f73c                 | LR__1024
0f73c     00 56 0E F2 | 	cmp	local08, #0 wz
0f740     25 17 02 56 |  if_ne	mov	result1, local02
0f744     A8 00 90 5D |  if_ne	jmp	#LR__1033
0f748     2D 43 02 F6 | 	mov	arg03, local10
0f74c     26 45 02 F6 | 	mov	arg04, local03
0f750     02 44 46 F5 | 	or	arg04, #2
0f754     00 3E 06 F6 | 	mov	arg01, #0
0f758     00 40 06 F6 | 	mov	arg02, #0
0f75c     C8 15 B0 FD | 	call	#__system__pack_1105
0f760     8C 00 90 FD | 	jmp	#LR__1033
0f764                 | LR__1025
0f764     00 4E 0E F2 | 	cmp	local04, #0 wz
0f768     24 00 90 AD |  if_e	jmp	#LR__1028
0f76c     01 4E 66 F0 | 	shl	local04, #1
0f770     A0 08 9F FE | 	loc	pa,	#(@LR__1027-@LR__1026)
0f774     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f778                 | LR__1026
0f778     00 40 00 FF 
0f77c     00 4E 1E F2 | 	cmp	local04, ##8388608 wcz
0f780     01 50 86 C1 |  if_b	sub	local05, #1
0f784     01 4E 66 C0 |  if_b	shl	local04, #1
0f788     EC FF 9F CD |  if_b	jmp	#LR__1026
0f78c                 | LR__1027
0f78c     C0 FE 9F FD | 	jmp	#LR__1017
0f790                 | LR__1028
0f790     08 4C 46 F5 | 	or	local03, #8
0f794     00 3E 06 F6 | 	mov	arg01, #0
0f798     00 40 06 F6 | 	mov	arg02, #0
0f79c     00 42 06 F6 | 	mov	arg03, #0
0f7a0     26 45 02 F6 | 	mov	arg04, local03
0f7a4     80 15 B0 FD | 	call	#__system__pack_1105
0f7a8     44 00 90 FD | 	jmp	#LR__1033
0f7ac                 | LR__1029
0f7ac     00 56 0E F2 | 	cmp	local08, #0 wz
0f7b0     24 00 90 AD |  if_e	jmp	#LR__1032
0f7b4     01 56 66 F0 | 	shl	local08, #1
0f7b8     58 08 9F FE | 	loc	pa,	#(@LR__1031-@LR__1030)
0f7bc     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f7c0                 | LR__1030
0f7c0     00 40 00 FF 
0f7c4     00 56 1E F2 | 	cmp	local08, ##8388608 wcz
0f7c8     01 5A 86 C1 |  if_b	sub	local10, #1
0f7cc     01 56 66 C0 |  if_b	shl	local08, #1
0f7d0     EC FF 9F CD |  if_b	jmp	#LR__1030
0f7d4                 | LR__1031
0f7d4     84 FE 9F FD | 	jmp	#LR__1018
0f7d8                 | LR__1032
0f7d8     26 45 02 F6 | 	mov	arg04, local03
0f7dc     08 44 46 F5 | 	or	arg04, #8
0f7e0     00 3E 06 F6 | 	mov	arg01, #0
0f7e4     00 40 06 F6 | 	mov	arg02, #0
0f7e8     00 42 06 F6 | 	mov	arg03, #0
0f7ec     38 15 B0 FD | 	call	#__system__pack_1105
0f7f0                 | LR__1033
0f7f0     D0 F0 03 F6 | 	mov	ptra, fp
0f7f4     E0 00 A0 FD | 	call	#popregs_
0f7f8                 | __system___float_mul_ret
0f7f8     2D 00 64 FD | 	ret
0f7fc                 | 
0f7fc                 | __system___float_div
0f7fc     0F 9C 05 F6 | 	mov	COUNT_, #15
0f800     D1 00 A0 FD | 	call	#pushregs_
0f804     1F 4D 02 F6 | 	mov	local03, arg01
0f808     20 4F 02 F6 | 	mov	local04, arg02
0f80c     26 51 02 F6 | 	mov	local05, local03
0f810     28 53 02 F6 | 	mov	local06, local05
0f814     16 52 46 F7 | 	zerox	local06, #22
0f818     28 55 02 F6 | 	mov	local07, local05
0f81c     01 54 66 F0 | 	shl	local07, #1
0f820     18 54 46 F0 | 	shr	local07, #24
0f824     1F 50 46 F0 | 	shr	local05, #31
0f828     27 17 02 F6 | 	mov	result1, local04
0f82c     0B 57 02 F6 | 	mov	local08, result1
0f830     2B 59 02 F6 | 	mov	local09, local08
0f834     16 58 46 F7 | 	zerox	local09, #22
0f838     2B 5B 02 F6 | 	mov	local10, local08
0f83c     01 5A 66 F0 | 	shl	local10, #1
0f840     18 5A 46 F0 | 	shr	local10, #24
0f844     1F 56 46 F0 | 	shr	local08, #31
0f848     2B 51 62 F5 | 	xor	local05, local08
0f84c     FF 54 0E F2 | 	cmp	local07, #255 wz
0f850     D8 00 90 AD |  if_e	jmp	#LR__1039
0f854     FF 5A 0E F2 | 	cmp	local10, #255 wz
0f858     08 01 90 AD |  if_e	jmp	#LR__1040
0f85c     00 54 0E F2 | 	cmp	local07, #0 wz
0f860     28 01 90 AD |  if_e	jmp	#LR__1041
0f864     17 52 26 F4 | 	bith	local06, #23
0f868                 | LR__1034
0f868     00 5A 0E F2 | 	cmp	local10, #0 wz
0f86c     7C 01 90 AD |  if_e	jmp	#LR__1046
0f870     17 58 26 F4 | 	bith	local09, #23
0f874                 | LR__1035
0f874     2D 55 82 F1 | 	sub	local07, local10
0f878     2A 5D 02 F6 | 	mov	local11, local07
0f87c     29 3F 02 F6 | 	mov	arg01, local06
0f880     02 3E 46 F0 | 	shr	arg01, #2
0f884     1E 52 66 F0 | 	shl	local06, #30
0f888     29 41 02 F6 | 	mov	arg02, local06
0f88c     2C 43 02 F6 | 	mov	arg03, local09
0f890     28 3E 62 FD | 	setq	arg01
0f894     21 41 12 FD | 	qdiv	arg02, arg03
0f898     18 16 62 FD | 	getqx	result1
0f89c     19 18 62 FD | 	getqy	result2
0f8a0     0B 49 02 F6 | 	mov	local01, result1
0f8a4     0C 4B 02 F6 | 	mov	local02, result2
0f8a8     24 5F 02 F6 | 	mov	local12, local01
0f8ac     25 61 0A F6 | 	mov	local13, local02 wz
0f8b0     2F 63 02 F6 | 	mov	local14, local12
0f8b4     19 62 66 F0 | 	shl	local14, #25
0f8b8     00 64 06 F6 | 	mov	local15, #0
0f8bc     01 64 06 56 |  if_ne	mov	local15, #1
0f8c0     32 63 42 F5 | 	or	local14, local15
0f8c4     07 5E 46 F0 | 	shr	local12, #7
0f8c8     00 80 00 FF 
0f8cc     00 5E 1E F2 | 	cmp	local12, ##16777216 wcz
0f8d0     1C 00 90 CD |  if_b	jmp	#LR__1036
0f8d4     01 5C 06 F1 | 	add	local11, #1
0f8d8     01 62 46 F0 | 	shr	local14, #1
0f8dc     2F 65 02 F6 | 	mov	local15, local12
0f8e0     1F 64 66 F0 | 	shl	local15, #31
0f8e4     32 63 42 F5 | 	or	local14, local15
0f8e8     01 5E 46 F0 | 	shr	local12, #1
0f8ec     24 00 90 FD | 	jmp	#LR__1038
0f8f0                 | LR__1036
0f8f0     00 40 00 FF 
0f8f4     00 5E 1E F2 | 	cmp	local12, ##8388608 wcz
0f8f8     18 00 90 3D |  if_ae	jmp	#LR__1037
0f8fc     01 5C 86 F1 | 	sub	local11, #1
0f900     01 5E 66 F0 | 	shl	local12, #1
0f904     31 65 02 F6 | 	mov	local15, local14
0f908     1F 64 46 F0 | 	shr	local15, #31
0f90c     32 5F 42 F5 | 	or	local12, local15
0f910     01 62 66 F0 | 	shl	local14, #1
0f914                 | LR__1037
0f914                 | LR__1038
0f914     2F 3F 02 F6 | 	mov	arg01, local12
0f918     31 41 02 F6 | 	mov	arg02, local14
0f91c     2E 43 02 F6 | 	mov	arg03, local11
0f920     28 45 02 F6 | 	mov	arg04, local05
0f924     00 14 B0 FD | 	call	#__system__pack_1105
0f928     04 01 90 FD | 	jmp	#LR__1050
0f92c                 | LR__1039
0f92c     00 52 0E F2 | 	cmp	local06, #0 wz
0f930     26 17 02 56 |  if_ne	mov	result1, local03
0f934     F8 00 90 5D |  if_ne	jmp	#LR__1050
0f938     FF 5A 0E F2 | 	cmp	local10, #255 wz
0f93c     00 F8 3F AF 
0f940     00 16 06 A6 |  if_e	mov	result1, ##2146435072
0f944     E8 00 90 AD |  if_e	jmp	#LR__1050
0f948     02 50 46 F5 | 	or	local05, #2
0f94c     00 3E 06 F6 | 	mov	arg01, #0
0f950     00 40 06 F6 | 	mov	arg02, #0
0f954     2A 43 02 F6 | 	mov	arg03, local07
0f958     28 45 02 F6 | 	mov	arg04, local05
0f95c     C8 13 B0 FD | 	call	#__system__pack_1105
0f960     CC 00 90 FD | 	jmp	#LR__1050
0f964                 | LR__1040
0f964     00 58 0E F2 | 	cmp	local09, #0 wz
0f968     27 17 02 56 |  if_ne	mov	result1, local04
0f96c     C0 00 90 5D |  if_ne	jmp	#LR__1050
0f970     28 45 02 F6 | 	mov	arg04, local05
0f974     08 44 46 F5 | 	or	arg04, #8
0f978     00 3E 06 F6 | 	mov	arg01, #0
0f97c     00 40 06 F6 | 	mov	arg02, #0
0f980     00 42 06 F6 | 	mov	arg03, #0
0f984     A0 13 B0 FD | 	call	#__system__pack_1105
0f988     A4 00 90 FD | 	jmp	#LR__1050
0f98c                 | LR__1041
0f98c     00 52 0E F2 | 	cmp	local06, #0 wz
0f990     24 00 90 AD |  if_e	jmp	#LR__1044
0f994     01 52 66 F0 | 	shl	local06, #1
0f998     78 06 9F FE | 	loc	pa,	#(@LR__1043-@LR__1042)
0f99c     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0f9a0                 | LR__1042
0f9a0     00 40 00 FF 
0f9a4     00 52 1E F2 | 	cmp	local06, ##8388608 wcz
0f9a8     01 54 86 C1 |  if_b	sub	local07, #1
0f9ac     01 52 66 C0 |  if_b	shl	local06, #1
0f9b0     EC FF 9F CD |  if_b	jmp	#LR__1042
0f9b4                 | LR__1043
0f9b4     B0 FE 9F FD | 	jmp	#LR__1034
0f9b8                 | LR__1044
0f9b8     00 5A 0E F2 | 	cmp	local10, #0 wz
0f9bc     10 00 90 5D |  if_ne	jmp	#LR__1045
0f9c0     00 58 0E F2 | 	cmp	local09, #0 wz
0f9c4     00 F8 3F AF 
0f9c8     00 16 06 A6 |  if_e	mov	result1, ##2146435072
0f9cc     60 00 90 AD |  if_e	jmp	#LR__1050
0f9d0                 | LR__1045
0f9d0     28 45 02 F6 | 	mov	arg04, local05
0f9d4     08 44 46 F5 | 	or	arg04, #8
0f9d8     00 3E 06 F6 | 	mov	arg01, #0
0f9dc     00 40 06 F6 | 	mov	arg02, #0
0f9e0     00 42 06 F6 | 	mov	arg03, #0
0f9e4     40 13 B0 FD | 	call	#__system__pack_1105
0f9e8     44 00 90 FD | 	jmp	#LR__1050
0f9ec                 | LR__1046
0f9ec     00 58 0E F2 | 	cmp	local09, #0 wz
0f9f0     24 00 90 AD |  if_e	jmp	#LR__1049
0f9f4     01 58 66 F0 | 	shl	local09, #1
0f9f8     18 06 9F FE | 	loc	pa,	#(@LR__1048-@LR__1047)
0f9fc     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0fa00                 | LR__1047
0fa00     00 40 00 FF 
0fa04     00 58 1E F2 | 	cmp	local09, ##8388608 wcz
0fa08     01 5A 86 C1 |  if_b	sub	local10, #1
0fa0c     01 58 66 C0 |  if_b	shl	local09, #1
0fa10     EC FF 9F CD |  if_b	jmp	#LR__1047
0fa14                 | LR__1048
0fa14     5C FE 9F FD | 	jmp	#LR__1035
0fa18                 | LR__1049
0fa18     28 45 02 F6 | 	mov	arg04, local05
0fa1c     02 44 46 F5 | 	or	arg04, #2
0fa20     00 3E 06 F6 | 	mov	arg01, #0
0fa24     00 40 06 F6 | 	mov	arg02, #0
0fa28     00 42 06 F6 | 	mov	arg03, #0
0fa2c     F8 12 B0 FD | 	call	#__system__pack_1105
0fa30                 | LR__1050
0fa30     D0 F0 03 F6 | 	mov	ptra, fp
0fa34     E0 00 A0 FD | 	call	#popregs_
0fa38                 | __system___float_div_ret
0fa38     2D 00 64 FD | 	ret
0fa3c                 | 
0fa3c                 | __system___float_cmp
0fa3c     1F 29 02 F6 | 	mov	_var01, arg01
0fa40     00 C0 3F FF 
0fa44     00 28 5E F2 | 	cmps	_var01, ##2139095040 wcz
0fa48     0C 00 90 1D |  if_a	jmp	#LR__1051
0fa4c     00 C0 3F FF 
0fa50     00 40 5E F2 | 	cmps	arg02, ##2139095040 wcz
0fa54     08 00 90 ED |  if_be	jmp	#LR__1052
0fa58                 | LR__1051
0fa58     21 17 02 F6 | 	mov	result1, arg03
0fa5c     88 00 90 FD | 	jmp	#__system___float_cmp_ret
0fa60                 | LR__1052
0fa60     00 C0 7F FF 
0fa64     00 28 1E F2 | 	cmp	_var01, ##-8388608 wcz
0fa68     0C 00 90 1D |  if_a	jmp	#LR__1053
0fa6c     00 C0 7F FF 
0fa70     00 28 1E F2 | 	cmp	_var01, ##-8388608 wcz
0fa74     08 00 90 ED |  if_be	jmp	#LR__1054
0fa78                 | LR__1053
0fa78     21 17 02 F6 | 	mov	result1, arg03
0fa7c     68 00 90 FD | 	jmp	#__system___float_cmp_ret
0fa80                 | LR__1054
0fa80     00 28 5E F2 | 	cmps	_var01, #0 wcz
0fa84     30 00 90 3D |  if_ae	jmp	#LR__1056
0fa88     00 40 5E F2 | 	cmps	arg02, #0 wcz
0fa8c     20 17 02 C6 |  if_b	mov	result1, arg02
0fa90     14 17 82 C1 |  if_b	sub	result1, _var01
0fa94     50 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
0fa98     00 40 0E F2 | 	cmp	arg02, #0 wz
0fa9c     10 00 90 5D |  if_ne	jmp	#LR__1055
0faa0     00 00 40 FF 
0faa4     00 28 0E F2 | 	cmp	_var01, ##-2147483648 wz
0faa8     00 16 06 A6 |  if_e	mov	result1, #0
0faac     38 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
0fab0                 | LR__1055
0fab0     01 16 66 F6 | 	neg	result1, #1
0fab4     30 00 90 FD | 	jmp	#__system___float_cmp_ret
0fab8                 | LR__1056
0fab8     00 40 5E F2 | 	cmps	arg02, #0 wcz
0fabc     20 00 90 3D |  if_ae	jmp	#LR__1058
0fac0     00 28 0E F2 | 	cmp	_var01, #0 wz
0fac4     10 00 90 5D |  if_ne	jmp	#LR__1057
0fac8     00 00 40 FF 
0facc     00 40 0E F2 | 	cmp	arg02, ##-2147483648 wz
0fad0     00 16 06 A6 |  if_e	mov	result1, #0
0fad4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
0fad8                 | LR__1057
0fad8     01 16 06 F6 | 	mov	result1, #1
0fadc     08 00 90 FD | 	jmp	#__system___float_cmp_ret
0fae0                 | LR__1058
0fae0     20 29 82 F1 | 	sub	_var01, arg02
0fae4     14 17 02 F6 | 	mov	result1, _var01
0fae8                 | __system___float_cmp_ret
0fae8     2D 00 64 FD | 	ret
0faec                 | 
0faec                 | __system___float_Unpack
0faec     1F 29 02 F6 | 	mov	_var01, arg01
0faf0     1F 28 46 F0 | 	shr	_var01, #31
0faf4     1F 2B 02 F6 | 	mov	_var02, arg01
0faf8     01 2A 66 F0 | 	shl	_var02, #1
0fafc     18 2A 4E F0 | 	shr	_var02, #24 wz
0fb00     FF 3F 00 FF 
0fb04     FF 3F 06 F5 | 	and	arg01, ##8388607
0fb08     06 3E 66 50 |  if_ne	shl	arg01, #6
0fb0c     1D 3E 26 54 |  if_ne	bith	arg01, #29
0fb10     20 00 90 5D |  if_ne	jmp	#LR__1059
0fb14     1F 2D 02 F6 | 	mov	_var03, arg01
0fb18     16 2D 92 F7 | 	encod	_var03, _var03 wc
0fb1c     01 2C 06 C1 |  if_b	add	_var03, #1
0fb20     17 2C 86 F1 | 	sub	_var03, #23
0fb24     16 2B 02 F6 | 	mov	_var02, _var03
0fb28     07 2E 06 F6 | 	mov	_var04, #7
0fb2c     16 2F 82 F1 | 	sub	_var04, _var03
0fb30     17 3F 62 F0 | 	shl	arg01, _var04
0fb34                 | LR__1059
0fb34     7F 2A 86 F1 | 	sub	_var02, #127
0fb38     1F 1B 02 F6 | 	mov	result3, arg01
0fb3c     14 17 02 F6 | 	mov	result1, _var01
0fb40     15 19 02 F6 | 	mov	result2, _var02
0fb44                 | __system___float_Unpack_ret
0fb44     2D 00 64 FD | 	ret
0fb48                 | 
0fb48                 | __system___float_Pack
0fb48     00 28 06 F6 | 	mov	_var01, #0
0fb4c     00 42 0E F2 | 	cmp	arg03, #0 wz
0fb50     90 00 90 AD |  if_e	jmp	#LR__1061
0fb54     21 2B 02 F6 | 	mov	_var02, arg03
0fb58     15 2B 92 F7 | 	encod	_var02, _var02 wc
0fb5c     01 2A 06 C1 |  if_b	add	_var02, #1
0fb60     21 28 06 F6 | 	mov	_var01, #33
0fb64     15 29 82 F1 | 	sub	_var01, _var02
0fb68     14 43 62 F0 | 	shl	arg03, _var01
0fb6c     03 2A 06 F6 | 	mov	_var02, #3
0fb70     14 2B 82 F1 | 	sub	_var02, _var01
0fb74     15 41 02 F1 | 	add	arg02, _var02
0fb78     20 2D 02 F6 | 	mov	_var03, arg02
0fb7c     00 43 06 F1 | 	add	arg03, #256
0fb80     21 2F 02 F6 | 	mov	_var04, arg03
0fb84     FF 2E 2E F5 | 	andn	_var04, #255 wz
0fb88     01 2C 06 A1 |  if_e	add	_var03, #1
0fb8c     7F 2C 06 F1 | 	add	_var03, #127
0fb90     FF FF 7F FF 
0fb94     E9 2D 46 F3 | 	fges	_var03, ##-23
0fb98     FF 2C 66 F3 | 	fles	_var03, #255
0fb9c     01 2C 5E F2 | 	cmps	_var03, #1 wcz
0fba0     1C 00 90 3D |  if_ae	jmp	#LR__1060
0fba4     01 42 46 F0 | 	shr	arg03, #1
0fba8     1F 2E C6 F9 | 	decod	_var04, #31
0fbac     21 2F 02 F1 | 	add	_var04, arg03
0fbb0     16 2D 62 F6 | 	neg	_var03, _var03
0fbb4     16 2F 42 F0 | 	shr	_var04, _var03
0fbb8     17 43 02 F6 | 	mov	arg03, _var04
0fbbc     00 2C 06 F6 | 	mov	_var03, #0
0fbc0                 | LR__1060
0fbc0     1F 17 02 F6 | 	mov	result1, arg01
0fbc4     1F 16 66 F0 | 	shl	result1, #31
0fbc8     16 2B 02 F6 | 	mov	_var02, _var03
0fbcc     17 2A 66 F0 | 	shl	_var02, #23
0fbd0     15 17 42 F5 | 	or	result1, _var02
0fbd4     21 31 02 F6 | 	mov	_var05, arg03
0fbd8     09 30 46 F0 | 	shr	_var05, #9
0fbdc     18 17 42 F5 | 	or	result1, _var05
0fbe0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
0fbe4                 | LR__1061
0fbe4     14 17 02 F6 | 	mov	result1, _var01
0fbe8                 | __system___float_Pack_ret
0fbe8     2D 00 64 FD | 	ret
0fbec                 | 
0fbec                 | __system____builtin_ilogb
0fbec     02 9C 05 F6 | 	mov	COUNT_, #2
0fbf0     D1 00 A0 FD | 	call	#pushregs_
0fbf4     F4 FE BF FD | 	call	#__system___float_Unpack
0fbf8     0C 49 02 F6 | 	mov	local01, result2
0fbfc     0D 4B 0A F6 | 	mov	local02, result3 wz
0fc00     00 00 40 AF 
0fc04     01 16 06 A6 |  if_e	mov	result1, ##-2147483647
0fc08     24 00 90 AD |  if_e	jmp	#LR__1063
0fc0c     80 48 0E F2 | 	cmp	local01, #128 wz
0fc10     18 00 90 5D |  if_ne	jmp	#LR__1062
0fc14     00 00 10 FF 
0fc18     00 4A 0E F2 | 	cmp	local02, ##536870912 wz
0fc1c     1E 16 CE A9 |  if_e	bmask	result1, #30
0fc20     0C 00 90 AD |  if_e	jmp	#LR__1063
0fc24     1F 16 C6 F9 | 	decod	result1, #31
0fc28     04 00 90 FD | 	jmp	#LR__1063
0fc2c                 | LR__1062
0fc2c     24 17 02 F6 | 	mov	result1, local01
0fc30                 | LR__1063
0fc30     D0 F0 03 F6 | 	mov	ptra, fp
0fc34     E0 00 A0 FD | 	call	#popregs_
0fc38                 | __system____builtin_ilogb_ret
0fc38     2D 00 64 FD | 	ret
0fc3c                 | 
0fc3c                 | __system___float_pow_n
0fc3c     05 9C 05 F6 | 	mov	COUNT_, #5
0fc40     D1 00 A0 FD | 	call	#pushregs_
0fc44     1F 49 02 F6 | 	mov	local01, arg01
0fc48     20 4B 02 F6 | 	mov	local02, arg02
0fc4c     21 4D 02 F6 | 	mov	local03, arg03
0fc50     00 4C 5E F2 | 	cmps	local03, #0 wcz
0fc54     18 00 90 3D |  if_ae	jmp	#LR__1064
0fc58     01 4E 06 F6 | 	mov	local04, #1
0fc5c     26 4D 62 F6 | 	neg	local03, local03
0fc60     00 4C 5E F2 | 	cmps	local03, #0 wcz
0fc64     00 16 06 C6 |  if_b	mov	result1, #0
0fc68     94 00 90 CD |  if_b	jmp	#LR__1072
0fc6c     04 00 90 FD | 	jmp	#LR__1065
0fc70                 | LR__1064
0fc70     00 4E 06 F6 | 	mov	local04, #0
0fc74                 | LR__1065
0fc74     00 C0 1F FF 
0fc78     00 50 06 F6 | 	mov	local05, ##1065353216
0fc7c                 | LR__1066
0fc7c     00 4C 5E F2 | 	cmps	local03, #0 wcz
0fc80     30 00 90 ED |  if_be	jmp	#LR__1068
0fc84     01 4C CE F7 | 	test	local03, #1 wz
0fc88     10 00 90 AD |  if_e	jmp	#LR__1067
0fc8c     28 3F 02 F6 | 	mov	arg01, local05
0fc90     25 41 02 F6 | 	mov	arg02, local02
0fc94     3C F9 BF FD | 	call	#__system___float_mul
0fc98     0B 51 02 F6 | 	mov	local05, result1
0fc9c                 | LR__1067
0fc9c     01 4C C6 F0 | 	sar	local03, #1
0fca0     25 3F 02 F6 | 	mov	arg01, local02
0fca4     25 41 02 F6 | 	mov	arg02, local02
0fca8     28 F9 BF FD | 	call	#__system___float_mul
0fcac     0B 4B 02 F6 | 	mov	local02, result1
0fcb0     C8 FF 9F FD | 	jmp	#LR__1066
0fcb4                 | LR__1068
0fcb4     00 4E 0E F2 | 	cmp	local04, #0 wz
0fcb8     14 00 90 AD |  if_e	jmp	#LR__1069
0fcbc     24 3F 02 F6 | 	mov	arg01, local01
0fcc0     28 41 02 F6 | 	mov	arg02, local05
0fcc4     34 FB BF FD | 	call	#__system___float_div
0fcc8     0B 51 02 F6 | 	mov	local05, result1
0fccc     2C 00 90 FD | 	jmp	#LR__1071
0fcd0                 | LR__1069
0fcd0     24 3F 02 F6 | 	mov	arg01, local01
0fcd4     00 C0 1F FF 
0fcd8     00 40 06 F6 | 	mov	arg02, ##1065353216
0fcdc     01 42 06 F6 | 	mov	arg03, #1
0fce0     58 FD BF FD | 	call	#__system___float_cmp
0fce4     00 16 0E F2 | 	cmp	result1, #0 wz
0fce8     10 00 90 AD |  if_e	jmp	#LR__1070
0fcec     24 3F 02 F6 | 	mov	arg01, local01
0fcf0     28 41 02 F6 | 	mov	arg02, local05
0fcf4     DC F8 BF FD | 	call	#__system___float_mul
0fcf8     0B 51 02 F6 | 	mov	local05, result1
0fcfc                 | LR__1070
0fcfc                 | LR__1071
0fcfc     28 17 02 F6 | 	mov	result1, local05
0fd00                 | LR__1072
0fd00     D0 F0 03 F6 | 	mov	ptra, fp
0fd04     E0 00 A0 FD | 	call	#popregs_
0fd08                 | __system___float_pow_n_ret
0fd08     2D 00 64 FD | 	ret
0fd0c                 | 
0fd0c                 | __system___gc_ptrs
0fd0c     04 9C 05 F6 | 	mov	COUNT_, #4
0fd10     D1 00 A0 FD | 	call	#pushregs_
0fd14     FB 48 02 F6 | 	mov	local01, __heap_ptr
0fd18     24 4B 02 F6 | 	mov	local02, local01
0fd1c     07 00 00 FF 
0fd20     F8 4B 06 F1 | 	add	local02, ##4088
0fd24     24 4D 0A FB | 	rdlong	local03, local01 wz
0fd28     74 00 90 5D |  if_ne	jmp	#LR__1073
0fd2c     25 4F 02 F6 | 	mov	local04, local02
0fd30     24 4F 82 F1 | 	sub	local04, local01
0fd34     24 03 58 FC | 	wrword	#1, local01
0fd38     24 4D 02 F6 | 	mov	local03, local01
0fd3c     02 4C 06 F1 | 	add	local03, #2
0fd40     36 00 80 FF 
0fd44     26 21 59 FC | 	wrword	##27792, local03
0fd48     24 4D 02 F6 | 	mov	local03, local01
0fd4c     04 4C 06 F1 | 	add	local03, #4
0fd50     26 01 58 FC | 	wrword	#0, local03
0fd54     24 4D 02 F6 | 	mov	local03, local01
0fd58     06 4C 06 F1 | 	add	local03, #6
0fd5c     26 03 58 FC | 	wrword	#1, local03
0fd60     10 48 06 F1 | 	add	local01, #16
0fd64     27 4D 52 F6 | 	abs	local03, local04 wc
0fd68     04 4C 46 F0 | 	shr	local03, #4
0fd6c     26 4D 62 C6 |  if_b	neg	local03, local03
0fd70     24 4D 52 FC | 	wrword	local03, local01
0fd74     24 4D 02 F6 | 	mov	local03, local01
0fd78     02 4C 06 F1 | 	add	local03, #2
0fd7c     36 00 80 FF 
0fd80     26 1F 59 FC | 	wrword	##27791, local03
0fd84     24 4D 02 F6 | 	mov	local03, local01
0fd88     04 4C 06 F1 | 	add	local03, #4
0fd8c     26 01 58 FC | 	wrword	#0, local03
0fd90     24 4D 02 F6 | 	mov	local03, local01
0fd94     06 4C 06 F1 | 	add	local03, #6
0fd98     26 01 58 FC | 	wrword	#0, local03
0fd9c     10 48 86 F1 | 	sub	local01, #16
0fda0                 | LR__1073
0fda0     25 19 02 F6 | 	mov	result2, local02
0fda4     24 17 02 F6 | 	mov	result1, local01
0fda8     D0 F0 03 F6 | 	mov	ptra, fp
0fdac     E0 00 A0 FD | 	call	#popregs_
0fdb0                 | __system___gc_ptrs_ret
0fdb0     2D 00 64 FD | 	ret
0fdb4                 | 
0fdb4                 | __system___gc_nextBlockPtr
0fdb4     02 9C 05 F6 | 	mov	COUNT_, #2
0fdb8     D1 00 A0 FD | 	call	#pushregs_
0fdbc     1F 49 02 F6 | 	mov	local01, arg01
0fdc0     24 4B EA FA | 	rdword	local02, local01 wz
0fdc4     10 00 90 5D |  if_ne	jmp	#LR__1074
0fdc8     87 00 00 FF 
0fdcc     52 3F 06 F6 | 	mov	arg01, ##@LR__1179
0fdd0     FC 01 B0 FD | 	call	#__system___gc_errmsg
0fdd4     0C 00 90 FD | 	jmp	#LR__1075
0fdd8                 | LR__1074
0fdd8     24 17 02 F6 | 	mov	result1, local01
0fddc     04 4A 66 F0 | 	shl	local02, #4
0fde0     25 17 02 F1 | 	add	result1, local02
0fde4                 | LR__1075
0fde4     D0 F0 03 F6 | 	mov	ptra, fp
0fde8     E0 00 A0 FD | 	call	#popregs_
0fdec                 | __system___gc_nextBlockPtr_ret
0fdec     2D 00 64 FD | 	ret
0fdf0                 | 
0fdf0                 | __system___gc_tryalloc
0fdf0     0E 9C 05 F6 | 	mov	COUNT_, #14
0fdf4     D1 00 A0 FD | 	call	#pushregs_
0fdf8     1F 49 02 F6 | 	mov	local01, arg01
0fdfc     20 4B 02 F6 | 	mov	local02, arg02
0fe00     08 FF BF FD | 	call	#__system___gc_ptrs
0fe04     0B 4D 02 F6 | 	mov	local03, result1
0fe08     0C 4F 02 F6 | 	mov	local04, result2
0fe0c     26 51 02 F6 | 	mov	local05, local03
0fe10     00 52 06 F6 | 	mov	local06, #0
0fe14     3C 02 9F FE | 	loc	pa,	#(@LR__1077-@LR__1076)
0fe18     B4 00 A0 FD | 	call	#FCACHE_LOAD_
0fe1c                 | LR__1076
0fe1c     28 55 02 F6 | 	mov	local07, local05
0fe20     26 57 02 F6 | 	mov	local08, local03
0fe24     28 59 02 F6 | 	mov	local09, local05
0fe28     06 58 06 F1 | 	add	local09, #6
0fe2c     2C 5B E2 FA | 	rdword	local10, local09
0fe30     2B 3F 02 F6 | 	mov	arg01, local08
0fe34     2D 41 0A F6 | 	mov	arg02, local10 wz
0fe38     00 16 06 A6 |  if_e	mov	result1, #0
0fe3c     04 40 66 50 |  if_ne	shl	arg02, #4
0fe40     20 3F 02 51 |  if_ne	add	arg01, arg02
0fe44     1F 17 02 56 |  if_ne	mov	result1, arg01
0fe48     0B 5D 02 F6 | 	mov	local11, result1
0fe4c     2E 51 0A F6 | 	mov	local05, local11 wz
0fe50     28 57 02 56 |  if_ne	mov	local08, local05
0fe54     2B 53 E2 5A |  if_ne	rdword	local06, local08
0fe58     00 50 0E F2 | 	cmp	local05, #0 wz
0fe5c     10 00 90 AD |  if_e	jmp	#LR__1078
0fe60     27 51 5A F2 | 	cmps	local05, local04 wcz
0fe64     08 00 90 3D |  if_ae	jmp	#LR__1078
0fe68     29 49 5A F2 | 	cmps	local01, local06 wcz
0fe6c     AC FF 9F 1D |  if_a	jmp	#LR__1076
0fe70                 | LR__1077
0fe70                 | LR__1078
0fe70     00 50 0E F2 | 	cmp	local05, #0 wz
0fe74     28 17 02 A6 |  if_e	mov	result1, local05
0fe78     48 01 90 AD |  if_e	jmp	#LR__1081
0fe7c     28 57 02 F6 | 	mov	local08, local05
0fe80     06 56 06 F1 | 	add	local08, #6
0fe84     2B 5F E2 FA | 	rdword	local12, local08
0fe88     29 49 5A F2 | 	cmps	local01, local06 wcz
0fe8c     C8 00 90 3D |  if_ae	jmp	#LR__1080
0fe90     28 49 52 FC | 	wrword	local01, local05
0fe94     28 3F 02 F6 | 	mov	arg01, local05
0fe98     24 59 02 F6 | 	mov	local09, local01
0fe9c     04 58 66 F0 | 	shl	local09, #4
0fea0     2C 3F 02 F1 | 	add	arg01, local09
0fea4     29 57 02 F6 | 	mov	local08, local06
0fea8     24 57 82 F1 | 	sub	local08, local01
0feac     1F 57 52 FC | 	wrword	local08, arg01
0feb0     1F 57 02 F6 | 	mov	local08, arg01
0feb4     02 56 06 F1 | 	add	local08, #2
0feb8     36 00 80 FF 
0febc     2B 1F 59 FC | 	wrword	##27791, local08
0fec0     28 41 0A F6 | 	mov	arg02, local05 wz
0fec4     00 16 06 A6 |  if_e	mov	result1, #0
0fec8     26 41 82 51 |  if_ne	sub	arg02, local03
0fecc     04 40 46 50 |  if_ne	shr	arg02, #4
0fed0     20 17 02 56 |  if_ne	mov	result1, arg02
0fed4     1F 5D 02 F6 | 	mov	local11, arg01
0fed8     04 5C 06 F1 | 	add	local11, #4
0fedc     2E 17 52 FC | 	wrword	result1, local11
0fee0     28 57 02 F6 | 	mov	local08, local05
0fee4     06 56 06 F1 | 	add	local08, #6
0fee8     1F 59 02 F6 | 	mov	local09, arg01
0feec     2B 5B E2 FA | 	rdword	local10, local08
0fef0     06 58 06 F1 | 	add	local09, #6
0fef4     2C 5B 52 FC | 	wrword	local10, local09
0fef8     1F 61 02 F6 | 	mov	local13, arg01
0fefc     30 41 0A F6 | 	mov	arg02, local13 wz
0ff00     00 16 06 A6 |  if_e	mov	result1, #0
0ff04     26 41 82 51 |  if_ne	sub	arg02, local03
0ff08     04 40 46 50 |  if_ne	shr	arg02, #4
0ff0c     20 17 02 56 |  if_ne	mov	result1, arg02
0ff10     0B 5F 02 F6 | 	mov	local12, result1
0ff14     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
0ff18     0B 63 0A F6 | 	mov	local14, result1 wz
0ff1c     38 00 90 AD |  if_e	jmp	#LR__1079
0ff20     27 63 5A F2 | 	cmps	local14, local04 wcz
0ff24     30 00 90 3D |  if_ae	jmp	#LR__1079
0ff28     26 57 02 F6 | 	mov	local08, local03
0ff2c     30 59 02 F6 | 	mov	local09, local13
0ff30     2B 3F 02 F6 | 	mov	arg01, local08
0ff34     2C 41 0A F6 | 	mov	arg02, local09 wz
0ff38     00 16 06 A6 |  if_e	mov	result1, #0
0ff3c     1F 41 82 51 |  if_ne	sub	arg02, arg01
0ff40     04 40 46 50 |  if_ne	shr	arg02, #4
0ff44     20 17 02 56 |  if_ne	mov	result1, arg02
0ff48     0B 5B 02 F6 | 	mov	local10, result1
0ff4c     31 5D 02 F6 | 	mov	local11, local14
0ff50     04 5C 06 F1 | 	add	local11, #4
0ff54     2E 5B 52 FC | 	wrword	local10, local11
0ff58                 | LR__1079
0ff58                 | LR__1080
0ff58     06 54 06 F1 | 	add	local07, #6
0ff5c     2A 5F 52 FC | 	wrword	local12, local07
0ff60     36 00 00 FF 
0ff64     80 56 06 F6 | 	mov	local08, ##27776
0ff68     25 57 42 F5 | 	or	local08, local02
0ff6c     01 16 62 FD | 	cogid	result1
0ff70     0B 57 42 F5 | 	or	local08, result1
0ff74     28 5B 02 F6 | 	mov	local10, local05
0ff78     02 5A 06 F1 | 	add	local10, #2
0ff7c     2D 57 52 FC | 	wrword	local08, local10
0ff80     26 57 02 F6 | 	mov	local08, local03
0ff84     08 56 06 F1 | 	add	local08, #8
0ff88     28 59 02 F6 | 	mov	local09, local05
0ff8c     2B 5B E2 FA | 	rdword	local10, local08
0ff90     06 58 06 F1 | 	add	local09, #6
0ff94     2C 5B 52 FC | 	wrword	local10, local09
0ff98     28 41 0A F6 | 	mov	arg02, local05 wz
0ff9c     00 16 06 A6 |  if_e	mov	result1, #0
0ffa0     26 41 82 51 |  if_ne	sub	arg02, local03
0ffa4     04 40 46 50 |  if_ne	shr	arg02, #4
0ffa8     20 17 02 56 |  if_ne	mov	result1, arg02
0ffac     08 4C 06 F1 | 	add	local03, #8
0ffb0     26 17 52 FC | 	wrword	result1, local03
0ffb4     28 17 02 F6 | 	mov	result1, local05
0ffb8     08 16 06 F1 | 	add	result1, #8
0ffbc     00 C0 31 FF 
0ffc0     00 16 46 F5 | 	or	result1, ##1669332992
0ffc4                 | LR__1081
0ffc4     D0 F0 03 F6 | 	mov	ptra, fp
0ffc8     E0 00 A0 FD | 	call	#popregs_
0ffcc                 | __system___gc_tryalloc_ret
0ffcc     2D 00 64 FD | 	ret
0ffd0                 | 
0ffd0                 | __system___gc_errmsg
0ffd0     02 9C 05 F6 | 	mov	COUNT_, #2
0ffd4     D1 00 A0 FD | 	call	#pushregs_
0ffd8     1F 49 02 F6 | 	mov	local01, arg01
0ffdc                 | LR__1082
0ffdc     24 4B CA FA | 	rdbyte	local02, local01 wz
0ffe0     01 48 06 F1 | 	add	local01, #1
0ffe4     0C 00 90 AD |  if_e	jmp	#LR__1083
0ffe8     25 3F 02 F6 | 	mov	arg01, local02
0ffec     E0 DC BF FD | 	call	#__system___tx
0fff0     E8 FF 9F FD | 	jmp	#LR__1082
0fff4                 | LR__1083
0fff4     00 16 06 F6 | 	mov	result1, #0
0fff8     D0 F0 03 F6 | 	mov	ptra, fp
0fffc     E0 00 A0 FD | 	call	#popregs_
10000                 | __system___gc_errmsg_ret
10000     2D 00 64 FD | 	ret
10004                 | 
10004                 | __system___gc_alloc_managed
10004     02 9C 05 F6 | 	mov	COUNT_, #2
10008     D1 00 A0 FD | 	call	#pushregs_
1000c     1F 49 02 F6 | 	mov	local01, arg01
10010     00 40 06 F6 | 	mov	arg02, #0
10014     30 00 B0 FD | 	call	#__system___gc_doalloc
10018     0B 4B 0A F6 | 	mov	local02, result1 wz
1001c     18 00 90 5D |  if_ne	jmp	#LR__1084
10020     00 48 5E F2 | 	cmps	local01, #0 wcz
10024     10 00 90 ED |  if_be	jmp	#LR__1084
10028     87 00 00 FF 
1002c     6E 3F 06 F6 | 	mov	arg01, ##@LR__1180
10030     9C FF BF FD | 	call	#__system___gc_errmsg
10034     04 00 90 FD | 	jmp	#LR__1085
10038                 | LR__1084
10038     25 17 02 F6 | 	mov	result1, local02
1003c                 | LR__1085
1003c     D0 F0 03 F6 | 	mov	ptra, fp
10040     E0 00 A0 FD | 	call	#popregs_
10044                 | __system___gc_alloc_managed_ret
10044     2D 00 64 FD | 	ret
10048                 | 
10048                 | __system___gc_doalloc
10048     06 9C 05 F6 | 	mov	COUNT_, #6
1004c     D1 00 A0 FD | 	call	#pushregs_
10050     1F 49 0A F6 | 	mov	local01, arg01 wz
10054     20 4B 02 F6 | 	mov	local02, arg02
10058     00 16 06 A6 |  if_e	mov	result1, #0
1005c     94 00 90 AD |  if_e	jmp	#LR__1093
10060     17 48 06 F1 | 	add	local01, #23
10064     0F 48 26 F5 | 	andn	local01, #15
10068     04 48 46 F0 | 	shr	local01, #4
1006c     14 0A 06 F1 | 	add	ptr___system__dat__, #20
10070     05 3F 02 F6 | 	mov	arg01, ptr___system__dat__
10074     14 0A 86 F1 | 	sub	ptr___system__dat__, #20
10078     1C DC BF FD | 	call	#__system___lockmem
1007c     24 3F 02 F6 | 	mov	arg01, local01
10080     25 41 02 F6 | 	mov	arg02, local02
10084     68 FD BF FD | 	call	#__system___gc_tryalloc
10088     0B 4D 0A F6 | 	mov	local03, result1 wz
1008c     14 00 90 5D |  if_ne	jmp	#LR__1086
10090     8C 03 B0 FD | 	call	#__system___gc_docollect
10094     24 3F 02 F6 | 	mov	arg01, local01
10098     25 41 02 F6 | 	mov	arg02, local02
1009c     50 FD BF FD | 	call	#__system___gc_tryalloc
100a0     0B 4D 02 F6 | 	mov	local03, result1
100a4                 | LR__1086
100a4     14 0A 06 F1 | 	add	ptr___system__dat__, #20
100a8     05 3F 02 F6 | 	mov	arg01, ptr___system__dat__
100ac     14 0A 86 F1 | 	sub	ptr___system__dat__, #20
100b0     1F 01 68 FC | 	wrlong	#0, arg01
100b4     00 4C 0E F2 | 	cmp	local03, #0 wz
100b8     34 00 90 AD |  if_e	jmp	#LR__1092
100bc     04 48 66 F0 | 	shl	local01, #4
100c0     08 48 86 F1 | 	sub	local01, #8
100c4     24 4F 52 F6 | 	abs	local04, local01 wc
100c8     02 4E 46 F0 | 	shr	local04, #2
100cc     27 4F 62 C6 |  if_b	neg	local04, local04
100d0     27 51 0A F6 | 	mov	local05, local04 wz
100d4     26 53 02 F6 | 	mov	local06, local03
100d8     14 00 90 AD |  if_e	jmp	#LR__1091
100dc     2C FF 9E FE | 	loc	pa,	#(@LR__1089-@LR__1087)
100e0     B4 00 A0 FD | 	call	#FCACHE_LOAD_
100e4                 | LR__1087
100e4     28 05 D8 FC | 	rep	@LR__1090, local05
100e8                 | LR__1088
100e8     29 01 68 FC | 	wrlong	#0, local06
100ec     04 52 06 F1 | 	add	local06, #4
100f0                 | LR__1089
100f0                 | LR__1090
100f0                 | LR__1091
100f0                 | LR__1092
100f0     26 17 02 F6 | 	mov	result1, local03
100f4                 | LR__1093
100f4     D0 F0 03 F6 | 	mov	ptra, fp
100f8     E0 00 A0 FD | 	call	#popregs_
100fc                 | __system___gc_doalloc_ret
100fc     2D 00 64 FD | 	ret
10100                 | 
10100                 | __system___gc_isvalidptr
10100     21 29 02 F6 | 	mov	_var01, arg03
10104     14 2B 02 F6 | 	mov	_var02, _var01
10108     00 F8 7F FF 
1010c     00 2A 06 F5 | 	and	_var02, ##-1048576
10110     00 C0 31 FF 
10114     00 2A 0E F2 | 	cmp	_var02, ##1669332992 wz
10118     00 16 06 56 |  if_ne	mov	result1, #0
1011c     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
10120     08 28 86 F1 | 	sub	_var01, #8
10124     00 F8 7F FF 
10128     00 28 26 F5 | 	andn	_var01, ##-1048576
1012c     1F 29 5A F2 | 	cmps	_var01, arg01 wcz
10130     08 00 90 CD |  if_b	jmp	#LR__1094
10134     20 29 5A F2 | 	cmps	_var01, arg02 wcz
10138     08 00 90 CD |  if_b	jmp	#LR__1095
1013c                 | LR__1094
1013c     00 16 06 F6 | 	mov	result1, #0
10140     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
10144                 | LR__1095
10144     14 2B 02 F6 | 	mov	_var02, _var01
10148     1F 2B 62 F5 | 	xor	_var02, arg01
1014c     0F 2A 0E F5 | 	and	_var02, #15 wz
10150     00 16 06 56 |  if_ne	mov	result1, #0
10154     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
10158     14 2B 02 F6 | 	mov	_var02, _var01
1015c     02 2A 06 F1 | 	add	_var02, #2
10160     15 2B E2 FA | 	rdword	_var02, _var02
10164     7F 00 00 FF 
10168     C0 2B 06 F5 | 	and	_var02, ##65472
1016c     36 00 00 FF 
10170     80 2A 0E F2 | 	cmp	_var02, ##27776 wz
10174     00 16 06 56 |  if_ne	mov	result1, #0
10178     14 17 02 A6 |  if_e	mov	result1, _var01
1017c                 | __system___gc_isvalidptr_ret
1017c     2D 00 64 FD | 	ret
10180                 | 
10180                 | __system___gc_free
10180     01 9C 05 F6 | 	mov	COUNT_, #1
10184     D1 00 A0 FD | 	call	#pushregs_
10188     1F 49 02 F6 | 	mov	local01, arg01
1018c     7C FB BF FD | 	call	#__system___gc_ptrs
10190     0B 3F 02 F6 | 	mov	arg01, result1
10194     0C 41 02 F6 | 	mov	arg02, result2
10198     24 43 02 F6 | 	mov	arg03, local01
1019c     60 FF BF FD | 	call	#__system___gc_isvalidptr
101a0     0B 49 0A F6 | 	mov	local01, result1 wz
101a4     28 00 90 AD |  if_e	jmp	#LR__1096
101a8     14 0A 06 F1 | 	add	ptr___system__dat__, #20
101ac     05 3F 02 F6 | 	mov	arg01, ptr___system__dat__
101b0     14 0A 86 F1 | 	sub	ptr___system__dat__, #20
101b4     E0 DA BF FD | 	call	#__system___lockmem
101b8     24 3F 02 F6 | 	mov	arg01, local01
101bc     1C 00 B0 FD | 	call	#__system___gc_dofree
101c0     14 0A 06 F1 | 	add	ptr___system__dat__, #20
101c4     05 3F 02 F6 | 	mov	arg01, ptr___system__dat__
101c8     14 0A 86 F1 | 	sub	ptr___system__dat__, #20
101cc     1F 01 68 FC | 	wrlong	#0, arg01
101d0                 | LR__1096
101d0     D0 F0 03 F6 | 	mov	ptra, fp
101d4     E0 00 A0 FD | 	call	#popregs_
101d8                 | __system___gc_free_ret
101d8     2D 00 64 FD | 	ret
101dc                 | 
101dc                 | __system___gc_dofree
101dc     0D 9C 05 F6 | 	mov	COUNT_, #13
101e0     D1 00 A0 FD | 	call	#pushregs_
101e4     1F 49 02 F6 | 	mov	local01, arg01
101e8     20 FB BF FD | 	call	#__system___gc_ptrs
101ec     0B 4B 02 F6 | 	mov	local02, result1
101f0     0C 4D 02 F6 | 	mov	local03, result2
101f4     24 4F 02 F6 | 	mov	local04, local01
101f8     02 4E 06 F1 | 	add	local04, #2
101fc     36 00 80 FF 
10200     27 1F 59 FC | 	wrword	##27791, local04
10204     24 51 02 F6 | 	mov	local05, local01
10208     24 3F 02 F6 | 	mov	arg01, local01
1020c     A4 FB BF FD | 	call	#__system___gc_nextBlockPtr
10210     0B 53 02 F6 | 	mov	local06, result1
10214     34 FE 9E FE | 	loc	pa,	#(@LR__1098-@LR__1097)
10218     B4 00 A0 FD | 	call	#FCACHE_LOAD_
1021c                 | LR__1097
1021c     04 50 06 F1 | 	add	local05, #4
10220     28 41 EA FA | 	rdword	arg02, local05 wz
10224     25 3F 02 F6 | 	mov	arg01, local02
10228     00 16 06 A6 |  if_e	mov	result1, #0
1022c     04 40 66 50 |  if_ne	shl	arg02, #4
10230     20 3F 02 51 |  if_ne	add	arg01, arg02
10234     1F 17 02 56 |  if_ne	mov	result1, arg01
10238     0B 51 0A F6 | 	mov	local05, result1 wz
1023c     28 00 90 AD |  if_e	jmp	#LR__1099
10240     28 3F 02 F6 | 	mov	arg01, local05
10244     00 54 06 F6 | 	mov	local07, #0
10248     02 3E 06 F1 | 	add	arg01, #2
1024c     1F 57 E2 FA | 	rdword	local08, arg01
10250     36 00 00 FF 
10254     8F 56 0E F2 | 	cmp	local08, ##27791 wz
10258     01 54 66 A6 |  if_e	neg	local07, #1
1025c     2A 17 02 F6 | 	mov	result1, local07
10260     0B 59 0A F6 | 	mov	local09, result1 wz
10264     B4 FF 9F AD |  if_e	jmp	#LR__1097
10268                 | LR__1098
10268                 | LR__1099
10268     00 50 0E F2 | 	cmp	local05, #0 wz
1026c     25 51 02 A6 |  if_e	mov	local05, local02
10270     28 4F 02 F6 | 	mov	local04, local05
10274     06 4E 06 F1 | 	add	local04, #6
10278     24 59 02 F6 | 	mov	local09, local01
1027c     27 5B E2 FA | 	rdword	local10, local04
10280     06 58 06 F1 | 	add	local09, #6
10284     2C 5B 52 FC | 	wrword	local10, local09
10288     24 41 0A F6 | 	mov	arg02, local01 wz
1028c     00 16 06 A6 |  if_e	mov	result1, #0
10290     25 41 82 51 |  if_ne	sub	arg02, local02
10294     04 40 46 50 |  if_ne	shr	arg02, #4
10298     20 17 02 56 |  if_ne	mov	result1, arg02
1029c     0B 5B 02 F6 | 	mov	local10, result1
102a0     28 5D 02 F6 | 	mov	local11, local05
102a4     06 5C 06 F1 | 	add	local11, #6
102a8     2E 5B 52 FC | 	wrword	local10, local11
102ac     25 51 0A F2 | 	cmp	local05, local02 wz
102b0     84 00 90 AD |  if_e	jmp	#LR__1102
102b4     28 3F 02 F6 | 	mov	arg01, local05
102b8     F8 FA BF FD | 	call	#__system___gc_nextBlockPtr
102bc     24 17 0A F2 | 	cmp	result1, local01 wz
102c0     74 00 90 5D |  if_ne	jmp	#LR__1101
102c4     28 4F E2 FA | 	rdword	local04, local05
102c8     24 5D E2 FA | 	rdword	local11, local01
102cc     2E 4F 02 F1 | 	add	local04, local11
102d0     28 4F 52 FC | 	wrword	local04, local05
102d4     24 4F 02 F6 | 	mov	local04, local01
102d8     02 4E 06 F1 | 	add	local04, #2
102dc     27 01 58 FC | 	wrword	#0, local04
102e0     24 3F 02 F6 | 	mov	arg01, local01
102e4     CC FA BF FD | 	call	#__system___gc_nextBlockPtr
102e8     0B 53 02 F6 | 	mov	local06, result1
102ec     26 53 5A F2 | 	cmps	local06, local03 wcz
102f0     20 00 90 3D |  if_ae	jmp	#LR__1100
102f4     28 41 0A F6 | 	mov	arg02, local05 wz
102f8     00 16 06 A6 |  if_e	mov	result1, #0
102fc     25 41 82 51 |  if_ne	sub	arg02, local02
10300     04 40 46 50 |  if_ne	shr	arg02, #4
10304     20 17 02 56 |  if_ne	mov	result1, arg02
10308     29 5D 02 F6 | 	mov	local11, local06
1030c     04 5C 06 F1 | 	add	local11, #4
10310     2E 17 52 FC | 	wrword	result1, local11
10314                 | LR__1100
10314     24 4F 02 F6 | 	mov	local04, local01
10318     06 4E 06 F1 | 	add	local04, #6
1031c     28 59 02 F6 | 	mov	local09, local05
10320     27 5B E2 FA | 	rdword	local10, local04
10324     06 58 06 F1 | 	add	local09, #6
10328     2C 5B 52 FC | 	wrword	local10, local09
1032c     06 48 06 F1 | 	add	local01, #6
10330     24 01 58 FC | 	wrword	#0, local01
10334     28 49 02 F6 | 	mov	local01, local05
10338                 | LR__1101
10338                 | LR__1102
10338     24 3F 02 F6 | 	mov	arg01, local01
1033c     74 FA BF FD | 	call	#__system___gc_nextBlockPtr
10340     0B 5F 0A F6 | 	mov	local12, result1 wz
10344     C8 00 90 AD |  if_e	jmp	#LR__1104
10348     26 5F 5A F2 | 	cmps	local12, local03 wcz
1034c     C0 00 90 3D |  if_ae	jmp	#LR__1104
10350     2F 3F 02 F6 | 	mov	arg01, local12
10354     00 54 06 F6 | 	mov	local07, #0
10358     02 3E 06 F1 | 	add	arg01, #2
1035c     1F 57 E2 FA | 	rdword	local08, arg01
10360     36 00 00 FF 
10364     8F 56 0E F2 | 	cmp	local08, ##27791 wz
10368     01 54 66 A6 |  if_e	neg	local07, #1
1036c     2A 17 0A F6 | 	mov	result1, local07 wz
10370     9C 00 90 AD |  if_e	jmp	#LR__1104
10374     24 51 02 F6 | 	mov	local05, local01
10378     28 4F E2 FA | 	rdword	local04, local05
1037c     2F 49 02 F6 | 	mov	local01, local12
10380     24 5D E2 FA | 	rdword	local11, local01
10384     2E 4F 02 F1 | 	add	local04, local11
10388     28 61 02 F6 | 	mov	local13, local05
1038c     30 4F 52 FC | 	wrword	local04, local13
10390     24 4F 02 F6 | 	mov	local04, local01
10394     06 4E 06 F1 | 	add	local04, #6
10398     28 59 02 F6 | 	mov	local09, local05
1039c     27 5B E2 FA | 	rdword	local10, local04
103a0     06 58 06 F1 | 	add	local09, #6
103a4     2C 5B 52 FC | 	wrword	local10, local09
103a8     24 4F 02 F6 | 	mov	local04, local01
103ac     02 4E 06 F1 | 	add	local04, #2
103b0     27 55 59 FC | 	wrword	#170, local04
103b4     24 4F 02 F6 | 	mov	local04, local01
103b8     06 4E 06 F1 | 	add	local04, #6
103bc     27 01 58 FC | 	wrword	#0, local04
103c0     24 4F 02 F6 | 	mov	local04, local01
103c4     27 3F 02 F6 | 	mov	arg01, local04
103c8     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
103cc     0B 59 02 F6 | 	mov	local09, result1
103d0     2C 53 0A F6 | 	mov	local06, local09 wz
103d4     38 00 90 AD |  if_e	jmp	#LR__1103
103d8     26 53 5A F2 | 	cmps	local06, local03 wcz
103dc     30 00 90 3D |  if_ae	jmp	#LR__1103
103e0     25 4F 02 F6 | 	mov	local04, local02
103e4     28 59 02 F6 | 	mov	local09, local05
103e8     27 3F 02 F6 | 	mov	arg01, local04
103ec     2C 41 0A F6 | 	mov	arg02, local09 wz
103f0     00 16 06 A6 |  if_e	mov	result1, #0
103f4     1F 41 82 51 |  if_ne	sub	arg02, arg01
103f8     04 40 46 50 |  if_ne	shr	arg02, #4
103fc     20 17 02 56 |  if_ne	mov	result1, arg02
10400     0B 5B 02 F6 | 	mov	local10, result1
10404     29 5D 02 F6 | 	mov	local11, local06
10408     04 5C 06 F1 | 	add	local11, #4
1040c     2E 5B 52 FC | 	wrword	local10, local11
10410                 | LR__1103
10410                 | LR__1104
10410     29 17 02 F6 | 	mov	result1, local06
10414     D0 F0 03 F6 | 	mov	ptra, fp
10418     E0 00 A0 FD | 	call	#popregs_
1041c                 | __system___gc_dofree_ret
1041c     2D 00 64 FD | 	ret
10420                 | 
10420                 | __system___gc_docollect
10420     09 9C 05 F6 | 	mov	COUNT_, #9
10424     D1 00 A0 FD | 	call	#pushregs_
10428     E0 F8 BF FD | 	call	#__system___gc_ptrs
1042c     0C 49 02 F6 | 	mov	local01, result2
10430     0B 4B 02 F6 | 	mov	local02, result1
10434     25 3F 02 F6 | 	mov	arg01, local02
10438     78 F9 BF FD | 	call	#__system___gc_nextBlockPtr
1043c     0B 4D 0A F6 | 	mov	local03, result1 wz
10440     01 16 62 FD | 	cogid	result1
10444     0B 4F 02 F6 | 	mov	local04, result1
10448     34 00 90 AD |  if_e	jmp	#LR__1106
1044c                 | LR__1105
1044c     24 4D 5A F2 | 	cmps	local03, local01 wcz
10450     2C 00 90 3D |  if_ae	jmp	#LR__1106
10454     26 51 02 F6 | 	mov	local05, local03
10458     02 50 06 F1 | 	add	local05, #2
1045c     28 53 E2 FA | 	rdword	local06, local05
10460     20 52 26 F5 | 	andn	local06, #32
10464     26 55 02 F6 | 	mov	local07, local03
10468     02 54 06 F1 | 	add	local07, #2
1046c     2A 53 52 FC | 	wrword	local06, local07
10470     26 3F 02 F6 | 	mov	arg01, local03
10474     3C F9 BF FD | 	call	#__system___gc_nextBlockPtr
10478     0B 4D 0A F6 | 	mov	local03, result1 wz
1047c     CC FF 9F 5D |  if_ne	jmp	#LR__1105
10480                 | LR__1106
10480     00 52 06 F6 | 	mov	local06, #0
10484     00 3E 06 F6 | 	mov	arg01, #0
10488     A4 D7 BF FD | 	call	#__system____topofstack
1048c     0B 55 02 F6 | 	mov	local07, result1
10490     29 3F 02 F6 | 	mov	arg01, local06
10494     2A 41 02 F6 | 	mov	arg02, local07
10498     A0 00 B0 FD | 	call	#__system___gc_markhub
1049c     34 01 B0 FD | 	call	#__system___gc_markcog
104a0     25 3F 02 F6 | 	mov	arg01, local02
104a4     0C F9 BF FD | 	call	#__system___gc_nextBlockPtr
104a8     0B 57 0A F6 | 	mov	local08, result1 wz
104ac     10 00 90 5D |  if_ne	jmp	#LR__1107
104b0     87 00 00 FF 
104b4     8B 3F 06 F6 | 	mov	arg01, ##@LR__1181
104b8     14 FB BF FD | 	call	#__system___gc_errmsg
104bc     70 00 90 FD | 	jmp	#LR__1113
104c0                 | LR__1107
104c0                 | LR__1108
104c0     2B 4D 02 F6 | 	mov	local03, local08
104c4     26 3F 02 F6 | 	mov	arg01, local03
104c8     E8 F8 BF FD | 	call	#__system___gc_nextBlockPtr
104cc     0B 57 02 F6 | 	mov	local08, result1
104d0     26 53 02 F6 | 	mov	local06, local03
104d4     02 52 06 F1 | 	add	local06, #2
104d8     29 59 E2 FA | 	rdword	local09, local06
104dc     20 58 CE F7 | 	test	local09, #32 wz
104e0     3C 00 90 5D |  if_ne	jmp	#LR__1111
104e4     2C 51 02 F6 | 	mov	local05, local09
104e8     10 50 0E F5 | 	and	local05, #16 wz
104ec     30 00 90 5D |  if_ne	jmp	#LR__1111
104f0     2C 53 02 F6 | 	mov	local06, local09
104f4     0F 52 06 F5 | 	and	local06, #15
104f8     29 59 02 F6 | 	mov	local09, local06
104fc     27 59 0A F2 | 	cmp	local09, local04 wz
10500     08 00 90 AD |  if_e	jmp	#LR__1109
10504     0E 58 0E F2 | 	cmp	local09, #14 wz
10508     14 00 90 5D |  if_ne	jmp	#LR__1110
1050c                 | LR__1109
1050c     26 53 02 F6 | 	mov	local06, local03
10510     29 3F 02 F6 | 	mov	arg01, local06
10514     C4 FC BF FD | 	call	#__system___gc_dofree
10518     0B 51 02 F6 | 	mov	local05, result1
1051c     28 57 02 F6 | 	mov	local08, local05
10520                 | LR__1110
10520                 | LR__1111
10520     00 56 0E F2 | 	cmp	local08, #0 wz
10524     08 00 90 AD |  if_e	jmp	#LR__1112
10528     24 57 5A F2 | 	cmps	local08, local01 wcz
1052c     90 FF 9F CD |  if_b	jmp	#LR__1108
10530                 | LR__1112
10530                 | LR__1113
10530     D0 F0 03 F6 | 	mov	ptra, fp
10534     E0 00 A0 FD | 	call	#popregs_
10538                 | __system___gc_docollect_ret
10538     2D 00 64 FD | 	ret
1053c                 | 
1053c                 | __system___gc_markhub
1053c     0A 9C 05 F6 | 	mov	COUNT_, #10
10540     D1 00 A0 FD | 	call	#pushregs_
10544     1F 49 02 F6 | 	mov	local01, arg01
10548     20 4B 02 F6 | 	mov	local02, arg02
1054c     BC F7 BF FD | 	call	#__system___gc_ptrs
10550     0B 4D 02 F6 | 	mov	local03, result1
10554     0C 4F 02 F6 | 	mov	local04, result2
10558                 | LR__1114
10558     25 49 5A F2 | 	cmps	local01, local02 wcz
1055c     68 00 90 3D |  if_ae	jmp	#LR__1115
10560     24 43 02 FB | 	rdlong	arg03, local01
10564     04 48 06 F1 | 	add	local01, #4
10568     26 3F 02 F6 | 	mov	arg01, local03
1056c     27 41 02 F6 | 	mov	arg02, local04
10570     8C FB BF FD | 	call	#__system___gc_isvalidptr
10574     0B 51 0A F6 | 	mov	local05, result1 wz
10578     DC FF 9F AD |  if_e	jmp	#LR__1114
1057c     28 3F 02 F6 | 	mov	arg01, local05
10580     00 52 06 F6 | 	mov	local06, #0
10584     02 3E 06 F1 | 	add	arg01, #2
10588     1F 55 E2 FA | 	rdword	local07, arg01
1058c     36 00 00 FF 
10590     8F 54 0E F2 | 	cmp	local07, ##27791 wz
10594     01 52 66 A6 |  if_e	neg	local06, #1
10598     29 17 02 F6 | 	mov	result1, local06
1059c     0B 57 0A F6 | 	mov	local08, result1 wz
105a0     B4 FF 9F 5D |  if_ne	jmp	#LR__1114
105a4     28 59 02 F6 | 	mov	local09, local05
105a8     02 58 06 F1 | 	add	local09, #2
105ac     2C 5B E2 FA | 	rdword	local10, local09
105b0     0F 5A 26 F5 | 	andn	local10, #15
105b4     2E 5A 46 F5 | 	or	local10, #46
105b8     28 59 02 F6 | 	mov	local09, local05
105bc     02 58 06 F1 | 	add	local09, #2
105c0     2C 5B 52 FC | 	wrword	local10, local09
105c4     90 FF 9F FD | 	jmp	#LR__1114
105c8                 | LR__1115
105c8     D0 F0 03 F6 | 	mov	ptra, fp
105cc     E0 00 A0 FD | 	call	#popregs_
105d0                 | __system___gc_markhub_ret
105d0     2D 00 64 FD | 	ret
105d4                 | 
105d4                 | __system___gc_markcog
105d4     06 9C 05 F6 | 	mov	COUNT_, #6
105d8     D1 00 A0 FD | 	call	#pushregs_
105dc     2C F7 BF FD | 	call	#__system___gc_ptrs
105e0     0B 49 02 F6 | 	mov	local01, result1
105e4     0C 4B 02 F6 | 	mov	local02, result2
105e8     00 4C 06 F6 | 	mov	local03, #0
105ec                 | LR__1116
105ec     F0 4F 06 F6 | 	mov	local04, #496
105f0     26 4F 82 F1 | 	sub	local04, local03
105f4     F0 4F 06 F1 | 	add	local04, #496
105f8                 | 	'.live	local04
105f8     00 4E 96 F9 | 	alts	local04, #0
105fc     27 51 02 F6 | 	mov	local05, local04
10600     24 3F 02 F6 | 	mov	arg01, local01
10604     25 41 02 F6 | 	mov	arg02, local02
10608     28 43 02 F6 | 	mov	arg03, local05
1060c     F0 FA BF FD | 	call	#__system___gc_isvalidptr
10610     0B 51 0A F6 | 	mov	local05, result1 wz
10614     18 00 90 AD |  if_e	jmp	#LR__1117
10618     28 53 02 F6 | 	mov	local06, local05
1061c     02 52 06 F1 | 	add	local06, #2
10620     29 4F E2 FA | 	rdword	local04, local06
10624     20 4E 46 F5 | 	or	local04, #32
10628     02 50 06 F1 | 	add	local05, #2
1062c     28 4F 52 FC | 	wrword	local04, local05
10630                 | LR__1117
10630     01 4C 06 F1 | 	add	local03, #1
10634     F0 4D 5E F2 | 	cmps	local03, #496 wcz
10638     B0 FF 9F CD |  if_b	jmp	#LR__1116
1063c     D0 F0 03 F6 | 	mov	ptra, fp
10640     E0 00 A0 FD | 	call	#popregs_
10644                 | __system___gc_markcog_ret
10644     2D 00 64 FD | 	ret
10648                 | 
10648                 | __system____default_getc
10648                 | __system____default_getc_ret
10648     2D 00 64 FD | 	ret
1064c                 | 
1064c                 | __system____default_putc
1064c                 | __system____default_putc_ret
1064c     2D 00 64 FD | 	ret
10650                 | 
10650                 | __system____default_putc_terminal
10650                 | __system____default_putc_terminal_ret
10650     2D 00 64 FD | 	ret
10654                 | 
10654                 | __system____default_flush
10654                 | __system____default_flush_ret
10654     2D 00 64 FD | 	ret
10658                 | 
10658                 | __system____getftab
10658     0A 3E 1E F2 | 	cmp	arg01, #10 wcz
1065c     00 16 06 36 |  if_ae	mov	result1, #0
10660     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
10664     1F 17 02 F6 | 	mov	result1, arg01
10668     01 16 66 F0 | 	shl	result1, #1
1066c     1F 17 02 F1 | 	add	result1, arg01
10670     04 16 66 F0 | 	shl	result1, #4
10674     01 00 00 FF 
10678     44 0A 06 F1 | 	add	ptr___system__dat__, ##580
1067c     05 17 02 F1 | 	add	result1, ptr___system__dat__
10680     01 00 00 FF 
10684     44 0A 86 F1 | 	sub	ptr___system__dat__, ##580
10688                 | __system____getftab_ret
10688     2D 00 64 FD | 	ret
1068c                 | 
1068c                 | __system__strncpy
1068c     1F 29 02 F6 | 	mov	_var01, arg01
10690                 | LR__1118
10690     01 42 86 F1 | 	sub	arg03, #1
10694     00 42 5E F2 | 	cmps	arg03, #0 wcz
10698     18 00 90 CD |  if_b	jmp	#LR__1119
1069c     20 2B C2 FA | 	rdbyte	_var02, arg02
106a0     14 2B 42 FC | 	wrbyte	_var02, _var01
106a4     01 40 06 F1 | 	add	arg02, #1
106a8     14 2D CA FA | 	rdbyte	_var03, _var01 wz
106ac     01 28 06 F1 | 	add	_var01, #1
106b0     DC FF 9F 5D |  if_ne	jmp	#LR__1118
106b4                 | LR__1119
106b4     5C F9 9E FE | 	loc	pa,	#(@LR__1121-@LR__1120)
106b8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
106bc                 | LR__1120
106bc     01 42 86 F1 | 	sub	arg03, #1
106c0     00 42 5E F2 | 	cmps	arg03, #0 wcz
106c4     14 01 48 3C |  if_ae	wrbyte	#0, _var01
106c8     01 28 06 31 |  if_ae	add	_var01, #1
106cc     EC FF 9F 3D |  if_ae	jmp	#LR__1120
106d0                 | LR__1121
106d0     1F 17 02 F6 | 	mov	result1, arg01
106d4                 | __system__strncpy_ret
106d4     2D 00 64 FD | 	ret
106d8                 | 
106d8                 | __system__strncat
106d8     1F 29 02 F6 | 	mov	_var01, arg01
106dc     20 2B 02 F6 | 	mov	_var02, arg02
106e0     21 2D 02 F6 | 	mov	_var03, arg03
106e4     15 2F 0A F6 | 	mov	_var04, _var02 wz
106e8     68 00 90 AD |  if_e	jmp	#LR__1126
106ec     00 2C 1E F2 | 	cmp	_var03, #0 wcz
106f0     60 00 90 ED |  if_be	jmp	#LR__1126
106f4     14 31 02 F6 | 	mov	_var05, _var01
106f8     50 F9 9E FE | 	loc	pa,	#(@LR__1124-@LR__1122)
106fc     B4 00 A0 FD | 	call	#FCACHE_LOAD_
10700                 | LR__1122
10700     18 33 CA FA | 	rdbyte	_var06, _var05 wz
10704     01 30 06 51 |  if_ne	add	_var05, #1
10708     F4 FF 9F 5D |  if_ne	jmp	#LR__1122
1070c     16 35 02 F6 | 	mov	_var07, _var03
10710                 | LR__1123
10710     17 37 02 F6 | 	mov	_var08, _var04
10714     17 39 02 F6 | 	mov	_var09, _var04
10718     01 38 06 F1 | 	add	_var09, #1
1071c     1C 2F 02 F6 | 	mov	_var04, _var09
10720     1B 3B C2 FA | 	rdbyte	_var10, _var08
10724     1D 33 02 F6 | 	mov	_var06, _var10
10728     07 32 4E F7 | 	zerox	_var06, #7 wz
1072c     1C 00 90 AD |  if_e	jmp	#LR__1125
10730     1A 3D 02 F6 | 	mov	_var11, _var07
10734     01 3C 86 F1 | 	sub	_var11, #1
10738     1E 35 02 F6 | 	mov	_var07, _var11
1073c     00 34 5E F2 | 	cmps	_var07, #0 wcz
10740     18 3B 42 3C |  if_ae	wrbyte	_var10, _var05
10744     01 30 06 31 |  if_ae	add	_var05, #1
10748     C4 FF 9F 3D |  if_ae	jmp	#LR__1123
1074c                 | LR__1124
1074c                 | LR__1125
1074c     00 32 06 F6 | 	mov	_var06, #0
10750     18 01 48 FC | 	wrbyte	#0, _var05
10754                 | LR__1126
10754     14 17 02 F6 | 	mov	result1, _var01
10758                 | __system__strncat_ret
10758     2D 00 64 FD | 	ret
1075c                 | 
1075c                 | __system__strncmp
1075c     1F 29 0A F6 | 	mov	_var01, arg01 wz
10760     20 2B 02 F6 | 	mov	_var02, arg02
10764     21 2D 02 F6 | 	mov	_var03, arg03
10768     14 00 90 5D |  if_ne	jmp	#LR__1127
1076c     00 2A 0E F2 | 	cmp	_var02, #0 wz
10770     01 2E 66 56 |  if_ne	neg	_var04, #1
10774     00 2E 06 A6 |  if_e	mov	_var04, #0
10778     17 17 02 F6 | 	mov	result1, _var04
1077c     8C 00 90 FD | 	jmp	#__system__strncmp_ret
10780                 | LR__1127
10780     00 2A 0E F2 | 	cmp	_var02, #0 wz
10784     01 16 06 A6 |  if_e	mov	result1, #1
10788     80 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1078c     16 31 02 F6 | 	mov	_var05, _var03
10790     AC F8 9E FE | 	loc	pa,	#(@LR__1129-@LR__1128)
10794     B4 00 A0 FD | 	call	#FCACHE_LOAD_
10798                 | LR__1128
10798     14 33 C2 FA | 	rdbyte	_var06, _var01
1079c     15 35 02 F6 | 	mov	_var07, _var02
107a0     15 37 02 F6 | 	mov	_var08, _var02
107a4     01 36 06 F1 | 	add	_var08, #1
107a8     1B 2B 02 F6 | 	mov	_var02, _var08
107ac     1A 39 C2 FA | 	rdbyte	_var09, _var07
107b0     18 2F 02 F6 | 	mov	_var04, _var05
107b4     01 2E 86 F1 | 	sub	_var04, #1
107b8     17 31 02 F6 | 	mov	_var05, _var04
107bc     00 30 5E F2 | 	cmps	_var05, #0 wcz
107c0     01 28 06 F1 | 	add	_var01, #1
107c4     10 00 90 CD |  if_b	jmp	#LR__1130
107c8     00 32 0E F2 | 	cmp	_var06, #0 wz
107cc     08 00 90 AD |  if_e	jmp	#LR__1130
107d0     1C 33 0A F2 | 	cmp	_var06, _var09 wz
107d4     C0 FF 9F AD |  if_e	jmp	#LR__1128
107d8                 | LR__1129
107d8                 | LR__1130
107d8     00 30 5E F2 | 	cmps	_var05, #0 wcz
107dc     00 16 06 C6 |  if_b	mov	result1, #0
107e0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
107e4     1C 33 0A F2 | 	cmp	_var06, _var09 wz
107e8     00 16 06 A6 |  if_e	mov	result1, #0
107ec     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
107f0     00 32 0E F2 | 	cmp	_var06, #0 wz
107f4     01 16 66 A6 |  if_e	neg	result1, #1
107f8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
107fc     00 38 0E F2 | 	cmp	_var09, #0 wz
10800     01 16 06 A6 |  if_e	mov	result1, #1
10804     19 17 02 56 |  if_ne	mov	result1, _var06
10808     1C 17 82 51 |  if_ne	sub	result1, _var09
1080c                 | __system__strncmp_ret
1080c     2D 00 64 FD | 	ret
10810                 | 
10810                 | __system___strrev
10810     1F 29 CA FA | 	rdbyte	_var01, arg01 wz
10814     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
10818     1F 2B 02 F6 | 	mov	_var02, arg01
1081c     EC F7 9E FE | 	loc	pa,	#(@LR__1132-@LR__1131)
10820     B4 00 A0 FD | 	call	#FCACHE_LOAD_
10824                 | LR__1131
10824     15 29 CA FA | 	rdbyte	_var01, _var02 wz
10828     01 2A 06 51 |  if_ne	add	_var02, #1
1082c     F4 FF 9F 5D |  if_ne	jmp	#LR__1131
10830                 | LR__1132
10830     01 2A 86 F1 | 	sub	_var02, #1
10834                 | LR__1133
10834     1F 2B 5A F2 | 	cmps	_var02, arg01 wcz
10838     1C 00 90 ED |  if_be	jmp	#LR__1134
1083c     1F 2D C2 FA | 	rdbyte	_var03, arg01
10840     15 2F C2 FA | 	rdbyte	_var04, _var02
10844     1F 2F 42 FC | 	wrbyte	_var04, arg01
10848     15 2D 42 FC | 	wrbyte	_var03, _var02
1084c     01 3E 06 F1 | 	add	arg01, #1
10850     01 2A 86 F1 | 	sub	_var02, #1
10854     DC FF 9F FD | 	jmp	#LR__1133
10858                 | LR__1134
10858                 | __system___strrev_ret
10858     2D 00 64 FD | 	ret
1085c                 | 
1085c                 | __system___fmtpad
1085c     0C 9C 05 F6 | 	mov	COUNT_, #12
10860     D1 00 A0 FD | 	call	#pushregs_
10864     1F 49 02 F6 | 	mov	local01, arg01
10868     20 4B 02 F6 | 	mov	local02, arg02
1086c     22 4D 02 F6 | 	mov	local03, arg04
10870     25 4F EA F8 | 	getbyte	local04, local02, #1
10874     16 4A 46 F0 | 	shr	local02, #22
10878     03 4A 0E F5 | 	and	local02, #3 wz
1087c     00 50 06 F6 | 	mov	local05, #0
10880     01 4A 06 A6 |  if_e	mov	local02, #1
10884     26 4B CA F7 | 	test	local02, local03 wz
10888     00 16 06 A6 |  if_e	mov	result1, #0
1088c     84 00 90 AD |  if_e	jmp	#LR__1138
10890     21 4F 82 F1 | 	sub	local04, arg03
10894     27 53 02 F6 | 	mov	local06, local04
10898     00 52 5E F2 | 	cmps	local06, #0 wcz
1089c     00 16 06 E6 |  if_be	mov	result1, #0
108a0     70 00 90 ED |  if_be	jmp	#LR__1138
108a4     03 4A 0E F2 | 	cmp	local02, #3 wz
108a8     18 00 90 5D |  if_ne	jmp	#LR__1135
108ac     01 4C 0E F2 | 	cmp	local03, #1 wz
108b0     6E 54 62 FD | 	wrz	local07
108b4     2A 53 02 F1 | 	add	local06, local07
108b8     29 53 52 F6 | 	abs	local06, local06 wc
108bc     01 52 46 F0 | 	shr	local06, #1
108c0     29 53 62 C6 |  if_b	neg	local06, local06
108c4                 | LR__1135
108c4     00 56 06 F6 | 	mov	local08, #0
108c8                 | LR__1136
108c8     29 57 5A F2 | 	cmps	local08, local06 wcz
108cc     40 00 90 3D |  if_ae	jmp	#LR__1137
108d0     24 59 02 F6 | 	mov	local09, local01
108d4     2C 55 02 FB | 	rdlong	local07, local09
108d8     04 58 06 F1 | 	add	local09, #4
108dc     2C 5B 02 FB | 	rdlong	local10, local09
108e0     20 3E 06 F6 | 	mov	arg01, #32
108e4     FE 5C 02 F6 | 	mov	local11, objptr
108e8     2A FD 01 F6 | 	mov	objptr, local07
108ec     2D 5A 62 FD | 	call	local10
108f0     2E FD 01 F6 | 	mov	objptr, local11
108f4     0B 5F 02 F6 | 	mov	local12, result1
108f8     00 5E 5E F2 | 	cmps	local12, #0 wcz
108fc     2F 17 02 C6 |  if_b	mov	result1, local12
10900     10 00 90 CD |  if_b	jmp	#LR__1138
10904     2F 51 02 F1 | 	add	local05, local12
10908     01 56 06 F1 | 	add	local08, #1
1090c     B8 FF 9F FD | 	jmp	#LR__1136
10910                 | LR__1137
10910     28 17 02 F6 | 	mov	result1, local05
10914                 | LR__1138
10914     D0 F0 03 F6 | 	mov	ptra, fp
10918     E0 00 A0 FD | 	call	#popregs_
1091c                 | __system___fmtpad_ret
1091c     2D 00 64 FD | 	ret
10920                 | 
10920                 | __system___uitoa
10920     09 9C 05 F6 | 	mov	COUNT_, #9
10924     D1 00 A0 FD | 	call	#pushregs_
10928     1F 49 02 F6 | 	mov	local01, arg01
1092c     20 4B 02 F6 | 	mov	local02, arg02
10930     21 4D 02 F6 | 	mov	local03, arg03
10934     22 4F 02 F6 | 	mov	local04, arg04
10938     23 51 0A F6 | 	mov	local05, arg05 wz
1093c     24 53 02 F6 | 	mov	local06, local01
10940     00 54 06 F6 | 	mov	local07, #0
10944     37 56 06 56 |  if_ne	mov	local08, #55
10948     57 56 06 A6 |  if_e	mov	local08, #87
1094c                 | LR__1139
1094c     25 9D 02 F6 | 	mov	muldiva_, local02
10950     26 9F 02 F6 | 	mov	muldivb_, local03
10954     ED 00 A0 FD | 	call	#unsdivide_
10958     4E 59 02 F6 | 	mov	local09, muldiva_
1095c     0A 58 1E F2 | 	cmp	local09, #10 wcz
10960     30 58 06 C1 |  if_b	add	local09, #48
10964     2B 59 02 31 |  if_ae	add	local09, local08
10968     29 59 42 FC | 	wrbyte	local09, local06
1096c     25 9D 02 F6 | 	mov	muldiva_, local02
10970     26 9F 02 F6 | 	mov	muldivb_, local03
10974     01 52 06 F1 | 	add	local06, #1
10978     ED 00 A0 FD | 	call	#unsdivide_
1097c     4F 4B 0A F6 | 	mov	local02, muldivb_ wz
10980     01 54 06 F1 | 	add	local07, #1
10984     C4 FF 9F 5D |  if_ne	jmp	#LR__1139
10988     27 55 1A F2 | 	cmp	local07, local04 wcz
1098c     BC FF 9F CD |  if_b	jmp	#LR__1139
10990     29 01 48 FC | 	wrbyte	#0, local06
10994     24 3F 02 F6 | 	mov	arg01, local01
10998     74 FE BF FD | 	call	#__system___strrev
1099c     2A 17 02 F6 | 	mov	result1, local07
109a0     D0 F0 03 F6 | 	mov	ptra, fp
109a4     E0 00 A0 FD | 	call	#popregs_
109a8                 | __system___uitoa_ret
109a8     2D 00 64 FD | 	ret
109ac                 | 
109ac                 | __system__disassemble_0794
109ac     16 9C 05 F6 | 	mov	COUNT_, #22
109b0     D1 00 A0 FD | 	call	#pushregs_
109b4     1F 49 02 F6 | 	mov	local01, arg01
109b8     20 4B 02 F6 | 	mov	local02, arg02
109bc     21 4D 02 F6 | 	mov	local03, arg03
109c0     22 4F 02 F6 | 	mov	local04, arg04
109c4     23 51 02 F6 | 	mov	local05, arg05
109c8     28 3F 02 F6 | 	mov	arg01, local05
109cc     CC EB BF FD | 	call	#__system___float_fromint
109d0     0B 53 02 F6 | 	mov	local06, result1
109d4     00 54 06 F6 | 	mov	local07, #0
109d8     01 56 06 F6 | 	mov	local08, #1
109dc     24 3F 02 F6 | 	mov	arg01, local01
109e0     00 40 06 F6 | 	mov	arg02, #0
109e4     01 42 06 F6 | 	mov	arg03, #1
109e8     50 F0 BF FD | 	call	#__system___float_cmp
109ec     0B 59 0A F6 | 	mov	local09, result1 wz
109f0     25 01 68 AC |  if_e	wrlong	#0, local02
109f4     26 01 68 AC |  if_e	wrlong	#0, local03
109f8     D0 01 90 AD |  if_e	jmp	#LR__1152
109fc     24 3F 02 F6 | 	mov	arg01, local01
10a00     E8 F1 BF FD | 	call	#__system____builtin_ilogb
10a04     0B 5B 02 F6 | 	mov	local10, result1
10a08     0A 50 0E F2 | 	cmp	local05, #10 wz
10a0c     20 00 90 5D |  if_ne	jmp	#LR__1140
10a10     2D 9D 02 F6 | 	mov	muldiva_, local10
10a14     01 9C 66 F0 | 	shl	muldiva_, #1
10a18     2D 9D 02 F1 | 	add	muldiva_, local10
10a1c     0A 9E 06 F6 | 	mov	muldivb_, #10
10a20     F1 00 A0 FD | 	call	#divide_
10a24     4F 5B 02 F6 | 	mov	local10, muldivb_
10a28     09 5C 06 F6 | 	mov	local11, #9
10a2c     04 00 90 FD | 	jmp	#LR__1141
10a30                 | LR__1140
10a30     18 5C 06 F6 | 	mov	local11, #24
10a34                 | LR__1141
10a34                 | LR__1142
10a34     08 54 5E F2 | 	cmps	local07, #8 wcz
10a38     01 54 06 F1 | 	add	local07, #1
10a3c     74 00 90 3D |  if_ae	jmp	#LR__1143
10a40     00 C0 1F FF 
10a44     00 3E 06 F6 | 	mov	arg01, ##1065353216
10a48     29 41 02 F6 | 	mov	arg02, local06
10a4c     2D 43 02 F6 | 	mov	arg03, local10
10a50     E8 F1 BF FD | 	call	#__system___float_pow_n
10a54     0B 5F 02 F6 | 	mov	local12, result1
10a58     24 3F 02 F6 | 	mov	arg01, local01
10a5c     2F 41 02 F6 | 	mov	arg02, local12
10a60     98 ED BF FD | 	call	#__system___float_div
10a64     0B 61 02 F6 | 	mov	local13, result1
10a68     30 3F 02 F6 | 	mov	arg01, local13
10a6c     01 56 06 F6 | 	mov	local08, #1
10a70     00 C0 1F FF 
10a74     00 40 06 F6 | 	mov	arg02, ##1065353216
10a78     01 42 06 F6 | 	mov	arg03, #1
10a7c     BC EF BF FD | 	call	#__system___float_cmp
10a80     0B 59 02 F6 | 	mov	local09, result1
10a84     00 58 5E F2 | 	cmps	local09, #0 wcz
10a88     01 5A 86 C1 |  if_b	sub	local10, #1
10a8c     A4 FF 9F CD |  if_b	jmp	#LR__1142
10a90     30 3F 02 F6 | 	mov	arg01, local13
10a94     29 41 02 F6 | 	mov	arg02, local06
10a98     01 56 66 F6 | 	neg	local08, #1
10a9c     01 42 66 F6 | 	neg	arg03, #1
10aa0     98 EF BF FD | 	call	#__system___float_cmp
10aa4     0B 59 02 F6 | 	mov	local09, result1
10aa8     00 58 5E F2 | 	cmps	local09, #0 wcz
10aac     01 5A 06 31 |  if_ae	add	local10, #1
10ab0     80 FF 9F 3D |  if_ae	jmp	#LR__1142
10ab4                 | LR__1143
10ab4     30 3F 02 F6 | 	mov	arg01, local13
10ab8     30 F1 BF FD | 	call	#__system____builtin_ilogb
10abc     0B 63 02 F6 | 	mov	local14, result1
10ac0     30 65 02 F6 | 	mov	local15, local13
10ac4     32 67 02 F6 | 	mov	local16, local15
10ac8     FF 3F 00 FF 
10acc     FF 67 06 F5 | 	and	local16, ##8388607
10ad0     17 66 26 F4 | 	bith	local16, #23
10ad4     31 67 62 F0 | 	shl	local16, local14
10ad8     02 50 0E F2 | 	cmp	local05, #2 wz
10adc     02 4E 66 A0 |  if_e	shl	local04, #2
10ae0     00 68 06 F6 | 	mov	local17, #0
10ae4     00 4E 5E F2 | 	cmps	local04, #0 wcz
10ae8     18 00 90 3D |  if_ae	jmp	#LR__1144
10aec     2D 6B 02 F6 | 	mov	local18, local10
10af0     27 6B 82 F1 | 	sub	local18, local04
10af4     35 4F 02 F6 | 	mov	local04, local18
10af8     00 4E 5E F2 | 	cmps	local04, #0 wcz
10afc     C4 00 90 CD |  if_b	jmp	#LR__1151
10b00     04 00 90 FD | 	jmp	#LR__1145
10b04                 | LR__1144
10b04     01 4E 06 F1 | 	add	local04, #1
10b08                 | LR__1145
10b08     2E 4F 7A F3 | 	fles	local04, local11 wcz
10b0c     01 6C 06 F6 | 	mov	local19, #1
10b10     34 F5 9E FE | 	loc	pa,	#(@LR__1147-@LR__1146)
10b14     B4 00 A0 FD | 	call	#FCACHE_LOAD_
10b18                 | LR__1146
10b18     00 40 00 FF 
10b1c     00 68 1E F2 | 	cmp	local17, ##8388608 wcz
10b20     3C 00 90 3D |  if_ae	jmp	#LR__1148
10b24     00 4E 5E F2 | 	cmps	local04, #0 wcz
10b28     01 4E 86 F1 | 	sub	local04, #1
10b2c     30 00 90 ED |  if_be	jmp	#LR__1148
10b30     33 6F 02 F6 | 	mov	local20, local16
10b34     17 6E 46 F0 | 	shr	local20, #23
10b38     FF 3F 00 FF 
10b3c     FF 67 06 F5 | 	and	local16, ##8388607
10b40     28 69 02 FD | 	qmul	local17, local05
10b44     18 68 62 FD | 	getqx	local17
10b48     28 6D 02 FD | 	qmul	local19, local05
10b4c     18 6C 62 FD | 	getqx	local19
10b50     28 67 02 FD | 	qmul	local16, local05
10b54     18 66 62 FD | 	getqx	local16
10b58     37 69 02 F1 | 	add	local17, local20
10b5c     B8 FF 9F FD | 	jmp	#LR__1146
10b60                 | LR__1147
10b60                 | LR__1148
10b60     28 6B 02 F6 | 	mov	local18, local05
10b64     17 6A 66 F0 | 	shl	local18, #23
10b68     35 71 52 F6 | 	abs	local21, local18 wc
10b6c     01 70 46 F0 | 	shr	local21, #1
10b70     38 71 62 C6 |  if_b	neg	local21, local21
10b74     38 67 1A F2 | 	cmp	local16, local21 wcz
10b78     28 00 90 1D |  if_a	jmp	#LR__1149
10b7c     28 57 02 F6 | 	mov	local08, local05
10b80     17 56 66 F0 | 	shl	local08, #23
10b84     2B 59 52 F6 | 	abs	local09, local08 wc
10b88     01 58 46 F0 | 	shr	local09, #1
10b8c     2C 59 62 C6 |  if_b	neg	local09, local09
10b90     2C 67 0A F2 | 	cmp	local16, local09 wz
10b94     2C 00 90 5D |  if_ne	jmp	#LR__1150
10b98     34 73 02 F6 | 	mov	local22, local17
10b9c     01 72 0E F5 | 	and	local22, #1 wz
10ba0     20 00 90 AD |  if_e	jmp	#LR__1150
10ba4                 | LR__1149
10ba4     34 6B 02 F6 | 	mov	local18, local17
10ba8     34 71 02 F6 | 	mov	local21, local17
10bac     01 70 06 F1 | 	add	local21, #1
10bb0     38 69 02 F6 | 	mov	local17, local21
10bb4     36 69 0A F2 | 	cmp	local17, local19 wz
10bb8     2D 6B 02 A6 |  if_e	mov	local18, local10
10bbc     01 6A 06 A1 |  if_e	add	local18, #1
10bc0     35 5B 02 A6 |  if_e	mov	local10, local18
10bc4                 | LR__1150
10bc4                 | LR__1151
10bc4     25 69 62 FC | 	wrlong	local17, local02
10bc8     26 5B 62 FC | 	wrlong	local10, local03
10bcc                 | LR__1152
10bcc     D0 F0 03 F6 | 	mov	ptra, fp
10bd0     E0 00 A0 FD | 	call	#popregs_
10bd4                 | __system__disassemble_0794_ret
10bd4     2D 00 64 FD | 	ret
10bd8                 | 
10bd8                 | __system__emitsign_0796
10bd8     00 28 06 F6 | 	mov	_var01, #0
10bdc     00 40 0E F2 | 	cmp	arg02, #0 wz
10be0     1F 41 42 5C |  if_ne	wrbyte	arg02, arg01
10be4     01 28 06 56 |  if_ne	mov	_var01, #1
10be8     01 3E 06 51 |  if_ne	add	arg01, #1
10bec     00 42 0E F2 | 	cmp	arg03, #0 wz
10bf0     10 00 90 AD |  if_e	jmp	#LR__1153
10bf4     1F 61 48 FC | 	wrbyte	#48, arg01
10bf8     01 3E 06 F1 | 	add	arg01, #1
10bfc     1F 43 42 FC | 	wrbyte	arg03, arg01
10c00     02 28 06 F1 | 	add	_var01, #2
10c04                 | LR__1153
10c04     14 17 02 F6 | 	mov	result1, _var01
10c08                 | __system__emitsign_0796_ret
10c08     2D 00 64 FD | 	ret
10c0c                 | 
10c0c                 | __system___gettxfunc
10c0c     03 9C 05 F6 | 	mov	COUNT_, #3
10c10     D1 00 A0 FD | 	call	#pushregs_
10c14     40 FA BF FD | 	call	#__system____getftab
10c18     0B 49 0A F6 | 	mov	local01, result1 wz
10c1c     14 00 90 AD |  if_e	jmp	#LR__1154
10c20     08 48 06 F1 | 	add	local01, #8
10c24     24 4B 02 FB | 	rdlong	local02, local01
10c28     08 48 86 F1 | 	sub	local01, #8
10c2c     25 4D 0A F6 | 	mov	local03, local02 wz
10c30     08 00 90 5D |  if_ne	jmp	#LR__1155
10c34                 | LR__1154
10c34     00 16 06 F6 | 	mov	result1, #0
10c38     0C 00 90 FD | 	jmp	#LR__1156
10c3c                 | LR__1155
10c3c     24 3F 02 F6 | 	mov	arg01, local01
10c40     04 41 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
10c44     10 D0 BF FD | 	call	#__system___make_methodptr
10c48                 | LR__1156
10c48     D0 F0 03 F6 | 	mov	ptra, fp
10c4c     E0 00 A0 FD | 	call	#popregs_
10c50                 | __system___gettxfunc_ret
10c50     2D 00 64 FD | 	ret
10c54                 | 
10c54                 | __system___getiolock_0837
10c54     03 9C 05 F6 | 	mov	COUNT_, #3
10c58     D1 00 A0 FD | 	call	#pushregs_
10c5c     F8 F9 BF FD | 	call	#__system____getftab
10c60     0B 49 0A F6 | 	mov	local01, result1 wz
10c64     14 00 90 AD |  if_e	jmp	#LR__1157
10c68     08 48 06 F1 | 	add	local01, #8
10c6c     24 4B 02 FB | 	rdlong	local02, local01
10c70     08 48 86 F1 | 	sub	local01, #8
10c74     25 4D 0A F6 | 	mov	local03, local02 wz
10c78     18 00 90 5D |  if_ne	jmp	#LR__1158
10c7c                 | LR__1157
10c7c     01 00 00 FF 
10c80     38 0A 06 F1 | 	add	ptr___system__dat__, ##568
10c84     05 17 02 F6 | 	mov	result1, ptr___system__dat__
10c88     01 00 00 FF 
10c8c     38 0A 86 F1 | 	sub	ptr___system__dat__, ##568
10c90     08 00 90 FD | 	jmp	#LR__1159
10c94                 | LR__1158
10c94     0C 48 06 F1 | 	add	local01, #12
10c98     24 17 02 F6 | 	mov	result1, local01
10c9c                 | LR__1159
10c9c     D0 F0 03 F6 | 	mov	ptra, fp
10ca0     E0 00 A0 FD | 	call	#popregs_
10ca4                 | __system___getiolock_0837_ret
10ca4     2D 00 64 FD | 	ret
10ca8                 | 
10ca8                 | __system___rxtxioctl_0960
10ca8     02 9C 05 F6 | 	mov	COUNT_, #2
10cac     D1 00 A0 FD | 	call	#pushregs_
10cb0     20 49 02 F6 | 	mov	local01, arg02
10cb4     21 4B 02 F6 | 	mov	local02, arg03
10cb8     00 49 0E F2 | 	cmp	local01, #256 wz
10cbc     0C 00 90 AD |  if_e	jmp	#LR__1160
10cc0     01 49 0E F2 | 	cmp	local01, #257 wz
10cc4     1C 00 90 AD |  if_e	jmp	#LR__1161
10cc8     30 00 90 FD | 	jmp	#LR__1162
10ccc                 | LR__1160
10ccc     08 0A 06 F1 | 	add	ptr___system__dat__, #8
10cd0     05 17 02 FB | 	rdlong	result1, ptr___system__dat__
10cd4     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
10cd8     25 17 62 FC | 	wrlong	result1, local02
10cdc     00 16 06 F6 | 	mov	result1, #0
10ce0     30 00 90 FD | 	jmp	#LR__1163
10ce4                 | LR__1161
10ce4     25 3F 02 FB | 	rdlong	arg01, local02
10ce8     08 0A 06 F1 | 	add	ptr___system__dat__, #8
10cec     05 3F 62 FC | 	wrlong	arg01, ptr___system__dat__
10cf0     08 0A 86 F1 | 	sub	ptr___system__dat__, #8
10cf4     00 16 06 F6 | 	mov	result1, #0
10cf8     18 00 90 FD | 	jmp	#LR__1163
10cfc                 | LR__1162
10cfc     01 00 00 FF 
10d00     40 0A 06 F1 | 	add	ptr___system__dat__, ##576
10d04     05 15 68 FC | 	wrlong	#10, ptr___system__dat__
10d08     01 00 00 FF 
10d0c     40 0A 86 F1 | 	sub	ptr___system__dat__, ##576
10d10     01 16 66 F6 | 	neg	result1, #1
10d14                 | LR__1163
10d14     D0 F0 03 F6 | 	mov	ptra, fp
10d18     E0 00 A0 FD | 	call	#popregs_
10d1c                 | __system___rxtxioctl_0960_ret
10d1c     2D 00 64 FD | 	ret
10d20                 | 
10d20                 | __system____dummy_flush_0961
10d20     00 16 06 F6 | 	mov	result1, #0
10d24                 | __system____dummy_flush_0961_ret
10d24     2D 00 64 FD | 	ret
10d28                 | 
10d28                 | __system__pack_1105
10d28     08 9C 05 F6 | 	mov	COUNT_, #8
10d2c     D1 00 A0 FD | 	call	#pushregs_
10d30     1F 49 02 F6 | 	mov	local01, arg01
10d34     20 4B 02 F6 | 	mov	local02, arg02
10d38     21 4D 02 F6 | 	mov	local03, arg03
10d3c     22 4F 02 F6 | 	mov	local04, arg04
10d40     7F 4C 06 F1 | 	add	local03, #127
10d44     04 4E CE F7 | 	test	local04, #4 wz
10d48     10 00 90 AD |  if_e	jmp	#LR__1164
10d4c     00 48 0E F2 | 	cmp	local01, #0 wz
10d50     16 48 C6 A9 |  if_e	decod	local01, #22
10d54     F7 48 26 F4 | 	bith	local01, #247
10d58     C0 00 90 FD | 	jmp	#LR__1173
10d5c                 | LR__1164
10d5c     02 4E CE F7 | 	test	local04, #2 wz
10d60     00 C0 3F 5F 
10d64     00 48 06 56 |  if_ne	mov	local01, ##2139095040
10d68     00 4A 06 56 |  if_ne	mov	local02, #0
10d6c     AC 00 90 5D |  if_ne	jmp	#LR__1172
10d70     27 51 02 F6 | 	mov	local05, local04
10d74     08 50 CE F7 | 	test	local05, #8 wz
10d78     00 48 06 56 |  if_ne	mov	local01, #0
10d7c     9C 00 90 5D |  if_ne	jmp	#LR__1171
10d80     FF 4C 5E F2 | 	cmps	local03, #255 wcz
10d84     00 C0 3F 3F 
10d88     00 48 06 36 |  if_ae	mov	local01, ##2139095040
10d8c     00 4A 06 36 |  if_ae	mov	local02, #0
10d90     88 00 90 3D |  if_ae	jmp	#LR__1170
10d94     00 4C 5E F2 | 	cmps	local03, #0 wcz
10d98     70 00 90 1D |  if_a	jmp	#LR__1168
10d9c     01 4A 46 F0 | 	shr	local02, #1
10da0     24 53 02 F6 | 	mov	local06, local01
10da4     01 52 06 F5 | 	and	local06, #1
10da8     1F 52 66 F0 | 	shl	local06, #31
10dac     29 4B 42 F5 | 	or	local02, local06
10db0     01 48 46 F0 | 	shr	local01, #1
10db4     84 F2 9E FE | 	loc	pa,	#(@LR__1166-@LR__1165)
10db8     B4 00 A0 FD | 	call	#FCACHE_LOAD_
10dbc                 | LR__1165
10dbc     00 4C 5E F2 | 	cmps	local03, #0 wcz
10dc0     34 00 90 3D |  if_ae	jmp	#LR__1167
10dc4     00 48 0E F2 | 	cmp	local01, #0 wz
10dc8     2C 00 90 AD |  if_e	jmp	#LR__1167
10dcc     25 55 02 F6 | 	mov	local07, local02
10dd0     01 54 06 F5 | 	and	local07, #1
10dd4     01 4C 06 F1 | 	add	local03, #1
10dd8     01 4A 46 F0 | 	shr	local02, #1
10ddc     24 53 02 F6 | 	mov	local06, local01
10de0     01 52 06 F5 | 	and	local06, #1
10de4     1F 52 66 F0 | 	shl	local06, #31
10de8     29 4B 42 F5 | 	or	local02, local06
10dec     2A 4B 42 F5 | 	or	local02, local07
10df0     01 48 46 F0 | 	shr	local01, #1
10df4     C4 FF 9F FD | 	jmp	#LR__1165
10df8                 | LR__1166
10df8                 | LR__1167
10df8     00 4C 5E F2 | 	cmps	local03, #0 wcz
10dfc     1C 00 90 3D |  if_ae	jmp	#LR__1169
10e00     00 4A 0E F2 | 	cmp	local02, #0 wz
10e04     6F 4A 62 FD | 	wrnz	local02
10e08     10 00 90 FD | 	jmp	#LR__1169
10e0c                 | LR__1168
10e0c     00 C0 7F FF 
10e10     00 48 26 F5 | 	andn	local01, ##-8388608
10e14     17 4C 66 F0 | 	shl	local03, #23
10e18     26 49 42 F5 | 	or	local01, local03
10e1c                 | LR__1169
10e1c                 | LR__1170
10e1c                 | LR__1171
10e1c                 | LR__1172
10e1c                 | LR__1173
10e1c     01 48 CE F7 | 	test	local01, #1 wz
10e20     01 4A 46 55 |  if_ne	or	local02, #1
10e24     25 57 02 F6 | 	mov	local08, local02
10e28     00 52 06 F6 | 	mov	local06, #0
10e2c     FF FF 3F FF 
10e30     FF 4B 06 F1 | 	add	local02, ##2147483647
10e34     2B 4B 1A F2 | 	cmp	local02, local08 wcz
10e38     01 52 06 C6 |  if_b	mov	local06, #1
10e3c     29 49 02 F1 | 	add	local01, local06
10e40     01 4E CE F7 | 	test	local04, #1 wz
10e44     1F 48 26 54 |  if_ne	bith	local01, #31
10e48     24 17 02 F6 | 	mov	result1, local01
10e4c     D0 F0 03 F6 | 	mov	ptra, fp
10e50     E0 00 A0 FD | 	call	#popregs_
10e54                 | __system__pack_1105_ret
10e54     2D 00 64 FD | 	ret
10e58                 | 
10e58                 | __struct__s_vfs_file_t_putchar
10e58     04 9C 05 F6 | 	mov	COUNT_, #4
10e5c     D1 00 A0 FD | 	call	#pushregs_
10e60     18 FC 05 F1 | 	add	objptr, #24
10e64     FE 48 0A FB | 	rdlong	local01, objptr wz
10e68     18 FC 85 F1 | 	sub	objptr, #24
10e6c     00 16 06 A6 |  if_e	mov	result1, #0
10e70     3C 00 90 AD |  if_e	jmp	#LR__1174
10e74     18 FC 05 F1 | 	add	objptr, #24
10e78     FE 48 02 FB | 	rdlong	local01, objptr
10e7c     18 FC 85 F1 | 	sub	objptr, #24
10e80     24 4B 02 FB | 	rdlong	local02, local01
10e84     04 48 06 F1 | 	add	local01, #4
10e88     24 4D 02 FB | 	rdlong	local03, local01
10e8c     FE 40 02 F6 | 	mov	arg02, objptr
10e90     FE 4E 02 F6 | 	mov	local04, objptr
10e94     25 FD 01 F6 | 	mov	objptr, local02
10e98     2D 4C 62 FD | 	call	local03
10e9c     27 FD 01 F6 | 	mov	objptr, local04
10ea0     00 16 5E F2 | 	cmps	result1, #0 wcz
10ea4     00 48 06 C6 |  if_b	mov	local01, #0
10ea8     01 48 06 36 |  if_ae	mov	local01, #1
10eac     24 17 02 F6 | 	mov	result1, local01
10eb0                 | LR__1174
10eb0     D0 F0 03 F6 | 	mov	ptra, fp
10eb4     E0 00 A0 FD | 	call	#popregs_
10eb8                 | __struct__s_vfs_file_t_putchar_ret
10eb8     2D 00 64 FD | 	ret
10ebc                 | 
10ebc                 | __struct__s_vfs_file_t_getchar
10ebc     04 9C 05 F6 | 	mov	COUNT_, #4
10ec0     D1 00 A0 FD | 	call	#pushregs_
10ec4     1C FC 05 F1 | 	add	objptr, #28
10ec8     FE 48 0A FB | 	rdlong	local01, objptr wz
10ecc     1C FC 85 F1 | 	sub	objptr, #28
10ed0     01 16 66 A6 |  if_e	neg	result1, #1
10ed4     2C 00 90 AD |  if_e	jmp	#LR__1175
10ed8                 | '         return getcf(__this);
10ed8     1C FC 05 F1 | 	add	objptr, #28
10edc     FE 48 02 FB | 	rdlong	local01, objptr
10ee0     1C FC 85 F1 | 	sub	objptr, #28
10ee4     24 4B 02 FB | 	rdlong	local02, local01
10ee8     04 48 06 F1 | 	add	local01, #4
10eec     24 4D 02 FB | 	rdlong	local03, local01
10ef0     FE 3E 02 F6 | 	mov	arg01, objptr
10ef4     FE 4E 02 F6 | 	mov	local04, objptr
10ef8     25 FD 01 F6 | 	mov	objptr, local02
10efc     2D 4C 62 FD | 	call	local03
10f00     27 FD 01 F6 | 	mov	objptr, local04
10f04                 | LR__1175
10f04     D0 F0 03 F6 | 	mov	ptra, fp
10f08     E0 00 A0 FD | 	call	#popregs_
10f0c                 | __struct__s_vfs_file_t_getchar_ret
10f0c     2D 00 64 FD | 	ret
10f10                 | 
10f10                 | __struct___bas_wrap_sender_tx
10f10     04 9C 05 F6 | 	mov	COUNT_, #4
10f14     D1 00 A0 FD | 	call	#pushregs_
10f18     FE 48 02 FB | 	rdlong	local01, objptr
10f1c     24 4B 02 FB | 	rdlong	local02, local01
10f20     04 48 06 F1 | 	add	local01, #4
10f24     24 4D 02 FB | 	rdlong	local03, local01
10f28     FE 4E 02 F6 | 	mov	local04, objptr
10f2c     25 FD 01 F6 | 	mov	objptr, local02
10f30     2D 4C 62 FD | 	call	local03
10f34     27 FD 01 F6 | 	mov	objptr, local04
10f38     01 16 06 F6 | 	mov	result1, #1
10f3c     D0 F0 03 F6 | 	mov	ptra, fp
10f40     E0 00 A0 FD | 	call	#popregs_
10f44                 | __struct___bas_wrap_sender_tx_ret
10f44     2D 00 64 FD | 	ret
10f48                 | 
10f48                 | LR__1176
10f48     2F          | 	byte	"/"
10f49     00          | 	byte	0
10f4a                 | LR__1177
10f4a     69 6E 66    | 	byte	"inf"
10f4d     00          | 	byte	0
10f4e                 | LR__1178
10f4e     6E 61 6E    | 	byte	"nan"
10f51     00          | 	byte	0
10f52                 | LR__1179
10f52     20 21 21 21 
10f56     20 63 6F 72 
10f5a     72 75 70 74 
10f5e     65 64 20 68 
10f62     65 61 70 3F 
10f66     3F 3F 20 21 
10f6a     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
10f6d     00          | 	byte	0
10f6e                 | LR__1180
10f6e     20 21 21 21 
10f72     20 6F 75 74 
10f76     20 6F 66 20 
10f7a     68 65 61 70 
10f7e     20 6D 65 6D 
10f82     6F 72 79 20 
10f86     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
10f8a     00          | 	byte	0
10f8b                 | LR__1181
10f8b     20 21 21 21 
10f8f     20 63 6F 72 
10f93     72 75 70 74 
10f97     65 64 20 68 
10f9b     65 61 70 20 
10f9f     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
10fa3     00          | 	byte	0
10fa4                 | LR__1182
10fa4     2F          | 	byte	"/"
10fa5     00          | 	byte	0
10fa6                 | LR__1183
10fa6     3A 20       | 	byte	": "
10fa8     00          | 	byte	0
10fa9                 | LR__1184
10fa9     0A          | 	byte	10
10faa     00          | 	byte	0
10fab                 | LR__1185
10fab     00          | 	byte	0
10fac     00          | 	byte	0
10fad                 | LR__1186
10fad     45 52 52 4F 
10fb1     52 3A 20    | 	byte	"ERROR: "
10fb4     00          | 	byte	0
10fb5                 | LR__1187
10fb5     20 69 73 20 
10fb9     6E 6F 74 20 
10fbd     61 20 64 69 
10fc1     72 65 63 74 
10fc5     6F 72 79    | 	byte	" is not a directory"
10fc8     00          | 	byte	0
10fc9                 | LR__1188
10fc9     45 52 52 4F 
10fcd     52 3A 20 75 
10fd1     6E 61 62 6C 
10fd5     65 20 74 6F 
10fd9     20 72 65 61 
10fdd     64 20 64 69 
10fe1     72 65 63 74 
10fe5     6F 72 79 20 | 	byte	"ERROR: unable to read directory "
10fe9     00          | 	byte	0
10fea                 | LR__1189
10fea     3F 3F 3F 20 
10fee     65 72 72 6F 
10ff2     72 20 69 6E 
10ff6     20 73 74 61 
10ffa     74 20 6F 66 
10ffe     20          | 	byte	"??? error in stat of "
10fff     00          | 	byte	0
11000                 | LR__1190
11000     3C 64 69 72 
11004     3E          | 	byte	"<dir>"
11005     00          | 	byte	0
11006                 | LR__1191
11006     20          | 	byte	" "
11007     00          | 	byte	0
11008                 | LR__1192
11008     20          | 	byte	" "
11009     00          | 	byte	0
1100a                 | LR__1193
1100a     43 61 6E 6E 
1100e     6F 74 20 63 
11012     6F 70 79 20 
11016     77 68 6F 6C 
1101a     65 20 64 69 
1101e     72 65 63 74 
11022     6F 72 69 65 
11026     73 20 79 65 
1102a     74          | 	byte	"Cannot copy whole directories yet"
1102b     00          | 	byte	0
1102c                 | LR__1194
1102c     2F          | 	byte	"/"
1102d     00          | 	byte	0
1102e                 | LR__1195
1102e     25 73 2F 25 
11032     73          | 	byte	"%s/%s"
11033     00          | 	byte	0
11034                 | LR__1196
11034     72 62       | 	byte	"rb"
11036     00          | 	byte	0
11037                 | LR__1197
11037     77 62       | 	byte	"wb"
11039     00          | 	byte	0
1103a                 | LR__1198
1103a     63 64 20 20 
1103e     20 20 20 20 
11042     20 20 20 20 
11046     20 20 3A 20 
1104a     20 73 68 6F 
1104e     77 20 63 75 
11052     72 72 65 6E 
11056     74 20 64 69 
1105a     72 65 63 74 
1105e     6F 72 79 20 
11062     70 61 74 68 | 	byte	"cd            :  show current directory path"
11066     00          | 	byte	0
11067                 | LR__1199
11067     63 64 20 3C 
1106b     64 69 72 3E 
1106f     20 20 20 20 
11073     20 20 3A 20 
11077     20 63 68 61 
1107b     6E 67 65 20 
1107f     74 6F 20 64 
11083     69 72 65 63 
11087     74 6F 72 79 
1108b     20 64 69 72 | 	byte	"cd <dir>      :  change to directory dir"
1108f     00          | 	byte	0
11090                 | LR__1200
11090     63 6F 70 79 
11094     20 3C 73 3E 
11098     20 3C 64 3E 
1109c     20 20 3A 20 
110a0     20 63 6F 70 
110a4     79 20 66 69 
110a8     6C 65 20 73 
110ac     20 74 6F 20 
110b0     64          | 	byte	"copy <s> <d>  :  copy file s to d"
110b1     00          | 	byte	0
110b2                 | LR__1201
110b2     64 65 6C 20 
110b6     3C 66 3E 20 
110ba     20 20 20 20 
110be     20 20 3A 20 
110c2     20 64 65 6C 
110c6     65 74 65 20 
110ca     6F 72 64 69 
110ce     6E 61 72 79 
110d2     20 66 69 6C 
110d6     65 20 3C 66 
110da     3E          | 	byte	"del <f>       :  delete ordinary file <f>"
110db     00          | 	byte	0
110dc                 | LR__1202
110dc     64 69 72 20 
110e0     20 20 20 20 
110e4     20 20 20 20 
110e8     20 20 3A 20 
110ec     20 64 69 73 
110f0     70 6C 61 79 
110f4     20 63 6F 6E 
110f8     74 65 6E 74 
110fc     73 20 6F 66 
11100     20 63 75 72 
11104     72 65 6E 74 
11108     20 64 69 72 
1110c     65 63 74 6F 
11110     72 79       | 	byte	"dir           :  display contents of current directory"
11112     00          | 	byte	0
11113                 | LR__1203
11113     64 69 72 20 
11117     3C 64 3E 20 
1111b     20 20 20 20 
1111f     20 20 3A 20 
11123     20 64 69 73 
11127     70 6C 61 79 
1112b     20 63 6F 6E 
1112f     74 65 6E 74 
11133     73 20 6F 66 
11137     20 64 69 72 
1113b     65 63 74 6F 
1113f     72 79 20 64 | 	byte	"dir <d>       :  display contents of directory d"
11143     00          | 	byte	0
11144                 | LR__1204
11144     65 78 65 63 
11148     20 3C 66 3E 
1114c     20 20 20 20 
11150     20 20 3A 20 
11154     20 65 78 65 
11158     63 75 74 65 
1115c     20 66 69 6C 
11160     65 20 3C 66 
11164     3E 20 28 6E 
11168     65 76 65 72 
1116c     20 72 65 74 
11170     75 72 6E 73 
11174     29          | 	byte	"exec <f>      :  execute file <f> (never returns)"
11175     00          | 	byte	0
11176                 | LR__1205
11176     68 65 6C 70 
1117a     20 20 20 20 
1117e     20 20 20 20 
11182     20 20 3A 20 
11186     20 73 68 6F 
1118a     77 20 74 68 
1118e     69 73 20 68 
11192     65 6C 70    | 	byte	"help          :  show this help"
11195     00          | 	byte	0
11196                 | LR__1206
11196     6D 6B 64 69 
1119a     72 20 3C 64 
1119e     3E 20 20 20 
111a2     20 20 3A 20 
111a6     20 63 72 65 
111aa     61 74 65 20 
111ae     6E 65 77 20 
111b2     64 69 72 65 
111b6     63 74 6F 72 
111ba     79 20 64    | 	byte	"mkdir <d>     :  create new directory d"
111bd     00          | 	byte	0
111be                 | LR__1207
111be     72 6D 64 69 
111c2     72 20 3C 64 
111c6     3E 20 20 20 
111ca     20 20 3A 20 
111ce     20 72 65 6D 
111d2     6F 76 65 20 
111d6     64 69 72 65 
111da     63 74 6F 72 
111de     79 20 64    | 	byte	"rmdir <d>     :  remove directory d"
111e1     00          | 	byte	0
111e2                 | LR__1208
111e2     74 79 70 65 
111e6     20 3C 66 3E 
111ea     20 20 20 20 
111ee     20 20 3A 20 
111f2     20 74 79 70 
111f6     65 20 66 69 
111fa     6C 65 20 6F 
111fe     6E 20 63 6F 
11202     6E 73 6F 6C 
11206     65          | 	byte	"type <f>      :  type file on console"
11207     00          | 	byte	0
11208                 | LR__1209
11208     2F 73 64    | 	byte	"/sd"
1120b     00          | 	byte	0
1120c                 | LR__1210
1120c     6D 6F 75 6E 
11210     74 65 64 20 
11214     53 44 20 63 
11218     61 72 64 20 
1121c     61 73 20 2F 
11220     73 64       | 	byte	"mounted SD card as /sd"
11222     00          | 	byte	0
11223                 | LR__1211
11223     2F 68 6F 73 
11227     74          | 	byte	"/host"
11228     00          | 	byte	0
11229                 | LR__1212
11229     6D 6F 75 6E 
1122d     74 65 64 20 
11231     68 6F 73 74 
11235     20 66 69 6C 
11239     65 20 73 79 
1123d     73 74 65 6D 
11241     20 61 73 20 
11245     2F 68 6F 73 
11249     74          | 	byte	"mounted host file system as /host"
1124a     00          | 	byte	0
1124b                 | LR__1213
1124b     2F 68 6F 73 
1124f     74          | 	byte	"/host"
11250     00          | 	byte	0
11251                 | LR__1214
11251     2F 73 64    | 	byte	"/sd"
11254     00          | 	byte	0
11255                 | LR__1215
11255     63 6D 64 3E 
11259     20          | 	byte	"cmd> "
1125a     00          | 	byte	0
1125b                 | LR__1216
1125b     3F          | 	byte	"?"
1125c     00          | 	byte	0
1125d                 | LR__1217
1125d     68 65 6C 70 | 	byte	"help"
11261     00          | 	byte	0
11262                 | LR__1218
11262     63 64       | 	byte	"cd"
11264     00          | 	byte	0
11265                 | LR__1219
11265     20 69 73 20 
11269     6E 6F 74 20 
1126d     61 20 64 69 
11271     72 65 63 74 
11275     6F 72 79    | 	byte	" is not a directory"
11278     00          | 	byte	0
11279                 | LR__1220
11279     63 6F 70 79 | 	byte	"copy"
1127d     00          | 	byte	0
1127e                 | LR__1221
1127e     63 70       | 	byte	"cp"
11280     00          | 	byte	0
11281                 | LR__1222
11281     64 65 6C    | 	byte	"del"
11284     00          | 	byte	0
11285                 | LR__1223
11285     72 6D       | 	byte	"rm"
11287     00          | 	byte	0
11288                 | LR__1224
11288     64 69 72    | 	byte	"dir"
1128b     00          | 	byte	0
1128c                 | LR__1225
1128c     6C 73       | 	byte	"ls"
1128e     00          | 	byte	0
1128f                 | LR__1226
1128f     65 78 65 63 | 	byte	"exec"
11293     00          | 	byte	0
11294                 | LR__1227
11294     63 68 61 69 
11298     6E          | 	byte	"chain"
11299     00          | 	byte	0
1129a                 | LR__1228
1129a     6D 6B 64 69 
1129e     72          | 	byte	"mkdir"
1129f     00          | 	byte	0
112a0                 | LR__1229
112a0     6D 64       | 	byte	"md"
112a2     00          | 	byte	0
112a3                 | LR__1230
112a3     72 6D 64 69 
112a7     72          | 	byte	"rmdir"
112a8     00          | 	byte	0
112a9                 | LR__1231
112a9     72 64       | 	byte	"rd"
112ab     00          | 	byte	0
112ac                 | LR__1232
112ac     74 79 70 65 | 	byte	"type"
112b0     00          | 	byte	0
112b1                 | LR__1233
112b1     63 61 74    | 	byte	"cat"
112b4     00          | 	byte	0
112b5                 | LR__1234
112b5     55 6E 6B 6E 
112b9     6F 77 6E 20 
112bd     63 6F 6D 6D 
112c1     61 6E 64 3A 
112c5     20          | 	byte	"Unknown command: "
112c6     00          | 	byte	0
112c7                 | LR__1235
112c7     2F          | 	byte	"/"
112c8     00          | 	byte	0
112c9                 | LR__1236
112c9     3F 3F 3F    | 	byte	"???"
112cc     00          | 	byte	0
112cd                 | LR__1237
112cd     39 50 32 30 
112d1     30 30       | 	byte	"9P2000"
112d3     00          | 	byte	0
112d4                 | LR__1238
112d4     39 50 32 30 
112d8     30 30       | 	byte	"9P2000"
112da     00          | 	byte	0
112db                 | LR__1239
112db     75 73 65 72 | 	byte	"user"
112df     00          | 	byte	0
112e0                 | LR__1240
112e0     00          | 	byte	0
112e1     00          | 	byte	0
112e2                 | LR__1241
112e2     22 2A 2B 2C 
112e6     3A 3B 3C 3D 
112ea     3E 3F 5B 5D 
112ee     7C 7F       | 	byte	34,"*+,:;<=>?[]|",127
112f0     00          | 	byte	0
112f1                 | LR__1242
112f1     EB 76 90 45 
112f5     58 46 41 54 
112f9     20 20 20    | 	byte	-21,"v",-112,"EXFAT   "
112fc     00          | 	byte	0
112fd                 | LR__1243
112fd     46 41 54    | 	byte	"FAT"
11300     00          | 	byte	0
11301                 | LR__1244
11301     46 41 54 33 
11305     32          | 	byte	"FAT32"
11306     00          | 	byte	0
11307     00          | 	alignl
11308                 | _dat_
11308     00 00 00 00 
      ...             
1178c     00 00 00 00 
11790     00 00 00 00 | 	byte	$00[1164]
11794     05 00 00 00 
11798     00 00 00 00 
1179c     00 00 00 00 
117a0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
117a4     6C 19 01 00 | 	long	@@@_dat_ + 1636
117a8     74 19 01 00 | 	long	@@@_dat_ + 1644
117ac     00 00 00 00 | 	byte	$00, $00, $00, $00
117b0     7C 19 01 00 | 	long	@@@_dat_ + 1652
117b4     84 19 01 00 | 	long	@@@_dat_ + 1660
117b8     00 00 00 00 
117bc     00 00 00 00 | 	byte	$00[8]
117c0     01 00 00 00 
117c4     06 00 00 00 
117c8     00 00 00 00 
117cc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
117d0     00 00 00 00 | 	byte	$00, $00, $00, $00
117d4     8C 19 01 00 | 	long	@@@_dat_ + 1668
117d8     94 19 01 00 | 	long	@@@_dat_ + 1676
117dc     00 00 00 00 | 	byte	$00, $00, $00, $00
117e0     9C 19 01 00 | 	long	@@@_dat_ + 1684
117e4     A4 19 01 00 | 	long	@@@_dat_ + 1692
117e8     00 00 00 00 
117ec     00 00 00 00 | 	byte	$00[8]
117f0     01 00 00 00 
117f4     06 00 00 00 
117f8     00 00 00 00 
117fc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11800     00 00 00 00 | 	byte	$00, $00, $00, $00
11804     AC 19 01 00 | 	long	@@@_dat_ + 1700
11808     B4 19 01 00 | 	long	@@@_dat_ + 1708
1180c     00 00 00 00 | 	byte	$00, $00, $00, $00
11810     BC 19 01 00 | 	long	@@@_dat_ + 1716
11814     C4 19 01 00 | 	long	@@@_dat_ + 1724
11818     00 00 00 00 
      ...             
11968     00 00 00 00 
1196c     00 00 00 00 | 	byte	$00[344]
11970     D0 DC 00 00 | 	long	@@@__system___tx
11974     00 00 00 00 | 	byte	$00, $00, $00, $00
11978     18 DD 00 00 | 	long	@@@__system___rx
1197c     00 00 00 00 | 	byte	$00, $00, $00, $00
11980     60 3E 00 00 | 	long	@@@__rxtxioctl_0055
11984     00 00 00 00 | 	byte	$00, $00, $00, $00
11988     D8 3E 00 00 | 	long	@@@___dummy_flush_0056
1198c     00 00 00 00 | 	byte	$00, $00, $00, $00
11990     D0 DC 00 00 | 	long	@@@__system___tx
11994     00 00 00 00 | 	byte	$00, $00, $00, $00
11998     18 DD 00 00 | 	long	@@@__system___rx
1199c     00 00 00 00 | 	byte	$00, $00, $00, $00
119a0     60 3E 00 00 | 	long	@@@__rxtxioctl_0055
119a4     00 00 00 00 | 	byte	$00, $00, $00, $00
119a8     D8 3E 00 00 | 	long	@@@___dummy_flush_0056
119ac     00 00 00 00 | 	byte	$00, $00, $00, $00
119b0     D0 DC 00 00 | 	long	@@@__system___tx
119b4     00 00 00 00 | 	byte	$00, $00, $00, $00
119b8     18 DD 00 00 | 	long	@@@__system___rx
119bc     00 00 00 00 | 	byte	$00, $00, $00, $00
119c0     60 3E 00 00 | 	long	@@@__rxtxioctl_0055
119c4     00 00 00 00 | 	byte	$00, $00, $00, $00
119c8     D8 3E 00 00 | 	long	@@@___dummy_flush_0056
119cc     01 01 01 01 
119d0     01 01 01 01 
119d4     01          | 	byte	$01[9]
119d5     91 11 11 11 
119d9     11 01 01 01 
119dd     01 01 01 01 
119e1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
119e5     01 01 01 01 
119e9     01 01 01    | 	byte	$01[7]
119ec     90 20 20 20 
119f0     20 20 20 20 
119f4     20 20 20 20 
119f8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
119fc     42 42 42 42 
11a00     42 42 42 42 
11a04     42 42       | 	byte	$42[10]
11a06     20 20 20 20 
11a0a     20 20 20    | 	byte	$20[7]
11a0d     44 44 44 44 
11a11     44 44       | 	byte	$44[6]
11a13     04 04 04 04 
11a17     04 04 04 04 
11a1b     04 04 04 04 
11a1f     04 04 04 04 
11a23     04 04 04 04 | 	byte	$04[20]
11a27     20 20 20 20 
11a2b     20 20       | 	byte	$20[6]
11a2d     48 48 48 48 
11a31     48 48       | 	byte	$48[6]
11a33     08 08 08 08 
11a37     08 08 08 08 
11a3b     08 08 08 08 
11a3f     08 08 08 08 
11a43     08 08 08 08 | 	byte	$08[20]
11a47     20 20 20 20 
11a4b     01 00 00 00 
11a4f     00 00 00 00 
11a53     00 00 00 00 | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11a57     00 00 00 00 
      ...             
11c7b     00 00 00 00 
11c7f     00          | 	byte	$00[553]
11c80     D4 1C 01 00 | 	long	@@@_dat_ + 2508
11c84     D7 1C 01 00 | 	long	@@@_dat_ + 2511
11c88     F8 1C 01 00 | 	long	@@@_dat_ + 2544
11c8c     11 1D 01 00 | 	long	@@@_dat_ + 2569
11c90     2C 1D 01 00 | 	long	@@@_dat_ + 2596
11c94     46 1D 01 00 | 	long	@@@_dat_ + 2622
11c98     56 1D 01 00 | 	long	@@@_dat_ + 2638
11c9c     68 1D 01 00 | 	long	@@@_dat_ + 2656
11ca0     7A 1D 01 00 | 	long	@@@_dat_ + 2674
11ca4     8C 1D 01 00 | 	long	@@@_dat_ + 2692
11ca8     98 1D 01 00 | 	long	@@@_dat_ + 2704
11cac     A9 1D 01 00 | 	long	@@@_dat_ + 2721
11cb0     BD 1D 01 00 | 	long	@@@_dat_ + 2741
11cb4     C7 1D 01 00 | 	long	@@@_dat_ + 2751
11cb8     D7 1D 01 00 | 	long	@@@_dat_ + 2767
11cbc     E6 1D 01 00 | 	long	@@@_dat_ + 2782
11cc0     FC 1D 01 00 | 	long	@@@_dat_ + 2804
11cc4     15 1E 01 00 | 	long	@@@_dat_ + 2829
11cc8     29 1E 01 00 | 	long	@@@_dat_ + 2849
11ccc     37 1E 01 00 | 	long	@@@_dat_ + 2863
11cd0     4B 1E 01 00 | 	long	@@@_dat_ + 2883
11cd4     4F 4B 00 4E 
11cd8     75 6D 65 72 
11cdc     69 63 61 6C 
11ce0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
11ce4     75 6D 65 6E 
11ce8     74 20 6F 75 
11cec     74 20 6F 66 
11cf0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
11cf4     61 69 6E 00 
11cf8     52 65 73 75 
11cfc     6C 74 20 6E 
11d00     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
11d04     65 70 72 65 
11d08     73 65 6E 74 
11d0c     61 62 6C 65 
11d10     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
11d14     65 67 61 6C 
11d18     20 6D 75 6C 
11d1c     74 69 62 79 
11d20     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
11d24     65 71 75 65 
11d28     6E 63 65 00 
11d2c     4E 6F 20 73 
11d30     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
11d34     66 69 6C 65 
11d38     20 6F 72 20 
11d3c     64 69 72 65 
11d40     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
11d44     79 00 42 61 
11d48     64 20 66 69 
11d4c     6C 65 20 6E 
11d50     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
11d54     72 00 50 65 
11d58     72 6D 69 73 
11d5c     73 69 6F 6E 
11d60     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
11d64     69 65 64 00 
11d68     4E 6F 74 20 
11d6c     65 6E 6F 75 
11d70     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
11d74     65 6D 6F 72 
11d78     79 00 54 65 
11d7c     6D 70 6F 72 
11d80     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
11d84     66 61 69 6C 
11d88     75 72 65 00 
11d8c     46 69 6C 65 
11d90     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
11d94     73 74 73 00 
11d98     49 6E 76 61 
11d9c     6C 69 64 20 
11da0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
11da4     6D 65 6E 74 
11da8     00 54 6F 6F 
11dac     20 6D 61 6E 
11db0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
11db4     65 6E 20 66 
11db8     69 6C 65 73 
11dbc     00 49 2F 4F 
11dc0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
11dc4     6F 72 00 4E 
11dc8     6F 74 20 61 
11dcc     20 64 69 72 
11dd0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
11dd4     72 79 00 49 
11dd8     73 20 61 20 
11ddc     64 69 72 65 
11de0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
11de4     79 00 52 65 
11de8     61 64 20 6F 
11dec     6E 6C 79 20 
11df0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
11df4     20 73 79 73 
11df8     74 65 6D 00 
11dfc     46 75 6E 63 
11e00     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
11e04     20 6E 6F 74 
11e08     20 69 6D 70 
11e0c     6C 65 6D 65 
11e10     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
11e14     00 44 69 72 
11e18     65 63 74 6F 
11e1c     72 79 20 6E 
11e20     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
11e24     6D 70 74 79 
11e28     00 4E 61 6D 
11e2c     65 20 74 6F 
11e30     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
11e34     6E 67 00 44 
11e38     65 76 69 63 
11e3c     65 20 6E 6F 
11e40     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
11e44     65 6B 61 62 
11e48     6C 65 00 55 
11e4c     6E 6B 6E 6F 
11e50     77 6E 20 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65
11e54     72 72 6F 72 
11e58     00 00 00 00 | 	byte	$72, $72, $6f, $72, $00, $00, $00, $00
11e5c                 | 	alignl
11e5c                 | _fs9p_internal_cc_dat_
11e5c     18 04 00 00 
11e60     00 00 00 00 
11e64     00 00 00 00 
11e68     00 00 00 00 | 	byte	$18, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11e6c     00 00 00 00 
      ...             
12710     00 00 00 00 
12714     00 00 00 00 | 	byte	$00[2220]
12718     58 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2300
1271c     60 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2308
12720     68 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2316
12724     70 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2324
12728     78 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2332
1272c     80 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2340
12730     88 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2348
12734     00 00 00 00 | 	byte	$00, $00, $00, $00
12738     90 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2356
1273c     98 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2364
12740     A0 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2372
12744     A8 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2380
12748     B0 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2388
1274c     B8 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2396
12750     C0 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2404
12754     C8 27 01 00 | 	long	@@@_fs9p_internal_cc_dat_ + 2412
12758     00 00 00 00 | 	byte	$00, $00, $00, $00
1275c     24 6B 00 00 | 	long	@@@_fs9p_internal_cc_v_open_0297
12760     00 00 00 00 | 	byte	$00, $00, $00, $00
12764     28 62 00 00 | 	long	@@@_fs9p_internal_cc_v_creat_0256
12768     00 00 00 00 | 	byte	$00, $00, $00, $00
1276c     E4 62 00 00 | 	long	@@@_fs9p_internal_cc_v_close_0258
12770     00 00 00 00 | 	byte	$00, $00, $00, $00
12774     20 66 00 00 | 	long	@@@_fs9p_internal_cc_v_read_0277
12778     00 00 00 00 | 	byte	$00, $00, $00, $00
1277c     D0 66 00 00 | 	long	@@@_fs9p_internal_cc_v_write_0280
12780     00 00 00 00 | 	byte	$00, $00, $00, $00
12784     68 67 00 00 | 	long	@@@_fs9p_internal_cc_v_lseek_0285
12788     00 00 00 00 | 	byte	$00, $00, $00, $00
1278c     18 6A 00 00 | 	long	@@@_fs9p_internal_cc_v_ioctl_0286
12790     00 00 00 00 | 	byte	$00, $00, $00, $00
12794     30 63 00 00 | 	long	@@@_fs9p_internal_cc_v_opendir_0261
12798     00 00 00 00 | 	byte	$00, $00, $00, $00
1279c     E4 63 00 00 | 	long	@@@_fs9p_internal_cc_v_closedir_0264
127a0     00 00 00 00 | 	byte	$00, $00, $00, $00
127a4     18 64 00 00 | 	long	@@@_fs9p_internal_cc_v_readdir_0272
127a8     00 00 00 00 | 	byte	$00, $00, $00, $00
127ac     E8 65 00 00 | 	long	@@@_fs9p_internal_cc_v_stat_0274
127b0     00 00 00 00 | 	byte	$00, $00, $00, $00
127b4     20 6A 00 00 | 	long	@@@_fs9p_internal_cc_v_mkdir_0289
127b8     00 00 00 00 | 	byte	$00, $00, $00, $00
127bc     FC 6A 00 00 | 	long	@@@_fs9p_internal_cc_v_rmdir_0292
127c0     00 00 00 00 | 	byte	$00, $00, $00, $00
127c4     DC 6A 00 00 | 	long	@@@_fs9p_internal_cc_v_remove_0291
127c8     00 00 00 00 | 	byte	$00, $00, $00, $00
127cc     1C 6B 00 00 | 	long	@@@_fs9p_internal_cc_v_rename_0293
127d0                 | 	alignl
127d0                 | _ff_cc_dat_
127d0     00 00 00 00 
127d4     00 00       | 	byte	$00[6]
127d6     43 55 45 41 
127da     41 41 41 43 
127de     45 45 45 49 
127e2     49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
127e6     45 92 92 4F 
127ea     4F 4F 55 55 
127ee     59 4F 55 4F 
127f2     9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
127f6     41 49 4F 55 
127fa     A5 A5 A6 A7 
127fe     A8 A9 AA AB 
12802     AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
12806     B0 B1 B2 B3 
1280a     B4 41 41 41 
1280e     B8 B9 BA BB 
12812     BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
12816     C0 C1 C2 C3 
1281a     C4 C5 41 41 
1281e     C8 C9 CA CB 
12822     CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
12826     D1 D1 45 45 
1282a     45 49 49 49 
1282e     49 D9 DA DB 
12832     DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
12836     4F E1 4F 4F 
1283a     4F 4F E6 E8 
1283e     E8 55 55 55 
12842     59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
12846     F0 F1 F2 F3 
1284a     F4 F5 F6 F7 
1284e     F8 F9 FA FB 
12852     FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
12856     01 00 04 00 
1285a     10 00 40 00 
1285e     00 01 00 02 
12862     00 00 01 00 | 	byte	$01, $00, $04, $00, $10, $00, $40, $00, $00, $01, $00, $02, $00, $00, $01, $00
12866     02 00 04 00 
1286a     08 00 10 00 
1286e     20 00 00 00 
12872     00 00 07 00 | 	byte	$02, $00, $04, $00, $08, $00, $10, $00, $20, $00, $00, $00, $00, $00, $07, $00
12876     00 00 00 00 
1287a     00 00 00 00 
1287e     00 00 00 00 
12882     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12884     C4 28 01 00 | 	long	@@@_ff_cc_dat_ + 244
12888     CC 28 01 00 | 	long	@@@_ff_cc_dat_ + 252
1288c     D4 28 01 00 | 	long	@@@_ff_cc_dat_ + 260
12890     DC 28 01 00 | 	long	@@@_ff_cc_dat_ + 268
12894     E4 28 01 00 | 	long	@@@_ff_cc_dat_ + 276
12898     EC 28 01 00 | 	long	@@@_ff_cc_dat_ + 284
1289c     F4 28 01 00 | 	long	@@@_ff_cc_dat_ + 292
128a0     00 00 00 00 | 	byte	$00, $00, $00, $00
128a4     FC 28 01 00 | 	long	@@@_ff_cc_dat_ + 300
128a8     04 29 01 00 | 	long	@@@_ff_cc_dat_ + 308
128ac     0C 29 01 00 | 	long	@@@_ff_cc_dat_ + 316
128b0     14 29 01 00 | 	long	@@@_ff_cc_dat_ + 324
128b4     1C 29 01 00 | 	long	@@@_ff_cc_dat_ + 332
128b8     24 29 01 00 | 	long	@@@_ff_cc_dat_ + 340
128bc     2C 29 01 00 | 	long	@@@_ff_cc_dat_ + 348
128c0     34 29 01 00 | 	long	@@@_ff_cc_dat_ + 356
128c4     00 00 00 00 | 	byte	$00, $00, $00, $00
128c8     BC CF 00 00 | 	long	@@@_ff_cc_v_open_0645
128cc     00 00 00 00 | 	byte	$00, $00, $00, $00
128d0     FC C7 00 00 | 	long	@@@_ff_cc_v_creat_0599
128d4     00 00 00 00 | 	byte	$00, $00, $00, $00
128d8     A4 C8 00 00 | 	long	@@@_ff_cc_v_close_0602
128dc     00 00 00 00 | 	byte	$00, $00, $00, $00
128e0     A4 CC 00 00 | 	long	@@@_ff_cc_v_read_0627
128e4     00 00 00 00 | 	byte	$00, $00, $00, $00
128e8     CC CD 00 00 | 	long	@@@_ff_cc_v_write_0631
128ec     00 00 00 00 | 	byte	$00, $00, $00, $00
128f0     C0 CE 00 00 | 	long	@@@_ff_cc_v_lseek_0635
128f4     00 00 00 00 | 	byte	$00, $00, $00, $00
128f8     60 CF 00 00 | 	long	@@@_ff_cc_v_ioctl
128fc     00 00 00 00 | 	byte	$00, $00, $00, $00
12900     E8 C8 00 00 | 	long	@@@_ff_cc_v_opendir_0605
12904     00 00 00 00 | 	byte	$00, $00, $00, $00
12908     68 C9 00 00 | 	long	@@@_ff_cc_v_closedir_0608
1290c     00 00 00 00 | 	byte	$00, $00, $00, $00
12910     AC C9 00 00 | 	long	@@@_ff_cc_v_readdir_0611
12914     00 00 00 00 | 	byte	$00, $00, $00, $00
12918     A0 CA 00 00 | 	long	@@@_ff_cc_v_stat_0623
1291c     00 00 00 00 | 	byte	$00, $00, $00, $00
12920     7C CF 00 00 | 	long	@@@_ff_cc_v_mkdir
12924     00 00 00 00 | 	byte	$00, $00, $00, $00
12928     9C CF 00 00 | 	long	@@@_ff_cc_v_rmdir_0639
1292c     00 00 00 00 | 	byte	$00, $00, $00, $00
12930     8C CF 00 00 | 	long	@@@_ff_cc_v_remove
12934     00 00 00 00 | 	byte	$00, $00, $00, $00
12938     AC CF 00 00 | 	long	@@@_ff_cc_v_rename_0641
1293c     00 00 00 00 
12940     00 00 00 00 
12944     00 00 00 00 
12948     00 00 00 00 | 	byte	$00[16]
1294c     01 00 00 00 | 	byte	$01, $00, $00, $00
12950                 | 	alignl
12950                 | __system__dat_
12950     00 00 00 00 
12954     00 00 00 00 | 	byte	$00[8]
12958     03 00 00 00 
1295c     00 00 00 00 
12960     00 00 00 00 
12964     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12968     00 00 00 00 
      ...             
12b94     00 00 00 00 
12b98     00 00 00 00 | 	byte	$00[564]
12b9c     05 00 00 00 
12ba0     00 00 00 00 
12ba4     00 00 00 00 
12ba8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12bac     74 2D 01 00 | 	long	@@@__system__dat_ + 1060
12bb0     7C 2D 01 00 | 	long	@@@__system__dat_ + 1068
12bb4     00 00 00 00 | 	byte	$00, $00, $00, $00
12bb8     84 2D 01 00 | 	long	@@@__system__dat_ + 1076
12bbc     8C 2D 01 00 | 	long	@@@__system__dat_ + 1084
12bc0     00 00 00 00 
12bc4     00 00 00 00 | 	byte	$00[8]
12bc8     01 00 00 00 
12bcc     06 00 00 00 
12bd0     00 00 00 00 
12bd4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12bd8     00 00 00 00 | 	byte	$00, $00, $00, $00
12bdc     94 2D 01 00 | 	long	@@@__system__dat_ + 1092
12be0     9C 2D 01 00 | 	long	@@@__system__dat_ + 1100
12be4     00 00 00 00 | 	byte	$00, $00, $00, $00
12be8     A4 2D 01 00 | 	long	@@@__system__dat_ + 1108
12bec     AC 2D 01 00 | 	long	@@@__system__dat_ + 1116
12bf0     00 00 00 00 
12bf4     00 00 00 00 | 	byte	$00[8]
12bf8     01 00 00 00 
12bfc     06 00 00 00 
12c00     00 00 00 00 
12c04     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12c08     00 00 00 00 | 	byte	$00, $00, $00, $00
12c0c     B4 2D 01 00 | 	long	@@@__system__dat_ + 1124
12c10     BC 2D 01 00 | 	long	@@@__system__dat_ + 1132
12c14     00 00 00 00 | 	byte	$00, $00, $00, $00
12c18     C4 2D 01 00 | 	long	@@@__system__dat_ + 1140
12c1c     CC 2D 01 00 | 	long	@@@__system__dat_ + 1148
12c20     00 00 00 00 
      ...             
12d70     00 00 00 00 
12d74     00 00 00 00 | 	byte	$00[344]
12d78     D0 DC 00 00 | 	long	@@@__system___tx
12d7c     00 00 00 00 | 	byte	$00, $00, $00, $00
12d80     18 DD 00 00 | 	long	@@@__system___rx
12d84     00 00 00 00 | 	byte	$00, $00, $00, $00
12d88     A8 0C 01 00 | 	long	@@@__system___rxtxioctl_0960
12d8c     00 00 00 00 | 	byte	$00, $00, $00, $00
12d90     20 0D 01 00 | 	long	@@@__system____dummy_flush_0961
12d94     00 00 00 00 | 	byte	$00, $00, $00, $00
12d98     D0 DC 00 00 | 	long	@@@__system___tx
12d9c     00 00 00 00 | 	byte	$00, $00, $00, $00
12da0     18 DD 00 00 | 	long	@@@__system___rx
12da4     00 00 00 00 | 	byte	$00, $00, $00, $00
12da8     A8 0C 01 00 | 	long	@@@__system___rxtxioctl_0960
12dac     00 00 00 00 | 	byte	$00, $00, $00, $00
12db0     20 0D 01 00 | 	long	@@@__system____dummy_flush_0961
12db4     00 00 00 00 | 	byte	$00, $00, $00, $00
12db8     D0 DC 00 00 | 	long	@@@__system___tx
12dbc     00 00 00 00 | 	byte	$00, $00, $00, $00
12dc0     18 DD 00 00 | 	long	@@@__system___rx
12dc4     00 00 00 00 | 	byte	$00, $00, $00, $00
12dc8     A8 0C 01 00 | 	long	@@@__system___rxtxioctl_0960
12dcc     00 00 00 00 | 	byte	$00, $00, $00, $00
12dd0     20 0D 01 00 | 	long	@@@__system____dummy_flush_0961
12dd4                 | __heap_base
12dd4     00 00 00 00 
      ...             
13dd4     00 00 00 00 
13dd8     00 00 00 00 | 	long	0[1026]
13ddc                 | objmem
13ddc                 | 	long	0[0]
13ddc                 | stackspace
13ddc     00 00 00 00 | 	long	0[1]
13de0 10e             | 	org	COG_BSS_START
13de0 10e             | ___run_clkmode_0112
13de0 10e             | 	res	1
13de0 10f             | ___run_dst_0111
13de0 10f             | 	res	1
13de0 110             | ___run_size
13de0 110             | 	res	1
13de0 111             | ___run_src
13de0 111             | 	res	1
13de0 112             | __run_tmp004_
13de0 112             | 	res	1
13de0 113             | __run_tmp005_
13de0 113             | 	res	1
13de0 114             | _var01
13de0 114             | 	res	1
13de0 115             | _var02
13de0 115             | 	res	1
13de0 116             | _var03
13de0 116             | 	res	1
13de0 117             | _var04
13de0 117             | 	res	1
13de0 118             | _var05
13de0 118             | 	res	1
13de0 119             | _var06
13de0 119             | 	res	1
13de0 11a             | _var07
13de0 11a             | 	res	1
13de0 11b             | _var08
13de0 11b             | 	res	1
13de0 11c             | _var09
13de0 11c             | 	res	1
13de0 11d             | _var10
13de0 11d             | 	res	1
13de0 11e             | _var11
13de0 11e             | 	res	1
13de0 11f             | arg01
13de0 11f             | 	res	1
13de0 120             | arg02
13de0 120             | 	res	1
13de0 121             | arg03
13de0 121             | 	res	1
13de0 122             | arg04
13de0 122             | 	res	1
13de0 123             | arg05
13de0 123             | 	res	1
13de0 124             | local01
13de0 124             | 	res	1
13de0 125             | local02
13de0 125             | 	res	1
13de0 126             | local03
13de0 126             | 	res	1
13de0 127             | local04
13de0 127             | 	res	1
13de0 128             | local05
13de0 128             | 	res	1
13de0 129             | local06
13de0 129             | 	res	1
13de0 12a             | local07
13de0 12a             | 	res	1
13de0 12b             | local08
13de0 12b             | 	res	1
13de0 12c             | local09
13de0 12c             | 	res	1
13de0 12d             | local10
13de0 12d             | 	res	1
13de0 12e             | local11
13de0 12e             | 	res	1
13de0 12f             | local12
13de0 12f             | 	res	1
13de0 130             | local13
13de0 130             | 	res	1
13de0 131             | local14
13de0 131             | 	res	1
13de0 132             | local15
13de0 132             | 	res	1
13de0 133             | local16
13de0 133             | 	res	1
13de0 134             | local17
13de0 134             | 	res	1
13de0 135             | local18
13de0 135             | 	res	1
13de0 136             | local19
13de0 136             | 	res	1
13de0 137             | local20
13de0 137             | 	res	1
13de0 138             | local21
13de0 138             | 	res	1
13de0 139             | local22
13de0 139             | 	res	1
13de0 13a             | local23
13de0 13a             | 	res	1
13de0 13b             | local24
13de0 13b             | 	res	1
13de0 13c             | local25
13de0 13c             | 	res	1
13de0 13d             | local26
13de0 13d             | 	res	1
13de0 13e             | local27
13de0 13e             | 	res	1
13de0 13f             | local28
13de0 13f             | 	res	1
13de0 140             | local29
13de0 140             | 	res	1
13de0 141             | local30
13de0 141             | 	res	1
13de0 142             | local31
13de0 142             | 	res	1
13de0 143             | local32
13de0 143             | 	res	1
13de0 144             | local33
13de0 144             | 	res	1
13de0 145             | local34
13de0 145             | 	res	1
13de0 146             | local35
13de0 146             | 	res	1
13de0 147             | local36
13de0 147             | 	res	1
13de0 148             | local37
13de0 148             | 	res	1
13de0 149             | local38
13de0 149             | 	res	1
13de0 14a             | local39
13de0 14a             | 	res	1
13de0 14b             | local40
13de0 14b             | 	res	1
13de0 14c             | local41
13de0 14c             | 	res	1
13de0 14d             | local42
13de0 14d             | 	res	1
13de0 14e             | muldiva_
13de0 14e             | 	res	1
13de0 14f             | muldivb_
13de0 14f             | 	res	1
13de0 150             | 	fit	480
13de0 150             | 
