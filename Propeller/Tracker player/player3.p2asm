con
	_clkfreq = 354693878
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 354693647
	long	0 ' clock mode: will default to $1c364fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##29582584
	waitx	##200000
	mov	pa, ##29582587
	hubset	pa
	wrlong	pa, #24
	wrlong	##354693647, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_program
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra
	add	ptra, #4
	rdlong	result1, ptra
	add	ptra, #4
	rdlong	arg01, ptra
	add	ptra, #4
	rdlong	arg02, ptra
	add	ptra, #4
	rdlong	arg03, ptra
	add	ptra, #4
	rdlong	arg04, ptra
	sub	ptra, #16
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    pop	fcache_tmpb_
    add	fcache_tmpb_, pa
    push	fcache_tmpb_
    sub	fcache_tmpb_, pa
    shr	pa, #2
    altd	pa
    mov	 0-0, ret_instr_
    sub	pa, #1
    setq	pa
    rdlong	$0, fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    ret
fcache_tmpb_
    long 0
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

unsdivide_
       setq    #0
       qdiv    muldiva_, muldivb_
       getqx   muldivb_
 _ret_ getqy   muldiva_

divide_
       abs     muldiva_,muldiva_     wc       'abs(x)
       muxc    itmp2_,#%11                    'store sign of x
       abs     muldivb_,muldivb_     wcz      'abs(y)
 if_c  xor     itmp2_,#%10                    'store sign of y
 if_z  ret
       call    #unsdivide_
       test    itmp2_,#1        wc       'restore sign, remainder
       negc    muldiva_,muldiva_ 
       test    itmp2_,#%10      wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_
__pc long 0
__setjmp
    pop __pc
    mov result1, #0
    mov result2, #0
    mov abortchain, arg01
    wrlong fp, arg01
    add arg01, #4
    wrlong ptra, arg01
    add arg01, #4
    wrlong objptr, arg01
    add arg01, #4
    wrlong __pc, arg01
    jmp __pc
__unwind_pc long 0
__unwind_stack
   pop  __unwind_pc
__unwind_loop
   cmp  arg01, arg02 wz
  if_z jmp #__unwind_stack_ret
   mov   ptra, arg01
   call  #popregs_
   mov   arg01, fp
   jmp   #__unwind_loop
__unwind_stack_ret
   jmp  __unwind_pc
__longjmp
    pop __pc
    cmp    arg01, #0 wz
 if_z jmp #nocatch
    mov result1, arg02
    mov result2, #1
    rdlong arg02, arg01
    add arg01, #4
    rdlong ptra, arg01
    add arg01, #4
    rdlong objptr, arg01
    add arg01, #4
    rdlong __pc, arg01
    mov arg01, fp
    call #__unwind_stack
__longjmp_ret
    jmp  __pc
nocatch
    cmp arg03, #0 wz
 if_z jmp #cogexit
    jmp #__longjmp_ret

__heap_ptr
	long	@__heap_base
abortchain
	long	0
entryptr__
	long	@entry
itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr___struct___bas_wrap_sender_tx_
	long	@__struct___bas_wrap_sender_tx
ptr___struct__s_vfs_file_t_putchar_
	long	@__struct__s_vfs_file_t_putchar
ptr___system__dat__
	long	@__system__dat_
ptr__audio019_spin2_dat__
	long	@_audio019_spin2_dat_
ptr__dat__
	long	@_dat_
ptr__hng030rm_spin2_dat__
	long	@_hng030rm_spin2_dat_
ptr__hng030rm_spin2_putchar_
	long	@_hng030rm_spin2_putchar
ptr__hng030rm_spin2_putpixel1_
	long	@_hng030rm_spin2_putpixel1
ptr__hng030rm_spin2_putpixel2_
	long	@_hng030rm_spin2_putpixel2
ptr__hng030rm_spin2_putpixel4_
	long	@_hng030rm_spin2_putpixel4
ptr__hng030rm_spin2_putpixel8_
	long	@_hng030rm_spin2_putpixel8
ptr__retrocog_spin2_serialcog_
	long	@_retrocog_spin2_serialcog
ptr__trackerplayer_spin2_dat__
	long	@_trackerplayer_spin2_dat_
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	0
result3
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' function startvideo(mode=64, pin=0) 'todo return a cog#
_startvideo
	call	#_hng030rm_spin2_start
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_hng030rm_spin2_setbordercolor
' v030.start(mode,pin)
' v030.setbordercolor(0,0,0)
' open SendRecvDevice(@v030.putchar, nil, nil) as #0
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putchar_
	call	#__system___make_methodptr
	mov	result3, #0
	mov	result2, #0
	mov	arg02, result1
	mov	arg03, #0
	mov	arg04, #0
	mov	arg01, #0
	call	#__system___basic_open
	mov	result1, #0
_startvideo_ret
	ret

' 
' function addr(byref v as any)
_addr
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #8
	add	fp, #4
	wrlong	arg01, fp
' 
' return(cast(ulong,@v))
	mov	result1, arg01
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
_addr_ret
	ret

' 
' '0 - samplestart   - a pointer to the sample start
' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
' '2 - loopstart     - loop start
' '3 - loopend       - loop end, has to be >=loopstart+2
' '4 - volume        - sample volume, 16384=1
' '5 - pan           - 0..16384
' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
' '8 - cmd 
' 
' 
' sub test 
_test
	mov	COUNT_, #1
	call	#pushregs_
	mov	arg02, #22
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#5, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3778
	rdbyte	local01, objptr
	shl	local01, #2
	add	objptr, ##613
	add	local01, objptr
	rdlong	arg01, local01
	sub	objptr, ##4444
	call	#_hng030rm_spin2_write
	add	objptr, ##4584
	rdlong	arg01, objptr
	sub	objptr, ##4584
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3818
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local01, objptr
	sub	objptr, ##3887
	add	arg01, local01
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
	mov	arg02, #22
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#32, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3779
	rdbyte	local01, objptr
	shl	local01, #2
	add	objptr, ##612
	add	local01, objptr
	rdlong	arg01, local01
	sub	objptr, ##4444
	call	#_hng030rm_spin2_write
	add	objptr, ##4584
	rdlong	arg01, objptr
	sub	objptr, ##4584
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#28, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3822
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local01, objptr
	sub	objptr, ##3891
	add	arg01, local01
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
	mov	arg02, #22
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#60, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3780
	rdbyte	local01, objptr
	shl	local01, #2
	add	objptr, ##611
	add	local01, objptr
	rdlong	arg01, local01
	sub	objptr, ##4444
	call	#_hng030rm_spin2_write
	add	objptr, ##4584
	rdlong	arg01, objptr
	sub	objptr, ##4584
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#56, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3826
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local01, objptr
	sub	objptr, ##3895
	add	arg01, local01
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#84, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3830
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local01, objptr
	sub	objptr, ##3899
	add	arg01, local01
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
	mov	arg02, #22
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#88, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#22, objptr
	add	objptr, ##3781
	rdbyte	local01, objptr
	shl	local01, #2
	add	objptr, ##610
	add	local01, objptr
	rdlong	arg01, local01
	sub	objptr, ##4444
	call	#_hng030rm_spin2_write
	add	objptr, ##4584
	rdlong	arg01, objptr
	sub	objptr, ##4584
	call	#_hng030rm_spin2_write
	mov	ptra, fp
	call	#popregs_
_test_ret
	ret

' 
' 
' sub getinfo(ma,num)
_getinfo
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #4
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#4, objptr
	sub	objptr, #53
' 'v030. setwritecolors(170,147):
' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg02, ##@LR__0504
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
' ': v030. setwritecolors(154,147)
' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
	mov	local03, #0
LR__0001
	mov	local04, local03
	shl	local04, #2
	add	objptr, ##4444
	add	local04, objptr
	mov	local05, ##@LR__0505
	mov	arg01, local03
	mov	arg02, #2
	sub	objptr, ##4444
	mov	arg03, #10
	call	#__system__Number_S
	mov	arg02, result1
	mov	arg01, local05
	call	#__system___string_concat
	mov	local05, result1
	mov	arg01, #19
	mov	arg02, ##@LR__0498
	call	#__system__String_S
	mov	arg02, result1
	mov	arg01, local05
	call	#__system___string_concat
	wrlong	result1, local04
	add	local03, #1
	cmps	local03, #32 wcz
 if_b	jmp	#LR__0001
' for i=1 to num
	mov	local03, #1
	add	local02, #1
LR__0002
	cmps	local03, local02 wcz
 if_ae	jmp	#LR__0007
'   for j=0 to 21
	mov	local06, #0
LR__0003
	mov	arg01, local03
	shl	arg01, #2
	add	objptr, ##4444
	add	arg01, objptr
	sub	objptr, ##4444
	call	#_addr
' asm
	rdlong	local07, result1
' return r
	add	objptr, ##4620
	wrlong	local07, objptr
	mov	arg01, local01
	add	arg01, #20
	mov	local05, local03
	sub	local05, #1
	mov	local08, local05
	shl	local08, #4
	sub	local08, local05
	shl	local08, #1
	add	arg01, local08
	add	arg01, local06
' asm
	rdbyte	result1, arg01
' return r
	mov	local07, result1
	zerox	local07, #7
	add	objptr, #4
	wrlong	local07, objptr
'     a=lpeek(addr(sn$(i)))
'     b=(peek(ma+20+30*(i-1)+j))
'     if b>=32 then poke a+j,b
	sub	objptr, ##4624
	cmps	local07, #32 wcz
 if_b	jmp	#LR__0004
	add	objptr, ##4620
	rdlong	arg01, objptr
	add	arg01, local06
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, ##4624
' asm
	wrbyte	arg02, arg01
LR__0004
	add	local06, #1
	cmps	local06, #22 wcz
 if_b	jmp	#LR__0003
	mov	arg01, local01
	add	arg01, #20
	mov	local08, local03
	sub	local08, #1
	mov	local09, local08
	shl	local09, #4
	sub	local09, local08
	shl	local09, #1
	add	arg01, local09
	add	arg01, #22
' asm
	rdbyte	local05, arg01
' return r
	zerox	local05, #7
	shl	local05, #8
	mov	arg01, local01
	add	arg01, #20
	mov	local10, local03
	sub	local10, #1
	mov	local11, local10
	shl	local11, #4
	sub	local11, local10
	shl	local11, #1
	add	arg01, local11
	add	arg01, #23
' asm
	rdbyte	local08, arg01
' return r
	zerox	local08, #7
	add	local05, local08
	shl	local05, #1
	add	objptr, ##4628
	wrlong	local05, objptr
	mov	arg01, local01
	add	arg01, #20
	mov	local08, local03
	sub	local08, #1
	mov	local09, local08
	shl	local09, #4
	sub	local09, local08
	shl	local09, #1
	add	arg01, local09
	add	arg01, #26
' asm
	rdbyte	local05, arg01
' return r
	zerox	local05, #7
	shl	local05, #8
	mov	arg01, local01
	add	arg01, #20
	mov	local10, local03
	sub	local10, #1
	mov	local11, local10
	shl	local11, #4
	sub	local11, local10
	shl	local11, #1
	add	arg01, local11
	add	arg01, #27
' asm
	rdbyte	local08, arg01
' return r
	zerox	local08, #7
	add	local05, local08
	shl	local05, #1
	add	objptr, #4
	wrlong	local05, objptr
	mov	arg01, local01
	add	arg01, #20
	mov	local08, local03
	sub	local08, #1
	mov	local09, local08
	shl	local09, #4
	sub	local09, local08
	shl	local09, #1
	add	arg01, local09
	add	arg01, #28
' asm
	rdbyte	local05, arg01
' return r
	zerox	local05, #7
	shl	local05, #8
	mov	arg01, local01
	add	arg01, #20
	mov	local10, local03
	sub	local10, #1
	mov	local11, local10
	shl	local11, #4
	sub	local11, local10
	shl	local11, #1
	add	arg01, local11
	add	arg01, #29
' asm
	rdbyte	local08, arg01
' return r
	zerox	local08, #7
	add	local05, local08
	shl	local05, #1
	add	objptr, #4
	wrlong	local05, objptr
	mov	arg01, local01
	add	arg01, #20
	mov	local05, local03
	sub	local05, #1
	mov	local08, local05
	shl	local08, #4
	sub	local08, local05
	shl	local08, #1
	add	arg01, local08
	add	arg01, #24
' asm
	rdbyte	local07, arg01
' return r
	zerox	local07, #7
	add	objptr, #4
	wrlong	local07, objptr
	mov	arg01, local01
	add	arg01, #20
	mov	local05, local03
	sub	local05, #1
	mov	local08, local05
	shl	local08, #4
	sub	local08, local05
	shl	local08, #1
	add	arg01, local08
	add	arg01, #25
' asm
	rdbyte	result1, arg01
' return r
	mov	local07, result1
	zerox	local07, #7
	add	objptr, #4
	wrlong	local07, objptr
	sub	objptr, ##4644
' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
' ft=peek(ma+20+30*(i-1)+24)
' vl=peek(ma+20+30*(i-1)+25)
' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
	cmps	local03, #16 wcz
 if_ae	jmp	#LR__0005
	mov	arg02, #5
	add	arg02, local03
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local09, local03
	shl	local09, #2
	add	objptr, ##4444
	add	local09, objptr
	rdlong	arg02, local09
	mov	arg01, #0
	mov	arg03, #0
	sub	objptr, ##4444
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, #5
	add	arg02, local03
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#24, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4628
	rdlong	arg02, objptr
	sub	objptr, ##4628
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, #5
	add	arg02, local03
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#31, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4640
	rdlong	arg02, objptr
	sub	objptr, ##4640
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, #5
	add	arg02, local03
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#34, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4644
	rdlong	arg02, objptr
	sub	objptr, ##4644
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, #5
	add	arg02, local03
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#37, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4632
	rdlong	arg02, objptr
	sub	objptr, ##4632
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, #5
	add	arg02, local03
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#43, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4636
	rdlong	arg02, objptr
	sub	objptr, ##4636
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
LR__0005
' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
	cmps	local03, #16 wcz
 if_b	jmp	#LR__0006
	mov	arg02, local03
	sub	arg02, #11
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#57, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local09, local03
	shl	local09, #2
	add	objptr, ##4444
	add	local09, objptr
	rdlong	arg02, local09
	mov	arg01, #0
	mov	arg03, #0
	sub	objptr, ##4444
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local03
	sub	arg02, #11
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#80, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4628
	rdlong	arg02, objptr
	sub	objptr, ##4628
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local03
	sub	arg02, #11
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#87, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4640
	rdlong	arg02, objptr
	sub	objptr, ##4640
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local03
	sub	arg02, #11
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#90, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4644
	rdlong	arg02, objptr
	sub	objptr, ##4644
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local03
	sub	arg02, #11
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#93, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4632
	rdlong	arg02, objptr
	sub	objptr, ##4632
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local03
	sub	arg02, #11
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#99, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4636
	rdlong	arg02, objptr
	sub	objptr, ##4636
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
LR__0006
	add	local03, #1
	jmp	#LR__0002
LR__0007
' print
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_getinfo_ret
	ret

_program
	mov	COUNT_, #12
	call	#pushregs_
	add	objptr, #236
	call	#_retrocog_spin2_start
	add	objptr, ##1088
	wrlong	result1, objptr
' c=rm.start()
' return c
	sub	objptr, ##1324
	mov	arg01, #64
	mov	arg02, #0
	call	#_startvideo
	add	objptr, #28
	rdlong	local01, objptr
	add	objptr, ##3464
	wrlong	local01, objptr
	sub	objptr, ##3468
	rdlong	local01, objptr
	add	objptr, ##3472
	wrlong	local01, objptr
	sub	objptr, ##3496
' 
' ' create a new screen
' ' 22 lines std border
' ' 32 lines of big title. As it is constant we fill it manually, lines 22..53
' ' 4 lines border lines 54..57
' ' 22x16=352 lines of text lines 58..409
' ' 6 lines of border at 410..415
' ' 64 lines of 4bpp oscilloscope at 416..479 ' todo: make it 2bpp. The driver has a bug: the timings[5] is not controlled by DL - TODO.
' ' 6 lines of border at 480..485
' ' 2x16=32 lines of text at 486- 517
' ' standard border at 518-539
' 
' ' We need 10752 bytes for text and 28672 bytes for graphics = 25088 bytes
' ' graphic starts at 79000
' ' text start at 76600
' 
' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i ' let it be here for debug
	mov	local02, #0
	loc	pa,	#(@LR__0010-@LR__0008)
	call	#FCACHE_LOAD_
LR__0008
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	add	objptr, ##2164
	rdlong	arg01, objptr
	sub	objptr, ##3492
	mov	local04, local02
	shl	local04, #2
	add	arg01, local04
' asm
	rdlong	result1, arg01
' return r
	wrlong	result1, local03
	add	local02, #1
	cmps	local02, ##540 wcz
 if_b	jmp	#LR__0008
' 
' ' Prepare the title
' 
' for i=0 to 28: title(i)=$77710000 : next i
	mov	local02, #0
LR__0009
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##3500
	add	local03, objptr
	wrlong	##2003894272, local03
	add	local02, #1
	cmps	local02, #29 wcz
	sub	objptr, ##3500
 if_b	jmp	#LR__0009
LR__0010
	add	objptr, ##3524
	rdlong	local01, objptr
	add	local01, #80
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #114
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #111
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #112
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #50
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #112
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #108
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #97
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #121
	wrlong	local01, objptr
	add	objptr, #8
	rdlong	local01, objptr
	add	local01, #118
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #46
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #48
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #46
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #48
	wrlong	local01, objptr
	add	objptr, #4
	rdlong	local01, objptr
	add	local01, #49
	wrlong	local01, objptr
	sub	objptr, ##3584
' 
' ' 22 lines of upper border
' 
' for i=0 to 21 : dlcopy(i)=0: next i
	mov	local02, #0
	loc	pa,	#(@LR__0012-@LR__0011)
	call	#FCACHE_LOAD_
LR__0011
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	wrlong	#0, local03
	add	local02, #1
	cmps	local02, #22 wcz
	sub	objptr, ##1328
 if_b	jmp	#LR__0011
LR__0012
' 
' ' big text titlle logo. Tell the driver via DL that it should display the text from "title" table
' 
' for i=0 to 15
	mov	local02, #0
LR__0013
'   for j=0 to 1
	mov	local05, #0
LR__0014
	mov	local03, local02
	shl	local03, #1
	mov	local06, #22
	add	local06, local03
	add	local06, local05
	shl	local06, #2
	add	objptr, ##1328
	add	local06, objptr
	add	objptr, ##2172
	mov	arg01, objptr
	sub	objptr, ##3500
	call	#_addr
	mov	local07, result1
	shl	local07, #12
	add	local07, ##8193
	mov	local04, local02
	shl	local04, #8
	add	local07, local04
	wrlong	local07, local06
	add	local05, #1
	cmps	local05, #2 wcz
 if_b	jmp	#LR__0014
	add	local02, #1
	cmps	local02, #16 wcz
 if_b	jmp	#LR__0013
' 
' ' 4 empty lines under the logo
' 
' for i=54 to 57 : dlcopy(i)= dlcopy(0) : next i 
	mov	local02, #54
	loc	pa,	#(@LR__0016-@LR__0015)
	call	#FCACHE_LOAD_
LR__0015
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	rdlong	local08, objptr
	sub	objptr, ##1328
	wrlong	local08, local03
	add	local02, #1
	cmp	local02, #58 wcz
 if_b	jmp	#LR__0015
LR__0016
	add	objptr, ##3616
	wrlong	##484864, objptr
	sub	objptr, ##3616
' 
' ' Now make 22 text lines starting at 79e00
' 
' address=$76600
' for i=0 to 21
	mov	local02, #0
	loc	pa,	#(@LR__0021-@LR__0017)
	call	#FCACHE_LOAD_
LR__0017
'   for j=0 to 15
	mov	local05, #0
LR__0018
	mov	local03, local02
	shl	local03, #4
	mov	local06, #58
	add	local06, local03
	add	local06, local05
	shl	local06, #2
	add	objptr, ##1328
	add	local06, objptr
	add	objptr, ##2288
	rdlong	local07, objptr
	sub	objptr, ##3616
	shl	local07, #12
	mov	local04, local05
	shl	local04, #8
	add	local07, local04
	mov	local09, local02
	shl	local09, #2
	add	local07, local09
	add	local07, #1
	wrlong	local07, local06
	add	local05, #1
	cmps	local05, #16 wcz
 if_b	jmp	#LR__0018
	add	objptr, ##3616
	rdlong	local01, objptr
	add	local01, #448
	wrlong	local01, objptr
	sub	objptr, ##3616
	add	local02, #1
	cmps	local02, #22 wcz
 if_b	jmp	#LR__0017
' 
' ' and add 2 text lines at the bottpm
' 
' for i=0 to 1
	mov	local02, #0
LR__0019
'   for j=0 to 15
	mov	local05, #0
LR__0020
	mov	local03, local02
	shl	local03, #4
	mov	local06, #486
	add	local06, local03
	add	local06, local05
	shl	local06, #2
	add	objptr, ##1328
	add	local06, objptr
	add	objptr, ##2288
	rdlong	local07, objptr
	sub	objptr, ##3616
	shl	local07, #12
	mov	local04, local05
	shl	local04, #8
	add	local07, local04
	mov	local09, #22
	add	local09, local02
	shl	local09, #2
	add	local07, local09
	add	local07, #1
	wrlong	local07, local06
	add	local05, #1
	cmps	local05, #16 wcz
 if_b	jmp	#LR__0020
	add	objptr, ##3616
	rdlong	local01, objptr
	add	local01, #448
	wrlong	local01, objptr
	sub	objptr, ##3616
	add	local02, #1
	cmps	local02, #2 wcz
 if_b	jmp	#LR__0019
LR__0021
' 
' ' add 6 empty lines over the scope area
' 
' for i=410 to 415 : dlcopy(i)=0 : next i
	mov	local02, #410
	loc	pa,	#(@LR__0023-@LR__0022)
	call	#FCACHE_LOAD_
LR__0022
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	wrlong	#0, local03
	add	local02, #1
	cmp	local02, #416 wcz
	sub	objptr, ##1328
 if_b	jmp	#LR__0022
LR__0023
	add	objptr, ##3616
	wrlong	##495616, objptr
	sub	objptr, ##3616
' 
' ' the scope area, 4 bpp graphics
' 
' address=$79000   
' 
' for i=416 to 479: dlcopy(i)= ((address+448*(i-416)) shl 12) + %1010 : next i
	mov	local02, #416
	loc	pa,	#(@LR__0027-@LR__0024)
	call	#FCACHE_LOAD_
LR__0024
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	add	objptr, ##2288
	rdlong	local08, objptr
	sub	objptr, ##3616
	mov	local10, local02
	sub	local10, #416
	mov	local04, local10
	shl	local04, #3
	sub	local04, local10
	shl	local04, #6
	add	local08, local04
	shl	local08, #12
	add	local08, #10
	wrlong	local08, local03
	add	local02, #1
	cmp	local02, #480 wcz
 if_b	jmp	#LR__0024
' 
' ' add 6 empty lines under the scope area
' 
' for i=480 to 485 : dlcopy(i)=0 : next i
	mov	local02, #480
LR__0025
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	wrlong	#0, local03
	add	local02, #1
	cmp	local02, #486 wcz
	sub	objptr, ##1328
 if_b	jmp	#LR__0025
' 
' ' 22 standard border lines at bottom
' 
' for i=518 to 539 : dlcopy(i)=0 : next i
	mov	local02, ##518
LR__0026
	mov	local03, local02
	shl	local03, #2
	add	objptr, ##1328
	add	local03, objptr
	wrlong	#0, local03
	add	local02, #1
	cmp	local02, ##540 wcz
	sub	objptr, ##1328
 if_b	jmp	#LR__0026
LR__0027
	add	objptr, ##1328
	mov	arg01, objptr
	sub	objptr, ##1328
	call	#_addr
	add	objptr, #28
	wrlong	result1, objptr
	sub	objptr, #28
	wrlong	##484864, objptr
	mov	arg01, #154
	mov	arg02, #147
	call	#_hng030rm_spin2_cls
' 
' ' tell the driver where is the new dl and buffer
' 
' v030.dl_ptr=addr(dlcopy) 
' v030.buf_ptr=$76600
' cls
' for i=$79000 to $7FFFC step 4 : lpoke i,0 : next i
	mov	local02, ##495616
	loc	pa,	#(@LR__0029-@LR__0028)
	call	#FCACHE_LOAD_
LR__0028
' asm
	wrlong	#0, local02
	add	local02, #4
	cmp	local02, ##524284 wcz
 if_be	jmp	#LR__0028
LR__0029
	add	objptr, #228
	rdlong	local01, objptr
	sub	objptr, #12
	wrlong	local01, objptr
	sub	objptr, #216
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	mov	arg04, #0
	call	#_hng030rm_spin2_setcolor
	mov	arg01, #1
	mov	arg02, #0
	mov	arg03, #0
	mov	arg04, #255
	call	#_hng030rm_spin2_setcolor
	mov	arg01, #2
	mov	arg02, #0
	mov	arg03, #255
	mov	arg04, #0
	call	#_hng030rm_spin2_setcolor
	mov	arg01, #3
	mov	arg02, #255
	mov	arg03, #0
	mov	arg04, #0
	call	#_hng030rm_spin2_setcolor
	wrlong	##495616, objptr
	mov	arg01, #100
	call	#__system___waitms
	add	objptr, #144
	wrlong	#112, objptr
	add	objptr, #4
	wrlong	#64, objptr
	sub	objptr, #148
' 
' v030.putpixel=v030.p4
' 
' v030.setcolor(0,0,0,0)
' v030.setcolor(1,0,0,255)
' v030.setcolor(2,0,255,0)
' v030.setcolor(3,255,0,0)
' v030.buf_ptr=$79000
' waitms(100)
' v030.cpl=112
' v030.lines=64
' for i=0 to 100: v030.putpixel(i,4,3) : next i
	mov	local02, #0
	loc	pa,	#(@LR__0031-@LR__0030)
	call	#FCACHE_LOAD_
LR__0030
	add	local02, #1
	cmps	local02, #101 wcz
 if_b	jmp	#LR__0030
LR__0031
	mov	arg01, #20
	mov	arg02, #20
	mov	arg03, #10
	mov	arg04, #1
	call	#_hng030rm_spin2_fcircle
	mov	arg03, ##@LR__0506
	mov	arg01, #10
	mov	arg02, #10
	mov	arg04, #3
	mov	arg05, #0
	call	#_hng030rm_spin2_outtextxycg
' 
' 
' v030.fcircle(20,20,10,1)
' v030.outtextxycg(10,10,"Abcdef",3,0)
' for i=1 to 100 : v030.plot(i,10,3) : next i
	mov	local02, #1
LR__0032
	mov	arg01, local02
	mov	arg02, #10
	mov	arg03, #3
	call	#_hng030rm_spin2_plot
	add	local02, #1
	cmp	local02, #101 wcz
 if_b	jmp	#LR__0032
	mov	arg01, #0
	mov	arg02, #32
	mov	arg03, #447
	mov	arg04, #33
	mov	arg05, #3
' line(x1,y1,x2,y2,c)
	call	#_hng030rm_spin2_line
	mov	arg01, #250
	mov	arg02, #10
	mov	arg03, #1
	call	#_hng030rm_spin2_plot
	wrlong	##484864, objptr
	add	objptr, #144
	wrlong	#112, objptr
' 
' return long[@ataripalette+4*color]
	add	ptr__hng030rm_spin2_dat__, ##6232
	mov	local11, ptr__hng030rm_spin2_dat__
	add	local11, #452
	rdlong	result1, local11
	sub	ptr__hng030rm_spin2_dat__, ##6232
	add	objptr, ##3476
	wrlong	result1, objptr
	mov	arg01, result1
' 
' bordercolor:=color
	sub	objptr, ##3576
	wrlong	arg01, objptr
	add	objptr, ##3580
	wrlong	#128, objptr
	add	objptr, #4
	wrlong	#61, objptr
	add	objptr, #4
	wrlong	#60, objptr
	add	objptr, #4
	wrlong	#59, objptr
	add	objptr, #4
	wrlong	#58, objptr
	add	objptr, #4
	wrlong	#3, objptr
	mov	local01, ##@LR__0507
	add	objptr, ##940
	wrlong	local01, objptr
	mov	local01, ##@LR__0508
	add	objptr, #4
	wrlong	local01, objptr
	sub	objptr, ##4588
' 
' emptystr$="                      "
' ss$=""
' for i=1 to 31 : ss$=ss$+chr$(i) :next i
	mov	local02, #1
LR__0033
	add	objptr, ##4588
	rdlong	local01, objptr
	sub	objptr, ##4588
	mov	arg01, local02
	call	#__system__Chr_S
	mov	arg02, result1
	mov	arg01, local01
	call	#__system___string_concat
	mov	local01, result1
	add	objptr, ##4588
	wrlong	local01, objptr
	sub	objptr, ##4588
	add	local02, #1
	cmp	local02, #32 wcz
 if_b	jmp	#LR__0033
	mov	arg01, ptr__dat__
	call	#_addr
	add	objptr, ##4592
	wrlong	result1, objptr
	mov	arg01, result1
	mov	arg02, #0
	sub	objptr, ##944
	call	#_trackerplayer_spin2_initModule
	mov	arg02, #1
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	sub	objptr, ##3596
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#1, objptr
' 
' 
' ma=addr(module)
' tracker.initmodule(ma,0)
' 
' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
	add	objptr, ##4539
	rdlong	local02, objptr
	mov	local12, local02
	sub	objptr, ##4592
	add	local12, #20
LR__0034
	cmps	local02, local12 wcz
 if_ae	jmp	#LR__0035
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
' asm
	rdbyte	result1, local02
' return r
	mov	arg02, result1
	zerox	arg02, #7
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	add	local02, #1
	jmp	#LR__0034
LR__0035
	add	objptr, ##4596
	wrlong	#15, objptr
' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
	mov	local01, #0
	sub	objptr, #4
	rdlong	arg01, objptr
	add	arg01, ##1080
' asm
	rdbyte	local03, arg01
' return r
	zerox	local03, #7
	cmp	local03, #77 wz
 if_e	neg	local01, #1
	mov	local08, #0
	rdlong	arg01, objptr
	sub	objptr, ##4592
	add	arg01, ##1082
' asm
	rdbyte	result1, arg01
' return r
	mov	local07, result1
	zerox	local07, #7
	cmp	local07, #75 wz
 if_e	neg	local08, #1
	test	local01, local08 wz
 if_ne	add	objptr, ##4596
 if_ne	wrlong	#31, objptr
 if_ne	sub	objptr, ##4596
	mov	arg02, #2
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#2, objptr
	sub	objptr, #53
' position 1,2 : print samples;" ";"samples module"
	mov	arg01, #0
	call	#__system___getiolock_0150
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##4596
	rdlong	arg02, objptr
	sub	objptr, ##4596
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg02, ##@LR__0509
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__0510
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0150
	wrlong	#0, result1
	mov	result1, #0
	add	objptr, ##4592
	rdlong	arg01, objptr
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, ##4596
	call	#_getinfo
	add	objptr, ##4156
	call	#_audio019_spin2_start
	mov	local03, result2
	add	objptr, #420
	wrlong	result1, objptr
	add	objptr, #4
	wrlong	local03, objptr
	add	objptr, #20
	wrlong	#0, objptr
	add	objptr, #4
	wrlong	#0, objptr
	add	objptr, #4
	wrlong	#0, objptr
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##4612
' getinfo(ma,samples)
' 
' cog,base=paula.start()
' 
' old1=0 : old2=0 :old3=0 : old4=0
' 
' 
' 
' 'position 0,26 : v030.writeln(ss$)
' 'print"123456789012345678901234567890"
' do
LR__0036
	mov	arg01, #1
	call	#_hng030rm_spin2_waitvbl
	add	objptr, ##3648
	call	#_trackerplayer_spin2_tick
	sub	objptr, ##3648
	getrnd	result1
	mov	muldiva_, result1
	mov	muldivb_, ##540
	call	#unsdivide_
	add	objptr, ##4616
	wrlong	muldiva_, objptr
'     
' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
'      
'     if tracker.trigger(0)<>old1 then 
	sub	objptr, #466
	rdbyte	local01, objptr
	add	objptr, #450
	rdlong	local06, objptr
	sub	objptr, ##4600
	cmp	local01, local06 wz
 if_e	jmp	#LR__0037
	add	objptr, ##4150
	rdbyte	local01, objptr
	add	objptr, #450
	wrlong	local01, objptr
	sub	objptr, #20
	rdlong	arg01, objptr
	add	arg01, #8
	sub	objptr, ##765
	rdlong	arg02, objptr
	bith	arg02, #30
' asm
	wrlong	arg02, arg01
	add	objptr, ##765
	rdlong	arg01, objptr
	add	arg01, #12
	sub	objptr, ##745
	rdword	arg02, objptr
	add	objptr, #8
	rdlong	local07, objptr
	sub	arg02, local07
' asm
	wrlong	arg02, arg01
	add	objptr, ##737
	rdlong	arg01, objptr
	add	arg01, #16
	sub	objptr, ##745
	rdword	arg02, objptr
	sub	objptr, ##3835
	zerox	arg02, #15
' asm
	wrlong	arg02, arg01
LR__0037
	add	objptr, ##4580
	rdlong	arg01, objptr
	add	arg01, #20
	sub	objptr, ##677
	rdlong	local06, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	local06, local07
	sub	objptr, #295
	rdlong	local09, objptr
	qmul	local06, local09
	getqx	arg02
' asm
	wrword	arg02, arg01
	add	objptr, ##956
	rdlong	arg01, objptr
	add	arg01, #22
' asm
	wrword	##6144, arg01
	rdlong	arg01, objptr
	add	arg01, #24
	sub	objptr, ##709
	rdlong	arg02, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	arg02, local07
' asm
	wrword	arg02, arg01
	add	objptr, ##693
	rdlong	arg01, objptr
	add	arg01, #26
' asm
	wrword	#1, arg01
'   
'   
'     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
'     dpoke base+22, 8192-2048
'     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
'     dpoke base+26, 1
' 
'  
'     if tracker.trigger(1) <> old2  then
	sub	objptr, #429
	rdbyte	local01, objptr
	add	objptr, #453
	rdlong	local06, objptr
	sub	objptr, ##4604
	cmp	local01, local06 wz
 if_e	jmp	#LR__0038
	add	objptr, ##4151
	rdbyte	local01, objptr
	add	objptr, #453
	wrlong	local01, objptr
	sub	objptr, #24
	rdlong	arg01, objptr
	add	arg01, #40
	sub	objptr, ##761
	rdlong	arg02, objptr
	bith	arg02, #30
' asm
	wrlong	arg02, arg01
	mov	arg01, #32
	add	objptr, ##761
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #12
	sub	objptr, ##743
	rdword	arg02, objptr
	add	objptr, #10
	rdlong	local07, objptr
	sub	arg02, local07
' asm
	wrlong	arg02, arg01
	mov	arg01, #32
	add	objptr, ##733
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #16
	sub	objptr, ##743
	rdword	arg02, objptr
	sub	objptr, ##3837
	zerox	arg02, #15
' asm
	wrlong	arg02, arg01
LR__0038
	mov	arg01, #32
	add	objptr, ##4580
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #20
	sub	objptr, ##673
	rdlong	local06, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	local06, local07
	sub	objptr, #299
	rdlong	local09, objptr
	qmul	local06, local09
	getqx	arg02
' asm
	wrword	arg02, arg01
	mov	arg01, #32
	add	objptr, ##956
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #22
' asm
	wrword	##10240, arg01
	mov	arg01, #32
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #24
	sub	objptr, ##705
	rdlong	arg02, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	arg02, local07
' asm
	wrword	arg02, arg01
	mov	arg01, #32
	add	objptr, ##689
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #26
' asm
	wrword	#1, arg01
'       
'     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
'     dpoke 32+base+22, 8192+2048
'     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
'     dpoke 32+base+26, 1
' 
'    if tracker.trigger(2) <> old3  then
	sub	objptr, #428
	rdbyte	local01, objptr
	add	objptr, #456
	rdlong	local06, objptr
	sub	objptr, ##4608
	cmp	local01, local06 wz
 if_e	jmp	#LR__0039
	add	objptr, ##4152
	rdbyte	local01, objptr
	add	objptr, #456
	wrlong	local01, objptr
	sub	objptr, #28
	rdlong	arg01, objptr
	add	arg01, #72
	sub	objptr, ##757
	rdlong	arg02, objptr
	bith	arg02, #30
' asm
	wrlong	arg02, arg01
	mov	arg01, #64
	add	objptr, ##757
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #12
	sub	objptr, ##741
	rdword	arg02, objptr
	add	objptr, #12
	rdlong	local07, objptr
	sub	arg02, local07
' asm
	wrlong	arg02, arg01
	mov	arg01, #64
	add	objptr, ##729
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #16
	sub	objptr, ##741
	rdword	arg02, objptr
	sub	objptr, ##3839
	zerox	arg02, #15
' asm
	wrlong	arg02, arg01
LR__0039
	mov	arg01, #64
	add	objptr, ##4580
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #20
	sub	objptr, ##669
	rdlong	local06, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	local06, local07
	sub	objptr, #303
	rdlong	local09, objptr
	qmul	local06, local09
	getqx	arg02
' asm
	wrword	arg02, arg01
	mov	arg01, #64
	add	objptr, ##956
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #22
' asm
	wrword	##10240, arg01
	mov	arg01, #64
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #24
	sub	objptr, ##701
	rdlong	arg02, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	arg02, local07
' asm
	wrword	arg02, arg01
	mov	arg01, #64
	add	objptr, ##685
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #26
' asm
	wrword	#1, arg01
'     
'     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
'     dpoke 64+base+22, 8192+2048
'     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
'     dpoke 64+base+26, 1
' 
'     if tracker.trigger(3) <> old4 then
	sub	objptr, #427
	rdbyte	local01, objptr
	add	objptr, #459
	rdlong	local06, objptr
	sub	objptr, ##4612
	cmp	local01, local06 wz
 if_e	jmp	#LR__0040
	add	objptr, ##4153
	rdbyte	local01, objptr
	add	objptr, #459
	wrlong	local01, objptr
	sub	objptr, #32
	rdlong	arg01, objptr
	add	arg01, #104
	sub	objptr, ##753
	rdlong	arg02, objptr
	bith	arg02, #30
' asm
	wrlong	arg02, arg01
	mov	arg01, #96
	add	objptr, ##753
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #12
	sub	objptr, ##739
	rdword	arg02, objptr
	add	objptr, #14
	rdlong	local07, objptr
	sub	arg02, local07
' asm
	wrlong	arg02, arg01
	mov	arg01, #96
	add	objptr, ##725
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #16
	sub	objptr, ##739
	rdword	arg02, objptr
	sub	objptr, ##3841
	zerox	arg02, #15
' asm
	wrlong	arg02, arg01
LR__0040
	mov	arg01, #96
	add	objptr, ##4580
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #20
	sub	objptr, ##665
	rdlong	local06, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	local06, local07
	sub	objptr, #307
	rdlong	local09, objptr
	qmul	local06, local09
	getqx	arg02
' asm
	wrword	arg02, arg01
	mov	arg01, #96
	add	objptr, ##956
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #22
' asm
	wrword	##6144, arg01
	mov	arg01, #96
	rdlong	local06, objptr
	add	arg01, local06
	add	arg01, #24
	sub	objptr, ##697
	rdlong	arg02, objptr
	add	objptr, #16
	rdlong	local07, objptr
	add	arg02, local07
' asm
	wrword	arg02, arg01
	mov	arg01, #96
	add	objptr, ##681
	rdlong	local06, objptr
	sub	objptr, ##4580
	add	arg01, local06
	add	arg01, #26
	mov	arg02, #1
' asm
	wrword	#1, arg01
	call	#_test
	jmp	#LR__0036
	mov	ptra, fp
	call	#popregs_
_program_ret
	ret

' 
' '------------------------------
' 
' pub fcircle(x0,y0,r,c) | d,x,y,da,db
_hng030rm_spin2_fcircle
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
' 
' d:=5-4*r
	mov	local05, local03
	shl	local05, #2
	mov	local06, #5
	sub	local06, local05
' x:=0
	mov	local07, #0
' y:=r
	mov	local08, local03
' da:=(-2*r+5)*4
	qmul	local03, ##-2
	getqx	local09
	add	local09, #5
	shl	local09, #2
' db:=3*4
	mov	local10, #12
' repeat while (x<=y) 
LR__0041
	cmps	local07, local08 wcz
 if_a	jmp	#LR__0043
'   line(x0-x,y0-y,x0+x,y0-y,c)
	mov	arg01, local01
	sub	arg01, local07
	mov	arg02, local02
	sub	arg02, local08
	mov	arg03, local01
	add	arg03, local07
	mov	arg04, local02
	sub	arg04, local08
	mov	arg05, local04
	call	#_hng030rm_spin2_line
'   line(x0-x,y0+y,x0+x,y0+y,c)
	mov	arg01, local01
	sub	arg01, local07
	mov	arg02, local02
	add	arg02, local08
	mov	arg03, local01
	add	arg03, local07
	mov	arg04, local02
	add	arg04, local08
	mov	arg05, local04
	call	#_hng030rm_spin2_line
'   line(x0-y,y0-x,x0+y,y0-x,c)
	mov	arg01, local01
	sub	arg01, local08
	mov	arg02, local02
	sub	arg02, local07
	mov	arg03, local01
	add	arg03, local08
	mov	arg04, local02
	sub	arg04, local07
	mov	arg05, local04
	call	#_hng030rm_spin2_line
'   line(x0-y,y0+x,x0+y,y0+x,c)
	mov	arg01, local01
	sub	arg01, local08
	mov	arg02, local02
	add	arg02, local07
	mov	arg03, local01
	add	arg03, local08
	mov	arg04, local02
	add	arg04, local07
	mov	arg05, local04
	call	#_hng030rm_spin2_line
'   if d>0 
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0042
'     d+=da
	add	local06, local09
'     y-=1
	sub	local08, #1
'     x+=1
	add	local07, #1
'     da+=4*4
	add	local09, #16
'     db+=2*4
	add	local10, #8
'   else
	jmp	#LR__0041
LR__0042
'     d+=db
	add	local06, local10
'     x+=1
	add	local07, #1
'     da+=2*4
	add	local09, #8
'     db+=2*4
	add	local10, #8
	jmp	#LR__0041
LR__0043
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_fcircle_ret
	ret

' 
' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
_hng030rm_spin2_line
	mov	COUNT_, #18
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
' 
' 
' x:=x1
	mov	local06, local01
' y:=y1
	mov	local07, local02
' 
' if (x1<x2) 
	cmps	local01, local03 wcz
 if_ae	jmp	#LR__0044
'   xi:=1
	mov	local08, #1
'   dx:=x2-x1
	mov	local09, local03
	sub	local09, local01
' else
	jmp	#LR__0045
LR__0044
'   xi:=-1
	neg	local08, #1
'   dx:=x1-x2
	sub	local01, local03
	mov	local09, local01
LR__0045
'   
' if (y1<y2) 
	cmps	local02, local04 wcz
 if_ae	jmp	#LR__0046
'   yi:=1
	mov	local10, #1
'   dy:=y2-y1
	mov	local11, local04
	sub	local11, local02
' else
	jmp	#LR__0047
LR__0046
'   yi:=-1
	neg	local10, #1
'   dy:=y1-y2
	sub	local02, local04
	mov	local11, local02
LR__0047
' 
' putpixel(x,y,c)
	add	objptr, #216
	rdlong	local12, objptr
	sub	objptr, #216
	rdlong	local13, local12
	add	local12, #4
	rdlong	local14, local12
	mov	arg01, local06
	mov	arg02, local07
	mov	arg03, local05
	mov	local15, objptr
	mov	objptr, local13
	call	local14
	mov	objptr, local15
' 
' if (dx>dy)
	cmps	local09, local11 wcz
 if_be	jmp	#LR__0051
'   ai:=(dy-dx)*2
	mov	local16, local11
	sub	local16, local09
	shl	local16, #1
'   bi:=dy*2
	shl	local11, #1
	mov	local17, local11
'   d:= bi-dx
	mov	local18, local17
	sub	local18, local09
'   repeat while (x<>x2) 
LR__0048
	cmp	local06, local03 wz
 if_e	jmp	#LR__0056
'     if (d>=0) 
	cmps	local18, #0 wcz
 if_b	jmp	#LR__0049
'       x+=xi
	add	local06, local08
'       y+=yi
	add	local07, local10
'       d+=ai
	add	local18, local16
'     else
	jmp	#LR__0050
LR__0049
'       d+=bi
	add	local18, local17
'       x+=xi
	add	local06, local08
LR__0050
'     putpixel(x,y,c)
	add	objptr, #216
	rdlong	local12, objptr
	sub	objptr, #216
	rdlong	local13, local12
	add	local12, #4
	rdlong	local14, local12
	mov	arg01, local06
	mov	arg02, local07
	mov	arg03, local05
	mov	local15, objptr
	mov	objptr, local13
	call	local14
	mov	objptr, local15
	jmp	#LR__0048
' else
LR__0051
'   ai:=(dx-dy)*2
	mov	local16, local09
	sub	local16, local11
	shl	local16, #1
'   bi:=dx*2
	shl	local09, #1
	mov	local17, local09
'   d:=bi-dy
	mov	local18, local17
	sub	local18, local11
'   repeat while (y<>y2)
LR__0052
	cmp	local07, local04 wz
 if_e	jmp	#LR__0055
'     if (d>=0)
	cmps	local18, #0 wcz
 if_b	jmp	#LR__0053
'       x+=xi
	add	local06, local08
'       y+=yi
	add	local07, local10
'       d+=ai
	add	local18, local16
'     else
	jmp	#LR__0054
LR__0053
'       d+=bi
	add	local18, local17
'       y+=yi
	add	local07, local10
LR__0054
'     putpixel(x, y,c)
	add	objptr, #216
	rdlong	local12, objptr
	sub	objptr, #216
	rdlong	local13, local12
	add	local12, #4
	rdlong	local14, local12
	mov	arg01, local06
	mov	arg02, local07
	mov	arg03, local05
	mov	local15, objptr
	mov	objptr, local13
	call	local14
	mov	objptr, local15
	jmp	#LR__0052
LR__0055
LR__0056
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_line_ret
	ret

' 
' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
_hng030rm_spin2_putcharxycg
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
' 
' repeat yy from 0 to 15
	mov	local06, #0
LR__0057
'   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
	mov	local07, ptr__hng030rm_spin2_dat__
	add	objptr, #200
	rdlong	local08, objptr
	sub	objptr, #200
	shl	local08, #10
	add	local07, local08
	mov	local09, local03
	shl	local09, #4
	add	local07, local09
	add	local07, local06
	rdbyte	local10, local07
'   repeat xx from 0 to 7
	mov	local11, #0
LR__0058
'     if (bb&(1<<xx))<>0
	decod	local12, local11
	test	local10, local12 wz
 if_e	jmp	#LR__0059
'       putpixel(xx+x,yy+y,f)
	add	objptr, #216
	rdlong	local07, objptr
	sub	objptr, #216
	rdlong	local12, local07
	add	local07, #4
	rdlong	local08, local07
	mov	arg01, local11
	add	arg01, local01
	mov	arg02, local06
	add	arg02, local02
	mov	arg03, local04
	mov	local13, objptr
	mov	objptr, local12
	call	local08
	mov	objptr, local13
'     else
	jmp	#LR__0060
LR__0059
'       putpixel(xx+x,yy+y,b)
	add	objptr, #216
	rdlong	local07, objptr
	sub	objptr, #216
	rdlong	local12, local07
	add	local07, #4
	rdlong	local08, local07
	mov	arg01, local11
	add	arg01, local01
	mov	arg02, local06
	add	arg02, local02
	mov	arg03, local05
	mov	local13, objptr
	mov	objptr, local12
	call	local08
	mov	objptr, local13
LR__0060
	add	local11, #1
	cmps	local11, #8 wcz
 if_b	jmp	#LR__0058
	add	local06, #1
	cmps	local06, #16 wcz
 if_b	jmp	#LR__0057
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_putcharxycg_ret
	ret

' 
' pub outtextxycg(x,y,text,f,b) | iii,c
_hng030rm_spin2_outtextxycg
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
' 
' repeat iii from 0 to strsize(text)-1
	mov	local06, #0
	mov	arg01, local03
	mov	local07, #0
	loc	pa,	#(@LR__0062-@LR__0061)
	call	#FCACHE_LOAD_
LR__0061
	rdbyte	local08, arg01 wz
 if_ne	add	local07, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0061
LR__0062
	mov	result1, local07
	mov	local09, result1
	sub	local09, #1
	cmps	local09, #0 wcz
 if_a	mov	local10, #1
 if_be	neg	local10, #1
	add	local09, local10
LR__0063
'   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
	mov	arg01, local01
	mov	local11, local06
	shl	local11, #3
	add	arg01, local11
	mov	arg02, local02
	mov	local12, local03
	add	local12, local06
	rdbyte	arg03, local12
	mov	arg04, local04
	mov	arg05, local05
	call	#_hng030rm_spin2_putcharxycg
	add	local06, local10
	cmp	local06, local09 wz
 if_ne	jmp	#LR__0063
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_outtextxycg_ret
	ret

' 
' 
' ''---------- putpixel - put a pixel on the screen
' 
' pub putpixel1(x,y,c) |byte b
_hng030rm_spin2_putpixel1
' 
' 
' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #5
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0066
'     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	mov	_var04, arg01
	shr	_var04, #3
	add	_var01, _var04
	rdbyte	_var08, _var01
'     if (c==0)
	cmp	arg03, #0 wz
 if_ne	jmp	#LR__0064
'       b:=b & !(1<<(x//8))
	abs	_var03, arg01 wc
	and	_var03, #7
 if_b	neg	_var03, _var03
	decod	_var02, _var03
	andn	_var08, _var02
'     else
	jmp	#LR__0065
LR__0064
'       b:=b |(1<<(x//8))
	abs	_var03, arg01 wc
	and	_var03, #7
 if_b	neg	_var03, _var03
	decod	_var02, _var03
	or	_var08, _var02
LR__0065
'     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	shr	arg01, #3
	add	_var01, arg01
	wrbyte	_var08, _var01
LR__0066
_hng030rm_spin2_putpixel1_ret
	ret

' 
' 
' pub putpixel2(x,y,c) |byte b
_hng030rm_spin2_putpixel2
	mov	_var01, arg01
	mov	_var02, arg02
	mov	_var03, arg03
' 
' 
' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
	cmps	_var01, #0 wcz
 if_b	jmp	#LR__0067
	add	objptr, #144
	rdlong	_var04, objptr
	sub	objptr, #144
	shl	_var04, #4
	cmps	_var01, _var04 wcz
 if_ae	jmp	#LR__0067
	cmps	_var02, #0 wcz
 if_b	jmp	#LR__0067
	add	objptr, #148
	rdlong	_var05, objptr
	sub	objptr, #148
	cmps	_var02, _var05 wcz
 if_ae	jmp	#LR__0067
'     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
	rdlong	_var04, objptr
	add	objptr, #144
	rdlong	_var06, objptr
	sub	objptr, #144
	shl	_var06, #2
	qmul	_var06, _var02
	getqx	_var07
	add	_var04, _var07
	mov	_var08, _var01
	shr	_var08, #2
	add	_var04, _var08
	rdbyte	_var09, _var04
'     b:=b & !(%11<<((x//4)<<1))
	abs	_var10, _var01 wc
	and	_var10, #3
 if_b	neg	_var10, _var10
	shl	_var10, #1
	mov	_var06, #3
	shl	_var06, _var10
	andn	_var09, _var06
'     b:=b |(c<<((x//4)<<1))
	abs	_var10, _var01 wc
	and	_var10, #3
 if_b	neg	_var10, _var10
	shl	_var10, #1
	shl	_var03, _var10
	or	_var09, _var03
'     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
	rdlong	_var04, objptr
	add	objptr, #144
	rdlong	_var06, objptr
	sub	objptr, #144
	shl	_var06, #2
	qmul	_var06, _var02
	getqx	_var07
	add	_var04, _var07
	mov	_var08, _var01
	shr	_var08, #2
	add	_var04, _var08
	wrbyte	_var09, _var04
LR__0067
_hng030rm_spin2_putpixel2_ret
	ret

' 
' 
' pub putpixel4(x,y,c) |byte b
_hng030rm_spin2_putpixel4
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0068
'     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	mov	_var04, arg01
	shr	_var04, #1
	add	_var01, _var04
	rdbyte	_var08, _var01
'     b:=b & !(%1111<<((x//2)<<2))
	abs	_var03, arg01 wc
	and	_var03, #1
 if_b	neg	_var03, _var03
	shl	_var03, #2
	mov	_var02, #15
	shl	_var02, _var03
	andn	_var08, _var02
'     b:=b |(c<<((x//2)<<2))
	abs	_var03, arg01 wc
	and	_var03, #1
 if_b	neg	_var03, _var03
	shl	_var03, #2
	shl	arg03, _var03
	or	_var08, arg03
'     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	shr	arg01, #1
	add	_var01, arg01
	wrbyte	_var08, _var01
LR__0068
_hng030rm_spin2_putpixel4_ret
	ret

' 
' 
' pub putpixel8(x,y,c)
_hng030rm_spin2_putpixel8
' 
' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #2
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0069
'     byte[buf_ptr+4*cpl*y+x]:=c
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	add	_var01, arg01
	wrbyte	arg03, _var01
LR__0069
_hng030rm_spin2_putpixel8_ret
	ret

' 
' '*************************************************************************
' '                                                                        *
' '  VBlank functions                                                      *
' '                                                                        *
' '*************************************************************************
' 
' pub waitvbl(amount) | i
_hng030rm_spin2_waitvbl
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
' 
' ''---------- Wait for start of vblank. Amount=delay in frames
' 
' repeat i from 1 to amount
	mov	local02, #1
	cmps	local01, #1 wcz
 if_a	mov	local03, #1
 if_be	neg	local03, #1
	add	local01, local03
LR__0070
'   repeat until vblank==0
LR__0071
	add	objptr, #64
	rdlong	local04, objptr wz
	sub	objptr, #64
 if_e	jmp	#LR__0072
'     waitus(100)
	mov	arg01, #100
	call	#__system___waitus
	jmp	#LR__0071
LR__0072
'   repeat until vblank==1
LR__0073
	add	objptr, #64
	rdlong	local04, objptr
	sub	objptr, #64
	cmp	local04, #1 wz
 if_e	jmp	#LR__0074
'     waitus(100)
	mov	arg01, #100
	call	#__system___waitus
	jmp	#LR__0073
LR__0074
	add	local02, local03
	cmp	local02, local01 wz
 if_ne	jmp	#LR__0070
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_waitvbl_ret
	ret

' 
' ''---------- Set the border color, o is upper border, lines+1 is lower border
' 
' pub setbordercolor(r,g,b) | color
_hng030rm_spin2_setbordercolor
' 
' color:=r<<24+g<<16+b<<8
	shl	arg01, #24
	shl	arg02, #16
	add	arg01, arg02
	shl	arg03, #8
	add	arg01, arg03
' bordercolor:=color
	add	objptr, #44
	wrlong	arg01, objptr
	sub	objptr, #44
_hng030rm_spin2_setbordercolor_ret
	ret

' 
' ''---------- Set color #c in palette to r,g,b
' 
' pub setcolor(c,r,g,b)  |cc
_hng030rm_spin2_setcolor
' 
' cc:=r<<24+g<<16+b<<8
	shl	arg02, #24
	shl	arg03, #16
	add	arg02, arg03
	shl	arg04, #8
	add	arg02, arg04
' long[palette_ptr+4*c]:=cc
	add	objptr, #24
	rdlong	_var01, objptr
	sub	objptr, #24
	shl	arg01, #2
	add	_var01, arg01
	wrlong	arg02, _var01
_hng030rm_spin2_setcolor_ret
	ret

' 
' 
' '*************************************************************************
' '                                                                        *
' '  Text functions                                                        *
' '                                                                        *
' '*************************************************************************
' 
' ''---------- Clear the screen, set its foreground/background color
' 
' pub cls(fc,bc)   :c
_hng030rm_spin2_cls
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' if (graphmode<512)
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	cmps	local03, ##512 wcz
 if_ae	jmp	#LR__0075
'   c:=fc<<24+bc<<16+$20
	mov	local04, local01
	shl	local04, #24
	mov	local05, local02
	shl	local05, #16
	add	local04, local05
	add	local04, #32
'   longfill(buf_ptr,c,buflen)
	rdlong	arg01, objptr
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	mov	arg02, local04
	call	#\builtin_longfill_
' else
	jmp	#LR__0081
LR__0075
'   if (graphmode & 48) ==48
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #48 wz
'     c:=bc
 if_e	mov	local04, local02
 if_e	jmp	#LR__0080
'   elseif (graphmode & 48) ==32
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #32 wz
 if_ne	jmp	#LR__0076
'     c:=bc<<4+bc
	mov	local04, local02
	shl	local04, #4
	add	local04, local02
	jmp	#LR__0079
LR__0076
'   elseif (graphmode & 48) ==16
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #16 wz
 if_ne	jmp	#LR__0077
'     c:=bc<<6+bc<<4+bc<<2+bc
	mov	local04, local02
	shl	local04, #6
	mov	local05, local02
	shl	local05, #4
	add	local04, local05
	mov	local06, local02
	shl	local06, #2
	add	local04, local06
	add	local04, local02
'   else
	jmp	#LR__0078
LR__0077
'     if bc==1
	cmp	local02, #1 wz
'       c:=255
 if_e	mov	local04, #255
'     else
'       c:=0
 if_ne	mov	local04, #0
LR__0078
LR__0079
LR__0080
'   bytefill(buf_ptr,c,buflen*4)
	rdlong	arg01, objptr
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	shl	arg03, #2
	mov	arg02, local04
	call	#\builtin_bytefill_
LR__0081
' setwritecolors(fc,bc)
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	local01, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	local02, objptr
' cursor_x:=0
	sub	objptr, #8
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #53
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_cls_ret
	ret

' 
' ''--------- Output a string at position x,y without changing colors
' 
' pub outtextxy(x,y,text) | iii
_hng030rm_spin2_outtextxy
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
' 
' repeat iii from 0 to strsize(text)-1
	mov	local02, #0
	mov	arg01, arg03
	mov	local03, #0
	loc	pa,	#(@LR__0083-@LR__0082)
	call	#FCACHE_LOAD_
LR__0082
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0082
LR__0083
	mov	result1, local03
	mov	local05, result1
	sub	local05, #1
	cmps	local05, #0 wcz
 if_a	mov	local06, #1
 if_be	neg	local06, #1
	add	local05, local06
	loc	pa,	#(@LR__0085-@LR__0084)
	call	#FCACHE_LOAD_
LR__0084
'   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
	rdlong	local07, objptr
	add	objptr, #144
	rdlong	local08, objptr
	sub	objptr, #144
	qmul	local08, arg02
	getqx	local09
	add	local09, local01
	add	local09, local02
	shl	local09, #2
	add	local07, local09
	rdlong	local10, local07
	andn	local10, #255
	mov	local11, arg03
	add	local11, local02
	rdbyte	local12, local11
	or	local10, local12
	rdlong	local13, objptr
	add	objptr, #144
	rdlong	local14, objptr
	sub	objptr, #144
	qmul	local14, arg02
	getqx	local15
	add	local15, local01
	add	local15, local02
	shl	local15, #2
	add	local13, local15
	wrlong	local10, local13
	add	local02, local06
	cmp	local02, local05 wz
 if_ne	jmp	#LR__0084
LR__0085
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_outtextxy_ret
	ret

' 
' ''---------- Output a char at the cursor position, move the cursor
' 
' pub putchar(achar) | c,x,y
_hng030rm_spin2_putchar
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
' 
' if achar==10
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0086
'   crlf()
	call	#_hng030rm_spin2_crlf
' else  
	jmp	#LR__0089
LR__0086
'   x:=cursor_x
	add	objptr, #52
	rdbyte	local02, objptr
'   y:=cursor_y
	add	objptr, #1
	rdbyte	local03, objptr
'   c:=write_color<<24+write_background<<16
	add	objptr, #3
	rdlong	local04, objptr
	shl	local04, #24
	add	objptr, #4
	rdlong	local05, objptr
	sub	objptr, #60
	shl	local05, #16
	add	local04, local05
'   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
	rdlong	local06, objptr
	add	objptr, #144
	rdlong	local07, objptr
	sub	objptr, #144
	qmul	local07, local03
	getqx	local08
	add	local08, local02
	shl	local08, #2
	add	local06, local08
	rdlong	local09, local06
	and	local09, ##65535
	or	local09, local04
	rdlong	local10, objptr
	add	objptr, #144
	rdlong	local11, objptr
	sub	objptr, #144
	qmul	local11, local03
	getqx	local12
	add	local12, local02
	shl	local12, #2
	add	local10, local12
	wrlong	local09, local10
'   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
	rdlong	local06, objptr
	add	objptr, #144
	rdlong	local07, objptr
	sub	objptr, #144
	qmul	local07, local03
	getqx	local08
	add	local08, local02
	shl	local08, #2
	add	local06, local08
	rdlong	local09, local06
	andn	local09, #255
	mov	local10, local01
	and	local10, #255
	or	local09, local10
	rdlong	local13, objptr
	add	objptr, #144
	rdlong	local14, objptr
	qmul	local14, local03
	getqx	local15
	add	local15, local02
	shl	local15, #2
	add	local13, local15
	wrlong	local09, local13
'   cursor_x+=1
	sub	objptr, #92
	rdbyte	local09, objptr
	add	local09, #1
	wrbyte	local09, objptr
'   if cursor_x==cpl
	rdbyte	local09, objptr
	add	objptr, #92
	rdlong	local05, objptr
	sub	objptr, #144
	cmp	local09, local05 wz
 if_ne	jmp	#LR__0088
'     cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
'     cursor_y+=1
	add	objptr, #1
	rdbyte	local09, objptr
	add	local09, #1
	wrbyte	local09, objptr
'     if cursor_y>lines-1
	add	objptr, #95
	rdlong	local09, objptr
	sub	local09, #1
	sub	objptr, #95
	rdbyte	local05, objptr
	sub	objptr, #53
	cmps	local05, local09 wcz
 if_be	jmp	#LR__0087
'       scrollup()
	call	#_hng030rm_spin2_scrollup
'       cursor_y:=lines-1
	add	objptr, #148
	rdlong	local09, objptr
	sub	local09, #1
	sub	objptr, #95
	wrbyte	local09, objptr
	sub	objptr, #53
LR__0087
LR__0088
LR__0089
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_putchar_ret
	ret

' 
' ''--------- Output a string at the cursor position, move the cursor
' 
' pub write(text) | iii,c,ncx,ncy
_hng030rm_spin2_write
	mov	COUNT_, #22
	call	#pushregs_
	mov	local01, arg01
' 
' c:=write_color<<24+write_background<<16
	add	objptr, #56
	rdlong	local02, objptr
	shl	local02, #24
	add	objptr, #4
	rdlong	local03, objptr
	shl	local03, #16
	add	local02, local03
' 'debug(uhex_long(write_color))
' ncy:=cursor_y
	sub	objptr, #7
	rdbyte	local04, objptr
' ncx:=cursor_x+strsize(text)
	sub	objptr, #1
	rdbyte	local05, objptr
	sub	objptr, #52
	mov	arg01, local01
	mov	local06, #0
	loc	pa,	#(@LR__0091-@LR__0090)
	call	#FCACHE_LOAD_
LR__0090
	rdbyte	local07, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0090
LR__0091
	mov	result1, local06
	add	local05, local06
	mov	local08, local05
	loc	pa,	#(@LR__0093-@LR__0092)
	call	#FCACHE_LOAD_
' repeat while ncx>cpl-1
LR__0092
	add	objptr, #144
	rdlong	local05, objptr
	sub	objptr, #144
	sub	local05, #1
	cmps	local08, local05 wcz
 if_be	jmp	#LR__0094
'   ncx-=cpl
	add	objptr, #144
	rdlong	local09, objptr
	sub	objptr, #144
	sub	local08, local09
'   ncy+=1
	add	local04, #1
	jmp	#LR__0092
LR__0093
LR__0094
' repeat while ncy>lines-1
LR__0095
	add	objptr, #148
	rdlong	local05, objptr
	sub	objptr, #148
	sub	local05, #1
	cmps	local04, local05 wcz
 if_be	jmp	#LR__0096
'   ncy-=1
	sub	local04, #1
'   scrollup()
	call	#_hng030rm_spin2_scrollup
'   cursor_y-=1
	add	objptr, #53
	rdbyte	local05, objptr
	sub	local05, #1
	wrbyte	local05, objptr
	sub	objptr, #53
	jmp	#LR__0095
LR__0096
' 
' repeat iii from 0 to strsize(text)-1
	mov	local10, #0
	mov	arg01, local01
	mov	local06, #0
	loc	pa,	#(@LR__0098-@LR__0097)
	call	#FCACHE_LOAD_
LR__0097
	rdbyte	local07, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0097
LR__0098
	mov	result1, local06
	mov	local11, result1
	sub	local11, #1
	cmps	local11, #0 wcz
 if_a	mov	local03, #1
 if_be	neg	local03, #1
	add	local11, local03
	loc	pa,	#(@LR__0100-@LR__0099)
	call	#FCACHE_LOAD_
LR__0099
' 
'   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
	rdlong	local12, objptr
	add	objptr, #144
	rdlong	local13, objptr
	sub	objptr, #91
	rdbyte	local14, objptr
	qmul	local13, local14
	getqx	local15
	sub	objptr, #1
	rdbyte	local16, objptr
	sub	objptr, #52
	add	local15, local16
	add	local15, local10
	shl	local15, #2
	add	local12, local15
	rdlong	local17, local12
	and	local17, ##65535
	or	local17, local02
	rdlong	local18, objptr
	add	objptr, #144
	rdlong	local19, objptr
	sub	objptr, #91
	rdbyte	local20, objptr
	qmul	local19, local20
	getqx	local21
	sub	objptr, #1
	rdbyte	local22, objptr
	sub	objptr, #52
	add	local21, local22
	add	local21, local10
	shl	local21, #2
	add	local18, local21
	wrlong	local17, local18
	add	local10, local03
	cmp	local10, local11 wz
 if_ne	jmp	#LR__0099
LR__0100
' 
' outtextxy(cursor_x,cursor_y,text)
	add	objptr, #52
	rdbyte	arg01, objptr
	add	objptr, #1
	rdbyte	arg02, objptr
	sub	objptr, #53
	mov	arg03, local01
	call	#_hng030rm_spin2_outtextxy
' 
' cursor_x:=ncx
	add	objptr, #52
	wrbyte	local08, objptr
' cursor_y:=ncy
	add	objptr, #1
	wrbyte	local04, objptr
	sub	objptr, #53
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_write_ret
	ret

' 
' ''-----------  Scroll the screen one line up
' 
' pub scrollup() | i
_hng030rm_spin2_scrollup
	mov	COUNT_, #13
	call	#pushregs_
' 
' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
	rdlong	arg01, objptr
	mov	arg02, arg01
	add	objptr, #144
	rdlong	local01, objptr
	shl	local01, #2
	add	arg02, local01
	sub	objptr, #96
	rdlong	arg03, objptr
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #144
	sub	arg03, local02
	call	#__system__longmove
' repeat i from buflen-cpl to buflen-1
	add	objptr, #48
	rdlong	local03, objptr
	add	objptr, #96
	rdlong	local04, objptr
	sub	local03, local04
	sub	objptr, #96
	rdlong	local05, objptr
	sub	local05, #1
	rdlong	local06, objptr
	add	objptr, #96
	rdlong	local07, objptr
	sub	objptr, #144
	sub	local06, local07
	cmps	local05, local06 wcz
 if_a	mov	local08, #1
 if_be	neg	local08, #1
	add	local05, local08
	loc	pa,	#(@LR__0102-@LR__0101)
	call	#FCACHE_LOAD_
LR__0101
'   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
	rdlong	local09, objptr
	mov	local10, local03
	shl	local10, #2
	add	local09, local10
	rdlong	local11, local09
	and	local11, ##-65536
	or	local11, #32
	rdlong	local12, objptr
	mov	local13, local03
	shl	local13, #2
	add	local12, local13
	wrlong	local11, local12
	add	local03, local08
	cmp	local03, local05 wz
 if_ne	jmp	#LR__0101
LR__0102
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_scrollup_ret
	ret

' 
' ''----------- Set cursor at the first character in a new line, scroll if needed
' 
' pub crlf()
_hng030rm_spin2_crlf
	mov	COUNT_, #2
	call	#pushregs_
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y+=1
	add	objptr, #1
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
' if cursor_y>lines-1
	add	objptr, #95
	rdlong	local01, objptr
	sub	local01, #1
	sub	objptr, #95
	rdbyte	local02, objptr
	sub	objptr, #53
	cmps	local02, local01 wcz
 if_be	jmp	#LR__0103
'   scrollup()
	call	#_hng030rm_spin2_scrollup
'   cursor_y:=lines-1
	add	objptr, #148
	rdlong	local01, objptr
	sub	local01, #1
	sub	objptr, #95
	wrbyte	local01, objptr
	sub	objptr, #53
LR__0103
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_crlf_ret
	ret

' 
' 
' 
' pub inttostr2(i,d):result |q,pos,k,j
_hng030rm_spin2_inttostr2
' 
' j:=i
' pos:=d-1
	mov	_var01, arg02
	sub	_var01, #1
' k:=0
' 
' n_string[d]:=0
	mov	_var02, arg02
	add	objptr, #68
	mov	_var03, objptr
	add	_var02, objptr
	wrbyte	#0, _var02
' repeat k from 0 to d-1
	mov	_var04, #0
	sub	arg02, #1
	mov	_var05, arg02
	cmps	_var05, #0 wcz
	sub	objptr, #68
 if_a	mov	_var03, #1
 if_be	neg	_var03, #1
	add	_var05, _var03
	loc	pa,	#(@LR__0105-@LR__0104)
	call	#FCACHE_LOAD_
LR__0104
'   n_string[k]:=48
	mov	_var06, _var04
	add	objptr, #68
	add	_var06, objptr
	wrbyte	#48, _var06
	add	_var04, _var03
	cmp	_var04, _var05 wz
	sub	objptr, #68
 if_ne	jmp	#LR__0104
LR__0105
' 
' if (j<>0)
	cmp	arg01, #0 wz
 if_e	jmp	#LR__0108
' 
'   repeat while (pos>-1)
LR__0106
	cmps	_var01, ##-1 wcz
 if_be	jmp	#LR__0107
'     q:=j+//10
	mov	muldiva_, arg01
	mov	muldivb_, #10
	call	#unsdivide_
'     q:=48+q
	mov	_var07, #48
	add	_var07, muldiva_
'     n_string[pos]:=q
	mov	arg02, _var01
	add	objptr, #68
	add	arg02, objptr
	wrbyte	_var07, arg02
'     j:=j+/10
	mov	arg01, muldivb_
'     pos-=1
	sub	_var01, #1
	sub	objptr, #68
	jmp	#LR__0106
LR__0107
LR__0108
' 
' 
' q:=@n_string
	add	objptr, #68
	mov	result1, objptr
	sub	objptr, #68
' return q
_hng030rm_spin2_inttostr2_ret
	ret

' 
' pub plot(x,y,c)
_hng030rm_spin2_plot
	mov	COUNT_, #4
	call	#pushregs_
' putpixel(x,y,c)
	add	objptr, #216
	rdlong	local01, objptr
	sub	objptr, #216
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_plot_ret
	ret

' 
' '*************************************************************************
' '                                                                        *
' '  Mode setting and driver start                                                          *
' '                                                                        *
' '*************************************************************************
' 
' ''---------  Set the graphics mode
' 
' 
' 
' pub setmode(mode) | i', 'xzoom, yzoom, azoom
_hng030rm_spin2_setmode
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
' 
' '' mode:tn_bb_cc_vv_hh
' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
' 
' if mode==(512+192+48)
	cmp	local01, ##752 wz
'   return 'no RAM
 if_e	jmp	#LR__0131
' 
' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
	mov	local02, local01
	shr	local02, #6
	and	local02, #7
	fle	local02, #8
	mov	local03, local02
	jmprel	local03
LR__0109
	jmp	#LR__0110
	jmp	#LR__0111
	jmp	#LR__0112
	jmp	#LR__0113
	jmp	#LR__0114
	jmp	#LR__0115
	jmp	#LR__0116
	jmp	#LR__0117
	jmp	#LR__0118
LR__0110
' 
'     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7256
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7256
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0111
'     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7320
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7320
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0112
'     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7384
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7384
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0113
'     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7448
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7448
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0114
'     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7512
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7512
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0115
'     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7576
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7576
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0116
'     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7640
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7640
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0118
LR__0117
'     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
	add	objptr, #80
	mov	local04, objptr
	add	ptr__hng030rm_spin2_dat__, ##7704
	mov	local05, ptr__hng030rm_spin2_dat__
	mov	local06, #16
	mov	arg01, local04
	mov	arg02, local05
	mov	arg03, #16
	sub	objptr, #80
	sub	ptr__hng030rm_spin2_dat__, ##7704
	call	#__system__longmove
LR__0118
' 
' ' 4-bit graphics: do nothing with timings :)
' if mode<512
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0119
'   palette_ptr:=@ataripalette
	add	ptr__hng030rm_spin2_dat__, ##6232
	add	objptr, #24
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0119
' 
' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##560 wz
 if_ne	jmp	#LR__0120
'   timings[5]:=4
	add	objptr, #100
	wrlong	#4, objptr
'   timings[11]:=timings[11]<<1
	add	objptr, #24
	rdlong	local02, objptr
	shl	local02, #1
	wrlong	local02, objptr
'   putpixel:=p8
	add	objptr, #108
	rdlong	local02, objptr
	sub	objptr, #16
	wrlong	local02, objptr
'   palette_ptr:=@ataripalette
	add	ptr__hng030rm_spin2_dat__, ##6232
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0120
' 
' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##528 wz
 if_ne	jmp	#LR__0121
'   timings[5]:=16
	add	objptr, #100
	wrlong	#16, objptr
'   timings[11]:=timings[11]>>1
	add	objptr, #24
	rdlong	local02, objptr
	shr	local02, #1
	wrlong	local02, objptr
'   putpixel:=p2
	add	objptr, #100
	rdlong	local02, objptr
	sub	objptr, #8
	wrlong	local02, objptr
'   palette_ptr:=@fourcolors
	add	ptr__hng030rm_spin2_dat__, ##6152
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6152
LR__0121
' 
' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##512 wz
 if_ne	jmp	#LR__0122
'   timings[5]:=32
	add	objptr, #100
	wrlong	#32, objptr
'   timings[11]:=timings[11]>>2
	add	objptr, #24
	rdlong	local02, objptr
	shr	local02, #2
	wrlong	local02, objptr
'   putpixel:=p1
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #4
	wrlong	local02, objptr
'   palette_ptr:=@twocolors
	add	ptr__hng030rm_spin2_dat__, ##6144
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6144
LR__0122
' 
' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##544 wz
 if_ne	jmp	#LR__0123
'   putpixel:=p4
	add	objptr, #228
	rdlong	local02, objptr
	sub	objptr, #12
	wrlong	local02, objptr
'   palette_ptr:=@vga16
	add	ptr__hng030rm_spin2_dat__, ##6168
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6168
LR__0123
' 
' repeat i from 0 to 4
	mov	local07, #0
	loc	pa,	#(@LR__0125-@LR__0124)
	call	#FCACHE_LOAD_
LR__0124
'   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
	mov	local04, local07
	shl	local04, #2
	add	objptr, #80
	mov	local05, objptr
	add	local04, objptr
	sub	objptr, #44
	rdlong	local08, objptr
	mov	local06, local08
	shl	local06, #17
	rdlong	local02, local04
	add	local02, local06
	add	local02, ##1887502336
	mov	local09, local07
	shl	local09, #2
	add	objptr, #44
	mov	local10, objptr
	add	local09, objptr
	wrlong	local02, local09
	add	local07, #1
	cmps	local07, #5 wcz
	sub	objptr, #80
 if_b	jmp	#LR__0124
LR__0125
' timings[5]:=timings[5]+hdmibase<<17
	add	objptr, #36
	rdlong	local04, objptr
	shl	local04, #17
	add	objptr, #64
	rdlong	local06, objptr
	mov	local02, local06
	add	local02, local04
	wrlong	local02, objptr
' clkfreq:=timings[13]
	add	objptr, #32
	rdlong	local02, objptr
	wrlong	local02, #20
' hubset(timings[14])
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #136
	hubset	arg01
' waitms(1)
	mov	arg01, #1
	call	#__system___waitms
' 
' 
' xzoom:=1<<(mode & 3)
	mov	local04, local01
	and	local04, #3
	decod	local02, local04
	add	objptr, #204
	wrlong	local02, objptr
' 
' if (xzoom==8) && (((mode>>4)&3)<>3)
	mov	local04, local02
	sub	objptr, #204
	cmp	local04, #8 wz
 if_ne	jmp	#LR__0126
	mov	local05, local01
	shr	local05, #4
	and	local05, #3
	cmp	local05, #3 wz
 if_e	jmp	#LR__0126
'   xzoom:=4
	mov	local02, #4
	add	objptr, #204
	wrlong	#4, objptr
	sub	objptr, #204
LR__0126
' 
' yzoom:=1<<((mode>>2) & 3)
	mov	local04, local01
	shr	local04, #2
	and	local04, #3
	decod	local02, local04
	add	objptr, #208
	wrlong	local02, objptr
' azoom:=xzoom*yzoom
	sub	objptr, #4
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local06, objptr
	qmul	local04, local06
	getqx	local02
	add	objptr, #4
	wrlong	local02, objptr
' 
' cpl:=timings[11]
	sub	objptr, #88
	rdlong	local02, objptr
	add	objptr, #20
	wrlong	local02, objptr
	sub	objptr, #144
' if (mode<512)
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0127
'   lines:=(timings[12]>>4)+/yzoom
	add	objptr, #128
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if ((timings[12]>>4)+//yzoom) <>0
	sub	objptr, #20
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
	cmp	muldiva_, #0 wz
 if_e	jmp	#LR__0130
'     lines +=1
	add	objptr, #148
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
	sub	objptr, #148
' 
' else
	jmp	#LR__0130
LR__0127
'   lines:=timings[12]/yzoom
	add	objptr, #128
	rdlong	muldiva_, objptr
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#divide_
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if cpl//xzoom==0
	sub	objptr, #4
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	cmp	muldiva_, #0 wz
 if_ne	jmp	#LR__0128
'     cpl:=cpl/xzoom
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	add	objptr, #144
	wrlong	muldivb_, objptr
	sub	objptr, #144
'   else
	jmp	#LR__0129
LR__0128
'     cpl:=cpl/xzoom+1
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	mov	local02, muldivb_
	add	local02, #1
	add	objptr, #144
	wrlong	local02, objptr
	sub	objptr, #144
LR__0129
LR__0130
' 
' buflen:=(cpl*lines)
	add	objptr, #144
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local06, objptr
	qmul	local04, local06
	getqx	local02
	sub	objptr, #100
	wrlong	local02, objptr
' buf_ptr:=$80000-4*buflen
	mov	local04, local02
	sub	objptr, #48
	shl	local04, #2
	decod	local02, #19
	sub	local02, local04
	wrlong	local02, objptr
' mode_ptr:=@timings
	add	objptr, #80
	mov	local02, objptr
	sub	objptr, #60
	wrlong	local02, objptr
' graphmode:=mode
	add	objptr, #176
	wrlong	local01, objptr
	sub	objptr, #196
' makedl(mode)
	mov	arg01, local01
	call	#_hng030rm_spin2_makedl
LR__0131
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_setmode_ret
	ret

' 
' 
' 
' 
' '---------- Make a display list
' 
' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
_hng030rm_spin2_makedl
' 
' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
' 
' '   0 - display a up/down border line
' 
' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
' '    nnnn - font line to display, 0..15
' '    llllll - character line, determines the cursor Y position
' 
' 
' if (mode &256==0)
	test	arg01, #256 wz
 if_ne	jmp	#LR__0132
'   dl_ptr:=buf_ptr-4*576
	rdlong	_var01, objptr
	sub	_var01, ##2304
	add	objptr, #28
	wrlong	_var01, objptr
	sub	objptr, #28
' else
	jmp	#LR__0133
LR__0132
'   dl_ptr:=buf_ptr-4*496
	rdlong	_var01, objptr
	sub	_var01, ##1984
	add	objptr, #28
	wrlong	_var01, objptr
	sub	objptr, #28
LR__0133
'  ' dl_ptr:=buf_ptr-4*540
' 
' vzoom:=((mode>>2) & 3)
	mov	_var02, arg01
	shr	_var02, #2
	and	_var02, #3
' 
' 
' if mode<512 '' text modes
	cmps	arg01, ##512 wcz
 if_ae	jmp	#LR__0141
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	_var01, objptr
	sub	objptr, #104
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0138
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	_var03, #0
	add	objptr, #104
	rdlong	_var04, objptr
	sub	objptr, #104
	sub	_var04, #1
	cmps	_var04, #0 wcz
 if_a	mov	_var05, #1
 if_be	neg	_var05, #1
	mov	_var06, _var05
	add	_var04, _var05
	loc	pa,	#(@LR__0135-@LR__0134)
	call	#FCACHE_LOAD_
LR__0134
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var07, objptr
	sub	objptr, #28
	mov	_var08, _var03
	shl	_var08, #2
	add	_var07, _var08
	wrlong	#0, _var07
	add	_var03, _var06
	cmp	_var03, _var04 wz
 if_ne	jmp	#LR__0134
LR__0135
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	_var03, objptr
	add	objptr, #24
	rdlong	_var05, objptr
	add	_var03, _var05
	add	objptr, #12
	rdlong	_var09, objptr
	sub	_var09, #1
	sub	objptr, #36
	rdlong	_var10, objptr
	add	objptr, #24
	rdlong	_var11, objptr
	sub	objptr, #128
	add	_var10, _var11
	cmps	_var09, _var10 wcz
 if_a	mov	_var08, #1
 if_be	neg	_var08, #1
	mov	_var12, _var08
	add	_var09, _var08
	loc	pa,	#(@LR__0137-@LR__0136)
	call	#FCACHE_LOAD_
LR__0136
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var13, objptr
	sub	objptr, #28
	mov	_var14, _var03
	shl	_var14, #2
	add	_var13, _var14
	wrlong	#0, _var13
	add	_var03, _var12
	cmp	_var03, _var09 wz
 if_ne	jmp	#LR__0136
LR__0137
LR__0138
'   lpc:=16<<vzoom
	mov	_var15, #16
	shl	_var15, _var02
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	_var03, objptr
	mov	_var16, _var03
	add	objptr, #24
	rdlong	_var17, objptr
	add	_var16, _var17
	sub	_var16, #1
	sub	objptr, #24
	rdlong	_var08, objptr
	sub	objptr, #104
	cmps	_var16, _var08 wcz
 if_a	mov	_var18, #1
 if_be	neg	_var18, #1
	mov	_var19, _var18
	add	_var16, _var18
	loc	pa,	#(@LR__0140-@LR__0139)
	call	#FCACHE_LOAD_
LR__0139
'     fontline2:=((i-timings[6])+//lpc)>>vzoom
	mov	muldiva_, _var03
	add	objptr, #104
	rdlong	_var20, objptr
	sub	objptr, #104
	sub	muldiva_, _var20
	mov	muldivb_, _var15
	call	#unsdivide_
	shr	muldiva_, _var02
	mov	_var21, muldiva_
'     charline:=(i-timings[6])+/lpc
	mov	muldiva_, _var03
	add	objptr, #104
	rdlong	_var22, objptr
	sub	objptr, #104
	sub	muldiva_, _var22
	mov	muldivb_, _var15
	call	#unsdivide_
	mov	_var23, muldivb_
'     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
	rdlong	_var11, objptr
	add	objptr, #144
	rdlong	_var20, objptr
	qmul	_var20, _var23
	getqx	_var24
	shl	_var24, #2
	add	_var11, _var24
	mov	_var14, arg01
	and	_var14, #3
	add	_var11, _var14
'     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
	shl	_var11, #12
	mov	_var22, _var21
	shl	_var22, #8
	add	_var11, _var22
	mov	_var20, _var23
	shl	_var20, #2
	add	_var11, _var20
	add	_var11, #1
	sub	objptr, #116
	rdlong	_var13, objptr
	sub	objptr, #28
	mov	_var14, _var03
	shl	_var14, #2
	add	_var13, _var14
	wrlong	_var11, _var13
	add	_var03, _var19
	cmp	_var03, _var16 wz
 if_ne	jmp	#LR__0139
LR__0140
LR__0141
' 
' 
' 
' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
	cmps	arg01, ##512 wcz
 if_b	jmp	#LR__0149
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	_var01, objptr
	sub	objptr, #104
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0146
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	_var03, #0
	add	objptr, #104
	rdlong	_var25, objptr
	sub	objptr, #104
	sub	_var25, #1
	cmps	_var25, #0 wcz
 if_a	mov	_var05, #1
 if_be	neg	_var05, #1
	mov	_var26, _var05
	add	_var25, _var05
	loc	pa,	#(@LR__0143-@LR__0142)
	call	#FCACHE_LOAD_
LR__0142
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var07, objptr
	sub	objptr, #28
	mov	_var08, _var03
	shl	_var08, #2
	add	_var07, _var08
	wrlong	#0, _var07
	add	_var03, _var26
	cmp	_var03, _var25 wz
 if_ne	jmp	#LR__0142
LR__0143
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	_var03, objptr
	add	objptr, #24
	rdlong	_var05, objptr
	add	_var03, _var05
	add	objptr, #12
	rdlong	_var27, objptr
	sub	_var27, #1
	sub	objptr, #36
	rdlong	_var10, objptr
	add	objptr, #24
	rdlong	_var11, objptr
	sub	objptr, #128
	add	_var10, _var11
	cmps	_var27, _var10 wcz
 if_a	mov	_var08, #1
 if_be	neg	_var08, #1
	mov	_var28, _var08
	add	_var27, _var08
	loc	pa,	#(@LR__0145-@LR__0144)
	call	#FCACHE_LOAD_
LR__0144
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var13, objptr
	sub	objptr, #28
	mov	_var14, _var03
	shl	_var14, #2
	add	_var13, _var14
	wrlong	#0, _var13
	add	_var03, _var28
	cmp	_var03, _var27 wz
 if_ne	jmp	#LR__0144
LR__0145
LR__0146
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	_var03, objptr
	mov	_var29, _var03
	add	objptr, #24
	rdlong	_var17, objptr
	add	_var29, _var17
	sub	_var29, #1
	sub	objptr, #24
	rdlong	_var08, objptr
	sub	objptr, #104
	cmps	_var29, _var08 wcz
 if_a	mov	_var18, #1
 if_be	neg	_var18, #1
	mov	_var30, _var18
	add	_var29, _var18
	loc	pa,	#(@LR__0148-@LR__0147)
	call	#FCACHE_LOAD_
LR__0147
'     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
	rdlong	_var11, objptr
	mov	_var22, _var03
	add	objptr, #104
	rdlong	_var20, objptr
	sub	_var22, _var20
	shr	_var22, _var02
	add	objptr, #40
	rdlong	_var14, objptr
	qmul	_var14, _var22
	getqx	_var31
	shl	_var31, #2
	add	_var11, _var31
	mov	_var32, arg01
	and	_var32, #3
	add	_var11, _var32
'     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
	shl	_var11, #12
	add	_var11, #2
	mov	_var22, arg01
	and	_var22, #48
	shr	_var22, #2
	add	_var11, _var22
	sub	objptr, #116
	rdlong	_var20, objptr
	sub	objptr, #28
	mov	_var24, _var03
	shl	_var24, #2
	add	_var20, _var24
	wrlong	_var11, _var20
	add	_var03, _var30
	cmp	_var03, _var29 wz
 if_ne	jmp	#LR__0147
LR__0148
LR__0149
_hng030rm_spin2_makedl_ret
	ret

'       
' '--------- Start the driver with graphics mode 'mode' at pins 'base'
' 
' pub start(mode,base):result
_hng030rm_spin2_start
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
' 
' ' initialize pointers and variables
' 
' border_ptr:=@bordercolor
	add	objptr, #44
	mov	local02, objptr
	sub	objptr, #36
	wrlong	local02, objptr
' font_ptr:=@st_font
	add	ptr__hng030rm_spin2_dat__, ##4096
	sub	objptr, #4
	wrlong	ptr__hng030rm_spin2_dat__, objptr
' hdmibase:=base
	add	objptr, #32
	wrlong	arg02, objptr
	sub	objptr, #36
' p1:=@putpixel1
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel1_
	sub	ptr__hng030rm_spin2_dat__, ##4096
	call	#__system___make_methodptr
	add	objptr, #220
	wrlong	result1, objptr
	sub	objptr, #220
' p2:=@putpixel2
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel2_
	call	#__system___make_methodptr
	add	objptr, #224
	wrlong	result1, objptr
	sub	objptr, #224
' p4:=@putpixel4
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel4_
	call	#__system___make_methodptr
	add	objptr, #228
	wrlong	result1, objptr
	sub	objptr, #228
' p8:=@putpixel8
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel8_
	call	#__system___make_methodptr
	add	objptr, #232
	wrlong	result1, objptr
	sub	objptr, #232
' 
' 
' ' the mode has to be set here to enable computing the buffer length
' 
' setmode(mode)
	mov	arg01, local01
	call	#_hng030rm_spin2_setmode
' 
' vblank_ptr:=@vblank
	add	objptr, #64
	mov	local02, objptr
	sub	objptr, #52
	wrlong	local02, objptr
' cursor_ptr:=@cursor_x
	add	objptr, #40
	mov	local02, objptr
	sub	objptr, #36
	wrlong	local02, objptr
' 
' fontnum_ptr:=@fontnum
	add	objptr, #136
	mov	local02, objptr
	sub	objptr, #120
	wrlong	local02, objptr
' 
' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
	add	objptr, #120
	wrlong	#0, objptr
' bytemove(@colors,@vgacolors,16)
	add	objptr, #28
	mov	arg01, objptr
	sub	objptr, #180
	add	ptr__hng030rm_spin2_dat__, ##7768
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7768
	mov	arg03, #16
	call	#__system____builtin_memmove
' 
' ' initialize a cursor
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
' cursor_sh:=14
	add	objptr, #1
	wrbyte	#14, objptr
	sub	objptr, #54
' 
' 
' ' start the cog
' 
' cog:=coginit(16,@hdmi, @buf_ptr)
	add	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	add	objptr, #40
	wrlong	result1, objptr
	sub	objptr, #40
' waitms(20)
	mov	arg01, #20
	call	#__system___waitms
' 
' ' clear the screen and set the colors to green on black
' 
' cls(c_green,c_black)
	mov	arg01, #199
	mov	arg02, #0
	call	#_hng030rm_spin2_cls
' setbordercolor(0,0,128)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #128
	call	#_hng030rm_spin2_setbordercolor
' setwritecolors(c_green,c_black)
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	#199, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
' 
' return cog
	sub	objptr, #20
	rdlong	result1, objptr
	sub	objptr, #40
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_start_ret
	ret

' 'this is the object and not a program
' 
' pub start() :cog
_retrocog_spin2_start
	mov	COUNT_, #2
	call	#pushregs_
' 
' cog:=cogspin(16,serialcog(),@serialstack)
	mov	local01, objptr
	add	objptr, ##832
	mov	local02, objptr
	wrlong	local01, local02
	add	local02, #4
	wrlong	ptr__retrocog_spin2_serialcog_, local02
	mov	arg03, objptr
	sub	objptr, ##832
	mov	arg01, #16
	setq	arg03
	coginit	arg01, entryptr__ wc
 if_b	neg	arg01, #1
	mov	result1, arg01
' return cog
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_start_ret
	ret

' 
' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
_retrocog_spin2_serialcog
	mov	COUNT_, #12
	call	#pushregs_
' 
' 'start serial and midi
' 
' serial_start(rxpin, txpin, baudrate)
	mov	arg01, #32
	mov	arg02, #33
	mov	arg03, ##1920000
	call	#_retrocog_spin2_serial_start
' serial_start(midiin,midiout,mbaudrate)
	mov	arg01, #29
	mov	arg02, #30
	mov	arg03, ##31250
	call	#_retrocog_spin2_serial_start
' serial_start(srxpin,stxpin,sbaudrate)
	mov	local01, #62
	mov	local02, ##2000000
	mov	arg01, #63
	mov	arg02, #62
	mov	arg03, ##2000000
	call	#_retrocog_spin2_serial_start
' 
' mb:=(-1)
	neg	local03, #1
' b:=(-1)
	neg	local04, #1
' 
' mousefront:=0
	mov	local05, #0
	add	objptr, #8
	wrlong	#0, objptr
' mousetail:=0
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, #12
' kbdfront:=0
	wrlong	#0, objptr
' kbdtail:=0
	add	objptr, #4
	wrlong	#0, objptr
' midifront:=0
	add	objptr, #12
	wrlong	#0, objptr
' miditail:=0
	add	objptr, #4
	wrlong	#0, objptr
' serialfront:=0
	add	objptr, #4
	wrlong	#0, objptr
' serialtail:=0
	add	objptr, #4
	wrlong	#0, objptr
' long[$30]:=0
	wrlong	#0, #48
' long[$34]:=0
	wrlong	#0, #52
' long[$38]:=0
	wrlong	#0, #56
	sub	objptr, #28
' long[$3C]:=0
	wrlong	#0, #60
' 
' repeat
LR__0150
' 
' '  repeat 
'   rr:=rxcheck(rxpin)
	mov	arg01, #32
	call	#_retrocog_spin2_rxcheck
	mov	local06, result1
'   mrr:=rxcheck(midiin)
	mov	arg01, #29
	call	#_retrocog_spin2_rxcheck
	mov	local07, result1
'   srr:=rxcheck(srxpin)
	mov	arg01, #63
	call	#_retrocog_spin2_rxcheck
	mov	local05, result1
	mov	local08, local05
' 
' '  until rr>=0 || mrr>=0  || srr>=0
' 
'   
' ' midi. Must be >= $80 for a command
' '$80-$8F - 3 bytes note off. note, velocity
' '$90-$9F - 3 bytes note on, note, velocity
' '$A0-$AF - 3 bytes poly aftertouch. note, value
' '$B0-$BF - 3 bytes control change, controller-value, 
' '$C0-$CF - 2 bytes program change
' '$D0-$DF - 2 bytes mono aftertouch
' '$E0-$EF - 3 bytes pitch bend, $2000 - center
' '$F0-$FF - 1 byte
'   
'   if srr>=0
	cmps	local08, #0 wcz
 if_b	jmp	#LR__0152
'   
'     if serialfront<>((serialtail-1) //32)
	add	objptr, #28
	rdlong	local01, objptr
	mov	local05, local01
	sub	local05, #1
	abs	local02, local05 wc
	and	local02, #31
 if_b	neg	local02, local02
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #24
	mov	local10, local09
	cmp	local10, local02 wz
 if_e	jmp	#LR__0151
'       serialbuf[serialfront]:=srr
	add	objptr, #24
	rdlong	local05, objptr
	add	objptr, ##776
	add	local05, objptr
	wrbyte	local08, local05
'       serialfront+=1
	sub	objptr, ##776
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
'       serialfront:=serialfront // 32
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #31
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #24
LR__0151
LR__0152
'     
'   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
	cmps	local07, #128 wcz
 if_b	jmp	#LR__0153
	cmps	local07, #191 wcz
 if_be	jmp	#LR__0154
LR__0153
	cmps	local07, #224 wcz
 if_b	jmp	#LR__0155
	cmps	local07, #239 wcz
 if_a	jmp	#LR__0155
LR__0154
'     mb:=2
	mov	local03, #2
'     midireport:=mrr<<24
	mov	local05, local07
	shl	local05, #24
	mov	local11, local05
LR__0155
' 
'   if (mrr>=$C0) && (mrr<=$DF)
	cmps	local07, #192 wcz
 if_b	jmp	#LR__0156
	cmps	local07, #223 wcz
 if_a	jmp	#LR__0156
'     mb:=1
	mov	local03, #1
'     midireport:=mrr<<24
	mov	local05, local07
	shl	local05, #24
	mov	local11, local05
LR__0156
'   
'   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
	cmps	local07, #240 wcz
'     mb:=4
 if_ae	mov	local03, #4
'     midireport:=mrr<<24  
 if_ae	mov	local11, local07
 if_ae	shl	local11, #24
'   
'   if (mrr<$80) && (mb>0) && (mrr>=0)
	cmps	local07, #128 wcz
 if_ae	jmp	#LR__0158
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0158
	cmps	local07, #0 wcz
 if_b	jmp	#LR__0158
'     
'     mb--
	mov	local05, local03
	mov	local01, local03
	sub	local01, #1
	mov	local03, local01
'     if mb<3
	cmps	local03, #3 wcz
 if_ae	jmp	#LR__0157
'       midireport+=mrr<<(mb<<3)
	mov	local05, local11
	mov	local01, local07
	mov	local02, local03
	shl	local02, #3
	shl	local01, local02
	add	local05, local01
	mov	local11, local05
LR__0157
LR__0158
'   
'   if mb==0
	cmp	local03, #0 wz
 if_ne	jmp	#LR__0160
'     
'     if midifront<>((miditail-1) //32)
	add	objptr, #20
	rdlong	local01, objptr
	mov	local05, local01
	sub	local05, #1
	abs	local02, local05 wc
	and	local02, #31
 if_b	neg	local02, local02
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #16
	mov	local10, local09
	cmp	local10, local02 wz
 if_e	jmp	#LR__0159
'       midibuf[midifront]:=midireport
	add	objptr, #16
	rdlong	local05, objptr
	shl	local05, #2
	add	objptr, ##656
	add	local05, objptr
	wrlong	local11, local05
'       midifront+=1
	sub	objptr, ##656
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
'       midifront:=midifront // 32
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #31
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #16
LR__0159
'     mb:=(-1)
	neg	local03, #1
LR__0160
' 
' 'Keyboard and mouse
' 
'   if (rr>=$80) && (rr<>$FF)
	cmps	local06, #128 wcz
 if_b	jmp	#LR__0161
	cmp	local06, #255 wz
 if_e	jmp	#LR__0161
'     b:=3
	mov	local04, #3
'     kbmreport:=rr<<24
	mov	local05, local06
	shl	local05, #24
	mov	local12, local05
LR__0161
'   
'   if (rr<$80) && (b>0) && (rr>=0)
	cmps	local06, #128 wcz
 if_ae	jmp	#LR__0162
	cmps	local04, #0 wcz
 if_be	jmp	#LR__0162
	cmps	local06, #0 wcz
 if_b	jmp	#LR__0162
'     b--
	sub	local04, #1
'     kbmreport+=rr<<(b<<3)  
	mov	local05, local12
	mov	local01, local06
	mov	local02, local04
	shl	local02, #3
	shl	local01, local02
	add	local05, local01
	mov	local12, local05
LR__0162
'   
'   if (rr==$FF)
	cmp	local06, #255 wz
'     b:=0   
 if_e	mov	local04, #0
' 
'   if b==0  
	cmp	local04, #0 wz
 if_ne	jmp	#LR__0167
'  
'     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
	cmp	local12, ##-2147483648 wcz
 if_b	jmp	#LR__0164
	cmp	local12, ##-2030043136 wcz
 if_ae	jmp	#LR__0164
'       if mousefront<>((mousetail-1) //128)
	add	objptr, #12
	rdlong	local01, objptr
	mov	local05, local01
	sub	local05, #1
	abs	local02, local05 wc
	and	local02, #127
 if_b	neg	local02, local02
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #8
	mov	local10, local09
	cmp	local10, local02 wz
 if_e	jmp	#LR__0163
'         mousebuf[mousefront]:=kbmreport
	add	objptr, #8
	rdlong	local05, objptr
	shl	local05, #2
	add	objptr, #152
	add	local05, objptr
	wrlong	local12, local05
'         mousefront+=1
	sub	objptr, #152
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
'         mousefront:=mousefront // 128
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #127
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #8
LR__0163
LR__0164
'     b:=(-1)
	neg	local04, #1
' 
'     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
	cmp	local12, ##-2030043136 wcz
 if_b	jmp	#LR__0166
	cmp	local12, ##-1979711488 wcz
 if_ae	jmp	#LR__0166
'       if kbdfront<>((kbdtail-1) //32)
	add	objptr, #4
	rdlong	local01, objptr
	sub	objptr, #4
	mov	local05, local01
	sub	local05, #1
	abs	local02, local05 wc
	and	local02, #31
 if_b	neg	local02, local02
	rdlong	local10, objptr
	cmp	local10, local02 wz
 if_e	jmp	#LR__0165
'         kbdbuf[kbdfront]:=kbmreport
	rdlong	local05, objptr
	shl	local05, #2
	add	objptr, #32
	add	local05, objptr
	wrlong	local12, local05
'         kbdfront+=1
	sub	objptr, #32
	rdlong	local01, objptr
	add	local01, #1
	wrlong	local01, objptr
'         kbdfront:=kbdfront // 32
	abs	local05, local01 wc
	and	local05, #31
 if_b	neg	local05, local05
	wrlong	local05, objptr
LR__0165
LR__0166
'     b:=(-1)
	neg	local04, #1
LR__0167
' 
' 
'   if long[$30]==0
	rdlong	local05, #48 wz
 if_ne	jmp	#LR__0169
'     if kbdfront<>kbdtail
	rdlong	local05, objptr
	add	objptr, #4
	rdlong	local02, objptr
	sub	objptr, #4
	mov	local01, local02
	cmp	local05, local01 wz
 if_e	jmp	#LR__0168
'       long[$30]:=kbdbuf[kbdtail]
	add	objptr, #4
	rdlong	local05, objptr
	shl	local05, #2
	add	objptr, #28
	add	local05, objptr
	rdlong	local10, local05
	wrlong	local10, #48
'       kbdtail++
	sub	objptr, #28
	rdlong	local10, objptr
	mov	local02, local10
	add	local02, #1
	wrlong	local02, objptr
'       kbdtail:= kbdtail // 32
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #31
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #4
LR__0168
LR__0169
'       
'   if long[$34]==0
	rdlong	local05, #52 wz
 if_ne	jmp	#LR__0171
'     if mousefront<>mousetail
	add	objptr, #8
	rdlong	local01, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #12
	mov	local02, local10
	cmp	local01, local02 wz
 if_e	jmp	#LR__0170
'       long[$34]:=mousebuf[mousetail]
	add	objptr, #12
	rdlong	local05, objptr
	shl	local05, #2
	add	objptr, #148
	add	local05, objptr
	rdlong	local10, local05
	wrlong	local10, #52
'       mousetail++
	sub	objptr, #148
	rdlong	local10, objptr
	mov	local02, local10
	add	local02, #1
	wrlong	local02, objptr
'       mousetail:= mousetail // 128
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #127
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #12
LR__0170
LR__0171
' 
'       
'   if long[$38]==0
	rdlong	local05, #56 wz
 if_ne	jmp	#LR__0173
'     if midifront<>miditail
	add	objptr, #16
	rdlong	local01, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #20
	mov	local02, local10
	cmp	local01, local02 wz
 if_e	jmp	#LR__0172
'       long[$38]:=midibuf[miditail]
	add	objptr, #20
	rdlong	local05, objptr
	shl	local05, #2
	add	objptr, ##652
	add	local05, objptr
	rdlong	local10, local05
	wrlong	local10, #56
'       miditail++
	sub	objptr, ##652
	rdlong	local10, objptr
	mov	local02, local10
	add	local02, #1
	wrlong	local02, objptr
'       miditail:= miditail // 32
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #31
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #20
LR__0172
LR__0173
'       
'   if long[$3c]==0
	rdlong	local05, #60 wz
 if_ne	jmp	#LR__0150
'     if serialfront<>serialtail
	add	objptr, #24
	rdlong	local01, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #28
	mov	local02, local10
	cmp	local01, local02 wz
 if_e	jmp	#LR__0150
'       byte[$3c]:=255
	wrbyte	#255, #60
'       byte[$3D]:=serialbuf[serialtail]
	add	objptr, #28
	rdlong	local05, objptr
	add	objptr, ##772
	add	local05, objptr
	rdbyte	local10, local05
	wrbyte	local10, #61
'       serialtail++
	sub	objptr, ##772
	rdlong	local10, objptr
	mov	local02, local10
	add	local02, #1
	wrlong	local02, objptr
'       serialtail:= serialtail // 32
	mov	local01, local02
	abs	local05, local01 wc
	and	local05, #31
 if_b	neg	local05, local05
	wrlong	local05, objptr
	sub	objptr, #28
	jmp	#LR__0150
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_serialcog_ret
	ret

'       
' 
' ''---------------------- Serial functions from jm_serial.spin2, modified
' 
' pub serial_start(rxpin, txpin, baud) | bitmode
_retrocog_spin2_serial_start
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
	rdlong	arg01, #20
	decod	arg02, #16
	qmul	arg01, arg02
	getqy	local03
	getqx	local04
	setq	local03
	qdiv	local04, arg03
	getqx	result1
	mov	arg03, result1
	and	arg03, ##-1024
' bitmode |= 7                                                  ' set bits (8)
	or	arg03, #7
' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
	dirl	local01
	wrpin	##4158, local01
	wxpin	arg03, local01
	wypin	#0, local01
	dirh	local01
' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
	dirl	local02
	wrpin	#124, local02
	wxpin	arg03, local02
	wypin	#0, local02
	dirh	local02
' pinhigh(rxpin)
	drvh	local01
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_serial_start_ret
	ret

' 
' pub rxcheck(pin) : rxbyte | check
_retrocog_spin2_rxcheck
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
' 
' '' Check for serial input
' '' -- returns -1 if nothing available
' 
'   rxbyte := -1
	neg	local02, #1
'   check := pinr(pin)
	mov	arg01, local01
	call	#__system___pinread
	mov	local03, result1 wz
'   if (check)
'     rxbyte := rdpin(pin) >> 24
 if_ne	mov	local02, #0
 if_ne	rdpin	local02, local01
 if_ne	shr	local02, #24
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_rxcheck_ret
	ret

_trackerplayer_spin2_initModule
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #48
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
' 
'   ' Set some data pointers
'   magicFour      := hubPtr + 1080
	rdlong	local01, fp
	add	local01, ##1080
	add	objptr, #157
	wrlong	local01, objptr
'   nameStr        := hubPtr
	rdlong	local01, fp
	sub	objptr, #151
	wrlong	local01, objptr
'   samplesInfoLut := hubPtr + 20
	rdlong	local01, fp
	add	local01, #20
	add	objptr, #4
	wrlong	local01, objptr
' 
'   ' Is this a 31 sample module?
'   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
	add	objptr, #147
	rdlong	local01, objptr
	sub	objptr, #157
	rdbyte	local02, local01
	cmp	local02, #77 wz
 if_ne	jmp	#LR__0177
	add	objptr, #157
	rdlong	local03, objptr
	sub	objptr, #157
	add	local03, #2
	rdbyte	local04, local03
	cmp	local04, #75 wz
 if_ne	jmp	#LR__0177
'     songLength          := byte[hubPtr + 950]
	rdlong	local01, fp
	add	local01, ##950
	rdbyte	local05, local01
	add	objptr, #154
	wrbyte	local05, objptr
'     unknown1            := byte[hubPtr + 951]
	rdlong	local01, fp
	add	local01, ##951
	rdbyte	local05, local01
	add	objptr, #2
	wrbyte	local05, objptr
'     songPositionsLut    :=      hubPtr + 952
	rdlong	local01, fp
	add	local01, ##952
	sub	objptr, #6
	wrlong	local01, objptr
'     patternsData        :=      hubPtr + 1084
	rdlong	local01, fp
	add	local01, ##1084
	sub	objptr, #4
	wrlong	local01, objptr
'     numberOfInstruments := 31
	add	objptr, #20
	wrbyte	#31, objptr
'     numberOfPatterns    := 0    ' Find out how many patterns that are available
	sub	objptr, #11
	wrbyte	#0, objptr
	sub	objptr, #155
'     repeat i from 952 to 1079
	add	fp, #8
	wrlong	##952, fp
	sub	fp, #8
	loc	pa,	#(@LR__0176-@LR__0174)
	call	#FCACHE_LOAD_
LR__0174
'       if byte[hubPtr][i] > numberOfPatterns
	rdlong	local06, fp
	add	fp, #8
	rdlong	local02, fp
	sub	fp, #8
	add	local02, local06
	rdbyte	local04, local02
	add	objptr, #155
	rdbyte	local07, objptr
	sub	objptr, #155
	cmps	local04, local07 wcz
 if_be	jmp	#LR__0175
'         numberOfPatterns := byte[hubPtr][i]
	rdlong	local06, fp
	add	fp, #8
	rdlong	local02, fp
	sub	fp, #8
	add	local02, local06
	rdbyte	local04, local02
	add	objptr, #155
	wrbyte	local04, objptr
	sub	objptr, #155
LR__0175
	add	fp, #8
	rdlong	local05, fp
	add	local05, #1
	wrlong	local05, fp
	sub	fp, #8
	cmp	local05, ##1080 wcz
 if_b	jmp	#LR__0174
LR__0176
'     numberOfPatterns++
	add	objptr, #155
	rdbyte	local05, objptr
	rdbyte	local02, objptr
	add	local02, #1
	wrbyte	local02, objptr
'     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
	sub	objptr, #9
	rdlong	local01, objptr
	add	objptr, #9
	rdbyte	local02, objptr
	shl	local02, #10
	add	local01, local02
	sub	objptr, #141
	wrlong	local01, objptr
	sub	objptr, #14
' 
'   ' This must be an oldschool 15 sample soundtracker module
'   else
	jmp	#LR__0181
LR__0177
'     songLength          := byte[hubPtr + 470]
	rdlong	local01, fp
	add	local01, #470
	rdbyte	local05, local01
	add	objptr, #154
	wrbyte	local05, objptr
'     unknown1            := byte[hubPtr + 471]
	rdlong	local01, fp
	add	local01, #471
	rdbyte	local05, local01
	add	objptr, #2
	wrbyte	local05, objptr
'     songPositionsLut    :=      hubPtr + 472
	rdlong	local01, fp
	add	local01, #472
	sub	objptr, #6
	wrlong	local01, objptr
'     patternsData        :=      hubPtr + 600
	rdlong	local01, fp
	add	local01, ##600
	sub	objptr, #4
	wrlong	local01, objptr
'     numberOfInstruments := 15
	add	objptr, #20
	wrbyte	#15, objptr
'     numberOfPatterns    := 0    ' Find out how many patterns that are available
	sub	objptr, #11
	wrbyte	#0, objptr
	sub	objptr, #155
'     repeat i from 472 to 599
	add	fp, #8
	wrlong	#472, fp
	sub	fp, #8
	loc	pa,	#(@LR__0180-@LR__0178)
	call	#FCACHE_LOAD_
LR__0178
'       if byte[hubPtr][i] > numberOfPatterns
	rdlong	local06, fp
	add	fp, #8
	rdlong	local02, fp
	sub	fp, #8
	add	local02, local06
	rdbyte	local04, local02
	add	objptr, #155
	rdbyte	local07, objptr
	sub	objptr, #155
	cmps	local04, local07 wcz
 if_be	jmp	#LR__0179
'         numberOfPatterns := byte[hubPtr][i]
	rdlong	local06, fp
	add	fp, #8
	rdlong	local02, fp
	sub	fp, #8
	add	local02, local06
	rdbyte	local04, local02
	add	objptr, #155
	wrbyte	local04, objptr
	sub	objptr, #155
LR__0179
	add	fp, #8
	rdlong	local05, fp
	add	local05, #1
	wrlong	local05, fp
	sub	fp, #8
	cmp	local05, ##600 wcz
 if_b	jmp	#LR__0178
LR__0180
'     numberOfPatterns++
	add	objptr, #155
	rdbyte	local05, objptr
	rdbyte	local02, objptr
	add	local02, #1
	wrbyte	local02, objptr
'     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
	sub	objptr, #9
	rdlong	local01, objptr
	add	objptr, #9
	rdbyte	local02, objptr
	shl	local02, #10
	add	local01, local02
	sub	objptr, #141
	wrlong	local01, objptr
	sub	objptr, #14
LR__0181
' 
'   ' Iterate through all samples and fill in the sample pointer LUT
'   tmpPtr := sampleDataPtr
	add	objptr, #14
	rdlong	local01, objptr
	add	fp, #12
	wrlong	local01, fp
'   repeat i from 1 to numberOfInstruments
	sub	fp, #4
	wrlong	#1, fp
	sub	fp, #8
	add	objptr, #152
	rdbyte	local02, objptr
	cmps	local02, #1 wcz
 if_a	mov	local05, #1
 if_be	neg	local05, #1
	mov	local08, local05
	rdbyte	local09, objptr
	sub	objptr, #166
	add	local09, local08
LR__0182
'     samplesPtrLut[i-1] := tmpPtr
	add	fp, #8
	rdlong	local10, fp
	sub	local10, #1
	shl	local10, #2
	add	objptr, #18
	add	local10, objptr
	add	fp, #4
	rdlong	local11, fp
	wrlong	local11, local10
'     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	mov	arg02, fp
	sub	fp, #20
	mov	arg03, fp
	add	fp, #4
	mov	arg04, fp
	add	fp, #4
	mov	arg05, fp
	add	fp, #4
	mov	arg06, fp
	add	fp, #4
	mov	arg07, fp
	sub	fp, #32
	sub	objptr, #18
	call	#_trackerplayer_spin2_getSampleInfo
'     tmpPtr += samLength
	add	fp, #12
	rdlong	local07, fp
	add	fp, #4
	rdlong	local10, fp
	add	local07, local10
	sub	fp, #4
	wrlong	local07, fp
	sub	fp, #4
	rdlong	local07, fp
	add	local07, local08
	wrlong	local07, fp
	sub	fp, #8
	cmp	local07, local09 wz
 if_ne	jmp	#LR__0182
' 
'   ' Below this point, all play routine variables are resest to their default values
'   tickCounter                 := 0
	add	objptr, #161
	wrbyte	#0, objptr
'   patternRow                  := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   songPosition                := startPattern
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	objptr, #1
	wrbyte	local01, objptr
'   currentSongSpeed            := 6
	add	objptr, #1
	wrbyte	#6, objptr
'   patternDelay                := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   ticksPerMinute              := 50 * 60
	add	objptr, #258
	wrlong	##3000, objptr
	sub	objptr, #423
'   cyclesToWait                := systemClock / 50
	rdlong	muldiva_, objptr
	mov	muldivb_, #50
	call	#divide_
	add	objptr, #427
	wrlong	muldivb_, objptr
'   sampleNumber_memory         := 0
	add	objptr, #53
	wrbyte	#0, objptr
'   lpFilter                    := 0
	sub	objptr, #37
	wrbyte	#0, objptr
'   cmdD_memoryX                := 0
	add	objptr, #41
	wrbyte	#0, objptr
'   cmdD_memoryY                := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdD_updatePosition         := false
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdB_memoryZ                := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdB_updatePosition         := false
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdE6_updatePositionCommon  := false
	add	objptr, #13
	wrbyte	#0, objptr
	sub	objptr, #501
' 
'   repeat i from 0 to LAST_CHANNEL
	add	fp, #8
	wrlong	#0, fp
	sub	fp, #8
LR__0183
' 
'     currRepeatPoint[i]        := 0
	add	fp, #8
	rdlong	local03, fp
	shl	local03, #1
	add	objptr, #215
	add	local03, objptr
	wrword	#0, local03
'     currSampleLength[i]       := 4
	rdlong	local03, fp
	shl	local03, #1
	sub	objptr, #28
	add	local03, objptr
	wrword	#4, local03
'     currSamplePtr[i]          := @null
	rdlong	local02, fp
	shl	local02, #2
	sub	objptr, #20
	add	local02, objptr
	wrlong	ptr__trackerplayer_spin2_dat__, local02
'     currSampleNr[i]           := 0
	rdlong	local05, fp
	add	objptr, #16
	add	local05, objptr
	wrbyte	#0, local05
'     currRepeatLength[i]       := 1
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #12
	add	local05, objptr
	wrlong	#1, local05
'     currPeriod[i]             := 400
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #28
	add	local05, objptr
	wrlong	#400, local05
'     lastSetPeriod[i]          := 400
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #72
	add	local05, objptr
	wrlong	#400, local05
'     lastSetSamplePtr[i]       := 0
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #16
	add	local05, objptr
	wrlong	#0, local05
'     lastSetSampleNr[i]        := 0
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #16
	add	local05, objptr
	wrlong	#0, local05
'     lastSetSampleLength[i]    := 0
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #16
	add	local05, objptr
	wrlong	#0, local05
'     lastSetRepeatLength[i]    := 0
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #16
	add	local05, objptr
	wrlong	#0, local05
'     lastSetRepeatPoint[i]     := 0
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #16
	add	local05, objptr
	wrlong	#0, local05
'     currVolume[i]             := 0
	rdlong	local05, fp
	shl	local05, #2
	sub	objptr, #120
	add	local05, objptr
	wrlong	#0, local05
'     currPanning[i]            := 0
	rdlong	local03, fp
	shl	local03, #1
	add	objptr, #32
	add	local03, objptr
	wrword	#0, local03
'     cmd3_memoryZ[i]           := 0
	rdlong	local05, fp
	add	objptr, #169
	add	local05, objptr
	wrbyte	#0, local05
'     cmd4_memoryY[i]           := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     cmd4_memoryX[i]           := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     cmd7_memoryY[i]           := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     cmd7_memoryX[i]           := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     cmd9_memoryZ[i]           := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     cmdE6_memory[i]           := 0
	rdlong	local05, fp
	add	objptr, #13
	add	local05, objptr
	wrbyte	#0, local05
'     cmdE6_counter[i]          := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     cmdE6_updatePosition[i]   := false
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     sampleNumber_memory[i]    := 0
	rdlong	local05, fp
	sub	objptr, #17
	add	local05, objptr
	wrbyte	#0, local05
'     vibratoPos[i]             := 0
	rdlong	local05, fp
	sub	objptr, #89
	add	local05, objptr
	wrbyte	#0, local05
'     portamentoPeriodMemory[i] := 0
	rdlong	local05, fp
	shl	local05, #2
	add	objptr, #16
	add	local05, objptr
	wrlong	#0, local05
'     portaGlissando[i]         := 0
	rdlong	local05, fp
	add	objptr, #37
	add	local05, objptr
	wrbyte	#0, local05
'     vibratoType[i]            := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     tremoloType[i]            := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
'     tremoloPos[i]             := 0
	rdlong	local05, fp
	sub	objptr, #57
	add	local05, objptr
	wrbyte	#0, local05
'     deltaVolume[i]            := 0
	rdlong	local05, fp
	shl	local05, #2
	sub	objptr, #124
	add	local05, objptr
	wrlong	#0, local05
'     deltaPeriod[i]            := 0
	rdlong	local05, fp
	shl	local05, #2
	sub	objptr, #32
	add	local05, objptr
	wrlong	#0, local05
'     resetTremolo[i]           := 0
	rdlong	local05, fp
	add	objptr, #160
	add	local05, objptr
	wrbyte	#0, local05
'     resetVibrato[i]           := 0
	rdlong	local05, fp
	add	objptr, #4
	add	local05, objptr
	wrbyte	#0, local05
	rdlong	local05, fp
	add	local05, #1
	wrlong	local05, fp
	sub	fp, #8
	cmps	local05, #4 wcz
	sub	objptr, #403
 if_b	jmp	#LR__0183
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_initModule_ret
	ret

' 
' 
' ' This routine needs to be ticked X number of times per second
' ' in order to advance the tracker play routine
' '
' PUB tick() | channel, sampleNumber, period, effect, i
_trackerplayer_spin2_tick
	mov	COUNT_, #5
	call	#pushregs_
	add	ptra, #20
' 
'   if currentSongSpeed == 0
	add	objptr, #164
	rdbyte	local01, objptr wz
	sub	objptr, #164
'     return
 if_e	jmp	#LR__0195
' 
'   ' Iterate over the channels and process everything
'   repeat channel from 0 to LAST_CHANNEL
	wrlong	#0, fp
LR__0184
' 
'     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
	rdlong	arg01, fp
	add	objptr, #163
	rdbyte	arg02, objptr
	sub	objptr, #1
	rdbyte	arg03, objptr
	sub	objptr, #162
	add	fp, #4
	mov	arg04, fp
	add	fp, #4
	mov	arg05, fp
	add	fp, #4
	mov	arg06, fp
	sub	fp, #12
	call	#_trackerplayer_spin2_getNoteData
'     processChannel(channel, sampleNumber, period, effect)
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #12
	call	#_trackerplayer_spin2_processChannel
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	cmps	local02, #4 wcz
 if_b	jmp	#LR__0184
' 
'   ' Incrementation the main counter that drives the whole play routine
'   if ++tickCounter >= (currentSongSpeed + patternDelay)
	add	objptr, #161
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	add	objptr, #3
	rdbyte	local03, objptr
	add	objptr, #1
	rdbyte	local04, objptr
	add	local03, local04
	sub	objptr, #4
	rdbyte	local05, objptr
	sub	objptr, #161
	cmps	local05, local03 wcz
'     tickCounter := 0
 if_ae	add	objptr, #161
 if_ae	wrbyte	#0, objptr
 if_ae	sub	objptr, #161
' 
'   ' If the tick is zero, increment the other counters and do some song positioning handling
'   if tickCounter == 0
	add	objptr, #161
	rdbyte	local01, objptr wz
	sub	objptr, #161
 if_ne	jmp	#LR__0194
' 
'     ' Handle the "pattern repeat" command, "E6"
'     if cmdE6_updatePositionCommon
	add	objptr, #501
	rdbyte	local01, objptr wz
	sub	objptr, #501
 if_e	jmp	#LR__0188
'       repeat i from 0 to LAST_CHANNEL
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
	loc	pa,	#(@LR__0187-@LR__0185)
	call	#FCACHE_LOAD_
LR__0185
'         if cmdE6_updatePosition[i]
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	add	objptr, #497
	add	local02, objptr
	rdbyte	local04, local02 wz
	sub	objptr, #497
 if_e	jmp	#LR__0186
'           patternRow := cmdE6_memory[i]
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	add	objptr, #489
	add	local02, objptr
	rdbyte	local04, local02
	sub	objptr, #327
	wrbyte	local04, objptr
	sub	objptr, #162
LR__0186
'         cmdE6_updatePosition[i] := false
	add	fp, #16
	rdlong	local02, fp
	add	objptr, #497
	add	local02, objptr
	wrbyte	#0, local02
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	sub	fp, #16
	cmps	local02, #4 wcz
	sub	objptr, #497
 if_b	jmp	#LR__0185
LR__0187
	jmp	#LR__0192
LR__0188
' 
'     ' Handle the "skip to next pattern with offset command", "D"
'     elseif cmdD_updatePosition
	add	objptr, #486
	rdbyte	local01, objptr wz
	sub	objptr, #486
 if_e	jmp	#LR__0189
'       if ++songPosition >= songLength
	add	objptr, #163
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	rdbyte	local03, objptr
	sub	objptr, #9
	rdbyte	local04, objptr
	sub	objptr, #154
	cmps	local03, local04 wcz
'         songPosition := 0
 if_ae	add	objptr, #163
 if_ae	wrbyte	#0, objptr
 if_ae	sub	objptr, #163
' 
'       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
	add	objptr, #484
	rdbyte	local03, objptr
	mov	local01, local03
	shl	local01, #2
	add	local01, local03
	shl	local01, #1
	add	objptr, #1
	rdbyte	local04, objptr
	add	local01, local04
	sub	objptr, #323
	wrbyte	local01, objptr
	sub	objptr, #162
' 
'     ' If no "jump to row commands" are active, do a normal pattern incrementation
'     else
	jmp	#LR__0191
LR__0189
'       if ++patternRow >= PATTERN_LENGTH
	add	objptr, #162
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	rdbyte	local03, objptr
	sub	objptr, #162
	cmps	local03, #64 wcz
 if_b	jmp	#LR__0190
'         patternRow := 0
	add	objptr, #162
	wrbyte	#0, objptr
' 
'         if ++songPosition >= songLength
	add	objptr, #1
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	rdbyte	local03, objptr
	sub	objptr, #9
	rdbyte	local04, objptr
	sub	objptr, #154
	cmps	local03, local04 wcz
'           songPosition := 0
 if_ae	add	objptr, #163
 if_ae	wrbyte	#0, objptr
 if_ae	sub	objptr, #163
LR__0190
LR__0191
LR__0192
' 
'     ' Handle "jump to song position" command, "B"
'     if cmdB_updatePosition
	add	objptr, #488
	rdbyte	local01, objptr wz
	sub	objptr, #488
 if_e	jmp	#LR__0193
' 
'       songPosition := cmdB_memoryZ
	add	objptr, #487
	rdbyte	local01, objptr
	sub	objptr, #324
	wrbyte	local01, objptr
' 
'       ifnot cmdD_updatePosition
	add	objptr, #323
	rdbyte	local01, objptr wz
	sub	objptr, #486
'         patternRow := 0
 if_e	add	objptr, #162
 if_e	wrbyte	#0, objptr
 if_e	sub	objptr, #162
LR__0193
' 
'     ' We need to be sure that all positioning commands are reset for the next tick
'     cmdE6_updatePositionCommon := false
	add	objptr, #501
	wrbyte	#0, objptr
'     cmdB_updatePosition := false
	sub	objptr, #13
	wrbyte	#0, objptr
'     cmdD_updatePosition := false
	sub	objptr, #2
	wrbyte	#0, objptr
'     patternDelay := 0
	sub	objptr, #321
	wrbyte	#0, objptr
	sub	objptr, #165
LR__0194
LR__0195
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_tick_ret
	ret

' 
' 
' PRI amigaPeriodToNote(period, fTune) : r | i
_trackerplayer_spin2_amigaPeriodToNote
' 
'   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
	mov	_var01, #0
	loc	pa,	#(@LR__0197-@LR__0196)
	call	#FCACHE_LOAD_
LR__0196
'     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
	add	ptr__trackerplayer_spin2_dat__, ##3236
	mov	_var02, ptr__trackerplayer_spin2_dat__
	mov	_var03, arg02
	shl	_var03, #3
	add	_var03, arg02
	shl	_var03, #3
	add	_var02, _var03
	mov	_var04, _var01
	shl	_var04, #1
	add	_var04, _var02
	rdword	_var05, _var04
	cmps	_var05, arg01 wcz
'       quit
	sub	ptr__trackerplayer_spin2_dat__, ##3236
 if_be	jmp	#LR__0198
	add	_var01, #1
	cmps	_var01, #36 wcz
 if_b	jmp	#LR__0196
LR__0197
LR__0198
' 
'   return i
	mov	result1, _var01
_trackerplayer_spin2_amigaPeriodToNote_ret
	ret

' 
' 
' PRI retunePeriod(period, fTune) | noteNumber
_trackerplayer_spin2_retunePeriod
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
'   if period > 0 and fTune < 16
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0199
	cmps	local02, #16 wcz
 if_ae	jmp	#LR__0199
'     noteNumber := amigaPeriodToNote(word[period], 0)
	rdword	arg01, local01
	mov	arg02, #0
	call	#_trackerplayer_spin2_amigaPeriodToNote
	mov	local03, result1
'     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
	add	ptr__trackerplayer_spin2_dat__, ##3236
	mov	local04, ptr__trackerplayer_spin2_dat__
	mov	local05, local02
	shl	local05, #3
	add	local05, local02
	shl	local05, #3
	add	local04, local05
	shl	local03, #1
	add	local03, local04
	rdword	local06, local03
	wrword	local06, local01
	sub	ptr__trackerplayer_spin2_dat__, ##3236
LR__0199
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_retunePeriod_ret
	ret

' 
' 
' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
_trackerplayer_spin2_getSampleInfo
	mov	_var01, arg01 wz
' 
'   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
 if_e	jmp	#LR__0200
	cmps	_var01, #31 wcz
 if_be	jmp	#LR__0201
LR__0200
'     long[samplePtr] := 0
	wrlong	#0, arg02
'     return
	jmp	#_trackerplayer_spin2_getSampleInfo_ret
LR__0201
' 
'   sampleNumber--
	sub	_var01, #1
'   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
	add	objptr, #10
	rdlong	_var02, objptr
	mov	_var03, _var01
	shl	_var03, #4
	sub	_var03, _var01
	shl	_var03, #1
	add	_var02, _var03
'   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
	mov	_var04, _var02
	add	_var04, #22
	rdbyte	_var05, _var04
	shl	_var05, #8
	mov	_var03, _var02
	add	_var03, #23
	rdbyte	_var06, _var03
	or	_var05, _var06
	shl	_var05, #1
	wrlong	_var05, arg03
'   long[fTune]        :=   byte[sampleInfoPtr + 24]
	mov	_var05, _var02
	add	_var05, #24
	rdbyte	_var04, _var05
	wrlong	_var04, arg04
'   long[volume]       :=   byte[sampleInfoPtr + 25]
	mov	_var05, _var02
	add	_var05, #25
	rdbyte	_var04, _var05
	wrlong	_var04, arg05
'   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
	mov	_var04, _var02
	add	_var04, #26
	rdbyte	_var05, _var04
	shl	_var05, #8
	mov	_var03, _var02
	add	_var03, #27
	rdbyte	_var06, _var03
	or	_var05, _var06
	shl	_var05, #1
	wrlong	_var05, arg06
'   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
	mov	_var04, _var02
	add	_var04, #28
	rdbyte	_var05, _var04
	shl	_var05, #8
	add	_var02, #29
	rdbyte	_var06, _var02
	or	_var05, _var06
	shl	_var05, #1
	wrlong	_var05, arg07
'   long[samplePtr]    := samplesPtrLut[sampleNumber]
	shl	_var01, #2
	add	objptr, #8
	add	_var01, objptr
	rdlong	_var03, _var01
	wrlong	_var03, arg02
' 
'   if long[repeatLength] == 2 && long[repeatPoint] == 0
	rdlong	_var05, arg07
	cmp	_var05, #2 wz
	sub	objptr, #18
 if_ne	jmp	#LR__0202
	rdlong	_var04, arg06 wz
'     long[repeatLength] := 1
 if_e	wrlong	#1, arg07
LR__0202
_trackerplayer_spin2_getSampleInfo_ret
	ret

' 
' 
' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
_trackerplayer_spin2_getNoteData
' 
'   ' Get the note data for a specific channel/song position/pattern row
'   patternNumber := byte[songPositionsLut][position & 127]
	add	objptr, #150
	rdlong	_var01, objptr
	and	arg02, #127
	add	arg02, _var01
	rdbyte	_var02, arg02
'   patternPtr    := patternsData + (patternNumber << 10)
	sub	objptr, #4
	rdlong	_var03, objptr
	sub	objptr, #146
	shl	_var02, #10
	add	_var03, _var02
'   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
	and	arg03, #63
	shl	arg03, #4
	add	_var03, arg03
	and	arg01, #3
	shl	arg01, #2
	add	_var03, arg01
'   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
	rdbyte	_var04, _var03
	shl	_var04, #24
	add	_var03, #1
	rdbyte	_var05, _var03
	shl	_var05, #16
	or	_var04, _var05
	add	_var03, #1
	rdbyte	_var06, _var03
	shl	_var06, #8
	or	_var04, _var06
	add	_var03, #1
	rdbyte	_var07, _var03
	or	_var04, _var07
' 
'   ' Extract the different sub parts from the data
'   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
	mov	_var08, _var04
	shr	_var08, #12
	and	_var08, #15
	mov	_var05, _var04
	shr	_var05, #24
	and	_var05, #240
	or	_var08, _var05
	wrlong	_var08, arg04
'   long[period]       :=  (data >> 16) & $FFF
	mov	_var08, _var04
	shr	_var08, #16
	and	_var08, ##4095
	wrlong	_var08, arg05
'   long[effect]       :=   data & $FFF
	and	_var04, ##4095
	wrlong	_var04, arg06
_trackerplayer_spin2_getNoteData_ret
	ret

' 
' 
' PRI triggerNote(channel)
_trackerplayer_spin2_triggerNote
' 
'   currSampleNr[channel]     := lastSetSampleNr[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #327
	add	_var01, objptr
	mov	_var02, arg01
	sub	objptr, #144
	rdlong	_var03, _var01
	add	_var02, objptr
	wrbyte	_var03, _var02
'   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #128
	add	_var01, objptr
	mov	_var02, arg01
	shl	_var02, #2
	sub	objptr, #144
	rdlong	_var03, _var01
	add	_var02, objptr
	wrlong	_var03, _var02
'   currPeriod[channel]       := lastSetPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #128
	add	_var01, objptr
	mov	_var02, arg01
	shl	_var02, #2
	sub	objptr, #72
	rdlong	_var03, _var01
	add	_var02, objptr
	wrlong	_var03, _var02
'   currSampleLength[channel] := lastSetSampleLength[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #120
	add	_var01, objptr
	mov	_var04, arg01
	shl	_var04, #1
	sub	objptr, #156
	rdlong	_var05, _var01
	add	_var04, objptr
	wrword	_var05, _var04
'   currRepeatLength[channel] := lastSetRepeatLength[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #172
	add	_var01, objptr
	mov	_var02, arg01
	shl	_var02, #2
	sub	objptr, #164
	rdlong	_var03, _var01
	add	_var02, objptr
	wrlong	_var03, _var02
'   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #180
	add	_var01, objptr
	mov	_var04, arg01
	shl	_var04, #1
	sub	objptr, #160
	rdlong	_var05, _var01
	add	_var04, objptr
	wrword	_var05, _var04
'   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
	mov	_var06, arg01
	add	objptr, #287
	add	_var06, objptr
	rdbyte	_var01, _var06
	add	_var01, #1
	add	arg01, objptr
	wrbyte	_var01, arg01
	sub	objptr, #502
_trackerplayer_spin2_triggerNote_ret
	ret

' 
' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
_trackerplayer_spin2_processChannel
	mov	COUNT_, #8
	call	#pushregs_
	add	ptra, #36
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #12
' 
'   channel := channel & 3
	rdlong	local01, fp
	and	local01, #3
	wrlong	local01, fp
'   cmd     := (effect >> 8) & $F
	add	fp, #12
	rdlong	local01, fp
	shr	local01, #8
	and	local01, #15
	add	objptr, #442
	wrbyte	local01, objptr
'   x       := (effect >> 4) & $F
	rdlong	local01, fp
	shr	local01, #4
	and	local01, #15
	sub	objptr, #3
	wrbyte	local01, objptr
'   y       := (effect     ) & $F
	rdlong	local01, fp
	and	local01, #15
	add	objptr, #1
	wrbyte	local01, objptr
'   z       := (effect     ) & $FF
	rdlong	local01, fp
	sub	fp, #12
	and	local01, #255
	add	objptr, #1
	wrbyte	local01, objptr
' 
'   ' Handle everything that executes on "tick zero"
'   if tickCounter == 0
	sub	objptr, #280
	rdbyte	local01, objptr wz
	sub	objptr, #161
 if_ne	jmp	#LR__0213
' 
'     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
'     deltaPeriod[channel] := 0
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #239
	add	local01, objptr
	wrlong	#0, local01
'     deltaVolume[channel] := 0
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #32
	add	local01, objptr
	wrlong	#0, local01
' 
'     ' If the sample number is zero, the memory from "last set non zero sample number" is used
'     if sampleNumber > 0
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	cmps	local01, #0 wcz
	sub	objptr, #271
 if_be	jmp	#LR__0203
'       sampleNumber_memory[channel] := sampleNumber
	rdlong	local01, fp
	add	objptr, #480
	add	local01, objptr
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	wrbyte	local02, local01
	sub	objptr, #480
LR__0203
' 
'     ' Get data for the sample in use by the current channel (uses the memorized sample number)
'     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
	rdlong	local03, fp
	add	objptr, #480
	add	local03, objptr
	rdbyte	arg01, local03
	add	fp, #32
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, fp
	sub	objptr, #49
	mov	arg04, objptr
	sub	objptr, #431
	add	fp, #4
	mov	arg05, fp
	add	fp, #4
	mov	arg06, fp
	add	fp, #4
	mov	local04, fp
	mov	local05, local04
	mov	arg07, local05
	sub	fp, #28
	call	#_trackerplayer_spin2_getSampleInfo
' 
'     ' Only set volume according to the default sample configuration if the sample number is non zero,
'     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
'     if sampleNumber > 0
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0204
'       currVolume[channel] := volume
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #255
	add	local01, objptr
	add	fp, #20
	rdlong	local02, fp
	sub	fp, #20
	wrlong	local02, local01
	sub	objptr, #255
LR__0204
' 
'     ' Handle all commands that executes on "zero tick"
'     sampleOffset := 0
	add	objptr, #435
	wrlong	#0, objptr
	sub	objptr, #435
'     handleZeroTickCommands(channel)
	rdlong	arg01, fp
	call	#_trackerplayer_spin2_handleZeroTickCommands
' 
'     ' Prepare sample data for triggering (now or later)
'     if period > 0
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0214
' 
'       retunePeriod(@period, fineTune)
	add	fp, #8
	mov	arg01, fp
	sub	fp, #8
	add	objptr, #431
	rdlong	arg02, objptr
	sub	objptr, #431
	call	#_trackerplayer_spin2_retunePeriod
'       currFineTune[channel]        := fineTune
	rdlong	local01, fp
	add	objptr, #211
	add	local01, objptr
	add	objptr, #220
	rdlong	local02, objptr
	wrbyte	local02, local01
'       lastSetPeriod[channel]       := period
	rdlong	local01, fp
	shl	local01, #2
	sub	objptr, #136
	add	local01, objptr
	add	fp, #8
	rdlong	local02, fp
	wrlong	local02, local01
	sub	fp, #8
'       lastSetRepeatLength[channel] := repeatLength
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #64
	add	local01, objptr
	add	fp, #28
	rdlong	local02, fp
	wrlong	local02, local01
	sub	fp, #28
'       lastSetRepeatPoint[channel]  := repeatPoint
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #16
	add	local01, objptr
	add	fp, #24
	rdlong	local02, fp
	wrlong	local02, local01
'       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #32
	add	objptr, #60
	rdlong	local02, objptr
	add	local01, local02
	rdlong	local06, fp
	shl	local06, #2
	sub	objptr, #124
	mov	local07, objptr
	add	local06, objptr
	wrlong	local01, local06
'       lastSetSampleNr[channel]     := sampleNumber
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #16
	add	local01, objptr
	add	fp, #4
	rdlong	local02, fp
	wrlong	local02, local01
' 
'       ' This calculates the correct sample length in all situations
'       if repeatLength > 2
	add	fp, #24
	rdlong	local01, fp
	sub	fp, #28
	cmps	local01, #2 wcz
	sub	objptr, #327
 if_be	jmp	#LR__0205
'         sampleLength := repeatPoint + repeatLength
	add	fp, #24
	rdlong	local01, fp
	add	fp, #4
	rdlong	local02, fp
	add	local01, local02
	sub	fp, #12
	wrlong	local01, fp
	sub	fp, #16
LR__0205
' 
'       if sampleLength - sampleOffset < 1
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	add	objptr, #435
	rdlong	local02, objptr
	sub	objptr, #435
	sub	local01, local02
	cmps	local01, #1 wcz
 if_ae	jmp	#LR__0206
'         lastSetSampleLength[channel] := 1
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #343
	add	local01, objptr
	wrlong	#1, local01
'       else
	sub	objptr, #343
	jmp	#LR__0207
LR__0206
'         lastSetSampleLength[channel] := sampleLength - sampleOffset
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	add	objptr, #435
	rdlong	local02, objptr
	sub	local01, local02
	rdlong	local06, fp
	shl	local06, #2
	sub	objptr, #92
	mov	local07, objptr
	add	local06, objptr
	wrlong	local01, local06
	sub	objptr, #343
LR__0207
' 
'       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
'       if sampleOffset > sampleLength
	add	objptr, #435
	rdlong	local01, objptr
	sub	objptr, #435
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	cmps	local01, local02 wcz
 if_be	jmp	#LR__0208
'         lastSetSamplePtr[channel] := samplePtr + repeatPoint
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local02, fp
	sub	fp, #24
	add	local01, local02
	rdlong	local06, fp
	shl	local06, #2
	add	objptr, #311
	mov	local07, objptr
	add	local06, objptr
	wrlong	local01, local06
'         lastSetSampleLength[channel] := repeatLength
	rdlong	local01, fp
	shl	local01, #2
	add	objptr, #32
	add	local01, objptr
	add	fp, #28
	rdlong	local02, fp
	sub	fp, #28
	wrlong	local02, local01
	sub	objptr, #343
LR__0208
' 
'       ' Trigger note/sample playback directly if no delay or portamento is active
'       ifnot cmd == $3 || cmd == $5
	add	objptr, #442
	rdbyte	local01, objptr
	sub	objptr, #442
	cmp	local01, #3 wz
 if_e	jmp	#LR__0211
	add	objptr, #442
	rdbyte	local08, objptr
	sub	objptr, #442
	mov	local02, local08
	cmp	local02, #5 wz
 if_e	jmp	#LR__0211
'         ifnot cmd == $E && x == $D
	add	objptr, #442
	rdbyte	local03, objptr
	sub	objptr, #442
	mov	local01, local03
	cmp	local01, #14 wz
 if_ne	jmp	#LR__0209
	add	objptr, #439
	rdbyte	local08, objptr
	sub	objptr, #439
	mov	local02, local08
	cmp	local02, #13 wz
 if_e	jmp	#LR__0210
LR__0209
'           triggerNote(channel)
	rdlong	local01, fp
	mov	arg01, local01
	call	#_trackerplayer_spin2_triggerNote
LR__0210
LR__0211
' 
'       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
'       if resetTremolo[channel] > 0
	rdlong	local01, fp
	add	objptr, #399
	add	local01, objptr
	rdbyte	local02, local01
	cmps	local02, #0 wcz
	sub	objptr, #399
 if_be	jmp	#LR__0212
'         tremoloPos[channel] := 0
	rdlong	local01, fp
	add	objptr, #395
	add	local01, objptr
	wrbyte	#0, local01
	sub	objptr, #395
LR__0212
' 
'       if resetVibrato[channel] > 0
	rdlong	local01, fp
	add	objptr, #403
	add	local01, objptr
	rdbyte	local02, local01
	cmps	local02, #0 wcz
	sub	objptr, #403
 if_be	jmp	#LR__0214
'         vibratoPos[channel] := 0
	rdlong	local01, fp
	add	objptr, #391
	add	local01, objptr
	wrbyte	#0, local01
	sub	objptr, #391
' 
'   else
	jmp	#LR__0214
LR__0213
'     ' Handle commands that executes on all "non zero ticks"
'     handleNonZeroTickCommands(channel)
	rdlong	arg01, fp
	call	#_trackerplayer_spin2_handleNonZeroTickCommands
LR__0214
' 
'   ' Handle commands that executes on every tick
'   handleEveryTickCommands(channel)
	rdlong	arg01, fp
	call	#_trackerplayer_spin2_handleEveryTickCommands
' 
'   ' Handle boundaries that should be kept
'   currPeriod[channel] <#= MAXIMUM_PERIOD
	rdlong	local03, fp
	shl	local03, #2
	add	objptr, #223
	add	local03, objptr
	rdlong	local01, local03
	fles	local01, ##856
	rdlong	local08, fp
	shl	local08, #2
	add	local08, objptr
	wrlong	local01, local08
'   currPeriod[channel] #>= MINIMUM_PERIOD
	rdlong	local03, fp
	shl	local03, #2
	add	local03, objptr
	rdlong	local01, local03
	fges	local01, #113
	rdlong	local08, fp
	shl	local08, #2
	add	local08, objptr
	wrlong	local01, local08
'   currVolume[channel] <#= MAXIMUM_VOLUME
	rdlong	local03, fp
	shl	local03, #2
	add	objptr, #32
	add	local03, objptr
	rdlong	local01, local03
	fles	local01, #64
	rdlong	local08, fp
	shl	local08, #2
	add	local08, objptr
	wrlong	local01, local08
'   currVolume[channel] #>= MINIMUM_VOLUME
	rdlong	local03, fp
	shl	local03, #2
	add	local03, objptr
	rdlong	local01, local03
	fges	local01, #0
	rdlong	local08, fp
	shl	local08, #2
	add	local08, objptr
	wrlong	local01, local08
	sub	objptr, #255
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_processChannel_ret
	ret

' 
' 
' ' Handle all commands that executes on tick zero
' '
' PRI handleZeroTickCommands(channel)
_trackerplayer_spin2_handleZeroTickCommands
	mov	_var01, arg01
' 
'   CASE_FAST cmd
	add	objptr, #442
	rdbyte	_var02, objptr
	sub	objptr, #442
	mov	_var03, _var02
	sub	_var03, #9
	fle	_var03, #7
	mov	_var04, _var03
	jmprel	_var04
LR__0215
	jmp	#LR__0216
	jmp	#LR__0239
	jmp	#LR__0218
	jmp	#LR__0219
	jmp	#LR__0220
	jmp	#LR__0221
	jmp	#LR__0236
	jmp	#LR__0239
LR__0216
' 
'     $9:                          ' Set sample offset
'       if z > 0
	add	objptr, #441
	rdbyte	_var05, objptr
	sub	objptr, #441
	cmps	_var05, #0 wcz
 if_be	jmp	#LR__0217
'         cmd9_memoryZ[channel] := z
	mov	_var05, _var01
	add	objptr, #476
	add	_var05, objptr
	sub	objptr, #35
	rdbyte	_var06, objptr
	sub	objptr, #441
	wrbyte	_var06, _var05
LR__0217
' 
'       sampleOffset := cmd9_memoryZ[channel] << 8
	add	objptr, #476
	add	_var01, objptr
	rdbyte	_var05, _var01
	shl	_var05, #8
	sub	objptr, #41
	wrlong	_var05, objptr
	sub	objptr, #435
	jmp	#LR__0239
LR__0218
' 
'     $B:                          ' Jump position
'       cmdB_memoryZ := z
	add	objptr, #441
	rdbyte	_var05, objptr
	add	objptr, #46
	wrbyte	_var05, objptr
'       cmdB_updatePosition := true
	add	objptr, #1
	wrbyte	##-1, objptr
	sub	objptr, #488
	jmp	#LR__0239
LR__0219
' 
'     $C:                          ' Set volume
'       currVolume[channel] := z
	shl	_var01, #2
	add	objptr, #255
	add	_var01, objptr
	add	objptr, #186
	rdbyte	_var06, objptr
	sub	objptr, #441
	wrlong	_var06, _var01
	jmp	#LR__0239
LR__0220
' 
'     $D:                          ' Pattern break
'       cmdD_memoryX := x
	add	objptr, #439
	rdbyte	_var05, objptr
	add	objptr, #45
	wrbyte	_var05, objptr
'       cmdD_memoryY := y
	sub	objptr, #44
	rdbyte	_var05, objptr
	add	objptr, #45
	wrbyte	_var05, objptr
'       cmdD_updatePosition := true
	add	objptr, #1
	wrbyte	##-1, objptr
	sub	objptr, #486
	jmp	#LR__0239
LR__0221
' 
'     $E:                          ' Handle "E commands" that execute on tick zero
' 
'       CASE_FAST x
	add	objptr, #439
	rdbyte	_var07, objptr
	sub	objptr, #439
	mov	_var05, _var07
	fle	_var05, #15
	mov	_var08, _var05
	jmprel	_var08
LR__0222
	jmp	#LR__0223
	jmp	#LR__0224
	jmp	#LR__0225
	jmp	#LR__0226
	jmp	#LR__0227
	jmp	#LR__0228
	jmp	#LR__0229
	jmp	#LR__0232
	jmp	#LR__0239
	jmp	#LR__0239
	jmp	#LR__0233
	jmp	#LR__0234
	jmp	#LR__0239
	jmp	#LR__0239
	jmp	#LR__0235
	jmp	#LR__0239
LR__0223
' 
'         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
	add	objptr, #440
	rdbyte	_var06, objptr
	not	_var06, _var06
	and	_var06, #1
	add	objptr, #3
	wrbyte	_var06, objptr
	sub	objptr, #443
	jmp	#LR__0239
LR__0224
' 
'         $1: currPeriod[channel] -= y             ' Fine frequency slide up
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #223
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #217
	rdbyte	_var10, objptr
	sub	_var06, _var10
	shl	_var01, #2
	sub	objptr, #217
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #223
	jmp	#LR__0239
LR__0225
' 
'         $2: currPeriod[channel] += y             ' Fine frequency slide down
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #223
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #217
	rdbyte	_var10, objptr
	add	_var06, _var10
	shl	_var01, #2
	sub	objptr, #217
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #223
	jmp	#LR__0239
LR__0226
' 
'         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
	add	objptr, #440
	rdbyte	_var06, objptr
	and	_var06, #1
	add	objptr, #4
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #444
	jmp	#LR__0239
LR__0227
' 
'         $4:                                      ' Set vibrato waveform type
'           vibratoType[channel]  := y & 3
	add	objptr, #440
	rdbyte	_var06, objptr
	and	_var06, #3
	mov	_var11, _var01
	add	objptr, #8
	add	_var11, objptr
	wrbyte	_var06, _var11
'           resetVibrato[channel] := y & 4
	sub	objptr, #8
	rdbyte	_var06, objptr
	and	_var06, #4
	sub	objptr, #37
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #403
	jmp	#LR__0239
LR__0228
' 
'         $5: fineTune := y                        ' Set finetune
	add	objptr, #440
	rdbyte	_var06, objptr
	sub	objptr, #9
	wrlong	_var06, objptr
	sub	objptr, #431
	jmp	#LR__0239
LR__0229
' 
'         $6:                                      ' Pattern looping
'           if y == 0
	add	objptr, #440
	rdbyte	_var06, objptr wz
	sub	objptr, #440
 if_ne	jmp	#LR__0230
'             cmdE6_memory[channel] := patternRow
	add	objptr, #489
	add	_var01, objptr
	sub	objptr, #327
	rdbyte	_var11, objptr
	sub	objptr, #162
	wrbyte	_var11, _var01
'           else
	jmp	#LR__0239
LR__0230
'             if ++cmdE6_counter[channel] <= y
	mov	_var09, _var01
	add	objptr, #493
	add	_var09, objptr
	rdbyte	_var06, _var09
	add	_var06, #1
	mov	_var10, _var01
	add	_var10, objptr
	wrbyte	_var06, _var10
	rdbyte	_var12, _var10
	sub	objptr, #53
	rdbyte	_var13, objptr
	sub	objptr, #440
	cmps	_var12, _var13 wcz
 if_a	jmp	#LR__0231
'               cmdE6_updatePosition[channel] := true
	add	objptr, #497
	add	_var01, objptr
	wrbyte	##-1, _var01
'               cmdE6_updatePositionCommon    := true
	add	objptr, #4
	wrbyte	##-1, objptr
	sub	objptr, #501
'             else
	jmp	#LR__0239
LR__0231
'               cmdE6_counter[channel] := 0
	add	objptr, #493
	add	_var01, objptr
	wrbyte	#0, _var01
	sub	objptr, #493
	jmp	#LR__0239
LR__0232
' 
'         $7:                                      ' Set tremolo waveform type
'           tremoloType[channel] := y & 3
	add	objptr, #440
	rdbyte	_var06, objptr
	and	_var06, #3
	mov	_var11, _var01
	add	objptr, #12
	add	_var11, objptr
	wrbyte	_var06, _var11
'           resetTremolo[channel] := y & 4
	sub	objptr, #12
	rdbyte	_var06, objptr
	and	_var06, #4
	sub	objptr, #41
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #399
	jmp	#LR__0239
LR__0233
' 
'         $A: currVolume[channel] += y             ' Fine volume slide up
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #255
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #185
	rdbyte	_var10, objptr
	add	_var06, _var10
	shl	_var01, #2
	sub	objptr, #185
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #255
	jmp	#LR__0239
LR__0234
' 
'         $B: currVolume[channel] -= y             ' Fine volume slide down
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #255
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #185
	rdbyte	_var10, objptr
	sub	_var06, _var10
	shl	_var01, #2
	sub	objptr, #185
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #255
	jmp	#LR__0239
LR__0235
' 
'         $E: patternDelay := y * currentSongSpeed ' Pattern delay
	add	objptr, #440
	rdbyte	_var09, objptr
	sub	objptr, #276
	rdbyte	_var10, objptr
	qmul	_var09, _var10
	getqx	_var06
	add	objptr, #1
	wrbyte	_var06, objptr
	sub	objptr, #165
	jmp	#LR__0239
LR__0236
' 
'     $F:                          ' Set speed
'       if z < 32
	add	objptr, #441
	rdbyte	_var05, objptr
	sub	objptr, #441
	cmps	_var05, #32 wcz
 if_ae	jmp	#LR__0237
'         currentSongSpeed := z
	add	objptr, #441
	rdbyte	_var05, objptr
	sub	objptr, #277
	wrbyte	_var05, objptr
	sub	objptr, #164
'       else
	jmp	#LR__0238
LR__0237
'         ticksPerMinute := z * 24
	add	objptr, #441
	rdbyte	_var07, objptr
	mov	_var05, _var07
	shl	_var05, #1
	add	_var05, _var07
	shl	_var05, #3
	sub	objptr, #18
	wrlong	_var05, objptr
	sub	objptr, #423
'         cyclesToWait   := (systemClock / ticksPerMinute) * 60
	rdlong	muldiva_, objptr
	add	objptr, #423
	rdlong	muldivb_, objptr
	sub	objptr, #423
	call	#divide_
	mov	_var06, muldivb_
	shl	_var06, #4
	sub	_var06, muldivb_
	shl	_var06, #2
	add	objptr, #427
	wrlong	_var06, objptr
	sub	objptr, #427
LR__0238
LR__0239
_trackerplayer_spin2_handleZeroTickCommands_ret
	ret

' 
' 
' ' Handle all commands that executes on "non zero ticks"
' '
' PRI handleNonZeroTickCommands(channel)
_trackerplayer_spin2_handleNonZeroTickCommands
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
' 
'   CASE_FAST cmd
	add	objptr, #442
	rdbyte	local02, objptr
	sub	objptr, #442
	mov	local03, local02
	sub	local03, #1
	fle	local03, #14
	mov	local04, local03
	jmprel	local04
LR__0240
	jmp	#LR__0241
	jmp	#LR__0242
	jmp	#LR__0243
	jmp	#LR__0253
	jmp	#LR__0245
	jmp	#LR__0246
	jmp	#LR__0247
	jmp	#LR__0253
	jmp	#LR__0253
	jmp	#LR__0250
	jmp	#LR__0253
	jmp	#LR__0253
	jmp	#LR__0253
	jmp	#LR__0251
	jmp	#LR__0253
LR__0241
' 
'     $1: currPeriod[channel] -= z        ' Frequency slide up
	mov	local05, local01
	shl	local05, #2
	add	objptr, #223
	add	local05, objptr
	rdlong	local06, local05
	add	objptr, #218
	rdbyte	local07, objptr
	sub	local06, local07
	mov	local08, local01
	shl	local08, #2
	sub	objptr, #218
	add	local08, objptr
	wrlong	local06, local08
' 
'        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
'       if currPeriod[channel] < 0
	mov	local06, local01
	shl	local06, #2
	add	local06, objptr
	rdlong	local09, local06
	cmps	local09, #0 wcz
	sub	objptr, #223
 if_ae	jmp	#LR__0253
'         currPeriod[channel] := MAXIMUM_PERIOD
	shl	local01, #2
	add	objptr, #223
	add	local01, objptr
	wrlong	##856, local01
	sub	objptr, #223
	jmp	#LR__0253
LR__0242
' 
'     $2: currPeriod[channel] += z        ' Frequency slide down
	mov	local05, local01
	shl	local05, #2
	add	objptr, #223
	add	local05, objptr
	rdlong	local06, local05
	add	objptr, #218
	rdbyte	local07, objptr
	add	local06, local07
	shl	local01, #2
	sub	objptr, #218
	add	local01, objptr
	wrlong	local06, local01
	sub	objptr, #223
	jmp	#LR__0253
LR__0243
' 
'     $3:                                 ' Slide to note (portamento)
'       if z > 0
	add	objptr, #441
	rdbyte	local06, objptr
	sub	objptr, #441
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0244
'         cmd3_memoryZ[channel] := z
	mov	local06, local01
	add	objptr, #456
	add	local06, objptr
	sub	objptr, #15
	rdbyte	local09, objptr
	sub	objptr, #441
	wrbyte	local09, local06
LR__0244
' 
'       doPortamento(channel, lastSetPeriod[channel])
	mov	local09, local01
	shl	local09, #2
	add	objptr, #295
	add	local09, objptr
	rdlong	arg02, local09
	mov	arg01, local01
	sub	objptr, #295
	call	#_trackerplayer_spin2_doPortamento
	jmp	#LR__0253
LR__0245
' 
'     $5:                                 ' Volume slide + portamento
'       doVolumeSlide(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVolumeSlide
'       doPortamento(channel, lastSetPeriod[channel])
	mov	local09, local01
	shl	local09, #2
	add	objptr, #295
	add	local09, objptr
	rdlong	arg02, local09
	mov	arg01, local01
	sub	objptr, #295
	call	#_trackerplayer_spin2_doPortamento
	jmp	#LR__0253
LR__0246
' 
'     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVolumeSlide
	jmp	#LR__0253
LR__0247
' 
'     $7:                                 ' Tremolo
'       if x > 0
	add	objptr, #439
	rdbyte	local06, objptr
	sub	objptr, #439
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0248
'         cmd7_memoryX[channel] := x
	mov	local06, local01
	add	objptr, #472
	add	local06, objptr
	sub	objptr, #33
	rdbyte	local09, objptr
	sub	objptr, #439
	wrbyte	local09, local06
LR__0248
'       if y > 0
	add	objptr, #440
	rdbyte	local06, objptr
	sub	objptr, #440
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0249
'         cmd7_memoryY[channel] := y
	mov	local06, local01
	add	objptr, #468
	add	local06, objptr
	sub	objptr, #28
	rdbyte	local09, objptr
	sub	objptr, #440
	wrbyte	local09, local06
LR__0249
' 
'       doTremolo(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doTremolo
	jmp	#LR__0253
LR__0250
' 
'     $A: doVolumeSlide(channel)          ' Volume slide
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVolumeSlide
	jmp	#LR__0253
LR__0251
' 
'     $E:                                 ' Retrig every Y ticks
'       if (x == $9) && ((tickcounter // y) == 0)
	add	objptr, #439
	rdbyte	local05, objptr
	sub	objptr, #439
	cmp	local05, #9 wz
 if_ne	jmp	#LR__0252
	add	objptr, #161
	rdbyte	local07, objptr
	mov	muldiva_, local07
	add	objptr, #279
	rdbyte	local10, objptr
	sub	objptr, #440
	mov	muldivb_, local10
	call	#divide_
	mov	local09, muldiva_ wz
 if_ne	jmp	#LR__0252
'         triggerNote(channel)
	mov	local06, local01
	mov	arg01, local06
	call	#_trackerplayer_spin2_triggerNote
LR__0252
LR__0253
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_handleNonZeroTickCommands_ret
	ret

' 
' 
' ' Handle all commands that executes on every tick
' '
' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
_trackerplayer_spin2_handleEveryTickCommands
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
' 
'   CASE_FAST cmd
	add	objptr, #442
	rdbyte	local02, objptr
	sub	objptr, #442
	mov	local03, local02
	fle	local03, #15
	mov	local04, local03
	jmprel	local04
LR__0254
	jmp	#LR__0255
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0258
	jmp	#LR__0269
	jmp	#LR__0261
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0269
	jmp	#LR__0262
	jmp	#LR__0269
LR__0255
' 
'     $0:                                 ' Arpeggio
'       arpCounter := tickCounter // 3
	add	objptr, #161
	rdbyte	muldiva_, objptr
	sub	objptr, #161
	mov	muldivb_, #3
	call	#divide_
	mov	local05, muldiva_
'       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
	mov	local06, local01
	shl	local06, #2
	add	objptr, #223
	add	local06, objptr
	rdlong	arg01, local06
	mov	local07, local01
	sub	objptr, #12
	add	local07, objptr
	rdbyte	arg02, local07
	sub	objptr, #211
	call	#_trackerplayer_spin2_amigaPeriodToNote
	mov	local08, result1
	mov	local09, local08
	cmps	local08, #36 wcz
 if_ae	jmp	#LR__0269
'         if arpCounter == 1 and x > 0
	cmp	local05, #1 wz
 if_ne	jmp	#LR__0256
	add	objptr, #439
	rdbyte	local10, objptr
	sub	objptr, #439
	cmps	local10, #0 wcz
 if_be	jmp	#LR__0256
'           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
	mov	arg01, local09
	add	objptr, #439
	rdbyte	local11, objptr
	add	arg01, local11
' 
'   return word[@periodTable][noteNumber]
	add	ptr__trackerplayer_spin2_dat__, ##3236
	shl	arg01, #1
	add	arg01, ptr__trackerplayer_spin2_dat__
	rdword	result1, arg01
	sub	ptr__trackerplayer_spin2_dat__, ##3236
	mov	local06, result1
	mov	local07, local01
	shl	local07, #2
	sub	objptr, #216
	mov	local11, objptr
	add	local07, objptr
	mov	local10, local06
	rdlong	local12, local07
	sub	local10, local12
	mov	local13, local01
	shl	local13, #2
	add	objptr, #16
	mov	local14, objptr
	add	local13, objptr
	wrlong	local10, local13
	sub	objptr, #239
LR__0256
'         if arpCounter == 2 and y > 0
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0257
	add	objptr, #440
	rdbyte	local10, objptr
	sub	objptr, #440
	cmps	local10, #0 wcz
 if_be	jmp	#LR__0257
'           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
	mov	arg01, local09
	add	objptr, #440
	rdbyte	local11, objptr
	add	arg01, local11
' 
'   return word[@periodTable][noteNumber]
	add	ptr__trackerplayer_spin2_dat__, ##3236
	shl	arg01, #1
	add	arg01, ptr__trackerplayer_spin2_dat__
	rdword	result1, arg01
	sub	ptr__trackerplayer_spin2_dat__, ##3236
	mov	local06, result1
	mov	local07, local01
	shl	local07, #2
	sub	objptr, #217
	mov	local11, objptr
	add	local07, objptr
	mov	local10, local06
	rdlong	local12, local07
	sub	local10, local12
	mov	local13, local01
	shl	local13, #2
	add	objptr, #16
	mov	local14, objptr
	add	local13, objptr
	wrlong	local10, local13
	sub	objptr, #239
LR__0257
'         if arpCounter == 0 and (x + y) > 0
	cmp	local05, #0 wz
 if_ne	jmp	#LR__0269
	add	objptr, #439
	rdbyte	local10, objptr
	add	objptr, #1
	rdbyte	local11, objptr
	sub	objptr, #440
	add	local10, local11
	cmps	local10, #0 wcz
 if_be	jmp	#LR__0269
'           deltaPeriod[channel] := 0
	shl	local01, #2
	add	objptr, #239
	add	local01, objptr
	wrlong	#0, local01
	sub	objptr, #239
	jmp	#LR__0269
LR__0258
' 
'     $4:                                 ' Vibrato
'       if x > 0
	add	objptr, #439
	rdbyte	local10, objptr
	sub	objptr, #439
	cmps	local10, #0 wcz
 if_be	jmp	#LR__0259
'         cmd4_memoryX[channel] := x
	mov	local10, local01
	add	objptr, #464
	add	local10, objptr
	sub	objptr, #25
	rdbyte	local07, objptr
	sub	objptr, #439
	wrbyte	local07, local10
LR__0259
'       if y > 0
	add	objptr, #440
	rdbyte	local10, objptr
	sub	objptr, #440
	cmps	local10, #0 wcz
 if_be	jmp	#LR__0260
'         cmd4_memoryY[channel] := y
	mov	local10, local01
	add	objptr, #460
	add	local10, objptr
	sub	objptr, #20
	rdbyte	local07, objptr
	sub	objptr, #440
	wrbyte	local07, local10
LR__0260
' 
'       doVibrato(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVibrato
	jmp	#LR__0269
LR__0261
' 
'     $6: doVibrato(channel)              ' Volume slide + Vibrato
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVibrato
	jmp	#LR__0269
LR__0262
' 
'     $E:
'       if x == $C                        ' Cut note after Y ticks
	add	objptr, #439
	rdbyte	local10, objptr
	sub	objptr, #439
	cmp	local10, #12 wz
 if_ne	jmp	#LR__0263
'         if tickcounter == y
	add	objptr, #161
	rdbyte	local10, objptr
	add	objptr, #279
	rdbyte	local07, objptr
	sub	objptr, #440
	cmp	local10, local07 wz
 if_ne	jmp	#LR__0268
'           currVolume[channel] := 0
	shl	local01, #2
	add	objptr, #255
	add	local01, objptr
	wrlong	#0, local01
	sub	objptr, #255
	jmp	#LR__0268
LR__0263
' 
'       elseif x == $D                    ' Delay note Y ticks
	add	objptr, #439
	rdbyte	local10, objptr
	sub	objptr, #439
	cmp	local10, #13 wz
 if_ne	jmp	#LR__0267
'         if tickcounter == y
	add	objptr, #161
	rdbyte	local10, objptr
	add	objptr, #279
	rdbyte	local07, objptr
	sub	objptr, #440
	cmp	local10, local07 wz
 if_ne	jmp	#LR__0264
'           triggerNote(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_triggerNote
	jmp	#LR__0266
LR__0264
'         ' Do a "bugged trigger" if y >= currentSongSpeed
'         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
	add	objptr, #440
	rdbyte	local10, objptr
	sub	objptr, #276
	rdbyte	local07, objptr
	sub	objptr, #164
	cmps	local10, local07 wcz
 if_b	jmp	#LR__0265
	add	objptr, #164
	rdbyte	local13, objptr
	mov	local12, local13
	sub	local12, #1
	sub	objptr, #3
	rdbyte	local15, objptr
	sub	objptr, #161
	mov	local14, local15
	cmp	local14, local12 wz
 if_ne	jmp	#LR__0265
'           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
	mov	local10, local01
	shl	local10, #2
	add	objptr, #295
	mov	local06, objptr
	add	local10, objptr
	mov	local07, local01
	shl	local07, #2
	sub	objptr, #72
	mov	local11, objptr
	rdlong	local12, local10
	add	local07, local11
	wrlong	local12, local07
	sub	objptr, #223
LR__0265
LR__0266
LR__0267
LR__0268
LR__0269
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_handleEveryTickCommands_ret
	ret

' 
' 
' PRI doTremolo(channel) | depth, sineWave, speed
_trackerplayer_spin2_doTremolo
	mov	_var01, arg01
' 
'   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
	add	ptr__trackerplayer_spin2_dat__, ##2980
	mov	_var02, ptr__trackerplayer_spin2_dat__
	mov	_var03, _var01
	add	objptr, #395
	add	_var03, objptr
	rdbyte	_var04, _var03
	shl	_var04, #2
	add	_var04, _var02
	rdlong	_var05, _var04
'   depth    := cmd7_memoryY[channel]
	mov	_var06, _var01
	add	objptr, #73
	add	_var06, objptr
	rdbyte	_var07, _var06
'   speed    := cmd7_memoryX[channel]
	mov	_var06, _var01
	add	objptr, #4
	add	_var06, objptr
	rdbyte	_var08, _var06
' 
'   CASE_FAST vibratoType[channel]
	mov	_var03, _var01
	sub	objptr, #24
	mov	_var09, objptr
	add	_var03, objptr
	rdbyte	_var06, _var03
	fle	_var06, #3
	mov	_var10, _var06
	sub	ptr__trackerplayer_spin2_dat__, ##2980
	sub	objptr, #448
	jmprel	_var10
LR__0270
	jmp	#LR__0271
	jmp	#LR__0272
	jmp	#LR__0273
	jmp	#LR__0274
LR__0271
' 
'     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
	qmul	_var07, _var05
	getqx	_var04
	sar	_var04, #6
	mov	_var11, _var01
	shl	_var11, #2
	add	objptr, #271
	add	_var11, objptr
	wrlong	_var04, _var11
	sub	objptr, #271
	jmp	#LR__0274
LR__0272
'     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
	mov	_var11, _var01
	add	objptr, #395
	add	_var11, objptr
	rdbyte	_var02, _var11
	shl	_var02, #3
	qmul	_var07, _var02
	getqx	_var04
	sub	_var04, #256
	sar	_var04, #6
	mov	_var12, _var01
	shl	_var12, #2
	sub	objptr, #124
	add	_var12, objptr
	wrlong	_var04, _var12
	sub	objptr, #271
	jmp	#LR__0274
LR__0273
'     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
	mov	_var11, _var01
	add	objptr, #395
	mov	_var13, objptr
	add	_var11, objptr
	rdbyte	_var02, _var11
	and	_var02, #32
	shl	_var02, #4
	qmul	_var07, _var02
	getqx	_var14
	mov	_var04, _var14
	sub	_var04, #256
	sar	_var04, #6
	mov	_var12, _var01
	shl	_var12, #2
	sub	objptr, #124
	mov	_var15, objptr
	add	_var12, objptr
	wrlong	_var04, _var12
	sub	objptr, #271
LR__0274
' 
'   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
	mov	_var03, _var01
	add	objptr, #395
	add	_var03, objptr
	rdbyte	_var06, _var03
	add	_var06, _var08
	and	_var06, #63
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #395
_trackerplayer_spin2_doTremolo_ret
	ret

' 
' 
' PRI doVibrato(channel) | depth, sineWave, speed
_trackerplayer_spin2_doVibrato
	mov	_var01, arg01
' 
'   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
	add	ptr__trackerplayer_spin2_dat__, ##2980
	mov	_var02, ptr__trackerplayer_spin2_dat__
	mov	_var03, _var01
	add	objptr, #391
	add	_var03, objptr
	rdbyte	_var04, _var03
	shl	_var04, #2
	add	_var04, _var02
	rdlong	_var05, _var04
'   depth    := cmd4_memoryY[channel]
	mov	_var06, _var01
	add	objptr, #69
	add	_var06, objptr
	rdbyte	_var07, _var06
'   speed    := cmd4_memoryX[channel]
	mov	_var06, _var01
	add	objptr, #4
	add	_var06, objptr
	rdbyte	_var08, _var06
' 
'   CASE_FAST vibratoType[channel]
	mov	_var03, _var01
	sub	objptr, #16
	mov	_var09, objptr
	add	_var03, objptr
	rdbyte	_var06, _var03
	fle	_var06, #3
	mov	_var10, _var06
	sub	ptr__trackerplayer_spin2_dat__, ##2980
	sub	objptr, #448
	jmprel	_var10
LR__0275
	jmp	#LR__0276
	jmp	#LR__0277
	jmp	#LR__0278
	jmp	#LR__0279
LR__0276
' 
'     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
	qmul	_var07, _var05
	getqx	_var04
	sar	_var04, #7
	mov	_var11, _var01
	shl	_var11, #2
	add	objptr, #239
	add	_var11, objptr
	wrlong	_var04, _var11
	sub	objptr, #239
	jmp	#LR__0279
LR__0277
'     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
	mov	_var11, _var01
	add	objptr, #391
	add	_var11, objptr
	rdbyte	_var02, _var11
	shl	_var02, #3
	qmul	_var07, _var02
	getqx	_var04
	sub	_var04, #256
	sar	_var04, #7
	mov	_var12, _var01
	shl	_var12, #2
	sub	objptr, #152
	add	_var12, objptr
	wrlong	_var04, _var12
	sub	objptr, #239
	jmp	#LR__0279
LR__0278
'     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
	mov	_var11, _var01
	add	objptr, #391
	mov	_var13, objptr
	add	_var11, objptr
	rdbyte	_var02, _var11
	and	_var02, #32
	shl	_var02, #4
	qmul	_var07, _var02
	getqx	_var14
	mov	_var04, _var14
	sub	_var04, #256
	sar	_var04, #7
	mov	_var12, _var01
	shl	_var12, #2
	sub	objptr, #152
	mov	_var15, objptr
	add	_var12, objptr
	wrlong	_var04, _var12
	sub	objptr, #239
LR__0279
' 
'   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
	mov	_var03, _var01
	add	objptr, #391
	add	_var03, objptr
	rdbyte	_var06, _var03
	add	_var06, _var08
	and	_var06, #63
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #391
_trackerplayer_spin2_doVibrato_ret
	ret

' 
' 
' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
_trackerplayer_spin2_doPortamento
' 
'   if period == currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	mov	_var02, objptr
	add	_var01, objptr
	rdlong	_var03, _var01
	cmp	arg02, _var03 wz
'     return
	sub	objptr, #223
 if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
' 
'   if period > 0
	cmps	arg02, #0 wcz
 if_be	jmp	#LR__0280
'     portamentoPeriodMemory[channel] := period
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #407
	add	_var01, objptr
	wrlong	arg02, _var01
'   else
	sub	objptr, #407
	jmp	#LR__0281
LR__0280
'     period := portamentoPeriodMemory[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #407
	add	_var01, objptr
	rdlong	arg02, _var01
	sub	objptr, #407
LR__0281
' 
'   if period > currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	add	_var01, objptr
	rdlong	_var03, _var01
	cmps	arg02, _var03 wcz
	sub	objptr, #223
 if_be	jmp	#LR__0282
'     currPeriod[channel] += cmd3_memoryZ[channel]
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #223
	add	_var02, objptr
	mov	_var04, arg01
	add	objptr, #233
	rdlong	_var01, _var02
	add	_var04, objptr
	rdbyte	_var05, _var04
	add	_var01, _var05
	mov	_var06, arg01
	shl	_var06, #2
	sub	objptr, #233
	add	_var06, objptr
	wrlong	_var01, _var06
'     currPeriod[channel] <#= period
	mov	_var02, arg01
	shl	_var02, #2
	add	_var02, objptr
	rdlong	_var01, _var02
	fles	_var01, arg02
	mov	_var04, arg01
	shl	_var04, #2
	add	_var04, objptr
	wrlong	_var01, _var04
	sub	objptr, #223
	jmp	#LR__0284
LR__0282
' 
'   elseif period < currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	add	_var01, objptr
	rdlong	_var03, _var01
	cmps	arg02, _var03 wcz
	sub	objptr, #223
 if_ae	jmp	#LR__0283
'     currPeriod[channel] -= cmd3_memoryZ[channel]
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #223
	add	_var02, objptr
	mov	_var04, arg01
	add	objptr, #233
	rdlong	_var01, _var02
	add	_var04, objptr
	rdbyte	_var05, _var04
	sub	_var01, _var05
	mov	_var06, arg01
	shl	_var06, #2
	sub	objptr, #233
	add	_var06, objptr
	wrlong	_var01, _var06
'     currPeriod[channel] #>= period
	mov	_var02, arg01
	shl	_var02, #2
	add	_var02, objptr
	rdlong	_var01, _var02
	fges	_var01, arg02
	mov	_var04, arg01
	shl	_var04, #2
	add	_var04, objptr
	wrlong	_var01, _var04
	sub	objptr, #223
LR__0283
LR__0284
' 
'   ' Handle glissando if activated
'   if portaGlissando[channel] > 0
	mov	_var01, arg01
	add	objptr, #444
	add	_var01, objptr
	rdbyte	_var03, _var01
	cmps	_var03, #0 wcz
	sub	objptr, #444
 if_be	jmp	#LR__0287
' 
'     tempPeriod := currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	add	_var01, objptr
	rdlong	_var07, _var01
' 
'     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
	mov	_var08, #0
	sub	objptr, #223
	loc	pa,	#(@LR__0286-@LR__0285)
	call	#FCACHE_LOAD_
LR__0285
' 
'       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
	add	ptr__trackerplayer_spin2_dat__, ##3236
	mov	_var09, ptr__trackerplayer_spin2_dat__
	mov	_var03, arg01
	add	objptr, #211
	add	_var03, objptr
	rdbyte	_var05, _var03
	mov	_var10, _var05
	shl	_var10, #3
	add	_var10, _var05
	shl	_var10, #3
	add	_var09, _var10
	mov	_var11, _var08
	shl	_var11, #1
	add	_var11, _var09
	rdword	_var12, _var11
'       if tempPeriod >= periodStep
	cmps	_var07, _var12 wcz
'         i += 1000
	sub	ptr__trackerplayer_spin2_dat__, ##3236
	sub	objptr, #211
 if_ae	add	_var08, ##1000
	add	_var08, #1
	cmps	_var08, #36 wcz
 if_b	jmp	#LR__0285
LR__0286
' 
'     deltaPeriod[channel] := periodStep - tempPeriod
	sub	_var12, _var07
	shl	arg01, #2
	add	objptr, #239
	add	arg01, objptr
	wrlong	_var12, arg01
	sub	objptr, #239
LR__0287
_trackerplayer_spin2_doPortamento_ret
	ret

' 
' 
' PRI doVolumeSlide(channel)
_trackerplayer_spin2_doVolumeSlide
' 
'   if x > 0
	add	objptr, #439
	rdbyte	_var01, objptr
	sub	objptr, #439
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0288
'     currVolume[channel] += x
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #255
	add	_var02, objptr
	rdlong	_var01, _var02
	add	objptr, #184
	rdbyte	_var03, objptr
	add	_var01, _var03
	mov	_var04, arg01
	shl	_var04, #2
	sub	objptr, #184
	add	_var04, objptr
	wrlong	_var01, _var04
	sub	objptr, #255
LR__0288
'   if y > 0
	add	objptr, #440
	rdbyte	_var01, objptr
	sub	objptr, #440
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0289
'     currVolume[channel] -= y
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #255
	add	_var02, objptr
	rdlong	_var01, _var02
	add	objptr, #185
	rdbyte	_var03, objptr
	sub	_var01, _var03
	shl	arg01, #2
	sub	objptr, #185
	add	arg01, objptr
	wrlong	_var01, arg01
	sub	objptr, #255
LR__0289
_trackerplayer_spin2_doVolumeSlide_ret
	ret

' 
' 
' '--------------------------------------------------------------
' '---------- Init the variables, start the cog. ----------------
' '--------------------------------------------------------------
' 
' pub start() :cog,base | iii
_audio019_spin2_start
	mov	COUNT_, #7
	call	#pushregs_
' 
' base:=@channel1[0]
	mov	local01, objptr
' 
' repeat iii from 0 to 7
	mov	local02, #0
	loc	pa,	#(@LR__0291-@LR__0290)
	call	#FCACHE_LOAD_
LR__0290
'   long [base+32*iii]:=0
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	wrlong	#0, local03
'   long [base+32*iii+4]:=0
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	add	local03, #4
	wrlong	#0, local03
'   long[base+32*iii+12]:=0
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	add	local03, #12
	wrlong	#0, local03
'   long[base+32*iii+16]:=2 
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	add	local03, #16
	wrlong	#2, local03
'   word[base+32*iii+20]:=0
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	add	local03, #20
	wrword	#0, local03
'   word[base+32*iii+22]:=8192
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	add	local03, #22
	wrword	##8192, local03
'   word[base+32*iii+24]:=100+2*iii
	mov	local04, local02
	shl	local04, #1
	mov	local03, #100
	add	local03, local04
	mov	local05, local01
	mov	local06, local02
	shl	local06, #5
	add	local05, local06
	add	local05, #24
	wrword	local03, local05
'   word[base+32*iii+26]:=2
	mov	local03, local01
	mov	local04, local02
	shl	local04, #5
	add	local03, local04
	add	local03, #26
	wrword	#2, local03
'   long [base+32*iii+8]:=@null | $C0000000
	add	ptr__audio019_spin2_dat__, ##760
	mov	local03, ptr__audio019_spin2_dat__
	bith	local03, #62
	mov	local05, local01
	mov	local06, local02
	shl	local06, #5
	add	local05, local06
	add	local05, #8
	wrlong	local03, local05
	add	local02, #1
	cmps	local02, #8 wcz
	sub	ptr__audio019_spin2_dat__, ##760
 if_b	jmp	#LR__0290
LR__0291
'   
' cog:=coginit(16,@audio,@channel1)
	mov	arg02, ptr__audio019_spin2_dat__
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	mov	local07, result1
' waitms(100)
	mov	arg01, #100
	call	#__system___waitms
' return cog,base
	mov	result2, local01
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
_audio019_spin2_start_ret
	ret
hubexit
	jmp	#cogexit

__system___setbaud
	rdlong	muldiva_, #20
	mov	muldivb_, arg01
	call	#divide_
	dirl	#62
	dirl	#63
	wrlong	muldivb_, ptr___system__dat__
	shl	muldivb_, #16
	mov	arg02, #7
	add	arg02, muldivb_
	wrpin	#124, #62
	wxpin	arg02, #62
	wrpin	#62, #63
	add	arg02, #20
	wxpin	arg02, #63
	dirh	#62
	dirh	#63
__system___setbaud_ret
	ret

__system___txraw
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0292
	mov	arg01, ##921600
	call	#__system___setbaud
LR__0292
	wypin	local01, #62
	waitx	#1
	loc	pa,	#(@LR__0294-@LR__0293)
	call	#FCACHE_LOAD_
LR__0293
	testp	#62 wc
 if_nc	jmp	#LR__0293
LR__0294
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__system___txraw_ret
	ret

__system___rxraw
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0295
	mov	arg01, ##921600
	call	#__system___setbaud
LR__0295
	cmp	local01, #0 wz
 if_e	jmp	#LR__0296
	getct	local03
	rdlong	local04, #20
	shr	local04, #10
	qmul	local01, local04
	getqx	local05
	add	local03, local05
LR__0296
	neg	local06, #1
	mov	local07, #0
	add	ptr___system__dat__, #4
	rdlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
LR__0297
	testb	local08, #8 wc
	testbn	local08, #9 andc
	shr	local08, #10
 if_b	mov	local07, #1
 if_b	jmp	#LR__0298
	testp	#63 wz
 if_e	mov	local07, #1
 if_e	rdpin	local08, #63
 if_e	shr	local08, #4
LR__0298
	mov	local02, #0
	cmp	local07, #0 wz
 if_ne	neg	local02, #1
	mov	local09, #0
	mov	local04, #0
	cmp	local01, #0 wz
 if_ne	neg	local04, #1
	mov	local05, #0
	mov	local10, #0
	getct	local11
	sub	local11, local03
	cmps	local11, #0 wcz
 if_b	neg	local10, #1
	cmp	local10, #0 wz
 if_ne	neg	local05, #1
	test	local04, local05 wz
 if_ne	neg	local09, #1
	or	local02, local09 wz
 if_e	jmp	#LR__0297
	cmp	local07, #0 wz
 if_ne	mov	local06, local08
 if_ne	and	local06, #255
	add	ptr___system__dat__, #4
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___rxraw_ret
	ret

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0306
	loc	pa,	#(@LR__0300-@LR__0299)
	call	#FCACHE_LOAD_
LR__0299
	cmps	arg03, #3 wcz
 if_be	jmp	#LR__0301
	rdlong	_var02, arg02
	wrlong	_var02, arg01
	add	arg01, #4
	add	arg02, #4
	sub	arg03, #4
	jmp	#LR__0299
LR__0300
LR__0301
	mov	_var03, arg03 wz
 if_e	jmp	#LR__0312
	loc	pa,	#(@LR__0304-@LR__0302)
	call	#FCACHE_LOAD_
LR__0302
	rep	@LR__0305, _var03
LR__0303
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
	add	arg01, #1
	add	arg02, #1
LR__0304
LR__0305
	jmp	#LR__0312
LR__0306
	add	arg01, arg03
	add	arg02, arg03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0311
	loc	pa,	#(@LR__0309-@LR__0307)
	call	#FCACHE_LOAD_
LR__0307
	rep	@LR__0310, _var04
LR__0308
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
LR__0309
LR__0310
LR__0311
LR__0312
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system__longmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0317
	mov	_var02, arg03 wz
 if_e	jmp	#LR__0323
	loc	pa,	#(@LR__0315-@LR__0313)
	call	#FCACHE_LOAD_
LR__0313
	rep	@LR__0316, _var02
LR__0314
	rdlong	_var03, arg02
	wrlong	_var03, arg01
	add	arg01, #4
	add	arg02, #4
LR__0315
LR__0316
	jmp	#LR__0323
LR__0317
	mov	_var04, arg03
	shl	_var04, #2
	add	arg01, _var04
	mov	_var04, arg03
	shl	_var04, #2
	add	arg02, _var04
	mov	_var05, arg03 wz
 if_e	jmp	#LR__0322
	loc	pa,	#(@LR__0320-@LR__0318)
	call	#FCACHE_LOAD_
LR__0318
	rep	@LR__0321, _var05
LR__0319
	sub	arg01, #4
	sub	arg02, #4
	rdlong	_var03, arg02
	wrlong	_var03, arg01
LR__0320
LR__0321
LR__0322
LR__0323
	mov	result1, _var01
__system__longmove_ret
	ret

__system____topofstack
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #8
	add	fp, #4
	wrlong	arg01, fp
	mov	result1, fp
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
__system____topofstack_ret
	ret

__system___make_methodptr
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #8
	call	#__system___gc_alloc_managed
	mov	local03, result1 wz
 if_e	jmp	#LR__0324
	wrlong	local01, local03
	mov	local04, local03
	add	local04, #4
	wrlong	local02, local04
LR__0324
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
__system___make_methodptr_ret
	ret

__system___lockmem
	mov	COUNT_, #2
	call	#pushregs_
	mov	result1, #0
	cogid	result1
	mov	local01, result1
	add	local01, #256
LR__0325
	rdlong	local02, arg01 wz
 if_e	wrlong	local01, arg01
 if_e	rdlong	local02, arg01
 if_e	rdlong	local02, arg01
	cmp	local02, local01 wz
 if_ne	jmp	#LR__0325
	mov	ptra, fp
	call	#popregs_
__system___lockmem_ret
	ret

__system___string_concat
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	local03, #0
	loc	pa,	#(@LR__0327-@LR__0326)
	call	#FCACHE_LOAD_
LR__0326
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0326
LR__0327
	mov	local05, local03
	mov	arg01, local02
	mov	local03, #0
	loc	pa,	#(@LR__0329-@LR__0328)
	call	#FCACHE_LOAD_
LR__0328
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0328
LR__0329
	mov	result1, local03
	mov	local06, result1
	mov	arg01, local05
	add	arg01, local06
	add	arg01, #1
	call	#__system___gc_alloc_managed
	mov	local07, result1 wz
 if_e	jmp	#LR__0330
	mov	arg01, local07
	mov	arg02, local01
	mov	arg03, local05
	call	#__system____builtin_memmove
	mov	arg01, local07
	add	arg01, local05
	add	local06, #1
	mov	arg02, local02
	mov	arg03, local06
	call	#__system____builtin_memmove
LR__0330
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___string_concat_ret
	ret

__system___tx
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0331
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	local03, local02
	and	local03, #2 wz
 if_e	jmp	#LR__0331
	mov	arg01, #13
	call	#__system___txraw
LR__0331
	mov	arg01, local01
	call	#__system___txraw
	mov	ptra, fp
	call	#popregs_
__system___tx_ret
	ret

__system___rx
	mov	COUNT_, #2
	call	#pushregs_
LR__0332
	mov	arg01, #0
	call	#__system___rxraw
	mov	local01, result1
	cmp	local01, ##-1 wz
 if_e	jmp	#LR__0332
	cmp	local01, #13 wz
 if_ne	jmp	#LR__0333
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_ne	mov	local01, #10
LR__0333
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #1 wz
 if_e	jmp	#LR__0336
	cmp	local01, #127 wz
 if_ne	jmp	#LR__0334
	mov	arg01, #8
	call	#__system___tx
	jmp	#LR__0335
LR__0334
	mov	arg01, local01
	call	#__system___tx
LR__0335
LR__0336
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___rx_ret
	ret

__system___pinread
	test	arg01, #32 wz
 if_ne	mov	_var01, inb
 if_e	mov	_var01, ina
	shr	_var01, arg01
	shr	arg01, #6
	zerox	_var01, arg01
	mov	result1, _var01
__system___pinread_ret
	ret

__system___waitms
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, #20
	loc	pa,	#(@LR__0338-@LR__0337)
	call	#FCACHE_LOAD_
LR__0337
	cmps	local01, ##1000 wcz
 if_a	waitx	local02
 if_a	sub	local01, ##1000
 if_a	jmp	#LR__0337
LR__0338
	add	ptr___system__dat__, #12
	rdlong	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__0339
	mov	muldiva_, local02
	mov	muldivb_, ##1000
	call	#unsdivide_
	mov	local03, muldivb_
	add	ptr___system__dat__, #12
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__0339
	cmps	local01, #0 wcz
 if_a	qmul	local01, local03
 if_a	getqx	arg01
 if_a	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitms_ret
	ret

__system___waitus
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	ptr___system__dat__, #16
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__0340
	rdlong	muldiva_, #20
	mov	muldivb_, ##1000000
	call	#unsdivide_
	mov	local02, muldivb_
	add	ptr___system__dat__, #16
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__0340
	qmul	local01, local02
	getqx	arg01
	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitus_ret
	ret

__system___basic_open
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system____getftab
	mov	local04, result1 wz
 if_ne	jmp	#LR__0341
	mov	arg01, abortchain
	mov	arg02, #12
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0346
LR__0341
	add	local04, #8
	rdlong	local05, local04 wz
	sub	local04, #8
 if_e	jmp	#LR__0342
	mov	arg01, local04
	call	#__system___closeraw
LR__0342
	cmp	local01, #0 wz
 if_e	jmp	#LR__0344
	mov	arg01, #4
	call	#__system___gc_alloc_managed
	mov	local06, result1 wz
 if_ne	jmp	#LR__0343
	mov	arg01, abortchain
	mov	arg02, #7
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0346
LR__0343
	wrlong	local01, local06
	mov	arg02, ptr___struct___bas_wrap_sender_tx_
	mov	arg01, local06
	call	#__system___make_methodptr
	add	local04, #24
	wrlong	result1, local04
	sub	local04, #24
	jmp	#LR__0345
LR__0344
	add	local04, #24
	wrlong	local01, local04
	sub	local04, #24
LR__0345
	add	local04, #8
	wrlong	#7, local04
	add	local04, #20
	wrlong	local02, local04
	add	local04, #4
	wrlong	local03, local04
	mov	result1, #0
LR__0346
	mov	ptra, fp
	call	#popregs_
__system___basic_open_ret
	ret

__system___basic_print_char
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	call	#__system___gettxfunc
	mov	local02, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0347
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	result1, #1
LR__0347
	mov	ptra, fp
	call	#popregs_
__system___basic_print_char_ret
	ret

__system___basic_print_string
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system___gettxfunc
	mov	local03, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0348
	cmp	local01, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0348
	mov	arg02, local02
	mov	arg03, local01
	mov	arg01, local03
	call	#__system___fmtstr
LR__0348
	mov	ptra, fp
	call	#popregs_
__system___basic_print_string_ret
	ret

__system___basic_print_integer
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0349
	mov	arg02, local02
	mov	arg03, local01
	mov	arg04, local03
	mov	arg01, local04
	call	#__system___fmtnum
LR__0349
	mov	ptra, fp
	call	#popregs_
__system___basic_print_integer_ret
	ret

__system___fmtchar
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrbyte	arg03, fp
	add	fp, #1
	wrbyte	#0, fp
	sub	fp, #13
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #8
	mov	arg03, fp
	sub	fp, #16
	call	#__system___fmtstr
	mov	ptra, fp
	call	#popregs_
__system___fmtchar_ret
	ret

__system___fmtstr
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	and	local04, #255
	mov	arg01, local03
	mov	local05, #0
	loc	pa,	#(@LR__0351-@LR__0350)
	call	#FCACHE_LOAD_
LR__0350
	rdbyte	local06, arg01 wz
 if_ne	add	local05, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0350
LR__0351
	mov	result1, local05
	mov	local07, result1
	cmp	local04, #0 wz
 if_e	jmp	#LR__0352
	fles	local07, local04 wcz
LR__0352
	mov	arg02, local02
	mov	arg03, local07
	mov	arg01, local01
	mov	arg04, #2
	call	#__system___fmtpad
	mov	local08, result1
	cmps	local08, #0 wcz
 if_b	mov	result1, local08
 if_b	jmp	#LR__0355
	mov	local09, #0
LR__0353
	cmps	local09, local07 wcz
 if_ae	jmp	#LR__0354
	mov	local10, local01
	rdlong	local11, local10
	add	local10, #4
	rdlong	local12, local10
	rdbyte	arg01, local03
	mov	local13, objptr
	mov	objptr, local11
	add	local03, #1
	call	local12
	mov	objptr, local13
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_b	jmp	#LR__0355
	add	local08, local14
	add	local09, #1
	jmp	#LR__0353
LR__0354
	mov	arg02, local02
	mov	arg03, local07
	mov	arg01, local01
	mov	arg04, #1
	call	#__system___fmtpad
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_ae	add	local08, local14
 if_ae	mov	result1, local08
LR__0355
	mov	ptra, fp
	call	#popregs_
__system___fmtstr_ret
	ret

__system___fmtnum
	mov	COUNT_, #6
	call	#pushregs_
	add	ptra, #112
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #4
	mov	local01, fp
	add	fp, #68
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #84
	rdlong	local01, fp
	shr	local01, #16
	and	local01, #63
	add	fp, #88
	wrlong	local01, fp
	sub	fp, #88
	rdlong	local01, fp
	and	local01, #255
	add	fp, #92
	wrlong	local01, fp
	sub	fp, #92
	rdlong	local01, fp
	shr	local01, #26
	and	local01, #3
	add	fp, #96
	wrlong	local01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #96
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0356
	add	fp, #96
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	sub	fp, #96
LR__0356
	add	fp, #100
	rdlong	local01, fp
	sub	fp, #100
	cmps	local01, #64 wcz
 if_a	jmp	#LR__0357
	add	fp, #100
	rdlong	local02, fp
	sub	fp, #100
	mov	local03, local02 wz
 if_ne	jmp	#LR__0358
LR__0357
	add	fp, #100
	wrlong	#64, fp
	sub	fp, #100
LR__0358
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #3 wz
 if_ne	jmp	#LR__0359
	add	fp, #104
	wrlong	#0, fp
	sub	fp, #104
	jmp	#LR__0361
LR__0359
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmps	local01, #0 wcz
 if_ae	jmp	#LR__0360
	add	fp, #104
	wrlong	#4, fp
	sub	fp, #92
	rdlong	local01, fp
	neg	local01, local01
	wrlong	local01, fp
	sub	fp, #12
LR__0360
LR__0361
	add	fp, #104
	rdlong	local01, fp wz
	sub	fp, #104
 if_e	jmp	#LR__0368
	add	fp, #92
	rdlong	local03, fp
	add	local03, #1
	wrlong	local03, fp
	add	fp, #4
	rdlong	local01, fp
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #100
	cmp	local01, local03 wz
 if_ne	jmp	#LR__0363
	add	fp, #96
	rdlong	local03, fp
	sub	local03, #1
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #96
 if_ne	jmp	#LR__0362
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #35
	call	#__system___fmtchar
	jmp	#LR__0373
LR__0362
LR__0363
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #2 wz
 if_ne	jmp	#LR__0364
	add	fp, #88
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#32, local01
	jmp	#LR__0367
LR__0364
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #4 wz
 if_ne	jmp	#LR__0365
	add	fp, #88
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#45, local01
	jmp	#LR__0366
LR__0365
	add	fp, #88
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#43, local01
LR__0366
LR__0367
LR__0368
	add	fp, #88
	rdlong	arg01, fp
	sub	fp, #76
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #80
	rdlong	arg04, fp
	mov	local04, #0
	sub	fp, #88
	rdlong	local05, fp
	sub	fp, #8
	testbn	local05, #29 wz
 if_ne	mov	local04, #1
	mov	arg05, local04
	call	#__system___uitoa
	mov	local06, result1
	add	fp, #92
	rdlong	local01, fp
	add	local01, local06
	wrlong	local01, fp
	add	fp, #8
	rdlong	local03, fp
	sub	fp, #100
	cmps	local01, local03 wcz
 if_be	jmp	#LR__0372
	loc	pa,	#(@LR__0370-@LR__0369)
	call	#FCACHE_LOAD_
LR__0369
	add	fp, #100
	rdlong	local01, fp
	mov	local03, local01
	sub	local03, #1
	wrlong	local03, fp
	sub	fp, #100
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0371
	add	fp, #88
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#35, local01
	jmp	#LR__0369
LR__0370
LR__0371
	add	fp, #88
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#0, local01
LR__0372
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #12
	mov	arg03, fp
	sub	fp, #20
	call	#__system___fmtstr
LR__0373
	mov	ptra, fp
	call	#popregs_
__system___fmtnum_ret
	ret

__system__Chr_S
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #3
	call	#__system___gc_alloc_managed
	mov	local02, result1 wz
 if_e	jmp	#LR__0374
	wrbyte	local01, local02
	add	local02, #1
	wrbyte	#0, local02
	sub	local02, #1
LR__0374
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
__system__Chr_S_ret
	ret

__system__Number_S
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
	mov	local03, arg03
 if_ne	jmp	#LR__0377
	mov	local02, #1
	mov	local04, local03
	mov	local05, #1
LR__0375
	mov	local06, #0
	cmp	local04, local01 wcz
 if_be	neg	local06, #1
	mov	local07, #0
	cmp	local05, local04 wcz
 if_b	neg	local07, #1
	test	local06, local07 wz
 if_e	jmp	#LR__0376
	mov	local05, local04
	qmul	local04, local03
	getqx	local04
	add	local02, #1
	jmp	#LR__0375
LR__0376
LR__0377
	fle	local02, #32 wcz
	mov	arg01, local02
	add	arg01, #2
	call	#__system___gc_alloc_managed
	mov	local08, result1
	mov	local07, local02
	add	local07, local08
	wrbyte	#0, local07
	loc	pa,	#(@LR__0379-@LR__0378)
	call	#FCACHE_LOAD_
LR__0378
	cmp	local02, #0 wcz
 if_be	jmp	#LR__0380
	sub	local02, #1
	mov	muldiva_, local01
	mov	muldivb_, local03
	call	#unsdivide_
	mov	local09, muldiva_
	mov	local01, muldivb_
	cmp	local09, #10 wcz
 if_b	add	local09, #48
 if_ae	add	local09, #55
	mov	local07, local02
	add	local07, local08
	wrbyte	local09, local07
	jmp	#LR__0378
LR__0379
LR__0380
	mov	result1, local08
	mov	ptra, fp
	call	#popregs_
__system__Number_S_ret
	ret

__system__String_S
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local02
	mov	local03, #0
	loc	pa,	#(@LR__0382-@LR__0381)
	call	#FCACHE_LOAD_
LR__0381
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0381
LR__0382
	mov	result1, local03 wz
 if_e	mov	result1, ##@LR__0499
 if_e	jmp	#LR__0384
	cmps	local01, #0 wcz
 if_be	mov	result1, ##@LR__0500
 if_be	jmp	#LR__0384
	mov	arg01, local01
	add	arg01, #2
	call	#__system___gc_alloc_managed
	mov	local05, result1 wz
 if_e	jmp	#LR__0383
	rdbyte	arg02, local02
	mov	arg01, local05
	mov	arg03, local01
	call	#\builtin_bytefill_
	add	local01, #1
	add	local01, local05
	wrbyte	#0, local01
	mov	result1, local05
	jmp	#LR__0384
LR__0383
	mov	result1, local05
LR__0384
	mov	ptra, fp
	call	#popregs_
__system__String_S_ret
	ret

__system___gc_ptrs
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, __heap_ptr
	mov	local02, local01
	add	local02, ##4088
	rdlong	local03, local01 wz
 if_ne	jmp	#LR__0385
	mov	local04, local02
	sub	local04, local01
	wrword	#1, local01
	mov	local03, local01
	add	local03, #2
	wrword	##27792, local03
	mov	local03, local01
	add	local03, #4
	wrword	#0, local03
	mov	local03, local01
	add	local03, #6
	wrword	#1, local03
	add	local01, #16
	abs	local03, local04 wc
	shr	local03, #4
 if_b	neg	local03, local03
	wrword	local03, local01
	mov	local03, local01
	add	local03, #2
	wrword	##27791, local03
	mov	local03, local01
	add	local03, #4
	wrword	#0, local03
	mov	local03, local01
	add	local03, #6
	wrword	#0, local03
	sub	local01, #16
LR__0385
	mov	result2, local02
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___gc_ptrs_ret
	ret

__system___gc_nextBlockPtr
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdword	local02, local01 wz
 if_ne	jmp	#LR__0386
	mov	arg01, ##@LR__0501
	call	#__system___gc_errmsg
	jmp	#LR__0387
LR__0386
	mov	result1, local01
	shl	local02, #4
	add	result1, local02
LR__0387
	mov	ptra, fp
	call	#popregs_
__system___gc_nextBlockPtr_ret
	ret

__system___gc_tryalloc
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
	mov	local05, local03
	mov	local06, #0
	loc	pa,	#(@LR__0389-@LR__0388)
	call	#FCACHE_LOAD_
LR__0388
	mov	local07, local05
	mov	local08, local05
	add	local08, #6
	rdword	local09, local08
	mov	arg01, local03
	mov	arg02, local09 wz
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local10, result1
	mov	local05, local10 wz
 if_ne	mov	local10, local05
 if_ne	rdword	local06, local10
	cmp	local05, #0 wz
 if_e	jmp	#LR__0390
	cmps	local05, local04 wcz
 if_ae	jmp	#LR__0390
	cmps	local01, local06 wcz
 if_a	jmp	#LR__0388
LR__0389
LR__0390
	cmp	local05, #0 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__0393
	mov	local10, local05
	add	local10, #6
	rdword	local11, local10
	cmps	local01, local06 wcz
 if_ae	jmp	#LR__0392
	wrword	local01, local05
	mov	arg01, local05
	mov	local09, local01
	shl	local09, #4
	add	arg01, local09
	mov	local10, local06
	sub	local10, local01
	wrword	local10, arg01
	mov	local10, arg01
	add	local10, #2
	wrword	##27791, local10
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local09, arg01
	add	local09, #4
	wrword	result1, local09
	mov	local10, local05
	add	local10, #6
	mov	local09, arg01
	rdword	local08, local10
	add	local09, #6
	wrword	local08, local09
	mov	local12, arg01
	mov	arg02, local12 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local11, result1
	call	#__system___gc_nextBlockPtr
	mov	local13, result1 wz
 if_e	jmp	#LR__0391
	cmps	local13, local04 wcz
 if_ae	jmp	#LR__0391
	mov	arg01, local03
	mov	arg02, local12 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local10, result1
	mov	local09, local13
	add	local09, #4
	wrword	local10, local09
LR__0391
LR__0392
	add	local07, #6
	wrword	local11, local07
	mov	local10, ##27776
	or	local10, local02
	mov	result1, #0
	cogid	result1
	or	local10, result1
	mov	local08, local05
	add	local08, #2
	wrword	local10, local08
	mov	local10, local03
	add	local10, #8
	mov	local09, local05
	rdword	local08, local10
	add	local09, #6
	wrword	local08, local09
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	add	local03, #8
	wrword	result1, local03
	mov	result1, local05
	add	result1, #8
	or	result1, ##1669332992
LR__0393
	mov	ptra, fp
	call	#popregs_
__system___gc_tryalloc_ret
	ret

__system___gc_errmsg
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
LR__0394
	rdbyte	local02, local01 wz
	add	local01, #1
 if_e	jmp	#LR__0395
	mov	arg01, local02
	call	#__system___tx
	jmp	#LR__0394
LR__0395
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system___gc_errmsg_ret
	ret

__system___gc_alloc_managed
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system___gc_doalloc
	mov	local02, result1 wz
 if_ne	jmp	#LR__0396
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0396
	mov	arg01, ##@LR__0502
	call	#__system___gc_errmsg
	jmp	#LR__0397
LR__0396
	mov	result1, local02
LR__0397
	mov	ptra, fp
	call	#popregs_
__system___gc_alloc_managed_ret
	ret

__system___gc_doalloc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
 if_e	mov	result1, #0
 if_e	jmp	#LR__0405
	add	local01, #23
	andn	local01, #15
	shr	local01, #4
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__0398
	call	#__system___gc_docollect
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1
LR__0398
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	wrlong	#0, arg01
	cmp	local03, #0 wz
 if_e	jmp	#LR__0404
	shl	local01, #4
	sub	local01, #8
	abs	local04, local01 wc
	shr	local04, #2
 if_b	neg	local04, local04
	mov	local05, local04 wz
	mov	local06, local03
 if_e	jmp	#LR__0403
	loc	pa,	#(@LR__0401-@LR__0399)
	call	#FCACHE_LOAD_
LR__0399
	rep	@LR__0402, local05
LR__0400
	wrlong	#0, local06
	add	local06, #4
LR__0401
LR__0402
LR__0403
LR__0404
	mov	result1, local03
LR__0405
	mov	ptra, fp
	call	#popregs_
__system___gc_doalloc_ret
	ret

__system___gc_isvalidptr
	mov	_var01, arg03
	mov	_var02, _var01
	and	_var02, ##-1048576
	cmp	_var02, ##1669332992 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	sub	_var01, #8
	andn	_var01, ##-1048576
	cmps	_var01, arg01 wcz
 if_b	jmp	#LR__0406
	cmps	_var01, arg02 wcz
 if_b	jmp	#LR__0407
LR__0406
	mov	result1, #0
	jmp	#__system___gc_isvalidptr_ret
LR__0407
	mov	_var02, _var01
	xor	_var02, arg01
	and	_var02, #15 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	mov	_var02, _var01
	add	_var02, #2
	rdword	_var02, _var02
	and	_var02, ##65472
	cmp	_var02, ##27776 wz
 if_ne	mov	result1, #0
 if_e	mov	result1, _var01
__system___gc_isvalidptr_ret
	ret

__system___gc_dofree
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	local02, result1
	mov	local03, result2
	mov	local04, local01
	add	local04, #2
	wrword	##27791, local04
	mov	local05, local01
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	loc	pa,	#(@LR__0409-@LR__0408)
	call	#FCACHE_LOAD_
LR__0408
	add	local05, #4
	rdword	arg02, local05 wz
	mov	arg01, local02
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local05, result1 wz
 if_e	jmp	#LR__0410
	mov	arg01, local05
	mov	local07, #0
	add	arg01, #2
	rdword	local08, arg01
	cmp	local08, ##27791 wz
 if_e	neg	local07, #1
	mov	result1, local07
	mov	local04, result1 wz
 if_e	jmp	#LR__0408
LR__0409
LR__0410
	cmp	local05, #0 wz
 if_e	mov	local05, local02
	mov	local04, local05
	add	local04, #6
	mov	local09, local01
	rdword	local10, local04
	add	local09, #6
	wrword	local10, local09
	mov	arg02, local01 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local09, local05
	add	local09, #6
	wrword	result1, local09
	cmp	local05, local02 wz
 if_e	jmp	#LR__0413
	mov	arg01, local05
	call	#__system___gc_nextBlockPtr
	cmp	result1, local01 wz
 if_ne	jmp	#LR__0412
	rdword	local04, local05
	rdword	local11, local01
	add	local04, local11
	wrword	local04, local05
	mov	local04, local01
	add	local04, #2
	wrword	#0, local04
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	cmps	local06, local03 wcz
 if_ae	jmp	#LR__0411
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local09, local06
	add	local09, #4
	wrword	result1, local09
LR__0411
	mov	local04, local01
	add	local04, #6
	mov	local09, local05
	rdword	local10, local04
	add	local09, #6
	wrword	local10, local09
	add	local01, #6
	wrword	#0, local01
	mov	local01, local05
LR__0412
LR__0413
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local12, result1 wz
 if_e	jmp	#LR__0415
	cmps	local12, local03 wcz
 if_ae	jmp	#LR__0415
	mov	arg01, local12
	mov	local07, #0
	add	arg01, #2
	rdword	local08, arg01
	cmp	local08, ##27791 wz
 if_e	neg	local07, #1
	mov	result1, local07 wz
 if_e	jmp	#LR__0415
	mov	local05, local01
	rdword	local04, local05
	mov	local01, local12
	rdword	local11, local01
	add	local04, local11
	mov	local13, local05
	wrword	local04, local13
	mov	local04, local01
	add	local04, #6
	mov	local09, local05
	rdword	local10, local04
	add	local09, #6
	wrword	local10, local09
	mov	local04, local01
	add	local04, #2
	wrword	#170, local04
	mov	local04, local01
	add	local04, #6
	mov	local09, #0
	wrword	#0, local04
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local04, result1
	mov	local06, local04 wz
 if_e	jmp	#LR__0414
	cmps	local06, local03 wcz
 if_ae	jmp	#LR__0414
	mov	arg01, local02
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local04, result1
	mov	local09, local06
	add	local09, #4
	wrword	local04, local09
LR__0414
LR__0415
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___gc_dofree_ret
	ret

__system___gc_docollect
	mov	COUNT_, #9
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result2
	mov	local02, result1
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
	mov	result1, #0
	cogid	result1
	mov	local04, result1
 if_e	jmp	#LR__0417
LR__0416
	cmps	local03, local01 wcz
 if_ae	jmp	#LR__0417
	mov	local05, local03
	add	local05, #2
	rdword	local06, local05
	andn	local06, #32
	mov	local07, local03
	add	local07, #2
	wrword	local06, local07
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
 if_ne	jmp	#LR__0416
LR__0417
	mov	local06, #0
	mov	arg01, #0
	call	#__system____topofstack
	mov	arg02, result1
	mov	arg01, local06
	call	#__system___gc_markhub
	call	#__system___gc_markcog
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local08, result1 wz
 if_ne	jmp	#LR__0418
	mov	arg01, ##@LR__0503
	call	#__system___gc_errmsg
	jmp	#LR__0424
LR__0418
LR__0419
	mov	local03, local08
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local08, result1
	mov	local06, local03
	add	local06, #2
	rdword	local09, local06
	test	local09, #32 wz
 if_ne	jmp	#LR__0422
	mov	local05, local09
	and	local05, #16 wz
 if_ne	jmp	#LR__0422
	mov	local06, local09
	and	local06, #15
	mov	local09, local06
	cmp	local09, local04 wz
 if_e	jmp	#LR__0420
	cmp	local09, #14 wz
 if_ne	jmp	#LR__0421
LR__0420
	mov	arg01, local03
	call	#__system___gc_dofree
	mov	local06, result1
	mov	local08, local06
LR__0421
LR__0422
	cmp	local08, #0 wz
 if_e	jmp	#LR__0423
	cmps	local08, local01 wcz
 if_b	jmp	#LR__0419
LR__0423
LR__0424
	mov	ptra, fp
	call	#popregs_
__system___gc_docollect_ret
	ret

__system___gc_markhub
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
LR__0425
	cmps	local01, local02 wcz
 if_ae	jmp	#LR__0426
	rdlong	arg03, local01
	add	local01, #4
	mov	arg02, local04
	mov	arg01, local03
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0425
	mov	arg01, local05
	mov	local06, #0
	add	arg01, #2
	rdword	local07, arg01
	cmp	local07, ##27791 wz
 if_e	neg	local06, #1
	mov	result1, local06 wz
 if_ne	jmp	#LR__0425
	mov	local08, local05
	add	local08, #2
	rdword	local09, local08
	andn	local09, #15
	or	local09, #46
	mov	local08, local05
	add	local08, #2
	wrword	local09, local08
	jmp	#LR__0425
LR__0426
	mov	ptra, fp
	call	#popregs_
__system___gc_markhub_ret
	ret

__system___gc_markcog
	mov	COUNT_, #6
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result1
	mov	local02, result2
	mov	local03, #0
LR__0427
	mov	local04, #496
	sub	local04, local03
	add	local04, #496
	'.live	local04
	alts	local04, #0
	mov	local05, local04
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local05
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0428
	mov	local06, local05
	add	local06, #2
	rdword	local04, local06
	or	local04, #32
	add	local05, #2
	wrword	local04, local05
LR__0428
	add	local03, #1
	cmps	local03, #496 wcz
 if_b	jmp	#LR__0427
	mov	ptra, fp
	call	#popregs_
__system___gc_markcog_ret
	ret

__system__write
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0429
	add	ptr___system__dat__, #28
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0430
LR__0429
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #36
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, #36
	call	#__system___vfswrite
LR__0430
	mov	ptra, fp
	call	#popregs_
__system__write_ret
	ret

__system__read
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0431
	add	ptr___system__dat__, #28
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0432
LR__0431
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #36
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, #36
	call	#__system___vfsread
LR__0432
	mov	ptra, fp
	call	#popregs_
__system__read_ret
	ret

__system__close
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0433
	add	ptr___system__dat__, #28
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0434
LR__0433
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #36
	add	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #36
	call	#__system___closeraw
LR__0434
	mov	ptra, fp
	call	#popregs_
__system__close_ret
	ret

__system__lseek
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0435
	add	ptr___system__dat__, #28
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0439
LR__0435
	mov	local04, local01
	shl	local04, #1
	add	local04, local01
	shl	local04, #4
	add	ptr___system__dat__, #36
	add	local04, ptr___system__dat__
	add	local04, #44
	rdlong	local05, local04 wz
	sub	local04, #44
	sub	ptr___system__dat__, #36
 if_ne	jmp	#LR__0436
	add	ptr___system__dat__, #28
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0439
LR__0436
	add	local04, #8
	rdlong	local05, local04
	sub	local04, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0437
	add	local04, #8
	rdlong	local05, local04
	or	local05, #128
	wrlong	local05, local04
	sub	local04, #8
LR__0437
	add	local04, #44
	rdlong	local05, local04
	sub	local04, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local03
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0438
	neg	arg01, local09 wz
	add	ptr___system__dat__, #28
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0439
LR__0438
	mov	result1, local09
LR__0439
	mov	ptra, fp
	call	#popregs_
__system__lseek_ret
	ret

__system____getftab
	cmp	arg01, #10 wcz
 if_ae	mov	result1, #0
 if_ae	jmp	#__system____getftab_ret
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr___system__dat__, #36
	add	result1, ptr___system__dat__
	sub	ptr___system__dat__, #36
__system____getftab_ret
	ret

__system___strrev
	rdbyte	_var01, arg01 wz
 if_e	jmp	#__system___strrev_ret
	mov	_var02, arg01
	loc	pa,	#(@LR__0441-@LR__0440)
	call	#FCACHE_LOAD_
LR__0440
	rdbyte	_var01, _var02 wz
 if_ne	add	_var02, #1
 if_ne	jmp	#LR__0440
LR__0441
	sub	_var02, #1
LR__0442
	cmps	_var02, arg01 wcz
 if_be	jmp	#LR__0443
	rdbyte	_var03, arg01
	rdbyte	_var04, _var02
	wrbyte	_var04, arg01
	wrbyte	_var03, _var02
	add	arg01, #1
	sub	_var02, #1
	jmp	#LR__0442
LR__0443
__system___strrev_ret
	ret

__system___fmtpad
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg04
	getbyte	local04, local02, #1
	shr	local02, #22
	and	local02, #3 wz
	mov	local05, #0
 if_e	mov	local02, #1
	test	local02, local03 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0447
	sub	local04, arg03
	mov	local06, local04
	cmps	local06, #0 wcz
 if_be	mov	result1, #0
 if_be	jmp	#LR__0447
	cmp	local02, #3 wz
 if_ne	jmp	#LR__0444
	cmp	local03, #1 wz
	wrz	local07
	add	local06, local07
	abs	local06, local06 wc
	shr	local06, #1
 if_b	neg	local06, local06
LR__0444
	mov	local08, #0
LR__0445
	cmps	local08, local06 wcz
 if_ae	jmp	#LR__0446
	mov	local09, local01
	rdlong	local07, local09
	add	local09, #4
	rdlong	local10, local09
	mov	arg01, #32
	mov	local11, objptr
	mov	objptr, local07
	call	local10
	mov	objptr, local11
	mov	local12, result1
	cmps	local12, #0 wcz
 if_b	mov	result1, local12
 if_b	jmp	#LR__0447
	add	local05, local12
	add	local08, #1
	jmp	#LR__0445
LR__0446
	mov	result1, local05
LR__0447
	mov	ptra, fp
	call	#popregs_
__system___fmtpad_ret
	ret

__system___uitoa
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05 wz
	mov	local06, local01
	mov	local07, #0
 if_ne	mov	local08, #55
 if_e	mov	local08, #87
LR__0448
	mov	muldiva_, local02
	mov	muldivb_, local03
	call	#unsdivide_
	mov	local09, muldiva_
	cmp	local09, #10 wcz
 if_b	add	local09, #48
 if_ae	add	local09, local08
	wrbyte	local09, local06
	mov	muldiva_, local02
	mov	muldivb_, local03
	add	local06, #1
	call	#unsdivide_
	mov	local02, muldivb_ wz
	add	local07, #1
 if_ne	jmp	#LR__0448
	cmp	local07, local04 wcz
 if_b	jmp	#LR__0448
	wrbyte	#0, local06
	mov	arg01, local01
	call	#__system___strrev
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___uitoa_ret
	ret

__system___gettxfunc
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0449
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0450
LR__0449
	mov	result1, #0
	jmp	#LR__0451
LR__0450
	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
	mov	arg01, local01
	call	#__system___make_methodptr
LR__0451
	mov	ptra, fp
	call	#popregs_
__system___gettxfunc_ret
	ret

__system___getiolock_0150
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0452
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0453
LR__0452
	add	ptr___system__dat__, #32
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, #32
	jmp	#LR__0454
LR__0453
	add	local01, #12
	mov	result1, local01
LR__0454
	mov	ptra, fp
	call	#popregs_
__system___getiolock_0150_ret
	ret

__system___closeraw
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	local03, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0455
	add	ptr___system__dat__, #28
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0458
LR__0455
	add	local01, #40
	rdlong	local03, local01 wz
	sub	local01, #40
 if_e	jmp	#LR__0456
	add	local01, #40
	rdlong	local03, local01
	sub	local01, #40
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
LR__0456
	add	local01, #32
	rdlong	local03, local01 wz
	sub	local01, #32
 if_e	jmp	#LR__0457
	add	local01, #32
	rdlong	local03, local01
	sub	local01, #32
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	local02, result1
LR__0457
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	mov	result1, local02
LR__0458
	mov	ptra, fp
	call	#popregs_
__system___closeraw_ret
	ret

__system____default_getc
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	sub	local02, #8
	test	local03, #2 wz
 if_e	jmp	#LR__0459
	mov	arg01, local01
	call	#__system____default_flush
LR__0459
	add	local02, #8
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local04, local02 wz
 if_ne	jmp	#LR__0460
	mov	arg01, local01
	call	#__system____default_filbuf
	mov	local04, result1
LR__0460
	cmps	local04, #0 wcz
 if_be	neg	result1, #1
 if_be	jmp	#LR__0461
	sub	local04, #1
	wrlong	local04, local02
	add	local02, #4
	rdlong	local05, local02
	rdbyte	result1, local05
	add	local05, #1
	wrlong	local05, local02
LR__0461
	mov	ptra, fp
	call	#popregs_
__system____default_getc_ret
	ret

__system____default_putc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0462
	mov	arg01, local02
	call	#__system____default_flush
LR__0462
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	add	local05, #1
	sub	local03, #12
	wrlong	local05, local03
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0463
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0463
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_ret
	ret

__system____default_putc_terminal
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0464
	mov	arg01, local02
	call	#__system____default_flush
LR__0464
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	sub	local03, #12
	add	local05, #1
	wrlong	local05, local03
	cmp	local01, #10 wz
 if_e	jmp	#LR__0465
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0466
LR__0465
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0466
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_terminal_ret
	ret

__system____default_flush
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #2 wz
 if_e	jmp	#LR__0469
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0471
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #64 wz
 if_e	jmp	#LR__0468
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #128 wz
 if_e	jmp	#LR__0467
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local01, #8
	rdlong	local04, local01
	andn	local04, #128
	wrlong	local04, local01
	sub	local01, #8
LR__0467
LR__0468
	add	local01, #20
	rdlong	local04, local01
	sub	local01, #20
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	add	local02, #12
	mov	arg02, local02
	sub	local02, #12
	mov	arg01, local01
	mov	arg03, local03
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	jmp	#LR__0471
LR__0469
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0470
	cmp	local03, #0 wz
 if_e	jmp	#LR__0470
	add	local01, #44
	rdlong	local08, local01
	sub	local01, #44
	mov	local04, local08
	rdlong	local05, local04
	add	local04, #4
	rdlong	local09, local04
	mov	local06, local09
	mov	local10, local01
	neg	local11, local03
	mov	local12, #1
	mov	arg01, local10
	mov	arg02, local11
	mov	arg03, #1
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	mov	local04, result1
	mov	local13, local04
	cmps	local13, #0 wcz
 if_ae	mov	local13, local03
LR__0470
LR__0471
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____default_flush_ret
	ret

__system___rxtxioctl_0179
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	cmp	local01, #256 wz
 if_e	jmp	#LR__0472
	cmp	local01, #257 wz
 if_e	jmp	#LR__0473
	jmp	#LR__0474
LR__0472
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
	mov	result1, #0
	jmp	#LR__0475
LR__0473
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	result1, #0
	jmp	#LR__0475
LR__0474
	add	ptr___system__dat__, #28
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
LR__0475
	mov	ptra, fp
	call	#popregs_
__system___rxtxioctl_0179_ret
	ret

__system____dummy_flush_0180
	mov	result1, #0
__system____dummy_flush_0180_ret
	ret

__system___vfswrite
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #2 wz
 if_ne	jmp	#LR__0476
	add	ptr___system__dat__, #28
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0484
LR__0476
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0478
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #128 wz
 if_e	jmp	#LR__0477
	add	local01, #44
	rdlong	local05, local01
	sub	local01, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	add	local01, #8
	rdlong	local05, local01
	andn	local05, #128
	wrlong	local05, local01
	sub	local01, #8
LR__0477
LR__0478
	add	local01, #20
	rdlong	local05, local01 wz
	sub	local01, #20
 if_e	jmp	#LR__0480
	add	local01, #20
	rdlong	local05, local01
	sub	local01, #20
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg02, local02
	mov	arg03, local03
	mov	arg01, local01
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0479
	add	local01, #8
	rdlong	local05, local01
	or	local05, #32
	wrlong	local05, local01
	add	ptr___system__dat__, #28
	wrlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, #28
	cmp	local09, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0484
LR__0479
	mov	result1, local09
	jmp	#LR__0484
LR__0480
	add	local01, #24
	rdlong	local10, local01 wz
	sub	local01, #24
 if_ne	jmp	#LR__0481
	add	ptr___system__dat__, #28
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0484
LR__0481
	mov	local09, #0
LR__0482
	cmp	local03, #0 wcz
 if_be	jmp	#LR__0483
	mov	local05, local10
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	rdbyte	arg01, local04
	mov	arg02, local01
	mov	local11, objptr
	mov	objptr, local06
	add	local04, #1
	call	local07
	mov	objptr, local11
	add	local09, result1
	sub	local03, #1
	jmp	#LR__0482
LR__0483
	mov	result1, local09
LR__0484
	mov	ptra, fp
	call	#popregs_
__system___vfswrite_ret
	ret

__system___vfsread
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #40
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #8
	rdlong	local01, local02
	test	local01, #1 wz
 if_ne	jmp	#LR__0485
	add	ptr___system__dat__, #28
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0493
LR__0485
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0487
	add	fp, #4
	rdlong	local04, fp
	add	local04, #16
	rdlong	local01, local04
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	mov	local05, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local05
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmps	result1, #0 wcz
 if_ae	jmp	#LR__0486
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #8
	rdlong	local03, local04
	or	local03, #32
	add	local01, #8
	wrlong	local03, local01
	add	fp, #12
	rdlong	arg01, fp wz
	sub	fp, #16
	add	ptr___system__dat__, #28
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0493
LR__0486
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	jmp	#LR__0493
LR__0487
	add	fp, #4
	rdlong	local01, fp
	add	local01, #28
	rdlong	local03, local01
	add	fp, #20
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__0488
	add	ptr___system__dat__, #28
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, #28
	neg	result1, #1
	jmp	#LR__0493
LR__0488
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #36
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0490
	add	fp, #4
	rdlong	local06, fp
	mov	local04, local06
	add	local04, #36
	rdlong	local07, local04
	mov	local01, local07
	rdlong	local02, local01
	add	local01, #4
	rdlong	local08, local01
	mov	local03, local08
	mov	local09, local06
	mov	local10, #256
	add	fp, #32
	mov	local11, fp
	mov	arg01, local09
	mov	arg02, #256
	mov	arg03, local11
	mov	local05, objptr
	mov	objptr, local02
	sub	fp, #36
	call	local03
	mov	objptr, local05
	add	fp, #16
	wrlong	result1, fp
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0489
	add	fp, #36
	rdlong	local04, fp
	sub	fp, #36
	mov	local03, local04
	and	local03, #2 wz
 if_e	jmp	#LR__0489
	mov	local01, #1
	add	fp, #32
	wrlong	#1, fp
	sub	fp, #32
LR__0489
LR__0490
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
LR__0491
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #0 wcz
 if_be	jmp	#LR__0492
	add	fp, #24
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #4
	mov	local08, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local08
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmps	result1, #0 wcz
 if_b	jmp	#LR__0492
	add	fp, #28
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #8
	rdlong	local06, fp
	wrbyte	local06, local01
	sub	fp, #4
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #32
 if_e	jmp	#LR__0491
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, #10 wz
 if_ne	jmp	#LR__0491
LR__0492
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0493
	mov	ptra, fp
	call	#popregs_
__system___vfsread_ret
	ret

__system____default_filbuf
	mov	COUNT_, #6
	call	#pushregs_
	rdlong	local01, arg01
	add	arg01, #16
	rdlong	local02, arg01
	sub	arg01, #16
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	add	local01, #12
	mov	arg02, local01
	sub	local01, #12
	decod	arg03, #10
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmps	local06, #0 wcz
 if_b	neg	result1, #1
 if_b	jmp	#LR__0494
	wrlong	local06, local01
	add	local01, #12
	mov	local02, local01
	sub	local01, #8
	wrlong	local02, local01
	add	local01, #4
	rdlong	local02, local01
	or	local02, #1
	wrlong	local02, local01
	mov	result1, local06
LR__0494
	mov	ptra, fp
	call	#popregs_
__system____default_filbuf_ret
	ret

' 	
' 	FUNCTION pfunc(c as integer) as integer
___strs_cl_pfunc
' 		if (i < 16) then
	add	objptr, #4
	rdlong	_var01, objptr
	sub	objptr, #4
	cmps	_var01, #16 wcz
 if_ae	jmp	#LR__0495
	rdlong	_var02, objptr
	add	objptr, #4
	rdlong	_var03, objptr
	add	_var03, _var02
	wrbyte	arg01, _var03
	rdlong	_var01, objptr
	add	_var01, #1
	wrlong	_var01, objptr
	sub	objptr, #4
' 			p(i) = c
' 			i = i+1
' 			return 1
	mov	result1, #1
	jmp	#___strs_cl_pfunc_ret
LR__0495
' 			return -1
	neg	result1, #1
___strs_cl_pfunc_ret
	ret

__struct__s_vfs_file_t_putchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #24
	rdlong	local01, objptr wz
	sub	objptr, #24
 if_e	mov	result1, #0
 if_e	jmp	#LR__0496
	add	objptr, #24
	rdlong	local01, objptr
	sub	objptr, #24
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg02, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wcz
 if_b	mov	local01, #0
 if_ae	mov	local01, #1
	mov	result1, local01
LR__0496
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_putchar_ret
	ret

__struct__s_vfs_file_t_getchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #28
	rdlong	local01, objptr wz
	sub	objptr, #28
 if_e	neg	result1, #1
 if_e	jmp	#LR__0497
'         return getcf(__this);
	add	objptr, #28
	rdlong	local01, objptr
	sub	objptr, #28
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg01, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
LR__0497
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_getchar_ret
	ret

__struct___bas_wrap_sender_tx
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	local01, objptr
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_tx_ret
	ret

LR__0498
	byte	" "
	byte	0
LR__0499
	byte	
	byte	0
LR__0500
	byte	
	byte	0
LR__0501
	byte	" !!! corrupted heap??? !!! "
	byte	0
LR__0502
	byte	" !!! out of heap memory !!! "
	byte	0
LR__0503
	byte	" !!! corrupted heap !!! "
	byte	0
LR__0504
	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
	byte	0
LR__0505
	byte	"S"
	byte	0
LR__0506
	byte	"Abcdef"
	byte	0
LR__0507
	byte	"                      "
	byte	0
LR__0508
	byte	
	byte	0
LR__0509
	byte	" "
	byte	0
LR__0510
	byte	"samples module"
	byte	0
	alignl
_dat_
'-' module file "ballada.mod"
	byte	$23, $23, $20, $62, $61, $6c, $6c, $61, $64, $61, $20, $23, $23, $00, $00, $00
	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
	byte	$00[22]
	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
	byte	$00[99]
	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
	byte	$00[48]
	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
	byte	$00[15]
	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
	byte	$00[17]
	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
	byte	$00[15]
	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
	byte	$00[16]
	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
	byte	$00[15]
	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[28]
	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[32]
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[245]
	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[239]
	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$00[6]
	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
	byte	$00[5]
	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$00[5]
	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$00[6]
	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
	byte	$00[5]
	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$00[5]
	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$00[6]
	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
	byte	$00[5]
	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$00[5]
	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$00[6]
	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
	byte	$00[5]
	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$00[5]
	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
	byte	$00[11]
	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[119]
	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$00[5]
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[235]
	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
	byte	$00[5]
	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
	byte	$00[203]
	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00[12]
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
	byte	$00[260]
	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
	byte	$00[11]
	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[16]
	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$00[256]
	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[16]
	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
	byte	$00[16]
	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
	byte	$00[12]
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
	byte	$00[260]
	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
	byte	$00[7]
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
	byte	$00[255]
	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
	byte	$00[7]
	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
	byte	$00[255]
	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
	byte	$00[11]
	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
	byte	$00[7]
	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
	byte	$00[251]
	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
	byte	$00[11]
	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
	byte	$00[7]
	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
	byte	$00[5]
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[175]
	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
	byte	$00[11]
	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
	byte	$00[5]
	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
	byte	$00[7]
	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[245]
	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
	byte	$7f[8]
	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
	byte	$7f[6]
	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
	byte	$7f[12]
	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
	byte	$fa[6]
	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
	byte	$f7[9]
	byte	$f9[10]
	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
	byte	$80[9]
	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
	byte	$00[9]
	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
	byte	$00[5]
	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
	byte	$ff[5]
	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
	alignl
_hng030rm_spin2_dat_
'-' vga_font       file "vgafont.def"
	byte	$00[19]
	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
	byte	$00[11]
	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
	byte	$00[16]
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
	byte	$00[9]
	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
	byte	$18[8]
	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
	byte	$18[6]
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[10]
	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
	byte	$33[6]
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
	byte	$00[6]
	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
	byte	$00[6]
	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18[15]
	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6c[9]
	byte	$00[5]
	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
	byte	$66[6]
	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
	byte	$00[12]
	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
	byte	$ff[9]
	byte	$00[7]
	byte	$ff[9]
	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$ff[7]
	byte	$00[9]
	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
	byte	$00[8]
	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
'-' st_font        file "st4font.def"
	byte	$00[55]
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$18[9]
	byte	$00[7]
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
	byte	$66[5]
	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[8]
	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
	byte	$00[9]
	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[5]
	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00[13]
	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
	byte	$00[8]
	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
	byte	$60[7]
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
	byte	$00[18]
	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
	byte	$30[9]
	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
	byte	$00[7]
	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
'-' twocolors      long  $00000000,$FFFFFF00
	byte	$00, $00, $00, $00, $00, $ff, $ff, $ff
'-' fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
	byte	$00, $00, $00, $00, $00, $80, $80, $80, $00, $00, $00, $ff, $00, $ff, $ff, $ff
'-' vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
	byte	$00[5]
	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
'-' ataripalette   file "ataripalettep2.def"
	byte	$00[5]
	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
'-' '**********************************************************************************
'-' '
'-' '        Timings and colors definitions
'-' '
'-' '**********************************************************************************
'-' 
'-'    'streamer sets for text mode, to add to timings[0..5]
'-' ' todo for the retromachine: 768x576
'-' 
'-' '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
'-' timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $50, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
'-' 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
'-' timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
	byte	$30, $00, $00, $00, $50, $00, $00, $00, $34, $00, $00, $00, $c0, $03, $00, $00
	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
'-' 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
'-' timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
	byte	$10, $00, $00, $00, $40, $00, $00, $00, $10, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
'-' timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $42, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
	byte	$50, $00, $00, $00, $a0, $00, $00, $00, $54, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
'-' timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$50, $00, $00, $00, $32, $00, $00, $00, $50, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
	byte	$18, $00, $00, $00, $30, $00, $00, $00, $18, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
'-' timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$20, $00, $00, $00, $40, $00, $00, $00, $22, $00, $00, $00, $80, $03, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
'-' vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
	byte	$00, $75, $c7, $97, $27, $47, $f6, $0a, $05, $79, $cb, $9b, $2b, $4b, $ea, $0f
'-' 
'-' hdmi            setq    #9
	byte	$28, $12, $64, $fd
'-'                 rdlong  framebuf,  ptra                  'read pointers
	byte	$00, $df, $06, $fb
'-'            '     setq2   #255
'-'             '    rdlong  $100, paletteptr 
'-'                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
	byte	$00, $26, $6f, $fc
'-'                 setcmod #$100                            'enable HDMI mode
	byte	$3c, $00, $66, $fd
'-'                 mov     ii,#448                          '7 << 6          
	byte	$c0, $f9, $06, $f6
'-'                 add     ii,hbase
	byte	$78, $f9, $02, $f1
'-'                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
	byte	$58, $f8, $62, $fd
'-'                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
	byte	$7b, $0b, $80, $ff, $7c, $01, $0b, $fc
'-' 
'-'                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
	byte	$66, $66, $86, $ff, $1d, $9a, $65, $fd
'-' 
'-' 
'-' ''--------  frame rendering main loop  ---------------------------------------------------
'-' 
'-' p101
'-'                 setq    #10
	byte	$28, $14, $64, $fd
'-'                 rdlong  framebuf,  ptra
	byte	$00, $df, $06, $fb
'-'                 setq    #15
	byte	$28, $1e, $64, $fd
'-'                 rdlong  m_bs,modeptr                     ' read timings
	byte	$74, $9b, $02, $fb
'-'                 rdlong  border,borderptr
	byte	$71, $99, $02, $fb
'-' 
'-'                 add     frames,#1
	byte	$01, $c4, $06, $f1
'-'                 mov     dlptr2,dlptr
	byte	$76, $f5, $02, $f6
'-' 
'-'                 rdlong  cursorx, cursorptr               ' read cursor position
	byte	$73, $c7, $02, $fb
'-'                 getbyte cursory, cursorx,#1              ' y position at byte #1
	byte	$63, $c9, $ea, $f8
'-'                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
	byte	$63, $c3, $f2, $f8
'-'                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
	byte	$ff, $c6, $06, $f5
'-'  '' up porch
'-' 
'-'                 mov     hsync0,sync_000                  '
	byte	$48, $fd, $02, $f6
'-'                 mov     hsync1,sync_001
	byte	$49, $ff, $02, $f6
'-'                 callpa  i_upporch ,#blank
	byte	$37, $a8, $46, $fb
'-'                 wrlong  #0,vblankptr
	byte	$72, $01, $68, $fc
'-'                 
'-'                 testb   paletteptr,#31 wc
	byte	$1f, $ea, $16, $f4
'-'          if_nc  setq2   #255
	byte	$29, $fe, $65, $3d
'-'          if_nc  rdlong  $000, paletteptr                'read palette
	byte	$75, $01, $00, $3b
'-' 
'-' '' cursor blinking
'-' 
'-'                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
	byte	$04, $c4, $0e, $f4
'-'          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
	byte	$81, $c6, $06, $a6
'-' 
'-' '' main screen
'-' 
'-'                 mov linenum,#0
	byte	$00, $be, $06, $f6
'-'                 mov rcnt,#0
	byte	$00, $18, $07, $f6
'-'                 mov rcnt2a,#0
	byte	$00, $1c, $07, $f6
'-' 
'-' 
'-' p301            cmp rcnt,#0 wz
	byte	$00, $18, $0f, $f2
'-'         if_z    jmp #p306
	byte	$18, $00, $90, $ad
'-'                 sub rcnt,#1
	byte	$01, $18, $87, $f1
'-'                 mov dl,rdl
	byte	$90, $f7, $02, $f6
'-'                incmod rcnt2a,rcnt2 wz
	byte	$8d, $1d, $0b, $f7
'-'    if_z        add dl,roffset  
	byte	$8f, $f7, $02, $a1
'-'                 mov rdl,dl
	byte	$7b, $21, $03, $f6
'-'                 jmp #p307          
	byte	$04, $00, $90, $fd
'-'           
'-'                 
'-' p306            rdlong  dl,dlptr2
	byte	$7a, $f7, $02, $fb
'-' p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
	byte	$7b, $fb, $1a, $f6
'-'                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
	byte	$6a, $fa, $7a, $fd
'-'    if_nz_or_nc  jmp     #p303                        
	byte	$34, $00, $90, $7d
'-' 
'-' '' Special entry:
'-' '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
'-' '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
'-' '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
'-' '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
'-' '' todo: set horizontal scroll (if needed)
'-' 
'-'                 shl framebuf2,#2
	byte	$02, $fa, $66, $f0
'-'                 getnib dlc,framebuf2,#0
	byte	$7d, $23, $43, $f8
'-'                 cmp dlc,#%100 wz
	byte	$04, $22, $0f, $f2
'-'   
'-'                 
'-'                 add dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                              if_nz  jmp #p301  '' now ignore unknown instruction 
	byte	$bc, $ff, $9f, $5d
'-'                  rdlong rdl,dlptr2
	byte	$7a, $21, $03, $fb
'-'                  getword rcnt,framebuf2,#1 
	byte	$7d, $19, $3b, $f9
'-'                  shr rcnt,#4
	byte	$04, $18, $47, $f0
'-'              
'-'                  getnib rcnt2,framebuf2,#4
	byte	$7d, $1b, $63, $f8
'-'                  getword roffset,framebuf2,#0
	byte	$7d, $1f, $33, $f9
'-'                 
'-'                  shr roffset,#4
	byte	$04, $1e, $47, $f0
'-'                  shl roffset,#12
	byte	$0c, $1e, $67, $f0
'-'   
'-'                  jmp #p301
	byte	$9c, $ff, $9f, $fd
'-'                  
'-'                  
'-' p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
'-'                 shr     framebuf2,#12
	byte	$0c, $fa, $46, $f0
'-'                 shl     framebuf2,#2
	byte	$02, $fa, $66, $f0
'-' 
'-'                 getbyte t1,dl,#0
	byte	$7b, $03, $e3, $f8
'-'                 cmp     t1,#0 wz
	byte	$00, $02, $0f, $f2
'-'     if_z        jmp     #borderline
	byte	$34, $00, $90, $ad
'-' 
'-'                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
	byte	$00, $f6, $16, $f4
'-'           if_c   jmp     #textline
	byte	$50, $00, $90, $cd
'-'           if_nc  jmp     #graphline
	byte	$50, $02, $90, $3d
'-' '
'-' p302            add     linenum,#1
	byte	$01, $be, $06, $f1
'-'                 add     dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                 cmp     linenum,i_totalvis  wz
	byte	$5c, $bf, $0a, $f2
'-'          if_nz  jmp     #p301
	byte	$6c, $ff, $9f, $5d
'-' 
'-' p112            wrlong  #1,vblankptr
	byte	$72, $03, $68, $fc
'-'                 callpa  i_downporch ,#blank             'bottom blanks
	byte	$07, $ac, $46, $fb
'-' 
'-'                 mov     hsync0,sync_222                 'vsync on
	byte	$4a, $fd, $02, $f6
'-'                 mov     hsync1,sync_223
	byte	$4b, $ff, $02, $f6
'-'                 callpa  i_vsync,#blank                  'vertical sync blanks
	byte	$04, $aa, $46, $fb
'-'                 jmp     #p101
	byte	$f8, $fe, $9f, $fd
'-' 
'-' '' ---------------  END of frame rendering loop -------------------------------------------
'-' 
'-' 
'-' borderline      call    #hsync                      ' make a border
	byte	$14, $00, $b0, $fd
'-'                 xcont   m_vi,border
	byte	$4c, $a1, $c2, $fc
'-'                 jmp     #p302
	byte	$cc, $ff, $9f, $fd
'-' 
'-' 
'-' blank           call    #hsync                          'blank lines
	byte	$08, $00, $b0, $fd
'-'                 xcont   m_vi,hsync0
	byte	$7e, $a1, $c2, $fc
'-'         _ret_   djnz    pa,#blank
	byte	$fd, $ed, $6f, $0b
'-' 
'-' hsync           xcont   m_bs,hsync0                     'horizontal sync
	byte	$7e, $9b, $c2, $fc
'-'                 xzero   m_sn,hsync1
	byte	$7f, $9d, $b2, $fc
'-'         _ret_   xcont   m_bv,hsync0
	byte	$7e, $9f, $c2, $0c
'-' 
'-' 
'-' 
'-' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'-'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
'-' 
'-' '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
'-' 
'-' textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
	byte	$63, $cd, $02, $f6
'-' 
'-'                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
	byte	$7b, $01, $53, $f8
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3
	byte	$03, $16, $07, $f5
'-' 
'-' 
'-' 
'-'                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
	byte	$7b, $bd, $02, $f6
'-'                 shr     linestart,#2                    ' scanline to char line
	byte	$02, $bc, $46, $f0
'-'                 and     linestart,#63
	byte	$3f, $bc, $06, $f5
'-'                 cmp     linestart,cursory wz            ' if the cursor is not here
	byte	$64, $bd, $0a, $f2
'-'           if_nz mov     cursorpos2,#129                 ' move it out of the screen
	byte	$81, $cc, $06, $56
'-' 
'-'                 call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$cc, $ff, $bf, $fd
'-' 
'-'                        ' if fontline =0, get a border color
'-' 
'-' p102            getword t1,m_border,#0
	byte	$51, $03, $33, $f9
'-'                 cmp     t1, #0 wz
	byte	$00, $02, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
	byte	$61, $01, $1b, $f2
'-'           if_c  mov     cursorpos,#129                  ' move it out of the screen
	byte	$81, $ca, $06, $c6
'-'          if_nc  mov     cursorpos,cursorpos2
	byte	$66, $cb, $02, $36
'-'                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
	byte	$01, $ca, $06, $f1
'-'                 mov     t2,fontbuf                      ' font definition pointer
	byte	$70, $05, $03, $f6
'-'                 add     t2,fontline                     ' add a current font line
	byte	$80, $05, $03, $f1
'-'                 mov m_lut2, m_lut1
	byte	$52, $bb, $02, $f6
'-'                 add m_lut2, lutt1
	byte	$6a, $bb, $02, $f1
'-'                 mov cpl2,i_cpl
	byte	$58, $0f, $03, $f6
'-' 
'-'                cmp zoom,#2 wz
	byte	$02, $16, $0f, $f2
'-'           if_z jmp #p420
	byte	$e4, $00, $90, $ad
'-'                cmp zoom,#1 wz
	byte	$01, $16, $0f, $f2
'-'           if_z jmp #p410
	byte	$64, $00, $90, $ad
'-'                 cmp zoom,#0 wz
	byte	$00, $16, $0f, $f2
'-'           if_z jmp #p400
	byte	$04, $00, $90, $ad
'-'                jmp #p430
	byte	$50, $01, $90, $fd
'-' 
'-'                    '
'-'  ''---------------------------------------------------------------------------------------------------------
'-'  p400                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p400
	byte	$eb, $0f, $6f, $fb
'-'                         
'-' 
'-'                         
'-'  p401                   jmp    #p103
	byte	$28, $01, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p410                   shr cpl2,#1
	byte	$01, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------------------------
'-'  p412                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-' 
'-'                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
	byte	$81, $07, $4b, $f8
'-'                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
	byte	$81, $03, $43, $f8
'-'                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
	byte	$63, $02, $63, $fd
'-'                         mul t1,#3
	byte	$03, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-'                         mergew t3
	byte	$63, $06, $63, $fd
'-'                         mul t3,#3
	byte	$03, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p412
	byte	$e4, $0f, $6f, $fb
'-'  p411                   jmp    #p103
	byte	$b0, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p420                   shr cpl2,#2
	byte	$02, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------
'-'  p422                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         mergeb t1
	byte	$61, $02, $63, $fd
'-'                         getword t3,t1,#1
	byte	$81, $07, $3b, $f9
'-'                         mul t1,#15
	byte	$0f, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         getbyte t4,t1,#1        '
	byte	$81, $09, $eb, $f8
'-'                         xcont m_lut2,t4                                                                                                           '
	byte	$84, $bb, $c2, $fc
'-' 
'-'                         mul t3,#15
	byte	$0f, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         getbyte t5,t3,#1
	byte	$83, $0b, $eb, $f8
'-'                         xcont m_lut2, t5
	byte	$85, $bb, $c2, $fc
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p422
	byte	$e2, $0f, $6f, $fb
'-'  p421                   jmp    #p103
	byte	$30, $00, $90, $fd
'-' 
'-' '--------------------------------------------------------------------------------------------------------------
'-' 
'-'  p430                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-' 
'-'                         xcont m_lut2,#0
	byte	$00, $ba, $c6, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         djnz   cpl2,#p430
	byte	$f5, $0f, $6f, $fb
'-'  p431                   jmp    #p103
	byte	$00, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-' 
'-' 
'-' p103            getword  mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$b0, $fd, $9f, $fd
'-' 
'-' '' -------------------------------------- END of text line ---------------------------------
'-' 
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
'-' 
'-' graphline       call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$ec, $fd, $bf, $fd
'-' 
'-' 
'-' p202            getword mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp     mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-' '----------------------------------------- display pixels
'-' 
'-'                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
	byte	$52, $bb, $02, $f6
'-'                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
	byte	$58, $0f, $03, $f6
'-' 
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3                        ' get a horizontal zoom for the line
	byte	$03, $16, $07, $f5
'-' 
'-'                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
	byte	$7b, $bd, $02, $f6
'-'                 and     colordepth,#12
	byte	$0c, $bc, $06, $f5
'-' 
'-'                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
	byte	$00, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg1
	byte	$6b, $bb, $02, $a1
'-'           if_z  jmp     #p240
	byte	$64, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
	byte	$04, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg2
	byte	$6c, $bb, $02, $a1
'-'           if_z  jmp     #p250
	byte	$98, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
	byte	$08, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg4
	byte	$6d, $bb, $02, $a1
'-'           if_z  jmp     #p260
	byte	$fc, $00, $90, $ad
'-' 
'-'                 add m_lut2,lutg8                        ' 8 bpp modes
	byte	$6e, $bb, $02, $f1
'-' 
'-' '' --- 8 bit color modes
'-' 
'-'                 cmp zoom, #%00 wz   '256 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$50, $01, $90, $ad
'-' 
'-'                 cmp zoom, #%01 wz   '256 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'                 if_z mov skippattern,#%101010
	byte	$2a, $0c, $07, $a6
'-'        
'-'  '  
'-'                 cmp zoom, #%10 wz   '256 colors, zoom x4
	byte	$02, $16, $0f, $f2
'-'                 if_z mov skippattern,#%100101
	byte	$25, $0c, $07, $a6
'-'     
'-'  
'-'                 if_nz mov skippattern,#%000101
	byte	$05, $0c, $07, $56
'-'                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
	byte	$01, $0e, $47, $50
'-'         
'-' 
'-'         
'-' p235               rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    add     framebuf2,#2             '0 1 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1             '1 0 0
	byte	$01, $fa, $06, $f1
'-'                    movbyts char,#%01010000          '0 1 1
	byte	$50, $10, $ff, $f9
'-'                    movbyts char,#%00000000          '1 0 0
	byte	$00, $10, $ff, $f9
'-'                    xcont   m_lut2,char              '0 0 0
	byte	$88, $bb, $c2, $fc
'-'                    xcont   m_lut2,char              '1 1 0
	byte	$88, $bb, $c2, $fc
'-'                    djnz    cpl2,#p235
	byte	$f7, $0f, $6f, $fb
'-' 
'-'                jmp    #p203
	byte	$20, $01, $90, $fd
'-'                   
'-' 
'-' 
'-' '' --- 1 bit color modes
'-' 
'-' p240          cmp zoom, #%00 wz     '2 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$08, $01, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '2 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   mov skippattern,#%10011
	byte	$13, $0c, $07, $a6
'-'        if_nz  mov skippattern,#%01000
	byte	$08, $0c, $07, $56
'-' 
'-' 
'-' p241               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    movbyts char,#%01000100
	byte	$44, $10, $ff, $f9
'-'                    mergew  char
	byte	$63, $10, $63, $fd
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    movbyts char,#%01000100         ' 1 0
	byte	$44, $10, $ff, $f9
'-'                    mergew  char                    ' 1 0
	byte	$63, $10, $63, $fd
'-'                    xcont   m_lut2,char             ' 0 0
	byte	$88, $bb, $c2, $fc
'-'                    add     framebuf2,#2                    ' 0 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1                ' 1 0
	byte	$01, $fa, $06, $f1
'-'                    djnz   cpl2,#p241
	byte	$f6, $0f, $6f, $fb
'-' 
'-' 
'-'                jmp    #p203
	byte	$e0, $00, $90, $fd
'-' 
'-' '' --- 2 bit color modes
'-' 
'-' p250          cmp zoom, #%00 wz     '4 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$c8, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p252
	byte	$30, $00, $90, $ad
'-' 
'-' 
'-' p254               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                    mov  t5,#4
	byte	$04, $0a, $07, $f6
'-' p255               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#2
	byte	$88, $03, $53, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#$55
	byte	$55, $02, $07, $fa
'-'                    rolbyte  t2,t1,#0
	byte	$81, $05, $03, $f9
'-'                    djnz    t5,#p255
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p254
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$a0, $00, $90, $fd
'-' 
'-' p252               rdword char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    mov  t5,#8
	byte	$08, $0a, $07, $f6
'-' p253               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#4
	byte	$88, $03, $63, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#5
	byte	$05, $02, $07, $fa
'-'                    rolnib  t2,t1,#0
	byte	$81, $05, $83, $f8
'-'                    djnz    t5,#p253
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p252
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$70, $00, $90, $fd
'-' 
'-' '' ------ 4 bit color modes
'-' 
'-' p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$58, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p262
	byte	$2c, $00, $90, $ad
'-' 
'-' 
'-' p263               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                            rep #5,#2
	byte	$02, $0a, $dc, $fc
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p263
	byte	$f6, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$34, $00, $90, $fd
'-' 
'-' p262               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                            rep #3,#4
	byte	$04, $06, $dc, $fc
'-'                              rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                                  rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p262
	byte	$f8, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$10, $00, $90, $fd
'-' 
'-' ''---------- all color modes without zoom
'-' 
'-' p251               rep  #3,cpl2
	byte	$87, $07, $d8, $fc
'-'                    rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    add     framebuf2,#4
	byte	$04, $fa, $06, $f1
'-'                    xcont   m_lut2,char
	byte	$88, $bb, $c2, $fc
'-'           
'-'  ''-----------------------------------------------------------------------------------------
'-' p203           ' getword  mb2,m_border,#0
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$ec, $fb, $9f, $fd
'-' 
'-' '' -------------------------------------- END of graph  line ---------------------------------
'-' 
'-' '' consts and vars
'-' 
'-' sync_000        long    %1101010100_1101010100_1101010100_10    '
	byte	$52, $4d, $35, $d5
'-' sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
	byte	$ae, $42, $35, $d5
'-' sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
	byte	$52, $45, $15, $55
'-' sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
	byte	$ae, $4a, $15, $55
'-' 
'-' border          long    %00000000_00011010_00101100_00000000
	byte	$00, $2c, $1a, $00
'-' 
'-' '------ these longs will be set by setmode function
'-' 
'-' m_bs            long    0        'blanks before sync
	byte	$00, $00, $00, $00
'-' m_sn            long    0        'sync
	byte	$00, $00, $00, $00
'-' m_bv            long    0        'blanks before visible
	byte	$00, $00, $00, $00
'-' m_vi            long    0        'visible pixels #
	byte	$00, $00, $00, $00
'-' m_border        long    0        'left/right borders
	byte	$00, $00, $00, $00
'-' m_lut1          long    0        'characters
	byte	$00, $00, $00, $00
'-' i_vborder       long    0        'up/down borders
	byte	$00, $00, $00, $00
'-' i_upporch       long    0        'up porch lines
	byte	$00, $00, $00, $00
'-' i_vsync         long    0        'vsync lines
	byte	$00, $00, $00, $00
'-' i_downporch     long    0        'down porch lines
	byte	$00, $00, $00, $00
'-' i_modenum       long    0        'mode #
	byte	$00, $00, $00, $00
'-' i_cpl           long    0        'chars/longs per line
	byte	$00, $00, $00, $00
'-' i_lines         long    0        'scanlines #
	byte	$00, $00, $00, $00
'-' i_clock         long    0
	byte	$00, $00, $00, $00
'-' i_hubset        long    0
	byte	$00, $00, $00, $00
'-' i_totalvis      long    0
	byte	$00, $00, $00, $00
'-' 
'-' '-------------------------------------
'-' 
'-' m_lut2          long    0
	byte	$00, $00, $00, $00
'-' 
'-' colordepth
'-' linestart       long    0
	byte	$00, $00, $00, $00
'-' linenum         long    0
	byte	$00, $00, $00, $00
'-' lutaddr         long    256
	byte	$00, $01, $00, $00
'-' 
'-' cursorsh        long    14
	byte	$0e, $00, $00, $00
'-' frames          long    0
	byte	$00, $00, $00, $00
'-' cursorx         long    0
	byte	$00, $00, $00, $00
'-' cursory         long    0
	byte	$00, $00, $00, $00
'-' cursorpos       long    0
	byte	$00, $00, $00, $00
'-' cursorpos2      long    0
	byte	$00, $00, $00, $00
'-' fontstart       long    0
	byte	$00, $00, $00, $00
'-' border2         long 0
	byte	$00, $00, $00, $00
'-' lutiv           long $70810000
	byte	$00, $00, $81, $70
'-' lutt1           long $00880000
	byte	$00, $00, $88, $00
'-' lutg1           long $00800000
	byte	$00, $00, $80, $00
'-' lutg2           long $10800000
	byte	$00, $00, $80, $10
'-' lutg4           long $20800000
	byte	$00, $00, $80, $20
'-' lutg8           long $30800000
	byte	$00, $00, $80, $30
'-' framebuf        long 0
	byte	$00, $00, $00, $00
'-' fontbuf         long 0
	byte	$00, $00, $00, $00
'-' borderptr       long 0
	byte	$00, $00, $00, $00
'-' vblankptr       long 0
	byte	$00, $00, $00, $00
'-' cursorptr       long 0
	byte	$00, $00, $00, $00
'-' modeptr         long 0
	byte	$00, $00, $00, $00
'-' paletteptr      long 0
	byte	$00, $00, $00, $00
'-' dlptr           long 0
	byte	$00, $00, $00, $00
'-' fontnumptr      res     1
'-' fontnumptr      res     1
'-' hbase           res     1
'-' hbase           res     1
'-' borderptr2      res     1
'-' borderptr2      res     1
'-' dlptr2 res 1
'-' dlptr2 res 1
'-' dl              res 1
'-' dl              res 1
'-' ii              res     1
'-' ii              res     1
'-' framebuf2       res     1
'-' framebuf2       res     1
'-' hsync0          res     1
'-' hsync0          res     1
'-' hsync1          res     1
'-' hsync1          res     1
'-' fontline        res     1
'-' fontline        res     1
'-' t1              res     1
'-' t1              res     1
'-' t2              res     1
'-' t2              res     1
'-' t3 res 1
'-' t3 res 1
'-' t4 res 1
'-' t4 res 1
'-' t5 res 1
'-' t5 res 1
'-' skippattern res 1
'-' skippattern res 1
'-' cpl2 res 1
'-' cpl2 res 1
'-' char            res     1
'-' char            res     1
'-' backcolor       res     1
'-' backcolor       res     1
'-' charcolor       res     1
'-' charcolor       res     1
'-' zoom res 1
'-' zoom res 1
'-' rcnt long 0 'dl repeat count
	byte	$00, $00, $00, $00
'-' rcnt2 long 0
	byte	$00, $00, $00, $00
'-' rcnt2a long 0
	byte	$00, $00, $00, $00
'-' roffset long 0
	byte	$00, $00, $00, $00
'-' rdl long 0  'dl repeat line
	byte	$00, $00, $00, $00
'-' dlc long 0 'dl command
	byte	$00, $00, $00, $00
'-' mb2 long 0
	byte	$00, $00, $00, $00
'-' aend             long 0
	byte	$00, $00, $00, $00
'-'                 fit     496                     '
	alignl
_trackerplayer_spin2_dat_
'-' 
'-' null             long  0
	byte	$00, $00, $00, $00
'-' frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
'-' 
'-' vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
	byte	$00, $00, $00, $00, $18, $00, $00, $00, $31, $00, $00, $00, $4a, $00, $00, $00
	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
'-'                  long  180,  197,  212,  224,  235,  244,  250,  253
	byte	$b4, $00, $00, $00, $c5, $00, $00, $00, $d4, $00, $00, $00, $e0, $00, $00, $00
	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
'-'                  long  255,  253,  250,  244,  235,  224,  212,  197
	byte	$ff, $00, $00, $00, $fd, $00, $00, $00, $fa, $00, $00, $00, $f4, $00, $00, $00
	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
'-'                  long  180,  161,  141,  120,  97,   74,   49,   24
	byte	$b4, $00, $00, $00, $a1, $00, $00, $00, $8d, $00, $00, $00, $78, $00, $00, $00
	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
'-'                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
	byte	$00, $00, $00, $00, $e8, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $b6, $ff, $ff, $ff
	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
'-'                  long -180, -197, -212, -224, -235, -244, -250, -253
	byte	$4c, $ff, $ff, $ff, $3b, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $20, $ff, $ff, $ff
	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
'-'                  long -255, -253, -250, -244, -235, -224, -212, -197
	byte	$01, $ff, $ff, $ff, $03, $ff, $ff, $ff, $06, $ff, $ff, $ff, $0c, $ff, $ff, $ff
	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
'-'                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
	byte	$4c, $ff, $ff, $ff, $5f, $ff, $ff, $ff, $73, $ff, $ff, $ff, $88, $ff, $ff, $ff
	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
'-' 
'-' periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
	byte	$58, $03, $28, $03, $fa, $02, $d0, $02, $a6, $02, $80, $02, $5c, $02, $3a, $02
	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
'-'                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
	byte	$ac, $01, $94, $01, $7d, $01, $68, $01, $53, $01, $40, $01, $2e, $01, $1d, $01
	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
'-'                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
	byte	$d6, $00, $ca, $00, $be, $00, $b4, $00, $aa, $00, $a0, $00, $97, $00, $8f, $00
	byte	$87, $00, $7f, $00, $78, $00, $71, $00
'-'                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
	byte	$6b, $00, $22, $03, $f5, $02, $cb, $02, $a2, $02, $7d, $02, $59, $02, $37, $02
	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
'-'                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
	byte	$a9, $01, $91, $01, $7b, $01, $65, $01, $51, $01, $3e, $01, $2c, $01, $1c, $01
	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
'-'                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
	byte	$d5, $00, $c9, $00, $bd, $00, $b3, $00, $a9, $00, $9f, $00, $96, $00, $8e, $00
	byte	$86, $00, $7e, $00, $77, $00, $71, $00
'-'                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
	byte	$4c, $03, $1c, $03, $f0, $02, $c5, $02, $9e, $02, $78, $02, $55, $02, $33, $02
	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
'-'                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
	byte	$a6, $01, $8e, $01, $78, $01, $63, $01, $4f, $01, $3c, $01, $2a, $01, $1a, $01
	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
'-'                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
	byte	$d3, $00, $c7, $00, $bc, $00, $b1, $00, $a7, $00, $9e, $00, $95, $00, $8d, $00
	byte	$85, $00, $7d, $00, $76, $00, $70, $00
'-'                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
	byte	$46, $03, $17, $03, $ea, $02, $c0, $02, $99, $02, $74, $02, $50, $02, $2f, $02
	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
'-'                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
	byte	$a3, $01, $8b, $01, $75, $01, $60, $01, $4c, $01, $3a, $01, $28, $01, $18, $01
	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
'-'                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
	byte	$d1, $00, $c6, $00, $bb, $00, $b0, $00, $a6, $00, $9d, $00, $94, $00, $8c, $00
	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
'-'                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
	byte	$40, $03, $11, $03, $e5, $02, $bb, $02, $94, $02, $6f, $02, $4c, $02, $2b, $02
	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
'-'                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
	byte	$a0, $01, $88, $01, $72, $01, $5e, $01, $4a, $01, $38, $01, $26, $01, $16, $01
	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
'-'                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
	byte	$d0, $00, $c4, $00, $b9, $00, $af, $00, $a5, $00, $9c, $00, $93, $00, $8b, $00
	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
'-'                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
	byte	$3a, $03, $0b, $03, $e0, $02, $b6, $02, $8f, $02, $6b, $02, $48, $02, $27, $02
	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
'-'                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
	byte	$9d, $01, $86, $01, $70, $01, $5b, $01, $48, $01, $35, $01, $24, $01, $14, $01
	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
'-'                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
	byte	$ce, $00, $c3, $00, $b8, $00, $ae, $00, $a4, $00, $9b, $00, $92, $00, $8a, $00
	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
'-'                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
	byte	$34, $03, $06, $03, $da, $02, $b1, $02, $8b, $02, $66, $02, $44, $02, $23, $02
	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
'-'                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
	byte	$9a, $01, $83, $01, $6d, $01, $59, $01, $45, $01, $33, $01, $22, $01, $12, $01
	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
'-'                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
	byte	$cd, $00, $c1, $00, $b7, $00, $ac, $00, $a3, $00, $9a, $00, $91, $00, $89, $00
	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
'-'                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
	byte	$2e, $03, $00, $03, $d5, $02, $ac, $02, $86, $02, $62, $02, $3f, $02, $1f, $02
	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
'-'                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
	byte	$97, $01, $80, $01, $6b, $01, $56, $01, $43, $01, $31, $01, $20, $01, $10, $01
	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
'-'                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
	byte	$cc, $00, $c0, $00, $b5, $00, $ab, $00, $a1, $00, $98, $00, $90, $00, $88, $00
	byte	$80, $00, $79, $00, $72, $00, $6c, $00
'-'                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
	byte	$8b, $03, $58, $03, $28, $03, $fa, $02, $d0, $02, $a6, $02, $80, $02, $5c, $02
	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
'-'                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
	byte	$c5, $01, $ac, $01, $94, $01, $7d, $01, $68, $01, $53, $01, $40, $01, $2e, $01
	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
'-'                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
	byte	$e2, $00, $d6, $00, $ca, $00, $be, $00, $b4, $00, $aa, $00, $a0, $00, $97, $00
	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
'-'                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
	byte	$84, $03, $52, $03, $22, $03, $f5, $02, $cb, $02, $a3, $02, $7c, $02, $59, $02
	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
'-'                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
	byte	$c2, $01, $a9, $01, $91, $01, $7b, $01, $65, $01, $51, $01, $3e, $01, $2c, $01
	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
'-'                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
	byte	$e1, $00, $d4, $00, $c8, $00, $bd, $00, $b3, $00, $a9, $00, $9f, $00, $96, $00
	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
'-'                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
	byte	$7e, $03, $4c, $03, $1c, $03, $f0, $02, $c5, $02, $9e, $02, $78, $02, $55, $02
	byte	$33, $02, $14, $02, $f6, $01, $da, $01
'-'                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
	byte	$bf, $01, $a6, $01, $8e, $01, $78, $01, $63, $01, $4f, $01, $3c, $01, $2a, $01
	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
'-'                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
	byte	$df, $00, $d3, $00, $c7, $00, $bc, $00, $b1, $00, $a7, $00, $9e, $00, $95, $00
	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
'-'                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
	byte	$77, $03, $46, $03, $17, $03, $ea, $02, $c0, $02, $99, $02, $74, $02, $50, $02
	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
'-'                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
	byte	$bc, $01, $a3, $01, $8b, $01, $75, $01, $60, $01, $4c, $01, $3a, $01, $28, $01
	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
'-'                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
	byte	$de, $00, $d1, $00, $c6, $00, $bb, $00, $b0, $00, $a6, $00, $9d, $00, $94, $00
	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
'-'                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
	byte	$71, $03, $40, $03, $11, $03, $e5, $02, $bb, $02, $94, $02, $6f, $02, $4c, $02
	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
'-'                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
	byte	$b9, $01, $a0, $01, $88, $01, $72, $01, $5e, $01, $4a, $01, $38, $01, $26, $01
	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
'-'                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
	byte	$dc, $00, $d0, $00, $c4, $00, $b9, $00, $af, $00, $a5, $00, $9c, $00, $93, $00
	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
'-'                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
	byte	$6b, $03, $3a, $03, $0b, $03, $e0, $02, $b6, $02, $8f, $02, $6b, $02, $48, $02
	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
'-'                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
	byte	$b5, $01, $9d, $01, $86, $01, $70, $01, $5b, $01, $48, $01, $35, $01, $24, $01
	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
'-'                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
	byte	$db, $00, $ce, $00, $c3, $00, $b8, $00, $ae, $00, $a4, $00, $9b, $00, $92, $00
	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
'-'                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
	byte	$64, $03, $34, $03, $06, $03, $da, $02, $b1, $02, $8b, $02, $66, $02, $44, $02
	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
'-'                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
	byte	$b2, $01, $9a, $01, $83, $01, $6d, $01, $59, $01, $45, $01, $33, $01, $22, $01
	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
'-'                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
	byte	$d9, $00, $cd, $00, $c1, $00, $b7, $00, $ac, $00, $a3, $00, $9a, $00, $91, $00
	byte	$89, $00, $81, $00, $7a, $00, $73, $00
'-'                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
	byte	$5e, $03, $2e, $03, $00, $03, $d5, $02, $ac, $02, $86, $02, $62, $02, $3f, $02
	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
'-'                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
	byte	$af, $01, $97, $01, $80, $01, $6b, $01, $56, $01, $43, $01, $31, $01, $20, $01
	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
'-'                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
	byte	$d8, $00, $cb, $00, $c0, $00, $b5, $00, $ab, $00, $a1, $00, $98, $00, $90, $00
	byte	$88, $00, $80, $00, $79, $00, $72, $00
	alignl
_audio019_spin2_dat_
'-' 
'-' audio       org     0
'-' 			mov     ptrb,#0
	byte	$00, $f2, $07, $f6
'-'             wrpin   dac,#left       ' Noise dither DACs at clk/90
	byte	$0e, $7a, $05, $fc
'-'             wxpin   #100,#left
	byte	$0e, $c8, $1c, $fc
'-'             wrpin   dac,#right
	byte	$0f, $7a, $05, $fc
'-'             wxpin   #100,#right
	byte	$0f, $c8, $1c, $fc
'-'             dirh    #left addpins 1
	byte	$41, $9c, $64, $fd
'-'             setse1  #%001<<6 + left ' Set the event - DAC empty
	byte	$20, $9c, $64, $fd
'-'             mov     ijmp1,#isr1     ' Init the interrupt
	byte	$75, $e8, $07, $f6
'-'             setint1 #4              ' Interrupt from DAC empty event
	byte	$25, $08, $64, $fd
'-'             
'-' '---------------------------------------------------------------------------------        
'-' '----------------- The main loop -------------------------------------------------
'-' '---------------------------------------------------------------------------------
'-' 
'-' loop        cmp     time0,a21000000 wc  ' time counter overflow protection
	byte	$81, $04, $11, $f2
'-'       if_c  jmp     #loop1
	byte	$10, $00, $90, $cd
'-'   
'-'             mov     cn,#9
	byte	$09, $4a, $05, $f6
'-' p402        altd    cn,#a21000000
	byte	$81, $4a, $8d, $f9
'-'             sub     0-0,a20000000
	byte	$80, $00, $80, $f1
'-'             djnz    cn,#p402
	byte	$fd, $4b, $6d, $fb
'-'     
'-' loop1       mov     cn,#0             ' Find the channel to compute
	byte	$00, $4a, $05, $f6
'-'             mov     ct,time1           ' with the lowest next sample time
	byte	$83, $4c, $01, $f6
'-'             fle     ct,time2 wcz       ' How to size-optimize this???
	byte	$84, $4c, $39, $f3
'-'     if_c    mov     cn,#1
	byte	$01, $4a, $05, $c6
'-'             fle     ct,time3 wcz
	byte	$85, $4c, $39, $f3
'-'     if_c    mov     cn,#2     
	byte	$02, $4a, $05, $c6
'-'             fle     ct,time4 wcz
	byte	$86, $4c, $39, $f3
'-'     if_c    mov     cn,#3
	byte	$03, $4a, $05, $c6
'-'             fle     ct,time5 wcz
	byte	$87, $4c, $39, $f3
'-'     if_c    mov     cn,#4
	byte	$04, $4a, $05, $c6
'-'             fle     ct,time6 wcz
	byte	$88, $4c, $39, $f3
'-'     if_c    mov     cn,#5
	byte	$05, $4a, $05, $c6
'-'             fle     ct,time7 wcz
	byte	$89, $4c, $39, $f3
'-'     if_c    mov     cn,#6
	byte	$06, $4a, $05, $c6
'-'             fle     ct,time8 wcz
	byte	$8a, $4c, $39, $f3
'-'     if_c    mov     cn,#7
	byte	$07, $4a, $05, $c6
'-' 
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- Compute channel samples --------------------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' 
'-' p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
	byte	$a5, $20, $01, $f6
'-'             shl     channeladd,#5
	byte	$05, $20, $65, $f0
'-'             add     ptra,channeladd
	byte	$90, $f0, $03, $f1
'-' 
'-'             setq    #7               
	byte	$28, $0e, $64, $fd
'-'             rdlong  pointer0,ptra
	byte	$00, $31, $05, $fb
'-'             
'-'      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
	byte	$9d, $46, $39, $f9
'-'     	    getword avol0,volpan0,#0
	byte	$9d, $44, $31, $f9
'-' 	        getword askip0,freqskip0,#1    	    
	byte	$9e, $42, $39, $f9
'-' 	        getword afreq0,freqskip0,#0
	byte	$9e, $40, $31, $f9
'-' 
'-'             alts    cn, #time1
	byte	$83, $4a, $95, $f9
'-'             mov     dt0,0-0   
	byte	$00, $4e, $01, $f6
'-'             sub     dt0,time0
	byte	$82, $4e, $81, $f1
'-' 
'-'             altd    cn, #time1
	byte	$83, $4a, $8d, $f9
'-'             add     0-0,afreq0  	
	byte	$a0, $00, $00, $f1
'-' 
'-'             add     pointer0,askip0
	byte	$a1, $30, $01, $f1
'-'             cmp     pointer0,lend0 wcz
	byte	$9c, $30, $19, $f2
'-'     if_ge   sub     pointer0,lend0	        
	byte	$9c, $30, $81, $31
'-'     if_ge   add     pointer0,lstart0       
	byte	$9b, $30, $01, $31
'-'             mov     qq,pointer0
	byte	$98, $24, $01, $f6
'-'             add     qq,sstart0
	byte	$9a, $24, $01, $f1
'-' 
'-'             testb   sstart0,#31 wz
	byte	$1f, $34, $0d, $f4
'-' 
'-'     if_nz   rdbyte  spl,qq
	byte	$92, $26, $c1, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $26, $65, $50
'-'     if_z    rdword  spl,qq
	byte	$92, $26, $e1, $aa
'-' 
'-'             scas    spl,avol0
	byte	$a2, $26, $31, $fa
'-'             mov     spl,0-0
	byte	$00, $26, $01, $f6
'-'  
'-'             scas    spl,apan0
	byte	$a3, $26, $31, $fa
'-'             mov     ls0,0-0
	byte	$00, $50, $01, $f6
'-'  
'-'             altd    cn,#ls1
	byte	$ad, $4a, $8d, $f9
'-'             mov     0-0,ls0
	byte	$a8, $00, $00, $f6
'-'              
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $24, $05, $f6
'-'             sub     qq,apan0
	byte	$a3, $24, $81, $f1
'-'             scas    spl,qq
	byte	$92, $26, $31, $fa
'-'             mov     rs0, 0-0
	byte	$00, $52, $01, $f6
'-' 
'-'             altd    cn,#rs1
	byte	$b5, $4a, $8d, $f9
'-'             mov     0-0,rs0
	byte	$a9, $00, $00, $f6
'-' 
'-'             setword sample0,rs0,#1
	byte	$a9, $32, $29, $f9
'-'             setword sample0,ls0,#0
	byte	$a8, $32, $21, $f9
'-'             
'-' 
'-'             bitl   sstart0, #30 wcz            
	byte	$1e, $34, $1d, $f4
'-'     if_z    mov    pointer0, #0  
	byte	$00, $30, $05, $a6
'-'     if_z    wrlong sstart0, ptra[2]
	byte	$02, $35, $65, $ac
'-' p403        setq #1
	byte	$28, $02, $64, $fd
'-'      
'-'             wrlong  pointer0,ptra
	byte	$00, $31, $65, $fc
'-'             sub     ptra, channeladd
	byte	$90, $f0, $83, $f1
'-'             jmp     #p101
	byte	$00, $00, $90, $fd
'-'                        
'-'             
'-'           
'-'             
'-' '------------------------ Channels end here --------------------       
'-' 
'-' ' Now add all channels and put the sample to the buffer    
'-' 
'-' 
'-' p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
	byte	$82, $48, $09, $f2
'-'     if_z    sub     front,#1         ' 
	byte	$01, $22, $85, $a1
'-'     if_z    and     front,#511     
	byte	$ff, $23, $05, $a5
'-'            
'-'     
'-'             mov     rs,#0            ' Mix all channels to rs and ls
	byte	$00, $58, $05, $f6
'-'             mov     ls,#0
	byte	$00, $56, $05, $f6
'-'             add     rs,rs1
	byte	$b5, $58, $01, $f1
'-'             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
	byte	$b6, $58, $01, $f1
'-'             add     rs,rs3
	byte	$b7, $58, $01, $f1
'-'             add     rs,rs4
	byte	$b8, $58, $01, $f1
'-'             add     rs,rs5
	byte	$b9, $58, $01, $f1
'-'             add     rs,rs6
	byte	$ba, $58, $01, $f1
'-'             add     rs,rs7
	byte	$bb, $58, $01, $f1
'-'             add     rs,rs8
	byte	$bc, $58, $01, $f1
'-' 
'-'            
'-'             add     ls,ls1
	byte	$ad, $56, $01, $f1
'-'             add     ls,ls2
	byte	$ae, $56, $01, $f1
'-'             add     ls,ls3
	byte	$af, $56, $01, $f1
'-'             add     ls,ls4
	byte	$b0, $56, $01, $f1
'-'             add     ls,ls5
	byte	$b1, $56, $01, $f1
'-'             add     ls,ls6
	byte	$b2, $56, $01, $f1
'-'             add     ls,ls7
	byte	$b3, $56, $01, $f1
'-'             add     ls,ls8
	byte	$b4, $56, $01, $f1
'-' 
'-'  		
'-'             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
	byte	$0f, $56, $e5, $f4
'-'             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
	byte	$0f, $58, $e5, $f4
'-' 		    
'-'             setword rs,ls,#1         ' Pack L and R to one long    		
	byte	$ab, $58, $29, $f9
'-'             mov newsample, rs
	byte	$ac, $16, $01, $f6
'-' 
'-'             mov     oldt0,time0      ' update global time
	byte	$82, $48, $01, $f6
'-'             add     time0,dt0    
	byte	$a7, $04, $01, $f1
'-' 
'-'             
'-'  
'-'                                      ' now push dt0 samples to the buffer
'-'             cmp      dt0,#0 wz
	byte	$00, $4e, $0d, $f2
'-'     if_z    jmp      #loop1
	byte	$94, $fe, $9f, $ad
'-'             mov      t1,dt0
	byte	$a7, $18, $01, $f6
'-'   
'-' p301        mov     t2,ptrb         ' Check if the buffer is full	
	byte	$f9, $1b, $01, $f6
'-'             sub     t2,#1
	byte	$01, $1a, $85, $f1
'-'             and     t2,#511
	byte	$ff, $1b, $05, $f5
'-'             cmp     t2,front wcz
	byte	$91, $1a, $19, $f2
'-'     if_e    jmp     #p301    
	byte	$ec, $ff, $9f, $ad
'-'     
'-'             wrlut   newsample, front
	byte	$91, $16, $31, $fc
'-'             add     front,#1
	byte	$01, $22, $05, $f1
'-'             and     front,#511
	byte	$ff, $23, $05, $f5
'-'             djnz    t1,#p301
	byte	$f7, $19, $6d, $fb
'-'             
'-'             jmp     #loop            'loop
	byte	$50, $fe, $9f, $fd
'-' 
'-' '-------------------------------------------------------------------------
'-' '------------------ This is the end of the main loop ---------------------
'-' '-------------------------------------------------------------------------
'-' 
'-' '--------------------------------------------------------------------------
'-' '------ Interrupt service -------------------------------------------------
'-' '------ Output the sample, get the next one if exists ---------------------
'-' '--------------------------------------------------------------------------
'-' 
'-' isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
	byte	$0e, $28, $25, $fc
'-'             wypin   rsample,#right       '4
	byte	$0f, $2a, $25, $fc
'-'            
'-'             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
	byte	$91, $f2, $1b, $f2
'-'     if_e    reti1                        '8/10
	byte	$f5, $ff, $3b, $ab
'-' 
'-'             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
	byte	$e1, $2d, $a5, $fa
'-'           	getword rsample,lsnext,#1    '13
	byte	$96, $2a, $39, $f9
'-'           	getword lsample,lsnext,#0    '15
	byte	$96, $28, $31, $f9
'-'             reti1                        '17/19 
	byte	$f5, $ff, $3b, $fb
'-'           
'-' '---------------------------------------------------------------------------
'-' '-------- End of interrupt -------------------------------------------------
'-' '---------------------------------------------------------------------------    
'-' 
'-' 
'-' '---------------------------------------------------------------------------
'-' '------- Variables ---------------------------------------------------------
'-' '---------------------------------------------------------------------------
'-' 
'-' ' constants
'-' 
'-' hp long 0
	byte	$00, $00, $00, $00
'-' lp long 0
	byte	$00, $00, $00, $00
'-' bp long 0
	byte	$00, $00, $00, $00
'-' a20000000   long $10000000
	byte	$00, $00, $00, $10
'-' a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
	byte	$00, $00, $00, $11
'-' 
'-' ' Time variables
'-' 
'-' time0       long 0    ' Global sample computing time
	byte	$00, $00, $00, $00
'-' time1       long 1    ' Local channels time
	byte	$01, $00, $00, $00
'-' time2       long 2
	byte	$02, $00, $00, $00
'-' time3       long 3
	byte	$03, $00, $00, $00
'-' time4       long 4
	byte	$04, $00, $00, $00
'-' time5       long 5
	byte	$05, $00, $00, $00
'-' time6       long 6
	byte	$06, $00, $00, $00
'-' time7       long 7
	byte	$07, $00, $00, $00
'-' time8       long 8
	byte	$08, $00, $00, $00
'-' 
'-' 
'-' 
'-' newsample long 0
	byte	$00, $00, $00, $00
'-' '
'-' t1 long 0
	byte	$00, $00, $00, $00
'-' t2 long 0
	byte	$00, $00, $00, $00
'-' '
'-' nrsample long 0
	byte	$00, $00, $00, $00
'-' nlsample long 0
	byte	$00, $00, $00, $00
'-' '
'-' channeladd long 0
	byte	$00, $00, $00, $00
'-' 
'-' 
'-' front       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' temporary variables 
'-' '
'-' qq          long 0
	byte	$00, $00, $00, $00
'-' spl         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' circular buffer in LUT
'-' 
'-' 
'-' '
'-' 
'-' ' Interrupt ISR variables
'-' 
'-' 
'-' lsample     long 0
	byte	$00, $00, $00, $00
'-' rsample     long 0
	byte	$00, $00, $00, $00
'-' lsnext      long 0
	byte	$00, $00, $00, $00
'-' rsnext      long 0 
	byte	$00, $00, $00, $00
'-' 
'-' 
'-' pointer0    long 0
	byte	$00, $00, $00, $00
'-' sample0     long 0
	byte	$00, $00, $00, $00
'-' sstart0     long 0     ' start pointer and type at bit 31
	byte	$00, $00, $00, $00
'-' lstart0     long 0
	byte	$00, $00, $00, $00
'-' lend0       long 0
	byte	$00, $00, $00, $00
'-' volpan0     long 0
	byte	$00, $00, $00, $00
'-' freqskip0   long 0
	byte	$00, $00, $00, $00
'-' dummy0      long 0
	byte	$00, $00, $00, $00
'-' 
'-' afreq0      long 0
	byte	$00, $00, $00, $00
'-' askip0      long 0
	byte	$00, $00, $00, $00
'-' avol0       long 0
	byte	$00, $00, $00, $00
'-' apan0       long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldt0       long $FFFFFFFF    'Temporary time variables
	byte	$ff, $ff, $ff, $ff
'-' cn          long 0
	byte	$00, $00, $00, $00
'-' ct          long 0
	byte	$00, $00, $00, $00
'-' dt0         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Samples
'-' ls0         long 0
	byte	$00, $00, $00, $00
'-' rs0         long 0
	byte	$00, $00, $00, $00
'-' channel     long 0
	byte	$00, $00, $00, $00
'-' ls          long 0    ' Global sample variable
	byte	$00, $00, $00, $00
'-' rs          long 0
	byte	$00, $00, $00, $00
'-' 
'-' ls1         long 0    ' Channel samples
	byte	$00, $00, $00, $00
'-' ls2         long 0
	byte	$00, $00, $00, $00
'-' ls3         long 0
	byte	$00, $00, $00, $00
'-' ls4         long 0
	byte	$00, $00, $00, $00
'-' ls5         long 0
	byte	$00, $00, $00, $00
'-' ls6         long 0
	byte	$00, $00, $00, $00
'-' ls7         long 0
	byte	$00, $00, $00, $00
'-' ls8         long 0
	byte	$00, $00, $00, $00
'-' rs1         long 0
	byte	$00, $00, $00, $00
'-' rs2         long 0
	byte	$00, $00, $00, $00
'-' rs3         long 0
	byte	$00, $00, $00, $00
'-' rs4         long 0
	byte	$00, $00, $00, $00
'-' rs5         long 0
	byte	$00, $00, $00, $00
'-' rs6         long 0
	byte	$00, $00, $00, $00
'-' rs7         long 0
	byte	$00, $00, $00, $00
'-' rs8         long 0
	byte	$00, $00, $00, $00
'-' 
'-' dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
	byte	$44, $00, $17, $00
'-' 
'-' null  			long 	0,0           ' for channel reset
	byte	$00, $00, $00, $00, $00, $00, $00, $00
'-' sinewave 		file 	"sinus.s2"    ' for testing
	byte	$73, $32, $00, $04, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[20]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@__system__dat_ + 516
	long	@@@__system__dat_ + 524
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 532
	long	@@@__system__dat_ + 540
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 548
	long	@@@__system__dat_ + 556
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 564
	long	@@@__system__dat_ + 572
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 580
	long	@@@__system__dat_ + 588
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 596
	long	@@@__system__dat_ + 604
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0179
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0180
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0179
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0180
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0179
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0180
__heap_base
	long	0[1026]
objmem
	long	0[1162]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
_var09
	res	1
_var10
	res	1
_var11
	res	1
_var12
	res	1
_var13
	res	1
_var14
	res	1
_var15
	res	1
_var16
	res	1
_var17
	res	1
_var18
	res	1
_var19
	res	1
_var20
	res	1
_var21
	res	1
_var22
	res	1
_var23
	res	1
_var24
	res	1
_var25
	res	1
_var26
	res	1
_var27
	res	1
_var28
	res	1
_var29
	res	1
_var30
	res	1
_var31
	res	1
_var32
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
arg06
	res	1
arg07
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
local22
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
