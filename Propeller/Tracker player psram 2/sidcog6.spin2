
'----------------  This is temporary experimental version of SIDCog for use in Prop2Play ---------------------------------------
'---------------- 20220303 pik33@o2.pl -----------------------------------------------------------------------------------------

'################################################################################################################################
'#                             SIDcog - SID/MOS8580 emulator v1.4  (C) 2020 Johannes Ahlebrand                                  #                                                            
'################################################################################################################################
'#                                    TERMS OF USE: Parallax Object Exchange License                                            #                                                            
'################################################################################################################################

CON
_clkfreq=354_689_500

CON  PAL = 985248.0, NTSC = 1022727.0, MAXF = 1031000.0, TRIANGLE = 16, SAW = 32, SQUARE = 64, NOISE = 128   

  L_PIN = 14
  R_PIN = 15

  SYSTEM_CLOCK         = 354_689_500
  C64_CLOCK_FREQ       = PAL
  '                                           ___ 
  RESONANCE_OFFSET     = 7'                     |
  RESONANCE_FACTOR     = 5'                     |
  'CUTOFF_LIMIT        = 1100'                  |
  LP_MAX_CUTOFF        = 14'                    | Don't alter these constants unless you know what you are doing! 
  BP_MAX_CUTOFF        = 12'                    |
  FILTER_OFFSET        = 16'                    | 32
  START_LOG_LEVEL      = $5d5d5d5d'             |
  DECAY_DIVIDE_REF     = $6C6C6C6C'             |   
  ENV_CAL_FACTOR       = 545014038.181330/16'    | ENV_CAL_FACTOR = (MaxUint32  / SIDcogSampleFreq) / (1 / SidADSR_1secRomValue)   was 8
  NOISE_ADD            = %1010_1010_101<<23'    | ENV_CAL_FACTOR = (4294967295 / 30789           ) / (1 / 3907                ) = 545014038,181330
  NOISE_TAP            = %100001 << 8'       ___|
  DAC_MODE             = %00010_0 ' DAC 16-bit dither, noise
  DIR_MODE             = %01      ' Output enabled, overrides DIR
  INIT_8BIT_DAC_VALUE  = 128
  ANALOG_OUT_MODE      = %10111 '  75 ohm, 2.0V DAC mode
  SMARTPIN_DAC_MODE    = (ANALOG_OUT_MODE << 16) | (INIT_8BIT_DAC_VALUE << 8) | (DIR_MODE << 6) | DAC_MODE
  SAMPLE_PERIOD        = 684 'clocks between samples 



var
long combinedptr
long SIDSample
long regs[30]
byte oldregs[28]

pub start():cog

combinedptr:=@cv2
sidsample:=@SIDSample
cog:=coginit(16,@SIDEMU,@combinedptr )
return cog

dat
cv2 file "cv2.bin"



DAT org
'----------------------------------------------------------------------------------------------------------------------
'                                          Assembly SID emulator                      
'----------------------------------------------------------------------------------------------------------------------
SIDEMU        wrpin   smartConfigAudioDAC, #L_PIN   addpins 1        ' Config smartpin DAC mode on left pin
              wxpin   samplePeriod, #L_PIN  addpins 1                ' Sample period for left audio channel
              dirh    #L_PIN       addpins 1                         ' Enable smartpin DAC mode on left pin
              setse1  #%001_000000 | L_PIN                  ' Event triggered every new sample period (when "left in pin rises")
              rdlong  combTableAddr,ptra
              setq2   #256
              rdlong   0, combTableAddr   
              add ptra,#8

'----------------------------------------------------------------------------------------------------------------------
' Read all SID-registers from hub memory and convert
' them to more convenient representations.
'----------------------------------------------------------------------------------------------------------------------
getRegisters  
              sub cnt2,cnt1
              wrlong cnt2,#0
	      getct cnt1

              setq      #28                             ' Number of longs, minus 1, to read
 '             rdlong    sidRegsCogCopy, ptra                 ' Read 6 longs to cog address
              rdlong    frequency1, ptra                 ' Read 6 longs to cog address
         '    jmp #p999
                  

              

'-----------------------------------------------------------
              test      controlRegister1, #1            wc
              cmp       envelopeState1, #2              wz
 if_z_and_c   mov       envelopeState1, #0
 if_nz_and_nc mov       envelopeState1, #2

'----------------------------------------------------------- 
              test      controlRegister2, #1            wc
              cmp       envelopeState2, #2              wz
 if_z_and_c   mov       envelopeState2, #0
 if_nz_and_nc mov       envelopeState2, #2           
'
'-----------------------------------------------------------
              test      controlRegister3, #1            wc
              cmp       envelopeState3, #2              wz
 if_z_and_c   mov       envelopeState3, #0
 if_nz_and_nc mov       envelopeState3, #2



'----------------------------------------------------------------------------------------------------------------------
' Calculate sid samples channel 1 - 3 and store in out1 - out3 
'----------------------------------------------------------------------------------------------------------------------
'===========================================================
'    Increment phase accumulator 1 - 3 and handle syncing
'===========================================================
              add      phaseAccumulator1, frequency1    wc ' Add frequency value to phase accumulator 1
  if_nc       andn     controlRegister2, #2
              test     controlRegister2, #10            wz ' Sync oscilator 2 to oscillator 1 if sync = on 
  if_nz       mov      phaseAccumulator2, #0               ' Or reset oscilator 2 when bit 4 of control register is 1
'-----------------------------------------------------------      
              add      phaseAccumulator2, frequency2    wc
  if_nc       andn     controlRegister3, #2
              test     controlRegister3, #10            wz ' Sync oscilator 3 to oscillator 2 if sync = on 
  if_nz       mov      phaseAccumulator3, #0               ' Or reset oscilator 3 when bit 4 of control register is 1
'-----------------------------------------------------------
              add      phaseAccumulator3, frequency3    wc
  if_nc       andn     controlRegister1, #2
              test     controlRegister1, #10            wz ' Sync oscilator 1 to oscillator 3 if sync = on 
  if_nz       mov      phaseAccumulator1, #0               ' Or reset oscilator 1 when bit 4 of control register is 1

'===========================================================
'            Waveform shaping channel 1 -> arg1
'===========================================================
Saw1          cmp      selectedWaveform1, #2            wz
              mov      arg1, phaseAccumulator1
  if_z        jmp      #Envelope1
'-----------------------------------------------------------
Triangle1     cmp      selectedWaveform1, #1            wcz
  if_nz       jmp      #Square1
              shl      arg1, #1                         wc
  if_c        xor      arg1, mask32bit
              test     controlRegister1, #4             wz '|
  if_nz       test     phaseAccumulator3, val31bit      wz '| These 3 lines handles ring modulation
  if_nz       xor      arg1, mask32bit                     '|
              jmp      #Envelope1
'-----------------------------------------------------------
Square1       cmp      selectedWaveform1, #4            wz
  if_z        sub      pulseWidth1, phaseAccumulator1   wc
  if_z        muxc     arg1, mask32bit
  if_z        jmp      #Envelope1
'-----------------------------------------------------------
Noise1        cmp      selectedWaveform1, #8            wz
  if_nz       jmp      #Combined1
              and      arg1, mask28bit
              sub      arg1, frequency1                 wc
              mov      arg1, noiseValue1
  if_c        getrnd   noiseValue1
              jmp      #Envelope1
'-----------------------------------------------------------                
Combined1     mov      sv1, selectedWaveform1
              sub      sv1, #4
              fges     sv1, #0     
              shl      sv1, #3
              shr      arg1,#24
              rdlut    arg1,arg1
              shr      arg1,sv1
              shl      arg1, #24  
              


'===========================================================
'            Envelope shaping channel 1 -> arg2           
'===========================================================  
Envelope1     mov      tempValue, decayDivideRef
              shr      tempValue, decayDivide1
              cmp      envelopeLevel1, tempValue        wc
              tjnz     envelopeState1, #Env_Dec1
'----------------------------------------------------------- 
Env_At1 if_nc cmpsub   decayDivide1, #1    
              add      envelopeLevel1, attack1          wc
  if_c        mov      envelopeLevel1, mask32bit         
  if_c        mov      envelopeState1, #1
              jmp      #Amplitude1
'----------------------------------------------------------- 
Env_Dec1 if_c add      decayDivide1, #1
              cmp      startLogLevel, envelopeLevel1    wc 
              cmp      envelopeState1, #1               wz
  if_nz       jmp      #Rel1
  if_nc       shr      decay1, decayDivide1  
              sub      envelopeLevel1, decay1
              fge      envelopeLevel1, sustain1         wc
              jmp      #Amplitude1
'----------------------------------------------------------- 
Rel1 if_nc    shr      release1, decayDivide1  
              cmpsub   envelopeLevel1, release1
'===========================================================
'Calculate sample out1 = arg1 * arg2 (waveform * amplitude)    
'=========================================================== 
Amplitude1    shr      arg1, #14
              sub      arg1, val15bit             
              mov      arg2, envelopeLevel1     
              shr      arg2, #24
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
'              add      r1, arg1
'              call     #multiply
              mov      out1, r1
'===========================================================
'            Waveform shaping channel 2 -> arg1                           
'===========================================================
Saw2          cmp      selectedWaveform2, #2            wz
              mov      arg1, phaseAccumulator2
  if_z        jmp      #Envelope2   
'----------------------------------------------------------- 
Triangle2     cmp      selectedWaveform2, #1            wcz
  if_nz       jmp      #Square2
              shl      arg1, #1                         wc
  if_c        xor      arg1, mask32bit
              test     controlRegister2, #4             wz '|
  if_nz       test     phaseAccumulator1, val31bit      wz '| These 3 lines handles ring modulation
  if_nz       xor      arg1, mask32bit                     '|
              jmp      #Envelope2   
'-----------------------------------------------------------  
Square2       cmp      selectedWaveform2, #4            wz
  if_z        sub      pulseWidth2, phaseAccumulator2   wc ' C holds the pulse width modulated square wave  
  if_z        muxc     arg1, mask32bit              
  if_z        jmp      #Envelope2   
'----------------------------------------------------------- 
Noise2        cmp      selectedWaveform2, #8            wz
  if_nz       jmp      #Combined2
              and      arg1, mask28bit
              sub      arg1, frequency2                 wc
              mov      arg1, noiseValue2
  if_c        getrnd   noiseValue2
              jmp      #Envelope2
'-----------------------------------------------------------                
Combined2     mov      sv2,selectedWaveform2
              sub      sv2, #4
              fges     sv2, #0     
              shl      sv2, #3
              shr      arg1,#24
              rdlut    arg1,arg1
              shr      arg1, sv2
              debug(udec(selectedWaveform2))
              shl      arg1, #24                         

'===========================================================
'            Envelope shaping channel 2 -> arg2           
'===========================================================
Envelope2     mov      tempValue, decayDivideRef
              shr      tempValue, decayDivide2
              cmp      envelopeLevel2, tempValue        wc
              tjnz     envelopeState2, #Env_Dec2
'----------------------------------------------------------- 
Env_At2 if_nc cmpsub   decayDivide2, #1                    
              add      envelopeLevel2, attack2          wc
  if_c        mov      envelopeLevel2, mask32bit         
  if_c        mov      envelopeState2, #1
              jmp      #Amplitude2
'----------------------------------------------------------- 
Env_Dec2 if_c add      decayDivide2, #1    
              cmp      startLogLevel,envelopeLevel2     wc   
              cmp      envelopeState2, #1               wz
  if_nz       jmp      #Rel2 
  if_nc       shr      decay2, decayDivide2  
              sub      envelopeLevel2, decay2
              fge      envelopeLevel2, sustain2         wc
              jmp      #Amplitude2
'-----------------------------------------------------------   
Rel2 if_nc    shr      release2, decayDivide2  
              cmpsub   envelopeLevel2, release2
'===========================================================
'Calculate sample out2 = arg1 * arg2 (waveform * amplitude)     
'===========================================================
Amplitude2    shr      arg1, #14
              sub      arg1, val17bit
              mov      arg2, envelopeLevel2
              shr      arg2, #24
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
              add      r1, arg1
 '             call     #multiply
              mov      out2, r1
'===========================================================            
'            Waveform shaping channel 3 -> arg1                           
'===========================================================
Saw3          cmp      selectedWaveform3, #2            wz
              mov      arg1, phaseAccumulator3
  if_z        jmp      #Envelope3   
'----------------------------------------------------------- 
Triangle3     cmp      selectedWaveform3, #1            wcz
  if_nz       jmp      #Square3
              shl      arg1, #1                         wc
  if_c        xor      arg1, mask32bit
              test     controlRegister3, #4             wz '|
  if_nz       test     phaseAccumulator2, val31bit      wz '| These 3 lines handles ring modulation 
  if_nz       xor      arg1, mask32bit                     '|
              jmp      #Envelope3   
'-----------------------------------------------------------  
Square3       cmp      selectedWaveform3, #4            wz
  if_z        sub      pulseWidth3, phaseAccumulator3   wc ' C holds the pulse width modulated square wave  
  if_z        muxc     arg1, mask32bit                   
  if_z        jmp      #Envelope3 
'----------------------------------------------------------- 
Noise3        cmp      selectedWaveform3, #8            wz 
  if_nz       jmp      #Combined3  
              and      arg1, mask28bit
              sub      arg1, frequency3                 wc
              mov      arg1, noiseValue3
  if_c        getrnd   noiseValue3
              jmp      #Envelope3
'-----------------------------------------------------------
Combined3     mov      sv3,selectedWaveform3
              sub      sv3, #4
              fges     sv3, #0     
              shl      sv3, #3
              shr      arg1,#24
              rdlut    arg1,arg1
              shr      arg1,sv3
              shl      arg1, #24  
              
              
 
'===========================================================
'            Envelope shaping channel 3 -> arg2           
'===========================================================
Envelope3     mov      tempValue, decayDivideRef           
              shr      tempValue, decayDivide3             
              cmp      envelopeLevel3, tempValue        wc 
              tjnz     envelopeState3, #Env_Dec3
'----------------------------------------------------------- 
Env_At3 if_nc cmpsub   decayDivide3, #1                    
              add      envelopeLevel3, attack3          wc 
  if_c        mov      envelopeLevel3, mask32bit           
  if_c        mov      envelopeState3, #1                  
              jmp      #Amplitude3                         
'----------------------------------------------------------- 
Env_Dec3 if_c add      decayDivide3, #1                    
              cmp      startLogLevel, envelopeLevel3    wc   
              cmp      envelopeState3, #1               wz 
  if_nz       jmp      #Rel3                       
  if_nc       shr      decay3, decayDivide3                
              sub      envelopeLevel3, decay3              
              fge      envelopeLevel3, sustain3         wc
              jmp      #Amplitude3                         
'-----------------------------------------------------------  
Rel3 if_nc    shr      release3, decayDivide3              
              cmpsub   envelopeLevel3, release3            
'===========================================================
'Calculate sample out3 = arg1 * arg2 (waveform * amplitude)     
'===========================================================
Amplitude3    shr      arg1, #14
              sub      arg1, val17bit            
              mov      arg2, envelopeLevel3
              shr      arg2, #24
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
              add      r1, arg1 
 
   '           call     #multiply
              mov      out3, r1

'===========================================================
'              Handle multi-mode filtering 
'===========================================================
filter        mov      ordinaryOutput, #0                  '|
              mov      highPassFilter, #0                  '|
              test     filterControl, #1                wc '|
  if_c        add      highPassFilter, out1                '|
  if_nc       add      ordinaryOutput, out1                '|
              test     filterControl, #2                wc '| Route channels trough the filter
  if_c        add      highPassFilter, out2                '| or bypass them
  if_nc       add      ordinaryOutput, out2                '|  
              test     filterControl, #4                wc '|
  if_c        add      highPassFilter, out3                '|
  if_nc       add      ordinaryOutput, out3                '|  
'-----------------------------------------------------------
              mov      arg2, filterResonance               '|
              add      arg2, #RESONANCE_OFFSET             '|
              mov      arg1, bandPassFilter                '|  
              sar      arg1, #RESONANCE_FACTOR             '|
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
              add      r1, arg1
'              call     #multiply                           '| High pass filter
              sub      highPassFilter, bandPassFilter      '|
              add      highPassFilter, r1                  '| 
              sub      highPassFilter, lowPassFilter       '|
'----------------------------------------------------------- 
              mov      arg1, highPassFilter                '|
              sar      arg1, #BP_MAX_CUTOFF                '|
              mov      arg2, filterCutoff                  '| Band pass filter
              'fle      arg2, maxCutoff                     '|
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
              add      r1, arg1
 '             call     #multiply                           '|
              add      bandPassFilter, r1                  '|
'----------------------------------------------------------- 
              mov      arg1, bandPassFilter                '| 
              sar      arg1, #LP_MAX_CUTOFF                '| 
              mov      arg2, filterCutoff                  '| Low pass filter 
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
              add      r1, arg1 
 '             call     #multiply                           '| 
              add      lowPassFilter, r1                   '| 
'-----------------------------------------------------------  
              mov      filterOutput, #0                    '|
              test     filterMode, #1            wc        '|
  if_c        add      filterOutput, lowPassFilter         '|
              test     filterMode, #2            wc        '| Enable/Disable
  if_c        add      filterOutput, bandPassFilter        '| Low/Band/High pass filtering
              test     filterMode, #4            wc        '|
  if_c        add      filterOutput, highPassFilter        '|

'---------------------------------------------------------------------------------------------------------------------- 
'      Mix channels and update FRQA/FRQB PWM-values
'----------------------------------------------------------------------------------------------------------------------
mixer         mov      arg1, filterOutput
              add      arg1, ordinaryOutput
'-----------------------------------------------------------
              fles     arg1, clipLevelHigh                 '|
              fges     arg1, clipLevelLow                  '|
              mov      arg2, volume
              getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
              add      r1, arg1
        '      call     #multiply                           '| 
'-----------------------------------------------------------
              add      r1, val31bit                        '  DC offset
'-----------------------------------------------------------  
              shr      r1, #16 
              wypin    r1, #L_PIN                          ' Output sample on left channel
              wypin    r1, #R_PIN                          ' Output sample on right channel
              getct cnt2
              waitse1
'-----------------------------------------------------------  
              mov      tempValue, ptra
              add      tempValue, #32
              wrlong   r1, tempValue                       '| Write the sample to hub ram
              jmp      #getRegisters

'---------------------------------------------------------------------------------------------------------------------- 
'    Multiplication     r1(I32) = arg1(I32) * arg2(I32)
'----------------------------------------------------------------------------------------------------------------------
multiply      getword  r1,arg1,#1
              mul      r1, arg2
              shl      r1, #16
              mul      arg1, arg2
    _ret_     add      r1, arg1

'---------------------------------------------------------------------------------------------------------------------- 
'    Variables, tables, masks and reference values
'----------------------------------------------------------------------------------------------------------------------
ADSRTable           long trunc(ENV_CAL_FACTOR * (1.0 / 9.0    )) '2   ms   3784819
                    long trunc(ENV_CAL_FACTOR * (1.0 / 32.0   )) '8   ms    1064480    
                    long trunc(ENV_CAL_FACTOR * (1.0 / 63.0   )) '16  ms     540688
                    long trunc(ENV_CAL_FACTOR * (1.0 / 95.0   )) '24  ms      358561  
                    long trunc(ENV_CAL_FACTOR * (1.0 / 149.0  )) '38  ms     228613  
                    long trunc(ENV_CAL_FACTOR * (1.0 / 220.0  )) '56  ms        154833   
                    long trunc(ENV_CAL_FACTOR * (1.0 / 267.0  )) '68  ms         127578
                    long trunc(ENV_CAL_FACTOR * (1.0 / 313.0  )) '80  ms      108828
                    long trunc(ENV_CAL_FACTOR * (1.0 / 392.0  )) '100 ms        86896    
                    long trunc(ENV_CAL_FACTOR * (1.0 / 977.0  )) '250 ms      34865
                    long trunc(ENV_CAL_FACTOR * (1.0 / 1954.0 )) '500 ms     17432   
                    long trunc(ENV_CAL_FACTOR * (1.0 / 3126.0 )) '800 ms      10896    
                    long trunc(ENV_CAL_FACTOR * (1.0 / 3907.0 )) '1   s    8718   
                    long trunc(ENV_CAL_FACTOR * (1.0 / 11720.0)) '3   s     2906    
                    long trunc(ENV_CAL_FACTOR * (1.0 / 19532.0)) '5   s      1744    
                    long trunc(ENV_CAL_FACTOR * (1.0 / 31251.0)) '8   s      1090        

'Masks and reference values
startLogLevel       long START_LOG_LEVEL
sustainAdd          long $0f000000
mask32bit           long $ffffffff
mask28bit           long $fffffff
val31bit            long $80000000
val17bit            long $20000
val15bit            long $8000
clipLevelHigh       long $8000000
clipLevelLow        long-$8000000
filterOffset        long FILTER_OFFSET
decayDivideRef      long DECAY_DIVIDE_REF
'maxCutoff           long CUTOFF_LIMIT

'par                 long @ch1_frequencyLo
samplePeriod        long SAMPLE_PERIOD                 'clocks between samples ( ~31.250 khz )
smartConfigAudioDAC long SMARTPIN_DAC_MODE

'Setup and subroutine parameters
arg1                long 1
arg2                long 1
r1                  long 1

'Sid variables
noiseValue1         long $ffffff
noiseValue2         long $ffffff
noiseValue3         long $ffffff
decayDivide1        long 0
decayDivide2        long 0
decayDivide3        long 0
sidRegsCogCopy      long 0,0,0,0,0,0,0



combTableAddr       	long 0

frequency1 		long 0
pulseWidth1		long 0
selectedWaveform1	long 0
controlRegister1 	long 0
attack1			long 0
decay1 			long 0
sustain1		long 0
release1 		long 0

frequency2 		long 0
pulseWidth2		long 0
selectedWaveform2	long 0
controlRegister2 	long 0
attack2			long 0
decay2 			long 0
sustain2		long 0
release2 		long 0

frequency3 		long 0
pulseWidth3		long 0
selectedWaveform3	long 0
controlRegister3 	long 0
attack3			long 0
decay3 			long 0
sustain3		long 0
release3 		long 0



filterCutoff long 0
filterControl long 0
filterResonance long 0

filterMode long 0
volume long 0
 
sv1 long 0
sv2 long 0
sv3 long 0    
envelopeLevel1      res  1 
envelopeLevel2      res  1 
envelopeLevel3      res  1 

phaseAccumulator1   res  1
phaseAccumulator2   res  1
phaseAccumulator3   res  1
  


envelopeState1      res  1
envelopeState2      res  1
envelopeState3      res  1

out1                res  1
out2                res  1
out3                res  1

highPassFilter      res  1
bandPassFilter      res  1 
lowPassFilter       res  1

filterOutput        res  1

ordinaryOutput      res  1
cnt1 long 0
cnt2 long 0
'Working variables
tempValue           res  1

 
  
         
                                        
{{


DAT orgh            $1400
  ch1_frequencyLo        byte 0    
  ch1_frequencyHi        byte 0    
  ch1_pulseWidthLo       byte 0    
  ch1_pulseWidthHi       byte 0    
  ch1_controlRegister    byte 0    
  ch1_attackDecay        byte 0    
  ch1_sustainRelease     byte 0    
  ch2_frequencyLo        byte 0    
  ch2_frequencyHi        byte 0    
  ch2_pulseWidthLo       byte 0    
  ch2_pulseWidthHi       byte 0    
  ch2_controlRegister    byte 0    
  ch2_attackDecay        byte 0    
  ch2_sustainRelease     byte 0
  ch3_frequencyLo        byte 0
  ch3_frequencyHi        byte 0
  ch3_pulseWidthLo       byte 0
  ch3_pulseWidthHi       byte 0
  ch3_controlRegister    byte 0
  ch3_attackDecay        byte 0
  ch3_sustainRelease     byte 0
  Filter_cutoffLo        byte 0 
  Filter_cutoffHi        byte 0
  Filter_reso_routing    byte 0
  Filter_mode_volume     byte 0
  SIDSample              long 0
}}
