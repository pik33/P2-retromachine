00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/hng030rm.p2asm"
00000                 | ' 
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' _clkfreq        = 320_000_000    'start safe, hubset will do the rest. The clock will be changed to:
00000                 | 	_clkfreq = 320000000
00000                 | ' 
00000                 | ' ' 354_689_500   200x Atari 8-bit PAL,  50x Amiga PAL  - real settings: 49,869-> 354_693_878  - 1.0000123 - mode 0 and 192
00000                 | ' ' 357_954_500   200x Atari 8-bit NTSC, 50x Amiga NTSC - real settings: 49,877-> 357_959_184  - 1.0000131 - mode 256
00000                 | ' 
00000                 | ' ' 319_220_550   180x PAL  - real settings: 51,814-> 319_215_686 - 0.9999848 - mode 64
00000                 | ' ' 322_159_050   180x NTSC - real settings: 37,596-> 322_162_162 - 1.0000097 - mode 320 and 448
00000                 | ' 
00000                 | ' ' 283_751_600   160x PAL  - real settings: 64,908-> 283_750_000 - 0.9999944 - mode 128
00000                 | ' ' 286_363_600   160x NTSC - real settings: 22,315-> 286_363_636 - 1.0000001 - mode 384
00000                 | ' 
00000                 | ' ''--------- VGA DOS color definition constants
00000                 | ' 
00000                 | ' c_black         =    0
00000                 | 	c_black = 0
00000                 | ' c_blue          =  117
00000                 | 	c_blue = 117
00000                 | ' c_green         =  199
00000                 | 	c_green = 199
00000                 | ' c_cyan          =  149
00000                 | 	c_cyan = 149
00000                 | ' c_red           =   39
00000                 | 	c_red = 39
00000                 | ' c_magenta       =   71
00000                 | 	c_magenta = 71
00000                 | ' c_brown         =  246
00000                 | 	c_brown = 246
00000                 | ' c_lightgray     =   10
00000                 | 	c_lightgray = 10
00000                 | ' c_darkgray      =    5
00000                 | 	c_darkgray = 5
00000                 | ' c_lightblue     =  121
00000                 | 	c_lightblue = 121
00000                 | ' c_lightgreen    =  203
00000                 | 	c_lightgreen = 203
00000                 | ' c_lightcyan     =  155
00000                 | 	c_lightcyan = 155
00000                 | ' c_lightred      =   43
00000                 | 	c_lightred = 43
00000                 | ' c_lightmagenta  =   75
00000                 | 	c_lightmagenta = 75
00000                 | ' c_yellow        =  234
00000                 | 	c_yellow = 234
00000                 | ' c_white         =   15
00000                 | 	c_white = 15
00000                 | ' 
00000                 | ' timingsxxt      =  $70810000
00000                 | 	timingsxxt = 1887502336
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 CA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 E4 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 07 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16781304
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 07 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16781307
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 68 89 89 FF 
00440 00f 14 00 6C FC | 	wrlong	##320000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 A0 07 A0 FD | 	call	#_dummy
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 0E 62 FD | 	cogid	arg01
00614 084 03 0E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 BB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 CB 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 0F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 11 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 13 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 15 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D CA 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 12 56 F0 |         shr	arg03, #1 wc
00688 0a1 07 11 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 0E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 10 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 12 56 F0 |         shr	arg03, #1 wc
00698 0a5 07 11 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 0E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 08 11 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 07 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 12 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 09 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 10 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 19 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 19 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 1F 3D 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 3E 62 FD |        getqx   muldivb_
00740 0cf 19 3C 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 1E 3D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 1F 3F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 1E 3D 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 1F 3F 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | __heap_ptr
0076c 0da A4 5B 00 00 | 	long	@__heap_base
00770 0db             | itmp1_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | itmp2_
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | objptr
00778 0dd AC 6B 00 00 | 	long	@objmem
0077c 0de             | ptr___system__dat__
0077c 0de 8C 5B 00 00 | 	long	@__system__dat_
00780 0df             | ptr__dat__
00780 0df 28 37 00 00 | 	long	@_dat_
00784 0e0             | ptr__putpixel1_
00784 0e0 64 18 00 00 | 	long	@_putpixel1
00788 0e1             | ptr__putpixel2_
00788 0e1 50 19 00 00 | 	long	@_putpixel2
0078c 0e2             | ptr__putpixel4_
0078c 0e2 3C 1A 00 00 | 	long	@_putpixel4
00790 0e3             | ptr__putpixel8_
00790 0e3 28 1B 00 00 | 	long	@_putpixel8
00794 0e4             | ptr_stackspace_
00794 0e4 98 6C 00 00 | 	long	@stackspace
00798 0e5             | result1
00798 0e5 00 00 00 00 | 	long	0
0079c 0e6             | result2
0079c 0e6 00 00 00 00 | 	long	0
007a0 0e7             | COG_BSS_START
007a0 0e7             | 	fit	480
007a0                 | 	orgh
007a0                 | hubentry
007a0                 | 
007a0                 | ' 
007a0                 | ' 
007a0                 | ' ''--------- timings
007a0                 | ' ' 0  m_bs        - before sync,             16      80
007a0                 | ' ' 1  m_sn        - sync                     80     160
007a0                 | ' ' 2  m_bv        - before visible           20      84
007a0                 | ' ' 3  m_vi        - visible                1024     816
007a0                 | ' ' 4  m_border    - left and right borders  112       8
007a0                 | ' ' 5  m_lut1      - pixels per char           8       8
007a0                 | ' ' 6  i_vborder   - up and down border       48       8
007a0                 | ' ' 7  i_upporch   - up non visible           16       8
007a0                 | ' ' 8  i_vsync     - vsync                    16      12
007a0                 | ' ' 9  i_downporch - down non visible         16       8
007a0                 | ' '10  mode #
007a0                 | ' '11  cpl         - character per line
007a0                 | ' '12  scanlines #
007a0                 | ' '13  clock
007a0                 | ' '14  hubset value for clock settings
007a0                 | ' 
007a0                 | ' 
007a0                 | ' '*************************************************************************
007a0                 | ' '                                                                        *
007a0                 | ' '  A dummy start function if someone runs this driver alone              *
007a0                 | ' '                                                                        *
007a0                 | ' '*************************************************************************
007a0                 | ' 
007a0                 | ' pub dummy()|i,x,y,ntsc,bbb,ccc,zzx,zzy,amode,x1,x2,y1,y2,r
007a0                 | _dummy
007a0     08 5A 05 F6 | 	mov	COUNT_, #8
007a4     B0 00 A0 FD | 	call	#pushregs_
007a8                 | ' '' this is not a main program.
007a8                 | ' 
007a8                 | ' start(512+64+48,hdmi_base)
007a8     01 00 00 FF 
007ac     70 0E 06 F6 | 	mov	arg01, ##624
007b0     00 10 06 F6 | 	mov	arg02, #0
007b4     B8 20 B0 FD | 	call	#_start
007b8                 | ' 'start(512+256+64+32,hdmi_base)
007b8                 | ' 
007b8                 | ' cls(15,1)
007b8     0F 0E 06 F6 | 	mov	arg01, #15
007bc     01 10 06 F6 | 	mov	arg02, #1
007c0     80 14 B0 FD | 	call	#_cls
007c4                 | ' setfontfamily(0)
007c4                 | ' 
007c4                 | ' font_family:=afontnum
007c4     C8 BA 05 F1 | 	add	objptr, #200
007c8     DD 00 68 FC | 	wrlong	#0, objptr
007cc     C8 BA 85 F1 | 	sub	objptr, #200
007d0                 | ' waitvbl(100)
007d0     64 0E 06 F6 | 	mov	arg01, #100
007d4     D4 13 B0 FD | 	call	#_waitvbl
007d8                 | ' outtextxycg(0,0,inttostr(long[0]),11,1)
007d8     00 18 06 F6 | 	mov	local01, #0
007dc     00 1A 06 F6 | 	mov	local02, #0
007e0     00 0E 06 FB | 	rdlong	arg01, #0
007e4     98 15 B0 FD | 	call	#_inttostr
007e8     E5 12 02 F6 | 	mov	arg03, result1
007ec     0C 0F 02 F6 | 	mov	arg01, local01
007f0     0D 11 02 F6 | 	mov	arg02, local02
007f4     0B 14 06 F6 | 	mov	arg04, #11
007f8     01 16 06 F6 | 	mov	arg05, #1
007fc     C4 0F B0 FD | 	call	#_outtextxycg
00800                 | ' waitvbl(300)
00800     2C 0F 06 F6 | 	mov	arg01, #300
00804     A4 13 B0 FD | 	call	#_waitvbl
00808                 | ' 'maketestdl(512+48)
00808                 | ' waitvbl(1200)
00808     02 00 00 FF 
0080c     B0 0E 06 F6 | 	mov	arg01, ##1200
00810     98 13 B0 FD | 	call	#_waitvbl
00814                 | ' repeat i from 0 to 10000
00814     00 1C 06 F6 | 	mov	local03, #0
00818                 | LR__0001
00818                 | '   ccc:=getrnd()&255
00818     1B 1E 62 FD | 	getrnd	local04
0081c     FF 1E 06 F5 | 	and	local04, #255
00820                 | '   x1:=getrnd()+//896
00820     1B CA 61 FD | 	getrnd	result1
00824     E5 3C 02 F6 | 	mov	muldiva_, result1
00828     01 00 00 FF 
0082c     80 3F 06 F6 | 	mov	muldivb_, ##896
00830     CC 00 A0 FD | 	call	#unsdivide_
00834     1E 21 02 F6 | 	mov	local05, muldiva_
00838                 | '   x2:=getrnd()+//896
00838     1B CA 61 FD | 	getrnd	result1
0083c     E5 3C 02 F6 | 	mov	muldiva_, result1
00840     01 00 00 FF 
00844     80 3F 06 F6 | 	mov	muldivb_, ##896
00848     CC 00 A0 FD | 	call	#unsdivide_
0084c     1E 23 02 F6 | 	mov	local06, muldiva_
00850                 | '   y1:=getrnd()+//496
00850     1B CA 61 FD | 	getrnd	result1
00854     E5 3C 02 F6 | 	mov	muldiva_, result1
00858     F0 3F 06 F6 | 	mov	muldivb_, #496
0085c     CC 00 A0 FD | 	call	#unsdivide_
00860     1E 25 02 F6 | 	mov	local07, muldiva_
00864                 | '   y2:=getrnd()+//496
00864     1B CA 61 FD | 	getrnd	result1
00868     E5 3C 02 F6 | 	mov	muldiva_, result1
0086c     F0 3F 06 F6 | 	mov	muldivb_, #496
00870     CC 00 A0 FD | 	call	#unsdivide_
00874                 | ' 
00874                 | ' 
00874                 | '   line(x1,y1,x2,y2,ccc)
00874     10 0F 02 F6 | 	mov	arg01, local05
00878     12 11 02 F6 | 	mov	arg02, local07
0087c     11 13 02 F6 | 	mov	arg03, local06
00880     0F 17 02 F6 | 	mov	arg05, local04
00884     1E 15 02 F6 | 	mov	arg04, muldiva_
00888     90 0C B0 FD | 	call	#_line
0088c     01 1C 06 F1 | 	add	local03, #1
00890     13 00 00 FF 
00894     11 1D 5E F2 | 	cmps	local03, ##10001 wcz
00898     7C FF 9F CD |  if_b	jmp	#LR__0001
0089c                 | ' 
0089c                 | ' repeat i from 0 to 1000
0089c     00 1C 06 F6 | 	mov	local03, #0
008a0                 | LR__0002
008a0                 | ' 
008a0                 | '   x1:=getrnd()+//896
008a0     1B CA 61 FD | 	getrnd	result1
008a4     E5 3C 02 F6 | 	mov	muldiva_, result1
008a8     01 00 00 FF 
008ac     80 3F 06 F6 | 	mov	muldivb_, ##896
008b0     CC 00 A0 FD | 	call	#unsdivide_
008b4     1E 21 02 F6 | 	mov	local05, muldiva_
008b8                 | '   y1:=getrnd()+//496
008b8     1B CA 61 FD | 	getrnd	result1
008bc     E5 3C 02 F6 | 	mov	muldiva_, result1
008c0     F0 3F 06 F6 | 	mov	muldivb_, #496
008c4     CC 00 A0 FD | 	call	#unsdivide_
008c8     1E 25 02 F6 | 	mov	local07, muldiva_
008cc                 | '   r:=getrnd()+//100
008cc     1B CA 61 FD | 	getrnd	result1
008d0     E5 3C 02 F6 | 	mov	muldiva_, result1
008d4     64 3E 06 F6 | 	mov	muldivb_, #100
008d8     CC 00 A0 FD | 	call	#unsdivide_
008dc                 | '   ccc:=getrnd()&255
008dc     1B CA 61 FD | 	getrnd	result1
008e0     E5 14 02 F6 | 	mov	arg04, result1
008e4     FF 14 06 F5 | 	and	arg04, #255
008e8                 | '   fcircle(x1,y1,r,ccc)   
008e8     10 0F 02 F6 | 	mov	arg01, local05
008ec     12 11 02 F6 | 	mov	arg02, local07
008f0     1E 13 02 F6 | 	mov	arg03, muldiva_
008f4     F4 07 B0 FD | 	call	#_fcircle
008f8     01 1C 06 F1 | 	add	local03, #1
008fc     01 00 00 FF 
00900     E9 1D 5E F2 | 	cmps	local03, ##1001 wcz
00904     98 FF 9F CD |  if_b	jmp	#LR__0002
00908                 | ' 
00908                 | ' repeat i from 0 to 10000
00908     00 1C 06 F6 | 	mov	local03, #0
0090c                 | LR__0003
0090c                 | '   ccc:=getrnd()&255
0090c     1B 1E 62 FD | 	getrnd	local04
00910     FF 1E 06 F5 | 	and	local04, #255
00914                 | '   x1:=getrnd()+//896
00914     1B CA 61 FD | 	getrnd	result1
00918     E5 3C 02 F6 | 	mov	muldiva_, result1
0091c     01 00 00 FF 
00920     80 3F 06 F6 | 	mov	muldivb_, ##896
00924     CC 00 A0 FD | 	call	#unsdivide_
00928     1E 21 02 F6 | 	mov	local05, muldiva_
0092c                 | '   x2:=getrnd()+//896
0092c     1B CA 61 FD | 	getrnd	result1
00930     E5 3C 02 F6 | 	mov	muldiva_, result1
00934     01 00 00 FF 
00938     80 3F 06 F6 | 	mov	muldivb_, ##896
0093c     CC 00 A0 FD | 	call	#unsdivide_
00940     1E 23 02 F6 | 	mov	local06, muldiva_
00944                 | '   y1:=getrnd()+//496
00944     1B CA 61 FD | 	getrnd	result1
00948     E5 3C 02 F6 | 	mov	muldiva_, result1
0094c     F0 3F 06 F6 | 	mov	muldivb_, #496
00950     CC 00 A0 FD | 	call	#unsdivide_
00954     1E 25 02 F6 | 	mov	local07, muldiva_
00958                 | '   y2:=getrnd()+//496
00958     1B CA 61 FD | 	getrnd	result1
0095c     E5 3C 02 F6 | 	mov	muldiva_, result1
00960     F0 3F 06 F6 | 	mov	muldivb_, #496
00964     CC 00 A0 FD | 	call	#unsdivide_
00968                 | ' 
00968                 | ' 
00968                 | '   frame(x1,y1,x2,y2,ccc)
00968     10 0F 02 F6 | 	mov	arg01, local05
0096c     12 11 02 F6 | 	mov	arg02, local07
00970     11 13 02 F6 | 	mov	arg03, local06
00974     0F 17 02 F6 | 	mov	arg05, local04
00978     1E 15 02 F6 | 	mov	arg04, muldiva_
0097c     B8 0A B0 FD | 	call	#_frame
00980     01 1C 06 F1 | 	add	local03, #1
00984     13 00 00 FF 
00988     11 1D 5E F2 | 	cmps	local03, ##10001 wcz
0098c     7C FF 9F CD |  if_b	jmp	#LR__0003
00990                 | '   
00990                 | ' repeat i from 0 to 10000
00990     00 1C 06 F6 | 	mov	local03, #0
00994                 | LR__0004
00994                 | ' 
00994                 | '   x1:=getrnd()+//896
00994     1B CA 61 FD | 	getrnd	result1
00998     E5 3C 02 F6 | 	mov	muldiva_, result1
0099c     01 00 00 FF 
009a0     80 3F 06 F6 | 	mov	muldivb_, ##896
009a4     CC 00 A0 FD | 	call	#unsdivide_
009a8     1E 21 02 F6 | 	mov	local05, muldiva_
009ac                 | '   y1:=getrnd()+//496
009ac     1B CA 61 FD | 	getrnd	result1
009b0     E5 3C 02 F6 | 	mov	muldiva_, result1
009b4     F0 3F 06 F6 | 	mov	muldivb_, #496
009b8     CC 00 A0 FD | 	call	#unsdivide_
009bc     1E 25 02 F6 | 	mov	local07, muldiva_
009c0                 | '   r:=getrnd()+//100
009c0     1B CA 61 FD | 	getrnd	result1
009c4     E5 3C 02 F6 | 	mov	muldiva_, result1
009c8     64 3E 06 F6 | 	mov	muldivb_, #100
009cc     CC 00 A0 FD | 	call	#unsdivide_
009d0                 | '   ccc:=getrnd()&255
009d0     1B CA 61 FD | 	getrnd	result1
009d4     E5 14 02 F6 | 	mov	arg04, result1
009d8     FF 14 06 F5 | 	and	arg04, #255
009dc                 | '   circle(x1,y1,r,ccc) 
009dc     10 0F 02 F6 | 	mov	arg01, local05
009e0     12 11 02 F6 | 	mov	arg02, local07
009e4     1E 13 02 F6 | 	mov	arg03, muldiva_
009e8     30 08 B0 FD | 	call	#_circle
009ec     01 1C 06 F1 | 	add	local03, #1
009f0     13 00 00 FF 
009f4     11 1D 5E F2 | 	cmps	local03, ##10001 wcz
009f8     98 FF 9F CD |  if_b	jmp	#LR__0004
009fc                 | '   
009fc                 | ' repeat i from 0 to 1000
009fc     00 1C 06 F6 | 	mov	local03, #0
00a00                 | LR__0005
00a00                 | '   ccc:=getrnd()&255
00a00     1B 1E 62 FD | 	getrnd	local04
00a04     FF 1E 06 F5 | 	and	local04, #255
00a08                 | '   x1:=getrnd()+//896
00a08     1B CA 61 FD | 	getrnd	result1
00a0c     E5 3C 02 F6 | 	mov	muldiva_, result1
00a10     01 00 00 FF 
00a14     80 3F 06 F6 | 	mov	muldivb_, ##896
00a18     CC 00 A0 FD | 	call	#unsdivide_
00a1c     1E 21 02 F6 | 	mov	local05, muldiva_
00a20                 | '   x2:=getrnd()+//100
00a20     1B CA 61 FD | 	getrnd	result1
00a24     E5 3C 02 F6 | 	mov	muldiva_, result1
00a28     64 3E 06 F6 | 	mov	muldivb_, #100
00a2c     CC 00 A0 FD | 	call	#unsdivide_
00a30     1E 23 02 F6 | 	mov	local06, muldiva_
00a34                 | '   y1:=getrnd()+//496
00a34     1B CA 61 FD | 	getrnd	result1
00a38     E5 3C 02 F6 | 	mov	muldiva_, result1
00a3c     F0 3F 06 F6 | 	mov	muldivb_, #496
00a40     CC 00 A0 FD | 	call	#unsdivide_
00a44     1E 25 02 F6 | 	mov	local07, muldiva_
00a48                 | '   y2:=getrnd()+//100
00a48     1B CA 61 FD | 	getrnd	result1
00a4c     E5 3C 02 F6 | 	mov	muldiva_, result1
00a50     64 3E 06 F6 | 	mov	muldivb_, #100
00a54     CC 00 A0 FD | 	call	#unsdivide_
00a58                 | ' 
00a58                 | ' 
00a58                 | '   box(x1,y1,x1+x2,y1+y2,ccc)  
00a58     10 0F 02 F6 | 	mov	arg01, local05
00a5c     12 11 02 F6 | 	mov	arg02, local07
00a60     10 13 02 F6 | 	mov	arg03, local05
00a64     11 13 02 F1 | 	add	arg03, local06
00a68     12 15 02 F6 | 	mov	arg04, local07
00a6c     1E 15 02 F1 | 	add	arg04, muldiva_
00a70     0F 17 02 F6 | 	mov	arg05, local04
00a74     48 0A B0 FD | 	call	#_box
00a78     01 1C 06 F1 | 	add	local03, #1
00a7c     01 00 00 FF 
00a80     E9 1D 5E F2 | 	cmps	local03, ##1001 wcz
00a84     78 FF 9F CD |  if_b	jmp	#LR__0005
00a88                 | '       
00a88                 | '   
00a88                 | ' {
00a88                 | ' }
00a88                 | ' setfontfamily(4)
00a88                 | ' 
00a88                 | ' font_family:=afontnum
00a88     C8 BA 05 F1 | 	add	objptr, #200
00a8c     DD 08 68 FC | 	wrlong	#4, objptr
00a90     C8 BA 85 F1 | 	sub	objptr, #200
00a94                 | ' repeat amode from 512 to 1023
00a94     09 26 C6 F9 | 	decod	local08, #9
00a98                 | LR__0006
00a98                 | '   setmode(amode)
00a98     13 0F 02 F6 | 	mov	arg01, local08
00a9c     F0 13 B0 FD | 	call	#_setmode
00aa0                 | '   ccc:=((amode>>4)&3)
00aa0     13 1F 02 F6 | 	mov	local04, local08
00aa4     04 1E 46 F0 | 	shr	local04, #4
00aa8     03 1E 0E F5 | 	and	local04, #3 wz
00aac                 | '   if (ccc==0)
00aac     80 01 90 5D |  if_ne	jmp	#LR__0007
00ab0                 | '     cls(0,1)
00ab0     00 0E 06 F6 | 	mov	arg01, #0
00ab4     01 10 06 F6 | 	mov	arg02, #1
00ab8     88 11 B0 FD | 	call	#_cls
00abc                 | '     outtextxycg(0,0,string("mode"),0,1)
00abc     1B 00 00 FF 
00ac0     AE 12 06 F6 | 	mov	arg03, ##@LR__0191
00ac4     00 0E 06 F6 | 	mov	arg01, #0
00ac8     00 10 06 F6 | 	mov	arg02, #0
00acc     00 14 06 F6 | 	mov	arg04, #0
00ad0     01 16 06 F6 | 	mov	arg05, #1
00ad4     EC 0C B0 FD | 	call	#_outtextxycg
00ad8                 | '     outtextxycg(0,16,string("cpl"),0,1)
00ad8     1B 00 00 FF 
00adc     B3 12 06 F6 | 	mov	arg03, ##@LR__0192
00ae0     00 0E 06 F6 | 	mov	arg01, #0
00ae4     10 10 06 F6 | 	mov	arg02, #16
00ae8     00 14 06 F6 | 	mov	arg04, #0
00aec     01 16 06 F6 | 	mov	arg05, #1
00af0     D0 0C B0 FD | 	call	#_outtextxycg
00af4                 | '     outtextxycg(0,32,string("bufptr"),0,1)
00af4     1B 00 00 FF 
00af8     B7 12 06 F6 | 	mov	arg03, ##@LR__0193
00afc     00 0E 06 F6 | 	mov	arg01, #0
00b00     20 10 06 F6 | 	mov	arg02, #32
00b04     00 14 06 F6 | 	mov	arg04, #0
00b08     01 16 06 F6 | 	mov	arg05, #1
00b0c     B4 0C B0 FD | 	call	#_outtextxycg
00b10                 | '     outtextxycg(0,48,string("buflen"),0,1)
00b10     1B 00 00 FF 
00b14     BE 12 06 F6 | 	mov	arg03, ##@LR__0194
00b18     00 0E 06 F6 | 	mov	arg01, #0
00b1c     30 10 06 F6 | 	mov	arg02, #48
00b20     00 14 06 F6 | 	mov	arg04, #0
00b24     01 16 06 F6 | 	mov	arg05, #1
00b28     98 0C B0 FD | 	call	#_outtextxycg
00b2c                 | '     outtextxycg(0,64,string("lines"),0,1)
00b2c     1B 00 00 FF 
00b30     C5 12 06 F6 | 	mov	arg03, ##@LR__0195
00b34     00 0E 06 F6 | 	mov	arg01, #0
00b38     40 10 06 F6 | 	mov	arg02, #64
00b3c     00 14 06 F6 | 	mov	arg04, #0
00b40     01 16 06 F6 | 	mov	arg05, #1
00b44     7C 0C B0 FD | 	call	#_outtextxycg
00b48                 | '     outtextxycg(64,0,inttostr(amode),0,1)
00b48     40 18 06 F6 | 	mov	local01, #64
00b4c     00 1A 06 F6 | 	mov	local02, #0
00b50     13 0F 02 F6 | 	mov	arg01, local08
00b54     28 12 B0 FD | 	call	#_inttostr
00b58     E5 12 02 F6 | 	mov	arg03, result1
00b5c     0C 0F 02 F6 | 	mov	arg01, local01
00b60     0D 11 02 F6 | 	mov	arg02, local02
00b64     00 14 06 F6 | 	mov	arg04, #0
00b68     01 16 06 F6 | 	mov	arg05, #1
00b6c     54 0C B0 FD | 	call	#_outtextxycg
00b70                 | '     outtextxycg(64,16,inttostr(cpl),0,1)
00b70     40 18 06 F6 | 	mov	local01, #64
00b74     10 1A 06 F6 | 	mov	local02, #16
00b78     90 BA 05 F1 | 	add	objptr, #144
00b7c     DD 0E 02 FB | 	rdlong	arg01, objptr
00b80     90 BA 85 F1 | 	sub	objptr, #144
00b84     F8 11 B0 FD | 	call	#_inttostr
00b88     E5 12 02 F6 | 	mov	arg03, result1
00b8c     0C 0F 02 F6 | 	mov	arg01, local01
00b90     0D 11 02 F6 | 	mov	arg02, local02
00b94     00 14 06 F6 | 	mov	arg04, #0
00b98     01 16 06 F6 | 	mov	arg05, #1
00b9c     24 0C B0 FD | 	call	#_outtextxycg
00ba0                 | '     outtextxycg(64,32,inttostr(buf_ptr),0,1)
00ba0     40 18 06 F6 | 	mov	local01, #64
00ba4     20 1A 06 F6 | 	mov	local02, #32
00ba8     DD 0E 02 FB | 	rdlong	arg01, objptr
00bac     D0 11 B0 FD | 	call	#_inttostr
00bb0     E5 12 02 F6 | 	mov	arg03, result1
00bb4     0C 0F 02 F6 | 	mov	arg01, local01
00bb8     0D 11 02 F6 | 	mov	arg02, local02
00bbc     00 14 06 F6 | 	mov	arg04, #0
00bc0     01 16 06 F6 | 	mov	arg05, #1
00bc4     FC 0B B0 FD | 	call	#_outtextxycg
00bc8                 | '     outtextxycg(64,48,inttostr(buflen*4),0,1)
00bc8     40 18 06 F6 | 	mov	local01, #64
00bcc     30 1A 06 F6 | 	mov	local02, #48
00bd0     30 BA 05 F1 | 	add	objptr, #48
00bd4     DD 0E 02 FB | 	rdlong	arg01, objptr
00bd8     30 BA 85 F1 | 	sub	objptr, #48
00bdc     02 0E 66 F0 | 	shl	arg01, #2
00be0     9C 11 B0 FD | 	call	#_inttostr
00be4     E5 12 02 F6 | 	mov	arg03, result1
00be8     0C 0F 02 F6 | 	mov	arg01, local01
00bec     0D 11 02 F6 | 	mov	arg02, local02
00bf0     00 14 06 F6 | 	mov	arg04, #0
00bf4     01 16 06 F6 | 	mov	arg05, #1
00bf8     C8 0B B0 FD | 	call	#_outtextxycg
00bfc                 | '     outtextxycg(64,64,inttostr(lines),0,1)
00bfc     40 18 06 F6 | 	mov	local01, #64
00c00     40 1A 06 F6 | 	mov	local02, #64
00c04     94 BA 05 F1 | 	add	objptr, #148
00c08     DD 0E 02 FB | 	rdlong	arg01, objptr
00c0c     94 BA 85 F1 | 	sub	objptr, #148
00c10     6C 11 B0 FD | 	call	#_inttostr
00c14     E5 12 02 F6 | 	mov	arg03, result1
00c18     0C 0F 02 F6 | 	mov	arg01, local01
00c1c     0D 11 02 F6 | 	mov	arg02, local02
00c20     00 14 06 F6 | 	mov	arg04, #0
00c24     01 16 06 F6 | 	mov	arg05, #1
00c28     98 0B B0 FD | 	call	#_outtextxycg
00c2c     94 04 90 FD | 	jmp	#LR__0013
00c30                 | LR__0007
00c30                 | '   elseif (ccc==1)
00c30     01 1E 0E F2 | 	cmp	local04, #1 wz
00c34     80 01 90 5D |  if_ne	jmp	#LR__0008
00c38                 | '     cls(0,0)
00c38     00 0E 06 F6 | 	mov	arg01, #0
00c3c     00 10 06 F6 | 	mov	arg02, #0
00c40     00 10 B0 FD | 	call	#_cls
00c44                 | '     outtextxycg(0,0,string("mode"),3,0)
00c44     1B 00 00 FF 
00c48     CB 12 06 F6 | 	mov	arg03, ##@LR__0196
00c4c     00 0E 06 F6 | 	mov	arg01, #0
00c50     00 10 06 F6 | 	mov	arg02, #0
00c54     03 14 06 F6 | 	mov	arg04, #3
00c58     00 16 06 F6 | 	mov	arg05, #0
00c5c     64 0B B0 FD | 	call	#_outtextxycg
00c60                 | '     outtextxycg(0,16,string("cpl"),3,0)'
00c60     1B 00 00 FF 
00c64     D0 12 06 F6 | 	mov	arg03, ##@LR__0197
00c68     00 0E 06 F6 | 	mov	arg01, #0
00c6c     10 10 06 F6 | 	mov	arg02, #16
00c70     03 14 06 F6 | 	mov	arg04, #3
00c74     00 16 06 F6 | 	mov	arg05, #0
00c78     48 0B B0 FD | 	call	#_outtextxycg
00c7c                 | '     outtextxycg(0,32,string("buf_ptr"),3,0)
00c7c     1B 00 00 FF 
00c80     D4 12 06 F6 | 	mov	arg03, ##@LR__0198
00c84     00 0E 06 F6 | 	mov	arg01, #0
00c88     20 10 06 F6 | 	mov	arg02, #32
00c8c     03 14 06 F6 | 	mov	arg04, #3
00c90     00 16 06 F6 | 	mov	arg05, #0
00c94     2C 0B B0 FD | 	call	#_outtextxycg
00c98                 | '     outtextxycg(0,48,string("buflen"),3,0)
00c98     1B 00 00 FF 
00c9c     DC 12 06 F6 | 	mov	arg03, ##@LR__0199
00ca0     00 0E 06 F6 | 	mov	arg01, #0
00ca4     30 10 06 F6 | 	mov	arg02, #48
00ca8     03 14 06 F6 | 	mov	arg04, #3
00cac     00 16 06 F6 | 	mov	arg05, #0
00cb0     10 0B B0 FD | 	call	#_outtextxycg
00cb4                 | '     outtextxycg(0,64,string("lines"),3,0)
00cb4     1B 00 00 FF 
00cb8     E3 12 06 F6 | 	mov	arg03, ##@LR__0200
00cbc     00 0E 06 F6 | 	mov	arg01, #0
00cc0     40 10 06 F6 | 	mov	arg02, #64
00cc4     03 14 06 F6 | 	mov	arg04, #3
00cc8     00 16 06 F6 | 	mov	arg05, #0
00ccc     F4 0A B0 FD | 	call	#_outtextxycg
00cd0                 | '     outtextxycg(64,0,inttostr(amode),2,0)
00cd0     40 18 06 F6 | 	mov	local01, #64
00cd4     00 1A 06 F6 | 	mov	local02, #0
00cd8     13 0F 02 F6 | 	mov	arg01, local08
00cdc     A0 10 B0 FD | 	call	#_inttostr
00ce0     E5 12 02 F6 | 	mov	arg03, result1
00ce4     0C 0F 02 F6 | 	mov	arg01, local01
00ce8     0D 11 02 F6 | 	mov	arg02, local02
00cec     02 14 06 F6 | 	mov	arg04, #2
00cf0     00 16 06 F6 | 	mov	arg05, #0
00cf4     CC 0A B0 FD | 	call	#_outtextxycg
00cf8                 | '     outtextxycg(64,16,inttostr(cpl),2,0)
00cf8     40 18 06 F6 | 	mov	local01, #64
00cfc     10 1A 06 F6 | 	mov	local02, #16
00d00     90 BA 05 F1 | 	add	objptr, #144
00d04     DD 0E 02 FB | 	rdlong	arg01, objptr
00d08     90 BA 85 F1 | 	sub	objptr, #144
00d0c     70 10 B0 FD | 	call	#_inttostr
00d10     E5 12 02 F6 | 	mov	arg03, result1
00d14     0C 0F 02 F6 | 	mov	arg01, local01
00d18     0D 11 02 F6 | 	mov	arg02, local02
00d1c     02 14 06 F6 | 	mov	arg04, #2
00d20     00 16 06 F6 | 	mov	arg05, #0
00d24     9C 0A B0 FD | 	call	#_outtextxycg
00d28                 | '     outtextxycg(64,32,inttostr(buf_ptr),2,0)
00d28     40 18 06 F6 | 	mov	local01, #64
00d2c     20 1A 06 F6 | 	mov	local02, #32
00d30     DD 0E 02 FB | 	rdlong	arg01, objptr
00d34     48 10 B0 FD | 	call	#_inttostr
00d38     E5 12 02 F6 | 	mov	arg03, result1
00d3c     0C 0F 02 F6 | 	mov	arg01, local01
00d40     0D 11 02 F6 | 	mov	arg02, local02
00d44     02 14 06 F6 | 	mov	arg04, #2
00d48     00 16 06 F6 | 	mov	arg05, #0
00d4c     74 0A B0 FD | 	call	#_outtextxycg
00d50                 | '     outtextxycg(64,48,inttostr(buflen*4),2,0)
00d50     40 18 06 F6 | 	mov	local01, #64
00d54     30 1A 06 F6 | 	mov	local02, #48
00d58     30 BA 05 F1 | 	add	objptr, #48
00d5c     DD 0E 02 FB | 	rdlong	arg01, objptr
00d60     30 BA 85 F1 | 	sub	objptr, #48
00d64     02 0E 66 F0 | 	shl	arg01, #2
00d68     14 10 B0 FD | 	call	#_inttostr
00d6c     E5 12 02 F6 | 	mov	arg03, result1
00d70     0C 0F 02 F6 | 	mov	arg01, local01
00d74     0D 11 02 F6 | 	mov	arg02, local02
00d78     02 14 06 F6 | 	mov	arg04, #2
00d7c     00 16 06 F6 | 	mov	arg05, #0
00d80     40 0A B0 FD | 	call	#_outtextxycg
00d84                 | '     outtextxycg(64,64,inttostr(lines),2,0)
00d84     40 18 06 F6 | 	mov	local01, #64
00d88     40 1A 06 F6 | 	mov	local02, #64
00d8c     94 BA 05 F1 | 	add	objptr, #148
00d90     DD 0E 02 FB | 	rdlong	arg01, objptr
00d94     94 BA 85 F1 | 	sub	objptr, #148
00d98     E4 0F B0 FD | 	call	#_inttostr
00d9c     E5 12 02 F6 | 	mov	arg03, result1
00da0     0C 0F 02 F6 | 	mov	arg01, local01
00da4     0D 11 02 F6 | 	mov	arg02, local02
00da8     02 14 06 F6 | 	mov	arg04, #2
00dac     00 16 06 F6 | 	mov	arg05, #0
00db0     10 0A B0 FD | 	call	#_outtextxycg
00db4     0C 03 90 FD | 	jmp	#LR__0012
00db8                 | LR__0008
00db8                 | '   elseif (ccc==2)
00db8     02 1E 0E F2 | 	cmp	local04, #2 wz
00dbc     80 01 90 5D |  if_ne	jmp	#LR__0009
00dc0                 | '     cls(0,0)
00dc0     00 0E 06 F6 | 	mov	arg01, #0
00dc4     00 10 06 F6 | 	mov	arg02, #0
00dc8     78 0E B0 FD | 	call	#_cls
00dcc                 | '     outtextxycg(0,0,string("mode"),9,0)
00dcc     1B 00 00 FF 
00dd0     E9 12 06 F6 | 	mov	arg03, ##@LR__0201
00dd4     00 0E 06 F6 | 	mov	arg01, #0
00dd8     00 10 06 F6 | 	mov	arg02, #0
00ddc     09 14 06 F6 | 	mov	arg04, #9
00de0     00 16 06 F6 | 	mov	arg05, #0
00de4     DC 09 B0 FD | 	call	#_outtextxycg
00de8                 | '     outtextxycg(0,16,string("cpl"),9,0)'
00de8     1B 00 00 FF 
00dec     EE 12 06 F6 | 	mov	arg03, ##@LR__0202
00df0     00 0E 06 F6 | 	mov	arg01, #0
00df4     10 10 06 F6 | 	mov	arg02, #16
00df8     09 14 06 F6 | 	mov	arg04, #9
00dfc     00 16 06 F6 | 	mov	arg05, #0
00e00     C0 09 B0 FD | 	call	#_outtextxycg
00e04                 | '     outtextxycg(0,32,string("buf_ptr"),9,0)
00e04     1B 00 00 FF 
00e08     F2 12 06 F6 | 	mov	arg03, ##@LR__0203
00e0c     00 0E 06 F6 | 	mov	arg01, #0
00e10     20 10 06 F6 | 	mov	arg02, #32
00e14     09 14 06 F6 | 	mov	arg04, #9
00e18     00 16 06 F6 | 	mov	arg05, #0
00e1c     A4 09 B0 FD | 	call	#_outtextxycg
00e20                 | '     outtextxycg(0,48,string("buflen"),9,0)
00e20     1B 00 00 FF 
00e24     FA 12 06 F6 | 	mov	arg03, ##@LR__0204
00e28     00 0E 06 F6 | 	mov	arg01, #0
00e2c     30 10 06 F6 | 	mov	arg02, #48
00e30     09 14 06 F6 | 	mov	arg04, #9
00e34     00 16 06 F6 | 	mov	arg05, #0
00e38     88 09 B0 FD | 	call	#_outtextxycg
00e3c                 | '     outtextxycg(0,64,string("lines"),9,0)
00e3c     1B 00 00 FF 
00e40     01 13 06 F6 | 	mov	arg03, ##@LR__0205
00e44     00 0E 06 F6 | 	mov	arg01, #0
00e48     40 10 06 F6 | 	mov	arg02, #64
00e4c     09 14 06 F6 | 	mov	arg04, #9
00e50     00 16 06 F6 | 	mov	arg05, #0
00e54     6C 09 B0 FD | 	call	#_outtextxycg
00e58                 | '     outtextxycg(64,0,inttostr(amode),4,0)
00e58     40 18 06 F6 | 	mov	local01, #64
00e5c     00 1A 06 F6 | 	mov	local02, #0
00e60     13 0F 02 F6 | 	mov	arg01, local08
00e64     18 0F B0 FD | 	call	#_inttostr
00e68     E5 12 02 F6 | 	mov	arg03, result1
00e6c     0C 0F 02 F6 | 	mov	arg01, local01
00e70     0D 11 02 F6 | 	mov	arg02, local02
00e74     04 14 06 F6 | 	mov	arg04, #4
00e78     00 16 06 F6 | 	mov	arg05, #0
00e7c     44 09 B0 FD | 	call	#_outtextxycg
00e80                 | '     outtextxycg(64,16,inttostr(cpl),4,0)
00e80     40 18 06 F6 | 	mov	local01, #64
00e84     10 1A 06 F6 | 	mov	local02, #16
00e88     90 BA 05 F1 | 	add	objptr, #144
00e8c     DD 0E 02 FB | 	rdlong	arg01, objptr
00e90     90 BA 85 F1 | 	sub	objptr, #144
00e94     E8 0E B0 FD | 	call	#_inttostr
00e98     E5 12 02 F6 | 	mov	arg03, result1
00e9c     0C 0F 02 F6 | 	mov	arg01, local01
00ea0     0D 11 02 F6 | 	mov	arg02, local02
00ea4     04 14 06 F6 | 	mov	arg04, #4
00ea8     00 16 06 F6 | 	mov	arg05, #0
00eac     14 09 B0 FD | 	call	#_outtextxycg
00eb0                 | '     outtextxycg(64,32,inttostr(buf_ptr),4,0)
00eb0     40 18 06 F6 | 	mov	local01, #64
00eb4     20 1A 06 F6 | 	mov	local02, #32
00eb8     DD 0E 02 FB | 	rdlong	arg01, objptr
00ebc     C0 0E B0 FD | 	call	#_inttostr
00ec0     E5 12 02 F6 | 	mov	arg03, result1
00ec4     0C 0F 02 F6 | 	mov	arg01, local01
00ec8     0D 11 02 F6 | 	mov	arg02, local02
00ecc     04 14 06 F6 | 	mov	arg04, #4
00ed0     00 16 06 F6 | 	mov	arg05, #0
00ed4     EC 08 B0 FD | 	call	#_outtextxycg
00ed8                 | '     outtextxycg(64,48,inttostr(buflen*4),4,0)
00ed8     40 18 06 F6 | 	mov	local01, #64
00edc     30 1A 06 F6 | 	mov	local02, #48
00ee0     30 BA 05 F1 | 	add	objptr, #48
00ee4     DD 0E 02 FB | 	rdlong	arg01, objptr
00ee8     30 BA 85 F1 | 	sub	objptr, #48
00eec     02 0E 66 F0 | 	shl	arg01, #2
00ef0     8C 0E B0 FD | 	call	#_inttostr
00ef4     E5 12 02 F6 | 	mov	arg03, result1
00ef8     0C 0F 02 F6 | 	mov	arg01, local01
00efc     0D 11 02 F6 | 	mov	arg02, local02
00f00     04 14 06 F6 | 	mov	arg04, #4
00f04     00 16 06 F6 | 	mov	arg05, #0
00f08     B8 08 B0 FD | 	call	#_outtextxycg
00f0c                 | '     outtextxycg(64,64,inttostr(lines),4,0)
00f0c     40 18 06 F6 | 	mov	local01, #64
00f10     40 1A 06 F6 | 	mov	local02, #64
00f14     94 BA 05 F1 | 	add	objptr, #148
00f18     DD 0E 02 FB | 	rdlong	arg01, objptr
00f1c     94 BA 85 F1 | 	sub	objptr, #148
00f20     5C 0E B0 FD | 	call	#_inttostr
00f24     E5 12 02 F6 | 	mov	arg03, result1
00f28     0C 0F 02 F6 | 	mov	arg01, local01
00f2c     0D 11 02 F6 | 	mov	arg02, local02
00f30     04 14 06 F6 | 	mov	arg04, #4
00f34     00 16 06 F6 | 	mov	arg05, #0
00f38     88 08 B0 FD | 	call	#_outtextxycg
00f3c     84 01 90 FD | 	jmp	#LR__0011
00f40                 | LR__0009
00f40                 | '   elseif (ccc==3)
00f40     03 1E 0E F2 | 	cmp	local04, #3 wz
00f44     7C 01 90 5D |  if_ne	jmp	#LR__0010
00f48                 | '     cls(0,0)
00f48     00 0E 06 F6 | 	mov	arg01, #0
00f4c     00 10 06 F6 | 	mov	arg02, #0
00f50     F0 0C B0 FD | 	call	#_cls
00f54                 | '     outtextxycg(0,0,string("mode"),120,0)
00f54     1B 00 00 FF 
00f58     07 13 06 F6 | 	mov	arg03, ##@LR__0206
00f5c     00 0E 06 F6 | 	mov	arg01, #0
00f60     00 10 06 F6 | 	mov	arg02, #0
00f64     78 14 06 F6 | 	mov	arg04, #120
00f68     00 16 06 F6 | 	mov	arg05, #0
00f6c     54 08 B0 FD | 	call	#_outtextxycg
00f70                 | '     outtextxycg(0,16,string("cpl"),120,0)'
00f70     1B 00 00 FF 
00f74     0C 13 06 F6 | 	mov	arg03, ##@LR__0207
00f78     00 0E 06 F6 | 	mov	arg01, #0
00f7c     10 10 06 F6 | 	mov	arg02, #16
00f80     78 14 06 F6 | 	mov	arg04, #120
00f84     00 16 06 F6 | 	mov	arg05, #0
00f88     38 08 B0 FD | 	call	#_outtextxycg
00f8c                 | '     outtextxycg(0,32,string("buf_ptr"),120,0)
00f8c     1B 00 00 FF 
00f90     10 13 06 F6 | 	mov	arg03, ##@LR__0208
00f94     00 0E 06 F6 | 	mov	arg01, #0
00f98     20 10 06 F6 | 	mov	arg02, #32
00f9c     78 14 06 F6 | 	mov	arg04, #120
00fa0     00 16 06 F6 | 	mov	arg05, #0
00fa4     1C 08 B0 FD | 	call	#_outtextxycg
00fa8                 | '     outtextxycg(0,48,string("buflen"),120,0)
00fa8     1B 00 00 FF 
00fac     18 13 06 F6 | 	mov	arg03, ##@LR__0209
00fb0     00 0E 06 F6 | 	mov	arg01, #0
00fb4     30 10 06 F6 | 	mov	arg02, #48
00fb8     78 14 06 F6 | 	mov	arg04, #120
00fbc     00 16 06 F6 | 	mov	arg05, #0
00fc0     00 08 B0 FD | 	call	#_outtextxycg
00fc4                 | '     outtextxycg(0,64,string("lines"),120,0)
00fc4     1B 00 00 FF 
00fc8     1F 13 06 F6 | 	mov	arg03, ##@LR__0210
00fcc     00 0E 06 F6 | 	mov	arg01, #0
00fd0     40 10 06 F6 | 	mov	arg02, #64
00fd4     78 14 06 F6 | 	mov	arg04, #120
00fd8     00 16 06 F6 | 	mov	arg05, #0
00fdc     E4 07 B0 FD | 	call	#_outtextxycg
00fe0                 | '     outtextxycg(64,0,inttostr(amode),40,0)
00fe0     40 18 06 F6 | 	mov	local01, #64
00fe4     00 1A 06 F6 | 	mov	local02, #0
00fe8     13 0F 02 F6 | 	mov	arg01, local08
00fec     90 0D B0 FD | 	call	#_inttostr
00ff0     E5 12 02 F6 | 	mov	arg03, result1
00ff4     0C 0F 02 F6 | 	mov	arg01, local01
00ff8     0D 11 02 F6 | 	mov	arg02, local02
00ffc     28 14 06 F6 | 	mov	arg04, #40
01000     00 16 06 F6 | 	mov	arg05, #0
01004     BC 07 B0 FD | 	call	#_outtextxycg
01008                 | '     outtextxycg(64,16,inttostr(cpl),40,0)
01008     40 18 06 F6 | 	mov	local01, #64
0100c     10 1A 06 F6 | 	mov	local02, #16
01010     90 BA 05 F1 | 	add	objptr, #144
01014     DD 0E 02 FB | 	rdlong	arg01, objptr
01018     90 BA 85 F1 | 	sub	objptr, #144
0101c     60 0D B0 FD | 	call	#_inttostr
01020     E5 12 02 F6 | 	mov	arg03, result1
01024     0C 0F 02 F6 | 	mov	arg01, local01
01028     0D 11 02 F6 | 	mov	arg02, local02
0102c     28 14 06 F6 | 	mov	arg04, #40
01030     00 16 06 F6 | 	mov	arg05, #0
01034     8C 07 B0 FD | 	call	#_outtextxycg
01038                 | '     outtextxycg(64,32,inttostr(buf_ptr),40,0)
01038     40 18 06 F6 | 	mov	local01, #64
0103c     20 1A 06 F6 | 	mov	local02, #32
01040     DD 0E 02 FB | 	rdlong	arg01, objptr
01044     38 0D B0 FD | 	call	#_inttostr
01048     E5 12 02 F6 | 	mov	arg03, result1
0104c     0C 0F 02 F6 | 	mov	arg01, local01
01050     0D 11 02 F6 | 	mov	arg02, local02
01054     28 14 06 F6 | 	mov	arg04, #40
01058     00 16 06 F6 | 	mov	arg05, #0
0105c     64 07 B0 FD | 	call	#_outtextxycg
01060                 | '     outtextxycg(64,48,inttostr(buflen*4),40,0)
01060     40 18 06 F6 | 	mov	local01, #64
01064     30 1A 06 F6 | 	mov	local02, #48
01068     30 BA 05 F1 | 	add	objptr, #48
0106c     DD 0E 02 FB | 	rdlong	arg01, objptr
01070     30 BA 85 F1 | 	sub	objptr, #48
01074     02 0E 66 F0 | 	shl	arg01, #2
01078     04 0D B0 FD | 	call	#_inttostr
0107c     E5 12 02 F6 | 	mov	arg03, result1
01080     0C 0F 02 F6 | 	mov	arg01, local01
01084     0D 11 02 F6 | 	mov	arg02, local02
01088     28 14 06 F6 | 	mov	arg04, #40
0108c     00 16 06 F6 | 	mov	arg05, #0
01090     30 07 B0 FD | 	call	#_outtextxycg
01094                 | '     outtextxycg(64,64,inttostr(lines),40,0)
01094     40 18 06 F6 | 	mov	local01, #64
01098     40 1A 06 F6 | 	mov	local02, #64
0109c     94 BA 05 F1 | 	add	objptr, #148
010a0     DD 0E 02 FB | 	rdlong	arg01, objptr
010a4     94 BA 85 F1 | 	sub	objptr, #148
010a8     D4 0C B0 FD | 	call	#_inttostr
010ac     E5 12 02 F6 | 	mov	arg03, result1
010b0     0C 0F 02 F6 | 	mov	arg01, local01
010b4     0D 11 02 F6 | 	mov	arg02, local02
010b8     28 14 06 F6 | 	mov	arg04, #40
010bc     00 16 06 F6 | 	mov	arg05, #0
010c0     00 07 B0 FD | 	call	#_outtextxycg
010c4                 | LR__0010
010c4                 | LR__0011
010c4                 | LR__0012
010c4                 | LR__0013
010c4                 | '   waitvbl(300)
010c4     2C 0F 06 F6 | 	mov	arg01, #300
010c8     E0 0A B0 FD | 	call	#_waitvbl
010cc     01 26 06 F1 | 	add	local08, #1
010d0     02 00 00 FF 
010d4     00 26 5E F2 | 	cmps	local08, ##1024 wcz
010d8     BC F9 9F CD |  if_b	jmp	#LR__0006
010dc                 | ' 
010dc                 | ' repeat
010dc                 | LR__0014
010dc     FC FF 9F FD | 	jmp	#LR__0014
010e0     AF F0 03 F6 | 	mov	ptra, fp
010e4     BF 00 A0 FD | 	call	#popregs_
010e8                 | _dummy_ret
010e8     2D 00 64 FD | 	ret
010ec                 | 
010ec                 | ' 
010ec                 | ' '------------------------------
010ec                 | ' 
010ec                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
010ec                 | _fcircle
010ec     0A 5A 05 F6 | 	mov	COUNT_, #10
010f0     B0 00 A0 FD | 	call	#pushregs_
010f4     07 19 02 F6 | 	mov	local01, arg01
010f8     08 1B 02 F6 | 	mov	local02, arg02
010fc     09 1D 02 F6 | 	mov	local03, arg03
01100     0A 1F 02 F6 | 	mov	local04, arg04
01104                 | ' 
01104                 | ' d:=5-4*r
01104     0E 21 02 F6 | 	mov	local05, local03
01108     02 20 66 F0 | 	shl	local05, #2
0110c     05 22 06 F6 | 	mov	local06, #5
01110     10 23 82 F1 | 	sub	local06, local05
01114                 | ' x:=0
01114     00 24 06 F6 | 	mov	local07, #0
01118                 | ' y:=r
01118     0E 27 02 F6 | 	mov	local08, local03
0111c                 | ' da:=(-2*r+5)*4
0111c     FF FF 7F FF 
01120     FE 1D 06 FD | 	qmul	local03, ##-2
01124     18 28 62 FD | 	getqx	local09
01128     05 28 06 F1 | 	add	local09, #5
0112c     02 28 66 F0 | 	shl	local09, #2
01130                 | ' db:=3*4
01130     0C 2A 06 F6 | 	mov	local10, #12
01134                 | ' repeat while (x<=y) 
01134                 | LR__0015
01134     13 25 5A F2 | 	cmps	local07, local08 wcz
01138     D4 00 90 1D |  if_a	jmp	#LR__0017
0113c                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
0113c     0C 0F 02 F6 | 	mov	arg01, local01
01140     12 0F 82 F1 | 	sub	arg01, local07
01144     0D 11 02 F6 | 	mov	arg02, local02
01148     13 11 82 F1 | 	sub	arg02, local08
0114c     0C 13 02 F6 | 	mov	arg03, local01
01150     12 13 02 F1 | 	add	arg03, local07
01154     0D 15 02 F6 | 	mov	arg04, local02
01158     13 15 82 F1 | 	sub	arg04, local08
0115c     0F 17 02 F6 | 	mov	arg05, local04
01160     B8 03 B0 FD | 	call	#_line
01164                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
01164     0C 0F 02 F6 | 	mov	arg01, local01
01168     12 0F 82 F1 | 	sub	arg01, local07
0116c     0D 11 02 F6 | 	mov	arg02, local02
01170     13 11 02 F1 | 	add	arg02, local08
01174     0C 13 02 F6 | 	mov	arg03, local01
01178     12 13 02 F1 | 	add	arg03, local07
0117c     0D 15 02 F6 | 	mov	arg04, local02
01180     13 15 02 F1 | 	add	arg04, local08
01184     0F 17 02 F6 | 	mov	arg05, local04
01188     90 03 B0 FD | 	call	#_line
0118c                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
0118c     0C 0F 02 F6 | 	mov	arg01, local01
01190     13 0F 82 F1 | 	sub	arg01, local08
01194     0D 11 02 F6 | 	mov	arg02, local02
01198     12 11 82 F1 | 	sub	arg02, local07
0119c     0C 13 02 F6 | 	mov	arg03, local01
011a0     13 13 02 F1 | 	add	arg03, local08
011a4     0D 15 02 F6 | 	mov	arg04, local02
011a8     12 15 82 F1 | 	sub	arg04, local07
011ac     0F 17 02 F6 | 	mov	arg05, local04
011b0     68 03 B0 FD | 	call	#_line
011b4                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
011b4     0C 0F 02 F6 | 	mov	arg01, local01
011b8     13 0F 82 F1 | 	sub	arg01, local08
011bc     0D 11 02 F6 | 	mov	arg02, local02
011c0     12 11 02 F1 | 	add	arg02, local07
011c4     0C 13 02 F6 | 	mov	arg03, local01
011c8     13 13 02 F1 | 	add	arg03, local08
011cc     0D 15 02 F6 | 	mov	arg04, local02
011d0     12 15 02 F1 | 	add	arg04, local07
011d4     0F 17 02 F6 | 	mov	arg05, local04
011d8     40 03 B0 FD | 	call	#_line
011dc                 | '   if d>0 
011dc     00 22 5E F2 | 	cmps	local06, #0 wcz
011e0     18 00 90 ED |  if_be	jmp	#LR__0016
011e4                 | '     d+=da
011e4     14 23 02 F1 | 	add	local06, local09
011e8                 | '     y-=1
011e8     01 26 86 F1 | 	sub	local08, #1
011ec                 | '     x+=1
011ec     01 24 06 F1 | 	add	local07, #1
011f0                 | '     da+=4*4
011f0     10 28 06 F1 | 	add	local09, #16
011f4                 | '     db+=2*4
011f4     08 2A 06 F1 | 	add	local10, #8
011f8                 | '   else
011f8     38 FF 9F FD | 	jmp	#LR__0015
011fc                 | LR__0016
011fc                 | '     d+=db
011fc     15 23 02 F1 | 	add	local06, local10
01200                 | '     x+=1
01200     01 24 06 F1 | 	add	local07, #1
01204                 | '     da+=2*4
01204     08 28 06 F1 | 	add	local09, #8
01208                 | '     db+=2*4
01208     08 2A 06 F1 | 	add	local10, #8
0120c     24 FF 9F FD | 	jmp	#LR__0015
01210                 | LR__0017
01210     AF F0 03 F6 | 	mov	ptra, fp
01214     BF 00 A0 FD | 	call	#popregs_
01218                 | _fcircle_ret
01218     2D 00 64 FD | 	ret
0121c                 | 
0121c                 | '  
0121c                 | '  
0121c                 | '  
0121c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
0121c                 | _circle
0121c     0D 5A 05 F6 | 	mov	COUNT_, #13
01220     B0 00 A0 FD | 	call	#pushregs_
01224     07 19 02 F6 | 	mov	local01, arg01
01228     08 1B 02 F6 | 	mov	local02, arg02
0122c     09 1D 02 F6 | 	mov	local03, arg03
01230     0A 1F 02 F6 | 	mov	local04, arg04
01234                 | ' 
01234                 | '  
01234                 | ' d:=5-4*r
01234     0E 21 02 F6 | 	mov	local05, local03
01238     02 20 66 F0 | 	shl	local05, #2
0123c     05 22 06 F6 | 	mov	local06, #5
01240     10 23 82 F1 | 	sub	local06, local05
01244                 | ' x:=0
01244     00 24 06 F6 | 	mov	local07, #0
01248                 | ' y:=r
01248     0E 27 02 F6 | 	mov	local08, local03
0124c                 | ' da:=(-2*r+5)*4
0124c     FF FF 7F FF 
01250     FE 1D 06 FD | 	qmul	local03, ##-2
01254     18 28 62 FD | 	getqx	local09
01258     05 28 06 F1 | 	add	local09, #5
0125c     02 28 66 F0 | 	shl	local09, #2
01260                 | ' db:=3*4
01260     0C 2A 06 F6 | 	mov	local10, #12
01264                 | ' repeat while (x<=y) 
01264                 | LR__0018
01264     13 25 5A F2 | 	cmps	local07, local08 wcz
01268     C0 01 90 1D |  if_a	jmp	#LR__0020
0126c                 | '   putpixel(x0-x,y0-y,c)
0126c     D8 BA 05 F1 | 	add	objptr, #216
01270     DD 2C 02 FB | 	rdlong	local11, objptr
01274     D8 BA 85 F1 | 	sub	objptr, #216
01278     16 21 02 FB | 	rdlong	local05, local11
0127c     04 2C 06 F1 | 	add	local11, #4
01280     16 2F 02 FB | 	rdlong	local12, local11
01284     0C 0F 02 F6 | 	mov	arg01, local01
01288     12 0F 82 F1 | 	sub	arg01, local07
0128c     0D 11 02 F6 | 	mov	arg02, local02
01290     13 11 82 F1 | 	sub	arg02, local08
01294     0F 13 02 F6 | 	mov	arg03, local04
01298     DD 30 02 F6 | 	mov	local13, objptr
0129c     10 BB 01 F6 | 	mov	objptr, local05
012a0     2D 2E 62 FD | 	call	local12
012a4                 | '   putpixel(x0-x,y0+y,c)
012a4     D8 30 06 F1 | 	add	local13, #216
012a8     18 2D 02 FB | 	rdlong	local11, local13
012ac     D8 30 86 F1 | 	sub	local13, #216
012b0     16 BB 01 FB | 	rdlong	objptr, local11
012b4     04 2C 06 F1 | 	add	local11, #4
012b8     16 2F 02 FB | 	rdlong	local12, local11
012bc     0C 0F 02 F6 | 	mov	arg01, local01
012c0     12 0F 82 F1 | 	sub	arg01, local07
012c4     0D 11 02 F6 | 	mov	arg02, local02
012c8     13 11 02 F1 | 	add	arg02, local08
012cc     0F 13 02 F6 | 	mov	arg03, local04
012d0     2D 2E 62 FD | 	call	local12
012d4                 | '   putpixel(x0+x,y0-y,c)
012d4     D8 30 06 F1 | 	add	local13, #216
012d8     18 2D 02 FB | 	rdlong	local11, local13
012dc     D8 30 86 F1 | 	sub	local13, #216
012e0     16 BB 01 FB | 	rdlong	objptr, local11
012e4     04 2C 06 F1 | 	add	local11, #4
012e8     16 2F 02 FB | 	rdlong	local12, local11
012ec     0C 0F 02 F6 | 	mov	arg01, local01
012f0     12 0F 02 F1 | 	add	arg01, local07
012f4     0D 11 02 F6 | 	mov	arg02, local02
012f8     13 11 82 F1 | 	sub	arg02, local08
012fc     0F 13 02 F6 | 	mov	arg03, local04
01300     2D 2E 62 FD | 	call	local12
01304                 | '   putpixel(x0+x,y0+y,c)
01304     D8 30 06 F1 | 	add	local13, #216
01308     18 2D 02 FB | 	rdlong	local11, local13
0130c     D8 30 86 F1 | 	sub	local13, #216
01310     16 BB 01 FB | 	rdlong	objptr, local11
01314     04 2C 06 F1 | 	add	local11, #4
01318     16 2F 02 FB | 	rdlong	local12, local11
0131c     0C 0F 02 F6 | 	mov	arg01, local01
01320     12 0F 02 F1 | 	add	arg01, local07
01324     0D 11 02 F6 | 	mov	arg02, local02
01328     13 11 02 F1 | 	add	arg02, local08
0132c     0F 13 02 F6 | 	mov	arg03, local04
01330     2D 2E 62 FD | 	call	local12
01334                 | '   putpixel(x0-y,y0-x,c)
01334     D8 30 06 F1 | 	add	local13, #216
01338     18 2D 02 FB | 	rdlong	local11, local13
0133c     D8 30 86 F1 | 	sub	local13, #216
01340     16 BB 01 FB | 	rdlong	objptr, local11
01344     04 2C 06 F1 | 	add	local11, #4
01348     16 2F 02 FB | 	rdlong	local12, local11
0134c     0C 0F 02 F6 | 	mov	arg01, local01
01350     13 0F 82 F1 | 	sub	arg01, local08
01354     0D 11 02 F6 | 	mov	arg02, local02
01358     12 11 82 F1 | 	sub	arg02, local07
0135c     0F 13 02 F6 | 	mov	arg03, local04
01360     2D 2E 62 FD | 	call	local12
01364                 | '   putpixel(x0-y,y0+x,c)
01364     D8 30 06 F1 | 	add	local13, #216
01368     18 2D 02 FB | 	rdlong	local11, local13
0136c     D8 30 86 F1 | 	sub	local13, #216
01370     16 BB 01 FB | 	rdlong	objptr, local11
01374     04 2C 06 F1 | 	add	local11, #4
01378     16 2F 02 FB | 	rdlong	local12, local11
0137c     0C 0F 02 F6 | 	mov	arg01, local01
01380     13 0F 82 F1 | 	sub	arg01, local08
01384     0D 11 02 F6 | 	mov	arg02, local02
01388     12 11 02 F1 | 	add	arg02, local07
0138c     0F 13 02 F6 | 	mov	arg03, local04
01390     2D 2E 62 FD | 	call	local12
01394                 | '   putpixel(x0+y,y0-x,c)
01394     D8 30 06 F1 | 	add	local13, #216
01398     18 2D 02 FB | 	rdlong	local11, local13
0139c     D8 30 86 F1 | 	sub	local13, #216
013a0     16 BB 01 FB | 	rdlong	objptr, local11
013a4     04 2C 06 F1 | 	add	local11, #4
013a8     16 2F 02 FB | 	rdlong	local12, local11
013ac     0C 0F 02 F6 | 	mov	arg01, local01
013b0     13 0F 02 F1 | 	add	arg01, local08
013b4     0D 11 02 F6 | 	mov	arg02, local02
013b8     12 11 82 F1 | 	sub	arg02, local07
013bc     0F 13 02 F6 | 	mov	arg03, local04
013c0     2D 2E 62 FD | 	call	local12
013c4                 | '   putpixel(x0+y,y0+x,c)
013c4     D8 30 06 F1 | 	add	local13, #216
013c8     18 2D 02 FB | 	rdlong	local11, local13
013cc     D8 30 86 F1 | 	sub	local13, #216
013d0     16 BB 01 FB | 	rdlong	objptr, local11
013d4     04 2C 06 F1 | 	add	local11, #4
013d8     16 2F 02 FB | 	rdlong	local12, local11
013dc     0C 0F 02 F6 | 	mov	arg01, local01
013e0     13 0F 02 F1 | 	add	arg01, local08
013e4     0D 11 02 F6 | 	mov	arg02, local02
013e8     12 11 02 F1 | 	add	arg02, local07
013ec     0F 13 02 F6 | 	mov	arg03, local04
013f0     2D 2E 62 FD | 	call	local12
013f4     18 BB 01 F6 | 	mov	objptr, local13
013f8                 | '   if d>0 
013f8     00 22 5E F2 | 	cmps	local06, #0 wcz
013fc     18 00 90 ED |  if_be	jmp	#LR__0019
01400                 | '     d+=da
01400     14 23 02 F1 | 	add	local06, local09
01404                 | '     y-=1
01404     01 26 86 F1 | 	sub	local08, #1
01408                 | '     x+=1
01408     01 24 06 F1 | 	add	local07, #1
0140c                 | '     da+=4*4
0140c     10 28 06 F1 | 	add	local09, #16
01410                 | '     db+=2*4
01410     08 2A 06 F1 | 	add	local10, #8
01414                 | '   else
01414     4C FE 9F FD | 	jmp	#LR__0018
01418                 | LR__0019
01418                 | '     d+=db
01418     15 23 02 F1 | 	add	local06, local10
0141c                 | '     x+=1
0141c     01 24 06 F1 | 	add	local07, #1
01420                 | '     da+=2*4
01420     08 28 06 F1 | 	add	local09, #8
01424                 | '     db+=2*4
01424     08 2A 06 F1 | 	add	local10, #8
01428     38 FE 9F FD | 	jmp	#LR__0018
0142c                 | LR__0020
0142c     AF F0 03 F6 | 	mov	ptra, fp
01430     BF 00 A0 FD | 	call	#popregs_
01434                 | _circle_ret
01434     2D 00 64 FD | 	ret
01438                 | 
01438                 | ' 
01438                 | ' 
01438                 | ' pub frame(x1,y1,x2,y2,c)
01438                 | _frame
01438     05 5A 05 F6 | 	mov	COUNT_, #5
0143c     B0 00 A0 FD | 	call	#pushregs_
01440     07 19 02 F6 | 	mov	local01, arg01
01444     08 1B 02 F6 | 	mov	local02, arg02
01448     09 1D 02 F6 | 	mov	local03, arg03
0144c     0A 1F 02 F6 | 	mov	local04, arg04
01450     0B 21 02 F6 | 	mov	local05, arg05
01454                 | ' 
01454                 | ' line(x1,y1,x2,y1,c)
01454     0C 0F 02 F6 | 	mov	arg01, local01
01458     0D 11 02 F6 | 	mov	arg02, local02
0145c     0E 13 02 F6 | 	mov	arg03, local03
01460     0D 15 02 F6 | 	mov	arg04, local02
01464     10 17 02 F6 | 	mov	arg05, local05
01468     B0 00 B0 FD | 	call	#_line
0146c                 | ' line(x1,y2,x2,y2,c)
0146c     0C 0F 02 F6 | 	mov	arg01, local01
01470     0F 11 02 F6 | 	mov	arg02, local04
01474     0E 13 02 F6 | 	mov	arg03, local03
01478     0F 15 02 F6 | 	mov	arg04, local04
0147c     10 17 02 F6 | 	mov	arg05, local05
01480     98 00 B0 FD | 	call	#_line
01484                 | ' line(x1,y1,x1,y2,c)
01484     0C 0F 02 F6 | 	mov	arg01, local01
01488     0D 11 02 F6 | 	mov	arg02, local02
0148c     0C 13 02 F6 | 	mov	arg03, local01
01490     0F 15 02 F6 | 	mov	arg04, local04
01494     10 17 02 F6 | 	mov	arg05, local05
01498     80 00 B0 FD | 	call	#_line
0149c                 | ' line(x2,y1,x2,y2,c)
0149c     0E 0F 02 F6 | 	mov	arg01, local03
014a0     0D 11 02 F6 | 	mov	arg02, local02
014a4     0E 13 02 F6 | 	mov	arg03, local03
014a8     0F 15 02 F6 | 	mov	arg04, local04
014ac     10 17 02 F6 | 	mov	arg05, local05
014b0     68 00 B0 FD | 	call	#_line
014b4     AF F0 03 F6 | 	mov	ptra, fp
014b8     BF 00 A0 FD | 	call	#popregs_
014bc                 | _frame_ret
014bc     2D 00 64 FD | 	ret
014c0                 | 
014c0                 | ' 
014c0                 | ' pub box(x1,y1,x2,y2,c) |yy
014c0                 | _box
014c0     06 5A 05 F6 | 	mov	COUNT_, #6
014c4     B0 00 A0 FD | 	call	#pushregs_
014c8     07 19 02 F6 | 	mov	local01, arg01
014cc     08 1B 02 F6 | 	mov	local02, arg02
014d0     09 1D 02 F6 | 	mov	local03, arg03
014d4     0A 1F 02 F6 | 	mov	local04, arg04
014d8     0B 21 02 F6 | 	mov	local05, arg05
014dc                 | ' 
014dc                 | ' repeat yy from y1 to y2
014dc     0D 1F 5A F2 | 	cmps	local04, local02 wcz
014e0     01 22 06 16 |  if_a	mov	local06, #1
014e4     01 22 66 E6 |  if_be	neg	local06, #1
014e8     11 1F 02 F1 | 	add	local04, local06
014ec                 | LR__0021
014ec                 | '   line(x1,yy,x2,yy,c)
014ec     0C 0F 02 F6 | 	mov	arg01, local01
014f0     0E 13 02 F6 | 	mov	arg03, local03
014f4     10 17 02 F6 | 	mov	arg05, local05
014f8     0D 11 02 F6 | 	mov	arg02, local02
014fc     0D 15 02 F6 | 	mov	arg04, local02
01500     18 00 B0 FD | 	call	#_line
01504     11 1B 02 F1 | 	add	local02, local06
01508     0F 1B 0A F2 | 	cmp	local02, local04 wz
0150c     DC FF 9F 5D |  if_ne	jmp	#LR__0021
01510     AF F0 03 F6 | 	mov	ptra, fp
01514     BF 00 A0 FD | 	call	#popregs_
01518                 | _box_ret
01518     2D 00 64 FD | 	ret
0151c                 | 
0151c                 | ' 
0151c                 | ' 
0151c                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
0151c                 | _line
0151c     12 5A 05 F6 | 	mov	COUNT_, #18
01520     B0 00 A0 FD | 	call	#pushregs_
01524     07 19 02 F6 | 	mov	local01, arg01
01528     08 1B 02 F6 | 	mov	local02, arg02
0152c     09 1D 02 F6 | 	mov	local03, arg03
01530     0A 1F 02 F6 | 	mov	local04, arg04
01534     0B 21 02 F6 | 	mov	local05, arg05
01538                 | ' 
01538                 | ' 
01538                 | ' x:=x1
01538     0C 23 02 F6 | 	mov	local06, local01
0153c                 | ' y:=y1
0153c     0D 25 02 F6 | 	mov	local07, local02
01540                 | ' 
01540                 | ' if (x1<x2) 
01540     0E 19 5A F2 | 	cmps	local01, local03 wcz
01544     10 00 90 3D |  if_ae	jmp	#LR__0022
01548                 | '   xi:=1
01548     01 26 06 F6 | 	mov	local08, #1
0154c                 | '   dx:=x2-x1
0154c     0E 29 02 F6 | 	mov	local09, local03
01550     0C 29 82 F1 | 	sub	local09, local01
01554                 | ' else
01554     0C 00 90 FD | 	jmp	#LR__0023
01558                 | LR__0022
01558                 | '   xi:=-1
01558     01 26 66 F6 | 	neg	local08, #1
0155c                 | '   dx:=x1-x2
0155c     0E 19 82 F1 | 	sub	local01, local03
01560     0C 29 02 F6 | 	mov	local09, local01
01564                 | LR__0023
01564                 | '   
01564                 | ' if (y1<y2) 
01564     0F 1B 5A F2 | 	cmps	local02, local04 wcz
01568     10 00 90 3D |  if_ae	jmp	#LR__0024
0156c                 | '   yi:=1
0156c     01 2A 06 F6 | 	mov	local10, #1
01570                 | '   dy:=y2-y1
01570     0F 2D 02 F6 | 	mov	local11, local04
01574     0D 2D 82 F1 | 	sub	local11, local02
01578                 | ' else
01578     0C 00 90 FD | 	jmp	#LR__0025
0157c                 | LR__0024
0157c                 | '   yi:=-1
0157c     01 2A 66 F6 | 	neg	local10, #1
01580                 | '   dy:=y1-y2
01580     0F 1B 82 F1 | 	sub	local02, local04
01584     0D 2D 02 F6 | 	mov	local11, local02
01588                 | LR__0025
01588                 | ' 
01588                 | ' putpixel(x,y,c)
01588     D8 BA 05 F1 | 	add	objptr, #216
0158c     DD 2E 02 FB | 	rdlong	local12, objptr
01590     D8 BA 85 F1 | 	sub	objptr, #216
01594     17 31 02 FB | 	rdlong	local13, local12
01598     04 2E 06 F1 | 	add	local12, #4
0159c     17 33 02 FB | 	rdlong	local14, local12
015a0     11 0F 02 F6 | 	mov	arg01, local06
015a4     12 11 02 F6 | 	mov	arg02, local07
015a8     10 13 02 F6 | 	mov	arg03, local05
015ac     DD 34 02 F6 | 	mov	local15, objptr
015b0     18 BB 01 F6 | 	mov	objptr, local13
015b4     2D 32 62 FD | 	call	local14
015b8     1A BB 01 F6 | 	mov	objptr, local15
015bc                 | ' 
015bc                 | ' if (dx>dy)
015bc     16 29 5A F2 | 	cmps	local09, local11 wcz
015c0     7C 00 90 ED |  if_be	jmp	#LR__0029
015c4                 | '   ai:=(dy-dx)*2
015c4     16 37 02 F6 | 	mov	local16, local11
015c8     14 37 82 F1 | 	sub	local16, local09
015cc     01 36 66 F0 | 	shl	local16, #1
015d0                 | '   bi:=dy*2
015d0     01 2C 66 F0 | 	shl	local11, #1
015d4     16 39 02 F6 | 	mov	local17, local11
015d8                 | '   d:= bi-dx
015d8     1C 3B 02 F6 | 	mov	local18, local17
015dc     14 3B 82 F1 | 	sub	local18, local09
015e0                 | '   repeat while (x<>x2) 
015e0                 | LR__0026
015e0     0E 23 0A F2 | 	cmp	local06, local03 wz
015e4     D4 00 90 AD |  if_e	jmp	#LR__0034
015e8                 | '     if (d>=0) 
015e8     00 3A 5E F2 | 	cmps	local18, #0 wcz
015ec     10 00 90 CD |  if_b	jmp	#LR__0027
015f0                 | '       x+=xi
015f0     13 23 02 F1 | 	add	local06, local08
015f4                 | '       y+=yi
015f4     15 25 02 F1 | 	add	local07, local10
015f8                 | '       d+=ai
015f8     1B 3B 02 F1 | 	add	local18, local16
015fc                 | '     else
015fc     08 00 90 FD | 	jmp	#LR__0028
01600                 | LR__0027
01600                 | '       d+=bi
01600     1C 3B 02 F1 | 	add	local18, local17
01604                 | '       x+=xi
01604     13 23 02 F1 | 	add	local06, local08
01608                 | LR__0028
01608                 | '     putpixel(x,y,c)
01608     D8 BA 05 F1 | 	add	objptr, #216
0160c     DD 2E 02 FB | 	rdlong	local12, objptr
01610     D8 BA 85 F1 | 	sub	objptr, #216
01614     17 31 02 FB | 	rdlong	local13, local12
01618     04 2E 06 F1 | 	add	local12, #4
0161c     17 33 02 FB | 	rdlong	local14, local12
01620     11 0F 02 F6 | 	mov	arg01, local06
01624     12 11 02 F6 | 	mov	arg02, local07
01628     10 13 02 F6 | 	mov	arg03, local05
0162c     DD 34 02 F6 | 	mov	local15, objptr
01630     18 BB 01 F6 | 	mov	objptr, local13
01634     2D 32 62 FD | 	call	local14
01638     1A BB 01 F6 | 	mov	objptr, local15
0163c     A0 FF 9F FD | 	jmp	#LR__0026
01640                 | ' else
01640                 | LR__0029
01640                 | '   ai:=(dx-dy)*2
01640     14 37 02 F6 | 	mov	local16, local09
01644     16 37 82 F1 | 	sub	local16, local11
01648     01 36 66 F0 | 	shl	local16, #1
0164c                 | '   bi:=dx*2
0164c     01 28 66 F0 | 	shl	local09, #1
01650     14 39 02 F6 | 	mov	local17, local09
01654                 | '   d:=bi-dy
01654     1C 3B 02 F6 | 	mov	local18, local17
01658     16 3B 82 F1 | 	sub	local18, local11
0165c                 | '   repeat while (y<>y2)
0165c                 | LR__0030
0165c     0F 25 0A F2 | 	cmp	local07, local04 wz
01660     58 00 90 AD |  if_e	jmp	#LR__0033
01664                 | '     if (d>=0)
01664     00 3A 5E F2 | 	cmps	local18, #0 wcz
01668     10 00 90 CD |  if_b	jmp	#LR__0031
0166c                 | '       x+=xi
0166c     13 23 02 F1 | 	add	local06, local08
01670                 | '       y+=yi
01670     15 25 02 F1 | 	add	local07, local10
01674                 | '       d+=ai
01674     1B 3B 02 F1 | 	add	local18, local16
01678                 | '     else
01678     08 00 90 FD | 	jmp	#LR__0032
0167c                 | LR__0031
0167c                 | '       d+=bi
0167c     1C 3B 02 F1 | 	add	local18, local17
01680                 | '       y+=yi
01680     15 25 02 F1 | 	add	local07, local10
01684                 | LR__0032
01684                 | '     putpixel(x, y,c)
01684     D8 BA 05 F1 | 	add	objptr, #216
01688     DD 2E 02 FB | 	rdlong	local12, objptr
0168c     D8 BA 85 F1 | 	sub	objptr, #216
01690     17 31 02 FB | 	rdlong	local13, local12
01694     04 2E 06 F1 | 	add	local12, #4
01698     17 33 02 FB | 	rdlong	local14, local12
0169c     11 0F 02 F6 | 	mov	arg01, local06
016a0     12 11 02 F6 | 	mov	arg02, local07
016a4     10 13 02 F6 | 	mov	arg03, local05
016a8     DD 34 02 F6 | 	mov	local15, objptr
016ac     18 BB 01 F6 | 	mov	objptr, local13
016b0     2D 32 62 FD | 	call	local14
016b4     1A BB 01 F6 | 	mov	objptr, local15
016b8     A0 FF 9F FD | 	jmp	#LR__0030
016bc                 | LR__0033
016bc                 | LR__0034
016bc     AF F0 03 F6 | 	mov	ptra, fp
016c0     BF 00 A0 FD | 	call	#popregs_
016c4                 | _line_ret
016c4     2D 00 64 FD | 	ret
016c8                 | 
016c8                 | ' 
016c8                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
016c8                 | _putcharxycg
016c8     0D 5A 05 F6 | 	mov	COUNT_, #13
016cc     B0 00 A0 FD | 	call	#pushregs_
016d0     07 19 02 F6 | 	mov	local01, arg01
016d4     08 1B 02 F6 | 	mov	local02, arg02
016d8     09 1D 02 F6 | 	mov	local03, arg03
016dc     0A 1F 02 F6 | 	mov	local04, arg04
016e0     0B 21 02 F6 | 	mov	local05, arg05
016e4                 | ' 
016e4                 | ' repeat yy from 0 to 15
016e4     00 22 06 F6 | 	mov	local06, #0
016e8                 | LR__0035
016e8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
016e8     DF 24 02 F6 | 	mov	local07, ptr__dat__
016ec     C8 BA 05 F1 | 	add	objptr, #200
016f0     DD 26 02 FB | 	rdlong	local08, objptr
016f4     C8 BA 85 F1 | 	sub	objptr, #200
016f8     0A 26 66 F0 | 	shl	local08, #10
016fc     13 25 02 F1 | 	add	local07, local08
01700     0E 29 02 F6 | 	mov	local09, local03
01704     04 28 66 F0 | 	shl	local09, #4
01708     14 25 02 F1 | 	add	local07, local09
0170c     11 25 02 F1 | 	add	local07, local06
01710     12 2B C2 FA | 	rdbyte	local10, local07
01714                 | '   repeat xx from 0 to 7
01714     00 2C 06 F6 | 	mov	local11, #0
01718                 | LR__0036
01718                 | '     if (bb&(1<<xx))<>0
01718     16 2F C2 F9 | 	decod	local12, local11
0171c     17 2B CA F7 | 	test	local10, local12 wz
01720     40 00 90 AD |  if_e	jmp	#LR__0037
01724                 | '       putpixel(xx+x,yy+y,f)
01724     D8 BA 05 F1 | 	add	objptr, #216
01728     DD 24 02 FB | 	rdlong	local07, objptr
0172c     D8 BA 85 F1 | 	sub	objptr, #216
01730     12 2F 02 FB | 	rdlong	local12, local07
01734     04 24 06 F1 | 	add	local07, #4
01738     12 27 02 FB | 	rdlong	local08, local07
0173c     16 0F 02 F6 | 	mov	arg01, local11
01740     0C 0F 02 F1 | 	add	arg01, local01
01744     11 11 02 F6 | 	mov	arg02, local06
01748     0D 11 02 F1 | 	add	arg02, local02
0174c     0F 13 02 F6 | 	mov	arg03, local04
01750     DD 30 02 F6 | 	mov	local13, objptr
01754     17 BB 01 F6 | 	mov	objptr, local12
01758     2D 26 62 FD | 	call	local08
0175c     18 BB 01 F6 | 	mov	objptr, local13
01760                 | '     else
01760     3C 00 90 FD | 	jmp	#LR__0038
01764                 | LR__0037
01764                 | '       putpixel(xx+x,yy+y,b)
01764     D8 BA 05 F1 | 	add	objptr, #216
01768     DD 24 02 FB | 	rdlong	local07, objptr
0176c     D8 BA 85 F1 | 	sub	objptr, #216
01770     12 2F 02 FB | 	rdlong	local12, local07
01774     04 24 06 F1 | 	add	local07, #4
01778     12 27 02 FB | 	rdlong	local08, local07
0177c     16 0F 02 F6 | 	mov	arg01, local11
01780     0C 0F 02 F1 | 	add	arg01, local01
01784     11 11 02 F6 | 	mov	arg02, local06
01788     0D 11 02 F1 | 	add	arg02, local02
0178c     10 13 02 F6 | 	mov	arg03, local05
01790     DD 30 02 F6 | 	mov	local13, objptr
01794     17 BB 01 F6 | 	mov	objptr, local12
01798     2D 26 62 FD | 	call	local08
0179c     18 BB 01 F6 | 	mov	objptr, local13
017a0                 | LR__0038
017a0     01 2C 06 F1 | 	add	local11, #1
017a4     08 2C 5E F2 | 	cmps	local11, #8 wcz
017a8     6C FF 9F CD |  if_b	jmp	#LR__0036
017ac     01 22 06 F1 | 	add	local06, #1
017b0     10 22 5E F2 | 	cmps	local06, #16 wcz
017b4     30 FF 9F CD |  if_b	jmp	#LR__0035
017b8     AF F0 03 F6 | 	mov	ptra, fp
017bc     BF 00 A0 FD | 	call	#popregs_
017c0                 | _putcharxycg_ret
017c0     2D 00 64 FD | 	ret
017c4                 | 
017c4                 | ' 
017c4                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
017c4                 | _outtextxycg
017c4     0C 5A 05 F6 | 	mov	COUNT_, #12
017c8     B0 00 A0 FD | 	call	#pushregs_
017cc     07 19 02 F6 | 	mov	local01, arg01
017d0     08 1B 02 F6 | 	mov	local02, arg02
017d4     09 1D 02 F6 | 	mov	local03, arg03
017d8     0A 1F 02 F6 | 	mov	local04, arg04
017dc     0B 21 02 F6 | 	mov	local05, arg05
017e0                 | ' 
017e0                 | ' repeat iii from 0 to strsize(text)-1
017e0     00 22 06 F6 | 	mov	local06, #0
017e4     0E 0F 02 F6 | 	mov	arg01, local03
017e8     00 24 06 F6 | 	mov	local07, #0
017ec     20 E8 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
017f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
017f4                 | LR__0039
017f4     07 27 CA FA | 	rdbyte	local08, arg01 wz
017f8     01 24 06 51 |  if_ne	add	local07, #1
017fc     01 0E 06 51 |  if_ne	add	arg01, #1
01800     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
01804                 | LR__0040
01804     12 CB 01 F6 | 	mov	result1, local07
01808     E5 28 02 F6 | 	mov	local09, result1
0180c     01 28 86 F1 | 	sub	local09, #1
01810     00 28 5E F2 | 	cmps	local09, #0 wcz
01814     01 2A 06 16 |  if_a	mov	local10, #1
01818     01 2A 66 E6 |  if_be	neg	local10, #1
0181c     15 29 02 F1 | 	add	local09, local10
01820                 | LR__0041
01820                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
01820     0C 0F 02 F6 | 	mov	arg01, local01
01824     11 2D 02 F6 | 	mov	local11, local06
01828     03 2C 66 F0 | 	shl	local11, #3
0182c     16 0F 02 F1 | 	add	arg01, local11
01830     0D 11 02 F6 | 	mov	arg02, local02
01834     0E 2F 02 F6 | 	mov	local12, local03
01838     11 2F 02 F1 | 	add	local12, local06
0183c     17 13 C2 FA | 	rdbyte	arg03, local12
01840     0F 15 02 F6 | 	mov	arg04, local04
01844     10 17 02 F6 | 	mov	arg05, local05
01848     7C FE BF FD | 	call	#_putcharxycg
0184c     15 23 02 F1 | 	add	local06, local10
01850     14 23 0A F2 | 	cmp	local06, local09 wz
01854     C8 FF 9F 5D |  if_ne	jmp	#LR__0041
01858     AF F0 03 F6 | 	mov	ptra, fp
0185c     BF 00 A0 FD | 	call	#popregs_
01860                 | _outtextxycg_ret
01860     2D 00 64 FD | 	ret
01864                 | 
01864                 | ' 
01864                 | ' 
01864                 | ' ''---------- putpixel - put a pixel on the screen
01864                 | ' 
01864                 | ' pub putpixel1(x,y,c) |byte b
01864                 | _putpixel1
01864                 | ' 
01864                 | ' 
01864                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01864     00 CE 05 F6 | 	mov	_var01, #0
01868     00 0E 5E F2 | 	cmps	arg01, #0 wcz
0186c     01 CE 65 36 |  if_ae	neg	_var01, #1
01870     00 D0 05 F6 | 	mov	_var02, #0
01874     90 BA 05 F1 | 	add	objptr, #144
01878     DD D2 01 FB | 	rdlong	_var03, objptr
0187c     05 D2 65 F0 | 	shl	_var03, #5
01880     E9 0E 5A F2 | 	cmps	arg01, _var03 wcz
01884     01 D0 65 C6 |  if_b	neg	_var02, #1
01888     E8 CE 01 F5 | 	and	_var01, _var02
0188c     00 D4 05 F6 | 	mov	_var04, #0
01890     00 10 5E F2 | 	cmps	arg02, #0 wcz
01894     01 D4 65 36 |  if_ae	neg	_var04, #1
01898     EA CE 01 F5 | 	and	_var01, _var04
0189c     00 D6 05 F6 | 	mov	_var05, #0
018a0     04 BA 05 F1 | 	add	objptr, #4
018a4     DD D8 01 FB | 	rdlong	_var06, objptr
018a8     94 BA 85 F1 | 	sub	objptr, #148
018ac     EC 10 5A F2 | 	cmps	arg02, _var06 wcz
018b0     01 D6 65 C6 |  if_b	neg	_var05, #1
018b4     EB CE C9 F7 | 	test	_var01, _var05 wz
018b8     90 00 90 AD |  if_e	jmp	#LR__0044
018bc                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
018bc     DD CE 01 FB | 	rdlong	_var01, objptr
018c0     90 BA 05 F1 | 	add	objptr, #144
018c4     DD D0 01 FB | 	rdlong	_var02, objptr
018c8     90 BA 85 F1 | 	sub	objptr, #144
018cc     02 D0 65 F0 | 	shl	_var02, #2
018d0     08 D1 01 FD | 	qmul	_var02, arg02
018d4     18 DA 61 FD | 	getqx	_var07
018d8     ED CE 01 F1 | 	add	_var01, _var07
018dc     07 D5 01 F6 | 	mov	_var04, arg01
018e0     03 D4 45 F0 | 	shr	_var04, #3
018e4     EA CE 01 F1 | 	add	_var01, _var04
018e8     E7 DC C1 FA | 	rdbyte	_var08, _var01
018ec                 | '     if (c==0)
018ec     00 12 0E F2 | 	cmp	arg03, #0 wz
018f0     18 00 90 5D |  if_ne	jmp	#LR__0042
018f4                 | '       b:=b & !(1<<(x//8))
018f4     07 D3 51 F6 | 	abs	_var03, arg01 wc
018f8     07 D2 05 F5 | 	and	_var03, #7
018fc     E9 D2 61 C6 |  if_b	neg	_var03, _var03
01900     E9 D0 C1 F9 | 	decod	_var02, _var03
01904     E8 DC 21 F5 | 	andn	_var08, _var02
01908                 | '     else
01908     14 00 90 FD | 	jmp	#LR__0043
0190c                 | LR__0042
0190c                 | '       b:=b |(1<<(x//8))
0190c     07 D3 51 F6 | 	abs	_var03, arg01 wc
01910     07 D2 05 F5 | 	and	_var03, #7
01914     E9 D2 61 C6 |  if_b	neg	_var03, _var03
01918     E9 D0 C1 F9 | 	decod	_var02, _var03
0191c     E8 DC 41 F5 | 	or	_var08, _var02
01920                 | LR__0043
01920                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01920     DD CE 01 FB | 	rdlong	_var01, objptr
01924     90 BA 05 F1 | 	add	objptr, #144
01928     DD D0 01 FB | 	rdlong	_var02, objptr
0192c     90 BA 85 F1 | 	sub	objptr, #144
01930     02 D0 65 F0 | 	shl	_var02, #2
01934     08 D1 01 FD | 	qmul	_var02, arg02
01938     18 DA 61 FD | 	getqx	_var07
0193c     ED CE 01 F1 | 	add	_var01, _var07
01940     03 0E 46 F0 | 	shr	arg01, #3
01944     07 CF 01 F1 | 	add	_var01, arg01
01948     E7 DC 41 FC | 	wrbyte	_var08, _var01
0194c                 | LR__0044
0194c                 | _putpixel1_ret
0194c     2D 00 64 FD | 	ret
01950                 | 
01950                 | ' 
01950                 | ' 
01950                 | ' pub putpixel2(x,y,c) |byte b
01950                 | _putpixel2
01950                 | ' 
01950                 | ' 
01950                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01950     00 CE 05 F6 | 	mov	_var01, #0
01954     00 0E 5E F2 | 	cmps	arg01, #0 wcz
01958     01 CE 65 36 |  if_ae	neg	_var01, #1
0195c     00 D0 05 F6 | 	mov	_var02, #0
01960     90 BA 05 F1 | 	add	objptr, #144
01964     DD D2 01 FB | 	rdlong	_var03, objptr
01968     04 D2 65 F0 | 	shl	_var03, #4
0196c     E9 0E 5A F2 | 	cmps	arg01, _var03 wcz
01970     01 D0 65 C6 |  if_b	neg	_var02, #1
01974     E8 CE 01 F5 | 	and	_var01, _var02
01978     00 D4 05 F6 | 	mov	_var04, #0
0197c     00 10 5E F2 | 	cmps	arg02, #0 wcz
01980     01 D4 65 36 |  if_ae	neg	_var04, #1
01984     EA CE 01 F5 | 	and	_var01, _var04
01988     00 D6 05 F6 | 	mov	_var05, #0
0198c     04 BA 05 F1 | 	add	objptr, #4
01990     DD D8 01 FB | 	rdlong	_var06, objptr
01994     94 BA 85 F1 | 	sub	objptr, #148
01998     EC 10 5A F2 | 	cmps	arg02, _var06 wcz
0199c     01 D6 65 C6 |  if_b	neg	_var05, #1
019a0     EB CE C9 F7 | 	test	_var01, _var05 wz
019a4     90 00 90 AD |  if_e	jmp	#LR__0045
019a8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
019a8     DD CE 01 FB | 	rdlong	_var01, objptr
019ac     90 BA 05 F1 | 	add	objptr, #144
019b0     DD D0 01 FB | 	rdlong	_var02, objptr
019b4     90 BA 85 F1 | 	sub	objptr, #144
019b8     02 D0 65 F0 | 	shl	_var02, #2
019bc     08 D1 01 FD | 	qmul	_var02, arg02
019c0     18 DA 61 FD | 	getqx	_var07
019c4     ED CE 01 F1 | 	add	_var01, _var07
019c8     07 D5 01 F6 | 	mov	_var04, arg01
019cc     02 D4 45 F0 | 	shr	_var04, #2
019d0     EA CE 01 F1 | 	add	_var01, _var04
019d4     E7 DC C1 FA | 	rdbyte	_var08, _var01
019d8                 | '     b:=b & !(%11<<((x//4)<<1))
019d8     07 D3 51 F6 | 	abs	_var03, arg01 wc
019dc     03 D2 05 F5 | 	and	_var03, #3
019e0     E9 D2 61 C6 |  if_b	neg	_var03, _var03
019e4     01 D2 65 F0 | 	shl	_var03, #1
019e8     03 D0 05 F6 | 	mov	_var02, #3
019ec     E9 D0 61 F0 | 	shl	_var02, _var03
019f0     E8 DC 21 F5 | 	andn	_var08, _var02
019f4                 | '     b:=b |(c<<((x//4)<<1))
019f4     07 D3 51 F6 | 	abs	_var03, arg01 wc
019f8     03 D2 05 F5 | 	and	_var03, #3
019fc     E9 D2 61 C6 |  if_b	neg	_var03, _var03
01a00     01 D2 65 F0 | 	shl	_var03, #1
01a04     E9 12 62 F0 | 	shl	arg03, _var03
01a08     09 DD 41 F5 | 	or	_var08, arg03
01a0c                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01a0c     DD CE 01 FB | 	rdlong	_var01, objptr
01a10     90 BA 05 F1 | 	add	objptr, #144
01a14     DD D0 01 FB | 	rdlong	_var02, objptr
01a18     90 BA 85 F1 | 	sub	objptr, #144
01a1c     02 D0 65 F0 | 	shl	_var02, #2
01a20     08 D1 01 FD | 	qmul	_var02, arg02
01a24     18 DA 61 FD | 	getqx	_var07
01a28     ED CE 01 F1 | 	add	_var01, _var07
01a2c     02 0E 46 F0 | 	shr	arg01, #2
01a30     07 CF 01 F1 | 	add	_var01, arg01
01a34     E7 DC 41 FC | 	wrbyte	_var08, _var01
01a38                 | LR__0045
01a38                 | _putpixel2_ret
01a38     2D 00 64 FD | 	ret
01a3c                 | 
01a3c                 | ' 
01a3c                 | ' 
01a3c                 | ' pub putpixel4(x,y,c) |byte b
01a3c                 | _putpixel4
01a3c                 | ' 
01a3c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01a3c     00 CE 05 F6 | 	mov	_var01, #0
01a40     00 0E 5E F2 | 	cmps	arg01, #0 wcz
01a44     01 CE 65 36 |  if_ae	neg	_var01, #1
01a48     00 D0 05 F6 | 	mov	_var02, #0
01a4c     90 BA 05 F1 | 	add	objptr, #144
01a50     DD D2 01 FB | 	rdlong	_var03, objptr
01a54     04 D2 65 F0 | 	shl	_var03, #4
01a58     E9 0E 5A F2 | 	cmps	arg01, _var03 wcz
01a5c     01 D0 65 C6 |  if_b	neg	_var02, #1
01a60     E8 CE 01 F5 | 	and	_var01, _var02
01a64     00 D4 05 F6 | 	mov	_var04, #0
01a68     00 10 5E F2 | 	cmps	arg02, #0 wcz
01a6c     01 D4 65 36 |  if_ae	neg	_var04, #1
01a70     EA CE 01 F5 | 	and	_var01, _var04
01a74     00 D6 05 F6 | 	mov	_var05, #0
01a78     04 BA 05 F1 | 	add	objptr, #4
01a7c     DD D8 01 FB | 	rdlong	_var06, objptr
01a80     94 BA 85 F1 | 	sub	objptr, #148
01a84     EC 10 5A F2 | 	cmps	arg02, _var06 wcz
01a88     01 D6 65 C6 |  if_b	neg	_var05, #1
01a8c     EB CE C9 F7 | 	test	_var01, _var05 wz
01a90     90 00 90 AD |  if_e	jmp	#LR__0046
01a94                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01a94     DD CE 01 FB | 	rdlong	_var01, objptr
01a98     90 BA 05 F1 | 	add	objptr, #144
01a9c     DD D0 01 FB | 	rdlong	_var02, objptr
01aa0     90 BA 85 F1 | 	sub	objptr, #144
01aa4     02 D0 65 F0 | 	shl	_var02, #2
01aa8     08 D1 01 FD | 	qmul	_var02, arg02
01aac     18 DA 61 FD | 	getqx	_var07
01ab0     ED CE 01 F1 | 	add	_var01, _var07
01ab4     07 D5 01 F6 | 	mov	_var04, arg01
01ab8     01 D4 45 F0 | 	shr	_var04, #1
01abc     EA CE 01 F1 | 	add	_var01, _var04
01ac0     E7 DC C1 FA | 	rdbyte	_var08, _var01
01ac4                 | '     b:=b & !(%1111<<((x//2)<<2))
01ac4     07 D3 51 F6 | 	abs	_var03, arg01 wc
01ac8     01 D2 05 F5 | 	and	_var03, #1
01acc     E9 D2 61 C6 |  if_b	neg	_var03, _var03
01ad0     02 D2 65 F0 | 	shl	_var03, #2
01ad4     0F D0 05 F6 | 	mov	_var02, #15
01ad8     E9 D0 61 F0 | 	shl	_var02, _var03
01adc     E8 DC 21 F5 | 	andn	_var08, _var02
01ae0                 | '     b:=b |(c<<((x//2)<<2))
01ae0     07 D3 51 F6 | 	abs	_var03, arg01 wc
01ae4     01 D2 05 F5 | 	and	_var03, #1
01ae8     E9 D2 61 C6 |  if_b	neg	_var03, _var03
01aec     02 D2 65 F0 | 	shl	_var03, #2
01af0     E9 12 62 F0 | 	shl	arg03, _var03
01af4     09 DD 41 F5 | 	or	_var08, arg03
01af8                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01af8     DD CE 01 FB | 	rdlong	_var01, objptr
01afc     90 BA 05 F1 | 	add	objptr, #144
01b00     DD D0 01 FB | 	rdlong	_var02, objptr
01b04     90 BA 85 F1 | 	sub	objptr, #144
01b08     02 D0 65 F0 | 	shl	_var02, #2
01b0c     08 D1 01 FD | 	qmul	_var02, arg02
01b10     18 DA 61 FD | 	getqx	_var07
01b14     ED CE 01 F1 | 	add	_var01, _var07
01b18     01 0E 46 F0 | 	shr	arg01, #1
01b1c     07 CF 01 F1 | 	add	_var01, arg01
01b20     E7 DC 41 FC | 	wrbyte	_var08, _var01
01b24                 | LR__0046
01b24                 | _putpixel4_ret
01b24     2D 00 64 FD | 	ret
01b28                 | 
01b28                 | ' 
01b28                 | ' 
01b28                 | ' pub putpixel8(x,y,c)
01b28                 | _putpixel8
01b28                 | ' 
01b28                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01b28     00 CE 05 F6 | 	mov	_var01, #0
01b2c     00 0E 5E F2 | 	cmps	arg01, #0 wcz
01b30     01 CE 65 36 |  if_ae	neg	_var01, #1
01b34     00 D0 05 F6 | 	mov	_var02, #0
01b38     90 BA 05 F1 | 	add	objptr, #144
01b3c     DD D2 01 FB | 	rdlong	_var03, objptr
01b40     02 D2 65 F0 | 	shl	_var03, #2
01b44     E9 0E 5A F2 | 	cmps	arg01, _var03 wcz
01b48     01 D0 65 C6 |  if_b	neg	_var02, #1
01b4c     E8 CE 01 F5 | 	and	_var01, _var02
01b50     00 D4 05 F6 | 	mov	_var04, #0
01b54     00 10 5E F2 | 	cmps	arg02, #0 wcz
01b58     01 D4 65 36 |  if_ae	neg	_var04, #1
01b5c     EA CE 01 F5 | 	and	_var01, _var04
01b60     00 D6 05 F6 | 	mov	_var05, #0
01b64     04 BA 05 F1 | 	add	objptr, #4
01b68     DD D8 01 FB | 	rdlong	_var06, objptr
01b6c     94 BA 85 F1 | 	sub	objptr, #148
01b70     EC 10 5A F2 | 	cmps	arg02, _var06 wcz
01b74     01 D6 65 C6 |  if_b	neg	_var05, #1
01b78     EB CE C9 F7 | 	test	_var01, _var05 wz
01b7c     28 00 90 AD |  if_e	jmp	#LR__0047
01b80                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01b80     DD CE 01 FB | 	rdlong	_var01, objptr
01b84     90 BA 05 F1 | 	add	objptr, #144
01b88     DD D0 01 FB | 	rdlong	_var02, objptr
01b8c     90 BA 85 F1 | 	sub	objptr, #144
01b90     02 D0 65 F0 | 	shl	_var02, #2
01b94     08 D1 01 FD | 	qmul	_var02, arg02
01b98     18 DA 61 FD | 	getqx	_var07
01b9c     ED CE 01 F1 | 	add	_var01, _var07
01ba0     07 CF 01 F1 | 	add	_var01, arg01
01ba4     E7 12 42 FC | 	wrbyte	arg03, _var01
01ba8                 | LR__0047
01ba8                 | _putpixel8_ret
01ba8     2D 00 64 FD | 	ret
01bac                 | 
01bac                 | ' 
01bac                 | ' '*************************************************************************
01bac                 | ' '                                                                        *
01bac                 | ' '  VBlank functions                                                      *
01bac                 | ' '                                                                        *
01bac                 | ' '*************************************************************************
01bac                 | ' 
01bac                 | ' pub waitvbl(amount) | i
01bac                 | _waitvbl
01bac     04 5A 05 F6 | 	mov	COUNT_, #4
01bb0     B0 00 A0 FD | 	call	#pushregs_
01bb4     07 19 02 F6 | 	mov	local01, arg01
01bb8                 | ' 
01bb8                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01bb8                 | ' 
01bb8                 | ' repeat i from 1 to amount
01bb8     01 1A 06 F6 | 	mov	local02, #1
01bbc     01 18 5E F2 | 	cmps	local01, #1 wcz
01bc0     01 1C 06 16 |  if_a	mov	local03, #1
01bc4     01 1C 66 E6 |  if_be	neg	local03, #1
01bc8     0E 19 02 F1 | 	add	local01, local03
01bcc                 | LR__0048
01bcc                 | '   repeat until vblank==0
01bcc                 | LR__0049
01bcc     40 BA 05 F1 | 	add	objptr, #64
01bd0     DD 1E 0A FB | 	rdlong	local04, objptr wz
01bd4     40 BA 85 F1 | 	sub	objptr, #64
01bd8     0C 00 90 AD |  if_e	jmp	#LR__0050
01bdc                 | '     waitus(100)
01bdc     64 0E 06 F6 | 	mov	arg01, #100
01be0     44 11 B0 FD | 	call	#__system___waitus
01be4     E4 FF 9F FD | 	jmp	#LR__0049
01be8                 | LR__0050
01be8                 | '   repeat until vblank==1
01be8                 | LR__0051
01be8     40 BA 05 F1 | 	add	objptr, #64
01bec     DD 1E 02 FB | 	rdlong	local04, objptr
01bf0     40 BA 85 F1 | 	sub	objptr, #64
01bf4     01 1E 0E F2 | 	cmp	local04, #1 wz
01bf8     0C 00 90 AD |  if_e	jmp	#LR__0052
01bfc                 | '     waitus(100)
01bfc     64 0E 06 F6 | 	mov	arg01, #100
01c00     24 11 B0 FD | 	call	#__system___waitus
01c04     E0 FF 9F FD | 	jmp	#LR__0051
01c08                 | LR__0052
01c08     0E 1B 02 F1 | 	add	local02, local03
01c0c     0C 1B 0A F2 | 	cmp	local02, local01 wz
01c10     B8 FF 9F 5D |  if_ne	jmp	#LR__0048
01c14     AF F0 03 F6 | 	mov	ptra, fp
01c18     BF 00 A0 FD | 	call	#popregs_
01c1c                 | _waitvbl_ret
01c1c     2D 00 64 FD | 	ret
01c20                 | 
01c20                 | ' 
01c20                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
01c20                 | ' 
01c20                 | ' pub setbordercolor(r,g,b) | color
01c20                 | _setbordercolor
01c20                 | ' 
01c20                 | ' color:=r<<24+g<<16+b<<8
01c20     18 0E 66 F0 | 	shl	arg01, #24
01c24     10 10 66 F0 | 	shl	arg02, #16
01c28     08 0F 02 F1 | 	add	arg01, arg02
01c2c     08 12 66 F0 | 	shl	arg03, #8
01c30     09 0F 02 F1 | 	add	arg01, arg03
01c34                 | ' bordercolor:=color
01c34     2C BA 05 F1 | 	add	objptr, #44
01c38     DD 0E 62 FC | 	wrlong	arg01, objptr
01c3c     2C BA 85 F1 | 	sub	objptr, #44
01c40                 | _setbordercolor_ret
01c40     2D 00 64 FD | 	ret
01c44                 | 
01c44                 | ' 
01c44                 | ' 
01c44                 | ' '*************************************************************************
01c44                 | ' '                                                                        *
01c44                 | ' '  Text functions                                                        *
01c44                 | ' '                                                                        *
01c44                 | ' '*************************************************************************
01c44                 | ' 
01c44                 | ' ''---------- Clear the screen, set its foreground/background color
01c44                 | ' 
01c44                 | ' pub cls(fc,bc)   :c
01c44                 | _cls
01c44     06 5A 05 F6 | 	mov	COUNT_, #6
01c48     B0 00 A0 FD | 	call	#pushregs_
01c4c     07 19 02 F6 | 	mov	local01, arg01
01c50     08 1B 02 F6 | 	mov	local02, arg02
01c54                 | ' 
01c54                 | ' if (graphmode<512)
01c54     C4 BA 05 F1 | 	add	objptr, #196
01c58     DD 1C 02 FB | 	rdlong	local03, objptr
01c5c     C4 BA 85 F1 | 	sub	objptr, #196
01c60     01 00 00 FF 
01c64     00 1C 5E F2 | 	cmps	local03, ##512 wcz
01c68     34 00 90 3D |  if_ae	jmp	#LR__0053
01c6c                 | '   c:=fc<<24+bc<<16+$20
01c6c     0C 1F 02 F6 | 	mov	local04, local01
01c70     18 1E 66 F0 | 	shl	local04, #24
01c74     0D 21 02 F6 | 	mov	local05, local02
01c78     10 20 66 F0 | 	shl	local05, #16
01c7c     10 1F 02 F1 | 	add	local04, local05
01c80     20 1E 06 F1 | 	add	local04, #32
01c84                 | '   longfill(buf_ptr,c,buflen)
01c84     DD 0E 02 FB | 	rdlong	arg01, objptr
01c88     30 BA 05 F1 | 	add	objptr, #48
01c8c     DD 12 02 FB | 	rdlong	arg03, objptr
01c90     30 BA 85 F1 | 	sub	objptr, #48
01c94     0F 11 02 F6 | 	mov	arg02, local04
01c98     A8 00 A0 FD | 	call	#\builtin_longfill_
01c9c                 | ' else
01c9c     AC 00 90 FD | 	jmp	#LR__0059
01ca0                 | LR__0053
01ca0                 | '   if (graphmode & 48) ==48
01ca0     C4 BA 05 F1 | 	add	objptr, #196
01ca4     DD 1C 02 FB | 	rdlong	local03, objptr
01ca8     C4 BA 85 F1 | 	sub	objptr, #196
01cac     30 1C 06 F5 | 	and	local03, #48
01cb0     30 1C 0E F2 | 	cmp	local03, #48 wz
01cb4                 | '     c:=bc
01cb4     0D 1F 02 A6 |  if_e	mov	local04, local02
01cb8     74 00 90 AD |  if_e	jmp	#LR__0058
01cbc                 | '   elseif (graphmode & 48) ==32
01cbc     C4 BA 05 F1 | 	add	objptr, #196
01cc0     DD 1C 02 FB | 	rdlong	local03, objptr
01cc4     C4 BA 85 F1 | 	sub	objptr, #196
01cc8     30 1C 06 F5 | 	and	local03, #48
01ccc     20 1C 0E F2 | 	cmp	local03, #32 wz
01cd0     10 00 90 5D |  if_ne	jmp	#LR__0054
01cd4                 | '     c:=bc<<4+bc
01cd4     0D 1F 02 F6 | 	mov	local04, local02
01cd8     04 1E 66 F0 | 	shl	local04, #4
01cdc     0D 1F 02 F1 | 	add	local04, local02
01ce0     4C 00 90 FD | 	jmp	#LR__0057
01ce4                 | LR__0054
01ce4                 | '   elseif (graphmode & 48) ==16
01ce4     C4 BA 05 F1 | 	add	objptr, #196
01ce8     DD 1C 02 FB | 	rdlong	local03, objptr
01cec     C4 BA 85 F1 | 	sub	objptr, #196
01cf0     30 1C 06 F5 | 	and	local03, #48
01cf4     10 1C 0E F2 | 	cmp	local03, #16 wz
01cf8     28 00 90 5D |  if_ne	jmp	#LR__0055
01cfc                 | '     c:=bc<<6+bc<<4+bc<<2+bc
01cfc     0D 1F 02 F6 | 	mov	local04, local02
01d00     06 1E 66 F0 | 	shl	local04, #6
01d04     0D 21 02 F6 | 	mov	local05, local02
01d08     04 20 66 F0 | 	shl	local05, #4
01d0c     10 1F 02 F1 | 	add	local04, local05
01d10     0D 23 02 F6 | 	mov	local06, local02
01d14     02 22 66 F0 | 	shl	local06, #2
01d18     11 1F 02 F1 | 	add	local04, local06
01d1c     0D 1F 02 F1 | 	add	local04, local02
01d20                 | '   else
01d20     0C 00 90 FD | 	jmp	#LR__0056
01d24                 | LR__0055
01d24                 | '     if bc==1
01d24     01 1A 0E F2 | 	cmp	local02, #1 wz
01d28                 | '       c:=255
01d28     FF 1E 06 A6 |  if_e	mov	local04, #255
01d2c                 | '     else
01d2c                 | '       c:=0
01d2c     00 1E 06 56 |  if_ne	mov	local04, #0
01d30                 | LR__0056
01d30                 | LR__0057
01d30                 | LR__0058
01d30                 | '   bytefill(buf_ptr,c,buflen*4)
01d30     DD 0E 02 FB | 	rdlong	arg01, objptr
01d34     30 BA 05 F1 | 	add	objptr, #48
01d38     DD 12 02 FB | 	rdlong	arg03, objptr
01d3c     30 BA 85 F1 | 	sub	objptr, #48
01d40     02 12 66 F0 | 	shl	arg03, #2
01d44     0F 11 02 F6 | 	mov	arg02, local04
01d48     A0 00 A0 FD | 	call	#\builtin_bytefill_
01d4c                 | LR__0059
01d4c                 | ' setwritecolors(fc,bc)
01d4c                 | ' 
01d4c                 | ' 
01d4c                 | ' write_color:=ff
01d4c     38 BA 05 F1 | 	add	objptr, #56
01d50     DD 18 62 FC | 	wrlong	local01, objptr
01d54                 | ' write_background:=bb
01d54     04 BA 05 F1 | 	add	objptr, #4
01d58     DD 1A 62 FC | 	wrlong	local02, objptr
01d5c                 | ' cursor_x:=0
01d5c     08 BA 85 F1 | 	sub	objptr, #8
01d60     DD 00 48 FC | 	wrbyte	#0, objptr
01d64                 | ' cursor_y:=0
01d64     01 BA 05 F1 | 	add	objptr, #1
01d68     DD 00 48 FC | 	wrbyte	#0, objptr
01d6c     35 BA 85 F1 | 	sub	objptr, #53
01d70     0F CB 01 F6 | 	mov	result1, local04
01d74     AF F0 03 F6 | 	mov	ptra, fp
01d78     BF 00 A0 FD | 	call	#popregs_
01d7c                 | _cls_ret
01d7c     2D 00 64 FD | 	ret
01d80                 | 
01d80                 | ' 
01d80                 | ' 
01d80                 | ' '*************************************************************************
01d80                 | ' '                                                                        *
01d80                 | ' '  Conversions                                                           *
01d80                 | ' '                                                                        *
01d80                 | ' '*************************************************************************
01d80                 | ' 
01d80                 | ' ''---------- Convert a integer to dec string, return a pointer
01d80                 | ' 
01d80                 | ' pub inttostr(i):result |q,pos,k,j
01d80                 | _inttostr
01d80     06 5A 05 F6 | 	mov	COUNT_, #6
01d84     B0 00 A0 FD | 	call	#pushregs_
01d88     07 19 02 F6 | 	mov	local01, arg01
01d8c                 | ' 
01d8c                 | ' j:=i
01d8c     0C 1B 0A F6 | 	mov	local02, local01 wz
01d90                 | ' pos:=10
01d90     0A 1C 06 F6 | 	mov	local03, #10
01d94                 | ' k:=0
01d94     00 1E 06 F6 | 	mov	local04, #0
01d98                 | ' 
01d98                 | ' if (j==0)
01d98     18 00 90 5D |  if_ne	jmp	#LR__0060
01d9c                 | '   n_string[0]:=48
01d9c     44 BA 05 F1 | 	add	objptr, #68
01da0     DD 60 48 FC | 	wrbyte	#48, objptr
01da4                 | '   n_string[1]:=0
01da4     01 BA 05 F1 | 	add	objptr, #1
01da8     DD 00 48 FC | 	wrbyte	#0, objptr
01dac     45 BA 85 F1 | 	sub	objptr, #69
01db0                 | ' 
01db0                 | ' else
01db0     C4 00 90 FD | 	jmp	#LR__0067
01db4                 | LR__0060
01db4                 | '   if (j<0)
01db4     00 1A 5E F2 | 	cmps	local02, #0 wcz
01db8                 | '     j:=0-j
01db8     0D 1B 62 C6 |  if_b	neg	local02, local02
01dbc                 | '     k:=45
01dbc     2D 1E 06 C6 |  if_b	mov	local04, #45
01dc0                 | ' 
01dc0                 | '   n_string[11]:=0
01dc0     4F BA 05 F1 | 	add	objptr, #79
01dc4     DD 00 48 FC | 	wrbyte	#0, objptr
01dc8     4F BA 85 F1 | 	sub	objptr, #79
01dcc     70 E2 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
01dd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
01dd4                 | '   repeat while (pos>-1)
01dd4                 | LR__0061
01dd4     FF FF 7F FF 
01dd8     FF 1D 5E F2 | 	cmps	local03, ##-1 wcz
01ddc     34 00 90 ED |  if_be	jmp	#LR__0063
01de0                 | '     q:=j//10
01de0     0D 3D 02 F6 | 	mov	muldiva_, local02
01de4     0A 3E 06 F6 | 	mov	muldivb_, #10
01de8     D0 00 A0 FD | 	call	#divide_
01dec                 | '     q:=48+q
01dec     30 20 06 F6 | 	mov	local05, #48
01df0     1E 21 02 F1 | 	add	local05, muldiva_
01df4                 | '     n_string[pos]:=q
01df4     0E 23 02 F6 | 	mov	local06, local03
01df8     44 BA 05 F1 | 	add	objptr, #68
01dfc     DD 22 02 F1 | 	add	local06, objptr
01e00     11 21 42 FC | 	wrbyte	local05, local06
01e04                 | '     j:=j/10
01e04     1F 1B 02 F6 | 	mov	local02, muldivb_
01e08                 | '     pos-=1
01e08     01 1C 86 F1 | 	sub	local03, #1
01e0c     44 BA 85 F1 | 	sub	objptr, #68
01e10     C0 FF 9F FD | 	jmp	#LR__0061
01e14                 | LR__0062
01e14                 | LR__0063
01e14                 | '   repeat while n_string[0]==48
01e14                 | LR__0064
01e14     44 BA 05 F1 | 	add	objptr, #68
01e18     DD 22 C2 FA | 	rdbyte	local06, objptr
01e1c     44 BA 85 F1 | 	sub	objptr, #68
01e20     30 22 0E F2 | 	cmp	local06, #48 wz
01e24     20 00 90 5D |  if_ne	jmp	#LR__0065
01e28                 | '     bytemove(@n_string,@n_string+1,12)
01e28     44 BA 05 F1 | 	add	objptr, #68
01e2c     DD 0E 02 F6 | 	mov	arg01, objptr
01e30     DD 10 02 F6 | 	mov	arg02, objptr
01e34     44 BA 85 F1 | 	sub	objptr, #68
01e38     01 10 06 F1 | 	add	arg02, #1
01e3c     0C 12 06 F6 | 	mov	arg03, #12
01e40     78 0C B0 FD | 	call	#__system____builtin_memmove
01e44     CC FF 9F FD | 	jmp	#LR__0064
01e48                 | LR__0065
01e48                 | ' 
01e48                 | '   if k==45
01e48     2D 1E 0E F2 | 	cmp	local04, #45 wz
01e4c     28 00 90 5D |  if_ne	jmp	#LR__0066
01e50                 | '      bytemove(@n_string+1,@n_string,12)
01e50     44 BA 05 F1 | 	add	objptr, #68
01e54     DD 0E 02 F6 | 	mov	arg01, objptr
01e58     01 0E 06 F1 | 	add	arg01, #1
01e5c     DD 10 02 F6 | 	mov	arg02, objptr
01e60     44 BA 85 F1 | 	sub	objptr, #68
01e64     0C 12 06 F6 | 	mov	arg03, #12
01e68     50 0C B0 FD | 	call	#__system____builtin_memmove
01e6c                 | '      n_string[0]:=k
01e6c     44 BA 05 F1 | 	add	objptr, #68
01e70     DD 1E 42 FC | 	wrbyte	local04, objptr
01e74     44 BA 85 F1 | 	sub	objptr, #68
01e78                 | LR__0066
01e78                 | LR__0067
01e78                 | ' 
01e78                 | ' q:=@n_string
01e78     44 BA 05 F1 | 	add	objptr, #68
01e7c     DD CA 01 F6 | 	mov	result1, objptr
01e80     44 BA 85 F1 | 	sub	objptr, #68
01e84                 | ' return q
01e84     AF F0 03 F6 | 	mov	ptra, fp
01e88     BF 00 A0 FD | 	call	#popregs_
01e8c                 | _inttostr_ret
01e8c     2D 00 64 FD | 	ret
01e90                 | 
01e90                 | ' 
01e90                 | ' 
01e90                 | ' 
01e90                 | ' '*************************************************************************
01e90                 | ' '                                                                        *
01e90                 | ' '  Mode setting and driver start                                                          *
01e90                 | ' '                                                                        *
01e90                 | ' '*************************************************************************
01e90                 | ' 
01e90                 | ' ''---------  Set the graphics mode
01e90                 | ' 
01e90                 | ' 
01e90                 | ' 
01e90                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01e90                 | _setmode
01e90     0A 5A 05 F6 | 	mov	COUNT_, #10
01e94     B0 00 A0 FD | 	call	#pushregs_
01e98     07 19 02 F6 | 	mov	local01, arg01
01e9c                 | ' 
01e9c                 | ' '' mode:tn_bb_cc_vv_hh
01e9c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
01e9c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
01e9c                 | ' 
01e9c                 | ' if mode==(512+192+48)
01e9c     01 00 00 FF 
01ea0     F0 18 0E F2 | 	cmp	local01, ##752 wz
01ea4                 | '   return 'no RAM
01ea4     C8 05 90 AD |  if_e	jmp	#LR__0090
01ea8                 | ' 
01ea8                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
01ea8     0C 1B 02 F6 | 	mov	local02, local01
01eac     06 1A 46 F0 | 	shr	local02, #6
01eb0     07 1A 06 F5 | 	and	local02, #7
01eb4     08 1A 26 F3 | 	fle	local02, #8
01eb8     0D 1D 02 F6 | 	mov	local03, local02
01ebc     30 1C 62 FD | 	jmprel	local03
01ec0                 | LR__0068
01ec0     20 00 90 FD | 	jmp	#LR__0069
01ec4     48 00 90 FD | 	jmp	#LR__0070
01ec8     70 00 90 FD | 	jmp	#LR__0071
01ecc     98 00 90 FD | 	jmp	#LR__0072
01ed0     C0 00 90 FD | 	jmp	#LR__0073
01ed4     E8 00 90 FD | 	jmp	#LR__0074
01ed8     10 01 90 FD | 	jmp	#LR__0075
01edc     38 01 90 FD | 	jmp	#LR__0076
01ee0     70 01 90 FD | 	jmp	#LR__0077
01ee4                 | LR__0069
01ee4                 | ' 
01ee4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
01ee4     50 BA 05 F1 | 	add	objptr, #80
01ee8     DD 0E 02 F6 | 	mov	arg01, objptr
01eec     50 BA 85 F1 | 	sub	objptr, #80
01ef0     0E 00 00 FF 
01ef4     58 BE 05 F1 | 	add	ptr__dat__, ##7256
01ef8     DF 10 02 F6 | 	mov	arg02, ptr__dat__
01efc     0E 00 00 FF 
01f00     58 BE 85 F1 | 	sub	ptr__dat__, ##7256
01f04     10 12 06 F6 | 	mov	arg03, #16
01f08     40 0C B0 FD | 	call	#__system__longmove
01f0c     44 01 90 FD | 	jmp	#LR__0077
01f10                 | LR__0070
01f10                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01f10     50 BA 05 F1 | 	add	objptr, #80
01f14     DD 0E 02 F6 | 	mov	arg01, objptr
01f18     50 BA 85 F1 | 	sub	objptr, #80
01f1c     0E 00 00 FF 
01f20     98 BE 05 F1 | 	add	ptr__dat__, ##7320
01f24     DF 10 02 F6 | 	mov	arg02, ptr__dat__
01f28     0E 00 00 FF 
01f2c     98 BE 85 F1 | 	sub	ptr__dat__, ##7320
01f30     10 12 06 F6 | 	mov	arg03, #16
01f34     14 0C B0 FD | 	call	#__system__longmove
01f38     18 01 90 FD | 	jmp	#LR__0077
01f3c                 | LR__0071
01f3c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
01f3c     50 BA 05 F1 | 	add	objptr, #80
01f40     DD 0E 02 F6 | 	mov	arg01, objptr
01f44     50 BA 85 F1 | 	sub	objptr, #80
01f48     0E 00 00 FF 
01f4c     D8 BE 05 F1 | 	add	ptr__dat__, ##7384
01f50     DF 10 02 F6 | 	mov	arg02, ptr__dat__
01f54     0E 00 00 FF 
01f58     D8 BE 85 F1 | 	sub	ptr__dat__, ##7384
01f5c     10 12 06 F6 | 	mov	arg03, #16
01f60     E8 0B B0 FD | 	call	#__system__longmove
01f64     EC 00 90 FD | 	jmp	#LR__0077
01f68                 | LR__0072
01f68                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
01f68     50 BA 05 F1 | 	add	objptr, #80
01f6c     DD 0E 02 F6 | 	mov	arg01, objptr
01f70     50 BA 85 F1 | 	sub	objptr, #80
01f74     0E 00 00 FF 
01f78     18 BF 05 F1 | 	add	ptr__dat__, ##7448
01f7c     DF 10 02 F6 | 	mov	arg02, ptr__dat__
01f80     0E 00 00 FF 
01f84     18 BF 85 F1 | 	sub	ptr__dat__, ##7448
01f88     10 12 06 F6 | 	mov	arg03, #16
01f8c     BC 0B B0 FD | 	call	#__system__longmove
01f90     C0 00 90 FD | 	jmp	#LR__0077
01f94                 | LR__0073
01f94                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
01f94     50 BA 05 F1 | 	add	objptr, #80
01f98     DD 0E 02 F6 | 	mov	arg01, objptr
01f9c     50 BA 85 F1 | 	sub	objptr, #80
01fa0     0E 00 00 FF 
01fa4     58 BF 05 F1 | 	add	ptr__dat__, ##7512
01fa8     DF 10 02 F6 | 	mov	arg02, ptr__dat__
01fac     0E 00 00 FF 
01fb0     58 BF 85 F1 | 	sub	ptr__dat__, ##7512
01fb4     10 12 06 F6 | 	mov	arg03, #16
01fb8     90 0B B0 FD | 	call	#__system__longmove
01fbc     94 00 90 FD | 	jmp	#LR__0077
01fc0                 | LR__0074
01fc0                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
01fc0     50 BA 05 F1 | 	add	objptr, #80
01fc4     DD 0E 02 F6 | 	mov	arg01, objptr
01fc8     50 BA 85 F1 | 	sub	objptr, #80
01fcc     0E 00 00 FF 
01fd0     98 BF 05 F1 | 	add	ptr__dat__, ##7576
01fd4     DF 10 02 F6 | 	mov	arg02, ptr__dat__
01fd8     0E 00 00 FF 
01fdc     98 BF 85 F1 | 	sub	ptr__dat__, ##7576
01fe0     10 12 06 F6 | 	mov	arg03, #16
01fe4     64 0B B0 FD | 	call	#__system__longmove
01fe8     68 00 90 FD | 	jmp	#LR__0077
01fec                 | LR__0075
01fec                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
01fec     50 BA 05 F1 | 	add	objptr, #80
01ff0     DD 0E 02 F6 | 	mov	arg01, objptr
01ff4     50 BA 85 F1 | 	sub	objptr, #80
01ff8     0E 00 00 FF 
01ffc     D8 BF 05 F1 | 	add	ptr__dat__, ##7640
02000     DF 10 02 F6 | 	mov	arg02, ptr__dat__
02004     0E 00 00 FF 
02008     D8 BF 85 F1 | 	sub	ptr__dat__, ##7640
0200c     10 12 06 F6 | 	mov	arg03, #16
02010     38 0B B0 FD | 	call	#__system__longmove
02014     3C 00 90 FD | 	jmp	#LR__0077
02018                 | LR__0076
02018                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02018     50 BA 05 F1 | 	add	objptr, #80
0201c     DD 1E 02 F6 | 	mov	local04, objptr
02020     0F 21 02 F6 | 	mov	local05, local04
02024     0F 00 00 FF 
02028     18 BE 05 F1 | 	add	ptr__dat__, ##7704
0202c     DF 22 02 F6 | 	mov	local06, ptr__dat__
02030     11 25 02 F6 | 	mov	local07, local06
02034     10 26 06 F6 | 	mov	local08, #16
02038     10 0F 02 F6 | 	mov	arg01, local05
0203c     12 11 02 F6 | 	mov	arg02, local07
02040     10 12 06 F6 | 	mov	arg03, #16
02044     50 BA 85 F1 | 	sub	objptr, #80
02048     0F 00 00 FF 
0204c     18 BE 85 F1 | 	sub	ptr__dat__, ##7704
02050     F8 0A B0 FD | 	call	#__system__longmove
02054                 | LR__0077
02054                 | ' 
02054                 | ' ' 4-bit graphics: do nothing with timings :)
02054                 | ' if mode<512
02054     01 00 00 FF 
02058     00 18 5E F2 | 	cmps	local01, ##512 wcz
0205c     1C 00 90 3D |  if_ae	jmp	#LR__0078
02060                 | '   palette_ptr:=@ataripalette
02060     0C 00 00 FF 
02064     58 BE 05 F1 | 	add	ptr__dat__, ##6232
02068     18 BA 05 F1 | 	add	objptr, #24
0206c     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
02070     18 BA 85 F1 | 	sub	objptr, #24
02074     0C 00 00 FF 
02078     58 BE 85 F1 | 	sub	ptr__dat__, ##6232
0207c                 | LR__0078
0207c                 | ' 
0207c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
0207c     0C 1B 02 F6 | 	mov	local02, local01
02080     01 00 00 FF 
02084     30 1A 06 F5 | 	and	local02, ##560
02088     01 00 00 FF 
0208c     30 1A 0E F2 | 	cmp	local02, ##560 wz
02090     44 00 90 5D |  if_ne	jmp	#LR__0079
02094                 | '   timings[5]:=4
02094     64 BA 05 F1 | 	add	objptr, #100
02098     DD 08 68 FC | 	wrlong	#4, objptr
0209c                 | '   timings[11]:=timings[11]<<1
0209c     18 BA 05 F1 | 	add	objptr, #24
020a0     DD 1A 02 FB | 	rdlong	local02, objptr
020a4     01 1A 66 F0 | 	shl	local02, #1
020a8     DD 1A 62 FC | 	wrlong	local02, objptr
020ac                 | '   putpixel:=p8
020ac     6C BA 05 F1 | 	add	objptr, #108
020b0     DD 1A 02 FB | 	rdlong	local02, objptr
020b4     10 BA 85 F1 | 	sub	objptr, #16
020b8     DD 1A 62 FC | 	wrlong	local02, objptr
020bc                 | '   palette_ptr:=@ataripalette
020bc     0C 00 00 FF 
020c0     58 BE 05 F1 | 	add	ptr__dat__, ##6232
020c4     C0 BA 85 F1 | 	sub	objptr, #192
020c8     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
020cc     18 BA 85 F1 | 	sub	objptr, #24
020d0     0C 00 00 FF 
020d4     58 BE 85 F1 | 	sub	ptr__dat__, ##6232
020d8                 | LR__0079
020d8                 | ' 
020d8                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
020d8     0C 1B 02 F6 | 	mov	local02, local01
020dc     01 00 00 FF 
020e0     30 1A 06 F5 | 	and	local02, ##560
020e4     01 00 00 FF 
020e8     10 1A 0E F2 | 	cmp	local02, ##528 wz
020ec     44 00 90 5D |  if_ne	jmp	#LR__0080
020f0                 | '   timings[5]:=16
020f0     64 BA 05 F1 | 	add	objptr, #100
020f4     DD 20 68 FC | 	wrlong	#16, objptr
020f8                 | '   timings[11]:=timings[11]>>1
020f8     18 BA 05 F1 | 	add	objptr, #24
020fc     DD 1A 02 FB | 	rdlong	local02, objptr
02100     01 1A 46 F0 | 	shr	local02, #1
02104     DD 1A 62 FC | 	wrlong	local02, objptr
02108                 | '   putpixel:=p2
02108     64 BA 05 F1 | 	add	objptr, #100
0210c     DD 1A 02 FB | 	rdlong	local02, objptr
02110     08 BA 85 F1 | 	sub	objptr, #8
02114     DD 1A 62 FC | 	wrlong	local02, objptr
02118                 | '   palette_ptr:=@fourcolors
02118     0C 00 00 FF 
0211c     08 BE 05 F1 | 	add	ptr__dat__, ##6152
02120     C0 BA 85 F1 | 	sub	objptr, #192
02124     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
02128     18 BA 85 F1 | 	sub	objptr, #24
0212c     0C 00 00 FF 
02130     08 BE 85 F1 | 	sub	ptr__dat__, ##6152
02134                 | LR__0080
02134                 | ' 
02134                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02134     0C 1B 02 F6 | 	mov	local02, local01
02138     01 00 00 FF 
0213c     30 1A 06 F5 | 	and	local02, ##560
02140     01 00 00 FF 
02144     00 1A 0E F2 | 	cmp	local02, ##512 wz
02148     44 00 90 5D |  if_ne	jmp	#LR__0081
0214c                 | '   timings[5]:=32
0214c     64 BA 05 F1 | 	add	objptr, #100
02150     DD 40 68 FC | 	wrlong	#32, objptr
02154                 | '   timings[11]:=timings[11]>>2
02154     18 BA 05 F1 | 	add	objptr, #24
02158     DD 1A 02 FB | 	rdlong	local02, objptr
0215c     02 1A 46 F0 | 	shr	local02, #2
02160     DD 1A 62 FC | 	wrlong	local02, objptr
02164                 | '   putpixel:=p1
02164     60 BA 05 F1 | 	add	objptr, #96
02168     DD 1A 02 FB | 	rdlong	local02, objptr
0216c     04 BA 85 F1 | 	sub	objptr, #4
02170     DD 1A 62 FC | 	wrlong	local02, objptr
02174                 | '   palette_ptr:=@twocolors
02174     0C 00 00 FF 
02178     00 BE 05 F1 | 	add	ptr__dat__, ##6144
0217c     C0 BA 85 F1 | 	sub	objptr, #192
02180     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
02184     18 BA 85 F1 | 	sub	objptr, #24
02188     0C 00 00 FF 
0218c     00 BE 85 F1 | 	sub	ptr__dat__, ##6144
02190                 | LR__0081
02190                 | ' 
02190                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02190     0C 1B 02 F6 | 	mov	local02, local01
02194     01 00 00 FF 
02198     30 1A 06 F5 | 	and	local02, ##560
0219c     01 00 00 FF 
021a0     20 1A 0E F2 | 	cmp	local02, ##544 wz
021a4     2C 00 90 5D |  if_ne	jmp	#LR__0082
021a8                 | '   putpixel:=p4
021a8     E4 BA 05 F1 | 	add	objptr, #228
021ac     DD 1A 02 FB | 	rdlong	local02, objptr
021b0     0C BA 85 F1 | 	sub	objptr, #12
021b4     DD 1A 62 FC | 	wrlong	local02, objptr
021b8                 | '   palette_ptr:=@vga16
021b8     0C 00 00 FF 
021bc     18 BE 05 F1 | 	add	ptr__dat__, ##6168
021c0     C0 BA 85 F1 | 	sub	objptr, #192
021c4     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
021c8     18 BA 85 F1 | 	sub	objptr, #24
021cc     0C 00 00 FF 
021d0     18 BE 85 F1 | 	sub	ptr__dat__, ##6168
021d4                 | LR__0082
021d4                 | ' 
021d4                 | ' repeat i from 0 to 4
021d4     00 28 06 F6 | 	mov	local09, #0
021d8     80 DE 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
021dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
021e0                 | LR__0083
021e0                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
021e0     14 1F 02 F6 | 	mov	local04, local09
021e4     02 1E 66 F0 | 	shl	local04, #2
021e8     50 BA 05 F1 | 	add	objptr, #80
021ec     DD 20 02 F6 | 	mov	local05, objptr
021f0     DD 1E 02 F1 | 	add	local04, objptr
021f4     2C BA 85 F1 | 	sub	objptr, #44
021f8     DD 24 02 FB | 	rdlong	local07, objptr
021fc     12 23 02 F6 | 	mov	local06, local07
02200     11 22 66 F0 | 	shl	local06, #17
02204     0F 1B 02 FB | 	rdlong	local02, local04
02208     11 1B 02 F1 | 	add	local02, local06
0220c     80 40 38 FF 
02210     00 1A 06 F1 | 	add	local02, ##1887502336
02214     14 27 02 F6 | 	mov	local08, local09
02218     02 26 66 F0 | 	shl	local08, #2
0221c     2C BA 05 F1 | 	add	objptr, #44
02220     DD 2A 02 F6 | 	mov	local10, objptr
02224     DD 26 02 F1 | 	add	local08, objptr
02228     13 1B 62 FC | 	wrlong	local02, local08
0222c     01 28 06 F1 | 	add	local09, #1
02230     05 28 5E F2 | 	cmps	local09, #5 wcz
02234     50 BA 85 F1 | 	sub	objptr, #80
02238     A4 FF 9F CD |  if_b	jmp	#LR__0083
0223c                 | LR__0084
0223c                 | ' timings[5]:=timings[5]+hdmibase<<17
0223c     24 BA 05 F1 | 	add	objptr, #36
02240     DD 1E 02 FB | 	rdlong	local04, objptr
02244     11 1E 66 F0 | 	shl	local04, #17
02248     40 BA 05 F1 | 	add	objptr, #64
0224c     DD 22 02 FB | 	rdlong	local06, objptr
02250     11 1B 02 F6 | 	mov	local02, local06
02254     0F 1B 02 F1 | 	add	local02, local04
02258     DD 1A 62 FC | 	wrlong	local02, objptr
0225c                 | ' clkfreq:=timings[13]
0225c     20 BA 05 F1 | 	add	objptr, #32
02260     DD 1A 02 FB | 	rdlong	local02, objptr
02264     14 1A 66 FC | 	wrlong	local02, #20
02268                 | ' hubset(timings[14])
02268     04 BA 05 F1 | 	add	objptr, #4
0226c     DD 0E 02 FB | 	rdlong	arg01, objptr
02270     88 BA 85 F1 | 	sub	objptr, #136
02274     00 0E 62 FD | 	hubset	arg01
02278                 | ' waitms(1)
02278     01 0E 06 F6 | 	mov	arg01, #1
0227c     2C 0A B0 FD | 	call	#__system___waitms
02280                 | ' 
02280                 | ' 
02280                 | ' xzoom:=1<<(mode & 3)
02280     0C 1F 02 F6 | 	mov	local04, local01
02284     03 1E 06 F5 | 	and	local04, #3
02288     0F 1B C2 F9 | 	decod	local02, local04
0228c     CC BA 05 F1 | 	add	objptr, #204
02290     DD 1A 62 FC | 	wrlong	local02, objptr
02294                 | ' 
02294                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02294     0D 1F 02 F6 | 	mov	local04, local02
02298     CC BA 85 F1 | 	sub	objptr, #204
0229c     08 1E 0E F2 | 	cmp	local04, #8 wz
022a0     24 00 90 5D |  if_ne	jmp	#LR__0085
022a4     0C 21 02 F6 | 	mov	local05, local01
022a8     04 20 46 F0 | 	shr	local05, #4
022ac     03 20 06 F5 | 	and	local05, #3
022b0     03 20 0E F2 | 	cmp	local05, #3 wz
022b4     10 00 90 AD |  if_e	jmp	#LR__0085
022b8                 | '   xzoom:=4
022b8     04 1A 06 F6 | 	mov	local02, #4
022bc     CC BA 05 F1 | 	add	objptr, #204
022c0     DD 08 68 FC | 	wrlong	#4, objptr
022c4     CC BA 85 F1 | 	sub	objptr, #204
022c8                 | LR__0085
022c8                 | ' 
022c8                 | ' yzoom:=1<<((mode>>2) & 3)
022c8     0C 1F 02 F6 | 	mov	local04, local01
022cc     02 1E 46 F0 | 	shr	local04, #2
022d0     03 1E 06 F5 | 	and	local04, #3
022d4     0F 1B C2 F9 | 	decod	local02, local04
022d8     D0 BA 05 F1 | 	add	objptr, #208
022dc     DD 1A 62 FC | 	wrlong	local02, objptr
022e0                 | ' azoom:=xzoom*yzoom
022e0     04 BA 85 F1 | 	sub	objptr, #4
022e4     DD 1E 02 FB | 	rdlong	local04, objptr
022e8     04 BA 05 F1 | 	add	objptr, #4
022ec     DD 22 02 FB | 	rdlong	local06, objptr
022f0     11 1F 02 FD | 	qmul	local04, local06
022f4     18 1A 62 FD | 	getqx	local02
022f8     04 BA 05 F1 | 	add	objptr, #4
022fc     DD 1A 62 FC | 	wrlong	local02, objptr
02300                 | ' 
02300                 | ' cpl:=timings[11]
02300     58 BA 85 F1 | 	sub	objptr, #88
02304     DD 1A 02 FB | 	rdlong	local02, objptr
02308     14 BA 05 F1 | 	add	objptr, #20
0230c     DD 1A 62 FC | 	wrlong	local02, objptr
02310     90 BA 85 F1 | 	sub	objptr, #144
02314                 | ' if (mode<512)
02314     01 00 00 FF 
02318     00 18 5E F2 | 	cmps	local01, ##512 wcz
0231c     60 00 90 3D |  if_ae	jmp	#LR__0086
02320                 | '   lines:=(timings[12]>>4)+/yzoom
02320     80 BA 05 F1 | 	add	objptr, #128
02324     DD 3C 02 FB | 	rdlong	muldiva_, objptr
02328     04 3C 46 F0 | 	shr	muldiva_, #4
0232c     50 BA 05 F1 | 	add	objptr, #80
02330     DD 3E 02 FB | 	rdlong	muldivb_, objptr
02334     D0 BA 85 F1 | 	sub	objptr, #208
02338     CC 00 A0 FD | 	call	#unsdivide_
0233c     94 BA 05 F1 | 	add	objptr, #148
02340     DD 3E 62 FC | 	wrlong	muldivb_, objptr
02344                 | '   if ((timings[12]>>4)+//yzoom) <>0
02344     14 BA 85 F1 | 	sub	objptr, #20
02348     DD 3C 02 FB | 	rdlong	muldiva_, objptr
0234c     04 3C 46 F0 | 	shr	muldiva_, #4
02350     50 BA 05 F1 | 	add	objptr, #80
02354     DD 3E 02 FB | 	rdlong	muldivb_, objptr
02358     D0 BA 85 F1 | 	sub	objptr, #208
0235c     CC 00 A0 FD | 	call	#unsdivide_
02360     00 3C 0E F2 | 	cmp	muldiva_, #0 wz
02364     AC 00 90 AD |  if_e	jmp	#LR__0089
02368                 | '     lines +=1
02368     94 BA 05 F1 | 	add	objptr, #148
0236c     DD 1A 02 FB | 	rdlong	local02, objptr
02370     01 1A 06 F1 | 	add	local02, #1
02374     DD 1A 62 FC | 	wrlong	local02, objptr
02378     94 BA 85 F1 | 	sub	objptr, #148
0237c                 | ' 
0237c                 | ' else
0237c     94 00 90 FD | 	jmp	#LR__0089
02380                 | LR__0086
02380                 | '   lines:=timings[12]/yzoom
02380     80 BA 05 F1 | 	add	objptr, #128
02384     DD 3C 02 FB | 	rdlong	muldiva_, objptr
02388     50 BA 05 F1 | 	add	objptr, #80
0238c     DD 3E 02 FB | 	rdlong	muldivb_, objptr
02390     D0 BA 85 F1 | 	sub	objptr, #208
02394     D0 00 A0 FD | 	call	#divide_
02398     94 BA 05 F1 | 	add	objptr, #148
0239c     DD 3E 62 FC | 	wrlong	muldivb_, objptr
023a0                 | '   if cpl//xzoom==0
023a0     04 BA 85 F1 | 	sub	objptr, #4
023a4     DD 3C 02 FB | 	rdlong	muldiva_, objptr
023a8     3C BA 05 F1 | 	add	objptr, #60
023ac     DD 3E 02 FB | 	rdlong	muldivb_, objptr
023b0     CC BA 85 F1 | 	sub	objptr, #204
023b4     D0 00 A0 FD | 	call	#divide_
023b8     00 3C 0E F2 | 	cmp	muldiva_, #0 wz
023bc     28 00 90 5D |  if_ne	jmp	#LR__0087
023c0                 | '     cpl:=cpl/xzoom
023c0     90 BA 05 F1 | 	add	objptr, #144
023c4     DD 3C 02 FB | 	rdlong	muldiva_, objptr
023c8     3C BA 05 F1 | 	add	objptr, #60
023cc     DD 3E 02 FB | 	rdlong	muldivb_, objptr
023d0     CC BA 85 F1 | 	sub	objptr, #204
023d4     D0 00 A0 FD | 	call	#divide_
023d8     90 BA 05 F1 | 	add	objptr, #144
023dc     DD 3E 62 FC | 	wrlong	muldivb_, objptr
023e0     90 BA 85 F1 | 	sub	objptr, #144
023e4                 | '   else
023e4     2C 00 90 FD | 	jmp	#LR__0088
023e8                 | LR__0087
023e8                 | '     cpl:=cpl/xzoom+1
023e8     90 BA 05 F1 | 	add	objptr, #144
023ec     DD 3C 02 FB | 	rdlong	muldiva_, objptr
023f0     3C BA 05 F1 | 	add	objptr, #60
023f4     DD 3E 02 FB | 	rdlong	muldivb_, objptr
023f8     CC BA 85 F1 | 	sub	objptr, #204
023fc     D0 00 A0 FD | 	call	#divide_
02400     1F 1B 02 F6 | 	mov	local02, muldivb_
02404     01 1A 06 F1 | 	add	local02, #1
02408     90 BA 05 F1 | 	add	objptr, #144
0240c     DD 1A 62 FC | 	wrlong	local02, objptr
02410     90 BA 85 F1 | 	sub	objptr, #144
02414                 | LR__0088
02414                 | LR__0089
02414                 | ' 
02414                 | ' buflen:=(cpl*lines)
02414     90 BA 05 F1 | 	add	objptr, #144
02418     DD 1E 02 FB | 	rdlong	local04, objptr
0241c     04 BA 05 F1 | 	add	objptr, #4
02420     DD 22 02 FB | 	rdlong	local06, objptr
02424     11 1F 02 FD | 	qmul	local04, local06
02428     18 1A 62 FD | 	getqx	local02
0242c     64 BA 85 F1 | 	sub	objptr, #100
02430     DD 1A 62 FC | 	wrlong	local02, objptr
02434                 | ' buf_ptr:=$80000-4*buflen
02434     0D 1F 02 F6 | 	mov	local04, local02
02438     30 BA 85 F1 | 	sub	objptr, #48
0243c     02 1E 66 F0 | 	shl	local04, #2
02440     13 1A C6 F9 | 	decod	local02, #19
02444     0F 1B 82 F1 | 	sub	local02, local04
02448     DD 1A 62 FC | 	wrlong	local02, objptr
0244c                 | ' mode_ptr:=@timings
0244c     50 BA 05 F1 | 	add	objptr, #80
02450     DD 1A 02 F6 | 	mov	local02, objptr
02454     3C BA 85 F1 | 	sub	objptr, #60
02458     DD 1A 62 FC | 	wrlong	local02, objptr
0245c                 | ' graphmode:=mode
0245c     B0 BA 05 F1 | 	add	objptr, #176
02460     DD 18 62 FC | 	wrlong	local01, objptr
02464     C4 BA 85 F1 | 	sub	objptr, #196
02468                 | ' makedl(mode)
02468     0C 0F 02 F6 | 	mov	arg01, local01
0246c     0C 00 B0 FD | 	call	#_makedl
02470                 | LR__0090
02470     AF F0 03 F6 | 	mov	ptra, fp
02474     BF 00 A0 FD | 	call	#popregs_
02478                 | _setmode_ret
02478     2D 00 64 FD | 	ret
0247c                 | 
0247c                 | ' 
0247c                 | ' 
0247c                 | ' 
0247c                 | ' 
0247c                 | ' '---------- Make a display list
0247c                 | ' 
0247c                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
0247c                 | _makedl
0247c                 | ' 
0247c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0247c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0247c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0247c                 | ' 
0247c                 | ' '   0 - display a up/down border line
0247c                 | ' 
0247c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
0247c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
0247c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
0247c                 | ' '    nnnn - font line to display, 0..15
0247c                 | ' '    llllll - character line, determines the cursor Y position
0247c                 | ' 
0247c                 | ' 
0247c                 | ' if (mode &256==0)
0247c     00 0F CE F7 | 	test	arg01, #256 wz
02480     1C 00 90 5D |  if_ne	jmp	#LR__0091
02484                 | '   dl_ptr:=buf_ptr-4*576
02484     DD CE 01 FB | 	rdlong	_var01, objptr
02488     04 00 00 FF 
0248c     00 CF 85 F1 | 	sub	_var01, ##2304
02490     1C BA 05 F1 | 	add	objptr, #28
02494     DD CE 61 FC | 	wrlong	_var01, objptr
02498     1C BA 85 F1 | 	sub	objptr, #28
0249c                 | ' else
0249c     18 00 90 FD | 	jmp	#LR__0092
024a0                 | LR__0091
024a0                 | '   dl_ptr:=buf_ptr-4*496
024a0     DD CE 01 FB | 	rdlong	_var01, objptr
024a4     03 00 00 FF 
024a8     C0 CF 85 F1 | 	sub	_var01, ##1984
024ac     1C BA 05 F1 | 	add	objptr, #28
024b0     DD CE 61 FC | 	wrlong	_var01, objptr
024b4     1C BA 85 F1 | 	sub	objptr, #28
024b8                 | LR__0092
024b8                 | '  ' dl_ptr:=buf_ptr-4*540
024b8                 | ' 
024b8                 | ' vzoom:=((mode>>2) & 3)
024b8     07 D1 01 F6 | 	mov	_var02, arg01
024bc     02 D0 45 F0 | 	shr	_var02, #2
024c0     03 D0 05 F5 | 	and	_var02, #3
024c4                 | ' 
024c4                 | ' 
024c4                 | ' if mode<512 '' text modes
024c4     01 00 00 FF 
024c8     00 0E 5E F2 | 	cmps	arg01, ##512 wcz
024cc     E8 01 90 3D |  if_ae	jmp	#LR__0100
024d0                 | ' 
024d0                 | '   if timings[6]>0 'borders
024d0     68 BA 05 F1 | 	add	objptr, #104
024d4     DD CE 01 FB | 	rdlong	_var01, objptr
024d8     68 BA 85 F1 | 	sub	objptr, #104
024dc     00 CE 5D F2 | 	cmps	_var01, #0 wcz
024e0     D4 00 90 ED |  if_be	jmp	#LR__0097
024e4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
024e4     00 D2 05 F6 | 	mov	_var03, #0
024e8     68 BA 05 F1 | 	add	objptr, #104
024ec     DD D4 01 FB | 	rdlong	_var04, objptr
024f0     68 BA 85 F1 | 	sub	objptr, #104
024f4     01 D4 85 F1 | 	sub	_var04, #1
024f8     00 D4 5D F2 | 	cmps	_var04, #0 wcz
024fc     01 D6 05 16 |  if_a	mov	_var05, #1
02500     01 D6 65 E6 |  if_be	neg	_var05, #1
02504     EB D8 01 F6 | 	mov	_var06, _var05
02508     EB D4 01 F1 | 	add	_var04, _var05
0250c     18 DB 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
02510     93 00 A0 FD | 	call	#FCACHE_LOAD_
02514                 | LR__0093
02514                 | '       long[dl_ptr+4*i]:=$0
02514     1C BA 05 F1 | 	add	objptr, #28
02518     DD DA 01 FB | 	rdlong	_var07, objptr
0251c     1C BA 85 F1 | 	sub	objptr, #28
02520     E9 DC 01 F6 | 	mov	_var08, _var03
02524     02 DC 65 F0 | 	shl	_var08, #2
02528     EE DA 01 F1 | 	add	_var07, _var08
0252c     ED 00 68 FC | 	wrlong	#0, _var07
02530     EC D2 01 F1 | 	add	_var03, _var06
02534     EA D2 09 F2 | 	cmp	_var03, _var04 wz
02538     D8 FF 9F 5D |  if_ne	jmp	#LR__0093
0253c                 | LR__0094
0253c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0253c     68 BA 05 F1 | 	add	objptr, #104
02540     DD D2 01 FB | 	rdlong	_var03, objptr
02544     18 BA 05 F1 | 	add	objptr, #24
02548     DD D6 01 FB | 	rdlong	_var05, objptr
0254c     EB D2 01 F1 | 	add	_var03, _var05
02550     0C BA 05 F1 | 	add	objptr, #12
02554     DD DE 01 FB | 	rdlong	_var09, objptr
02558     01 DE 85 F1 | 	sub	_var09, #1
0255c     24 BA 85 F1 | 	sub	objptr, #36
02560     DD E0 01 FB | 	rdlong	_var10, objptr
02564     18 BA 05 F1 | 	add	objptr, #24
02568     DD E2 01 FB | 	rdlong	_var11, objptr
0256c     80 BA 85 F1 | 	sub	objptr, #128
02570     F1 E0 01 F1 | 	add	_var10, _var11
02574     F0 DE 59 F2 | 	cmps	_var09, _var10 wcz
02578     01 DC 05 16 |  if_a	mov	_var08, #1
0257c     01 DC 65 E6 |  if_be	neg	_var08, #1
02580     EE E4 01 F6 | 	mov	_var12, _var08
02584     EE DE 01 F1 | 	add	_var09, _var08
02588     9C DA 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
0258c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02590                 | LR__0095
02590                 | '       long[dl_ptr+4*i]:=$0
02590     1C BA 05 F1 | 	add	objptr, #28
02594     DD E6 01 FB | 	rdlong	_var13, objptr
02598     1C BA 85 F1 | 	sub	objptr, #28
0259c     E9 E8 01 F6 | 	mov	_var14, _var03
025a0     02 E8 65 F0 | 	shl	_var14, #2
025a4     F4 E6 01 F1 | 	add	_var13, _var14
025a8     F3 00 68 FC | 	wrlong	#0, _var13
025ac     F2 D2 01 F1 | 	add	_var03, _var12
025b0     EF D2 09 F2 | 	cmp	_var03, _var09 wz
025b4     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
025b8                 | LR__0096
025b8                 | LR__0097
025b8                 | '   lpc:=16<<vzoom
025b8     10 EA 05 F6 | 	mov	_var15, #16
025bc     E8 EA 61 F0 | 	shl	_var15, _var02
025c0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
025c0     68 BA 05 F1 | 	add	objptr, #104
025c4     DD D2 01 FB | 	rdlong	_var03, objptr
025c8     E9 EC 01 F6 | 	mov	_var16, _var03
025cc     18 BA 05 F1 | 	add	objptr, #24
025d0     DD EE 01 FB | 	rdlong	_var17, objptr
025d4     F7 EC 01 F1 | 	add	_var16, _var17
025d8     01 EC 85 F1 | 	sub	_var16, #1
025dc     18 BA 85 F1 | 	sub	objptr, #24
025e0     DD DC 01 FB | 	rdlong	_var08, objptr
025e4     68 BA 85 F1 | 	sub	objptr, #104
025e8     EE EC 59 F2 | 	cmps	_var16, _var08 wcz
025ec     01 F0 05 16 |  if_a	mov	_var18, #1
025f0     01 F0 65 E6 |  if_be	neg	_var18, #1
025f4     F8 F2 01 F6 | 	mov	_var19, _var18
025f8     F8 EC 01 F1 | 	add	_var16, _var18
025fc     B4 DA 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
02600     93 00 A0 FD | 	call	#FCACHE_LOAD_
02604                 | LR__0098
02604                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02604     E9 3C 02 F6 | 	mov	muldiva_, _var03
02608     68 BA 05 F1 | 	add	objptr, #104
0260c     DD F4 01 FB | 	rdlong	_var20, objptr
02610     68 BA 85 F1 | 	sub	objptr, #104
02614     FA 3C 82 F1 | 	sub	muldiva_, _var20
02618     F5 3E 02 F6 | 	mov	muldivb_, _var15
0261c     CC 00 A0 FD | 	call	#unsdivide_
02620     E8 3C 42 F0 | 	shr	muldiva_, _var02
02624     1E F7 01 F6 | 	mov	_var21, muldiva_
02628                 | '     charline:=(i-timings[6])+/lpc
02628     E9 3C 02 F6 | 	mov	muldiva_, _var03
0262c     68 BA 05 F1 | 	add	objptr, #104
02630     DD F8 01 FB | 	rdlong	_var22, objptr
02634     68 BA 85 F1 | 	sub	objptr, #104
02638     FC 3C 82 F1 | 	sub	muldiva_, _var22
0263c     F5 3E 02 F6 | 	mov	muldivb_, _var15
02640     CC 00 A0 FD | 	call	#unsdivide_
02644     1F FB 01 F6 | 	mov	_var23, muldivb_
02648                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02648     DD E2 01 FB | 	rdlong	_var11, objptr
0264c     90 BA 05 F1 | 	add	objptr, #144
02650     DD F4 01 FB | 	rdlong	_var20, objptr
02654     FD F4 01 FD | 	qmul	_var20, _var23
02658     18 FC 61 FD | 	getqx	_var24
0265c     02 FC 65 F0 | 	shl	_var24, #2
02660     FE E2 01 F1 | 	add	_var11, _var24
02664     07 E9 01 F6 | 	mov	_var14, arg01
02668     03 E8 05 F5 | 	and	_var14, #3
0266c     F4 E2 01 F1 | 	add	_var11, _var14
02670                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02670     0C E2 65 F0 | 	shl	_var11, #12
02674     FB F8 01 F6 | 	mov	_var22, _var21
02678     08 F8 65 F0 | 	shl	_var22, #8
0267c     FC E2 01 F1 | 	add	_var11, _var22
02680     FD F4 01 F6 | 	mov	_var20, _var23
02684     02 F4 65 F0 | 	shl	_var20, #2
02688     FA E2 01 F1 | 	add	_var11, _var20
0268c     01 E2 05 F1 | 	add	_var11, #1
02690     74 BA 85 F1 | 	sub	objptr, #116
02694     DD E6 01 FB | 	rdlong	_var13, objptr
02698     1C BA 85 F1 | 	sub	objptr, #28
0269c     E9 E8 01 F6 | 	mov	_var14, _var03
026a0     02 E8 65 F0 | 	shl	_var14, #2
026a4     F4 E6 01 F1 | 	add	_var13, _var14
026a8     F3 E2 61 FC | 	wrlong	_var11, _var13
026ac     F9 D2 01 F1 | 	add	_var03, _var19
026b0     F6 D2 09 F2 | 	cmp	_var03, _var16 wz
026b4     4C FF 9F 5D |  if_ne	jmp	#LR__0098
026b8                 | LR__0099
026b8                 | LR__0100
026b8                 | ' 
026b8                 | ' 
026b8                 | ' 
026b8                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
026b8     01 00 00 FF 
026bc     00 0E 5E F2 | 	cmps	arg01, ##512 wcz
026c0     A8 01 90 CD |  if_b	jmp	#LR__0108
026c4                 | ' 
026c4                 | '   if timings[6]>0 'borders
026c4     68 BA 05 F1 | 	add	objptr, #104
026c8     DD CE 01 FB | 	rdlong	_var01, objptr
026cc     68 BA 85 F1 | 	sub	objptr, #104
026d0     00 CE 5D F2 | 	cmps	_var01, #0 wcz
026d4     D4 00 90 ED |  if_be	jmp	#LR__0105
026d8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
026d8     00 D2 05 F6 | 	mov	_var03, #0
026dc     68 BA 05 F1 | 	add	objptr, #104
026e0     DD FE 01 FB | 	rdlong	_var25, objptr
026e4     68 BA 85 F1 | 	sub	objptr, #104
026e8     01 FE 85 F1 | 	sub	_var25, #1
026ec     00 FE 5D F2 | 	cmps	_var25, #0 wcz
026f0     01 D6 05 16 |  if_a	mov	_var05, #1
026f4     01 D6 65 E6 |  if_be	neg	_var05, #1
026f8     EB 00 02 F6 | 	mov	_var26, _var05
026fc     EB FE 01 F1 | 	add	_var25, _var05
02700     24 D9 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
02704     93 00 A0 FD | 	call	#FCACHE_LOAD_
02708                 | LR__0101
02708                 | '       long[dl_ptr+4*i]:=$0
02708     1C BA 05 F1 | 	add	objptr, #28
0270c     DD DA 01 FB | 	rdlong	_var07, objptr
02710     1C BA 85 F1 | 	sub	objptr, #28
02714     E9 DC 01 F6 | 	mov	_var08, _var03
02718     02 DC 65 F0 | 	shl	_var08, #2
0271c     EE DA 01 F1 | 	add	_var07, _var08
02720     ED 00 68 FC | 	wrlong	#0, _var07
02724     00 D3 01 F1 | 	add	_var03, _var26
02728     FF D2 09 F2 | 	cmp	_var03, _var25 wz
0272c     D8 FF 9F 5D |  if_ne	jmp	#LR__0101
02730                 | LR__0102
02730                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02730     68 BA 05 F1 | 	add	objptr, #104
02734     DD D2 01 FB | 	rdlong	_var03, objptr
02738     18 BA 05 F1 | 	add	objptr, #24
0273c     DD D6 01 FB | 	rdlong	_var05, objptr
02740     EB D2 01 F1 | 	add	_var03, _var05
02744     0C BA 05 F1 | 	add	objptr, #12
02748     DD 02 02 FB | 	rdlong	_var27, objptr
0274c     01 02 86 F1 | 	sub	_var27, #1
02750     24 BA 85 F1 | 	sub	objptr, #36
02754     DD E0 01 FB | 	rdlong	_var10, objptr
02758     18 BA 05 F1 | 	add	objptr, #24
0275c     DD E2 01 FB | 	rdlong	_var11, objptr
02760     80 BA 85 F1 | 	sub	objptr, #128
02764     F1 E0 01 F1 | 	add	_var10, _var11
02768     F0 02 5A F2 | 	cmps	_var27, _var10 wcz
0276c     01 DC 05 16 |  if_a	mov	_var08, #1
02770     01 DC 65 E6 |  if_be	neg	_var08, #1
02774     EE 04 02 F6 | 	mov	_var28, _var08
02778     EE 02 02 F1 | 	add	_var27, _var08
0277c     A8 D8 9F FE | 	loc	pa,	#(@LR__0104-@LR__0103)
02780     93 00 A0 FD | 	call	#FCACHE_LOAD_
02784                 | LR__0103
02784                 | '       long[dl_ptr+4*i]:=$0
02784     1C BA 05 F1 | 	add	objptr, #28
02788     DD E6 01 FB | 	rdlong	_var13, objptr
0278c     1C BA 85 F1 | 	sub	objptr, #28
02790     E9 E8 01 F6 | 	mov	_var14, _var03
02794     02 E8 65 F0 | 	shl	_var14, #2
02798     F4 E6 01 F1 | 	add	_var13, _var14
0279c     F3 00 68 FC | 	wrlong	#0, _var13
027a0     02 D3 01 F1 | 	add	_var03, _var28
027a4     01 D3 09 F2 | 	cmp	_var03, _var27 wz
027a8     D8 FF 9F 5D |  if_ne	jmp	#LR__0103
027ac                 | LR__0104
027ac                 | LR__0105
027ac                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
027ac     68 BA 05 F1 | 	add	objptr, #104
027b0     DD D2 01 FB | 	rdlong	_var03, objptr
027b4     E9 06 02 F6 | 	mov	_var29, _var03
027b8     18 BA 05 F1 | 	add	objptr, #24
027bc     DD EE 01 FB | 	rdlong	_var17, objptr
027c0     F7 06 02 F1 | 	add	_var29, _var17
027c4     01 06 86 F1 | 	sub	_var29, #1
027c8     18 BA 85 F1 | 	sub	objptr, #24
027cc     DD DC 01 FB | 	rdlong	_var08, objptr
027d0     68 BA 85 F1 | 	sub	objptr, #104
027d4     EE 06 5A F2 | 	cmps	_var29, _var08 wcz
027d8     01 F0 05 16 |  if_a	mov	_var18, #1
027dc     01 F0 65 E6 |  if_be	neg	_var18, #1
027e0     F8 08 02 F6 | 	mov	_var30, _var18
027e4     F8 06 02 F1 | 	add	_var29, _var18
027e8     90 D8 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
027ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
027f0                 | LR__0106
027f0                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
027f0     DD E2 01 FB | 	rdlong	_var11, objptr
027f4     E9 F8 01 F6 | 	mov	_var22, _var03
027f8     68 BA 05 F1 | 	add	objptr, #104
027fc     DD F4 01 FB | 	rdlong	_var20, objptr
02800     FA F8 81 F1 | 	sub	_var22, _var20
02804     E8 F8 41 F0 | 	shr	_var22, _var02
02808     28 BA 05 F1 | 	add	objptr, #40
0280c     DD E8 01 FB | 	rdlong	_var14, objptr
02810     FC E8 01 FD | 	qmul	_var14, _var22
02814     18 0A 62 FD | 	getqx	_var31
02818     02 0A 66 F0 | 	shl	_var31, #2
0281c     05 E3 01 F1 | 	add	_var11, _var31
02820     07 0D 02 F6 | 	mov	_var32, arg01
02824     03 0C 06 F5 | 	and	_var32, #3
02828     06 E3 01 F1 | 	add	_var11, _var32
0282c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0282c     0C E2 65 F0 | 	shl	_var11, #12
02830     02 E2 05 F1 | 	add	_var11, #2
02834     07 F9 01 F6 | 	mov	_var22, arg01
02838     30 F8 05 F5 | 	and	_var22, #48
0283c     02 F8 45 F0 | 	shr	_var22, #2
02840     FC E2 01 F1 | 	add	_var11, _var22
02844     74 BA 85 F1 | 	sub	objptr, #116
02848     DD F4 01 FB | 	rdlong	_var20, objptr
0284c     1C BA 85 F1 | 	sub	objptr, #28
02850     E9 FC 01 F6 | 	mov	_var24, _var03
02854     02 FC 65 F0 | 	shl	_var24, #2
02858     FE F4 01 F1 | 	add	_var20, _var24
0285c     FA E2 61 FC | 	wrlong	_var11, _var20
02860     04 D3 01 F1 | 	add	_var03, _var30
02864     03 D3 09 F2 | 	cmp	_var03, _var29 wz
02868     84 FF 9F 5D |  if_ne	jmp	#LR__0106
0286c                 | LR__0107
0286c                 | LR__0108
0286c                 | _makedl_ret
0286c     2D 00 64 FD | 	ret
02870                 | 
02870                 | '       
02870                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
02870                 | ' 
02870                 | ' pub start(mode,base):result
02870                 | _start
02870     04 5A 05 F6 | 	mov	COUNT_, #4
02874     B0 00 A0 FD | 	call	#pushregs_
02878     07 19 02 F6 | 	mov	local01, arg01
0287c                 | ' 
0287c                 | ' ' initialize pointers and variables
0287c                 | ' 
0287c                 | ' border_ptr:=@bordercolor
0287c     2C BA 05 F1 | 	add	objptr, #44
02880     DD 1A 02 F6 | 	mov	local02, objptr
02884     24 BA 85 F1 | 	sub	objptr, #36
02888     DD 1A 62 FC | 	wrlong	local02, objptr
0288c                 | ' font_ptr:=@st_font
0288c     08 00 00 FF 
02890     00 BE 05 F1 | 	add	ptr__dat__, ##4096
02894     04 BA 85 F1 | 	sub	objptr, #4
02898     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
0289c                 | ' hdmibase:=base
0289c     20 BA 05 F1 | 	add	objptr, #32
028a0     DD 10 62 FC | 	wrlong	arg02, objptr
028a4     24 BA 85 F1 | 	sub	objptr, #36
028a8                 | ' p1:=@putpixel1
028a8     DD 0E 02 F6 | 	mov	arg01, objptr
028ac     E0 10 02 F6 | 	mov	arg02, ptr__putpixel1_
028b0     08 00 00 FF 
028b4     00 BE 85 F1 | 	sub	ptr__dat__, ##4096
028b8     30 03 B0 FD | 	call	#__system___make_methodptr
028bc     E5 1C 02 F6 | 	mov	local03, result1
028c0     DC BA 05 F1 | 	add	objptr, #220
028c4     DD 1C 62 FC | 	wrlong	local03, objptr
028c8     DC BA 85 F1 | 	sub	objptr, #220
028cc                 | ' p2:=@putpixel2
028cc     DD 0E 02 F6 | 	mov	arg01, objptr
028d0     E1 10 02 F6 | 	mov	arg02, ptr__putpixel2_
028d4     14 03 B0 FD | 	call	#__system___make_methodptr
028d8     E5 1C 02 F6 | 	mov	local03, result1
028dc     E0 BA 05 F1 | 	add	objptr, #224
028e0     DD 1C 62 FC | 	wrlong	local03, objptr
028e4     E0 BA 85 F1 | 	sub	objptr, #224
028e8                 | ' p4:=@putpixel4
028e8     DD 0E 02 F6 | 	mov	arg01, objptr
028ec     E2 10 02 F6 | 	mov	arg02, ptr__putpixel4_
028f0     F8 02 B0 FD | 	call	#__system___make_methodptr
028f4     E5 1C 02 F6 | 	mov	local03, result1
028f8     E4 BA 05 F1 | 	add	objptr, #228
028fc     DD 1C 62 FC | 	wrlong	local03, objptr
02900     E4 BA 85 F1 | 	sub	objptr, #228
02904                 | ' p8:=@putpixel8
02904     DD 0E 02 F6 | 	mov	arg01, objptr
02908     E3 10 02 F6 | 	mov	arg02, ptr__putpixel8_
0290c     DC 02 B0 FD | 	call	#__system___make_methodptr
02910     E5 1C 02 F6 | 	mov	local03, result1
02914     E8 BA 05 F1 | 	add	objptr, #232
02918     DD 1C 62 FC | 	wrlong	local03, objptr
0291c     E8 BA 85 F1 | 	sub	objptr, #232
02920                 | ' 
02920                 | ' 
02920                 | ' ' the mode has to be set here to enable computing the buffer length
02920                 | ' 
02920                 | ' setmode(mode)
02920     0C 0F 02 F6 | 	mov	arg01, local01
02924     68 F5 BF FD | 	call	#_setmode
02928                 | ' 
02928                 | ' vblank_ptr:=@vblank
02928     40 BA 05 F1 | 	add	objptr, #64
0292c     DD 1A 02 F6 | 	mov	local02, objptr
02930     34 BA 85 F1 | 	sub	objptr, #52
02934     DD 1A 62 FC | 	wrlong	local02, objptr
02938                 | ' cursor_ptr:=@cursor_x
02938     28 BA 05 F1 | 	add	objptr, #40
0293c     DD 1A 02 F6 | 	mov	local02, objptr
02940     24 BA 85 F1 | 	sub	objptr, #36
02944     DD 1A 62 FC | 	wrlong	local02, objptr
02948                 | ' 
02948                 | ' fontnum_ptr:=@fontnum
02948     88 BA 05 F1 | 	add	objptr, #136
0294c     DD 1A 02 F6 | 	mov	local02, objptr
02950     78 BA 85 F1 | 	sub	objptr, #120
02954     DD 1A 62 FC | 	wrlong	local02, objptr
02958                 | ' 
02958                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
02958     78 BA 05 F1 | 	add	objptr, #120
0295c     DD 00 68 FC | 	wrlong	#0, objptr
02960                 | ' bytemove(@colors,@vgacolors,16)
02960     1C BA 05 F1 | 	add	objptr, #28
02964     DD 0E 02 F6 | 	mov	arg01, objptr
02968     B4 BA 85 F1 | 	sub	objptr, #180
0296c     0F 00 00 FF 
02970     58 BE 05 F1 | 	add	ptr__dat__, ##7768
02974     DF 10 02 F6 | 	mov	arg02, ptr__dat__
02978     0F 00 00 FF 
0297c     58 BE 85 F1 | 	sub	ptr__dat__, ##7768
02980     10 12 06 F6 | 	mov	arg03, #16
02984     34 01 B0 FD | 	call	#__system____builtin_memmove
02988                 | ' 
02988                 | ' ' initialize a cursor
02988                 | ' 
02988                 | ' cursor_x:=0
02988     34 BA 05 F1 | 	add	objptr, #52
0298c     DD 00 48 FC | 	wrbyte	#0, objptr
02990                 | ' cursor_y:=0
02990     01 BA 05 F1 | 	add	objptr, #1
02994     DD 00 48 FC | 	wrbyte	#0, objptr
02998                 | ' cursor_sh:=14
02998     01 BA 05 F1 | 	add	objptr, #1
0299c     DD 1C 48 FC | 	wrbyte	#14, objptr
029a0     36 BA 85 F1 | 	sub	objptr, #54
029a4                 | ' 
029a4                 | ' 
029a4                 | ' ' start the cog
029a4                 | ' 
029a4                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
029a4     0F 00 00 FF 
029a8     68 BE 05 F1 | 	add	ptr__dat__, ##7784
029ac     DF 10 02 F6 | 	mov	arg02, ptr__dat__
029b0     0F 00 00 FF 
029b4     68 BE 85 F1 | 	sub	ptr__dat__, ##7784
029b8     DD 12 02 F6 | 	mov	arg03, objptr
029bc     10 0E 06 F6 | 	mov	arg01, #16
029c0     28 12 62 FD | 	setq	arg03
029c4     08 0F F2 FC | 	coginit	arg01, arg02 wc
029c8     01 0E 66 C6 |  if_b	neg	arg01, #1
029cc     07 CB 01 F6 | 	mov	result1, arg01
029d0     E5 1E 02 F6 | 	mov	local04, result1
029d4     28 BA 05 F1 | 	add	objptr, #40
029d8     DD 1E 62 FC | 	wrlong	local04, objptr
029dc     28 BA 85 F1 | 	sub	objptr, #40
029e0                 | ' waitms(20)
029e0     14 0E 06 F6 | 	mov	arg01, #20
029e4     C4 02 B0 FD | 	call	#__system___waitms
029e8                 | ' 
029e8                 | ' ' clear the screen and set the colors to green on black
029e8                 | ' 
029e8                 | ' cls(c_green,c_black)
029e8     C7 0E 06 F6 | 	mov	arg01, #199
029ec     00 10 06 F6 | 	mov	arg02, #0
029f0     50 F2 BF FD | 	call	#_cls
029f4                 | ' setbordercolor(0,0,128)
029f4     00 0E 06 F6 | 	mov	arg01, #0
029f8     00 10 06 F6 | 	mov	arg02, #0
029fc     80 12 06 F6 | 	mov	arg03, #128
02a00     1C F2 BF FD | 	call	#_setbordercolor
02a04                 | ' setwritecolors(c_green,c_black)
02a04                 | ' 
02a04                 | ' 
02a04                 | ' write_color:=ff
02a04     38 BA 05 F1 | 	add	objptr, #56
02a08     DD 8E 69 FC | 	wrlong	#199, objptr
02a0c                 | ' write_background:=bb
02a0c     04 BA 05 F1 | 	add	objptr, #4
02a10     DD 00 68 FC | 	wrlong	#0, objptr
02a14                 | ' 
02a14                 | ' return cog
02a14     14 BA 85 F1 | 	sub	objptr, #20
02a18     DD CA 01 FB | 	rdlong	result1, objptr
02a1c     28 BA 85 F1 | 	sub	objptr, #40
02a20     AF F0 03 F6 | 	mov	ptra, fp
02a24     BF 00 A0 FD | 	call	#popregs_
02a28                 | _start_ret
02a28     2D 00 64 FD | 	ret
02a2c                 | hubexit
02a2c     81 00 80 FD | 	jmp	#cogexit
02a30                 | 
02a30                 | __system___setbaud
02a30     14 3C 06 FB | 	rdlong	muldiva_, #20
02a34     07 3F 02 F6 | 	mov	muldivb_, arg01
02a38     D0 00 A0 FD | 	call	#divide_
02a3c     40 7C 64 FD | 	dirl	#62
02a40     40 7E 64 FD | 	dirl	#63
02a44     DE 3E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02a48     10 3E 66 F0 | 	shl	muldivb_, #16
02a4c     07 10 06 F6 | 	mov	arg02, #7
02a50     1F 11 02 F1 | 	add	arg02, muldivb_
02a54     3E F8 0C FC | 	wrpin	#124, #62
02a58     3E 10 16 FC | 	wxpin	arg02, #62
02a5c     3F 7C 0C FC | 	wrpin	#62, #63
02a60     14 10 06 F1 | 	add	arg02, #20
02a64     3F 10 16 FC | 	wxpin	arg02, #63
02a68     41 7C 64 FD | 	dirh	#62
02a6c     41 7E 64 FD | 	dirh	#63
02a70                 | __system___setbaud_ret
02a70     2D 00 64 FD | 	ret
02a74                 | 
02a74                 | __system___txraw
02a74     02 5A 05 F6 | 	mov	COUNT_, #2
02a78     B0 00 A0 FD | 	call	#pushregs_
02a7c     07 19 02 F6 | 	mov	local01, arg01
02a80     DE 1A 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02a84     0C 00 90 5D |  if_ne	jmp	#LR__0109
02a88     42 0F 00 FF 
02a8c     80 0E 06 F6 | 	mov	arg01, ##2000000
02a90     9C FF BF FD | 	call	#__system___setbaud
02a94                 | LR__0109
02a94     3E 18 26 FC | 	wypin	local01, #62
02a98     1F 02 64 FD | 	waitx	#1
02a9c     68 D5 9F FE | 	loc	pa,	#(@LR__0111-@LR__0110)
02aa0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02aa4                 | LR__0110
02aa4     40 7C 74 FD | 	testp	#62 wc
02aa8     F8 FF 9F 3D |  if_nc	jmp	#LR__0110
02aac                 | LR__0111
02aac     01 CA 05 F6 | 	mov	result1, #1
02ab0     AF F0 03 F6 | 	mov	ptra, fp
02ab4     BF 00 A0 FD | 	call	#popregs_
02ab8                 | __system___txraw_ret
02ab8     2D 00 64 FD | 	ret
02abc                 | 
02abc                 | __system____builtin_memmove
02abc     07 CF 01 F6 | 	mov	_var01, arg01
02ac0     08 0F 5A F2 | 	cmps	arg01, arg02 wcz
02ac4     50 00 90 3D |  if_ae	jmp	#LR__0119
02ac8     54 D5 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
02acc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ad0                 | LR__0112
02ad0     03 12 5E F2 | 	cmps	arg03, #3 wcz
02ad4     18 00 90 ED |  if_be	jmp	#LR__0114
02ad8     08 D1 01 FB | 	rdlong	_var02, arg02
02adc     07 D1 61 FC | 	wrlong	_var02, arg01
02ae0     04 0E 06 F1 | 	add	arg01, #4
02ae4     04 10 06 F1 | 	add	arg02, #4
02ae8     04 12 86 F1 | 	sub	arg03, #4
02aec     E0 FF 9F FD | 	jmp	#LR__0112
02af0                 | LR__0113
02af0                 | LR__0114
02af0     09 D3 09 F6 | 	mov	_var03, arg03 wz
02af4     4C 00 90 AD |  if_e	jmp	#LR__0125
02af8     18 D5 9F FE | 	loc	pa,	#(@LR__0117-@LR__0115)
02afc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b00                 | LR__0115
02b00     E9 08 D8 FC | 	rep	@LR__0118, _var03
02b04                 | LR__0116
02b04     08 D1 C1 FA | 	rdbyte	_var02, arg02
02b08     07 D1 41 FC | 	wrbyte	_var02, arg01
02b0c     01 0E 06 F1 | 	add	arg01, #1
02b10     01 10 06 F1 | 	add	arg02, #1
02b14                 | LR__0117
02b14                 | LR__0118
02b14     2C 00 90 FD | 	jmp	#LR__0125
02b18                 | LR__0119
02b18     09 0F 02 F1 | 	add	arg01, arg03
02b1c     09 11 02 F1 | 	add	arg02, arg03
02b20     09 D5 09 F6 | 	mov	_var04, arg03 wz
02b24     1C 00 90 AD |  if_e	jmp	#LR__0124
02b28     E8 D4 9F FE | 	loc	pa,	#(@LR__0122-@LR__0120)
02b2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b30                 | LR__0120
02b30     EA 08 D8 FC | 	rep	@LR__0123, _var04
02b34                 | LR__0121
02b34     01 0E 86 F1 | 	sub	arg01, #1
02b38     01 10 86 F1 | 	sub	arg02, #1
02b3c     08 D1 C1 FA | 	rdbyte	_var02, arg02
02b40     07 D1 41 FC | 	wrbyte	_var02, arg01
02b44                 | LR__0122
02b44                 | LR__0123
02b44                 | LR__0124
02b44                 | LR__0125
02b44     E7 CA 01 F6 | 	mov	result1, _var01
02b48                 | __system____builtin_memmove_ret
02b48     2D 00 64 FD | 	ret
02b4c                 | 
02b4c                 | __system__longmove
02b4c     07 CF 01 F6 | 	mov	_var01, arg01
02b50     08 0F 5A F2 | 	cmps	arg01, arg02 wcz
02b54     28 00 90 3D |  if_ae	jmp	#LR__0130
02b58     09 D1 09 F6 | 	mov	_var02, arg03 wz
02b5c     5C 00 90 AD |  if_e	jmp	#LR__0136
02b60     B0 D4 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
02b64     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b68                 | LR__0126
02b68     E8 08 D8 FC | 	rep	@LR__0129, _var02
02b6c                 | LR__0127
02b6c     08 D3 01 FB | 	rdlong	_var03, arg02
02b70     07 D3 61 FC | 	wrlong	_var03, arg01
02b74     04 0E 06 F1 | 	add	arg01, #4
02b78     04 10 06 F1 | 	add	arg02, #4
02b7c                 | LR__0128
02b7c                 | LR__0129
02b7c     3C 00 90 FD | 	jmp	#LR__0136
02b80                 | LR__0130
02b80     09 D5 01 F6 | 	mov	_var04, arg03
02b84     02 D4 65 F0 | 	shl	_var04, #2
02b88     EA 0E 02 F1 | 	add	arg01, _var04
02b8c     09 D5 01 F6 | 	mov	_var04, arg03
02b90     02 D4 65 F0 | 	shl	_var04, #2
02b94     EA 10 02 F1 | 	add	arg02, _var04
02b98     09 D7 09 F6 | 	mov	_var05, arg03 wz
02b9c     1C 00 90 AD |  if_e	jmp	#LR__0135
02ba0     70 D4 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
02ba4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ba8                 | LR__0131
02ba8     EB 08 D8 FC | 	rep	@LR__0134, _var05
02bac                 | LR__0132
02bac     04 0E 86 F1 | 	sub	arg01, #4
02bb0     04 10 86 F1 | 	sub	arg02, #4
02bb4     08 D3 01 FB | 	rdlong	_var03, arg02
02bb8     07 D3 61 FC | 	wrlong	_var03, arg01
02bbc                 | LR__0133
02bbc                 | LR__0134
02bbc                 | LR__0135
02bbc                 | LR__0136
02bbc     E7 CA 01 F6 | 	mov	result1, _var01
02bc0                 | __system__longmove_ret
02bc0     2D 00 64 FD | 	ret
02bc4                 | 
02bc4                 | __system____topofstack
02bc4     00 5A 05 F6 | 	mov	COUNT_, #0
02bc8     B0 00 A0 FD | 	call	#pushregs_
02bcc     08 F0 07 F1 | 	add	ptra, #8
02bd0     04 5E 05 F1 | 	add	fp, #4
02bd4     AF 0E 62 FC | 	wrlong	arg01, fp
02bd8     AF CA 01 F6 | 	mov	result1, fp
02bdc     04 5E 85 F1 | 	sub	fp, #4
02be0     AF F0 03 F6 | 	mov	ptra, fp
02be4     BF 00 A0 FD | 	call	#popregs_
02be8                 | __system____topofstack_ret
02be8     2D 00 64 FD | 	ret
02bec                 | 
02bec                 | __system___make_methodptr
02bec     04 5A 05 F6 | 	mov	COUNT_, #4
02bf0     B0 00 A0 FD | 	call	#pushregs_
02bf4     07 19 02 F6 | 	mov	local01, arg01
02bf8     08 1B 02 F6 | 	mov	local02, arg02
02bfc     08 0E 06 F6 | 	mov	arg01, #8
02c00     70 04 B0 FD | 	call	#__system___gc_alloc_managed
02c04     E5 1C 0A F6 | 	mov	local03, result1 wz
02c08     10 00 90 AD |  if_e	jmp	#LR__0137
02c0c     0E 19 62 FC | 	wrlong	local01, local03
02c10     0E 1F 02 F6 | 	mov	local04, local03
02c14     04 1E 06 F1 | 	add	local04, #4
02c18     0F 1B 62 FC | 	wrlong	local02, local04
02c1c                 | LR__0137
02c1c     0E CB 01 F6 | 	mov	result1, local03
02c20     AF F0 03 F6 | 	mov	ptra, fp
02c24     BF 00 A0 FD | 	call	#popregs_
02c28                 | __system___make_methodptr_ret
02c28     2D 00 64 FD | 	ret
02c2c                 | 
02c2c                 | __system___lockmem
02c2c     02 5A 05 F6 | 	mov	COUNT_, #2
02c30     B0 00 A0 FD | 	call	#pushregs_
02c34     01 CA 61 FD | 	cogid	result1
02c38     E5 18 02 F6 | 	mov	local01, result1
02c3c     00 19 06 F1 | 	add	local01, #256
02c40                 | LR__0138
02c40     07 1B 0A FB | 	rdlong	local02, arg01 wz
02c44     07 19 62 AC |  if_e	wrlong	local01, arg01
02c48     07 1B 02 AB |  if_e	rdlong	local02, arg01
02c4c     07 1B 02 AB |  if_e	rdlong	local02, arg01
02c50     0C 1B 0A F2 | 	cmp	local02, local01 wz
02c54     E8 FF 9F 5D |  if_ne	jmp	#LR__0138
02c58     AF F0 03 F6 | 	mov	ptra, fp
02c5c     BF 00 A0 FD | 	call	#popregs_
02c60                 | __system___lockmem_ret
02c60     2D 00 64 FD | 	ret
02c64                 | 
02c64                 | __system___tx
02c64     02 5A 05 F6 | 	mov	COUNT_, #2
02c68     B0 00 A0 FD | 	call	#pushregs_
02c6c     07 19 02 F6 | 	mov	local01, arg01
02c70     0A 18 0E F2 | 	cmp	local01, #10 wz
02c74     20 00 90 5D |  if_ne	jmp	#LR__0139
02c78     08 BC 05 F1 | 	add	ptr___system__dat__, #8
02c7c     DE 1A 02 FB | 	rdlong	local02, ptr___system__dat__
02c80     08 BC 85 F1 | 	sub	ptr___system__dat__, #8
02c84     02 1A CE F7 | 	test	local02, #2 wz
02c88     0C 00 90 AD |  if_e	jmp	#LR__0139
02c8c     0D 1A 06 F6 | 	mov	local02, #13
02c90     0D 0E 06 F6 | 	mov	arg01, #13
02c94     DC FD BF FD | 	call	#__system___txraw
02c98                 | LR__0139
02c98     0C 0F 02 F6 | 	mov	arg01, local01
02c9c     D4 FD BF FD | 	call	#__system___txraw
02ca0     AF F0 03 F6 | 	mov	ptra, fp
02ca4     BF 00 A0 FD | 	call	#popregs_
02ca8                 | __system___tx_ret
02ca8     2D 00 64 FD | 	ret
02cac                 | 
02cac                 | __system___waitms
02cac     03 5A 05 F6 | 	mov	COUNT_, #3
02cb0     B0 00 A0 FD | 	call	#pushregs_
02cb4     07 19 02 F6 | 	mov	local01, arg01
02cb8     14 1A 06 FB | 	rdlong	local02, #20
02cbc     58 D3 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
02cc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cc4                 | LR__0140
02cc4     01 00 00 FF 
02cc8     E8 19 5E F2 | 	cmps	local01, ##1000 wcz
02ccc     1F 1A 62 1D |  if_a	waitx	local02
02cd0     01 00 00 1F 
02cd4     E8 19 86 11 |  if_a	sub	local01, ##1000
02cd8     E8 FF 9F 1D |  if_a	jmp	#LR__0140
02cdc                 | LR__0141
02cdc     0C BC 05 F1 | 	add	ptr___system__dat__, #12
02ce0     DE 1C 0A FB | 	rdlong	local03, ptr___system__dat__ wz
02ce4     0C BC 85 F1 | 	sub	ptr___system__dat__, #12
02ce8     20 00 90 5D |  if_ne	jmp	#LR__0142
02cec     0D 3D 02 F6 | 	mov	muldiva_, local02
02cf0     01 00 00 FF 
02cf4     E8 3F 06 F6 | 	mov	muldivb_, ##1000
02cf8     CC 00 A0 FD | 	call	#unsdivide_
02cfc     1F 1D 02 F6 | 	mov	local03, muldivb_
02d00     0C BC 05 F1 | 	add	ptr___system__dat__, #12
02d04     DE 3E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02d08     0C BC 85 F1 | 	sub	ptr___system__dat__, #12
02d0c                 | LR__0142
02d0c     00 18 5E F2 | 	cmps	local01, #0 wcz
02d10     0E 19 02 1D |  if_a	qmul	local01, local03
02d14     18 0E 62 1D |  if_a	getqx	arg01
02d18     1F 0E 62 1D |  if_a	waitx	arg01
02d1c     AF F0 03 F6 | 	mov	ptra, fp
02d20     BF 00 A0 FD | 	call	#popregs_
02d24                 | __system___waitms_ret
02d24     2D 00 64 FD | 	ret
02d28                 | 
02d28                 | __system___waitus
02d28     02 5A 05 F6 | 	mov	COUNT_, #2
02d2c     B0 00 A0 FD | 	call	#pushregs_
02d30     07 19 02 F6 | 	mov	local01, arg01
02d34     10 BC 05 F1 | 	add	ptr___system__dat__, #16
02d38     DE 1A 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02d3c     10 BC 85 F1 | 	sub	ptr___system__dat__, #16
02d40     20 00 90 5D |  if_ne	jmp	#LR__0143
02d44     14 3C 06 FB | 	rdlong	muldiva_, #20
02d48     A1 07 00 FF 
02d4c     40 3E 06 F6 | 	mov	muldivb_, ##1000000
02d50     CC 00 A0 FD | 	call	#unsdivide_
02d54     1F 1B 02 F6 | 	mov	local02, muldivb_
02d58     10 BC 05 F1 | 	add	ptr___system__dat__, #16
02d5c     DE 3E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02d60     10 BC 85 F1 | 	sub	ptr___system__dat__, #16
02d64                 | LR__0143
02d64     0D 19 02 FD | 	qmul	local01, local02
02d68     18 0E 62 FD | 	getqx	arg01
02d6c     1F 0E 62 FD | 	waitx	arg01
02d70     AF F0 03 F6 | 	mov	ptra, fp
02d74     BF 00 A0 FD | 	call	#popregs_
02d78                 | __system___waitus_ret
02d78     2D 00 64 FD | 	ret
02d7c                 | 
02d7c                 | __system___gc_ptrs
02d7c     04 5A 05 F6 | 	mov	COUNT_, #4
02d80     B0 00 A0 FD | 	call	#pushregs_
02d84     DA 18 02 F6 | 	mov	local01, __heap_ptr
02d88     0C 1B 02 F6 | 	mov	local02, local01
02d8c     07 00 00 FF 
02d90     F8 1B 06 F1 | 	add	local02, ##4088
02d94     0C 1D 0A FB | 	rdlong	local03, local01 wz
02d98     74 00 90 5D |  if_ne	jmp	#LR__0144
02d9c     0D 1F 02 F6 | 	mov	local04, local02
02da0     0C 1F 82 F1 | 	sub	local04, local01
02da4     0C 03 58 FC | 	wrword	#1, local01
02da8     0C 1D 02 F6 | 	mov	local03, local01
02dac     02 1C 06 F1 | 	add	local03, #2
02db0     36 00 80 FF 
02db4     0E 21 59 FC | 	wrword	##27792, local03
02db8     0C 1D 02 F6 | 	mov	local03, local01
02dbc     04 1C 06 F1 | 	add	local03, #4
02dc0     0E 01 58 FC | 	wrword	#0, local03
02dc4     0C 1D 02 F6 | 	mov	local03, local01
02dc8     06 1C 06 F1 | 	add	local03, #6
02dcc     0E 03 58 FC | 	wrword	#1, local03
02dd0     10 18 06 F1 | 	add	local01, #16
02dd4     0F 1D 52 F6 | 	abs	local03, local04 wc
02dd8     04 1C 46 F0 | 	shr	local03, #4
02ddc     0E 1D 62 C6 |  if_b	neg	local03, local03
02de0     0C 1D 52 FC | 	wrword	local03, local01
02de4     0C 1D 02 F6 | 	mov	local03, local01
02de8     02 1C 06 F1 | 	add	local03, #2
02dec     36 00 80 FF 
02df0     0E 1F 59 FC | 	wrword	##27791, local03
02df4     0C 1D 02 F6 | 	mov	local03, local01
02df8     04 1C 06 F1 | 	add	local03, #4
02dfc     0E 01 58 FC | 	wrword	#0, local03
02e00     0C 1D 02 F6 | 	mov	local03, local01
02e04     06 1C 06 F1 | 	add	local03, #6
02e08     0E 01 58 FC | 	wrword	#0, local03
02e0c     10 18 86 F1 | 	sub	local01, #16
02e10                 | LR__0144
02e10     0D CD 01 F6 | 	mov	result2, local02
02e14     0C CB 01 F6 | 	mov	result1, local01
02e18     AF F0 03 F6 | 	mov	ptra, fp
02e1c     BF 00 A0 FD | 	call	#popregs_
02e20                 | __system___gc_ptrs_ret
02e20     2D 00 64 FD | 	ret
02e24                 | 
02e24                 | __system___gc_nextBlockPtr
02e24     02 5A 05 F6 | 	mov	COUNT_, #2
02e28     B0 00 A0 FD | 	call	#pushregs_
02e2c     07 19 02 F6 | 	mov	local01, arg01
02e30     0C 1B EA FA | 	rdword	local02, local01 wz
02e34     10 00 90 5D |  if_ne	jmp	#LR__0145
02e38     1B 00 00 FF 
02e3c     5C 0E 06 F6 | 	mov	arg01, ##@LR__0188
02e40     FC 01 B0 FD | 	call	#__system___gc_errmsg
02e44     0C 00 90 FD | 	jmp	#LR__0146
02e48                 | LR__0145
02e48     0C CB 01 F6 | 	mov	result1, local01
02e4c     04 1A 66 F0 | 	shl	local02, #4
02e50     0D CB 01 F1 | 	add	result1, local02
02e54                 | LR__0146
02e54     AF F0 03 F6 | 	mov	ptra, fp
02e58     BF 00 A0 FD | 	call	#popregs_
02e5c                 | __system___gc_nextBlockPtr_ret
02e5c     2D 00 64 FD | 	ret
02e60                 | 
02e60                 | __system___gc_tryalloc
02e60     0E 5A 05 F6 | 	mov	COUNT_, #14
02e64     B0 00 A0 FD | 	call	#pushregs_
02e68     07 19 02 F6 | 	mov	local01, arg01
02e6c     08 1B 02 F6 | 	mov	local02, arg02
02e70     08 FF BF FD | 	call	#__system___gc_ptrs
02e74     E5 1C 02 F6 | 	mov	local03, result1
02e78     E6 1E 02 F6 | 	mov	local04, result2
02e7c     0E 21 02 F6 | 	mov	local05, local03
02e80     00 22 06 F6 | 	mov	local06, #0
02e84     CC D1 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
02e88     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e8c                 | LR__0147
02e8c     10 25 02 F6 | 	mov	local07, local05
02e90     0E 27 02 F6 | 	mov	local08, local03
02e94     10 29 02 F6 | 	mov	local09, local05
02e98     06 28 06 F1 | 	add	local09, #6
02e9c     14 2B E2 FA | 	rdword	local10, local09
02ea0     13 0F 02 F6 | 	mov	arg01, local08
02ea4     15 11 0A F6 | 	mov	arg02, local10 wz
02ea8     00 CA 05 A6 |  if_e	mov	result1, #0
02eac     04 10 66 50 |  if_ne	shl	arg02, #4
02eb0     08 0F 02 51 |  if_ne	add	arg01, arg02
02eb4     07 CB 01 56 |  if_ne	mov	result1, arg01
02eb8     E5 2C 02 F6 | 	mov	local11, result1
02ebc     16 21 0A F6 | 	mov	local05, local11 wz
02ec0     10 27 02 56 |  if_ne	mov	local08, local05
02ec4     13 23 E2 5A |  if_ne	rdword	local06, local08
02ec8     00 20 0E F2 | 	cmp	local05, #0 wz
02ecc     10 00 90 AD |  if_e	jmp	#LR__0149
02ed0     0F 21 5A F2 | 	cmps	local05, local04 wcz
02ed4     08 00 90 3D |  if_ae	jmp	#LR__0149
02ed8     11 19 5A F2 | 	cmps	local01, local06 wcz
02edc     AC FF 9F 1D |  if_a	jmp	#LR__0147
02ee0                 | LR__0148
02ee0                 | LR__0149
02ee0     00 20 0E F2 | 	cmp	local05, #0 wz
02ee4     10 CB 01 A6 |  if_e	mov	result1, local05
02ee8     48 01 90 AD |  if_e	jmp	#LR__0152
02eec     10 27 02 F6 | 	mov	local08, local05
02ef0     06 26 06 F1 | 	add	local08, #6
02ef4     13 2F E2 FA | 	rdword	local12, local08
02ef8     11 19 5A F2 | 	cmps	local01, local06 wcz
02efc     C8 00 90 3D |  if_ae	jmp	#LR__0151
02f00     10 19 52 FC | 	wrword	local01, local05
02f04     10 0F 02 F6 | 	mov	arg01, local05
02f08     0C 29 02 F6 | 	mov	local09, local01
02f0c     04 28 66 F0 | 	shl	local09, #4
02f10     14 0F 02 F1 | 	add	arg01, local09
02f14     11 27 02 F6 | 	mov	local08, local06
02f18     0C 27 82 F1 | 	sub	local08, local01
02f1c     07 27 52 FC | 	wrword	local08, arg01
02f20     07 27 02 F6 | 	mov	local08, arg01
02f24     02 26 06 F1 | 	add	local08, #2
02f28     36 00 80 FF 
02f2c     13 1F 59 FC | 	wrword	##27791, local08
02f30     10 11 0A F6 | 	mov	arg02, local05 wz
02f34     00 CA 05 A6 |  if_e	mov	result1, #0
02f38     0E 11 82 51 |  if_ne	sub	arg02, local03
02f3c     04 10 46 50 |  if_ne	shr	arg02, #4
02f40     08 CB 01 56 |  if_ne	mov	result1, arg02
02f44     07 2D 02 F6 | 	mov	local11, arg01
02f48     04 2C 06 F1 | 	add	local11, #4
02f4c     16 CB 51 FC | 	wrword	result1, local11
02f50     10 27 02 F6 | 	mov	local08, local05
02f54     06 26 06 F1 | 	add	local08, #6
02f58     07 29 02 F6 | 	mov	local09, arg01
02f5c     13 2B E2 FA | 	rdword	local10, local08
02f60     06 28 06 F1 | 	add	local09, #6
02f64     14 2B 52 FC | 	wrword	local10, local09
02f68     07 31 02 F6 | 	mov	local13, arg01
02f6c     18 11 0A F6 | 	mov	arg02, local13 wz
02f70     00 CA 05 A6 |  if_e	mov	result1, #0
02f74     0E 11 82 51 |  if_ne	sub	arg02, local03
02f78     04 10 46 50 |  if_ne	shr	arg02, #4
02f7c     08 CB 01 56 |  if_ne	mov	result1, arg02
02f80     E5 2E 02 F6 | 	mov	local12, result1
02f84     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
02f88     E5 32 0A F6 | 	mov	local14, result1 wz
02f8c     38 00 90 AD |  if_e	jmp	#LR__0150
02f90     0F 33 5A F2 | 	cmps	local14, local04 wcz
02f94     30 00 90 3D |  if_ae	jmp	#LR__0150
02f98     0E 27 02 F6 | 	mov	local08, local03
02f9c     18 29 02 F6 | 	mov	local09, local13
02fa0     13 0F 02 F6 | 	mov	arg01, local08
02fa4     14 11 0A F6 | 	mov	arg02, local09 wz
02fa8     00 CA 05 A6 |  if_e	mov	result1, #0
02fac     07 11 82 51 |  if_ne	sub	arg02, arg01
02fb0     04 10 46 50 |  if_ne	shr	arg02, #4
02fb4     08 CB 01 56 |  if_ne	mov	result1, arg02
02fb8     E5 2A 02 F6 | 	mov	local10, result1
02fbc     19 2D 02 F6 | 	mov	local11, local14
02fc0     04 2C 06 F1 | 	add	local11, #4
02fc4     16 2B 52 FC | 	wrword	local10, local11
02fc8                 | LR__0150
02fc8                 | LR__0151
02fc8     06 24 06 F1 | 	add	local07, #6
02fcc     12 2F 52 FC | 	wrword	local12, local07
02fd0     36 00 00 FF 
02fd4     80 26 06 F6 | 	mov	local08, ##27776
02fd8     0D 27 42 F5 | 	or	local08, local02
02fdc     01 CA 61 FD | 	cogid	result1
02fe0     E5 26 42 F5 | 	or	local08, result1
02fe4     10 2B 02 F6 | 	mov	local10, local05
02fe8     02 2A 06 F1 | 	add	local10, #2
02fec     15 27 52 FC | 	wrword	local08, local10
02ff0     0E 27 02 F6 | 	mov	local08, local03
02ff4     08 26 06 F1 | 	add	local08, #8
02ff8     10 29 02 F6 | 	mov	local09, local05
02ffc     13 2B E2 FA | 	rdword	local10, local08
03000     06 28 06 F1 | 	add	local09, #6
03004     14 2B 52 FC | 	wrword	local10, local09
03008     10 11 0A F6 | 	mov	arg02, local05 wz
0300c     00 CA 05 A6 |  if_e	mov	result1, #0
03010     0E 11 82 51 |  if_ne	sub	arg02, local03
03014     04 10 46 50 |  if_ne	shr	arg02, #4
03018     08 CB 01 56 |  if_ne	mov	result1, arg02
0301c     08 1C 06 F1 | 	add	local03, #8
03020     0E CB 51 FC | 	wrword	result1, local03
03024     10 CB 01 F6 | 	mov	result1, local05
03028     08 CA 05 F1 | 	add	result1, #8
0302c     00 C0 31 FF 
03030     00 CA 45 F5 | 	or	result1, ##1669332992
03034                 | LR__0152
03034     AF F0 03 F6 | 	mov	ptra, fp
03038     BF 00 A0 FD | 	call	#popregs_
0303c                 | __system___gc_tryalloc_ret
0303c     2D 00 64 FD | 	ret
03040                 | 
03040                 | __system___gc_errmsg
03040     02 5A 05 F6 | 	mov	COUNT_, #2
03044     B0 00 A0 FD | 	call	#pushregs_
03048     07 19 02 F6 | 	mov	local01, arg01
0304c                 | LR__0153
0304c     0C 1B CA FA | 	rdbyte	local02, local01 wz
03050     01 18 06 F1 | 	add	local01, #1
03054     0C 00 90 AD |  if_e	jmp	#LR__0154
03058     0D 0F 02 F6 | 	mov	arg01, local02
0305c     04 FC BF FD | 	call	#__system___tx
03060     E8 FF 9F FD | 	jmp	#LR__0153
03064                 | LR__0154
03064     00 CA 05 F6 | 	mov	result1, #0
03068     AF F0 03 F6 | 	mov	ptra, fp
0306c     BF 00 A0 FD | 	call	#popregs_
03070                 | __system___gc_errmsg_ret
03070     2D 00 64 FD | 	ret
03074                 | 
03074                 | __system___gc_alloc_managed
03074     02 5A 05 F6 | 	mov	COUNT_, #2
03078     B0 00 A0 FD | 	call	#pushregs_
0307c     07 19 02 F6 | 	mov	local01, arg01
03080     00 10 06 F6 | 	mov	arg02, #0
03084     30 00 B0 FD | 	call	#__system___gc_doalloc
03088     E5 1A 0A F6 | 	mov	local02, result1 wz
0308c     18 00 90 5D |  if_ne	jmp	#LR__0155
03090     00 18 5E F2 | 	cmps	local01, #0 wcz
03094     10 00 90 ED |  if_be	jmp	#LR__0155
03098     1B 00 00 FF 
0309c     78 0E 06 F6 | 	mov	arg01, ##@LR__0189
030a0     9C FF BF FD | 	call	#__system___gc_errmsg
030a4     04 00 90 FD | 	jmp	#LR__0156
030a8                 | LR__0155
030a8     0D CB 01 F6 | 	mov	result1, local02
030ac                 | LR__0156
030ac     AF F0 03 F6 | 	mov	ptra, fp
030b0     BF 00 A0 FD | 	call	#popregs_
030b4                 | __system___gc_alloc_managed_ret
030b4     2D 00 64 FD | 	ret
030b8                 | 
030b8                 | __system___gc_doalloc
030b8     06 5A 05 F6 | 	mov	COUNT_, #6
030bc     B0 00 A0 FD | 	call	#pushregs_
030c0     07 19 0A F6 | 	mov	local01, arg01 wz
030c4     08 1B 02 F6 | 	mov	local02, arg02
030c8     00 CA 05 A6 |  if_e	mov	result1, #0
030cc     94 00 90 AD |  if_e	jmp	#LR__0164
030d0     17 18 06 F1 | 	add	local01, #23
030d4     0F 18 26 F5 | 	andn	local01, #15
030d8     04 18 46 F0 | 	shr	local01, #4
030dc     14 BC 05 F1 | 	add	ptr___system__dat__, #20
030e0     DE 0E 02 F6 | 	mov	arg01, ptr___system__dat__
030e4     14 BC 85 F1 | 	sub	ptr___system__dat__, #20
030e8     40 FB BF FD | 	call	#__system___lockmem
030ec     0C 0F 02 F6 | 	mov	arg01, local01
030f0     0D 11 02 F6 | 	mov	arg02, local02
030f4     68 FD BF FD | 	call	#__system___gc_tryalloc
030f8     E5 1C 0A F6 | 	mov	local03, result1 wz
030fc     14 00 90 5D |  if_ne	jmp	#LR__0157
03100     30 03 B0 FD | 	call	#__system___gc_docollect
03104     0C 0F 02 F6 | 	mov	arg01, local01
03108     0D 11 02 F6 | 	mov	arg02, local02
0310c     50 FD BF FD | 	call	#__system___gc_tryalloc
03110     E5 1C 02 F6 | 	mov	local03, result1
03114                 | LR__0157
03114     14 BC 05 F1 | 	add	ptr___system__dat__, #20
03118     DE 0E 02 F6 | 	mov	arg01, ptr___system__dat__
0311c     14 BC 85 F1 | 	sub	ptr___system__dat__, #20
03120     07 01 68 FC | 	wrlong	#0, arg01
03124     00 1C 0E F2 | 	cmp	local03, #0 wz
03128     34 00 90 AD |  if_e	jmp	#LR__0163
0312c     04 18 66 F0 | 	shl	local01, #4
03130     08 18 86 F1 | 	sub	local01, #8
03134     0C 1F 52 F6 | 	abs	local04, local01 wc
03138     02 1E 46 F0 | 	shr	local04, #2
0313c     0F 1F 62 C6 |  if_b	neg	local04, local04
03140     0F 21 0A F6 | 	mov	local05, local04 wz
03144     0E 23 02 F6 | 	mov	local06, local03
03148     14 00 90 AD |  if_e	jmp	#LR__0162
0314c     BC CE 9F FE | 	loc	pa,	#(@LR__0160-@LR__0158)
03150     93 00 A0 FD | 	call	#FCACHE_LOAD_
03154                 | LR__0158
03154     10 05 D8 FC | 	rep	@LR__0161, local05
03158                 | LR__0159
03158     11 01 68 FC | 	wrlong	#0, local06
0315c     04 22 06 F1 | 	add	local06, #4
03160                 | LR__0160
03160                 | LR__0161
03160                 | LR__0162
03160                 | LR__0163
03160     0E CB 01 F6 | 	mov	result1, local03
03164                 | LR__0164
03164     AF F0 03 F6 | 	mov	ptra, fp
03168     BF 00 A0 FD | 	call	#popregs_
0316c                 | __system___gc_doalloc_ret
0316c     2D 00 64 FD | 	ret
03170                 | 
03170                 | __system___gc_isvalidptr
03170     09 CF 01 F6 | 	mov	_var01, arg03
03174     E7 D0 01 F6 | 	mov	_var02, _var01
03178     00 F8 7F FF 
0317c     00 D0 05 F5 | 	and	_var02, ##-1048576
03180     00 C0 31 FF 
03184     00 D0 0D F2 | 	cmp	_var02, ##1669332992 wz
03188     00 CA 05 56 |  if_ne	mov	result1, #0
0318c     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
03190     08 CE 85 F1 | 	sub	_var01, #8
03194     00 F8 7F FF 
03198     00 CE 25 F5 | 	andn	_var01, ##-1048576
0319c     07 CF 59 F2 | 	cmps	_var01, arg01 wcz
031a0     08 00 90 CD |  if_b	jmp	#LR__0165
031a4     08 CF 59 F2 | 	cmps	_var01, arg02 wcz
031a8     08 00 90 CD |  if_b	jmp	#LR__0166
031ac                 | LR__0165
031ac     00 CA 05 F6 | 	mov	result1, #0
031b0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
031b4                 | LR__0166
031b4     E7 D0 01 F6 | 	mov	_var02, _var01
031b8     07 D1 61 F5 | 	xor	_var02, arg01
031bc     0F D0 0D F5 | 	and	_var02, #15 wz
031c0     00 CA 05 56 |  if_ne	mov	result1, #0
031c4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
031c8     E7 D0 01 F6 | 	mov	_var02, _var01
031cc     02 D0 05 F1 | 	add	_var02, #2
031d0     E8 D0 E1 FA | 	rdword	_var02, _var02
031d4     7F 00 00 FF 
031d8     C0 D1 05 F5 | 	and	_var02, ##65472
031dc     36 00 00 FF 
031e0     80 D0 0D F2 | 	cmp	_var02, ##27776 wz
031e4     00 CA 05 56 |  if_ne	mov	result1, #0
031e8     E7 CA 01 A6 |  if_e	mov	result1, _var01
031ec                 | __system___gc_isvalidptr_ret
031ec     2D 00 64 FD | 	ret
031f0                 | 
031f0                 | __system___gc_dofree
031f0     0D 5A 05 F6 | 	mov	COUNT_, #13
031f4     B0 00 A0 FD | 	call	#pushregs_
031f8     07 19 02 F6 | 	mov	local01, arg01
031fc     7C FB BF FD | 	call	#__system___gc_ptrs
03200     E5 1A 02 F6 | 	mov	local02, result1
03204     E6 1C 02 F6 | 	mov	local03, result2
03208     0C 1F 02 F6 | 	mov	local04, local01
0320c     02 1E 06 F1 | 	add	local04, #2
03210     36 00 80 FF 
03214     0F 1F 59 FC | 	wrword	##27791, local04
03218     0C 21 02 F6 | 	mov	local05, local01
0321c     0C 0F 02 F6 | 	mov	arg01, local01
03220     00 FC BF FD | 	call	#__system___gc_nextBlockPtr
03224     E5 22 02 F6 | 	mov	local06, result1
03228     20 CE 9F FE | 	loc	pa,	#(@LR__0168-@LR__0167)
0322c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03230                 | LR__0167
03230     04 20 06 F1 | 	add	local05, #4
03234     10 11 EA FA | 	rdword	arg02, local05 wz
03238     0D 0F 02 F6 | 	mov	arg01, local02
0323c     00 CA 05 A6 |  if_e	mov	result1, #0
03240     04 10 66 50 |  if_ne	shl	arg02, #4
03244     08 0F 02 51 |  if_ne	add	arg01, arg02
03248     07 CB 01 56 |  if_ne	mov	result1, arg01
0324c     E5 20 0A F6 | 	mov	local05, result1 wz
03250     28 00 90 AD |  if_e	jmp	#LR__0169
03254     10 0F 02 F6 | 	mov	arg01, local05
03258     00 24 06 F6 | 	mov	local07, #0
0325c     02 0E 06 F1 | 	add	arg01, #2
03260     07 27 E2 FA | 	rdword	local08, arg01
03264     36 00 00 FF 
03268     8F 26 0E F2 | 	cmp	local08, ##27791 wz
0326c     01 24 66 A6 |  if_e	neg	local07, #1
03270     12 CB 01 F6 | 	mov	result1, local07
03274     E5 28 0A F6 | 	mov	local09, result1 wz
03278     B4 FF 9F AD |  if_e	jmp	#LR__0167
0327c                 | LR__0168
0327c                 | LR__0169
0327c     00 20 0E F2 | 	cmp	local05, #0 wz
03280     0D 21 02 A6 |  if_e	mov	local05, local02
03284     10 1F 02 F6 | 	mov	local04, local05
03288     06 1E 06 F1 | 	add	local04, #6
0328c     0C 29 02 F6 | 	mov	local09, local01
03290     0F 2B E2 FA | 	rdword	local10, local04
03294     06 28 06 F1 | 	add	local09, #6
03298     14 2B 52 FC | 	wrword	local10, local09
0329c     0C 11 0A F6 | 	mov	arg02, local01 wz
032a0     00 CA 05 A6 |  if_e	mov	result1, #0
032a4     0D 11 82 51 |  if_ne	sub	arg02, local02
032a8     04 10 46 50 |  if_ne	shr	arg02, #4
032ac     08 CB 01 56 |  if_ne	mov	result1, arg02
032b0     E5 2A 02 F6 | 	mov	local10, result1
032b4     10 2D 02 F6 | 	mov	local11, local05
032b8     06 2C 06 F1 | 	add	local11, #6
032bc     16 2B 52 FC | 	wrword	local10, local11
032c0     0D 21 0A F2 | 	cmp	local05, local02 wz
032c4     84 00 90 AD |  if_e	jmp	#LR__0172
032c8     10 0F 02 F6 | 	mov	arg01, local05
032cc     54 FB BF FD | 	call	#__system___gc_nextBlockPtr
032d0     0C CB 09 F2 | 	cmp	result1, local01 wz
032d4     74 00 90 5D |  if_ne	jmp	#LR__0171
032d8     10 1F E2 FA | 	rdword	local04, local05
032dc     0C 2D E2 FA | 	rdword	local11, local01
032e0     16 1F 02 F1 | 	add	local04, local11
032e4     10 1F 52 FC | 	wrword	local04, local05
032e8     0C 1F 02 F6 | 	mov	local04, local01
032ec     02 1E 06 F1 | 	add	local04, #2
032f0     0F 01 58 FC | 	wrword	#0, local04
032f4     0C 0F 02 F6 | 	mov	arg01, local01
032f8     28 FB BF FD | 	call	#__system___gc_nextBlockPtr
032fc     E5 22 02 F6 | 	mov	local06, result1
03300     0E 23 5A F2 | 	cmps	local06, local03 wcz
03304     20 00 90 3D |  if_ae	jmp	#LR__0170
03308     10 11 0A F6 | 	mov	arg02, local05 wz
0330c     00 CA 05 A6 |  if_e	mov	result1, #0
03310     0D 11 82 51 |  if_ne	sub	arg02, local02
03314     04 10 46 50 |  if_ne	shr	arg02, #4
03318     08 CB 01 56 |  if_ne	mov	result1, arg02
0331c     11 2D 02 F6 | 	mov	local11, local06
03320     04 2C 06 F1 | 	add	local11, #4
03324     16 CB 51 FC | 	wrword	result1, local11
03328                 | LR__0170
03328     0C 1F 02 F6 | 	mov	local04, local01
0332c     06 1E 06 F1 | 	add	local04, #6
03330     10 29 02 F6 | 	mov	local09, local05
03334     0F 2B E2 FA | 	rdword	local10, local04
03338     06 28 06 F1 | 	add	local09, #6
0333c     14 2B 52 FC | 	wrword	local10, local09
03340     06 18 06 F1 | 	add	local01, #6
03344     0C 01 58 FC | 	wrword	#0, local01
03348     10 19 02 F6 | 	mov	local01, local05
0334c                 | LR__0171
0334c                 | LR__0172
0334c     0C 0F 02 F6 | 	mov	arg01, local01
03350     D0 FA BF FD | 	call	#__system___gc_nextBlockPtr
03354     E5 2E 0A F6 | 	mov	local12, result1 wz
03358     C8 00 90 AD |  if_e	jmp	#LR__0174
0335c     0E 2F 5A F2 | 	cmps	local12, local03 wcz
03360     C0 00 90 3D |  if_ae	jmp	#LR__0174
03364     17 0F 02 F6 | 	mov	arg01, local12
03368     00 24 06 F6 | 	mov	local07, #0
0336c     02 0E 06 F1 | 	add	arg01, #2
03370     07 27 E2 FA | 	rdword	local08, arg01
03374     36 00 00 FF 
03378     8F 26 0E F2 | 	cmp	local08, ##27791 wz
0337c     01 24 66 A6 |  if_e	neg	local07, #1
03380     12 CB 09 F6 | 	mov	result1, local07 wz
03384     9C 00 90 AD |  if_e	jmp	#LR__0174
03388     0C 21 02 F6 | 	mov	local05, local01
0338c     10 1F E2 FA | 	rdword	local04, local05
03390     17 19 02 F6 | 	mov	local01, local12
03394     0C 2D E2 FA | 	rdword	local11, local01
03398     16 1F 02 F1 | 	add	local04, local11
0339c     10 31 02 F6 | 	mov	local13, local05
033a0     18 1F 52 FC | 	wrword	local04, local13
033a4     0C 1F 02 F6 | 	mov	local04, local01
033a8     06 1E 06 F1 | 	add	local04, #6
033ac     10 29 02 F6 | 	mov	local09, local05
033b0     0F 2B E2 FA | 	rdword	local10, local04
033b4     06 28 06 F1 | 	add	local09, #6
033b8     14 2B 52 FC | 	wrword	local10, local09
033bc     0C 1F 02 F6 | 	mov	local04, local01
033c0     02 1E 06 F1 | 	add	local04, #2
033c4     0F 55 59 FC | 	wrword	#170, local04
033c8     0C 1F 02 F6 | 	mov	local04, local01
033cc     06 1E 06 F1 | 	add	local04, #6
033d0     0F 01 58 FC | 	wrword	#0, local04
033d4     0C 1F 02 F6 | 	mov	local04, local01
033d8     0F 0F 02 F6 | 	mov	arg01, local04
033dc     44 FA BF FD | 	call	#__system___gc_nextBlockPtr
033e0     E5 28 02 F6 | 	mov	local09, result1
033e4     14 23 0A F6 | 	mov	local06, local09 wz
033e8     38 00 90 AD |  if_e	jmp	#LR__0173
033ec     0E 23 5A F2 | 	cmps	local06, local03 wcz
033f0     30 00 90 3D |  if_ae	jmp	#LR__0173
033f4     0D 1F 02 F6 | 	mov	local04, local02
033f8     10 29 02 F6 | 	mov	local09, local05
033fc     0F 0F 02 F6 | 	mov	arg01, local04
03400     14 11 0A F6 | 	mov	arg02, local09 wz
03404     00 CA 05 A6 |  if_e	mov	result1, #0
03408     07 11 82 51 |  if_ne	sub	arg02, arg01
0340c     04 10 46 50 |  if_ne	shr	arg02, #4
03410     08 CB 01 56 |  if_ne	mov	result1, arg02
03414     E5 2A 02 F6 | 	mov	local10, result1
03418     11 2D 02 F6 | 	mov	local11, local06
0341c     04 2C 06 F1 | 	add	local11, #4
03420     16 2B 52 FC | 	wrword	local10, local11
03424                 | LR__0173
03424                 | LR__0174
03424     11 CB 01 F6 | 	mov	result1, local06
03428     AF F0 03 F6 | 	mov	ptra, fp
0342c     BF 00 A0 FD | 	call	#popregs_
03430                 | __system___gc_dofree_ret
03430     2D 00 64 FD | 	ret
03434                 | 
03434                 | __system___gc_docollect
03434     09 5A 05 F6 | 	mov	COUNT_, #9
03438     B0 00 A0 FD | 	call	#pushregs_
0343c     3C F9 BF FD | 	call	#__system___gc_ptrs
03440     E6 18 02 F6 | 	mov	local01, result2
03444     E5 1A 02 F6 | 	mov	local02, result1
03448     0D 0F 02 F6 | 	mov	arg01, local02
0344c     D4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03450     E5 1C 0A F6 | 	mov	local03, result1 wz
03454     01 CA 61 FD | 	cogid	result1
03458     E5 1E 02 F6 | 	mov	local04, result1
0345c     34 00 90 AD |  if_e	jmp	#LR__0176
03460                 | LR__0175
03460     0C 1D 5A F2 | 	cmps	local03, local01 wcz
03464     2C 00 90 3D |  if_ae	jmp	#LR__0176
03468     0E 21 02 F6 | 	mov	local05, local03
0346c     02 20 06 F1 | 	add	local05, #2
03470     10 23 E2 FA | 	rdword	local06, local05
03474     20 22 26 F5 | 	andn	local06, #32
03478     0E 25 02 F6 | 	mov	local07, local03
0347c     02 24 06 F1 | 	add	local07, #2
03480     12 23 52 FC | 	wrword	local06, local07
03484     0E 0F 02 F6 | 	mov	arg01, local03
03488     98 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0348c     E5 1C 0A F6 | 	mov	local03, result1 wz
03490     CC FF 9F 5D |  if_ne	jmp	#LR__0175
03494                 | LR__0176
03494     00 22 06 F6 | 	mov	local06, #0
03498     00 0E 06 F6 | 	mov	arg01, #0
0349c     24 F7 BF FD | 	call	#__system____topofstack
034a0     E5 24 02 F6 | 	mov	local07, result1
034a4     11 0F 02 F6 | 	mov	arg01, local06
034a8     12 11 02 F6 | 	mov	arg02, local07
034ac     A0 00 B0 FD | 	call	#__system___gc_markhub
034b0     34 01 B0 FD | 	call	#__system___gc_markcog
034b4     0D 0F 02 F6 | 	mov	arg01, local02
034b8     68 F9 BF FD | 	call	#__system___gc_nextBlockPtr
034bc     E5 26 0A F6 | 	mov	local08, result1 wz
034c0     10 00 90 5D |  if_ne	jmp	#LR__0177
034c4     1B 00 00 FF 
034c8     95 0E 06 F6 | 	mov	arg01, ##@LR__0190
034cc     70 FB BF FD | 	call	#__system___gc_errmsg
034d0     70 00 90 FD | 	jmp	#LR__0183
034d4                 | LR__0177
034d4                 | LR__0178
034d4     13 1D 02 F6 | 	mov	local03, local08
034d8     0E 0F 02 F6 | 	mov	arg01, local03
034dc     44 F9 BF FD | 	call	#__system___gc_nextBlockPtr
034e0     E5 26 02 F6 | 	mov	local08, result1
034e4     0E 23 02 F6 | 	mov	local06, local03
034e8     02 22 06 F1 | 	add	local06, #2
034ec     11 29 E2 FA | 	rdword	local09, local06
034f0     20 28 CE F7 | 	test	local09, #32 wz
034f4     3C 00 90 5D |  if_ne	jmp	#LR__0181
034f8     14 21 02 F6 | 	mov	local05, local09
034fc     10 20 0E F5 | 	and	local05, #16 wz
03500     30 00 90 5D |  if_ne	jmp	#LR__0181
03504     14 23 02 F6 | 	mov	local06, local09
03508     0F 22 06 F5 | 	and	local06, #15
0350c     11 29 02 F6 | 	mov	local09, local06
03510     0F 29 0A F2 | 	cmp	local09, local04 wz
03514     08 00 90 AD |  if_e	jmp	#LR__0179
03518     0E 28 0E F2 | 	cmp	local09, #14 wz
0351c     14 00 90 5D |  if_ne	jmp	#LR__0180
03520                 | LR__0179
03520     0E 23 02 F6 | 	mov	local06, local03
03524     11 0F 02 F6 | 	mov	arg01, local06
03528     C4 FC BF FD | 	call	#__system___gc_dofree
0352c     E5 20 02 F6 | 	mov	local05, result1
03530     10 27 02 F6 | 	mov	local08, local05
03534                 | LR__0180
03534                 | LR__0181
03534     00 26 0E F2 | 	cmp	local08, #0 wz
03538     08 00 90 AD |  if_e	jmp	#LR__0182
0353c     0C 27 5A F2 | 	cmps	local08, local01 wcz
03540     90 FF 9F CD |  if_b	jmp	#LR__0178
03544                 | LR__0182
03544                 | LR__0183
03544     AF F0 03 F6 | 	mov	ptra, fp
03548     BF 00 A0 FD | 	call	#popregs_
0354c                 | __system___gc_docollect_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | __system___gc_markhub
03550     0A 5A 05 F6 | 	mov	COUNT_, #10
03554     B0 00 A0 FD | 	call	#pushregs_
03558     07 19 02 F6 | 	mov	local01, arg01
0355c     08 1B 02 F6 | 	mov	local02, arg02
03560     18 F8 BF FD | 	call	#__system___gc_ptrs
03564     E5 1C 02 F6 | 	mov	local03, result1
03568     E6 1E 02 F6 | 	mov	local04, result2
0356c                 | LR__0184
0356c     0D 19 5A F2 | 	cmps	local01, local02 wcz
03570     68 00 90 3D |  if_ae	jmp	#LR__0185
03574     0C 13 02 FB | 	rdlong	arg03, local01
03578     04 18 06 F1 | 	add	local01, #4
0357c     0E 0F 02 F6 | 	mov	arg01, local03
03580     0F 11 02 F6 | 	mov	arg02, local04
03584     E8 FB BF FD | 	call	#__system___gc_isvalidptr
03588     E5 20 0A F6 | 	mov	local05, result1 wz
0358c     DC FF 9F AD |  if_e	jmp	#LR__0184
03590     10 0F 02 F6 | 	mov	arg01, local05
03594     00 22 06 F6 | 	mov	local06, #0
03598     02 0E 06 F1 | 	add	arg01, #2
0359c     07 25 E2 FA | 	rdword	local07, arg01
035a0     36 00 00 FF 
035a4     8F 24 0E F2 | 	cmp	local07, ##27791 wz
035a8     01 22 66 A6 |  if_e	neg	local06, #1
035ac     11 CB 01 F6 | 	mov	result1, local06
035b0     E5 26 0A F6 | 	mov	local08, result1 wz
035b4     B4 FF 9F 5D |  if_ne	jmp	#LR__0184
035b8     10 29 02 F6 | 	mov	local09, local05
035bc     02 28 06 F1 | 	add	local09, #2
035c0     14 2B E2 FA | 	rdword	local10, local09
035c4     0F 2A 26 F5 | 	andn	local10, #15
035c8     2E 2A 46 F5 | 	or	local10, #46
035cc     10 29 02 F6 | 	mov	local09, local05
035d0     02 28 06 F1 | 	add	local09, #2
035d4     14 2B 52 FC | 	wrword	local10, local09
035d8     90 FF 9F FD | 	jmp	#LR__0184
035dc                 | LR__0185
035dc     AF F0 03 F6 | 	mov	ptra, fp
035e0     BF 00 A0 FD | 	call	#popregs_
035e4                 | __system___gc_markhub_ret
035e4     2D 00 64 FD | 	ret
035e8                 | 
035e8                 | __system___gc_markcog
035e8     06 5A 05 F6 | 	mov	COUNT_, #6
035ec     B0 00 A0 FD | 	call	#pushregs_
035f0     88 F7 BF FD | 	call	#__system___gc_ptrs
035f4     E5 18 02 F6 | 	mov	local01, result1
035f8     E6 1A 02 F6 | 	mov	local02, result2
035fc     00 1C 06 F6 | 	mov	local03, #0
03600                 | LR__0186
03600     F0 1F 06 F6 | 	mov	local04, #496
03604     0E 1F 82 F1 | 	sub	local04, local03
03608     F0 1F 06 F1 | 	add	local04, #496
0360c                 | 	'.live	local04
0360c     00 1E 96 F9 | 	alts	local04, #0
03610     0F 21 02 F6 | 	mov	local05, local04
03614     0C 0F 02 F6 | 	mov	arg01, local01
03618     0D 11 02 F6 | 	mov	arg02, local02
0361c     10 13 02 F6 | 	mov	arg03, local05
03620     4C FB BF FD | 	call	#__system___gc_isvalidptr
03624     E5 20 0A F6 | 	mov	local05, result1 wz
03628     18 00 90 AD |  if_e	jmp	#LR__0187
0362c     10 23 02 F6 | 	mov	local06, local05
03630     02 22 06 F1 | 	add	local06, #2
03634     11 1F E2 FA | 	rdword	local04, local06
03638     20 1E 46 F5 | 	or	local04, #32
0363c     02 20 06 F1 | 	add	local05, #2
03640     10 1F 52 FC | 	wrword	local04, local05
03644                 | LR__0187
03644     01 1C 06 F1 | 	add	local03, #1
03648     F0 1D 5E F2 | 	cmps	local03, #496 wcz
0364c     B0 FF 9F CD |  if_b	jmp	#LR__0186
03650     AF F0 03 F6 | 	mov	ptra, fp
03654     BF 00 A0 FD | 	call	#popregs_
03658                 | __system___gc_markcog_ret
03658     2D 00 64 FD | 	ret
0365c                 | 
0365c                 | LR__0188
0365c     20 21 21 21 
03660     20 63 6F 72 
03664     72 75 70 74 
03668     65 64 20 68 
0366c     65 61 70 3F 
03670     3F 3F 20 21 
03674     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03677     00          | 	byte	0
03678                 | LR__0189
03678     20 21 21 21 
0367c     20 6F 75 74 
03680     20 6F 66 20 
03684     68 65 61 70 
03688     20 6D 65 6D 
0368c     6F 72 79 20 
03690     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03694     00          | 	byte	0
03695                 | LR__0190
03695     20 21 21 21 
03699     20 63 6F 72 
0369d     72 75 70 74 
036a1     65 64 20 68 
036a5     65 61 70 20 
036a9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
036ad     00          | 	byte	0
036ae                 | LR__0191
036ae     6D 6F 64 65 | 	byte	"mode"
036b2     00          | 	byte	0
036b3                 | LR__0192
036b3     63 70 6C    | 	byte	"cpl"
036b6     00          | 	byte	0
036b7                 | LR__0193
036b7     62 75 66 70 
036bb     74 72       | 	byte	"bufptr"
036bd     00          | 	byte	0
036be                 | LR__0194
036be     62 75 66 6C 
036c2     65 6E       | 	byte	"buflen"
036c4     00          | 	byte	0
036c5                 | LR__0195
036c5     6C 69 6E 65 
036c9     73          | 	byte	"lines"
036ca     00          | 	byte	0
036cb                 | LR__0196
036cb     6D 6F 64 65 | 	byte	"mode"
036cf     00          | 	byte	0
036d0                 | LR__0197
036d0     63 70 6C    | 	byte	"cpl"
036d3     00          | 	byte	0
036d4                 | LR__0198
036d4     62 75 66 5F 
036d8     70 74 72    | 	byte	"buf_ptr"
036db     00          | 	byte	0
036dc                 | LR__0199
036dc     62 75 66 6C 
036e0     65 6E       | 	byte	"buflen"
036e2     00          | 	byte	0
036e3                 | LR__0200
036e3     6C 69 6E 65 
036e7     73          | 	byte	"lines"
036e8     00          | 	byte	0
036e9                 | LR__0201
036e9     6D 6F 64 65 | 	byte	"mode"
036ed     00          | 	byte	0
036ee                 | LR__0202
036ee     63 70 6C    | 	byte	"cpl"
036f1     00          | 	byte	0
036f2                 | LR__0203
036f2     62 75 66 5F 
036f6     70 74 72    | 	byte	"buf_ptr"
036f9     00          | 	byte	0
036fa                 | LR__0204
036fa     62 75 66 6C 
036fe     65 6E       | 	byte	"buflen"
03700     00          | 	byte	0
03701                 | LR__0205
03701     6C 69 6E 65 
03705     73          | 	byte	"lines"
03706     00          | 	byte	0
03707                 | LR__0206
03707     6D 6F 64 65 | 	byte	"mode"
0370b     00          | 	byte	0
0370c                 | LR__0207
0370c     63 70 6C    | 	byte	"cpl"
0370f     00          | 	byte	0
03710                 | LR__0208
03710     62 75 66 5F 
03714     70 74 72    | 	byte	"buf_ptr"
03717     00          | 	byte	0
03718                 | LR__0209
03718     62 75 66 6C 
0371c     65 6E       | 	byte	"buflen"
0371e     00          | 	byte	0
0371f                 | LR__0210
0371f     6C 69 6E 65 
03723     73          | 	byte	"lines"
03724     00          | 	byte	0
03725     00 00 00    | 	alignl
03728                 | _dat_
03728     00 00 00 00 
0372c     00 00 00 00 
03730     00 00 00 00 
03734     00 00 00 00 
03738     00 00 00    | vga_font       file "vgafont.def"
0373b     7E 81 A5 81 
0373f     81 BD 99 81 
03743     81 7E 00 00 
03747     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0374b     7E FF DB FF 
0374f     FF C3 E7 FF 
03753     FF 7E 00 00 
03757     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0375b     00 36 7F 7F 
0375f     7F 7F 3E 1C 
03763     08 00 00 00 
03767     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0376b     00 08 1C 3E 
0376f     7F 3E 1C 08 
03773     00 00 00 00 
03777     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0377b     18 3C 3C E7 
0377f     E7 E7 18 18 
03783     3C 00 00 00 
03787     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0378b     18 3C 7E FF 
0378f     FF 7E 18 18 
03793     3C 00 00 00 
03797     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0379b     00 00 00 18 
0379f     3C 3C 18 00 
037a3     00 00 00 00 
037a7     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
037ab     FF FF FF E7 
037af     C3 C3 E7 FF 
037b3     FF FF FF FF 
037b7     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
037bb     00 00 3C 66 
037bf     42 42 66 3C 
037c3     00 00 00 00 
037c7     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
037cb     FF FF C3 99 
037cf     BD BD 99 C3 
037d3     FF FF FF FF 
037d7     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
037db     78 70 58 4C 
037df     1E 33 33 33 
037e3     33 1E 00 00 
037e7     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
037eb     3C 66 66 66 
037ef     66 3C 18 7E 
037f3     18 18 00 00 
037f7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
037fb     FC CC FC 0C 
037ff     0C 0C 0C 0E 
03803     0F 07 00 00 
03807     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
0380b     FE C6 FE C6 
0380f     C6 C6 C6 E6 
03813     E7 67 03 00 
03817     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
0381b     18 18 DB 3C 
0381f     E7 3C DB 18 
03823     18 00 00 00 
03827     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
0382b     03 07 0F 1F 
0382f     7F 1F 0F 07 
03833     03 01 00 00 
03837     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
0383b     60 70 78 7C 
0383f     7F 7C 78 70 
03843     60 40 00 00 
03847     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0384b     18 3C 7E 18 
0384f     18 18 7E 3C 
03853     18 00 00 00 
03857     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0385b     66 66 66 66 
0385f     66 66 66    | 	byte	$66[7]
03862     00 66 66 00 
03866     00 00 00 00 
0386a     00 FE DB DB 
0386e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03872     D8 D8 D8 00 
03876     00 00 00 3E 
0387a     63 06 1C 36 
0387e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03882     30 63 3E 00 
03886     00 00 00 00 
0388a     00 00 00 00 
0388e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03892     7F 7F 7F 00 
03896     00 00 00 00 
0389a     00 18 3C 7E 
0389e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
038a2     3C 18 7E 00 
038a6     00 00 00 00 
038aa     00 18 3C 7E 
038ae     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
038b2     18 18 18 00 
038b6     00 00 00 00 
038ba     00 18 18 18 
038be     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
038c2     7E 3C 18 00 
038c6     00 00 00 00 
038ca     00 00 00 18 
038ce     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
038d2     00 00 00 00 
038d6     00 00 00 00 
038da     00 00 00    | 	byte	$00[11]
038dd     0C 06 7F 06 
038e1     0C 00 00 00 
038e5     00 00 00 00 
038e9     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
038ed     00 03 03 03 
038f1     7F 00 00 00 
038f5     00 00 00 00 
038f9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
038fd     14 36 7F 36 
03901     14 00 00 00 
03905     00 00 00 00 
03909     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
0390d     1C 1C 3E 3E 
03911     7F 7F 00 00 
03915     00 00 00 00 
03919     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0391d     7F 3E 3E 1C 
03921     1C 08 00 00 
03925     00 00 00 00 
03929     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0392d     00 00 00 00 
03931     00 00 00 00 
03935     00 00 00 00 
03939     00 00       | 	byte	$00[14]
0393b     18 3C 3C 3C 
0393f     18 18 18 00 
03943     18 18 00 00 
03947     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
0394b     66 24 00 00 
0394f     00 00 00 00 
03953     00 00 00 00 
03957     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0395b     00 36 36 7F 
0395f     36 36 36 7F 
03963     36 36 00 00 
03967     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
0396b     3E 63 43 03 
0396f     3E 60 60 61 
03973     63 3E 18 18 
03977     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
0397b     00 00 43 63 
0397f     30 18 0C 06 
03983     63 61 00 00 
03987     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
0398b     1C 36 36 1C 
0398f     6E 3B 33 33 
03993     33 6E 00 00 
03997     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
0399b     0C 0C 0C 06 
0399f     00 00 00 00 
039a3     00 00 00 00 
039a7     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
039ab     30 18 0C 0C 
039af     0C 0C 0C 0C 
039b3     18 30 00 00 
039b7     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
039bb     0C 18 30 30 
039bf     30 30 30 30 
039c3     18 0C 00 00 
039c7     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
039cb     00 00 00 66 
039cf     3C FF 3C 66 
039d3     00 00 00 00 
039d7     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
039db     00 00 00 18 
039df     18 7E 18 18 
039e3     00 00 00 00 
039e7     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
039eb     00 00 00 00 
039ef     00 00 00 00 | 	byte	$00[8]
039f3     18 18 18 0C 
039f7     00 00 00 00 
039fb     00 00 00 00 
039ff     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03a03     00 00 00 00 
03a07     00 00 00 00 
03a0b     00 00 00 00 
03a0f     00 00 00 00 | 	byte	$00[16]
03a13     18 18 00 00 
03a17     00 00 00 00 
03a1b     00 00 40 60 
03a1f     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03a23     03 01 00 00 
03a27     00 00 00 00 
03a2b     1C 36 63 63 
03a2f     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03a33     36 1C 00 00 
03a37     00 00 00 00 
03a3b     18 1C 1E 18 
03a3f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03a43     18 7E 00 00 
03a47     00 00 00 00 
03a4b     3E 63 60 30 
03a4f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03a53     63 7F 00 00 
03a57     00 00 00 00 
03a5b     3E 63 60 60 
03a5f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03a63     63 3E 00 00 
03a67     00 00 00 00 
03a6b     30 38 3C 36 
03a6f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03a73     30 78 00 00 
03a77     00 00 00 00 
03a7b     7F 03 03 03 
03a7f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03a83     63 3E 00 00 
03a87     00 00 00 00 
03a8b     1C 06 03 03 
03a8f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03a93     63 3E 00 00 
03a97     00 00 00 00 
03a9b     7F 63 60 60 
03a9f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03aa3     0C 0C 00 00 
03aa7     00 00 00 00 
03aab     3E 63 63 63 
03aaf     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03ab3     63 3E 00 00 
03ab7     00 00 00 00 
03abb     3E 63 63 63 
03abf     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03ac3     30 1E 00 00 
03ac7     00 00 00 00 
03acb     00 00 00 18 
03acf     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03ad3     18 18 00 00 
03ad7     00 00 00 00 
03adb     00 00 00 18 
03adf     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03ae3     18 18 0C 00 
03ae7     00 00 00 00 
03aeb     00 60 30 18 
03aef     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03af3     30 60 00 00 
03af7     00 00 00 00 
03afb     00 00 00 7E 
03aff     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03b03     00 00 00 00 
03b07     00 00 00 00 
03b0b     00          | 	byte	$00[9]
03b0c     06 0C 18 30 
03b10     60 30 18 0C 
03b14     06 00 00 00 
03b18     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03b1c     63 63 30 18 
03b20     18 18 00 18 
03b24     18 00 00 00 
03b28     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03b2c     3E 63 63 7B 
03b30     7B 7B 3B 03 
03b34     3E 00 00 00 
03b38     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03b3c     1C 36 63 63 
03b40     7F 63 63 63 
03b44     63 00 00 00 
03b48     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03b4c     66 66 66 3E 
03b50     66 66 66 66 
03b54     3F 00 00 00 
03b58     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03b5c     66 43 03 03 
03b60     03 03 43 66 
03b64     3C 00 00 00 
03b68     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03b6c     36 66 66 66 
03b70     66 66 66 36 
03b74     1F 00 00 00 
03b78     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03b7c     66 46 16 1E 
03b80     16 06 46 66 
03b84     7F 00 00 00 
03b88     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03b8c     66 46 16 1E 
03b90     16 06 06 06 
03b94     0F 00 00 00 
03b98     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03b9c     66 43 03 03 
03ba0     7B 63 63 66 
03ba4     5C 00 00 00 
03ba8     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03bac     63 63 63 7F 
03bb0     63 63 63 63 
03bb4     63 00 00 00 
03bb8     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03bbc     18 18 18 18 
03bc0     18 18 18 18 | 	byte	$18[8]
03bc4     3C 00 00 00 
03bc8     00 00 00 78 
03bcc     30 30 30 30 
03bd0     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03bd4     1E 00 00 00 
03bd8     00 00 00 67 
03bdc     66 66 36 1E 
03be0     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03be4     67 00 00 00 
03be8     00 00 00 0F 
03bec     06 06 06 06 
03bf0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03bf4     7F 00 00 00 
03bf8     00 00 00 63 
03bfc     77 7F 7F 6B 
03c00     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
03c04     63 00 00 00 
03c08     00 00 00 63 
03c0c     67 6F 7F 7B 
03c10     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
03c14     63 00 00 00 
03c18     00 00 00 3E 
03c1c     63 63 63 63 
03c20     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03c24     3E 00 00 00 
03c28     00 00 00 3F 
03c2c     66 66 66 3E 
03c30     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
03c34     0F 00 00 00 
03c38     00 00 00 3E 
03c3c     63 63 63 63 
03c40     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
03c44     3E 30 70 00 
03c48     00 00 00 3F 
03c4c     66 66 66 3E 
03c50     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
03c54     67 00 00 00 
03c58     00 00 00 3E 
03c5c     63 63 06 1C 
03c60     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03c64     3E 00 00 00 
03c68     00 00 00 7E 
03c6c     7E 5A 18 18 
03c70     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03c74     3C 00 00 00 
03c78     00 00 00 63 
03c7c     63 63 63 63 
03c80     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03c84     3E 00 00 00 
03c88     00 00 00 63 
03c8c     63 63 63 63 
03c90     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
03c94     08 00 00 00 
03c98     00 00 00 63 
03c9c     63 63 63 6B 
03ca0     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
03ca4     36 00 00 00 
03ca8     00 00 00 63 
03cac     63 36 3E 1C 
03cb0     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
03cb4     63 00 00 00 
03cb8     00 00 00 66 
03cbc     66 66 66 3C 
03cc0     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
03cc4     3C 00 00 00 
03cc8     00 00 00 7F 
03ccc     63 61 30 18 
03cd0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03cd4     7F 00 00 00 
03cd8     00 00 00 3C 
03cdc     0C 0C 0C 0C 
03ce0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
03ce4     3C 00 00 00 
03ce8     00 00 00 00 
03cec     01 03 07 0E 
03cf0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
03cf4     40 00 00 00 
03cf8     00 00 00 3C 
03cfc     30 30 30 30 
03d00     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
03d04     3C 00 00 00 
03d08     1C 36 00 00 
03d0c     00 00 00 00 
03d10     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d14     00 00 00 00 
03d18     00 00 00 00 
03d1c     00 00 00 00 
03d20     00 00 00 00 
03d24     00          | 	byte	$00[17]
03d25     FF 00 00 0C 
03d29     18 00 00 00 
03d2d     00 00 00 00 
03d31     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d35     00 00 00 00 
03d39     00 00 00 00 
03d3d     00          | 	byte	$00[9]
03d3e     1E 30 3E 33 
03d42     33 33 6E 00 
03d46     00 00 00 00 
03d4a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03d4e     1E 36 66 66 
03d52     66 66 3E 00 
03d56     00 00 00 00 
03d5a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d5e     3E 63 03 03 
03d62     03 63 3E 00 
03d66     00 00 00 00 
03d6a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03d6e     3C 36 33 33 
03d72     33 33 6E 00 
03d76     00 00 00 00 
03d7a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d7e     3E 63 7F 03 
03d82     03 63 3E 00 
03d86     00 00 00 00 
03d8a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
03d8e     0C 1E 0C 0C 
03d92     0C 0C 1E 00 
03d96     00 00 00 00 
03d9a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d9e     6E 33 33 33 
03da2     33 33 3E 30 
03da6     33 1E 00 00 
03daa     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
03dae     36 6E 66 66 
03db2     66 66 67 00 
03db6     00 00 00 00 
03dba     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
03dbe     1C 18 18 18 
03dc2     18 18 3C 00 
03dc6     00 00 00 00 
03dca     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
03dce     70 60 60 60 
03dd2     60 60 60 66 
03dd6     66 3C 00 00 
03dda     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
03dde     66 36 1E 1E 
03de2     36 66 67 00 
03de6     00 00 00 00 
03dea     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
03dee     18 18 18 18 
03df2     18 18       | 	byte	$18[6]
03df4     3C 00 00 00 
03df8     00 00 00 00 
03dfc     00 00 37 7F 
03e00     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
03e04     63 00 00 00 
03e08     00 00 00 00 
03e0c     00 00 3B 66 
03e10     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03e14     66 00 00 00 
03e18     00 00 00 00 
03e1c     00 00 3E 63 
03e20     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
03e24     3E 00 00 00 
03e28     00 00 00 00 
03e2c     00 00 3B 66 
03e30     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03e34     3E 06 06 0F 
03e38     00 00 00 00 
03e3c     00 00 6E 33 
03e40     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
03e44     3E 30 30 78 
03e48     00 00 00 00 
03e4c     00 00 3B 6E 
03e50     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
03e54     0F 00 00 00 
03e58     00 00 00 00 
03e5c     00 00 3E 63 
03e60     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
03e64     3E 00 00 00 
03e68     00 00 00 08 
03e6c     0C 0C 3F 0C 
03e70     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
03e74     38 00 00 00 
03e78     00 00 00 00 
03e7c     00 00 33 33 
03e80     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
03e84     6E 00 00 00 
03e88     00 00 00 00 
03e8c     00 00 63 63 
03e90     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
03e94     1C 00 00 00 
03e98     00 00 00 00 
03e9c     00 00 63 63 
03ea0     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
03ea4     36 00 00 00 
03ea8     00 00 00 00 
03eac     00 00 63 36 
03eb0     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
03eb4     63 00 00 00 
03eb8     00 00 00 00 
03ebc     00 00 63 63 
03ec0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
03ec4     7E 60 30 1F 
03ec8     00 00 00 00 
03ecc     00 00 7F 33 
03ed0     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
03ed4     7F 00 00 00 
03ed8     00 00 00 70 
03edc     18 18 18 0E 
03ee0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
03ee4     70 00 00 00 
03ee8     00 00 00 18 
03eec     18 18 18 18 
03ef0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
03ef4     18 00 00 00 
03ef8     00 00 00 0E 
03efc     18 18 18 70 
03f00     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
03f04     0E 00 00 00 
03f08     6E 3B 00 00 
03f0c     00 00 00 00 
03f10     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f14     00 00 00 00 
03f18     00 00 00 00 
03f1c     00 00       | 	byte	$00[10]
03f1e     08 1C 36 63 
03f22     63 63 7F 00 
03f26     00 00 00 00 
03f2a     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
03f2e     03 03 03 03 
03f32     43 66 3C 18 
03f36     30 1E 00 00 
03f3a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
03f3e     33 33 33 33 
03f42     33 33       | 	byte	$33[6]
03f44     6E 00 00 00 
03f48     00 00 60 30 
03f4c     18 00 3E 63 
03f50     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
03f54     3E 00 00 00 
03f58     00 00 08 1C 
03f5c     36 00 1E 30 
03f60     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
03f64     6E 00 00 00 
03f68     00 00 00 00 
03f6c     33 00 1E 30 
03f70     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
03f74     6E 00 00 00 
03f78     00 00 1C 36 
03f7c     1C 00 33 33 
03f80     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
03f84     6E 00 00 00 
03f88     00 00 60 30 
03f8c     18 00 3E 63 
03f90     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
03f94     3E 00 00 00 
03f98     00 00 00 00 
03f9c     00 00 3E 63 
03fa0     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
03fa4     3E 18 30 1E 
03fa8     00 00 00 1C 
03fac     58 78 38 18 
03fb0     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
03fb4     3C 00 00 00 
03fb8     00 00 00 00 
03fbc     63 00 3E 63 
03fc0     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
03fc4     3E 00 00 00 
03fc8     66 33 00 3E 
03fcc     63 63 63 63 
03fd0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03fd4     3E 00 00 00 
03fd8     00 00 CC 66 
03fdc     33 00 3E 63 
03fe0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
03fe4     3E 00 00 00 
03fe8     00 00 18 3C 
03fec     66 00 1C 18 
03ff0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
03ff4     3C 00 00 00 
03ff8     30 18 00 7F 
03ffc     63 61 30 18 
04000     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04004     7F 00 00 00 
04008     00 63 00 08 
0400c     1C 36 63 63 
04010     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
04014     63 00 00 00 
04018     30 18 00 3C 
0401c     66 43 03 03 
04020     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
04024     3C 00 00 00 
04028     30 18 00 7F 
0402c     66 46 16 1E 
04030     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
04034     7F 00 00 00 
04038     0C 06 00 0F 
0403c     06 06 06 06 
04040     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
04044     7F 00 00 00 
04048     30 18 00 1C 
0404c     18 18 18 18 
04050     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
04054     3C 00 00 00 
04058     00 00 08 1C 
0405c     36 00 3E 63 
04060     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
04064     3E 00 00 00 
04068     00 00 00 00 
0406c     63 00 3E 63 
04070     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
04074     3E 00 00 00 
04078     00 00 00 6F 
0407c     46 26 06 06 
04080     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
04084     7F 00 00 00 
04088     00 00 00 6E 
0408c     4C 2C 0C 0C 
04090     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04094     1E 00 00 00 
04098     30 18 00 3E 
0409c     63 63 06 1C 
040a0     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
040a4     3E 00 00 00 
040a8     00 00 60 30 
040ac     18 00 3E 63 
040b0     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
040b4     3E 00 00 00 
040b8     00 63 00 3E 
040bc     63 63 63 63 
040c0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
040c4     3E 00 00 00 
040c8     00 63 00 63 
040cc     63 63 63 63 
040d0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
040d4     3E 00 00 00 
040d8     6C 38 00 7E 
040dc     7E 5A 18 18 
040e0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
040e4     3C 00 00 00 
040e8     00 00 60 48 
040ec     2C 0C 3F 0C 
040f0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
040f4     38 00 00 00 
040f8     00 00 00 0F 
040fc     26 36 1E 0E 
04100     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04104     7F 00 00 00 
04108     00 00 00 00 
0410c     00 63 36 1C 
04110     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04114     00 00 00 00 
04118     00 00       | 	byte	$00[6]
0411a     36 1C 08 00 
0411e     3E 63 03 03 
04122     03 63 3E 00 
04126     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0412a     30 18 0C 00 
0412e     1E 30 3E 33 
04132     33 33 6E 00 
04136     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0413a     60 30 18 00 
0413e     1C 18 18 18 
04142     18 18 3C 00 
04146     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0414a     60 30 18 00 
0414e     3E 63 63 63 
04152     63 63 3E 00 
04156     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0415a     30 18 0C 00 
0415e     33 33 33 33 
04162     33 33 6E 00 
04166     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0416a     00 08 1C 36 
0416e     63 63 7F 63 
04172     63 63 63 18 
04176     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0417a     00 00 00 00 
0417e     1E 30 3E 33 
04182     33 33 6E 18 
04186     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0418a     00 7F 63 61 
0418e     30 18 0C 06 
04192     43 63 7F 00 
04196     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0419a     36 1C 08 00 
0419e     7F 33 18 0C 
041a2     06 63 7F 00 
041a6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
041aa     00 7F 66 46 
041ae     16 1E 16 06 
041b2     46 66 7F 18 
041b6     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
041ba     00 00 00 00 
041be     3E 63 7F 03 
041c2     03 63 3E 18 
041c6     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
041ca     00 3C 66 03 
041ce     1F 03 0F 03 
041d2     03 66 3C 00 
041d6     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
041da     60 30 18 00 
041de     7F 33 18 0C 
041e2     06 63 7F 00 
041e6     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
041ea     00 3C 66 43 
041ee     03 03 03 03 
041f2     43 66 3C 00 
041f6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
041fa     00 00 00 00 
041fe     3E 63 06 1C 
04202     30 63 3E 18 
04206     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0420a     00 00 00 00 
0420e     00 00       | 	byte	$00[6]
04210     6C 36 1B 36 
04214     6C 00 00 00 
04218     00 00 00 00 
0421c     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04220     1B 36 6C 36 
04224     1B 00 00 00 
04228     88 22 88 22 
0422c     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
04230     88 22 88 22 
04234     88 22 88 22 
04238     AA 55 AA 55 
0423c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
04240     AA 55 AA 55 
04244     AA 55 AA 55 
04248     BB EE BB EE 
0424c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
04250     BB EE BB EE 
04254     BB EE BB EE 
04258     18 18 18 18 
0425c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
04260     18 18 18 18 
04264     18 18 18 18 
04268     18 18 18 18 
0426c     18 18 18    | 	byte	$18[15]
0426f     1F 18 18 18 
04273     18 18 18 18 
04277     18 30 18 00 
0427b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0427f     63 7F 63 63 
04283     63 63 00 00 
04287     00 1C 36 00 
0428b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
0428f     63 7F 63 63 
04293     63 63 00 00 
04297     00 36 1C 00 
0429b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0429f     1E 16 06 46 
042a3     66 7F 00 00 
042a7     00 00 00 00 
042ab     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
042af     1C 30 60 63 
042b3     63 3E 18 30 
042b7     1E 6C 6C 6C 
042bb     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
042bf     6F 6C 6C 6C 
042c3     6C 6C 6C 6C 
042c7     6C 6C 6C 6C 
042cb     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
042cf     6C 6C 6C 6C 
042d3     6C 6C 6C 6C 
042d7     6C          | 	byte	$6c[9]
042d8     00 00 00 00 
042dc     00          | 	byte	$00[5]
042dd     7F 60 6F 6C 
042e1     6C 6C 6C 6C 
042e5     6C 6C 6C 6C 
042e9     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
042ed     6F 60 7F 00 
042f1     00 00 00 00 
042f5     00 00 00 18 
042f9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
042fd     61 30 18 0C 
04301     06 43 63 7F 
04305     00 00 00 00 
04309     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
0430d     00 7F 33 18 
04311     0C 06 63 7F 
04315     00 00 00 00 
04319     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
0431d     00 00 1F 18 
04321     18 18 18 18 
04325     18 18 18 18 
04329     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0432d     18 18 F8 00 
04331     00 00 00 00 
04335     00 00 00 18 
04339     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0433d     18 18 FF 00 
04341     00 00 00 00 
04345     00 00 00 00 
04349     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0434d     00 00 FF 18 
04351     18 18 18 18 
04355     18 18 18 18 
04359     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0435d     18 18 F8 18 
04361     18 18 18 18 
04365     18 18 18 00 
04369     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0436d     00 00 FF 00 
04371     00 00 00 00 
04375     00 00 00 18 
04379     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0437d     18 18 FF 18 
04381     18 18 18 18 
04385     18 18 18 63 
04389     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
0438d     36 63 63 7F 
04391     63 63 63 63 
04395     00 00 00 00 
04399     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0439d     00 1E 30 3E 
043a1     33 33 33 6E 
043a5     00 00 00 6C 
043a9     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
043ad     EC 0C FC 00 
043b1     00 00 00 00 
043b5     00 00 00 00 
043b9     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043bd     FC 0C EC 6C 
043c1     6C 6C 6C 6C 
043c5     6C 6C 6C 6C 
043c9     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
043cd     EF 00 FF 00 
043d1     00 00 00 00 
043d5     00 00 00 00 
043d9     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043dd     FF 00 EF 6C 
043e1     6C 6C 6C 6C 
043e5     6C 6C 6C 6C 
043e9     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
043ed     EC 0C EC 6C 
043f1     6C 6C 6C 6C 
043f5     6C 6C 6C 00 
043f9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
043fd     FF 00 FF 00 
04401     00 00 00 00 
04405     00 00 00 6C 
04409     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0440d     EF 00 EF 6C 
04411     6C 6C 6C 6C 
04415     6C 6C 6C 00 
04419     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0441d     63 3E 63 63 
04421     63 63 3E 63 
04425     00 00 00 00 
04429     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
0442d     30 3C 36 33 
04431     33 33 33 6E 
04435     00 00 00 00 
04439     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
0443d     66 66 6F 66 
04441     66 66 36 1F 
04445     00 00 00 36 
04449     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
0444d     66 66 66 66 
04451     66 66       | 	byte	$66[6]
04453     36 1F 00 00 
04457     00 00 63 00 
0445b     7F 66 46 16 
0445f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
04463     66 7F 00 00 
04467     00 6C 38 00 
0446b     38 30 30 3C 
0446f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
04473     33 6E 00 00 
04477     00 36 1C 00 
0447b     63 67 6F 7F 
0447f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
04483     63 63 00 00 
04487     00 30 18 00 
0448b     3C 18 18 18 
0448f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04493     18 3C 00 00 
04497     00 3C 66 00 
0449b     3C 18 18 18 
0449f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
044a3     18 3C 00 00 
044a7     00 00 00 36 
044ab     1C 08 00 3E 
044af     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
044b3     63 3E 00 00 
044b7     00 18 18 18 
044bb     18 18 18 18 
044bf     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
044c3     00 00 00 00 
044c7     00 00 00 00 
044cb     00 00 00 00 | 	byte	$00[12]
044cf     F8 18 18 18 
044d3     18 18 18 18 
044d7     18 FF FF FF 
044db     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
044df     FF FF FF FF 
044e3     FF FF FF FF 
044e7     FF          | 	byte	$ff[9]
044e8     00 00 00 00 
044ec     00 00 00    | 	byte	$00[7]
044ef     FF FF FF FF 
044f3     FF FF FF FF 
044f7     FF          | 	byte	$ff[9]
044f8     00 00 00 7E 
044fc     7E 5A 18 18 
04500     18 18 18 18 
04504     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04508     1C 36 1C 63 
0450c     63 63 63 63 
04510     63 63 63 63 
04514     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04518     FF FF FF FF 
0451c     FF FF FF    | 	byte	$ff[7]
0451f     00 00 00 00 
04523     00 00 00 00 
04527     00          | 	byte	$00[9]
04528     30 18 00 3E 
0452c     63 63 63 63 
04530     63 63 63 63 
04534     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04538     00 00 00 1E 
0453c     33 33 33 1B 
04540     33 63 63 63 
04544     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
04548     1C 36 00 3E 
0454c     63 63 63 63 
04550     63 63 63 63 
04554     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04558     30 18 00 63 
0455c     67 6F 7F 7B 
04560     73 63 63 63 
04564     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
04568     00 00 60 30 
0456c     18 00 3B 66 
04570     66 66 66 66 
04574     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04578     00 00 36 1C 
0457c     08 00 3B 66 
04580     66 66 66 66 
04584     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04588     36 1C 00 3E 
0458c     63 63 06 1C 
04590     30 60 63 63 
04594     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
04598     00 00 36 1C 
0459c     08 00 3E 63 
045a0     06 1C 30 63 
045a4     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
045a8     30 18 00 3F 
045ac     66 66 66 3E 
045b0     36 66 66 66 
045b4     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
045b8     30 18 00 63 
045bc     63 63 63 63 
045c0     63 63 63 63 
045c4     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
045c8     00 00 60 30 
045cc     18 00 3B 6E 
045d0     66 06 06 06 
045d4     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
045d8     66 33 00 63 
045dc     63 63 63 63 
045e0     63 63 63 63 
045e4     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
045e8     00 00 60 30 
045ec     18 00 63 63 
045f0     63 63 63 63 
045f4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
045f8     30 18 00 66 
045fc     66 66 66 3C 
04600     18 18 18 18 
04604     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04608     00 00 00 08 
0460c     0C 0C 3F 0C 
04610     0C 0C 0C 6C 
04614     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04618     30 18 00 00 
0461c     00 00 00 00 
04620     00 00 00 00 
04624     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04628     00 00 00 00 
0462c     00 00 00 00 | 	byte	$00[8]
04630     7F 00 00 00 
04634     00 00 00 00 
04638     66 33 00 00 
0463c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
04640     00 00 00 00 
04644     00 00 00 00 
04648     00 00 00 00 
0464c     00 00 00 00 
04650     00 00 00 00 
04654     00          | 	byte	$00[21]
04655     0C 06 3C 36 
04659     1C 00 00 00 
0465d     00 00 00 00 
04661     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04665     00 00 00 63 
04669     3E 00 00 00 
0466d     00 00 00 00 
04671     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04675     00 00 00 00 
04679     3E 63 06 1C 
0467d     36 63 63 36 
04681     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04685     00 00 00 00 
04689     00 00 00 00 | 	byte	$00[8]
0468d     18 00 7E 00 
04691     18 00 00 00 
04695     00 00 00 00 
04699     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0469d     00 00 00 00 
046a1     00 00 00 00 | 	byte	$00[8]
046a5     18 30 1E 00 
046a9     00 00 1C 36 
046ad     36 1C 00 00 
046b1     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
046b5     00 00 00 00 
046b9     63 00 00 00 
046bd     00 00 00 00 
046c1     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
046c5     00 00 00 18 
046c9     18 00 00 00 
046cd     00 00 00 00 
046d1     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
046d5     00 00 00 00 
046d9     00          | 	byte	$00[5]
046da     CC 66 33 00 
046de     33 33 33 33 
046e2     33 33 6E 00 
046e6     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
046ea     00 3F 66 66 
046ee     66 3E 36 66 
046f2     66 66 6F 00 
046f6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
046fa     36 1C 08 00 
046fe     3B 6E 66 06 
04702     06 06 0F 00 
04706     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0470a     00 00 00 7E 
0470e     7E 7E 7E 7E 
04712     7E 7E 00 00 
04716     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0471a     00 00 00 00 
0471e     00 00 00 00 
04722     00 00 00 00 
04726     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04728     00 00 00 00 
      ...             
04758     00 00 00 00 
0475c     00 00 00    | st_font        file "st4font.def"
0475f     FF FF 00 00 
04763     00 00 00 00 
04767     00 18 18 18 
0476b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0476f     18 18 18 18 
04773     18 18 18 18 
04777     18          | 	byte	$18[9]
04778     00 00 00 00 
0477c     00 00 00    | 	byte	$00[7]
0477f     FF FF 18 18 
04783     18 18 18 18 
04787     18 18 18 18 
0478b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0478f     FF FF 00 00 
04793     00 00 00 00 
04797     00 18 18 18 
0479b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0479f     1F 1F 18 18 
047a3     18 18 18 18 
047a7     18 18 18 18 
047ab     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
047af     F8 F8 18 18 
047b3     18 18 18 18 
047b7     18 00 00 00 
047bb     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
047bf     1F 1F 18 18 
047c3     18 18 18 18 
047c7     18 00 00 00 
047cb     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
047cf     F8 F8 18 18 
047d3     18 18 18 18 
047d7     18 18 18 18 
047db     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
047df     1F 1F 00 00 
047e3     00 00 00 00 
047e7     00 18 18 18 
047eb     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
047ef     F8 F8 00 00 
047f3     00 00 00 00 
047f7     00 18 18 18 
047fb     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
047ff     FF FF 18 18 
04803     18 18 18 18 
04807     18 00 00 18 
0480b     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
0480f     66 7E 7E 66 
04813     66 66 66 30 
04817     18 00 00 7E 
0481b     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
0481f     3E 06 06 06 
04823     06 7E 7E 18 
04827     0C 30 18 3C 
0482b     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
0482f     06 06 06 66 
04833     66 7E 3C 00 
04837     00 30 18 66 
0483b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
0483f     7E 7E 76 76 
04843     66 66 66 00 
04847     00 30 18 7C 
0484b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
0484f     1C 38 70 60 
04853     60 7E 3E 00 
04857     00 30 18 7E 
0485b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
0485f     18 0C 0C 06 
04863     06 7E 7E 00 
04867     00 18 18 00 
0486b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
0486f     18 18 0C 0C 
04873     06 7E 7E 00 
04877     00 30 18 3C 
0487b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
0487f     66 66 66 66 
04883     66          | 	byte	$66[5]
04884     7E 3C 00 00 
04888     00 00 06 06 
0488c     06 06 16 1E 
04890     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04894     7E 7E 00 00 
04898     00 00 00 00 
0489c     00 3C 7C 60 
048a0     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
048a4     7E 7C 30 18 
048a8     00 00 00 00 
048ac     00 3C 7E 66 
048b0     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
048b4     7E 7C 18 0C 
048b8     00 00 30 18 
048bc     00 3C 3E 06 
048c0     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
048c4     7E 7C 00 00 
048c8     00 00 30 18 
048cc     00 3E 7E 66 
048d0     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
048d4     66 66 00 00 
048d8     00 00 30 18 
048dc     00 7C 7E 06 
048e0     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
048e4     7E 3E 00 00 
048e8     00 00 30 18 
048ec     00 7E 7E 30 
048f0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
048f4     7E 7E 00 00 
048f8     00 00 18 18 
048fc     00 7E 7E 30 
04900     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04904     7E 7E 00 00 
04908     00 00 30 18 
0490c     00 3C 7E 66 
04910     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04914     7E 3C 00 00 
04918     00 00 1C 1C 
0491c     18 18 38 3C 
04920     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04924     3C 3C 00 00 
04928     00 00 00 00 
0492c     00 00 00 00 
04930     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04934     00 00 00 00 
04938     00 00       | 	byte	$00[6]
0493a     18 18 18 18 
0493e     18 18 18 18 | 	byte	$18[8]
04942     00 00 18 18 
04946     00 00 00 00 
0494a     66 66 66 66 
0494e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04952     00 00 00 00 
04956     00 00 00 00 
0495a     00          | 	byte	$00[9]
0495b     66 66 FF FF 
0495f     66 66 FF FF 
04963     66 66 00 00 
04967     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
0496b     7C 7E 06 06 
0496f     3E 7C 60 60 
04973     7E 3E 18 18 
04977     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
0497b     66 30 30 18 
0497f     18 0C 0C 66 
04983     66 00 00 00 
04987     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
0498b     66 66 3C 1C 
0498f     1C FC FE 66 
04993     66 FE FC 00 
04997     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
0499b     18 18 18 18 
0499f     00 00 00 00 
049a3     00 00 00 00 
049a7     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
049ab     18 1C 0C 0C 
049af     0C 0C 0C 0C 
049b3     1C 18 30 00 
049b7     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
049bb     18 38 30 30 
049bf     30 30 30 30 
049c3     38 18 0C 00 
049c7     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
049cb     66 66 3C 3C 
049cf     FF FF 3C 3C 
049d3     66 66 00 00 
049d7     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
049db     00 18 18 18 
049df     7E 7E 18 18 
049e3     18 00 00 00 
049e7     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
049eb     00 00 00 00 
049ef     00 00       | 	byte	$00[6]
049f1     18 18 18 18 
049f5     18          | 	byte	$18[5]
049f6     0C 04 00 00 
049fa     00 00 00 00 
049fe     7E 7E 00 00 
04a02     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04a06     00 00 00 00 
04a0a     00 00 00 00 
04a0e     00 00 00 00 
04a12     00          | 	byte	$00[13]
04a13     18 18 18 00 
04a17     00 00 00 60 
04a1b     60 60 30 30 
04a1f     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04a23     06 06 06 00 
04a27     00 00 00 3C 
04a2b     7E 66 66 66 
04a2f     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04a33     66 7E 3C 00 
04a37     00 00 00 18 
04a3b     18 1C 1C 18 
04a3f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04a43     18 7E 7E 00 
04a47     00 00 00 3C 
04a4b     7E 66 66 30 
04a4f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04a53     0C 7E 7E 00 
04a57     00 00 00 7E 
04a5b     7E 30 30 18 
04a5f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04a63     66 7E 3C 00 
04a67     00 00 00 30 
04a6b     30 38 38 3C 
04a6f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04a73     7E 30 30 00 
04a77     00 00 00 7E 
04a7b     7E 06 06 3E 
04a7f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04a83     66 7E 3C 00 
04a87     00 00 00 38 
04a8b     3C 0E 06 06 
04a8f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04a93     66 7E 3C 00 
04a97     00 00 00 7E 
04a9b     7E 60 60 30 
04a9f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04aa3     0C 0C 0C 00 
04aa7     00 00 00 3C 
04aab     7E 66 66 3C 
04aaf     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04ab3     66 7E 3C 00 
04ab7     00 00 00 3C 
04abb     7E 66 66 7E 
04abf     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04ac3     70 3C 1C 00 
04ac7     00 00 00 00 
04acb     00 00 18 18 
04acf     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04ad3     18 18 18 00 
04ad7     00 00 00 00 
04adb     00 00 18 18 
04adf     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04ae3     18 18 18 0C 
04ae7     04 00 00 00 
04aeb     70 38 1C 0E 
04aef     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04af3     70 00 00 00 
04af7     00 00 00 00 
04afb     00 00 7E 7E 
04aff     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04b03     00 00 00 00 
04b07     00 00 00 00 | 	byte	$00[8]
04b0b     0E 1C 38 70 
04b0f     E0 70 38 1C 
04b13     0E 00 00 00 
04b17     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04b1b     7E 66 66 30 
04b1f     30 18 18 18 
04b23     00 18 18 00 
04b27     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04b2b     7E 66 66 66 
04b2f     66 36 06 66 
04b33     66 7E 3C 00 
04b37     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04b3b     3C 7E 66 66 
04b3f     66 7E 7E 66 
04b43     66 66 66 00 
04b47     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04b4b     7E 66 66 7E 
04b4f     3E 66 66 66 
04b53     66 7E 3E 00 
04b57     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04b5b     7E 66 66 06 
04b5f     06 06 06 66 
04b63     66 7E 3C 00 
04b67     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04b6b     7E 66 66 66 
04b6f     66 66 66 66 
04b73     66 7E 3E 00 
04b77     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04b7b     7E 06 06 3E 
04b7f     3E 06 06 06 
04b83     06 7E 7E 00 
04b87     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04b8b     7E 06 06 3E 
04b8f     3E 06 06 06 
04b93     06 06 06 00 
04b97     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04b9b     7E 06 06 76 
04b9f     76 66 66 66 
04ba3     66 7E 3C 00 
04ba7     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04bab     66 66 66 7E 
04baf     7E 66 66 66 
04bb3     66 66 66 00 
04bb7     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04bbb     7E 18 18 18 
04bbf     18 18 18 18 
04bc3     18 7E 7E 00 
04bc7     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04bcb     60 60 60 60 
04bcf     60 60 60    | 	byte	$60[7]
04bd2     66 66 7E 3C 
04bd6     00 00 00 00 
04bda     66 66 36 36 
04bde     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04be2     66 66 C6 C6 
04be6     00 00 00 00 
04bea     06 06 06 06 
04bee     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
04bf2     06 06 7E 7E 
04bf6     00 00 00 00 
04bfa     C6 C6 EE EE 
04bfe     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
04c02     C6 C6 C6 C6 
04c06     00 00 00 00 
04c0a     66 66 66 6E 
04c0e     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
04c12     76 66 66 66 
04c16     00 00 00 00 
04c1a     3C 7E 66 66 
04c1e     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04c22     66 66 7E 3C 
04c26     00 00 00 00 
04c2a     3E 7E 66 66 
04c2e     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
04c32     06 06 06 06 
04c36     00 00 00 00 
04c3a     3C 7E 66 66 
04c3e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04c42     66 56 3E 6C 
04c46     00 00 00 00 
04c4a     3E 7E 66 66 
04c4e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
04c52     66 66 C6 C6 
04c56     00 00 00 00 
04c5a     7C 7E 06 06 
04c5e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
04c62     60 60 7E 3E 
04c66     00 00 00 00 
04c6a     7E 7E 18 18 
04c6e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
04c72     18 18 18 18 
04c76     00 00 00 00 
04c7a     66 66 66 66 
04c7e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04c82     66 66 7E 3C 
04c86     00 00 00 00 
04c8a     66 66 66 66 
04c8e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04c92     3C 3C 18 18 
04c96     00 00 00 00 
04c9a     C6 C6 C6 C6 
04c9e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
04ca2     FE EE C6 82 
04ca6     00 00 00 00 
04caa     66 66 66 3C 
04cae     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
04cb2     3C 66 66 66 
04cb6     00 00 00 00 
04cba     66 66 66 66 
04cbe     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
04cc2     18 18 18 18 
04cc6     00 00 00 00 
04cca     7E 7E 30 30 
04cce     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
04cd2     06 06 7E 7E 
04cd6     00 00 00 00 
04cda     3C 3C 0C 0C 
04cde     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
04ce2     0C 0C 3C 3C 
04ce6     00 00 00 00 
04cea     06 06 0C 0C 
04cee     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
04cf2     60 60 C0 C0 
04cf6     00 00 00 00 
04cfa     3C 3C 30 30 
04cfe     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
04d02     30 30 3C 3C 
04d06     00 00 00 00 
04d0a     18 18 3C 3C 
04d0e     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
04d12     00 00 00 00 
04d16     00 00 00 00 
04d1a     00 00 00 00 
04d1e     00 00 00 00 
04d22     00 00       | 	byte	$00[18]
04d24     FE FE 00 00 
04d28     00 00 0C 0C 
04d2c     18 18 00 00 
04d30     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
04d34     00 00 00 00 
04d38     00 00 00 00 
04d3c     00          | 	byte	$00[9]
04d3d     3C 7C 60 7C 
04d41     7E 66 66 7E 
04d45     7C 00 00 00 
04d49     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
04d4d     3E 7E 66 66 
04d51     66 66 66 7E 
04d55     3E 00 00 00 
04d59     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
04d5d     3C 3E 06 06 
04d61     06 06 06 7E 
04d65     7C 00 00 00 
04d69     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
04d6d     7C 7E 66 66 
04d71     66 66 66 7E 
04d75     7C 00 00 00 
04d79     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
04d7d     3C 7E 66 66 
04d81     7E 06 06 7E 
04d85     7C 00 00 00 
04d89     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
04d8d     18 7E 7E 18 
04d91     18 18 18 18 
04d95     18 00 00 00 
04d99     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04d9d     7C 7E 66 66 
04da1     66 66 7E 7C 
04da5     60 7E 3E 00 
04da9     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
04dad     3E 7E 66 66 
04db1     66 66 66 66 
04db5     66 00 00 00 
04db9     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
04dbd     1C 1C 18 18 
04dc1     18 18 18 3C 
04dc5     3C 00 00 00 
04dc9     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
04dcd     30 30 30 30 
04dd1     30 30 30 30 
04dd5     30          | 	byte	$30[9]
04dd6     3E 1E 00 00 
04dda     06 06 06 36 
04dde     36 1E 1E 1E 
04de2     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
04de6     00 00 00 00 
04dea     1C 1C 18 18 
04dee     18 18 18 18 
04df2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
04df6     00 00 00 00 
04dfa     00 00 00    | 	byte	$00[7]
04dfd     6C FE FE D6 
04e01     D6 C6 C6 C6 
04e05     C6 00 00 00 
04e09     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
04e0d     3E 7E 66 66 
04e11     66 66 66 66 
04e15     66 00 00 00 
04e19     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
04e1d     3C 7E 66 66 
04e21     66 66 66 7E 
04e25     3C 00 00 00 
04e29     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
04e2d     3E 7E 66 66 
04e31     66 66 66 7E 
04e35     3E 06 06 00 
04e39     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
04e3d     7C 7E 66 66 
04e41     66 66 66 7E 
04e45     7C 60 60 00 
04e49     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
04e4d     3E 7E 66 06 
04e51     06 06 06 06 
04e55     06 00 00 00 
04e59     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
04e5d     7C 7E 06 0E 
04e61     3C 70 60 7E 
04e65     3E 00 00 00 
04e69     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
04e6d     7E 7E 18 18 
04e71     18 18 18 78 
04e75     70 00 00 00 
04e79     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
04e7d     66 66 66 66 
04e81     66 66 66    | 	byte	$66[7]
04e84     7E 7C 00 00 
04e88     00 00 00 00 
04e8c     00 66 66 66 
04e90     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
04e94     18 18 00 00 
04e98     00 00 00 00 
04e9c     00 C6 C6 D6 
04ea0     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
04ea4     C6 82 00 00 
04ea8     00 00 00 00 
04eac     00 66 66 3C 
04eb0     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
04eb4     66 66 00 00 
04eb8     00 00 00 00 
04ebc     00 66 66 66 
04ec0     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
04ec4     7C 60 7E 3E 
04ec8     00 00 00 00 
04ecc     00 7E 7E 30 
04ed0     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04ed4     7E 7E 00 00 
04ed8     00 00 30 18 
04edc     18 18 18 0C 
04ee0     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
04ee4     18 30 00 00 
04ee8     00 00 18 18 
04eec     18 18 18 18 
04ef0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04ef4     18 18 00 00 
04ef8     00 00 0C 18 
04efc     18 18 18 30 
04f00     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
04f04     18 0C 00 00 
04f08     00 00 6C 7E 
04f0c     36 00 00 00 
04f10     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
04f14     00 00 00 00 
04f18     00 00 00 00 
04f1c     00          | 	byte	$00[9]
04f1d     18 18 18 18 
04f21     18 18 00 00 
04f25     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04f28     00 00 00 00 
04f2c     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
04f30     00 00 00 00 
04f34     00 80 80 80 
04f38     00 00 00 FF 
04f3c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
04f40     00 00 00 00 
04f44     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
04f45     80 00 00 00 
04f49     00 80 00 00 
04f4d     80 80 00 00 
04f51     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
04f55     80 00 80 00 
04f59     00 40 80 00 
04f5d     AA AA AA 00 
04f61     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
04f65     FF 00 00 00 
04f69     00 FF 00 00 
04f6d     FF FF 00 00 
04f71     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
04f75     FF 00 FF 00 
04f79     00 FF FF 00 
04f7d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
04f80     00 00 00 00 
04f84     00          | ataripalette   file "ataripalettep2.def"
04f85     11 11 11 00 
04f89     22 22 22 00 
04f8d     33 33 33 00 
04f91     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
04f95     55 55 55 00 
04f99     66 66 66 00 
04f9d     77 77 77 00 
04fa1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
04fa5     99 99 99 00 
04fa9     AA AA AA 00 
04fad     BB BB BB 00 
04fb1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
04fb5     DD DD DD 00 
04fb9     EE EE EE 00 
04fbd     FF FF FF 00 
04fc1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
04fc5     00 14 40 00 
04fc9     00 1E 60 00 
04fcd     00 28 80 00 
04fd1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
04fd5     00 3C BF 00 
04fd9     00 46 DF 00 
04fdd     00 50 FF 00 
04fe1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
04fe5     39 77 FF 00 
04fe9     55 8A FF 00 
04fed     71 9E FF 00 
04ff1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
04ff5     AA C5 FF 00 
04ff9     C6 D8 FF 00 
04ffd     E3 EC FF 00 
05001     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
05005     00 00 40 00 
05009     00 00 60 00 
0500d     00 00 80 00 
05011     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
05015     00 00 BF 00 
05019     00 00 DF 00 
0501d     00 00 FF 00 
05021     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
05025     39 39 FF 00 
05029     55 55 FF 00 
0502d     71 71 FF 00 
05031     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
05035     AA AA FF 00 
05039     C6 C6 FF 00 
0503d     E3 E3 FF 00 
05041     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
05045     20 00 40 00 
05049     30 00 60 00 
0504d     40 00 80 00 
05051     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
05055     60 00 BF 00 
05059     70 00 DF 00 
0505d     80 00 FF 00 
05061     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
05065     9C 39 FF 00 
05069     AA 55 FF 00 
0506d     B8 71 FF 00 
05071     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
05075     D5 AA FF 00 
05079     E3 C6 FF 00 
0507d     F1 E3 FF 00 
05081     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
05085     40 00 40 00 
05089     60 00 60 00 
0508d     80 00 80 00 
05091     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05095     BF 00 BF 00 
05099     DF 00 DF 00 
0509d     FF 00 FF 00 
050a1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
050a5     FF 39 FF 00 
050a9     FF 55 FF 00 
050ad     FF 71 FF 00 
050b1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
050b5     FF AA FF 00 
050b9     FF C6 FF 00 
050bd     FF E3 FF 00 
050c1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
050c5     40 00 20 00 
050c9     60 00 30 00 
050cd     80 00 40 00 
050d1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
050d5     BF 00 60 00 
050d9     DF 00 70 00 
050dd     FF 00 80 00 
050e1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
050e5     FF 39 9C 00 
050e9     FF 55 AA 00 
050ed     FF 71 B8 00 
050f1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
050f5     FF AA D5 00 
050f9     FF C6 E3 00 
050fd     FF E3 F1 00 
05101     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05105     40 00 00 00 
05109     60 00 00 00 
0510d     80 00 00 00 
05111     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05115     BF 00 00 00 
05119     DF 00 00 00 
0511d     FF 00 00 00 
05121     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05125     FF 39 39 00 
05129     FF 55 55 00 
0512d     FF 71 71 00 
05131     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
05135     FF AA AA 00 
05139     FF C6 C6 00 
0513d     FF E3 E3 00 
05141     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
05145     40 10 00 00 
05149     60 18 00 00 
0514d     80 20 00 00 
05151     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
05155     BF 30 00 00 
05159     DF 38 00 00 
0515d     FF 40 00 00 
05161     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
05165     FF 6A 39 00 
05169     FF 80 55 00 
0516d     FF 95 71 00 
05171     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05175     FF BF AA 00 
05179     FF D5 C6 00 
0517d     FF EA E3 00 
05181     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
05185     40 20 00 00 
05189     60 30 00 00 
0518d     80 40 00 00 
05191     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05195     BF 60 00 00 
05199     DF 70 00 00 
0519d     FF 80 00 00 
051a1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
051a5     FF 9C 39 00 
051a9     FF AA 55 00 
051ad     FF B8 71 00 
051b1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
051b5     FF D5 AA 00 
051b9     FF E3 C6 00 
051bd     FF F1 E3 00 
051c1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
051c5     40 30 00 00 
051c9     60 48 00 00 
051cd     80 60 00 00 
051d1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
051d5     BF 90 00 00 
051d9     DF A8 00 00 
051dd     FF C0 00 00 
051e1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
051e5     FF CE 39 00 
051e9     FF D5 55 00 
051ed     FF DC 71 00 
051f1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
051f5     FF EA AA 00 
051f9     FF F1 C6 00 
051fd     FF F8 E3 00 
05201     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05205     30 40 00 00 
05209     48 60 00 00 
0520d     60 80 00 00 
05211     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05215     90 BF 00 00 
05219     A8 DF 00 00 
0521d     C0 FF 00 00 
05221     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05225     CE FF 39 00 
05229     D5 FF 55 00 
0522d     DC FF 71 00 
05231     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
05235     EA FF AA 00 
05239     F1 FF C6 00 
0523d     F8 FF E3 00 
05241     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
05245     00 40 00 00 
05249     00 60 00 00 
0524d     00 80 00 00 
05251     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
05255     00 BF 00 00 
05259     00 DF 00 00 
0525d     00 FF 00 00 
05261     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
05265     39 FF 39 00 
05269     55 FF 55 00 
0526d     71 FF 71 00 
05271     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05275     AA FF AA 00 
05279     C6 FF C6 00 
0527d     E3 FF E3 00 
05281     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
05285     00 40 14 00 
05289     00 60 1E 00 
0528d     00 80 28 00 
05291     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
05295     00 BF 3C 00 
05299     00 DF 46 00 
0529d     00 FF 50 00 
052a1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
052a5     39 FF 77 00 
052a9     55 FF 8A 00 
052ad     71 FF 9E 00 
052b1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
052b5     AA FF C5 00 
052b9     C6 FF D8 00 
052bd     E3 FF EC 00 
052c1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
052c5     00 40 28 00 
052c9     00 60 3C 00 
052cd     00 80 50 00 
052d1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
052d5     00 BF 78 00 
052d9     00 DF 8C 00 
052dd     00 FF A0 00 
052e1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
052e5     39 FF B5 00 
052e9     55 FF C0 00 
052ed     71 FF CA 00 
052f1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
052f5     AA FF DF 00 
052f9     C6 FF EA 00 
052fd     E3 FF F4 00 
05301     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05305     00 40 40 00 
05309     00 60 60 00 
0530d     00 80 80 00 
05311     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05315     00 BF BF 00 
05319     00 DF DF 00 
0531d     00 FF FF 00 
05321     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05325     39 FF FF 00 
05329     55 FF FF 00 
0532d     71 FF FF 00 
05331     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
05335     AA FF FF 00 
05339     C6 FF FF 00 
0533d     E3 FF FF 00 
05341     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
05345     00 28 40 00 
05349     00 3C 60 00 
0534d     00 50 80 00 
05351     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
05355     00 78 BF 00 
05359     00 8C DF 00 
0535d     00 A0 FF 00 
05361     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
05365     39 B5 FF 00 
05369     55 C0 FF 00 
0536d     71 CA FF 00 
05371     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05375     AA DF FF 00 
05379     C6 EA FF 00 
0537d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
05380                 | '**********************************************************************************
05380                 | '
05380                 | '        Timings and colors definitions
05380                 | '
05380                 | '**********************************************************************************
05380                 | 
05380                 |    'streamer sets for text mode, to add to timings[0..5]
05380                 | ' todo for the retromachine: 768x576
05380                 | 
05380                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
05380     10 00 00 00 
05384     50 00 00 00 
05388     14 00 00 00 
0538c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05390     70 00 00 00 
05394     08 00 00 00 
05398     30 00 00 00 
0539c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
053a0     10 00 00 00 
053a4     10 00 00 00 
053a8     00 00 00 00 
053ac     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
053b0     E0 01 00 00 
053b4     F6 32 24 15 
053b8     FB 6C C3 01 
053bc     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
053c0                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
053c0                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
053c0     30 00 00 00 
053c4     50 00 00 00 
053c8     34 00 00 00 
053cc     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
053d0     20 00 00 00 
053d4     08 00 00 00 
053d8     16 00 00 00 
053dc     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
053e0     24 00 00 00 
053e4     18 00 00 00 
053e8     40 00 00 00 
053ec     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
053f0     F0 01 00 00 
053f4     F6 32 24 15 
053f8     FB 6C C3 01 
053fc     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
05400                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
05400     10 00 00 00 
05404     40 00 00 00 
05408     10 00 00 00 
0540c     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
05410     08 00 00 00 
05414     08 00 00 00 
05418     08 00 00 00 
0541c     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
05420     40 00 00 00 
05424     20 00 00 00 
05428     80 00 00 00 
0542c     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
05430     E0 01 00 00 
05434     70 AE E9 10 
05438     FB 8B FF 01 
0543c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
05440     10 00 00 00 
05444     42 00 00 00 
05448     14 00 00 00 
0544c     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05450     00 00 00 00 
05454     08 00 00 00 
05458     00 00 00 00 
0545c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
05460     10 00 00 00 
05464     10 00 00 00 
05468     C0 00 00 00 
0546c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
05470     40 02 00 00 
05474     F6 32 24 15 
05478     FB 6C C3 01 
0547c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05480     50 00 00 00 
05484     A0 00 00 00 
05488     54 00 00 00 
0548c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
05490     08 00 00 00 
05494     08 00 00 00 
05498     08 00 00 00 
0549c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
054a0     0C 00 00 00 
054a4     08 00 00 00 
054a8     00 01 00 00 
054ac     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
054b0     E0 01 00 00 
054b4     10 06 56 15 
054b8     FB 64 C3 01 
054bc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
054c0     50 00 00 00 
054c4     32 00 00 00 
054c8     50 00 00 00 
054cc     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
054d0     08 00 00 00 
054d4     08 00 00 00 
054d8     08 00 00 00 
054dc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
054e0     0C 00 00 00 
054e4     08 00 00 00 
054e8     40 01 00 00 
054ec     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
054f0     E0 01 00 00 
054f4     F2 CD 33 13 
054f8     FB 53 92 01 
054fc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05500     18 00 00 00 
05504     30 00 00 00 
05508     18 00 00 00 
0550c     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
05510     08 00 00 00 
05514     08 00 00 00 
05518     08 00 00 00 
0551c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05520     0C 00 00 00 
05524     08 00 00 00 
05528     80 01 00 00 
0552c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
05530     E0 01 00 00 
05534     F4 8F 11 11 
05538     FB 3A 55 01 
0553c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
05540     20 00 00 00 
05544     40 00 00 00 
05548     22 00 00 00 
0554c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05550     00 00 00 00 
05554     08 00 00 00 
05558     00 00 00 00 
0555c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
05560     0C 00 00 00 
05564     08 00 00 00 
05568     C0 01 00 00 
0556c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
05570     F0 01 00 00 
05574     F2 CD 33 13 
05578     FB 53 92 01 
0557c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05580                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
05580     00 75 C7 97 
05584     27 47 F6 0A 
05588     05 79 CB 9B 
0558c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
05590                 | 
05590     28 12 64 FD | hdmi            setq    #9
05594     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
05598                 |            '     setq2   #255
05598                 |             '    rdlong  $100, paletteptr 
05598     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0559c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
055a0     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
055a4     78 F9 02 F1 |                 add     ii,hbase
055a8     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
055ac     7B 0B 80 FF 
055b0     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
055b4                 | 
055b4     66 66 86 FF 
055b8     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
055bc                 | 
055bc                 | 
055bc                 | ''--------  frame rendering main loop  ---------------------------------------------------
055bc                 | 
055bc                 | p101
055bc     28 14 64 FD |                 setq    #10
055c0     00 DF 06 FB |                 rdlong  framebuf,  ptra
055c4     28 1E 64 FD |                 setq    #15
055c8     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
055cc     71 99 02 FB |                 rdlong  border,borderptr
055d0                 | 
055d0     01 C4 06 F1 |                 add     frames,#1
055d4     76 F5 02 F6 |                 mov     dlptr2,dlptr
055d8                 | 
055d8     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
055dc     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
055e0     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
055e4     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
055e8                 |  '' up porch
055e8                 | 
055e8     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
055ec     49 FF 02 F6 |                 mov     hsync1,sync_001
055f0     37 A8 46 FB |                 callpa  i_upporch ,#blank
055f4     72 01 68 FC |                 wrlong  #0,vblankptr
055f8                 |                 
055f8     1F EA 16 F4 |                 testb   paletteptr,#31 wc
055fc     29 FE 65 3D |          if_nc  setq2   #255
05600     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
05604                 | 
05604                 | '' cursor blinking
05604                 | 
05604     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
05608     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
0560c                 | 
0560c                 | '' main screen
0560c                 | 
0560c     00 BE 06 F6 |                 mov linenum,#0
05610     00 18 07 F6 |                 mov rcnt,#0
05614     00 1C 07 F6 |                 mov rcnt2a,#0
05618                 | 
05618                 | 
05618     00 18 0F F2 | p301            cmp rcnt,#0 wz
0561c     18 00 90 AD |         if_z    jmp #p306
05620     01 18 87 F1 |                 sub rcnt,#1
05624     90 F7 02 F6 |                 mov dl,rdl
05628     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
0562c     8F F7 02 A1 |    if_z        add dl,roffset  
05630     7B 21 03 F6 |                 mov rdl,dl
05634     04 00 90 FD |                 jmp #p307          
05638                 |           
05638                 |                 
05638     7A F7 02 FB | p306            rdlong  dl,dlptr2
0563c     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
05640     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
05644     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
05648                 | 
05648                 | '' Special entry:
05648                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
05648                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
05648                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
05648                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
05648                 | '' todo: set horizontal scroll (if needed)
05648                 | 
05648     02 FA 66 F0 |                 shl framebuf2,#2
0564c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
05650     04 22 0F F2 |                 cmp dlc,#%100 wz
05654                 |   
05654                 |                 
05654     04 F4 06 F1 |                 add dlptr2,#4
05658     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
0565c     7A 21 03 FB |                  rdlong rdl,dlptr2
05660     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
05664     04 18 47 F0 |                  shr rcnt,#4
05668                 |              
05668     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
0566c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
05670                 |                 
05670     04 1E 47 F0 |                  shr roffset,#4
05674     0C 1E 67 F0 |                  shl roffset,#12
05678                 |   
05678     9C FF 9F FD |                  jmp #p301
0567c                 |                  
0567c                 |                  
0567c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
0567c     0C FA 46 F0 |                 shr     framebuf2,#12
05680     02 FA 66 F0 |                 shl     framebuf2,#2
05684                 | 
05684     7B 03 E3 F8 |                 getbyte t1,dl,#0
05688     00 02 0F F2 |                 cmp     t1,#0 wz
0568c     34 00 90 AD |     if_z        jmp     #borderline
05690                 | 
05690     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
05694     50 00 90 CD |           if_c   jmp     #textline
05698     50 02 90 3D |           if_nc  jmp     #graphline
0569c                 | '
0569c     01 BE 06 F1 | p302            add     linenum,#1
056a0     04 F4 06 F1 |                 add     dlptr2,#4
056a4     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
056a8     6C FF 9F 5D |          if_nz  jmp     #p301
056ac                 | 
056ac     72 03 68 FC | p112            wrlong  #1,vblankptr
056b0     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
056b4                 | 
056b4     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
056b8     4B FF 02 F6 |                 mov     hsync1,sync_223
056bc     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
056c0     F8 FE 9F FD |                 jmp     #p101
056c4                 | 
056c4                 | '' ---------------  END of frame rendering loop -------------------------------------------
056c4                 | 
056c4                 | 
056c4     14 00 B0 FD | borderline      call    #hsync                      ' make a border
056c8     4C A1 C2 FC |                 xcont   m_vi,border
056cc     CC FF 9F FD |                 jmp     #p302
056d0                 | 
056d0                 | 
056d0     08 00 B0 FD | blank           call    #hsync                          'blank lines
056d4     7E A1 C2 FC |                 xcont   m_vi,hsync0
056d8     FD ED 6F 0B |         _ret_   djnz    pa,#blank
056dc                 | 
056dc     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
056e0     7F 9D B2 FC |                 xzero   m_sn,hsync1
056e4     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
056e8                 | 
056e8                 | 
056e8                 | 
056e8                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
056e8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
056e8                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
056e8                 | 
056e8                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
056e8                 | 
056e8     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
056ec                 | 
056ec     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
056f0     7B 17 5B F8 |                 getnib  zoom, dl,#3
056f4     03 16 07 F5 |                 and             zoom, #3
056f8                 | 
056f8                 | 
056f8                 | 
056f8     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
056fc     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
05700     3F BC 06 F5 |                 and     linestart,#63
05704     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
05708     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
0570c                 | 
0570c     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
05710                 | 
05710                 |                        ' if fontline =0, get a border color
05710                 | 
05710     51 03 33 F9 | p102            getword t1,m_border,#0
05714     00 02 0F F2 |                 cmp     t1, #0 wz
05718     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
0571c                 | 
0571c     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
05720     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
05724     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
05728     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
0572c     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
05730     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
05734     52 BB 02 F6 |                 mov m_lut2, m_lut1
05738     6A BB 02 F1 |                 add m_lut2, lutt1
0573c     58 0F 03 F6 |                 mov cpl2,i_cpl
05740                 | 
05740     02 16 0F F2 |                cmp zoom,#2 wz
05744     E4 00 90 AD |           if_z jmp #p420
05748     01 16 0F F2 |                cmp zoom,#1 wz
0574c     64 00 90 AD |           if_z jmp #p410
05750     00 16 0F F2 |                 cmp zoom,#0 wz
05754     04 00 90 AD |           if_z jmp #p400
05758     50 01 90 FD |                jmp #p430
0575c                 | 
0575c                 |                    '
0575c                 |  ''---------------------------------------------------------------------------------------------------------
0575c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
05760     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05764     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05768     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0576c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05770     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05774     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05778     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0577c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05780     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05784                 | 
05784     81 BB C2 FC |                         xcont m_lut2,t1
05788                 | 
05788     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0578c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05790     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05794     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05798     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0579c     01 C0 86 F1 |                         sub     lutaddr,#1
057a0                 | 
057a0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
057a4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
057a8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
057ac                 | 
057ac     EB 0F 6F FB |                         djnz   cpl2,#p400
057b0     28 01 90 FD |  p401                   jmp    #p103
057b4                 | 
057b4                 | ''------------------------------------------------------------------------------------------------------------
057b4                 | 
057b4     01 0E 47 F0 |  p410                   shr cpl2,#1
057b8                 | 
057b8                 | ''---------------------------------------------------------------------------------------------------------
057b8     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
057bc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
057c0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
057c4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
057c8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
057cc     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
057d0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
057d4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
057d8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
057dc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
057e0                 | 
057e0                 | 
057e0     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
057e4     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
057e8     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
057ec     03 02 07 FA |                         mul t1,#3
057f0     81 BB C2 FC |                         xcont m_lut2,t1
057f4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
057f8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
057fc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05800     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05804     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05808     01 C0 86 F1 |                         sub     lutaddr,#1
0580c     63 06 63 FD |                         mergew t3
05810     03 06 07 FA |                         mul t3,#3
05814     83 BB C2 FC |                         xcont m_lut2,t3
05818                 | 
05818     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0581c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05820                 | 
05820     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05824                 | 
05824     E4 0F 6F FB |                         djnz   cpl2,#p412
05828     B0 00 90 FD |  p411                   jmp    #p103
0582c                 | 
0582c                 | ''------------------------------------------------------------------------------------------------------------
0582c                 | 
0582c     02 0E 47 F0 |  p420                   shr cpl2,#2
05830                 | 
05830                 | ''---------------------------------------------------------------------------------------
05830     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
05834     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05838     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0583c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05840     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05844     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05848     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0584c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05850     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05854     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05858                 | 
05858     61 02 63 FD |                         mergeb t1
0585c     81 07 3B F9 |                         getword t3,t1,#1
05860     0F 02 07 FA |                         mul t1,#15
05864     81 BB C2 FC |                         xcont m_lut2,t1
05868                 | 
05868     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0586c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05870     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05874     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05878     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0587c     01 C0 86 F1 |                         sub     lutaddr,#1
05880                 | 
05880     81 09 EB F8 |                         getbyte t4,t1,#1        '
05884     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
05888                 | 
05888     0F 06 07 FA |                         mul t3,#15
0588c     83 BB C2 FC |                         xcont m_lut2,t3
05890                 | 
05890     83 0B EB F8 |                         getbyte t5,t3,#1
05894     85 BB C2 FC |                         xcont m_lut2, t5
05898     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0589c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
058a0                 | 
058a0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
058a4                 | 
058a4     E2 0F 6F FB |                         djnz   cpl2,#p422
058a8     30 00 90 FD |  p421                   jmp    #p103
058ac                 | 
058ac                 | '--------------------------------------------------------------------------------------------------------------
058ac                 | 
058ac     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
058b0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
058b4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
058b8                 | 
058b8     00 BA C6 FC |                         xcont m_lut2,#0
058bc                 | 
058bc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
058c0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
058c4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
058c8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
058cc     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
058d0     01 C0 86 F1 |                         sub     lutaddr,#1
058d4                 | 
058d4     F5 0F 6F FB |                         djnz   cpl2,#p430
058d8     00 00 90 FD |  p431                   jmp    #p103
058dc                 | 
058dc                 | ''------------------------------------------------------------------------------------------------------------
058dc                 | 
058dc                 | 
058dc                 | 
058dc     51 25 33 F9 | p103            getword  mb2,m_border,#0
058e0     00 24 0F F2 |                 cmp      mb2, #0 wz
058e4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
058e8                 | 
058e8     B0 FD 9F FD |                 jmp #p302
058ec                 | 
058ec                 | '' -------------------------------------- END of text line ---------------------------------
058ec                 | 
058ec                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
058ec                 | 
058ec     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
058f0                 | 
058f0                 | 
058f0     51 25 33 F9 | p202            getword mb2,m_border,#0
058f4     00 24 0F F2 |                 cmp     mb2, #0 wz
058f8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
058fc                 | 
058fc                 | '----------------------------------------- display pixels
058fc                 | 
058fc     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
05900     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05904                 | 
05904     7B 17 5B F8 |                 getnib  zoom, dl,#3
05908     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
0590c                 | 
0590c     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
05910     0C BC 06 F5 |                 and     colordepth,#12
05914                 | 
05914     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
05918     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
0591c     64 00 90 AD |           if_z  jmp     #p240
05920                 | 
05920     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05924     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
05928     98 00 90 AD |           if_z  jmp     #p250
0592c                 | 
0592c     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
05930     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
05934     FC 00 90 AD |           if_z  jmp     #p260
05938                 | 
05938     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
0593c                 | 
0593c                 | '' --- 8 bit color modes
0593c                 | 
0593c     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
05940     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05944                 | 
05944     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
05948     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
0594c                 |        
0594c                 |  '  
0594c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
05950     25 0C 07 A6 |                 if_z mov skippattern,#%100101
05954                 |     
05954                 |  
05954     05 0C 07 56 |                 if_nz mov skippattern,#%000101
05958     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
0595c                 |         
0595c                 | 
0595c                 |         
0595c     7D 11 03 FB | p235               rdlong  char,framebuf2
05960     32 0C 63 FD |                    skipf skippattern
05964     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
05968     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
0596c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
05970     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
05974     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
05978     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
0597c     F7 0F 6F FB |                    djnz    cpl2,#p235
05980                 | 
05980     20 01 90 FD |                jmp    #p203
05984                 |                   
05984                 | 
05984                 | 
05984                 | '' --- 1 bit color modes
05984                 | 
05984     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
05988     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
0598c                 | 
0598c     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
05990     13 0C 07 A6 |        if_z   mov skippattern,#%10011
05994     08 0C 07 56 |        if_nz  mov skippattern,#%01000
05998                 | 
05998                 | 
05998     7D 11 E3 FA | p241               rdword  char,framebuf2
0599c     44 10 FF F9 |                    movbyts char,#%01000100
059a0     63 10 63 FD |                    mergew  char
059a4     32 0C 63 FD |                    skipf skippattern
059a8     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
059ac     63 10 63 FD |                    mergew  char                    ' 1 0
059b0     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
059b4     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
059b8     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
059bc     F6 0F 6F FB |                    djnz   cpl2,#p241
059c0                 | 
059c0                 | 
059c0     E0 00 90 FD |                jmp    #p203
059c4                 | 
059c4                 | '' --- 2 bit color modes
059c4                 | 
059c4     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
059c8     C8 00 90 AD |        if_z   jmp #p251
059cc                 | 
059cc     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
059d0     30 00 90 AD |        if_z   jmp #p252
059d4                 | 
059d4                 | 
059d4     7D 11 C3 FA | p254               rdbyte char,framebuf2
059d8     04 0A 07 F6 |                    mov  t5,#4
059dc     02 10 67 F0 | p255               shl  char,#2
059e0     88 03 53 F8 |                    getnib  t1,char,#2
059e4     03 02 07 F5 |                    and     t1,#3
059e8     55 02 07 FA |                    mul     t1,#$55
059ec     81 05 03 F9 |                    rolbyte  t2,t1,#0
059f0     FA 0B 6F FB |                    djnz    t5,#p255
059f4     82 BB C2 FC |                    xcont   m_lut2,t2
059f8     01 FA 06 F1 |                    add     framebuf2,#1
059fc     F5 0F 6F FB |                    djnz    cpl2,#p254
05a00     A0 00 90 FD |                    jmp     #p203
05a04                 | 
05a04     7D 11 E3 FA | p252               rdword char,framebuf2
05a08     08 0A 07 F6 |                    mov  t5,#8
05a0c     02 10 67 F0 | p253               shl  char,#2
05a10     88 03 63 F8 |                    getnib  t1,char,#4
05a14     03 02 07 F5 |                    and     t1,#3
05a18     05 02 07 FA |                    mul     t1,#5
05a1c     81 05 83 F8 |                    rolnib  t2,t1,#0
05a20     FA 0B 6F FB |                    djnz    t5,#p253
05a24     82 BB C2 FC |                    xcont   m_lut2,t2
05a28     02 FA 06 F1 |                    add     framebuf2,#2
05a2c     F5 0F 6F FB |                    djnz    cpl2,#p252
05a30     70 00 90 FD |                    jmp     #p203
05a34                 | 
05a34                 | '' ------ 4 bit color modes
05a34                 | 
05a34     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
05a38     58 00 90 AD |        if_z   jmp #p251
05a3c                 | 
05a3c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05a40     2C 00 90 AD |        if_z   jmp #p262
05a44                 | 
05a44                 | 
05a44     7D 11 C3 FA | p263               rdbyte char,framebuf2
05a48     02 0A DC FC |                            rep #5,#2
05a4c     88 05 8B F8 |                              rolnib t2,char,#1
05a50     88 05 8B F8 |                                  rolnib t2,char,#1
05a54     88 05 8B F8 |                              rolnib t2,char,#1
05a58     88 05 8B F8 |                                  rolnib t2,char,#1
05a5c     04 10 67 F0 |                              shl char,#4
05a60     82 BB C2 FC |                    xcont   m_lut2,t2
05a64     01 FA 06 F1 |                    add     framebuf2,#1
05a68     F6 0F 6F FB |                    djnz    cpl2,#p263
05a6c     34 00 90 FD |                    jmp     #p203
05a70                 | 
05a70     7D 11 E3 FA | p262               rdword  char,framebuf2
05a74     04 06 DC FC |                            rep #3,#4
05a78     88 05 9B F8 |                              rolnib t2,char,#3
05a7c     88 05 9B F8 |                                  rolnib t2,char,#3
05a80     04 10 67 F0 |                              shl char,#4
05a84     82 BB C2 FC |                    xcont   m_lut2,t2
05a88     02 FA 06 F1 |                    add     framebuf2,#2
05a8c     F8 0F 6F FB |                    djnz    cpl2,#p262
05a90     10 00 90 FD |                    jmp     #p203
05a94                 | 
05a94                 | ''---------- all color modes without zoom
05a94                 | 
05a94     87 07 D8 FC | p251               rep  #3,cpl2
05a98     7D 11 03 FB |                    rdlong  char,framebuf2
05a9c     04 FA 06 F1 |                    add     framebuf2,#4
05aa0     88 BB C2 FC |                    xcont   m_lut2,char
05aa4                 |           
05aa4                 |  ''-----------------------------------------------------------------------------------------
05aa4                 | p203           ' getword  mb2,m_border,#0
05aa4     00 24 0F F2 |                 cmp      mb2, #0 wz
05aa8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05aac                 | 
05aac     EC FB 9F FD |                 jmp #p302
05ab0                 | 
05ab0                 | '' -------------------------------------- END of graph  line ---------------------------------
05ab0                 | 
05ab0                 | '' consts and vars
05ab0                 | 
05ab0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
05ab4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
05ab8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
05abc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
05ac0                 | 
05ac0     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
05ac4                 | 
05ac4                 | '------ these longs will be set by setmode function
05ac4                 | 
05ac4     00 00 00 00 | m_bs            long    0        'blanks before sync
05ac8     00 00 00 00 | m_sn            long    0        'sync
05acc     00 00 00 00 | m_bv            long    0        'blanks before visible
05ad0     00 00 00 00 | m_vi            long    0        'visible pixels #
05ad4     00 00 00 00 | m_border        long    0        'left/right borders
05ad8     00 00 00 00 | m_lut1          long    0        'characters
05adc     00 00 00 00 | i_vborder       long    0        'up/down borders
05ae0     00 00 00 00 | i_upporch       long    0        'up porch lines
05ae4     00 00 00 00 | i_vsync         long    0        'vsync lines
05ae8     00 00 00 00 | i_downporch     long    0        'down porch lines
05aec     00 00 00 00 | i_modenum       long    0        'mode #
05af0     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05af4     00 00 00 00 | i_lines         long    0        'scanlines #
05af8     00 00 00 00 | i_clock         long    0
05afc     00 00 00 00 | i_hubset        long    0
05b00     00 00 00 00 | i_totalvis      long    0
05b04                 | 
05b04                 | '-------------------------------------
05b04                 | 
05b04     00 00 00 00 | m_lut2          long    0
05b08                 | 
05b08                 | colordepth
05b08     00 00 00 00 | linestart       long    0
05b0c     00 00 00 00 | linenum         long    0
05b10     00 01 00 00 | lutaddr         long    256
05b14                 | 
05b14     0E 00 00 00 | cursorsh        long    14
05b18     00 00 00 00 | frames          long    0
05b1c     00 00 00 00 | cursorx         long    0
05b20     00 00 00 00 | cursory         long    0
05b24     00 00 00 00 | cursorpos       long    0
05b28     00 00 00 00 | cursorpos2      long    0
05b2c     00 00 00 00 | fontstart       long    0
05b30     00 00 00 00 | border2         long 0
05b34     00 00 81 70 | lutiv           long $70810000
05b38     00 00 88 00 | lutt1           long $00880000
05b3c     00 00 80 00 | lutg1           long $00800000
05b40     00 00 80 10 | lutg2           long $10800000
05b44     00 00 80 20 | lutg4           long $20800000
05b48     00 00 80 30 | lutg8           long $30800000
05b4c     00 00 00 00 | framebuf        long 0
05b50     00 00 00 00 | fontbuf         long 0
05b54     00 00 00 00 | borderptr       long 0
05b58     00 00 00 00 | vblankptr       long 0
05b5c     00 00 00 00 | cursorptr       long 0
05b60     00 00 00 00 | modeptr         long 0
05b64     00 00 00 00 | paletteptr      long 0
05b68     00 00 00 00 | dlptr           long 0
05b6c                 | fontnumptr      res     1
05b6c                 | fontnumptr      res     1
05b6c                 | hbase           res     1
05b6c                 | hbase           res     1
05b6c                 | borderptr2      res     1
05b6c                 | borderptr2      res     1
05b6c                 | dlptr2 res 1
05b6c                 | dlptr2 res 1
05b6c                 | dl              res 1
05b6c                 | dl              res 1
05b6c                 | ii              res     1
05b6c                 | ii              res     1
05b6c                 | framebuf2       res     1
05b6c                 | framebuf2       res     1
05b6c                 | hsync0          res     1
05b6c                 | hsync0          res     1
05b6c                 | hsync1          res     1
05b6c                 | hsync1          res     1
05b6c                 | fontline        res     1
05b6c                 | fontline        res     1
05b6c                 | t1              res     1
05b6c                 | t1              res     1
05b6c                 | t2              res     1
05b6c                 | t2              res     1
05b6c                 | t3 res 1
05b6c                 | t3 res 1
05b6c                 | t4 res 1
05b6c                 | t4 res 1
05b6c                 | t5 res 1
05b6c                 | t5 res 1
05b6c                 | skippattern res 1
05b6c                 | skippattern res 1
05b6c                 | cpl2 res 1
05b6c                 | cpl2 res 1
05b6c                 | char            res     1
05b6c                 | char            res     1
05b6c                 | backcolor       res     1
05b6c                 | backcolor       res     1
05b6c                 | charcolor       res     1
05b6c                 | charcolor       res     1
05b6c                 | zoom res 1
05b6c                 | zoom res 1
05b6c     00 00 00 00 | rcnt long 0 'dl repeat count
05b70     00 00 00 00 | rcnt2 long 0
05b74     00 00 00 00 | rcnt2a long 0
05b78     00 00 00 00 | roffset long 0
05b7c     00 00 00 00 | rdl long 0  'dl repeat line
05b80     00 00 00 00 | dlc long 0 'dl command
05b84     00 00 00 00 | mb2 long 0
05b88     00 00 00 00 | aend             long 0
05b8c                 |                 fit     496                     '
05b8c                 | __system__dat_
05b8c     00 00 00 00 
05b90     00 00 00 00 | 	byte	$00[8]
05b94     03 00 00 00 
05b98     00 00 00 00 
05b9c     00 00 00 00 
05ba0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05ba4                 | __heap_base
05ba4     00 00 00 00 
      ...             
06ba4     00 00 00 00 
06ba8     00 00 00 00 | 	long	0[1026]
06bac                 | objmem
06bac     00 00 00 00 
      ...             
06c90     00 00 00 00 
06c94     00 00 00 00 | 	long	0[59]
06c98                 | stackspace
06c98     00 00 00 00 | 	long	0[1]
06c9c 0e7             | 	org	COG_BSS_START
06c9c 0e7             | _var01
06c9c 0e7             | 	res	1
06c9c 0e8             | _var02
06c9c 0e8             | 	res	1
06c9c 0e9             | _var03
06c9c 0e9             | 	res	1
06c9c 0ea             | _var04
06c9c 0ea             | 	res	1
06c9c 0eb             | _var05
06c9c 0eb             | 	res	1
06c9c 0ec             | _var06
06c9c 0ec             | 	res	1
06c9c 0ed             | _var07
06c9c 0ed             | 	res	1
06c9c 0ee             | _var08
06c9c 0ee             | 	res	1
06c9c 0ef             | _var09
06c9c 0ef             | 	res	1
06c9c 0f0             | _var10
06c9c 0f0             | 	res	1
06c9c 0f1             | _var11
06c9c 0f1             | 	res	1
06c9c 0f2             | _var12
06c9c 0f2             | 	res	1
06c9c 0f3             | _var13
06c9c 0f3             | 	res	1
06c9c 0f4             | _var14
06c9c 0f4             | 	res	1
06c9c 0f5             | _var15
06c9c 0f5             | 	res	1
06c9c 0f6             | _var16
06c9c 0f6             | 	res	1
06c9c 0f7             | _var17
06c9c 0f7             | 	res	1
06c9c 0f8             | _var18
06c9c 0f8             | 	res	1
06c9c 0f9             | _var19
06c9c 0f9             | 	res	1
06c9c 0fa             | _var20
06c9c 0fa             | 	res	1
06c9c 0fb             | _var21
06c9c 0fb             | 	res	1
06c9c 0fc             | _var22
06c9c 0fc             | 	res	1
06c9c 0fd             | _var23
06c9c 0fd             | 	res	1
06c9c 0fe             | _var24
06c9c 0fe             | 	res	1
06c9c 0ff             | _var25
06c9c 0ff             | 	res	1
06c9c 100             | _var26
06c9c 100             | 	res	1
06c9c 101             | _var27
06c9c 101             | 	res	1
06c9c 102             | _var28
06c9c 102             | 	res	1
06c9c 103             | _var29
06c9c 103             | 	res	1
06c9c 104             | _var30
06c9c 104             | 	res	1
06c9c 105             | _var31
06c9c 105             | 	res	1
06c9c 106             | _var32
06c9c 106             | 	res	1
06c9c 107             | arg01
06c9c 107             | 	res	1
06c9c 108             | arg02
06c9c 108             | 	res	1
06c9c 109             | arg03
06c9c 109             | 	res	1
06c9c 10a             | arg04
06c9c 10a             | 	res	1
06c9c 10b             | arg05
06c9c 10b             | 	res	1
06c9c 10c             | local01
06c9c 10c             | 	res	1
06c9c 10d             | local02
06c9c 10d             | 	res	1
06c9c 10e             | local03
06c9c 10e             | 	res	1
06c9c 10f             | local04
06c9c 10f             | 	res	1
06c9c 110             | local05
06c9c 110             | 	res	1
06c9c 111             | local06
06c9c 111             | 	res	1
06c9c 112             | local07
06c9c 112             | 	res	1
06c9c 113             | local08
06c9c 113             | 	res	1
06c9c 114             | local09
06c9c 114             | 	res	1
06c9c 115             | local10
06c9c 115             | 	res	1
06c9c 116             | local11
06c9c 116             | 	res	1
06c9c 117             | local12
06c9c 117             | 	res	1
06c9c 118             | local13
06c9c 118             | 	res	1
06c9c 119             | local14
06c9c 119             | 	res	1
06c9c 11a             | local15
06c9c 11a             | 	res	1
06c9c 11b             | local16
06c9c 11b             | 	res	1
06c9c 11c             | local17
06c9c 11c             | 	res	1
06c9c 11d             | local18
06c9c 11d             | 	res	1
06c9c 11e             | muldiva_
06c9c 11e             | 	res	1
06c9c 11f             | muldivb_
06c9c 11f             | 	res	1
06c9c 120             | 	fit	480
06c9c 120             | 
