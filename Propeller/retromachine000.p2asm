con
	_clkfreq = 320000000
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 320000000
	long	0 ' clock mode: will default to $1000ffb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, objptr
	add	ptra, #244
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16781304
	waitx	##200000
	mov	pa, ##16781307
	hubset	pa
	wrlong	pa, #24
	wrlong	##320000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_program
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra
	add	ptra, #4
	rdlong	result1, ptra
	add	ptra, #4
	rdlong	arg01, ptra
	add	ptra, #4
	rdlong	arg02, ptra
	add	ptra, #4
	rdlong	arg03, ptra
	add	ptra, #4
	rdlong	arg04, ptra
	sub	ptra, #16
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    pop	fcache_tmpb_
    add	fcache_tmpb_, pa
    push	fcache_tmpb_
    sub	fcache_tmpb_, pa
    shr	pa, #2
    altd	pa
    mov	 0-0, ret_instr_
    sub	pa, #1
    setq	pa
    rdlong	$0, fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    ret
fcache_tmpb_
    long 0
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    sub  COUNT_, #1
    setq COUNT_
    wrlong local01, ptra
    add  COUNT_, #1
pushregs_done_
    shl  COUNT_, #2
    add  ptra, COUNT_
    shr  COUNT_, #2
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra
    add    ptra, #12
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    sub    ptra, #12
    setq   #2
    rdlong COUNT_, ptra
    tjz    COUNT_, #popregs__ret
    shl    COUNT_, #2
    sub    ptra, COUNT_
    shr    COUNT_, #2
    sub    COUNT_, #1
    setq   COUNT_
    rdlong local01, ptra
popregs__ret
    push   RETADDR_
    jmp    pa

unsdivide_
       setq    #0
       qdiv    muldiva_, muldivb_
       getqx   muldivb_
 _ret_ getqy   muldiva_

divide_
       abs     muldiva_,muldiva_     wc       'abs(x)
       muxc    itmp2_,#%11                    'store sign of x
       abs     muldivb_,muldivb_     wcz      'abs(y)
 if_c  xor     itmp2_,#%10                    'store sign of y
 if_z  ret
       call    #unsdivide_
       test    itmp2_,#1        wc       'restore sign, remainder
       negc    muldiva_,muldiva_ 
       test    itmp2_,#%10      wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_
__pc long 0
__setjmp
    pop __pc
    mov result1, #0
    mov result2, #0
    mov abortchain, arg01
    wrlong fp, arg01
    add arg01, #4
    wrlong ptra, arg01
    add arg01, #4
    wrlong objptr, arg01
    add arg01, #4
    wrlong __pc, arg01
    jmp __pc
__unwind_pc long 0
__unwind_stack
   pop  __unwind_pc
__unwind_loop
   cmp  arg01, arg02 wz
  if_z jmp #__unwind_stack_ret
   mov   ptra, arg01
   call  #popregs_
   mov   arg01, fp
   jmp   #__unwind_loop
__unwind_stack_ret
   jmp  __unwind_pc
__longjmp
    pop __pc
    cmp    arg01, #0 wz
 if_z jmp #nocatch
    mov result1, arg02
    mov result2, #1
    rdlong arg02, arg01
    add arg01, #4
    rdlong ptra, arg01
    add arg01, #4
    rdlong objptr, arg01
    add arg01, #4
    rdlong __pc, arg01
    mov arg01, fp
    call #__unwind_stack
__longjmp_ret
    jmp  __pc
nocatch
    cmp arg03, #0 wz
 if_z jmp #cogexit
    jmp #__longjmp_ret

__heap_ptr
	long	@__heap_base
abortchain
	long	0
itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr___struct___bas_wrap_sender_tx_
	long	@__struct___bas_wrap_sender_tx
ptr___struct__s_vfs_file_t_getchar_
	long	@__struct__s_vfs_file_t_getchar
ptr___struct__s_vfs_file_t_putchar_
	long	@__struct__s_vfs_file_t_putchar
ptr___system____default_flush_
	long	@__system____default_flush
ptr___system____default_getc_
	long	@__system____default_getc
ptr___system____default_putc_
	long	@__system____default_putc
ptr___system____default_putc_terminal_
	long	@__system____default_putc_terminal
ptr___system__dat__
	long	@__system__dat_
ptr__ff_cc_dat__
	long	@_ff_cc_dat_
ptr__hng030rm_spin2_dat__
	long	@_hng030rm_spin2_dat_
ptr__hng030rm_spin2_putchar_
	long	@_hng030rm_spin2_putchar
ptr__hng030rm_spin2_putpixel1_
	long	@_hng030rm_spin2_putpixel1
ptr__hng030rm_spin2_putpixel2_
	long	@_hng030rm_spin2_putpixel2
ptr__hng030rm_spin2_putpixel4_
	long	@_hng030rm_spin2_putpixel4
ptr__hng030rm_spin2_putpixel8_
	long	@_hng030rm_spin2_putpixel8
result1
	long	0
result2
	long	0
result3
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

_program
	mov	COUNT_, #21
	call	#pushregs_
	add	objptr, #236
	wrlong	#0, objptr
	sub	objptr, #192
	mov	local01, objptr
' 
' ' initialize pointers and variables
' 
' border_ptr:=@bordercolor
	sub	objptr, #36
	wrlong	local01, objptr
	add	ptr__hng030rm_spin2_dat__, ##4096
' font_ptr:=@st_font
	sub	objptr, #4
	wrlong	ptr__hng030rm_spin2_dat__, objptr
' hdmibase:=base
	add	objptr, #32
	wrlong	#0, objptr
	sub	objptr, #36
	mov	arg02, ptr__hng030rm_spin2_putpixel1_
' p1:=@putpixel1
	mov	arg01, objptr
	sub	ptr__hng030rm_spin2_dat__, ##4096
	call	#__system___make_methodptr
	mov	local02, result1
	add	objptr, #220
	wrlong	local02, objptr
	sub	objptr, #220
	mov	arg02, ptr__hng030rm_spin2_putpixel2_
' p2:=@putpixel2
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local02, result1
	add	objptr, #224
	wrlong	local02, objptr
	sub	objptr, #224
	mov	arg02, ptr__hng030rm_spin2_putpixel4_
' p4:=@putpixel4
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local02, result1
	add	objptr, #228
	wrlong	local02, objptr
	sub	objptr, #228
	mov	arg02, ptr__hng030rm_spin2_putpixel8_
' p8:=@putpixel8
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local02, result1
	add	objptr, #232
	wrlong	local02, objptr
	sub	objptr, #232
' 
' 
' ' the mode has to be set here to enable computing the buffer length
' 
' setmode(mode)
	mov	arg01, ##560
	call	#_hng030rm_spin2_setmode
	add	objptr, #64
	mov	local03, objptr
' 
' vblank_ptr:=@vblank
	sub	objptr, #52
	wrlong	local03, objptr
	add	objptr, #40
	mov	local04, objptr
' cursor_ptr:=@cursor_x
	sub	objptr, #36
	wrlong	local04, objptr
	add	objptr, #136
	mov	local05, objptr
' 
' fontnum_ptr:=@fontnum
	sub	objptr, #120
	wrlong	local05, objptr
' 
' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
	add	objptr, #120
	wrlong	#0, objptr
	add	objptr, #28
	mov	arg01, objptr
	sub	objptr, #180
	add	ptr__hng030rm_spin2_dat__, ##7768
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7768
' bytemove(@colors,@vgacolors,16)
	mov	arg03, #16
	call	#__system____builtin_memmove
' 
' ' initialize a cursor
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
' cursor_sh:=14
	add	objptr, #1
	wrbyte	#14, objptr
	sub	objptr, #54
' 
' 
' ' start the cog
' 
' cog:=coginit(16,@hdmi, @buf_ptr)
	add	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	mov	local06, result1
	add	objptr, #40
	wrlong	local06, objptr
	sub	objptr, #40
' waitms(20)
	mov	arg01, #20
	call	#__system___waitms
' 
' ' clear the screen and set the colors to green on black
' 
' cls(c_green,c_black)
	mov	arg01, #199
	mov	arg02, #0
	call	#_hng030rm_spin2_cls
' setbordercolor(0,0,128)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #128
	call	#_hng030rm_spin2_setbordercolor
' setwritecolors(c_green,c_black)
	mov	arg02, #0
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	#199, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
' 
' return cog
	sub	objptr, #20
	rdlong	result1, objptr
	sub	objptr, #40
	mov	arg01, #0
	mov	arg03, #0
	call	#_hng030rm_spin2_setbordercolor
' v030.start(mode,pin)
' v030.setbordercolor(0,0,0)
' open SendRecvDevice(@v030.putchar, nil, nil) as #0
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putchar_
	call	#__system___make_methodptr
	mov	result3, #0
	mov	result2, #0
	mov	arg02, result1
	mov	arg03, #0
	mov	arg04, #0
	mov	arg01, #0
	call	#__system___basic_open
	mov	result1, #0
	mov	arg01, #154
	mov	arg02, #147
	call	#_hng030rm_spin2_cls
	mov	result1, #0
' startvideo 512+48
' cls
' print "Basic test"
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg02, ##@LR__0835
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' print
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' 
' print"kwas2"
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg02, ##@LR__0836
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' print hex$(1234)
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local07, #0
	mov	arg02, #0
	mov	arg03, #16
	mov	local08, ##1234
	mov	local09, #0 wz
	mov	local09, #1
	mov	local10, #16
	mov	local11, #1
	loc	pa,	#(@LR__0002-@LR__0001)
	call	#FCACHE_LOAD_
LR__0001
	mov	local12, #0
	cmp	local10, local08 wcz
 if_be	neg	local12, #1
	mov	local13, #0
	cmp	local11, local10 wcz
 if_b	neg	local13, #1
	test	local12, local13 wz
 if_e	jmp	#LR__0003
	mov	local11, local10
	qmul	local10, #16
	getqx	local10
	add	local09, #1
	jmp	#LR__0001
LR__0002
LR__0003
	fle	local09, #32 wcz
	mov	arg01, local09
	add	arg01, #2
	call	#__system___gc_alloc_managed
	mov	local14, result1
	mov	local15, local09
	add	local15, local14
	wrbyte	#0, local15
	loc	pa,	#(@LR__0005-@LR__0004)
	call	#FCACHE_LOAD_
LR__0004
	cmp	local09, #0 wcz
 if_be	jmp	#LR__0006
	sub	local09, #1
	mov	muldiva_, local08
	mov	muldivb_, #16
	call	#unsdivide_
	mov	local16, muldiva_
	mov	local08, muldivb_
	cmp	local16, #10 wcz
 if_b	add	local16, #48
 if_ae	add	local16, #55
	mov	local17, local09
	add	local17, local14
	wrbyte	local16, local17
	jmp	#LR__0004
LR__0005
LR__0006
	mov	result1, local14
	mov	arg02, result1
	mov	arg01, local07
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
	mov	local18, ##@LR__0837
	add	ptr___system__dat__, ##1152
	mov	arg05, #58
	mov	arg01, #0
	mov	arg02, #61
	mov	arg03, #60
	mov	arg04, #59
	mov	local19, objptr
	mov	objptr, ptr___system__dat__
	sub	ptr___system__dat__, ##1152
	call	#_ff_cc_disk_setpins
	mov	objptr, local19
	mov	local20, result1 wz
 if_ne	jmp	#LR__0007
	add	ptr___system__dat__, ##1152
	mov	arg01, ptr___system__dat__
	mov	arg02, ##@LR__0830
	mov	arg03, #0
	mov	local21, objptr
	mov	objptr, ptr___system__dat__
	sub	ptr___system__dat__, ##1152
	call	#_ff_cc_f_mount
	mov	objptr, local21
	mov	local20, result1
LR__0007
	cmp	local20, #0 wz
 if_e	jmp	#LR__0008
	neg	arg01, local20 wz
	add	ptr___system__dat__, ##572
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	mov	result1, #0
	jmp	#LR__0009
LR__0008
	add	ptr__ff_cc_dat__, #180
	mov	result1, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #180
' get_vfs()
' {
'     return &fat_vfs;
LR__0009
	mov	arg02, result1
	mov	arg01, local18
	call	#__system___mount
' 
' mount "/sd", _vfs_open_sdcard()
' open "/sd/testbas.txt" for input as #3
	mov	arg02, ##@LR__0838
	mov	arg01, #3
	mov	arg03, #0
	call	#__system___basic_open_string
' input #3,s
	mov	arg01, #3
	call	#__system___basic_read_line
	mov	arg01, result1
	call	#__system___basic_get_integer
	mov	local07, result1
	add	objptr, #240
	wrlong	local07, objptr
	sub	objptr, #240
' print s
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, #240
	rdlong	arg02, objptr
	sub	objptr, #240
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' input #3,s
	mov	arg01, #3
	call	#__system___basic_read_line
	mov	arg01, result1
	call	#__system___basic_get_integer
	mov	local07, result1
	add	objptr, #240
	wrlong	local07, objptr
	sub	objptr, #240
' print s
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, #240
	rdlong	arg02, objptr
	sub	objptr, #240
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' input #3,s
	mov	arg01, #3
	call	#__system___basic_read_line
	mov	arg01, result1
	call	#__system___basic_get_integer
	mov	local07, result1
	add	objptr, #240
	wrlong	local07, objptr
	sub	objptr, #240
' print s
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, #240
	rdlong	arg02, objptr
	sub	objptr, #240
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' close #3
	mov	arg01, #3
	call	#__system__close
' open "/sd/testbas.txt" for input as #3
	mov	arg02, ##@LR__0839
	mov	arg01, #3
	mov	arg03, #0
	call	#__system___basic_open_string
' input #3,s
	mov	arg01, #3
	call	#__system___basic_read_line
	mov	arg01, result1
	call	#__system___basic_get_integer
	mov	local07, result1
	add	objptr, #240
	wrlong	local07, objptr
	sub	objptr, #240
' print s
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, #240
	rdlong	arg02, objptr
	sub	objptr, #240
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' input #3,s
	mov	arg01, #3
	call	#__system___basic_read_line
	mov	arg01, result1
	call	#__system___basic_get_integer
	mov	local07, result1
	add	objptr, #240
	wrlong	local07, objptr
	sub	objptr, #240
' print s
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, #240
	rdlong	arg02, objptr
	sub	objptr, #240
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' input #3,s
	mov	arg01, #3
	call	#__system___basic_read_line
	mov	arg01, result1
	call	#__system___basic_get_integer
	mov	local07, result1
	add	objptr, #240
	wrlong	local07, objptr
	sub	objptr, #240
' print s
	mov	arg01, #0
	call	#__system___getiolock_0125
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, #240
	rdlong	arg02, objptr
	sub	objptr, #240
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0125
	wrlong	#0, result1
	mov	result1, #0
' close #3
	mov	arg01, #3
	call	#__system__close
	mov	ptra, fp
	call	#popregs_
_program_ret
	ret

' 
' 
' ''---------- putpixel - put a pixel on the screen
' 
' pub putpixel1(x,y,c) |byte b
_hng030rm_spin2_putpixel1
' 
' 
' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #5
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0012
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	mov	_var10, arg01
	shr	_var10, #3
	add	_var09, _var10
'     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
	rdbyte	_var11, _var09
'     if (c==0)
	cmp	arg03, #0 wz
 if_ne	jmp	#LR__0010
	abs	_var01, arg01 wc
	and	_var01, #7
 if_b	neg	_var01, _var01
	decod	_var12, _var01
'       b:=b & !(1<<(x//8))
	andn	_var11, _var12
'     else
	jmp	#LR__0011
LR__0010
	abs	_var01, arg01 wc
	and	_var01, #7
 if_b	neg	_var01, _var01
	decod	_var13, _var01
'       b:=b |(1<<(x//8))
	or	_var11, _var13
LR__0011
	add	objptr, #144
	rdlong	_var14, objptr
	sub	objptr, #144
	shl	_var14, #2
	qmul	_var14, arg02
	getqx	_var15
	rdlong	_var16, objptr
	add	_var16, _var15
	add	_var16, _var10
'     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
	wrbyte	_var11, _var16
LR__0012
_hng030rm_spin2_putpixel1_ret
	ret

' 
' 
' pub putpixel2(x,y,c) |byte b
_hng030rm_spin2_putpixel2
' 
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0013
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	mov	_var10, arg01
	shr	_var10, #2
	add	_var09, _var10
'     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
	rdbyte	_var11, _var09
	abs	_var01, arg01 wc
	and	_var01, #3
 if_b	neg	_var01, _var01
	shl	_var01, #1
	mov	_var12, #3
	shl	_var12, _var01
'     b:=b & !(%11<<((x//4)<<1))
	andn	_var11, _var12
	shl	arg03, _var01
'     b:=b |(c<<((x//4)<<1))
	or	_var11, arg03
	add	objptr, #144
	rdlong	_var13, objptr
	sub	objptr, #144
	shl	_var13, #2
	qmul	_var13, arg02
	getqx	_var14
	rdlong	_var15, objptr
	add	_var15, _var14
	add	_var15, _var10
'     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
	wrbyte	_var11, _var15
LR__0013
_hng030rm_spin2_putpixel2_ret
	ret

' 
' 
' pub putpixel4(x,y,c) |byte b
_hng030rm_spin2_putpixel4
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0014
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	mov	_var10, arg01
	shr	_var10, #1
	add	_var09, _var10
'     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
	rdbyte	_var11, _var09
	abs	_var01, arg01 wc
	and	_var01, #1
 if_b	neg	_var01, _var01
	shl	_var01, #2
	mov	_var12, #15
	shl	_var12, _var01
'     b:=b & !(%1111<<((x//2)<<2))
	andn	_var11, _var12
	shl	arg03, _var01
'     b:=b |(c<<((x//2)<<2))
	or	_var11, arg03
	add	objptr, #144
	rdlong	_var13, objptr
	sub	objptr, #144
	shl	_var13, #2
	qmul	_var13, arg02
	getqx	_var14
	rdlong	_var15, objptr
	add	_var15, _var14
	add	_var15, _var10
'     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
	wrbyte	_var11, _var15
LR__0014
_hng030rm_spin2_putpixel4_ret
	ret

' 
' 
' pub putpixel8(x,y,c)
_hng030rm_spin2_putpixel8
' 
' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #2
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0015
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	add	_var09, arg01
'     byte[buf_ptr+4*cpl*y+x]:=c
	wrbyte	arg03, _var09
LR__0015
_hng030rm_spin2_putpixel8_ret
	ret

' 
' ''---------- Set the border color, o is upper border, lines+1 is lower border
' 
' pub setbordercolor(r,g,b) | color
_hng030rm_spin2_setbordercolor
	shl	arg01, #24
	shl	arg02, #16
	add	arg01, arg02
	shl	arg03, #8
	add	arg01, arg03
' 
' color:=r<<24+g<<16+b<<8
' bordercolor:=color
	add	objptr, #44
	wrlong	arg01, objptr
	sub	objptr, #44
_hng030rm_spin2_setbordercolor_ret
	ret

' 
' 
' '*************************************************************************
' '                                                                        *
' '  Text functions                                                        *
' '                                                                        *
' '*************************************************************************
' 
' ''---------- Clear the screen, set its foreground/background color
' 
' pub cls(fc,bc)   :c
_hng030rm_spin2_cls
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' if (graphmode<512)
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	cmps	local03, ##512 wcz
 if_ae	jmp	#LR__0016
	mov	local04, local01
	shl	local04, #24
	mov	local05, local02
	shl	local05, #16
	add	local04, local05
	add	local04, #32
'   c:=fc<<24+bc<<16+$20
'   longfill(buf_ptr,c,buflen)
	rdlong	arg01, objptr
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	mov	arg02, local04
	call	#\builtin_longfill_
' else
	jmp	#LR__0022
LR__0016
'   if (graphmode & 48) ==48
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #48 wz
'     c:=bc
 if_e	mov	local04, local02
 if_e	jmp	#LR__0021
'   elseif (graphmode & 48) ==32
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #32 wz
 if_ne	jmp	#LR__0017
	mov	local04, local02
	shl	local04, #4
	add	local04, local02
'     c:=bc<<4+bc
	jmp	#LR__0020
LR__0017
'   elseif (graphmode & 48) ==16
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #16 wz
 if_ne	jmp	#LR__0018
	mov	local04, local02
	shl	local04, #6
	mov	local06, local02
	shl	local06, #4
	add	local04, local06
	mov	local07, local02
	shl	local07, #2
	add	local04, local07
	add	local04, local02
'     c:=bc<<6+bc<<4+bc<<2+bc
'   else
	jmp	#LR__0019
LR__0018
'     if bc==1
	cmp	local02, #1 wz
'       c:=255
 if_e	mov	local04, #255
'     else
'       c:=0
 if_ne	mov	local04, #0
LR__0019
LR__0020
LR__0021
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	shl	arg03, #2
'   bytefill(buf_ptr,c,buflen*4)
	rdlong	arg01, objptr
	mov	arg02, local04
	call	#\builtin_bytefill_
LR__0022
' setwritecolors(fc,bc)
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	local01, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	local02, objptr
' cursor_x:=0
	sub	objptr, #8
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #53
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_cls_ret
	ret

' 
' ''---------- Output a char at the cursor position, move the cursor
' 
' pub putchar(achar) | c,x,y
_hng030rm_spin2_putchar
	mov	COUNT_, #18
	call	#pushregs_
	mov	local01, arg01
' 
' if achar==10
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0023
'   crlf()
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y+=1
	add	objptr, #1
	rdbyte	local02, objptr
	add	local02, #1
	wrbyte	local02, objptr
' if cursor_y>lines-1
	add	objptr, #95
	rdlong	local02, objptr
	sub	local02, #1
	sub	objptr, #95
	rdbyte	local03, objptr
	sub	objptr, #53
	cmps	local03, local02 wcz
 if_be	jmp	#LR__0026
'   scrollup()
	call	#_hng030rm_spin2_scrollup
	add	objptr, #148
	rdlong	local04, objptr
	sub	local04, #1
'   cursor_y:=lines-1
	sub	objptr, #95
	wrbyte	local04, objptr
	sub	objptr, #53
' else  
	jmp	#LR__0026
LR__0023
'   x:=cursor_x
	add	objptr, #52
	rdbyte	local05, objptr
'   y:=cursor_y
	add	objptr, #1
	rdbyte	local06, objptr
	add	objptr, #3
	rdlong	local07, objptr
	shl	local07, #24
	add	objptr, #4
	rdlong	local08, objptr
	shl	local08, #16
	add	local07, local08
'   c:=write_color<<24+write_background<<16
	add	objptr, #84
	rdlong	local09, objptr
	sub	objptr, #144
	qmul	local09, local06
	getqx	local10
	add	local10, local05
	shl	local10, #2
	rdlong	local11, objptr
	add	local11, local10
	rdlong	local12, local11
	and	local12, ##65535
	or	local12, local07
'   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
	wrlong	local12, local11
	add	objptr, #144
	rdlong	local09, objptr
	sub	objptr, #144
	qmul	local09, local06
	getqx	local13
	add	local13, local05
	shl	local13, #2
	rdlong	local14, objptr
	add	local14, local13
	rdlong	local15, local14
	andn	local15, #255
	and	local01, #255
	or	local15, local01
'   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
	wrlong	local15, local14
'   cursor_x+=1
	add	objptr, #52
	rdbyte	local16, objptr
	add	local16, #1
	wrbyte	local16, objptr
'   if cursor_x==cpl
	rdbyte	local16, objptr
	add	objptr, #92
	rdlong	local17, objptr
	sub	objptr, #144
	cmp	local16, local17 wz
 if_ne	jmp	#LR__0025
'     cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
'     cursor_y+=1
	add	objptr, #1
	rdbyte	local16, objptr
	add	local16, #1
	wrbyte	local16, objptr
'     if cursor_y>lines-1
	add	objptr, #95
	rdlong	local16, objptr
	sub	local16, #1
	sub	objptr, #95
	rdbyte	local17, objptr
	sub	objptr, #53
	cmps	local17, local16 wcz
 if_be	jmp	#LR__0024
'       scrollup()
	call	#_hng030rm_spin2_scrollup
	add	objptr, #148
	rdlong	local18, objptr
	sub	local18, #1
'       cursor_y:=lines-1
	sub	objptr, #95
	wrbyte	local18, objptr
	sub	objptr, #53
LR__0024
LR__0025
LR__0026
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_putchar_ret
	ret

' 
' ''-----------  Scroll the screen one line up
' 
' pub scrollup() | i
_hng030rm_spin2_scrollup
	mov	COUNT_, #10
	call	#pushregs_
	add	objptr, #144
	rdlong	local01, objptr
	sub	objptr, #144
	shl	local01, #2
	rdlong	arg02, objptr
	add	arg02, local01
	add	objptr, #48
	rdlong	arg03, objptr
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #144
	sub	arg03, local02
' 
' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
	rdlong	arg01, objptr
	call	#__system__longmove
' repeat i from buflen-cpl to buflen-1
	add	objptr, #48
	rdlong	local03, objptr
	add	objptr, #96
	rdlong	local02, objptr
	sub	local03, local02
	sub	objptr, #96
	rdlong	local04, objptr
	sub	local04, #1
	rdlong	local05, objptr
	add	objptr, #96
	rdlong	local06, objptr
	sub	objptr, #144
	sub	local05, local06
	cmps	local04, local05 wcz
 if_a	mov	local07, #1
 if_be	neg	local07, #1
	add	local04, local07
	loc	pa,	#(@LR__0028-@LR__0027)
	call	#FCACHE_LOAD_
LR__0027
	mov	local08, local03
	shl	local08, #2
	rdlong	local09, objptr
	add	local09, local08
	rdlong	local10, local09
	and	local10, ##-65536
	or	local10, #32
'   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
	wrlong	local10, local09
	add	local03, local07
	cmp	local03, local04 wz
 if_ne	jmp	#LR__0027
LR__0028
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_scrollup_ret
	ret

' 
' 
' 
' '*************************************************************************
' '                                                                        *
' '  Mode setting and driver start                                                          *
' '                                                                        *
' '*************************************************************************
' 
' ''---------  Set the graphics mode
' 
' 
' 
' pub setmode(mode) | i', 'xzoom, yzoom, azoom
_hng030rm_spin2_setmode
	mov	COUNT_, #80
	call	#pushregs_
	mov	local01, arg01
' 
' '' mode:tn_bb_cc_vv_hh
' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
' 
' if mode==(512+192+48)
	cmp	local01, ##752 wz
'   return 'no RAM
 if_e	jmp	#LR__0069
' 
' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
	mov	local02, local01
	shr	local02, #6
	and	local02, #7
	fle	local02, #8
	mov	local03, local02
	jmprel	local03
LR__0029
	jmp	#LR__0030
	jmp	#LR__0031
	jmp	#LR__0032
	jmp	#LR__0033
	jmp	#LR__0034
	jmp	#LR__0035
	jmp	#LR__0036
	jmp	#LR__0037
	jmp	#LR__0038
LR__0030
' 
'     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7256
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7256
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0031
'     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7320
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7320
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0032
'     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7384
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7384
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0033
'     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7448
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7448
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0034
'     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7512
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7512
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0035
'     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7576
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7576
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0036
'     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7640
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7640
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0038
LR__0037
'     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
	add	objptr, #80
	mov	local08, objptr
	mov	local09, local08
	add	ptr__hng030rm_spin2_dat__, ##7704
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg01, local09
	mov	arg02, local05
	mov	arg03, #16
	sub	objptr, #80
	sub	ptr__hng030rm_spin2_dat__, ##7704
	call	#__system__longmove
	mov	local07, result1
LR__0038
' 
' ' 4-bit graphics: do nothing with timings :)
' if mode<512
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0039
	add	ptr__hng030rm_spin2_dat__, ##6232
	mov	local10, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@ataripalette
	add	objptr, #24
	wrlong	local10, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0039
' 
' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##560 wz
 if_ne	jmp	#LR__0040
'   timings[5]:=4
	add	objptr, #100
	wrlong	#4, objptr
	add	objptr, #24
	rdlong	local11, objptr
	shl	local11, #1
'   timings[11]:=timings[11]<<1
	wrlong	local11, objptr
'   putpixel:=p8
	add	objptr, #108
	rdlong	local02, objptr
	sub	objptr, #16
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6232
	mov	local12, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@ataripalette
	sub	objptr, #192
	wrlong	local12, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0040
' 
' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##528 wz
 if_ne	jmp	#LR__0041
'   timings[5]:=16
	add	objptr, #100
	wrlong	#16, objptr
	add	objptr, #24
	rdlong	local13, objptr
	shr	local13, #1
'   timings[11]:=timings[11]>>1
	wrlong	local13, objptr
'   putpixel:=p2
	add	objptr, #100
	rdlong	local02, objptr
	sub	objptr, #8
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6152
	mov	local14, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@fourcolors
	sub	objptr, #192
	wrlong	local14, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6152
LR__0041
' 
' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##512 wz
 if_ne	jmp	#LR__0042
'   timings[5]:=32
	add	objptr, #100
	wrlong	#32, objptr
	add	objptr, #24
	rdlong	local15, objptr
	shr	local15, #2
'   timings[11]:=timings[11]>>2
	wrlong	local15, objptr
'   putpixel:=p1
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #4
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6144
	mov	local16, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@twocolors
	sub	objptr, #192
	wrlong	local16, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6144
LR__0042
' 
' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##544 wz
 if_ne	jmp	#LR__0043
'   putpixel:=p4
	add	objptr, #228
	rdlong	local02, objptr
	sub	objptr, #12
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6168
	mov	local17, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@vga16
	sub	objptr, #192
	wrlong	local17, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6168
LR__0043
' 
' repeat i from 0 to 4
	mov	local18, #0
	loc	pa,	#(@LR__0045-@LR__0044)
	call	#FCACHE_LOAD_
LR__0044
	mov	local19, local18
	shl	local19, #2
	add	objptr, #80
	add	local19, objptr
	sub	objptr, #44
	rdlong	local20, objptr
	sub	objptr, #36
	shl	local20, #17
	rdlong	local21, local19
	add	local21, local20
	mov	local22, local21
	add	local22, ##1887502336
'   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
	wrlong	local22, local19
	add	local18, #1
	cmps	local18, #5 wcz
 if_b	jmp	#LR__0044
LR__0045
	add	objptr, #36
	rdlong	local23, objptr
	shl	local23, #17
	add	objptr, #64
	rdlong	local24, objptr
	add	local24, local23
' timings[5]:=timings[5]+hdmibase<<17
	wrlong	local24, objptr
' clkfreq:=timings[13]
	add	objptr, #32
	rdlong	local02, objptr
	wrlong	local02, #20
' hubset(timings[14])
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #136
	hubset	arg01
' waitms(1)
	mov	arg01, #1
	call	#__system___waitms
	mov	local25, local01
	and	local25, #3
	decod	local26, local25
' 
' 
' xzoom:=1<<(mode & 3)
	add	objptr, #204
	wrlong	local26, objptr
' 
' if (xzoom==8) && (((mode>>4)&3)<>3)
	mov	local08, local26
	sub	objptr, #204
	cmp	local08, #8 wz
 if_ne	jmp	#LR__0046
	mov	local09, local01
	shr	local09, #4
	and	local09, #3
	cmp	local09, #3 wz
 if_e	jmp	#LR__0046
'   xzoom:=4
	mov	local02, #4
	add	objptr, #204
	wrlong	#4, objptr
	sub	objptr, #204
LR__0046
	mov	local27, local01
	shr	local27, #2
	and	local27, #3
	decod	local28, local27
' 
' yzoom:=1<<((mode>>2) & 3)
	add	objptr, #208
	wrlong	local28, objptr
	sub	objptr, #4
	rdlong	local08, objptr
	add	objptr, #4
	rdlong	local04, objptr
	qmul	local08, local04
	getqx	local29
' azoom:=xzoom*yzoom
	add	objptr, #4
	wrlong	local29, objptr
' 
' cpl:=timings[11]
	sub	objptr, #88
	rdlong	local02, objptr
	add	objptr, #20
	wrlong	local02, objptr
	sub	objptr, #144
' if (mode<512)
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0047
	add	objptr, #128
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
'   lines:=(timings[12]>>4)+/yzoom
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if ((timings[12]>>4)+//yzoom) <>0
	sub	objptr, #20
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
	cmp	muldiva_, #0 wz
 if_e	jmp	#LR__0050
'     lines +=1
	add	objptr, #148
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
	sub	objptr, #148
' 
' else
	jmp	#LR__0050
LR__0047
	add	objptr, #128
	rdlong	muldiva_, objptr
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#divide_
'   lines:=timings[12]/yzoom
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if cpl//xzoom==0
	sub	objptr, #4
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	cmp	muldiva_, #0 wz
 if_ne	jmp	#LR__0048
'     cpl:=cpl/xzoom
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	add	objptr, #144
	wrlong	muldivb_, objptr
	sub	objptr, #144
'   else
	jmp	#LR__0049
LR__0048
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	mov	local30, muldivb_
	add	local30, #1
'     cpl:=cpl/xzoom+1
	add	objptr, #144
	wrlong	local30, objptr
	sub	objptr, #144
LR__0049
LR__0050
	add	objptr, #144
	rdlong	local08, objptr
	add	objptr, #4
	rdlong	local04, objptr
	qmul	local08, local04
	getqx	local31
' 
' buflen:=(cpl*lines)
	sub	objptr, #100
	wrlong	local31, objptr
	sub	objptr, #48
	shl	local31, #2
	decod	local32, #19
	sub	local32, local31
' buf_ptr:=$80000-4*buflen
	wrlong	local32, objptr
	add	objptr, #80
	mov	local33, objptr
' mode_ptr:=@timings
	sub	objptr, #60
	wrlong	local33, objptr
' graphmode:=mode
	add	objptr, #176
	wrlong	local01, objptr
	sub	objptr, #196
' makedl(mode)
	mov	arg01, local01
' 
' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
' 
' '   0 - display a up/down border line
' 
' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
' '    nnnn - font line to display, 0..15
' '    llllll - character line, determines the cursor Y position
' 
' 
' if (mode &256==0)
	test	arg01, #256 wz
 if_ne	jmp	#LR__0051
	rdlong	local34, objptr
	sub	local34, ##2304
'   dl_ptr:=buf_ptr-4*576
	add	objptr, #28
	wrlong	local34, objptr
	sub	objptr, #28
' else
	jmp	#LR__0052
LR__0051
	rdlong	local35, objptr
	sub	local35, ##1984
'   dl_ptr:=buf_ptr-4*496
	add	objptr, #28
	wrlong	local35, objptr
	sub	objptr, #28
LR__0052
	mov	local36, arg01
	shr	local36, #2
	and	local36, #3
'  ' dl_ptr:=buf_ptr-4*540
' 
' vzoom:=((mode>>2) & 3)
' 
' 
' if mode<512 '' text modes
	cmps	arg01, ##512 wcz
 if_ae	jmp	#LR__0060
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	local37, objptr
	sub	objptr, #104
	cmps	local37, #0 wcz
 if_be	jmp	#LR__0057
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	local38, #0
	add	objptr, #104
	rdlong	local39, objptr
	sub	objptr, #104
	sub	local39, #1
	cmps	local39, #0 wcz
 if_a	mov	local40, #1
 if_be	neg	local40, #1
	mov	local41, local40
	add	local39, local40
	loc	pa,	#(@LR__0054-@LR__0053)
	call	#FCACHE_LOAD_
LR__0053
	mov	local42, local38
	shl	local42, #2
	add	objptr, #28
	rdlong	local43, objptr
	sub	objptr, #28
	add	local43, local42
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local43
	add	local38, local41
	cmp	local38, local39 wz
 if_ne	jmp	#LR__0053
LR__0054
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	local38, objptr
	add	objptr, #24
	rdlong	local40, objptr
	add	local38, local40
	add	objptr, #12
	rdlong	local44, objptr
	sub	local44, #1
	sub	objptr, #36
	rdlong	local45, objptr
	add	objptr, #24
	rdlong	local46, objptr
	sub	objptr, #128
	add	local45, local46
	cmps	local44, local45 wcz
 if_a	mov	local47, #1
 if_be	neg	local47, #1
	mov	local48, local47
	add	local44, local47
	loc	pa,	#(@LR__0056-@LR__0055)
	call	#FCACHE_LOAD_
LR__0055
	mov	local49, local38
	shl	local49, #2
	add	objptr, #28
	rdlong	local50, objptr
	sub	objptr, #28
	add	local50, local49
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local50
	add	local38, local48
	cmp	local38, local44 wz
 if_ne	jmp	#LR__0055
LR__0056
LR__0057
	mov	local51, #16
	shl	local51, local36
'   lpc:=16<<vzoom
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	local38, objptr
	mov	local52, local38
	add	objptr, #24
	rdlong	local53, objptr
	add	local52, local53
	sub	local52, #1
	sub	objptr, #24
	rdlong	local47, objptr
	sub	objptr, #104
	cmps	local52, local47 wcz
 if_a	mov	local54, #1
 if_be	neg	local54, #1
	mov	local55, local54
	add	local52, local54
	loc	pa,	#(@LR__0059-@LR__0058)
	call	#FCACHE_LOAD_
LR__0058
	mov	muldiva_, local38
	add	objptr, #104
	rdlong	local56, objptr
	sub	objptr, #104
	sub	muldiva_, local56
	mov	muldivb_, local51
	call	#unsdivide_
	shr	muldiva_, local36
'     fontline2:=((i-timings[6])+//lpc)>>vzoom
	mov	local57, muldiva_
	mov	muldiva_, local38
	add	objptr, #104
	rdlong	local56, objptr
	sub	objptr, #104
	sub	muldiva_, local56
	mov	muldivb_, local51
	call	#unsdivide_
	mov	local58, muldivb_
'     charline:=(i-timings[6])+/lpc
	add	objptr, #144
	rdlong	local56, objptr
	sub	objptr, #144
	qmul	local56, local58
	getqx	local59
	shl	local59, #2
	rdlong	local60, objptr
	add	local60, local59
	mov	local61, arg01
	and	local61, #3
	add	local60, local61
'     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
	shl	local60, #12
	shl	local57, #8
	add	local60, local57
	shl	local58, #2
	add	local60, local58
	add	local60, #1
	mov	local62, local38
	shl	local62, #2
	add	objptr, #28
	rdlong	local63, objptr
	sub	objptr, #28
	add	local63, local62
'     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
	wrlong	local60, local63
	add	local38, local55
	cmp	local38, local52 wz
 if_ne	jmp	#LR__0058
LR__0059
LR__0060
' 
' 
' 
' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
	cmps	arg01, ##512 wcz
 if_b	jmp	#LR__0068
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	local37, objptr
	sub	objptr, #104
	cmps	local37, #0 wcz
 if_be	jmp	#LR__0065
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	local38, #0
	add	objptr, #104
	rdlong	local64, objptr
	sub	objptr, #104
	sub	local64, #1
	cmps	local64, #0 wcz
 if_a	mov	local40, #1
 if_be	neg	local40, #1
	mov	local65, local40
	add	local64, local40
	loc	pa,	#(@LR__0062-@LR__0061)
	call	#FCACHE_LOAD_
LR__0061
	mov	local66, local38
	shl	local66, #2
	add	objptr, #28
	rdlong	local67, objptr
	sub	objptr, #28
	add	local67, local66
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local67
	add	local38, local65
	cmp	local38, local64 wz
 if_ne	jmp	#LR__0061
LR__0062
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	local38, objptr
	add	objptr, #24
	rdlong	local40, objptr
	add	local38, local40
	add	objptr, #12
	rdlong	local68, objptr
	sub	local68, #1
	sub	objptr, #36
	rdlong	local45, objptr
	add	objptr, #24
	rdlong	local46, objptr
	sub	objptr, #128
	add	local45, local46
	cmps	local68, local45 wcz
 if_a	mov	local47, #1
 if_be	neg	local47, #1
	mov	local69, local47
	add	local68, local47
	loc	pa,	#(@LR__0064-@LR__0063)
	call	#FCACHE_LOAD_
LR__0063
	mov	local70, local38
	shl	local70, #2
	add	objptr, #28
	rdlong	local71, objptr
	sub	objptr, #28
	add	local71, local70
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local71
	add	local38, local69
	cmp	local38, local68 wz
 if_ne	jmp	#LR__0063
LR__0064
LR__0065
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	local38, objptr
	mov	local72, local38
	add	objptr, #24
	rdlong	local53, objptr
	add	local72, local53
	sub	local72, #1
	sub	objptr, #24
	rdlong	local47, objptr
	sub	objptr, #104
	cmps	local72, local47 wcz
 if_a	mov	local54, #1
 if_be	neg	local54, #1
	mov	local73, local54
	add	local72, local54
	loc	pa,	#(@LR__0067-@LR__0066)
	call	#FCACHE_LOAD_
LR__0066
	mov	local74, local38
	add	objptr, #104
	rdlong	local56, objptr
	sub	local74, local56
	shr	local74, local36
	add	objptr, #40
	rdlong	local56, objptr
	sub	objptr, #144
	qmul	local56, local74
	getqx	local75
	shl	local75, #2
	rdlong	local76, objptr
	add	local76, local75
	mov	local77, arg01
	and	local77, #3
	add	local76, local77
'     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
	shl	local76, #12
	add	local76, #2
	mov	local78, arg01
	and	local78, #48
	shr	local78, #2
	add	local76, local78
	mov	local79, local38
	shl	local79, #2
	add	objptr, #28
	rdlong	local80, objptr
	sub	objptr, #28
	add	local80, local79
'     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
	wrlong	local76, local80
	add	local38, local73
	cmp	local38, local72 wz
 if_ne	jmp	#LR__0066
LR__0067
LR__0068
LR__0069
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_setmode_ret
	ret
hubexit
	jmp	#cogexit

__system___setbaud
	rdlong	muldiva_, #20
	mov	muldivb_, arg01
	call	#divide_
	dirl	#62
	dirl	#63
	wrlong	muldivb_, ptr___system__dat__
	shl	muldivb_, #16
	mov	arg02, #7
	add	arg02, muldivb_
	wrpin	#124, #62
	wxpin	arg02, #62
	wrpin	#62, #63
	add	arg02, #20
	wxpin	arg02, #63
	dirh	#62
	dirh	#63
__system___setbaud_ret
	ret

__system___txraw
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0070
	mov	arg01, ##230400
	call	#__system___setbaud
LR__0070
	wypin	local01, #62
	waitx	#1
	loc	pa,	#(@LR__0072-@LR__0071)
	call	#FCACHE_LOAD_
LR__0071
	testp	#62 wc
 if_nc	jmp	#LR__0071
LR__0072
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__system___txraw_ret
	ret

__system___rxraw
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0073
	mov	arg01, ##230400
	call	#__system___setbaud
LR__0073
	cmp	local01, #0 wz
 if_e	jmp	#LR__0074
	rdlong	local03, #20
	shr	local03, #10
	qmul	local01, local03
	getqx	local04
	getct	local05
	add	local05, local04
LR__0074
	neg	local06, #1
	mov	local07, #0
	add	ptr___system__dat__, #4
	rdlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
LR__0075
	testb	local08, #8 wc
	testbn	local08, #9 andc
	shr	local08, #10
 if_b	mov	local07, #1
 if_b	jmp	#LR__0076
	testp	#63 wz
 if_e	mov	local07, #1
 if_e	rdpin	local08, #63
 if_e	shr	local08, #4
LR__0076
	mov	local02, #0
	cmp	local07, #0 wz
 if_ne	neg	local02, #1
	mov	local09, #0
	mov	local10, #0
	cmp	local01, #0 wz
 if_ne	neg	local10, #1
	mov	local11, #0
	mov	local12, #0
	getct	local13
	sub	local13, local05
	cmps	local13, #0 wcz
 if_b	neg	local12, #1
	cmp	local12, #0 wz
 if_ne	neg	local11, #1
	test	local10, local11 wz
 if_ne	neg	local09, #1
	or	local02, local09 wz
 if_e	jmp	#LR__0075
	cmp	local07, #0 wz
 if_ne	mov	local06, local08
 if_ne	and	local06, #255
	add	ptr___system__dat__, #4
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___rxraw_ret
	ret

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0084
	loc	pa,	#(@LR__0078-@LR__0077)
	call	#FCACHE_LOAD_
LR__0077
	cmps	arg03, #3 wcz
 if_be	jmp	#LR__0079
	rdlong	_var02, arg02
	wrlong	_var02, arg01
	add	arg01, #4
	add	arg02, #4
	sub	arg03, #4
	jmp	#LR__0077
LR__0078
LR__0079
	mov	_var03, arg03 wz
 if_e	jmp	#LR__0090
	loc	pa,	#(@LR__0082-@LR__0080)
	call	#FCACHE_LOAD_
LR__0080
	rep	@LR__0083, _var03
LR__0081
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
	add	arg01, #1
	add	arg02, #1
LR__0082
LR__0083
	jmp	#LR__0090
LR__0084
	add	arg01, arg03
	add	arg02, arg03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0089
	loc	pa,	#(@LR__0087-@LR__0085)
	call	#FCACHE_LOAD_
LR__0085
	rep	@LR__0088, _var04
LR__0086
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
LR__0087
LR__0088
LR__0089
LR__0090
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system__longmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0095
	mov	_var02, arg03 wz
 if_e	jmp	#LR__0101
	loc	pa,	#(@LR__0093-@LR__0091)
	call	#FCACHE_LOAD_
LR__0091
	rep	@LR__0094, _var02
LR__0092
	rdlong	_var03, arg02
	wrlong	_var03, arg01
	add	arg01, #4
	add	arg02, #4
LR__0093
LR__0094
	jmp	#LR__0101
LR__0095
	mov	_var04, arg03
	shl	_var04, #2
	add	arg01, _var04
	add	arg02, _var04
	mov	_var05, arg03 wz
 if_e	jmp	#LR__0100
	loc	pa,	#(@LR__0098-@LR__0096)
	call	#FCACHE_LOAD_
LR__0096
	rep	@LR__0099, _var05
LR__0097
	sub	arg01, #4
	sub	arg02, #4
	rdlong	_var03, arg02
	wrlong	_var03, arg01
LR__0098
LR__0099
LR__0100
LR__0101
	mov	result1, _var01
__system__longmove_ret
	ret

__system____builtin_strcpy
	mov	_var01, arg01
	loc	pa,	#(@LR__0103-@LR__0102)
	call	#FCACHE_LOAD_
LR__0102
	rdbyte	_var02, arg02 wz
	wrbyte	_var02, arg01
	add	arg02, #1
	add	arg01, #1
 if_ne	jmp	#LR__0102
LR__0103
	mov	result1, _var01
__system____builtin_strcpy_ret
	ret

__system____topofstack
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #12
	add	fp, #4
	wrlong	arg01, fp
	mov	result1, fp
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
__system____topofstack_ret
	ret

__system___make_methodptr
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #8
	call	#__system___gc_alloc_managed
	mov	local03, result1 wz
 if_e	jmp	#LR__0104
	wrlong	local01, local03
	mov	local04, local03
	add	local04, #4
	wrlong	local02, local04
LR__0104
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
__system___make_methodptr_ret
	ret

__system___lockmem
	mov	COUNT_, #2
	call	#pushregs_
	cogid	result1
	mov	local01, result1
	add	local01, #256
LR__0105
	rdlong	local02, arg01 wz
 if_e	wrlong	local01, arg01
 if_e	rdlong	local02, arg01
 if_e	rdlong	local02, arg01
	cmp	local02, local01 wz
 if_ne	jmp	#LR__0105
	mov	ptra, fp
	call	#popregs_
__system___lockmem_ret
	ret

__system___tx
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0106
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_e	jmp	#LR__0106
	mov	local02, #13
	mov	arg01, #13
	call	#__system___txraw
LR__0106
	mov	arg01, local01
	call	#__system___txraw
	mov	ptra, fp
	call	#popregs_
__system___tx_ret
	ret

__system___rx
	mov	COUNT_, #2
	call	#pushregs_
LR__0107
	mov	arg01, #0
	call	#__system___rxraw
	mov	local01, result1
	cmp	local01, ##-1 wz
 if_e	jmp	#LR__0107
	cmp	local01, #13 wz
 if_ne	jmp	#LR__0108
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_ne	mov	local01, #10
LR__0108
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #1 wz
 if_e	jmp	#LR__0111
	cmp	local01, #127 wz
 if_ne	jmp	#LR__0109
	mov	arg01, #8
	call	#__system___tx
	jmp	#LR__0110
LR__0109
	mov	arg01, local01
	call	#__system___tx
LR__0110
LR__0111
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___rx_ret
	ret

__system___basic_read_line
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	mov	local03, #24
	mov	local04, #24
	mov	arg01, #24
	call	#__system___gc_alloc_managed
	mov	local05, result1
	mov	local06, local05 wz
 if_e	mov	result1, local06
 if_e	jmp	#LR__0117
LR__0112
	mov	arg01, local01
	call	#__system___basic_get_char
	mov	local07, result1
	cmps	local07, #0 wcz
 if_be	jmp	#LR__0116
	cmp	local07, #13 wz
 if_ne	jmp	#LR__0113
	mov	arg01, local01
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	jmp	#LR__0116
LR__0113
	cmp	local07, #10 wz
 if_e	jmp	#LR__0116
	cmp	local07, #8 wz
 if_e	jmp	#LR__0114
	cmp	local07, #127 wz
 if_ne	jmp	#LR__0115
LR__0114
	cmps	local02, #0 wcz
 if_a	sub	local02, #1
	jmp	#LR__0112
LR__0115
	mov	local08, local06
	add	local08, local02
	wrbyte	local07, local08
	add	local02, #1
	cmp	local02, local03 wz
 if_ne	jmp	#LR__0112
	mov	local09, local03
	add	local09, #32
	mov	arg01, local09
	call	#__system___gc_alloc_managed
	mov	local10, result1 wz
 if_e	mov	result1, local10
 if_e	jmp	#LR__0117
	mov	arg01, local10
	mov	arg02, local06
	mov	arg03, local03
	call	#__system____builtin_memmove
	mov	local03, local09
	mov	arg01, local06
	call	#__system___gc_free
	mov	local06, local10
	jmp	#LR__0112
LR__0116
	mov	local11, local06
	add	local11, local02
	wrbyte	#0, local11
	mov	result1, local06
LR__0117
	mov	ptra, fp
	call	#popregs_
__system___basic_read_line_ret
	ret

__system___basic_find_terminator
	mov	_var01, arg01 wz
 if_e	mov	result1, _var01
 if_e	jmp	#__system___basic_find_terminator_ret
	mov	_var02, #0
LR__0118
	rdbyte	_var03, _var01
	cmp	_var03, #44 wz
 if_ne	jmp	#LR__0119
	cmp	_var02, #0 wz
 if_e	mov	result1, _var01
 if_e	jmp	#__system___basic_find_terminator_ret
LR__0119
	cmp	_var03, #0 wz
 if_e	jmp	#LR__0120
	cmp	_var03, #44 wz
 if_e	jmp	#LR__0120
	cmp	_var03, #10 wz
 if_ne	jmp	#LR__0121
LR__0120
	mov	result1, _var01
	jmp	#__system___basic_find_terminator_ret
LR__0121
	rdbyte	_var04, _var01
	cmp	_var04, #34 wz
 if_ne	jmp	#LR__0122
	mov	_var04, #1
	sub	_var04, _var02
	mov	_var02, _var04 wz
 if_e	mov	result1, _var01
 if_e	jmp	#__system___basic_find_terminator_ret
LR__0122
	mov	_var04, _var01
	mov	_var05, _var01
	add	_var05, #1
	mov	_var01, _var05
	jmp	#LR__0118
__system___basic_find_terminator_ret
	ret

__system___basic_get_integer
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system____builtin_atoi
	mov	local02, result1
	mov	arg01, local01
	call	#__system___basic_find_terminator
	mov	result2, result1
	rdbyte	local03, result2 wz
 if_ne	add	result2, #1
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
__system___basic_get_integer_ret
	ret

__system___waitms
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, #20
	loc	pa,	#(@LR__0124-@LR__0123)
	call	#FCACHE_LOAD_
LR__0123
	cmps	local01, ##1000 wcz
 if_a	waitx	local02
 if_a	sub	local01, ##1000
 if_a	jmp	#LR__0123
LR__0124
	add	ptr___system__dat__, #12
	rdlong	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__0125
	mov	muldiva_, local02
	mov	muldivb_, ##1000
	call	#unsdivide_
	mov	local03, muldivb_
	add	ptr___system__dat__, #12
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__0125
	cmps	local01, #0 wcz
 if_a	qmul	local01, local03
 if_a	getqx	arg01
 if_a	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitms_ret
	ret

__system___waitus
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	ptr___system__dat__, #16
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__0126
	rdlong	muldiva_, #20
	mov	muldivb_, ##1000000
	call	#unsdivide_
	mov	local02, muldivb_
	add	ptr___system__dat__, #16
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__0126
	qmul	local01, local02
	getqx	arg01
	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitus_ret
	ret

__system___mount
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	neg	local03, #1
	rdbyte	local04, local01
	cmp	local04, #47 wz
 if_e	jmp	#LR__0127
	add	ptr___system__dat__, ##572
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0138
LR__0127
	add	ptr___system__dat__, #24
	mov	local05, ptr___system__dat__
	mov	local06, #0
	sub	ptr___system__dat__, #24
LR__0128
	mov	local04, local06
	shl	local04, #2
	add	ptr___system__dat__, #24
	add	local04, ptr___system__dat__
	rdlong	local07, local04 wz
	sub	ptr___system__dat__, #24
 if_ne	jmp	#LR__0129
	cmps	local03, #0 wcz
 if_b	mov	local03, local06
 if_b	jmp	#LR__0133
LR__0129
	rdlong	arg01, local05
	mov	local08, #0
	loc	pa,	#(@LR__0131-@LR__0130)
	call	#FCACHE_LOAD_
LR__0130
	rdbyte	local09, arg01 wz
 if_ne	add	local08, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0130
LR__0131
	mov	result1, local08
	mov	local10, result1
	mov	local11, local10
	add	local11, local01
	rdbyte	local04, local11
	cmp	local04, #47 wz
 if_ne	jmp	#LR__0132
	mov	arg01, local01
	mov	local12, local06
	shl	local12, #2
	add	ptr___system__dat__, #24
	add	local12, ptr___system__dat__
	rdlong	arg02, local12
	mov	arg03, local10
	sub	ptr___system__dat__, #24
	call	#__system__strncmp
	cmp	result1, #0 wz
 if_e	mov	local03, local06
 if_e	jmp	#LR__0134
LR__0132
LR__0133
	add	local06, #1
	add	local05, #4
	cmps	local06, #4 wcz
 if_b	jmp	#LR__0128
LR__0134
	cmp	local03, ##-1 wz
 if_ne	jmp	#LR__0135
	add	ptr___system__dat__, ##572
	wrlong	#11, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0138
LR__0135
	mov	local06, local03
	mov	local13, local06
	shl	local13, #2
	add	ptr___system__dat__, #40
	add	local13, ptr___system__dat__
	wrlong	local02, local13
	cmp	local02, #0 wz
	sub	ptr___system__dat__, #40
 if_ne	jmp	#LR__0136
	shl	local06, #2
	add	ptr___system__dat__, #24
	add	local06, ptr___system__dat__
	wrlong	#0, local06
	sub	ptr___system__dat__, #24
	jmp	#LR__0137
LR__0136
	shl	local06, #2
	add	ptr___system__dat__, #24
	add	local06, ptr___system__dat__
	wrlong	local01, local06
	sub	ptr___system__dat__, #24
LR__0137
	mov	result1, #0
LR__0138
	mov	ptra, fp
	call	#popregs_
__system___mount_ret
	ret

__system____getvfsforfile
	mov	COUNT_, #21
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdbyte	local04, local02
	cmp	local04, #47 wz
 if_ne	jmp	#LR__0139
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#__system__strncpy
	jmp	#LR__0140
LR__0139
	add	ptr___system__dat__, #56
	mov	local05, ptr___system__dat__
	mov	arg01, local01
	mov	arg02, local05
	mov	arg03, #256
	sub	ptr___system__dat__, #56
	call	#__system__strncpy
	mov	arg02, ##@LR__0826
	mov	arg01, local01
	mov	arg03, #256
	call	#__system__strncat
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#__system__strncat
LR__0140
	add	ptr___system__dat__, #24
	mov	local06, ptr___system__dat__
	mov	local07, #0
	sub	ptr___system__dat__, #24
LR__0141
	mov	local04, local07
	shl	local04, #2
	add	ptr___system__dat__, #24
	add	local04, ptr___system__dat__
	rdlong	local08, local04 wz
	sub	ptr___system__dat__, #24
 if_e	jmp	#LR__0151
	rdlong	arg01, local06
	mov	local09, #0
	loc	pa,	#(@LR__0143-@LR__0142)
	call	#FCACHE_LOAD_
LR__0142
	rdbyte	local10, arg01 wz
 if_ne	add	local09, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0142
LR__0143
	mov	result1, local09
	mov	local11, result1
	mov	local12, local11
	add	local12, local01
	rdbyte	local04, local12
	cmp	local04, #47 wz
 if_e	jmp	#LR__0144
	mov	local13, local11
	add	local13, local01
	rdbyte	local14, local13 wz
 if_ne	jmp	#LR__0150
LR__0144
	mov	arg01, local01
	mov	local15, local07
	shl	local15, #2
	add	ptr___system__dat__, #24
	add	local15, ptr___system__dat__
	rdlong	arg02, local15
	mov	arg03, local11
	sub	ptr___system__dat__, #24
	call	#__system__strncmp
	mov	local16, result1 wz
 if_ne	jmp	#LR__0150
	mov	local04, local07
	shl	local04, #2
	add	ptr___system__dat__, #40
	add	local04, ptr___system__dat__
	rdlong	local17, local04
	sub	ptr___system__dat__, #40
	loc	pa,	#(@LR__0147-@LR__0145)
	call	#FCACHE_LOAD_
LR__0145
	mov	local08, local11
	add	local08, #1
	add	local08, local01
	rdbyte	local04, local08
	cmp	local04, #46 wz
 if_ne	jmp	#LR__0148
	mov	local18, local11
	add	local18, #2
	add	local18, local01
	rdbyte	local13, local18
	cmp	local13, #47 wz
 if_e	jmp	#LR__0146
	mov	local19, local11
	add	local19, #2
	add	local19, local01
	rdbyte	local20, local19 wz
 if_ne	jmp	#LR__0148
LR__0146
	add	local11, #1
	jmp	#LR__0145
LR__0147
LR__0148
	cmp	local03, #0 wz
 if_e	jmp	#LR__0149
	mov	arg01, local03
	mov	arg02, local01
	mov	arg03, #256
	call	#__system__strncpy
LR__0149
	mov	local21, local11
	mov	arg02, local01
	add	arg02, local21
	add	arg02, #1
	mov	arg01, local01
	call	#__system____builtin_strcpy
	mov	result1, local17
	jmp	#LR__0152
LR__0150
LR__0151
	add	local07, #1
	add	local06, #4
	cmps	local07, #4 wcz
 if_b	jmp	#LR__0141
	add	ptr___system__dat__, ##1712
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##1712
LR__0152
	mov	ptra, fp
	call	#popregs_
__system____getvfsforfile_ret
	ret

__system___basic_open
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system____getftab
	mov	local04, result1 wz
 if_ne	jmp	#LR__0153
	mov	arg01, abortchain
	mov	arg02, #12
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0157
LR__0153
	cmp	local01, #0 wz
 if_e	jmp	#LR__0155
	mov	arg01, #4
	call	#__system___gc_alloc_managed
	mov	local05, result1 wz
 if_ne	jmp	#LR__0154
	mov	arg01, abortchain
	mov	arg02, #7
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0157
LR__0154
	wrlong	local01, local05
	mov	arg02, ptr___struct___bas_wrap_sender_tx_
	mov	arg01, local05
	call	#__system___make_methodptr
	add	local04, #24
	wrlong	result1, local04
	sub	local04, #24
	jmp	#LR__0156
LR__0155
	add	local04, #24
	wrlong	local01, local04
	sub	local04, #24
LR__0156
	add	local04, #28
	wrlong	local02, local04
	add	local04, #4
	wrlong	local03, local04
	mov	result1, #0
LR__0157
	mov	ptra, fp
	call	#popregs_
__system___basic_open_ret
	ret

__system___basic_open_string
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system____getftab
	mov	local03, result1 wz
 if_ne	jmp	#LR__0158
	mov	arg01, abortchain
	mov	arg02, #12
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0160
LR__0158
	mov	arg02, local01
	mov	arg03, local02
	mov	arg01, local03
	mov	arg04, #438
	call	#__system___openraw
	mov	local04, result1
	cmps	local04, #0 wcz
 if_ae	jmp	#LR__0159
	add	ptr___system__dat__, ##572
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	mov	arg02, result1
	mov	arg01, abortchain
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0160
LR__0159
	mov	result1, local04
LR__0160
	mov	ptra, fp
	call	#popregs_
__system___basic_open_string_ret
	ret

__system___basic_print_char
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	call	#__system___gettxfunc
	mov	local02, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0161
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	result1, #1
LR__0161
	mov	ptra, fp
	call	#popregs_
__system___basic_print_char_ret
	ret

__system___basic_print_string
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system___gettxfunc
	mov	local03, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0162
	cmp	local01, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0162
	mov	arg01, local03
	mov	arg02, local02
	mov	arg03, local01
	call	#__system___fmtstr
LR__0162
	mov	ptra, fp
	call	#popregs_
__system___basic_print_string_ret
	ret

__system___basic_print_integer
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0163
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local01
	mov	arg04, local03
	call	#__system___fmtnum
LR__0163
	mov	ptra, fp
	call	#popregs_
__system___basic_print_integer_ret
	ret

__system___basic_get_char
	mov	COUNT_, #4
	call	#pushregs_
	call	#__system___getrxfunc
	mov	local01, result1 wz
 if_e	neg	result1, #1
 if_e	jmp	#LR__0164
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
LR__0164
	mov	ptra, fp
	call	#popregs_
__system___basic_get_char_ret
	ret

__system___fmtchar
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrbyte	arg03, fp
	add	fp, #1
	wrbyte	#0, fp
	sub	fp, #1
	mov	arg03, fp
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#__system___fmtstr
	mov	ptra, fp
	call	#popregs_
__system___fmtchar_ret
	ret

__system___fmtstr
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	and	local04, #255
	mov	arg01, local03
	mov	local05, #0
	loc	pa,	#(@LR__0166-@LR__0165)
	call	#FCACHE_LOAD_
LR__0165
	rdbyte	local06, arg01 wz
 if_ne	add	local05, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0165
LR__0166
	mov	result1, local05
	mov	local07, result1
	cmp	local04, #0 wz
 if_e	jmp	#LR__0167
	fles	local07, local04 wcz
LR__0167
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local07
	mov	arg04, #2
	call	#__system___fmtpad
	mov	local08, result1
	cmps	local08, #0 wcz
 if_b	mov	result1, local08
 if_b	jmp	#LR__0170
	cmps	local07, #0 wcz
 if_be	jmp	#LR__0169
	mov	local09, local07
LR__0168
	mov	local10, local01
	rdlong	local11, local10
	add	local10, #4
	rdlong	local12, local10
	rdbyte	arg01, local03
	mov	local13, objptr
	mov	objptr, local11
	add	local03, #1
	call	local12
	mov	objptr, local13
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_b	jmp	#LR__0170
	add	local08, local14
	djnz	local09, #LR__0168
LR__0169
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local07
	mov	arg04, #1
	call	#__system___fmtpad
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_ae	add	local08, local14
 if_ae	mov	result1, local08
LR__0170
	mov	ptra, fp
	call	#popregs_
__system___fmtstr_ret
	ret

__system___fmtnum
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #120
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #4
	mov	local01, fp
	add	fp, #68
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #84
	rdlong	local01, fp
	shr	local01, #16
	and	local01, #63
	add	fp, #88
	wrlong	local01, fp
	sub	fp, #88
	rdlong	local01, fp
	and	local01, #255
	add	fp, #92
	wrlong	local01, fp
	sub	fp, #92
	rdlong	local01, fp
	shr	local01, #26
	and	local01, #3
	add	fp, #96
	wrlong	local01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #96
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0171
	add	fp, #96
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	sub	fp, #96
LR__0171
	add	fp, #100
	rdlong	local02, fp
	sub	fp, #100
	cmps	local02, #64 wcz
 if_a	jmp	#LR__0172
	add	fp, #100
	rdlong	local03, fp
	sub	fp, #100
	mov	local04, local03 wz
 if_ne	jmp	#LR__0173
LR__0172
	add	fp, #100
	wrlong	#64, fp
	sub	fp, #100
LR__0173
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #3 wz
 if_ne	jmp	#LR__0174
	add	fp, #104
	wrlong	#0, fp
	sub	fp, #104
	jmp	#LR__0176
LR__0174
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmps	local01, #0 wcz
 if_ae	jmp	#LR__0175
	add	fp, #104
	wrlong	#4, fp
	sub	fp, #92
	rdlong	local01, fp
	neg	local01, local01
	wrlong	local01, fp
	sub	fp, #12
LR__0175
LR__0176
	add	fp, #104
	rdlong	local01, fp wz
	sub	fp, #104
 if_e	jmp	#LR__0183
	add	fp, #92
	rdlong	local04, fp
	add	local04, #1
	wrlong	local04, fp
	add	fp, #4
	rdlong	local01, fp
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #100
	cmp	local01, local04 wz
 if_ne	jmp	#LR__0178
	add	fp, #96
	rdlong	local04, fp
	sub	local04, #1
	wrlong	local04, fp
	rdlong	local01, fp wz
	sub	fp, #96
 if_ne	jmp	#LR__0177
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #35
	call	#__system___fmtchar
	jmp	#LR__0188
LR__0177
LR__0178
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #2 wz
 if_ne	jmp	#LR__0179
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#32, local01
	jmp	#LR__0182
LR__0179
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #4 wz
 if_ne	jmp	#LR__0180
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#45, local01
	jmp	#LR__0181
LR__0180
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#43, local01
LR__0181
LR__0182
LR__0183
	add	fp, #88
	rdlong	arg01, fp
	sub	fp, #76
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #80
	rdlong	arg04, fp
	mov	local05, #0
	sub	fp, #88
	rdlong	local06, fp
	sub	fp, #8
	testbn	local06, #29 wz
 if_ne	mov	local05, #1
	mov	arg05, local05
	call	#__system___uitoa
	mov	local07, result1
	add	fp, #92
	rdlong	local01, fp
	add	local01, local07
	wrlong	local01, fp
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #100
	cmps	local01, local04 wcz
 if_be	jmp	#LR__0187
	loc	pa,	#(@LR__0185-@LR__0184)
	call	#FCACHE_LOAD_
LR__0184
	add	fp, #100
	rdlong	local01, fp
	mov	local04, local01
	sub	local04, #1
	wrlong	local04, fp
	sub	fp, #100
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0186
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#35, local01
	jmp	#LR__0184
LR__0185
LR__0186
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#0, local01
LR__0187
	add	fp, #20
	mov	arg03, fp
	sub	fp, #16
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#__system___fmtstr
LR__0188
	mov	ptra, fp
	call	#popregs_
__system___fmtnum_ret
	ret

__system____builtin_atoi
	mov	COUNT_, #15
	call	#pushregs_
__system____builtin_atoi_enter
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	mov	local04, #0
	loc	pa,	#(@LR__0190-@LR__0189)
	call	#FCACHE_LOAD_
LR__0189
	rdbyte	local05, local01
	cmp	local05, #32 wz
 if_e	add	local01, #1
 if_e	jmp	#LR__0189
LR__0190
	rdbyte	local06, local01
LR__0191
	cmp	local06, #45 wz
 if_e	jmp	#LR__0192
	cmp	local06, #43 wz
 if_ne	jmp	#LR__0193
LR__0192
	mov	local05, local01
	cmp	local06, #45 wz
	add	local01, #1
 if_e	mov	local05, #1
 if_e	sub	local05, local04
 if_e	mov	local04, local05
	rdbyte	local06, local01
	jmp	#LR__0191
LR__0193
	loc	pa,	#(@LR__0203-@LR__0194)
	call	#FCACHE_LOAD_
LR__0194
LR__0195
	mov	local05, local01
	mov	local07, local01
	add	local07, #1
	mov	local01, local07
	rdbyte	local06, local05
	cmp	local06, #95 wz
 if_e	jmp	#LR__0195
	cmp	local06, #48 wz
 if_e	jmp	#LR__0196
	cmp	local06, #38 wz
 if_ne	jmp	#LR__0197
LR__0196
	mov	local08, #0
	jmp	#LR__0202
LR__0197
	cmps	local06, #49 wcz
 if_b	jmp	#LR__0198
	cmps	local06, #57 wcz
 if_a	jmp	#LR__0198
	mov	local09, local06
	sub	local09, #48
	mov	local08, local09
	cmp	local02, #0 wz
 if_e	mov	local02, #10
	jmp	#LR__0201
LR__0198
	cmps	local02, #10 wcz
 if_be	jmp	#LR__0199
	cmps	local06, #97 wcz
 if_b	jmp	#LR__0199
	cmps	local06, #102 wcz
 if_a	jmp	#LR__0199
	sub	local06, #97
	mov	local10, local06
	mov	local11, #10
	add	local11, local10
	mov	local08, local11
	jmp	#LR__0200
LR__0199
	cmps	local02, #10 wcz
 if_be	jmp	#LR__0204
	cmps	local06, #65 wcz
 if_b	jmp	#LR__0204
	cmps	local06, #70 wcz
 if_a	jmp	#LR__0204
	sub	local06, #65
	mov	local12, local06
	mov	local13, #10
	add	local13, local12
	mov	local08, local13
LR__0200
LR__0201
LR__0202
	qmul	local02, local03
	getqx	local14
	mov	local15, local14
	add	local15, local08
	mov	local03, local15
	jmp	#LR__0194
LR__0203
LR__0204
	cmp	local02, #0 wz
 if_ne	jmp	#LR__0213
	cmp	local06, #120 wz
 if_e	jmp	#LR__0205
	cmp	local06, #104 wz
 if_e	jmp	#LR__0205
	cmp	local06, #88 wz
 if_e	jmp	#LR__0205
	cmp	local06, #72 wz
 if_ne	jmp	#LR__0206
LR__0205
	mov	arg01, local01
	mov	arg02, #16
	call	#__system____builtin_atoi
	mov	local03, result1
	jmp	#LR__0212
LR__0206
	cmp	local06, #98 wz
 if_e	jmp	#LR__0207
	cmp	local06, #66 wz
 if_ne	jmp	#LR__0208
LR__0207
	mov	arg01, local01
	mov	arg02, #2
	call	#__system____builtin_atoi
	mov	local03, result1
	jmp	#LR__0211
LR__0208
	cmp	local06, #111 wz
 if_e	jmp	#LR__0209
	cmp	local06, #79 wz
 if_ne	jmp	#LR__0210
LR__0209
	mov	arg01, local01
	mov	arg02, #8
	call	#__system____builtin_atoi
	mov	local03, result1
LR__0210
LR__0211
LR__0212
LR__0213
	cmp	local04, #0 wz
 if_ne	neg	local03, local03
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
__system____builtin_atoi_ret
	ret

__system___gc_ptrs
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, __heap_ptr
	mov	local02, local01
	add	local02, ##4088
	rdlong	local03, local01 wz
 if_ne	jmp	#LR__0214
	mov	local04, local02
	sub	local04, local01
	wrword	#1, local01
	mov	local05, local01
	add	local05, #2
	wrword	##27792, local05
	mov	local06, local01
	add	local06, #4
	wrword	#0, local06
	mov	local07, local01
	add	local07, #6
	wrword	#1, local07
	add	local01, #16
	abs	local03, local04 wc
	shr	local03, #4
 if_b	neg	local03, local03
	wrword	local03, local01
	mov	local08, local01
	add	local08, #2
	wrword	##27791, local08
	mov	local09, local01
	add	local09, #4
	wrword	#0, local09
	mov	local10, local01
	add	local10, #6
	wrword	#0, local10
	sub	local01, #16
LR__0214
	mov	result2, local02
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___gc_ptrs_ret
	ret

__system___gc_nextBlockPtr
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdword	local02, local01 wz
 if_ne	jmp	#LR__0215
	mov	arg01, ##@LR__0827
	call	#__system___gc_errmsg
	jmp	#LR__0216
LR__0215
	shl	local02, #4
	mov	result1, local01
	add	result1, local02
LR__0216
	mov	ptra, fp
	call	#popregs_
__system___gc_nextBlockPtr_ret
	ret

__system___gc_tryalloc
	mov	COUNT_, #27
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
	mov	local05, local03
	mov	local06, #0
	loc	pa,	#(@LR__0218-@LR__0217)
	call	#FCACHE_LOAD_
LR__0217
	mov	local07, local05
	add	local05, #6
	mov	local08, local05
	mov	local09, local03
	rdword	local10, local08
	mov	arg01, local09
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local11, result1
	mov	local05, local11 wz
 if_ne	mov	local09, local05
 if_ne	mov	local12, local09
 if_ne	rdword	local06, local12
	cmp	local05, #0 wz
 if_e	jmp	#LR__0219
	cmps	local05, local04 wcz
 if_ae	jmp	#LR__0219
	cmps	local01, local06 wcz
 if_a	jmp	#LR__0217
LR__0218
LR__0219
	cmp	local05, #0 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__0222
	mov	local13, local05
	add	local13, #6
	rdword	local14, local13
	cmps	local01, local06 wcz
 if_ae	jmp	#LR__0221
	mov	local15, local05
	wrword	local01, local15
	mov	local16, local01
	shl	local16, #4
	mov	local17, local05
	add	local17, local16
	mov	local18, local06
	sub	local18, local01
	mov	local19, local17
	wrword	local18, local19
	mov	local20, local17
	add	local20, #2
	wrword	##27791, local20
	mov	local21, local17
	add	local21, #4
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	wrword	result1, local21
	mov	local22, local17
	rdword	local09, local13
	add	local22, #6
	wrword	local09, local22
	mov	local23, local17
	mov	arg02, local23 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	mov	arg01, local17
	call	#__system___gc_nextBlockPtr
	mov	local24, result1 wz
 if_e	jmp	#LR__0220
	cmps	local24, local04 wcz
 if_ae	jmp	#LR__0220
	mov	local25, local24
	add	local25, #4
	mov	local09, local03
	mov	local10, local23
	mov	arg01, local09
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local11, result1
	wrword	local11, local25
LR__0220
LR__0221
	add	local07, #6
	wrword	local14, local07
	mov	local09, ##27776
	or	local09, local02
	mov	local26, local05
	add	local26, #2
	cogid	result1
	or	local09, result1
	wrword	local09, local26
	mov	local27, local03
	add	local27, #8
	rdword	local09, local27
	wrword	local09, local13
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	wrword	result1, local27
	add	local05, #8
	mov	result1, local05
	or	result1, ##1669332992
LR__0222
	mov	ptra, fp
	call	#popregs_
__system___gc_tryalloc_ret
	ret

__system___gc_errmsg
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
LR__0223
	rdbyte	local02, local01 wz
	add	local01, #1
 if_e	jmp	#LR__0224
	mov	arg01, local02
	call	#__system___tx
	jmp	#LR__0223
LR__0224
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system___gc_errmsg_ret
	ret

__system___gc_alloc_managed
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system___gc_doalloc
	mov	local02, result1 wz
 if_ne	jmp	#LR__0225
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0225
	mov	arg01, ##@LR__0828
	call	#__system___gc_errmsg
	jmp	#LR__0226
LR__0225
	mov	result1, local02
LR__0226
	mov	ptra, fp
	call	#popregs_
__system___gc_alloc_managed_ret
	ret

__system___gc_doalloc
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
 if_e	mov	result1, #0
 if_e	jmp	#LR__0234
	add	local01, #23
	andn	local01, #15
	shr	local01, #4
	add	ptr___system__dat__, #20
	mov	local03, ptr___system__dat__
	mov	arg01, local03
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local04, result1 wz
 if_ne	jmp	#LR__0227
	call	#__system___gc_docollect
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local04, result1
LR__0227
	wrlong	#0, local03
	cmp	local04, #0 wz
 if_e	jmp	#LR__0233
	shl	local01, #4
	sub	local01, #8
	abs	local05, local01 wc
	shr	local05, #2
 if_b	neg	local05, local05
	mov	local06, local05 wz
	mov	local07, local04
 if_e	jmp	#LR__0232
	loc	pa,	#(@LR__0230-@LR__0228)
	call	#FCACHE_LOAD_
LR__0228
	rep	@LR__0231, local06
LR__0229
	wrlong	#0, local07
	add	local07, #4
LR__0230
LR__0231
LR__0232
LR__0233
	mov	result1, local04
LR__0234
	mov	ptra, fp
	call	#popregs_
__system___gc_doalloc_ret
	ret

__system___gc_isvalidptr
	mov	_var01, arg03
	mov	_var02, _var01
	and	_var02, ##-1048576
	cmp	_var02, ##1669332992 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	sub	_var01, #8
	mov	_var03, _var01
	andn	_var03, ##-1048576
	cmps	_var03, arg01 wcz
 if_b	jmp	#LR__0235
	cmps	_var03, arg02 wcz
 if_b	jmp	#LR__0236
LR__0235
	mov	result1, #0
	jmp	#__system___gc_isvalidptr_ret
LR__0236
	mov	_var02, _var03
	xor	_var02, arg01
	and	_var02, #15 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	mov	_var04, _var03
	add	_var04, #2
	rdword	_var02, _var04
	and	_var02, ##65472
	cmp	_var02, ##27776 wz
 if_ne	mov	result1, #0
 if_e	mov	result1, _var03
__system___gc_isvalidptr_ret
	ret

__system___gc_free
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	arg01, result1
	mov	arg02, result2
	mov	arg03, local01
	call	#__system___gc_isvalidptr
	mov	local01, result1 wz
 if_e	jmp	#LR__0237
	add	ptr___system__dat__, #20
	mov	local02, ptr___system__dat__
	mov	arg01, local02
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	call	#__system___gc_dofree
	wrlong	#0, local02
LR__0237
	mov	ptra, fp
	call	#popregs_
__system___gc_free_ret
	ret

__system___gc_dofree
	mov	COUNT_, #26
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	local02, result2
	mov	local03, result1
	mov	local04, local01
	add	local04, #2
	wrword	##27791, local04
	mov	local05, local01
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	loc	pa,	#(@LR__0239-@LR__0238)
	call	#FCACHE_LOAD_
LR__0238
	add	local05, #4
	mov	local07, local05
	rdword	arg02, local07 wz
	mov	arg01, local03
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local05, result1 wz
 if_e	jmp	#LR__0240
	mov	arg01, local05
	mov	local08, #0
	add	arg01, #2
	rdword	local09, arg01
	cmp	local09, ##27791 wz
 if_e	neg	local08, #1
	mov	result1, local08
	mov	local10, result1 wz
 if_e	jmp	#LR__0238
LR__0239
LR__0240
	cmp	local05, #0 wz
 if_e	mov	local05, local03
	mov	local11, local05
	add	local11, #6
	mov	local12, local01
	rdword	local13, local11
	add	local12, #6
	wrword	local13, local12
	mov	arg02, local01 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	wrword	local14, local11
	cmp	local05, local03 wz
 if_e	jmp	#LR__0243
	mov	arg01, local05
	call	#__system___gc_nextBlockPtr
	cmp	result1, local01 wz
 if_ne	jmp	#LR__0242
	mov	local15, local05
	rdword	local16, local15
	mov	local17, local01
	rdword	local10, local17
	add	local16, local10
	wrword	local16, local15
	wrword	#0, local04
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	cmps	local06, local02 wcz
 if_ae	jmp	#LR__0241
	mov	local18, local06
	add	local18, #4
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	wrword	local14, local18
LR__0241
	rdword	local13, local12
	wrword	local13, local11
	wrword	#0, local12
	mov	local01, local05
LR__0242
LR__0243
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local19, result1 wz
 if_e	jmp	#LR__0245
	cmps	local19, local02 wcz
 if_ae	jmp	#LR__0245
	mov	arg01, local19
	mov	local08, #0
	add	arg01, #2
	rdword	local09, arg01
	cmp	local09, ##27791 wz
 if_e	neg	local08, #1
	mov	result1, local08 wz
 if_e	jmp	#LR__0245
	mov	local05, local01
	mov	local01, local19
	mov	local20, local05
	rdword	local21, local20
	mov	local22, local01
	rdword	local10, local22
	add	local21, local10
	wrword	local21, local20
	mov	local23, local01
	add	local23, #6
	mov	local24, local05
	rdword	local13, local23
	add	local24, #6
	wrword	local13, local24
	mov	local25, local01
	add	local25, #2
	wrword	#170, local25
	wrword	#0, local23
	mov	local13, local01
	mov	arg01, local13
	call	#__system___gc_nextBlockPtr
	mov	local10, result1
	mov	local06, local10 wz
 if_e	jmp	#LR__0244
	cmps	local06, local02 wcz
 if_ae	jmp	#LR__0244
	mov	local26, local06
	add	local26, #4
	mov	local13, local03
	mov	local10, local05
	mov	arg01, local13
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	wrword	local14, local26
LR__0244
LR__0245
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___gc_dofree_ret
	ret

__system___gc_docollect
	mov	COUNT_, #12
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result2
	mov	local02, result1
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
	cogid	result1
	mov	local04, result1
 if_e	jmp	#LR__0247
LR__0246
	cmps	local03, local01 wcz
 if_ae	jmp	#LR__0247
	mov	local05, local03
	add	local05, #2
	rdword	local06, local05
	andn	local06, #32
	wrword	local06, local05
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
 if_ne	jmp	#LR__0246
LR__0247
	mov	local07, #0
	mov	arg01, #0
	call	#__system____topofstack
	mov	local08, result1
	mov	arg01, local07
	mov	arg02, local08
	call	#__system___gc_markhub
	call	#__system___gc_markcog
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local09, result1 wz
 if_ne	jmp	#LR__0248
	mov	arg01, ##@LR__0829
	call	#__system___gc_errmsg
	jmp	#LR__0254
LR__0248
LR__0249
	mov	local03, local09
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local09, result1
	mov	local10, local03
	add	local10, #2
	rdword	local11, local10
	test	local11, #32 wz
 if_ne	jmp	#LR__0252
	mov	local12, local11
	and	local12, #16 wz
 if_ne	jmp	#LR__0252
	mov	local07, local11
	and	local07, #15
	mov	local11, local07
	cmp	local11, local04 wz
 if_e	jmp	#LR__0250
	cmp	local11, #14 wz
 if_ne	jmp	#LR__0251
LR__0250
	mov	local07, local03
	mov	arg01, local07
	call	#__system___gc_dofree
	mov	local12, result1
	mov	local09, local12
LR__0251
LR__0252
	cmp	local09, #0 wz
 if_e	jmp	#LR__0253
	cmps	local09, local01 wcz
 if_b	jmp	#LR__0249
LR__0253
LR__0254
	mov	ptra, fp
	call	#popregs_
__system___gc_docollect_ret
	ret

__system___gc_markhub
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
LR__0255
	cmps	local01, local02 wcz
 if_ae	jmp	#LR__0256
	rdlong	arg03, local01
	add	local01, #4
	mov	arg01, local03
	mov	arg02, local04
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0255
	mov	arg01, local05
	mov	local06, #0
	add	arg01, #2
	rdword	local07, arg01
	cmp	local07, ##27791 wz
 if_e	neg	local06, #1
	mov	result1, local06
	mov	local08, result1 wz
 if_ne	jmp	#LR__0255
	mov	local09, local05
	add	local09, #2
	rdword	local10, local09
	andn	local10, #15
	or	local10, #46
	wrword	local10, local09
	jmp	#LR__0255
LR__0256
	mov	ptra, fp
	call	#popregs_
__system___gc_markhub_ret
	ret

__system___gc_markcog
	mov	COUNT_, #6
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result1
	mov	local02, result2
	mov	local03, #0
LR__0257
	mov	local04, #496
	sub	local04, local03
	add	local04, #496
	'.live	local04
	alts	local04, #0
	mov	local05, local04
	mov	arg02, local02
	mov	arg01, local01
	mov	arg03, local05
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0258
	add	local05, #2
	rdword	local06, local05
	or	local06, #32
	wrword	local06, local05
LR__0258
	add	local03, #1
	cmps	local03, #496 wcz
 if_b	jmp	#LR__0257
	mov	ptra, fp
	call	#popregs_
__system___gc_markcog_ret
	ret

__system___openraw
	mov	COUNT_, #16
	call	#pushregs_
	add	ptra, #84
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #12
	wrlong	#4, fp
	sub	fp, #24
	rdlong	local01, fp
	add	fp, #28
	wrlong	local01, fp
	add	ptr___system__dat__, #312
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, #312
	add	fp, #4
	wrlong	result1, fp
	mov	arg01, result1
	sub	fp, #28
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #0
	call	#__system____getvfsforfile
	mov	local02, result1
	add	fp, #24
	wrlong	local02, fp
	sub	fp, #24
	mov	local01, local02 wz
 if_e	jmp	#LR__0259
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	rdlong	local04, local03 wz
 if_ne	jmp	#LR__0260
LR__0259
	add	ptr___system__dat__, ##572
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0278
LR__0260
	add	fp, #32
	rdlong	arg01, fp
	sub	fp, #32
	mov	arg02, #0
	mov	arg03, #48
	mov	local05, arg01
	call	#\builtin_bytefill_
	mov	result1, local05
	add	fp, #24
	rdlong	local04, fp
	rdlong	local01, local04
	rdlong	local02, local01
	add	local01, #4
	rdlong	local06, local01
	mov	local07, local06
	add	fp, #8
	rdlong	local08, fp
	mov	local09, local08
	add	fp, #4
	rdlong	local10, fp
	mov	local11, local10
	sub	fp, #24
	rdlong	local12, fp
	sub	fp, #12
	mov	local13, local12
	mov	arg01, local09
	mov	arg02, local11
	mov	arg03, local13
	mov	local14, objptr
	mov	objptr, local02
	call	local07
	mov	objptr, local14
	mov	local15, result1
	add	fp, #20
	wrlong	local15, fp
	rdlong	local01, fp wz
	sub	fp, #20
 if_e	jmp	#LR__0261
	add	fp, #12
	rdlong	local07, fp
	sub	fp, #12
	test	local07, #4 wz
 if_e	jmp	#LR__0261
	add	fp, #24
	rdlong	local04, fp
	mov	local03, local04
	add	local03, #4
	rdlong	local06, local03
	sub	local03, #4
	mov	local01, local06
	rdlong	local02, local01
	add	local01, #4
	rdlong	local09, local01
	sub	local01, #4
	mov	local07, local09
	add	fp, #8
	rdlong	local11, fp
	mov	local08, local11
	add	fp, #4
	rdlong	local13, fp
	mov	local10, local13
	sub	fp, #20
	rdlong	local14, fp
	sub	fp, #16
	mov	local12, local14
	mov	arg01, local08
	mov	arg02, local10
	mov	arg03, local12
	mov	local15, objptr
	mov	objptr, local02
	call	local07
	mov	objptr, local15
	mov	local16, result1
	add	fp, #20
	wrlong	local16, fp
	sub	fp, #20
LR__0261
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #20
 if_ne	jmp	#LR__0277
	add	fp, #12
	rdlong	local01, fp
	and	local01, #3
	add	fp, #28
	wrlong	local01, fp
	rdlong	local01, fp wz
	sub	fp, #40
 if_e	jmp	#LR__0262
	add	fp, #28
	rdlong	local01, fp
	or	local01, #2
	wrlong	local01, fp
	sub	fp, #28
LR__0262
	add	fp, #40
	rdlong	local01, fp
	sub	fp, #40
	cmp	local01, #1 wz
 if_e	jmp	#LR__0263
	add	fp, #28
	rdlong	local01, fp
	or	local01, #1
	wrlong	local01, fp
	sub	fp, #28
LR__0263
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	test	local01, #32 wz
 if_e	jmp	#LR__0264
	add	fp, #28
	rdlong	local01, fp
	or	local01, #192
	wrlong	local01, fp
	sub	fp, #28
LR__0264
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #4
	rdlong	local07, fp
	add	local01, #8
	wrlong	local07, local01
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #16
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0265
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #12
	rdlong	local04, local07
	add	local01, #16
	wrlong	local04, local01
LR__0265
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #20
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0266
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #16
	rdlong	local04, local07
	add	local01, #20
	wrlong	local04, local01
LR__0266
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #32
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0267
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #8
	rdlong	local04, local07
	add	local01, #32
	wrlong	local04, local01
LR__0267
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #36
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0268
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #24
	rdlong	local04, local07
	add	local01, #36
	wrlong	local04, local01
LR__0268
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #44
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0269
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #20
	rdlong	local04, local07
	add	local01, #44
	wrlong	local04, local01
LR__0269
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #24
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0272
	add	fp, #48
	mov	arg03, fp
	sub	fp, #16
	rdlong	local03, fp
	add	local03, #36
	rdlong	local01, local03
	rdlong	local02, local01
	add	local01, #4
	rdlong	local07, local01
	rdlong	arg01, fp
	sub	fp, #32
	mov	arg02, #256
	mov	local12, objptr
	mov	objptr, local02
	call	local07
	mov	objptr, local12
	mov	local14, result1
	add	fp, #44
	wrlong	local14, fp
	rdlong	local01, fp wz
	sub	fp, #44
 if_ne	jmp	#LR__0270
	add	fp, #48
	rdlong	local07, fp
	sub	fp, #48
	test	local07, #2 wz
 if_e	jmp	#LR__0270
	mov	arg02, ptr___system____default_putc_terminal_
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local04, result1
	add	local01, #24
	wrlong	local04, local01
	jmp	#LR__0271
LR__0270
	mov	arg02, ptr___system____default_putc_
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	mov	arg01, objptr
	call	#__system___make_methodptr
	add	local01, #24
	wrlong	result1, local01
LR__0271
LR__0272
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #28
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0273
	mov	arg02, ptr___system____default_getc_
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	mov	arg01, objptr
	call	#__system___make_methodptr
	add	local01, #28
	wrlong	result1, local01
LR__0273
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	add	local01, #40
	rdlong	local07, local01 wz
 if_ne	jmp	#LR__0276
	add	fp, #24
	rdlong	local01, fp
	sub	fp, #24
	add	local01, #28
	rdlong	local07, local01 wz
 if_e	jmp	#LR__0274
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #28
	rdlong	local04, local07
	add	local01, #40
	wrlong	local04, local01
	jmp	#LR__0275
LR__0274
	mov	arg02, ptr___system____default_flush_
	add	fp, #32
	rdlong	local01, fp
	sub	fp, #32
	mov	arg01, objptr
	call	#__system___make_methodptr
	add	local01, #40
	wrlong	result1, local01
LR__0275
LR__0276
LR__0277
	add	fp, #20
	rdlong	local01, fp wz
 if_e	add	ptr___system__dat__, ##572
 if_e	wrlong	#0, ptr___system__dat__
 if_e	sub	ptr___system__dat__, ##572
	rdlong	result1, fp
	sub	fp, #20
LR__0278
	mov	ptra, fp
	call	#popregs_
__system___openraw_ret
	ret

__system___closeraw
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	local03, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0279
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0282
LR__0279
	add	local01, #40
	rdlong	local03, local01 wz
	sub	local01, #40
 if_e	jmp	#LR__0280
	add	local01, #40
	rdlong	local03, local01
	sub	local01, #40
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
LR__0280
	add	local01, #32
	rdlong	local03, local01 wz
	sub	local01, #32
 if_e	jmp	#LR__0281
	add	local01, #32
	rdlong	local03, local01
	sub	local01, #32
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	local02, result1
LR__0281
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	mov	result1, local02
LR__0282
	mov	ptra, fp
	call	#popregs_
__system___closeraw_ret
	ret

__system____default_getc
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	sub	local02, #8
	test	local03, #2 wz
 if_e	jmp	#LR__0283
	mov	arg01, local01
	call	#__system____default_flush
LR__0283
	add	local02, #8
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local04, local02 wz
 if_ne	jmp	#LR__0284
	mov	arg01, local01
	call	#__system____default_filbuf
	mov	local04, result1
LR__0284
	cmps	local04, #0 wcz
 if_be	neg	result1, #1
 if_be	jmp	#LR__0285
	sub	local04, #1
	wrlong	local04, local02
	add	local02, #4
	rdlong	local05, local02
	rdbyte	result1, local05
	add	local05, #1
	wrlong	local05, local02
LR__0285
	mov	ptra, fp
	call	#popregs_
__system____default_getc_ret
	ret

__system____default_putc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0286
	mov	arg01, local02
	call	#__system____default_flush
LR__0286
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	add	local05, #1
	sub	local03, #12
	wrlong	local05, local03
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0287
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0287
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_ret
	ret

__system____default_putc_terminal
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0288
	mov	arg01, local02
	call	#__system____default_flush
LR__0288
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	sub	local03, #12
	add	local05, #1
	wrlong	local05, local03
	cmp	local01, #10 wz
 if_e	jmp	#LR__0289
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0290
LR__0289
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0290
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_terminal_ret
	ret

__system____default_flush
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #2 wz
 if_e	jmp	#LR__0293
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0295
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #64 wz
 if_e	jmp	#LR__0292
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #128 wz
 if_e	jmp	#LR__0291
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local01, #8
	rdlong	local04, local01
	andn	local04, #128
	wrlong	local04, local01
	sub	local01, #8
LR__0291
LR__0292
	add	local02, #12
	mov	arg02, local02
	sub	local02, #12
	add	local01, #20
	rdlong	local04, local01
	sub	local01, #20
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local01
	mov	arg03, local03
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	jmp	#LR__0295
LR__0293
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0294
	cmp	local03, #0 wz
 if_e	jmp	#LR__0294
	add	local01, #44
	rdlong	local08, local01
	sub	local01, #44
	mov	local04, local08
	rdlong	local05, local04
	add	local04, #4
	rdlong	local09, local04
	sub	local04, #4
	mov	local06, local09
	mov	local10, local01
	mov	local11, local03
	neg	local11, local11
	mov	local12, local11
	mov	local07, #1
	mov	arg01, local10
	mov	arg02, local12
	mov	arg03, #1
	mov	local13, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local13
	mov	local14, result1
	mov	local15, local14
	cmps	local15, #0 wcz
 if_ae	mov	local15, local03
LR__0294
LR__0295
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____default_flush_ret
	ret

__system__open
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	add	ptr___system__dat__, ##576
	mov	local04, ptr___system__dat__
	mov	local05, #0
	sub	ptr___system__dat__, ##576
	loc	pa,	#(@LR__0297-@LR__0296)
	call	#FCACHE_LOAD_
LR__0296
	mov	local06, local05
	shl	local06, #1
	add	local06, local05
	shl	local06, #4
	add	local06, local04
	add	local06, #8
	rdlong	local07, local06 wz
 if_e	jmp	#LR__0298
	add	local05, #1
	cmps	local05, #10 wcz
 if_b	jmp	#LR__0296
LR__0297
LR__0298
	cmp	local05, #10 wz
 if_ne	jmp	#LR__0299
	add	ptr___system__dat__, ##572
	wrlong	#11, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0300
LR__0299
	mov	arg01, local05
	shl	arg01, #1
	add	arg01, local05
	shl	arg01, #4
	add	arg01, local04
	mov	arg02, local01
	mov	arg03, local02
	mov	arg04, local03
	call	#__system___openraw
	mov	local08, result1 wz
 if_e	mov	local08, local05
	mov	result1, local08
LR__0300
	mov	ptra, fp
	call	#popregs_
__system__open_ret
	ret

__system__write
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0301
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0302
LR__0301
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, ##576
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, ##576
	call	#__system___vfswrite
LR__0302
	mov	ptra, fp
	call	#popregs_
__system__write_ret
	ret

__system__read
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0303
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0304
LR__0303
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, ##576
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, ##576
	call	#__system___vfsread
LR__0304
	mov	ptra, fp
	call	#popregs_
__system__read_ret
	ret

__system__close
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0305
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0306
LR__0305
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, ##576
	add	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##576
	call	#__system___closeraw
LR__0306
	mov	ptra, fp
	call	#popregs_
__system__close_ret
	ret

__system__lseek
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0307
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0311
LR__0307
	mov	local04, local01
	shl	local04, #1
	add	local04, local01
	shl	local04, #4
	add	ptr___system__dat__, ##576
	add	local04, ptr___system__dat__
	add	local04, #44
	rdlong	local05, local04 wz
	sub	local04, #44
	sub	ptr___system__dat__, ##576
 if_ne	jmp	#LR__0308
	add	ptr___system__dat__, ##572
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0311
LR__0308
	add	local04, #8
	rdlong	local05, local04
	sub	local04, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0309
	add	local04, #8
	rdlong	local05, local04
	or	local05, #128
	wrlong	local05, local04
	sub	local04, #8
LR__0309
	add	local04, #44
	rdlong	local05, local04
	sub	local04, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local03
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0310
	neg	arg01, local09 wz
	add	ptr___system__dat__, ##572
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##572
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0311
LR__0310
	mov	result1, local09
LR__0311
	mov	ptra, fp
	call	#popregs_
__system__lseek_ret
	ret

__system__ioctl
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system____getftab
	mov	local03, result1 wz
 if_ne	jmp	#LR__0312
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0314
LR__0312
	add	local03, #36
	rdlong	local04, local03
	sub	local03, #36
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local03
	mov	arg02, local01
	mov	arg03, local02
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	mov	local08, result1 wz
 if_e	jmp	#LR__0313
	add	ptr___system__dat__, ##572
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	cmp	local08, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0314
LR__0313
	mov	result1, #0
LR__0314
	mov	ptra, fp
	call	#popregs_
__system__ioctl_ret
	ret

__system____getftab
	cmp	arg01, #10 wcz
 if_ae	mov	result1, #0
 if_ae	jmp	#__system____getftab_ret
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr___system__dat__, ##576
	add	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##576
__system____getftab_ret
	ret

__system__strncpy
	mov	_var01, arg01
LR__0315
	sub	arg03, #1
	cmps	arg03, #0 wcz
 if_b	jmp	#LR__0316
	rdbyte	_var02, arg02
	wrbyte	_var02, _var01
	add	arg02, #1
	rdbyte	_var03, _var01 wz
	add	_var01, #1
 if_ne	jmp	#LR__0315
LR__0316
	loc	pa,	#(@LR__0318-@LR__0317)
	call	#FCACHE_LOAD_
LR__0317
	sub	arg03, #1
	cmps	arg03, #0 wcz
 if_ae	wrbyte	#0, _var01
 if_ae	add	_var01, #1
 if_ae	jmp	#LR__0317
LR__0318
	mov	result1, arg01
__system__strncpy_ret
	ret

__system__strncat
	mov	_var01, arg01
	mov	_var02, arg02
	mov	_var03, arg03
	mov	_var04, _var02 wz
 if_e	jmp	#LR__0323
	cmp	_var03, #0 wcz
 if_be	jmp	#LR__0323
	mov	_var05, _var01
	loc	pa,	#(@LR__0321-@LR__0319)
	call	#FCACHE_LOAD_
LR__0319
	rdbyte	_var06, _var05 wz
 if_ne	add	_var05, #1
 if_ne	jmp	#LR__0319
	mov	_var07, _var03
LR__0320
	mov	_var08, _var04
	mov	_var09, _var04
	add	_var09, #1
	mov	_var04, _var09
	rdbyte	_var10, _var08
	mov	_var06, _var10
	zerox	_var06, #7 wz
 if_e	jmp	#LR__0322
	mov	_var11, _var07
	sub	_var11, #1
	mov	_var07, _var11
	cmps	_var07, #0 wcz
 if_ae	wrbyte	_var10, _var05
 if_ae	add	_var05, #1
 if_ae	jmp	#LR__0320
LR__0321
LR__0322
	mov	_var06, #0
	wrbyte	#0, _var05
LR__0323
	mov	result1, _var01
__system__strncat_ret
	ret

__system__strncmp
	mov	_var01, arg01 wz
	mov	_var02, arg02
	mov	_var03, arg03
 if_ne	jmp	#LR__0324
	cmp	_var02, #0 wz
 if_ne	neg	_var04, #1
 if_e	mov	_var04, #0
	mov	result1, _var04
	jmp	#__system__strncmp_ret
LR__0324
	cmp	_var02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#__system__strncmp_ret
	mov	_var05, _var03
	loc	pa,	#(@LR__0326-@LR__0325)
	call	#FCACHE_LOAD_
LR__0325
	rdbyte	_var06, _var01
	mov	_var07, _var02
	mov	_var08, _var02
	add	_var08, #1
	mov	_var02, _var08
	rdbyte	_var09, _var07
	mov	_var04, _var05
	sub	_var04, #1
	mov	_var05, _var04
	cmps	_var05, #0 wcz
	add	_var01, #1
 if_b	jmp	#LR__0327
	cmp	_var06, #0 wz
 if_e	jmp	#LR__0327
	cmp	_var06, _var09 wz
 if_e	jmp	#LR__0325
LR__0326
LR__0327
	cmps	_var05, #0 wcz
 if_b	mov	result1, #0
 if_b	jmp	#__system__strncmp_ret
	cmp	_var06, _var09 wz
 if_e	mov	result1, #0
 if_e	jmp	#__system__strncmp_ret
	cmp	_var06, #0 wz
 if_e	neg	result1, #1
 if_e	jmp	#__system__strncmp_ret
	cmp	_var09, #0 wz
 if_e	mov	result1, #1
 if_ne	mov	result1, _var06
 if_ne	sub	result1, _var09
__system__strncmp_ret
	ret

__system___strrev
	rdbyte	_var01, arg01 wz
 if_e	jmp	#__system___strrev_ret
	mov	_var02, arg01
	loc	pa,	#(@LR__0329-@LR__0328)
	call	#FCACHE_LOAD_
LR__0328
	rdbyte	_var01, _var02 wz
 if_ne	add	_var02, #1
 if_ne	jmp	#LR__0328
LR__0329
	sub	_var02, #1
LR__0330
	cmps	_var02, arg01 wcz
 if_be	jmp	#LR__0331
	rdbyte	_var03, arg01
	rdbyte	_var04, _var02
	wrbyte	_var04, arg01
	wrbyte	_var03, _var02
	add	arg01, #1
	sub	_var02, #1
	jmp	#LR__0330
LR__0331
__system___strrev_ret
	ret

__system___fmtpad
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg04
	getbyte	local04, local02, #1
	shr	local02, #22
	and	local02, #3 wz
	mov	local05, #0
 if_e	mov	local02, #1
	test	local02, local03 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0335
	sub	local04, arg03
	mov	local06, local04
	cmps	local06, #0 wcz
 if_be	mov	result1, #0
 if_be	jmp	#LR__0335
	cmp	local02, #3 wz
 if_ne	jmp	#LR__0332
	cmp	local03, #1 wz
	wrz	local07
	add	local06, local07
	abs	local06, local06 wc
	shr	local06, #1
 if_b	neg	local06, local06
LR__0332
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0334
	mov	local08, local06
LR__0333
	mov	local09, local01
	rdlong	local07, local09
	add	local09, #4
	rdlong	local10, local09
	mov	arg01, #32
	mov	local11, objptr
	mov	objptr, local07
	call	local10
	mov	objptr, local11
	mov	local12, result1
	cmps	local12, #0 wcz
 if_b	mov	result1, local12
 if_b	jmp	#LR__0335
	add	local05, local12
	djnz	local08, #LR__0333
LR__0334
	mov	result1, local05
LR__0335
	mov	ptra, fp
	call	#popregs_
__system___fmtpad_ret
	ret

__system___uitoa
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05 wz
	mov	local06, local01
	mov	local07, #0
 if_ne	mov	local08, #55
 if_e	mov	local08, #87
LR__0336
	mov	muldiva_, local02
	mov	muldivb_, local03
	call	#unsdivide_
	mov	local09, muldiva_
	cmp	local09, #10 wcz
 if_b	add	local09, #48
 if_ae	add	local09, local08
	wrbyte	local09, local06
	mov	muldiva_, local02
	mov	muldivb_, local03
	add	local06, #1
	call	#unsdivide_
	mov	local02, muldivb_ wz
	add	local07, #1
 if_ne	jmp	#LR__0336
	cmp	local07, local04 wcz
 if_b	jmp	#LR__0336
	wrbyte	#0, local06
	mov	arg01, local01
	call	#__system___strrev
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___uitoa_ret
	ret

__system___gettxfunc
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0337
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0338
LR__0337
	mov	result1, #0
	jmp	#LR__0339
LR__0338
	mov	arg01, local01
	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
	call	#__system___make_methodptr
LR__0339
	mov	ptra, fp
	call	#popregs_
__system___gettxfunc_ret
	ret

__system___getrxfunc
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0340
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0341
LR__0340
	mov	result1, #0
	jmp	#LR__0342
LR__0341
	mov	arg01, local01
	mov	arg02, ptr___struct__s_vfs_file_t_getchar_
	call	#__system___make_methodptr
LR__0342
	mov	ptra, fp
	call	#popregs_
__system___getrxfunc_ret
	ret

__system___getiolock_0125
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0343
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0344
LR__0343
	add	ptr___system__dat__, ##568
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##568
	jmp	#LR__0345
LR__0344
	add	local01, #12
	mov	result1, local01
LR__0345
	mov	ptra, fp
	call	#popregs_
__system___getiolock_0125_ret
	ret

__system___rxtxioctl_0150
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	cmp	local01, #256 wz
 if_e	jmp	#LR__0346
	cmp	local01, #257 wz
 if_e	jmp	#LR__0347
	jmp	#LR__0348
LR__0346
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
	mov	result1, #0
	jmp	#LR__0349
LR__0347
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	result1, #0
	jmp	#LR__0349
LR__0348
	add	ptr___system__dat__, ##572
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
LR__0349
	mov	ptra, fp
	call	#popregs_
__system___rxtxioctl_0150_ret
	ret

__system____dummy_flush_0151
	mov	result1, #0
__system____dummy_flush_0151_ret
	ret

__system___vfswrite
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #2 wz
 if_ne	jmp	#LR__0350
	add	ptr___system__dat__, ##572
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0358
LR__0350
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0352
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #128 wz
 if_e	jmp	#LR__0351
	add	local01, #44
	rdlong	local05, local01
	sub	local01, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	add	local01, #8
	rdlong	local05, local01
	andn	local05, #128
	wrlong	local05, local01
	sub	local01, #8
LR__0351
LR__0352
	add	local01, #20
	rdlong	local05, local01 wz
	sub	local01, #20
 if_e	jmp	#LR__0354
	add	local01, #20
	rdlong	local05, local01
	sub	local01, #20
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg02, local02
	mov	arg03, local03
	mov	arg01, local01
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0353
	add	local01, #8
	rdlong	local05, local01
	or	local05, #32
	wrlong	local05, local01
	add	ptr___system__dat__, ##572
	wrlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	cmp	local09, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0358
LR__0353
	mov	result1, local09
	jmp	#LR__0358
LR__0354
	add	local01, #24
	rdlong	local10, local01 wz
	sub	local01, #24
 if_ne	jmp	#LR__0355
	add	ptr___system__dat__, ##572
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0358
LR__0355
	mov	local09, #0
LR__0356
	cmp	local03, #0 wcz
 if_be	jmp	#LR__0357
	mov	local05, local10
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	rdbyte	arg01, local04
	mov	arg02, local01
	mov	local11, objptr
	mov	objptr, local06
	add	local04, #1
	call	local07
	mov	objptr, local11
	add	local09, result1
	sub	local03, #1
	jmp	#LR__0356
LR__0357
	mov	result1, local09
LR__0358
	mov	ptra, fp
	call	#popregs_
__system___vfswrite_ret
	ret

__system___vfsread
	mov	COUNT_, #15
	call	#pushregs_
	add	ptra, #44
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #8
	rdlong	local01, local02
	test	local01, #1 wz
 if_ne	jmp	#LR__0359
	add	ptr___system__dat__, ##572
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0367
LR__0359
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0361
	add	fp, #4
	rdlong	local04, fp
	add	local04, #16
	rdlong	local01, local04
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	mov	local05, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local05
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmps	result1, #0 wcz
 if_ae	jmp	#LR__0360
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #8
	rdlong	local03, local04
	or	local03, #32
	add	local01, #8
	wrlong	local03, local01
	add	fp, #12
	rdlong	arg01, fp wz
	sub	fp, #16
	add	ptr___system__dat__, ##572
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##572
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0367
LR__0360
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	jmp	#LR__0367
LR__0361
	add	fp, #4
	rdlong	local01, fp
	add	local01, #28
	rdlong	local03, local01
	add	fp, #20
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__0362
	add	ptr___system__dat__, ##572
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0367
LR__0362
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #36
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0364
	add	fp, #36
	mov	local06, fp
	sub	fp, #32
	rdlong	local07, fp
	mov	local04, local07
	add	local04, #36
	rdlong	local08, local04
	mov	local01, local08
	rdlong	local02, local01
	add	local01, #4
	rdlong	local09, local01
	mov	local03, local09
	mov	local10, local07
	sub	fp, #4
	mov	local11, local10
	mov	local12, #256
	mov	local13, local06
	mov	arg01, local11
	mov	arg02, #256
	mov	arg03, local13
	mov	local14, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local14
	mov	local15, result1
	add	fp, #16
	wrlong	local15, fp
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0363
	add	fp, #36
	rdlong	local04, fp
	sub	fp, #36
	mov	local03, local04
	and	local03, #2 wz
 if_e	jmp	#LR__0363
	mov	local01, #1
	add	fp, #32
	wrlong	#1, fp
	sub	fp, #32
LR__0363
LR__0364
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
LR__0365
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #0 wcz
 if_be	jmp	#LR__0366
	add	fp, #24
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #4
	mov	local11, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local11
	mov	local10, result1
	add	fp, #20
	wrlong	local10, fp
	sub	fp, #20
	cmps	local10, #0 wcz
 if_b	jmp	#LR__0366
	add	fp, #28
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #8
	rdlong	local07, fp
	wrbyte	local07, local01
	sub	fp, #4
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #32
 if_e	jmp	#LR__0365
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, #10 wz
 if_ne	jmp	#LR__0365
LR__0366
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0367
	mov	ptra, fp
	call	#popregs_
__system___vfsread_ret
	ret

__system____default_filbuf
	mov	COUNT_, #7
	call	#pushregs_
	rdlong	local01, arg01
	add	local01, #12
	mov	arg02, local01
	sub	local01, #12
	add	arg01, #16
	rdlong	local02, arg01
	sub	arg01, #16
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	decod	arg03, #10
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmps	local06, #0 wcz
 if_b	neg	result1, #1
 if_b	jmp	#LR__0368
	wrlong	local06, local01
	add	local01, #12
	mov	local07, local01
	sub	local01, #8
	wrlong	local07, local01
	add	local01, #4
	rdlong	local02, local01
	or	local02, #1
	wrlong	local02, local01
	mov	result1, local06
LR__0368
	mov	ptra, fp
	call	#popregs_
__system____default_filbuf_ret
	ret

_ff_cc_disk_initialize
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrbyte	arg01, fp
	add	ptr__ff_cc_dat__, #368
	rdlong	local01, ptr__ff_cc_dat__
	add	fp, #28
	wrlong	local01, fp
	sub	ptr__ff_cc_dat__, #4
	rdlong	local01, ptr__ff_cc_dat__
	add	fp, #4
	wrlong	local01, fp
	add	ptr__ff_cc_dat__, #8
	rdlong	local01, ptr__ff_cc_dat__
	add	fp, #4
	wrlong	local01, fp
	add	ptr__ff_cc_dat__, #4
	rdlong	local01, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #376
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #40
	rdbyte	local01, fp wz
	sub	fp, #4
' #line 420 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
'             return RES_NOTRDY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0382
	mov	arg01, ##10000
	call	#__system___waitus
	add	fp, #32
	rdlong	arg01, fp
	dirh	arg01
	drvh	arg01
	waitx	#16
	add	fp, #4
	rdlong	arg01, fp
	dirh	arg01
	drvl	arg01
	waitx	#16
	add	fp, #4
	rdlong	arg01, fp
	dirh	arg01
	add	fp, #4
	rdlong	arg01, fp
	fltl	arg01
'         }
' 
' 	dly_us(10000);
' 	_dirh(PIN_SS) ;  (_pinh(PIN_SS), (_waitx(16)) ) ;
' 	_dirh(PIN_CLK) ;  (_pinl(PIN_CLK), (_waitx(16)) ) ;
' 	_dirh(PIN_DI) ;
' 	_fltl(PIN_DO) ;
' 
' 	for (n = 100; n; n--) rcvr_mmc(buf, 1);
	sub	fp, #36
	wrbyte	#100, fp
	sub	fp, #8
LR__0369
	add	fp, #8
	rdbyte	local02, fp wz
	sub	fp, #8
 if_e	jmp	#LR__0370
	add	fp, #20
	mov	local03, fp
	mov	arg01, local03
	mov	arg02, #1
	sub	fp, #20
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #8
	rdbyte	local04, fp
	rdbyte	local05, fp
	mov	local06, local05
	sub	local06, #1
	wrbyte	local06, fp
	sub	fp, #8
	jmp	#LR__0369
LR__0370
	add	fp, #12
	wrbyte	#0, fp
	sub	fp, #12
	mov	arg01, #0
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
	mov	local01, result1
	zerox	local01, #7
	cmp	local01, #1 wz
 if_ne	jmp	#LR__0381
	mov	arg01, #8
	mov	arg02, #426
	call	#_ff_cc_send_cmd_0646
	mov	local01, result1
	zerox	local01, #7
	cmp	local01, #1 wz
 if_ne	jmp	#LR__0373
	add	fp, #20
	mov	local07, fp
	mov	arg01, local07
	mov	arg02, #4
	sub	fp, #20
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #22
	rdbyte	local01, fp
	sub	fp, #22
	zerox	local01, #7
	cmp	local01, #1 wz
 if_ne	jmp	#LR__0380
	add	fp, #23
	rdbyte	local08, fp
	sub	fp, #23
	zerox	local08, #7
	cmp	local08, #170 wz
 if_ne	jmp	#LR__0380
' 				for (tmr = 1000; tmr; tmr--) {
	add	fp, #24
	wrlong	##1000, fp
	sub	fp, #24
LR__0371
	add	fp, #24
	rdlong	local08, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0372
	mov	arg01, #169
	decod	arg02, #30
	call	#_ff_cc_send_cmd_0646
	mov	local09, result1
	zerox	local09, #7 wz
 if_e	jmp	#LR__0372
	mov	arg01, ##1000
	call	#__system___waitus
	add	fp, #24
	rdlong	local06, fp
	sub	local06, #1
	wrlong	local06, fp
	sub	fp, #24
	jmp	#LR__0371
LR__0372
	add	fp, #24
	rdlong	local02, fp
	sub	fp, #24
	mov	local01, local02 wz
 if_e	jmp	#LR__0380
	mov	arg01, #58
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
	mov	local08, result1
	zerox	local08, #7 wz
 if_ne	jmp	#LR__0380
	mov	arg01, local07
	mov	arg02, #4
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #20
	rdbyte	local10, fp
	test	local10, #64 wz
 if_ne	mov	local01, #12
 if_e	mov	local01, #4
	sub	fp, #8
	wrbyte	local01, fp
	sub	fp, #12
	jmp	#LR__0380
LR__0373
	mov	arg01, #169
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
	mov	local01, result1
	zerox	local01, #7
	cmp	local01, #1 wcz
 if_a	jmp	#LR__0374
	add	fp, #12
	wrbyte	#2, fp
	add	fp, #4
	wrbyte	#169, fp
	sub	fp, #16
	jmp	#LR__0375
LR__0374
	add	fp, #12
	wrbyte	#1, fp
	add	fp, #4
	wrbyte	#1, fp
	sub	fp, #16
LR__0375
' 				ty =  0x01 ; cmd =  (1) ;
' 			}
' 			for (tmr = 1000; tmr; tmr--) {
	add	fp, #24
	wrlong	##1000, fp
	sub	fp, #24
LR__0376
	add	fp, #24
	rdlong	local02, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0377
	add	fp, #16
	rdbyte	arg01, fp
	sub	fp, #16
	mov	local05, #0
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
	mov	local11, result1
	mov	local09, local11
	zerox	local09, #7 wz
 if_e	jmp	#LR__0377
	mov	arg01, ##1000
	call	#__system___waitus
	add	fp, #24
	rdlong	local04, fp
	mov	local05, local04
	mov	local06, local05
	sub	local06, #1
	wrlong	local06, fp
	sub	fp, #24
	jmp	#LR__0376
LR__0377
	add	fp, #24
	rdlong	local02, fp
	sub	fp, #24
	mov	local01, local02 wz
 if_e	jmp	#LR__0378
	mov	local09, #16
	decod	local04, #9
	mov	arg01, #16
	decod	arg02, #9
	call	#_ff_cc_send_cmd_0646
	mov	local06, result1
	mov	local08, local06
	zerox	local08, #7 wz
 if_e	jmp	#LR__0379
LR__0378
	add	fp, #12
	wrbyte	#0, fp
	sub	fp, #12
LR__0379
LR__0380
LR__0381
	add	fp, #12
	rdbyte	local01, fp
	add	ptr__ff_cc_dat__, #381
	wrbyte	local01, ptr__ff_cc_dat__
	rdbyte	local02, fp wz
 if_ne	mov	local01, #0
 if_e	mov	local01, #1
	add	fp, #16
	wrbyte	local01, fp
	rdbyte	local01, fp
	sub	fp, #28
	sub	ptr__ff_cc_dat__, #1
	wrbyte	local01, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #380
	call	#_ff_cc_deselect_0634
' 
'                             ty = 0;
'                         }
' 		}
' 	}
' #line 467 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
' 	CardType = ty;
' 	s = ty ? 0 :  0x01 ;
' 	Stat = s;
' 
' 	deselect();
' 
' 	return s;
	add	fp, #28
	rdbyte	result1, fp
	sub	fp, #28
LR__0382
	mov	ptra, fp
	call	#popregs_
_ff_cc_disk_initialize_ret
	ret

_ff_cc_disk_read
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg04
	mov	local03, arg03
	cmp	arg01, #0 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	ptr__ff_cc_dat__, #380
 if_e	rdbyte	result1, ptr__ff_cc_dat__
 if_e	sub	ptr__ff_cc_dat__, #380
	mov	local04, result1
	zerox	local04, #7
	test	local04, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0386
	add	ptr__ff_cc_dat__, #381
	rdbyte	local04, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #381
	zerox	local04, #7
	and	local04, #8 wz
 if_e	shl	local03, #9
	mov	local05, #0
	cmp	local02, #1 wcz
 if_a	mov	local05, #1
	cmp	local05, #0 wz
 if_ne	mov	local04, #18
 if_e	mov	local04, #17
	mov	local06, local04
	mov	arg01, local06
	mov	arg02, local03
	call	#_ff_cc_send_cmd_0646
	mov	local04, result1
	zerox	local04, #7 wz
 if_ne	jmp	#LR__0385
' 		do {
LR__0383
	mov	arg01, local01
	decod	arg02, #9
	call	#_ff_cc_rcvr_datablock_0640
	cmp	result1, #0 wz
 if_ne	add	local01, ##512
 if_ne	djnz	local02, #LR__0383
	zerox	local06, #7
	cmp	local06, #18 wz
 if_ne	jmp	#LR__0384
	mov	arg01, #12
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
LR__0384
LR__0385
	call	#_ff_cc_deselect_0634
' 	}
' 	deselect();
' 
' 	return count ? RES_ERROR : RES_OK;
	cmp	local02, #0 wz
 if_ne	mov	local04, #1
 if_e	mov	local04, #0
	mov	result1, local04
LR__0386
	mov	ptra, fp
	call	#popregs_
_ff_cc_disk_read_ret
	ret

_ff_cc_disk_write
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, local03
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	ptr__ff_cc_dat__, #380
 if_e	rdbyte	result1, ptr__ff_cc_dat__
 if_e	sub	ptr__ff_cc_dat__, #380
	mov	local06, result1
	zerox	local06, #7
	test	local06, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0392
	add	ptr__ff_cc_dat__, #381
	rdbyte	local06, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #381
	zerox	local06, #7
	test	local06, #8 wz
 if_e	shl	local05, #9
	cmp	local04, #1 wz
 if_ne	jmp	#LR__0387
	mov	arg02, local05
	mov	arg01, #24
	call	#_ff_cc_send_cmd_0646
	mov	local06, result1
	zerox	local06, #7 wz
 if_ne	jmp	#LR__0391
	mov	arg01, local02
	mov	arg02, #254
	call	#_ff_cc_xmit_datablock_0642
	mov	local07, result1 wz
 if_ne	mov	local04, #0
	jmp	#LR__0391
LR__0387
	add	ptr__ff_cc_dat__, #381
	rdbyte	local06, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #381
	zerox	local06, #7
	test	local06, #6 wz
 if_e	jmp	#LR__0388
	mov	arg01, #151
	mov	arg02, local04
	call	#_ff_cc_send_cmd_0646
LR__0388
	mov	arg02, local05
	mov	arg01, #25
	call	#_ff_cc_send_cmd_0646
	mov	local06, result1
	zerox	local06, #7 wz
 if_ne	jmp	#LR__0390
' 			do {
LR__0389
	mov	arg01, local02
	mov	arg02, #252
	call	#_ff_cc_xmit_datablock_0642
	cmp	result1, #0 wz
 if_ne	add	local02, ##512
 if_ne	djnz	local04, #LR__0389
	mov	arg01, #0
	mov	arg02, #253
	call	#_ff_cc_xmit_datablock_0642
	cmp	result1, #0 wz
 if_e	mov	local04, #1
LR__0390
LR__0391
	call	#_ff_cc_deselect_0634
' 				count = 1;
' 		}
' 	}
' 	deselect();
' 
' 	return count ? RES_ERROR : RES_OK;
	cmp	local04, #0 wz
 if_ne	mov	local06, #1
 if_e	mov	local06, #0
	mov	result1, local06
LR__0392
	mov	ptra, fp
	call	#popregs_
_ff_cc_disk_write_ret
	ret

_ff_cc_disk_ioctl
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #48
	add	fp, #4
	wrbyte	arg01, fp
	add	fp, #4
	wrbyte	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdbyte	local01, fp
	sub	fp, #4
	mov	local02, local01
	mov	arg01, local02 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	ptr__ff_cc_dat__, #380
 if_e	rdbyte	result1, ptr__ff_cc_dat__
 if_e	sub	ptr__ff_cc_dat__, #380
	mov	local03, result1
	mov	local04, local03
	zerox	local04, #7
	test	local04, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0401
	add	fp, #16
	wrlong	#1, fp
' 
' 	res = RES_ERROR;
' 	switch (ctrl) {
	sub	fp, #8
	rdbyte	local04, fp
	sub	fp, #8
	mov	local05, local04
	zerox	local05, #7
	fle	local05, #4
	jmprel	local05
LR__0393
	jmp	#LR__0394
	jmp	#LR__0395
	jmp	#LR__0399
	jmp	#LR__0398
	jmp	#LR__0399
LR__0394
	call	#_ff_cc_select_0637
	cmp	result1, #0 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#0, fp
 if_ne	sub	fp, #16
' 			break;
	jmp	#LR__0400
LR__0395
	mov	arg01, #9
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
	mov	local02, result1
	zerox	local02, #7 wz
 if_ne	jmp	#LR__0400
	add	fp, #24
	mov	arg01, fp
	sub	fp, #24
	mov	arg02, #16
	call	#_ff_cc_rcvr_datablock_0640
	mov	local06, result1 wz
 if_e	jmp	#LR__0400
	add	fp, #24
	rdbyte	local02, fp
	sub	fp, #24
	zerox	local02, #7
	shr	local02, #6
	cmp	local02, #1 wz
 if_ne	jmp	#LR__0396
	add	fp, #33
	rdbyte	local02, fp
	sub	fp, #1
	rdbyte	local03, fp
	zerox	local03, #15
	shl	local03, #8
	add	local02, local03
	sub	fp, #1
	rdbyte	local07, fp
	and	local07, #63
	shl	local07, #16
	add	local02, local07
	add	local02, #1
	add	fp, #9
	wrlong	local02, fp
	sub	fp, #28
	rdlong	local01, fp
	add	fp, #28
	rdlong	local03, fp
	sub	fp, #40
	shl	local03, #10
	wrlong	local03, local01
	jmp	#LR__0397
LR__0396
	add	fp, #29
	rdbyte	local02, fp
	and	local02, #15
	add	fp, #5
	rdbyte	local03, fp
	and	local03, #128
	sar	local03, #7
	add	local02, local03
	sub	fp, #1
	rdbyte	local07, fp
	and	local07, #3
	shl	local07, #1
	add	local02, local07
	add	local02, #2
	sub	fp, #13
	wrbyte	local02, fp
	add	fp, #12
	rdbyte	local02, fp
	shr	local02, #6
	sub	fp, #1
	rdbyte	local03, fp
	zerox	local03, #15
	shl	local03, #2
	add	local02, local03
	sub	fp, #1
	rdbyte	local07, fp
	and	local07, #3
	zerox	local07, #15
	shl	local07, #10
	add	local02, local07
	add	local02, #1
	add	fp, #10
	wrlong	local02, fp
	sub	fp, #28
	rdlong	local01, fp
	add	fp, #28
	rdlong	local03, fp
	sub	fp, #20
	rdbyte	local07, fp
	sub	fp, #20
	zerox	local07, #7
	sub	local07, #9
	shl	local03, local07
	wrlong	local03, local01
LR__0397
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
' 					*(LBA_t*)buff = cs << (n - 9);
' 				}
' 				res = RES_OK;
' 			}
' 			break;
	jmp	#LR__0400
LR__0398
	add	fp, #12
	rdlong	local02, fp
	wrlong	#128, local02
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #16
' 			*(DWORD*)buff = 128;
' 			res = RES_OK;
' 			break;
	jmp	#LR__0400
LR__0399
	mov	local02, #4
	add	fp, #16
	wrlong	#4, fp
	sub	fp, #16
LR__0400
	call	#_ff_cc_deselect_0634
' 			res = RES_PARERR;
' 	}
' 
' 	deselect();
' 
' 	return res;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0401
	mov	ptra, fp
	call	#popregs_
_ff_cc_disk_ioctl_ret
	ret

_ff_cc_disk_setpins
	cmp	arg01, #0 wz
 if_ne	neg	result1, #1
 if_ne	jmp	#_ff_cc_disk_setpins_ret
	add	ptr__ff_cc_dat__, #364
	wrlong	arg02, ptr__ff_cc_dat__
	add	ptr__ff_cc_dat__, #4
	wrlong	arg03, ptr__ff_cc_dat__
	add	ptr__ff_cc_dat__, #4
	wrlong	arg04, ptr__ff_cc_dat__
	add	ptr__ff_cc_dat__, #4
	wrlong	arg05, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #376
	mov	result1, #0
_ff_cc_disk_setpins_ret
	ret

_ff_cc_ld_word_0210
	add	arg01, #1
	rdbyte	result1, arg01
	sub	arg01, #1
	zerox	result1, #7
	zerox	result1, #15
	shl	result1, #8
	rdbyte	_var01, arg01
	or	result1, _var01
' {
' 	WORD rv;
' 
' 	rv = ptr[1];
' 	rv = rv << 8 | ptr[0];
' 	return rv;
_ff_cc_ld_word_0210_ret
	ret

_ff_cc_ld_dword_0212
	add	arg01, #3
	rdbyte	result1, arg01
	shl	result1, #8
	sub	arg01, #1
	rdbyte	_var01, arg01
	or	result1, _var01
	shl	result1, #8
	sub	arg01, #1
	rdbyte	_var02, arg01
	sub	arg01, #1
	zerox	_var02, #7
	or	result1, _var02
	shl	result1, #8
	rdbyte	_var03, arg01
	or	result1, _var03
' {
' 	DWORD rv;
' 
' 	rv = ptr[3];
' 	rv = rv << 8 | ptr[2];
' 	rv = rv << 8 | ptr[1];
' 	rv = rv << 8 | ptr[0];
' 	return rv;
_ff_cc_ld_dword_0212_ret
	ret

_ff_cc_st_word_0213
	mov	_var01, arg02
	zerox	_var01, #15
	wrbyte	_var01, arg01
	zerox	arg02, #15
	shr	arg02, #8
	add	arg01, #1
	zerox	arg02, #15
	wrbyte	arg02, arg01
_ff_cc_st_word_0213_ret
	ret

_ff_cc_st_dword_0214
	wrbyte	arg02, arg01
	shr	arg02, #8
	add	arg01, #1
	wrbyte	arg02, arg01
	shr	arg02, #8
	add	arg01, #1
	wrbyte	arg02, arg01
	shr	arg02, #8
	add	arg01, #1
	wrbyte	arg02, arg01
_ff_cc_st_dword_0214_ret
	ret

_ff_cc_mem_cpy_0217
	cmp	arg03, #0 wz
 if_e	jmp	#LR__0406
' 		do {
	loc	pa,	#(@LR__0404-@LR__0402)
	call	#FCACHE_LOAD_
LR__0402
	rep	@LR__0405, arg03
LR__0403
	mov	_var01, arg02
	add	_var01, #1
	rdbyte	_var02, arg02
	mov	arg02, _var01
	wrbyte	_var02, arg01
	add	arg01, #1
LR__0404
LR__0405
LR__0406
_ff_cc_mem_cpy_0217_ret
	ret

_ff_cc_mem_cmp_0223
	loc	pa,	#(@LR__0408-@LR__0407)
	call	#FCACHE_LOAD_
' 
' 	do {
LR__0407
	rdbyte	_var01, arg01
	rdbyte	_var02, arg02
	sub	_var01, _var02
	sub	arg03, #1
	mov	arg03, arg03 wz
	add	arg01, #1
	add	arg02, #1
 if_e	jmp	#LR__0409
	cmp	_var01, #0 wz
 if_e	jmp	#LR__0407
LR__0408
LR__0409
' 
' 	return r;
	mov	result1, _var01
_ff_cc_mem_cmp_0223_ret
	ret

_ff_cc_chk_chr_0224
	loc	pa,	#(@LR__0411-@LR__0410)
	call	#FCACHE_LOAD_
' {
' 	while (*str && *str != chr) str++;
LR__0410
	rdbyte	_var01, arg01 wz
 if_e	jmp	#LR__0412
	rdbyte	_var02, arg01
	cmp	_var02, arg02 wz
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0410
LR__0411
LR__0412
	rdbyte	result1, arg01
' 	return *str;
_ff_cc_chk_chr_0224_ret
	ret

_ff_cc_sync_window_0228
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #3
	rdbyte	local03, local01 wz
	sub	local01, #3
 if_e	jmp	#LR__0415
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #47
	mov	arg02, local01
	sub	local01, #4
	rdlong	arg03, local01
	sub	local01, #44
	mov	arg04, #1
	call	#_ff_cc_disk_write
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0413
	add	local01, #3
	wrbyte	#0, local01
	add	local01, #41
	rdlong	local03, local01
	sub	local01, #12
	rdlong	local04, local01
	sub	local03, local04
	sub	local01, #8
	rdlong	local05, local01
	sub	local01, #24
	cmp	local03, local05 wcz
 if_ae	jmp	#LR__0414
	add	local01, #2
	rdbyte	local03, local01
	sub	local01, #2
	zerox	local03, #7
	cmp	local03, #2 wz
 if_ne	jmp	#LR__0414
	add	local01, #48
	mov	arg02, local01
	sub	local01, #47
	rdbyte	arg01, local01
	add	local01, #43
	rdlong	arg03, local01
	sub	local01, #20
	rdlong	local06, local01
	add	arg03, local06
	mov	arg04, #1
	call	#_ff_cc_disk_write
	jmp	#LR__0414
LR__0413
	mov	local02, #1
LR__0414
LR__0415
' 			res = FR_DISK_ERR;
' 		}
' 	}
' 	return res;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_ff_cc_sync_window_0228_ret
	ret

_ff_cc_move_window_0230
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	cmp	local02, local04 wz
 if_e	jmp	#LR__0417
	mov	arg01, local01
	call	#_ff_cc_sync_window_0228
	mov	local03, result1 wz
 if_ne	jmp	#LR__0416
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #47
	mov	arg02, local01
	sub	local01, #48
	mov	arg03, local02
	mov	arg04, #1
	call	#_ff_cc_disk_read
	cmp	result1, #0 wz
 if_ne	neg	local02, #1
 if_ne	mov	local03, #1
	add	local01, #44
	wrlong	local02, local01
LR__0416
LR__0417
' 				sect = (LBA_t)0 - 1;
' 				res = FR_DISK_ERR;
' 			}
' 			fs->winsect = sect;
' 		}
' 	}
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_ff_cc_move_window_0230_ret
	ret

_ff_cc_sync_fs_0232
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg01
	call	#_ff_cc_sync_window_0228
	mov	local02, result1 wz
 if_ne	jmp	#LR__0423
	rdbyte	local03, local01
	cmp	local03, #3 wz
 if_ne	jmp	#LR__0422
	add	local01, #4
	rdbyte	local04, local01
	sub	local01, #4
	zerox	local04, #7
	cmp	local04, #1 wz
 if_ne	jmp	#LR__0422
	add	local01, #48
	mov	local05, local01
	mov	arg01, local05
	mov	arg02, #0
	decod	arg03, #9
	sub	local01, #48
' {
' 	BYTE *d = (BYTE*)dst;
' 
' 	do {
	loc	pa,	#(@LR__0420-@LR__0418)
	call	#FCACHE_LOAD_
LR__0418
	rep	@LR__0421, arg03
LR__0419
	wrbyte	arg02, arg01
	add	arg01, #1
LR__0420
LR__0421
	mov	local06, local05
	add	local06, #510
	mov	arg01, local06
	mov	arg02, ##43605
	call	#_ff_cc_st_word_0213
	mov	local07, local05
	mov	arg01, local07
	mov	arg02, ##1096897106
	call	#_ff_cc_st_dword_0214
	mov	local08, local05
	add	local08, #484
	mov	arg01, local08
	mov	arg02, ##1631679090
	call	#_ff_cc_st_dword_0214
	mov	local09, local05
	add	local09, #488
	add	local01, #16
	rdlong	arg02, local01
	sub	local01, #16
	mov	arg01, local09
	call	#_ff_cc_st_dword_0214
	mov	local10, local05
	add	local10, #492
	add	local01, #12
	rdlong	arg02, local01
	sub	local01, #12
	mov	arg01, local10
	call	#_ff_cc_st_dword_0214
	add	local01, #28
	rdlong	local03, local01
	add	local03, #1
	add	local01, #16
	wrlong	local03, local01
	add	local01, #4
	mov	local11, local01
	sub	local01, #47
	rdbyte	local04, local01
	mov	local12, local11
	add	local01, #43
	rdlong	local13, local01
	sub	local01, #44
	mov	local14, local13
	mov	local15, #1
	mov	arg01, local04
	mov	arg02, local12
	mov	arg03, local14
	mov	arg04, #1
	call	#_ff_cc_disk_write
	mov	local16, result1
	mov	local03, #0
	add	local01, #4
	wrbyte	#0, local01
	sub	local01, #4
LR__0422
	add	local01, #1
	rdbyte	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_ff_cc_disk_ioctl
	cmp	result1, #0 wz
 if_ne	mov	local02, #1
LR__0423
' 	}
' 
' 	return res;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_ff_cc_sync_fs_0232_ret
	ret

_ff_cc_clst2sect_0233
	sub	arg02, #2
	add	arg01, #20
	rdlong	_var01, arg01
	sub	arg01, #20
	sub	_var01, #2
	cmp	arg02, _var01 wcz
 if_ae	mov	result1, #0
 if_ae	jmp	#_ff_cc_clst2sect_0233_ret
' 	return fs->database + (LBA_t)fs->csize * clst;
	add	arg01, #10
	rdword	_var02, arg01
	qmul	_var02, arg02
	getqx	_var03
	add	arg01, #30
	rdlong	result1, arg01
	add	result1, _var03
_ff_cc_clst2sect_0233_ret
	ret

_ff_cc_get_fat_0238
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	cmp	local02, #2 wcz
 if_b	jmp	#LR__0424
	add	local03, #20
	rdlong	local04, local03
	sub	local03, #20
	mov	local05, local04
	cmp	local02, local05 wcz
 if_b	jmp	#LR__0425
LR__0424
	mov	local06, #1
	jmp	#LR__0432
LR__0425
	neg	local06, #1
' 		val = 0xFFFFFFFF;
' 
' 		switch (fs->fs_type) {
	rdbyte	local07, local03
	sub	local07, #1
	fle	local07, #3
	jmprel	local07
LR__0426
	jmp	#LR__0427
	jmp	#LR__0428
	jmp	#LR__0429
	jmp	#LR__0430
LR__0427
	mov	local08, local02
	mov	local04, local02
	shr	local04, #1
	add	local08, local04
	mov	arg01, local03
	mov	local09, local08
	shr	local09, #9
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local09
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0431
	mov	local10, local08
	and	local10, #511
	add	local03, #48
	add	local10, local03
	rdbyte	local11, local10
	sub	local03, #48
	mov	arg01, local03
	add	local08, #1
	mov	local09, local08
	shr	local09, #9
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local09
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0431
	and	local08, #511
	add	local03, #48
	add	local08, local03
	rdbyte	local04, local08
	shl	local04, #8
	or	local11, local04
	test	local02, #1 wz
 if_ne	shr	local11, #4
 if_ne	mov	local05, local11
 if_e	and	local11, ##4095
 if_e	mov	local05, local11
	mov	local06, local05
' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
' 			break;
	jmp	#LR__0431
LR__0428
	mov	arg01, local03
	mov	local09, local02
	shr	local09, #8
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local09
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0431
	add	local03, #48
	shl	local02, #1
	and	local02, #511
	add	local03, local02
	mov	arg01, local03
	call	#_ff_cc_ld_word_0210
	zerox	result1, #15
	mov	local06, result1
' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
' 			break;
	jmp	#LR__0431
LR__0429
	mov	arg01, local03
	mov	local09, local02
	shr	local09, #7
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local09
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0431
	add	local03, #48
	mov	arg01, local03
	mov	local12, local02
	shl	local12, #2
	and	local12, #511
	add	arg01, local12
	call	#_ff_cc_ld_dword_0212
	mov	local06, result1
	and	local06, ##268435455
' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
' 			break;
	jmp	#LR__0431
LR__0430
	mov	local06, #1
LR__0431
LR__0432
' 			val = 1;
' 		}
' 	}
' 
' 	return val;
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
_ff_cc_get_fat_0238_ret
	ret

_ff_cc_put_fat_0242
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, #2
	cmp	local02, #2 wcz
 if_b	jmp	#LR__0442
	add	local01, #20
	rdlong	local05, local01
	sub	local01, #20
	mov	local06, local05
	cmp	local02, local06 wcz
 if_ae	jmp	#LR__0442
' 		switch (fs->fs_type) {
	rdbyte	local07, local01
	sub	local07, #1
	fle	local07, #3
	jmprel	local07
LR__0433
	jmp	#LR__0434
	jmp	#LR__0439
	jmp	#LR__0440
	jmp	#LR__0441
LR__0434
	mov	local08, local02
	mov	local05, local02
	shr	local05, #1
	add	local08, local05
	mov	local06, local01
	mov	local09, local08
	shr	local09, #9
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local05, local10
	add	local05, local09
	mov	local11, local05
	mov	arg01, local06
	mov	arg02, local11
	call	#_ff_cc_move_window_0230
	mov	local12, result1
	mov	local04, local12 wz
 if_ne	jmp	#LR__0441
	add	local01, #48
	mov	local13, local01
	mov	local12, local08
	and	local12, #511
	add	local13, local12
	test	local02, #1 wz
	sub	local01, #48
	add	local08, #1
 if_e	jmp	#LR__0435
	rdbyte	local06, local13
	and	local06, #15
	mov	local10, local03
	zerox	local10, #7
	shl	local10, #4
	or	local06, local10
	jmp	#LR__0436
LR__0435
	mov	local06, local03
LR__0436
	wrbyte	local06, local13
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
	mov	local06, local01
	mov	local09, local08
	shr	local09, #9
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local05, local10
	add	local05, local09
	mov	local11, local05
	mov	arg01, local06
	mov	arg02, local11
	call	#_ff_cc_move_window_0230
	mov	local12, result1
	mov	local04, local12 wz
 if_ne	jmp	#LR__0441
	add	local01, #48
	mov	local13, local01
	mov	local09, local08
	and	local09, #511
	mov	local10, local09
	add	local13, local09
	mov	local05, local02
	and	local05, #1 wz
	sub	local01, #48
 if_e	jmp	#LR__0437
	mov	local09, local03
	shr	local09, #4
	mov	local06, local09
	jmp	#LR__0438
LR__0437
	rdbyte	local10, local13
	and	local10, #240
	mov	local11, local03
	shr	local11, #8
	zerox	local11, #7
	and	local11, #15
	or	local10, local11
	mov	local06, local10
LR__0438
	wrbyte	local06, local13
	mov	local06, #1
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
' 			p = fs->win + bc %  ((UINT) 512 ) ;
' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
' 			fs->wflag = 1;
' 			break;
	jmp	#LR__0441
LR__0439
	mov	local06, local01
	mov	local09, local02
	shr	local09, #8
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local05, local10
	add	local05, local09
	mov	local11, local05
	mov	arg01, local06
	mov	arg02, local11
	call	#_ff_cc_move_window_0230
	mov	local12, result1
	mov	local04, local12 wz
 if_ne	jmp	#LR__0441
	add	local01, #48
	mov	local05, local01
	mov	local09, local02
	shl	local09, #1
	mov	local10, local09
	and	local10, #511
	mov	local11, local10
	mov	local12, local05
	add	local12, local11
	mov	local14, local03
	mov	arg01, local12
	mov	arg02, local14
	sub	local01, #48
	call	#_ff_cc_st_word_0213
	mov	local06, #1
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
' 			fs->wflag = 1;
' 			break;
	jmp	#LR__0441
LR__0440
	mov	local06, local01
	mov	local09, local02
	shr	local09, #7
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local05, local10
	add	local05, local09
	mov	local11, local05
	mov	arg01, local06
	mov	arg02, local11
	call	#_ff_cc_move_window_0230
	mov	local12, result1
	mov	local04, local12 wz
 if_ne	jmp	#LR__0441
	and	local03, ##268435455
	add	local01, #48
	mov	local15, local01
	mov	local14, local02
	shl	local14, #2
	and	local14, #511
	add	local15, local14
	mov	arg01, local15
	sub	local01, #48
	call	#_ff_cc_ld_dword_0212
	mov	local16, result1
	mov	local05, local16
	and	local05, ##-268435456
	or	local03, local05
	add	local01, #48
	mov	local05, local01
	mov	local09, local02
	shl	local09, #2
	mov	local10, local09
	and	local10, #511
	mov	local11, local10
	mov	local12, local05
	add	local12, local11
	mov	local14, local03
	mov	arg01, local12
	mov	arg02, local14
	sub	local01, #48
	call	#_ff_cc_st_dword_0214
	mov	local06, #1
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
' 			}
' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
' 			fs->wflag = 1;
' 			break;
LR__0441
LR__0442
' 		}
' 	}
' 	return res;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_ff_cc_put_fat_0242_ret
	ret

_ff_cc_remove_chain_0246
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local01
	cmp	local02, #2 wcz
 if_b	jmp	#LR__0443
	add	local04, #20
	rdlong	local05, local04
	sub	local04, #20
	cmp	local02, local05 wcz
 if_b	jmp	#LR__0444
LR__0443
	mov	result1, #2
	jmp	#LR__0449
LR__0444
	cmp	local03, #0 wz
 if_e	jmp	#LR__0445
	mov	arg01, local04
	mov	arg02, local03
	neg	arg03, #1
	call	#_ff_cc_put_fat_0242
	mov	local06, result1 wz
 if_ne	mov	result1, local06
 if_ne	jmp	#LR__0449
LR__0445
' 	}
' 
' 
' 	do {
LR__0446
	mov	arg02, local02
	mov	arg01, local01
	call	#_ff_cc_get_fat_0238
	mov	local07, result1 wz
 if_e	jmp	#LR__0448
	cmp	local07, #1 wz
 if_e	mov	result1, #2
 if_e	jmp	#LR__0449
	cmp	local07, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0449
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, #0
	call	#_ff_cc_put_fat_0242
	mov	local06, result1 wz
 if_ne	mov	result1, local06
 if_ne	jmp	#LR__0449
	add	local04, #20
	rdlong	local05, local04
	sub	local05, #2
	sub	local04, #4
	rdlong	local08, local04
	sub	local04, #16
	cmp	local08, local05 wcz
 if_ae	jmp	#LR__0447
	add	local04, #16
	rdlong	local09, local04
	add	local09, #1
	wrlong	local09, local04
	sub	local04, #12
	rdbyte	local05, local04
	or	local05, #1
	wrbyte	local05, local04
	sub	local04, #4
LR__0447
	mov	local02, local07
	add	local04, #20
	rdlong	local05, local04
	sub	local04, #20
	cmp	local02, local05 wcz
 if_b	jmp	#LR__0446
LR__0448
' #line 1531 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	return FR_OK;
	mov	result1, #0
LR__0449
	mov	ptra, fp
	call	#popregs_
_ff_cc_remove_chain_0246_ret
	ret

_ff_cc_create_chain_0252
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
	rdlong	local03, local01
 if_ne	jmp	#LR__0451
	add	local03, #12
	rdlong	local04, local03 wz
	sub	local03, #12
 if_e	jmp	#LR__0450
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local04, local05 wcz
 if_b	jmp	#LR__0452
LR__0450
	mov	local04, #1
	jmp	#LR__0452
LR__0451
	mov	arg01, local01
	mov	arg02, local02
	call	#_ff_cc_get_fat_0238
	mov	local06, result1
	cmp	local06, #2 wcz
 if_b	mov	result1, #1
 if_b	jmp	#LR__0468
	cmp	local06, ##-1 wz
 if_e	mov	result1, local06
 if_e	jmp	#LR__0468
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local06, local05 wcz
 if_b	mov	result1, local06
 if_b	jmp	#LR__0468
	mov	local04, local02
LR__0452
	add	local03, #16
	rdlong	local05, local03 wz
	sub	local03, #16
 if_e	mov	result1, #0
 if_e	jmp	#LR__0468
	mov	local07, #0
	cmp	local04, local02 wz
 if_ne	jmp	#LR__0457
	mov	local08, local04
	add	local08, #1
	mov	local07, local08
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local07, local05 wcz
 if_ae	mov	local07, #2
	mov	local05, local01
	mov	arg02, local07
	mov	arg01, local05
	call	#_ff_cc_get_fat_0238
	mov	local06, result1
	cmp	local06, #1 wz
 if_e	jmp	#LR__0453
	cmp	local06, ##-1 wz
 if_ne	jmp	#LR__0454
LR__0453
	mov	result1, local06
	jmp	#LR__0468
LR__0454
	cmp	local06, #0 wz
 if_e	jmp	#LR__0456
	add	local03, #12
	rdlong	local06, local03
	sub	local03, #12
	cmp	local06, #2 wcz
 if_b	jmp	#LR__0455
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local06, local05 wcz
 if_b	mov	local04, local06
LR__0455
	mov	local07, #0
LR__0456
LR__0457
	cmp	local07, #0 wz
 if_ne	jmp	#LR__0463
	mov	local07, local04
' 			ncl = scl;
' 			for (;;) {
LR__0458
	add	local07, #1
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local07, local05 wcz
 if_b	jmp	#LR__0459
	mov	local07, #2
	cmp	local07, local04 wcz
 if_a	mov	result1, #0
 if_a	jmp	#LR__0468
LR__0459
	mov	local05, local01
	mov	arg02, local07
	mov	arg01, local05
	call	#_ff_cc_get_fat_0238
	mov	local06, result1 wz
 if_e	jmp	#LR__0462
	cmp	local06, #1 wz
 if_e	jmp	#LR__0460
	cmp	local06, ##-1 wz
 if_ne	jmp	#LR__0461
LR__0460
	mov	result1, local06
	jmp	#LR__0468
LR__0461
	cmp	local07, local04 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0468
	jmp	#LR__0458
LR__0462
LR__0463
	mov	arg01, local03
	mov	arg02, local07
	neg	arg03, #1
	call	#_ff_cc_put_fat_0242
	mov	local09, result1 wz
 if_ne	jmp	#LR__0464
	cmp	local02, #0 wz
 if_e	jmp	#LR__0464
	mov	local05, local03
	mov	local10, local02
	mov	local11, local07
	mov	arg01, local05
	mov	arg02, local10
	mov	arg03, local11
	call	#_ff_cc_put_fat_0242
	mov	local12, result1
	mov	local09, local12
LR__0464
	cmp	local09, #0 wz
 if_ne	jmp	#LR__0466
	add	local03, #12
	wrlong	local07, local03
	add	local03, #8
	rdlong	local05, local03
	sub	local05, #2
	sub	local03, #4
	rdlong	local11, local03
	sub	local03, #16
	cmp	local11, local05 wcz
 if_a	jmp	#LR__0465
	add	local03, #16
	rdlong	local11, local03
	sub	local11, #1
	wrlong	local11, local03
	sub	local03, #16
LR__0465
	add	local03, #4
	rdbyte	local05, local03
	or	local05, #1
	wrbyte	local05, local03
	jmp	#LR__0467
LR__0466
	cmp	local09, #1 wz
 if_e	neg	local05, #1
 if_ne	mov	local05, #1
	mov	local07, local05
LR__0467
' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
' 	}
' 
' 	return ncl;
	mov	result1, local07
LR__0468
	mov	ptra, fp
	call	#popregs_
_ff_cc_create_chain_0252_ret
	ret

_ff_cc_dir_clear_0257
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	call	#_ff_cc_sync_window_0228
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__0475
	mov	arg01, local01
	mov	arg02, local02
	call	#_ff_cc_clst2sect_0233
	mov	local03, result1
	add	local01, #44
	wrlong	local03, local01
	add	local01, #4
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, #0
	decod	arg03, #9
	sub	local01, #48
' {
' 	BYTE *d = (BYTE*)dst;
' 
' 	do {
	loc	pa,	#(@LR__0471-@LR__0469)
	call	#FCACHE_LOAD_
LR__0469
	rep	@LR__0472, arg03
LR__0470
	wrbyte	arg02, arg01
	add	arg01, #1
LR__0471
LR__0472
	mov	local05, local04
' #line 1698 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	{
' 		ibuf = fs->win; szb = 1;
' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
	mov	local06, #0
LR__0473
	add	local01, #10
	rdword	local07, local01
	sub	local01, #10
	zerox	local07, #15
	cmp	local06, local07 wcz
 if_ae	jmp	#LR__0474
	add	local01, #1
	rdbyte	arg01, local01
	sub	local01, #1
	mov	arg02, local05
	mov	arg03, local03
	add	arg03, local06
	mov	arg04, #1
	call	#_ff_cc_disk_write
	cmp	result1, #0 wz
 if_e	add	local06, #1
 if_e	jmp	#LR__0473
LR__0474
' 	}
' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
	add	local01, #10
	rdword	local08, local01
	cmp	local06, local08 wz
 if_e	mov	local07, #0
 if_ne	mov	local07, #1
	mov	result1, local07
LR__0475
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_clear_0257_ret
	ret

_ff_cc_dir_sdi_0261
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	cmp	local02, ##2097152 wcz
 if_ae	jmp	#LR__0476
	test	local02, #31 wz
 if_e	jmp	#LR__0477
LR__0476
' 		return FR_INT_ERR;
	mov	result1, #2
	jmp	#LR__0485
LR__0477
	add	local01, #16
	wrlong	local02, local01
	sub	local01, #8
	rdlong	local04, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0478
	rdbyte	local05, local03
	cmp	local05, #3 wcz
 if_b	jmp	#LR__0478
	add	local03, #36
	rdlong	local05, local03
	sub	local03, #36
	mov	local04, local05
LR__0478
	cmp	local04, #0 wz
 if_ne	jmp	#LR__0479
	mov	local05, local02
	shr	local05, #5
	add	local03, #8
	rdword	local06, local03
	sub	local03, #8
	zerox	local06, #15
	cmp	local05, local06 wcz
 if_ae	mov	result1, #2
 if_ae	jmp	#LR__0485
	add	local03, #36
	rdlong	local05, local03
	sub	local03, #36
	add	local01, #24
	wrlong	local05, local01
	sub	local01, #24
	jmp	#LR__0484
LR__0479
	add	local03, #10
	rdword	local07, local03
	sub	local03, #10
	zerox	local07, #15
	shl	local07, #9
' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
' 		while (ofs >= csz) {
LR__0480
	cmp	local02, local07 wcz
 if_b	jmp	#LR__0483
	mov	arg01, local01
	mov	arg02, local04
	call	#_ff_cc_get_fat_0238
	mov	local04, result1
	cmp	local04, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0485
	cmp	local04, #2 wcz
 if_b	jmp	#LR__0481
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local04, local05 wcz
 if_b	jmp	#LR__0482
LR__0481
	mov	result1, #2
	jmp	#LR__0485
LR__0482
	sub	local02, local07
	jmp	#LR__0480
LR__0483
	mov	arg01, local03
	mov	arg02, local04
	call	#_ff_cc_clst2sect_0233
	add	local01, #24
	wrlong	result1, local01
	sub	local01, #24
LR__0484
	add	local01, #20
	wrlong	local04, local01
	add	local01, #4
	rdlong	local05, local01 wz
	sub	local01, #24
 if_e	mov	result1, #2
 if_e	jmp	#LR__0485
	mov	local06, local02
	shr	local06, #9
	add	local01, #24
	rdlong	local05, local01
	add	local05, local06
	wrlong	local05, local01
	add	local03, #48
	mov	local05, local03
	mov	local08, local02
	and	local08, #511
	add	local05, local08
	add	local01, #4
	wrlong	local05, local01
' 	dp->sect += ofs /  ((UINT) 512 ) ;
' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
' 
' 	return FR_OK;
	mov	result1, #0
LR__0485
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_sdi_0261_ret
	ret

_ff_cc_dir_next_0265
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	add	local01, #16
	rdlong	local04, local01
	sub	local01, #16
	add	local04, #32
	cmp	local04, ##2097152 wcz
 if_ae	add	local01, #24
 if_ae	wrlong	#0, local01
 if_ae	sub	local01, #24
	add	local01, #24
	rdlong	local05, local01 wz
	sub	local01, #24
 if_e	mov	result1, #4
 if_e	jmp	#LR__0492
	test	local04, #511 wz
 if_ne	jmp	#LR__0491
	add	local01, #24
	rdlong	local06, local01
	add	local06, #1
	wrlong	local06, local01
	sub	local01, #4
	rdlong	local05, local01 wz
	sub	local01, #20
 if_ne	jmp	#LR__0486
	mov	local05, local04
	shr	local05, #5
	add	local03, #8
	rdword	local07, local03
	sub	local03, #8
	zerox	local07, #15
	cmp	local05, local07 wcz
 if_b	jmp	#LR__0490
	add	local01, #24
	wrlong	#0, local01
' 				dp->sect = 0; return FR_NO_FILE;
	mov	result1, #4
	jmp	#LR__0492
LR__0486
	mov	local05, local04
	shr	local05, #9
	add	local03, #10
	rdword	local07, local03
	sub	local03, #10
	zerox	local07, #15
	sub	local07, #1
	test	local05, local07 wz
 if_ne	jmp	#LR__0489
	mov	arg01, local01
	add	local01, #20
	rdlong	arg02, local01
	sub	local01, #20
	call	#_ff_cc_get_fat_0238
	mov	local08, result1
	cmp	local08, #1 wcz
 if_be	mov	result1, #2
 if_be	jmp	#LR__0492
	cmp	local08, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0492
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local08, local05 wcz
 if_b	jmp	#LR__0488
	cmp	local02, #0 wz
 if_ne	jmp	#LR__0487
	add	local01, #24
	wrlong	#0, local01
' 						dp->sect = 0; return FR_NO_FILE;
	mov	result1, #4
	jmp	#LR__0492
LR__0487
	mov	arg01, local01
	add	local01, #20
	rdlong	arg02, local01
	sub	local01, #20
	call	#_ff_cc_create_chain_0252
	mov	local08, result1 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__0492
	cmp	local08, #1 wz
 if_e	mov	result1, #2
 if_e	jmp	#LR__0492
	cmp	local08, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0492
	mov	arg01, local03
	mov	arg02, local08
	call	#_ff_cc_dir_clear_0257
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__0492
LR__0488
	add	local01, #20
	wrlong	local08, local01
	sub	local01, #20
	mov	arg01, local03
	mov	arg02, local08
	call	#_ff_cc_clst2sect_0233
	add	local01, #24
	wrlong	result1, local01
	sub	local01, #24
LR__0489
LR__0490
LR__0491
	add	local01, #16
	wrlong	local04, local01
	add	local03, #48
	mov	local05, local03
	mov	local06, local04
	and	local06, #511
	add	local05, local06
	add	local01, #12
	wrlong	local05, local01
' #line 1802 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 				}
' 				dp->clust = clst;
' 				dp->sect = clst2sect(fs, clst);
' 			}
' 		}
' 	}
' 	dp->dptr = ofs;
' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
' 
' 	return FR_OK;
	mov	result1, #0
LR__0492
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_next_0265_ret
	ret

_ff_cc_dir_alloc_0269
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	mov	arg01, local01
	mov	arg02, #0
	call	#_ff_cc_dir_sdi_0261
	mov	local04, result1 wz
 if_ne	jmp	#LR__0498
	mov	local05, #0
' 		n = 0;
' 		do {
LR__0493
	mov	arg01, local03
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	call	#_ff_cc_move_window_0230
	mov	local06, result1
	mov	local04, local06 wz
 if_ne	jmp	#LR__0497
	add	local01, #28
	rdlong	local07, local01
	sub	local01, #28
	rdbyte	local08, local07
	cmp	local08, #229 wz
 if_e	jmp	#LR__0494
	add	local01, #28
	rdlong	local09, local01
	sub	local01, #28
	mov	local10, local09
	rdbyte	local06, local10 wz
 if_ne	jmp	#LR__0495
LR__0494
	add	local05, #1
	cmp	local05, local02 wz
 if_e	jmp	#LR__0497
	jmp	#LR__0496
LR__0495
	mov	local05, #0
LR__0496
	mov	local08, local01
	mov	local07, #1
	mov	arg01, local08
	mov	arg02, #1
	call	#_ff_cc_dir_next_0265
	mov	local11, result1
	mov	local04, local11 wz
 if_e	jmp	#LR__0493
LR__0497
LR__0498
	cmp	local04, #4 wz
 if_e	mov	local04, #7
' 	return res;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_alloc_0269_ret
	ret

_ff_cc_ld_clust_0271
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local02
	add	arg01, #26
	call	#_ff_cc_ld_word_0210
	mov	local03, result1
	zerox	local03, #15
	rdbyte	local04, local01
	cmp	local04, #3 wz
 if_ne	jmp	#LR__0499
	add	local02, #20
	mov	arg01, local02
	call	#_ff_cc_ld_word_0210
	zerox	result1, #15
	shl	result1, #16
	or	local03, result1
LR__0499
' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
' 	}
' 
' 	return cl;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_ff_cc_ld_clust_0271_ret
	ret

_ff_cc_st_clust_0272
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg01, local02
	add	arg01, #26
	mov	arg02, local03
	call	#_ff_cc_st_word_0213
	rdbyte	local04, local01
	cmp	local04, #3 wz
 if_ne	jmp	#LR__0500
	add	local02, #20
	shr	local03, #16
	mov	arg01, local02
	mov	arg02, local03
	call	#_ff_cc_st_word_0213
LR__0500
	mov	ptra, fp
	call	#popregs_
_ff_cc_st_clust_0272_ret
	ret

_ff_cc_dir_read_0277
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #4
	rdlong	local04, local01
' )
' {
' 	FRESULT res = FR_NO_FILE;
' 	FATFS *fs = dp->obj.fs;
' 	BYTE attr, b;
' #line 2376 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	while (dp->sect) {
LR__0501
	add	local01, #24
	rdlong	local05, local01 wz
	sub	local01, #24
 if_e	jmp	#LR__0503
	mov	arg01, local04
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	call	#_ff_cc_move_window_0230
	mov	local03, result1 wz
 if_ne	jmp	#LR__0503
	add	local01, #28
	rdlong	local05, local01
	sub	local01, #28
	rdbyte	local06, local05
	mov	local05, local06
	zerox	local05, #7 wz
 if_e	mov	local03, #4
' 			res = FR_NO_FILE; break;
 if_e	jmp	#LR__0503
	add	local01, #28
	rdlong	local07, local01
	add	local07, #11
	rdbyte	local08, local07
	and	local08, #63
	sub	local01, #22
	wrbyte	local08, local01
	sub	local01, #6
	mov	local05, local06
	zerox	local05, #7
	cmp	local05, #229 wz
 if_e	jmp	#LR__0502
	mov	local07, local06
	zerox	local07, #7
	cmp	local07, #46 wz
 if_e	jmp	#LR__0502
	mov	local09, local08
	zerox	local09, #7
	cmp	local09, #15 wz
 if_e	jmp	#LR__0502
	mov	local10, #0
	mov	local11, local08
	zerox	local11, #7
	andn	local11, #32
	cmp	local11, #8 wz
 if_e	mov	local10, #1
	cmp	local10, local02 wz
' 				break;
 if_e	jmp	#LR__0503
LR__0502
	mov	arg01, local01
	mov	arg02, #0
	call	#_ff_cc_dir_next_0265
	mov	local03, result1 wz
 if_e	jmp	#LR__0501
LR__0503
	cmp	local03, #0 wz
 if_ne	add	local01, #24
 if_ne	wrlong	#0, local01
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_read_0277_ret
	ret

_ff_cc_dir_find_0281
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	mov	arg01, local01
	mov	arg02, #0
	call	#_ff_cc_dir_sdi_0261
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0507
' #line 2479 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	do {
LR__0504
	mov	arg01, local02
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	call	#_ff_cc_move_window_0230
	mov	local03, result1 wz
 if_ne	jmp	#LR__0506
	add	local01, #28
	rdlong	local04, local01
	sub	local01, #28
	rdbyte	local05, local04
	mov	local04, local05
	zerox	local04, #7 wz
 if_e	mov	local03, #4
 if_e	jmp	#LR__0506
	add	local01, #28
	rdlong	local06, local01
	add	local06, #11
	rdbyte	local04, local06
	and	local04, #63
	sub	local01, #22
	wrbyte	local04, local01
	add	local01, #22
	rdlong	local06, local01
	sub	local01, #28
	add	local06, #11
	rdbyte	local07, local06
	mov	local04, local07
	zerox	local04, #7
	test	local04, #8 wz
 if_ne	jmp	#LR__0505
	add	local01, #28
	rdlong	local08, local01
	mov	local09, local08
	add	local01, #4
	mov	local10, local01
	mov	local11, local10
	mov	local12, #11
	mov	arg01, local09
	mov	arg02, local11
	mov	arg03, #11
	sub	local01, #32
	call	#_ff_cc_mem_cmp_0223
	mov	local13, result1 wz
 if_e	jmp	#LR__0506
LR__0505
	mov	local04, local01
	mov	local06, #0
	mov	arg01, local04
	mov	arg02, #0
	call	#_ff_cc_dir_next_0265
	mov	local14, result1
	mov	local03, local14 wz
 if_e	jmp	#LR__0504
LR__0506
' 
' 	return res;
	mov	result1, local03
LR__0507
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_find_0281_ret
	ret

_ff_cc_dir_register_0284
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	mov	arg01, local01
	mov	arg02, #1
	call	#_ff_cc_dir_alloc_0269
	mov	local03, result1 wz
 if_ne	jmp	#LR__0513
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_ff_cc_move_window_0230
	mov	local03, result1 wz
 if_ne	jmp	#LR__0512
	add	local01, #28
	rdlong	arg01, local01
	sub	local01, #28
	mov	arg02, #0
' {
' 	BYTE *d = (BYTE*)dst;
' 
' 	do {
	loc	pa,	#(@LR__0510-@LR__0508)
	call	#FCACHE_LOAD_
LR__0508
	rep	@LR__0511, #32
LR__0509
	wrbyte	arg02, arg01
	add	arg01, #1
LR__0510
LR__0511
	add	local01, #32
	mov	arg02, local01
	sub	local01, #4
	rdlong	arg01, local01
	mov	arg03, #11
	call	#_ff_cc_mem_cpy_0217
	add	local02, #3
	wrbyte	#1, local02
LR__0512
LR__0513
' 			mem_set(dp->dir, 0,  32 );
' 			mem_cpy(dp->dir +  0 , dp->fn, 11);
' #line 2613 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 			fs->wflag = 1;
' 		}
' 	}
' 
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_register_0284_ret
	ret

_ff_cc_dir_remove_0287
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_ff_cc_move_window_0230
	mov	local03, result1 wz
 if_ne	jmp	#LR__0514
	add	local01, #28
	rdlong	local04, local01
	wrbyte	#229, local04
	add	local02, #3
	wrbyte	#1, local02
LR__0514
' 		dp->dir[ 0 ] =  0xE5 ;
' 		fs->wflag = 1;
' 	}
' 
' 
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_ff_cc_dir_remove_0287_ret
	ret

_ff_cc_get_fileinfo_0291
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local02, #12
	wrbyte	#0, local02
	sub	local02, #12
	add	local01, #24
	rdlong	local03, local01
	sub	local01, #24
	mov	local04, local03 wz
 if_e	jmp	#LR__0518
	mov	local05, #0
	mov	local06, #0
' #line 2755 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	si = di = 0;
' 	while (si < 11) {
LR__0515
	cmp	local06, #11 wcz
 if_ae	jmp	#LR__0517
	add	local01, #28
	rdlong	local07, local01
	sub	local01, #28
	mov	local08, local06
	add	local08, local07
	rdbyte	local09, local08
	mov	local04, local09
	zerox	local04, #7
	cmp	local04, #32 wz
	add	local06, #1
 if_e	jmp	#LR__0515
	mov	local04, local09
	zerox	local04, #7
	cmp	local04, #5 wz
 if_e	mov	local09, #229
	cmp	local06, #9 wz
 if_ne	jmp	#LR__0516
	mov	local10, local05
	add	local02, #12
	add	local10, local02
	wrbyte	#46, local10
	add	local05, #1
	sub	local02, #12
LR__0516
	mov	local10, local05
	add	local02, #12
	add	local10, local02
	wrbyte	local09, local10
	add	local05, #1
	sub	local02, #12
	jmp	#LR__0515
LR__0517
	add	local02, #12
	add	local05, local02
	wrbyte	#0, local05
	add	local01, #28
	rdlong	local04, local01
	add	local04, #11
	rdbyte	local10, local04
	sub	local02, #4
	wrbyte	local10, local02
	sub	local02, #8
	rdlong	arg01, local01
	sub	local01, #28
	add	arg01, #28
	call	#_ff_cc_ld_dword_0212
	wrlong	result1, local02
	add	local01, #28
	rdlong	arg01, local01
	sub	local01, #28
	add	arg01, #22
	call	#_ff_cc_ld_word_0210
	mov	local11, result1
	add	local02, #6
	wrword	local11, local02
	sub	local02, #6
	add	local01, #28
	rdlong	arg01, local01
	add	arg01, #24
	call	#_ff_cc_ld_word_0210
	add	local02, #4
	wrword	result1, local02
LR__0518
	mov	ptra, fp
	call	#popregs_
_ff_cc_get_fileinfo_0291_ret
	ret

_ff_cc_create_name_0299
	mov	COUNT_, #24
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local01, #32
	mov	local04, local01
	mov	local05, local04
	mov	arg01, local05
	mov	arg02, #32
	mov	arg03, #11
	sub	local01, #32
' {
' 	BYTE *d = (BYTE*)dst;
' 
' 	do {
	loc	pa,	#(@LR__0521-@LR__0519)
	call	#FCACHE_LOAD_
LR__0519
	rep	@LR__0522, #11
LR__0520
	wrbyte	arg02, arg01
	add	arg01, #1
LR__0521
LR__0522
	mov	local06, #0
	mov	local07, #0
	mov	local08, #8
' 
' 
' 	p = *path; sfn = dp->fn;
' 	mem_set(sfn, ' ', 11);
' 	si = i = 0; ni = 8;
' #line 3011 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	for (;;) {
LR__0523
	mov	local09, local07
	add	local09, local03
	rdbyte	local10, local09
	mov	local11, local10
	zerox	local11, #7
	cmp	local11, #32 wcz
	add	local07, #1
 if_be	jmp	#LR__0537
	mov	local11, local10
	zerox	local11, #7
	cmp	local11, #47 wz
 if_e	jmp	#LR__0524
	mov	local12, local10
	zerox	local12, #7
	cmp	local12, #92 wz
 if_ne	jmp	#LR__0527
LR__0524
' 			while (p[si] == '/' || p[si] == '\\') si++;
LR__0525
	mov	local12, local07
	add	local12, local03
	rdbyte	local11, local12
	cmp	local11, #47 wz
 if_e	jmp	#LR__0526
	mov	local13, local07
	add	local13, local03
	rdbyte	local14, local13
	cmp	local14, #92 wz
 if_ne	jmp	#LR__0537
LR__0526
	add	local07, #1
	jmp	#LR__0525
' 			break;
LR__0527
	mov	local11, local10
	zerox	local11, #7
	cmp	local11, #46 wz
 if_e	jmp	#LR__0528
	cmp	local06, local08 wcz
 if_b	jmp	#LR__0531
LR__0528
	cmp	local08, #11 wz
 if_e	jmp	#LR__0529
	zerox	local10, #7
	cmp	local10, #46 wz
 if_e	jmp	#LR__0530
LR__0529
	mov	result1, #6
	jmp	#LR__0538
LR__0530
	mov	local06, #8
	mov	local08, #11
' 			i = 8; ni = 11;
' 			continue;
	jmp	#LR__0523
LR__0531
	mov	local11, local10
	zerox	local11, #7
	cmp	local11, #128 wcz
 if_b	jmp	#LR__0532
	mov	local15, local10
	zerox	local15, #7
	mov	local16, local15
	and	local16, #127
	mov	local17, local16
	add	ptr__ff_cc_dat__, #6
	add	local17, ptr__ff_cc_dat__
	rdbyte	local10, local17
	sub	ptr__ff_cc_dat__, #6
LR__0532
	mov	arg01, local10
	zerox	arg01, #7 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	cmp	result1, #0 wz
 if_e	jmp	#LR__0535
	mov	local09, local07
	mov	local14, local03
	add	local09, local03
	rdbyte	local18, local09
	mov	arg01, local18
	add	local07, #1
	zerox	arg01, #7 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	mov	local12, result1 wz
 if_e	jmp	#LR__0533
	mov	local09, local08
	sub	local09, #1
	cmp	local06, local09 wcz
 if_b	jmp	#LR__0534
LR__0533
	mov	result1, #6
	jmp	#LR__0538
LR__0534
	mov	local09, local06
	add	local09, local05
	wrbyte	local10, local09
	add	local06, #1
	mov	local09, local06
	add	local09, local05
	wrbyte	local18, local09
	add	local06, #1
	jmp	#LR__0523
LR__0535
	mov	arg01, ##@LR__0831
	mov	local09, local10
	zerox	local09, #7
	mov	local14, local09
	mov	arg02, local14
	call	#_ff_cc_chk_chr_0224
	mov	local13, result1 wz
 if_ne	mov	result1, #6
 if_ne	jmp	#LR__0538
	mov	local11, local10
	zerox	local11, #7
	cmp	local11, #97 wcz
 if_b	jmp	#LR__0536
	mov	local12, local10
	zerox	local12, #7
	cmp	local12, #122 wcz
 if_a	jmp	#LR__0536
	mov	local19, local10
	zerox	local19, #7
	mov	local20, local19
	sub	local20, #32
	mov	local10, local20
LR__0536
	mov	local09, local06
	add	local09, local05
	wrbyte	local10, local09
	add	local06, #1
	jmp	#LR__0523
LR__0537
	mov	local21, local07
	mov	local22, local03
	add	local22, local21
	wrlong	local22, local02
	cmp	local06, #0 wz
 if_e	mov	result1, #6
 if_e	jmp	#LR__0538
	rdbyte	local11, local05
	cmp	local11, #229 wz
 if_e	wrbyte	#5, local05
	mov	local23, local10
	zerox	local23, #7
	mov	local24, #0
	cmp	local23, #32 wcz
 if_be	mov	local24, #1
	cmp	local24, #0 wz
 if_ne	mov	local11, #4
 if_e	mov	local11, #0
	add	local05, #11
	wrbyte	local11, local05
' 	sfn[ 11 ] = (c <= ' ') ?  0x04  : 0;
' 
' 	return FR_OK;
	mov	result1, #0
LR__0538
	mov	ptra, fp
	call	#popregs_
_ff_cc_create_name_0299_ret
	ret

_ff_cc_follow_path_0303
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #32
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	local01, fp
	rdlong	local02, local01
	add	fp, #16
	wrlong	local02, fp
	sub	fp, #20
	loc	pa,	#(@LR__0541-@LR__0539)
	call	#FCACHE_LOAD_
' )
' {
' 	FRESULT res;
' 	BYTE ns;
' 	FATFS *fs = dp->obj.fs;
' #line 3075 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	{
' 		while (*path == '/' || *path == '\\') path++;
LR__0539
	add	fp, #8
	rdlong	local03, fp
	sub	fp, #8
	rdbyte	local01, local03
	cmp	local01, #47 wz
 if_e	jmp	#LR__0540
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #8
	rdbyte	local05, local04
	cmp	local05, #92 wz
 if_ne	jmp	#LR__0542
LR__0540
	add	fp, #8
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	sub	fp, #8
	jmp	#LR__0539
LR__0541
LR__0542
	add	fp, #4
	rdlong	local01, fp
	add	local01, #8
	wrlong	#0, local01
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #8
	rdbyte	local01, local03
	cmp	local01, #32 wcz
 if_ae	jmp	#LR__0543
	add	fp, #4
	rdlong	local01, fp
	add	local01, #43
	wrbyte	#128, local01
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_ff_cc_dir_sdi_0261
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__0548
LR__0543
' 		for (;;) {
LR__0544
	add	fp, #8
	mov	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	call	#_ff_cc_create_name_0299
	mov	local05, result1
	add	fp, #12
	wrlong	local05, fp
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0547
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	call	#_ff_cc_dir_find_0281
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #43
	rdbyte	local02, local01
	add	fp, #12
	wrbyte	local02, fp
	sub	fp, #4
	rdlong	local01, fp wz
	sub	fp, #12
 if_e	jmp	#LR__0545
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_ne	jmp	#LR__0547
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	zerox	local01, #7
	test	local01, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
' 					}
' 				}
' 				break;
	jmp	#LR__0547
LR__0545
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	zerox	local01, #7
	test	local01, #4 wz
 if_ne	jmp	#LR__0547
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #6
	rdbyte	local01, local03
	test	local01, #16 wz
 if_ne	jmp	#LR__0546
	add	fp, #12
	wrlong	#5, fp
	sub	fp, #12
' 				res = FR_NO_PATH; break;
	jmp	#LR__0547
LR__0546
	add	fp, #20
	rdlong	arg02, fp
	add	arg02, #48
	sub	fp, #16
	rdlong	local01, fp
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	local06, fp
	sub	fp, #4
	add	local06, #16
	rdlong	local07, local06
	and	local07, #511
	add	arg02, local07
	call	#_ff_cc_ld_clust_0271
	add	local01, #8
	wrlong	result1, local01
	jmp	#LR__0544
LR__0547
LR__0548
' 			}
' #line 3131 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 			{
' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
' 			}
' 		}
' 	}
' 
' 	return res;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_ff_cc_follow_path_0303_ret
	ret

_ff_cc_get_ldnumber_0309
	mov	_var01, arg01
	neg	_var02, #1
	rdlong	_var03, _var01 wz
	mov	_var04, _var03
 if_e	neg	result1, #1
 if_e	jmp	#_ff_cc_get_ldnumber_0309_ret
	loc	pa,	#(@LR__0550-@LR__0549)
	call	#FCACHE_LOAD_
' 	do tc = *tt++; while ((UINT)tc >= ( 0  ? ' ' : '!') && tc != ':');
LR__0549
	rdbyte	_var05, _var04
	mov	_var06, _var05
	zerox	_var06, #7
	cmp	_var06, #33 wcz
	add	_var04, #1
 if_b	jmp	#LR__0551
	mov	_var07, _var05
	zerox	_var07, #7
	cmp	_var07, #58 wz
 if_ne	jmp	#LR__0549
LR__0550
LR__0551
	mov	_var06, _var05
	zerox	_var06, #7
	cmp	_var06, #58 wz
 if_ne	jmp	#LR__0553
	mov	_var08, #1
	rdbyte	_var06, _var03
	cmp	_var06, #48 wcz
 if_b	jmp	#LR__0552
	rdbyte	_var07, _var03
	cmp	_var07, #57 wcz
 if_a	jmp	#LR__0552
	mov	_var09, _var03
	add	_var09, #2
	cmp	_var09, _var04 wz
 if_e	rdbyte	_var06, _var03
 if_e	sub	_var06, #48
 if_e	mov	_var08, _var06
LR__0552
	cmps	_var08, #1 wcz
 if_b	mov	_var02, _var08
 if_b	wrlong	_var04, _var01
' 			vol = i;
' 			*path = tt;
' 		}
' 		return vol;
	mov	result1, _var02
	jmp	#_ff_cc_get_ldnumber_0309_ret
LR__0553
' 	}
' #line 3209 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	vol = 0;
' 
' 	return vol;
	mov	result1, #0
_ff_cc_get_ldnumber_0309_ret
	ret

_ff_cc_check_fs_0310
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #3
	wrbyte	#0, local01
	add	local01, #41
	wrlong	##-1, local01
	sub	local01, #44
	mov	arg01, local01
	mov	arg02, local02
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_ne	mov	result1, #4
 if_ne	jmp	#LR__0556
	add	local01, #48
	mov	arg01, local01
	add	arg01, #510
	sub	local01, #48
	call	#_ff_cc_ld_word_0210
	mov	local03, result1
	zerox	local03, #15
	cmp	local03, ##43605 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0556
	add	local01, #48
	rdbyte	local04, local01
	sub	local01, #48
	mov	local03, local04
	zerox	local03, #7
	cmp	local03, #233 wz
 if_e	jmp	#LR__0554
	add	local01, #48
	rdbyte	local05, local01
	sub	local01, #48
	mov	local06, local05
	zerox	local06, #7
	cmp	local06, #235 wz
 if_e	jmp	#LR__0554
	add	local01, #48
	rdbyte	local07, local01
	sub	local01, #48
	mov	local08, local07
	zerox	local08, #7
	cmp	local08, #232 wz
 if_ne	jmp	#LR__0555
LR__0554
	add	local01, #48
	mov	arg01, local01
	sub	local01, #48
	add	arg01, #54
	mov	arg02, ##@LR__0833
	mov	arg03, #3
	call	#_ff_cc_mem_cmp_0223
	cmp	result1, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0556
	add	local01, #48
	mov	arg01, local01
	add	arg01, #82
	mov	arg02, ##@LR__0834
	mov	arg03, #5
	call	#_ff_cc_mem_cmp_0223
	cmp	result1, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0556
LR__0555
' 	}
' 	return 2;
	mov	result1, #2
LR__0556
	mov	ptra, fp
	call	#popregs_
_ff_cc_check_fs_0310_ret
	ret

_ff_cc_find_volume_0314
	mov	COUNT_, #19
	call	#pushregs_
	add	ptra, #60
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	arg02, #0
	call	#_ff_cc_check_fs_0310
	mov	local03, result1
	cmp	local03, #2 wz
 if_e	jmp	#LR__0558
	cmp	local03, #3 wcz
 if_ae	jmp	#LR__0557
	cmp	local02, #0 wz
 if_ne	jmp	#LR__0558
LR__0557
	mov	result1, local03
	jmp	#LR__0564
LR__0558
	mov	local04, #0
	mov	local05, #0
	mov	local06, #0
LR__0559
	add	local01, #48
	mov	local07, local01
	mov	local08, local07
	add	local08, #446
	mov	local09, local08
	add	local09, local05
	mov	local10, local09
	add	local10, #8
	mov	local11, local06
	shl	local11, #2
	add	fp, #20
	add	local11, fp
	mov	arg01, local10
	sub	local01, #48
	sub	fp, #20
	call	#_ff_cc_ld_dword_0212
	wrlong	result1, local11
	add	local06, #1
	add	local04, #16
	add	local05, #16
	cmp	local06, #4 wcz
 if_b	jmp	#LR__0559
	cmp	local02, #0 wz
 if_ne	mov	local11, local02
 if_ne	sub	local11, #1
 if_e	mov	local11, #0
	mov	local06, local11
' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
' 	}
' 	i = part ? part - 1 : 0;
' 	do {
LR__0560
	mov	local12, local06
	shl	local12, #2
	add	fp, #20
	mov	local13, fp
	add	local12, fp
	rdlong	local14, local12 wz
	sub	fp, #20
 if_e	jmp	#LR__0561
	mov	local15, local01
	mov	local16, local06
	shl	local16, #2
	add	fp, #20
	mov	local17, fp
	add	local16, fp
	rdlong	local18, local16
	mov	arg01, local15
	mov	arg02, local18
	sub	fp, #20
	call	#_ff_cc_check_fs_0310
	mov	local19, result1
	mov	local11, local19
	jmp	#LR__0562
LR__0561
	mov	local11, #3
LR__0562
	mov	local03, local11
	cmp	local02, #0 wz
 if_ne	jmp	#LR__0563
	cmp	local03, #2 wcz
 if_b	jmp	#LR__0563
	mov	local11, local06
	add	local11, #1
	mov	local06, local11
	cmp	local06, #4 wcz
 if_b	jmp	#LR__0560
LR__0563
' 	return fmt;
	mov	result1, local03
LR__0564
	mov	ptra, fp
	call	#popregs_
_ff_cc_find_volume_0314_ret
	ret

_ff_cc_mount_volume_0326
	mov	COUNT_, #52
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	wrlong	#0, local02
	mov	arg01, local01
	call	#_ff_cc_get_ldnumber_0309
	mov	local04, result1
	cmps	local04, #0 wcz
 if_b	mov	result1, #11
 if_b	jmp	#LR__0580
	mov	local05, local04
	shl	local05, #2
	add	local05, ptr__ff_cc_dat__
	rdlong	local06, local05 wz
 if_e	mov	result1, #12
 if_e	jmp	#LR__0580
	wrlong	local06, local02
	mov	local07, local03
	zerox	local07, #7
	mov	local08, local07
	and	local08, #254
	mov	local03, local08
	rdbyte	local09, local06 wz
 if_e	jmp	#LR__0567
	add	local06, #1
	rdbyte	arg01, local06 wz
	sub	local06, #1
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	ptr__ff_cc_dat__, #380
 if_e	rdbyte	result1, ptr__ff_cc_dat__
 if_e	sub	ptr__ff_cc_dat__, #380
	mov	local09, result1
	zerox	local09, #7
	test	local09, #1 wz
 if_ne	jmp	#LR__0566
	cmp	local03, #0 wz
 if_e	jmp	#LR__0565
	zerox	result1, #7
	and	result1, #4 wz
' 				return FR_WRITE_PROTECTED;
 if_ne	mov	result1, #10
 if_ne	jmp	#LR__0580
LR__0565
' 			}
' 			return FR_OK;
	mov	result1, #0
	jmp	#LR__0580
LR__0566
LR__0567
	wrbyte	#0, local06
	add	local06, #1
	wrbyte	local04, local06
	rdbyte	arg01, local06
	sub	local06, #1
	call	#_ff_cc_disk_initialize
	mov	local10, result1
	mov	local09, local10
	zerox	local09, #7
	test	local09, #1 wz
' 		return FR_NOT_READY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0580
	cmp	local03, #0 wz
 if_e	jmp	#LR__0568
	mov	local09, local10
	zerox	local09, #7
	test	local09, #4 wz
' 		return FR_WRITE_PROTECTED;
 if_ne	mov	result1, #10
 if_ne	jmp	#LR__0580
LR__0568
	mov	arg01, local06
	mov	arg02, #0
	call	#_ff_cc_find_volume_0314
	mov	local11, result1
	cmp	local11, #4 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0580
	cmp	local11, #2 wcz
 if_ae	mov	result1, #13
 if_ae	jmp	#LR__0580
	add	local06, #44
	rdlong	local12, local06
	add	local06, #4
	mov	arg01, local06
	sub	local06, #48
	add	arg01, #11
	call	#_ff_cc_ld_word_0210
	mov	local09, result1
	zerox	local09, #15
	cmp	local09, ##512 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__0580
	add	local06, #48
	mov	local13, local06
	mov	local14, local13
	add	local14, #22
	mov	arg01, local14
	sub	local06, #48
	call	#_ff_cc_ld_word_0210
	mov	local15, result1
	zerox	local15, #15 wz
 if_ne	jmp	#LR__0569
	mov	local16, local13
	add	local16, #36
	mov	arg01, local16
	call	#_ff_cc_ld_dword_0212
	mov	local15, result1
LR__0569
	add	local06, #24
	wrlong	local15, local06
	add	local06, #40
	rdbyte	local09, local06
	sub	local06, #62
	wrbyte	local09, local06
	rdbyte	local09, local06
	sub	local06, #2
	zerox	local09, #7
	cmp	local09, #1 wz
 if_e	jmp	#LR__0570
	add	local06, #2
	rdbyte	local17, local06
	sub	local06, #2
	zerox	local17, #7
	cmp	local17, #2 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__0580
LR__0570
	add	local06, #2
	rdbyte	local09, local06
	qmul	local15, local09
	getqx	local15
	add	local06, #59
	rdbyte	local09, local06
	sub	local06, #51
	wrword	local09, local06
	rdword	local09, local06
	sub	local06, #10
	zerox	local09, #15 wz
 if_e	jmp	#LR__0571
	add	local06, #10
	rdword	local17, local06
	rdword	local18, local06
	sub	local06, #10
	zerox	local18, #15
	sub	local18, #1
	test	local17, local18 wz
 if_e	jmp	#LR__0572
LR__0571
	mov	result1, #13
	jmp	#LR__0580
LR__0572
	add	local06, #48
	mov	local19, local06
	mov	local20, local19
	add	local20, #17
	mov	arg01, local20
	sub	local06, #48
	call	#_ff_cc_ld_word_0210
	add	local06, #8
	wrword	result1, local06
	rdword	local09, local06
	sub	local06, #8
	zerox	local09, #15
	abs	local17, local09 wc
	and	local17, #15
 if_b	neg	local17, local17
	cmp	local17, #0 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__0580
	add	local06, #48
	mov	local21, local06
	mov	local22, local21
	add	local22, #19
	mov	arg01, local22
	sub	local06, #48
	call	#_ff_cc_ld_word_0210
	mov	local23, result1
	zerox	local23, #15 wz
 if_ne	jmp	#LR__0573
	mov	local24, local21
	add	local24, #32
	mov	arg01, local24
	call	#_ff_cc_ld_dword_0212
	mov	local23, result1
LR__0573
	mov	local25, local21
	add	local25, #14
	mov	arg01, local25
	call	#_ff_cc_ld_word_0210
	mov	local26, result1
	mov	local09, local26
	zerox	local09, #15 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__0580
	mov	local27, local26
	zerox	local27, #15
	mov	local28, local27
	add	local28, local15
	mov	local29, local28
	add	local06, #8
	rdword	local30, local06
	sub	local06, #8
	zerox	local30, #15
	abs	local31, local30 wc
	shr	local31, #4
 if_b	neg	local31, local31
	add	local29, local31
	cmp	local23, local29 wcz
 if_b	mov	result1, #13
 if_b	jmp	#LR__0580
	mov	local32, local23
	sub	local32, local29
	add	local06, #10
	rdword	muldivb_, local06
	sub	local06, #10
	zerox	muldivb_, #15
	mov	muldiva_, local32
	call	#unsdivide_
	mov	local33, muldivb_ wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__0580
	mov	local11, #0
	cmp	local33, ##268435445 wcz
 if_be	mov	local11, #3
	cmp	local33, ##65525 wcz
 if_be	mov	local11, #2
	cmp	local33, ##4085 wcz
 if_be	mov	local11, #1
	cmp	local11, #0 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__0580
	mov	local34, local33
	add	local34, #2
	add	local06, #20
	wrlong	local34, local06
	add	local06, #8
	wrlong	local12, local06
	mov	local35, local26
	zerox	local35, #15
	mov	local36, local12
	add	local36, local35
	add	local06, #4
	wrlong	local36, local06
	mov	local37, local12
	add	local37, local29
	add	local06, #8
	wrlong	local37, local06
	sub	local06, #40
	cmp	local11, #3 wz
 if_ne	jmp	#LR__0574
	add	local06, #48
	mov	arg01, local06
	sub	local06, #48
	add	arg01, #42
	call	#_ff_cc_ld_word_0210
	mov	local09, result1
	zerox	local09, #15 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__0580
	add	local06, #8
	rdword	local09, local06
	sub	local06, #8
	zerox	local09, #15 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__0580
	add	local06, #48
	mov	local38, local06
	mov	local39, local38
	add	local39, #44
	mov	arg01, local39
	sub	local06, #48
	call	#_ff_cc_ld_dword_0212
	add	local06, #36
	wrlong	result1, local06
	sub	local06, #16
	rdlong	local40, local06
	sub	local06, #20
	shl	local40, #2
	jmp	#LR__0577
LR__0574
	add	local06, #8
	rdword	local09, local06
	sub	local06, #8
	zerox	local09, #15 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__0580
	add	local06, #32
	rdlong	local09, local06
	add	local09, local15
	add	local06, #4
	wrlong	local09, local06
	sub	local06, #36
	cmp	local11, #2 wz
 if_ne	jmp	#LR__0575
	add	local06, #20
	rdlong	local09, local06
	sub	local06, #20
	shl	local09, #1
	jmp	#LR__0576
LR__0575
	add	local06, #20
	rdlong	local41, local06
	mov	local09, local41
	shl	local09, #1
	add	local09, local41
	shr	local09, #1
	sub	local06, #20
	test	local41, #1 wz
 if_ne	add	local09, #1
LR__0576
	mov	local40, local09
LR__0577
	mov	local30, local40
	add	local30, #511
	shr	local30, #9
	add	local06, #24
	rdlong	local17, local06
	sub	local06, #24
	cmp	local17, local30 wcz
 if_b	mov	result1, #13
 if_b	jmp	#LR__0580
	add	local06, #16
	wrlong	##-1, local06
	sub	local06, #4
	wrlong	##-1, local06
	sub	local06, #8
	wrbyte	#128, local06
	sub	local06, #4
	cmp	local11, #3 wz
 if_ne	jmp	#LR__0579
	add	local06, #48
	mov	arg01, local06
	sub	local06, #48
	add	arg01, #48
	call	#_ff_cc_ld_word_0210
	mov	local09, result1
	zerox	local09, #15
	cmp	local09, #1 wz
 if_ne	jmp	#LR__0579
	mov	local42, local06
	mov	local43, local12
	add	local43, #1
	mov	local44, local43
	mov	arg01, local42
	mov	arg02, local44
	call	#_ff_cc_move_window_0230
	mov	local45, result1 wz
 if_ne	jmp	#LR__0579
	add	local06, #4
	wrbyte	#0, local06
	add	local06, #44
	mov	local17, local06
	mov	local30, local17
	add	local30, #510
	mov	local31, local30
	mov	arg01, local31
	sub	local06, #48
	call	#_ff_cc_ld_word_0210
	mov	local18, result1
	mov	local09, local18
	zerox	local09, #15
	cmp	local09, ##43605 wz
 if_ne	jmp	#LR__0578
	add	local06, #48
	mov	local43, local06
	mov	local42, local43
	mov	local44, local42
	mov	arg01, local44
	sub	local06, #48
	call	#_ff_cc_ld_dword_0212
	mov	local45, result1
	cmp	local45, ##1096897106 wz
 if_ne	jmp	#LR__0578
	add	local06, #48
	mov	local46, local06
	mov	local41, local46
	add	local41, #484
	mov	local47, local41
	mov	arg01, local47
	sub	local06, #48
	call	#_ff_cc_ld_dword_0212
	mov	local48, result1
	cmp	local48, ##1631679090 wz
 if_ne	jmp	#LR__0578
	add	local06, #48
	mov	local49, local06
	mov	local50, local49
	add	local50, #488
	mov	arg01, local50
	sub	local06, #48
	call	#_ff_cc_ld_dword_0212
	mov	local30, result1
	add	local06, #16
	wrlong	local30, local06
	add	local06, #32
	mov	local51, local06
	mov	local52, local51
	add	local52, #492
	mov	local09, local52
	mov	arg01, local09
	sub	local06, #48
	call	#_ff_cc_ld_dword_0212
	mov	local30, result1
	add	local06, #12
	wrlong	local30, local06
	sub	local06, #12
LR__0578
LR__0579
	wrbyte	local11, local06
	add	ptr__ff_cc_dat__, #4
	rdword	local09, ptr__ff_cc_dat__
	add	local09, #1
	wrword	local09, ptr__ff_cc_dat__
	rdword	local17, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #4
	add	local06, #6
	wrword	local17, local06
' 				&& ld_dword(fs->win +  0 ) == 0x41615252
' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
' 			{
' 
' 				fs->free_clst = ld_dword(fs->win +  488 );
' 
' 
' 				fs->last_clst = ld_dword(fs->win +  492 );
' 
' 			}
' 		}
' 
' 
' 	}
' 
' 	fs->fs_type = (BYTE)fmt;
' 	fs->id = ++Fsid;
' #line 3589 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	return FR_OK;
	mov	result1, #0
LR__0580
	mov	ptra, fp
	call	#popregs_
_ff_cc_mount_volume_0326_ret
	ret

_ff_cc_validate_0328
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
	mov	local03, #9
 if_e	jmp	#LR__0581
	rdlong	local04, local01 wz
 if_e	jmp	#LR__0581
	rdlong	local05, local01
	rdbyte	local06, local05 wz
 if_e	jmp	#LR__0581
	add	local01, #4
	rdword	local07, local01
	sub	local01, #4
	zerox	local07, #15
	rdlong	local08, local01
	add	local08, #6
	rdword	local09, local08
	sub	local08, #6
	mov	local10, local09
	zerox	local10, #15
	cmp	local07, local10 wz
 if_ne	jmp	#LR__0581
	rdlong	local05, local01
	add	local05, #1
	rdbyte	local07, local05
	sub	local05, #1
	mov	local06, local07
	mov	arg01, local06 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	ptr__ff_cc_dat__, #380
 if_e	rdbyte	result1, ptr__ff_cc_dat__
 if_e	sub	ptr__ff_cc_dat__, #380
	mov	local11, result1
	mov	local04, local11
	zerox	local04, #7
	and	local04, #1 wz
 if_e	mov	local03, #0
LR__0581
	cmp	local03, #0 wz
 if_e	rdlong	local04, local01
 if_ne	mov	local04, #0
	wrlong	local04, local02
' 			res = FR_OK;
' 		}
' 
' 	}
' 	*rfs = (res == FR_OK) ? obj->fs : 0;
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_ff_cc_validate_0328_ret
	ret

_ff_cc_f_mount
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	mov	arg01, fp
	sub	fp, #28
	call	#_ff_cc_get_ldnumber_0309
	add	fp, #20
	wrlong	result1, fp
	mov	local01, result1
	sub	fp, #20
	cmps	local01, #0 wcz
 if_b	mov	result1, #11
 if_b	jmp	#LR__0584
	add	fp, #20
	rdlong	local02, fp
	shl	local02, #2
	add	local02, ptr__ff_cc_dat__
	rdlong	local01, local02
	sub	fp, #4
	wrlong	local01, fp
	rdlong	local01, fp wz
	sub	fp, #16
 if_e	jmp	#LR__0582
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	wrbyte	#0, local01
LR__0582
	add	fp, #4
	rdlong	local01, fp wz
	sub	fp, #4
 if_e	jmp	#LR__0583
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	wrbyte	#0, local01
LR__0583
	add	fp, #20
	rdlong	local03, fp
	shl	local03, #2
	add	local03, ptr__ff_cc_dat__
	sub	fp, #16
	rdlong	local01, fp
	wrlong	local01, local03
	add	fp, #8
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0584
	add	fp, #8
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, fp
	sub	fp, #4
	mov	arg03, #0
	call	#_ff_cc_mount_volume_0326
	add	fp, #24
	wrlong	result1, fp
' 
' 	res = mount_volume(&path, &fs, 0);
' 	return res ;
	sub	fp, #24
LR__0584
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_mount_ret
	ret

_ff_cc_f_open
	mov	COUNT_, #24
	call	#pushregs_
	add	ptra, #132
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	sub	fp, #8
	rdlong	local01, fp wz
	sub	fp, #4
 if_e	mov	result1, #9
 if_e	jmp	#LR__0608
	add	fp, #12
	rdbyte	local02, fp
	mov	local01, local02
	and	local01, #63
	wrbyte	local01, fp
	sub	fp, #4
	mov	local03, fp
	add	fp, #56
	mov	local04, fp
	sub	fp, #52
	rdbyte	arg03, fp
	sub	fp, #12
	mov	arg01, local03
	mov	arg02, local04
	call	#_ff_cc_mount_volume_0326
	mov	local05, result1
	add	fp, #16
	wrlong	local05, fp
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0606
	add	fp, #64
	rdlong	local01, fp
	sub	fp, #44
	wrlong	local01, fp
	mov	local06, fp
	sub	fp, #12
	rdlong	local07, fp
	sub	fp, #8
	mov	arg01, local06
	mov	arg02, local07
	call	#_ff_cc_follow_path_0303
	mov	local08, result1
	add	fp, #16
	wrlong	local08, fp
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0585
	add	fp, #63
	rdbyte	local01, fp
	sub	fp, #63
	zerox	local01, #7
	test	local01, #128 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #16
LR__0585
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7
	test	local01, #28 wz
 if_e	jmp	#LR__0591
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_e	jmp	#LR__0587
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	cmp	local01, #4 wz
 if_ne	jmp	#LR__0586
	mov	arg01, local06
	call	#_ff_cc_dir_register_0284
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
LR__0586
	add	fp, #12
	rdbyte	local09, fp
	mov	local10, local09
	or	local10, #8
	wrbyte	local10, fp
	sub	fp, #12
	jmp	#LR__0590
LR__0587
	add	fp, #26
	rdbyte	local01, fp
	sub	fp, #26
	zerox	local01, #7
	test	local01, #17 wz
 if_e	jmp	#LR__0588
	add	fp, #16
	wrlong	#7, fp
	sub	fp, #16
	jmp	#LR__0589
LR__0588
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7
	test	local01, #4 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#8, fp
 if_ne	sub	fp, #16
LR__0589
LR__0590
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0596
	add	fp, #12
	rdbyte	local07, fp
	sub	fp, #12
	zerox	local07, #7
	test	local07, #8 wz
 if_e	jmp	#LR__0596
	add	fp, #64
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	arg02, fp
	sub	fp, #48
	call	#_ff_cc_ld_clust_0271
	mov	local05, result1
	add	fp, #68
	wrlong	local05, fp
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #48
	add	arg01, #14
	mov	arg02, ##1310785536
	call	#_ff_cc_st_dword_0214
	add	fp, #48
	rdlong	local01, fp
	add	local01, #11
	wrbyte	#32, local01
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	arg02, fp
	sub	fp, #48
	mov	arg03, #0
	call	#_ff_cc_st_clust_0272
	add	fp, #48
	rdlong	arg01, fp
	sub	fp, #48
	add	arg01, #28
	mov	arg02, #0
	call	#_ff_cc_st_dword_0214
	add	fp, #64
	rdlong	local01, fp
	add	local01, #3
	wrbyte	#1, local01
	add	fp, #4
	rdlong	local11, fp
	sub	fp, #68
	mov	local01, local11 wz
 if_e	jmp	#LR__0596
	add	fp, #64
	rdlong	local01, fp
	add	local01, #44
	rdlong	local07, local01
	add	fp, #16
	wrlong	local07, fp
	sub	fp, #60
	mov	local12, fp
	add	fp, #48
	rdlong	arg02, fp
	sub	fp, #68
	mov	arg01, local12
	mov	arg03, #0
	call	#_ff_cc_remove_chain_0246
	mov	local11, result1
	add	fp, #16
	wrlong	local11, fp
	sub	fp, #16
	mov	local01, local11 wz
 if_ne	jmp	#LR__0596
	add	fp, #64
	rdlong	arg01, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #80
	call	#_ff_cc_move_window_0230
	mov	local05, result1
	add	fp, #16
	wrlong	local05, fp
	add	fp, #52
	rdlong	local13, fp
	sub	local13, #1
	sub	fp, #4
	rdlong	local01, fp
	sub	fp, #64
	add	local01, #12
	wrlong	local13, local01
	jmp	#LR__0596
LR__0591
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0595
	add	fp, #26
	rdbyte	local01, fp
	sub	fp, #26
	zerox	local01, #7
	test	local01, #16 wz
 if_e	jmp	#LR__0592
	add	fp, #16
	wrlong	#4, fp
	sub	fp, #16
	jmp	#LR__0594
LR__0592
	add	fp, #12
	rdbyte	local11, fp
	sub	fp, #12
	mov	local01, local11
	zerox	local01, #7
	test	local01, #2 wz
 if_e	jmp	#LR__0593
	add	fp, #26
	rdbyte	local08, fp
	sub	fp, #26
	mov	local07, local08
	zerox	local07, #7
	and	local07, #1 wz
 if_e	jmp	#LR__0593
	mov	local01, #7
	add	fp, #16
	wrlong	#7, fp
	sub	fp, #16
LR__0593
LR__0594
LR__0595
LR__0596
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0598
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7
	test	local01, #8 wz
 if_e	jmp	#LR__0597
	add	fp, #12
	rdbyte	local14, fp
	mov	local15, local14
	or	local15, #64
	wrbyte	local15, fp
	sub	fp, #12
LR__0597
	add	fp, #4
	rdlong	local01, fp
	add	fp, #60
	rdlong	local07, fp
	add	local07, #44
	rdlong	local05, local07
	add	local01, #32
	wrlong	local05, local01
	sub	fp, #60
	rdlong	local01, fp
	add	fp, #44
	rdlong	local07, fp
	sub	fp, #48
	add	local01, #36
	wrlong	local07, local01
LR__0598
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0605
	add	fp, #4
	rdlong	local01, fp
	add	fp, #60
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	arg02, fp
	sub	fp, #48
	call	#_ff_cc_ld_clust_0271
	mov	local16, result1
	add	local01, #8
	wrlong	local16, local01
	add	fp, #4
	rdlong	local01, fp
	add	fp, #44
	rdlong	arg01, fp
	sub	fp, #48
	add	arg01, #28
	call	#_ff_cc_ld_dword_0212
	add	local01, #12
	wrlong	result1, local01
	add	fp, #4
	rdlong	local01, fp
	add	fp, #60
	rdlong	local07, fp
	wrlong	local07, local01
	sub	fp, #60
	rdlong	local01, fp
	add	fp, #60
	rdlong	local07, fp
	add	local07, #6
	rdword	local05, local07
	add	local01, #4
	wrword	local05, local01
	sub	fp, #60
	rdlong	local01, fp
	add	fp, #8
	rdbyte	local07, fp
	add	local01, #16
	wrbyte	local07, local01
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #17
	wrbyte	#0, local01
	rdlong	local01, fp
	add	local01, #28
	wrlong	#0, local01
	rdlong	local01, fp
	add	local01, #20
	wrlong	#0, local01
	add	fp, #8
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7
	test	local01, #32 wz
 if_e	jmp	#LR__0604
	add	fp, #4
	rdlong	local07, fp
	sub	fp, #4
	add	local07, #12
	rdlong	local17, local07
	cmp	local17, #0 wcz
 if_be	jmp	#LR__0604
	add	fp, #4
	rdlong	local01, fp
	mov	local07, local01
	add	local07, #12
	rdlong	local05, local07
	add	local01, #20
	wrlong	local05, local01
	add	fp, #60
	rdlong	local11, fp
	add	local11, #10
	rdword	local05, local11
	shl	local05, #9
	add	fp, #8
	wrlong	local05, fp
	sub	fp, #68
	rdlong	local01, fp
	add	local01, #8
	rdlong	local07, local01
	add	fp, #72
	wrlong	local07, fp
' 				fp->fptr = fp->obj.objsize;
' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
' 				clst = fp->obj.sclust;
' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
	sub	fp, #72
	rdlong	local01, fp
	add	local01, #12
	rdlong	local07, local01
	add	fp, #80
	wrlong	local07, fp
	sub	fp, #84
LR__0599
	add	fp, #16
	rdlong	local05, fp
	sub	fp, #16
	mov	local08, local05 wz
 if_ne	jmp	#LR__0600
	add	fp, #84
	rdlong	local16, fp
	mov	local17, local16
	sub	fp, #12
	rdlong	local18, fp
	sub	fp, #72
	mov	local19, local18
	cmp	local17, local19 wcz
 if_be	jmp	#LR__0600
	add	fp, #4
	rdlong	local20, fp
	add	fp, #72
	rdlong	arg02, fp
	sub	fp, #76
	mov	arg01, local20
	call	#_ff_cc_get_fat_0238
	add	fp, #76
	wrlong	result1, fp
	sub	fp, #76
	cmp	result1, #1 wcz
 if_be	add	fp, #16
 if_be	wrlong	#2, fp
 if_be	sub	fp, #16
	add	fp, #76
	rdlong	local21, fp
	sub	fp, #76
	cmp	local21, ##-1 wz
 if_e	add	fp, #16
 if_e	wrlong	#1, fp
 if_e	sub	fp, #16
	add	fp, #84
	rdlong	local22, fp
	mov	local21, local22
	sub	fp, #12
	rdlong	local23, fp
	mov	local24, local23
	sub	local21, local24
	add	fp, #12
	wrlong	local21, fp
	sub	fp, #84
	jmp	#LR__0599
LR__0600
	add	fp, #4
	rdlong	local01, fp
	add	fp, #72
	rdlong	local07, fp
	add	local01, #24
	wrlong	local07, local01
	sub	fp, #60
	rdlong	local11, fp
	sub	fp, #16
	mov	local01, local11 wz
 if_ne	jmp	#LR__0603
	add	fp, #84
	rdlong	local05, fp
	sub	fp, #84
	mov	local08, local05
	mov	local07, local08
	and	local07, #511 wz
 if_e	jmp	#LR__0603
	add	fp, #64
	rdlong	arg01, fp
	add	fp, #12
	rdlong	local08, fp
	sub	fp, #76
	mov	local07, local08
	mov	arg02, local07
	call	#_ff_cc_clst2sect_0233
	mov	local05, result1
	add	fp, #80
	wrlong	local05, fp
	rdlong	local11, fp wz
	sub	fp, #80
 if_ne	jmp	#LR__0601
	mov	local01, #2
	add	fp, #16
	wrlong	#2, fp
	sub	fp, #16
	jmp	#LR__0602
LR__0601
	add	fp, #4
	rdlong	local11, fp
	mov	local01, local11
	add	fp, #76
	rdlong	local08, fp
	mov	local07, local08
	add	fp, #4
	rdlong	local16, fp
	sub	fp, #84
	mov	local17, local16
	mov	local05, local17
	shr	local05, #9
	add	local07, local05
	add	local01, #28
	wrlong	local07, local01
	sub	local01, #28
LR__0602
LR__0603
LR__0604
LR__0605
LR__0606
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_e	jmp	#LR__0607
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	wrlong	#0, local01
LR__0607
' 
' 	return res ;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0608
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_open_ret
	ret

_ff_cc_f_read
	mov	COUNT_, #30
	call	#pushregs_
	add	ptra, #80
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #24
	wrlong	#0, fp
	sub	fp, #32
	rdlong	local01, fp
	add	fp, #44
	wrlong	local01, fp
	sub	fp, #36
	rdlong	local01, fp
	wrlong	#0, local01
	sub	fp, #12
	rdlong	local02, fp
	add	fp, #20
	mov	local03, fp
	mov	arg01, local02
	mov	arg02, local03
	sub	fp, #24
	call	#_ff_cc_validate_0328
	add	fp, #20
	wrlong	result1, fp
	mov	local04, result1
	sub	fp, #20
	mov	local01, local04 wz
 if_ne	jmp	#LR__0609
	add	fp, #4
	rdlong	local05, fp
	add	local05, #17
	rdbyte	local06, local05
	mov	local07, local06
	zerox	local07, #7
	add	fp, #16
	wrlong	local07, fp
	sub	fp, #20
	mov	local08, local07 wz
 if_e	jmp	#LR__0610
LR__0609
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	jmp	#LR__0628
LR__0610
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #16
	rdbyte	local01, local04
	test	local01, #1 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__0628
	add	fp, #4
	rdlong	local04, fp
	mov	local05, local04
	add	local04, #12
	rdlong	local01, local04
	add	local05, #20
	rdlong	local08, local05
	sub	local01, local08
	add	fp, #32
	wrlong	local01, fp
	sub	fp, #24
	rdlong	local01, fp
	add	fp, #24
	rdlong	local09, fp
	sub	fp, #36
	cmp	local01, local09 wcz
 if_be	jmp	#LR__0611
	add	fp, #36
	rdlong	local01, fp
	sub	fp, #24
	wrlong	local01, fp
	sub	fp, #12
LR__0611
' 
' 	for ( ; btr;
LR__0612
	add	fp, #12
	rdlong	local04, fp
	sub	fp, #12
	mov	local01, local04 wz
 if_e	jmp	#LR__0627
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #20
	rdlong	local10, local09
	test	local10, #511 wz
 if_ne	jmp	#LR__0623
	add	fp, #4
	rdlong	local05, fp
	add	local05, #20
	rdlong	local09, local05
	shr	local09, #9
	add	fp, #20
	rdlong	local11, fp
	mov	local12, local11
	add	local12, #10
	rdword	local13, local12
	mov	local07, local13
	zerox	local07, #15
	sub	local07, #1
	and	local09, local07
	add	fp, #24
	wrlong	local09, fp
	rdlong	local09, fp wz
	sub	fp, #48
 if_ne	jmp	#LR__0617
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #20
	rdlong	local10, local09 wz
 if_ne	jmp	#LR__0613
	add	fp, #4
	rdlong	local09, fp
	add	local09, #8
	rdlong	local10, local09
	add	fp, #24
	wrlong	local10, fp
	sub	fp, #28
	jmp	#LR__0614
LR__0613
	add	fp, #4
	rdlong	local14, fp
	mov	local05, local14
	sub	fp, #4
	add	local05, #24
	rdlong	arg02, local05
	mov	arg01, local14
	call	#_ff_cc_get_fat_0238
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
LR__0614
	add	fp, #28
	rdlong	local09, fp
	sub	fp, #28
	cmp	local09, #2 wcz
 if_ae	jmp	#LR__0615
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#2, local09
	mov	result1, #2
	jmp	#LR__0628
LR__0615
	add	fp, #28
	rdlong	local09, fp
	sub	fp, #28
	cmp	local09, ##-1 wz
 if_ne	jmp	#LR__0616
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__0628
LR__0616
	add	fp, #4
	rdlong	local09, fp
	add	fp, #24
	rdlong	local10, fp
	sub	fp, #28
	add	local09, #24
	wrlong	local10, local09
LR__0617
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local10, fp
	sub	fp, #4
	add	local10, #24
	rdlong	arg02, local10
	call	#_ff_cc_clst2sect_0233
	add	fp, #32
	wrlong	result1, fp
	rdlong	local09, fp wz
	sub	fp, #32
 if_ne	jmp	#LR__0618
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#2, local09
	mov	result1, #2
	jmp	#LR__0628
LR__0618
	add	fp, #32
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	add	local09, local10
	sub	fp, #16
	wrlong	local09, fp
	sub	fp, #20
	rdlong	local09, fp
	shr	local09, #9
	add	fp, #32
	wrlong	local09, fp
	sub	fp, #44
	cmp	local09, #0 wcz
 if_be	jmp	#LR__0622
	add	fp, #48
	rdlong	local09, fp
	sub	fp, #4
	rdlong	local10, fp
	add	local09, local10
	sub	fp, #20
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #10
	rdword	local08, local07
	cmp	local09, local08 wcz
 if_be	jmp	#LR__0619
	add	fp, #24
	rdlong	local05, fp
	add	local05, #10
	rdword	local09, local05
	add	fp, #24
	rdlong	local08, fp
	sub	local09, local08
	sub	fp, #4
	wrlong	local09, fp
	sub	fp, #44
LR__0619
	add	fp, #24
	rdlong	local09, fp
	add	local09, #1
	rdbyte	arg01, local09
	add	fp, #28
	rdlong	arg02, fp
	sub	fp, #20
	rdlong	arg03, fp
	add	fp, #12
	rdlong	arg04, fp
	sub	fp, #44
	call	#_ff_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__0620
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__0628
LR__0620
	add	fp, #24
	rdlong	local09, fp
	sub	fp, #24
	add	local09, #3
	rdbyte	local10, local09 wz
 if_e	jmp	#LR__0621
	add	fp, #24
	rdlong	local07, fp
	add	local07, #44
	rdlong	local08, local07
	add	fp, #8
	rdlong	local13, fp
	sub	local08, local13
	add	fp, #12
	rdlong	local15, fp
	sub	fp, #44
	cmp	local08, local15 wcz
 if_ae	jmp	#LR__0621
	add	fp, #24
	rdlong	local16, fp
	add	local16, #48
	add	fp, #28
	rdlong	local05, fp
	mov	local09, local05
	sub	fp, #28
	rdlong	local08, fp
	mov	local06, local08
	add	local06, #44
	rdlong	local07, local06
	sub	local06, #44
	mov	local10, local07
	add	fp, #8
	rdlong	local11, fp
	sub	fp, #32
	mov	local12, local11
	sub	local10, local12
	mov	local13, local10
	shl	local13, #9
	mov	local17, local13
	add	local09, local13
	mov	local15, local09
	mov	local18, local16
	decod	local19, #9
	mov	arg01, local15
	mov	arg02, local18
	decod	arg03, #9
	call	#_ff_cc_mem_cpy_0217
LR__0621
	add	fp, #44
	rdlong	local09, fp
	shl	local09, #9
	sub	fp, #4
	wrlong	local09, fp
	sub	fp, #40
' 					mem_cpy(rbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ), fs->win,  ((UINT) 512 ) );
' 				}
' #line 3949 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 				rcnt =  ((UINT) 512 )  * cc;
' 				continue;
	jmp	#LR__0626
LR__0622
	add	fp, #4
	rdlong	local09, fp
	add	fp, #28
	rdlong	local10, fp
	sub	fp, #32
	add	local09, #28
	wrlong	local10, local09
LR__0623
	add	fp, #4
	rdlong	local05, fp
	add	local05, #20
	rdlong	local06, local05
	and	local06, #511
	decod	local09, #9
	sub	local09, local06
	add	fp, #36
	wrlong	local09, fp
	sub	fp, #28
	rdlong	local10, fp
	sub	fp, #12
	cmp	local09, local10 wcz
 if_be	jmp	#LR__0624
	add	fp, #12
	rdlong	local09, fp
	add	fp, #28
	wrlong	local09, fp
	sub	fp, #40
LR__0624
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local10, fp
	sub	fp, #4
	add	local10, #28
	rdlong	arg02, local10
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_e	jmp	#LR__0625
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__0628
LR__0625
	add	fp, #24
	rdlong	local20, fp
	add	local20, #48
	add	fp, #28
	rdlong	arg01, fp
	mov	arg02, local20
	sub	fp, #48
	rdlong	local06, fp
	add	local06, #20
	rdlong	local13, local06
	and	local13, #511
	add	arg02, local13
	add	fp, #36
	rdlong	arg03, fp
	sub	fp, #40
	call	#_ff_cc_mem_cpy_0217
LR__0626
	add	fp, #12
	rdlong	local09, fp
	add	fp, #28
	rdlong	local06, fp
	sub	local09, local06
	sub	fp, #28
	wrlong	local09, fp
	add	fp, #4
	rdlong	local08, fp
	rdlong	local12, local08
	add	fp, #24
	rdlong	local15, fp
	mov	local17, local15
	add	local12, local15
	wrlong	local12, local08
	add	fp, #12
	rdlong	local19, fp
	mov	local18, local19
	sub	fp, #12
	rdlong	local21, fp
	mov	local22, local21
	add	local18, local21
	add	fp, #12
	wrlong	local18, fp
	sub	fp, #48
	rdlong	local23, fp
	mov	local24, local23
	mov	local25, local23
	mov	local26, local25
	add	local26, #20
	rdlong	local27, local26
	sub	local26, #20
	mov	local28, local27
	add	fp, #36
	rdlong	local29, fp
	sub	fp, #40
	mov	local30, local29
	add	local28, local29
	add	local24, #20
	wrlong	local28, local24
	sub	local24, #20
	jmp	#LR__0612
LR__0627
' 		mem_cpy(rbuff, fs->win + fp->fptr %  ((UINT) 512 ) , rcnt);
' #line 3973 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	}
' 
' 	return FR_OK ;
	mov	result1, #0
LR__0628
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_read_ret
	ret

_ff_cc_f_write
	mov	COUNT_, #48
	call	#pushregs_
	add	ptra, #80
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #20
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local01, fp
	add	fp, #40
	wrlong	local01, fp
	sub	fp, #32
	rdlong	local01, fp
	wrlong	#0, local01
	sub	fp, #12
	rdlong	local02, fp
	add	fp, #20
	mov	local03, fp
	mov	arg01, local02
	mov	arg02, local03
	sub	fp, #24
	call	#_ff_cc_validate_0328
	add	fp, #20
	wrlong	result1, fp
	mov	local04, result1
	sub	fp, #20
	mov	local01, local04 wz
 if_ne	jmp	#LR__0629
	add	fp, #4
	rdlong	local05, fp
	add	local05, #17
	rdbyte	local06, local05
	add	fp, #16
	wrlong	local06, fp
	sub	fp, #20
	mov	local07, local06 wz
 if_e	jmp	#LR__0630
LR__0629
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	jmp	#LR__0654
LR__0630
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #16
	rdbyte	local01, local04
	test	local01, #2 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__0654
	add	fp, #4
	rdlong	local08, fp
	mov	local09, local08
	add	local09, #20
	rdlong	local07, local09
	mov	local05, local07
	add	fp, #8
	rdlong	local10, fp
	mov	local06, local10
	add	local05, local10
	sub	fp, #8
	rdlong	local11, fp
	sub	fp, #4
	mov	local12, local11
	add	local12, #20
	rdlong	local13, local12
	sub	local12, #20
	mov	local14, local13
	cmp	local05, local14 wcz
 if_ae	jmp	#LR__0631
	add	fp, #4
	rdlong	local04, fp
	neg	local01, #1
	add	local04, #20
	rdlong	local05, local04
	sub	local01, local05
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #12
LR__0631
' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
' 	}
' 
' 	for ( ; btw;
LR__0632
	add	fp, #12
	rdlong	local04, fp
	sub	fp, #12
	mov	local01, local04 wz
 if_e	jmp	#LR__0653
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #20
	rdlong	local09, local15
	test	local09, #511 wz
 if_ne	jmp	#LR__0647
	add	fp, #4
	rdlong	local05, fp
	add	local05, #20
	rdlong	local15, local05
	shr	local15, #9
	add	fp, #20
	rdlong	local10, fp
	add	local10, #10
	rdword	local11, local10
	mov	local06, local11
	zerox	local06, #15
	sub	local06, #1
	and	local15, local06
	add	fp, #20
	wrlong	local15, fp
	rdlong	local15, fp wz
	sub	fp, #44
 if_ne	jmp	#LR__0638
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #20
	rdlong	local09, local15 wz
 if_ne	jmp	#LR__0633
	add	fp, #4
	rdlong	local15, fp
	add	local15, #8
	rdlong	local09, local15
	add	fp, #24
	wrlong	local09, fp
	rdlong	local15, fp wz
	sub	fp, #28
 if_ne	jmp	#LR__0634
	add	fp, #4
	rdlong	local16, fp
	sub	fp, #4
	mov	arg01, local16
	mov	arg02, #0
	call	#_ff_cc_create_chain_0252
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	jmp	#LR__0634
LR__0633
	add	fp, #4
	rdlong	local17, fp
	mov	local05, local17
	sub	fp, #4
	add	local05, #24
	rdlong	arg02, local05
	mov	arg01, local17
	call	#_ff_cc_create_chain_0252
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
LR__0634
	add	fp, #28
	rdlong	local15, fp wz
	sub	fp, #28
 if_e	jmp	#LR__0653
	add	fp, #28
	rdlong	local15, fp
	sub	fp, #28
	cmp	local15, #1 wz
 if_ne	jmp	#LR__0635
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#2, local15
	mov	result1, #2
	jmp	#LR__0654
LR__0635
	add	fp, #28
	rdlong	local15, fp
	sub	fp, #28
	cmp	local15, ##-1 wz
 if_ne	jmp	#LR__0636
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#1, local15
	mov	result1, #1
	jmp	#LR__0654
LR__0636
	add	fp, #4
	rdlong	local15, fp
	add	fp, #24
	rdlong	local09, fp
	add	local15, #24
	wrlong	local09, local15
	sub	fp, #24
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #8
	rdlong	local09, local15 wz
 if_ne	jmp	#LR__0637
	add	fp, #4
	rdlong	local15, fp
	add	fp, #24
	rdlong	local09, fp
	sub	fp, #28
	add	local15, #8
	wrlong	local09, local15
LR__0637
LR__0638
	add	fp, #24
	rdlong	local15, fp
	sub	fp, #20
	rdlong	local09, fp
	sub	fp, #4
	add	local15, #44
	rdlong	local07, local15
	add	local09, #28
	rdlong	local10, local09
	cmp	local07, local10 wz
 if_ne	jmp	#LR__0639
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #24
	call	#_ff_cc_sync_window_0228
	cmp	result1, #0 wz
 if_e	jmp	#LR__0639
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#1, local15
	mov	result1, #1
	jmp	#LR__0654
LR__0639
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #24
	rdlong	arg02, local09
	call	#_ff_cc_clst2sect_0233
	add	fp, #32
	wrlong	result1, fp
	rdlong	local15, fp wz
	sub	fp, #32
 if_ne	jmp	#LR__0640
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#2, local15
	mov	result1, #2
	jmp	#LR__0654
LR__0640
	add	fp, #32
	rdlong	local15, fp
	add	fp, #12
	rdlong	local09, fp
	add	local15, local09
	sub	fp, #12
	wrlong	local15, fp
	sub	fp, #20
	rdlong	local15, fp
	shr	local15, #9
	add	fp, #28
	wrlong	local15, fp
	sub	fp, #40
	cmp	local15, #0 wcz
 if_be	jmp	#LR__0644
	add	fp, #44
	rdlong	local15, fp
	sub	fp, #4
	rdlong	local09, fp
	add	local15, local09
	sub	fp, #16
	rdlong	local06, fp
	sub	fp, #24
	add	local06, #10
	rdword	local07, local06
	cmp	local15, local07 wcz
 if_be	jmp	#LR__0641
	add	fp, #24
	rdlong	local05, fp
	add	local05, #10
	rdword	local15, local05
	add	fp, #20
	rdlong	local07, fp
	sub	local15, local07
	sub	fp, #4
	wrlong	local15, fp
	sub	fp, #40
LR__0641
	add	fp, #24
	rdlong	local15, fp
	add	local15, #1
	rdbyte	arg01, local15
	add	fp, #24
	rdlong	arg02, fp
	sub	fp, #16
	rdlong	arg03, fp
	add	fp, #8
	rdlong	arg04, fp
	sub	fp, #40
	call	#_ff_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__0642
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#1, local15
	mov	result1, #1
	jmp	#LR__0654
LR__0642
	add	fp, #24
	rdlong	local05, fp
	add	local05, #44
	rdlong	local15, local05
	add	fp, #8
	rdlong	local07, fp
	sub	local15, local07
	add	fp, #8
	rdlong	local10, fp
	sub	fp, #40
	cmp	local15, local10 wcz
 if_ae	jmp	#LR__0643
	add	fp, #24
	rdlong	local18, fp
	add	local18, #48
	add	fp, #24
	rdlong	arg02, fp
	sub	fp, #24
	rdlong	local07, fp
	add	local07, #44
	rdlong	local13, local07
	add	fp, #8
	rdlong	local12, fp
	sub	fp, #32
	sub	local13, local12
	shl	local13, #9
	add	arg02, local13
	mov	arg01, local18
	decod	arg03, #9
	call	#_ff_cc_mem_cpy_0217
	add	fp, #24
	rdlong	local15, fp
	sub	fp, #24
	add	local15, #3
	wrbyte	#0, local15
LR__0643
	add	fp, #40
	rdlong	local15, fp
	shl	local15, #9
	sub	fp, #4
	wrlong	local15, fp
	sub	fp, #36
' 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ),  ((UINT) 512 ) );
' 					fs->wflag = 0;
' 				}
' #line 4067 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 				wcnt =  ((UINT) 512 )  * cc;
' 				continue;
	jmp	#LR__0650
LR__0644
	add	fp, #4
	rdlong	local15, fp
	mov	local09, local15
	sub	fp, #4
	add	local15, #20
	rdlong	local07, local15
	add	local09, #12
	rdlong	local10, local09
	cmp	local07, local10 wcz
 if_b	jmp	#LR__0646
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #24
	call	#_ff_cc_sync_window_0228
	cmp	result1, #0 wz
 if_e	jmp	#LR__0645
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#1, local15
	mov	result1, #1
	jmp	#LR__0654
LR__0645
	add	fp, #24
	rdlong	local15, fp
	add	fp, #8
	rdlong	local09, fp
	sub	fp, #32
	add	local15, #44
	wrlong	local09, local15
LR__0646
	add	fp, #4
	rdlong	local15, fp
	add	fp, #28
	rdlong	local09, fp
	sub	fp, #32
	add	local15, #28
	wrlong	local09, local15
LR__0647
	add	fp, #4
	rdlong	local05, fp
	add	local05, #20
	rdlong	local08, local05
	and	local08, #511
	decod	local15, #9
	sub	local15, local08
	add	fp, #32
	wrlong	local15, fp
	sub	fp, #24
	rdlong	local09, fp
	sub	fp, #12
	cmp	local15, local09 wcz
 if_be	jmp	#LR__0648
	add	fp, #12
	rdlong	local15, fp
	add	fp, #24
	wrlong	local15, fp
	sub	fp, #36
LR__0648
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #28
	rdlong	arg02, local09
	call	#_ff_cc_move_window_0230
	cmp	result1, #0 wz
 if_e	jmp	#LR__0649
	add	fp, #4
	rdlong	local15, fp
	sub	fp, #4
	add	local15, #17
	wrbyte	#1, local15
	mov	result1, #1
	jmp	#LR__0654
LR__0649
	add	fp, #24
	rdlong	local19, fp
	add	local19, #48
	mov	arg01, local19
	sub	fp, #20
	rdlong	local05, fp
	add	local05, #20
	rdlong	local10, local05
	and	local10, #511
	add	arg01, local10
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg03, fp
	sub	fp, #36
	call	#_ff_cc_mem_cpy_0217
	add	fp, #24
	rdlong	local15, fp
	sub	fp, #24
	add	local15, #3
	wrbyte	#1, local15
LR__0650
	add	fp, #12
	rdlong	local15, fp
	add	fp, #24
	rdlong	local08, fp
	sub	local15, local08
	sub	fp, #24
	wrlong	local15, fp
	add	fp, #4
	rdlong	local07, fp
	mov	local12, local07
	rdlong	local10, local12
	add	fp, #20
	rdlong	local13, fp
	mov	local14, local13
	add	local10, local13
	wrlong	local10, local07
	add	fp, #12
	rdlong	local20, fp
	mov	local21, local20
	sub	fp, #12
	rdlong	local22, fp
	mov	local23, local22
	add	local21, local22
	add	fp, #12
	wrlong	local21, fp
	sub	fp, #44
	rdlong	local24, fp
	mov	local25, local24
	mov	local26, local24
	mov	local27, local26
	add	local27, #20
	rdlong	local28, local27
	sub	local27, #20
	mov	local29, local28
	add	fp, #32
	rdlong	local30, fp
	mov	local31, local30
	add	local29, local30
	add	local25, #20
	wrlong	local29, local25
	sub	local25, #20
	sub	fp, #32
	rdlong	local32, fp
	mov	local33, local32
	mov	local34, local32
	mov	local35, local34
	mov	local36, local32
	sub	fp, #4
	mov	local37, local36
	add	local35, #20
	rdlong	local38, local35
	sub	local35, #20
	mov	local39, local38
	add	local37, #12
	rdlong	local40, local37
	sub	local37, #12
	mov	local41, local40
	cmp	local39, local41 wcz
 if_be	jmp	#LR__0651
	add	fp, #4
	rdlong	local42, fp
	sub	fp, #4
	mov	local43, local42
	add	local43, #20
	rdlong	local44, local43
	sub	local43, #20
	mov	local45, local44
	jmp	#LR__0652
LR__0651
	add	fp, #4
	rdlong	local46, fp
	sub	fp, #4
	mov	local47, local46
	add	local47, #12
	rdlong	local48, local47
	sub	local47, #12
	mov	local45, local48
LR__0652
	add	local33, #12
	wrlong	local45, local33
	sub	local33, #12
	jmp	#LR__0632
LR__0653
	add	fp, #4
	rdlong	local01, fp
	mov	local05, local01
	sub	fp, #4
	add	local05, #16
	rdbyte	local15, local05
	or	local15, #64
	add	local01, #16
	wrbyte	local15, local01
' 		mem_cpy(fs->win + fp->fptr %  ((UINT) 512 ) , wbuff, wcnt);
' 		fs->wflag = 1;
' #line 4094 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	}
' 
' 	fp->flag |=  0x40 ;
' 
' 	return FR_OK ;
	mov	result1, #0
LR__0654
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_write_ret
	ret

_ff_cc_f_sync
	mov	COUNT_, #6
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_ff_cc_validate_0328
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0657
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #16
	rdbyte	local01, local02
	test	local01, #64 wz
 if_e	jmp	#LR__0656
	add	fp, #16
	wrlong	##1310785536, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #8
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #32
	rdlong	arg02, local03
	call	#_ff_cc_move_window_0230
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0655
	add	fp, #4
	rdlong	local01, fp
	add	local01, #36
	rdlong	local01, local01
	add	fp, #16
	wrlong	local01, fp
	add	local01, #11
	rdbyte	local04, local01
	or	local04, #32
	rdlong	local01, fp
	add	local01, #11
	wrbyte	local04, local01
	sub	fp, #16
	rdlong	local01, fp
	rdlong	arg01, local01
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #16
	rdlong	local05, fp
	sub	fp, #4
	add	local05, #8
	rdlong	arg03, local05
	call	#_ff_cc_st_clust_0272
	add	fp, #20
	rdlong	arg01, fp
	add	arg01, #28
	sub	fp, #16
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #12
	rdlong	arg02, local02
	call	#_ff_cc_st_dword_0214
	add	fp, #20
	rdlong	arg01, fp
	add	arg01, #22
	sub	fp, #4
	rdlong	arg02, fp
	sub	fp, #16
	call	#_ff_cc_st_dword_0214
	add	fp, #20
	rdlong	arg01, fp
	sub	fp, #20
	add	arg01, #18
	mov	arg02, #0
	call	#_ff_cc_st_word_0213
	add	fp, #12
	rdlong	local01, fp
	add	local01, #3
	wrbyte	#1, local01
	rdlong	arg01, fp
	sub	fp, #12
	call	#_ff_cc_sync_fs_0232
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #4
	rdlong	local01, fp
	mov	local06, local01
	sub	fp, #4
	add	local06, #16
	rdbyte	local03, local06
	and	local03, #191
	add	local01, #16
	wrbyte	local03, local01
LR__0655
LR__0656
LR__0657
' 					dir = fp->dir_ptr;
' 					dir[ 11 ] |=  0x20 ;
' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
' 					st_dword(dir +  22 , tm);
' 					st_word(dir +  18 , 0);
' 					fs->wflag = 1;
' 					res = sync_fs(fs);
' 					fp->flag &= (BYTE)~ 0x40 ;
' 				}
' 			}
' 		}
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_sync_ret
	ret

_ff_cc_f_close
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	sub	fp, #4
	call	#_ff_cc_f_sync
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0659
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_ff_cc_validate_0328
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0658
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	wrlong	#0, local01
LR__0658
LR__0659
' 
' 
' 
' 
' 			fp->obj.fs = 0;
' #line 4212 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 		}
' 	}
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_close_ret
	ret

_ff_cc_f_lseek
	mov	COUNT_, #17
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #12
	mov	local02, fp
	mov	arg01, local01
	mov	arg02, local02
	sub	fp, #16
	call	#_ff_cc_validate_0328
	add	fp, #12
	wrlong	result1, fp
	rdlong	local03, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0660
	add	fp, #4
	rdlong	local04, fp
	add	local04, #17
	rdbyte	local03, local04
	add	fp, #8
	wrlong	local03, fp
	sub	fp, #12
LR__0660
	add	fp, #12
	rdlong	local03, fp wz
	sub	fp, #12
 if_e	jmp	#LR__0661
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	jmp	#LR__0681
LR__0661
	add	fp, #4
	rdlong	local03, fp
	add	fp, #4
	rdlong	local05, fp
	sub	fp, #8
	add	local03, #12
	rdlong	local06, local03
	mov	local07, local06
	cmp	local05, local07 wcz
 if_be	jmp	#LR__0662
	add	fp, #4
	rdlong	local08, fp
	sub	fp, #4
	mov	local09, local08
	add	local09, #16
	rdbyte	local10, local09
	sub	local09, #16
	mov	local11, local10
	zerox	local11, #7
	and	local11, #2 wz
 if_ne	jmp	#LR__0662
	add	fp, #4
	rdlong	local04, fp
	mov	local03, local04
	add	local03, #12
	rdlong	local12, local03
	sub	local03, #12
	add	fp, #4
	wrlong	local12, fp
	sub	fp, #8
LR__0662
	add	fp, #4
	rdlong	local03, fp
	add	local03, #20
	rdlong	local12, local03
	add	fp, #28
	wrlong	local12, fp
	sub	fp, #28
	rdlong	local03, fp
	add	fp, #24
	wrlong	#0, fp
	add	local03, #20
	wrlong	#0, local03
	sub	fp, #20
	rdlong	local03, fp
	sub	fp, #8
	cmp	local03, #0 wcz
 if_be	jmp	#LR__0678
	add	fp, #16
	rdlong	local04, fp
	add	local04, #10
	rdword	local07, local04
	shl	local07, #9
	add	fp, #8
	wrlong	local07, fp
	add	fp, #8
	rdlong	local03, fp
	sub	fp, #32
	cmp	local03, #0 wcz
 if_be	jmp	#LR__0663
	add	fp, #8
	rdlong	muldiva_, fp
	sub	muldiva_, #1
	add	fp, #16
	rdlong	muldivb_, fp
	sub	fp, #24
	call	#unsdivide_
	mov	local07, muldivb_
	add	fp, #32
	rdlong	muldiva_, fp
	sub	muldiva_, #1
	sub	fp, #8
	rdlong	local10, fp
	sub	fp, #24
	mov	muldivb_, local10
	call	#unsdivide_
	mov	local08, muldivb_
	cmp	local07, local08 wcz
 if_b	jmp	#LR__0663
	add	fp, #32
	rdlong	local13, fp
	sub	local13, #1
	sub	fp, #28
	rdlong	local03, fp
	mov	local12, local13
	add	fp, #20
	rdlong	local05, fp
	sub	local05, #1
	andn	local12, local05
	add	local03, #20
	wrlong	local12, local03
	sub	fp, #16
	rdlong	local03, fp
	sub	fp, #4
	rdlong	local12, fp
	add	local12, #20
	rdlong	local07, local12
	sub	local03, local07
	add	fp, #4
	wrlong	local03, fp
	sub	fp, #4
	rdlong	local03, fp
	add	local03, #24
	rdlong	local12, local03
	add	fp, #16
	wrlong	local12, fp
	sub	fp, #20
	jmp	#LR__0667
LR__0663
	add	fp, #4
	rdlong	local03, fp
	add	local03, #8
	rdlong	local12, local03
	add	fp, #16
	wrlong	local12, fp
	rdlong	local03, fp wz
	sub	fp, #20
 if_ne	jmp	#LR__0666
	add	fp, #4
	rdlong	local14, fp
	sub	fp, #4
	mov	arg01, local14
	mov	arg02, #0
	call	#_ff_cc_create_chain_0252
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0664
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#2, local03
	mov	result1, #2
	jmp	#LR__0681
LR__0664
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, ##-1 wz
 if_ne	jmp	#LR__0665
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#1, local03
	mov	result1, #1
	jmp	#LR__0681
LR__0665
	add	fp, #4
	rdlong	local03, fp
	add	fp, #16
	rdlong	local12, fp
	sub	fp, #20
	add	local03, #8
	wrlong	local12, local03
LR__0666
	add	fp, #4
	rdlong	local03, fp
	add	fp, #16
	rdlong	local12, fp
	sub	fp, #20
	add	local03, #24
	wrlong	local12, local03
LR__0667
	add	fp, #20
	rdlong	local03, fp wz
	sub	fp, #20
 if_e	jmp	#LR__0677
' 				while (ofs > bcs) {
LR__0668
	add	fp, #8
	rdlong	local03, fp
	add	fp, #16
	rdlong	local12, fp
	sub	fp, #24
	cmp	local03, local12 wcz
 if_be	jmp	#LR__0674
	add	fp, #8
	rdlong	local03, fp
	add	fp, #16
	rdlong	local12, fp
	sub	local03, local12
	sub	fp, #16
	wrlong	local03, fp
	sub	fp, #4
	rdlong	local03, fp
	mov	local05, local03
	add	local05, #20
	rdlong	local06, local05
	mov	local12, local06
	add	fp, #20
	rdlong	local09, fp
	add	local12, local09
	add	local03, #20
	wrlong	local12, local03
	sub	fp, #20
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #16
	rdbyte	local03, local04
	test	local03, #2 wz
 if_e	jmp	#LR__0669
	add	fp, #4
	rdlong	local15, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	mov	arg01, local15
	call	#_ff_cc_create_chain_0252
	add	fp, #20
	wrlong	result1, fp
	rdlong	local03, fp wz
	sub	fp, #20
 if_ne	jmp	#LR__0670
	add	fp, #8
	wrlong	#0, fp
	sub	fp, #8
' 							ofs = 0; break;
	jmp	#LR__0674
LR__0669
	add	fp, #4
	rdlong	local16, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	mov	arg01, local16
	call	#_ff_cc_get_fat_0238
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
LR__0670
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, ##-1 wz
 if_ne	jmp	#LR__0671
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#1, local03
	mov	result1, #1
	jmp	#LR__0681
LR__0671
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, #1 wcz
 if_be	jmp	#LR__0672
	add	fp, #16
	rdlong	local12, fp
	add	fp, #4
	rdlong	local07, fp
	sub	fp, #20
	add	local12, #20
	rdlong	local11, local12
	cmp	local07, local11 wcz
 if_b	jmp	#LR__0673
LR__0672
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#2, local03
	mov	result1, #2
	jmp	#LR__0681
LR__0673
	add	fp, #4
	rdlong	local03, fp
	add	fp, #16
	rdlong	local12, fp
	sub	fp, #20
	add	local03, #24
	wrlong	local12, local03
	jmp	#LR__0668
LR__0674
	add	fp, #4
	rdlong	local03, fp
	mov	local05, local03
	add	local05, #20
	rdlong	local12, local05
	add	fp, #4
	rdlong	local11, fp
	add	local12, local11
	add	local03, #20
	wrlong	local12, local03
	rdlong	local03, fp
	sub	fp, #8
	test	local03, #511 wz
 if_e	jmp	#LR__0676
	add	fp, #16
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #20
	call	#_ff_cc_clst2sect_0233
	add	fp, #28
	wrlong	result1, fp
	rdlong	local03, fp wz
	sub	fp, #28
 if_ne	jmp	#LR__0675
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#2, local03
	mov	result1, #2
	jmp	#LR__0681
LR__0675
	add	fp, #28
	rdlong	local03, fp
	sub	fp, #20
	rdlong	local12, fp
	shr	local12, #9
	add	local03, local12
	add	fp, #20
	wrlong	local03, fp
	sub	fp, #28
LR__0676
LR__0677
LR__0678
	add	fp, #4
	rdlong	local03, fp
	mov	local12, local03
	sub	fp, #4
	add	local03, #20
	rdlong	local07, local03
	add	local12, #12
	rdlong	local11, local12
	cmp	local07, local11 wcz
 if_be	jmp	#LR__0679
	add	fp, #4
	rdlong	local03, fp
	mov	local12, local03
	add	local12, #20
	rdlong	local07, local12
	add	local03, #12
	wrlong	local07, local03
	rdlong	local03, fp
	mov	local05, local03
	sub	fp, #4
	add	local05, #16
	rdbyte	local12, local05
	or	local12, #64
	add	local03, #16
	wrbyte	local12, local03
LR__0679
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #20
	rdlong	local07, local03
	mov	local05, local07
	test	local05, #511 wz
 if_e	jmp	#LR__0680
	add	fp, #4
	rdlong	local11, fp
	mov	local06, local11
	add	fp, #24
	rdlong	local08, fp
	sub	fp, #28
	mov	local09, local08
	add	local06, #28
	rdlong	local17, local06
	sub	local06, #28
	mov	local10, local17
	cmp	local09, local10 wz
 if_e	jmp	#LR__0680
	add	fp, #4
	rdlong	local04, fp
	mov	local03, local04
	add	fp, #24
	rdlong	local12, fp
	sub	fp, #28
	add	local03, #28
	wrlong	local12, local03
	sub	local03, #28
LR__0680
' #line 4553 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 			fp->sect = nsect;
' 		}
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__0681
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_lseek_ret
	ret

_ff_cc_f_opendir
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	local01, fp wz
	sub	fp, #4
 if_e	mov	result1, #9
 if_e	jmp	#LR__0689
	add	fp, #8
	mov	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #0
	call	#_ff_cc_mount_volume_0326
	add	fp, #12
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0687
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	local02, fp
	wrlong	local02, local01
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_ff_cc_follow_path_0303
	add	fp, #12
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0686
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #43
	rdbyte	local01, local03
	test	local01, #128 wz
 if_ne	jmp	#LR__0684
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #6
	rdbyte	local01, local03
	test	local01, #16 wz
 if_e	jmp	#LR__0682
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #28
	rdlong	arg02, local04
	call	#_ff_cc_ld_clust_0271
	add	local01, #8
	wrlong	result1, local01
	jmp	#LR__0683
LR__0682
	add	fp, #12
	wrlong	#5, fp
	sub	fp, #12
LR__0683
LR__0684
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0685
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	local02, fp
	add	local02, #6
	rdword	local04, local02
	add	local01, #4
	wrword	local04, local01
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_ff_cc_dir_sdi_0261
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__0685
LR__0686
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
LR__0687
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_e	jmp	#LR__0688
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	wrlong	#0, local01
LR__0688
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__0689
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_opendir_ret
	ret

_ff_cc_f_closedir
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_ff_cc_validate_0328
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0690
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	wrlong	#0, local01
LR__0690
' 
' 
' 
' 
' 		dp->obj.fs = 0;
' #line 4652 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
' 	}
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_closedir_ret
	ret

_ff_cc_f_readdir
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_ff_cc_validate_0328
	add	fp, #12
	wrlong	result1, fp
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0694
	add	fp, #8
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0691
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_ff_cc_dir_sdi_0261
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__0693
LR__0691
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_ff_cc_dir_read_0277
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#0, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0692
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_ff_cc_get_fileinfo_0291
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_ff_cc_dir_next_0265
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#0, fp
 if_e	sub	fp, #12
LR__0692
LR__0693
LR__0694
' 			}
' 			;
' 		}
' 	}
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_readdir_ret
	ret

_ff_cc_f_stat
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #72
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	mov	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #0
	call	#_ff_cc_mount_volume_0326
	mov	local01, result1
	add	fp, #12
	wrlong	local01, fp
	rdlong	local02, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0699
	add	fp, #16
	mov	local03, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg01, local03
	call	#_ff_cc_follow_path_0303
	mov	local01, result1
	add	fp, #12
	wrlong	local01, fp
	rdlong	local02, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0698
	add	fp, #59
	rdbyte	local02, fp
	sub	fp, #59
	zerox	local02, #7
	test	local02, #128 wz
 if_e	jmp	#LR__0695
	add	fp, #12
	wrlong	#6, fp
	sub	fp, #12
	jmp	#LR__0697
LR__0695
	add	fp, #8
	rdlong	local02, fp wz
	sub	fp, #8
 if_e	jmp	#LR__0696
	add	fp, #8
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg01, local03
	call	#_ff_cc_get_fileinfo_0291
LR__0696
LR__0697
LR__0698
LR__0699
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_stat_ret
	ret

_ff_cc_f_unlink
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #132
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #96
	wrlong	#0, fp
	sub	fp, #96
	mov	local01, fp
	add	fp, #100
	mov	local02, fp
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #2
	sub	fp, #104
	call	#_ff_cc_mount_volume_0326
	mov	local03, result1
	add	fp, #8
	wrlong	local03, fp
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0709
	add	fp, #104
	rdlong	local04, fp
	sub	fp, #92
	wrlong	local04, fp
	mov	local05, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg01, local05
	call	#_ff_cc_follow_path_0303
	mov	local03, result1
	add	fp, #8
	wrlong	local03, fp
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0708
	add	fp, #55
	rdbyte	local04, fp
	sub	fp, #55
	zerox	local04, #7
	test	local04, #128 wz
 if_e	jmp	#LR__0700
	add	fp, #8
	wrlong	#6, fp
	sub	fp, #8
	jmp	#LR__0701
LR__0700
	add	fp, #18
	rdbyte	local04, fp
	sub	fp, #18
	zerox	local04, #7
	test	local04, #1 wz
 if_ne	add	fp, #8
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #8
LR__0701
	add	fp, #8
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0704
	add	fp, #104
	rdlong	arg01, fp
	sub	fp, #64
	rdlong	arg02, fp
	sub	fp, #40
	call	#_ff_cc_ld_clust_0271
	mov	local06, result1
	add	fp, #100
	wrlong	local06, fp
	sub	fp, #82
	rdbyte	local04, fp
	sub	fp, #18
	zerox	local04, #7
	test	local04, #16 wz
 if_e	jmp	#LR__0703
	add	fp, #104
	rdlong	local04, fp
	sub	fp, #48
	wrlong	local04, fp
	add	fp, #44
	rdlong	local04, fp
	sub	fp, #36
	wrlong	local04, fp
	sub	fp, #8
	mov	local07, fp
	mov	arg01, local07
	mov	arg02, #0
	sub	fp, #56
	call	#_ff_cc_dir_sdi_0261
	mov	local08, result1
	add	fp, #8
	wrlong	local08, fp
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0702
	mov	arg01, local07
	mov	arg02, #0
	call	#_ff_cc_dir_read_0277
	add	fp, #8
	wrlong	result1, fp
	rdlong	local04, fp wz
	sub	fp, #8
 if_e	add	fp, #8
 if_e	wrlong	#7, fp
 if_e	sub	fp, #8
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #8
	cmp	local04, #4 wz
 if_e	add	fp, #8
 if_e	wrlong	#0, fp
 if_e	sub	fp, #8
LR__0702
LR__0703
LR__0704
	add	fp, #8
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0707
	add	fp, #12
	mov	local09, fp
	mov	arg01, local09
	sub	fp, #12
	call	#_ff_cc_dir_remove_0287
	add	fp, #8
	wrlong	result1, fp
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0705
	add	fp, #100
	rdlong	local08, fp wz
	sub	fp, #100
 if_e	jmp	#LR__0705
	add	fp, #12
	mov	local10, fp
	mov	local04, local10
	add	fp, #88
	rdlong	local08, fp
	sub	fp, #100
	mov	local11, local08
	mov	local03, #0
	mov	arg01, local04
	mov	arg02, local11
	mov	arg03, #0
	call	#_ff_cc_remove_chain_0246
	mov	local06, result1
	add	fp, #8
	wrlong	local06, fp
	sub	fp, #8
LR__0705
	add	fp, #8
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0706
	add	fp, #104
	rdlong	arg01, fp
	sub	fp, #104
	call	#_ff_cc_sync_fs_0232
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__0706
LR__0707
LR__0708
LR__0709
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_unlink_ret
	ret

_ff_cc_f_mkdir
	mov	COUNT_, #10
	call	#pushregs_
	add	ptra, #140
	add	fp, #4
	wrlong	arg01, fp
	mov	local01, fp
	add	fp, #68
	mov	local02, fp
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #2
	sub	fp, #72
	call	#_ff_cc_mount_volume_0326
	mov	local03, result1
	add	fp, #8
	wrlong	local03, fp
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0719
	add	fp, #72
	rdlong	local04, fp
	sub	fp, #60
	wrlong	local04, fp
	mov	local05, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg01, local05
	call	#_ff_cc_follow_path_0303
	mov	local03, result1
	add	fp, #8
	wrlong	local03, fp
	mov	local06, local03
	sub	fp, #8
	mov	local04, local06 wz
 if_e	add	fp, #8
 if_e	wrlong	#8, fp
 if_e	sub	fp, #8
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #8
	cmp	local04, #4 wz
 if_ne	jmp	#LR__0718
	add	fp, #72
	rdlong	local04, fp
	sub	fp, #16
	wrlong	local04, fp
	mov	local07, fp
	mov	arg01, local07
	mov	arg02, #0
	sub	fp, #56
	call	#_ff_cc_create_chain_0252
	mov	local08, result1
	add	fp, #76
	wrlong	local08, fp
	sub	fp, #68
	wrlong	#0, fp
	add	fp, #68
	rdlong	local04, fp wz
	sub	fp, #76
 if_e	add	fp, #8
 if_e	wrlong	#7, fp
 if_e	sub	fp, #8
	add	fp, #76
	rdlong	local04, fp
	sub	fp, #76
	cmp	local04, #1 wz
 if_e	add	fp, #8
 if_e	wrlong	#2, fp
 if_e	sub	fp, #8
	add	fp, #76
	rdlong	local04, fp
	sub	fp, #76
	cmp	local04, ##-1 wz
 if_e	add	fp, #8
 if_e	wrlong	#1, fp
 if_e	sub	fp, #8
	add	fp, #84
	wrlong	##1310785536, fp
	sub	fp, #76
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0715
	add	fp, #72
	rdlong	arg01, fp
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #76
	mov	local08, local03
	mov	arg02, local08
	call	#_ff_cc_dir_clear_0257
	mov	local09, result1
	add	fp, #8
	wrlong	local09, fp
	mov	local06, local09
	sub	fp, #8
	mov	local04, local06 wz
 if_ne	jmp	#LR__0714
	add	fp, #72
	rdlong	arg01, fp
	sub	fp, #72
	add	arg01, #48
	mov	arg02, #32
	mov	arg03, #11
' {
' 	BYTE *d = (BYTE*)dst;
' 
' 	do {
	loc	pa,	#(@LR__0712-@LR__0710)
	call	#FCACHE_LOAD_
LR__0710
	rep	@LR__0713, #11
LR__0711
	wrbyte	arg02, arg01
	add	arg01, #1
LR__0712
LR__0713
	add	fp, #72
	rdlong	local04, fp
	add	local04, #48
	wrbyte	#46, local04
	rdlong	local04, fp
	add	local04, #59
	wrbyte	#16, local04
	rdlong	local10, fp
	add	local10, #48
	mov	arg01, local10
	add	arg01, #22
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #84
	call	#_ff_cc_st_dword_0214
	add	fp, #72
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #76
	mov	arg02, local10
	call	#_ff_cc_st_clust_0272
	mov	arg01, local10
	add	arg01, #32
	mov	arg02, local10
	mov	arg03, #32
	call	#_ff_cc_mem_cpy_0217
	add	fp, #72
	rdlong	local04, fp
	add	local04, #81
	wrbyte	#46, local04
	sub	fp, #52
	rdlong	local04, fp
	add	fp, #60
	wrlong	local04, fp
	sub	fp, #8
	rdlong	arg02, fp
	add	arg02, #80
	rdlong	arg01, fp
	add	fp, #8
	rdlong	arg03, fp
	sub	fp, #80
	call	#_ff_cc_st_clust_0272
	add	fp, #72
	rdlong	local04, fp
	add	local04, #3
	wrbyte	#1, local04
	sub	fp, #60
	mov	arg01, fp
	sub	fp, #12
	call	#_ff_cc_dir_register_0284
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__0714
LR__0715
	add	fp, #8
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0716
	add	fp, #40
	rdlong	arg01, fp
	add	arg01, #22
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #84
	call	#_ff_cc_st_dword_0214
	add	fp, #72
	rdlong	arg01, fp
	sub	fp, #32
	rdlong	arg02, fp
	add	fp, #36
	rdlong	arg03, fp
	sub	fp, #76
	call	#_ff_cc_st_clust_0272
	add	fp, #40
	rdlong	local04, fp
	add	local04, #11
	wrbyte	#16, local04
	add	fp, #32
	rdlong	local04, fp
	add	local04, #3
	wrbyte	#1, local04
	sub	fp, #64
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0717
	add	fp, #72
	rdlong	arg01, fp
	sub	fp, #72
	call	#_ff_cc_sync_fs_0232
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	jmp	#LR__0717
LR__0716
	add	fp, #56
	mov	arg01, fp
	add	fp, #20
	rdlong	arg02, fp
	sub	fp, #76
	mov	arg03, #0
	call	#_ff_cc_remove_chain_0246
LR__0717
LR__0718
LR__0719
' 				remove_chain(&sobj, dcl, 0);
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_mkdir_ret
	ret

_ff_cc_f_rename
	mov	COUNT_, #21
	call	#pushregs_
	add	ptra, #200
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	mov	local01, fp
	mov	arg01, local01
	sub	fp, #8
	call	#_ff_cc_get_ldnumber_0309
	add	fp, #4
	mov	local02, fp
	add	fp, #100
	mov	local03, fp
	mov	arg01, local02
	mov	arg02, local03
	mov	arg03, #2
	sub	fp, #104
	call	#_ff_cc_mount_volume_0326
	mov	local04, result1
	add	fp, #12
	wrlong	local04, fp
	rdlong	local05, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0734
	add	fp, #104
	rdlong	local05, fp
	sub	fp, #88
	wrlong	local05, fp
	mov	local06, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg01, local06
	call	#_ff_cc_follow_path_0303
	add	fp, #12
	wrlong	result1, fp
	rdlong	local07, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0720
	add	fp, #59
	rdbyte	local04, fp
	sub	fp, #59
	mov	local08, local04
	zerox	local08, #7
	and	local08, #160 wz
 if_e	jmp	#LR__0720
	mov	local05, #6
	add	fp, #12
	wrlong	#6, fp
	sub	fp, #12
LR__0720
	add	fp, #12
	rdlong	local05, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0733
	add	fp, #108
	mov	local09, fp
	sub	fp, #64
	rdlong	arg02, fp
	sub	fp, #44
	mov	arg01, local09
	mov	arg03, #32
	call	#_ff_cc_mem_cpy_0217
	add	fp, #60
	mov	local10, fp
	mov	arg01, local10
	mov	arg02, local06
	mov	arg03, #44
	sub	fp, #60
	call	#_ff_cc_mem_cpy_0217
	add	fp, #8
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg01, local10
	call	#_ff_cc_follow_path_0303
	add	fp, #12
	wrlong	result1, fp
	rdlong	local05, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0723
	add	fp, #68
	rdlong	local07, fp
	sub	fp, #44
	rdlong	local04, fp
	sub	fp, #24
	cmp	local07, local04 wz
 if_ne	jmp	#LR__0721
	add	fp, #76
	rdlong	local11, fp
	sub	fp, #44
	rdlong	local12, fp
	sub	fp, #32
	cmp	local11, local12 wz
 if_e	mov	local05, #4
 if_e	jmp	#LR__0722
LR__0721
	mov	local05, #8
LR__0722
	add	fp, #12
	wrlong	local05, fp
	sub	fp, #12
LR__0723
	add	fp, #12
	rdlong	local05, fp
	sub	fp, #12
	cmp	local05, #4 wz
 if_ne	jmp	#LR__0730
	mov	arg01, local10
	call	#_ff_cc_dir_register_0284
	add	fp, #12
	wrlong	result1, fp
	rdlong	local05, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0729
	add	fp, #88
	rdlong	local13, fp
	add	fp, #52
	wrlong	local13, fp
	sub	fp, #140
	add	local13, #13
	mov	local14, local09
	add	local14, #13
	mov	arg01, local13
	mov	arg02, local14
	mov	arg03, #19
	call	#_ff_cc_mem_cpy_0217
	add	fp, #140
	rdlong	local05, fp
	sub	fp, #21
	rdbyte	local08, fp
	add	local05, #11
	wrbyte	local08, local05
	add	fp, #21
	rdlong	local07, fp
	sub	fp, #140
	add	local07, #11
	rdbyte	local05, local07
	test	local05, #16 wz
 if_ne	jmp	#LR__0724
	add	fp, #140
	rdlong	local05, fp
	add	local05, #11
	rdbyte	local15, local05
	mov	local16, local15
	or	local16, #32
	rdlong	local05, fp
	sub	fp, #140
	add	local05, #11
	wrbyte	local16, local05
LR__0724
	add	fp, #104
	rdlong	local05, fp
	add	local05, #3
	wrbyte	#1, local05
	add	fp, #36
	rdlong	local07, fp
	sub	fp, #140
	add	local07, #11
	rdbyte	local05, local07
	test	local05, #16 wz
 if_e	jmp	#LR__0728
	add	fp, #24
	rdlong	local17, fp
	add	fp, #44
	rdlong	local18, fp
	sub	fp, #68
	cmp	local17, local18 wz
 if_e	jmp	#LR__0728
	add	fp, #104
	rdlong	local05, fp
	mov	local04, local05
	mov	local08, local04
	add	fp, #36
	rdlong	local11, fp
	sub	fp, #140
	mov	local17, local11
	mov	arg01, local08
	mov	arg02, local17
	call	#_ff_cc_ld_clust_0271
	mov	local18, result1
	mov	arg01, local05
	mov	arg02, local18
	call	#_ff_cc_clst2sect_0233
	mov	local19, result1
	add	fp, #144
	wrlong	local19, fp
	rdlong	local07, fp wz
	sub	fp, #144
 if_ne	jmp	#LR__0725
	mov	local05, #2
	add	fp, #12
	wrlong	#2, fp
	sub	fp, #12
	jmp	#LR__0727
LR__0725
	add	fp, #104
	rdlong	arg01, fp
	add	fp, #40
	rdlong	local04, fp
	sub	fp, #144
	mov	arg02, local04
	call	#_ff_cc_move_window_0230
	mov	local17, result1
	add	fp, #12
	wrlong	local17, fp
	add	fp, #92
	rdlong	local08, fp
	add	local08, #48
	mov	local20, local08
	mov	local21, local20
	add	local21, #32
	add	fp, #36
	wrlong	local21, fp
	sub	fp, #128
	rdlong	local07, fp
	sub	fp, #12
	mov	local05, local07 wz
 if_ne	jmp	#LR__0726
	add	fp, #140
	rdlong	local17, fp
	sub	fp, #140
	mov	local04, local17
	add	local04, #1
	rdbyte	local11, local04
	sub	local04, #1
	mov	local08, local11
	zerox	local08, #7
	cmp	local08, #46 wz
 if_ne	jmp	#LR__0726
	add	fp, #104
	rdlong	arg01, fp
	add	fp, #36
	rdlong	local04, fp
	sub	fp, #72
	rdlong	local11, fp
	sub	fp, #68
	mov	local17, local11
	mov	arg02, local04
	mov	arg03, local17
	call	#_ff_cc_st_clust_0272
	add	fp, #104
	rdlong	local07, fp
	sub	fp, #104
	mov	local05, local07
	mov	local08, #1
	add	local05, #3
	wrbyte	#1, local05
	sub	local05, #3
LR__0726
LR__0727
LR__0728
LR__0729
LR__0730
	add	fp, #12
	rdlong	local05, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0732
	add	fp, #16
	mov	arg01, fp
	sub	fp, #16
	call	#_ff_cc_dir_remove_0287
	add	fp, #12
	wrlong	result1, fp
	rdlong	local05, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__0731
	add	fp, #104
	rdlong	arg01, fp
	sub	fp, #104
	call	#_ff_cc_sync_fs_0232
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__0731
LR__0732
LR__0733
LR__0734
' 					res = sync_fs(fs);
' 				}
' 			}
' 
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_ff_cc_f_rename_ret
	ret

_ff_cc_stat
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	ptr___system__dat__, #312
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, #312
	mov	local03, result1
	mov	arg01, local03
	mov	arg02, local01
	mov	arg03, #0
	call	#__system____getvfsforfile
	mov	local04, result1 wz
 if_e	jmp	#LR__0735
	add	local04, #44
	rdlong	local05, local04
	sub	local04, #44
	mov	local06, local05 wz
 if_ne	jmp	#LR__0736
LR__0735
' #line 19 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
'         return _seterror( 16 );
	add	ptr___system__dat__, ##572
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0737
LR__0736
	mov	arg01, local02
	mov	arg02, #0
	mov	arg03, #48
	mov	local07, arg01
	call	#\builtin_bytefill_
	mov	result1, local07
	add	local04, #44
	rdlong	local06, local04
	rdlong	local05, local06
	add	local06, #4
	rdlong	local08, local06
	mov	arg01, local03
	mov	arg02, local02
	mov	local09, objptr
	mov	objptr, local05
	call	local08
	mov	objptr, local09
' #line 29 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
'     r = v->stat(name, buf);
' #line 33 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
'     return r;
LR__0737
	mov	ptra, fp
	call	#popregs_
_ff_cc_stat_ret
	ret

_ff_cc__set_dos_error_0455
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
' #line 6871 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
'     switch (derr) {
	mov	local02, local01
	fle	local02, #20
	jmprel	local02
LR__0738
	jmp	#LR__0739
	jmp	#LR__0753
	jmp	#LR__0754
	jmp	#LR__0755
	jmp	#LR__0740
	jmp	#LR__0741
	jmp	#LR__0742
	jmp	#LR__0743
	jmp	#LR__0745
	jmp	#LR__0748
	jmp	#LR__0744
	jmp	#LR__0749
	jmp	#LR__0750
	jmp	#LR__0751
	jmp	#LR__0756
	jmp	#LR__0756
	jmp	#LR__0756
	jmp	#LR__0746
	jmp	#LR__0752
	jmp	#LR__0747
	jmp	#LR__0756
LR__0739
	mov	local03, #0
'         r = 0;
'         break;
	jmp	#LR__0757
LR__0740
LR__0741
LR__0742
	mov	local03, #4
'         r =  4 ;
'         break;
	jmp	#LR__0757
LR__0743
LR__0744
	mov	local03, #6
'         r =  6 ;
'         break;
	jmp	#LR__0757
LR__0745
	mov	local03, #9
'         r =  9 ;
'         break;
	jmp	#LR__0757
LR__0746
	mov	local03, #7
'         r =  7 ;
'         break;
	jmp	#LR__0757
LR__0747
LR__0748
LR__0749
LR__0750
LR__0751
	mov	local03, #10
'         r =  10 ;
'         break;
	jmp	#LR__0757
LR__0752
	mov	local03, #11
'         r =  11 ;
'         break;
	jmp	#LR__0757
LR__0753
LR__0754
LR__0755
LR__0756
	mov	local03, #12
'         r =  12 ;
'         break;
LR__0757
'     }
'     return _seterror(r);
	add	ptr___system__dat__, ##572
	wrlong	local03, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	cmp	local03, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_ff_cc__set_dos_error_0455_ret
	ret

_ff_cc_v_creat_0459
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, ##1076
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__0758
'       return _seterror( 7 );
	add	ptr___system__dat__, ##572
	wrlong	#7, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0760
LR__0758
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, ##1076
	call	#_ff_cc_memset
	add	local03, ##1036
	mov	arg01, local03
	sub	local03, ##1036
	mov	arg02, local02
	mov	arg03, #7
	call	#_ff_cc_f_open
	mov	local04, result1 wz
 if_e	jmp	#LR__0759
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local04
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0760
LR__0759
	wrlong	local03, local01
'   }
'   fil->vfsdata = f;
'   return 0;
	mov	result1, #0
LR__0760
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_creat_0459_ret
	ret

_ff_cc_v_close_0462
	mov	COUNT_, #2
	call	#pushregs_
	rdlong	local01, arg01
	add	local01, ##1036
	mov	arg01, local01
	sub	local01, ##1036
	call	#_ff_cc_f_close
	mov	local02, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
'     FAT_FIL *f = fil->vfsdata;
'     r=f_close(&f->fil);
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local02
	call	#_ff_cc__set_dos_error_0455
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_close_0462_ret
	ret

_ff_cc_v_opendir_0465
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #44
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__0761
' #line 6955 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
'       return _seterror( 7 );
	add	ptr___system__dat__, ##572
	wrlong	#7, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0763
LR__0761
	mov	arg01, local03
	mov	arg02, local02
	call	#_ff_cc_f_opendir
	mov	local04, result1 wz
 if_e	jmp	#LR__0762
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
'         free(f);
'         return _set_dos_error(r);
	mov	arg01, local04
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0763
LR__0762
	add	local01, #4
	wrlong	local03, local01
'     }
'     dir->vfsdata = f;
'     return 0;
	mov	result1, #0
LR__0763
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_opendir_0465_ret
	ret

_ff_cc_v_closedir_0468
	mov	COUNT_, #2
	call	#pushregs_
	add	arg01, #4
	rdlong	local01, arg01
	mov	arg01, local01
	call	#_ff_cc_f_closedir
	mov	local02, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
	cmp	local02, #0 wz
 if_e	jmp	#LR__0764
	mov	arg01, local02
	call	#_ff_cc__set_dos_error_0455
LR__0764
'     return r;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_closedir_0468_ret
	ret

_ff_cc_v_readdir_0471
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #56
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #4
	rdlong	arg01, local01
	call	#_ff_cc_f_readdir
	mov	local02, result1
	add	fp, #40
	wrlong	local02, fp
	rdlong	local01, fp wz
	sub	fp, #40
 if_e	jmp	#LR__0765
'         return _set_dos_error(r);
	add	fp, #40
	rdlong	arg01, fp
	sub	fp, #40
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0766
LR__0765
	add	fp, #24
	rdbyte	local01, fp
	sub	fp, #24
	zerox	local01, #7 wz
'         return -1;
 if_e	neg	result1, #1
 if_e	jmp	#LR__0766
	add	fp, #8
	rdlong	arg01, fp
	add	fp, #16
	mov	arg02, fp
	sub	fp, #24
	call	#_ff_cc_strcpy
'     }
' 
' 
' 
' 
'     strcpy(ent->d_name, finfo.fname);
' 
'     return 0;
	mov	result1, #0
LR__0766
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_readdir_0471_ret
	ret

_ff_cc_v_stat_0483
	mov	COUNT_, #12
	call	#pushregs_
	add	ptra, #60
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	mov	arg01, arg02
	sub	fp, #8
	mov	arg02, #0
	mov	arg03, #48
	call	#_ff_cc_memset
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	rdbyte	local02, local01 wz
 if_e	jmp	#LR__0767
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	rdbyte	local04, local03
	cmp	local04, #46 wz
 if_ne	jmp	#LR__0768
	add	fp, #4
	rdlong	local05, fp
	sub	fp, #4
	add	local05, #1
	rdbyte	local06, local05 wz
 if_ne	jmp	#LR__0768
LR__0767
	add	fp, #24
	wrbyte	#16, fp
	sub	fp, #12
	wrlong	#0, fp
	sub	fp, #12
	jmp	#LR__0769
LR__0768
	add	fp, #16
	mov	arg02, fp
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	call	#_ff_cc_f_stat
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__0769
	add	fp, #12
	rdlong	local02, fp wz
	sub	fp, #12
 if_e	jmp	#LR__0770
'         return _set_dos_error(r);
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0773
LR__0770
	add	fp, #44
	wrlong	#292, fp
	sub	fp, #20
	rdbyte	local02, fp
	sub	fp, #24
	zerox	local02, #7
	test	local02, #1 wz
 if_e	jmp	#LR__0771
	add	fp, #44
	rdlong	local02, fp
	or	local02, #146
	wrlong	local02, fp
	sub	fp, #44
LR__0771
	add	fp, #24
	rdbyte	local02, fp
	sub	fp, #24
	zerox	local02, #7
	test	local02, #16 wz
 if_e	jmp	#LR__0772
	add	fp, #44
	rdlong	local02, fp
	or	local02, ##4169
	wrlong	local02, fp
	sub	fp, #44
LR__0772
	add	fp, #8
	rdlong	local02, fp
	add	fp, #36
	rdlong	local07, fp
	add	local02, #8
	wrlong	local07, local02
	sub	fp, #36
	rdlong	local02, fp
	add	local02, #12
	wrlong	#1, local02
	rdlong	local02, fp
	add	fp, #8
	rdlong	local07, fp
	add	local02, #24
	wrlong	local07, local02
	sub	fp, #8
	rdlong	local02, fp
	add	local02, #28
	wrlong	##512, local02
	rdlong	local02, fp
	mov	local07, local02
	add	local07, #24
	rdlong	local08, local07
	abs	local03, local08 wc
	shr	local03, #9
 if_b	neg	local03, local03
	add	local02, #32
	wrlong	local03, local02
	rdlong	local02, fp
	mov	local07, local02
	mov	local03, local02
	add	fp, #14
	rdword	result1, fp
	mov	local09, result1
	shr	local09, #11
	and	local09, #31
	mov	local10, result1
	shr	local10, #5
	and	local10, #63
	and	result1, #31
	shl	result1, #1
	mov	local11, local10
	shl	local11, #4
	sub	local11, local10
	shl	local11, #2
	add	result1, local11
	qmul	local09, ##3600
	getqx	local12
	add	result1, local12
' 
'     t = second + minute*60 + hour * 3600;
'     return t;
	add	local03, #44
	wrlong	result1, local03
	add	local07, #40
	wrlong	result1, local07
	add	local02, #36
	wrlong	result1, local02
'         mode |=  0010000  |  0100  |  0010  |  0001 ;
'     }
'     buf->st_mode = mode;
'     buf->st_nlink = 1;
'     buf->st_size = finfo.fsize;
'     buf->st_blksize = 512;
'     buf->st_blocks = buf->st_size / 512;
'     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
' #line 7053 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
'     return r;
	sub	fp, #10
	rdlong	result1, fp
	sub	fp, #12
LR__0773
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_stat_0483_ret
	ret

_ff_cc_v_read_0487
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #36
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	local01, fp
	rdlong	local02, local01
	add	fp, #12
	wrlong	local02, fp
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0774
'         return _seterror( 5 );
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0777
LR__0774
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, ##1036
	add	fp, #8
	mov	arg04, fp
	sub	fp, #16
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	call	#_ff_cc_f_read
	mov	local03, result1
	add	fp, #20
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #20
 if_e	jmp	#LR__0775
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #8
	rdlong	local02, local04
	or	local02, #32
	add	local01, #8
	wrlong	local02, local01
'         fil->state |=  (0x20) ;
'         return _set_dos_error(r);
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0777
LR__0775
	add	fp, #24
	rdlong	local01, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__0776
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	sub	fp, #4
	add	local04, #8
	rdlong	local02, local04
	or	local02, #16
	add	local01, #8
	wrlong	local02, local01
LR__0776
'         fil->state |=  (0x10) ;
'     }
'     return x;
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
LR__0777
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_read_0487_ret
	ret

_ff_cc_v_write_0491
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #36
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	local01, fp
	rdlong	local02, local01
	add	fp, #12
	wrlong	local02, fp
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0778
'         return _seterror( 5 );
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0780
LR__0778
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, ##1036
	add	fp, #8
	mov	arg04, fp
	sub	fp, #16
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	call	#_ff_cc_f_write
	mov	local03, result1
	add	fp, #20
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #20
 if_e	jmp	#LR__0779
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #8
	rdlong	local02, local04
	or	local02, #32
	add	local01, #8
	wrlong	local02, local01
'         fil->state |=  (0x20) ;
'         return _set_dos_error(r);
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0780
LR__0779
'     }
'     return x;
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
LR__0780
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_write_0491_ret
	ret

_ff_cc_v_lseek_0495
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	rdlong	local03, arg01
	add	local03, ##1036 wz
 if_ne	jmp	#LR__0781
'         return _seterror( 5 );
	add	ptr___system__dat__, ##572
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0786
LR__0781
	cmp	local02, #0 wz
 if_e	jmp	#LR__0784
	cmp	local02, #1 wz
 if_ne	jmp	#LR__0782
	add	local03, #20
	rdlong	local04, local03
	sub	local03, #20
	add	local01, local04
	jmp	#LR__0783
LR__0782
	add	local03, #12
	rdlong	local04, local03
	sub	local03, #12
	add	local01, local04
LR__0783
LR__0784
	mov	arg01, local03
	mov	arg02, local01
	call	#_ff_cc_f_lseek
	mov	local05, result1 wz
 if_e	jmp	#LR__0785
'         return _set_dos_error(result);
	mov	arg01, local05
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0786
LR__0785
'     }
'     return offset;
	mov	result1, local01
LR__0786
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_lseek_0495_ret
	ret

_ff_cc_v_ioctl
' {
'     return _seterror( 10 );
	add	ptr___system__dat__, ##572
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
_ff_cc_v_ioctl_ret
	ret

_ff_cc_v_mkdir
	call	#_ff_cc_f_mkdir
	mov	arg01, result1
' 
'     r = f_mkdir(name);
'     return _set_dos_error(r);
	call	#_ff_cc__set_dos_error_0455
_ff_cc_v_mkdir_ret
	ret

_ff_cc_v_remove
	call	#_ff_cc_f_unlink
	mov	arg01, result1
' 
'     r = f_unlink(name);
'     return _set_dos_error(r);
	call	#_ff_cc__set_dos_error_0455
_ff_cc_v_remove_ret
	ret

_ff_cc_v_rmdir_0499
	call	#_ff_cc_f_unlink
	mov	arg01, result1
' 
'     r = f_unlink(name);
'     return _set_dos_error(r);
	call	#_ff_cc__set_dos_error_0455
_ff_cc_v_rmdir_0499_ret
	ret

_ff_cc_v_rename_0501
	call	#_ff_cc_f_rename
	mov	arg01, result1
'     return _set_dos_error(r);
	call	#_ff_cc__set_dos_error_0455
_ff_cc_v_rename_0501_ret
	ret

_ff_cc_v_open_0505
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg01, ##1076
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local04, result1 wz
 if_ne	jmp	#LR__0787
'       return _seterror( 7 );
	add	ptr___system__dat__, ##572
	wrlong	#7, ptr___system__dat__
	sub	ptr___system__dat__, ##572
	neg	result1, #1
	jmp	#LR__0794
LR__0787
	mov	local05, local04
	mov	local06, #0
	mov	local07, ##1076
	mov	arg01, local05
	mov	arg02, #0
	mov	arg03, ##1076
	call	#_ff_cc_memset
'   switch (flags & 3) {
	mov	local08, local03
	and	local08, #3
	mov	local09, local08 wz
 if_e	jmp	#LR__0788
	cmp	local09, #1 wz
 if_e	jmp	#LR__0789
	jmp	#LR__0790
LR__0788
	mov	local10, #1
'       fs_flags =  0x01 ;
'       break;
	jmp	#LR__0791
LR__0789
	mov	local10, #2
'       fs_flags =  0x02 ;
'       break;
	jmp	#LR__0791
LR__0790
	mov	local10, #3
'       fs_flags =  0x01  |  0x02 ;
'       break;
LR__0791
	test	local03, #8 wz
 if_ne	or	local10, #24
 if_ne	jmp	#LR__0792
	test	local03, #32 wz
 if_ne	or	local10, #48
LR__0792
	add	local04, ##1036
	mov	arg01, local04
	sub	local04, ##1036
	mov	arg03, local10
	mov	arg02, local02
	call	#_ff_cc_f_open
	mov	local11, result1 wz
 if_e	jmp	#LR__0793
	mov	arg01, local04
'     return _gc_free(ptr);
	call	#__system___gc_free
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local11
	call	#_ff_cc__set_dos_error_0455
	jmp	#LR__0794
LR__0793
	wrlong	local04, local01
'   }
'   fil->vfsdata = f;
'   return 0;
	mov	result1, #0
LR__0794
	mov	ptra, fp
	call	#popregs_
_ff_cc_v_open_0505_ret
	ret

_ff_cc_xmit_mmc_0619
	mov	COUNT_, #4
	call	#pushregs_
	add	ptr__ff_cc_dat__, #364
	rdlong	local01, ptr__ff_cc_dat__
	add	ptr__ff_cc_dat__, #8
	rdlong	local02, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #372
	loc	pa,	#(@LR__0796-@LR__0795)
	call	#FCACHE_LOAD_
' 
' 	do {
LR__0795
	rdbyte	local03, arg01
	mov	local04, local03
	zerox	local04, #7
	test	local04, #128 wz
	add	arg01, #1
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	mov	local04, local03
	zerox	local04, #7
	test	local04, #64 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	mov	local04, local03
	zerox	local04, #7
	test	local04, #32 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	mov	local04, local03
	zerox	local04, #7
	test	local04, #16 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	mov	local04, local03
	zerox	local04, #7
	test	local04, #8 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	mov	local04, local03
	zerox	local04, #7
	test	local04, #4 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	mov	local04, local03
	zerox	local04, #7
	test	local04, #2 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	zerox	local03, #7
	test	local03, #1 wz
	drvnz	local02
	drvh	local01
	waitx	#16
	drvl	local01
	waitx	#16
	sub	arg02, #1 wz
 if_ne	jmp	#LR__0795
LR__0796
	mov	ptra, fp
	call	#popregs_
_ff_cc_xmit_mmc_0619_ret
	ret

_ff_cc_rcvr_mmc_0625
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	add	ptr__ff_cc_dat__, #364
	rdlong	local02, ptr__ff_cc_dat__
	add	ptr__ff_cc_dat__, #8
	rdlong	arg01, ptr__ff_cc_dat__
	add	ptr__ff_cc_dat__, #4
	rdlong	local03, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #376
	drvh	arg01
	loc	pa,	#(@LR__0798-@LR__0797)
	call	#FCACHE_LOAD_
' 
' 	(_pinh(PIN_DI)) ;
' 
' 	do {
LR__0797
	mov	local04, #0
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	mov	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	zerox	local04, #7
	shl	local04, #1
	waitx	#8
	testp	local03 wc
	wrc	result1
	test	result1, #1 wz
 if_ne	add	local04, #1
	drvh	local02
	waitx	#16
	drvl	local02
	waitx	#16
	wrbyte	local04, local01
	sub	arg02, #1 wz
	add	local01, #1
 if_ne	jmp	#LR__0797
LR__0798
	mov	ptra, fp
	call	#popregs_
_ff_cc_rcvr_mmc_0625_ret
	ret

_ff_cc_wait_ready_0628
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #16
' {
' 	BYTE d;
' 	UINT tmr;
' 
' 
' 	for (tmr = 5000; tmr; tmr--) {
	add	fp, #8
	wrlong	##5000, fp
	sub	fp, #8
LR__0799
	add	fp, #8
	rdlong	local01, fp wz
	sub	fp, #8
 if_e	jmp	#LR__0800
	add	fp, #4
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, #1
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #4
	rdbyte	local02, fp
	sub	fp, #4
	zerox	local02, #7
	cmp	local02, #255 wz
 if_e	jmp	#LR__0800
	mov	arg01, #100
	call	#__system___waitus
	add	fp, #8
	rdlong	local03, fp
	sub	local03, #1
	wrlong	local03, fp
	sub	fp, #8
	jmp	#LR__0799
LR__0800
' 		dly_us(100);
' 	}
' 
' 	return tmr ? 1 : 0;
	add	fp, #8
	rdlong	local01, fp wz
	sub	fp, #8
 if_ne	mov	local04, #1
 if_e	mov	local04, #0
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_ff_cc_wait_ready_0628_ret
	ret

_ff_cc_deselect_0634
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #24
	add	ptr__ff_cc_dat__, #368
	rdlong	local01, ptr__ff_cc_dat__
	add	fp, #4
	wrlong	local01, fp
	sub	ptr__ff_cc_dat__, #4
	rdlong	local01, ptr__ff_cc_dat__
	add	fp, #4
	wrlong	local01, fp
	add	ptr__ff_cc_dat__, #8
	rdlong	local01, ptr__ff_cc_dat__
	add	fp, #4
	wrlong	local01, fp
	add	ptr__ff_cc_dat__, #4
	rdlong	local01, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #376
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	drvh	arg01
	waitx	#16
	mov	arg01, fp
	mov	arg02, #1
	call	#_ff_cc_rcvr_mmc_0625
	mov	ptra, fp
	call	#popregs_
_ff_cc_deselect_0634_ret
	ret

_ff_cc_select_0637
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	ptr__ff_cc_dat__, #368
	rdlong	arg01, ptr__ff_cc_dat__
	sub	ptr__ff_cc_dat__, #368
	add	fp, #8
	wrlong	arg01, fp
	drvl	arg01
	waitx	#16
	sub	fp, #4
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, #1
	call	#_ff_cc_rcvr_mmc_0625
	call	#_ff_cc_wait_ready_0628
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__0801
	call	#_ff_cc_deselect_0634
' 
' 	deselect();
' 	return 0;
	mov	result1, #0
LR__0801
	mov	ptra, fp
	call	#popregs_
_ff_cc_select_0637_ret
	ret

_ff_cc_rcvr_datablock_0640
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
' 	BYTE *buff,
' 	UINT btr
' )
' {
' 	BYTE d[2];
' 	UINT tmr;
' 
' 
' 	for (tmr = 1000; tmr; tmr--) {
	add	fp, #8
	wrlong	##1000, fp
	sub	fp, #16
LR__0802
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_e	jmp	#LR__0803
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #12
	rdbyte	local02, fp
	sub	fp, #12
	zerox	local02, #7
	cmp	local02, #255 wz
 if_ne	jmp	#LR__0803
	mov	arg01, #100
	call	#__system___waitus
	add	fp, #16
	rdlong	local03, fp
	sub	local03, #1
	wrlong	local03, fp
	sub	fp, #16
	jmp	#LR__0802
LR__0803
	add	fp, #12
	rdbyte	local04, fp
	sub	fp, #12
	zerox	local04, #7
	cmp	local04, #254 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0804
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #2
	call	#_ff_cc_rcvr_mmc_0625
' 
' 	rcvr_mmc(buff, btr);
' 	rcvr_mmc(d, 2);
' 
' 	return 1;
	mov	result1, #1
LR__0804
	mov	ptra, fp
	call	#popregs_
_ff_cc_rcvr_datablock_0640_ret
	ret

_ff_cc_xmit_datablock_0642
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrbyte	arg02, fp
	sub	fp, #8
	call	#_ff_cc_wait_ready_0628
	cmp	result1, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0806
	add	fp, #8
	rdbyte	local01, fp
	add	fp, #4
	wrbyte	local01, fp
	mov	local02, fp
	mov	arg01, local02
	mov	arg02, #1
	sub	fp, #12
	call	#_ff_cc_xmit_mmc_0619
	add	fp, #8
	rdbyte	local01, fp
	sub	fp, #8
	zerox	local01, #7
	cmp	local01, #253 wz
 if_e	jmp	#LR__0805
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	decod	arg02, #9
	call	#_ff_cc_xmit_mmc_0619
	mov	arg01, local02
	mov	arg02, #2
	call	#_ff_cc_rcvr_mmc_0625
	mov	arg01, local02
	mov	arg02, #1
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7
	and	local01, #31
	cmp	local01, #5 wz
' 			return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0806
LR__0805
' 	}
' 
' 	return 1;
	mov	result1, #1
LR__0806
	mov	ptra, fp
	call	#popregs_
_ff_cc_xmit_datablock_0642_ret
	ret

_ff_cc_send_cmd_0646
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #56
_ff_cc_send_cmd_0646_enter
	add	fp, #4
	wrbyte	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	zerox	local01, #7
	test	local01, #128 wz
 if_e	jmp	#LR__0808
	add	fp, #4
	rdbyte	local02, fp
	and	local02, #127
	wrbyte	local02, fp
	sub	fp, #4
	mov	arg01, #55
	mov	arg02, #0
	call	#_ff_cc_send_cmd_0646
	add	fp, #12
	wrbyte	result1, fp
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7
	cmp	local01, #1 wcz
 if_be	jmp	#LR__0807
	add	fp, #12
	rdbyte	result1, fp
	sub	fp, #12
	jmp	#LR__0813
LR__0807
LR__0808
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	zerox	local01, #7
	cmp	local01, #12 wz
 if_e	jmp	#LR__0809
	call	#_ff_cc_deselect_0634
	call	#_ff_cc_select_0637
	cmp	result1, #0 wz
 if_e	mov	result1, #255
 if_e	jmp	#LR__0813
LR__0809
	add	fp, #4
	rdbyte	local03, fp wz
	mov	local04, #64
	or	local04, local03
	add	fp, #16
	wrbyte	local04, fp
	sub	fp, #12
	rdlong	local01, fp
	shr	local01, #24
	add	fp, #13
	wrbyte	local01, fp
	sub	fp, #13
	rdlong	local01, fp
	shr	local01, #16
	add	fp, #14
	wrbyte	local01, fp
	sub	fp, #14
	rdlong	local01, fp
	shr	local01, #8
	add	fp, #15
	wrbyte	local01, fp
	sub	fp, #15
	rdlong	local01, fp
	add	fp, #16
	wrbyte	local01, fp
	sub	fp, #12
	wrbyte	#1, fp
	sub	fp, #12
 if_e	add	fp, #12
 if_e	wrbyte	#149, fp
 if_e	sub	fp, #12
	cmp	local03, #8 wz
 if_e	add	fp, #12
 if_e	wrbyte	#135, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdbyte	local01, fp
	add	fp, #13
	wrbyte	local01, fp
	sub	fp, #5
	mov	arg01, fp
	mov	arg02, #6
	sub	fp, #20
	call	#_ff_cc_xmit_mmc_0619
	cmp	local03, #12 wz
 if_ne	jmp	#LR__0810
	add	fp, #16
	mov	arg01, fp
	mov	arg02, #1
	sub	fp, #16
	call	#_ff_cc_rcvr_mmc_0625
LR__0810
	add	fp, #12
	wrbyte	#10, fp
	sub	fp, #12
' 	n = 10;
' 	do
LR__0811
	add	fp, #16
	mov	arg01, fp
	mov	arg02, #1
	sub	fp, #16
	call	#_ff_cc_rcvr_mmc_0625
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	zerox	local01, #7
	test	local01, #128 wz
 if_e	jmp	#LR__0812
	add	fp, #12
	rdbyte	local05, fp
	sub	local05, #1
	wrbyte	local05, fp
	rdbyte	local06, fp
	sub	fp, #12
	mov	local07, local06 wz
 if_ne	jmp	#LR__0811
LR__0812
' 
' 	return d;
	add	fp, #16
	rdbyte	result1, fp
	sub	fp, #16
LR__0813
	mov	ptra, fp
	call	#popregs_
_ff_cc_send_cmd_0646_ret
	ret

_ff_cc_strcpy
	mov	_var01, arg01
	cmp	arg02, #0 wz
 if_e	mov	result1, arg01
 if_e	jmp	#_ff_cc_strcpy_ret
	loc	pa,	#(@LR__0815-@LR__0814)
	call	#FCACHE_LOAD_
'         do {
LR__0814
	rdbyte	_var02, arg02 wz
	wrbyte	_var02, _var01
	add	arg02, #1
	add	_var01, #1
 if_ne	jmp	#LR__0814
LR__0815
' 	return(dst);
	mov	result1, arg01
_ff_cc_strcpy_ret
	ret

_ff_cc_memset
	mov	_var01, arg01
	mov	_var02, arg02
	mov	_var03, arg03
	mov	_var04, _var01
	mov	_var05, #3
	test	_var05, _var01 wz
 if_ne	jmp	#LR__0819
	cmp	_var03, #4 wcz
 if_be	jmp	#LR__0819
	mov	_var06, _var01
	mov	_var05, _var02
	and	_var05, #255
	mov	_var02, _var05
	mov	_var07, _var02
	shl	_var07, #24
	mov	_var08, _var02
	shl	_var08, #16
	mov	_var09, _var07
	or	_var09, _var08
	mov	_var10, _var02
	shl	_var10, #8
	mov	_var11, _var09
	or	_var11, _var10
	mov	_var12, _var11
	or	_var12, _var02
	mov	_var13, _var12
	loc	pa,	#(@LR__0817-@LR__0816)
	call	#FCACHE_LOAD_
'     {
'       uint32_t lc;
'       uint32_t *dstl = dest_p;
'       c &= 0xff;
'       lc = (c<<24)|(c<<16)|(c<<8)|c;
'       while (n >= sizeof(uint32_t))
LR__0816
	cmp	_var03, #4 wcz
 if_b	jmp	#LR__0818
	mov	_var05, _var06
	mov	_var14, _var06
	add	_var14, #4
	mov	_var06, _var14
	wrlong	_var13, _var05
	mov	_var05, _var03
	sub	_var05, #4
	mov	_var03, _var05
	jmp	#LR__0816
LR__0817
LR__0818
	mov	_var01, _var06
LR__0819
	loc	pa,	#(@LR__0821-@LR__0820)
	call	#FCACHE_LOAD_
' 	}
'       dest_p = dstl;
'     }
' 
'   dst = dest_p;
'   while (n > 0) {
LR__0820
	cmp	_var03, #0 wcz
 if_be	jmp	#LR__0822
	wrbyte	_var02, _var01
	sub	_var03, #1
	add	_var01, #1
	jmp	#LR__0820
LR__0821
LR__0822
'     *dst++ = c;
'     --n;
'   }
' 
'   return orig_dest;
	mov	result1, _var04
_ff_cc_memset_ret
	ret

' 	
' 	FUNCTION pfunc(c as integer) as integer
___strs_cl_pfunc
' 		if (i < 16) then
	add	objptr, #4
	rdlong	_var01, objptr
	sub	objptr, #4
	cmps	_var01, #16 wcz
 if_ae	jmp	#LR__0823
	rdlong	_var02, objptr
	add	objptr, #4
	rdlong	_var03, objptr
	add	_var03, _var02
	wrbyte	arg01, _var03
	rdlong	_var01, objptr
	add	_var01, #1
	wrlong	_var01, objptr
	sub	objptr, #4
' 			p(i) = c
' 			i = i+1
' 			return 1
	mov	result1, #1
	jmp	#___strs_cl_pfunc_ret
LR__0823
' 			return -1
	neg	result1, #1
___strs_cl_pfunc_ret
	ret

__struct__s_vfs_file_t_putchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #24
	rdlong	local01, objptr wz
	sub	objptr, #24
 if_e	mov	result1, #0
 if_e	jmp	#LR__0824
	add	objptr, #24
	rdlong	local01, objptr
	sub	objptr, #24
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg02, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wcz
 if_b	mov	local01, #0
 if_ae	mov	local01, #1
	mov	result1, local01
LR__0824
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_putchar_ret
	ret

__struct__s_vfs_file_t_getchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #28
	rdlong	local01, objptr wz
	sub	objptr, #28
 if_e	neg	result1, #1
 if_e	jmp	#LR__0825
'         return getcf(__this);
	add	objptr, #28
	rdlong	local01, objptr
	sub	objptr, #28
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg01, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
LR__0825
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_getchar_ret
	ret

__struct___bas_wrap_sender_tx
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	local01, objptr
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_tx_ret
	ret

LR__0826
	byte	"/"
	byte	0
LR__0827
	byte	" !!! corrupted heap??? !!! "
	byte	0
LR__0828
	byte	" !!! out of heap memory !!! "
	byte	0
LR__0829
	byte	" !!! corrupted heap !!! "
	byte	0
LR__0830
	byte	0
	byte	0
LR__0831
	byte	34,"*+,:;<=>?[]|",127
	byte	0
LR__0832
	byte	-21,"v",-112,"EXFAT   "
	byte	0
LR__0833
	byte	"FAT"
	byte	0
LR__0834
	byte	"FAT32"
	byte	0
LR__0835
	byte	"Basic test"
	byte	0
LR__0836
	byte	"kwas2"
	byte	0
LR__0837
	byte	"/sd"
	byte	0
LR__0838
	byte	"/sd/testbas.txt"
	byte	0
LR__0839
	byte	"/sd/testbas.txt"
	byte	0
	alignl
_hng030rm_spin2_dat_
'-' vga_font       file "vgafont.def"
	byte	$00[19]
	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
	byte	$00[11]
	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
	byte	$00[16]
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
	byte	$00[9]
	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
	byte	$18[8]
	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
	byte	$18[6]
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[10]
	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
	byte	$33[6]
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
	byte	$00[6]
	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
	byte	$00[6]
	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18[15]
	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6c[9]
	byte	$00[5]
	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
	byte	$66[6]
	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
	byte	$00[12]
	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
	byte	$ff[9]
	byte	$00[7]
	byte	$ff[9]
	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$ff[7]
	byte	$00[9]
	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
	byte	$00[8]
	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
'-' st_font        file "st4font.def"
	byte	$00[55]
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$18[9]
	byte	$00[7]
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
	byte	$66[5]
	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[8]
	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
	byte	$00[9]
	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[5]
	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00[13]
	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
	byte	$00[8]
	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
	byte	$60[7]
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
	byte	$00[18]
	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
	byte	$30[9]
	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
	byte	$00[7]
	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
'-' twocolors      long  $00000000,$FFFFFF00
	byte	$00, $00, $00, $00, $00, $ff, $ff, $ff
'-' fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
	byte	$00, $00, $00, $00, $00, $80, $80, $80, $00, $00, $00, $ff, $00, $ff, $ff, $ff
'-' vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
	byte	$00[5]
	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
'-' ataripalette   file "ataripalettep2.def"
	byte	$00[5]
	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
'-' '**********************************************************************************
'-' '
'-' '        Timings and colors definitions
'-' '
'-' '**********************************************************************************
'-' 
'-'    'streamer sets for text mode, to add to timings[0..5]
'-' 
'-' 
'-' '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
'-' timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $50, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
'-' timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
	byte	$12, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00, $b0, $03, $00, $00
	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
'-' timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
	byte	$10, $00, $00, $00, $40, $00, $00, $00, $10, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
'-' timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $50, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
	byte	$50, $00, $00, $00, $a0, $00, $00, $00, $54, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
'-' timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$50, $00, $00, $00, $32, $00, $00, $00, $50, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
	byte	$18, $00, $00, $00, $30, $00, $00, $00, $18, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
'-' timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$20, $00, $00, $00, $40, $00, $00, $00, $22, $00, $00, $00, $80, $03, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
'-' vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
	byte	$00, $75, $c7, $97, $27, $47, $f6, $0a, $05, $79, $cb, $9b, $2b, $4b, $ea, $0f
'-' 
'-' hdmi            setq    #9
	byte	$28, $12, $64, $fd
'-'                 rdlong  framebuf,  ptra                  'read pointers
	byte	$00, $df, $06, $fb
'-'            '     setq2   #255
'-'             '    rdlong  $100, paletteptr 
'-'                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
	byte	$00, $26, $6f, $fc
'-'                 setcmod #$100                            'enable HDMI mode
	byte	$3c, $00, $66, $fd
'-'                 mov     ii,#448                          '7 << 6          
	byte	$c0, $f9, $06, $f6
'-'                 add     ii,hbase
	byte	$78, $f9, $02, $f1
'-'                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
	byte	$58, $f8, $62, $fd
'-'                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
	byte	$7b, $0b, $80, $ff, $7c, $01, $0b, $fc
'-' 
'-'                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
	byte	$66, $66, $86, $ff, $1d, $9a, $65, $fd
'-' 
'-' 
'-' ''--------  frame rendering main loop  ---------------------------------------------------
'-' 
'-' p101
'-'                 setq    #10
	byte	$28, $14, $64, $fd
'-'                 rdlong  framebuf,  ptra
	byte	$00, $df, $06, $fb
'-'                 setq    #15
	byte	$28, $1e, $64, $fd
'-'                 rdlong  m_bs,modeptr                     ' read timings
	byte	$74, $9b, $02, $fb
'-'                 rdlong  border,borderptr
	byte	$71, $99, $02, $fb
'-' 
'-'                 add     frames,#1
	byte	$01, $c4, $06, $f1
'-'                 mov     dlptr2,dlptr
	byte	$76, $f5, $02, $f6
'-' 
'-'                 rdlong  cursorx, cursorptr               ' read cursor position
	byte	$73, $c7, $02, $fb
'-'                 getbyte cursory, cursorx,#1              ' y position at byte #1
	byte	$63, $c9, $ea, $f8
'-'                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
	byte	$63, $c3, $f2, $f8
'-'                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
	byte	$ff, $c6, $06, $f5
'-'  '' up porch
'-' 
'-'                 mov     hsync0,sync_000                  '
	byte	$48, $fd, $02, $f6
'-'                 mov     hsync1,sync_001
	byte	$49, $ff, $02, $f6
'-'                 callpa  i_upporch ,#blank
	byte	$37, $a8, $46, $fb
'-'                 wrlong  #0,vblankptr
	byte	$72, $01, $68, $fc
'-'                 
'-'                 testb   paletteptr,#31 wc
	byte	$1f, $ea, $16, $f4
'-'          if_nc  setq2   #255
	byte	$29, $fe, $65, $3d
'-'          if_nc  rdlong  $000, paletteptr                'read palette
	byte	$75, $01, $00, $3b
'-' 
'-' '' cursor blinking
'-' 
'-'                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
	byte	$04, $c4, $0e, $f4
'-'          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
	byte	$81, $c6, $06, $a6
'-' 
'-' '' main screen
'-' 
'-'                 mov linenum,#0
	byte	$00, $be, $06, $f6
'-'                 mov rcnt,#0
	byte	$00, $18, $07, $f6
'-'                 mov rcnt2a,#0
	byte	$00, $1c, $07, $f6
'-' 
'-' 
'-' p301            cmp rcnt,#0 wz
	byte	$00, $18, $0f, $f2
'-'         if_z    jmp #p306
	byte	$18, $00, $90, $ad
'-'                 sub rcnt,#1
	byte	$01, $18, $87, $f1
'-'                 mov dl,rdl
	byte	$90, $f7, $02, $f6
'-'                incmod rcnt2a,rcnt2 wz
	byte	$8d, $1d, $0b, $f7
'-'    if_z        add dl,roffset  
	byte	$8f, $f7, $02, $a1
'-'                 mov rdl,dl
	byte	$7b, $21, $03, $f6
'-'                 jmp #p307          
	byte	$04, $00, $90, $fd
'-'           
'-'                 
'-' p306            rdlong  dl,dlptr2
	byte	$7a, $f7, $02, $fb
'-' p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
	byte	$7b, $fb, $1a, $f6
'-'                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
	byte	$6a, $fa, $7a, $fd
'-'    if_nz_or_nc  jmp     #p303                        
	byte	$34, $00, $90, $7d
'-' 
'-' '' Special entry:
'-' '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
'-' '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
'-' '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
'-' '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
'-' '' todo: set horizontal scroll (if needed)
'-' 
'-'                 shl framebuf2,#2
	byte	$02, $fa, $66, $f0
'-'                 getnib dlc,framebuf2,#0
	byte	$7d, $23, $43, $f8
'-'                 cmp dlc,#%100 wz
	byte	$04, $22, $0f, $f2
'-'   
'-'                 
'-'                 add dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                              if_nz  jmp #p301  '' now ignore unknown instruction 
	byte	$bc, $ff, $9f, $5d
'-'                  rdlong rdl,dlptr2
	byte	$7a, $21, $03, $fb
'-'                  getword rcnt,framebuf2,#1 
	byte	$7d, $19, $3b, $f9
'-'                  shr rcnt,#4
	byte	$04, $18, $47, $f0
'-'              
'-'                  getnib rcnt2,framebuf2,#4
	byte	$7d, $1b, $63, $f8
'-'                  getword roffset,framebuf2,#0
	byte	$7d, $1f, $33, $f9
'-'                 
'-'                  shr roffset,#4
	byte	$04, $1e, $47, $f0
'-'                  shl roffset,#12
	byte	$0c, $1e, $67, $f0
'-'   
'-'                  jmp #p301
	byte	$9c, $ff, $9f, $fd
'-'                  
'-'                  
'-' p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
'-'                 shr     framebuf2,#12
	byte	$0c, $fa, $46, $f0
'-'                 shl     framebuf2,#2
	byte	$02, $fa, $66, $f0
'-' 
'-'                 getbyte t1,dl,#0
	byte	$7b, $03, $e3, $f8
'-'                 cmp     t1,#0 wz
	byte	$00, $02, $0f, $f2
'-'     if_z        jmp     #borderline
	byte	$34, $00, $90, $ad
'-' 
'-'                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
	byte	$00, $f6, $16, $f4
'-'           if_c   jmp     #textline
	byte	$50, $00, $90, $cd
'-'           if_nc  jmp     #graphline
	byte	$50, $02, $90, $3d
'-' '
'-' p302            add     linenum,#1
	byte	$01, $be, $06, $f1
'-'                 add     dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                 cmp     linenum,i_totalvis  wz
	byte	$5c, $bf, $0a, $f2
'-'          if_nz  jmp     #p301
	byte	$6c, $ff, $9f, $5d
'-' 
'-' p112            wrlong  #1,vblankptr
	byte	$72, $03, $68, $fc
'-'                 callpa  i_downporch ,#blank             'bottom blanks
	byte	$07, $ac, $46, $fb
'-' 
'-'                 mov     hsync0,sync_222                 'vsync on
	byte	$4a, $fd, $02, $f6
'-'                 mov     hsync1,sync_223
	byte	$4b, $ff, $02, $f6
'-'                 callpa  i_vsync,#blank                  'vertical sync blanks
	byte	$04, $aa, $46, $fb
'-'                 jmp     #p101
	byte	$f8, $fe, $9f, $fd
'-' 
'-' '' ---------------  END of frame rendering loop -------------------------------------------
'-' 
'-' 
'-' borderline      call    #hsync                      ' make a border
	byte	$14, $00, $b0, $fd
'-'                 xcont   m_vi,border
	byte	$4c, $a1, $c2, $fc
'-'                 jmp     #p302
	byte	$cc, $ff, $9f, $fd
'-' 
'-' 
'-' blank           call    #hsync                          'blank lines
	byte	$08, $00, $b0, $fd
'-'                 xcont   m_vi,hsync0
	byte	$7e, $a1, $c2, $fc
'-'         _ret_   djnz    pa,#blank
	byte	$fd, $ed, $6f, $0b
'-' 
'-' hsync           xcont   m_bs,hsync0                     'horizontal sync
	byte	$7e, $9b, $c2, $fc
'-'                 xzero   m_sn,hsync1
	byte	$7f, $9d, $b2, $fc
'-'         _ret_   xcont   m_bv,hsync0
	byte	$7e, $9f, $c2, $0c
'-' 
'-' 
'-' 
'-' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'-'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
'-' 
'-' '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
'-' 
'-' textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
	byte	$63, $cd, $02, $f6
'-' 
'-'                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
	byte	$7b, $01, $53, $f8
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3
	byte	$03, $16, $07, $f5
'-' 
'-' 
'-' 
'-'                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
	byte	$7b, $bd, $02, $f6
'-'                 shr     linestart,#2                    ' scanline to char line
	byte	$02, $bc, $46, $f0
'-'                 and     linestart,#63
	byte	$3f, $bc, $06, $f5
'-'                 cmp     linestart,cursory wz            ' if the cursor is not here
	byte	$64, $bd, $0a, $f2
'-'           if_nz mov     cursorpos2,#129                 ' move it out of the screen
	byte	$81, $cc, $06, $56
'-' 
'-'                 call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$cc, $ff, $bf, $fd
'-' 
'-'                        ' if fontline =0, get a border color
'-' 
'-' p102            getword t1,m_border,#0
	byte	$51, $03, $33, $f9
'-'                 cmp     t1, #0 wz
	byte	$00, $02, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
	byte	$61, $01, $1b, $f2
'-'           if_c  mov     cursorpos,#129                  ' move it out of the screen
	byte	$81, $ca, $06, $c6
'-'          if_nc  mov     cursorpos,cursorpos2
	byte	$66, $cb, $02, $36
'-'                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
	byte	$01, $ca, $06, $f1
'-'                 mov     t2,fontbuf                      ' font definition pointer
	byte	$70, $05, $03, $f6
'-'                 add     t2,fontline                     ' add a current font line
	byte	$80, $05, $03, $f1
'-'                 mov m_lut2, m_lut1
	byte	$52, $bb, $02, $f6
'-'                 add m_lut2, lutt1
	byte	$6a, $bb, $02, $f1
'-'                 mov cpl2,i_cpl
	byte	$58, $0f, $03, $f6
'-' 
'-'                cmp zoom,#2 wz
	byte	$02, $16, $0f, $f2
'-'           if_z jmp #p420
	byte	$e4, $00, $90, $ad
'-'                cmp zoom,#1 wz
	byte	$01, $16, $0f, $f2
'-'           if_z jmp #p410
	byte	$64, $00, $90, $ad
'-'                 cmp zoom,#0 wz
	byte	$00, $16, $0f, $f2
'-'           if_z jmp #p400
	byte	$04, $00, $90, $ad
'-'                jmp #p430
	byte	$50, $01, $90, $fd
'-' 
'-'                    '
'-'  ''---------------------------------------------------------------------------------------------------------
'-'  p400                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p400
	byte	$eb, $0f, $6f, $fb
'-'  p401                   jmp    #p103
	byte	$28, $01, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p410                   shr cpl2,#1
	byte	$01, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------------------------
'-'  p412                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-' 
'-'                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
	byte	$81, $07, $4b, $f8
'-'                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
	byte	$81, $03, $43, $f8
'-'                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
	byte	$63, $02, $63, $fd
'-'                         mul t1,#3
	byte	$03, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-'                         mergew t3
	byte	$63, $06, $63, $fd
'-'                         mul t3,#3
	byte	$03, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p412
	byte	$e4, $0f, $6f, $fb
'-'  p411                   jmp    #p103
	byte	$b0, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p420                   shr cpl2,#2
	byte	$02, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------
'-'  p422                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         mergeb t1
	byte	$61, $02, $63, $fd
'-'                         getword t3,t1,#1
	byte	$81, $07, $3b, $f9
'-'                         mul t1,#15
	byte	$0f, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         getbyte t4,t1,#1        '
	byte	$81, $09, $eb, $f8
'-'                         xcont m_lut2,t4                                                                                                           '
	byte	$84, $bb, $c2, $fc
'-' 
'-'                         mul t3,#15
	byte	$0f, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         getbyte t5,t3,#1
	byte	$83, $0b, $eb, $f8
'-'                         xcont m_lut2, t5
	byte	$85, $bb, $c2, $fc
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p422
	byte	$e2, $0f, $6f, $fb
'-'  p421                   jmp    #p103
	byte	$30, $00, $90, $fd
'-' 
'-' '--------------------------------------------------------------------------------------------------------------
'-' 
'-'  p430                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-' 
'-'                         xcont m_lut2,#0
	byte	$00, $ba, $c6, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         djnz   cpl2,#p430
	byte	$f5, $0f, $6f, $fb
'-'  p431                   jmp    #p103
	byte	$00, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-' 
'-' 
'-' p103            getword  mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$b0, $fd, $9f, $fd
'-' 
'-' '' -------------------------------------- END of text line ---------------------------------
'-' 
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
'-' 
'-' graphline       call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$ec, $fd, $bf, $fd
'-' 
'-' 
'-' p202            getword mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp     mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-' '----------------------------------------- display pixels
'-' 
'-'                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
	byte	$52, $bb, $02, $f6
'-'                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
	byte	$58, $0f, $03, $f6
'-' 
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3                        ' get a horizontal zoom for the line
	byte	$03, $16, $07, $f5
'-' 
'-'                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
	byte	$7b, $bd, $02, $f6
'-'                 and     colordepth,#12
	byte	$0c, $bc, $06, $f5
'-' 
'-'                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
	byte	$00, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg1
	byte	$6b, $bb, $02, $a1
'-'           if_z  jmp     #p240
	byte	$64, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
	byte	$04, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg2
	byte	$6c, $bb, $02, $a1
'-'           if_z  jmp     #p250
	byte	$98, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
	byte	$08, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg4
	byte	$6d, $bb, $02, $a1
'-'           if_z  jmp     #p260
	byte	$fc, $00, $90, $ad
'-' 
'-'                 add m_lut2,lutg8                        ' 8 bpp modes
	byte	$6e, $bb, $02, $f1
'-' 
'-' '' --- 8 bit color modes
'-' 
'-'                 cmp zoom, #%00 wz   '256 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$50, $01, $90, $ad
'-' 
'-'                 cmp zoom, #%01 wz   '256 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'                 if_z mov skippattern,#%101010
	byte	$2a, $0c, $07, $a6
'-'        
'-'  '  
'-'                 cmp zoom, #%10 wz   '256 colors, zoom x4
	byte	$02, $16, $0f, $f2
'-'                 if_z mov skippattern,#%100101
	byte	$25, $0c, $07, $a6
'-'     
'-'  
'-'                 if_nz mov skippattern,#%000101
	byte	$05, $0c, $07, $56
'-'                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
	byte	$01, $0e, $47, $50
'-'         
'-' 
'-'         
'-' p235               rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    add     framebuf2,#2             '0 1 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1             '1 0 0
	byte	$01, $fa, $06, $f1
'-'                    movbyts char,#%01010000          '0 1 1
	byte	$50, $10, $ff, $f9
'-'                    movbyts char,#%00000000          '1 0 0
	byte	$00, $10, $ff, $f9
'-'                    xcont   m_lut2,char              '0 0 0
	byte	$88, $bb, $c2, $fc
'-'                    xcont   m_lut2,char              '1 1 0
	byte	$88, $bb, $c2, $fc
'-'                    djnz    cpl2,#p235
	byte	$f7, $0f, $6f, $fb
'-' 
'-'                jmp    #p203
	byte	$20, $01, $90, $fd
'-'                   
'-' 
'-' 
'-' '' --- 1 bit color modes
'-' 
'-' p240          cmp zoom, #%00 wz     '2 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$08, $01, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '2 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   mov skippattern,#%10011
	byte	$13, $0c, $07, $a6
'-'        if_nz  mov skippattern,#%01000
	byte	$08, $0c, $07, $56
'-' 
'-' 
'-' p241               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    movbyts char,#%01000100
	byte	$44, $10, $ff, $f9
'-'                    mergew  char
	byte	$63, $10, $63, $fd
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    movbyts char,#%01000100         ' 1 0
	byte	$44, $10, $ff, $f9
'-'                    mergew  char                    ' 1 0
	byte	$63, $10, $63, $fd
'-'                    xcont   m_lut2,char             ' 0 0
	byte	$88, $bb, $c2, $fc
'-'                    add     framebuf2,#2                    ' 0 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1                ' 1 0
	byte	$01, $fa, $06, $f1
'-'                    djnz   cpl2,#p241
	byte	$f6, $0f, $6f, $fb
'-' 
'-' 
'-'                jmp    #p203
	byte	$e0, $00, $90, $fd
'-' 
'-' '' --- 2 bit color modes
'-' 
'-' p250          cmp zoom, #%00 wz     '4 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$c8, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p252
	byte	$30, $00, $90, $ad
'-' 
'-' 
'-' p254               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                    mov  t5,#4
	byte	$04, $0a, $07, $f6
'-' p255               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#2
	byte	$88, $03, $53, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#$55
	byte	$55, $02, $07, $fa
'-'                    rolbyte  t2,t1,#0
	byte	$81, $05, $03, $f9
'-'                    djnz    t5,#p255
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p254
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$a0, $00, $90, $fd
'-' 
'-' p252               rdword char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    mov  t5,#8
	byte	$08, $0a, $07, $f6
'-' p253               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#4
	byte	$88, $03, $63, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#5
	byte	$05, $02, $07, $fa
'-'                    rolnib  t2,t1,#0
	byte	$81, $05, $83, $f8
'-'                    djnz    t5,#p253
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p252
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$70, $00, $90, $fd
'-' 
'-' '' ------ 4 bit color modes
'-' 
'-' p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$58, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p262
	byte	$2c, $00, $90, $ad
'-' 
'-' 
'-' p263               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                            rep #5,#2
	byte	$02, $0a, $dc, $fc
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p263
	byte	$f6, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$34, $00, $90, $fd
'-' 
'-' p262               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                            rep #3,#4
	byte	$04, $06, $dc, $fc
'-'                              rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                                  rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p262
	byte	$f8, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$10, $00, $90, $fd
'-' 
'-' ''---------- all color modes without zoom
'-' 
'-' p251               rep  #3,cpl2
	byte	$87, $07, $d8, $fc
'-'                    rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    add     framebuf2,#4
	byte	$04, $fa, $06, $f1
'-'                    xcont   m_lut2,char
	byte	$88, $bb, $c2, $fc
'-'           
'-'  ''-----------------------------------------------------------------------------------------
'-' p203           ' getword  mb2,m_border,#0
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$ec, $fb, $9f, $fd
'-' 
'-' '' -------------------------------------- END of graph  line ---------------------------------
'-' 
'-' '' consts and vars
'-' 
'-' sync_000        long    %1101010100_1101010100_1101010100_10    '
	byte	$52, $4d, $35, $d5
'-' sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
	byte	$ae, $42, $35, $d5
'-' sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
	byte	$52, $45, $15, $55
'-' sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
	byte	$ae, $4a, $15, $55
'-' 
'-' border          long    %00000000_00011010_00101100_00000000
	byte	$00, $2c, $1a, $00
'-' 
'-' '------ these longs will be set by setmode function
'-' 
'-' m_bs            long    0        'blanks before sync
	byte	$00, $00, $00, $00
'-' m_sn            long    0        'sync
	byte	$00, $00, $00, $00
'-' m_bv            long    0        'blanks before visible
	byte	$00, $00, $00, $00
'-' m_vi            long    0        'visible pixels #
	byte	$00, $00, $00, $00
'-' m_border        long    0        'left/right borders
	byte	$00, $00, $00, $00
'-' m_lut1          long    0        'characters
	byte	$00, $00, $00, $00
'-' i_vborder       long    0        'up/down borders
	byte	$00, $00, $00, $00
'-' i_upporch       long    0        'up porch lines
	byte	$00, $00, $00, $00
'-' i_vsync         long    0        'vsync lines
	byte	$00, $00, $00, $00
'-' i_downporch     long    0        'down porch lines
	byte	$00, $00, $00, $00
'-' i_modenum       long    0        'mode #
	byte	$00, $00, $00, $00
'-' i_cpl           long    0        'chars/longs per line
	byte	$00, $00, $00, $00
'-' i_lines         long    0        'scanlines #
	byte	$00, $00, $00, $00
'-' i_clock         long    0
	byte	$00, $00, $00, $00
'-' i_hubset        long    0
	byte	$00, $00, $00, $00
'-' i_totalvis      long    0
	byte	$00, $00, $00, $00
'-' 
'-' '-------------------------------------
'-' 
'-' m_lut2          long    0
	byte	$00, $00, $00, $00
'-' 
'-' colordepth
'-' linestart       long    0
	byte	$00, $00, $00, $00
'-' linenum         long    0
	byte	$00, $00, $00, $00
'-' lutaddr         long    256
	byte	$00, $01, $00, $00
'-' 
'-' cursorsh        long    14
	byte	$0e, $00, $00, $00
'-' frames          long    0
	byte	$00, $00, $00, $00
'-' cursorx         long    0
	byte	$00, $00, $00, $00
'-' cursory         long    0
	byte	$00, $00, $00, $00
'-' cursorpos       long    0
	byte	$00, $00, $00, $00
'-' cursorpos2      long    0
	byte	$00, $00, $00, $00
'-' fontstart       long    0
	byte	$00, $00, $00, $00
'-' border2         long 0
	byte	$00, $00, $00, $00
'-' lutiv           long $70810000
	byte	$00, $00, $81, $70
'-' lutt1           long $00880000
	byte	$00, $00, $88, $00
'-' lutg1           long $00800000
	byte	$00, $00, $80, $00
'-' lutg2           long $10800000
	byte	$00, $00, $80, $10
'-' lutg4           long $20800000
	byte	$00, $00, $80, $20
'-' lutg8           long $30800000
	byte	$00, $00, $80, $30
'-' framebuf        long 0
	byte	$00, $00, $00, $00
'-' fontbuf         long 0
	byte	$00, $00, $00, $00
'-' borderptr       long 0
	byte	$00, $00, $00, $00
'-' vblankptr       long 0
	byte	$00, $00, $00, $00
'-' cursorptr       long 0
	byte	$00, $00, $00, $00
'-' modeptr         long 0
	byte	$00, $00, $00, $00
'-' paletteptr      long 0
	byte	$00, $00, $00, $00
'-' dlptr           long 0
	byte	$00, $00, $00, $00
'-' fontnumptr      res     1
'-' fontnumptr      res     1
'-' hbase           res     1
'-' hbase           res     1
'-' borderptr2      res     1
'-' borderptr2      res     1
'-' dlptr2 res 1
'-' dlptr2 res 1
'-' dl              res 1
'-' dl              res 1
'-' ii              res     1
'-' ii              res     1
'-' framebuf2       res     1
'-' framebuf2       res     1
'-' hsync0          res     1
'-' hsync0          res     1
'-' hsync1          res     1
'-' hsync1          res     1
'-' fontline        res     1
'-' fontline        res     1
'-' t1              res     1
'-' t1              res     1
'-' t2              res     1
'-' t2              res     1
'-' t3 res 1
'-' t3 res 1
'-' t4 res 1
'-' t4 res 1
'-' t5 res 1
'-' t5 res 1
'-' skippattern res 1
'-' skippattern res 1
'-' cpl2 res 1
'-' cpl2 res 1
'-' char            res     1
'-' char            res     1
'-' backcolor       res     1
'-' backcolor       res     1
'-' charcolor       res     1
'-' charcolor       res     1
'-' zoom res 1
'-' zoom res 1
'-' rcnt long 0 'dl repeat count
	byte	$00, $00, $00, $00
'-' rcnt2 long 0
	byte	$00, $00, $00, $00
'-' rcnt2a long 0
	byte	$00, $00, $00, $00
'-' roffset long 0
	byte	$00, $00, $00, $00
'-' rdl long 0  'dl repeat line
	byte	$00, $00, $00, $00
'-' dlc long 0 'dl command
	byte	$00, $00, $00, $00
'-' mb2 long 0
	byte	$00, $00, $00, $00
'-' aend             long 0
	byte	$00, $00, $00, $00
'-'                 fit     496                     '
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[560]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@__system__dat_ + 1056
	long	@@@__system__dat_ + 1064
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1072
	long	@@@__system__dat_ + 1080
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1088
	long	@@@__system__dat_ + 1096
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1104
	long	@@@__system__dat_ + 1112
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1120
	long	@@@__system__dat_ + 1128
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1136
	long	@@@__system__dat_ + 1144
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0150
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0151
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0150
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0151
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0150
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0151
	byte	$00[564]
	alignl
_ff_cc_dat_
	byte	$00[6]
	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
	byte	$01, $00, $04, $00, $10, $00, $40, $00, $00, $01, $00, $02, $00, $00, $01, $00
	byte	$02, $00, $04, $00, $08, $00, $10, $00, $20, $00, $00, $00, $00, $00, $07, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@_ff_cc_dat_ + 244
	long	@@@_ff_cc_dat_ + 252
	long	@@@_ff_cc_dat_ + 260
	long	@@@_ff_cc_dat_ + 268
	long	@@@_ff_cc_dat_ + 276
	long	@@@_ff_cc_dat_ + 284
	long	@@@_ff_cc_dat_ + 292
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_dat_ + 300
	long	@@@_ff_cc_dat_ + 308
	long	@@@_ff_cc_dat_ + 316
	long	@@@_ff_cc_dat_ + 324
	long	@@@_ff_cc_dat_ + 332
	long	@@@_ff_cc_dat_ + 340
	long	@@@_ff_cc_dat_ + 348
	long	@@@_ff_cc_dat_ + 356
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_open_0505
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_creat_0459
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_close_0462
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_read_0487
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_write_0491
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_lseek_0495
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_ioctl
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_opendir_0465
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_closedir_0468
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_readdir_0471
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_stat_0483
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_mkdir
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_rmdir_0499
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_remove
	byte	$00, $00, $00, $00
	long	@@@_ff_cc_v_rename_0501
	byte	$00[16]
	byte	$01, $00, $00, $00
__heap_base
	long	0[1026]
objmem
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
_var09
	res	1
_var10
	res	1
_var11
	res	1
_var12
	res	1
_var13
	res	1
_var14
	res	1
_var15
	res	1
_var16
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
local22
	res	1
local23
	res	1
local24
	res	1
local25
	res	1
local26
	res	1
local27
	res	1
local28
	res	1
local29
	res	1
local30
	res	1
local31
	res	1
local32
	res	1
local33
	res	1
local34
	res	1
local35
	res	1
local36
	res	1
local37
	res	1
local38
	res	1
local39
	res	1
local40
	res	1
local41
	res	1
local42
	res	1
local43
	res	1
local44
	res	1
local45
	res	1
local46
	res	1
local47
	res	1
local48
	res	1
local49
	res	1
local50
	res	1
local51
	res	1
local52
	res	1
local53
	res	1
local54
	res	1
local55
	res	1
local56
	res	1
local57
	res	1
local58
	res	1
local59
	res	1
local60
	res	1
local61
	res	1
local62
	res	1
local63
	res	1
local64
	res	1
local65
	res	1
local66
	res	1
local67
	res	1
local68
	res	1
local69
	res	1
local70
	res	1
local71
	res	1
local72
	res	1
local73
	res	1
local74
	res	1
local75
	res	1
local76
	res	1
local77
	res	1
local78
	res	1
local79
	res	1
local80
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
