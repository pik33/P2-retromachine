00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/audio010.p2asm"
00000                 | ' 
00000                 | '  _clkfreq = 319220550 ' This is 90x Amiga PAL   =3546895, change to NTSC freq if needed
00000                 | con
00000                 | 	_clkfreq = 319220550
00000                 | ' '_clkfreq = 322159050 ' This is 90x Amiga NTSC = 3579545
00000                 | ' 
00000                 | ' ' audio pins TODO: make a variable for start() instead of const
00000                 | ' 
00000                 | ' left= 14
00000                 | 	left = 14
00000                 | ' right=15
00000                 | 	right = 15
00000                 | ' 
00000                 | ' ' 4th octave frequencies, rounded to integer
00000                 | ' 
00000                 | ' c4=262
00000                 | 	c4 = 262
00000                 | ' d4=294
00000                 | 	d4 = 294
00000                 | ' e4=330
00000                 | 	e4 = 330
00000                 | ' f4=349
00000                 | 	f4 = 349
00000                 | ' g4=392
00000                 | 	g4 = 392
00000                 | ' a4=440
00000                 | 	a4 = 440
00000                 | ' h4=494
00000                 | 	h4 = 494
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 5E 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 AD F0 03 F6 | 	mov	ptra, objptr
00410 003 20 F1 07 F1 | 	add	ptra, #288
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 96 E5 80 FF 
00424 008 00 F0 67 FD | 	hubset	##30092792
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 96 E5 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##30092795
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 6C 83 89 FF 
00444 010 14 6C 6D FC | 	wrlong	##319215798, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C4 06 A0 FD | 	call	#_start
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 60 61 FD | 	cogid	arg01
00614 084 03 60 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 5B 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 5F 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 61 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 63 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 65 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 67 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 5E 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 64 55 F0 |         shr	arg03, #1 wc
00688 0a1 B0 62 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 60 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 62 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 64 55 F0 |         shr	arg03, #1 wc
00698 0a5 B0 62 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 60 05 C1 |  if_c   add	arg01, #2
006a0 0a7 B1 62 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 B0 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 64 0D F2 |         cmp	arg03, #0 wz
006ac 0aa B2 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 62 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | 
006b8 0ad             | objptr
006b8 0ad 48 10 00 00 | 	long	@objmem
006bc 0ae             | ptr__dat__
006bc 0ae 58 09 00 00 | 	long	@_dat_
006c0 0af             | result1
006c0 0af 00 00 00 00 | 	long	0
006c4 0b0             | COG_BSS_START
006c4 0b0             | 	fit	480
006c4                 | 	orgh
006c4                 | hubentry
006c4                 | 
006c4                 | ' 
006c4                 | ' 
006c4                 | ' 
006c4                 | ' '--------------------------------------------------------------
006c4                 | ' '---------- Init the variables, start the cog. ----------------
006c4                 | ' '--------------------------------------------------------------
006c4                 | ' 
006c4                 | ' pub start() :cog
006c4                 | _start
006c4     03 00 00 FF 
006c8     E8 5C 05 F1 | 	add	ptr__dat__, ##1768
006cc                 | ' 
006cc                 | ' 
006cc                 | ' channel1[0]:=@null
006cc     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
006d0                 | ' channel1[1]:=0
006d0     04 5A 05 F1 | 	add	objptr, #4
006d4     AD 00 68 FC | 	wrlong	#0, objptr
006d8                 | ' channel1[2]:=0
006d8     04 5A 05 F1 | 	add	objptr, #4
006dc     AD 00 68 FC | 	wrlong	#0, objptr
006e0                 | ' channel1[3]:=2
006e0     04 5A 05 F1 | 	add	objptr, #4
006e4     AD 04 68 FC | 	wrlong	#2, objptr
006e8                 | ' channel1[4]:=0
006e8     04 5A 05 F1 | 	add	objptr, #4
006ec     AD 00 68 FC | 	wrlong	#0, objptr
006f0                 | ' channel1[5]:=8192
006f0     04 5A 05 F1 | 	add	objptr, #4
006f4     10 00 80 FF 
006f8     AD 00 68 FC | 	wrlong	##8192, objptr
006fc                 | ' channel1[6]:=101
006fc     04 5A 05 F1 | 	add	objptr, #4
00700     AD CA 68 FC | 	wrlong	#101, objptr
00704                 | ' channel1[7]:=2
00704     04 5A 05 F1 | 	add	objptr, #4
00708     AD 04 68 FC | 	wrlong	#2, objptr
0070c                 | ' 
0070c                 | ' channel2[0]:=@null
0070c     08 5A 05 F1 | 	add	objptr, #8
00710     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
00714                 | ' channel2[1]:=0
00714     04 5A 05 F1 | 	add	objptr, #4
00718     AD 00 68 FC | 	wrlong	#0, objptr
0071c                 | ' channel2[2]:=0
0071c     04 5A 05 F1 | 	add	objptr, #4
00720     AD 00 68 FC | 	wrlong	#0, objptr
00724                 | ' channel2[3]:=2
00724     04 5A 05 F1 | 	add	objptr, #4
00728     AD 04 68 FC | 	wrlong	#2, objptr
0072c                 | ' channel2[4]:=0
0072c     04 5A 05 F1 | 	add	objptr, #4
00730     AD 00 68 FC | 	wrlong	#0, objptr
00734                 | ' channel2[5]:=8192
00734     04 5A 05 F1 | 	add	objptr, #4
00738     10 00 80 FF 
0073c     AD 00 68 FC | 	wrlong	##8192, objptr
00740                 | ' channel2[6]:=103
00740     04 5A 05 F1 | 	add	objptr, #4
00744     AD CE 68 FC | 	wrlong	#103, objptr
00748                 | ' channel2[7]:=2
00748     04 5A 05 F1 | 	add	objptr, #4
0074c     AD 04 68 FC | 	wrlong	#2, objptr
00750                 | ' 
00750                 | ' channel3[0]:=@null
00750     08 5A 05 F1 | 	add	objptr, #8
00754     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
00758                 | ' channel3[1]:=0
00758     04 5A 05 F1 | 	add	objptr, #4
0075c     AD 00 68 FC | 	wrlong	#0, objptr
00760                 | ' channel3[2]:=0
00760     04 5A 05 F1 | 	add	objptr, #4
00764     AD 00 68 FC | 	wrlong	#0, objptr
00768                 | ' channel3[3]:=2
00768     04 5A 05 F1 | 	add	objptr, #4
0076c     AD 04 68 FC | 	wrlong	#2, objptr
00770                 | ' channel3[4]:=0
00770     04 5A 05 F1 | 	add	objptr, #4
00774     AD 00 68 FC | 	wrlong	#0, objptr
00778                 | ' channel3[5]:=8192
00778     04 5A 05 F1 | 	add	objptr, #4
0077c     10 00 80 FF 
00780     AD 00 68 FC | 	wrlong	##8192, objptr
00784                 | ' channel3[6]:=107
00784     04 5A 05 F1 | 	add	objptr, #4
00788     AD D6 68 FC | 	wrlong	#107, objptr
0078c                 | ' channel3[7]:=2
0078c     04 5A 05 F1 | 	add	objptr, #4
00790     AD 04 68 FC | 	wrlong	#2, objptr
00794                 | ' 
00794                 | ' channel4[0]:=@null
00794     08 5A 05 F1 | 	add	objptr, #8
00798     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
0079c                 | ' channel4[1]:=0
0079c     04 5A 05 F1 | 	add	objptr, #4
007a0     AD 00 68 FC | 	wrlong	#0, objptr
007a4                 | ' channel4[2]:=0
007a4     04 5A 05 F1 | 	add	objptr, #4
007a8     AD 00 68 FC | 	wrlong	#0, objptr
007ac                 | ' channel4[3]:=2
007ac     04 5A 05 F1 | 	add	objptr, #4
007b0     AD 04 68 FC | 	wrlong	#2, objptr
007b4                 | ' channel4[4]:=0
007b4     04 5A 05 F1 | 	add	objptr, #4
007b8     AD 00 68 FC | 	wrlong	#0, objptr
007bc                 | ' channel4[5]:=8192
007bc     04 5A 05 F1 | 	add	objptr, #4
007c0     10 00 80 FF 
007c4     AD 00 68 FC | 	wrlong	##8192, objptr
007c8                 | ' channel4[6]:=109
007c8     04 5A 05 F1 | 	add	objptr, #4
007cc     AD DA 68 FC | 	wrlong	#109, objptr
007d0                 | ' channel4[7]:=2
007d0     04 5A 05 F1 | 	add	objptr, #4
007d4     AD 04 68 FC | 	wrlong	#2, objptr
007d8                 | ' channel4[8]:=1
007d8     04 5A 05 F1 | 	add	objptr, #4
007dc     AD 02 68 FC | 	wrlong	#1, objptr
007e0                 | ' 
007e0                 | ' channel5[0]:=@null
007e0     04 5A 05 F1 | 	add	objptr, #4
007e4     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
007e8                 | ' channel5[1]:=0
007e8     04 5A 05 F1 | 	add	objptr, #4
007ec     AD 00 68 FC | 	wrlong	#0, objptr
007f0                 | ' channel5[2]:=0
007f0     04 5A 05 F1 | 	add	objptr, #4
007f4     AD 00 68 FC | 	wrlong	#0, objptr
007f8                 | ' channel5[3]:=2
007f8     04 5A 05 F1 | 	add	objptr, #4
007fc     AD 04 68 FC | 	wrlong	#2, objptr
00800                 | ' channel5[4]:=0
00800     04 5A 05 F1 | 	add	objptr, #4
00804     AD 00 68 FC | 	wrlong	#0, objptr
00808                 | ' channel5[5]:=8192
00808     04 5A 05 F1 | 	add	objptr, #4
0080c     10 00 80 FF 
00810     AD 00 68 FC | 	wrlong	##8192, objptr
00814                 | ' channel5[6]:=113
00814     04 5A 05 F1 | 	add	objptr, #4
00818     AD E2 68 FC | 	wrlong	#113, objptr
0081c                 | ' channel5[7]:=2
0081c     04 5A 05 F1 | 	add	objptr, #4
00820     AD 04 68 FC | 	wrlong	#2, objptr
00824                 | ' 
00824                 | ' channel6[0]:=@null
00824     08 5A 05 F1 | 	add	objptr, #8
00828     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
0082c                 | ' channel6[1]:=0
0082c     04 5A 05 F1 | 	add	objptr, #4
00830     AD 00 68 FC | 	wrlong	#0, objptr
00834                 | ' channel6[2]:=0
00834     04 5A 05 F1 | 	add	objptr, #4
00838     AD 00 68 FC | 	wrlong	#0, objptr
0083c                 | ' channel6[3]:=2
0083c     04 5A 05 F1 | 	add	objptr, #4
00840     AD 04 68 FC | 	wrlong	#2, objptr
00844                 | ' channel6[4]:=0
00844     04 5A 05 F1 | 	add	objptr, #4
00848     AD 00 68 FC | 	wrlong	#0, objptr
0084c                 | ' channel6[5]:=8192
0084c     04 5A 05 F1 | 	add	objptr, #4
00850     10 00 80 FF 
00854     AD 00 68 FC | 	wrlong	##8192, objptr
00858                 | ' channel6[6]:=127
00858     04 5A 05 F1 | 	add	objptr, #4
0085c     AD FE 68 FC | 	wrlong	#127, objptr
00860                 | ' channel6[7]:=2
00860     04 5A 05 F1 | 	add	objptr, #4
00864     AD 04 68 FC | 	wrlong	#2, objptr
00868                 | ' 
00868                 | ' channel7[0]:=@null
00868     08 5A 05 F1 | 	add	objptr, #8
0086c     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
00870                 | ' channel7[1]:=0
00870     04 5A 05 F1 | 	add	objptr, #4
00874     AD 00 68 FC | 	wrlong	#0, objptr
00878                 | ' channel7[2]:=0
00878     04 5A 05 F1 | 	add	objptr, #4
0087c     AD 00 68 FC | 	wrlong	#0, objptr
00880                 | ' channel7[3]:=2
00880     04 5A 05 F1 | 	add	objptr, #4
00884     AD 04 68 FC | 	wrlong	#2, objptr
00888                 | ' channel7[4]:=0
00888     04 5A 05 F1 | 	add	objptr, #4
0088c     AD 00 68 FC | 	wrlong	#0, objptr
00890                 | ' channel7[5]:=8192
00890     04 5A 05 F1 | 	add	objptr, #4
00894     10 00 80 FF 
00898     AD 00 68 FC | 	wrlong	##8192, objptr
0089c                 | ' channel7[6]:=131
0089c     04 5A 05 F1 | 	add	objptr, #4
008a0     AD 06 69 FC | 	wrlong	#131, objptr
008a4                 | ' channel7[7]:=2
008a4     04 5A 05 F1 | 	add	objptr, #4
008a8     AD 04 68 FC | 	wrlong	#2, objptr
008ac                 | ' 
008ac                 | ' channel8[0]:=@null
008ac     08 5A 05 F1 | 	add	objptr, #8
008b0     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
008b4                 | ' channel8[1]:=0
008b4     04 5A 05 F1 | 	add	objptr, #4
008b8     AD 00 68 FC | 	wrlong	#0, objptr
008bc                 | ' channel8[2]:=0
008bc     04 5A 05 F1 | 	add	objptr, #4
008c0     AD 00 68 FC | 	wrlong	#0, objptr
008c4                 | ' channel8[3]:=2
008c4     04 5A 05 F1 | 	add	objptr, #4
008c8     AD 04 68 FC | 	wrlong	#2, objptr
008cc                 | ' channel8[4]:=0
008cc     04 5A 05 F1 | 	add	objptr, #4
008d0     AD 00 68 FC | 	wrlong	#0, objptr
008d4                 | ' channel8[5]:=8192
008d4     04 5A 05 F1 | 	add	objptr, #4
008d8     10 00 80 FF 
008dc     AD 00 68 FC | 	wrlong	##8192, objptr
008e0                 | ' channel8[6]:=137
008e0     04 5A 05 F1 | 	add	objptr, #4
008e4     AD 12 69 FC | 	wrlong	#137, objptr
008e8                 | ' channel8[7]:=2
008e8     04 5A 05 F1 | 	add	objptr, #4
008ec     AD 04 68 FC | 	wrlong	#2, objptr
008f0                 | ' 
008f0                 | ' channel1[8]:=1
008f0     F8 5A 85 F1 | 	sub	objptr, #248
008f4     AD 02 68 FC | 	wrlong	#1, objptr
008f8                 | ' channel2[8]:=1
008f8     24 5A 05 F1 | 	add	objptr, #36
008fc     AD 02 68 FC | 	wrlong	#1, objptr
00900                 | ' channel3[8]:=1
00900     24 5A 05 F1 | 	add	objptr, #36
00904     AD 02 68 FC | 	wrlong	#1, objptr
00908                 | ' channel4[8]:=1
00908     24 5A 05 F1 | 	add	objptr, #36
0090c     AD 02 68 FC | 	wrlong	#1, objptr
00910                 | ' channel5[8]:=1
00910     24 5A 05 F1 | 	add	objptr, #36
00914     AD 02 68 FC | 	wrlong	#1, objptr
00918                 | ' channel6[8]:=1
00918     24 5A 05 F1 | 	add	objptr, #36
0091c     AD 02 68 FC | 	wrlong	#1, objptr
00920                 | ' channel7[8]:=1
00920     24 5A 05 F1 | 	add	objptr, #36
00924     AD 02 68 FC | 	wrlong	#1, objptr
00928                 | ' channel8[8]:=1
00928     24 5A 05 F1 | 	add	objptr, #36
0092c     AD 02 68 FC | 	wrlong	#1, objptr
00930     1C 5B 85 F1 | 	sub	objptr, #284
00934                 | ' 
00934                 | ' cog:=coginit(16,@audio,@channel1)
00934     03 00 00 FF 
00938     E8 5C 85 F1 | 	sub	ptr__dat__, ##1768
0093c     10 60 05 F6 | 	mov	arg01, #16
00940     28 5A 61 FD | 	setq	objptr
00944     AE 60 F1 FC | 	coginit	arg01, ptr__dat__ wc
00948     01 60 65 C6 |  if_b	neg	arg01, #1
0094c     B0 5E 01 F6 | 	mov	result1, arg01
00950                 | ' return cog
00950                 | _start_ret
00950     2D 00 64 FD | 	ret
00954                 | hubexit
00954     81 00 80 FD | 	jmp	#cogexit
00958                 | 	alignl
00958                 | _dat_
00958                 | 
00958                 | audio       org     0
00958                 | 
00958     0E 72 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
0095c     0E B4 1C FC |             wxpin   #90,#left
00960                 | 
00960     0F 72 07 FC |             wrpin   dac,#right
00964     0F B4 1C FC |             wxpin   #90,#right
00968                 |             
00968     00 F2 07 F6 |             mov ptrb,#0
0096c                 | 
0096c     41 9C 64 FD |             dirh    #left addpins 1
00970                 | 
00970     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
00974     2E E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
00978     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
0097c                 |             
0097c                 | '---------------------------------------------------------------------------------        
0097c                 | '----------------- The main loop -------------------------------------------------
0097c                 | '---------------------------------------------------------------------------------
0097c                 | 
0097c     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
00980     61 A5 06 FB |             rdlong  sstart1,ptra++
00984     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
00988     61 B7 06 FB |             rdlong  sstart2,ptra++
0098c     28 10 64 FD |             setq    #8
00990     61 C9 06 FB |             rdlong  sstart3,ptra++
00994     28 10 64 FD |             setq    #8
00998     61 DB 06 FB |             rdlong  sstart4,ptra++
0099c     28 10 64 FD |             setq    #8
009a0     61 ED 06 FB |             rdlong  sstart5,ptra++
009a4     28 10 64 FD |             setq    #8
009a8     61 FF 06 FB |             rdlong  sstart6,ptra++
009ac     28 10 64 FD |             setq    #8
009b0     61 11 07 FB |             rdlong  sstart7,ptra++
009b4     28 10 64 FD |             setq    #8
009b8     61 23 07 FB |             rdlong  sstart8,ptra++
009bc                 | 
009bc     20 F1 87 F1 |             sub     ptra,#9*4*8    
009c0                 |             
009c0     3E 37 13 F2 |             cmp     time1,a1FFFFFFF wc   ' Main counter overflow workaround
009c4     3E 39 13 32 |      if_nc  cmp     time2,a1FFFFFFF wc   ' before the time is written to the buffer, it is ANDed with $1FFFFFFF  
009c8     3E 3B 13 32 |      if_nc  cmp     time3,a1FFFFFFF wc   ' Also, the interrupt procedure ands the counter  
009cc     3E 3D 13 32 |      if_nc  cmp     time4,a1FFFFFFF wc   ' So, if the counter is >=$20000000, the compare sequence still works  
009d0     3E 3F 13 32 |      if_nc  cmp     time5,a1FFFFFFF wc   ' and when all counters are >=$20000000, all of them are SUBed at the same time 
009d4     3E 41 13 32 |      if_nc  cmp     time6,a1FFFFFFF wc   ' including time0 main counter  
009d8     3E 43 13 32 |      if_nc  cmp     time7,a1FFFFFFF wc     
009dc     3E 45 13 32 |      if_nc  cmp     time8,a1FFFFFFF wc   ' was 7FFFFFFF - reduced to make debugging easier 
009e0     3F 37 83 31 |      if_nc  sub     time1,a20000000
009e4     3F 39 83 31 |      if_nc  sub     time2,a20000000
009e8     3F 3B 83 31 |      if_nc  sub     time3,a20000000
009ec     3F 3D 83 31 |      if_nc  sub     time4,a20000000
009f0     3F 3F 83 31 |      if_nc  sub     time5,a20000000
009f4     3F 41 83 31 |      if_nc  sub     time6,a20000000
009f8     3F 43 83 31 |      if_nc  sub     time7,a20000000
009fc     3F 45 83 31 |      if_nc  sub     time8,a20000000
00a00     3F 35 83 31 |      if_nc  sub     time0,a20000000
00a04                 | 
00a04                 |        
00a04                 |     
00a04     00 B4 0E F2 |             cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
00a08     00 80 06 A6 |     if_e    mov     p1,#0
00a0c     00 C6 0E F2 |             cmp     acmd2,#0 wz
00a10     00 82 06 A6 |     if_e    mov     p2,#0
00a14     00 D8 0E F2 |             cmp     acmd3,#0 wz
00a18     00 84 06 A6 |     if_e    mov     p3,#0
00a1c     00 EA 0E F2 |             cmp     acmd4,#0 wz
00a20     00 86 06 A6 |     if_e    mov     p4,#0
00a24     00 FC 0E F2 |             cmp     acmd5,#0 wz
00a28     00 88 06 A6 |     if_e    mov     p5,#0
00a2c     00 0E 0F F2 |             cmp     acmd6,#0 wz
00a30     00 8A 06 A6 |     if_e    mov     p6,#0
00a34     00 20 0F F2 |             cmp     acmd7,#0 wz
00a38     00 8C 06 A6 |     if_e    mov     p7,#0
00a3c     00 32 0F F2 |             cmp     acmd8,#0 wz
00a40     00 8E 06 A6 |     if_e    mov     p8,#0
00a44                 |           
00a44     4B 91 02 F6 |             mov     qq,tail         ' Check if the buffer is full	
00a48     02 90 86 F1 |             sub     qq,#2
00a4c     FF 91 06 F5 |             and     qq,#511
00a50     F9 91 1A F2 |             cmp     qq,ptrb wcz
00a54     24 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
00a58                 |       
00a58     51 48 07 F6 |             mov     cn,#p201           ' Find the channel to compute
00a5c     9B 4B 03 F6 |             mov     ct,time1        ' with the lowest next sample time
00a60     9C 4B 3B F3 |             fle     ct,time2 wcz   
00a64     68 48 07 C6 |     if_c    mov     cn,#p202 
00a68     9D 4B 3B F3 |             fle     ct,time3 wcz
00a6c     7F 48 07 C6 |     if_c    mov     cn,#p203     
00a70     9E 4B 3B F3 |             fle     ct,time4 wcz
00a74     96 48 07 C6 |     if_c    mov     cn,#p204
00a78     9F 4B 3B F3 |             fle     ct,time5 wcz
00a7c     AD 48 07 C6 |     if_c    mov     cn,#p205 
00a80     A0 4B 3B F3 |             fle     ct,time6 wcz
00a84     C4 48 07 C6 |     if_c    mov     cn,#p206
00a88     A1 4B 3B F3 |             fle     ct,time7 wcz
00a8c     DB 48 07 C6 |     if_c    mov     cn,#p207
00a90     A2 4B 3B F3 |             fle     ct,time8 wcz
00a94     F2 48 07 C6 |     if_c    mov     cn,#p208 
00a98                 |  
00a98     2C 48 63 FD |             jmp     cn
00a9c                 |    
00a9c                 | '----------------------------------------------------------------------------------
00a9c                 | '------------- Compute channel samples --------------------------------------------
00a9c                 | '----------------------------------------------------------------------------------
00a9c                 | 	
00a9c                 | ' ------------  Channel 1
00a9c                 |  
00a9c     9B 4D 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
00aa0     9A 4D 83 F1 |             sub     dt0,time0
00aa4     58 37 03 F1 |             add     time1,freq1    ' compute the next channel time	
00aa8                 | 	        
00aa8     59 81 02 F1 |             add     p1,askip1      ' update the phase accumulator
00aac     55 81 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
00ab0     55 81 82 31 |     if_ge   sub     p1,lend1	        
00ab4     54 81 02 31 |     if_ge   add     p1,lstart1       
00ab8     40 91 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
00abc     52 91 02 F1 |             add     qq,sstart1
00ac0                 |             
00ac0     00 A6 0E F2 |             cmp     type1,#0 wz    ' check the sample type
00ac4     48 93 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
00ac8     08 92 66 50 |     if_nz   shl     spl,#8
00acc     48 93 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
00ad0                 | 
00ad0     56 93 32 FA |             scas    spl,vol1       ' apply the volume
00ad4     00 92 02 F6 |             mov     spl,0-0
00ad8                 | 
00ad8     57 93 32 FA |             scas    spl,apan1      ' apply the pan
00adc     00 52 03 F6 |             mov     ls1,0-0
00ae0     20 00 00 FF 
00ae4     00 90 06 F6 |             mov     qq,##16384
00ae8     57 91 82 F1 |             sub     qq,apan1
00aec     48 93 32 FA |             scas    spl,qq
00af0     00 54 03 F6 |             mov     rs1,0-0
00af4                 |             
00af4     84 02 90 FD |             jmp     #p101              
00af8                 | 	    	
00af8                 | ' ------------  Channel 2
00af8                 |  
00af8     9C 4D 03 F6 | p202        mov     dt0,time2
00afc     9A 4D 83 F1 |             sub     dt0,time0
00b00     61 39 03 F1 |             add     time2,freq2  	
00b04                 | 	        
00b04     62 83 02 F1 |             add     p2,askip2
00b08     5E 83 1A F2 |             cmp     p2,lend2 wcz
00b0c     5E 83 82 31 |     if_ge   sub     p2,lend2	        
00b10     5D 83 02 31 |     if_ge   add     p2,lstart2       
00b14     41 91 02 F6 |             mov     qq,p2
00b18     5B 91 02 F1 |             add     qq,sstart2
00b1c                 | 
00b1c     00 B8 0E F2 |             cmp     type2,#0 wz
00b20     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00b24     08 92 66 50 |     if_nz   shl     spl,#8
00b28     48 93 E2 AA |     if_z    rdword  spl,qq
00b2c                 | 
00b2c     5F 93 32 FA |             scas    spl,vol2
00b30     00 92 02 F6 |             mov     spl,0-0
00b34                 |             
00b34     60 93 32 FA |             scas    spl,apan2
00b38     00 56 03 F6 |             mov     ls2,0-0
00b3c     20 00 00 FF 
00b40     00 90 06 F6 |             mov     qq,##16384
00b44     60 91 82 F1 |             sub     qq,apan2
00b48     48 93 32 FA |             scas    spl,qq
00b4c     00 58 03 F6 |             mov     rs2,0-0
00b50                 |             
00b50     28 02 90 FD |             jmp     #p101
00b54                 | 
00b54                 | ' ------------  Channel 3
00b54                 |  
00b54     9D 4D 03 F6 | p203        mov     dt0,time3
00b58     9A 4D 83 F1 |             sub     dt0,time0
00b5c     6A 3B 03 F1 |             add     time3,freq3  	
00b60                 | 	        
00b60     6B 85 02 F1 |             add     p3,askip3
00b64     67 85 1A F2 |             cmp     p3,lend3 wcz
00b68     67 85 82 31 |     if_ge   sub     p3,lend3	        
00b6c     66 85 02 31 |     if_ge   add     p3,lstart3       
00b70     42 91 02 F6 |             mov     qq,p3
00b74     64 91 02 F1 |             add     qq,sstart3
00b78                 |             
00b78     00 CA 0E F2 |             cmp     type3,#0 wz
00b7c     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00b80     08 92 66 50 |     if_nz   shl     spl,#8
00b84     48 93 E2 AA |     if_z    rdword  spl,qq
00b88                 | 
00b88     68 93 32 FA |             scas    spl,vol3
00b8c     00 92 02 F6 |             mov     spl,0-0
00b90                 |     	
00b90     69 93 32 FA |             scas    spl,apan3
00b94     00 5A 03 F6 |             mov     ls3,0-0
00b98                 |             
00b98     20 00 00 FF 
00b9c     00 90 06 F6 |             mov     qq,##16384
00ba0     69 91 82 F1 |             sub     qq,apan3
00ba4     48 93 32 FA |             scas    spl,qq
00ba8     00 5C 03 F6 |             mov     rs3,0-0
00bac                 | 
00bac     CC 01 90 FD |             jmp     #p101
00bb0                 |             
00bb0                 | ' ------------  Channel 4
00bb0                 |  
00bb0     9E 4D 03 F6 | p204        mov     dt0,time4
00bb4     9A 4D 83 F1 |             sub     dt0,time0
00bb8     73 3D 03 F1 |             add     time4,freq4  	
00bbc                 | 
00bbc                 | 	        
00bbc     74 87 02 F1 |             add     p4,askip4
00bc0     70 87 1A F2 |             cmp     p4,lend4 wcz
00bc4     70 87 82 31 |     if_ge   sub     p4,lend4	        
00bc8     6F 87 02 31 |     if_ge   add     p4,lstart4       
00bcc     43 91 02 F6 |             mov     qq,p4
00bd0     6D 91 02 F1 |             add     qq,sstart4
00bd4                 |             
00bd4     00 DC 0E F2 |             cmp     type4,#0 wz
00bd8     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00bdc     08 92 66 50 |     if_nz   shl     spl,#8
00be0     48 93 E2 AA |     if_z    rdword  spl,qq
00be4                 | 
00be4     71 93 32 FA |             scas    spl,vol4
00be8     00 92 02 F6 |             mov     spl,0-0
00bec                 |     	
00bec     72 93 32 FA |             scas    spl,apan4
00bf0     00 60 03 F6 |             mov     ls4,0-0
00bf4                 |             
00bf4     20 00 00 FF 
00bf8     00 90 06 F6 |             mov     qq,##16384
00bfc     72 91 82 F1 |             sub     qq,apan4
00c00     48 93 32 FA |             scas    spl,qq
00c04     00 5E 03 F6 |             mov     rs4,0-0
00c08                 | 
00c08     70 01 90 FD |             jmp     #p101
00c0c                 |             
00c0c                 | ' ------------  Channel 5
00c0c                 |  
00c0c     9F 4D 03 F6 | p205        mov     dt0,time5
00c10     9A 4D 83 F1 |             sub     dt0,time0
00c14     7C 3F 03 F1 |             add     time5,freq5  	
00c18                 | 
00c18                 | 	        
00c18     7D 89 02 F1 |             add     p5,askip5
00c1c     79 89 1A F2 |             cmp     p5,lend5 wcz
00c20     79 89 82 31 |     if_ge   sub     p5,lend5	        
00c24     78 89 02 31 |     if_ge   add     p5,lstart5       
00c28     44 91 02 F6 |             mov     qq,p5
00c2c     76 91 02 F1 |             add     qq,sstart5
00c30                 |             
00c30     00 EE 0E F2 |             cmp     type5,#0 wz
00c34     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00c38     08 92 66 50 |     if_nz   shl     spl,#8
00c3c     48 93 E2 AA |     if_z    rdword  spl,qq
00c40                 | 
00c40     7A 93 32 FA |             scas    spl,vol5
00c44     00 92 02 F6 |             mov     spl,0-0
00c48                 |     	
00c48     7B 93 32 FA |             scas    spl,apan5
00c4c     00 64 03 F6 |             mov     ls5,0-0
00c50                 |             
00c50     20 00 00 FF 
00c54     00 90 06 F6 |             mov     qq,##16384
00c58     7B 91 82 F1 |             sub     qq,apan5
00c5c     48 93 32 FA |             scas    spl,qq
00c60     00 62 03 F6 |             mov     rs5,0-0
00c64                 | 
00c64     14 01 90 FD |             jmp     #p101
00c68                 |   
00c68                 | ' ------------  Channel 6
00c68                 |  
00c68     A0 4D 03 F6 | p206        mov     dt0,time6
00c6c     9A 4D 83 F1 |             sub     dt0,time0
00c70     85 41 03 F1 |             add     time6,freq6  	
00c74                 | 
00c74                 | 	        
00c74     86 8B 02 F1 |             add     p6,askip6
00c78     82 8B 1A F2 |             cmp     p6,lend6 wcz
00c7c     82 8B 82 31 |     if_ge   sub     p6,lend6	        
00c80     81 8B 02 31 |     if_ge   add     p6,lstart6       
00c84     45 91 02 F6 |             mov     qq,p6
00c88     7F 91 02 F1 |             add     qq,sstart6
00c8c                 |             
00c8c     00 00 0F F2 |             cmp     type6,#0 wz
00c90     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00c94     08 92 66 50 |     if_nz   shl     spl,#8
00c98     48 93 E2 AA |     if_z    rdword  spl,qq
00c9c                 | 
00c9c     83 93 32 FA |             scas    spl,vol6
00ca0     00 92 02 F6 |             mov     spl,0-0
00ca4                 |     	
00ca4     84 93 32 FA |             scas    spl,apan6
00ca8     00 68 03 F6 |             mov     ls6,0-0
00cac                 |             
00cac     20 00 00 FF 
00cb0     00 90 06 F6 |             mov     qq,##16384
00cb4     84 91 82 F1 |             sub     qq,apan6
00cb8     48 93 32 FA |             scas    spl,qq
00cbc     00 66 03 F6 |             mov     rs6,0-0
00cc0                 | 
00cc0     B8 00 90 FD |             jmp     #p101
00cc4                 |             
00cc4                 | ' ------------  Channel 7
00cc4                 |  
00cc4     A1 4D 03 F6 | p207        mov     dt0,time7
00cc8     9A 4D 83 F1 |             sub     dt0,time0
00ccc     8E 43 03 F1 |             add     time7,freq7  	
00cd0                 | 
00cd0                 | 	        
00cd0     8F 8D 02 F1 |             add     p7,askip7
00cd4     8B 8D 1A F2 |             cmp     p7,lend7 wcz
00cd8     8B 8D 82 31 |     if_ge   sub     p7,lend7	        
00cdc     8A 8D 02 31 |     if_ge   add     p7,lstart7       
00ce0     46 91 02 F6 |             mov     qq,p7
00ce4     88 91 02 F1 |             add     qq,sstart7
00ce8                 |             
00ce8     00 12 0F F2 |             cmp     type7,#0 wz
00cec     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00cf0     08 92 66 50 |     if_nz   shl     spl,#8
00cf4     48 93 E2 AA |     if_z    rdword  spl,qq
00cf8                 | 
00cf8     8C 93 32 FA |             scas    spl,vol7
00cfc     00 92 02 F6 |             mov     spl,0-0
00d00                 |     	
00d00     8D 93 32 FA |             scas    spl,apan7
00d04     00 6C 03 F6 |             mov     ls7,0-0
00d08                 |             
00d08     20 00 00 FF 
00d0c     00 90 06 F6 |             mov     qq,##16384
00d10     8D 91 82 F1 |             sub     qq,apan7
00d14     48 93 32 FA |             scas    spl,qq
00d18     00 6A 03 F6 |             mov     rs7,0-0
00d1c                 | 
00d1c     5C 00 90 FD |             jmp     #p101     
00d20                 |                    
00d20                 | ' ------------  Channel 8
00d20                 |  
00d20     A2 4D 03 F6 | p208        mov     dt0,time8
00d24     9A 4D 83 F1 |             sub     dt0,time0
00d28     97 45 03 F1 |             add     time8,freq8  	
00d2c                 | 
00d2c                 | 	        
00d2c     98 8F 02 F1 |             add     p8,askip8
00d30     94 8F 1A F2 |             cmp     p8,lend8 wcz
00d34     94 8F 82 31 |     if_ge   sub     p8,lend8	        
00d38     93 8F 02 31 |     if_ge   add     p8,lstart8       
00d3c     47 91 02 F6 |             mov     qq,p8
00d40     91 91 02 F1 |             add     qq,sstart8
00d44                 |             
00d44     00 24 0F F2 |             cmp     type8,#0 wz
00d48     48 93 C2 5A |     if_nz   rdbyte  spl,qq
00d4c     08 92 66 50 |     if_nz   shl     spl,#8
00d50     48 93 E2 AA |     if_z    rdword  spl,qq
00d54                 | 
00d54     95 93 32 FA |             scas    spl,vol8
00d58     00 92 02 F6 |             mov     spl,0-0
00d5c                 |     	
00d5c     96 93 32 FA |             scas    spl,apan8
00d60     00 70 03 F6 |             mov     ls8,0-0
00d64                 |             
00d64     20 00 00 FF 
00d68     00 90 06 F6 |             mov     qq,##16384
00d6c     96 91 82 F1 |             sub     qq,apan8
00d70     48 93 32 FA |             scas    spl,qq
00d74     00 6E 03 F6 |             mov     rs8,0-0
00d78                 | 
00d78     00 00 90 FD |             jmp     #p101            
00d7c                 |             
00d7c                 | '------------------------ Channels end here --------------------       
00d7c                 | 
00d7c                 | ' Now add all channels and put the sample to the buffer    
00d7c                 | 
00d7c                 | 
00d7c     9A 47 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
00d80     02 94 86 A1 |     if_z    sub     front,#2         ' 
00d84     FF 95 06 A5 |     if_z    and     front,#511     
00d88                 |   
00d88     00 50 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
00d8c     00 4E 07 F6 |             mov     ls,#0
00d90     AA 51 03 F1 |             add     rs,rs1
00d94     AC 51 03 F1 |             add     rs,rs2
00d98     AE 51 03 F1 |             add     rs,rs3
00d9c     AF 51 03 F1 |             add     rs,rs4
00da0     B1 51 03 F1 |             add     rs,rs5
00da4     B3 51 03 F1 |             add     rs,rs6
00da8     B5 51 03 F1 |             add     rs,rs7
00dac     B7 51 03 F1 |             add     rs,rs8
00db0                 |             
00db0     A9 4F 03 F1 |             add     ls,ls1
00db4     AB 4F 03 F1 |             add     ls,ls2
00db8     AD 4F 03 F1 |             add     ls,ls3
00dbc     B0 4F 03 F1 |             add     ls,ls4
00dc0     B2 4F 03 F1 |             add     ls,ls5
00dc4     B4 4F 03 F1 |             add     ls,ls6
00dc8     B6 4F 03 F1 |             add     ls,ls7
00dcc     B8 4F 03 F1 |             add     ls,ls8
00dd0                 |  		
00dd0     0F 4E E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
00dd4     0F 50 E7 F4 |             bitnot  rs,#15		
00dd8                 | 		
00dd8     A7 51 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
00ddc     4A 51 33 FC |             wrlut   rs,front         ' and write it to LUT
00de0     4A 93 02 F6 |             mov     spl,front        ' avoid incrementing front 1 by 1 
00de4     01 92 06 F1 |             add     spl,#1           
00de8                 | 
00de8     9A 91 02 F6 |             mov     qq,time0
00dec     3E 91 02 F5 |             and     qq,a1fffffff
00df0     49 91 32 FC |             wrlut   qq,spl
00df4                 | 
00df4     01 04 DC FC |             rep     #2, #1 
00df8     02 94 06 F1 |             add     front,#2         ' move the front pointer
00dfc     FF 95 06 F5 |             and     front,#511       ' and loop at #512
00e00     9A 47 03 F6 |             mov     oldt0,time0      ' update global time
00e04     A6 35 03 F1 |             add     time0,dt0     
00e08                 |             
00e08                 |                
00e08     80 90 66 FC |             wrlong  qq,#$80          'debug
00e0c                 | '               wrlong time1,#$84
00e0c                 | ''               wrlong time2,#$88
00e0c                 | '               wrlong time3,#$8c
00e0c                 | '               wrlong time4,#$90
00e0c                 |                
00e0c     6C FB 9F FD |             jmp     #loop            'loop
00e10                 | 
00e10                 | '-------------------------------------------------------------------------
00e10                 | '------------------ This is the end of the main loop ---------------------
00e10                 | '-------------------------------------------------------------------------
00e10                 | 
00e10                 | '--------------------------------------------------------------------------
00e10                 | '------ Interrupt service -------------------------------------------------
00e10                 | '------ Output the sample, get the next one if exists ---------------------
00e10                 | '--------------------------------------------------------------------------
00e10                 | 
00e10     0E 9A 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
00e14     0F 9C 26 FC |             wypin   rsample,#right       '4
00e18                 | 										
00e18     01 98 06 F1 |             add     counter,#1           '6     Increment the counter
00e1c     3E 99 02 F5 |             and     counter,a1fffffff
00e20     51 99 1A F2 |             cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
00e24     F5 FF 3B 5B |     if_ne   reti1                        '10/12 If not, do nothing
00e28                 | 		
00e28     4F 9D 3A F9 |           	getword rsample,lsnext,#1    '12
00e2c     4F 9B 32 F9 |           	getword lsample,lsnext,#0    '14
00e30     4A F3 1B F2 |             cmp     ptrb,front wcz       '16    If the buffer is empty, do nothing 
00e34     F5 FF 3B AB |             if_e    reti1                '18/20
00e38                 | 
00e38     80 9F A6 FA |             rdlut   lsnext,ptrb          '21    else read the sample and its time from LUT
00e3c     01 F2 07 F1 |             add     ptrb, #1             '23
00e40     80 A3 A6 FA |             rdlut   irqtime,ptrb         '26    Read the time for this sample
00e44     01 F2 07 F1 |             add     ptrb,#1              '28    Go to the next entry
00e48     FF F3 07 F5 |             and     ptrb,#511            '30
00e4c     F5 FF 3B FB |             reti1                        '34 
00e50                 |             
00e50                 |          '' 3 nops left    
00e50                 |           
00e50                 | '---------------------------------------------------------------------------
00e50                 | '-------- End of interrupt -------------------------------------------------
00e50                 | '---------------------------------------------------------------------------    
00e50                 | 
00e50                 | '---------------------------------------------------------------------------
00e50                 | '------- Variables ---------------------------------------------------------
00e50                 | '---------------------------------------------------------------------------
00e50                 | 
00e50                 | ' constants
00e50                 | 
00e50     FF FF FF 1F | a1fffffff long $1fffffff
00e54     00 00 00 20 | a20000000 long $20000000
00e58                 | 
00e58                 | ' phase accumulators
00e58                 | 
00e58     00 00 00 00 | p1          long 0
00e5c     00 00 00 00 | p2          long 0
00e60     00 00 00 00 | p3          long 0
00e64     00 00 00 00 | p4          long 0
00e68     00 00 00 00 | p5          long 0
00e6c     00 00 00 00 | p6          long 0
00e70     00 00 00 00 | p7          long 0
00e74     00 00 00 00 | p8          long 0
00e78                 | 
00e78                 | ' temporary variables 
00e78                 | 
00e78     00 00 00 00 | qq          long 0
00e7c     00 00 00 00 | spl         long 0
00e80                 | 
00e80                 | ' circular buffer in LUT
00e80                 | 
00e80     00 00 00 00 | front       long 0
00e84     00 00 00 00 | tail        long 0
00e88                 | 
00e88                 | ' Interrupt ISR variables
00e88                 | 
00e88     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
00e8c     00 00 00 00 | lsample     long 0
00e90     00 00 00 00 | rsample     long 0
00e94     00 00 00 00 | lsnext      long 0
00e98     00 00 00 00 | rsnext      long 0 
00e9c     00 00 00 00 | irqtime     long 0
00ea0                 | 
00ea0                 | ' Channel 1 registers. TODO - optimize the memory usage
00ea0                 | 
00ea0     00 00 00 00 | sstart1     long 0       ' Sample start pointer
00ea4     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
00ea8     00 00 00 00 | lstart1     long 0       ' Loop start
00eac     02 00 00 00 | lend1       long 2       ' Loop end
00eb0     00 00 00 00 | vol1        long 0       ' volume, 0..16384
00eb4     00 00 00 00 | apan1       long 0       ' pan, 0..16384
00eb8     65 00 00 00 | freq1       long 101     ' frequency divider
00ebc     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
00ec0     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
00ec4                 | 
00ec4                 | ' Channel 2 registers
00ec4                 | 
00ec4     00 00 00 00 | sstart2     long 0
00ec8     00 00 00 00 | type2       long 0
00ecc     00 00 00 00 | lstart2     long 0
00ed0     02 00 00 00 | lend2       long 2        		
00ed4     00 00 00 00 | vol2        long 0
00ed8     00 00 00 00 | apan2       long 0
00edc     67 00 00 00 | freq2       long 103
00ee0     02 00 00 00 | askip2      long 2
00ee4     00 00 00 00 | acmd2       long 0
00ee8                 | 
00ee8                 | ' Channel 3 registers
00ee8                 | 
00ee8     00 00 00 00 | sstart3     long 0
00eec     00 00 00 00 | type3       long 0
00ef0     00 00 00 00 | lstart3     long 0
00ef4     02 00 00 00 | lend3       long 2       		'
00ef8     00 00 00 00 | vol3        long 0
00efc     00 00 00 00 | apan3       long 0
00f00     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
00f04     02 00 00 00 | askip3      long 2
00f08     00 00 00 00 | acmd3       long 0
00f0c                 | 
00f0c                 | ' Channel 4 registers
00f0c                 | 
00f0c     00 00 00 00 | sstart4     long 0
00f10     00 00 00 00 | type4       long 0
00f14     00 00 00 00 | lstart4     long 0
00f18     02 00 00 00 | lend4       long 2       		'
00f1c     00 00 00 00 | vol4        long 0
00f20     00 00 00 00 | apan4       long 0
00f24     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
00f28     02 00 00 00 | askip4      long 2
00f2c     00 00 00 00 | acmd4       long 0
00f30                 | 
00f30                 | ' Channel 5 registers
00f30                 | 
00f30     00 00 00 00 | sstart5     long 0
00f34     00 00 00 00 | type5       long 0
00f38     00 00 00 00 | lstart5     long 0
00f3c     02 00 00 00 | lend5       long 2       		'
00f40     00 00 00 00 | vol5        long 0
00f44     00 00 00 00 | apan5       long 0
00f48     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
00f4c     02 00 00 00 | askip5      long 2
00f50     00 00 00 00 | acmd5       long 0
00f54                 | 
00f54                 | ' Channel 6 registers
00f54                 | 
00f54     00 00 00 00 | sstart6     long 0
00f58     00 00 00 00 | type6       long 0
00f5c     00 00 00 00 | lstart6     long 0
00f60     02 00 00 00 | lend6       long 2       		'
00f64     00 00 00 00 | vol6        long 0
00f68     00 00 00 00 | apan6       long 0
00f6c     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
00f70     02 00 00 00 | askip6      long 2
00f74     00 00 00 00 | acmd6       long 0
00f78                 | 
00f78                 | ' Channel 7 registers
00f78                 | 
00f78     00 00 00 00 | sstart7     long 0
00f7c     00 00 00 00 | type7       long 0
00f80     00 00 00 00 | lstart7     long 0
00f84     02 00 00 00 | lend7       long 2       		'
00f88     00 00 00 00 | vol7        long 0
00f8c     00 00 00 00 | apan7       long 0
00f90     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
00f94     02 00 00 00 | askip7      long 2
00f98     00 00 00 00 | acmd7       long 0
00f9c                 | 
00f9c                 | ' Channel 8 registers
00f9c                 | 
00f9c     00 00 00 00 | sstart8     long 0
00fa0     00 00 00 00 | type8       long 0
00fa4     00 00 00 00 | lstart8     long 0
00fa8     02 00 00 00 | lend8       long 2       		'
00fac     00 00 00 00 | vol8        long 0
00fb0     00 00 00 00 | apan8       long 0
00fb4     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
00fb8     02 00 00 00 | askip8      long 2
00fbc     00 00 00 00 | acmd8       long 0
00fc0                 | 
00fc0                 | ' Time variables
00fc0                 | 
00fc0     00 00 00 00 | time0       long 0    ' Global sample computing time
00fc4     01 00 00 00 | time1       long 1    ' Local channels time
00fc8     02 00 00 00 | time2       long 2
00fcc     03 00 00 00 | time3       long 3
00fd0     04 00 00 00 | time4       long 4
00fd4     05 00 00 00 | time5       long 5
00fd8     06 00 00 00 | time6       long 6
00fdc     07 00 00 00 | time7       long 7
00fe0     08 00 00 00 | time8       long 8
00fe4                 | 
00fe4     00 00 00 00 | oldt0       long 0    'Temporary time variables
00fe8     00 00 00 00 | cn          long 0
00fec     00 00 00 00 | ct          long 0
00ff0     00 00 00 00 | dt0         long 0
00ff4                 | 
00ff4                 | ' Samples
00ff4                 | 
00ff4     00 00 00 00 | ls          long 0    ' Global sample variable
00ff8     00 00 00 00 | rs          long 0
00ffc                 | 
00ffc     00 00 00 00 | ls1         long 0    ' Channel samples
01000     00 00 00 00 | rs1         long 0
01004     00 00 00 00 | ls2         long 0
01008     00 00 00 00 | rs2         long 0
0100c     00 00 00 00 | ls3         long 0
01010     00 00 00 00 | rs3         long 0
01014     00 00 00 00 | rs4         long 0
01018     00 00 00 00 | ls4         long 0
0101c     00 00 00 00 | rs5         long 0
01020     00 00 00 00 | ls5         long 0
01024     00 00 00 00 | rs6         long 0
01028     00 00 00 00 | ls6         long 0
0102c     00 00 00 00 | rs7         long 0
01030     00 00 00 00 | ls7         long 0
01034     00 00 00 00 | rs8         long 0
01038     00 00 00 00 | ls8         long 0
0103c                 | 
0103c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
01040                 | 
01040     00 00 00 00 
01044     00 00 00 00 | null  			long 	0,0           ' for channel reset
01048                 | objmem
01048     00 00 00 00 | 	long	0[1]
0104c 0b0             | 	org	COG_BSS_START
0104c 0b0             | arg01
0104c 0b0             | 	res	1
0104c 0b1             | arg02
0104c 0b1             | 	res	1
0104c 0b2             | arg03
0104c 0b2             | 	res	1
0104c 0b3             | arg04
0104c 0b3             | 	res	1
0104c 0b4             | 	fit	480
0104c 0b4             | 
